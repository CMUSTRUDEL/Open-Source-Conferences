Title: Native BigInts in JavaScript: A Case Study in TC39 - Daniel Ehrenberg - JSConf EU 2018
Publication date: 2018-07-02
Playlist: JSConf EU 2018
Description: 
	Quick, what do you get when you increment Math.pow(2, 53)? If you said Math.pow(2, 53), you may be a JavaScript programmer.

From the beginning, JavaScript has supported 64-bit binary floats as its sole numeric type. In this talk, Iâ€™ll explain how, through TC39, JavaScript developers are working together with JS engine implementers and spec wonks like me to create BigInt: a native, unlimited-size integer type.

Through collaboration, any layer of software can be changed, even the language itself.
Captions: 
	00:00:10,500 --> 00:00:16,500
I'm Daniel Ehrenberg and I work in TC39 and I came here to tell you about bigint

00:00:16,560 --> 00:00:17,970
Let's talk about numbers.

00:00:17,970 --> 00:00:23,119
Math.pow(2, 53) is a function that can take a number to a particular power.

00:00:23,119 --> 00:00:25,750
X will be to the 53rd power.

00:00:25,750 --> 00:00:29,980
You can write two to **53.

00:00:29,980 --> 00:00:31,660
What does that equal?

00:00:31,660 --> 00:00:33,860
Starting with a nine and ending with a two.

00:00:33,860 --> 00:00:37,130
What do you get if you add one to that?

00:00:37,130 --> 00:00:39,430
Two to the 53 plus one.

00:00:39,430 --> 00:00:40,430
The same number back.

00:00:40,430 --> 00:00:46,020
A huge number, nine end, a two before what is going on?

00:00:46,020 --> 00:00:53,280
In this talk, I will tell you about why numbers do this, how we can fix this using BigInt,

00:00:53,280 --> 00:00:58,330
and how TC39 has been developing BigInt in partnership with the JavaScript community,

00:00:58,330 --> 00:01:02,830
and how you can get involved to shape the next version of JavaScript.

00:01:02,830 --> 00:01:05,689
I really want your help in all of this.

00:01:05,689 --> 00:01:07,890
We can't do it without you.

00:01:07,890 --> 00:01:15,240
So, first about numbers: numbers in JavaScript are 64-bit floats, floating point, binary,

00:01:15,240 --> 00:01:16,250
numbers.

00:01:16,250 --> 00:01:19,729
So that is basically like scientific notation.

00:01:19,729 --> 00:01:26,479
Remember, from grade school, 30,000, you could represent as 3 times ten to the five?

00:01:26,479 --> 00:01:28,880
Here, the component would be 5.

00:01:28,880 --> 00:01:33,400
The sine is positive 1 and the fraction is 3.

00:01:33,400 --> 00:01:39,481
I triple e - it's base two instead of base ten.

00:01:39,481 --> 00:01:46,819
We have the sign that is one bit, and the component which is 11 bit, and the fraction,

00:01:46,819 --> 00:01:49,389
52 bits.

00:01:49,389 --> 00:01:57,299
So, our friend 2 to the 53rd power looks like this when you put it in a floating point.

00:01:57,299 --> 00:02:00,009
Sine is zero to represent positive 1.

00:02:00,009 --> 00:02:04,939
Component is that number starting with a 1, and the fraction is all zeros.

00:02:04,939 --> 00:02:08,780
It has an implicit 1-point before the zeroes.

00:02:08,780 --> 00:02:12,319
The next biggest number is that ending with a four.

00:02:12,319 --> 00:02:18,830
If you look at the last digit, the last digit of this number ending a 2 is 0, and the one

00:02:18,830 --> 00:02:20,230
being 1 is 1.

00:02:20,230 --> 00:02:22,510
There are actually no numbers in between.

00:02:22,510 --> 00:02:26,610
When I say "number", I mean the binary floating point numbers.

00:02:26,610 --> 00:02:32,240
Ultimately, if we are representing something in 64 bits, there is only 2 to the 64 different

00:02:32,240 --> 00:02:37,250
bit pattern, so we can't represent every single actual number that exists in the world, or

00:02:37,250 --> 00:02:38,260
every single integer.

00:02:38,260 --> 00:02:44,400
At some point, we have to round or go up to infinity or have an error.

00:02:44,400 --> 00:02:46,900
This seems like a random case.

00:02:46,900 --> 00:02:50,200
This never comes up in practice.

00:02:50,200 --> 00:02:57,050
It turns out it president in Twitter's API, there's an ID field, tweets represented by

00:02:57,050 --> 00:03:01,849
good afternoon, objects, and the idea that you get over the network looks like this,

00:03:01,849 --> 00:03:06,000
this big number ending in 888.

00:03:06,000 --> 00:03:12,610
When you parse that in JavaScript, it gets converted to a number.

00:03:12,610 --> 00:03:17,570
So, the 8, 888 rounds to 900.

00:03:17,570 --> 00:03:25,480
For this reason, Twitter includes a secondary field, ID string, which is a string of the

00:03:25,480 --> 00:03:30,800
number, and that doesn't round, but people run into this as a problem all the tile.

00:03:30,800 --> 00:03:36,360
Like it's kind of easier to use the ID rather than the ID stream, and it's hard for Twitter

00:03:36,360 --> 00:03:38,280
to remove it because of compatibility.

00:03:38,280 --> 00:03:43,430
Sometimes, the numbers don't overflow, like in that second line in this bug, but other

00:03:43,430 --> 00:03:48,400
times, they do, and you just are referring to the wrong object.

00:03:48,400 --> 00:03:52,909
Another case this comes up is inode numbers.

00:03:52,909 --> 00:03:59,290
Each file is generally associated with a number, a pointer to the file.

00:03:59,290 --> 00:04:06,079
Node.js includes an API called stat to read the inode numbers on a file.

00:04:06,079 --> 00:04:11,099
On Linux, inode numbers are often kind of low, but on Windows, they can be high and

00:04:11,099 --> 00:04:13,680
run into the same kind of rounding issue.

00:04:13,680 --> 00:04:19,730
So this L stat sync, there's a reproducible test case where you can create a couple of

00:04:19,730 --> 00:04:25,180
files in that folder which have inode numbers which one of them ending in 27 but then it

00:04:25,180 --> 00:04:32,580
rounds up to the same 28.

00:04:32,580 --> 00:04:36,960
If you try to parse those numbers back to the system again, it is not going to work.

00:04:36,960 --> 00:04:40,660
It is the wrong number.

00:04:40,660 --> 00:04:51,380
To get around these kinds of problems, there are libraries created which gives you an object

00:04:51,380 --> 00:04:58,390
API for this where you can instantiate a new big num and call methods on it to add or things

00:04:58,390 --> 00:04:59,390
like that.

00:04:59,390 --> 00:05:05,949
There are some limitations here, because it's not integrated into the system, so, if you

00:05:05,949 --> 00:05:11,090
have something else in the standard library, or in the web platform or node, it's not obvious

00:05:11,090 --> 00:05:12,550
how to integrate with this.

00:05:12,550 --> 00:05:20,340
It's not optimisable so the JavaScript engine can't use knowledge of mathematics to make

00:05:20,340 --> 00:05:21,340
it faster.

00:05:21,340 --> 00:05:27,150
It is an extra thing to download and integrate which is difficult in some projects.

00:05:27,150 --> 00:05:30,419
So, what if we had this in JavaScript itself?

00:05:30,419 --> 00:05:35,750
Going back to the original example, where we add one and we get the same number back

00:05:35,750 --> 00:05:43,450
again, what if we could indicate that we want to refer just to integers using a sufficient

00:05:43,450 --> 00:05:44,450
if I can like n?

00:05:44,450 --> 00:05:47,580
2n to the 53n would be the same number starting with a 9 and ending with a 2, but when you

00:05:47,580 --> 00:05:51,430
add 1 into it, you get 3 at the end.

00:05:51,430 --> 00:05:54,290
N here, the 2 goes to 3.

00:05:54,290 --> 00:05:57,990
N here stands for BigInt.

00:05:57,990 --> 00:05:59,539
Is this JavaScript?

00:05:59,539 --> 00:06:00,949
It is.

00:06:00,949 --> 00:06:01,949
Soon.

00:06:01,949 --> 00:06:08,060
BigInt is at stage 3 in TC39, and we are adding it to the JavaScript programming language.

00:06:08,060 --> 00:06:15,830
It is shipping in Chrome now as of a few days ago, shipping in Chrome 57, and node Master

00:06:15,830 --> 00:06:17,740
is, BigInt is being supported.

00:06:17,740 --> 00:06:22,580
BigInt is is being being supported in Firefox and South Africa are an as well and on the

00:06:22,580 --> 00:06:24,460
road map for Edge.

00:06:24,460 --> 00:06:35,710
What is TC39 do my JavaScript in ES6 gave you nice features like destructuring.

00:06:35,710 --> 00:06:41,520
If you had two variables, X and Y, you can swap them by putting in an array on the left-hand

00:06:41,520 --> 00:06:45,020
side and just swapping them.

00:06:45,020 --> 00:06:51,380
And so this and other things like asynch await were added by TC39.

00:06:51,380 --> 00:06:57,030
TC39 is a standards committee that is part of Ecma.

00:06:57,030 --> 00:07:05,860
Ecma is this standards body based in Geneva, sort of administrative support, but then we

00:07:05,860 --> 00:07:11,720
in the committee are JavaScript developers, implementers, people who are making JavaScript

00:07:11,720 --> 00:07:17,060
work in web browsers, and node, and Babel.

00:07:17,060 --> 00:07:33,250
Framework authors like Angular, ember, and React, and we all get together to produce

00:07:33,250 --> 00:07:37,090
this document: the Ecma Script Language Specification.

00:07:37,090 --> 00:07:42,840
If you were to print this out, it would be more than 1,200 pages.

00:07:42,840 --> 00:07:45,860
I recommend just looking at the website.

00:07:45,860 --> 00:07:49,710
It has these nice searching features.

00:07:49,710 --> 00:07:51,780
We developed this document on GitHub.

00:07:51,780 --> 00:07:58,479
It's an open-scores project like any other with issues and pull requests, and we also

00:07:58,479 --> 00:08:03,259
develop it at meetings, so here, there's a part of an agenda for the meetings.

00:08:03,259 --> 00:08:08,580
We always seem to run over a little bit on the agenda, but we meet every two twos more

00:08:08,580 --> 00:08:15,140
three days, and we talk about the activity on GitHub, and we also talk about new proposals

00:08:15,140 --> 00:08:18,440
to be extending the language.

00:08:18,440 --> 00:08:23,169
These proposals move through stages, so, if it is a big proposal like BigInt, we don't

00:08:23,169 --> 00:08:27,909
just have a pull request against the main spec and start with that, we instead make

00:08:27,909 --> 00:08:29,349
a separate proposal.

00:08:29,349 --> 00:08:32,159
It goes through these stages.

00:08:32,159 --> 00:08:38,200
You might have heard of stage 1 is just a general idea, we're justifying a problem space

00:08:38,200 --> 00:08:41,039
within the committee.

00:08:41,039 --> 00:08:47,810
Stage 2 means that we have an agreed-on first draft that TC39 has decided we are going to

00:08:47,810 --> 00:08:54,060
do something here, and it's going to look more or less like this.

00:08:54,060 --> 00:08:59,900
By stage 3, all the details are worked out, and we have a complete first specification,

00:08:59,900 --> 00:09:03,570
and it's ready to go off to implementers.

00:09:03,570 --> 00:09:11,279
And by stage 4, we have multiple implementations, and lots of feedback from real usage, so we're

00:09:11,279 --> 00:09:15,800
ready to make it part of the actual JavaScript standard.

00:09:15,800 --> 00:09:20,579
So how did BigInt and through this process?

00:09:20,579 --> 00:09:25,640
Actually, BigInt s or n64 has been in environment for longer than the stage process, longer

00:09:25,640 --> 00:09:27,170
than Chrome and Node.

00:09:27,170 --> 00:09:36,870
Back in 1999, after JavaScript was created, long and you long types were proposed, holding

00:09:36,870 --> 00:09:39,970
unsigned 64-bit integers.

00:09:39,970 --> 00:09:49,180
This 3, that update was expansions to the library, like regular expressions.

00:09:49,180 --> 00:09:55,800
ES4 was this huge project that was thinking of adding these types but it got so complicated

00:09:55,800 --> 00:10:03,470
that it just had to be abandoned be, and, in ES5 to recover and heal from that process,

00:10:03,470 --> 00:10:08,220
the language changes were really minimal, and included things like cleaning up the object

00:10:08,220 --> 00:10:13,690
model, and eval, and a view other library editions - a few other library editions.

00:10:13,690 --> 00:10:20,110
E6 made a whole bunch of changes, such as this destructuring assignment that I mentioned.

00:10:20,110 --> 00:10:24,620
As part of ES6, the committee was talking about adding value types, which would have

00:10:24,620 --> 00:10:31,389
been user-de fined data types, so user-defined primitives.

00:10:31,389 --> 00:10:36,610
You can already define your own objects but you can't define your own thing as a JavaScript

00:10:36,610 --> 00:10:39,810
programmer.

00:10:39,810 --> 00:10:45,190
We're still talking about doing value types, but they weren't added in ES6 but deferred

00:10:45,190 --> 00:10:48,250
until later.

00:10:48,250 --> 00:10:56,800
Long history of not jet doing larger integers, but then recently, in November 2016, Brendan

00:10:56,800 --> 00:11:02,290
Eich proposed again to the committee that we do in 64, rather than coupling it to the

00:11:02,290 --> 00:11:09,540
whole value-type package, in 64, and unsigned in 64 was proposed as a standalone proposal,

00:11:09,540 --> 00:11:17,730
to add this one new primitive type.

00:11:17,730 --> 00:11:20,080
We wanted to do it rather than BigInt rather than 64.

00:11:20,080 --> 00:11:22,959
I will talk more about the reasons in a bit.

00:11:22,959 --> 00:11:28,649
Then, by the July, we got to see ... process.

00:11:28,649 --> 00:11:33,370
Now shipping in 67.

00:11:33,370 --> 00:11:36,190
Let's go over how this happens in more detail.

00:11:36,190 --> 00:11:46,430
For stage one, what you need is to have a description of the problem, and so, what we

00:11:46,430 --> 00:12:04,620
did in TC39 is create this ... [sound distorted].

00:12:04,620 --> 00:12:10,410
... inviting various members participate to give opinions about various different semantic

00:12:10,410 --> 00:12:11,470
points.

00:12:11,470 --> 00:12:18,370
So, a couple of big discussions that we went through were big - I mentioned in the history

00:12:18,370 --> 00:12:23,649
that much of the time we've been discussing adding 64-bit integers to the language rather

00:12:23,649 --> 00:12:27,350
than adding other tree size integers.

00:12:27,350 --> 00:12:33,160
Some of the reasons for that were some people felt like it would be a more minimal addition,

00:12:33,160 --> 00:12:39,040
so, if you have a 64-bit integer, it would overflow or throw an exception when you get

00:12:39,040 --> 00:12:44,380
out of bounds.

00:12:44,380 --> 00:12:45,380
That could work.

00:12:45,380 --> 00:12:47,480
For a lot of the applications, it works.

00:12:47,480 --> 00:12:50,080
The whole point of the proposal is to avoid the overflow.

00:12:50,080 --> 00:12:53,660
Sometimes, 64 bits is enough.

00:12:53,660 --> 00:12:59,529
People thought this would be maybe easier to convince browsers to implement, or it might

00:12:59,529 --> 00:13:06,899
execute faster, but, when we talked more with the browsers, actually benefit from the V8

00:13:06,899 --> 00:13:11,790
team, sort of led this effort to re consider arbitrary sized integers.

00:13:11,790 --> 00:13:16,209
This way, you never have to worry about overflow, and it actually turns out that the way that

00:13:16,209 --> 00:13:22,990
modern JavaScript engines work, they have machinery for doing this sort of optimisation

00:13:22,990 --> 00:13:29,250
for working with numbers in particular ranges, to convert them to integers.

00:13:29,250 --> 00:13:37,550
And, at the same time, n64 wouldn't be that fast without all sorts of optimisations, because

00:13:37,550 --> 00:13:42,839
it has to be allocated in the heap, you have to do all sorts of type-checking, and to get

00:13:42,839 --> 00:13:49,380
it to the point where it's allocated in registers or on the stack, there is already a lot of

00:13:49,380 --> 00:13:50,720
magic going on.

00:13:50,720 --> 00:13:53,240
When that same magic is apply, it would work for BigInt.

00:13:53,240 --> 00:13:58,230
We decided to bite the bullet, solve the whole problem better go and go with BigInt rather

00:13:58,230 --> 00:14:00,930
than n64.

00:14:00,930 --> 00:14:06,940
The other big semantic point we discussed is what to do with mixed types.

00:14:06,940 --> 00:14:13,820
So, in a language like Python, you can just add a - you can just add a large integer and

00:14:13,820 --> 00:14:18,670
a float, and you get a float back, and what we decided for JavaScript is we don't want

00:14:18,670 --> 00:14:19,990
to do that.

00:14:19,990 --> 00:14:25,730
What we're doing instead, I mean, the whole point of BigInt is to be this new data type

00:14:25,730 --> 00:14:28,050
that provides this mathematical accuracy.

00:14:28,050 --> 00:14:31,860
You don't have to think about all the complexity of IEE74.

00:14:31,860 --> 00:14:42,370
You can just think about integers, but what integer would you get when you add a very

00:14:42,370 --> 00:14:47,130
large integer, 2 to the 53 plus 1.5?

00:14:47,130 --> 00:14:52,450
The answer isn't actually contained in this set of integers or in the set of representable

00:14:52,450 --> 00:14:54,519
float-point values.

00:14:54,519 --> 00:14:57,760
What we decided is, rather than come up with the wrong answer, when the whole point of

00:14:57,760 --> 00:15:02,759
the feature is to come to the right answer, we would throw a type error in this case.

00:15:02,759 --> 00:15:06,420
We would say we're not going to come to an answer.

00:15:06,420 --> 00:15:15,050
Actually, you can't mix BigInts and numbers in general in mathematical operations.

00:15:15,050 --> 00:15:18,920
This leads to a best practice that I recommend.

00:15:18,920 --> 00:15:25,020
BigInt are good when you have a value that ranges that might be larger than what can

00:15:25,020 --> 00:15:31,470
be represented in numbers, but if numbers are working for you, stick with them.

00:15:31,470 --> 00:15:36,861
Numbers still worked just fine for small integers, and in general, because we have to make make

00:15:36,861 --> 00:15:40,279
this decision up front, it is because of that.

00:15:40,279 --> 00:15:47,470
That issue I just described, you know, numbers in use for what they're in use for right now,

00:15:47,470 --> 00:15:50,380
still works very well.

00:15:50,380 --> 00:16:03,389
So to get to stage 2 from there, the committee wrote this draft specification document, and

00:16:03,389 --> 00:16:09,490
this is like the main document for the whole specification except that it is only the segment

00:16:09,490 --> 00:16:16,250
that relates to this new feature, so it includes some insertions, deletions, and some new sections,

00:16:16,250 --> 00:16:19,910
but you can ultimately read it in the same HTML file.

00:16:19,910 --> 00:16:29,730
That's generated from this specification form - format, in let's you use a combination of

00:16:29,730 --> 00:16:39,339
markdown and grammar syntax easily to generate these specification drafts.

00:16:39,339 --> 00:16:45,959
My co-work er Robyn Templeton implemented BigInt in SpiderMonkey, which is currently

00:16:45,959 --> 00:16:49,920
starting to land.

00:16:49,920 --> 00:16:55,199
So, even though stage 3 is when something is really, really ready for implementation,

00:16:55,199 --> 00:16:59,449
and really stable, it's never too early to get started prototyping, and this process

00:16:59,449 --> 00:17:03,630
leads to - helps the development of the feature.

00:17:03,630 --> 00:17:08,160
To get to stage 3, we needed sign-off on this specification.

00:17:08,160 --> 00:17:12,440
In particular, a couple of committee members, or more than a couple of committee members,

00:17:12,440 --> 00:17:18,270
volunteer to read the whole specification in a lot of detail, as well as the editors,

00:17:18,270 --> 00:17:20,449
and see whether it's ready this.

00:17:20,449 --> 00:17:27,000
Leads to a lot of typos being fixed and cases being looked at closely, and, once we got

00:17:27,000 --> 00:17:31,160
to this level of stability where the committee has signed off and the committee is really

00:17:31,160 --> 00:17:36,350
saying, "Yes, we want to to this feature," stage 2 is, "We want to do this feature,"

00:17:36,350 --> 00:17:42,250
and stage 3 is, "We want to do it this way, and we need implementation feedback."

00:17:42,250 --> 00:17:46,880
This level of stability led the V8 team to implement BigInt.

00:17:46,880 --> 00:17:55,110
Following that, the - so, you know, thank you Jacob for great work leading the BigInt

00:17:55,110 --> 00:18:04,090
implementation, and Kyle Lima worked on BigInt in KLC which is in progress.

00:18:04,090 --> 00:18:08,670
Even once we got to a stage 3, even once we said that we have this level of stability,

00:18:08,670 --> 00:18:13,900
there were still some Edge cases that people came across, which, because the feature hasn't

00:18:13,900 --> 00:18:20,210
shipped to the web yet, we were opening to revisiting.

00:18:20,210 --> 00:18:24,650
So there were tons of different edge cases like this that we spent committee time on

00:18:24,650 --> 00:18:30,380
before getting to stage 3, and, even after stage 3, we looked at this one.

00:18:30,380 --> 00:18:36,250
You know double equals and less than, in JavaScript, you can use them to compare a number and a

00:18:36,250 --> 00:18:41,500
string, and, when you do that, it converts the string to a number, and it compares them

00:18:41,500 --> 00:18:44,270
as numeric values.

00:18:44,270 --> 00:18:51,020
So, you know, this is part of JavaScript being maybe weekly typed, and having all these casts

00:18:51,020 --> 00:18:58,400
everywhere, and so, to make sure that BigInt is consistent with - to make sure that BigInt

00:18:58,400 --> 00:18:59,750
is consistent with numbers.

00:18:59,750 --> 00:19:04,020
We did that same behaviour in BigInt.

00:19:04,020 --> 00:19:11,400
In this second case, accidentally we were converting BigInt to a number, and it wouldn't

00:19:11,400 --> 00:19:17,010
compare as less than when it is actually the same value, because that number would be rounding

00:19:17,010 --> 00:19:19,000
down.

00:19:19,000 --> 00:19:24,181
To get to stage 4, what we are going to need is full tests, there's a performance test

00:19:24,181 --> 00:19:34,210
suite that verifies that implementations are working right, so we have those conformance

00:19:34,210 --> 00:19:35,210
tests.

00:19:35,210 --> 00:19:42,590
A full request, there's still more refactor to go do for that, and two implementations

00:19:42,590 --> 00:19:47,730
where we have one full implementation, but the next two are still in progress.

00:19:47,730 --> 00:19:54,900
So maybe we will get this by ES2019, or ES2020 - I hope so.

00:19:54,900 --> 00:20:01,320
So, to let you know how to get involved, there's just a lot of different ways to get involved

00:20:01,320 --> 00:20:02,820
here.

00:20:02,820 --> 00:20:04,390
Feedback on GitHub issues is really great.

00:20:04,390 --> 00:20:08,920
I love to hear about whether feature proposal works for you.

00:20:08,920 --> 00:20:13,460
If there are pieces missing or if a case should be handled differently, and this was really

00:20:13,460 --> 00:20:18,620
useful for working through tons of issues with BigInt.

00:20:18,620 --> 00:20:25,910
Test 262 tests, there's a project to implement tests for the JavaScript language itself.

00:20:25,910 --> 00:20:29,430
And it's an open-source project that's happy to have new contributions.

00:20:29,430 --> 00:20:35,880
What we find is that, when something is missing from the test suite, actually, different browsers

00:20:35,880 --> 00:20:42,090
or different JavaScript implementations have different behaviour, because different people

00:20:42,090 --> 00:20:46,940
end up reading the same specification differently by accident, and so it's really important

00:20:46,940 --> 00:20:48,740
to have a full test suite.

00:20:48,740 --> 00:20:51,040
There are other parts.

00:20:51,040 --> 00:20:58,010
Other have tests like web platform tests, and so, for example, here's a pull request

00:20:58,010 --> 00:21:05,190
to add tests that check that adding a number in a BigInt throws a type error.

00:21:05,190 --> 00:21:12,760
For the BigInt project, it helps make implementations right the first time and say correct.

00:21:12,760 --> 00:21:18,160
Sometimes, a joke was made to me, sometimes, implementations make so many optimisations

00:21:18,160 --> 00:21:23,030
that they optimise away the specification itself.

00:21:23,030 --> 00:21:25,130
This will prevent that.

00:21:25,130 --> 00:21:29,920
As you're maintaining the project, you have these complete correctness tests.

00:21:29,920 --> 00:21:35,680
But, it went even further than that, because the people working on these tests took a really

00:21:35,680 --> 00:21:40,440
close look at all the Edge cases, and helped work through a lot of design decisions.

00:21:40,440 --> 00:21:47,050
More than six test engineers collaborated, especially from Boku and Egalia.

00:21:47,050 --> 00:21:50,760
We are happy to have help, documentation and education.

00:21:50,760 --> 00:21:54,660
With this readme file, a number of people contributed.

00:21:54,660 --> 00:21:57,910
It's important to understand the different mental models that JavaScript programmers

00:21:57,910 --> 00:22:04,050
have.

00:22:04,050 --> 00:22:07,430
People aren't programming thinking through the entire specification, and different people

00:22:07,430 --> 00:22:11,220
have different mental models, so this is especially useful.

00:22:11,220 --> 00:22:15,260
We tried to compare a bunch of different ways of thinking through code when designing language

00:22:15,260 --> 00:22:16,720
features.

00:22:16,720 --> 00:22:22,230
For example, in the BigInt design process, Ashley Williams pointed out that, when learning

00:22:22,230 --> 00:22:27,800
programming, a lot of programmers have an intuition that variables should have particular

00:22:27,800 --> 00:22:29,250
types.

00:22:29,250 --> 00:22:35,750
So, this made us feel not quite as bad about not permitting mixed operations between BigInt

00:22:35,750 --> 00:22:42,350
and number because this is an intuitive thing for people to learn, that a value has a particular

00:22:42,350 --> 00:22:45,300
type.

00:22:45,300 --> 00:22:53,540
It's also welcome to implement things, so you can contribute to lots of implementations

00:22:53,540 --> 00:22:59,150
in JavaScript, so, through implementations, it's not just about getting JavaScript to

00:22:59,150 --> 00:23:04,270
developers, all these three implementations of BigInt that are in progress have contributed

00:23:04,270 --> 00:23:08,510
to the design of the feature.

00:23:08,510 --> 00:23:13,270
It's also possible, if you're not able to do this development yourself, companies like

00:23:13,270 --> 00:23:22,140
Bloomberg and Google sponsor work to push these things forward, and of course, in these

00:23:22,140 --> 00:23:26,460
meetings, we are open to new members, so, let me know if you want to get involved as

00:23:26,460 --> 00:23:29,380
a TC39 delegate.

00:23:29,380 --> 00:23:31,640
It's an organisational membership.

00:23:31,640 --> 00:23:37,900
Something like your employer would join, or there are also non-profit memberships.

00:23:37,900 --> 00:23:46,450
So, as a takeaway, please, if you're interested in building the future of JavaScript, get

00:23:46,450 --> 00:23:47,990
involved in TC39.

00:23:47,990 --> 00:23:54,300
You can go to our website, and you know, now you have BigInts, and cruise them for iterators

00:23:54,300 --> 00:23:58,930
which may be big, and use numbers for numbers that are smaller.

00:23:58,930 --> 00:24:01,890
So, I'm Little Dan, and thank you!

00:24:01,890 --> 00:24:02,390

YouTube URL: https://www.youtube.com/watch?v=RiU5OzMZ7z8


