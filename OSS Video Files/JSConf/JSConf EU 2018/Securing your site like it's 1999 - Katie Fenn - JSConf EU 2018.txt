Title: Securing your site like it's 1999 - Katie Fenn - JSConf EU 2018
Publication date: 2018-07-03
Playlist: JSConf EU 2018
Description: 
	Life in the early days of the web was hard. One day your HTML is disintegrating, the next you are fighting someone named “~Ninjad00d~“ who has found a way to take over your forum system. Lessons in security in these days were hard learned.

These are the true stories from the early days of the web and how forums, chat rooms and online games were turned upside down for fun and profit. If you stick around after laughing at the misfortune of online pioneers, there will also be lessons about finding your way in a world that wants to exploit your every mistake.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,480 --> 00:00:10,480
Good afternoon, everyone.

00:00:10,480 --> 00:00:15,890
Today, I'm going to talk to you about securing websites in the early web, and telling you

00:00:15,890 --> 00:00:20,190
a few funny stories about people having their days profoundly ruined.

00:00:20,190 --> 00:00:25,980
Before I start, I'm on Twitter tell me what you think about the talks because I love getting

00:00:25,980 --> 00:00:28,560
feedback from people.

00:00:28,560 --> 00:00:34,370
In case moving images on big screens make you feel uncomfortable, content warning will

00:00:34,370 --> 00:00:40,640
appear on the bottom right hand corner of my slides.

00:00:40,640 --> 00:00:44,080
Come and see me later on if you want a sticker.

00:00:44,080 --> 00:00:46,970
Say I believe hello.

00:00:46,970 --> 00:00:49,790
I wanted to shout on the something I'm passionate about.

00:00:49,790 --> 00:00:52,629
I love volunteering at Scotland JS.

00:00:52,629 --> 00:01:00,260
If you fancy coming to a conference that is there and walk up a mountain during your lunch

00:01:00,260 --> 00:01:04,900
break, that is exactly where our venue is.

00:01:04,900 --> 00:01:06,200
It's really beautiful.

00:01:06,200 --> 00:01:10,330
You should totally come along and get yourself a ticket.

00:01:10,330 --> 00:01:14,909
I came to the web like a lot of people through fandom.

00:01:14,909 --> 00:01:21,060
If you were here and watched Rachel White's talk last year, you will know exactly what

00:01:21,060 --> 00:01:22,610
I'm talking about.

00:01:22,610 --> 00:01:29,179
So fans meet other fans through forums, through web forums, where you can log in and stay

00:01:29,179 --> 00:01:34,200
up in the early hours of the web, discussing your favourite characters.

00:01:34,200 --> 00:01:37,140
Post-signatures used to be a common site.

00:01:37,140 --> 00:01:43,030
You used to use them to share your fandom and show off your skills, a way of creatively

00:01:43,030 --> 00:01:48,900
expressing yourself, and for many, an introduction into web design and development — this is

00:01:48,900 --> 00:01:50,569
how I learned HTML.

00:01:50,569 --> 00:01:53,950
You could add them to your post by writing HTML.

00:01:53,950 --> 00:02:00,490
It was my first introduction of messing with other people's sites, and you could do things

00:02:00,490 --> 00:02:02,390
like HTML bombs.

00:02:02,390 --> 00:02:09,592
That is where you deliberately or accidental ly — technical stuff, folks.

00:02:09,592 --> 00:02:11,660
Is that good?

00:02:11,660 --> 00:02:13,380
Excellent.

00:02:13,380 --> 00:02:23,950
Round of applause for the tech support people.

00:02:23,950 --> 00:02:26,349
[Applause].

00:02:26,349 --> 00:02:33,329
So you could mismatch HTML and create HTML bombs.

00:02:33,329 --> 00:02:37,150
This was accidental at first but lots of people used it deliberately.

00:02:37,150 --> 00:02:38,290
And maliciously.

00:02:38,290 --> 00:02:43,849
They inserted mismatched HTML to make content disappear off the side of the screens or make

00:02:43,849 --> 00:02:47,659
it completely unreadable altogether.

00:02:47,659 --> 00:02:53,560
This is caused by writing code that trusts any old crap that the user sends to you which

00:02:53,560 --> 00:02:57,329
is otherwise known as bad input validation.

00:02:57,329 --> 00:03:02,920
There was another forum around about this time dedicated to the animal crossing games,

00:03:02,920 --> 00:03:09,200
and animal crossing, if you've not played it before, is an idyllic game filled with

00:03:09,200 --> 00:03:17,079
a town of peaceful people just getting along and trading, so really lovely, idyllic game.

00:03:17,079 --> 00:03:22,450
But this forum had a page that allowed you to edit your profile, change your user name

00:03:22,450 --> 00:03:28,530
and password, and someone discovered that there is a hid en input field that contained

00:03:28,530 --> 00:03:32,389
the user ID of the person's profile that you're editing.

00:03:32,389 --> 00:03:38,281
So someone thought what happens if I changed that ID to the owner of that forum and make

00:03:38,281 --> 00:03:41,769
it user ID1 and change the password?

00:03:41,769 --> 00:03:47,739
I found out they could edit the profile of any user on this forum.

00:03:47,739 --> 00:03:54,390
Needless to say, this website devolved into utter anarchy for a few days until it was

00:03:54,390 --> 00:03:55,390
fixed.

00:03:55,390 --> 00:04:00,590
There aren't any rules of making web development, but if there were, I would make this one the

00:04:00,590 --> 00:04:06,370
first rule: never trust user input, never, ever trust user input!

00:04:06,370 --> 00:04:11,810
Always ask yourself how even the nicest people playing the nicest game in the universe can

00:04:11,810 --> 00:04:17,450
misuse your code for fun and profit, because they will.

00:04:17,450 --> 00:04:21,220
How can I help protect yourself against bad input validation?

00:04:21,220 --> 00:04:27,510
You can use a library like joi to validate your data on the backend to make sure that

00:04:27,510 --> 00:04:33,290
the data is exactly what it appears to be — make sure it is the right type and the

00:04:33,290 --> 00:04:34,290
right length.

00:04:34,290 --> 00:04:40,570
You can check a user's actions against their identity as well to check what actions that

00:04:40,570 --> 00:04:44,080
they can take, and whose data they can take it on.

00:04:44,080 --> 00:04:50,970
For instance, it should not be possible for a new registered user to change the profile

00:04:50,970 --> 00:04:54,590
of the owner of the forum, as we just saw.

00:04:54,590 --> 00:04:59,030
Never, ever rely on client-side validation alone.

00:04:59,030 --> 00:05:03,410
It is a convenience to the user, and absolutely nothing else.

00:05:03,410 --> 00:05:07,790
It's not a security measure.

00:05:07,790 --> 00:05:14,020
[Scattered laughter].

00:05:14,020 --> 00:05:17,130
[Laughter].

00:05:17,130 --> 00:05:26,480
For my next story, many forums on the early web allowed to you log in using a login form

00:05:26,480 --> 00:05:31,670
just like this, so you could enter your user name and password, and it would save you from

00:05:31,670 --> 00:05:41,620
having to enter these on the — many were vulnerable to an attack with one unique password.

00:05:41,620 --> 00:05:46,130
You could log in as any user you chose.

00:05:46,130 --> 00:05:51,780
This attack allowed users to run their own database queries on your site which is otherwise

00:05:51,780 --> 00:05:56,020
known as SQL injection.

00:05:56,020 --> 00:06:00,240
When you fill out a user name and a password in a login form like this, the credentials

00:06:00,240 --> 00:06:06,990
submitted in these forms get filled in to an SQL query that you can see on the right.

00:06:06,990 --> 00:06:10,590
SQL is a popular language for querying databases.

00:06:10,590 --> 00:06:15,410
This example checks users matching the user name and the password.

00:06:15,410 --> 00:06:21,100
If the database find a matching user, it grants the user permission to log in.

00:06:21,100 --> 00:06:27,830
Let's see what happens if you submit that one weird password.

00:06:27,830 --> 00:06:34,010
The databases has interpreted it as regular SQL which has a sequence that we didn't expect.

00:06:34,010 --> 00:06:39,740
This part of the query says, "Give me all the users with the user name matching the

00:06:39,740 --> 00:06:46,220
user name admin" and the pass all all 1=1.

00:06:46,220 --> 00:06:55,410
This is like saying to the database, "This makes the query match every single user in

00:06:55,410 --> 00:07:00,600
the database" but the software is checking for more than zero matches so it grants the

00:07:00,600 --> 00:07:04,150
your permission to log in.

00:07:04,150 --> 00:07:09,180
This is essentially saying to the database give me all the users matching the user name

00:07:09,180 --> 00:07:14,150
admin or whatever you've got, I'm not fussy.

00:07:14,150 --> 00:07:18,960
SQL injection hands the keys the database to your users.

00:07:18,960 --> 00:07:25,170
It allows attackers to extraordinary access to your website, to recover sensitive information

00:07:25,170 --> 00:07:29,870
of your users, and to give themselves complete control to your site.

00:07:29,870 --> 00:07:36,030
One of the most famous examples was Drupalgeddon.

00:07:36,030 --> 00:07:40,460
It affected every one under that version 7 number.

00:07:40,460 --> 00:07:46,490
When you think how many use Drupal, it affects a lot of sites.

00:07:46,490 --> 00:07:54,460
It allows the attacker full control over the website.

00:07:54,460 --> 00:08:00,560
There is also some evidence to suggest that attackers patched the original exploit after

00:08:00,560 --> 00:08:07,350
breaching sites to make it appear as if those sites had not been breached.

00:08:07,350 --> 00:08:11,420
How can you help protect yourself against SQL injection?

00:08:11,420 --> 00:08:14,680
Don't use string for concatenation to build queries.

00:08:14,680 --> 00:08:23,010
Get help from tools that offer you paramaterised queries.

00:08:23,010 --> 00:08:28,760
Or you can use object relational mapping to get excellent help from tool maintainers who

00:08:28,760 --> 00:08:30,100
have done this before.

00:08:30,100 --> 00:08:35,440
I want to tell a quick bonus story that has nothing to do with the web, a game I used

00:08:35,440 --> 00:08:38,550
to play called World of Warcraft.

00:08:38,550 --> 00:08:45,850
You can take on big, big bosses, big monsters, and once someone found that, by shooting a

00:08:45,850 --> 00:08:52,019
fireball and running away, and shooting a fireball and run away, they could tow a boss

00:08:52,019 --> 00:08:57,100
across the continent to the capital city of Stormwind.

00:08:57,100 --> 00:09:04,680
They managed to get this boss called Lord Kasak into StormWind, and, when he kills a

00:09:04,680 --> 00:09:10,110
character, he heals himself and his maximum HP increases.

00:09:10,110 --> 00:09:15,740
Within a few hours of being in Stormwind, the Lord Kasak was fundamentally immortal.

00:09:15,740 --> 00:09:23,259
They had to roll the servers back to restore people's accounts.

00:09:23,259 --> 00:09:28,310
This is a good example of how you may not need to breach a computer system in order

00:09:28,310 --> 00:09:38,019
to wreak havoc.

00:09:38,019 --> 00:09:47,079
[Laughter].

00:09:47,079 --> 00:09:53,720
Another story about my time on Fantasy forums, I was looking at conversation about whether

00:09:53,720 --> 00:09:59,130
certain characters were resurrectable, and, suddenly, I was logged out.

00:09:59,130 --> 00:10:04,079
I was presented with a login screen, and I thought what is going on?

00:10:04,079 --> 00:10:07,720
This wasn't happening to me but to other people as well.

00:10:07,720 --> 00:10:10,709
So I wonder what was causing this.

00:10:10,709 --> 00:10:14,550
We tracked it down to one user with a broken avatar.

00:10:14,550 --> 00:10:16,699
We thought, "What's going on?"

00:10:16,699 --> 00:10:25,470
Well, it turns out they had set the avatar to logout.php so that any user who is looking

00:10:25,470 --> 00:10:29,319
at this site would be logged out.

00:10:29,319 --> 00:10:35,110
This is syntax that gets other users to do your dirty work you, which is otherwise known

00:10:35,110 --> 00:10:39,310
as cross-site request forgery.

00:10:39,310 --> 00:10:43,829
Or CSRF for short.

00:10:43,829 --> 00:10:48,350
Cross-site request forgery was successfully exploited on the Netflix website.

00:10:48,350 --> 00:10:54,089
This isn't the Netflix we have today, but the old Netflix that used to post you DVDs

00:10:54,089 --> 00:10:57,029
in order to watch at home.

00:10:57,029 --> 00:11:02,740
This attack was possible without even injecting any content into the Netflix website.

00:11:02,740 --> 00:11:09,189
In fact, you could host this attack on your site and just convince people to go to that

00:11:09,189 --> 00:11:10,189
site.

00:11:10,189 --> 00:11:14,121
We know that is possible because how many times has this happened to you?

00:11:14,121 --> 00:11:21,020
So, what if you could convince people to go to your website?

00:11:21,020 --> 00:11:24,990
And what if those people were logged into Netflix?

00:11:24,990 --> 00:11:33,470
In 2006, Dave Ferguson discovered a cross-site request forgery in Netflix, a vulnerability

00:11:33,470 --> 00:11:42,439
in Netflix, to put an image with that URL, that URL adds a film of his choice to this

00:11:42,439 --> 00:11:48,199
user's queue, sprinkle in a few requests to change the account name, and to change the

00:11:48,199 --> 00:11:54,189
shipping address, and you could ship yourself free DVDs courtesy of whoever looked at your

00:11:54,189 --> 00:11:56,889
website.

00:11:56,889 --> 00:12:01,940
Cross-site request forgery exploits the trust placed in users' browsers.

00:12:01,940 --> 00:12:05,240
Why shouldn't Netflix trust these requests?

00:12:05,240 --> 00:12:10,189
They come from legitimate users, the users have the right cookies, and they logged in

00:12:10,189 --> 00:12:11,579
themselves.

00:12:11,579 --> 00:12:18,930
The problem stems from trusting user sessions and trusting cookies on their own.

00:12:18,930 --> 00:12:22,529
So how can you help protect yourself against cross-site request forgery?

00:12:22,529 --> 00:12:28,249
You can verify the origin and the referral headers of HTTP requests to confirm they actually

00:12:28,249 --> 00:12:30,010
come from your website.

00:12:30,010 --> 00:12:34,480
These can't be set programmatically in browsers by JavaScript.

00:12:34,480 --> 00:12:40,619
These are not — these can be faked using other methods, so they're not just a sure-fire

00:12:40,619 --> 00:12:43,930
way of protecting against every single attack.

00:12:43,930 --> 00:12:51,379
You can also used synchronised tokens or CSRF tokens, to verify requests have actually come

00:12:51,379 --> 00:12:54,410
from a real form of your website.

00:12:54,410 --> 00:13:00,860
These tokens are long and pre predictable unique data generated on your server and placed

00:13:00,860 --> 00:13:03,750
into web forms with submissions for form data.

00:13:03,750 --> 00:13:10,180
Your server then only accepts a request from a user if it includes a recent token that's

00:13:10,180 --> 00:13:13,269
been generated for that user.

00:13:13,269 --> 00:13:17,879
These tokens aren't stored in cookies, they're stored in the markup of your website, so they

00:13:17,879 --> 00:13:22,699
can't be sent in a CS or CSRF attack.

00:13:22,699 --> 00:13:26,310
You could use a cookie-to-header tokens which are similar.

00:13:26,310 --> 00:13:32,230
This relies on the JavaScript same-origin protocol meaning JavaScript can only set HTTP

00:13:32,230 --> 00:13:36,360
headers for sites on the same origin.

00:13:36,360 --> 00:13:44,759
Finally, this is no defence if your site has been compromised in any other way, for example,

00:13:44,759 --> 00:13:50,860
using cross-site scripting which we're going to get on t next.

00:13:50,860 --> 00:14:09,470
How mad would you be if I changed the slide now!

00:14:09,470 --> 00:14:11,240
[Laughter].

00:14:11,240 --> 00:14:13,279
Let's talk about BB code.

00:14:13,279 --> 00:14:19,009
BB code was a special language that allowed you to format text on forums and in your post.

00:14:19,009 --> 00:14:23,540
You could use it to insert images of gifs of your favourite character.

00:14:23,540 --> 00:14:30,279
It was intended to be a replacement for HTML, and a subset, a smaller reduced language,

00:14:30,279 --> 00:14:34,199
because validating HTML is a hard job.

00:14:34,199 --> 00:14:38,569
Having a reduced language would make it easier to validate.

00:14:38,569 --> 00:14:42,660
You could use it insert your favourite gifs to your heart's content and this was our idea

00:14:42,660 --> 00:14:44,420
of fun back on the early web.

00:14:44,420 --> 00:14:53,470
One day, one of my friends found the mismatching of the opening and closing tags, BB code tags,

00:14:53,470 --> 00:14:57,230
allowed you to do weird stuff.

00:14:57,230 --> 00:15:04,160
Mismatching tags confused the BB code transcoder and caused broken HTML to be inserted into

00:15:04,160 --> 00:15:06,170
that page.

00:15:06,170 --> 00:15:11,800
From there, they were able to insert arbitrary code into their posts and start executing

00:15:11,800 --> 00:15:12,800
JavaScript.

00:15:12,800 --> 00:15:20,059
They used this to repeatedly spam the forum of arrival on — of a rival online game clap

00:15:20,059 --> 00:15:26,779
during a match, with their opponents distracted, they won the match while their forums were

00:15:26,779 --> 00:15:29,559
slowly filling up with gobbledygook.

00:15:29,559 --> 00:15:36,290
In attack allowed someone to run their code on your website, which is otherwise known

00:15:36,290 --> 00:15:40,300
as cross-site scripting.

00:15:40,300 --> 00:15:49,730
This in 2005, he became famous for having friends — lots and lots, and lots of friends.

00:15:49,730 --> 00:15:58,009
He wrote a worm, which is a self-replicating script that replicates itself across the website.

00:15:58,009 --> 00:16:05,940
Like lots of people in 2005, Sammy had a MySpace page, a limited social network by today's

00:16:05,940 --> 00:16:06,940
standards.

00:16:06,940 --> 00:16:11,420
You could customise your headline but not really put much in there.

00:16:11,420 --> 00:16:12,850
It was restricted.

00:16:12,850 --> 00:16:19,119
It had limited for matting options, and it allowed you to put 12 profile photos on your

00:16:19,119 --> 00:16:20,869
page, but only 12.

00:16:20,869 --> 00:16:25,240
If you wanted to add more photos, you had to take some down.

00:16:25,240 --> 00:16:32,759
So Sammy discovered that some tags, like the div tag and image tag were allowed to be inserted

00:16:32,759 --> 00:16:38,589
into content, but the script tag to insert JavaScript was filtered.

00:16:38,589 --> 00:16:47,600
MySpace wasn't about to let people insert script and run JavaScript on their pages.

00:16:47,600 --> 00:16:51,329
MySpace stripped the script back.

00:16:51,329 --> 00:16:54,809
Sound's back.

00:16:54,809 --> 00:16:58,360
Some browsers executed JavaScript in style tags.

00:16:58,360 --> 00:17:01,610
It's like the browser said, "Here's a div tag.

00:17:01,610 --> 00:17:03,769
Do you want to set a background?

00:17:03,769 --> 00:17:05,079
Yes, sure.

00:17:05,079 --> 00:17:07,490
What URL do you want to set?

00:17:07,490 --> 00:17:09,250
I will have JavaScript, please.

00:17:09,250 --> 00:17:11,900
Yes, sure, I will execute that."

00:17:11,900 --> 00:17:20,439
So MySpace stripped JavaScript thwarting injection of scripts into MySpace pages.

00:17:20,439 --> 00:17:27,450
It turns out, though, that if you inserted a line break into the word "JavaScript", the

00:17:27,450 --> 00:17:32,380
code would run absolutely fine, and MySpace would not know.

00:17:32,380 --> 00:17:37,309
That is how Sammy got JavaScript into MySpace.

00:17:37,309 --> 00:17:42,340
Now he tried to write a script that would replicate itself across all the pages.

00:17:42,340 --> 00:17:46,810
So he could find out new friends by inspecting the page's source.

00:17:46,810 --> 00:17:51,990
So he could find the user IDs of the people that he wanted to add.

00:17:51,990 --> 00:17:57,200
To do this, you would normally use the body.html property.

00:17:57,200 --> 00:18:02,120
MySpace were prepared for people like Sammy coming.

00:18:02,120 --> 00:18:03,491
They filtered this too.

00:18:03,491 --> 00:18:08,850
This is not a problem if you concatenate a string and evaluate it using a eval function.

00:18:08,850 --> 00:18:16,809
There is a good reason why a lot of developers call eval evil.

00:18:16,809 --> 00:18:22,049
This trick also works on XML HTTP requests on ready state change, otherwise known as

00:18:22,049 --> 00:18:29,870
Ajax, allowing Sammy to make an HTTP requests to the MySpace API so he could send friend

00:18:29,870 --> 00:18:30,930
requests.

00:18:30,930 --> 00:18:39,020
He also found that the API worked on a different subdomain, the same origin protocol in browsers

00:18:39,020 --> 00:18:46,210
forbid him from sending requests to the profile pages domain, but he discovered that you could

00:18:46,210 --> 00:18:53,100
actually view profile pages on the API's domain, so he just redirected the browser to the other

00:18:53,100 --> 00:18:56,049
domain, and it worked fine.

00:18:56,049 --> 00:18:57,289
This is the complete code.

00:18:57,289 --> 00:19:02,700
There are a few more tricks that Sammy used, but I've shown you the most interesting ones.

00:19:02,700 --> 00:19:06,130
He added this to his profile page, and he waited.

00:19:06,130 --> 00:19:09,890
One hour later, he had a new friend request.

00:19:09,890 --> 00:19:12,330
It is starting to work.

00:19:12,330 --> 00:19:19,929
Seven hours later, he had 221 friend requests, and it started to take off.

00:19:19,929 --> 00:19:23,680
One hour later, that number has doubled to 480.

00:19:23,680 --> 00:19:27,490
It is starting to grow exponentially.

00:19:27,490 --> 00:19:34,340
Every friend that he recruits, that also recruits all of their friend as well be and the total

00:19:34,340 --> 00:19:38,190
friend count grows and grows, and grows.

00:19:38,190 --> 00:19:44,679
Eight hours later, Sammy has 900,000 friend requests.

00:19:44,679 --> 00:19:50,789
It's now growing so fast that every time Sammy refreshes the page, thousands more people

00:19:50,789 --> 00:19:53,919
are being added to that count.

00:19:53,919 --> 00:20:00,450
This is Sammy's actual screen shot showing the number of friend requests.

00:20:00,450 --> 00:20:10,269
One hour later, MySpace collapses under the load of people requesting to be Sammy's friend.

00:20:10,269 --> 00:20:15,309
MySpace eventually recovered and patched the vulnerability two hours later.

00:20:15,309 --> 00:20:22,630
Sammy was raided by the US secret service, he was sentenced to 90 days community service,

00:20:22,630 --> 00:20:27,380
he was only allowed the use of one computer at not allowed to use the internet, and he

00:20:27,380 --> 00:20:34,250
was ordered to pay over $15,000 restitution to MySpace.

00:20:34,250 --> 00:20:39,500
Cross-site scripting allows users to inject their own code into your site, and some people

00:20:39,500 --> 00:20:44,600
believe content injection is a better word for this, because it is people stuffing their

00:20:44,600 --> 00:20:51,960
own HTML, their own CSS, their own images, into your site, and it's very dangerous.

00:20:51,960 --> 00:20:55,049
So how can you help protect yourself from cross-site scripting?

00:20:55,049 --> 00:21:03,940
You can escape user input using on entry using a library like sanitisation.html.

00:21:03,940 --> 00:21:05,510
Don't be attempted to roll your own.

00:21:05,510 --> 00:21:10,269
People like MySpace were prepared for people like Sammy but not prepared enough.

00:21:10,269 --> 00:21:13,120
This is really, really difficult to do.

00:21:13,120 --> 00:21:20,790
Use an escaping library like React or Angular templating library.

00:21:20,790 --> 00:21:28,460
There are ways around them, but they can be updated frequently, and they are from convenient

00:21:28,460 --> 00:21:30,493
to use but won't save you on their own.

00:21:30,493 --> 00:21:34,220
You can implement a content-security policy.

00:21:34,220 --> 00:21:39,380
This restricts which domains' content can be securely loaded from.

00:21:39,380 --> 00:21:44,649
Loading content from third parties is very, very risky, so you want to lock it down to

00:21:44,649 --> 00:21:48,909
domains that you absolutely trust.

00:21:48,909 --> 00:21:53,260
You can also use the integrity property on script and link tags.

00:21:53,260 --> 00:21:59,240
This allows you to insert a hash into these tags, and this hash is like a fingerprint

00:21:59,240 --> 00:22:01,530
for the resources that you're loading.

00:22:01,530 --> 00:22:06,409
If the resource changes, if it has been changed by someone else in a man-in-the-middle attack,

00:22:06,409 --> 00:22:09,110
that fingerprint will change as well.

00:22:09,110 --> 00:22:16,820
If the fingerprint doesn't match the resource, then the browsers can re fuse to load it.

00:22:16,820 --> 00:22:20,800
In 1999, the web was like a wild west frontier.

00:22:20,800 --> 00:22:26,809
These newly discovered attacks could be used against pretty much all websites, and it was

00:22:26,809 --> 00:22:29,169
just utter chaos.

00:22:29,169 --> 00:22:33,970
This is the picture that we still conjure about web security and about the web.

00:22:33,970 --> 00:22:38,450
The truth is, the stakes are higher than they've ever been now.

00:22:38,450 --> 00:22:40,980
This is not just discussing your favourite characters.

00:22:40,980 --> 00:22:46,250
We're now talking about personal data, we're talking about people's money, and people's

00:22:46,250 --> 00:22:47,250
lives.

00:22:47,250 --> 00:22:56,230
But I also believe there's never been a better time to learn about web security.

00:22:56,230 --> 00:23:01,440
More and more resources and tools are available to help you write secure code.

00:23:01,440 --> 00:23:07,159
And try not to think of it like a wild west, but think about it as an adventure play ground.

00:23:07,159 --> 00:23:12,929
If you're curious, learning about web security can be really fun and really, really interesting,

00:23:12,929 --> 00:23:15,630
and it need not be really hard.

00:23:15,630 --> 00:23:18,559
It's an important topic.

00:23:18,559 --> 00:23:24,429
I'm really confident that there really has never been a better time to learn.

00:23:24,429 --> 00:23:27,919
Everyone has to start, and everyone is a beginner once.

00:23:27,919 --> 00:23:33,909
So I want to shout out to all these people who helped make this talk possible for telling

00:23:33,909 --> 00:23:35,460
me stories about the early web.

00:23:35,460 --> 00:23:38,909
The names have been changed to protect the innocent and the guilty.

00:23:38,909 --> 00:23:40,460
Thank you very much.

00:23:40,460 --> 00:23:40,900

YouTube URL: https://www.youtube.com/watch?v=Tpzqu4EGFjc


