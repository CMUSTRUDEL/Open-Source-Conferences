Title: Time travel debugging: A step-by-step guide. - Jason Laster - JSConf EU 2018
Publication date: 2018-07-02
Playlist: JSConf EU 2018
Description: 
	Debugging is all about stepping. With time travel debugging, you can step back as easily as forward. Want to know how a bug was introduced? No problem, pause and rewind to the exact time when your app broke.

Roads? Where we’re going, we don’t need roads!

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,980 --> 00:00:13,500
I'm Jason number five of seven here.

00:00:13,500 --> 00:00:15,320
Which I think is cool.

00:00:15,320 --> 00:00:18,800
So, time travel debugging.

00:00:18,800 --> 00:00:23,259
Time travel debugging is a really old concept.

00:00:23,259 --> 00:00:27,250
But it's also been a multi year project at Mozilla.

00:00:27,250 --> 00:00:31,830
And most recently, a six-month sprint to this stage.

00:00:31,830 --> 00:00:36,120
So, if you see something you like, please clap.

00:00:36,120 --> 00:00:37,120
Let me know.

00:00:37,120 --> 00:00:38,120
I want to hear it.

00:00:38,120 --> 00:00:42,719
If you really like it, shout!

00:00:42,719 --> 00:00:47,920
If you're moved by it just come on and clap I do real time claps.

00:00:47,920 --> 00:00:49,829
I can keep going.

00:00:49,829 --> 00:00:53,510
So, here is the debugger.

00:00:53,510 --> 00:00:55,640
My name is Jason Laster.

00:00:55,640 --> 00:00:59,920
And I have the privilege to work full time on this guy.

00:00:59,920 --> 00:01:02,629
It's great.

00:01:02,629 --> 00:01:12,750
Most recently we made this decision to rewrite it in actually React and Redux to rethink

00:01:12,750 --> 00:01:17,840
things we are doing and do some really cool things that are great too.

00:01:17,840 --> 00:01:19,840
Is there an echo?

00:01:19,840 --> 00:01:22,649
Or is it just me?

00:01:22,649 --> 00:01:23,649
Cool.

00:01:23,649 --> 00:01:24,649
Okay.

00:01:24,649 --> 00:01:30,680
One thing we did was we moved to GitHub and started doing local development as a website,

00:01:30,680 --> 00:01:34,530
so we can start it up with Webpack and Yarn.

00:01:34,530 --> 00:01:41,709
And then click that button, or other buttons or Chrome and Node, find a Firefox, and debug

00:01:41,709 --> 00:01:44,320
it as a website.

00:01:44,320 --> 00:01:46,149
Not as a browser.

00:01:46,149 --> 00:01:48,369
And that's been amazing for working on it.

00:01:48,369 --> 00:01:53,390
You're just like, refresh and you got everything new and you're debugging it.

00:01:53,390 --> 00:01:58,000
And if you want to debug that, you've got a browser debugger.

00:01:58,000 --> 00:02:01,119
No problem.

00:02:01,119 --> 00:02:04,660
And what we're working on, maybe with Chrome, maybe on the side.

00:02:04,660 --> 00:02:05,660
It's a website.

00:02:05,660 --> 00:02:09,399
You can do whatever you want to do.

00:02:09,399 --> 00:02:12,270
We focus on two things recently.

00:02:12,270 --> 00:02:15,410
And we're going to carry this out for the next year or two.

00:02:15,410 --> 00:02:16,670
One of them is frameworks.

00:02:16,670 --> 00:02:21,030
Because we realize that so many people are building modern apps with frameworks and there's

00:02:21,030 --> 00:02:26,920
so much we can do to make debugging better if we use them.

00:02:26,920 --> 00:02:28,430
And Babel.

00:02:28,430 --> 00:02:33,480
So, I've got stickers with me for the TC39 because we work closely with the JavaScript

00:02:33,480 --> 00:02:34,480
team.

00:02:34,480 --> 00:02:36,459
And stickers for Babel.

00:02:36,459 --> 00:02:40,849
Because we work just as closely with them because we know that people who are writing

00:02:40,849 --> 00:02:47,379
apps today are often using things like JSX and Flow and TypeScript and new language features

00:02:47,379 --> 00:02:51,420
that can't be parsed by the Firefox parser.

00:02:51,420 --> 00:02:54,709
They don't want to.

00:02:54,709 --> 00:03:01,390
And we have worked with the team and added features that would not have been possible

00:03:01,390 --> 00:03:06,260
otherwise like break points that stay in your function when you change your codes.

00:03:06,260 --> 00:03:07,290
You don't have to move them.

00:03:07,290 --> 00:03:11,790
Or when you step in the code you wrote, the original code, it just works.

00:03:11,790 --> 00:03:16,270
Even though you're stepping over ten lines of generated code.

00:03:16,270 --> 00:03:19,639
It's really, really amazing.

00:03:19,639 --> 00:03:25,569
And I think in part because we are in React and web developers can work on it, and we're

00:03:25,569 --> 00:03:33,480
in GitHub and we are on Twitter, we found this amazing community of people who want

00:03:33,480 --> 00:03:36,760
to work on the tools that they use every day.

00:03:36,760 --> 00:03:42,610
And if you are interested in hacking on developer tools, I want to say that I have never found

00:03:42,610 --> 00:03:47,470
a team more open to open source than the Firefox Dev tools team.

00:03:47,470 --> 00:03:51,739
Come join us and work on the debugger or the inspector or console.

00:03:51,739 --> 00:03:52,739
We really want that.

00:03:52,739 --> 00:03:55,200
In fact, we kind of need it.

00:03:55,200 --> 00:03:58,560
10, 12 people, it's really, really small.

00:03:58,560 --> 00:04:04,219
And almost everything you see is a product of the great work in the community.

00:04:04,219 --> 00:04:07,769
And they have done search.

00:04:07,769 --> 00:04:11,969
Amazing tests and flow types because those things help the community.

00:04:11,969 --> 00:04:14,010
Our tooling comes from the community.

00:04:14,010 --> 00:04:17,459
We wouldn't have it otherwise.

00:04:17,459 --> 00:04:22,010
And I am so grateful for the team that has come and joined us and helped mentor.

00:04:22,010 --> 00:04:25,720
Their charter is to help newcomers get started.

00:04:25,720 --> 00:04:26,830
Answer their questions.

00:04:26,830 --> 00:04:29,070
Like, why does that work that way?

00:04:29,070 --> 00:04:30,390
How do I get Yarn working?

00:04:30,390 --> 00:04:31,820
Or Node?

00:04:31,820 --> 00:04:35,820
They're here to help people come in and they love it as much as we do.

00:04:35,820 --> 00:04:37,190
Huge thanks to them.

00:04:37,190 --> 00:04:38,570
Many of them are here now.

00:04:38,570 --> 00:04:40,160
And you guys rock.

00:04:40,160 --> 00:04:42,640
You all rock.

00:04:42,640 --> 00:04:43,640
Yes.

00:04:43,640 --> 00:04:45,120
So, debugging.

00:04:45,120 --> 00:04:47,600
We're done, right?

00:04:47,600 --> 00:04:49,230
Like, we've done it.

00:04:49,230 --> 00:04:51,010
It's a solved problem.

00:04:51,010 --> 00:04:52,380
Sure.

00:04:52,380 --> 00:04:56,630
I kind of have this belief that in some ways it's gotten worse because our apps have gotten

00:04:56,630 --> 00:05:00,170
so much better and maybe our tools haven't caught up.

00:05:00,170 --> 00:05:06,570
And we're still kind of playing computer, and at the end of the day, maybe a good night's

00:05:06,570 --> 00:05:08,910
sleep is all you need?

00:05:08,910 --> 00:05:13,260
So, there's more to do.

00:05:13,260 --> 00:05:19,280
Even a simple feature like a heart let's say you want to like, click the heart.

00:05:19,280 --> 00:05:21,420
And you want to see it hearted.

00:05:21,420 --> 00:05:23,420
Can we heart the heart?

00:05:23,420 --> 00:05:26,320
Even that can be difficult today.

00:05:26,320 --> 00:05:29,200
You click it, and nothing happens.

00:05:29,200 --> 00:05:30,200
Why?

00:05:30,200 --> 00:05:35,520
Well, a lot of things have to happen for the heart to be hearted.

00:05:35,520 --> 00:05:38,540
Generally speaking, there's a whole path for updating the data.

00:05:38,540 --> 00:05:44,510
You got get the UI data, talk to the API, get the data from the API.

00:05:44,510 --> 00:05:45,560
Update the store.

00:05:45,560 --> 00:05:49,900
Once the store is up to date, we can update the API, but it can break at any point along

00:05:49,900 --> 00:05:50,900
the way.

00:05:50,900 --> 00:05:54,070
You can add all the logs you want or understand any step.

00:05:54,070 --> 00:05:59,970
And you have to understand the system and maybe it's going to take a while.

00:05:59,970 --> 00:06:06,340
The thing I'm most excited, the one takeaway for this whole talk is with time travel, we

00:06:06,340 --> 00:06:10,420
have a full recording of time, which means we can show you this thing.

00:06:10,420 --> 00:06:12,040
This thing right here.

00:06:12,040 --> 00:06:14,490
And if you want to, you can step to any point.

00:06:14,490 --> 00:06:16,990
You can jump to any point in the path and see it immediately.

00:06:16,990 --> 00:06:21,120
You don't have refresh or re click or pause or look at logs.

00:06:21,120 --> 00:06:22,120
We can give it you.

00:06:22,120 --> 00:06:25,650
It opens up all these opportunities that are now possible.

00:06:25,650 --> 00:06:28,900
But time travel is not a new thing.

00:06:28,900 --> 00:06:29,950
Others have done it.

00:06:29,950 --> 00:06:39,710
I remember when Dan Abramov showcased Redux not too long ago I think at JSConfEU.

00:06:39,710 --> 00:06:41,321
And something he said stuck with me.

00:06:41,321 --> 00:06:44,400
He wanted time travel.

00:06:44,400 --> 00:06:46,270
He wanted to reduce his action over time.

00:06:46,270 --> 00:06:48,740
But he wanted time travel.

00:06:48,740 --> 00:06:52,420
And a demo is just crazy.

00:06:52,420 --> 00:06:57,620
You can get this slider that shows you all the actions over time and as you're moving,

00:06:57,620 --> 00:06:59,170
you can see the UI update.

00:06:59,170 --> 00:07:00,170
It's perfect.

00:07:00,170 --> 00:07:01,170
It's magical.

00:07:01,170 --> 00:07:03,160
It's what you want to develop.

00:07:03,160 --> 00:07:07,680
But it only works if you're using Redux, and only shows the Redux actions.

00:07:07,680 --> 00:07:09,950
It's not full-time travel.

00:07:09,950 --> 00:07:16,230
There's another tool, Cyprus, which is an amazing integration test tool and makes it

00:07:16,230 --> 00:07:19,120
easy, in fact, fun, to write integration tests.

00:07:19,120 --> 00:07:22,870
And this reporter on the left that shows you things that change over time.

00:07:22,870 --> 00:07:25,580
So, you can mouse over the reporter.

00:07:25,580 --> 00:07:27,720
And for each action, see the UI update.

00:07:27,720 --> 00:07:28,720
Which is brilliant.

00:07:28,720 --> 00:07:29,750
You get a before and after.

00:07:29,750 --> 00:07:32,320
But, again, it's only the UI.

00:07:32,320 --> 00:07:33,910
And, yes, it's amazing.

00:07:33,910 --> 00:07:34,910
They do amazing work.

00:07:34,910 --> 00:07:37,270
You should try it.

00:07:37,270 --> 00:07:40,950
So, how do we do a general-purpose thing?

00:07:40,950 --> 00:07:44,330
The good thing is that we already have.

00:07:44,330 --> 00:07:50,550
About ten years ago Mozilla invested in R and R, which is fast recording and replay

00:07:50,550 --> 00:07:52,680
for C++.

00:07:52,680 --> 00:07:58,870
And this thing, which is now used quite a lot gives use that ability to script through

00:07:58,870 --> 00:08:00,720
time.

00:08:00,720 --> 00:08:01,720
It's a fast.

00:08:01,720 --> 00:08:04,900
Because if making the recording is slow, you're not going to use it.

00:08:04,900 --> 00:08:10,830
If rewinding is slow, you may reach for it if you need to, but you might not.

00:08:10,830 --> 00:08:13,961
And it goes down to the kernel.

00:08:13,961 --> 00:08:16,400
It knows about the OS, P trace and S trace.

00:08:16,400 --> 00:08:17,480
It has everything.

00:08:17,480 --> 00:08:20,530
We're talking about the heap.

00:08:20,530 --> 00:08:23,000
So, that makes it universal as well.

00:08:23,000 --> 00:08:27,810
Once you have all that data, it can run for Firefox, it can run for Chrome.

00:08:27,810 --> 00:08:31,240
It can even run for arbitrary C or C++ programs.

00:08:31,240 --> 00:08:33,180
It just works.

00:08:33,180 --> 00:08:34,180
And you can reproduce things.

00:08:34,180 --> 00:08:35,930
It's really cool.

00:08:35,930 --> 00:08:41,500
The problem is, what if your application has non determinism?

00:08:41,500 --> 00:08:46,290
What if it's like the browser that every time you use it, it can be different?

00:08:46,290 --> 00:08:51,980
Well, about five years ago this project for web replay came out which said, this RR thing

00:08:51,980 --> 00:08:53,740
is great for the platform.

00:08:53,740 --> 00:08:56,459
But can we give it to web developers?

00:08:56,459 --> 00:08:58,350
Yeah.

00:08:58,350 --> 00:08:59,890
Just love that animation.

00:08:59,890 --> 00:09:03,470
It serves no purpose, but it's fun.

00:09:03,470 --> 00:09:08,240
And amazingly, I have been using web replay and it's fast.

00:09:08,240 --> 00:09:12,189
The recordings do not slow down the browser that much.

00:09:12,189 --> 00:09:16,750
And we're still using the system recording to get all the data so it's as deep as you

00:09:16,750 --> 00:09:18,720
want to go.

00:09:18,720 --> 00:09:24,649
But because Firefox is complicated, the GC is complicated, networking is complicated

00:09:24,649 --> 00:09:25,720
with APIs, layout, it's madness.

00:09:25,720 --> 00:09:29,819
It's tied to Firefox.

00:09:29,819 --> 00:09:34,660
It's not going to usually be portable to Chrome even though we would like to work with them.

00:09:34,660 --> 00:09:37,999
So, with that comes the risky part.

00:09:37,999 --> 00:09:40,509
Let me show what we've got.

00:09:40,509 --> 00:09:45,500
So, at the moment, I've got a custom builder Firefox over here.

00:09:45,500 --> 00:09:48,050
And I'm not going to update it.

00:09:48,050 --> 00:09:49,050
Quite yet.

00:09:49,050 --> 00:09:50,050
So, that's my tab.

00:09:50,050 --> 00:09:54,130
I think that's going to work.

00:09:54,130 --> 00:09:55,889
That's the color picker.

00:09:55,889 --> 00:09:56,889
Cool.

00:09:56,889 --> 00:09:59,290
Go over here.

00:09:59,290 --> 00:10:02,810
And web developer, going to record execution.

00:10:02,810 --> 00:10:05,980
I don't think it has to stay in the contacts menu, but for now, it is.

00:10:05,980 --> 00:10:10,300
And once I do that, I've started a record process.

00:10:10,300 --> 00:10:12,300
Everything that happens here every click.

00:10:12,300 --> 00:10:14,630
This is a fun color picker I made.

00:10:14,630 --> 00:10:16,649
Select colors, it keeps them.

00:10:16,649 --> 00:10:17,649
Everything is now recorded.

00:10:17,649 --> 00:10:20,760
What does that now mean?

00:10:20,760 --> 00:10:22,300
Well, let's see here.

00:10:22,300 --> 00:10:24,089
I've got some code for some demos.

00:10:24,089 --> 00:10:29,320
I'm going to set a directory route, so it can focus in on the code we're working on.

00:10:29,320 --> 00:10:31,060
Find the index.

00:10:31,060 --> 00:10:32,569
And now I've got some code.

00:10:32,569 --> 00:10:33,790
We have an outline viewer.

00:10:33,790 --> 00:10:35,709
I told you Babel is amazing.

00:10:35,709 --> 00:10:38,870
These things start happening when you introduce Babel.

00:10:38,870 --> 00:10:42,540
Really cool features.

00:10:42,540 --> 00:10:46,170
Set a break point, did some JSX.

00:10:46,170 --> 00:10:47,759
And we paused.

00:10:47,759 --> 00:10:49,360
That's great.

00:10:49,360 --> 00:10:56,019
So, in some ways time travel, web replay, is the most simple feature that's going to

00:10:56,019 --> 00:10:59,660
be shown because we've just added some buttons.

00:10:59,660 --> 00:11:06,699
It's the same debugger that you know, but now we can step back to slightly step forward.

00:11:06,699 --> 00:11:07,699
And, yeah.

00:11:07,699 --> 00:11:09,579
We can rewind.

00:11:09,579 --> 00:11:15,300
So, let's say there's some bug with the way the wheel was working and or we just don't

00:11:15,300 --> 00:11:16,300
like blue.

00:11:16,300 --> 00:11:21,120
We can just hit that rewind button and now we're going to get a new color.

00:11:21,120 --> 00:11:25,149
And for fun we're going do, do, do [singing] I don't like that one.

00:11:25,149 --> 00:11:26,759
I want this one.

00:11:26,759 --> 00:11:27,759
Yeah.

00:11:27,759 --> 00:11:28,759
No.

00:11:28,759 --> 00:11:29,759
This one.

00:11:29,759 --> 00:11:30,759
That's good.

00:11:30,759 --> 00:11:32,279
I hope the color contrast is enough for you to see.

00:11:32,279 --> 00:11:33,279
That's green.

00:11:33,279 --> 00:11:34,279
That's changing.

00:11:34,279 --> 00:11:39,920
And I'm going to set up conditional break point here to get the name of the color.

00:11:39,920 --> 00:11:43,790
And I typed this right.

00:11:43,790 --> 00:11:48,439
I want to pause at last time we were blue.

00:11:48,439 --> 00:11:52,579
And I'll rewind and boom, boom, boom yes.

00:11:52,579 --> 00:11:53,839
There we are.

00:11:53,839 --> 00:11:55,290
That is now possible.

00:11:55,290 --> 00:12:03,380
[ Applause ] The first time we went blue.

00:12:03,380 --> 00:12:07,089
Let's go the other way too.

00:12:07,089 --> 00:12:10,250
I like that just as much.

00:12:10,250 --> 00:12:11,509
Sweet.

00:12:11,509 --> 00:12:17,119
You know, small side track, just for a minute, I promise.

00:12:17,119 --> 00:12:21,560
We have been working on this other thing for the past three months that I'm really excited

00:12:21,560 --> 00:12:24,279
about and I'm just going to show that to you quickly too.

00:12:24,279 --> 00:12:27,949
So, this code has this function, get HSL.

00:12:27,949 --> 00:12:28,949
Yeah.

00:12:28,949 --> 00:12:31,569
It takes a color.

00:12:31,569 --> 00:12:33,450
Shows the HSL value.

00:12:33,450 --> 00:12:38,160
I wrote this function in a utils file over here.

00:12:38,160 --> 00:12:41,480
Let's find that, utils.

00:12:41,480 --> 00:12:42,480
Yes.

00:12:42,480 --> 00:12:45,509
Get HSL.

00:12:45,509 --> 00:12:47,310
And I can go to the console.

00:12:47,310 --> 00:12:48,910
I can type it.

00:12:48,910 --> 00:12:53,620
And over here in the module I can see it.

00:12:53,620 --> 00:12:55,579
Everything just works.

00:12:55,579 --> 00:12:58,509
But that's not the native behavior.

00:12:58,509 --> 00:13:00,029
It would be if we were using ES modules.

00:13:00,029 --> 00:13:01,569
ES modules are amazing.

00:13:01,569 --> 00:13:03,329
It just works.

00:13:03,329 --> 00:13:06,819
But this was a React app built with Webpack.

00:13:06,819 --> 00:13:13,839
And the default behavior for Webpack and frankly with a lot of Babel plugins is you get this.

00:13:13,839 --> 00:13:15,059
Different blocks for different scopes.

00:13:15,059 --> 00:13:16,059
What's that?

00:13:16,059 --> 00:13:17,059
What's that?

00:13:17,059 --> 00:13:18,059
What's this JS thing?

00:13:18,059 --> 00:13:19,059
Oh, boy.

00:13:19,059 --> 00:13:21,769
Where did this function go?

00:13:21,769 --> 00:13:23,180
I don't know.

00:13:23,180 --> 00:13:24,180
Yeah.

00:13:24,180 --> 00:13:25,180
right here.

00:13:25,180 --> 00:13:26,180
Okay.

00:13:26,180 --> 00:13:27,180
Cool.

00:13:27,180 --> 00:13:28,180
So, we don't want that.

00:13:28,180 --> 00:13:29,180
We want this.

00:13:29,180 --> 00:13:30,180
This is what you want.

00:13:30,180 --> 00:13:33,670
Anyways, I just want to give a shoutout because we have worked with Logan Smith on the Babel

00:13:33,670 --> 00:13:37,180
team for the past five months?

00:13:37,180 --> 00:13:39,250
And he's done amazing work.

00:13:39,250 --> 00:13:45,779
We're actually re parsing the files using source maps to map it up and magic.

00:13:45,779 --> 00:13:49,749
That probably should never have worked.

00:13:49,749 --> 00:13:52,959
But Logan is a genius.

00:13:52,959 --> 00:13:56,440
And he knows the internals of the transforms and source maps.

00:13:56,440 --> 00:14:02,429
So, kudos to him.

00:14:02,429 --> 00:14:11,230
[ Applause ] Demo number two.

00:14:11,230 --> 00:14:14,279
Oops.

00:14:14,279 --> 00:14:18,529
No good talk can avoid to do and PC.

00:14:18,529 --> 00:14:22,970
It's so good.

00:14:22,970 --> 00:14:28,949
And frankly, I have to do open every single day because that's what I debug.

00:14:28,949 --> 00:14:30,809
It's great.

00:14:30,809 --> 00:14:32,660
It works.

00:14:32,660 --> 00:14:34,420
So, clear that route.

00:14:34,420 --> 00:14:36,050
We'll go in here.

00:14:36,050 --> 00:14:37,449
Find some JavaScript.

00:14:37,449 --> 00:14:39,309
Set a new route.

00:14:39,309 --> 00:14:40,529
Voila, some JS.

00:14:40,529 --> 00:14:43,209
And it's Backbone and I love it.

00:14:43,209 --> 00:14:47,749
So, we just set up a breakpoint over here.

00:14:47,749 --> 00:14:48,749
Boom.

00:14:48,749 --> 00:14:51,890
How many people did Backbone development back in the day?

00:14:51,890 --> 00:14:52,890
Yeah.

00:14:52,890 --> 00:14:54,060
That was the that was great.

00:14:54,060 --> 00:14:55,300
That was the shit.

00:14:55,300 --> 00:14:57,570
That was I loved it.

00:14:57,570 --> 00:15:00,170
That's where I got started.

00:15:00,170 --> 00:15:04,029
Backbone was like a bring your own render function library.

00:15:04,029 --> 00:15:07,930
Don't worry about it.

00:15:07,930 --> 00:15:12,100
And I just took it for granted and it was great.

00:15:12,100 --> 00:15:13,119
But think about this demo.

00:15:13,119 --> 00:15:14,819
I saw this render function.

00:15:14,819 --> 00:15:17,249
I was like, really?

00:15:17,249 --> 00:15:18,940
What is it even doing?

00:15:18,940 --> 00:15:20,709
I mean, really?

00:15:20,709 --> 00:15:21,709
Come on?

00:15:21,709 --> 00:15:24,569
And I started looking at it and it was like, huh.

00:15:24,569 --> 00:15:26,550
I started looking at it more closely.

00:15:26,550 --> 00:15:28,720
Maybe back here and check that out.

00:15:28,720 --> 00:15:31,559
What is this like why are we toggle visible?

00:15:31,559 --> 00:15:33,459
That's like custom code.

00:15:33,459 --> 00:15:35,040
I want to look at that.

00:15:35,040 --> 00:15:38,489
And step in.

00:15:38,489 --> 00:15:39,519
Is hidden.

00:15:39,519 --> 00:15:41,829
Hmm m okay.

00:15:41,829 --> 00:15:44,499
We're going to like actually manipulate the check box right now.

00:15:44,499 --> 00:15:45,499
Find.

00:15:45,499 --> 00:15:46,499
And render.

00:15:46,499 --> 00:15:47,499
I don't even care.

00:15:47,499 --> 00:15:48,649
What's this doing?

00:15:48,649 --> 00:15:50,610
What's this 2 JSON?

00:15:50,610 --> 00:15:51,610
Okay.

00:15:51,610 --> 00:15:57,310
We just serialized some data and then we went with a template.

00:15:57,310 --> 00:15:58,739
The thing I love about this oops.

00:15:58,739 --> 00:16:00,920
Did I get that?

00:16:00,920 --> 00:16:01,920
Go back.

00:16:01,920 --> 00:16:03,269
Oh, because it's on the same line.

00:16:03,269 --> 00:16:04,269
Nice.

00:16:04,269 --> 00:16:05,269
Maybe this?

00:16:05,269 --> 00:16:06,269
No.

00:16:06,269 --> 00:16:12,170
No well, I can always like step back and then jump in, right?

00:16:12,170 --> 00:16:13,170
Yes!

00:16:13,170 --> 00:16:14,170
Templates.

00:16:14,170 --> 00:16:15,410
With data.

00:16:15,410 --> 00:16:16,620
Amazing.

00:16:16,620 --> 00:16:20,160
Debugging with time travel is about exploring the entire space.

00:16:20,160 --> 00:16:23,939
But it's also about looking at one complicated function and not being afraid to step forward

00:16:23,939 --> 00:16:25,060
because you can always go back.

00:16:25,060 --> 00:16:28,129
So, I wanted to show that.

00:16:28,129 --> 00:16:29,319
And oops.

00:16:29,319 --> 00:16:33,300
Maybe I'll just close this recording and start a new one.

00:16:33,300 --> 00:16:34,510
Yeah.

00:16:34,510 --> 00:16:35,709
No.

00:16:35,709 --> 00:16:38,130
That's lame.

00:16:38,130 --> 00:16:40,540
I'm sorry.

00:16:40,540 --> 00:16:45,360
Do, do, do oh.

00:16:45,360 --> 00:16:46,570
Hey.

00:16:46,570 --> 00:16:47,769
Yeah.

00:16:47,769 --> 00:16:48,980
No.

00:16:48,980 --> 00:16:52,600
I mean, yeah.

00:16:52,600 --> 00:16:58,630
But, all right, fine, whatever.

00:16:58,630 --> 00:16:59,839
Focus.

00:16:59,839 --> 00:17:02,420
I'm going save this.

00:17:02,420 --> 00:17:03,420
Berlin.

00:17:03,420 --> 00:17:04,420
Close it.

00:17:04,420 --> 00:17:05,420
Yeah.

00:17:05,420 --> 00:17:07,030
You see what's coming, right?

00:17:07,030 --> 00:17:11,210
Don't you want to check out these to dos we created?

00:17:11,210 --> 00:17:13,500
Right?

00:17:13,500 --> 00:17:15,790
Yeah.

00:17:15,790 --> 00:17:20,720
[ Laughter ] We don't have the ability to set a breakpoint

00:17:20,720 --> 00:17:23,240
yet in open DevTools, but that's coming.

00:17:23,240 --> 00:17:28,049
And, yes, that's exciting.

00:17:28,049 --> 00:17:32,869
That's my favorite demo.

00:17:32,869 --> 00:17:34,070
[ Applause ]

00:17:34,070 --> 00:17:36,480
All right.

00:17:36,480 --> 00:17:41,721
So, there are four things I want to show you that are not really live demo able and we

00:17:41,721 --> 00:17:43,549
got to move.

00:17:43,549 --> 00:17:45,259
So, exceptions.

00:17:45,259 --> 00:17:49,159
By the way, was it Sandra's talk this morning on exceptions?

00:17:49,159 --> 00:17:50,159
Amazing.

00:17:50,159 --> 00:17:51,159
God.

00:17:51,159 --> 00:17:53,870
That was so cool.

00:17:53,870 --> 00:17:55,470
Yes.

00:17:55,470 --> 00:18:02,430
We all know them, we all love them, we all hate when we get them and don't know why,

00:18:02,430 --> 00:18:04,680
and we're not sure what to do.

00:18:04,680 --> 00:18:07,800
Well, time travel, right?

00:18:07,800 --> 00:18:11,290
That thing oh, shoot.

00:18:11,290 --> 00:18:12,390
That thing is interesting.

00:18:12,390 --> 00:18:14,860
Maybe I'll look at the call stack.

00:18:14,860 --> 00:18:17,130
No, that doesn't really help me.

00:18:17,130 --> 00:18:23,500
I'm going to click that link at index and rewind to that spot where it happened.

00:18:23,500 --> 00:18:24,500
ready?

00:18:24,500 --> 00:18:25,500
Yes, yes.

00:18:25,500 --> 00:18:26,500
Yes.

00:18:26,500 --> 00:18:27,500
Yeah!

00:18:27,500 --> 00:18:28,500
That's what you want.

00:18:28,500 --> 00:18:30,820
You want to feel why it was called that or if it was called with the wrong names.

00:18:30,820 --> 00:18:34,100
And now you can.

00:18:34,100 --> 00:18:35,909
What about production, right?

00:18:35,909 --> 00:18:39,789
Like, this is this is the money.

00:18:39,789 --> 00:18:46,470
If we can help you debug your production app as getting hundreds of exceptions, oh, that

00:18:46,470 --> 00:18:48,390
would be good.

00:18:48,390 --> 00:18:54,299
And if you forget about the privacy thing, like if you're not working at Bank of America,

00:18:54,299 --> 00:18:57,210
we might just be able to turn this on by default.

00:18:57,210 --> 00:19:02,309
At which point that error now comes with a recording.

00:19:02,309 --> 00:19:12,749
You can download that recording and there you are.

00:19:12,749 --> 00:19:20,200
[ Applause ]

00:19:20,200 --> 00:19:22,240
What about failing tests?

00:19:22,240 --> 00:19:31,120
Who has intermittents?

00:19:31,120 --> 00:19:32,120
I want to emphasize.

00:19:32,120 --> 00:19:33,720
Raise your hand if you have gotten intermittent.

00:19:33,720 --> 00:19:34,720
1% time.

00:19:34,720 --> 00:19:35,720
That could never happen.

00:19:35,720 --> 00:19:37,200
I wrote this perfectly.

00:19:37,200 --> 00:19:41,760
No, there is conditions.

00:19:41,760 --> 00:19:46,130
The killer feature in the short term is to be able to debug intermittents.

00:19:46,130 --> 00:19:50,090
So, whenever there's something ha happens that surprises you, you have that same recording.

00:19:50,090 --> 00:19:52,460
You can pull it down.

00:19:52,460 --> 00:19:55,980
And maybe you have a happy case and a sad case, and you can just compare them.

00:19:55,980 --> 00:19:59,250
Maybe ask the computer to do it.

00:19:59,250 --> 00:20:01,669
All right.

00:20:01,669 --> 00:20:02,890
Logs.

00:20:02,890 --> 00:20:06,649
The thing that I hear, having worked on a debugger for more than two years, more than

00:20:06,649 --> 00:20:09,750
anything, and it drives me nuts is an apology.

00:20:09,750 --> 00:20:14,870
Everyone comes up and is like, yeah, debuggers are cool.

00:20:14,870 --> 00:20:17,690
I should use it.

00:20:17,690 --> 00:20:20,290
Good developers use it.

00:20:20,290 --> 00:20:28,049
In fact, I talk to a lot of really senior engineers and they're not apologizing.

00:20:28,049 --> 00:20:32,669
They're like, that's what I do.

00:20:32,669 --> 00:20:36,490
And there's some truth to the fact that when you pause and when you're stepping it can

00:20:36,490 --> 00:20:40,130
be a little slow and sometimes you want that full history and there should be a way to

00:20:40,130 --> 00:20:42,929
kind of marry them.

00:20:42,929 --> 00:20:48,880
And with time travel, by the way, this is a real bug that I had for three months.

00:20:48,880 --> 00:20:51,940
When you hover on a variable you want to show the preview.

00:20:51,940 --> 00:20:57,740
But it's hard to know if you're hovering on the variable and then the pop up or off.

00:20:57,740 --> 00:21:01,010
So, I added tons of logs.

00:21:01,010 --> 00:21:02,010
Three month bug.

00:21:02,010 --> 00:21:03,780
Finally, I found it.

00:21:03,780 --> 00:21:09,460
I was able to click on the console log message, go into the debugger and see what the fuck

00:21:09,460 --> 00:21:11,250
was going on.

00:21:11,250 --> 00:21:13,340
And time travel, it's like Alexa at some point.

00:21:13,340 --> 00:21:16,100
Alexa, I want to go back in time.

00:21:16,100 --> 00:21:21,919
That doesn't have it, I'm using knightly, whatever.

00:21:21,919 --> 00:21:27,740
Just being able to reach for it and it makes it easier to be able to do what you want to

00:21:27,740 --> 00:21:28,740
do.

00:21:28,740 --> 00:21:31,679
That's number one.

00:21:31,679 --> 00:21:32,679
Redux.

00:21:32,679 --> 00:21:36,830
Rebuilt the debugger to use React and Redux, I wanted time travel.

00:21:36,830 --> 00:21:41,380
You can kind of see that's something I'm into.

00:21:41,380 --> 00:21:45,990
And on the right, you see that we're using the Redux Dev Tools and it's awesome.

00:21:45,990 --> 00:21:50,950
Shows a list of all the actions for the debugger.

00:21:50,950 --> 00:21:54,799
We get sources, we get pause action, we show the pause data.

00:21:54,799 --> 00:21:56,649
All that stuff.

00:21:56,649 --> 00:21:59,470
Here is Redux Dev Tools hooked up with time travel.

00:21:59,470 --> 00:22:04,230
So, Dev Tools shows us the state of the app, the UI, at a certain point in time.

00:22:04,230 --> 00:22:11,309
When I finally want to jump into the debugger and wait for it maybe find the pause thing.

00:22:11,309 --> 00:22:13,590
There we have it.

00:22:13,590 --> 00:22:14,590
Boom.

00:22:14,590 --> 00:22:16,389
We have the two, one on top of the other.

00:22:16,389 --> 00:22:22,830
And you don't just see the redux date, you see the code behind it that fired them.

00:22:22,830 --> 00:22:25,470
And you can just jump wherever.

00:22:25,470 --> 00:22:26,470
Nice.

00:22:26,470 --> 00:22:28,870
This demo was find of fabricated because I didn't want to get the Redux Dev Tools thing

00:22:28,870 --> 00:22:30,690
in.

00:22:30,690 --> 00:22:34,140
But you get the point.

00:22:34,140 --> 00:22:35,140
UI.

00:22:35,140 --> 00:22:40,590
So, you don't just have to debug your JavaScript to use the recording, you can you're recording

00:22:40,590 --> 00:22:41,769
everything at this point.

00:22:41,769 --> 00:22:45,679
So, why not look at the DOM.

00:22:45,679 --> 00:22:50,630
And how often have you run into this case where a website you are working on has some

00:22:50,630 --> 00:22:55,590
loading interaction and maybe seen and drives you nuts because it flashes and you're not

00:22:55,590 --> 00:22:56,590
sure why.

00:22:56,590 --> 00:22:59,710
It's probably images coming down, visuals loading.

00:22:59,710 --> 00:23:00,710
CSS.

00:23:00,710 --> 00:23:01,710
You name it.

00:23:01,710 --> 00:23:03,659
We have the net monitor.

00:23:03,659 --> 00:23:04,980
We have the inspector.

00:23:04,980 --> 00:23:08,299
And now with time travel, we have two ways to pause.

00:23:08,299 --> 00:23:16,039
You can say pause at the time of this loading or pause at the time that the layout changed.

00:23:16,039 --> 00:23:17,750
And that's amazing, right?

00:23:17,750 --> 00:23:22,429
Because you can see the before and after and you can just see the comparison.

00:23:22,429 --> 00:23:23,710
All the stuff.

00:23:23,710 --> 00:23:24,710
Frameworks.

00:23:24,710 --> 00:23:25,710
Yeah.

00:23:25,710 --> 00:23:27,630
All right.

00:23:27,630 --> 00:23:30,000
Two things here.

00:23:30,000 --> 00:23:34,419
One, with React we pause in a render with React 16.

00:23:34,419 --> 00:23:35,840
You don't know why you paused.

00:23:35,840 --> 00:23:38,149
In fact, you don't know where you're paused.

00:23:38,149 --> 00:23:41,559
You know you're in a component, but why?

00:23:41,559 --> 00:23:42,559
What's the parent?

00:23:42,559 --> 00:23:44,690
What's the whole component tree?

00:23:44,690 --> 00:23:49,200
Well, we have been working on this framework feature, so we can show you the tree in your

00:23:49,200 --> 00:23:50,840
call stack which is useful.

00:23:50,840 --> 00:23:58,440
But unfortunately, because it's async, we can't actually let you go back to that render

00:23:58,440 --> 00:24:00,299
and see it because it's already happened.

00:24:00,299 --> 00:24:01,299
It's done.

00:24:01,299 --> 00:24:02,830
And so, yeah.

00:24:02,830 --> 00:24:03,830
Time travel.

00:24:03,830 --> 00:24:04,830
Boom!

00:24:04,830 --> 00:24:05,830
Boom!

00:24:05,830 --> 00:24:06,830
It's now possible again.

00:24:06,830 --> 00:24:09,500
It just works like you want it to.

00:24:09,500 --> 00:24:14,630
And frameworks are going async and scheduling, it's now recoverable.

00:24:14,630 --> 00:24:18,460
You have a set time out, you have some frames below it, can't see them.

00:24:18,460 --> 00:24:20,980
Now you can.

00:24:20,980 --> 00:24:25,889
Your pause and a render because of a redux action that fired.

00:24:25,889 --> 00:24:29,000
We can figure out that the reason we're paused is Redux.

00:24:29,000 --> 00:24:30,710
And we can put that in the call stack.

00:24:30,710 --> 00:24:33,299
And, again, boom, you're in the action.

00:24:33,299 --> 00:24:35,529
Or, sorry, you're in the reducer.

00:24:35,529 --> 00:24:38,169
And if you want to, you can rewind to the action.

00:24:38,169 --> 00:24:39,299
Voila.

00:24:39,299 --> 00:24:42,690
[ Applause ] All right.

00:24:42,690 --> 00:24:48,350
I don't have much time.

00:24:48,350 --> 00:24:53,340
But I feel like that's just the beginning.

00:24:53,340 --> 00:24:57,549
There's so much we can do at this point and we haven't even scratched the surface.

00:24:57,549 --> 00:25:03,570
It's almost like we're used to debugging paper maps and we want Google Maps.

00:25:03,570 --> 00:25:06,899
We can build in the whole path and visualize so you can jump around.

00:25:06,899 --> 00:25:09,909
In fact, we can build a video player and you can scrub.

00:25:09,909 --> 00:25:15,350
Yeah, I love that animation.

00:25:15,350 --> 00:25:20,700
And before I finish, I just want to say that having joined Mozilla two years ago, I've

00:25:20,700 --> 00:25:23,649
realized how special a place it is.

00:25:23,649 --> 00:25:29,250
Netscape, open sourcing, Netscape in the browser in many ways created the world we live in

00:25:29,250 --> 00:25:32,309
now with open source at scale.

00:25:32,309 --> 00:25:33,850
Investing in the web.

00:25:33,850 --> 00:25:34,850
Investing in Rust.

00:25:34,850 --> 00:25:37,570
Because if you are going to build a fast browser, you need parallellization.

00:25:37,570 --> 00:25:42,740
Investing in ten years from now, if you have parallellization, you need to debug it.

00:25:42,740 --> 00:25:44,970
Has helped create the world we are now in.

00:25:44,970 --> 00:25:48,820
This is an experiment, I can see us pulling it off.

00:25:48,820 --> 00:25:51,140
We don't know if it's going to happen, but it could.

00:25:51,140 --> 00:25:52,140
So, thank you.

00:25:52,140 --> 00:25:52,141

YouTube URL: https://www.youtube.com/watch?v=rDq1AN1kSn4


