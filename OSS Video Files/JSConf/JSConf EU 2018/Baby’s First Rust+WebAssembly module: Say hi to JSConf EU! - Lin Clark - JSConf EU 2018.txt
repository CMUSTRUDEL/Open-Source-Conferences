Title: Baby’s First Rust+WebAssembly module: Say hi to JSConf EU! - Lin Clark - JSConf EU 2018
Publication date: 2018-06-18
Playlist: JSConf EU 2018
Description: 
	A secret project has been brewing for JSConf EU, and this weekend is the big reveal…
More in this blog post https://hacks.mozilla.org/2018/06/babys-first-rustwebassembly-module-say-hi-to-jsconf-eu/

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:08,750 --> 00:00:15,860
hi everyone I'm Lin Clark and I make

00:00:12,050 --> 00:00:18,500
Coke cartoons and I also work at Mozilla

00:00:15,860 --> 00:00:20,119
on things like webassembly which I gave

00:00:18,500 --> 00:00:21,470
a talk about last year here at Jay has

00:00:20,119 --> 00:00:23,810
come for you in fact that was what was

00:00:21,470 --> 00:00:26,690
featured on there and this talk is about

00:00:23,810 --> 00:00:29,710
webassembly too but this is a different

00:00:26,690 --> 00:00:31,789
kind of talk from last year's talk I

00:00:29,710 --> 00:00:34,129
think you've all probably seen this

00:00:31,789 --> 00:00:36,260
structure by now it's kind of hard to

00:00:34,129 --> 00:00:39,710
miss right in the middle there but you

00:00:36,260 --> 00:00:42,250
may have wondered what it was doing it's

00:00:39,710 --> 00:00:47,680
playing animations created by all of you

00:00:42,250 --> 00:00:50,329
but why why did we want to do this well

00:00:47,680 --> 00:00:52,219
one of the hardest problems when you're

00:00:50,329 --> 00:00:54,170
learning a new programming language is

00:00:52,219 --> 00:00:56,300
figuring out a project that you can work

00:00:54,170 --> 00:00:58,789
on one that will teach you the basics of

00:00:56,300 --> 00:01:00,410
the programming language but still keep

00:00:58,789 --> 00:01:03,680
you interested enough to keep learning

00:01:00,410 --> 00:01:06,110
more because there are only so many

00:01:03,680 --> 00:01:07,940
times they can implement HelloWorld in a

00:01:06,110 --> 00:01:11,240
new language and have it be interesting

00:01:07,940 --> 00:01:15,530
at all because your hello world has no

00:01:11,240 --> 00:01:17,960
real-world impact but what if your hello

00:01:15,530 --> 00:01:20,930
world could have an impact on the real

00:01:17,960 --> 00:01:23,049
world what if your hello world could

00:01:20,930 --> 00:01:25,729
control a structure like this one and

00:01:23,049 --> 00:01:27,500
that's exactly what you can do your

00:01:25,729 --> 00:01:30,530
hello world can play a light animation

00:01:27,500 --> 00:01:32,810
on the space out there now some of these

00:01:30,530 --> 00:01:35,450
animations are made with JavaScript and

00:01:32,810 --> 00:01:37,340
if you're here you might not be too

00:01:35,450 --> 00:01:41,030
interested in a JavaScript hello world

00:01:37,340 --> 00:01:43,189
but some of the animations are made in a

00:01:41,030 --> 00:01:46,880
language that you may be interested in

00:01:43,189 --> 00:01:50,090
learning and that's rust compiled to web

00:01:46,880 --> 00:01:51,890
assembly so you'll be coming away from

00:01:50,090 --> 00:01:54,290
jeaious convey you with lots of new

00:01:51,890 --> 00:01:56,600
friends and lots of new experiences and

00:01:54,290 --> 00:01:59,990
I hope that one of those new experiences

00:01:56,600 --> 00:02:03,470
is your first rust module compiled to

00:01:59,990 --> 00:02:05,689
web assembly so let's get started on

00:02:03,470 --> 00:02:09,380
baby's first rust - web assembly module

00:02:05,689 --> 00:02:11,600
and this is kind of the perfect project

00:02:09,380 --> 00:02:13,340
for that not because this is the kind of

00:02:11,600 --> 00:02:16,160
project that you would usually use web

00:02:13,340 --> 00:02:17,599
assembly for people use web assembly

00:02:16,160 --> 00:02:19,510
because they want to supercharge their

00:02:17,599 --> 00:02:21,700
application and make it run faster or

00:02:19,510 --> 00:02:25,959
because they want to use the same

00:02:21,700 --> 00:02:28,510
on the web and other platforms this

00:02:25,959 --> 00:02:30,100
project doesn't do either of those we

00:02:28,510 --> 00:02:32,200
create these animations ahead of time so

00:02:30,100 --> 00:02:34,480
we don't care about having consistent

00:02:32,200 --> 00:02:36,370
high performance and we don't need to

00:02:34,480 --> 00:02:39,880
run on any other devices so we don't

00:02:36,370 --> 00:02:41,470
need it to be portable the reason that

00:02:39,880 --> 00:02:43,420
this is a good project for getting

00:02:41,470 --> 00:02:45,040
started with web assembly is not because

00:02:43,420 --> 00:02:48,459
this is what you usually use web

00:02:45,040 --> 00:02:50,170
assembly for instead it's because it's

00:02:48,459 --> 00:02:52,420
really useful in giving you a mental

00:02:50,170 --> 00:02:56,290
model of how javascript and web assembly

00:02:52,420 --> 00:02:58,420
work together so let's take a look at

00:02:56,290 --> 00:03:00,760
what we need to do to take control of

00:02:58,420 --> 00:03:02,680
this space with web assembly and then

00:03:00,760 --> 00:03:04,120
I'll explain what makes a good mental

00:03:02,680 --> 00:03:09,280
model for how web assembly and

00:03:04,120 --> 00:03:12,150
JavaScript work together what we have

00:03:09,280 --> 00:03:13,930
here is a three dimensional space and

00:03:12,150 --> 00:03:15,390
really if you think about it it's

00:03:13,930 --> 00:03:18,840
actually a four dimensional space

00:03:15,390 --> 00:03:21,489
because we're going through time as well

00:03:18,840 --> 00:03:24,700
the computer can't think in these four

00:03:21,489 --> 00:03:26,950
dimensions so so how do we make these

00:03:24,700 --> 00:03:30,220
four dimensions make sense to the

00:03:26,950 --> 00:03:32,910
computer let's start with the fourth

00:03:30,220 --> 00:03:35,799
dimension and collapse down from there

00:03:32,910 --> 00:03:37,299
you're probably familiar with the way

00:03:35,799 --> 00:03:40,840
that we make time the fourth dimension

00:03:37,299 --> 00:03:45,070
makes sense to computers that's by using

00:03:40,840 --> 00:03:47,500
these things called frames on the web we

00:03:45,070 --> 00:03:49,239
talk about having 60 frames per second

00:03:47,500 --> 00:03:52,660
that's what you need to have smooth

00:03:49,239 --> 00:03:54,549
animations across the screen what that

00:03:52,660 --> 00:03:56,500
really means is that you have 60

00:03:54,549 --> 00:03:58,030
different snapshots of the screen of

00:03:56,500 --> 00:04:02,739
what the animation should look like at

00:03:58,030 --> 00:04:05,110
60 different moments in that second it's

00:04:02,739 --> 00:04:08,380
kind of like a flipbook and each frame

00:04:05,110 --> 00:04:10,690
is like a page in that flip book in our

00:04:08,380 --> 00:04:12,220
case the snapshot is a snapshot of what

00:04:10,690 --> 00:04:15,519
the lights on the space should look like

00:04:12,220 --> 00:04:19,299
and our frame rate for that is 35 frames

00:04:15,519 --> 00:04:21,430
per second so that brings us down to a

00:04:19,299 --> 00:04:23,530
sequence of snapshots of the space a

00:04:21,430 --> 00:04:26,620
sequence of 3d representations of the

00:04:23,530 --> 00:04:29,740
space now we want to go from 3d to 2d

00:04:26,620 --> 00:04:32,140
and in this case it's pretty easy all we

00:04:29,740 --> 00:04:33,520
need to do is take the space and flatten

00:04:32,140 --> 00:04:34,870
it out into basically a big sheet of

00:04:33,520 --> 00:04:37,910
graph paper

00:04:34,870 --> 00:04:41,330
so now we're down to 2d we just need to

00:04:37,910 --> 00:04:43,340
collapse this one more time the way we

00:04:41,330 --> 00:04:45,470
can do that is by taking each row and

00:04:43,340 --> 00:04:48,200
putting that row next to the previous

00:04:45,470 --> 00:04:50,900
row so now we're down to this line of

00:04:48,200 --> 00:04:52,880
pixels and we can put this in memory

00:04:50,900 --> 00:04:56,120
because memory is basically just the

00:04:52,880 --> 00:04:57,890
line of boxes so this means that we've

00:04:56,120 --> 00:04:59,870
gotten it down to a one dimensional

00:04:57,890 --> 00:05:01,880
representation we still have all of the

00:04:59,870 --> 00:05:03,770
data that we had in the two or the three

00:05:01,880 --> 00:05:05,870
year the four dimensional representation

00:05:03,770 --> 00:05:07,400
of this space is just being represented

00:05:05,870 --> 00:05:11,960
in a different way it's being

00:05:07,400 --> 00:05:14,390
represented as a line the reason that

00:05:11,960 --> 00:05:16,520
this is a good mental model for how web

00:05:14,390 --> 00:05:18,620
assembly and JavaScript work together is

00:05:16,520 --> 00:05:20,570
because one of the main ways to

00:05:18,620 --> 00:05:22,880
communicate between web assembly and

00:05:20,570 --> 00:05:25,310
JavaScript at the moment is through

00:05:22,880 --> 00:05:27,230
something called linear memory it's

00:05:25,310 --> 00:05:30,410
basically a line of memory that you use

00:05:27,230 --> 00:05:32,240
to represent things the web assembly

00:05:30,410 --> 00:05:34,550
module and the JavaScript that's running

00:05:32,240 --> 00:05:36,680
that module both have access to this

00:05:34,550 --> 00:05:39,590
object through a JavaScript object

00:05:36,680 --> 00:05:41,090
called an array buffer and this is just

00:05:39,590 --> 00:05:44,330
an array of bytes and bytes are just

00:05:41,090 --> 00:05:46,720
numbers so to make this animation happen

00:05:44,330 --> 00:05:50,150
JavaScript tells the web assembly module

00:05:46,720 --> 00:05:52,250
okay fill in the animation now and it

00:05:50,150 --> 00:05:56,150
does this by calling a method or a

00:05:52,250 --> 00:05:57,650
function on the web assembly module web

00:05:56,150 --> 00:05:59,630
assembly will go and fill in all of the

00:05:57,650 --> 00:06:02,570
numbers for each pixel in the linear

00:05:59,630 --> 00:06:04,610
memory and then JavaScript code can pull

00:06:02,570 --> 00:06:06,440
those numbers out and serialize them

00:06:04,610 --> 00:06:10,490
into something that can be sent to the

00:06:06,440 --> 00:06:13,190
space let's look more closely at the

00:06:10,490 --> 00:06:15,290
JavaScript side of things let's see how

00:06:13,190 --> 00:06:18,380
it pulls data out of the memory and uses

00:06:15,290 --> 00:06:19,490
it if you're getting into the

00:06:18,380 --> 00:06:21,440
nitty-gritty of this if you're doing

00:06:19,490 --> 00:06:23,300
things the hard way and not using any

00:06:21,440 --> 00:06:25,190
libraries then you're going to be

00:06:23,300 --> 00:06:28,130
working directly with this linear memory

00:06:25,190 --> 00:06:32,030
and this linear memory is just one big

00:06:28,130 --> 00:06:33,860
line of ones and zeroes when you want to

00:06:32,030 --> 00:06:35,510
create meaning from this line of ones

00:06:33,860 --> 00:06:38,810
and zeroes you have to figure out how to

00:06:35,510 --> 00:06:41,600
split them up to do this you create a

00:06:38,810 --> 00:06:44,060
typed array view on the array buffer and

00:06:41,600 --> 00:06:45,830
basically this just tells JavaScript how

00:06:44,060 --> 00:06:48,360
to break up the bits in this array

00:06:45,830 --> 00:06:50,340
buffer it's basically like drawing boxes

00:06:48,360 --> 00:06:53,340
around the biz to say which bits belong

00:06:50,340 --> 00:06:56,159
to which number for example if you are

00:06:53,340 --> 00:06:58,469
using hexadecimal values then your

00:06:56,159 --> 00:07:00,539
numbers would be 42 bits wide so you

00:06:58,469 --> 00:07:03,449
need a box that could fit at least 40

00:07:00,539 --> 00:07:04,830
sorry if you're using hexadecimal values

00:07:03,449 --> 00:07:06,719
than your numbers where you 24 bits wide

00:07:04,830 --> 00:07:09,810
so you need a box that can fit at least

00:07:06,719 --> 00:07:13,919
24 bits and each box would contain a

00:07:09,810 --> 00:07:17,370
pixel the smallest box that fits those

00:07:13,919 --> 00:07:20,099
24 bits is 32 bits wide so we would

00:07:17,370 --> 00:07:23,509
create au inch 32 view on the buffer and

00:07:20,099 --> 00:07:25,620
that would wrap the bits up in boxes in

00:07:23,509 --> 00:07:27,389
this case we'd have to add a little

00:07:25,620 --> 00:07:28,979
padding to fill it out I'm not showing

00:07:27,389 --> 00:07:34,400
that but there would be some extra zeros

00:07:28,979 --> 00:07:37,500
in here in contrast if we use RGB values

00:07:34,400 --> 00:07:39,990
the boxes would only be 8 bits wide and

00:07:37,500 --> 00:07:44,460
we would take every three boxes and use

00:07:39,990 --> 00:07:45,930
those as our our G and B values then you

00:07:44,460 --> 00:07:47,900
would iterate over the boxes and pull

00:07:45,930 --> 00:07:51,500
out the numbers and move the data around

00:07:47,900 --> 00:07:54,270
insist more sensible data structures for

00:07:51,500 --> 00:07:57,599
a project like this that's not too bad

00:07:54,270 --> 00:07:59,940
because because colors map very well to

00:07:57,599 --> 00:08:01,589
numbers and we don't have very complex

00:07:59,940 --> 00:08:04,139
data structures here we just have the

00:08:01,589 --> 00:08:05,969
our G and the B but when you start

00:08:04,139 --> 00:08:08,789
getting more complex data structures

00:08:05,969 --> 00:08:13,080
having to deal with memory this directly

00:08:08,789 --> 00:08:15,060
can be a big pain the reason that you

00:08:13,080 --> 00:08:16,830
have to deal with memory so directly

00:08:15,060 --> 00:08:18,419
with webassembly right now the reason

00:08:16,830 --> 00:08:20,370
that you can't just pass an object from

00:08:18,419 --> 00:08:22,139
JavaScript into web assembly and have

00:08:20,370 --> 00:08:24,360
web assembly changed properties and

00:08:22,139 --> 00:08:26,219
values on it and then give that object

00:08:24,360 --> 00:08:29,129
back is because webassembly doesn't yet

00:08:26,219 --> 00:08:32,190
have direct access to JavaScript objects

00:08:29,129 --> 00:08:33,839
or the Dom that is in the works the web

00:08:32,190 --> 00:08:37,140
assembly community group is working on

00:08:33,839 --> 00:08:38,430
specifying that but just because that

00:08:37,140 --> 00:08:39,899
isn't here yet that doesn't mean that

00:08:38,430 --> 00:08:41,550
you have to wait before you can start

00:08:39,899 --> 00:08:44,430
working with objects you don't have to

00:08:41,550 --> 00:08:46,680
wait you can pass objects into your web

00:08:44,430 --> 00:08:50,010
assembly and get objects back from your

00:08:46,680 --> 00:08:52,579
JavaScript to do this you can use a

00:08:50,010 --> 00:08:55,930
library that gives you this nicer API

00:08:52,579 --> 00:08:58,180
this library is called wasm bind gen

00:08:55,930 --> 00:09:00,730
it wraps the web assembly module in a

00:08:58,180 --> 00:09:02,890
JavaScript wrapper and this wrapper

00:09:00,730 --> 00:09:04,720
knows how to take complex JavaScript

00:09:02,890 --> 00:09:06,790
objects and write them into linear

00:09:04,720 --> 00:09:08,890
memory and when the web assembly

00:09:06,790 --> 00:09:10,660
function returns a value the j/s wrapper

00:09:08,890 --> 00:09:13,839
can take data from linear memory and

00:09:10,660 --> 00:09:15,760
turn it back into a json jacked to do

00:09:13,839 --> 00:09:17,410
this it looks at function signatures in

00:09:15,760 --> 00:09:19,420
your rust code and figures out exactly

00:09:17,410 --> 00:09:20,490
what kind of javascript wrapper is

00:09:19,420 --> 00:09:22,660
needed

00:09:20,490 --> 00:09:25,149
this works for built-in types like

00:09:22,660 --> 00:09:27,550
strings and it also works for types that

00:09:25,149 --> 00:09:29,740
you define in your code wise and bind

00:09:27,550 --> 00:09:33,420
gen will take the RUS trucks and turn

00:09:29,740 --> 00:09:36,459
them into JavaScript object classes

00:09:33,420 --> 00:09:38,649
right now this tool is specific to rust

00:09:36,459 --> 00:09:40,660
but with the way that it's architected

00:09:38,649 --> 00:09:42,490
we can add support for this kind of

00:09:40,660 --> 00:09:46,470
higher-level interaction for other

00:09:42,490 --> 00:09:48,520
languages languages like C and C++

00:09:46,470 --> 00:09:50,320
there's a session that will cover the

00:09:48,520 --> 00:09:52,420
basics of rust and some of these other

00:09:50,320 --> 00:09:54,610
topics likewise some bind gen and woz

00:09:52,420 --> 00:09:57,430
impac which you can use to package up

00:09:54,610 --> 00:09:59,709
your wasm modules to go up on NPM and

00:09:57,430 --> 00:10:02,740
this session will be tomorrow at the

00:09:59,709 --> 00:10:07,480
Mozilla booth starting at 13:30 at 1:30

00:10:02,740 --> 00:10:10,029
p.m. so hopefully now you can see how to

00:10:07,480 --> 00:10:12,100
take control of this space and how you

00:10:10,029 --> 00:10:15,820
can say hello to the world and hello to

00:10:12,100 --> 00:10:17,230
the world of web assembly before I wrap

00:10:15,820 --> 00:10:18,990
this up I do want to give credit to the

00:10:17,230 --> 00:10:22,240
people that made this project possible

00:10:18,990 --> 00:10:23,650
the seeds for the idea of this product

00:10:22,240 --> 00:10:25,720
it came from a dance party that I

00:10:23,650 --> 00:10:27,850
attended in Pittsburgh that had a space

00:10:25,720 --> 00:10:30,160
like this but the project was only

00:10:27,850 --> 00:10:32,350
possible because of the amazing group of

00:10:30,160 --> 00:10:32,860
people that gathered to make it a

00:10:32,350 --> 00:10:35,080
reality

00:10:32,860 --> 00:10:37,900
so I want to say thank you to Sandra /

00:10:35,080 --> 00:10:40,450
sing I came to her with a vision and she

00:10:37,900 --> 00:10:41,860
made that vision real I want to also

00:10:40,450 --> 00:10:44,170
want to say thank you to Dan Brown and

00:10:41,860 --> 00:10:45,579
Matt's a Pluto who took that vision and

00:10:44,170 --> 00:10:47,910
turned it into something even more

00:10:45,579 --> 00:10:50,110
exciting and engaging than I imagined

00:10:47,910 --> 00:10:51,279
until Schneider Wright who helped me

00:10:50,110 --> 00:10:52,709
figure out how to bring all of these

00:10:51,279 --> 00:10:55,390
different pieces together

00:10:52,709 --> 00:10:56,500
Josh Mira naxi who created the site and

00:10:55,390 --> 00:10:59,380
made taking control of the space

00:10:56,500 --> 00:11:01,510
possible dan Callahan who you also saw

00:10:59,380 --> 00:11:03,190
in that video he jumped in with his

00:11:01,510 --> 00:11:04,950
debugging and development wizardry to

00:11:03,190 --> 00:11:07,390
ensure all of the pieces work together

00:11:04,950 --> 00:11:09,100
Trevor F Smith who created the virtual

00:11:07,390 --> 00:11:10,870
space so that everybody can experience

00:11:09,100 --> 00:11:14,500
this even if they aren't here at the

00:11:10,870 --> 00:11:15,970
event also Michel Bonita and URI delenn

00:11:14,500 --> 00:11:17,380
Dec whose work on webassembly studio

00:11:15,970 --> 00:11:19,840
makes it possible to share webassembly

00:11:17,380 --> 00:11:21,910
with the whole new audience row stations

00:11:19,840 --> 00:11:24,190
Alex Kryten Ashley Williams Sarah Myers

00:11:21,910 --> 00:11:26,620
Jana Jana our creditor fluorine gilt

00:11:24,190 --> 00:11:28,870
receive clap Nick Fabian and flock e who

00:11:26,620 --> 00:11:30,220
worked on webassembly studios rust

00:11:28,870 --> 00:11:32,920
integration helped aspiring Russ

00:11:30,220 --> 00:11:34,300
developers level up their skills the J's

00:11:32,920 --> 00:11:35,500
confit you team for all of their hard

00:11:34,300 --> 00:11:37,780
work in making sure that this

00:11:35,500 --> 00:11:39,220
installation get off the ground and of

00:11:37,780 --> 00:11:41,350
course umbral the artist whose work

00:11:39,220 --> 00:11:42,520
inspired this project and she's

00:11:41,350 --> 00:11:45,880
hard-working sure that we could share it

00:11:42,520 --> 00:11:49,429
with you thank you and Alice party

00:11:45,880 --> 00:11:49,429

YouTube URL: https://www.youtube.com/watch?v=1meg-Dl_Urw


