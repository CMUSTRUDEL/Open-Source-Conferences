Title: Kablooie: A History of Errors & a Future of Solutions - Sarah Groff Hennigh Palermo - JSConf EU 2018
Publication date: 2018-07-10
Playlist: JSConf EU 2018
Description: 
	Errors and debugging are the bane of a programmer’s life — and the source of many jokes, Twitter rants, and midnight breakdowns. But how often do we consider error themselves: not as obstacles but as entities?

This talk will cover a short history of errors in computer science and how errors work in Javascript itself, before looking at different approaches to reducing errors — maybe even by embracing them.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,570 --> 00:00:12,440
I'm Sarah Groff Hennigh-Palermo.

00:00:12,440 --> 00:00:19,121
On Twitter, I'm super SGP, so, if you like the opinions you hear today, there are way

00:00:19,121 --> 00:00:21,960
more of them on the internet.

00:00:21,960 --> 00:00:27,480
So, up until very recently, I was an engineer at Kickstarter.

00:00:27,480 --> 00:00:32,400
I left about a month ago to have a career crisis and find myself, but that's what I

00:00:32,400 --> 00:00:34,620
used to do.

00:00:34,620 --> 00:00:37,850
When I'm not coding for money, I'm actually coding for art.

00:00:37,850 --> 00:00:40,680
I do live code as well.

00:00:40,680 --> 00:00:48,670
Those SVGs I make with clojure scripts, hand made artisanal SVGs in Brooklyn.

00:00:48,670 --> 00:00:53,320
I'm here to talk about errors.

00:00:53,320 --> 00:00:58,410
I have a lot to say, I realised by the way, when crying writing this talk, that it's four

00:00:58,410 --> 00:00:59,410
talks.

00:00:59,410 --> 00:01:05,040
Rather than make it shorter, I decided that I was going to talk really fast, so, if some

00:01:05,040 --> 00:01:09,420
of the slides go by fast, you don't read the code, don't worry, it's going to be on the

00:01:09,420 --> 00:01:10,420
internet.

00:01:10,420 --> 00:01:13,790
There's lots of links with, like, details so you can see it all later.

00:01:13,790 --> 00:01:15,820
So, let's get started.

00:01:15,820 --> 00:01:22,610
Lately, I've become super interested in the way that we approach errors, as programmers,

00:01:22,610 --> 00:01:27,530
as a culture, and I wasn't going to start off telling you why I got interested because

00:01:27,530 --> 00:01:35,370
I felt it was incendiary, but I decided to go ahead and tell you now and hope you keep

00:01:35,370 --> 00:01:37,380
on listening if you think I'm insane.

00:01:37,380 --> 00:01:42,579
I'm interested in errors because I really hate types.

00:01:42,579 --> 00:01:48,369
I know that that is not, like, a really popular opinion here in 2018, right?

00:01:48,369 --> 00:01:54,579
This idea that I, as someone who only knows some programming thinks that I know way better

00:01:54,579 --> 00:01:59,090
than all these computer sifts who have done research and told us that types are like THE

00:01:59,090 --> 00:02:02,149
way to do it right.

00:02:02,149 --> 00:02:06,190
But I know that type errors are real, and so I was like, "Well, if I wasn't going to

00:02:06,190 --> 00:02:09,900
be into these, how would I have a better way to approach errors?"

00:02:09,900 --> 00:02:12,090
I decided to do some research.

00:02:12,090 --> 00:02:15,010
Luckily, errors are really interesting.

00:02:15,010 --> 00:02:20,290
On the one hand, they're this cursed object that explodes rockets, overdoses people on

00:02:20,290 --> 00:02:24,190
radiation, and makes webforms refuse to submit when you need them the most.

00:02:24,190 --> 00:02:29,579
As such, they're a danger around which every right-thinking person is furiously erecting

00:02:29,579 --> 00:02:31,220
fences, right?

00:02:31,220 --> 00:02:36,799
But, on the other hand, errors are kind of hilarious, so, consider the case of Nuclear

00:02:36,799 --> 00:02:38,440
Ghandi.

00:02:38,440 --> 00:02:43,000
In the very first Civilisation game, for some reason, towards the end of the game, Ghandi

00:02:43,000 --> 00:02:47,470
would suddenly become incredibly aggressive and start threatening to nuke everyone which,

00:02:47,470 --> 00:02:51,550
with , if you know Ghandi, it's kind of unlike him, right?

00:02:51,550 --> 00:02:56,160
It turned out that aggressiveness was unrepresented with an unsigned byte when Ghandi was set

00:02:56,160 --> 00:03:04,590
to 1 and took an action like democracy, it flipped around to to 255 and gave Ghandi Max

00:03:04,590 --> 00:03:05,590
aggression.

00:03:05,590 --> 00:03:10,860
Players like it so much that it is still used even though the mechanism has been discovered

00:03:10,860 --> 00:03:12,310
and understood.

00:03:12,310 --> 00:03:16,199
Errors can make us inventive.

00:03:16,199 --> 00:03:22,800
In Win Commander, the game completed an out-of-memory error, and the programmers could not figure

00:03:22,800 --> 00:03:24,799
out why it was showing this error.

00:03:24,799 --> 00:03:26,690
Sometimes, you've got to shift.

00:03:26,690 --> 00:03:31,790
So they changed the error message to a message of congratulations and went on with their

00:03:31,790 --> 00:03:32,790
day.

00:03:32,790 --> 00:03:35,500
Errors can also be delightful.

00:03:35,500 --> 00:03:40,660
So, when I was working on my life code framework doing some animations, I forgot that rotations

00:03:40,660 --> 00:03:43,380
needed to be stable from frame to frame.

00:03:43,380 --> 00:04:06,340
I accidentally made a circle friend, because animation - [sound breaking up].

00:04:06,340 --> 00:04:21,320
Sometimes, we feel this way about CSS.

00:04:21,320 --> 00:04:32,060
You know, we [sound breaking up].

00:04:32,060 --> 00:04:34,710
Errors can be terrible and amazing.

00:04:34,710 --> 00:04:39,500
Maybe if they're terrible, we should just cool it and not worry about what we are missing

00:04:39,500 --> 00:04:41,400
out on.

00:04:41,400 --> 00:04:48,710
Something I noticed is that examples of interesting errors come from things like games and art,

00:04:48,710 --> 00:04:52,670
and bad errors come from things like health care, and rockets.

00:04:52,670 --> 00:04:57,760
But fortunately, as web programmers, we're much closer to the former, even though, as

00:04:57,760 --> 00:05:02,460
a culture, we tend to act as though we are the latter, and we really think beyond how

00:05:02,460 --> 00:05:03,620
to fix errors.

00:05:03,620 --> 00:05:09,910
It is not really a big surprise, actually, so, culturally and philosophically, we are

00:05:09,910 --> 00:05:15,580
trained to deny and avoid error in pretty much every aspect of our lives.

00:05:15,580 --> 00:05:20,780
As in the book being Wrong - which, with , by the way, is a book, when people see you reading

00:05:20,780 --> 00:05:27,479
it, they want to talk to you - this view is common and common with heavy-hitters in history

00:05:27,479 --> 00:05:34,880
- Plato - and it comes from the idea that errors are a product of a gap between the

00:05:34,880 --> 00:05:39,610
true world and our flawed human minds as we attempt to interpret it.

00:05:39,610 --> 00:05:43,540
This is the view that effectives us a yearning for correctness.

00:05:43,540 --> 00:05:51,230
However, there is also an optimistic view of erring, and in this modern view, originating

00:05:51,230 --> 00:05:57,820
in the Enlightenment, the idea that this gap is a perception and can be faced and overcome

00:05:57,820 --> 00:06:00,000
as we move towards truth.

00:06:00,000 --> 00:06:05,300
In fact, seeing the world perfectly as it is might not even be the right goal.

00:06:05,300 --> 00:06:10,780
As Schulz writes, seeing the world as it's not is the definition of erring but also the

00:06:10,780 --> 00:06:14,340
essence of invention, imagination, and hope.

00:06:14,340 --> 00:06:19,330
This gap may also just be the downside to our massively great inductive reasoning upsides.

00:06:19,330 --> 00:06:24,940
All the short cuts we take that make humans such good planters, inventors, like intuitive

00:06:24,940 --> 00:06:30,280
little plants, right, means we may misperceive.

00:06:30,280 --> 00:06:32,470
We can risk it up.

00:06:32,470 --> 00:06:37,030
I'm going to talk a little bit more today about what we mean by errors, how we deal

00:06:37,030 --> 00:06:42,390
in JavaScript now, situate that historically, and then go ahead and see what other options

00:06:42,390 --> 00:06:45,319
might be available to us in the future.

00:06:45,319 --> 00:06:46,510
What do we mean by errors?

00:06:46,510 --> 00:06:50,820
There are a lot of different schemes that people have come up to answer this question.

00:06:50,820 --> 00:06:56,520
A lot of the times, they split along the lines of whether it's an avoidable programmer error,

00:06:56,520 --> 00:07:01,960
or an unavoidable universe fairly - like we see here from the first edition of Eloquent

00:07:01,960 --> 00:07:02,960
JavaScript.

00:07:02,960 --> 00:07:05,450
I don't think that's the most helpful way to look at it.

00:07:05,450 --> 00:07:09,870
If errors are inevitable to us as humans, then that's just as much a universe failure

00:07:09,870 --> 00:07:11,400
as anything else.

00:07:11,400 --> 00:07:17,280
The framework I like comes from Slips, Mistakes, and Failures by Tomas Petricek.

00:07:17,280 --> 00:07:19,800
This is by the magnitude.

00:07:19,800 --> 00:07:24,260
Slips are where your idea was right and you try to encode it the right way but you made

00:07:24,260 --> 00:07:26,280
a sin tax error or typo.

00:07:26,280 --> 00:07:31,360
I feel these as errors we don't ship because they break right away, the linter catches

00:07:31,360 --> 00:07:32,950
them.

00:07:32,950 --> 00:07:37,700
The other end of the generality spectrum, we have mistakes where you made a error thinking

00:07:37,700 --> 00:07:39,990
through the specification.

00:07:39,990 --> 00:07:40,990
That's really fuzzy.

00:07:40,990 --> 00:07:43,360
You like - like what does the specification even mean?

00:07:43,360 --> 00:07:46,980
I think of a mistake has building the wrong thing.

00:07:46,980 --> 00:07:50,900
In the middle, we have failures where you have the right idea but encoded some part

00:07:50,900 --> 00:07:51,900
of it poorly.

00:07:51,900 --> 00:07:56,020
This is what we are most concerned with day to day.

00:07:56,020 --> 00:07:57,950
How do we deal with these failure-type errors?

00:07:57,950 --> 00:07:58,950
JavaScript?

00:07:58,950 --> 00:08:04,260
JavaScript using a type of exception handling that is about half the original system used

00:08:04,260 --> 00:08:06,600
in PL1 in 1968.

00:08:06,600 --> 00:08:13,520
There is PL1 up there in the language family tree descending from Fortran and Algol.

00:08:13,520 --> 00:08:19,900
In JavaScript, exception handling arrived in ES3 and worked as it does today - we have

00:08:19,900 --> 00:08:27,169
the error prototype to construct errors, we have the throw key word to propagate them,

00:08:27,169 --> 00:08:32,400
we have try, catch, and finally, to create a new lexical environment to handle exceptions,

00:08:32,400 --> 00:08:39,889
and then to clean up after their mess that wasn't be fixed by setting the lexical environment.

00:08:39,889 --> 00:08:44,039
One thing that surprised me in my research is there used to be a non-standard multi-catch

00:08:44,039 --> 00:08:51,290
syntax, so instead of having to put a conditional catch, you can do catch, catch, catch, catch,

00:08:51,290 --> 00:08:56,620
but that's not been there since Firefox 59 so that boat kind of sailed.

00:08:56,620 --> 00:09:01,370
In addition to user-defined errors, there are six built-in error types - only five of

00:09:01,370 --> 00:09:03,000
them are still thrown.

00:09:03,000 --> 00:09:06,260
EvalError exists for backwards compatibility.

00:09:06,260 --> 00:09:17,260
The biggest change arrived with early errors, strict mode, to make sure there is no code

00:09:17,260 --> 00:09:19,320
in memory that's not going to execute.

00:09:19,320 --> 00:09:23,640
And, to disallow code that would otherwise be allowed by the grammar.

00:09:23,640 --> 00:09:27,880
These are reported when the programme is evaluated, not when it's run, so it's not part of our

00:09:27,880 --> 00:09:29,560
exception-handling scheme.

00:09:29,560 --> 00:09:34,270
Inside the exception-handling system, things are pretty much as they are in most other

00:09:34,270 --> 00:09:38,670
languages, but in this case, common is not a synonym for opt hall.

00:09:38,670 --> 00:09:44,080
When the invoking function is able to use catch to respond to an error, the stack traces

00:09:44,080 --> 00:09:50,250
available but the evoking function cannot detect code anywhere down the stack itself.

00:09:50,250 --> 00:09:52,210
Consider this example.

00:09:52,210 --> 00:09:56,650
There is this parse entry function which throws an exception when it can't parse a file, and

00:09:56,650 --> 00:10:02,520
it's getting called four functions in two lines deep, maybe it's inside a library, and

00:10:02,520 --> 00:10:04,760
this able ise all files is in your code.

00:10:04,760 --> 00:10:10,981
When it fails in throws, we might as a programmer have an idea of a good default we can use

00:10:10,981 --> 00:10:15,950
to continue so the parsing can keep going and we don't have to unwind the loops.

00:10:15,950 --> 00:10:20,850
If only we had a default, we would rewrite the function to account for the fact that

00:10:20,850 --> 00:10:25,480
you can return a default value, but I think you can see how making this the responsibility

00:10:25,480 --> 00:10:30,740
of this inner function both breaks encapsulation, and can quickly get out of hand if you had

00:10:30,740 --> 00:10:32,710
ideas for other sorts of interventions.

00:10:32,710 --> 00:10:39,580
So we might be able to do something, but it doesn't matter, because it is not possible

00:10:39,580 --> 00:10:45,490
without preprocessing the data or rerunning the entire function.

00:10:45,490 --> 00:10:49,630
Other changes to exception handling have come obviously in JavaScript with promises and

00:10:49,630 --> 00:10:51,120
asynch await.

00:10:51,120 --> 00:10:53,120
These haven't changed the basic concept, though.

00:10:53,120 --> 00:10:54,260
They've extended it.

00:10:54,260 --> 00:10:58,880
They've made for interesting corner cases and variations.

00:10:58,880 --> 00:11:04,110
For instance, if you return from a nested finally, you're never going to call your outside

00:11:04,110 --> 00:11:08,620
handler, so never print banana, which is very tragic.

00:11:08,620 --> 00:11:11,990
Errors may also remain entirely uncaught by a chained catch.

00:11:11,990 --> 00:11:14,350
I didn't realise this until I was messing around.

00:11:14,350 --> 00:11:18,860
That first promise isn't going to be caught by the catch.

00:11:18,860 --> 00:11:23,570
There's a proposal for promise.try that would address this, but currently, that's a big

00:11:23,570 --> 00:11:25,490
sticking point.

00:11:25,490 --> 00:11:28,890
Then with the sink await, the variations in pitfalls go further.

00:11:28,890 --> 00:11:38,690
My friend Frances had a fun bug where using in function, log stats was being thrown twice.

00:11:38,690 --> 00:11:44,230
It turned out an external function used by log stats was throwing, and being caught surprised

00:11:44,230 --> 00:11:50,160
him because he was thinking of that for the await, so he came up with some solutions.

00:11:50,160 --> 00:11:54,770
You could just only wrap the await in a try block, which is what a lot of people have

00:11:54,770 --> 00:11:56,110
done.

00:11:56,110 --> 00:12:00,899
If you have a lot of async, it leads to a ton of trying, obviously.

00:12:00,899 --> 00:12:07,029
You can use the goify pattern where where you create a Proms that returns an error,

00:12:07,029 --> 00:12:12,690
so you're handling errors on a per-promise basis.

00:12:12,690 --> 00:12:17,430
Or you could change the catch, but as we discussed before, this won't catch and it the promise

00:12:17,430 --> 00:12:18,430
throws.

00:12:18,430 --> 00:12:21,410
There are a lot of variations with implicit pattern trade-offs.

00:12:21,410 --> 00:12:24,540
At the base, it is the same try-catch Americanism.

00:12:24,540 --> 00:12:31,770
It is worth noting before I go on, that the DOM does provide error event listeners.

00:12:31,770 --> 00:12:36,160
I've never seen them used in production, and I didn't even know about them, so if anyone

00:12:36,160 --> 00:12:39,650
is actually using this, please come and talk to me because I'm really curious how you're

00:12:39,650 --> 00:12:41,170
doing it.

00:12:41,170 --> 00:12:46,140
Basically, this is JavaScript's fairly unexceptional exception system.

00:12:46,140 --> 00:12:50,580
It has some funny little corners, and, on the one hand, it is super unremarkable, yet

00:12:50,580 --> 00:12:56,750
it seems strange that such a remarkable language built to be so dynamic for all the good and

00:12:56,750 --> 00:13:03,270
ill that that implies and bound strongly to its earlier choices of its commitment to the

00:13:03,270 --> 00:13:07,450
to break the web, has an anime ic way of dealing with errors.

00:13:07,450 --> 00:13:12,899
It is this lack of balance that I suspect sometimes leads to JavaScript's reputation

00:13:12,899 --> 00:13:18,250
as a problem child, or a foot gun, and, lately, the answer to that has been to dial down the

00:13:18,250 --> 00:13:21,900
dynamism.

00:13:21,900 --> 00:13:26,010
As I've mentioned before, I'm not super into that solution.

00:13:26,010 --> 00:13:28,570
I've written and spoken about this before.

00:13:28,570 --> 00:13:31,250
If you're interested later, DM me.

00:13:31,250 --> 00:13:37,650
But the short version of the argument is: the choice s are poor limit ed effort into

00:13:37,650 --> 00:13:43,250
a static type system in JavaScript both in tooling and in day-to-day product engineering

00:13:43,250 --> 00:13:45,060
is a mistake.

00:13:45,060 --> 00:13:48,530
Type-checking only catches type errors and there will always be points of failure in

00:13:48,530 --> 00:13:54,100
an application that deals with networking, user input and the DOM.

00:13:54,100 --> 00:13:58,420
One of my broadest type-based achievements is I've actually thrown a runtime error in

00:13:58,420 --> 00:14:02,529
Elm which people say is impossible but it turns out when you're appending strings to

00:14:02,529 --> 00:14:05,750
the DOM, no-one can really save you!

00:14:05,750 --> 00:14:12,440
Also, though, maybe being saved isn't so great.

00:14:12,440 --> 00:14:17,310
Maybe being so correct forces us to correct huge unwieldy systems, and, being small and

00:14:17,310 --> 00:14:21,710
composable makes your programmes easy to understand, even if slightly more error-prone.

00:14:21,710 --> 00:14:27,820
Making working with computers in a tight iterative loop is just more pleasurable, and maybe looking

00:14:27,820 --> 00:14:34,089
at computers as conversation partners instead of half cop, half servant, is better for us

00:14:34,089 --> 00:14:36,440
as human beings.

00:14:36,440 --> 00:14:39,870
These are all good reasons to give error-handling a second look.

00:14:39,870 --> 00:14:45,840
There is also I think a political and aesthetic reason to move away from solution through

00:14:45,840 --> 00:14:46,930
specification.

00:14:46,930 --> 00:14:53,690
The idea that the best way to be safe is to make being unsafe illegal has deep roots in

00:14:53,690 --> 00:14:57,240
computer science's positivist history.

00:14:57,240 --> 00:15:00,500
This approach blocks out the strange, the hybrid, the human.

00:15:00,500 --> 00:15:04,080
It prevents us from discovering weird mistakes like shaky shapes.

00:15:04,080 --> 00:15:09,600
Politically, it harms us by insisting only strong categories are valid and denying liminal

00:15:09,600 --> 00:15:12,910
spaces.

00:15:12,910 --> 00:15:14,510
Consider the US census.

00:15:14,510 --> 00:15:18,670
Up until I was 20, you were only allowed to pick one race.

00:15:18,670 --> 00:15:20,040
Because that's what the system could handle.

00:15:20,040 --> 00:15:21,040
But that's not true.

00:15:21,040 --> 00:15:23,240
I am not one race, like that's not the answer.

00:15:23,240 --> 00:15:29,000
And it took more work and the acceptance of loser categories for the system even to reflect

00:15:29,000 --> 00:15:30,920
some portion of that truth.

00:15:30,920 --> 00:15:32,950
The same can be said for gender identity, right?

00:15:32,950 --> 00:15:35,650
There are not two answers or not four.

00:15:35,650 --> 00:15:39,190
The idea that we should restrict ourselves to communicating in a way a machine should

00:15:39,190 --> 00:15:45,209
understand instead of working them to be partners seems to me to be the path to a barren future.

00:15:45,209 --> 00:15:52,790
I'm going to talk about errors in history and see where we really came from.

00:15:52,790 --> 00:15:57,230
If we arrange general error-handling methods from the dramatic to the subtle, and this

00:15:57,230 --> 00:16:02,089
list comes from Chris Hauzer, exception-handling comings right in the middle.

00:16:02,089 --> 00:16:06,420
At the top, the most dramatic option is just to crash.

00:16:06,420 --> 00:16:09,100
This is obviously the original classic direct from Fortran.

00:16:09,100 --> 00:16:14,209
And it makes sense when a computer is a glorified calculator and you have a knowledgeable operator

00:16:14,209 --> 00:16:16,190
sitting right there, right?

00:16:16,190 --> 00:16:20,340
Why keep doing calculations if they're going to be wrong, crash, and fix it.

00:16:20,340 --> 00:16:25,110
In modern times, this can be anywhere from inconvenient to really terrible.

00:16:25,110 --> 00:16:30,459
So, for instance been recently, the New York City subway replaced signals, including a

00:16:30,459 --> 00:16:32,660
computerised signal.

00:16:32,660 --> 00:16:37,180
It turned out the switch had a bug and the only way to work work on it or fix it was

00:16:37,180 --> 00:16:42,750
to reboot the subway, which took a really long time, and was incredibly inconvenient.

00:16:42,750 --> 00:16:47,020
In this case, just crashing was probably not the best idea.

00:16:47,020 --> 00:16:51,920
Between just crashing and doing an exception is the idea to enter a debugger, which you

00:16:51,920 --> 00:16:58,800
might be familiar with very much in a Rails environment, you can enter the debugger, and

00:16:58,800 --> 00:17:03,589
the switch engineers would maybe have appreciated this approach to rebooting the train.

00:17:03,589 --> 00:17:07,280
Less dramatically, you can return a special value.

00:17:07,280 --> 00:17:12,649
This approach is pretty uncommon in modern languages, except for some utility functions.

00:17:12,649 --> 00:17:18,569
Find index will return negotiate perspective one and callback where errors - this approach

00:17:18,569 --> 00:17:24,309
suffers from the semi-predicate problem which is to say that you have to check for it explicitly.

00:17:24,309 --> 00:17:26,899
That's its biggest downfall.

00:17:26,899 --> 00:17:30,830
Even more deprecated as an approach, and one of the first solutions after just crashing,

00:17:30,830 --> 00:17:32,840
is to set an error flag.

00:17:32,840 --> 00:17:37,090
This was common in things like BASIC.

00:17:37,090 --> 00:17:41,549
And I think you can see how setting an error flag, returning a value, would lead to throwing

00:17:41,549 --> 00:17:46,970
an exception, even further outside to help the system deal with it.

00:17:46,970 --> 00:17:53,409
Finally, we have the least dramatic option which is to recover and keep going.

00:17:53,409 --> 00:17:54,749
Why hide errors?

00:17:54,749 --> 00:18:02,130
Only - context and possibilities for recovery really matter here.

00:18:02,130 --> 00:18:04,440
This is what HTML does, for instance, right?

00:18:04,440 --> 00:18:08,960
Maybe you didn't close a tag but you can still read the text.

00:18:08,960 --> 00:18:12,429
Even though it can seem impractical, at times, it is the most practical.

00:18:12,429 --> 00:18:19,570
I learned from Wikipedia, when I was working on this, that the default IEE754 floating-point

00:18:19,570 --> 00:18:24,970
exception-handling behaviour is resume computation following the substitute of a default value

00:18:24,970 --> 00:18:26,950
if you have an arithmetic error.

00:18:26,950 --> 00:18:33,389
This would have prevented the 1996 explosion which was caused in part by the fact that

00:18:33,389 --> 00:18:40,419
Ada just aborted computation on an arithmetic error like an integer overflow.

00:18:40,419 --> 00:18:45,910
Finally, we can add a few other elements to the list of ways to we have historically dealt

00:18:45,910 --> 00:18:47,529
with errors.

00:18:47,529 --> 00:18:50,779
You can send a signal which is a little bit different from a return value, because anyone

00:18:50,779 --> 00:18:55,639
can listen for it, but you're not throwing it.

00:18:55,639 --> 00:19:01,700
And there are option types and maybes which could possibly fall under Keep Going.

00:19:01,700 --> 00:19:03,970
Some approaches can be seen as a combination.

00:19:03,970 --> 00:19:07,909
Erlang is signal plus crash plus recover.

00:19:07,909 --> 00:19:09,639
That's sort of where we are.

00:19:09,639 --> 00:19:11,309
Let's look at where we could go.

00:19:11,309 --> 00:19:12,659
This is the last section.

00:19:12,659 --> 00:19:16,489
There are a lot of different routes we could take to expand our approaches to errors and

00:19:16,489 --> 00:19:19,710
adjust our relationships to machines.

00:19:19,710 --> 00:19:23,880
Where I think I want to see computing go in the future, I keep coming back to this tweet

00:19:23,880 --> 00:19:32,090
from Emilia McNamara contrasting traditional programme language goals, correctness, performance,

00:19:32,090 --> 00:19:35,009
to new ones like modifiability and learnability.

00:19:35,009 --> 00:19:42,130
In particular, I think about error-handling method as involve these last two - modifiability,

00:19:42,130 --> 00:19:43,760
and learnability.

00:19:43,760 --> 00:19:50,950
To get there, we might think of things like robust ways of nullability like it is today,

00:19:50,950 --> 00:19:56,149
and that is coming, there's the optional training proposal which I think is in stage one that

00:19:56,149 --> 00:20:01,779
would, by reducing the number of checks for small quotidian errors, free us up to focus

00:20:01,779 --> 00:20:09,019
on exception handling, might pair with expanding ways to work with errors as events and focusing

00:20:09,019 --> 00:20:17,220
on good default arguments, focusing on defaults leads us into a more broad look at robustness

00:20:17,220 --> 00:20:21,879
and in addition to rigour which is to say looking for things that will bend and not

00:20:21,879 --> 00:20:22,879
break.

00:20:22,879 --> 00:20:26,820
That makes recovery more possible and less disruptive.

00:20:26,820 --> 00:20:30,279
This might look like augmenting or rebuilding the current exception system.

00:20:30,279 --> 00:20:34,960
Remember, when I mentioned that JavaScript succession is only half a system compared

00:20:34,960 --> 00:20:36,080
to PL1?

00:20:36,080 --> 00:20:41,279
It's described in the canonical paper from 1971.

00:20:41,279 --> 00:20:45,200
Exception mechanisms are not just needed to deal with errors.

00:20:45,200 --> 00:20:51,330
They're needed in general in a way of interleaving actions belonging to different levels of abstraction.

00:20:51,330 --> 00:20:57,059
They're not necessarily really activated, so this involves moving responsibility up

00:20:57,059 --> 00:21:02,559
the stack but not necessarily unwind ing errors which is to say that context is maintained.

00:21:02,559 --> 00:21:07,369
It proposes a specification for exception that is have three types - escape, signal,

00:21:07,369 --> 00:21:12,840
and notify - which can require termination, be the colour's choice, or forbid termination.

00:21:12,840 --> 00:21:20,220
It is these capabilities hacked off from C++ due to termination back in 1989 that, since

00:21:20,220 --> 00:21:25,109
no-one really used them in Cedar, no-one should have them in their exception-handling ever

00:21:25,109 --> 00:21:26,129
again.

00:21:26,129 --> 00:21:32,269
If we want to leave the past in the past, a focus on robustness can be maintaining good

00:21:32,269 --> 00:21:34,379
state in user interaction.

00:21:34,379 --> 00:21:37,760
For instance, I use Figure Wheel for live code.

00:21:37,760 --> 00:21:43,470
When I make an error, it keeps the last good state going, while telling me that I've created

00:21:43,470 --> 00:21:46,610
an error.

00:21:46,610 --> 00:21:49,740
React's error boundaries also do the same thing.

00:21:49,740 --> 00:21:54,909
If you imagine combining this existence with maintaining good state with the ability to

00:21:54,909 --> 00:22:01,100
access a production Ralph, we could do all sorts of crazy, good I've fixes that wouldn't

00:22:01,100 --> 00:22:02,919
hurt users.

00:22:02,919 --> 00:22:06,779
What would continuous deployment be like if you deployed an error, identified it in.

00:22:06,779 --> 00:22:10,679
Repo made a hot fix in one restartable module?

00:22:10,679 --> 00:22:14,799
That could be an amazing way to go back and forth with your system when you define errors.

00:22:14,799 --> 00:22:20,960
Then, if we got really crazy, we could look at stealing good ideas from even further afield.

00:22:20,960 --> 00:22:22,909
One is recovery blocks.

00:22:22,909 --> 00:22:26,470
This is a pattern where you create an acceptance test.

00:22:26,470 --> 00:22:34,749
You give a list of ways to attempt a successful result, and then, if all of those fail, then,

00:22:34,749 --> 00:22:41,429
you know, then the error is thrown, and the acceptance test usually can access variables

00:22:41,429 --> 00:22:47,289
from before and after the functions are run, so that works for pre- and post-conditions

00:22:47,289 --> 00:22:50,019
or domain and range errors.

00:22:50,019 --> 00:22:56,990
Another option would be an algebraic handlers in things like F, handling errors in a mow

00:22:56,990 --> 00:22:58,759
nomadic style.

00:22:58,759 --> 00:23:03,690
If you're not familiar with camel syntax, this may not make a ton of sense.

00:23:03,690 --> 00:23:11,640
K, which is the continuation, so you can intervene and pick up where the language left off lexically.

00:23:11,640 --> 00:23:16,399
Finally, we could just head for the stratosphere and consider ways to reframe our relationships

00:23:16,399 --> 00:23:17,770
with computers.

00:23:17,770 --> 00:23:23,159
We could make computers a full partner with programme-slicing and better automatic suggestions.

00:23:23,159 --> 00:23:28,600
The Rossette language extends racket to use solvers and synthesise code.

00:23:28,600 --> 00:23:32,539
We could also take the alternate approach, and work to reframe computers from something

00:23:32,539 --> 00:23:37,820
that just works to something that maybe tinkered with and grow and might not be this machine

00:23:37,820 --> 00:23:39,229
for brutal effectiveness.

00:23:39,229 --> 00:23:42,710
Some of these seem really big.

00:23:42,710 --> 00:23:44,229
And really fast, and very undetailed.

00:23:44,229 --> 00:23:49,070
But it's only by wanting more that we are going to get explorations into getting more.

00:23:49,070 --> 00:23:55,769
There is something we can do today: that is to make it culturally acceptable, even encouraged,

00:23:55,769 --> 00:24:01,029
to spend time thinking about ways to fail well instead of not trying to fail altogether.

00:24:01,029 --> 00:24:06,409
And so, in terms of encouragement, I have one last quote for you again from being wrong.

00:24:06,409 --> 00:24:11,830
"We want to turn away from error because it reminds us of our existential despair, that

00:24:11,830 --> 00:24:20,849
we are separate from truth, and from one another, but also the only true way to engage and to

00:24:20,849 --> 00:24:25,369
create, and imagine, is to risk error."

00:24:25,369 --> 00:24:31,950
So, let's not cut ourselves off at the knees by underestimating ourselves and our machines.

00:24:31,950 --> 00:24:34,330
Maybe let's not be afraid.

00:24:34,330 --> 00:24:40,429
Instead, let's make it safe to take some risks and throw some errors, and then to continue.

00:24:40,429 --> 00:24:41,570
Thank you guys so much!

00:24:41,570 --> 00:24:41,839

YouTube URL: https://www.youtube.com/watch?v=tteIQBPPxqc


