Title: Visualising Enterprise Data with D3 - Sean Landsman - JSConf EU 2018
Publication date: 2018-06-27
Playlist: JSConf EU 2018
Description: 
	They say that Data is King, and this is true, but when faced with increasingly large amounts of data, it’s difficult if not impossible to make sense of what you’re looking at. This beginner to intermediate talk will discuss the benefits of adding visualations to your application and provide a thorough introduction to getting started with D3, easing the way to adding your powerful visualisations to your own applications.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,140 --> 00:00:11,220
It's great to be here.

00:00:11,220 --> 00:00:14,030
Thanks very much for coming along.

00:00:14,030 --> 00:00:19,970
Today I'm going to be talking about visualizing enterprise data with D3.

00:00:19,970 --> 00:00:27,029
It says enterprise in the title, but really, it's about adding visualizations to any significant

00:00:27,029 --> 00:00:28,750
dataset.

00:00:28,750 --> 00:00:32,029
More than a hundred rows, a hundred records in your datasets?

00:00:32,029 --> 00:00:35,890
You may want to consider adding visualizations.

00:00:35,890 --> 00:00:38,800
I'm using D3, awesome library.

00:00:38,800 --> 00:00:42,399
The talk is broken up into two rough halves.

00:00:42,399 --> 00:00:49,180
The first is demonstrating and why visualizations are break, why to add them to applications

00:00:49,180 --> 00:00:50,280
if you can.

00:00:50,280 --> 00:00:52,050
Why they add value.

00:00:52,050 --> 00:00:56,500
And the second half is how you can ramp up with D3.

00:00:56,500 --> 00:00:58,260
D3 is a powerful library.

00:00:58,260 --> 00:01:03,390
It has a huge amount of power and potential.

00:01:03,390 --> 00:01:08,549
Check out the gallery after the talk, it's about every graph and visualization for any

00:01:08,549 --> 00:01:09,960
use case.

00:01:09,960 --> 00:01:14,320
The problem with D3 can be it has a fairly steep learning curve.

00:01:14,320 --> 00:01:20,060
So, the second half of the talk is just to give you an introduction into the main entry

00:01:20,060 --> 00:01:22,890
points how to get going with D3.

00:01:22,890 --> 00:01:26,369
There's two rough halves.

00:01:26,369 --> 00:01:33,759
So, increasingly as developers, depending on which area and what we work on are facing

00:01:33,759 --> 00:01:35,550
larger and larger datasets.

00:01:35,550 --> 00:01:44,119
They're going to grow in financial, medical, social media, the data we're getting is ever

00:01:44,119 --> 00:01:45,770
increasing.

00:01:45,770 --> 00:01:48,040
And that's hugely valuable.

00:01:48,040 --> 00:01:50,150
We can do so much with this information.

00:01:50,150 --> 00:01:52,060
Specifically, things like medical data.

00:01:52,060 --> 00:01:56,270
What insights and breakthroughs are we going to make with the huge amounts of data that

00:01:56,270 --> 00:01:58,310
we are able to gather?

00:01:58,310 --> 00:02:05,000
The problem is that large data is hard if not impossible to understand.

00:02:05,000 --> 00:02:11,370
If you're looking at a hundred rows of data, for example, it can be hard to digest.

00:02:11,370 --> 00:02:16,230
If you're looking at a million rows, well, it's almost impossible.

00:02:16,230 --> 00:02:17,230
Data is king.

00:02:17,230 --> 00:02:19,120
It's absolutely king.

00:02:19,120 --> 00:02:23,220
And we need to look at the underlying data often.

00:02:23,220 --> 00:02:28,890
So, most of my background is from a financial background where it's not only important for

00:02:28,890 --> 00:02:33,970
the user to confirm that the decision they're about to make for a trade, for a loan, for

00:02:33,970 --> 00:02:37,080
a mortgage, is based on actual accurate data.

00:02:37,080 --> 00:02:39,540
So, they need to look at that data.

00:02:39,540 --> 00:02:43,000
And there's often a regulatory requirement, depending on your industry, to display that

00:02:43,000 --> 00:02:44,530
data as well.

00:02:44,530 --> 00:02:46,750
So, that's great and it's important.

00:02:46,750 --> 00:02:48,450
That's not going to change.

00:02:48,450 --> 00:02:54,120
But I think we can add a lot more value to our users and allow them to get insights that

00:02:54,120 --> 00:02:58,490
would be much harder otherwise with visualizations.

00:02:58,490 --> 00:03:01,490
Humans are very visual animals.

00:03:01,490 --> 00:03:08,730
We've evolved over, you know, thousands, hundreds of years, thousands of years, to gain insights

00:03:08,730 --> 00:03:10,560
quickly often rapidly.

00:03:10,560 --> 00:03:13,930
And my favorite example of that are road signs.

00:03:13,930 --> 00:03:20,500
We're able to gain, at a glance, often while moving at speed, useful and critical information

00:03:20,500 --> 00:03:21,910
in just one picture.

00:03:21,910 --> 00:03:27,580
So, I think we can probably take that concept and translate it and copy it over to whatever

00:03:27,580 --> 00:03:29,280
application or sphere we're working in.

00:03:29,280 --> 00:03:33,270
So, that's the aim of this talk, the first half, anyway, to convince you and even courage

00:03:33,270 --> 00:03:34,900
you to add visualizations.

00:03:34,900 --> 00:03:40,870
And if you can and if it makes sense for your domain and if you're not doing so already.

00:03:40,870 --> 00:03:47,700
The data set we're going to look at as an example is Olympic information.

00:03:47,700 --> 00:03:52,630
It's Olympic datasets of all medals won of all athletes from 2000 2012.

00:03:52,630 --> 00:03:54,770
It's a simple dataset.

00:03:54,770 --> 00:03:58,830
I didn't want to get something we would struggle to understand before we could understand what

00:03:58,830 --> 00:03:59,900
I was trying to illustrate.

00:03:59,900 --> 00:04:01,080
This is fairly simple.

00:04:01,080 --> 00:04:06,390
Per row, who won, how would they were, what they won and what medals they won.

00:04:06,390 --> 00:04:11,720
And see if we can derive any insights from this dataset.

00:04:11,720 --> 00:04:13,570
So, we'll switch over.

00:04:13,570 --> 00:04:17,100
I'm using you can hopefully see that?

00:04:17,100 --> 00:04:18,100
Yep.

00:04:18,100 --> 00:04:21,940
So, we can already see it's already ordered by total medals won.

00:04:21,940 --> 00:04:29,290
We can see that Michael Phelps has won a significant number of medals just in those three years.

00:04:29,290 --> 00:04:30,290
That's fine.

00:04:30,290 --> 00:04:33,460
We can see that Michael Phelps looks like he's on top.

00:04:33,460 --> 00:04:38,620
But let's assume, let's pretend there's other athletes who have won not many in one year,

00:04:38,620 --> 00:04:42,310
but many medals over many years.

00:04:42,310 --> 00:04:44,680
It wouldn't necessarily be easy to get that information.

00:04:44,680 --> 00:04:49,410
You would think that Michael Phelps was at the top.

00:04:49,410 --> 00:04:54,000
Let's see if we can get some more information from that.

00:04:54,000 --> 00:04:56,900
So, let's group this by athlete.

00:04:56,900 --> 00:05:00,760
So, now Michael Phelps, looks like he's on top.

00:05:00,760 --> 00:05:06,410
And aggregate by total medals won.

00:05:06,410 --> 00:05:15,540
We can confirm that total medals won, Michael Phelps is far and away with 22 medals.

00:05:15,540 --> 00:05:21,660
We can expand that and go further.

00:05:21,660 --> 00:05:23,180
That's useful, right?

00:05:23,180 --> 00:05:25,290
But it's already required a few clicks and drags.

00:05:25,290 --> 00:05:29,040
We could get this set up front.

00:05:29,040 --> 00:05:33,040
But still it can be difficult.

00:05:33,040 --> 00:05:34,160
Let's group by country.

00:05:34,160 --> 00:05:37,340
Let's see who has won the most medals.

00:05:37,340 --> 00:05:45,300
And so, from this we can what's with my so, the U.S., the United States is ahead by

00:05:45,300 --> 00:05:46,930
some way.

00:05:46,930 --> 00:05:50,760
Russia second, Germany, Australia, China and then it tails off.

00:05:50,760 --> 00:05:52,370
So, that's useful, right?

00:05:52,370 --> 00:05:53,950
I guess we could have guessed that.

00:05:53,950 --> 00:05:59,590
But it's clear already from this that the United States is ahead.

00:05:59,590 --> 00:06:01,070
But that doesn't tell us how they're ahead.

00:06:01,070 --> 00:06:03,990
It doesn't tell us which sports they're ahead in.

00:06:03,990 --> 00:06:06,670
Did they win more bronzes than gold than anyone else?

00:06:06,670 --> 00:06:08,580
What's the proportion?

00:06:08,580 --> 00:06:10,840
We can get that information from here.

00:06:10,840 --> 00:06:16,230
We can always derive the insights we can gain from visualizations from the raw data.

00:06:16,230 --> 00:06:21,389
But it's much easier and much less resource intensive, mentally resource intensive if

00:06:21,389 --> 00:06:23,610
we can divide that information at a glance.

00:06:23,610 --> 00:06:29,030
So, let's take a look at how to do that.

00:06:29,030 --> 00:06:33,490
So, the visualizations, when I say that, what do I mean?

00:06:33,490 --> 00:06:39,600
Visualization is a process of translating raw information into graphical visualization.

00:06:39,600 --> 00:06:43,950
What I mean is that you are taking data and making visualization format.

00:06:43,950 --> 00:06:50,180
How it helps, in my opinion, for users data.

00:06:50,180 --> 00:06:59,139
And visualizations as [audio breaking up] help user insights.

00:06:59,139 --> 00:07:05,880
So, the application that I've put together for this is going to have two halves.

00:07:05,880 --> 00:07:11,180
On the left side it's going to have a component with the raw data and confirm what we've seen.

00:07:11,180 --> 00:07:16,620
And on the right side, some visualization that goes along with the selected data and

00:07:16,620 --> 00:07:23,690
what we're doing it to see if we can get a better idea of what we're looking at.

00:07:23,690 --> 00:07:24,970
The application's pretty simple.

00:07:24,970 --> 00:07:26,620
I won't spend too much time on this.

00:07:26,620 --> 00:07:28,280
But we have a good component.

00:07:28,280 --> 00:07:33,020
That's responsible for managing the grid, the configuration, what we do when we click

00:07:33,020 --> 00:07:34,020
on resource.

00:07:34,020 --> 00:07:38,840
We have a chart data service that will interact with the chart service on the right.

00:07:38,840 --> 00:07:42,551
And the grid component is also responsible for switching out the chart component, depending

00:07:42,551 --> 00:07:44,530
on what the user is asking it to do.

00:07:44,530 --> 00:07:49,410
It's simple and the code will be available after the talk.

00:07:49,410 --> 00:07:50,410
But that's not the focus of the talk.

00:07:50,410 --> 00:07:55,650
So, we'll go on to the actual application.

00:07:55,650 --> 00:08:03,580
So, I've pre wrapped, pre wrapped three types of visualizations we can do with this data.

00:08:03,580 --> 00:08:09,470
So, we already think and know that the U.S., Russia, Australia, China are ahead in terms

00:08:09,470 --> 00:08:11,100
of medals won.

00:08:11,100 --> 00:08:14,000
Let's see if we can dig down into that.

00:08:14,000 --> 00:08:15,360
Dig a little deeper.

00:08:15,360 --> 00:08:20,669
So, let's group, select the top ten countries by total medals won.

00:08:20,669 --> 00:08:24,010
Not looking at the types of medals, gold, silver and bronze.

00:08:24,010 --> 00:08:25,780
But the total counts.

00:08:25,780 --> 00:08:27,730
And take that.

00:08:27,730 --> 00:08:29,699
Hopefully you can see that.

00:08:29,699 --> 00:08:33,170
So, if you can't see the label at the bottom.

00:08:33,170 --> 00:08:39,060
On the left, United States, Germany, Australia, China, Russia, trailing off.

00:08:39,060 --> 00:08:41,900
That confirm what is we have seen earlier.

00:08:41,900 --> 00:08:47,060
But what I like about this starting point is visually we don't have to use too much

00:08:47,060 --> 00:08:52,550
energy to work out that the United States is by far and away the winner here in terms

00:08:52,550 --> 00:08:55,420
of total medals won.

00:08:55,420 --> 00:08:58,840
Almost just under double Russia.

00:08:58,840 --> 00:09:01,400
Looks like maybe just double Germany and Australia.

00:09:01,400 --> 00:09:03,360
So, it's the same information we got before.

00:09:03,360 --> 00:09:08,360
But we're able to divide that information within maybe two seconds, maybe three, maybe

00:09:08,360 --> 00:09:09,360
more.

00:09:09,360 --> 00:09:13,970
But ultimately, we will be able to derive a huge amount of information, which we were

00:09:13,970 --> 00:09:18,100
able to derive before, but a lot less scanning horizontally and vertically.

00:09:18,100 --> 00:09:23,350
We can glance at the picture, look at the label, and United States is by far, in terms

00:09:23,350 --> 00:09:27,670
of total medals won the number one winner.

00:09:27,670 --> 00:09:33,370
Let's see if we can derive more information from the dataset we're looking at.

00:09:33,370 --> 00:09:39,360
So, we're doing the same thing, but now we're breaking it down by the medal types.

00:09:39,360 --> 00:09:46,010
And I think this is my favorite one is that it puts a distance between the United States

00:09:46,010 --> 00:09:51,620
and the rest that isn't necessarily obvious from the raw data and grouping aggregation

00:09:51,620 --> 00:09:53,570
or even the first visualization.

00:09:53,570 --> 00:09:58,440
So, looking at this, you can see that the bronze is about on par with Russia.

00:09:58,440 --> 00:10:02,120
Silvers are about double Russia and the other countries.

00:10:02,120 --> 00:10:05,149
But gold is almost triple everyone else.

00:10:05,149 --> 00:10:11,320
So, not only with the United States ahead in overall, they are ahead by some way in

00:10:11,320 --> 00:10:12,350
gold.

00:10:12,350 --> 00:10:13,350
And silver.

00:10:13,350 --> 00:10:15,760
And about on par with bronze.

00:10:15,760 --> 00:10:20,690
That's a huge amount of information that we were able to derive in almost no time and

00:10:20,690 --> 00:10:21,899
with almost no effort.

00:10:21,899 --> 00:10:24,760
As developers, we had to put a bit of effort to do this.

00:10:24,760 --> 00:10:29,149
But your user, by clicking on a button and selecting the information they're after is

00:10:29,149 --> 00:10:35,350
able to derive a huge amount of information just by having the visualization to go alongside

00:10:35,350 --> 00:10:36,480
the data.

00:10:36,480 --> 00:10:41,330
Now, imagine translating this to aricher dataset.

00:10:41,330 --> 00:10:43,980
Maybe looking at social media, and trends.

00:10:43,980 --> 00:10:45,060
Complicated trends.

00:10:45,060 --> 00:10:46,430
Not easy trends.

00:10:46,430 --> 00:10:53,100
Medical, where hot spots are for diseases and why they are occurring.

00:10:53,100 --> 00:10:55,990
Visualizations would help.

00:10:55,990 --> 00:11:02,640
The last visualization, the colors are terrible.

00:11:02,640 --> 00:11:04,700
Top ten for athletics.

00:11:04,700 --> 00:11:15,020
The United States is first, but in terms of Jamaica and Ethiopia are in the top ten by

00:11:15,020 --> 00:11:16,190
a significant margin.

00:11:16,190 --> 00:11:21,220
And given their population count relative to the United States and Russia, we can see

00:11:21,220 --> 00:11:24,339
they are punching far above their weight in terms of population.

00:11:24,339 --> 00:11:32,460
While not as impactful as the second, it's telling us that U.S. and Russia are ahead,

00:11:32,460 --> 00:11:37,840
but in terms of population, much smaller countries are doing really well in athletics.

00:11:37,840 --> 00:11:40,380
That's just with one little chart.

00:11:40,380 --> 00:11:46,300
That's great and hopefully illustrates the point I'm trying to make.

00:11:46,300 --> 00:11:48,620
So, that's the first half.

00:11:48,620 --> 00:11:53,460
I encourage you to check out D3, the visualizations, what the options are.

00:11:53,460 --> 00:11:57,450
The second part of the talk is just to dig into D3 a little bit.

00:11:57,450 --> 00:12:00,480
When I started D3, a little bit overwhelmed.

00:12:00,480 --> 00:12:05,730
The documentation is there but it's definitely not geared towards beginners.

00:12:05,730 --> 00:12:14,020
The rest of the talk is the basics of D3 and how you can get started with it and the concepts.

00:12:14,020 --> 00:12:17,490
So, we'll start off with selection.

00:12:17,490 --> 00:12:22,350
Like JQuery, it allows for selection of DOM elements.

00:12:22,350 --> 00:12:28,880
At the top, I'll set up the startup point, I'm demo in a minute.

00:12:28,880 --> 00:12:33,220
We have the number of circles within and the D3 code is at the bottom.

00:12:33,220 --> 00:12:34,600
We have some data.

00:12:34,600 --> 00:12:37,810
We have five data items there.

00:12:37,810 --> 00:12:43,010
And we're going to use D3 to select all circles and associate data with it.

00:12:43,010 --> 00:12:44,010
Okay?

00:12:44,010 --> 00:12:49,070
So, if we go look at that, we'll see that D3 is actually doing something with us.

00:12:49,070 --> 00:12:51,480
That's how the code looks as it is.

00:12:51,480 --> 00:12:54,680
And we've run the code and D3, hopefully you can read that.

00:12:54,680 --> 00:12:58,080
I'll pull it up for those at the back.

00:12:58,080 --> 00:13:00,950
The HTML is rendered, D3 hasn't changed what we are seeing.

00:13:00,950 --> 00:13:03,830
But it has done something in the background.

00:13:03,830 --> 00:13:06,040
Let's look at the first item.

00:13:06,040 --> 00:13:08,010
The first circle on the left.

00:13:08,010 --> 00:13:09,010
If we selected.

00:13:09,010 --> 00:13:11,630
I have given an ID, so we selected.

00:13:11,630 --> 00:13:13,870
and we can go right down to the bottom.

00:13:13,870 --> 00:13:18,020
Hopefully you can see that, maybe you have not.

00:13:18,020 --> 00:13:25,070
Added data__ and given it a value of 2.

00:13:25,070 --> 00:13:28,790
And the second one, 4 and 6.

00:13:28,790 --> 00:13:34,490
And it's found all existing DOM items and asked to select and associated the data we've

00:13:34,490 --> 00:13:37,399
asked it to associate with it.

00:13:37,399 --> 00:13:41,050
We can expand on that just to confirm what I'm saying.

00:13:41,050 --> 00:13:47,200
So, we've iterated all the circles and I'll put the data item and you can hopefully see

00:13:47,200 --> 00:13:49,690
it says 2, 4, 6, 8.

00:13:49,690 --> 00:13:54,200
Each of the circles has the data we have given it associated with it.

00:13:54,200 --> 00:13:59,399
And that's important because subsequent steps to manipulate the DOM items will use the data

00:13:59,399 --> 00:14:01,040
associated with it.

00:14:01,040 --> 00:14:05,600
You may have noticed that we have five data items, but only four circles.

00:14:05,600 --> 00:14:08,250
We'll come back to that in a minute.

00:14:08,250 --> 00:14:11,660
So, let's put that away.

00:14:11,660 --> 00:14:18,780
So, the second step here is to beg your pardon.

00:14:18,780 --> 00:14:20,050
There.

00:14:20,050 --> 00:14:22,140
So, we've selected it.

00:14:22,140 --> 00:14:28,080
The second step will be to start manipulating the existing items.

00:14:28,080 --> 00:14:31,900
So, I'll show you the code in a minute.

00:14:31,900 --> 00:14:32,960
That was quite quick.

00:14:32,960 --> 00:14:34,020
It's on the slide.

00:14:34,020 --> 00:14:39,050
We'll use the items we associated with the DOM items and scaled it.

00:14:39,050 --> 00:14:41,960
So, for example, 2, we've times it by a value.

00:14:41,960 --> 00:14:46,320
4, we've timed it by a value and the circles have scaled in size.

00:14:46,320 --> 00:14:51,370
So, this is, I guess, D3101, select DOM items.

00:14:51,370 --> 00:14:53,279
Manipulate the DOM items with the data.

00:14:53,279 --> 00:14:57,920
So, let's look at what we did there.

00:14:57,920 --> 00:15:01,901
So, the second step we've selected we did before.

00:15:01,901 --> 00:15:02,901
We've selected the circles.

00:15:02,901 --> 00:15:04,769
We associated data with it.

00:15:04,769 --> 00:15:07,700
And then we've changed the style of the DOM items.

00:15:07,700 --> 00:15:13,750
So, for each item, so, D3, like JQuery, allows chaining of items.

00:15:13,750 --> 00:15:19,810
And D3 starts at the top left and draws down and to the right.

00:15:19,810 --> 00:15:24,450
So, we will change the height according to the data item and the width according to the

00:15:24,450 --> 00:15:26,149
data item, so the circles get bigger.

00:15:26,149 --> 00:15:29,110
Depending on the size of the data.

00:15:29,110 --> 00:15:35,230
And at the bottom, we've manipulated the margin so that as humans we expect the graph and

00:15:35,230 --> 00:15:37,160
visualizations to go from bottom up.

00:15:37,160 --> 00:15:41,710
We just push the margin top down and allow for the data.

00:15:41,710 --> 00:15:44,320
If we started at the bottom and scrolled up, we wouldn't have to do that.

00:15:44,320 --> 00:15:48,230
But like D3, like most graphing libraries, start at the top and go down.

00:15:48,230 --> 00:15:50,519
We manipulate the library.

00:15:50,519 --> 00:15:56,740
I have broken them out into four points to illustrate what each item is doing.

00:15:56,740 --> 00:16:01,720
For each data item, we are manipulating one attribute of the style.

00:16:01,720 --> 00:16:09,149
So, moving on so, that's selection and manipulating items.

00:16:09,149 --> 00:16:13,180
That's great for when you want to manipulate existing DOM items.

00:16:13,180 --> 00:16:17,920
As I said before, we have five data items, but only four existing images.

00:16:17,920 --> 00:16:21,930
This brings us to the second concept, or D3 concept that I wanted to introduce.

00:16:21,930 --> 00:16:23,899
That's the enter selection.

00:16:23,899 --> 00:16:27,180
On the left, existing items, that's selection.

00:16:27,180 --> 00:16:31,760
On the right we then add new items using the enter method.

00:16:31,760 --> 00:16:35,380
So, you'll see I have four existing items.

00:16:35,380 --> 00:16:42,589
The fifth one, 10, will be added by as you add enter and then manipulating the DOM item.

00:16:42,589 --> 00:16:47,680
So, the top half of this code is the code we've already seen.

00:16:47,680 --> 00:16:51,011
And the bottom half, we could change this, I have broken it up into separate items to

00:16:51,011 --> 00:16:52,011
make it clear.

00:16:52,011 --> 00:16:53,680
We use enter.

00:16:53,680 --> 00:16:56,709
Everything that's not already associated, do this with it.

00:16:56,709 --> 00:17:03,170
So, for every item we're not associated we add a div and we put the attributes as we

00:17:03,170 --> 00:17:04,170
did before.

00:17:04,170 --> 00:17:10,039
So, this is going to add a fifth circle with a height with this was how before and add

00:17:10,039 --> 00:17:11,369
it to our application.

00:17:11,369 --> 00:17:14,819
So, let's take a look at that.

00:17:14,819 --> 00:17:16,089
As I said, you can chain these.

00:17:16,089 --> 00:17:21,739
And you can make it in line, but for demonstration purposes I wanted to make it clearer.

00:17:21,739 --> 00:17:24,879
So, four items with the fifth circle added.

00:17:24,879 --> 00:17:27,970
So, selection for existing DOM items.

00:17:27,970 --> 00:17:31,850
Enter for new DOM items.

00:17:31,850 --> 00:17:32,850
It's pretty simple.

00:17:32,850 --> 00:17:43,090
It's just not always clear from the D3 documentation and demos what these things are actually doing.

00:17:43,090 --> 00:17:46,399
The last three items I want to touch on are scales.

00:17:46,399 --> 00:17:50,590
And these are how you want to scale your data both horizontally and vertically depending

00:17:50,590 --> 00:17:52,010
on your data.

00:17:52,010 --> 00:17:57,039
So, for example, if you've got 2, 4, 6, 8, 10, but you actually want to fill up your

00:17:57,039 --> 00:18:02,159
screen with a thousand pixels horizontally and 800 pixels, add scales.

00:18:02,159 --> 00:18:06,440
If you want to use dates, that's where scales come in.

00:18:06,440 --> 00:18:11,100
I'm going to there's many types of scales, but the three main you're likely to use I'll

00:18:11,100 --> 00:18:12,100
cover.

00:18:12,100 --> 00:18:14,989
The first is an ordinal scale.

00:18:14,989 --> 00:18:22,059
It maps discrete values in an array to discrete values in the array.

00:18:22,059 --> 00:18:31,139
We wanted to map to RGB, we use it here.

00:18:31,139 --> 00:18:37,549
Set the domain, the data, and I want the output to be red, G for green, B for blue.

00:18:37,549 --> 00:18:44,509
And when you call ordinal scale, when we manipulate the items, it will return.

00:18:44,509 --> 00:18:46,389
Ordinal scale of R returns red.

00:18:46,389 --> 00:18:52,460
A discrete value to a discrete value, it's pretty simple, I think.

00:18:52,460 --> 00:18:55,470
The second one is band scales.

00:18:55,470 --> 00:18:58,470
Which is similar to ordinal, but it's a continuous range.

00:18:58,470 --> 00:19:02,950
Instead of a discrete value to a discrete value, we're going from a discrete value to

00:19:02,950 --> 00:19:04,519
an item on a range.

00:19:04,519 --> 00:19:07,799
So, as before, we've got RGB as our data.

00:19:07,799 --> 00:19:10,860
But that's going to scale between 0 and 200.

00:19:10,860 --> 00:19:20,139
So, R is zero, G is 6, about halfway, I guess, and B is 133.

00:19:20,139 --> 00:19:21,139
And loop over.

00:19:21,139 --> 00:19:23,520
So, if we do it again, it will go to zero.

00:19:23,520 --> 00:19:28,429
So, that's more useful when you want a continuous scale.

00:19:28,429 --> 00:19:30,299
And lastly, the linear scale.

00:19:30,299 --> 00:19:32,630
This is the one you'll probably use most often.

00:19:32,630 --> 00:19:38,409
You'll use it when you want a continuous domain, numbers, dates, for example.

00:19:38,409 --> 00:19:40,559
And typically, this will be your Y axis.

00:19:40,559 --> 00:19:45,230
So, you've got a set amount of data items, but you want to scale it horizontally.

00:19:45,230 --> 00:19:48,040
You'll use a linear scale for that.

00:19:48,040 --> 00:19:50,440
Here we create a linear scale.

00:19:50,440 --> 00:19:52,740
We set out the main, zero and 10.

00:19:52,740 --> 00:19:54,580
That's our data items.

00:19:54,580 --> 00:19:57,409
So, the start and the max of our data items.

00:19:57,409 --> 00:20:00,549
The range will go from zero to a thousand.

00:20:00,549 --> 00:20:03,989
And we want to scale that continuously on our range.

00:20:03,989 --> 00:20:06,190
So, a zero is a zero.

00:20:06,190 --> 00:20:08,799
2.5, as you'd expect, given the numbers, would be 250.

00:20:08,799 --> 00:20:12,559
7 would be 700 and obviously 10 would be a thousand.

00:20:12,559 --> 00:20:18,399
So, it's for mapping items items that are smaller or bigger than you want to render

00:20:18,399 --> 00:20:21,029
on your screen and scaling them on to a screen.

00:20:21,029 --> 00:20:24,320
I hope that makes sense.

00:20:24,320 --> 00:20:26,859
Those are the three main scales.

00:20:26,859 --> 00:20:30,970
I would like to have gone into this a bit further, but time constraints.

00:20:30,970 --> 00:20:34,720
Hopefully that gives you an instruction into D3.

00:20:34,720 --> 00:20:37,940
Hopefully that introduces you to the three scales you'll likely use.

00:20:37,940 --> 00:20:42,409
And encourage you to check out D3.

00:20:42,409 --> 00:20:46,539
It's got a huge amount of visualizations.

00:20:46,539 --> 00:20:48,039
More than I can describe here.

00:20:48,039 --> 00:20:50,549
And all that you're likely to encounter.

00:20:50,549 --> 00:20:54,139
All use those I've described.

00:20:54,139 --> 00:20:59,220
If you're not using visualizations, consider adding them.

00:20:59,220 --> 00:21:00,309
Your users will thank you.

00:21:00,309 --> 00:21:04,460
They can get so much more information than they would otherwise just from the raw data.

00:21:04,460 --> 00:21:05,999
Thank you very much.

00:21:05,999 --> 00:21:06,499

YouTube URL: https://www.youtube.com/watch?v=BJR5SF4cI_Y


