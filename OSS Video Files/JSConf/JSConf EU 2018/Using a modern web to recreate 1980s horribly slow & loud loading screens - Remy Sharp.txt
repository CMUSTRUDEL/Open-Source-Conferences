Title: Using a modern web to recreate 1980s horribly slow & loud loading screens - Remy Sharp
Publication date: 2018-08-02
Playlist: JSConf EU 2018
Description: 
	Content warning: High frequency visual flickering and noise.

These days people chase the dream of high performance, fast loading slick web sites. But in the 1980s computers were ugly, slow and loud: letâ€™s make that instead ðŸ‘´ðŸ‘µðŸ’ª

The first generation of home computers launched a movement of developers and hackers across the world. But to start your app, you had to load a tape (a really old usb-type-thing), press play, and patiently wait for the screech of the program to load (akin to listening to a fax machine).

Why invest time in building fast website, when we can have fun building slow old retro machines using JavaScript. The end result is a mix of Web Audio, canvas API, cameras, audio jacks, binary, typed arrays, blobs, history of computing and a lot of questionable JavaScript.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,400 --> 00:00:16,930
Wow. What an amazing couple of days. I've learned a whole ton of stuff, and what an

00:00:16,930 --> 00:00:23,310
amazing time to live, working on the internet. There is so much cool technology â€” progressive

00:00:23,310 --> 00:00:33,730
web apps, WASMs, machine-learnings, information on how to make our sites fast, great things

00:00:33,730 --> 00:00:44,700
about user experience, we have service workers, the official logo, Google IO last month said

00:00:44,700 --> 00:00:49,739
that service workers is like the biggest step forward in a decade, and it's given us off

00:00:49,739 --> 00:00:57,420
line, and push notifications, and our websites could be even more performant, and there are

00:00:57,420 --> 00:01:02,989
articles, and Twitter, and social media is going on about how fast our websites have

00:01:02,989 --> 00:01:11,490
to be, and I feel really tired, and it's draining. I want to go back to a better time where things

00:01:11,490 --> 00:01:21,220
were more old school, a bit more slower, and louder, and uglier. So I'm going to throw

00:01:21,220 --> 00:01:26,420
all of the cool stuff that you've learned over the last year and try and go back to

00:01:26,420 --> 00:01:34,240
that awful experience. I have a couple of content warnings. I do have some flashing

00:01:34,240 --> 00:01:39,620
imagery in my talk. It's not a huge amount on the screen, but you will see the icon up

00:01:39,620 --> 00:01:46,270
in the corner. There are disorientating sounds. You will see the icon up in the corner before

00:01:46,270 --> 00:01:52,220
it starts playing. There is some questionable JavaScript, so, judge me all you want, but

00:01:52,220 --> 00:02:01,560
it won't make it any better! My name is Remy Sharp. Maybe you've seen my work, JS By. I

00:02:01,560 --> 00:02:14,810
run FFConf in the UK. I've got a couple of projects, NoDemon. And I was a child of the

00:02:14,810 --> 00:02:22,840
1980s as I'm stressed with Mr T with the beard and the earrings. I grew up in the UK during

00:02:22,840 --> 00:02:29,549
the 1980s, and there was an explosion of technology happening at that time. I was privileged enough

00:02:29,549 --> 00:02:35,680
to be in a household where my father was into computers as well, and â€” like it was a thing

00:02:35,680 --> 00:02:42,299
that was happening â€” and we had this machine. This was my childhood machine that I remember

00:02:42,299 --> 00:02:50,799
using. This is a ZX Spectrum 48k from Sinclair. It is like the kind of Apple or Microsoft

00:02:50,799 --> 00:02:59,269
of the time. In Europe, I think it was Time X. This came out in 1982. Now, there are couple

00:02:59,269 --> 00:03:08,680
of machines prior to that. In 1980, the Sinclair released the ZX80 for Â£50. For a home computer

00:03:08,680 --> 00:03:16,849
in 1980 was staggeringly cheap compared to the fact that, in the 1970s, there were machines

00:03:16,849 --> 00:03:24,719
the size of rooms for thousands of pounds. So, all of a sudden, for Â£50, about EUR200,

00:03:24,719 --> 00:03:33,699
you could only a computer in your household. This is what I had as a kid. Instead of being

00:03:33,699 --> 00:03:38,959
parented, I played games on this. Mum and dad, don't watch. I loved that one of the

00:03:38,959 --> 00:03:45,439
features here is the key is autorepeat, key feature is like the keys autorepeat, and,

00:03:45,439 --> 00:03:53,409
to load the after the wear on to these machines, you would have a thing called a cassette tape,

00:03:53,409 --> 00:04:00,089
this is like an old shit USB stick, not anywhere near as robust, and all kinds of things would

00:04:00,089 --> 00:04:05,159
go wrong with the tapes. You would take your tape, load it into the cassette player, and

00:04:05,159 --> 00:04:13,699
you would press play. That would wire into your Spectrum. You wired the Spectrum into

00:04:13,699 --> 00:04:21,930
your television, and you would wait. And you would wait. And, sometimes, the games wouldn't

00:04:21,930 --> 00:04:26,130
load, and sometimes, the tape would unspool, so all the tape would come out. Sometimes,

00:04:26,130 --> 00:04:33,539
it would look like Jimi Hendrix here. Often, you would have to wind it all back again.

00:04:33,539 --> 00:04:39,080
A canvassed Twitter to ask people for those of you who had these things, what would you

00:04:39,080 --> 00:04:44,830
do to try and encourage the thing to load? Some people would leave the room so the computer,

00:04:44,830 --> 00:04:48,490
this God-like thing had to be alone. Some people turned the machines upside-down. I

00:04:48,490 --> 00:04:54,599
would pray to the thing, please load, please load. To be fair, I still use this technique

00:04:54,599 --> 00:05:02,669
on my phone. So, in truth, most of my childhood was spent listening to these games loading,

00:05:02,669 --> 00:05:08,469
so what is what I want to recreate for you and bring back the old school. This is using

00:05:08,469 --> 00:05:15,189
the only technology I know, which is a browser, obviously. Just to give you full context,

00:05:15,189 --> 00:05:19,900
this is what it sounded like, and looked like. I've forgotten the content warning, so there

00:05:19,900 --> 00:05:25,310
will be loud noises here, and I will turn it down as we are going, and it's a bit flashy

00:05:25,310 --> 00:05:46,520
too. So you want it from the beginning. [Electronic screeching sounds]. If you're a kid of six

00:05:46,520 --> 00:05:53,539
or seven and waiting for this game. That's what you have to listen to. Okay? And this

00:05:53,539 --> 00:05:56,740
is just the loading screen. This is just the thing to tell you this is what it might look

00:05:56,740 --> 00:06:07,169
like. [Laughter]. Assuming the tape wouldn't go bad, and the Spectrums were buggy. I'm

00:06:07,169 --> 00:06:18,210
going to remake that. So, the Spectrum, that loading experience, one of the key parts is

00:06:18,210 --> 00:06:24,669
the sound. So, the sound is broken up into three parts: you've got the pilot signal which

00:06:24,669 --> 00:06:28,479
is like the steady tone that happened at the beginning; then there is a sync signal which

00:06:28,479 --> 00:06:33,169
is a burst of sound; and then I've got data. What we were list he can to just then was

00:06:33,169 --> 00:06:42,099
data. Like, I can do this. I know there's a web API for sound. I'm going to get a new

00:06:42,099 --> 00:06:48,300
audio context and create an oscillator and set the frequency of the oscillator to about

00:06:48,300 --> 00:06:55,050
830 which is the right frequency. I had a friend open me up in Audacity and tell me

00:06:55,050 --> 00:07:03,889
what the frequency was. I connected to my destination and I start. [Single electronic

00:07:03,889 --> 00:07:11,180
tone.]. That solid frequency is the pilot signal. Cool. Next bit. Okay. Next bit is

00:07:11,180 --> 00:07:17,009
making a distinct sound. And I know how to make white noise. I know that I can chuck

00:07:17,009 --> 00:07:22,050
random data into audio, but this is distinct, and it needs to sound right otherwise it's

00:07:22,050 --> 00:07:29,460
just all wrong. So, I didn't work on this â€” worked on this 12 months on and off, but

00:07:29,460 --> 00:07:39,039
12 months, learning about sound, learning about tones, and frequencies, and processors,

00:07:39,039 --> 00:07:46,379
and promptly forgot all of that stuff, and you can just fill buffers with samples. So

00:07:46,379 --> 00:07:50,979
I didn't need to know anything about how sound works to be able to create this. One amazing

00:07:50,979 --> 00:07:56,469
part of the web that I absolutely love be I was able to go to a website called worldofspectrum.org

00:07:56,469 --> 00:08:06,790
and filled with game content, old files, specifications. There are people who have reverse engineered

00:08:06,790 --> 00:08:12,770
the entire hardware and made it work and documented all of that and shared it on the web. I know

00:08:12,770 --> 00:08:19,470
that the amplitude of the wave form is completely irrelevant. The way the sound works is that

00:08:19,470 --> 00:08:25,069
it measures this line as a pulse. The point where it crossed the zero mark and goes down

00:08:25,069 --> 00:08:33,139
below, that is one pulse. This has a length of 855T state. A T state is one operation

00:08:33,139 --> 00:08:40,329
that the ZX Spectrum can perform, running at 3.5 megahertz, doing 3.5 million operations

00:08:40,329 --> 00:08:49,560
a second. This is 855T states. That is a quarter of a millisecond. So to get this right, I

00:08:49,560 --> 00:08:55,730
have to make a quarter of a millisecond sound. A pair of these pulses is a binary zero, and

00:08:55,730 --> 00:09:03,300
twice the length is a binary one. I have a bunch of numbers now. I can use a bit of maths.

00:09:03,300 --> 00:09:11,041
I take my sample rate of 44 megahertz, which is like the default audio con text sample

00:09:11,041 --> 00:09:19,240
rate, and I take my 3.5 megahertz â€” my T-state length. I want to get the number of samples

00:09:19,240 --> 00:09:25,100
required to match the T state, the T length, and it's basically the length at 855 multiplied

00:09:25,100 --> 00:09:30,680
by T, multiplied by sample rate plus a little bit more so they get a whole number. I can't

00:09:30,680 --> 00:09:40,209
have a half sample. For binary, binary one, I get 22 samples. I'm sure no-one will learn

00:09:40,209 --> 00:09:44,050
anything from this bit of code. Don't worry if you're not following it at this point.

00:09:44,050 --> 00:09:52,370
I will create a buffer that gives me a binary 1 and a binary 0. Here I basically just have

00:09:52,370 --> 00:09:58,779
the number of samples 11 for zero, a float array that has twice the length, and I populate

00:09:58,779 --> 00:10:10,260
with a plus one and a negative one which gives me a binary zero. I can now go and get the

00:10:10,260 --> 00:10:21,509
JSConf home page, I've got the length of bytes by putting an array in an array. I multiple

00:10:21,509 --> 00:10:28,279
the bytes by eight bits in a bite because there are â€” multiplied by the length of

00:10:28,279 --> 00:10:33,889
one, and I get the number of samples required to create the buffer to be the right size

00:10:33,889 --> 00:10:42,740
to get a play in JSConf EU HTML. I set an audio context, set the buffer. Populate it

00:10:42,740 --> 00:10:49,420
with this line here â€” just magic, okay? I'm going to connect that to my destination.

00:10:49,420 --> 00:11:00,950
Yes. So this is JSConf as audio. I will put my volume back up so you can hear it clearly.

00:11:00,950 --> 00:11:21,880
[Rapid electronic screeching]. Yes, this is the JSConf music for next year, I'm telling

00:11:21,880 --> 00:11:28,279
you. [Applause]. Yeah! Basically just hurt a lot of people's ears, and you're clapping

00:11:28,279 --> 00:11:34,779
me! Sound done. Next off is the loading bars, the super important part of making awful loud

00:11:34,779 --> 00:11:42,220
ugly images. So, I think a really cool back story to the loading bars? Spectrum. The original

00:11:42,220 --> 00:11:47,810
ZX80 had a chip called the ULA which is the main brain of the computer, and they had a

00:11:47,810 --> 00:11:53,529
restricted number of chips, so they had â€” sorry, restricted number of pins on the chip, and

00:11:53,529 --> 00:11:58,990
they had one pin managed all the display. That same pin dealt with reading all of the

00:11:58,990 --> 00:12:04,370
audio coming in, so when audio came in, it would disrupt the display. Ever the engineer,

00:12:04,370 --> 00:12:09,639
this is not a bug, this is a feature, because you can see approximately what the baud rate

00:12:09,639 --> 00:12:16,330
of the data going over the audio, and the engineers why kind of like, "We can see it's

00:12:16,330 --> 00:12:22,130
loading" so this is basically like a loading bar from the 1980s. In fact, they coded it

00:12:22,130 --> 00:12:28,240
into the hardware, and the other computer systems went and coded it into their software.

00:12:28,240 --> 00:12:32,240
The Commodore, for instance, added this as a feature in their software when you loaded

00:12:32,240 --> 00:12:39,509
games. So I can't just take the bytes from JSConf and dump it into a canvas and say the

00:12:39,509 --> 00:12:45,769
zeroes are yellow and the ones are blue because it would do it too quickly. I need to take

00:12:45,769 --> 00:12:52,940
the audio I just generated, run it through a processor, and then emit bits that I will

00:12:52,940 --> 00:13:01,370
then render on a canvas. I have three choices for this. I can use an analyser node but that

00:13:01,370 --> 00:13:05,150
didn't really work for me, it was it wasn't giving me enough of the samples that comes

00:13:05,150 --> 00:13:11,829
off the audio. And then I've got a script processor node, and the audio worklet. Actually,

00:13:11,829 --> 00:13:21,160
the script processing node has been deprecated as of August 2014 in favour of the audio worklet,

00:13:21,160 --> 00:13:25,120
and the audio worklet doesn't really have much support in many of the browsers today,

00:13:25,120 --> 00:13:31,580
so I chose the script processor node. But, it's pretty much the same. The they're cool,

00:13:31,580 --> 00:13:35,959
but basically, the script processor will block the main thread which is what I want. I want

00:13:35,959 --> 00:13:43,350
it to be a little bit slower. Okay. So, I've got my loud nasty noise. I connect up a script

00:13:43,350 --> 00:13:49,240
processor, and the audio event fires, and I get all the samples for that audio event.

00:13:49,240 --> 00:13:52,220
I'm going to run through all those samples. I'm going to do the opposite of what I was

00:13:52,220 --> 00:13:56,819
doing before. I'm going to look for the edges of the sound. The point where the sample rate

00:13:56,819 --> 00:14:02,300
goes from zero to one and comes back down again, that's the width of my pulse. I'm going

00:14:02,300 --> 00:14:08,860
to build up pairs of pulses, find the bits, the pairs of pulses which make a bit, and

00:14:08,860 --> 00:14:16,579
then build up a bit into a byte, and then render it as a bar on the screen. The first

00:14:16,579 --> 00:14:21,250
time I ran this, I was doing a lot of work with arrays and moving data around in arrays,

00:14:21,250 --> 00:14:28,890
and I ran a little performance test where I put all the audio through my code. It was

00:14:28,890 --> 00:14:35,990
like processing 200 or 300 samples through these three or four minutes of noise. It was

00:14:35,990 --> 00:14:42,771
kind of slow. I could feel this buffer.shift is taking up three seconds. I thought it's

00:14:42,771 --> 00:14:48,520
the not mutation going on, but when I refactored it a ill will bit and changed it for a splice,

00:14:48,520 --> 00:14:54,150
it completely changed the performance profile. That was because of the way I was working

00:14:54,150 --> 00:14:59,769
with arrays. An array contains hundreds of samples, shifting one off at the beginning,

00:14:59,769 --> 00:15:06,590
JavaScript is not going to do that thousands and thousands and thousands of times. In fact,

00:15:06,590 --> 00:15:13,510
I changed from regular arrays to typed arrays, and it completely flattened the performance

00:15:13,510 --> 00:15:17,519
profile. There is ten milliseconds of the most amount of time it spends rather than

00:15:17,519 --> 00:15:24,100
hundreds of milliseconds. The way that I think about this is a regular array is just a point

00:15:24,100 --> 00:15:28,620
in memory which the operating systems doesn't really know how much it is going to store

00:15:28,620 --> 00:15:34,540
in memory, and it's any type can go in there. You can put objects, and strings, and it's

00:15:34,540 --> 00:15:39,819
not super optimised when it is in memory, but a typed array can only be one length,

00:15:39,819 --> 00:15:44,540
for starters, so the operating system allocates that amount of memory, and the actual elements

00:15:44,540 --> 00:15:51,259
inside of the typed array, they can only be either a U in 8, or a floating point, but

00:15:51,259 --> 00:15:57,410
it has a specific length, so you can specifically jump through that typed array. Typed arrays

00:15:57,410 --> 00:16:05,769
were superb for this, and it's runtime performance rather than Typescript-like protection of

00:16:05,769 --> 00:16:14,500
your â€” I don't use Typescript, not because it is bad. So, my code is able to use a script

00:16:14,500 --> 00:16:28,880
processor to consume audio that I can then paint blue and red bars for when I get data.

00:16:28,880 --> 00:16:50,259
Heads up audio people. Ready? [Single electronic tone]. Those the bars around the edge. The

00:16:50,259 --> 00:17:10,690
blues are the ones. The yellows are the zeroes. Yeah. Okay. [Applause]. So I have slow, and

00:17:10,690 --> 00:17:19,230
I have loud, but I don't have ugly yet. Now, I don't have any time for Web P, or PNGs,

00:17:19,230 --> 00:17:29,010
gifs, or those fancy image formats, what we need are really old up supported Spectrum

00:17:29,010 --> 00:17:35,020
1980 image formats, so this is the image format I'm going to render â€” none of this new stuff.

00:17:35,020 --> 00:17:42,190
This is how the image is rendered in a Spectrum. It is a really cute image format â€” or I

00:17:42,190 --> 00:17:53,280
think it is. It is always exactly 6,912 bytes. It is broken up into these sections. The first

00:17:53,280 --> 00:18:01,450
three-quarters are pixel data. It is literally if the binary is zero. It is white, and, if

00:18:01,450 --> 00:18:12,470
it is black â€” it is on or off. The first quarter is dedicated to the first third of

00:18:12,470 --> 00:18:16,780
the screen, and then the last section at the end it dedicated to the attribute data which

00:18:16,780 --> 00:18:22,630
makes up the colour that you can see at the bottom, and it is just a byte, a single byte

00:18:22,630 --> 00:18:29,070
gives you see the ink, the paper, the brightness, and that means basically from instead of white

00:18:29,070 --> 00:18:34,980
we can have grey if the brightness is off, and obviously blink, because that's important!

00:18:34,980 --> 00:18:44,280
Okay? A great part of this code is I think I can â€” I get to abuse bit-wise operations,

00:18:44,280 --> 00:18:53,660
and I can say for any point in my 6,912 bytes, I have this index of 4 thousand. Where does

00:18:53,660 --> 00:19:03,140
that live in each quarter? I can do a bit-wise shift 11 which is not only like really performant,

00:19:03,140 --> 00:19:10,370
because it is low-level JavaScript, but it makes me look like an elite hacker! This is

00:19:10,370 --> 00:19:18,410
more code that renders bits. Look, it has got bit-shifting, modulus, multiplication,

00:19:18,410 --> 00:19:27,900
maths. Yeah! Even awake/sleep at the end to make it go a little bit slower. With that,

00:19:27,900 --> 00:19:35,930
I can now render all of these super old deprecated formats. These are deal .screen files from

00:19:35,930 --> 00:19:46,030
the world of, real dot screen files. Manic Miners was one of the early games. I've got,

00:19:46,030 --> 00:19:55,200
Chase HQ before there are others. So now I can support really old awful image formats.

00:19:55,200 --> 00:20:07,290
Yeah. Like I say, Web P â€” done. The internet is littered with pictures of cats. I'm going

00:20:07,290 --> 00:20:14,230
to fix that as well. I'm going to fix the old existing old new images, and oldify them,

00:20:14,230 --> 00:20:22,100
okay? This is this really like I won't say beautiful aspect of these Spectrum images,

00:20:22,100 --> 00:20:25,950
because of the way that the pixels are rendered, there's a thing called attribute clash where

00:20:25,950 --> 00:20:31,880
where the screen is divided into eight by eight blocks, and you can only have two colours

00:20:31,880 --> 00:20:39,350
on the Spectrum, so you get these detailed colour that would can't â€” it doesn't bleed

00:20:39,350 --> 00:20:45,120
into, like, other eight by eight blocks. You can only have two colours there, okay? So,

00:20:45,120 --> 00:20:52,020
fair enough, take a picture of my cat. I can use a canvas API to mangle the bits. I'm going

00:20:52,020 --> 00:20:56,890
to take an image and put that into a canvas. So relatively speaking, that is straightforward.

00:20:56,890 --> 00:21:03,690
I'm going to resize it down to 256 by 192 because that's how big images should be. I'm

00:21:03,690 --> 00:21:11,400
going to use the Atkinson â€” Atkinson? â€” Atkinson dither algorithm to get the colours to shift

00:21:11,400 --> 00:21:18,150
across to the 15 colours that the Spectrum has which is easy-ish if you know how to copy

00:21:18,150 --> 00:21:26,760
and paste correctly â€” which is how I code! Then determine which getting rid of the other

00:21:26,760 --> 00:21:32,400
colours, and work out which bits of the Inc. And which is the paper, and then ditch the

00:21:32,400 --> 00:21:36,790
other colours to make it work, which was a little bit more complicated. I think I kept

00:21:36,790 --> 00:21:48,150
throwing code at it until I got something. So this is my Twitter avatar loading it into

00:21:48,150 --> 00:22:01,960
the page. Okay. So, my eyeball. So this is just a regular image. Then I do the dither

00:22:01,960 --> 00:22:06,831
algorithm, okay, and I've literally no idea how it works. I just literally copied and

00:22:06,831 --> 00:22:13,460
pasted and changed colours. I ended up with this. The 8x8 block has got four colours in

00:22:13,460 --> 00:22:21,790
it. I can't do four colours on a Spectrum because it will look too good. I find the

00:22:21,790 --> 00:22:27,220
two most popular colours â€” in this case, black and grey â€” and I basically absorb

00:22:27,220 --> 00:22:32,380
â€” no, I think black and red. It is going to be a fight. I absorb the other colours

00:22:32,380 --> 00:22:39,480
into those pixels, and I end up with this nightmare mask. [Laughter]. But this is the

00:22:39,480 --> 00:22:45,720
attribute mask, and in this 8x8 block I only have pitch else that are on and off and put

00:22:45,720 --> 00:22:52,960
the popular ones back in and I end up with a compatible image, and I have oldified an

00:22:52,960 --> 00:23:03,030
image. I can see this with JSConf? You can see with JSConf the attribute clash just here

00:23:03,030 --> 00:23:09,280
where you can see I've got a darker magenta, and a lighter magenta because of the white,

00:23:09,280 --> 00:23:19,360
like the bright bit makes it white. Anyway. So, I'm now able to make images old, okay?

00:23:19,360 --> 00:23:27,010
You can clap for that if you want to. You don't have to. Just saying. [Applause]. Okay,

00:23:27,010 --> 00:23:35,450
so, we're now able to make the whole of the expert awful. I can now wire this up. I can

00:23:35,450 --> 00:23:45,730
take my oldify technique, take my mobile phone, take an audio cable, in theory, plug it in

00:23:45,730 --> 00:23:54,070
my lap tap, go through the audio process, listen, load the bars, and render an old picture

00:23:54,070 --> 00:24:01,720
of all of you on my computer. That's the plan. The first time I did this, I have got the

00:24:01,720 --> 00:24:10,261
code working, and I will just plug it into the computer. Right. Turn my volume up. Turn

00:24:10,261 --> 00:24:15,490
your volume down over in the corner. Yes, it's going to be some sounds. I will turn

00:24:15,490 --> 00:24:26,961
mine down a bit. So the first time I ran it, this happened. [Broken electronic tone]. It

00:24:26,961 --> 00:24:38,790
does a weird submarine thing. And actually, unsurprisingly computers are really smart.

00:24:38,790 --> 00:24:43,760
The microphones on your phone and in your computers are designed to get rid of background

00:24:43,760 --> 00:24:51,730
noise, which is what I'm generating. So it hears the noise, and it goes, "No, no, no.

00:24:51,730 --> 00:24:59,700
We're not having that!" So, after a lot of digging around, eventually, I found the echo

00:24:59,700 --> 00:25:09,990
cancellation, so, if I listen to that. [Continuous electronic tone]. You can see that I've got

00:25:09,990 --> 00:25:15,370
a perfect sample now. With the echo cancellation turned off, I've turned off the call features

00:25:15,370 --> 00:25:25,890
in my laptop, I was able to get the awful sound working properly. Okay, so, do a little

00:25:25,890 --> 00:25:32,590
refresh. So this is my a canvas Spectrum that I made. It's really nothing more than some

00:25:32,590 --> 00:25:37,400
text and something to listen to the key. The first thing I need to do is take a photo of

00:25:37,400 --> 00:25:59,000
you. I will take a photo first. Great. Smile. Smile! Yep. Ready. On three, one, two, three.

00:25:59,000 --> 00:26:04,690
Weeey! Yes, I technology it's okay, you've got your eyes open. That's cool. I have the

00:26:04,690 --> 00:26:12,350
photo on here. I'm going to plug it into the awed Joe Jack. I have to get â€” the audio

00:26:12,350 --> 00:26:23,500
jack. From the tape, you have to do empty quotes because, I don't know, 1980s. I'm going

00:26:23,500 --> 00:26:37,470
to hit enter and then play. [Continuous electronic tone]. I also find that, sometimes, it doesn't

00:26:37,470 --> 00:26:46,420
work. I've been able to replicate bugs occasionally. This is just like I have to hope it works.

00:26:46,420 --> 00:26:53,120
[Screeching electronic sound]. Kind of looks like â€” it doesn't look like anything what

00:26:53,120 --> 00:26:59,540
my phone looks like. We have to wait for this. Debugging this, I had to listen to this over

00:26:59,540 --> 00:27:06,120
and over again! [Laughter]. You can't just fast-forward it. In fact, actually, the bit

00:27:06,120 --> 00:27:11,630
that I built is the only bit in all the emulated machines don't want to build. I built the

00:27:11,630 --> 00:27:26,100
bit that no-one wants. In real games, they skip this bit for reasons. Are you ready?

00:27:26,100 --> 00:27:49,170
This is it. [Cheering and Applause]. [Applause]. Pretty cool! I can barely recognise any of

00:27:49,170 --> 00:27:54,270
you, to be fair, but it worked, right? I know what you're thinking: I did this on a computer,

00:27:54,270 --> 00:28:00,550
right? What about an original 1982ZX Spectrum? Yes, I got it working in there as well. This

00:28:00,550 --> 00:28:07,410
is a video from home. I didn't dare bring this in. In the corner is a ZX Spectrum from

00:28:07,410 --> 00:28:16,020
1982, made in 1982, filmed today. I've got the audio jack of my laptop into it. What

00:28:16,020 --> 00:28:20,720
it is rendering on the screen is actually rendered inside the Spectrum self so I can

00:28:20,720 --> 00:28:30,450
talk really old language for no good whatsoever, but it worked on a real Spectrum 2. If anyone

00:28:30,450 --> 00:28:40,410
needs to put old images on a Spectrum, come and see me. [Cheering and Applause]. So I'm

00:28:40,410 --> 00:28:49,010
slightly over time, but the question of why: quite honestly, this comes up for myself quite

00:28:49,010 --> 00:28:54,060
often. Every few months, I have this crisis of faith, and I'm quite prepared just to chuck

00:28:54,060 --> 00:29:00,671
it all away because really there is no point to any of this in some respects. But, some

00:29:00,671 --> 00:29:05,920
of the â€” sometimes, I work this these side projects for love, like JS Bin. I love the

00:29:05,920 --> 00:29:10,560
project, but at times I hate the project, and that's not a great relationship, either.

00:29:10,560 --> 00:29:16,400
That's not the why. Other times, I've worked on side projects and it brings in client work

00:29:16,400 --> 00:29:22,140
and paid work because I work for myself. That's not normally the why, why I do these kind

00:29:22,140 --> 00:29:31,060
of things. The why is because I enjoy kind of using code to be creative for myself, and

00:29:31,060 --> 00:29:37,470
I enjoy puzzle-solving, and I enjoy learning new problems, new failings, if that makes

00:29:37,470 --> 00:29:41,560

YouTube URL: https://www.youtube.com/watch?v=o3MNdxQFUe8


