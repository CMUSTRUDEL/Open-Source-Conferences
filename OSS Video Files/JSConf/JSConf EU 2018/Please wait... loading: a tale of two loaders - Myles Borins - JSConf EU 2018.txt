Title: Please wait... loading: a tale of two loaders - Myles Borins - JSConf EU 2018
Publication date: 2018-06-27
Playlist: JSConf EU 2018
Description: 
	Modules were first standardized in ECMAScript 6 in 2015. As of December 2017 you can now use ESModules (ESM) in 3 out of 4 of the major browsers. Node.js has traditionally shipped an implementation of Common.js (CJS), you use it in your Node.js code today via require().

There are vast differences between the two module systems that make it quite difficult to utilize Common.js code in an ESModule and vice versa. Implementing modules correctly in Node.js will have a significant impact on the future of JavaScript, the wrong decisions could fause fractures in the ecosystem. This talk will dive into some of the more nefarious edge cases and the ways the Node.js project has navigated them. The talk will also look into joint efforts with the Web platform as we attempt to make a singular pattern that can work on both the client and server.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,480 --> 00:00:10,480
Hey.

00:00:10,760 --> 00:00:11,880
How are ya'll doing today?

00:00:11,880 --> 00:00:13,440
It's hot, right?

00:00:13,450 --> 00:00:18,260
So, thank you all for coming to this room and bearing the heat.

00:00:18,260 --> 00:00:19,370
Hello.

00:00:19,370 --> 00:00:22,120
So, this is a fun one.

00:00:22,120 --> 00:00:23,120
I do this a lot.

00:00:23,120 --> 00:00:24,410
If you have seen me talk before, I'm sorry.

00:00:24,410 --> 00:00:25,750
I'm going to do it again.

00:00:25,750 --> 00:00:27,810
But I kind of walk into the audience.

00:00:27,810 --> 00:00:29,500
That's not good.

00:00:29,500 --> 00:00:30,500
No.

00:00:30,500 --> 00:00:31,500
No.

00:00:31,500 --> 00:00:32,500
No.

00:00:32,500 --> 00:00:33,500
No.

00:00:33,500 --> 00:00:34,620
Okay I'll do the short version.

00:00:34,620 --> 00:00:37,960
I go like this and do this with the cat and it will calm me down.

00:00:37,960 --> 00:00:39,230
This backfired.

00:00:39,230 --> 00:00:40,949
I'm not calm.

00:00:40,949 --> 00:00:44,270
That didn't work.

00:00:44,270 --> 00:00:46,270
Improvisation is a fun thing.

00:00:46,270 --> 00:00:47,820
I'm Myles.

00:00:47,820 --> 00:00:53,840
I work for Google as a developer advocate on Cloud Platform.

00:00:53,840 --> 00:00:54,840
This little line at the bottom.

00:00:54,840 --> 00:00:57,149
This is all your talks.

00:00:57,149 --> 00:00:59,810
This is my opinion, this is not my company's.

00:00:59,810 --> 00:01:01,809
So, we're going to start with a quick glossary.

00:01:01,809 --> 00:01:04,839
I use lots of terms.

00:01:04,839 --> 00:01:11,950
ESN, ECMAScript module, CJS, common JS module.

00:01:11,950 --> 00:01:14,780
Interoperability.

00:01:14,780 --> 00:01:20,640
This is the ability to access ESN from CJS and vice versa.

00:01:20,640 --> 00:01:27,490
This is an important core concept of getting Node on the web to play nicely and move forward

00:01:27,490 --> 00:01:31,970
in a way that doesn't fracture the ecosystem.

00:01:31,970 --> 00:01:34,330
Transparent interoperability.

00:01:34,330 --> 00:01:44,240
This is a way to require ESN in CJS and import in without knowing the type of the module.

00:01:44,240 --> 00:01:51,140
The ability to use a module and then just use ESN or CJS and not have to worry about

00:01:51,140 --> 00:01:52,140
it.

00:01:52,140 --> 00:01:57,810
This is how a lot of the transpilers work, Babel or transpiler or Webpack.

00:01:57,810 --> 00:02:01,240
You don't need to know the type of module.

00:02:01,240 --> 00:02:07,200
A goal is a pairing of a top-level grammar and a top-level execution model.

00:02:07,200 --> 00:02:09,640
I'll get back to that later.

00:02:09,640 --> 00:02:14,050
Bare inputs is the ability to require a module by its name.

00:02:14,050 --> 00:02:22,270
If you do require or import_, or vice versa, to reference by the name of the module and

00:02:22,270 --> 00:02:29,740
not give the full path is referred to as a bare import.

00:02:29,740 --> 00:02:32,970
Existential dread.

00:02:32,970 --> 00:02:36,870
This is a feeling I get trying to get all this to work and thinking about this problem

00:02:36,870 --> 00:02:37,870
space.

00:02:37,870 --> 00:02:43,080
And, you know, there are a handful of existential problems we have in JavaScript, the language

00:02:43,080 --> 00:02:44,920
right now.

00:02:44,920 --> 00:02:45,920
Find me later.

00:02:45,920 --> 00:02:48,130
We can have a beer and talk about it.

00:02:48,130 --> 00:02:51,960
But how did we get to where we are today?

00:02:51,960 --> 00:02:55,870
So, who remembers ES4?

00:02:55,870 --> 00:02:57,000
It never happened.

00:02:57,000 --> 00:03:01,610
The ES4 is introduced the concept of packages.

00:03:01,610 --> 00:03:04,750
These were primarily based on C++ name spaces.

00:03:04,750 --> 00:03:10,390
And the intent was to create something similar to the Java jar system.

00:03:10,390 --> 00:03:12,310
For those who don't know the joke, ES4 never shipped.

00:03:12,310 --> 00:03:16,890
We went straight to ES5 from ES3.

00:03:16,890 --> 00:03:20,070
It was ripped out of the standards track and never seen again.

00:03:20,070 --> 00:03:24,060
All of these ES4 features just kind of vanished.

00:03:24,060 --> 00:03:26,300
Common JS was introduced.

00:03:26,300 --> 00:03:29,950
Members of TC39 worked on it, but it was never standardized.

00:03:29,950 --> 00:03:33,650
It was intended primarily for service.JS.

00:03:33,650 --> 00:03:38,810
And we'll get into it in a minute and why this is for servers and doesn't scale to the

00:03:38,810 --> 00:03:39,810
web.

00:03:39,810 --> 00:03:45,430
And NodeJS implemented a variant of the common JS spec.

00:03:45,430 --> 00:03:49,730
Who remembers AMD?

00:03:49,730 --> 00:03:51,790
Keep your hands up if you liked writing the files.

00:03:51,790 --> 00:03:52,790
It's okay.

00:03:52,790 --> 00:03:54,980
You all right put them down.

00:03:54,980 --> 00:03:57,180
But AMD wasn't specified.

00:03:57,180 --> 00:04:04,890
It was mostly implemented in require JS and it was more of a convention than a standard.

00:04:04,890 --> 00:04:10,450
And because of these things, we had a thing, UMD to package them up to not think about

00:04:10,450 --> 00:04:11,450
the modules.

00:04:11,450 --> 00:04:16,130
UMD was the transparent interop of five years ago.

00:04:16,130 --> 00:04:20,950
But ES modules landed at ECMA 2.62.

00:04:20,950 --> 00:04:23,590
We had modules and they were standardized, but they weren't anywhere.

00:04:23,590 --> 00:04:26,110
So, back to the glossary again.

00:04:26,110 --> 00:04:28,320
What's a loader?

00:04:28,320 --> 00:04:36,960
A loader is a generic term for a workflow, fetch, transform and the evaluation hook.

00:04:36,960 --> 00:04:40,480
These are the phases that happen when you try to load a module.

00:04:40,480 --> 00:04:46,600
When I reference a loader, it is an implementation that does all of these things.

00:04:46,600 --> 00:04:52,120
And this is where we get into like the first really weird thing that makes things hard.

00:04:52,120 --> 00:04:55,680
CommonJS technically doesn't have a separate loader phase.

00:04:55,680 --> 00:04:58,980
It has synchronous load and inline execution.

00:04:58,980 --> 00:05:02,660
When you run Node and start a file, it starts executing.

00:05:02,660 --> 00:05:08,100
When you hit a require, it starts executing that file and it does this synchronously.

00:05:08,100 --> 00:05:11,290
When you try to load that file off of the disk, it starts executing.

00:05:11,290 --> 00:05:14,880
And it does that through essentially the whole graph of your modules.

00:05:14,880 --> 00:05:17,410
And this is why it's not really good for the web.

00:05:17,410 --> 00:05:22,190
If you have to wait for something to go over the network, every single time you hit require,

00:05:22,190 --> 00:05:27,350
and this isn't able to be done asynchronously, you'll have a long time to wait until your

00:05:27,350 --> 00:05:28,350
first paint.

00:05:28,350 --> 00:05:29,430
Which is no good.

00:05:29,430 --> 00:05:34,560
And I said there's no step, everything just kind of happens.

00:05:34,560 --> 00:05:38,610
And this is how Babel originally implemented ESN.

00:05:38,610 --> 00:05:43,500
People from Babel, you can find them afterwards, and maybe I'm overstretching the implementation,

00:05:43,500 --> 00:05:49,750
but they took the input statements, converted them into require and then converted that

00:05:49,750 --> 00:05:52,120
into files being linked together.

00:05:52,120 --> 00:05:56,500
The original Babel loader was this in line execution.

00:05:56,500 --> 00:06:04,060
They changed to Babel when they implemented the asynchronous model that was specified.

00:06:04,060 --> 00:06:10,760
because they specify asynchronous load, and these are different phases.

00:06:10,760 --> 00:06:14,640
The module tree is figured first.

00:06:14,640 --> 00:06:19,780
They may change the guarantees.

00:06:19,780 --> 00:06:23,580
It is possible that the actual execution of your graph could become asynchronous.

00:06:23,580 --> 00:06:28,170
That's not what this talk is about.

00:06:28,170 --> 00:06:32,400
Grab me at the party, I'll tell you about this.

00:06:32,400 --> 00:06:33,400
This is the fun part.

00:06:33,400 --> 00:06:35,830
The loader is not specified.

00:06:35,830 --> 00:06:37,650
It's implemented by the embedder.

00:06:37,650 --> 00:06:41,510
The way in which it executes is specified.

00:06:41,510 --> 00:06:45,800
The way in which the graph is crawled, and everything is specified.

00:06:45,800 --> 00:06:49,600
But how you actually load all those resources is left up to the embedder.

00:06:49,600 --> 00:06:56,540
There's been attempts to specify this both at the W3C as well as the what working group.

00:06:56,540 --> 00:06:59,260
But most of the processes at this point have stalled.

00:06:59,260 --> 00:07:04,930
And it's primarily being implemented and maybe specified in the future.

00:07:04,930 --> 00:07:06,470
I mentioned that load phase.

00:07:06,470 --> 00:07:11,500
The load phase first goes and fetches all of the texts for all of the module graphs.

00:07:11,500 --> 00:07:15,260
So, it can go, it finds all the symbols and all the things it needs to load over the network

00:07:15,260 --> 00:07:18,060
and asynchronously grabs these.

00:07:18,060 --> 00:07:22,520
And that goes with a concept like H2 push.

00:07:22,520 --> 00:07:25,510
You can grab everything quickly.

00:07:25,510 --> 00:07:31,610
It resolved the specifiers within the source text and goes to the linking phase.

00:07:31,610 --> 00:07:34,930
For the linking phase, the module graph, all the files need to be in memory.

00:07:34,930 --> 00:07:40,280
After they're in memory, they executed in pre traversal order.

00:07:40,280 --> 00:07:43,960
From the top down, it's linking the entire graph.

00:07:43,960 --> 00:07:46,060
This is important when you have things like cycles.

00:07:46,060 --> 00:07:52,120
If you have modules that are referencing modules that are referencing modules it gets complicated.

00:07:52,120 --> 00:07:56,100
You don't need multiple instances.

00:07:56,100 --> 00:08:01,020
Everything in the graph is returning a singleton when you're grabbing a keyword.

00:08:01,020 --> 00:08:07,470
You import React in one file and another file, you want that same version of React because

00:08:07,470 --> 00:08:13,160
you want to register the components in the same area or things get weird.

00:08:13,160 --> 00:08:18,490
And that moves into the execution phase which requires your link to be completed and is

00:08:18,490 --> 00:08:20,250
actually done in post traversal order.

00:08:20,250 --> 00:08:24,840
It starts at the roof nodes and goes to the root node.

00:08:24,840 --> 00:08:28,330
This is an instantiation phase.

00:08:28,330 --> 00:08:33,529
You are going through the modules in the graph, loading everything up into memory, creating

00:08:33,529 --> 00:08:39,690
you will of the singletons so when you call React later, it's ready to be used.

00:08:39,690 --> 00:08:42,650
This is not something CommonJS needed to worry about.

00:08:42,650 --> 00:08:44,930
Everything is executing in line.

00:08:44,930 --> 00:08:46,980
This is where things get weird.

00:08:46,980 --> 00:08:52,250
They are not interchangeable, and it can result in different execution order.

00:08:52,250 --> 00:08:57,930
The exact same graph, defined by require and then defined by input can actually cause things

00:08:57,930 --> 00:08:59,830
to execute in a different order.

00:08:59,830 --> 00:09:06,570
And if you're relying on the order that your modules are going to execute, that can bite

00:09:06,570 --> 00:09:07,630
you.

00:09:07,630 --> 00:09:09,930
More behavior differences.

00:09:09,930 --> 00:09:13,420
The specifier resolution algorithm is also different.

00:09:13,420 --> 00:09:19,040
so, TC3 leaves it up to the hosting environment how to do specifier resolution.

00:09:19,040 --> 00:09:21,680
That's the name of the module you're loading.

00:09:21,680 --> 00:09:26,760
The specifier in the browser is a relative path to things on the disk.

00:09:26,760 --> 00:09:32,480
And in Node, this could be a combination of relative paths or a bare import as we mentioned

00:09:32,480 --> 00:09:33,480
before.

00:09:33,480 --> 00:09:38,790
So, NodeJS has a specific resolution algorithm for dealing with specifiers.

00:09:38,790 --> 00:09:42,290
We support their imports, so you can import low dash.

00:09:42,290 --> 00:09:45,210
We allow you to impart JSON.

00:09:45,210 --> 00:09:47,300
You can drop the file extension.

00:09:47,300 --> 00:09:51,560
You can import a file with no extension and import a directory.

00:09:51,560 --> 00:09:53,000
Those are nice.

00:09:53,000 --> 00:09:59,170
You can name a fail capability and then that can turn into a directory with all sorts of

00:09:59,170 --> 00:10:03,779
things in it later without you ever having to refactor your code.

00:10:03,779 --> 00:10:07,190
But this isn't exactly how things work on the web.

00:10:07,190 --> 00:10:09,460
The web doesn't support bare imports.

00:10:09,460 --> 00:10:13,970
Currently the web only supports those paths.

00:10:13,970 --> 00:10:17,589
You can only specify either absolute or indirect paths.

00:10:17,589 --> 00:10:24,120
If you had a module for Node, it's going to blow up not browser.

00:10:24,120 --> 00:10:31,220
There's a proposal, package name maps, to allow a lookup process to find the bare imports

00:10:31,220 --> 00:10:32,560
in the tree.

00:10:32,560 --> 00:10:36,690
But it has a slightly different feature set than Nodes model.

00:10:36,690 --> 00:10:42,690
Specifically, you can do bare imports bub you can also do deep module traversal by file

00:10:42,690 --> 00:10:43,690
name.

00:10:43,690 --> 00:10:48,130
The name of the file, slash, and a name of the file deep in the tree.

00:10:48,130 --> 00:10:53,800
But you can't import directories and you have to give the file extension.

00:10:53,800 --> 00:10:59,380
The reason is you don't want to be doing multiple network calls for all modules.

00:10:59,380 --> 00:11:01,330
In Node, this is fine, arguably.

00:11:01,330 --> 00:11:03,230
It can be a problem.

00:11:03,230 --> 00:11:07,360
If you import a thing without a file extension, check, is it JS?

00:11:07,360 --> 00:11:08,690
A native module?

00:11:08,690 --> 00:11:09,690
JSON?

00:11:09,690 --> 00:11:10,690
This thing?

00:11:10,690 --> 00:11:14,630
Maybe checking four or five different file extensions.

00:11:14,630 --> 00:11:16,480
Those hits are cheap.

00:11:16,480 --> 00:11:18,310
But not in the browser.

00:11:18,310 --> 00:11:25,470
You don't want every module making seven or eight network requests and going to the server

00:11:25,470 --> 00:11:29,490
to respond and handling it 404s.

00:11:29,490 --> 00:11:35,810
So, this kind of explicitness is necessary.

00:11:35,810 --> 00:11:37,750
More behavior differences.

00:11:37,750 --> 00:11:40,980
The code actually executes differently too.

00:11:40,980 --> 00:11:43,660
So, we were talking about this before.

00:11:43,660 --> 00:11:48,190
And ESN CommonJS run in different goals.

00:11:48,190 --> 00:11:52,020
It was a mix of two different things and kind of confusing.

00:11:52,020 --> 00:11:53,020
Let's dig into it.

00:11:53,020 --> 00:11:54,050
There's four types of goals.

00:11:54,050 --> 00:12:00,220
You have script slip, script sloppy, ES module and NodeJS.

00:12:00,220 --> 00:12:05,480
You can see the goal, the combination of a grammar and an execution mode.

00:12:05,480 --> 00:12:13,930
Talking about a top level mode, it's strict mode versus sloppy mode.

00:12:13,930 --> 00:12:17,960
What symbol organize APIs, what is exposed by the language?

00:12:17,960 --> 00:12:22,441
Strict versus sloppy is denoted by a pragma, strict.

00:12:22,441 --> 00:12:29,529
Best practice five years ago and it still is and removes capabilities from the language.

00:12:29,529 --> 00:12:31,160
We don't want to break the language.

00:12:31,160 --> 00:12:36,870
We don't to want change the way things work.

00:12:36,870 --> 00:12:38,940
You can do it explicitly and it was often.

00:12:38,940 --> 00:12:43,690
So, the chance of breaking things on the web before was really low.

00:12:43,690 --> 00:12:50,790
Now, the module goal, which was different from both the strict and sloppy goal has different

00:12:50,790 --> 00:12:52,500
changes.

00:12:52,500 --> 00:12:54,760
You can't use HTML comments.

00:12:54,760 --> 00:12:58,940
Who can actually use HTML comments in JavaScript?

00:12:58,940 --> 00:13:00,790
So, you should change that.

00:13:00,790 --> 00:13:02,670
Or it's going to break when you make modules.

00:13:02,670 --> 00:13:05,240
A rate is a reserved keyword.

00:13:05,240 --> 00:13:09,600
This was done by the committee to make sure that the top level was something that could

00:13:09,600 --> 00:13:11,570
happen.

00:13:11,570 --> 00:13:15,570
And it may change over time.

00:13:15,570 --> 00:13:22,370
That await keyword thing makes it hard to use, you know, the any variable that's names

00:13:22,370 --> 00:13:23,370
await.

00:13:23,370 --> 00:13:24,899
It's not allowed anymore.

00:13:24,899 --> 00:13:28,100
So, this is one of the really hard parts, though.

00:13:28,100 --> 00:13:31,930
ES modules don't have an in source way of determining the goal.

00:13:31,930 --> 00:13:33,190
Strict mode did.

00:13:33,190 --> 00:13:35,210
You had a pragma.

00:13:35,210 --> 00:13:38,060
These are just code, there is no pragma.

00:13:38,060 --> 00:13:39,830
The committee decided not to use a pragma.

00:13:39,830 --> 00:13:41,220
It's a new goal.

00:13:41,220 --> 00:13:42,620
It's a new thing.

00:13:42,620 --> 00:13:46,350
It's not progressive enhancement or de enhancement.

00:13:46,350 --> 00:13:49,290
It's its own thing.

00:13:49,290 --> 00:13:52,480
And you're using the browser and using the type equals module.

00:13:52,480 --> 00:13:54,870
There's no need to have the pragma.

00:13:54,870 --> 00:13:59,029
In Node, we have no way of really knowing.

00:13:59,029 --> 00:14:03,490
And there's also more goals that may be coming in the future that are in the standards track.

00:14:03,490 --> 00:14:10,990
This includes binary AST, Clarke in the audience who is driving it that you can import Rosen.

00:14:10,990 --> 00:14:13,830
That's ridiculously cool.

00:14:13,830 --> 00:14:15,500
Web packages.

00:14:15,500 --> 00:14:19,100
If you haven't heard, that's cool.

00:14:19,100 --> 00:14:22,120
Bundlers work because you make a giant script.

00:14:22,120 --> 00:14:24,430
But not for modules.

00:14:24,430 --> 00:14:28,190
Because you can't just make a script with multiple modules in it.

00:14:28,190 --> 00:14:32,589
So, web package is one approach that would allow you to bundle modules all together in

00:14:32,589 --> 00:14:34,650
a way that could be understood by the browser.

00:14:34,650 --> 00:14:41,420
And modules, another one that's nice to have if you're, you know, doing modern web Dev.

00:14:41,420 --> 00:14:45,350
JSX has a lot of this kind of inline ability to make modules.

00:14:45,350 --> 00:14:48,399
So, we have to pave the cow path.

00:14:48,399 --> 00:14:54,670
We have to think, not just how do we make ESN and CJN work together, we have to think

00:14:54,670 --> 00:15:00,940
about a solution that works for any number of infinite possible future goals.

00:15:00,940 --> 00:15:01,940
And this is hard.

00:15:01,940 --> 00:15:04,850
Especially thinking about interoperability.

00:15:04,850 --> 00:15:12,210
If we're loading in Node, it's not the best way of doing it.

00:15:12,210 --> 00:15:15,190
You can't export the things on that symbol.

00:15:15,190 --> 00:15:16,520
But you can require ESN.

00:15:16,520 --> 00:15:20,709
It is because it has an asynchronous loader.

00:15:20,709 --> 00:15:23,190
Grab me later and we can talk about the inconsistencies there.

00:15:23,190 --> 00:15:26,640
You can Google it's called zebra striping.

00:15:26,640 --> 00:15:32,030
But moving from async to sync and back to async, things get weird.

00:15:32,030 --> 00:15:35,529
There's a lot of different ways to do this.

00:15:35,529 --> 00:15:39,870
For Node's core modules, you can impart from FS.

00:15:39,870 --> 00:15:42,720
And as of 10.2, it's released about two weeks ago.

00:15:42,720 --> 00:15:45,890
You can do named exports from core modules.

00:15:45,890 --> 00:15:48,730
But core modules in Node have an advantage.

00:15:48,730 --> 00:15:53,180
Because Node is compiled, and we can do all sorts of things in advance for it.

00:15:53,180 --> 00:15:58,950
And if we allow it to import from CJS in the ESN implementation, but not with named imports,

00:15:58,950 --> 00:16:00,769
you only get the defaults.

00:16:00,769 --> 00:16:03,600
And this capability makes it a little bit more difficult.

00:16:03,600 --> 00:16:09,019
The idea is not having to know the difference between the type was modules.

00:16:09,019 --> 00:16:11,240
But you kind of do because you only have a default.

00:16:11,240 --> 00:16:15,410
And this is one of the things that we're still trying to work out.

00:16:15,410 --> 00:16:18,100
Import meta require, something we're talking about doing.

00:16:18,100 --> 00:16:22,480
Import meta is the ability to put I'll talk about it in a second.

00:16:22,480 --> 00:16:28,250
But import meta require would allow you to require C JS into ESN without having to worry

00:16:28,250 --> 00:16:30,440
about transparent interop.

00:16:30,440 --> 00:16:37,529
ESN does not have a way to include lexically scoped variables.

00:16:37,529 --> 00:16:41,370
It has lexically scoped variables.

00:16:41,370 --> 00:16:46,589
And I start listing them and all of a sudden it makes sense what a lexically scoped variable

00:16:46,589 --> 00:16:47,589
is.

00:16:47,589 --> 00:16:53,220
In Node, they're on Lamdba, and you inject into the scope of the model.

00:16:53,220 --> 00:16:56,220
These are not globals, they're specific to the module.

00:16:56,220 --> 00:17:02,180
The specific file name, a shared instance of require and the module that's exposed.

00:17:02,180 --> 00:17:06,789
All of these things are things that we inject from, but ESN doesn't have that.

00:17:06,789 --> 00:17:08,149
This is where import meta came in.

00:17:08,149 --> 00:17:09,850
It's stage 3 at TC39.

00:17:09,850 --> 00:17:11,789
A proposal by Dominik.

00:17:11,789 --> 00:17:17,889
And allows run time to inject variables into the module.

00:17:17,889 --> 00:17:23,909
Inside of your module, you can say import meta URL and that's a place for the file name.

00:17:23,909 --> 00:17:27,669
And that's somewhere you can hang your file, for example, to have essentially have a back

00:17:27,669 --> 00:17:47,100
door to allow you to get the CJS modules in without

00:17:47,100 --> 00:17:49,909
a transparent interop.

00:17:49,909 --> 00:17:58,119
[skype breaking up] ESN file, file extension.

00:17:58,119 --> 00:17:59,720
We're going to need that no matter what.

00:17:59,720 --> 00:18:07,999
Even if we allow JS the ability to do a solution to say, hey, this says that the ES module

00:18:07,999 --> 00:18:08,999
is necessary.

00:18:08,999 --> 00:18:14,049
Even if you just say Node, thing.JS.

00:18:14,049 --> 00:18:20,009
That's the way you are able to boot into an ES module.

00:18:20,009 --> 00:18:28,009
We have support for and support for transparent interop and ESN, but no support for transparent

00:18:28,009 --> 00:18:29,230
interop in JS.

00:18:29,230 --> 00:18:32,590
With the async loader, it's currently not possible.

00:18:32,590 --> 00:18:38,499
But we're exploring options in a way this would actually work.

00:18:38,499 --> 00:18:43,279
And we have support for dynamic import in both ESM and CJS.

00:18:43,279 --> 00:18:47,070
You name a module, it returns to a promise to resolve that.

00:18:47,070 --> 00:18:50,809
Top level will make this really great in ESN.

00:18:50,809 --> 00:18:54,019
But currently the top level await spec is not targeting the script goal.

00:18:54,019 --> 00:18:57,019
It's not an enhancement that is available?

00:18:57,019 --> 00:18:58,019
CJS.

00:18:58,019 --> 00:18:59,820
We have support for import meta.

00:18:59,820 --> 00:19:03,990
But currently only exposing import meta URL.

00:19:03,990 --> 00:19:07,590
And some of the decisions have made some people grumpy.

00:19:07,590 --> 00:19:13,139
And in response, we spun up a NodeJS modules team.

00:19:13,139 --> 00:19:17,309
We made it open and 42 members signed up in the first week.

00:19:17,309 --> 00:19:23,070
This included representation from at least ten countries including Canada, China, Germany,

00:19:23,070 --> 00:19:27,649
Israel, Italy, Japan, Nigeria, the United Kingdom and South Africa.

00:19:27,649 --> 00:19:30,200
And the U.S.

00:19:30,200 --> 00:19:34,779
We have representation from ten corporate organizations including Airbnb, Bloomberg,

00:19:34,779 --> 00:19:41,169
GoDaddy, Google, Groupon, IBM, Microsoft, Mozilla and nearform.

00:19:41,169 --> 00:19:43,929
And Node source.

00:19:43,929 --> 00:19:45,419
I'm off by one in all of these.

00:19:45,419 --> 00:19:50,179
It's a big problem in technology.

00:19:50,179 --> 00:19:56,619
14 programming platforms you know, Angular, Babel, Bloomberg, jQuery, JSPM.

00:19:56,619 --> 00:20:10,220
Lo Dash, tap JS, V8 and Webpack.

00:20:10,220 --> 00:20:13,529
But as you can see, we've got a lot of people who are working on all the tools that we're

00:20:13,529 --> 00:20:16,279
using trying to work towards consensus.

00:20:16,279 --> 00:20:18,269
Trying to make sure that this is happening.

00:20:18,269 --> 00:20:21,499
And we have representation from three of the standards bodies.

00:20:21,499 --> 00:20:27,100
We have people at TC39, the working group and people at W3C.

00:20:27,100 --> 00:20:28,239
This one was really easy.

00:20:28,239 --> 00:20:30,830
There's only three of them.

00:20:30,830 --> 00:20:32,669
But we're all really hard at work on this problem.

00:20:32,669 --> 00:20:35,000
This is a really, really hard problem.

00:20:35,000 --> 00:20:38,860
And doing it right is this kind of existential thing.

00:20:38,860 --> 00:20:46,340
If we do it wrong, we could create this like irreconcilable like schism in the community.

00:20:46,340 --> 00:20:50,169
And we all take this really, really, really seriously.

00:20:50,169 --> 00:20:55,799
And I know that probably every single person in this room is worried about this being done

00:20:55,799 --> 00:20:56,799
right.

00:20:56,799 --> 00:21:00,679
And the whole purpose of this talk, I was hoping to kind of just show under the hood

00:21:00,679 --> 00:21:05,100
a little bit of like all the things that make this really hard and really weird and really

00:21:05,100 --> 00:21:06,100
tough.

00:21:06,100 --> 00:21:11,341
But I wanted to reinforce to all of you that like all those people, all those 42 people

00:21:11,341 --> 00:21:16,440
from all those companies, all those fronts, and all those standards bodies, we are pull

00:21:16,440 --> 00:21:17,440
our hair out.

00:21:17,440 --> 00:21:18,679
We are working really hard.

00:21:18,679 --> 00:21:21,769
Biweekly meetings, giant threads.

00:21:21,769 --> 00:21:23,700
You can't even keep up.

00:21:23,700 --> 00:21:29,390
Trying to bash out a solution so that you can just keep writing code and not have to

00:21:29,390 --> 00:21:31,179
worry about this.

00:21:31,179 --> 00:21:36,730
And I really, you know, in the next year, year and a half we'll be able to ship something.

00:21:36,730 --> 00:21:43,539
My dream is that you can npm install something and run in the browser or Node without the

00:21:43,539 --> 00:21:44,559
build step.

00:21:44,559 --> 00:21:48,149
Which would be in my opinion absolutely amazing.

00:21:48,149 --> 00:21:50,330
And with that, here's a surf dog.

00:21:50,330 --> 00:21:51,330
Thank you very much.

00:21:51,330 --> 00:21:51,830

YouTube URL: https://www.youtube.com/watch?v=35ZMoH8T-gc


