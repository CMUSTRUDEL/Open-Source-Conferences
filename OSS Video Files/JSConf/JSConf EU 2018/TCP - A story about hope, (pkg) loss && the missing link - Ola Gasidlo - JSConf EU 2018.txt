Title: TCP - A story about hope, (pkg) loss && the missing link - Ola Gasidlo - JSConf EU 2018
Publication date: 2018-06-20
Playlist: JSConf EU 2018
Description: 
	Have you ever wondered, who is delivering those packages everyone on the network is talking about and what they are? Why does the internet even get chopped in little packages and send all across the globe? Donâ€™t they get lost? And do those which get lost ever find their way home?

As performance gets more and more important these days, lets step back from all of the optimization of the code and take a close look at what lies underneath.

This talk will cover everything you need to know about the link layer wrapped nicely with a golden bow.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,140 --> 00:00:12,340
Lets have huge round of applause for Ola

00:00:17,620 --> 00:00:18,340
Oh, boy.

00:00:20,020 --> 00:00:20,920
Thank you so much.

00:00:20,920 --> 00:00:22,080
You are amazing.

00:00:27,460 --> 00:00:28,060
Come on, okay.

00:00:28,320 --> 00:00:32,599
Welcome to like the very last talk of the side track of 2018.

00:00:32,599 --> 00:00:37,760
Who has enjoyed the conference so far?

00:00:37,760 --> 00:00:39,170
Right?

00:00:39,170 --> 00:00:41,780
Who lost their voice?

00:00:41,780 --> 00:00:42,809
Nice.

00:00:42,809 --> 00:00:47,100
And if you need medicine.

00:00:47,100 --> 00:00:49,239
So, my name is Ola.

00:00:49,239 --> 00:00:50,829
I'm an engineer at Mozilla.

00:00:50,829 --> 00:00:51,860
You might have heard.

00:00:51,860 --> 00:00:58,449
I do mostly performance, compatibility, specs, CSS, JavaScript, just the cool stuff.

00:00:58,449 --> 00:01:02,100
Today we are going understand how TCP works.

00:01:02,100 --> 00:01:03,100
Surprise.

00:01:03,100 --> 00:01:06,909
It's delivered in the packages that everyone is talking about, how it is.

00:01:06,909 --> 00:01:12,479
And maybe we learn what happens to the ones that are lost.

00:01:12,479 --> 00:01:13,479
Okay.

00:01:13,479 --> 00:01:14,560
Let's jump right back in.

00:01:14,560 --> 00:01:18,770
Let's take a look at Internet protocol family.

00:01:18,770 --> 00:01:22,420
You might recognize one or two of them.

00:01:22,420 --> 00:01:26,710
And it has just a very few memories like it's fine.

00:01:26,710 --> 00:01:30,520
So, those you see here are probably the most common.

00:01:30,520 --> 00:01:41,430
Do you recognize any like HTP, STP, SMTP, and when you're as old as I am they're cool.

00:01:41,430 --> 00:01:48,689
And there are also different models that group them together to make the roles kind of more

00:01:48,689 --> 00:01:49,950
understandable.

00:01:49,950 --> 00:01:54,360
This works on the model which groups the protocols in seven layers.

00:01:54,360 --> 00:01:58,960
It groups the protocols in different layers for the interactive network layer, application

00:01:58,960 --> 00:02:02,350
layer, totally makes sense, right?

00:02:02,350 --> 00:02:05,869
And the most important one, the eighth layer.

00:02:05,869 --> 00:02:10,290
Everyone forgets, but it's the hardest?

00:02:10,290 --> 00:02:12,780
People.

00:02:12,780 --> 00:02:14,790
There's also the DOD layer model.

00:02:14,790 --> 00:02:18,590
It stands for Department of Defense because they developed them.

00:02:18,590 --> 00:02:24,970
Four layers, but it's kind of the most common in our daily architecture.

00:02:24,970 --> 00:02:28,470
The groups of protocols are in a little bit different way.

00:02:28,470 --> 00:02:30,950
You can see the relations in the graphics.

00:02:30,950 --> 00:02:34,470
And the relationship model is there.

00:02:34,470 --> 00:02:37,630
The DOD layer model is also called the TCP/IP model.

00:02:37,630 --> 00:02:42,830
They are both the foundational protocols.

00:02:42,830 --> 00:02:45,940
So what do they even do?

00:02:45,940 --> 00:02:47,740
I don't know.

00:02:47,740 --> 00:02:49,280
So, what are those?

00:02:49,280 --> 00:02:53,370
IP is short for Internet protocol.

00:02:53,370 --> 00:02:58,230
It's here to give the sender and receiver kind of numbers so the packages know where

00:02:58,230 --> 00:03:01,930
they're coming from and where to go.

00:03:01,930 --> 00:03:02,930
Like this one.

00:03:02,930 --> 00:03:08,490
We could also go with names like bar, school, park.

00:03:08,490 --> 00:03:11,110
But computers are not that good with words.

00:03:11,110 --> 00:03:14,070
So, we stick with numbers.

00:03:14,070 --> 00:03:18,520
Another thing it does is actually to check for like the closest router to forward the

00:03:18,520 --> 00:03:19,520
data to.

00:03:19,520 --> 00:03:22,410
You have a package, you're like, you!

00:03:22,410 --> 00:03:23,410
Catch.

00:03:23,410 --> 00:03:24,440
And we'll be fine.

00:03:24,440 --> 00:03:29,340
TCP is short for transmission control protocol.

00:03:29,340 --> 00:03:34,030
As the physical network, surprise, it's kind of not reliable.

00:03:34,030 --> 00:03:36,610
This protocol is taking care of the transmissions of the data.

00:03:36,610 --> 00:03:40,170
So, it creates a reliable network for you.

00:03:40,170 --> 00:03:44,400
Makes sure everything gets from one point to another.

00:03:44,400 --> 00:03:49,620
Especially with something so wibbly and wobbly like the physical network, it's good to have.

00:03:49,620 --> 00:03:54,150
At least the sharks stopped chewing on the under sea fiber cables.

00:03:54,150 --> 00:03:56,590
That's a good thing.

00:03:56,590 --> 00:03:59,760
What does TCP do?

00:03:59,760 --> 00:04:03,780
Make sure your data arrives in a specific order.

00:04:03,780 --> 00:04:08,140
Make sure your data has like minimal errors so it's actually correct.

00:04:08,140 --> 00:04:12,650
Make the data, scale it.

00:04:12,650 --> 00:04:16,440
Make sure lost packages are resent.

00:04:16,440 --> 00:04:18,370
And protects the network from being overloaded.

00:04:18,370 --> 00:04:20,680
We'll get to that later.

00:04:20,680 --> 00:04:21,720
What it does not do?

00:04:21,720 --> 00:04:26,560
It just doesn't care who is sending and receiving, kind of.

00:04:26,560 --> 00:04:30,770
It's just this cute little bear which is like, yay!

00:04:30,770 --> 00:04:31,770
Package.

00:04:31,770 --> 00:04:37,460
[ Laughter ] So, do you understand the roles?

00:04:37,460 --> 00:04:39,530
Yes?

00:04:39,530 --> 00:04:40,530
It's late.

00:04:40,530 --> 00:04:41,530
Wake up.

00:04:41,530 --> 00:04:42,530
Yes!

00:04:42,530 --> 00:04:43,530
Woohoo!

00:04:43,530 --> 00:04:44,530
I like that.

00:04:44,530 --> 00:04:45,530
That's really good.

00:04:45,530 --> 00:04:46,940
So, we get to the next point.

00:04:46,940 --> 00:04:47,940
Packages.

00:04:47,940 --> 00:04:51,050
I'm going to tell a story, make things easier.

00:04:51,050 --> 00:04:54,150
So, imagine, your friend is sick.

00:04:54,150 --> 00:04:56,310
Mm shit happens.

00:04:56,310 --> 00:04:58,230
This is a good friend.

00:04:58,230 --> 00:05:01,460
So, you want to borrow their book because you like to read.

00:05:01,460 --> 00:05:02,500
This is a book.

00:05:02,500 --> 00:05:09,090
And you can't go there, and your roommate will just basically grab this book and bring

00:05:09,090 --> 00:05:10,090
it there.

00:05:10,090 --> 00:05:11,760
So, this is what they do.

00:05:11,760 --> 00:05:14,900
The roommate takes the book, bikes over.

00:05:14,900 --> 00:05:16,540
Your friend is super happy.

00:05:16,540 --> 00:05:17,610
They come back.

00:05:17,610 --> 00:05:18,610
Congratulations!

00:05:18,610 --> 00:05:20,630
You just delivered a package.

00:05:20,630 --> 00:05:22,280
Okay, okay.

00:05:22,280 --> 00:05:24,470
But your friend is like really sick.

00:05:24,470 --> 00:05:28,120
Like uhchg you don't to want go there.

00:05:28,120 --> 00:05:30,670
So, your room rate is really cool.

00:05:30,670 --> 00:05:36,460
And you decide just to put together like a small package to make them feel better.

00:05:36,460 --> 00:05:40,080
You grab some tea and candy and cookies.

00:05:40,080 --> 00:05:42,940
So, sort it into three boxes.

00:05:42,940 --> 00:05:51,860
Those you bought at Ikea ten years ago in the back of your cupboards, right?

00:05:51,860 --> 00:05:58,460
And your friend is really sick and might forget they got three and which one is that's fine.

00:05:58,460 --> 00:06:01,320
Your roommate grabs them, bikes over.

00:06:01,320 --> 00:06:05,450
Your friend is like, that's so nice of you, thank you.

00:06:05,450 --> 00:06:07,190
Puts in a small note for you.

00:06:07,190 --> 00:06:08,490
Comes back.

00:06:08,490 --> 00:06:10,710
Sounds reasonable?

00:06:10,710 --> 00:06:11,820
Right?

00:06:11,820 --> 00:06:14,639
You just understood how a round trip works.

00:06:14,639 --> 00:06:15,940
Good job.

00:06:15,940 --> 00:06:23,340
So, those packages are nothing else than boxes that contain like candy, tea, cookies.

00:06:23,340 --> 00:06:26,260
But, well, data.

00:06:26,260 --> 00:06:27,260
Whatever.

00:06:27,260 --> 00:06:30,410
Their focus is just basically to group the bytes.

00:06:30,410 --> 00:06:34,730
And every box is a number so you know the order and especially if all of them arrived.

00:06:34,730 --> 00:06:35,740
That's cool.

00:06:35,740 --> 00:06:36,740
Okay.

00:06:36,740 --> 00:06:37,740
We got that now.

00:06:37,740 --> 00:06:43,290
So, now the most important and biggest part we need to try to understand how actually

00:06:43,290 --> 00:06:45,560
the transfer works.

00:06:45,560 --> 00:06:50,539
And explaining this with data is kind of boring, right?

00:06:50,539 --> 00:06:51,840
>> Yeah.

00:06:51,840 --> 00:06:55,740
[ Laughter ] So boring.

00:06:55,740 --> 00:06:58,810
OLA: Who likes pancakes?

00:06:58,810 --> 00:07:01,370
Raise your hand!

00:07:01,370 --> 00:07:02,920
Pancakes everyone loves pancakes.

00:07:02,920 --> 00:07:08,680
They can't be split up in small units, you can slap stuff on it, whatever you want.

00:07:08,680 --> 00:07:09,820
It's amazing.

00:07:09,820 --> 00:07:13,620
They can stay in the boxes and fresh.

00:07:13,620 --> 00:07:16,260
So, let's stick with pancakes.

00:07:16,260 --> 00:07:21,930
Every transfer starts with a so called three way handshake.

00:07:21,930 --> 00:07:29,040
The three way handshake is here to make sure both sides are like the correct ones and that

00:07:29,040 --> 00:07:32,320
the file transfer actually happens.

00:07:32,320 --> 00:07:35,560
This is how a three way handshake looks like.

00:07:35,560 --> 00:07:36,860
Might remember from school.

00:07:36,860 --> 00:07:43,760
We have a sender, receiver, things happen, people get scared.

00:07:43,760 --> 00:07:46,229
It's correct, but I don't like that much.

00:07:46,229 --> 00:07:48,970
So, I was in a playground the other day.

00:07:48,970 --> 00:07:51,210
I was reading this really good book.

00:07:51,210 --> 00:07:53,430
I do read a lot.

00:07:53,430 --> 00:07:57,960
And my 6 year old was like, what are you reading?

00:07:57,960 --> 00:07:58,960
TCP.

00:07:58,960 --> 00:07:59,960
Triple handshake.

00:07:59,960 --> 00:08:00,960
Explain it to me.

00:08:00,960 --> 00:08:02,060
I did.

00:08:02,060 --> 00:08:04,560
She's like, mom, this is easy.

00:08:04,560 --> 00:08:07,840
I'm going to build a port now.

00:08:07,840 --> 00:08:10,190
I want to make you feel the same way.

00:08:10,190 --> 00:08:11,190
We'll get there.

00:08:11,190 --> 00:08:13,669
So, let's translate this in human.

00:08:13,669 --> 00:08:18,580
So, let's meet our sender and receiver.

00:08:18,580 --> 00:08:19,860
This is Stephan.

00:08:19,860 --> 00:08:27,110
He's an engineer who loves biking and cooking for others.

00:08:27,110 --> 00:08:28,220
This is Dominik.

00:08:28,220 --> 00:08:35,079
Also an engineer who likes to travel and because we travels so much, home cooked meals.

00:08:35,079 --> 00:08:41,669
Both of them have other things in common like speaking at conferences, wearing onesies.

00:08:41,669 --> 00:08:45,610
And especially, surprise!

00:08:45,610 --> 00:08:47,410
Right?

00:08:47,410 --> 00:08:49,209
Okay.

00:08:49,209 --> 00:08:55,050
So, imagine, Stephan [ Laughter ]

00:08:55,050 --> 00:08:58,600
Stephan has made some pancakes.

00:08:58,600 --> 00:09:00,290
Dominik wants some.

00:09:00,290 --> 00:09:06,990
But they both really want to be sure that the transfer works because Henri is not anyone

00:09:06,990 --> 00:09:08,839
they want to speak to.

00:09:08,839 --> 00:09:10,760
That's the neighbor.

00:09:10,760 --> 00:09:17,339
And the pancakes arrive at the correct destination through a handshake.

00:09:17,339 --> 00:09:22,809
Stephan picks a random number, 23 it is.

00:09:22,809 --> 00:09:25,339
Writes it on a piece of paper.

00:09:25,339 --> 00:09:27,779
This is called a sync.

00:09:27,779 --> 00:09:30,649
A request to synchronize.

00:09:30,649 --> 00:09:34,180
Dominik takes a look at the note.

00:09:34,180 --> 00:09:38,040
Performs the ack, which stands for acknowledgment.

00:09:38,040 --> 00:09:43,019
He adds the number 1.

00:09:43,019 --> 00:09:47,540
To let Stephan know that he received the note, he thinks about number 2, but pancakes.

00:09:47,540 --> 00:09:48,540
And it's hard.

00:09:48,540 --> 00:09:49,540
He gets there.

00:09:49,540 --> 00:09:52,089
He takes seven.

00:09:52,089 --> 00:09:58,360
He sends that out, note goes back to Stephan and he performs the ack.

00:09:58,360 --> 00:10:01,540
That's one to Dominik's number.

00:10:01,540 --> 00:10:04,529
And we're good to send those pancakes.

00:10:04,529 --> 00:10:05,529
Nom, nom.

00:10:05,529 --> 00:10:11,199
And these notes, they're not just love notes, they're the TCP headers.

00:10:11,199 --> 00:10:15,949
They contain all the information that the TCP package needs.

00:10:15,949 --> 00:10:19,959
This is how they look in real life.

00:10:19,959 --> 00:10:22,209
Naw.

00:10:22,209 --> 00:10:24,459
Yeah.

00:10:24,459 --> 00:10:26,319
Let's see this.

00:10:26,319 --> 00:10:27,319
Cool.

00:10:27,319 --> 00:10:35,470
Let's take a look at the TCP headers the moment Dominik sends it back to Stephan, right?

00:10:35,470 --> 00:10:41,230
The same support is Dominik, destination support, Stephan.

00:10:41,230 --> 00:10:44,709
Dominik's random number was 7.

00:10:44,709 --> 00:10:47,560
The sequence number is also 7.

00:10:47,560 --> 00:10:54,829
When data was transferred the length of the data in bit would have been added to that

00:10:54,829 --> 00:10:56,470
number, to the sequence number.

00:10:56,470 --> 00:10:57,470
But we didn't.

00:10:57,470 --> 00:11:00,040
We did just a handshake, so, it saves the 7.

00:11:00,040 --> 00:11:07,059
7 and 23, we got an ack, plus 21, acknowledge number.

00:11:07,059 --> 00:11:14,420
And the next dataset which pins down exactly where the TCP header ends and the package

00:11:14,420 --> 00:11:15,420
starts.

00:11:15,420 --> 00:11:25,950
Reserve means 3 bits for new and just the sum of it next to it already like sim, ack.

00:11:25,950 --> 00:11:31,540
It contains the size of the data the sender or receiver can handle.

00:11:31,540 --> 00:11:35,059
So, the size of a pancake batch.

00:11:35,059 --> 00:11:40,519
Depending on the direction, it's either the one from the receiver or the sender.

00:11:40,519 --> 00:11:41,519
Right?

00:11:41,519 --> 00:11:44,019
So, we get back to that later.

00:11:44,019 --> 00:11:50,060
Check for a minimum possible security effort.

00:11:50,060 --> 00:11:51,060
Urgent pointers.

00:11:51,060 --> 00:11:54,170
Possibility to say, hey, that package is more important than the others.

00:11:54,170 --> 00:11:55,899
Fast forward.

00:11:55,899 --> 00:11:57,119
Hint?

00:11:57,119 --> 00:11:58,339
Don't.

00:11:58,339 --> 00:12:01,129
Options like, details, urgent and other things.

00:12:01,129 --> 00:12:02,239
Options are good.

00:12:02,239 --> 00:12:03,879
We like to have options.

00:12:03,879 --> 00:12:07,839
So, it's a great performance improvement.

00:12:07,839 --> 00:12:12,660
We assume 23 32 bits.

00:12:12,660 --> 00:12:15,879
And if the header doesn't fill up.

00:12:15,879 --> 00:12:22,290
The cool thing is we don't have to calculate bit by bit by bit, just by steps.

00:12:22,290 --> 00:12:25,309
And that helps.

00:12:25,309 --> 00:12:27,269
Data with pancakes, right?

00:12:27,269 --> 00:12:32,759
That's the blue ones you see here we talked about already.

00:12:32,759 --> 00:12:35,129
The yellow ones we'll take a closer look at.

00:12:35,129 --> 00:12:38,290
So, pancakes and size of the batch.

00:12:38,290 --> 00:12:41,199
And the green ones are a little bit more advanced.

00:12:41,199 --> 00:12:45,170
Very interesting, but we're not going to do this today.

00:12:45,170 --> 00:12:51,350
So, you might have noticed Stephan and Dominik.

00:12:51,350 --> 00:12:53,699
Say hello!

00:12:53,699 --> 00:12:56,059
[ Applause ] Right?

00:12:56,059 --> 00:12:57,230
Hi.

00:12:57,230 --> 00:13:04,740
So, as I mentioned, Dominik is hungry.

00:13:04,740 --> 00:13:09,610
[ Laughter ] How would you feel about if we actually fed

00:13:09,610 --> 00:13:12,059
him pancakes?

00:13:12,059 --> 00:13:14,500
Like here and now?

00:13:14,500 --> 00:13:16,300
I mean, I'm a parent.

00:13:16,300 --> 00:13:20,689
I always have a fresh batch of pancakes in my bag.

00:13:20,689 --> 00:13:21,689
But okay.

00:13:21,689 --> 00:13:28,660
Before this, we really want to make sure he does not overeat and get sick.

00:13:28,660 --> 00:13:34,740
This is why we need to check how many pancakes he can actually eat without getting sick.

00:13:34,740 --> 00:13:38,860
And TCP, this mechanism is called flow control.

00:13:38,860 --> 00:13:44,920
It's here to prevent the sender from overwhelming the receiver with pancakes.

00:13:44,920 --> 00:13:49,709
Possible reasons are Dominik is busy right now with getting some cutlery, right?

00:13:49,709 --> 00:13:51,639
Or [ Laughter ]

00:13:51,639 --> 00:13:55,500
He got some cutlery.

00:13:55,500 --> 00:13:57,430
That's amazing.

00:13:57,430 --> 00:14:07,600
It's a heavy load because I'm scared he's receiving some berries and maple syrup and

00:14:07,600 --> 00:14:09,679
maybe some bacon from someone.

00:14:09,679 --> 00:14:10,899
I don't know.

00:14:10,899 --> 00:14:14,139
And another transfer.

00:14:14,139 --> 00:14:25,809
Or he's just got a very fixed amount of buffer that translates in human as a plate can hold

00:14:25,809 --> 00:14:28,649
just that many pancakes, right?

00:14:28,649 --> 00:14:32,699
So, here you can see a very simplified version.

00:14:32,699 --> 00:14:34,050
Usually it looks like this.

00:14:34,050 --> 00:14:35,829
We don't have enough space.

00:14:35,829 --> 00:14:37,279
Let's stick with this.

00:14:37,279 --> 00:14:38,279
Cool.

00:14:38,279 --> 00:14:43,279
Dominik receives pancakes but doesn't send anything right now except a love letter, right?

00:14:43,279 --> 00:14:44,279
Cool.

00:14:44,279 --> 00:14:49,160
And that note will store the value for how many pancakes he can put on Dominik's plate

00:14:49,160 --> 00:14:50,629
per package.

00:14:50,629 --> 00:14:54,689
Make sure he doesn't overeat.

00:14:54,689 --> 00:14:55,749
Cool.

00:14:55,749 --> 00:14:58,790
But he still gets as much food as possible.

00:14:58,790 --> 00:15:06,079
For every ack that all the pancakes have arrived, this number is on the note.

00:15:06,079 --> 00:15:14,709
This note is receive window size, which is like the available buffer space, plate.

00:15:14,709 --> 00:15:20,230
Dominik knows every round trip how many pancakes he can receive and how much space he's got

00:15:20,230 --> 00:15:21,230
left.

00:15:21,230 --> 00:15:24,869
Same goes for Stephan, if we would receive, I don't know, some bacon maybe.

00:15:24,869 --> 00:15:27,489
But I'm sorry, buddy.

00:15:27,489 --> 00:15:31,130
I don't think you will.

00:15:31,130 --> 00:15:34,490
Today the maximum possible value is 1 gigabyte.

00:15:34,490 --> 00:15:36,499
It used to be 64 kilobytes.

00:15:36,499 --> 00:15:38,889
A little bit small.

00:15:38,889 --> 00:15:44,480
And it's because of the network round trip time.

00:15:44,480 --> 00:15:45,879
And this is hard to remember.

00:15:45,879 --> 00:15:50,889
Just imagine, like, 1 gigabyte is one plate.

00:15:50,889 --> 00:15:53,369
Okay.

00:15:53,369 --> 00:15:55,850
Wait.

00:15:55,850 --> 00:15:57,589
What about the sender in the network?

00:15:57,589 --> 00:15:59,149
That's important, right?

00:15:59,149 --> 00:16:00,619
Come on.

00:16:00,619 --> 00:16:02,089
Two minutes.

00:16:02,089 --> 00:16:03,449
We don't want to overwhelm them.

00:16:03,449 --> 00:16:05,889
So, this is why we have congestion window size.

00:16:05,889 --> 00:16:07,319
CWN short.

00:16:07,319 --> 00:16:10,429
They are not send, just known.

00:16:10,429 --> 00:16:14,459
They're just known by the person that sends them out.

00:16:14,459 --> 00:16:18,179
This defines how many segments can be sent out per package.

00:16:18,179 --> 00:16:20,009
We'll get back to that later.

00:16:20,009 --> 00:16:26,269
So, this is kind of a batch of pancakes.

00:16:26,269 --> 00:16:30,959
They're measured in so called TCP protocol data units defined by the connection they're

00:16:30,959 --> 00:16:31,959
actually using.

00:16:31,959 --> 00:16:39,089
So, a batch of pancakes is smaller when you use more of them, and bigger, when you use

00:16:39,089 --> 00:16:42,220
a fiber cable connection.

00:16:42,220 --> 00:16:48,029
The window size can never be bigger than the receiver window size.

00:16:48,029 --> 00:16:51,850
Because a plate can have just so many pancakes.

00:16:51,850 --> 00:16:57,949
So, round trip, the congestion window size keeps increasing up to the maximum receiver

00:16:57,949 --> 00:17:03,019
window size until the network reaches its limit or you don't have anything left to send.

00:17:03,019 --> 00:17:06,449
Does it make sense?

00:17:06,449 --> 00:17:07,519
Awesome.

00:17:07,519 --> 00:17:08,610
It's good that you're awake.

00:17:08,610 --> 00:17:11,889
Because now we can transfer a transfer.

00:17:11,889 --> 00:17:14,069
And look.

00:17:14,069 --> 00:17:16,559
Everyone who sits in between them, welcome.

00:17:16,559 --> 00:17:19,640
You're the data pipeline.

00:17:19,640 --> 00:17:23,059
So, how it works.

00:17:23,059 --> 00:17:24,419
You start the package.

00:17:24,419 --> 00:17:25,610
You do your stuff.

00:17:25,610 --> 00:17:27,230
As fast as possible.

00:17:27,230 --> 00:17:28,880
It's all about performance, right?

00:17:28,880 --> 00:17:31,039
We need a small round trip time.

00:17:31,039 --> 00:17:32,039
Okay.

00:17:32,039 --> 00:17:33,880
First pancakes.

00:17:33,880 --> 00:17:35,090
Let's go, let's go.

00:17:35,090 --> 00:17:37,350
Keep them in the package.

00:17:37,350 --> 00:17:38,350
That's fine.

00:17:38,350 --> 00:17:39,350
Come on, we don't have much time.

00:17:39,350 --> 00:17:40,350
Too close.

00:17:40,350 --> 00:17:41,350
Go, go, go!

00:17:41,350 --> 00:17:42,350
Faster!

00:17:42,350 --> 00:17:43,350
Faster!

00:17:43,350 --> 00:17:44,350
Dominik got them!

00:17:44,350 --> 00:17:47,340
Come on, come on!

00:17:47,340 --> 00:17:48,960
Ack!

00:17:48,960 --> 00:18:03,970
Got the ack, come back.

00:18:03,970 --> 00:18:05,290
Don't even close it.

00:18:05,290 --> 00:18:07,760
It's all about the performance.

00:18:07,760 --> 00:18:12,600
Now come on, come on!

00:18:12,600 --> 00:18:13,600
Ahhhh!

00:18:13,600 --> 00:18:17,590
This takes forever.

00:18:17,590 --> 00:18:19,779
And the next batch and the next batch, faster, faster, faster.

00:18:19,779 --> 00:18:22,700
Now, by the way, we are four segments.

00:18:22,700 --> 00:18:26,110
We increased because he is eating.

00:18:26,110 --> 00:18:28,980
So, what's the receiver window size right now?

00:18:28,980 --> 00:18:29,980
Ack.

00:18:29,980 --> 00:18:30,980
Okay.

00:18:30,980 --> 00:18:33,240
Cool, cool, cool.

00:18:33,240 --> 00:18:34,240
We got that down.

00:18:34,240 --> 00:18:36,779
That's really good.

00:18:36,779 --> 00:18:37,980
Faster!

00:18:37,980 --> 00:18:39,179
Faster!

00:18:39,179 --> 00:18:40,380
Look.

00:18:40,380 --> 00:18:44,690
That is faster than you.

00:18:44,690 --> 00:18:45,750
Look!

00:18:45,750 --> 00:18:46,750
And come on.

00:18:46,750 --> 00:18:47,750
The last round trip.

00:18:47,750 --> 00:18:48,750
The last one.

00:18:48,750 --> 00:18:49,750
The last one.

00:18:49,750 --> 00:18:51,670
The last one.

00:18:51,670 --> 00:18:53,980
Wait.

00:18:53,980 --> 00:19:03,210
Did someone steal pancakes?

00:19:03,210 --> 00:19:06,169
[ Laughter ] Thank you so much.

00:19:06,169 --> 00:19:07,169
They're mine now.

00:19:07,169 --> 00:19:09,190
We can talk this over, by the way.

00:19:09,190 --> 00:19:18,980
It's like a big applause for everyone.

00:19:18,980 --> 00:19:23,059
Thank you so much.

00:19:23,059 --> 00:19:24,059
Good job.

00:19:24,059 --> 00:19:25,059
That was so nice.

00:19:25,059 --> 00:19:26,059
So, you might have realized two things.

00:19:26,059 --> 00:19:28,840
Except hopefully are you okay now?

00:19:28,840 --> 00:19:29,840
Pancake?

00:19:29,840 --> 00:19:30,840
Yeah, cool.

00:19:30,840 --> 00:19:31,840
Ack.

00:19:31,840 --> 00:19:35,020
So, there were two things you might have recognized.

00:19:35,020 --> 00:19:39,460
One was, we actually kind of increased the segments, rights?

00:19:39,460 --> 00:19:42,430
Round trip, you totally saw that.

00:19:42,430 --> 00:19:44,820
The other was package loss.

00:19:44,820 --> 00:19:46,240
Okay.

00:19:46,240 --> 00:19:50,000
Second and first one.

00:19:50,000 --> 00:19:53,500
This is random, the increase of pancakes.

00:19:53,500 --> 00:19:54,500
Was it random?

00:19:54,500 --> 00:19:55,500
Surprise.

00:19:55,500 --> 00:20:00,040
No, this mechanism is optimized for TCP.

00:20:00,040 --> 00:20:05,400
What it does is estimate available capacity between like the sender and receiver.

00:20:05,400 --> 00:20:06,419
How?

00:20:06,419 --> 00:20:09,830
Available capacity by exchanging data.

00:20:09,830 --> 00:20:14,639
So, do you mean I was talking about segments, right?

00:20:14,639 --> 00:20:15,950
Batch of pancakes?

00:20:15,950 --> 00:20:24,650
Do you see they arrived and get the congestion size to not overwhelm the network or the sender.

00:20:24,650 --> 00:20:27,730
They never start with the full bandwidth.

00:20:27,730 --> 00:20:35,730
They are show and small and figure out how big the network is and how much it can handle.

00:20:35,730 --> 00:20:39,220
First of all you start this.

00:20:39,220 --> 00:20:47,030
So, you have time and status of pancakes.

00:20:47,030 --> 00:20:48,289
Congestion control.

00:20:48,289 --> 00:20:49,399
Window.

00:20:49,399 --> 00:20:51,500
Congestion window size.

00:20:51,500 --> 00:20:52,500
Default today.

00:20:52,500 --> 00:20:53,500
And the default is 10.

00:20:53,500 --> 00:20:54,889
It used to be 4.

00:20:54,889 --> 00:20:55,889
We did 2.

00:20:55,889 --> 00:20:57,290
It was just easy.

00:20:57,290 --> 00:20:58,950
Let's go with that.

00:20:58,950 --> 00:21:01,940
So, here the value, you can see here, is 2.

00:21:01,940 --> 00:21:02,940
Right?

00:21:02,940 --> 00:21:07,559
So, when we received everything, you get an ack.

00:21:07,559 --> 00:21:10,940
And we measure it round trip time.

00:21:10,940 --> 00:21:13,760
The other is incremental.

00:21:13,760 --> 00:21:18,539
It doubles up and then we can look forward and do the same.

00:21:18,539 --> 00:21:20,990
When everything arrives, it's an ack.

00:21:20,990 --> 00:21:26,170
Round trip time measured and then 8 and 16.

00:21:26,170 --> 00:21:27,170
This is how it looked like.

00:21:27,170 --> 00:21:30,090
I just explained to you.

00:21:30,090 --> 00:21:37,200
Let's assume that this is the last pancakes, right?

00:21:37,200 --> 00:21:38,200
At 16.

00:21:38,200 --> 00:21:39,200
Okay.

00:21:39,200 --> 00:21:43,350
TCP has the packages, it's awesome, loves you, takes care of you.

00:21:43,350 --> 00:21:44,350
Right?

00:21:44,350 --> 00:21:49,559
But it will probably fail again because it can't have that many segments.

00:21:49,559 --> 00:21:53,390
So package loss, surprise, is not a bad thing.

00:21:53,390 --> 00:21:55,860
It's a bit in mechanism.

00:21:55,860 --> 00:22:02,440
The task is that we are overwhelmed for the network to avoid losing like more packages

00:22:02,440 --> 00:22:03,440
in the network.

00:22:03,440 --> 00:22:06,100
We have something called congestion avoidance.

00:22:06,100 --> 00:22:16,490
Feedback Mel mechanism, package loss, showed us all along the way that something a congested

00:22:16,490 --> 00:22:17,870
link or router.

00:22:17,870 --> 00:22:22,139
That's why we need to at just the CWN, right?

00:22:22,139 --> 00:22:28,830
So, what we do is we check out which was the last value that worked.

00:22:28,830 --> 00:22:36,600
Resets our CWN ending back to than and we will go from that.

00:22:36,600 --> 00:22:38,509
Run into package at some point again.

00:22:38,509 --> 00:22:40,830
Do the algorithm again, then.

00:22:40,830 --> 00:22:41,990
We'll just adjust.

00:22:41,990 --> 00:22:46,649
So, latest value that worked was 8, right?

00:22:46,649 --> 00:22:50,200
We take that and don't double it up.

00:22:50,200 --> 00:22:53,740
We just take half of it and put it on.

00:22:53,740 --> 00:22:59,720
Before, and then 12 plus 6 and goes on until we lose packages again.

00:22:59,720 --> 00:23:03,740
The algorithm is like the really tricky part here.

00:23:03,740 --> 00:23:10,029
When it's too aggressive, it's cutting down the increase and your, well, connection.

00:23:10,029 --> 00:23:11,769
Pretty bad.

00:23:11,769 --> 00:23:14,280
If you don't adjust quickly enough, right?

00:23:14,280 --> 00:23:17,650
Then it will introduce more package loss.

00:23:17,650 --> 00:23:27,179
So a PRR is really cool because those algorithms are repeatedly and constantly worked on.

00:23:27,179 --> 00:23:33,029
And this is one of the good algorithms that might cut off like 3 10% of your round trip

00:23:33,029 --> 00:23:34,029
time.

00:23:34,029 --> 00:23:35,090
And it's really nice.

00:23:35,090 --> 00:23:37,070
So, all of that sounds amazing.

00:23:37,070 --> 00:23:38,820
Do you love TCP?

00:23:38,820 --> 00:23:43,590
[Cheers] There are limitations.

00:23:43,590 --> 00:23:49,570
So, I lost my thoughts.

00:23:49,570 --> 00:23:56,350
Every time we hit the limit and wait for the ack, that's like one round trip time of delay.

00:23:56,350 --> 00:23:57,350
Right?

00:23:57,350 --> 00:24:02,639
Either the sender or the receiver are forced to stop and wait for the ack.

00:24:02,639 --> 00:24:10,190
And that, if it's like a very long time, it can cause like massive gaps in the data flow.

00:24:10,190 --> 00:24:13,169
So, that is called bandwidth delay product.

00:24:13,169 --> 00:24:21,990
This is like the bottleneck, and the connection is unreliable, the times can vary.

00:24:21,990 --> 00:24:27,440
The good idea here is to optimize your window size value so that the round trip time will

00:24:27,440 --> 00:24:29,860
be enough to get the ack back.

00:24:29,860 --> 00:24:34,440
And the bigger the loss without the package loss, the better.

00:24:34,440 --> 00:24:40,429
And you can use window scaling because it helps you with that.

00:24:40,429 --> 00:24:45,200
Since TCP is an abstraction off of a reliable network over an unreliable connection.

00:24:45,200 --> 00:24:49,100
And it has like really cool features, we talked about.

00:24:49,100 --> 00:24:55,690
Like, basic page error checking were order delivery, retransmission of lost packages,

00:24:55,690 --> 00:24:59,230
package control and avoidance.

00:24:59,230 --> 00:25:03,890
And they are built for the best efficiency possible.

00:25:03,890 --> 00:25:12,080
But they limit what you can do when something is specially made for something else.

00:25:12,080 --> 00:25:17,440
Head of line blocking is the last imitation I would like to point out.

00:25:17,440 --> 00:25:24,690
As we have like a reliable and auto delivery built in, we kind of rely on all segments

00:25:24,690 --> 00:25:25,690
to arrive.

00:25:25,690 --> 00:25:33,960
So, when the three segments are sent out and the first or one of those is lost, it will

00:25:33,960 --> 00:25:35,070
drop all packages.

00:25:35,070 --> 00:25:36,470
So, the first one was lost.

00:25:36,470 --> 00:25:40,559
This was waiting for the first one and everything afterwards, no, no, no.

00:25:40,559 --> 00:25:41,559
First one.

00:25:41,559 --> 00:25:44,110
I don't care about the others.

00:25:44,110 --> 00:25:48,799
So, Stephan will basically resend the packages.

00:25:48,799 --> 00:25:52,070
Until the first one arrives, then the second, then the third.

00:25:52,070 --> 00:25:54,130
And we get an ack.

00:25:54,130 --> 00:25:58,200
This might cause like a connection to die at some point because we will be overwhelmed

00:25:58,200 --> 00:25:59,200
with resending.

00:25:59,200 --> 00:26:00,769
And there's no way around this.

00:26:00,769 --> 00:26:05,799
And consider something else if you don't need a reliable and ordered network.

00:26:05,799 --> 00:26:11,150
And please don't build stuff because you think, it's great, I need a very few features.

00:26:11,150 --> 00:26:13,960
You will realize after like six months, whoops!

00:26:13,960 --> 00:26:17,309
I've rebuilt TCP.

00:26:17,309 --> 00:26:19,710
Okay.

00:26:19,710 --> 00:26:22,340
I had an amazing ending for you.

00:26:22,340 --> 00:26:27,149
But I had the package called actually lost.

00:26:27,149 --> 00:26:31,440

YouTube URL: https://www.youtube.com/watch?v=aOPgTWVtX78


