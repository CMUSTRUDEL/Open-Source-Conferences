Title: When Chomsky Met JavaScript: Exploring the Linguistics(...) - Alaina Kafkes - JSConf EU 2018
Publication date: 2018-07-12
Playlist: JSConf EU 2018
Description: 
	Alaina Kafkes: When Chomsky Met JavaScript: Exploring the Linguistics Behind Regular Expressions

Regular expressions are one of the most mind-boggling programming techniques, but much of their mystery can be elucidated by tracking down how they made it into JavaScript in the first place. In this talk, I’ll tell the story of the regular expression, from its humble linguistic origins to its awe-inspiring power in modern programming languages like JavaScript. Once I reveal to the audience the linguistic theory behind regular expressions, they’ll feel empowered to start writing some of their own.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,460 --> 00:00:10,340
All right.

00:00:10,340 --> 00:00:12,120
Hi there everyone

00:00:12,200 --> 00:00:13,320
I'm Alaina.

00:00:13,320 --> 00:00:17,270
And this lovely pre dinner slot I will be telling you the linguistic back story of the

00:00:17,270 --> 00:00:19,500
regular expression.

00:00:19,500 --> 00:00:24,019
So, regular expressions look a little intimidating.

00:00:24,019 --> 00:00:26,289
I mean, imagine being someone who is new to programming.

00:00:26,289 --> 00:00:30,330
Say programming and JavaScript and seeing something that looks like this.

00:00:30,330 --> 00:00:34,910
When I started coding, I was pretty freaked out by regular expressions.

00:00:34,910 --> 00:00:36,530
I just didn't get them.

00:00:36,530 --> 00:00:40,710
If I were a Shiba Inu, I would look like this.

00:00:40,710 --> 00:00:43,770
Some of you might relate to that sentiment.

00:00:43,770 --> 00:00:49,719
Some of you might wonder how you can get better at writing regular expressions.

00:00:49,719 --> 00:00:53,039
The usual answer is something like StackOverflow.

00:00:53,039 --> 00:00:58,989
But people tend to use StackOverflow to copy and paste code when they're in a pinch rather

00:00:58,989 --> 00:01:03,800
than to learn the proper way to actually write regular expressions.

00:01:03,800 --> 00:01:13,210
To truly understand regular expressions, I propose an unorthodox route.

00:01:13,210 --> 00:01:14,210
Do it right now.

00:01:14,210 --> 00:01:21,220
No, I mean, I'm being a bit facetious and, you know, this is a big thing, learning linguistics.

00:01:21,220 --> 00:01:28,090
What I really mean to say is, learn how regular expressions work in the field of linguistics

00:01:28,090 --> 00:01:31,770
before trying to use them in JavaScript.

00:01:31,770 --> 00:01:36,380
This is what I'll be walking you through today.

00:01:36,380 --> 00:01:43,030
Let me take you on a journey that begins with Noam Chomsky pictured here and defends a cheer.

00:01:43,030 --> 00:01:45,080
Cool.

00:01:45,080 --> 00:01:46,799
Chomsky fans in the audience.

00:01:46,799 --> 00:01:48,799
Me too.

00:01:48,799 --> 00:01:49,869
And in journey.

00:01:49,869 --> 00:01:54,450
We'll start with Chomsky and we'll end with the regular expression.

00:01:54,450 --> 00:02:00,290
So, as some of you may know, Chomsky is not a computer scientist by profession.

00:02:00,290 --> 00:02:08,190
He is a linguistics, a philosopher, a political activist and ton of other things.

00:02:08,190 --> 00:02:13,860
But his contributions to computer science were pretty accidental.

00:02:13,860 --> 00:02:18,660
His major contribution to the field of computer science is something known as the Chomsky

00:02:18,660 --> 00:02:20,410
hierarchy.

00:02:20,410 --> 00:02:24,640
The Chomsky hierarchy is an ordering of grammars.

00:02:24,640 --> 00:02:29,890
But since most of us in the room are not linguists, we have to cover what a grammar is before

00:02:29,890 --> 00:02:33,020
we can go further.

00:02:33,020 --> 00:02:39,800
First thing, a linguistic crash course so that we can understand Chomsky's hierarchy.

00:02:39,800 --> 00:02:43,490
So, grammars.

00:02:43,490 --> 00:02:48,110
Grammars provide the rules that build languages.

00:02:48,110 --> 00:02:51,030
Some of you might also wonder, what's a language?

00:02:51,030 --> 00:02:58,340
Well, a language comprises of symbols and the rules to apply to those symbols.

00:02:58,340 --> 00:03:04,200
In other words, languages comprise of symbols and a grammar.

00:03:04,200 --> 00:03:08,120
These symbols can be combined to make strings.

00:03:08,120 --> 00:03:16,810
The grammar provides us with a set of operations that can be used on these strings of symbols.

00:03:16,810 --> 00:03:22,480
To be a bit more specific, grammars provide a framework with which input or intermedial

00:03:22,480 --> 00:03:28,510
strings of symbols can be converted into some output string of symbols.

00:03:28,510 --> 00:03:34,810
Throughout this presentation, I might refer to input and intermediate strings as non terminals

00:03:34,810 --> 00:03:37,130
and output strings at terminals.

00:03:37,130 --> 00:03:41,370
I'm just tell you this now so that if you hear these different terms, you'll know that

00:03:41,370 --> 00:03:44,010
they mean the same thing.

00:03:44,010 --> 00:03:50,980
So, I want to make these terms feel a bit more tangible because obviously learning linguistics

00:03:50,980 --> 00:03:53,720
in two minutes is not a thing that anyone can do.

00:03:53,720 --> 00:03:59,050
So, I'm going to provide an example using a made-up language from the world of Harry

00:03:59,050 --> 00:04:01,930
Potter known as Parseltongue.

00:04:01,930 --> 00:04:10,090
So, in Parseltongue, there are three terminal symbols and three non terminal symbols.

00:04:10,090 --> 00:04:14,500
They're right here.

00:04:14,500 --> 00:04:22,350
In Parseltongue, there's also a set of rules for converting non terminal symbols into terminal

00:04:22,350 --> 00:04:26,020
symbols.

00:04:26,020 --> 00:04:35,980
So, now let's go through an example of converting a non terminal string into a terminal string.

00:04:35,980 --> 00:04:38,590
So, here is our starting string.

00:04:38,590 --> 00:04:39,880
It is a non terminal.

00:04:39,880 --> 00:04:40,880
Oops.

00:04:40,880 --> 00:04:41,880
I'm sorry.

00:04:41,880 --> 00:04:42,880
One slide back.

00:04:42,880 --> 00:04:43,890
This is our starting string.

00:04:43,890 --> 00:04:51,010
Now, I'm going to make one conversion of the first non terminal symbol into a terminal

00:04:51,010 --> 00:04:52,010
symbol.

00:04:52,010 --> 00:04:57,100
However, this conversion does not make the entire string a terminal string.

00:04:57,100 --> 00:05:02,150
The string is still a non terminal because there are still non terminal symbols, the

00:05:02,150 --> 00:05:06,470
words "Am" and" Snake" in there.

00:05:06,470 --> 00:05:12,630
With that being said, I'm going to make the next conversion of "am" into 'S." The string

00:05:12,630 --> 00:05:14,680
is nonterminal.

00:05:14,680 --> 00:05:23,440
But the string backs a terminal when I turn "Snake" into this 'SS."

00:05:23,440 --> 00:05:33,610
We produced a string of entirely parsed terminals, a non terminal string.

00:05:33,610 --> 00:05:38,410
You could call this a grammatically correct phrase in Parseltongue.

00:05:38,410 --> 00:05:39,660
Cool.

00:05:39,660 --> 00:05:45,280
Now that we've introduced linguistic terms, reintroducing you to the Chomsky hierarchy.

00:05:45,280 --> 00:05:49,720
It looks like this.

00:05:49,720 --> 00:05:57,160
In the interest of time, I'm going to hone in on the grammar, the innermost circle.

00:05:57,160 --> 00:06:01,590
What is so special about this regular grammar?

00:06:01,590 --> 00:06:07,800
In the process of converting a non terminal string into a terminal string, regular grammars

00:06:07,800 --> 00:06:11,170
have no knowledge of the string's past states.

00:06:11,170 --> 00:06:18,680
Once the regular grammar converts one non terminal symbol into a terminal symbol, the

00:06:18,680 --> 00:06:25,740
grammar essentially forgets what the previous state of the string was.

00:06:25,740 --> 00:06:31,590
We care about regular grammars because they are regular expressions.

00:06:31,590 --> 00:06:38,750
I mentioned a slide ago that regular grammars retain no information about intermediate steps

00:06:38,750 --> 00:06:42,330
in converting an input string into an output string.

00:06:42,330 --> 00:06:48,280
So, what does that tells about the regular expression?

00:06:48,280 --> 00:06:53,840
The forgetfulness of regular grammars implies that translations in one part of a string

00:06:53,840 --> 00:06:59,340
do not impact how non terminals are translated in future steps.

00:06:59,340 --> 00:07:04,430
This means that there's no coordination between the different parts of the string in creating

00:07:04,430 --> 00:07:07,360
the output string.

00:07:07,360 --> 00:07:13,810
This gives us some insight into why programmers first brought regular expressions into code.

00:07:13,810 --> 00:07:19,510
Because regular expressions convert input string to output string piece by piece, they're

00:07:19,510 --> 00:07:22,590
wonderful at pattern matching.

00:07:22,590 --> 00:07:28,130
In programming, regular expressions convert a pattern into the set of strings that match

00:07:28,130 --> 00:07:30,210
that pattern.

00:07:30,210 --> 00:07:35,340
So, in JavaScript, this is what the match method does.

00:07:35,340 --> 00:07:40,010
It takes in a pattern, let's say it's called regX, like up here.

00:07:40,010 --> 00:07:43,120
And this pattern is a regular expression.

00:07:43,120 --> 00:07:49,960
And then match will find all sub strings of a string, which I've called S. And then match

00:07:49,960 --> 00:07:55,270
sorry, it will find all sub strings that match that pattern within the string S.

00:07:55,270 --> 00:08:04,460
So, the linguistic origin of this programming concept that we know, regular expressions,

00:08:04,460 --> 00:08:07,800
is starting to make a bit more sense now.

00:08:07,800 --> 00:08:09,770
One question remains.

00:08:09,770 --> 00:08:15,170
How else do regular expressions in programming relate to those that we've seen?

00:08:15,170 --> 00:08:17,770
Linguistics thus far?

00:08:17,770 --> 00:08:25,730
Well, I'll walk you through the similarities before their paths fork.

00:08:25,730 --> 00:08:32,270
Regular expressions of linguistics and programming use the same three grammatical operations.

00:08:32,270 --> 00:08:38,200
These operations are alternation, repetition and concatenation.

00:08:38,200 --> 00:08:46,740
I'll talk you through what these three rules look like using both words and then some examples.

00:08:46,740 --> 00:08:51,780
Alternation effectively gives us this logical or.

00:08:51,780 --> 00:09:01,830
And I'm going to tell you a great story, a true story, about the 1920s when a lot of

00:09:01,830 --> 00:09:06,420
Greeks were emigrating from Greece to the United States.

00:09:06,420 --> 00:09:10,010
My family was one of those set of Greek people.

00:09:10,010 --> 00:09:15,700
Given that my forebears didn't speak English, it was up to the immigration officials to

00:09:15,700 --> 00:09:21,580
determine how their Greek surnames would be spelled using the alphabet that we use in

00:09:21,580 --> 00:09:23,430
English.

00:09:23,430 --> 00:09:31,630
So, some of my relatives ended up with the surname Kafkes spelled with e s.

00:09:31,630 --> 00:09:35,980
And then others ended up with the last name Kafkis spelled with i s.

00:09:35,980 --> 00:09:45,240
Unless your family reunions turn into something like these cats, which are really aggressive,

00:09:45,240 --> 00:09:55,150
don't want that to happen, I can use it to create spellings of the last name both ways,

00:09:55,150 --> 00:10:00,000
pleasing everyone.

00:10:00,000 --> 00:10:04,770
Now we're going to move on to repetition.

00:10:04,770 --> 00:10:10,490
Repetition allows us to match an expression zero or more times.

00:10:10,490 --> 00:10:14,650
Let's look at some bit strings in order to see repetition in action.

00:10:14,650 --> 00:10:16,450
All right.

00:10:16,450 --> 00:10:22,380
So, I have this pattern right here and it is 01 star.

00:10:22,380 --> 00:10:29,480
What 01 star will match is 0 plus followed by any number of 1s.

00:10:29,480 --> 00:10:36,779
The star is a meta character, basically a short hand character and symbolizes one of

00:10:36,779 --> 00:10:40,760
the many forms of repetition that you can use in JavaScript.

00:10:40,760 --> 00:10:43,839
All right.

00:10:43,839 --> 00:10:47,010
On to concatenation.

00:10:47,010 --> 00:10:51,630
Concatenation joins expressions together in order to create new patterns.

00:10:51,630 --> 00:10:59,010
I think that concatenation is pretty useful when we're trying to see how matching different

00:10:59,010 --> 00:11:03,520
conjugations and tenses of English verbs look.

00:11:03,520 --> 00:11:08,120
So, we have this regular expression right here.

00:11:08,120 --> 00:11:09,120
It's call.

00:11:09,120 --> 00:11:13,980
Call will match many forms of its infinitive to call.

00:11:13,980 --> 00:11:20,010
So, it will match call, calls, called, calling, all sorts of things.

00:11:20,010 --> 00:11:27,711
But as soon as we add another letter, or another pattern, to that regular expression, only

00:11:27,711 --> 00:11:29,710
calls will be matched.

00:11:29,710 --> 00:11:31,790
So, yeah.

00:11:31,790 --> 00:11:37,399
Now that we've talked through these examples of the rules that both engineers and linguists

00:11:37,399 --> 00:11:44,830
use in terms of regular expressions, it's time to does how regular expressions in code

00:11:44,830 --> 00:11:53,290
and JavaScript in particular differ from their linguistic predecessor.

00:11:53,290 --> 00:11:57,720
Regular expressions in programming languages have two major add ons.

00:11:57,720 --> 00:12:00,800
These are back references and quantifiers.

00:12:00,800 --> 00:12:09,120
Once again, I'll talk you through these differences with some examples along the way.

00:12:09,120 --> 00:12:18,130
Back references allow regular expressions to store these small patterns, or sub patterns.

00:12:18,130 --> 00:12:22,800
Back references can be used to match all the laughing messages that you send your friends.

00:12:22,800 --> 00:12:23,970
And I'll show you how.

00:12:23,970 --> 00:12:30,090
So, take, for example, the humble word "Ha."

00:12:30,090 --> 00:12:35,730
The pattern above denotes" Ha" as a sub pattern using those parentheses.

00:12:35,730 --> 00:12:41,350
And then references it using the backslash one short hand symbol.

00:12:41,350 --> 00:12:46,310
This meta character tells us to match for the sub pattern again.

00:12:46,310 --> 00:12:53,550
Then the star the end matches the second "Ha" repeated zero or more times.

00:12:53,550 --> 00:13:01,040
So, to put it more simply, this pattern that I've written here matches the string" Ha"

00:13:01,040 --> 00:13:03,490
repeated over and over again.

00:13:03,490 --> 00:13:04,490
One or more times.

00:13:04,490 --> 00:13:10,560
I mean, you can test it out if you want, but it might just look like this right now.

00:13:10,560 --> 00:13:12,589
A little bit of forced laughter.

00:13:12,589 --> 00:13:14,870
But yeah.

00:13:14,870 --> 00:13:16,550
Cool.

00:13:16,550 --> 00:13:22,550
So, some of you might notice something a bit more disturbing about back references.

00:13:22,550 --> 00:13:27,430
And it is that they go against the purpose of regular grammars as it's spelled out in

00:13:27,430 --> 00:13:29,580
linguistics.

00:13:29,580 --> 00:13:35,010
As a reminder, the purpose of regular grammars is not to obtain information about previous

00:13:35,010 --> 00:13:38,750
states or previous places in the string.

00:13:38,750 --> 00:13:45,240
So, despite the performance hit that this violation will cause, programmers enjoy having

00:13:45,240 --> 00:13:51,000
a way to match repeated sub strings.

00:13:51,000 --> 00:13:53,370
On to quantifiers.

00:13:53,370 --> 00:13:57,810
Quantifiers alter the greediness of the regular expression matching.

00:13:57,810 --> 00:14:00,180
What does greediness mean here?

00:14:00,180 --> 00:14:11,100
Well, greediness is measured by the question, how much of that one thing do you want?

00:14:11,100 --> 00:14:17,180
Let's look at the star, plus sign and question mark quantifiers for some examples in code.

00:14:17,180 --> 00:14:19,410
All right.

00:14:19,410 --> 00:14:23,890
We saw this example a bit earlier when I was discussing repetition.

00:14:23,890 --> 00:14:32,810
If you'll remember, the pattern 01 star matches 0 and then 0 followed by any number of 1s.

00:14:32,810 --> 00:14:38,890
The star quantifier matches the expression to which it is applied, which is the 1 here

00:14:38,890 --> 00:14:40,810
zero or more times.

00:14:40,810 --> 00:14:46,550
So, I can contrast this with the plus sign quantifier.

00:14:46,550 --> 00:14:52,040
The plus sign quantifier matches the expression to which it is applied one or more times.

00:14:52,040 --> 00:14:58,450
So, this means that from the previous slide we had zero as a possible match.

00:14:58,450 --> 00:15:02,279
Whereas now we do not.

00:15:02,279 --> 00:15:08,110
And then one more quantifier that's pretty cool to look at is the question mark quantifier.

00:15:08,110 --> 00:15:14,340
The question mark quantifier matches the expression to which it's applied zero or one times.

00:15:14,340 --> 00:15:16,130
Only those two cases.

00:15:16,130 --> 00:15:21,709
This means that the pattern that I have written above only matches zero and 01.

00:15:21,709 --> 00:15:29,740
The star, plus sign and question mark quantifiers they mention ready just a few of the many

00:15:29,740 --> 00:15:34,760
quantifier us out there that JavaScript programmers use.

00:15:34,760 --> 00:15:39,820
Quantifiers are nice because they give programmers more flexibility to fine tune their regular

00:15:39,820 --> 00:15:43,649
expressions than the linguistic rules allow for.

00:15:43,649 --> 00:15:51,100
And now, the sun must set on our linguistic journey through the land of regular expressions.

00:15:51,100 --> 00:16:00,279
Even though the sun in Berlin doesn't set until 9 p.m. I walked you through from Chomsky's

00:16:00,279 --> 00:16:02,339
theory to JavaScript.

00:16:02,339 --> 00:16:09,149
I showed you how regular expressions differ in linguistics and code.

00:16:09,149 --> 00:16:14,980
All that cool information aside, I think that the most important takeaway from this talk

00:16:14,980 --> 00:16:20,110
is that regular expressions were put into programming languages such as JavaScript for

00:16:20,110 --> 00:16:22,029
very pragmatic reasons.

00:16:22,029 --> 00:16:26,540
They were also tweaked for practical reasons.

00:16:26,540 --> 00:16:31,820
Learning about the linguistics behind regular expressions helps us understand why the people

00:16:31,820 --> 00:16:40,510
who brought linguistics into code made these very particular design decisions.

00:16:40,510 --> 00:16:46,860
This goes to show that interdisciplinary learning helps enhance computer knowledge.

00:16:46,860 --> 00:16:57,149
I encourage you it look at engineering or JavaScript specifically from other disciplines.

00:16:57,149 --> 00:17:02,290
Trace them to their roots like I did today, and you can deepen your understanding of those

00:17:02,290 --> 00:17:03,290
concepts.

00:17:03,290 --> 00:17:05,439
Thank you, everyone.

00:17:05,439 --> 00:17:07,779
Once again, I'm Alaina.

00:17:07,779 --> 00:17:14,970
I work at a cool company called Medium and I love how linguistics and programming intersect.

00:17:14,970 --> 00:17:16,480
Feel free to come talk to me after this.

00:17:16,480 --> 00:17:16,980

YouTube URL: https://www.youtube.com/watch?v=ZbMj_ab29Js


