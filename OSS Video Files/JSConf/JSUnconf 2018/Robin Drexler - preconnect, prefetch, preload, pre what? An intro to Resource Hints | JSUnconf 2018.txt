Title: Robin Drexler - preconnect, prefetch, preload, pre what? An intro to Resource Hints | JSUnconf 2018
Publication date: 2018-05-13
Playlist: JSUnconf 2018
Description: 
	
Captions: 
	00:00:03,070 --> 00:00:08,010
[Applause]

00:00:05,810 --> 00:00:09,900
well yeah thank you very much for this

00:00:08,010 --> 00:00:12,809
kind introduction

00:00:09,900 --> 00:00:15,059
so exactly this talk is called pre

00:00:12,809 --> 00:00:17,220
connect prefetch preload and pre wats

00:00:15,059 --> 00:00:19,439
an introduction to the resource ins and

00:00:17,220 --> 00:00:21,689
I would like to talk about why web

00:00:19,439 --> 00:00:23,460
performance matters at all in the first

00:00:21,689 --> 00:00:26,160
place so why are we are we even thinking

00:00:23,460 --> 00:00:29,099
about improving website speeds then I

00:00:26,160 --> 00:00:32,840
would like to explore explore why some

00:00:29,099 --> 00:00:35,430
websites load slowly and then go into

00:00:32,840 --> 00:00:38,250
resource hints and how you can use them

00:00:35,430 --> 00:00:41,760
to make your website load much faster

00:00:38,250 --> 00:00:43,829
than they might do currently so why

00:00:41,760 --> 00:00:47,969
should we care about web performance at

00:00:43,829 --> 00:00:50,280
all the simple answer is because it has

00:00:47,969 --> 00:00:53,190
shown to have a significant significant

00:00:50,280 --> 00:00:55,289
effect on on business results so large

00:00:53,190 --> 00:00:58,980
companies ran a lot of studies that

00:00:55,289 --> 00:01:01,800
showed exactly this so I want to show

00:00:58,980 --> 00:01:03,539
two of them Amazon allegedly once run a

00:01:01,800 --> 00:01:05,970
study where they deliberately slowed the

00:01:03,539 --> 00:01:09,180
websites down by only 100 milliseconds

00:01:05,970 --> 00:01:12,060
and they already saw a drop in sales by

00:01:09,180 --> 00:01:13,950
1% which is obviously kind of

00:01:12,060 --> 00:01:17,610
significant when you are operating on a

00:01:13,950 --> 00:01:19,680
scale as Amazon does and the second one

00:01:17,610 --> 00:01:21,990
is from another large us-based company

00:01:19,680 --> 00:01:25,799
there's called Google and they found out

00:01:21,990 --> 00:01:28,860
that 53% of users will abandon a website

00:01:25,799 --> 00:01:31,020
if it takes longer than 3 seconds to

00:01:28,860 --> 00:01:32,490
load I'm apparently a bit more patient

00:01:31,020 --> 00:01:36,329
because I often wait a bit longer but

00:01:32,490 --> 00:01:39,150
this is what they have found out but I

00:01:36,329 --> 00:01:41,040
think it's even more about something

00:01:39,150 --> 00:01:43,799
more important than business it's also

00:01:41,040 --> 00:01:46,290
about empathy because especially with

00:01:43,799 --> 00:01:48,540
those that have to endure who or network

00:01:46,290 --> 00:01:52,680
conditions then then we have and I think

00:01:48,540 --> 00:01:54,329
we ought not to take anybody's time as

00:01:52,680 --> 00:01:56,340
granted and we should not be wasting it

00:01:54,329 --> 00:01:59,040
if we can do can do better and I think

00:01:56,340 --> 00:02:01,700
we as web developers are the ones that

00:01:59,040 --> 00:02:07,160
are in the position and maybe even

00:02:01,700 --> 00:02:10,739
responsible to deliver fast websites I

00:02:07,160 --> 00:02:13,770
would like to now to go to why websites

00:02:10,739 --> 00:02:13,920
load slowly and in order to do that we

00:02:13,770 --> 00:02:16,349
need

00:02:13,920 --> 00:02:18,660
- no at first or talk about what

00:02:16,349 --> 00:02:21,270
actually is a website so usually a

00:02:18,660 --> 00:02:23,610
website is a small text documents that

00:02:21,270 --> 00:02:25,739
contains references to other small

00:02:23,610 --> 00:02:27,569
documents such as scripts or images or

00:02:25,739 --> 00:02:29,730
CSS files that also need to be

00:02:27,569 --> 00:02:31,560
downloaded in order for the website to

00:02:29,730 --> 00:02:33,630
be useful at all and this is kind of

00:02:31,560 --> 00:02:36,690
different - for example if you download

00:02:33,630 --> 00:02:42,450
one large binary file for example if you

00:02:36,690 --> 00:02:45,300
download download a video and in order

00:02:42,450 --> 00:02:47,970
to to download a website you actually

00:02:45,300 --> 00:02:51,600
have to send data right and if you think

00:02:47,970 --> 00:02:53,340
about it that data don't get it it

00:02:51,600 --> 00:02:55,560
doesn't get beams and has to travel and

00:02:53,340 --> 00:02:58,709
I would like to give an example where

00:02:55,560 --> 00:03:02,100
I'm in Germany and I will request a

00:02:58,709 --> 00:03:06,239
website in New York so and if I do this

00:03:02,100 --> 00:03:08,190
then there's the distance is roughly six

00:03:06,239 --> 00:03:12,090
thousand 100 kilometres from Hamburg to

00:03:08,190 --> 00:03:13,769
New York and then also 6130 kilometres

00:03:12,090 --> 00:03:16,709
back because I also need to get to get

00:03:13,769 --> 00:03:19,290
an answer right so and how fast can data

00:03:16,709 --> 00:03:21,120
travel so there's this thing that is

00:03:19,290 --> 00:03:23,340
called the speed of light and until now

00:03:21,120 --> 00:03:25,709
we weren't we weren't able to do

00:03:23,340 --> 00:03:28,620
anything that is faster than that so and

00:03:25,709 --> 00:03:32,190
this is around about 300 million meters

00:03:28,620 --> 00:03:35,250
per second but in reality data and fiber

00:03:32,190 --> 00:03:38,549
cable travels travels in more like 200

00:03:35,250 --> 00:03:41,760
million a million meters per second this

00:03:38,549 --> 00:03:44,220
means for one data package to go to New

00:03:41,760 --> 00:03:48,840
York and coming back to Hamburg it

00:03:44,220 --> 00:03:51,690
already takes 62 milliseconds and this

00:03:48,840 --> 00:03:55,170
is for only one single data package and

00:03:51,690 --> 00:03:57,299
I would not like to to have a look on

00:03:55,170 --> 00:03:59,450
what happens on the network when we are

00:03:57,299 --> 00:04:01,769
requesting a website or when we are

00:03:59,450 --> 00:04:03,510
connecting to a server so what do we

00:04:01,769 --> 00:04:06,660
have to do and how many round trips this

00:04:03,510 --> 00:04:09,380
this causes so the first thing we have

00:04:06,660 --> 00:04:11,970
to do is we have to kind of find out

00:04:09,380 --> 00:04:13,799
where we can or how we can connect to

00:04:11,970 --> 00:04:16,139
the server and in order to do so we need

00:04:13,799 --> 00:04:17,579
to ask domain name server for its IP

00:04:16,139 --> 00:04:20,340
address so in this case I will just

00:04:17,579 --> 00:04:22,440
answer again ask the DNS server hey DNS

00:04:20,340 --> 00:04:24,900
server I would like to go to some domain

00:04:22,440 --> 00:04:26,700
in this case it's def has two E and then

00:04:24,900 --> 00:04:27,750
the DNS server will resolve that for me

00:04:26,700 --> 00:04:30,180
and give me the I

00:04:27,750 --> 00:04:35,340
Piedras back and this already has taken

00:04:30,180 --> 00:04:38,910
60 62 milliseconds and then because HTTP

00:04:35,340 --> 00:04:42,180
uses TCP as its transportation layer we

00:04:38,910 --> 00:04:43,830
also have to open a TCP connection so

00:04:42,180 --> 00:04:46,050
and in order to do that we send a

00:04:43,830 --> 00:04:47,610
package and then we get as soon

00:04:46,050 --> 00:04:50,640
synchronization and acknowledgement

00:04:47,610 --> 00:04:53,700
package back which also adds another two

00:04:50,640 --> 00:04:57,630
round-trips to open the connection where

00:04:53,700 --> 00:05:01,160
we are now already at 120 124

00:04:57,630 --> 00:05:04,080
milliseconds but now we are in the year

00:05:01,160 --> 00:05:07,020
2018 and most websites are delivered

00:05:04,080 --> 00:05:11,370
securely which means we also have to do

00:05:07,020 --> 00:05:14,160
a TLS or SSL handshake which in itself

00:05:11,370 --> 00:05:16,530
adds another two round-trips because we

00:05:14,160 --> 00:05:18,450
have to kind of exchange information

00:05:16,530 --> 00:05:20,520
about which cipher suits are supported

00:05:18,450 --> 00:05:22,890
and then we need to exchange the keys

00:05:20,520 --> 00:05:25,350
and also the certificate and then in the

00:05:22,890 --> 00:05:27,540
end we can send the encrypted messages

00:05:25,350 --> 00:05:29,790
and like I said this already this also

00:05:27,540 --> 00:05:32,190
adds another two round-trips and now we

00:05:29,790 --> 00:05:34,500
already eight 248 in milliseconds and

00:05:32,190 --> 00:05:36,240
the best case conditions right so we

00:05:34,500 --> 00:05:38,430
didn't even account for the DNS server

00:05:36,240 --> 00:05:40,440
having to calculate the response or any

00:05:38,430 --> 00:05:43,110
routers that take up some time and this

00:05:40,440 --> 00:05:46,200
is a quarter of a second already and we

00:05:43,110 --> 00:05:48,990
also neglected one major thing that most

00:05:46,200 --> 00:05:52,290
or a lot of current network traffic goes

00:05:48,990 --> 00:05:55,500
over mobile networks which by their

00:05:52,290 --> 00:05:58,979
sheer nature are always add in a fixed

00:05:55,500 --> 00:06:00,870
amount of latency to to each data that

00:05:58,979 --> 00:06:03,180
is to each package that is going to be

00:06:00,870 --> 00:06:04,710
sent so for example for a te this as

00:06:03,180 --> 00:06:07,979
well as small it's only 70 milliseconds

00:06:04,710 --> 00:06:09,870
but if you are on on 3G which is pretty

00:06:07,979 --> 00:06:12,660
common and in most countries this is

00:06:09,870 --> 00:06:15,419
already on already between 150

00:06:12,660 --> 00:06:17,880
milliseconds or 400 milliseconds and on

00:06:15,419 --> 00:06:20,910
2g you are basically lost because it's

00:06:17,880 --> 00:06:24,180
almost one second for each request and

00:06:20,910 --> 00:06:27,540
if you if you do the math then you can

00:06:24,180 --> 00:06:29,400
add up for normal 3G connection to like

00:06:27,540 --> 00:06:32,610
to open a connection to to a web server

00:06:29,400 --> 00:06:34,770
it's already 1,000 milliseconds so one

00:06:32,610 --> 00:06:37,500
second before any data is sent at all

00:06:34,770 --> 00:06:39,270
and when I research this I was kind of

00:06:37,500 --> 00:06:41,729
impression that cannot be cannot be true

00:06:39,270 --> 00:06:44,879
because just seems way to match

00:06:41,729 --> 00:06:47,009
but then I wanna run a test on a service

00:06:44,879 --> 00:06:48,839
that is called webpagetest.org so if you

00:06:47,009 --> 00:06:51,539
don't know it yet then please look it up

00:06:48,839 --> 00:06:53,939
it's super awesome if you want to just

00:06:51,539 --> 00:06:55,680
see how your website is performing it

00:06:53,939 --> 00:06:56,879
has a lot of more features than only

00:06:55,680 --> 00:06:59,189
this waterfall chart but this is the

00:06:56,879 --> 00:06:59,969
waterfall chart in this case I requested

00:06:59,189 --> 00:07:02,580
usa.gov

00:06:59,969 --> 00:07:06,300
from a server in Frankfurt I think under

00:07:02,580 --> 00:07:08,699
3G conditions and I covered the download

00:07:06,300 --> 00:07:11,610
part so with this icon so what you could

00:07:08,699 --> 00:07:13,620
see there is only what it takes to

00:07:11,610 --> 00:07:17,520
connect to the website so it's DNS TCP

00:07:13,620 --> 00:07:20,249
and TLS and it's already 1.4 or 1.3

00:07:17,520 --> 00:07:23,520
seconds so it's actually it's actually

00:07:20,249 --> 00:07:25,830
true so now that we opened the

00:07:23,520 --> 00:07:28,289
connection we can happily start sending

00:07:25,830 --> 00:07:34,020
data in full-speed right well of course

00:07:28,289 --> 00:07:37,110
not doesn't work because TCP has a bunch

00:07:34,020 --> 00:07:40,229
of algorithms in place that protect the

00:07:37,110 --> 00:07:41,849
network from collapsing because you

00:07:40,229 --> 00:07:43,740
cannot just send data if your recipient

00:07:41,849 --> 00:07:45,719
does not be it's not able to handle the

00:07:43,740 --> 00:07:47,939
data and then you would just congest the

00:07:45,719 --> 00:07:53,219
entire network and it will break down so

00:07:47,939 --> 00:07:55,709
and one-one-one algorithm is called tcp

00:07:53,219 --> 00:07:58,620
slow-start and it works in the way that

00:07:55,709 --> 00:08:00,060
when you start sending data it only does

00:07:58,620 --> 00:08:01,560
it slowly so you have to send one

00:08:00,060 --> 00:08:03,360
package and then you have to wait to get

00:08:01,560 --> 00:08:06,209
one back before you can send even more

00:08:03,360 --> 00:08:08,520
data and this slowly increases until you

00:08:06,209 --> 00:08:11,879
at some point reach maximum maximum

00:08:08,520 --> 00:08:14,039
speed and usually this amount of data is

00:08:11,879 --> 00:08:16,469
14 kilobytes so if you happen to manage

00:08:14,039 --> 00:08:17,789
to get your entire website into those 14

00:08:16,469 --> 00:08:19,620
kilobytes then you have only one

00:08:17,789 --> 00:08:21,779
additional one trip which would be

00:08:19,620 --> 00:08:25,319
awesome but I don't know if anybody is

00:08:21,779 --> 00:08:28,319
capable of doing that nowadays so yeah

00:08:25,319 --> 00:08:32,069
and the thing is that when you're using

00:08:28,319 --> 00:08:34,500
HTTP one and not HTTP two then you have

00:08:32,069 --> 00:08:36,149
this tcp slow-start punishment so to

00:08:34,500 --> 00:08:38,099
speak for each connection that you are

00:08:36,149 --> 00:08:40,709
having so if you are downloading images

00:08:38,099 --> 00:08:42,719
five images from the same host then

00:08:40,709 --> 00:08:45,540
you're opening five connections and you

00:08:42,719 --> 00:08:48,449
have to endure' tcp slow-start for each

00:08:45,540 --> 00:08:51,269
of those connections and this leads to

00:08:48,449 --> 00:08:55,570
to the following conclusion that usually

00:08:51,269 --> 00:08:57,760
latency and not bandwidth causes slow

00:08:55,570 --> 00:09:01,600
because in this example it didn't matter

00:08:57,760 --> 00:09:04,600
much if I have 100 M it's 100 connection

00:09:01,600 --> 00:09:09,340
or 50 m 8 or 10 or 1 gigabit because we

00:09:04,600 --> 00:09:11,590
didn't send large data yet and engineers

00:09:09,340 --> 00:09:14,740
over the years came up with a lot of

00:09:11,590 --> 00:09:17,170
techniques to mitigate those issues and

00:09:14,740 --> 00:09:20,050
to decrease latency so first of all

00:09:17,170 --> 00:09:23,380
there is now HTTP to multiplexing which

00:09:20,050 --> 00:09:25,600
allows you to reuse open TCP connections

00:09:23,380 --> 00:09:27,340
so when you are downloading 5 images

00:09:25,600 --> 00:09:29,140
from the same house then only one

00:09:27,340 --> 00:09:31,390
connection will be used so you can

00:09:29,140 --> 00:09:34,060
probably download the third fourth and

00:09:31,390 --> 00:09:36,340
fifth image on our full speed and you

00:09:34,060 --> 00:09:39,220
don't and you are not subject to TCP

00:09:36,340 --> 00:09:41,370
slows at five times but only once then

00:09:39,220 --> 00:09:43,900
there is content delivery networks which

00:09:41,370 --> 00:09:45,580
basically try to move their servers

00:09:43,900 --> 00:09:48,730
closer to the users location and

00:09:45,580 --> 00:09:51,880
literally decreasing the distance data

00:09:48,730 --> 00:09:55,600
has to travel and therefore reducing

00:09:51,880 --> 00:09:58,120
latency and the third one is caching and

00:09:55,600 --> 00:09:59,890
with caching you can kind of remove

00:09:58,120 --> 00:10:02,740
bring the related sea down to almost

00:09:59,890 --> 00:10:04,420
zero because once the file is in the

00:10:02,740 --> 00:10:07,360
cache it will be just delivered from

00:10:04,420 --> 00:10:09,700
either the disk or the memory the issue

00:10:07,360 --> 00:10:11,650
was with with that is that it only works

00:10:09,700 --> 00:10:13,120
for the second request because in order

00:10:11,650 --> 00:10:15,460
to be able to serve it from the cache

00:10:13,120 --> 00:10:18,460
you somehow need to to put it there and

00:10:15,460 --> 00:10:20,170
that usually happens only when you when

00:10:18,460 --> 00:10:23,260
you see it when you download it so and

00:10:20,170 --> 00:10:27,450
this is where resource hints come into

00:10:23,260 --> 00:10:30,340
play so resource ins a kind of a way of

00:10:27,450 --> 00:10:32,710
predictive caching it gives you the

00:10:30,340 --> 00:10:35,470
ability to point the browser to

00:10:32,710 --> 00:10:37,840
resources such as scripts CSS files

00:10:35,470 --> 00:10:40,570
documents images whatever you can think

00:10:37,840 --> 00:10:42,070
about before the browser can even know

00:10:40,570 --> 00:10:45,160
that it's going to need them either for

00:10:42,070 --> 00:10:47,400
this same request or for a request that

00:10:45,160 --> 00:10:51,010
might be the next one or even two

00:10:47,400 --> 00:10:52,630
requests away and the best or one cool

00:10:51,010 --> 00:10:55,510
thing about it that implementation is

00:10:52,630 --> 00:10:57,790
also water is simple because usually you

00:10:55,510 --> 00:11:01,600
can just inject a link tag into your

00:10:57,790 --> 00:11:04,950
head and get going and I would now like

00:11:01,600 --> 00:11:07,960
to go through all of them basically and

00:11:04,950 --> 00:11:09,370
show what they can do for you and how

00:11:07,960 --> 00:11:12,370
you can use the

00:11:09,370 --> 00:11:14,500
some example so you can use them and I

00:11:12,370 --> 00:11:17,020
would like to start with preconnect

00:11:14,500 --> 00:11:19,870
because preconnect does all the things

00:11:17,020 --> 00:11:22,450
that I just mentioned it resolves the

00:11:19,870 --> 00:11:25,960
DNS it performs the TCP handshake and

00:11:22,450 --> 00:11:28,029
also does the TLS setup and I would like

00:11:25,960 --> 00:11:31,360
to give one concrete example for that

00:11:28,029 --> 00:11:34,440
and this is web fun so who has weapons

00:11:31,360 --> 00:11:38,470
on their website or worked on a website

00:11:34,440 --> 00:11:43,570
that's most so I also created a website

00:11:38,470 --> 00:11:45,100
I have this catch-up and I have an issue

00:11:43,570 --> 00:11:47,020
I have an issue so I need this platform

00:11:45,100 --> 00:11:50,350
because the website needs to be cute so

00:11:47,020 --> 00:11:52,630
I can give most the kid the kid is a new

00:11:50,350 --> 00:11:54,610
home but I also needed to be loading

00:11:52,630 --> 00:11:58,330
fast because otherwise my conversion

00:11:54,610 --> 00:12:00,279
will drop and I don't want that so this

00:11:58,330 --> 00:12:02,950
is how my my hat looks like currently

00:12:00,279 --> 00:12:06,160
and I have half the stylesheet

00:12:02,950 --> 00:12:08,400
my personal style sheet but I also have

00:12:06,160 --> 00:12:10,510
the Google web font style sheet and

00:12:08,400 --> 00:12:11,890
maybe most of you already know but I'm

00:12:10,510 --> 00:12:14,770
going to mention any way Google is

00:12:11,890 --> 00:12:16,120
offering a rather popular web service

00:12:14,770 --> 00:12:18,870
where you can download reference from

00:12:16,120 --> 00:12:22,990
which is called Google web fonts and

00:12:18,870 --> 00:12:25,420
here's the the web font style sheet so

00:12:22,990 --> 00:12:27,580
my style sheet is rather simple it only

00:12:25,420 --> 00:12:29,110
contains the font family in the flow

00:12:27,580 --> 00:12:30,790
which is the web form that I'm going to

00:12:29,110 --> 00:12:35,970
download and of course also the color

00:12:30,790 --> 00:12:38,860
Fox here because CIA and branding and

00:12:35,970 --> 00:12:40,810
this is the Google web font style sheet

00:12:38,860 --> 00:12:42,820
and it's and it's important to know that

00:12:40,810 --> 00:12:45,430
this is not the web font file itself

00:12:42,820 --> 00:12:49,420
it's only the style sheet that

00:12:45,430 --> 00:12:50,920
references that references the actual

00:12:49,420 --> 00:12:52,900
web font and you can see here it's for

00:12:50,920 --> 00:12:55,990
the name in the flow and then there's

00:12:52,900 --> 00:12:58,540
the URL that points to to the web font

00:12:55,990 --> 00:13:01,270
file I will come to that in a second

00:12:58,540 --> 00:13:04,240
when I now open my web site this is how

00:13:01,270 --> 00:13:08,740
the waterfall chart looks like and can

00:13:04,240 --> 00:13:10,120
you even see that okay awesome and so at

00:13:08,740 --> 00:13:12,760
first my website is downloaded so we I

00:13:10,120 --> 00:13:14,529
added some annotations so first DNS and

00:13:12,760 --> 00:13:17,230
then TCP TLS and then you see the actual

00:13:14,529 --> 00:13:19,660
requests happening and once my web site

00:13:17,230 --> 00:13:21,910
is downloaded the browser sees that I

00:13:19,660 --> 00:13:22,710
have embedded my my stylesheet and also

00:13:21,910 --> 00:13:24,899
the Google web fonts

00:13:22,710 --> 00:13:28,290
and then it will download both both of

00:13:24,899 --> 00:13:30,660
them in parallel and as you can see here

00:13:28,290 --> 00:13:32,190
like at the bottom only after both have

00:13:30,660 --> 00:13:35,520
been downloaded it will download the bed

00:13:32,190 --> 00:13:38,610
front itself and why is that the case

00:13:35,520 --> 00:13:41,610
so browsers usually tend to download as

00:13:38,610 --> 00:13:43,220
little data as possible to not waste any

00:13:41,610 --> 00:13:45,810
bandwidth so they are only downloading

00:13:43,220 --> 00:13:47,550
for example background images or web

00:13:45,810 --> 00:13:49,770
fonts when they are actually used on the

00:13:47,550 --> 00:13:51,270
page and in order to know if they are

00:13:49,770 --> 00:13:53,040
used in the page they have to download

00:13:51,270 --> 00:13:54,959
all the style sheets and then also and

00:13:53,040 --> 00:13:56,670
also the HTML and then apply the style

00:13:54,959 --> 00:13:58,740
sheets and check the selectors and see

00:13:56,670 --> 00:14:00,690
if those selectors match and then

00:13:58,740 --> 00:14:02,790
download the images and reference or or

00:14:00,690 --> 00:14:04,860
not and this is why they have to

00:14:02,790 --> 00:14:07,680
download both of them only then will

00:14:04,860 --> 00:14:09,540
download the actual headphones and as

00:14:07,680 --> 00:14:12,870
you can all my might be able to see it

00:14:09,540 --> 00:14:16,110
takes roughly 4.2 seconds to download

00:14:12,870 --> 00:14:18,240
the entire page under 3G conditions so

00:14:16,110 --> 00:14:22,110
there's one important thing about the

00:14:18,240 --> 00:14:25,890
Google web font API that is that the

00:14:22,110 --> 00:14:28,560
path is not stable so if you would if

00:14:25,890 --> 00:14:30,180
you were just to preload the entire font

00:14:28,560 --> 00:14:32,490
then it wouldn't work because it might

00:14:30,180 --> 00:14:34,500
change to more or in a week you cannot

00:14:32,490 --> 00:14:35,940
know but what is relatively low but has

00:14:34,500 --> 00:14:37,890
been relatively stable throughout the

00:14:35,940 --> 00:14:40,740
years is that it is going to be served

00:14:37,890 --> 00:14:43,500
from a host that is called fond stodgy

00:14:40,740 --> 00:14:44,520
steady calm so that hasn't changed in

00:14:43,500 --> 00:14:47,459
years or I don't know if it hasn't

00:14:44,520 --> 00:14:51,360
changed at all ever so what you can do

00:14:47,459 --> 00:14:54,029
is you can add a link tag to your head

00:14:51,360 --> 00:14:56,430
with the rel set to pre connect so and

00:14:54,029 --> 00:14:58,200
the atrial set to where the funds are

00:14:56,430 --> 00:15:00,779
going to be downloaded from and this

00:14:58,200 --> 00:15:03,180
will advise the browser to Otel force

00:15:00,779 --> 00:15:06,050
the browser basically to already connect

00:15:03,180 --> 00:15:09,180
against this host so doing DNS TCP

00:15:06,050 --> 00:15:10,680
handshake and he'll essentially and then

00:15:09,180 --> 00:15:13,320
there's also across originator boots

00:15:10,680 --> 00:15:16,020
which we ignore for now and I will come

00:15:13,320 --> 00:15:18,450
to this in a second as well because it's

00:15:16,020 --> 00:15:20,820
kinda interesting but if we if we add

00:15:18,450 --> 00:15:23,790
this to our hat then the resulting

00:15:20,820 --> 00:15:25,589
waterfall suddenly looks like this so

00:15:23,790 --> 00:15:28,230
again my website is downloaded and then

00:15:25,589 --> 00:15:30,990
it starts it downloads the both style

00:15:28,230 --> 00:15:31,529
sheets parallel as before but now it

00:15:30,990 --> 00:15:34,320
already

00:15:31,529 --> 00:15:36,120
connects to to the host of the of the

00:15:34,320 --> 00:15:36,460
web font it doesn't download it yet so

00:15:36,120 --> 00:15:38,350
you might

00:15:36,460 --> 00:15:40,750
notice the gap because it still needs to

00:15:38,350 --> 00:15:43,030
evaluate both CSS files in order to know

00:15:40,750 --> 00:15:45,520
if it's actually going to be needed but

00:15:43,030 --> 00:15:47,530
we already told the browser that we want

00:15:45,520 --> 00:15:49,570
to connect against this house which it

00:15:47,530 --> 00:15:51,760
does right away so that when the

00:15:49,570 --> 00:15:53,320
wavefront file needs to be downloaded it

00:15:51,760 --> 00:15:56,020
will be much much faster because you

00:15:53,320 --> 00:15:58,060
don't have to open the connection

00:15:56,020 --> 00:16:01,180
because it's already been opened and now

00:15:58,060 --> 00:16:04,000
it's only three seconds or 3.1 seconds

00:16:01,180 --> 00:16:06,130
so we got rid of more than a second of

00:16:04,000 --> 00:16:09,990
Patriot time by only adding this link

00:16:06,130 --> 00:16:12,160
tag to the head I think is kinda mazing

00:16:09,990 --> 00:16:15,400
quickly going back to this cross origin

00:16:12,160 --> 00:16:17,470
attribute so for I guess for DRM reasons

00:16:15,400 --> 00:16:19,210
funds Bev funds are subject to to the

00:16:17,470 --> 00:16:22,180
same origin policy so that you cannot

00:16:19,210 --> 00:16:25,000
just include reference from from anybody

00:16:22,180 --> 00:16:27,220
and the front face specification

00:16:25,000 --> 00:16:30,310
requires that funds are loaded in an

00:16:27,220 --> 00:16:31,630
enemy's cause mode and for some reason I

00:16:30,310 --> 00:16:34,930
don't know maybe some of you can answer

00:16:31,630 --> 00:16:37,300
this is browsers appear to maintain a

00:16:34,930 --> 00:16:41,020
separate pool of TCP connections for

00:16:37,300 --> 00:16:42,850
those kind of requests which means if

00:16:41,020 --> 00:16:44,800
you do not set cross origin then you

00:16:42,850 --> 00:16:49,390
will have two TCP connections because it

00:16:44,800 --> 00:16:52,390
cannot reuse the first one so let's have

00:16:49,390 --> 00:16:54,370
a look at the browser support so the

00:16:52,390 --> 00:16:58,420
browser support is actually pretty good

00:16:54,370 --> 00:17:00,910
it's only it's supported for is for 70%

00:16:58,420 --> 00:17:07,510
of users apparently already so I think

00:17:00,910 --> 00:17:09,820
it's safe to - already just use it the

00:17:07,510 --> 00:17:12,760
second one is the second resource hint

00:17:09,820 --> 00:17:14,950
is called DNS prefetch and it's it is

00:17:12,760 --> 00:17:17,380
kind of similar to how preconnect works

00:17:14,950 --> 00:17:19,560
but it only does the DNS resolving and

00:17:17,380 --> 00:17:23,740
does not open the TCP connection and

00:17:19,560 --> 00:17:27,280
this is mostly useful for resources that

00:17:23,740 --> 00:17:28,750
you will not need now but now wish where

00:17:27,280 --> 00:17:31,120
you don't don't know if it's going to

00:17:28,750 --> 00:17:33,060
happen in a second or maybe in five

00:17:31,120 --> 00:17:35,500
seconds or maybe even in a minute and

00:17:33,060 --> 00:17:40,480
one example I would like to give is

00:17:35,500 --> 00:17:41,860
Amazon so Amazon has this autocomplete

00:17:40,480 --> 00:17:46,150
feature which you might have already

00:17:41,860 --> 00:17:48,400
seen and this was really quick but and

00:17:46,150 --> 00:17:50,260
the thing is the autocomplete service

00:17:48,400 --> 00:17:52,210
itself does not

00:17:50,260 --> 00:17:54,910
live on amazon.com it actually lives on

00:17:52,210 --> 00:17:57,820
completion amazon.com which is a

00:17:54,910 --> 00:17:59,680
different host then amazon.com so if you

00:17:57,820 --> 00:18:02,560
where to start typing your browser would

00:17:59,680 --> 00:18:04,870
need to resolve this host before it can

00:18:02,560 --> 00:18:07,480
actually make the request and what they

00:18:04,870 --> 00:18:09,820
are doing is in their head they add this

00:18:07,480 --> 00:18:12,520
rate link tag with the relation said to

00:18:09,820 --> 00:18:14,980
DNS prefetch and the href said to

00:18:12,520 --> 00:18:17,530
completion amazon.com so as soon as you

00:18:14,980 --> 00:18:19,270
open their main page that's this is

00:18:17,530 --> 00:18:20,680
already going to be resolved and when

00:18:19,270 --> 00:18:24,340
you start typing it will will just

00:18:20,680 --> 00:18:26,740
appear in work which is cool and also

00:18:24,340 --> 00:18:29,920
simple and it has even better browser

00:18:26,740 --> 00:18:32,650
support then then pre Connect which is

00:18:29,920 --> 00:18:35,380
kind of interesting so what you can do

00:18:32,650 --> 00:18:37,000
is if you actually want preconnect but

00:18:35,380 --> 00:18:39,790
also want to give browsers that do not

00:18:37,000 --> 00:18:42,040
support reconnect but to support DNS

00:18:39,790 --> 00:18:44,830
prefetch at least something the DNS

00:18:42,040 --> 00:18:46,960
prefetch you can basically just specify

00:18:44,830 --> 00:18:49,180
both in one link tag and then if the

00:18:46,960 --> 00:18:51,880
browser supports pre connect it will

00:18:49,180 --> 00:18:54,670
simply use pre connect and if it does

00:18:51,880 --> 00:19:02,080
not but our support DNS prefetch then it

00:18:54,670 --> 00:19:06,370
will resort to DNS prefetch the next one

00:19:02,080 --> 00:19:09,460
is prefetch and prefetch allows you to

00:19:06,370 --> 00:19:11,320
to actually download resources but that

00:19:09,460 --> 00:19:15,720
you that you don't need right now but

00:19:11,320 --> 00:19:18,550
that you are going to need later and

00:19:15,720 --> 00:19:21,160
like for future for future navigations

00:19:18,550 --> 00:19:23,320
so and cache would supply so if you if

00:19:21,160 --> 00:19:25,030
you download if you prefetch a file and

00:19:23,320 --> 00:19:27,130
it has a cache lifetime of one hour then

00:19:25,030 --> 00:19:30,310
if you come back later then it will

00:19:27,130 --> 00:19:32,470
still be served from the cache the the

00:19:30,310 --> 00:19:34,540
thing to know is that prefetch files

00:19:32,470 --> 00:19:36,070
will not get it will not be executed so

00:19:34,540 --> 00:19:37,540
it's totally safe to prefetch for

00:19:36,070 --> 00:19:39,760
example scripts limiters they would just

00:19:37,540 --> 00:19:42,040
be downloaded and with a low priority

00:19:39,760 --> 00:19:44,050
and nothing will be done with it until

00:19:42,040 --> 00:19:46,090
you two need it and it would like to

00:19:44,050 --> 00:19:49,900
give to two examples for that as well

00:19:46,090 --> 00:19:52,690
so going back to my cat store maybe so

00:19:49,900 --> 00:19:54,310
usually an online store flow is is

00:19:52,690 --> 00:19:56,830
pretty clear so I have a product page

00:19:54,310 --> 00:19:59,080
and then I put products into my cart and

00:19:56,830 --> 00:20:00,790
then I go to the cart page and then from

00:19:59,080 --> 00:20:03,340
the cart page I go to the checkout which

00:20:00,790 --> 00:20:03,910
sometimes is a separate check out a

00:20:03,340 --> 00:20:05,890
separate

00:20:03,910 --> 00:20:08,440
application and then I will do I will

00:20:05,890 --> 00:20:09,880
give you my money there basically so

00:20:08,440 --> 00:20:12,670
what you can do when I'm on the cart

00:20:09,880 --> 00:20:14,290
page you can be pretty certain that I'm

00:20:12,670 --> 00:20:15,790
going to go to the checkout as well

00:20:14,290 --> 00:20:16,360
because if I'm already in the card why

00:20:15,790 --> 00:20:19,000
wouldn't I

00:20:16,360 --> 00:20:22,390
so you can at this point already

00:20:19,000 --> 00:20:24,610
prefetch the the files that your app is

00:20:22,390 --> 00:20:26,590
going to need for for the checkout

00:20:24,610 --> 00:20:28,390
experience and then just prefetch them

00:20:26,590 --> 00:20:30,130
and as soon as I hit this go to or

00:20:28,390 --> 00:20:32,320
proceed to checkout button the stuff

00:20:30,130 --> 00:20:37,500
will already be there and leading to

00:20:32,320 --> 00:20:40,060
better experience the second example is

00:20:37,500 --> 00:20:41,740
similar but maybe a bit different so if

00:20:40,060 --> 00:20:44,170
you have a login page lock in a login

00:20:41,740 --> 00:20:46,300
form then it's also you can also be

00:20:44,170 --> 00:20:47,980
pretty certain that my intent is is to

00:20:46,300 --> 00:20:51,310
log in and use the locked-in experience

00:20:47,980 --> 00:20:54,040
so why not just real Oh a prefetch the

00:20:51,310 --> 00:20:55,600
the assets images in scripts that you

00:20:54,040 --> 00:20:58,120
need for the locked experience at this

00:20:55,600 --> 00:20:59,770
point already because it doesn't hurt if

00:20:58,120 --> 00:21:02,110
you are pretty sure that that I will

00:20:59,770 --> 00:21:04,570
need them then you can use the bandwidth

00:21:02,110 --> 00:21:08,500
and just give me a better better

00:21:04,570 --> 00:21:11,170
experience and the browser support also

00:21:08,500 --> 00:21:12,970
is pretty good it got all of this got a

00:21:11,170 --> 00:21:14,860
lot better in recent months because in

00:21:12,970 --> 00:21:16,930
this case not but also safari naira

00:21:14,860 --> 00:21:19,480
safari started supporting we saw since

00:21:16,930 --> 00:21:20,470
apart from this one apparently so this

00:21:19,480 --> 00:21:23,470
is pretty good and this is even

00:21:20,470 --> 00:21:27,610
supported in IE in edge so pretty safe

00:21:23,470 --> 00:21:30,790
to use the last one I would like to talk

00:21:27,610 --> 00:21:34,060
about is also the newest one and maybe

00:21:30,790 --> 00:21:37,060
even the most interesting one it is

00:21:34,060 --> 00:21:41,380
called preload and you can use preload

00:21:37,060 --> 00:21:42,820
to download resources that you need for

00:21:41,380 --> 00:21:44,800
the current navigation for the current

00:21:42,820 --> 00:21:47,470
page view but that the browser cannot

00:21:44,800 --> 00:21:50,170
know about yet but you do know so now I

00:21:47,470 --> 00:21:54,730
would like to go back to my my to a bad

00:21:50,170 --> 00:21:57,490
font example and just briefly go go back

00:21:54,730 --> 00:22:00,310
to the initial initial waterfall chart

00:21:57,490 --> 00:22:02,830
like the first one like just to recap

00:22:00,310 --> 00:22:04,180
that we had to download both CSS files

00:22:02,830 --> 00:22:06,250
and only afterwards the webform was

00:22:04,180 --> 00:22:08,380
downloaded and I know I only said that

00:22:06,250 --> 00:22:11,230
when we are using Google Wave phones we

00:22:08,380 --> 00:22:12,970
cannot know the path but let's just

00:22:11,230 --> 00:22:15,220
pretend for this example that we can

00:22:12,970 --> 00:22:16,750
know the path and if you actually wanted

00:22:15,220 --> 00:22:17,590
to use this technique you could also

00:22:16,750 --> 00:22:19,960
consider

00:22:17,590 --> 00:22:23,380
hosting the web font yourself and be in

00:22:19,960 --> 00:22:27,760
control of the UL and then no no wait

00:22:23,380 --> 00:22:31,180
for sure and all right we got one too

00:22:27,760 --> 00:22:33,940
fast and sorry so and so what you can do

00:22:31,180 --> 00:22:35,410
is add at this link tech we've preload

00:22:33,940 --> 00:22:38,050
and then set it to the edge proof that

00:22:35,410 --> 00:22:40,270
we know pretend that we know and what

00:22:38,050 --> 00:22:41,980
happens then is if you look at the

00:22:40,270 --> 00:22:44,590
resulting waterfall chart that the web

00:22:41,980 --> 00:22:46,450
phone itself will be downloaded and

00:22:44,590 --> 00:22:50,700
parallel with all the other stuff and

00:22:46,450 --> 00:22:52,840
will be will be ready much much earlier

00:22:50,700 --> 00:22:54,460
which was kind of cool you can use it

00:22:52,840 --> 00:22:56,290
for for all kinds of stuff and we will

00:22:54,460 --> 00:22:58,480
come to to that right now because if you

00:22:56,290 --> 00:23:02,200
might have noticed there was this s

00:22:58,480 --> 00:23:05,590
attribute in here and the S attribute is

00:23:02,200 --> 00:23:07,630
the B crest type and you can have plenty

00:23:05,590 --> 00:23:09,700
of them you can use scripts for example

00:23:07,630 --> 00:23:11,650
if you have third-party scripts that you

00:23:09,700 --> 00:23:15,240
are loading by an inline script loader

00:23:11,650 --> 00:23:17,410
or you can have images that maybe are

00:23:15,240 --> 00:23:20,260
referenced as background images in your

00:23:17,410 --> 00:23:22,900
CSS files and you can even preload fetch

00:23:20,260 --> 00:23:26,050
requests which bring which gives us

00:23:22,900 --> 00:23:27,610
interesting interesting new stuff which

00:23:26,050 --> 00:23:30,730
I don't want to get into detail right

00:23:27,610 --> 00:23:33,250
now but why do we even have to set

00:23:30,730 --> 00:23:35,290
request type why do we need it so it's

00:23:33,250 --> 00:23:39,370
needed so that the browser can

00:23:35,290 --> 00:23:41,170
prioritize the request because style

00:23:39,370 --> 00:23:43,420
sheets might might be downloaded with a

00:23:41,170 --> 00:23:46,210
higher priority than images but it is

00:23:43,420 --> 00:23:49,360
also used to set the appropriate except

00:23:46,210 --> 00:23:51,220
header so that the browser sense doesn't

00:23:49,360 --> 00:23:52,750
request an image when you actually want

00:23:51,220 --> 00:23:54,880
one a script from you or from your web

00:23:52,750 --> 00:23:57,880
server so that you can deliver the right

00:23:54,880 --> 00:23:59,590
thing but it's also used to enforce the

00:23:57,880 --> 00:24:01,060
content security policy and if you were

00:23:59,590 --> 00:24:02,440
in the first talk this morning you might

00:24:01,060 --> 00:24:05,260
already know what it is about but

00:24:02,440 --> 00:24:07,510
content security basically allows you in

00:24:05,260 --> 00:24:10,660
this case to specify from which host you

00:24:07,510 --> 00:24:12,280
want to allow to download resources from

00:24:10,660 --> 00:24:14,500
for example you could say I only want to

00:24:12,280 --> 00:24:15,460
allow images to be downloaded from image

00:24:14,500 --> 00:24:17,650
server com

00:24:15,460 --> 00:24:20,440
whereas scripts should be downloaded

00:24:17,650 --> 00:24:22,330
from script server calm and in order to

00:24:20,440 --> 00:24:26,170
enforce that Google will air Google the

00:24:22,330 --> 00:24:30,580
browser needs to know with what kind of

00:24:26,170 --> 00:24:31,300
file type it is dealing with and if you

00:24:30,580 --> 00:24:33,790
fail

00:24:31,300 --> 00:24:35,050
to set a resource type or set incorrect

00:24:33,790 --> 00:24:37,630
one then you will have basically have

00:24:35,050 --> 00:24:39,990
double fetches and preload will not give

00:24:37,630 --> 00:24:39,990
you anything

00:24:40,050 --> 00:24:46,060
one other thing is there's responsive

00:24:43,780 --> 00:24:47,770
design so if you which is basically

00:24:46,060 --> 00:24:50,170
trying to make your your web app work

00:24:47,770 --> 00:24:54,430
across screen sizes right and oftentimes

00:24:50,170 --> 00:24:56,050
you need to download resources depending

00:24:54,430 --> 00:24:57,970
on the screen size for example the

00:24:56,050 --> 00:24:59,650
background image for for mobile app for

00:24:57,970 --> 00:25:01,150
mobile version might be a completely

00:24:59,650 --> 00:25:03,700
different one than the one for the

00:25:01,150 --> 00:25:06,070
desktop experience and usually people

00:25:03,700 --> 00:25:09,160
use media queries for that so you

00:25:06,070 --> 00:25:12,190
specify a max width and then if the max

00:25:09,160 --> 00:25:14,050
width of your device is in the is in

00:25:12,190 --> 00:25:16,300
this realm then it will download this

00:25:14,050 --> 00:25:18,130
and otherwise the other luckily browser

00:25:16,300 --> 00:25:22,630
vendors have this also in mind when they

00:25:18,130 --> 00:25:25,060
invented preload so you can use the

00:25:22,630 --> 00:25:26,770
media actually boot and in preload in

00:25:25,060 --> 00:25:28,720
the link tag as well and then said max

00:25:26,770 --> 00:25:30,850
for example the max width and then the

00:25:28,720 --> 00:25:32,830
browser will only download a preload

00:25:30,850 --> 00:25:37,510
those where the media query actually

00:25:32,830 --> 00:25:40,270
matches and here is the one the one

00:25:37,510 --> 00:25:42,700
resource in where support got

00:25:40,270 --> 00:25:44,050
significantly better in the last three

00:25:42,700 --> 00:25:46,980
months even I think so it's now

00:25:44,050 --> 00:25:49,540
supported in all major browsers but IE

00:25:46,980 --> 00:25:52,240
and it's even already in at 17

00:25:49,540 --> 00:25:54,910
apparently so I think it's now ready

00:25:52,240 --> 00:25:59,830
ready to be used and I would definitely

00:25:54,910 --> 00:26:02,500
look into that so and with that I'm

00:25:59,830 --> 00:26:05,290
almost almost finished but I would like

00:26:02,500 --> 00:26:07,120
to finish in this talk with two book

00:26:05,290 --> 00:26:10,300
recommendations so if you're interested

00:26:07,120 --> 00:26:12,670
in in this topic I can highly advise the

00:26:10,300 --> 00:26:15,160
book high performance browser networking

00:26:12,670 --> 00:26:17,470
by egoic this one is even available for

00:26:15,160 --> 00:26:21,070
free as a progressive web app on the

00:26:17,470 --> 00:26:23,320
internet so if we do google it and and

00:26:21,070 --> 00:26:25,480
read it maybe on your way home and then

00:26:23,320 --> 00:26:27,730
there's also an in fact basically the

00:26:25,480 --> 00:26:30,340
first five to ten minutes in this talk

00:26:27,730 --> 00:26:32,620
we're out of this book and then there's

00:26:30,340 --> 00:26:34,780
also HTTP the definite guide which are

00:26:32,620 --> 00:26:38,590
also enjoyed reading couple of years ago

00:26:34,780 --> 00:26:42,290
so and with that I'd like to thank you

00:26:38,590 --> 00:26:44,230
for listening and see you around

00:26:42,290 --> 00:26:47,349
thank you

00:26:44,230 --> 00:26:47,349

YouTube URL: https://www.youtube.com/watch?v=6q75MVFLlok


