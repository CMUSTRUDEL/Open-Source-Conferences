Title: Dominik Kundel - Introduction to Web Security | JSUnconf 2018
Publication date: 2018-05-13
Playlist: JSUnconf 2018
Description: 
	
Captions: 
	00:00:02,300 --> 00:00:05,330
[Music]

00:00:09,139 --> 00:00:14,969
welcome everyone over the next like

00:00:13,170 --> 00:00:16,800
that's the official type talk of the

00:00:14,969 --> 00:00:19,320
title I didn't bother to write that on

00:00:16,800 --> 00:00:20,760
the piece of paper but welcome everyone

00:00:19,320 --> 00:00:22,859
I would like to give you over the next

00:00:20,760 --> 00:00:24,630
thirty minutes as I said a brief

00:00:22,859 --> 00:00:26,310
introduction of like web security and

00:00:24,630 --> 00:00:28,019
things that I believe are important for

00:00:26,310 --> 00:00:29,939
every web developer no matter whether

00:00:28,019 --> 00:00:31,859
you're responsible for security or not

00:00:29,939 --> 00:00:34,500
because in my opinion everyone is

00:00:31,859 --> 00:00:36,630
responsible for security and not just

00:00:34,500 --> 00:00:38,460
the person who has it in their title and

00:00:36,630 --> 00:00:40,410
hopefully by the end of the talk

00:00:38,460 --> 00:00:43,050
all of these abbreviations gonna make it

00:00:40,410 --> 00:00:44,160
a little bit more sense to you but

00:00:43,050 --> 00:00:46,410
before we start I would like to

00:00:44,160 --> 00:00:48,360
introduce myself so I'm Dominic I live

00:00:46,410 --> 00:00:50,850
in Berlin and I work as a weapon as a

00:00:48,360 --> 00:00:53,309
developer evangelist for a company

00:00:50,850 --> 00:00:54,930
called Twilio we were the ones who put

00:00:53,309 --> 00:00:58,170
out the t-shirts if you manage to grab

00:00:54,930 --> 00:01:00,059
one and we have we're an API company

00:00:58,170 --> 00:01:04,799
that has api's around communications

00:01:00,059 --> 00:01:06,680
such as SMS voice video or chat as well

00:01:04,799 --> 00:01:09,090
as things like two-factor authentication

00:01:06,680 --> 00:01:10,500
but there's one more thing that you

00:01:09,090 --> 00:01:12,090
should know about me and I you might

00:01:10,500 --> 00:01:14,820
have gotten the hint by me running

00:01:12,090 --> 00:01:17,909
around like this I'm part of a group

00:01:14,820 --> 00:01:19,770
called one zjs we're just a bunch of

00:01:17,909 --> 00:01:21,590
lovely people that you're more than

00:01:19,770 --> 00:01:24,659
welcome to come up to and chat with us

00:01:21,590 --> 00:01:26,640
that's the first time we have pulled

00:01:24,659 --> 00:01:28,799
this off back at row J's which is an

00:01:26,640 --> 00:01:31,650
amazing conference organized by Matt

00:01:28,799 --> 00:01:34,530
Lane walking over there and now running

00:01:31,650 --> 00:01:37,079
away it's a social network for web web

00:01:34,530 --> 00:01:39,600
developers who are developers in general

00:01:37,079 --> 00:01:41,369
who love onesies and you know being a

00:01:39,600 --> 00:01:43,200
developer I obviously made sure that

00:01:41,369 --> 00:01:45,570
this is a secure as possible so that

00:01:43,200 --> 00:01:48,360
people with bananas come hacker if you

00:01:45,570 --> 00:01:49,920
see the banana trying to hack their you

00:01:48,360 --> 00:01:52,110
know and I thought of everything so it

00:01:49,920 --> 00:01:54,149
uses HTTP and thanks for let's encrypt

00:01:52,110 --> 00:01:56,880
there's really no excuse to not using

00:01:54,149 --> 00:01:57,960
HTTPS because you can do it for free it

00:01:56,880 --> 00:02:00,320
uses HSTs

00:01:57,960 --> 00:02:04,140
which is the HTTP strict Transport

00:02:00,320 --> 00:02:06,000
protocol which is the thing that makes

00:02:04,140 --> 00:02:07,799
sure that you can't go to Google when

00:02:06,000 --> 00:02:09,619
you're on an open network that is trying

00:02:07,799 --> 00:02:11,640
to redirect you to a captive portal

00:02:09,619 --> 00:02:12,280
basically what it makes sure is that

00:02:11,640 --> 00:02:15,430
there

00:02:12,280 --> 00:02:19,540
no down rate in your connection when you

00:02:15,430 --> 00:02:21,840
are from HTTP to HTTPS no mixed content

00:02:19,540 --> 00:02:24,340
meaning there's no HTTP content on my

00:02:21,840 --> 00:02:26,440
https website

00:02:24,340 --> 00:02:28,120
I'm sanitizing the input because as the

00:02:26,440 --> 00:02:30,400
social networks obviously you can post

00:02:28,120 --> 00:02:33,160
things in my case with markdown and I'm

00:02:30,400 --> 00:02:35,140
sanitizing that input and there's no

00:02:33,160 --> 00:02:37,000
room for sequel injections because if

00:02:35,140 --> 00:02:42,040
you are not using a real database there

00:02:37,000 --> 00:02:43,480
are no real sequel injections and I'm

00:02:42,040 --> 00:02:45,040
not talking about no sequel databases

00:02:43,480 --> 00:02:47,470
because there are no sequel injections

00:02:45,040 --> 00:02:49,450
as well but I'm really just using a

00:02:47,470 --> 00:02:51,340
plain storage so there's no room for me

00:02:49,450 --> 00:02:53,820
to have like any sequel injections or no

00:02:51,340 --> 00:02:56,590
sequel injections turns out though that

00:02:53,820 --> 00:02:59,980
developing secure web applications isn't

00:02:56,590 --> 00:03:01,870
as easy as I thought so I asked my buddy

00:02:59,980 --> 00:03:04,870
Bob Ellison to kind of like take a stab

00:03:01,870 --> 00:03:07,000
at the application and they found a

00:03:04,870 --> 00:03:09,250
bunch of vulnerabilities that I wanted

00:03:07,000 --> 00:03:10,840
to share with you and with that let's

00:03:09,250 --> 00:03:12,190
actually take a look at the site now you

00:03:10,840 --> 00:03:14,019
can actually see it so this is how the

00:03:12,190 --> 00:03:17,350
fluffiest social network and the work

00:03:14,019 --> 00:03:20,290
looks like I'm gonna switch to cloning

00:03:17,350 --> 00:03:22,269
so I can all right so if we go here

00:03:20,290 --> 00:03:25,390
that's the login portal and I'm gonna

00:03:22,269 --> 00:03:27,190
open the dev tools here and go to the

00:03:25,390 --> 00:03:30,010
network tab just so we can see what's

00:03:27,190 --> 00:03:32,530
actually happening on the side and I'm

00:03:30,010 --> 00:03:35,590
gonna log in here with my super secure

00:03:32,530 --> 00:03:39,610
password and what we're doing is we're

00:03:35,590 --> 00:03:43,540
doing a normal post request and we're

00:03:39,610 --> 00:03:46,840
signing a auth token here which is what

00:03:43,540 --> 00:03:53,079
is called a jar to jason JWT or a JSON

00:03:46,840 --> 00:03:56,829
web token and if I go to okay installed

00:03:53,079 --> 00:03:59,410
a small helper tool here to let me work

00:03:56,829 --> 00:04:03,239
better with you tokens but if you never

00:03:59,410 --> 00:04:07,690
saw how a JSON web token looked like

00:04:03,239 --> 00:04:10,000
there's a nice tool called JWT IO where

00:04:07,690 --> 00:04:11,440
we can inspect this and basically a JSON

00:04:10,000 --> 00:04:14,140
web token has three different sections

00:04:11,440 --> 00:04:16,299
so it has a it has a header which

00:04:14,140 --> 00:04:18,489
defines hey this is actually a judge and

00:04:16,299 --> 00:04:19,930
then it has an algorithm which is used

00:04:18,489 --> 00:04:22,180
to generate a signature which is the

00:04:19,930 --> 00:04:24,190
last part of it and then in the middle

00:04:22,180 --> 00:04:24,880
we have a payload and this payload you

00:04:24,190 --> 00:04:26,950
can have

00:04:24,880 --> 00:04:28,720
arbitrary data now the header and the

00:04:26,950 --> 00:04:31,240
payload you should be aware are not in

00:04:28,720 --> 00:04:33,160
like encrypted they're simply base64

00:04:31,240 --> 00:04:34,960
encoded so you should never have like

00:04:33,160 --> 00:04:36,310
sensible data in there anyway it's like

00:04:34,960 --> 00:04:40,030
there shouldn't be a password in there

00:04:36,310 --> 00:04:41,320
please don't put a password in there but

00:04:40,030 --> 00:04:43,390
like to make sure that this can't be

00:04:41,320 --> 00:04:45,730
like temporary with we actually have a

00:04:43,390 --> 00:04:47,260
signature in our case we can see the

00:04:45,730 --> 00:04:49,390
signature right now it's invalid because

00:04:47,260 --> 00:04:51,490
I'm trying to verify it verified against

00:04:49,390 --> 00:04:55,090
a secret called secret and I was smart

00:04:51,490 --> 00:04:56,800
enough to not use that as my secret now

00:04:55,090 --> 00:04:59,380
the thing is if you if you look at the

00:04:56,800 --> 00:05:01,240
spec of jobs there's a bunch of

00:04:59,380 --> 00:05:04,840
algorithms that this should support and

00:05:01,240 --> 00:05:06,280
one of them is called none which you as

00:05:04,840 --> 00:05:07,990
you can see the signature disappears

00:05:06,280 --> 00:05:11,110
because we're just simply not generating

00:05:07,990 --> 00:05:14,110
a signature and this is sort of meant to

00:05:11,110 --> 00:05:15,880
be for you know like non sensitive data

00:05:14,110 --> 00:05:18,640
if you just want to try to transmit data

00:05:15,880 --> 00:05:22,420
in like a standardized format the thing

00:05:18,640 --> 00:05:26,230
though is that we can we can try and see

00:05:22,420 --> 00:05:28,830
if my library is weak enough to fail

00:05:26,230 --> 00:05:32,920
with this so we switch the role to admin

00:05:28,830 --> 00:05:34,900
and just submit this and if we refresh

00:05:32,920 --> 00:05:37,720
the page now let's see if you notice any

00:05:34,900 --> 00:05:39,790
changes we're now able to authenticate

00:05:37,720 --> 00:05:41,230
as an admin in fact we wouldn't have had

00:05:39,790 --> 00:05:42,730
to login in the first place we could

00:05:41,230 --> 00:05:46,120
have just generated this token um

00:05:42,730 --> 00:05:47,740
because I'm verifying this token and

00:05:46,120 --> 00:05:49,840
then take that as a source of truth on

00:05:47,740 --> 00:05:54,970
my website which is what most websites

00:05:49,840 --> 00:05:56,920
actually do and that's as you can see

00:05:54,970 --> 00:05:59,500
not great because like we could log in

00:05:56,920 --> 00:06:01,390
as any music so how can we protect

00:05:59,500 --> 00:06:03,160
ourselves from that the first thing you

00:06:01,390 --> 00:06:05,170
should do is you should really use HTTP

00:06:03,160 --> 00:06:06,670
only cookies if you're if there's no

00:06:05,170 --> 00:06:08,320
reason for it to be accessible in

00:06:06,670 --> 00:06:10,120
JavaScript and in this case the

00:06:08,320 --> 00:06:12,520
authentication token there is really no

00:06:10,120 --> 00:06:14,170
use for it to be access accessible

00:06:12,520 --> 00:06:15,940
JavaScript you should also make sure

00:06:14,170 --> 00:06:17,530
that it's signed meaning it's signed

00:06:15,940 --> 00:06:20,050
with a secret so that nobody else can

00:06:17,530 --> 00:06:21,370
temper with it and it's secure meaning

00:06:20,050 --> 00:06:23,950
it's only transfer via a secure

00:06:21,370 --> 00:06:26,800
connection but then there's also the

00:06:23,950 --> 00:06:28,930
fact that you should use as secure jaat

00:06:26,800 --> 00:06:30,760
implementations so the library that I

00:06:28,930 --> 00:06:33,130
was actually using is Jason web token

00:06:30,760 --> 00:06:34,870
but I was using an old version of it and

00:06:33,130 --> 00:06:36,400
the old version has two drawbacks it

00:06:34,870 --> 00:06:38,900
doesn't allow you to whitelist

00:06:36,400 --> 00:06:40,250
algorithms meaning specifying Oh

00:06:38,900 --> 00:06:41,900
only the algorithms that should be

00:06:40,250 --> 00:06:45,080
supported in this case I really just

00:06:41,900 --> 00:06:46,790
want to support HS 256 and then good

00:06:45,080 --> 00:06:49,729
implementations also have this fallback

00:06:46,790 --> 00:06:52,130
where if you're trying to verify a job

00:06:49,729 --> 00:06:54,800
that has no signature and you're trying

00:06:52,130 --> 00:06:57,259
to verify it with a like with a secret

00:06:54,800 --> 00:07:00,139
then this should fail like if the secret

00:06:57,259 --> 00:07:01,580
isn't null this should always fail so if

00:07:00,139 --> 00:07:04,460
you're if you're up to date with your

00:07:01,580 --> 00:07:08,270
dependencies here you'll be able to have

00:07:04,460 --> 00:07:09,919
not even that's Equifax and instead have

00:07:08,270 --> 00:07:11,360
like a secure implementation if you're

00:07:09,919 --> 00:07:12,949
not familiar with the accurate fact

00:07:11,360 --> 00:07:14,720
story you should look that up but

00:07:12,949 --> 00:07:16,880
basically that was a massive hack that

00:07:14,720 --> 00:07:18,229
happened in the u.s. purely because the

00:07:16,880 --> 00:07:19,880
company wasn't up to date with their

00:07:18,229 --> 00:07:23,810
with their software and there was a

00:07:19,880 --> 00:07:26,090
known vulnerability around this cool so

00:07:23,810 --> 00:07:27,800
I said this is a social network so how

00:07:26,090 --> 00:07:30,560
busy let me fix this because it's

00:07:27,800 --> 00:07:32,360
getting really warm under this so

00:07:30,560 --> 00:07:34,580
obviously you're able to post things on

00:07:32,360 --> 00:07:37,120
this so if we go back here I said this

00:07:34,580 --> 00:07:44,510
is markdown so we can do things like

00:07:37,120 --> 00:07:46,639
hello Jess I'm con are you and we can

00:07:44,510 --> 00:07:49,370
post this all this does is again it does

00:07:46,639 --> 00:07:51,770
an HTTP POST request here with some form

00:07:49,370 --> 00:07:54,199
data in the bottom with the actual

00:07:51,770 --> 00:07:56,930
message and then we use the auth token

00:07:54,199 --> 00:07:59,599
to verify that like on which user's

00:07:56,930 --> 00:08:01,520
behalf we should post this now the

00:07:59,599 --> 00:08:03,470
problem with that is that this can be

00:08:01,520 --> 00:08:06,409
used by attackers to perform so-called

00:08:03,470 --> 00:08:08,870
cross-site request forgery since we're

00:08:06,409 --> 00:08:11,599
using cookies the browser sort of overly

00:08:08,870 --> 00:08:13,039
eager to see hey they're like I have

00:08:11,599 --> 00:08:14,330
cookies for this page so I'll just

00:08:13,039 --> 00:08:16,400
submit them you know like I will just

00:08:14,330 --> 00:08:19,159
send them with every form request even

00:08:16,400 --> 00:08:20,690
if they're on a different domain so that

00:08:19,159 --> 00:08:23,240
the basically an attacker can

00:08:20,690 --> 00:08:25,039
impersonate you by just kind of getting

00:08:23,240 --> 00:08:27,020
you to if you're logged in on a page

00:08:25,039 --> 00:08:30,199
already to go to a website and then they

00:08:27,020 --> 00:08:31,430
can do things on your behalf so the

00:08:30,199 --> 00:08:35,930
first thing that happened was when I

00:08:31,430 --> 00:08:37,729
went to this page this is a target blank

00:08:35,930 --> 00:08:38,750
link so just a normal link that should

00:08:37,729 --> 00:08:40,940
open in a new window

00:08:38,750 --> 00:08:44,150
the problem with target blank links is

00:08:40,940 --> 00:08:46,400
that the new page has access to the

00:08:44,150 --> 00:08:48,709
opening page by using window dot opener

00:08:46,400 --> 00:08:50,360
and window dot opener has a location

00:08:48,709 --> 00:08:52,370
property and that works just like the

00:08:50,360 --> 00:08:54,140
location property that you would use

00:08:52,370 --> 00:08:56,839
your normal window meaning you can

00:08:54,140 --> 00:08:59,450
redirect page requests you can redirect

00:08:56,839 --> 00:09:01,279
the original page to anything else and

00:08:59,450 --> 00:09:03,800
that's what an attacker could use then

00:09:01,279 --> 00:09:05,390
in our case we just navigated it to like

00:09:03,800 --> 00:09:07,370
a harmless page but this could be a

00:09:05,390 --> 00:09:09,110
phishing page as well and users would

00:09:07,370 --> 00:09:11,510
likely not detect that so in the case of

00:09:09,110 --> 00:09:13,220
something like Facebook if you would

00:09:11,510 --> 00:09:16,370
post a post a link there and they would

00:09:13,220 --> 00:09:18,260
use target blank links the new page

00:09:16,370 --> 00:09:20,210
could then do window that opener and

00:09:18,260 --> 00:09:21,890
have redirect you to something that

00:09:20,210 --> 00:09:23,450
looks like Facebook and most users would

00:09:21,890 --> 00:09:26,480
not detect this unless they see it in

00:09:23,450 --> 00:09:28,520
the URL bar unfortunately there's a way

00:09:26,480 --> 00:09:33,980
to protect yourself against that there's

00:09:28,520 --> 00:09:36,110
actually yeah there's two properties

00:09:33,980 --> 00:09:38,420
that you should add under the rel

00:09:36,110 --> 00:09:40,400
attribute which is no opener and no

00:09:38,420 --> 00:09:42,620
refers oh no opener make sure in most

00:09:40,400 --> 00:09:45,230
browsers to just not give the new page

00:09:42,620 --> 00:09:47,870
access to window not opener and then no

00:09:45,230 --> 00:09:49,700
refer will make sure that on the

00:09:47,870 --> 00:09:52,640
browsers that don't support no opener

00:09:49,700 --> 00:09:57,170
that you will actually not have access

00:09:52,640 --> 00:09:59,270
to the refer link to protect yourself

00:09:57,170 --> 00:10:02,480
from cross-site request forgeries or sea

00:09:59,270 --> 00:10:04,250
surface acts this is fairly

00:10:02,480 --> 00:10:06,380
straightforward as well it's a bit more

00:10:04,250 --> 00:10:08,180
work because what we need to do is when

00:10:06,380 --> 00:10:10,339
we get the page that you want to do the

00:10:08,180 --> 00:10:12,529
like submission later on we need to

00:10:10,339 --> 00:10:16,279
generate a C surf token so that's just a

00:10:12,529 --> 00:10:18,230
unique token for the user that we will

00:10:16,279 --> 00:10:20,450
set on the one hand as a cookie in our

00:10:18,230 --> 00:10:22,450
case underscore C surf and then we will

00:10:20,450 --> 00:10:25,010
also submit that as on the page

00:10:22,450 --> 00:10:27,110
somewhere as for example a hidden input

00:10:25,010 --> 00:10:28,790
field and then when the when we do the

00:10:27,110 --> 00:10:30,650
actual post requests instead of just

00:10:28,790 --> 00:10:32,930
submitting the cookie we will also

00:10:30,650 --> 00:10:36,320
manually submit this value either as a

00:10:32,930 --> 00:10:39,260
header or we will submit it as a request

00:10:36,320 --> 00:10:40,370
body or query parameter and the reason

00:10:39,260 --> 00:10:41,870
why this actually protects you from

00:10:40,370 --> 00:10:44,360
these sort of attacks is that the

00:10:41,870 --> 00:10:46,040
attacker would be able to kind of

00:10:44,360 --> 00:10:48,110
leverage the fact that the browser sends

00:10:46,040 --> 00:10:50,510
these cookies automatically but there's

00:10:48,110 --> 00:10:52,730
no way for the user to read the attacker

00:10:50,510 --> 00:10:56,180
to read the cookie because that's

00:10:52,730 --> 00:10:58,459
blocked by only being accessible from

00:10:56,180 --> 00:11:01,760
your own domain so that's why this

00:10:58,459 --> 00:11:03,589
protection works now let's talk about

00:11:01,760 --> 00:11:05,870
little Bobbie tables younger brother the

00:11:03,589 --> 00:11:07,880
cross-site scripting attack

00:11:05,870 --> 00:11:10,580
if you're not familiar with little Bobby

00:11:07,880 --> 00:11:14,390
tables it originates from an xkcd comic

00:11:10,580 --> 00:11:16,279
where family of hackers named their kid

00:11:14,390 --> 00:11:17,839
like a sequel injection and the director

00:11:16,279 --> 00:11:20,690
of the school is sort of mad because it

00:11:17,839 --> 00:11:24,050
dropped all the student records because

00:11:20,690 --> 00:11:26,180
they weren't sanitizing their inputs and

00:11:24,050 --> 00:11:27,650
if we talk about cross-site scripting

00:11:26,180 --> 00:11:30,589
this is one of the most famous

00:11:27,650 --> 00:11:32,210
cross-site scripting attacks does anyone

00:11:30,589 --> 00:11:34,910
have an idea what this source code is

00:11:32,210 --> 00:11:38,480
from so if I haven't seen anyone who

00:11:34,910 --> 00:11:41,360
guessed this all right so this is from a

00:11:38,480 --> 00:11:44,660
famous attack called the myspace war

00:11:41,360 --> 00:11:46,430
more Sammy worm or JC JC or worm and

00:11:44,660 --> 00:11:48,890
that was a cross-site scripting attack

00:11:46,430 --> 00:11:52,250
from 2005 performed by a person called

00:11:48,890 --> 00:11:55,310
Sammy and what this would do is if he

00:11:52,250 --> 00:11:57,230
posted this on his page and I would send

00:11:55,310 --> 00:11:59,330
friend requests to everyone who visited

00:11:57,230 --> 00:12:01,070
his page and then post that on their

00:11:59,330 --> 00:12:03,350
page and then send friend requests to

00:12:01,070 --> 00:12:05,120
them that's also how they caught him

00:12:03,350 --> 00:12:07,010
because Sammy had overnight several

00:12:05,120 --> 00:12:09,080
million friends on MySpace

00:12:07,010 --> 00:12:13,010
which is a slight indicator that there

00:12:09,080 --> 00:12:14,779
he did something and the thing with the

00:12:13,010 --> 00:12:17,140
reason why this is interesting is that

00:12:14,779 --> 00:12:21,290
myspace actually had access s protection

00:12:17,140 --> 00:12:23,570
but Sammy was able to circumvent this

00:12:21,290 --> 00:12:25,490
XSS protection and two of the tricks

00:12:23,570 --> 00:12:29,420
that I personally found interesting were

00:12:25,490 --> 00:12:32,330
these two so there wasn't any

00:12:29,420 --> 00:12:34,339
possibility to use inline script tags so

00:12:32,330 --> 00:12:37,250
Sammy couldn't use that however what

00:12:34,339 --> 00:12:39,860
they allow was to use CSS so he created

00:12:37,250 --> 00:12:42,520
a div tag and used CSS and specify the

00:12:39,860 --> 00:12:44,870
background URL to then have a JavaScript

00:12:42,520 --> 00:12:47,839
protocol in there that let him write

00:12:44,870 --> 00:12:50,900
JavaScript they disabled though to use

00:12:47,839 --> 00:12:52,850
quotes in there so what he had to do is

00:12:50,900 --> 00:12:54,709
he had to basically eval another

00:12:52,850 --> 00:12:56,870
attribute that he would pick out of the

00:12:54,709 --> 00:12:59,510
Dom in this case it was just the same

00:12:56,870 --> 00:13:01,279
diff tag and then eval that code where

00:12:59,510 --> 00:13:03,500
you could write the code the other thing

00:13:01,279 --> 00:13:06,860
is they blocked certain keywords such as

00:13:03,500 --> 00:13:09,170
inner HTML or onreadystatechange which

00:13:06,860 --> 00:13:11,959
is used on Ajax requests if you are not

00:13:09,170 --> 00:13:14,540
using something like jQuery or if you're

00:13:11,959 --> 00:13:17,290
not using something like fetch these

00:13:14,540 --> 00:13:19,520
days which wasn't around at that time

00:13:17,290 --> 00:13:21,649
however he circumvented

00:13:19,520 --> 00:13:23,690
by basically turning those words into

00:13:21,649 --> 00:13:25,160
strings chopping them in the middle

00:13:23,690 --> 00:13:26,779
recon catenae ting them and then

00:13:25,160 --> 00:13:31,339
availing that because no regular

00:13:26,779 --> 00:13:32,660
expression was able to catch that and he

00:13:31,339 --> 00:13:34,130
used a bunch of other tricks as well if

00:13:32,660 --> 00:13:35,089
you want to figure if you want to read

00:13:34,130 --> 00:13:38,390
about them you should check out that

00:13:35,089 --> 00:13:41,420
blog post but the bottom line here is

00:13:38,390 --> 00:13:43,580
that it's really hard serve to block XSS

00:13:41,420 --> 00:13:46,100
and now you might say well I could just

00:13:43,580 --> 00:13:48,500
block eval right but javascript is this

00:13:46,100 --> 00:13:50,600
beautiful language that allows you to

00:13:48,500 --> 00:13:54,620
write JavaScript code in a million ways

00:13:50,600 --> 00:13:56,810
so all of these to eval and those are

00:13:54,620 --> 00:13:59,120
not the only four solutions like we can

00:13:56,810 --> 00:14:00,589
do way more marching clapper he is

00:13:59,120 --> 00:14:03,529
actually from Hamburg he did a great

00:14:00,589 --> 00:14:07,190
talk and just come Iceland about how you

00:14:03,529 --> 00:14:08,990
grow JavaScript in Hebrew and in sort of

00:14:07,190 --> 00:14:11,110
all sorts of other languages including

00:14:08,990 --> 00:14:13,370
languages from the Star Wars universe

00:14:11,110 --> 00:14:14,899
sort of like you can write this and any

00:14:13,370 --> 00:14:17,990
kind of character set so you should

00:14:14,899 --> 00:14:22,279
really just not trust that you can just

00:14:17,990 --> 00:14:24,230
block things by regular expression so

00:14:22,279 --> 00:14:26,600
bottom line is blocking XSS is not

00:14:24,230 --> 00:14:29,120
trivial and in fact I have a

00:14:26,600 --> 00:14:32,120
vulnerability on here as well so if we

00:14:29,120 --> 00:14:35,060
go here the library that I'm using to

00:14:32,120 --> 00:14:37,010
convert the markdown to HTML is called

00:14:35,060 --> 00:14:40,339
marked it's one of the most popular

00:14:37,010 --> 00:14:42,829
libraries on NPM for to do that and the

00:14:40,339 --> 00:14:44,720
version that I'm using is not the latest

00:14:42,829 --> 00:14:46,399
but the second to latest or something

00:14:44,720 --> 00:14:48,950
and that one actually has a

00:14:46,399 --> 00:14:52,490
vulnerability so by default it has a

00:14:48,950 --> 00:14:55,930
sanitize function so things like alert

00:14:52,490 --> 00:14:58,690
hello won't work but let's just be sure

00:14:55,930 --> 00:15:01,670
so this doesn't work it's being escaped

00:14:58,690 --> 00:15:04,370
now that we can use a similar trick -

00:15:01,670 --> 00:15:05,779
Sammis and use the javascript protocol

00:15:04,370 --> 00:15:08,149
here and we're just going to create a

00:15:05,779 --> 00:15:11,149
link here so that's how you create a

00:15:08,149 --> 00:15:14,180
link and markdown and we're going to try

00:15:11,149 --> 00:15:16,610
to do alert one here I'm going to copy

00:15:14,180 --> 00:15:18,649
this and this is being escaped as well

00:15:16,610 --> 00:15:20,240
because the library is smart enough to

00:15:18,649 --> 00:15:23,240
detect that that's essentially just

00:15:20,240 --> 00:15:24,829
writing inline JavaScript now this is

00:15:23,240 --> 00:15:28,430
where it becomes fun I'm just going to

00:15:24,829 --> 00:15:29,600
make this a bit bigger I'm not sure how

00:15:28,430 --> 00:15:32,209
familiar you are with character

00:15:29,600 --> 00:15:32,520
encodings but you can express a closing

00:15:32,209 --> 00:15:35,490
prayer and

00:15:32,520 --> 00:15:38,340
Jesus as an percent hash 41 semicolon

00:15:35,490 --> 00:15:42,470
that's literally the same character and

00:15:38,340 --> 00:15:47,070
if you look up your ASCII table colin is

00:15:42,470 --> 00:15:48,330
ampersand hash 58 semicolon and we post

00:15:47,070 --> 00:15:50,280
this we'll see you that's already a

00:15:48,330 --> 00:15:51,600
difference right there is no closing

00:15:50,280 --> 00:15:54,210
parenthesis here anymore

00:15:51,600 --> 00:15:55,500
there's just no text so we're getting

00:15:54,210 --> 00:15:56,910
somewhere

00:15:55,500 --> 00:15:59,070
but it's still smart enough to figure

00:15:56,910 --> 00:16:00,690
out that like hey ampersand hash 58

00:15:59,070 --> 00:16:05,220
that's a semi that's a call in so I'm

00:16:00,690 --> 00:16:07,560
just gonna block this however if we add

00:16:05,220 --> 00:16:09,510
this small word this the best word than

00:16:07,560 --> 00:16:13,710
JavaScript because we never know what it

00:16:09,510 --> 00:16:15,660
is the story looks a bit different

00:16:13,710 --> 00:16:17,280
because suddenly the link appeared and

00:16:15,660 --> 00:16:20,100
what happens here and if we click this

00:16:17,280 --> 00:16:21,690
we'll see that it actually works the

00:16:20,100 --> 00:16:23,700
reason why this works is that the

00:16:21,690 --> 00:16:25,290
browser tries to be helpful and the

00:16:23,700 --> 00:16:28,530
browser sees oh yeah you're using

00:16:25,290 --> 00:16:30,360
ampersand hash 58 I don't see a

00:16:28,530 --> 00:16:33,090
semicolon but I think that's just a typo

00:16:30,360 --> 00:16:35,340
so I'll just insert that for you and

00:16:33,090 --> 00:16:37,170
then everything afterwards turns valid

00:16:35,340 --> 00:16:38,460
JavaScript so that's why I use this in

00:16:37,170 --> 00:16:40,440
this case because it's a valid

00:16:38,460 --> 00:16:42,060
JavaScript I thought would write some

00:16:40,440 --> 00:16:44,160
other things that would fail and

00:16:42,060 --> 00:16:45,810
wouldn't execute the next slide but

00:16:44,160 --> 00:16:48,990
because it's valid JavaScript this just

00:16:45,810 --> 00:16:51,180
works shoutout to guy from sneek who

00:16:48,990 --> 00:16:52,650
actually showed this to me they were

00:16:51,180 --> 00:16:54,450
also the ones who fixed this in this

00:16:52,650 --> 00:16:56,820
library unfortunately there's still a

00:16:54,450 --> 00:16:58,620
vulnerability in this library around

00:16:56,820 --> 00:17:01,110
data your eyes but it's a bit harder to

00:16:58,620 --> 00:17:03,150
demonstrate so I decided to show this

00:17:01,110 --> 00:17:05,610
one but the bottom line here is really

00:17:03,150 --> 00:17:07,230
that encoding can be really dangerous

00:17:05,610 --> 00:17:10,380
and there are a million ways to express

00:17:07,230 --> 00:17:14,610
the same code so just never trust user

00:17:10,380 --> 00:17:16,800
input be skeptical as you can also don't

00:17:14,610 --> 00:17:18,810
trust CSS because CSS can be dangerous

00:17:16,800 --> 00:17:20,459
as well Jake Archibald recently

00:17:18,810 --> 00:17:22,650
published a nice blog post about this

00:17:20,459 --> 00:17:25,200
kind of showing how you should just not

00:17:22,650 --> 00:17:26,459
trust third-party CSS because there are

00:17:25,200 --> 00:17:29,100
a bunch of things you can do about this

00:17:26,459 --> 00:17:32,460
as well there it's that's just an talk

00:17:29,100 --> 00:17:35,250
by itself all right let's talk about

00:17:32,460 --> 00:17:37,770
Jason P so Jason P if you're not

00:17:35,250 --> 00:17:39,960
familiar with that has especially been

00:17:37,770 --> 00:17:42,030
used in the past to circumvent same

00:17:39,960 --> 00:17:45,690
origin policy so that's the idea of

00:17:42,030 --> 00:17:49,710
loading data asynchronously on your page

00:17:45,690 --> 00:17:51,870
from from a separate domain and that's

00:17:49,710 --> 00:17:53,429
by default blocked with Ajax requests

00:17:51,870 --> 00:17:55,500
but there's a way to kind of like

00:17:53,429 --> 00:17:58,200
circumvent that and the idea there is

00:17:55,500 --> 00:18:00,750
you create a global function and then

00:17:58,200 --> 00:18:04,279
you insert dynamically a script tag in

00:18:00,750 --> 00:18:07,200
our case we just placed it in there and

00:18:04,279 --> 00:18:08,879
this is a JSONP enabled endpoint meaning

00:18:07,200 --> 00:18:10,950
it gets some query parameter with a

00:18:08,879 --> 00:18:13,230
callback name and what it will do is

00:18:10,950 --> 00:18:16,559
instead of returning the plain jason it

00:18:13,230 --> 00:18:19,379
will wrap the json into a into a

00:18:16,559 --> 00:18:21,769
function call so that basically this is

00:18:19,379 --> 00:18:25,139
being triggered as a callback function

00:18:21,769 --> 00:18:28,590
now this by itself is harmless unless

00:18:25,139 --> 00:18:30,120
you crapoly implement it and that means

00:18:28,590 --> 00:18:32,789
that you're not verifying what you're

00:18:30,120 --> 00:18:34,500
passing in here is a callback and if we

00:18:32,789 --> 00:18:36,600
have that and we have a cross-site

00:18:34,500 --> 00:18:38,850
scripting vulnerability this is where

00:18:36,600 --> 00:18:43,409
the fun part starts so for whatever

00:18:38,850 --> 00:18:46,289
reason I was logged out again so and

00:18:43,409 --> 00:18:49,740
again so how many of you are familiar

00:18:46,289 --> 00:18:51,090
with service workers all right so if

00:18:49,740 --> 00:18:53,460
you're not familiar with service workers

00:18:51,090 --> 00:18:56,129
there and network proxy that you can

00:18:53,460 --> 00:18:59,789
install meaning it can intercept network

00:18:56,129 --> 00:19:01,830
requests and sort of is often being used

00:18:59,789 --> 00:19:03,539
to create offline available apps so you

00:19:01,830 --> 00:19:05,789
can cache things manually and you can

00:19:03,539 --> 00:19:07,710
control the cache now this is a very

00:19:05,789 --> 00:19:09,600
powerful feature and that's why the

00:19:07,710 --> 00:19:13,980
browser's only allow you to install it

00:19:09,600 --> 00:19:16,259
from your own domain now so that an

00:19:13,980 --> 00:19:18,600
attacker can install one now if you have

00:19:16,259 --> 00:19:21,179
a JSONP implementation that is

00:19:18,600 --> 00:19:22,590
vulnerable meaning it doesn't verify

00:19:21,179 --> 00:19:24,840
what you're passing and as a callback

00:19:22,590 --> 00:19:26,610
you have a page on your own domain that

00:19:24,840 --> 00:19:28,889
allows you to generate any JavaScript

00:19:26,610 --> 00:19:32,970
and that's what I'm doing here so if I

00:19:28,889 --> 00:19:38,100
install this if I post this and we click

00:19:32,970 --> 00:19:40,500
this link we will see first nothing but

00:19:38,100 --> 00:19:42,210
then I refresh the page and I can

00:19:40,500 --> 00:19:44,100
refresh this as often as possible but

00:19:42,210 --> 00:19:45,299
I'm only seeing this hacked because what

00:19:44,100 --> 00:19:47,190
happened and actually that's where I

00:19:45,299 --> 00:19:50,340
need the dev tools but let's see if we

00:19:47,190 --> 00:19:53,190
can how they're working again I have no

00:19:50,340 --> 00:19:55,529
clue what's happening here so we can see

00:19:53,190 --> 00:19:57,590
that it installed a serviceworker and we

00:19:55,529 --> 00:19:59,059
can see that this is a very long URL for

00:19:57,590 --> 00:20:00,950
Service Worker because what I'm doing is

00:19:59,059 --> 00:20:03,230
in the callback I'm specifying the

00:20:00,950 --> 00:20:05,360
entire source code of this Service

00:20:03,230 --> 00:20:08,600
Worker so we click here that's the

00:20:05,360 --> 00:20:11,630
entire code basically it's a bunch of

00:20:08,600 --> 00:20:13,610
codes ending with a slash slash to kind

00:20:11,630 --> 00:20:15,650
of comment out the entire code mainly

00:20:13,610 --> 00:20:18,380
because we don't care about it like the

00:20:15,650 --> 00:20:22,850
entire payload but we could also just

00:20:18,380 --> 00:20:25,159
keep that going now in here all we do is

00:20:22,850 --> 00:20:28,669
we say that like hey any request that

00:20:25,159 --> 00:20:33,039
isn't to port 4000 we just override it

00:20:28,669 --> 00:20:36,350
with an h1 hacked and some other code

00:20:33,039 --> 00:20:38,480
now this is a very obvious one to pull

00:20:36,350 --> 00:20:40,730
off with this what you would typically

00:20:38,480 --> 00:20:43,039
see an attacker do in this situation

00:20:40,730 --> 00:20:45,860
would be to insert a script tag secretly

00:20:43,039 --> 00:20:47,539
without you ever noticing it because it

00:20:45,860 --> 00:20:50,149
doesn't it they don't have to overwrite

00:20:47,539 --> 00:20:51,919
the entire request response they can

00:20:50,149 --> 00:20:53,600
just insert something and then keep it

00:20:51,919 --> 00:20:55,669
going so you would never notice this

00:20:53,600 --> 00:20:58,820
like you if this is installed it's

00:20:55,669 --> 00:21:00,200
really hard to detect unless someone

00:20:58,820 --> 00:21:02,120
actually reads the source code of the

00:21:00,200 --> 00:21:04,450
Service Worker they have installed which

00:21:02,120 --> 00:21:06,919
at least I don't do for other websites

00:21:04,450 --> 00:21:11,090
I'm not sure if that's something you do

00:21:06,919 --> 00:21:14,179
as a hobby but if we unregister this and

00:21:11,090 --> 00:21:15,500
refresh the page it works again except

00:21:14,179 --> 00:21:19,309
that like you don't see it so I'm gonna

00:21:15,500 --> 00:21:21,950
close them there we go there we go so

00:21:19,309 --> 00:21:23,929
now you know the page works again cool

00:21:21,950 --> 00:21:26,690
so luckily there's a for a lot of these

00:21:23,929 --> 00:21:28,549
vulnerabilities there's a sort of hero

00:21:26,690 --> 00:21:31,340
in town that can protect you called

00:21:28,549 --> 00:21:33,409
content security policy and what this

00:21:31,340 --> 00:21:35,149
does is it allows you to specify a set

00:21:33,409 --> 00:21:38,299
of rules that the browser should play by

00:21:35,149 --> 00:21:40,970
with respect to your resources so if we

00:21:38,299 --> 00:21:43,490
go to this page which all it the only

00:21:40,970 --> 00:21:46,390
difference it does is it applies ESP on

00:21:43,490 --> 00:21:49,100
this so the first thing we see is that

00:21:46,390 --> 00:21:51,830
down here there used to be images but

00:21:49,100 --> 00:21:54,110
there they disappeared and if we click

00:21:51,830 --> 00:21:57,620
here that doesn't work anymore and this

00:21:54,110 --> 00:22:00,169
doesn't work either so if we look here

00:21:57,620 --> 00:22:01,730
and we go into the console pane we see a

00:22:00,169 --> 00:22:03,260
bunch of red messages and all of them

00:22:01,730 --> 00:22:06,890
have go in the same direction of saying

00:22:03,260 --> 00:22:10,930
hey all of these blocks violate the

00:22:06,890 --> 00:22:13,960
content security policy or CSP so

00:22:10,930 --> 00:22:16,300
look like it's essentially just an HTTP

00:22:13,960 --> 00:22:19,810
header that defines these rules to play

00:22:16,300 --> 00:22:23,110
by so in my case the CSP says hey the

00:22:19,810 --> 00:22:25,840
default source that we allow is anything

00:22:23,110 --> 00:22:27,880
from my own domain however for scripts

00:22:25,840 --> 00:22:29,770
and styles I only want to allow things

00:22:27,880 --> 00:22:32,080
that use a certain ons so that's

00:22:29,770 --> 00:22:33,760
something that changes on every request

00:22:32,080 --> 00:22:36,130
so attackers can't hard code this

00:22:33,760 --> 00:22:38,260
meaning only things that you on request

00:22:36,130 --> 00:22:39,580
are convinced that should be there can

00:22:38,260 --> 00:22:42,460
be there

00:22:39,580 --> 00:22:44,410
I completely block objects because I

00:22:42,460 --> 00:22:47,500
don't see any use case for flash on my

00:22:44,410 --> 00:22:49,660
page in fact I don't see a use case for

00:22:47,500 --> 00:22:52,990
flash on any page but feel free to

00:22:49,660 --> 00:22:54,460
convince me of other things for images I

00:22:52,990 --> 00:22:56,830
only allow things that are hosts on my

00:22:54,460 --> 00:23:01,000
own domain or if I'm API dot adorable

00:22:56,830 --> 00:23:03,070
i/o which I use for these adorable icons

00:23:01,000 --> 00:23:08,650
here some of them are adorable some of

00:23:03,070 --> 00:23:10,540
them are sort of weird and that's why

00:23:08,650 --> 00:23:12,120
for example the Twitter images didn't

00:23:10,540 --> 00:23:17,260
work that were further down on the page

00:23:12,120 --> 00:23:18,940
I block all fonts or I block all fonts

00:23:17,260 --> 00:23:21,040
that are not on my own domain or on

00:23:18,940 --> 00:23:23,170
google fonts and I block all mixed

00:23:21,040 --> 00:23:26,080
content meaning no HTTP content on the

00:23:23,170 --> 00:23:27,940
page as well as a report your I which is

00:23:26,080 --> 00:23:30,220
where it would report any kind of like

00:23:27,940 --> 00:23:37,060
failed request so if we go to my

00:23:30,220 --> 00:23:39,460
terminal we can see we can see all these

00:23:37,060 --> 00:23:40,960
requests being made here kind of like

00:23:39,460 --> 00:23:43,540
giving you information about hey what

00:23:40,960 --> 00:23:46,270
was violated there's a way to run this

00:23:43,540 --> 00:23:47,950
in report only mode as well so if you're

00:23:46,270 --> 00:23:50,350
trying to gradually move over to that

00:23:47,950 --> 00:23:52,210
you can say that like hey just report

00:23:50,350 --> 00:23:53,740
don't actually block the resources which

00:23:52,210 --> 00:23:55,420
is a good way to kind of like detect

00:23:53,740 --> 00:23:57,100
during development and stuff like that

00:23:55,420 --> 00:23:58,930
like hey which is like what are actually

00:23:57,100 --> 00:24:01,180
things that are being blocked by this

00:23:58,930 --> 00:24:03,120
and are we destroying the functionality

00:24:01,180 --> 00:24:05,530
or something

00:24:03,120 --> 00:24:08,140
CSP though shouldn't be your like

00:24:05,530 --> 00:24:10,300
security policy like you shouldn't just

00:24:08,140 --> 00:24:12,130
rely on that and be like yep nothing can

00:24:10,300 --> 00:24:14,710
happen to me now it should just be a

00:24:12,130 --> 00:24:18,100
safety net because writing really good

00:24:14,710 --> 00:24:20,170
CSP is hard so if you're relying on that

00:24:18,100 --> 00:24:23,770
there was a paper of Google where they

00:24:20,170 --> 00:24:25,540
have looked at CSP policies on famous

00:24:23,770 --> 00:24:28,090
website and a lot of them were

00:24:25,540 --> 00:24:30,220
completely insufficient so you shouldn't

00:24:28,090 --> 00:24:32,470
rely on that as like as a security

00:24:30,220 --> 00:24:34,870
policy always kind of think of all the

00:24:32,470 --> 00:24:36,730
other vulnerabilities I showed you and

00:24:34,870 --> 00:24:38,590
try to fix them just have this as a

00:24:36,730 --> 00:24:40,120
safety net that in case you screwed up

00:24:38,590 --> 00:24:42,960
something or a dependency screwed up

00:24:40,120 --> 00:24:45,250
something that you're you're a bit safer

00:24:42,960 --> 00:24:47,440
other things you should look out for are

00:24:45,250 --> 00:24:49,300
things like click tracking meaning you

00:24:47,440 --> 00:24:51,880
shouldn't allow two iframe your page

00:24:49,300 --> 00:24:55,090
unless you really have a use case for

00:24:51,880 --> 00:24:56,650
that and most pages don't so you can use

00:24:55,090 --> 00:24:59,440
that but I'll do that by an HTTP header

00:24:56,650 --> 00:25:00,970
they can either be deny or self self

00:24:59,440 --> 00:25:02,590
would allow you still to do it on your

00:25:00,970 --> 00:25:04,870
own page then I would just completely

00:25:02,590 --> 00:25:07,060
block it you should check out a library

00:25:04,870 --> 00:25:09,820
libraries like helmet which is a library

00:25:07,060 --> 00:25:12,070
for Express that set certain HTTP

00:25:09,820 --> 00:25:14,380
headers on your request that are just

00:25:12,070 --> 00:25:17,860
good practices for security one of them

00:25:14,380 --> 00:25:19,810
is disallowing the I framing don't show

00:25:17,860 --> 00:25:21,940
versions of fronted libraries and your

00:25:19,810 --> 00:25:24,250
server that's really important because

00:25:21,940 --> 00:25:26,290
that's like helping the attackers to

00:25:24,250 --> 00:25:28,570
like know exactly what they need to do

00:25:26,290 --> 00:25:32,110
because if they know you're using react

00:25:28,570 --> 00:25:33,370
versions 16-point whole point - then

00:25:32,110 --> 00:25:37,090
they know all right those are the

00:25:33,370 --> 00:25:38,410
vulnerabilities I should go for and same

00:25:37,090 --> 00:25:40,510
goes for the server if they know your

00:25:38,410 --> 00:25:42,190
expressed you're using an express server

00:25:40,510 --> 00:25:44,500
they already know that like those are

00:25:42,190 --> 00:25:46,000
the things I want to try uncheck for

00:25:44,500 --> 00:25:48,690
types of input so if you're expecting

00:25:46,000 --> 00:25:51,040
for somewhere parameter to be a string

00:25:48,690 --> 00:25:53,020
check that it's really a string because

00:25:51,040 --> 00:25:55,480
some libraries try to be nice to you and

00:25:53,020 --> 00:25:58,330
parse things as objects if they see

00:25:55,480 --> 00:26:00,490
that's a JSON for example with numbers

00:25:58,330 --> 00:26:01,990
and especially with objects this can be

00:26:00,490 --> 00:26:04,420
really dangerous because if you're

00:26:01,990 --> 00:26:07,420
trying to do like no sequel database

00:26:04,420 --> 00:26:10,480
lookup for example in MongoDB for like

00:26:07,420 --> 00:26:12,400
the password being being a string and I

00:26:10,480 --> 00:26:14,500
pass in an object I can do a no sequel

00:26:12,400 --> 00:26:17,500
injection and have login as any user

00:26:14,500 --> 00:26:18,520
through that other things consider

00:26:17,500 --> 00:26:22,720
security audits

00:26:18,520 --> 00:26:24,430
security is hard so contact someone who

00:26:22,720 --> 00:26:26,470
is a security expert if you have someone

00:26:24,430 --> 00:26:28,690
on your team that's great if you don't

00:26:26,470 --> 00:26:30,630
hire someone externally because it's a

00:26:28,690 --> 00:26:33,110
good investment you don't want to be

00:26:30,630 --> 00:26:34,490
thinking about this only when you go

00:26:33,110 --> 00:26:36,920
hacked because at that point it gets

00:26:34,490 --> 00:26:38,809
really expensive stay up to date with

00:26:36,920 --> 00:26:41,000
versions because their dependencies can

00:26:38,809 --> 00:26:44,750
introduce a bunch of vulnerabilities

00:26:41,000 --> 00:26:47,150
that you just never think of greenkeeper

00:26:44,750 --> 00:26:48,860
is a great tool for that and use tools

00:26:47,150 --> 00:26:51,740
to detect security vulnerabilities in

00:26:48,860 --> 00:26:53,929
your dependencies so NSP or sneak are

00:26:51,740 --> 00:26:56,059
great for that sneak in fact even

00:26:53,929 --> 00:26:58,400
patches security vulnerabilities for you

00:26:56,059 --> 00:27:00,799
like the data URI one and marked is

00:26:58,400 --> 00:27:02,090
actually patched if you use sneak even

00:27:00,799 --> 00:27:06,410
though it's not patched in the actual

00:27:02,090 --> 00:27:08,059
library to wrap this up use HTTP only

00:27:06,410 --> 00:27:10,610
cookies if there's no reason for them to

00:27:08,059 --> 00:27:13,070
be available in JavaScript be skeptical

00:27:10,610 --> 00:27:15,590
of JW TS just don't treat them as a

00:27:13,070 --> 00:27:18,919
single source of truth and have like an

00:27:15,590 --> 00:27:22,400
up-to-date library use no opener and no

00:27:18,919 --> 00:27:25,270
refer on your target blank links UC surf

00:27:22,400 --> 00:27:26,990
tokens whenever you have rely on like

00:27:25,270 --> 00:27:31,220
cookies for example has an

00:27:26,990 --> 00:27:33,620
authentication method blocking XSS isn't

00:27:31,220 --> 00:27:36,710
trivial because encoding can be really

00:27:33,620 --> 00:27:37,970
dangerous so just don't don't think

00:27:36,710 --> 00:27:40,820
you've got that covered

00:27:37,970 --> 00:27:42,260
always be skeptical and try to do

00:27:40,820 --> 00:27:45,470
different things to kind of circumvent

00:27:42,260 --> 00:27:47,030
that be careful of JSONP a callback

00:27:45,470 --> 00:27:49,340
should never contain anything that isn't

00:27:47,030 --> 00:27:50,780
a word character and here we never even

00:27:49,340 --> 00:27:53,660
like a number because we could start

00:27:50,780 --> 00:27:56,210
encoding things so just have only word

00:27:53,660 --> 00:27:59,330
characters in there UCSB as a safety net

00:27:56,210 --> 00:28:01,820
because it's really helpful and most

00:27:59,330 --> 00:28:03,140
importantly stay up to date because if

00:28:01,820 --> 00:28:06,200
your dependencies have vulnerabilities

00:28:03,140 --> 00:28:08,679
you can have the most secure code on

00:28:06,200 --> 00:28:11,360
your site you will still be vulnerable

00:28:08,679 --> 00:28:13,460
I'll publish those slides after this

00:28:11,360 --> 00:28:16,100
talk on this URL and I'll tweet about it

00:28:13,460 --> 00:28:17,390
as well so you can take a look the

00:28:16,100 --> 00:28:19,669
entire application that I showed you

00:28:17,390 --> 00:28:22,130
including documentation resources to

00:28:19,669 --> 00:28:25,160
security matters on this URL again I'm

00:28:22,130 --> 00:28:27,890
going to tweet this and I have stickers

00:28:25,160 --> 00:28:30,020
but both of these so if you find me

00:28:27,890 --> 00:28:32,990
later I can give you some of those if

00:28:30,020 --> 00:28:34,190
you're a sticker obsessed like I am and

00:28:32,990 --> 00:28:35,690
with that thank you everyone for your

00:28:34,190 --> 00:28:38,799
attention I'll be around for the rest of

00:28:35,690 --> 00:28:38,799
the day if you have any questions

00:28:41,210 --> 00:28:46,190
[Applause]

00:28:48,820 --> 00:28:51,970

YouTube URL: https://www.youtube.com/watch?v=-vYak5hEGrY


