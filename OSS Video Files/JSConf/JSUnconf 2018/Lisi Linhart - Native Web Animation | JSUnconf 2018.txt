Title: Lisi Linhart - Native Web Animation | JSUnconf 2018
Publication date: 2018-05-13
Playlist: JSUnconf 2018
Description: 
	
Captions: 
	00:00:02,330 --> 00:00:05,359
[Music]

00:00:09,200 --> 00:00:14,130
all right I'm going to tell you a little

00:00:11,910 --> 00:00:18,090
bit about native web animations so

00:00:14,130 --> 00:00:18,960
animation without libraries my name is

00:00:18,090 --> 00:00:22,230
Lizzie

00:00:18,960 --> 00:00:24,449
I'm live in hard on Twitter and

00:00:22,230 --> 00:00:27,140
listening hook dot info as my website if

00:00:24,449 --> 00:00:27,140
you wanna check it out

00:00:27,150 --> 00:00:33,870
this this talk used to be a three hours

00:00:29,970 --> 00:00:36,030
workshop so I cut it down to different

00:00:33,870 --> 00:00:37,680
topics so what we're gonna do is we're

00:00:36,030 --> 00:00:42,020
gonna do it a little bit interactive I

00:00:37,680 --> 00:00:44,840
have four different topics which is CSS

00:00:42,020 --> 00:00:50,250
transitions and CSS animation

00:00:44,840 --> 00:00:52,260
performance well she says custom

00:00:50,250 --> 00:00:56,610
properties and the web animations API

00:00:52,260 --> 00:00:59,399
and we're gonna we're gonna pick two so

00:00:56,610 --> 00:01:01,199
I'm gonna ask you to raise your hands

00:00:59,399 --> 00:01:03,359
you can raise your hands twice for two

00:01:01,199 --> 00:01:04,739
topics you're interested in and then the

00:01:03,359 --> 00:01:06,360
one with the most interest we're gonna

00:01:04,739 --> 00:01:08,070
we're gonna do because we can't do it

00:01:06,360 --> 00:01:10,020
all but you can come to me afterwards

00:01:08,070 --> 00:01:14,310
and I can tell you more about everything

00:01:10,020 --> 00:01:16,500
you want to know all right so if you

00:01:14,310 --> 00:01:19,350
wanna hear something about CSS

00:01:16,500 --> 00:01:25,080
transitions and CSS animations this one

00:01:19,350 --> 00:01:27,450
raise your hands all right if you want

00:01:25,080 --> 00:01:37,979
to hear something about animation

00:01:27,450 --> 00:01:42,720
performance CSS custom properties the

00:01:37,979 --> 00:01:45,390
web animations API alright so I think it

00:01:42,720 --> 00:01:55,920
was performance and the web animations

00:01:45,390 --> 00:02:00,030
API so all right so we're gonna start

00:01:55,920 --> 00:02:02,640
with performance when we do animation

00:02:00,030 --> 00:02:06,540
the most important property to use is

00:02:02,640 --> 00:02:08,429
the transform property there's four

00:02:06,540 --> 00:02:11,430
things the browser can really animate

00:02:08,429 --> 00:02:13,130
really cheaply and that's position scale

00:02:11,430 --> 00:02:16,070
rotation

00:02:13,130 --> 00:02:18,530
pasady and so position scale rotation

00:02:16,070 --> 00:02:25,460
you can do them all with CSS transforms

00:02:18,530 --> 00:02:28,970
and opacity is just CSS opacity yeah and

00:02:25,460 --> 00:02:32,960
you use them in CSS transform property

00:02:28,970 --> 00:02:36,290
mostly the transform property can do can

00:02:32,960 --> 00:02:38,450
do a lot of things you can translate

00:02:36,290 --> 00:02:41,810
things so you can move them left to

00:02:38,450 --> 00:02:44,930
right up and down on the XY axis and

00:02:41,810 --> 00:02:49,100
also in a 3d space with translate set

00:02:44,930 --> 00:02:51,680
you can rotate things on different axis

00:02:49,100 --> 00:02:54,890
on the set axis on the x axis and the y

00:02:51,680 --> 00:02:58,490
axis so you can also do 3d rotate you

00:02:54,890 --> 00:03:00,280
can scale things up and down then you

00:02:58,490 --> 00:03:03,710
can skew things

00:03:00,280 --> 00:03:06,890
yeah you can also rotate on different

00:03:03,710 --> 00:03:08,840
axes CSS reference is really useful the

00:03:06,890 --> 00:03:11,090
link on the bottom to like look at what

00:03:08,840 --> 00:03:15,640
transform can do and how to use two

00:03:11,090 --> 00:03:18,410
different the different properties

00:03:15,640 --> 00:03:20,930
because some of them use degrees some

00:03:18,410 --> 00:03:22,910
just use numbers between 0 and 1 some

00:03:20,930 --> 00:03:26,540
use pixels so it's all different

00:03:22,910 --> 00:03:29,120
depending on what you're using and in

00:03:26,540 --> 00:03:31,550
combination with transform the

00:03:29,120 --> 00:03:34,520
transformer richness it really important

00:03:31,550 --> 00:03:36,680
it tells your animation from which point

00:03:34,520 --> 00:03:39,140
it should start so if it should be

00:03:36,680 --> 00:03:42,770
reaching from the center from the top

00:03:39,140 --> 00:03:45,440
left from the bottom right it looks like

00:03:42,770 --> 00:03:49,820
the like the following so if it's from

00:03:45,440 --> 00:03:51,620
the center it's gonna transform like

00:03:49,820 --> 00:03:54,350
that then you can also have it outside

00:03:51,620 --> 00:03:57,800
of the object so you can rotate for

00:03:54,350 --> 00:03:59,810
example around the circle or you could

00:03:57,800 --> 00:04:01,640
just have it on the top left or on the

00:03:59,810 --> 00:04:07,640
bottom right wherever you need it to

00:04:01,640 --> 00:04:11,090
original so what happens when we change

00:04:07,640 --> 00:04:13,130
something this is really important to to

00:04:11,090 --> 00:04:16,250
know to realize how does the browser

00:04:13,130 --> 00:04:18,700
paint a website what changes you can

00:04:16,250 --> 00:04:22,870
make and how they influence the painting

00:04:18,700 --> 00:04:25,060
so first your Chavez script is evaluated

00:04:22,870 --> 00:04:27,219
then we

00:04:25,060 --> 00:04:30,249
then the browser is gonna recalculate

00:04:27,219 --> 00:04:33,009
your Styles he's gonna see how much

00:04:30,249 --> 00:04:35,740
space does every element need where does

00:04:33,009 --> 00:04:39,879
it go this is often when you do um left

00:04:35,740 --> 00:04:41,349
or right up top a button with CSS also

00:04:39,879 --> 00:04:44,229
they're layered calculations it's the

00:04:41,349 --> 00:04:46,509
same stuff then with their paintings so

00:04:44,229 --> 00:04:48,039
everything gets rasterized and put on

00:04:46,509 --> 00:04:50,430
two layers so you have different layers

00:04:48,039 --> 00:04:54,219
when your browser paint something and

00:04:50,430 --> 00:04:55,810
you can move layers independently so if

00:04:54,219 --> 00:04:57,699
you have a layer in the bottom you can

00:04:55,810 --> 00:05:00,069
move it independently from from an other

00:04:57,699 --> 00:05:03,159
layer but your browsers gonna um group

00:05:00,069 --> 00:05:04,870
things together into layers so you don't

00:05:03,159 --> 00:05:07,629
get too many layers because too many

00:05:04,870 --> 00:05:09,969
layers are also on performant and in the

00:05:07,629 --> 00:05:11,979
end we have the composite step and

00:05:09,969 --> 00:05:15,159
that's where the browser takes advantage

00:05:11,979 --> 00:05:17,830
of the GPU and all the layers get get

00:05:15,159 --> 00:05:19,960
glued together to one frame and that's

00:05:17,830 --> 00:05:23,080
what's shown to the user that happens in

00:05:19,960 --> 00:05:24,999
the last step so all of this happens in

00:05:23,080 --> 00:05:27,189
in one frame and so when we change

00:05:24,999 --> 00:05:30,460
different things it's gonna influence

00:05:27,189 --> 00:05:33,189
our performance so when we change layer

00:05:30,460 --> 00:05:35,469
it's gonna be in the layout step so in

00:05:33,189 --> 00:05:38,259
the second step this is when we changed

00:05:35,469 --> 00:05:40,569
with the March and the left the top all

00:05:38,259 --> 00:05:42,430
of these layout properties and that's

00:05:40,569 --> 00:05:45,009
really unperformed because then the

00:05:42,430 --> 00:05:47,289
browser needs to go to also through the

00:05:45,009 --> 00:05:49,719
other steps after that and that's why

00:05:47,289 --> 00:05:52,330
you don't really want to animate layout

00:05:49,719 --> 00:05:54,550
properties because yeah it's gonna be

00:05:52,330 --> 00:05:56,860
unperformed then with the paint step

00:05:54,550 --> 00:05:58,870
that's when we when we change for

00:05:56,860 --> 00:06:02,469
example the background color shadows

00:05:58,870 --> 00:06:05,050
outlines it's more performant and then

00:06:02,469 --> 00:06:07,419
layout but the most performant way to

00:06:05,050 --> 00:06:09,849
animate is like I already said transform

00:06:07,419 --> 00:06:13,319
property and that's happening on the

00:06:09,849 --> 00:06:16,180
composite layer so transform and opacity

00:06:13,319 --> 00:06:17,860
are the last step and then when you when

00:06:16,180 --> 00:06:19,889
you animate those you don't need to go

00:06:17,860 --> 00:06:23,860
through the previous steps the browser

00:06:19,889 --> 00:06:25,719
needs to run through yeah so try to

00:06:23,860 --> 00:06:29,349
animate are always on their composite

00:06:25,719 --> 00:06:32,050
step this is what it looks like in your

00:06:29,349 --> 00:06:36,500
dev tools so you can you can dip back

00:06:32,050 --> 00:06:39,080
animations and see what's happening what

00:06:36,500 --> 00:06:41,570
causing your animation to be slow where

00:06:39,080 --> 00:06:43,520
where the issues are yeah and the

00:06:41,570 --> 00:06:46,100
coloring you can also look at why it's

00:06:43,520 --> 00:06:48,590
taking so long

00:06:46,100 --> 00:06:51,320
also yeah like I already said a lot of

00:06:48,590 --> 00:06:53,510
layers a bad but it's good to like

00:06:51,320 --> 00:06:55,460
create layers for the right things so if

00:06:53,510 --> 00:06:57,530
you animate something specifically and

00:06:55,460 --> 00:06:59,780
you know you're gonna need an extra

00:06:57,530 --> 00:07:04,340
layer for that it's it's good to create

00:06:59,780 --> 00:07:07,400
layers so what creates a new layer 3d

00:07:04,340 --> 00:07:11,840
transform always creates a new layer so

00:07:07,400 --> 00:07:14,290
if you use trance let's see set or you

00:07:11,840 --> 00:07:17,540
know any any kind of 3d transform

00:07:14,290 --> 00:07:20,419
animated 2d transforms to also create

00:07:17,540 --> 00:07:22,910
layers so if you have keyframes the anim

00:07:20,419 --> 00:07:25,940
transforms you're gonna have those on a

00:07:22,910 --> 00:07:28,690
separate layer being on top of

00:07:25,940 --> 00:07:32,000
compositing layers also creates new

00:07:28,690 --> 00:07:34,580
creates a new layer so you have to see

00:07:32,000 --> 00:07:37,100
where where where your layers are and

00:07:34,580 --> 00:07:40,820
you should rather animate on top layers

00:07:37,100 --> 00:07:43,130
not on the bottom layers accelerated CSS

00:07:40,820 --> 00:07:46,729
filters create new layers and of course

00:07:43,130 --> 00:07:50,360
will change property creates a new layer

00:07:46,729 --> 00:07:52,010
that's the most popular one but you have

00:07:50,360 --> 00:07:57,320
to be aware when you create new layers

00:07:52,010 --> 00:07:59,720
that every layer consumes memory so ya

00:07:57,320 --> 00:08:01,790
only use them when you need them for

00:07:59,720 --> 00:08:05,360
animation and maybe remove them and

00:08:01,790 --> 00:08:08,840
something has stopped animating so this

00:08:05,360 --> 00:08:11,630
is SAS mixing for like really making

00:08:08,840 --> 00:08:16,160
sure that a new layer is created it uses

00:08:11,630 --> 00:08:19,669
will change then it uses a transform

00:08:16,160 --> 00:08:22,850
translate that because will change isn't

00:08:19,669 --> 00:08:24,530
supported in all browsers so if you

00:08:22,850 --> 00:08:29,290
really want to support all our browsers

00:08:24,530 --> 00:08:33,320
you're gonna probably use a 3d transform

00:08:29,290 --> 00:08:34,849
yeah and on will change because you

00:08:33,320 --> 00:08:37,400
always create new layers with will

00:08:34,849 --> 00:08:38,839
change you you shouldn't optimize all

00:08:37,400 --> 00:08:40,430
the elements because you're gonna get a

00:08:38,839 --> 00:08:43,310
lot of layers and you don't want that

00:08:40,430 --> 00:08:45,950
and only use it if the change happens

00:08:43,310 --> 00:08:47,060
constantly and maybe remove it when you

00:08:45,950 --> 00:08:51,750
don't need it anymore

00:08:47,060 --> 00:08:53,790
and yeah in some browsers it's not

00:08:51,750 --> 00:08:57,959
supported yet so you're gonna need to

00:08:53,790 --> 00:09:00,209
use the 3d transforms also another thing

00:08:57,959 --> 00:09:01,800
for performance that's really important

00:09:00,209 --> 00:09:05,640
is a function that's called

00:09:01,800 --> 00:09:07,500
requestanimationframe in JavaScript it's

00:09:05,640 --> 00:09:10,370
a function that the browser can optimize

00:09:07,500 --> 00:09:13,589
so your animations will be smooth there

00:09:10,370 --> 00:09:16,649
it will stop when you're in another tab

00:09:13,589 --> 00:09:18,300
and it allows the CPU to chill if you go

00:09:16,649 --> 00:09:19,800
to another website so it doesn't run

00:09:18,300 --> 00:09:22,800
consistently if you're not even looking

00:09:19,800 --> 00:09:25,350
at it and it's more battery friendly so

00:09:22,800 --> 00:09:27,990
if you do consistent changes consistent

00:09:25,350 --> 00:09:31,649
animations requestanimationframe is a

00:09:27,990 --> 00:09:33,329
great way to to make it more performant

00:09:31,649 --> 00:09:35,339
and you don't need to use it if you're

00:09:33,329 --> 00:09:38,730
using the web animations API because it

00:09:35,339 --> 00:09:40,290
does this automatically yeah and green

00:09:38,730 --> 00:09:44,790
sock of course also uses the

00:09:40,290 --> 00:09:47,010
requestanimationframe already and you

00:09:44,790 --> 00:09:49,290
can use the cancel animation frame

00:09:47,010 --> 00:09:52,529
function to end calling the

00:09:49,290 --> 00:09:54,660
requestanimationframe function this is

00:09:52,529 --> 00:09:58,829
what it looks like so it's a function

00:09:54,660 --> 00:10:01,620
and then you do your your changes and in

00:09:58,829 --> 00:10:04,260
the end you call this function again and

00:10:01,620 --> 00:10:06,180
you start it you start calling the

00:10:04,260 --> 00:10:08,209
requestanimationframe function by

00:10:06,180 --> 00:10:10,680
calling request animation frame on your

00:10:08,209 --> 00:10:16,110
function with your changes that should

00:10:10,680 --> 00:10:20,399
happen on every frame so to summarize

00:10:16,110 --> 00:10:21,959
this if you want to get performant

00:10:20,399 --> 00:10:25,260
animation you should only animate

00:10:21,959 --> 00:10:28,680
transform and opacity if possible use

00:10:25,260 --> 00:10:31,829
will change and request animation frame

00:10:28,680 --> 00:10:34,920
where you need them don't create too

00:10:31,829 --> 00:10:37,709
many layers look at what layers you are

00:10:34,920 --> 00:10:41,010
creating and animate elements on the top

00:10:37,709 --> 00:10:43,079
layers and also inspect and test the

00:10:41,010 --> 00:10:45,149
animations in the dev tools that's

00:10:43,079 --> 00:10:46,980
really important and I can show you

00:10:45,149 --> 00:10:50,459
later if someone is interested how to

00:10:46,980 --> 00:10:54,980
use the dev tools to inspect your

00:10:50,459 --> 00:10:59,100
animations all right that's the

00:10:54,980 --> 00:11:06,450
performance part let's see

00:10:59,100 --> 00:11:09,780
go to the web animations API so the web

00:11:06,450 --> 00:11:13,820
animations API tries to combine the

00:11:09,780 --> 00:11:16,290
advantages of CSS animation and

00:11:13,820 --> 00:11:19,440
performance like hardware acceleration

00:11:16,290 --> 00:11:21,600
with JavaScript so you animate

00:11:19,440 --> 00:11:27,030
completely in Chaves script but you have

00:11:21,600 --> 00:11:29,160
a lot of advantages you have in CSS yeah

00:11:27,030 --> 00:11:30,870
you animate completely in JavaScript you

00:11:29,160 --> 00:11:33,930
have more control over your animations

00:11:30,870 --> 00:11:36,260
so doing timelines in CSS is kind of

00:11:33,930 --> 00:11:39,870
hard if you have like more than three

00:11:36,260 --> 00:11:42,030
staggered animations to deal with so the

00:11:39,870 --> 00:11:45,270
web animations API tries to make this

00:11:42,030 --> 00:11:48,060
easier and you can also pause and make

00:11:45,270 --> 00:11:50,700
your animations faster it'sit's really

00:11:48,060 --> 00:11:52,890
good for like dynamic and reactive

00:11:50,700 --> 00:11:56,790
animations so when you have like mouse

00:11:52,890 --> 00:11:59,760
movements and other more more dynamic

00:11:56,790 --> 00:12:01,980
things you want to react to and you can

00:11:59,760 --> 00:12:03,510
really combine it nicely with JavaScript

00:12:01,980 --> 00:12:04,860
events because you do everything in

00:12:03,510 --> 00:12:06,570
JavaScript you can use it in your

00:12:04,860 --> 00:12:09,270
frameworks and you and you react

00:12:06,570 --> 00:12:11,190
wherever you need it and yeah you get

00:12:09,270 --> 00:12:12,930
controls and callbacks so this means

00:12:11,190 --> 00:12:15,450
when animation is finished you get a

00:12:12,930 --> 00:12:18,720
callback and you can pause it replay it

00:12:15,450 --> 00:12:22,560
whatever and you can group to grouping

00:12:18,720 --> 00:12:25,220
and timing so how does it look like the

00:12:22,560 --> 00:12:29,160
web animations API to call it you have

00:12:25,220 --> 00:12:30,840
you have a function on a Dom element so

00:12:29,160 --> 00:12:33,120
every Dom element if you do document

00:12:30,840 --> 00:12:38,190
query selector you can call on this Dom

00:12:33,120 --> 00:12:40,590
element animate function and it has two

00:12:38,190 --> 00:12:43,050
values so the keyframes object or a

00:12:40,590 --> 00:12:45,780
keyframes array is the stages of the

00:12:43,050 --> 00:12:47,340
different animations so where you start

00:12:45,780 --> 00:12:49,500
and where you end and how your animation

00:12:47,340 --> 00:12:51,930
behaviors and then the second part is

00:12:49,500 --> 00:12:54,300
the timings object its how its animated

00:12:51,930 --> 00:13:02,610
so how far fast it is how much delay it

00:12:54,300 --> 00:13:05,220
has and other timing related things all

00:13:02,610 --> 00:13:07,500
right so the first part the keyframes

00:13:05,220 --> 00:13:10,770
you can either use an object or an array

00:13:07,500 --> 00:13:13,650
if you use an object you have the CSS

00:13:10,770 --> 00:13:16,290
property and then give it all their work

00:13:13,650 --> 00:13:18,870
values you want to animate and if you

00:13:16,290 --> 00:13:21,540
have an array you have an array of

00:13:18,870 --> 00:13:24,020
objects and that's the different parts

00:13:21,540 --> 00:13:26,880
the different frames of your animation

00:13:24,020 --> 00:13:28,500
so that's for the first part of the

00:13:26,880 --> 00:13:32,850
function for the second part of a

00:13:28,500 --> 00:13:35,280
function you have a timing object it has

00:13:32,850 --> 00:13:38,880
the duration how often you would wander

00:13:35,280 --> 00:13:42,480
the animation if you run it forwards or

00:13:38,880 --> 00:13:46,170
backwards if you wanted to go forwards

00:13:42,480 --> 00:13:48,150
and back the delay the empty may and the

00:13:46,170 --> 00:13:50,400
easing so you can use all of these are

00:13:48,150 --> 00:13:53,520
really similar to CSS animation yet so

00:13:50,400 --> 00:13:57,210
you can use the CSS eating's you're used

00:13:53,520 --> 00:13:59,970
to you can use cubic pcs and also the

00:13:57,210 --> 00:14:04,170
direction and to fill are what you use

00:13:59,970 --> 00:14:06,360
in CSS animation so to call it you would

00:14:04,170 --> 00:14:09,120
get an object and then you would call

00:14:06,360 --> 00:14:11,310
that animate on this object you'd have

00:14:09,120 --> 00:14:14,610
two keyframes at the timings so for

00:14:11,310 --> 00:14:17,670
example this would do my object would be

00:14:14,610 --> 00:14:20,100
scaled to zero and not visible and then

00:14:17,670 --> 00:14:22,860
there's like zero percent and then at

00:14:20,100 --> 00:14:25,230
100% it would be scaled to one and

00:14:22,860 --> 00:14:28,680
visible so it would fade and scale in

00:14:25,230 --> 00:14:31,410
and then it would take two seconds

00:14:28,680 --> 00:14:33,120
I have an easing at run it once and to

00:14:31,410 --> 00:14:35,030
fill for words is the fill mode this

00:14:33,120 --> 00:14:38,160
means after the animation is finished

00:14:35,030 --> 00:14:41,900
it's gonna stay the way it was animated

00:14:38,160 --> 00:14:41,900
to and not go back to what it was before

00:14:42,230 --> 00:14:48,180
then once you have an animation so once

00:14:46,260 --> 00:14:50,550
you call this function you get back an

00:14:48,180 --> 00:14:52,410
animation object and you can do

00:14:50,550 --> 00:14:55,890
different things with this animation of

00:14:52,410 --> 00:14:58,530
object so you could get the play state

00:14:55,890 --> 00:15:00,870
in the second line if you if you're just

00:14:58,530 --> 00:15:02,970
played it it's going to be running you

00:15:00,870 --> 00:15:05,610
can pause your animation you can play

00:15:02,970 --> 00:15:09,570
your animation you can answer cancel it

00:15:05,610 --> 00:15:10,680
so may make it go away you can jump to

00:15:09,570 --> 00:15:15,119
the end of the animation

00:15:10,680 --> 00:15:17,490
or you could play it backwards and you

00:15:15,119 --> 00:15:21,199
could make it faster or slower depending

00:15:17,490 --> 00:15:25,610
on how fast your playback rate is and

00:15:21,199 --> 00:15:25,610
you also get callbacks

00:15:32,089 --> 00:15:38,879
you also get callbacks so also an

00:15:36,509 --> 00:15:41,129
animation object you get callback

00:15:38,879 --> 00:15:43,980
function so you can say animation on

00:15:41,129 --> 00:15:47,279
finish do something or when my animation

00:15:43,980 --> 00:15:49,079
is cancelled remove my whole Dom object

00:15:47,279 --> 00:15:58,170
because I don't need it anymore because

00:15:49,079 --> 00:15:59,910
the animation is done this is a little

00:15:58,170 --> 00:16:01,649
animation I built with the web animation

00:15:59,910 --> 00:16:03,929
API and I'm going to explain it to you

00:16:01,649 --> 00:16:06,779
so this is the keyframes and then the

00:16:03,929 --> 00:16:09,199
offset on every keyframe I can define an

00:16:06,779 --> 00:16:13,459
offset and that's similar to the

00:16:09,199 --> 00:16:18,389
percentages in CSS animation so offset

00:16:13,459 --> 00:16:21,709
point 33 would be 33% so I can have

00:16:18,389 --> 00:16:27,509
different parts where I want to animate

00:16:21,709 --> 00:16:31,679
my properties then I have a timing

00:16:27,509 --> 00:16:38,069
object and then I just call on my Dom

00:16:31,679 --> 00:16:40,769
object I call my animation and now what

00:16:38,069 --> 00:16:44,160
I can do is my tree is one Dom element

00:16:40,769 --> 00:16:46,709
and I can add an event listener and then

00:16:44,160 --> 00:16:49,290
I can take my animation object and I can

00:16:46,709 --> 00:16:52,050
set the current time which is the time

00:16:49,290 --> 00:16:53,999
of the animation of the Apple to zero so

00:16:52,050 --> 00:16:56,910
it starts from the beginning and then I

00:16:53,999 --> 00:17:01,620
replay it so I change I change the

00:16:56,910 --> 00:17:04,169
properties I can also add an event

00:17:01,620 --> 00:17:05,429
listener to the Apple and make it faster

00:17:04,169 --> 00:17:07,439
here in the bottom you see that it's

00:17:05,429 --> 00:17:10,829
that's a playback right so now the

00:17:07,439 --> 00:17:12,870
animation is a lot faster so I can

00:17:10,829 --> 00:17:20,039
really like dynamically change how my

00:17:12,870 --> 00:17:22,439
animation behaves in the browser yeah

00:17:20,039 --> 00:17:24,209
this is I think it's too small but this

00:17:22,439 --> 00:17:26,669
is an example I did in the workshop and

00:17:24,209 --> 00:17:29,850
here I'm just staggering

00:17:26,669 --> 00:17:32,100
different elements after and after

00:17:29,850 --> 00:17:34,919
another and then I can just stop the

00:17:32,100 --> 00:17:37,110
animation restarted and it's all just

00:17:34,919 --> 00:17:39,240
here in the JavaScript two different

00:17:37,110 --> 00:17:42,899
keyframes you can look at it later in

00:17:39,240 --> 00:17:45,840
copán and play around with it all right

00:17:42,899 --> 00:17:49,770
a little bit about the web animation API

00:17:45,840 --> 00:17:51,990
and CSS so what's the difference when

00:17:49,770 --> 00:17:55,980
should I use the web animations API when

00:17:51,990 --> 00:17:59,190
should I use CSS animation maybe well

00:17:55,980 --> 00:18:01,020
CSS is great for for styling and for

00:17:59,190 --> 00:18:04,409
static animations so if you have some

00:18:01,020 --> 00:18:07,169
predefined animations CSS this is really

00:18:04,409 --> 00:18:09,120
enough but if you want to like interact

00:18:07,169 --> 00:18:11,639
with the animation if you want to react

00:18:09,120 --> 00:18:14,070
to some JavaScript events if you want to

00:18:11,639 --> 00:18:16,350
react to something they use it as the

00:18:14,070 --> 00:18:20,610
web animation API might be a better

00:18:16,350 --> 00:18:24,630
option because yeah you can change all

00:18:20,610 --> 00:18:27,600
the things right there also transitions

00:18:24,630 --> 00:18:29,909
and hover and focus animations so maybe

00:18:27,600 --> 00:18:31,860
patterns or loading spinners they can

00:18:29,909 --> 00:18:36,029
all be defined in CSS because they don't

00:18:31,860 --> 00:18:38,820
really need to be that reactive and CSS

00:18:36,029 --> 00:18:40,620
also is really simple and declarative so

00:18:38,820 --> 00:18:43,620
you don't need to know like really a lot

00:18:40,620 --> 00:18:46,620
of JavaScript to do in CSS animation so

00:18:43,620 --> 00:18:49,620
if you want really simple animation CSS

00:18:46,620 --> 00:18:51,630
is enough and what's cool about CSS is

00:18:49,620 --> 00:18:53,220
also that you don't have JavaScript

00:18:51,630 --> 00:18:54,929
blocking so if you run a lot of

00:18:53,220 --> 00:18:56,970
JavaScript and you have all your

00:18:54,929 --> 00:18:59,010
animations in like a JavaScript

00:18:56,970 --> 00:19:00,750
animation library it can be that your

00:18:59,010 --> 00:19:02,789
animations are not running because all

00:19:00,750 --> 00:19:05,520
your Chaves script is really a ting and

00:19:02,789 --> 00:19:08,880
if you do CSS animations you won't have

00:19:05,520 --> 00:19:12,750
that problem the web animation API is

00:19:08,880 --> 00:19:15,809
great for sequencing because it's built

00:19:12,750 --> 00:19:17,299
for doing more complex animations you

00:19:15,809 --> 00:19:20,610
get controls callbacks

00:19:17,299 --> 00:19:23,340
you also get all your animations in your

00:19:20,610 --> 00:19:25,470
document timeline so you can get all the

00:19:23,340 --> 00:19:27,570
animations you have to find in your

00:19:25,470 --> 00:19:29,909
document and you can stop them all or

00:19:27,570 --> 00:19:32,530
replay them all or for accessibility

00:19:29,909 --> 00:19:35,470
make them slower or

00:19:32,530 --> 00:19:37,330
make them not play at all you also get

00:19:35,470 --> 00:19:40,540
hardware acceleration like you get in

00:19:37,330 --> 00:19:42,190
CSS and yeah it's gonna be natively in

00:19:40,540 --> 00:19:44,410
your browser in the future

00:19:42,190 --> 00:19:47,200
so all the browser's are already working

00:19:44,410 --> 00:19:49,420
on implementing it so it's gonna be a

00:19:47,200 --> 00:19:56,770
more advanced option on doing animation

00:19:49,420 --> 00:20:01,630
in the browser and yeah the the web

00:19:56,770 --> 00:20:04,090
animations API to libraries when you

00:20:01,630 --> 00:20:08,080
should use the web animation API versus

00:20:04,090 --> 00:20:09,760
like a big library like cheese app while

00:20:08,080 --> 00:20:11,440
the web animation API is going to be

00:20:09,760 --> 00:20:13,630
native so you won't need to load

00:20:11,440 --> 00:20:15,820
anything in your browser versus

00:20:13,630 --> 00:20:17,620
libraries can can be kind of big it

00:20:15,820 --> 00:20:19,780
depends on which library which animation

00:20:17,620 --> 00:20:21,790
library use but you're gonna have an

00:20:19,780 --> 00:20:24,730
external dependency and you're gonna

00:20:21,790 --> 00:20:26,590
need to load it so the size you don't

00:20:24,730 --> 00:20:30,730
have any additional size in the web

00:20:26,590 --> 00:20:33,460
animation API if you do SVG animation

00:20:30,730 --> 00:20:35,020
which is very popular it's going to be

00:20:33,460 --> 00:20:37,600
hard to do with the web animations API

00:20:35,020 --> 00:20:40,420
because there's a lot of cross browser

00:20:37,600 --> 00:20:44,740
inconsistencies in SVG and whatever

00:20:40,420 --> 00:20:48,540
library like cheese Aptos they it's like

00:20:44,740 --> 00:20:50,980
like a big SVG animation polyfill it

00:20:48,540 --> 00:20:53,530
solves all these issues and that's why

00:20:50,980 --> 00:20:55,870
you when you animate SVG you normally

00:20:53,530 --> 00:21:02,110
choose an animation tool like cheese app

00:20:55,870 --> 00:21:04,330
or another SVG animation library ya

00:21:02,110 --> 00:21:07,720
browser rendering so when you use the

00:21:04,330 --> 00:21:09,640
web animation API the browser optimizes

00:21:07,720 --> 00:21:11,920
it because it's you're using the browser

00:21:09,640 --> 00:21:13,840
API so the browser knows what you're

00:21:11,920 --> 00:21:15,490
animating when you use a library often

00:21:13,840 --> 00:21:17,710
the browser doesn't know that you're

00:21:15,490 --> 00:21:19,840
animating this and elements and so it

00:21:17,710 --> 00:21:24,280
can't optimize for this animation

00:21:19,840 --> 00:21:28,810
animation and yeah it's gonna be small

00:21:24,280 --> 00:21:31,660
because it's gonna be native this is

00:21:28,810 --> 00:21:34,980
also interesting this is different

00:21:31,660 --> 00:21:37,299
libraries animations without cheese

00:21:34,980 --> 00:21:41,679
JavaScript black blocking

00:21:37,299 --> 00:21:44,259
and if you add JavaScript blocking all

00:21:41,679 --> 00:21:46,450
the JavaScript libraries they're gonna

00:21:44,259 --> 00:21:48,909
be like slower and if you have a lot of

00:21:46,450 --> 00:21:51,039
JavaScript and it's unperformed then

00:21:48,909 --> 00:21:51,700
your animations are also not gonna run

00:21:51,039 --> 00:21:54,879
smooth

00:21:51,700 --> 00:21:56,830
so with web animations API on CSS

00:21:54,879 --> 00:21:59,220
animations you don't have that problem

00:21:56,830 --> 00:22:06,070
because you're using in browser

00:21:59,220 --> 00:22:08,019
optimization the problem about the web

00:22:06,070 --> 00:22:09,639
animations API is of course the

00:22:08,019 --> 00:22:12,970
browser's support still it's in

00:22:09,639 --> 00:22:15,549
implementation there's a really good

00:22:12,970 --> 00:22:18,129
polyfill I'm good github and you can use

00:22:15,549 --> 00:22:21,220
it and then it's your gonna it's like an

00:22:18,129 --> 00:22:22,779
animation library yet you're using it's

00:22:21,220 --> 00:22:25,539
gonna fall back to the native

00:22:22,779 --> 00:22:28,539
implementation if it's there if it's not

00:22:25,539 --> 00:22:30,759
there you're gonna load the polyfill and

00:22:28,539 --> 00:22:35,609
you can use all the web animation API

00:22:30,759 --> 00:22:38,259
things already on production sites and

00:22:35,609 --> 00:22:42,220
the web platform tests you can look at

00:22:38,259 --> 00:22:45,249
it to see how far the implementations

00:22:42,220 --> 00:22:47,499
are so you can look at the different

00:22:45,249 --> 00:22:49,690
parts of the animation and see which

00:22:47,499 --> 00:22:52,289
browsers are already implemented which

00:22:49,690 --> 00:22:52,289
functions

00:22:52,619 --> 00:22:57,340
yeah that's why can I use isn't really

00:22:55,480 --> 00:22:59,799
saying that much because different

00:22:57,340 --> 00:23:04,470
browser already implemented different

00:22:59,799 --> 00:23:07,869
parts of the API and you don't know if

00:23:04,470 --> 00:23:09,879
if you just look at can I use it doesn't

00:23:07,869 --> 00:23:11,379
mean they haven't implemented it at all

00:23:09,879 --> 00:23:15,029
but it's still working on it it just

00:23:11,379 --> 00:23:17,830
haven't implemented everything and just

00:23:15,029 --> 00:23:21,279
animate is a really small animation

00:23:17,830 --> 00:23:24,340
library that uses the web animation API

00:23:21,279 --> 00:23:26,710
under the hood so it's it's really tiny

00:23:24,340 --> 00:23:31,299
and it's really easy to use so you don't

00:23:26,710 --> 00:23:35,940
have to write so many keyframes and you

00:23:31,299 --> 00:23:35,940
get like easing x' and different stuff

00:23:36,239 --> 00:23:41,799
these are some examples I build with the

00:23:38,889 --> 00:23:45,009
web animation API so you get you get all

00:23:41,799 --> 00:23:45,900
this like interaction you can reset your

00:23:45,009 --> 00:23:48,810
animation

00:23:45,900 --> 00:23:54,300
and then I can change I can change the

00:23:48,810 --> 00:23:59,040
text in the back on a call back so I get

00:23:54,300 --> 00:24:01,080
to like react to what I use it us yeah

00:23:59,040 --> 00:24:03,600
this is with a slider so you have a

00:24:01,080 --> 00:24:06,420
slider and then you start some some

00:24:03,600 --> 00:24:10,590
animations yeah

00:24:06,420 --> 00:24:12,840
so dynamic dynamic reactions to to what

00:24:10,590 --> 00:24:15,300
the user does so that's where it's gonna

00:24:12,840 --> 00:24:24,530
be hard to do in in CSS and that's where

00:24:15,300 --> 00:24:24,530
you would use web animations API alright

00:24:25,760 --> 00:24:31,800
yeah one more thing I wanted to say if

00:24:28,650 --> 00:24:33,810
you do web animations and you want to

00:24:31,800 --> 00:24:36,690
make your animations look better I'm

00:24:33,810 --> 00:24:39,450
trying to level up your eating's

00:24:36,690 --> 00:24:40,980
don't just use is in ease out but look

00:24:39,450 --> 00:24:45,090
at different eating's there's a lot of

00:24:40,980 --> 00:24:47,850
tools like easing studnet so you get all

00:24:45,090 --> 00:24:54,570
these different easing Xin CSS and you

00:24:47,850 --> 00:24:56,370
can just copy them all so here in the

00:24:54,570 --> 00:24:59,400
bottom there are some eating's which you

00:24:56,370 --> 00:25:02,070
can't do in CSS that's what like CSS

00:24:59,400 --> 00:25:04,380
animation libraries do because you can

00:25:02,070 --> 00:25:06,390
only have like a simple curve in CSS in

00:25:04,380 --> 00:25:09,360
JavaScript you can do like bouncing

00:25:06,390 --> 00:25:15,510
bouncing eating's which are really great

00:25:09,360 --> 00:25:18,150
for more dynamic animations then cubic

00:25:15,510 --> 00:25:21,270
this year from Nehru it's just great to

00:25:18,150 --> 00:25:23,280
play around to see how you're eating

00:25:21,270 --> 00:25:26,160
looks like and it has like in the top

00:25:23,280 --> 00:25:30,030
you can compare different animations and

00:25:26,160 --> 00:25:32,550
different eating's and what I also love

00:25:30,030 --> 00:25:35,880
is a great tool is cheese app and green

00:25:32,550 --> 00:25:37,560
6yz visualizer which is really great

00:25:35,880 --> 00:25:40,800
because they have a lot of like more

00:25:37,560 --> 00:25:43,710
complex easing and you can in the bottom

00:25:40,800 --> 00:25:46,200
you can change them make them faster and

00:25:43,710 --> 00:25:48,900
slower and when you get started with

00:25:46,200 --> 00:25:50,640
animation this is really useful to to

00:25:48,900 --> 00:25:56,000
try different eating's and play around

00:25:50,640 --> 00:25:56,000
with how you how your animations behave

00:25:57,620 --> 00:26:02,890
there

00:25:58,720 --> 00:26:05,559
also just predefined easing zinthoss or

00:26:02,890 --> 00:26:07,929
there's a great medium article called

00:26:05,559 --> 00:26:11,200
crafting user interface crafting easing

00:26:07,929 --> 00:26:14,740
curves for user interfaces which goes

00:26:11,200 --> 00:26:19,390
more in-depth into eating's for user

00:26:14,740 --> 00:26:21,400
interfaces all right there was it I hope

00:26:19,390 --> 00:26:24,280
you enjoyed it the slides will be at

00:26:21,400 --> 00:26:25,870
slides that come easily not gs uncom so

00:26:24,280 --> 00:26:28,539
you can look through everything you can

00:26:25,870 --> 00:26:31,030
look at the examples and copán and play

00:26:28,539 --> 00:26:32,860
around with them and there's also the

00:26:31,030 --> 00:26:35,230
other parts which I wasn't didn't have

00:26:32,860 --> 00:26:37,330
the time to go through there also in

00:26:35,230 --> 00:26:40,480
these slides so you can also look at the

00:26:37,330 --> 00:26:41,230
other parts we didn't cover yeah that's

00:26:40,480 --> 00:26:44,710
it thank you

00:26:41,230 --> 00:26:44,710
[Applause]

00:26:46,840 --> 00:26:50,790

YouTube URL: https://www.youtube.com/watch?v=Nf_LOfzpric


