Title: Elmar Burke & Hans Christian Otto - Micro Frontends | JSUnconf 2018
Publication date: 2018-05-13
Playlist: JSUnconf 2018
Description: 
	
Captions: 
	00:00:02,370 --> 00:00:05,399
[Music]

00:00:09,440 --> 00:00:14,519
hello everyone we're going to talk about

00:00:11,880 --> 00:00:16,740
microphones I'm Christian I do IOT stuff

00:00:14,519 --> 00:00:18,180
react stuff I think that's enough about

00:00:16,740 --> 00:00:19,529
me I'm Chris Young

00:00:18,180 --> 00:00:23,519
just call me Christian or moody COO

00:00:19,529 --> 00:00:25,500
whatever I'm Almer I am from the

00:00:23,519 --> 00:00:26,699
developer at Brandel you can check it

00:00:25,500 --> 00:00:28,439
out there you can read articles online

00:00:26,699 --> 00:00:30,330
there you can reach me with via

00:00:28,439 --> 00:00:31,579
different channels but we have not said

00:00:30,330 --> 00:00:35,219
that you have time

00:00:31,579 --> 00:00:36,780
Grendel is cool check Len loud ok let's

00:00:35,219 --> 00:00:38,640
talk about micro front ends and reasons

00:00:36,780 --> 00:00:39,989
why you might want to introduce micro

00:00:38,640 --> 00:00:41,790
front ends and what microphone that's

00:00:39,989 --> 00:00:43,800
are and how to implement them and who

00:00:41,790 --> 00:00:47,280
else you had ever heard of micro front

00:00:43,800 --> 00:00:49,460
ends and is interested in it that's

00:00:47,280 --> 00:00:53,219
quite a few is one of you working with

00:00:49,460 --> 00:00:57,870
Nylund holy that's like for people

00:00:53,219 --> 00:01:00,170
you're gonna recognize some stuff ok why

00:00:57,870 --> 00:01:03,539
are we talking about micro front ends

00:01:00,170 --> 00:01:05,100
micro front ends our topic - or an

00:01:03,539 --> 00:01:06,720
answer to the question how do we

00:01:05,100 --> 00:01:08,820
structure the development of our web

00:01:06,720 --> 00:01:10,770
applications there's some traditional

00:01:08,820 --> 00:01:13,770
approaches on how to do that the most

00:01:10,770 --> 00:01:16,020
traditional and most common or oldest or

00:01:13,770 --> 00:01:17,970
whatever approach is this if we develop

00:01:16,020 --> 00:01:20,100
an online shop we have one monolithic

00:01:17,970 --> 00:01:23,189
application that handles everything it

00:01:20,100 --> 00:01:24,990
contains our HTML or JavaScript CSS PHP

00:01:23,189 --> 00:01:27,479
Java whatever you do in the backend

00:01:24,990 --> 00:01:30,420
that's just one team that develops this

00:01:27,479 --> 00:01:31,590
application at some point someone might

00:01:30,420 --> 00:01:33,869
have realized ok the team is getting

00:01:31,590 --> 00:01:35,310
bigger and structuring it as one team

00:01:33,869 --> 00:01:37,920
and one application doesn't really work

00:01:35,310 --> 00:01:40,259
out so well so people start to split it

00:01:37,920 --> 00:01:42,689
up and the easiest way and the most

00:01:40,259 --> 00:01:44,520
obvious way to structure or just split

00:01:42,689 --> 00:01:46,590
up a development team is to realize okay

00:01:44,520 --> 00:01:48,600
we have back-end developers we have

00:01:46,590 --> 00:01:50,340
front-end developers let's make it back

00:01:48,600 --> 00:01:55,229
and team in a front-end team who of you

00:01:50,340 --> 00:01:59,939
is working in this team setting it's the

00:01:55,229 --> 00:02:01,979
most ok interesting at some point some

00:01:59,939 --> 00:02:03,930
of the back-end problems might become

00:02:01,979 --> 00:02:05,700
bigger and the back-end team quite often

00:02:03,930 --> 00:02:08,099
becomes the bigger team and at someone

00:02:05,700 --> 00:02:09,780
you have like 500 developers and 25

00:02:08,099 --> 00:02:11,760
back-end developers and then you realize

00:02:09,780 --> 00:02:13,770
them again we're having a team of 25

00:02:11,760 --> 00:02:15,480
people and that doesn't scale so

00:02:13,770 --> 00:02:17,040
you start to split up the back end and

00:02:15,480 --> 00:02:18,720
there's this microservice thing that

00:02:17,040 --> 00:02:20,250
people have been doing for ages now or

00:02:18,720 --> 00:02:21,990
even before that they call it

00:02:20,250 --> 00:02:24,420
service-oriented architecture and that

00:02:21,990 --> 00:02:26,430
was basically the same but hmm okay so

00:02:24,420 --> 00:02:27,780
this is a very very naive approach to

00:02:26,430 --> 00:02:33,180
say okay the back-end team becomes

00:02:27,780 --> 00:02:35,700
bigger so let's split it up but I don't

00:02:33,180 --> 00:02:37,410
know if you know the year but it's 2018

00:02:35,700 --> 00:02:38,730
and maybe we're having a front-end

00:02:37,410 --> 00:02:41,280
application that requires more than

00:02:38,730 --> 00:02:43,110
three or five developers but maybe we

00:02:41,280 --> 00:02:45,630
have a front-end team of like 20

00:02:43,110 --> 00:02:47,610
developers or maybe we've heard of the

00:02:45,630 --> 00:02:49,980
term that was called cross-functional

00:02:47,610 --> 00:02:51,300
teams where we say we should not split

00:02:49,980 --> 00:02:53,610
up the team and a product management

00:02:51,300 --> 00:02:54,990
team and a designer team in a front-end

00:02:53,610 --> 00:02:57,390
team and a back-end team but instead

00:02:54,990 --> 00:02:58,650
have a team for every part of our

00:02:57,390 --> 00:03:02,310
application for every part of our

00:02:58,650 --> 00:03:06,120
business domain and that's why in some

00:03:02,310 --> 00:03:07,980
at some point people started to use a

00:03:06,120 --> 00:03:10,220
different approach this is sometimes

00:03:07,980 --> 00:03:12,630
referred to as self-contained systems

00:03:10,220 --> 00:03:14,340
which comes from the DDD world

00:03:12,630 --> 00:03:17,070
never mind that part but the approach

00:03:14,340 --> 00:03:18,480
here is to say okay we have a team for

00:03:17,070 --> 00:03:21,000
instance if we were talking about a web

00:03:18,480 --> 00:03:23,070
shop team inspire they are responsible

00:03:21,000 --> 00:03:24,780
for suggestions of new products we have

00:03:23,070 --> 00:03:26,790
a team search they're responsible for

00:03:24,780 --> 00:03:29,100
the search team check out obvious what

00:03:26,790 --> 00:03:31,470
they do and the team is responsible for

00:03:29,100 --> 00:03:34,260
both the front-end part the backend part

00:03:31,470 --> 00:03:36,930
the everything that's there the product

00:03:34,260 --> 00:03:39,060
management part that's one team by the

00:03:36,930 --> 00:03:41,580
way I asked about Nolan before Nolan did

00:03:39,060 --> 00:03:43,440
this website micro front-ends org this

00:03:41,580 --> 00:03:45,720
picture is from microfarad and ster org

00:03:43,440 --> 00:03:47,640
didn't it say it's on when the slides it

00:03:45,720 --> 00:03:49,860
was on the first slide well sorry I

00:03:47,640 --> 00:03:51,810
forgot to mention mentioned that it's an

00:03:49,860 --> 00:03:55,350
open license that why we can use it it's

00:03:51,810 --> 00:03:57,510
cool website so we didn't make up the

00:03:55,350 --> 00:03:59,490
term micro front and I think Nolan

00:03:57,510 --> 00:04:04,080
didn't either but yeah they made this

00:03:59,490 --> 00:04:05,280
cool website the question is why do we

00:04:04,080 --> 00:04:07,020
want to do something like this I

00:04:05,280 --> 00:04:08,780
mentioned reasons for it but there are

00:04:07,020 --> 00:04:11,940
several reasons why you want to do this

00:04:08,780 --> 00:04:13,739
exactly one reason is that what you

00:04:11,940 --> 00:04:15,720
mentions the team is growing and you

00:04:13,739 --> 00:04:17,850
have too much developers in one team and

00:04:15,720 --> 00:04:19,830
you have to split up to work you can do

00:04:17,850 --> 00:04:22,500
it by either making a lot of Trello

00:04:19,830 --> 00:04:24,240
cards or JIRA tickets or something like

00:04:22,500 --> 00:04:25,710
that and let developers work on

00:04:24,240 --> 00:04:27,639
different domains but this don't often

00:04:25,710 --> 00:04:32,199
work out very well because you have

00:04:27,639 --> 00:04:35,050
all domain knowledge needed another

00:04:32,199 --> 00:04:37,749
reason could be that you want to deploy

00:04:35,050 --> 00:04:40,870
your product or your front-end or your

00:04:37,749 --> 00:04:43,719
product separately this could be a

00:04:40,870 --> 00:04:46,120
reason that you have differents vzf

00:04:43,719 --> 00:04:48,009
different sprints times and you want to

00:04:46,120 --> 00:04:50,499
release more often for example but your

00:04:48,009 --> 00:04:52,990
main product is released once in a month

00:04:50,499 --> 00:04:55,349
then you can split up the front ends and

00:04:52,990 --> 00:04:59,499
you can deploy the products separately

00:04:55,349 --> 00:05:02,919
another idea could be that you want to

00:04:59,499 --> 00:05:04,509
isolate your run time this could be very

00:05:02,919 --> 00:05:06,129
different reasons for example you have a

00:05:04,509 --> 00:05:08,219
payment service and you have to collect

00:05:06,129 --> 00:05:12,270
special day to form a payments of

00:05:08,219 --> 00:05:15,729
payment service provider and you have

00:05:12,270 --> 00:05:17,770
conflicts with normal us privacy but for

00:05:15,729 --> 00:05:21,759
a payment you have to do it so this

00:05:17,770 --> 00:05:27,430
could be also a valid approach and the

00:05:21,759 --> 00:05:29,889
most or I think the most important i've

00:05:27,430 --> 00:05:32,199
reason to to split up michael front-ends

00:05:29,889 --> 00:05:34,150
is that you have one legacy application

00:05:32,199 --> 00:05:36,219
and you want to modernize it but you

00:05:34,150 --> 00:05:38,020
don't want to do a big band migration

00:05:36,219 --> 00:05:40,240
that you have to throw away all the code

00:05:38,020 --> 00:05:41,770
and rewrite everything with the

00:05:40,240 --> 00:05:44,020
microphones and you can modernize the

00:05:41,770 --> 00:05:47,800
application piece by piece and then you

00:05:44,020 --> 00:05:50,319
have one small part that is new and the

00:05:47,800 --> 00:05:54,849
big legacy part and you can migrate this

00:05:50,319 --> 00:05:57,520
big application step by step but the

00:05:54,849 --> 00:05:59,139
question is if we have reasons how to do

00:05:57,520 --> 00:06:01,089
it how do we actually do that there are

00:05:59,139 --> 00:06:05,289
several approaches that we want to

00:06:01,089 --> 00:06:07,139
mention but the question is we now have

00:06:05,289 --> 00:06:09,789
a problem what's the obvious solution

00:06:07,139 --> 00:06:10,930
these days always the same blockchain is

00:06:09,789 --> 00:06:13,300
always the solution to every problem

00:06:10,930 --> 00:06:14,379
right we're missing a blockchain talk at

00:06:13,300 --> 00:06:17,560
this conference I mentioned it before

00:06:14,379 --> 00:06:19,120
not that I'm a fan of it ok no getting

00:06:17,560 --> 00:06:21,849
serious again what are solutions on how

00:06:19,120 --> 00:06:23,560
to implement micro front-ends one way is

00:06:21,849 --> 00:06:25,839
to have a short shared we run time where

00:06:23,560 --> 00:06:28,659
many front ends run within the same

00:06:25,839 --> 00:06:31,509
runtime or we can I say every front-end

00:06:28,659 --> 00:06:32,949
has its own runtime there's also like a

00:06:31,509 --> 00:06:35,129
mixed approach that we're going to talk

00:06:32,949 --> 00:06:35,129
about

00:06:35,150 --> 00:06:41,570
let's get started with the own runtime

00:06:38,860 --> 00:06:44,000
how do we separate rent times of

00:06:41,570 --> 00:06:45,650
applications well we're in the web and

00:06:44,000 --> 00:06:48,320
there's a technology that's pretty cool

00:06:45,650 --> 00:06:50,199
we just reinvent the wheel and yeah use

00:06:48,320 --> 00:06:54,650
hyperlinks so we have one application

00:06:50,199 --> 00:06:57,410
that is called in our shop example the

00:06:54,650 --> 00:07:00,380
inspire page so we have a website let's

00:06:57,410 --> 00:07:02,449
say inspired the shop calm and on that

00:07:00,380 --> 00:07:04,970
page we can see new products than we

00:07:02,449 --> 00:07:06,889
have searched the shop comm and we can

00:07:04,970 --> 00:07:08,900
find products there and then there's the

00:07:06,889 --> 00:07:11,690
product website products dot the shop

00:07:08,900 --> 00:07:15,740
comm the first two just link to these

00:07:11,690 --> 00:07:17,690
products that the shop comm one approach

00:07:15,740 --> 00:07:19,190
the you see very often in web shops is

00:07:17,690 --> 00:07:21,110
that you also have a payment page

00:07:19,190 --> 00:07:23,060
separately because you ran through the

00:07:21,110 --> 00:07:25,400
checkout process you come to the payment

00:07:23,060 --> 00:07:27,260
point and then you do one special thing

00:07:25,400 --> 00:07:29,270
in one of these runtimes in one of these

00:07:27,260 --> 00:07:31,310
front ends and that's actually pretty

00:07:29,270 --> 00:07:33,919
cool because the runtimes are completely

00:07:31,310 --> 00:07:35,900
separated I mean in a case of an online

00:07:33,919 --> 00:07:38,750
shop let's be honest that probably

00:07:35,900 --> 00:07:40,580
doesn't work that well I can tell you we

00:07:38,750 --> 00:07:43,639
at blend will have done exam it's

00:07:40,580 --> 00:07:46,190
exactly this example we have put out our

00:07:43,639 --> 00:07:49,940
payment service into our payment page

00:07:46,190 --> 00:07:53,570
into a different front end it was quite

00:07:49,940 --> 00:07:56,810
a big work but now it's a huge benefit

00:07:53,570 --> 00:07:58,490
to half exactly this set up again for

00:07:56,810 --> 00:08:00,530
blender it makes sense I think it's a

00:07:58,490 --> 00:08:01,130
payment you said also landing pages

00:08:00,530 --> 00:08:02,660
right

00:08:01,130 --> 00:08:03,770
are separate exactly they're completely

00:08:02,660 --> 00:08:05,270
separate from the rest of the

00:08:03,770 --> 00:08:07,699
application so it makes sense to take

00:08:05,270 --> 00:08:09,650
them out because then it's easier to to

00:08:07,699 --> 00:08:11,360
decide okay with the landing pages we

00:08:09,650 --> 00:08:13,490
want to use the next big thing in web

00:08:11,360 --> 00:08:15,770
technology and that's what you exactly

00:08:13,490 --> 00:08:18,590
did right yeah we used next yes so the

00:08:15,770 --> 00:08:19,849
next yes you have different approaches

00:08:18,590 --> 00:08:21,680
and you have different goals to achieve

00:08:19,849 --> 00:08:23,210
with each project for a landing page

00:08:21,680 --> 00:08:25,190
project for example you want to achieve

00:08:23,210 --> 00:08:27,500
the best marketing possible so you want

00:08:25,190 --> 00:08:29,360
fast patron rings you want server-side

00:08:27,500 --> 00:08:31,010
rendered server-side rendering but you

00:08:29,360 --> 00:08:33,260
don't want it in your big application

00:08:31,010 --> 00:08:35,209
very users authenticate because it makes

00:08:33,260 --> 00:08:37,400
so much headache to implement this and

00:08:35,209 --> 00:08:39,080
then you can skip it for a payment

00:08:37,400 --> 00:08:42,680
service you have completely different

00:08:39,080 --> 00:08:45,610
things you want to use so different

00:08:42,680 --> 00:08:48,560
projects and different goals to achieve

00:08:45,610 --> 00:08:48,950
but again the reality is not always like

00:08:48,560 --> 00:08:50,990
this

00:08:48,950 --> 00:08:52,310
right so there might be situations where

00:08:50,990 --> 00:08:54,740
we have different teams developing

00:08:52,310 --> 00:08:56,900
different micro front-ends and this all

00:08:54,740 --> 00:08:58,730
should be on the same page so we want to

00:08:56,900 --> 00:09:00,920
have multiple applications running

00:08:58,730 --> 00:09:02,540
within the same page and again thanks to

00:09:00,920 --> 00:09:05,390
Nolan for that image

00:09:02,540 --> 00:09:07,580
what we have here is a webshop and let's

00:09:05,390 --> 00:09:10,100
say that this webshop is developed

00:09:07,580 --> 00:09:12,170
consists of multiple microphones we have

00:09:10,100 --> 00:09:14,090
the Buy button here that's from one a

00:09:12,170 --> 00:09:15,860
flip application the green box is

00:09:14,090 --> 00:09:17,360
obviously from team inspire because

00:09:15,860 --> 00:09:20,450
they're responsible for the gist

00:09:17,360 --> 00:09:24,590
suggesting new products to customers and

00:09:20,450 --> 00:09:27,740
then the outside is well team product

00:09:24,590 --> 00:09:31,940
again I think you're not supposed to

00:09:27,740 --> 00:09:34,070
retweets why we do talk sorry if we have

00:09:31,940 --> 00:09:35,480
an approach like this if we have a

00:09:34,070 --> 00:09:37,340
website like this and we split our

00:09:35,480 --> 00:09:39,850
team's like we suggest it before all

00:09:37,340 --> 00:09:43,430
these teams have to run within the same

00:09:39,850 --> 00:09:45,500
scope of the other website and this

00:09:43,430 --> 00:09:47,480
might work if we have for instance a

00:09:45,500 --> 00:09:50,390
team that does react the team that does

00:09:47,480 --> 00:09:52,490
angular a team that does view Jas then

00:09:50,390 --> 00:09:55,460
we could run this all in the same

00:09:52,490 --> 00:09:57,200
application in the same Dom in the same

00:09:55,460 --> 00:09:59,630
JavaScript scope and it might actually

00:09:57,200 --> 00:10:00,920
work there might be some obvious

00:09:59,630 --> 00:10:03,380
problems that we're going to talk about

00:10:00,920 --> 00:10:08,570
later but you could do that if you

00:10:03,380 --> 00:10:11,420
instead have multiple versions of the

00:10:08,570 --> 00:10:13,520
same framework say react 14 15 and 16

00:10:11,420 --> 00:10:16,430
and you run them on the same page you

00:10:13,520 --> 00:10:18,890
might run into problems because they all

00:10:16,430 --> 00:10:21,620
want to define the global called react

00:10:18,890 --> 00:10:23,840
or some libraries they're used the same

00:10:21,620 --> 00:10:25,880
global variables that actually happen to

00:10:23,840 --> 00:10:27,470
us with a react multi-micro from an

00:10:25,880 --> 00:10:30,080
application and they had the same

00:10:27,470 --> 00:10:33,980
version of react but still have problems

00:10:30,080 --> 00:10:36,110
and then there's a way on how we could

00:10:33,980 --> 00:10:39,560
actually implement such a page that

00:10:36,110 --> 00:10:42,680
consists of multiple front micro

00:10:39,560 --> 00:10:47,600
front-end applications by just putting

00:10:42,680 --> 00:10:50,020
iframes there that's something I was

00:10:47,600 --> 00:10:52,820
expecting laughter that's fine

00:10:50,020 --> 00:10:53,660
the thing is high friends might not be

00:10:52,820 --> 00:10:56,210
as bad as you think

00:10:53,660 --> 00:10:57,860
i frames used to be very bad and we

00:10:56,210 --> 00:11:00,290
hated them I mean frames used to be even

00:10:57,860 --> 00:11:02,350
worse right but there might be reasons

00:11:00,290 --> 00:11:04,120
why we would want to use my iframes here

00:11:02,350 --> 00:11:06,490
they're perfect because they give us the

00:11:04,120 --> 00:11:08,500
separation of if like if we would run on

00:11:06,490 --> 00:11:10,090
multiple domains we can actually run on

00:11:08,500 --> 00:11:13,600
multiple domains but just include them

00:11:10,090 --> 00:11:16,000
with the iframes so it feels to the user

00:11:13,600 --> 00:11:17,140
like they're using one big application

00:11:16,000 --> 00:11:19,630
but in truth you have multiple

00:11:17,140 --> 00:11:22,870
applications of course if you have like

00:11:19,630 --> 00:11:25,210
20 iframes that include 20 other iframes

00:11:22,870 --> 00:11:27,790
that include ten other iframes you might

00:11:25,210 --> 00:11:29,350
run into problems of course but if it's

00:11:27,790 --> 00:11:31,990
just what you mentioned before the

00:11:29,350 --> 00:11:33,520
payment and you have the payment button

00:11:31,990 --> 00:11:36,130
that should be included with one other

00:11:33,520 --> 00:11:38,110
application then it's totally fine at

00:11:36,130 --> 00:11:41,800
least if they don't have bundle sizes of

00:11:38,110 --> 00:11:44,110
20 megabytes no application should have

00:11:41,800 --> 00:11:45,640
that of course right so again if you can

00:11:44,110 --> 00:11:47,140
do the iframes that's a super cool

00:11:45,640 --> 00:11:48,490
approach because you can integrate it's

00:11:47,140 --> 00:11:49,930
for the user it feels like it's one

00:11:48,490 --> 00:11:55,750
application but in truth we have

00:11:49,930 --> 00:12:00,670
completely separate runtimes that's you

00:11:55,750 --> 00:12:02,980
okay yeah so if we want to achieve

00:12:00,670 --> 00:12:07,860
exciting is this example of different

00:12:02,980 --> 00:12:10,480
versions of on tools on one page this is

00:12:07,860 --> 00:12:10,950
possible actually right now in the

00:12:10,480 --> 00:12:14,170
browser

00:12:10,950 --> 00:12:17,020
imagine we use a tool that we all have

00:12:14,170 --> 00:12:21,190
in our hands or on our laps like a

00:12:17,020 --> 00:12:25,270
browser and we all know HTML or at least

00:12:21,190 --> 00:12:27,670
we know a little bit of HTML and in HTML

00:12:25,270 --> 00:12:30,760
we have something that is called input

00:12:27,670 --> 00:12:32,830
input with a type date/time local will

00:12:30,760 --> 00:12:35,380
cause I couldn't make a screenshot of it

00:12:32,830 --> 00:12:40,000
but it will make a calendar to choose a

00:12:35,380 --> 00:12:42,910
time and a date with this tiny piece of

00:12:40,000 --> 00:12:45,430
code it will look like something like

00:12:42,910 --> 00:12:49,630
that what if we can take this approach

00:12:45,430 --> 00:12:52,120
to something for our micro front-end

00:12:49,630 --> 00:12:54,760
idea that we just have an element we can

00:12:52,120 --> 00:12:57,940
play somewhere for example check out

00:12:54,760 --> 00:13:03,220
button and use it in the place we want

00:12:57,940 --> 00:13:05,740
to use it in the shared runtime so we

00:13:03,220 --> 00:13:08,320
can define our own elements with an I

00:13:05,740 --> 00:13:10,660
hope it is a little bit readable with an

00:13:08,320 --> 00:13:13,720
API that is called custom element

00:13:10,660 --> 00:13:14,940
actually the custom element version one

00:13:13,720 --> 00:13:17,430
is most

00:13:14,940 --> 00:13:20,520
it's implemented in Chrome and in Safari

00:13:17,430 --> 00:13:24,030
also on iOS and it's about to be

00:13:20,520 --> 00:13:26,730
implemented or nearly ready it's hidden

00:13:24,030 --> 00:13:29,480
behind a flag for Firefox and it will be

00:13:26,730 --> 00:13:32,130
implemented in etch you can define

00:13:29,480 --> 00:13:35,040
elements by yourself if you ever have

00:13:32,130 --> 00:13:37,860
done angular version one you maybe know

00:13:35,040 --> 00:13:40,020
how to define an element it's nearly the

00:13:37,860 --> 00:13:43,830
same here you define a class with a

00:13:40,020 --> 00:13:46,620
constructor which will be which will be

00:13:43,830 --> 00:13:48,900
called one year when you use the element

00:13:46,620 --> 00:13:53,580
and you just define the elements that

00:13:48,900 --> 00:13:55,590
you want to that you want be used with

00:13:53,580 --> 00:13:57,960
this you can it's nearly not readable

00:13:55,590 --> 00:14:01,140
you can put properties into it

00:13:57,960 --> 00:14:03,480
and just use the HTML element and that

00:14:01,140 --> 00:14:06,030
means behind that okay now I know why

00:14:03,480 --> 00:14:07,440
you wanted to fall down here behind this

00:14:06,030 --> 00:14:09,300
element you can hide whether it's a

00:14:07,440 --> 00:14:10,890
react application whether it's a angular

00:14:09,300 --> 00:14:12,960
application whether that's you element

00:14:10,890 --> 00:14:15,270
whatever you can just encapsulate it in

00:14:12,960 --> 00:14:16,890
a custom element and then no one will

00:14:15,270 --> 00:14:18,050
know what you use behind the scenes and

00:14:16,890 --> 00:14:20,280
you can change the implementation

00:14:18,050 --> 00:14:23,730
completely as long as you stick with

00:14:20,280 --> 00:14:26,460
this contract and the good thing is you

00:14:23,730 --> 00:14:27,840
can hide everything behind this element

00:14:26,460 --> 00:14:30,420
is that you can use a completely

00:14:27,840 --> 00:14:32,810
different at the framework I mean we all

00:14:30,420 --> 00:14:35,820
do JavaScript and we all use plenty of

00:14:32,810 --> 00:14:37,950
frameworks so I want to introduce a new

00:14:35,820 --> 00:14:40,350
framework that's called stencil stencil

00:14:37,950 --> 00:14:43,920
j/s is built by the ionic team and it's

00:14:40,350 --> 00:14:45,930
exactly what it it's exactly for custom

00:14:43,920 --> 00:14:48,260
elements made so it uses the web

00:14:45,930 --> 00:14:50,880
component or the custom element api

00:14:48,260 --> 00:14:53,160
under the hood with the concepts that

00:14:50,880 --> 00:14:55,710
look like angular and that looks like

00:14:53,160 --> 00:14:57,540
react so if you have angular if you have

00:14:55,710 --> 00:14:59,310
done angular this code will look like

00:14:57,540 --> 00:15:00,930
angular for you and if you have done

00:14:59,310 --> 00:15:03,510
react it will look like react for you

00:15:00,930 --> 00:15:05,310
you define the tag and you can define

00:15:03,510 --> 00:15:08,130
styles and everything and everything is

00:15:05,310 --> 00:15:09,750
included it's also fully reactive so if

00:15:08,130 --> 00:15:11,400
you change the property it will react to

00:15:09,750 --> 00:15:14,310
it it has a virtual Dom implementation

00:15:11,400 --> 00:15:15,960
all the cool implemented it is

00:15:14,310 --> 00:15:17,700
written in typescript and you can

00:15:15,960 --> 00:15:20,010
compile it it's really awesome we have

00:15:17,700 --> 00:15:25,860
it in production since yesterday at

00:15:20,010 --> 00:15:27,790
Lendl so I can really recommend this

00:15:25,860 --> 00:15:29,380
tool it also has is it

00:15:27,790 --> 00:15:34,900
also can come with server-side rendered

00:15:29,380 --> 00:15:38,980
for applications but you don't have to

00:15:34,900 --> 00:15:40,330
use something like stand so for this

00:15:38,980 --> 00:15:42,790
component things you just can use the

00:15:40,330 --> 00:15:44,940
tools you have already like Christian

00:15:42,790 --> 00:15:49,990
said you can use react or angular

00:15:44,940 --> 00:15:51,850
angular version greater to house will

00:15:49,990 --> 00:15:59,260
come with angular element that use

00:15:51,850 --> 00:16:01,360
completely the same ok so we mentioned

00:15:59,260 --> 00:16:03,910
on why would you do that how do we do

00:16:01,360 --> 00:16:06,130
that what our implementation details but

00:16:03,910 --> 00:16:08,320
for us it's always important if we talk

00:16:06,130 --> 00:16:10,930
about something to mention what are the

00:16:08,320 --> 00:16:13,180
downsides because even if we have to

00:16:10,930 --> 00:16:17,410
scale a team and micro fragments might

00:16:13,180 --> 00:16:19,330
help us everything comes at a cost one

00:16:17,410 --> 00:16:20,470
obvious thing which you probably got

00:16:19,330 --> 00:16:22,300
when I was talking about the iframe

00:16:20,470 --> 00:16:26,860
within the iframe within the iframe a

00:16:22,300 --> 00:16:28,930
bundle sizes it might be a problem

00:16:26,860 --> 00:16:31,030
obviously if you start rendering within

00:16:28,930 --> 00:16:36,640
one page multiple applications in

00:16:31,030 --> 00:16:38,440
iframes or using using custom elements

00:16:36,640 --> 00:16:42,270
but one of them uses react and the other

00:16:38,440 --> 00:16:45,310
uses angular you have big bundle sizes

00:16:42,270 --> 00:16:47,110
that might be a problem it might be okay

00:16:45,310 --> 00:16:48,790
if you're like developing Spotify and

00:16:47,110 --> 00:16:50,290
you have to download it Spotify up

00:16:48,790 --> 00:16:52,510
anyways it doesn't matter whether it's

00:16:50,290 --> 00:16:54,070
contains five megabytes of react and

00:16:52,510 --> 00:16:55,390
five megabytes of angular because people

00:16:54,070 --> 00:16:59,170
are going to stream a lot of music with

00:16:55,390 --> 00:17:00,460
it anyway so who cares it also depends

00:16:59,170 --> 00:17:02,470
on the approach that you take if you

00:17:00,460 --> 00:17:04,600
have like Lendl does that the shared

00:17:02,470 --> 00:17:07,360
runtimes the payment page that you

00:17:04,600 --> 00:17:10,300
wizard like once a month maybe and the

00:17:07,360 --> 00:17:12,790
landing page that you only visit once in

00:17:10,300 --> 00:17:14,320
your lifetime probably and then the real

00:17:12,790 --> 00:17:16,300
blender application it doesn't really

00:17:14,320 --> 00:17:17,710
matter if all of them have a bundle size

00:17:16,300 --> 00:17:22,330
of five megabytes because you usually

00:17:17,710 --> 00:17:24,160
only use one of them it does matter

00:17:22,330 --> 00:17:26,560
especially for a landing page for

00:17:24,160 --> 00:17:28,450
marketing but it's sorry if you have

00:17:26,560 --> 00:17:29,560
something like serviceworker for your

00:17:28,450 --> 00:17:32,220
main application for your core

00:17:29,560 --> 00:17:34,900
application it doesn't matter that much

00:17:32,220 --> 00:17:36,670
also if you're doing one of this shared

00:17:34,900 --> 00:17:37,840
runtime approaches one thing that I

00:17:36,670 --> 00:17:40,150
mentioned before we are having this

00:17:37,840 --> 00:17:41,870
react application that actually consists

00:17:40,150 --> 00:17:43,910
of multiple react

00:17:41,870 --> 00:17:46,429
what we do there is that most of the

00:17:43,910 --> 00:17:48,710
react libraries are only loaded once

00:17:46,429 --> 00:17:52,250
because we just used the same version of

00:17:48,710 --> 00:17:53,630
react or a router react whatever so we

00:17:52,250 --> 00:17:55,970
only have to load them once so that

00:17:53,630 --> 00:17:57,590
makes stuff better you can you can

00:17:55,970 --> 00:18:00,950
improve stuff there but you should take

00:17:57,590 --> 00:18:02,720
a lot of care obviously and yeah I

00:18:00,950 --> 00:18:04,940
mention it before if you're doing the

00:18:02,720 --> 00:18:07,700
iframe approach things might get very

00:18:04,940 --> 00:18:10,220
very dirty very very early because if

00:18:07,700 --> 00:18:13,070
you're bootstrap multiple applications

00:18:10,220 --> 00:18:14,990
on the same page that's gonna be a lot

00:18:13,070 --> 00:18:17,000
of bundles also it's gonna be a lot of

00:18:14,990 --> 00:18:19,130
memory because you're gonna have ten

00:18:17,000 --> 00:18:20,960
instances of react and five instances of

00:18:19,130 --> 00:18:23,600
angular and five instances of you

00:18:20,960 --> 00:18:27,049
running on the same page so I don't know

00:18:23,600 --> 00:18:31,480
old cheap Android phones and all cheap

00:18:27,049 --> 00:18:31,480
iPhones might might have problems there

00:18:32,260 --> 00:18:37,130
again there might be situations where it

00:18:35,150 --> 00:18:38,660
works like the Spotify player I

00:18:37,130 --> 00:18:42,440
mentioned before all these service

00:18:38,660 --> 00:18:45,770
workers which might have as well one big

00:18:42,440 --> 00:18:47,870
problem is consistent look and feel if

00:18:45,770 --> 00:18:49,940
you have like ten teams they're

00:18:47,870 --> 00:18:52,850
developing ten front-ends and they're

00:18:49,940 --> 00:18:54,530
somehow integrated like with iframes or

00:18:52,850 --> 00:18:56,900
however they however you want to

00:18:54,530 --> 00:18:59,840
integrate them even with a shared

00:18:56,900 --> 00:19:02,059
runtime approach if team a decides okay

00:18:59,840 --> 00:19:03,169
that button becomes green now and has

00:19:02,059 --> 00:19:05,390
been blue forever

00:19:03,169 --> 00:19:07,610
the rest of the replication probably

00:19:05,390 --> 00:19:12,500
still has the blue one that might be a

00:19:07,610 --> 00:19:13,730
problem so the question is now what do

00:19:12,500 --> 00:19:16,460
we do to make sure that the button

00:19:13,730 --> 00:19:18,950
always has the same color

00:19:16,460 --> 00:19:20,750
one approach that actually in a ten yet

00:19:18,950 --> 00:19:22,790
a conference mentioned to us like two

00:19:20,750 --> 00:19:25,100
weeks ago three weeks ago it's pretty

00:19:22,790 --> 00:19:27,980
straightforward we just don't care

00:19:25,100 --> 00:19:29,809
because the user won't care if the okay

00:19:27,980 --> 00:19:32,600
button is sometimes green and sometimes

00:19:29,809 --> 00:19:33,830
blue there's this American startup in

00:19:32,600 --> 00:19:36,620
e-commerce there called something like

00:19:33,830 --> 00:19:39,860
Amazon I don't know if it's a river yeah

00:19:36,620 --> 00:19:43,190
yeah sorry if you look at their webpage

00:19:39,860 --> 00:19:45,140
it's unbelievable inconsistent go to the

00:19:43,190 --> 00:19:46,970
settings or even worse go to Amazon

00:19:45,140 --> 00:19:48,919
business settings and everything looks I

00:19:46,970 --> 00:19:51,799
don't know like an HTML page that's 15

00:19:48,919 --> 00:19:53,570
years old so there might be reasons

00:19:51,799 --> 00:19:55,190
might be situations where you just have

00:19:53,570 --> 00:19:57,230
to you can ignore it and maybe

00:19:55,190 --> 00:19:59,450
you make the button green at the other

00:19:57,230 --> 00:20:00,560
applications five month later that's

00:19:59,450 --> 00:20:04,180
fine yes

00:20:00,560 --> 00:20:07,550
some different start apps like face

00:20:04,180 --> 00:20:09,920
Facebook weather also change buttons

00:20:07,550 --> 00:20:13,160
often or or glasses no Google is it

00:20:09,920 --> 00:20:15,620
Google also have different buttons on

00:20:13,160 --> 00:20:17,840
different pages if you dive deeper into

00:20:15,620 --> 00:20:20,690
an UI I mean if you ever have used

00:20:17,840 --> 00:20:23,390
analytics Google Analytics page it's the

00:20:20,690 --> 00:20:26,690
hell of inconsistence UI but it just

00:20:23,390 --> 00:20:30,260
works and it makes a lot of money right

00:20:26,690 --> 00:20:31,910
so it can't be that bad but of course we

00:20:30,260 --> 00:20:37,280
have like real solutions that are not

00:20:31,910 --> 00:20:39,290
saying ignore it another projection we

00:20:37,280 --> 00:20:41,960
skip that shared CSS thing right yeah

00:20:39,290 --> 00:20:43,640
I'm gonna say that you can have one big

00:20:41,960 --> 00:20:45,230
CSS file for all your microphone that's

00:20:43,640 --> 00:20:46,960
if you're good at CSS I'm not but if

00:20:45,230 --> 00:20:49,310
you're good at it you can do that

00:20:46,960 --> 00:20:51,080
something just like bootstrap is doing

00:20:49,310 --> 00:20:56,030
you have one CSS and we use the class

00:20:51,080 --> 00:20:58,130
names everywhere but another approach is

00:20:56,030 --> 00:21:01,670
to have a component library a UI

00:20:58,130 --> 00:21:03,140
component library you can use the

00:21:01,670 --> 00:21:05,030
microphone that idea and the custom

00:21:03,140 --> 00:21:07,670
element idea to build reusable

00:21:05,030 --> 00:21:11,840
components just we saw earlier with the

00:21:07,670 --> 00:21:13,970
input element you can build your your

00:21:11,840 --> 00:21:16,520
your check out button your company check

00:21:13,970 --> 00:21:18,470
out button in a shared component library

00:21:16,520 --> 00:21:20,300
and reuse the same UI everywhere in

00:21:18,470 --> 00:21:21,590
every project the nice thing is you

00:21:20,300 --> 00:21:24,260
don't have to reinvent the wheel every

00:21:21,590 --> 00:21:25,970
time you have a dialog component any of

00:21:24,260 --> 00:21:28,810
your main components your main UI

00:21:25,970 --> 00:21:31,520
components somebody find also this helps

00:21:28,810 --> 00:21:34,310
to communicate with designers then you

00:21:31,520 --> 00:21:36,290
have one file a kind of style guide

00:21:34,310 --> 00:21:38,480
where everything is defined and if a

00:21:36,290 --> 00:21:42,290
designer comes around with a new design

00:21:38,480 --> 00:21:44,840
you just can use the existing ones and

00:21:42,290 --> 00:21:51,920
check with him maybe to use existing

00:21:44,840 --> 00:21:53,600
ones that's actually something that's

00:21:51,920 --> 00:21:55,750
very very easy if you use the same

00:21:53,600 --> 00:21:58,370
framework within every of your micro

00:21:55,750 --> 00:22:00,410
micro front-ends because then you can

00:21:58,370 --> 00:22:02,870
just like expose react components in

00:22:00,410 --> 00:22:05,540
your UI component library or you can

00:22:02,870 --> 00:22:07,670
expose angular elements in the UI

00:22:05,540 --> 00:22:08,840
component library if you're mixing it

00:22:07,670 --> 00:22:11,059
again it gets more complicated

00:22:08,840 --> 00:22:14,600
but we heard about the custom elements

00:22:11,059 --> 00:22:17,179
API before so I think you can do it even

00:22:14,600 --> 00:22:19,279
if you have different libraries just

00:22:17,179 --> 00:22:21,320
keep in mind that if you have a shared

00:22:19,279 --> 00:22:22,879
libraries that you want to be sure that

00:22:21,320 --> 00:22:24,350
the version of your library we don't

00:22:22,879 --> 00:22:26,120
have breaking changes because when it

00:22:24,350 --> 00:22:29,210
wants you change the API of your UI

00:22:26,120 --> 00:22:31,669
elements every other microphone and will

00:22:29,210 --> 00:22:33,590
break and you have to fix it manually

00:22:31,669 --> 00:22:36,080
that's why I would always say if you're

00:22:33,590 --> 00:22:37,669
developing such a component library have

00:22:36,080 --> 00:22:41,299
like the strictest code review process

00:22:37,669 --> 00:22:43,249
in place for this library and just like

00:22:41,299 --> 00:22:45,860
an open-source library use semantic

00:22:43,249 --> 00:22:47,299
versioning do not break PC like ever and

00:22:45,860 --> 00:22:48,860
if you do talk to every team that uses

00:22:47,299 --> 00:22:50,809
the library that's the only place where

00:22:48,860 --> 00:22:53,119
you're allowed to break PC in these in

00:22:50,809 --> 00:22:54,440
these component libraries and use tools

00:22:53,119 --> 00:22:56,119
to automatically update your

00:22:54,440 --> 00:22:57,710
dependencies and to check the

00:22:56,119 --> 00:23:00,619
dependencies I've heard it in every talk

00:22:57,710 --> 00:23:02,360
I was today it was - is you something

00:23:00,619 --> 00:23:04,879
like greenkeeper or something like

00:23:02,360 --> 00:23:07,549
renovate to automatically check put in

00:23:04,879 --> 00:23:09,049
pull requests into your codebase once

00:23:07,549 --> 00:23:11,389
the dependency updates it's also the

00:23:09,049 --> 00:23:13,220
same for own dependencies use a UI

00:23:11,389 --> 00:23:15,590
component for as a module and

00:23:13,220 --> 00:23:17,480
automatically update them one thing I

00:23:15,590 --> 00:23:19,580
want to mention I said take care of that

00:23:17,480 --> 00:23:21,230
it's that there's a strict code review

00:23:19,580 --> 00:23:23,659
process in place for changes to the

00:23:21,230 --> 00:23:25,940
component library there's a problem if

00:23:23,659 --> 00:23:27,649
you make it too hard to update the

00:23:25,940 --> 00:23:29,539
component library to add new stuff to

00:23:27,649 --> 00:23:30,950
the component library people would just

00:23:29,539 --> 00:23:32,629
implement the components within their

00:23:30,950 --> 00:23:34,669
micro front end and not contribute it

00:23:32,629 --> 00:23:35,840
back to your shared component library so

00:23:34,669 --> 00:23:41,749
that's really something that's not gonna

00:23:35,840 --> 00:23:44,179
be easy once you have a component

00:23:41,749 --> 00:23:46,879
library you should build something like

00:23:44,179 --> 00:23:49,549
a kitchen sink a component library

00:23:46,879 --> 00:23:51,919
example page you can use something like

00:23:49,549 --> 00:23:55,330
style guide is if you're using react or

00:23:51,919 --> 00:23:58,190
you can use storybook if you're using

00:23:55,330 --> 00:24:01,730
polymer or web components react or

00:23:58,190 --> 00:24:04,159
angular Union or view is also you think

00:24:01,730 --> 00:24:06,379
it's okay if you use one of the major

00:24:04,159 --> 00:24:08,450
frameworks then your storybook both of

00:24:06,379 --> 00:24:11,360
these tools are awesome and can help in

00:24:08,450 --> 00:24:14,059
the progress a process also you can show

00:24:11,360 --> 00:24:16,490
every case that is possible with your

00:24:14,059 --> 00:24:18,049
component one thing we're talking about

00:24:16,490 --> 00:24:19,549
sharing code here between multiple

00:24:18,049 --> 00:24:22,100
microphone that's using a component

00:24:19,549 --> 00:24:22,310
library and some people will tell you if

00:24:22,100 --> 00:24:24,650
you

00:24:22,310 --> 00:24:26,690
doing micro front ends or micro-services

00:24:24,650 --> 00:24:28,820
or self-contained systems or whatever do

00:24:26,690 --> 00:24:31,160
not share code between them so do not

00:24:28,820 --> 00:24:34,460
create a component library like this we

00:24:31,160 --> 00:24:36,560
disagree with this there are things that

00:24:34,460 --> 00:24:38,630
you shouldn't care share I think in the

00:24:36,560 --> 00:24:40,550
self-contained system world people are

00:24:38,630 --> 00:24:45,410
very agree on the fact that you should

00:24:40,550 --> 00:24:47,390
not share business code but stuff like

00:24:45,410 --> 00:24:49,520
UI components as long as they don't

00:24:47,390 --> 00:24:53,300
contain business logic that's fine or

00:24:49,520 --> 00:24:56,150
tooling that should be fine as well you

00:24:53,300 --> 00:24:58,580
don't want to implement uses a user

00:24:56,150 --> 00:25:00,290
query every time in every project in

00:24:58,580 --> 00:25:05,150
every microphone that you have you want

00:25:00,290 --> 00:25:06,860
reusable stuff for this yes there's one

00:25:05,150 --> 00:25:09,070
thing my favorite topic that I always

00:25:06,860 --> 00:25:14,180
rage about when I talk about JavaScript

00:25:09,070 --> 00:25:17,420
who a few likes to maintain web page

00:25:14,180 --> 00:25:20,060
configuration files there are people who

00:25:17,420 --> 00:25:23,030
like that like four of them or five

00:25:20,060 --> 00:25:25,040
sorry yeah the thing is if you hate

00:25:23,030 --> 00:25:26,630
configuring them maintaining them like I

00:25:25,040 --> 00:25:28,610
do I really hate that you know I have to

00:25:26,630 --> 00:25:30,790
do that like 17 times right because you

00:25:28,610 --> 00:25:33,290
know I have seventeen microphone ends so

00:25:30,790 --> 00:25:35,060
you really have to invest into cheap

00:25:33,290 --> 00:25:38,180
tooling you mentioned greenkeeper before

00:25:35,060 --> 00:25:40,310
that's very very good to have that also

00:25:38,180 --> 00:25:42,350
if you don't use maybe you use different

00:25:40,310 --> 00:25:43,790
package manager in different projects

00:25:42,350 --> 00:25:45,940
maybe you have got maybe you have roll

00:25:43,790 --> 00:25:50,110
up maybe you have grunt maybe you have

00:25:45,940 --> 00:25:53,320
next big thing JSP parcel I don't know

00:25:50,110 --> 00:25:56,150
you can use all of them belt make

00:25:53,320 --> 00:25:59,060
contracts between teams that you use the

00:25:56,150 --> 00:26:01,220
same tools for every project you have

00:25:59,060 --> 00:26:02,060
that might make sense because otherwise

00:26:01,220 --> 00:26:03,560
yeah

00:26:02,060 --> 00:26:06,560
knowledge will be spread completely

00:26:03,560 --> 00:26:08,450
weird one important thing you have to

00:26:06,560 --> 00:26:10,040
think about is routing between front

00:26:08,450 --> 00:26:12,550
ends we just mentions that you have to

00:26:10,040 --> 00:26:17,320
that we reinvented hyperlinks between

00:26:12,550 --> 00:26:21,400
different Dom States also if you

00:26:17,320 --> 00:26:21,400
navigate from one to another

00:26:21,590 --> 00:26:25,100
Micro front-end you want to preload

00:26:23,180 --> 00:26:27,170
stuff so you want to make sure that it

00:26:25,100 --> 00:26:29,630
is working in a correct way just on the

00:26:27,170 --> 00:26:31,130
client side but also you have you want

00:26:29,630 --> 00:26:33,950
to have something on the server sides

00:26:31,130 --> 00:26:35,510
that make routing to different front

00:26:33,950 --> 00:26:36,130
ends on different paths it's much more

00:26:35,510 --> 00:26:38,530
easily

00:26:36,130 --> 00:26:41,050
easier you can use something simple like

00:26:38,530 --> 00:26:42,610
engine eggs or an express server for

00:26:41,050 --> 00:26:44,740
that but they are complicated more

00:26:42,610 --> 00:26:46,570
complicated stuff out there you can use

00:26:44,740 --> 00:26:48,910
that you find it if you search for

00:26:46,570 --> 00:26:50,320
routing or microformats and obviously if

00:26:48,910 --> 00:26:52,120
you're using like a shared runtime

00:26:50,320 --> 00:26:54,310
approach where you're using react view

00:26:52,120 --> 00:26:56,440
and angular on the same page you can't

00:26:54,310 --> 00:26:57,760
just use angular router because yeah you

00:26:56,440 --> 00:26:59,410
also need to support direct route to

00:26:57,760 --> 00:27:00,940
somehow or you develop your own router

00:26:59,410 --> 00:27:05,760
because developing your own library is

00:27:00,940 --> 00:27:09,760
always a good idea right irony Thanks

00:27:05,760 --> 00:27:11,530
okay so again the conclusion microphone

00:27:09,760 --> 00:27:16,000
ends might help you big time we have

00:27:11,530 --> 00:27:17,650
kind of different opinions on one when

00:27:16,000 --> 00:27:19,570
you want to introduce micro fragments

00:27:17,650 --> 00:27:21,640
for me it's always a question of if your

00:27:19,570 --> 00:27:23,730
team is getting too big then they might

00:27:21,640 --> 00:27:26,920
really really help you if you're

00:27:23,730 --> 00:27:28,990
modernizing applications like mi just

00:27:26,920 --> 00:27:31,060
mentioned then it's really a big help we

00:27:28,990 --> 00:27:33,490
can because even if you have this big

00:27:31,060 --> 00:27:36,520
old XJ s3 application that some

00:27:33,490 --> 00:27:38,980
companies still have you can someone is

00:27:36,520 --> 00:27:40,840
laughing not the one I was talking to

00:27:38,980 --> 00:27:42,820
actually he didn't start laughing okay

00:27:40,840 --> 00:27:44,740
then you can just start developing your

00:27:42,820 --> 00:27:46,870
new components with react and integrate

00:27:44,740 --> 00:27:49,150
them to your old application or do it

00:27:46,870 --> 00:27:51,130
the way that blender does this all works

00:27:49,150 --> 00:27:55,030
and it helps you a lot but it comes at a

00:27:51,130 --> 00:27:58,060
cost again 17 webpack configs right so

00:27:55,030 --> 00:28:00,820
always introduce new micro front ends

00:27:58,060 --> 00:28:03,760
with care I've seen projects that have

00:28:00,820 --> 00:28:07,090
like 10 to 15 micro front ends for like

00:28:03,760 --> 00:28:09,760
three front end developers that usually

00:28:07,090 --> 00:28:11,860
hurts a lot so take care when you

00:28:09,760 --> 00:28:14,200
introduce new micro front ends just be

00:28:11,860 --> 00:28:16,600
sure that you don't implement or just

00:28:14,200 --> 00:28:18,540
adds new complexity too because it's

00:28:16,600 --> 00:28:22,360
cool to have micro front ends right now

00:28:18,540 --> 00:28:24,150
always check if it's needed and mostly

00:28:22,360 --> 00:28:26,230
it's when you want to modernize your

00:28:24,150 --> 00:28:28,810
applications then it's a really good way

00:28:26,230 --> 00:28:30,880
to add new micro front ends don't forget

00:28:28,810 --> 00:28:33,520
if you modernize to throw away old code

00:28:30,880 --> 00:28:35,260
that's the most important thing always

00:28:33,520 --> 00:28:37,990
keep in mind that throwing away code

00:28:35,260 --> 00:28:39,820
should be the best way when you review a

00:28:37,990 --> 00:28:43,090
code make sure that the code is

00:28:39,820 --> 00:28:44,860
removable later on this will help if you

00:28:43,090 --> 00:28:47,080
want to implement micro front ends once

00:28:44,860 --> 00:28:49,330
in a time maybe in five years so if you

00:28:47,080 --> 00:28:50,020
use microphones for like you mentioned

00:28:49,330 --> 00:28:51,730
the

00:28:50,020 --> 00:28:53,980
legacy or the modernizing of legacy

00:28:51,730 --> 00:28:56,740
applications and you start with the

00:28:53,980 --> 00:28:58,540
extras monolith and start the new react

00:28:56,740 --> 00:29:00,250
application there if you then decide

00:28:58,540 --> 00:29:02,350
okay we want to go with view jeaious

00:29:00,250 --> 00:29:04,360
then maybe don't set up the third

00:29:02,350 --> 00:29:07,240
microphone and with view J's but try to

00:29:04,360 --> 00:29:08,740
get rid of one of the others first I'll

00:29:07,240 --> 00:29:11,080
just start a new micro front-end with

00:29:08,740 --> 00:29:16,240
react because you have it already all

00:29:11,080 --> 00:29:17,680
right miss x3 s3 that's actually all of

00:29:16,240 --> 00:29:19,810
our content I think we have like three

00:29:17,680 --> 00:29:23,610
four minutes left for questions are

00:29:19,810 --> 00:29:31,570
there any questions about this topic

00:29:23,610 --> 00:29:35,590
there's one yes I didn't get that word

00:29:31,570 --> 00:29:36,610
how do you synchronize what yes that's

00:29:35,590 --> 00:29:38,170
an interesting thing that's actually

00:29:36,610 --> 00:29:39,190
something that I just experienced in an

00:29:38,170 --> 00:29:42,460
application where people had problems

00:29:39,190 --> 00:29:44,050
with that so what we do is we have quite

00:29:42,460 --> 00:29:46,240
a lot of events flowing between the

00:29:44,050 --> 00:29:48,310
iframe and the outer regions so we have

00:29:46,240 --> 00:29:50,860
for this this placeholder image that's

00:29:48,310 --> 00:29:52,450
rendered before the actual content of

00:29:50,860 --> 00:29:54,310
the four iframes rendered and at some

00:29:52,450 --> 00:29:55,960
point the iframe is gonna send a okay

00:29:54,310 --> 00:29:57,160
I'm done rendering and then the image is

00:29:55,960 --> 00:29:59,740
replaced with the content of the real

00:29:57,160 --> 00:30:04,540
iframe does that somehow answer your

00:29:59,740 --> 00:30:12,100
question great other questions or do you

00:30:04,540 --> 00:30:19,120
want to add something sorry no how do

00:30:12,100 --> 00:30:21,640
you share what state state yeah if you

00:30:19,120 --> 00:30:23,320
want to share a state you always want to

00:30:21,640 --> 00:30:23,830
make sure that it's the lowest level

00:30:23,320 --> 00:30:25,540
possible

00:30:23,830 --> 00:30:27,310
mostly it's something like a refresh

00:30:25,540 --> 00:30:28,690
token or a jpg and you want to build up

00:30:27,310 --> 00:30:30,430
the state by your own because you have

00:30:28,690 --> 00:30:34,210
your own state management library in

00:30:30,430 --> 00:30:36,370
every other language if you have one

00:30:34,210 --> 00:30:38,920
state management library for multiple

00:30:36,370 --> 00:30:40,510
languages something like Redux or

00:30:38,920 --> 00:30:42,730
something like mopix

00:30:40,510 --> 00:30:45,580
then it's possible to use the same state

00:30:42,730 --> 00:30:49,060
library and just swap out the UI part it

00:30:45,580 --> 00:30:52,030
heavily depends but mostly you want to

00:30:49,060 --> 00:30:53,740
go down as much as possible and don't

00:30:52,030 --> 00:30:55,210
share any stage between them that's

00:30:53,740 --> 00:30:57,370
exactly exactly what I wanted to say so

00:30:55,210 --> 00:30:58,780
you mentioned JSON web tokens or let's

00:30:57,370 --> 00:31:01,150
say the information has to be about the

00:30:58,780 --> 00:31:02,890
current user you may share that state if

00:31:01,150 --> 00:31:03,970
you want to share more state then

00:31:02,890 --> 00:31:06,009
probably these

00:31:03,970 --> 00:31:07,840
should not be two different microphones

00:31:06,009 --> 00:31:10,360
because they're responsible for the same

00:31:07,840 --> 00:31:25,509
business domain so they should actually

00:31:10,360 --> 00:31:27,309
be one application how do you make them

00:31:25,509 --> 00:31:29,590
communicate with each other it totally

00:31:27,309 --> 00:31:31,990
depends on the approach so if it's the

00:31:29,590 --> 00:31:34,090
iframe approach you can just use this

00:31:31,990 --> 00:31:36,519
postmessage api is that the name I think

00:31:34,090 --> 00:31:38,590
it's the name yes if it's in the shared

00:31:36,519 --> 00:31:40,889
runtime you can have them Central even

00:31:38,590 --> 00:31:42,879
passed there what we're doing with a

00:31:40,889 --> 00:31:45,039
separate runtime thing is that we have a

00:31:42,879 --> 00:31:47,590
even pass in the backend and some of the

00:31:45,039 --> 00:31:50,110
events are actually transferred to the

00:31:47,590 --> 00:31:52,690
front end using WebSockets so that I can

00:31:50,110 --> 00:31:54,100
communicate using that what's important

00:31:52,690 --> 00:31:57,039
there from my point of view is have a

00:31:54,100 --> 00:31:59,590
defined contract on what is allowed as a

00:31:57,039 --> 00:32:02,259
communication I experience one project

00:31:59,590 --> 00:32:04,919
they just through Redux messages Redux

00:32:02,259 --> 00:32:06,970
actions into the Redux message bus and

00:32:04,919 --> 00:32:09,190
nowhere there was any documentation

00:32:06,970 --> 00:32:10,779
about the messages someone just assumed

00:32:09,190 --> 00:32:12,669
okay if the message is called

00:32:10,779 --> 00:32:15,940
at user then there's probably this

00:32:12,669 --> 00:32:17,889
property that's gonna be a hell so if

00:32:15,940 --> 00:32:19,690
you communicate with each other define a

00:32:17,889 --> 00:32:21,039
contract there there is also a good

00:32:19,690 --> 00:32:24,009
library from Zendesk

00:32:21,039 --> 00:32:25,600
it's called shared shared storage it's

00:32:24,009 --> 00:32:28,720
something like local storage but for

00:32:25,600 --> 00:32:30,399
different domains x''b all which works

00:32:28,720 --> 00:32:34,090
very good for if you have different

00:32:30,399 --> 00:32:36,330
runtimes I think and there's one last

00:32:34,090 --> 00:32:36,330
question

00:32:44,630 --> 00:32:48,600
what is Universal renderings that back

00:32:47,040 --> 00:32:49,500
into the server-side rendering in front

00:32:48,600 --> 00:32:52,230
and rendering I'm not sure right now

00:32:49,500 --> 00:32:53,850
yeah if you have I want to have

00:32:52,230 --> 00:32:56,640
universal rendering you have to say with

00:32:53,850 --> 00:32:58,290
one framework and you can't mix the

00:32:56,640 --> 00:33:00,150
different front ends in between that's

00:32:58,290 --> 00:33:01,770
more integrated in the web server like

00:33:00,150 --> 00:33:04,380
if you have an express server then you

00:33:01,770 --> 00:33:06,180
could do weird stuff there you can do

00:33:04,380 --> 00:33:08,310
weird stuff but it's hard and yet it's

00:33:06,180 --> 00:33:10,860
minimal work it's not really something

00:33:08,310 --> 00:33:14,430
that that works out of the boxes like

00:33:10,860 --> 00:33:16,020
react render or view of angular or I

00:33:14,430 --> 00:33:17,370
don't know if there are further

00:33:16,020 --> 00:33:18,750
questions we're gonna be here the whole

00:33:17,370 --> 00:33:21,180
day we're gonna be at the party tonight

00:33:18,750 --> 00:33:22,470
just come to us talk to us talk to us on

00:33:21,180 --> 00:33:24,930
Twitter I think our names are there yes

00:33:22,470 --> 00:33:26,730
they are so thanks a lot and have a lot

00:33:24,930 --> 00:33:29,170
of fun at the JSON conf

00:33:26,730 --> 00:33:32,199
[Applause]

00:33:29,170 --> 00:33:32,199

YouTube URL: https://www.youtube.com/watch?v=xY8CaVQ2OHY


