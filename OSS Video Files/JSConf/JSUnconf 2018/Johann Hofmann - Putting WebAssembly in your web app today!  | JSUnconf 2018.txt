Title: Johann Hofmann - Putting WebAssembly in your web app today!  | JSUnconf 2018
Publication date: 2018-05-14
Playlist: JSUnconf 2018
Description: 
	
Captions: 
	00:00:10,340 --> 00:00:15,299
hello everyone my name is Johan I'd like

00:00:13,950 --> 00:00:17,609
to talk about webassembly today and

00:00:15,299 --> 00:00:21,510
specifically how you can put webassembly

00:00:17,609 --> 00:00:23,189
in your web app in and I mean kind of

00:00:21,510 --> 00:00:25,740
real world web assembly in your real

00:00:23,189 --> 00:00:29,369
world web app although my webs gonna be

00:00:25,740 --> 00:00:31,590
a demo one but anyway so I'm part Fox

00:00:29,369 --> 00:00:33,600
developer at Mozilla I work in the

00:00:31,590 --> 00:00:36,300
security engineering team I don't really

00:00:33,600 --> 00:00:39,450
work on web assembly but I am a big

00:00:36,300 --> 00:00:42,690
enthusiast and I follow it closely

00:00:39,450 --> 00:00:44,640
last year I was here and talked about

00:00:42,690 --> 00:00:46,079
web assembly - and I talked about the

00:00:44,640 --> 00:00:47,610
web assembly text format and the web

00:00:46,079 --> 00:00:49,530
simply binary format and how the two

00:00:47,610 --> 00:00:50,969
like are related to each other and what

00:00:49,530 --> 00:00:52,110
we did this is so this is a lot of code

00:00:50,969 --> 00:00:55,559
you don't have to take it all in but

00:00:52,110 --> 00:00:58,079
what we did was we looked at the like we

00:00:55,559 --> 00:01:00,750
hand wrote some Cup some custom wasm

00:00:58,079 --> 00:01:02,879
code that added two numbers and you can

00:01:00,750 --> 00:01:05,790
see on the left hand side and then we

00:01:02,879 --> 00:01:07,740
included it in our JavaScript app with

00:01:05,790 --> 00:01:09,150
this very boilerplate code here and it

00:01:07,740 --> 00:01:11,369
also has some logging in there so I just

00:01:09,150 --> 00:01:13,979
find a copy pasted exactly the code that

00:01:11,369 --> 00:01:15,540
we used back then and I totally

00:01:13,979 --> 00:01:18,689
understood when a lot of you came to me

00:01:15,540 --> 00:01:20,970
and also during the talk asked so this

00:01:18,689 --> 00:01:24,630
is not really ready for production usage

00:01:20,970 --> 00:01:27,330
right and it's true it wasn't there was

00:01:24,630 --> 00:01:28,829
so back then you could I think it was a

00:01:27,330 --> 00:01:30,329
point where you could already compile it

00:01:28,829 --> 00:01:35,000
with a rust compiler for example if you

00:01:30,329 --> 00:01:37,799
were if you wanted to use rust which

00:01:35,000 --> 00:01:39,500
which also worked kind of okay so you

00:01:37,799 --> 00:01:42,600
had to do the same kind of fetch e

00:01:39,500 --> 00:01:45,270
webassembly api boilerplate and

00:01:42,600 --> 00:01:46,799
satiation and then you have the same

00:01:45,270 --> 00:01:48,899
limitations that you had with a web

00:01:46,799 --> 00:01:50,070
assembly text code - so these

00:01:48,899 --> 00:01:53,729
limitations are pretty gray if you can

00:01:50,070 --> 00:01:55,409
only pass in numbers to like pass back

00:01:53,729 --> 00:01:58,079
and forth numbers between web assembly

00:01:55,409 --> 00:02:00,750
MJS and all other communication needs to

00:01:58,079 --> 00:02:03,810
go through like shared memory buffers

00:02:00,750 --> 00:02:05,969
like a big heap that has just I'd erase

00:02:03,810 --> 00:02:09,539
in it well that you can allocate by the

00:02:05,969 --> 00:02:12,510
radar but byte arrays on it and that is

00:02:09,539 --> 00:02:13,450
very inconvenient and a lot of you said

00:02:12,510 --> 00:02:15,520
that last time and I said

00:02:13,450 --> 00:02:18,129
last time too so a year later we're here

00:02:15,520 --> 00:02:20,739
and we have a new cool tool which is

00:02:18,129 --> 00:02:25,239
called wasn't vine gem it's by my

00:02:20,739 --> 00:02:27,400
amazing colleagues colleague Alex and he

00:02:25,239 --> 00:02:29,950
wrote this tool to enable this sort of

00:02:27,400 --> 00:02:32,430
higher level interactions between wazzle

00:02:29,950 --> 00:02:34,569
and Jas that we didn't have previously

00:02:32,430 --> 00:02:37,090
and what it does it automatically

00:02:34,569 --> 00:02:38,860
generates the sort of Jas glue and it

00:02:37,090 --> 00:02:40,030
only works in rust for now which is why

00:02:38,860 --> 00:02:42,190
I'm going to do the demo that I'm going

00:02:40,030 --> 00:02:44,950
to do soon and rust and this talk is

00:02:42,190 --> 00:02:46,780
literally going to be 90% me demoing how

00:02:44,950 --> 00:02:51,040
this Tool Works inviting setup for it so

00:02:46,780 --> 00:02:52,480
I hope you are hearing for that yeah a

00:02:51,040 --> 00:02:54,819
couple things you will need or we will

00:02:52,480 --> 00:02:56,500
need for this and what I mean when I you

00:02:54,819 --> 00:02:58,269
know in the first slide wrote from

00:02:56,500 --> 00:03:00,370
scratch I mean you know from scratch we

00:02:58,269 --> 00:03:01,239
don't I don't expect you to have well

00:03:00,370 --> 00:03:04,239
although the rust knowledge would be

00:03:01,239 --> 00:03:06,790
good but like no you should have a UNIX

00:03:04,239 --> 00:03:08,140
computer that's kind of all and these

00:03:06,790 --> 00:03:10,690
are the things you need to install them

00:03:08,140 --> 00:03:12,700
and these should work out of the box and

00:03:10,690 --> 00:03:14,650
then you're set right you can do it on

00:03:12,700 --> 00:03:16,660
your developer machine you can integrate

00:03:14,650 --> 00:03:18,400
the stuff into your existing project

00:03:16,660 --> 00:03:21,130
like this and there is no extra magic

00:03:18,400 --> 00:03:23,440
required if you don't have a UNIX

00:03:21,130 --> 00:03:25,299
machine if you if you don't have the

00:03:23,440 --> 00:03:27,609
time to download all the stuff from from

00:03:25,299 --> 00:03:30,940
the conference Wi-Fi there's a really

00:03:27,609 --> 00:03:32,500
cool web app which just launched it's

00:03:30,940 --> 00:03:35,230
written by my awesome buddy colleagues

00:03:32,500 --> 00:03:36,430
Michael and Yuri and it's it's amazing

00:03:35,230 --> 00:03:39,310
it's called webassembly

00:03:36,430 --> 00:03:42,340
studio and it allows you to run all this

00:03:39,310 --> 00:03:46,889
code like the Jas part and the HTML and

00:03:42,340 --> 00:03:50,079
the rust or C++ or C or just plain wasum

00:03:46,889 --> 00:03:51,910
inside a web IDE and I absolutely

00:03:50,079 --> 00:03:53,380
recommend you to check it out it's it's

00:03:51,910 --> 00:03:55,090
really amazing and it gets you started

00:03:53,380 --> 00:03:56,829
with wow them quite quickly it's an

00:03:55,090 --> 00:03:58,599
online IDE so I wouldn't I guess you

00:03:56,829 --> 00:04:01,209
can't use it for for a real word use

00:03:58,599 --> 00:04:03,880
like production usage but it's really

00:04:01,209 --> 00:04:07,030
cool to play around with so now I'm

00:04:03,880 --> 00:04:09,700
gonna switch to my mic like terminal to

00:04:07,030 --> 00:04:11,230
do a live demo here the requirements for

00:04:09,700 --> 00:04:12,459
us we're gonna do a small web app that

00:04:11,230 --> 00:04:14,889
computes a cryptographic hash of a

00:04:12,459 --> 00:04:17,440
string like shop secure hash algorithm

00:04:14,889 --> 00:04:20,079
and I already did the front end in j/s

00:04:17,440 --> 00:04:21,760
and it has an index HTML file and an app

00:04:20,079 --> 00:04:23,110
J's file it's not is not using any

00:04:21,760 --> 00:04:24,520
complex Spangler's or frameworks or

00:04:23,110 --> 00:04:26,200
whatever but that's not the point you

00:04:24,520 --> 00:04:27,040
could as you will see you could still

00:04:26,200 --> 00:04:30,250
integrate it if you

00:04:27,040 --> 00:04:33,460
using complex stuff the point is that we

00:04:30,250 --> 00:04:35,860
do the hash computation in wasm and in

00:04:33,460 --> 00:04:38,320
rust in this case because rust has nice

00:04:35,860 --> 00:04:40,480
compile-time checkers and because russ

00:04:38,320 --> 00:04:41,830
orgasm tends to be faster than it is so

00:04:40,480 --> 00:04:46,360
we just want to do it for the sake of it

00:04:41,830 --> 00:04:48,790
let's switch to can everyone see this

00:04:46,360 --> 00:04:50,470
I'm gonna enlarge people in the back if

00:04:48,790 --> 00:04:56,190
you cannot see the code on the left hand

00:04:50,470 --> 00:04:56,190
side please scream larger or something

00:04:56,280 --> 00:05:05,860
fine cool perfect thank you so this is

00:05:01,420 --> 00:05:07,570
our setup we have my address on the left

00:05:05,860 --> 00:05:10,900
hand side my terminal is on the right

00:05:07,570 --> 00:05:13,090
hand side and here we have two files in

00:05:10,900 --> 00:05:15,340
my folder once called app dot J's and

00:05:13,090 --> 00:05:17,080
once called index dot HTML index dot

00:05:15,340 --> 00:05:19,180
HTML is you see I didn't really spend a

00:05:17,080 --> 00:05:20,890
lot of time on the front end in the

00:05:19,180 --> 00:05:23,410
exception is very simple it has an input

00:05:20,890 --> 00:05:25,650
field it has a button and it has a

00:05:23,410 --> 00:05:29,820
script tag and when you go to the script

00:05:25,650 --> 00:05:32,800
we have we're getting the input we have

00:05:29,820 --> 00:05:36,070
the button which we're getting and then

00:05:32,800 --> 00:05:37,920
one click on the button we alert the

00:05:36,070 --> 00:05:41,230
value of the input but there's a to-do

00:05:37,920 --> 00:05:44,860
can we please hatch this which is what

00:05:41,230 --> 00:05:47,680
we're going to do now using rust so how

00:05:44,860 --> 00:05:49,210
do we start off if you want to start off

00:05:47,680 --> 00:05:50,650
creating any Russ project and we will

00:05:49,210 --> 00:05:53,350
have to create a small rust library for

00:05:50,650 --> 00:05:57,400
this you use cargo cargo is the build

00:05:53,350 --> 00:05:58,990
tool for rust and this is pretty cool

00:05:57,400 --> 00:06:01,270
you can basically use cargo to create a

00:05:58,990 --> 00:06:03,250
new rust project but if you want to use

00:06:01,270 --> 00:06:05,680
the you know the rust code in your

00:06:03,250 --> 00:06:08,860
project and your own big app or whatever

00:06:05,680 --> 00:06:09,790
you could create the library basically

00:06:08,860 --> 00:06:12,630
wherever you like and whichever

00:06:09,790 --> 00:06:15,130
directory like because in the end

00:06:12,630 --> 00:06:18,330
obviously it generates some has an

00:06:15,130 --> 00:06:20,770
output and then you could just use your

00:06:18,330 --> 00:06:23,980
whatever setup you have your gulp file

00:06:20,770 --> 00:06:26,410
you make files your web pack or whatever

00:06:23,980 --> 00:06:29,310
to move it to the right position so I'm

00:06:26,410 --> 00:06:34,360
just gonna create a new folder called

00:06:29,310 --> 00:06:39,580
hasher which is a library in the just

00:06:34,360 --> 00:06:40,639
base directory of my app so right then I

00:06:39,580 --> 00:06:43,610
go into it

00:06:40,639 --> 00:06:44,659
sure and you can see on my editor on the

00:06:43,610 --> 00:06:48,919
right hand side here we have a new

00:06:44,659 --> 00:06:51,560
directory which is called Hatcher and

00:06:48,919 --> 00:06:53,800
which has two files one is called lip

00:06:51,560 --> 00:06:56,719
dollar s and one is called cargo Tommo

00:06:53,800 --> 00:07:00,080
now this is a pretty standard setup for

00:06:56,719 --> 00:07:01,520
a rust project this is some boilerplate

00:07:00,080 --> 00:07:03,110
that the rest code always adds we can

00:07:01,520 --> 00:07:06,050
delete this in this case so we start

00:07:03,110 --> 00:07:10,039
from a fresh empty rust library and this

00:07:06,050 --> 00:07:12,289
is a boiler clay the cargo file cargo

00:07:10,039 --> 00:07:16,490
files are like package.json for rust

00:07:12,289 --> 00:07:18,349
just that it's donal it's not JSON and

00:07:16,490 --> 00:07:20,330
here's where we're gonna have to add a

00:07:18,349 --> 00:07:22,159
bit of oiler plate because rust was not

00:07:20,330 --> 00:07:25,159
initially made to work with wisdoms so

00:07:22,159 --> 00:07:26,659
we have to do a very few things to tell

00:07:25,159 --> 00:07:30,560
the compiler hey you know we're actually

00:07:26,659 --> 00:07:32,900
working with Waze I'm here and I'm gonna

00:07:30,560 --> 00:07:36,319
I'm just gonna yeah this is what you

00:07:32,900 --> 00:07:38,569
should do to just copy paste it in so

00:07:36,319 --> 00:07:40,339
first thing is we tell the compiler hey

00:07:38,569 --> 00:07:41,900
this is a special type of lip it's not

00:07:40,339 --> 00:07:44,960
really important what that is at this

00:07:41,900 --> 00:07:47,389
point and the second one is that we

00:07:44,960 --> 00:07:50,000
define a dependency on the wasn't

00:07:47,389 --> 00:07:53,120
binding project which we yeah which I

00:07:50,000 --> 00:07:54,620
introduced earlier so I'm sorry for

00:07:53,120 --> 00:07:58,250
doing all the rest will will soon stop

00:07:54,620 --> 00:08:00,560
doing rest and then the second thing a

00:07:58,250 --> 00:08:02,719
second kind of boilerplate I need to put

00:08:00,560 --> 00:08:04,279
in my rust file is this allowing

00:08:02,719 --> 00:08:07,189
experimental features for the rest

00:08:04,279 --> 00:08:08,539
compiler which is also it's also it's

00:08:07,189 --> 00:08:09,979
gonna go away at some point and it's

00:08:08,539 --> 00:08:12,229
also not super important to know why

00:08:09,979 --> 00:08:14,509
we're doing this but just yeah this is

00:08:12,229 --> 00:08:15,830
allowing your scrote to features okay

00:08:14,509 --> 00:08:17,539
let's start off the first thing we have

00:08:15,830 --> 00:08:20,509
to do in our rust code is we have to

00:08:17,539 --> 00:08:23,089
define an extern crate which is called

00:08:20,509 --> 00:08:24,439
waz bind gen that means hey you know we

00:08:23,089 --> 00:08:28,219
have this dependency please link it

00:08:24,439 --> 00:08:33,079
against our source and then yeah right

00:08:28,219 --> 00:08:39,260
we have to include some of the imports

00:08:33,079 --> 00:08:40,579
some of the sources in reload this

00:08:39,260 --> 00:08:42,919
basically imports a bunch of stuff from

00:08:40,579 --> 00:08:44,269
wasn't bind Jim and now we can get

00:08:42,919 --> 00:08:47,329
started just writing a rust function

00:08:44,269 --> 00:08:48,890
like this is gonna be a very simple Russ

00:08:47,329 --> 00:08:53,570
function I hope you can understand it so

00:08:48,890 --> 00:08:56,170
it's basically saying hey we want this

00:08:53,570 --> 00:08:59,810
I'm bound basically imported to

00:08:56,170 --> 00:09:03,670
JavaScript and then we make a public

00:08:59,810 --> 00:09:06,080
function hash and hash takes an input

00:09:03,670 --> 00:09:08,510
which is a string this thing is

00:09:06,080 --> 00:09:12,400
statically typed input I think like this

00:09:08,510 --> 00:09:14,990
it's a string and it puts a string out

00:09:12,400 --> 00:09:18,950
yes these two strings look different

00:09:14,990 --> 00:09:21,140
once and the other string that is a very

00:09:18,950 --> 00:09:22,790
long topic in short one is a pointer to

00:09:21,140 --> 00:09:25,070
a string or a reference to a string the

00:09:22,790 --> 00:09:26,330
other is an owned piece of memory if you

00:09:25,070 --> 00:09:29,270
want to learn more about this please

00:09:26,330 --> 00:09:30,530
talk to me afterwards it's not really

00:09:29,270 --> 00:09:32,900
important for forgetting the core

00:09:30,530 --> 00:09:34,040
concept and then what we're going to do

00:09:32,900 --> 00:09:37,160
is we're not going to hash it right now

00:09:34,040 --> 00:09:41,080
we're just going to return a four minute

00:09:37,160 --> 00:09:45,620
thing when we do hashed and then our

00:09:41,080 --> 00:09:47,540
input okay this is annoying here so

00:09:45,620 --> 00:09:49,760
we're just gonna say hey I have this

00:09:47,540 --> 00:09:52,930
template string please format it for me

00:09:49,760 --> 00:09:55,930
to include input we're currently these

00:09:52,930 --> 00:09:57,110
curly brackets are I hope that's

00:09:55,930 --> 00:09:59,240
understandable

00:09:57,110 --> 00:10:00,890
right so we define the function hash

00:09:59,240 --> 00:10:04,220
returns the string takes the string

00:10:00,890 --> 00:10:07,460
returns a string take formats the input

00:10:04,220 --> 00:10:11,840
to include hashed and parentheses around

00:10:07,460 --> 00:10:12,920
it that's a pretty simple function we're

00:10:11,840 --> 00:10:14,270
going to do the action hashing later

00:10:12,920 --> 00:10:17,390
because I I don't know how to how to

00:10:14,270 --> 00:10:20,690
write a shot to algorithm so I'm just

00:10:17,390 --> 00:10:22,790
gonna pull a library how do we build

00:10:20,690 --> 00:10:24,920
this now so we use cargo again you can

00:10:22,790 --> 00:10:27,230
use cargo built and then you have to

00:10:24,920 --> 00:10:31,250
specify it from target which is horizon

00:10:27,230 --> 00:10:35,240
32 known no I know it's it's so

00:10:31,250 --> 00:10:37,070
confusing unknown unknown means these

00:10:35,240 --> 00:10:39,050
fields are normally populated for

00:10:37,070 --> 00:10:40,760
information for the rest compiler but

00:10:39,050 --> 00:10:42,620
for class and Wiseman's just as amino

00:10:40,760 --> 00:10:45,950
Lystra platforms or whatever so we just

00:10:42,620 --> 00:10:47,840
don't fill them in now it's gonna build

00:10:45,950 --> 00:10:53,840
oh and I'm relying on the confidence

00:10:47,840 --> 00:10:59,450
Network to world create lists oh I made

00:10:53,840 --> 00:11:01,010
a typo here unknown : nice no it works

00:10:59,450 --> 00:11:02,540
now it's compiling all the appendices it

00:11:01,010 --> 00:11:04,460
wasn't bind gen and shouldn't take too

00:11:02,540 --> 00:11:04,740
long so I'm just gonna block on it here

00:11:04,460 --> 00:11:08,760
right

00:11:04,740 --> 00:11:14,390
now and give us all the time to breathe

00:11:08,760 --> 00:11:16,680
breathe and taking all the new stuff and

00:11:14,390 --> 00:11:20,670
this is generally gonna generate some

00:11:16,680 --> 00:11:21,300
files now then I'm going to show you in

00:11:20,670 --> 00:11:24,330
a second

00:11:21,300 --> 00:11:26,220
cool it's done this is gonna not always

00:11:24,330 --> 00:11:28,200
take that long because it caches the

00:11:26,220 --> 00:11:29,610
intermediate population results of

00:11:28,200 --> 00:11:30,890
course and so you can just do it again

00:11:29,610 --> 00:11:33,089
and then it finishes really quickly

00:11:30,890 --> 00:11:34,980
let's take a look at what was generated

00:11:33,089 --> 00:11:37,350
so we refresh our tree again and there

00:11:34,980 --> 00:11:39,450
we can see here it's Hargett folder was

00:11:37,350 --> 00:11:41,940
generated and in there we have another

00:11:39,450 --> 00:11:43,380
folder or a couple of photos and this

00:11:41,940 --> 00:11:44,550
one's the most important one we have 32

00:11:43,380 --> 00:11:46,260
unknown unknown and then there is

00:11:44,550 --> 00:11:48,240
another one called debug in there and

00:11:46,260 --> 00:11:49,350
here we have the file that we're

00:11:48,240 --> 00:11:50,880
actually interested in that's kind of

00:11:49,350 --> 00:11:52,920
like the only thing in here that we're

00:11:50,880 --> 00:11:56,910
really interested in that's the raw wasm

00:11:52,920 --> 00:11:58,649
file we can use wasm dump which is not a

00:11:56,910 --> 00:12:08,160
cool utility to like take a look at the

00:11:58,649 --> 00:12:09,630
file them up right and so what we could

00:12:08,160 --> 00:12:12,300
do for examples we could disassemble it

00:12:09,630 --> 00:12:13,920
and then we see all the instructions in

00:12:12,300 --> 00:12:19,890
webassembly text format that's of course

00:12:13,920 --> 00:12:22,050
a lot of stuff and then we can also look

00:12:19,890 --> 00:12:23,399
at headers I mean if anyone of you

00:12:22,050 --> 00:12:24,720
remember it's the webassembly text

00:12:23,399 --> 00:12:26,970
format you know you have certain headers

00:12:24,720 --> 00:12:29,810
for certain sections and so there's a

00:12:26,970 --> 00:12:34,709
bit of memory and a lot of functions and

00:12:29,810 --> 00:12:36,089
a lot code too so what we could do now

00:12:34,709 --> 00:12:38,750
is we could assume the same thing that I

00:12:36,089 --> 00:12:43,709
already mentioned in my other talk is

00:12:38,750 --> 00:12:45,570
here it is so we could just fetch it and

00:12:43,709 --> 00:12:46,980
include it here yeah this one we could

00:12:45,570 --> 00:12:48,870
just fetch it and include it and use

00:12:46,980 --> 00:12:51,540
bebés IMI's instantiate and then kind of

00:12:48,870 --> 00:12:52,920
provide our own runtime for it which is

00:12:51,540 --> 00:12:55,950
kind of boilerplate E and it's kind of

00:12:52,920 --> 00:12:59,520
boring so how does wasn't bind and help

00:12:55,950 --> 00:13:02,850
here well what wasn't bind Jen does is

00:12:59,520 --> 00:13:06,690
we run it again on our wasn't file and

00:13:02,850 --> 00:13:09,390
what it will do now it will generate two

00:13:06,690 --> 00:13:12,990
additional files target wasn't so you -

00:13:09,390 --> 00:13:15,029
unknown debug hash sure was an

00:13:12,990 --> 00:13:16,680
and we can specify an out directory

00:13:15,029 --> 00:13:17,760
which is it of course convenient I'm

00:13:16,680 --> 00:13:19,589
gonna put it in the top-level directory

00:13:17,760 --> 00:13:20,610
of the of the actual web app because

00:13:19,589 --> 00:13:23,820
that's the sources that we're gonna use

00:13:20,610 --> 00:13:25,830
to run web assembly and let's do that

00:13:23,820 --> 00:13:28,110
cool it's done let's see what it

00:13:25,830 --> 00:13:30,690
generated so now we have two new files

00:13:28,110 --> 00:13:33,209
once called it's very you know at the

00:13:30,690 --> 00:13:37,050
bottom ones called hash RJ as deal is

00:13:33,209 --> 00:13:39,120
called hash sure BG Dogg Wazza and I

00:13:37,050 --> 00:13:40,290
think hasha J's is really interesting

00:13:39,120 --> 00:13:45,600
file so I want to take a look at it with

00:13:40,290 --> 00:13:49,410
you what it does is it imports this kind

00:13:45,600 --> 00:13:51,360
of wasn't file which is defined at the

00:13:49,410 --> 00:13:54,480
bottom and then it defines a lot of

00:13:51,360 --> 00:13:55,920
funky utility functions and one really

00:13:54,480 --> 00:13:57,750
interesting utility function is for

00:13:55,920 --> 00:14:01,010
example pastoralism and there it shows

00:13:57,750 --> 00:14:04,440
that like it takes all this annoying

00:14:01,010 --> 00:14:05,520
boilerplate stuff away from us by doing

00:14:04,440 --> 00:14:07,200
some of the work that we would otherwise

00:14:05,520 --> 00:14:08,820
have to do manually for example here you

00:14:07,200 --> 00:14:11,730
pass it a string Arg is a string in this

00:14:08,820 --> 00:14:13,830
case it encodes that string into a into

00:14:11,730 --> 00:14:17,190
a byte array into the buffer and then

00:14:13,830 --> 00:14:20,310
what it does is it allocates memory on

00:14:17,190 --> 00:14:23,790
this kind of shirt heap that the web

00:14:20,310 --> 00:14:27,750
assembly module uses and fills that

00:14:23,790 --> 00:14:30,750
memory with this with these you know

00:14:27,750 --> 00:14:35,010
unsigned integer with 8 bits so bytes

00:14:30,750 --> 00:14:37,170
and what it returns is a pointer which

00:14:35,010 --> 00:14:40,230
is just an index basically like just an

00:14:37,170 --> 00:14:44,270
array index of the location of this new

00:14:40,230 --> 00:14:46,470
string and the length of the string so

00:14:44,270 --> 00:14:48,480
that's just a convenience function that

00:14:46,470 --> 00:14:50,250
the mole to internally uses but it's

00:14:48,480 --> 00:14:51,810
super nice because this is the thing

00:14:50,250 --> 00:14:54,990
that you would have otherwise have had

00:14:51,810 --> 00:14:58,050
to do if you were using welcome yourself

00:14:54,990 --> 00:15:00,630
without using wasn't by general in order

00:14:58,050 --> 00:15:03,630
to pass strings so there's a bunch of

00:15:00,630 --> 00:15:05,459
more stuff here which is also just

00:15:03,630 --> 00:15:08,250
utility functions in order to use get

00:15:05,459 --> 00:15:10,529
what let what's called pass ring to

00:15:08,250 --> 00:15:13,260
blossom and then there is getstring from

00:15:10,529 --> 00:15:16,680
vaasam which is the same thing in

00:15:13,260 --> 00:15:19,140
Reverse and then there's a function

00:15:16,680 --> 00:15:22,560
called hash which as you would have

00:15:19,140 --> 00:15:23,940
guessed it's not a coincidence hash is

00:15:22,560 --> 00:15:25,880
there because we wrote a function hash

00:15:23,940 --> 00:15:27,950
if we were a function hash to

00:15:25,880 --> 00:15:29,180
we'll also be in there and there are a

00:15:27,950 --> 00:15:31,460
couple of interesting things here let's

00:15:29,180 --> 00:15:33,980
first take a look inside we do the whole

00:15:31,460 --> 00:15:35,540
pointer thing where we pass a strength

00:15:33,980 --> 00:15:38,720
was M and then get a pointer in length

00:15:35,540 --> 00:15:40,910
back and then we set an argument and

00:15:38,720 --> 00:15:44,600
then we call the hash function here and

00:15:40,910 --> 00:15:46,220
then we get the return value like the

00:15:44,600 --> 00:15:47,750
real return value which is the string

00:15:46,220 --> 00:15:52,370
which is then again read out of the

00:15:47,750 --> 00:15:54,320
JavaScript byte array and then we you

00:15:52,370 --> 00:15:58,370
know yeah free and return the real

00:15:54,320 --> 00:15:59,450
return value to our JavaScript code so

00:15:58,370 --> 00:16:01,430
this is the function that your

00:15:59,450 --> 00:16:03,040
javascript code if you were using is as

00:16:01,430 --> 00:16:05,480
i'm gonna show in a couple of minutes

00:16:03,040 --> 00:16:07,400
your javascript code will they call this

00:16:05,480 --> 00:16:11,240
you can also see that it's exported

00:16:07,400 --> 00:16:13,820
using an x-acto script six module export

00:16:11,240 --> 00:16:17,420
definition and now i can see you you

00:16:13,820 --> 00:16:20,510
know over drawing a browser simple

00:16:17,420 --> 00:16:22,670
browser compatibility stuff it's not

00:16:20,510 --> 00:16:25,480
it's not really simple with whoever

00:16:22,670 --> 00:16:28,190
sembly es6 modules aren't really

00:16:25,480 --> 00:16:31,580
implemented for web assembly yet so this

00:16:28,190 --> 00:16:33,320
doesn't actually work it does work if

00:16:31,580 --> 00:16:35,720
you use webpack though because web pack

00:16:33,320 --> 00:16:38,330
has like their own custom shim so if

00:16:35,720 --> 00:16:41,390
you're a web pack user good for you how

00:16:38,330 --> 00:16:44,090
many of you are wiping you lose good for

00:16:41,390 --> 00:16:45,350
you that's really good nice so a lot of

00:16:44,090 --> 00:16:47,410
people have web pack users so this is

00:16:45,350 --> 00:16:49,700
all you have to do and then just yeah

00:16:47,410 --> 00:16:51,290
i'm not going to go into too much web

00:16:49,700 --> 00:16:52,760
pack specific it's really easy from

00:16:51,290 --> 00:16:54,200
there on the like if you go to the

00:16:52,760 --> 00:16:56,210
wesson by engine page it has a set up

00:16:54,200 --> 00:16:58,370
instructions specifically for web pack

00:16:56,210 --> 00:17:00,020
what i'm gonna show you is how you can

00:16:58,370 --> 00:17:02,090
use like the rest of you how can you use

00:17:00,020 --> 00:17:04,490
this in your app without having to go to

00:17:02,090 --> 00:17:06,410
web pack and then there's this option

00:17:04,490 --> 00:17:09,050
here for wasn't binding on the left hand

00:17:06,410 --> 00:17:11,900
side here it's called no modules which

00:17:09,050 --> 00:17:14,959
means we're in a browser environment so

00:17:11,900 --> 00:17:19,250
please don't do yes six modules but you

00:17:14,959 --> 00:17:23,120
find the hash function in this case for

00:17:19,250 --> 00:17:26,300
example on the on a on a on an object

00:17:23,120 --> 00:17:29,450
that lives on the window global which is

00:17:26,300 --> 00:17:32,810
how libraries used to work in the back

00:17:29,450 --> 00:17:35,060
in the days so let's do this instead and

00:17:32,810 --> 00:17:37,340
i think i'll have to visit a different

00:17:35,060 --> 00:17:39,320
file and reload this one yeah so now you

00:17:37,340 --> 00:17:41,269
can see it has an exports if you

00:17:39,320 --> 00:17:43,519
in here and further down it then puts

00:17:41,269 --> 00:17:45,190
that exports on the window and and so

00:17:43,519 --> 00:17:47,149
you can basically use it like this and

00:17:45,190 --> 00:17:49,820
there's another really cool thing and

00:17:47,149 --> 00:17:51,169
it's brand-new and it's called another

00:17:49,820 --> 00:17:54,710
cool flex called nodejs

00:17:51,169 --> 00:18:03,440
the nodejs flag turns this whole thing

00:17:54,710 --> 00:18:05,870
into a a nodejs definition so that you

00:18:03,440 --> 00:18:09,500
can just just use modular exports so you

00:18:05,870 --> 00:18:12,230
can require the thing pretty cool it

00:18:09,500 --> 00:18:14,389
runs a node I think I my example is

00:18:12,230 --> 00:18:17,120
gonna be doesn't that I my examples

00:18:14,389 --> 00:18:18,860
gonna be in in in the browser though we

00:18:17,120 --> 00:18:21,190
can try out runs in node afterwards I'm

00:18:18,860 --> 00:18:24,889
pretty sure it I don't know does it

00:18:21,190 --> 00:18:29,000
anyway once no it gets were missing this

00:18:24,889 --> 00:18:30,200
port it might I'm a browser person I

00:18:29,000 --> 00:18:33,919
don't really know about it but this is

00:18:30,200 --> 00:18:41,179
really nice I thought let's do no

00:18:33,919 --> 00:18:43,009
modules then cool so now we we have hash

00:18:41,179 --> 00:18:44,299
it out yes and we have defined in our

00:18:43,009 --> 00:18:45,649
root directory and I showed you what it

00:18:44,299 --> 00:18:47,539
contains and now we want to get the

00:18:45,649 --> 00:18:50,450
stuff that's in there right so we want

00:18:47,539 --> 00:18:52,700
to go into our app yes and now we have

00:18:50,450 --> 00:18:56,840
to do a little bit of extra magic again

00:18:52,700 --> 00:18:58,970
so we do an important this global I show

00:18:56,840 --> 00:19:00,830
you how we have a global window object

00:18:58,970 --> 00:19:08,120
now that contains hash so we're just

00:19:00,830 --> 00:19:10,789
going to do it was a equals was fine Jen

00:19:08,120 --> 00:19:15,470
which is how we import our hash function

00:19:10,789 --> 00:19:17,629
and then this is a bit annoying still

00:19:15,470 --> 00:19:20,210
but people are working on it we call as

00:19:17,629 --> 00:19:24,559
and bind Jen on the wisemen file that we

00:19:20,210 --> 00:19:28,840
have in this case hash or bheegi bheegi

00:19:24,559 --> 00:19:31,970
azam and that will asynchronously

00:19:28,840 --> 00:19:34,700
initiate the whole last thing and fetch

00:19:31,970 --> 00:19:37,039
it and load it in whatever so this thing

00:19:34,700 --> 00:19:38,960
returns a promise in this case it works

00:19:37,039 --> 00:19:40,789
because my button is also a

00:19:38,960 --> 00:19:42,049
synchronously listening for user input

00:19:40,789 --> 00:19:43,309
so this thing's got definitely gonna

00:19:42,049 --> 00:19:47,149
finish before my user clicks on

00:19:43,309 --> 00:19:49,309
calculate when you have an app that does

00:19:47,149 --> 00:19:52,100
stuff that is supposed to run wasm

00:19:49,309 --> 00:19:53,090
before like it like instantly

00:19:52,100 --> 00:19:55,940
synchronously

00:19:53,090 --> 00:20:00,650
you need to you know await this or do

00:19:55,940 --> 00:20:02,330
promise and do then run my or something

00:20:00,650 --> 00:20:03,470
like this in this case I'm just gonna

00:20:02,330 --> 00:20:07,370
it's gonna be fine

00:20:03,470 --> 00:20:14,090
I hope let's do a yeah it's finally do

00:20:07,370 --> 00:20:19,100
some demo hash input value and now we

00:20:14,090 --> 00:20:20,360
can see I hope that we have Oh hasn't

00:20:19,100 --> 00:20:23,990
been Jen's not defined can anyone guess

00:20:20,360 --> 00:20:27,560
why so the sorry that was pretty quick

00:20:23,990 --> 00:20:28,460
the errors here there is wasn't binding

00:20:27,560 --> 00:20:32,450
is not defined

00:20:28,460 --> 00:20:37,090
do you have time also the problem is

00:20:32,450 --> 00:20:41,600
that we did not put it in our HTML file

00:20:37,090 --> 00:20:45,200
so half of Dolce s is a script that you

00:20:41,600 --> 00:20:47,270
need to put in your in your includes or

00:20:45,200 --> 00:20:50,540
just bundle it somehow and get it on

00:20:47,270 --> 00:20:55,510
your window global now to run

00:20:50,540 --> 00:20:59,960
I hope nice so we do have rust to

00:20:55,510 --> 00:21:03,950
JavaScript communication now which is

00:20:59,960 --> 00:21:05,780
cool but it's not a hash yet so now I

00:21:03,950 --> 00:21:08,150
hope the even cooler stuff starts where

00:21:05,780 --> 00:21:08,930
we just include a Russ module just like

00:21:08,150 --> 00:21:12,440
that and compiler

00:21:08,930 --> 00:21:14,750
2002 and run so what are we gonna use

00:21:12,440 --> 00:21:16,070
we're gonna use a I just you know look

00:21:14,750 --> 00:21:20,030
this up in advance of course we can use

00:21:16,070 --> 00:21:21,560
a crate arrest module called chat to I I

00:21:20,030 --> 00:21:24,700
think it's good I haven't used it before

00:21:21,560 --> 00:21:26,720
but it should be sufficient for purposes

00:21:24,700 --> 00:21:29,600
and I also looked it up it has a

00:21:26,720 --> 00:21:31,670
convenience method called sha to digest

00:21:29,600 --> 00:21:33,830
and we can actually use digest string

00:21:31,670 --> 00:21:37,330
which takes a string and just pull out

00:21:33,830 --> 00:21:39,800
the hash digests off off that string and

00:21:37,330 --> 00:21:42,130
yeah that's just let's just copy paste

00:21:39,800 --> 00:21:42,130
up

00:21:51,100 --> 00:21:55,190
all right

00:21:52,580 --> 00:21:58,280
so the problem here is we still need to

00:21:55,190 --> 00:21:59,960
import shot too so I'm gonna do this the

00:21:58,280 --> 00:22:03,110
right way I'm gonna first edit

00:21:59,960 --> 00:22:04,400
dependency - a shot - this is how you do

00:22:03,110 --> 00:22:05,780
dependency management in Ross it

00:22:04,400 --> 00:22:08,500
shouldn't be very surprising to you if

00:22:05,780 --> 00:22:11,840
you know package.json it is a very nice

00:22:08,500 --> 00:22:16,340
change if you have ever done c++

00:22:11,840 --> 00:22:24,530
dependency management and I think the

00:22:16,340 --> 00:22:27,169
version is 0.7 so and in our library we

00:22:24,530 --> 00:22:28,549
need to do the same thing as with Exim

00:22:27,169 --> 00:22:31,790
crate wasn't binding we also need to

00:22:28,549 --> 00:22:33,679
import chat - and I think that's it I

00:22:31,790 --> 00:22:35,140
think we should be set we should be set

00:22:33,679 --> 00:22:40,030
to use it

00:22:35,140 --> 00:22:43,480
let's do cargo bill and see what happens

00:22:40,030 --> 00:22:47,840
[Music]

00:22:43,480 --> 00:22:50,090
compiling oh we get an error function

00:22:47,840 --> 00:22:54,470
okay this is a I mean the era is pretty

00:22:50,090 --> 00:22:56,870
good but it's just how to read it says

00:22:54,470 --> 00:23:00,740
function or associated item not found in

00:22:56,870 --> 00:23:03,080
chat - and it helpfully suggests this an

00:23:00,740 --> 00:23:09,970
imported use so let's just use that

00:23:03,080 --> 00:23:12,799
apart let's compile it

00:23:09,970 --> 00:23:17,049
see that's how you use rust like you

00:23:12,799 --> 00:23:17,049
just get compiler errors until it works

00:23:17,740 --> 00:23:23,390
right so the thing is that you can't

00:23:20,150 --> 00:23:26,630
like these curly like these curly

00:23:23,390 --> 00:23:28,580
parenthesis mean that just output this

00:23:26,630 --> 00:23:30,169
thing for it for like it would be a

00:23:28,580 --> 00:23:32,240
string like and there's like certain

00:23:30,169 --> 00:23:35,330
things can like implement this kind of

00:23:32,240 --> 00:23:37,760
interface that string uses and we

00:23:35,330 --> 00:23:43,250
actually want to output it as let's say

00:23:37,760 --> 00:23:45,890
hex that's how you defined it yeah it

00:23:43,250 --> 00:23:49,940
works nice it's always the best moment

00:23:45,890 --> 00:23:52,070
in rustic Filippis life and now we have

00:23:49,940 --> 00:23:54,590
the file on target again and we're going

00:23:52,070 --> 00:24:01,080
to do a binding again and

00:23:54,590 --> 00:24:02,850
run it on file and I think like

00:24:01,080 --> 00:24:04,559
basically this should work without any

00:24:02,850 --> 00:24:06,260
further modifications our Jaya site

00:24:04,559 --> 00:24:09,600
because you know we just included it

00:24:06,260 --> 00:24:13,200
nice and then we have the hash cool

00:24:09,600 --> 00:24:16,470
amazing so that was it for the demo I

00:24:13,200 --> 00:24:18,270
think we have written some rust and we

00:24:16,470 --> 00:24:21,030
have included in rjs it was pretty easy

00:24:18,270 --> 00:24:23,640
to use I hope it was a lot of setup but

00:24:21,030 --> 00:24:26,460
I try to go through like the very like

00:24:23,640 --> 00:24:29,520
each step individually I have a couple

00:24:26,460 --> 00:24:32,669
more slice I think I have a bit more

00:24:29,520 --> 00:24:34,080
time so a couple more features of wasn't

00:24:32,669 --> 00:24:35,309
binding so we really just scratch the

00:24:34,080 --> 00:24:36,120
surface in order to get you going with

00:24:35,309 --> 00:24:38,340
it

00:24:36,120 --> 00:24:40,049
it supports like structs like stateful

00:24:38,340 --> 00:24:42,030
structures that you can use likes j/s

00:24:40,049 --> 00:24:43,590
instances of like objects and you can

00:24:42,030 --> 00:24:45,960
put stuff on it and it retains their

00:24:43,590 --> 00:24:49,110
state through like even when it's rust

00:24:45,960 --> 00:24:50,340
you can pass closures back and forth it

00:24:49,110 --> 00:24:51,660
doesn't work in all cases but in most

00:24:50,340 --> 00:24:54,390
cases it should work

00:24:51,660 --> 00:24:56,880
you can import jsn like consulate lock

00:24:54,390 --> 00:24:59,669
or whatever into your rust and then run

00:24:56,880 --> 00:25:02,160
those and rust it has these opaque JS

00:24:59,669 --> 00:25:04,350
value types which is the type that hides

00:25:02,160 --> 00:25:06,120
the fact like the underlying whatever

00:25:04,350 --> 00:25:08,910
this is from for us so that it's easier

00:25:06,120 --> 00:25:10,290
to deal with and yeah as I mentioned it

00:25:08,910 --> 00:25:14,460
supports required for nodejs although

00:25:10,290 --> 00:25:15,870
people have not really I don't think

00:25:14,460 --> 00:25:19,400
people believe me that it's working in

00:25:15,870 --> 00:25:19,400
node so I might be wrong about this

00:25:19,640 --> 00:25:24,270
there are a couple things that are still

00:25:21,690 --> 00:25:26,370
very much working progress it is you

00:25:24,270 --> 00:25:28,830
know passing around arrays and and

00:25:26,370 --> 00:25:30,780
vectors is is a bit shaky I think it's

00:25:28,830 --> 00:25:32,970
being worked on CC personal support is

00:25:30,780 --> 00:25:35,429
in the progress source map debugging is

00:25:32,970 --> 00:25:37,020
currently it works for some things like

00:25:35,429 --> 00:25:39,120
I'm scripting which I'm not gonna go

00:25:37,020 --> 00:25:41,700
into here but it doesn't work for wasn't

00:25:39,120 --> 00:25:43,760
finding that we have here and as I

00:25:41,700 --> 00:25:45,900
mentioned first class es6 module support

00:25:43,760 --> 00:25:48,270
another thing that I really was quickly

00:25:45,900 --> 00:25:49,230
want to mention is so will be really

00:25:48,270 --> 00:25:52,549
cool if we could just use the diagram

00:25:49,230 --> 00:25:56,130
uploaded to MPN instead of just you know

00:25:52,549 --> 00:25:59,790
making a rust library in our JS project

00:25:56,130 --> 00:26:01,860
and then funding that that right we've

00:25:59,790 --> 00:26:03,419
let that rust library inside our own

00:26:01,860 --> 00:26:06,150
small library and then exposing it to

00:26:03,419 --> 00:26:07,710
J's we could just upload it to NPM and

00:26:06,150 --> 00:26:09,809
then somebody could downloaded the

00:26:07,710 --> 00:26:11,429
Darla's just as him as an NPN module and

00:26:09,809 --> 00:26:12,600
that's exactly the idea behind wasn't

00:26:11,429 --> 00:26:15,029
packed which was written by Ashley

00:26:12,600 --> 00:26:16,470
Williams or which is still being written

00:26:15,029 --> 00:26:18,990
by actually Williams because this is all

00:26:16,470 --> 00:26:21,960
very work-in-progress you can install it

00:26:18,990 --> 00:26:23,909
and you can use this to basically do the

00:26:21,960 --> 00:26:25,320
same thing that I did with was a wood

00:26:23,909 --> 00:26:29,039
carver built and was abandoned and one

00:26:25,320 --> 00:26:33,169
set so you if you're in your rust source

00:26:29,039 --> 00:26:35,640
file you can just use Waze and pack yeah

00:26:33,169 --> 00:26:39,390
whereas in pack in it in this case and

00:26:35,640 --> 00:26:43,529
it will you can see it below here it

00:26:39,390 --> 00:26:47,039
will compile to wasm which might take a

00:26:43,529 --> 00:26:48,899
while some i might not show it fully I

00:26:47,039 --> 00:26:50,909
think it's doing some additional

00:26:48,899 --> 00:26:53,340
optimizations which is why it takes a

00:26:50,909 --> 00:26:54,720
bit more time so and then it will

00:26:53,340 --> 00:26:57,000
basically generate the same files that I

00:26:54,720 --> 00:26:59,429
already had in a package folder which

00:26:57,000 --> 00:27:00,510
also has a package dot JSON and so if

00:26:59,429 --> 00:27:04,500
you just go into that package folder

00:27:00,510 --> 00:27:07,020
into NPM publish it's an NPM boom and

00:27:04,500 --> 00:27:10,260
you have uploaded web sembly to NPM and

00:27:07,020 --> 00:27:12,890
then somebody can use your library your

00:27:10,260 --> 00:27:18,210
rust or C++ or whatever library from

00:27:12,890 --> 00:27:20,640
JavaScript that's nice but still if you

00:27:18,210 --> 00:27:22,110
want to use any random rust or whatever

00:27:20,640 --> 00:27:23,520
library that doesn't have this publish

00:27:22,110 --> 00:27:25,140
and yeah and PM you need to do this

00:27:23,520 --> 00:27:29,669
thing that I just did where you wrap it

00:27:25,140 --> 00:27:32,399
with your own kind of library right more

00:27:29,669 --> 00:27:34,380
wasm on hack stuff Mozilla or all these

00:27:32,399 --> 00:27:36,779
things are read out of like written out

00:27:34,380 --> 00:27:38,970
much more purpose than ia just put it on

00:27:36,779 --> 00:27:40,440
hex that mr. Orrick it's an amazing

00:27:38,970 --> 00:27:42,960
series of blog post by like the people

00:27:40,440 --> 00:27:44,520
who work on this web simulator org which

00:27:42,960 --> 00:27:47,480
is an HTTP link which I just noticed

00:27:44,520 --> 00:27:50,490
which is not nice I'm gonna correct that

00:27:47,480 --> 00:27:53,330
rust wasn't get up that IO also has like

00:27:50,490 --> 00:27:57,330
publishes these newsletters this week in

00:27:53,330 --> 00:27:59,250
web simle I think and that's also a

00:27:57,330 --> 00:28:02,909
really nice read to keep up to date with

00:27:59,250 --> 00:28:05,730
a rapidly developing world of web

00:28:02,909 --> 00:28:08,270
assembly and with that I say thank you

00:28:05,730 --> 00:28:16,089
for listening

00:28:08,270 --> 00:28:16,089
[Applause]

00:28:17,380 --> 00:28:20,529

YouTube URL: https://www.youtube.com/watch?v=-WtE0Bv6iSs


