Title: JSConf.ar 2014 | Final Thoughts
Publication date: 2015-05-10
Playlist: JSConf.ar 2014
Description: 
	Q&A with Brendan Eich, Andreas Gal and Guillermo Rauch. 

https://www.jsconfar.com/
Captions: 
	00:00:10,470 --> 00:00:15,150
so now we're going to the Q&A with

00:00:13,350 --> 00:00:17,400
andreas and Brendan we have five

00:00:15,150 --> 00:00:21,440
questions selected from your tweets so

00:00:17,400 --> 00:00:21,440
please take a seat here

00:00:24,190 --> 00:00:32,310
this is so exciting I'm so close to him

00:00:26,890 --> 00:00:34,870
I have a phablet loaded with questions

00:00:32,310 --> 00:00:36,370
so the first one came from a tweet

00:00:34,870 --> 00:00:39,790
that's I think it's really really

00:00:36,370 --> 00:00:42,460
interesting so Brandon at what point did

00:00:39,790 --> 00:00:45,580
you start imagining that JavaScript

00:00:42,460 --> 00:00:50,410
could one day run and in control robots

00:00:45,580 --> 00:00:55,300
or games within games or zombies in

00:00:50,410 --> 00:00:57,930
WebGL compiled from C++ when I think

00:00:55,300 --> 00:01:00,940
around the time friends went off the air

00:00:57,930 --> 00:01:03,940
and I lost my gig there that's Chandler

00:01:00,940 --> 00:01:06,340
uh no III didn't foresee all that I I

00:01:03,940 --> 00:01:08,500
thought it was going to be a glue

00:01:06,340 --> 00:01:11,890
language or what some people call duct

00:01:08,500 --> 00:01:14,950
tape language which is really I think

00:01:11,890 --> 00:01:16,990
not not a meaningful phrase it was going

00:01:14,950 --> 00:01:19,270
to be the little you know brother or the

00:01:16,990 --> 00:01:22,540
sidekick to Java and Java will do all

00:01:19,270 --> 00:01:23,830
the applets and components and beans and

00:01:22,540 --> 00:01:25,900
those would be in your browser and

00:01:23,830 --> 00:01:27,610
JavaScript would just be how you glued

00:01:25,900 --> 00:01:30,610
them together sort of like visual basic

00:01:27,610 --> 00:01:34,360
was to C++ in Microsoft's Windows

00:01:30,610 --> 00:01:36,550
environment at the time but John never

00:01:34,360 --> 00:01:39,280
really got out of the applet cage it

00:01:36,550 --> 00:01:41,680
never loaded quickly it never learned

00:01:39,280 --> 00:01:44,860
about the Dom so I think that that was

00:01:41,680 --> 00:01:46,810
fatal awesome so basically jealousy was

00:01:44,860 --> 00:01:50,320
only going to be for embedding applets

00:01:46,810 --> 00:01:53,410
now it's for reinventing the JVM inside

00:01:50,320 --> 00:01:55,720
JavaScript it's pretty awesome so

00:01:53,410 --> 00:01:58,840
another thing that comes up a lot is

00:01:55,720 --> 00:02:02,830
JavaScript to some people has good parts

00:01:58,840 --> 00:02:04,750
and bad parts and now with old es mi

00:02:02,830 --> 00:02:06,700
administered six and seven innovations

00:02:04,750 --> 00:02:09,069
and additions it creates new

00:02:06,700 --> 00:02:11,590
opportunities for now narrowing down

00:02:09,069 --> 00:02:14,470
again do you foresee that we are going

00:02:11,590 --> 00:02:16,390
to be creating JavaScript a good parts

00:02:14,470 --> 00:02:18,610
again now that we get all these new

00:02:16,390 --> 00:02:22,450
features I think this is true of the web

00:02:18,610 --> 00:02:26,560
in general like HTML has bad parts CSS I

00:02:22,450 --> 00:02:28,269
think we all know has bad parts the

00:02:26,560 --> 00:02:31,330
funny thing is people think when you

00:02:28,269 --> 00:02:34,450
have an evolving system that if a new

00:02:31,330 --> 00:02:36,850
requirement comes into the system you

00:02:34,450 --> 00:02:37,960
have to evolve quickly that's not how it

00:02:36,850 --> 00:02:40,570
works in nature you are

00:02:37,960 --> 00:02:43,390
have to have had the genetic diversity

00:02:40,570 --> 00:02:45,970
and already have evolved to survive the

00:02:43,390 --> 00:02:48,100
new disease or the new predator so the

00:02:45,970 --> 00:02:49,630
same with javascript and HTML and CSS

00:02:48,100 --> 00:02:50,860
they're going to have too much in them

00:02:49,630 --> 00:02:51,880
they're going to have mistakes they're

00:02:50,860 --> 00:02:54,040
going to have things that you can't

00:02:51,880 --> 00:02:57,310
remove because they already are used by

00:02:54,040 --> 00:02:59,680
some pages their apps on the web but

00:02:57,310 --> 00:03:02,140
they can be deprecated and they can fade

00:02:59,680 --> 00:03:03,910
away and so I you know I just tweeted

00:03:02,140 --> 00:03:06,340
back earlier before coming on stage I

00:03:03,910 --> 00:03:09,580
don't agree with Crockford he's too

00:03:06,340 --> 00:03:10,870
prescriptive astir my taste he says you

00:03:09,580 --> 00:03:12,190
know they're the bad parts you must

00:03:10,870 --> 00:03:14,140
never use and there are these little

00:03:12,190 --> 00:03:16,810
good parts that I say you should use

00:03:14,140 --> 00:03:19,180
like the closure pattern against the

00:03:16,810 --> 00:03:22,090
prototypal pattern it's too it's too

00:03:19,180 --> 00:03:24,820
extreme and JavaScript needed to have

00:03:22,090 --> 00:03:26,290
more patterns or more strength to it in

00:03:24,820 --> 00:03:28,000
order to survive for unforeseen

00:03:26,290 --> 00:03:31,570
circumstances and needs to keep evolving

00:03:28,000 --> 00:03:33,940
as it has so I I think there will

00:03:31,570 --> 00:03:36,070
continue to be messy evolution with bad

00:03:33,940 --> 00:03:38,580
parts and we won't even know they're bad

00:03:36,070 --> 00:03:47,740
until later that's the that's the killer

00:03:38,580 --> 00:03:51,400
don't you wanted is it off here's no

00:03:47,740 --> 00:03:53,350
opinion can we hello yeah all right all

00:03:51,400 --> 00:03:55,330
right yeah I think it's especially the

00:03:53,350 --> 00:03:57,460
part around removing things being

00:03:55,330 --> 00:04:00,520
difficult is ray true um Brennan's

00:03:57,460 --> 00:04:02,800
explanation reminded me of a property I

00:04:00,520 --> 00:04:04,840
found in the Dom in missoula

00:04:02,800 --> 00:04:06,960
implementation a couple years ago it's

00:04:04,840 --> 00:04:10,240
called navigator enable taint and

00:04:06,960 --> 00:04:11,920
Brennan edited like 15 years ago and it

00:04:10,240 --> 00:04:13,750
always returns false because you never

00:04:11,920 --> 00:04:17,530
actually implemented attained

00:04:13,750 --> 00:04:18,850
propagation and I asked him kind of

00:04:17,530 --> 00:04:20,350
yelling across the desk like what the

00:04:18,850 --> 00:04:23,560
hell is this thing and what does it do

00:04:20,350 --> 00:04:27,250
and why is it here and in my moment of

00:04:23,560 --> 00:04:28,960
like attempted purity I submitted a

00:04:27,250 --> 00:04:31,270
patch to remove that property because

00:04:28,960 --> 00:04:33,730
clearly I guess this is nobody would use

00:04:31,270 --> 00:04:35,830
this it was added 14 years ago for a

00:04:33,730 --> 00:04:39,460
feature that never got implemented right

00:04:35,830 --> 00:04:42,520
and this this went for the ride a train

00:04:39,460 --> 00:04:44,830
in Firefox and I broke like half over

00:04:42,520 --> 00:04:45,510
because it turns out that jQuery uses

00:04:44,830 --> 00:04:46,920
that to

00:04:45,510 --> 00:04:49,100
fact that you're running on Firefox or

00:04:46,920 --> 00:04:49,100
not

00:04:55,630 --> 00:04:59,930
that's really great only a GS conf do

00:04:58,130 --> 00:05:02,060
get applause for breaking like half the

00:04:59,930 --> 00:05:03,890
web thank you very much I feel much

00:05:02,060 --> 00:05:05,630
better about it already so yeah this

00:05:03,890 --> 00:05:07,670
removing this kind of stuff is it's very

00:05:05,630 --> 00:05:09,740
hard it has to be very slow we have

00:05:07,670 --> 00:05:12,410
removed stuff in the past successfully

00:05:09,740 --> 00:05:14,990
right before X for example of also

00:05:12,410 --> 00:05:16,450
removed after some pain so it is

00:05:14,990 --> 00:05:18,860
possible it simply takes a lot of time

00:05:16,450 --> 00:05:23,750
there's a I think there's a biologist

00:05:18,860 --> 00:05:26,600
who wants to breed chickens to express

00:05:23,750 --> 00:05:28,640
what are called genetic atavism the

00:05:26,600 --> 00:05:31,910
chickens with teeth like dinosaurs

00:05:28,640 --> 00:05:33,140
because that that'll enable taint method

00:05:31,910 --> 00:05:35,570
is still down there in their DNA

00:05:33,140 --> 00:05:37,400
somewhere maybe they can get teeth maybe

00:05:35,570 --> 00:05:41,240
maybe an able taint will come back I

00:05:37,400 --> 00:05:43,160
don't know actually I have a very hard

00:05:41,240 --> 00:05:45,470
question for Angie as I think because he

00:05:43,160 --> 00:05:48,050
talks so much today about JavaScript

00:05:45,470 --> 00:05:50,540
being a great target for compilation so

00:05:48,050 --> 00:05:54,230
when should we use rust and when should

00:05:50,540 --> 00:05:56,150
we use JavaScript so rust was designed

00:05:54,230 --> 00:05:59,810
for a very specific purpose to rewrite

00:05:56,150 --> 00:06:01,310
system parts and there's actually no

00:05:59,810 --> 00:06:03,590
necessary heart distinction between

00:06:01,310 --> 00:06:05,419
these two languages I already talked to

00:06:03,590 --> 00:06:07,700
the team whether rust should be able to

00:06:05,419 --> 00:06:09,770
target JavaScript there might be some

00:06:07,700 --> 00:06:12,290
cases where it makes sense to use rust

00:06:09,770 --> 00:06:14,570
to implement something that runs on top

00:06:12,290 --> 00:06:16,010
of the web stack in JavaScript and there

00:06:14,570 --> 00:06:17,600
might be other cases where it makes

00:06:16,010 --> 00:06:19,040
sense to implement system parts as

00:06:17,600 --> 00:06:21,560
JavaScript so I don't think there's a

00:06:19,040 --> 00:06:23,930
necessary order there and I will be

00:06:21,560 --> 00:06:25,669
surprised if you don't have a rust to

00:06:23,930 --> 00:06:28,910
javis compiler at some point yeah I

00:06:25,669 --> 00:06:32,270
agree the rust main sweet spot is safety

00:06:28,910 --> 00:06:35,450
with the same memory controlled C++

00:06:32,270 --> 00:06:38,270
gives you all right and you mentioned

00:06:35,450 --> 00:06:39,800
types today and in the community we see

00:06:38,270 --> 00:06:42,169
a lot of different projects for tackling

00:06:39,800 --> 00:06:44,620
types in Java Script so we have at

00:06:42,169 --> 00:06:49,610
script and now coming out typescript

00:06:44,620 --> 00:06:51,110
flow dart just kidding so what do we do

00:06:49,610 --> 00:06:53,690
which one do we use what do you think

00:06:51,110 --> 00:06:55,790
about this project do you think once

00:06:53,690 --> 00:06:57,590
again that the better one will win and

00:06:55,790 --> 00:06:59,750
the rest will die out I think we're

00:06:57,590 --> 00:07:03,320
still in the early days there's just

00:06:59,750 --> 00:07:05,020
been some interest in equity c39 the

00:07:03,320 --> 00:07:07,330
standards body about standardizing

00:07:05,020 --> 00:07:10,300
something to do with types may be based

00:07:07,330 --> 00:07:13,060
on type script and flow both using the

00:07:10,300 --> 00:07:16,409
colon annotation like the ML languages

00:07:13,060 --> 00:07:20,789
do like Pascal's remember that does

00:07:16,409 --> 00:07:25,389
Algol languages some of them anyway that

00:07:20,789 --> 00:07:27,039
syntax VAR x colon t you can't just

00:07:25,389 --> 00:07:28,750
standardized it it has meaning if you

00:07:27,039 --> 00:07:30,580
define it it has something to say about

00:07:28,750 --> 00:07:32,590
the types system and the type

00:07:30,580 --> 00:07:33,909
expressions or type annotations so we're

00:07:32,590 --> 00:07:35,560
not going to rush to standardize that

00:07:33,909 --> 00:07:38,139
the only thing we're doing now is saying

00:07:35,560 --> 00:07:40,090
that no engine can go claim as an

00:07:38,139 --> 00:07:42,819
extension on its own that colon after

00:07:40,090 --> 00:07:44,650
the name in the declaration that that's

00:07:42,819 --> 00:07:46,750
reserved to the future standards that

00:07:44,650 --> 00:07:48,909
might standardize it I think typescript

00:07:46,750 --> 00:07:52,030
and then flow inspired by the much more

00:07:48,909 --> 00:07:53,560
powerful should keep going I think the

00:07:52,030 --> 00:07:55,569
best thing they can do is get adoption

00:07:53,560 --> 00:07:58,060
the worst thing you could do is make

00:07:55,569 --> 00:08:00,159
design by committee you know union of

00:07:58,060 --> 00:08:01,319
all the systems or intersection of all

00:08:00,159 --> 00:08:03,159
the systems or some committee

00:08:01,319 --> 00:08:05,800
frankenstein standards that would be

00:08:03,159 --> 00:08:08,710
terrible all right and the final

00:08:05,800 --> 00:08:10,840
question for you Brandon someone was

00:08:08,710 --> 00:08:13,630
wondering about what what are the

00:08:10,840 --> 00:08:16,090
biggest lessons are takeaways from tc39

00:08:13,630 --> 00:08:18,159
and in general the approach that has

00:08:16,090 --> 00:08:20,080
been taken towards improving JavaScript

00:08:18,159 --> 00:08:22,210
and where do you see that going in the

00:08:20,080 --> 00:08:26,199
future it's been a long road I think

00:08:22,210 --> 00:08:28,270
that my big takeaways in like 20 year

00:08:26,199 --> 00:08:29,979
terms are you need competition to drive

00:08:28,270 --> 00:08:33,130
the vendors to cooperate in the

00:08:29,979 --> 00:08:34,659
standards bodies then you need good

00:08:33,130 --> 00:08:36,760
social relations among the members of

00:08:34,659 --> 00:08:39,969
the committee even you know croc is

00:08:36,760 --> 00:08:42,940
welcome back any time in my book you you

00:08:39,969 --> 00:08:45,070
need to get on this rapid release

00:08:42,940 --> 00:08:47,260
footing we're trying to get on with es7

00:08:45,070 --> 00:08:48,850
you don't want to do big indefinite

00:08:47,260 --> 00:08:50,560
projects in software or in

00:08:48,850 --> 00:08:52,660
standardization because they always

00:08:50,560 --> 00:08:54,610
suffer scope creep and the world moves

00:08:52,660 --> 00:08:58,180
out from under them and they become

00:08:54,610 --> 00:09:00,430
irrelevant dinosaurs so some kind of

00:08:58,180 --> 00:09:04,360
rapid release footing with implementers

00:09:00,430 --> 00:09:06,370
constantly implementing w3c really

00:09:04,360 --> 00:09:08,740
originally the what WG tried to get

00:09:06,370 --> 00:09:10,779
browsers to do this with html5 and that

00:09:08,740 --> 00:09:12,520
became a big living document standard

00:09:10,779 --> 00:09:14,980
but I think now things are getting

00:09:12,520 --> 00:09:16,540
across the web space on to a faster

00:09:14,980 --> 00:09:17,790
cycle and that's that's one of the

00:09:16,540 --> 00:09:22,310
biggest lessons for me

00:09:17,790 --> 00:09:22,310

YouTube URL: https://www.youtube.com/watch?v=ykzyt6PELqU


