Title: Alex Sexton: Your Very Own Component Library | JSConf.ar 2014
Publication date: 2015-05-10
Playlist: JSConf.ar 2014
Description: 
	We're all pretty big fans of Bootstrap. It's a component library that helps us turn our ideas into reality faster than we've ever been able to do in the past. Unfortunately, it's kind of bland (on purpose!), and all the sites on the internet are starting to look the same. At Stripe, we wanted the same power of being able to spin up projects quickly, but without using Bootstrap, specifically. So we made "Bootstripe". It's able to be much more opinionated, and allows lots of parallel developers to build consistent user interfaces. I'd love to tell you how to build your own, how to test it, and how to integrate it into your applications.

https://jsconfar.com
Captions: 
	00:00:11,360 --> 00:00:16,099
I don't think it's right now I we look

00:00:13,730 --> 00:00:18,470
pretty good now so I'm going to be

00:00:16,099 --> 00:00:20,300
talking about component libraries and

00:00:18,470 --> 00:00:22,849
you might say what's the component

00:00:20,300 --> 00:00:25,250
library which is what everyone at my

00:00:22,849 --> 00:00:28,880
company said when I said hey let's build

00:00:25,250 --> 00:00:31,509
a component library so I try to make it

00:00:28,880 --> 00:00:35,780
easier for them everyone had heard of

00:00:31,509 --> 00:00:39,040
bootstrap and so at work I started

00:00:35,780 --> 00:00:43,160
working on something called boot stripe

00:00:39,040 --> 00:00:48,380
it's pretty good you'll get it it'll

00:00:43,160 --> 00:00:51,680
come to you uh so i encourage you to

00:00:48,380 --> 00:00:53,480
build your own component library mainly

00:00:51,680 --> 00:00:57,410
so you get to make your own something

00:00:53,480 --> 00:00:59,329
strap j/s comp strap whatever you want

00:00:57,410 --> 00:01:01,700
to do stripes trap didn't work quite as

00:00:59,329 --> 00:01:04,540
well as boot stripe so that's what we

00:01:01,700 --> 00:01:07,250
want with but oh why right one at all

00:01:04,540 --> 00:01:08,689
you could just build your application

00:01:07,250 --> 00:01:10,640
and then when you get to a button you

00:01:08,689 --> 00:01:13,630
style the button and then when you get

00:01:10,640 --> 00:01:16,190
to a drop-down you style the drop-down

00:01:13,630 --> 00:01:19,549
just like we've made web applications

00:01:16,190 --> 00:01:22,820
for a really long time so I've prepared

00:01:19,549 --> 00:01:27,140
a list of facts that are definitely true

00:01:22,820 --> 00:01:29,780
about CSS the first CSS fact is that

00:01:27,140 --> 00:01:34,580
once you write a line of CSS it can

00:01:29,780 --> 00:01:36,409
never be deleted it sounds like a myth

00:01:34,580 --> 00:01:38,090
what if you think about your app you're

00:01:36,409 --> 00:01:41,360
always just a little too scared to

00:01:38,090 --> 00:01:45,740
remove code and so you just add new

00:01:41,360 --> 00:01:48,760
classes to go over those ones so i like

00:01:45,740 --> 00:01:54,830
to call CSS an append only language

00:01:48,760 --> 00:01:56,450
that's good you get code like this this

00:01:54,830 --> 00:01:57,710
is my favorite I always see blocks like

00:01:56,450 --> 00:02:01,159
this that you put this on a div it

00:01:57,710 --> 00:02:03,770
literally does nothing but you're like

00:02:01,159 --> 00:02:06,470
well is it overriding the padding is

00:02:03,770 --> 00:02:09,200
that I'm just gonna leave this here this

00:02:06,470 --> 00:02:14,379
is fine I think it's not hurting anyone

00:02:09,200 --> 00:02:17,390
so never remove it yeah so the fact 2is

00:02:14,379 --> 00:02:20,060
preprocessors are great as long as you

00:02:17,390 --> 00:02:24,709
know exactly what the output this is my

00:02:20,060 --> 00:02:28,130
favorite way of looking at nesting very

00:02:24,709 --> 00:02:31,340
common output for you gzip lovers this

00:02:28,130 --> 00:02:34,400
is like a your best-case scenario though

00:02:31,340 --> 00:02:37,160
so that's pretty great CSS fact three is

00:02:34,400 --> 00:02:41,390
that no two people write CSS in a

00:02:37,160 --> 00:02:43,040
similar way I feel like I work with some

00:02:41,390 --> 00:02:45,650
of the smartest people in the universe

00:02:43,040 --> 00:02:49,310
and this is probably about as best as I

00:02:45,650 --> 00:02:51,410
could ask for literally every type of

00:02:49,310 --> 00:02:56,540
casing and then some casings that don't

00:02:51,410 --> 00:02:59,090
actually exist so yeah I'm sure you

00:02:56,540 --> 00:03:01,780
recognize the naming schemes from your

00:02:59,090 --> 00:03:05,510
own code and that's why you're laughing

00:03:01,780 --> 00:03:08,930
so CSS fact for is you cannot test to

00:03:05,510 --> 00:03:10,910
CSS it doesn't run in a way that you can

00:03:08,930 --> 00:03:14,660
get stuff out there's not really good

00:03:10,910 --> 00:03:16,430
joke for this once I'll move to CSS 5 so

00:03:14,660 --> 00:03:19,450
you can't upgrade to a new version of

00:03:16,430 --> 00:03:22,879
bootstrap without an animal sacrifice

00:03:19,450 --> 00:03:27,140
and I decided not to include an image

00:03:22,879 --> 00:03:30,410
for that one so deleting code and

00:03:27,140 --> 00:03:32,239
testing actually go hand in hand the

00:03:30,410 --> 00:03:35,180
easiest way to feel comfortable deleting

00:03:32,239 --> 00:03:36,230
something is to make sure that you have

00:03:35,180 --> 00:03:38,540
tests to make sure it doesn't break

00:03:36,230 --> 00:03:41,150
something whenever you delete it so

00:03:38,540 --> 00:03:43,909
component libraries are well tested and

00:03:41,150 --> 00:03:48,530
highly reusable libraries for for UI

00:03:43,909 --> 00:03:50,900
components they would be ridiculous to

00:03:48,530 --> 00:03:52,519
test if you did them inside of your

00:03:50,900 --> 00:03:55,069
application so in a component library

00:03:52,519 --> 00:03:57,739
you're often testing that when you hover

00:03:55,069 --> 00:04:00,500
and it's active and the keyboard focuses

00:03:57,739 --> 00:04:03,590
on and you're looking sideways that the

00:04:00,500 --> 00:04:05,510
the the thing comes around the edges of

00:04:03,590 --> 00:04:07,580
the button correctly and if you did that

00:04:05,510 --> 00:04:09,340
inside your application every time you

00:04:07,580 --> 00:04:12,080
had a button that would be ridiculous

00:04:09,340 --> 00:04:14,330
but luckily with a component library you

00:04:12,080 --> 00:04:18,470
can kind of focus on those nice detailed

00:04:14,330 --> 00:04:21,109
things and so the reason why this is

00:04:18,470 --> 00:04:23,539
important is because this is me on a

00:04:21,109 --> 00:04:25,129
good day that's probably my best outfit

00:04:23,539 --> 00:04:26,990
I look really sharp I had a recent

00:04:25,129 --> 00:04:29,469
haircut I'm next to something involving

00:04:26,990 --> 00:04:29,469
art

00:04:29,530 --> 00:04:34,070
it looks like everything even matches my

00:04:32,120 --> 00:04:37,010
clothes are on the right direction it's

00:04:34,070 --> 00:04:38,270
pretty good day for me the code that i

00:04:37,010 --> 00:04:40,790
read on this day is going to be

00:04:38,270 --> 00:04:41,930
well-intentioned i'm clear thinking and

00:04:40,790 --> 00:04:47,990
i'm going to do things for the right

00:04:41,930 --> 00:04:49,400
reason this is me on a normal day was

00:04:47,990 --> 00:04:51,700
about ninety percent of the time

00:04:49,400 --> 00:04:54,230
ninety-nine percent of the time AV and

00:04:51,700 --> 00:04:56,300
component libraries are all about making

00:04:54,230 --> 00:05:00,050
sure that this version of yourself

00:04:56,300 --> 00:05:01,610
doesn't ruin the app for everybody so

00:05:00,050 --> 00:05:03,890
use your best days to build up

00:05:01,610 --> 00:05:07,490
components that you can use mindlessly

00:05:03,890 --> 00:05:10,310
on your worst days so you can do things

00:05:07,490 --> 00:05:13,310
like keyboard accessibility I put in a

00:05:10,310 --> 00:05:17,780
fancy thing Oh responsiveness there you

00:05:13,310 --> 00:05:21,170
go oh I don't know actually how keynote

00:05:17,780 --> 00:05:23,720
trans transitions work so forgive me

00:05:21,170 --> 00:05:25,340
that was sweet focus states it's the

00:05:23,720 --> 00:05:29,750
only way focus states can be interesting

00:05:25,340 --> 00:05:31,070
as if they sparkle so active hover focus

00:05:29,750 --> 00:05:33,980
like I talked about for and that's real

00:05:31,070 --> 00:05:36,110
we really have styles that if you have

00:05:33,980 --> 00:05:38,510
been using your keyboard and you're

00:05:36,110 --> 00:05:40,010
pressing down and your mouse happens to

00:05:38,510 --> 00:05:42,020
be over something like you can't have

00:05:40,010 --> 00:05:44,660
some weird stay that's a real estate and

00:05:42,020 --> 00:05:48,020
you've never considered it before I hope

00:05:44,660 --> 00:05:52,190
but I hope you do in the future because

00:05:48,020 --> 00:05:57,040
of this stuff so it turns this this very

00:05:52,190 --> 00:06:00,020
crappy but well-intentioned Mario clay

00:05:57,040 --> 00:06:01,430
you know it's fully sculpted like there

00:06:00,020 --> 00:06:03,650
was no instruction manual there's

00:06:01,430 --> 00:06:08,750
nothing anyone can do to help you make

00:06:03,650 --> 00:06:11,270
your perfect fairly flawed Mario and it

00:06:08,750 --> 00:06:12,650
turns that into this which is you know

00:06:11,270 --> 00:06:14,450
you have building blocks you have pieces

00:06:12,650 --> 00:06:16,760
and you have instructions on how to put

00:06:14,450 --> 00:06:19,810
it all together and so we do the same

00:06:16,760 --> 00:06:22,010
thing for boot stripe we have this

00:06:19,810 --> 00:06:24,890
documentation that looks beautiful on

00:06:22,010 --> 00:06:26,630
this screen and we have what something

00:06:24,890 --> 00:06:29,870
is we have how to use it we have

00:06:26,630 --> 00:06:31,820
examples of it being used and that

00:06:29,870 --> 00:06:33,890
really helps create consistency for

00:06:31,820 --> 00:06:36,500
developers on how they integrate things

00:06:33,890 --> 00:06:38,510
but also helps create consistency for

00:06:36,500 --> 00:06:40,940
your end users every time that they

00:06:38,510 --> 00:06:42,720
encounter a button every time they

00:06:40,940 --> 00:06:43,470
encounter a nav menu

00:06:42,720 --> 00:06:49,170
we're going to know what's going to work

00:06:43,470 --> 00:06:52,080
the same way each time bonus everyone

00:06:49,170 --> 00:06:54,320
has like the admin toolbar back-end

00:06:52,080 --> 00:06:56,910
thing and it's really great that now

00:06:54,320 --> 00:06:58,950
whenever we build these stupid crappy

00:06:56,910 --> 00:07:00,570
internal applications you can just use

00:06:58,950 --> 00:07:03,870
your thing and it kind of looks like you

00:07:00,570 --> 00:07:06,630
tried it's just bonus so how can you

00:07:03,870 --> 00:07:08,700
make a component library or more

00:07:06,630 --> 00:07:11,880
specifically how can I make a component

00:07:08,700 --> 00:07:15,030
library and it's going to be any better

00:07:11,880 --> 00:07:17,160
than just using bootstrap out of the box

00:07:15,030 --> 00:07:18,780
that's a good question you you probably

00:07:17,160 --> 00:07:21,720
could use bootstrap for a lot of stuff

00:07:18,780 --> 00:07:24,180
but bootstraps core competency is

00:07:21,720 --> 00:07:26,730
generic pneus it wants to be the

00:07:24,180 --> 00:07:30,000
baseline it has no styles on buttons and

00:07:26,730 --> 00:07:31,350
it's fairly accessible but everything

00:07:30,000 --> 00:07:33,660
looks the same and people are pretty

00:07:31,350 --> 00:07:36,210
tired of bootstrap websites by now if

00:07:33,660 --> 00:07:37,740
you get in on bootstrap for early enough

00:07:36,210 --> 00:07:40,140
maybe that'll be cool for like a month

00:07:37,740 --> 00:07:43,650
or two so first thing you want to do is

00:07:40,140 --> 00:07:45,510
choose a preprocessor not strictly

00:07:43,650 --> 00:07:47,100
necessary but really helps if you're

00:07:45,510 --> 00:07:48,150
parsing CSS you can do a lot of the

00:07:47,100 --> 00:07:50,820
testing things that we're going to talk

00:07:48,150 --> 00:07:54,480
about that's ripe we didn't choose a

00:07:50,820 --> 00:07:58,890
very normal one we wrote our own called

00:07:54,480 --> 00:08:02,310
KFC SS uh you guys have KFC here either

00:07:58,890 --> 00:08:05,130
way s'okay of CSS is actually just a set

00:08:02,310 --> 00:08:07,140
of modules on top of rework CSS so

00:08:05,130 --> 00:08:08,610
mostly we're using open-source plugins

00:08:07,140 --> 00:08:11,100
to do a lot of the things that you like

00:08:08,610 --> 00:08:16,169
it be similar like miss if people use

00:08:11,100 --> 00:08:17,760
myth it tries to model CSS for as

00:08:16,169 --> 00:08:19,740
closely as possible so this would be

00:08:17,760 --> 00:08:21,450
really good for steps talk where you're

00:08:19,740 --> 00:08:24,060
kind of more Polly filling the future

00:08:21,450 --> 00:08:27,060
than you are kind of creating your own

00:08:24,060 --> 00:08:28,470
magic we also kill things like extend so

00:08:27,060 --> 00:08:31,550
we don't get crazy nesting and we just

00:08:28,470 --> 00:08:35,159
deal with writing a class name twice

00:08:31,550 --> 00:08:37,110
suit CSS is a good starting point we

00:08:35,159 --> 00:08:39,390
don't use suit out of the box but we

00:08:37,110 --> 00:08:41,550
kind of forked it and made it work for

00:08:39,390 --> 00:08:43,950
our needs this is from necklace at out

00:08:41,550 --> 00:08:47,250
of Twitter and this is really good for

00:08:43,950 --> 00:08:50,670
creating encapsulated CSS components so

00:08:47,250 --> 00:08:52,740
you can reason about your code in nice

00:08:50,670 --> 00:08:54,780
little cool blocks that that you know

00:08:52,740 --> 00:08:56,020
exactly what they're doing so here's the

00:08:54,780 --> 00:08:57,820
example on

00:08:56,020 --> 00:09:00,010
the naming conventions which is mostly

00:08:57,820 --> 00:09:02,170
what sue CSS is as a set of naming

00:09:00,010 --> 00:09:04,300
conventions and you can say this is a

00:09:02,170 --> 00:09:06,550
component and people like their eyes

00:09:04,300 --> 00:09:08,470
bleed whenever there's a capital class

00:09:06,550 --> 00:09:10,600
name but you get used to I promise it's

00:09:08,470 --> 00:09:12,190
kind of like when everyone tells you jsx

00:09:10,600 --> 00:09:15,190
is so ugly and then they use it in there

00:09:12,190 --> 00:09:16,540
like oh jsx is actually pretty cool this

00:09:15,190 --> 00:09:18,820
is great because you can always tell

00:09:16,540 --> 00:09:21,030
what is a component in your classes and

00:09:18,820 --> 00:09:23,230
will and what isn't and then you have

00:09:21,030 --> 00:09:25,930
structured ways of saying this is a

00:09:23,230 --> 00:09:29,620
modification or this is a descendent or

00:09:25,930 --> 00:09:31,570
this is something else and so you can

00:09:29,620 --> 00:09:35,860
kind of get rid of this whole problem

00:09:31,570 --> 00:09:37,450
that we had earlier you can add in your

00:09:35,860 --> 00:09:40,630
own checks to your system and I'd

00:09:37,450 --> 00:09:42,580
encourage you to add in checks into like

00:09:40,630 --> 00:09:44,080
you can write rework plugins more or

00:09:42,580 --> 00:09:47,080
less if you if you choose rework in

00:09:44,080 --> 00:09:48,280
order to jump into your CSS and pick out

00:09:47,080 --> 00:09:51,790
things that are important to your

00:09:48,280 --> 00:09:55,840
organization one thing that bugged me at

00:09:51,790 --> 00:09:58,330
work is a color checking so I wrote CSS

00:09:55,840 --> 00:10:00,340
color guard have you seen that and CSS

00:09:58,330 --> 00:10:02,860
color guard is actually fairly useless

00:10:00,340 --> 00:10:05,680
but I thought it was a cool idea and we

00:10:02,860 --> 00:10:08,830
use it kind of at CI continuous

00:10:05,680 --> 00:10:10,480
integration testing time but but to show

00:10:08,830 --> 00:10:13,600
a good example here's gear most post

00:10:10,480 --> 00:10:15,940
today from on Facebook about the road

00:10:13,600 --> 00:10:17,890
Torres yesterday roadshows JavaScript

00:10:15,940 --> 00:10:21,130
and let's say you wanted to know the

00:10:17,890 --> 00:10:23,650
color of those three buttons you could

00:10:21,130 --> 00:10:26,080
use dev tools but all of us have gone

00:10:23,650 --> 00:10:27,850
through the real way that we would do

00:10:26,080 --> 00:10:33,610
this which is to zoom into a million

00:10:27,850 --> 00:10:38,110
percent I drop the darkest middle point

00:10:33,610 --> 00:10:39,520
of the E and then it works every time

00:10:38,110 --> 00:10:43,480
that's definitely going to be the

00:10:39,520 --> 00:10:45,430
correct hex code so luckily there is an

00:10:43,480 --> 00:10:48,970
algorithm that people in the television

00:10:45,430 --> 00:10:50,890
industry created called cie de two

00:10:48,970 --> 00:10:55,690
thousand sounds like a robot which is

00:10:50,890 --> 00:10:58,360
also cool they they wrote this hella

00:10:55,690 --> 00:11:03,510
mathy formula for figuring out the

00:10:58,360 --> 00:11:05,500
differences of of colors to humans so

00:11:03,510 --> 00:11:07,540
something with a low score would be very

00:11:05,500 --> 00:11:10,029
similar a zero would be the same color

00:11:07,540 --> 00:11:12,079
and so like yellows are kind of

00:11:10,029 --> 00:11:14,569
harder to discern the differences

00:11:12,079 --> 00:11:16,639
between then something like blue and so

00:11:14,569 --> 00:11:18,170
it's not actually just like compared to

00:11:16,639 --> 00:11:20,660
hex values and so you can get this

00:11:18,170 --> 00:11:23,449
really fine grained way of saying how

00:11:20,660 --> 00:11:24,860
similar these two colors and then you

00:11:23,449 --> 00:11:27,170
can yell at your co-workers

00:11:24,860 --> 00:11:30,319
automatically and say like hey this blue

00:11:27,170 --> 00:11:32,600
is clearly should be Facebook blue and

00:11:30,319 --> 00:11:33,920
you're like two hex characters off how

00:11:32,600 --> 00:11:39,259
about you just switch it to our style

00:11:33,920 --> 00:11:41,899
guide color also you're fired we have a

00:11:39,259 --> 00:11:46,339
lot of api's at stripe we have a API for

00:11:41,899 --> 00:11:48,529
firing people so it's very simple oh the

00:11:46,339 --> 00:11:51,259
best part about writing CSS color guard

00:11:48,529 --> 00:11:56,230
let's go back to that page I'm going to

00:11:51,259 --> 00:11:59,480
run through all these again the CI ed

00:11:56,230 --> 00:12:02,209
2000 algorithm this super Matthew one

00:11:59,480 --> 00:12:04,160
that was an MPN module so I got all the

00:12:02,209 --> 00:12:09,439
credit and someone else has to do all

00:12:04,160 --> 00:12:11,299
the math pro tip so here's an example of

00:12:09,439 --> 00:12:13,339
one of our test pages so you can test

00:12:11,299 --> 00:12:16,160
the SS as long as you're testing

00:12:13,339 --> 00:12:19,369
something very small well defined and

00:12:16,160 --> 00:12:23,629
and relatively declaratively so this is

00:12:19,369 --> 00:12:25,220
two ways of marking up a switcher or

00:12:23,629 --> 00:12:27,679
toggle so you could kind of toggle

00:12:25,220 --> 00:12:30,589
between those three things and we have a

00:12:27,679 --> 00:12:32,329
disabled State because there's that and

00:12:30,589 --> 00:12:34,819
we have an active state we're using the

00:12:32,329 --> 00:12:37,759
is active and is disabled which is from

00:12:34,819 --> 00:12:39,019
the suit CSS naming scheme you can kind

00:12:37,759 --> 00:12:40,819
of see the three different ways that

00:12:39,019 --> 00:12:43,249
those look we're not clicking on

00:12:40,819 --> 00:12:48,769
anything we're not doing anything but we

00:12:43,249 --> 00:12:50,329
can run that through our CI server we

00:12:48,769 --> 00:12:51,860
can take a screenshot of it and we can

00:12:50,329 --> 00:12:53,569
make sure that it doesn't change unless

00:12:51,860 --> 00:12:55,759
we wanted it to change so if you

00:12:53,569 --> 00:12:57,319
accidentally change the base blue color

00:12:55,759 --> 00:12:59,389
you accidentally change the margin

00:12:57,319 --> 00:13:01,669
around but buttons and some other file

00:12:59,389 --> 00:13:04,549
this file will throw an error we can go

00:13:01,669 --> 00:13:06,019
into that a little bit so I rework

00:13:04,549 --> 00:13:09,439
pseudo classes this is another example

00:13:06,019 --> 00:13:11,179
of why we chose to do KF CSS has small

00:13:09,439 --> 00:13:13,489
modules on top of kind of your

00:13:11,179 --> 00:13:15,709
preprocessor all this does is take

00:13:13,489 --> 00:13:17,990
things like the pseudo hover class and

00:13:15,709 --> 00:13:21,559
turn them into literally the word pseudo

00:13:17,990 --> 00:13:23,630
dash hover so something like this some

00:13:21,559 --> 00:13:26,210
selector colon active turn

00:13:23,630 --> 00:13:28,610
into the real selector as well as the

00:13:26,210 --> 00:13:30,080
declarative selector and then you can

00:13:28,610 --> 00:13:31,820
actually add some things to your

00:13:30,080 --> 00:13:33,230
declarative test pages so you can have

00:13:31,820 --> 00:13:35,390
your button and then you can actually

00:13:33,230 --> 00:13:37,310
add all your pseudo states and that way

00:13:35,390 --> 00:13:39,110
you don't have to use a mouse to go in

00:13:37,310 --> 00:13:41,390
and then drag over it and then try to

00:13:39,110 --> 00:13:43,340
take a screenshot exactly as you click

00:13:41,390 --> 00:13:45,650
down with the fake Mouse and then pull

00:13:43,340 --> 00:13:49,040
out and and it's never good especially

00:13:45,650 --> 00:13:50,960
when you're dealing with you know sauce

00:13:49,040 --> 00:13:52,820
labs or something that you don't even

00:13:50,960 --> 00:13:54,980
have control over so that's never good

00:13:52,820 --> 00:13:57,680
so you can do all this and then you

00:13:54,980 --> 00:13:59,660
actually get a much bigger page with all

00:13:57,680 --> 00:14:02,210
the different states and like I said

00:13:59,660 --> 00:14:03,890
before there is the is active focus

00:14:02,210 --> 00:14:05,180
hovered state there and it looks

00:14:03,890 --> 00:14:08,360
different than the other states and it's

00:14:05,180 --> 00:14:11,210
correct and good so we run this test

00:14:08,360 --> 00:14:13,490
every time we make a commit and if

00:14:11,210 --> 00:14:15,710
anything changes say the margin around

00:14:13,490 --> 00:14:18,530
the buttons we get this diff that says

00:14:15,710 --> 00:14:20,360
hey did you mean to do this and that'll

00:14:18,530 --> 00:14:23,150
actually fail to build if we want we can

00:14:20,360 --> 00:14:25,280
commit a new image and say we intended

00:14:23,150 --> 00:14:27,950
to do this and then you can actually see

00:14:25,280 --> 00:14:29,120
the change that happens and this seems

00:14:27,950 --> 00:14:31,850
like a cool video that I put together

00:14:29,120 --> 00:14:35,540
this is actually just the onion skin

00:14:31,850 --> 00:14:37,370
Swiper from github so now we have a rule

00:14:35,540 --> 00:14:39,710
that in order to make a change in boots

00:14:37,370 --> 00:14:43,010
stripe a designer must sign off on any

00:14:39,710 --> 00:14:44,960
image changes so now every time anything

00:14:43,010 --> 00:14:47,510
visually changes in our entire library

00:14:44,960 --> 00:14:50,000
it either fails a bill because it wasn't

00:14:47,510 --> 00:14:55,070
supposed to happen or designer says this

00:14:50,000 --> 00:14:58,520
looked correct and and it's okay so

00:14:55,070 --> 00:15:01,070
abstraction is key to some of the other

00:14:58,520 --> 00:15:02,560
problems that we have the deleting code

00:15:01,070 --> 00:15:05,480
is too hard with one of them and

00:15:02,560 --> 00:15:07,610
changing opponent means that you have to

00:15:05,480 --> 00:15:09,800
go find every single use in every app

00:15:07,610 --> 00:15:12,770
that you ever use it in you may remember

00:15:09,800 --> 00:15:15,140
trying to upgrade from bootstrap two to

00:15:12,770 --> 00:15:16,940
three people try to write whole scanners

00:15:15,140 --> 00:15:18,410
of your app to go change the classes in

00:15:16,940 --> 00:15:21,230
markup and all that kind of stuff and

00:15:18,410 --> 00:15:22,640
that really stinks so one of the reasons

00:15:21,230 --> 00:15:25,070
we can't delete code is because we don't

00:15:22,640 --> 00:15:27,260
know who's using the past versions and

00:15:25,070 --> 00:15:31,280
who's using the new versions and so we

00:15:27,260 --> 00:15:32,930
can kind of pull out the writing of the

00:15:31,280 --> 00:15:35,089
mark-up in the inclusion of the classes

00:15:32,930 --> 00:15:37,309
into its own abstracted library

00:15:35,089 --> 00:15:39,079
it's a lot of people are saying this is

00:15:37,309 --> 00:15:42,110
jae's comp you're talking about CSS an

00:15:39,079 --> 00:15:44,540
awful lot so this parts for you so you

00:15:42,110 --> 00:15:47,120
can turn all your CSS components into

00:15:44,540 --> 00:15:49,999
j/s application components so you can

00:15:47,120 --> 00:15:54,350
pick your favorite poison they all have

00:15:49,999 --> 00:15:57,769
versions of of components that you can

00:15:54,350 --> 00:16:00,680
use we actually have libraries for react

00:15:57,769 --> 00:16:02,300
and ember at stripe there is a few

00:16:00,680 --> 00:16:04,779
angular apps internally that I'm sure

00:16:02,300 --> 00:16:08,779
will eventually get boot stripe angular

00:16:04,779 --> 00:16:11,720
versions so never use your component

00:16:08,779 --> 00:16:13,850
library directly which seems kind of

00:16:11,720 --> 00:16:17,149
counterintuitive you never do this never

00:16:13,850 --> 00:16:19,370
write a button with mark up with the

00:16:17,149 --> 00:16:22,850
classes that you use notice we actually

00:16:19,370 --> 00:16:24,350
do have a boot stripe prefix on all of

00:16:22,850 --> 00:16:26,089
those things that way you could actually

00:16:24,350 --> 00:16:27,379
technically use multiple versions or

00:16:26,089 --> 00:16:30,740
anything like that that you wanted and

00:16:27,379 --> 00:16:32,480
it's helpful EBS is our is our prefix

00:16:30,740 --> 00:16:36,230
and I really enjoy writing that each

00:16:32,480 --> 00:16:39,050
time so the BS button and the is being

00:16:36,230 --> 00:16:40,670
modified as a BS button large but we

00:16:39,050 --> 00:16:43,639
don't want to write that we created

00:16:40,670 --> 00:16:46,490
initially ember boot stripe and we

00:16:43,639 --> 00:16:48,230
created components just amber components

00:16:46,490 --> 00:16:50,300
and this is a BS button and it has a

00:16:48,230 --> 00:16:51,920
size property and internally that

00:16:50,300 --> 00:16:53,720
modifies the class names on a real

00:16:51,920 --> 00:16:57,019
button tag but now there's a single

00:16:53,720 --> 00:16:59,779
location that writes markup and adds

00:16:57,019 --> 00:17:01,519
these classes so if we realize that

00:16:59,779 --> 00:17:02,929
screen readers don't like the way that

00:17:01,519 --> 00:17:05,089
we've marked up our button in two months

00:17:02,929 --> 00:17:07,309
we can go to a single location change

00:17:05,089 --> 00:17:09,470
the way it's marked up and it's done

00:17:07,309 --> 00:17:12,380
this actually happened with buttons did

00:17:09,470 --> 00:17:14,899
you know with with the button class that

00:17:12,380 --> 00:17:16,370
compiles to this but this actually is a

00:17:14,899 --> 00:17:19,789
submit button I didn't know that the

00:17:16,370 --> 00:17:23,899
default type of button was submit it's

00:17:19,789 --> 00:17:25,279
not button type button type button' is

00:17:23,899 --> 00:17:27,709
what you actually have to add to this so

00:17:25,279 --> 00:17:29,090
later we went in and added button type

00:17:27,709 --> 00:17:31,100
equals button and it no longer

00:17:29,090 --> 00:17:34,510
accidentally submitted everything on

00:17:31,100 --> 00:17:37,399
every page just great good side effect

00:17:34,510 --> 00:17:39,350
so it also can automatically generate

00:17:37,399 --> 00:17:41,059
your style guide for you so a lot of

00:17:39,350 --> 00:17:46,520
people talk about a living style guide

00:17:41,059 --> 00:17:48,740
and the common outcome is that you write

00:17:46,520 --> 00:17:50,900
it once and then it's never updated

00:17:48,740 --> 00:17:52,850
then no one ever visits it again and it

00:17:50,900 --> 00:17:55,340
was a waste of two months and so you can

00:17:52,850 --> 00:17:56,840
actually use your components in order to

00:17:55,340 --> 00:17:58,910
generate both the markup and the

00:17:56,840 --> 00:18:00,470
examples you just integrate your

00:17:58,910 --> 00:18:02,510
components and any time you update your

00:18:00,470 --> 00:18:04,670
application your style guide

00:18:02,510 --> 00:18:07,160
automatically updates and so now you at

00:18:04,670 --> 00:18:09,200
least have some semblance of a living

00:18:07,160 --> 00:18:11,990
dead style guide that's still no one

00:18:09,200 --> 00:18:14,840
visits anyways but at least you know

00:18:11,990 --> 00:18:17,080
that it's correct if you want to see

00:18:14,840 --> 00:18:20,179
more information about good style guides

00:18:17,080 --> 00:18:23,720
the Lonely Planet team has this great

00:18:20,179 --> 00:18:25,790
resource which is their style is called

00:18:23,720 --> 00:18:28,580
a reso and I think it's fantastic they

00:18:25,790 --> 00:18:30,140
have all these different examples you

00:18:28,580 --> 00:18:33,050
should check out Rizzo by the lonely

00:18:30,140 --> 00:18:34,940
planet who does expect it so deleting

00:18:33,050 --> 00:18:36,679
code becomes a lot easier because we

00:18:34,940 --> 00:18:39,080
have these small and cash elated file

00:18:36,679 --> 00:18:41,090
with files with good naming schemes and

00:18:39,080 --> 00:18:42,500
we have good tests and so you can come

00:18:41,090 --> 00:18:44,450
in here and you can definitely say that

00:18:42,500 --> 00:18:47,030
if I want to change the hover color

00:18:44,450 --> 00:18:48,650
delete the hover color you know exactly

00:18:47,030 --> 00:18:49,910
where to go in the file you know that

00:18:48,650 --> 00:18:53,450
you can delete it and then you can run

00:18:49,910 --> 00:18:56,929
the tests and know that only the change

00:18:53,450 --> 00:18:59,240
that I wanted to make was made you can

00:18:56,929 --> 00:19:04,580
also upgrade because now you're you're

00:18:59,240 --> 00:19:06,350
never writing the the raw HTML you're

00:19:04,580 --> 00:19:07,610
only writing your components and those

00:19:06,350 --> 00:19:09,530
are encapsulated you can make the

00:19:07,610 --> 00:19:12,110
changes you want and everything gets

00:19:09,530 --> 00:19:14,570
upgraded everywhere you can throw in a

00:19:12,110 --> 00:19:17,630
grid we use flexbox grid because flexbox

00:19:14,570 --> 00:19:19,640
is cool and all of a sudden you can make

00:19:17,630 --> 00:19:21,320
about ninety percent of your application

00:19:19,640 --> 00:19:27,770
just by piecing together your you're

00:19:21,320 --> 00:19:29,720
highly tested well-crafted what's good

00:19:27,770 --> 00:19:32,840
them I had a joke I couldn't think of it

00:19:29,720 --> 00:19:35,090
you're you're you're well crafted CSS

00:19:32,840 --> 00:19:37,100
components all together on a page and

00:19:35,090 --> 00:19:39,080
then you can focus on that last little

00:19:37,100 --> 00:19:40,790
sliver that makes your application great

00:19:39,080 --> 00:19:42,800
and good you're never going to be able

00:19:40,790 --> 00:19:44,600
to just put together an application that

00:19:42,800 --> 00:19:45,920
just immediately works and looks great

00:19:44,600 --> 00:19:47,960
just because of your component library

00:19:45,920 --> 00:19:49,610
but you can really really focus on the

00:19:47,960 --> 00:19:51,400
on the things that makes each page

00:19:49,610 --> 00:19:53,960
different or each interaction different

00:19:51,400 --> 00:19:56,900
that's all thank you oh this is a

00:19:53,960 --> 00:19:58,720
snapshot that I screenshotted from

00:19:56,900 --> 00:20:00,780
Guillermo

00:19:58,720 --> 00:20:00,780

YouTube URL: https://www.youtube.com/watch?v=zSYo7m5kGHQ


