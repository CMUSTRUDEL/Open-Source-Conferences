Title: Ritesh Angural: Lightning Branches - A Way to Supercharge Your Feature Delivery - JSConf.Asia 2014
Publication date: 2014-12-15
Playlist: JSConf.Asia 2014
Description: 
	I will be talking about the "No talk all action" approach we take at RedMart for feature development. You’ll learn how we supercharge development and get code in production fast with an opinionated and automated development workflow. Hint: It’s a cocktail of Git, JS (of course), Chef, Devops & killing pointless meetings.

Ritesh is an Engineer working on the next generation Ecommerce platform at RedMart, currently working on the frontend and continuous delivery. Apart from coding in JavaScript & Ruby, he loves extracting a perfect espresso & scoring goals while wearing the Juventus jersey!

JSConf.Asia is the JavaScript, web and mobile developer conference for Asia. Amara Sanctuary, Singapore - 20 + 21 November 2014.

Source: http://2014.jsconf.asia/#speakers
Slides: http://www.slideshare.net/riteshangural/lightning-branches-at-redmart-js-conf-asia-2014-talk

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,000 --> 00:00:18,210
i turn my camera on I keep my fingers

00:00:04,140 --> 00:00:22,170
away I'm ritesh that's me in the arrow

00:00:18,210 --> 00:00:24,510
right there all right here okay I work

00:00:22,170 --> 00:00:28,170
at a red mark and I do front end and

00:00:24,510 --> 00:00:29,910
DevOps so red mark where we think we're

00:00:28,170 --> 00:00:32,700
the leading or online grocer in

00:00:29,910 --> 00:00:35,100
Singapore we're really building the next

00:00:32,700 --> 00:00:37,530
generation ecommerce platform called

00:00:35,100 --> 00:00:40,350
everything from erp warehouse transport

00:00:37,530 --> 00:00:43,739
logistics we even have robotic trolleys

00:00:40,350 --> 00:00:46,289
and we do all that in house we're more

00:00:43,739 --> 00:00:50,550
than just website and API but on top of

00:00:46,289 --> 00:00:51,930
all that we actually a startup so today

00:00:50,550 --> 00:00:54,539
I want to talk about how we really

00:00:51,930 --> 00:00:55,770
develop features at red matte I like to

00:00:54,539 --> 00:01:00,090
think that we have a workflow that

00:00:55,770 --> 00:01:02,280
really gets code into production fast to

00:01:00,090 --> 00:01:05,070
do this we really have like a no top of

00:01:02,280 --> 00:01:07,500
action approach I mean I now I now I

00:01:05,070 --> 00:01:10,310
realize that this is a real bad slide to

00:01:07,500 --> 00:01:12,990
have when you're actually giving a talk

00:01:10,310 --> 00:01:16,439
but really what I'm trying to say is

00:01:12,990 --> 00:01:18,150
that we try to encourage lesser meetings

00:01:16,439 --> 00:01:19,560
with this workflow and improve

00:01:18,150 --> 00:01:21,720
productivity and I want to share a

00:01:19,560 --> 00:01:23,850
little bit about that hopefully with

00:01:21,720 --> 00:01:26,850
this top you can apply some of this work

00:01:23,850 --> 00:01:28,740
flows voice for your own team but if not

00:01:26,850 --> 00:01:31,170
then anything else at least you'll get

00:01:28,740 --> 00:01:34,500
to hear about a real world development

00:01:31,170 --> 00:01:38,100
workflow of a scaling startup right so

00:01:34,500 --> 00:01:41,360
cool let's get started raise of hands

00:01:38,100 --> 00:01:44,159
how many you guys have seen this site

00:01:41,360 --> 00:01:46,470
all right cool I mean I think it's

00:01:44,159 --> 00:01:49,409
pretty cool like especially the CSS

00:01:46,470 --> 00:01:52,159
animations stuff like people you know in

00:01:49,409 --> 00:01:57,149
Singapore they will go like dem paola

00:01:52,159 --> 00:01:58,920
and I I mean I totally dig it and now

00:01:57,149 --> 00:02:01,110
let's see let's see if we can replicate

00:01:58,920 --> 00:02:03,030
it on red Mile all right let's try and

00:02:01,110 --> 00:02:05,130
do that and bear with me I think the

00:02:03,030 --> 00:02:07,170
more challenging part here will be me

00:02:05,130 --> 00:02:10,879
switching around the displace rather

00:02:07,170 --> 00:02:10,879
than actually doing the deployment

00:02:11,080 --> 00:02:17,080
so on this on this site as you guys have

00:02:14,320 --> 00:02:21,250
been going to every single day this

00:02:17,080 --> 00:02:27,340
fancy animation is really cool and we

00:02:21,250 --> 00:02:28,750
have this page on red mark let me see if

00:02:27,340 --> 00:02:30,910
you scroll down all the way to the

00:02:28,750 --> 00:02:33,700
bottom and click on this link we have a

00:02:30,910 --> 00:02:35,920
human's foul and I want to like have

00:02:33,700 --> 00:02:38,620
this kind of fancy stuff happening on

00:02:35,920 --> 00:02:41,170
this page as well so let's see if we can

00:02:38,620 --> 00:02:43,750
if we can do that okay so i actually

00:02:41,170 --> 00:02:46,620
went in and cheated a little bit

00:02:43,750 --> 00:02:53,980
obviously looked at the code and stuff

00:02:46,620 --> 00:02:56,370
and they have a key frame of smash let's

00:02:53,980 --> 00:02:56,370
add that

00:03:03,430 --> 00:03:08,160
ok but

00:03:06,030 --> 00:03:10,020
and she can say that before that I what

00:03:08,160 --> 00:03:11,730
I want to do is really i want to start

00:03:10,020 --> 00:03:14,250
developing this feature so what i'm

00:03:11,730 --> 00:03:17,700
going to do is within my repository i'm

00:03:14,250 --> 00:03:26,209
going to do get flow feature start GS

00:03:17,700 --> 00:03:26,209
conf oops alright cool i'm already there

00:03:32,120 --> 00:03:37,760
all right actually what let me just copy

00:03:34,340 --> 00:03:38,959
the whole damn thing and we have a grunt

00:03:37,760 --> 00:03:41,900
task obviously running in the background

00:03:38,959 --> 00:03:47,349
and it looks to be okay or what I'm

00:03:41,900 --> 00:03:47,349
going to do is see whether that works

00:03:53,530 --> 00:03:59,350
hmm what happened to this guy office

00:03:57,400 --> 00:04:01,680
goes wrong when you are in front of

00:03:59,350 --> 00:04:01,680
people

00:04:12,380 --> 00:04:18,290
okay so

00:04:15,890 --> 00:04:21,350
so what I'm going to do okay let's just

00:04:18,290 --> 00:04:29,260
imagine that worked okay and what I'm

00:04:21,350 --> 00:04:29,260
going to do is push it so get push

00:04:32,110 --> 00:04:35,110
alright

00:04:35,260 --> 00:04:39,280
and then what we're going to go what

00:04:37,480 --> 00:04:42,450
that happens is like the whole build

00:04:39,280 --> 00:04:45,450
process will kick in and if you go into

00:04:42,450 --> 00:04:45,450
here

00:04:51,580 --> 00:04:56,979
you are because I created a branch a

00:04:54,520 --> 00:05:00,669
feature branch of juice corn cheat it's

00:04:56,979 --> 00:05:02,830
automatically deployed to this server

00:05:00,669 --> 00:05:09,180
and then any so anybody can basically

00:05:02,830 --> 00:05:09,180
access it and there you go

00:05:28,969 --> 00:05:33,249
so then what I'll do it I'll just ask

00:05:30,979 --> 00:05:36,909
one of my colleagues here to help me

00:05:33,249 --> 00:05:36,909
merge this request

00:05:57,449 --> 00:06:04,229
major panic and automatically you can

00:06:02,819 --> 00:06:07,979
see like because the build process has

00:06:04,229 --> 00:06:10,129
passed it lets us know that you know

00:06:07,979 --> 00:06:16,650
this is a safe this is safe too much oh

00:06:10,129 --> 00:06:21,719
wait I'm sorry it's still building and

00:06:16,650 --> 00:06:23,189
pause it looks good are you going to

00:06:21,719 --> 00:06:29,219
merge that I don't want to be

00:06:23,189 --> 00:06:35,400
responsible no just kidding okay so well

00:06:29,219 --> 00:06:37,139
well give me a yay so while well my

00:06:35,400 --> 00:06:43,909
colleague goes ahead and add much is

00:06:37,139 --> 00:06:43,909
that we'll get back to it

00:06:50,129 --> 00:06:54,159
yeah the deployment side is going to

00:06:52,990 --> 00:06:58,750
take like a minute or two so I look

00:06:54,159 --> 00:07:01,300
right back but basically that's done

00:06:58,750 --> 00:07:04,509
like and howdy and what do we what just

00:07:01,300 --> 00:07:06,099
happened like I spent really more time

00:07:04,509 --> 00:07:10,780
figuring out about the projector stuff

00:07:06,099 --> 00:07:12,520
and panicking about coding but

00:07:10,780 --> 00:07:14,830
essentially you're able to deploy a

00:07:12,520 --> 00:07:17,800
feature into production really really

00:07:14,830 --> 00:07:20,469
fast and I know I mean you're thinking

00:07:17,800 --> 00:07:22,780
this was it staged it wasn't really a

00:07:20,469 --> 00:07:26,259
feature it was just like some fancy CSS

00:07:22,780 --> 00:07:37,690
stuff but I'd say I still think it was

00:07:26,259 --> 00:07:40,030
pretty cool where's my applause team and

00:07:37,690 --> 00:07:41,680
in case you're still not convinced let

00:07:40,030 --> 00:07:44,440
me tell you like a little bit of a story

00:07:41,680 --> 00:07:48,669
and why why it's specifically cool about

00:07:44,440 --> 00:07:49,810
Redman and it's about this thing product

00:07:48,669 --> 00:07:51,879
market fit and I know you're wondering

00:07:49,810 --> 00:07:53,620
like what's this douche talking about

00:07:51,879 --> 00:07:56,409
product market fit energy as cold like

00:07:53,620 --> 00:07:58,930
seriously what's up with this guy but

00:07:56,409 --> 00:08:00,729
just like bear with me okay because I

00:07:58,930 --> 00:08:03,039
think many of us here are working at

00:08:00,729 --> 00:08:06,430
startups and and for me personally I'm

00:08:03,039 --> 00:08:09,250
quite fascinated on how business &

00:08:06,430 --> 00:08:13,629
Company dynamics impact you know the

00:08:09,250 --> 00:08:17,650
developers because like really company

00:08:13,629 --> 00:08:20,740
scale bro and if and if you're lucky and

00:08:17,650 --> 00:08:22,360
people start using your product and a

00:08:20,740 --> 00:08:23,800
trademark we count ourselves fortunate

00:08:22,360 --> 00:08:26,430
that we are one of those companies

00:08:23,800 --> 00:08:29,379
you're going to scale from like ten

00:08:26,430 --> 00:08:31,419
202,000 to 10,000 like users orders

00:08:29,379 --> 00:08:33,310
messages whatever I mean whatever the

00:08:31,419 --> 00:08:35,529
scale of your measure is and as a result

00:08:33,310 --> 00:08:37,060
I mean you're going to raise money you

00:08:35,529 --> 00:08:40,060
more awesome people are going to join

00:08:37,060 --> 00:08:41,829
your team and to sustain the growth and

00:08:40,060 --> 00:08:43,360
sustain the users you want to be

00:08:41,829 --> 00:08:44,920
developing a lot more features and

00:08:43,360 --> 00:08:48,310
what's going to happen is you're going

00:08:44,920 --> 00:08:50,860
to have you're going to have a lot of

00:08:48,310 --> 00:08:52,480
developers working on a lot of multiple

00:08:50,860 --> 00:08:55,810
features at the same time and we know

00:08:52,480 --> 00:08:57,610
when we do that it's going to result in

00:08:55,810 --> 00:08:59,350
a lot of merge hell's a lot of

00:08:57,610 --> 00:09:01,990
dependency issues a lot of versioning

00:08:59,350 --> 00:09:03,940
problems and that gets magnified

00:09:01,990 --> 00:09:06,339
with more people that join I mean like

00:09:03,940 --> 00:09:09,670
with a few people it's it's ok but as

00:09:06,339 --> 00:09:11,860
and more people join that the problem

00:09:09,670 --> 00:09:15,610
gets amplified and we really need to

00:09:11,860 --> 00:09:18,339
tackle that but not only are they like

00:09:15,610 --> 00:09:19,899
developer issues we also have like other

00:09:18,339 --> 00:09:21,880
stakeholders other people they join you

00:09:19,899 --> 00:09:25,360
know it's not just developers and I

00:09:21,880 --> 00:09:27,430
think it's more specifically more the

00:09:25,360 --> 00:09:30,459
case for red month because we really

00:09:27,430 --> 00:09:34,360
have a lot of multiple systems like the

00:09:30,459 --> 00:09:35,770
ERP warehouse automation transport

00:09:34,360 --> 00:09:38,200
logistics which we all build software

00:09:35,770 --> 00:09:39,670
software for in-house I'm not saying

00:09:38,200 --> 00:09:41,350
that we have the most complex systems

00:09:39,670 --> 00:09:44,440
obviously we just were just a start-up

00:09:41,350 --> 00:09:46,450
but even if our systems are not the same

00:09:44,440 --> 00:09:48,520
and it's different but the issue of

00:09:46,450 --> 00:09:51,010
communicating changes effectively and

00:09:48,520 --> 00:09:54,279
efficiently it still applies to I think

00:09:51,010 --> 00:09:55,959
everyone because I mean as the team

00:09:54,279 --> 00:09:57,970
skills you really realize that like

00:09:55,959 --> 00:09:59,860
huddling around developers really

00:09:57,970 --> 00:10:01,779
doesn't work anymore I mean so many of

00:09:59,860 --> 00:10:03,610
us have had that experience where you

00:10:01,779 --> 00:10:05,290
know there's somebody carding over your

00:10:03,610 --> 00:10:08,079
shoulder trying to get some update and

00:10:05,290 --> 00:10:10,089
you know it's just like is this done or

00:10:08,079 --> 00:10:11,290
and looking at the code I mean they

00:10:10,089 --> 00:10:12,790
might just think like you know most of

00:10:11,290 --> 00:10:14,649
them they just think like it's a matrix

00:10:12,790 --> 00:10:16,720
and it looks really fancy and they're

00:10:14,649 --> 00:10:20,020
entertained by that but really it's

00:10:16,720 --> 00:10:21,640
freaking annoying and what still is like

00:10:20,020 --> 00:10:23,320
when somebody's looking over and like

00:10:21,640 --> 00:10:26,440
you know can you change the hex code of

00:10:23,320 --> 00:10:28,839
that to that and like no man I mean it's

00:10:26,440 --> 00:10:31,630
not productive it's like total waste of

00:10:28,839 --> 00:10:33,370
my time and on the other hand like

00:10:31,630 --> 00:10:35,110
instead of them coming to you you go

00:10:33,370 --> 00:10:37,149
over to them all the time and you bring

00:10:35,110 --> 00:10:38,620
your laptop over every now and then that

00:10:37,149 --> 00:10:41,800
doesn't scale either because we really

00:10:38,620 --> 00:10:43,450
can use our time more efficiently and

00:10:41,800 --> 00:10:46,930
this is super important because if we

00:10:43,450 --> 00:10:48,940
don't take care of this we don't figure

00:10:46,930 --> 00:10:52,300
out what's an efficient way to get stuff

00:10:48,940 --> 00:10:53,950
out and communicated we're going to end

00:10:52,300 --> 00:10:56,800
up with spending a lot of more times in

00:10:53,950 --> 00:11:00,220
meetings and writing less code and that

00:10:56,800 --> 00:11:01,750
is really depressing I mean it's like in

00:11:00,220 --> 00:11:04,149
fact it's so depressing that we actually

00:11:01,750 --> 00:11:08,110
come up with the theory you know this

00:11:04,149 --> 00:11:10,990
guy right famous pretty much came up

00:11:08,110 --> 00:11:13,630
with this a mass energy equation we have

00:11:10,990 --> 00:11:14,590
another theory and we call it actually

00:11:13,630 --> 00:11:16,450
we don't even have a name for

00:11:14,590 --> 00:11:18,940
we'll just call it the thought area or

00:11:16,450 --> 00:11:20,740
the lightning theory whatever and this

00:11:18,940 --> 00:11:22,720
basically means that the environment

00:11:20,740 --> 00:11:24,430
that developers love or productive

00:11:22,720 --> 00:11:26,080
environment is directly proportionate to

00:11:24,430 --> 00:11:28,180
the cold code that they write per day

00:11:26,080 --> 00:11:29,500
and inversely proportional to the

00:11:28,180 --> 00:11:32,130
meetings that they attend per day and

00:11:29,500 --> 00:11:35,380
this is true like this is totally true

00:11:32,130 --> 00:11:39,120
thank you thank you that's totally my

00:11:35,380 --> 00:11:44,140
rig audience but I appreciate it anyway

00:11:39,120 --> 00:11:46,630
so just quickly recap company scale

00:11:44,140 --> 00:11:49,260
usually results in more meetings more

00:11:46,630 --> 00:11:51,910
branch mess we need to fight that

00:11:49,260 --> 00:11:53,950
empowering developers to work on as many

00:11:51,910 --> 00:11:56,020
features as possible at once so that

00:11:53,950 --> 00:11:58,900
they can write more code and not have to

00:11:56,020 --> 00:12:00,910
spend too much time communicating to so

00:11:58,900 --> 00:12:04,600
that we can reduce meetings in select is

00:12:00,910 --> 00:12:07,920
very important but how do we do that how

00:12:04,600 --> 00:12:10,450
do we empower multi feature development

00:12:07,920 --> 00:12:12,610
by multiple developers at the same time

00:12:10,450 --> 00:12:15,610
and the answer released for us at least

00:12:12,610 --> 00:12:17,440
it starts with get flow and most of you

00:12:15,610 --> 00:12:21,450
know I mean you probably know what gate

00:12:17,440 --> 00:12:21,450
flow is and again like bear with me okay

00:12:21,510 --> 00:12:25,930
and for the for the sake of those who

00:12:23,800 --> 00:12:29,080
don't I just want to do a quick repack

00:12:25,930 --> 00:12:31,570
recap and give that get flow is

00:12:29,080 --> 00:12:33,100
basically a branching model it's a

00:12:31,570 --> 00:12:37,210
convention that everybody and your team

00:12:33,100 --> 00:12:41,770
will adopt and just helps to ensure same

00:12:37,210 --> 00:12:43,960
branching state for our purposes the

00:12:41,770 --> 00:12:46,450
fundamental block is really the feature

00:12:43,960 --> 00:12:48,760
branches feature branches are basically

00:12:46,450 --> 00:12:51,820
where you write all your code it's based

00:12:48,760 --> 00:12:56,440
off the developed branch you work on

00:12:51,820 --> 00:12:59,110
this every single day for example in the

00:12:56,440 --> 00:13:03,070
feature 4gs conf you would do a feature

00:12:59,110 --> 00:13:04,810
flow get flow features comp and what

00:13:03,070 --> 00:13:06,820
this does is just basically takes

00:13:04,810 --> 00:13:10,240
develop and creates a new branch and

00:13:06,820 --> 00:13:11,290
checks it out automatically for you once

00:13:10,240 --> 00:13:13,060
you're done with the feature you

00:13:11,290 --> 00:13:15,130
basically merge it back in to develop

00:13:13,060 --> 00:13:17,410
and that's why the develop branch is the

00:13:15,130 --> 00:13:19,210
integration branch it's where all your

00:13:17,410 --> 00:13:23,290
features get much into ones they've

00:13:19,210 --> 00:13:25,450
finished like for example when you

00:13:23,290 --> 00:13:27,370
finish off the GS con feature you just

00:13:25,450 --> 00:13:27,920
do a feature floor finish and what this

00:13:27,370 --> 00:13:30,740
does

00:13:27,920 --> 00:13:32,360
it checks out develop it merges GS count

00:13:30,740 --> 00:13:36,620
back in to develop and deletes this

00:13:32,360 --> 00:13:38,690
feature branch release branch there's

00:13:36,620 --> 00:13:41,089
another one where you want where you

00:13:38,690 --> 00:13:43,250
want to combine a set of features this

00:13:41,089 --> 00:13:46,250
is particularly useful has been useful

00:13:43,250 --> 00:13:49,420
for us when you want to stage completed

00:13:46,250 --> 00:13:51,709
features that you want to deploy later

00:13:49,420 --> 00:13:54,440
like for example you worked on feature

00:13:51,709 --> 00:13:56,389
ABC you're done you're integrated it

00:13:54,440 --> 00:13:57,680
you've integrated into a develop branch

00:13:56,389 --> 00:13:59,540
and then you want to release it a week

00:13:57,680 --> 00:14:03,589
later but at the same time you're going

00:13:59,540 --> 00:14:05,449
to start on D and E at that point it's

00:14:03,589 --> 00:14:08,839
probably good to get developed merged

00:14:05,449 --> 00:14:13,220
into release and then not touch it until

00:14:08,839 --> 00:14:14,480
it's actually out in production and of

00:14:13,220 --> 00:14:16,070
course you can probably guess at this

00:14:14,480 --> 00:14:17,860
point that you know master branch it

00:14:16,070 --> 00:14:20,230
contains the official release history

00:14:17,860 --> 00:14:23,779
anything that is in master branches

00:14:20,230 --> 00:14:25,279
production and in case of like you know

00:14:23,779 --> 00:14:27,110
when really hits the fence you have

00:14:25,279 --> 00:14:29,870
hotfix branches which are pretty much

00:14:27,110 --> 00:14:32,000
similar to feature branches but they're

00:14:29,870 --> 00:14:36,470
based off the master branch instead of

00:14:32,000 --> 00:14:39,050
the develop branch so really get flow

00:14:36,470 --> 00:14:41,899
helps maintain the sanity of our

00:14:39,050 --> 00:14:42,980
branches for us and from what I went

00:14:41,899 --> 00:14:45,079
through just now you'll notice that

00:14:42,980 --> 00:14:47,750
there's like three branches which are

00:14:45,079 --> 00:14:49,640
kind of like gatekeepers so like develop

00:14:47,750 --> 00:14:52,490
release and master and it makes kind of

00:14:49,640 --> 00:14:56,360
like a common sense decision in terms of

00:14:52,490 --> 00:14:59,089
code review that we do it there so

00:14:56,360 --> 00:15:01,459
anytime you want to put code in to

00:14:59,089 --> 00:15:03,230
develop release or master it has to go

00:15:01,459 --> 00:15:06,079
through like a pull request and a proper

00:15:03,230 --> 00:15:11,000
code review process kind of like the

00:15:06,079 --> 00:15:14,420
pseudo one that we did just now so get

00:15:11,000 --> 00:15:17,589
flow helps but for us of oats help as

00:15:14,420 --> 00:15:20,690
well we specifically has this have these

00:15:17,589 --> 00:15:23,300
commit and feature branch only commit

00:15:20,690 --> 00:15:24,740
and push often in fact like we we make

00:15:23,300 --> 00:15:27,139
it a point that every single logical

00:15:24,740 --> 00:15:30,769
improvement to the code is committed and

00:15:27,139 --> 00:15:32,690
pushed we also merge develop into

00:15:30,769 --> 00:15:34,579
feature branches every day just because

00:15:32,690 --> 00:15:36,319
somebody else would be working on other

00:15:34,579 --> 00:15:39,860
features and they may have merged alien

00:15:36,319 --> 00:15:40,680
to develop and merge features only in

00:15:39,860 --> 00:15:42,720
the developed never

00:15:40,680 --> 00:15:46,110
ever ever do master only have pull

00:15:42,720 --> 00:15:48,839
requests to master and as long as we use

00:15:46,110 --> 00:15:51,480
get flow and stick to our odds we are

00:15:48,839 --> 00:15:54,060
really able to work on really as many

00:15:51,480 --> 00:15:57,149
features that we want at least at this

00:15:54,060 --> 00:15:59,790
point but obviously just having

00:15:57,149 --> 00:16:02,820
branching is really not enough we still

00:15:59,790 --> 00:16:03,870
have if just just by having branches we

00:16:02,820 --> 00:16:05,700
still have to bring our laptops

00:16:03,870 --> 00:16:07,350
everywhere we need to get we actually

00:16:05,700 --> 00:16:09,570
now need to get them deployed and to

00:16:07,350 --> 00:16:12,110
that I want to talk a little bit about

00:16:09,570 --> 00:16:14,790
our environments of which we have four

00:16:12,110 --> 00:16:17,060
and again you'll see how like get flow

00:16:14,790 --> 00:16:19,589
is really the starting point for our

00:16:17,060 --> 00:16:21,060
environments as well the first one is

00:16:19,589 --> 00:16:22,950
local I mean this is really

00:16:21,060 --> 00:16:26,580
straightforward it's the developers

00:16:22,950 --> 00:16:28,800
laptop yeah done we jump to the third

00:16:26,580 --> 00:16:32,130
one I'll get back to the second but this

00:16:28,800 --> 00:16:34,200
is basically this hosts the staging

00:16:32,130 --> 00:16:36,120
arrahman hosts basically the developed

00:16:34,200 --> 00:16:37,620
branch or the release branch and the

00:16:36,120 --> 00:16:39,570
reason why it could be both is because

00:16:37,620 --> 00:16:42,120
we may not have a release branch all the

00:16:39,570 --> 00:16:43,709
time if we do then it serves the release

00:16:42,120 --> 00:16:46,890
branch otherwise it always serves the

00:16:43,709 --> 00:16:48,709
develop branch and obviously we have the

00:16:46,890 --> 00:16:51,600
production environment which you run

00:16:48,709 --> 00:16:52,920
which runs everything that's in the

00:16:51,600 --> 00:16:54,350
master branch everything that's in

00:16:52,920 --> 00:16:57,240
master branch goes into production and

00:16:54,350 --> 00:17:01,320
you think actually that this is probably

00:16:57,240 --> 00:17:03,150
the most important branch but to us the

00:17:01,320 --> 00:17:06,059
development branch is actually the most

00:17:03,150 --> 00:17:08,160
important it's where the features are

00:17:06,059 --> 00:17:14,510
deploy it's where the real stuff happens

00:17:08,160 --> 00:17:16,860
and we and we invest in that so

00:17:14,510 --> 00:17:18,569
basically when you deploy something to a

00:17:16,860 --> 00:17:21,540
develop branch it automatically goes to

00:17:18,569 --> 00:17:22,949
alpha no red mercom if you deploy

00:17:21,540 --> 00:17:25,589
something to a feature branch it

00:17:22,949 --> 00:17:27,660
automatically goes to a feature URL

00:17:25,589 --> 00:17:29,550
something like this which would which is

00:17:27,660 --> 00:17:33,870
what we saw just now when I did a push I

00:17:29,550 --> 00:17:36,809
was deployed although I cheated but it's

00:17:33,870 --> 00:17:38,820
still deployed at GS conf alpha to read

00:17:36,809 --> 00:17:42,330
more calm so anybody can go in and

00:17:38,820 --> 00:17:44,730
access it and provide feedback and the

00:17:42,330 --> 00:17:49,140
commander deploy basically is is the

00:17:44,730 --> 00:17:50,520
ever so loved git push right it just

00:17:49,140 --> 00:17:52,860
figures out like depending on which

00:17:50,520 --> 00:17:53,810
branch you deploy to which branch you

00:17:52,860 --> 00:17:56,570
push it

00:17:53,810 --> 00:17:57,770
it gets deployed by CI automatically so

00:17:56,570 --> 00:17:59,420
you really don't have to worry about

00:17:57,770 --> 00:18:02,960
anything else but just working about

00:17:59,420 --> 00:18:04,700
your code and working in Game four the

00:18:02,960 --> 00:18:08,060
CI process basically I mean we use

00:18:04,700 --> 00:18:11,450
Travis you could use Jenkins circle CIO

00:18:08,060 --> 00:18:14,660
whatever but basically the point is this

00:18:11,450 --> 00:18:17,060
that once you do a push the CI process

00:18:14,660 --> 00:18:18,950
Travis picks up the branch and because

00:18:17,060 --> 00:18:21,380
it knows it obviously knows what branch

00:18:18,950 --> 00:18:23,510
you push too so by translation in those

00:18:21,380 --> 00:18:26,090
which environment and by that it knows

00:18:23,510 --> 00:18:29,450
exactly which service to deploy to as

00:18:26,090 --> 00:18:32,810
well so it runs the test it builds it

00:18:29,450 --> 00:18:35,210
creates the artifacts by me but by that

00:18:32,810 --> 00:18:37,090
i mean like it compresses minify zip set

00:18:35,210 --> 00:18:40,130
up and then actually transfers them to

00:18:37,090 --> 00:18:43,430
the right server and starts the

00:18:40,130 --> 00:18:45,460
application we use grunt for this so

00:18:43,430 --> 00:18:48,020
every one of our application has a CI

00:18:45,460 --> 00:18:50,060
directory which has a particular grunt

00:18:48,020 --> 00:18:52,220
file that is responsible for like

00:18:50,060 --> 00:18:57,260
compressing zipping and transferring all

00:18:52,220 --> 00:18:59,480
the artifacts to the correct server and

00:18:57,260 --> 00:19:01,780
in case you prefer to look at flow shots

00:18:59,480 --> 00:19:04,520
but basically it's pretty much the same

00:19:01,780 --> 00:19:06,650
developer pushes within Travis you do a

00:19:04,520 --> 00:19:09,440
build if it fills it we notify people

00:19:06,650 --> 00:19:11,770
and slack if it passes you create

00:19:09,440 --> 00:19:15,080
artifacts you zip them up compress them

00:19:11,770 --> 00:19:17,420
we also upload them to s3 in case of

00:19:15,080 --> 00:19:19,280
roll backs and then we get the

00:19:17,420 --> 00:19:22,400
particular service transfer the

00:19:19,280 --> 00:19:24,290
artifacts to dr. buss and then start the

00:19:22,400 --> 00:19:30,710
application on those service and all

00:19:24,290 --> 00:19:32,750
this part is done by grunt task and that

00:19:30,710 --> 00:19:34,040
just means like they don't the powerful

00:19:32,750 --> 00:19:36,530
thing about that is we just get to

00:19:34,040 --> 00:19:38,180
deploy with git commands I mean it

00:19:36,530 --> 00:19:39,890
doesn't it doesn't mess with the

00:19:38,180 --> 00:19:41,660
developer workflow because that's you're

00:19:39,890 --> 00:19:45,200
so familiar with get I mean we love get

00:19:41,660 --> 00:19:47,060
and the cool thing also is now that

00:19:45,200 --> 00:19:48,890
communication also becomes part of this

00:19:47,060 --> 00:19:50,840
workflow so we never ever changed the

00:19:48,890 --> 00:19:53,300
developer workflow that is the central

00:19:50,840 --> 00:19:54,890
part of everything so every time we

00:19:53,300 --> 00:19:57,260
create a new feature we have a new

00:19:54,890 --> 00:19:59,030
channel and snack and the slack and who

00:19:57,260 --> 00:20:00,980
all the bills for those features are

00:19:59,030 --> 00:20:04,029
automatically populated to their channel

00:20:00,980 --> 00:20:07,359
so that you know every time a commit

00:20:04,029 --> 00:20:09,729
is is is pushed it's automatically

00:20:07,359 --> 00:20:13,450
deployed just like in the case with the

00:20:09,729 --> 00:20:15,159
GS con for example so we know we really

00:20:13,450 --> 00:20:17,769
no longer have to bring our laptops to

00:20:15,159 --> 00:20:19,450
show anything and any and anybody who

00:20:17,769 --> 00:20:21,399
wants to get involved or wants to keep

00:20:19,450 --> 00:20:27,190
updated just just need to follow that

00:20:21,399 --> 00:20:31,379
channel yeah and basically what that

00:20:27,190 --> 00:20:34,929
means is like we we are now able to

00:20:31,379 --> 00:20:36,190
communicate every incremental change and

00:20:34,929 --> 00:20:38,009
we communicate it in the best way

00:20:36,190 --> 00:20:41,229
possible which is just the right code

00:20:38,009 --> 00:20:43,599
and obviously I mean not showing code to

00:20:41,229 --> 00:20:45,849
whoever wants to be who wants to be

00:20:43,599 --> 00:20:49,029
notified but giving them something that

00:20:45,849 --> 00:20:51,609
is that works and they can play around

00:20:49,029 --> 00:20:55,749
and interact with let every single

00:20:51,609 --> 00:21:00,279
comment another as a result of that we

00:20:55,749 --> 00:21:01,749
really do have a lot less meetings when

00:21:00,279 --> 00:21:05,499
we spend the time instead playing more

00:21:01,749 --> 00:21:07,599
foosball Tim turns out like this was a

00:21:05,499 --> 00:21:10,960
probably the biggest realization for me

00:21:07,599 --> 00:21:12,580
is that everybody hates meetings I

00:21:10,960 --> 00:21:14,229
thought actually it was just the

00:21:12,580 --> 00:21:16,320
developers that hate them and everybody

00:21:14,229 --> 00:21:21,009
else just uses me things to kind of like

00:21:16,320 --> 00:21:24,639
do do stuff but turns out it's not the

00:21:21,009 --> 00:21:27,519
case so back to my lightning slide

00:21:24,639 --> 00:21:31,269
because I love it so much what exactly

00:21:27,519 --> 00:21:34,149
is lightning branches so actually it's

00:21:31,269 --> 00:21:36,519
really nothing but what we think of as a

00:21:34,149 --> 00:21:39,999
considered investment in the development

00:21:36,519 --> 00:21:42,159
environment every logical improvement

00:21:39,999 --> 00:21:43,779
every single commit is important not

00:21:42,159 --> 00:21:45,849
just the final deployment that you go

00:21:43,779 --> 00:21:47,259
into staging or to production every

00:21:45,849 --> 00:21:49,749
single one of those commits that is

00:21:47,259 --> 00:21:52,809
important and it's important to get

00:21:49,749 --> 00:21:55,299
feedback on that and get it quickly so

00:21:52,809 --> 00:21:58,599
to be able to deploy every single one of

00:21:55,299 --> 00:22:02,080
them in separate feature branches is

00:21:58,599 --> 00:22:05,349
really awesome and it also inculcates

00:22:02,080 --> 00:22:07,299
the habit of really pushing small and

00:22:05,349 --> 00:22:13,119
increment incremental changes very fast

00:22:07,299 --> 00:22:14,559
and getting feedback so in case like

00:22:13,119 --> 00:22:16,900
I've been putting you guys to sleep or

00:22:14,559 --> 00:22:19,630
anything if you wanted to listen

00:22:16,900 --> 00:22:21,220
to just this part this is pretty much

00:22:19,630 --> 00:22:22,930
the crux of it like how do we actually

00:22:21,220 --> 00:22:28,330
deploy the feature branches which i

00:22:22,930 --> 00:22:32,020
think is simple but pretty neat and the

00:22:28,330 --> 00:22:34,840
answer is like we use nginx I mean it's

00:22:32,020 --> 00:22:36,970
really good at routing so why not and

00:22:34,840 --> 00:22:39,070
our single page applications are really

00:22:36,970 --> 00:22:41,410
good at being lightweight and just about

00:22:39,070 --> 00:22:43,810
being able to run anywhere like you put

00:22:41,410 --> 00:22:47,260
it on s3 you put it you know anyway it

00:22:43,810 --> 00:22:50,620
just runs so all you really need is this

00:22:47,260 --> 00:22:53,530
like a server block in internet set a

00:22:50,620 --> 00:22:55,930
white list of you know a domain set a

00:22:53,530 --> 00:22:58,810
default feature we usually use develop

00:22:55,930 --> 00:23:01,720
make sense and then based on the host

00:22:58,810 --> 00:23:03,850
you change the feature so if which is

00:23:01,720 --> 00:23:06,850
just a simple reg reg ex and says that

00:23:03,850 --> 00:23:09,070
if it's jas confidence that if it's GS

00:23:06,850 --> 00:23:11,110
condo Alfred or in macomb then the

00:23:09,070 --> 00:23:13,930
feature is GS conf and we will serve

00:23:11,110 --> 00:23:17,080
that at a path of path to features last

00:23:13,930 --> 00:23:19,810
year's conf and then it's really really

00:23:17,080 --> 00:23:21,520
simple it's just a simple matter of you

00:23:19,810 --> 00:23:23,020
know transferring your bill artifacts to

00:23:21,520 --> 00:23:25,540
the correct path to the correct server

00:23:23,020 --> 00:23:26,950
and it just works like we don't have to

00:23:25,540 --> 00:23:28,720
create a new server you just need to

00:23:26,950 --> 00:23:33,010
deploy to the correct place with this

00:23:28,720 --> 00:23:34,600
really neat configuration and you guys

00:23:33,010 --> 00:23:38,140
might be thinking like what really

00:23:34,600 --> 00:23:41,080
that's it it's that simple yeah it's

00:23:38,140 --> 00:23:43,690
kind of that simple I mean actually

00:23:41,080 --> 00:23:45,730
there's a lot more we do use a lot of

00:23:43,690 --> 00:23:47,860
Chef a lot of Ruby to do a lot of the

00:23:45,730 --> 00:23:49,360
automation but I kind of like a value my

00:23:47,860 --> 00:23:53,380
life I don't want to talk about it here

00:23:49,360 --> 00:23:55,060
in gs conf but in case there's any one

00:23:53,380 --> 00:23:57,370
of you who want to talk about it and are

00:23:55,060 --> 00:24:02,010
not loaded with a gun or something come

00:23:57,370 --> 00:24:02,010
and share with me yeah thank you thank

00:24:03,300 --> 00:24:08,489
you refinish

00:24:05,639 --> 00:24:10,019
maybe just one question for a déjà

00:24:08,489 --> 00:24:12,779
especially for those of you who are

00:24:10,019 --> 00:24:17,159
involved in large-scale applications and

00:24:12,779 --> 00:24:25,919
need to build features all right all

00:24:17,159 --> 00:24:27,419
right yes one Steve hi yep I'm just a

00:24:25,919 --> 00:24:30,149
question how many times your push to

00:24:27,419 --> 00:24:32,399
production every day I mean obviously

00:24:30,149 --> 00:24:35,879
this is not i think is more devops top

00:24:32,399 --> 00:24:38,519
but yeah just wondering it depends on

00:24:35,879 --> 00:24:41,009
which project but for the front end i

00:24:38,519 --> 00:24:43,859
would say at least once or twice once or

00:24:41,009 --> 00:24:46,979
twice because i feel for get for get

00:24:43,859 --> 00:24:48,149
floor i might not be yes I mean it's

00:24:46,979 --> 00:24:49,979
actually quite complicated and the

00:24:48,149 --> 00:24:51,959
teacher or your developers on direct

00:24:49,979 --> 00:24:54,209
might be something that is more suited

00:24:51,959 --> 00:24:56,549
is I think most of our long releases so

00:24:54,209 --> 00:24:59,309
it's actually quite as puzzle when you

00:24:56,549 --> 00:25:01,349
say you'll use it for my pusher

00:24:59,309 --> 00:25:03,659
production like quite fast no i mean we

00:25:01,349 --> 00:25:06,299
actually use it like for the simple CSS

00:25:03,659 --> 00:25:08,009
hack yeah that I did we do that all the

00:25:06,299 --> 00:25:10,019
time because feature branches are like

00:25:08,009 --> 00:25:11,969
super super cheap have your consider

00:25:10,019 --> 00:25:14,039
like maybe like github flow way all you

00:25:11,969 --> 00:25:17,129
just do is from master to feature branch

00:25:14,039 --> 00:25:18,179
and then back to master so that

00:25:17,129 --> 00:25:20,759
simplifies you don't even have the

00:25:18,179 --> 00:25:22,799
release and you know stuff like that we

00:25:20,759 --> 00:25:27,329
wanted to do this so that we can have

00:25:22,799 --> 00:25:29,369
the ability to have pull requests you

00:25:27,329 --> 00:25:32,070
also can have pork rest you know just to

00:25:29,369 --> 00:25:34,829
master I mean in a sense yeah I mean

00:25:32,070 --> 00:25:36,929
just a taller because I mean looking at

00:25:34,829 --> 00:25:40,619
this thing for over a year now it's okay

00:25:36,929 --> 00:25:42,209
cool yeah it's chatter yeah yeah their

00:25:40,619 --> 00:25:44,849
various ways of doing it I think Jews

00:25:42,209 --> 00:25:48,559
what suits for your team get a floor get

00:25:44,849 --> 00:25:48,559

YouTube URL: https://www.youtube.com/watch?v=D9iFalfG9H8


