Title: Slava Kim: Reactive Programming Made Simple - JSConf.Asia 2014
Publication date: 2014-12-17
Playlist: JSConf.Asia 2014
Description: 
	Reactive Programming is very useful for building complex user interface and interactions. Unfortunately the most popular form of it is FRP (Functional Reactive Programming) which is not an easy paradigm to learn and use for newcomers. In this talk we will present you a much simpler approach that still preserves all the Reactive Programming properties usually required on day-by-day basis but allows you to use the usual imperative style just in a 1Kb library of pure JS. 
This talk is suitable for medium-above average programmers who are interested in building user interfaces (although Reactive Programming might appear useful in other parts of a typical application as well). But it can also be useful for novices as this talk has no prerequisites (unlike the mentioned FRP). There will be a pretty simple code examples with a lot of interactivity on the screen. I promise, it will be a good balance between concepts, examples and fun!

Slava is a core developer at the open-source full-stack JS framework Meteor. His work includes Meteor’s real-time data updates from databases, client-side caches, packaging system, Phonegap support and other exciting things. In his free time Slava constantly tries to educate himself on different fascinating topics of Computer Science.

JSConf.Asia is the JavaScript, web and mobile developer conference for Asia. Amara Sanctuary, Singapore - 20 + 21 November 2014.

Source: http://2014.jsconf.asia/#speakers
Slides: http://slides.com/slavakim/tracker#/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,000 --> 00:00:18,480
I'll turn my camera I keep my fingers hi

00:00:16,320 --> 00:00:21,210
guys so it's the last talked before

00:00:18,480 --> 00:00:23,369
lunch I know how you're feeling you're

00:00:21,210 --> 00:00:27,330
hungry me too but we'll go through it

00:00:23,369 --> 00:00:31,349
together we'll survive okay so let's

00:00:27,330 --> 00:00:33,570
start so my talk is called reactive

00:00:31,349 --> 00:00:35,489
programming made simple and it's mostly

00:00:33,570 --> 00:00:38,700
about user interfaces of the client site

00:00:35,489 --> 00:00:40,710
in the browser but basically what i'm

00:00:38,700 --> 00:00:44,640
going to show you you can apply it in

00:00:40,710 --> 00:00:46,379
regular programming as well so i'm from

00:00:44,640 --> 00:00:48,719
meter and meter is a company that

00:00:46,379 --> 00:00:50,760
develops an open source framework and

00:00:48,719 --> 00:00:53,760
the main purpose of meter is to make it

00:00:50,760 --> 00:00:57,329
really easy to build modern web

00:00:53,760 --> 00:00:59,879
applications and it should be easy to

00:00:57,329 --> 00:01:02,250
everyone not only beginners advanced

00:00:59,879 --> 00:01:06,390
users like intermediate programmers and

00:01:02,250 --> 00:01:08,850
they it's all in JavaScript so what is

00:01:06,390 --> 00:01:10,830
modern web applications we have an

00:01:08,850 --> 00:01:13,950
example here that comes with meter and

00:01:10,830 --> 00:01:15,570
it's called to do that as you know every

00:01:13,950 --> 00:01:18,060
JavaScript framework should have a to do

00:01:15,570 --> 00:01:22,110
that so this is one example built with

00:01:18,060 --> 00:01:27,210
meter so we have lists it has data i can

00:01:22,110 --> 00:01:28,770
add stuff go to is evil right i can add

00:01:27,210 --> 00:01:31,130
it you can see the number here increases

00:01:28,770 --> 00:01:34,259
i can check it off blah blah blah delete

00:01:31,130 --> 00:01:37,350
awesome so actually all the data here is

00:01:34,259 --> 00:01:40,200
synchronized to like a server in north

00:01:37,350 --> 00:01:42,600
america in the united states so even

00:01:40,200 --> 00:01:45,299
though it's taking half a second to

00:01:42,600 --> 00:01:47,070
connect to that server you still don't

00:01:45,299 --> 00:01:49,259
see any latency all the actions are

00:01:47,070 --> 00:01:51,210
immediate because we simulate all the

00:01:49,259 --> 00:01:53,729
actions of the client-side that's one of

00:01:51,210 --> 00:01:55,740
the features of meteor and because it's

00:01:53,729 --> 00:01:59,159
all persistent i can open another

00:01:55,740 --> 00:02:01,530
browser window and perform some changes

00:01:59,159 --> 00:02:03,479
here and you will see them appear to on

00:02:01,530 --> 00:02:04,799
the left side as well and you can see

00:02:03,479 --> 00:02:06,869
that on the right side is much faster

00:02:04,799 --> 00:02:08,879
because it's happening in simulation

00:02:06,869 --> 00:02:12,180
before the classic sure we'll go to the

00:02:08,879 --> 00:02:15,319
server so this is one of the examples of

00:02:12,180 --> 00:02:18,390
meteor applications

00:02:15,319 --> 00:02:22,890
so modern web applications it's a lot of

00:02:18,390 --> 00:02:25,319
things in our view at meteor we try to

00:02:22,890 --> 00:02:27,810
encourage people to use a lot of modern

00:02:25,319 --> 00:02:30,150
patterns such as a morphic JavaScript

00:02:27,810 --> 00:02:32,700
something spike talked about instant

00:02:30,150 --> 00:02:34,950
responses client-side simulations the

00:02:32,700 --> 00:02:37,620
active you I the all times visualization

00:02:34,950 --> 00:02:39,060
blah blah blah a lot of things so that a

00:02:37,620 --> 00:02:42,330
lot of things in videos that we build

00:02:39,060 --> 00:02:44,610
its kind of amazing but I don't have

00:02:42,330 --> 00:02:47,040
time to talk about all of that today so

00:02:44,610 --> 00:02:49,560
I'm going to focus on one feature that I

00:02:47,040 --> 00:02:51,959
think will be useful to you and if you

00:02:49,560 --> 00:02:54,060
want to learn more about meter I thought

00:02:51,959 --> 00:02:55,680
maybe I shouldn't give you another

00:02:54,060 --> 00:02:58,049
introduction to it because it's already

00:02:55,680 --> 00:03:00,959
been done before by my coworker Emily

00:02:58,049 --> 00:03:03,360
stark on Jess called Asia 2013 in manual

00:03:00,959 --> 00:03:05,069
so you can go there and see the

00:03:03,360 --> 00:03:09,180
introductions there I hope you'll like

00:03:05,069 --> 00:03:10,739
it but today um I want to give you some

00:03:09,180 --> 00:03:13,170
things that you can use outside of meter

00:03:10,739 --> 00:03:15,180
because I know you all guys have jobs

00:03:13,170 --> 00:03:17,100
probably you cannot switch to meet you

00:03:15,180 --> 00:03:21,180
in one moment I'm not even trying to

00:03:17,100 --> 00:03:24,120
convince you it's okay so let's see what

00:03:21,180 --> 00:03:26,100
meteor is media is any big system

00:03:24,120 --> 00:03:28,680
consists of a lot of different packages

00:03:26,100 --> 00:03:30,600
components and I know somebody could

00:03:28,680 --> 00:03:32,100
tell you hey meter is another model

00:03:30,600 --> 00:03:35,910
istics things you cannot separate things

00:03:32,100 --> 00:03:39,299
out that's not true this is the basic

00:03:35,910 --> 00:03:41,070
stack legs are several major components

00:03:39,299 --> 00:03:42,780
something like getting real-time data

00:03:41,070 --> 00:03:45,420
updates from database or like giving

00:03:42,780 --> 00:03:47,880
them to the client or simulations as a

00:03:45,420 --> 00:03:49,410
client side and this one components that

00:03:47,880 --> 00:03:53,250
I want to talk about today is called

00:03:49,410 --> 00:03:57,709
checker this is a small UI libraries

00:03:53,250 --> 00:04:00,750
that we use to get to manage the

00:03:57,709 --> 00:04:02,280
dependency floor like if you imagine you

00:04:00,750 --> 00:04:04,319
have a lot of components they all depend

00:04:02,280 --> 00:04:05,970
on each other they need to synchronize

00:04:04,319 --> 00:04:09,180
their state somehow and you can use this

00:04:05,970 --> 00:04:10,920
slider in the applications so here's an

00:04:09,180 --> 00:04:13,829
example of like applications that you

00:04:10,920 --> 00:04:16,109
all know bubbly it's Twitter and see as

00:04:13,829 --> 00:04:19,169
you know when you have fairly complex

00:04:16,109 --> 00:04:20,940
you I you get more and more components

00:04:19,169 --> 00:04:23,039
you try to split it out on smaller and

00:04:20,940 --> 00:04:25,470
smaller parts so it's easier to manage

00:04:23,039 --> 00:04:26,600
so you can imagine it looks something

00:04:25,470 --> 00:04:31,760
like this I

00:04:26,600 --> 00:04:34,340
I just made made it up but you might

00:04:31,760 --> 00:04:37,070
think that it's good we separate our

00:04:34,340 --> 00:04:38,630
concerns we isolated each component but

00:04:37,070 --> 00:04:40,610
in the allergy component still depend on

00:04:38,630 --> 00:04:42,980
each other so if this a new tweet it

00:04:40,610 --> 00:04:45,650
appears in the main feed it can appear

00:04:42,980 --> 00:04:47,660
the number increasing somewhere else if

00:04:45,650 --> 00:04:50,330
there's a picture it will appear in the

00:04:47,660 --> 00:04:53,150
pictures component so they really can

00:04:50,330 --> 00:04:55,220
depend on each other so here's another

00:04:53,150 --> 00:04:57,380
example it's a YouTube dashboard and

00:04:55,220 --> 00:04:59,210
this is something a lot of people don't

00:04:57,380 --> 00:05:03,170
see this is a dashboard for people who

00:04:59,210 --> 00:05:05,060
are plaut videos so you can see my most

00:05:03,170 --> 00:05:08,540
popular video is about my high school

00:05:05,060 --> 00:05:11,480
graduation silico but this is a complex

00:05:08,540 --> 00:05:14,480
page there's a lot of things going on so

00:05:11,480 --> 00:05:16,190
you have type-ahead search you have some

00:05:14,480 --> 00:05:18,490
charting library you have a calendar

00:05:16,190 --> 00:05:20,300
view where you can select something and

00:05:18,490 --> 00:05:21,980
let's say you want to implement

00:05:20,300 --> 00:05:23,870
something I exist and you work in a

00:05:21,980 --> 00:05:25,460
smaller company may be here in Singapore

00:05:23,870 --> 00:05:27,890
maybe somewhere else you probably don't

00:05:25,460 --> 00:05:30,770
have two hundred engineers to build it

00:05:27,890 --> 00:05:32,750
overnight so what do you do if you're

00:05:30,770 --> 00:05:34,580
lazy like me you will go on the internet

00:05:32,750 --> 00:05:36,500
and find a lot of libraries that can

00:05:34,580 --> 00:05:38,810
help you I don't want to build my

00:05:36,500 --> 00:05:41,090
calendar of you again I don't have two

00:05:38,810 --> 00:05:43,760
miles maybe somebody olej build it for

00:05:41,090 --> 00:05:45,170
me right so that's exactly what you're

00:05:43,760 --> 00:05:46,850
going to do probably you will use

00:05:45,170 --> 00:05:48,560
something like a package as for

00:05:46,850 --> 00:05:51,350
type-ahead search you will render your

00:05:48,560 --> 00:05:53,570
views with that component for calendar

00:05:51,350 --> 00:05:56,210
you will use full calendar jquery plugin

00:05:53,570 --> 00:05:58,580
for SVG gasps you'll use some library

00:05:56,210 --> 00:06:00,920
like this vijay's this is a data table

00:05:58,580 --> 00:06:03,590
that needs sorting and everything I

00:06:00,920 --> 00:06:05,180
don't know if if somebody already did it

00:06:03,590 --> 00:06:08,690
for me efficiently I'll just use their

00:06:05,180 --> 00:06:10,960
code so here you have several components

00:06:08,690 --> 00:06:13,760
and they built with entirely different

00:06:10,960 --> 00:06:16,280
frameworks sorry libraries and they

00:06:13,760 --> 00:06:18,650
built with entirely different teams this

00:06:16,280 --> 00:06:21,740
code doesn't have any idea how to work

00:06:18,650 --> 00:06:25,190
with each other and yeah like you can

00:06:21,740 --> 00:06:27,110
use something else for this line so my

00:06:25,190 --> 00:06:28,880
point is you have all the things you

00:06:27,110 --> 00:06:32,030
need to glue together how do you do that

00:06:28,880 --> 00:06:35,419
and just to give you another example

00:06:32,030 --> 00:06:37,160
here's google calendar in case you think

00:06:35,419 --> 00:06:38,950
oh you just synchronize your data model

00:06:37,160 --> 00:06:40,470
for every component it's not true

00:06:38,950 --> 00:06:42,690
sometimes you

00:06:40,470 --> 00:06:45,210
and on the state of the component so

00:06:42,690 --> 00:06:47,130
here on the left side you have this box

00:06:45,210 --> 00:06:50,490
where you can select some weak arbitrary

00:06:47,130 --> 00:06:52,500
range of days in your calendar and that

00:06:50,490 --> 00:06:55,230
would be reflected on the right side so

00:06:52,500 --> 00:06:58,500
it's not even like data that comes for

00:06:55,230 --> 00:07:03,030
user it's something that is stored as a

00:06:58,500 --> 00:07:05,370
state of the component so let's say you

00:07:03,030 --> 00:07:07,380
start developing that but you know this

00:07:05,370 --> 00:07:09,330
thing depends on that saying blind

00:07:07,380 --> 00:07:11,730
showed up down only if this constraints

00:07:09,330 --> 00:07:13,290
are satisfied you will do some graph

00:07:11,730 --> 00:07:14,730
dependency graph like this by the way

00:07:13,290 --> 00:07:19,260
it's not real graph I just made it up

00:07:14,730 --> 00:07:21,570
but the point is it might be simple in

00:07:19,260 --> 00:07:24,870
the beginning but more features you have

00:07:21,570 --> 00:07:27,570
in your applications more different

00:07:24,870 --> 00:07:29,610
directions the activity will go to or

00:07:27,570 --> 00:07:31,050
dependencies will go to it will be

00:07:29,610 --> 00:07:33,660
harder to manage and maybe you don't

00:07:31,050 --> 00:07:36,810
need to is our job really managing

00:07:33,660 --> 00:07:38,700
dependencies probably not so you may end

00:07:36,810 --> 00:07:40,530
up with something like this it's all

00:07:38,700 --> 00:07:42,330
complicated goes back and forth you

00:07:40,530 --> 00:07:45,600
manage events here you pushes they're

00:07:42,330 --> 00:07:48,300
like what's going on so that's why we

00:07:45,600 --> 00:07:50,520
built a small library called tracker

00:07:48,300 --> 00:07:52,080
it's under two kilobytes when gzipped

00:07:50,520 --> 00:07:54,630
and minified is really small and lean

00:07:52,080 --> 00:07:57,390
and the point is to make any code

00:07:54,630 --> 00:07:59,550
deactive you just wrap whatever code you

00:07:57,390 --> 00:08:00,900
have into one function call it just

00:07:59,550 --> 00:08:03,030
instantly becomes the active at what I

00:08:00,900 --> 00:08:04,830
mean is every time some dependency

00:08:03,030 --> 00:08:08,160
changes of that function or like that

00:08:04,830 --> 00:08:10,740
block it will just sound again so the

00:08:08,160 --> 00:08:14,729
purpose is just to you know glue things

00:08:10,740 --> 00:08:17,580
together and here's an example a code

00:08:14,729 --> 00:08:20,070
example you just put your stuff into

00:08:17,580 --> 00:08:21,660
this checker-outer on and alternate

00:08:20,070 --> 00:08:24,900
means it will run again at the game

00:08:21,660 --> 00:08:27,330
again every time something changes so

00:08:24,900 --> 00:08:29,400
here's another example let's say I have

00:08:27,330 --> 00:08:31,919
a valuable called city it's San

00:08:29,400 --> 00:08:36,510
Francisco that's wearing form and we

00:08:31,919 --> 00:08:38,580
paint both casting from this city so so

00:08:36,510 --> 00:08:39,810
like first time it will run it will

00:08:38,580 --> 00:08:41,880
paint I'm broadcasting from San

00:08:39,810 --> 00:08:44,210
Francisco but next time the city will

00:08:41,880 --> 00:08:47,160
change it will immediately run again and

00:08:44,210 --> 00:08:49,560
it will paint I'm broadcasting from

00:08:47,160 --> 00:08:50,850
Singapore and it will do it itself you

00:08:49,560 --> 00:08:54,060
just change your variables however you

00:08:50,850 --> 00:08:54,329
want here's another example just to make

00:08:54,060 --> 00:08:57,559
the

00:08:54,329 --> 00:08:59,850
that tracker is not to dump for you

00:08:57,559 --> 00:09:03,509
let's say we have two variables and

00:08:59,850 --> 00:09:06,509
since this outer on I check the secret

00:09:03,509 --> 00:09:08,579
variable and if this qu i will say I'm

00:09:06,509 --> 00:09:11,639
not going to tell you what the city is

00:09:08,579 --> 00:09:14,670
if there's not choose and I i can tell

00:09:11,639 --> 00:09:17,040
you okay in the city is this so Cherica

00:09:14,670 --> 00:09:20,309
looks at this code it understands that

00:09:17,040 --> 00:09:23,699
secret is true in the beginning so only

00:09:20,309 --> 00:09:25,709
the first block will execute so the

00:09:23,699 --> 00:09:28,499
second block of the if statement is

00:09:25,709 --> 00:09:32,309
essentially that block it will not run

00:09:28,499 --> 00:09:34,860
ever until secret will change so it

00:09:32,309 --> 00:09:36,660
doesn't matter if you change city like

00:09:34,860 --> 00:09:39,269
hundred times it will not run again

00:09:36,660 --> 00:09:41,639
because check and assess oh it didn't

00:09:39,269 --> 00:09:43,559
change anyway so it will print only once

00:09:41,639 --> 00:09:45,959
and then you change the ticket and it

00:09:43,559 --> 00:09:50,850
will do all the right things so it's

00:09:45,959 --> 00:09:52,649
kind intelligent in this case so

00:09:50,850 --> 00:09:55,559
dependency tracking is not a new thing

00:09:52,649 --> 00:09:59,189
and if you look at the modern UI

00:09:55,559 --> 00:10:01,259
frameworks they're mostly like they're

00:09:59,189 --> 00:10:03,629
often implemented in the context of data

00:10:01,259 --> 00:10:05,279
bindings so you have your data model I

00:10:03,629 --> 00:10:07,819
want to keep it in sync with this part

00:10:05,279 --> 00:10:11,429
of the page okay i have my data binding

00:10:07,819 --> 00:10:13,739
and usually it's really hard to use this

00:10:11,429 --> 00:10:16,769
mechanism of dependency traction outside

00:10:13,739 --> 00:10:18,929
of this framework with other components

00:10:16,769 --> 00:10:21,689
or like code not related to you I at all

00:10:18,929 --> 00:10:23,790
so for example this is angular example

00:10:21,689 --> 00:10:26,579
and i'm not a big expert in angular so

00:10:23,790 --> 00:10:28,949
if you hate me for that please sorry i

00:10:26,579 --> 00:10:31,049
have my computer per particle say hello

00:10:28,949 --> 00:10:35,089
it just matches my first name last name

00:10:31,049 --> 00:10:37,110
and you'll notice here that all the

00:10:35,089 --> 00:10:40,410
valuables are attached to this dollar

00:10:37,110 --> 00:10:43,730
sign scope so what is dollar signs cope

00:10:40,410 --> 00:10:45,929
it's special things that angular has and

00:10:43,730 --> 00:10:47,699
it's different from the JavaScript's

00:10:45,929 --> 00:10:50,119
curbs that you have in each function and

00:10:47,699 --> 00:10:52,649
you need to remember to do that and

00:10:50,119 --> 00:10:54,689
there's something magical about it

00:10:52,649 --> 00:10:57,239
because what anglo does under the hood

00:10:54,689 --> 00:11:00,059
it pulls these valuables on the scope

00:10:57,239 --> 00:11:02,100
and see if anything changed and this

00:11:00,059 --> 00:11:04,379
something they call judge checking so

00:11:02,100 --> 00:11:06,240
this is good but it's mostly done in the

00:11:04,379 --> 00:11:07,830
context of data bindings and it's not

00:11:06,240 --> 00:11:12,300
really useful outside of angular

00:11:07,830 --> 00:11:14,220
so in amber it's kinda simpler you still

00:11:12,300 --> 00:11:16,290
use the same JavaScript code but what I

00:11:14,220 --> 00:11:18,120
don't like about it you need to specify

00:11:16,290 --> 00:11:20,580
manually what are you dependencies of

00:11:18,120 --> 00:11:22,170
your function like already use first

00:11:20,580 --> 00:11:24,060
name and last name why do I need to tell

00:11:22,170 --> 00:11:25,710
amber what are the exact properties I

00:11:24,060 --> 00:11:28,260
depend on why can't you figure it out

00:11:25,710 --> 00:11:30,630
yourself so this is samson check out

00:11:28,260 --> 00:11:32,520
that's better and it's really small you

00:11:30,630 --> 00:11:35,820
can use it with different things here's

00:11:32,520 --> 00:11:38,070
an example of examples let's say you

00:11:35,820 --> 00:11:40,140
have a glove that you'll end up and use

00:11:38,070 --> 00:11:42,450
this V and every time something changes

00:11:40,140 --> 00:11:44,220
you need to e bind your data or you have

00:11:42,450 --> 00:11:46,020
a full calendar and every time you want

00:11:44,220 --> 00:11:48,960
to display a different range you need to

00:11:46,020 --> 00:11:50,580
set this date to your calendar or you

00:11:48,960 --> 00:11:53,670
have child jazz or like video player

00:11:50,580 --> 00:11:56,220
every time different API a different

00:11:53,670 --> 00:11:57,180
thing like if you have n components and

00:11:56,220 --> 00:12:01,140
you need to connect them between each

00:11:57,180 --> 00:12:03,960
other you'll do l squared extra coding

00:12:01,140 --> 00:12:06,330
for each of those connections and it

00:12:03,960 --> 00:12:08,610
goes both ways it's not only inside the

00:12:06,330 --> 00:12:11,580
component it's also outside of it so

00:12:08,610 --> 00:12:14,360
whenever the events triggered like oh I

00:12:11,580 --> 00:12:18,450
clicked on say saying or I went to this

00:12:14,360 --> 00:12:21,390
date or I I jumped to this location for

00:12:18,450 --> 00:12:23,100
the playback oh I pose so I started all

00:12:21,390 --> 00:12:24,750
of those are like extra things you need

00:12:23,100 --> 00:12:26,790
to code up connect together with event

00:12:24,750 --> 00:12:28,530
handlers which checker is much easier

00:12:26,790 --> 00:12:30,450
you just connect everything to check at

00:12:28,530 --> 00:12:32,220
once and that's it and you can use the

00:12:30,450 --> 00:12:34,740
same code because most times the code is

00:12:32,220 --> 00:12:38,070
pretty much a it important so you can

00:12:34,740 --> 00:12:41,760
just line it again at the game so let's

00:12:38,070 --> 00:12:43,740
go back to the YouTube example so I have

00:12:41,760 --> 00:12:45,360
all these components so at this point

00:12:43,740 --> 00:12:47,670
what I'll do I'll just connect each of

00:12:45,360 --> 00:12:51,560
them to checker and checker will make

00:12:47,670 --> 00:12:54,000
sure that all the reactive valuables are

00:12:51,560 --> 00:12:57,510
checking the right advance to endow

00:12:54,000 --> 00:13:00,810
again so here's my demo there's a very

00:12:57,510 --> 00:13:03,240
simple page you can it's a forecast

00:13:00,810 --> 00:13:06,480
weather app it's not really an app it's

00:13:03,240 --> 00:13:08,640
more like a page so here I say it's

00:13:06,480 --> 00:13:11,820
beautiful day today's Thursday or Friday

00:13:08,640 --> 00:13:14,670
and here's the forecast for the whole

00:13:11,820 --> 00:13:16,200
week and here's a small child so for the

00:13:14,670 --> 00:13:17,760
purpose of this demo I'm going to

00:13:16,200 --> 00:13:20,520
implement it with mental Dom

00:13:17,760 --> 00:13:21,240
manipulations we access because why not

00:13:20,520 --> 00:13:25,080
it's a

00:13:21,240 --> 00:13:26,850
library and charting library so it can

00:13:25,080 --> 00:13:28,800
really happen in your application as

00:13:26,850 --> 00:13:31,170
well you can have one part that this

00:13:28,800 --> 00:13:33,480
kind a legacy code developed by some guy

00:13:31,170 --> 00:13:34,980
who left a long time ago also you have

00:13:33,480 --> 00:13:37,290
another part built with the ad because

00:13:34,980 --> 00:13:38,670
it's a new hotness and there's a new

00:13:37,290 --> 00:13:40,950
developer who decided just to build

00:13:38,670 --> 00:13:43,200
everything can react and this is

00:13:40,950 --> 00:13:46,260
charging Clyde way because well who

00:13:43,200 --> 00:13:49,050
knows how to build charts I don't so

00:13:46,260 --> 00:13:50,910
yeah and here's the code I don't know

00:13:49,050 --> 00:13:53,820
why my syntax highlighting the swirl but

00:13:50,910 --> 00:13:55,380
I hope it's still easy to it for Dom

00:13:53,820 --> 00:13:58,440
manipulations we just got an element

00:13:55,380 --> 00:14:01,709
assign in the text and we use current

00:13:58,440 --> 00:14:03,480
date and temperatures forecast for your

00:14:01,709 --> 00:14:05,580
address you just render this component

00:14:03,480 --> 00:14:08,149
it's very simple you just passing you

00:14:05,580 --> 00:14:10,290
temperatures about temperatures data and

00:14:08,149 --> 00:14:11,670
for the charging light but it's a bit

00:14:10,290 --> 00:14:14,399
more complicated because it's charging

00:14:11,670 --> 00:14:16,709
five but he needs extra babysitting what

00:14:14,399 --> 00:14:19,290
changed why do I need to like tell you

00:14:16,709 --> 00:14:22,140
specifically I need to go through all

00:14:19,290 --> 00:14:23,640
your data data structures and like set

00:14:22,140 --> 00:14:25,140
it manually unfortunately that's how

00:14:23,640 --> 00:14:27,060
this library works the ones that I

00:14:25,140 --> 00:14:31,950
picked so sometimes you need to update

00:14:27,060 --> 00:14:38,430
it this way so let's go to the live

00:14:31,950 --> 00:14:44,040
coding demo way scary ok so here's the

00:14:38,430 --> 00:14:53,250
basic page and I need the console ready

00:14:44,040 --> 00:14:55,260
to go ok sorry show website developer ok

00:14:53,250 --> 00:14:59,190
so I don't have any code here you just

00:14:55,260 --> 00:15:02,190
have basic HTML markup so as you can see

00:14:59,190 --> 00:15:03,990
nothing happens and you can see is the

00:15:02,190 --> 00:15:08,220
date even correct it's not even correct

00:15:03,990 --> 00:15:11,670
it says it's mundane it's clearly not so

00:15:08,220 --> 00:15:15,140
let's do let's do some Dom manipulation

00:15:11,670 --> 00:15:20,190
I know it's awful but well bear with me

00:15:15,140 --> 00:15:23,339
so i will get element by ID in this case

00:15:20,190 --> 00:15:29,029
my ID is day for the purpose of this

00:15:23,339 --> 00:15:31,900
demo and i will set you know texture

00:15:29,029 --> 00:15:35,950
current date

00:15:31,900 --> 00:15:38,680
and what's a sports okay it displays

00:15:35,950 --> 00:15:41,110
this because I do it in manual Dom

00:15:38,680 --> 00:15:43,360
manipulations so I'll make it a bit

00:15:41,110 --> 00:15:49,900
nicer and I'll just start getting two

00:15:43,360 --> 00:15:52,360
separate variable and i'll choose the

00:15:49,900 --> 00:15:55,840
stream from the days of the week array

00:15:52,360 --> 00:16:00,160
just so it's easier to see so i'll get

00:15:55,840 --> 00:16:05,170
today and it go safe I day cool it's

00:16:00,160 --> 00:16:09,930
fine thing right okay but let's change

00:16:05,170 --> 00:16:09,930
the current date let's go to the future

00:16:10,260 --> 00:16:18,550
let's set it to something in the future

00:16:12,790 --> 00:16:20,950
in 2014 november and 21st nothing

00:16:18,550 --> 00:16:23,890
happens why because it's code is not

00:16:20,950 --> 00:16:27,540
reactive how do i make it active well

00:16:23,890 --> 00:16:33,100
that's easy I'll just wrap this code

00:16:27,540 --> 00:16:36,070
into a function declaration and I'll

00:16:33,100 --> 00:16:38,170
call check it out loud which is just

00:16:36,070 --> 00:16:40,930
like the only API is that we have here

00:16:38,170 --> 00:16:43,270
love this again every time it changes so

00:16:40,930 --> 00:16:45,130
i will refresh and i'll set it to the

00:16:43,270 --> 00:16:49,360
future and it changes to monday yay

00:16:45,130 --> 00:16:51,400
works so i have also a prebuilt

00:16:49,360 --> 00:16:54,610
functions that is random I that is on

00:16:51,400 --> 00:17:00,490
demising the current date and let me

00:16:54,610 --> 00:17:05,020
call that so set interval randomly

00:17:00,490 --> 00:17:07,810
change date and execute it very often so

00:17:05,020 --> 00:17:09,970
yeah it's changing all the time cool so

00:17:07,810 --> 00:17:14,640
I'll do the same with the current

00:17:09,970 --> 00:17:16,990
temperature so this pan is forecast and

00:17:14,640 --> 00:17:20,640
I'll just get this temperature for my

00:17:16,990 --> 00:17:25,560
active arrays that I declared online 30

00:17:20,640 --> 00:17:25,560
temperatures get the jet date

00:17:26,919 --> 00:17:32,870
okay it's a 31 so yeah it works so now

00:17:30,799 --> 00:17:34,490
let me do the same for other things and

00:17:32,870 --> 00:17:35,690
I don't want to code in front of you

00:17:34,490 --> 00:17:37,429
it's kind of embarrassing because they

00:17:35,690 --> 00:17:40,190
can make a lot of mistakes let me just

00:17:37,429 --> 00:17:43,190
copy paste something from my example

00:17:40,190 --> 00:17:46,669
that I already built so I'll do the same

00:17:43,190 --> 00:17:48,769
thing I'll instantiate tracker outrun

00:17:46,669 --> 00:17:50,809
and inside I'll just render the

00:17:48,769 --> 00:17:53,320
component with temperatures and because

00:17:50,809 --> 00:17:57,019
we use the same temperatures array

00:17:53,320 --> 00:18:03,799
basically it should be synchronized some

00:17:57,019 --> 00:18:08,779
cincuenta where you get a safe oh do

00:18:03,799 --> 00:18:11,149
they go to the wrong place sorry okay

00:18:08,779 --> 00:18:14,059
here what I want to do ok here it is a

00:18:11,149 --> 00:18:17,330
list built with react vertical you can

00:18:14,059 --> 00:18:21,139
imagine some fancy component so now I

00:18:17,330 --> 00:18:23,690
can call a different set interval that

00:18:21,139 --> 00:18:26,000
will randomly change my values in my

00:18:23,690 --> 00:18:28,129
array so let's imagine data comes from

00:18:26,000 --> 00:18:30,950
each other and there's some service

00:18:28,129 --> 00:18:32,870
about whether as it always changed its

00:18:30,950 --> 00:18:35,000
mind it tells you oh actually the

00:18:32,870 --> 00:18:39,500
temperature will be different so let's

00:18:35,000 --> 00:18:45,080
do this I'll call randomly update

00:18:39,500 --> 00:18:48,230
forecast and call it here we often so

00:18:45,080 --> 00:18:53,659
yeah yay it's really called on Monday be

00:18:48,230 --> 00:18:57,860
careful okay the last piece the last

00:18:53,659 --> 00:19:00,440
piece is charged as example so here's

00:18:57,860 --> 00:19:03,139
the code I talked about before and again

00:19:00,440 --> 00:19:05,000
the same thing just wrap it in to check

00:19:03,139 --> 00:19:06,860
it out the run and make sure your

00:19:05,000 --> 00:19:09,559
function is idempotent and like you

00:19:06,860 --> 00:19:11,690
correctly instantiate it first and then

00:19:09,559 --> 00:19:15,350
you just updated data so i will refresh

00:19:11,690 --> 00:19:19,909
it oh yeah we have a graph and it's 31

00:19:15,350 --> 00:19:24,009
30 32 so it's all great so let's do the

00:19:19,909 --> 00:19:27,500
same thing again let's just randomize it

00:19:24,009 --> 00:19:30,340
it's pretty cool huh I even prepared

00:19:27,500 --> 00:19:30,340
some music for you

00:19:31,870 --> 00:19:47,620
I think this graph actually knows how to

00:19:38,860 --> 00:19:49,180
dance for so yeah this was my demo so

00:19:47,620 --> 00:19:52,480
what we did we just at every sync it to

00:19:49,180 --> 00:19:55,240
check out that something was hard so

00:19:52,480 --> 00:19:56,980
recap checker is a small library it's

00:19:55,240 --> 00:19:59,320
part of meteors as how meteor does all

00:19:56,980 --> 00:20:01,930
the fun parent reactivity magic the

00:19:59,320 --> 00:20:04,000
thing is in meteor we kind of hide it

00:20:01,930 --> 00:20:05,679
under the hood so like users don't

00:20:04,000 --> 00:20:07,420
actually need to wrap everything in this

00:20:05,679 --> 00:20:08,830
function calls so it's very intuitive

00:20:07,420 --> 00:20:10,540
just to write your code ones without

00:20:08,830 --> 00:20:13,660
even you know thinking about the

00:20:10,540 --> 00:20:15,220
activity and it's really easy to use it

00:20:13,660 --> 00:20:17,679
outside of meteor to glue things

00:20:15,220 --> 00:20:19,960
together and they hope when you guys go

00:20:17,679 --> 00:20:21,550
home you can look at it it's really

00:20:19,960 --> 00:20:23,170
short you can actually read it and you

00:20:21,550 --> 00:20:26,530
can learn something from it or maybe

00:20:23,170 --> 00:20:29,920
even use it so you don't even need to

00:20:26,530 --> 00:20:31,720
get into meter to use it it's useful on

00:20:29,920 --> 00:20:33,820
its own so it smart enough to keep you

00:20:31,720 --> 00:20:35,380
lazy and use other components and glue

00:20:33,820 --> 00:20:36,610
things together but it's not smart

00:20:35,380 --> 00:20:40,270
enough to do all the work for you

00:20:36,610 --> 00:20:43,330
otherwise you won't get paid so much so

00:20:40,270 --> 00:20:48,929
is it did we want lunch right hungry

00:20:43,330 --> 00:20:48,929
yeah it said Thank You Slava thank you

00:20:50,860 --> 00:20:58,070
fast snappy UI development with tracker

00:20:54,890 --> 00:21:01,309
questions it so I mean I'm still

00:20:58,070 --> 00:21:03,559
learning me today as um so I'm just

00:21:01,309 --> 00:21:06,650
wondering is it possible to a science

00:21:03,559 --> 00:21:09,230
string to a checker function and then I

00:21:06,650 --> 00:21:11,510
can turn it so nice auto running right

00:21:09,230 --> 00:21:13,910
is it possible Tony off sometimes and

00:21:11,510 --> 00:21:15,410
then turn you on again yeah you can turn

00:21:13,910 --> 00:21:19,010
them off and you can turn them on again

00:21:15,410 --> 00:21:21,710
I didn't cover that that part but what

00:21:19,010 --> 00:21:23,540
you can do you can do it in both ways in

00:21:21,710 --> 00:21:25,490
two ways so you can either safe

00:21:23,540 --> 00:21:28,160
available for this computation and then

00:21:25,490 --> 00:21:30,320
you can stop it later we see desktop you

00:21:28,160 --> 00:21:33,080
can do this all what you can do alto

00:21:30,320 --> 00:21:34,640
natively actually it will be passed as a

00:21:33,080 --> 00:21:37,070
first argument to the function so you

00:21:34,640 --> 00:21:42,020
can stop it here inside so both options

00:21:37,070 --> 00:21:46,809
are valid cool thanks yeah sure cool one

00:21:42,020 --> 00:21:49,460
more I was interested in knowing how the

00:21:46,809 --> 00:21:52,160
dependencies are being resolved for

00:21:49,460 --> 00:21:54,559
every function to descend into autorun

00:21:52,160 --> 00:21:57,679
do you use like you convert the function

00:21:54,559 --> 00:22:01,010
to string and I can talk about that so

00:21:57,679 --> 00:22:02,720
the question is how does how do we track

00:22:01,010 --> 00:22:04,309
the pen disease that's basically what

00:22:02,720 --> 00:22:05,870
checker does all right we check the

00:22:04,309 --> 00:22:08,630
balance is whenever they change the

00:22:05,870 --> 00:22:11,179
function again so the thing is if you

00:22:08,630 --> 00:22:14,090
noticed i used reactive variables

00:22:11,179 --> 00:22:18,230
interactive arrays everywhere so this is

00:22:14,090 --> 00:22:20,929
kind of a catch because so one of the

00:22:18,230 --> 00:22:22,550
part of the answer is in the future we

00:22:20,929 --> 00:22:23,929
can use acma script five setters and

00:22:22,550 --> 00:22:26,120
getters but right now they're not

00:22:23,929 --> 00:22:29,720
supported in every browser I am looking

00:22:26,120 --> 00:22:32,240
at ie but once you can do that you can

00:22:29,720 --> 00:22:34,220
wrap all the objects and you don't even

00:22:32,240 --> 00:22:37,670
need to use get or set of functions and

00:22:34,220 --> 00:22:39,559
we can convert this variables for you so

00:22:37,670 --> 00:22:43,850
what happens I'm check all the lines of

00:22:39,559 --> 00:22:46,790
code first time and just a way a date

00:22:43,850 --> 00:22:49,790
like the flow of the program works it

00:22:46,790 --> 00:22:52,640
can notice what variables got cold so in

00:22:49,790 --> 00:22:54,230
this case secret will get cold but CT

00:22:52,640 --> 00:22:56,540
will not get cold so check out

00:22:54,230 --> 00:22:59,270
understand that right now if nothing

00:22:56,540 --> 00:23:01,070
changes only secret matters always it

00:22:59,270 --> 00:23:02,480
justifiable matters the second viable

00:23:01,070 --> 00:23:03,140
doesn't matter at all because it wasn't

00:23:02,480 --> 00:23:05,270
even reach

00:23:03,140 --> 00:23:07,760
like essentially right now it's dead

00:23:05,270 --> 00:23:10,760
code and when you change those variables

00:23:07,760 --> 00:23:13,100
it says oh like make sure you will learn

00:23:10,760 --> 00:23:15,830
your digest loop next time and you'll

00:23:13,100 --> 00:23:18,890
update and propagate all the changes and

00:23:15,830 --> 00:23:22,060
I hope that answers the question big

00:23:18,890 --> 00:23:22,060

YouTube URL: https://www.youtube.com/watch?v=CjzZif7z9SE


