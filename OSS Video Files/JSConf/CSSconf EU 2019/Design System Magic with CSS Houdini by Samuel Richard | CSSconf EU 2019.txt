Title: Design System Magic with CSS Houdini by Samuel Richard | CSSconf EU 2019
Publication date: 2019-07-17
Playlist: CSSconf EU 2019
Description: 
	CSS Houdini is coming! With it, we gain a new set of design and development arcane arts to leverage in superpowering our design systems! Best of all, we can start using many of Houdiniâ€™s powers today!

This talk will focus on a handful of key browser specifications being developed under the CSS Houdini Task Force umbrella, with key interest given to features that can start to be leveraged today in design systems. We will cover briefly what CSS Houdini is and describe these key technologies in relation to common design system problems and patterns, and how Houdini can greatly improve the flexibility, power, performance, and maintainability of these patterns.
Captions: 
	[Music]hey everyone hi you ready for the lastset of talks oh sure yeah why not coolthem hi I'm Sam I'm also known as snugUGG throughout the internet this is theHoudini bunny if you want Houdini bunnystickers come find me I have a bunch ofthem and this talk is available onlineat that linkdon't worry that link will be up againat the end of the talk so what isHoudini for those of you who haven'tbeen following a web standard thatdoesn't really exist in any browsers yetwell the objective of the CSS tagHoudini task force or CSS Houdini is tojointly develop features that explainthe magic of styling and layout on thewebpractically though what does that meanwell it means extending CSS viaJavaScript so that authors like us don'thave to wait decades for browsers andstandards bodies to implement new thingsbut wait you say can't we do thatalready and the answer is not quite it'snot currently possible to extend CSSthrough JavaScript it's only possible tomimic job or write JavaScript thatmimics CSS actually polyfill in CSS orintroducing new features like CSS gridis hard to impossible to do todayespecially so without being justterrible for performanceHoudini will actually let authors tapinto these actual CSS engine finallyletting them extend CSS and do so at CSSengine speeds I like to think about itlike this much like service workers area low-level JavaScript API for thebrowser's cache Houdini introduceslow-level JavaScript API is for thebrowser's render engines and I thinkthat's pretty cool so the question thatI always get is can I use it yet and theanswer is unequivocally no no you cannotuse it yetbut I mean maybe kind of things arecoming the web's changing a little bitso maybe you kind of so normally it's awarning today it's a heads-up so voodiniis getting pretty stable and you cankind of start to use it in some browsersbut some of it a lot of it is pretty faroff and landscapes like I said really influx most of what we're going to betalking about today is the mostly stablebit but you're gonna need to usepolyfills and get your progressiveenhancement on in order to use thisstuff today so let's talk about the coremagical secrets of Houdini the stuffthat you need to understand makeeverything else work and the first oneis this thing called worklets workletsour extension points for render enginesthey're kind of like web workers butthey're much smaller in scope they canbe parallelized to live on multiplethreads and most importantly you don'tcall them the render engine calls themthey're an extension of the renderengine so this is what adding one lookslike you have a demo worklet and addmodule and then a path to whatever yourworkload is these are also promises soyou can promise all of them and then offof them to do work once your workletsare loaded every worklet has this kindof shape to it it's got a function thatfunction is the function that getscalled that function has a name which isthe thing you're actually going to usein CSS and then there's a class and allclasses will have some sort of processfunction which is the actual thing therender engine is calling whenever itwants to use your worklet you'll see acouple examples of this later on let'stake a look at the life cycle of aworklet we have our render engine ourrender engine spins up the main threadonce it's spun up the main thread willalso spin up multiple worklet processesthese work that processes can either beon the main thread or they can beparallel to the main thread it doesn'tmatterthey're just going to be a bunch of themsitting around from the main threadwe're going to call our browserJavaScript and our browser Java scriptsgonna call worklet Add module that'sgoing to load a worklet and the workletwill load into two or more work withprocesses now here's where things getinteresting andof our browser JavaScript calling ourworklet the render engine calls ourworklet when it needs to do a renderwhen it needs to use itworklets are the underlying foundationfor which all of Houdini is based thethe magic that makes it happen it's whatmakes Houdini powerful next bit typed omthe typed om expose the structure beyondsimple strings which is what we havetoday for CSS values these can bemanipulated and retrieved reallyperformant lis and they're part of thisnew CSS style value class and there arebuncha turan options there's keywordvalues like idents there's positionvalues transform values unit values andsome math so this is what it looks likewe've got a class of example with abackground position of center bottom pixels now trying to parse that out fromthat string is really hard but with thetype sire computed style map and then we canget background position X and that comesback as a CSS unit value with a value ofbackground position Y it's a sum of percent because that's bottom that'sgoing to the bottom and then negative pixels because after that bottom pixels bit means in CSS so we know nowno longer need to string parse this anddo disgusting reggae regexto actually understand what this is wecan just call it and get it typed omgives us the structure we need to castthe spells that we want but what can youdo with this you might say well you cando put some pretty rad things let's talkabout the rad custom stuff that you cando with worklets and the typed om pleaseallow me to introduce or reintroduce youto window dot CSS and the first apiwe're going to look at is the propertiesand values api aka make the snozzberriestaste like snozzberries so this is kindof the current state of customproperties CSS variables we havesomething called my color we set it togreen and then we set it to a URL that'snot a colorand everything is sad because urls not acolor and it doesn't know what to do butthen we can do window dot CSS dotRegister property tell it the propertymy color has a syntax of color and nowthe browser knows it's a color becausethe browser knows it's a color that URLjunk is gonna get skipped which isreally nice there are a couple otherthings we can do with it we can decidewhether or not inherits up the Dom or wecan also give it an initial value boomthere we go there are a bunch ofdifferent types that you can use thesyntax so you can great lengths you cancreate numbers percentages images colorstimes resolutions all sorts of differenttypes for this syntax and you cancombine them so a single item is just asingle item length you can combine themwith a bar separator for an or so inthis case it's an image or a URL if youhave custom idents you can combine abunch of them so big bigger and all capsbigger are three different valid ID endsif you have a plus that's a spaceseparated this so in this case the spaceseparate a list of lengths and then ifyou have a hashit's a comma separated list now now thata browser actually knows what it is wecan do some pretty interesting things sowe have over here a two buttons styledwith a linear gradient and a customproperty now if I hover over theunregistered one it does exactly what wethink it does nothing it just pops intothat next color because we can'ttransition linear gradients right wellnow that we know what a custom propertyis now that we know that it's a color ifwe transition the custom property thenwe can actually do things liketransition linear gradients ortransition anything that is a registeredcustom property and that gets reallypowerful as you'll see as we go alongbut before we do that how can you usethem in your design systems that's thepoint of this talk right how can we useHoudini in design systemswell there is a proposed declarativesyntax for these custom properties thatlets you write these custom propertiesnot in JavaScript to put in CSS using atproperty property name and then thesyntax and it roughly works out to theJavaScript on the left there on theright what's nice about this proposedsyntax is you can start using it todaywith a post CSS plug in a post CSSplug-in you write that property syntaxand it will spit out the JavaScript soyou can write all your custom propertiesin your CSS deliver them as part of yourdesign systems as well as the JavaScriptfor a fallback which then isprogressively enhanced with the ifstatement so some things we can do thiswe can make CSS variables smarter so ifwe've got our main blue and we have aproperty main blue with syntax andHarrison initial value we can use thatand in fact when the property syntaxships we can get rid of that initialmain blue call entirely because it'lljust be there available we can also makethings like this background variablemore intelligent by only allowing imagesor colors and not allowing it to inheritup the Dom right now all CSS variablesinherit up the Dom which is notsomething you really want for abackground oh it's really cool when westarted to talk about worklets is youcan make truly custom properties so youcan do things like theme colors whereyou have identify that you want to allowyou can do things like create customcolumns for layouts you can create yourown padding properties so all thesedifferent actual literal customproperties as opposed to justplaceholders for things you're going toput into another property somewhere elsespeaking of worklets let's talk aboutthe paint API because as Bob Rost likesto say every day is a good day when youpaint yeah Bob Ross have you ever wantedto use canvas as a background a mask ora border in CSS with the styling andflexibility of an element and thescalability of an SVG of course youhaven't no one has but it turns out ifyou can do that it's actually reallycool and you can do a lot of reallyinteresting things so the paint API theclass for the work that looks a littlebit something like this we have inputproperties that's an array of propertieseither custom properties or standardproperties you can read standardproperties into that you want to read infrom the element that this is that'sbeing painted you can also pass inputarguments with that same formattingsyntax as custom properties to pass inarguments to the paint function and thenthe paint function is the thing thatactually gets called it has a context the size of the element theproperties that get passed in and thearguments let's write a basic paintworklet right now so this one's justgoing to draw a big circle we're goingto get the circle color property we'regoing to get it from within our paintfunction and this is actually a CSSstyle value this is our type domain inaction then we do some math to figureout the center point in the radius ofour circle and we draw our circle oncewe've drawn our circle we import it andwe get thisI mean I've drawn a big circle in themiddle in the middle of a thing I canchange its color it's nice it's a it's acute little circle demo but with this asour foundation we can do reallyinteresting things so there's this guynamed Tim Holman and he makes greatgenerative art so I've converted one ofhis generative art demos into an actualpaint background using this so I candecide how many steps that I want Istart with time I reload the page it randomlygenerates a new background image for meI do this with very few lines of CSS Idon't need to load a new image in andit's all controllable through actual CSSthe worklet isn't so big it's smallerthan loading an image and you can get aninfinite number of randomly generatedbackgrounds this way much moreinteresting and much more performantthen just loading in a bunch of randomimages you can even combine the paintworklet with that custom propertytransitionand you can do something like this andcreate a nice little ripple effect byfiguring out where you clicked and thentoggling on a class that has the endtransition state that you want andtransitioning through our paint cool howcan I use this in design systems wellthere's a polyfill for it and it workspretty well anywhere that has canvas andyou're gonna want CSS variables as wellit especially works pretty well inFirefox and Safari what I think DesignSystemsI think web components or I thinkcomponents and when I write components Ithink web components I've been usingthem recently I really like them and Ithink that they're a great way toencapsulate styling and functionalityand we're gonna use it today to buildour our version of a paint buttonalthough buttons aren't as cool whatwe're gonna build so we have this basicdemo of tabs we have a tab you switchtabs everything switch is hunky-doryexcept these tabs have that cute littlerounded corner going out at the bottomwhich if you've ever tried to actuallydo is not so straightforward especiallyif you want it styler Bowl through CSSand without any extra elements so whatwe're gonna do is we're going to write apaint function a paint worklet that willwrite those for us and style it basedoff of the background color of our tabso starting with a web component youstart by writing a template a templatehas an IDit has our styling the styling livesinside of our template and it's onlygoing to affect this web component itwon't leak outside we've got a couplevariables up top CSS variables wherewe're using a property we're passing incalled tab multiplier to do some mathfor us to make sure that our bottomrounded corners and our top roundedcorners all kind of continue to to be insync with each other and then we do someof the actual a little bit annoying CSSto get border images working with paintand then we're good with our styling forour HTML this is pretty basicit's a divand we have this part L or partattribute on it to allow us to exposestyling outside of our web componentthis is part of the new shadow partsspec for web components the JavaScriptfor getting this to actually work and beusable is very straightforward on theLeft we've got our CSS paintregistrations or sorry propertyregistrations and we're adding ourworklet for our paint module or paintworklet and then on the right is all theJavaScript I need to turn that templateinto a reusable web component I extendthe HTML element I grab the content ofthat template and attach it to theshadow DOM and then under customelements I define a rounded tab usingthat class it's six lines of JavaScriptit's not so terribly hard to do and inthe end we get this what we just sawtabs tabs tabs but because we'veencapsulated it we can start to dothings like make everything more roundor even more round and we get those nicerounded transitions from those tabsdynamically through this CSS controlthrough our CSS we can even do thingslike change the tab position so if welook at our first tab this is on theleft we could say instead we want it onthe right and our rounded corner movesto the other end or the middle and nowit's on both go back to left and becausewe're using paint which can read inregular properties I can change thebackground of this tab to something likepurple and it will change what I'vepainted as well no extra elements noextra loading of anything this one paintworklet is able to do all of that withstandard CSS backing it up now the finalthing we're going to talk about is thelayout API and the layout API is alittle bit heavy and it's superexperimental but it's kind of cool soI'm gonna show it to you anyway thepaint API lets you play Tetris with yourweb apps it literally lets you make yourown display properties lets you dothings like polyfill it awesome newlayouts back that you likeor because everyone likes a good masonrylayout you can write one without theperformance hit of running a bunch ofJavaScript on the main threadnow this specs a little bit complicatedso I'm gonna walk you through how thespec thinks about layout which actuallycan help you understand how browsersthink about layout layout starts with abox a box is either an element or it isa pseudo element the layout algorithmfor that box is something called thecurrent layout the boxes direct parentis the parent of the layout algorithmfor the box's direct parent is theparent layout the parent layout haslayout constraints those layoutconstraints is the available room insideof the parent for the box to be laid outin the parent layout also has layoutedges these are your box model edgespadding scrollbar and borders currentlayout has a child layout which is thelayout algorithm of layout child as ifit wasn't visible with display:none Ididn't name these things I'm sorrythey're named confusingly bring it up inthe spec now layout child can't reallydo anything but what it can do is it cangenerate a layout fragment and layoutfragments are interesting layoutfragments have an in-line size and ablock size this goes back to theabstract sizing stuff that we talkedabout all right that I think wasmentioned earlier so in line sizing andblock sizing this is stuff we can'tchange we can't actually change the sizeof elements when we go to lay them outbut we can change their inline offsetand block offset that's how we actuallyposition stuff around cool with that outof the way let's take a look at layoutwe've got input properties inputproperties are actually things that goon the parent layout solayout API layout worklets they startfrom the parent layout down as opposedto the current layout up so inputproperties these are things like yourgrid template columns on display gridwould be input properties child inputproperties or properties you want toread in from the children of that layoutso this would belike grid columns and then there are acouple layout options there are twofunctions that get called as part ofthis one is intrinsic sizing orintrinsic size which will figure out howmuch room a block should take up andlayout which is the actual function thatwe do our layout in now the internalsome intrinsic sizing are really complexso we're not going to cover them theeasiest way to think about it is whatyou're trying to figure out here isgiven an unlimited amount of space howbig can we make a box so there's not alot of unused space and then also howsmall can we make that box withouthaving any of the content overflow andonce we figure out how big it canpossibly be and how small it canpossibly be then we return that and thebrowser figures out where it goes inbetween those two things but the layoutfunction that's pretty easy tounderstand the first thing we need to dois we need to figure out what the totalsize is that we can lay out our childrenin so that's our inline size - our edgeinline and our block size - our block inline bundle that up as an object andthen we loop through each one of thechildren and generate a fragment basedon that constraint size this is usgenerating layout constraints from therewe start actually laying stuff out weget the block offset started at whereour edges start and then just loop overeverything we make it's block offsetwhatever the block offset is we Centerit and then we add to the block offsetso we have an item go right oneunderneath each other and finally addblock edges back in and we return ourchildren and this new block sizing andwe get something that looks like thisagain not super duper terribly cool isjust a whole bunch of boxes centered onone on top of anotherbut with this as our building block wecan do some really cool things likebuild a layout that puts everything in acircle puts everything in a circle in lines of JavaScript for the workletwith no external dependencies at renderengine speeds with as many elements asyou want that's me later I had disable notifications I'mglad that popped up so yeah as manyelements as we want and we can just kindof keep on going but wait there's more a[Applause]masonry layout cuz everyone likesmasonry this masonry layout is literallydependencies at render engine speeds youcan see it goes across one two threefour five six seven eight nine teneleven it's packing it all in there if Igo to my CSS if I want columns let's sayI want five columns now it's slowbecause the images are reloading everytime but I have a masonry layout withalmost no overhead and I can make itwith no padding in between now I've gotthis nice tight dense grid and that'sthat something everyone loves but I'vegot one more thing for you yeah you canclap for masonry layoutI've got one less thing how do we usethis in our design systems well makesure you layout we know how we use cuzwe can lay out cards forever now but howabout this this is a demo that kind ofuses everything that we've showntransitioning custom properties typed omcustom paint worklet and that circularlayout that I just showed you to createan animated circular navigation or dialpad navigation without any JavaScriptfor any of the animation all powered byCSS now the animation is gonna be alittle bit choppy because somethinghappened in Chrome Canary and it got alittle bit choppy since I last gave thisbut it looks pretty coolI think rightnow it's not as cool and I do that butif I do that again yeah so the paintworklet is animating an offset theoffset property and that's strong thatarc and it's animating it based on ourtransition now we can do some coolthings with this because it's all CSS ifwe do padding of but when I close it everything shrinksback in right now if I go really crazyI'll set for and now again this is JavaScript for the paint worklet it's lines of JavaScript for the circlelayout worklet and then everything elseis just CSS and transitions because thebrowser knows now knows what to do andwe're extending CSS through javascriptand you know what I think that's awesomebecause with Houdini the future of ourdesign systems and our styling is reallybright and we all really need to partyfor that because we get to add magic toour design systems thank you all verymuchso again that's the link to the talkshere's a bunch of other good resourcesHoudini glitch day is an interactiveintroduction to Houdini that you canplay with your going to need ChromeCanary with experimental Flags on andyeah the source code for this talk isavailable too if you want to dig intoall these demos thank you all[Applause][Music]
YouTube URL: https://www.youtube.com/watch?v=1W79T2ibd5Y


