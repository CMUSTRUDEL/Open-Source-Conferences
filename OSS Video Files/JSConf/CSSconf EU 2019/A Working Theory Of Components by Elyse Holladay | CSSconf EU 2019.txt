Title: A Working Theory Of Components by Elyse Holladay | CSSconf EU 2019
Publication date: 2019-07-16
Playlist: CSSconf EU 2019
Description: 
	Design Systems are our current model of making sense of the intersection of front-end code and design. With the tools we have today, what is our working model of a component? How do we define them, create them, and ensure they work at scale? In this talk weâ€™ll discuss how our tools affect our understanding, create a checklist of factors that make a component a component, and how to implement the theory of components with the tools you have at hand.
Captions: 
	[Music][Applause]good afternoonCSS Kampf my name is Elise and I work onthe front end core team at indeed commwhich is the world's number one job sitetoday I want to talk about our workingtheory of modern web developmentcomponents but let's start with anothertheory the law of gravity Newton's lawof universal gravitation states thatgravity a mysterious unexplained forceworks on all objects in the universeobjects attract each other based ontheir mass and distance more massiveobjects attract each other with agreater gravitational force and this iswhat sends the planets in their greatorbits around the Sun newton's principiamathematica was published in its publication the greatestmathematical minds in Europe usednewton's law to discover and provetruths about the celestial worldastronomers worked out sophisticateddescriptions of the orbits of theplanets called tables tables showedwhere the planets should appear in thesky and the calculations always matchedthe real observations but over timesmall discoveries begin to accumulatethat didn't make sensethe first observation of what wouldlater be known to us as the planetUranus didn't fit into the math someplanets like Jupiter seemed to be movingfaster in their orbits than in previousobservations and that couldn't bereflected in the math many began towonder if Newton's laws were notuniversal after all if there was a flawin the theory but not Orban Olivierlaverre ei was a French astronomer whowhile not an excellent observer was anunparalleled mathematician in posited that Neptune had to exist basedon the math of the orbit of Uranus LavarEA wrote to an astronomer here in Berlinjohann gottfried gala with the predictedcoordinatesand the very same night gala observedNeptune within one degree of wherelevare had predicted it should be inresponse to claims that Newton was wronghe wrote if the tables do not strictlyagree with the observations we willcertainly not be tempted into chargingthe law of universal gravitation withinadequacy in other words even if someobservations don't match the math weshouldn't immediately say the entiretheory is wrong in Lovera Hayes eyesthere was no need to toss out gravityaltogether just because there were somegaps in our knowledge at the time no oneeven knew how gravity worked even thoughthe math made sense variable Eve thistime passed we would improve upon ourunderstanding over the past understanding of the world of front-enddevelopment has changedwe've been iterating constantly on ourworking theory of how to design and codefor the web it's fitting to talk aboutthis history at the tenth and last CSScalm when CSS Zen garden came out inthe browser wars in the with conflicting standards wecollectively fell in love with CSS andthen chain came jQuery and theseparation of concerns reusability withCSS classes meant being able to changeour HTML without touching our CSS orJavaScript as we began to build web appsthese complex interactive structures ourattention turned to tools that wouldhelp us write more flexible code welearned responsive web design sasscomplex CSS architectures and newJavaScript frameworks in the gained powerful tools like NPM web packand react on the design side we movedfrom Photoshop to tools like sketchabstract and figma they're slowlynarrowing the divide between design andcode we were looking for better toolsfor reusability clarity andmaintainability we've used these toolsnot just to create solutions to ourproblems but also to create new tofools these tools are changing the waythat we conceptualize our work we'rebuilding on what we learned previouslyand filling in the gaps and the unknownsin the early calculating the orbits of every singleplanet he intended to create a completeset of tables that showed where theplanets would be in the sky at any giventimefirst he mapped out the actual orbit ofthe planetbased on calculations based onobservations next came calculations whatde Newton's laws predict the orbitsshould be and the observations and thecalculations should match Venus Earthand Mars were all correct one thoughobstinately refused to conform mercuryMercury's orbit shifts forwardincrementally each time as the planetwheels around the Sun its orbit makesits own gradual orbit creating a flowerpetal effect the shift is too large tobe explained only by the pull of Venusand Earth's gravity z-- levar EI and hisbook length report on Mercury wrote thatthe likeliest solution was a planetbetween mercury and the Sun providing anadditional gravitational pull he namedthis possible planet Vulcan Vulcan wouldorbit so close to the Sun you wouldn'tbe able to see it in the daytime andlike the Sun it wouldn't be in the skyat night in the years after astronomersall over the world observed Vulcan inJuly of America's West from Montana to Texasbecause the Sun would be obscuredgetting a clear observation of Vulcanwas the biggest prize during the Eclipsean American astronomer using a smalltelescope a set up of cardboard circlesin a sharp pencil plotted the transit ofan object as it moved across the Sun heand many others believed it was Vulcanthe math worked out it fit neatly intothe explanation ofCurry's orbit but over time observationsof Vulcan dwindled and people begin todoubt that it existed for years thequestion of Mercury's orbit createddiscord between astronomers we know nowthat Vulcan doesn't exist but peoplekept discovering Vulcan because it fitinto their understanding of the worldthe limitations of their tools andknowledge at the time kept the answerjust out of reach as an industry we toohad a gap in our knowledge how do webuild firm maintainability and scale weagreed that we're no longer buildingpages we're building systems we agreedthat we need components that areindependent and reusable we agreed thatwe need a single source of truth in codefor an easy authoring experience but howbased on our experience of the worldwe tried varying solutions and tools forsome CSS tooling and methodologies forothers javascript CSS and j/s new ideasare often criticized and dismissed CSSand JS was controversialit still is putting our CSS back in ourHTML was rejecting that separation ofconcerns that we had learned in the pastyou might build components for a web appwith a JavaScript framework maybe youwork on a component library or designsystem maybe you use functional CSS orassess and BEM or styled componentsmaybe use plain CSS and vanillaJavaScriptmaybe you feel stuck with your legacycodebase your cardboard circles andsharp pencils we're heads down in ourwork trying to find solutions we're notalways thinking about the big pictureand this causes conflict among us as westruggle forward to a betterunderstanding but we're still workingtowards the same core idea so what isour working theory of a component andhow can we solve for the values ofconsistency cohesion reusabilityauthoring maintainability how do we testthis theory with the tools that we havetoday we know that a component needs tobe three things it's easy to reasonabout its if I context agnostic dryindependent and isolated first acomponent must be easy to reason aboutbeing easy to reason about isn't onlythe amount of code or size or visualcomplexity something that looks simplecan be deceptively complex and somecomponents that are hard to code are notdifficult to think about a componentthat has too many variants will be morelikely to have bugs will be hard to testif all the variants work or when theyget used you might have too many propsand options or different styles for thecomponent in different contexts on theother hand too few options mean acomponent is pointless there's a spotthat's just right where the component isused for one or a few cases with enoughoptions to make it flexible complexityin a component may come from design orbusiness requirements or it may build upover time as developers add features ordesigns change if your project is likemine where many other teams usecomponents sometimes those teams needsdiverge at some point you may need tosplit a component up into smaller piecesthat are easier to conceptualize ifthere are common combinations you cancreate shared parent components forthose four component libraries gettingother developers to use componentsrelies on their ability to understandwhat the component is for often I seedevelopers say that they couldn't use acomponent because it didn't offer theright options that they needed sometimesthey're right but often they didn'trecognize the option was available acomponent must have all of its optionsand variants well documented in codeexamples and tests so that'sdiscoverable and easy to understand so acomponent that is easy to reason aboutshould be flexible enough to support itsuse cases without being unwieldy orconfusingsecond a component is context agnosticcomponents promised us reusability wewant to take a button or card or commentblock and use it all over our projectsto be reusable a component must becontext agnostic meaning it shouldn'tneed to know where it is to look orbehave properly to function properly andconsistently across contexts a componentshould not have logic that controlsfunctionality outside of itself itshould receive data down and sendactions up take for example a call toaction component it has a button whenthe button is clicked a modal opens itwould be easy enough to write code thatpops a modal on click and that will workuntil we want some other functionalityso instead the buttons should justbubble up an eventI got clicked and the application candetermine what to dowhen that event occurs styles for acomponent should also have a singlesource of truth whether you namespaceCSS with unique classes generate yourstyles from JavaScript or use functionalCSS you know what belongs to thecomponent what does it and where to findit don't rely on the markup structurethe contract between the parent markupand the component to define thecomponent Styles the components shouldhave styles that are flexible enoughthat it can live anywhere in afull-width parent in a sidebar or on itsown and you can let parent componentscontrol the layout like widths or gridif a component is supposed to look orbehave differently in different contextmake sure the logic behind those changesis well-defined it's possible thecomponent needs to be split into two orsometimes the best solution is not ashared component at all but implementingthat feature as a one-off so a componentthat is context agnostic will bereusable and flexiblethird a component is independent andisolated to be context agnostic acomponent must be independent andisolated but isolation of functionalityand style gives us more than just theflexibility to use a component anywherean independent component should havegood defaults like default textaccessibility settings and empty statesit should just work straight out of thebox this means it needs to import all ofits own dependencies we're familiar withthis pattern and JavaScript importingpackages as needed and this gives youconfidence in what is there and makes iteasy to test whether or not an importedfile is actually used a component beingindependent and isolated means it willlook correct in an isolated environmentit cannot rely on the presence of stylesfrom a parent container or a global pagecompletely isolated components means youalso have the ability to test withconfidence you can generate eachcomponent into its own page by itselfand run visual regression and unit testsisolation for testing means that yourcomponent tests only itself and doesn'trely on other page functionality to workproperly we know then that any bugs wecatch in that isolated environment or inthe component and bugs elsewhere arebyproducts of how the application andthe components interact and this makesus confident in the components qualitydevelopers should trust that componentswon't break their pages and it alsomeans we don't have to hobble thecreativity of our designers for the sakeof code predictability if you havecomponents that are understandableindependent and can live in any contextyou can now use other components bycomposition a component can import orreference another component in itsmarkup it may make style tweaks pastprops and change options data can bechanged in child components and eventsand state passed backup and so this isour current theory about the world ofmodern web developmentusing the tools they had and what theyobserved and the knowledge they hadVulcan was the best explanationastronomers in the Mercury's orbit and it would take almosttheory it's on his theory of general relativity hedoes a calculation to see what his mathpredicts for the orbit of mercury and itfits the core concept of generalrelativity is that space and time can bechanged by the presence of matter a vastmass like the Sun distorts space-time soMercury's orbit shifts because that'sthe path that has to take through thecurved space-time around the Sun withoutcurved space-time you need some otherobjects gravity to pull on Rectory withcurved space-time mercury is observedorbit makes sense but Hine Stein didn'tdisprove Newton's law of universalgravitation gravity still exists thetables of planetary orbits that lavera acalculated in the accurategeneral relativity updated ourunderstanding of the world it filled insome gaps gave us better measurementsand strengthened the theory that camebefore many astronomers worked asobservers they saw and recorded how theworld really was others like the very aand Einstein worked as mathematicianspushing at the edges of our theoreticalknowledge and you get to do both youmight not feel like you can innovate ifyou work for a big company or on an oldtech stack but the majority of us don'tget to use all the new cool technologiesI've worked on this theory of componentsand everything from PHP and sass toreact and even plain CSS for Javatemplateseven without the newest tools we areapplying this theory to our work yourproject has limitations and constraintsthe laws of the world we know what wewant components to be our theory so asyou write code how do you know if yourcomponent fulfills the theory yourparticular application of thistheory will depend on your particularprojects requirements and technicalconstraints and indeed my team puttogether a checklist that lives in ourprojects contributing Docs and thatdescribes how we build componentsdefining what a component should begives you a tactical way to test yourresults in the theory it outlines thethree high-level concepts I spoke aboutbeing easy to reason about being contextdiagnostic and being independent andisolated but it also contains a muchmore concrete list of what a componentmust do here's some examples to be easyto reason about a component must havewritten design and usage documentationas well as code comments for all propsoptions and variants it must have unitand visual tests so we can make andverify changes safely and it should havelimited variants that fulfill real usecases with examples of how and when touse them to be context diagnostic acomponent must work in all supportedbrowsers and devices including touchmouse keyboard and assistive devices itshould meet accessibility standards andit should look and function correctly inboth left to right and right to leftlanguages it should have no externallayout properties like grid float oreven margins that would keep it frombeing used in a variety of contexts andit should receive data down from theparent or page and bubble actions up toensure a component is independent andisolated it must work in an isolatedenvironment it must define or import allof its own dependencies includingJavaScript and styles and it shoulddefine the component namespace or a keyselector only one time in one place itshould have appropriate default textempty states and error States and itshould only affect itself and not relyon other components or the page forfunctionality this checklist makes iteasier for anyone who works oncomponents to do the right thingwith a checklist as a reference we canbe sure we've done everything necessaryto make a component that will work asexpected and be a valuable part of ourlibrary we keep the theoryand promise of modern web developmentclose at hand and our everyday work aswe build code tests and try newtechnologies we are observing how thetheory works and improving ourunderstanding[Applause]after formulating the theory of generalrelativity Einstein pondered what wouldhappen when a huge object in space wasdisturbed like two black holes collidinghe predicted that a cosmic event thatthis disturbs the fabric of space-timewith enough force should produce ripplesin gravity scientists didn't agree manybelieved that these ripples were justartifacts of the new mass that somewherethe calculations were wrong even if theripples were real they would be so smallby the time they got to us we wouldn'tbe able to detect them anyway at thetime many scientists didn't even believeblack holes were realthis theory explained many things but italso opened up new questions over thelast half-century there has been anexperimental quest to detect thesegravitational ripples that Einsteinpredicted an international team ofscientists has built a pair of colossalgravity wave detectors called LIGO totry and detect these ripples LIGO thelaser interferometer gravitational-waveObservatory took cost millions of dollars and the LIGOteams weren't even sure they woulddetect anything when it was done peoplequestioned doubted mocks them yet thelegal team is persistent because it iscrucial to think beyond today'sunderstanding of the world out in deepspace holes circle each other churning upspace and time until they crash andmerge into one enormous black hole anevent outputting more than a trilliontimes the power of a billion suns theblack holes collide in complete darknessnone of the energy exploding from thecollision comes out as light that energyemanates as waves in the shape ofspace-time as ripples in gravity anastronaut floating nearby would seenothing but the space around her wouldringwhen black holes collide they make ussound in December of a hundred years after Einstein presentedgeneral relativity LIGO detected thatcollision we heard two black holescollide ligo's discovery verifiedgeneral relativity as fact and changedthe way that scientists understand theuniverseLIGO not only changed our workingknowledge of the world they accomplishedone of the greatest feats of modernscience and yet again we have newquestions to ponder our work may notseem so grand what could be grander thanblack holes planets celestial motion buteven firmly planted in our earthly workwe too can think like scientistscontinually working to expand our theoryconfirm it and strengthen it we buildnew applications try new technologiesgive conference talks create librariesand design systems we are observing andcalculating what we learn will add toour Theory help us create even bettertools and propel us forward into a newworld so as we work together today andtomorrow and in the months and years tocome keep thinking beyond today'sunderstanding and on to tomorrow's thankyou[Applause][Music]
YouTube URL: https://www.youtube.com/watch?v=RObdwvLLVvM


