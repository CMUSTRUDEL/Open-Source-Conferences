Title: Class ðŸ¥ŠClash by Alex Tait | CSSconf EU 2019
Publication date: 2019-07-16
Playlist: CSSconf EU 2019
Description: 
	The debate surrounding functional CSS has some ready to dive in and others adamant that it introduces new and undesirable patterns into our code bases. In this talk weâ€™ll take a deep dive into the world of functional CSS and compare it to other OOCSS methodologies. Weâ€™ll explore the history of functional CSS and where it came from, and debunk or support the various critiques of this approach. Weâ€™ll refactor an application from a more classic CSS model to one that leverages the library tachyons.io and do some rapid prototyping in the browser with it.
Captions: 
	[Applause]hey everybody yeah that's my nameAlec state you can find me on theInternet at eighty underscore freshunderscore death I'm from Toronto Canadaany Canadians here a few of us yes and Iwork at a front-end consultancy they'recalled wrangle and we're having a littlehometown love right now the TorontoRaptors made it into the NBA Finals andwon their first game so lots to be proudof but we're also proud of our veryfirst Canadian competitor in RuPaul'sDrag Race yeah so Brooklyn Heights madeit to the finals which happened lastnight no spoilers a little bit about meI am a front-end web developer and thisis my family since people are showingfamilies today I have a human baby and afur baby Avery and Trixie but we're nothere to talk about that we're here totalk about functional CSS and all of thefeelings surrounding it so what isfunctional CSS just to get a lay of theland who here has worked with functionalCSS okay that's like maybe you all are gonna benefit from this talkessentially it's just a CSS paradigmit's so it's a way to handle yourclasses so the classes themselves shouldbe small global reusable single purposeand immutable which I'll put in quotesbecause it's not that you can't changethem but the idea is that you don't andthe class names themselves shouldindicate their visual or structuralpurpose so you can think of them likeLego blocks each class does one thingand one thing only and the class namedescribes what it's doing so with Legoyou might have like agreein two by six you wouldn't say thisgreenpeace is part of the wing of myhelicopter and just some sample classesan example will be w be a width of black background color black so each oneis only doing one discrete piece andwhat that looks like in your markup iskind of long strings of classes that youcompose together to build your UI so incase you can't see the this div has Wa media query so honest on a mediumsized screen it's gonna be L that's gonna be screen flex would be display flex itemcenter would be a line item center BGblack will be background black and PL would be a padding left compose all these things together tocreate the UI and let's talk brieflyabout the name functional CSS like wheredid this come from and how is itrelevant so functional has manydefinitions but there's a couple thatare sort of useful for functional CSSthe first is ever having a specialactivity purpose or task relating to theway in which something works or operatesso it's how something works so what'sits purpose and a second is designed tobe practical and useful rather thanattractive and you'll see you know fromthe markup I just showed and from someof the complaints people have yourmarkup isn't pretty but functional CSSisn't designed to make your markupbeautiful it's designed to be useful andpractical and what's a function we'reall web developers here and there's lotsof things that a function can be butwith respect to math and code it'sessentially a situation where you havean input and an output and somethinghappens in between and you want to beable to predict your output based onyour inputso what puts the function in functionalCSS rather than the classes beingfunctions I like to think of the markupitself as being a function so the ideais you're you're inputting these classesand you can predict what the renderedoutput is going to be so if you think ofthe markup is the thing you're inputtinginto and then whatever's rendered on thescreen as the output and any functionalprogramming fans so for those who lovefunctional programming in JavaScriptthere's a lot of familiarity so we havethe concepts of immutability so with ourfunctional classes we want to declarethem once globally and not change themsingle purpose so much like a functionalprogramming function it should be doingone thing so the classes do one thingthey're reusable so you declare them ona global level and then you use themthroughout your code base and they'recomposed so when you're doing functionalprogramming you're you're composingfunctions and with functional classesyou're composing them together and thereshouldn't be any side effects so withfunctional CSS you shouldn't be havingto predict what the Cascade will do orsome specificity weirdness becausethings are global and immutableyou shouldn't have unperturbedunpredictable outputs so just to makesure we're on the same page about whatfunctional CSS isn't for today's talkI'm not referring to CSS componentlibraries or frameworks meaning thingslike bootstrap or angular material wherethere's full-on components given to youthose libraries often do leveragefunctional CSS as a part of what theyoffer but I'm just talking about theclasses themselves as discrete CSSclasses not full-on components in sincethe word functional is in there I justwant to be sure everyone knows we're nottalking about CSS and j/s today love itbut that's not our subjectso people have a lot of feelings aboutfunctional CSSthere's the lovers and the haters and Iwant to look at both sides of theargument today so let's talk about whatpeople don't like so the HTML can beugly you can have these long strings ofclasses in line in your markup peoplereally don't like that and there's a lotof comparisons made to inline Styles butI want to make sure everybodyunderstands the differences so withinline Styles you can write literallyanything and it will take precedenceit'll it'll override things whereas withfunctional classes usually if you'reworking from a library you're going witha system so you're not just writinganything willy-nilly you're pulling froma discrete set of values that havealready been defined for you so there'sa lot of structure involved inlineStyles don't support media queries mostfunctional CSS paradigms do inlineStyles don't support hover or focusStates functional CSS does and inlineStyles can only target one element at atime so you're directly writing it onthe element whereas with functionalStyles your your you can use theseclasses on multiple elements anothercritique is the separation of concernsso there's a lot of thought out thereabout how styles and context are incontent need to be separated so yourHTML shouldn't be concerned with yourStyles that's kind of where semanticsclass names come in the idea is that ifyou're if you're describing the style inyour class name that's that's thiscoupling things that's coupling yourdesign thinking with your structuralthinking yeah so essentially they theydon't want markup to be concerned withstylebut there's kind of this dependencydirection thing that happens whereeither your markup is depending on yourStyles or your CSS Styles or dependingon your markup because when you havesemantic class names that might saysomething likeand a whole bunch of styles that's thentied to the structure in the in HTMLversus having HTML with class names likeFlex where you're you're tying things tothe design so it's a dependencyDirection choice you don't really everhave this separation of concerns andit's kind of a myth and there's a greatarticle written by Adam Lawson who isone of the creators of tailwind and hedebunks this really well and is reallyworth reading but this quote kind ofsums it up my markup wasn't concernedwith my styling decisions but my CSS wasvery concerned with my markup structureso another critique is that it's not drydo not repeat yourself for those whodon't know the dry acronym so yeah youare gonna be reusing strings of similarclasses like there's patterns thatyou're going to use over and over againand that is a critique of functional CSShowever where you gain is that you'recutting down dramatically on the numberof times that you're writing the sameCSS rules like drastically cutting thatdown so you might be a little more likewet in your in your markup but you'regoing to be extremely dry in your CSS sothat's kind of a false critique againit's it's choosing where do you want tobe dry and then just the general conceptof semantics class names people reallyreally like semantic class names todescribe the structure and you know likewith sass you can get into nestingthings and and really paralleling youryour markup structure and just to makesure we're all on the same page this isan example of a semantic class namewhere I have a container around somedrag queens it's called the queencontainer and I've got some propertieson it and it's really tied to thestructure of my document so in this casewith semantics class names you'redescribing what it is not how it worksor how it looks whereas a functional CSSyou're very much describing how itfunctions and how it looksand I want to talk about the wordsemantics semantics means to givemeaning so when you have a semanticclass name you're describing the contentthe structure of the HTML and that's themeaning but when you have functionalclass names like flex or red being thecolor red there's still meaning it's notthat it's unsymmetric it just has adifferent meaning and when we thinkabout the purpose of classes reallytheir function is to be a hook for aJavaScript or for styles the job of aclass in in my opinion or in the opinionof many isn't isn't to describe thestructure of your document becausethat's already done in your markup somaking it describe your structure that'sthat jobs already been taken care of bythe structure itself so what problemsdoes functional CSS try to solve asRachel mentioned this morning CSS haslots of problems we all have dealt withfrustrations we all love it too or itwouldn't be here but I think there'skind of four main problems thatfunctional CSS tries to address probablythe biggest is performance and CSS bloatso there's the actual performance aspectwhen you cut down the amount of CSS thatyou're writing you're delivering asmaller bundle it's pretty straight upbut there's also the the like dev timebloat where you don't have to be writingthe CSS so unlike a selfish level it'skind of nice to just know how theseclasses work and be able to put themtogether and not have to spend a wholelot of time writing CSS on theperformance level Adam Morris who's thecreator of tachyons which I'll betalking about a little bit todayhe wrote this great article called CSSand scalability highly recommend as welland he looked at a lot of large websitesthis is a couple of years old so I don'tknow how current the statistics are butPinterest for example has more than onemegabyte of uncompressed CSS spread outover five files the home pageI'd rather just try and send my usersthe thing where a lot of websites and andapplications have to load all of the CSSin order to view a single page whereasthey don't necessarily have to load allof the HTML to view a single page sohaving a little bit of bloat in yourHTML is is probably still a lot cheaperthan having a lot of CSS and just toshow in Adams article he clicks to somegist where he shows repeated propertiesso from Pinterest he looked at wherethey wrote display:none over and overand over again and this is just a smallscreenshot but it's actually two hundredand sorry six hundred and twenty-sixlines of code and it's just just fordisplay:none perp interest so if theyhad leveraged a functional class ofdisplay:none they would have written itone time so scalability is definitely athing when you are writing custom CSSall the time you probably aren't goingto memorize every single class that youwrote anywhere and look for ways toreuse it and you're probably not gonnasearch your entire code base foreverything you could possibly reusewhich means that scaling out a codebasemeans you're just writing a lot of CSSyou're you're having to continually growthe stylesheet and that means that notonly is it harder to scale as adeveloper but your user then has todownload all that extra CSS anotherthing that can happen there when you'rewriting a lot of custom CSS isespecially on shared code bases likeprobably a lot of us work on enterpriselevel applications with multipledevelopers collaborating on git and thenyou get into inconsistent values andpatterns functional CSS one of the mainselling points is that there are systemsthat you follow and you agree upon youdon't necessarily have to buy into thesystem of a library you can create yourown or you can customize a library buteither way you're you're sort ofagreeing on a on a standard set of whatis allowed in your codebaseand then yeah so decoupling styles andstructure CSS that's tightly coupled tomarkup isn't easily reusable if you havesay you have a component and you've gotyour queen container for example andyou're describing everything it's reallyhard to reuse that somewhere else likeyou have to put a lot of effort intoabstract things it's not impossible youabsolutely can but functional CSS makesit really easy to decouple these things[Applause]so going back to Adam Morse and Legowhen I used to build things with LegosI never thought oh this is a piece foran engine block I thought oh cool thisis a I want with it and that is really thethe key concept here and then this onefrom like a selfish developer timeperspective you're minimizing contextswitching so when you get reallycomfortable with functional styles youcan just write them directly in yourmarkup and you can really predict howit's going to turn outyou might occasionally want to refreshyour browser and take a look at thingsbut you're not constantly togglingbetween a CSS file and a markupstructure it's just really fast to kindof put things together once you getcomfortable and know how the pieces workand similarly when you're in the browseryou can just be writing some Stylesinline in your in your markup and youdon't even have to get into the CSS devtools if you're using functional Stylesone more at Morse code that that articleis so good so it's CSS and scalabilityin a great system there's a two-waystreet of information if you look at theCSS you can tell what will happen if youlook at the HTML you know what the codewill do so the idea is here that if youlook at the the functional styles thathave been defined you know what each onedoes a class of red is going to be colorred there's no questions there and thenwhen you look at your markup like I knowwhen I see something that has papadding all four I know what you know ina Tachyon situation for works out to Ithink it's one Ram or something and Ijust get you seethings and I can predict what they looklike yeah I'm not here to sell tachyonslike I don't work for tachyons but I dowork with tachyons and I find it to be areally great library to play with andand it does work for me in production Iwould recommend checking out their docksbecause they're really really helpfuleverything is kind of visually shown Oheverything shows you examples of how towrite it in the markup what each classdoes there's visual layout examples thedocks are really great so one of thethings that's awesome about tachyons isit very much as a scale based system sothere's a font scale a type scalepadding scale margin scale everythingkind of breaks down into sort of designsystem scale thinking so let's check itout we've seen elephants and dogs andstuff but I'm going to show you dragqueens so I made this app it's some ofmy finest work really like super proudof this so this is just a grid of imagesyou can resize it it's responsive reallyit's just beautiful yeah so I built thisfirst using sort of a more traditionalapproach so this is not a react app it'snot an angular app it's notcomponentized at all it's juststraight-up HTML and CSS just toillustrate the point here so you can seehere in the markup I've got the creamcontainer around things there's aheading with a div around it there'sindividual images for each queen andthen in them in the CSS everything is iswritten out in sort of the moretraditional style with semantic classnames and towards the bottom we've gotsome media queries to handle theresponsiveness of the layout and herewe're going to redo it with tachyonsso first thing we're gonna do is bringin the CDN I would recommend importingthe library if you're gonna do it inproduction but just to play with the CDNis great we're killing our old markupand bringing in tachyons markup so youcan see we've got some familiar classesnow flex with queries on the images with and then this is the fun partCSS how gone all of it delete all thethings and then just you know I'm beinghonest I renamed the title to dragroyalty refresh in the browser and this is thesame site and it's still responsive andthe layout is exactly the same with zeroCSS not zero CSS functional CSS so yeahwhat do the lovers have to say like Ijust showed you I don't have to writeany CSS this is a false dream this isnot the situation you are gonna have towrite CSS and I think if your motivationto get into functional CSS is that youdon't want to learn CSS that's going tolead to problems and pain in myexperience on projects where a where Ido use functional CSS I'd say components I'm still writing somecomponents go up CSS and there's stillsome global CSS that I'm writing toaffect the whole code base so it's notlike a Silver Bullet only solution butit's it's cutting down dramatically onthe amount that I have to write and thenthe bundle size - because tachyonsitself is only so small there's an article you can findthat's called ever need and that's a good one but Ialso think that that's not really thesituation in my experience yes you cansave a lot of bundle size by usingtachyons but you are gonna have to writeyour own CSS there's gonna be a good agood amount of itthis is very true I can work so fastonce I got used to functional CSS whichrealistically took me two or three weekslike it wasn't a steep lean learningcurve I just find that I'm I'm I'mwriting it really fast and I'mprototyping in the browser super fastit's just made our workflow reallyreally smooth reuse all the things thisis very much true so you're reusing thisglobal stylesheet that you've eithercreated yourself or pulled in from alibrary and then you can take this onestep further by component izing yoursystem where you know each component hasa string of classes but you're notduplicating that everywhere you're justreusing that component so you're notnecessarily having to rewrite the samestrings of classes constantly and thisone is super super awesome I can thinkin design systems so you know havingworked closely with designers who arealso familiar with with functional CSSI'm able to sit down with them and belike okay how do you you know how do wewant to customize the scale do we likethe scale cool now that we're on boardthe scale how do we want to use it andyou know somebody can just ping me onslack and be like I need that to beactually like margin level five insteadof margin level four and it's just likethe easiest communication flow becauseyou're already thinking in the samesystem and of course that's possiblewith other systems is this is just onethat works well so so what do I do inproduction on a code base is where weare using functional CSS which you knowis client specific I do work at aconsultancy so I have differentdifferent clients with different comfortlevels with this type of stuff but whenI do I use the functional classes asmuch as possible and it reach for thosefirst before I try to write my own CSSwhich in the beginning requiressearching the docs a lot and gettingcomfortable but eventually you reallyjust know what's up and then youcustomize the library is needed youdon't have to take it out of the box II'm sure to componentize as much aspossible so that I'm not having torewrite the same things over and overagain both with the markup and the CSand then when I have to I'll componentscope classes so if I don't thinksomething is reusable but it is aspecific situation where I need to bejust doing something outside of tachyonsI'll components go bit first before Ireach for the global scope and then whenyou do want to get into things that arereusable through your code base butdon't come from the library of courseyou're going to need some global CSS forthat in those situations if I'm going towrite utility classes that might bereused everywhere I try to remember toprefix themso in this app I might call it like DQflex you're like pre fixing things just to besure that there's no weird interactionwith the functional library in casethere's a random class you're not awareof prefixing is just a nice way toprevent that so just a few cautionslearn CSS I don't think I have to preachto the choir here but as I said if youthink this is a shortcut to not learnCSS you'll feel the pain as soon as youhave to write your own and you don'tunderstand what's happeningso definitely learn CSS and use this asa tool within your your palette ofthings you can do a CSS this one I'veseen don't import the full library toextend a class from it so there was acomponent that I was working on for acomponent library so it was a drop-downthat was going to be used all overmultiple products for a company andsomeone had imported the entire libraryof tachyons just to extend a class likemargin top two so tachyons is means every list item in every drop-downon every product has just just don't do that if you feel likeyou want to be extending things maybeit's a good time to be writing your ownCSS component scoped and this one'sreally big CSS or functional CSS issuper exciting and it's really fun toplay with but don't be the developer whogoes home and then rewritean entire collaborative code basewithout buy-in from your team if you'reinterested in bringing it into yourproject and I will say I've used inproduction a lot and it's great makesure your team is on board it's a hugecode style change and you don't want tobe doing that stuff and beingheavy-handed and just kind of demandinga new way what I'd really recommend isthat you go home and try it out on somelittle silly side project make some dragqueens or whatever and then show yourcolleagues and and see if they'reinterested because yeah that can bereally disruptive to a team vibe to justdogmatically make a decision and yeah doyou this is not a silver bullet it'sonly one possible way of handling yourCSS there's lots of cases where I stillwrite custom CSS and I'm very gratefulthat I know it and love it try it outdon't push it on people if your teamisn't ready be chill but yeah if youdon't like it you don't have to like itlike nobody has to do anything it's justa cool thing to check outI want to thank CSS comfy you for havingme today and everybody here forlistening and I want to thank all of thepeople who've written great articlesabout functional CSS because I readabout talk there's lots of great stuff you canfind online by just googling the subjectfeel free to hit me up on Twitter andI'll be sharing my slides later todayThanks[Music]
YouTube URL: https://www.youtube.com/watch?v=vJvgXPCVo30


