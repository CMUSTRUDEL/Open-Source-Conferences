Title: Using DevTools To Understand Modern CSS Layouts – Chen Hui Jing at CSSconf EU 2019
Publication date: 2019-05-31
Playlist: CSSconf EU 2019
Description: 
	Flexbox, Grid and Box Alignment are the cornerstones of modern CSS layouts. They introduce behaviours that might seem confusing if you don’t completely understand how the browser inteprets the CSS values you assign, e.g. sizing with Flexbox, or the various options for sizing tracks in Grid. This talk will explain a variety of modern CSS layout techniques through live demonstrations via DevTools, and provide real-world use cases of how such techniques allow designs to better adapt across a broad range of viewports.
Captions: 
	[Music]hello Berlin it's such an incredibleprivilege to be here and the anniversary of CSS convey you now I washere in Berlin at CSS convent je s Contefor the very first time in my life lastyear and it was one of the most amazingexperiences of my life so I really wantto thank the organizers for bringing meout again and organizing thisspectacular event now I know Idiscovered from a colleague of mine Alexlakatos somewhere in the audience thatthe dev tools console can totally bestyled up with CSS case in point thisglorious CSS only talk title in theconsole so my name is Wei Jing and I'm adeveloper advocate with next MOU ifyou've never heard of us well Alex builtthis coffee app that some of you will beusing tomorrow to order coffee mycolleague Gavin will also be speaking atJS conf we're really friendly people andnext Mon does communications api's andDuke just come say hi if you've got aminuteright I'm also an avid lover of emojisand this these pretty much sum up whatWho I am as a person if you're curiousabout any one of them you can ask meabout them later and lastly just toprove a pointthat Firefox supports the most CSSproperties in the console I mean it'svertical writing in the console so Idon't know about you but I love it now[Applause]when I started building stuff on the webI quickly realized that aligning stuffhorizontally was way more easy thanaligning stuff vertically and I startedthinking about why that was nowhistorically web technology started offfrom text document beginnings and a lotof the initial HTML tags and CSSproperties focused mainly on textformatting for languages you know likeEnglish and French that were laid outpredominantly from horizontally from topto bottom so boxes on the web and theweb is made up of boxes right boxes onthe web behaved very similarly but thatwas clearly insufficient for what mostdesigners and developers had in mindwhen it came to doing layout on the webso when I refer to modern CSS layoutsI'm talking about layouts that are builtwith Flex box with grid with the boxalignment properties becauseconceptually these are the propertieswhich were crafted especially for doinglayout on the web they were verydifferent from the prior techniques thatwe had like say you know HTML tables forlayout or even floats because those weremore clever uses of properties whoseintended purpose was not for layout tobegin with but resourceful developerslike yourselves found plenty ofworkarounds and hacks to work withwhatever features were available at thetime and today we have a much morerobust tool set for doing layouts on theweb so the first thing I want to covertoday is content-based sizing or what Icall letting the browser do more now theconcept of automatic sizing has alwaysexistedon the web I mean browsers have alwaysmanaged to figure out how much spacecontent should take up without anyintervention from us the content justreflows without overlapping but what isintroduced in this relatively newerCSS spec called CSS intrinsic andextrinsic module level three is that itintroduces some keywords that allow usto apply automatic widths on to ourelements on the page so now the sizingproperties of width and heighttake in three additional keyword valuesnamely min content max content andhopefully better support in the futurecontent so if we look at this firstblock of content here I've sized themwith min content and I hope you can sortof see I'll just pull this up a bit it'ssize with min content and min content isthe smallsighs that a box can take which doesn'tlead to overflow so inline content if Icould point your direction here you'llsee that the inline content will breakinto multiple lines now line breakinghas a lot more new ones than most peoplegive it credit for because depending onthe language that is being usedon-screen min content is going to end uplooking very differently and the lineswill break differently as well for a lotof languages moans mostly thelatin-based scripts like English orGerman line breaks will occur at wordboundaries where spaces or punctuationare used to explicitly separate thewords one key thing to note is that thebrowser will not break words so in thisinstance the word content plus the . atthe end is treated as a singleunbreakable entity and that is that iswhy the this particular box size thewidth ends up being the this width ofthe content plus the . but for languageslike Chinese or Japanese the line breakis per character usually but not alwaysbecause there's there are rules aboutcertain characters that they are notallowed to start or end on a line andEast Asian languages also use somethingknown as a full width punctuation solet's say I add a comma here so a fullwidth punctuation will take up theamount of space as a standard squarehand character so now the min contentbecomes also some Southeast Asian scripts likethigh which do not have spaces betweenwords so if you look at the second setof content that is sized with Maxcontent and let's talk about Max contentfor a bitmax content is a boxer's ideal size in agiven axis when there's unlimited spaceso usually what's going to happen isthat the content is going to take up asmuch space as required to lay itself outon one line without breaking so if youlook at the thigh sentence here you'llnotice that no spaces so if you don'tread I and I don't know if anybody beatsChi in the audience you probably won'tknowwe're where the words gonna break butthe longest word in that sentence isPriok right here and that's what ends upbeing the main content of this bylanguage block so now fit content if youcan see here unfortunately it's notsupported in the browser because if youlook at it the inspector is gonna tellyou oh hey sorry invalid property valuebut the content does work in a gridformat in context and so that's whatwe're going to be looking at with theselast three pieces of content now I'vegot three languages and fit content isnot a fixed value like the previous twokeywords of mean content and Max contentit is a range where the minimum value ismin content while the maximum value iseither the max content value or thevalue that you put inside this functionwhichever is smaller so this makes moresense if I show you what's going on nowI think it's better to look at thesecond and third because they've exactlythe same content so if I shift this andwe run out of space it's gonna shrinkshrink shrink until it's the maincontent width for both but if we expandit it will grow until so the value thatI've used now here is going to be really small take my word for it that'scontent as well but if I change the fitcontent cap to something slightly largerI'm gonna change it to grow some more you'll notice that itdoesn't it doesn't reach stops at the max content in this caseit's so that's how these three content-basedsizing values work now the next thing Iwant to talk about is flexboxyou know the layout model where no oneknows exactly the size of anything buthopefully I can help shed some light onthis apparent mystery now when we wewant to learn about flexbox Firefoxreally shines through because as of nowit's the owna browser that has a flexbox inspectorso we can find it by going to the layoutpanel and you can toggle it by clickingon this toggle here you can also chooseto click on this I would call it a tagmaybe in the inspector and what happenswhen we toggle it is that it will showyou the outline of each of your Flexitems and any free space available asthis kind of a texture thing and if welook at the layout panel they also tellyou the Flex direction and the wrapstatus but more importantly the FlexPark inspector will tell you what itdoes to flex items when they grow orshrink and we'll cover this in moredetail in the next couple of examplesand one thing I want to remind everyoneis that the specification actuallyrecommends that we use key word valueson flex items because they cover themost common use cases and they reset thevalues within the three flex flexproperties appropriately so what's goingto happen is that these key words areinitial none auto and a positive integerwhich gets resolved to the Flex growfactor so initial is the default valuefor Flex items if say I set a dealdisplay flex on the parent and then Idon't do anything to the children itgets a value of display flex and we cansort of figure out what the browser doeswhen it encounters such keywords bygoing to the computer tab and then youturn on browser styles because these arestyles that the browser sets we neverexplicitly set them you can filter forflex and what you'll find is thatthey'll tell you oh flex grow factorzero flex rank is one flex basis is autowhen the Flex values initial if I changethis to something else let's say flexnone right which makes your flex itemscompletely inflexibleand you go back to the computer tab willtell you that oh now Fred flex go isyour flex shrink is now also zero andauto and so on so this is pretty usefulif you want to figure out what thebrowser's actually doing the exactalgorithmthe browser uses to calculate flex itemsizing is fairly complicated but it isoutlined in the specification if you'reinterested now I think the sizing getsconfusing until we get a clearerunderstanding of what's going on withthe Flex basis property specifically forfor example if I put a fixed value of ahundred pixels as the Flex basis it'snot surprising that some people willexpect to see a box of a hundred pixelsbecause we're very used to being incontrol of our sizing instructions butflex basis is actually the startingpoint from which the size of the box iscalculated the key word key to rememberhere is the starting point because ifthe Flex item is allowed to grow orshrink odds are the final size will notbe a hundred pixels so let's take a lookat this next example it's a rather basicexample and if you just look at it onface value it seems like the browser'sallocating space very arbitrarily maybebased on content but so let's break downexactly what's happening so a reminderhere is that remember the browserdoesn't break words right so here we'vegot two Flex containers and both of themhave a display Flex set on the parentcontainer nothing on the children whichmeans they have a flex value of initialthat resolves to that it's not gonna grow beyond whateverspace is required so this space it won'tgrow to fill up the space and won't growto fill up the space because the Flexgrow you don't know we do not allow theFlex item to grow but it does have aflex shrink value of one which meansthat if there isn't enough space all theitems are gonna start shrinking at thesame rate so the moment I hit this withboth the second and third items aregoing to start shrinking so by the timeI hit this this sort of a layout that wesaw just now you'll notice that thesecond item in the in the set hasalready shrunk but the one here has notshrunk at all and that's what that's thereason why even though there's exactlythe same content the sizing is differentnow with a flex basis of auto what'sgoing to happen isthat this value resolves to contentwhich is an automatic size based on thecontent within the Flex item andtypically this is equivalent to the maxcontent size so when there is noexplicit with set on a flex item and theFlex basis is also set to auto thebrowser is going to use the content sizeas the starting point to calculate thewidth of the Flex item but if you havean explicit with set so I'm gonna dothat for this particular item I'm gonnaset a width of starting point for the for thecalculation of the Flex item and theflexbox inspector will tell you this itwill tell you oh heybase size Flex basis set the Flex basis takes precedent trumpseverything and now you'll tell you thatoh the starting size now is so that's basically how it works now ifyou look at this the first columnnaturally cannot shrink anymore becauseyou know that's the main content of wordbut if we shrink both items will startto shrink together but eventuallybecause there's exactly the same amountof content in both the second bothsecond items they end up being the samemain content at the end of the day andthe next the next bit I want to explainis the difference between a Flex basisof OTO and a Flex basis of B this results in the size of your Flexitems behaving rather differently so nowagain I have two sets of this time they both they have the samecontent they match in content both setsof Flex items are allowed to grow andshrink except that they get differentgrowth factors so for the first item thegrow factor is factor is distinction is that Flex basis is autofor the first set Flex basis is the second set so what happens nowis that the available free space is forthe first set of items is calculatedfrom the total width of the container -the width of the content in all threeitems so this bit of space here and thisbit of space here is the available freespace so this is easier to look atnumbers in this instance so when I whenwe select this it tells us that oh somethe Flex item has grown and it has grownby say about pixels so there's some sub pixelrounding error so it may not be exactlyexact but you know fine so this is the first this is theamount of free space that the browsergave the first item if you look at thesecond item it's about exactly double the amount of free spacegiven but if you look at the final sizeit's about not double of each other if you'd likethe effect of having a flex item that isdouble oven and another you'll have toset the Flex basis to zero which iswhat's going to happen in this secondset here when you set the Flex basis tozero content size is zero so the amountof free space that the browser startsallocating is actually the width of allthree the width of the total container -whatevermain content width is for thisparticular third item because that's theamount that's as small as it's gonna getthe browser's not gonna not gonna breakwords so free space is calculated hereand all of this space is up for grabsso if you look at this it theflexibility the Flex grow is about first item so if that's the effectyou're looking for you probably have tolook out for your Flex basis and that'sthat's something that I wanted toclarify another thing another usefulthing with these new modern layouts isthe ability to use box alignmentproperties to align itemsagain we're gonna turn on the Flexoverlay so we can see what's going onturn it um and the flexbox inspectoragain allows us to visualize the spaceand how it the free space is distributedamong the items so box alignmentproperties were actually meant to beused across layout models even thoughfor now they're only applicable for flexand grid it's written in the spec thateventually block formatting contexts canalso use them so look out for somethinglike this in the future hopefully now mytrick for remembering which propertiesI'll apply to each axis is that Ipersonally I associate the word justifywith like text processing text editorslike Microsoft Word where they got thosefour icons in the toolbar and that usedfirst to shift text around in ahorizontal axis so for a language likesay English or German when I see justifyI think oh that's the direction thattext flows and because they're only twoaxes right so naturally the other wordwhich is a line goes along the verticalaxis that really helped me remember whowill help maybe it helps you remember Idon't know but when we're using flexboxonly four out of the six availablealignment properties are availablebecause justify items and justify selfdo not applythey are meant to justify a box withinits containing block along the main axisbut when you have a flex formattingcontext this more than one item in themain axis so it's a really work what wecan use though is justify content sowhat justify content does is that itallows us to adjust the Flex items alongthe main axis so in this particularinstance is the horizontal axis andthere are two categories of values sowe've got things like Center and andthese start Center and end these arepositional keywords which adjust theFlex children's absolute position withinthe Flex container and then we we alsohave the space set space around spacebetween and space evenly and thesedisperse the extra space between theFlex children now when it comes to thecross axis or the vertical axisthe items are stretched to the fullheight of a flex line the moment youapply a display flex on the parent sothis is these are not the originalheights of my items if I want to seewhat the original heights are I'm gonnaapply a turn this off gonna apply aalign itemsproperty let's do end these are actuallythe original heights of my elementsright and one interesting value that Idon't see used very often is baselinebecause if you have something like whatI have here it's a variety of sizesvariety alignments a variety of fontsizes you see that the text is kind oflike mountainous and it's pretty hard toread so if you have say text within flexitems that are related to each other andyou want your audience to say comprehendsomething from the words you couldconsider using baseline and it makeseverything a bit more readable I thoughtthis property this value wasparticularly interesting and one morething is align content so what you cando is say your Flex container is largerthan the size of your Flex lines I'mjust put an arbitrary value of say H right so you're gonna get theseunsightly gaps and what the alignedcontent property does is that it allowsus to pack the Flex lines so if I set avalue of say star it sort of packs allyour flex lines up to each other ifthat's the effect that you want and thenyou can sort of shift the entire blockalong your Flex container as well sothese flex a lot these box alignmentproperties are really handy when itcomes to aligning boxes along a verticalaxis which is something that was reallychallenging in the past and now let'scover some common use cases this is Iknow this is probably an example thateveryone has shown but I want to show itbecause I really like it and that isOttomans again they are your friend ifyou had one item in your Flex containerinstead of using the box alignmentproperties you can just set a margin ofauto to Center it one lineyour problems because unlike in thecurrent implementation of margins in ablock formating context using marginauto well center the item vertically aswell and if you have an additional itemso let me replicate box in box and whenI highlight it you'll notice that it toohas an equal amount of margin around itright so this is potentially an easy wayof sort of aligning your stuff likecentering your items now more common amore practical use case I would say islike a navigation bar where sometimesyou need in this end link all on itslows lonesome on the right and ratherthan struggling with you know floatingleft floating white right whatever youcan just use a margin-left:auto to kickit all the way to the right and call ita day you can also make use of thealignment properties to make sureeverything is centered vertically soit's like a two line maybe three linefix for a very common design use caseand then there's also this cut cut stylelayouts because you know everyone likesto design cars these days Rachel did avery expensive demo earlier so my pointhere is just that you can change theFlex direction whenever necessary so forexample this car I've set the Flexdirection to column and if you like thisbutton to sort of kiss the bottom of thecontainer what you do is that you wouldwant to grow your main content and thenthat works of course like Rachel saidit's probably better to just use subgrid but if you can't use some greenthen this is potentially a good solutionfor another common design that we haveto build most of the time in our dayjobs and now I think I'm running out oftime so moving on to the next thing Iwant to talk about this ratherfascinating thing that I discovered whenI was playing around with CSS modern CSSlayouts is that flexible sizing or whatI call responsive design powered up it'swe've covered some flexible sizing unitswhen we talk about flex and all thesesizing units are also available in gridandwhat green also introduced us is thisthing called fr unit which is a fractionof free space it also introduces amin/max function which is a range ofvalues so with this with Fr with min Maxwith fit content and auto we now have aset of values that allow us to havevariable rates of change previously whatwe've done is we've always used relativeunits like percentages or maybe thenewer viewport units but the limitationis that they make all your elementschange size at the same rate so I'mgonna show an example so this is a thisis something that size with percentagesso the width of my cat picture is percent while the width of the contentis within a very limited range so from hereto maybe here it's kind of okay but ifyou go any smaller than like you knowthe image is too small the words areweird and then when you go big like nothe image is too big the words are toosmall so this is kind of a limitation ofhaving the same rate of change for allyour itemsso what flexible sizing I find extremelyinteresting is so to explain it I'mgonna do some isolated use cases sofirst thing let's compare our unitsversus auto now because rachel hasalready covered how useful the gridinspector is so I just want to reiterateher point this morning is that if you'regoing to be playing around with gridwhether you're just starting out oryou're already using it for productionyou know Firefox probably is your bestbet because of the grid inspector andagain you can toggle it by clicking thegrid tag or you can go to the layout andthat's where you get to select because Ihave tons of grids you get to selectmultiple grids if if you're usingnestande grids or like multiple grids onthe same page this is pretty useful foryou to check so that's the inspector butnow we're actually going to talk abouthow these variable sizing units behaveso green this is the legend green SFRblue is auto and like I mentioned fr isa fraction of left over space in a gridcontainer so whenever there is extraspaceanything sighs with Fr is gonna take allthe content first but it's also thefirst to have space taken away whenthere's not enough space Otto will takeup as much space as necessary withoutbreaking lines so it's kind of like maxcontent but not as rigid so both ofthese values they actually do take upfree space when it is available now thedifference you can see the differencewhen they're there they work together sowhen there's fr fr takes up all theavailable space and Otto just you knowstays in its own lane like max contentand that's fine when there's not enoughspace however so now I'm referring tothis third set of content fr is gonnashrink first it's gonna keep shrinkinguntil it hits its minimum size beforespace starts taking getting taken awayfrom Otto so that's the difference inthe behavior at the end of the day theyall still shrink to a minimum size ofmain content but the Otto will hold itswidth while all the free space isabsorbed and taken away by fr sizedcolumns first that's the one thing tokeep in mind the second set of valuesthat I want to compare is actually fitcontent and min content so again it'sorange versus gold so fit content andmin max actually behave very similarlyin that they are both a range of valueswith a minimum and a maximum limit somin max takes two arguments as you cansee here I've set it to a minimum sizeof also covered what fit content doesearlier so I'm not gonna talk about thatso let's just do this resizing thingagain because isn't this what everybodydoes now I'm just kidding so whenthere's a lot of space fr just takes upeverything I think we've alreadyestablished that but when there isn'tenough space again fr is the first tolose content now if we look at the firstexample you'll notice that the moment fris done shrinking Auto and fit contentshrink at the same way so essentiallythey behave very similarly it's the sameratebut if you look at the second set wherethis gold box is min content and thenit's Auto infant content so I'm going todo this a bit slowly Auto will auto hadmore space hadn't had free spaceallocated to it so it's gonna give it upfirst give up give up give up give upwhen you hit they both they don't shrinkanymorespace starts getting taken away from minMax because min max is arranged betweenthose values it gets taken away but atsome point auto and fit content alsostart shrinking specifically what thispoint is I can't tell you but what I cantell you is that all three of theseitems are going to hit their minimumsize at the same time so the moment itgoes goes goes hit at the same time sothe the minimum size is prove a point it is so I found this really reallyinteresting and it's the same it's thesame case if you compare Auto and minMax min max with fit it's the fact thatthey behave similarly but there is avariable weight of change now in agrowth this is in a shrink scenario in agrowth scenario when there's a lot ofspace fit content is going to end upgetting capped at its maximum maxcontent size or whatever's inside fitcontent for this particular example it'smax content size because do we likeboxers doesn't make up finebut if we look back at the secondexample as we grow the moment we hit thecap fit content stops because it's saidwhat Auto does is that it will hit itsmax content width and then again it willpause growing let min max finish goingto additional space so I think this is avery interesting behavior that we'venever seen before this is something thatis relatively newand I think there are a lot ofpossibilities when it comes to moreeditorial design because it allows us todo designs that adapt better to a widerrange of viewport sizes so here I havean example like maybe feature articleand this first bit is percentage sizedthe bottom bit uses the newer likevariable sizing units or as I call themthey look fine at this width but themoment you start to shrink and you hitmore extreme widths you can start to seethat this ends up having the sameproblem as the cat example where youknow it doesn't work very well it imageto small content you squashed but if wejust have the ones that is sized withthe newest CSS properties here it's agrid right okay and you can sort of seethe code it's not that straightforwardbut what happens is that it functions alot better at the more extreme withbecause of this variable sizing behaviorand also a grid makes it very easy to dooverlap so this having a title overlapyour image is a very trivial thing to doif you're using grid and so I'm veryexcited for all of this stuff that Ijust mentioned to become more mainstreamand to have more you know designers anddevelopers start considering thepossibilities in their design so ifyou're still on the fence in using anyof these newer CSS layout properties mymessage to you is just do it thank youvery muchyou[Music]
YouTube URL: https://www.youtube.com/watch?v=ZRtzk0371tk


