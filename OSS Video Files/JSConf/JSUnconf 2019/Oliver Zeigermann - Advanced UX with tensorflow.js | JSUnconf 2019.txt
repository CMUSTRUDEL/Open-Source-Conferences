Title: Oliver Zeigermann - Advanced UX with tensorflow.js | JSUnconf 2019
Publication date: 2019-05-22
Playlist: JSUnconf 2019
Description: 
	
Captions: 
	00:00:06,970 --> 00:00:13,170
Okay, good, so welcome to this talk and it's about advance user experience with tensorflow J's and

00:00:13,690 --> 00:00:14,920
I'm Oliver

00:00:14,920 --> 00:00:20,309
And this talk really is it is about user experience, but it's much more about

00:00:21,070 --> 00:00:26,549
Finding good applications for machine learning in the browser and I want to kick this off because I have zero slides

00:00:26,550 --> 00:00:30,119
So I want to kick this off with a stone joke

00:00:30,699 --> 00:00:37,468
Hopefully no one knows it already. So this is about user experience. And oh sorry, this is about user experience in the way

00:00:38,379 --> 00:00:43,499
It actually works. So hope for the internet works here. So this is what you the user do

00:00:44,800 --> 00:00:46,800
So it doesn't work quite

00:00:47,200 --> 00:00:49,200
Obviously guys wrong

00:00:49,750 --> 00:00:52,110
Fixing it. This is I mean

00:00:53,140 --> 00:00:58,020
Because you're laughing. I know you have the same feeling as me. Yeah, if you have watch people using user

00:01:00,460 --> 00:01:02,460
So same thing fixing it

00:01:03,280 --> 00:01:04,900
Again, yes

00:01:04,900 --> 00:01:08,729
So that's the joke that I stole but obviously it worked

00:01:09,000 --> 00:01:15,029
Because I think it only works if you have some sort of experience like this you think so hard about you user

00:01:15,549 --> 00:01:17,699
Interface and then that's what people end up doing

00:01:17,770 --> 00:01:22,560
They will figure out how to how to deal with it, but maybe not them sense you expected it

00:01:22,560 --> 00:01:25,350
So this talk is about the same thing

00:01:26,140 --> 00:01:28,349
Don't blame me for the for the styling

00:01:29,140 --> 00:01:31,229
This is my weak spot. Oh wait

00:01:31,840 --> 00:01:33,250
so, um

00:01:33,250 --> 00:01:39,720
In a typical user interface. So this regard those buttons those are real buttons the the buttons down here. I'm not real buttons

00:01:39,720 --> 00:01:41,720
so the buttons are just here to

00:01:41,979 --> 00:01:44,039
make a point so typically

00:01:45,369 --> 00:01:47,369
In a very classic

00:01:48,250 --> 00:01:55,019
user interface the buttons they will light up when you hover over them to give people the the

00:01:55,899 --> 00:01:58,949
certainty when you click now, you will click this button, so

00:01:59,560 --> 00:02:05,339
What I had in mind was would it be at all possible to highlight the buttons before you click them?

00:02:05,340 --> 00:02:11,610
So would it be possible that the machine learns? Which button are you going to click now on next and

00:02:13,140 --> 00:02:18,630
You may ask what could be the applications of this and I've talked to quite some user experience people that said

00:02:19,390 --> 00:02:26,039
Nothing or less and then they thought for a little bit longer. So maybe I asked you so I get something back here

00:02:26,130 --> 00:02:29,789
Why would even do that? I mean highlight the button before the user clicks on it

00:02:30,370 --> 00:02:34,440
Predicting which button is it going to be any ideas any takers? Yes

00:02:36,520 --> 00:02:42,029
Perfect so about flows so actually I haven't implemented this but with the buttons up there

00:02:42,060 --> 00:02:46,739
that's a horrible user interface because you need to click those buttons in certain order and

00:02:46,989 --> 00:02:50,549
Some orders are totally don't make any sense you get weird error messages

00:02:50,950 --> 00:02:56,970
This would be my next step like learn how to actually use those buttons up there because they're they're complex

00:02:57,519 --> 00:03:00,809
But I haven't implemented this yet. So what?

00:03:01,450 --> 00:03:04,259
What would be another reason why would you why would you do that? Yes

00:03:06,970 --> 00:03:14,639
Accessibility yes, so make it easier. So that was also my fault. Yes. You have another point. Yes in the back

00:03:16,330 --> 00:03:18,330
Sorry

00:03:18,880 --> 00:03:22,350
Yes preload resources that was also something that I came up with

00:03:22,350 --> 00:03:27,929
someone said maybe there so I don't know a server less function behind that button and you want to start it up because you think

00:03:27,930 --> 00:03:32,250
Oh, the user is going to click on that button soon. You better have this thing ready or

00:03:32,920 --> 00:03:34,920
Preload the next page or someone

00:03:35,380 --> 00:03:37,439
I've written down some stuff. Wait. Oh

00:03:38,650 --> 00:03:44,880
yeah, someone came up with the idea when there's artificial reality and it's always

00:03:45,430 --> 00:03:51,660
Pretty hard to decide which detail are you going to show and then if you can predict where the user is going to look next?

00:03:51,790 --> 00:03:53,790
then you can preload that stuff and

00:03:55,690 --> 00:04:00,570
Again I only implemented the easiest word because I just wanted to know it's this at all possible

00:04:00,570 --> 00:04:04,259
Could you even do that? And the easiest version that I implemented is just what you said

00:04:04,260 --> 00:04:08,880
I highlighted the button that I think the users going to click. So, um

00:04:10,480 --> 00:04:14,310
There could be heuristics to do this you could just measure I don't know

00:04:14,590 --> 00:04:17,190
It's the user close to a button like this

00:04:17,190 --> 00:04:21,839
and if the if it's reasonably close then you would highlight that button which I don't do now and

00:04:22,539 --> 00:04:26,549
You could also check its the mouse closer to this button

00:04:26,550 --> 00:04:31,170
And so they and it might all work, but it might not match the individual style

00:04:31,420 --> 00:04:33,869
That someone has that used this user interface

00:04:33,870 --> 00:04:34,840
for example

00:04:34,840 --> 00:04:37,410
my I always use the trackpad and it's

00:04:37,630 --> 00:04:42,899
extremely sensitive because I don't move much and that might mean if I want to hit this button I might

00:04:43,570 --> 00:04:45,570
Briefly go over it and then go back

00:04:46,030 --> 00:04:52,619
That means depending on the user that you're having and depending on the machine that you're using and how is it set up?

00:04:53,169 --> 00:04:56,939
The mouse movements might be completely different. So I'm pretty sure

00:04:57,520 --> 00:05:04,500
In my I'm not sure that I'm pretty sure a machine might identify me just by my mouse movements

00:05:04,810 --> 00:05:09,419
Out of all of the people in the on somebody's nodding. I haven't made the experience but my mouse

00:05:09,940 --> 00:05:13,169
Mouse movements are so weird. Italy makes people really nervous

00:05:14,020 --> 00:05:15,550
angry

00:05:15,550 --> 00:05:16,720
so

00:05:16,720 --> 00:05:22,979
Having said that so what I came up with is that I said, maybe it's possible to learn that

00:05:24,520 --> 00:05:27,150
Those movements using machine gun and

00:05:28,210 --> 00:05:32,040
If you want to do that, the the crucial part is you need data

00:05:32,440 --> 00:05:36,450
So the typical machine learning that we do you need to have data and if you don't have data

00:05:37,750 --> 00:05:43,769
Probably not going to work, but fortunately I can generate data on the fly and I'm doing it like this

00:05:43,770 --> 00:05:51,060
So once I hover over button, I generate a data set and typically the user would also need to click that button

00:05:51,100 --> 00:05:56,549
But it would take me forever to generate just a few data samples if I really clicked on that button

00:05:56,550 --> 00:06:01,079
So for the sake of this demo, I'm just counting hovering over button is a click

00:06:01,240 --> 00:06:07,079
this is this is just fake or hacked but that's the only hack part and I'm doing this to

00:06:08,110 --> 00:06:09,550
quickly

00:06:09,550 --> 00:06:12,900
Get some data. Yeah, and what kind of data would you I mean, I'm

00:06:13,810 --> 00:06:17,070
Generating data. What kind of data would you would you collect what would you do?

00:06:17,070 --> 00:06:22,469
I mean if you were to predict the button I'm going to click you solve those movements. What would you recall?

00:06:23,110 --> 00:06:24,970
Yes

00:06:24,970 --> 00:06:28,019
Proximity you could record that I did not do this. What else?

00:06:29,860 --> 00:06:31,860
Yes

00:06:33,130 --> 00:06:39,479
Yes, that's what I did so I recorded XY of the mouse I recorded the Delta between the previous

00:06:40,360 --> 00:06:45,370
Movement because I just get this from the mouse movie event. I just get this for free and

00:06:46,189 --> 00:06:49,629
delta-t exactly what you say so and

00:06:50,990 --> 00:06:55,299
There's also something really special about this. I recalled a sequence of

00:06:56,360 --> 00:06:59,199
So to say time stamps and I can show these

00:07:01,580 --> 00:07:08,680
If I find them on local storage, there you go, so I stole them local storage and

00:07:10,729 --> 00:07:13,329
They are they give me a second here

00:07:16,159 --> 00:07:22,629
And that's how they look like so this why hopefully it's big enough is it big enough for the back

00:07:23,150 --> 00:07:27,759
Yeah good. So the why it's just an idea of the button and two means this one I

00:07:28,279 --> 00:07:30,279
Think so. This one should be

00:07:31,460 --> 00:07:39,159
One and this might be zero or maybe this is one. This is two this is three, but I'm not quite sure but why represents?

00:07:41,060 --> 00:07:43,060
The button and I

00:07:44,000 --> 00:07:50,199
Made this already complicated so x and y don't mean positions on the screen, but they mean the input sequence

00:07:50,690 --> 00:07:53,919
This is x and y is the button that I'm going to click so

00:07:54,469 --> 00:07:56,469
this is the input sequence of

00:07:56,839 --> 00:08:00,729
Mouth positions you see this is position X this is position Y

00:08:01,279 --> 00:08:07,269
Delta X Delta Y that means difference from the previous mouse position and this is the time step or delta T

00:08:07,610 --> 00:08:12,490
So how much time how many milliseconds past from this event to the other?

00:08:13,069 --> 00:08:16,119
And sometimes it's very similar and sometimes it's different

00:08:16,939 --> 00:08:18,939
so that's my input and

00:08:19,430 --> 00:08:20,509
I

00:08:20,509 --> 00:08:23,259
Did some pre-processing on that because I was considering

00:08:23,810 --> 00:08:30,429
how many of them would I really need like maybe 10 maybe 100 because I didn't know I

00:08:30,860 --> 00:08:34,659
Cut all these sequences into parts and trained all of this into the model

00:08:35,029 --> 00:08:38,289
So but you could like for example

00:08:38,289 --> 00:08:44,198
What would he suggest that you could have taken anything else and if it works you find out by experiment?

00:08:44,199 --> 00:08:50,949
That's how it works in machinery. So you make an assumption you try the model and then you see if it works and

00:08:51,680 --> 00:08:56,480
well, this might work at see so I have the data now and now I

00:08:57,360 --> 00:08:59,360
have this

00:08:59,610 --> 00:09:04,280
This collection of buttons and I'm the only person in the world right now who knows how to

00:09:04,530 --> 00:09:10,549
Use this thing because it's a horrible user interface giving a talk but user interfaces and then they playing horribly. I

00:09:11,250 --> 00:09:14,600
Apologize, but that's the way it is. Now I can train on that data

00:09:14,600 --> 00:09:19,429
So I collected some data and I collected some data before you see I have

00:09:20,400 --> 00:09:27,889
369 dataset that means um, I don't know my wave down here from over from outside to down here. I

00:09:28,440 --> 00:09:33,170
Did some clicks to have some sample data and if you're at all into machine learning having?

00:09:33,780 --> 00:09:36,230
370 samples for three categories is nothing

00:09:36,750 --> 00:09:40,700
Tippity people won't even start they will say this is not going to work. Well

00:09:41,700 --> 00:09:46,100
But maybe does so I'm clicking this train model now, this is all

00:09:46,800 --> 00:09:52,010
I've no fall back. That's why I'm having sweaty palms here. So this looks good

00:09:53,130 --> 00:09:54,690
reasonably good

00:09:54,690 --> 00:09:56,749
this is using tensorflow, Jess and

00:09:57,870 --> 00:10:02,000
Tensorflow jess comes with a very nice brutalization library. I did not write this code

00:10:02,130 --> 00:10:07,729
So this stuff that comes with tensorflow Jess and it shows you something and hopefully something good

00:10:07,880 --> 00:10:11,929
Oh and shows me something good, but I didn't know before I kicked off this thing. So it looks good

00:10:12,540 --> 00:10:14,599
What's most interesting is these?

00:10:16,950 --> 00:10:19,220
Two curves down here. That's why I'm doing it now

00:10:19,740 --> 00:10:20,850
and

00:10:20,850 --> 00:10:25,519
These curves tell you something about how well the training process

00:10:26,250 --> 00:10:27,920
Proceeds I will show you some code later

00:10:27,920 --> 00:10:30,769
But let's save on the conceptual level for a while

00:10:31,260 --> 00:10:36,439
And we concentrate on that blue curve and the blue curve describes over time

00:10:37,410 --> 00:10:43,339
How well is the machine learning a model able to reproduce the data that that I gave to it?

00:10:43,340 --> 00:10:47,090
so I've had in the mouse movement sequences and

00:10:47,580 --> 00:10:53,179
as a prediction the button that is going to be clicked and now the machine learning tries to

00:10:54,300 --> 00:10:56,300
learn which sequence

00:10:58,200 --> 00:11:00,200
Spits out which bar and

00:11:00,270 --> 00:11:07,639
the higher the blue line gets the better it is able to do that and this is around 70 percent or

00:11:08,100 --> 00:11:10,219
0.67 that means of the 70

00:11:10,950 --> 00:11:16,189
Sorry off of all the mouse movements that I did 70 percent of them. The model is able to predict correctly

00:11:16,440 --> 00:11:19,609
so I made some movements to the to the button and

00:11:21,000 --> 00:11:23,329
That's pretty good 70 percent on that

00:11:24,389 --> 00:11:25,800
pretty astonishing

00:11:25,800 --> 00:11:33,109
But what's much more astonishing is the orange line because that is data points that the model has never seen that means

00:11:33,870 --> 00:11:37,880
20% which I decided deliberately I've taken off from the

00:11:39,089 --> 00:11:44,779
Start now it looks good. I've taken off from from the training data, and I'm just using it

00:11:46,320 --> 00:11:48,320
To

00:11:48,480 --> 00:11:56,060
Constantly check how well the model is doing on something it has never seen and is anyone at all familiar with machine learning anyone?

00:11:57,570 --> 00:12:01,279
When we say it doesn't look I mean would it would you have expected that

00:12:02,550 --> 00:12:04,550
Who would have expected that?

00:12:06,149 --> 00:12:11,299
Maybe you didn't expect that because I did make myself quite clear, but this is a pretty outstanding

00:12:11,820 --> 00:12:19,640
Result so it's not something you could expect from very small training data training on this machine is a very powerful

00:12:19,800 --> 00:12:21,800
GPU but it's still a laptop

00:12:22,620 --> 00:12:26,929
Something like this. Typically. I don't know. It wouldn't perform that well. I'm not quite sure

00:12:26,930 --> 00:12:32,449
Why does this is so welcome to the world of machinery, you make an experiment. You can't explain it just works and

00:12:33,839 --> 00:12:38,779
that's my world at least javascript is also my world but also that so um

00:12:40,170 --> 00:12:47,719
before we try that and I'm hope you saw I just tried trade this online we can get some more information and

00:12:48,540 --> 00:12:51,620
This is also built into the visualization tools of tensorflow

00:12:51,720 --> 00:12:58,730
and I'm always so happy if you guys don't see any red stuff in the console because it's it seems to work quite well and

00:12:59,100 --> 00:13:04,969
This is a while. I'm hiding this for a second because what you see now, it's a very powerful tool

00:13:05,220 --> 00:13:10,610
It's called the confusion matrix. I don't think it's only used in machine learning but in

00:13:11,190 --> 00:13:14,089
Machine learning it actually is so what can you see on?

00:13:15,480 --> 00:13:18,620
The y-axis that is this axis here

00:13:19,970 --> 00:13:27,160
you see the real buttons that the model should predict because it knows those are the real buttons that means

00:13:27,860 --> 00:13:30,550
left button middle button right button and on

00:13:31,040 --> 00:13:35,319
The x-axis you see the prediction of the model and this is useful

00:13:35,509 --> 00:13:43,509
Because in the perfect world and in the model that works perfectly you would expect all the clicks to be on that diagonal here

00:13:44,720 --> 00:13:50,470
But you don't see that you see something else. So what do you see? So this means the real

00:13:51,589 --> 00:13:53,919
value that the model should predict is left and

00:13:54,769 --> 00:13:58,629
The prediction actually also is left that's good. But then this here

00:13:59,389 --> 00:14:01,629
The predictor should be left, but it was middle

00:14:03,350 --> 00:14:08,620
22 quite a few and then the prediction should be left but it is right and

00:14:09,050 --> 00:14:11,769
Then for all the three buttons so for the middle button

00:14:12,440 --> 00:14:18,880
we see something that at least from my perspective was expected because the middle button is so close to the other buttons that

00:14:19,279 --> 00:14:21,279
You get a lot of confusion

00:14:21,800 --> 00:14:26,319
Even though it is the middle button you get a lot of confusion for either left or the right button

00:14:26,509 --> 00:14:28,509
so that's also totally expected and

00:14:30,139 --> 00:14:36,849
Finally for the right button that's also something that's slowly expected and also something that I would have expected for the left button

00:14:37,069 --> 00:14:43,179
So it's actually the right button, but sometimes you confuse it with the middle button, but only rarely with the left

00:14:43,759 --> 00:14:47,619
And this is because of the way I created those silly mouse movements

00:14:47,620 --> 00:14:52,299
But it's actually pretty good even without trying the model. I now know that this model might be good. Um,

00:14:53,300 --> 00:14:55,990
There are some problems with it first problem

00:14:56,660 --> 00:15:00,399
This is only on the data the model had we still have no idea

00:15:00,410 --> 00:15:03,189
is it going to perform well in real life I mean and

00:15:03,649 --> 00:15:11,409
will I do the same mouse movements I make a little bit interesting because I'm still I still also don't know but it could it's

00:15:12,050 --> 00:15:14,050
It looks good now

00:15:14,540 --> 00:15:20,529
If you think you would never show this to the end user something like this and the end user would never use something like this

00:15:20,529 --> 00:15:24,249
this is totally true and you can at any time heighten sting and

00:15:25,009 --> 00:15:27,909
You can toggle it back in later

00:15:29,360 --> 00:15:31,870
this is just tools for developers like me and

00:15:33,440 --> 00:15:36,499
I also haven't shown this but while I was training it was totally usable

00:15:36,540 --> 00:15:42,110
So the whole thing was was trained in real time, and the user would not have noticed that I'm training

00:15:43,170 --> 00:15:48,889
Something I also did not show him. But maybe it's also too late now the hit on my GPU was immense and

00:15:49,769 --> 00:15:51,769
Also the the fan of my laptop

00:15:52,769 --> 00:15:56,719
Started to blow because this takes a lot of compute power on your GPU

00:15:57,600 --> 00:16:01,310
Uses WebGL, so that means this this is your installation

00:16:01,310 --> 00:16:03,029
You could load this in your browser right now

00:16:03,029 --> 00:16:07,818
But you wouldn't know which buttons to click so don't do it because it has horrible user experience

00:16:07,819 --> 00:16:13,699
Um, so that means the idea is the user clicks something you record at a certain point thing

00:16:14,069 --> 00:16:17,329
this might be enough data you train the model you get all the

00:16:17,939 --> 00:16:22,069
Evaluation results and then decide am I going to use it for a real prediction or not?

00:16:22,170 --> 00:16:28,699
And this thing might be okay. We have one more metric and this is accuracy per button

00:16:29,339 --> 00:16:34,339
That means this is this is just a number and this number there's an API for it

00:16:34,339 --> 00:16:40,489
I'll just question that number and then I could write some code if the accuracy is above say 70% for all the buttons

00:16:40,490 --> 00:16:43,939
I will enable that model and I can just do that

00:16:44,730 --> 00:16:46,589
How shall I do that?

00:16:46,589 --> 00:16:51,258
Yes, I'm gonna bit scared. I'm really so this is no show that I'm scared

00:16:52,500 --> 00:16:55,819
so I can toggle the prediction and

00:16:56,850 --> 00:16:59,360
I need to open the console because all the interesting stuff

00:17:00,149 --> 00:17:05,389
Is still locked here. This is very early example, so now

00:17:06,510 --> 00:17:08,510
Let's see. So what you see

00:17:08,909 --> 00:17:15,319
I'm doing this thing where I'm pretty sure that that it will be. Okay. So just see oh it looks okay

00:17:15,319 --> 00:17:20,779
So now it will predict I'm going to click the right button and there's no explanation for that

00:17:21,419 --> 00:17:27,439
Yes, there might be an intuition. It changes a little bit still right button, but

00:17:28,380 --> 00:17:33,949
This thing basically is a black box. So you have no idea. Why does it you just happy that it does

00:17:34,470 --> 00:17:38,600
but you get some information you get some information down in the console and this is

00:17:39,539 --> 00:17:41,520
probability per button

00:17:41,520 --> 00:17:43,520
so these

00:17:49,210 --> 00:17:51,210
So the microphone is here

00:17:51,550 --> 00:17:55,859
I could have used the mouse, but then I would change this so

00:17:56,860 --> 00:17:58,860
let's stick to this one, right so

00:17:59,410 --> 00:18:01,920
That means the probability for the right button

00:18:02,440 --> 00:18:03,490
75%

00:18:03,490 --> 00:18:08,550
the probability for the middle button is 10 and the probability for the left button is 15% that

00:18:09,430 --> 00:18:12,810
Means at a certain threshold that I decided to be 50%

00:18:12,910 --> 00:18:18,930
I will highlight that button and say the user is going to click that button and let's see now so

00:18:20,290 --> 00:18:24,090
Middle button, you see I'm not hovering over it. I'm them just close to it

00:18:24,670 --> 00:18:28,320
Left button in works, and I had sweaty hands it sort of works

00:18:28,360 --> 00:18:35,190
You wouldn't probably say it's perfect. And it also seems to work on proximity. Not not of mouse path, right?

00:18:35,950 --> 00:18:38,489
Maybe limit on Mouse path, but mostly on proximity

00:18:39,400 --> 00:18:41,400
At least that's my impression. Would you agree?

00:18:41,710 --> 00:18:43,710
Is it Mouse path?

00:18:43,810 --> 00:18:47,009
It's not perfect. You see that it's not perfect, but it might be good enough

00:18:48,490 --> 00:18:54,210
For anything reasonable and we just did this on the fly right here. So it's it's not something that I prepared

00:18:54,880 --> 00:19:00,420
Um, but you might ask it's this maybe you asked that I don't know if you do. I'm just saying you ask

00:19:00,460 --> 00:19:02,789
Is this the right way to do or would you rather?

00:19:04,420 --> 00:19:10,080
Not use proximity so much but do you really the movement of the mouse is that more interesting and

00:19:10,720 --> 00:19:17,939
if you value proximity or the the past of the mouse movement over a proximity and

00:19:18,220 --> 00:19:21,659
That is something that you model into your model and I will show the model now

00:19:23,440 --> 00:19:25,440
Hopefully

00:19:27,520 --> 00:19:31,229
Sorry just enough space

00:19:36,940 --> 00:19:41,789
So, um, then it's the tensor flow test part and all the other part

00:19:41,790 --> 00:19:44,070
I'm pretty sure all of you could also write this is just

00:19:44,440 --> 00:19:49,529
clicking and then have a mouse missed 9 then have a quick list not all that stuff and prepare the data has had a little

00:19:49,530 --> 00:19:53,280
Bit but this is the part where you only have very few lines of code

00:19:53,320 --> 00:19:57,960
But you need to think about those few guys of course and have variations of this so

00:19:58,990 --> 00:20:02,459
This tensorflow thing is it's the tensorflow namespace

00:20:03,070 --> 00:20:08,490
I'm saying I want to a sequential model. That means we have layers they follow each other and

00:20:09,070 --> 00:20:13,620
The first and this now it gets interesting. So this stuff before maybe not so much

00:20:13,660 --> 00:20:20,729
This says it's a simple RNN and that is the sort of neural network that can learn from a sequence of things

00:20:21,520 --> 00:20:24,239
And there's a lot of stuff that you don't need to know about

00:20:25,120 --> 00:20:27,120
but this will say I

00:20:27,400 --> 00:20:28,420
have

00:20:28,420 --> 00:20:31,559
quite sure how many maybe it's 25 I cut the the

00:20:32,080 --> 00:20:38,460
mouse movements into into chunks and then have five features that means how does the input to this thing look like and

00:20:38,800 --> 00:20:44,159
Then this says how many neurons do I want? And this is tony hand-wavy you just try that out

00:20:44,160 --> 00:20:48,540
and typically you don't want to use too many because it needs to be trainable on the browser and

00:20:49,600 --> 00:20:56,250
You saw it is if you take less it goes much faster, if you take more it might not work. So well and and

00:20:57,280 --> 00:21:01,949
It also takes a lot of time and you saw the predictions were actually real time online

00:21:03,190 --> 00:21:05,190
so the interesting part is

00:21:05,920 --> 00:21:08,519
The evaluation of this thing was is much worse

00:21:09,220 --> 00:21:11,760
Than on the other things that I will show in a minute

00:21:12,760 --> 00:21:20,579
But in real life it showed it showed the behavior that people actually expected that when I moved close to a button

00:21:21,250 --> 00:21:23,250
It should be highlighted

00:21:23,440 --> 00:21:30,840
That's the that's a result people expected. But actually maybe you rather want something where the whole path the whole movement

00:21:31,510 --> 00:21:35,699
Falls much mentor into into account and there are other

00:21:36,250 --> 00:21:41,880
styles of neural networks that are better at this so you decide how much of the history do you want to keep and how much

00:21:41,880 --> 00:21:45,900
interesting how interesting is their history and I have

00:21:47,890 --> 00:21:49,890
Wait I have this

00:21:50,590 --> 00:21:56,880
Pre-recorded because I didn't know if I would be able to make this run in return. So this thing here

00:21:58,660 --> 00:22:02,969
In the middle you see it reacts much faster or much

00:22:03,820 --> 00:22:06,450
Very much earlier. It was it was an earlier version of this thing

00:22:06,760 --> 00:22:13,410
But it only reacts not by proximity but of the path that you did that mouse describes

00:22:14,290 --> 00:22:15,490
so it's

00:22:15,490 --> 00:22:19,350
Much more expensive it took much more resources to train and it's still not

00:22:19,420 --> 00:22:22,019
Intuitive because if you if you just move close to the button

00:22:22,150 --> 00:22:25,440
It will do won't do anything because that's not how you click on a button

00:22:25,440 --> 00:22:28,980
You don't slow you go to the button and then you eventually click. This is much more

00:22:29,140 --> 00:22:31,980
Much closer to what you actually do and if you want to do that

00:22:32,770 --> 00:22:36,360
you will use a different type of machine learning model and

00:22:37,270 --> 00:22:39,300
this different type of machine learning model is

00:22:40,090 --> 00:22:42,090
Commended out here

00:22:42,100 --> 00:22:46,889
it's called an LS TM which means long short-term memory network and

00:22:48,070 --> 00:22:51,059
You might see that apart from this thing here

00:22:51,820 --> 00:22:57,269
Where's this? It's same thing and the name is different. But the name is just name of variable. Then there's a

00:22:57,820 --> 00:23:00,989
cheaper version of this which is called GRU, but

00:23:01,750 --> 00:23:06,360
You could just exchange that and do different experiments see and I made some comments

00:23:07,360 --> 00:23:08,830
slow to train

00:23:08,830 --> 00:23:15,419
Evaluation is bad, but it actually performed really well and in its it's the network that I used for the for the second example

00:23:17,260 --> 00:23:21,540
Good five minutes left so I will show some more code unless

00:23:22,900 --> 00:23:25,259
They're questions right now questions

00:23:27,160 --> 00:23:29,160
Yes

00:23:31,600 --> 00:23:33,629
Yes, so the question is

00:23:34,300 --> 00:23:36,419
Have I made something like a baseline? Where you?

00:23:37,000 --> 00:23:41,520
Exit and no but exactly what you propose also was in my head

00:23:41,520 --> 00:23:45,389
I'm just using the vector and I'm seeing what is the the mouse curve pointing?

00:23:45,390 --> 00:23:49,259
It might be it works better, but I haven't done this and also not proximity

00:23:49,260 --> 00:23:54,390
I think it would be it would be pretty easy to implement, but I didn't want to spoil it for myself. I think

00:23:54,940 --> 00:23:59,519
Maybe it works better. If you do that, please contribute. It's on github make a pull request

00:23:59,520 --> 00:24:03,119
I would be maybe I would not be so happy, but please still do

00:24:04,390 --> 00:24:09,300
It could be better. So but the point being here, maybe that's maybe the use case is silly

00:24:09,300 --> 00:24:15,450
I'm not even sure myself, but the point here is so this data it never left the browser

00:24:15,760 --> 00:24:19,890
So this stays in the browser, you can download it yourself

00:24:19,890 --> 00:24:23,999
But it will never reach the server of someone you don't trust in terms of privacy

00:24:24,000 --> 00:24:30,210
For example, you don't want that maybe and also the model that you're training is also completely it stays on your machine

00:24:30,640 --> 00:24:35,460
It will not leave your machine and the prediction will also be on your machine and it will be in real time

00:24:35,460 --> 00:24:42,600
That means you do something and and the model will predict you didn't see any at least I didn't see any delay

00:24:43,510 --> 00:24:49,830
And you didn't see any installation so you can start this maybe not on your phone because you don't have the mouse

00:24:49,830 --> 00:24:54,119
But you couldn't start this on any laptop and it would still work if you know, which part is a click

00:24:54,700 --> 00:24:59,850
And that's the point. So if you if you have anything you think that might be a good idea

00:25:01,240 --> 00:25:07,830
This might be the right thing. Otherwise, it's pretty hard to explain. Why would you even do machine learning in the browser? Because

00:25:08,530 --> 00:25:09,360
for example

00:25:09,360 --> 00:25:10,390
the browser doesn't

00:25:10,390 --> 00:25:14,129
doesn't train at least in Chrome when when the

00:25:14,320 --> 00:25:21,360
The window is not upfront when it's not high light or when you look at something else. The browser will restrict your resources

00:25:21,360 --> 00:25:24,959
So it's not the ideal platform for training, but it might be if you after

00:25:25,480 --> 00:25:26,830
previously or

00:25:26,830 --> 00:25:28,830
high activity

00:25:29,050 --> 00:25:30,220
so

00:25:30,220 --> 00:25:32,220
just

00:25:32,710 --> 00:25:39,929
Well, hopefully to show you that it's not very hard to get this done so this is something you could copy from pretty much any

00:25:40,450 --> 00:25:43,710
Tutorial and that's the whole model so model definition

00:25:44,890 --> 00:25:46,890
this part

00:25:47,500 --> 00:25:51,600
And this part and the other part is commented out so it doesn't count I guess and

00:25:52,630 --> 00:25:54,190
the most

00:25:54,190 --> 00:25:59,700
Experienced that have put into it was to make it very general with very few data sets

00:25:59,700 --> 00:26:02,879
Which is typically extremely hard and this involves

00:26:03,340 --> 00:26:10,079
tweaking with strange parameters where there's barely any theory to it and one of the theory sorry one of the

00:26:10,510 --> 00:26:16,619
parameters that was tweaking was this drop out thing and then this patch normalization and and

00:26:17,160 --> 00:26:18,880
this is just

00:26:18,880 --> 00:26:19,870
experimental you've

00:26:19,870 --> 00:26:25,650
You have some intuition and then you just play with it and you see when it performs well and what you see as a result

00:26:25,650 --> 00:26:28,560
Of this very strong. Well sort of strong

00:26:29,140 --> 00:26:34,020
Regularization so it still works with not many data sets. Sorry

00:26:34,960 --> 00:26:36,310
so

00:26:36,310 --> 00:26:38,310
preparation boring

00:26:38,740 --> 00:26:40,740
training

00:26:41,080 --> 00:26:45,569
This is training, so you have the model you call fit that means you stick in

00:26:46,690 --> 00:26:50,759
the input that is the mouse movements and you get back the

00:26:51,490 --> 00:26:57,150
button, but in this case you just train the model tell it this is the true data that I have learned from it and then

00:26:57,150 --> 00:27:03,689
There's still too many parameters that I can't explain now, but I would be able to do that in five minutes

00:27:04,600 --> 00:27:07,170
Okay, then prediction so done after that

00:27:08,020 --> 00:27:11,939
This was triggered by one of the buttons. So after that you can evaluate that

00:27:14,860 --> 00:27:21,839
Somewhere and then eventually you call predict on that and this is again model stick in the X data set get back

00:27:22,120 --> 00:27:24,120
the Y that means the bar or

00:27:24,400 --> 00:27:30,359
In this case to be more accurate the percentages of probability for each bug being picked

00:27:31,660 --> 00:27:33,660
so

00:27:33,790 --> 00:27:35,939
You can save that to local

00:27:36,640 --> 00:27:39,089
Storage you can download that

00:27:39,610 --> 00:27:41,500
And then you have two

00:27:41,500 --> 00:27:48,089
files that you can store you can use the data to train that on just normal tensorflow, which also did

00:27:48,640 --> 00:27:50,640
Where I exported the data I did the training

00:27:51,310 --> 00:27:53,310
and then you can also

00:27:53,620 --> 00:27:59,430
Export the model that you trained on a real server and load it into the browser if you really want to and the idea

00:27:59,530 --> 00:28:02,189
Behind that is maybe you want to share

00:28:02,650 --> 00:28:08,219
Some training experience with other people who are willing to give the data to I don't know someone else

00:28:08,860 --> 00:28:10,720
Uploaded it to it

00:28:10,720 --> 00:28:13,319
To a server and then you could train the general model

00:28:14,110 --> 00:28:20,819
Upload it to this thing here. I could do this. It's loading remote model now and you can see I

00:28:21,520 --> 00:28:23,520
Don't know if it's performing well

00:28:23,830 --> 00:28:28,710
Not so much, but also not so bad. So this model that I just loaded it has been trained on a server

00:28:30,190 --> 00:28:32,190
Probably more data and still works

00:28:34,040 --> 00:28:35,780
So with that, I'm

00:28:35,780 --> 00:28:40,119
Closing it and what I would like you to give to me is is ideas

00:28:40,370 --> 00:28:43,120
So I don't with our I don't on person

00:28:43,190 --> 00:28:47,830
is there anything any inspiration you got from this what you could do in the browser didn't tell me and

00:28:48,050 --> 00:28:52,269
If I mean if it's great that you keep it to yourself just implement and make a lot of money

00:28:52,270 --> 00:28:55,810
But maybe maybe if you need I don't know

00:28:57,110 --> 00:29:01,930

YouTube URL: https://www.youtube.com/watch?v=dLbTElqaCC4


