Title: Alex Lakatos - Hands on performance debugging with the browser in devtools | JSUnconf 2019
Publication date: 2019-05-23
Playlist: JSUnconf 2019
Description: 
	
Captions: 
	00:00:06,890 --> 00:00:12,330
hello everybody I'm Alex I know it's the

00:00:10,170 --> 00:00:15,420
last talk of the first day and probably

00:00:12,330 --> 00:00:17,070
tired there's no more Martha left but

00:00:15,420 --> 00:00:19,080
stay with me for 30 minutes and I'll

00:00:17,070 --> 00:00:21,840
give you web performance optimizations

00:00:19,080 --> 00:00:23,539
straight in the dev tools when I pitch

00:00:21,840 --> 00:00:26,220
this this morning

00:00:23,539 --> 00:00:29,400
karma said I'll pick talk from the

00:00:26,220 --> 00:00:31,410
audience I haven't changed my mind so if

00:00:29,400 --> 00:00:36,440
someone wants to volunteer web site they

00:00:31,410 --> 00:00:44,399
want me to take a look at don't be shy

00:00:36,440 --> 00:00:45,899
I'm sorry your honor

00:00:44,399 --> 00:00:53,600
come on stage and spell it out for me

00:00:45,899 --> 00:00:57,719
I'm happy to do that but it has to be

00:00:53,600 --> 00:01:18,659
pg-13 the whole website has to be pg-13

00:00:57,719 --> 00:01:20,640
go for it things in this world I

00:01:18,659 --> 00:01:23,280
volunteer for Mozilla as a Muslim reps

00:01:20,640 --> 00:01:25,470
and Mozilla tech speaker you've seen a

00:01:23,280 --> 00:01:27,780
fellow tech speaker come up on stage

00:01:25,470 --> 00:01:31,259
today and talk about his dance dance

00:01:27,780 --> 00:01:33,630
revelution but I like the idea of a

00:01:31,259 --> 00:01:35,610
paycheck so I also have a day job as a

00:01:33,630 --> 00:01:37,979
JavaScript developer advocate for next

00:01:35,610 --> 00:01:41,340
Moe anybody heard about next one before

00:01:37,979 --> 00:01:43,979
okay two people that's all good

00:01:41,340 --> 00:01:45,360
did they cloud communication api's I'm

00:01:43,979 --> 00:01:47,549
not going to talk about that I'm going

00:01:45,360 --> 00:01:49,110
to talk about web performance and when

00:01:47,549 --> 00:01:51,689
we talk about web performance most

00:01:49,110 --> 00:01:55,649
people focus on javascript optimizations

00:01:51,689 --> 00:01:58,229
and that's kind of sad because web

00:01:55,649 --> 00:02:00,360
performance has like three stages where

00:01:58,229 --> 00:02:01,950
JavaScript organization is the very last

00:02:00,360 --> 00:02:04,350
one of them so whatever you do to

00:02:01,950 --> 00:02:06,149
optimize your javascript it's still

00:02:04,350 --> 00:02:07,740
gonna be micro micro performance

00:02:06,149 --> 00:02:10,679
optimization if you don't optimize the

00:02:07,740 --> 00:02:13,890
first two chunks we're gonna look at all

00:02:10,679 --> 00:02:16,710
of them we're gonna open up dev tools

00:02:13,890 --> 00:02:19,470
the website and I'm gonna power up three

00:02:16,710 --> 00:02:21,390
of the tools I'll use one of them is

00:02:19,470 --> 00:02:23,910
Network the other one is memory and the

00:02:21,390 --> 00:02:27,750
other one is actual performance so let's

00:02:23,910 --> 00:02:30,150
take a look at the very first one let's

00:02:27,750 --> 00:02:31,580
look at Network because that's when you

00:02:30,150 --> 00:02:34,230
want the website into your browser

00:02:31,580 --> 00:02:37,200
what's the first thing it happens it

00:02:34,230 --> 00:02:41,280
gets the DNS tries to look up what you

00:02:37,200 --> 00:02:45,959
want and then this just images no it can

00:02:41,280 --> 00:02:48,989
be right okay so it looks up what you

00:02:45,959 --> 00:02:51,330
want out of the out of the website and

00:02:48,989 --> 00:02:54,150
starts bringing it in so if I look at

00:02:51,330 --> 00:02:57,000
that I'll see as soon as it loads I have

00:02:54,150 --> 00:02:59,670
a bunch of images that start loading

00:02:57,000 --> 00:03:03,470
after the the Jason the J's files load

00:02:59,670 --> 00:03:06,390
now I can look at each one of those

00:03:03,470 --> 00:03:08,700
requests individually I'm not gonna do

00:03:06,390 --> 00:03:12,720
that I'm gonna look at the ones that are

00:03:08,700 --> 00:03:14,459
problematic this is one of the the

00:03:12,720 --> 00:03:17,100
really optimized ones so for example I

00:03:14,459 --> 00:03:19,590
look at this when everything took 33

00:03:17,100 --> 00:03:22,829
milliseconds this javascript file took

00:03:19,590 --> 00:03:26,430
500 milliseconds that's huge all you

00:03:22,829 --> 00:03:30,180
know all I had 91 requests with three

00:03:26,430 --> 00:03:32,010
and a half megabytes but only one point

00:03:30,180 --> 00:03:34,140
four of the Oh one point six of those

00:03:32,010 --> 00:03:35,549
was transferred transferred and that's

00:03:34,140 --> 00:03:38,430
because probably the website has

00:03:35,549 --> 00:03:41,220
something like jay-z ping so I get one

00:03:38,430 --> 00:03:43,519
point six megabytes and then it expands

00:03:41,220 --> 00:03:45,989
on desk I don't really care about the

00:03:43,519 --> 00:03:47,489
actual size on desk I care about the

00:03:45,989 --> 00:03:51,299
transfer size because that's what comes

00:03:47,489 --> 00:03:54,329
through the network to the browser so

00:03:51,299 --> 00:03:56,370
I'm gonna look out of those or it still

00:03:54,329 --> 00:03:58,140
loads it says it finished in 30 seconds

00:03:56,370 --> 00:04:00,510
which can be right so that means it's

00:03:58,140 --> 00:04:02,370
still loading I'm gonna look at the big

00:04:00,510 --> 00:04:04,290
one so if I look at it I can see it's

00:04:02,370 --> 00:04:07,230
JavaScript I can see content headers and

00:04:04,290 --> 00:04:14,790
a bunch of other stuff about it I don't

00:04:07,230 --> 00:04:16,260
really care the token is strangely small

00:04:14,790 --> 00:04:18,780
but what I really care about is the

00:04:16,260 --> 00:04:21,750
timings because when you when you ask a

00:04:18,780 --> 00:04:23,460
resource from the internet yet the

00:04:21,750 --> 00:04:27,090
reason it says blocked right there is

00:04:23,460 --> 00:04:27,540
because the browser can't handle all the

00:04:27,090 --> 00:04:30,150
connection

00:04:27,540 --> 00:04:33,390
your website wants to make it goes and

00:04:30,150 --> 00:04:35,550
does DNS resolution first it starts

00:04:33,390 --> 00:04:37,920
connecting to the IP it does the TLS

00:04:35,550 --> 00:04:40,920
setup it sends the little bit of data

00:04:37,920 --> 00:04:42,990
that I want back and then it waits for

00:04:40,920 --> 00:04:44,520
the server a really long time and then

00:04:42,990 --> 00:04:47,070
the server sends back that micro

00:04:44,520 --> 00:04:50,810
javascript thing and if you look at at

00:04:47,070 --> 00:04:54,030
this the things I can't really touch or

00:04:50,810 --> 00:04:55,560
optimize are the DNS resolution

00:04:54,030 --> 00:04:58,950
I don't really control where the DNS

00:04:55,560 --> 00:05:01,500
comes from on the client side the

00:04:58,950 --> 00:05:02,970
connecting bit that means your server is

00:05:01,500 --> 00:05:04,710
halfway around the world your IP is

00:05:02,970 --> 00:05:06,540
halfway around the world you don't have

00:05:04,710 --> 00:05:08,820
a CDN I can connect to you don't have

00:05:06,540 --> 00:05:12,060
something that's close to me for example

00:05:08,820 --> 00:05:14,070
if you're using EU West or whatever

00:05:12,060 --> 00:05:17,910
that's Frankfurt it should connect in a

00:05:14,070 --> 00:05:20,040
millisecond the TLS setup I can't really

00:05:17,910 --> 00:05:21,630
influence a lot about that it just has

00:05:20,040 --> 00:05:23,250
to do with your connection the same way

00:05:21,630 --> 00:05:25,470
so if you're connecting is gonna take

00:05:23,250 --> 00:05:27,180
long your TLS is gonna take long because

00:05:25,470 --> 00:05:29,310
just connects a bunch of times to the

00:05:27,180 --> 00:05:30,900
same thing the sending part is

00:05:29,310 --> 00:05:33,480
instantaneously cuz I'm not sending a

00:05:30,900 --> 00:05:35,880
lot of data if the sending part was huge

00:05:33,480 --> 00:05:38,580
that meant probably I was sending form

00:05:35,880 --> 00:05:41,250
data or something on the network and

00:05:38,580 --> 00:05:44,310
then I wait for the server like for at

00:05:41,250 --> 00:05:45,960
least a quarter of the time and that

00:05:44,310 --> 00:05:48,090
means your server isn't fast the server

00:05:45,960 --> 00:05:49,980
has too many connections it has to

00:05:48,090 --> 00:05:52,470
handle at the same time and the

00:05:49,980 --> 00:05:54,810
receiving bit is instantaneously the

00:05:52,470 --> 00:05:56,610
things that I really care about are the

00:05:54,810 --> 00:05:59,220
sending and receiving and that those

00:05:56,610 --> 00:06:02,070
happen fast the thing your user sees is

00:05:59,220 --> 00:06:03,390
rate my browser block my HTTP request

00:06:02,070 --> 00:06:05,970
because there were too many in the queue

00:06:03,390 --> 00:06:08,190
so depending on the browser there's a

00:06:05,970 --> 00:06:11,130
limited number of connections and how do

00:06:08,190 --> 00:06:13,350
you resolve that instead of loading when

00:06:11,130 --> 00:06:15,200
I started it loaded like 20 images out

00:06:13,350 --> 00:06:18,060
of 90 requests or something

00:06:15,200 --> 00:06:20,220
make that one or two I won't see them

00:06:18,060 --> 00:06:21,720
anyway that above-the-fold why do I need

00:06:20,220 --> 00:06:24,480
to connect and get them before I get

00:06:21,720 --> 00:06:27,600
your JavaScript if it's JavaScript I've

00:06:24,480 --> 00:06:31,020
got someone in there I can see the JSE

00:06:27,600 --> 00:06:33,150
quest-19 JavaScript requests why can't

00:06:31,020 --> 00:06:35,180
you make one it's JavaScript the

00:06:33,150 --> 00:06:38,610
firelight and it doesn't really matter

00:06:35,180 --> 00:06:40,500
so compress all that into one minified

00:06:38,610 --> 00:06:43,080
if I look at CSS

00:06:40,500 --> 00:06:44,700
CSS looks better and it looks like only

00:06:43,080 --> 00:06:47,190
one is from your domain and the other

00:06:44,700 --> 00:06:49,320
one is from Google that kind of makes

00:06:47,190 --> 00:06:52,380
sense you can't unless you get the

00:06:49,320 --> 00:06:55,800
Google Fonts in locally with your CSS

00:06:52,380 --> 00:06:57,570
then you can make one request ah I'm

00:06:55,800 --> 00:07:00,780
gonna look at images which is the bulk

00:06:57,570 --> 00:07:04,080
of it why do you need to send me 65

00:07:00,780 --> 00:07:06,840
images from the load time I can't see 65

00:07:04,080 --> 00:07:09,270
images on the page send once and two

00:07:06,840 --> 00:07:10,890
sprite them if you have to send a bigger

00:07:09,270 --> 00:07:12,870
chunk you don't lose on connection

00:07:10,890 --> 00:07:15,440
because if you look at the server timing

00:07:12,870 --> 00:07:20,370
you can see the stuff I'm waiting for

00:07:15,440 --> 00:07:23,190
just to go and connect to the IP every

00:07:20,370 --> 00:07:24,750
image takes just as much as as much time

00:07:23,190 --> 00:07:28,440
for that and then it sends four

00:07:24,750 --> 00:07:30,630
kilobytes I probably lost more time on

00:07:28,440 --> 00:07:32,970
the connection than on the actual

00:07:30,630 --> 00:07:35,490
transfer of those four kilobytes sprite

00:07:32,970 --> 00:07:39,410
it with something else or for this I

00:07:35,490 --> 00:07:39,410
want to see what's a 4 kilobyte image

00:07:40,160 --> 00:07:47,060
right did you really need this to be an

00:07:42,840 --> 00:07:50,870
image it's 4 kilobytes so if you look at

00:07:47,060 --> 00:07:52,530
this this is the the big part of

00:07:50,870 --> 00:07:54,780
performance the first part of

00:07:52,530 --> 00:07:56,780
performance because no matter how fast

00:07:54,780 --> 00:08:00,510
your website actually runs on the client

00:07:56,780 --> 00:08:04,260
it depends on the time it takes to get

00:08:00,510 --> 00:08:08,880
to the client and any react fans in the

00:08:04,260 --> 00:08:10,980
room right ok yeah you're not gonna love

00:08:08,880 --> 00:08:15,510
me the last time I use create react app

00:08:10,980 --> 00:08:17,340
I had 20 20 megabytes of JavaScript why

00:08:15,510 --> 00:08:18,570
do I need 20 megabytes of JavaScript

00:08:17,340 --> 00:08:21,030
don't get me wrong once it actually

00:08:18,570 --> 00:08:23,430
starts it's fast I'll give you that

00:08:21,030 --> 00:08:26,280
react is fast but just the fact that

00:08:23,430 --> 00:08:29,460
it's big makes the user load experience

00:08:26,280 --> 00:08:32,490
more than 2 seconds does this there's a

00:08:29,460 --> 00:08:36,419
bunch of of papers online that say if

00:08:32,490 --> 00:08:39,089
your website loads over 2 seconds you

00:08:36,419 --> 00:08:43,020
start gonna you're going to start losing

00:08:39,089 --> 00:08:44,640
users I wouldn't advocate for 2 seconds

00:08:43,020 --> 00:08:47,880
because a bunch of people read the 2

00:08:44,640 --> 00:08:50,250
second rules and some of us might have

00:08:47,880 --> 00:08:51,550
might have been forced to slow down on

00:08:50,250 --> 00:08:54,700
websites too low

00:08:51,550 --> 00:08:57,070
two seconds instead of milliseconds just

00:08:54,700 --> 00:08:58,839
because if it's instantaneous you users

00:08:57,070 --> 00:09:02,010
gonna think oh it came from cash it's

00:08:58,839 --> 00:09:05,890
not fresh let me do shift refresh on it

00:09:02,010 --> 00:09:09,250
but I advocate in under three somewhere

00:09:05,890 --> 00:09:11,680
in between and that means you have to

00:09:09,250 --> 00:09:13,660
get everything in one go so you don't

00:09:11,680 --> 00:09:15,250
keep doing the round trips every time I

00:09:13,660 --> 00:09:19,180
do this and every time I look at the

00:09:15,250 --> 00:09:22,329
website most of the times fixing this

00:09:19,180 --> 00:09:24,610
means more several resources I know

00:09:22,329 --> 00:09:27,880
you'll think oh it's the client it's

00:09:24,610 --> 00:09:30,790
cheap into whatever we want sometimes

00:09:27,880 --> 00:09:32,410
it's not cheap sometimes having to

00:09:30,790 --> 00:09:34,870
transfer three megabytes of data

00:09:32,410 --> 00:09:37,810
actually cost me money and you're gonna

00:09:34,870 --> 00:09:39,700
be upset on your website so you want you

00:09:37,810 --> 00:09:42,850
users to be able to say yes they slowed

00:09:39,700 --> 00:09:46,410
it fast for me and so on so this is the

00:09:42,850 --> 00:09:49,060
first part the second part is the

00:09:46,410 --> 00:09:50,950
performance tab so you've got everything

00:09:49,060 --> 00:09:52,959
to load on the webpage or you got it

00:09:50,950 --> 00:09:55,089
from the internet on the page fairly

00:09:52,959 --> 00:09:57,010
quickly and that's when performance

00:09:55,089 --> 00:09:58,690
starts actually you can starts to

00:09:57,010 --> 00:10:00,760
actually see performance because once

00:09:58,690 --> 00:10:02,230
you have the resources the browser is

00:10:00,760 --> 00:10:03,910
gonna start rendering them the

00:10:02,230 --> 00:10:05,980
connection is one bit as soon as the

00:10:03,910 --> 00:10:07,480
first resource hits the browser is going

00:10:05,980 --> 00:10:08,800
to start rendering them and doing stuff

00:10:07,480 --> 00:10:11,020
with them and that's when you see

00:10:08,800 --> 00:10:14,020
performance now the way performance

00:10:11,020 --> 00:10:16,779
works is you've got record they make a

00:10:14,020 --> 00:10:19,870
snapshot of it and kinda debug on the

00:10:16,779 --> 00:10:22,320
snapshot because no website loads the

00:10:19,870 --> 00:10:25,060
same twice in a row I don't think even a

00:10:22,320 --> 00:10:28,930
just HTML page is gonna load in the same

00:10:25,060 --> 00:10:31,690
timings twice in a row some people say

00:10:28,930 --> 00:10:34,779
three snapshots some people say seven

00:10:31,690 --> 00:10:36,339
snapshots I'll just do one because I'm

00:10:34,779 --> 00:10:38,860
lazy here so I'm gonna record

00:10:36,339 --> 00:10:42,040
performance I'm gonna scroll around for

00:10:38,860 --> 00:10:47,410
a bit and then I'm gonna shift refresh

00:10:42,040 --> 00:10:50,649
my whole thing and I'm gonna stop

00:10:47,410 --> 00:10:53,940
recording so you see in terms of the of

00:10:50,649 --> 00:11:01,570
the website it's not really a big deal

00:10:53,940 --> 00:11:03,899
as this like weddings website category

00:11:01,570 --> 00:11:03,899
page

00:11:05,930 --> 00:11:13,540
how do I do categories this integrity

00:11:08,710 --> 00:11:17,240
yeah okay so I'm gonna throw this away

00:11:13,540 --> 00:11:20,660
gonna start according performance I'm

00:11:17,240 --> 00:11:23,000
gonna scroll and then I'm gonna shift

00:11:20,660 --> 00:11:24,860
refresh it someone gonna get fired over

00:11:23,000 --> 00:11:27,110
this are the developers actually in the

00:11:24,860 --> 00:11:30,350
room right amazing

00:11:27,110 --> 00:11:32,270
yes I'll take it easy so you see the

00:11:30,350 --> 00:11:36,050
difference between this and the first

00:11:32,270 --> 00:11:38,180
page the first page I did this

00:11:36,050 --> 00:11:40,280
performance recording and I was one

00:11:38,180 --> 00:11:42,020
percent buffer fool I did the same thing

00:11:40,280 --> 00:11:43,700
when the category page I was 8 percent

00:11:42,020 --> 00:11:45,230
buffer fool and that's because the

00:11:43,700 --> 00:11:46,760
browser can only handle so much

00:11:45,230 --> 00:11:48,830
happening at the same time when he do

00:11:46,760 --> 00:11:50,870
performance or memory you're taking a

00:11:48,830 --> 00:11:52,580
toll on the browser network maybe but

00:11:50,870 --> 00:11:55,010
not so much you're taking a toll on the

00:11:52,580 --> 00:11:59,330
browser so it's actually Firefox is

00:11:55,010 --> 00:12:01,100
actually going to show you this takes at

00:11:59,330 --> 00:12:03,080
all right so I'm gonna look at what I

00:12:01,100 --> 00:12:04,970
did I started scrolling for a bit and

00:12:03,080 --> 00:12:10,220
scrolling didn't do a lot of things for

00:12:04,970 --> 00:12:12,200
me the color coded I can zoom in if any

00:12:10,220 --> 00:12:17,060
further so the whole thing is color

00:12:12,200 --> 00:12:19,430
coded and it shows me purple as style

00:12:17,060 --> 00:12:21,830
changes and that means I scrolled a bit

00:12:19,430 --> 00:12:24,560
some some more stuff came into view I

00:12:21,830 --> 00:12:27,710
hovered over bit and then the Styles had

00:12:24,560 --> 00:12:30,080
to change for it it's not really it's

00:12:27,710 --> 00:12:33,260
not really a problem except I've got a

00:12:30,080 --> 00:12:36,140
ton of them and that means out of those

00:12:33,260 --> 00:12:38,270
yes as out of that CSS file you've got a

00:12:36,140 --> 00:12:40,100
lot of competing rules or you've got a

00:12:38,270 --> 00:12:42,980
lot of things that change state based on

00:12:40,100 --> 00:12:44,930
where my mouse is and that's why I see a

00:12:42,980 --> 00:12:47,120
bunch of recalculating style I actually

00:12:44,930 --> 00:12:50,960
only see one paint in the whole thing

00:12:47,120 --> 00:12:52,910
which is good so the way this happens is

00:12:50,960 --> 00:12:55,750
once you start changing things with

00:12:52,910 --> 00:12:59,270
JavaScript that that have to do with CSS

00:12:55,750 --> 00:13:01,190
it needs to repaint the browser instead

00:12:59,270 --> 00:13:02,900
of just recalculating style because you

00:13:01,190 --> 00:13:05,540
basically said I have the CSS style

00:13:02,900 --> 00:13:07,490
worked with it and then you start

00:13:05,540 --> 00:13:09,170
scrolling about and things happen but as

00:13:07,490 --> 00:13:10,970
soon as you tell it tell it from

00:13:09,170 --> 00:13:12,980
JavaScript look there's this new rule

00:13:10,970 --> 00:13:14,420
for it it's gonna have to do a repaint

00:13:12,980 --> 00:13:15,529
because it does not understand where to

00:13:14,420 --> 00:13:18,019
put that in

00:13:15,529 --> 00:13:19,730
context of the of the styles so that's

00:13:18,019 --> 00:13:21,829
actually good it's better than most

00:13:19,730 --> 00:13:24,139
websites out there there's some websites

00:13:21,829 --> 00:13:26,720
that in the paint category you get right

00:13:24,139 --> 00:13:29,329
up paint every few seconds and that's

00:13:26,720 --> 00:13:31,370
because you interacted with JavaScript

00:13:29,329 --> 00:13:34,129
on the Dom there's a bunch of Dom events

00:13:31,370 --> 00:13:35,959
in here or I just hovered on it so

00:13:34,129 --> 00:13:40,279
there's a bunch of Dom events in here

00:13:35,959 --> 00:13:42,709
that trigger repaint on the browser now

00:13:40,279 --> 00:13:46,579
I'm gonna look for it it's just this is

00:13:42,709 --> 00:13:47,269
me scrolling Dom events and styles how

00:13:46,579 --> 00:13:49,269
do you fix that

00:13:47,269 --> 00:13:52,790
how do you stop me from triggering

00:13:49,269 --> 00:13:54,170
recalculating style and Dom events do

00:13:52,790 --> 00:13:56,360
you really need hover effects on all

00:13:54,170 --> 00:13:58,220
buttons if you do I'm sorry it's gonna

00:13:56,360 --> 00:14:00,290
take a perform install if you don't you

00:13:58,220 --> 00:14:03,110
don't really need to put them in and

00:14:00,290 --> 00:14:13,160
want to look at the page to the point

00:14:03,110 --> 00:14:15,110
where I think I refreshed here right so

00:14:13,160 --> 00:14:18,259
this is where I started doing the

00:14:15,110 --> 00:14:21,199
Refresh what my browser understands by

00:14:18,259 --> 00:14:25,519
that as right let's keep the web debate

00:14:21,199 --> 00:14:27,740
I was in in sort of a dead zone ready to

00:14:25,519 --> 00:14:29,720
decommission it and let's show the new

00:14:27,740 --> 00:14:32,029
stuff but the decommissioning bed means

00:14:29,720 --> 00:14:32,870
all your JavaScript that's in there is

00:14:32,029 --> 00:14:35,120
taking at all

00:14:32,870 --> 00:14:37,670
and technically when you're doing

00:14:35,120 --> 00:14:39,529
refresh on your website only your

00:14:37,670 --> 00:14:41,360
website suffers but most of it is gonna

00:14:39,529 --> 00:14:43,129
be oh there is a navigation and a new

00:14:41,360 --> 00:14:45,529
page so it actually make you're making

00:14:43,129 --> 00:14:48,680
the next page a bit slower just because

00:14:45,529 --> 00:14:51,709
I got JavaScript trying to dump the

00:14:48,680 --> 00:14:53,569
garbage collection and it's trying to do

00:14:51,709 --> 00:14:55,519
it non incrementally and it's basically

00:14:53,569 --> 00:14:57,379
saying I don't really care just dump

00:14:55,519 --> 00:15:01,129
dump dump let's get a block of thread

00:14:57,379 --> 00:15:03,860
for a bit and then after I did that it

00:15:01,129 --> 00:15:06,800
started loading the new bit and the new

00:15:03,860 --> 00:15:08,929
bits come with sty recalculations

00:15:06,800 --> 00:15:12,259
I don't understand what I do function

00:15:08,929 --> 00:15:14,300
calls and that probably means your

00:15:12,259 --> 00:15:16,069
JavaScript starts doing things as soon

00:15:14,300 --> 00:15:17,899
as it hits the page do I want to know

00:15:16,069 --> 00:15:19,699
what's it built in do I want to look

00:15:17,899 --> 00:15:24,559
under the hood are you gonna tell me is

00:15:19,699 --> 00:15:26,750
it react No thank God right so it still

00:15:24,559 --> 00:15:29,510
means your JavaScript starts doing stuff

00:15:26,750 --> 00:15:31,880
to the page as soon as it loads

00:15:29,510 --> 00:15:38,600
the timeout beds are the ones that keep

00:15:31,880 --> 00:15:39,950
popping up let's look at what so if I

00:15:38,600 --> 00:15:42,110
actually want to see what's the

00:15:39,950 --> 00:15:44,360
offending piece of code I can every vent

00:15:42,110 --> 00:15:46,250
has something tied to it and this for

00:15:44,360 --> 00:15:48,200
example once I click on it it opened the

00:15:46,250 --> 00:15:51,200
debugger for me so I can look at the

00:15:48,200 --> 00:15:55,610
line of code and that's I set my my

00:15:51,200 --> 00:15:57,170
script is loaded config whatever I

00:15:55,610 --> 00:16:00,410
loaded something and that's the piece of

00:15:57,170 --> 00:16:02,780
code that made that specific trigger if

00:16:00,410 --> 00:16:05,410
we go back to it I can look at what

00:16:02,780 --> 00:16:05,410
maybe

00:16:07,010 --> 00:16:13,160
right done event that's the load Dom

00:16:10,730 --> 00:16:16,100
event that means the the Dom even loaded

00:16:13,160 --> 00:16:18,560
page triggered my only problem with it I

00:16:16,100 --> 00:16:20,000
see twice so I means you finish loading

00:16:18,560 --> 00:16:21,470
it and then it is something more in

00:16:20,000 --> 00:16:24,949
JavaScript and it load it again I

00:16:21,470 --> 00:16:27,560
strongly advise you to do dum-dum load

00:16:24,949 --> 00:16:30,139
it just maybe once because it's enough

00:16:27,560 --> 00:16:32,149
and whenever you do load loaded unloaded

00:16:30,139 --> 00:16:33,980
it's going to start doing recalculating

00:16:32,149 --> 00:16:36,079
status is gonna figure out I missed

00:16:33,980 --> 00:16:38,570
something class panic and do it again

00:16:36,079 --> 00:16:42,500
the new browser engines are a lot better

00:16:38,570 --> 00:16:45,290
at this if this isn't your thing this is

00:16:42,500 --> 00:16:47,990
kind of a hard to visualize because you

00:16:45,290 --> 00:16:49,639
see you see the type of events and I can

00:16:47,990 --> 00:16:51,170
see most of the events have to do with

00:16:49,639 --> 00:16:53,360
the Dom in the first part because I

00:16:51,170 --> 00:16:56,149
scrolled around a bit and the second

00:16:53,360 --> 00:16:57,470
part it's just doing stuff stopping

00:16:56,149 --> 00:16:59,360
doing stuff stopping doing stuff

00:16:57,470 --> 00:17:02,410
stopping means you're lazy loading

00:16:59,360 --> 00:17:04,640
something using javascript and this

00:17:02,410 --> 00:17:08,150
you're getting a good frame rate per

00:17:04,640 --> 00:17:10,669
second which is like 50 anything between

00:17:08,150 --> 00:17:13,010
30 and 60 is acceptable anything under

00:17:10,669 --> 00:17:14,390
30 is not if you're doing game the stuff

00:17:13,010 --> 00:17:16,370
on the web you would really want to go

00:17:14,390 --> 00:17:19,189
for sex to your video stuff like that

00:17:16,370 --> 00:17:20,870
you can visualize this whole thing and

00:17:19,189 --> 00:17:25,669
different ways so you can see it as a

00:17:20,870 --> 00:17:28,150
call tree and it shows you let's see if

00:17:25,669 --> 00:17:28,150
I can make it

00:17:28,850 --> 00:17:31,570
knob

00:17:32,940 --> 00:17:35,000
you

00:17:36,030 --> 00:17:38,090
you

00:17:38,290 --> 00:17:45,190
maybe so it's you can see every piece

00:17:43,570 --> 00:17:47,980
javascript that interact on your page or

00:17:45,190 --> 00:17:50,289
every piece of code in a three down view

00:17:47,980 --> 00:17:54,340
so you can see what's the down to the

00:17:50,289 --> 00:17:55,990
level of right this is my most offending

00:17:54,340 --> 00:17:56,649
function that takes the longest it's a

00:17:55,990 --> 00:18:00,250
single one

00:17:56,649 --> 00:18:02,440
it's PDP GS I don't know what PDP does

00:18:00,250 --> 00:18:04,720
but you can figure out right that's my

00:18:02,440 --> 00:18:07,269
problem I'm gonna focus on this one of

00:18:04,720 --> 00:18:10,809
the other things that the flame chart is

00:18:07,269 --> 00:18:12,340
if you want to see it and see this is

00:18:10,809 --> 00:18:14,470
probably the like you can figure out

00:18:12,340 --> 00:18:16,809
where I did refresh because this was

00:18:14,470 --> 00:18:18,460
linear and then I started doing a bunch

00:18:16,809 --> 00:18:20,470
of different things at the same time and

00:18:18,460 --> 00:18:24,519
that's basically the point where I hit

00:18:20,470 --> 00:18:26,590
refresh regularly your page once it

00:18:24,519 --> 00:18:29,620
loads it's going to do stuff linearly

00:18:26,590 --> 00:18:32,259
and that Styles JavaScript and stuff

00:18:29,620 --> 00:18:33,970
like that if you see this it means

00:18:32,259 --> 00:18:35,350
you're doing either a single page app

00:18:33,970 --> 00:18:37,539
that hits the net will give you a few

00:18:35,350 --> 00:18:41,799
times and it's reflashing the view or

00:18:37,539 --> 00:18:45,159
you just reloaded the page so I told you

00:18:41,799 --> 00:18:46,750
this was the recording one of the things

00:18:45,159 --> 00:18:49,090
that I find cool about the the

00:18:46,750 --> 00:18:52,360
performance inspector is you can

00:18:49,090 --> 00:18:54,490
actually import so if you do this in a

00:18:52,360 --> 00:18:58,000
team which probably most of you probably

00:18:54,490 --> 00:18:59,259
are if you if you care about perform or

00:18:58,000 --> 00:19:01,120
if you get to that point with your app

00:18:59,259 --> 00:19:03,340
where performance is an issue probably

00:19:01,120 --> 00:19:05,759
have a big team it's really hard to work

00:19:03,340 --> 00:19:09,490
on performance in a team just because

00:19:05,759 --> 00:19:11,529
your recordings are going to show

00:19:09,490 --> 00:19:13,480
something and your teammates are going

00:19:11,529 --> 00:19:16,149
to show something slightly different

00:19:13,480 --> 00:19:20,080
every time but with the import feature

00:19:16,149 --> 00:19:21,970
so you can save this recording and use

00:19:20,080 --> 00:19:24,159
that as the baseline for the entire team

00:19:21,970 --> 00:19:26,919
and then you can all work on the same

00:19:24,159 --> 00:19:31,500
data instead of having to oh I created

00:19:26,919 --> 00:19:34,419
slightly different data problems so

00:19:31,500 --> 00:19:36,429
Network and performance performance has

00:19:34,419 --> 00:19:39,399
to do just a tiny little bit with

00:19:36,429 --> 00:19:41,950
JavaScript and it's mostly a job my

00:19:39,399 --> 00:19:45,789
JavaScript is triggering out other event

00:19:41,950 --> 00:19:48,580
or streaking out other other stuff or

00:19:45,789 --> 00:19:50,350
it's oh I need a garbage collector what

00:19:48,580 --> 00:19:52,960
happens when you want to go down to

00:19:50,350 --> 00:19:56,990
JavaScript level to function level to

00:19:52,960 --> 00:20:00,410
see where it eats up memory there

00:19:56,990 --> 00:20:03,380
is the memory tab this was where it's

00:20:00,410 --> 00:20:06,460
kinda the same way in except you don't

00:20:03,380 --> 00:20:09,410
record your memory you take a stop

00:20:06,460 --> 00:20:11,300
snapshot of it so they have to record

00:20:09,410 --> 00:20:13,310
anything it's gonna go and grab as much

00:20:11,300 --> 00:20:15,950
memory as it can and then figure out

00:20:13,310 --> 00:20:19,520
what what the memory is used for see if

00:20:15,950 --> 00:20:22,640
I look at this I took a snapshot and I

00:20:19,520 --> 00:20:25,130
can see visually I can see where my what

00:20:22,640 --> 00:20:28,130
my memory is going and that means my dom

00:20:25,130 --> 00:20:33,350
nodes do five megabytes of memory that's

00:20:28,130 --> 00:20:35,810
not a lot with about 5,000 dominoes do I

00:20:33,350 --> 00:20:37,700
want no way I have 5,000 downloads and

00:20:35,810 --> 00:20:39,500
means whenever you create a new element

00:20:37,700 --> 00:20:40,940
or whenever you hide it and close it and

00:20:39,500 --> 00:20:42,860
stuff like that it interacts with dom

00:20:40,940 --> 00:20:46,090
whenever you change the properties on it

00:20:42,860 --> 00:20:48,440
a new domino gets created in memory and

00:20:46,090 --> 00:20:52,640
probably on the page you have close to

00:20:48,440 --> 00:20:54,140
200 300 maybe but it means in memory

00:20:52,640 --> 00:20:55,970
every time you do something with those

00:20:54,140 --> 00:20:59,810
300 notes they get multiplied and

00:20:55,970 --> 00:21:01,820
multiplied and multiplied you strangely

00:20:59,810 --> 00:21:06,290
have two documents on a page most

00:21:01,820 --> 00:21:08,690
websites have one and that means you

00:21:06,290 --> 00:21:11,060
triggered you triggered the dom loaded

00:21:08,690 --> 00:21:12,680
event that means you trigger the

00:21:11,060 --> 00:21:14,390
downloaded event twice so the first

00:21:12,680 --> 00:21:16,880
document that was loaded was saved in

00:21:14,390 --> 00:21:19,010
memory but then we loved it the other

00:21:16,880 --> 00:21:20,630
one it said oopsie I need to create a

00:21:19,010 --> 00:21:22,310
new document for you see how both in

00:21:20,630 --> 00:21:26,870
memory right now even though one isn't

00:21:22,310 --> 00:21:29,860
doing anything the script is the next

00:21:26,870 --> 00:21:32,660
big offender after that so this is

00:21:29,860 --> 00:21:34,700
zoomable so you can see exactly what

00:21:32,660 --> 00:21:39,050
scripts are taking up most of the memory

00:21:34,700 --> 00:21:42,160
I'm gonna look at the biggest one the

00:21:39,050 --> 00:21:44,660
lazy loading PDP is the the ever

00:21:42,160 --> 00:21:47,540
offending PDP that is that's the biggest

00:21:44,660 --> 00:21:49,670
one and then the just-in-time compiler

00:21:47,540 --> 00:21:52,850
is eating some of the that memory up as

00:21:49,670 --> 00:21:54,470
well apparently you've got no file name

00:21:52,850 --> 00:21:56,810
that means you have inline styles

00:21:54,470 --> 00:21:58,790
somewhere in your HTML but anything got

00:21:56,810 --> 00:22:00,830
part of the page the Google tag manager

00:21:58,790 --> 00:22:02,570
that usually shows up if you want

00:22:00,830 --> 00:22:05,330
analytics analytics it could be going to

00:22:02,570 --> 00:22:09,200
be a big chunk of your of your script

00:22:05,330 --> 00:22:10,550
and then you've got objects it's a given

00:22:09,200 --> 00:22:13,550
you work with JavaScript that keeps

00:22:10,550 --> 00:22:15,620
object in memory most of the time it's

00:22:13,550 --> 00:22:17,690
functions objects that you have problems

00:22:15,620 --> 00:22:20,530
with but if you go down the stack you

00:22:17,690 --> 00:22:22,730
can see for example if your regex

00:22:20,530 --> 00:22:25,970
regular expression heavy and stuff like

00:22:22,730 --> 00:22:28,010
that it eats up the memory the strings

00:22:25,970 --> 00:22:29,720
that's not really important everybody

00:22:28,010 --> 00:22:31,850
has strings you could probably cut it

00:22:29,720 --> 00:22:35,810
down with using glass spaces in your

00:22:31,850 --> 00:22:39,890
HTML and stuff like that the other is

00:22:35,810 --> 00:22:41,930
interesting though you've got weird

00:22:39,890 --> 00:22:44,570
stuff the JavaScript engine is going

00:22:41,930 --> 00:22:50,390
like object group and shared and shape

00:22:44,570 --> 00:22:53,780
which D the profiler doesn't know how to

00:22:50,390 --> 00:22:55,790
interpret it comes down to your using

00:22:53,780 --> 00:22:59,240
custom classes in your JavaScript and

00:22:55,790 --> 00:23:02,240
that get bundled up into other so I've

00:22:59,240 --> 00:23:06,320
showed you how to do I've showed you how

00:23:02,240 --> 00:23:08,750
to do network performance to get you as

00:23:06,320 --> 00:23:10,610
fast as possible to client rendering

00:23:08,750 --> 00:23:13,670
performance on top of other things and

00:23:10,610 --> 00:23:17,150
then memory performance the only part

00:23:13,670 --> 00:23:19,190
where JavaScript actually matters in a

00:23:17,150 --> 00:23:22,040
micro performance optimizations matter I

00:23:19,190 --> 00:23:23,450
mean here which you're not doing too bad

00:23:22,040 --> 00:23:26,810
if you look at the different website

00:23:23,450 --> 00:23:32,660
mine has many many more JavaScript I

00:23:26,810 --> 00:23:35,270
think maybe 100 lines and of course dev

00:23:32,660 --> 00:23:43,180
tools failed why wouldn't it it's a live

00:23:35,270 --> 00:23:47,510
demo so if you look at mine you can see

00:23:43,180 --> 00:23:51,770
my script is actually smaller than my

00:23:47,510 --> 00:23:54,290
strings it's minimal but I have my Dom

00:23:51,770 --> 00:24:00,820
nodes are big and this is a static

00:23:54,290 --> 00:24:04,010
website with maybe maybe 100 lines

00:24:00,820 --> 00:24:07,430
hundred and something lines of HTML tops

00:24:04,010 --> 00:24:10,100
and that still shows as 763 count

00:24:07,430 --> 00:24:11,600
whereas your showed 5,000 and you can

00:24:10,100 --> 00:24:13,420
look at that the stuff you can improve

00:24:11,600 --> 00:24:17,650
if you want to go down to actual

00:24:13,420 --> 00:24:21,070
JavaScript performance you saw the

00:24:17,650 --> 00:24:21,070
performance bit

00:24:22,990 --> 00:24:25,990
right

00:24:26,320 --> 00:24:33,070
so if you want to go down to the

00:24:29,330 --> 00:24:33,070
JavaScript level you can

00:24:35,930 --> 00:24:42,330
but your browser dev tools isn't the

00:24:39,990 --> 00:24:44,910
best tool for it like network

00:24:42,330 --> 00:24:47,100
performance and memory are not the best

00:24:44,910 --> 00:24:49,380
way to trace all your JavaScript I

00:24:47,100 --> 00:24:51,360
actually think the console is the best

00:24:49,380 --> 00:24:54,450
way to trace your JavaScript but I'm

00:24:51,360 --> 00:24:57,060
running out of time yeah I'm running out

00:24:54,450 --> 00:24:59,940
of time so I'll stop here for a bit

00:24:57,060 --> 00:25:02,910
I think the console is the perfect way

00:24:59,940 --> 00:25:04,680
to basically debug your JavaScript and

00:25:02,910 --> 00:25:08,240
there's two things in the console API

00:25:04,680 --> 00:25:17,210
which help you a lot and that's console

00:25:08,240 --> 00:25:19,730
that time and console that time and and

00:25:17,210 --> 00:25:22,500
that takes you how long your JavaScript

00:25:19,730 --> 00:25:24,840
executes or how long how long it took

00:25:22,500 --> 00:25:29,010
between these points in your execution

00:25:24,840 --> 00:25:32,340
and the other stuff is console that

00:25:29,010 --> 00:25:34,740
trace console that trace isn't gonna

00:25:32,340 --> 00:25:38,460
work as I have an anonymous function in

00:25:34,740 --> 00:25:41,340
here but console dot trace shows you

00:25:38,460 --> 00:25:44,910
every function you have to pass through

00:25:41,340 --> 00:25:48,570
or skip through to get to the point

00:25:44,910 --> 00:25:50,880
you're at now and that means this

00:25:48,570 --> 00:25:52,890
function gets called at the first level

00:25:50,880 --> 00:25:55,320
at the second level and at the seventh

00:25:52,890 --> 00:25:58,290
level of my execution this is the thing

00:25:55,320 --> 00:26:01,860
I'm gonna optimize first if it's one of

00:25:58,290 --> 00:26:04,200
those oh this thing actually maybe gets

00:26:01,860 --> 00:26:05,910
called once every blue moon

00:26:04,200 --> 00:26:08,610
I'm not gonna optimize that I'm gonna

00:26:05,910 --> 00:26:10,560
stop it here if you have questions now's

00:26:08,610 --> 00:26:18,350
a good time I still I think I still have

00:26:10,560 --> 00:26:18,350
like two minutes for questions yes

00:26:21,570 --> 00:26:26,990
perfect yes it's a blank page no the

00:26:24,570 --> 00:26:30,660
whole point that the whole point of

00:26:26,990 --> 00:26:32,760
performance optimization is you optimize

00:26:30,660 --> 00:26:35,040
you can't make it perfect you have to

00:26:32,760 --> 00:26:37,470
make trade-offs every day do you want

00:26:35,040 --> 00:26:39,300
images images are usually big you need

00:26:37,470 --> 00:26:41,700
images for your website is this business

00:26:39,300 --> 00:26:46,290
critical well it's gonna be big at least

00:26:41,700 --> 00:26:48,510
you can load them either five at five at

00:26:46,290 --> 00:26:50,670
the same time all in one or you can load

00:26:48,510 --> 00:26:51,240
them bed by bed by with streams and

00:26:50,670 --> 00:26:53,460
stuff like that

00:26:51,240 --> 00:26:55,830
Oh via WebSockets keep a connection

00:26:53,460 --> 00:26:58,200
alive if you're doing seven images the

00:26:55,830 --> 00:26:59,760
HTTP keep alive and since seven images

00:26:58,200 --> 00:27:02,370
on the same connection instead of having

00:26:59,760 --> 00:27:05,300
to renegotiate the same connection over

00:27:02,370 --> 00:27:05,300
and over and over again

00:27:05,830 --> 00:27:14,810
cool any other questions

00:27:09,280 --> 00:27:19,460
yes the marketing stripped right so

00:27:14,810 --> 00:27:22,100
scripts scripts are usually static even

00:27:19,460 --> 00:27:25,310
Google Analytics you can download Google

00:27:22,100 --> 00:27:28,540
Analytics run it bundle it with your own

00:27:25,310 --> 00:27:31,370
script the problem with the script is

00:27:28,540 --> 00:27:32,510
usually well you need analytics you're

00:27:31,370 --> 00:27:35,390
going to live with Google tag manager

00:27:32,510 --> 00:27:37,880
you saw that was a chunk it's one of the

00:27:35,390 --> 00:27:41,420
trade-offs you want at hyper performant

00:27:37,880 --> 00:27:42,710
you give up analytics which I wouldn't

00:27:41,420 --> 00:27:44,690
do to be honest I wouldn't do I like

00:27:42,710 --> 00:27:47,780
analytics I like knowing how my website

00:27:44,690 --> 00:27:50,270
performs outside of my little bubble I

00:27:47,780 --> 00:27:52,160
wouldn't trade it for that but the 17

00:27:50,270 --> 00:27:53,930
that you can change because it's

00:27:52,160 --> 00:27:55,790
probably three external and 17 that you

00:27:53,930 --> 00:27:56,870
make seventeen that you change that's

00:27:55,790 --> 00:27:58,940
the bulk of your performance

00:27:56,870 --> 00:28:01,160
optimization nobody says you can make it

00:27:58,940 --> 00:28:03,560
perfect but you can take care of the

00:28:01,160 --> 00:28:05,510
stuff that you can influence for example

00:28:03,560 --> 00:28:06,980
you don't control the hosting or you

00:28:05,510 --> 00:28:08,600
have to go to DevOps to control the

00:28:06,980 --> 00:28:10,910
hosting it's not really a front-end

00:28:08,600 --> 00:28:13,040
developers job to control the hosting or

00:28:10,910 --> 00:28:15,920
the server you're running in but it's

00:28:13,040 --> 00:28:18,740
something you can see and you can debug

00:28:15,920 --> 00:28:20,150
you don't have to necessarily fix it you

00:28:18,740 --> 00:28:22,520
can have someone else fix it but you can

00:28:20,150 --> 00:28:26,250
say hey this is a problem and I think

00:28:22,520 --> 00:28:27,760
that's time and I'm gonna thank you

00:28:26,250 --> 00:28:30,930
[Applause]

00:28:27,760 --> 00:28:30,930

YouTube URL: https://www.youtube.com/watch?v=l23fbEZ-jKE


