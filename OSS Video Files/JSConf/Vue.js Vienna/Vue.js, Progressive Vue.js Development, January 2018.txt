Title: Vue.js, Progressive Vue.js Development, January 2018
Publication date: 2018-02-24
Playlist: Vue.js Vienna
Description: 
	Christoph DÃ¶berl will talk about how to incrementally grow and advance an application by the use of SFC (single file components).
Captions: 
	00:00:00,030 --> 00:00:04,859
hello everybody thanks for being here

00:00:01,829 --> 00:00:07,470
today mmm and special thanks to up for

00:00:04,859 --> 00:00:08,429
organizing this Vienna we had a few

00:00:07,470 --> 00:00:10,950
cheer sweetheart

00:00:08,429 --> 00:00:12,900
that's how it's called but you know

00:00:10,950 --> 00:00:14,690
friends we like to call it UNH yes

00:00:12,900 --> 00:00:16,980
that's why I've have written down the

00:00:14,690 --> 00:00:21,840
slides today mmm

00:00:16,980 --> 00:00:23,609
I think you know what we mean by that my

00:00:21,840 --> 00:00:25,800
talk will be split into two parts on

00:00:23,609 --> 00:00:27,930
part 1 I will cover the basic UGS

00:00:25,800 --> 00:00:29,400
features and in part 2 we'll have a look

00:00:27,930 --> 00:00:35,670
at the comic component-based

00:00:29,400 --> 00:00:38,870
architecture provided by Fuji s so if

00:00:35,670 --> 00:00:42,840
you want to get started with futures

00:00:38,870 --> 00:00:47,700
let's ask the audience have you already

00:00:42,840 --> 00:00:51,210
worked with futures and how advanced was

00:00:47,700 --> 00:00:56,280
your usage of the framework so who has

00:00:51,210 --> 00:00:59,609
already seen a hello world okay pretty

00:00:56,280 --> 00:01:06,060
much everyone and who is it in

00:00:59,609 --> 00:01:08,010
production not so many who created a app

00:01:06,060 --> 00:01:10,650
for private purposes or something like

00:01:08,010 --> 00:01:12,659
that okay

00:01:10,650 --> 00:01:16,560
so there are some advanced users here

00:01:12,659 --> 00:01:18,570
and other some users here who call

00:01:16,560 --> 00:01:20,840
themselves beginners and want to know

00:01:18,570 --> 00:01:24,210
how to get started with you Cheers

00:01:20,840 --> 00:01:26,280
okay so this talk is for you I will

00:01:24,210 --> 00:01:29,009
really cover the basics of you chairs

00:01:26,280 --> 00:01:31,710
and how you get started into app

00:01:29,009 --> 00:01:34,890
development by starting with this hello

00:01:31,710 --> 00:01:39,570
world seen on the screen so and in in

00:01:34,890 --> 00:01:43,020
this code we can see the most important

00:01:39,570 --> 00:01:48,960
concept of futures already which is data

00:01:43,020 --> 00:01:52,430
binding view takes data from our data

00:01:48,960 --> 00:01:56,159
object and binds it to our application

00:01:52,430 --> 00:02:01,439
this is the most important feature of

00:01:56,159 --> 00:02:04,079
futures I would say and like nobody else

00:02:01,439 --> 00:02:06,630
before we have the idea of creating a

00:02:04,079 --> 00:02:07,630
to-do application I think it's very rich

00:02:06,630 --> 00:02:14,200
you know

00:02:07,630 --> 00:02:17,319
and we do it almost life and stage so

00:02:14,200 --> 00:02:23,500
started from the hello world we saw

00:02:17,319 --> 00:02:31,450
earlier we created to do application and

00:02:23,500 --> 00:02:33,160
we start by creating items and rendering

00:02:31,450 --> 00:02:35,500
them as a list so this is another

00:02:33,160 --> 00:02:39,760
important feature of futures we can use

00:02:35,500 --> 00:02:42,190
v4 to end our items in a list another

00:02:39,760 --> 00:02:46,150
thing we see here is event binding so we

00:02:42,190 --> 00:02:48,910
can use key up enter to bind the enter

00:02:46,150 --> 00:02:52,480
key of the input field to our callback

00:02:48,910 --> 00:02:56,019
at item and also we can use at click

00:02:52,480 --> 00:03:00,910
event on our button to bind it to our

00:02:56,019 --> 00:03:03,100
event and we also have two-way binding

00:03:00,910 --> 00:03:07,780
to a from our input element to the

00:03:03,100 --> 00:03:10,239
variable new item which means it doesn't

00:03:07,780 --> 00:03:12,880
already bind it from the applications

00:03:10,239 --> 00:03:15,970
data object to the view it also binds it

00:03:12,880 --> 00:03:20,709
from the input element to our data

00:03:15,970 --> 00:03:22,530
object so it's both directions why is it

00:03:20,709 --> 00:03:25,570
marked okay

00:03:22,530 --> 00:03:28,870
if we want this applications we see here

00:03:25,570 --> 00:03:31,840
we get this we get a list of items we

00:03:28,870 --> 00:03:36,010
can add items and it's almost like a

00:03:31,840 --> 00:03:39,700
tool to do application but actually

00:03:36,010 --> 00:03:45,690
that's nice but we also want to make our

00:03:39,700 --> 00:03:51,720
mark items as done and we can do this by

00:03:45,690 --> 00:03:57,459
first adding component very second

00:03:51,720 --> 00:04:02,260
property done to our items which we can

00:03:57,459 --> 00:04:06,549
use in the view so if the item is done

00:04:02,260 --> 00:04:09,670
we render it as stripe and if not we can

00:04:06,549 --> 00:04:11,709
direct normally so this is another

00:04:09,670 --> 00:04:14,519
important concept conditional rendering

00:04:11,709 --> 00:04:18,940
we can use if-else inside the template

00:04:14,519 --> 00:04:21,610
yeah I see your port I've

00:04:18,940 --> 00:04:26,260
you already know the most important

00:04:21,610 --> 00:04:34,360
concepts we can add items here and it

00:04:26,260 --> 00:04:38,740
goes on so now we get fancy and add some

00:04:34,360 --> 00:04:42,130
more advanced features we can use style

00:04:38,740 --> 00:04:48,880
and class binding unlike this

00:04:42,130 --> 00:04:53,050
so in this Bacchus bar we define the

00:04:48,880 --> 00:04:56,110
width of the bar by calculating how many

00:04:53,050 --> 00:04:58,750
items are already completed and that's

00:04:56,110 --> 00:05:04,030
another interesting thing we can use

00:04:58,750 --> 00:05:07,530
computers to dynamically calculate how

00:05:04,030 --> 00:05:07,530
many items are already completed

00:05:07,740 --> 00:05:13,930
computed power that's right and if you

00:05:11,500 --> 00:05:17,500
look at this example it's already more

00:05:13,930 --> 00:05:21,460
fancy we can also use the check box to

00:05:17,500 --> 00:05:26,050
toggle the to do state and we can remove

00:05:21,460 --> 00:05:29,200
and add items dynamically and I think

00:05:26,050 --> 00:05:31,870
you recognize the progress bar which

00:05:29,200 --> 00:05:35,220
updates automatically so these are the

00:05:31,870 --> 00:05:38,440
basic features of futures

00:05:35,220 --> 00:05:40,419
let's sum it up we have data binding

00:05:38,440 --> 00:05:43,360
we have two-way data binding by the user

00:05:40,419 --> 00:05:47,860
free model we know how to win the lists

00:05:43,360 --> 00:05:51,850
and we know how to bind events by using

00:05:47,860 --> 00:05:55,120
EFT click and death Kia and also we know

00:05:51,850 --> 00:06:00,070
about style and class to bind style and

00:05:55,120 --> 00:06:02,410
class properties to our dom elements so

00:06:00,070 --> 00:06:06,310
we started from a very basic hello world

00:06:02,410 --> 00:06:10,270
application and built it into some kind

00:06:06,310 --> 00:06:12,970
of small application just by adding more

00:06:10,270 --> 00:06:16,419
and more features to it but if we go go

00:06:12,970 --> 00:06:20,919
on this way it might end up into a big

00:06:16,419 --> 00:06:24,700
huge pile of application with more

00:06:20,919 --> 00:06:28,510
spaghetti code and so we should think

00:06:24,700 --> 00:06:30,610
about structuring our code and this is

00:06:28,510 --> 00:06:32,740
where we go to part two

00:06:30,610 --> 00:06:36,159
where we have a look at their

00:06:32,740 --> 00:06:41,460
component-based architecture if we take

00:06:36,159 --> 00:06:45,639
the code for my first example we can

00:06:41,460 --> 00:06:49,300
split it into three parts the CSS the

00:06:45,639 --> 00:06:51,759
HTML and the JavaScript so by structural

00:06:49,300 --> 00:06:54,069
code we could just put down into three

00:06:51,759 --> 00:06:55,719
separate files it would be more

00:06:54,069 --> 00:06:59,590
structured than it is now into one file

00:06:55,719 --> 00:07:03,430
but if we look at it differently we

00:06:59,590 --> 00:07:07,150
could split it into a progress component

00:07:03,430 --> 00:07:10,779
which was the bar we saw earlier we

00:07:07,150 --> 00:07:14,590
could define a to-do item which we

00:07:10,779 --> 00:07:17,860
render in a list we could also packed

00:07:14,590 --> 00:07:19,930
the add item component the input field

00:07:17,860 --> 00:07:23,379
and the button into one component and we

00:07:19,930 --> 00:07:29,610
have all we have a application around it

00:07:23,379 --> 00:07:29,610
that backs it all together so if we

00:07:31,650 --> 00:07:38,129
visualize it on a tree it could looked

00:07:34,839 --> 00:07:40,569
at this we have all smart components

00:07:38,129 --> 00:07:43,379
starting from the app component we have

00:07:40,569 --> 00:07:46,539
the bogus to-do item and edit them in a

00:07:43,379 --> 00:07:50,770
tree like structure similar to the Dom

00:07:46,539 --> 00:07:52,389
as we know it and the bogus bar is just

00:07:50,770 --> 00:07:54,879
its only purpose is displaying the

00:07:52,389 --> 00:07:57,639
progress bar that to-do item displays

00:07:54,879 --> 00:07:59,860
and changes to to-do items and the added

00:07:57,639 --> 00:08:05,789
component is responsible for creating

00:07:59,860 --> 00:08:08,560
new items and vue.js offers us a very

00:08:05,789 --> 00:08:13,060
powerful feature by single file

00:08:08,560 --> 00:08:14,949
components we can put any component or

00:08:13,060 --> 00:08:19,180
feature we want into one signifier

00:08:14,949 --> 00:08:21,750
component so what are they good for we

00:08:19,180 --> 00:08:25,930
can create small and reusable components

00:08:21,750 --> 00:08:28,270
we have the HTML and CSS and JavaScript

00:08:25,930 --> 00:08:32,380
of each component individually come

00:08:28,270 --> 00:08:35,919
combined into one file we also have

00:08:32,380 --> 00:08:39,640
scoped CSS because in the other example

00:08:35,919 --> 00:08:42,880
we only had one global stylesheet

00:08:39,640 --> 00:08:46,899
and that's maybe a bad thing but we need

00:08:42,880 --> 00:08:50,200
a compiler to pack it all together which

00:08:46,899 --> 00:08:54,790
in Alice terms enables us to use eco

00:08:50,200 --> 00:08:57,570
script six typescript SPSS or Aris so it

00:08:54,790 --> 00:08:57,570
can be good or bad

00:08:57,820 --> 00:09:05,980
let's have a look at file structure we

00:09:01,779 --> 00:09:08,920
have very small index.html we have app

00:09:05,980 --> 00:09:11,829
dot view file and our components are in

00:09:08,920 --> 00:09:14,950
two separate few files and we have a

00:09:11,829 --> 00:09:16,990
main J's file for the entry pen entry

00:09:14,950 --> 00:09:20,920
point for web pack for our compiler but

00:09:16,990 --> 00:09:23,350
you can also use another one the

00:09:20,920 --> 00:09:26,440
index.html file is very small we just

00:09:23,350 --> 00:09:29,829
give container with tidy-up and linked

00:09:26,440 --> 00:09:34,560
compiled JavaScript file and you know

00:09:29,829 --> 00:09:39,120
main.js file using ActionScript 6 I only

00:09:34,560 --> 00:09:49,209
define route instance of a few GS model

00:09:39,120 --> 00:09:54,459
which loads dieppe dot view file in our

00:09:49,209 --> 00:09:57,940
app dot view file we now get started by

00:09:54,459 --> 00:10:02,829
importing components so the components

00:09:57,940 --> 00:10:08,110
we create get imported we register them

00:10:02,829 --> 00:10:14,350
as components so we can use them in the

00:10:08,110 --> 00:10:15,699
HTML like ordinary HTML text and now

00:10:14,350 --> 00:10:19,240
this gets more structured because in our

00:10:15,699 --> 00:10:21,970
app we only have those three files and

00:10:19,240 --> 00:10:28,540
it's much more smaller than what we saw

00:10:21,970 --> 00:10:33,970
before and another important thing is by

00:10:28,540 --> 00:10:38,250
using components we need to best pass

00:10:33,970 --> 00:10:42,220
down properties which is looks like this

00:10:38,250 --> 00:10:45,730
so by passing down items property the

00:10:42,220 --> 00:10:48,590
progress bar can use the items in its

00:10:45,730 --> 00:10:52,190
own component

00:10:48,590 --> 00:10:57,300
the doodoo item looks as follows and

00:10:52,190 --> 00:11:00,540
here we see how to define properties as

00:10:57,300 --> 00:11:04,110
we saw before the to-do item gets the

00:11:00,540 --> 00:11:08,270
item property and by decorating it here

00:11:04,110 --> 00:11:13,770
we can use it as it was in our own data

00:11:08,270 --> 00:11:21,540
property so we can display the item in

00:11:13,770 --> 00:11:24,390
our template in the progress bar we get

00:11:21,540 --> 00:11:26,520
the items and we can calculate all the

00:11:24,390 --> 00:11:29,250
stuff as we did before but now it's

00:11:26,520 --> 00:11:33,210
combined into one component and not in

00:11:29,250 --> 00:11:37,770
our routes application and we also get

00:11:33,210 --> 00:11:41,070
scoped CSS which means by adding this

00:11:37,770 --> 00:11:45,030
keyword the CSS styles we define here

00:11:41,070 --> 00:11:47,640
are only only applied to the elements in

00:11:45,030 --> 00:11:49,980
this template so if you have another

00:11:47,640 --> 00:11:52,230
class progress somewhere else in every

00:11:49,980 --> 00:11:54,900
application the Styles defined in here

00:11:52,230 --> 00:11:58,650
won't apply to them which is very handy

00:11:54,900 --> 00:12:02,430
if you got last names you don't have to

00:11:58,650 --> 00:12:05,280
define unicron's for the new item

00:12:02,430 --> 00:12:11,160
component is very small and

00:12:05,280 --> 00:12:13,710
straightforward here we have own data

00:12:11,160 --> 00:12:18,180
property for private data so this data

00:12:13,710 --> 00:12:21,480
is only used by this component which is

00:12:18,180 --> 00:12:24,990
handy in this place because this new

00:12:21,480 --> 00:12:28,020
item is mapped to the input field and we

00:12:24,990 --> 00:12:31,850
pass it to we use it to create a new

00:12:28,020 --> 00:12:34,770
item and we set the value afterwards so

00:12:31,850 --> 00:12:40,380
this property isn't used somewhere else

00:12:34,770 --> 00:12:42,660
in the application and we emit events we

00:12:40,380 --> 00:12:47,010
can emit custom events like this add

00:12:42,660 --> 00:12:49,440
item event in this case to tell the

00:12:47,010 --> 00:12:52,920
parent component that this event

00:12:49,440 --> 00:12:54,960
occurred and this is how

00:12:52,920 --> 00:12:55,710
components communicate with each other

00:12:54,960 --> 00:12:58,020
in

00:12:55,710 --> 00:13:00,960
component-based architecture the parents

00:12:58,020 --> 00:13:06,480
based on properties and the child's emit

00:13:00,960 --> 00:13:10,230
events this is basically only from

00:13:06,480 --> 00:13:14,760
parent to direct child but it works in

00:13:10,230 --> 00:13:19,640
the tree also so Dana gets passed down

00:13:14,760 --> 00:13:24,900
and emits get events get emitted upwards

00:13:19,640 --> 00:13:27,270
so in the talk I told you that we are

00:13:24,900 --> 00:13:31,770
progressively advancing our application

00:13:27,270 --> 00:13:37,470
and if we go back to the application

00:13:31,770 --> 00:13:41,510
code I showed earlier we can spot a

00:13:37,470 --> 00:13:44,160
thing which is not that good in terms of

00:13:41,510 --> 00:13:48,180
component architecture because we have

00:13:44,160 --> 00:13:51,150
already listed at items methods in the

00:13:48,180 --> 00:13:54,720
app itself so this could be packed into

00:13:51,150 --> 00:13:57,780
a component as well so that's how what

00:13:54,720 --> 00:14:00,090
we do we could change our tree we saw

00:13:57,780 --> 00:14:02,610
earlier by adding another component to

00:14:00,090 --> 00:14:07,740
do list which combines you to do add

00:14:02,610 --> 00:14:12,390
item and to add item component and this

00:14:07,740 --> 00:14:15,270
methods we can apply every time by our

00:14:12,390 --> 00:14:21,360
application so it it actually close with

00:14:15,270 --> 00:14:23,450
us the new app that view looks less

00:14:21,360 --> 00:14:26,010
follows we only have two bogus bar and

00:14:23,450 --> 00:14:30,750
newly introduced to do list component

00:14:26,010 --> 00:14:33,510
and we remove the new new items in the

00:14:30,750 --> 00:14:37,350
two items and in the new to do list

00:14:33,510 --> 00:14:43,440
component we render the list and add new

00:14:37,350 --> 00:14:45,660
items of component and list manipulation

00:14:43,440 --> 00:14:48,780
is only handled by this component and

00:14:45,660 --> 00:14:51,420
the rest of the application don't have

00:14:48,780 --> 00:14:53,190
to know about it because it does the

00:14:51,420 --> 00:14:58,350
rest of duplication doesn't have to care

00:14:53,190 --> 00:15:02,130
about it so starting from our world

00:14:58,350 --> 00:15:05,310
hello world application we developed it

00:15:02,130 --> 00:15:07,190
into a small application and now we

00:15:05,310 --> 00:15:11,490
further

00:15:07,190 --> 00:15:15,889
mmm improved it into a structured

00:15:11,490 --> 00:15:19,589
component application and that's how you

00:15:15,889 --> 00:15:24,209
can use few GS for component-based

00:15:19,589 --> 00:15:26,639
architecture and we can incrementally

00:15:24,209 --> 00:15:29,959
improve our application as it goes with

00:15:26,639 --> 00:15:29,959
us Thanks

00:15:30,740 --> 00:15:33,309

YouTube URL: https://www.youtube.com/watch?v=v66tF_pUhv4


