Title: Vue.js Vienna, Vue js Testing Best Practices, September 2018
Publication date: 2018-09-06
Playlist: Vue.js Vienna
Description: 
	_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,430
yeah so some words about the agenda so

00:00:03,120 --> 00:00:09,960
the first topic is the unit testing

00:00:05,430 --> 00:00:13,230
itself and I'd like to say some words

00:00:09,960 --> 00:00:15,750
about the main concept about the terms

00:00:13,230 --> 00:00:19,859
because there are many terms in the

00:00:15,750 --> 00:00:21,689
testing how you can do this and the when

00:00:19,859 --> 00:00:24,630
you should do this because sometimes you

00:00:21,689 --> 00:00:28,140
don't really need to test I mean in many

00:00:24,630 --> 00:00:32,219
cases you you must do that but some

00:00:28,140 --> 00:00:35,040
sometimes it's not necessary so we see

00:00:32,219 --> 00:00:37,920
that then I'm going to talk about an

00:00:35,040 --> 00:00:41,730
approach that's from the testing itself

00:00:37,920 --> 00:00:45,090
and the person I mean this is my

00:00:41,730 --> 00:00:48,379
favorite approach so I hope you welcome

00:00:45,090 --> 00:00:52,320
it and I'm happy to talk about it and

00:00:48,379 --> 00:00:54,899
after we discussed it so by the time we

00:00:52,320 --> 00:00:57,870
know what's the testing how we can do

00:00:54,899 --> 00:01:00,180
this and when we should that even we

00:00:57,870 --> 00:01:02,899
know about approaches about testing then

00:01:00,180 --> 00:01:05,850
we are going to check out some tools

00:01:02,899 --> 00:01:09,950
open-source tools in the JavaScript

00:01:05,850 --> 00:01:13,140
world that you can use for testing and

00:01:09,950 --> 00:01:14,760
if everything prepared then live coding

00:01:13,140 --> 00:01:17,159
because there is no presentation without

00:01:14,760 --> 00:01:18,810
live coding so with me it's gonna be

00:01:17,159 --> 00:01:23,340
good we are going to create an

00:01:18,810 --> 00:01:26,850
application it's a pet adoption app it's

00:01:23,340 --> 00:01:29,579
really a quick app but I'm sure you are

00:01:26,850 --> 00:01:32,670
going to enjoy it and through the live

00:01:29,579 --> 00:01:38,150
coding I will show you how you can

00:01:32,670 --> 00:01:42,390
really write unit tests in a BDD way and

00:01:38,150 --> 00:01:44,970
how you can test your application with

00:01:42,390 --> 00:01:48,990
one of the most popular JavaScript

00:01:44,970 --> 00:01:53,820
framework in the open source world and

00:01:48,990 --> 00:01:57,600
we'll see the best practices so if you

00:01:53,820 --> 00:02:01,439
are ready then let's start it first

00:01:57,600 --> 00:02:03,270
what's unit testing what's unit yeah so

00:02:01,439 --> 00:02:06,270
the unit you need to imagine the unit as

00:02:03,270 --> 00:02:08,780
this puzzle one piece of the puzzle so

00:02:06,270 --> 00:02:11,129
the unit is the most the atomic

00:02:08,780 --> 00:02:12,450
component of your application so image

00:02:11,129 --> 00:02:13,720
in your application you have a huge

00:02:12,450 --> 00:02:17,170
application you have from

00:02:13,720 --> 00:02:20,020
back and many services cloud sir is the

00:02:17,170 --> 00:02:22,930
service that service and but the unit is

00:02:20,020 --> 00:02:25,480
only one atomic component it means that

00:02:22,930 --> 00:02:28,240
if you are OPI guy then if you have a

00:02:25,480 --> 00:02:31,690
class unit is a method only one method

00:02:28,240 --> 00:02:35,160
and and you need to test only this

00:02:31,690 --> 00:02:39,280
method and if this method has any

00:02:35,160 --> 00:02:43,060
dependencies like you see like the red

00:02:39,280 --> 00:02:45,670
one has the blue green yellow then

00:02:43,060 --> 00:02:48,010
because you want to test only one unit

00:02:45,670 --> 00:02:51,910
of your application you need to make

00:02:48,010 --> 00:02:54,940
sure this puzzle piece doesn't depend on

00:02:51,910 --> 00:03:01,090
these other pieces so you need to mock

00:02:54,940 --> 00:03:03,850
it mocks means like you need to use test

00:03:01,090 --> 00:03:06,190
doubles yeah we have many terms and unit

00:03:03,850 --> 00:03:08,260
testing but I'm going to introduce all

00:03:06,190 --> 00:03:16,330
of them so there are test doubles like

00:03:08,260 --> 00:03:18,610
mocks fakes stops and spies and you need

00:03:16,330 --> 00:03:20,410
to use them too to avoid up the

00:03:18,610 --> 00:03:22,750
dependencies because the problem of the

00:03:20,410 --> 00:03:24,520
dependencies is like if you have an

00:03:22,750 --> 00:03:26,770
application you want to test it

00:03:24,520 --> 00:03:30,190
deterministic way so let's say that you

00:03:26,770 --> 00:03:32,260
test it one time the tests work all of

00:03:30,190 --> 00:03:34,570
the tests work yeah then you finish your

00:03:32,260 --> 00:03:36,610
project you give it to the project owner

00:03:34,570 --> 00:03:38,500
like okay I finished the project and he

00:03:36,610 --> 00:03:42,160
runs the application and it doesn't work

00:03:38,500 --> 00:03:44,560
why because maybe your unit tests had

00:03:42,160 --> 00:03:46,420
some dependencies and for example the

00:03:44,560 --> 00:03:48,459
database the Korean one is down so

00:03:46,420 --> 00:03:52,870
that's why your test doesn't work the

00:03:48,459 --> 00:03:59,290
unit test was designed for making the

00:03:52,870 --> 00:04:02,950
application doing the defined outcome it

00:03:59,290 --> 00:04:04,510
means that if there's there's a

00:04:02,950 --> 00:04:08,080
specification your application always

00:04:04,510 --> 00:04:10,150
need needs to work their work like that

00:04:08,080 --> 00:04:12,790
but sometimes you know you need to do

00:04:10,150 --> 00:04:15,910
some changes let's say that for example

00:04:12,790 --> 00:04:18,430
the the goal of the project change you

00:04:15,910 --> 00:04:21,760
need to rewrite that part of the project

00:04:18,430 --> 00:04:23,280
so you revise rewrite some components in

00:04:21,760 --> 00:04:25,410
these components

00:04:23,280 --> 00:04:27,210
separately our units but let's say that

00:04:25,410 --> 00:04:29,880
one components changed the other

00:04:27,210 --> 00:04:31,770
components have reference to this

00:04:29,880 --> 00:04:33,750
component but because you change this

00:04:31,770 --> 00:04:35,820
component cause of the change request

00:04:33,750 --> 00:04:39,240
maybe the other components are broken as

00:04:35,820 --> 00:04:41,730
well so the unit test if you do unit

00:04:39,240 --> 00:04:45,240
testing you will immediately see it it

00:04:41,730 --> 00:04:48,320
will emit if you see if because of the

00:04:45,240 --> 00:04:56,880
last change the application is broken

00:04:48,320 --> 00:05:01,650
let me drink a liter so the unit testing

00:04:56,880 --> 00:05:05,250
is about it let's back to the box so the

00:05:01,650 --> 00:05:08,010
tools that you can use for avoiding of

00:05:05,250 --> 00:05:12,120
the dependencies is like most spice I am

00:05:08,010 --> 00:05:13,080
sure if you are deep testing you have

00:05:12,120 --> 00:05:15,660
already seen it

00:05:13,080 --> 00:05:18,570
for example let's mention a JavaScript

00:05:15,660 --> 00:05:22,229
framework it's called sign on GS you

00:05:18,570 --> 00:05:25,530
know sign on you used it oh yeah so if

00:05:22,229 --> 00:05:30,090
you use mocha and you use sign you can

00:05:25,530 --> 00:05:32,810
find the concept of mocks spies and

00:05:30,090 --> 00:05:37,190
stops actually the funny thing though

00:05:32,810 --> 00:05:40,590
some of them can do same but different

00:05:37,190 --> 00:05:43,590
concepts both all of them is called fake

00:05:40,590 --> 00:05:46,289
the fake is the basic concept of testing

00:05:43,590 --> 00:05:47,580
you need to imagine like if you have a

00:05:46,289 --> 00:05:50,490
service let's say that you have a

00:05:47,580 --> 00:05:52,229
payment service and of course you can

00:05:50,490 --> 00:05:55,800
test the payment service like you always

00:05:52,229 --> 00:05:58,680
you know just buy something and check

00:05:55,800 --> 00:06:01,890
check okay come on it went through the

00:05:58,680 --> 00:06:03,960
payment service so you need to fake the

00:06:01,890 --> 00:06:07,560
service itself like it always returns

00:06:03,960 --> 00:06:11,700
with HTTP 200 so that's the fake itself

00:06:07,560 --> 00:06:14,310
in unit testing the fakes like spy if

00:06:11,700 --> 00:06:19,530
you use spy you want to check like if

00:06:14,310 --> 00:06:22,680
you run a test then this red puzzle

00:06:19,530 --> 00:06:28,100
piece was invoked with these parameters

00:06:22,680 --> 00:06:31,409
so the spies like fake methods and the

00:06:28,100 --> 00:06:32,970
main responsibility of them to check the

00:06:31,409 --> 00:06:36,050
function was called the function was

00:06:32,970 --> 00:06:38,870
called with these parameters etc

00:06:36,050 --> 00:06:42,410
the stops the responsibility of the

00:06:38,870 --> 00:06:46,250
stops is to return with fake value so if

00:06:42,410 --> 00:06:49,099
you fake some provider let's say you

00:06:46,250 --> 00:06:51,710
don't want to always you know fetch the

00:06:49,099 --> 00:06:54,169
data from the database because it's it

00:06:51,710 --> 00:06:56,300
takes so much time and it's impossible

00:06:54,169 --> 00:06:59,210
to do that sometimes the database you

00:06:56,300 --> 00:07:03,380
know it's as did let's say that

00:06:59,210 --> 00:07:06,139
upgrading so you it's not available then

00:07:03,380 --> 00:07:09,889
you can use stubs and the responsibility

00:07:06,139 --> 00:07:11,840
of it to when you do the testing then it

00:07:09,889 --> 00:07:14,030
will return with the data from the

00:07:11,840 --> 00:07:17,750
database but not from the real database

00:07:14,030 --> 00:07:20,570
with a ready find data so your test will

00:07:17,750 --> 00:07:23,630
be deterministic and will already show

00:07:20,570 --> 00:07:26,300
the same result so you are not dependent

00:07:23,630 --> 00:07:29,659
on the database and finally the mocks

00:07:26,300 --> 00:07:34,880
the mocks can do like the spy does and

00:07:29,659 --> 00:07:38,750
like the stub does it so it can check

00:07:34,880 --> 00:07:42,400
the parameter and can return it's a very

00:07:38,750 --> 00:07:47,210
complex and it's used for for a bigger

00:07:42,400 --> 00:07:49,130
predefined the test case so if you need

00:07:47,210 --> 00:07:51,320
to check on it parameters and invocation

00:07:49,130 --> 00:07:53,240
what's happened then you should use pal

00:07:51,320 --> 00:07:55,550
if you would like to return only with a

00:07:53,240 --> 00:07:57,500
value from a service let's see then you

00:07:55,550 --> 00:08:00,020
can use a stub and if you want to check

00:07:57,500 --> 00:08:02,479
both of them then you can use mock but

00:08:00,020 --> 00:08:07,820
mock is the last one because it can be

00:08:02,479 --> 00:08:10,520
or it can over specify the test yeah

00:08:07,820 --> 00:08:15,560
so now we know the testing how is it

00:08:10,520 --> 00:08:18,159
going so let's see how you can you can

00:08:15,560 --> 00:08:21,949
do this the testing usually done by

00:08:18,159 --> 00:08:25,580
using testing frameworks I'm sure you

00:08:21,949 --> 00:08:27,169
have already heard some of them in the

00:08:25,580 --> 00:08:30,340
JavaScript world the most popular

00:08:27,169 --> 00:08:34,399
testing frameworks tester annuals are

00:08:30,340 --> 00:08:37,219
mocha and just I'm going to introduce

00:08:34,399 --> 00:08:41,240
them for you and I will compare one to

00:08:37,219 --> 00:08:43,250
the other so if you use test frameworks

00:08:41,240 --> 00:08:45,410
then it's easy to test I mean that's the

00:08:43,250 --> 00:08:47,209
testing itself is easy if you have good

00:08:45,410 --> 00:08:49,040
tools for it so you need to find the

00:08:47,209 --> 00:08:52,880
tools in JavaScript world

00:08:49,040 --> 00:08:54,800
it's different like if you do if you

00:08:52,880 --> 00:08:58,400
work in the Microsoft Word because in

00:08:54,800 --> 00:09:01,400
Microsoft Word you have a specific

00:08:58,400 --> 00:09:03,800
environment so you get everything out of

00:09:01,400 --> 00:09:06,340
box from the IDE or whatever in

00:09:03,800 --> 00:09:10,190
JavaScript word you are free to choose

00:09:06,340 --> 00:09:16,390
these between these frameworks and the

00:09:10,190 --> 00:09:20,720
tests are run from the ID usually but

00:09:16,390 --> 00:09:23,510
here if you use let's say it's not that

00:09:20,720 --> 00:09:26,420
straightforward because I work with vs

00:09:23,510 --> 00:09:28,310
code you work with vs code so if you

00:09:26,420 --> 00:09:30,740
work with vs code that's my experience

00:09:28,310 --> 00:09:32,750
so you must know that we as code is not

00:09:30,740 --> 00:09:36,470
for a specific language so it's a

00:09:32,750 --> 00:09:38,900
generic ID so it's it's hard to run a

00:09:36,470 --> 00:09:40,340
test from it because we s code itself

00:09:38,900 --> 00:09:42,710
doesn't know that okay you want to run

00:09:40,340 --> 00:09:44,900
PHP test you want to want to run

00:09:42,710 --> 00:09:47,660
JavaScript test so you need to add some

00:09:44,900 --> 00:09:49,700
frameworks but which framework the

00:09:47,660 --> 00:09:53,600
framework depends on the test Runner the

00:09:49,700 --> 00:09:56,780
test Runner is a third party so you need

00:09:53,600 --> 00:09:58,520
to gain some experience with this to

00:09:56,780 --> 00:10:01,550
choose the best environment the best

00:09:58,520 --> 00:10:03,260
tester the best framework and other

00:10:01,550 --> 00:10:09,170
tools but don't worry because I'm going

00:10:03,260 --> 00:10:11,270
to show them to you yeah and so that's

00:10:09,170 --> 00:10:15,080
it a binary you know about unit testing

00:10:11,270 --> 00:10:17,360
you know about about frameworks and how

00:10:15,080 --> 00:10:20,500
you can run it so the big question is

00:10:17,360 --> 00:10:23,450
like when you need to write unit tests

00:10:20,500 --> 00:10:28,160
according to the project manager usually

00:10:23,450 --> 00:10:30,320
always but for yesterday you know and so

00:10:28,160 --> 00:10:34,880
there is no excess RAM there is no extra

00:10:30,320 --> 00:10:38,240
time for doing unit testing but so the

00:10:34,880 --> 00:10:40,700
quicker that quick answer is like you

00:10:38,240 --> 00:10:43,820
should really do always do unit testing

00:10:40,700 --> 00:10:46,340
and the reason is like you need to test

00:10:43,820 --> 00:10:48,800
your application anyhow to be honest

00:10:46,340 --> 00:10:51,710
yeah so usually if you have a small

00:10:48,800 --> 00:10:54,170
application how you test it you write

00:10:51,710 --> 00:10:56,660
some components and then you press let's

00:10:54,170 --> 00:11:00,170
say f5 your application is running you

00:10:56,660 --> 00:11:01,640
go through the application in the

00:11:00,170 --> 00:11:03,950
browser and the

00:11:01,640 --> 00:11:06,530
look at that does it work or not it

00:11:03,950 --> 00:11:10,090
works believe me I did this one it

00:11:06,530 --> 00:11:12,830
really works until 10 components and

00:11:10,090 --> 00:11:14,660
until the first change request the

00:11:12,830 --> 00:11:16,520
problem is that if you have a really big

00:11:14,660 --> 00:11:19,760
application that's a real production

00:11:16,520 --> 00:11:24,080
application then you can easily found

00:11:19,760 --> 00:11:27,500
yourself with that 100 1000 components

00:11:24,080 --> 00:11:28,970
and so far so good so you have one

00:11:27,500 --> 00:11:30,920
thousand component but the problem is

00:11:28,970 --> 00:11:34,550
that when the first change request

00:11:30,920 --> 00:11:39,080
arrives and you really need to rewrite

00:11:34,550 --> 00:11:41,150
some part of the application then it's

00:11:39,080 --> 00:11:43,190
it's pretty hard to manage because if

00:11:41,150 --> 00:11:45,890
you have one thousand components and

00:11:43,190 --> 00:11:48,080
it's not tested only functionally I mean

00:11:45,890 --> 00:11:52,490
you go through and click in and it work

00:11:48,080 --> 00:11:55,220
ok it can go to prod yeah we see and

00:11:52,490 --> 00:11:58,580
then it's ok but if this red puzzle

00:11:55,220 --> 00:12:02,690
let's say that it's went red I mean the

00:11:58,580 --> 00:12:06,230
doesn't work then the specific part of

00:12:02,690 --> 00:12:08,810
the application is broken and you can

00:12:06,230 --> 00:12:11,060
you know you can check it through like

00:12:08,810 --> 00:12:13,010
through smoke tests you can check it

00:12:11,060 --> 00:12:17,090
through functional tests but it it

00:12:13,010 --> 00:12:19,820
consumes so much time so and we as a

00:12:17,090 --> 00:12:21,800
developers we are usually lazy to do

00:12:19,820 --> 00:12:24,140
this if you have a tester guy in your

00:12:21,800 --> 00:12:26,270
team then it's ok so he can do this of

00:12:24,140 --> 00:12:28,940
course I did my work he will finish it

00:12:26,270 --> 00:12:30,710
yeah but it shouldn't work like this way

00:12:28,940 --> 00:12:33,200
because that guy is busy as well because

00:12:30,710 --> 00:12:36,020
on this planet everybody's busy nowadays

00:12:33,200 --> 00:12:39,320
so if you do you need testing them if

00:12:36,020 --> 00:12:41,810
you change something and this red puzzle

00:12:39,320 --> 00:12:43,850
piece would break the blue one and you

00:12:41,810 --> 00:12:47,630
know the other ones then the unit tests

00:12:43,850 --> 00:12:51,080
would represent it reflect it to do it

00:12:47,630 --> 00:12:53,540
immediately so you would get a feedback

00:12:51,080 --> 00:12:57,560
even if they you can fix it and then you

00:12:53,540 --> 00:13:00,460
can send it to the CI if you use any

00:12:57,560 --> 00:13:00,460
continuous integration

00:13:03,779 --> 00:13:22,899
cold coverage that's a I mean I'm really

00:13:19,449 --> 00:13:25,240
happy for your question and really like

00:13:22,899 --> 00:13:27,610
to ask everybody to ask because this is

00:13:25,240 --> 00:13:29,290
the time when you can ask about unit

00:13:27,610 --> 00:13:32,800
testing because usually nobody speaks

00:13:29,290 --> 00:13:34,779
about it and but you can do it at the

00:13:32,800 --> 00:13:39,120
end of the presentation so don't forget

00:13:34,779 --> 00:13:41,800
it just note it down you can write me

00:13:39,120 --> 00:13:44,920
yeah so that's the reason why you should

00:13:41,800 --> 00:13:47,199
unit testing to avoid of the wasting

00:13:44,920 --> 00:13:49,990
time when your project is really big

00:13:47,199 --> 00:13:52,300
some okay other case when you shouldn't

00:13:49,990 --> 00:13:55,420
do unit testing because we need to talk

00:13:52,300 --> 00:13:57,250
about this part as well when you let's

00:13:55,420 --> 00:13:59,259
say you use all pee and you have some

00:13:57,250 --> 00:14:01,480
design patterns that that makes it

00:13:59,259 --> 00:14:03,730
impossible to test I mean it's not

00:14:01,480 --> 00:14:05,769
impasse is never impossible just you

00:14:03,730 --> 00:14:08,560
need to work around but that's it it's

00:14:05,769 --> 00:14:11,079
so much time then we all know about

00:14:08,560 --> 00:14:17,800
these patterns that makes it really hard

00:14:11,079 --> 00:14:19,870
to test testing is not about only unit

00:14:17,800 --> 00:14:23,740
testing so we have multiple kind of

00:14:19,870 --> 00:14:34,180
testing unit tests are the the biggest

00:14:23,740 --> 00:14:35,259
part of your application so it should it

00:14:34,180 --> 00:14:37,269
should be the biggest part of your

00:14:35,259 --> 00:14:40,449
application because the whole

00:14:37,269 --> 00:14:43,180
application consists of units and all of

00:14:40,449 --> 00:14:46,449
the units should be tested yeah but then

00:14:43,180 --> 00:14:49,240
let's say if you check one if you check

00:14:46,449 --> 00:14:51,880
your application per unit then it's it's

00:14:49,240 --> 00:14:54,220
really good you can really make a huge

00:14:51,880 --> 00:14:56,620
code coverage let's say it's impossible

00:14:54,220 --> 00:15:00,699
but let's say that 100% code coverage

00:14:56,620 --> 00:15:02,889
per unit the problem is that if you run

00:15:00,699 --> 00:15:04,269
your application and when these puzzle

00:15:02,889 --> 00:15:07,810
pieces are connected

00:15:04,269 --> 00:15:10,720
maybe you checked it separately like

00:15:07,810 --> 00:15:11,649
unit per unit but if you want to use it

00:15:10,720 --> 00:15:14,380
in production mode

00:15:11,649 --> 00:15:15,400
maybe this unit doesn't really fit

00:15:14,380 --> 00:15:17,470
together or you

00:15:15,400 --> 00:15:21,880
have an external dependency that you may

00:15:17,470 --> 00:15:24,670
be mocked so you used some mocking code

00:15:21,880 --> 00:15:27,670
and your external dependency doesn't

00:15:24,670 --> 00:15:29,980
return with with that data that you've

00:15:27,670 --> 00:15:32,860
tested for example so that's why there

00:15:29,980 --> 00:15:35,500
are integration test integration tests

00:15:32,860 --> 00:15:36,390
is for external dependencies you can

00:15:35,500 --> 00:15:40,060
test database

00:15:36,390 --> 00:15:42,580
cetera and when we tested the database

00:15:40,060 --> 00:15:45,190
it's still not sure everything works

00:15:42,580 --> 00:15:50,110
well because let's say that you have

00:15:45,190 --> 00:15:52,120
your your desktop application yeah good

00:15:50,110 --> 00:15:53,710
old times so you have the desktop

00:15:52,120 --> 00:15:55,930
application you have a web application

00:15:53,710 --> 00:15:59,110
and you have a mobile application as

00:15:55,930 --> 00:16:00,910
well so all of them uses the same

00:15:59,110 --> 00:16:02,860
database all of them was tested

00:16:00,910 --> 00:16:06,850
everything is unit tested everything is

00:16:02,860 --> 00:16:08,950
integration testing and then let's say

00:16:06,850 --> 00:16:12,340
that's somebody accidentally does

00:16:08,950 --> 00:16:14,920
something on the mobile that the desktop

00:16:12,340 --> 00:16:17,890
application just can't handle so that

00:16:14,920 --> 00:16:21,910
that's that's really bad so we have

00:16:17,890 --> 00:16:27,400
end-to-end testing as well when you test

00:16:21,910 --> 00:16:32,920
everything together so my favorite

00:16:27,400 --> 00:16:36,190
approach BDD BDD is from from TDD and

00:16:32,920 --> 00:16:39,550
TDD is from unit test so actually the

00:16:36,190 --> 00:16:43,720
BDD combines the the practices and the

00:16:39,550 --> 00:16:45,750
principles of DDD and combines the

00:16:43,720 --> 00:16:49,440
practices from the domain-driven design

00:16:45,750 --> 00:16:53,200
you are familiar with DDD we have these

00:16:49,440 --> 00:16:56,800
really good relations so domain-driven

00:16:53,200 --> 00:17:00,700
design the main point is like you you

00:16:56,800 --> 00:17:02,470
write your back-end around the domain so

00:17:00,700 --> 00:17:05,640
the customer can understand that the

00:17:02,470 --> 00:17:10,150
objects are represented in the

00:17:05,640 --> 00:17:20,920
represented as business models BDD says

00:17:10,150 --> 00:17:23,950
that basically you do TDD but in in you

00:17:20,920 --> 00:17:26,170
be qutuz language so the customer can

00:17:23,950 --> 00:17:29,490
understand your application through the

00:17:26,170 --> 00:17:32,130
tests so when

00:17:29,490 --> 00:17:35,760
let's say that at scribble we do I

00:17:32,130 --> 00:17:37,530
mentioned rapid prototyping the rapid

00:17:35,760 --> 00:17:40,800
profit doing the rapid prototyping is

00:17:37,530 --> 00:17:44,490
the best thing ever so you always get

00:17:40,800 --> 00:17:46,500
new concepts we are so innovative and we

00:17:44,490 --> 00:17:49,020
work with the cutting edge cutting edge

00:17:46,500 --> 00:17:53,130
technologies so imagine one day a

00:17:49,020 --> 00:17:56,250
customer client steps in and he has

00:17:53,130 --> 00:17:59,430
already some businesses and has some

00:17:56,250 --> 00:18:03,150
capital for new ideas the vision of his

00:17:59,430 --> 00:18:06,870
new application is not clear area so we

00:18:03,150 --> 00:18:09,090
have him in the designing we have UX

00:18:06,870 --> 00:18:10,440
team UI team everything that you can

00:18:09,090 --> 00:18:14,660
image in front and back and whether

00:18:10,440 --> 00:18:17,460
mobile team and when the client

00:18:14,660 --> 00:18:20,850
specifies the requirement of the

00:18:17,460 --> 00:18:23,520
application usually you get it as a user

00:18:20,850 --> 00:18:28,380
stories so we have user stories as well

00:18:23,520 --> 00:18:31,950
but it it's much more easier at least

00:18:28,380 --> 00:18:33,930
for a developer and for I will tell you

00:18:31,950 --> 00:18:38,190
why but for everybody it's much easier

00:18:33,930 --> 00:18:41,460
if the requirements are worded as a test

00:18:38,190 --> 00:18:44,910
as well so it's because imagine that you

00:18:41,460 --> 00:18:47,250
get the requirements as test and you

00:18:44,910 --> 00:18:49,260
just need to satisfy the test writing

00:18:47,250 --> 00:18:51,270
UGS code so you don't need to do

00:18:49,260 --> 00:18:54,000
anything it's easy for you because you

00:18:51,270 --> 00:18:56,460
see it what's the exact requirement it's

00:18:54,000 --> 00:18:59,280
easy for the customer the client who

00:18:56,460 --> 00:19:03,290
doesn't understand programming but if

00:18:59,280 --> 00:19:05,880
look at the code he sees the test and

00:19:03,290 --> 00:19:08,160
it's easier for the new guy who just

00:19:05,880 --> 00:19:12,570
jumped to the project and never seen the

00:19:08,160 --> 00:19:16,050
domain before just read the test and and

00:19:12,570 --> 00:19:21,770
understand the project so BDD is about

00:19:16,050 --> 00:19:26,430
the EDD is BDD is a development process

00:19:21,770 --> 00:19:29,910
yeah that combines the TDD and DDD so we

00:19:26,430 --> 00:19:34,530
have so many abbreviations so I really

00:19:29,910 --> 00:19:37,230
like it and I mentioned that mainly it's

00:19:34,530 --> 00:19:39,060
test driven so you can do it like the

00:19:37,230 --> 00:19:42,070
first fail in the first phase you

00:19:39,060 --> 00:19:45,790
specify the requirements as a test

00:19:42,070 --> 00:19:48,310
it's English using English sentences so

00:19:45,790 --> 00:19:51,640
so everybody can understand it is and

00:19:48,310 --> 00:19:56,260
then these tests will fail then you need

00:19:51,640 --> 00:19:59,140
to implement the code itself so you

00:19:56,260 --> 00:20:02,380
start with the test first you implement

00:19:59,140 --> 00:20:06,310
the code and then these tests will be

00:20:02,380 --> 00:20:09,640
satisfied and so you will go from the

00:20:06,310 --> 00:20:11,860
red to the green phase and then the gray

00:20:09,640 --> 00:20:14,830
phase is the refactoring phase because

00:20:11,860 --> 00:20:18,100
there are more approaches here as well I

00:20:14,830 --> 00:20:21,700
mean inside BDD and sometimes you do it

00:20:18,100 --> 00:20:23,740
quick and dirty you know sometimes you

00:20:21,700 --> 00:20:26,290
you aren't gonna need it

00:20:23,740 --> 00:20:31,140
so it's really up to these methodologies

00:20:26,290 --> 00:20:31,140
so the gray phase is for the refactoring

00:20:32,340 --> 00:20:42,030
yes so let's jump to the jump into the

00:20:37,420 --> 00:20:45,400
GS world so let me introduce two of the

00:20:42,030 --> 00:20:48,730
biggest test runner frameworks one is

00:20:45,400 --> 00:20:52,510
the just from face book other one is

00:20:48,730 --> 00:20:59,950
mocha with web backpack so actually

00:20:52,510 --> 00:21:04,960
that's two different framework so as you

00:20:59,950 --> 00:21:08,410
see now this mocha is more popular so

00:21:04,960 --> 00:21:12,000
the two thing the justice and the mocha

00:21:08,410 --> 00:21:15,880
is similar so they have a same

00:21:12,000 --> 00:21:18,520
responsibility but they have a different

00:21:15,880 --> 00:21:22,090
concept I mean both of them is universal

00:21:18,520 --> 00:21:24,580
testing framework and open source so you

00:21:22,090 --> 00:21:29,620
can read the code you can find them on

00:21:24,580 --> 00:21:34,480
get github if you want and they support

00:21:29,620 --> 00:21:38,370
promises so you can do acing testing the

00:21:34,480 --> 00:21:42,460
difference by the way is like just

00:21:38,370 --> 00:21:45,430
arrives out of box so you don't need to

00:21:42,460 --> 00:21:48,550
do anything everything is in just that

00:21:45,430 --> 00:21:52,720
I've mentioned in this presentation the

00:21:48,550 --> 00:21:55,040
mocking the spice stops everything the

00:21:52,720 --> 00:21:58,850
assert library

00:21:55,040 --> 00:22:02,090
that you can imagine in just in mocha

00:21:58,850 --> 00:22:04,370
you you are free to choose your own

00:22:02,090 --> 00:22:07,640
asset library you are free to choose

00:22:04,370 --> 00:22:09,980
your own mocking library let's say that

00:22:07,640 --> 00:22:10,970
you would like to work with dimension

00:22:09,980 --> 00:22:15,800
sign on GS

00:22:10,970 --> 00:22:21,020
you are free to use it yeah so the

00:22:15,800 --> 00:22:23,060
differences let's go to just if you look

00:22:21,020 --> 00:22:27,290
at the website of just you must see

00:22:23,060 --> 00:22:29,360
these three points here so it says that

00:22:27,290 --> 00:22:33,970
it's developer at the instant feedback

00:22:29,360 --> 00:22:37,970
snapshot so what does it mean it means

00:22:33,970 --> 00:22:39,440
developer ready because it's out of box

00:22:37,970 --> 00:22:41,990
so you don't need to install this

00:22:39,440 --> 00:22:45,560
framework instant feedback means that it

00:22:41,990 --> 00:22:50,270
has a really cool watch mode if you ever

00:22:45,560 --> 00:22:53,390
used mocha oh wait watch mode I mean

00:22:50,270 --> 00:22:56,180
it's awesome but then you never seen

00:22:53,390 --> 00:22:59,330
just watch one because it's interactive

00:22:56,180 --> 00:23:03,500
you can filter for tests you can run

00:22:59,330 --> 00:23:07,940
only the failed test or only just a test

00:23:03,500 --> 00:23:10,880
that changed and another good feature of

00:23:07,940 --> 00:23:13,910
just one you can do snaps snapshot

00:23:10,880 --> 00:23:16,880
testing snapshot testing maybe it's a

00:23:13,910 --> 00:23:19,730
good it's a new term for you but you

00:23:16,880 --> 00:23:23,840
need to imagine like there's a function

00:23:19,730 --> 00:23:28,790
of test tester who sees your work first

00:23:23,840 --> 00:23:33,080
time so what he does he will open the UI

00:23:28,790 --> 00:23:35,750
plan let's say that in in you know

00:23:33,080 --> 00:23:38,750
design opens design file and we'll

00:23:35,750 --> 00:23:40,910
compare one to the other the first thing

00:23:38,750 --> 00:23:44,450
that maybe the functional tester will

00:23:40,910 --> 00:23:47,810
see is like okay there's a button in the

00:23:44,450 --> 00:23:50,540
UI plan and in the UI design but this

00:23:47,810 --> 00:23:54,560
button was not implemented in your work

00:23:50,540 --> 00:23:58,310
so actually this is the frame snapshot

00:23:54,560 --> 00:24:00,820
testing so like take a snapshot about

00:23:58,310 --> 00:24:04,490
the current phase of the website so

00:24:00,820 --> 00:24:07,970
sterilized all of the content at once

00:24:04,490 --> 00:24:10,790
and then the next time when the tests

00:24:07,970 --> 00:24:13,490
run compared to the current phase of the

00:24:10,790 --> 00:24:15,800
website like if you compare the HTML the

00:24:13,490 --> 00:24:18,080
output of the website to the snapshot

00:24:15,800 --> 00:24:20,510
and if it's different than your test

00:24:18,080 --> 00:24:24,440
will fail so it's a really good stuff to

00:24:20,510 --> 00:24:27,920
maintain your application and track like

00:24:24,440 --> 00:24:33,290
is there any differences between in

00:24:27,920 --> 00:24:38,810
between the outputs the just tests run

00:24:33,290 --> 00:24:41,420
parallel the mocha tests don't run per

00:24:38,810 --> 00:24:48,040
parallel but you can make them parallel

00:24:41,420 --> 00:24:50,240
using NPM module of course so that

00:24:48,040 --> 00:24:54,320
that's what I'm saying that's the main

00:24:50,240 --> 00:24:56,870
difference is between the two two ideas

00:24:54,320 --> 00:25:00,830
like in just everything is inside in

00:24:56,870 --> 00:25:04,070
mocha you need to add packages so if you

00:25:00,830 --> 00:25:07,250
are a linux guy you are used to doing it

00:25:04,070 --> 00:25:10,190
but if you are from the other side maybe

00:25:07,250 --> 00:25:13,460
you would like to work with a tool

00:25:10,190 --> 00:25:16,360
that's out of box because you have to

00:25:13,460 --> 00:25:19,190
finish your application yesterday and

00:25:16,360 --> 00:25:25,640
you just don't have time to check out

00:25:19,190 --> 00:25:30,020
the latest packages other good thing

00:25:25,640 --> 00:25:34,490
I've already talked about it the mocking

00:25:30,020 --> 00:25:36,890
so we saw this puzzle we understand that

00:25:34,490 --> 00:25:38,660
like dependencies are not really good

00:25:36,890 --> 00:25:40,730
because if you work in a team and

00:25:38,660 --> 00:25:43,640
somebody let's say that make a mistake

00:25:40,730 --> 00:25:46,670
in one package maybe your whole work

00:25:43,640 --> 00:25:49,700
will break if your work depends on this

00:25:46,670 --> 00:25:53,330
package so if it's really good to do

00:25:49,700 --> 00:25:56,720
mocking and just does it automatically

00:25:53,330 --> 00:25:59,540
you have multiple way how you can move

00:25:56,720 --> 00:26:03,290
mock your dependencies but even you can

00:25:59,540 --> 00:26:07,040
mock NPM modules so let's say that you

00:26:03,290 --> 00:26:09,140
use some NPM module then you can mock it

00:26:07,040 --> 00:26:12,560
the module will return with your mock

00:26:09,140 --> 00:26:19,280
and then it will act like how you would

00:26:12,560 --> 00:26:21,770
like that and the other the big brother

00:26:19,280 --> 00:26:25,210
mocha focus the big brother because

00:26:21,770 --> 00:26:27,770
it was I guess two years before just so

00:26:25,210 --> 00:26:31,670
nowadays it's much popular you have

00:26:27,770 --> 00:26:36,320
multiple well I mean more tools for MOCA

00:26:31,670 --> 00:26:42,170
personally I used MOCA more times than

00:26:36,320 --> 00:26:45,950
just I usually use it from CLI because I

00:26:42,170 --> 00:26:51,830
haven't found a good tool to run tests

00:26:45,950 --> 00:26:54,110
for vs code so I just pop up a CLI

00:26:51,830 --> 00:26:57,350
window and run the test during the

00:26:54,110 --> 00:27:01,010
development it's flexible so you can use

00:26:57,350 --> 00:27:03,980
whatever assert library that you'd like

00:27:01,010 --> 00:27:07,760
and mocking library there are no

00:27:03,980 --> 00:27:10,910
constraints and the one advantage of it

00:27:07,760 --> 00:27:13,550
is like if you test view GS applications

00:27:10,910 --> 00:27:17,330
then you have a view loader the view low

00:27:13,550 --> 00:27:21,200
there we load the styles so but by

00:27:17,330 --> 00:27:24,520
default in just you you can't test

00:27:21,200 --> 00:27:28,310
styles if you'd like only inline styles

00:27:24,520 --> 00:27:31,520
so if you use mocha and backpack it will

00:27:28,310 --> 00:27:36,620
use the view loader so you can use you

00:27:31,520 --> 00:27:39,020
can test these styles as well so now

00:27:36,620 --> 00:27:42,020
I've already thought about it so let's

00:27:39,020 --> 00:27:44,900
life code a little bit so let's imagine

00:27:42,020 --> 00:27:49,070
that we have two bosses one boss is Bob

00:27:44,900 --> 00:27:53,480
and the other one is Bob so they will

00:27:49,070 --> 00:27:58,310
tell you the task in a bdd way and the

00:27:53,480 --> 00:28:03,290
task is like develop but adaption

00:27:58,310 --> 00:28:07,310
website it's kinda easy website but it's

00:28:03,290 --> 00:28:10,550
perfectly it's for our requirement so we

00:28:07,310 --> 00:28:12,260
have only two user user stories like as

00:28:10,550 --> 00:28:15,650
a user I want to see the list of

00:28:12,260 --> 00:28:18,920
adaptable bats so that I can choose the

00:28:15,650 --> 00:28:20,630
cutest one I think it makes sense why so

00:28:18,920 --> 00:28:23,030
we understand and there's a user I want

00:28:20,630 --> 00:28:26,770
to choose the pet by clicking on the

00:28:23,030 --> 00:28:29,660
adult button so that we can adopt it

00:28:26,770 --> 00:28:32,600
so first let's design how we would

00:28:29,660 --> 00:28:34,460
implement it because this is a really

00:28:32,600 --> 00:28:40,440
easy website

00:28:34,460 --> 00:28:43,250
we can do only two components so let's

00:28:40,440 --> 00:28:50,460
say that there's a pet like Toby and

00:28:43,250 --> 00:28:54,210
Toby its Toby includes a component like

00:28:50,460 --> 00:28:58,110
profile so Toby has a profile and all of

00:28:54,210 --> 00:29:09,540
the profiles are that's editing in the

00:28:58,110 --> 00:29:15,710
app view a view component so now with I

00:29:09,540 --> 00:29:15,710
open my favor favorite ID

00:29:21,600 --> 00:29:24,500
you see

00:29:26,270 --> 00:29:41,540
and the first thing that I do is

00:29:30,100 --> 00:29:48,380
increasing the font size let's say that

00:29:41,540 --> 00:29:52,750
it's it's good

00:29:48,380 --> 00:29:56,500
can you see it in the back I mean it's

00:29:52,750 --> 00:29:56,500
babies doing

00:30:13,570 --> 00:30:26,740
okay so good to go thing

00:30:33,480 --> 00:30:44,220
so I just it's not good from the chimera

00:30:38,070 --> 00:30:57,389
perspective but my screen is extended so

00:30:44,220 --> 00:30:59,100
I should see it talk I mean I can go to

00:30:57,389 --> 00:31:00,590
the other side of the table but in this

00:30:59,100 --> 00:31:07,399
case the commander will record my back

00:31:00,590 --> 00:31:07,399
if it's not a problem yeah yeah

00:31:16,540 --> 00:31:21,730
also okay

00:31:24,460 --> 00:31:27,840
and the just

00:31:32,530 --> 00:31:41,620
okay this play mirror and you see my

00:31:38,080 --> 00:31:44,740
screen okay so this is the best in life

00:31:41,620 --> 00:31:49,690
coding this part I hope you enjoy but

00:31:44,740 --> 00:31:53,010
now we are ready to go yeah so to make

00:31:49,690 --> 00:31:59,160
it easier I have already written the

00:31:53,010 --> 00:32:06,630
application that we saw so if I run it

00:31:59,160 --> 00:32:09,340
actually this one is running so if I

00:32:06,630 --> 00:32:13,990
open it in a new window

00:32:09,340 --> 00:32:19,080
and say that localhost 8080 then we see

00:32:13,990 --> 00:32:19,080
our application yet and the dark Sider

00:32:19,890 --> 00:32:27,970
so the first component I mean this is

00:32:24,850 --> 00:32:30,670
the structure that we use saucers and

00:32:27,970 --> 00:32:33,760
you can find the global components in

00:32:30,670 --> 00:32:36,820
the root of the search folder and you

00:32:33,760 --> 00:32:38,710
can see I have button component a

00:32:36,820 --> 00:32:41,250
profile component and the app component

00:32:38,710 --> 00:32:46,270
so the application consists three

00:32:41,250 --> 00:32:49,600
components because we'd like to do BDD

00:32:46,270 --> 00:32:52,000
then the first thing that we need to do

00:32:49,600 --> 00:32:54,430
is to define the specification according

00:32:52,000 --> 00:32:57,240
to the user story as it as a test as a

00:32:54,430 --> 00:33:01,890
requirement of this application so

00:32:57,240 --> 00:33:06,250
because my button is really easy

00:33:01,890 --> 00:33:08,320
component then so actually you you don't

00:33:06,250 --> 00:33:10,990
need to be fooled so you don't really

00:33:08,320 --> 00:33:12,550
need to test everything during your

00:33:10,990 --> 00:33:14,830
project because if there's a component

00:33:12,550 --> 00:33:18,850
that's really easy you shouldn't start

00:33:14,830 --> 00:33:21,340
with that but the profile component is

00:33:18,850 --> 00:33:25,320
more complex because it uses the button

00:33:21,340 --> 00:33:25,320
component so this one is

00:33:30,820 --> 00:33:36,770
okay so this one is a profile here this

00:33:34,970 --> 00:33:40,850
one is the button and this one is the

00:33:36,770 --> 00:33:44,540
app yeah so I'm going to use just to

00:33:40,850 --> 00:33:46,460
show it the first thing if if you would

00:33:44,540 --> 00:33:48,470
like to use just because it's out of box

00:33:46,460 --> 00:33:51,830
and you don't need to configure that's

00:33:48,470 --> 00:33:54,650
the benefit of it yeah compared to mocha

00:33:51,830 --> 00:33:57,140
because in Wacha you need to to update

00:33:54,650 --> 00:33:59,690
all of the packages you need to install

00:33:57,140 --> 00:34:03,080
them you need to configure them so using

00:33:59,690 --> 00:34:05,960
just you can install it just then you

00:34:03,080 --> 00:34:10,700
can configure it in the package Jason

00:34:05,960 --> 00:34:14,389
here so as you see I mean you can use an

00:34:10,700 --> 00:34:20,300
external file as well but it was easier

00:34:14,389 --> 00:34:26,389
to do this this year so these are the

00:34:20,300 --> 00:34:29,270
test files that it will include the mood

00:34:26,389 --> 00:34:31,070
I mean let me introduce the conflict

00:34:29,270 --> 00:34:34,659
properties the module name mapper

00:34:31,070 --> 00:34:40,040
because because I use a package that

00:34:34,659 --> 00:34:51,020
imports an image in the profile profile

00:34:40,040 --> 00:34:52,760
view you see yeah so we yeah now I use a

00:34:51,020 --> 00:34:55,040
life service because I want it to mock

00:34:52,760 --> 00:34:57,440
it but before this one I used the static

00:34:55,040 --> 00:35:02,630
image and if you use a static image in

00:34:57,440 --> 00:35:06,770
the project we use it through external

00:35:02,630 --> 00:35:09,830
module and we can include the package

00:35:06,770 --> 00:35:14,510
itself as a module so if I go today a

00:35:09,830 --> 00:35:18,260
set I can I can include that poll JPEG

00:35:14,510 --> 00:35:23,510
and then I can pass it to the image if

00:35:18,260 --> 00:35:27,190
I'd like like this you see so if you do

00:35:23,510 --> 00:35:32,750
this the first problem that I met is

00:35:27,190 --> 00:35:34,760
like just try to try to understand the

00:35:32,750 --> 00:35:37,580
image file itself the image is a binary

00:35:34,760 --> 00:35:40,760
so it can't understand it but it tries

00:35:37,580 --> 00:35:42,820
so your test will fail so you need to

00:35:40,760 --> 00:35:46,660
tell to just

00:35:42,820 --> 00:35:48,280
like okay if I import because we thought

00:35:46,660 --> 00:35:50,470
about that everything is mocked by

00:35:48,280 --> 00:35:53,710
default so just try to understand

00:35:50,470 --> 00:35:57,190
everything by default so if I import an

00:35:53,710 --> 00:36:01,210
image let's say that JPEG then please

00:35:57,190 --> 00:36:04,090
mock this image using this javascript

00:36:01,210 --> 00:36:06,460
file so the import statement will return

00:36:04,090 --> 00:36:09,730
with the content of the image monkeys

00:36:06,460 --> 00:36:12,730
there's a convention it looks like a

00:36:09,730 --> 00:36:14,830
Python code if you did Python like

00:36:12,730 --> 00:36:17,290
underscore underscore mocks understand

00:36:14,830 --> 00:36:20,880
the score so you can place your mock

00:36:17,290 --> 00:36:27,070
files inside it and just will look up it

00:36:20,880 --> 00:36:29,320
and so if we look and the fight you see

00:36:27,070 --> 00:36:32,080
it will return only with the path

00:36:29,320 --> 00:36:36,360
actually the node module that I've used

00:36:32,080 --> 00:36:39,400
for loading image did same so I can even

00:36:36,360 --> 00:36:40,600
look the word modules these are the

00:36:39,400 --> 00:36:45,760
paths that are ignored

00:36:40,600 --> 00:36:49,210
so just won't deal with that and this

00:36:45,760 --> 00:36:53,380
option is for the snapshots because just

00:36:49,210 --> 00:36:58,000
will sterilize my website and because I

00:36:53,380 --> 00:37:00,010
use UGS then I need to tell to just like

00:36:58,000 --> 00:37:01,990
because that's a generic JavaScript

00:37:00,010 --> 00:37:05,500
testing framework I need to tell just

00:37:01,990 --> 00:37:08,460
okay my website written in view GS so

00:37:05,500 --> 00:37:13,960
please use this package to dis arising

00:37:08,460 --> 00:37:17,020
there to server eyes yeah and if you'd

00:37:13,960 --> 00:37:19,930
like to use typescript as we do then you

00:37:17,020 --> 00:37:20,440
need another package so I didn't say

00:37:19,930 --> 00:37:22,690
that

00:37:20,440 --> 00:37:25,570
you don't need packages for just but

00:37:22,690 --> 00:37:27,970
many tools out of box but you still need

00:37:25,570 --> 00:37:32,530
to install some stuff if you would like

00:37:27,970 --> 00:37:34,660
to use custom I mean third-party tools

00:37:32,530 --> 00:37:36,670
or if you'd like to use typescript let's

00:37:34,660 --> 00:37:39,310
say then you need to add this one and

00:37:36,670 --> 00:37:43,270
you need to add this one to the config

00:37:39,310 --> 00:37:49,720
as well so our project is configured so

00:37:43,270 --> 00:37:53,260
we can visit the profile view the we use

00:37:49,720 --> 00:37:56,040
view GS with the class-based style and

00:37:53,260 --> 00:37:58,710
with JSX so at the company

00:37:56,040 --> 00:38:02,670
where I work that's clever we try to use

00:37:58,710 --> 00:38:05,130
UGS in a framework agnostic way so it

00:38:02,670 --> 00:38:07,170
means that if you are new to this world

00:38:05,130 --> 00:38:09,660
and you will start to work at our

00:38:07,170 --> 00:38:12,960
company but you did react before then

00:38:09,660 --> 00:38:16,440
you shouldn't have any trouble to use it

00:38:12,960 --> 00:38:19,440
because the code that we write really

00:38:16,440 --> 00:38:24,890
similar to react so if you look if you

00:38:19,440 --> 00:38:31,170
look at the code so we use just X and

00:38:24,890 --> 00:38:34,080
and class plus all P star so this is the

00:38:31,170 --> 00:38:38,990
profile component first as I said if you

00:38:34,080 --> 00:38:38,990
use BDD you need to define the test

00:38:39,410 --> 00:38:46,200
so the just style tests are really

00:38:43,350 --> 00:38:48,510
similar to mocha so if you used more

00:38:46,200 --> 00:38:50,340
kind you would like to change to just or

00:38:48,510 --> 00:38:52,380
or in the opposite way

00:38:50,340 --> 00:38:55,320
you must be really familiar because you

00:38:52,380 --> 00:39:01,370
we have same functions like describe and

00:38:55,320 --> 00:39:05,910
it we do be the despised so the test is

00:39:01,370 --> 00:39:11,610
defined in in the natural language like

00:39:05,910 --> 00:39:15,240
it should show the pet name and first

00:39:11,610 --> 00:39:19,440
let's say that because I rewrite the

00:39:15,240 --> 00:39:24,540
test that's the first the bad name is

00:39:19,440 --> 00:39:27,150
here but if I remove this line of code

00:39:24,540 --> 00:39:29,250
then you can see at the bottom the tests

00:39:27,150 --> 00:39:32,370
are running and the code failed

00:39:29,250 --> 00:39:36,080
immediately it means that I broke the

00:39:32,370 --> 00:39:38,850
specification that we already did

00:39:36,080 --> 00:39:41,610
because the component should show the

00:39:38,850 --> 00:39:45,080
name of the path so this is that I

00:39:41,610 --> 00:39:50,910
mention like you can really quickly can

00:39:45,080 --> 00:39:54,210
see if you did something wrong your code

00:39:50,910 --> 00:40:00,270
will give you an instant feedback so if

00:39:54,210 --> 00:40:03,140
you push you can really be confident you

00:40:00,270 --> 00:40:03,140
won't break anything

00:40:04,300 --> 00:40:13,750
and yeah there is a external package for

00:40:09,280 --> 00:40:16,660
vs code for jest and to be honest it's

00:40:13,750 --> 00:40:21,610
of some really I really love it so you

00:40:16,660 --> 00:40:24,370
can run tests from the ID and you get

00:40:21,610 --> 00:40:28,020
back some feedback from the current

00:40:24,370 --> 00:40:32,830
state of the test if it failed or not

00:40:28,020 --> 00:40:39,070
because we fixed it then we can save it

00:40:32,830 --> 00:40:41,550
so the tests running down again and and

00:40:39,070 --> 00:40:45,340
they still failed

00:40:41,550 --> 00:40:48,010
yeah the snapshot failed so the snapshot

00:40:45,340 --> 00:40:51,220
so let's go to the snapshot the snapshot

00:40:48,010 --> 00:40:55,030
was taken yesterday and since then the

00:40:51,220 --> 00:40:57,850
code has changed so if you take a

00:40:55,030 --> 00:40:59,620
snapshot then your component is

00:40:57,850 --> 00:41:01,930
sterilized and saved to the text file

00:40:59,620 --> 00:41:05,350
you can actually you can find this text

00:41:01,930 --> 00:41:07,890
file in the snapshot folder you see on

00:41:05,350 --> 00:41:14,830
the right so this is the profile

00:41:07,890 --> 00:41:19,840
component and as you see this is a plain

00:41:14,830 --> 00:41:23,320
HTML file and the output of the view GS

00:41:19,840 --> 00:41:26,200
component was her iced here and since

00:41:23,320 --> 00:41:28,780
the last run something changed and the

00:41:26,200 --> 00:41:32,640
code compares your current output to the

00:41:28,780 --> 00:41:35,230
snapshot and it notifies you ok your

00:41:32,640 --> 00:41:37,510
output of this component is not like

00:41:35,230 --> 00:41:42,100
that like it was yesterday

00:41:37,510 --> 00:41:46,300
and why is it not like that so let's

00:41:42,100 --> 00:41:49,750
look at the code it says that there it

00:41:46,300 --> 00:41:55,470
looks like in get you see it says that

00:41:49,750 --> 00:41:59,650
ok there is a source something like this

00:41:55,470 --> 00:42:05,020
ok so I touch so I remove this one edit

00:41:59,650 --> 00:42:07,030
this one so I updated the code what I

00:42:05,020 --> 00:42:09,310
can do let's say that I agree with these

00:42:07,030 --> 00:42:11,710
changes because it was my task to do

00:42:09,310 --> 00:42:15,220
this so the thing that I can do because

00:42:11,710 --> 00:42:17,029
the watch of just is interactive I can

00:42:15,220 --> 00:42:19,849
press W

00:42:17,029 --> 00:42:22,189
and I can say that with the Yuki like

00:42:19,849 --> 00:42:25,130
okay I did it

00:42:22,189 --> 00:42:28,099
so let's update the snapshot and if you

00:42:25,130 --> 00:42:31,789
clicked I mean if I press you then you

00:42:28,099 --> 00:42:45,140
can see that the profiles press will be

00:42:31,789 --> 00:42:48,499
updated yeah five minutes that's good so

00:42:45,140 --> 00:42:53,089
back to the profile so one thing to

00:42:48,499 --> 00:42:56,439
mention if you include your component

00:42:53,089 --> 00:43:01,429
there are two ways to include it you can

00:42:56,439 --> 00:43:04,249
mount it using its dependencies or you

00:43:01,429 --> 00:43:07,759
can mock the dependencies using shadow

00:43:04,249 --> 00:43:10,880
moon shadow mount will mock all of the

00:43:07,759 --> 00:43:12,409
children components so actually the idea

00:43:10,880 --> 00:43:16,009
and the concepts are same that I

00:43:12,409 --> 00:43:18,199
mentioned you don't want to depend on

00:43:16,009 --> 00:43:21,739
other components because let's say that

00:43:18,199 --> 00:43:23,449
if one sub component fails then you just

00:43:21,739 --> 00:43:29,839
don't want your test to be failed as

00:43:23,449 --> 00:43:33,679
well so you can press probes and

00:43:29,839 --> 00:43:36,409
parameters using the second argument of

00:43:33,679 --> 00:43:40,309
the shallow mount and you will get back

00:43:36,409 --> 00:43:45,799
a wrapper like this the wrapper is from

00:43:40,309 --> 00:43:48,709
the view GS test u2's library so we have

00:43:45,799 --> 00:43:54,109
tested this library for UGS that makes

00:43:48,709 --> 00:43:56,299
our work really easy and after that you

00:43:54,109 --> 00:44:02,719
mounted your component with a wrapper

00:43:56,299 --> 00:44:06,890
you can use the same style like in mocha

00:44:02,719 --> 00:44:11,449
to assert like if you use mocha you know

00:44:06,890 --> 00:44:15,890
you can do it in a BDD way like now but

00:44:11,449 --> 00:44:20,119
using dots pair words in just it's one

00:44:15,890 --> 00:44:22,549
word and I just like to say that I like

00:44:20,119 --> 00:44:27,169
it better because it's easier and it's

00:44:22,549 --> 00:44:31,209
more you know you can easily trace back

00:44:27,169 --> 00:44:31,209
everybody uses in the same way

00:44:31,980 --> 00:44:39,970
other feature of this you can even if we

00:44:36,880 --> 00:44:44,859
look at yeah I replaced it with the

00:44:39,970 --> 00:44:46,930
static image so we can use user

00:44:44,859 --> 00:44:49,420
interactions as well so let's say that

00:44:46,930 --> 00:44:53,650
you would like to test the user click

00:44:49,420 --> 00:44:57,730
the button then we can use this

00:44:53,650 --> 00:45:02,079
interaction by invoking the click on the

00:44:57,730 --> 00:45:07,660
button so first we need to find the

00:45:02,079 --> 00:45:09,609
button in the component so the component

00:45:07,660 --> 00:45:12,069
is the profile we got back a wrapper

00:45:09,609 --> 00:45:16,980
then we need to find the button we

00:45:12,069 --> 00:45:23,050
agreed in that the profile is like this

00:45:16,980 --> 00:45:25,060
then we got back the button and then we

00:45:23,050 --> 00:45:28,990
need to just trigger the click event on

00:45:25,060 --> 00:45:32,410
the button and then we need to check

00:45:28,990 --> 00:45:36,810
that the internal state has changed

00:45:32,410 --> 00:45:41,530
because the profile has a internal field

00:45:36,810 --> 00:45:47,619
like has adapted and it will toe build

00:45:41,530 --> 00:45:52,030
when you when you trigger the event you

00:45:47,619 --> 00:45:55,390
see here so it means that if you

00:45:52,030 --> 00:46:01,990
triggered Eve and then you can check the

00:45:55,390 --> 00:46:06,460
state actually this the server was fixed

00:46:01,990 --> 00:46:12,280
but sometimes we as code just doesn't

00:46:06,460 --> 00:46:15,190
reflect immediately yes so this is this

00:46:12,280 --> 00:46:17,200
is how you can do snuff snapshot testing

00:46:15,190 --> 00:46:18,579
it's really easy the first time it will

00:46:17,200 --> 00:46:21,780
generate the file then you need to

00:46:18,579 --> 00:46:21,780
update it from the CLI

00:46:25,060 --> 00:46:33,320
if you'd like to if you'd like to test

00:46:29,390 --> 00:46:37,460
your store then you can mock your store

00:46:33,320 --> 00:46:41,990
as well the thing that you can do like

00:46:37,460 --> 00:46:44,180
you don't want to add your mock to the

00:46:41,990 --> 00:46:47,270
global view GS instance if you run your

00:46:44,180 --> 00:46:49,130
test so every time you create a view you

00:46:47,270 --> 00:46:53,180
can create a locker view and then you

00:46:49,130 --> 00:46:58,060
can pass the store only to the local

00:46:53,180 --> 00:47:02,240
instance that's how you can separate the

00:46:58,060 --> 00:47:07,430
instances so actually it's really big

00:47:02,240 --> 00:47:10,790
topic and like to say a lot about it but

00:47:07,430 --> 00:47:13,460
really for free feel free to ask me

00:47:10,790 --> 00:47:15,140
after my presentation because

00:47:13,460 --> 00:47:17,450
unfortunately I didn't have enough time

00:47:15,140 --> 00:47:21,710
but I could you know talk about it until

00:47:17,450 --> 00:47:25,220
the morning so I hope you you enjoyed it

00:47:21,710 --> 00:47:28,800
and if you have come any question right

00:47:25,220 --> 00:47:32,510
now just feel free to ask me down

00:47:28,800 --> 00:47:32,510

YouTube URL: https://www.youtube.com/watch?v=2UABJol9-OE


