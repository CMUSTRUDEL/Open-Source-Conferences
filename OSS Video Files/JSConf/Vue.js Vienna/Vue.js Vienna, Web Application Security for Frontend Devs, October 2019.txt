Title: Vue.js Vienna, Web Application Security for Frontend Devs, October 2019
Publication date: 2019-10-29
Playlist: Vue.js Vienna
Description: 
	Talk by Thomas Konrad 

In this talk, we'll cover the most important security topics that have touchpoints with frontend development: Same-Origin Policy (SOP), Cross-Origin Resource Sharing (CORS), Cross-Site Scripting (XSS), Content Security Policy (CSP), and WebSocket Security. For each topic, you'll also get a concise checklist of what to consider when coding. We'll also cover some Vue.js-specific topics, specifically regarding XSS.
Captions: 
	00:00:00,000 --> 00:00:05,190
welcome to this beauteous Meetup and

00:00:02,760 --> 00:00:07,350
thanks for having me today we're going

00:00:05,190 --> 00:00:09,599
to talk about security so this is quite

00:00:07,350 --> 00:00:13,110
a special topic today it's not so much

00:00:09,599 --> 00:00:15,000
about developing in UTS but a security

00:00:13,110 --> 00:00:18,390
related talk I just gonna present myself

00:00:15,000 --> 00:00:20,850
I'm Tom I work for a company or research

00:00:18,390 --> 00:00:22,320
center called SBA research it's a

00:00:20,850 --> 00:00:25,230
research center for information security

00:00:22,320 --> 00:00:26,789
located here in Vienna and I do software

00:00:25,230 --> 00:00:29,670
security there so star for security

00:00:26,789 --> 00:00:30,960
consulting I'm also a little bit of a

00:00:29,670 --> 00:00:33,210
software developer because I do an

00:00:30,960 --> 00:00:37,110
internal project for our company and my

00:00:33,210 --> 00:00:38,879
front-end framework of choice is UTS I

00:00:37,110 --> 00:00:42,239
could it be different it's really no

00:00:38,879 --> 00:00:44,160
it's beauteous and I like that framework

00:00:42,239 --> 00:00:47,010
I'm gonna shine some light on some

00:00:44,160 --> 00:00:48,210
security top topics today I'm also one

00:00:47,010 --> 00:00:49,980
of the founders of sack for Def

00:00:48,210 --> 00:00:53,190
cumference bootcamp I'm gonna get back

00:00:49,980 --> 00:00:55,379
to this what we'll cover today there's

00:00:53,190 --> 00:00:57,420
be there's gonna be a lot of stuff okay

00:00:55,379 --> 00:01:00,329
I'm gonna throw a lot of stuff at you

00:00:57,420 --> 00:01:02,969
and don't worry if you don't get that

00:01:00,329 --> 00:01:05,309
all in all the details but I want you to

00:01:02,969 --> 00:01:07,380
get an overview of what's relevant to

00:01:05,309 --> 00:01:09,240
you guys as maybe front-end developers

00:01:07,380 --> 00:01:12,210
or software developers

00:01:09,240 --> 00:01:13,740
but first of all I want to take a ten

00:01:12,210 --> 00:01:15,450
thousand meters view on topic of

00:01:13,740 --> 00:01:16,890
software security in general and then

00:01:15,450 --> 00:01:17,790
we're gonna cover some things that are

00:01:16,890 --> 00:01:20,340
relevant in the browser

00:01:17,790 --> 00:01:22,350
a specific attack or vulnerability

00:01:20,340 --> 00:01:24,330
called cross-site request forgery and in

00:01:22,350 --> 00:01:25,979
order to to understand what's going on

00:01:24,330 --> 00:01:27,600
there we're gonna clarify two very

00:01:25,979 --> 00:01:28,619
important terms for front-end

00:01:27,600 --> 00:01:31,049
development which are the same origin

00:01:28,619 --> 00:01:32,640
policy and explicit versus implicit

00:01:31,049 --> 00:01:34,590
authentication you're gonna see what

00:01:32,640 --> 00:01:36,930
that is then we're going to talk about

00:01:34,590 --> 00:01:40,140
course cross-origin resource sharing

00:01:36,930 --> 00:01:41,670
that's quite a difficult topic to to

00:01:40,140 --> 00:01:44,670
wrap one's head around at least it was

00:01:41,670 --> 00:01:46,950
hard for me to understand and then I'm

00:01:44,670 --> 00:01:49,320
gonna do a little bit of coding live

00:01:46,950 --> 00:01:51,119
coding we're gonna code something or a

00:01:49,320 --> 00:01:52,649
little view application that has a

00:01:51,119 --> 00:01:54,149
cross-site scripting vulnerability and

00:01:52,649 --> 00:01:57,030
I'm gonna show you how to avoid it and

00:01:54,149 --> 00:01:58,619
how to fix it and content security

00:01:57,030 --> 00:02:00,750
policy is a good defense in depth

00:01:58,619 --> 00:02:03,270
against cross-site scripting the above

00:02:00,750 --> 00:02:06,299
I'm gonna talk about that as well and

00:02:03,270 --> 00:02:07,829
then two more shorter chapters cyber

00:02:06,299 --> 00:02:09,780
source integrity WebSocket security

00:02:07,829 --> 00:02:11,790
you're gonna see this is a lot of stuff

00:02:09,780 --> 00:02:13,710
okay don't worry if you don't get it all

00:02:11,790 --> 00:02:17,520
in all detail but I want you

00:02:13,710 --> 00:02:20,160
get an overview so now before we get

00:02:17,520 --> 00:02:22,590
into the technical stuff I personally

00:02:20,160 --> 00:02:23,880
think from my experience as somebody who

00:02:22,590 --> 00:02:26,960
works with software development teams

00:02:23,880 --> 00:02:28,800
all the time there's no such thing as

00:02:26,960 --> 00:02:31,590
somebody who is a good software

00:02:28,800 --> 00:02:34,280
developer but bad at security that never

00:02:31,590 --> 00:02:37,170
happens at the same time it's basically

00:02:34,280 --> 00:02:38,460
one line in development in a software in

00:02:37,170 --> 00:02:40,020
the supper development world so if

00:02:38,460 --> 00:02:41,610
you're a good software developer or you

00:02:40,020 --> 00:02:43,350
know everything in detail your

00:02:41,610 --> 00:02:44,940
programming language your framework your

00:02:43,350 --> 00:02:48,000
environment your build environment your

00:02:44,940 --> 00:02:50,160
I don't know your operating system your

00:02:48,000 --> 00:02:52,080
software running on then you can judge

00:02:50,160 --> 00:02:53,420
the security of that software of the

00:02:52,080 --> 00:02:55,910
piece of software as well so

00:02:53,420 --> 00:02:59,270
understanding in detail means

00:02:55,910 --> 00:03:02,160
automatically being good at security so

00:02:59,270 --> 00:03:04,140
learning in software development will

00:03:02,160 --> 00:03:07,560
almost automatically make you a better

00:03:04,140 --> 00:03:09,570
software or a security engineer okay so

00:03:07,560 --> 00:03:11,610
an in-depth understanding of all that's

00:03:09,570 --> 00:03:13,830
important in in yours for your software

00:03:11,610 --> 00:03:15,750
the whole environment including the

00:03:13,830 --> 00:03:17,670
framework the language everything will

00:03:15,750 --> 00:03:21,420
almost automatically make you a better

00:03:17,670 --> 00:03:23,250
security engineer now the the

00:03:21,420 --> 00:03:26,220
information security community has two

00:03:23,250 --> 00:03:27,720
very big problems and I have this tweet

00:03:26,220 --> 00:03:29,670
here which i think is very true I always

00:03:27,720 --> 00:03:32,640
have it on my slides it says the number

00:03:29,670 --> 00:03:34,650
one problem InfoSec is a go so that the

00:03:32,640 --> 00:03:36,990
hackers want to be cool and they want to

00:03:34,650 --> 00:03:38,820
hack some stuff and you know so that the

00:03:36,990 --> 00:03:41,520
ego is one thing but the second one is

00:03:38,820 --> 00:03:43,890
even more important its niche risk okay

00:03:41,520 --> 00:03:45,540
so if a work we suffered when I work

00:03:43,890 --> 00:03:48,240
with software development is they always

00:03:45,540 --> 00:03:49,470
or many times to focus on on niche risk

00:03:48,240 --> 00:03:52,080
something that's not really important

00:03:49,470 --> 00:03:53,610
but they forget about the basics they do

00:03:52,080 --> 00:03:55,650
not really get the basics down in terms

00:03:53,610 --> 00:03:58,830
of security but they have some shiny

00:03:55,650 --> 00:04:01,620
hack that they need to avoid so that's

00:03:58,830 --> 00:04:04,470
also a problem so let's get the basics

00:04:01,620 --> 00:04:07,260
right first okay the topics on on the

00:04:04,470 --> 00:04:09,060
slides here are basically they are basic

00:04:07,260 --> 00:04:10,920
security topics in browser security so

00:04:09,060 --> 00:04:14,760
let's get them down first and then let's

00:04:10,920 --> 00:04:16,080
focus on the smaller risks the earlier

00:04:14,760 --> 00:04:18,060
in the software development lastik we

00:04:16,080 --> 00:04:19,799
find problems we detect security

00:04:18,060 --> 00:04:23,160
problems in our software or bugs in

00:04:19,799 --> 00:04:25,290
general or design flaws in general the

00:04:23,160 --> 00:04:27,010
cheaper is going to be the less time and

00:04:25,290 --> 00:04:29,740
effort its gonna take

00:04:27,010 --> 00:04:31,990
fix the problem okay so when you hear

00:04:29,740 --> 00:04:34,150
something like shifting left it means

00:04:31,990 --> 00:04:37,060
that we in terms of security we need to

00:04:34,150 --> 00:04:38,230
start earlier we want to start thinking

00:04:37,060 --> 00:04:39,820
about security already in the

00:04:38,230 --> 00:04:43,540
requirements analysis in the design

00:04:39,820 --> 00:04:45,760
phase in technology decisions okay so

00:04:43,540 --> 00:04:47,110
shifting left means starting earlier in

00:04:45,760 --> 00:04:48,250
the whole process when you write down

00:04:47,110 --> 00:04:50,290
the requirements the functional

00:04:48,250 --> 00:04:52,270
requirements for your software security

00:04:50,290 --> 00:04:55,120
requirements should play a role as well

00:04:52,270 --> 00:04:57,820
that's what it's this slide or shifting

00:04:55,120 --> 00:04:59,380
left is trying to say so we need to

00:04:57,820 --> 00:05:01,720
shift left and start earlier thinking

00:04:59,380 --> 00:05:03,580
about these things good so it's getting

00:05:01,720 --> 00:05:06,130
technical the first vulnerability I want

00:05:03,580 --> 00:05:08,560
to present or show you is cross that we

00:05:06,130 --> 00:05:12,250
Chris forgery who has heard about this

00:05:08,560 --> 00:05:14,980
before who has had to fix it in your own

00:05:12,250 --> 00:05:19,000
software one two three four okay

00:05:14,980 --> 00:05:20,260
I'm gonna remember your faces so in

00:05:19,000 --> 00:05:22,420
order to understand what's going on here

00:05:20,260 --> 00:05:24,130
and order in order to find an elegant

00:05:22,420 --> 00:05:26,410
solution against this problem we need to

00:05:24,130 --> 00:05:30,780
understand two things very important the

00:05:26,410 --> 00:05:33,790
first thing is the same origin policy

00:05:30,780 --> 00:05:35,410
what is the same oranga policy now the

00:05:33,790 --> 00:05:38,320
same origin policy is a security concept

00:05:35,410 --> 00:05:41,440
in web browsers that limits how one

00:05:38,320 --> 00:05:43,890
origin or one website that's open a tab

00:05:41,440 --> 00:05:47,230
if you want to think about this this way

00:05:43,890 --> 00:05:48,700
can interact with other origins so a

00:05:47,230 --> 00:05:50,980
different website that's also open in

00:05:48,700 --> 00:05:53,910
the same web browser okay so there are

00:05:50,980 --> 00:05:57,630
limits to in how they can interact

00:05:53,910 --> 00:06:02,530
what's an origin what does the origin

00:05:57,630 --> 00:06:02,980
consist of who can tell me the host or

00:06:02,530 --> 00:06:07,390
the domain

00:06:02,980 --> 00:06:09,970
yeah what does that two more things the

00:06:07,390 --> 00:06:12,100
protocol so protocol and port exactly

00:06:09,970 --> 00:06:13,990
these three things if one of these three

00:06:12,100 --> 00:06:16,120
things is different it's not the same

00:06:13,990 --> 00:06:19,150
origin anymore so look at those examples

00:06:16,120 --> 00:06:23,470
the first so the basic the starting

00:06:19,150 --> 00:06:25,390
origin is store company comm accessed

00:06:23,470 --> 00:06:28,320
with HTTP which I don't recommend by the

00:06:25,390 --> 00:06:30,730
way for record so we have the first URL

00:06:28,320 --> 00:06:33,790
example it says HTTP store company will

00:06:30,730 --> 00:06:36,130
come that's the same origin the second

00:06:33,790 --> 00:06:38,590
one also same origin the third one has

00:06:36,130 --> 00:06:39,640
HTTP as a protocol that's different a

00:06:38,590 --> 00:06:40,559
different protocol so it's a different

00:06:39,640 --> 00:06:44,219
origin okay

00:06:40,559 --> 00:06:46,439
so the same origin policy applies here

00:06:44,219 --> 00:06:48,179
the next-to-last example has port 81 so

00:06:46,439 --> 00:06:49,709
different port different origin so you

00:06:48,179 --> 00:06:51,749
get the point these three things are

00:06:49,709 --> 00:06:57,269
important it's the protocol the domain

00:06:51,749 --> 00:06:59,279
and the port all must be equal good now

00:06:57,269 --> 00:07:01,589
here comes the thing that is not

00:06:59,279 --> 00:07:04,679
intuitive in the same origin policy

00:07:01,589 --> 00:07:08,849
cross origin rights are typically

00:07:04,679 --> 00:07:12,149
allowed cross origin reads on the other

00:07:08,849 --> 00:07:13,709
hand are typically prohibited and cross

00:07:12,149 --> 00:07:15,149
origin embedding is also typically

00:07:13,709 --> 00:07:17,039
allowed so if you have your website and

00:07:15,149 --> 00:07:20,339
you have a CDN where you include your

00:07:17,039 --> 00:07:23,039
UGS or any JavaScript sramek or an image

00:07:20,339 --> 00:07:24,899
or a CSS file though that works right

00:07:23,039 --> 00:07:28,319
even if that JavaScript runs on a

00:07:24,899 --> 00:07:30,209
different origin now cross origin rights

00:07:28,319 --> 00:07:31,889
like form submissions and that is the

00:07:30,209 --> 00:07:34,559
important part form submissions work

00:07:31,889 --> 00:07:40,589
cross origin okay I'm gonna I have an

00:07:34,559 --> 00:07:42,809
example for you very soon now that's the

00:07:40,589 --> 00:07:44,549
stuff that's very important understand

00:07:42,809 --> 00:07:46,049
and not intuitive the other thing that

00:07:44,549 --> 00:07:49,589
we need to understand is implicit versus

00:07:46,049 --> 00:07:52,979
explicit authentication now if you if an

00:07:49,589 --> 00:07:55,739
HTTP request is sent to a server there

00:07:52,979 --> 00:07:57,719
are situations where the authenticating

00:07:55,739 --> 00:07:59,549
part of the HTTP request is sent or sent

00:07:57,719 --> 00:08:01,829
by automatically that's the case with

00:07:59,549 --> 00:08:04,889
cookies yeah so if there's a cookie set

00:08:01,829 --> 00:08:06,569
for that domain then and the request

00:08:04,889 --> 00:08:08,459
goes to the domain it is going to be an

00:08:06,569 --> 00:08:09,929
authenticated request it doesn't matter

00:08:08,459 --> 00:08:11,399
where it comes from it can be from a

00:08:09,929 --> 00:08:13,199
different origin it's gonna be an

00:08:11,399 --> 00:08:15,779
authenticated request okay

00:08:13,199 --> 00:08:17,759
the same goes for a TV basic

00:08:15,779 --> 00:08:20,479
authentication so we you better get this

00:08:17,759 --> 00:08:23,369
small username password a box were you

00:08:20,479 --> 00:08:24,869
native from the browser you type it in

00:08:23,369 --> 00:08:26,849
once and as long as your browser is open

00:08:24,869 --> 00:08:29,219
these details are going to be sent by

00:08:26,849 --> 00:08:32,099
always implicitly you don't have to set

00:08:29,219 --> 00:08:33,899
it at each request the same goes for Tia

00:08:32,099 --> 00:08:36,419
sighs quiet TLS client certificates but

00:08:33,899 --> 00:08:38,879
that's a rare case so let's stick with

00:08:36,419 --> 00:08:40,740
cookies as the best the most important

00:08:38,879 --> 00:08:42,719
example here now you could also have

00:08:40,740 --> 00:08:44,759
explicit authentication so that's

00:08:42,719 --> 00:08:47,249
everything that's not implicit so for

00:08:44,759 --> 00:08:48,689
example you set a bear token or a custom

00:08:47,249 --> 00:08:50,610
header with your session token inside

00:08:48,689 --> 00:08:52,230
that's explicit authentication because

00:08:50,610 --> 00:08:53,490
you have to set the token at each

00:08:52,230 --> 00:08:55,350
request

00:08:53,490 --> 00:08:58,050
in view for example if you use Axios as

00:08:55,350 --> 00:08:59,820
your HTTP client library you can set

00:08:58,050 --> 00:09:02,010
this header you can you know make a

00:08:59,820 --> 00:09:04,370
request listener and add this header at

00:09:02,010 --> 00:09:06,030
each request who has done this already I

00:09:04,370 --> 00:09:09,090
have done this as well

00:09:06,030 --> 00:09:11,820
so this is explicit off vacation it

00:09:09,090 --> 00:09:13,350
could also be in a body parameter world

00:09:11,820 --> 00:09:17,520
it could it's everything that's not

00:09:13,350 --> 00:09:19,860
implicit good now the cross across or

00:09:17,520 --> 00:09:21,630
tree attack works as follows let me give

00:09:19,860 --> 00:09:23,040
you this as an example so on the left

00:09:21,630 --> 00:09:26,640
hand side you see the website that's

00:09:23,040 --> 00:09:29,070
open its bank comm and you're logged in

00:09:26,640 --> 00:09:31,440
in your bank account and you can see the

00:09:29,070 --> 00:09:33,390
list of transactions in there now on the

00:09:31,440 --> 00:09:35,910
bottom left you can see that the bank

00:09:33,390 --> 00:09:40,020
become cookie jar contains a session ID

00:09:35,910 --> 00:09:42,390
for that Bank website okay so within

00:09:40,020 --> 00:09:45,210
that same browser instance if any HTTP

00:09:42,390 --> 00:09:47,130
request goes to HTTPS bank comm that

00:09:45,210 --> 00:09:48,780
cookie is going to be attached implicit

00:09:47,130 --> 00:09:50,970
authentication every time you don't have

00:09:48,780 --> 00:09:54,390
to do this manually or anything okay

00:09:50,970 --> 00:09:56,310
now an attacker alerts you to there a

00:09:54,390 --> 00:09:57,780
website that is under their control for

00:09:56,310 --> 00:09:59,610
example you get an email and you click

00:09:57,780 --> 00:10:01,620
on that link or you get a message you

00:09:59,610 --> 00:10:03,180
click on that link okay and it opens up

00:10:01,620 --> 00:10:05,250
in the same browser now we have a new

00:10:03,180 --> 00:10:06,060
tab it's a different origin because it's

00:10:05,250 --> 00:10:07,880
attacker.com

00:10:06,060 --> 00:10:13,170
I wouldn't call the site by the way this

00:10:07,880 --> 00:10:14,850
this domain name is taken I would take a

00:10:13,170 --> 00:10:16,200
different one that maybe sounds

00:10:14,850 --> 00:10:18,510
something similar like Bank of tongue

00:10:16,200 --> 00:10:19,710
bank with two K's or anything I don't

00:10:18,510 --> 00:10:23,160
know I would just make up a domain

00:10:19,710 --> 00:10:25,260
that's similar and in this website we

00:10:23,160 --> 00:10:29,040
have an HTML document we have a classic

00:10:25,260 --> 00:10:32,910
HTML form that form action as you can

00:10:29,040 --> 00:10:35,970
see points to bank com it says method

00:10:32,910 --> 00:10:38,670
post and it has two input fields it has

00:10:35,970 --> 00:10:40,440
the attacker as the transfer target and

00:10:38,670 --> 00:10:43,560
it has an amount of 1 million

00:10:40,440 --> 00:10:44,760
I think it's 1 million euros ok and here

00:10:43,560 --> 00:10:46,920
there's a little script it says document

00:10:44,760 --> 00:10:49,050
that malicious form refers to this ID

00:10:46,920 --> 00:10:50,870
here not submit so that forms gonna be

00:10:49,050 --> 00:10:52,920
submitted ok

00:10:50,870 --> 00:10:54,390
what's gonna happen do you think that

00:10:52,920 --> 00:10:57,900
cookies gonna be attached to the request

00:10:54,390 --> 00:10:59,280
is it even gonna work yeah it's gonna

00:10:57,900 --> 00:11:01,740
work this is gonna be an authenticated

00:10:59,280 --> 00:11:03,360
request yes it is because we said it's

00:11:01,740 --> 00:11:06,800
implicit authentication it's gonna be

00:11:03,360 --> 00:11:10,950
authenticated so is this

00:11:06,800 --> 00:11:14,010
transferor gonna be created yeah

00:11:10,950 --> 00:11:16,920
so that's cross advocate or tree

00:11:14,010 --> 00:11:19,320
now it's a cross origin request and the

00:11:16,920 --> 00:11:22,080
way we can do cross-origin requests the

00:11:19,320 --> 00:11:23,640
ways are limited but everything that can

00:11:22,080 --> 00:11:26,160
be done with an HTML form is still

00:11:23,640 --> 00:11:28,530
allowed for legacy purposes you can have

00:11:26,160 --> 00:11:29,910
websites that do cross-origin login

00:11:28,530 --> 00:11:35,640
requests or anything like that

00:11:29,910 --> 00:11:38,870
okay so that's still allowed so this

00:11:35,640 --> 00:11:41,670
attack works under these circumstances

00:11:38,870 --> 00:11:43,500
first it must be right operation so

00:11:41,670 --> 00:11:44,940
something needs to change when you send

00:11:43,500 --> 00:11:47,310
that request to the server otherwise

00:11:44,940 --> 00:11:49,080
it's not gonna have any effect the thing

00:11:47,310 --> 00:11:51,180
is if you send a get request it's gonna

00:11:49,080 --> 00:11:52,350
be sent as well but you cannot read the

00:11:51,180 --> 00:11:54,510
response the response is not

00:11:52,350 --> 00:11:56,850
cross-origin reads are prohibited as we

00:11:54,510 --> 00:11:58,860
heard before right you can hear for

00:11:56,850 --> 00:12:00,810
example on the right side you can make a

00:11:58,860 --> 00:12:02,310
little script that does an HX call to

00:12:00,810 --> 00:12:04,260
bank.com to get the list of the

00:12:02,310 --> 00:12:05,490
transactions and the request is gonna be

00:12:04,260 --> 00:12:07,680
sent the request is gonna be

00:12:05,490 --> 00:12:09,540
authenticated but the response is not

00:12:07,680 --> 00:12:11,220
gonna be given back to your script you

00:12:09,540 --> 00:12:13,470
cannot read the response it looks like

00:12:11,220 --> 00:12:15,570
an empty response ok so the attack only

00:12:13,470 --> 00:12:17,550
makes sense for write operations it can

00:12:15,570 --> 00:12:19,440
be via get if it's wrongly

00:12:17,550 --> 00:12:22,110
implemented on the server side but

00:12:19,440 --> 00:12:27,150
mostly it's relevant for post requests

00:12:22,110 --> 00:12:29,370
for creating a new object also the

00:12:27,150 --> 00:12:31,410
server needs to accept the three

00:12:29,370 --> 00:12:33,840
standard content types that are

00:12:31,410 --> 00:12:35,970
supported and forms there are only three

00:12:33,840 --> 00:12:39,410
HTML forms only can do three things they

00:12:35,970 --> 00:12:42,690
can't do Chasen no I tried it it can't

00:12:39,410 --> 00:12:44,850
it can be application form URL encoded

00:12:42,690 --> 00:12:47,790
it can be multi-part form data what's

00:12:44,850 --> 00:12:50,520
the second one used for usually for file

00:12:47,790 --> 00:12:53,100
uploads exactly and it's also text plain

00:12:50,520 --> 00:12:55,560
is also supported that's you know the

00:12:53,100 --> 00:13:00,480
parameter name and the value just one

00:12:55,560 --> 00:13:02,310
line after the other so it must be right

00:13:00,480 --> 00:13:05,490
operation it needs to be in one of those

00:13:02,310 --> 00:13:07,290
three content types and it needs to be

00:13:05,490 --> 00:13:08,250
with implicit authentication otherwise

00:13:07,290 --> 00:13:10,380
the request is not gonna be

00:13:08,250 --> 00:13:12,600
authenticated I cannot set a header with

00:13:10,380 --> 00:13:14,310
an HTML form neither not possible you

00:13:12,600 --> 00:13:17,340
can do this we can only set parameters

00:13:14,310 --> 00:13:19,750
and when no standard header is required

00:13:17,340 --> 00:13:23,170
for that very same reason

00:13:19,750 --> 00:13:26,080
okay I cannot add a non-standard header

00:13:23,170 --> 00:13:28,510
with an HTML form that's why this

00:13:26,080 --> 00:13:33,070
cross-origin post capability is limited

00:13:28,510 --> 00:13:35,890
to requests without a custom header so

00:13:33,070 --> 00:13:40,240
in short anything that can be done with

00:13:35,890 --> 00:13:42,100
a classic HTML form is possible now if

00:13:40,240 --> 00:13:43,630
you look at this a little closer and we

00:13:42,100 --> 00:13:47,470
want to come up with an elegant solution

00:13:43,630 --> 00:13:49,450
against cross-site request forgery we

00:13:47,470 --> 00:13:52,450
can just set a non-standard header and

00:13:49,450 --> 00:13:54,870
we're done we need to check on the

00:13:52,450 --> 00:13:57,280
server side that it's there as well okay

00:13:54,870 --> 00:13:58,660
but if I said in a non-standard header

00:13:57,280 --> 00:14:00,780
and a check on the server side is there

00:13:58,660 --> 00:14:05,080
no cross that we could torture anymore

00:14:00,780 --> 00:14:07,930
no CSRF token hassle no cookies no

00:14:05,080 --> 00:14:10,720
double double submit request pattern

00:14:07,930 --> 00:14:13,510
stuff you know all you need to do is set

00:14:10,720 --> 00:14:15,070
especially for view CS or any single

00:14:13,510 --> 00:14:16,450
page application framework it's very

00:14:15,070 --> 00:14:18,820
easy to just set the header at each

00:14:16,450 --> 00:14:20,770
requests very easy so let me show you

00:14:18,820 --> 00:14:23,560
how we did this in our project we said

00:14:20,770 --> 00:14:25,600
access default headers common this any

00:14:23,560 --> 00:14:27,339
header it doesn't but the value doesn't

00:14:25,600 --> 00:14:29,830
matter you can write anything in there

00:14:27,339 --> 00:14:32,380
it just needs to have a value we called

00:14:29,830 --> 00:14:34,990
it X access or F token and on the server

00:14:32,380 --> 00:14:39,790
side you just check that it's there we

00:14:34,990 --> 00:14:43,060
say request headers has this header done

00:14:39,790 --> 00:14:45,640
no tokens required okay that's why I

00:14:43,060 --> 00:14:48,070
said if you take a step back and look

00:14:45,640 --> 00:14:49,150
into detail how same origin policy in

00:14:48,070 --> 00:14:50,710
this case and implicit authentication

00:14:49,150 --> 00:14:52,420
work you can come up with elegant

00:14:50,710 --> 00:14:56,500
solutions that don't need any user of

00:14:52,420 --> 00:15:00,550
tokens so developers checklist for a

00:14:56,500 --> 00:15:02,050
cross-site request forgery the first

00:15:00,550 --> 00:15:04,660
step you needs to do on the server side

00:15:02,050 --> 00:15:06,400
is strictly distinguish get from non get

00:15:04,660 --> 00:15:08,500
that's very important because there are

00:15:06,400 --> 00:15:10,960
different rules for get requests gates

00:15:08,500 --> 00:15:12,370
needs to be get only post post only same

00:15:10,960 --> 00:15:13,990
for put patch delete and all the others

00:15:12,370 --> 00:15:17,740
but post is the most important one and

00:15:13,990 --> 00:15:19,480
then either use explicit authentication

00:15:17,740 --> 00:15:20,530
so if you have a bearer token you don't

00:15:19,480 --> 00:15:22,510
have to use their F neither you can

00:15:20,530 --> 00:15:25,600
throw away or your tokens if you have a

00:15:22,510 --> 00:15:29,680
bare token okay throw away or your CSRF

00:15:25,600 --> 00:15:31,060
tokens I mean you could also include the

00:15:29,680 --> 00:15:32,500
per sessions years I have token but

00:15:31,060 --> 00:15:33,790
that's the complicated solution that we

00:15:32,500 --> 00:15:35,680
want to avoid

00:15:33,790 --> 00:15:37,600
or you could also only accept a

00:15:35,680 --> 00:15:40,060
non-standard format so if you only

00:15:37,600 --> 00:15:40,900
accept Jason on the server-side no cross

00:15:40,060 --> 00:15:44,530
that we just worked really possible

00:15:40,900 --> 00:15:46,900
because I cannot set a Jason content

00:15:44,530 --> 00:15:50,530
type with my HTML forms so CSRF is not

00:15:46,900 --> 00:15:52,060
possible or the simplest of the all of

00:15:50,530 --> 00:15:53,620
these is just set a custom header and

00:15:52,060 --> 00:15:56,850
check if it's there on the server side

00:15:53,620 --> 00:16:01,150
done okay you could also combine these

00:15:56,850 --> 00:16:02,440
but not necessary also as a good defense

00:16:01,150 --> 00:16:04,270
in depth you could set the same site

00:16:02,440 --> 00:16:06,700
cookie attribute for your session

00:16:04,270 --> 00:16:08,380
cookies the thing is is just not

00:16:06,700 --> 00:16:10,900
supported in all browsers it even got

00:16:08,380 --> 00:16:13,360
back ported to Internet Explorer that's

00:16:10,900 --> 00:16:15,700
no joke it really got back ported so you

00:16:13,360 --> 00:16:17,890
have a pretty pretty broad support

00:16:15,700 --> 00:16:21,490
already that cookie attribute a cookie

00:16:17,890 --> 00:16:24,700
flag what it does is let's go back to

00:16:21,490 --> 00:16:26,980
this slide with the example imagine on

00:16:24,700 --> 00:16:29,830
the bottom left the session ID cookie if

00:16:26,980 --> 00:16:32,860
this cookie had the same side cookie

00:16:29,830 --> 00:16:34,930
flag set it would not be added to this

00:16:32,860 --> 00:16:36,490
requests of the form here on the right

00:16:34,930 --> 00:16:38,530
side because it's same site only

00:16:36,490 --> 00:16:39,940
requested or rich in it from the same

00:16:38,530 --> 00:16:43,120
site are you gonna be authenticated

00:16:39,940 --> 00:16:46,740
all right just browser support is not

00:16:43,120 --> 00:16:52,150
100% that's the only downside here good

00:16:46,740 --> 00:16:55,750
brains exploding or brains okay okay

00:16:52,150 --> 00:16:57,130
they will explode here cross-origin

00:16:55,750 --> 00:17:01,240
resource sharing because this is brain

00:16:57,130 --> 00:17:02,650
fog pure brain I want to help you

00:17:01,240 --> 00:17:04,720
through this because it took me years to

00:17:02,650 --> 00:17:08,140
wrap my hand around this and that's why

00:17:04,720 --> 00:17:10,780
I want to help you now imagine for

00:17:08,140 --> 00:17:13,540
example you have you have a website that

00:17:10,780 --> 00:17:15,790
runs on example.com and you have your

00:17:13,540 --> 00:17:17,740
back-end API that runs on API dot

00:17:15,790 --> 00:17:19,720
example.com now that's two different

00:17:17,740 --> 00:17:22,150
origins and the same origin policy apply

00:17:19,720 --> 00:17:24,070
so you cannot set any send a get request

00:17:22,150 --> 00:17:26,140
to your API because the browser is going

00:17:24,070 --> 00:17:28,240
to prohibit that now in order for this

00:17:26,140 --> 00:17:29,650
to if you want to make this work what

00:17:28,240 --> 00:17:34,330
you could use is cross-origin resource

00:17:29,650 --> 00:17:37,030
sharing okay so what it does it drills

00:17:34,330 --> 00:17:39,360
holes into the same origin policy in a

00:17:37,030 --> 00:17:41,740
controlled way you can open up

00:17:39,360 --> 00:17:46,240
cross-origin requests in a controlled

00:17:41,740 --> 00:17:47,800
manner for example look at this request

00:17:46,240 --> 00:17:50,110
on API example com

00:17:47,800 --> 00:17:52,060
the bottom in the response header it

00:17:50,110 --> 00:17:54,880
says access control allow origin and

00:17:52,060 --> 00:17:57,880
this allows the origin example.com to

00:17:54,880 --> 00:18:00,280
access the API with get requests for

00:17:57,880 --> 00:18:04,240
example and also other post requests all

00:18:00,280 --> 00:18:06,100
types of requests actually now there are

00:18:04,240 --> 00:18:08,470
two types of requests that play a role

00:18:06,100 --> 00:18:11,140
in cross-origin resource sharing that's

00:18:08,470 --> 00:18:15,780
simple requests and preflighted requests

00:18:11,140 --> 00:18:20,650
now simple requests are just the ones

00:18:15,780 --> 00:18:22,510
basically that do not change anything on

00:18:20,650 --> 00:18:25,210
the on the other side we have for

00:18:22,510 --> 00:18:27,970
example a get request to the URL bard on

00:18:25,210 --> 00:18:29,680
other resources something to get request

00:18:27,970 --> 00:18:32,500
we have no custom header set or anything

00:18:29,680 --> 00:18:34,630
now if that request is going to be sent

00:18:32,500 --> 00:18:36,280
to the server a browser that is capable

00:18:34,630 --> 00:18:38,740
of cross-origin resource sharing is

00:18:36,280 --> 00:18:40,480
automatically going to add an origin

00:18:38,740 --> 00:18:42,010
header so the very last line on this

00:18:40,480 --> 00:18:45,070
slide it says origin it should be food

00:18:42,010 --> 00:18:47,410
out example that header can not be

00:18:45,070 --> 00:18:49,900
manipulated by a JavaScript you can try

00:18:47,410 --> 00:18:51,660
it it's not going to work okay so that

00:18:49,900 --> 00:18:56,410
hair is gonna work is gonna be sent by

00:18:51,660 --> 00:18:58,120
now if the server sends back an access

00:18:56,410 --> 00:19:02,260
control allow origin with either an

00:18:58,120 --> 00:19:05,140
asterisk or the explicit host what's

00:19:02,260 --> 00:19:06,580
gonna happen we said before that the

00:19:05,140 --> 00:19:07,810
request is going to be sent anyway it's

00:19:06,580 --> 00:19:08,590
gonna be an authenticated request in

00:19:07,810 --> 00:19:15,370
everything but what's the difference

00:19:08,590 --> 00:19:19,930
with this header say it loud it's gonna

00:19:15,370 --> 00:19:21,880
it's gonna give the ability to read the

00:19:19,930 --> 00:19:23,530
request to the originating JavaScript

00:19:21,880 --> 00:19:25,270
that's the only difference okay so you

00:19:23,530 --> 00:19:27,490
can actually read the cat request with

00:19:25,270 --> 00:19:30,160
the response to your request which would

00:19:27,490 --> 00:19:31,750
not be allowed by default because of the

00:19:30,160 --> 00:19:35,200
same origin policy cross-origin reads

00:19:31,750 --> 00:19:37,540
are typically disallowed now we also

00:19:35,200 --> 00:19:39,760
have preflighted requests and those are

00:19:37,540 --> 00:19:43,120
requests that for example have a

00:19:39,760 --> 00:19:44,560
non-standard content type like xml is

00:19:43,120 --> 00:19:46,870
not a standard content app that can be

00:19:44,560 --> 00:19:49,600
done with the form or you have a custom

00:19:46,870 --> 00:19:52,180
header set or a combination of those

00:19:49,600 --> 00:19:54,210
things now if this happens that have a

00:19:52,180 --> 00:19:56,260
look at what happens in the browser

00:19:54,210 --> 00:19:59,560
these are the two non the standard

00:19:56,260 --> 00:20:01,690
things if you send this request by a

00:19:59,560 --> 00:20:04,330
child script then the

00:20:01,690 --> 00:20:06,909
I was gonna be issuing a preflight

00:20:04,330 --> 00:20:08,919
requests it's gonna gonna ask the server

00:20:06,909 --> 00:20:13,389
look server this is what I'm about to

00:20:08,919 --> 00:20:15,789
send you is this okay write a post

00:20:13,389 --> 00:20:16,960
request would automatically create an

00:20:15,789 --> 00:20:20,049
object on the server side for example

00:20:16,960 --> 00:20:21,039
and when the browser sees okay this is a

00:20:20,049 --> 00:20:23,379
port you guys they could change

00:20:21,039 --> 00:20:26,200
something on the other side it's gonna

00:20:23,379 --> 00:20:27,490
issue an options requests and ask look

00:20:26,200 --> 00:20:30,009
this is the origin we're gonna send that

00:20:27,490 --> 00:20:32,340
request from I want to send a post

00:20:30,009 --> 00:20:34,509
request and I have these two

00:20:32,340 --> 00:20:37,990
non-standard headers that I want to set

00:20:34,509 --> 00:20:40,330
server is this okay and then if it is

00:20:37,990 --> 00:20:43,389
okay the service gonna answer this back

00:20:40,330 --> 00:20:46,779
it's gonna say X is control our origin

00:20:43,389 --> 00:20:49,389
the originating origin then it's gonna

00:20:46,779 --> 00:20:51,299
say X is control our methods these three

00:20:49,389 --> 00:20:53,679
methods are allowed I can take them

00:20:51,299 --> 00:20:55,389
execute allow header so these two non

00:20:53,679 --> 00:20:57,129
standard standard headers that you're

00:20:55,389 --> 00:20:59,110
about to send me are okay as well I can

00:20:57,129 --> 00:21:01,120
accept them and there's one more thing

00:20:59,110 --> 00:21:07,870
access control max-age what do you think

00:21:01,120 --> 00:21:10,990
that's gonna be no it's it's about

00:21:07,870 --> 00:21:13,149
caching exactly so so that the server

00:21:10,990 --> 00:21:14,769
doesn't have to ask this same question

00:21:13,149 --> 00:21:17,019
for each post request over and over

00:21:14,769 --> 00:21:18,879
again the server tail tells the client

00:21:17,019 --> 00:21:22,870
or the browser remember this information

00:21:18,879 --> 00:21:24,610
here for the next 86,400 seconds which

00:21:22,870 --> 00:21:30,250
is I don't know how much it's one day I

00:21:24,610 --> 00:21:32,799
think it's one day okay and only then

00:21:30,250 --> 00:21:34,419
the if the browser sees that the server

00:21:32,799 --> 00:21:38,169
accepts those rules it's going to send

00:21:34,419 --> 00:21:39,639
the actual request so the access control

00:21:38,169 --> 00:21:41,769
request header is not set anymore here

00:21:39,639 --> 00:21:43,960
so this is the actual request so

00:21:41,769 --> 00:21:46,360
standard request is just gonna go

00:21:43,960 --> 00:21:48,700
through and the server decides whether

00:21:46,360 --> 00:21:52,570
the response can be opened up to the

00:21:48,700 --> 00:21:54,009
originating JavaScript if it's a request

00:21:52,570 --> 00:21:55,870
it could change something on the server

00:21:54,009 --> 00:21:57,700
side such as a post request or something

00:21:55,870 --> 00:21:59,590
with the custom header then it's gonna

00:21:57,700 --> 00:22:01,029
ask first with this options request you

00:21:59,590 --> 00:22:03,340
might have seen this in your network tab

00:22:01,029 --> 00:22:05,049
and ask yourself what that means so

00:22:03,340 --> 00:22:09,659
that's it it's asking the server but it

00:22:05,049 --> 00:22:13,179
is okay to send that request good so

00:22:09,659 --> 00:22:15,039
just a little checklist for you if you

00:22:13,179 --> 00:22:15,549
want if if you have for example your

00:22:15,039 --> 00:22:16,480
front-end

00:22:15,549 --> 00:22:19,480
you're back and you're backin on

00:22:16,480 --> 00:22:21,009
different origins don't just set extra

00:22:19,480 --> 00:22:23,080
controller origin to an asterisk

00:22:21,009 --> 00:22:24,549
everywhere because that's going to open

00:22:23,080 --> 00:22:26,190
you up to cross that request towards

00:22:24,549 --> 00:22:30,009
your text the one that we saw before

00:22:26,190 --> 00:22:32,139
including read access so it's you know

00:22:30,009 --> 00:22:34,899
next level cross-site request forgery if

00:22:32,139 --> 00:22:38,200
you will we don't want this okay always

00:22:34,899 --> 00:22:39,850
just whitelist specific origin headers

00:22:38,200 --> 00:22:41,499
have them in a configuration file

00:22:39,850 --> 00:22:43,509
somewhere and if the origin header is

00:22:41,499 --> 00:22:46,929
one of these send that same header back

00:22:43,509 --> 00:22:48,850
don't just reflect the origin header

00:22:46,929 --> 00:22:51,399
because that's the same thing as just

00:22:48,850 --> 00:22:52,659
setting an asterisk for everybody check

00:22:51,399 --> 00:22:53,859
that in your environment if you have

00:22:52,659 --> 00:22:55,419
said this because this could be

00:22:53,859 --> 00:22:58,749
dangerous it might pop up in an

00:22:55,419 --> 00:23:00,159
exponentiation test don't push the

00:22:58,749 --> 00:23:01,779
development environment settings to

00:23:00,159 --> 00:23:02,950
production because they could contain

00:23:01,779 --> 00:23:04,629
something like this because in your

00:23:02,950 --> 00:23:06,340
development environment you might want

00:23:04,629 --> 00:23:09,789
to be able to just you know see

00:23:06,340 --> 00:23:11,619
everything so whitelist the allowed

00:23:09,789 --> 00:23:13,929
origins as a configuration parameter and

00:23:11,619 --> 00:23:15,850
whitelist only allowed methods and

00:23:13,929 --> 00:23:18,359
headers just make sure not to open up

00:23:15,850 --> 00:23:18,359
everything yeah

00:23:28,020 --> 00:23:34,230
sure hey don't the only thing it does is

00:23:30,980 --> 00:23:36,480
its protecting the user yeah of course

00:23:34,230 --> 00:23:37,710
in a coal request or curl command line

00:23:36,480 --> 00:23:39,600
environment you have everything under

00:23:37,710 --> 00:23:41,070
your control so if you put the session

00:23:39,600 --> 00:23:42,210
ID in there and the headers and

00:23:41,070 --> 00:24:01,559
everything it's of course it's gonna

00:23:42,210 --> 00:24:03,870
work okay cool now now comes the most

00:24:01,559 --> 00:24:06,420
important topic in front-end development

00:24:03,870 --> 00:24:09,660
which is cross-site scripting who of you

00:24:06,420 --> 00:24:11,640
has heard of cross-site scripting who

00:24:09,660 --> 00:24:13,790
has fixed it in their application that's

00:24:11,640 --> 00:24:18,240
less hence than before Oh

00:24:13,790 --> 00:24:21,630
who has exploited it somewhere I have as

00:24:18,240 --> 00:24:24,900
well I do that every day cross-site

00:24:21,630 --> 00:24:27,270
scripting now this is gonna be huge a as

00:24:24,900 --> 00:24:32,880
specifics so let me show you a little

00:24:27,270 --> 00:24:36,090
demo demo on this I have created a

00:24:32,880 --> 00:24:38,010
little application and I want to show

00:24:36,090 --> 00:24:43,050
you a couple of pitfalls that are

00:24:38,010 --> 00:24:45,179
important to us UTSA developers now when

00:24:43,050 --> 00:24:46,950
you want to avoid cross scripting it's

00:24:45,179 --> 00:24:51,410
basically only two things you need to

00:24:46,950 --> 00:24:59,100
watch out for the first one is V - HTML

00:24:51,410 --> 00:25:03,050
what does V - HTML do and which property

00:24:59,100 --> 00:25:05,760
is that which dumb property is that of

00:25:03,050 --> 00:25:09,540
the element elements that's what it's

00:25:05,760 --> 00:25:12,540
going to be doing in the background in

00:25:09,540 --> 00:25:14,820
your HTML exactly so V - HTML leads to

00:25:12,540 --> 00:25:17,520
an element dot inner HTML in the

00:25:14,820 --> 00:25:21,510
background now if you said inner HTML it

00:25:17,520 --> 00:25:24,870
can contain HTML and HTML means it can

00:25:21,510 --> 00:25:27,540
also contain scripts okay so the whole

00:25:24,870 --> 00:25:29,550
thing is about when you have a value for

00:25:27,540 --> 00:25:32,510
example this value test here which is

00:25:29,550 --> 00:25:35,220
defined on the bottom here in the data

00:25:32,510 --> 00:25:38,400
when this value is under the control of

00:25:35,220 --> 00:25:39,990
an attacker it gets dangerous think for

00:25:38,400 --> 00:25:41,640
example of a case where you have a

00:25:39,990 --> 00:25:43,860
messaging application

00:25:41,640 --> 00:25:45,179
and you can send back and forth messages

00:25:43,860 --> 00:25:47,820
to each other and those measures can be

00:25:45,179 --> 00:25:50,130
formatted you can make bold text you can

00:25:47,820 --> 00:25:52,559
make unordered lists and all these sorts

00:25:50,130 --> 00:25:55,320
of things now if you don't do anything

00:25:52,559 --> 00:25:57,870
and just create an element for your

00:25:55,320 --> 00:26:00,750
message div and do inner HTML or v dash

00:25:57,870 --> 00:26:02,549
HTML you're gonna have process scripting

00:26:00,750 --> 00:26:04,470
because then an attacker or the other

00:26:02,549 --> 00:26:06,420
side of on the the other user on the

00:26:04,470 --> 00:26:08,880
other side can just create an HTML come

00:26:06,420 --> 00:26:10,470
including script tags when you open the

00:26:08,880 --> 00:26:12,420
message in your application that script

00:26:10,470 --> 00:26:14,460
is gonna be executed in your user

00:26:12,420 --> 00:26:16,370
context that's what it's all about they

00:26:14,460 --> 00:26:20,549
want to interact with the application

00:26:16,370 --> 00:26:23,070
pretending they are you okay so it is

00:26:20,549 --> 00:26:26,370
important that when a value that falls

00:26:23,070 --> 00:26:29,429
into V dash HTML is controlled by an

00:26:26,370 --> 00:26:32,640
attacker or another user just let me

00:26:29,429 --> 00:26:35,450
show an example we have created a little

00:26:32,640 --> 00:26:38,429
text here that contains such a

00:26:35,450 --> 00:26:40,230
formatting it contains a strong text and

00:26:38,429 --> 00:26:42,750
if you look at this side over here you

00:26:40,230 --> 00:26:45,870
can see that the example where it is is

00:26:42,750 --> 00:26:49,050
both okay let's just write out what

00:26:45,870 --> 00:26:52,369
happens if I say for example

00:26:49,050 --> 00:26:52,369
[Music]

00:26:57,470 --> 00:27:01,750
if I say this okay

00:27:04,090 --> 00:27:07,470
let's try scripted

00:27:12,960 --> 00:27:17,190
there's an arrow syntax error more

00:27:20,090 --> 00:27:22,960
does it say

00:27:25,760 --> 00:27:37,810
do you see air just going to put it back

00:27:35,120 --> 00:27:37,810
to where we were

00:27:42,240 --> 00:27:44,869
could be

00:27:50,860 --> 00:27:53,909
that's really weird

00:28:00,210 --> 00:28:05,039
okay there you go I don't know what's

00:28:03,149 --> 00:28:06,960
what was wrong before but you can see

00:28:05,039 --> 00:28:09,570
that this alert one is going to be

00:28:06,960 --> 00:28:12,629
executed once I open up this this site

00:28:09,570 --> 00:28:15,149
and the on error just fires because

00:28:12,629 --> 00:28:17,970
source equals x just doesn't exist

00:28:15,149 --> 00:28:20,190
so the error event handler is gonna is

00:28:17,970 --> 00:28:21,749
gonna fire and that contains or can

00:28:20,190 --> 00:28:31,350
contain JavaScript it will contain

00:28:21,749 --> 00:28:33,509
JavaScript okay that could have been a

00:28:31,350 --> 00:28:34,799
problem yes that's why I like the image

00:28:33,509 --> 00:28:37,649
tag more because it works in more

00:28:34,799 --> 00:28:40,470
situations when I do pan testing

00:28:37,649 --> 00:28:43,649
actually yeah so V - HTML does not have

00:28:40,470 --> 00:28:46,919
any sort of filtering or sanitization or

00:28:43,649 --> 00:28:52,710
anything now how can we solve this

00:28:46,919 --> 00:28:54,929
problem in this case when we need HTML

00:28:52,710 --> 00:28:57,240
in our elements we need to do

00:28:54,929 --> 00:29:00,389
sanitization so we need to make sure

00:28:57,240 --> 00:29:02,190
that only the the parts of the HTML that

00:29:00,389 --> 00:29:05,340
are allowed that do not contain any

00:29:02,190 --> 00:29:07,110
JavaScript are filtered out okay it's

00:29:05,340 --> 00:29:09,779
not only don't think just about script X

00:29:07,110 --> 00:29:13,379
there kid there are many places in in

00:29:09,779 --> 00:29:14,820
HTML where our script code can live it

00:29:13,379 --> 00:29:17,399
can be JavaScript event handlers there's

00:29:14,820 --> 00:29:20,159
onmouseover on key up on key down on

00:29:17,399 --> 00:29:21,899
error on body load whatever it is there

00:29:20,159 --> 00:29:23,700
are many there are 200 and something I

00:29:21,899 --> 00:29:26,240
don't know many many chava script event

00:29:23,700 --> 00:29:30,330
tenders were JavaScript code can live

00:29:26,240 --> 00:29:31,980
good so one library that we could use

00:29:30,330 --> 00:29:34,950
for sanitization is it's already

00:29:31,980 --> 00:29:37,080
imported here it's Dom purify that's a

00:29:34,950 --> 00:29:39,330
very good library it's Chaves gets

00:29:37,080 --> 00:29:41,460
written in JavaScript and it takes HTML

00:29:39,330 --> 00:29:42,210
and filters out the bad parts so

00:29:41,460 --> 00:29:43,889
everything that could potentially

00:29:42,210 --> 00:29:46,470
contain JavaScript and that's way more

00:29:43,889 --> 00:29:48,149
that you would think and it's very hard

00:29:46,470 --> 00:29:51,840
don't roll this on your own it's very

00:29:48,149 --> 00:29:54,450
hard to do let's try this out so before

00:29:51,840 --> 00:29:57,990
instead of just taking tests here let me

00:29:54,450 --> 00:30:04,289
just write text before that image shows

00:29:57,990 --> 00:30:06,240
up here I have this function down here

00:30:04,289 --> 00:30:07,559
that's called purify and takes a text

00:30:06,240 --> 00:30:09,330
and it returns Dom here if i dot

00:30:07,559 --> 00:30:12,190
sanitize so it sanitizes everything that

00:30:09,330 --> 00:30:16,390
could contain JavaScript out of there

00:30:12,190 --> 00:30:22,900
so when a to here is purify and I pass

00:30:16,390 --> 00:30:24,340
the text no it's tests save it and it

00:30:22,900 --> 00:30:25,660
still works so the text is still there

00:30:24,340 --> 00:30:27,700
the image is still there but you don't

00:30:25,660 --> 00:30:30,010
see the pop-up anymore so if I have a

00:30:27,700 --> 00:30:38,670
closer look at this element here let's

00:30:30,010 --> 00:30:38,670
inspect this image here it says here

00:30:39,120 --> 00:30:43,830
image source equals x and there is no on

00:30:41,980 --> 00:30:46,030
error anymore so it filtered out the

00:30:43,830 --> 00:30:49,330
potentially dangerous parts that could

00:30:46,030 --> 00:30:51,190
contain JavaScript of course in practice

00:30:49,330 --> 00:30:53,080
what you would do you would not you know

00:30:51,190 --> 00:30:55,840
include this function or write this

00:30:53,080 --> 00:30:58,600
method for each and every component that

00:30:55,840 --> 00:31:01,420
you do you might have a custom directive

00:30:58,600 --> 00:31:06,100
or anything that you can use or in all

00:31:01,420 --> 00:31:08,350
parts of your application now this is

00:31:06,100 --> 00:31:11,950
the one thing so be very very very

00:31:08,350 --> 00:31:14,290
careful with v date - HTML especially if

00:31:11,950 --> 00:31:17,980
the input can come potentially from an

00:31:14,290 --> 00:31:21,010
attacker okay use it with care and if

00:31:17,980 --> 00:31:24,160
you use it and the input is typed by a

00:31:21,010 --> 00:31:26,620
user then please use something like Dom

00:31:24,160 --> 00:31:27,700
purify to purify to put out anything

00:31:26,620 --> 00:31:29,680
that could be dangerous

00:31:27,700 --> 00:31:31,600
now the second thing I always ask

00:31:29,680 --> 00:31:33,400
JavaScript or front-end developers not

00:31:31,600 --> 00:31:35,830
to do when using a single page

00:31:33,400 --> 00:31:38,370
application framework is Dom khufu I

00:31:35,830 --> 00:31:41,590
call it dumb come foo Duncan few means

00:31:38,370 --> 00:31:44,260
bypassing the standard view GS way to do

00:31:41,590 --> 00:31:48,670
something with the DOM and I have two

00:31:44,260 --> 00:31:52,510
examples down here now look at this

00:31:48,670 --> 00:31:54,910
there are many XSS sinks so functions

00:31:52,510 --> 00:31:56,680
that take a string and if that stream

00:31:54,910 --> 00:31:58,840
contains JavaScript it's going to be

00:31:56,680 --> 00:32:01,210
executed when is the function

00:31:58,840 --> 00:32:03,840
constructor right I have this mounted

00:32:01,210 --> 00:32:07,450
function here that is called once that

00:32:03,840 --> 00:32:09,880
you chess component is mounted when I

00:32:07,450 --> 00:32:11,590
save here what happens again is I have

00:32:09,880 --> 00:32:15,370
the alert one box on the right-hand side

00:32:11,590 --> 00:32:16,900
so this is just one potential thing so

00:32:15,370 --> 00:32:19,150
who if you knew for example that set

00:32:16,900 --> 00:32:21,430
timeout also can take a string not just

00:32:19,150 --> 00:32:24,550
a function as the first parameter but

00:32:21,430 --> 00:32:25,510
also string comment this out save it

00:32:24,550 --> 00:32:27,400
again

00:32:25,510 --> 00:32:32,410
what happens I have the alert box again

00:32:27,400 --> 00:32:36,820
and there are about 65 such Dom XSS

00:32:32,410 --> 00:32:39,630
sinks in the Dom API 60 is something not

00:32:36,820 --> 00:32:42,520
just these two there are 63 more okay

00:32:39,630 --> 00:32:44,620
don't do this stuff such as document

00:32:42,520 --> 00:32:46,480
write new function set Thomas set

00:32:44,620 --> 00:32:49,630
timeout and set interval with a string

00:32:46,480 --> 00:32:51,370
passed to the function and so on and so

00:32:49,630 --> 00:32:53,380
forth so if you want to have a look on

00:32:51,370 --> 00:32:55,600
github there's a project called it's

00:32:53,380 --> 00:32:58,600
called Dom XSS wiki there are lots of

00:32:55,600 --> 00:33:02,020
huge lists of Atomics assess sinks that

00:32:58,600 --> 00:33:06,490
could could bite you when developing

00:33:02,020 --> 00:33:08,049
with UTS so to sum this up when you code

00:33:06,490 --> 00:33:10,419
with UTS in order to avoid cross the

00:33:08,049 --> 00:33:13,570
scripting is basically two things V dash

00:33:10,419 --> 00:33:16,660
HTML be very careful and purify the

00:33:13,570 --> 00:33:19,750
input and second don't do kung fu just

00:33:16,660 --> 00:33:22,169
take the usual template syntax to output

00:33:19,750 --> 00:33:24,190
stuff don't do things like you know

00:33:22,169 --> 00:33:32,440
creating a new function this way or

00:33:24,190 --> 00:33:34,870
doing document right okay good so V HTML

00:33:32,440 --> 00:33:37,660
is the number one down XSS sink in view

00:33:34,870 --> 00:33:40,750
of KS avoid the come to stuff that I

00:33:37,660 --> 00:33:45,100
just show you I also don't render the

00:33:40,750 --> 00:33:47,710
template server-side now there's one

00:33:45,100 --> 00:33:49,630
thing that could get dangerous if you

00:33:47,710 --> 00:33:51,790
render your templates on the server side

00:33:49,630 --> 00:33:53,770
and you have for example an HTTP

00:33:51,790 --> 00:33:58,480
parameter that gets directly you put the

00:33:53,770 --> 00:34:00,580
directly into the view template there's

00:33:58,480 --> 00:34:02,620
something that could bite you because in

00:34:00,580 --> 00:34:07,620
the template I'm gonna show you the

00:34:02,620 --> 00:34:07,620
example I have that open I think here

00:34:30,230 --> 00:34:35,730
now what does that do so imagine you

00:34:33,960 --> 00:34:38,790
have a template that you don't it's not

00:34:35,730 --> 00:34:42,660
static but it's dynamic this part here

00:34:38,790 --> 00:34:45,060
is taken on the server side from an HTTP

00:34:42,660 --> 00:34:46,710
parameter and it's put in there so the

00:34:45,060 --> 00:34:48,270
the parameter can be controlled by an

00:34:46,710 --> 00:34:49,920
attacker by crafting your URL that

00:34:48,270 --> 00:34:51,510
contains this what I have marked here on

00:34:49,920 --> 00:34:52,860
the left hand side so they can

00:34:51,510 --> 00:34:54,810
potentially write something in there

00:34:52,860 --> 00:34:56,520
that also leads to the diode execution

00:34:54,810 --> 00:34:57,780
of chava script without changing

00:34:56,520 --> 00:35:00,780
anything that's down there in the

00:34:57,780 --> 00:35:03,720
controller okay so make your templates

00:35:00,780 --> 00:35:05,520
static always don't make them dynamic by

00:35:03,720 --> 00:35:07,260
any HTTP parameters or anything like

00:35:05,520 --> 00:35:09,240
that that's just the interest and it's

00:35:07,260 --> 00:35:12,150
gonna bite you as well so keep them

00:35:09,240 --> 00:35:14,250
static also be very careful with

00:35:12,150 --> 00:35:16,680
external libraries because they might do

00:35:14,250 --> 00:35:18,600
that Dom kung-fu stuff as well so there

00:35:16,680 --> 00:35:20,850
could be known vulnerabilities in your

00:35:18,600 --> 00:35:22,560
external libraries check them for known

00:35:20,850 --> 00:35:24,870
stuff from time to time you could use

00:35:22,560 --> 00:35:27,000
NPM audit or any other software that

00:35:24,870 --> 00:35:32,520
checks your dependencies for known

00:35:27,000 --> 00:35:35,330
balance good so we started across the

00:35:32,520 --> 00:35:37,740
scripting if you have huge applications

00:35:35,330 --> 00:35:39,420
it could be very hard to devoid cross

00:35:37,740 --> 00:35:41,580
the scripting in every party or every

00:35:39,420 --> 00:35:44,340
application but also use TS lint or IES

00:35:41,580 --> 00:35:47,010
lint to prohibit some of those functions

00:35:44,340 --> 00:35:49,260
so that at least you get a notice when

00:35:47,010 --> 00:35:50,520
you use them but a very good defense in

00:35:49,260 --> 00:35:52,560
depth against crossa scripting is the

00:35:50,520 --> 00:35:54,030
content security policy who has

00:35:52,560 --> 00:35:57,210
implemented the content security policy

00:35:54,030 --> 00:36:02,880
of you so it's two people two and a half

00:35:57,210 --> 00:36:05,070
three people in this room now I have a

00:36:02,880 --> 00:36:06,960
famous site here it says it's not a

00:36:05,070 --> 00:36:08,250
matter if you will introduce across the

00:36:06,960 --> 00:36:10,890
scripting moment we need applications

00:36:08,250 --> 00:36:12,570
but when okay so the more complex your

00:36:10,890 --> 00:36:13,920
applications are the more likely is it

00:36:12,570 --> 00:36:17,640
is that sometime you're going to

00:36:13,920 --> 00:36:19,290
introduce cross-site scripting a word of

00:36:17,640 --> 00:36:21,870
warning before you start implementing a

00:36:19,290 --> 00:36:24,660
CSP is it's not the solution of crossa

00:36:21,870 --> 00:36:27,120
scripting it's just a defense in depth

00:36:24,660 --> 00:36:28,950
so correct output encoding or using your

00:36:27,120 --> 00:36:31,650
single page application frameworks such

00:36:28,950 --> 00:36:34,560
as few GS the correct way is of utmost

00:36:31,650 --> 00:36:38,250
importance still okay it's only a second

00:36:34,560 --> 00:36:40,230
layer of defense so what is a content

00:36:38,250 --> 00:36:42,690
security policy it is a new HTTP

00:36:40,230 --> 00:36:43,920
response header that you can add on the

00:36:42,690 --> 00:36:45,390
server side you

00:36:43,920 --> 00:36:47,160
application or maybe also in your web

00:36:45,390 --> 00:36:50,400
server you can just statically set it as

00:36:47,160 --> 00:36:52,440
a string and it's basically a whitelist

00:36:50,400 --> 00:36:56,430
for dynamic resources so you can tell

00:36:52,440 --> 00:36:59,730
your HTML so when you send an HTML back

00:36:56,430 --> 00:37:01,349
to the to the web browser with beauteous

00:36:59,730 --> 00:37:03,960
applications you usually do this only at

00:37:01,349 --> 00:37:06,390
the first request you're gonna tell the

00:37:03,960 --> 00:37:08,400
browser look for this HTML here you can

00:37:06,390 --> 00:37:11,069
only get the Chava script files from

00:37:08,400 --> 00:37:14,460
this and that server and you can not use

00:37:11,069 --> 00:37:17,160
any inline CSS or inline JavaScript okay

00:37:14,460 --> 00:37:19,079
that's what you telling the browser that

00:37:17,160 --> 00:37:20,280
makes cross-site scripting way harder

00:37:19,079 --> 00:37:22,619
because think of the example that I

00:37:20,280 --> 00:37:24,270
showed you before the image tag on error

00:37:22,619 --> 00:37:26,880
equals something that's an inline

00:37:24,270 --> 00:37:28,109
JavaScript it's in HTML with a standard

00:37:26,880 --> 00:37:30,770
content security policy like it's

00:37:28,109 --> 00:37:33,299
defined here in the first code line

00:37:30,770 --> 00:37:36,839
inline scripts are not allowed anymore

00:37:33,299 --> 00:37:38,640
they are prohibited that's the main part

00:37:36,839 --> 00:37:39,470
of a constitutive policy so look at this

00:37:38,640 --> 00:37:41,670
example here

00:37:39,470 --> 00:37:43,650
with this content security policy in the

00:37:41,670 --> 00:37:45,930
first code line scripts or self and see

00:37:43,650 --> 00:37:48,329
the end of the example.com we tell the

00:37:45,930 --> 00:37:50,549
browser look if you load scripts you

00:37:48,329 --> 00:37:53,510
might only load them from self so the

00:37:50,549 --> 00:37:57,240
own origin or from this CDN over there

00:37:53,510 --> 00:37:58,920
nowhere else can you load script now if

00:37:57,240 --> 00:38:02,250
we have this HTML including the three

00:37:58,920 --> 00:38:06,210
scripts in the middle the first one is

00:38:02,250 --> 00:38:09,900
it gonna load yes it's gonna load what a

00:38:06,210 --> 00:38:11,849
slash slash mean without any protocol it

00:38:09,900 --> 00:38:13,829
takes the parent protocol implicitly so

00:38:11,849 --> 00:38:16,500
yes it's gonna work the second one is

00:38:13,829 --> 00:38:18,540
just an absolute path after the origin

00:38:16,500 --> 00:38:22,530
so it's gonna work as well and if I

00:38:18,540 --> 00:38:24,869
include evil com.com onaji yes it's not

00:38:22,530 --> 00:38:29,099
gonna work because it's not white listed

00:38:24,869 --> 00:38:31,460
on the top so it's gonna issue an error

00:38:29,099 --> 00:38:37,369
message like the one and at the bottom

00:38:31,460 --> 00:38:40,710
now the core and heart of Cross of

00:38:37,369 --> 00:38:45,059
continuity policy is that inline scripts

00:38:40,710 --> 00:38:47,160
are prohibited by default right so if

00:38:45,059 --> 00:38:49,369
you do something like this script new

00:38:47,160 --> 00:38:51,450
image whatever it's not gonna be

00:38:49,369 --> 00:38:53,880
executing because inner scripts are

00:38:51,450 --> 00:38:56,140
prohibited in the script is what mostly

00:38:53,880 --> 00:39:00,130
happens when across at scrutiny a script

00:38:56,140 --> 00:39:01,930
attack takes place okay so also

00:39:00,130 --> 00:39:03,790
disallowed our event handlers in

00:39:01,930 --> 00:39:05,620
attributes because they are also inline

00:39:03,790 --> 00:39:08,740
JavaScript such as on key up on key down

00:39:05,620 --> 00:39:11,170
on error they are prohibited as well and

00:39:08,740 --> 00:39:12,970
unsafe functions like Ebola set timeout

00:39:11,170 --> 00:39:14,980
and set interval I showed you the

00:39:12,970 --> 00:39:18,130
example of set timeout it takes a string

00:39:14,980 --> 00:39:21,490
directly and it can execute javascript

00:39:18,130 --> 00:39:23,230
is going to be disabled also angularjs

00:39:21,490 --> 00:39:24,670
version one did not work with the

00:39:23,230 --> 00:39:28,240
current security policy like this

00:39:24,670 --> 00:39:29,800
because it used evil a lot okay starting

00:39:28,240 --> 00:39:31,270
from angular 2 and also view che s it

00:39:29,800 --> 00:39:36,850
does work because they don't use evil

00:39:31,270 --> 00:39:38,140
anymore good so there is a cool thing

00:39:36,850 --> 00:39:40,210
about the content beauty policy if you

00:39:38,140 --> 00:39:43,330
want to get started with it and it's

00:39:40,210 --> 00:39:45,220
called the report only mode right so you

00:39:43,330 --> 00:39:47,470
can implement a con security policy

00:39:45,220 --> 00:39:49,990
without blocking actively blocking any

00:39:47,470 --> 00:39:52,360
scripts but still you get a notice if a

00:39:49,990 --> 00:39:54,430
script would have been blocked so if you

00:39:52,360 --> 00:39:56,260
have a big website where you're not sure

00:39:54,430 --> 00:39:57,430
if some part of the application is not

00:39:56,260 --> 00:39:59,050
going to work anymore because there

00:39:57,430 --> 00:40:01,330
might be some inline script somewhere

00:39:59,050 --> 00:40:03,910
you can implement the contrary policy

00:40:01,330 --> 00:40:07,180
and add the report only without the

00:40:03,910 --> 00:40:09,910
brackets just the - report - only and

00:40:07,180 --> 00:40:13,390
it's gonna report to the URL that you

00:40:09,910 --> 00:40:15,250
specified in report - URI so if some

00:40:13,390 --> 00:40:18,100
script is blocked it's gonna tell you

00:40:15,250 --> 00:40:20,050
it's gonna send Jason like this and tell

00:40:18,100 --> 00:40:22,840
you which site it was and which script

00:40:20,050 --> 00:40:25,990
it was there are free services online

00:40:22,840 --> 00:40:28,030
that you can just you can register to

00:40:25,990 --> 00:40:29,470
make a reporting server you don't have

00:40:28,030 --> 00:40:33,510
to set up your own reporting server

00:40:29,470 --> 00:40:33,510
there are ready-made projects for that

00:40:35,100 --> 00:40:42,550
strict dynamic is a cool thing where you

00:40:39,190 --> 00:40:45,400
can also tell the browser you remember

00:40:42,550 --> 00:40:46,810
the Dom XSS things like set timeout set

00:40:45,400 --> 00:40:51,160
interval and stuff like this

00:40:46,810 --> 00:40:53,260
with strict dynamic you can tell no

00:40:51,160 --> 00:40:55,420
sorry I'm just I'm confusing two things

00:40:53,260 --> 00:40:57,700
here strict dynamics means if you have a

00:40:55,420 --> 00:41:01,390
script that is already trusted that

00:40:57,700 --> 00:41:03,430
script can load other scripts okay so if

00:41:01,390 --> 00:41:05,140
you have a script like script up GS and

00:41:03,430 --> 00:41:06,940
that's gonna load other scripts with

00:41:05,140 --> 00:41:10,430
this directive strict dynamic you can

00:41:06,940 --> 00:41:14,610
whitelist the scripts in there

00:41:10,430 --> 00:41:17,370
good extract or your inline script it's

00:41:14,610 --> 00:41:19,920
easy with angular or UJS or any single

00:41:17,370 --> 00:41:22,590
page application because you don't have

00:41:19,920 --> 00:41:24,420
any inline scripts usually if you fire

00:41:22,590 --> 00:41:26,310
up a standard Lucia's project it's gonna

00:41:24,420 --> 00:41:27,810
be you have your app bundle and your

00:41:26,310 --> 00:41:29,880
vendor bundle may be in there and that's

00:41:27,810 --> 00:41:31,380
it it's all external javascript files

00:41:29,880 --> 00:41:34,740
and they are if you have a continuity

00:41:31,380 --> 00:41:36,750
policy with script source self it's

00:41:34,740 --> 00:41:38,640
gonna be white listed anyway okay so

00:41:36,750 --> 00:41:40,470
with single page applications this one

00:41:38,640 --> 00:41:43,440
is very easy that's why I'm telling you

00:41:40,470 --> 00:41:46,020
to do it then analyze where the dynamic

00:41:43,440 --> 00:41:49,560
sources might come from inline scripts

00:41:46,020 --> 00:41:51,630
and also script source something define

00:41:49,560 --> 00:41:52,830
the directives maybe start with report

00:41:51,630 --> 00:41:54,780
only if you have a more complex

00:41:52,830 --> 00:41:57,350
application and you want to know if it

00:41:54,780 --> 00:42:00,800
works or not if you have any violations

00:41:57,350 --> 00:42:03,180
start testing and then activate it by

00:42:00,800 --> 00:42:05,880
putting a directive without report only

00:42:03,180 --> 00:42:08,460
but I would keep the report URI and the

00:42:05,880 --> 00:42:09,870
because a violation is gonna be reported

00:42:08,460 --> 00:42:12,600
so if there's an across scripting attack

00:42:09,870 --> 00:42:15,330
happening you're gonna know and it's

00:42:12,600 --> 00:42:17,100
good to know that okay so put the report

00:42:15,330 --> 00:42:18,870
only away when once you gained

00:42:17,100 --> 00:42:21,350
confidence with your content security

00:42:18,870 --> 00:42:22,560
policy but keep the repo to your eye

00:42:21,350 --> 00:42:24,390
again

00:42:22,560 --> 00:42:25,860
this is not the first line of defense

00:42:24,390 --> 00:42:32,150
for cross-site scripting it's the second

00:42:25,860 --> 00:42:35,940
line of defense of defense in depth good

00:42:32,150 --> 00:42:37,830
still able to listen and I see the

00:42:35,940 --> 00:42:42,300
brainfuck level is going up to 9 out of

00:42:37,830 --> 00:42:45,120
10 for most of you two more things okay

00:42:42,300 --> 00:42:46,800
as this is an overview don't don't worry

00:42:45,120 --> 00:42:50,160
if there is something that you couldn't

00:42:46,800 --> 00:42:52,200
grasp 100% one cool thing that you can

00:42:50,160 --> 00:42:54,600
use if you're using a CDN a content

00:42:52,200 --> 00:42:57,120
delivery network to load your scripts

00:42:54,600 --> 00:43:01,650
from an external provider is sub

00:42:57,120 --> 00:43:03,510
resource integrity now imagine the

00:43:01,650 --> 00:43:06,210
following if a content delivery network

00:43:03,510 --> 00:43:08,760
gets compromised and that happened in

00:43:06,210 --> 00:43:10,350
the past then your site might be

00:43:08,760 --> 00:43:11,850
compromised as well because if it loads

00:43:10,350 --> 00:43:14,310
the script from there and loads it into

00:43:11,850 --> 00:43:15,990
the context of your site it can

00:43:14,310 --> 00:43:18,120
potentially execute anything in the name

00:43:15,990 --> 00:43:23,330
of your users and if that's thousands of

00:43:18,120 --> 00:43:25,920
users it could be important okay so

00:43:23,330 --> 00:43:28,140
this is the risk the content delivery

00:43:25,920 --> 00:43:31,170
network itself could be compromised

00:43:28,140 --> 00:43:35,460
now what sub resource integrity can do

00:43:31,170 --> 00:43:38,730
for you is it adds an attribute called

00:43:35,460 --> 00:43:41,400
integrity so say for example you load

00:43:38,730 --> 00:43:46,500
beauty as in the version two point

00:43:41,400 --> 00:43:47,820
something to point one point one and you

00:43:46,500 --> 00:43:49,650
know the script is going to look like

00:43:47,820 --> 00:43:50,910
this exactly it's gonna have this

00:43:49,650 --> 00:43:53,460
content it's not gonna change because

00:43:50,910 --> 00:43:55,680
the version is fixed then you can

00:43:53,460 --> 00:43:58,320
calculate the hash of it and put the

00:43:55,680 --> 00:44:00,180
hash into the script tag that means that

00:43:58,320 --> 00:44:01,650
browser loads the script is going to

00:44:00,180 --> 00:44:03,390
check if anything has changed

00:44:01,650 --> 00:44:05,760
if one byte in there changes is not

00:44:03,390 --> 00:44:07,470
going to load the script anymore okay so

00:44:05,760 --> 00:44:09,840
if somebody manipulates the script at

00:44:07,470 --> 00:44:11,370
the content delivery network your site

00:44:09,840 --> 00:44:14,250
is not gonna work anymore but at least

00:44:11,370 --> 00:44:17,970
the one can attack you okay so it's in

00:44:14,250 --> 00:44:19,320
the Tegrity check for your scripts you

00:44:17,970 --> 00:44:20,640
don't have to calculate the hash on your

00:44:19,320 --> 00:44:23,130
own you could do it in a command line

00:44:20,640 --> 00:44:24,870
but there are websites like for example

00:44:23,130 --> 00:44:26,910
sub resource sub resource integrity hash

00:44:24,870 --> 00:44:28,800
org where you can just put the URL if

00:44:26,910 --> 00:44:32,570
your script inside and it's gonna output

00:44:28,800 --> 00:44:32,570
the script tag including this integrity

00:44:33,410 --> 00:44:41,250
also a word of warning only do this if

00:44:36,420 --> 00:44:43,580
your CDN supports it if they give you

00:44:41,250 --> 00:44:46,920
the script X including that integrity

00:44:43,580 --> 00:44:48,570
parameter already because they might for

00:44:46,920 --> 00:44:50,580
example I don't know change the

00:44:48,570 --> 00:44:52,920
minifying algorithm of that script and

00:44:50,580 --> 00:44:54,390
then that's gonna violate the integrity

00:44:52,920 --> 00:44:56,490
as well and the script is not gonna load

00:44:54,390 --> 00:44:58,170
anymore if we have a look for example at

00:44:56,490 --> 00:44:59,910
the chick weary CDN they have this

00:44:58,170 --> 00:45:02,280
already included so they actively

00:44:59,910 --> 00:45:03,540
support sub resource integrity okay

00:45:02,280 --> 00:45:04,980
so have a look at that don't do it on

00:45:03,540 --> 00:45:07,320
your own maybe on your own server that

00:45:04,980 --> 00:45:09,690
you have under your own control but not

00:45:07,320 --> 00:45:14,250
just for a random CDN just for the ones

00:45:09,690 --> 00:45:16,200
that support it and then use it now just

00:45:14,250 --> 00:45:18,000
one essential thing basically WebSockets

00:45:16,200 --> 00:45:21,210
security there's one thing that's the

00:45:18,000 --> 00:45:23,760
most important one and it is checking

00:45:21,210 --> 00:45:26,040
the origin header on the server side so

00:45:23,760 --> 00:45:28,380
if you do a WebSocket connection to a

00:45:26,040 --> 00:45:31,110
server make sure that on the server side

00:45:28,380 --> 00:45:34,880
you check which origins you trust for

00:45:31,110 --> 00:45:34,880
WebSocket connections okay

00:45:35,000 --> 00:45:39,560
this the scenario where for example

00:45:37,180 --> 00:45:41,780
imagine the same scenario for the bank

00:45:39,560 --> 00:45:43,310
you're locked into your bank website and

00:45:41,780 --> 00:45:44,780
they have for some reason they have a

00:45:43,310 --> 00:45:47,990
WebSocket connection for example for a

00:45:44,780 --> 00:45:49,160
chat okay then the attacker lures you on

00:45:47,990 --> 00:45:51,230
to a different web site that they have

00:45:49,160 --> 00:45:53,810
under their control now if you're logged

00:45:51,230 --> 00:45:56,180
into that web site you can open up a

00:45:53,810 --> 00:45:58,370
WebSocket connection to bank comm and

00:45:56,180 --> 00:46:00,560
it's gonna work that the same origin

00:45:58,370 --> 00:46:01,910
policy does not forbid this okay we're

00:46:00,560 --> 00:46:04,400
WebSocket the rules a little bit

00:46:01,910 --> 00:46:05,540
different so on the bank.com side on the

00:46:04,400 --> 00:46:07,340
server side you need to check that

00:46:05,540 --> 00:46:09,320
origin header is going to be set it's it

00:46:07,340 --> 00:46:14,750
cannot be manipulated manipulated by the

00:46:09,320 --> 00:46:17,870
attackers site good so that's it let me

00:46:14,750 --> 00:46:21,350
just wrap up the contents of this talk

00:46:17,870 --> 00:46:22,640
so when you want to be good as security

00:46:21,350 --> 00:46:24,500
just to make sure that you have an

00:46:22,640 --> 00:46:26,510
in-depth in-depth understanding of your

00:46:24,500 --> 00:46:29,270
development environment that means your

00:46:26,510 --> 00:46:31,970
programming language your framework the

00:46:29,270 --> 00:46:34,910
web browser as a platform for your for

00:46:31,970 --> 00:46:36,170
your website because understanding those

00:46:34,910 --> 00:46:38,360
things in detail will almost

00:46:36,170 --> 00:46:40,430
automatically make you a good security

00:46:38,360 --> 00:46:41,720
engineer there's no such things as you

00:46:40,430 --> 00:46:43,670
know being a software developer and

00:46:41,720 --> 00:46:45,620
being a good secured engineer it's

00:46:43,670 --> 00:46:48,590
almost always the same thing it's a

00:46:45,620 --> 00:46:50,480
linear development get the basics right

00:46:48,590 --> 00:46:53,830
first so care but cross the scripting

00:46:50,480 --> 00:46:56,510
all I want all of you who has have

00:46:53,830 --> 00:47:01,040
developed of UTS application to either

00:46:56,510 --> 00:47:04,790
now or later do a ctrl shift F we - HTML

00:47:01,040 --> 00:47:06,410
enter in your environment and have a

00:47:04,790 --> 00:47:08,510
look if the value that gets in there

00:47:06,410 --> 00:47:11,450
might be controlled by an attacker or by

00:47:08,510 --> 00:47:13,550
a different user that's a very very

00:47:11,450 --> 00:47:16,760
basic thing in front-end development in

00:47:13,550 --> 00:47:18,860
terms of security this is the first

00:47:16,760 --> 00:47:20,930
thing I ask you to do let's get the

00:47:18,860 --> 00:47:24,620
basics right and let's share how we do

00:47:20,930 --> 00:47:26,180
this also shifting that means thinking

00:47:24,620 --> 00:47:27,860
earlier about these things so making the

00:47:26,180 --> 00:47:29,600
right technology decision a good

00:47:27,860 --> 00:47:31,340
architecture is also important for

00:47:29,600 --> 00:47:34,390
security and it's gonna save you time

00:47:31,340 --> 00:47:37,220
and money if you don't do it later on

00:47:34,390 --> 00:47:38,590
let me just wrap up the technical topic

00:47:37,220 --> 00:47:40,940
step with it cross-site request forgery

00:47:38,590 --> 00:47:44,270
remember everything that can be done

00:47:40,940 --> 00:47:45,470
with an HTML form on the server side and

00:47:44,270 --> 00:47:47,660
is accepted by the server side

00:47:45,470 --> 00:47:48,450
potentially opens you up to cross at

00:47:47,660 --> 00:47:49,890
request forgery

00:47:48,450 --> 00:47:51,720
so someone someone learns you on the

00:47:49,890 --> 00:47:54,480
site under that control and issues

00:47:51,720 --> 00:47:57,599
across origin request cross-origin

00:47:54,480 --> 00:47:59,369
resource sharing lets you open up the

00:47:57,599 --> 00:48:01,740
same origin policy in a controlled way

00:47:59,369 --> 00:48:04,050
so if you have your fronting and your

00:48:01,740 --> 00:48:06,030
API running on different origins you can

00:48:04,050 --> 00:48:09,540
allow some requests and you can control

00:48:06,030 --> 00:48:12,810
that cross the scripting two things are

00:48:09,540 --> 00:48:14,460
very important first when using V - HTML

00:48:12,810 --> 00:48:16,470
be careful where your input comes from

00:48:14,460 --> 00:48:19,740
if it's potentially from a different

00:48:16,470 --> 00:48:22,890
user make sure or just purify it anyway

00:48:19,740 --> 00:48:24,570
okay a Content security policy is a very

00:48:22,890 --> 00:48:27,089
good defense in depth it controls where

00:48:24,570 --> 00:48:29,339
your dynamic scripts or dynamic parts of

00:48:27,089 --> 00:48:31,140
your application might come from sub

00:48:29,339 --> 00:48:33,930
resource integrity make sure that the

00:48:31,140 --> 00:48:36,000
beauty is that you load from a CDN does

00:48:33,930 --> 00:48:38,430
not get changed there or when the CDN

00:48:36,000 --> 00:48:40,260
gets compromised and with WebSocket

00:48:38,430 --> 00:48:41,700
security it's very important to check

00:48:40,260 --> 00:48:44,210
the origin header on the server-side who

00:48:41,700 --> 00:48:46,800
is using WebSockets

00:48:44,210 --> 00:48:48,900
the first thing you do at home is please

00:48:46,800 --> 00:48:55,290
check the origin if you have checked it

00:48:48,900 --> 00:48:57,750
on the server-side good we also have a

00:48:55,290 --> 00:49:01,680
meet-up that's about topics like these

00:48:57,750 --> 00:49:03,210
so security meetup by my company Nikki

00:49:01,680 --> 00:49:04,670
and me organize it Nikki's here as well

00:49:03,210 --> 00:49:08,430
where's Nikki

00:49:04,670 --> 00:49:10,020
there he is so this is the guy we had

00:49:08,430 --> 00:49:11,760
for example the last meetup was about

00:49:10,020 --> 00:49:13,319
Cuba Nettie's credential management we

00:49:11,760 --> 00:49:15,089
had one about application security

00:49:13,319 --> 00:49:18,660
design patterns and things like ISA if

00:49:15,089 --> 00:49:21,510
you're interested - make sure to sign up

00:49:18,660 --> 00:49:24,180
also we organized a conference sexual

00:49:21,510 --> 00:49:25,859
def conference in boot camp where that's

00:49:24,180 --> 00:49:27,960
a conference about security but

00:49:25,859 --> 00:49:29,099
specifically for developers it's not a

00:49:27,960 --> 00:49:31,050
security conference where security

00:49:29,099 --> 00:49:33,329
people like me gather and talk about the

00:49:31,050 --> 00:49:35,220
latest hacks and cracks it's not about

00:49:33,329 --> 00:49:37,109
that it's about you know taking away

00:49:35,220 --> 00:49:39,690
useful stuff for everyday software

00:49:37,109 --> 00:49:41,579
development lives so make sure to follow

00:49:39,690 --> 00:49:42,280
if that's interesting for you thank you

00:49:41,579 --> 00:49:46,260
very much

00:49:42,280 --> 00:49:46,260

YouTube URL: https://www.youtube.com/watch?v=kEYYDWQPa0w


