Title: Vienna.js, GraphQL in the Enterprise: From Legacy to Bleeding Edge, January 2019
Publication date: 2019-02-03
Playlist: Vue.js Vienna
Description: 
	Talk By O.J. Sousa Rodrigues:

This talk shows best practices, implementation challenges, and the impact on the development process when you implement GraphQL in a legacy RESTful environment with enterprise requirements. (Hands-on with nodejs, nestjs, graphql, swagger and typescript)
Captions: 
	00:00:00,810 --> 00:00:04,380
my name is sores or illegals I'm a front

00:00:03,090 --> 00:00:08,340
end solution architect

00:00:04,380 --> 00:00:10,500
adesso this Austria and I'm also open

00:00:08,340 --> 00:00:12,059
source developer the list could not fit

00:00:10,500 --> 00:00:14,340
in here and the projects that I'm

00:00:12,059 --> 00:00:16,410
working with or that I own or did

00:00:14,340 --> 00:00:21,900
contribute so if we won't check me I'll

00:00:16,410 --> 00:00:24,750
just look up on github or Twitter yeah

00:00:21,900 --> 00:00:26,430
so I think we're set ready to start

00:00:24,750 --> 00:00:29,070
recording is working everything is fine

00:00:26,430 --> 00:00:32,160
people have everyone has a drink

00:00:29,070 --> 00:00:37,710
last time no let's just grab a drink in

00:00:32,160 --> 00:00:39,420
all the time Jesus Prost so this is a

00:00:37,710 --> 00:00:41,730
great great thing from the sponsors

00:00:39,420 --> 00:00:44,789
always paying the bills that's a good

00:00:41,730 --> 00:00:46,469
stuff they should always do that so

00:00:44,789 --> 00:00:48,110
let's talk a little bit about graphical

00:00:46,469 --> 00:00:51,570
in the enterprise from the legacy

00:00:48,110 --> 00:00:53,760
environment restful api to bleeding edge

00:00:51,570 --> 00:00:56,309
technology right I know this is a be

00:00:53,760 --> 00:00:58,890
energy as meetups and I don't know if

00:00:56,309 --> 00:01:01,219
you know about graphic well that the

00:00:58,890 --> 00:01:04,350
reference implementation was first have

00:01:01,219 --> 00:01:07,049
was first released from Facebook in

00:01:04,350 --> 00:01:09,780
JavaScript not in another language but

00:01:07,049 --> 00:01:12,780
in JavaScript first and it's since then

00:01:09,780 --> 00:01:15,030
being the reference implementation for

00:01:12,780 --> 00:01:17,600
all specifications in graphic well so

00:01:15,030 --> 00:01:20,100
this has a lot to do with JavaScript and

00:01:17,600 --> 00:01:21,750
next thing is this JSON is also a

00:01:20,100 --> 00:01:24,060
JavaScript object oriented

00:01:21,750 --> 00:01:26,790
object it's the next thing that has a

00:01:24,060 --> 00:01:29,909
lot to do with JavaScript here so but

00:01:26,790 --> 00:01:33,570
this will be a talk about how to

00:01:29,909 --> 00:01:36,000
introduce this kind of new technology in

00:01:33,570 --> 00:01:39,360
an environment that does not welcome it

00:01:36,000 --> 00:01:43,229
so let's go over it please help me do

00:01:39,360 --> 00:01:45,240
this talk by just giving feedback why

00:01:43,229 --> 00:01:46,799
I'm making some questions because I

00:01:45,240 --> 00:01:48,450
cannot know how much you know from graph

00:01:46,799 --> 00:01:50,729
quayle how much you know from the other

00:01:48,450 --> 00:01:53,310
technology we'll be talking about so

00:01:50,729 --> 00:01:57,030
it's very welcome that you are proactive

00:01:53,310 --> 00:02:00,450
with me here all right yes you guys

00:01:57,030 --> 00:02:02,189
ready let's do this so enterprise issues

00:02:00,450 --> 00:02:06,420
of modern times let's start with the big

00:02:02,189 --> 00:02:09,209
problem what problem do we have first of

00:02:06,420 --> 00:02:11,430
all before we get to that I have seen

00:02:09,209 --> 00:02:14,040
that many of you guys do photos with

00:02:11,430 --> 00:02:16,469
cell phone about the slides

00:02:14,040 --> 00:02:18,840
so these slides is running now live on

00:02:16,469 --> 00:02:20,099
these three URL if you check it out with

00:02:18,840 --> 00:02:23,280
your cell phone

00:02:20,099 --> 00:02:25,319
Google Chrome has it like in the URL bar

00:02:23,280 --> 00:02:27,989
that you can make a photo of a queer

00:02:25,319 --> 00:02:30,540
code and you'll get directly the the URL

00:02:27,989 --> 00:02:32,730
so you can check out make screenshot of

00:02:30,540 --> 00:02:34,920
the of the the links and stuff you want

00:02:32,730 --> 00:02:37,319
to have it's not not big of a deal but I

00:02:34,920 --> 00:02:39,599
think it's just not a lot of effort to

00:02:37,319 --> 00:02:42,299
do this so it could maybe be a standard

00:02:39,599 --> 00:02:43,590
in the future graph calling the

00:02:42,299 --> 00:02:45,299
enterprise so what's the problem

00:02:43,590 --> 00:02:46,769
actually yeah

00:02:45,299 --> 00:02:50,090
simply said you guys want to know it

00:02:46,769 --> 00:02:52,680
let's do this this is the problem

00:02:50,090 --> 00:02:57,209
one day Enterprise woke up and

00:02:52,680 --> 00:03:01,549
understood our users know better

00:02:57,209 --> 00:03:04,439
quality better standards in every way

00:03:01,549 --> 00:03:08,760
then we are doing since since the

00:03:04,439 --> 00:03:09,419
beginning of time and it started with

00:03:08,760 --> 00:03:11,819
Facebook

00:03:09,419 --> 00:03:13,709
it started with iOS it started with

00:03:11,819 --> 00:03:17,129
Mozilla I started with the web actually

00:03:13,709 --> 00:03:20,729
and the web being the leader here in

00:03:17,129 --> 00:03:24,299
defining standards for data consummation

00:03:20,729 --> 00:03:25,919
you eyes and stuff like that so the

00:03:24,299 --> 00:03:28,019
employees inside the enterprise

00:03:25,919 --> 00:03:29,819
companies and when I say enterprise you

00:03:28,019 --> 00:03:33,930
know guys what what this is what this

00:03:29,819 --> 00:03:36,019
mean yeah it's like bank insurance yeah

00:03:33,930 --> 00:03:38,970
a lot of big companies that have

00:03:36,019 --> 00:03:40,979
internal like thousands of users using

00:03:38,970 --> 00:03:43,889
software that the public will never see

00:03:40,979 --> 00:03:46,199
and they are using this kind of software

00:03:43,889 --> 00:03:50,129
to do their work basically every day

00:03:46,199 --> 00:03:54,930
every time so someday they understood

00:03:50,129 --> 00:03:58,500
that well 90% of our users even even the

00:03:54,930 --> 00:04:01,229
the seniors one with 70 year old old

00:03:58,500 --> 00:04:03,959
guys no know how to share photos with

00:04:01,229 --> 00:04:06,599
their kids but it's impossible to upload

00:04:03,959 --> 00:04:08,939
a file in the system so yeah it's what

00:04:06,599 --> 00:04:14,220
happens if you just look away all the

00:04:08,939 --> 00:04:16,909
time of of this stuff right oh I'm new

00:04:14,220 --> 00:04:19,620
witness lights so let's go down

00:04:16,909 --> 00:04:21,810
Enterprise each enterprise issues of

00:04:19,620 --> 00:04:24,450
motor times let's put it to a little bit

00:04:21,810 --> 00:04:26,510
more edge points here so legacy respo

00:04:24,450 --> 00:04:30,820
FBI arrest is already in place

00:04:26,510 --> 00:04:34,280
not going anyway anytime soon

00:04:30,820 --> 00:04:36,290
this is establishing the enterprise you

00:04:34,280 --> 00:04:39,320
can do almost everything inside

00:04:36,290 --> 00:04:41,360
enterprise companies with rest even some

00:04:39,320 --> 00:04:44,450
admins don't know that some software

00:04:41,360 --> 00:04:46,130
they put in place have rest api's but if

00:04:44,450 --> 00:04:49,130
they discover it let's use it somehow

00:04:46,130 --> 00:04:52,430
doesn't mean if it's it's if it's

00:04:49,130 --> 00:04:54,860
secured it's encrypted or it's a weak

00:04:52,430 --> 00:04:57,800
credentials credentials they just use it

00:04:54,860 --> 00:05:00,830
be wide because it's very simple right

00:04:57,800 --> 00:05:03,890
it's just fire up make a request and you

00:05:00,830 --> 00:05:06,230
get the response that's it you don't

00:05:03,890 --> 00:05:08,510
have to do anything further back into

00:05:06,230 --> 00:05:11,450
back-end developers and infrastructure

00:05:08,510 --> 00:05:13,880
and mostly like never change a running

00:05:11,450 --> 00:05:15,560
system why should we do that right it's

00:05:13,880 --> 00:05:17,390
working man what do you want from us

00:05:15,560 --> 00:05:21,080
everything is fine we will not change

00:05:17,390 --> 00:05:23,690
this don't don't don't don't matter what

00:05:21,080 --> 00:05:26,240
you say because everything you're saying

00:05:23,690 --> 00:05:28,610
now we did it 20 years ago

00:05:26,240 --> 00:05:30,860
you're just reinventing the wheels well

00:05:28,610 --> 00:05:32,780
you know what they are right you

00:05:30,860 --> 00:05:35,630
shouldn't change your running system and

00:05:32,780 --> 00:05:38,300
we are reinventing the wheel but this is

00:05:35,630 --> 00:05:39,590
the core problem of everything here and

00:05:38,300 --> 00:05:44,480
I will talk a little bit about this

00:05:39,590 --> 00:05:46,730
later lack of data models and path

00:05:44,480 --> 00:05:49,280
definitions most of the time you come to

00:05:46,730 --> 00:05:51,440
a client a customer and he has a lot of

00:05:49,280 --> 00:05:53,720
data right because they have the data

00:05:51,440 --> 00:05:56,410
right about you and me and everything

00:05:53,720 --> 00:05:58,760
else and the business but no one did a

00:05:56,410 --> 00:06:02,300
type definition model for it at the

00:05:58,760 --> 00:06:04,970
beginning basically using databases as

00:06:02,300 --> 00:06:08,300
are silos they'll just throw stuff in

00:06:04,970 --> 00:06:10,040
and somehow you will get it out you

00:06:08,300 --> 00:06:12,530
don't know what you have and what type

00:06:10,040 --> 00:06:15,980
you have but you have the data here's

00:06:12,530 --> 00:06:18,920
the report so when you have this kind of

00:06:15,980 --> 00:06:21,170
environment it's almost impossible to

00:06:18,920 --> 00:06:23,060
come to them and say hey let's just

00:06:21,170 --> 00:06:25,940
graph growth because you know what it's

00:06:23,060 --> 00:06:28,630
fancy it's not gonna work it doesn't

00:06:25,940 --> 00:06:31,580
matter who you were so you have to

00:06:28,630 --> 00:06:33,890
understand or find a way to integrate

00:06:31,580 --> 00:06:36,440
and adapt into the system and this is

00:06:33,890 --> 00:06:40,340
basically what I do at my job time

00:06:36,440 --> 00:06:43,250
upgrade time to upgrade yeah

00:06:40,340 --> 00:06:46,850
even if you convince a guy let's say

00:06:43,250 --> 00:06:50,780
your admin guy says yes we want to do it

00:06:46,850 --> 00:06:53,060
and he gets the budget it will take him

00:06:50,780 --> 00:06:56,240
years to do that without breaking

00:06:53,060 --> 00:06:58,070
production and if he's doing that he's a

00:06:56,240 --> 00:07:00,290
wise guy because he's using a migration

00:06:58,070 --> 00:07:03,590
plane and that's something everyone

00:07:00,290 --> 00:07:05,330
should do but you wanna wait years for

00:07:03,590 --> 00:07:09,230
the new UI that's coming up

00:07:05,330 --> 00:07:13,040
you can't so another problem of

00:07:09,230 --> 00:07:15,830
enterprise is bottom-up solutions right

00:07:13,040 --> 00:07:17,900
you come to us you say what kind of

00:07:15,830 --> 00:07:20,419
api's you want you front-end developers

00:07:17,900 --> 00:07:22,190
and we will deliver it maybe not in the

00:07:20,419 --> 00:07:24,560
way you want but the data will be there

00:07:22,190 --> 00:07:27,919
that's the bottom-up approach like you

00:07:24,560 --> 00:07:30,560
need one API one concern division of

00:07:27,919 --> 00:07:33,680
logic and stuff like that only the data

00:07:30,560 --> 00:07:37,610
that you need and they offer you look we

00:07:33,680 --> 00:07:40,370
have one API with let's say 300 calls

00:07:37,610 --> 00:07:43,460
you can you can make a combinational set

00:07:40,370 --> 00:07:45,530
of them and for one data set or one

00:07:43,460 --> 00:07:48,350
bottle of a profile level person you

00:07:45,530 --> 00:07:50,660
have to make like five requests maybe if

00:07:48,350 --> 00:07:52,310
you're good if you understand and read

00:07:50,660 --> 00:07:55,870
our documentation which we have when any

00:07:52,310 --> 00:07:59,240
so it's not designed for any business

00:07:55,870 --> 00:08:01,490
concept or any business approach at all

00:07:59,240 --> 00:08:05,060
any business model it's not involved

00:08:01,490 --> 00:08:07,520
with this it's totally he hosts Mears

00:08:05,060 --> 00:08:11,630
it's totally in the sense of we have the

00:08:07,520 --> 00:08:13,580
data of a profile of her name linked to

00:08:11,630 --> 00:08:18,289
this and that and that and we will offer

00:08:13,580 --> 00:08:20,630
exactly that in a Dipity h.t.t.h have

00:08:18,289 --> 00:08:25,250
repair can better can do this better in

00:08:20,630 --> 00:08:30,970
journal so you guys with me makes sense

00:08:25,250 --> 00:08:35,960
right let's get there so I wanna I wanna

00:08:30,970 --> 00:08:40,310
sight sight till my my my beloved

00:08:35,960 --> 00:08:43,039
professor one of the best Peter pocket

00:08:40,310 --> 00:08:44,720
Hoffa and I will suggest in German try

00:08:43,039 --> 00:08:46,460
to translate it in English please you

00:08:44,720 --> 00:08:48,860
have a better translation just come up

00:08:46,460 --> 00:08:50,959
to me as informatica Cynthia tired

00:08:48,860 --> 00:08:54,470
elusive entire day's problems here fail

00:08:50,959 --> 00:08:58,190
tyler haws Museo spasm Allah

00:08:54,470 --> 00:09:00,290
we are part of the problem and part of

00:08:58,190 --> 00:09:03,260
the solution as computer scientists why

00:09:00,290 --> 00:09:05,330
is that because at a certain point we

00:09:03,260 --> 00:09:09,770
don't see you

00:09:05,330 --> 00:09:12,680
XUI as a normal consumer as like as a

00:09:09,770 --> 00:09:15,290
consumer we say it as computer science

00:09:12,680 --> 00:09:18,860
we understand what's going on behind the

00:09:15,290 --> 00:09:21,950
scenes and this is this can be good but

00:09:18,860 --> 00:09:24,680
this can also drive you into I'm

00:09:21,950 --> 00:09:27,470
animalistic way of thinking of what is

00:09:24,680 --> 00:09:29,720
really needed for the data consummation

00:09:27,470 --> 00:09:32,240
or for the representation of a certain

00:09:29,720 --> 00:09:34,300
business model so remember I said we

00:09:32,240 --> 00:09:38,120
will talk about the key the key point of

00:09:34,300 --> 00:09:39,529
the problem that's exactly it when the

00:09:38,120 --> 00:09:41,000
back-end guy says never change

00:09:39,529 --> 00:09:44,600
everyone's running system they're right

00:09:41,000 --> 00:09:47,089
you don't you shouldn't do that you can

00:09:44,600 --> 00:09:51,170
make a migrate plan to make a transition

00:09:47,089 --> 00:09:53,870
yeah because that's stable and business

00:09:51,170 --> 00:09:56,600
needs this kind of stability but on the

00:09:53,870 --> 00:10:00,290
other hand UI and front-end development

00:09:56,600 --> 00:10:04,310
will never settle why because our needs

00:10:00,290 --> 00:10:07,130
change we as a consumers will always go

00:10:04,310 --> 00:10:10,459
on and on and on a search a new better

00:10:07,130 --> 00:10:13,250
way to consume data easier faster more

00:10:10,459 --> 00:10:14,209
semantic more interpretive more

00:10:13,250 --> 00:10:15,829
self-describing

00:10:14,209 --> 00:10:19,399
this has nothing to do with technology

00:10:15,829 --> 00:10:21,890
in its core it has to do with how humans

00:10:19,399 --> 00:10:24,620
perceive information and consume

00:10:21,890 --> 00:10:29,690
information so this will go on forever

00:10:24,620 --> 00:10:32,060
so what are the enterprise needs of

00:10:29,690 --> 00:10:33,770
modern times the first-class user

00:10:32,060 --> 00:10:36,260
experience no matter what they do they

00:10:33,770 --> 00:10:38,720
cannot achieve that without certain kind

00:10:36,260 --> 00:10:41,420
of approach which we will talk in a

00:10:38,720 --> 00:10:44,089
moment front end first architecture

00:10:41,420 --> 00:10:46,190
layer basically the whole thinking right

00:10:44,089 --> 00:10:48,290
now on the enterprise's yeah you will

00:10:46,190 --> 00:10:52,100
bundle me your JavaScript we will put it

00:10:48,290 --> 00:10:54,620
there you have an API go yeah wait a

00:10:52,100 --> 00:10:56,360
moment we have we need we need this

00:10:54,620 --> 00:10:58,640
bundle for the different kind of client

00:10:56,360 --> 00:11:01,130
we need this network layered for this if

00:10:58,640 --> 00:11:04,790
different kind of app we need basically

00:11:01,130 --> 00:11:06,350
one point of concern not many can we

00:11:04,790 --> 00:11:09,470
improve that can be measured

00:11:06,350 --> 00:11:13,550
can we make it faster no it's actually

00:11:09,470 --> 00:11:15,440
what we have so we're just passing every

00:11:13,550 --> 00:11:19,030
request on the front and to the back end

00:11:15,440 --> 00:11:22,610
yep that's it they're not thinking that

00:11:19,030 --> 00:11:25,550
maybe they're api's should be driven by

00:11:22,610 --> 00:11:29,690
another kind of focus and this focus is

00:11:25,550 --> 00:11:31,280
to serve front-end amps right api's

00:11:29,690 --> 00:11:32,810
which are designed and optimized for the

00:11:31,280 --> 00:11:35,780
consummation and those rotation of data

00:11:32,810 --> 00:11:38,750
this is exactly one of the needs that

00:11:35,780 --> 00:11:40,370
the enterprise has API is with our self

00:11:38,750 --> 00:11:42,920
learning learning and improves the

00:11:40,370 --> 00:11:46,010
development speed exactly the key points

00:11:42,920 --> 00:11:48,200
that graph QL can help you with how many

00:11:46,010 --> 00:11:51,260
guys are here have worked with graph

00:11:48,200 --> 00:11:55,220
coil one two three four five six seven

00:11:51,260 --> 00:12:00,140
eight nine ten eleven Thanks it's very

00:11:55,220 --> 00:12:02,750
good so one third something like that

00:12:00,140 --> 00:12:05,090
you know I did ask have work but it not

00:12:02,750 --> 00:12:08,690
play it because there is a big buzz

00:12:05,090 --> 00:12:11,300
around graph quayle right introduction

00:12:08,690 --> 00:12:13,580
and enablement of attractive technology

00:12:11,300 --> 00:12:15,650
I will mention this this has nothing to

00:12:13,580 --> 00:12:18,980
do with graph cuiabá that is really

00:12:15,650 --> 00:12:25,900
serious if you look at the Stack

00:12:18,980 --> 00:12:30,470
Overflow statistics of 2018 and 2004

00:12:25,900 --> 00:12:33,920
there is a high number of people wanting

00:12:30,470 --> 00:12:36,770
to learn new technologies sometimes

00:12:33,920 --> 00:12:38,840
above 70 I'm talking not here about

00:12:36,770 --> 00:12:41,240
students okay I'm talking here about

00:12:38,840 --> 00:12:43,850
people in the field they want something

00:12:41,240 --> 00:12:45,800
new so if you have a neighbor near you

00:12:43,850 --> 00:12:47,330
right now you ask me you ask him if he

00:12:45,800 --> 00:12:51,950
is happy with this technology because

00:12:47,330 --> 00:12:54,860
70% even if it's 60 you know this means

00:12:51,950 --> 00:12:59,240
that we need this we need to learn we

00:12:54,860 --> 00:13:01,430
need to improve right and this kind of

00:12:59,240 --> 00:13:04,760
diversion or illusion that beckon and

00:13:01,430 --> 00:13:05,810
fronting is just black and white it's

00:13:04,760 --> 00:13:07,880
just not true

00:13:05,810 --> 00:13:11,680
we should work together and improve

00:13:07,880 --> 00:13:14,900
things to make better user experiences

00:13:11,680 --> 00:13:17,270
so javascript is sex most second most

00:13:14,900 --> 00:13:18,340
wanted to learn programming language of

00:13:17,270 --> 00:13:21,430
2000 await

00:13:18,340 --> 00:13:23,500
18 it's not that I'm already and already

00:13:21,430 --> 00:13:25,150
can do it they want to learn

00:13:23,500 --> 00:13:27,630
that's a septic it said check the

00:13:25,150 --> 00:13:30,490
statistical it's an out into the link

00:13:27,630 --> 00:13:32,680
self descriptive documentation along

00:13:30,490 --> 00:13:37,240
with type safety remember what he said

00:13:32,680 --> 00:13:41,860
for before the talk there is so much so

00:13:37,240 --> 00:13:44,920
much errors how to say clearing sources

00:13:41,860 --> 00:13:47,650
that you can completely eliminate with

00:13:44,920 --> 00:13:51,880
type safety you will maybe get some few

00:13:47,650 --> 00:13:54,250
more but not more than before with every

00:13:51,880 --> 00:13:56,710
change there is with every adaptation

00:13:54,250 --> 00:13:58,570
there is there are new edge points to it

00:13:56,710 --> 00:14:00,850
there are new stuff to learn there are

00:13:58,570 --> 00:14:04,540
new things that you have to consider but

00:14:00,850 --> 00:14:06,790
you can eliminate a lot of problems just

00:14:04,540 --> 00:14:10,380
with type safety and this is what

00:14:06,790 --> 00:14:14,529
graphical brings you in a network layer

00:14:10,380 --> 00:14:15,730
type safety but where to start how to

00:14:14,529 --> 00:14:16,300
introduce graph quality to the

00:14:15,730 --> 00:14:18,430
enterprise

00:14:16,300 --> 00:14:19,900
there are many ways in approaches in

00:14:18,430 --> 00:14:23,440
which graph can be introduced into an

00:14:19,900 --> 00:14:25,000
enterprise environment this time we're

00:14:23,440 --> 00:14:26,650
going to talk about how graph girl can

00:14:25,000 --> 00:14:29,410
be introduced on top of a legacy

00:14:26,650 --> 00:14:32,410
raspberry pie without changing the

00:14:29,410 --> 00:14:36,880
running system all right so bleeding

00:14:32,410 --> 00:14:41,380
edge integrated in to enterprise

00:14:36,880 --> 00:14:44,170
environment so how to introduce this how

00:14:41,380 --> 00:14:47,650
to do that with restful legacy system

00:14:44,170 --> 00:14:51,010
start with swagga you know you guys know

00:14:47,650 --> 00:14:52,990
what swagga is yeah one two three four

00:14:51,010 --> 00:14:56,320
five six seven eight nine I think I

00:14:52,990 --> 00:14:57,100
think half of the people maybe what is

00:14:56,320 --> 00:15:02,580
well swagger

00:14:57,100 --> 00:15:06,250
well swagger is actually an approach to

00:15:02,580 --> 00:15:09,459
exactly do that to cover the needs of

00:15:06,250 --> 00:15:12,010
modern times that enterprise has right

00:15:09,459 --> 00:15:13,420
documentation being self description of

00:15:12,010 --> 00:15:16,270
the stuff

00:15:13,420 --> 00:15:18,220
it's decoupled it's not inside the

00:15:16,270 --> 00:15:21,100
technology is something that you have to

00:15:18,220 --> 00:15:24,130
do after you have created your REST API

00:15:21,100 --> 00:15:26,589
or when creating your whereas API you

00:15:24,130 --> 00:15:31,840
have to describe it but it's not in the

00:15:26,589 --> 00:15:34,720
timings right it's both human machining

00:15:31,840 --> 00:15:38,140
readable with an interactive API stuff

00:15:34,720 --> 00:15:41,680
like that and we will get to our first

00:15:38,140 --> 00:15:42,779
demo to see what it can do and what it

00:15:41,680 --> 00:15:46,060
cannot do

00:15:42,779 --> 00:15:48,630
just a quick overview we're going faster

00:15:46,060 --> 00:15:52,330
this so let's start swagger

00:15:48,630 --> 00:15:54,760
what I do have here is a swagger UI you

00:15:52,330 --> 00:15:57,790
can check out the website it will leave

00:15:54,760 --> 00:16:00,910
you two here but in the swagger UI what

00:15:57,790 --> 00:16:01,750
you can see is just possibility to start

00:16:00,910 --> 00:16:04,540
the live demo

00:16:01,750 --> 00:16:08,260
what is live demo will do is it will

00:16:04,540 --> 00:16:16,779
load this JSON object over here pass it

00:16:08,260 --> 00:16:19,690
to the UI and fill this UI with life by

00:16:16,779 --> 00:16:22,240
the definitions in the JSON file what's

00:16:19,690 --> 00:16:24,279
inside this JSON file if you guys don't

00:16:22,240 --> 00:16:26,020
have seen it I have it prepared here

00:16:24,279 --> 00:16:27,970
it's basically this

00:16:26,020 --> 00:16:32,020
it's a swagga file with a version number

00:16:27,970 --> 00:16:35,140
defining every kind of call you can make

00:16:32,020 --> 00:16:37,750
in this REST API that is somewhere and

00:16:35,140 --> 00:16:41,970
this somewhere is exactly here defined

00:16:37,750 --> 00:16:46,420
it's pet stores Wagga oh and the context

00:16:41,970 --> 00:16:48,010
so and we have tags not getting into it

00:16:46,420 --> 00:16:51,360
which shames the support and and then we

00:16:48,010 --> 00:16:56,260
have the first path the pet is a pet of

00:16:51,360 --> 00:16:58,930
type post and if I make a HTTP request

00:16:56,260 --> 00:17:01,810
there with the type post and I pass on

00:16:58,930 --> 00:17:04,540
the correct payload I get a certain

00:17:01,810 --> 00:17:06,939
response and even the response is

00:17:04,540 --> 00:17:10,870
defined in here so as you can see it

00:17:06,939 --> 00:17:12,670
helps to describe this kind of API that

00:17:10,870 --> 00:17:15,010
I otherwise have to do in a markdown or

00:17:12,670 --> 00:17:17,740
in the commendation or the word document

00:17:15,010 --> 00:17:21,819
and this kind of documentation is being

00:17:17,740 --> 00:17:24,040
generated for you so if you called your

00:17:21,819 --> 00:17:27,100
REST API with certain annotations and

00:17:24,040 --> 00:17:29,470
certain informations in your code let's

00:17:27,100 --> 00:17:31,390
say Java API function it isn't that and

00:17:29,470 --> 00:17:35,500
then you make an annotation and say this

00:17:31,390 --> 00:17:37,390
is a get request this is get request

00:17:35,500 --> 00:17:40,660
with following parameters and then you

00:17:37,390 --> 00:17:43,810
pass on the interface then swagga will

00:17:40,660 --> 00:17:45,050
get into your code read it in generate

00:17:43,810 --> 00:17:49,590
this fight for you

00:17:45,050 --> 00:17:52,320
all right over there make sense so what

00:17:49,590 --> 00:17:55,020
I do is in this case with swagger i

00:17:52,320 --> 00:17:58,590
program my API and I get the output in a

00:17:55,020 --> 00:18:01,860
certain standard format so let's go to

00:17:58,590 --> 00:18:03,900
the pet store horrible I have here a pet

00:18:01,860 --> 00:18:06,360
store pieces are restful api

00:18:03,900 --> 00:18:07,740
documentation via swagger and i have

00:18:06,360 --> 00:18:09,690
never called let's say i have never

00:18:07,740 --> 00:18:13,890
called this rest api but i won't get

00:18:09,690 --> 00:18:16,800
some data let's pick something i won't

00:18:13,890 --> 00:18:18,570
find pet by status no it's boring you

00:18:16,800 --> 00:18:21,090
want more I want the inventory

00:18:18,570 --> 00:18:24,510
I want the whole inventory what I can do

00:18:21,090 --> 00:18:25,980
here in this UI is it gets pre-populated

00:18:24,510 --> 00:18:27,330
with the information from the JSON file

00:18:25,980 --> 00:18:31,080
tell them in your example about the

00:18:27,330 --> 00:18:33,240
model in JavaScript of course where I

00:18:31,080 --> 00:18:35,850
can see ok this is a kind of key Maps

00:18:33,240 --> 00:18:39,570
ting ting where I can pass almost any

00:18:35,850 --> 00:18:42,840
kind of value as a key and a value so

00:18:39,570 --> 00:18:45,540
doesn't tell me much but here have our

00:18:42,840 --> 00:18:48,360
keys example so it it speaks more to me

00:18:45,540 --> 00:18:50,940
it's more self describing and I know

00:18:48,360 --> 00:18:52,650
with the response type will be and now I

00:18:50,940 --> 00:18:54,630
will say let's try this out I will try

00:18:52,650 --> 00:18:56,760
this out and see what happens I will

00:18:54,630 --> 00:18:59,100
execute and at the moment that executes

00:18:56,760 --> 00:19:02,370
what happens I get him a response code

00:18:59,100 --> 00:19:04,470
and my value and the same thing exactly

00:19:02,370 --> 00:19:06,840
same thing I can do in the terminal I

00:19:04,470 --> 00:19:10,440
just have to get this one maybe you guys

00:19:06,840 --> 00:19:14,100
know see you see URL or the as I call it

00:19:10,440 --> 00:19:16,590
in German it's a will you can just put

00:19:14,100 --> 00:19:19,050
it there fire it up and you'll get your

00:19:16,590 --> 00:19:20,370
beautiful JSON object human readable

00:19:19,050 --> 00:19:23,430
right I love it

00:19:20,370 --> 00:19:26,790
hello it's just kid so this is the

00:19:23,430 --> 00:19:28,530
minimum example of swag a pet store so

00:19:26,790 --> 00:19:30,360
now let's say this enterprise and by

00:19:28,530 --> 00:19:32,220
enterprise environment has swagger has

00:19:30,360 --> 00:19:36,570
done this kind of work because swagger

00:19:32,220 --> 00:19:39,840
is already in the enterprise so is there

00:19:36,570 --> 00:19:42,900
a way to take this file and kind of pass

00:19:39,840 --> 00:19:47,490
into graphic well yes there is let's

00:19:42,900 --> 00:19:49,800
take a look swagger is key in this

00:19:47,490 --> 00:19:51,900
approach and it brings many features and

00:19:49,800 --> 00:19:56,370
stuff but it's definitely not enough we

00:19:51,900 --> 00:19:57,149
did more we need more swag so let me

00:19:56,370 --> 00:19:59,429
introduce you

00:19:57,149 --> 00:20:03,179
to Swagger to graph coil where I'm also

00:19:59,429 --> 00:20:05,549
a contributor and you can also check out

00:20:03,179 --> 00:20:07,080
this link where there is a medium blog

00:20:05,549 --> 00:20:10,830
posting about this whole thing

00:20:07,080 --> 00:20:17,159
it's really nice and this is the fastest

00:20:10,830 --> 00:20:19,889
way from legacy to graphical let's do a

00:20:17,159 --> 00:20:26,549
demo again now with visual code let's

00:20:19,889 --> 00:20:33,539
see if it works so what I will do here

00:20:26,549 --> 00:20:39,210
is I will start my cult-like sbrega to

00:20:33,539 --> 00:20:44,460
graph go really energized and what I

00:20:39,210 --> 00:20:46,950
have here is just one no J's file one

00:20:44,460 --> 00:20:49,799
JavaScript file package JSON of course

00:20:46,950 --> 00:20:53,279
with everything inside not verdad show

00:20:49,799 --> 00:20:57,330
yet but I think I will try to I would

00:20:53,279 --> 00:21:03,029
check that out soon but let's take a

00:20:57,330 --> 00:21:06,809
look on swagger to graph code right do

00:21:03,029 --> 00:21:10,289
we have it here we do have it here no

00:21:06,809 --> 00:21:12,719
that's not that's it that's why go to

00:21:10,289 --> 00:21:14,159
graph well it's a really cool library if

00:21:12,719 --> 00:21:19,710
you want to play with it if you want to

00:21:14,159 --> 00:21:21,899
abstract some kind of REST API that you

00:21:19,710 --> 00:21:25,729
want to build in into your graph you

00:21:21,899 --> 00:21:28,229
have 12 modules so swagger to graph Kol

00:21:25,729 --> 00:21:31,559
has an example here of the page and it

00:21:28,229 --> 00:21:34,739
will take exactly that example put it in

00:21:31,559 --> 00:21:37,979
the index file adapt some pads and run

00:21:34,739 --> 00:21:40,559
it and what will happen is this we will

00:21:37,979 --> 00:21:42,749
be able to consume this REST API without

00:21:40,559 --> 00:21:46,950
having written any kind of JavaScript

00:21:42,749 --> 00:21:48,839
Jesus this cannot be this is just this

00:21:46,950 --> 00:21:52,049
snippet is just configuration for

00:21:48,839 --> 00:21:54,839
swagger to graph quail so let's take a

00:21:52,049 --> 00:21:55,229
look we're doing it live never have done

00:21:54,839 --> 00:21:58,129
that

00:21:55,229 --> 00:21:58,129
haha I'm killing

00:21:59,770 --> 00:22:11,830
sighs yes what should a template yeah

00:22:07,630 --> 00:22:14,410
it's better I can make it bigger so what

00:22:11,830 --> 00:22:16,210
you guys see here is basically what have

00:22:14,410 --> 00:22:18,100
I done let's let's start from no I will

00:22:16,210 --> 00:22:20,590
not start because we don't have that

00:22:18,100 --> 00:22:22,810
much time it will not restart but what

00:22:20,590 --> 00:22:28,510
have I done I have downloaded this Wagga

00:22:22,810 --> 00:22:31,090
JSON file and this Wagga JSON file is

00:22:28,510 --> 00:22:34,810
here it's not human readable but we can

00:22:31,090 --> 00:22:37,450
format it there is one kind of type

00:22:34,810 --> 00:22:37,930
being not accepted because of the Java

00:22:37,450 --> 00:22:42,540
Script

00:22:37,930 --> 00:22:45,010
Jason limitations I will change that

00:22:42,540 --> 00:22:49,030
because I know it I have to change it

00:22:45,010 --> 00:22:50,920
and I will go to my index file where I

00:22:49,030 --> 00:22:52,720
have the dependency and everything

00:22:50,920 --> 00:22:56,620
already loaded I'm sorry for that now

00:22:52,720 --> 00:22:59,340
it's jumping over here and there and I

00:22:56,620 --> 00:23:02,170
will tell him which is the proxy URL

00:22:59,340 --> 00:23:05,890
where is my JSON file with all the

00:23:02,170 --> 00:23:09,160
description we have seen I will pass it

00:23:05,890 --> 00:23:15,220
on to swagger geographic well I will get

00:23:09,160 --> 00:23:17,760
my schema this is this one let's close

00:23:15,220 --> 00:23:19,930
this right people can see it better

00:23:17,760 --> 00:23:25,110
let's close it completely

00:23:19,930 --> 00:23:28,810
I will get my schema and I'm good to go

00:23:25,110 --> 00:23:30,850
this is already the acceptable schema

00:23:28,810 --> 00:23:33,100
from graph quail with all the resolved

00:23:30,850 --> 00:23:35,760
O's what happens in the background is

00:23:33,100 --> 00:23:39,130
that swagger to graph quail parses this

00:23:35,760 --> 00:23:41,190
information from swagger understands all

00:23:39,130 --> 00:23:44,280
the descriptions needed to make an

00:23:41,190 --> 00:23:46,780
request to describe to the server and

00:23:44,280 --> 00:23:49,120
creates the JavaScript functions

00:23:46,780 --> 00:23:51,100
resolver functions for graph quail so

00:23:49,120 --> 00:23:54,430
all I need to do is to start it and we

00:23:51,100 --> 00:23:57,940
have a growth well let's see if it works

00:23:54,430 --> 00:23:59,590
let's see if it's true is this the one

00:23:57,940 --> 00:24:04,090
no it's not the one stays the one no

00:23:59,590 --> 00:24:07,360
this one yes it is the one let's check

00:24:04,090 --> 00:24:09,419
the URL let's make it a little bit

00:24:07,360 --> 00:24:12,519
bigger

00:24:09,419 --> 00:24:15,429
it's up and running that's it I could

00:24:12,519 --> 00:24:17,259
have done it also in 30 seconds any one

00:24:15,429 --> 00:24:19,899
of you of course you need time to

00:24:17,259 --> 00:24:22,389
understand both of technologies but the

00:24:19,899 --> 00:24:24,340
amazing thing is that it's compatible

00:24:22,389 --> 00:24:26,460
and you can make it more and more

00:24:24,340 --> 00:24:29,710
comfortable with time with color types

00:24:26,460 --> 00:24:34,659
so now I know there is a certain object

00:24:29,710 --> 00:24:35,309
with this idea let's fetch it and what

00:24:34,659 --> 00:24:39,669
happens

00:24:35,309 --> 00:24:42,039
it got fetched from this pet store API

00:24:39,669 --> 00:24:44,409
this is nothing running here I'm an

00:24:42,039 --> 00:24:48,970
computer I have all the description of

00:24:44,409 --> 00:24:50,740
all queries find pets get paid by ad get

00:24:48,970 --> 00:24:53,649
inventory remember the inventory stuff

00:24:50,740 --> 00:24:56,409
we saw it's also telling me everything

00:24:53,649 --> 00:25:00,309
that will come back as a response if I

00:24:56,409 --> 00:25:02,679
want to know okay what's in the order no

00:25:00,309 --> 00:25:03,220
that doesn't impress me it doesn't

00:25:02,679 --> 00:25:06,639
interest me

00:25:03,220 --> 00:25:08,980
what's the pet ID what's the pet all

00:25:06,639 --> 00:25:12,850
look I have the category let's fetch the

00:25:08,980 --> 00:25:16,049
category just go there and fetch the

00:25:12,850 --> 00:25:18,250
category no problem it's parsing for you

00:25:16,049 --> 00:25:25,570
transporting only what you have

00:25:18,250 --> 00:25:28,169
requested right and in a manner that you

00:25:25,570 --> 00:25:31,679
can as a developer always decide and

00:25:28,169 --> 00:25:35,049
type safe and self-describing

00:25:31,679 --> 00:25:39,220
so this is one approach we were done for

00:25:35,049 --> 00:25:42,190
today I am kidding we have more

00:25:39,220 --> 00:25:44,049
approaches many more so let's go on

00:25:42,190 --> 00:25:45,519
what's the demo so I got to graph quail

00:25:44,049 --> 00:25:47,350
makes it possible to translate an

00:25:45,519 --> 00:25:50,919
integrate your legacy restful api in the

00:25:47,350 --> 00:25:52,809
graph quail by generating a schema let's

00:25:50,919 --> 00:25:54,700
say you have a resolver function and you

00:25:52,809 --> 00:25:57,610
want to intercept this resolver function

00:25:54,700 --> 00:25:59,259
this request you want to always validate

00:25:57,610 --> 00:26:01,120
the credentials you want to validate the

00:25:59,259 --> 00:26:04,330
inputs then you can write your own

00:26:01,120 --> 00:26:08,529
resolver functions right mmm

00:26:04,330 --> 00:26:10,629
that matches with this schema and this

00:26:08,529 --> 00:26:13,720
is exactly what you can do also it's

00:26:10,629 --> 00:26:16,059
very graphic well let's go back so let's

00:26:13,720 --> 00:26:18,100
say okay that's good but these magic

00:26:16,059 --> 00:26:20,379
resolvers are kind of spooky for me I

00:26:18,100 --> 00:26:22,149
want to see whether magic happens I want

00:26:20,379 --> 00:26:24,939
to see okay this is

00:26:22,149 --> 00:26:26,679
this request is doing get inventory with

00:26:24,939 --> 00:26:28,449
ID blah blah blah and this and that and

00:26:26,679 --> 00:26:31,299
the response and the model I want today

00:26:28,449 --> 00:26:32,049
to take care of this myself then no

00:26:31,299 --> 00:26:40,209
problem at all

00:26:32,049 --> 00:26:45,119
all you have to do is to to do to no use

00:26:40,209 --> 00:26:49,409
swagger to graph well to generate a

00:26:45,119 --> 00:26:53,189
types graph well from the swagger file

00:26:49,409 --> 00:26:57,459
I'm going to press enter here it got

00:26:53,189 --> 00:27:03,309
generated and now what I have is a graph

00:26:57,459 --> 00:27:09,159
well schema definition let's look for

00:27:03,309 --> 00:27:12,189
the pet that where are you no bad

00:27:09,159 --> 00:27:15,749
searching skills here's the pet ID

00:27:12,189 --> 00:27:19,119
category name for the girls everything I

00:27:15,749 --> 00:27:21,819
haven't done nothing to do this it's all

00:27:19,119 --> 00:27:24,579
being generated because someone in the

00:27:21,819 --> 00:27:27,189
back end one day to say we are doing

00:27:24,579 --> 00:27:29,709
this definition right it's not front end

00:27:27,189 --> 00:27:31,899
focus but we're doing a job so this

00:27:29,709 --> 00:27:36,219
helps a lot and this can be improved in

00:27:31,899 --> 00:27:39,789
many ways you guys with me you get that

00:27:36,219 --> 00:27:42,909
all right let's get to the next point so

00:27:39,789 --> 00:27:45,069
if you have this then the solutions that

00:27:42,909 --> 00:27:46,779
you could make here there are projects

00:27:45,069 --> 00:27:49,929
that they could have here are not far

00:27:46,779 --> 00:27:53,259
away so the generator dr. shamon can be

00:27:49,929 --> 00:27:57,329
using any graphical module you are free

00:27:53,259 --> 00:28:00,159
to any kind of graphical technology then

00:27:57,329 --> 00:28:03,699
this is where we get to the amazing

00:28:00,159 --> 00:28:06,219
nastiest framework if we talk about

00:28:03,699 --> 00:28:08,259
graph quayle we talk about rest we talk

00:28:06,219 --> 00:28:12,279
about legacy and talk the bleeding edge

00:28:08,259 --> 00:28:16,179
and the enterprise it means that we want

00:28:12,279 --> 00:28:18,399
to cover those needs but not by

00:28:16,179 --> 00:28:21,849
introducing other problems so we have to

00:28:18,399 --> 00:28:25,869
choose not yet another framework

00:28:21,849 --> 00:28:27,849
syndrome framework whatever so on

00:28:25,869 --> 00:28:32,439
someone that fits our needs and this is

00:28:27,849 --> 00:28:34,809
clearly the enterprise needs while there

00:28:32,439 --> 00:28:35,710
there are a lot of libraries help us in

00:28:34,809 --> 00:28:38,470
tools for Nord

00:28:35,710 --> 00:28:41,200
none of them effectively effectively

00:28:38,470 --> 00:28:44,380
solve the main problems in the

00:28:41,200 --> 00:28:46,179
architecture nest yes aim to provide an

00:28:44,380 --> 00:28:49,090
application architecture out-of-the-box

00:28:46,179 --> 00:28:51,880
which are laws to a fourth less creation

00:28:49,090 --> 00:28:54,909
of highly testable scalable loser book

00:28:51,880 --> 00:29:00,309
loose loosely coupled and easily

00:28:54,909 --> 00:29:03,580
mountable applications it's true Ness GS

00:29:00,309 --> 00:29:07,149
helps you a lot in managing big

00:29:03,580 --> 00:29:10,630
application in a opie way away object

00:29:07,149 --> 00:29:14,200
orientation oriented manner in a you

00:29:10,630 --> 00:29:16,059
know in a way that is reusable in a way

00:29:14,200 --> 00:29:18,070
when you have for example you have your

00:29:16,059 --> 00:29:21,039
client you have a graph QL endpoint

00:29:18,070 --> 00:29:23,230
right and then you have not one legacy

00:29:21,039 --> 00:29:25,059
API you have one you have two you have

00:29:23,230 --> 00:29:27,429
three you have four you have five and

00:29:25,059 --> 00:29:31,360
you have to abstract them and have to

00:29:27,429 --> 00:29:34,840
give it a certain logic that it will be

00:29:31,360 --> 00:29:36,640
optimized and a synchronous for the

00:29:34,840 --> 00:29:41,230
client for the front-end application

00:29:36,640 --> 00:29:44,500
right so when you have a structure like

00:29:41,230 --> 00:29:49,659
this here's the same actually this is

00:29:44,500 --> 00:29:51,760
just fancier I asked woody Gorge tiny if

00:29:49,659 --> 00:29:54,130
I could put some slides from from him

00:29:51,760 --> 00:29:56,679
from his new project and stuff he's

00:29:54,130 --> 00:29:58,510
doing and he has some recommendations

00:29:56,679 --> 00:30:00,809
for me what does should should link to

00:29:58,510 --> 00:30:03,399
you guys I will do it at the end but

00:30:00,809 --> 00:30:05,110
this is another example right or a

00:30:03,399 --> 00:30:07,419
representation of what I'm talking you

00:30:05,110 --> 00:30:09,159
have the Polo server 2.0 you have your

00:30:07,419 --> 00:30:10,960
resolver functions doing all the heavy

00:30:09,159 --> 00:30:13,750
lifting for you and then you have a data

00:30:10,960 --> 00:30:15,820
sources you have DB data model and you

00:30:13,750 --> 00:30:18,070
want to you you use that you don't want

00:30:15,820 --> 00:30:20,230
to have one graphical model for this

00:30:18,070 --> 00:30:21,640
application the fetching data from the

00:30:20,230 --> 00:30:23,830
same that the base is the next

00:30:21,640 --> 00:30:25,630
application the next morning so you want

00:30:23,830 --> 00:30:31,120
to share it you want to improve that

00:30:25,630 --> 00:30:33,370
right so this is why in my opinion SGS

00:30:31,120 --> 00:30:36,100
is a perfect match for the enterprise

00:30:33,370 --> 00:30:39,789
the division of concern that the logic

00:30:36,100 --> 00:30:42,669
transport layer helps you cover all this

00:30:39,789 --> 00:30:46,000
reusable layer helps you to cover all

00:30:42,669 --> 00:30:49,179
these reusable needs create reusable

00:30:46,000 --> 00:30:51,519
logical parts you can work in one

00:30:49,179 --> 00:30:53,379
part of your network layer completely

00:30:51,519 --> 00:30:59,889
separated from someone else without

00:30:53,379 --> 00:31:01,419
getting in conflict I will just fly over

00:30:59,889 --> 00:31:03,489
here a little bit I think this is very

00:31:01,419 --> 00:31:05,469
much self describing but here's the

00:31:03,489 --> 00:31:07,299
points again of object-oriented

00:31:05,469 --> 00:31:10,029
programming functional programming and

00:31:07,299 --> 00:31:12,639
stuff like that and this is so fancy

00:31:10,029 --> 00:31:16,779
actually that trust me if you don't know

00:31:12,639 --> 00:31:19,299
lest yes I will start here a code of it

00:31:16,779 --> 00:31:22,059
a project of it and you will see it it's

00:31:19,299 --> 00:31:24,700
just been navigating it and me talking a

00:31:22,059 --> 00:31:26,799
little bit you into it you understand

00:31:24,700 --> 00:31:30,429
the structure of the project and kind of

00:31:26,799 --> 00:31:31,629
make sense of what it's doing so let's

00:31:30,429 --> 00:31:34,599
go to the demo first

00:31:31,629 --> 00:31:39,940
before the demo I will show you guys

00:31:34,599 --> 00:31:45,609
some stuff that is maybe interesting for

00:31:39,940 --> 00:31:48,669
the next yes let's look it up just go to

00:31:45,609 --> 00:31:51,099
Ness just calm it has an Enterprise

00:31:48,669 --> 00:31:53,919
focus so also supported that's also

00:31:51,099 --> 00:31:55,599
always a topic that companies want also

00:31:53,919 --> 00:31:57,700
to pay for it when they need a support

00:31:55,599 --> 00:31:59,950
or they they needed support and are

00:31:57,700 --> 00:32:03,549
willing to pay for it

00:31:59,950 --> 00:32:06,269
and you have a documentation page which

00:32:03,549 --> 00:32:11,080
are very much recommend it's really good

00:32:06,269 --> 00:32:15,460
and the best part here is with graphic

00:32:11,080 --> 00:32:18,089
well right QuickStart how do you define

00:32:15,460 --> 00:32:22,979
your models how do you load your

00:32:18,089 --> 00:32:26,859
graphical schemas and stuff like that so

00:32:22,979 --> 00:32:29,559
this is the documentation page and on

00:32:26,859 --> 00:32:32,499
github for starters I recommend this

00:32:29,559 --> 00:32:36,429
very much there is also many samples and

00:32:32,499 --> 00:32:39,489
projects you can start with there's a

00:32:36,429 --> 00:32:42,099
typescript swagga project graph called

00:32:39,489 --> 00:32:47,139
project just go here and the sample

00:32:42,099 --> 00:32:50,830
sample set sample yes and you see there

00:32:47,139 --> 00:32:55,119
you have you can also run SGS with a

00:32:50,830 --> 00:32:56,679
different module framework do it

00:32:55,119 --> 00:33:00,309
directly with webpack you can do it

00:32:56,679 --> 00:33:02,860
babel graph QL apollo and all the stuff

00:33:00,309 --> 00:33:04,780
that is and for our project for exam

00:33:02,860 --> 00:33:06,820
many projects in which have been with

00:33:04,780 --> 00:33:10,840
Graff quail we defined one data

00:33:06,820 --> 00:33:13,299
structure one logic and we were able to

00:33:10,840 --> 00:33:16,030
expose those data in any kind of

00:33:13,299 --> 00:33:18,670
transportation method WebSocket HTTP

00:33:16,030 --> 00:33:20,799
whatever and it was really easy to

00:33:18,670 --> 00:33:25,030
define the module itself like that

00:33:20,799 --> 00:33:31,710
I am almost over with the time time is

00:33:25,030 --> 00:33:40,210
running so let's start the project done

00:33:31,710 --> 00:33:42,100
folder so this is the project structure

00:33:40,210 --> 00:33:43,299
let's start with the first one that

00:33:42,100 --> 00:33:46,299
everyone can relate to

00:33:43,299 --> 00:33:49,210
it's the maintains right so what do we

00:33:46,299 --> 00:33:51,070
have here my application module and for

00:33:49,210 --> 00:33:54,150
the ones who knows angular for example

00:33:51,070 --> 00:33:56,530
as soon as you're inside you will see ok

00:33:54,150 --> 00:33:59,220
here have certain kinds of definitions

00:33:56,530 --> 00:34:01,780
of what they can do and cannot do like

00:33:59,220 --> 00:34:04,740
dependency management provider functions

00:34:01,780 --> 00:34:09,250
and stuff like that we can go on and

00:34:04,740 --> 00:34:11,619
take a look if the cats module which in

00:34:09,250 --> 00:34:14,830
the next rule have the cats resolvers

00:34:11,619 --> 00:34:17,350
and here we have the result of resolves

00:34:14,830 --> 00:34:19,899
doing all this heavy lifting that swagga

00:34:17,350 --> 00:34:21,990
to graph well did automatically but of

00:34:19,899 --> 00:34:26,669
course this has another focus is also

00:34:21,990 --> 00:34:35,679
perfect from the enterprise I have here

00:34:26,669 --> 00:34:38,470
also my cough Kojima in typescript which

00:34:35,679 --> 00:34:40,359
can be very useful for client

00:34:38,470 --> 00:34:43,450
applications to type type checking

00:34:40,359 --> 00:34:46,830
before building it that's it with this

00:34:43,450 --> 00:34:46,830
demo let's move forward

00:34:47,220 --> 00:34:52,250
am i right here I'm not right here Here

00:34:50,649 --> 00:34:55,429
I am

00:34:52,250 --> 00:34:57,290
so word to the wise it is important to

00:34:55,429 --> 00:34:58,040
note that graph girl is not a substitute

00:34:57,290 --> 00:35:02,570
for rest

00:34:58,040 --> 00:35:04,430
in fact the graphical framework uses

00:35:02,570 --> 00:35:06,050
rest to transport the payload which can

00:35:04,430 --> 00:35:07,670
be then handled by the server internally

00:35:06,050 --> 00:35:11,030
so it's not about the transportation

00:35:07,670 --> 00:35:15,470
method it's about the way the API is

00:35:11,030 --> 00:35:17,330
describing it but you should know that

00:35:15,470 --> 00:35:19,310
for back-end developers to introduce

00:35:17,330 --> 00:35:24,070
graph quayle can be very difficult

00:35:19,310 --> 00:35:27,859
because they are not into it this new or

00:35:24,070 --> 00:35:33,290
front-end technologies and sometimes the

00:35:27,859 --> 00:35:34,849
learning curve can be very stable for

00:35:33,290 --> 00:35:36,830
the approaches that I definitely

00:35:34,849 --> 00:35:41,180
recommend and we can maybe check it out

00:35:36,830 --> 00:35:45,020
on on a next talk is about graphical

00:35:41,180 --> 00:35:51,820
code generator graphical code generator

00:35:45,020 --> 00:35:57,440
is a library that actually helps you to

00:35:51,820 --> 00:36:00,020
transform your schema to anything you

00:35:57,440 --> 00:36:03,580
want anything but free market template I

00:36:00,020 --> 00:36:06,980
believe and it's very helpful for

00:36:03,580 --> 00:36:11,570
enterprise applications that have the

00:36:06,980 --> 00:36:24,140
need to rewrite the network layer in

00:36:11,570 --> 00:36:25,820
another manner code game generator you

00:36:24,140 --> 00:36:29,060
can also try it out on a home page

00:36:25,820 --> 00:36:31,430
they're very nice tutorials about this

00:36:29,060 --> 00:36:33,950
how you can get from a graph called

00:36:31,430 --> 00:36:37,580
Shaima into basically anything you want

00:36:33,950 --> 00:36:38,180
and they mean it and its really

00:36:37,580 --> 00:36:40,820
impressive

00:36:38,180 --> 00:36:45,200
so as you see there are many

00:36:40,820 --> 00:36:50,359
possibilities to come along with legacy

00:36:45,200 --> 00:36:51,740
api's and provide the kind of features

00:36:50,359 --> 00:36:55,250
that you need for the front-end

00:36:51,740 --> 00:36:58,520
developer team in a modern way that is

00:36:55,250 --> 00:37:01,119
reusable that this type safe but it also

00:36:58,520 --> 00:37:05,090
don't break the production system I

00:37:01,119 --> 00:37:10,060
think that's it for my talk

00:37:05,090 --> 00:37:12,970
let's check it out that's all for today

00:37:10,060 --> 00:37:14,710
thank you very much for listening and

00:37:12,970 --> 00:37:18,619
feedback is welcome

00:37:14,710 --> 00:37:18,619

YouTube URL: https://www.youtube.com/watch?v=551gKWJEsK0


