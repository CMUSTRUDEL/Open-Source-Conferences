Title: Vue.js, Scaling Vue In An Existing Stack, March 2018
Publication date: 2018-03-22
Playlist: Vue.js Vienna
Description: 
	Greenfield projects are a luxury, one very often does not have. Most times there is an existing tech stack, and it's about time to introduce a new UI Library to the stack. Vue is an excellent choice. Introduce it small and start scaling from there. In this talk I will share experience, tricks and solutions to add Vue to an existing customer serving app, and be victorious.
Captions: 
	00:00:00,000 --> 00:00:03,389
first of all thank you for having me

00:00:01,469 --> 00:00:06,420
it's very exciting to see the community

00:00:03,389 --> 00:00:07,890
growing here like by the dozens every

00:00:06,420 --> 00:00:09,929
time like I think the last time we were

00:00:07,890 --> 00:00:11,670
about 30 people today we're almost 50 or

00:00:09,929 --> 00:00:13,830
so so that's pretty cool to just see

00:00:11,670 --> 00:00:16,170
everything going here the second thing

00:00:13,830 --> 00:00:18,000
I'm very sorry I forgot all my view

00:00:16,170 --> 00:00:19,590
stickers at home I got a good bunch of

00:00:18,000 --> 00:00:21,420
new used stickers and I forgot them

00:00:19,590 --> 00:00:23,369
because it was a very stressful week so

00:00:21,420 --> 00:00:27,090
I'll promise I'll bring it over the next

00:00:23,369 --> 00:00:30,060
time and today at the honour of talking

00:00:27,090 --> 00:00:32,759
about scaling view in an existing stack

00:00:30,060 --> 00:00:34,710
I guess not everybody is like working

00:00:32,759 --> 00:00:36,899
view full-time already and it's more

00:00:34,710 --> 00:00:38,180
like okay we're interested in view we

00:00:36,899 --> 00:00:40,379
heard of it it's kind of cool and very

00:00:38,180 --> 00:00:41,790
often we have to challenge that we want

00:00:40,379 --> 00:00:44,280
to introduce it to what we have already

00:00:41,790 --> 00:00:47,640
because like we want to stay on top of

00:00:44,280 --> 00:00:49,739
modern technologies in general and what

00:00:47,640 --> 00:00:52,079
we realize when working with it working

00:00:49,739 --> 00:00:54,300
in greenfield projects is a luxury we

00:00:52,079 --> 00:00:56,489
very often don't have it's like there is

00:00:54,300 --> 00:00:57,920
an existing application there's a lot of

00:00:56,489 --> 00:01:00,359
existing code maybe even an old

00:00:57,920 --> 00:01:02,699
JavaScript framework that we have that

00:01:00,359 --> 00:01:04,830
we want to replace over time I hope

00:01:02,699 --> 00:01:12,479
everything is readable the slides will

00:01:04,830 --> 00:01:16,170
be kind of dark yeah I hope I don't know

00:01:12,479 --> 00:01:17,970
how to turn off but should work anyway I

00:01:16,170 --> 00:01:19,799
hope otherwise I'll give you all the

00:01:17,970 --> 00:01:24,360
slides so promise me there's something

00:01:19,799 --> 00:01:26,790
interesting on the slides and one thing

00:01:24,360 --> 00:01:28,590
when adding something there's like new

00:01:26,790 --> 00:01:32,040
tech to a stack is always a very heavy

00:01:28,590 --> 00:01:33,630
investment from many different sites it

00:01:32,040 --> 00:01:35,640
needs like they're all engineers to buy

00:01:33,630 --> 00:01:38,220
and to learn the new technology to get

00:01:35,640 --> 00:01:40,439
like okay view sounds interesting okay

00:01:38,220 --> 00:01:42,150
that everybody needs to learn it you

00:01:40,439 --> 00:01:44,640
personally need to spend a lot of time

00:01:42,150 --> 00:01:45,990
on understanding the framework of kind

00:01:44,640 --> 00:01:47,280
of thing okay this is what the thing I

00:01:45,990 --> 00:01:49,560
want to go with because you will

00:01:47,280 --> 00:01:51,329
probably spend a lot of time working

00:01:49,560 --> 00:01:54,930
with the new framework that you're going

00:01:51,329 --> 00:01:56,850
to you use and also on the backend side

00:01:54,930 --> 00:01:58,079
it also very often needs an investment

00:01:56,850 --> 00:01:59,520
on their side and a buy-in from the

00:01:58,079 --> 00:02:01,890
whole company or the whole team at least

00:01:59,520 --> 00:02:03,869
you're working with we sometimes tend to

00:02:01,890 --> 00:02:05,700
forget that it's not only us working on

00:02:03,869 --> 00:02:07,409
things it's like really a whole team and

00:02:05,700 --> 00:02:08,690
it has a lot of implications on many

00:02:07,409 --> 00:02:11,760
sides

00:02:08,690 --> 00:02:12,780
that sounds very negative I know but we

00:02:11,760 --> 00:02:13,710
also know it's a very necessary

00:02:12,780 --> 00:02:15,540
investment from

00:02:13,710 --> 00:02:17,370
a lot of companies now once that don't

00:02:15,540 --> 00:02:18,930
do it that don't go with the tech in

00:02:17,370 --> 00:02:20,640
general they are the ones that fall

00:02:18,930 --> 00:02:22,290
behind to a certain degree because it

00:02:20,640 --> 00:02:26,490
gets harder to innovate to stay

00:02:22,290 --> 00:02:28,830
competitive with everybody else and yeah

00:02:26,490 --> 00:02:30,930
so views luckily a very cool thing to

00:02:28,830 --> 00:02:33,740
invest in and so and that makes the

00:02:30,930 --> 00:02:36,450
investment very worthwhile I would say

00:02:33,740 --> 00:02:39,600
the other thing is while adopting

00:02:36,450 --> 00:02:41,700
something new there's also competing

00:02:39,600 --> 00:02:45,780
tech running in parallel on your front

00:02:41,700 --> 00:02:47,520
end probably like almost nobody I know

00:02:45,780 --> 00:02:49,410
or so like they have the time to say I

00:02:47,520 --> 00:02:52,050
do feature freeze in my application for

00:02:49,410 --> 00:02:54,360
one year and just poured over the whole

00:02:52,050 --> 00:02:55,980
stack to the new front-end framework

00:02:54,360 --> 00:02:58,140
that I chose because like I have all the

00:02:55,980 --> 00:02:59,310
time and luxury that's almost never

00:02:58,140 --> 00:03:01,350
having you always have to do it

00:02:59,310 --> 00:03:03,000
incrementally so there's always like

00:03:01,350 --> 00:03:05,760
this little piece of challenge to say

00:03:03,000 --> 00:03:08,160
okay what if view runs in parallel to

00:03:05,760 --> 00:03:10,590
angular or to ember or to just a plain

00:03:08,160 --> 00:03:12,300
chick Theory CoffeeScript stack there's

00:03:10,590 --> 00:03:14,070
a lot of challenges coming along with

00:03:12,300 --> 00:03:17,370
this one so I'll try to shed some light

00:03:14,070 --> 00:03:20,580
on this in general the biggest question

00:03:17,370 --> 00:03:22,830
we faced was where to draw the line

00:03:20,580 --> 00:03:26,730
between those kind of competing

00:03:22,830 --> 00:03:28,140
technologies - we're at it and yeah

00:03:26,730 --> 00:03:29,460
there's a lot of challenges coming along

00:03:28,140 --> 00:03:31,530
so hopefully we can tackle something

00:03:29,460 --> 00:03:35,130
today in the talk and it makes some

00:03:31,530 --> 00:03:38,340
clear pictures for you the other thing

00:03:35,130 --> 00:03:40,800
that for example we realized that a full

00:03:38,340 --> 00:03:42,180
single page app even if view is like the

00:03:40,800 --> 00:03:44,880
cool framework to do single page apps

00:03:42,180 --> 00:03:46,950
it's sometimes like not the really good

00:03:44,880 --> 00:03:49,230
thing to do up front and sometimes it's

00:03:46,950 --> 00:03:52,980
also not possible to go all in on a

00:03:49,230 --> 00:03:54,360
single page app as well so the beauty of

00:03:52,980 --> 00:03:56,880
view itself is it's a progressive

00:03:54,360 --> 00:03:58,230
framework so you can add it piece piece

00:03:56,880 --> 00:04:01,830
by piece and this is what we're going to

00:03:58,230 --> 00:04:04,020
do so my name is Roman I'm senior

00:04:01,830 --> 00:04:05,850
software engineer at Co chip we got

00:04:04,020 --> 00:04:08,730
recently acquired by a bigger a company

00:04:05,850 --> 00:04:11,490
called clout piece and you will reach me

00:04:08,730 --> 00:04:13,890
on twitter at cabrillo and I'll coach it

00:04:11,490 --> 00:04:16,200
as our company Twitter handle so Pete

00:04:13,890 --> 00:04:17,880
please feel free to reach out to me at

00:04:16,200 --> 00:04:20,590
any point if you have any view question

00:04:17,880 --> 00:04:23,260
or so referees talk

00:04:20,590 --> 00:04:25,419
hmm and why am I talking to you about

00:04:23,260 --> 00:04:27,400
this today it's basically because I've

00:04:25,419 --> 00:04:30,070
been there and we've done that we went

00:04:27,400 --> 00:04:34,930
exactly through the same challenges we

00:04:30,070 --> 00:04:37,180
had an old stack the was based on on

00:04:34,930 --> 00:04:39,880
CoffeeScript and some jQuery it had some

00:04:37,180 --> 00:04:42,760
angular unit so it was like a MS to a

00:04:39,880 --> 00:04:44,470
certain degree I would say so we had to

00:04:42,760 --> 00:04:49,990
real kind of adopt something new and

00:04:44,470 --> 00:04:51,370
move forward along the way so yeah I

00:04:49,990 --> 00:04:53,710
went a little bit hat we have this

00:04:51,370 --> 00:04:55,150
tactic datapack off a script and also

00:04:53,710 --> 00:04:56,530
the other challenge that we had didn't

00:04:55,150 --> 00:04:58,450
have a lot of resources at this point

00:04:56,530 --> 00:05:00,790
there was a very small company very

00:04:58,450 --> 00:05:02,860
small team but we had a ton of users

00:05:00,790 --> 00:05:05,229
using our application on a day on a

00:05:02,860 --> 00:05:07,630
daily basis and for them it's also like

00:05:05,229 --> 00:05:13,060
okay how can you stay competitive doing

00:05:07,630 --> 00:05:15,310
this yeah and also it's a rails

00:05:13,060 --> 00:05:18,370
application in our case so it was a very

00:05:15,310 --> 00:05:21,240
back-end heavy system and rails

00:05:18,370 --> 00:05:24,639
engineers are very opinionated about

00:05:21,240 --> 00:05:27,070
their build pipeline or how to do kind

00:05:24,639 --> 00:05:28,990
of front-end and yeah so it was a lot of

00:05:27,070 --> 00:05:31,030
fun to kind of draw this line in the

00:05:28,990 --> 00:05:32,169
sand to say okay we gotta jump over to

00:05:31,030 --> 00:05:34,210
view and this is how we're gonna do it

00:05:32,169 --> 00:05:37,270
so eventually we figured it out and

00:05:34,210 --> 00:05:39,419
hopefully this gives you some hope if

00:05:37,270 --> 00:05:41,650
you have the same battle to fight and

00:05:39,419 --> 00:05:43,720
it's sometimes especially in the

00:05:41,650 --> 00:05:46,360
beginning feel like it's you against

00:05:43,720 --> 00:05:48,070
your team by saying you you're the

00:05:46,360 --> 00:05:49,450
front-end engineer and the team is like

00:05:48,070 --> 00:05:53,979
that the backend guys you're saying oh

00:05:49,450 --> 00:05:56,169
no no that's all bad that the important

00:05:53,979 --> 00:05:58,240
thing is you need to really have them on

00:05:56,169 --> 00:05:59,650
your side to say okay it's important for

00:05:58,240 --> 00:06:02,110
us to work together to get them on your

00:05:59,650 --> 00:06:03,880
side and show in view how awesome view

00:06:02,110 --> 00:06:05,380
is in general and eventually it will go

00:06:03,880 --> 00:06:07,330
more hand-in-hand at one point and

00:06:05,380 --> 00:06:09,729
that's very important if you want to add

00:06:07,330 --> 00:06:13,150
a new tag to your stack or so that you

00:06:09,729 --> 00:06:17,169
say you have everyone in on your site

00:06:13,150 --> 00:06:19,090
the important piece we did was I said we

00:06:17,169 --> 00:06:21,340
can't feature freeze cars like if you

00:06:19,090 --> 00:06:23,320
stop a year or even a month doing

00:06:21,340 --> 00:06:24,700
nothing on your application this is a

00:06:23,320 --> 00:06:26,110
month you will always use to your

00:06:24,700 --> 00:06:27,610
competitors this is a month you'll never

00:06:26,110 --> 00:06:30,520
get back so you always have to stay like

00:06:27,610 --> 00:06:32,169
very agile and move forward and so an

00:06:30,520 --> 00:06:34,330
important piece for us was to split the

00:06:32,169 --> 00:06:36,069
whole process in different phases

00:06:34,330 --> 00:06:37,810
and say okay this is how we try to roll

00:06:36,069 --> 00:06:41,940
it out and how to move forward without

00:06:37,810 --> 00:06:41,940
kind of putting a roadblock in our way

00:06:41,949 --> 00:06:49,360
the first important part is reduce as

00:06:45,159 --> 00:06:50,889
many unknowns as possible yeah that

00:06:49,360 --> 00:06:52,449
sounds a little vague or so but it's a

00:06:50,889 --> 00:06:57,099
very very important rule that I can't

00:06:52,449 --> 00:06:59,620
emphasize much enough sir so what do you

00:06:57,099 --> 00:07:01,389
mean by reducing things the first I'll

00:06:59,620 --> 00:07:04,210
decide on one language that you were

00:07:01,389 --> 00:07:07,210
gone going to use for example we had

00:07:04,210 --> 00:07:08,889
CoffeeScript and some JavaScript and it

00:07:07,210 --> 00:07:11,110
was all a little bit over the place and

00:07:08,889 --> 00:07:12,639
we said okay if we want to move forward

00:07:11,110 --> 00:07:14,889
we're going to use the latest version as

00:07:12,639 --> 00:07:17,020
JavaScript so we basically throw ACMA

00:07:14,889 --> 00:07:18,699
script in there had a babel build

00:07:17,020 --> 00:07:20,319
process we squeezed it in there it

00:07:18,699 --> 00:07:21,580
wasn't very easy at this point but it

00:07:20,319 --> 00:07:22,990
said okay this is very important for us

00:07:21,580 --> 00:07:26,259
to move forward to have a better modern

00:07:22,990 --> 00:07:28,900
stack so you can grow on and get rid of

00:07:26,259 --> 00:07:30,430
all the unknowns upfront so we poured it

00:07:28,900 --> 00:07:35,259
for example all the CoffeeScript files

00:07:30,430 --> 00:07:37,990
over to JavaScript first the other thing

00:07:35,259 --> 00:07:39,550
is remove all the unknowns everything

00:07:37,990 --> 00:07:41,319
you work on and you don't know okay

00:07:39,550 --> 00:07:43,029
what's going to happen if I change this

00:07:41,319 --> 00:07:46,779
what happened with kind of like some

00:07:43,029 --> 00:07:48,550
global variables or so that's always

00:07:46,779 --> 00:07:49,930
very very risky so you should know

00:07:48,550 --> 00:07:52,270
everything that you're going to do along

00:07:49,930 --> 00:07:53,620
the way say ok like this feature it has

00:07:52,270 --> 00:07:56,020
this requirements and this feature has

00:07:53,620 --> 00:08:01,029
dis requirements otherwise it could be

00:07:56,020 --> 00:08:04,090
very bumpy ride and while porting things

00:08:01,029 --> 00:08:06,099
over try to also maybe refactor like

00:08:04,090 --> 00:08:09,310
bits and pieces and refactoring a thing

00:08:06,099 --> 00:08:14,710
that can make a lot of fun yeah this is

00:08:09,310 --> 00:08:16,599
fun ok no it's really fun or so to take

00:08:14,710 --> 00:08:18,550
ok this is how the code runs right now

00:08:16,599 --> 00:08:20,889
now with all the things I learned in the

00:08:18,550 --> 00:08:22,240
last year maybe or so I'll take the risk

00:08:20,889 --> 00:08:26,319
and refactor it a little bit along the

00:08:22,240 --> 00:08:28,240
way a small example what we did here is

00:08:26,319 --> 00:08:30,159
we had like this was just a plain

00:08:28,240 --> 00:08:31,840
CoffeeScript function that's basically

00:08:30,159 --> 00:08:33,519
adding a click event and if something

00:08:31,840 --> 00:08:35,919
was kind of sending a check request to

00:08:33,519 --> 00:08:37,570
the server basically JavaScript it was

00:08:35,919 --> 00:08:40,300
all over the place in our application at

00:08:37,570 --> 00:08:42,640
this point the first step we did is

00:08:40,300 --> 00:08:45,370
basically just ported over to JavaScript

00:08:42,640 --> 00:08:47,529
this eliminates as we said reduces the

00:08:45,370 --> 00:08:49,360
scope of languages so we have one

00:08:47,529 --> 00:08:51,639
language that's all JavaScript so we're

00:08:49,360 --> 00:08:54,279
in a better site already and by

00:08:51,639 --> 00:08:56,019
refactoring why not go the extra mile

00:08:54,279 --> 00:08:57,550
and say okay like a reduce even jQuery

00:08:56,019 --> 00:08:59,499
at this point remove it you don't need

00:08:57,550 --> 00:09:01,509
it for kind of working with a small

00:08:59,499 --> 00:09:03,850
click event on an array or an element

00:09:01,509 --> 00:09:05,559
you can use everything that javascript

00:09:03,850 --> 00:09:07,329
has to offer for us we have the array

00:09:05,559 --> 00:09:09,639
methods we can fetch directly in the

00:09:07,329 --> 00:09:13,360
browser it's also ported there so that's

00:09:09,639 --> 00:09:16,170
quite nice and yeah just handle your way

00:09:13,360 --> 00:09:18,610
forward again through the next phase

00:09:16,170 --> 00:09:20,610
we're ready ready to introduce view and

00:09:18,610 --> 00:09:22,420
that's why we all hear about I guess

00:09:20,610 --> 00:09:25,720
introducing view to the stack is

00:09:22,420 --> 00:09:27,069
probably the most fun part for most of

00:09:25,720 --> 00:09:28,569
us because we finally can work on the

00:09:27,069 --> 00:09:32,139
thing that we're really we're looking

00:09:28,569 --> 00:09:34,420
forward to but it's also a challenging

00:09:32,139 --> 00:09:38,110
part I would say when we want to

00:09:34,420 --> 00:09:40,660
introduce view we first should choose a

00:09:38,110 --> 00:09:43,120
very manageable target we should choose

00:09:40,660 --> 00:09:47,040
a small target that we can that we know

00:09:43,120 --> 00:09:50,079
all the requirements off as we say in

00:09:47,040 --> 00:09:51,790
every unknown that we have is a risk so

00:09:50,079 --> 00:09:53,769
if you work on a new feature while

00:09:51,790 --> 00:09:55,569
adding a new view that's like this it's

00:09:53,769 --> 00:09:58,120
always happens so they like new things

00:09:55,569 --> 00:10:00,069
new kind of steps and feature requests

00:09:58,120 --> 00:10:01,509
come in while you're working it so

00:10:00,069 --> 00:10:03,129
ideally take something that you know

00:10:01,509 --> 00:10:05,709
okay this is how it looks this is how

00:10:03,129 --> 00:10:08,230
the API works this is you know it from A

00:10:05,709 --> 00:10:10,120
to B the whole feature and that's like a

00:10:08,230 --> 00:10:12,550
very good way to introduce view because

00:10:10,120 --> 00:10:14,500
this lets you focus on introducing the

00:10:12,550 --> 00:10:19,300
language or the framework in this case

00:10:14,500 --> 00:10:21,430
and not on the feature itself so define

00:10:19,300 --> 00:10:25,059
one clear entry point for view on the

00:10:21,430 --> 00:10:27,459
page and then also let's go simple up

00:10:25,059 --> 00:10:29,230
front load view directly from a CDN we

00:10:27,459 --> 00:10:31,059
don't need to go crazy right now to say

00:10:29,230 --> 00:10:33,519
okay like we do all our web pack build

00:10:31,059 --> 00:10:35,589
process up front as we heard views very

00:10:33,519 --> 00:10:38,019
progressive so it allows us to do a lot

00:10:35,589 --> 00:10:42,040
of cool things with just loading view

00:10:38,019 --> 00:10:44,379
from a CDN the other thing is we could

00:10:42,040 --> 00:10:47,199
serve my screen is so dark it's very

00:10:44,379 --> 00:10:49,179
hard to read we can try to use what view

00:10:47,199 --> 00:10:51,160
offers for us out of the box as much as

00:10:49,179 --> 00:10:53,649
possible view comes with a lot of cool

00:10:51,160 --> 00:10:56,709
tools that we can leverage and to get

00:10:53,649 --> 00:10:59,770
really good results up front so try to

00:10:56,709 --> 00:11:01,750
really use what view offers you

00:10:59,770 --> 00:11:04,540
one of the first recursive here very

00:11:01,750 --> 00:11:08,350
often oh how can I get jQuery run in

00:11:04,540 --> 00:11:09,940
view it's always like try to understand

00:11:08,350 --> 00:11:12,820
what view tries to do how it works

00:11:09,940 --> 00:11:14,920
internally and you will very fast

00:11:12,820 --> 00:11:16,900
realize okay there's no way or no need

00:11:14,920 --> 00:11:19,000
for jQuery to interact with dumb notes

00:11:16,900 --> 00:11:20,710
on the page in any way like view has

00:11:19,000 --> 00:11:24,180
everything figured out it just takes a

00:11:20,710 --> 00:11:27,160
little bit of a different approach there

00:11:24,180 --> 00:11:29,080
so what do you mean by clear entry point

00:11:27,160 --> 00:11:30,850
this could look as simple as this that

00:11:29,080 --> 00:11:32,470
you have like your div tag on the page

00:11:30,850 --> 00:11:34,720
where say okay like this is where we'll

00:11:32,470 --> 00:11:37,180
add view to the page just called you

00:11:34,720 --> 00:11:39,070
feature in this case it's like a Status

00:11:37,180 --> 00:11:41,020
page indicator for us we were loading

00:11:39,070 --> 00:11:42,430
the status page from their API and

00:11:41,020 --> 00:11:45,070
saying okay everything is fine and our

00:11:42,430 --> 00:11:46,840
back-end services are not but it's the

00:11:45,070 --> 00:11:48,520
clear entry point where say ok this is

00:11:46,840 --> 00:11:51,880
where we draw the line for view we'll

00:11:48,520 --> 00:11:54,100
take over the script that we can

00:11:51,880 --> 00:11:56,110
introduce afterwards is let's go as

00:11:54,100 --> 00:11:58,630
simple as possible we drop in the CDN

00:11:56,110 --> 00:12:00,940
link directly and say ok we're ready to

00:11:58,630 --> 00:12:02,800
write view out of the box so what we're

00:12:00,940 --> 00:12:04,990
doing we just instantiate a new view

00:12:02,800 --> 00:12:07,390
instance we give it the element for the

00:12:04,990 --> 00:12:09,040
view feature and we define for example

00:12:07,390 --> 00:12:11,440
it's currently loading because we're

00:12:09,040 --> 00:12:13,540
trying to fetch the status and this is

00:12:11,440 --> 00:12:14,950
our template how it looks like please

00:12:13,540 --> 00:12:16,720
don't get hung up this is a string

00:12:14,950 --> 00:12:19,480
template for now it's like just for the

00:12:16,720 --> 00:12:20,860
ease of using of course there's a lot of

00:12:19,480 --> 00:12:23,440
conversations going on you should never

00:12:20,860 --> 00:12:25,510
use string templates I think for the

00:12:23,440 --> 00:12:27,280
ease of the example and for sometimes

00:12:25,510 --> 00:12:32,470
it's still fine to use string template

00:12:27,280 --> 00:12:34,570
so yeah it's a good start the next

00:12:32,470 --> 00:12:36,850
question here Barry off met the

00:12:34,570 --> 00:12:39,310
challenges we also faced this how do we

00:12:36,850 --> 00:12:41,650
pass in data from the outside into our

00:12:39,310 --> 00:12:45,220
view application or the code that we

00:12:41,650 --> 00:12:48,340
want to do I saw a lot of really really

00:12:45,220 --> 00:12:50,860
weird approaches there where you hook

00:12:48,340 --> 00:12:52,660
into the view lifecycle in the kind of

00:12:50,860 --> 00:12:55,390
internal methods that they provide and

00:12:52,660 --> 00:12:56,980
then do a lot of crazy stuff and import

00:12:55,390 --> 00:12:59,310
other ten libraries that help you doing

00:12:56,980 --> 00:13:01,780
it it's very simple in view as well

00:12:59,310 --> 00:13:03,700
leverage to view life cycle itself as

00:13:01,780 --> 00:13:06,070
much as possible view office again

00:13:03,700 --> 00:13:08,560
everything that it has so just dig a

00:13:06,070 --> 00:13:09,790
little deeper what it does what I mean

00:13:08,560 --> 00:13:12,130
by this

00:13:09,790 --> 00:13:12,940
for example view has a before mount

00:13:12,130 --> 00:13:15,550
method

00:13:12,940 --> 00:13:17,320
so the lifecycle if you've never seen

00:13:15,550 --> 00:13:19,900
the view lifecycle I should have

00:13:17,320 --> 00:13:22,240
probably put a screen for dead in there

00:13:19,900 --> 00:13:23,980
but it basically go through that you

00:13:22,240 --> 00:13:26,020
have like it's a created instance or

00:13:23,980 --> 00:13:27,820
created fires in a function there then

00:13:26,020 --> 00:13:29,770
it can check if it's updated anyway then

00:13:27,820 --> 00:13:31,150
it's mounted and before mounted so it

00:13:29,770 --> 00:13:33,160
gives you a lot of options to hook into

00:13:31,150 --> 00:13:35,560
the view lifecycle to say okay I want to

00:13:33,160 --> 00:13:37,720
fire my own methods along the way in

00:13:35,560 --> 00:13:40,990
this case before mount works just fine

00:13:37,720 --> 00:13:43,870
why does it work what we do is the

00:13:40,990 --> 00:13:45,670
element reference is a small piece in

00:13:43,870 --> 00:13:48,700
view that gives you access to the

00:13:45,670 --> 00:13:50,590
element to the dom node itself when we

00:13:48,700 --> 00:13:53,320
have our template basically what's in

00:13:50,590 --> 00:13:55,360
here if we run view and it's kind of

00:13:53,320 --> 00:13:57,790
mounted then basically what we expect is

00:13:55,360 --> 00:14:00,700
that the template is in part where our

00:13:57,790 --> 00:14:03,160
entry point was so if we take the before

00:14:00,700 --> 00:14:05,050
mount we can actually reference this

00:14:03,160 --> 00:14:07,600
element and then we have the reference

00:14:05,050 --> 00:14:09,850
to the old Dom node to the one that will

00:14:07,600 --> 00:14:11,590
just reference up there and then just

00:14:09,850 --> 00:14:13,210
read the data set URL off it and you

00:14:11,590 --> 00:14:15,280
have it already in your instance and

00:14:13,210 --> 00:14:17,230
then you proceed forward and view will

00:14:15,280 --> 00:14:18,820
take care of all the rest but this is

00:14:17,230 --> 00:14:21,100
the easiest way of getting like data

00:14:18,820 --> 00:14:23,890
from the outside past interview instance

00:14:21,100 --> 00:14:32,260
without a lot of magic so that's quite

00:14:23,890 --> 00:14:33,820
simple sir no question okay yeah the

00:14:32,260 --> 00:14:36,330
other thing like a little tip on the

00:14:33,820 --> 00:14:38,620
side if you want to do like more

00:14:36,330 --> 00:14:40,630
sophisticated stuff up front or so or

00:14:38,620 --> 00:14:42,780
maybe like this element reference is not

00:14:40,630 --> 00:14:45,760
the right thing to do for you right now

00:14:42,780 --> 00:14:48,010
there's also this way in view mounting

00:14:45,760 --> 00:14:51,070
something on the page by using for

00:14:48,010 --> 00:14:52,450
example the mount option directly if you

00:14:51,070 --> 00:14:54,160
say like it's maybe programmatically

00:14:52,450 --> 00:14:55,540
cause you pass in even the name for the

00:14:54,160 --> 00:14:57,340
function or it comes from somewhere else

00:14:55,540 --> 00:14:58,600
so you can use the mount function if you

00:14:57,340 --> 00:15:00,400
don't want to use the element reference

00:14:58,600 --> 00:15:01,990
and the other thing that I would just

00:15:00,400 --> 00:15:03,760
want to show here especially in the

00:15:01,990 --> 00:15:05,890
beginning it's nice if a lot of things

00:15:03,760 --> 00:15:08,590
come from the backend view allows you to

00:15:05,890 --> 00:15:10,180
use kind of a script tag passing in a

00:15:08,590 --> 00:15:11,680
template and use this as a reference

00:15:10,180 --> 00:15:14,560
note to say okay that's where the

00:15:11,680 --> 00:15:16,720
template come from we had this running

00:15:14,560 --> 00:15:17,830
at one point or so just to move fast to

00:15:16,720 --> 00:15:19,900
certain degree because we didn't want to

00:15:17,830 --> 00:15:21,640
port everything over to scream string

00:15:19,900 --> 00:15:24,190
templates and a lot of things were

00:15:21,640 --> 00:15:26,040
coming from the backend as slim

00:15:24,190 --> 00:15:28,320
templates and they look kind of quite

00:15:26,040 --> 00:15:31,110
difference it was a little bit work we

00:15:28,320 --> 00:15:32,970
try to say for ourselves in this case we

00:15:31,110 --> 00:15:34,860
use the script tag there and just

00:15:32,970 --> 00:15:37,170
reference it directly and that helped us

00:15:34,860 --> 00:15:39,480
also do save time and proceed forward by

00:15:37,170 --> 00:15:41,930
adding view so that's just a small tip

00:15:39,480 --> 00:15:45,240
on the side I had it specially for you

00:15:41,930 --> 00:15:48,540
hmm so then the next big feature that we

00:15:45,240 --> 00:15:50,160
should do by adding everything is we

00:15:48,540 --> 00:15:52,889
should probably improve our build

00:15:50,160 --> 00:15:55,860
process that we're using we've seen so

00:15:52,889 --> 00:15:57,779
far we added this CDN link and we also

00:15:55,860 --> 00:16:00,509
heard that our rails engineers have a

00:15:57,779 --> 00:16:02,279
very certain way of doing things we want

00:16:00,509 --> 00:16:04,019
to take control of what's going on we're

00:16:02,279 --> 00:16:05,730
kind of view allows us to do a lot of

00:16:04,019 --> 00:16:07,380
cool things and we want to control every

00:16:05,730 --> 00:16:09,000
aspect of building the application of

00:16:07,380 --> 00:16:11,579
building like JavaScript and our client

00:16:09,000 --> 00:16:14,089
side and in this case all I can say is

00:16:11,579 --> 00:16:17,100
that web pack is very much your friend

00:16:14,089 --> 00:16:21,209
if you have not worked off who is not

00:16:17,100 --> 00:16:23,220
work with that wet pack so far well

00:16:21,209 --> 00:16:26,130
minority that's don't feel bad don't

00:16:23,220 --> 00:16:27,569
feel bad it's totally fine but it's very

00:16:26,130 --> 00:16:29,699
good to delight and there's most people

00:16:27,569 --> 00:16:31,319
know web pack that I work with it and it

00:16:29,699 --> 00:16:34,260
just speaks for the tool itself it

00:16:31,319 --> 00:16:36,240
became quite for standard why because it

00:16:34,260 --> 00:16:38,430
handles a lot of things like really

00:16:36,240 --> 00:16:40,380
really well it figured out the complex

00:16:38,430 --> 00:16:42,269
pieces of building something gives you

00:16:40,380 --> 00:16:45,060
opportunities to kind of split up packs

00:16:42,269 --> 00:16:48,750
by default kind of lazy load up packages

00:16:45,060 --> 00:16:51,029
and if you go to web pack route it's

00:16:48,750 --> 00:16:52,410
usually a safe bet that you have some

00:16:51,029 --> 00:16:53,819
support for what you're trying to do

00:16:52,410 --> 00:16:56,310
eventually there

00:16:53,819 --> 00:16:58,740
I currently feel that like rolling your

00:16:56,310 --> 00:17:02,910
own web pack or your own Packer system

00:16:58,740 --> 00:17:04,980
it's like a hot stuff to do now don't do

00:17:02,910 --> 00:17:08,130
it it's so worth it take what is there

00:17:04,980 --> 00:17:10,980
and that usually works very well so what

00:17:08,130 --> 00:17:12,449
did I mean by this before for example we

00:17:10,980 --> 00:17:14,640
in our application we have this very

00:17:12,449 --> 00:17:16,290
small simple build stack and well it's

00:17:14,640 --> 00:17:18,689
like the whole the JavaScript files they

00:17:16,290 --> 00:17:20,760
were kind of like in one place and then

00:17:18,689 --> 00:17:22,980
we did our rails application magic with

00:17:20,760 --> 00:17:24,929
the asset pipeline and what it did it

00:17:22,980 --> 00:17:27,120
that just compiled files did like a

00:17:24,929 --> 00:17:30,360
little bits and pieces here and then we

00:17:27,120 --> 00:17:32,610
serve everything down to the app yeah

00:17:30,360 --> 00:17:34,380
well that's not ideal especially as we

00:17:32,610 --> 00:17:36,600
add our view to the stack it was just

00:17:34,380 --> 00:17:38,880
added here and say okay now it's kind of

00:17:36,600 --> 00:17:39,700
part of the whole junk there and will

00:17:38,880 --> 00:17:42,730
kind of be served

00:17:39,700 --> 00:17:43,990
to decline that's okay that's okay but

00:17:42,730 --> 00:17:45,220
it's probably another thing that

00:17:43,990 --> 00:17:46,950
situation that we want to have because

00:17:45,220 --> 00:17:50,169
as we serve we want to have control

00:17:46,950 --> 00:17:51,760
webpack allows us to do this so let's go

00:17:50,169 --> 00:17:53,950
the extra mile and say okay why not

00:17:51,760 --> 00:17:56,169
introduce this build step in parallel

00:17:53,950 --> 00:17:58,059
you can add your own view files use

00:17:56,169 --> 00:18:01,000
webpack build your own build process

00:17:58,059 --> 00:18:03,100
exactly matching what you need and then

00:18:01,000 --> 00:18:05,950
serve it alongside the old JavaScript

00:18:03,100 --> 00:18:09,279
that usually works work quite well the

00:18:05,950 --> 00:18:12,429
important piece here is we look at the

00:18:09,279 --> 00:18:15,690
build process aim for a very very clean

00:18:12,429 --> 00:18:18,100
separation when doing though there's

00:18:15,690 --> 00:18:20,230
there's some times like this neato and I

00:18:18,100 --> 00:18:21,760
did this era myself it was like okay

00:18:20,230 --> 00:18:23,350
there were a lot of Global's coming from

00:18:21,760 --> 00:18:25,240
the old code and as they both were

00:18:23,350 --> 00:18:27,130
loaded on the same page and I said okay

00:18:25,240 --> 00:18:29,440
like the new web pack stuff comes into

00:18:27,130 --> 00:18:32,470
view application was using helper method

00:18:29,440 --> 00:18:34,149
there was available globally try to

00:18:32,470 --> 00:18:35,980
avoid this as much as possible because

00:18:34,149 --> 00:18:37,929
at one point you will diverge to a

00:18:35,980 --> 00:18:39,279
certain degree and then you don't want

00:18:37,929 --> 00:18:40,480
to kind of like update everything in the

00:18:39,279 --> 00:18:43,630
old stack you want to have it in your

00:18:40,480 --> 00:18:45,909
new stack so take this time pull it over

00:18:43,630 --> 00:18:47,590
don't kind of use any legacy code from

00:18:45,909 --> 00:18:51,789
now on cost Wepa goes the way we want to

00:18:47,590 --> 00:18:53,470
go further and also what allows you to

00:18:51,789 --> 00:18:55,570
do is like it's the perfect time for us

00:18:53,470 --> 00:18:57,940
to introduce use single file components

00:18:55,570 --> 00:19:00,730
if you have never heard of use single

00:18:57,940 --> 00:19:02,919
file components it's basically a dot

00:19:00,730 --> 00:19:05,080
view file that gives you access to a

00:19:02,919 --> 00:19:06,490
template the script tag and to style so

00:19:05,080 --> 00:19:09,279
it allow allows you to write everything

00:19:06,490 --> 00:19:12,549
in one file basically that's quite nice

00:19:09,279 --> 00:19:14,740
how does this look like a dot view file

00:19:12,549 --> 00:19:17,440
could look something like this on top we

00:19:14,740 --> 00:19:20,950
define the template what's ok we use the

00:19:17,440 --> 00:19:24,010
templates index here and it's just it

00:19:20,950 --> 00:19:25,929
looks exactly like HTML works this is

00:19:24,010 --> 00:19:27,340
very handy to work with in a bigger

00:19:25,929 --> 00:19:29,799
scale you had like you have all the

00:19:27,340 --> 00:19:32,260
syntax highlighting here and at this

00:19:29,799 --> 00:19:34,059
point even by using webpack and using

00:19:32,260 --> 00:19:35,470
view single file components you would

00:19:34,059 --> 00:19:37,960
even have the possibility to add

00:19:35,470 --> 00:19:39,190
something like your own kind of template

00:19:37,960 --> 00:19:41,470
language if you feel like you want to

00:19:39,190 --> 00:19:43,330
use Park for example just add in a

00:19:41,470 --> 00:19:45,580
reference to the language bug and then

00:19:43,330 --> 00:19:46,990
you can use Park templates right in

00:19:45,580 --> 00:19:49,510
there or whatever you prefer

00:19:46,990 --> 00:19:51,639
the next thing is you just define your

00:19:49,510 --> 00:19:53,080
script on there how it usually works you

00:19:51,639 --> 00:19:53,660
export default and create just the

00:19:53,080 --> 00:19:56,090
object

00:19:53,660 --> 00:19:57,560
and view that view loader running

00:19:56,090 --> 00:19:59,030
through webpack will take care of kind

00:19:57,560 --> 00:20:01,190
of parsing everything off this view file

00:19:59,030 --> 00:20:03,020
for you and put it into one view

00:20:01,190 --> 00:20:04,820
instance that it can then use as

00:20:03,020 --> 00:20:07,520
components or however you want to

00:20:04,820 --> 00:20:09,050
consume it what's the nice thing and in

00:20:07,520 --> 00:20:11,180
this case I just poured it over what we

00:20:09,050 --> 00:20:12,680
had before and this is how it looks and

00:20:11,180 --> 00:20:14,810
I think it looks a little cleaner than

00:20:12,680 --> 00:20:18,440
just kind of everything meshed into the

00:20:14,810 --> 00:20:23,500
page are you ready for the real cool

00:20:18,440 --> 00:20:23,500
stuff first a dramatic drinking pause

00:20:25,510 --> 00:20:32,030
let's build a single page app well

00:20:29,800 --> 00:20:34,940
didn't you say an SP doesn't make sense

00:20:32,030 --> 00:20:37,690
yeah I set this in the beginning and it

00:20:34,940 --> 00:20:40,850
probably is still right

00:20:37,690 --> 00:20:43,220
going full SP still doesn't make sense

00:20:40,850 --> 00:20:45,260
if we poured everything over that's a

00:20:43,220 --> 00:20:48,620
lot of a world of pain I would say and

00:20:45,260 --> 00:20:52,010
probably not worth the time upfront but

00:20:48,620 --> 00:20:53,450
why the treated as different SPS when it

00:20:52,010 --> 00:20:55,580
happily there's a single page

00:20:53,450 --> 00:20:58,700
application running as part of my whole

00:20:55,580 --> 00:21:01,280
application eventually what I could do

00:20:58,700 --> 00:21:03,170
is I can't have different pages and can

00:21:01,280 --> 00:21:06,830
treat all this pages as your own like

00:21:03,170 --> 00:21:09,500
single page applications for example I

00:21:06,830 --> 00:21:11,420
have a subscription page everything on

00:21:09,500 --> 00:21:13,190
subscription wise kind of logically

00:21:11,420 --> 00:21:14,900
works together like all the plans do

00:21:13,190 --> 00:21:16,820
when choose and kind of credit card and

00:21:14,900 --> 00:21:18,440
all the checkout process maybe this is a

00:21:16,820 --> 00:21:21,290
thing that works together that's kind of

00:21:18,440 --> 00:21:24,200
like logically very tightly coupled why

00:21:21,290 --> 00:21:26,000
not move this in a single page app it

00:21:24,200 --> 00:21:27,500
doesn't need to know anything more about

00:21:26,000 --> 00:21:30,170
the application than just like okay this

00:21:27,500 --> 00:21:31,910
is I know how to do subscriptions the

00:21:30,170 --> 00:21:34,250
other thing is apart like in this case

00:21:31,910 --> 00:21:35,900
for us we have build lists of kind of

00:21:34,250 --> 00:21:39,470
people contributing and running from

00:21:35,900 --> 00:21:40,970
github directly they're built so if we

00:21:39,470 --> 00:21:42,770
treat this as a single page app it needs

00:21:40,970 --> 00:21:44,300
to know nothing more than this and and

00:21:42,770 --> 00:21:46,430
so forth on so everything that's kind of

00:21:44,300 --> 00:21:50,840
logically bound together let's treat it

00:21:46,430 --> 00:21:52,850
as its own like little bit and also what

00:21:50,840 --> 00:21:55,910
it allows us right now it allows us to

00:21:52,850 --> 00:21:57,260
go full in on the view ecosystem it has

00:21:55,910 --> 00:21:58,640
a lot of really cool powers for us

00:21:57,260 --> 00:22:00,620
there's a lot of cool tools in the Buick

00:21:58,640 --> 00:22:02,270
assistan like if we want to use a view

00:22:00,620 --> 00:22:04,220
router at one point or so that's nice

00:22:02,270 --> 00:22:07,280
but I would say the most important

00:22:04,220 --> 00:22:08,090
pieces view X or Bewkes or however you

00:22:07,280 --> 00:22:11,450
want to put

00:22:08,090 --> 00:22:14,330
it's like just redux

00:22:11,450 --> 00:22:16,640
architecture state management library I

00:22:14,330 --> 00:22:18,820
guess everybody or who has not heard of

00:22:16,640 --> 00:22:22,220
mooks

00:22:18,820 --> 00:22:25,100
okay cool everybody's using it that's

00:22:22,220 --> 00:22:27,110
amazing so let's see if I can still tell

00:22:25,100 --> 00:22:29,210
you something cool let's see the

00:22:27,110 --> 00:22:33,080
important piece here if we want to go

00:22:29,210 --> 00:22:35,720
full in on the view ecosystem here I

00:22:33,080 --> 00:22:38,420
have a nice block post from get lap for

00:22:35,720 --> 00:22:42,080
them even get lab like they did the same

00:22:38,420 --> 00:22:43,790
journey as we as ketchup and after one

00:22:42,080 --> 00:22:46,040
year to have the block post like this is

00:22:43,790 --> 00:22:48,470
what github learned in one year of kind

00:22:46,040 --> 00:22:50,780
of adopting view and the first big thing

00:22:48,470 --> 00:22:53,150
that jumped out to me was okay just used

00:22:50,780 --> 00:22:55,220
buicks don't go the route of doing

00:22:53,150 --> 00:22:57,470
everything like component based state

00:22:55,220 --> 00:22:59,510
and the application said it's very very

00:22:57,470 --> 00:23:02,060
painful happier state of the application

00:22:59,510 --> 00:23:02,810
split up to multiple pieces and levels

00:23:02,060 --> 00:23:05,870
and everywhere

00:23:02,810 --> 00:23:07,120
that's quite challenging and there's a

00:23:05,870 --> 00:23:10,370
lot of things that can go wrong

00:23:07,120 --> 00:23:14,750
eventually so UX

00:23:10,370 --> 00:23:16,730
out-of-the-box is a nice thing to add so

00:23:14,750 --> 00:23:19,460
let's go back to a cool build process

00:23:16,730 --> 00:23:21,560
that we did before and now we're about

00:23:19,460 --> 00:23:23,210
ready to create this kind of clean entry

00:23:21,560 --> 00:23:24,170
layer as we said we want to build

00:23:23,210 --> 00:23:27,680
different SPS

00:23:24,170 --> 00:23:30,320
so what we will do now is we define what

00:23:27,680 --> 00:23:32,210
Patriot on you go either one package

00:23:30,320 --> 00:23:34,040
from the web pack build or you get one

00:23:32,210 --> 00:23:35,630
from the old one and that's what already

00:23:34,040 --> 00:23:37,280
pays off to why we didn't poured

00:23:35,630 --> 00:23:39,350
anything from the legacy base or used

00:23:37,280 --> 00:23:41,210
anything from a global code base out

00:23:39,350 --> 00:23:42,710
there upfront because we now have this

00:23:41,210 --> 00:23:45,500
clean layer and it allows us to move

00:23:42,710 --> 00:23:47,330
forward in a faster way and we have

00:23:45,500 --> 00:23:48,980
pages that run really on their own in

00:23:47,330 --> 00:23:51,290
the new complete new stack where we have

00:23:48,980 --> 00:23:56,030
everything under view and that's quite a

00:23:51,290 --> 00:23:58,190
good experience and yeah that's usually

00:23:56,030 --> 00:24:00,560
a good way to go and the next thing that

00:23:58,190 --> 00:24:03,140
is we could do by using webpack in this

00:24:00,560 --> 00:24:05,930
process we could even start building

00:24:03,140 --> 00:24:07,970
multiple packs along the way treat your

00:24:05,930 --> 00:24:10,100
SPS as their own little bits and pieces

00:24:07,970 --> 00:24:12,050
and the dependencies split it up in

00:24:10,100 --> 00:24:14,660
multiple files and load one of them on

00:24:12,050 --> 00:24:16,640
the page that make sense maybe this

00:24:14,660 --> 00:24:17,270
reduces the footprint of your JavaScript

00:24:16,640 --> 00:24:19,340
on the page

00:24:17,270 --> 00:24:21,270
enormous Lee gives you a lot of control

00:24:19,340 --> 00:24:27,030
and removes a lot of side effects that

00:24:21,270 --> 00:24:30,000
sometimes happen so what did we do for

00:24:27,030 --> 00:24:32,460
us was the the entry point again was

00:24:30,000 --> 00:24:34,980
very important to draw a very clean line

00:24:32,460 --> 00:24:36,540
what view will take over and what the

00:24:34,980 --> 00:24:39,110
old application or in this case come

00:24:36,540 --> 00:24:41,340
from the back end what we did here is we

00:24:39,110 --> 00:24:43,320
created a helper method that was called

00:24:41,340 --> 00:24:45,660
like view app and we'll pass it in for

00:24:43,320 --> 00:24:47,280
example users the method under the hood

00:24:45,660 --> 00:24:48,840
what it does is like it says okay I need

00:24:47,280 --> 00:24:50,700
to load something your users so I know

00:24:48,840 --> 00:24:52,170
which pack I need to load and it will

00:24:50,700 --> 00:24:54,510
inject it on the page for you when you

00:24:52,170 --> 00:24:56,430
render the page but that's all it does

00:24:54,510 --> 00:25:00,030
is that creates this clear clean entry

00:24:56,430 --> 00:25:02,280
point if you're more familiar with PHP

00:25:00,030 --> 00:25:03,840
in this case it's a slim template and

00:25:02,280 --> 00:25:05,730
peach bead could look something like

00:25:03,840 --> 00:25:07,980
this like the important pieces just

00:25:05,730 --> 00:25:12,330
create this very clean layer or a second

00:25:07,980 --> 00:25:15,000
now the view app will take over so what

00:25:12,330 --> 00:25:16,680
this allows us for example users will

00:25:15,000 --> 00:25:21,540
automatically load the users pack for us

00:25:16,680 --> 00:25:23,100
and under the hood it's like not a lot

00:25:21,540 --> 00:25:25,710
of magic it will just print out

00:25:23,100 --> 00:25:27,270
something like this you app HTML or so

00:25:25,710 --> 00:25:29,010
however you want to build it in one way

00:25:27,270 --> 00:25:29,730
but that's usually a very clean layer

00:25:29,010 --> 00:25:32,340
that's okay

00:25:29,730 --> 00:25:36,450
it helps you separate it in a very easy

00:25:32,340 --> 00:25:40,650
way the next challenge was again we want

00:25:36,450 --> 00:25:42,330
to pass in data to our instance so the

00:25:40,650 --> 00:25:43,680
other important piece is we have a big

00:25:42,330 --> 00:25:46,110
back-end system there's all the data

00:25:43,680 --> 00:25:47,940
there and maybe we don't have the time

00:25:46,110 --> 00:25:50,400
to build an API endpoint for everything

00:25:47,940 --> 00:25:52,920
so that's a very good start to say ok

00:25:50,400 --> 00:25:54,240
like let's just add everything that we

00:25:52,920 --> 00:25:55,920
have on the page to the view instance

00:25:54,240 --> 00:25:58,530
already if we have like the whole

00:25:55,920 --> 00:25:59,910
collection of our users just pass it in

00:25:58,530 --> 00:26:02,700
because that's the one we need on the

00:25:59,910 --> 00:26:04,320
page and we reduce again the time that

00:26:02,700 --> 00:26:06,270
we need to load the data afterwards we

00:26:04,320 --> 00:26:07,560
have it on the page ready the other

00:26:06,270 --> 00:26:09,420
thing if we want to pass in something

00:26:07,560 --> 00:26:11,100
like a role just pass it in you have

00:26:09,420 --> 00:26:13,260
another page you don't need to go like

00:26:11,100 --> 00:26:15,360
crazy and pull everything out it's there

00:26:13,260 --> 00:26:17,220
for you and magically what it does for

00:26:15,360 --> 00:26:19,380
us it can it starts creating like those

00:26:17,220 --> 00:26:22,320
data attributes and passes everything in

00:26:19,380 --> 00:26:25,020
that we want to consume so what we need

00:26:22,320 --> 00:26:27,360
to do now is basically we want to

00:26:25,020 --> 00:26:28,590
Mountain View we want to add our store

00:26:27,360 --> 00:26:30,150
because we learned ok when a

00:26:28,590 --> 00:26:32,160
steady-state management should all be

00:26:30,150 --> 00:26:34,200
done maybe X and then we pass in the

00:26:32,160 --> 00:26:35,240
data that we created to our view

00:26:34,200 --> 00:26:38,909
application

00:26:35,240 --> 00:26:40,919
so bear with me that's maybe a little

00:26:38,909 --> 00:26:42,059
tricky yourself but that's like how we

00:26:40,919 --> 00:26:44,130
try to figure out so if you have any

00:26:42,059 --> 00:26:46,710
questions feel free to ask at one point

00:26:44,130 --> 00:26:49,169
or afterwards so what we did is we

00:26:46,710 --> 00:26:51,630
created ourself a little helper function

00:26:49,169 --> 00:26:53,159
a little helper kind of library that

00:26:51,630 --> 00:26:55,649
allows us to mount everything on the

00:26:53,159 --> 00:26:58,590
page in a very simple way so what we try

00:26:55,649 --> 00:27:00,840
to do is we just import view X and in

00:26:58,590 --> 00:27:02,940
this case just leaves low - for entries

00:27:00,840 --> 00:27:05,100
and merge and the important pieces will

00:27:02,940 --> 00:27:06,929
create an app function the app function

00:27:05,100 --> 00:27:08,669
should then take care of like loading

00:27:06,929 --> 00:27:10,590
everything on the page and automatically

00:27:08,669 --> 00:27:12,480
kind of do the right things for us to

00:27:10,590 --> 00:27:14,669
prepare it in a consistent way because

00:27:12,480 --> 00:27:15,899
the less you have to repeat yourself the

00:27:14,669 --> 00:27:18,690
easier it is to kind of avoid any

00:27:15,899 --> 00:27:20,100
mistakes along the path so the next

00:27:18,690 --> 00:27:21,899
thing is to do we want to use the view X

00:27:20,100 --> 00:27:24,480
anyway so let's just edit to view in

00:27:21,899 --> 00:27:26,820
this case and the next thing is we also

00:27:24,480 --> 00:27:29,250
know okay this is the view app element

00:27:26,820 --> 00:27:30,840
that was generated by our helper so we

00:27:29,250 --> 00:27:32,460
exactly know how the entry point will

00:27:30,840 --> 00:27:34,320
look like so just create the node

00:27:32,460 --> 00:27:38,789
reference and this is how it will look

00:27:34,320 --> 00:27:40,799
on the page let's go for it that's also

00:27:38,789 --> 00:27:42,929
a right place to put in maybe a default

00:27:40,799 --> 00:27:44,340
store if you have like some automatic

00:27:42,929 --> 00:27:48,570
methods that you want to have available

00:27:44,340 --> 00:27:50,130
on every page like we had some static

00:27:48,570 --> 00:27:52,830
values that were passed on like

00:27:50,130 --> 00:27:55,320
depending on some languages or some user

00:27:52,830 --> 00:27:56,940
attributes we don't want to introduce it

00:27:55,320 --> 00:27:58,740
in every single store file that we're

00:27:56,940 --> 00:28:00,600
doing we just use the app function to

00:27:58,740 --> 00:28:02,429
kind of like build it for us already say

00:28:00,600 --> 00:28:03,990
ok this will be available in every store

00:28:02,429 --> 00:28:05,940
on every single page app anyway and

00:28:03,990 --> 00:28:07,889
that's how we do it and the next thing

00:28:05,940 --> 00:28:10,110
is with just the custom store that we

00:28:07,889 --> 00:28:12,570
will pass in we'll just be merged with

00:28:10,110 --> 00:28:15,360
the default store in worst case we don't

00:28:12,570 --> 00:28:17,519
need to create a new store on a single

00:28:15,360 --> 00:28:19,710
page app because it's very simple but we

00:28:17,519 --> 00:28:21,330
maybe want to have access to the Bally's

00:28:19,710 --> 00:28:23,929
that we have in every page the default

00:28:21,330 --> 00:28:25,679
store comes for us prepared already

00:28:23,929 --> 00:28:27,600
let's go for it

00:28:25,679 --> 00:28:29,639
the next thing is we want to pass in all

00:28:27,600 --> 00:28:31,260
the data and in this case we want to be

00:28:29,639 --> 00:28:33,090
a little smarter we want to do a little

00:28:31,260 --> 00:28:35,340
bit more about - maybe I'm point to have

00:28:33,090 --> 00:28:39,720
a lot of control over everything so we

00:28:35,340 --> 00:28:41,940
try to use props yeah what we do again

00:28:39,720 --> 00:28:43,320
we take the node we render over all the

00:28:41,940 --> 00:28:45,840
data set like all the values in there

00:28:43,320 --> 00:28:47,850
and we try to parse what's able to be

00:28:45,840 --> 00:28:48,370
parsis jason and the other thing we just

00:28:47,850 --> 00:28:50,770
try to pass

00:28:48,370 --> 00:28:52,960
sit down and create kind of a props

00:28:50,770 --> 00:28:55,390
object that will look very much like how

00:28:52,960 --> 00:28:58,900
you would pass some props if you are

00:28:55,390 --> 00:28:59,590
familiar maybe with view one there was

00:28:58,900 --> 00:29:02,230
like this

00:28:59,590 --> 00:29:05,020
I think props data property at one point

00:29:02,230 --> 00:29:07,840
that was Mason mostly thought to allow

00:29:05,020 --> 00:29:09,790
unit testing in a very clean way but it

00:29:07,840 --> 00:29:12,340
was very easy to kind of abuse it to

00:29:09,790 --> 00:29:14,740
passing data using props data and made

00:29:12,340 --> 00:29:16,480
something simpler in this case we cannot

00:29:14,740 --> 00:29:18,610
do this any longer that Kazi was removed

00:29:16,480 --> 00:29:20,890
from view too so he only can't pass

00:29:18,610 --> 00:29:23,500
props from a root instance to a

00:29:20,890 --> 00:29:25,390
component and this place we create our

00:29:23,500 --> 00:29:30,190
prop subject to go this route to follow

00:29:25,390 --> 00:29:32,290
what view wants us to do anyway and now

00:29:30,190 --> 00:29:34,179
it's an important piece is we treat our

00:29:32,290 --> 00:29:36,429
view instance we call it app in this

00:29:34,179 --> 00:29:37,750
case and we're passing the store

00:29:36,429 --> 00:29:40,330
directly they would want to use on a

00:29:37,750 --> 00:29:42,340
page and we try to use a render function

00:29:40,330 --> 00:29:44,170
here just after it's like very simple

00:29:42,340 --> 00:29:46,150
way of adding the page the app to the

00:29:44,170 --> 00:29:48,070
page and the important piece here is

00:29:46,150 --> 00:29:49,929
that's where we pass in the component

00:29:48,070 --> 00:29:51,429
that we was the first entry point that

00:29:49,929 --> 00:29:53,559
our app should load eventually and

00:29:51,429 --> 00:29:55,240
passing the props to the component so

00:29:53,559 --> 00:29:57,490
that makes it quite nicely to consume

00:29:55,240 --> 00:29:59,350
everything and here we take like the

00:29:57,490 --> 00:30:02,500
view instance and mount it to note that

00:29:59,350 --> 00:30:04,900
we have reference on a page seems like a

00:30:02,500 --> 00:30:07,030
lot of magic it's quite simple actually

00:30:04,900 --> 00:30:09,540
and kind of it just allows you to do

00:30:07,030 --> 00:30:12,160
everything in a very consistent way

00:30:09,540 --> 00:30:14,320
so how would for example our entry point

00:30:12,160 --> 00:30:16,780
in our pack file eventually look like

00:30:14,320 --> 00:30:19,240
it's just as easy as we import the app

00:30:16,780 --> 00:30:22,000
library we import our custom store for

00:30:19,240 --> 00:30:23,830
example for users and we import our main

00:30:22,000 --> 00:30:25,809
view instance that we're going to use

00:30:23,830 --> 00:30:27,730
what's the users index file or how

00:30:25,809 --> 00:30:29,590
you're going to call it and all we do is

00:30:27,730 --> 00:30:32,230
kind of would pass an app say users and

00:30:29,590 --> 00:30:35,080
users and pass in the store directly so

00:30:32,230 --> 00:30:37,750
that's nice and our view file could look

00:30:35,080 --> 00:30:40,000
as simple as this or say okay we a loop

00:30:37,750 --> 00:30:42,910
of all the users the important piece

00:30:40,000 --> 00:30:45,520
here is everything we pass before on our

00:30:42,910 --> 00:30:47,559
view app in this case we can consume it

00:30:45,520 --> 00:30:50,980
as props directly so this allows you to

00:30:47,559 --> 00:30:52,660
even use like validation on it or ass

00:30:50,980 --> 00:30:53,740
and default values if something is not

00:30:52,660 --> 00:30:55,870
there so it gives you a lot of control

00:30:53,740 --> 00:30:58,770
over what's going on and just makes CPI

00:30:55,870 --> 00:31:01,770
consistent and very easy to maintain

00:30:58,770 --> 00:31:01,770
yeah

00:31:01,880 --> 00:31:06,890
the next thing is if your work we stored

00:31:05,540 --> 00:31:09,650
there's like one thing I want to put in

00:31:06,890 --> 00:31:11,690
cut like I saw it at some kind of

00:31:09,650 --> 00:31:13,520
project that a review if you don't use

00:31:11,690 --> 00:31:16,130
gathers yet I can highly recommend to

00:31:13,520 --> 00:31:17,990
use gathers as much as possible there's

00:31:16,130 --> 00:31:19,280
like this way of consuming a store

00:31:17,990 --> 00:31:21,650
directly or use it as a computer

00:31:19,280 --> 00:31:23,660
property in this case I would highly

00:31:21,650 --> 00:31:25,970
recommend to use this store add gathers

00:31:23,660 --> 00:31:28,309
to it as much as possible and then also

00:31:25,970 --> 00:31:30,470
already think ahead and try to build

00:31:28,309 --> 00:31:32,120
those getter system for you as clean as

00:31:30,470 --> 00:31:33,980
possible because it was that before

00:31:32,120 --> 00:31:35,270
whenever you have to do a lot of things

00:31:33,980 --> 00:31:37,970
manually there's a lot of things that go

00:31:35,270 --> 00:31:40,670
can go wrong or you have to keep a lot

00:31:37,970 --> 00:31:43,550
of things in mind here's it for example

00:31:40,670 --> 00:31:45,290
what we try to do is if we have a lot of

00:31:43,550 --> 00:31:46,820
gathers and this is a very simple

00:31:45,290 --> 00:31:47,929
example but like if your store is like

00:31:46,820 --> 00:31:49,280
really large with a ton of different

00:31:47,929 --> 00:31:52,160
stay it's gonna come from different

00:31:49,280 --> 00:31:54,470
modules even what we tried to do is we

00:31:52,160 --> 00:31:56,600
created something like in turtle gathers

00:31:54,470 --> 00:31:58,340
that were just kind of prefixed with an

00:31:56,600 --> 00:32:00,679
underscore that we say they are not

00:31:58,340 --> 00:32:02,929
thought to be consumed from the outside

00:32:00,679 --> 00:32:04,880
but we defined one that's called for

00:32:02,929 --> 00:32:06,320
example curent that has like all the

00:32:04,880 --> 00:32:08,390
important bits and pieces in there and

00:32:06,320 --> 00:32:10,790
shares it for me so this allows me

00:32:08,390 --> 00:32:12,380
basically on our component side we can

00:32:10,790 --> 00:32:14,240
just map over to get us and pull the

00:32:12,380 --> 00:32:16,790
current one in and this gives you also a

00:32:14,240 --> 00:32:19,790
very clean API of kind of working with

00:32:16,790 --> 00:32:23,390
even more complex stores in a very nice

00:32:19,790 --> 00:32:25,160
way I'm not sure how familiar

00:32:23,390 --> 00:32:27,170
everybody's with computer properties and

00:32:25,160 --> 00:32:29,059
what's their big benefit but the other

00:32:27,170 --> 00:32:30,800
benefit you get with it Gators are

00:32:29,059 --> 00:32:33,110
internally also treated as computer

00:32:30,800 --> 00:32:35,150
properties so that said if you have your

00:32:33,110 --> 00:32:37,130
current one and something in there

00:32:35,150 --> 00:32:39,679
changes it will automatically reevaluate

00:32:37,130 --> 00:32:42,440
but if you have a more complex getter

00:32:39,679 --> 00:32:44,270
function in there like these even is is

00:32:42,440 --> 00:32:46,460
probably a simple operation because we

00:32:44,270 --> 00:32:49,910
just slice an array but what we try to

00:32:46,460 --> 00:32:51,860
do is we leverage the kind of the output

00:32:49,910 --> 00:32:54,170
of the computer factory the cached value

00:32:51,860 --> 00:32:55,970
in our Gator that we send down to client

00:32:54,170 --> 00:32:57,950
and for more complex operations this

00:32:55,970 --> 00:32:59,330
allows you also to kind of prevent some

00:32:57,950 --> 00:33:02,600
re-rendering or some kind of

00:32:59,330 --> 00:33:04,700
reprocessing in a very smart way and

00:33:02,600 --> 00:33:06,470
then I would say the important piece is

00:33:04,700 --> 00:33:09,890
if we have everything running that's

00:33:06,470 --> 00:33:11,480
when you can get ready to scale as we

00:33:09,890 --> 00:33:13,450
said there can be multiple single page

00:33:11,480 --> 00:33:15,190
apps in your application

00:33:13,450 --> 00:33:16,630
building and clean wait let's say if we

00:33:15,190 --> 00:33:18,970
have like three different packs that we

00:33:16,630 --> 00:33:21,220
end up doing if maybe you want to

00:33:18,970 --> 00:33:22,570
consume some of them's multiple pages if

00:33:21,220 --> 00:33:25,240
we're is something that's like rendering

00:33:22,570 --> 00:33:27,490
lists what prevents me from using this

00:33:25,240 --> 00:33:29,080
render list function on a user list page

00:33:27,490 --> 00:33:30,909
or so and maybe also in the admin

00:33:29,080 --> 00:33:33,580
interface to render like all the users

00:33:30,909 --> 00:33:35,230
for the admin interface be smart about

00:33:33,580 --> 00:33:37,450
you were using what you've built or so

00:33:35,230 --> 00:33:39,399
and using view and all the single page

00:33:37,450 --> 00:33:42,039
apps and those extra packs or so allows

00:33:39,399 --> 00:33:45,850
you to really kind of be very fast and

00:33:42,039 --> 00:33:47,679
quicker than updating things the

00:33:45,850 --> 00:33:49,510
important piece there is prepare some

00:33:47,679 --> 00:33:51,669
scaffolding and generate as as much as

00:33:49,510 --> 00:33:55,299
possible if you do a lot of things and

00:33:51,669 --> 00:33:57,340
reproduce what we did for example we

00:33:55,299 --> 00:33:59,049
created a generator and rails or just

00:33:57,340 --> 00:34:00,909
say okay generate an you view app called

00:33:59,049 --> 00:34:02,590
settings maybe and what it does for us

00:34:00,909 --> 00:34:04,779
it creates the pack filed the app file

00:34:02,590 --> 00:34:07,059
and a spec file for testing already with

00:34:04,779 --> 00:34:09,639
some boilerplate code filled in this

00:34:07,059 --> 00:34:12,190
just allows us to get a very clean entry

00:34:09,639 --> 00:34:13,839
point for every new page we do and if

00:34:12,190 --> 00:34:15,790
you scale your team if you have multiple

00:34:13,839 --> 00:34:18,159
people working on something this allows

00:34:15,790 --> 00:34:20,290
you to be very efficient and will

00:34:18,159 --> 00:34:22,300
prevent kind of failure or different

00:34:20,290 --> 00:34:26,589
approaches at one point so this is very

00:34:22,300 --> 00:34:28,480
clean also what I can only highly highly

00:34:26,589 --> 00:34:29,950
recommend is everything that you do try

00:34:28,480 --> 00:34:32,980
to back it up with a lot of solid

00:34:29,950 --> 00:34:35,260
patterns and specs ideally we don't want

00:34:32,980 --> 00:34:38,619
to five things breaking for us along the

00:34:35,260 --> 00:34:40,569
way and if we follow this and we kind of

00:34:38,619 --> 00:34:41,740
went through this process and we're now

00:34:40,569 --> 00:34:42,970
at a point where it's say like we have a

00:34:41,740 --> 00:34:44,919
lot of really good times ahead

00:34:42,970 --> 00:34:47,109
we're really fast now kind of was

00:34:44,919 --> 00:34:48,790
building new features whereas paralysing

00:34:47,109 --> 00:34:50,710
was having multiple people working on

00:34:48,790 --> 00:34:52,389
different features at the same time but

00:34:50,710 --> 00:34:54,159
yet the code underneath is all usable

00:34:52,389 --> 00:34:56,710
and everybody knows how the other piece

00:34:54,159 --> 00:34:59,770
pieces work so that's really nice for us

00:34:56,710 --> 00:35:02,020
and the big question in the beginning

00:34:59,770 --> 00:35:04,240
for me was always why do want to add

00:35:02,020 --> 00:35:06,550
something to the stack and this is the

00:35:04,240 --> 00:35:08,020
things why it pays off for example we

00:35:06,550 --> 00:35:10,300
had a lot of acceptance tests before

00:35:08,020 --> 00:35:11,560
they were taking a long time and this

00:35:10,300 --> 00:35:12,880
was like the amount that we need to

00:35:11,560 --> 00:35:13,359
verify that everything was running on

00:35:12,880 --> 00:35:14,859
the page

00:35:13,359 --> 00:35:16,210
because you had no cleaner way of

00:35:14,859 --> 00:35:18,400
testing everything running with

00:35:16,210 --> 00:35:20,290
CoffeeScript and jQuery and you had to

00:35:18,400 --> 00:35:21,940
verify like the simple pieces with

00:35:20,290 --> 00:35:22,839
acceptance tests that's the only thing

00:35:21,940 --> 00:35:25,810
that gave you assurance

00:35:22,839 --> 00:35:26,890
now using view we can do way more things

00:35:25,810 --> 00:35:28,690
in unit tests

00:35:26,890 --> 00:35:30,700
and this shaped down a lot of time from

00:35:28,690 --> 00:35:33,720
our test sheet in being able to ship

00:35:30,700 --> 00:35:37,330
faster and having less like error-prone

00:35:33,720 --> 00:35:39,100
eres running into pipelines the other

00:35:37,330 --> 00:35:41,710
thing also by during this process down

00:35:39,100 --> 00:35:43,030
Page Speed basically we were able to

00:35:41,710 --> 00:35:45,100
kind of have two initially paid

00:35:43,030 --> 00:35:47,200
rendering on one of our heavier pages

00:35:45,100 --> 00:35:49,690
with a very simple stack and kind of

00:35:47,200 --> 00:35:52,720
moving this way down from two seconds to

00:35:49,690 --> 00:35:55,540
kind of 0.25 seconds so that's a huge

00:35:52,720 --> 00:35:57,910
win for just like going way down up for

00:35:55,540 --> 00:36:01,030
clean kind of architecture and using

00:35:57,910 --> 00:36:03,040
this and that's it before it also allows

00:36:01,030 --> 00:36:04,450
you to kind of scale your team to work

00:36:03,040 --> 00:36:06,250
on different features at the same time

00:36:04,450 --> 00:36:08,230
everybody can work on its own and

00:36:06,250 --> 00:36:09,850
there's no way of like you're breaking

00:36:08,230 --> 00:36:11,320
somebody's else's code or somebody

00:36:09,850 --> 00:36:14,160
else's pages so it gives you a very

00:36:11,320 --> 00:36:16,450
clean way of working on your application

00:36:14,160 --> 00:36:18,910
the good and important piece for me is

00:36:16,450 --> 00:36:21,970
you made it all very enjoyable going

00:36:18,910 --> 00:36:24,820
down the route and why because basically

00:36:21,970 --> 00:36:28,260
view is for me JavaScript just done

00:36:24,820 --> 00:36:32,139
right thanks

00:36:28,260 --> 00:36:32,139

YouTube URL: https://www.youtube.com/watch?v=Fwj5YYrufns


