Title: Simon Swain: Minimum Viable Warfare - Lightning Talk - JSConf.Asia 2015
Publication date: 2015-12-22
Playlist: JSConf.Asia 2015
Description: 
	JSConf.Asia - Red Dot Design Museum, Singapore - 20 November 2015.

Source: http://2015.jsconf.asia
More Info: http://coldwar.io

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:06,259 --> 00:00:11,120
all right five minutes for Simon all

00:00:10,380 --> 00:00:13,440
right

00:00:11,120 --> 00:00:15,210
this animation is called minimum viable

00:00:13,440 --> 00:00:16,830
warfare at the bottom we have a base it

00:00:15,210 --> 00:00:18,539
can fire a single shot in its defense

00:00:16,830 --> 00:00:20,400
raining down from the sky and the stars

00:00:18,539 --> 00:00:22,560
their sole intent is to destroy the base

00:00:20,400 --> 00:00:23,939
this is it this is the foundation of

00:00:22,560 --> 00:00:25,039
some kind of game of simulation but I've

00:00:23,939 --> 00:00:27,570
only got five minutes

00:00:25,039 --> 00:00:29,130
so let's tweak the parameters here the

00:00:27,570 --> 00:00:31,289
scar can fire two missiles at a time to

00:00:29,130 --> 00:00:33,300
try and destroy the base this is wings

00:00:31,289 --> 00:00:35,130
heavily in the skies favor it's gonna

00:00:33,300 --> 00:00:37,469
win quickly every time

00:00:35,130 --> 00:00:39,120
so let's tweak again this is more like

00:00:37,469 --> 00:00:40,410
it here the bases can fire as many shots

00:00:39,120 --> 00:00:41,969
as they want to try and defend

00:00:40,410 --> 00:00:44,100
themselves from their missiles raining

00:00:41,969 --> 00:00:47,910
down from the sky and impregnable

00:00:44,100 --> 00:00:49,590
defense and then it's just a matter of

00:00:47,910 --> 00:00:52,379
time but I have not got much time so

00:00:49,590 --> 00:00:53,969
let's tweak again full blaze everybody

00:00:52,379 --> 00:00:55,649
can fire as many things as they want to

00:00:53,969 --> 00:00:57,600
try and defeat their enemy it's amazing

00:00:55,649 --> 00:01:00,090
it looks like fireworks but the astute

00:00:57,600 --> 00:01:02,160
JavaScript will observe the browser is

00:01:00,090 --> 00:01:03,899
starting to Jiang what's the jig is

00:01:02,160 --> 00:01:06,150
nearly tweeted 16 and you should own our

00:01:03,899 --> 00:01:07,439
water tankers by now tanking is when we

00:01:06,150 --> 00:01:09,570
ask the browser to do too many things

00:01:07,439 --> 00:01:11,340
and too little time everything gets a

00:01:09,570 --> 00:01:12,840
little bit shaky let's see some

00:01:11,340 --> 00:01:14,760
Diagnostics there are two things going

00:01:12,840 --> 00:01:16,680
on we have an update phase and a paint

00:01:14,760 --> 00:01:18,210
phase in the update phase we do all the

00:01:16,680 --> 00:01:20,280
mess required to work out where our

00:01:18,210 --> 00:01:21,720
things should be on the screen and the

00:01:20,280 --> 00:01:24,450
paint waves we draw them to the screen

00:01:21,720 --> 00:01:26,640
to achieve smooth animation we need to

00:01:24,450 --> 00:01:28,380
do this 60 times a second this gives us

00:01:26,640 --> 00:01:30,630
a time budget of approximately 16

00:01:28,380 --> 00:01:32,520
milliseconds to do all of our work if we

00:01:30,630 --> 00:01:34,890
exceed this time budget the Diagnostics

00:01:32,520 --> 00:01:35,939
go red and the browser starts to jam but

00:01:34,890 --> 00:01:37,650
not all hope is lost

00:01:35,939 --> 00:01:39,869
we're getting nearly 2000 things on the

00:01:37,650 --> 00:01:41,280
screen 60 times a second before the

00:01:39,869 --> 00:01:43,470
browser even starts the breaker switch

00:01:41,280 --> 00:01:45,450
in more detail this is what we're doing

00:01:43,470 --> 00:01:47,820
forever and ever we go update painting

00:01:45,450 --> 00:01:49,530
this is called the game loop but do not

00:01:47,820 --> 00:01:51,869
do it like this because you will burn

00:01:49,530 --> 00:01:53,790
out your CPU so instead we use window

00:01:51,869 --> 00:01:55,350
don't requestanimationframe here we ask

00:01:53,790 --> 00:01:56,909
the rounds of the court us when it's

00:01:55,350 --> 00:01:59,100
ready to draw a frame on the screen we

00:01:56,909 --> 00:02:01,200
update we paint and the process repeats

00:01:59,100 --> 00:02:03,299
in an ideal world the browser will call

00:02:01,200 --> 00:02:05,180
us 60 times a second and we will get

00:02:03,299 --> 00:02:07,100
smooth animations

00:02:05,180 --> 00:02:08,840
we have a set of variables we use to

00:02:07,100 --> 00:02:10,250
represent the universe we have created

00:02:08,840 --> 00:02:11,630
we update these variables according to

00:02:10,250 --> 00:02:13,280
some rules we use the values of the

00:02:11,630 --> 00:02:15,080
variables to tell us where the toss up

00:02:13,280 --> 00:02:17,240
on the screen with clear I painted

00:02:15,080 --> 00:02:19,550
surface we draw stuff to it easy job

00:02:17,240 --> 00:02:21,620
done but real life is never easy there's

00:02:19,550 --> 00:02:22,850
no guarantee the browser will call us 60

00:02:21,620 --> 00:02:24,230
times a second to do there's other

00:02:22,850 --> 00:02:25,940
things to do and we are not that

00:02:24,230 --> 00:02:27,410
important so we have to work out the

00:02:25,940 --> 00:02:29,180
time difference between now and the last

00:02:27,410 --> 00:02:30,800
time the browser called us and use that

00:02:29,180 --> 00:02:32,150
to create a scaling factor for all of

00:02:30,800 --> 00:02:34,130
our physics if we do this right along

00:02:32,150 --> 00:02:36,710
the edge cases are covered here we will

00:02:34,130 --> 00:02:38,540
get smooth animation when it's time to

00:02:36,710 --> 00:02:40,250
draw a mutation our 5 canvas we have an

00:02:38,540 --> 00:02:41,630
HTML tag we get a reference to they take

00:02:40,250 --> 00:02:42,920
from the Dom we get a drawing context

00:02:41,630 --> 00:02:44,360
from that reference we call methods or

00:02:42,920 --> 00:02:46,510
make context to draw stuff in your

00:02:44,360 --> 00:02:49,580
canvas in your browser on your screen

00:02:46,510 --> 00:02:51,140
but to truly understand html5 canvas we

00:02:49,580 --> 00:02:53,630
must understand how a computer display

00:02:51,140 --> 00:02:55,580
works back when the first Star Wars

00:02:53,630 --> 00:02:56,930
movie came out computer displays were

00:02:55,580 --> 00:02:58,130
made out of a glass tube when in the

00:02:56,930 --> 00:02:59,780
back glass roof was larger rectangular

00:02:58,130 --> 00:03:03,340
on the interior surface of a cloud

00:02:59,780 --> 00:03:05,630
rectangle was painted a token phosphor

00:03:03,340 --> 00:03:07,100
at the rear end of the tube there was an

00:03:05,630 --> 00:03:08,390
electron gun it would fire a stream of

00:03:07,100 --> 00:03:09,560
electrons down the tube towards the

00:03:08,390 --> 00:03:10,820
phosphor coated surface when the

00:03:09,560 --> 00:03:12,650
electrons strike the fossil they will

00:03:10,820 --> 00:03:14,390
cause it to glow temporarily red around

00:03:12,650 --> 00:03:15,800
the stream of electrons was a set of

00:03:14,390 --> 00:03:17,540
maintenance these magnets can cause the

00:03:15,800 --> 00:03:19,550
beam to be deflected to any location on

00:03:17,540 --> 00:03:20,690
the front of the glass tube now if you

00:03:19,550 --> 00:03:22,040
have a region of memory and you

00:03:20,690 --> 00:03:23,450
sequentially read the values of their

00:03:22,040 --> 00:03:24,920
bits from that memory news the bellies

00:03:23,450 --> 00:03:26,450
of those fits to modulate the electron

00:03:24,920 --> 00:03:28,130
beam on and off this is Canada crossing

00:03:26,450 --> 00:03:29,840
down the front of the glass tube you can

00:03:28,130 --> 00:03:31,190
go as a representation of Aviles helping

00:03:29,840 --> 00:03:32,900
those fists to be painted to the front

00:03:31,190 --> 00:03:35,390
of your screen this is how a bitmap

00:03:32,900 --> 00:03:36,769
display works we call this a raster scan

00:03:35,390 --> 00:03:38,930
display the foundation of all could be

00:03:36,769 --> 00:03:40,850
the displays in use today but there is

00:03:38,930 --> 00:03:42,860
another way to do it back in the dawn of

00:03:40,850 --> 00:03:44,840
continued back in the dawn of computing

00:03:42,860 --> 00:03:46,370
history computers a file is powerful you

00:03:44,840 --> 00:03:47,330
would implement your display in hardware

00:03:46,370 --> 00:03:48,920
you would see the list of foreign

00:03:47,330 --> 00:03:50,870
instructions to your display circuitry

00:03:48,920 --> 00:03:52,489
these instructions will cause a Lincoln

00:03:50,870 --> 00:03:53,510
beam to be deflected around of the front

00:03:52,489 --> 00:03:55,010
of the screen much like you would

00:03:53,510 --> 00:03:57,170
reliance on a piece of paper with a

00:03:55,010 --> 00:03:59,000
pencil this technique is called Victor

00:03:57,170 --> 00:04:00,350
display Victor the splicer one amazing

00:03:59,000 --> 00:04:01,640
properties simply by multiplying the

00:04:00,350 --> 00:04:02,780
intensity of the magnet set the flick

00:04:01,640 --> 00:04:04,670
the beam as I scanned it around the

00:04:02,780 --> 00:04:06,049
front of the classroom you can cause the

00:04:04,670 --> 00:04:07,700
image to be scaled up and down with

00:04:06,049 --> 00:04:09,410
incredible ease just for modifying the

00:04:07,700 --> 00:04:10,580
value of one is 2 bytes of memory to do

00:04:09,410 --> 00:04:12,230
the same thing with a raster scan

00:04:10,580 --> 00:04:14,209
display requires of art of convex nest

00:04:12,230 --> 00:04:15,709
you have to calculate the position of

00:04:14,209 --> 00:04:17,540
every pixel you want to draw on the

00:04:15,709 --> 00:04:18,560
screen tragically the technique of

00:04:17,540 --> 00:04:21,079
victor displays be

00:04:18,560 --> 00:04:22,520
lost to the sands of time but html5

00:04:21,079 --> 00:04:24,680
canvas gives us the best of both worlds

00:04:22,520 --> 00:04:26,419
we can rotate the scale and translate as

00:04:24,680 --> 00:04:28,400
was incredibly safe it Nets around the

00:04:26,419 --> 00:04:30,530
screen with abandon and if you look

00:04:28,400 --> 00:04:32,120
closely you will see vestigial move two

00:04:30,530 --> 00:04:33,770
lines you can I said either your direct

00:04:32,120 --> 00:04:35,690
descendants of the original instructions

00:04:33,770 --> 00:04:38,419
used to deflect an electron beam around

00:04:35,690 --> 00:04:39,770
the front of a glass tube just how much

00:04:38,419 --> 00:04:41,960
while the band oh no here you ask

00:04:39,770 --> 00:04:43,310
here we try and draw as many shapes as

00:04:41,960 --> 00:04:45,080
we can we fill up the screen with shapes

00:04:43,310 --> 00:04:47,470
60 times a second before destroying each

00:04:45,080 --> 00:04:49,700
type is translated and rotated weakening

00:04:47,470 --> 00:04:51,830
2700 shapes on the screen a 5.5

00:04:49,700 --> 00:04:53,810
milliseconds if you're trying to do 65 a

00:04:51,830 --> 00:04:55,820
second animation you still have 10

00:04:53,810 --> 00:04:58,639
milliseconds left every frame to do all

00:04:55,820 --> 00:05:07,760
of your math and JavaScript can do a lot

00:04:58,639 --> 00:05:13,120
of man in 10 milliseconds thank you with

00:05:07,760 --> 00:05:13,120

YouTube URL: https://www.youtube.com/watch?v=zeKNXaM2fsA


