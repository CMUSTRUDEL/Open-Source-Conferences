Title: Karen Farzam: The Route to HTTP 2 - JSConf.Asia 2015
Publication date: 2015-12-26
Playlist: JSConf.Asia 2015
Description: 
	HTTP/1.1 has served the Web well for more than fifteen years, but its age is starting to show.
Welcome to HTTP/2, a more modern protocol that essentially speeds web browsing up using new ways of transporting data between the browser and server across the internet.

Hailing from France, Karen Farzam is an engineer, former JP Morgan Equity Derivatives trader to Web Developer and co-founder of WHub.io. Operating in Hong-Kong she channels her remaining energies supporting female powers in engineering and entrepreneurship.


JSConf.Asia - Red Dot Design Museum, Singapore - 20 November 2015.

Source: http://2015.jsconf.asia

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:06,690 --> 00:00:14,709
so hello my name is a Karen farzam I'm

00:00:11,799 --> 00:00:18,850
coming from hong kong at french you can

00:00:14,709 --> 00:00:21,400
tell after two seconds usually so i'm

00:00:18,850 --> 00:00:23,410
the co-founder of a startup school w hub

00:00:21,400 --> 00:00:25,720
which is a platform for startups and i'm

00:00:23,410 --> 00:00:28,119
also the co-founder of a woman who code

00:00:25,720 --> 00:00:31,150
in in hong kong to promote gender

00:00:28,119 --> 00:00:33,970
diversity in web development but

00:00:31,150 --> 00:00:41,500
actually i see a lot of woman here so i

00:00:33,970 --> 00:00:43,750
think it's really great so well done so

00:00:41,500 --> 00:00:46,630
i'm going to talk to you about HTTP to

00:00:43,750 --> 00:00:53,290
and how to unlearn your optimization

00:00:46,630 --> 00:00:56,230
skills so HTTP hypertext Transfer

00:00:53,290 --> 00:00:59,430
Protocol basically it's a foundation for

00:00:56,230 --> 00:01:03,489
data communication it's the most use

00:00:59,430 --> 00:01:08,200
protocol over the web today it's been

00:01:03,489 --> 00:01:11,679
first released in 1991 and then we went

00:01:08,200 --> 00:01:15,850
to like two versions and in 1999 through

00:01:11,679 --> 00:01:19,060
HTTP 1.1 and then you don't know why but

00:01:15,850 --> 00:01:22,810
it's like 16 years later we're talking

00:01:19,060 --> 00:01:26,020
about HTTP two so 16 years in like tech

00:01:22,810 --> 00:01:29,229
is like one century right so I'm going

00:01:26,020 --> 00:01:32,729
to explain you why it's released now the

00:01:29,229 --> 00:01:38,229
foundation of it and how you can use it

00:01:32,729 --> 00:01:39,969
so in 1999 the web look like this if

00:01:38,229 --> 00:01:44,289
some of you can remember I'm not even

00:01:39,969 --> 00:01:46,389
sure and today it looks like this so not

00:01:44,289 --> 00:01:48,369
only is a design hice change but other

00:01:46,389 --> 00:01:51,189
stuff as well actually I was also

00:01:48,369 --> 00:01:53,619
looking at Google in 1999 and if you

00:01:51,189 --> 00:01:57,489
check it it hasn't changed so I just

00:01:53,619 --> 00:02:00,520
remove it from the examples so not only

00:01:57,489 --> 00:02:03,579
the design has changed but also the

00:02:00,520 --> 00:02:05,560
requests and ends up a load so if you if

00:02:03,579 --> 00:02:08,440
you look at the chart you can see that

00:02:05,560 --> 00:02:11,110
the total transfer size grew like

00:02:08,440 --> 00:02:13,290
drastically and also the total of

00:02:11,110 --> 00:02:16,989
requests

00:02:13,290 --> 00:02:19,810
so basically with the number of requests

00:02:16,989 --> 00:02:23,170
adding up we also see that the website

00:02:19,810 --> 00:02:26,049
are getting really really slow and also

00:02:23,170 --> 00:02:31,150
because the round-trip time is really

00:02:26,049 --> 00:02:34,319
high so basically at the web developer

00:02:31,150 --> 00:02:37,359
it's like okay what can we do to reduce

00:02:34,319 --> 00:02:42,400
HTTP requests right all our hacks are

00:02:37,359 --> 00:02:45,730
based around this so currently like

00:02:42,400 --> 00:02:48,519
websites are like this and we want it to

00:02:45,730 --> 00:02:50,440
be more like turbo right because what is

00:02:48,519 --> 00:02:56,379
important is for it to be like super

00:02:50,440 --> 00:03:00,489
fast so currently all of us are using

00:02:56,379 --> 00:03:02,200
HTTP 1.1 and we are using it but instead

00:03:00,489 --> 00:03:04,959
of like fixing what's wrong we're using

00:03:02,200 --> 00:03:09,909
a lot of workarounds so let's go through

00:03:04,959 --> 00:03:12,790
them first we have sprinting so this is

00:03:09,909 --> 00:03:15,370
like really bad right it's like putting

00:03:12,790 --> 00:03:18,310
images together in order to select just

00:03:15,370 --> 00:03:20,049
one so it's really bad for caching it's

00:03:18,310 --> 00:03:23,319
really bad when you need to change one

00:03:20,049 --> 00:03:29,530
it's really bad to access it but still

00:03:23,319 --> 00:03:33,970
it improve the speed of the website then

00:03:29,530 --> 00:03:36,400
we have this horrible line which doesn't

00:03:33,970 --> 00:03:39,549
look like anything you cannot even say

00:03:36,400 --> 00:03:41,979
what this image is about so it's like

00:03:39,549 --> 00:03:43,840
super bad but still even like Facebook

00:03:41,979 --> 00:03:47,769
use it to cook to their website so they

00:03:43,840 --> 00:03:50,379
must be a reason we also have in lining

00:03:47,769 --> 00:03:54,900
which is you all know it like really bad

00:03:50,379 --> 00:03:56,829
but we still use it for some cases and

00:03:54,900 --> 00:03:59,199
another thing that we have is

00:03:56,829 --> 00:04:01,930
concatenation okay it's like we have all

00:03:59,199 --> 00:04:04,239
this javascript file all the CSS file

00:04:01,930 --> 00:04:06,639
and after we put them all together in

00:04:04,239 --> 00:04:09,220
order to reduce the number of HTTP

00:04:06,639 --> 00:04:12,579
requests and we're using a lot of tools

00:04:09,220 --> 00:04:14,979
in order to make it like all together

00:04:12,579 --> 00:04:17,229
but the thing is that when you think

00:04:14,979 --> 00:04:19,269
about it it's like when you download one

00:04:17,229 --> 00:04:22,570
page you need to download the whole

00:04:19,269 --> 00:04:24,520
website coding right so it's not really

00:04:22,570 --> 00:04:25,490
efficient and when you think about

00:04:24,520 --> 00:04:27,979
caching it's like

00:04:25,490 --> 00:04:31,099
you update just one line of code you

00:04:27,979 --> 00:04:36,740
need to refresh everything so actually

00:04:31,099 --> 00:04:39,740
we're not using like what HTTP really

00:04:36,740 --> 00:04:43,250
have to offer always TCP have to offer

00:04:39,740 --> 00:04:46,550
as well it's really inefficient and when

00:04:43,250 --> 00:04:49,099
we learn to code even as learning it's

00:04:46,550 --> 00:04:51,139
like okay you learn to do this so it's

00:04:49,099 --> 00:04:55,940
part of web development all these

00:04:51,139 --> 00:04:58,610
workarounds then we have Charlotte so

00:04:55,940 --> 00:05:00,800
basically with HTTP is like we're going

00:04:58,610 --> 00:05:04,099
to limit the number of requests

00:05:00,800 --> 00:05:06,949
connection that you can do but as it's

00:05:04,099 --> 00:05:10,310
not fast enough we increase the number

00:05:06,949 --> 00:05:13,130
of hosts so everything that we do is

00:05:10,310 --> 00:05:16,069
just hacks and when you're looking at

00:05:13,130 --> 00:05:19,039
the data which is the other graph the

00:05:16,069 --> 00:05:20,990
green one that you see is that all the

00:05:19,039 --> 00:05:24,080
unnecessary data that you are actually

00:05:20,990 --> 00:05:26,389
downloaded to websites because you want

00:05:24,080 --> 00:05:28,340
to make it faster so it's not also

00:05:26,389 --> 00:05:30,830
server friendly because you're using a

00:05:28,340 --> 00:05:36,080
lot of them with that you actually don't

00:05:30,830 --> 00:05:41,389
need so yeah when you think about it

00:05:36,080 --> 00:05:46,449
it's bad it's just super bad so what can

00:05:41,389 --> 00:05:49,310
we do so they said okay let's fix HTTP

00:05:46,449 --> 00:05:55,340
so they're what they're trying to do is

00:05:49,310 --> 00:05:58,099
to make a protocol that is rdt sensitive

00:05:55,340 --> 00:06:02,229
less already sensitive obviously and

00:05:58,099 --> 00:06:05,330
also to fix a head of line blocking and

00:06:02,229 --> 00:06:10,099
to stop the needs to making that many

00:06:05,330 --> 00:06:13,250
requests and also to keep everything

00:06:10,099 --> 00:06:16,250
because obviously as HTTP is the most

00:06:13,250 --> 00:06:18,289
used protocol they cannot change it and

00:06:16,250 --> 00:06:20,030
change the way it works right it's more

00:06:18,289 --> 00:06:22,250
about changing how it proceeds the data

00:06:20,030 --> 00:06:24,680
because we need to keep like the same

00:06:22,250 --> 00:06:27,319
API the same everything the same URL

00:06:24,680 --> 00:06:29,630
like nothing needs to change for the

00:06:27,319 --> 00:06:36,680
user it's just for the web developers

00:06:29,630 --> 00:06:37,650
that it needs to change so 2015 16 years

00:06:36,680 --> 00:06:42,080
later

00:06:37,650 --> 00:06:46,460
welcome to http too so what is it about

00:06:42,080 --> 00:06:52,380
so who is behind basically it's like the

00:06:46,460 --> 00:06:54,389
IETF which is HTTP beast group so a lot

00:06:52,380 --> 00:06:57,889
of developer and other type of people

00:06:54,389 --> 00:07:01,949
and where does HTTP to come from

00:06:57,889 --> 00:07:04,500
actually in 2012 Google decided to

00:07:01,949 --> 00:07:09,060
relieve speedy so speedy was a way to

00:07:04,500 --> 00:07:13,169
download like faster and it got actually

00:07:09,060 --> 00:07:17,220
a lot of traction so the IETF decided to

00:07:13,169 --> 00:07:19,229
base HTTP two on speedy but it's not

00:07:17,220 --> 00:07:21,030
done by like Google anymore it's really

00:07:19,229 --> 00:07:25,560
independent because people like kind of

00:07:21,030 --> 00:07:29,729
worried about this and in may 2015

00:07:25,560 --> 00:07:31,229
finally easy RFC was released RFC is

00:07:29,729 --> 00:07:33,599
kind of a weird word because it means

00:07:31,229 --> 00:07:35,880
requests for comments but actually it's

00:07:33,599 --> 00:07:39,810
already released so I find it kind of

00:07:35,880 --> 00:07:45,240
strange and speedy is actually disabled

00:07:39,810 --> 00:07:51,300
now so you cannot use it anymore so what

00:07:45,240 --> 00:07:53,340
is HTTP to HTTPS a binary protocol so at

00:07:51,300 --> 00:07:55,050
the web developer you might find it

00:07:53,340 --> 00:07:57,630
really useful that it's only text

00:07:55,050 --> 00:07:59,520
because it's really easy to check all

00:07:57,630 --> 00:08:01,530
the answers and everything but when you

00:07:59,520 --> 00:08:03,810
think about it the fact that it's going

00:08:01,530 --> 00:08:08,729
to be binary make it's more compact and

00:08:03,810 --> 00:08:13,380
efficient and it also prevent from like

00:08:08,729 --> 00:08:16,199
crime attacks on the websites so that's

00:08:13,380 --> 00:08:18,930
actually good and it reduces also all

00:08:16,199 --> 00:08:20,400
the errors due to the text that it can

00:08:18,930 --> 00:08:22,470
brings because you have a lot of space

00:08:20,400 --> 00:08:24,870
coma and all these kind of things so

00:08:22,470 --> 00:08:27,150
it's actually difficult to parse and to

00:08:24,870 --> 00:08:29,849
know like when it ends and when it

00:08:27,150 --> 00:08:34,620
finish so with the binary it's going to

00:08:29,849 --> 00:08:37,680
be more efficient now we are talking

00:08:34,620 --> 00:08:39,659
about header compression when you're

00:08:37,680 --> 00:08:41,550
looking at the header that you have

00:08:39,659 --> 00:08:46,130
actually you have a lot of redundant

00:08:41,550 --> 00:08:49,550
data so now you have edge back and this

00:08:46,130 --> 00:08:52,070
will actually reduce the header for like

00:08:49,550 --> 00:08:54,530
sixty six percent which is really huge

00:08:52,070 --> 00:08:58,220
because now you don't have any

00:08:54,530 --> 00:09:01,880
compression at all so it's actually very

00:08:58,220 --> 00:09:03,860
good so and as you can see it's even

00:09:01,880 --> 00:09:06,080
better than than speedy so it's really

00:09:03,860 --> 00:09:09,440
based on it but they really improve it

00:09:06,080 --> 00:09:13,910
after it like zoom one or two years have

00:09:09,440 --> 00:09:16,670
been working on top of it so now also

00:09:13,910 --> 00:09:21,050
you're going to have priorities in the

00:09:16,670 --> 00:09:24,350
requests using weights and dependency so

00:09:21,050 --> 00:09:26,780
basically you're requesting for websites

00:09:24,350 --> 00:09:30,080
what it can do is that it can identify

00:09:26,780 --> 00:09:32,390
where you are on the dome and depending

00:09:30,080 --> 00:09:36,170
on where you are it requesting priority

00:09:32,390 --> 00:09:39,380
what you can see so basically it's going

00:09:36,170 --> 00:09:42,530
to ask for HTML first then CSS sends the

00:09:39,380 --> 00:09:44,810
images and you can put weights on each

00:09:42,530 --> 00:09:47,270
of these requests and based on this

00:09:44,810 --> 00:09:50,630
you're going to receive them in advance

00:09:47,270 --> 00:09:53,540
and this will also remove the head of

00:09:50,630 --> 00:09:56,000
line blocking because you won't need to

00:09:53,540 --> 00:09:58,460
wait for the request to be finished in

00:09:56,000 --> 00:10:03,800
order to have the rest basically it's

00:09:58,460 --> 00:10:07,100
like you you're ordering something and

00:10:03,800 --> 00:10:10,760
it gets much much faster and also the

00:10:07,100 --> 00:10:15,320
thing is that you can also stop the

00:10:10,760 --> 00:10:16,760
request even when you have it so now you

00:10:15,320 --> 00:10:20,480
have something that is actually very

00:10:16,760 --> 00:10:23,570
cool which is the server push it's like

00:10:20,480 --> 00:10:26,630
you at you ask your server for requests

00:10:23,570 --> 00:10:28,400
and then the server will anticipate what

00:10:26,630 --> 00:10:30,860
you need afterwards and it will give it

00:10:28,400 --> 00:10:32,990
to you so when you think about an

00:10:30,860 --> 00:10:35,600
analogy it's like imagine you're in a

00:10:32,990 --> 00:10:40,130
restaurant okay so yours a brother and

00:10:35,600 --> 00:10:42,710
then the kitchen is the server and then

00:10:40,130 --> 00:10:44,780
your protocol are the wetter so in the

00:10:42,710 --> 00:10:46,190
first version of HTTP you would order a

00:10:44,780 --> 00:10:48,800
sandwich and then you will have your

00:10:46,190 --> 00:10:50,840
waiter com go to the kitchen come back

00:10:48,800 --> 00:10:53,180
with the bread go to the kitchen come

00:10:50,840 --> 00:10:55,390
back with a ham and then you know with

00:10:53,180 --> 00:10:57,180
the cheese and everything then you have

00:10:55,390 --> 00:10:59,010
HTTP 1.1

00:10:57,180 --> 00:11:01,980
and then instead of having like one

00:10:59,010 --> 00:11:04,800
wetter you could have for waiters okay

00:11:01,980 --> 00:11:06,630
so each one of them will go and come

00:11:04,800 --> 00:11:08,970
with something and they will stay at

00:11:06,630 --> 00:11:10,860
your table until everything is there

00:11:08,970 --> 00:11:12,060
when you think about like the number of

00:11:10,860 --> 00:11:16,530
weathers you need that's not very

00:11:12,060 --> 00:11:18,690
efficient so now with HTTP two it's like

00:11:16,530 --> 00:11:20,370
you asked for a sandwich you have one

00:11:18,690 --> 00:11:22,590
waiter because you only have one

00:11:20,370 --> 00:11:24,540
connection it goes to the kitchen she

00:11:22,590 --> 00:11:27,510
comes back with your sandwich and she

00:11:24,540 --> 00:11:30,330
even brings you the coffee it's awesome

00:11:27,510 --> 00:11:32,160
right and you can even say no I don't

00:11:30,330 --> 00:11:35,370
want the coffee and it's like you don't

00:11:32,160 --> 00:11:42,120
have to pay for it so it's really really

00:11:35,370 --> 00:11:44,580
powerful then you have multiplexing so

00:11:42,120 --> 00:11:47,700
multiplexing is like this little train

00:11:44,580 --> 00:11:52,380
but that you see so all the streams are

00:11:47,700 --> 00:11:55,080
divided into like headers and data so

00:11:52,380 --> 00:11:56,760
you send the streams and when it comes

00:11:55,080 --> 00:11:59,070
back it comes it can come back in

00:11:56,760 --> 00:12:02,220
different order and your browser will

00:11:59,070 --> 00:12:05,250
know where to put it and to reassemble

00:12:02,220 --> 00:12:07,380
dips so it's great because if something

00:12:05,250 --> 00:12:09,870
is blocking or is taking more bands with

00:12:07,380 --> 00:12:12,450
it can actually get the other one in

00:12:09,870 --> 00:12:18,300
priority so that's all the problem that

00:12:12,450 --> 00:12:21,270
we use to have with HTTP 1.1 so in terms

00:12:18,300 --> 00:12:24,000
of implementation actually most of us

00:12:21,270 --> 00:12:26,690
didn't know it but it's already there in

00:12:24,000 --> 00:12:31,190
terms of browser and in terms of server

00:12:26,690 --> 00:12:34,890
for Firefox and Chrome it's actually

00:12:31,190 --> 00:12:37,920
enabled by default so you might already

00:12:34,890 --> 00:12:39,780
use it without knowing to and in terms

00:12:37,920 --> 00:12:44,340
of server a lot of them are supporting

00:12:39,780 --> 00:12:46,410
it so when you look at the web actually

00:12:44,340 --> 00:12:49,680
you have more requests that have been

00:12:46,410 --> 00:12:53,040
that are done in HTTP to right now

00:12:49,680 --> 00:12:59,490
rather than HTTP 1.0 so it's getting

00:12:53,040 --> 00:13:02,730
there really fast so basically for

00:12:59,490 --> 00:13:05,310
normal humans it's really good it's

00:13:02,730 --> 00:13:06,360
going to be faster which means a better

00:13:05,310 --> 00:13:09,029
user experience

00:13:06,360 --> 00:13:11,040
which means like more attention on your

00:13:09,029 --> 00:13:13,470
website you know everything that comes

00:13:11,040 --> 00:13:16,079
with it everything that we want and for

00:13:13,470 --> 00:13:18,450
developers that's going to change a

00:13:16,079 --> 00:13:20,790
little bit first of all we'll need to

00:13:18,450 --> 00:13:22,649
like unlearn everything that we've

00:13:20,790 --> 00:13:24,570
learned to do we will need to rebuild

00:13:22,649 --> 00:13:26,790
our website to change how it's made to

00:13:24,570 --> 00:13:28,829
make it more functional because actually

00:13:26,790 --> 00:13:31,529
the thing is that all the hacks that

00:13:28,829 --> 00:13:35,040
we've been doing when you're using HTTP

00:13:31,529 --> 00:13:37,320
two it's actually slowing it so you

00:13:35,040 --> 00:13:40,200
actually really need to remove it and to

00:13:37,320 --> 00:13:43,380
stop all this concatenation sharding and

00:13:40,200 --> 00:13:47,310
everything that we say before so you

00:13:43,380 --> 00:13:49,589
really need to remove it and maybe what

00:13:47,310 --> 00:13:52,050
we will need to do is to have a special

00:13:49,589 --> 00:13:56,579
request for HTTP one and a special one

00:13:52,050 --> 00:13:59,130
for HTTP to the thing is that HTTP two

00:13:56,579 --> 00:14:00,839
works like a different language what

00:13:59,130 --> 00:14:02,850
will happen it's like the server will

00:14:00,839 --> 00:14:05,339
come back and say hey do you speak HTTP

00:14:02,850 --> 00:14:08,220
two and if the browser saying no then it

00:14:05,339 --> 00:14:10,769
will just give you the default one so

00:14:08,220 --> 00:14:20,190
actually you don't really need to notice

00:14:10,769 --> 00:14:27,750
it so go and explore HTTP to thank you

00:14:20,190 --> 00:14:29,820
very much hey my name is Jacques dodgy

00:14:27,750 --> 00:14:32,370
so i have a question like when browser

00:14:29,820 --> 00:14:35,820
makes a request so you say the server

00:14:32,370 --> 00:14:37,800
will anticipate and even if i ask for a

00:14:35,820 --> 00:14:41,459
sangwich it will bring me a coffee right

00:14:37,800 --> 00:14:44,880
so how it is guessing that what else I

00:14:41,459 --> 00:14:47,220
might require with that request how is

00:14:44,880 --> 00:14:51,089
it guessing that it's a HTTP to know how

00:14:47,220 --> 00:14:53,610
it is give like if I asked for HTML but

00:14:51,089 --> 00:14:56,190
you said that it might anticipate that I

00:14:53,610 --> 00:14:58,829
might require the CSS file as well and

00:14:56,190 --> 00:15:01,500
it will send the CSS together yeah it

00:14:58,829 --> 00:15:03,600
will so how it will guess that what else

00:15:01,500 --> 00:15:05,130
I require because you will set it up

00:15:03,600 --> 00:15:07,110
actually you will have all your

00:15:05,130 --> 00:15:08,730
priorities and everything so the circle

00:15:07,110 --> 00:15:11,010
will know so that's how it's going to be

00:15:08,730 --> 00:15:13,740
able to anticipate it so you kind of

00:15:11,010 --> 00:15:15,279
need to configure it how much is

00:15:13,740 --> 00:15:17,410
deployed now and what

00:15:15,279 --> 00:15:20,889
that kind of time frame for uptake do

00:15:17,410 --> 00:15:24,850
you think so basically in in terms of

00:15:20,889 --> 00:15:28,959
browser I think about sixty percent of

00:15:24,850 --> 00:15:32,610
the bra so supported right now and in

00:15:28,959 --> 00:15:36,399
terms of deployment among the top ten

00:15:32,610 --> 00:15:39,749
thousand websites it's supported around

00:15:36,399 --> 00:15:45,550
I think it's fifteen or twenty percent

00:15:39,749 --> 00:15:47,920
so it's actually pretty big yeah you say

00:15:45,550 --> 00:15:50,829
that we need to remove some of the hacks

00:15:47,920 --> 00:15:53,199
that we're executing today to speed up

00:15:50,829 --> 00:15:55,749
things in HTTP one can you give some

00:15:53,199 --> 00:15:58,149
specific examples of the actual hacks

00:15:55,749 --> 00:16:00,009
that that you would expect us to remove

00:15:58,149 --> 00:16:01,120
all the ones that I said at the

00:16:00,009 --> 00:16:03,069
beginning it's Friday like

00:16:01,120 --> 00:16:05,800
congratulations browserify anymore don't

00:16:03,069 --> 00:16:07,779
use concatenation yeah yes so so that's

00:16:05,800 --> 00:16:09,819
where it comes like kind of complicated

00:16:07,779 --> 00:16:12,160
because you also need to check on your

00:16:09,819 --> 00:16:14,620
website if your user are using HTTP two

00:16:12,160 --> 00:16:15,999
or HTTP one in order to kind of guess

00:16:14,620 --> 00:16:17,740
which one you need to implement as well

00:16:15,999 --> 00:16:19,990
right you need to run a test to see what

00:16:17,740 --> 00:16:21,610
your users are are doing right now if

00:16:19,990 --> 00:16:24,910
you're mainly implemented in China and

00:16:21,610 --> 00:16:26,949
they are using IA for like old version

00:16:24,910 --> 00:16:30,339
you obviously won't be implementing it

00:16:26,949 --> 00:16:32,050
so I read a lot about the discussions

00:16:30,339 --> 00:16:34,809
that's been going on is how do you

00:16:32,050 --> 00:16:37,300
actually set up something how do you

00:16:34,809 --> 00:16:40,120
load your project being able to respond

00:16:37,300 --> 00:16:42,279
in HTTP 1.1 with all the hacks that

00:16:40,120 --> 00:16:46,569
we've been doing and how to upload it to

00:16:42,279 --> 00:16:49,899
be able to do HTTP to and that's not

00:16:46,569 --> 00:16:52,149
really clear gotcha okay when do you

00:16:49,899 --> 00:16:55,319
think HTTP you will be like the major

00:16:52,149 --> 00:16:58,029
thing and the way like a pacing 1.1

00:16:55,319 --> 00:17:00,910
because of meeting at it's like not

00:16:58,029 --> 00:17:04,569
supported by a lot of still not

00:17:00,910 --> 00:17:06,459
supported by like tom cat oh yeah i

00:17:04,569 --> 00:17:08,079
think there are a lot of developments to

00:17:06,459 --> 00:17:10,120
be made but when you think about the

00:17:08,079 --> 00:17:13,059
fact that it's only being released in

00:17:10,120 --> 00:17:17,289
May which is like what four or five

00:17:13,059 --> 00:17:20,380
months ago I think the gross can be like

00:17:17,289 --> 00:17:22,959
super fast so people are really talking

00:17:20,380 --> 00:17:25,620
about next year being a major change in

00:17:22,959 --> 00:17:29,550
it but

00:17:25,620 --> 00:17:31,680
is that we'll still need to use HTTP 1.1

00:17:29,550 --> 00:17:35,660
a lot so the real question is like how

00:17:31,680 --> 00:17:35,660

YouTube URL: https://www.youtube.com/watch?v=i2ezuw_RV78


