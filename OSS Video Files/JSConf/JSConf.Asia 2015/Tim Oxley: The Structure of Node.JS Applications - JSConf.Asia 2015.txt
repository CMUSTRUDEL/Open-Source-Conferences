Title: Tim Oxley: The Structure of Node.JS Applications - JSConf.Asia 2015
Publication date: 2015-12-11
Playlist: JSConf.Asia 2015
Description: 
	The Node.JS & npm ecosystem is oft praised for it's "culture of extreme modularity", which has led to the proliferation of hundreds of thousands packages on npm. How do modular patterns translate into the construction of evolving, real-world applications? It's Modular vs Monolith!

Tim Oxley is an an Australian JavaScript developer living in Singapore working with NodeSource. Tim is a co-host of the NodeUp podcast, author of NodeSchool's functional JavaScript workshop, founder of the CampJS conference, founder of the SingaporeJS meetup and an avid open-source contributor.

JSConf.Asia - Red Dot Design Museum, Singapore - 19 November 2015.

Source: http://2015.jsconf.asia
Slides: http://www.slideshare.net/timoxley/modular-vs-monolith

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:09,110 --> 00:00:15,150
thank you very much sunny I have four

00:00:13,679 --> 00:00:15,870
minutes to get from this slide to the

00:00:15,150 --> 00:00:20,490
next slide

00:00:15,870 --> 00:00:24,449
good morning I've infected my entire

00:00:20,490 --> 00:00:27,529
presentation with emoji I've never used

00:00:24,449 --> 00:00:30,150
emoji before probably using it wrong but

00:00:27,529 --> 00:00:32,239
one of my philosophies is you have to

00:00:30,150 --> 00:00:35,090
use something incorrectly and poorly

00:00:32,239 --> 00:00:37,800
before you can learn to use it right so

00:00:35,090 --> 00:00:42,090
if anybody is an emoji expert I

00:00:37,800 --> 00:00:44,160
apologize in advance so here we go it's

00:00:42,090 --> 00:00:48,360
my first emoji attempt Who am I

00:00:44,160 --> 00:00:49,770
Tim Oxley as signee mentioned that I'm

00:00:48,360 --> 00:00:51,539
an Australian developer I've been living

00:00:49,770 --> 00:00:55,680
in Singapore for the last three or four

00:00:51,539 --> 00:00:58,530
years I grew up on PHP and all that

00:00:55,680 --> 00:01:00,870
rubbish ended up becoming deciding I

00:00:58,530 --> 00:01:04,260
wanted to do something with my life so I

00:01:00,870 --> 00:01:06,000
got rid of PHP so I shouldn't bag

00:01:04,260 --> 00:01:12,229
I shouldn't bash any technology really

00:01:06,000 --> 00:01:14,850
but anyway moved to JavaScript and

00:01:12,229 --> 00:01:21,990
started presenting it meetups ended up

00:01:14,850 --> 00:01:23,280
becoming okay what I do okay I've now

00:01:21,990 --> 00:01:27,799
worked for a company called node source

00:01:23,280 --> 00:01:30,750
so node sauce it's trying to make node

00:01:27,799 --> 00:01:33,329
better for enterprises so no it's going

00:01:30,750 --> 00:01:36,210
getting going crazy at the moment and

00:01:33,329 --> 00:01:39,240
we're building tools to help help

00:01:36,210 --> 00:01:41,430
enterprise use node better we've

00:01:39,240 --> 00:01:43,320
launched a product called n solid about

00:01:41,430 --> 00:01:44,579
a month ago it's the first like big

00:01:43,320 --> 00:01:46,229
product that I've been involved in so

00:01:44,579 --> 00:01:48,240
I'm kind of proud of it so I'm just

00:01:46,229 --> 00:01:49,799
plugging that a little bit we we

00:01:48,240 --> 00:01:51,710
produced like a runtime for node that

00:01:49,799 --> 00:01:53,729
allows you to get like cool

00:01:51,710 --> 00:01:56,280
introspection capability so you can get

00:01:53,729 --> 00:01:59,430
like stack traces and CPU profiles out

00:01:56,280 --> 00:02:04,700
of it and visualize them in beautiful

00:01:59,430 --> 00:02:07,320
graphs like that so under my talk

00:02:04,700 --> 00:02:08,849
modular versus monolith this is

00:02:07,320 --> 00:02:11,519
something which

00:02:08,849 --> 00:02:14,730
some of you may be familiar with me

00:02:11,519 --> 00:02:18,450
discussing this at length in the past at

00:02:14,730 --> 00:02:23,640
various times one of the times in which

00:02:18,450 --> 00:02:26,910
I discussed this was a 2012 not J's conf

00:02:23,640 --> 00:02:28,379
it was jeaious camp J's camp it's

00:02:26,910 --> 00:02:30,780
confusing because I have camp jeaious

00:02:28,379 --> 00:02:35,040
and there was jazz camp so is that I

00:02:30,780 --> 00:02:36,019
spoke about this but I have changed my

00:02:35,040 --> 00:02:38,280
mind

00:02:36,019 --> 00:02:43,290
so if anybody is familiar with what I

00:02:38,280 --> 00:02:47,220
said this will be different so just a

00:02:43,290 --> 00:02:50,129
little bit of background node node has

00:02:47,220 --> 00:02:51,750
this compared to a lot of other

00:02:50,129 --> 00:02:55,019
ecosystems we've got this culture of

00:02:51,750 --> 00:02:57,660
extreme modularity the the idea is that

00:02:55,019 --> 00:02:59,400
you can build an application up out of

00:02:57,660 --> 00:03:02,280
like lots of little tiny pieces each has

00:02:59,400 --> 00:03:05,099
like a single responsibility and you're

00:03:02,280 --> 00:03:08,190
building your building using like lots

00:03:05,099 --> 00:03:10,349
of little Lego blocks and you know you

00:03:08,190 --> 00:03:13,380
can it's not uncommon to see projects

00:03:10,349 --> 00:03:16,079
using hundreds if not thousands of

00:03:13,380 --> 00:03:19,079
dependencies often hundreds if not

00:03:16,079 --> 00:03:20,010
thousands of the same dependency which

00:03:19,079 --> 00:03:23,310
is very unfortunate

00:03:20,010 --> 00:03:24,930
hopefully salt resolved in NPM 3 if you

00:03:23,310 --> 00:03:32,250
if anything will actually install

00:03:24,930 --> 00:03:35,900
eventually anyway so in 2012 I spoke

00:03:32,250 --> 00:03:39,540
about the idea of building modular

00:03:35,900 --> 00:03:42,150
applications and the idea I feel like

00:03:39,540 --> 00:03:45,690
maybe I was a little bit immature at the

00:03:42,150 --> 00:03:48,180
time so take some of this with a grain

00:03:45,690 --> 00:03:50,099
of salt but one of the things which I

00:03:48,180 --> 00:03:51,510
was advocating was avoiding frameworks

00:03:50,099 --> 00:03:53,579
because you know they they give you

00:03:51,510 --> 00:03:54,870
vendor lock-in it's really difficult

00:03:53,579 --> 00:03:56,129
once you're on a framework it's

00:03:54,870 --> 00:03:58,500
difficult to move away from a framework

00:03:56,129 --> 00:04:01,139
because all of your codes locked to that

00:03:58,500 --> 00:04:03,900
framework and because it's locked to the

00:04:01,139 --> 00:04:06,150
framework you're also in a situation

00:04:03,900 --> 00:04:08,220
where when the framework dies so does

00:04:06,150 --> 00:04:10,290
all of your code this is a bad thing and

00:04:08,220 --> 00:04:12,120
it's something that we should be trying

00:04:10,290 --> 00:04:15,090
to avoid if we're trying to you know

00:04:12,120 --> 00:04:19,650
continue having our code bases live for

00:04:15,090 --> 00:04:22,109
long periods of time my main objection

00:04:19,650 --> 00:04:23,729
to using frameworks is actually it's

00:04:22,109 --> 00:04:27,750
more just investment in something which

00:04:23,729 --> 00:04:30,210
is going to go away quickly so after

00:04:27,750 --> 00:04:31,620
every 18 months I felt like now I don't

00:04:30,210 --> 00:04:34,159
know anything about web development

00:04:31,620 --> 00:04:36,900
anymore this is a really frustrating

00:04:34,159 --> 00:04:40,770
thing you know a new of every 18 months

00:04:36,900 --> 00:04:42,090
so my solution that the solution that I

00:04:40,770 --> 00:04:43,590
presented was rather than building on

00:04:42,090 --> 00:04:45,750
top of frameworks - you build things

00:04:43,590 --> 00:04:48,330
using libraries and library solve all of

00:04:45,750 --> 00:04:50,009
your problems if you build something

00:04:48,330 --> 00:04:52,710
with a library you know it'll be

00:04:50,009 --> 00:04:53,370
reusable you can be more robust you know

00:04:52,710 --> 00:04:55,229
you're right

00:04:53,370 --> 00:04:58,250
yeah you can write documentation in the

00:04:55,229 --> 00:05:01,919
readme for the sort of library

00:04:58,250 --> 00:05:03,750
you know the you'll make better code

00:05:01,919 --> 00:05:05,430
quality because you're solving smaller

00:05:03,750 --> 00:05:07,770
simpler problems you've got less things

00:05:05,430 --> 00:05:09,389
going on it's it's all about sort of

00:05:07,770 --> 00:05:12,360
keeping things simple to the point

00:05:09,389 --> 00:05:14,129
single responsibilities etc over and not

00:05:12,360 --> 00:05:15,719
only that it the the great thing about

00:05:14,129 --> 00:05:17,250
it is that it makes it very easy to take

00:05:15,719 --> 00:05:22,349
something which you've built and open

00:05:17,250 --> 00:05:24,060
source it and my the way I was treating

00:05:22,349 --> 00:05:25,259
this was well okay if you can open

00:05:24,060 --> 00:05:26,069
source why not open source everything

00:05:25,259 --> 00:05:28,080
from the beginning

00:05:26,069 --> 00:05:31,110
you know library first development build

00:05:28,080 --> 00:05:34,319
build the concept was if you've got

00:05:31,110 --> 00:05:37,889
something if you're you know we often

00:05:34,319 --> 00:05:39,449
will pull tools out of NPM and use them

00:05:37,889 --> 00:05:42,750
in our projects to solve various

00:05:39,449 --> 00:05:44,550
problems and if you know I sort of saw

00:05:42,750 --> 00:05:46,349
it as my responsibility if I if I feel

00:05:44,550 --> 00:05:48,629
like I need something if I'm looking for

00:05:46,349 --> 00:05:50,550
something and I don't find it it's my

00:05:48,629 --> 00:05:52,650
responsibility as an open source

00:05:50,550 --> 00:05:54,930
developer - well I'm gonna fill in that

00:05:52,650 --> 00:05:57,210
gap if I've been able to fill in nine

00:05:54,930 --> 00:06:00,110
out of my ten gaps it's my

00:05:57,210 --> 00:06:05,610
responsibility fill in the the tenth one

00:06:00,110 --> 00:06:08,219
and so if you're if you're if by

00:06:05,610 --> 00:06:10,259
producing libraries you're producing

00:06:08,219 --> 00:06:11,879
higher quality code overall and as you

00:06:10,259 --> 00:06:15,990
know got a bit the benefit for the

00:06:11,879 --> 00:06:18,060
community you know the overall quality

00:06:15,990 --> 00:06:19,650
is better so wouldn't it make sense to

00:06:18,060 --> 00:06:21,960
build your entire application as a big

00:06:19,650 --> 00:06:24,509
set of libraries and start you know why

00:06:21,960 --> 00:06:25,949
not even start with libraries at the

00:06:24,509 --> 00:06:29,430
time I was talking about a project

00:06:25,949 --> 00:06:32,209
called component which was thing by TJ

00:06:29,430 --> 00:06:32,209
Holloway Jack

00:06:32,729 --> 00:06:39,729
unfortunately between 2012 and 2015

00:06:36,599 --> 00:06:41,680
what component died and which was okay

00:06:39,729 --> 00:06:42,999
though it's okay one of the things that

00:06:41,680 --> 00:06:45,400
I mentioned in the talk was that if

00:06:42,999 --> 00:06:46,680
component dies if there's no you know

00:06:45,400 --> 00:06:48,939
there was there's only a little bit of

00:06:46,680 --> 00:06:50,800
overhead so a lot of the things which I

00:06:48,939 --> 00:06:53,620
made components I made I had probably

00:06:50,800 --> 00:06:56,370
twenty thirty components they're all now

00:06:53,620 --> 00:06:58,840
NPN modules so that was nice but

00:06:56,370 --> 00:07:03,060
unfortunately there are some other major

00:06:58,840 --> 00:07:05,830
major issues with building things

00:07:03,060 --> 00:07:08,349
library first or even having a heavy

00:07:05,830 --> 00:07:11,080
focus on constructing libraries out of

00:07:08,349 --> 00:07:14,740
the pieces which you're using to

00:07:11,080 --> 00:07:16,029
construct your application number one is

00:07:14,740 --> 00:07:17,860
that there's rabbit holes everywhere

00:07:16,029 --> 00:07:22,270
it's very difficult if you're trying to

00:07:17,860 --> 00:07:23,830
build the pure try to build libraries to

00:07:22,270 --> 00:07:25,870
solve all of your problems you end up

00:07:23,830 --> 00:07:27,279
just constantly building libraries I

00:07:25,870 --> 00:07:29,439
remember there was one day I started out

00:07:27,279 --> 00:07:31,569
with a particular problem and three days

00:07:29,439 --> 00:07:35,770
later I realized I'd built like four or

00:07:31,569 --> 00:07:37,509
five libraries and I hadn't even got all

00:07:35,770 --> 00:07:40,449
the pieces that I need needed to solve

00:07:37,509 --> 00:07:41,860
the original problem which it's good

00:07:40,449 --> 00:07:42,759
because all these line these are

00:07:41,860 --> 00:07:45,520
actually some of my more popular

00:07:42,759 --> 00:07:46,930
libraries on NPM at the moment but they

00:07:45,520 --> 00:07:48,460
actually they weren't solving the

00:07:46,930 --> 00:07:51,159
problem that I had at the time which was

00:07:48,460 --> 00:07:56,259
something actually quite simple it's

00:07:51,159 --> 00:07:58,389
very frustrating and the the problem was

00:07:56,259 --> 00:08:01,029
you know when there's if you think of

00:07:58,389 --> 00:08:03,069
the idea of a library it's often it's

00:08:01,029 --> 00:08:04,300
it's quite simple and you think oh yeah

00:08:03,069 --> 00:08:08,139
I'll get this done in about twenty

00:08:04,300 --> 00:08:10,599
minutes but in reality libraries take a

00:08:08,139 --> 00:08:12,849
lot longer I find that if I'm gonna be

00:08:10,599 --> 00:08:14,349
producing something of a you know a high

00:08:12,849 --> 00:08:16,000
level of quality something that's open

00:08:14,349 --> 00:08:19,449
source of all it generally takes me at

00:08:16,000 --> 00:08:21,250
least six to eight hours and that's just

00:08:19,449 --> 00:08:23,319
for like for example if my lab we just

00:08:21,250 --> 00:08:25,389
has one line of code in it it's you know

00:08:23,319 --> 00:08:28,479
maybe maybe a few more than that but if

00:08:25,389 --> 00:08:30,099
if your work even even for the simplest

00:08:28,479 --> 00:08:31,779
stuff it can take this amount of time

00:08:30,099 --> 00:08:33,729
because you're you'll build your thing

00:08:31,779 --> 00:08:35,169
you'll realize that the API is not very

00:08:33,729 --> 00:08:37,500
good when you start writing the readme I

00:08:35,169 --> 00:08:40,329
can't publish this this is embarrassing

00:08:37,500 --> 00:08:41,979
it takes too many arguments so you go

00:08:40,329 --> 00:08:43,329
and you change your API which means you

00:08:41,979 --> 00:08:44,740
need to update your test which means you

00:08:43,329 --> 00:08:46,450
need to update the documentation which

00:08:44,740 --> 00:08:48,339
you just wrote

00:08:46,450 --> 00:08:51,550
and you know you end up with this thing

00:08:48,339 --> 00:08:53,620
which you know because it's supposed to

00:08:51,550 --> 00:08:55,540
be reusable now you end up having to

00:08:53,620 --> 00:08:58,630
take into account all these additional

00:08:55,540 --> 00:09:00,579
use cases which probably never happened

00:08:58,630 --> 00:09:02,170
in your application but because you want

00:09:00,579 --> 00:09:04,440
this to be you don't want the next

00:09:02,170 --> 00:09:07,269
person to use your library to pass it

00:09:04,440 --> 00:09:12,060
you know some strange value in anything

00:09:07,269 --> 00:09:15,550
breaks so you want to make it robust but

00:09:12,060 --> 00:09:17,740
this is an awful lot of work and

00:09:15,550 --> 00:09:20,290
unfortunately all those qualities that I

00:09:17,740 --> 00:09:22,899
was discussing before you know reusable

00:09:20,290 --> 00:09:24,699
more robust high quality code all this

00:09:22,899 --> 00:09:26,320
stuff it doesn't just come for free

00:09:24,699 --> 00:09:29,680
magically by building things with

00:09:26,320 --> 00:09:32,350
libraries this is an unfortunate thing

00:09:29,680 --> 00:09:34,889
and something I didn't really take into

00:09:32,350 --> 00:09:36,910
account I just I sort of assumed that

00:09:34,889 --> 00:09:40,720
reason why this stuff's taking so long

00:09:36,910 --> 00:09:42,399
is because I'm crap but maybe it wasn't

00:09:40,720 --> 00:09:44,709
because I was crap it's just that this

00:09:42,399 --> 00:09:46,540
stuff things just take time or maybe

00:09:44,709 --> 00:09:48,190
maybe I am crap and maybe I just need to

00:09:46,540 --> 00:09:50,769
live with that that's okay I can live

00:09:48,190 --> 00:09:52,060
with that the problem is is that if you

00:09:50,769 --> 00:09:53,829
try to build everything at a hundred

00:09:52,060 --> 00:09:56,620
percent quality all of the time you end

00:09:53,829 --> 00:09:58,779
up investing an awful lot of time over

00:09:56,620 --> 00:10:00,640
engineering because you're building

00:09:58,779 --> 00:10:03,790
stuff which like I said

00:10:00,640 --> 00:10:06,070
taking into account cases which you

00:10:03,790 --> 00:10:07,449
don't need in your application you're

00:10:06,070 --> 00:10:09,040
making it more robust than these to me

00:10:07,449 --> 00:10:11,170
maybe it doesn't even need documentation

00:10:09,040 --> 00:10:12,880
because it's like one function and it

00:10:11,170 --> 00:10:15,630
takes two arguments and you know a

00:10:12,880 --> 00:10:18,160
comment above it will be sufficient so

00:10:15,630 --> 00:10:19,990
the thing thing is most of the time

00:10:18,160 --> 00:10:23,529
you're not gonna need all of this

00:10:19,990 --> 00:10:25,930
additional quality that you're injecting

00:10:23,529 --> 00:10:28,420
and the worst part is a lot of the time

00:10:25,930 --> 00:10:30,910
I would build stuff and then go to

00:10:28,420 --> 00:10:32,649
integrate it and then discover I didn't

00:10:30,910 --> 00:10:33,819
even need the thing in the first place I

00:10:32,649 --> 00:10:38,310
could have just done the whole thing

00:10:33,819 --> 00:10:42,130
with one line of code and this is just

00:10:38,310 --> 00:10:43,389
such a waste of time great for the

00:10:42,130 --> 00:10:46,329
community and I think that's probably

00:10:43,389 --> 00:10:48,579
one of the reasons why NPM has you know

00:10:46,329 --> 00:10:51,550
most of the it's the largest package

00:10:48,579 --> 00:10:54,000
repository ever in the history of

00:10:51,550 --> 00:10:56,470
humanity because a lot of people are

00:10:54,000 --> 00:10:58,750
over engineering and it's great benefits

00:10:56,470 --> 00:11:00,490
the community but may not necessarily

00:10:58,750 --> 00:11:03,279
benefit the people who's out

00:11:00,490 --> 00:11:07,930
actually paying you to build the right

00:11:03,279 --> 00:11:11,410
thing so unfortunately if you were

00:11:07,930 --> 00:11:16,270
building libraries first you often

00:11:11,410 --> 00:11:18,790
you'll build the wrong thing so the the

00:11:16,270 --> 00:11:20,350
solutions of this is to constantly be

00:11:18,790 --> 00:11:22,540
asking yourself what problem I trying to

00:11:20,350 --> 00:11:25,540
solve is this the simplest thing which

00:11:22,540 --> 00:11:28,420
will work and I would often ask myself

00:11:25,540 --> 00:11:29,620
that while I was having a shower I do a

00:11:28,420 --> 00:11:32,470
lot of thinking in the shower so I

00:11:29,620 --> 00:11:36,760
enjoyed that's why that emojis they just

00:11:32,470 --> 00:11:38,380
have to explain that often if it's not

00:11:36,760 --> 00:11:41,560
the simplest thing you know you need to

00:11:38,380 --> 00:11:43,690
you know roll roll back I don't this is

00:11:41,560 --> 00:11:46,810
just something which I am constantly I

00:11:43,690 --> 00:11:49,170
have in my mind and I'm almost always

00:11:46,810 --> 00:11:55,089
when I'm doing things the answer is no

00:11:49,170 --> 00:11:56,529
socks but but that's okay we we try to

00:11:55,089 --> 00:11:58,390
get better

00:11:56,529 --> 00:12:03,550
there's a quote don't know where it from

00:11:58,390 --> 00:12:06,339
where it came from which reads we've all

00:12:03,550 --> 00:12:07,899
had projects in which we spent 80% of

00:12:06,339 --> 00:12:10,180
the time working on a small piece which

00:12:07,899 --> 00:12:12,520
we found interesting and 20% of the time

00:12:10,180 --> 00:12:15,610
building the other 80% of the program

00:12:12,520 --> 00:12:17,110
and this is something I've this is again

00:12:15,610 --> 00:12:18,910
the reason why I'd like to build those

00:12:17,110 --> 00:12:20,500
modules I'm gonna solve this problem

00:12:18,910 --> 00:12:23,200
really well and that I find that

00:12:20,500 --> 00:12:24,910
interesting the idea of taking a taking

00:12:23,200 --> 00:12:27,370
something and doing a good job of it

00:12:24,910 --> 00:12:29,170
understanding the whole thing but yeah

00:12:27,370 --> 00:12:33,370
is that the simple thing that'll work

00:12:29,170 --> 00:12:35,440
probably not and the the way I get

00:12:33,370 --> 00:12:38,860
around another way that I tricked myself

00:12:35,440 --> 00:12:40,660
a question that I asked myself to figure

00:12:38,860 --> 00:12:43,839
out am i doing is this the right

00:12:40,660 --> 00:12:47,740
decision should I build this is if I

00:12:43,839 --> 00:12:49,300
asked myself is this going to be fun if

00:12:47,740 --> 00:12:50,380
I think something's going to be fun I

00:12:49,300 --> 00:12:51,640
probably shouldn't be building it

00:12:50,380 --> 00:12:55,029
because I'm building it for me not for

00:12:51,640 --> 00:12:58,180
the product this is a horrible reality I

00:12:55,029 --> 00:13:00,480
hate this but yeah a lot of the time if

00:12:58,180 --> 00:13:02,680
you're building something that's fun you

00:13:00,480 --> 00:13:04,270
should probably second guess whether

00:13:02,680 --> 00:13:06,220
you're building it for you or actually

00:13:04,270 --> 00:13:07,510
to solve the problem it's a little sucks

00:13:06,220 --> 00:13:11,170
but maybe there's a better way but

00:13:07,510 --> 00:13:14,569
anyway overall the point here is that

00:13:11,170 --> 00:13:17,239
avoid premature modularization

00:13:14,569 --> 00:13:20,709
because you might end up putting the

00:13:17,239 --> 00:13:23,869
wrong thing into your program because

00:13:20,709 --> 00:13:25,730
it's difficult to know upfront all of

00:13:23,869 --> 00:13:28,850
the things that you're going to need so

00:13:25,730 --> 00:13:30,290
tend to build things top down I put a

00:13:28,850 --> 00:13:32,859
saxophone in here because I had this

00:13:30,290 --> 00:13:35,480
sort of idea of this image in my head of

00:13:32,859 --> 00:13:37,100
starting a band I've always wanted to

00:13:35,480 --> 00:13:41,509
start a band I've been in bands but they

00:13:37,100 --> 00:13:44,569
were never any good but the I had this

00:13:41,509 --> 00:13:46,489
vision of like starting a band and like

00:13:44,569 --> 00:13:49,369
getting this writing this excellent you

00:13:46,489 --> 00:13:50,899
know lead part but and then just jumping

00:13:49,369 --> 00:13:53,089
on the first instrument that I saw was

00:13:50,899 --> 00:13:54,559
like a like a saxophone and but then

00:13:53,089 --> 00:13:55,819
later realizing and we'll hang on we're

00:13:54,559 --> 00:14:01,189
in a metal band what the hell am I doing

00:13:55,819 --> 00:14:02,059
with a saxophone and that so if we if

00:14:01,189 --> 00:14:05,509
we're going to avoid premature

00:14:02,059 --> 00:14:06,919
modularization what are other what are

00:14:05,509 --> 00:14:10,299
our other options there are other

00:14:06,919 --> 00:14:12,949
options of these things before my

00:14:10,299 --> 00:14:14,359
whenever I needed to model I modular

00:14:12,949 --> 00:14:16,970
eyes something I would just instantly go

00:14:14,359 --> 00:14:20,600
straight for external package because

00:14:16,970 --> 00:14:23,480
this seemed if you look at a lot of the

00:14:20,600 --> 00:14:25,220
prolific authors of stuff this seems to

00:14:23,480 --> 00:14:26,959
be the way that they work but I'm not

00:14:25,220 --> 00:14:30,379
sure whether this is actually a good way

00:14:26,959 --> 00:14:31,489
to work in your everyday work so you've

00:14:30,379 --> 00:14:33,980
got all these other options which are

00:14:31,489 --> 00:14:37,009
much simpler which come with far lower

00:14:33,980 --> 00:14:39,589
overheads which you can use before you

00:14:37,009 --> 00:14:41,980
end up moving something out so basically

00:14:39,589 --> 00:14:45,019
what I'm trying to say is you can I

00:14:41,980 --> 00:14:46,789
don't even mind having a whole bunch of

00:14:45,019 --> 00:14:49,689
stuff just in one function that's fine

00:14:46,789 --> 00:14:52,220
as long as it's not complicated

00:14:49,689 --> 00:14:53,660
but if that gets complicated if it's too

00:14:52,220 --> 00:14:55,639
much to hold in your head then you can

00:14:53,660 --> 00:14:57,619
break it out to a file folder or an

00:14:55,639 --> 00:15:00,949
internal package all these things which

00:14:57,619 --> 00:15:04,759
are which have lower overheads before

00:15:00,949 --> 00:15:07,339
you get to an external package next

00:15:04,759 --> 00:15:10,669
point is assume that your first attempt

00:15:07,339 --> 00:15:11,809
will be bad so this is another thing if

00:15:10,669 --> 00:15:16,910
you're building things which are open

00:15:11,809 --> 00:15:18,679
source and your first attempt is bad or

00:15:16,910 --> 00:15:23,029
one you've now got other people using

00:15:18,679 --> 00:15:24,799
your bad first attempt but to you've

00:15:23,029 --> 00:15:26,360
gone and invested all this time in

00:15:24,799 --> 00:15:27,379
adding all that documentation all those

00:15:26,360 --> 00:15:30,379
tests in

00:15:27,379 --> 00:15:31,069
think which may or may not be the best

00:15:30,379 --> 00:15:33,379
solution

00:15:31,069 --> 00:15:35,720
like tests a really good way of making

00:15:33,379 --> 00:15:39,259
sure that your code doesn't change and

00:15:35,720 --> 00:15:40,519
so maybe a good maybe it's important

00:15:39,259 --> 00:15:43,160
it's important to prototype I guess is

00:15:40,519 --> 00:15:45,859
what I'm trying to say here it's not

00:15:43,160 --> 00:15:48,409
always clear how to best slice up the

00:15:45,859 --> 00:15:49,489
logic for your application and you're

00:15:48,409 --> 00:15:51,019
probably going to make some bad

00:15:49,489 --> 00:15:52,399
decisions up front

00:15:51,019 --> 00:15:56,929
now I'm Judah incomplete or missing

00:15:52,399 --> 00:16:01,429
information so not only that the you'll

00:15:56,929 --> 00:16:02,839
end up with you slice things up in a way

00:16:01,429 --> 00:16:04,999
which doesn't make sense

00:16:02,839 --> 00:16:06,169
next week it might have made sense for

00:16:04,999 --> 00:16:09,019
the changes now but it doesn't make

00:16:06,169 --> 00:16:10,519
sense later and especially if you're

00:16:09,019 --> 00:16:13,009
building things library first like I was

00:16:10,519 --> 00:16:15,199
the longer you leave integration with

00:16:13,009 --> 00:16:17,299
your application the greater the chance

00:16:15,199 --> 00:16:18,649
that you're going to discover that the

00:16:17,299 --> 00:16:19,970
thing that you're building doesn't make

00:16:18,649 --> 00:16:24,889
any sense

00:16:19,970 --> 00:16:28,369
and one of the times when I realized how

00:16:24,889 --> 00:16:31,999
bad my my first attempts were was at

00:16:28,369 --> 00:16:35,299
purgatory so I've been very very fond

00:16:31,999 --> 00:16:37,039
memories of doing toad retreats and we

00:16:35,299 --> 00:16:39,709
did one for death vestager who actually

00:16:37,039 --> 00:16:43,369
came along to that couple people one

00:16:39,709 --> 00:16:45,199
okay there we go so that's good

00:16:43,369 --> 00:16:46,579
more people should go next time there's

00:16:45,199 --> 00:16:48,350
one make sure you go to this because it

00:16:46,579 --> 00:16:52,149
was really eye-opening for me when when

00:16:48,350 --> 00:16:54,229
I went to code read a few years ago

00:16:52,149 --> 00:16:58,100
between 2012 and 2015

00:16:54,229 --> 00:16:59,689
I realized so you've got the the idea of

00:16:58,100 --> 00:17:02,659
a code retreat is that you've got 45

00:16:59,689 --> 00:17:04,699
minutes to try and implement a very

00:17:02,659 --> 00:17:08,209
simple algorithm using test-driven

00:17:04,699 --> 00:17:11,000
development and after the 45 minutes you

00:17:08,209 --> 00:17:13,850
delete your code and pause briefly for

00:17:11,000 --> 00:17:15,169
reflection and then you find a new

00:17:13,850 --> 00:17:17,299
partner I'm sorry you're doing it all in

00:17:15,169 --> 00:17:19,909
pair programming you find a new partner

00:17:17,299 --> 00:17:21,379
and then you repeat and so over the

00:17:19,909 --> 00:17:23,689
course of the day you solve the same

00:17:21,379 --> 00:17:25,789
problem over and over again maybe four

00:17:23,689 --> 00:17:27,470
or five times and the general experience

00:17:25,789 --> 00:17:31,009
seems to be that everybody starts out

00:17:27,470 --> 00:17:32,899
building like classes and all this just

00:17:31,009 --> 00:17:35,980
boilerplate rubbish you know you'll see

00:17:32,899 --> 00:17:39,679
things with accesses and pretty much

00:17:35,980 --> 00:17:40,790
everything except for implementing the

00:17:39,679 --> 00:17:42,260
four

00:17:40,790 --> 00:17:43,940
properties of this algorithm and I

00:17:42,260 --> 00:17:45,800
remember there was one group who said oh

00:17:43,940 --> 00:17:46,940
yeah know what we're nearly done we're

00:17:45,800 --> 00:17:49,700
nearly done we just need to implement

00:17:46,940 --> 00:17:52,580
the algorithm now and it's like that was

00:17:49,700 --> 00:17:54,770
that's where you should have started and

00:17:52,580 --> 00:17:56,450
so they were building all these pieces

00:17:54,770 --> 00:17:58,520
and I was building all these pieces not

00:17:56,450 --> 00:18:00,260
that's not just everybody else and then

00:17:58,520 --> 00:18:02,000
it made me realize it scared the

00:18:00,260 --> 00:18:03,980
out of me because I was like everything

00:18:02,000 --> 00:18:06,020
that I build is usually just on the

00:18:03,980 --> 00:18:08,090
first attempt and I'm usually I'm

00:18:06,020 --> 00:18:10,190
probably injecting all this additional

00:18:08,090 --> 00:18:14,770
complexity into my applications that I

00:18:10,190 --> 00:18:19,880
never go back and delete and revisit so

00:18:14,770 --> 00:18:22,130
this is I open it so I guess the

00:18:19,880 --> 00:18:25,190
suggestion here is that if you're going

00:18:22,130 --> 00:18:26,480
to be don't be don't get Precious about

00:18:25,190 --> 00:18:31,040
your code

00:18:26,480 --> 00:18:33,380
there's the often we try to make our

00:18:31,040 --> 00:18:34,970
code live for as long as possible so as

00:18:33,380 --> 00:18:38,330
you know we make it extensible and we

00:18:34,970 --> 00:18:41,030
make it robust all this kind of stuff

00:18:38,330 --> 00:18:44,720
but perhaps a better solution is to

00:18:41,030 --> 00:18:46,670
start by well first validate that this

00:18:44,720 --> 00:18:50,230
thing even needs to exist validate that

00:18:46,670 --> 00:18:50,230
it's a good solution to the problem and

00:18:50,710 --> 00:18:57,650
if it's not revisited delete your code

00:18:53,930 --> 00:18:59,210
start again I guess yeah point is don't

00:18:57,650 --> 00:19:02,260
be don't be afraid to tweet your code

00:18:59,210 --> 00:19:06,230
start over and there's a good anecdote

00:19:02,260 --> 00:19:08,390
from me I remember there was a Smith

00:19:06,230 --> 00:19:10,820
days working on the speech I was late I

00:19:08,390 --> 00:19:13,520
couldn't get this thing done I made it

00:19:10,820 --> 00:19:15,710
really hard and I was really stressed

00:19:13,520 --> 00:19:17,180
about it and I'd written some tests and

00:19:15,710 --> 00:19:20,990
in the teardown of the techno in the

00:19:17,180 --> 00:19:23,090
setup of the tests I are what the you

00:19:20,990 --> 00:19:26,180
know the the the working folder and then

00:19:23,090 --> 00:19:28,040
you know keep working I'll keep going

00:19:26,180 --> 00:19:29,660
with the tests what I didn't realize is

00:19:28,040 --> 00:19:32,330
I've accidentally put too many dots in

00:19:29,660 --> 00:19:34,880
my which folder to delete and it deleted

00:19:32,330 --> 00:19:36,950
my project folder and because I was

00:19:34,880 --> 00:19:38,750
stressed I hadn't been you know obeying

00:19:36,950 --> 00:19:42,280
best practices and I hadn't committed

00:19:38,750 --> 00:19:42,280
for maybe two or three days

00:19:43,030 --> 00:19:48,130
and to leave my get a folder of course

00:19:45,300 --> 00:19:50,140
so that was just gone it was just

00:19:48,130 --> 00:19:51,310
nothing sorry I had been committing but

00:19:50,140 --> 00:19:53,410
I hadn't been pushing because I didn't

00:19:51,310 --> 00:19:55,480
want the my peers to see my crappy

00:19:53,410 --> 00:19:57,510
attempts at doing something complicated

00:19:55,480 --> 00:20:00,130
anyway

00:19:57,510 --> 00:20:03,580
deadline was looming I I think I had to

00:20:00,130 --> 00:20:06,130
demo this thing at 11 p.m. and I managed

00:20:03,580 --> 00:20:08,860
to pull it together in you know four or

00:20:06,130 --> 00:20:10,780
five hours and I was like well what the

00:20:08,860 --> 00:20:12,550
hell have I been doing why why did I

00:20:10,780 --> 00:20:14,110
spend two or three days and what had

00:20:12,550 --> 00:20:17,350
happened is that over the two or three

00:20:14,110 --> 00:20:19,210
days I'd realize I'd gotten a proper

00:20:17,350 --> 00:20:21,130
understanding of the problem and I ended

00:20:19,210 --> 00:20:23,410
up I was more fighting my crappy

00:20:21,130 --> 00:20:26,980
implementation rather than actually

00:20:23,410 --> 00:20:28,240
solving the problem so why didn't I

00:20:26,980 --> 00:20:32,080
delete my code earlier that's the

00:20:28,240 --> 00:20:34,090
question so over engineering the adding

00:20:32,080 --> 00:20:36,190
of unnecessary complexity this is

00:20:34,090 --> 00:20:38,890
something we all do something we should

00:20:36,190 --> 00:20:41,050
try to avoid picking emojis for these

00:20:38,890 --> 00:20:43,570
slides is very difficult that may look

00:20:41,050 --> 00:20:46,150
like a fat man that's fallen over but

00:20:43,570 --> 00:20:48,900
it's actually it's a baby and I thought

00:20:46,150 --> 00:20:51,160
that this was a good example of

00:20:48,900 --> 00:20:54,310
over-engineering at least in at least in

00:20:51,160 --> 00:20:57,880
Australia we often have people often use

00:20:54,310 --> 00:20:59,470
they make a baby to save a relationship

00:20:57,880 --> 00:21:04,060
and I thought that was a good example of

00:20:59,470 --> 00:21:06,910
over-engineering don't do that

00:21:04,060 --> 00:21:11,670
over-engineering it's probably a simple

00:21:06,910 --> 00:21:14,620
solution just talk to each other when is

00:21:11,670 --> 00:21:16,990
complexity kills projects this is like

00:21:14,620 --> 00:21:20,610
the leading source of project death is

00:21:16,990 --> 00:21:24,190
complexity and you want to avoid it and

00:21:20,610 --> 00:21:25,600
but you know because complexity

00:21:24,190 --> 00:21:27,250
increases the likelihood that you're

00:21:25,600 --> 00:21:29,380
going to end up with bugs security

00:21:27,250 --> 00:21:31,980
problems it creates it stops you from

00:21:29,380 --> 00:21:35,470
being able to add additional features

00:21:31,980 --> 00:21:40,020
it's it's the shittest so we want to

00:21:35,470 --> 00:21:43,060
avoid complexity on any level

00:21:40,020 --> 00:21:45,550
over-engineering adds complexity and I

00:21:43,060 --> 00:21:47,350
found that at least in my circles that

00:21:45,550 --> 00:21:52,440
over-engineering is far more common than

00:21:47,350 --> 00:21:52,440
under engineering if you're

00:21:52,790 --> 00:21:57,320
if you're if you've been reading books

00:21:55,070 --> 00:21:59,090
about like programming a lot of the

00:21:57,320 --> 00:22:01,190
content that you read is about

00:21:59,090 --> 00:22:02,690
preventing under engineering they tell

00:22:01,190 --> 00:22:04,010
you how to break things up and you know

00:22:02,690 --> 00:22:07,430
single responsibility principle all

00:22:04,010 --> 00:22:10,070
those kind of stuff but there there's

00:22:07,430 --> 00:22:12,350
not a huge amount of advice on how do we

00:22:10,070 --> 00:22:16,330
how do you prevent people from taking

00:22:12,350 --> 00:22:18,770
that too far because often yeah the the

00:22:16,330 --> 00:22:20,000
simple solution for today's problem is

00:22:18,770 --> 00:22:25,520
not a simple solution for tomorrow's

00:22:20,000 --> 00:22:28,970
problem and biggest yeah if you if you

00:22:25,520 --> 00:22:31,040
if you're doing over engineering this is

00:22:28,970 --> 00:22:33,950
going to be far more costly than under

00:22:31,040 --> 00:22:37,340
engineering this is because the wrong

00:22:33,950 --> 00:22:39,590
structure is going to be more costly to

00:22:37,340 --> 00:22:41,360
change than having no structure at all

00:22:39,590 --> 00:22:44,000
this is something that I found quite

00:22:41,360 --> 00:22:45,500
often when I work on like all rubbish

00:22:44,000 --> 00:22:47,390
applications

00:22:45,500 --> 00:22:49,360
I find myself able to be a lot more

00:22:47,390 --> 00:22:53,540
productive as long as they have tests

00:22:49,360 --> 00:22:55,310
because they're you know if people are

00:22:53,540 --> 00:22:56,900
just writing big long dirty methods and

00:22:55,310 --> 00:22:59,300
it's disgusting you hate yourself by it

00:22:56,900 --> 00:23:00,200
went by contributing to this mess but I

00:22:59,300 --> 00:23:03,500
find myself

00:23:00,200 --> 00:23:06,500
weirdly productive then if I'd gone in

00:23:03,500 --> 00:23:10,420
and tried to make things good make

00:23:06,500 --> 00:23:13,010
things structured make things awesome so

00:23:10,420 --> 00:23:16,130
structure can be easily extracted from

00:23:13,010 --> 00:23:18,130
no structure but incorrect structure you

00:23:16,130 --> 00:23:22,580
need first you first need to reverse it

00:23:18,130 --> 00:23:24,440
before you can change it so the way that

00:23:22,580 --> 00:23:26,660
I've been working these days is trying

00:23:24,440 --> 00:23:28,700
to make the least amount of decisions

00:23:26,660 --> 00:23:31,010
possible and just let the code kind of

00:23:28,700 --> 00:23:33,320
be a little bit crap it's ok because

00:23:31,010 --> 00:23:34,880
you're probably not going to make a good

00:23:33,320 --> 00:23:40,190
decision about how to make it less crap

00:23:34,880 --> 00:23:44,060
now make it later defer decisions if

00:23:40,190 --> 00:23:46,640
your thought the thinking with that it's

00:23:44,060 --> 00:23:48,260
like a if you're getting if somebody

00:23:46,640 --> 00:23:50,920
hands you a grub you don't know whether

00:23:48,260 --> 00:23:54,890
you're gonna get a moth or a butterfly

00:23:50,920 --> 00:24:00,980
so so you don't know whether do I do I

00:23:54,890 --> 00:24:02,990
keep this or do I put it outside so yeah

00:24:00,980 --> 00:24:04,910
the further making important decisions

00:24:02,990 --> 00:24:06,190
for as long as you can because you will

00:24:04,910 --> 00:24:08,409
always have more in from

00:24:06,190 --> 00:24:10,870
later and this will help you make better

00:24:08,409 --> 00:24:12,669
decisions so every decision that you

00:24:10,870 --> 00:24:14,350
make now is going to be a worse decision

00:24:12,669 --> 00:24:16,090
than a decision that you make later so

00:24:14,350 --> 00:24:19,269
try not to make decisions

00:24:16,090 --> 00:24:21,340
just leave it leave it

00:24:19,269 --> 00:24:24,039
and the best way you can leave it is by

00:24:21,340 --> 00:24:25,450
not well this is pretty much the exact

00:24:24,039 --> 00:24:30,450
same point drawing pencil before you

00:24:25,450 --> 00:24:30,450
join Inc make sure that you haven't

00:24:30,929 --> 00:24:37,870
don't don't get not too much structure

00:24:35,190 --> 00:24:40,210
this is something this particular point

00:24:37,870 --> 00:24:42,159
actually something that I discovered

00:24:40,210 --> 00:24:47,230
before I used to I wanted to be a

00:24:42,159 --> 00:24:50,889
musician and I was working with a guy

00:24:47,230 --> 00:24:52,779
and he was like Tim you never finished a

00:24:50,889 --> 00:24:54,879
song you end up with just working on a

00:24:52,779 --> 00:24:56,740
little loop I was like yeah it's a good

00:24:54,879 --> 00:25:00,460
loop but that's not a song you know

00:24:56,740 --> 00:25:02,470
we're trying to sell songs and I'd be

00:25:00,460 --> 00:25:04,509
working for like hours just trying to

00:25:02,470 --> 00:25:05,950
get like make sure the snare was

00:25:04,509 --> 00:25:07,960
compressed correctly you had the right

00:25:05,950 --> 00:25:09,549
EQ and you know because once I get the

00:25:07,960 --> 00:25:11,169
good loop then I can make the song but

00:25:09,549 --> 00:25:13,799
what ends up happening is you get so

00:25:11,169 --> 00:25:16,090
focused on this loop that you have no

00:25:13,799 --> 00:25:17,440
perspective of the big picture of well

00:25:16,090 --> 00:25:19,330
what does this even look like in the

00:25:17,440 --> 00:25:21,879
context of a song and now I have a whole

00:25:19,330 --> 00:25:23,409
library of just loops they're not songs

00:25:21,879 --> 00:25:24,639
there and there's nothing I can do about

00:25:23,409 --> 00:25:28,149
them because I can't think about them in

00:25:24,639 --> 00:25:30,519
the context of a song so the idea here

00:25:28,149 --> 00:25:34,059
is that what this guy's just said Tim

00:25:30,519 --> 00:25:35,950
you are not allowed to use a compressor

00:25:34,059 --> 00:25:39,299
no let's use EQ until you have at least

00:25:35,950 --> 00:25:41,350
have a song structure in place and

00:25:39,299 --> 00:25:43,330
instantly as soon as I had the song

00:25:41,350 --> 00:25:44,440
structure in place I was able to put

00:25:43,330 --> 00:25:46,299
together songs that weren't good songs

00:25:44,440 --> 00:25:48,190
but there were actual songs are better

00:25:46,299 --> 00:25:50,049
than loops and then later I could come

00:25:48,190 --> 00:25:53,379
back and fix the loops and change stuff

00:25:50,049 --> 00:25:56,590
and what ended up happening was don't

00:25:53,379 --> 00:25:58,210
worry about if the thing that you put

00:25:56,590 --> 00:25:59,950
into your code now it doesn't have to be

00:25:58,210 --> 00:26:01,840
there forever you can delete it it's

00:25:59,950 --> 00:26:04,330
just like a starting point the you know

00:26:01,840 --> 00:26:06,399
the I would just write the crappiest

00:26:04,330 --> 00:26:07,870
bassline I possibly good just to get me

00:26:06,399 --> 00:26:09,639
a starting point something to build on

00:26:07,870 --> 00:26:11,379
and you should do the same thing in your

00:26:09,639 --> 00:26:14,730
code just get something to start with

00:26:11,379 --> 00:26:14,730
that you can build on top of

00:26:17,090 --> 00:26:23,690
when you're building code you're often

00:26:21,100 --> 00:26:27,220
trying to organize things by adding

00:26:23,690 --> 00:26:29,300
abstractions and the abstractions will

00:26:27,220 --> 00:26:31,130
increase sorry

00:26:29,300 --> 00:26:33,230
they'll decrease to local complexity so

00:26:31,130 --> 00:26:35,690
they solve the small problem while

00:26:33,230 --> 00:26:39,650
increasing the the global complexity so

00:26:35,690 --> 00:26:41,480
a good example is if there's a project

00:26:39,650 --> 00:26:43,520
an open-source project I guess I won't

00:26:41,480 --> 00:26:45,050
mention it but there's an open-source

00:26:43,520 --> 00:26:49,220
project that I was working with recently

00:26:45,050 --> 00:26:51,800
which had one function per file and this

00:26:49,220 --> 00:26:53,960
is it had a hell of a lot of functions

00:26:51,800 --> 00:26:57,410
and this was very difficult to actually

00:26:53,960 --> 00:26:59,210
understand like to actually figure out

00:26:57,410 --> 00:27:01,430
what was going on in the program you

00:26:59,210 --> 00:27:03,050
have to open file file and then you have

00:27:01,430 --> 00:27:05,000
a file which is just all it's doing is

00:27:03,050 --> 00:27:06,680
requiring some other file and it's just

00:27:05,000 --> 00:27:11,660
you're following this horrible endless

00:27:06,680 --> 00:27:13,970
chain of complexity and it's very

00:27:11,660 --> 00:27:16,010
frustrating because it's the whole

00:27:13,970 --> 00:27:21,320
concept of can't see the forest for the

00:27:16,010 --> 00:27:24,410
trees so every every time you add an

00:27:21,320 --> 00:27:27,260
abstraction it adds to the global

00:27:24,410 --> 00:27:31,420
complexity so just be aware of that and

00:27:27,260 --> 00:27:34,790
try to reduce complexity everywhere

00:27:31,420 --> 00:27:36,350
because we often find ourselves building

00:27:34,790 --> 00:27:38,480
the wrong thing for the right reasons so

00:27:36,350 --> 00:27:42,290
we can justify building our abstract

00:27:38,480 --> 00:27:44,480
function factory factory but you know it

00:27:42,290 --> 00:27:46,340
makes sense it'll you know it'll make

00:27:44,480 --> 00:27:49,430
things easier in the long run to have

00:27:46,340 --> 00:27:51,550
this thing but perhaps a simpler

00:27:49,430 --> 00:27:54,350
solution would have worked and there's I

00:27:51,550 --> 00:27:56,060
have to like that there's probably

00:27:54,350 --> 00:28:00,610
people who know when I'm what slide I'm

00:27:56,060 --> 00:28:00,610
gonna bring up next to xkcd comic

00:28:06,210 --> 00:28:11,190
and this is what engineers do all the

00:28:08,490 --> 00:28:13,049
time the the alt text here is I find

00:28:11,190 --> 00:28:14,730
that when someone's taking time to do

00:28:13,049 --> 00:28:16,679
something right in the present they're a

00:28:14,730 --> 00:28:19,259
perfectionist with no ability to

00:28:16,679 --> 00:28:20,789
prioritize whereas when someone took

00:28:19,259 --> 00:28:22,649
time to do something right in the past

00:28:20,789 --> 00:28:26,399
there are master artisan of great

00:28:22,649 --> 00:28:28,049
foresight so but I think this is the

00:28:26,399 --> 00:28:30,690
this is the kind of thing that we as

00:28:28,049 --> 00:28:32,190
engineers do all the time and it's

00:28:30,690 --> 00:28:34,200
horrible and we should stop this

00:28:32,190 --> 00:28:38,279
so pointers build the simplest thing

00:28:34,200 --> 00:28:41,039
that works and sometimes a good rule

00:28:38,279 --> 00:28:42,860
that I find for trying to make sure that

00:28:41,039 --> 00:28:46,110
I build the simplest thing that works is

00:28:42,860 --> 00:28:48,330
flat is better than nested and this is

00:28:46,110 --> 00:28:50,909
this is one of my favorite mantras

00:28:48,330 --> 00:28:55,320
because it you're able to use this thing

00:28:50,909 --> 00:28:57,629
to guide design decisions all the way

00:28:55,320 --> 00:29:01,529
from statement level all the way up to

00:28:57,629 --> 00:29:03,059
package level so for example at the

00:29:01,529 --> 00:29:07,200
statement level you should try to avoid

00:29:03,059 --> 00:29:09,749
complex chains of if if-else logic that

00:29:07,200 --> 00:29:12,210
sucks at function level you shouldn't

00:29:09,749 --> 00:29:13,499
have like nested callbacks class level

00:29:12,210 --> 00:29:15,090
you shouldn't have you know multiple

00:29:13,499 --> 00:29:18,029
levels of inheritance these are the

00:29:15,090 --> 00:29:20,610
examples but the idea is that whenever

00:29:18,029 --> 00:29:22,499
you have a choice between a nested

00:29:20,610 --> 00:29:24,149
structure and a flat structure you

00:29:22,499 --> 00:29:28,019
should probably always pick the flat

00:29:24,149 --> 00:29:33,210
structure so because the simplest thing

00:29:28,019 --> 00:29:35,869
is probably flat so back to what this

00:29:33,210 --> 00:29:39,840
talks about modular versus monolith

00:29:35,869 --> 00:29:44,490
being somebody I've built things purely

00:29:39,840 --> 00:29:46,320
monolith and purely modular the projects

00:29:44,490 --> 00:29:48,169
that I built purely modular are still in

00:29:46,320 --> 00:29:51,119
development

00:29:48,169 --> 00:29:55,619
so I think that the sweet spots probably

00:29:51,119 --> 00:30:00,139
somewhere in the middle so I don't know

00:29:55,619 --> 00:30:02,519
that's a good name but but maybe maybe

00:30:00,139 --> 00:30:06,200
point is we should try to avoid

00:30:02,519 --> 00:30:09,840
premature modular ization stop trying to

00:30:06,200 --> 00:30:15,710
architect things too much in advance

00:30:09,840 --> 00:30:17,090
just just simplest thing that'll work

00:30:15,710 --> 00:30:18,799
and often the simple thing that will

00:30:17,090 --> 00:30:21,259
work is to build a monolith

00:30:18,799 --> 00:30:23,539
this is probably a statement which I in

00:30:21,259 --> 00:30:26,149
2012 I wouldn't have thought I would

00:30:23,539 --> 00:30:28,759
ever be making but I truly believe in

00:30:26,149 --> 00:30:32,779
this now I'm converted and the reason

00:30:28,759 --> 00:30:35,120
why the reason why is because yeah we

00:30:32,779 --> 00:30:39,830
have all these we have all these other

00:30:35,120 --> 00:30:46,429
options to use before we get to breaking

00:30:39,830 --> 00:30:49,070
things out into external packages so and

00:30:46,429 --> 00:30:51,289
the other thing is a nice and really

00:30:49,070 --> 00:30:55,519
nice thing I think about what Facebook

00:30:51,289 --> 00:30:57,529
and Google there's a bunch of other big

00:30:55,519 --> 00:30:59,509
companies when they when big companies

00:30:57,529 --> 00:31:00,830
do open source they don't just open

00:30:59,509 --> 00:31:04,009
source everything that they're doing

00:31:00,830 --> 00:31:05,629
that might solve a problem they solve

00:31:04,009 --> 00:31:08,539
the problem internally first make sure

00:31:05,629 --> 00:31:10,730
that they get it right and then and then

00:31:08,539 --> 00:31:12,679
they open source it and I was thinking

00:31:10,730 --> 00:31:14,299
like if you're selling somebody a toilet

00:31:12,679 --> 00:31:16,820
you want to make sure that it works

00:31:14,299 --> 00:31:19,929
before you give it to them

00:31:16,820 --> 00:31:19,929
otherwise they're gonna be very unhappy

00:31:20,889 --> 00:31:26,090
because one of the problems with NPM at

00:31:24,139 --> 00:31:30,919
the moment is that there's an awful lot

00:31:26,090 --> 00:31:33,169
of abandonware so these are things which

00:31:30,919 --> 00:31:34,309
people have built to solve which they

00:31:33,169 --> 00:31:36,980
thought they were going to use to solve

00:31:34,309 --> 00:31:41,029
such as such a problem but it turns out

00:31:36,980 --> 00:31:43,940
that you know they they didn't need it

00:31:41,029 --> 00:31:46,100
or it wasn't the right fit or whatever

00:31:43,940 --> 00:31:48,320
there's there's an awful lot of

00:31:46,100 --> 00:31:52,129
abandonware on NPM and this sucks

00:31:48,320 --> 00:31:53,929
and I own a lot of bandim where it's

00:31:52,129 --> 00:31:55,639
because it's very hard to maintain or

00:31:53,929 --> 00:31:58,549
even make good decisions about the

00:31:55,639 --> 00:32:00,919
direction of a package that you yourself

00:31:58,549 --> 00:32:05,149
don't use I'm very happy for other

00:32:00,919 --> 00:32:06,559
people to use my packages but if I don't

00:32:05,149 --> 00:32:09,950
use it I'm not in a very good position

00:32:06,559 --> 00:32:11,600
to be making good decisions about it so

00:32:09,950 --> 00:32:13,669
and I haven't got this in the slide but

00:32:11,600 --> 00:32:17,990
there is a good there's a good community

00:32:13,669 --> 00:32:20,899
driven solution for this which is it's

00:32:17,990 --> 00:32:26,149
called open open source so if you get it

00:32:20,899 --> 00:32:29,770
open open source dot-com net there's a

00:32:26,149 --> 00:32:32,420
manifesto there and the basic idea is

00:32:29,770 --> 00:32:34,670
especially in the situation that you are

00:32:32,420 --> 00:32:35,720
no longer maintaining something when you

00:32:34,670 --> 00:32:38,270
no longer interested in maintaining

00:32:35,720 --> 00:32:42,590
something but even if you are a good

00:32:38,270 --> 00:32:44,840
policy to adopt is adopting you

00:32:42,590 --> 00:32:47,390
contribute anybody who's like interested

00:32:44,840 --> 00:32:49,220
in being sorry anybody who makes a

00:32:47,390 --> 00:32:53,840
significant contribution to the project

00:32:49,220 --> 00:32:55,640
becomes a contributor and then that's

00:32:53,840 --> 00:32:58,370
additional resources that your project

00:32:55,640 --> 00:33:01,280
now has to field request publish new

00:32:58,370 --> 00:33:02,990
versions etc so perhaps after the point

00:33:01,280 --> 00:33:05,600
that you're when you're no longer

00:33:02,990 --> 00:33:08,960
interested in whatever it is that you're

00:33:05,600 --> 00:33:11,930
building somebody else can pick it up

00:33:08,960 --> 00:33:13,700
and run with it and this works there's

00:33:11,930 --> 00:33:17,720
this amazing thing which happens when

00:33:13,700 --> 00:33:19,580
you give somebody commit rights to your

00:33:17,720 --> 00:33:20,960
project you it might be a likes of a

00:33:19,580 --> 00:33:22,480
scary thing you think all they're gonna

00:33:20,960 --> 00:33:26,600
delete it and replace it with

00:33:22,480 --> 00:33:28,610
CoffeeScript but in reality this doesn't

00:33:26,600 --> 00:33:30,860
happen when you give people

00:33:28,610 --> 00:33:33,800
responsibility they generally take that

00:33:30,860 --> 00:33:35,530
seriously and you you actually see an

00:33:33,800 --> 00:33:38,420
increase in activity because they're

00:33:35,530 --> 00:33:40,490
they feel like they need to live up to

00:33:38,420 --> 00:33:44,600
this responsibility that you've given

00:33:40,490 --> 00:33:46,820
them so I found that I haven't done this

00:33:44,600 --> 00:33:48,890
a huge amount on on my projects but I

00:33:46,820 --> 00:33:52,790
know that it's worked very well for a

00:33:48,890 --> 00:33:54,740
lot of other people and in fact with the

00:33:52,790 --> 00:33:56,720
author of Express's departure from the

00:33:54,740 --> 00:33:58,370
j/s community this is the open

00:33:56,720 --> 00:34:00,080
open-source model is basically what's

00:33:58,370 --> 00:34:02,600
happened to all of his packages anybody

00:34:00,080 --> 00:34:06,050
who made significant significant

00:34:02,600 --> 00:34:08,690
contributions through those packages are

00:34:06,050 --> 00:34:11,899
now maintainer

00:34:08,690 --> 00:34:14,450
so that's nice but the point is we're

00:34:11,899 --> 00:34:16,760
talking about over-engineering let's do

00:34:14,450 --> 00:34:24,260
this of it build the simplest thing that

00:34:16,760 --> 00:34:28,460
works oh yeah saxophone and avoid

00:34:24,260 --> 00:34:30,320
unnecessary complexity so the ball so I

00:34:28,460 --> 00:34:34,850
was thinking here I'm justifying my

00:34:30,320 --> 00:34:37,220
emoji use here when you're at home and

00:34:34,850 --> 00:34:39,830
nobody's there do you even need to use a

00:34:37,220 --> 00:34:41,570
bowl just eat it out of the can do you

00:34:39,830 --> 00:34:44,899
even need to heat it up

00:34:41,570 --> 00:34:50,179
open that lid just eat it avoid

00:34:44,899 --> 00:34:55,899
unnecessary complexity thank you thank

00:34:50,179 --> 00:35:05,990
you Tim thank you so much questions

00:34:55,899 --> 00:35:08,500
questions okay maybe a couple I just

00:35:05,990 --> 00:35:11,360
want to come in in the Oscar poll

00:35:08,500 --> 00:35:13,790
because something about over engineering

00:35:11,360 --> 00:35:16,730
and under engineering because I have

00:35:13,790 --> 00:35:18,650
found that over engineering usually the

00:35:16,730 --> 00:35:20,840
consequence of the prevails

00:35:18,650 --> 00:35:22,760
under engineering so these things that

00:35:20,840 --> 00:35:25,820
people swim between the two ends and

00:35:22,760 --> 00:35:32,090
they never find the moderate meter for

00:35:25,820 --> 00:35:34,520
example I have seen 116 like 16,000

00:35:32,090 --> 00:35:37,250
lines over in one just keep our menu

00:35:34,520 --> 00:35:39,890
right and so that's why that does a

00:35:37,250 --> 00:35:42,500
people are or people try to say all the

00:35:39,890 --> 00:35:45,260
things but apparently they failed so I

00:35:42,500 --> 00:35:47,900
think there's a point another question

00:35:45,260 --> 00:35:51,650
maybe you can find some middle point

00:35:47,900 --> 00:35:53,900
that you have no no that is really hard

00:35:51,650 --> 00:35:57,470
like the point is is that balancing this

00:35:53,900 --> 00:36:00,320
stuff is hard but I guess the thing is

00:35:57,470 --> 00:36:05,240
is that a lot of over engineering does

00:36:00,320 --> 00:36:06,980
come from being yeah it's reactionary so

00:36:05,240 --> 00:36:08,900
you get burnt by something in the past

00:36:06,980 --> 00:36:11,060
like frameworks and then you like never

00:36:08,900 --> 00:36:14,330
again rally against them destroy every

00:36:11,060 --> 00:36:17,660
single framework there is so but maybe

00:36:14,330 --> 00:36:19,970
that's a overreaction so you know maybe

00:36:17,660 --> 00:36:21,980
the best solution I don't know what the

00:36:19,970 --> 00:36:31,070
best solution is it's it's hard balance

00:36:21,980 --> 00:36:34,220
right or one last question I'll be quick

00:36:31,070 --> 00:36:37,790
yeah first of all awesome talk a lot of

00:36:34,220 --> 00:36:42,200
great insights couldn't agree more and I

00:36:37,790 --> 00:36:45,770
think that another thing that might

00:36:42,200 --> 00:36:47,900
worth referring to or like mentioning is

00:36:45,770 --> 00:36:50,780
software longer David long activity

00:36:47,900 --> 00:36:52,880
because a lot of times we just write on

00:36:50,780 --> 00:36:53,990
something and we hope that at some point

00:36:52,880 --> 00:36:57,619
in the future it will be

00:36:53,990 --> 00:36:59,480
useful for someone but in reality if we

00:36:57,619 --> 00:37:01,850
write software for a living if we get

00:36:59,480 --> 00:37:03,830
paid for it even at the

00:37:01,850 --> 00:37:07,160
best-case-scenario it's unlikely that

00:37:03,830 --> 00:37:12,950
our our code will outlive more than five

00:37:07,160 --> 00:37:14,390
years yeah it shouldn't and I guess it's

00:37:12,950 --> 00:37:18,730
probably a deleted slide in there about

00:37:14,390 --> 00:37:22,400
this but one of the things which I find

00:37:18,730 --> 00:37:24,050
best is just to yeah don't don't design

00:37:22,400 --> 00:37:26,710
your code for extensibility design your

00:37:24,050 --> 00:37:28,970
code so that can be easily deleted so

00:37:26,710 --> 00:37:31,010
instead of instead of trying trying to

00:37:28,970 --> 00:37:32,750
force your code to live forever force

00:37:31,010 --> 00:37:36,440
your code to be deleted quickly

00:37:32,750 --> 00:37:38,990
I think that's policy

00:37:36,440 --> 00:37:41,330
I remember this is this is saying that

00:37:38,990 --> 00:37:45,020
one of the virtual programmer is being

00:37:41,330 --> 00:37:48,410
lazy lazy arrogant selfish I think that

00:37:45,020 --> 00:37:55,850
so do you think one of your problem is

00:37:48,410 --> 00:37:57,830
that you work too hard well I think

00:37:55,850 --> 00:38:00,590
sometimes we think we're being lazy cuz

00:37:57,830 --> 00:38:02,150
we'll spend like oh I don't want to I

00:38:00,590 --> 00:38:06,200
don't want to do find and replace in

00:38:02,150 --> 00:38:08,359
these files I'm going to I'm gonna write

00:38:06,200 --> 00:38:10,609
a tool you know this is me being lazy

00:38:08,359 --> 00:38:13,520
but turns out a lot of the time you

00:38:10,609 --> 00:38:15,859
you'll spend an hour or five hours or

00:38:13,520 --> 00:38:17,930
two days saving yourself five minutes

00:38:15,859 --> 00:38:22,520
down the road with the idea that okay

00:38:17,930 --> 00:38:25,400
I'm being lazy I think that's I think

00:38:22,520 --> 00:38:28,330
yeah we do do too much and focusing on

00:38:25,400 --> 00:38:29,510
just the task at hand I think is the

00:38:28,330 --> 00:38:33,430
important thing

00:38:29,510 --> 00:38:35,490
all right thank you Tim Oxley

00:38:33,430 --> 00:38:35,490

YouTube URL: https://www.youtube.com/watch?v=yD2lMmmjB2E


