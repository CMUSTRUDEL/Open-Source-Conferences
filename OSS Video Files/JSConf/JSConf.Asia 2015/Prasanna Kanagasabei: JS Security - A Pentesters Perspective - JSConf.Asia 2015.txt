Title: Prasanna Kanagasabei: JS Security - A Pentesters Perspective - JSConf.Asia 2015
Publication date: 2016-01-04
Playlist: JSConf.Asia 2015
Description: 
	Most developers do not get direct access to external Pentesters and their interactions are sadly limited to an exchange of reports and emails. The talk will provide the pen tester's perspective. The participants will hear first hand from a pentester on how they pen test, analyse and exploit web applications. This session will introduce participants to security issues related to JavaScript, JSON and HTML5 and how to identify such issues in the code. Participants will learn how to write secure JavaScript code which leads to fewer security bugs being discovered in the testing phase and therefore spend less time fixing bugs. Emphasis will be on DOM XSS exercises. There will also be a special focus on CORS, covering the abuse of cross domain communications.

Prasanna has worked as a full time hands-on Web Application pen tester for the past 12+ years. His clients have included large international organisations in the e-Commerce, automobile, premium banking and finance, and government spaces. He regular conducts training sessions to up-skill developers to deliver secure and safe solutions. He has presented at popular security events such as nullcon-Delhi, Clubhack, IIT Guwahati and at various meetups. He is one of the community leads in the Singapore security community. His community code contributions include IronSAP, a SAP testing plugin for IronWASP. At present, his interests include Fuzzing.


JSConf.Asia - Red Dot Design Museum, Singapore - 20 November 2015.

Source: http://2015.jsconf.asia

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:08,360 --> 00:00:13,049
good morning everyone I think it's still

00:00:10,530 --> 00:00:15,509
morning my name is prasanna kanagasabai

00:00:13,049 --> 00:00:17,220
I work for a company called thought

00:00:15,509 --> 00:00:21,539
works I have been a pen tester for a

00:00:17,220 --> 00:00:23,189
long time pretty much my I've been

00:00:21,539 --> 00:00:25,470
speaking at a few conferences in India

00:00:23,189 --> 00:00:26,849
started I just moved to singapore so I

00:00:25,470 --> 00:00:32,279
just started giving some conferences

00:00:26,849 --> 00:00:35,160
here we also run a group called the null

00:00:32,279 --> 00:00:36,840
which specializes in hacking and

00:00:35,160 --> 00:00:39,329
security on the offensive side on the

00:00:36,840 --> 00:00:41,820
defensive side and I am one of the

00:00:39,329 --> 00:00:46,170
moderators on that one I'm available at

00:00:41,820 --> 00:00:48,450
on twitter at the rate prasanna in that

00:00:46,170 --> 00:00:50,280
my mandatory interaction let's move to

00:00:48,450 --> 00:00:53,910
that shall talk what I'm going to be

00:00:50,280 --> 00:00:56,579
talking about is a today a gentleman

00:00:53,910 --> 00:00:58,920
spoke I forgot his name sorry about

00:00:56,579 --> 00:01:01,140
different classifications of security I

00:00:58,920 --> 00:01:03,359
want to concentrate on one specific one

00:01:01,140 --> 00:01:05,250
which is available because it's a

00:01:03,359 --> 00:01:08,460
JavaScript session I wanted to

00:01:05,250 --> 00:01:12,030
concentrate on JavaScript and one of the

00:01:08,460 --> 00:01:14,790
most craziest bugs that we see today as

00:01:12,030 --> 00:01:17,820
pen testers is Dom exercise things are

00:01:14,790 --> 00:01:20,460
changing a lot in the environments how

00:01:17,820 --> 00:01:23,820
we build stuff applications are moving

00:01:20,460 --> 00:01:25,920
more from very heavy server-side to more

00:01:23,820 --> 00:01:28,259
client side also so it effectively

00:01:25,920 --> 00:01:30,240
brings that we might have an attack

00:01:28,259 --> 00:01:31,920
vector inside the client side also so

00:01:30,240 --> 00:01:33,840
today we have code that comes in picks

00:01:31,920 --> 00:01:35,460
up information changes at the client

00:01:33,840 --> 00:01:39,060
side itself which could effectively

00:01:35,460 --> 00:01:41,009
create a dom xss one of the important

00:01:39,060 --> 00:01:44,040
concepts on da mixes is source and sinks

00:01:41,009 --> 00:01:46,530
we're going to discuss that also what

00:01:44,040 --> 00:01:50,520
because it's a what I had called this

00:01:46,530 --> 00:01:51,930
call sorry a presentation the a pen

00:01:50,520 --> 00:01:53,729
testers perspective I would be

00:01:51,930 --> 00:01:55,290
discussing some of the issues that I

00:01:53,729 --> 00:01:56,670
have found some of the issues that

00:01:55,290 --> 00:01:58,049
others are found and some things which

00:01:56,670 --> 00:02:01,920
are very interesting some of that one

00:01:58,049 --> 00:02:03,450
and JavaScript being so huge and

00:02:01,920 --> 00:02:05,070
somewhere of data we want to create some

00:02:03,450 --> 00:02:06,780
automation in there and I wanted to work

00:02:05,070 --> 00:02:10,670
on a specific tool created by a friend

00:02:06,780 --> 00:02:10,670
of mine and I would demo that too

00:02:12,680 --> 00:02:19,860
this was one of the recent payloads that

00:02:15,030 --> 00:02:22,050
I had created this is actually a payload

00:02:19,860 --> 00:02:23,250
that gave me administrative access on

00:02:22,050 --> 00:02:26,160
one of the applications that we were

00:02:23,250 --> 00:02:29,340
working on it's actually a file it's a

00:02:26,160 --> 00:02:31,170
file name this is what I'm going to be

00:02:29,340 --> 00:02:34,670
deciphering the whole thing and what is

00:02:31,170 --> 00:02:34,670
it what happened and stuff like that

00:02:34,910 --> 00:02:42,270
before we get into it a little bit about

00:02:37,710 --> 00:02:43,650
what is Dom excesses itself most of the

00:02:42,270 --> 00:02:45,360
people understand what is cross site

00:02:43,650 --> 00:02:47,460
scripting cross-site scripting to go too

00:02:45,360 --> 00:02:49,440
much into it it's effectively we're in a

00:02:47,460 --> 00:02:52,020
malicious user could send some input

00:02:49,440 --> 00:02:53,910
send to the server process back and

00:02:52,020 --> 00:02:55,320
comes back asses and played back on the

00:02:53,910 --> 00:02:57,770
Dom it is effectively doing the Dom

00:02:55,320 --> 00:03:00,270
manipulation but when a doll mixes is

00:02:57,770 --> 00:03:02,940
the data doesn't go to the observer at

00:03:00,270 --> 00:03:04,709
all so there is a component that is

00:03:02,940 --> 00:03:06,990
there in the client-side itself which is

00:03:04,709 --> 00:03:08,910
picking up this data and making changes

00:03:06,990 --> 00:03:11,640
to the Dom itself which is why it was

00:03:08,910 --> 00:03:14,130
called the dharmic success the reason I

00:03:11,640 --> 00:03:17,880
like it is one of the reasons I love

00:03:14,130 --> 00:03:20,340
this thing is there is no way servers

00:03:17,880 --> 00:03:22,170
can detect it most of the security

00:03:20,340 --> 00:03:24,150
mechanisms that people implement are at

00:03:22,170 --> 00:03:26,130
the server side there is nothing at the

00:03:24,150 --> 00:03:29,220
client side at all so you could have an

00:03:26,130 --> 00:03:31,500
exploit gone into production and there

00:03:29,220 --> 00:03:33,060
is no way that a security administrator

00:03:31,500 --> 00:03:34,440
in the system can even find out about

00:03:33,060 --> 00:03:38,670
this because the payload is never

00:03:34,440 --> 00:03:40,739
reaching him ever just to give you a

00:03:38,670 --> 00:03:42,360
little bit of how a simple darkness

00:03:40,739 --> 00:03:44,280
looks like this is like a hollow world

00:03:42,360 --> 00:03:45,830
of dharmic stresses itself it's a very

00:03:44,280 --> 00:03:49,620
simple thing if you really look at it

00:03:45,830 --> 00:03:51,330
it's taking the location hash which

00:03:49,620 --> 00:03:53,820
basically is anything that you put after

00:03:51,330 --> 00:03:55,080
the hash slicing it basically so we want

00:03:53,820 --> 00:03:57,180
you don't want the hash you want to take

00:03:55,080 --> 00:03:59,340
that content out of that after that and

00:03:57,180 --> 00:04:01,410
you basically write a document dot write

00:03:59,340 --> 00:04:04,320
which basically would make a dom

00:04:01,410 --> 00:04:05,670
manipulation could anyone know what

00:04:04,320 --> 00:04:10,440
would be the exploit that if you want to

00:04:05,670 --> 00:04:13,650
do this what what would you send a

00:04:10,440 --> 00:04:16,799
simple JavaScript actually you could

00:04:13,650 --> 00:04:18,690
write an image tag with any crop your

00:04:16,799 --> 00:04:21,120
traditional exercise would totally work

00:04:18,690 --> 00:04:24,470
in this scenario I was thought I I

00:04:21,120 --> 00:04:24,470
forgot your name sorry for that

00:04:25,050 --> 00:04:30,910
some of the most important concepts when

00:04:27,370 --> 00:04:32,560
it comes to dom exercise we have two

00:04:30,910 --> 00:04:35,170
very very critical things that you

00:04:32,560 --> 00:04:37,270
really think of source and sings that's

00:04:35,170 --> 00:04:40,900
the simplest thing what is the source a

00:04:37,270 --> 00:04:44,110
source is a point of entry for a ten

00:04:40,900 --> 00:04:46,330
third input via malicious user what it

00:04:44,110 --> 00:04:48,820
effectively means is these are places

00:04:46,330 --> 00:04:51,940
which a malicious user can send input

00:04:48,820 --> 00:04:55,210
into the application itself as simple as

00:04:51,940 --> 00:04:56,830
that and what is a sink a sink is when

00:04:55,210 --> 00:05:00,130
you take this and manipulate the Dom

00:04:56,830 --> 00:05:02,380
it's as simple as that so one of the

00:05:00,130 --> 00:05:04,210
fundamentals things that when I was

00:05:02,380 --> 00:05:06,520
learning security probably a 10 years

00:05:04,210 --> 00:05:09,040
back a very good gentlemen taught me a

00:05:06,520 --> 00:05:12,010
simple principle security issues can be

00:05:09,040 --> 00:05:14,470
divided into two sets when data becomes

00:05:12,010 --> 00:05:16,600
code you have a major problem and when

00:05:14,470 --> 00:05:18,430
code becomes data it's as simple as that

00:05:16,600 --> 00:05:20,560
all security issues can go into these

00:05:18,430 --> 00:05:22,900
two lines effectively if you really

00:05:20,560 --> 00:05:24,550
think about it here most of the

00:05:22,900 --> 00:05:27,280
important component is there are ways

00:05:24,550 --> 00:05:29,740
there are Dom API is which allow that a

00:05:27,280 --> 00:05:31,600
user input which a string can be

00:05:29,740 --> 00:05:33,550
converted into a dorm component itself

00:05:31,600 --> 00:05:36,340
that's what the fundamental problem

00:05:33,550 --> 00:05:43,000
comes in and this where Dom exercis is

00:05:36,340 --> 00:05:44,410
all about a very good location of what

00:05:43,000 --> 00:05:47,050
are the source and sink says I have just

00:05:44,410 --> 00:05:48,640
put up a very small laundry list not the

00:05:47,050 --> 00:05:50,230
biggest one I would actually suggest

00:05:48,640 --> 00:05:52,110
that you could go to the dharmic census

00:05:50,230 --> 00:05:54,190
Vicky it has a more exhaustive

00:05:52,110 --> 00:05:56,500
information on what are the different

00:05:54,190 --> 00:05:59,890
sources what are the different things

00:05:56,500 --> 00:06:01,630
that are available but if you really

00:05:59,890 --> 00:06:05,070
think about it I want to spend two

00:06:01,630 --> 00:06:09,250
minutes here to talk about some of the

00:06:05,070 --> 00:06:11,770
evac pretty much dead nobody uses evil

00:06:09,250 --> 00:06:15,160
these days while in my demos I have used

00:06:11,770 --> 00:06:17,860
evil because it's easier but if you

00:06:15,160 --> 00:06:20,290
really look out a set timeout and the

00:06:17,860 --> 00:06:24,390
function constructor can also execute

00:06:20,290 --> 00:06:26,710
code these also can be used as Tom sinks

00:06:24,390 --> 00:06:28,510
that's something that keeps missing all

00:06:26,710 --> 00:06:31,540
and the eternal most important is the

00:06:28,510 --> 00:06:33,010
inner HTML and outer HTML these could be

00:06:31,540 --> 00:06:35,280
effectively be used to change your Dom

00:06:33,010 --> 00:06:38,880
which is why it's a sink there

00:06:35,280 --> 00:06:41,400
okay now let's get into the actual fun

00:06:38,880 --> 00:06:43,770
of things recently I was been testing

00:06:41,400 --> 00:06:48,210
one of an application wherein we found

00:06:43,770 --> 00:06:50,310
Adamek sucess but there were two

00:06:48,210 --> 00:06:52,800
scenarios that were noticed here it was

00:06:50,310 --> 00:06:55,560
basically said that the application or

00:06:52,800 --> 00:06:58,230
this bug is detected only inside an

00:06:55,560 --> 00:07:00,630
authenticated session we take care of a

00:06:58,230 --> 00:07:03,419
lot of security controls in there the

00:07:00,630 --> 00:07:04,950
application cannot be put inside I frame

00:07:03,419 --> 00:07:06,240
so that you cannot do and self only

00:07:04,950 --> 00:07:08,460
exercise and stuff like that so

00:07:06,240 --> 00:07:10,560
effectively saying that hey this is a

00:07:08,460 --> 00:07:13,380
very low priority bug here yes we agreed

00:07:10,560 --> 00:07:14,970
sir bug but it's not a bug and the other

00:07:13,380 --> 00:07:16,380
thing that they told me was we

00:07:14,970 --> 00:07:17,610
understand this is the file upload which

00:07:16,380 --> 00:07:21,450
is what I showed you a few minutes back

00:07:17,610 --> 00:07:24,240
and they said it's a file name what will

00:07:21,450 --> 00:07:26,190
you do maximum with this all the special

00:07:24,240 --> 00:07:28,260
characters that you need to put inside a

00:07:26,190 --> 00:07:30,630
file name or blocked by the operating

00:07:28,260 --> 00:07:33,930
system how would you even create an

00:07:30,630 --> 00:07:35,460
exploit around this so this were the two

00:07:33,930 --> 00:07:36,870
challenges that season the problem is

00:07:35,460 --> 00:07:38,820
that the developers did not tell me it's

00:07:36,870 --> 00:07:40,620
a nota but they don't know yes we will

00:07:38,820 --> 00:07:42,810
fix this issue but it's a very low

00:07:40,620 --> 00:07:44,729
priority issue the problem with the low

00:07:42,810 --> 00:07:47,790
priority issues it gets pushed off and

00:07:44,729 --> 00:07:49,620
it gets slower to come in and the

00:07:47,790 --> 00:07:52,440
application needs to go life and I was

00:07:49,620 --> 00:07:56,880
worried that it could compromise so I

00:07:52,440 --> 00:07:58,860
had to create an exploit before we go to

00:07:56,880 --> 00:08:05,130
win let me show you a demo of the actual

00:07:58,860 --> 00:08:08,010
exploitation itself so I basically

00:08:05,130 --> 00:08:09,539
created a test application because I

00:08:08,010 --> 00:08:12,240
can't show you the actual application

00:08:09,539 --> 00:08:13,620
itself a lot of legalities and stuff

00:08:12,240 --> 00:08:16,229
like that I can't show you the actual

00:08:13,620 --> 00:08:19,590
application so let me show you a simple

00:08:16,229 --> 00:08:28,020
thing pretty much similar like this

00:08:19,590 --> 00:08:30,450
we're in a user would take a a file name

00:08:28,020 --> 00:08:32,010
and the file name was being reflected so

00:08:30,450 --> 00:08:34,680
what the developer did was he just took

00:08:32,010 --> 00:08:36,539
the file name he trusted it and he just

00:08:34,680 --> 00:08:38,610
placed it on the DOM and effectively it

00:08:36,539 --> 00:08:40,650
created a cross-site scripting which is

00:08:38,610 --> 00:08:42,360
the Dom exercise but the problem now is

00:08:40,650 --> 00:08:44,850
the one that we discussed how do you

00:08:42,360 --> 00:08:48,840
weaponize this exploit this is where it

00:08:44,850 --> 00:08:51,060
came in let me show you something

00:08:48,840 --> 00:08:58,410
how many of you know of a amazing tool

00:08:51,060 --> 00:09:01,320
called beef okay this is beef beef

00:08:58,410 --> 00:09:06,060
allows you to control browsers it's an

00:09:01,320 --> 00:09:07,530
amazing tool when so a lot of cross-site

00:09:06,060 --> 00:09:09,300
scripting and I know people think that

00:09:07,530 --> 00:09:11,190
it's just alert boxes it's not really

00:09:09,300 --> 00:09:12,720
alert boxes it gives me capability run

00:09:11,190 --> 00:09:15,630
execute JavaScript that's the real

00:09:12,720 --> 00:09:16,860
problem to prove a point I wanted to

00:09:15,630 --> 00:09:24,990
show that hey I'm going to control your

00:09:16,860 --> 00:09:33,050
browser so let's do this so I'm going to

00:09:24,990 --> 00:09:35,040
take the actual exploit all right either

00:09:33,050 --> 00:09:37,050
everything about your information of

00:09:35,040 --> 00:09:39,240
your browser if it seemed obvious

00:09:37,050 --> 00:09:41,250
localhost here but it could be anywhere

00:09:39,240 --> 00:09:43,530
across the globe if if it had gone to

00:09:41,250 --> 00:09:46,950
production thankfully we fixed it after

00:09:43,530 --> 00:09:50,240
this demo that was done let me show you

00:09:46,950 --> 00:09:50,240
something let me show off a little bit

00:09:58,870 --> 00:10:03,400
do you see the CSR of token there this

00:10:01,540 --> 00:10:06,580
was a rails application so rails by

00:10:03,400 --> 00:10:07,660
default user CSR of protection so just

00:10:06,580 --> 00:10:09,790
by a cross-site scripting I could

00:10:07,660 --> 00:10:15,270
basically capture that what really was

00:10:09,790 --> 00:10:15,270
more crazy for them was the prompt

00:10:30,150 --> 00:10:35,010
it would actually send messages you can

00:10:32,700 --> 00:10:37,110
craft HTML you can create whatever you

00:10:35,010 --> 00:10:38,850
want beef allows you to do anything that

00:10:37,110 --> 00:10:41,820
you really think about that's the power

00:10:38,850 --> 00:10:48,330
of this one coming back to the exploit I

00:10:41,820 --> 00:10:50,850
may go back to the presentation okay so

00:10:48,330 --> 00:10:52,650
if you look at this how did I solve the

00:10:50,850 --> 00:10:55,890
problem the two problems that were there

00:10:52,650 --> 00:10:57,230
the application being internal it also

00:10:55,890 --> 00:11:00,630
had one of the features that the

00:10:57,230 --> 00:11:03,930
administrators of this application could

00:11:00,630 --> 00:11:06,270
accept USB disks from people and they

00:11:03,930 --> 00:11:07,770
could have image files and they had to

00:11:06,270 --> 00:11:09,090
upload these images and they had to do

00:11:07,770 --> 00:11:11,130
some work with it that was the

00:11:09,090 --> 00:11:12,480
functionality so I had a way that I

00:11:11,130 --> 00:11:15,300
could take my exploit to the

00:11:12,480 --> 00:11:17,520
administrator itself second problem how

00:11:15,300 --> 00:11:19,020
do you deal with special characters not

00:11:17,520 --> 00:11:20,850
being allowed by the operating system

00:11:19,020 --> 00:11:22,860
itself because I have to write a file

00:11:20,850 --> 00:11:24,510
and put it on the USB disk and give it

00:11:22,860 --> 00:11:26,730
to the administrator how do you solve

00:11:24,510 --> 00:11:29,790
that problem again JavaScript if you

00:11:26,730 --> 00:11:33,320
really look at it all I did was I made I

00:11:29,790 --> 00:11:36,540
exploit converted it into base64 and

00:11:33,320 --> 00:11:39,600
used to the a to b to do the job so then

00:11:36,540 --> 00:11:43,740
i sent it to eval to execute it's an as

00:11:39,600 --> 00:11:45,240
simple as activity as that but in this i

00:11:43,740 --> 00:11:48,360
found some very interesting things that

00:11:45,240 --> 00:11:51,690
came out of it evil generally supposed

00:11:48,360 --> 00:11:54,060
to run arbitrary string which can be

00:11:51,690 --> 00:11:57,930
evaluated as javascript i did not work

00:11:54,060 --> 00:12:00,840
it wasted an hour of working with it i

00:11:57,930 --> 00:12:04,230
realized that when you use eval in a

00:12:00,840 --> 00:12:05,970
file attribute it does not work so what

00:12:04,230 --> 00:12:09,510
I had to do was if you look at the first

00:12:05,970 --> 00:12:12,180
one I changed evil 2 is equal to eval

00:12:09,510 --> 00:12:14,910
and then executed it with evil 2 and it

00:12:12,180 --> 00:12:16,710
simply works so some controls that the

00:12:14,910 --> 00:12:20,420
browser started putting in could be just

00:12:16,710 --> 00:12:20,420
bypassed using a simple fix like that

00:12:20,870 --> 00:12:29,040
that was what the first exploit was

00:12:24,290 --> 00:12:31,890
moving on JavaScript templating engines

00:12:29,040 --> 00:12:34,470
so these days we have to work with a lot

00:12:31,890 --> 00:12:38,460
of templating engines some of it are not

00:12:34,470 --> 00:12:40,140
necessarily the top end of it sometimes

00:12:38,460 --> 00:12:41,610
we even come and scenarios where people

00:12:40,140 --> 00:12:43,380
have created their own templating

00:12:41,610 --> 00:12:44,040
engines what are these templating

00:12:43,380 --> 00:12:45,899
engines these are

00:12:44,040 --> 00:12:47,220
very simple there is a piece of data

00:12:45,899 --> 00:12:49,920
that is coming in it could be through a

00:12:47,220 --> 00:12:53,279
jason and the developer has basically

00:12:49,920 --> 00:12:55,649
said that there are patterns within that

00:12:53,279 --> 00:12:57,600
he has written some patterns the data is

00:12:55,649 --> 00:12:59,579
going to be that is received from the

00:12:57,600 --> 00:13:01,560
user or could be whatever method is

00:12:59,579 --> 00:13:05,389
going to be filtered and then these

00:13:01,560 --> 00:13:05,389
placeholders are going to be changed and

00:13:06,680 --> 00:13:10,620
basically this was a beautiful exploit

00:13:09,149 --> 00:13:13,350
by a friend of mine called nafisa Hamid

00:13:10,620 --> 00:13:15,209
we initially found out by a gentleman

00:13:13,350 --> 00:13:17,910
called Mario the links are provided

00:13:15,209 --> 00:13:20,880
there so what this basically does is

00:13:17,910 --> 00:13:22,259
then some filtering wherein the data is

00:13:20,880 --> 00:13:25,170
coming back and there is some filtering

00:13:22,259 --> 00:13:26,730
that is there but how do you bypass this

00:13:25,170 --> 00:13:28,970
filtering that is what this demo is all

00:13:26,730 --> 00:13:28,970
about

00:13:36,560 --> 00:13:44,100
cancel this so I have not written this

00:13:40,830 --> 00:13:46,260
piece of application into my blog or

00:13:44,100 --> 00:13:49,529
test application yet it's still in my

00:13:46,260 --> 00:13:51,300
jsfiddle but let's do this one so if you

00:13:49,529 --> 00:13:53,670
look at this piece of code it's a very

00:13:51,300 --> 00:13:57,540
simple thing it's going to take my users

00:13:53,670 --> 00:13:58,680
input there is a placeholder here which

00:13:57,540 --> 00:14:01,800
is could be like your templating engine

00:13:58,680 --> 00:14:03,750
which will change the placeholder please

00:14:01,800 --> 00:14:06,149
notice that there is a filtering that is

00:14:03,750 --> 00:14:07,890
done the filtering function here is a

00:14:06,149 --> 00:14:09,330
standard filtering function which

00:14:07,890 --> 00:14:13,050
basically will mean sure that the data

00:14:09,330 --> 00:14:16,020
output you put in so basically this is

00:14:13,050 --> 00:14:20,040
going to take a value and make it a

00:14:16,020 --> 00:14:21,660
image' SRC the data if you notice the

00:14:20,040 --> 00:14:24,120
placeholder is between two single puts

00:14:21,660 --> 00:14:27,120
so to break out of this context you have

00:14:24,120 --> 00:14:29,370
to break out of a single quote and then

00:14:27,120 --> 00:14:30,450
you can pass your standard on error or

00:14:29,370 --> 00:14:33,360
something like that which will execute

00:14:30,450 --> 00:14:35,220
your JavaScript but please notice that

00:14:33,360 --> 00:14:37,410
there is a filtering condition here

00:14:35,220 --> 00:14:39,630
which basically says that if there is a

00:14:37,410 --> 00:14:41,250
single pole double quote or any of the

00:14:39,630 --> 00:14:42,540
angle of brackets that are there which

00:14:41,250 --> 00:14:44,459
are what are the ones that you need to

00:14:42,540 --> 00:14:47,010
break out of this one text are being

00:14:44,459 --> 00:14:54,180
removed now how do you break out of this

00:14:47,010 --> 00:14:55,980
one let's just do a small demo of it see

00:14:54,180 --> 00:14:58,890
this one if you see this it's basically

00:14:55,980 --> 00:15:01,589
saying image' SRC into whatever value

00:14:58,890 --> 00:15:03,240
I've crossed it and gone now let's say

00:15:01,589 --> 00:15:05,250
we try break out of this one the

00:15:03,240 --> 00:15:08,570
standard one that any car side scripting

00:15:05,250 --> 00:15:08,570
I would start with something like this

00:15:16,970 --> 00:15:21,980
please notice it is still within the

00:15:19,250 --> 00:15:25,310
single quotes it's not gone out how do

00:15:21,980 --> 00:15:27,800
you break out of this context if you do

00:15:25,310 --> 00:15:32,990
not break out of this context the filter

00:15:27,800 --> 00:15:34,459
is actually working that means that the

00:15:32,990 --> 00:15:36,850
country the control that the developer

00:15:34,459 --> 00:15:39,649
has placed is actually good and it works

00:15:36,850 --> 00:15:43,189
but there is a problem here and which is

00:15:39,649 --> 00:15:45,199
what Mario had pointed out that browsers

00:15:43,189 --> 00:15:47,540
behave a little different there is

00:15:45,199 --> 00:15:51,199
something called a mutation XSS which

00:15:47,540 --> 00:15:54,769
basically means that how let me show

00:15:51,199 --> 00:15:56,980
this one and let me then explain about

00:15:54,769 --> 00:15:56,980
it

00:16:13,480 --> 00:16:20,079
please notice the difference now see

00:16:17,230 --> 00:16:21,699
what has happened there is actually a

00:16:20,079 --> 00:16:23,410
difference in the way the output has

00:16:21,699 --> 00:16:25,209
come back last time the data used to

00:16:23,410 --> 00:16:25,959
come within the single quotes itself but

00:16:25,209 --> 00:16:31,839
this time there is a small difference

00:16:25,959 --> 00:16:33,610
there and let's click it yeah alert nine

00:16:31,839 --> 00:16:36,550
which effectively says I execute

00:16:33,610 --> 00:16:39,760
javascript in your context now what is

00:16:36,550 --> 00:16:42,670
the why was this happen it happened

00:16:39,760 --> 00:16:45,910
because how JavaScript string replace

00:16:42,670 --> 00:16:48,070
function works in the ACMA script the

00:16:45,910 --> 00:16:50,350
most of the string replaced functions

00:16:48,070 --> 00:16:52,720
take two parameters it takes one input

00:16:50,350 --> 00:16:54,790
the output change whatever it is there

00:16:52,720 --> 00:16:56,110
but across prepped and JavaScript our

00:16:54,790 --> 00:16:58,570
little different they behave a little

00:16:56,110 --> 00:17:02,050
differently what in this case what it

00:16:58,570 --> 00:17:05,559
has done is when you put a dollar or

00:17:02,050 --> 00:17:07,990
backtick what happens is it can't it

00:17:05,559 --> 00:17:11,589
Matt it returns back the string that it

00:17:07,990 --> 00:17:14,559
matched in this case the image SRC

00:17:11,589 --> 00:17:16,720
single quote and it gives it back and

00:17:14,559 --> 00:17:18,429
when we added the other components we

00:17:16,720 --> 00:17:20,679
are effectively closing the whole single

00:17:18,429 --> 00:17:23,559
time the whole image tag and because

00:17:20,679 --> 00:17:25,449
it's a whole image SRC equal to a single

00:17:23,559 --> 00:17:27,160
quote and then I error thing the browser

00:17:25,449 --> 00:17:30,040
will basically render the image it will

00:17:27,160 --> 00:17:31,299
try reading that file that is they're

00:17:30,040 --> 00:17:32,530
effectively it's not going to get the

00:17:31,299 --> 00:17:35,530
file so it's going to go into that on

00:17:32,530 --> 00:17:37,570
error and execute this itself that was

00:17:35,530 --> 00:17:38,919
the whole point see the reason being

00:17:37,570 --> 00:17:40,720
with templating instance is what we

00:17:38,919 --> 00:17:43,059
notice is most of the time filters like

00:17:40,720 --> 00:17:44,799
this which thinks that the context is

00:17:43,059 --> 00:17:46,480
within a single quote or a singer with a

00:17:44,799 --> 00:17:48,760
double code which cannot be escaped it

00:17:46,480 --> 00:17:51,160
is very secure but that's not the case

00:17:48,760 --> 00:17:53,530
you need to know about how acma script

00:17:51,160 --> 00:17:55,000
works understanding how the string

00:17:53,530 --> 00:17:56,200
replaced on most of the templating is

00:17:55,000 --> 00:17:57,820
actually using a string replace

00:17:56,200 --> 00:18:06,250
functions how do you basically

00:17:57,820 --> 00:18:07,900
understand how the system works there so

00:18:06,250 --> 00:18:09,790
that was what it is I have given in some

00:18:07,900 --> 00:18:11,460
more information of where it is and you

00:18:09,790 --> 00:18:14,770
could pick it up from there and

00:18:11,460 --> 00:18:16,929
information on that moving on this is

00:18:14,770 --> 00:18:19,000
another very interesting exploit that

00:18:16,929 --> 00:18:21,669
came up recently with hacker 1 and

00:18:19,000 --> 00:18:23,260
hacker one basically said hey we were

00:18:21,669 --> 00:18:25,179
affected by this we gave out a bug

00:18:23,260 --> 00:18:26,730
bounty and i forgot the gentleman's name

00:18:25,179 --> 00:18:27,960
who found it out

00:18:26,730 --> 00:18:30,210
and there was a good amount of payment

00:18:27,960 --> 00:18:32,730
for this one I found this very

00:18:30,210 --> 00:18:35,940
interesting because some when you see

00:18:32,730 --> 00:18:40,200
this you really see the power of how

00:18:35,940 --> 00:18:44,929
browsers really work let's get back to

00:18:40,200 --> 00:18:44,929
this one so let me create a new blog

00:18:58,990 --> 00:19:05,050
please notice I've just created a simple

00:19:00,910 --> 00:19:06,850
one test test just one and there is a

00:19:05,050 --> 00:19:10,660
link to something here and that's what

00:19:06,850 --> 00:19:13,840
the idea is and you submit it if you see

00:19:10,660 --> 00:19:15,130
that it's a simple blog with probably

00:19:13,840 --> 00:19:19,920
some references that are given or

00:19:15,130 --> 00:19:23,700
something like that you click the link

00:19:19,920 --> 00:19:23,700
did you see any change

00:19:29,460 --> 00:19:38,549
look at the parent the parent can be

00:19:35,370 --> 00:19:43,049
controlled the parent was effectively

00:19:38,549 --> 00:19:45,750
127 001 8,000 port right i want to made

00:19:43,049 --> 00:19:47,190
it go to beef I just has an idea showing

00:19:45,750 --> 00:19:49,080
your beef project effectively I could

00:19:47,190 --> 00:19:50,789
have created a HTML page and exploited

00:19:49,080 --> 00:19:52,140
this guy with that beef again but I

00:19:50,789 --> 00:19:53,730
didn't want to show that i wanted to

00:19:52,140 --> 00:19:55,649
show something different which is why i

00:19:53,730 --> 00:19:57,330
chose to use put the beef project itself

00:19:55,649 --> 00:20:00,590
just to give you an idea what can be

00:19:57,330 --> 00:20:03,480
achieved here imagine this a fake

00:20:00,590 --> 00:20:04,919
banking application all you know it is

00:20:03,480 --> 00:20:07,020
you went to a blog you click the link

00:20:04,919 --> 00:20:09,029
and you see your banking and with

00:20:07,020 --> 00:20:12,029
technology our attack sequences like tab

00:20:09,029 --> 00:20:13,980
nabbing which is you have so many tabs

00:20:12,029 --> 00:20:16,289
open i have multiple tabs when I work

00:20:13,980 --> 00:20:17,730
with and he just put a fav icon there it

00:20:16,289 --> 00:20:19,470
will look like you are into your gmail

00:20:17,730 --> 00:20:21,390
or you are on internet browsing site

00:20:19,470 --> 00:20:23,159
something like that an effect you could

00:20:21,390 --> 00:20:27,779
be just giving away your credentials to

00:20:23,159 --> 00:20:30,510
someone else how simple is that how that

00:20:27,779 --> 00:20:34,860
was the other very interesting exploit

00:20:30,510 --> 00:20:37,289
that I worked with the one that also

00:20:34,860 --> 00:20:38,490
that I wanted to show on my last one

00:20:37,289 --> 00:20:41,370
that I wanted to show about was

00:20:38,490 --> 00:20:43,770
something called a window dot name what

00:20:41,370 --> 00:20:47,460
is window dot name is one of the very

00:20:43,770 --> 00:20:49,380
unique properties how many of you know

00:20:47,460 --> 00:20:57,270
it's actually a cross-domain accessible

00:20:49,380 --> 00:21:02,580
property okay do you see a risk because

00:20:57,270 --> 00:21:05,250
of this yahoo had a huge DOM exercise a

00:21:02,580 --> 00:21:06,809
long time back using this PM pacific one

00:21:05,250 --> 00:21:09,870
it's fixed at this moment it doesn't

00:21:06,809 --> 00:21:14,610
have it anymore but just using a window

00:21:09,870 --> 00:21:17,520
dot name let me show you a demo it's a

00:21:14,610 --> 00:21:18,960
very simple one by the way before i go

00:21:17,520 --> 00:21:20,429
into this one i forgot that i didn't

00:21:18,960 --> 00:21:24,840
show you what i did when the previous

00:21:20,429 --> 00:21:27,899
one the previous one it's as simple as

00:21:24,840 --> 00:21:31,770
this it was again using a window dot

00:21:27,899 --> 00:21:35,419
opener dot location property what i did

00:21:31,770 --> 00:21:39,389
was i just have so once it landed on the

00:21:35,419 --> 00:21:41,730
attackers page it said that change the

00:21:39,389 --> 00:21:42,960
opener the opener in this case being the

00:21:41,730 --> 00:21:45,330
parent itself

00:21:42,960 --> 00:21:46,950
so effectively you can use this a child

00:21:45,330 --> 00:21:48,870
could basically change how the parent

00:21:46,950 --> 00:21:50,340
would behave that is what the previous

00:21:48,870 --> 00:21:52,559
one was sorry I didn't show you the last

00:21:50,340 --> 00:21:56,970
time the new one that I wanted to show

00:21:52,559 --> 00:21:59,070
you about is a very simple one something

00:21:56,970 --> 00:22:00,990
like this where in here what we're going

00:21:59,070 --> 00:22:04,919
to do is we are going to open a window

00:22:00,990 --> 00:22:10,049
itself or use JavaScript's window dot

00:22:04,919 --> 00:22:11,700
open to open another child case in this

00:22:10,049 --> 00:22:13,799
case so the last time we were at the

00:22:11,700 --> 00:22:15,600
blog page and we opened another

00:22:13,799 --> 00:22:19,080
application this time we are going to be

00:22:15,600 --> 00:22:30,419
at the attacker page and we are going to

00:22:19,080 --> 00:22:34,520
use the blog as my victim so I'm just

00:22:30,419 --> 00:22:34,520
going to close this go back here

00:22:42,250 --> 00:22:53,320
please notice here the page at 127 8,000

00:22:48,040 --> 00:22:56,770
is saying that hello to 90 80 it was 90

00:22:53,320 --> 00:22:59,740
80 which opened up this insecure blog

00:22:56,770 --> 00:23:05,520
right so effectively information that

00:22:59,740 --> 00:23:07,540
the 90 80 domain set was read by the

00:23:05,520 --> 00:23:11,590
insecure blog which is running on port

00:23:07,540 --> 00:23:13,720
8000 the rideau it is different same 127

00:23:11,590 --> 00:23:16,150
00 but i am sure most of you understand

00:23:13,720 --> 00:23:17,800
about same origin policy is and it is

00:23:16,150 --> 00:23:20,950
different domains it's effectively

00:23:17,800 --> 00:23:22,420
considered a different domain so data

00:23:20,950 --> 00:23:25,260
communication between the two are

00:23:22,420 --> 00:23:28,000
controlled and restricted and

00:23:25,260 --> 00:23:31,650
effectively what we did was we use this

00:23:28,000 --> 00:23:34,810
component here to basically say that I

00:23:31,650 --> 00:23:41,110
as a user I'm going to give you some

00:23:34,810 --> 00:23:43,930
data now you as a user is basically

00:23:41,110 --> 00:23:49,090
going to take this data and convert this

00:23:43,930 --> 00:23:50,890
I or read this data and sorry I lost of

00:23:49,090 --> 00:23:53,980
your thoughts there I was just looking

00:23:50,890 --> 00:23:55,900
at the time so what it basically is let

00:23:53,980 --> 00:23:58,470
me just go into this and show you how it

00:23:55,900 --> 00:23:58,470
actually happened

00:24:03,520 --> 00:24:11,330
as simple as that if you look at it even

00:24:09,230 --> 00:24:13,700
the Yahoo exploit had a similar one two

00:24:11,330 --> 00:24:17,360
functions if you if you think of it what

00:24:13,700 --> 00:24:19,580
I did was in the global space it took an

00:24:17,360 --> 00:24:23,360
even the data was picked up and being

00:24:19,580 --> 00:24:26,120
stored inside a variable called tag but

00:24:23,360 --> 00:24:27,710
a function called add also exists it

00:24:26,120 --> 00:24:29,930
could be a very simple thing in the real

00:24:27,710 --> 00:24:34,730
thing in yahoo what it happened was it

00:24:29,930 --> 00:24:37,750
was using their ad based JavaScript

00:24:34,730 --> 00:24:42,290
which was availing some components

00:24:37,750 --> 00:24:45,020
before sanitization and it also did at a

00:24:42,290 --> 00:24:47,480
different function the same object was

00:24:45,020 --> 00:24:48,860
being filled up with the value that is

00:24:47,480 --> 00:24:50,930
being filled in the top dot name

00:24:48,860 --> 00:24:52,730
doctored name is nothing but the same as

00:24:50,930 --> 00:24:54,740
window dot name it's just like an alias

00:24:52,730 --> 00:24:56,810
there so effectively whatever is there

00:24:54,740 --> 00:24:59,180
you could basically exploit it with it

00:24:56,810 --> 00:25:02,090
how do you exploit this very simple one

00:24:59,180 --> 00:25:04,430
if you notice this this is awaited you

00:25:02,090 --> 00:25:06,760
do a window dot open you basically set

00:25:04,430 --> 00:25:09,800
which URL you want to open and you sit

00:25:06,760 --> 00:25:12,050
the alert function or any JavaScript

00:25:09,800 --> 00:25:15,950
that is there and it will magically get

00:25:12,050 --> 00:25:17,810
popped up there this could be something

00:25:15,950 --> 00:25:19,760
that you could use to even do something

00:25:17,810 --> 00:25:21,740
called a Dom covering attacks I probably

00:25:19,760 --> 00:25:24,920
don't pronounce it properly what

00:25:21,740 --> 00:25:30,860
effectively it means is that when you

00:25:24,920 --> 00:25:33,680
can open an iframe as a child the child

00:25:30,860 --> 00:25:37,730
iframe can set variables or global

00:25:33,680 --> 00:25:39,620
variables inside your parent so imagine

00:25:37,730 --> 00:25:41,810
you have an application which loads or

00:25:39,620 --> 00:25:44,710
iframe the child I frame could set

00:25:41,810 --> 00:25:47,150
saying that hey my flag is equal to true

00:25:44,710 --> 00:25:48,470
what would happen is the parent has some

00:25:47,150 --> 00:25:50,510
control or structures which basically

00:25:48,470 --> 00:25:52,460
sees if the flag is true do some

00:25:50,510 --> 00:25:54,560
operations the child which is an

00:25:52,460 --> 00:25:56,900
untrusted component can do the similar

00:25:54,560 --> 00:25:59,900
attack and change values in the parent

00:25:56,900 --> 00:26:02,390
itself that was the power of it but you

00:25:59,900 --> 00:26:04,100
could see with controls like extreme

00:26:02,390 --> 00:26:05,600
options being in there you may want to

00:26:04,100 --> 00:26:10,900
say that hey that risk is getting

00:26:05,600 --> 00:26:10,900
reduced now

00:26:11,669 --> 00:26:16,650
now that we spoke about all this how do

00:26:14,770 --> 00:26:21,010
you how do you automate these things

00:26:16,650 --> 00:26:24,010
what is the thing that we are the point

00:26:21,010 --> 00:26:27,910
that I have so Java scripts are getting

00:26:24,010 --> 00:26:30,039
huge today we have applications let's

00:26:27,910 --> 00:26:32,440
say angular or a meat-eor which is so

00:26:30,039 --> 00:26:34,720
huge the amount of time that you can you

00:26:32,440 --> 00:26:37,000
do this manually can you go and check

00:26:34,720 --> 00:26:39,039
every component it's simply not possible

00:26:37,000 --> 00:26:42,010
the amount of interesting time we have

00:26:39,039 --> 00:26:45,490
is very less but we do need to guarantee

00:26:42,010 --> 00:26:51,340
code coverage we need to say that we are

00:26:45,490 --> 00:26:54,070
able to at least that is to some extent

00:26:51,340 --> 00:26:56,980
give some information saying that we are

00:26:54,070 --> 00:26:59,799
able to fix some of these issues how do

00:26:56,980 --> 00:27:03,039
we do it the solution is earlier there

00:26:59,799 --> 00:27:05,860
was a beautiful tool called Dom it a

00:27:03,039 --> 00:27:07,600
tool by stefano de pelo but it's just

00:27:05,860 --> 00:27:10,179
that you have to pay money for it I

00:27:07,600 --> 00:27:13,690
prefer to use folkish written by another

00:27:10,179 --> 00:27:16,000
friend called nafisa Hamid the reason I

00:27:13,690 --> 00:27:21,130
choose this is it's easier to use free

00:27:16,000 --> 00:27:25,809
what more can it be better so it works

00:27:21,130 --> 00:27:30,090
by all you need to do is it's basically

00:27:25,809 --> 00:27:33,070
a Chrome extension you go ahead and you

00:27:30,090 --> 00:27:38,140
put the application that you want let's

00:27:33,070 --> 00:27:40,289
say localhost let me just use 127 this

00:27:38,140 --> 00:27:40,289
time

00:27:44,660 --> 00:27:48,169
and just keep browsing

00:28:05,510 --> 00:28:10,580
if you keep noticing it will start

00:28:08,030 --> 00:28:13,640
seeing all your sources and sinks and

00:28:10,580 --> 00:28:15,830
keep displaying it to you see if it like

00:28:13,640 --> 00:28:18,080
look at it it basically says that hey I

00:28:15,830 --> 00:28:19,940
see a document dot cookie that is being

00:28:18,080 --> 00:28:22,220
said here which could be picked up I

00:28:19,940 --> 00:28:23,870
have a window dot name which is what

00:28:22,220 --> 00:28:26,240
effectively that application was doing

00:28:23,870 --> 00:28:29,150
it picks up every piece of information

00:28:26,240 --> 00:28:31,130
it basically how this works is he's

00:28:29,150 --> 00:28:33,680
hooked into every function that is there

00:28:31,130 --> 00:28:34,910
and it's please note this is not being

00:28:33,680 --> 00:28:37,220
statically done this is being

00:28:34,910 --> 00:28:39,170
dynamically done it is at real time

00:28:37,220 --> 00:28:41,990
analyzing what information it is there

00:28:39,170 --> 00:28:44,420
and it hooks into the actual function

00:28:41,990 --> 00:28:46,970
itself so let's say if evil is there it

00:28:44,420 --> 00:28:49,040
hooks into it and it sees that what is

00:28:46,970 --> 00:28:52,520
coming inside evil it also as the

00:28:49,040 --> 00:28:54,980
sources it marks the sources and and it

00:28:52,520 --> 00:28:57,380
marks even the sinks if it sees that a

00:28:54,980 --> 00:28:59,660
source that was entered is being

00:28:57,380 --> 00:29:01,160
detected at sync it will say that hey I

00:28:59,660 --> 00:29:03,500
have a source and a sink detected

00:29:01,160 --> 00:29:05,630
together and once you see it it brings

00:29:03,500 --> 00:29:06,950
it out here and when it detects that

00:29:05,630 --> 00:29:11,120
there is a Dom accesses the color

00:29:06,950 --> 00:29:12,800
changes and that is one of the a very

00:29:11,120 --> 00:29:15,200
easy way of doing some of these things

00:29:12,800 --> 00:29:16,850
so as a developer it could be as simple

00:29:15,200 --> 00:29:18,440
as that you know you run this

00:29:16,850 --> 00:29:20,120
application you finish all your

00:29:18,440 --> 00:29:22,580
application just keep running this tool

00:29:20,120 --> 00:29:24,530
and run Europe just browse through your

00:29:22,580 --> 00:29:26,030
application it will start telling you

00:29:24,530 --> 00:29:27,380
what are all your sources that are there

00:29:26,030 --> 00:29:29,000
it will also start telling you what are

00:29:27,380 --> 00:29:30,980
all your sinks it also will

00:29:29,000 --> 00:29:35,660
automatically start evaluating to tell

00:29:30,980 --> 00:29:37,220
you where are all the positive things

00:29:35,660 --> 00:29:39,260
that have actually happened where are

00:29:37,220 --> 00:29:42,920
the actual issues that have happened in

00:29:39,260 --> 00:29:45,560
this itself the other one that we are as

00:29:42,920 --> 00:29:49,480
a pen tester I like a lot is I can

00:29:45,560 --> 00:29:53,110
choose to put let's say window dot name

00:29:49,480 --> 00:29:56,120
and say window dot eval and I can say

00:29:53,110 --> 00:29:58,280
where are all the functions it's still

00:29:56,120 --> 00:30:00,440
not evaluated it here basically it will

00:29:58,280 --> 00:30:05,210
it will allow you to say huh so once

00:30:00,440 --> 00:30:09,200
again the output actually comes to your

00:30:05,210 --> 00:30:10,970
console so when you say identify you are

00:30:09,200 --> 00:30:13,280
effectively what it will show you is it

00:30:10,970 --> 00:30:15,410
will show you where all it sees that

00:30:13,280 --> 00:30:18,200
some source that has been picked up and

00:30:15,410 --> 00:30:18,980
it does it see a sink of the same input

00:30:18,200 --> 00:30:22,160
somewhere else

00:30:18,980 --> 00:30:24,169
and it helps as a mentor stuff to say

00:30:22,160 --> 00:30:26,030
that hey what are all the combinations

00:30:24,169 --> 00:30:27,650
of data that are there you have a chat

00:30:26,030 --> 00:30:29,000
with the developers you basically say

00:30:27,650 --> 00:30:30,650
hey what are the functions that you are

00:30:29,000 --> 00:30:32,900
using I can basically put those

00:30:30,650 --> 00:30:34,429
functions in here and weekly see so that

00:30:32,900 --> 00:30:36,320
i can guarantee some of these controls

00:30:34,429 --> 00:30:39,940
it doesn't take away your manual pen

00:30:36,320 --> 00:30:44,480
testing efforts but it it helps you to

00:30:39,940 --> 00:30:53,690
at least do some bits of it some of the

00:30:44,480 --> 00:30:57,290
other functions too I spoke about dom

00:30:53,690 --> 00:30:59,570
cobra wherein you can change the global

00:30:57,290 --> 00:31:01,010
variables right you can use this to find

00:30:59,570 --> 00:31:02,870
out what are all the different global

00:31:01,010 --> 00:31:05,330
variables that your system or this page

00:31:02,870 --> 00:31:07,160
on the 127 is basically using you can

00:31:05,330 --> 00:31:08,600
see that who is using them if any

00:31:07,160 --> 00:31:11,260
changes that are happening you can find

00:31:08,600 --> 00:31:11,260
them out from here

00:31:19,260 --> 00:31:25,280
but there are some known issues that are

00:31:22,080 --> 00:31:25,280
there like I'll show you something

00:31:34,899 --> 00:31:39,940
the same thing that I was working with

00:31:37,129 --> 00:31:43,249
doesn't seem to work when i use okish

00:31:39,940 --> 00:31:46,789
how do you figure that out is if you go

00:31:43,249 --> 00:31:48,469
to your thing here it tells you what are

00:31:46,789 --> 00:31:50,089
all the things that are hooked on you

00:31:48,469 --> 00:31:51,469
can even control some of these these are

00:31:50,089 --> 00:31:55,099
the parameters that you need to work

00:31:51,469 --> 00:31:57,229
with to like in this case I might have

00:31:55,099 --> 00:31:58,879
to tune some of these things basic

00:31:57,229 --> 00:32:00,649
reason is my application has not been

00:31:58,879 --> 00:32:02,359
written properly if you look at it every

00:32:00,649 --> 00:32:04,009
time I go to the new blog I have to

00:32:02,359 --> 00:32:06,829
refresh the page there because it's not

00:32:04,009 --> 00:32:12,259
properly written down yet I need to make

00:32:06,829 --> 00:32:13,819
those changes and doing some of these

00:32:12,259 --> 00:32:26,299
things okay should be able to help you

00:32:13,819 --> 00:32:28,699
there work with it so the insecure blog

00:32:26,299 --> 00:32:31,339
that I have is something that I and Alex

00:32:28,699 --> 00:32:34,129
are continues to work on it we are

00:32:31,339 --> 00:32:36,349
trying to put in as much Darmok senses

00:32:34,129 --> 00:32:39,139
that we find we try putting into them we

00:32:36,349 --> 00:32:40,940
start dumping or so the idea being is we

00:32:39,139 --> 00:32:43,369
want to learn ourselves so we try

00:32:40,940 --> 00:32:46,549
writing our own insecurities and try

00:32:43,369 --> 00:32:48,139
exploiting them like I'll the last one

00:32:46,549 --> 00:32:50,209
that I showed you about how templating

00:32:48,139 --> 00:32:51,469
engine works the idea that we have is we

00:32:50,209 --> 00:32:54,469
could create something like an avatar

00:32:51,469 --> 00:32:56,929
and which would update and real-time

00:32:54,469 --> 00:32:58,819
than avatar there which would have a

00:32:56,929 --> 00:33:01,099
simple filtering there and you could

00:32:58,819 --> 00:33:03,819
bypass that's the whole idea and it's

00:33:01,099 --> 00:33:06,289
available again at my github link there

00:33:03,819 --> 00:33:10,489
that's all pretty much I have to talk

00:33:06,289 --> 00:33:14,859
about and if any questions p % now thank

00:33:10,489 --> 00:33:17,690
you what's the solution for that

00:33:14,859 --> 00:33:19,429
underscore blank issue ah very good one

00:33:17,690 --> 00:33:21,139
sorry I didn't talk about it the fix is

00:33:19,429 --> 00:33:23,869
basically before you do a redirect

00:33:21,139 --> 00:33:26,629
basically set the window dot opener to

00:33:23,869 --> 00:33:28,219
null you set to the window dot opener to

00:33:26,629 --> 00:33:30,379
null effectively this problem will be

00:33:28,219 --> 00:33:32,979
solved that's the fix that hacker one is

00:33:30,379 --> 00:33:32,979

YouTube URL: https://www.youtube.com/watch?v=LVamMYljS4Q


