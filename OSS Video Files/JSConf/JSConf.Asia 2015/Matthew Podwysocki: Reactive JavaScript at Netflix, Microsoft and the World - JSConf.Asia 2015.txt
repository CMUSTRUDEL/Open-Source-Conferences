Title: Matthew Podwysocki: Reactive JavaScript at Netflix, Microsoft and the World - JSConf.Asia 2015
Publication date: 2015-12-30
Playlist: JSConf.Asia 2015
Description: 
	Whatâ€™s does a mouse drag event have in common with an Array of numbers? The answer to this question may surprise you: they are both collections. This key insight holds the key to dramatically simplifying asynchronous programming in JavaScript. We will talk about its usage at Netflix, Slack Microsoft solving concrete examples.

Matthew is a Principal SDE and open sourcerer at Microsoft with a focus on the Internet of Things, Reactive Programming At All Scales and teaching the next generation how to code. He currently works on the Reactive Extensions for all languages including JavaScript. He is passionate about open source, having helped the Node.js effort on Windows, to open sourcing many libraries at Microsoft.


JSConf.Asia - Red Dot Design Museum, Singapore - 20 November 2015.

Source: http://2015.jsconf.asia
Slides: https://github.com/mattpodwysocki/jsconfasia-2015

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:06,870 --> 00:00:13,259
hello and welcome to one of the last

00:00:09,000 --> 00:00:16,020
talks and before really get started what

00:00:13,259 --> 00:00:18,000
I wanted to kind of walk you through is

00:00:16,020 --> 00:00:20,279
is kind of some applications that we

00:00:18,000 --> 00:00:22,830
would typically write today and what do

00:00:20,279 --> 00:00:26,130
they all have in common so for example

00:00:22,830 --> 00:00:29,099
if we had a game such as as this what is

00:00:26,130 --> 00:00:32,099
it really doing well let's see we have a

00:00:29,099 --> 00:00:35,340
time loop or we're obviously reacting to

00:00:32,099 --> 00:00:38,250
events here if I can actually figure out

00:00:35,340 --> 00:00:39,600
what I'm doing here all of these sorts

00:00:38,250 --> 00:00:42,149
of things we have timers we have

00:00:39,600 --> 00:00:44,879
animation we have all sorts of things

00:00:42,149 --> 00:00:47,070
whether it's that even edge detection

00:00:44,879 --> 00:00:50,160
for example what do these all have in

00:00:47,070 --> 00:00:53,910
common you know even even simple things

00:00:50,160 --> 00:01:00,359
like coordination of of events together

00:00:53,910 --> 00:01:03,210
or real-time data analysis or or for

00:01:00,359 --> 00:01:05,580
example just a simple simple drawing

00:01:03,210 --> 00:01:09,150
mechanism what do all of these have in

00:01:05,580 --> 00:01:18,960
common you know even anything like Super

00:01:09,150 --> 00:01:21,360
Mario Brothers or or tutu MVC so

00:01:18,960 --> 00:01:23,700
hopefully that will come true and I

00:01:21,360 --> 00:01:31,229
cannot knock that off my list

00:01:23,700 --> 00:01:34,409
but text editors animation and even even

00:01:31,229 --> 00:01:35,810
even video players for example what do

00:01:34,409 --> 00:01:39,570
these all have in common

00:01:35,810 --> 00:01:42,150
you know this for example streaming live

00:01:39,570 --> 00:01:44,640
data really kind of cool kind of

00:01:42,150 --> 00:01:47,820
thinking but all of this is based upon

00:01:44,640 --> 00:01:51,390
and then especially here is based upon a

00:01:47,820 --> 00:01:56,280
very very simple simple concept and that

00:01:51,390 --> 00:01:58,469
is the observable and and reactive

00:01:56,280 --> 00:02:02,880
programming which we will talk about

00:01:58,469 --> 00:02:04,829
today so as I said there are a lot of

00:02:02,880 --> 00:02:06,780
different ways about thinking about

00:02:04,829 --> 00:02:09,090
these large applications that we're

00:02:06,780 --> 00:02:11,640
building today and so what we're going

00:02:09,090 --> 00:02:12,540
to be doing is really talking about how

00:02:11,640 --> 00:02:14,640
some of

00:02:12,540 --> 00:02:16,230
the larger corporations in the world

00:02:14,640 --> 00:02:19,500
have solved some of the really hard

00:02:16,230 --> 00:02:21,329
problems in a particular way by thinking

00:02:19,500 --> 00:02:23,670
very differently about how they write

00:02:21,329 --> 00:02:27,900
their applications whether it's Netflix

00:02:23,670 --> 00:02:30,000
slack or Microsoft or anyone else they

00:02:27,900 --> 00:02:32,400
all have some the same problems that you

00:02:30,000 --> 00:02:36,450
all do but they fought very very

00:02:32,400 --> 00:02:39,329
differently about how they did it so if

00:02:36,450 --> 00:02:41,909
you want to follow along at home you can

00:02:39,329 --> 00:02:46,109
you can do so there the slides are

00:02:41,909 --> 00:02:48,659
available now now the way I always like

00:02:46,109 --> 00:02:50,489
to start off with a talk is just to kind

00:02:48,659 --> 00:02:53,519
of give an alternative title for example

00:02:50,489 --> 00:02:55,349
I always stopped worrying about

00:02:53,519 --> 00:02:58,169
asynchronous programming and started to

00:02:55,349 --> 00:02:59,819
learn to love the observable so like I

00:02:58,169 --> 00:03:03,060
said it's going to be a little bit of a

00:02:59,819 --> 00:03:05,609
mind shift on how we do that and just

00:03:03,060 --> 00:03:09,000
because I love concurrency jokes and and

00:03:05,609 --> 00:03:12,180
who doesn't or I thought to myself I'll

00:03:09,000 --> 00:03:20,250
solve my problem with promises and

00:03:12,180 --> 00:03:22,349
events now have now problems - I dang so

00:03:20,250 --> 00:03:25,199
many people may wonder why I'm wearing

00:03:22,349 --> 00:03:29,459
this hat well I am a principal of

00:03:25,199 --> 00:03:32,220
software engineer at at a fairly large

00:03:29,459 --> 00:03:34,349
company but why wear this hat is is

00:03:32,220 --> 00:03:36,870
because I call myself an open sorcerer

00:03:34,349 --> 00:03:39,060
and what I mean by that is the fact that

00:03:36,870 --> 00:03:41,549
for the longest time at Microsoft I've

00:03:39,060 --> 00:03:44,310
been doing open-source in such a way

00:03:41,549 --> 00:03:47,430
that I've worked on such initiatives as

00:03:44,310 --> 00:03:50,549
getting node supported on Windows to

00:03:47,430 --> 00:03:52,079
open sourcing a large part of nets and

00:03:50,549 --> 00:03:55,439
that's been a lot of my

00:03:52,079 --> 00:03:59,669
behind-the-scenes work and this

00:03:55,439 --> 00:04:02,400
particular company and yeah I love that

00:03:59,669 --> 00:04:04,530
logo I really wish we had that one still

00:04:02,400 --> 00:04:06,689
to this day but this one is from 1981

00:04:04,530 --> 00:04:08,189
it's a real logo but I like to think of

00:04:06,689 --> 00:04:14,370
myself as putting a little bit more

00:04:08,189 --> 00:04:16,049
metal into into Microsoft so if people

00:04:14,370 --> 00:04:18,239
saw me last night I was talking about

00:04:16,049 --> 00:04:20,159
this particular project so if people

00:04:18,239 --> 00:04:21,659
want to talk about running note on

00:04:20,159 --> 00:04:23,510
phones you can come and talk to me

00:04:21,659 --> 00:04:25,830
afterwards I think it's a lot of a very

00:04:23,510 --> 00:04:27,750
interesting project about build

00:04:25,830 --> 00:04:30,030
the pure web and I think it's very very

00:04:27,750 --> 00:04:33,439
affable applicable especially at

00:04:30,030 --> 00:04:36,180
conferences when Wi-Fi can be scanned

00:04:33,439 --> 00:04:38,250
but the vast majority of what we're

00:04:36,180 --> 00:04:40,620
going to be talking about here is is my

00:04:38,250 --> 00:04:43,139
work on the reactive extensions now this

00:04:40,620 --> 00:04:47,009
is a thing that's we've been working on

00:04:43,139 --> 00:04:48,990
so since 2009 at Microsoft and really

00:04:47,009 --> 00:04:51,330
it's a fundamental shift on how we think

00:04:48,990 --> 00:04:53,879
about asynchronous programming it has

00:04:51,330 --> 00:04:56,159
its own history in which we were trying

00:04:53,879 --> 00:04:57,810
to solve problems with asynchronous

00:04:56,159 --> 00:05:02,069
programming before a lot of people

00:04:57,810 --> 00:05:06,330
actually had those problems this is 2009

00:05:02,069 --> 00:05:08,879
before before promises really existed we

00:05:06,330 --> 00:05:12,979
were trying to invent our own style of

00:05:08,879 --> 00:05:15,629
how we were to express both events and

00:05:12,979 --> 00:05:17,940
asynchronous callbacks in a simple way

00:05:15,629 --> 00:05:20,849
and so what we called ourselves as the

00:05:17,940 --> 00:05:23,969
Riyad we are a part of a larger program

00:05:20,849 --> 00:05:26,969
called Volta but we then shortened

00:05:23,969 --> 00:05:32,159
ourselves to reactive extensions or we

00:05:26,969 --> 00:05:35,639
just call ourselves rx pushers now what

00:05:32,159 --> 00:05:38,009
I really want to talk about is Netflix

00:05:35,639 --> 00:05:41,250
in particular and how many people have

00:05:38,009 --> 00:05:44,370
Netflix heard of Netflix I'm fair a fair

00:05:41,250 --> 00:05:47,819
number so there their goal is is fairly

00:05:44,370 --> 00:05:52,259
simple stream stream movies from any

00:05:47,819 --> 00:05:54,569
device and if you think about it at

00:05:52,259 --> 00:05:56,550
scale you're talking a lot of data

00:05:54,569 --> 00:05:58,259
you're talking one third of the u.s.

00:05:56,550 --> 00:06:00,930
broadband traffic I don't know where

00:05:58,259 --> 00:06:04,069
we're at what it is in other countries

00:06:00,930 --> 00:06:07,139
but that's a significant amount of

00:06:04,069 --> 00:06:11,270
things that they have to worry about so

00:06:07,139 --> 00:06:13,770
this is really a story on how Netflix

00:06:11,270 --> 00:06:15,900
Microsoft and others have sold some

00:06:13,770 --> 00:06:19,860
really fundamentally hard problems and

00:06:15,900 --> 00:06:21,419
building those large systems by just

00:06:19,860 --> 00:06:25,650
thinking a little bit differently about

00:06:21,419 --> 00:06:27,930
how they deal with with events so for

00:06:25,650 --> 00:06:30,509
anyone who actually has the Netflix

00:06:27,930 --> 00:06:32,759
player it's fundamentally asynchronous

00:06:30,509 --> 00:06:33,899
everything about it the last thing you

00:06:32,759 --> 00:06:36,959
would want to do is have that little

00:06:33,899 --> 00:06:38,699
spinny thing of death that Christian was

00:06:36,959 --> 00:06:39,090
talking about in terms of error handling

00:06:38,699 --> 00:06:41,940
and

00:06:39,090 --> 00:06:45,419
fourth so everything's app startup the

00:06:41,940 --> 00:06:49,430
player itself animations and the view

00:06:45,419 --> 00:06:54,000
model binding is all done asynchronously

00:06:49,430 --> 00:06:56,639
no blocking involved but that introduces

00:06:54,000 --> 00:06:59,190
a good number of problem that you're

00:06:56,639 --> 00:07:01,169
going to absolutely have when you're

00:06:59,190 --> 00:07:03,449
trying to do that whether it's memory

00:07:01,169 --> 00:07:06,139
leaks because you have so many open

00:07:03,449 --> 00:07:08,850
event handlers to race conditions where

00:07:06,139 --> 00:07:11,790
these two events have to have to happen

00:07:08,850 --> 00:07:13,320
in a certain order or this asynchronous

00:07:11,790 --> 00:07:16,410
callback has to happen in a certain

00:07:13,320 --> 00:07:18,750
order I that can be very very complex

00:07:16,410 --> 00:07:22,550
and not only that but this notion of

00:07:18,750 --> 00:07:25,229
callback hell is is very very real and

00:07:22,550 --> 00:07:27,389
it's not just because your your code is

00:07:25,229 --> 00:07:29,220
walking off the side of the page it's

00:07:27,389 --> 00:07:31,229
more along the lines of your company

00:07:29,220 --> 00:07:32,910
you're building these very complex state

00:07:31,229 --> 00:07:34,950
machines and you're not quite sure

00:07:32,910 --> 00:07:36,870
exactly where you are in the code

00:07:34,950 --> 00:07:38,580
because somewhere within all the

00:07:36,870 --> 00:07:40,139
callbacks is your state and you're not

00:07:38,580 --> 00:07:48,300
quite sure where you are in the

00:07:40,139 --> 00:07:51,600
computation so in 2014 they finally did

00:07:48,300 --> 00:07:55,500
a complete and utter redo on where they

00:07:51,600 --> 00:07:58,770
were so when they started in 2011 they

00:07:55,500 --> 00:08:01,260
had they had seven different platforms

00:07:58,770 --> 00:08:02,970
seven different languages all to

00:08:01,260 --> 00:08:05,490
describe doing these asynchronous

00:08:02,970 --> 00:08:08,099
operations as I showed you each one had

00:08:05,490 --> 00:08:10,440
its own way of thinking about it for the

00:08:08,099 --> 00:08:12,330
data binding for the data access and so

00:08:10,440 --> 00:08:14,669
forth and so what they did is they

00:08:12,330 --> 00:08:16,470
thought differently about how they were

00:08:14,669 --> 00:08:19,110
doing events so they could standardize

00:08:16,470 --> 00:08:22,800
on a single way of thinking about it

00:08:19,110 --> 00:08:25,320
not just not just having one library two

00:08:22,800 --> 00:08:28,050
libraries to do it but just thinking

00:08:25,320 --> 00:08:30,180
fundamentally different about it and so

00:08:28,050 --> 00:08:31,830
what they came up with is using the

00:08:30,180 --> 00:08:35,279
observables which we'll be talking about

00:08:31,830 --> 00:08:38,219
today as their base and what this is is

00:08:35,279 --> 00:08:41,339
it's a very language neutral approach to

00:08:38,219 --> 00:08:43,620
to solving asynchronous problems so what

00:08:41,339 --> 00:08:46,470
they were able to do is port what we've

00:08:43,620 --> 00:08:49,740
done already in JavaScript and on net to

00:08:46,470 --> 00:08:51,080
other languages such as groovy Scala

00:08:49,740 --> 00:08:54,710
Java

00:08:51,080 --> 00:08:56,570
Clojure and so forth so regardless of

00:08:54,710 --> 00:08:58,970
whether you were a front-end developer

00:08:56,570 --> 00:09:00,920
or a back-end developer you could easily

00:08:58,970 --> 00:09:03,170
switch between teams because you

00:09:00,920 --> 00:09:04,490
understood the paradigm it wasn't

00:09:03,170 --> 00:09:06,500
necessarily that you needed to

00:09:04,490 --> 00:09:10,270
understand language you understood the

00:09:06,500 --> 00:09:13,520
paradigm you understood the architecture

00:09:10,270 --> 00:09:15,740
so quite honestly why is this so

00:09:13,520 --> 00:09:18,460
important because real-time is

00:09:15,740 --> 00:09:21,530
everywhere and what we're doing today

00:09:18,460 --> 00:09:23,630
whether it's looking off of your phone

00:09:21,530 --> 00:09:24,370
and getting GPS data seeing where you

00:09:23,630 --> 00:09:28,130
are

00:09:24,370 --> 00:09:31,190
SMS traffic any number of these sensors

00:09:28,130 --> 00:09:33,140
well Twitter notifications anything how

00:09:31,190 --> 00:09:34,490
do you keep up with that how do you

00:09:33,140 --> 00:09:36,890
coordinate them all together without

00:09:34,490 --> 00:09:39,020
just giving up and just shoving them

00:09:36,890 --> 00:09:41,480
down your shirt it just it gets very

00:09:39,020 --> 00:09:45,680
very complicated very very quickly

00:09:41,480 --> 00:09:47,980
and unfortunately the given mechanisms

00:09:45,680 --> 00:09:51,370
that we have in JavaScript are terrible

00:09:47,980 --> 00:09:54,710
let's just face it I mean programming

00:09:51,370 --> 00:09:56,960
asynchronously in JavaScript today using

00:09:54,710 --> 00:09:59,870
events and using callbacks and using

00:09:56,960 --> 00:10:02,570
promises aren't exactly great they might

00:09:59,870 --> 00:10:05,330
be better in the future but right now it

00:10:02,570 --> 00:10:07,070
shows an utter lack of coordination here

00:10:05,330 --> 00:10:12,590
I don't know why the guy couldn't just

00:10:07,070 --> 00:10:17,480
put down one thing and I will so it even

00:10:12,590 --> 00:10:19,190
was a topic of concern even to the

00:10:17,480 --> 00:10:22,880
highest levels of the US government for

00:10:19,190 --> 00:10:24,500
example so that we'd shoot so President

00:10:22,880 --> 00:10:26,540
Kennedy simply choose to solve

00:10:24,500 --> 00:10:28,580
asynchronous programming and to do other

00:10:26,540 --> 00:10:30,980
things not because they're easy but

00:10:28,580 --> 00:10:33,380
because they are hard and then he

00:10:30,980 --> 00:10:35,060
realized afterwards after saying this he

00:10:33,380 --> 00:10:39,410
is like well maybe it is too hard and

00:10:35,060 --> 00:10:45,170
let's just go to the moon instead so he

00:10:39,410 --> 00:10:47,900
decided to go to the moon I think so

00:10:45,170 --> 00:10:50,090
like I said callback hell is really a

00:10:47,900 --> 00:10:52,580
thing and and like what I meant by that

00:10:50,090 --> 00:10:54,590
is the fact that we have here whether

00:10:52,580 --> 00:10:56,300
you're having a movie ticket and the

00:10:54,590 --> 00:10:58,370
player error and then you're trying to

00:10:56,300 --> 00:10:59,900
figure out where exactly are you okay if

00:10:58,370 --> 00:11:01,540
the players not initialized and

00:10:59,900 --> 00:11:04,160
initialize it and then try to finish

00:11:01,540 --> 00:11:07,040
okay going in to try to finish that

00:11:04,160 --> 00:11:08,899
I got where are you supposed to go from

00:11:07,040 --> 00:11:10,459
there oh yeah yeah you're supposed to go

00:11:08,899 --> 00:11:12,769
to that callback which might be

00:11:10,459 --> 00:11:16,550
authorized movie it just gets very

00:11:12,769 --> 00:11:18,319
complex and it turns into instead of a

00:11:16,550 --> 00:11:22,459
pyramid of numerous anything like that I

00:11:18,319 --> 00:11:25,069
call it a cow's head and I think it's

00:11:22,459 --> 00:11:27,579
very very easy to get burned on on those

00:11:25,069 --> 00:11:31,279
kinds of things because you have no idea

00:11:27,579 --> 00:11:33,769
where your status is where you're in the

00:11:31,279 --> 00:11:36,079
computation and you know if you're

00:11:33,769 --> 00:11:37,910
looking at these your stack traces you

00:11:36,079 --> 00:11:39,620
just get lost and it makes me want to

00:11:37,910 --> 00:11:42,439
jump out a window sometimes quite

00:11:39,620 --> 00:11:46,220
honestly and even when we're dealing

00:11:42,439 --> 00:11:48,560
with raw events by themselves you know

00:11:46,220 --> 00:11:50,509
we we still have to have whether the the

00:11:48,560 --> 00:11:52,610
mouse is down or not and the and the

00:11:50,509 --> 00:11:54,350
state that we happen to deal with well

00:11:52,610 --> 00:11:56,180
what if we want to go beyond that what

00:11:54,350 --> 00:12:00,829
if we want to add some delays to it or

00:11:56,180 --> 00:12:04,310
or or call a an agent make an AJAX call

00:12:00,829 --> 00:12:05,959
all of that then gets somehow lost

00:12:04,310 --> 00:12:08,300
because now you're having to deal with

00:12:05,959 --> 00:12:11,420
all of these three separate callbacks

00:12:08,300 --> 00:12:14,930
and having to decipher where all of your

00:12:11,420 --> 00:12:19,279
logic is going to be so yeah whoops

00:12:14,930 --> 00:12:22,579
indeed I is is it really is an enemy of

00:12:19,279 --> 00:12:24,709
the state and like I said all of these

00:12:22,579 --> 00:12:28,430
events that you're trying to to

00:12:24,709 --> 00:12:36,050
coordinate becomes very very hard to to

00:12:28,430 --> 00:12:38,149
juggle quite honestly so so in our

00:12:36,050 --> 00:12:41,120
infinite wisdom in JavaScript we came

00:12:38,149 --> 00:12:43,069
out with the this idea of promises so we

00:12:41,120 --> 00:12:45,170
would have this first-class notion of

00:12:43,069 --> 00:12:47,959
instead of dealing with callbacks we

00:12:45,170 --> 00:12:51,649
would deal with promises so with then we

00:12:47,959 --> 00:12:53,750
could take the aforementioned example

00:12:51,649 --> 00:12:55,759
and we could say player initialize then

00:12:53,750 --> 00:12:59,389
authorize movie or else it's a login

00:12:55,759 --> 00:13:01,389
error then play the movie or or it's an

00:12:59,389 --> 00:13:04,399
unauthorized you're not allowed to do it

00:13:01,389 --> 00:13:06,620
but you have problems with that and the

00:13:04,399 --> 00:13:11,509
problems is the way that it was designed

00:13:06,620 --> 00:13:13,009
in es2015 2015 or es6 as some people

00:13:11,509 --> 00:13:15,890
call it is the fact that there's no

00:13:13,009 --> 00:13:18,890
cancellation built right into the

00:13:15,890 --> 00:13:21,530
into the promise itself there isn't any

00:13:18,890 --> 00:13:24,980
you can certainly write it yourself but

00:13:21,530 --> 00:13:27,230
by default it isn't in there and in fact

00:13:24,980 --> 00:13:31,040
it actually became very much a point of

00:13:27,230 --> 00:13:32,810
contention when when people were you

00:13:31,040 --> 00:13:34,970
starting to use the fetch API and

00:13:32,810 --> 00:13:38,180
realizing that they were using you know

00:13:34,970 --> 00:13:40,640
xh the xhr like everybody else was used

00:13:38,180 --> 00:13:45,020
to and then the right well so how do i

00:13:40,640 --> 00:13:47,750
cancel that oops so they kind of left

00:13:45,020 --> 00:13:50,510
that out and so this is a fairly long

00:13:47,750 --> 00:13:54,680
thread here as you can see 21

00:13:50,510 --> 00:13:56,750
participants and oh yeah 204 comments so

00:13:54,680 --> 00:13:58,400
I think that kind of solves the problem

00:13:56,750 --> 00:14:01,280
of how many engineers does it take to

00:13:58,400 --> 00:14:05,480
cancel a promise and they still haven't

00:14:01,280 --> 00:14:09,950
figured it out and not only that but it

00:14:05,480 --> 00:14:11,480
also lacks a notion of finally so for

00:14:09,950 --> 00:14:14,720
example if you have some sort of

00:14:11,480 --> 00:14:17,210
resource that you want to finally clean

00:14:14,720 --> 00:14:19,310
up at the very end ensure that at the

00:14:17,210 --> 00:14:22,220
very end of your chain is going to be

00:14:19,310 --> 00:14:25,550
cleaned up there isn't any so what I

00:14:22,220 --> 00:14:28,190
considered is is that the the promise

00:14:25,550 --> 00:14:30,170
itself is a very nice way of dealing

00:14:28,190 --> 00:14:35,840
with a really fast car with absolutely

00:14:30,170 --> 00:14:38,120
no breaks now other people think about

00:14:35,840 --> 00:14:41,090
stream programming and think well that

00:14:38,120 --> 00:14:42,860
maybe we'll solve our problem but when

00:14:41,090 --> 00:14:45,620
people think about stream programming

00:14:42,860 --> 00:14:47,450
they mostly think about node streams and

00:14:45,620 --> 00:14:48,890
quite honestly at the beginning I would

00:14:47,450 --> 00:14:53,780
say that node streams were pretty

00:14:48,890 --> 00:14:56,210
terrible and the fact that just like

00:14:53,780 --> 00:14:59,300
that poor kid the data started firing

00:14:56,210 --> 00:15:00,980
before he was ready for it and you

00:14:59,300 --> 00:15:03,140
couldn't consume just a little bit know

00:15:00,980 --> 00:15:04,730
you know your if you're completely

00:15:03,140 --> 00:15:06,890
screwed because pause and resume or

00:15:04,730 --> 00:15:10,940
absolutely heart are hard to get right

00:15:06,890 --> 00:15:13,340
and so they they had to come up with

00:15:10,940 --> 00:15:15,530
four different ways of expressing

00:15:13,340 --> 00:15:19,490
streams in the next version of streams

00:15:15,530 --> 00:15:23,630
to with with transform readable writable

00:15:19,490 --> 00:15:27,140
and duplex yay and then streams three

00:15:23,630 --> 00:15:27,680
still adds more complexity with whole

00:15:27,140 --> 00:15:30,710
bulk

00:15:27,680 --> 00:15:32,960
rates and bulk reads so once again very

00:15:30,710 --> 00:15:35,770
very complicated stuff in order to do

00:15:32,960 --> 00:15:39,020
something that should be fairly simple

00:15:35,770 --> 00:15:40,490
so let's go back to 1994 and I realized

00:15:39,020 --> 00:15:43,870
probably not many of you were born by

00:15:40,490 --> 00:15:46,670
them but let's go back anyways to this

00:15:43,870 --> 00:15:48,920
particular book here design patterns and

00:15:46,670 --> 00:15:51,740
this is a hallmark book that a lot of

00:15:48,920 --> 00:15:53,570
people bought because it was this idea

00:15:51,740 --> 00:15:55,850
where you took all of these design

00:15:53,570 --> 00:15:59,240
patterns and finally put them in a

00:15:55,850 --> 00:16:01,250
single book together and what they did

00:15:59,240 --> 00:16:03,560
is they had so many of these patterns

00:16:01,250 --> 00:16:06,080
whether it's singleton facade abstract

00:16:03,560 --> 00:16:08,390
Factory you know all those things that

00:16:06,080 --> 00:16:12,830
you use for java scale your java names

00:16:08,390 --> 00:16:14,630
for four particular classes but two in

00:16:12,830 --> 00:16:17,570
particular that were very interesting to

00:16:14,630 --> 00:16:20,240
at least me at the time and us was was

00:16:17,570 --> 00:16:22,190
the iterator in the observer but there

00:16:20,240 --> 00:16:24,320
is absolutely no linkage at all between

00:16:22,190 --> 00:16:27,410
the two of them but we thought that

00:16:24,320 --> 00:16:29,300
there absolutely was so for example in

00:16:27,410 --> 00:16:32,839
the iterator pattern which is now as

00:16:29,300 --> 00:16:36,620
part of es2015 we can say get numbers

00:16:32,839 --> 00:16:38,720
which returns us a an iterable iterator

00:16:36,620 --> 00:16:40,850
in which we can call next which tells us

00:16:38,720 --> 00:16:43,390
whether we're done or not and gives us

00:16:40,850 --> 00:16:46,130
our value so we can go through there and

00:16:43,390 --> 00:16:49,640
finally we get done and value is

00:16:46,130 --> 00:16:52,190
undefined and the subject observer

00:16:49,640 --> 00:16:55,070
pattern which we're all very very used

00:16:52,190 --> 00:16:56,779
to for example on document add event

00:16:55,070 --> 00:16:59,420
listener and remove event listener is

00:16:56,779 --> 00:17:01,930
the subject observer pattern so we've

00:16:59,420 --> 00:17:07,370
been using these design patterns for

00:17:01,930 --> 00:17:09,170
since forever in in in JavaScript and so

00:17:07,370 --> 00:17:11,720
when you move the mouse sure enough you

00:17:09,170 --> 00:17:14,449
started to get the data now let me ask

00:17:11,720 --> 00:17:16,130
you a fundamental question then what's

00:17:14,449 --> 00:17:19,010
the difference between an array of this

00:17:16,130 --> 00:17:23,780
kind of data and that Mouse movement we

00:17:19,010 --> 00:17:27,020
just saw before well they're both

00:17:23,780 --> 00:17:29,150
collections nothing more fundamental

00:17:27,020 --> 00:17:33,800
than that in the fact that your mouse

00:17:29,150 --> 00:17:36,470
your phone and an array of stock ticks

00:17:33,800 --> 00:17:39,380
are both collections that you should be

00:17:36,470 --> 00:17:40,050
able to treat as just the same kind of

00:17:39,380 --> 00:17:43,020
thing

00:17:40,050 --> 00:17:46,860
and as was talked about yesterday in the

00:17:43,020 --> 00:17:49,650
functional programming talk when you

00:17:46,860 --> 00:17:51,390
talk about functional functional

00:17:49,650 --> 00:17:53,870
programming over these questions that's

00:17:51,390 --> 00:17:58,190
exactly what we're going to do here so

00:17:53,870 --> 00:18:01,350
the vast majority of the of the of the

00:17:58,190 --> 00:18:06,810
coding that was done then I'll show you

00:18:01,350 --> 00:18:10,460
is is all using very very few functions

00:18:06,810 --> 00:18:13,410
but very very powerful ones for example

00:18:10,460 --> 00:18:16,410
map which is the idea that you can

00:18:13,410 --> 00:18:18,330
transform every single element in the

00:18:16,410 --> 00:18:21,420
collection and project it to a new

00:18:18,330 --> 00:18:24,050
collection so for in this example we can

00:18:21,420 --> 00:18:27,510
take our circles and project them into

00:18:24,050 --> 00:18:30,270
into diamonds and the same thing with

00:18:27,510 --> 00:18:33,060
filter is to apply a predicate to every

00:18:30,270 --> 00:18:37,020
single item to say I only want circles

00:18:33,060 --> 00:18:38,460
so give me circles now flat maps a

00:18:37,020 --> 00:18:41,400
little bit different and it's a little

00:18:38,460 --> 00:18:44,400
trickier to think about although if if

00:18:41,400 --> 00:18:46,410
you're used to two arrays it's no more

00:18:44,400 --> 00:18:49,380
than just in a Cartesian product but

00:18:46,410 --> 00:18:52,440
that's not good enough quite honestly

00:18:49,380 --> 00:18:55,320
but what what it's really doing is it's

00:18:52,440 --> 00:18:57,150
going to do a map like we did we showed

00:18:55,320 --> 00:18:59,340
before and then it's going to start

00:18:57,150 --> 00:19:01,500
merging the data back into a single

00:18:59,340 --> 00:19:03,840
stream so it's going to start getting

00:19:01,500 --> 00:19:07,800
multiple pieces of data as you can see

00:19:03,840 --> 00:19:11,100
here for example the the red here will

00:19:07,800 --> 00:19:13,620
project down into into multiples so it

00:19:11,100 --> 00:19:16,320
starts based upon the time and the

00:19:13,620 --> 00:19:20,310
reacting to it merge it all into a

00:19:16,320 --> 00:19:22,020
single stream so yes I realize it's a

00:19:20,310 --> 00:19:24,390
fundamental shift in the way that you're

00:19:22,020 --> 00:19:27,720
thinking about it and you really kind of

00:19:24,390 --> 00:19:29,840
need a smack to really kind of think

00:19:27,720 --> 00:19:32,340
about it go a little bit differently

00:19:29,840 --> 00:19:34,350
so let's actually walk through some code

00:19:32,340 --> 00:19:36,930
and make it absolutely clear on how this

00:19:34,350 --> 00:19:39,210
works so if I wanted to get top-rated

00:19:36,930 --> 00:19:42,060
milk boom movies what do I do

00:19:39,210 --> 00:19:44,490
well I start off with the the array of

00:19:42,060 --> 00:19:47,310
the video list for a particular user I

00:19:44,490 --> 00:19:50,509
go through and I took and I filter out

00:19:47,310 --> 00:19:52,700
all of the all of the ones that

00:19:50,509 --> 00:19:55,309
I only want the ones that to have a

00:19:52,700 --> 00:19:57,859
rating of five and then I can go through

00:19:55,309 --> 00:20:02,179
and pass in myself and and display each

00:19:57,859 --> 00:20:04,999
movie now what if I told you that I can

00:20:02,179 --> 00:20:07,429
turn that exactly around on its head and

00:20:04,999 --> 00:20:11,119
say I can create a drag event with the

00:20:07,429 --> 00:20:13,519
same exact code would you would you

00:20:11,119 --> 00:20:17,690
believe me of course you wouldn't well

00:20:13,519 --> 00:20:21,259
why would I be here so what you would do

00:20:17,690 --> 00:20:25,070
is is here is you would take the mouse

00:20:21,259 --> 00:20:28,190
down and flatmap or just the map and the

00:20:25,070 --> 00:20:30,559
merge and then take the mouse move take

00:20:28,190 --> 00:20:32,539
until mouse up so basically what you're

00:20:30,559 --> 00:20:35,929
doing is you're saying mouse down and

00:20:32,539 --> 00:20:38,479
mouse move together merge together and

00:20:35,929 --> 00:20:40,759
take until mouse up happens and when

00:20:38,479 --> 00:20:44,149
mouse up happens the collection stops

00:20:40,759 --> 00:20:46,820
and no longer is a collection now

00:20:44,149 --> 00:20:49,549
suddenly you get that zen-like feeling

00:20:46,820 --> 00:20:52,399
you're right Wow just about everything

00:20:49,549 --> 00:20:54,440
that I'm dealing with is a stream it's

00:20:52,399 --> 00:20:57,799
something that I can query something

00:20:54,440 --> 00:21:01,369
that's very tangible unlike events today

00:20:57,799 --> 00:21:04,039
in JavaScript why because it's a

00:21:01,369 --> 00:21:06,259
first-class value and what I mean by

00:21:04,039 --> 00:21:09,529
first-class value is the fact that I can

00:21:06,259 --> 00:21:13,369
both create one and I method but I can

00:21:09,529 --> 00:21:15,080
also return one as well and where does

00:21:13,369 --> 00:21:17,330
it really fit into the grand scheme of

00:21:15,080 --> 00:21:19,339
things so when we talk about the general

00:21:17,330 --> 00:21:22,279
theory of reactivity as it were

00:21:19,339 --> 00:21:25,039
we have four quadrants here whether it's

00:21:22,279 --> 00:21:27,259
single or multiple synchronous and

00:21:25,039 --> 00:21:29,659
asynchronous we just have to think about

00:21:27,259 --> 00:21:32,089
each one a little bit differently so for

00:21:29,659 --> 00:21:36,049
example an object is fairly fairly

00:21:32,089 --> 00:21:39,529
straightforward and es5 we added in the

00:21:36,049 --> 00:21:41,450
ability to do filter and map directly on

00:21:39,529 --> 00:21:45,229
our arrays so now that we were able to

00:21:41,450 --> 00:21:48,559
do some fairly good compositional

00:21:45,229 --> 00:21:52,339
programming styles using just plain

00:21:48,559 --> 00:21:56,419
built-in objects then the promise came

00:21:52,339 --> 00:21:58,129
along as part of yes yes 2015 although

00:21:56,419 --> 00:22:01,129
it had been around for quite some time

00:21:58,129 --> 00:22:03,590
before that in various forms but then we

00:22:01,129 --> 00:22:04,610
now have a notion of a single values

00:22:03,590 --> 00:22:06,980
instead of having to deal with a

00:22:04,610 --> 00:22:09,110
callback we have the single value I can

00:22:06,980 --> 00:22:10,510
handle to everybody and they would get

00:22:09,110 --> 00:22:14,690
the right value

00:22:10,510 --> 00:22:17,870
now observable on the other hand looks

00:22:14,690 --> 00:22:20,570
exactly like array and there's a very

00:22:17,870 --> 00:22:22,279
specific reason why is because in order

00:22:20,570 --> 00:22:25,159
for people to actually start thinking

00:22:22,279 --> 00:22:26,809
about thinking about asynchronous

00:22:25,159 --> 00:22:30,620
programming you want to give them

00:22:26,809 --> 00:22:33,890
something they're familiar with and let

00:22:30,620 --> 00:22:36,020
me just clear something up that that

00:22:33,890 --> 00:22:38,960
observable is definitely not object

00:22:36,020 --> 00:22:42,409
observe it's not an event emitter in in

00:22:38,960 --> 00:22:46,130
JavaScript nor is it an event target and

00:22:42,409 --> 00:22:48,470
just as well object observed went

00:22:46,130 --> 00:22:50,149
bye-bye anyways and that was the thing

00:22:48,470 --> 00:22:51,500
that people are like oh this is great

00:22:50,149 --> 00:22:53,570
we're going to solve all our data

00:22:51,500 --> 00:22:55,580
binding issues with object.observe you

00:22:53,570 --> 00:22:58,130
know I'll change something on there now

00:22:55,580 --> 00:23:03,409
it ended up being a pig it ended up

00:22:58,130 --> 00:23:05,539
being very very slow so it's gone so

00:23:03,409 --> 00:23:08,440
instead everyone started to hop on this

00:23:05,539 --> 00:23:10,610
idea of reactive programming and

00:23:08,440 --> 00:23:16,669
unfortunately when I say reactive

00:23:10,610 --> 00:23:18,470
programming everyone said react ah yeah

00:23:16,669 --> 00:23:20,179
never mind the fact that there's nothing

00:23:18,470 --> 00:23:22,159
to do with reactive programming and

00:23:20,179 --> 00:23:24,830
react but you know they they kind of

00:23:22,159 --> 00:23:28,760
stole the the the the moniker I've been

00:23:24,830 --> 00:23:32,090
using four or five years oh well so what

00:23:28,760 --> 00:23:33,740
is reactive programming anyways so you

00:23:32,090 --> 00:23:35,809
know it's a very squishy term sort of

00:23:33,740 --> 00:23:39,760
like the way that functional programming

00:23:35,809 --> 00:23:42,380
is a squishy term you quite can't quite

00:23:39,760 --> 00:23:45,320
define it very easily so I just went to

00:23:42,380 --> 00:23:47,450
the dictionary why not

00:23:45,320 --> 00:23:49,789
because Wikipedia had this really long

00:23:47,450 --> 00:23:51,529
article and I couldn't figure it out so

00:23:49,789 --> 00:23:54,679
it just says readily responding to a

00:23:51,529 --> 00:23:56,450
stimulus okay and its components are

00:23:54,679 --> 00:24:00,860
active and rallies ready to receive

00:23:56,450 --> 00:24:04,390
events well we've already done that G

00:24:00,860 --> 00:24:07,880
jQuery has been doing that forever and

00:24:04,390 --> 00:24:10,460
even further than that I think the our

00:24:07,880 --> 00:24:12,830
business analysts in our company if I

00:24:10,460 --> 00:24:15,110
can laugh at us easily and I write you

00:24:12,830 --> 00:24:16,100
noobs we've been doing reactive

00:24:15,110 --> 00:24:21,530
programming forever

00:24:16,100 --> 00:24:23,390
it's called Excel so you really want to

00:24:21,530 --> 00:24:25,130
know really what reactive programming is

00:24:23,390 --> 00:24:29,240
and where it came from there's actually

00:24:25,130 --> 00:24:31,520
a paper that people can read on the very

00:24:29,240 --> 00:24:33,890
origins of reactive programming by

00:24:31,520 --> 00:24:35,780
Gerrard berry about how he created the

00:24:33,890 --> 00:24:38,240
general-purpose language for doing so

00:24:35,780 --> 00:24:40,030
and yes I know there there's a there's a

00:24:38,240 --> 00:24:43,190
certain phobia of

00:24:40,030 --> 00:24:44,929
reading academic papers because they

00:24:43,190 --> 00:24:48,320
have a tendency to make you melt in

00:24:44,929 --> 00:24:50,600
terms of their content and even the

00:24:48,320 --> 00:24:53,770
smartest of us have you know that kind

00:24:50,600 --> 00:24:57,140
of reaction to the technical papers and

00:24:53,770 --> 00:24:59,419
and God bless the Germans for coming up

00:24:57,140 --> 00:25:02,299
with an exact word for this of computer

00:24:59,419 --> 00:25:08,570
vision shaft Academy sheesh Pepa phobia

00:25:02,299 --> 00:25:11,360
I think there ya go

00:25:08,570 --> 00:25:14,120
I love its yes I love having a German

00:25:11,360 --> 00:25:19,070
German in there I love you guys that you

00:25:14,120 --> 00:25:22,070
can shove ten words into one anyways so

00:25:19,070 --> 00:25:25,820
yeah there's an actual I think term I

00:25:22,070 --> 00:25:27,559
maybe I made it up I don't know and when

00:25:25,820 --> 00:25:28,610
people start to talk about reactive

00:25:27,559 --> 00:25:31,820
program they start to think about

00:25:28,610 --> 00:25:35,809
functional reactive programming no no no

00:25:31,820 --> 00:25:38,000
no no this is not what people are doing

00:25:35,809 --> 00:25:39,530
when they think about reactive reactive

00:25:38,000 --> 00:25:41,990
programming functional reactive

00:25:39,530 --> 00:25:44,750
programming is a very precise term it's

00:25:41,990 --> 00:25:47,990
a term that comes from Connell Elliott

00:25:44,750 --> 00:25:50,780
and Paul hue DAC from the 1990s in a

00:25:47,990 --> 00:25:53,090
language called Fran and it had very

00:25:50,780 --> 00:25:54,350
precise meanings for everything that

00:25:53,090 --> 00:25:58,309
they did and they called it that fart

00:25:54,350 --> 00:26:00,260
pee so we're kind of stuck so they had a

00:25:58,309 --> 00:26:03,320
very distinct notion of separation

00:26:00,260 --> 00:26:05,900
between time continuous time whether

00:26:03,320 --> 00:26:09,409
it's a clock versus discrete events and

00:26:05,900 --> 00:26:12,559
it's just not important so you know call

00:26:09,409 --> 00:26:17,150
us whatever compositional event

00:26:12,559 --> 00:26:19,039
programming reactive don't care but what

00:26:17,150 --> 00:26:21,530
I want to get to you is is the fact that

00:26:19,039 --> 00:26:23,299
we have a very precise way of thinking

00:26:21,530 --> 00:26:26,000
about asynchronous programming because

00:26:23,299 --> 00:26:29,120
you have zero to infinite values either

00:26:26,000 --> 00:26:29,840
by terminated by an honor or uncompleted

00:26:29,120 --> 00:26:31,760
and

00:26:29,840 --> 00:26:34,909
doesn't have to be obviously you can

00:26:31,760 --> 00:26:36,529
continue infinitely you could admit a

00:26:34,909 --> 00:26:39,830
couple and have an error you can

00:26:36,529 --> 00:26:41,750
complete what you could never do is you

00:26:39,830 --> 00:26:44,350
can never have anything overlapping and

00:26:41,750 --> 00:26:47,929
you certainly cannot get values after

00:26:44,350 --> 00:26:49,250
after it's been done so type-ahead

00:26:47,929 --> 00:26:51,110
search is one of the most difficult

00:26:49,250 --> 00:26:53,000
things that we've ever done I don't know

00:26:51,110 --> 00:26:54,770
why but it just seems that everybody

00:26:53,000 --> 00:26:58,520
tries to re-implement it and doesn't do

00:26:54,770 --> 00:26:59,860
it very well so I decided to implement

00:26:58,520 --> 00:27:03,500
it in jQuery

00:26:59,860 --> 00:27:05,840
yeah just jQuery uh you know I had to

00:27:03,500 --> 00:27:08,419
add it to bounce I had to add some some

00:27:05,840 --> 00:27:16,700
checks I had to add in the xhr and retry

00:27:08,419 --> 00:27:19,070
so I wrote more and did less so instead

00:27:16,700 --> 00:27:20,600
I go you know I can solve this a little

00:27:19,070 --> 00:27:24,140
bit a little bit better what if I could

00:27:20,600 --> 00:27:27,950
say take the the Dom in Dom in key ops

00:27:24,140 --> 00:27:30,289
the bounce by 500 milliseconds distinct

00:27:27,950 --> 00:27:33,520
until changed did a search and bound

00:27:30,289 --> 00:27:37,669
directly to the UI done I think I just

00:27:33,520 --> 00:27:39,200
eliminated three pages of code now we've

00:27:37,669 --> 00:27:41,059
already kind of talked about what the

00:27:39,200 --> 00:27:43,789
observable is in terms of that contract

00:27:41,059 --> 00:27:45,740
of 0 to infinite values but let's

00:27:43,789 --> 00:27:47,690
actually go down to you know and we've

00:27:45,740 --> 00:27:50,270
already talked a little bit about map

00:27:47,690 --> 00:27:51,230
filter and reduce so let's actually go

00:27:50,270 --> 00:27:54,740
into something a little bit more

00:27:51,230 --> 00:27:57,980
complicated that a lot of people do with

00:27:54,740 --> 00:27:59,330
their web applications so for example if

00:27:57,980 --> 00:28:01,029
you're dealing with a phone or you're

00:27:59,330 --> 00:28:04,940
dealing with something that's

00:28:01,029 --> 00:28:09,260
constrained in terms of how much how

00:28:04,940 --> 00:28:11,330
much memory and how much storage you

00:28:09,260 --> 00:28:12,649
have you want to be able to only keep on

00:28:11,330 --> 00:28:15,860
the screen what's absolutely necessary

00:28:12,649 --> 00:28:18,710
on the screen and when when a as soon as

00:28:15,860 --> 00:28:20,570
it goes off you want to completely get

00:28:18,710 --> 00:28:23,179
rid of it get rid of all its handlers

00:28:20,570 --> 00:28:25,789
and leave nothing around how do you do

00:28:23,179 --> 00:28:27,770
that well first off you're going to

00:28:25,789 --> 00:28:29,539
listen for the document scroll and then

00:28:27,770 --> 00:28:31,159
you're going to the bouncer just a

00:28:29,539 --> 00:28:32,419
little bit just in case people start to

00:28:31,159 --> 00:28:34,429
you know scroll up and scroll down

00:28:32,419 --> 00:28:37,940
rapidly and then they're going to

00:28:34,429 --> 00:28:40,630
basically determine based upon the road

00:28:37,940 --> 00:28:41,789
visibilities determine whether it's

00:28:40,630 --> 00:28:45,210
weather

00:28:41,789 --> 00:28:46,559
I hidden or not hidden and I'm what

00:28:45,210 --> 00:28:49,649
you're gonna do is you're going to take

00:28:46,559 --> 00:28:52,259
your rose shows and do an interface do a

00:28:49,649 --> 00:28:54,570
poll polling basically and you're going

00:28:52,259 --> 00:28:56,340
to get the row data continuously get

00:28:54,570 --> 00:28:58,859
that row data continuously get that row

00:28:56,340 --> 00:29:00,499
data until it tells you to hide it and

00:28:58,859 --> 00:29:05,249
as soon as it tells you to hide it

00:29:00,499 --> 00:29:07,559
everything goes away everything so it's

00:29:05,249 --> 00:29:08,909
it's really a complicated kind of thing

00:29:07,559 --> 00:29:11,460
and people can look at the code

00:29:08,909 --> 00:29:13,529
afterwards but I think it's very magical

00:29:11,460 --> 00:29:16,639
in the way that they were able to think

00:29:13,529 --> 00:29:18,960
about it in very precise terms using

00:29:16,639 --> 00:29:21,239
functional programming and reactive

00:29:18,960 --> 00:29:23,909
programming together just like our

00:29:21,239 --> 00:29:26,099
callback hell example we could actually

00:29:23,909 --> 00:29:29,249
go a lot further than we did with with

00:29:26,099 --> 00:29:32,549
promises by actually going down here and

00:29:29,249 --> 00:29:35,099
authorizing and retry three times if it

00:29:32,549 --> 00:29:36,960
fails and then we can also say if the

00:29:35,099 --> 00:29:39,899
person who goes oh gosh no oh gosh no

00:29:36,960 --> 00:29:43,139
cancel cancel cancel well we can

00:29:39,899 --> 00:29:46,109
automatically stop that with the key

00:29:43,139 --> 00:29:48,779
with take until so it's a little bit

00:29:46,109 --> 00:29:52,309
more than than the burning sensation

00:29:48,779 --> 00:29:56,009
that we got from callbacks

00:29:52,309 --> 00:29:57,989
now slack for example slack for Windows

00:29:56,009 --> 00:30:00,330
uses aÃ§aÃ­ uses rxjs

00:29:57,989 --> 00:30:02,340
and what they use it for is very very

00:30:00,330 --> 00:30:05,580
complex kind of interactions like an

00:30:02,340 --> 00:30:07,289
editor should like for example if they

00:30:05,580 --> 00:30:09,779
want to implement spell check what do

00:30:07,289 --> 00:30:11,669
they do I'm not going to explain all of

00:30:09,779 --> 00:30:13,919
this in particular but I just want you

00:30:11,669 --> 00:30:16,139
to understand that they are actually

00:30:13,919 --> 00:30:19,349
determining your language as you type

00:30:16,139 --> 00:30:23,279
and being able to do that very very

00:30:19,349 --> 00:30:25,139
easily using using this technology and

00:30:23,279 --> 00:30:26,849
thinking differently about events now

00:30:25,139 --> 00:30:29,070
they are able to think about these

00:30:26,849 --> 00:30:33,059
things as objects and pass them around

00:30:29,070 --> 00:30:36,269
and as Europe now allows us to think

00:30:33,059 --> 00:30:39,450
about is now try catch finally becomes

00:30:36,269 --> 00:30:41,820
very easy because I have catch and which

00:30:39,450 --> 00:30:44,279
I can I can retry three times I can

00:30:41,820 --> 00:30:46,499
catch and return some default data so

00:30:44,279 --> 00:30:50,519
for example if I'm creating an offline

00:30:46,499 --> 00:30:53,190
first application I can try and get the

00:30:50,519 --> 00:30:53,779
data and if I fail for some particular

00:30:53,190 --> 00:30:55,460
reason

00:30:53,779 --> 00:30:57,440
three tribes and I can just give them

00:30:55,460 --> 00:31:01,009
some default data and say here you go

00:30:57,440 --> 00:31:04,279
and then finally at the very end I can

00:31:01,009 --> 00:31:05,989
do some data cleanup now data back

00:31:04,279 --> 00:31:08,629
pressure is also a thing that people

00:31:05,989 --> 00:31:10,759
like to talk about and yes observables

00:31:08,629 --> 00:31:13,820
can absolutely do that in fact we're

00:31:10,759 --> 00:31:19,249
working on on a standard for exactly

00:31:13,820 --> 00:31:21,919
that's called objective streams now it's

00:31:19,249 --> 00:31:24,109
even more important that you want to win

00:31:21,919 --> 00:31:25,700
friends and influence others so

00:31:24,109 --> 00:31:28,479
obviously you want to work with the

00:31:25,700 --> 00:31:33,469
react angular and ember communities to

00:31:28,479 --> 00:31:35,509
do you know see how observables mix with

00:31:33,469 --> 00:31:37,369
them and so what you've what we've been

00:31:35,509 --> 00:31:39,529
finding in the community is that there

00:31:37,369 --> 00:31:42,049
are literally twenty six different

00:31:39,529 --> 00:31:46,549
implementations of flux written in

00:31:42,049 --> 00:31:49,779
observables and there are about 20 s and

00:31:46,549 --> 00:31:54,429
27 or 28 different bindings to react

00:31:49,779 --> 00:31:57,109
directly from from from observables now

00:31:54,429 --> 00:32:00,049
angular is its own special little beast

00:31:57,109 --> 00:32:02,349
and why that is is if you're going to

00:32:00,049 --> 00:32:04,129
use an angular 2 at all then

00:32:02,349 --> 00:32:06,830
congratulations you're going to be using

00:32:04,129 --> 00:32:10,309
observables because the HTTP stack

00:32:06,830 --> 00:32:15,379
itself is an observable is going to be

00:32:10,309 --> 00:32:17,450
is is rxjs today so they've already add

00:32:15,379 --> 00:32:20,690
that in and what people have been

00:32:17,450 --> 00:32:23,359
finding is that people want to use those

00:32:20,690 --> 00:32:24,679
two things together because it solves a

00:32:23,359 --> 00:32:27,139
lot of their problems they have the

00:32:24,679 --> 00:32:29,269
retry logic they have attach they have

00:32:27,139 --> 00:32:32,659
the finally all the things that promises

00:32:29,269 --> 00:32:35,570
could never give them now what's also

00:32:32,659 --> 00:32:37,759
very interesting is is not only is it

00:32:35,570 --> 00:32:40,909
really interesting for for just doing

00:32:37,759 --> 00:32:43,519
the basic kinds of things but I I would

00:32:40,909 --> 00:32:46,190
say that's our notion of having this

00:32:43,519 --> 00:32:48,799
swappable concurrency layer is also very

00:32:46,190 --> 00:32:50,869
interesting so schedulers to me matter

00:32:48,799 --> 00:32:53,960
and the fact that what I can do is I can

00:32:50,869 --> 00:32:56,029
say where how and when something is

00:32:53,960 --> 00:32:58,609
executed so for example I can take an

00:32:56,029 --> 00:33:01,570
observable and I can generate using a

00:32:58,609 --> 00:33:05,149
default asynchronous scheduler well

00:33:01,570 --> 00:33:07,130
that's a problem in the fact that's oh I

00:33:05,149 --> 00:33:09,380
just completely

00:33:07,130 --> 00:33:11,270
turned my turn my machine into a

00:33:09,380 --> 00:33:14,900
helicopter because the fan is just gonna

00:33:11,270 --> 00:33:18,820
go off completely off its rocker but

00:33:14,900 --> 00:33:21,679
instead if I could do something like

00:33:18,820 --> 00:33:24,530
something like the the

00:33:21,679 --> 00:33:27,350
requestanimationframe scheduler then it

00:33:24,530 --> 00:33:30,220
changes how the picture apparently I

00:33:27,350 --> 00:33:33,049
didn't swap out the picture but anyways

00:33:30,220 --> 00:33:36,140
the it absolutely does matter because

00:33:33,049 --> 00:33:38,570
now you decided to use instead of set

00:33:36,140 --> 00:33:40,190
timeout or any other request set

00:33:38,570 --> 00:33:41,450
immediate or anything else you've now

00:33:40,190 --> 00:33:42,710
decided to move it to a

00:33:41,450 --> 00:33:45,679
requestanimationframe

00:33:42,710 --> 00:33:47,750
so when I said that Netflix is using it

00:33:45,679 --> 00:33:49,429
for for animations that's exactly what

00:33:47,750 --> 00:33:51,409
they do is they take a lot of their

00:33:49,429 --> 00:33:53,390
asynchronous operations throw it on to

00:33:51,409 --> 00:33:55,850
requestanimationframe and all they had

00:33:53,390 --> 00:33:57,559
to change was one line of code they

00:33:55,850 --> 00:33:59,120
didn't have to go through completely

00:33:57,559 --> 00:34:01,730
throughout their their infrastructure to

00:33:59,120 --> 00:34:04,789
do that now async/await is very

00:34:01,730 --> 00:34:08,540
interesting in that it makes programming

00:34:04,789 --> 00:34:11,240
very very easy in a very imperative

00:34:08,540 --> 00:34:14,290
style so I can do try-catch and I can

00:34:11,240 --> 00:34:17,000
treat it almost as if it were a

00:34:14,290 --> 00:34:19,700
synchronous code which is absolutely

00:34:17,000 --> 00:34:23,210
beautiful it's it's actually a stage 3

00:34:19,700 --> 00:34:25,820
proposal right now for es2016 or ES 7 as

00:34:23,210 --> 00:34:28,010
people call it and it actually ships in

00:34:25,820 --> 00:34:30,649
the Microsoft edge browser today so if

00:34:28,010 --> 00:34:32,960
you have Windows 10 edge and you can

00:34:30,649 --> 00:34:36,790
turn on experimental features it's there

00:34:32,960 --> 00:34:41,270
today which is kind of cool

00:34:36,790 --> 00:34:44,899
now with observables you get also that

00:34:41,270 --> 00:34:47,899
same kind of thing is because what we

00:34:44,899 --> 00:34:50,929
have added is basic support for a CA

00:34:47,899 --> 00:34:53,510
Cinco 8 so I can say when the text

00:34:50,929 --> 00:34:57,020
changes I can ace a call an async

00:34:53,510 --> 00:35:01,040
function on text and awaits the search

00:34:57,020 --> 00:35:07,250
result which happens to be a promise so

00:35:01,040 --> 00:35:09,609
that to me is kind of cool and so I

00:35:07,250 --> 00:35:13,390
think it has a lot of promise especially

00:35:09,609 --> 00:35:16,520
Mogan I just said promise

00:35:13,390 --> 00:35:19,970
anyways so instead what we're going

00:35:16,520 --> 00:35:23,180
going to see here is that I observed

00:35:19,970 --> 00:35:26,119
are in fact coming to es2016 so if you

00:35:23,180 --> 00:35:30,200
go there somehow something happened with

00:35:26,119 --> 00:35:33,859
my slides but observables in es2016 are

00:35:30,200 --> 00:35:37,820
absolutely coming I that hopefully that

00:35:33,859 --> 00:35:39,320
they're in stage one right now and and

00:35:37,820 --> 00:35:42,200
we're working towards stage two of

00:35:39,320 --> 00:35:45,170
adoption but the idea here is that we

00:35:42,200 --> 00:35:47,359
will now have complete and utter support

00:35:45,170 --> 00:35:49,609
for for observables in your browser

00:35:47,359 --> 00:35:53,890
directly so now you'll be able to do a

00:35:49,609 --> 00:35:56,630
lot of the things that that for example

00:35:53,890 --> 00:36:01,700
that's Netflix and others have been able

00:35:56,630 --> 00:36:05,930
to do just by just by using your browser

00:36:01,700 --> 00:36:08,090
directly that's kind of cool now let's

00:36:05,930 --> 00:36:10,010
talk about the future a little bit so

00:36:08,090 --> 00:36:14,060
the future is very very interesting and

00:36:10,010 --> 00:36:17,330
the fact that we we have right now at

00:36:14,060 --> 00:36:21,230
reactive - extensions rxjs but in the

00:36:17,330 --> 00:36:24,619
future we're moving to reactive X and in

00:36:21,230 --> 00:36:26,570
fact the the all of the code that's

00:36:24,619 --> 00:36:29,570
being done right now is a combination of

00:36:26,570 --> 00:36:32,570
Netflix Microsoft and Google all writing

00:36:29,570 --> 00:36:34,670
this together it would have who would

00:36:32,570 --> 00:36:36,770
have guessed that and five years ago

00:36:34,670 --> 00:36:39,440
that someone would say that Microsoft

00:36:36,770 --> 00:36:41,630
and Google and Netflix and even Facebook

00:36:39,440 --> 00:36:46,070
are writing a library together well it's

00:36:41,630 --> 00:36:48,530
true I yesterday during the functional

00:36:46,070 --> 00:36:52,550
programming thing there was a comment

00:36:48,530 --> 00:36:54,830
about rxjs versus or or CSP versus

00:36:52,550 --> 00:37:00,460
observables so I don't necessarily want

00:36:54,830 --> 00:37:02,900
to you know dog one or the other but yes

00:37:00,460 --> 00:37:07,160
observables can absolutely do everything

00:37:02,900 --> 00:37:10,339
that's that that CSP can do so let's go

00:37:07,160 --> 00:37:13,430
back and take a history lesson here CSP

00:37:10,339 --> 00:37:16,940
was created by Tony Hoare who works for

00:37:13,430 --> 00:37:19,400
Microsoft Research no less in 1978 and

00:37:16,940 --> 00:37:22,280
he wanted it for production systems or

00:37:19,400 --> 00:37:23,390
they were kind of loosely coupled why it

00:37:22,280 --> 00:37:25,400
was mentioned in a functional

00:37:23,390 --> 00:37:27,200
programming context I don't know because

00:37:25,400 --> 00:37:29,270
there's really nothing much functional

00:37:27,200 --> 00:37:30,830
about this there's a while loop there's

00:37:29,270 --> 00:37:33,470
a global channel

00:37:30,830 --> 00:37:36,369
there's mutation all over the place it's

00:37:33,470 --> 00:37:36,369
not really functional

00:37:36,440 --> 00:37:42,440
so the imperative cat is not amused

00:37:38,960 --> 00:37:44,180
because like I said there it's it's a

00:37:42,440 --> 00:37:47,480
different definition of simple to me I

00:37:44,180 --> 00:37:50,180
don't find this whole thing of a wild

00:37:47,480 --> 00:37:53,330
shrew loop to be involved that simple

00:37:50,180 --> 00:37:55,190
and in fact when I think about the

00:37:53,330 --> 00:37:57,500
composition I think of that as a lot

00:37:55,190 --> 00:38:00,290
more simple quite honestly so maybe it's

00:37:57,500 --> 00:38:03,980
it's a personal thing but why

00:38:00,290 --> 00:38:06,680
observables why not CSP well for example

00:38:03,980 --> 00:38:08,990
I have determinants to clean up so for

00:38:06,680 --> 00:38:11,089
example if I create an observable here I

00:38:08,990 --> 00:38:14,060
not only get the on behavior which I'm

00:38:11,089 --> 00:38:16,940
sending the next values but also when I

00:38:14,060 --> 00:38:19,490
return an object I give it this handle

00:38:16,940 --> 00:38:21,530
and which I can tell you to stop and

00:38:19,490 --> 00:38:24,020
which and when I tell you to stop it

00:38:21,530 --> 00:38:26,450
removes that event handler and so when I

00:38:24,020 --> 00:38:29,000
call and when I start listening here and

00:38:26,450 --> 00:38:32,390
then when I call unsubscribe the handler

00:38:29,000 --> 00:38:37,550
goes bye-bye in CSP that doesn't work

00:38:32,390 --> 00:38:39,740
that way also in CSP you have a notion

00:38:37,550 --> 00:38:42,830
of there's no consistent air handling at

00:38:39,740 --> 00:38:45,290
all so instead you have to throw it off

00:38:42,830 --> 00:38:47,930
to an air channel and hopefully you can

00:38:45,290 --> 00:38:49,670
listen to it but instead here we have an

00:38:47,930 --> 00:38:53,150
air channel that's built directly into

00:38:49,670 --> 00:38:55,310
the pipeline itself so it's very easy to

00:38:53,150 --> 00:38:57,800
think about it when we can listen to it

00:38:55,310 --> 00:39:02,330
on our air handler here and we can also

00:38:57,800 --> 00:39:08,900
try & retry here and catch directly into

00:39:02,330 --> 00:39:11,839
an end so there so with that I don't

00:39:08,900 --> 00:39:12,260
know do I have sound here apparently I

00:39:11,839 --> 00:39:16,220
don't

00:39:12,260 --> 00:39:20,540
oh well anyways so if I can leave you

00:39:16,220 --> 00:39:23,089
with anything today I want to say push

00:39:20,540 --> 00:39:25,070
you know think about push collections

00:39:23,089 --> 00:39:29,510
think about events very very differently

00:39:25,070 --> 00:39:33,369
I am so with that I'll be glad to take

00:39:29,510 --> 00:39:33,369
any questions Thank You Matthew

00:39:36,700 --> 00:39:42,170
could you explain a bit about the

00:39:40,220 --> 00:39:43,910
difference between arks extensions and

00:39:42,170 --> 00:39:47,780
other libraries out there like vacant

00:39:43,910 --> 00:39:51,800
Jas other laying with that deal with

00:39:47,780 --> 00:39:53,869
reactive programming okay so yeah the

00:39:51,800 --> 00:39:57,560
question was how does this differ from

00:39:53,869 --> 00:40:00,080
any other library that does asynchrony

00:39:57,560 --> 00:40:02,240
that does reactive programming well

00:40:00,080 --> 00:40:05,260
certainly rxjs was the first one out

00:40:02,240 --> 00:40:07,820
there since we've been out since 2009

00:40:05,260 --> 00:40:09,619
there are slight differences when when

00:40:07,820 --> 00:40:13,609
you talk about bacon and so forth none

00:40:09,619 --> 00:40:16,520
of them have the for example the the

00:40:13,609 --> 00:40:18,290
virtualization or notion of a virtual

00:40:16,520 --> 00:40:20,210
time where you can just swap out the the

00:40:18,290 --> 00:40:22,040
scheduler they don't do a lot of that

00:40:20,210 --> 00:40:25,070
instead they tried to focus on

00:40:22,040 --> 00:40:27,980
simplicity in terms of really you know 0

00:40:25,070 --> 00:40:30,500
to 60 really really quickly instead of a

00:40:27,980 --> 00:40:32,359
more comprehensive approach which we

00:40:30,500 --> 00:40:35,320
took and there are a few fundamental

00:40:32,359 --> 00:40:37,340
differences on how we we thought about

00:40:35,320 --> 00:40:39,380
thought about hot versus cold

00:40:37,340 --> 00:40:41,180
observables it's a long discussion you

00:40:39,380 --> 00:40:42,260
can come and talk to me afterwards but

00:40:41,180 --> 00:40:44,780
there are folks you know some

00:40:42,260 --> 00:40:48,920
fundamental differences on on how we

00:40:44,780 --> 00:40:50,660
tackle those problems but that's mostly

00:40:48,920 --> 00:40:53,119
for the most part and we're we're fairly

00:40:50,660 --> 00:40:54,650
friendly with one another in terms of

00:40:53,119 --> 00:40:56,930
you know we're always you know trying to

00:40:54,650 --> 00:41:01,010
one-up another in terms of speed in

00:40:56,930 --> 00:41:03,560
terms of features and so forth I have

00:41:01,010 --> 00:41:05,570
heard a lot of people complain about a

00:41:03,560 --> 00:41:08,300
document of our says it's too

00:41:05,570 --> 00:41:13,369
competitive especially for a beginner so

00:41:08,300 --> 00:41:16,460
do you have any plan to fix in terms of

00:41:13,369 --> 00:41:18,560
begin of stuff for beginners well we

00:41:16,460 --> 00:41:23,960
have a lot of exercise so if you go to

00:41:18,560 --> 00:41:26,990
reactive xio which is our homepage and

00:41:23,960 --> 00:41:29,810
let's see if is it still up directly on

00:41:26,990 --> 00:41:34,730
me so anyways if you can go to reactive

00:41:29,810 --> 00:41:36,530
xio and take a look there we have a ton

00:41:34,730 --> 00:41:39,650
of material in terms of our introduction

00:41:36,530 --> 00:41:42,740
material and so forth in terms of why

00:41:39,650 --> 00:41:44,420
why to use them but also there are lots

00:41:42,740 --> 00:41:49,270
of other in

00:41:44,420 --> 00:41:52,040
things such as reactive x io learn RX

00:41:49,270 --> 00:41:55,340
there are interactive exercises there

00:41:52,040 --> 00:42:01,900
that you can that you can learn if you

00:41:55,340 --> 00:42:04,900
go to egghead radio did egghead io and

00:42:01,900 --> 00:42:08,000
technologies rx there are a ton of

00:42:04,900 --> 00:42:10,070
material there as well so in terms of

00:42:08,000 --> 00:42:16,070
approachability the Internet is

00:42:10,070 --> 00:42:18,620
fantastic here by the way sorry but if

00:42:16,070 --> 00:42:20,900
you go to these particular sites egghead

00:42:18,620 --> 00:42:24,550
radio has a lot of stuff that that is

00:42:20,900 --> 00:42:29,420
particularly about new people coming to

00:42:24,550 --> 00:42:31,370
2rx from from nothing at all explaining

00:42:29,420 --> 00:42:33,800
the very very basics here I wanted to

00:42:31,370 --> 00:42:36,950
get through the fact yes I could have

00:42:33,800 --> 00:42:38,510
done a very introduction talk but but

00:42:36,950 --> 00:42:40,700
it's more along the lines of showing the

00:42:38,510 --> 00:42:44,360
real power of why people are using it

00:42:40,700 --> 00:42:48,700
versus the oh you can you can do you

00:42:44,360 --> 00:42:48,700

YouTube URL: https://www.youtube.com/watch?v=BwwgmB73Hzw


