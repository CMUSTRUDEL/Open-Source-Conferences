Title: Sarmad Sangi: Towards Universal JavaScript - JSConf.Asia 2015
Publication date: 2015-12-22
Playlist: JSConf.Asia 2015
Description: 
	JavaScript is taking over the world, today it is not only used on browser but many are using it to write code on server, programming a robot, building mobile apps and etc.
In this talk I will share our journey (tips, choosing a stack etc) at RedMart towards universal JavaScript.

Sarmad is a Front-end engineer at RedMart. He's currently involved in re architecting RedMart's web (and mobile web) app platform for simplicity and better performance.

JSConf.Asia - Red Dot Design Museum, Singapore - 19 November 2015.

Source: http://2015.jsconf.asia
Slides: http://slides.com/sarmadsangi/towards-universal-javascript#/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:07,099 --> 00:00:15,780
alright so there are two sections to

00:00:10,889 --> 00:00:18,779
this talk one is what and why Universal

00:00:15,780 --> 00:00:21,750
JavaScript where I will be talking about

00:00:18,779 --> 00:00:26,369
livid of about benefits that it brings

00:00:21,750 --> 00:00:29,510
along and then another one is a little

00:00:26,369 --> 00:00:32,430
bit on how we can build a simple

00:00:29,510 --> 00:00:35,340
isomorphic sorry universal JavaScript

00:00:32,430 --> 00:00:37,320
application and also what are the pain

00:00:35,340 --> 00:00:43,200
points that you might face if you are

00:00:37,320 --> 00:00:49,200
building such application alright so

00:00:43,200 --> 00:00:52,140
that's me yeah so I'm mostly doing

00:00:49,200 --> 00:00:55,469
front-end a trademark in my spare time

00:00:52,140 --> 00:00:57,239
I'm doing some work on like just looking

00:00:55,469 --> 00:01:00,390
around react native I build a couple of

00:00:57,239 --> 00:01:02,940
apps on node stuff like but that's

00:01:00,390 --> 00:01:06,840
pretty much it previously I was doing

00:01:02,940 --> 00:01:10,020
some PHP and Java hated it and even did

00:01:06,840 --> 00:01:15,150
some native Android so now mostly

00:01:10,020 --> 00:01:18,030
front-end web front-end a red mark is

00:01:15,150 --> 00:01:21,060
one of the leading online grocery stores

00:01:18,030 --> 00:01:24,689
in Singapore we are technology and a

00:01:21,060 --> 00:01:27,570
logistic company and that's rad mark so

00:01:24,689 --> 00:01:30,450
just take a good look we do deliver

00:01:27,570 --> 00:01:34,350
groceries why drones in case if you guys

00:01:30,450 --> 00:01:37,549
want to order that yeah alright so

00:01:34,350 --> 00:01:37,549
moving on

00:01:41,310 --> 00:01:50,100
okay so what is a universal JavaScript

00:01:45,780 --> 00:01:54,070
some people refer to it as isomorphic

00:01:50,100 --> 00:01:58,899
JavaScript some as universal they pretty

00:01:54,070 --> 00:02:01,479
much mean the same thing and so

00:01:58,899 --> 00:02:02,880
Universal basically means that Universal

00:02:01,479 --> 00:02:06,180
JavaScript basically means that

00:02:02,880 --> 00:02:11,670
JavaScript code that can run in an

00:02:06,180 --> 00:02:13,870
environment agnostic Bay and in short Oh

00:02:11,670 --> 00:02:18,370
what it means is that it can run on a

00:02:13,870 --> 00:02:22,750
server and client but also on you know

00:02:18,370 --> 00:02:26,860
like phones mobile phones iOS android

00:02:22,750 --> 00:02:29,410
etc isomorphic pretty much means the

00:02:26,860 --> 00:02:33,880
same thing as well just that I

00:02:29,410 --> 00:02:37,239
personally feel that Universal gives it

00:02:33,880 --> 00:02:39,670
a good tag to a JavaScript the intention

00:02:37,239 --> 00:02:42,220
the intent message that goes around is

00:02:39,670 --> 00:02:44,350
like JavaScript that can be used

00:02:42,220 --> 00:02:47,769
everywhere and i think that's that's

00:02:44,350 --> 00:02:49,780
going to help javascript itself there is

00:02:47,769 --> 00:02:52,060
some discussion going around like a lot

00:02:49,780 --> 00:02:54,370
of people who are saying that isomorphic

00:02:52,060 --> 00:02:55,810
is a more technical name and and it's a

00:02:54,370 --> 00:02:59,410
good even though it's it might not be

00:02:55,810 --> 00:03:03,450
accurate but so there are some people

00:02:59,410 --> 00:03:05,739
who prefer isomorphic there are a lot of

00:03:03,450 --> 00:03:08,170
people are preferring universal as well

00:03:05,739 --> 00:03:10,420
and then I've those two links which you

00:03:08,170 --> 00:03:16,390
guys can later go and check out and read

00:03:10,420 --> 00:03:19,359
more about it okay so why Universal

00:03:16,390 --> 00:03:21,280
JavaScript why do we need to go to the

00:03:19,359 --> 00:03:23,350
trouble and you know like share code

00:03:21,280 --> 00:03:28,239
between client and server or what are

00:03:23,350 --> 00:03:29,650
the benefits that it brings us so

00:03:28,239 --> 00:03:33,510
basically when building a web

00:03:29,650 --> 00:03:36,370
application it house with some of these

00:03:33,510 --> 00:03:38,560
so I'll go more in detail within each

00:03:36,370 --> 00:03:40,980
one of it I see your performance and

00:03:38,560 --> 00:03:40,980
maintainability

00:03:43,780 --> 00:03:51,319
alright so SEO if any one of you I mean

00:03:50,060 --> 00:03:53,989
a lot of you guys might have build

00:03:51,319 --> 00:03:56,989
single page applications that only run

00:03:53,989 --> 00:03:59,209
on a browser and so what happens is that

00:03:56,989 --> 00:04:03,920
when different BOTS they come to our

00:03:59,209 --> 00:04:08,629
website these BOTS like Facebook Google

00:04:03,920 --> 00:04:09,859
board I think google bot now can now can

00:04:08,629 --> 00:04:12,439
read single page application

00:04:09,859 --> 00:04:14,450
applications properly and index them but

00:04:12,439 --> 00:04:17,389
I think a lot of other BOTS still don't

00:04:14,450 --> 00:04:20,120
do that so initially when somebody comes

00:04:17,389 --> 00:04:21,949
to your like a bot that comes to your

00:04:20,120 --> 00:04:25,460
website it will see something like this

00:04:21,949 --> 00:04:27,500
and if you notice at the rube classroom

00:04:25,460 --> 00:04:29,720
that's where your application is

00:04:27,500 --> 00:04:31,759
supposed to be mounted but the bot will

00:04:29,720 --> 00:04:33,289
not wait for that it will just index

00:04:31,759 --> 00:04:42,500
this page which will have no information

00:04:33,289 --> 00:04:46,130
about your website so to please these

00:04:42,500 --> 00:04:47,419
BOTS we have to do various hacks one of

00:04:46,130 --> 00:04:50,180
the hacks that we are doing at red mud

00:04:47,419 --> 00:04:54,349
right now is something like this so what

00:04:50,180 --> 00:04:58,610
we do is we on engine next level we

00:04:54,349 --> 00:05:01,849
check if the user agent is one of these

00:04:58,610 --> 00:05:04,970
BOTS and then we will try to reverse

00:05:01,849 --> 00:05:07,490
proxy to our internal service that is

00:05:04,970 --> 00:05:11,150
running a headless browser like phantom

00:05:07,490 --> 00:05:13,070
jas which will wait for the whole

00:05:11,150 --> 00:05:16,099
javascript thing to load CSS everything

00:05:13,070 --> 00:05:20,720
patch it together and then give it back

00:05:16,099 --> 00:05:23,570
to Googlebot and we also keep keep it in

00:05:20,720 --> 00:05:25,729
man cash so that we can quickly get back

00:05:23,570 --> 00:05:27,229
to Googlebot so there's some work

00:05:25,729 --> 00:05:29,870
involved there we are running like to

00:05:27,229 --> 00:05:31,820
medium instances and sometimes they

00:05:29,870 --> 00:05:34,190
break due to various reasons we have to

00:05:31,820 --> 00:05:36,020
maintain it and then one of the worst

00:05:34,190 --> 00:05:37,340
thing about this approach is there might

00:05:36,020 --> 00:05:39,500
be better ways but one of the worst

00:05:37,340 --> 00:05:41,449
things about this approach is like you

00:05:39,500 --> 00:05:43,250
have to put boards there and then every

00:05:41,449 --> 00:05:46,880
day there's a new board so recently like

00:05:43,250 --> 00:05:49,789
a slack also has a bot which so when we

00:05:46,880 --> 00:05:52,010
face our website on slack it just shows

00:05:49,789 --> 00:05:54,370
nothing because slack cannot read our

00:05:52,010 --> 00:05:54,370
website

00:05:55,670 --> 00:06:01,710
so Universal JavaScript approach

00:05:58,590 --> 00:06:03,450
actually fixes this issue Oh what it

00:06:01,710 --> 00:06:05,190
does is like your same application code

00:06:03,450 --> 00:06:07,680
that you're building currently in single

00:06:05,190 --> 00:06:10,470
page application that only runs on a

00:06:07,680 --> 00:06:14,850
browser can render the same thing on the

00:06:10,470 --> 00:06:18,270
server and push it down for BOTS to just

00:06:14,850 --> 00:06:19,560
directly get that information before I

00:06:18,270 --> 00:06:28,680
move forward I'll just quickly show you

00:06:19,560 --> 00:06:31,110
guys how this website looks like so this

00:06:28,680 --> 00:06:33,390
is red mark right now it's like right

00:06:31,110 --> 00:06:35,790
working fine and then now I'll serve it

00:06:33,390 --> 00:06:37,770
with so I'll fetch it as a google bot

00:06:35,790 --> 00:06:40,110
and you guys will see that like it'll be

00:06:37,770 --> 00:06:41,670
a bit broken but at least like you know

00:06:40,110 --> 00:06:44,190
you'll see the things that are being

00:06:41,670 --> 00:06:49,080
done to it when we are using phantom

00:06:44,190 --> 00:06:53,310
juice or something let me just first

00:06:49,080 --> 00:06:57,300
that again and yep so now you can see

00:06:53,310 --> 00:07:01,860
all the information I mean all the

00:06:57,300 --> 00:07:05,640
content the content is in here compared

00:07:01,860 --> 00:07:13,740
to the one that we fetch as default like

00:07:05,640 --> 00:07:19,020
jazz a browser user agent yep so you'll

00:07:13,740 --> 00:07:21,960
see something like there's there's some

00:07:19,020 --> 00:07:23,790
code somewhere here that that where the

00:07:21,960 --> 00:07:31,680
mounting happens but yeah gehen there's

00:07:23,790 --> 00:07:36,030
no full content and performance so the

00:07:31,680 --> 00:07:38,100
one that all that is on the that is

00:07:36,030 --> 00:07:43,290
saying client side rendering you can see

00:07:38,100 --> 00:07:46,590
that how the browser actually renders

00:07:43,290 --> 00:07:48,480
this is like it will download HTML it

00:07:46,590 --> 00:07:52,560
will wait for JavaScript that is inside

00:07:48,480 --> 00:07:54,810
that HTML to be downloaded then I will

00:07:52,560 --> 00:07:57,060
try to evaluate it and after that I will

00:07:54,810 --> 00:08:00,210
maybe in our case you try to make some

00:07:57,060 --> 00:08:04,650
Ajax calls and only after that user will

00:08:00,210 --> 00:08:06,040
see some content it works fine in some

00:08:04,650 --> 00:08:07,900
cases like especially

00:08:06,040 --> 00:08:09,850
dekstop like it'sit's not that of a big

00:08:07,900 --> 00:08:11,610
deal where you have good connection

00:08:09,850 --> 00:08:14,380
especially in countries like Singapore

00:08:11,610 --> 00:08:18,520
but when you are mobile and then there

00:08:14,380 --> 00:08:21,850
is a high high latency and low bandwidth

00:08:18,520 --> 00:08:27,100
then you start to see a lot of

00:08:21,850 --> 00:08:29,400
performance issues on on this side you

00:08:27,100 --> 00:08:32,560
can see that server side rendering of

00:08:29,400 --> 00:08:36,700
actually what happens here is that as

00:08:32,560 --> 00:08:39,490
soon as you download the document it has

00:08:36,700 --> 00:08:41,169
everything and user just sees it and you

00:08:39,490 --> 00:08:44,070
can still download the JavaScript app

00:08:41,169 --> 00:08:46,900
and do all the other stuff like

00:08:44,070 --> 00:08:48,700
rehydrating it and maybe making some

00:08:46,900 --> 00:08:51,010
additional Ajax calls if you want to or

00:08:48,700 --> 00:08:53,260
you can just render everything on server

00:08:51,010 --> 00:08:54,700
side so there's some clear big

00:08:53,260 --> 00:08:58,900
performance gains when you do

00:08:54,700 --> 00:09:01,000
server-side rendering maybe maybe this

00:08:58,900 --> 00:09:05,020
will this performance issue will get

00:09:01,000 --> 00:09:07,480
better with HTTP too but for now like I

00:09:05,020 --> 00:09:10,380
mean I I think still it might not get

00:09:07,480 --> 00:09:17,050
that better but I I think this helps and

00:09:10,380 --> 00:09:19,900
yeah maintainability is is not a big

00:09:17,050 --> 00:09:21,400
issue when it comes to single page

00:09:19,900 --> 00:09:22,930
application like what we build a

00:09:21,400 --> 00:09:25,450
trademark because it's a backbone

00:09:22,930 --> 00:09:27,540
application all the code is in there we

00:09:25,450 --> 00:09:31,600
don't we don't have any server

00:09:27,540 --> 00:09:34,030
application that is rendering it we we

00:09:31,600 --> 00:09:37,480
just have restful api so it might not be

00:09:34,030 --> 00:09:38,920
a big deal but I i think for

00:09:37,480 --> 00:09:40,930
applications like which have some

00:09:38,920 --> 00:09:43,660
partial stop being done on a server and

00:09:40,930 --> 00:09:47,710
then loading up sing some single page

00:09:43,660 --> 00:09:49,330
application of to a browser and you're

00:09:47,710 --> 00:09:53,200
sharing some stuff like formatting etc

00:09:49,330 --> 00:09:56,050
or doing some data mutation I think you

00:09:53,200 --> 00:10:00,730
can share that logic universal

00:09:56,050 --> 00:10:04,570
JavaScript helps with that as well all

00:10:00,730 --> 00:10:06,490
right so how do how how to build a

00:10:04,570 --> 00:10:09,280
universal JavaScript app there are many

00:10:06,490 --> 00:10:12,100
ways and I like frameworks like mature

00:10:09,280 --> 00:10:14,380
and they actually come up with a lot of

00:10:12,100 --> 00:10:16,070
packages that or I think by default also

00:10:14,380 --> 00:10:18,490
material has this is server etc

00:10:16,070 --> 00:10:21,590
all that stuff can help you build

00:10:18,490 --> 00:10:23,860
Universal JavaScript app but let's say

00:10:21,590 --> 00:10:26,630
if we are using react or something else

00:10:23,860 --> 00:10:30,920
how do we build it I'm we're just going

00:10:26,630 --> 00:10:34,610
to dig a big dive into some coding here

00:10:30,920 --> 00:10:39,820
and see how to build a basic universal

00:10:34,610 --> 00:10:45,350
application using react and nodejs so

00:10:39,820 --> 00:10:48,440
let's build something like this this is

00:10:45,350 --> 00:10:51,590
the component hierarchy so we have input

00:10:48,440 --> 00:10:52,820
we have some progress j/s and then we

00:10:51,590 --> 00:10:54,380
have search results so you type

00:10:52,820 --> 00:10:56,450
something and then we'll just try to

00:10:54,380 --> 00:10:59,150
fake that search result for now because

00:10:56,450 --> 00:11:01,070
we we are not using any API or anything

00:10:59,150 --> 00:11:05,260
it will take some time to build the

00:11:01,070 --> 00:11:11,300
whole flux or some other layer here and

00:11:05,260 --> 00:11:16,180
yeah we have a rapper AB GS so let's get

00:11:11,300 --> 00:11:19,130
to it all right so I have this basic

00:11:16,180 --> 00:11:21,560
template here which I'm going to use to

00:11:19,130 --> 00:11:24,620
build a universal JavaScript application

00:11:21,560 --> 00:11:28,340
so i'll just quickly run through what we

00:11:24,620 --> 00:11:30,350
have so i've already have some node

00:11:28,340 --> 00:11:31,910
modules that i've installed so that i

00:11:30,350 --> 00:11:35,350
don't have to do n PM install again and

00:11:31,910 --> 00:11:38,990
then I have some web pack config for

00:11:35,350 --> 00:11:41,720
bundling the application etc so this is

00:11:38,990 --> 00:11:44,090
my backpack where you basic stuff so

00:11:41,720 --> 00:11:48,050
it's it's going to look for client

00:11:44,090 --> 00:11:51,350
client rjs which is not there yet and it

00:11:48,050 --> 00:11:54,320
will it will output a bundle DOJ's in a

00:11:51,350 --> 00:11:56,600
dist folder which is not here yet and it

00:11:54,320 --> 00:11:59,390
will yeah we are going to use es6 and

00:11:56,600 --> 00:12:04,160
stuff so it's we i have babel loader

00:11:59,390 --> 00:12:09,760
here and and yeah that's pretty much it

00:12:04,160 --> 00:12:13,340
and for web pack and then i have index

00:12:09,760 --> 00:12:16,250
dot GS so it's it's doing pretty much

00:12:13,340 --> 00:12:19,250
the same thing for the server side so it

00:12:16,250 --> 00:12:21,890
will set up a like it initiated it will

00:12:19,250 --> 00:12:25,240
register babel here and then it will

00:12:21,890 --> 00:12:27,950
look for server Dodgers and execute it

00:12:25,240 --> 00:12:29,930
so let's let's build a

00:12:27,950 --> 00:12:32,060
single page application that just runs

00:12:29,930 --> 00:12:34,040
on a browser first and then we can do

00:12:32,060 --> 00:12:36,350
the server side so I'm just going to go

00:12:34,040 --> 00:12:38,150
here and yeah by the way I have some

00:12:36,350 --> 00:12:40,160
code or ID with me so I'm just going to

00:12:38,150 --> 00:12:42,680
paste it there or like even write some

00:12:40,160 --> 00:12:47,140
and probably talk about it what it is

00:12:42,680 --> 00:12:47,140
that actually typing each and every line

00:12:47,770 --> 00:12:54,200
alright so let's do this let's create

00:12:51,410 --> 00:13:00,650
client Jess and let me just look at all

00:12:54,200 --> 00:13:05,000
right so this is what i have here so

00:13:00,650 --> 00:13:08,680
what it's doing is it's actually yeah

00:13:05,000 --> 00:13:12,640
it's look um it's just mounting the app

00:13:08,680 --> 00:13:16,250
container a difference between can like

00:13:12,640 --> 00:13:18,560
now and i'll go in detail later so app

00:13:16,250 --> 00:13:21,320
is just a react component that is

00:13:18,560 --> 00:13:23,630
actually composing a couple of other

00:13:21,320 --> 00:13:26,690
components in there the one that we saw

00:13:23,630 --> 00:13:29,750
in the diagram the slides so it's going

00:13:26,690 --> 00:13:34,730
to mount to the root I have index or

00:13:29,750 --> 00:13:37,580
HTML here which has this basic HTML

00:13:34,730 --> 00:13:40,510
template so we are going to route here

00:13:37,580 --> 00:13:48,890
and then we have this bundle dot J's

00:13:40,510 --> 00:13:51,890
just okay yep so yeah so our client

00:13:48,890 --> 00:13:55,700
application will be bundled and will be

00:13:51,890 --> 00:13:59,000
captain static / bundled ojs right now

00:13:55,700 --> 00:14:02,440
that's not done so i have this let's go

00:13:59,000 --> 00:14:02,440
ahead and create our a BS

00:14:26,830 --> 00:14:34,180
so a nap dodge is what we have is like

00:14:29,710 --> 00:14:36,910
we are we are importing some components

00:14:34,180 --> 00:14:38,740
like input search results so if you go

00:14:36,910 --> 00:14:41,650
back here we have an input progress bar

00:14:38,740 --> 00:14:43,660
search result so I'm pretty much loading

00:14:41,650 --> 00:14:45,970
that stuff I have some additional stuff

00:14:43,660 --> 00:14:48,610
that's not in the slide as like result

00:14:45,970 --> 00:14:51,490
card so each of the result as a card

00:14:48,610 --> 00:14:56,530
that see they're like this one this box

00:14:51,490 --> 00:15:00,660
here and we have some data in data

00:14:56,530 --> 00:15:00,660
folder so let's just quickly bootstrap

00:15:12,550 --> 00:15:15,550
components

00:15:38,410 --> 00:15:43,810
dark

00:15:41,390 --> 00:15:43,810
yes

00:15:48,760 --> 00:15:53,510
so this is a stateless component react

00:15:52,220 --> 00:15:55,100
recently released this so you can

00:15:53,510 --> 00:15:59,990
actually write a component in this way

00:15:55,100 --> 00:16:01,580
which is like pretty cool and yeah what

00:15:59,990 --> 00:16:06,580
it does is just take some props and just

00:16:01,580 --> 00:16:06,580
renders a component at one more here

00:16:07,540 --> 00:16:16,370
this one just renders a children's prop

00:16:14,360 --> 00:16:30,380
that's it it's like a rapper nothing

00:16:16,370 --> 00:16:32,810
else and okay all right so let's let's

00:16:30,380 --> 00:16:36,140
have a look at here so what I'm doing is

00:16:32,810 --> 00:16:38,600
I'm just initializing some state I have

00:16:36,140 --> 00:16:51,020
some product data let me just create a

00:16:38,600 --> 00:16:54,130
data ducks is it products Rogers its

00:16:51,020 --> 00:16:54,130
product Oh Cheers

00:17:02,720 --> 00:17:09,110
alright so I'm just going to copy this

00:17:04,579 --> 00:17:11,270
data so this data is just like a title

00:17:09,110 --> 00:17:18,650
and an image of that product and a URL

00:17:11,270 --> 00:17:21,140
that's it all right so let's just close

00:17:18,650 --> 00:17:25,549
others and just open our appt don't

00:17:21,140 --> 00:17:27,470
cheers and yeah okay sorry what's

00:17:25,549 --> 00:17:31,760
happening here is I'm just initializing

00:17:27,470 --> 00:17:33,740
some state for this application for it

00:17:31,760 --> 00:17:35,659
for this component I have some products

00:17:33,740 --> 00:17:39,799
i'm just putting all the products in

00:17:35,659 --> 00:17:42,409
here and then what I'm rendering is just

00:17:39,799 --> 00:17:48,400
all the products initially and then off

00:17:42,409 --> 00:17:52,100
then on input I have a handle on submit

00:17:48,400 --> 00:17:56,419
where where as soon as user enters

00:17:52,100 --> 00:17:58,370
something he will be shown it will

00:17:56,419 --> 00:18:02,000
quickly change the state to progress the

00:17:58,370 --> 00:18:05,210
loading and then we will we will

00:18:02,000 --> 00:18:08,539
simulate some sort of like a synchronous

00:18:05,210 --> 00:18:09,890
operation so I will go somewhere and try

00:18:08,539 --> 00:18:13,909
to fetch it but actually is this trying

00:18:09,890 --> 00:18:16,460
to like get to two of the products

00:18:13,909 --> 00:18:19,940
randomly from that product set that been

00:18:16,460 --> 00:18:25,460
included up here yep so let's run this

00:18:19,940 --> 00:18:27,049
and right yeah so before I run it let me

00:18:25,460 --> 00:18:30,260
just show you how my package or Jason

00:18:27,049 --> 00:18:32,690
looks so I i I'm just running these two

00:18:30,260 --> 00:18:35,600
commands and like there is better way to

00:18:32,690 --> 00:18:37,130
do it like you have to like people run

00:18:35,600 --> 00:18:39,559
watch and stuff but right now for this

00:18:37,130 --> 00:18:41,450
one I just try to cap it keep it very

00:18:39,559 --> 00:18:43,820
simple so I'm just going to run backpack

00:18:41,450 --> 00:18:47,330
and which will create a bundle and then

00:18:43,820 --> 00:18:50,750
I will just run a node indexed rjs which

00:18:47,330 --> 00:18:56,289
will just execute the server that's a so

00:18:50,750 --> 00:18:56,289
run all right

00:18:56,700 --> 00:18:59,840
I'm starved

00:19:03,940 --> 00:19:06,659
it

00:19:10,520 --> 00:19:13,120
art

00:19:14,470 --> 00:19:20,020
okay my bad it's yeah we don't have a

00:19:17,620 --> 00:19:22,750
server so let's just open this directory

00:19:20,020 --> 00:19:24,789
and yeah this is a very bad way to do it

00:19:22,750 --> 00:19:28,120
but we'll just you know yeah so this

00:19:24,789 --> 00:19:31,720
other application looks like and I have

00:19:28,120 --> 00:19:36,159
some CSS or that I prepared earlier in

00:19:31,720 --> 00:19:39,370
here some ugly CSS no preprocessors just

00:19:36,159 --> 00:19:41,440
simple CSS and yeah so if you see now

00:19:39,370 --> 00:19:44,770
what it does is like it loads the

00:19:41,440 --> 00:19:46,360
application and then and then after

00:19:44,770 --> 00:19:49,630
javascript is loaded it will actually

00:19:46,360 --> 00:19:52,120
populate the it will mount the component

00:19:49,630 --> 00:19:55,870
and you can see that react component is

00:19:52,120 --> 00:19:57,580
mounted and so functionality is just

00:19:55,870 --> 00:19:59,200
this I'm just going to try bread and

00:19:57,580 --> 00:20:00,909
it's like freaking dumb and it will just

00:19:59,200 --> 00:20:03,520
like randomly give me something banana

00:20:00,909 --> 00:20:07,870
or something and that's it and let's

00:20:03,520 --> 00:20:11,820
let's render this on server and so I'm

00:20:07,870 --> 00:20:17,230
just going to create a new file server

00:20:11,820 --> 00:20:23,909
touches and all right so I'm just going

00:20:17,230 --> 00:20:23,909
to import Express from express

00:20:24,950 --> 00:20:32,990
I have server prepared already let's

00:20:27,020 --> 00:20:36,710
just put here alright so what I have

00:20:32,990 --> 00:20:42,620
here is a very simple bare minimal

00:20:36,710 --> 00:20:44,830
Express server it's a it's what it's

00:20:42,620 --> 00:20:50,540
doing is it's taking that same app

00:20:44,830 --> 00:20:52,460
container a component and it's it's

00:20:50,540 --> 00:20:54,770
using this HTML wrapper which I have to

00:20:52,460 --> 00:20:57,080
create yet or what HTML wrapper is is

00:20:54,770 --> 00:21:01,690
that pretty much the same thing which

00:20:57,080 --> 00:21:05,170
I'm just going to put it in here as a

00:21:01,690 --> 00:21:05,170
node module

00:21:15,080 --> 00:21:17,950
ok

00:21:18,780 --> 00:21:21,770
alright so

00:21:27,410 --> 00:21:34,010
so yeah it's it's is just a wrapper it's

00:21:31,370 --> 00:21:35,780
uh oh is this wrapper function i'm

00:21:34,010 --> 00:21:39,590
passing app to it and then is this a

00:21:35,780 --> 00:21:43,550
binding up here that's it nothing much

00:21:39,590 --> 00:21:45,770
so on server yeah this should this

00:21:43,550 --> 00:21:48,890
should just do the magic and and yeah

00:21:45,770 --> 00:21:50,300
about about about this section what we

00:21:48,890 --> 00:21:53,090
are doing here is i'm just running a

00:21:50,300 --> 00:21:56,960
static middleware so that it can

00:21:53,090 --> 00:21:59,870
actually take bundle and style on the

00:21:56,960 --> 00:22:01,460
server as a static files and this

00:21:59,870 --> 00:22:04,130
middleware here is just sending the

00:22:01,460 --> 00:22:06,290
response back after putting everything

00:22:04,130 --> 00:22:09,320
together we are using render to string

00:22:06,290 --> 00:22:10,640
this is provided by react itself what it

00:22:09,320 --> 00:22:15,290
does is actually it converts everything

00:22:10,640 --> 00:22:18,410
to string and that's it passes back to

00:22:15,290 --> 00:22:20,960
the client and then online when you when

00:22:18,410 --> 00:22:22,910
you try to mount it again what it does

00:22:20,960 --> 00:22:25,670
is it won't replace the whole thing if

00:22:22,910 --> 00:22:28,100
it matches the dom if the door miss em

00:22:25,670 --> 00:22:31,790
same from the server and the client it

00:22:28,100 --> 00:22:34,420
will not try to replace it so let's do

00:22:31,790 --> 00:22:34,420
this now

00:22:41,480 --> 00:22:48,309
alright so I yeah it's running I don't

00:22:43,880 --> 00:22:53,150
have any message in there so alright

00:22:48,309 --> 00:22:54,950
let's open our local host 3000 just move

00:22:53,150 --> 00:22:57,740
this little bit here so that I know

00:22:54,950 --> 00:23:02,840
what's going on all right let's have a

00:22:57,740 --> 00:23:06,350
look so earlier when we saw it was the

00:23:02,840 --> 00:23:08,419
the document was empty there was no I

00:23:06,350 --> 00:23:10,669
mean it wasn't empty but there was no

00:23:08,419 --> 00:23:15,410
suicide rendered content in there but

00:23:10,669 --> 00:23:17,120
let's see now so yeah now you can see

00:23:15,410 --> 00:23:20,750
that there is some react stuff here that

00:23:17,120 --> 00:23:26,150
directly came from server and then

00:23:20,750 --> 00:23:27,620
you'll notice something here in your in

00:23:26,150 --> 00:23:30,770
here that there is something called data

00:23:27,620 --> 00:23:32,030
react a checksum so what what it does is

00:23:30,770 --> 00:23:37,040
that on a service ID will generate

00:23:32,030 --> 00:23:38,630
something like this a number or I don't

00:23:37,040 --> 00:23:39,830
like some time its hash I don't know I

00:23:38,630 --> 00:23:43,240
don't know exactly what it is but like

00:23:39,830 --> 00:23:45,650
it will generate a unique key that is

00:23:43,240 --> 00:23:48,650
compared on the client side when we are

00:23:45,650 --> 00:23:50,210
doing something like this so when I'm

00:23:48,650 --> 00:23:52,070
mounting this application on the client

00:23:50,210 --> 00:23:55,820
side it will try to compare this and

00:23:52,070 --> 00:23:58,640
then it was just like it will just

00:23:55,820 --> 00:24:01,460
continue from where it left off now

00:23:58,640 --> 00:24:05,480
let's say if the DOM is different on the

00:24:01,460 --> 00:24:09,610
server then the client so so let's say I

00:24:05,480 --> 00:24:13,750
do something like super quick one and

00:24:09,610 --> 00:24:13,750
just do something like this

00:24:22,550 --> 00:24:26,920
so I'm just going to define a jewel I

00:24:24,620 --> 00:24:32,560
hope this works and I haven't dusted it

00:24:26,920 --> 00:24:32,560
so on here sorry on the back

00:24:38,040 --> 00:24:44,540
here I will just do something like just

00:24:48,200 --> 00:24:54,559
Falls and yeah that's sorry I can just

00:24:51,950 --> 00:25:04,299
do something like this I'm gonna get out

00:24:54,559 --> 00:25:08,000
so let's let's get this a try and so

00:25:04,299 --> 00:25:14,059
what i will do is probably let's go to

00:25:08,000 --> 00:25:17,169
one of the components and or we can just

00:25:14,059 --> 00:25:17,169
do it in the app is

00:25:23,990 --> 00:25:35,990
so if i have something like this so it's

00:25:29,360 --> 00:25:37,550
a great driving I will do this and so on

00:25:35,990 --> 00:25:44,720
a server side I'll just return something

00:25:37,550 --> 00:25:48,800
like this with class name some gibberish

00:25:44,720 --> 00:25:53,480
and then I'll just do normal progress

00:25:48,800 --> 00:25:56,620
bar here let's see if this works I

00:25:53,480 --> 00:25:56,620
haven't tested this out

00:26:02,759 --> 00:26:05,509
ok

00:26:21,320 --> 00:26:25,809
oh okay okay my bad

00:26:40,200 --> 00:26:44,820
alright so now you can see that this is

00:26:43,019 --> 00:26:46,950
throwing some reactive throwing some

00:26:44,820 --> 00:26:49,169
morning here that says that attempt to

00:26:46,950 --> 00:26:51,299
reuse markup in container but Jackson

00:26:49,169 --> 00:26:53,580
was invalid this generally means blah

00:26:51,299 --> 00:26:57,120
blah blah that you know your server side

00:26:53,580 --> 00:27:00,539
render is kind of useless so you have to

00:26:57,120 --> 00:27:03,510
make sure that your DOM is same what's

00:27:00,539 --> 00:27:05,039
on your markup is same that you throw

00:27:03,510 --> 00:27:09,720
from server and then you mount it on the

00:27:05,039 --> 00:27:14,269
client all right so that was just a

00:27:09,720 --> 00:27:18,389
basic you know basic isomorphic app

00:27:14,269 --> 00:27:22,950
universal app sorry let's skip this

00:27:18,389 --> 00:27:25,559
since we build this already and yep done

00:27:22,950 --> 00:27:28,710
but was it was it so simple like I mean

00:27:25,559 --> 00:27:32,870
is that it not really actually this is

00:27:28,710 --> 00:27:35,070
this is very basic stuff and building a

00:27:32,870 --> 00:27:38,279
universal JavaScript application using

00:27:35,070 --> 00:27:40,950
react node and tools like flux redux is

00:27:38,279 --> 00:27:44,039
a bit more complicated because of

00:27:40,950 --> 00:27:47,549
several things so let's let's talk a

00:27:44,039 --> 00:27:50,100
little bit more about that so tricky

00:27:47,549 --> 00:27:52,769
parts let's look at a more complex

00:27:50,100 --> 00:27:54,120
application so I'll just close this one

00:27:52,769 --> 00:27:56,190
and we will just have a look at this one

00:27:54,120 --> 00:27:58,529
so this is something that I build over

00:27:56,190 --> 00:28:05,120
the weekend and like what it uses is the

00:27:58,529 --> 00:28:07,500
users Redux as a as a state Redux is a

00:28:05,120 --> 00:28:09,720
predictable state library what it does

00:28:07,500 --> 00:28:11,610
is like it you can create reducers and

00:28:09,720 --> 00:28:12,990
then it will create a store object for

00:28:11,610 --> 00:28:15,059
you which you can use in your

00:28:12,990 --> 00:28:18,809
application and maintain a state across

00:28:15,059 --> 00:28:21,299
the application so similar to flux not

00:28:18,809 --> 00:28:24,299
not really same as flux but I wouldn't

00:28:21,299 --> 00:28:29,750
go more in detail there so what what are

00:28:24,299 --> 00:28:33,120
we doing here is now I have this here

00:28:29,750 --> 00:28:35,500
sorry this is

00:28:33,120 --> 00:28:37,780
yeah sorry this is the application all

00:28:35,500 --> 00:28:44,860
right so what I do is if I search for

00:28:37,780 --> 00:28:48,130
bread should get a bread yeah internet

00:28:44,860 --> 00:28:51,220
is slow here think so so yeah I made a

00:28:48,130 --> 00:28:54,370
real API call to red mud API and then it

00:28:51,220 --> 00:28:56,169
give me bread and now if like more

00:28:54,370 --> 00:28:58,450
complex example would be disliked right

00:28:56,169 --> 00:29:00,400
so people might directly go to this

00:28:58,450 --> 00:29:02,559
bread page instead of going to a home

00:29:00,400 --> 00:29:08,440
page and you know so if I just directly

00:29:02,559 --> 00:29:11,770
go to bread what I see is yeah

00:29:08,440 --> 00:29:15,340
everything is in here rendered on the

00:29:11,770 --> 00:29:17,919
server side there is no ajax call that

00:29:15,340 --> 00:29:21,070
was made and also you will see something

00:29:17,919 --> 00:29:22,630
here so this is the state that was

00:29:21,070 --> 00:29:25,890
passed from server to the client side

00:29:22,630 --> 00:29:27,760
and what happened here is that I

00:29:25,890 --> 00:29:30,010
something was done on the server side

00:29:27,760 --> 00:29:32,830
like there was like we felt that data we

00:29:30,010 --> 00:29:35,590
package it together and then we

00:29:32,830 --> 00:29:38,110
dehydrated this stuff into this initial

00:29:35,590 --> 00:29:41,559
state and then on the app on the client

00:29:38,110 --> 00:29:43,179
side we hydrated it and started like app

00:29:41,559 --> 00:29:44,860
will continue to work exactly the way

00:29:43,179 --> 00:29:48,970
it's supposed to work so let's say if I

00:29:44,860 --> 00:29:51,909
fetch milk now I will get a JAX call

00:29:48,970 --> 00:30:01,559
that will get me a milk and yet caught

00:29:51,909 --> 00:30:01,559
me some milk yep and yeah I mean yeah so

00:30:02,220 --> 00:30:11,260
all right okay so so that is more close

00:30:07,000 --> 00:30:17,860
to some real application and so what are

00:30:11,260 --> 00:30:20,140
the tricky parts here so what one of the

00:30:17,860 --> 00:30:24,100
thing is that when you have a complex

00:30:20,140 --> 00:30:25,510
application that is making several which

00:30:24,100 --> 00:30:28,150
has several components that are making a

00:30:25,510 --> 00:30:32,200
JAX calls and they have their state

00:30:28,150 --> 00:30:35,140
maintained in the application you want

00:30:32,200 --> 00:30:36,669
to somehow get that stuff and push it to

00:30:35,140 --> 00:30:40,570
client so that you can continue from

00:30:36,669 --> 00:30:43,830
there so that's where actually things

00:30:40,570 --> 00:30:46,320
started to get messy so in this case

00:30:43,830 --> 00:30:48,059
I'm just showing a very quick example of

00:30:46,320 --> 00:30:50,850
redox you guys can have a look at it

00:30:48,059 --> 00:30:53,460
later in more in detail I'll share the

00:30:50,850 --> 00:30:55,049
code as well so what's happening here is

00:30:53,460 --> 00:30:57,690
that I'm just creating a store on the

00:30:55,049 --> 00:31:02,519
server side using all my reducers so

00:30:57,690 --> 00:31:05,820
things like my I mean in this case it's

00:31:02,519 --> 00:31:07,350
just a search reducer that actually gets

00:31:05,820 --> 00:31:10,440
the data and then you know like

00:31:07,350 --> 00:31:12,779
generates that reducer object and then

00:31:10,440 --> 00:31:15,720
i'll just create a store or using that

00:31:12,779 --> 00:31:17,850
and then i will dehydrate for the client

00:31:15,720 --> 00:31:19,889
by just getting the state from that

00:31:17,850 --> 00:31:22,470
store and then i will just you realize

00:31:19,889 --> 00:31:24,450
stringify it and then you know somewhere

00:31:22,470 --> 00:31:26,100
in my HTML and then pass it down to the

00:31:24,450 --> 00:31:27,269
client and on the client side what i

00:31:26,100 --> 00:31:29,850
will do is i will just pretty much

00:31:27,269 --> 00:31:31,830
follow the same code that i have in the

00:31:29,850 --> 00:31:34,320
server side for initializing a store and

00:31:31,830 --> 00:31:35,669
i will just pass an initial state to it

00:31:34,320 --> 00:31:42,029
so i will continue from where it left

00:31:35,669 --> 00:31:44,100
off yeah so like it'sit's bit more

00:31:42,029 --> 00:31:49,710
complex than that but in a nutshell this

00:31:44,100 --> 00:31:52,919
is what actually happens another another

00:31:49,710 --> 00:31:54,840
tricky part building these kind of

00:31:52,919 --> 00:31:56,190
isomorphic app is that like now you have

00:31:54,840 --> 00:31:59,399
to deal with things like this you know

00:31:56,190 --> 00:32:01,620
like you used to use edge x and make a

00:31:59,399 --> 00:32:04,110
edge x request and but now you can't use

00:32:01,620 --> 00:32:06,870
that anymore on the server side and you

00:32:04,110 --> 00:32:09,690
so so yeah I mean like there are ways to

00:32:06,870 --> 00:32:11,399
do it like you can do what I did earlier

00:32:09,690 --> 00:32:13,529
like assigned a global you can use that

00:32:11,399 --> 00:32:15,750
global for certain specific things but

00:32:13,529 --> 00:32:17,130
for such cases it's it's a mess like

00:32:15,750 --> 00:32:19,710
just don't use it don't do something

00:32:17,130 --> 00:32:22,320
like this the HTTP request is a is a

00:32:19,710 --> 00:32:24,510
node module and then it's HTTP is node

00:32:22,320 --> 00:32:26,250
module that is making a request and then

00:32:24,510 --> 00:32:27,450
if it's not a server on a client said

00:32:26,250 --> 00:32:29,610
what i'm doing is i'm making edge x

00:32:27,450 --> 00:32:31,529
request so this is a bad way to share

00:32:29,610 --> 00:32:34,320
code I like in some cases you have to do

00:32:31,529 --> 00:32:37,080
it but better approaches look for I so

00:32:34,320 --> 00:32:38,909
like universal or isomorphic modules

00:32:37,080 --> 00:32:42,510
that are already there in this case

00:32:38,909 --> 00:32:44,100
using isomorphic fetch and it I can use

00:32:42,510 --> 00:32:47,700
the same thing I can use this patch I

00:32:44,100 --> 00:32:49,169
pie that will be in the browser's soon I

00:32:47,700 --> 00:32:52,350
think it's already in some of the

00:32:49,169 --> 00:32:53,909
process but I can use that on browser

00:32:52,350 --> 00:32:56,690
and the server with the same code I

00:32:53,909 --> 00:32:56,690
don't have to change anything

00:32:56,870 --> 00:33:03,630
alright so so this this is this is a

00:33:00,840 --> 00:33:05,430
hard hard problem and then there are

00:33:03,630 --> 00:33:09,240
some frameworks out there actually who

00:33:05,430 --> 00:33:11,940
solves it like I think ljs and a couple

00:33:09,240 --> 00:33:13,500
of others they they have they have stuff

00:33:11,940 --> 00:33:16,860
that actually does this data fetch

00:33:13,500 --> 00:33:22,980
fetching part but in our case let's say

00:33:16,860 --> 00:33:24,840
in this application it's very let's let

00:33:22,980 --> 00:33:29,070
me just open that application and just

00:33:24,840 --> 00:33:31,320
show you guys all right can just roll

00:33:29,070 --> 00:33:34,200
yeah I can just show it for me so what's

00:33:31,320 --> 00:33:36,030
happening is I'm in my server i'm doing

00:33:34,200 --> 00:33:39,690
i'm running this fetch search term

00:33:36,030 --> 00:33:43,790
result when i go to hello it is passed

00:33:39,690 --> 00:33:47,130
to this and then i will try to make a

00:33:43,790 --> 00:33:49,200
HTTP call on server etc it will build a

00:33:47,130 --> 00:33:52,470
new state for the application then it

00:33:49,200 --> 00:33:53,910
will pass it down to the client so this

00:33:52,470 --> 00:33:55,530
is this is very simple like because in

00:33:53,910 --> 00:33:57,270
this case I just have I'm just doing one

00:33:55,530 --> 00:33:59,040
thing like I'm just building a Search

00:33:57,270 --> 00:34:00,930
application that's it there's nothing

00:33:59,040 --> 00:34:02,580
more to it but let's say if you are

00:34:00,930 --> 00:34:05,040
looking at something like this our red

00:34:02,580 --> 00:34:07,170
mod mobile website so if I want to load

00:34:05,040 --> 00:34:10,800
everything there's like at least four to

00:34:07,170 --> 00:34:13,500
five API calls that are made then I have

00:34:10,800 --> 00:34:16,320
to think of a different approach so in

00:34:13,500 --> 00:34:18,870
this case what happens is that they are

00:34:16,320 --> 00:34:20,820
very there several ways to do it one of

00:34:18,870 --> 00:34:23,010
the ways is that in each of your handler

00:34:20,820 --> 00:34:26,129
components like the main components like

00:34:23,010 --> 00:34:27,540
app app is a rapper but like beneath a

00:34:26,129 --> 00:34:29,790
pew might have landing pages search

00:34:27,540 --> 00:34:33,419
pages etc you have to have something

00:34:29,790 --> 00:34:36,360
like this static function then what you

00:34:33,419 --> 00:34:38,179
can do is actually you can get the list

00:34:36,360 --> 00:34:40,590
of all the components on the server side

00:34:38,179 --> 00:34:43,350
loop through all of them look for these

00:34:40,590 --> 00:34:45,560
functions which are retaining promises

00:34:43,350 --> 00:34:49,440
and then you resolve all the promises

00:34:45,560 --> 00:34:52,830
build that store using Redux and pass it

00:34:49,440 --> 00:34:54,230
back to your application yeah but you

00:34:52,830 --> 00:34:58,380
have to write a lot of code for that

00:34:54,230 --> 00:35:00,780
unfortunately another another tricky

00:34:58,380 --> 00:35:03,030
part is indira data fetching is that you

00:35:00,780 --> 00:35:05,610
want to prefetch some of the stuff like

00:35:03,030 --> 00:35:08,190
that navigation and that categories at

00:35:05,610 --> 00:35:10,080
the top but data for that but like maybe

00:35:08,190 --> 00:35:12,390
this product list you don't

00:35:10,080 --> 00:35:13,860
want to prefetch you want to fetch it

00:35:12,390 --> 00:35:16,710
online you you want to show a spinner

00:35:13,860 --> 00:35:18,300
for whatever reason for now you can

00:35:16,710 --> 00:35:20,640
immediately do it I think using

00:35:18,300 --> 00:35:23,370
component DeadMau mount and it shouldn't

00:35:20,640 --> 00:35:26,010
cause much of a problem there but I like

00:35:23,370 --> 00:35:30,530
there yeah I mean then then what happens

00:35:26,010 --> 00:35:33,300
is that you will have to define to

00:35:30,530 --> 00:35:34,440
dispatch functions one in component in

00:35:33,300 --> 00:35:36,360
mount which will fetch something like

00:35:34,440 --> 00:35:39,030
this which is okay shouldn't be a

00:35:36,360 --> 00:35:40,980
problem but it's not a really really

00:35:39,030 --> 00:35:44,730
good way there are some libraries that

00:35:40,980 --> 00:35:47,490
help you do that like react Thatcher is

00:35:44,730 --> 00:35:48,720
one library and then with help of some

00:35:47,490 --> 00:35:52,200
promise middle where you can actually

00:35:48,720 --> 00:35:54,870
pass things up and do something like

00:35:52,200 --> 00:35:56,760
that yeah but some this is something I'm

00:35:54,870 --> 00:35:58,800
still researching I've like we've done

00:35:56,760 --> 00:36:02,490
something like this but I haven't done

00:35:58,800 --> 00:36:05,910
that like probably this new stuff yeah

00:36:02,490 --> 00:36:07,770
so that's yeah that's pretty much it and

00:36:05,910 --> 00:36:10,560
the application that you guys just saw

00:36:07,770 --> 00:36:14,520
this one it's using Redux and couple of

00:36:10,560 --> 00:36:20,850
other stuff and it's it's hosted on our

00:36:14,520 --> 00:36:23,430
github so feel free to feel free to look

00:36:20,850 --> 00:36:25,140
at it and give feedback it'sit's not a

00:36:23,430 --> 00:36:26,760
really beautiful code but like yeah I'm

00:36:25,140 --> 00:36:29,280
just in case if you guys want to have a

00:36:26,760 --> 00:36:35,970
look so yeah it's out here there's no

00:36:29,280 --> 00:36:38,940
read me yeah alright just alright so

00:36:35,970 --> 00:36:40,590
that's pretty much it and these this is

00:36:38,940 --> 00:36:42,420
the resources this is what I've been

00:36:40,590 --> 00:36:44,100
through and I think if you guys have a

00:36:42,420 --> 00:36:46,530
look at it there's tons of universal

00:36:44,100 --> 00:36:52,200
application related content out there

00:36:46,530 --> 00:36:55,500
here yep hi thank you so much hi um so

00:36:52,200 --> 00:36:58,710
question red mark doesn't use react

00:36:55,500 --> 00:37:03,750
right now or just type of universal app

00:36:58,710 --> 00:37:07,080
it does actually so our our main website

00:37:03,750 --> 00:37:09,570
of the one that you see on red marcom

00:37:07,080 --> 00:37:11,640
actually uses react all the way but we

00:37:09,570 --> 00:37:13,320
are stuck with backbone and it's like a

00:37:11,640 --> 00:37:15,870
really complex application we are trying

00:37:13,320 --> 00:37:18,330
to move away from it so what I did is

00:37:15,870 --> 00:37:19,950
like I talked to pm's and got like one

00:37:18,330 --> 00:37:21,250
month of time and we build a mobile

00:37:19,950 --> 00:37:23,440
website using redux

00:37:21,250 --> 00:37:24,940
all that stuff so that we can show it to

00:37:23,440 --> 00:37:28,000
them how it looks like and you know it's

00:37:24,940 --> 00:37:30,490
more easy to build stuff so yeah yep so

00:37:28,000 --> 00:37:33,310
we are going to move to this whatever I

00:37:30,490 --> 00:37:35,290
showed for the main website as well yep

00:37:33,310 --> 00:37:37,750
you can access red mark from mobile

00:37:35,290 --> 00:37:40,480
phone and it will give you the mobile

00:37:37,750 --> 00:37:43,660
website okay thank you we have done with

00:37:40,480 --> 00:37:46,900
the same methodology i mislike you how

00:37:43,660 --> 00:37:50,110
you deal with the the cookies coyote

00:37:46,900 --> 00:37:53,940
cookies tub because a cookie or disable

00:37:50,110 --> 00:37:53,940
site and calcite or totally different

00:37:54,270 --> 00:37:59,770
yeah that's a good question actually I

00:37:56,470 --> 00:38:02,910
run into that issue we share a user your

00:37:59,770 --> 00:38:05,320
your session token for a logged-in user

00:38:02,910 --> 00:38:07,420
between both the applications and

00:38:05,320 --> 00:38:09,580
apparently for this case I had to do

00:38:07,420 --> 00:38:13,120
that thing you know if server do this if

00:38:09,580 --> 00:38:14,800
client then do that I I think I like I'm

00:38:13,120 --> 00:38:16,780
looking for a module that can help me do

00:38:14,800 --> 00:38:19,960
that effectively on client side we are

00:38:16,780 --> 00:38:23,350
using Jas cookie module but that doesn't

00:38:19,960 --> 00:38:25,270
work well on server side and actually

00:38:23,350 --> 00:38:27,730
doesn't work at all i think i don't know

00:38:25,270 --> 00:38:30,190
i haven't dig more into that so we are

00:38:27,730 --> 00:38:32,880
just using Express cookie on server side

00:38:30,190 --> 00:38:32,880
for now yep

00:38:34,550 --> 00:38:36,610

YouTube URL: https://www.youtube.com/watch?v=ld3X8PTOgQQ


