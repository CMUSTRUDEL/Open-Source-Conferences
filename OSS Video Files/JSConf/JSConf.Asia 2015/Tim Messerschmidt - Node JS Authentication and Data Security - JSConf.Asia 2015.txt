Title: Tim Messerschmidt - Node JS Authentication and Data Security - JSConf.Asia 2015
Publication date: 2015-12-23
Playlist: JSConf.Asia 2015
Description: 
	The arena of proper authentication and data security standards is often some of the most misunderstood, confusing, and tricky aspects of building any Node site, app, or service, and the fear of data breaches with unencrypted or poorly encrypted data doesn’t make it any better.

We’re going to tackle this field, exploring the proper methodologies for building secure authentication and data security standards. We’ll run through:
- Building on top of OAuth 2 and OpenID Connect
- Node middleware services for authentication
- Working with proper hashing and salting algorithms, and avoiding others, for private user data
- Common auth and security pitfalls and solutions
In the end, we’re going to see that by understanding proper data security and authentication standards, pitfalls, and reasons for choosing one solution over another, we can make intelligent decisions on creating a solid infrastructure to protect our users and data.
As a long time mobile and web developer, Tim channels his knowledge and experience as Braintree's Head of Developer Relations. He is passionate about startups and serves as a mentor at multiple incubators and accelerators.
Prior to joining PayPal, Tim worked with Neofonie Mobile and Samsung focusing on several mobile projects. In his spare time, he leads and creates training classes in all sorts of developer-oriented topics, contributes to Open Source projects and is one of the authors of the Mobile Developer’s Guide to the Galaxy. In addition, he authored numerous articles published in print magazines.


JSConf.Asia - Red Dot Design Museum, Singapore - 20 November 2015.

Source: http://2015.jsconf.asia
Slides: http://www.slideshare.net/TimMesserschmidt/jsconf-asia-nodejs-authentication-and-data-security

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:06,529 --> 00:00:11,040
awesome thank you so much for having me

00:00:08,760 --> 00:00:13,259
it's fantastic it's actually my first

00:00:11,040 --> 00:00:15,599
talk that I do my first Tech Talk that I

00:00:13,259 --> 00:00:18,330
do in Asia so I'm really really keen to

00:00:15,599 --> 00:00:20,640
get your feedback as I already got

00:00:18,330 --> 00:00:22,470
introduced my name is Timothy Schmidt we

00:00:20,640 --> 00:00:25,320
probably long as the most German name

00:00:22,470 --> 00:00:27,269
you will ever see in your life and I

00:00:25,320 --> 00:00:29,099
think Thomas made a good kind of

00:00:27,269 --> 00:00:31,199
approach over here there can be only one

00:00:29,099 --> 00:00:33,030
German evangelist per conference day

00:00:31,199 --> 00:00:37,230
because otherwise that's kind of too

00:00:33,030 --> 00:00:39,510
much my topic today is no J's

00:00:37,230 --> 00:00:42,300
application and data security which

00:00:39,510 --> 00:00:44,399
means I'm going to go a bit into kind of

00:00:42,300 --> 00:00:46,890
the key problems that we as developers

00:00:44,399 --> 00:00:49,140
face when we implement authentication

00:00:46,890 --> 00:00:51,660
systems when we have to deal with data

00:00:49,140 --> 00:00:53,280
hardening this key stretching with

00:00:51,660 --> 00:00:56,430
public key private key encryption

00:00:53,280 --> 00:00:58,649
mechanisms hashing and I talked about a

00:00:56,430 --> 00:01:00,960
few of those kind of learnings that I've

00:00:58,649 --> 00:01:04,470
seen when we looked at different

00:01:00,960 --> 00:01:06,720
companies that's deal with this so I

00:01:04,470 --> 00:01:10,110
work for Braintree which is part of

00:01:06,720 --> 00:01:11,820
PayPal and Braintree is a payments

00:01:10,110 --> 00:01:14,640
company that deals with a lot of mobile

00:01:11,820 --> 00:01:16,979
payments but still obviously PayPal as a

00:01:14,640 --> 00:01:18,509
bigger corporate deals with a huge huge

00:01:16,979 --> 00:01:20,939
infrastructure which actually runs

00:01:18,509 --> 00:01:24,240
mostly on OJ's nowadays so that's where

00:01:20,939 --> 00:01:27,060
my interest comes from a few words about

00:01:24,240 --> 00:01:29,820
myself because before I get started you

00:01:27,060 --> 00:01:31,979
can find me on Twitter that's me

00:01:29,820 --> 00:01:33,659
I used to be a developer actually coming

00:01:31,979 --> 00:01:35,549
from a mobile background so I used to

00:01:33,659 --> 00:01:38,700
work on Windows Mobile and that stuff

00:01:35,549 --> 00:01:41,430
and it actually still existed I earned

00:01:38,700 --> 00:01:44,100
money working for Samsung as a kernel

00:01:41,430 --> 00:01:46,680
developer for android and i'm actually

00:01:44,100 --> 00:01:48,600
offering a book on node.js security at

00:01:46,680 --> 00:01:50,579
the moment with o'reilly and i've been

00:01:48,600 --> 00:01:53,220
evangelizing for companies for more than

00:01:50,579 --> 00:01:55,189
five years so you probably saw me at

00:01:53,220 --> 00:01:59,030
some mobile event or something like that

00:01:55,189 --> 00:02:02,070
I live in the beautiful town of Berlin

00:01:59,030 --> 00:02:04,860
which is always worth the trip so I can

00:02:02,070 --> 00:02:07,200
only but recommend going there but since

00:02:04,860 --> 00:02:08,050
I evangelize in a global team and I run

00:02:07,200 --> 00:02:11,020
the

00:02:08,050 --> 00:02:13,660
European and Asian team for us I kind of

00:02:11,020 --> 00:02:15,310
live a van at an airport so probably if

00:02:13,660 --> 00:02:16,690
you ever seen a Berlin airplane there's

00:02:15,310 --> 00:02:18,490
a good chance that I actually sit in

00:02:16,690 --> 00:02:20,170
there and there is like a secret

00:02:18,490 --> 00:02:23,980
handshake between all of us Everland

00:02:20,170 --> 00:02:26,430
frequent fliers all three of us so if

00:02:23,980 --> 00:02:30,310
you ever see one of us think of me

00:02:26,430 --> 00:02:33,640
alright so again brain is a paper

00:02:30,310 --> 00:02:35,230
company got acquired in 2013 and our

00:02:33,640 --> 00:02:38,200
developer facing side is pretty much

00:02:35,230 --> 00:02:41,410
Braintree so let's dive into the talk

00:02:38,200 --> 00:02:43,360
today I as I said before I dive into a

00:02:41,410 --> 00:02:45,820
few different things and I want to start

00:02:43,360 --> 00:02:47,590
with a very simple analogy then I go

00:02:45,820 --> 00:02:49,870
into a couple of different security

00:02:47,590 --> 00:02:53,770
threats that we see over and over again

00:02:49,870 --> 00:02:56,980
and then I want to go into data

00:02:53,770 --> 00:02:58,600
encryption obviously since Express is

00:02:56,980 --> 00:03:00,670
still kind of a weapon of choice for

00:02:58,600 --> 00:03:03,300
most know developers I go into how we

00:03:00,670 --> 00:03:06,100
deal with making express more secure and

00:03:03,300 --> 00:03:08,710
how we kind of work on a more defensive

00:03:06,100 --> 00:03:11,620
kind of coding approach I also go a bit

00:03:08,710 --> 00:03:13,209
into Khoa I talk about middleware and

00:03:11,620 --> 00:03:14,800
then I point out a couple of really

00:03:13,209 --> 00:03:16,450
awesome resources that help me

00:03:14,800 --> 00:03:20,140
researching this talk and that helped me

00:03:16,450 --> 00:03:22,180
researching for my book as well I want

00:03:20,140 --> 00:03:24,280
to start off with an analogy that I love

00:03:22,180 --> 00:03:26,890
I used to be I'm actually still a geek

00:03:24,280 --> 00:03:29,440
but I used to be a huge geek for kind of

00:03:26,890 --> 00:03:31,540
mythology and history and all that stuff

00:03:29,440 --> 00:03:34,230
when I was growing up anyone in this

00:03:31,540 --> 00:03:36,570
room recognizes this handsome young man

00:03:34,230 --> 00:03:40,300
just raise your hand if you do that all

00:03:36,570 --> 00:03:43,750
right awesome so the person that you see

00:03:40,300 --> 00:03:46,209
on this image which is an image from

00:03:43,750 --> 00:03:51,100
more than thousand years before Christ

00:03:46,209 --> 00:03:53,950
is Hercules or Heracles which used to be

00:03:51,100 --> 00:04:01,510
a demigod a half guard vision of Zeus

00:03:53,950 --> 00:04:05,500
and a simple woman and the issue was the

00:04:01,510 --> 00:04:09,160
stepmother of Hercules drove him mad

00:04:05,500 --> 00:04:10,330
so he did a lot of bad stuff he killed a

00:04:09,160 --> 00:04:12,459
couple of people that he shouldn't have

00:04:10,330 --> 00:04:14,470
killed and so on he wanted to do get

00:04:12,459 --> 00:04:16,960
Redemption he wanted to be redeemed and

00:04:14,470 --> 00:04:20,590
wanted to kind of save

00:04:16,960 --> 00:04:22,690
via limps make everything up what he did

00:04:20,590 --> 00:04:25,210
so they gave him a couple of different

00:04:22,690 --> 00:04:28,320
tasks to kind of make up for his work

00:04:25,210 --> 00:04:32,440
which is known as me twelve labors and

00:04:28,320 --> 00:04:34,540
one of those tasks was killing a Hydra

00:04:32,440 --> 00:04:36,490
if you don't know hydras they are huge

00:04:34,540 --> 00:04:38,860
badass snakes with a lot of different

00:04:36,490 --> 00:04:41,050
hats if you chop off her head a new head

00:04:38,860 --> 00:04:44,470
grows so that's kind of unhandy right

00:04:41,050 --> 00:04:46,900
because it's really hard to deal with so

00:04:44,470 --> 00:04:48,940
Hercules had this big mace over there

00:04:46,900 --> 00:04:51,130
that you see in his hand and he but I

00:04:48,940 --> 00:04:53,650
like punched the Hydra and tried to kill

00:04:51,130 --> 00:04:55,930
it but big heads keep on growing and

00:04:53,650 --> 00:05:01,060
growing and be Hydra keaton regenerating

00:04:55,930 --> 00:05:02,950
so he struggled so Hercules ran away got

00:05:01,060 --> 00:05:05,080
his friend he allows who was a security

00:05:02,950 --> 00:05:07,060
engineer and they figured out I should

00:05:05,080 --> 00:05:09,970
probably just patch that so they use

00:05:07,060 --> 00:05:13,120
poisons and they poison the Hydra and it

00:05:09,970 --> 00:05:16,630
actually worked so I feel securities of

00:05:13,120 --> 00:05:18,639
very similar to the Hydra we close some

00:05:16,630 --> 00:05:21,760
bugs we close some issues in a new thing

00:05:18,639 --> 00:05:23,260
appears and then we close that issue and

00:05:21,760 --> 00:05:25,030
we work on that issue and a new thing

00:05:23,260 --> 00:05:27,550
appears and there is a constant kind of

00:05:25,030 --> 00:05:30,960
treadmill where we as developers have to

00:05:27,550 --> 00:05:33,550
keep up with all those issues right a

00:05:30,960 --> 00:05:35,320
lot of developers tend to care for

00:05:33,550 --> 00:05:37,150
security when it's too late that's a bit

00:05:35,320 --> 00:05:38,620
like speeding on a highway normally

00:05:37,150 --> 00:05:40,840
people speed on a highway drive

00:05:38,620 --> 00:05:42,820
incredibly fast then they get a ticket

00:05:40,840 --> 00:05:44,590
and then they start driving slow

00:05:42,820 --> 00:05:46,570
it's the same with security a lot of

00:05:44,590 --> 00:05:48,760
developers sadly don't care for security

00:05:46,570 --> 00:05:50,530
until it's actually too late until

00:05:48,760 --> 00:05:53,380
something bad happens and then we up our

00:05:50,530 --> 00:05:55,300
game and I feel like there is actually a

00:05:53,380 --> 00:05:57,430
lot of amazing resources and a lot of

00:05:55,300 --> 00:06:00,130
great open source and amazing tutorials

00:05:57,430 --> 00:06:03,780
that actually help us not making the

00:06:00,130 --> 00:06:06,130
mistakes of other people again and again

00:06:03,780 --> 00:06:08,110
obviously there's always the tech side

00:06:06,130 --> 00:06:10,210
of things there's always what we as

00:06:08,110 --> 00:06:12,100
developers can do and then there is

00:06:10,210 --> 00:06:13,720
always the human element that's always

00:06:12,100 --> 00:06:15,580
these are the things that we don't

00:06:13,720 --> 00:06:17,800
necessarily control where we have to

00:06:15,580 --> 00:06:21,310
work at education and we have to work

00:06:17,800 --> 00:06:25,360
with culture and it turns out human

00:06:21,310 --> 00:06:29,260
beings are often attacked lazy so let me

00:06:25,360 --> 00:06:31,750
give you a very quick example in 2014

00:06:29,260 --> 00:06:33,340
the top 10 passwords were really

00:06:31,750 --> 00:06:36,500
hilarious

00:06:33,340 --> 00:06:38,900
people are lazy they like to like speed

00:06:36,500 --> 00:06:41,360
up things they like to skip logins and

00:06:38,900 --> 00:06:44,210
they like to kind of just get to a point

00:06:41,360 --> 00:06:46,250
in time very quickly so the issue is

00:06:44,210 --> 00:06:46,970
password like password because what can

00:06:46,250 --> 00:06:50,199
go wrong

00:06:46,970 --> 00:06:52,520
QWERTY and Germany that will be creates

00:06:50,199 --> 00:06:55,300
baseball that's only the Americans I

00:06:52,520 --> 00:06:57,410
guess dragon so that works over here

00:06:55,300 --> 00:06:59,780
there's a lot of those kind of things

00:06:57,410 --> 00:07:02,630
that we actually realize passwords are

00:06:59,780 --> 00:07:05,419
sometimes a bit ridiculous and passwords

00:07:02,630 --> 00:07:08,360
are actually very very kind of prone to

00:07:05,419 --> 00:07:10,639
pop culture passwords change over time

00:07:08,360 --> 00:07:12,080
and that's not just for singer

00:07:10,639 --> 00:07:15,050
individuals that's something that we see

00:07:12,080 --> 00:07:16,789
on a global scale so we see if we look

00:07:15,050 --> 00:07:18,650
at those lists and there are lists with

00:07:16,789 --> 00:07:21,979
like thousands and thousands of popular

00:07:18,650 --> 00:07:23,870
passwords that's a lot of interesting

00:07:21,979 --> 00:07:24,470
things appear let me give you a good

00:07:23,870 --> 00:07:28,599
example

00:07:24,470 --> 00:07:34,250
any Marvel fans over here Marvel Comics

00:07:28,599 --> 00:07:38,979
awesome Batman and Superman made it to

00:07:34,250 --> 00:07:42,380
place number 21 and 24 any clue why

00:07:38,979 --> 00:07:45,889
there's a movie coming out the next year

00:07:42,380 --> 00:07:48,340
Batman vs Superman so this actually

00:07:45,889 --> 00:07:51,440
makes choices like Batman and Superman

00:07:48,340 --> 00:07:53,240
incredibly popular you will see artists

00:07:51,440 --> 00:07:55,220
and they're like Lady Gaga on Justin

00:07:53,240 --> 00:07:56,780
Bieber and probably if you use Justin

00:07:55,220 --> 00:08:03,080
Bieber as a password you deserve to be

00:07:56,780 --> 00:08:04,520
hacked sorry if any a Justin Bieber fans

00:08:03,080 --> 00:08:09,919
are in the room I totally appreciate

00:08:04,520 --> 00:08:11,630
that so I think there's a lot of stuff

00:08:09,919 --> 00:08:13,760
that we as developers obviously have to

00:08:11,630 --> 00:08:16,460
do over here and that starts with simple

00:08:13,760 --> 00:08:18,020
things like educating people and good

00:08:16,460 --> 00:08:21,080
nightly mainstream media is slowly

00:08:18,020 --> 00:08:23,180
catching up so we see articles about

00:08:21,080 --> 00:08:25,370
weak passwords about how to create

00:08:23,180 --> 00:08:28,330
secure passwords and all that stuff in

00:08:25,370 --> 00:08:31,159
mainstream media we see like big

00:08:28,330 --> 00:08:33,349
journals like The Guardian like Wall

00:08:31,159 --> 00:08:35,900
Street Journal and so on actually

00:08:33,349 --> 00:08:38,510
educating people about this so this is a

00:08:35,900 --> 00:08:40,820
good start but changing culture

00:08:38,510 --> 00:08:43,700
especially to habits is something that

00:08:40,820 --> 00:08:46,460
takes a long long time and if we look at

00:08:43,700 --> 00:08:48,620
passwords it is a bit weird that

00:08:46,460 --> 00:08:50,510
how we work in the internet especially

00:08:48,620 --> 00:08:52,340
my JavaScript scene changes every

00:08:50,510 --> 00:08:53,780
Tuesday and there is always a new

00:08:52,340 --> 00:08:57,080
framework and we adopt two new

00:08:53,780 --> 00:08:59,240
technology and we learn everything but

00:08:57,080 --> 00:09:02,330
then we use those very old kind of

00:08:59,240 --> 00:09:04,640
fashioned approaches like username and

00:09:02,330 --> 00:09:06,440
password for login and that is something

00:09:04,640 --> 00:09:08,420
that we've used hundreds of years ago

00:09:06,440 --> 00:09:09,260
already right and the issues never

00:09:08,420 --> 00:09:11,330
changed

00:09:09,260 --> 00:09:13,160
passwords are being phished they are

00:09:11,330 --> 00:09:16,370
being key locked

00:09:13,160 --> 00:09:18,320
they are simply reused and you see that

00:09:16,370 --> 00:09:20,540
in those top thousand lists or even

00:09:18,320 --> 00:09:24,440
bigger lists so there is a lot of kind

00:09:20,540 --> 00:09:26,540
of issues that we have over here then if

00:09:24,440 --> 00:09:28,250
we talk about authentication we always

00:09:26,540 --> 00:09:31,250
have to talk about an authorization as

00:09:28,250 --> 00:09:34,550
well and there are popular standards

00:09:31,250 --> 00:09:36,350
like o of 1 or 2 up my D up my D

00:09:34,550 --> 00:09:39,410
connects and all that different kind of

00:09:36,350 --> 00:09:42,020
things which tend to do a lot of the

00:09:39,410 --> 00:09:44,180
same things but there is a key

00:09:42,020 --> 00:09:46,340
difference between authentication which

00:09:44,180 --> 00:09:48,320
means I want to prove that it's really

00:09:46,340 --> 00:09:51,650
me standing in front you it's about the

00:09:48,320 --> 00:09:53,540
identity of a person and authorization

00:09:51,650 --> 00:09:54,470
which means I want to give access to

00:09:53,540 --> 00:09:56,780
resources

00:09:54,470 --> 00:09:59,690
I want to grant access to certain things

00:09:56,780 --> 00:10:01,580
which can be a profile but also just to

00:09:59,690 --> 00:10:03,980
prove a picture or something else right

00:10:01,580 --> 00:10:05,840
and those are key issues and key

00:10:03,980 --> 00:10:10,210
differences that we sometimes just

00:10:05,840 --> 00:10:12,980
simply ignore there is this list of

00:10:10,210 --> 00:10:14,960
interesting vulnerabilities which is

00:10:12,980 --> 00:10:17,090
called the OAuth top 10 which is the

00:10:14,960 --> 00:10:20,270
open web application security council

00:10:17,090 --> 00:10:22,670
and security projects and we lay this

00:10:20,270 --> 00:10:24,770
list that they released was in 2013 and

00:10:22,670 --> 00:10:26,810
they go through the top 10 issues that

00:10:24,770 --> 00:10:29,690
they see across hundreds and thousands

00:10:26,810 --> 00:10:31,910
of applications we first run a simple

00:10:29,690 --> 00:10:34,430
injection which can be LDAP injection

00:10:31,910 --> 00:10:36,530
which can be SQL injection and so on and

00:10:34,430 --> 00:10:39,590
what we simply do over here is we trick

00:10:36,530 --> 00:10:41,000
the interpreter and into executing

00:10:39,590 --> 00:10:43,670
commands that shouldn't probably be

00:10:41,000 --> 00:10:46,430
executed right and everybody probably

00:10:43,670 --> 00:10:48,470
tried writing drop table in some kind of

00:10:46,430 --> 00:10:51,200
input form before it had fun doing that

00:10:48,470 --> 00:10:52,730
right and people do that and people try

00:10:51,200 --> 00:10:55,610
that it is very simple but it's actually

00:10:52,730 --> 00:10:58,090
quite critical broken authentication

00:10:55,610 --> 00:11:00,460
systems this can deal too

00:10:58,090 --> 00:11:02,260
this can cause big big issues so we see

00:11:00,460 --> 00:11:03,820
that session management is a good

00:11:02,260 --> 00:11:07,750
example people not actually signing

00:11:03,820 --> 00:11:10,600
session cookies we see no kind of

00:11:07,750 --> 00:11:13,150
hashing or we caching no encryption or

00:11:10,600 --> 00:11:16,090
weak encryption and so on that obviously

00:11:13,150 --> 00:11:18,190
causes issues again a lot of sites still

00:11:16,090 --> 00:11:19,600
provide the session ID in the URL and

00:11:18,190 --> 00:11:21,970
you can read that and it's usually

00:11:19,600 --> 00:11:23,020
sequential or something which is not

00:11:21,970 --> 00:11:25,210
that's not right

00:11:23,020 --> 00:11:27,130
because if I see my session and I see my

00:11:25,210 --> 00:11:30,250
next session ID I can probably guess

00:11:27,130 --> 00:11:33,370
what the coming session ID is cross-site

00:11:30,250 --> 00:11:35,710
scripting incredibly popular and still a

00:11:33,370 --> 00:11:38,470
very relatively severe threat so

00:11:35,710 --> 00:11:41,470
cross-site scripting or XSS is pretty

00:11:38,470 --> 00:11:44,950
much the fun of the kind of inserting

00:11:41,470 --> 00:11:47,350
scripts into a site and the browser and

00:11:44,950 --> 00:11:51,430
besides trust each other and that's a

00:11:47,350 --> 00:11:53,230
trust relation it so more than

00:11:51,430 --> 00:11:55,540
templating engines tend to kind of

00:11:53,230 --> 00:11:58,240
sanitize data and that it tend to encode

00:11:55,540 --> 00:12:01,540
different characters and so on and that

00:11:58,240 --> 00:12:04,120
all is great but we still end up

00:12:01,540 --> 00:12:06,880
evaluating different things right and we

00:12:04,120 --> 00:12:08,980
can still trick different routes and to

00:12:06,880 --> 00:12:12,430
actually edit executing things we don't

00:12:08,980 --> 00:12:14,590
want there is a difference in reflective

00:12:12,430 --> 00:12:17,100
cross-match cross-site scripting which

00:12:14,590 --> 00:12:19,570
means it is just executed once and

00:12:17,100 --> 00:12:21,310
persistent cross-site scripting where we

00:12:19,570 --> 00:12:23,350
can actually access the database right

00:12:21,310 --> 00:12:27,430
stuff and execute that over and over

00:12:23,350 --> 00:12:30,730
again so in this case we accept we

00:12:27,430 --> 00:12:34,140
exploit the trust of our browser and the

00:12:30,730 --> 00:12:36,760
user into a site and if you have used

00:12:34,140 --> 00:12:38,920
forums back in the 90s you probably know

00:12:36,760 --> 00:12:42,490
that we were able to use bbcode and that

00:12:38,920 --> 00:12:44,260
stuff to execute script tags and handle

00:12:42,490 --> 00:12:48,040
lots of fun popping up with alerts and

00:12:44,260 --> 00:12:50,710
even worse things so i'm object-- that

00:12:48,040 --> 00:12:52,840
references where no access level control

00:12:50,710 --> 00:12:55,360
is being made that is actually still an

00:12:52,840 --> 00:12:57,400
issue the amount of sites that only

00:12:55,360 --> 00:12:59,500
protect certain resources but actually

00:12:57,400 --> 00:12:59,980
ignore protecting all resources that's

00:12:59,500 --> 00:13:03,700
hilarious

00:12:59,980 --> 00:13:05,500
so objects can be manipulated I get

00:13:03,700 --> 00:13:07,360
access to certain fields of objects that

00:13:05,500 --> 00:13:09,850
should probably not be able to menu play

00:13:07,360 --> 00:13:13,139
it and those are sometimes really simple

00:13:09,850 --> 00:13:15,250
things that can lead to a big big issue

00:13:13,139 --> 00:13:17,050
misconfigured applications you would

00:13:15,250 --> 00:13:18,639
wonder I actually talked to the bunch of

00:13:17,050 --> 00:13:21,550
guys from Heroku and other companies

00:13:18,639 --> 00:13:24,670
that do cloud hosting and they said the

00:13:21,550 --> 00:13:26,350
amount of apps that go onto their

00:13:24,670 --> 00:13:28,240
services and that still run on a

00:13:26,350 --> 00:13:29,649
development environment today instead of

00:13:28,240 --> 00:13:31,899
actually switching over to production

00:13:29,649 --> 00:13:34,149
modes or that shape their credentials

00:13:31,899 --> 00:13:35,560
somehow and they messed that up there is

00:13:34,149 --> 00:13:37,509
a lot of those things where miss

00:13:35,560 --> 00:13:39,699
configuration can lead to a lot of big

00:13:37,509 --> 00:13:42,550
issues like actually showing error

00:13:39,699 --> 00:13:45,389
messages instead of using them and like

00:13:42,550 --> 00:13:49,839
consuming and gracefully on your site

00:13:45,389 --> 00:13:52,420
exposure of data where again encryption

00:13:49,839 --> 00:13:54,839
plays a huge role and public key private

00:13:52,420 --> 00:13:58,089
key sometimes sounds a bit complicated

00:13:54,839 --> 00:14:01,630
there is still way too few sites using

00:13:58,089 --> 00:14:04,990
HTTPS probably and part of that is

00:14:01,630 --> 00:14:07,569
because SSL and TLS are sometimes a bit

00:14:04,990 --> 00:14:09,220
clunky to use so we see a lot of those

00:14:07,569 --> 00:14:13,630
sites that don't really rely on

00:14:09,220 --> 00:14:16,540
transport layer security again access

00:14:13,630 --> 00:14:18,130
layer control verifying requests making

00:14:16,540 --> 00:14:20,199
sure that users are actually allowed to

00:14:18,130 --> 00:14:22,000
do certain things it sounds very simple

00:14:20,199 --> 00:14:24,250
but you would wonder how many people

00:14:22,000 --> 00:14:26,079
don't do that in Xpress we have a way to

00:14:24,250 --> 00:14:29,649
deal with that with middleware and I'm

00:14:26,079 --> 00:14:30,790
going to go into that later cross-site

00:14:29,649 --> 00:14:34,480
request forgery

00:14:30,790 --> 00:14:36,670
see Cerf is incredibly popular where we

00:14:34,480 --> 00:14:39,250
use the identity of the user to perform

00:14:36,670 --> 00:14:41,380
requests on the user's behalf and

00:14:39,250 --> 00:14:42,610
sometimes that's good because we would

00:14:41,380 --> 00:14:44,709
actually want to do that for the user

00:14:42,610 --> 00:14:46,329
and sometimes somebody does that without

00:14:44,709 --> 00:14:49,149
actually the user agreeing towards it

00:14:46,329 --> 00:14:51,420
right and we see a lot of different kind

00:14:49,149 --> 00:14:54,490
of measurements against that like we see

00:14:51,420 --> 00:14:56,079
nonce parameters state parameters we

00:14:54,490 --> 00:14:58,240
synchronize the tokens and stuff like

00:14:56,079 --> 00:15:00,910
that so we have weapons to deal with

00:14:58,240 --> 00:15:02,649
this making sure that we don't suffer

00:15:00,910 --> 00:15:05,529
under replay attacks and that kind of

00:15:02,649 --> 00:15:09,399
stuff so there is things we can do which

00:15:05,529 --> 00:15:11,860
is good so in this case we leverage with

00:15:09,399 --> 00:15:13,930
sites trust in the user because the user

00:15:11,860 --> 00:15:16,959
is locked in we have that kind of an

00:15:13,930 --> 00:15:18,689
authentication so that seems to be legit

00:15:16,959 --> 00:15:20,860
thing right

00:15:18,689 --> 00:15:22,600
number nine is interesting because this

00:15:20,860 --> 00:15:25,540
has whenever a code and everybody's like

00:15:22,600 --> 00:15:25,990
oh I write great code and that is not

00:15:25,540 --> 00:15:28,720
necessary

00:15:25,990 --> 00:15:31,810
that causes me issues a good good

00:15:28,720 --> 00:15:34,899
example was 2014 when hot plate was

00:15:31,810 --> 00:15:39,760
released hardly it was a vulnerability

00:15:34,899 --> 00:15:43,000
in open SSL about 17% of the trusted

00:15:39,760 --> 00:15:44,830
internet was affected that is a lot

00:15:43,000 --> 00:15:48,100
right so we have all those different

00:15:44,830 --> 00:15:50,430
sites which kind of led to people

00:15:48,100 --> 00:15:54,250
potentially reading the machines memory

00:15:50,430 --> 00:15:56,680
which led to kind of a violation of

00:15:54,250 --> 00:15:58,240
passwords all those passwords should be

00:15:56,680 --> 00:16:00,970
invalidated and they are obviously not

00:15:58,240 --> 00:16:03,100
so again we should move on and kind of

00:16:00,970 --> 00:16:06,029
ditch password and get rid of them and

00:16:03,100 --> 00:16:08,290
the last thing is kind of interesting

00:16:06,029 --> 00:16:11,740
validating for boards and redirects on

00:16:08,290 --> 00:16:13,660
our sites a lot of people block and they

00:16:11,740 --> 00:16:15,490
use resources and they don't actually

00:16:13,660 --> 00:16:17,620
check those resources over and over

00:16:15,490 --> 00:16:18,100
again so even though our site might be

00:16:17,620 --> 00:16:20,560
secure

00:16:18,100 --> 00:16:23,470
we might lead people to an unsecured

00:16:20,560 --> 00:16:25,990
site right and that might sound very

00:16:23,470 --> 00:16:27,130
like well why would I care but sometimes

00:16:25,990 --> 00:16:29,350
we actually have to care about these

00:16:27,130 --> 00:16:31,180
things to make sure that works so there

00:16:29,350 --> 00:16:33,790
is a table I'm not going to stick along

00:16:31,180 --> 00:16:35,470
with that's too much but you can see

00:16:33,790 --> 00:16:37,450
that some of those things are obviously

00:16:35,470 --> 00:16:40,270
very easy to explore it some of them are

00:16:37,450 --> 00:16:41,980
very widespread some of them are not

00:16:40,270 --> 00:16:43,810
that widespread anymore because it's

00:16:41,980 --> 00:16:46,450
getting easier it'd be easier to deal

00:16:43,810 --> 00:16:48,130
with that stuff but still we want to

00:16:46,450 --> 00:16:51,550
make sure that we look at at least those

00:16:48,130 --> 00:16:53,470
top 10 if not even further and handle

00:16:51,550 --> 00:16:55,390
that appropriately and there are

00:16:53,470 --> 00:16:57,579
fantastic security modules which I'm

00:16:55,390 --> 00:17:02,829
going to present that help you doing

00:16:57,579 --> 00:17:04,720
that let's talk about hashing a lot of

00:17:02,829 --> 00:17:07,660
people tend to think that it's enough to

00:17:04,720 --> 00:17:10,360
use md5 sha-1 shahtoosh a free and so on

00:17:07,660 --> 00:17:12,550
to do hashing of passwords or ciphertext

00:17:10,360 --> 00:17:14,949
or anything like that and the user is

00:17:12,550 --> 00:17:17,439
secure right because I've done my job

00:17:14,949 --> 00:17:19,000
I've hash the password and that's it it

00:17:17,439 --> 00:17:22,569
turns out that's not always the smartest

00:17:19,000 --> 00:17:25,929
idea just this year a really really big

00:17:22,569 --> 00:17:28,840
dating websites called Ashley Madison

00:17:25,929 --> 00:17:31,750
got hacked and I want to point you to

00:17:28,840 --> 00:17:35,730
the headline of the sides so it says

00:17:31,750 --> 00:17:38,500
about 11 million passwords got leaked

00:17:35,730 --> 00:17:39,670
there was just a developer that was

00:17:38,500 --> 00:17:41,230
really keen

00:17:39,670 --> 00:17:42,820
- just look at the password dump and

00:17:41,230 --> 00:17:46,240
actually some code got leaked as well

00:17:42,820 --> 00:17:49,510
and that developer found out that they

00:17:46,240 --> 00:17:51,190
used bcrypt which is fantastic but 11

00:17:49,510 --> 00:17:54,880
million passwords actually were just

00:17:51,190 --> 00:17:57,130
simply hash with md5 and that lets who

00:17:54,880 --> 00:18:00,100
those passwords being pretty much

00:17:57,130 --> 00:18:03,550
correct in seconds the simple reason why

00:18:00,100 --> 00:18:06,550
is md5 is actually way too fast it is an

00:18:03,550 --> 00:18:08,830
incredibly efficient algorithm so we

00:18:06,550 --> 00:18:13,750
want to look at slow algorithms that

00:18:08,830 --> 00:18:14,860
help us kind of protecting data I there

00:18:13,750 --> 00:18:17,380
is actually a bunch of really

00:18:14,860 --> 00:18:19,030
interesting passwords in there and I

00:18:17,380 --> 00:18:21,250
just want to point out four of them I

00:18:19,030 --> 00:18:25,420
like I should not be doing this right

00:18:21,250 --> 00:18:28,300
again it's a dating website then there

00:18:25,420 --> 00:18:31,000
is why are you doing this so people are

00:18:28,300 --> 00:18:33,940
very self-critical so passwords really

00:18:31,000 --> 00:18:38,910
help us understand human beings there is

00:18:33,940 --> 00:18:43,990
just trying this out sure sure you are I

00:18:38,910 --> 00:18:46,090
love the best password ever and at least

00:18:43,990 --> 00:18:47,350
for those top three that's how I felt

00:18:46,090 --> 00:18:50,350
the first time when I tried the Milo

00:18:47,350 --> 00:18:53,620
dinosaur I should not be doing this just

00:18:50,350 --> 00:18:54,850
trying this out it's totally cool yeah

00:18:53,620 --> 00:18:58,780
and now I drink that stuff every day

00:18:54,850 --> 00:19:01,320
over here alright so obviously that is

00:18:58,780 --> 00:19:03,490
an issue efficient hashing I said

00:19:01,320 --> 00:19:05,620
pattern like those algorithms should be

00:19:03,490 --> 00:19:09,070
slow and we see a big big reliance on

00:19:05,620 --> 00:19:10,690
crypt blowfish pbkdf2 which stands for a

00:19:09,070 --> 00:19:13,570
password-based key derivation function

00:19:10,690 --> 00:19:15,160
and you can imagine a German accent I

00:19:13,570 --> 00:19:16,900
had to learn that thing for like half an

00:19:15,160 --> 00:19:20,620
hour repeating it over and over again to

00:19:16,900 --> 00:19:23,560
say it flawlessly so those algorithms

00:19:20,620 --> 00:19:25,300
are really slow and that's good let me

00:19:23,560 --> 00:19:29,010
give you a good comparison so this is

00:19:25,300 --> 00:19:32,350
coming from the Ruby bcrypt module and

00:19:29,010 --> 00:19:34,390
they made a comparison between md5 and B

00:19:32,350 --> 00:19:36,970
clips we talked about ten thousand

00:19:34,390 --> 00:19:39,190
iterations and you can see that md5

00:19:36,970 --> 00:19:41,530
blast through ten thousand results in

00:19:39,190 --> 00:19:44,620
seconds right it not even a second it's

00:19:41,530 --> 00:19:47,380
so fast it's so efficient various bcrypt

00:19:44,620 --> 00:19:49,570
needs 22 seconds for exactly the same

00:19:47,380 --> 00:19:52,030
data set right so that's for us

00:19:49,570 --> 00:19:54,059
obviously a big indicator that big crap

00:19:52,030 --> 00:19:57,669
might actually be a good choice

00:19:54,059 --> 00:20:01,840
and I want to stress something that I

00:19:57,669 --> 00:20:04,480
find really interesting we can actually

00:20:01,840 --> 00:20:06,789
look at Ruby and especially at Rails

00:20:04,480 --> 00:20:09,250
when we work with notes because they've

00:20:06,789 --> 00:20:11,770
done a lot of mistakes that we do right

00:20:09,250 --> 00:20:13,570
now already so we can actually prevent

00:20:11,770 --> 00:20:15,820
making these mistakes we can look at

00:20:13,570 --> 00:20:17,409
what they do we can look at their access

00:20:15,820 --> 00:20:20,080
level control and so on and actually

00:20:17,409 --> 00:20:21,640
learn from that but instead sometimes we

00:20:20,080 --> 00:20:23,620
tend to reinvent the wheel instead of

00:20:21,640 --> 00:20:27,640
just looking at existing technology and

00:20:23,620 --> 00:20:30,880
using that as a role model started

00:20:27,640 --> 00:20:33,220
hashing so now we obviously have a

00:20:30,880 --> 00:20:35,830
cipher text a bit of data the password

00:20:33,220 --> 00:20:37,270
and we want to hash that and that is

00:20:35,830 --> 00:20:39,460
great but there is this thing called

00:20:37,270 --> 00:20:42,909
rainbow tables where we use precomputed

00:20:39,460 --> 00:20:44,860
hashes which means if I have that table

00:20:42,909 --> 00:20:48,429
I can reverse-engineer passwords right

00:20:44,860 --> 00:20:50,500
so what we do is we add a random bit to

00:20:48,429 --> 00:20:52,900
it we add something completely random to

00:20:50,500 --> 00:20:55,900
it we store that somewhere as well and

00:20:52,900 --> 00:20:58,150
we make it harder to guess the original

00:20:55,900 --> 00:21:00,520
password which leads to the interesting

00:20:58,150 --> 00:21:02,350
side effect that even if 10 users in my

00:21:00,520 --> 00:21:04,299
service have exactly the same passwords

00:21:02,350 --> 00:21:09,940
we hash is not going to be the same

00:21:04,299 --> 00:21:11,890
which is very very variable now there's

00:21:09,940 --> 00:21:14,200
obviously these things that we can do we

00:21:11,890 --> 00:21:16,539
can use hashing and that stuff but again

00:21:14,200 --> 00:21:17,950
there must be other ways to harden our

00:21:16,539 --> 00:21:19,960
apps because we don't just give a

00:21:17,950 --> 00:21:21,549
passwords right and it turns out

00:21:19,960 --> 00:21:23,520
javascript has actually really good

00:21:21,549 --> 00:21:26,830
feature codes strict notes

00:21:23,520 --> 00:21:28,900
so since ACMA script 5 we can actually

00:21:26,830 --> 00:21:31,809
rely on function level or global level

00:21:28,900 --> 00:21:33,820
scope strict modes which leads to

00:21:31,809 --> 00:21:36,520
actually breaking the function

00:21:33,820 --> 00:21:38,500
abstraction we can make sure that

00:21:36,520 --> 00:21:39,820
certain errors are being thrown instead

00:21:38,500 --> 00:21:41,559
of the abstract grace-filled

00:21:39,820 --> 00:21:44,350
of really executing stuff it shouldn't

00:21:41,559 --> 00:21:46,120
execute so we should always obviously a

00:21:44,350 --> 00:21:47,890
neighbor strict note and that sounds

00:21:46,120 --> 00:21:49,179
like a very simple bit of advice but you

00:21:47,890 --> 00:21:54,730
would wonder how many people stay on

00:21:49,179 --> 00:21:58,720
users reg X is a big enemy of execution

00:21:54,730 --> 00:22:01,809
time if we handle the rack X and if we

00:21:58,720 --> 00:22:04,299
validate input forms on our server side

00:22:01,809 --> 00:22:07,250
we are stuck with the event loop and

00:22:04,299 --> 00:22:09,560
that can lead to a fun few feature

00:22:07,250 --> 00:22:14,000
like actually people ddossing our

00:22:09,560 --> 00:22:17,180
services if I want to give you a very

00:22:14,000 --> 00:22:20,450
long reg X that it's just very simply

00:22:17,180 --> 00:22:22,600
hard to kind of compile and parse this

00:22:20,450 --> 00:22:25,580
can actually lead to your app crashing

00:22:22,600 --> 00:22:27,680
so there is a bunch of different things

00:22:25,580 --> 00:22:30,200
that I can do and there are modules for

00:22:27,680 --> 00:22:31,730
this and help you evaluate and reg X

00:22:30,200 --> 00:22:33,890
before you actually run it on your van

00:22:31,730 --> 00:22:36,910
loop so you are safe and you know

00:22:33,890 --> 00:22:39,650
exactly what's going on

00:22:36,910 --> 00:22:41,240
correct encoding that sounds like a very

00:22:39,650 --> 00:22:42,620
simple thing but again we want to make

00:22:41,240 --> 00:22:45,530
sure that nobody throws a couple of

00:22:42,620 --> 00:22:47,480
scripts in there right so use that

00:22:45,530 --> 00:22:49,850
ampersand use those hover kind of

00:22:47,480 --> 00:22:51,320
characters and just do it and again

00:22:49,850 --> 00:22:54,350
there are libraries which help you doing

00:22:51,320 --> 00:22:56,530
that automatically did you ever look at

00:22:54,350 --> 00:22:59,930
Express how a request body looks like

00:22:56,530 --> 00:23:02,870
they populate the body by the thing they

00:22:59,930 --> 00:23:04,790
call powered by and that's a bit of that

00:23:02,870 --> 00:23:07,040
developer pride that we have developers

00:23:04,790 --> 00:23:09,800
like to show of what we use right so

00:23:07,040 --> 00:23:13,250
your app is telling every browser every

00:23:09,800 --> 00:23:14,390
request exactly hey I run on Express and

00:23:13,250 --> 00:23:15,740
that might sound cool if you're a

00:23:14,390 --> 00:23:17,360
developer right because you want to be

00:23:15,740 --> 00:23:19,880
to show off what you use and you use

00:23:17,360 --> 00:23:21,440
your latest cool bit of technology but

00:23:19,880 --> 00:23:23,630
it is actually not useful because we

00:23:21,440 --> 00:23:25,940
want to not necessarily expose what our

00:23:23,630 --> 00:23:28,280
stack runs on all right so this is a

00:23:25,940 --> 00:23:31,670
very simple thing and I actually talked

00:23:28,280 --> 00:23:37,150
recently to in a pen tester who said you

00:23:31,670 --> 00:23:39,770
should just always change it to PHP so

00:23:37,150 --> 00:23:41,360
this one can be hidden it is very simple

00:23:39,770 --> 00:23:42,740
to just remove that or change it to

00:23:41,360 --> 00:23:46,930
something your app actually doesn't run

00:23:42,740 --> 00:23:50,390
on make it harder to get access to stuff

00:23:46,930 --> 00:23:52,310
generating new IDs access tokens and all

00:23:50,390 --> 00:23:54,050
that fun is really really important

00:23:52,310 --> 00:23:57,110
still a lot of people don't actually

00:23:54,050 --> 00:23:59,690
necessarily do it lots of people use

00:23:57,110 --> 00:24:02,390
object IDs lot of let's say idea

00:23:59,690 --> 00:24:04,640
MongoDB and they throw them away as

00:24:02,390 --> 00:24:07,790
session cookie IDs and stuff like that

00:24:04,640 --> 00:24:10,610
which might sound sensible it turns out

00:24:07,790 --> 00:24:12,770
MongoDB is IDs are actually sequential

00:24:10,610 --> 00:24:14,930
and they are guessable but we don't

00:24:12,770 --> 00:24:17,870
necessarily want that right because if I

00:24:14,930 --> 00:24:20,900
can guess your next session that is an

00:24:17,870 --> 00:24:22,760
issue so we want to deal with stuff like

00:24:20,900 --> 00:24:24,350
unique identifiers should be

00:24:22,760 --> 00:24:26,420
non-sequential and it should be non

00:24:24,350 --> 00:24:29,120
guessable note you your ID is a

00:24:26,420 --> 00:24:30,380
fantastic really good module I highly

00:24:29,120 --> 00:24:35,090
promise you it is one of the nicest

00:24:30,380 --> 00:24:38,120
bcrypt modules I've seen parameter

00:24:35,090 --> 00:24:40,400
pollution any kind of idea what's

00:24:38,120 --> 00:24:46,100
happening if I submit the same parameter

00:24:40,400 --> 00:24:49,400
twice this guy not see we know all right

00:24:46,100 --> 00:24:52,610
so there we go instead of just having

00:24:49,400 --> 00:24:55,460
the parameter renamed or just like fit

00:24:52,610 --> 00:24:57,740
twice or something it's an array now if

00:24:55,460 --> 00:24:59,660
I evaluate that and I rely on this not

00:24:57,740 --> 00:25:02,120
being an array this can cause issues

00:24:59,660 --> 00:25:04,100
again right so those are very simple

00:25:02,120 --> 00:25:06,650
things same thing happens by the way for

00:25:04,100 --> 00:25:08,600
post requests so expressed by default

00:25:06,650 --> 00:25:10,940
populates arrays if there is more than

00:25:08,600 --> 00:25:12,320
one parameter with the same name and you

00:25:10,940 --> 00:25:16,760
should obviously avoid that as much as

00:25:12,320 --> 00:25:20,059
you can be Crips I've been talking about

00:25:16,760 --> 00:25:21,920
bcrypt I said I don't like md5 I also do

00:25:20,059 --> 00:25:26,120
like s but I feel like decrypt is

00:25:21,920 --> 00:25:30,020
easier to use big crypt turns a hash

00:25:26,120 --> 00:25:32,510
into a salted hash and normally he would

00:25:30,020 --> 00:25:34,490
store that sold separately now big

00:25:32,510 --> 00:25:36,410
does a very interesting thing where it

00:25:34,490 --> 00:25:40,190
uses dollar science as the limiter and

00:25:36,410 --> 00:25:44,150
it actually stores we salt in the salted

00:25:40,190 --> 00:25:46,520
hash so the first bit of this is the big

00:25:44,150 --> 00:25:49,340
version then we have the number of

00:25:46,520 --> 00:25:51,380
iterations that we execute on and then

00:25:49,340 --> 00:25:53,780
we pass we hash and be salt

00:25:51,380 --> 00:25:55,130
this is incredibly awesome the class we

00:25:53,780 --> 00:25:57,620
don't actually have to care about

00:25:55,130 --> 00:25:59,750
storing salt separately from the hatch

00:25:57,620 --> 00:26:05,000
it's very awesome in terms of usability

00:25:59,750 --> 00:26:09,620
and it's still secure generating a hash

00:26:05,000 --> 00:26:12,230
can be done synchronously or a single

00:26:09,620 --> 00:26:14,000
protein it is as simple as just using

00:26:12,230 --> 00:26:16,790
this function and afterwards you just

00:26:14,000 --> 00:26:19,300
compare the clear text ciphertext with

00:26:16,790 --> 00:26:22,340
what you deem be valuable hash

00:26:19,300 --> 00:26:27,350
incredibly easy to use it's there is no

00:26:22,340 --> 00:26:30,980
learning curve at all CC surf like it

00:26:27,350 --> 00:26:32,570
was preventing a sea surface X that used

00:26:30,980 --> 00:26:34,200
to be embedded in Express they moved it

00:26:32,570 --> 00:26:35,790
into a separate module to make it

00:26:34,200 --> 00:26:39,410
easier to update that and not be bound

00:26:35,790 --> 00:26:43,350
to my mayor version iterations see surf

00:26:39,410 --> 00:26:44,850
generates a token we can define if this

00:26:43,350 --> 00:26:48,060
token should be stored in this session

00:26:44,850 --> 00:26:51,600
or in a cookie and then we populate we

00:26:48,060 --> 00:26:53,670
recurse body by using a middleware so we

00:26:51,600 --> 00:26:54,900
render a form like an input form or

00:26:53,670 --> 00:26:58,170
something like that we pass on that

00:26:54,900 --> 00:27:01,800
token and afterwards we actually check

00:26:58,170 --> 00:27:03,510
if that form submits we talk again so

00:27:01,800 --> 00:27:05,340
let's look at J template we actually see

00:27:03,510 --> 00:27:08,490
I just provide this one parameter over

00:27:05,340 --> 00:27:10,440
here and that's all I need to do so

00:27:08,490 --> 00:27:12,930
instead of having users that are able to

00:27:10,440 --> 00:27:15,360
resubmit the same form over and over

00:27:12,930 --> 00:27:17,370
again it'll just work once after that

00:27:15,360 --> 00:27:20,340
the token is invalidated and it's not

00:27:17,370 --> 00:27:23,660
usable anymore I've done a major step in

00:27:20,340 --> 00:27:26,310
securing my app and helping my users

00:27:23,660 --> 00:27:29,490
there is this thing called helmet which

00:27:26,310 --> 00:27:31,380
is a host food of security stuff you can

00:27:29,490 --> 00:27:33,360
use most of those modules also a

00:27:31,380 --> 00:27:35,730
standalone but it also comes as a

00:27:33,360 --> 00:27:38,400
prepackaged thing so if you go to

00:27:35,730 --> 00:27:41,010
helmets yes you will find out that it

00:27:38,400 --> 00:27:44,130
allows you to kind of either trigger

00:27:41,010 --> 00:27:46,320
some sensible default which is V button

00:27:44,130 --> 00:27:50,010
initialization or you can use certain

00:27:46,320 --> 00:27:52,020
features like turning off caching using

00:27:50,010 --> 00:27:55,110
a cross-site scripting filter frame

00:27:52,020 --> 00:27:57,330
guards which helps protecting iframes it

00:27:55,110 --> 00:27:58,650
comes with content security policy it

00:27:57,330 --> 00:28:00,900
comes with a lot of those kind of things

00:27:58,650 --> 00:28:03,260
which might be a bit difficult to handle

00:28:00,900 --> 00:28:05,880
on your site and it just does it for you

00:28:03,260 --> 00:28:08,640
cool thing about helmet is it also works

00:28:05,880 --> 00:28:12,540
a co-op and so if you're into that there

00:28:08,640 --> 00:28:14,430
you go then Lascar that's actually a

00:28:12,540 --> 00:28:17,730
module that paper has released it's part

00:28:14,430 --> 00:28:19,740
of our croco suit and norske can be used

00:28:17,730 --> 00:28:22,980
as a standalone which is very similar to

00:28:19,740 --> 00:28:25,050
a helmet as well so you would mount it

00:28:22,980 --> 00:28:28,560
as a middleware on the application level

00:28:25,050 --> 00:28:30,270
of your app and it comes again with C

00:28:28,560 --> 00:28:35,910
surf protection with content security

00:28:30,270 --> 00:28:37,770
policy with frame guards PvP cross-site

00:28:35,910 --> 00:28:40,890
scripting all these kind of good things

00:28:37,770 --> 00:28:42,660
which we saw Leo as top 10 list right so

00:28:40,890 --> 00:28:45,000
we don't necessarily always have to deal

00:28:42,660 --> 00:28:46,950
with all the different issues it acts

00:28:45,000 --> 00:28:48,210
actually sometimes are sensible to use

00:28:46,950 --> 00:28:51,480
some of these kind of things

00:28:48,210 --> 00:28:52,350
I cannot tell you what's better if you

00:28:51,480 --> 00:28:54,539
should go for Hannah

00:28:52,350 --> 00:28:56,639
Eliska look at both they are both really

00:28:54,539 --> 00:28:59,039
popularity moments I think both are

00:28:56,639 --> 00:29:03,389
great and Luca is also available for

00:28:59,039 --> 00:29:05,429
Cora now both of them work is middleware

00:29:03,389 --> 00:29:07,289
so we should probably look at middleware

00:29:05,429 --> 00:29:09,330
there are three different types of

00:29:07,289 --> 00:29:11,549
Express middleware that we can tap into

00:29:09,330 --> 00:29:12,869
right application level and that is

00:29:11,549 --> 00:29:16,559
something that we've seen just with

00:29:12,869 --> 00:29:19,139
lower Lascar and with habit there is

00:29:16,559 --> 00:29:21,929
root level stuff so we could probably

00:29:19,139 --> 00:29:25,080
check if every user that goes to slash

00:29:21,929 --> 00:29:27,269
admin is actually an admin or not and

00:29:25,080 --> 00:29:29,999
then we can obviously do error handling

00:29:27,269 --> 00:29:32,399
middle where we can create fully check

00:29:29,999 --> 00:29:34,799
errors make sure those are our errors

00:29:32,399 --> 00:29:37,470
and not pretty much just consumed in

00:29:34,799 --> 00:29:39,389
somewhere and I'll really love our

00:29:37,470 --> 00:29:41,220
Express handle sets because we can just

00:29:39,389 --> 00:29:43,259
go from middleware to middleware to

00:29:41,220 --> 00:29:45,059
middleware and gracefully go through

00:29:43,259 --> 00:29:47,909
with chain of your friends kind of

00:29:45,059 --> 00:29:49,590
functions so if you want to write a

00:29:47,909 --> 00:29:51,629
custom middleware like an authentication

00:29:49,590 --> 00:29:55,200
middleware the tracks is the users of

00:29:51,629 --> 00:29:58,529
indicated it is as simple as writing a

00:29:55,200 --> 00:30:01,830
new function that has a request a

00:29:58,529 --> 00:30:03,629
response and an object called next which

00:30:01,830 --> 00:30:06,749
is going to be the next function that's

00:30:03,629 --> 00:30:09,570
going to be in a chain of commands you

00:30:06,749 --> 00:30:11,249
just throw that into the get request or

00:30:09,570 --> 00:30:13,950
to be post request and so on or you

00:30:11,249 --> 00:30:16,320
mount it as application level which is

00:30:13,950 --> 00:30:18,929
at the bottom this is really awesome I

00:30:16,320 --> 00:30:20,610
think it is super variable and something

00:30:18,929 --> 00:30:22,259
that can be used for a lot of different

00:30:20,610 --> 00:30:26,999
things obviously not just authentication

00:30:22,259 --> 00:30:30,389
and not just security an amazing example

00:30:26,999 --> 00:30:31,879
for using this stuff is Passport anyone

00:30:30,389 --> 00:30:34,409
use passport before

00:30:31,879 --> 00:30:36,240
awesome so you have probably the guys

00:30:34,409 --> 00:30:37,679
that's have been working with off and

00:30:36,240 --> 00:30:41,759
off too before and we're like I can't

00:30:37,679 --> 00:30:44,360
deal with this so passports comes what

00:30:41,759 --> 00:30:46,200
is what they call strategies and

00:30:44,360 --> 00:30:48,899
strategies can be a lot of different

00:30:46,200 --> 00:30:51,090
things between I have a strategy for

00:30:48,899 --> 00:30:53,730
connecting to a specific service like

00:30:51,090 --> 00:30:56,609
Twitter or something more open like

00:30:53,730 --> 00:30:59,429
let's say to a standard like or two so I

00:30:56,609 --> 00:31:02,100
can say hey passport please use this off

00:30:59,429 --> 00:31:03,840
to strategy talk to that server

00:31:02,100 --> 00:31:08,250
and handle user login and authentication

00:31:03,840 --> 00:31:10,350
authorization for me or I can define

00:31:08,250 --> 00:31:11,850
what they call a local strategy which

00:31:10,350 --> 00:31:13,410
comes down to more of the basic

00:31:11,850 --> 00:31:16,380
authentication that we've done four

00:31:13,410 --> 00:31:18,840
years already so if I want to do that I

00:31:16,380 --> 00:31:20,880
want to draw your attention to two two

00:31:18,840 --> 00:31:24,150
lines over here so this would be an

00:31:20,880 --> 00:31:26,850
example using passwords with a local

00:31:24,150 --> 00:31:29,640
strategy and MongoDB in order to handle

00:31:26,850 --> 00:31:31,650
user authentication we see in the first

00:31:29,640 --> 00:31:34,440
line that again we just use middleware

00:31:31,650 --> 00:31:36,330
we initialize that middleware and we use

00:31:34,440 --> 00:31:39,120
the local strategy which expects and

00:31:36,330 --> 00:31:42,380
username and the password and all that

00:31:39,120 --> 00:31:45,570
we really really care about is then

00:31:42,380 --> 00:31:47,730
using that a different kind of methods

00:31:45,570 --> 00:31:49,740
so if we look at the route like slash

00:31:47,730 --> 00:31:52,920
login it obviously makes sense that we

00:31:49,740 --> 00:31:56,580
go for passports authenticate which is

00:31:52,920 --> 00:31:59,190
going to use the local strategy and then

00:31:56,580 --> 00:32:02,160
in this local strategy if we perform

00:31:59,190 --> 00:32:05,040
that if we find the user or if the user

00:32:02,160 --> 00:32:07,050
name and the password match the request

00:32:05,040 --> 00:32:09,360
body is going to be populated with a

00:32:07,050 --> 00:32:11,700
couple of different details so it's

00:32:09,360 --> 00:32:13,950
always in request dot user and that is

00:32:11,700 --> 00:32:15,810
something that is very helpful at the

00:32:13,950 --> 00:32:17,640
bottom you see that passport actually

00:32:15,810 --> 00:32:20,340
comes with a bunch of different redirect

00:32:17,640 --> 00:32:24,150
flows so passport even handles stuff for

00:32:20,340 --> 00:32:25,920
you like invalid passport expired logins

00:32:24,150 --> 00:32:27,660
and all that stuff which is really

00:32:25,920 --> 00:32:32,130
really variable because you don't have

00:32:27,660 --> 00:32:34,680
to do it on your site there is this

00:32:32,130 --> 00:32:36,360
project that they call node secure node

00:32:34,680 --> 00:32:40,170
security policy and node security

00:32:36,360 --> 00:32:42,300
project and it is not just an amazing

00:32:40,170 --> 00:32:43,950
block and a newsletter that tells you

00:32:42,300 --> 00:32:45,450
about about different weaknesses and

00:32:43,950 --> 00:32:48,140
issues that are floating around at the

00:32:45,450 --> 00:32:51,060
moment but it is also a command-line

00:32:48,140 --> 00:32:53,010
executable that you can install and that

00:32:51,060 --> 00:32:55,860
is going to look at your package raisin

00:32:53,010 --> 00:32:59,010
or at your shrink-wrap and tells you

00:32:55,860 --> 00:33:01,680
about packages that you use that are

00:32:59,010 --> 00:33:04,620
vulnerable at the moment or used to be

00:33:01,680 --> 00:33:06,210
warned about so you can check if we code

00:33:04,620 --> 00:33:09,000
that you use at the moment and all the

00:33:06,210 --> 00:33:12,150
modules that you rely on our secure or

00:33:09,000 --> 00:33:14,520
not and that is a very kind of useful

00:33:12,150 --> 00:33:15,179
thing right and is super cheap to do it

00:33:14,520 --> 00:33:17,339
is so easy

00:33:15,179 --> 00:33:19,409
and a lot of people sadly don't know

00:33:17,339 --> 00:33:23,869
about it yet so definitely have a look

00:33:19,409 --> 00:33:26,749
at that I really enjoy using this then

00:33:23,869 --> 00:33:29,369
we obviously talk about stuff like

00:33:26,749 --> 00:33:30,809
passwords and we all kind of agree that

00:33:29,369 --> 00:33:33,809
passports are not really usable

00:33:30,809 --> 00:33:35,639
anymore passwords are no fun they have

00:33:33,809 --> 00:33:39,059
all those kind of key issues that lead

00:33:35,639 --> 00:33:41,759
to user data leaking so we look at our

00:33:39,059 --> 00:33:44,369
authentication methods like let's say o

00:33:41,759 --> 00:33:46,049
and we kind of agree that is good but

00:33:44,369 --> 00:33:47,429
sometimes a bit clunky to implement and

00:33:46,049 --> 00:33:49,589
sometimes it's just a bit too much

00:33:47,429 --> 00:33:52,649
because sometimes I simply want to login

00:33:49,589 --> 00:33:54,599
users so why don't we get rid of

00:33:52,649 --> 00:33:57,419
passwords and go for password less of

00:33:54,599 --> 00:33:58,969
Education there's actually two to three

00:33:57,419 --> 00:34:03,570
companies that push this right now

00:33:58,969 --> 00:34:05,190
amongst them is Twitter Yahoo and slowly

00:34:03,570 --> 00:34:07,469
Facebook tends to go into the same

00:34:05,190 --> 00:34:10,349
direction so they say why don't you just

00:34:07,469 --> 00:34:12,869
use one-time tokens that are valid for a

00:34:10,349 --> 00:34:17,010
couple of minutes that you receive yeah

00:34:12,869 --> 00:34:19,470
via text message or a via email I use

00:34:17,010 --> 00:34:24,299
those tokens I enter them I am logged in

00:34:19,470 --> 00:34:26,520
and by doing that I skip all the issues

00:34:24,299 --> 00:34:29,220
because replay attacks don't work

00:34:26,520 --> 00:34:30,629
anymore the password that you sent me is

00:34:29,220 --> 00:34:32,369
probably more secure than something that

00:34:30,629 --> 00:34:35,069
I might come up with if I don't use a

00:34:32,369 --> 00:34:37,649
password manager and the user experience

00:34:35,069 --> 00:34:39,659
is actually pretty good so I feel like

00:34:37,649 --> 00:34:41,639
password open as a hospitalist

00:34:39,659 --> 00:34:43,740
authentication needs to get a bit more

00:34:41,639 --> 00:34:47,669
attention because it is really a fun

00:34:43,740 --> 00:34:50,250
user experience then there is this

00:34:47,669 --> 00:34:53,579
project that is called the OAuth node

00:34:50,250 --> 00:34:55,710
goat which is a big big project that

00:34:53,579 --> 00:34:59,279
concentrates on highlighting different

00:34:55,710 --> 00:35:01,200
issues so the top ten list that I've

00:34:59,279 --> 00:35:03,690
been showing before with cross-site

00:35:01,200 --> 00:35:06,960
scripting see surfer Tex injection and

00:35:03,690 --> 00:35:10,349
so on they actually allow you to use a

00:35:06,960 --> 00:35:12,089
real life application and to mess with

00:35:10,349 --> 00:35:14,760
that application so you can try out

00:35:12,089 --> 00:35:17,819
those vulnerabilities and it tells you

00:35:14,760 --> 00:35:19,920
exactly how to fix them I highly

00:35:17,819 --> 00:35:21,660
recommend going there checking it out it

00:35:19,920 --> 00:35:23,579
is really valuable and it really helps

00:35:21,660 --> 00:35:26,240
understanding these concepts much much

00:35:23,579 --> 00:35:26,240
much better

00:35:26,340 --> 00:35:31,440
then again note security I've been

00:35:28,440 --> 00:35:33,480
talking on NSP which is the executable

00:35:31,440 --> 00:35:37,140
that they have they have a newsletter

00:35:33,480 --> 00:35:39,030
and they have a block so and they also

00:35:37,140 --> 00:35:42,270
have a good Twitter account so you might

00:35:39,030 --> 00:35:44,100
want to look at those two and subscribe

00:35:42,270 --> 00:35:45,780
to it because it's a very easy way to

00:35:44,100 --> 00:35:48,300
stay up to date I've been talking about

00:35:45,780 --> 00:35:50,040
V Hydra initially and I said we are in

00:35:48,300 --> 00:35:52,980
this treadmill with we are a bit like

00:35:50,040 --> 00:35:55,230
donkey shot fighting a windmill it is an

00:35:52,980 --> 00:35:57,180
endless struggle because we always have

00:35:55,230 --> 00:35:59,190
a new thing coming up there's always a

00:35:57,180 --> 00:36:00,690
new vulnerability a new version that

00:35:59,190 --> 00:36:04,410
simply has a bug or something like that

00:36:00,690 --> 00:36:07,260
and we have to keep up with that so we

00:36:04,410 --> 00:36:09,930
can up our game very simply by using

00:36:07,260 --> 00:36:12,570
this kind of advice learning from these

00:36:09,930 --> 00:36:17,550
guys and simply applying what they tell

00:36:12,570 --> 00:36:20,250
us we've been looking at a bunch of

00:36:17,550 --> 00:36:22,500
different standards like all of open ID

00:36:20,250 --> 00:36:24,390
oak mighty Kinect and they all try to

00:36:22,500 --> 00:36:27,480
kind of cater to different form factors

00:36:24,390 --> 00:36:30,000
if you look at all of one all of one

00:36:27,480 --> 00:36:31,860
that then didn't even think about mobile

00:36:30,000 --> 00:36:34,320
devices it didn't think about embedded

00:36:31,860 --> 00:36:35,910
and fingerprint detection and all that

00:36:34,320 --> 00:36:40,170
stuff that was simply not a thing back

00:36:35,910 --> 00:36:42,600
then because that was 2007 oh of to the

00:36:40,170 --> 00:36:46,140
mainframe work got released in 2012 and

00:36:42,600 --> 00:36:47,940
a lot of strange since then as well open

00:36:46,140 --> 00:36:51,060
ID is dead

00:36:47,940 --> 00:36:53,850
open ID had more than a billion users at

00:36:51,060 --> 00:36:56,040
its prime now if you go to my oak my

00:36:53,850 --> 00:36:59,550
deed calm you will see that beside is

00:36:56,040 --> 00:37:01,770
not even existent anymore but still

00:36:59,550 --> 00:37:04,680
sometimes we need this accessible

00:37:01,770 --> 00:37:07,320
service or a standard that works across

00:37:04,680 --> 00:37:09,990
all different form factors from mobile

00:37:07,320 --> 00:37:12,030
phone to desktop to the Internet

00:37:09,990 --> 00:37:13,830
connected fridge and that's where Fido

00:37:12,030 --> 00:37:16,440
seems to come in which is an alliance

00:37:13,830 --> 00:37:19,770
between blackberry Google Microsoft

00:37:16,440 --> 00:37:21,320
PayPal eBay a lot of different big big

00:37:19,770 --> 00:37:23,730
companies that try to solve

00:37:21,320 --> 00:37:26,910
authentication by either offering

00:37:23,730 --> 00:37:29,750
password authentication or two-factor of

00:37:26,910 --> 00:37:33,780
an occasion that is nicely standardized

00:37:29,750 --> 00:37:35,310
and if we look at security we can

00:37:33,780 --> 00:37:39,060
actually boil it down to a couple of

00:37:35,310 --> 00:37:39,930
very very simple concepts if we look at

00:37:39,060 --> 00:37:42,360
those mekin

00:37:39,930 --> 00:37:44,040
and if we want to ensure that the user

00:37:42,360 --> 00:37:46,530
stays safe and this is pretty much a

00:37:44,040 --> 00:37:49,290
summary for to factor of negation we end

00:37:46,530 --> 00:37:52,470
up with something the user has which can

00:37:49,290 --> 00:37:54,110
be a token which can be a fingerprint

00:37:52,470 --> 00:37:56,490
detector or something like that

00:37:54,110 --> 00:37:59,640
something you know which can be your

00:37:56,490 --> 00:38:01,650
password and something you are which

00:37:59,640 --> 00:38:04,530
comes down again to your identity and

00:38:01,650 --> 00:38:06,180
those three simple things they've been

00:38:04,530 --> 00:38:07,770
floating around in the internet for

00:38:06,180 --> 00:38:10,350
years already you will find articles

00:38:07,770 --> 00:38:13,020
from Stanford and so on from back in

00:38:10,350 --> 00:38:15,390
1995 we're very talk about these

00:38:13,020 --> 00:38:17,880
concepts and they are still not really

00:38:15,390 --> 00:38:21,540
popularly used with a bid I think that's

00:38:17,880 --> 00:38:23,490
a bit of an issue and obviously we can

00:38:21,540 --> 00:38:26,250
make it just harder to access our

00:38:23,490 --> 00:38:28,260
services and we can enforce very hard

00:38:26,250 --> 00:38:30,570
core passwords and we can make it really

00:38:28,260 --> 00:38:33,000
horrible to use our service but that's

00:38:30,570 --> 00:38:35,070
not what we want there's always a

00:38:33,000 --> 00:38:38,910
trade-off between security and user

00:38:35,070 --> 00:38:41,250
experience so we should try to not force

00:38:38,910 --> 00:38:43,350
our users to suffer because we want to

00:38:41,250 --> 00:38:46,230
protect the resources we can still

00:38:43,350 --> 00:38:48,750
create delightful user experiences while

00:38:46,230 --> 00:38:51,720
still protecting them and that's where

00:38:48,750 --> 00:38:53,910
proper hashing for encryption where all

00:38:51,720 --> 00:38:55,980
these things come in and I feel a lot of

00:38:53,910 --> 00:38:58,530
those changes that I presented today are

00:38:55,980 --> 00:39:00,810
really simple to implement they are

00:38:58,530 --> 00:39:04,200
really really easy to kind of use and

00:39:00,810 --> 00:39:07,620
they up our game they help us helping

00:39:04,200 --> 00:39:09,840
our users and with that I want to leave

00:39:07,620 --> 00:39:11,070
some time for questions thank you so

00:39:09,840 --> 00:39:15,930
much for your attention thanks for

00:39:11,070 --> 00:39:18,900
Thomas heavier for having me hi my name

00:39:15,930 --> 00:39:21,300
is and you short these top 10 security

00:39:18,900 --> 00:39:23,310
it starts right in my organization also

00:39:21,300 --> 00:39:26,100
security team is very finicky about all

00:39:23,310 --> 00:39:27,600
these so do we need to take care of all

00:39:26,100 --> 00:39:30,000
these or you want to prioritize like

00:39:27,600 --> 00:39:32,580
among all these ten they should be like

00:39:30,000 --> 00:39:35,190
top five we should be really you know

00:39:32,580 --> 00:39:36,870
fixing that so I feel like a lot of

00:39:35,190 --> 00:39:39,060
those top ten issues that we looked at

00:39:36,870 --> 00:39:41,100
before are actually very cheap wins for

00:39:39,060 --> 00:39:43,260
us because they are very very easy to

00:39:41,100 --> 00:39:45,060
deal with so if we look at our unknown

00:39:43,260 --> 00:39:47,130
applications and a lot of the features

00:39:45,060 --> 00:39:49,110
that express rings and where the

00:39:47,130 --> 00:39:52,170
middleware comes in like passport like

00:39:49,110 --> 00:39:53,710
helmet like Lowe's car and so on it is

00:39:52,170 --> 00:39:56,589
actually very easy to deal with

00:39:53,710 --> 00:39:58,960
right so I feel we should at least try

00:39:56,589 --> 00:40:00,849
to cover those top ten and then even

00:39:58,960 --> 00:40:03,430
look at the broader scope other issues

00:40:00,849 --> 00:40:05,589
and see if we can do something on top of

00:40:03,430 --> 00:40:08,050
what we do right now but the field those

00:40:05,589 --> 00:40:10,240
top 10 are very very easy to deal with

00:40:08,050 --> 00:40:12,460
right and a lot of them are actually

00:40:10,240 --> 00:40:15,339
best practices like using strictmode

00:40:12,460 --> 00:40:17,230
not just evaluating every regex that we

00:40:15,339 --> 00:40:19,810
get those are sometimes very simple

00:40:17,230 --> 00:40:21,280
things and very easy advice that just

00:40:19,810 --> 00:40:23,710
simply needs to actually be followed

00:40:21,280 --> 00:40:26,760
right so definitely have a look at those

00:40:23,710 --> 00:40:26,760

YouTube URL: https://www.youtube.com/watch?v=a8zYmRmtss0


