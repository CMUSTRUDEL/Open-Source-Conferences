Title: JSConf 2015   Charlie McConnell
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	
Captions: 
	00:00:13,929 --> 00:00:19,189
hi everybody I just like to say as we

00:00:17,510 --> 00:00:20,419
start you haven't really given a talk at

00:00:19,189 --> 00:00:23,020
a tech conference until you've had a

00:00:20,419 --> 00:00:25,640
kernel panic setting up your displays

00:00:23,020 --> 00:00:26,779
well yeah anyway we're from pebble we're

00:00:25,640 --> 00:00:30,140
here today to talk about the pebble

00:00:26,779 --> 00:00:32,390
timeline I'm Charlie McConnell and I'm

00:00:30,140 --> 00:00:34,730
lands Vic and we're a retired magician

00:00:32,390 --> 00:00:36,410
retired actor and we've been playing

00:00:34,730 --> 00:00:38,120
with linux stuff for a long time and now

00:00:36,410 --> 00:00:39,800
we do that professionally we are the

00:00:38,120 --> 00:00:44,600
resident linux weirdos on the pebble dev

00:00:39,800 --> 00:00:45,799
ops team yep so pebble first of all by a

00:00:44,600 --> 00:00:48,350
show of hands how many of you are

00:00:45,799 --> 00:00:51,199
already familiar with double suite how

00:00:48,350 --> 00:00:53,540
many of you actually have a pebble also

00:00:51,199 --> 00:00:55,820
sweet all right so for anyone not

00:00:53,540 --> 00:00:59,809
already familiar what is pebble we make

00:00:55,820 --> 00:01:01,940
watches the core mission of pebble is to

00:00:59,809 --> 00:01:04,489
just make a damn good watch I'm directly

00:01:01,940 --> 00:01:06,740
quoting the CEO when I say that so since

00:01:04,489 --> 00:01:09,320
it's 2015 these watches are pretty smart

00:01:06,740 --> 00:01:13,820
I'm told some people have gone as far as

00:01:09,320 --> 00:01:16,399
to call them smart watches all right so

00:01:13,820 --> 00:01:18,649
the original pebble in 2012 was a

00:01:16,399 --> 00:01:21,079
started out as a Kickstarter project it

00:01:18,649 --> 00:01:23,270
got a whole lot more interest than

00:01:21,079 --> 00:01:25,640
anyone actually expected and at the time

00:01:23,270 --> 00:01:29,060
it was a record-breaking more than 10

00:01:25,640 --> 00:01:30,619
million dollar Kickstarter this this is

00:01:29,060 --> 00:01:32,570
a picture of the Kickstarter from the

00:01:30,619 --> 00:01:34,820
first pebble as you can see it's it's a

00:01:32,570 --> 00:01:36,920
very simple watch it's black and white

00:01:34,820 --> 00:01:39,560
screen all plastic just a really simple

00:01:36,920 --> 00:01:41,090
device but a ton of interest at the 10.2

00:01:39,560 --> 00:01:42,950
million dollars in kickstarter backing

00:01:41,090 --> 00:01:46,210
for a long time we were the record

00:01:42,950 --> 00:01:48,229
holders then i think it was 2013

00:01:46,210 --> 00:01:50,929
somebody made a really cool looking

00:01:48,229 --> 00:01:53,149
cooler and this this beat the original

00:01:50,929 --> 00:01:54,679
pebble now i'm not really i don't really

00:01:53,149 --> 00:01:56,840
know much about this cooler but it looks

00:01:54,679 --> 00:01:57,889
kind of awesome oh that guy i hope lots

00:01:56,840 --> 00:02:01,130
of people are having fun with their

00:01:57,889 --> 00:02:02,630
margaritas and their coolers but uh you

00:02:01,130 --> 00:02:04,460
know fast forward a couple of years and

00:02:02,630 --> 00:02:06,799
then this year a few months ago we

00:02:04,460 --> 00:02:08,780
released pebble released their newer

00:02:06,799 --> 00:02:11,330
announced their new watch the pebble

00:02:08,780 --> 00:02:14,180
time on kickstarter this is a revamp

00:02:11,330 --> 00:02:15,770
design we've got a color display we've

00:02:14,180 --> 00:02:19,280
also got added a microphone for voice

00:02:15,770 --> 00:02:21,440
capabilities and this you know we did a

00:02:19,280 --> 00:02:22,910
little bit better this time I hear we

00:02:21,440 --> 00:02:25,050
gave Kickstarter a couple of bad days

00:02:22,910 --> 00:02:27,730
sorry about that

00:02:25,050 --> 00:02:29,410
but yeah so why would I want to pebble

00:02:27,730 --> 00:02:31,060
for starters the thing that I like about

00:02:29,410 --> 00:02:32,650
it best actually being kind of a

00:02:31,060 --> 00:02:35,020
curmudgeon about technology is that it

00:02:32,650 --> 00:02:36,700
is always accurate the time is synced

00:02:35,020 --> 00:02:38,650
via its connection to your mobile device

00:02:36,700 --> 00:02:40,930
so it's literally the most accurate

00:02:38,650 --> 00:02:42,640
watch I've ever owned it's also got an

00:02:40,930 --> 00:02:44,590
always-on screen which is what they

00:02:42,640 --> 00:02:46,060
would call an e-paper display the idea

00:02:44,590 --> 00:02:47,620
with this is that it reflects light

00:02:46,060 --> 00:02:49,420
instead of emitting light so it's big

00:02:47,620 --> 00:02:51,760
power savings and it's often times

00:02:49,420 --> 00:02:53,260
easier to see in sunlight because of

00:02:51,760 --> 00:02:54,790
this and other things you'll get up to a

00:02:53,260 --> 00:02:56,770
week of battery life now that this is

00:02:54,790 --> 00:02:57,940
dependent on how many active like button

00:02:56,770 --> 00:02:59,260
pressing games you're playing on your

00:02:57,940 --> 00:03:01,390
watch obviously but you'll get up to a

00:02:59,260 --> 00:03:02,920
week of battery life and there are tons

00:03:01,390 --> 00:03:04,660
of cool apps cool watch faces

00:03:02,920 --> 00:03:09,400
integrations with companies all sorts of

00:03:04,660 --> 00:03:11,110
stuff like this so what it isn't is you

00:03:09,400 --> 00:03:13,090
know the pebble is a relatively simple

00:03:11,110 --> 00:03:15,730
device it's not a heart or health

00:03:13,090 --> 00:03:18,490
monitor it is not a payment system it is

00:03:15,730 --> 00:03:21,730
not a smartphone on your wrist it is not

00:03:18,490 --> 00:03:24,430
a new pile of virtual distractions or in

00:03:21,730 --> 00:03:30,160
other words and overpriced trophy watch

00:03:24,430 --> 00:03:31,750
was not on our to-do list so yeah along

00:03:30,160 --> 00:03:34,600
with the pebble time we've come out with

00:03:31,750 --> 00:03:36,930
a new idea for an operating system for

00:03:34,600 --> 00:03:39,430
the watch this is the pebble timeline

00:03:36,930 --> 00:03:41,530
the whole idea when you think about an

00:03:39,430 --> 00:03:42,910
operating system what you want is to

00:03:41,530 --> 00:03:44,050
have something where the information

00:03:42,910 --> 00:03:45,700
that you really want the information

00:03:44,050 --> 00:03:48,310
that you're really after is very readily

00:03:45,700 --> 00:03:51,310
accessible for you and in the case of a

00:03:48,310 --> 00:03:53,350
watch what you care about is time so

00:03:51,310 --> 00:03:55,510
what this gives you is the the basic

00:03:53,350 --> 00:03:57,160
like the the most basic service

00:03:55,510 --> 00:03:59,320
interface for this operating system is

00:03:57,160 --> 00:04:00,850
just the timeline you can hit one button

00:03:59,320 --> 00:04:01,959
to get to your recent past and another

00:04:00,850 --> 00:04:06,040
button to get to your recent future

00:04:01,959 --> 00:04:07,750
upcoming events so yeah an interface for

00:04:06,040 --> 00:04:10,030
upcoming and past life events it's

00:04:07,750 --> 00:04:11,739
designed to be really simple and to save

00:04:10,030 --> 00:04:12,850
you time as opposed to being another

00:04:11,739 --> 00:04:14,230
thing that you're taking out of your

00:04:12,850 --> 00:04:17,520
pocket to press buttons with and stuff

00:04:14,230 --> 00:04:20,350
like that each event is called a pin it

00:04:17,520 --> 00:04:21,760
can be easily created by our API is all

00:04:20,350 --> 00:04:24,460
of these things are just JSON objects

00:04:21,760 --> 00:04:26,440
and for starters without you having to

00:04:24,460 --> 00:04:29,760
do anything your phone's calendar app is

00:04:26,440 --> 00:04:32,979
automatically synced with your timeline

00:04:29,760 --> 00:04:34,840
so what can I use it for we're sitting

00:04:32,979 --> 00:04:36,789
here at a conference there's talks going

00:04:34,840 --> 00:04:38,129
on all day left right and sideways let's

00:04:36,789 --> 00:04:42,190
put the talk schedule

00:04:38,129 --> 00:04:44,860
Lance yeah so let's let's try to do that

00:04:42,190 --> 00:04:48,039
um so to get started with the timeline

00:04:44,860 --> 00:04:51,129
API you have a couple things get a

00:04:48,039 --> 00:04:52,840
script which is actually using a pebble

00:04:51,129 --> 00:04:56,169
API to post pains this is just a nodejs

00:04:52,840 --> 00:04:57,849
module you can grab off NPM and a small

00:04:56,169 --> 00:05:00,159
watch app to handle the sinking of those

00:04:57,849 --> 00:05:04,690
pins that's that's really it so let's

00:05:00,159 --> 00:05:07,750
take a look at an example here is the no

00:05:04,690 --> 00:05:10,060
Jess library peple API node and you can

00:05:07,750 --> 00:05:12,250
create pins send a pin to a user pretty

00:05:10,060 --> 00:05:14,110
straightforward so let's go look at an

00:05:12,250 --> 00:05:16,090
example we get this J Escom 2015

00:05:14,110 --> 00:05:18,159
schedule there's no read me because I

00:05:16,090 --> 00:05:22,180
did this like 3am last night or

00:05:18,159 --> 00:05:23,710
something but we got a year so you've

00:05:22,180 --> 00:05:25,180
got to populate dodge yes this is the

00:05:23,710 --> 00:05:28,360
bit that actually matters and it is very

00:05:25,180 --> 00:05:30,550
quick to put together and hurry you've

00:05:28,360 --> 00:05:33,099
got all sorts of stuff here at the top

00:05:30,550 --> 00:05:34,930
which I'll show you this is to get the

00:05:33,099 --> 00:05:36,580
schedule it's just parses the GS comp

00:05:34,930 --> 00:05:39,909
schedule web page and pulls out all of

00:05:36,580 --> 00:05:42,669
the data and whatnot kind of rage roots

00:05:39,909 --> 00:05:44,919
and regex here but it does the job lance

00:05:42,669 --> 00:05:46,719
has that habit sometimes it's true but

00:05:44,919 --> 00:05:48,400
so if you need to make a quick j/s comp

00:05:46,719 --> 00:05:50,289
app you can come steal this function and

00:05:48,400 --> 00:05:51,520
it does the right thing at least as long

00:05:50,289 --> 00:05:53,259
as this change format doesn't change

00:05:51,520 --> 00:05:54,729
around but any of it so we skipped down

00:05:53,259 --> 00:05:57,430
to the part that it's actually really

00:05:54,729 --> 00:05:58,750
relevant here to get scheduled magic it

00:05:57,430 --> 00:06:01,810
all to worry about alright we've got a

00:05:58,750 --> 00:06:04,719
schedule we come down here for each and

00:06:01,810 --> 00:06:08,199
we just have pins you create a pin you

00:06:04,719 --> 00:06:10,389
have a topic you have a generic pan

00:06:08,199 --> 00:06:12,880
layout to notification it's got a title

00:06:10,389 --> 00:06:14,949
that's all you need then you send the

00:06:12,880 --> 00:06:18,729
shared pin to the j s compu doesn't 15

00:06:14,949 --> 00:06:21,130
schedule topic and you can log it if you

00:06:18,729 --> 00:06:22,210
want that's it that's all it takes to

00:06:21,130 --> 00:06:23,770
make a basic out the nice thing about

00:06:22,210 --> 00:06:26,469
this is that there's no server involved

00:06:23,770 --> 00:06:28,360
here you just run this once Oh or run it

00:06:26,469 --> 00:06:29,650
periodically if you want to update so

00:06:28,360 --> 00:06:31,659
that's your data source up doing the

00:06:29,650 --> 00:06:34,000
pins those pans are then posted to our

00:06:31,659 --> 00:06:36,009
server and the watches then pull those

00:06:34,000 --> 00:06:40,710
pins from our servers and keep in sync

00:06:36,009 --> 00:06:40,710
for you so let's jump back

00:06:43,619 --> 00:06:48,339
there's actually what that looks like

00:06:45,779 --> 00:06:51,009
got a couple things in the timeline

00:06:48,339 --> 00:06:53,019
there to show what the next things are

00:06:51,009 --> 00:06:54,159
to do so what I looked at to realize oh

00:06:53,019 --> 00:06:57,849
hey we have a talk that we're supposed

00:06:54,159 --> 00:07:01,869
to be at so we did make it here yeah

00:06:57,849 --> 00:07:04,179
thnkx Bibble yeah so very basic we

00:07:01,869 --> 00:07:06,339
provide an API we have the no Jess

00:07:04,179 --> 00:07:09,039
library you make content and then you

00:07:06,339 --> 00:07:10,269
make apps that you know make the watch

00:07:09,039 --> 00:07:13,449
gets notified when that content has

00:07:10,269 --> 00:07:15,399
changed so pretty straightforward here

00:07:13,449 --> 00:07:17,649
you can actually create update delete

00:07:15,399 --> 00:07:19,239
pins pins are attached to either topics

00:07:17,649 --> 00:07:21,039
or users so you can either attach a pen

00:07:19,239 --> 00:07:23,229
directly to a user and that goes to only

00:07:21,039 --> 00:07:25,360
their timeline or to a topic which goes

00:07:23,229 --> 00:07:28,599
to many users apps subscribe to the

00:07:25,360 --> 00:07:31,029
topics the watch passively updates that

00:07:28,599 --> 00:07:32,499
and you can notify the user if it's

00:07:31,029 --> 00:07:34,029
something that matters right now you

00:07:32,499 --> 00:07:36,809
give them a notification else with

00:07:34,029 --> 00:07:39,249
something they can just passively check

00:07:36,809 --> 00:07:41,229
all right so let's let's go over some of

00:07:39,249 --> 00:07:43,779
the tools we've used here it's all

00:07:41,229 --> 00:07:46,689
pretty standard stuff we use MongoDB is

00:07:43,779 --> 00:07:48,579
our primary data store it's all built-in

00:07:46,689 --> 00:07:51,369
nodejs & Co ajs as far as our

00:07:48,579 --> 00:07:54,069
application runtimes concerned we've got

00:07:51,369 --> 00:07:56,409
red is in place as a cache and to handle

00:07:54,069 --> 00:07:58,689
rate limiting for the timeline api's and

00:07:56,409 --> 00:08:00,249
the actual notifications are handled by

00:07:58,689 --> 00:08:02,919
a pool of workers which are pulling

00:08:00,249 --> 00:08:04,329
messages off of amazon SQS no real

00:08:02,919 --> 00:08:07,179
rocket science here just good solid

00:08:04,329 --> 00:08:08,379
stuff so let's talk about our web

00:08:07,179 --> 00:08:09,909
infrastructure let's talk about how

00:08:08,379 --> 00:08:13,089
we've actually built and deployed this

00:08:09,909 --> 00:08:15,579
whole thing so the the philosophy that

00:08:13,089 --> 00:08:18,399
we have is best summed up as version

00:08:15,579 --> 00:08:20,319
control the immutable deployments now

00:08:18,399 --> 00:08:21,729
what this means is the idea that if

00:08:20,319 --> 00:08:24,219
you're making a change to your

00:08:21,729 --> 00:08:25,419
infrastructure that is actually even

00:08:24,219 --> 00:08:27,009
more something that you should be

00:08:25,419 --> 00:08:29,559
tracking in version control compared to

00:08:27,009 --> 00:08:31,539
your coat the idea is that if you're

00:08:29,559 --> 00:08:32,919
making a change it's getting tracked an

00:08:31,539 --> 00:08:34,870
immutable deployment is the idea that

00:08:32,919 --> 00:08:36,579
you are deploying and artifacts that is

00:08:34,870 --> 00:08:39,339
the result of something is the output of

00:08:36,579 --> 00:08:41,110
a program and if you are then going in

00:08:39,339 --> 00:08:43,000
there and making manual changes to it

00:08:41,110 --> 00:08:44,559
afterwards you're doing it wrong and you

00:08:43,000 --> 00:08:46,209
should actually be fixing the program so

00:08:44,559 --> 00:08:47,620
that you always have correct state as

00:08:46,209 --> 00:08:50,259
the output of something this is the

00:08:47,620 --> 00:08:52,000
whole idea of this so version control

00:08:50,259 --> 00:08:53,380
deployment let's start there you're

00:08:52,000 --> 00:08:56,170
going to deploy you're going to make a

00:08:53,380 --> 00:08:56,950
good commit if you're going to alter the

00:08:56,170 --> 00:08:58,780
infrastructure

00:08:56,950 --> 00:09:00,280
alter the size of a cluster or the size

00:08:58,780 --> 00:09:01,840
of an auto scaling group you're going to

00:09:00,280 --> 00:09:04,140
make a git commit into the files the

00:09:01,840 --> 00:09:06,430
track that information if you have

00:09:04,140 --> 00:09:07,900
configuration data environment variables

00:09:06,430 --> 00:09:09,310
configuration files however you're

00:09:07,900 --> 00:09:10,930
tracking that and you're going to make a

00:09:09,310 --> 00:09:13,150
change to it it's really important to

00:09:10,930 --> 00:09:15,430
keep it in version control because that

00:09:13,150 --> 00:09:16,900
way when someone fat finger is a value

00:09:15,430 --> 00:09:18,940
and things are broken all of a sudden

00:09:16,900 --> 00:09:20,770
you can be like oh I see what happened

00:09:18,940 --> 00:09:24,850
now that thing was mistakenly edited

00:09:20,770 --> 00:09:27,670
okay and then it's it's extremely wise

00:09:24,850 --> 00:09:30,190
to back this up somewhere we've we

00:09:27,670 --> 00:09:32,530
personally use an encrypted s3 storage

00:09:30,190 --> 00:09:34,390
for this and the base of our deployment

00:09:32,530 --> 00:09:39,640
system is actually available at on

00:09:34,390 --> 00:09:41,680
github at pebble / get to play so to

00:09:39,640 --> 00:09:44,560
achieve the immutable deployment side of

00:09:41,680 --> 00:09:46,270
this we use containers the advantages of

00:09:44,560 --> 00:09:49,600
containers is that you get a clean

00:09:46,270 --> 00:09:51,580
system slate on every service run you

00:09:49,600 --> 00:09:53,320
you know it's it's a like a subdivision

00:09:51,580 --> 00:09:55,270
of an operating system so you don't have

00:09:53,320 --> 00:09:57,220
things cluttering each other's spaces

00:09:55,270 --> 00:10:00,430
they can't see anything else running on

00:09:57,220 --> 00:10:02,860
the system you use namespaces to make

00:10:00,430 --> 00:10:04,420
sure that everything like the first app

00:10:02,860 --> 00:10:06,100
running in a container usually thinks it

00:10:04,420 --> 00:10:07,240
speed one and it can't see anything else

00:10:06,100 --> 00:10:09,670
if you're doing it right it can't see

00:10:07,240 --> 00:10:11,860
anything else on the on the system you

00:10:09,670 --> 00:10:13,450
can also use also on Linux these are

00:10:11,860 --> 00:10:14,920
built out of namespaces and control

00:10:13,450 --> 00:10:16,240
groups which are kernel level features

00:10:14,920 --> 00:10:18,670
for keeping things separate from each

00:10:16,240 --> 00:10:20,650
other one of the big advantages to this

00:10:18,670 --> 00:10:22,240
is if you've ever worked with Python and

00:10:20,650 --> 00:10:28,060
used virtual land of you will never have

00:10:22,240 --> 00:10:30,610
to do that again so yeah specifically we

00:10:28,060 --> 00:10:32,440
are using docker for this as of today

00:10:30,610 --> 00:10:35,350
it's the most mature containerisation

00:10:32,440 --> 00:10:37,300
solution it allows you to very very

00:10:35,350 --> 00:10:40,510
easily create containers from a

00:10:37,300 --> 00:10:42,730
blueprint namely a docker file and the

00:10:40,510 --> 00:10:44,650
docker file is just think package.json

00:10:42,730 --> 00:10:46,240
for servers it's it's a very simple

00:10:44,650 --> 00:10:49,210
concept relatively straightforward

00:10:46,240 --> 00:10:51,160
configuration file now there's a lot of

00:10:49,210 --> 00:10:53,110
really good things about docker as a

00:10:51,160 --> 00:10:55,930
really really big really active

00:10:53,110 --> 00:10:57,220
ecosystem if you are you know if you

00:10:55,930 --> 00:10:59,290
want to experiment with something you

00:10:57,220 --> 00:11:00,970
haven't deployed before the odds that

00:10:59,290 --> 00:11:03,130
someone else has a ready-made docker

00:11:00,970 --> 00:11:04,360
container for it are really high now you

00:11:03,130 --> 00:11:05,890
may not want to deploy that straight to

00:11:04,360 --> 00:11:07,360
production but if you just need a quick

00:11:05,890 --> 00:11:09,370
setup for something it's really great

00:11:07,360 --> 00:11:10,250
for that it's also really easy to get

00:11:09,370 --> 00:11:12,590
started building your own

00:11:10,250 --> 00:11:14,990
containers docker is you know the

00:11:12,590 --> 00:11:16,910
dockerfile syntax mostly not rocket

00:11:14,990 --> 00:11:19,550
science not too many surprises it's an

00:11:16,910 --> 00:11:21,230
easy thing to work with and docker also

00:11:19,550 --> 00:11:24,230
gives you really easy interfaces to

00:11:21,230 --> 00:11:26,270
things like by default docker containers

00:11:24,230 --> 00:11:27,590
use this virtual networking bridge so

00:11:26,270 --> 00:11:29,210
that they all have their own virtual IP

00:11:27,590 --> 00:11:31,490
addresses and stuff like that setting

00:11:29,210 --> 00:11:33,080
that up manually not so much fun dealing

00:11:31,490 --> 00:11:34,700
with C group resource limits manually

00:11:33,080 --> 00:11:36,050
not really all that much fun with docker

00:11:34,700 --> 00:11:38,930
it's just command line options and

00:11:36,050 --> 00:11:40,790
everything's pretty easy now as you

00:11:38,930 --> 00:11:43,310
might imagine it's not without its it's

00:11:40,790 --> 00:11:45,620
not without its hardships and faults the

00:11:43,310 --> 00:11:47,930
dockerfile syntax can be kind of quirky

00:11:45,620 --> 00:11:50,060
and surprising if you're copying a

00:11:47,930 --> 00:11:52,910
directory you can't forget the trailing

00:11:50,060 --> 00:11:54,290
slash or you'll have an unreadable file

00:11:52,910 --> 00:11:57,830
containing all of the contents of your

00:11:54,290 --> 00:12:00,200
directory it's also really really easy

00:11:57,830 --> 00:12:02,150
to make really really big docker images

00:12:00,200 --> 00:12:04,040
if you're starting your files with from

00:12:02,150 --> 00:12:05,690
ubuntu if anyone who is part of your

00:12:04,040 --> 00:12:08,150
base image is starting with from ubuntu

00:12:05,690 --> 00:12:11,540
you're starting out with a quarter of a

00:12:08,150 --> 00:12:13,190
gig on disk and then it's real easy for

00:12:11,540 --> 00:12:14,810
apps to get way bigger than that we have

00:12:13,190 --> 00:12:17,260
a couple of things that are over a gig

00:12:14,810 --> 00:12:19,520
and it's really kind of surprising

00:12:17,260 --> 00:12:21,620
logging also unless you are handling

00:12:19,520 --> 00:12:24,350
things yourself out of the box docker

00:12:21,620 --> 00:12:25,910
only knows how to pull standard IO out

00:12:24,350 --> 00:12:27,830
of these processes and it tends to hang

00:12:25,910 --> 00:12:29,240
it around in memory all of a sudden if

00:12:27,830 --> 00:12:31,010
you've had a busy process you'll notice

00:12:29,240 --> 00:12:32,450
that the host is slow because the doctor

00:12:31,010 --> 00:12:33,800
daemon is using like forty percent of

00:12:32,450 --> 00:12:37,250
your RAM and not really behaving very

00:12:33,800 --> 00:12:38,720
well doctor also it doesn't tend to

00:12:37,250 --> 00:12:40,610
clean up after itself when you pull

00:12:38,720 --> 00:12:42,470
changes so if you don't pay attention to

00:12:40,610 --> 00:12:45,430
it you'll have your disks filling up for

00:12:42,470 --> 00:12:48,200
lots of dangling image layers in

00:12:45,430 --> 00:12:49,670
addition probably the most important

00:12:48,200 --> 00:12:51,140
thing to remember about docker is that

00:12:49,670 --> 00:12:53,570
if you are root inside of a container

00:12:51,140 --> 00:12:55,400
you are root on the host they do not

00:12:53,570 --> 00:12:58,280
have a separate UID space for these

00:12:55,400 --> 00:13:00,500
containers so it's super super important

00:12:58,280 --> 00:13:02,270
that you drop privileges always there's

00:13:00,500 --> 00:13:03,560
lots of advice in the community that you

00:13:02,270 --> 00:13:04,760
don't need to worry about this you're in

00:13:03,560 --> 00:13:06,950
a container it doesn't work like that

00:13:04,760 --> 00:13:09,260
it's not really true it's kind of

00:13:06,950 --> 00:13:11,900
dangerous in the sense you absolutely

00:13:09,260 --> 00:13:13,339
have to drop privileges and if you're in

00:13:11,900 --> 00:13:15,170
a position where the only thing you need

00:13:13,339 --> 00:13:16,730
you only need one specific thing that

00:13:15,170 --> 00:13:18,290
you might otherwise use sudo for like

00:13:16,730 --> 00:13:20,959
binding to port 80 they have these

00:13:18,290 --> 00:13:23,089
things called Linux capabilities the one

00:13:20,959 --> 00:13:23,450
in particular cap net bind will let you

00:13:23,089 --> 00:13:26,270
bind

00:13:23,450 --> 00:13:28,280
port 80 there are lots of these further

00:13:26,270 --> 00:13:32,930
further investigation here is left as an

00:13:28,280 --> 00:13:35,840
exercise to the viewer so yeah after a

00:13:32,930 --> 00:13:37,940
pair of slides full of full of hardship

00:13:35,840 --> 00:13:40,790
there are there alternatives to docker

00:13:37,940 --> 00:13:42,290
well there's a couple the first one the

00:13:40,790 --> 00:13:46,130
one that interests me the most is system

00:13:42,290 --> 00:13:47,300
DN spawn now systemd made this over the

00:13:46,130 --> 00:13:48,860
last over the course of the last few

00:13:47,300 --> 00:13:51,110
years they made it pretty quietly

00:13:48,860 --> 00:13:52,760
because it was not really intended to be

00:13:51,110 --> 00:13:54,160
a like a publicly advertised product

00:13:52,760 --> 00:13:56,330
they built it as their test harness

00:13:54,160 --> 00:13:57,830
because if you're if you're an init

00:13:56,330 --> 00:14:00,860
system you always need to be paid one

00:13:57,830 --> 00:14:02,030
make a container all of a sudden they

00:14:00,860 --> 00:14:04,220
started to realize this had actually

00:14:02,030 --> 00:14:06,200
become pretty solid and as of the last

00:14:04,220 --> 00:14:09,050
version they quietly edit the ability to

00:14:06,200 --> 00:14:11,300
pull and run docker containers so that's

00:14:09,050 --> 00:14:12,820
brand new and it only works on btrfs but

00:14:11,300 --> 00:14:15,230
I'm really interested in watching that

00:14:12,820 --> 00:14:17,990
there's also a product being made by

00:14:15,230 --> 00:14:19,640
core OS called rocket they are trying to

00:14:17,990 --> 00:14:21,740
gather lots of people together to create

00:14:19,640 --> 00:14:23,210
an application container spec and I'm

00:14:21,740 --> 00:14:25,460
very excited about the direction this is

00:14:23,210 --> 00:14:27,230
going but they're not as mature as

00:14:25,460 --> 00:14:29,150
docker these are in progress things

00:14:27,230 --> 00:14:31,280
rocket i think is version 2.5 or

00:14:29,150 --> 00:14:35,300
something like that you watch them in

00:14:31,280 --> 00:14:37,370
the long run as my personal opinion all

00:14:35,300 --> 00:14:39,830
right so you're going to deploy with

00:14:37,370 --> 00:14:41,120
docker it's it's it's easy and

00:14:39,830 --> 00:14:42,470
convenient because the only thing you

00:14:41,120 --> 00:14:44,540
really need on the server is the dr.

00:14:42,470 --> 00:14:46,490
Damon the containers themselves will

00:14:44,540 --> 00:14:47,840
contain all of the kinds of dependencies

00:14:46,490 --> 00:14:49,820
you might need so all you need is

00:14:47,840 --> 00:14:51,740
something to run your containers there's

00:14:49,820 --> 00:14:53,390
several modern distros that already ship

00:14:51,740 --> 00:14:55,760
with sucker Red Hat in particular will

00:14:53,390 --> 00:14:57,410
ship with docker however not all of them

00:14:55,760 --> 00:15:00,560
actually ship with a recent docker and

00:14:57,410 --> 00:15:02,300
so you'll need to pay attention to how

00:15:00,560 --> 00:15:04,970
old is if there's any outstanding

00:15:02,300 --> 00:15:06,170
security issues things like that I would

00:15:04,970 --> 00:15:07,850
say the bottom line though with all of

00:15:06,170 --> 00:15:09,020
this you should choose a distribution

00:15:07,850 --> 00:15:11,180
that you're already comfortable with

00:15:09,020 --> 00:15:13,010
because it's just not going to matter

00:15:11,180 --> 00:15:14,900
all that much in the long run if you

00:15:13,010 --> 00:15:16,610
spent your whole career using app to get

00:15:14,900 --> 00:15:17,840
on a bun to in debian you're going to

00:15:16,610 --> 00:15:18,890
have a bad time with red hat because

00:15:17,840 --> 00:15:20,780
it's really different in ways that

00:15:18,890 --> 00:15:23,750
aren't going to make sense to you so

00:15:20,780 --> 00:15:27,650
yeah for us the distro that we've chosen

00:15:23,750 --> 00:15:29,690
to use is core OS it is a minimalistic

00:15:27,650 --> 00:15:31,730
distro it is designed for containers it

00:15:29,690 --> 00:15:34,220
ships with Dochart with the dr. Damon it

00:15:31,730 --> 00:15:37,130
is designed as a clustered container

00:15:34,220 --> 00:15:39,380
deployment target car OS is also

00:15:37,130 --> 00:15:40,820
curated rolling release we get the

00:15:39,380 --> 00:15:43,250
latest versions of everything after

00:15:40,820 --> 00:15:46,580
they've hit some testing and for us that

00:15:43,250 --> 00:15:49,400
means we're on the 403 Colonel I think

00:15:46,580 --> 00:15:54,170
we're on dr. 1.62 it's very recent stuff

00:15:49,400 --> 00:15:56,660
and so core OS is based on Chrome OS

00:15:54,170 --> 00:15:57,920
which is itself based on gentoo so what

00:15:56,660 --> 00:16:00,380
we're basically dealing with here is a

00:15:57,920 --> 00:16:02,300
source distribution that was curated

00:16:00,380 --> 00:16:04,160
than locked gown by Google and then that

00:16:02,300 --> 00:16:05,420
was taken and curated and locked down by

00:16:04,160 --> 00:16:08,510
the core OS guys and now you have a

00:16:05,420 --> 00:16:09,590
server operating system there's a lot of

00:16:08,510 --> 00:16:11,990
things that are really good about this

00:16:09,590 --> 00:16:14,240
as I said it is ready-made for deploying

00:16:11,990 --> 00:16:16,940
with docker you're you're the distance

00:16:14,240 --> 00:16:19,190
from 0 to 60 doing this with core OS is

00:16:16,940 --> 00:16:21,620
it's just really easy you don't have to

00:16:19,190 --> 00:16:23,900
install anything it's also a system d

00:16:21,620 --> 00:16:26,990
distribution I have a big fan of system

00:16:23,900 --> 00:16:29,420
date systemd adds consistency where none

00:16:26,990 --> 00:16:30,740
existed before and the dependency

00:16:29,420 --> 00:16:32,870
management that you are able to have

00:16:30,740 --> 00:16:34,400
between services and mount points and

00:16:32,870 --> 00:16:36,650
parts of the operating system is not

00:16:34,400 --> 00:16:37,970
something that you get otherwise unless

00:16:36,650 --> 00:16:39,770
you feel like writing a couple thousand

00:16:37,970 --> 00:16:41,860
lines of bass yourself which a lot of

00:16:39,770 --> 00:16:46,250
people who don't like it appeared to do

00:16:41,860 --> 00:16:47,570
core OS also it ships with that CD at CD

00:16:46,250 --> 00:16:49,840
if any of you are familiar it is a

00:16:47,570 --> 00:16:53,180
strongly consistent key value store it

00:16:49,840 --> 00:16:55,700
is it's a lot like Redis except its

00:16:53,180 --> 00:16:58,520
emphasis is on consistency as opposed to

00:16:55,700 --> 00:17:00,680
high availability in performance it is

00:16:58,520 --> 00:17:04,100
it's designed for keeping things safe as

00:17:00,680 --> 00:17:05,870
opposed to being a fast cash core OS

00:17:04,100 --> 00:17:08,569
also comes with a neat tool called fleet

00:17:05,870 --> 00:17:11,480
it is designed as a distributed wrapper

00:17:08,569 --> 00:17:12,620
around the the systemd instances that

00:17:11,480 --> 00:17:14,420
are running on all the notes in your

00:17:12,620 --> 00:17:16,880
cluster there's a lot of really cool

00:17:14,420 --> 00:17:18,589
things about fleet as nodes come and go

00:17:16,880 --> 00:17:20,540
from the cluster fleet will just say oh

00:17:18,589 --> 00:17:21,949
ok I'm this type of note that means I

00:17:20,540 --> 00:17:24,079
need these services let me pull those

00:17:21,949 --> 00:17:25,640
services from etsy t let me start those

00:17:24,079 --> 00:17:27,560
things pull the docker containers from

00:17:25,640 --> 00:17:29,120
where they come from and then when

00:17:27,560 --> 00:17:30,410
you're you know when your cluster

00:17:29,120 --> 00:17:31,580
autoscale in the middle of the night

00:17:30,410 --> 00:17:32,900
everything started like it was supposed

00:17:31,580 --> 00:17:37,310
to because you've got to distribute it

00:17:32,900 --> 00:17:39,590
in its system now there's also core OS

00:17:37,310 --> 00:17:41,810
also has a really cool automated rolling

00:17:39,590 --> 00:17:43,670
updates feature they actually have this

00:17:41,810 --> 00:17:45,530
thing where you've got two separate root

00:17:43,670 --> 00:17:48,890
partitions and they'll update one while

00:17:45,530 --> 00:17:50,290
the other ones running it's yeah it's

00:17:48,890 --> 00:17:52,420
good stuff but

00:17:50,290 --> 00:17:54,490
thing about this is that if you leave it

00:17:52,420 --> 00:17:57,790
with the default configuration it will

00:17:54,490 --> 00:17:59,590
reboot to apply those updates which is

00:17:57,790 --> 00:18:01,210
cool and really fast because of that

00:17:59,590 --> 00:18:03,010
thing with the two root partitions but I

00:18:01,210 --> 00:18:04,690
promise you you don't want this

00:18:03,010 --> 00:18:06,220
happening in the middle of the night you

00:18:04,690 --> 00:18:07,150
might think you do you don't want this

00:18:06,220 --> 00:18:09,280
happening in the middle of the night

00:18:07,150 --> 00:18:10,750
luckily it's easy to turn off and the

00:18:09,280 --> 00:18:13,540
updates still download you can do it

00:18:10,750 --> 00:18:16,270
yourself with one command in addition to

00:18:13,540 --> 00:18:18,790
this the current default version of Etsy

00:18:16,270 --> 00:18:20,980
d at sea do point for is problematic

00:18:18,790 --> 00:18:23,560
they've got a new version it ships with

00:18:20,980 --> 00:18:25,030
core OS but it's the binary is named at

00:18:23,560 --> 00:18:27,520
CD too because they don't want to be

00:18:25,030 --> 00:18:29,650
pulling the rug out from under people at

00:18:27,520 --> 00:18:31,030
sea do for is problematic and is

00:18:29,650 --> 00:18:33,100
definitely something that you should be

00:18:31,030 --> 00:18:35,620
careful about using new deployments

00:18:33,100 --> 00:18:37,690
should not go anywhere near it another

00:18:35,620 --> 00:18:39,550
another issue is that fleet sounds like

00:18:37,690 --> 00:18:42,580
it's really awesome but it's super super

00:18:39,550 --> 00:18:44,950
simple and not really a not a complete

00:18:42,580 --> 00:18:46,870
deployment system and additionally a

00:18:44,950 --> 00:18:48,700
number of the quick easy fixes to these

00:18:46,870 --> 00:18:52,840
problems involve subscription services

00:18:48,700 --> 00:18:55,900
from core OS which is what it is anyway

00:18:52,840 --> 00:18:58,000
back to pebble our deployment pipeline

00:18:55,900 --> 00:19:00,040
starts out we have our own we have a

00:18:58,000 --> 00:19:02,230
private doctor registry we use that to

00:19:00,040 --> 00:19:03,730
build images based on get pushes and to

00:19:02,230 --> 00:19:06,520
host the images for us to pull to our

00:19:03,730 --> 00:19:08,020
infrastructure we've got a in our

00:19:06,520 --> 00:19:10,810
staging in development environments

00:19:08,020 --> 00:19:12,550
we've got a web book server docker

00:19:10,810 --> 00:19:14,140
registry will give us a web hook for

00:19:12,550 --> 00:19:16,360
this when the builds are complete and

00:19:14,140 --> 00:19:18,520
then in staging we automatically restart

00:19:16,360 --> 00:19:19,690
services in production we're a little

00:19:18,520 --> 00:19:21,280
more careful in that and we run

00:19:19,690 --> 00:19:22,690
everything off of a custom git repo as

00:19:21,280 --> 00:19:25,960
we were talking about before with this

00:19:22,690 --> 00:19:28,240
the pebble get deploy and we base

00:19:25,960 --> 00:19:33,580
everything on just post receive hooks

00:19:28,240 --> 00:19:35,050
and all that so yeah at pebble we are

00:19:33,580 --> 00:19:37,030
firm believers in using the right tool

00:19:35,050 --> 00:19:40,600
for the job because most of this stuff

00:19:37,030 --> 00:19:42,520
is get hooks we are about 90% bash where

00:19:40,600 --> 00:19:44,350
the deploy pipeline is concerned we've

00:19:42,520 --> 00:19:46,210
also used little bits of go here and

00:19:44,350 --> 00:19:48,430
there because with go you can make a

00:19:46,210 --> 00:19:49,600
really tiny binary fairly

00:19:48,430 --> 00:19:51,940
straightforward language you can make

00:19:49,600 --> 00:19:53,650
really really tiny binaries like a five

00:19:51,940 --> 00:19:57,460
megabyte docker container and stuff like

00:19:53,650 --> 00:19:59,140
that it's pretty cool for us these

00:19:57,460 --> 00:20:00,900
docker images are the immutable

00:19:59,140 --> 00:20:03,260
deployment artifacts that I talked about

00:20:00,900 --> 00:20:04,940
every server every state of it

00:20:03,260 --> 00:20:06,770
you stayin of every service should be

00:20:04,940 --> 00:20:09,340
the output of the program if it's miss

00:20:06,770 --> 00:20:11,390
if it's misconfigured to fix the program

00:20:09,340 --> 00:20:15,350
finally a quote from an old friend of

00:20:11,390 --> 00:20:17,090
mine redundancy resiliency scale this is

00:20:15,350 --> 00:20:19,040
how you this is how you survive

00:20:17,090 --> 00:20:20,390
unexpected things you've always make

00:20:19,040 --> 00:20:21,920
sure you have backups you make sure that

00:20:20,390 --> 00:20:24,230
things can be deployed automatically and

00:20:21,920 --> 00:20:25,880
you make sure that if servers suddenly

00:20:24,230 --> 00:20:27,290
start exploding there's something that

00:20:25,880 --> 00:20:31,670
you can do about it without a ton of

00:20:27,290 --> 00:20:33,800
fretting and head-scratching alright so

00:20:31,670 --> 00:20:36,530
yeah we're here to solve real world

00:20:33,800 --> 00:20:39,740
problems with watches and a lot of these

00:20:36,530 --> 00:20:41,300
real problems uh you know what's was

00:20:39,740 --> 00:20:42,440
their food around me I'm hungry you know

00:20:41,300 --> 00:20:45,800
and I want to be able to see that

00:20:42,440 --> 00:20:46,880
quickly at a glance where's my train you

00:20:45,800 --> 00:20:48,500
know rather than pulling my phone out

00:20:46,880 --> 00:20:50,420
and checking constantly is it here yet

00:20:48,500 --> 00:20:52,430
is it going to be here what's going on

00:20:50,420 --> 00:20:55,730
or where's my you know driver or

00:20:52,430 --> 00:20:57,590
whatever when's my next talk has imaged

00:20:55,730 --> 00:20:59,870
with a Jas comp demo you could totally

00:20:57,590 --> 00:21:02,570
add those events to your timeline and

00:20:59,870 --> 00:21:04,580
actually know in your next talk is it is

00:21:02,570 --> 00:21:07,660
the restroom free yet all right I need

00:21:04,580 --> 00:21:09,800
to on a show of hands here how many have

00:21:07,660 --> 00:21:11,960
really need to use the restroom at your

00:21:09,800 --> 00:21:15,050
office and you found out that

00:21:11,960 --> 00:21:18,110
everything's full anybody if you honest

00:21:15,050 --> 00:21:19,960
people okay all right yeah it's actually

00:21:18,110 --> 00:21:24,830
really inconvenient it's a time sink um

00:21:19,960 --> 00:21:27,890
in fact I would a that's uh yeah it's

00:21:24,830 --> 00:21:31,940
it's very convenient it's probably our

00:21:27,890 --> 00:21:33,920
biggest problem as a company so you

00:21:31,940 --> 00:21:36,470
think about right so fast growth 180

00:21:33,920 --> 00:21:39,710
employees catered lunches right for

00:21:36,470 --> 00:21:41,540
toilets um so you know haven't got the

00:21:39,710 --> 00:21:44,090
we have to rethink the office situation

00:21:41,540 --> 00:21:45,830
obviously but yeah so at the moment it's

00:21:44,090 --> 00:21:47,840
it's a problem so you know we have to

00:21:45,830 --> 00:21:51,920
solve this problem so a solution for

00:21:47,840 --> 00:21:54,110
that a lock state sensor arduino a

00:21:51,920 --> 00:21:59,000
nodejs server we emerged javascript

00:21:54,110 --> 00:22:01,600
conference right na pebbles so we can

00:21:59,000 --> 00:22:07,760
take a look at what that looks like here

00:22:01,600 --> 00:22:10,610
so I've got the toilet time repo here so

00:22:07,760 --> 00:22:13,520
and actually let's just go through and

00:22:10,610 --> 00:22:14,660
see actually read me shows you some of

00:22:13,520 --> 00:22:16,490
the things that are going on here you

00:22:14,660 --> 00:22:17,260
can play around with let's actually dive

00:22:16,490 --> 00:22:23,290
into the code so

00:22:17,260 --> 00:22:24,730
three parts to this we've got a locket

00:22:23,290 --> 00:22:26,980
clients this is actually some Arduino

00:22:24,730 --> 00:22:29,460
code this just shows you that there's a

00:22:26,980 --> 00:22:33,340
lock pin there's an LED pen there is

00:22:29,460 --> 00:22:36,490
ether nets in this case it's you know

00:22:33,340 --> 00:22:39,880
listening on a lock penn state whether

00:22:36,490 --> 00:22:44,950
it changes to on or off and it sends a

00:22:39,880 --> 00:22:46,630
manual post to a server and you should

00:22:44,950 --> 00:22:50,170
actually give you a look look at what

00:22:46,630 --> 00:22:53,890
that looks like there yeah something

00:22:50,170 --> 00:22:55,150
like that so um I don't know about you

00:22:53,890 --> 00:22:57,160
guys I'm pretty sure this is production

00:22:55,150 --> 00:23:00,610
ready you know or we're getting a bit

00:22:57,160 --> 00:23:02,200
yeah exactly okay we got the the lock

00:23:00,610 --> 00:23:05,730
sensor there it goes down to Arduino

00:23:02,200 --> 00:23:10,020
update server you know we're good to go

00:23:05,730 --> 00:23:13,030
so we go through the posting of JSON

00:23:10,020 --> 00:23:16,750
let's go look at the JavaScript so for

00:23:13,030 --> 00:23:18,730
the JavaScript we've got got khoa joy

00:23:16,750 --> 00:23:22,000
router which is actually an in-house

00:23:18,730 --> 00:23:27,610
project to make a nice validated router

00:23:22,000 --> 00:23:30,730
for for khoa here we've got a route v1

00:23:27,610 --> 00:23:33,100
update it's a post route going a little

00:23:30,730 --> 00:23:36,250
more catch the body if there's not

00:23:33,100 --> 00:23:38,830
anything and we checked the state's

00:23:36,250 --> 00:23:42,340
coming in and the state coming in is

00:23:38,830 --> 00:23:43,750
either going to be locked or unlocked we

00:23:42,340 --> 00:23:46,090
say if it's either occupied or vacant

00:23:43,750 --> 00:23:48,580
based on a 01 that we're receiving and

00:23:46,090 --> 00:23:51,400
here's the bit that is again very simple

00:23:48,580 --> 00:23:54,190
we're creating a pin and this is just a

00:23:51,400 --> 00:23:57,930
generic pin bathroom is either vacant or

00:23:54,190 --> 00:24:00,400
occupied and we post it to the timeline

00:23:57,930 --> 00:24:01,690
that's really it that's that's that's

00:24:00,400 --> 00:24:03,760
all it takes and these three parts work

00:24:01,690 --> 00:24:05,080
together and you could actually refactor

00:24:03,760 --> 00:24:06,460
this to be something a little different

00:24:05,080 --> 00:24:08,320
perhaps you want to know on your

00:24:06,460 --> 00:24:09,730
timeline you know what the temperature

00:24:08,320 --> 00:24:11,380
is of your very tightly controlled

00:24:09,730 --> 00:24:14,050
aquarium at home or anything to get data

00:24:11,380 --> 00:24:16,540
from a source at get it to a server and

00:24:14,050 --> 00:24:17,620
then project it to as many watches as

00:24:16,540 --> 00:24:21,760
people care about that piece of

00:24:17,620 --> 00:24:25,480
information so let's just jump back here

00:24:21,760 --> 00:24:27,910
and show you that looks like here I've

00:24:25,480 --> 00:24:29,620
got a bathroom vacants and it's actually

00:24:27,910 --> 00:24:30,730
working right now and I can actually

00:24:29,620 --> 00:24:33,790
find out the status

00:24:30,730 --> 00:24:35,110
of the Palo Alto bathroom and whether or

00:24:33,790 --> 00:24:37,360
not it's free because that's what's

00:24:35,110 --> 00:24:38,830
really relevant at the moment I have

00:24:37,360 --> 00:24:45,250
never been more disappointed to be a

00:24:38,830 --> 00:24:46,630
remote employee yes so yeah that's a fun

00:24:45,250 --> 00:24:48,040
demo and hopefully gets you thinking

00:24:46,630 --> 00:24:51,429
about the things you can build with

00:24:48,040 --> 00:24:59,919
pebble and go grab the node library and

00:24:51,429 --> 00:25:02,440
try it out thanks thanks in closing

00:24:59,919 --> 00:25:04,720
pebble is hiring like crazy so if you do

00:25:02,440 --> 00:25:06,460
any of these things you might have to

00:25:04,720 --> 00:25:10,410
squid that right now by all means come

00:25:06,460 --> 00:25:10,410

YouTube URL: https://www.youtube.com/watch?v=6xZeJS4_2J8


