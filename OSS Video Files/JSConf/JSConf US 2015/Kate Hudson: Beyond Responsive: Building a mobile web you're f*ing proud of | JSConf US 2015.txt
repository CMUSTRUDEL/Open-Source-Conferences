Title: Kate Hudson: Beyond Responsive: Building a mobile web you're f*ing proud of | JSConf US 2015
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	Making the mobile web platform better, both for ourselves and for the next two billion users, is one of the most important challenges of our careers. It's not enough to rely on standards organizations and browser vendors to solve our technical and cultural problems. We've got to do more. I'm going to take a look at solving problems such as performance, routing, and offline experiences by circumventing the DOM, building hybrid Android apps, and using persistent background queues. Not that these approaches will solve all your problems â€“ but rather, help you set new benchmarks, give greater clarity and direction to the bugs you file on browser vendors, and ultimately get you better results. By making bold technical decisions, we move the web forward. Instead of improving and optimizing the problematic paradigms/assumptions under which the web was built, we should borrow patterns from other mobile platforms or invent new ones. We also need to understand how the experience of coming online for the first time will be very different for the next generation of primarily non-North American mobile users.

Transcript: https://gist.github.com/voodootikigod/c546de804bcb7f8240d7
Captions: 
	00:00:14,870 --> 00:00:15,870
Hi.

00:00:15,870 --> 00:00:16,870
Everybody hear me okay?

00:00:16,870 --> 00:00:17,870
Yes?

00:00:17,870 --> 00:00:18,870
Awesome.

00:00:18,870 --> 00:00:19,870
So I'm a web developer at Mozilla, I'm the lead engineer on the Webmaker

00:00:19,870 --> 00:00:24,570
for Android project, and I want to start off on a high note here.

00:00:24,570 --> 00:00:25,570
The web is broken.

00:00:25,570 --> 00:00:27,250
And I don't mean the Wi-Fi.

00:00:27,250 --> 00:00:30,810
Although the Wi-Fi is totally broken right now.

00:00:30,810 --> 00:00:32,560
So I'm not going to demo some of the stuff I was going to show

00:00:32,560 --> 00:00:33,560
you.

00:00:33,560 --> 00:00:35,450
But that's okay.

00:00:35,450 --> 00:00:38,290
It's not actually broken for most of you JavaScript

00:00:38,290 --> 00:00:39,290
developers, right?

00:00:39,290 --> 00:00:43,870
On Firefox and Chrome and Edge, for you, the web is probably

00:00:43,870 --> 00:00:44,870
still pretty awesome.

00:00:44,870 --> 00:00:46,860
But for the rest of the world coming online right

00:00:46,860 --> 00:00:51,839
now, and that's like 2 billion people over the next few years, it really

00:00:51,839 --> 00:00:54,260
kind of sucks.

00:00:54,260 --> 00:00:56,730
And that's just because for more and more people, the first

00:00:56,730 --> 00:01:01,230
and only experience they're ever going to have of the web is mobile.

00:01:01,230 --> 00:01:05,070
And the mobile web is not good enough.

00:01:05,070 --> 00:01:07,370
So let's talk about why the mobile web is not

00:01:07,370 --> 00:01:08,370
good enough.

00:01:08,370 --> 00:01:10,540
You probably know most of this already.

00:01:10,540 --> 00:01:14,660
The one that you are probably feeling a lot right now is UI

00:01:14,660 --> 00:01:15,970
perf.

00:01:15,970 --> 00:01:19,980
Particularly when you're doing things like gestures and lots of layout

00:01:19,980 --> 00:01:23,160
panes -- not great.

00:01:23,160 --> 00:01:24,570
Not as good as we'd like.

00:01:24,570 --> 00:01:27,160
But there's lots of other things that are broken.

00:01:27,160 --> 00:01:31,160
The auth model that's based on email doesn't make any sense

00:01:31,160 --> 00:01:34,310
for new users of the web who don't even have emails.

00:01:34,310 --> 00:01:38,790
The experience when you go offline or you're on a 3G or less connection

00:01:38,790 --> 00:01:41,550
is really pretty terrible for most of the web.

00:01:41,550 --> 00:01:44,330
And of course, all of the access to the OS level device

00:01:44,330 --> 00:01:49,820
integrations, like push notifications, and camera.

00:01:49,820 --> 00:01:52,280
And on the one hand, that's okay.

00:01:52,280 --> 00:01:55,850
The web was built for a completely different desktop-based paradigm,

00:01:55,850 --> 00:01:56,850
right?

00:01:56,850 --> 00:01:59,340
And it's going to take some time for browsers to work on solutions.

00:01:59,340 --> 00:02:00,340
Right?

00:02:00,340 --> 00:02:01,340
That's fine.

00:02:01,340 --> 00:02:03,990
But on the other hand, it's kind of not okay, because not

00:02:03,990 --> 00:02:07,900
only does the web kind of suck at all these things right now, native platforms

00:02:07,900 --> 00:02:10,170
are actually really good at them.

00:02:10,170 --> 00:02:13,450
And there's some technical reasons why performance and other things are easy to get

00:02:13,450 --> 00:02:15,450
right on native platforms.

00:02:15,450 --> 00:02:19,160
But the thing with native is it was built with

00:02:19,160 --> 00:02:25,250
these problems at the center of its business model, and the web was not.

00:02:25,250 --> 00:02:28,620
So I was actually kind of wondering -- you know, is this still something that people

00:02:28,620 --> 00:02:29,620
care about?

00:02:29,620 --> 00:02:30,859
Are we still talking about this?

00:02:30,859 --> 00:02:33,530
And it turns out it is.

00:02:33,530 --> 00:02:38,099
Just yesterday, actually, one of the leading authorities on browser quirks and

00:02:38,099 --> 00:02:43,129
compatibility since the '90s, I think -- he wrote an article on his blog,

00:02:43,129 --> 00:02:45,560
and it was called web versus native.

00:02:45,560 --> 00:02:46,560
Let's concede defeat.

00:02:46,560 --> 00:02:49,069
I want to read this out, because it's important.

00:02:49,069 --> 00:02:51,760
I feel like it's time to revisit the web versus native

00:02:51,760 --> 00:02:57,030
debate and concede defeat, that the web should not and cannot compete

00:02:57,030 --> 00:03:02,010
with native when it comes to complex app-like structures.

00:03:02,010 --> 00:03:04,349
His argument essentially is that because of the

00:03:04,349 --> 00:03:08,120
fundamental architectural limitations of how the web was built, we're just

00:03:08,120 --> 00:03:12,889
going to have to give up on building these rich client app-like experiences

00:03:12,889 --> 00:03:17,450
and go back to the true strengths of the web, which is URLs, universal

00:03:17,450 --> 00:03:20,150
accessibility, et cetera.

00:03:20,150 --> 00:03:21,560
And you know what?

00:03:21,560 --> 00:03:23,279
He has a point.

00:03:23,279 --> 00:03:25,700
You know, overlooking the fact that there's a few things

00:03:25,700 --> 00:03:30,739
like offline that still affects the overall interoperability of the web, this

00:03:30,739 --> 00:03:35,609
is a totally reasonable, rational argument, when you look at the current

00:03:35,609 --> 00:03:37,209
state of affairs.

00:03:37,209 --> 00:03:40,099
And it might actually even be a popular one.

00:03:40,099 --> 00:03:45,569
Honestly, if what you really want to do right now today is to build the fastest, coolest,

00:03:45,569 --> 00:03:51,779
most awesome UI, with 3D and games and whatever, I would have to tell you -- you

00:03:51,779 --> 00:03:52,779
know what?

00:03:52,779 --> 00:03:56,290
You should consider building for Android or iOS.

00:03:56,290 --> 00:03:58,469
But if what we're saying -- that this is the way

00:03:58,469 --> 00:04:02,879
to fix the mobile web, it's to give up and abandon app-like experiences for

00:04:02,879 --> 00:04:07,239
something that, you know, works better with our original model of the web, I

00:04:07,239 --> 00:04:08,359
couldn't disagree more.

00:04:08,359 --> 00:04:13,790
But to do that, first, I want to take a look back at the year 2004.

00:04:13,790 --> 00:04:16,620
How many of you were doing web development back in

00:04:16,620 --> 00:04:17,620
2004?

00:04:17,620 --> 00:04:18,620
Wow.

00:04:18,620 --> 00:04:19,620
That's a lot of you.

00:04:19,620 --> 00:04:20,620
This is awesome.

00:04:20,620 --> 00:04:23,860
So you're totally going to remember some of the stuff I'm going to

00:04:23,860 --> 00:04:25,850
talk about here.

00:04:25,850 --> 00:04:26,850
So...

00:04:26,850 --> 00:04:30,330
Yeah, I was a big fan, actually, of both Britney Spears

00:04:30,330 --> 00:04:32,150
and Orlando Bloom.

00:04:32,150 --> 00:04:36,610
According to Google's zeitgeist of the year, they were the

00:04:36,610 --> 00:04:42,750
two most popular people.

00:04:42,750 --> 00:04:48,660
The top two tech topics, according to Google analytics, number one was wallpaper.

00:04:48,660 --> 00:04:52,160
Number two was Kazaa.

00:04:52,160 --> 00:04:53,210
Yeah.

00:04:53,210 --> 00:04:57,050
If we were doing JSConf in 2004, that's what we would

00:04:57,050 --> 00:04:58,590
be talking about.

00:04:58,590 --> 00:04:59,810
Pretty awesome.

00:04:59,810 --> 00:05:07,650
So also -- PHP5 was released that year, Ruby on Rails was at 0.5.0, and Google

00:05:07,650 --> 00:05:10,530
had been around for about six years already.

00:05:10,530 --> 00:05:12,710
So that's cool.

00:05:12,710 --> 00:05:17,000
So something else happened in 2004.

00:05:17,000 --> 00:05:18,590
It was the year -- actually, it was the year that Facebook

00:05:18,590 --> 00:05:19,590
was released as well.

00:05:19,590 --> 00:05:21,670
Although I don't actually remember that.

00:05:21,670 --> 00:05:23,590
But it was actually the year that Google first released

00:05:23,590 --> 00:05:25,310
Gmail.

00:05:25,310 --> 00:05:27,919
And at first, because it was released in April and Google had this

00:05:27,919 --> 00:05:31,951
reputation for being notorious for April fool's jokes, people thought it was

00:05:31,951 --> 00:05:33,699
maybe a joke.

00:05:33,699 --> 00:05:37,740
Does anybody remember when Gmail came out?

00:05:37,740 --> 00:05:39,569
Were you signed up for Gmail?

00:05:39,569 --> 00:05:40,659
Yeah.

00:05:40,659 --> 00:05:43,640
I don't remember it being as cool as people said it was.

00:05:43,640 --> 00:05:44,640
But it was...

00:05:44,640 --> 00:05:46,110
I guess was pretty cool.

00:05:46,110 --> 00:05:50,169
It was a real thing, and it was cool for two

00:05:50,169 --> 00:05:51,169
reasons.

00:05:51,169 --> 00:05:52,169
Okay?

00:05:52,169 --> 00:05:54,110
One was that it offered a gig of storage.

00:05:54,110 --> 00:05:57,069
Where all the other online competitors like Hotmail

00:05:57,069 --> 00:06:02,020
and Yahoo offered way less than that, and the second thing was that Gmail had

00:06:02,020 --> 00:06:07,130
this super neat interface that could actually live update when you received a

00:06:07,130 --> 00:06:10,389
new email, without requiring a page refresh.

00:06:10,389 --> 00:06:13,699
That was super awesome, right?

00:06:13,699 --> 00:06:18,930
And in 2004, the idea of re-rendering the DOM with new data, after the page had

00:06:18,930 --> 00:06:20,610
loaded, so like...

00:06:20,610 --> 00:06:24,480
AJAX, was not at all common on the web, nor was it even

00:06:24,480 --> 00:06:25,949
expected.

00:06:25,949 --> 00:06:29,889
All the other web email clients were terrible and clunky and

00:06:29,889 --> 00:06:34,629
required lots of page refreshes, but that was just the way things were.

00:06:34,629 --> 00:06:37,330
If you wanted an app-like experience, you were expected

00:06:37,330 --> 00:06:39,330
to use a Windows email client.

00:06:39,330 --> 00:06:40,330
Right?

00:06:40,330 --> 00:06:41,909
Pretty reasonable.

00:06:41,909 --> 00:06:46,039
So when the lead developer of Gmail told his co-workers he was going to write the entire

00:06:46,039 --> 00:06:52,270
app totally in the browser and almost entirely in JavaScript, they were like...

00:06:52,270 --> 00:06:53,270
What?

00:06:53,270 --> 00:06:54,270
Really?

00:06:54,270 --> 00:06:56,159
You know, in fact, almost everybody he talked to, even

00:06:56,159 --> 00:07:01,710
internally at Google, especially people who considered themselves to be experts

00:07:01,710 --> 00:07:05,889
at JavaScript and the web, thought his idea was totally naive, it was

00:07:05,889 --> 00:07:09,280
never going to work, because people had tried to write complex things in JavaScript

00:07:09,280 --> 00:07:14,990
before, and they knew the web was just not made to do that kind of stuff.

00:07:14,990 --> 00:07:17,580
And this was a really common opinion at the time.

00:07:17,580 --> 00:07:19,280
JavaScript was at best a thing that...

00:07:19,280 --> 00:07:22,650
You know, could decorate your pages or enhance them a little

00:07:22,650 --> 00:07:27,360
bit, and at worst, it was a security flaw, it was non-standards compliant,

00:07:27,360 --> 00:07:30,330
it was disruptive and pretty terrible, right?

00:07:30,330 --> 00:07:32,860
So I want to show you some things that people were actually

00:07:32,860 --> 00:07:33,860
writing.

00:07:33,860 --> 00:07:38,819
I was digging back into the Wayback Machine and some old blogs circa

00:07:38,819 --> 00:07:40,439
2004.

00:07:40,439 --> 00:07:42,770
This was from the anti-JavaScript FAQ.

00:07:42,770 --> 00:07:47,039
While I am personally opposed to all JavaScript, I understand it can do some

00:07:47,039 --> 00:07:49,250
things that you can't do with normal html.

00:07:49,250 --> 00:07:53,020
But just remember -- if Amazon can do without JavaScript, so can

00:07:53,020 --> 00:07:55,960
you.

00:07:55,960 --> 00:07:58,979
So this was from a post titled JavaScript is evil.

00:07:58,979 --> 00:08:01,740
A lot of designers think it's their god-given right to annoy

00:08:01,740 --> 00:08:05,960
the hell out of visitors with bulky JavaScript effects, so turning off JavaScript

00:08:05,960 --> 00:08:10,259
is almost a requirement when visiting some websites.

00:08:10,259 --> 00:08:15,099
It was true at the time.

00:08:15,099 --> 00:08:17,820
This is from stupid JavaScript security tricks.

00:08:17,820 --> 00:08:20,150
A little bit older, but still relevant.

00:08:20,150 --> 00:08:22,729
Blindly accepting a high level of security risk on

00:08:22,729 --> 00:08:27,110
the web by enabling JavaScript is as shaky as a ride on the Canadian space shuttle

00:08:27,110 --> 00:08:28,370
made of birch bark and gum.

00:08:28,370 --> 00:08:29,370
I'm Canadian, so this really resonated with me.

00:08:29,370 --> 00:08:30,370
Woo, represent.

00:08:30,370 --> 00:08:31,370
So this is what people were saying.

00:08:31,370 --> 00:08:32,370
JavaScript was not a thing.

00:08:32,370 --> 00:08:33,370
But despite the fact that it took years for Gmail to...

00:08:33,370 --> 00:08:34,370
Whoops.

00:08:34,370 --> 00:08:35,370
Uh-oh.

00:08:35,370 --> 00:08:36,370
My computer died.

00:08:36,370 --> 00:08:37,370
I'm going to have to plug in.

00:08:37,370 --> 00:08:38,370
Okay.

00:08:38,370 --> 00:08:39,370
I don't need internet.

00:08:39,370 --> 00:08:40,370
But...

00:08:40,370 --> 00:08:41,370
Sorry about that.

00:08:41,370 --> 00:08:42,370
So...

00:08:42,370 --> 00:08:43,370
Computers fail sometimes.

00:08:43,370 --> 00:08:44,370
Not only is the mobile web broken.

00:08:44,370 --> 00:08:45,370
Batteries are broken too.

00:08:45,370 --> 00:08:46,370
Yeah.

00:08:46,370 --> 00:08:47,370
Oh, thanks.

00:08:47,370 --> 00:08:48,370
You're the best.

00:08:48,370 --> 00:08:49,370
See?

00:08:49,370 --> 00:08:50,370
Community.

00:08:50,370 --> 00:08:51,370
This is what makes JavaScript better.

00:08:51,370 --> 00:08:52,370
All right.

00:08:52,370 --> 00:08:53,370
Let's boot up.

00:08:53,370 --> 00:08:54,370
Sorry.

00:08:54,370 --> 00:08:55,370
It was the Gmail curse, honestly.

00:08:55,370 --> 00:08:56,370
(Never Going to Give You Up playing)

00:08:56,370 --> 00:08:57,370
Oh, gosh.

00:08:57,370 --> 00:08:58,370
All right, we're booting, we're booting.

00:08:58,370 --> 00:08:59,370
I'm really sorry.

00:08:59,370 --> 00:09:00,370
Phones were super different?

00:09:00,370 --> 00:09:01,370
Phones were super different in the '80s than they are today.

00:09:01,370 --> 00:09:02,370
Yeah, they were.

00:09:02,370 --> 00:09:03,370
In the '80s, I had Jenny's number, and now I have 8675309 apps on my phone.

00:09:03,370 --> 00:09:04,370
It's true.

00:09:04,370 --> 00:09:05,370
It was really different back in the 2000s too -- people assumed

00:09:05,370 --> 00:09:06,370
email could only be done native.

00:09:06,370 --> 00:09:07,370
But we're about to find out why...

00:09:07,370 --> 00:09:08,370
Yeah, it's just going to take a minute.

00:09:08,370 --> 00:09:09,370
Okay.

00:09:09,370 --> 00:09:10,370
Should have plugged in.

00:09:10,370 --> 00:09:11,370
Yeah, it's true.

00:09:11,370 --> 00:09:12,370
Oh, we're good, we're good, we're good.

00:09:12,370 --> 00:09:13,370
Sorry, sorry.

00:09:13,370 --> 00:09:14,370
All right.

00:09:14,370 --> 00:09:15,370
We're back.

00:09:15,370 --> 00:09:16,370
Let's hear it for the hibernate feature on computers, everybody.

00:09:16,370 --> 00:09:17,370
As opposed to rebooting from scratch.

00:09:17,370 --> 00:09:18,370
(Never Going to Give You Up playing)

00:09:18,370 --> 00:09:19,370
We're back.

00:09:19,370 --> 00:09:20,370
No, we're not back.

00:09:20,370 --> 00:09:21,370
Now...

00:09:21,370 --> 00:09:22,370
Which one was the right one?

00:09:22,370 --> 00:09:23,370
Probably this one.

00:09:23,370 --> 00:09:24,370
Let's find out.

00:09:24,370 --> 00:09:25,370
Yes!

00:09:25,370 --> 00:09:26,370
Okay!

00:09:26,370 --> 00:09:27,370
So...

00:09:27,370 --> 00:09:28,370
We're back.

00:09:28,370 --> 00:09:29,370
We're back in the immersive interactive web.

00:09:29,370 --> 00:09:30,370
Awesome.

00:09:30,370 --> 00:09:31,370
Still in 2004.

00:09:31,370 --> 00:09:32,370
So despite all of this weird stuff, and the fact that JavaScript

00:09:32,370 --> 00:09:33,370
was terrible, and it was a total hack, Gmail was a total hack, it was living

00:09:33,370 --> 00:09:34,370
proof that you could write something in JavaScript that people actually

00:09:34,370 --> 00:09:35,370
loved.

00:09:35,370 --> 00:09:36,370
And that's awesome.

00:09:36,370 --> 00:09:37,370
And, you know, it wasn't long after this that developers

00:09:37,370 --> 00:09:38,370
started getting excited about the XML-HTTP thing and using it all

00:09:38,370 --> 00:09:39,370
over the place, and before we knew it, great rich client experiences became something

00:09:39,370 --> 00:09:40,370
that was essential to the web, as the promise of interoperability itself.

00:09:40,370 --> 00:09:41,370
Fast-forward to 2006, and all of a sudden XML-HTTP thing has now been standardized

00:09:41,370 --> 00:09:42,370
by the W3C, and JavaScript is moving towards the process of

00:09:42,370 --> 00:09:43,370
standardization and universal acceptance.

00:09:43,370 --> 00:09:44,370
Hurray!

00:09:44,370 --> 00:09:45,370
Clap for JavaScript!

00:09:45,370 --> 00:09:46,370
So the point is this: you're not here at this conference about to learn about knitting

00:09:46,370 --> 00:09:47,370
and making music and driving robots because someone intended or designed

00:09:47,370 --> 00:09:48,370
to make JavaScript or the web to do these things.

00:09:48,370 --> 00:09:49,370
You're not here because of the standards body.

00:09:49,370 --> 00:09:50,370
You're not even here because of a browser.

00:09:50,370 --> 00:09:51,370
Well, you're kind of here because of a browser.

00:09:51,370 --> 00:09:53,410
But not entirely because of a browser.

00:09:53,410 --> 00:09:56,959
You're here because someone wanted to do something cool and found a super

00:09:56,959 --> 00:10:01,810
hacky but somewhat compelling way to make it happen.

00:10:01,810 --> 00:10:05,800
So my proposal to fix the mobile web is this: stop

00:10:05,800 --> 00:10:10,910
relying on browsers to reimplement the DOM or land device APIs or do whatever

00:10:10,910 --> 00:10:12,870
it is you want.

00:10:12,870 --> 00:10:16,880
Stop thinking about what the web is or what the web was.

00:10:16,880 --> 00:10:20,230
Maybe this is totally naive, but I don't think that

00:10:20,230 --> 00:10:24,330
rich app-like experiences are something we're going to be able to pass over,

00:10:24,330 --> 00:10:27,300
no matter how compelling and awesome the URL is.

00:10:27,300 --> 00:10:29,691
And if you want to talk to me about URLs, I will talk you

00:10:29,691 --> 00:10:32,010
to about URLs.

00:10:32,010 --> 00:10:34,620
If you want to be here, talking about JavaScript, in five

00:10:34,620 --> 00:10:38,720
years, it's time to hack.

00:10:38,720 --> 00:10:40,480
So in order to demonstrate some of the ways you

00:10:40,480 --> 00:10:43,639
might do this today, I would like to use a model I've devised called the three

00:10:43,639 --> 00:10:45,829
levels of hack.

00:10:45,829 --> 00:10:47,980
Where we start in a place that most people would kind of agree

00:10:47,980 --> 00:10:52,880
is not that weird, and then end up with something that's really weird.

00:10:52,880 --> 00:10:54,380
So start small.

00:10:54,380 --> 00:10:55,560
First level of hack.

00:10:55,560 --> 00:10:57,230
Test new features before their time.

00:10:57,230 --> 00:10:59,449
That's a great way to push the platform a little

00:10:59,449 --> 00:11:00,449
bit.

00:11:00,449 --> 00:11:02,430
To use new browser language features, right?

00:11:02,430 --> 00:11:05,310
That haven't made it into production.

00:11:05,310 --> 00:11:08,740
So one way to do that is to turn on stuff that's there and use it.

00:11:08,740 --> 00:11:10,050
Easy, right?

00:11:10,050 --> 00:11:12,140
One thing I'm personally really excited about is the service

00:11:12,140 --> 00:11:16,390
worker -- which is going to help out with offline in a huge way.

00:11:16,390 --> 00:11:20,089
And I'm not going to talk about it in detail, but if you've ever used AppCache or

00:11:20,089 --> 00:11:24,510
are thinking about taking your app online, you should definitely check it out.

00:11:24,510 --> 00:11:25,820
There's already an implementation.

00:11:25,820 --> 00:11:29,180
Chrome, you can check it out today, and I think the Firefox implementation is

00:11:29,180 --> 00:11:31,160
coming out in the summer sometime.

00:11:31,160 --> 00:11:34,830
So that's super cool.

00:11:34,830 --> 00:11:38,649
You can also polyfill the features that you want to make them work

00:11:38,649 --> 00:11:39,649
for features today.

00:11:39,649 --> 00:11:43,980
One of the things we do on my team is transpile ES6 using

00:11:43,980 --> 00:11:45,550
Babel.

00:11:45,550 --> 00:11:50,740
And Sebastian is speaking about that later this afternoon.

00:11:50,740 --> 00:11:53,820
So I highly recommend you attend that session.

00:11:53,820 --> 00:11:57,710
And doing this kind of stuff is not controversial.

00:11:57,710 --> 00:11:59,440
But I'm mentioning it because if you're not doing

00:11:59,440 --> 00:12:00,440
it, you should.

00:12:00,440 --> 00:12:03,040
And the other thing you should do is -- if you find bugs, or you

00:12:03,040 --> 00:12:07,810
have opinions about how things should be changed, you know, the implementation

00:12:07,810 --> 00:12:10,200
teams that are building them really want to hear from you.

00:12:10,200 --> 00:12:12,870
The Gecko team, for example, working really hard

00:12:12,870 --> 00:12:17,399
on service workers right now, is really interested on getting feedback on the

00:12:17,399 --> 00:12:19,709
service worker and how you want to use it.

00:12:19,709 --> 00:12:22,500
So if you're interested in joining that conversation, just talk to me after and

00:12:22,500 --> 00:12:25,230
I can hook you up with the right people.

00:12:25,230 --> 00:12:27,160
Okay.

00:12:27,160 --> 00:12:29,949
So let's do the second level of hack.

00:12:29,949 --> 00:12:31,940
Building new abstractions.

00:12:31,940 --> 00:12:34,720
So beyond things that are being implemented -- cool

00:12:34,720 --> 00:12:37,750
stuff really comes out of people thinking in completely different ways with

00:12:37,750 --> 00:12:39,360
the tools that are there.

00:12:39,360 --> 00:12:41,690
So, you know, one area we're seeing a lot of

00:12:41,690 --> 00:12:45,200
innovation -- I'm sure all of you are aware, probably using this stuff -- is

00:12:45,200 --> 00:12:51,699
DOM abstractions, like Reacts, virtual DOM, famous engines DOM and web GL

00:12:51,699 --> 00:12:53,920
abstraction, flip board did a cool thing with react and canvas.

00:12:53,920 --> 00:12:57,350
For the most part, they don't replace the DOM.

00:12:57,350 --> 00:13:04,050
They augment and reoptimize particular areas of it by building an abstraction, and that's

00:13:04,050 --> 00:13:05,050
pretty cool.

00:13:05,050 --> 00:13:06,050
It's a total hack.

00:13:06,050 --> 00:13:07,050
Let's be honest.

00:13:07,050 --> 00:13:10,050
But it's awesome.

00:13:10,050 --> 00:13:14,570
Another thing you can do with abstractions is build things that already exist, but don't

00:13:14,570 --> 00:13:17,440
yet exist -- have a counterpart on the web.

00:13:17,440 --> 00:13:20,550
So going back to the offline use case, a pretty cool example I've

00:13:20,550 --> 00:13:25,231
seen in the last few months is some colleagues of mine have been working on

00:13:25,231 --> 00:13:30,329
something called Filer, which is basically a POSIX compliant file system

00:13:30,329 --> 00:13:31,690
interface in the browser.

00:13:31,690 --> 00:13:33,720
It doesn't actually use a file system.

00:13:33,720 --> 00:13:38,290
It just abstracts one on top of index DB or web SQL

00:13:38,290 --> 00:13:41,160
or even in memory.

00:13:41,160 --> 00:13:44,139
So that means that any modern browser who has access to

00:13:44,139 --> 00:13:48,190
those things can actually do file operations and store them offline, which is

00:13:48,190 --> 00:13:49,190
amazing.

00:13:49,190 --> 00:13:53,110
There's a group of super smart people working on a code editor that

00:13:53,110 --> 00:13:57,630
takes advantage of Filer at Seneca College in Toronto, so you should check that

00:13:57,630 --> 00:14:00,920
out if you're interested in Filer.

00:14:00,920 --> 00:14:04,370
It's super cool.

00:14:04,370 --> 00:14:06,320
So...

00:14:06,320 --> 00:14:08,269
Okay.

00:14:08,269 --> 00:14:09,649
We talked about some fairly...

00:14:09,649 --> 00:14:12,290
You know, things that are exciting.

00:14:12,290 --> 00:14:13,930
But not exactly controversial.

00:14:13,930 --> 00:14:18,180
Because we're still building on top of existing APIs, and mostly doing things in a web-like

00:14:18,180 --> 00:14:19,680
way.

00:14:19,680 --> 00:14:24,370
But what if we could go actually further than that?

00:14:24,370 --> 00:14:26,510
You know, if the browser is the thing that holds

00:14:26,510 --> 00:14:29,240
you back, why not just hack on that?

00:14:29,240 --> 00:14:30,720
Cool, right?

00:14:30,720 --> 00:14:34,029
And in this case, I'm not talking about, like, submitting a patch to

00:14:34,029 --> 00:14:38,209
Firefox for Android, although if you would like to do that, there's a link.

00:14:38,209 --> 00:14:39,270
You know, totally awesome.

00:14:39,270 --> 00:14:42,290
You totally can and should.

00:14:42,290 --> 00:14:44,160
What I'm talking about is basically hacking together

00:14:44,160 --> 00:14:47,839
your own user agent inside of a native environment.

00:14:47,839 --> 00:14:50,130
And this is also known as hybrid app development.

00:14:50,130 --> 00:14:51,130
Right?

00:14:51,130 --> 00:14:55,480
And maybe you haven't heard hybrid app development described quite like that.

00:14:55,480 --> 00:14:57,690
Hacking together your own user agent.

00:14:57,690 --> 00:14:59,509
That's essentially what it is.

00:14:59,509 --> 00:15:00,920
And there's some frameworks out there that can

00:15:00,920 --> 00:15:03,350
take care of the dirtiest part of that hack.

00:15:03,350 --> 00:15:07,041
If you want to try them out, I would highly recommend Cordova, which is a

00:15:07,041 --> 00:15:11,149
really brilliant project that feels the closest to actually still developing with

00:15:11,149 --> 00:15:15,709
the web, but getting APIs from the native device.

00:15:15,709 --> 00:15:18,630
But I do actually think it's valuable to do yourself.

00:15:18,630 --> 00:15:20,830
You know, are you going to implement a better

00:15:20,830 --> 00:15:23,519
browser for all mobile users?

00:15:23,519 --> 00:15:25,040
You know, are you smarter than the people who

00:15:25,040 --> 00:15:28,430
work on Firefox and Chrome, and Windows?

00:15:28,430 --> 00:15:30,339
Absolutely not.

00:15:30,339 --> 00:15:31,339
You're not.

00:15:31,339 --> 00:15:32,339
I'm sorry.

00:15:32,339 --> 00:15:33,339
Maybe you are.

00:15:33,339 --> 00:15:34,339
I don't know.

00:15:34,339 --> 00:15:35,339
Come work for us if you are.

00:15:35,339 --> 00:15:36,339
But you're probably not.

00:15:36,339 --> 00:15:37,339
But...

00:15:37,339 --> 00:15:38,540
You know, personally, for what I'm working on...

00:15:38,540 --> 00:15:39,899
No, seriously.

00:15:39,899 --> 00:15:42,610
Come talk to me.

00:15:42,610 --> 00:15:45,199
For what I'm working on, I found that building

00:15:45,199 --> 00:15:50,480
a custom hybrid architecture, while it's not the solution for all of the web's

00:15:50,480 --> 00:15:54,259
problems, it allowed me to experiment with solving the exact problems

00:15:54,259 --> 00:15:57,830
that we were having with the mobile web, and understanding that connection much

00:15:57,830 --> 00:16:01,709
better than I would, you know, using something like Cordova, or just building

00:16:01,709 --> 00:16:04,220
within the browser.

00:16:04,220 --> 00:16:06,280
So to put this into perspective, I'm going to talk a

00:16:06,280 --> 00:16:09,800
little bit about what my team at Mozilla is working on.

00:16:09,800 --> 00:16:13,180
We're interested in what web authoring tools might look

00:16:13,180 --> 00:16:19,290
like, primarily for new users of the web in Bangladesh, Brazil, India, and

00:16:19,290 --> 00:16:21,139
Kenya, using only a mobile phone.

00:16:21,139 --> 00:16:23,930
So that's, like, what our problem is.

00:16:23,930 --> 00:16:28,579
And the first iteration we experimented with was a client side single page

00:16:28,579 --> 00:16:29,579
app.

00:16:29,579 --> 00:16:38,839
We didn't target iOS, because it's not a huge part of our market.

00:16:38,839 --> 00:16:43,170
But we had specific issues that were major blockers.

00:16:43,170 --> 00:16:48,890
Obviously we needed to make something work really, really well offline,

00:16:48,890 --> 00:16:50,040
and in 3G or less.

00:16:50,040 --> 00:16:54,160
That was a huge requirement for us.

00:16:54,160 --> 00:16:56,740
We tried using AppCache, but it wasn't doing what we

00:16:56,740 --> 00:16:57,740
needed it to do.

00:16:57,740 --> 00:17:01,160
We were seeing a lot of issues with memory leaks popping up

00:17:01,160 --> 00:17:04,900
in client side memory architectures, particularly when building or destroying

00:17:04,900 --> 00:17:08,260
new views.

00:17:08,260 --> 00:17:11,150
Especially when people are idling the apps on their phone for three

00:17:11,150 --> 00:17:12,150
or four hours.

00:17:12,150 --> 00:17:14,130
That was a huge issue for us.

00:17:14,130 --> 00:17:17,040
Another big issue was UI perf.

00:17:17,040 --> 00:17:19,309
It's an editing interface when you touch.

00:17:19,309 --> 00:17:28,490
And 50% of our user were still using Android phones before 4.4.

00:17:28,490 --> 00:17:30,620
Anybody develop for the stock Android browser?

00:17:30,620 --> 00:17:31,620
Nobody?

00:17:31,620 --> 00:17:33,240
Oh my goodness.

00:17:33,240 --> 00:17:35,470
You think IE is bad.

00:17:35,470 --> 00:17:39,299
You should try developing for the Android soft browser.

00:17:39,299 --> 00:17:41,570
It does not autoupdate.

00:17:41,570 --> 00:17:42,570
It's pretty horrible.

00:17:42,570 --> 00:17:46,570
So these were problems.

00:17:46,570 --> 00:17:49,610
Let's figure out how we fix some of these things in a custom Android

00:17:49,610 --> 00:17:50,670
environment.

00:17:50,670 --> 00:17:51,740
So...

00:17:51,740 --> 00:17:54,550
Actually, any Android developers here?

00:17:54,550 --> 00:17:55,550
No?

00:17:55,550 --> 00:17:57,280
Oh, we've got one.

00:17:57,280 --> 00:17:58,280
This is good.

00:17:58,280 --> 00:17:59,280
This is good.

00:17:59,280 --> 00:18:00,280
All right.

00:18:00,280 --> 00:18:02,370
This is going to be interesting to you.

00:18:02,370 --> 00:18:04,120
So I was going to skip past this part.

00:18:04,120 --> 00:18:06,230
If you guys all do Android.

00:18:06,230 --> 00:18:07,230
But...

00:18:07,230 --> 00:18:08,230
All right.

00:18:08,230 --> 00:18:11,900
So the basic architecture -- how do we build this custom hybrid

00:18:11,900 --> 00:18:12,900
app?

00:18:12,900 --> 00:18:16,620
And by the way, this is really similar to how Cordova works or any other

00:18:16,620 --> 00:18:17,980
hybrid architecture.

00:18:17,980 --> 00:18:20,690
I want you to understand how you do it yourself.

00:18:20,690 --> 00:18:23,480
So the first thing we do is we start with an Android

00:18:23,480 --> 00:18:26,580
activity, which is like a basic view in Android.

00:18:26,580 --> 00:18:30,030
And that may or may not contain some UI, like a back button

00:18:30,030 --> 00:18:31,960
or a header.

00:18:31,960 --> 00:18:34,030
Or it might just be like a frame to hold the web view.

00:18:34,030 --> 00:18:35,100
All right?

00:18:35,100 --> 00:18:36,289
So how do we do that?

00:18:36,289 --> 00:18:37,810
We write some Java.

00:18:37,810 --> 00:18:38,930
We create an activity.

00:18:38,930 --> 00:18:41,289
We create the layout in XML.

00:18:41,289 --> 00:18:43,909
Then we add it to the manifest, where we can specify things

00:18:43,909 --> 00:18:47,880
like the name and the parent view, the view hierarchy, stuff like that.

00:18:47,880 --> 00:18:52,510
It's kind of weird, but not so weird.

00:18:52,510 --> 00:18:54,780
Inside that, we instantiate a web runtime.

00:18:54,780 --> 00:18:59,580
That can be Chromium or even Gecko.

00:18:59,580 --> 00:19:04,920
There's a project to do that, but it's not ready yet.

00:19:04,920 --> 00:19:07,010
That's super cool.

00:19:07,010 --> 00:19:12,390
And Android makes it easy to do.

00:19:12,390 --> 00:19:20,550
In 4.4 plus or web kit -- you just implement the class instantiate.

00:19:20,550 --> 00:19:25,840
Super easies, right?

00:19:25,840 --> 00:19:28,080
Like us, you probably want to support the most

00:19:28,080 --> 00:19:30,600
modern version of browsers.

00:19:30,600 --> 00:19:33,180
Instead of using the built in Webkit, you can use

00:19:33,180 --> 00:19:36,820
this, which is crosswalk.

00:19:36,820 --> 00:19:41,100
Lets you embed the latest version of Android as far

00:19:41,100 --> 00:19:43,409
back as 4.0.

00:19:43,409 --> 00:19:49,850
And it exposes the same JavaScript Java bindings -- it's great.

00:19:49,850 --> 00:19:53,510
Crosswalk project.org.

00:19:53,510 --> 00:19:55,780
So the last thing we're going to need in this architecture

00:19:55,780 --> 00:19:58,820
is a communication layer that binds our JavaScript and our Android

00:19:58,820 --> 00:20:00,450
code together.

00:20:00,450 --> 00:20:03,840
Some of that is provided by the web view class or the crosswalk

00:20:03,840 --> 00:20:08,970
class, so you can load external URLs, you can load packaged assets

00:20:08,970 --> 00:20:09,990
inside your app.

00:20:09,990 --> 00:20:12,070
And if you're wondering -- yes, even if you're using the

00:20:12,070 --> 00:20:17,130
file protocol, you can do XHR, because this is your own user agent, and you

00:20:17,130 --> 00:20:18,929
can do what you want.

00:20:18,929 --> 00:20:20,990
All right.

00:20:20,990 --> 00:20:25,190
But the real magic that happens, though, is you can expose a custom

00:20:25,190 --> 00:20:29,309
Java interface into your JavaScript by attaching it to the window object, and

00:20:29,309 --> 00:20:32,380
that kind of lets you do whatever you want.

00:20:32,380 --> 00:20:34,110
So what does that look like?

00:20:34,110 --> 00:20:37,059
We've got -- we add JavaScript interface to our

00:20:37,059 --> 00:20:41,100
web view, we basically attach a class to it, and we can add some methods on

00:20:41,100 --> 00:20:42,740
that class.

00:20:42,740 --> 00:20:46,340
And those methods that are declared actually show up on window.Android,

00:20:46,340 --> 00:20:48,809
or whatever -- we can call it whatever we want.

00:20:48,809 --> 00:20:50,260
I called it Android.

00:20:50,260 --> 00:20:53,410
We can just call those Java functions.

00:20:53,410 --> 00:20:57,779
Of course, you're fairly limited in what kind of data structures you can pass

00:20:57,779 --> 00:20:58,779
through.

00:20:58,779 --> 00:21:00,210
You're going to want to use primitives like strings and stuff.

00:21:00,210 --> 00:21:03,029
You can't pass full objects or functions around.

00:21:03,029 --> 00:21:04,029
Sorry.

00:21:04,029 --> 00:21:05,029
But...

00:21:05,029 --> 00:21:06,029
It's still pretty powerful.

00:21:06,029 --> 00:21:08,790
And that's basically it.

00:21:08,790 --> 00:21:09,790
So...

00:21:09,790 --> 00:21:10,790
Yeah.

00:21:10,790 --> 00:21:11,790
That's how it works.

00:21:11,790 --> 00:21:15,900
If you remember from our example, one of the major issues we had

00:21:15,900 --> 00:21:20,190
was that the client side routing caused a lot of unexpected memory leaks.

00:21:20,190 --> 00:21:25,429
Long lived processes were kind of not so great in our client side app.

00:21:25,429 --> 00:21:28,920
So what we did -- and this is something you couldn't do in Cordova, but we could, because

00:21:28,920 --> 00:21:32,929
we were hacking something together -- in order to fix the issue we had,

00:21:32,929 --> 00:21:36,040
we actually moved the routing into Android, so we could take advantage of

00:21:36,040 --> 00:21:40,700
the more sophisticated memory management and life cycle events, and we instantiated

00:21:40,700 --> 00:21:46,659
each page of the app as an isolated view with its own activity.

00:21:46,659 --> 00:21:51,660
That's really similar to server side routing, and it actually has the same benefits,

00:21:51,660 --> 00:21:55,250
like encapsulation of each page, but in Android, we also get the added

00:21:55,250 --> 00:22:00,279
benefit of super smooth transitions, layout hierarchies, we can get

00:22:00,279 --> 00:22:04,830
the back button to do what we want, so we get the best of both worlds.

00:22:04,830 --> 00:22:06,750
Pretty cool.

00:22:06,750 --> 00:22:09,559
What did we do about shared state?

00:22:09,559 --> 00:22:12,559
This is where the JS Java bindings come in.

00:22:12,559 --> 00:22:16,799
Because we're using React to render the web UI, it's pretty trivial

00:22:16,799 --> 00:22:21,110
to send parameters into React and take the state out of React and cache

00:22:21,110 --> 00:22:23,059
in Android.

00:22:23,059 --> 00:22:26,970
So what does passing rooted params look like?

00:22:26,970 --> 00:22:32,340
You stringify the router params, get an initial state

00:22:32,340 --> 00:22:35,500
function, and all of a sudden you have all the information from your router.

00:22:35,500 --> 00:22:37,640
That's pretty simple.

00:22:37,640 --> 00:22:43,539
And to cache state, we create a JavaScript interface

00:22:43,539 --> 00:22:48,871
called setState, that allows us to pass in a stringified JSON object, so it

00:22:48,871 --> 00:22:54,030
can be cached in the shared preferences in Android.

00:22:54,030 --> 00:22:57,290
And our React code, we just need to hook into it.

00:22:57,290 --> 00:23:00,860
So every time our component updates, we set the

00:23:00,860 --> 00:23:05,340
state in Android, so it's cached, and when the component mounts, we just pull

00:23:05,340 --> 00:23:07,400
it down and then restore the state.

00:23:07,400 --> 00:23:09,020
So super simple.

00:23:09,020 --> 00:23:13,320
But it solves a problem -- we can restore things in an offline context,

00:23:13,320 --> 00:23:19,370
we can get around using that Android-based routing, without having to sacrifice

00:23:19,370 --> 00:23:22,440
our User Experience.

00:23:22,440 --> 00:23:23,970
So what about device integration?

00:23:23,970 --> 00:23:25,289
This is something actually if you're going to

00:23:25,289 --> 00:23:27,250
do it, you should look at the Cordova code base.

00:23:27,250 --> 00:23:31,790
There's a lot of things that looked at device integration.

00:23:31,790 --> 00:23:36,260
Here we write some of the typical code you would

00:23:36,260 --> 00:23:40,720
write in an Android app for dispatching the camera intent, looking at whether

00:23:40,720 --> 00:23:49,020
you want a camera or gallery, we create a URI out of our image, or we could do

00:23:49,020 --> 00:23:52,070
something like upload it at that point in time.

00:23:52,070 --> 00:23:56,480
And then we actually post it in this super awesome hacky JavaScript window

00:23:56,480 --> 00:23:57,990
thing.

00:23:57,990 --> 00:24:02,762
We actually post it to a method in JavaScript, we post the URI, and then all

00:24:02,762 --> 00:24:06,140
of a sudden we can use it in our JavaScript.

00:24:06,140 --> 00:24:11,640
So it seems totally terrible, but hey -- you get an understanding of how Android

00:24:11,640 --> 00:24:14,360
is receiving the camera intent.

00:24:14,360 --> 00:24:17,929
You get an understanding of what you can do in terms of compression.

00:24:17,929 --> 00:24:20,409
You get to be a lot closer to your device than you

00:24:20,409 --> 00:24:23,630
ever would be using some web API or just saying...

00:24:23,630 --> 00:24:27,140
Well, we can't support camera.

00:24:27,140 --> 00:24:28,210
So what else?

00:24:28,210 --> 00:24:30,510
There's lots of things you can do.

00:24:30,510 --> 00:24:32,830
You can bind to Android's offline network caching

00:24:32,830 --> 00:24:33,830
utilities.

00:24:33,830 --> 00:24:37,190
You know, if you want to do that -- before service workers are

00:24:37,190 --> 00:24:38,190
available.

00:24:38,190 --> 00:24:41,559
You can hook into some native gestures, so you could actually read

00:24:41,559 --> 00:24:44,900
gestures on the Android side and post them into JavaScript.

00:24:44,900 --> 00:24:47,240
If you want to do things like pinch zooms or swipes that are

00:24:47,240 --> 00:24:49,720
much better architected in the Android platform.

00:24:49,720 --> 00:24:53,360
And of course, you can do lots of device integration, like

00:24:53,360 --> 00:24:54,840
push notifications or whatever you want.

00:24:54,840 --> 00:24:56,159
And really, it's up to you.

00:24:56,159 --> 00:24:57,600
Because it's your browser.

00:24:57,600 --> 00:24:59,480
Well, it's your user agent.

00:24:59,480 --> 00:25:00,480
So...

00:25:00,480 --> 00:25:05,610
The truth is I'm not really sure any of this is going to be actually

00:25:05,610 --> 00:25:07,080
successful.

00:25:07,080 --> 00:25:10,260
Or even that it's reasonable or possible to make fundamental

00:25:10,260 --> 00:25:14,490
changes to the mobile web in this way that works.

00:25:14,490 --> 00:25:20,220
But what I am certain of is if you don't try bold, native things -- naive

00:25:20,220 --> 00:25:23,350
things, and develop a better understanding of the platform you're building

00:25:23,350 --> 00:25:26,549
for, you know, if all you're doing is pushing up against the edges of the

00:25:26,549 --> 00:25:29,520
browser, things are not going to change.

00:25:29,520 --> 00:25:33,270
No one is going to fix the web but you, and your understanding of your

00:25:33,270 --> 00:25:36,799
real problems.

00:25:36,799 --> 00:25:41,320
So I want to end with something inspired by my dad.

00:25:41,320 --> 00:25:43,440
This is my dad.

00:25:43,440 --> 00:25:47,149
Because one, he was pretty much the coolest engineer I've ever met in my

00:25:47,149 --> 00:25:48,419
life.

00:25:48,419 --> 00:25:53,120
And two, because Friday would have been his 71st birthday.

00:25:53,120 --> 00:25:58,090
So happy birthday, dad.

00:25:58,090 --> 00:25:59,720
Thanks.

00:25:59,720 --> 00:26:02,490
So my dad was totally self-taught.

00:26:02,490 --> 00:26:05,799
He was an amateur radio hacker, and he also designed some really,

00:26:05,799 --> 00:26:10,720
really cool radical electronics equipment back in the '60s, '70s,

00:26:10,720 --> 00:26:11,980
and '80s.

00:26:11,980 --> 00:26:14,630
He worked with a lot of people who had engineering degrees, and

00:26:14,630 --> 00:26:18,559
one of the things he said all the time was -- for all their education and understanding

00:26:18,559 --> 00:26:22,250
of theory, a lot of people just didn't really get what good engineering

00:26:22,250 --> 00:26:24,270
was.

00:26:24,270 --> 00:26:26,370
Good engineering.

00:26:26,370 --> 00:26:31,090
Because to my dad, really good engineering was finding adequate solutions to

00:26:31,090 --> 00:26:32,970
problems that really matter to people.

00:26:32,970 --> 00:26:37,740
In a way that someone in the future, who's smarter and better than you can understand

00:26:37,740 --> 00:26:39,710
and improve on.

00:26:39,710 --> 00:26:42,250
And as long as you're okay with the fact that the web

00:26:42,250 --> 00:26:46,940
is always going to be this patchwork, open, weird, somewhat hacky, totally

00:26:46,940 --> 00:26:50,440
imperfect thing, as long as you're willing to think about it and build

00:26:50,440 --> 00:26:55,929
for the real world around you, and not for what the platform tells you to do,

00:26:55,929 --> 00:26:58,000
you're probably going to make something great.

00:26:58,000 --> 00:27:00,960
You know, for the 500 things that suck and are terrible,

00:27:00,960 --> 00:27:03,680
you're going to make something great.

00:27:03,680 --> 00:27:05,370
And if the talks we have lined up...

00:27:05,370 --> 00:27:07,860
You know, in the next few days, are any indication

00:27:07,860 --> 00:27:10,929
of what people think about that, I think we're going to be fine.

00:27:10,929 --> 00:27:13,220
So hack the good hack, my friends.

00:27:13,220 --> 00:27:14,270

YouTube URL: https://www.youtube.com/watch?v=Y4ZTRztwLrg


