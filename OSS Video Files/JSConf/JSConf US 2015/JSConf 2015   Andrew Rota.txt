Title: JSConf 2015   Andrew Rota
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	
Captions: 
	00:00:13,910 --> 00:00:18,750
hey thanks everyone for coming out my

00:00:16,470 --> 00:00:22,380
name is Andrew as my colleague I'm

00:00:18,750 --> 00:00:24,510
critics of augie and as I mentioned we

00:00:22,380 --> 00:00:26,010
work out wayfair.com up in Boston and

00:00:24,510 --> 00:00:27,330
there are some things that I think are

00:00:26,010 --> 00:00:30,470
important to understand about Wayfarer

00:00:27,330 --> 00:00:33,329
in the context of this presentation so

00:00:30,470 --> 00:00:36,180
we're an online destination for all

00:00:33,329 --> 00:00:38,130
things home so ecommerce site for

00:00:36,180 --> 00:00:40,470
furniture and home goods mostly we have

00:00:38,130 --> 00:00:42,000
a lot of products over 7 million 7,000

00:00:40,470 --> 00:00:46,200
plus suppliers to have a very large data

00:00:42,000 --> 00:00:47,310
set we've been around since 2002 so the

00:00:46,200 --> 00:00:48,930
weight name wayfair is actually a little

00:00:47,310 --> 00:00:51,600
newer we kind of rebranded a few years

00:00:48,930 --> 00:00:53,040
ago but we've been around for a while

00:00:51,600 --> 00:00:55,860
and our code base has been around for a

00:00:53,040 --> 00:00:57,450
while we have several large websites

00:00:55,860 --> 00:00:59,310
wayfair.com being the main one but they

00:00:57,450 --> 00:01:00,570
all run on the shared code base so the

00:00:59,310 --> 00:01:03,960
most part all our products share the

00:01:00,570 --> 00:01:06,570
same code and that code is a PHP

00:01:03,960 --> 00:01:09,030
back-end custom-built ecommerce platform

00:01:06,570 --> 00:01:11,640
in MVC platform millions lines of code

00:01:09,030 --> 00:01:15,900
thousands of JavaScript modules so it's

00:01:11,640 --> 00:01:18,750
an extensive code base right performance

00:01:15,900 --> 00:01:20,220
matters right I know it's obviously not

00:01:18,750 --> 00:01:22,590
probably all if you know it but I'm just

00:01:20,220 --> 00:01:24,210
gonna say it anyway so a

00:01:22,590 --> 00:01:26,220
high-performance app can lead to a

00:01:24,210 --> 00:01:28,620
better customer experience that in turn

00:01:26,220 --> 00:01:33,390
probably leads to better revenue right

00:01:28,620 --> 00:01:35,640
and that's kind of important so in order

00:01:33,390 --> 00:01:37,170
to get this high performance we are kind

00:01:35,640 --> 00:01:42,000
of doing some things on the server side

00:01:37,170 --> 00:01:43,229
keys yeah so we have abused mustache in

00:01:42,000 --> 00:01:46,350
PHP on the server side and we're

00:01:43,229 --> 00:01:49,890
actually rendering this stuff with a C++

00:01:46,350 --> 00:01:52,979
extension and that's like super fast we

00:01:49,890 --> 00:01:55,590
also lazy load most of our non-critical

00:01:52,979 --> 00:01:57,780
images like stop below the fold be these

00:01:55,590 --> 00:02:00,090
load data and also like some j/s modules

00:01:57,780 --> 00:02:01,979
for example if you have a modal that you

00:02:00,090 --> 00:02:04,020
want to show and until you actually show

00:02:01,979 --> 00:02:06,810
it we don't load the j/s for it right so

00:02:04,020 --> 00:02:08,280
we also do some intelligent bundling on

00:02:06,810 --> 00:02:13,470
the JavaScript side for cash

00:02:08,280 --> 00:02:15,569
optimizations yeah so we're doing a lot

00:02:13,470 --> 00:02:16,620
of things right in terms performance but

00:02:15,569 --> 00:02:18,810
there was always room for improvement

00:02:16,620 --> 00:02:21,420
and as our pages became more and more

00:02:18,810 --> 00:02:22,530
interactive we realized that the area

00:02:21,420 --> 00:02:25,450
where we can improve the most of the

00:02:22,530 --> 00:02:27,099
client side so we were using backbone

00:02:25,450 --> 00:02:28,959
on the client and some backbone works

00:02:27,099 --> 00:02:30,519
with jquery out of box to do all your

00:02:28,959 --> 00:02:32,470
rendering and so this is sort of a

00:02:30,519 --> 00:02:35,440
standard render method and backbone you

00:02:32,470 --> 00:02:37,840
implement your own render methods so in

00:02:35,440 --> 00:02:39,970
this method basically just taking the

00:02:37,840 --> 00:02:42,040
element for a review using the jquery

00:02:39,970 --> 00:02:44,860
object for that that's been pre-selected

00:02:42,040 --> 00:02:47,400
for us and we're using jquery to HTML to

00:02:44,860 --> 00:02:50,680
pass in our new string for our HTML

00:02:47,400 --> 00:02:52,420
that's acquired by using our template

00:02:50,680 --> 00:02:53,799
function that we free compiled calling

00:02:52,420 --> 00:02:55,480
render on it and passing in our data and

00:02:53,799 --> 00:02:57,730
this was fine but they're a couple of

00:02:55,480 --> 00:03:00,580
problems with it one being we tend to

00:02:57,730 --> 00:03:02,049
over render so maybe only part of our

00:03:00,580 --> 00:03:04,569
view changes maybe we're only changing a

00:03:02,049 --> 00:03:06,130
class name or a text node but what we're

00:03:04,569 --> 00:03:07,900
doing here in sort of a naive render

00:03:06,130 --> 00:03:09,849
method is work rerun during everything

00:03:07,900 --> 00:03:11,319
we read running that view no matter what

00:03:09,849 --> 00:03:13,480
changed in fact we're rerunning that

00:03:11,319 --> 00:03:14,950
view even if nothing changed so even if

00:03:13,480 --> 00:03:17,049
nothing changed on our view maybe if

00:03:14,950 --> 00:03:18,880
we're calling render whenever our data

00:03:17,049 --> 00:03:21,760
model changes which is a common pattern

00:03:18,880 --> 00:03:23,410
and now we're rerender even we don't

00:03:21,760 --> 00:03:26,730
need to we're hitting the Damas we don't

00:03:23,410 --> 00:03:28,930
have to and that became problematic oh

00:03:26,730 --> 00:03:31,209
the other end of this the kind of

00:03:28,930 --> 00:03:32,609
compensate for this is well devs would

00:03:31,209 --> 00:03:35,470
just use kind of precise Dom

00:03:32,609 --> 00:03:37,420
manipulations so we might take our our

00:03:35,470 --> 00:03:40,620
jQuery object here and just call add

00:03:37,420 --> 00:03:45,549
class on it so that's fine it's a fast a

00:03:40,620 --> 00:03:47,319
problem is that this does not scale it's

00:03:45,549 --> 00:03:49,329
not maintainable as an architecture we

00:03:47,319 --> 00:03:52,720
started realizing that parts of our code

00:03:49,329 --> 00:03:54,340
base ended up being filled with these

00:03:52,720 --> 00:03:55,690
direct Dom manipulations and it was very

00:03:54,340 --> 00:03:58,690
hard to reason about the state of our

00:03:55,690 --> 00:04:00,190
application at any one time I'm in

00:03:58,690 --> 00:04:01,389
addition to that you know devs have to

00:04:00,190 --> 00:04:03,880
think about kind of low level

00:04:01,389 --> 00:04:05,920
performance you know this would always

00:04:03,880 --> 00:04:07,269
come up in a code review and you guys

00:04:05,920 --> 00:04:08,739
all work with JavaScript probably every

00:04:07,269 --> 00:04:10,690
day so maybe you're familiar with this

00:04:08,739 --> 00:04:11,889
you know that jQuery empty is actually a

00:04:10,690 --> 00:04:15,069
lot faster than passing in an empty

00:04:11,889 --> 00:04:16,329
string to jquery HTML but that's not

00:04:15,069 --> 00:04:18,459
something that all our full stack devs

00:04:16,329 --> 00:04:20,380
were aware of and it's not something

00:04:18,459 --> 00:04:21,760
they should have to be aware of and so

00:04:20,380 --> 00:04:23,200
you know you'd end up with all these

00:04:21,760 --> 00:04:24,520
little petty comments and code reviews

00:04:23,200 --> 00:04:26,770
like this is faster than this this is

00:04:24,520 --> 00:04:28,330
faster than this and that just we wanted

00:04:26,770 --> 00:04:30,010
a better abstraction for that we didn't

00:04:28,330 --> 00:04:31,180
want to have to have devs have to worry

00:04:30,010 --> 00:04:32,710
about this sort of low level down

00:04:31,180 --> 00:04:37,150
performance when they're writing their

00:04:32,710 --> 00:04:38,080
code so what do we do now yeah that was

00:04:37,150 --> 00:04:39,100
a good question and that was a question

00:04:38,080 --> 00:04:41,380
that kind of face

00:04:39,100 --> 00:04:42,700
our team how can we improve the

00:04:41,380 --> 00:04:46,750
client-side performance that we have

00:04:42,700 --> 00:04:48,940
within our current stack and you know i

00:04:46,750 --> 00:04:51,820
think the the interesting solution was

00:04:48,940 --> 00:04:52,900
let's just rewrite everything there are

00:04:51,820 --> 00:04:54,730
some really great libraries out there

00:04:52,900 --> 00:04:56,140
right we we started looking around and

00:04:54,730 --> 00:04:57,910
we could have rear end to ember because

00:04:56,140 --> 00:05:00,280
members really cool now and it has

00:04:57,910 --> 00:05:03,520
glimmer so it's kind of fast and there's

00:05:00,280 --> 00:05:04,960
really great community there were some

00:05:03,520 --> 00:05:05,890
cool things going on with angular and we

00:05:04,960 --> 00:05:07,840
could have decided you know we're going

00:05:05,890 --> 00:05:09,430
to rewrite to angular 2 and we'll do

00:05:07,840 --> 00:05:11,590
that this summer and it'll be it'll be a

00:05:09,430 --> 00:05:12,910
project but at the end of the day we'll

00:05:11,590 --> 00:05:16,930
have this this cool angular app for

00:05:12,910 --> 00:05:19,450
everything to be honest what excited us

00:05:16,930 --> 00:05:21,520
the most was react so we looked at react

00:05:19,450 --> 00:05:22,810
and we're like this is great if I were

00:05:21,520 --> 00:05:24,760
starting a side project like this is

00:05:22,810 --> 00:05:27,490
exactly what I would use why don't we

00:05:24,760 --> 00:05:29,200
just rewrite everything to react and I

00:05:27,490 --> 00:05:30,810
think if the dev it's really exciting to

00:05:29,200 --> 00:05:33,370
like look at this and go you know

00:05:30,810 --> 00:05:34,420
imagine a greenfield project or we have

00:05:33,370 --> 00:05:37,060
a legacy co-pay let's just delete

00:05:34,420 --> 00:05:38,680
everything and rewrite it again but this

00:05:37,060 --> 00:05:40,360
thing like the worst mistake that you

00:05:38,680 --> 00:05:41,710
can make is actually writing entire

00:05:40,360 --> 00:05:45,910
thing they even Joe is polski agrees

00:05:41,710 --> 00:05:48,580
with me so I it's problematic and that's

00:05:45,910 --> 00:05:50,140
disappointing um I think it's devs we

00:05:48,580 --> 00:05:53,170
like want to take kind of new and shiny

00:05:50,140 --> 00:05:54,730
yeah libraries and just use them and so

00:05:53,170 --> 00:05:58,150
we're sort of told we can't at that's

00:05:54,730 --> 00:06:00,190
that's disappointing rewrites

00:05:58,150 --> 00:06:01,720
unexpensive i mean like it did it so

00:06:00,190 --> 00:06:03,070
much time like you have to actually stop

00:06:01,720 --> 00:06:04,840
all future development you can't really

00:06:03,070 --> 00:06:07,510
like you know like your project does not

00:06:04,840 --> 00:06:08,560
progress so and most of the times you

00:06:07,510 --> 00:06:09,910
actually never get done with it because

00:06:08,560 --> 00:06:12,880
it because of all these problems right

00:06:09,910 --> 00:06:18,340
and without actual tests like you're

00:06:12,880 --> 00:06:20,140
going to break a lot of stuff right yeah

00:06:18,340 --> 00:06:24,060
so the alternative is working with

00:06:20,140 --> 00:06:26,500
legacy code which is is not really fun

00:06:24,060 --> 00:06:28,060
it's it's an idea when I look at it

00:06:26,500 --> 00:06:30,130
that's that isn't that attractive

00:06:28,060 --> 00:06:32,290
particularly for a lot of these

00:06:30,130 --> 00:06:34,150
characteristics of legacy code bases so

00:06:32,290 --> 00:06:37,150
legacy code bases mean you need to work

00:06:34,150 --> 00:06:38,620
in the existing tech stack and those

00:06:37,150 --> 00:06:41,080
might be text acts that grew organically

00:06:38,620 --> 00:06:41,920
over a lot of years like ours where that

00:06:41,080 --> 00:06:43,960
you know they're a little bit quirky

00:06:41,920 --> 00:06:45,040
there are parts of it that you know if I

00:06:43,960 --> 00:06:46,960
were to start again today maybe I

00:06:45,040 --> 00:06:48,729
wouldn't do it that way there certainly

00:06:46,960 --> 00:06:49,870
were reasons that that that happened

00:06:48,729 --> 00:06:51,580
whether they be a historical or whether

00:06:49,870 --> 00:06:54,300
they be you know unique to the problem

00:06:51,580 --> 00:06:54,300
space that we are solving

00:06:54,629 --> 00:06:58,750
it means that you have to use old

00:06:56,710 --> 00:07:00,340
frameworks and libraries and this

00:06:58,750 --> 00:07:02,770
doesn't mean bad frameworks or libraries

00:07:00,340 --> 00:07:04,270
it just means things that are older in

00:07:02,770 --> 00:07:05,740
some spaces this is good but it also

00:07:04,270 --> 00:07:08,680
means that you know there might be a

00:07:05,740 --> 00:07:10,090
community around or there might not they

00:07:08,680 --> 00:07:11,440
might have the newest technology or they

00:07:10,090 --> 00:07:14,340
might not but you have a lot of code

00:07:11,440 --> 00:07:16,330
existing already in these environments

00:07:14,340 --> 00:07:19,270
and means you have to work with

00:07:16,330 --> 00:07:21,460
technical debt all applications have

00:07:19,270 --> 00:07:22,900
technical debt and so when you have to

00:07:21,460 --> 00:07:23,919
dive into your legacy code it means you

00:07:22,900 --> 00:07:25,960
have to look at that and kind of face

00:07:23,919 --> 00:07:27,930
that head-on and none of this is

00:07:25,960 --> 00:07:30,789
attractive i think to to front end dev

00:07:27,930 --> 00:07:32,710
but i think one of the most important

00:07:30,789 --> 00:07:36,580
things about legacy code base is that it

00:07:32,710 --> 00:07:41,080
actually works right i mean this is this

00:07:36,580 --> 00:07:44,199
is amazing code by by Hendrick who's the

00:07:41,080 --> 00:07:46,210
creator of ampersand I really like it

00:07:44,199 --> 00:07:47,500
like he says that you don't really have

00:07:46,210 --> 00:07:49,960
to burn down your whole house if you

00:07:47,500 --> 00:07:51,490
want to remodel the kitchen right so I

00:07:49,960 --> 00:07:53,530
mean I think that's a great analogy to

00:07:51,490 --> 00:07:54,639
software development and I really like

00:07:53,530 --> 00:07:55,990
my living room I really like the

00:07:54,639 --> 00:08:01,020
bathroom and I I mean I really like all

00:07:55,990 --> 00:08:03,159
the other rooms in my house right so so

00:08:01,020 --> 00:08:06,460
so we have a lot of good things that are

00:08:03,159 --> 00:08:09,190
going for us right so we also have views

00:08:06,460 --> 00:08:10,630
shared templates so we actually have

00:08:09,190 --> 00:08:13,900
masters champion sort of shared on the

00:08:10,630 --> 00:08:17,740
server side and the client side so we

00:08:13,900 --> 00:08:18,940
like that part we we have a very fast

00:08:17,740 --> 00:08:22,949
server side rendering because we use

00:08:18,940 --> 00:08:25,719
like a c++ extension for mustache on PHP

00:08:22,949 --> 00:08:27,400
we also have a lot of existing backbone

00:08:25,719 --> 00:08:29,770
components so for example like you know

00:08:27,400 --> 00:08:30,909
Garrison's more to the syndics lag so we

00:08:29,770 --> 00:08:35,800
don't want to get rid of those so we

00:08:30,909 --> 00:08:37,120
really like all of that stuff but there

00:08:35,800 --> 00:08:38,740
are things that we liked that were out

00:08:37,120 --> 00:08:40,270
there already there were things that

00:08:38,740 --> 00:08:42,250
were like we like better in libraries

00:08:40,270 --> 00:08:43,719
that had been built in the last few

00:08:42,250 --> 00:08:47,529
years that really sources of innovation

00:08:43,719 --> 00:08:48,850
and they're inspiring for us so as our

00:08:47,529 --> 00:08:50,680
application again became more more

00:08:48,850 --> 00:08:52,720
interactive fast client side rendering

00:08:50,680 --> 00:08:54,910
was really attractive and we looked at

00:08:52,720 --> 00:08:55,839
libraries out there that were a lot

00:08:54,910 --> 00:08:57,399
better than what we were doing right now

00:08:55,839 --> 00:08:59,230
one of the big piece of this was using

00:08:57,399 --> 00:09:00,490
virtual Dom this idea that we could do a

00:08:59,230 --> 00:09:01,839
deafening ever DOM and memory not

00:09:00,490 --> 00:09:04,120
actually have to hit it on until we need

00:09:01,839 --> 00:09:06,279
to and be able to batch and do precise

00:09:04,120 --> 00:09:06,850
Dom updates with an abstraction that was

00:09:06,279 --> 00:09:11,560
a

00:09:06,850 --> 00:09:13,300
was a lot easier to deal with we liked

00:09:11,560 --> 00:09:15,430
this idea that we didn't have to do Dom

00:09:13,300 --> 00:09:17,860
manipulation with a lot of these new

00:09:15,430 --> 00:09:19,269
frameworks we really didn't want our

00:09:17,860 --> 00:09:21,550
devs having to work with the Dom

00:09:19,269 --> 00:09:22,990
directly it was not a scalable

00:09:21,550 --> 00:09:24,670
architecture it was not maintainable and

00:09:22,990 --> 00:09:26,470
it ended up with a lot of the messes and

00:09:24,670 --> 00:09:27,639
the bugs that had to work with and we

00:09:26,470 --> 00:09:28,959
ended up having to like search down

00:09:27,639 --> 00:09:30,160
these obscure bugs like you see

00:09:28,959 --> 00:09:32,350
something change on the page but you

00:09:30,160 --> 00:09:33,639
don't know what changed it may be the

00:09:32,350 --> 00:09:37,300
dom break point is helpful maybe it

00:09:33,639 --> 00:09:39,579
isn't and so that can be a particularly

00:09:37,300 --> 00:09:41,259
challenging so what do we do it all

00:09:39,579 --> 00:09:45,639
again it seems to be a recurring

00:09:41,259 --> 00:09:47,529
question sure it was so we looked at

00:09:45,639 --> 00:09:49,329
what we had we looked at what was out

00:09:47,529 --> 00:09:51,459
there and we're kind of faced with a

00:09:49,329 --> 00:09:54,730
dilemma it really wasn't feasible to

00:09:51,459 --> 00:09:56,019
rewrite everything we had but it wasn't

00:09:54,730 --> 00:09:58,240
feasible to keep going down the path

00:09:56,019 --> 00:10:01,209
that we were going and so we decided to

00:09:58,240 --> 00:10:04,060
kind of take some advice from that idea

00:10:01,209 --> 00:10:06,639
of modularity to take this idea that we

00:10:04,060 --> 00:10:09,339
can look at the individual pieces of our

00:10:06,639 --> 00:10:11,980
application the ones that we like the

00:10:09,339 --> 00:10:13,990
ones that we wanted to swap out and do

00:10:11,980 --> 00:10:15,160
that on a library by library basis and

00:10:13,990 --> 00:10:16,389
there are a lot of really interesting

00:10:15,160 --> 00:10:22,269
libraries out there that we could do

00:10:16,389 --> 00:10:23,500
that with and so we ended up looking for

00:10:22,269 --> 00:10:25,870
libraries that would take all these

00:10:23,500 --> 00:10:27,610
pieces that we wanted so the first thing

00:10:25,870 --> 00:10:29,589
that we did was look for a better way to

00:10:27,610 --> 00:10:31,060
precompiler mustache templates there's

00:10:29,589 --> 00:10:33,759
this library out of the Guardian called

00:10:31,060 --> 00:10:35,920
reactive and r actives kind of made for

00:10:33,759 --> 00:10:37,750
it for as a client-side framework and it

00:10:35,920 --> 00:10:39,370
was cool we weren't as interested in

00:10:37,750 --> 00:10:40,870
some of the API pieces in the front and

00:10:39,370 --> 00:10:43,089
side of it but we realize is that we

00:10:40,870 --> 00:10:45,040
could pull out the compiler that they

00:10:43,089 --> 00:10:47,019
were using for mustache templates and

00:10:45,040 --> 00:10:48,670
use that on our server when we pre

00:10:47,019 --> 00:10:51,550
compile our templates to compile them to

00:10:48,670 --> 00:10:55,180
objects rather than strings so we did

00:10:51,550 --> 00:10:58,089
that we swapped out our compiler on the

00:10:55,180 --> 00:10:59,889
server side then we went to this idea of

00:10:58,089 --> 00:11:01,810
virtual Dom there's this library called

00:10:59,889 --> 00:11:04,449
mercury it's sort of a smaller library

00:11:01,810 --> 00:11:07,420
have some of the same ideas of using

00:11:04,449 --> 00:11:10,120
virtual Dom but it decouples its virtual

00:11:07,420 --> 00:11:11,230
Dom library has its own module which was

00:11:10,120 --> 00:11:12,610
cool so we could actually pull this

00:11:11,230 --> 00:11:14,470
library again we really weren't as

00:11:12,610 --> 00:11:15,939
interested in the API on Mercury it

00:11:14,470 --> 00:11:20,260
didn't have the mustache templates that

00:11:15,939 --> 00:11:20,980
we wanted for for writing our markup but

00:11:20,260 --> 00:11:22,720
it didn't have this

00:11:20,980 --> 00:11:24,399
core functionality for dipping and

00:11:22,720 --> 00:11:26,529
patching that we needed on the client

00:11:24,399 --> 00:11:30,490
side and so we use that along with our

00:11:26,529 --> 00:11:32,500
active precompile templates to do our

00:11:30,490 --> 00:11:34,029
differing on the plan and then we use

00:11:32,500 --> 00:11:36,850
backbone which we are already using

00:11:34,029 --> 00:11:38,440
across our code base to do our normal

00:11:36,850 --> 00:11:40,600
event finding and handle our data layer

00:11:38,440 --> 00:11:42,430
we added a few features into this so we

00:11:40,600 --> 00:11:45,250
actually had an event global event

00:11:42,430 --> 00:11:46,839
handler similar to to react the handle

00:11:45,250 --> 00:11:48,100
virtual events so bind all events in one

00:11:46,839 --> 00:11:49,959
place as opposed to binding them all

00:11:48,100 --> 00:11:53,350
around our document and delegating from

00:11:49,959 --> 00:11:56,740
there we wrote an integration library to

00:11:53,350 --> 00:11:58,990
pull this all together we call that

00:11:56,740 --> 00:12:01,870
library at tungsten we open source it a

00:11:58,990 --> 00:12:04,360
couple months ago so that was kind of

00:12:01,870 --> 00:12:06,459
exciting and it's certainly not

00:12:04,360 --> 00:12:07,870
something that will fit into you know

00:12:06,459 --> 00:12:09,760
everyone's texts at but it made a lot of

00:12:07,870 --> 00:12:11,680
sense for us it made a lot of sense for

00:12:09,760 --> 00:12:13,240
us because at its core it has this idea

00:12:11,680 --> 00:12:15,010
of modularity that it wants to be able

00:12:13,240 --> 00:12:17,290
to have the ability to swap out

00:12:15,010 --> 00:12:19,240
different pieces so for example we're

00:12:17,290 --> 00:12:21,519
using the virtual Dom library from the

00:12:19,240 --> 00:12:23,110
mercury project but we have an adapter

00:12:21,519 --> 00:12:25,120
so that we can swap in any virtual Dom

00:12:23,110 --> 00:12:26,230
library that we want and we benchmarked

00:12:25,120 --> 00:12:28,029
it with different implementations in the

00:12:26,230 --> 00:12:29,920
past and that's something that we can do

00:12:28,029 --> 00:12:32,079
if you know if something comes down the

00:12:29,920 --> 00:12:35,410
line a few years from now and we want to

00:12:32,079 --> 00:12:37,779
pull in it uses backbone in our code

00:12:35,410 --> 00:12:39,370
base but that's set a separate layer so

00:12:37,779 --> 00:12:41,290
we're not where'd you where D couple

00:12:39,370 --> 00:12:42,490
from backbone itself and we have

00:12:41,290 --> 00:12:44,380
implementations and other form in

00:12:42,490 --> 00:12:46,149
frameworks as well so that's certainly

00:12:44,380 --> 00:12:47,680
something as we look like how we want to

00:12:46,149 --> 00:12:50,050
handle our data on the client side and

00:12:47,680 --> 00:12:51,730
maybe how we want to use an API for

00:12:50,050 --> 00:12:53,319
building out our views we can change

00:12:51,730 --> 00:12:56,680
that down the line without replacing the

00:12:53,319 --> 00:12:58,480
whole thing and so what we're able to do

00:12:56,680 --> 00:13:00,010
is is write something that really worked

00:12:58,480 --> 00:13:03,430
for us and work within our tech stack

00:13:00,010 --> 00:13:05,670
and I think at the start of it we're

00:13:03,430 --> 00:13:07,810
sort of afraid of writing something new

00:13:05,670 --> 00:13:09,670
you know there's the not invented here

00:13:07,810 --> 00:13:10,990
syndrome right that you know we need

00:13:09,670 --> 00:13:12,730
need to just write everything in house

00:13:10,990 --> 00:13:15,160
and that's very that's very true a lot

00:13:12,730 --> 00:13:17,529
of places i'm sure ourselves included to

00:13:15,160 --> 00:13:18,550
some extent we write a lot of stuff

00:13:17,529 --> 00:13:20,470
in-house and maybe we could use

00:13:18,550 --> 00:13:21,730
externally I'm that being said I think

00:13:20,470 --> 00:13:23,440
there's there's kind of the opposite end

00:13:21,730 --> 00:13:24,699
of that there are teams that don't want

00:13:23,440 --> 00:13:26,560
to write anything because they're afraid

00:13:24,699 --> 00:13:28,329
that you know they couldn't do it as

00:13:26,560 --> 00:13:31,000
well as as anything else that out there

00:13:28,329 --> 00:13:33,040
and maybe they couldn't but you all have

00:13:31,000 --> 00:13:34,209
like unique problems a lot of us are

00:13:33,040 --> 00:13:36,819
facing very interesting

00:13:34,209 --> 00:13:38,740
for us it was that we're not a single

00:13:36,819 --> 00:13:39,999
page app we weren't going to be there a

00:13:38,740 --> 00:13:42,490
lot of reasons that we couldn't switch

00:13:39,999 --> 00:13:44,829
to a single page app SEO just being one

00:13:42,490 --> 00:13:46,480
of them and that's certainly changing

00:13:44,829 --> 00:13:47,980
but even that aside I think there's

00:13:46,480 --> 00:13:50,079
something to be said for delivering a

00:13:47,980 --> 00:13:52,600
page that's a fully render to our user a

00:13:50,079 --> 00:13:54,040
page that progressively falls back and

00:13:52,600 --> 00:13:55,029
works with our JavaScript which is

00:13:54,040 --> 00:13:58,449
something that was very important to us

00:13:55,029 --> 00:14:01,629
as well so all of these kind of features

00:13:58,449 --> 00:14:03,730
made us a little bit more unique I think

00:14:01,629 --> 00:14:08,800
then some of your normal single page

00:14:03,730 --> 00:14:10,660
applications there's this also this idea

00:14:08,800 --> 00:14:12,369
that we discovered of using existing

00:14:10,660 --> 00:14:14,499
infrastructure and this is a picture of

00:14:12,369 --> 00:14:16,959
barbed wire fence and I read this really

00:14:14,499 --> 00:14:18,550
cool story a few months ago and it's

00:14:16,959 --> 00:14:20,529
that at the early part of the 20th

00:14:18,550 --> 00:14:23,649
century as telephone was sort of making

00:14:20,529 --> 00:14:25,259
its way across the United States it was

00:14:23,649 --> 00:14:27,069
really expensive tool a new wires

00:14:25,259 --> 00:14:28,119
especially in parts of the country that

00:14:27,069 --> 00:14:29,860
were vast and there were there were

00:14:28,119 --> 00:14:32,139
large distances between these houses and

00:14:29,860 --> 00:14:35,499
so in the Great Plains in the American

00:14:32,139 --> 00:14:37,869
West we had whole swathes of land that

00:14:35,499 --> 00:14:39,309
just wasn't affordable to lay new

00:14:37,869 --> 00:14:41,049
telephone wires the telephone companies

00:14:39,309 --> 00:14:43,420
just weren't interested in it because it

00:14:41,049 --> 00:14:49,360
was just way too expensive and so what

00:14:43,420 --> 00:14:50,709
farmers did in a very I think in a way

00:14:49,360 --> 00:14:52,569
that's similar to you how hackers

00:14:50,709 --> 00:14:54,790
approach problems is they looked at what

00:14:52,569 --> 00:14:56,410
they had already they had a lot of these

00:14:54,790 --> 00:14:57,850
bribed wire fences that actually join

00:14:56,410 --> 00:14:59,290
entire farm so that they could separate

00:14:57,850 --> 00:15:01,720
land and that's how they kept animals

00:14:59,290 --> 00:15:03,879
from roaming between farms and they

00:15:01,720 --> 00:15:05,649
realized that you know the

00:15:03,879 --> 00:15:08,199
infrastructure was already there they

00:15:05,649 --> 00:15:10,839
could leverage those barbed wires to

00:15:08,199 --> 00:15:13,360
actually transmit telephone signals

00:15:10,839 --> 00:15:16,149
across large areas of land without

00:15:13,360 --> 00:15:17,980
having to build anything new and so

00:15:16,149 --> 00:15:19,029
that's what they did these groups of

00:15:17,980 --> 00:15:23,879
farmers just came together and they

00:15:19,029 --> 00:15:23,879
started implementing a telephone

00:15:23,999 --> 00:15:28,990
infrastructure through their existing

00:15:26,049 --> 00:15:30,189
barbed wire fences and this was really

00:15:28,990 --> 00:15:32,139
interesting to me because I looked at

00:15:30,189 --> 00:15:33,759
this and I said you know it's not

00:15:32,139 --> 00:15:35,679
perfect like maybe the signal was a

00:15:33,759 --> 00:15:37,569
little bit worse maybe they had to

00:15:35,679 --> 00:15:39,069
maintain it a little bit more but at the

00:15:37,569 --> 00:15:40,779
end of the day they had a telephone

00:15:39,069 --> 00:15:42,549
service that they just weren't going to

00:15:40,779 --> 00:15:43,720
get otherwise and sure it would have

00:15:42,549 --> 00:15:46,149
been great if they could have gotten new

00:15:43,720 --> 00:15:47,649
new telephone poles and in strong up new

00:15:46,149 --> 00:15:49,689
brand new copper across the whole

00:15:47,649 --> 00:15:52,180
but that wasn't going to happen for

00:15:49,689 --> 00:15:53,980
years and it wasn't affordable and it

00:15:52,180 --> 00:15:56,470
was far too expensive and that sounded

00:15:53,980 --> 00:15:58,990
really familiar so you know what we were

00:15:56,470 --> 00:16:01,720
able to do is take the existing

00:15:58,990 --> 00:16:04,119
infrastructure that we had with its good

00:16:01,720 --> 00:16:05,920
parts and with its bad parts and write

00:16:04,119 --> 00:16:11,069
something new that gave us the features

00:16:05,920 --> 00:16:14,920
that we wanted so that's something and

00:16:11,069 --> 00:16:19,899
so I'm just going to show some demos

00:16:14,920 --> 00:16:23,139
here how many of you have seen the DB

00:16:19,899 --> 00:16:25,300
monster demo implementation all right so

00:16:23,139 --> 00:16:28,899
a few of you I'm just going to pull one

00:16:25,300 --> 00:16:31,540
up here so this is DB monster and

00:16:28,899 --> 00:16:33,730
angular and Ryan Florence demoed this at

00:16:31,540 --> 00:16:37,480
recomp this year and it's just a really

00:16:33,730 --> 00:16:39,610
basic application that updates this set

00:16:37,480 --> 00:16:42,639
of this table sort of simulate the idea

00:16:39,610 --> 00:16:45,550
of a database monitoring question

00:16:42,639 --> 00:16:47,679
monitoring out and so we have data

00:16:45,550 --> 00:16:50,019
that's changing very quickly and we have

00:16:47,679 --> 00:16:53,860
hundreds of rows which for some

00:16:50,019 --> 00:16:56,499
applications might be the case so if you

00:16:53,860 --> 00:16:57,939
have very you have a lot of database

00:16:56,499 --> 00:16:59,170
clusters that you might eat them on or

00:16:57,939 --> 00:17:00,339
anything unique monitor now you

00:16:59,170 --> 00:17:04,120
certainly have applications that are

00:17:00,339 --> 00:17:05,079
updating the stuff so we have

00:17:04,120 --> 00:17:06,610
implementations in all different

00:17:05,079 --> 00:17:08,380
libraries and the interesting thing

00:17:06,610 --> 00:17:10,510
about this is that we're able to see how

00:17:08,380 --> 00:17:13,510
quickly we're able to update a table

00:17:10,510 --> 00:17:15,459
with 200 rose actually says 100 bits

00:17:13,510 --> 00:17:18,189
200s master and slave for each row and

00:17:15,459 --> 00:17:19,659
then we can see how slow it is so the

00:17:18,189 --> 00:17:21,339
slower ones will drop frames because

00:17:19,659 --> 00:17:24,490
JavaScript won't be able to handle the

00:17:21,339 --> 00:17:25,630
updates and the browser will will start

00:17:24,490 --> 00:17:28,390
dropping frames so you'll kind of see

00:17:25,630 --> 00:17:33,130
the drink so this is angular 1.3 which I

00:17:28,390 --> 00:17:34,960
think was several months ago but so

00:17:33,130 --> 00:17:36,789
let's see we have we have a little bit

00:17:34,960 --> 00:17:38,789
of genk as I scroll I don't know how oh

00:17:36,789 --> 00:17:44,020
well it shows up on the projector and

00:17:38,789 --> 00:17:49,960
pull up the console and I have a

00:17:44,020 --> 00:17:52,450
function called a run timer so run timer

00:17:49,960 --> 00:17:54,700
will run over five seconds and it'll see

00:17:52,450 --> 00:17:56,230
how many times you can run render in a

00:17:54,700 --> 00:17:58,370
second over a course of five little

00:17:56,230 --> 00:18:00,990
sample

00:17:58,370 --> 00:18:02,549
okay so you get 4.4 renders per second

00:18:00,990 --> 00:18:07,910
so that that's you know pretty good but

00:18:02,549 --> 00:18:12,660
it definitely is janky here all right

00:18:07,910 --> 00:18:14,280
now we have amber one now and this is a

00:18:12,660 --> 00:18:17,669
little problematic because it tends to

00:18:14,280 --> 00:18:24,750
cross the browser tab sometimes all

00:18:17,669 --> 00:18:27,480
right so we get occasional updates all

00:18:24,750 --> 00:18:29,150
right so down to about one render a

00:18:27,480 --> 00:18:30,960
second so that's that's a little slow

00:18:29,150 --> 00:18:32,400
and of course these are synthetic

00:18:30,960 --> 00:18:35,730
benchmarks but I think they're useful to

00:18:32,400 --> 00:18:38,370
see in this case how fast we can we can

00:18:35,730 --> 00:18:42,510
update or down so when I informed stem

00:18:38,370 --> 00:18:48,480
of this it was all about reactor so this

00:18:42,510 --> 00:18:49,740
is react we run Dover five seconds able

00:18:48,480 --> 00:18:52,049
to get 10 run in a second that's pretty

00:18:49,740 --> 00:19:00,890
fast it's really smooth if I scroll down

00:18:52,049 --> 00:19:04,590
here a very little drink all right so

00:19:00,890 --> 00:19:07,940
ember influence the glimmer engine

00:19:04,590 --> 00:19:11,070
recently take their own approach to

00:19:07,940 --> 00:19:13,830
updating the DOM and just as fast as

00:19:11,070 --> 00:19:16,590
react now so that was really exciting at

00:19:13,830 --> 00:19:19,740
amber comp this year so we get 900

00:19:16,590 --> 00:19:22,080
second so just about at react speech so

00:19:19,740 --> 00:19:23,429
we looked at all this this was sort of

00:19:22,080 --> 00:19:25,200
what we looked at before we wrote

00:19:23,429 --> 00:19:28,169
tungsten we're like really want to be

00:19:25,200 --> 00:19:30,900
this fast renew we can do it with our

00:19:28,169 --> 00:19:32,159
current infrastructure but you know as

00:19:30,900 --> 00:19:33,690
we realize that we couldn't rewrite

00:19:32,159 --> 00:19:35,400
everything we knew we probably wouldn't

00:19:33,690 --> 00:19:37,049
get to those speeds and we wanted to

00:19:35,400 --> 00:19:39,929
sort of be in the same ballpark that was

00:19:37,049 --> 00:19:47,429
kind of the goal so let's see what we

00:19:39,929 --> 00:19:50,450
can get understand Jenkins want too bad

00:19:47,429 --> 00:19:50,450
let's see what we get for renders

00:19:53,230 --> 00:19:58,040
alright so I'm ten or two seconds so

00:19:56,030 --> 00:20:06,200
pretty pretty close to mboro glimmer and

00:19:58,040 --> 00:20:08,480
react yeah thank you yeah we were really

00:20:06,200 --> 00:20:10,160
happy with it and you know we looked at

00:20:08,480 --> 00:20:12,770
this in at the end of the day if you

00:20:10,160 --> 00:20:15,800
know a few renders more more or less per

00:20:12,770 --> 00:20:17,840
second wasn't really a game changer but

00:20:15,800 --> 00:20:19,250
it was is cool to be there and kind of

00:20:17,840 --> 00:20:22,250
be in that space and realize that we

00:20:19,250 --> 00:20:25,070
could do it you know taking our existing

00:20:22,250 --> 00:20:27,290
our existing infrastructure I have this

00:20:25,070 --> 00:20:28,370
last library that I want a demo in this

00:20:27,290 --> 00:20:30,470
is just really lightweight library

00:20:28,370 --> 00:20:33,770
called paper clip and it does dipping a

00:20:30,470 --> 00:20:35,810
little bit different way it's really

00:20:33,770 --> 00:20:37,370
fast so what's interesting about this is

00:20:35,810 --> 00:20:38,990
we looked around we realized there's

00:20:37,370 --> 00:20:41,300
still more work that we can do there's

00:20:38,990 --> 00:20:42,980
still places that we can improve there

00:20:41,300 --> 00:20:44,990
are still optimizations that we can make

00:20:42,980 --> 00:20:47,230
in terms of updating parts to our page

00:20:44,990 --> 00:20:48,950
or doing different faster or

00:20:47,230 --> 00:20:51,620
conditionally doing different based on

00:20:48,950 --> 00:20:53,780
our changing data the interesting thing

00:20:51,620 --> 00:20:55,700
is that we can do this ourselves now as

00:20:53,780 --> 00:20:57,830
opposed to having to rely on a library

00:20:55,700 --> 00:20:59,770
to do that for us we can start to find

00:20:57,830 --> 00:21:02,120
places in our own code in our own

00:20:59,770 --> 00:21:04,790
implementations and see where it's

00:21:02,120 --> 00:21:07,240
useful to make it faster where it might

00:21:04,790 --> 00:21:13,580
give us the most benefit so if I pull up

00:21:07,240 --> 00:21:16,780
this library which we've we've been

00:21:13,580 --> 00:21:18,920
looking at it that's really fast and

00:21:16,780 --> 00:21:22,340
this is actually going to be quite

00:21:18,920 --> 00:21:25,510
fascinated implementations yeah 30

00:21:22,340 --> 00:21:28,460
wonders say so the point being you know

00:21:25,510 --> 00:21:30,050
there's more work to do and it's nice to

00:21:28,460 --> 00:21:31,730
be able to do that in our existing

00:21:30,050 --> 00:21:33,380
infrastructure and make progress in a

00:21:31,730 --> 00:21:36,230
way that makes sense for for our use

00:21:33,380 --> 00:21:37,790
cases and for our customers and yeah

00:21:36,230 --> 00:21:39,620
we'd love to hear your feedback on

00:21:37,790 --> 00:21:40,910
tungsten I have stickers because

00:21:39,620 --> 00:21:44,620
apparently you've made it like as a

00:21:40,910 --> 00:21:47,980
library you get your own stickers so uh

00:21:44,620 --> 00:21:47,980
all right thank you

00:22:14,300 --> 00:22:16,360

YouTube URL: https://www.youtube.com/watch?v=77FCJvaYsOM


