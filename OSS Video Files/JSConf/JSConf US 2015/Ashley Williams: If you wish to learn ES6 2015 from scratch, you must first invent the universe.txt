Title: Ashley Williams: If you wish to learn ES6 2015 from scratch, you must first invent the universe
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	Javascript has always been a language with very little syntactic sugar—for better or worse. With ES6/2015, and future iterations,though, Javascript is gaining a more and more abstract and expressive syntax. To some it might appear that our language—which already seems accessible and approachable for beginners— is becoming even more accessible and approachable. However, both the humanities and CS education research have proven that abstraction, while a powerful tool for knowledgeable practitioners, can be an equally powerful foil for beginners. As we enter the era of language-level abstractions in ES6/2015, we are charged with the task of rethinking how we teach JavaScript. Through an interdisciplinary montage I will identify the problem of teaching abstraction as a ubiquitous demand across nearly every domain, and align the issues of creativity and critical thinking in the humanities with issues in computer science. The talk will conclude with a discussion of how the discipline of computer science and that of the humanities can inform each other to produce more effective and creative solutions to both developing and teaching abstractions.
Captions: 
	00:00:14,870 --> 00:00:15,870
Wow.

00:00:15,870 --> 00:00:17,580
I think the talk is over.

00:00:17,580 --> 00:00:18,580
That's the entire thing.

00:00:18,580 --> 00:00:19,580
Yeah, hey!

00:00:19,580 --> 00:00:20,580
I'm a little hoarse.js right now.

00:00:20,580 --> 00:00:23,480
Because I Selined in last night.

00:00:23,480 --> 00:00:25,180
So yeah.

00:00:25,180 --> 00:00:26,860
AGdubz on Twitter.

00:00:26,860 --> 00:00:29,800
You might know me from some of the pool talks.

00:00:29,800 --> 00:00:33,770
I don't work anywhere right now, so I'm going to introduce

00:00:33,770 --> 00:00:36,540
myself as somebody who makes mistakes.

00:00:36,540 --> 00:00:38,140
These things happen all the time.

00:00:38,140 --> 00:00:42,550
And this talk, depending on how you think about it, could be about making

00:00:42,550 --> 00:00:46,310
mistakes, but I'm not going to tread on this too much further.

00:00:46,310 --> 00:00:47,870
Some mistakes were made.

00:00:47,870 --> 00:00:48,870
We understand.

00:00:48,870 --> 00:00:50,440
But yeah.

00:00:50,440 --> 00:00:52,039
Let's talk about cows in space, right?

00:00:52,039 --> 00:00:54,960
Because what is my talk even about?

00:00:54,960 --> 00:00:56,210
I don't even know.

00:00:56,210 --> 00:00:57,210
Cows in space.

00:00:57,210 --> 00:01:00,020
Maybe that's not what we're here for.

00:01:00,020 --> 00:01:01,550
We're here to talk about art.

00:01:01,550 --> 00:01:02,550
Right?

00:01:02,550 --> 00:01:04,699
This is some great art that I found on the internet.

00:01:04,699 --> 00:01:05,699
Yeah, I know.

00:01:05,699 --> 00:01:06,699
Bummer.

00:01:06,699 --> 00:01:08,220
Got to talk about JavaScript.

00:01:08,220 --> 00:01:09,470
Yeah.

00:01:09,470 --> 00:01:12,350
We're going to talk actually a little bit about

00:01:12,350 --> 00:01:17,620
ES6/2015, and I'm not going to say that whole thing every time, because I think

00:01:17,620 --> 00:01:18,620
it's garbage.

00:01:18,620 --> 00:01:22,120
I'm just going to say ES6, and if you think I'm wrong, I don't

00:01:22,120 --> 00:01:24,830
really care.

00:01:24,830 --> 00:01:26,180
So...

00:01:26,180 --> 00:01:27,540
Anyways...

00:01:27,540 --> 00:01:29,190
Let's talk about ES6.

00:01:29,190 --> 00:01:33,940
But it's Ashley, so I'm going to have to talk about something else.

00:01:33,940 --> 00:01:35,220
And the first thing that I really want to talk

00:01:35,220 --> 00:01:37,420
to you about is abstraction.

00:01:37,420 --> 00:01:38,420
Right?

00:01:38,420 --> 00:01:42,450
And this wouldn't be a good computer talk if I wasn't going to talk some Dijkstra for

00:01:42,450 --> 00:01:43,450
you.

00:01:43,450 --> 00:01:48,090
So the effective exploitation of his powers of abstraction...

00:01:48,090 --> 00:01:50,220
Bummer on the pronoun, I know...

00:01:50,220 --> 00:01:53,350
Must be regarded as one of the most vital activities

00:01:53,350 --> 00:01:55,120
of a competent programmer.

00:01:55,120 --> 00:01:58,340
So when we're thinking about programming, when

00:01:58,340 --> 00:02:04,480
we're really doing programming, the behavior that we're doing is abstracting.

00:02:04,480 --> 00:02:05,480
And so...

00:02:05,480 --> 00:02:06,480
Okay.

00:02:06,480 --> 00:02:08,190
Abstract is a pretty abstract concept.

00:02:08,190 --> 00:02:10,780
So let's talk about the abstraction principle.

00:02:10,780 --> 00:02:13,390
And another really big tome, called types and

00:02:13,390 --> 00:02:20,160
programming languages, Benjamin C Pierce defines it as...

00:02:20,160 --> 00:02:23,239
Each significant piece of functionality in a program

00:02:23,239 --> 00:02:27,269
should be implemented in just one place in the source code, where functions

00:02:27,269 --> 00:02:32,569
are carried out by a distinct piece of code, it is generally beneficial to

00:02:32,569 --> 00:02:36,560
combine them into one by abstracting out the varying parts.

00:02:36,560 --> 00:02:39,670
This is something we all do in our daily lives, potentially

00:02:39,670 --> 00:02:43,749
one of the things we find most satisfying when we program and can refactor

00:02:43,749 --> 00:02:46,310
something into this one elegant function.

00:02:46,310 --> 00:02:47,730
And that's really, really excellent.

00:02:47,730 --> 00:02:52,819
But I want us to understand abstraction on a theoretical level.

00:02:52,819 --> 00:02:55,420
So in order to do the theoretical level part of abstraction,

00:02:55,420 --> 00:02:58,150
I went to Wikipedia and got this.

00:02:58,150 --> 00:03:02,060
So it's pretty good.

00:03:02,060 --> 00:03:04,670
Details from a common pattern -- the programs can

00:03:04,670 --> 00:03:08,620
work close to the level of human thought.

00:03:08,620 --> 00:03:14,379
Leaving out details which matter in practice but are immaterial to the problem

00:03:14,379 --> 00:03:16,370
being solved.

00:03:16,370 --> 00:03:19,079
And this is something I want to flag for us.

00:03:19,079 --> 00:03:22,230
The idea of something being immaterial to the problem

00:03:22,230 --> 00:03:23,230
being solved.

00:03:23,230 --> 00:03:26,139
We know as programmers that one of the big things we also do is

00:03:26,139 --> 00:03:28,459
define the problem we're solving.

00:03:28,459 --> 00:03:31,489
And so this is something that's kind of tying that in, and I want us just to kind

00:03:31,489 --> 00:03:34,330
of flag that.

00:03:34,330 --> 00:03:39,390
So I'm going to take us on another little adventure before I get to that whole

00:03:39,390 --> 00:03:40,390
ES6 thing.

00:03:40,390 --> 00:03:43,340
So I had the pleasure of working at the New York City Web

00:03:43,340 --> 00:03:47,359
Development Fellowship in its flagship year, a boot camp program for people

00:03:47,359 --> 00:03:51,889
who are unemployed or make very little money to take them from six months of

00:03:51,889 --> 00:03:55,680
no programming experience to being a junior developer.

00:03:55,680 --> 00:03:58,359
There are problems with some of these programs, but this one was awesome

00:03:58,359 --> 00:04:01,040
and they were all there and there are students of mine in this audience

00:04:01,040 --> 00:04:04,150
and I'm super proud I'm here.

00:04:04,150 --> 00:04:08,389
One of the reasons I love teaching -- some people are like -- if you can, do.

00:04:08,389 --> 00:04:09,529
If you can't, teach.

00:04:09,529 --> 00:04:11,959
I think that's real garbage.

00:04:11,959 --> 00:04:15,540
So when I say I teach beginners, beginners teach me, and a lot of

00:04:15,540 --> 00:04:18,880
the lessons that are learned that I want to share with you in this talk are

00:04:18,880 --> 00:04:21,680
from interfacing with beginners on a regular basis.

00:04:21,680 --> 00:04:22,780
All right.

00:04:22,780 --> 00:04:24,920
So something that I learned when I was teaching is,

00:04:24,920 --> 00:04:29,390
like, for beginners, iteration is really hard.

00:04:29,390 --> 00:04:32,840
Right before I started, I was at this meetup, and the dean of the school

00:04:32,840 --> 00:04:34,710
was giving a talk and he was like...

00:04:34,710 --> 00:04:38,460
Hey, look at Ruby. Ruby is so awesome.

00:04:38,460 --> 00:04:41,030
Even your mom could understand that Ruby array.

00:04:41,030 --> 00:04:42,030
Sidebar...

00:04:42,030 --> 00:04:43,590
Don't say that stuff.

00:04:43,590 --> 00:04:45,139
Moms are smart and cool.

00:04:45,139 --> 00:04:46,670
Don't be rude.

00:04:46,670 --> 00:04:47,670
(applause)

00:04:47,670 --> 00:04:48,670
Anyways...

00:04:48,670 --> 00:04:50,240
So yeah, he was like...

00:04:50,240 --> 00:04:52,280
Yeah, JavaScript, people don't understand JavaScript.

00:04:52,280 --> 00:04:53,520
He didn't understand JavaScript.

00:04:53,520 --> 00:04:54,560
So that was the problem.

00:04:54,560 --> 00:04:58,620
But he has this point that's actually kind of core and really cool.

00:04:58,620 --> 00:05:02,710
So you might recognize these excellent hand gesture people -- Abelson and

00:05:02,710 --> 00:05:03,710
Sussman.

00:05:03,710 --> 00:05:05,370
They wrote a book we'll talk about later.

00:05:05,370 --> 00:05:09,669
But what they say in that book is programs must be written for people

00:05:09,669 --> 00:05:14,650
to read, and only incidentally for machines to execute.

00:05:14,650 --> 00:05:16,720
And this is a really big point.

00:05:16,720 --> 00:05:18,780
People write programs.

00:05:18,780 --> 00:05:20,180
People read programs.

00:05:20,180 --> 00:05:21,780
The computers do stuff over there.

00:05:21,780 --> 00:05:22,780
All right?

00:05:22,780 --> 00:05:24,770
We're really here to program for people.

00:05:24,770 --> 00:05:26,160
And that's something that we need to remember.

00:05:26,160 --> 00:05:30,770
But there's a little bit of a trick here, because what does it mean to write programs

00:05:30,770 --> 00:05:33,419
for people to read?

00:05:33,419 --> 00:05:37,039
People really struggle with instructions sometimes.

00:05:37,039 --> 00:05:39,010
This is a picture of my door.

00:05:39,010 --> 00:05:40,840
In my cool ranch.

00:05:40,840 --> 00:05:42,000
Anyways, yeah.

00:05:42,000 --> 00:05:43,960
So this is a struggle, sometimes.

00:05:43,960 --> 00:05:44,960
What does it mean?

00:05:44,960 --> 00:05:48,460
We don't really know what level of abstraction

00:05:48,460 --> 00:05:49,870
is good for people to read.

00:05:49,870 --> 00:05:53,139
All right, so we go back into iteration is hard.

00:05:53,139 --> 00:05:55,120
And this is, like, a really neat lesson.

00:05:55,120 --> 00:05:56,470
So this array.each...

00:05:56,470 --> 00:05:59,470
Like, I had this sinking feeling about it.

00:05:59,470 --> 00:06:01,360
Saying -- yeah, people can read it.

00:06:01,360 --> 00:06:02,370
Ruby is great.

00:06:02,370 --> 00:06:06,580
Interestingly enough, written in English by a Japanese person.

00:06:06,580 --> 00:06:07,580
Anyways...

00:06:07,580 --> 00:06:08,599
So yeah, I was like -- okay.

00:06:08,599 --> 00:06:09,770
This is not working.

00:06:09,770 --> 00:06:11,550
Everyone is having a lot of trouble with iteration.

00:06:11,550 --> 00:06:13,039
This is supposed to be easy.

00:06:13,039 --> 00:06:14,039
What's going on?

00:06:14,039 --> 00:06:18,069
So I'm sitting at my desk one day and my code teacher, Blake, is teaching

00:06:18,069 --> 00:06:23,050
iteration in Ruby to the group for the first time and I'm listening in and it's

00:06:23,050 --> 00:06:24,150
not going well.

00:06:24,150 --> 00:06:25,289
It's just not working.

00:06:25,289 --> 00:06:27,039
And it's not because Blake's a bad teacher.

00:06:27,039 --> 00:06:28,150
Blake is awesome.

00:06:28,150 --> 00:06:30,550
But I hear this and I'm like...

00:06:30,550 --> 00:06:31,890
I really should jump in.

00:06:31,890 --> 00:06:33,289
What am I going to?

00:06:33,289 --> 00:06:34,340
And I did something kind of bold.

00:06:34,340 --> 00:06:35,340
Which...

00:06:35,340 --> 00:06:37,130
If anyone knows me, isn't out of character.

00:06:37,130 --> 00:06:41,139
I was like -- I'm going to hijack this class.

00:06:41,139 --> 00:06:43,790
And so I walk into the class and I'm like -- hey, guys.

00:06:43,790 --> 00:06:45,660
I have an idea.

00:06:45,660 --> 00:06:47,840
And I'm not sure it will work.

00:06:47,840 --> 00:06:49,509
But I have an inkling that it might.

00:06:49,509 --> 00:06:53,479
And what I would like to do is I would like you to throw away all the Ruby

00:06:53,479 --> 00:06:57,690
you just learned, and I just want to teach you iteration in a language that you

00:06:57,690 --> 00:06:59,070
don't know.

00:06:59,070 --> 00:07:00,220
And I think it's going to work.

00:07:00,220 --> 00:07:01,220
You'll understand.

00:07:01,220 --> 00:07:02,310
And people are like -- that does not sound like a

00:07:02,310 --> 00:07:03,310
good idea.

00:07:03,310 --> 00:07:06,270
I'm like -- no, no Ruby here.

00:07:06,270 --> 00:07:07,530
However...

00:07:07,530 --> 00:07:10,490
JavaScript was awesome for teaching iteration.

00:07:10,490 --> 00:07:13,349
Because it expressed the underlying concepts.

00:07:13,349 --> 00:07:17,210
If we look at it here, I know all of us maybe don't like writing

00:07:17,210 --> 00:07:18,229
all this syntax out.

00:07:18,229 --> 00:07:19,819
I'll get to that later.

00:07:19,819 --> 00:07:20,819
But...

00:07:20,819 --> 00:07:23,460
When we understand iteration, it's state...

00:07:23,460 --> 00:07:24,460
Condition...

00:07:24,460 --> 00:07:25,789
Increment.

00:07:25,789 --> 00:07:26,789
I see it right there.

00:07:26,789 --> 00:07:27,789
But in that Ruby...

00:07:27,789 --> 00:07:28,789
It's not.

00:07:28,789 --> 00:07:32,639
And so it was really, really cool that I was able to be

00:07:32,639 --> 00:07:33,639
like...

00:07:33,639 --> 00:07:36,120
Hey, this is the stuff you need to understand conceptually, that's exposed

00:07:36,120 --> 00:07:37,120
by the language.

00:07:37,120 --> 00:07:39,129
And you can use this language to teach it.

00:07:39,129 --> 00:07:41,870
And we didn't teach any more JavaScript for another three months.

00:07:41,870 --> 00:07:44,330
But we went back to Ruby and it was fine.

00:07:44,330 --> 00:07:47,780
We used JavaScript as a teaching tool.

00:07:47,780 --> 00:07:50,509
So that's a really interesting thing to think about.

00:07:50,509 --> 00:07:55,379
And so I think about a quote from my secret boyfriend here, this really

00:07:55,379 --> 00:07:56,599
excellent physics professor, Richard Feynman.

00:07:56,599 --> 00:07:57,599
Shh.

00:07:57,599 --> 00:07:58,599
Don't tell my boyfriend.

00:07:58,599 --> 00:08:03,160
He says this, and this is kind of a mouthful,

00:08:03,160 --> 00:08:05,249
but I think it's very interesting.

00:08:05,249 --> 00:08:09,810
He says -- the real problem in speech is not precise language.

00:08:09,810 --> 00:08:12,139
The problem is clear language.

00:08:12,139 --> 00:08:16,009
It is actually really quite impossible to say anything with

00:08:16,009 --> 00:08:21,999
absolute precision, unless that thing is so abstracted from the real world as

00:08:21,999 --> 00:08:25,410
not to represent any real thing.

00:08:25,410 --> 00:08:31,410
And so this I think really pulls out the conflict we have of when we're programming...

00:08:31,410 --> 00:08:34,530
Are we programming real things?

00:08:34,530 --> 00:08:37,120
Or are these ideas that we have something else?

00:08:37,120 --> 00:08:41,210
And should we be trying to turn programming into, like, real world language,

00:08:41,210 --> 00:08:44,320
or should we, like, go the other direction and decide...

00:08:44,320 --> 00:08:46,450
Maybe that's not the right way to do it.

00:08:46,450 --> 00:08:47,810
All right?

00:08:47,810 --> 00:08:49,930
And so we still have this problem of origin, though.

00:08:49,930 --> 00:08:53,370
So you may or may not have recognized my cows in space painting,

00:08:53,370 --> 00:08:56,680
which is a bull painting by Pablo Picasso.

00:08:56,680 --> 00:09:01,490
It's a beautiful rendition of what abstraction is, and the fact that

00:09:01,490 --> 00:09:02,880
it's not just one thing.

00:09:02,880 --> 00:09:04,380
It's many different layers.

00:09:04,380 --> 00:09:07,600
And here he says -- and this brings us to some trouble.

00:09:07,600 --> 00:09:10,270
There is no abstract art.

00:09:10,270 --> 00:09:12,610
You must always start with something.

00:09:12,610 --> 00:09:16,150
After that, you can remove all traces of reality.

00:09:16,150 --> 00:09:19,320
And that's really what he does in that painting.

00:09:19,320 --> 00:09:20,480
But we have a question here.

00:09:20,480 --> 00:09:23,050
When we're thinking about designing programming

00:09:23,050 --> 00:09:28,779
languages, in particular as tools for education, where do we start?

00:09:28,779 --> 00:09:31,110
This start problem is a really big deal, right?

00:09:31,110 --> 00:09:32,630
So I love this picture.

00:09:32,630 --> 00:09:36,339
I assume that people have seen this before.

00:09:36,339 --> 00:09:37,779
But it's a very classic one.

00:09:37,779 --> 00:09:41,370
It's the only curse word in the talk, unless I've

00:09:41,370 --> 00:09:42,370
slept.

00:09:42,370 --> 00:09:44,970
So anyways, it says -- how to draw an owl.

00:09:44,970 --> 00:09:46,690
Draw some circles.

00:09:46,690 --> 00:09:48,540
Draw the rest of the owl.

00:09:48,540 --> 00:09:50,930
In a certain sense, there's abstractions we have in our

00:09:50,930 --> 00:09:53,450
programming languages that do this.

00:09:53,450 --> 00:09:54,610
They do it to us.

00:09:54,610 --> 00:09:57,339
And they do it to beginners, and I think we can all agree

00:09:57,339 --> 00:10:00,290
that it's pretty hard to draw an owl with these instructions.

00:10:00,290 --> 00:10:03,300
These are really both problems.

00:10:03,300 --> 00:10:04,300
All right?

00:10:04,300 --> 00:10:06,200
We're just between a rock and a hard place here.

00:10:06,200 --> 00:10:10,019
We know abstraction makes things efficient, but we also know that explicit

00:10:10,019 --> 00:10:14,019
code makes it easier to reason about, which makes it more maintainable,

00:10:14,019 --> 00:10:16,360
which in the end maybe makes it more efficient.

00:10:16,360 --> 00:10:17,360
So where do we start?

00:10:17,360 --> 00:10:18,480
What are we going to do?

00:10:18,480 --> 00:10:19,500
All right?

00:10:19,500 --> 00:10:23,949
And so now I will take you on a fantastic journey, a personal voyage, you

00:10:23,949 --> 00:10:31,420
might say, with Carl Sagan, where we say each of it begins here, inside of our

00:10:31,420 --> 00:10:32,420
head.

00:10:32,420 --> 00:10:33,420
So the cows in space.

00:10:33,420 --> 00:10:34,420
Right?

00:10:34,420 --> 00:10:35,420
We're back to this.

00:10:35,420 --> 00:10:36,420
All right.

00:10:36,420 --> 00:10:39,130
So humans are beautiful pattern matchers.

00:10:39,130 --> 00:10:42,440
We're actually just one of the -- that's one of the best evolutionary

00:10:42,440 --> 00:10:44,490
aspects of human beings.

00:10:44,490 --> 00:10:46,529
Reading books is terrible for us.

00:10:46,529 --> 00:10:50,300
There's no patterns on the page and short-term memory is terrible.

00:10:50,300 --> 00:10:52,970
But we love making and finding patterns.

00:10:52,970 --> 00:10:55,690
So we can look at something like this.

00:10:55,690 --> 00:10:57,350
The sky.

00:10:57,350 --> 00:10:58,630
And somehow we see this.

00:10:58,630 --> 00:11:00,210
You see it, right?

00:11:00,210 --> 00:11:01,790
I totally see it.

00:11:01,790 --> 00:11:02,790
No?

00:11:02,790 --> 00:11:04,589
Anyways, someone saw it, and then got a lot of people to

00:11:04,589 --> 00:11:05,880
agree.

00:11:05,880 --> 00:11:07,310
And we form something like this.

00:11:07,310 --> 00:11:11,730
When we find patterns and we give them names, we build abstractions.

00:11:11,730 --> 00:11:13,270
And that's really cool.

00:11:13,270 --> 00:11:14,290
But...

00:11:14,290 --> 00:11:18,350
We need to be careful about the abstractions that

00:11:18,350 --> 00:11:19,779
we make.

00:11:19,779 --> 00:11:23,350
Because these abstractions turn into ideologies.

00:11:23,350 --> 00:11:27,589
And those ideologies are where we form our culture and our community.

00:11:27,589 --> 00:11:28,991
And so you might end up with something like this.

00:11:28,991 --> 00:11:32,940
This is a real horoscope, by the way, and maybe astrology

00:11:32,940 --> 00:11:37,910
is real, because I did rekindle my sense of inspiration on Tuesday by dragging

00:11:37,910 --> 00:11:40,360
my travel companions to the karaoke joint.

00:11:40,360 --> 00:11:41,480
So who knows?

00:11:41,480 --> 00:11:43,339
So it's all out there.

00:11:43,339 --> 00:11:44,829
We have no idea.

00:11:44,829 --> 00:11:47,570
But what we do need to understand is that Carl Sagan

00:11:47,570 --> 00:11:49,560
is really not into astrology.

00:11:49,560 --> 00:11:51,329
He calls this fuzzy thinking.

00:11:51,329 --> 00:11:54,690
We saw patterns, but the abstractions we made with the patterns

00:11:54,690 --> 00:12:01,790
were wrong because they were built on the wrong underlying mechanisms.

00:12:01,790 --> 00:12:05,310
Our personalities are not formed by the orientation of the stars.

00:12:05,310 --> 00:12:07,780
Or at least, that's not something I'm familiar with yet.

00:12:07,780 --> 00:12:10,190
But we ended up with this.

00:12:10,190 --> 00:12:11,930
And people do a lot of dumb things.

00:12:11,930 --> 00:12:14,170
And spend a lot of money based on this.

00:12:14,170 --> 00:12:16,270
This is very real for people.

00:12:16,270 --> 00:12:19,000
Bad abstractions are real problems.

00:12:19,000 --> 00:12:20,720
All right?

00:12:20,720 --> 00:12:22,540
So let's talk about JavaScript.

00:12:22,540 --> 00:12:24,720
All right.

00:12:24,720 --> 00:12:25,800
JavaScript.

00:12:25,800 --> 00:12:28,920
JavaScript has been a delightful beginner programming language,

00:12:28,920 --> 00:12:32,040
because it's lacked a lot of abstractions that other programming languages

00:12:32,040 --> 00:12:33,040
have.

00:12:33,040 --> 00:12:34,920
We have libraries that kind of do that for us.

00:12:34,920 --> 00:12:37,220
But JavaScript itself -- we haven't really done it.

00:12:37,220 --> 00:12:41,110
And that's about to change a little bit.

00:12:41,110 --> 00:12:44,390
All right.

00:12:44,390 --> 00:12:48,130
So JavaScript was invented on September 28th, 1980.

00:12:48,130 --> 00:12:50,089
That is not really true.

00:12:50,089 --> 00:12:55,740
This slide exists because that's when Cosmos came out and I wanted to be on

00:12:55,740 --> 00:12:56,740
theme.

00:12:56,740 --> 00:13:00,110
That's the one reference I've got.

00:13:00,110 --> 00:13:06,740
So in this, he says this: if you wish to make an apple pie from scratch, you

00:13:06,740 --> 00:13:08,649
must first invent the universe.

00:13:08,649 --> 00:13:09,649
And I was like...

00:13:09,649 --> 00:13:10,649
Yeah, totally.

00:13:10,649 --> 00:13:11,649
Also, ES6.

00:13:11,649 --> 00:13:12,680
Oh, no, that was me.

00:13:12,680 --> 00:13:13,680
Not him.

00:13:13,680 --> 00:13:16,310
That would be cool if that was true.

00:13:16,310 --> 00:13:19,899
So let's talk about ES6 right now.

00:13:19,899 --> 00:13:21,040
All right.

00:13:21,040 --> 00:13:26,389
From this spec, we see -- syntax is relaxed, to enable it to serve

00:13:26,389 --> 00:13:28,459
as an easy to use scripting language.

00:13:28,459 --> 00:13:30,020
Relaxation is awesome.

00:13:30,020 --> 00:13:33,709
I have been relaxing pretty hard this week, even though

00:13:33,709 --> 00:13:36,170
I've been pretty nervous about my talk.

00:13:36,170 --> 00:13:40,390
But relaxing isn't always the right message.

00:13:40,390 --> 00:13:43,850
Sometimes you get something like that.

00:13:43,850 --> 00:13:46,220
So when we see that, we have to think...

00:13:46,220 --> 00:13:48,759
What is the problem to be solved here?

00:13:48,759 --> 00:13:51,990
Is the goal of JavaScript to be easy to use?

00:13:51,990 --> 00:13:55,529
Have we asked ourselves that?

00:13:55,529 --> 00:13:57,470
What is JavaScript trying to solve?

00:13:57,470 --> 00:13:59,220
What's the problem?

00:13:59,220 --> 00:14:01,910
What will be JavaScript's legacy?

00:14:01,910 --> 00:14:03,160
That's a big question, right?

00:14:03,160 --> 00:14:05,589
When we go back in time, people look back and

00:14:05,589 --> 00:14:06,589
here like...

00:14:06,589 --> 00:14:08,470
There was once this language called JavaScript, and they'll say

00:14:08,470 --> 00:14:09,470
this about it.

00:14:09,470 --> 00:14:10,490
What will that be?

00:14:10,490 --> 00:14:11,769
I don't know.

00:14:11,769 --> 00:14:14,671
But it probably has something to do with this.

00:14:14,671 --> 00:14:18,350
This is an excellent tweet by Laurie Vos a little while ago.

00:14:18,350 --> 00:14:23,319
Says: fundamentally it's hard to think of a compelling reason a brand-new web

00:14:23,319 --> 00:14:26,750
dev would learn two languages if they could just learn JavaScript.

00:14:26,750 --> 00:14:30,680
If I can pick any language that will work on the client

00:14:30,680 --> 00:14:36,740
and the server, it might not be JavaScript, but we don't get to pick.

00:14:36,740 --> 00:14:38,970
All right?

00:14:38,970 --> 00:14:42,940
So now let's talk about ES6 classes.

00:14:42,940 --> 00:14:44,880
You might remember our little robot friend here.

00:14:44,880 --> 00:14:46,779
And he's warning us about aliens.

00:14:46,779 --> 00:14:48,389
All right.

00:14:48,389 --> 00:14:49,709
So sugar makes me sick.

00:14:49,709 --> 00:14:51,110
Actually, I have diabetes.

00:14:51,110 --> 00:14:52,709
So sugar actually makes me sick.

00:14:52,709 --> 00:14:57,060
But syntactic sugar makes me queasy as well.

00:14:57,060 --> 00:15:00,910
And part of the reason syntactic sugar makes me queasy is that there's often

00:15:00,910 --> 00:15:05,540
the chance that it's obfuscating something conceptually below it.

00:15:05,540 --> 00:15:06,790
And so when I see this, I'm like...

00:15:06,790 --> 00:15:07,790
Oh, no.

00:15:07,790 --> 00:15:08,790
What's going on here?

00:15:08,790 --> 00:15:09,790
All right?

00:15:09,790 --> 00:15:11,170
So let's go back to the script.

00:15:11,170 --> 00:15:12,170
Right?

00:15:12,170 --> 00:15:14,710
Even though scripts include syntax for class definitions,

00:15:14,710 --> 00:15:18,779
the objects are not fundamentally class-based.

00:15:18,779 --> 00:15:20,430
It's like...

00:15:20,430 --> 00:15:22,670
Oh, that's interesting.

00:15:22,670 --> 00:15:25,130
Why did we do that?

00:15:25,130 --> 00:15:28,509
So you might not need class syntax.

00:15:28,509 --> 00:15:30,290
Anyways...

00:15:30,290 --> 00:15:31,290
This guy...

00:15:31,290 --> 00:15:32,750
Oh, he's adorable.

00:15:32,750 --> 00:15:33,750
I love this guy.

00:15:33,750 --> 00:15:34,899
He has this amazing quote.

00:15:34,899 --> 00:15:39,220
He says: remember that all models are wrong.

00:15:39,220 --> 00:15:46,300
The practical question is: how wrong do they have to be to not be useful?

00:15:46,300 --> 00:15:47,600
All right?

00:15:47,600 --> 00:15:48,600
So...

00:15:48,600 --> 00:15:49,600
All right.

00:15:49,600 --> 00:15:52,199
How bad are we doing here, with this class syntax thing?

00:15:52,199 --> 00:15:53,589
Let's keep reading some more spec.

00:15:53,589 --> 00:15:55,079
Love reading spec.

00:15:55,079 --> 00:15:58,580
In a class-based, object oriented language in general,

00:15:58,580 --> 00:15:59,649
state is carried by instances, methods...

00:15:59,649 --> 00:16:06,960
State is carried by instances, methods are carried by classes, and (inaudible)

00:16:06,960 --> 00:16:08,250
behavior.

00:16:08,250 --> 00:16:16,279
In (inaudible) structure, behavior, and state are all inherited.

00:16:16,279 --> 00:16:17,279
Okay.

00:16:17,279 --> 00:16:19,819
That's, like, a lot, and if you have not been reasoning about this,

00:16:19,819 --> 00:16:20,899
that might be a bit.

00:16:20,899 --> 00:16:23,519
So what I want to do is there's this guy named Reganwald

00:16:23,519 --> 00:16:25,269
you might know from the internet.

00:16:25,269 --> 00:16:27,889
He says school stuff like this a lot.

00:16:27,889 --> 00:16:31,651
He also wrote a blog post and I'm not going to read this to you, but what

00:16:31,651 --> 00:16:34,589
he talks about are -- prototypes are not classes.

00:16:34,589 --> 00:16:38,139
When you're teaching classes, you often say -- a class is a

00:16:38,139 --> 00:16:40,019
blueprint.

00:16:40,019 --> 00:16:43,240
You basically have a blueprint, and then you can build a house from

00:16:43,240 --> 00:16:44,240
it.

00:16:44,240 --> 00:16:45,240
Right?

00:16:45,240 --> 00:16:46,240
Your house is your object.

00:16:46,240 --> 00:16:48,019
The class is a blueprint.

00:16:48,019 --> 00:16:49,019
Cool.

00:16:49,019 --> 00:16:53,920
Prototypes, and classes in JavaScript, they aren't blueprints.

00:16:53,920 --> 00:16:58,009
They're model homes.

00:16:58,009 --> 00:17:01,600
And while you might leave your model home empty, someone

00:17:01,600 --> 00:17:06,210
could also move in, and you could live there, and so that's actually very,

00:17:06,210 --> 00:17:07,660
very different.

00:17:07,660 --> 00:17:08,660
So...

00:17:08,660 --> 00:17:14,260
JavaScript classes are kind of like objects.

00:17:14,260 --> 00:17:16,640
And they're not really classes at all.

00:17:16,640 --> 00:17:19,140
I might be saying -- go home, TC-39.

00:17:19,140 --> 00:17:20,140
You're drunk!

00:17:20,140 --> 00:17:23,329
No, no, that's not what I'm saying at all.

00:17:23,329 --> 00:17:25,370
This is not a hate talk.

00:17:25,370 --> 00:17:26,530
I love TC-39.

00:17:26,530 --> 00:17:29,620
Shout out to all the work by everyone in Open Source who

00:17:29,620 --> 00:17:31,100
does literally anything.

00:17:31,100 --> 00:17:34,720
I just want to add a perspective, and I don't want

00:17:34,720 --> 00:17:36,730
to play down anything that people have built.

00:17:36,730 --> 00:17:38,230
Because those people are awesome.

00:17:38,230 --> 00:17:39,820
All right.

00:17:39,820 --> 00:17:40,820
So...

00:17:40,820 --> 00:17:43,919
You could really shoot me down pretty fast by being like...

00:17:43,919 --> 00:17:45,040
What even is a class?

00:17:45,040 --> 00:17:46,520
And this is a good question.

00:17:46,520 --> 00:17:50,310
And, like, frankly, the community does not have a good ontology around

00:17:50,310 --> 00:17:52,900
what object orientation should be.

00:17:52,900 --> 00:17:58,309
You should look this up.

00:17:58,309 --> 00:18:02,120
If I had another hour, I would go into it, but I

00:18:02,120 --> 00:18:03,210
do not.

00:18:03,210 --> 00:18:04,870
Simula is where it started.

00:18:04,870 --> 00:18:10,539
But what I'm trying to say about JavaScript classes and the ES6 spec is that

00:18:10,539 --> 00:18:15,400
we're trying to do maybe too many things, and we're not bound.

00:18:15,400 --> 00:18:18,490
We're just trying a little too hard.

00:18:18,490 --> 00:18:20,799
You can go to this place, right next to Madison Square

00:18:20,799 --> 00:18:21,799
Garden.

00:18:21,799 --> 00:18:22,799
It's real.

00:18:22,799 --> 00:18:27,510
And this is the perspective I'm trying to add -- there's this

00:18:27,510 --> 00:18:29,460
great talk called thinking for programmers.

00:18:29,460 --> 00:18:32,880
He talks about writing, and he quotes this cartoon, and the

00:18:32,880 --> 00:18:37,860
cartoon says -- writing is nature's way of letting you know how sloppy your

00:18:37,860 --> 00:18:39,090
thinking is.

00:18:39,090 --> 00:18:43,289
What I want to say is -- teaching is nature's way of letting you know how

00:18:43,289 --> 00:18:46,870
sloppy your understanding is.

00:18:46,870 --> 00:18:48,450
Yeah!

00:18:48,450 --> 00:18:51,600
All right.

00:18:51,600 --> 00:18:54,030
So let's get into a couple of things pretty quick.

00:18:54,030 --> 00:18:55,059
This is going slow.

00:18:55,059 --> 00:18:56,059
All right.

00:18:56,059 --> 00:18:59,280
So those Abel and Sussman people called this tome called structured

00:18:59,280 --> 00:19:02,930
interpretation of computer programs.

00:19:02,930 --> 00:19:06,840
And this was foundational, because what it said was -- we are teaching

00:19:06,840 --> 00:19:07,990
programming all wrong.

00:19:07,990 --> 00:19:09,610
We're teaching syntax.

00:19:09,610 --> 00:19:10,610
We shouldn't be teaching syntax.

00:19:10,610 --> 00:19:12,780
We should be teaching concepts.

00:19:12,780 --> 00:19:14,100
And that is a big change.

00:19:14,100 --> 00:19:18,740
We're thinking about JavaScript -- now we have a syntax that doesn't

00:19:18,740 --> 00:19:19,740
follow up with a concept.

00:19:19,740 --> 00:19:21,250
But if we're teaching programming...

00:19:21,250 --> 00:19:23,710
This is going to be a mess.

00:19:23,710 --> 00:19:26,539
JavaScript will be the introduction to programming concepts

00:19:26,539 --> 00:19:30,580
for an entire generation of developers, whether we like it or not.

00:19:30,580 --> 00:19:32,860
It's happening.

00:19:32,860 --> 00:19:36,630
We think about the problems being solved -- when we're building

00:19:36,630 --> 00:19:40,280
these abstractions, we need to realize that one of the problems JavaScript

00:19:40,280 --> 00:19:45,169
is solving is making entry into web development significantly easier.

00:19:45,169 --> 00:19:46,350
All right?

00:19:46,350 --> 00:19:51,450
So this little guy, Peter Van Wry, he's really cute, he wrote a follow-up to

00:19:51,450 --> 00:19:53,770
the SACP called the CTM.

00:19:53,770 --> 00:19:55,730
And he said -- we need to teach programming as a

00:19:55,730 --> 00:19:57,740
unified discipline.

00:19:57,740 --> 00:20:01,460
And what this means is -- programming languages are tools.

00:20:01,460 --> 00:20:05,500
We need to understand that they are able to address problem and solution

00:20:05,500 --> 00:20:06,500
pairs.

00:20:06,500 --> 00:20:08,309
And those are things that we call paradigms.

00:20:08,309 --> 00:20:11,190
And some programming languages are multi-paradigm.

00:20:11,190 --> 00:20:12,190
Some aren't.

00:20:12,190 --> 00:20:14,210
But this doesn't mean that there's any bad or good language.

00:20:14,210 --> 00:20:17,740
It's just a good tool for solving a problem.

00:20:17,740 --> 00:20:18,740
And he says this.

00:20:18,740 --> 00:20:19,740
And so...

00:20:19,740 --> 00:20:22,120
He says a good way to organize a programming course is to

00:20:22,120 --> 00:20:26,289
start with a simple language, and to extend that language gradually.

00:20:26,289 --> 00:20:29,010
And this is what he calls the kernel teaching method.

00:20:29,010 --> 00:20:31,470
In his book, he starts people at nothing.

00:20:31,470 --> 00:20:33,659
And then they build everything up.

00:20:33,659 --> 00:20:34,659
They build scope.

00:20:34,659 --> 00:20:35,929
It's really cool.

00:20:35,929 --> 00:20:37,400
And so...

00:20:37,400 --> 00:20:39,809
In that sense, they're inventing their universe.

00:20:39,809 --> 00:20:42,041
Their universe is a set of abstractions that they

00:20:42,041 --> 00:20:45,130
built because they felt the pain of their absence.

00:20:45,130 --> 00:20:49,800
So yeah, every beginner should write a kernel language.

00:20:49,800 --> 00:20:50,869
Yeah.

00:20:50,869 --> 00:20:51,869
Just kidding.

00:20:51,869 --> 00:20:53,610
That's a bad idea.

00:20:53,610 --> 00:20:59,330
What we want to take from him is the idea of the creative extension principle.

00:20:59,330 --> 00:21:03,559
And what this says is -- again, we build the abstractions we need.

00:21:03,559 --> 00:21:05,070
The ones that we feel.

00:21:05,070 --> 00:21:08,210
And in that sense, we build the universe that's most appropriate

00:21:08,210 --> 00:21:10,280
for the problem we're trying to solve.

00:21:10,280 --> 00:21:14,380
Ron Jeffries says I think this is not something we haven't thought

00:21:14,380 --> 00:21:16,120
about before -- don't pre-optimize.

00:21:16,120 --> 00:21:26,140
Do it when you actually need them, not just when you see you will need them.

00:21:26,140 --> 00:21:30,210
So it's how the apple pie gets made.

00:21:30,210 --> 00:21:32,130
Anyways...

00:21:32,130 --> 00:21:34,700
So I have a summary here.

00:21:34,700 --> 00:21:35,700
Just basically...

00:21:35,700 --> 00:21:36,700
The slides are online.

00:21:36,700 --> 00:21:39,760
And if you want to do this -- what I'm saying is we need to take an

00:21:39,760 --> 00:21:43,950
educational perspective when we think about programming language design,

00:21:43,950 --> 00:21:46,559
because programming languages are tools that do that.

00:21:46,559 --> 00:21:48,520
And this is not just for beginners.

00:21:48,520 --> 00:21:52,210
We're all really beginners, when we're trying to reason about code.

00:21:52,210 --> 00:21:57,159
And having our abstractions match the concepts that our language uses is going

00:21:57,159 --> 00:21:59,630
to make it easier to reason about.

00:21:59,630 --> 00:22:03,560
I want to leave you with something more, though.

00:22:03,560 --> 00:22:04,860
So I don't think we're totally lost.

00:22:04,860 --> 00:22:08,260
Classes are going to be in JavaScript and that's cool.

00:22:08,260 --> 00:22:09,779
But then there's going to be more specs.

00:22:09,779 --> 00:22:13,460
And I think we have a really cool opportunity.

00:22:13,460 --> 00:22:17,990
So I ask: what do we even mean when we talk about programming?

00:22:17,990 --> 00:22:19,350
This guy is Martin Heidegger.

00:22:19,350 --> 00:22:20,450
I really like him.

00:22:20,450 --> 00:22:22,490
He's one of my favorite philosophers.

00:22:22,490 --> 00:22:27,900
And he wrote a book, and in it, he says thus:

00:22:27,900 --> 00:22:32,640
the most thought provoking thing in our thought provoking time is that we are

00:22:32,640 --> 00:22:35,919
still not thinking.

00:22:35,919 --> 00:22:38,470
And this is going to sound a little Kumbaya, but take

00:22:38,470 --> 00:22:39,920
it seriously.

00:22:39,920 --> 00:22:41,420
Are we programming yet?

00:22:41,420 --> 00:22:43,500
Like, I mean it.

00:22:43,500 --> 00:22:44,550
All right?

00:22:44,550 --> 00:22:49,270
There are people who are radically redefining what it means to program.

00:22:49,270 --> 00:22:54,440
And if we understand that programming is just abstraction, do we need to be sitting at a

00:22:54,440 --> 00:22:56,179
terminal, typing a lot of punctuation?

00:22:56,179 --> 00:22:57,980
All right?

00:22:57,980 --> 00:23:00,179
There are people who are really changing that.

00:23:00,179 --> 00:23:04,121
And I'm kind of pissed, because all of those people are in grad school, and I

00:23:04,121 --> 00:23:06,600
just don't have enough money for that.

00:23:06,600 --> 00:23:07,710
And I think...

00:23:07,710 --> 00:23:10,130
I think that we should be doing it here.

00:23:10,130 --> 00:23:11,880
Why are we not thinking like this?

00:23:11,880 --> 00:23:12,880
All right?

00:23:12,880 --> 00:23:14,190
This is Thomas Kuhn.

00:23:14,190 --> 00:23:15,490
He's a philosopher of science.

00:23:15,490 --> 00:23:18,159
He wrote a book about why science doesn't make progress.

00:23:18,159 --> 00:23:21,130
It's really about the rearticulation of language.

00:23:21,130 --> 00:23:24,169
That aside, he says this.

00:23:24,169 --> 00:23:26,340
And this is really important.

00:23:26,340 --> 00:23:30,610
Scientists work from models, acquired through education and through subsequent

00:23:30,610 --> 00:23:32,080
exposure to literature.

00:23:32,080 --> 00:23:38,640
Often without quite knowing or needing to know what characteristics have given

00:23:38,640 --> 00:23:41,789
those models the status of community paradigms.

00:23:41,789 --> 00:23:43,590
Like, why are we...

00:23:43,590 --> 00:23:47,270
We can do better.

00:23:47,270 --> 00:23:53,260
We have an awesome opportunity to way more radically think about how we extend JavaScript.

00:23:53,260 --> 00:23:55,279
We don't need to join the cool kids club.

00:23:55,279 --> 00:23:57,980
Like, I think to a certain extent, some features are kind of

00:23:57,980 --> 00:23:58,980
like...

00:23:58,980 --> 00:24:02,570
The Abercrombie and Fitch shirt of languages in middle school.

00:24:02,570 --> 00:24:05,670
We can really, really change things.

00:24:05,670 --> 00:24:07,260
All right?

00:24:07,260 --> 00:24:08,260
Carl Sagan.

00:24:08,260 --> 00:24:09,260
I'll end with this.

00:24:09,260 --> 00:24:12,340
It is far better to grasp the universe as it really

00:24:12,340 --> 00:24:19,630
is, than to persist in delusion, however satisfying and reassuring.

00:24:19,630 --> 00:24:22,799
So I want us to think about our ontology.

00:24:22,799 --> 00:24:24,890
Think about it a lot.

00:24:24,890 --> 00:24:26,429
This is, like, actual work.

00:24:26,429 --> 00:24:28,800
Even though it's not necessarily code.

00:24:28,800 --> 00:24:33,380
And the key to doing this is staying a beginner.

00:24:33,380 --> 00:24:34,650
Always.

00:24:34,650 --> 00:24:36,710
You guys are awesome.

00:24:36,710 --> 00:24:39,990
Thank you.

00:24:39,990 --> 00:24:41,640
So...

00:24:41,640 --> 00:24:46,500
I have one last thing.

00:24:46,500 --> 00:24:47,500
In my last four minutes.

00:24:47,500 --> 00:24:50,580
This is a shoutout again, to all my beginner students -- when

00:24:50,580 --> 00:24:55,940
I was a teacher, they made me a website.

00:24:55,940 --> 00:24:58,660
And the website is called Clap for Ashley.

00:24:58,660 --> 00:25:02,409
And if you happened to enjoy this talk or want to see something on

00:25:02,409 --> 00:25:06,450
the screen, if you tweet at Clap for Ashley now, it'll appear.

00:25:06,450 --> 00:25:08,100
Thank you.

00:25:08,100 --> 00:25:09,100
So...

00:25:09,100 --> 00:25:12,260
The internet might not work also.

00:25:12,260 --> 00:25:15,130
No one is going to clap?

00:25:15,130 --> 00:25:16,130
It happened!

00:25:16,130 --> 00:25:17,999

YouTube URL: https://www.youtube.com/watch?v=DN4yLZB1vUQ


