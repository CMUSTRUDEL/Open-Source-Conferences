Title: Matt Edelman: Nemo. The natural nodejs automation solution | JSConf US 2015
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	Introducing NemoJS (http://nemo.js.org, https://github.com/paypal/nemo), a test and task runner agnostic selenium wrapper - with confit (https://github.com/krakenjs/confit) for configuration and a plugin architecture for precise customization and modularity.

Transcript: https://gist.github.com/voodootikigod/84fbe0b6838f23099b8a
Captions: 
	00:00:14,110 --> 00:00:21,349
thanks everybody thanks to jay s comp

00:00:19,060 --> 00:00:23,090
I'm going to try it the first part of

00:00:21,349 --> 00:00:24,590
the slides hopefully is going to be

00:00:23,090 --> 00:00:27,349
somewhat entertaining it's kind of a

00:00:24,590 --> 00:00:28,670
reminiscence of this conference and some

00:00:27,349 --> 00:00:32,780
other just some sort of getting started

00:00:28,670 --> 00:00:35,690
stuff so first of all a great big thanks

00:00:32,780 --> 00:00:37,940
to John Charles Sisk who's a teammate of

00:00:35,690 --> 00:00:40,760
virus on the kraken team who got this

00:00:37,940 --> 00:00:43,489
slot and then gave it to me he's not

00:00:40,760 --> 00:00:45,170
here he had to leave early and he sent

00:00:43,489 --> 00:00:46,970
us this picture in slack and he actually

00:00:45,170 --> 00:00:49,100
was not wearing a shirt so I did

00:00:46,970 --> 00:00:53,839
everybody a favor and just really

00:00:49,100 --> 00:00:55,369
quickly put a put a shirt on him he's

00:00:53,839 --> 00:00:56,750
got so much chest hair it almost looked

00:00:55,369 --> 00:01:01,970
like he had a sweater on but still it

00:00:56,750 --> 00:01:03,680
was ok also it's been a long conference

00:01:01,970 --> 00:01:05,360
and at this point for those of you who

00:01:03,680 --> 00:01:07,790
have families that didn't travel with

00:01:05,360 --> 00:01:10,610
you I'm sure you missed them i miss my

00:01:07,790 --> 00:01:15,470
daughter the movie star and my son the

00:01:10,610 --> 00:01:17,329
movie star it's unfortunate max max gets

00:01:15,470 --> 00:01:22,100
two pictures because he's he's something

00:01:17,329 --> 00:01:26,149
so that's him trying on my shorts I took

00:01:22,100 --> 00:01:28,579
a while right ok so another kind of

00:01:26,149 --> 00:01:32,390
reminiscence is that I grew up in the

00:01:28,579 --> 00:01:35,689
80s as a lot of us did and there was

00:01:32,390 --> 00:01:36,890
aspects of the 80s that still today seem

00:01:35,689 --> 00:01:39,140
like they didn't ever happen and they

00:01:36,890 --> 00:01:41,060
might not ever happen but they happen or

00:01:39,140 --> 00:01:43,939
they seem to have happened and that's

00:01:41,060 --> 00:01:45,530
the thing about nostalgia is that you

00:01:43,939 --> 00:01:47,210
know when something's happening it's

00:01:45,530 --> 00:01:48,710
hard to tell that it's this magical

00:01:47,210 --> 00:01:50,509
thing it's only later on you look back

00:01:48,710 --> 00:01:52,700
and you kind of pick that out as a time

00:01:50,509 --> 00:01:56,450
period and say you know this thing this

00:01:52,700 --> 00:01:58,429
thing was pretty special in fact when

00:01:56,450 --> 00:01:59,630
during the 80s I was spending a lot of

00:01:58,429 --> 00:02:01,159
time trying to pretend it wasn't

00:01:59,630 --> 00:02:03,889
happening because some of that you know

00:02:01,159 --> 00:02:06,139
some of the culture was felt you know we

00:02:03,889 --> 00:02:08,899
kind of felt wrong in a way but any case

00:02:06,139 --> 00:02:11,420
in the future keyboards will be held

00:02:08,899 --> 00:02:14,950
like guitars it's hard to imagine but it

00:02:11,420 --> 00:02:19,810
will happen someday cops will wear toms

00:02:14,950 --> 00:02:22,270
so no socks and they'll drive Ferraris

00:02:19,810 --> 00:02:27,489
there will be a media channel devoted to

00:02:22,270 --> 00:02:30,520
music videos and cars will have gold

00:02:27,489 --> 00:02:33,550
wing doors and people will dress up in

00:02:30,520 --> 00:02:37,930
the desperate Star Wars movies will be

00:02:33,550 --> 00:02:39,910
good got to look forward to that okay my

00:02:37,930 --> 00:02:41,260
point is it sort of made it part of my

00:02:39,910 --> 00:02:42,760
point is that when I when I get a few

00:02:41,260 --> 00:02:44,319
drinks in me all pick a ridiculous

00:02:42,760 --> 00:02:45,640
premise like the 80s is the future and

00:02:44,319 --> 00:02:47,080
I'll try to defend that while everybody

00:02:45,640 --> 00:02:49,030
around looks at me like I'm crazy so

00:02:47,080 --> 00:02:52,269
just wanted to bring that to that

00:02:49,030 --> 00:02:54,160
happened a couple of nights ago so let

00:02:52,269 --> 00:02:58,150
me move on into what's happened to

00:02:54,160 --> 00:03:01,299
paypal since we started using nodejs it

00:02:58,150 --> 00:03:04,150
came in as a prototyping framework so

00:03:01,299 --> 00:03:07,360
some people came over from netflix bill

00:03:04,150 --> 00:03:09,989
Scott Jeff Harrell Eric Toth and they

00:03:07,360 --> 00:03:12,220
basically said hey we want to transform

00:03:09,989 --> 00:03:13,360
you know what's going on at PayPal in a

00:03:12,220 --> 00:03:15,599
lot of ways and part of that is the

00:03:13,360 --> 00:03:18,519
technology so let's see if we can build

00:03:15,599 --> 00:03:20,769
you know product faster with nodejs then

00:03:18,519 --> 00:03:22,269
we were able to with job and that's

00:03:20,769 --> 00:03:24,310
something that happened and there's some

00:03:22,269 --> 00:03:25,630
talks around that Jeff's given some

00:03:24,310 --> 00:03:28,150
talks about that so I'm not going to go

00:03:25,630 --> 00:03:29,950
into great detail but the result was

00:03:28,150 --> 00:03:31,630
that we started developing all of our

00:03:29,950 --> 00:03:34,329
products all of our web and mid-tier

00:03:31,630 --> 00:03:38,380
products on crack and jas which sits

00:03:34,329 --> 00:03:40,720
over expressed so what that left us with

00:03:38,380 --> 00:03:43,000
was people writing applications in

00:03:40,720 --> 00:03:45,700
JavaScript but still writing the

00:03:43,000 --> 00:03:47,350
automation tests using Java using the

00:03:45,700 --> 00:03:53,290
framework that we use to write tests in

00:03:47,350 --> 00:03:55,090
Java so before I get to that if you

00:03:53,290 --> 00:03:56,920
weren't here for Dave cadwaladrs talk

00:03:55,090 --> 00:03:59,709
earlier he showed the testing pyramid

00:03:56,920 --> 00:04:01,480
where UI tests it at the top that's a

00:03:59,709 --> 00:04:04,660
great pyramid and some people at PayPal

00:04:01,480 --> 00:04:06,220
flight like to use that analogy as well

00:04:04,660 --> 00:04:07,480
it's not in my slides but I just wanted

00:04:06,220 --> 00:04:10,090
say you know I agree with that as well

00:04:07,480 --> 00:04:11,350
that UI tests you know are important and

00:04:10,090 --> 00:04:14,650
they sit you know on the top they

00:04:11,350 --> 00:04:17,709
shouldn't be everything you rely upon so

00:04:14,650 --> 00:04:20,260
why should you test well let's take an

00:04:17,709 --> 00:04:22,080
analogy so here's John Charles Sisk

00:04:20,260 --> 00:04:24,460
again and this is from a golfing

00:04:22,080 --> 00:04:28,180
excursion that I wasn't on yesterday I

00:04:24,460 --> 00:04:31,120
guess but we'll use golf as an analogy

00:04:28,180 --> 00:04:32,979
for web development or product

00:04:31,120 --> 00:04:33,490
development and these guys who went

00:04:32,979 --> 00:04:34,990
golfing

00:04:33,490 --> 00:04:37,539
are some of the best developers we have

00:04:34,990 --> 00:04:38,979
at the company so let's say they're the

00:04:37,539 --> 00:04:40,150
best golfers that you could possibly

00:04:38,979 --> 00:04:43,000
have so they went to the golf course

00:04:40,150 --> 00:04:47,440
with their golf sticks to knock the ball

00:04:43,000 --> 00:04:48,910
into the into the goal so here here's

00:04:47,440 --> 00:04:53,889
them starting out there having a great

00:04:48,910 --> 00:04:56,860
day their developers look at that that's

00:04:53,889 --> 00:04:58,240
beautiful form right so you know they're

00:04:56,860 --> 00:04:59,740
great they should never make any

00:04:58,240 --> 00:05:01,060
mistakes because you going out your

00:04:59,740 --> 00:05:03,069
golfing everything's fine you know how

00:05:01,060 --> 00:05:04,990
to golf you're a great golfer okay well

00:05:03,069 --> 00:05:07,270
but sometimes you don't have your best

00:05:04,990 --> 00:05:08,470
day sometimes you know maybe you stayed

00:05:07,270 --> 00:05:09,789
up the night before or you're just

00:05:08,470 --> 00:05:13,479
you're a little bit distracted so

00:05:09,789 --> 00:05:19,229
mistakes get made and sometimes side

00:05:13,479 --> 00:05:22,900
effects get introduced into your code so

00:05:19,229 --> 00:05:29,590
call that the side it back anyway okay

00:05:22,900 --> 00:05:32,349
and here's here's Jeff taking a swing so

00:05:29,590 --> 00:05:34,090
why test well even great developers have

00:05:32,349 --> 00:05:36,400
their days when something gets through

00:05:34,090 --> 00:05:38,050
right so that that's why test oh and

00:05:36,400 --> 00:05:43,599
sometimes turtles end up on the golf

00:05:38,050 --> 00:05:47,009
course as well moving fast for a turtle

00:05:43,599 --> 00:05:49,719
right okay so let's test finally

00:05:47,009 --> 00:05:52,000
selenium 101 for those of you who don't

00:05:49,719 --> 00:05:53,440
kind of use it on a day-to-day basis or

00:05:52,000 --> 00:05:56,770
have a lot of familiarity with it is

00:05:53,440 --> 00:05:58,750
this fairly complex system whereby

00:05:56,770 --> 00:06:00,490
you've got your language binding on the

00:05:58,750 --> 00:06:02,520
left there where you write your test

00:06:00,490 --> 00:06:05,020
whether it's in Java Python JavaScript

00:06:02,520 --> 00:06:06,550
and then you've got JSON wire protocol

00:06:05,020 --> 00:06:09,460
that communicates with some sort of

00:06:06,550 --> 00:06:10,870
intermediary like a browser driver so it

00:06:09,460 --> 00:06:13,210
might communicate with the driver on

00:06:10,870 --> 00:06:15,009
your system itself or it might

00:06:13,210 --> 00:06:17,229
communicate with the cloud that then

00:06:15,009 --> 00:06:19,960
opens up another target and does some

00:06:17,229 --> 00:06:22,210
stuff so this is this is just kind of

00:06:19,960 --> 00:06:23,800
again kind of 101 and there's the rabbit

00:06:22,210 --> 00:06:25,900
in the Hat because to me this stuff to

00:06:23,800 --> 00:06:27,280
the right is magic and it works or

00:06:25,900 --> 00:06:28,659
there's bugs and sometimes you have to

00:06:27,280 --> 00:06:31,030
kind of figure out what you know which

00:06:28,659 --> 00:06:33,340
of those components has a bug and report

00:06:31,030 --> 00:06:35,620
it to the selenium team but for the most

00:06:33,340 --> 00:06:38,560
part we're going to be on the left side

00:06:35,620 --> 00:06:41,500
so where does Nemo fit it fits on this

00:06:38,560 --> 00:06:44,529
left side where the language bindings

00:06:41,500 --> 00:06:47,110
were so selenium webdriver is an NPM

00:06:44,529 --> 00:06:49,600
module that has the JavaScript bindings

00:06:47,110 --> 00:06:52,360
and it starts a you know a server if

00:06:49,600 --> 00:06:56,350
necessary it sets capabilities it

00:06:52,360 --> 00:06:58,000
provides the webdriver API and it you

00:06:56,350 --> 00:07:00,040
know gives you the tools that you need

00:06:58,000 --> 00:07:03,700
to execute commands and control browser

00:07:00,040 --> 00:07:07,990
or device so what Nemo does is it sits

00:07:03,700 --> 00:07:10,000
around that it's a rapper that basically

00:07:07,990 --> 00:07:13,930
gives you some tools for configuring

00:07:10,000 --> 00:07:16,810
that webdriver and also gives you a

00:07:13,930 --> 00:07:18,820
plug-in capability so that you can kind

00:07:16,810 --> 00:07:20,950
of make the system that you need it's

00:07:18,820 --> 00:07:23,590
it's nothing but giving you the tools to

00:07:20,950 --> 00:07:25,180
make the system that you need and and

00:07:23,590 --> 00:07:27,550
you know we're going to look at some of

00:07:25,180 --> 00:07:28,840
the plugins that I've made that I think

00:07:27,550 --> 00:07:31,270
makes the most sense but the idea is

00:07:28,840 --> 00:07:33,160
that anybody can come and make their own

00:07:31,270 --> 00:07:36,220
set of plugins to do to do the things

00:07:33,160 --> 00:07:39,040
that they need to do so the the plug-in

00:07:36,220 --> 00:07:41,920
that I use primarily is called Nemo view

00:07:39,040 --> 00:07:43,780
which we're going to go into and you

00:07:41,920 --> 00:07:45,190
know other plugins so whatever you want

00:07:43,780 --> 00:07:47,860
to put in there whatever you need kind

00:07:45,190 --> 00:07:49,270
of a thing on top of that so at this

00:07:47,860 --> 00:07:50,710
point we're just launching a webdriver

00:07:49,270 --> 00:07:52,480
we're just launching a browser and

00:07:50,710 --> 00:07:54,100
running commands but you still have to

00:07:52,480 --> 00:07:57,600
have some sort of a test run or like

00:07:54,100 --> 00:08:01,180
mocha or cucumber or jasmine or whatever

00:07:57,600 --> 00:08:02,710
so that's something but again Nemo isn't

00:08:01,180 --> 00:08:04,150
prescribing what you use it's just

00:08:02,710 --> 00:08:06,700
saying here's here's this piece of it

00:08:04,150 --> 00:08:08,500
now you know you use your test runner we

00:08:06,700 --> 00:08:11,350
like to use mocha so all of my examples

00:08:08,500 --> 00:08:14,410
use mocha and then on top of that you

00:08:11,350 --> 00:08:16,450
need a task runner usually and at PayPal

00:08:14,410 --> 00:08:18,040
we've been using grunt a lot people are

00:08:16,450 --> 00:08:20,200
poking around with Gulf and obviously

00:08:18,040 --> 00:08:22,090
for private projects people are but it's

00:08:20,200 --> 00:08:25,030
not at least within paypal it's not

00:08:22,090 --> 00:08:26,470
being heavily used yet and then I heard

00:08:25,030 --> 00:08:30,100
of one called broccoli but I haven't

00:08:26,470 --> 00:08:31,750
looked into it yeah so you need kind of

00:08:30,100 --> 00:08:35,350
all these components to make a full

00:08:31,750 --> 00:08:37,830
automation solution and if you look at

00:08:35,350 --> 00:08:40,510
the selenium webdriver example script

00:08:37,830 --> 00:08:44,050
for how to get started in JavaScript

00:08:40,510 --> 00:08:45,670
this is the basic script that you see so

00:08:44,050 --> 00:08:49,360
what we want to do was to take it from

00:08:45,670 --> 00:08:50,980
here to here so that all this all this

00:08:49,360 --> 00:08:54,460
other stuff like you see a lot of

00:08:50,980 --> 00:08:57,550
configuration here is put somewhere else

00:08:54,460 --> 00:08:59,010
so this is basically what an emo you

00:08:57,550 --> 00:09:00,720
know installation might look like

00:08:59,010 --> 00:09:02,520
and then of course we want to add some

00:09:00,720 --> 00:09:05,040
error handling into the end of the call

00:09:02,520 --> 00:09:06,300
back because it's often you know with

00:09:05,040 --> 00:09:07,440
the configurations wrong you're going to

00:09:06,300 --> 00:09:11,280
get an error back and if you don't do

00:09:07,440 --> 00:09:13,020
this you're not going to see it okay so

00:09:11,280 --> 00:09:15,630
again we're going to research back what

00:09:13,020 --> 00:09:18,690
is Nemo do it loads JSON configuration

00:09:15,630 --> 00:09:22,080
using a module called kind of fee which

00:09:18,690 --> 00:09:24,720
is used within Kraken as well it

00:09:22,080 --> 00:09:26,280
basically does JSON but it does

00:09:24,720 --> 00:09:27,930
overrides and it also has something

00:09:26,280 --> 00:09:29,640
called shortstop handlers which makes

00:09:27,930 --> 00:09:32,040
the it just gives you a lot of

00:09:29,640 --> 00:09:34,290
dimensions of control when you're when

00:09:32,040 --> 00:09:36,000
you're doing your configuration so Nemo

00:09:34,290 --> 00:09:38,610
also takes that configuration and it

00:09:36,000 --> 00:09:41,010
starts the webdriver it initializes your

00:09:38,610 --> 00:09:44,430
plugins and provides you access to that

00:09:41,010 --> 00:09:45,810
to that whole API of the Nemo API so

00:09:44,430 --> 00:09:47,880
first of all it gives you the webdriver

00:09:45,810 --> 00:09:50,310
API on the namespace that it gives you

00:09:47,880 --> 00:09:53,130
back you get the driver and WD which are

00:09:50,310 --> 00:09:58,110
the two major components of the selenium

00:09:53,130 --> 00:10:00,570
webdriver API so let's talk about confi

00:09:58,110 --> 00:10:06,630
for a minute just to explore how the

00:10:00,570 --> 00:10:08,820
configuration works so comfy gives you

00:10:06,630 --> 00:10:12,540
something called the the node n override

00:10:08,820 --> 00:10:15,300
so the value of the node n variable in

00:10:12,540 --> 00:10:17,280
your environment can determine sort of

00:10:15,300 --> 00:10:19,440
what overrides get used in your in your

00:10:17,280 --> 00:10:21,030
configuration and on top of that it uses

00:10:19,440 --> 00:10:23,490
something called a shortstop in

00:10:21,030 --> 00:10:25,850
shortstop handlers which was also built

00:10:23,490 --> 00:10:28,440
by the Kraken team and these would be

00:10:25,850 --> 00:10:32,310
values that you put in your JSON where

00:10:28,440 --> 00:10:35,300
if a handler is encountered so let's say

00:10:32,310 --> 00:10:37,830
that a JSON value has this handler n

00:10:35,300 --> 00:10:40,140
then shortstop's going to look in the

00:10:37,830 --> 00:10:43,440
environment for this this variable foo

00:10:40,140 --> 00:10:45,060
and replace in the JSON that value so

00:10:43,440 --> 00:10:49,800
these shortstop handlers do various

00:10:45,060 --> 00:10:51,870
things there's n path RV and config that

00:10:49,800 --> 00:10:54,300
that basically take your JSON and make

00:10:51,870 --> 00:10:56,010
it a lot more intelligent and again give

00:10:54,300 --> 00:10:58,860
you more dimensions of control over your

00:10:56,010 --> 00:11:00,270
configuration so what what your

00:10:58,860 --> 00:11:02,850
configuration directory might look like

00:11:00,270 --> 00:11:05,370
if you're using Nemo would be that you'd

00:11:02,850 --> 00:11:08,040
have your main config JSON and then

00:11:05,370 --> 00:11:10,170
you'd have other environment specific

00:11:08,040 --> 00:11:12,510
override files like here we've got a OS

00:11:10,170 --> 00:11:14,040
driver local perfecto mobile

00:11:12,510 --> 00:11:16,710
Labs it just it depends on what you're

00:11:14,040 --> 00:11:18,420
doing what those might be and to give

00:11:16,710 --> 00:11:19,980
some sense of what the configuration

00:11:18,420 --> 00:11:22,050
would look like just your basic

00:11:19,980 --> 00:11:24,120
configuration tells the driver to launch

00:11:22,050 --> 00:11:27,960
this browser and then there's the

00:11:24,120 --> 00:11:29,550
plugins and the data properties which

00:11:27,960 --> 00:11:32,250
which are optional but we'll get into

00:11:29,550 --> 00:11:33,750
those a bit later and sauce labs might

00:11:32,250 --> 00:11:35,490
look more like this where we're telling

00:11:33,750 --> 00:11:37,350
the webdriver some other stuff like you

00:11:35,490 --> 00:11:39,630
know what's my sauce username what's my

00:11:37,350 --> 00:11:41,490
sauce key and you can see that we're

00:11:39,630 --> 00:11:43,650
using the end of shortstop handler so

00:11:41,490 --> 00:11:45,630
that our you know on your local machine

00:11:43,650 --> 00:11:48,180
you've got your key you know there but

00:11:45,630 --> 00:11:49,830
it's not checked into source control so

00:11:48,180 --> 00:11:53,880
there's like a sauce labs kind of config

00:11:49,830 --> 00:11:55,770
and perfecto mobile is another another

00:11:53,880 --> 00:11:58,950
cloud based testing service and they use

00:11:55,770 --> 00:12:00,330
a different set of capabilities iOS

00:11:58,950 --> 00:12:02,130
driver the same thing you're just

00:12:00,330 --> 00:12:06,180
basically giving the webdriver different

00:12:02,130 --> 00:12:08,120
stuff to contact a different driver so

00:12:06,180 --> 00:12:11,460
really quickly we're going to do a

00:12:08,120 --> 00:12:12,870
screencast which hopefully you can see

00:12:11,460 --> 00:12:15,510
if you're sitting a bit far away i'll

00:12:12,870 --> 00:12:18,570
try and zoom in if it makes sense at

00:12:15,510 --> 00:12:20,910
times so this is an example that comes

00:12:18,570 --> 00:12:22,670
in the nemo repository if you clone it

00:12:20,910 --> 00:12:28,200
there's just an examples directory and

00:12:22,670 --> 00:12:29,670
here we're giving a base directory into

00:12:28,200 --> 00:12:32,100
the nemo constructor which isn't

00:12:29,670 --> 00:12:33,620
standard but just in terms of showing an

00:12:32,100 --> 00:12:35,850
example this is this is one way to do it

00:12:33,620 --> 00:12:37,590
and if you look in that directory that

00:12:35,850 --> 00:12:43,230
it's pointing to there's this config

00:12:37,590 --> 00:12:49,710
JSON and it's got a the driver section

00:12:43,230 --> 00:12:51,210
in a browser section and we're just

00:12:49,710 --> 00:12:54,960
going to go ahead and run that and see

00:12:51,210 --> 00:12:57,920
what browser we open the Firefox opens

00:12:54,960 --> 00:13:01,850
up we got a little printout that says

00:12:57,920 --> 00:13:01,850
successfully launched Firefox

00:13:07,050 --> 00:13:15,990
so if we set the node environment

00:13:09,720 --> 00:13:18,000
variable to special a little bit so this

00:13:15,990 --> 00:13:20,130
time we launched phantom j/s just by

00:13:18,000 --> 00:13:22,470
resetting the the node environment

00:13:20,130 --> 00:13:26,029
variable and that's because in this

00:13:22,470 --> 00:13:30,870
special JSON and the driver section were

00:13:26,029 --> 00:13:32,640
specifying phantom jas so that's to

00:13:30,870 --> 00:13:38,850
illustrate the the environment variable

00:13:32,640 --> 00:13:41,339
type of override so the next thing is

00:13:38,850 --> 00:13:43,290
that notice that there's this shortstop

00:13:41,339 --> 00:13:45,089
handler here that says config colon

00:13:43,290 --> 00:13:46,769
browser so that's at the shortstop

00:13:45,089 --> 00:13:49,110
handle that saying look look for this

00:13:46,769 --> 00:13:51,390
browser configuration property and get

00:13:49,110 --> 00:13:53,250
that value and another feature of

00:13:51,390 --> 00:13:54,600
shortstop is that if you have something

00:13:53,250 --> 00:13:57,149
at the base of your JSON you can

00:13:54,600 --> 00:13:58,500
override it with an RV or an environment

00:13:57,149 --> 00:14:01,519
variable so we're going to show that by

00:13:58,500 --> 00:14:05,820
specifying RV to Chrome and launched

00:14:01,519 --> 00:14:07,709
chrome instead you can also set an

00:14:05,820 --> 00:14:09,480
environment variable of browser and do

00:14:07,709 --> 00:14:18,029
the same thing so this is this is just a

00:14:09,480 --> 00:14:20,490
little confusing phantom jas in the

00:14:18,029 --> 00:14:22,350
environment variable and that should

00:14:20,490 --> 00:14:25,910
launch phantom j/s so we won't actually

00:14:22,350 --> 00:14:25,910
see a browser open

00:14:28,870 --> 00:14:33,970
and then just to kind of drive the point

00:14:31,900 --> 00:14:35,500
home if you use both at the same time if

00:14:33,970 --> 00:14:38,800
you use an environment variable of

00:14:35,500 --> 00:14:40,540
browser and an RV of browser which one

00:14:38,800 --> 00:14:44,020
would would take precedence and I think

00:14:40,540 --> 00:14:45,700
most people would expect that the RV

00:14:44,020 --> 00:14:48,210
would take precedence which it does so

00:14:45,700 --> 00:14:50,560
we launched chrome in that last example

00:14:48,210 --> 00:14:52,480
so that is just a quick intro to

00:14:50,560 --> 00:14:53,950
basically how you can do file based

00:14:52,480 --> 00:14:58,480
overrides in a little bit of shortstop

00:14:53,950 --> 00:15:01,690
handler business within within Nemo the

00:14:58,480 --> 00:15:03,430
second major component of Nemo is plugin

00:15:01,690 --> 00:15:05,710
so let's talk about those what would be

00:15:03,430 --> 00:15:07,690
in a plug-in you might have webdriver

00:15:05,710 --> 00:15:09,490
abstractions so some combination of

00:15:07,690 --> 00:15:11,410
things that make sense together you

00:15:09,490 --> 00:15:12,700
might put user interactions together in

00:15:11,410 --> 00:15:15,610
a plug-in because you want to share it

00:15:12,700 --> 00:15:18,130
between projects or you're a company

00:15:15,610 --> 00:15:20,050
that does stuff internally for testing

00:15:18,130 --> 00:15:23,770
you might put proprietary sort of

00:15:20,050 --> 00:15:25,029
functionality in a plug-in and a plug-in

00:15:23,770 --> 00:15:29,560
basically looks something like this

00:15:25,029 --> 00:15:31,360
where you've got a setup function that

00:15:29,560 --> 00:15:32,560
gets exported from your module and that

00:15:31,360 --> 00:15:34,900
setup function just has a simple

00:15:32,560 --> 00:15:38,560
signature of taking the Nemo object and

00:15:34,900 --> 00:15:41,140
a callback and then you add something to

00:15:38,560 --> 00:15:43,779
the Nemo namespace so for example sorry

00:15:41,140 --> 00:15:45,790
example Nemo dot log in is saying that

00:15:43,779 --> 00:15:48,700
when the Nemo object gets resolved now

00:15:45,790 --> 00:15:50,920
we've got this Nemo dot log in namespace

00:15:48,700 --> 00:15:53,260
in this case it's a function that that's

00:15:50,920 --> 00:15:54,730
going to log you in so I just you know

00:15:53,260 --> 00:15:57,400
put a comment in there and said this is

00:15:54,730 --> 00:16:01,690
webdriver stuff that will log you in so

00:15:57,400 --> 00:16:04,390
that's basically what what a plug-in

00:16:01,690 --> 00:16:06,459
looks like and if you want to configure

00:16:04,390 --> 00:16:09,490
a plug-in you just add it to the to the

00:16:06,459 --> 00:16:10,990
configuration you say my plugins called

00:16:09,490 --> 00:16:13,029
log in and the module is either

00:16:10,990 --> 00:16:15,370
somewhere in my file path or it's

00:16:13,029 --> 00:16:19,000
actually module in my dependency tree in

00:16:15,370 --> 00:16:20,890
this case it's in the file path and to

00:16:19,000 --> 00:16:23,410
use it once you've got an emo resolved

00:16:20,890 --> 00:16:24,880
and back to you you just call it an

00:16:23,410 --> 00:16:26,800
emote log in and you pass whatever

00:16:24,880 --> 00:16:31,630
parameters so that's how you author

00:16:26,800 --> 00:16:33,580
register and use a plug-in and the

00:16:31,630 --> 00:16:35,860
plug-in that I authored to be sort of

00:16:33,580 --> 00:16:38,200
our you know favorite or promoted

00:16:35,860 --> 00:16:41,920
webdriver abstraction is called Nemo

00:16:38,200 --> 00:16:42,970
view and if you look at that here's sort

00:16:41,920 --> 00:16:45,100
of three levels the first

00:16:42,970 --> 00:16:47,649
level is what you would do in basic web

00:16:45,100 --> 00:16:50,379
driver to find an element and click on

00:16:47,649 --> 00:16:52,209
it the second line is what you do with

00:16:50,379 --> 00:16:54,129
Nemo view if you use these underscore

00:16:52,209 --> 00:16:57,670
methods that just take a simplified

00:16:54,129 --> 00:16:59,500
locator basically we're providing a CSS

00:16:57,670 --> 00:17:01,600
locator and then you can click on it and

00:16:59,500 --> 00:17:05,010
then the third level is if you use the

00:17:01,600 --> 00:17:07,480
locator abstraction which will namespace

00:17:05,010 --> 00:17:10,630
sets of locators so in this case Nemo

00:17:07,480 --> 00:17:12,220
view Nev bank is just going to give you

00:17:10,630 --> 00:17:13,780
back your web element and then you click

00:17:12,220 --> 00:17:16,390
on it see these are sort of the three

00:17:13,780 --> 00:17:18,970
layers I think you'd probably agree that

00:17:16,390 --> 00:17:21,579
the third is more palatable than the

00:17:18,970 --> 00:17:25,809
first so what we'll drill into that a

00:17:21,579 --> 00:17:27,909
little bit first of all this is how you

00:17:25,809 --> 00:17:30,130
would register Nemo view it's a module

00:17:27,909 --> 00:17:32,710
from NPM so it would look like this you

00:17:30,130 --> 00:17:36,370
you say I have this view plug-in with

00:17:32,710 --> 00:17:37,840
module of an emo view and what it gives

00:17:36,370 --> 00:17:41,610
you by default is it gives you these

00:17:37,840 --> 00:17:44,320
basic abstraction methods that you

00:17:41,610 --> 00:17:46,630
supply just a string to and then you get

00:17:44,320 --> 00:17:48,610
you get your element back so there's

00:17:46,630 --> 00:17:50,650
fine finds present visible wait wait

00:17:48,610 --> 00:17:52,299
visible and first visible the last two

00:17:50,650 --> 00:17:55,059
are kind of the ones that I use a lot

00:17:52,299 --> 00:17:56,890
for asynchronous testing that way you

00:17:55,059 --> 00:17:58,690
don't do stuff like put you know ten

00:17:56,890 --> 00:17:59,919
second time outs between this command

00:17:58,690 --> 00:18:00,760
and you know wait for the next thing

00:17:59,919 --> 00:18:04,450
because that's always going to be

00:18:00,760 --> 00:18:05,950
brittle so for example this is adding a

00:18:04,450 --> 00:18:08,260
bank in the sample application that

00:18:05,950 --> 00:18:09,730
we're going to see in a minute and I'll

00:18:08,260 --> 00:18:12,360
just kind of leave it there for a second

00:18:09,730 --> 00:18:12,360
so you can take a look

00:18:16,750 --> 00:18:21,160
okay so the next layer if you're not

00:18:19,120 --> 00:18:22,930
just using the the generic abstractions

00:18:21,160 --> 00:18:25,450
is to say I want to have a set of

00:18:22,930 --> 00:18:28,030
locator files to store my locators in so

00:18:25,450 --> 00:18:30,670
that they're shareable across files and

00:18:28,030 --> 00:18:33,340
locations so I'm going to specify this

00:18:30,670 --> 00:18:34,630
argument to Nemo view that says look in

00:18:33,340 --> 00:18:36,280
this directory there's some files there

00:18:34,630 --> 00:18:38,740
you should be interested in so there's

00:18:36,280 --> 00:18:40,150
this locator directory that you should

00:18:38,740 --> 00:18:42,790
look at so here's an example of a

00:18:40,150 --> 00:18:44,800
locator file it's just simple JSON and

00:18:42,790 --> 00:18:46,920
you can see that it's got a type and a

00:18:44,800 --> 00:18:51,700
locator so this is just defining

00:18:46,920 --> 00:18:54,040
elements for in this case a bank a bank

00:18:51,700 --> 00:18:55,960
form so there's a number routing button

00:18:54,040 --> 00:18:58,090
and then success and failure and we see

00:18:55,960 --> 00:18:59,800
how those are used in a minute so what

00:18:58,090 --> 00:19:02,110
happens is that Nemo view is going to

00:18:59,800 --> 00:19:04,060
generate functions that something

00:19:02,110 --> 00:19:05,860
javascript is great at its generating

00:19:04,060 --> 00:19:09,580
dynamic functions for each of the

00:19:05,860 --> 00:19:10,840
locators so look at the number and for

00:19:09,580 --> 00:19:12,910
the number you're going to get all these

00:19:10,840 --> 00:19:14,830
functions back you're going to get the

00:19:12,910 --> 00:19:17,020
basic one which returns the web element

00:19:14,830 --> 00:19:20,290
and then all these other ones that can

00:19:17,020 --> 00:19:23,530
do different things so this is what it

00:19:20,290 --> 00:19:26,200
looks like to add a bank using using

00:19:23,530 --> 00:19:28,150
that view so you're you're we're setting

00:19:26,200 --> 00:19:31,120
a couple of convenience variables and

00:19:28,150 --> 00:19:35,190
then we're using the the Nemo view

00:19:31,120 --> 00:19:35,190
methods to work through that that you I

00:19:36,120 --> 00:19:42,000
okay so let's really quickly this is

00:19:39,100 --> 00:19:44,260
about a five minute demo it's going to

00:19:42,000 --> 00:19:46,420
basically cover those points that I

00:19:44,260 --> 00:19:47,920
covered and we'll just do it again using

00:19:46,420 --> 00:19:50,380
the sample app this is something you can

00:19:47,920 --> 00:19:52,720
clone right now and an NPM install and

00:19:50,380 --> 00:19:54,550
just get it running what it is is it's

00:19:52,720 --> 00:19:57,670
called pay friend so it's like a little

00:19:54,550 --> 00:20:00,670
mini kind of PayPal type of application

00:19:57,670 --> 00:20:02,590
with with a sink it looks like one page

00:20:00,670 --> 00:20:04,170
application behavior so it gives you

00:20:02,590 --> 00:20:07,870
like a three-second weight between each

00:20:04,170 --> 00:20:09,430
activity so you can say fail at fail

00:20:07,870 --> 00:20:14,470
calm and it will fail log in and

00:20:09,430 --> 00:20:15,820
anything else would be success and then

00:20:14,470 --> 00:20:17,260
there's a couple of forms who's adding a

00:20:15,820 --> 00:20:18,910
cardan adding a bank and both of those

00:20:17,260 --> 00:20:21,690
also have the sort of success and

00:20:18,910 --> 00:20:21,690
failure scenarios

00:20:37,970 --> 00:20:44,090
so 100 100 1 is the failure number and

00:20:42,020 --> 00:20:47,770
anything else is success for these for

00:20:44,090 --> 00:20:47,770
these performs and you can log back out

00:20:51,160 --> 00:20:55,880
so what we're going to do is we're going

00:20:53,720 --> 00:20:58,400
to walk through sort of the timeline of

00:20:55,880 --> 00:21:00,440
how you would test an application so for

00:20:58,400 --> 00:21:03,410
example and this is just the

00:21:00,440 --> 00:21:05,630
configuration again but when you first

00:21:03,410 --> 00:21:07,070
start testing an application you're just

00:21:05,630 --> 00:21:09,590
kind of writing the test on the flyer

00:21:07,070 --> 00:21:13,480
just throwing the script together so it

00:21:09,590 --> 00:21:13,480
looks something like this generic spec

00:21:13,900 --> 00:21:18,500
where you know your locators are just

00:21:17,000 --> 00:21:20,270
right right in the file everything's

00:21:18,500 --> 00:21:22,580
just kind of like a big script literally

00:21:20,270 --> 00:21:23,690
it's just a big functional script so

00:21:22,580 --> 00:21:26,450
this is kind of what it looks like so

00:21:23,690 --> 00:21:29,540
you're using the generic methods to to

00:21:26,450 --> 00:21:33,610
run through the UI to to login add a

00:21:29,540 --> 00:21:33,610
card at a bank account

00:21:39,990 --> 00:21:46,760
okay so we're going to run that and it's

00:21:42,240 --> 00:21:46,760
using the mocha runner on webstorm

00:21:55,640 --> 00:22:03,290
and it just runs through all those

00:21:57,260 --> 00:22:06,560
scenarios and you can use any you don't

00:22:03,290 --> 00:22:08,960
have to use CSS locators you can use ID

00:22:06,560 --> 00:22:12,520
locators or any of the other available

00:22:08,960 --> 00:22:12,520
selenium locators

00:22:19,450 --> 00:22:25,210
okay so the next step of testing an

00:22:22,720 --> 00:22:26,740
application once once the UI starts to

00:22:25,210 --> 00:22:29,230
harden a bit is that you say well I want

00:22:26,740 --> 00:22:30,370
to start taking these locators out and I

00:22:29,230 --> 00:22:32,440
want to start putting them in a

00:22:30,370 --> 00:22:35,470
shareable location and that's where we

00:22:32,440 --> 00:22:38,529
would start using locator files so again

00:22:35,470 --> 00:22:40,090
we're telling nemo or an emo view rather

00:22:38,529 --> 00:22:45,970
to look for these JSON files in this

00:22:40,090 --> 00:22:48,250
directory so we've got this is bank card

00:22:45,970 --> 00:22:50,470
login and nav so these are basically in

00:22:48,250 --> 00:22:53,320
my mind when I when I split this

00:22:50,470 --> 00:22:55,690
application of those were the four parts

00:22:53,320 --> 00:23:03,279
of it and here's all the locators that

00:22:55,690 --> 00:23:05,289
you would need and and this would be the

00:23:03,279 --> 00:23:08,260
next step of the testing process where

00:23:05,289 --> 00:23:10,600
now we're using the locator files

00:23:08,260 --> 00:23:13,630
instead of the the generic methods so

00:23:10,600 --> 00:23:16,690
we're using the login view the card view

00:23:13,630 --> 00:23:22,929
the nav view and the bank view to run

00:23:16,690 --> 00:23:24,610
the test now so I'm just pointing out

00:23:22,929 --> 00:23:26,019
that there's the email locator and then

00:23:24,610 --> 00:23:27,789
there's all these functions that are

00:23:26,019 --> 00:23:29,320
built off of the email locator like wait

00:23:27,789 --> 00:23:31,330
visible so if the page is loading it

00:23:29,320 --> 00:23:32,740
will wait until it sees that element

00:23:31,330 --> 00:23:35,039
before it moves on and does these other

00:23:32,740 --> 00:23:35,039
things

00:23:53,120 --> 00:23:58,490
and just to compare back again that's

00:23:55,010 --> 00:24:00,590
the generic spec so we'll run the view

00:23:58,490 --> 00:24:02,420
based one and I didn't mention it but we

00:24:00,590 --> 00:24:04,070
did mention if we're using mocha to run

00:24:02,420 --> 00:24:08,680
these tests so you'll see mocha syntax

00:24:04,070 --> 00:24:08,680
around the webdriver commands

00:24:30,790 --> 00:24:35,590
okay so the final step in cleaning all

00:24:34,000 --> 00:24:38,140
this up is to say now I want to take

00:24:35,590 --> 00:24:39,700
similar functionality and group it

00:24:38,140 --> 00:24:43,390
together in different modules so for

00:24:39,700 --> 00:24:45,160
example i made this file navigate j/s

00:24:43,390 --> 00:24:49,360
that has all my navigation commands in

00:24:45,160 --> 00:24:51,240
it and is using the navigation view and

00:24:49,360 --> 00:24:53,740
some of the other views to do its work

00:24:51,240 --> 00:24:55,180
so this is this is you know you could do

00:24:53,740 --> 00:24:56,500
it however you want in your own project

00:24:55,180 --> 00:24:59,200
but this is the pattern that i recommend

00:24:56,500 --> 00:25:01,420
to people which is you know create these

00:24:59,200 --> 00:25:02,890
these flow files i call them and and

00:25:01,420 --> 00:25:05,260
kind of group similar functionality

00:25:02,890 --> 00:25:09,850
together and then when you write your

00:25:05,260 --> 00:25:11,320
tests the the actual code that you write

00:25:09,850 --> 00:25:12,940
is going to look very semantic and it's

00:25:11,320 --> 00:25:14,770
going to be pretty explanatory as far as

00:25:12,940 --> 00:25:17,350
what your test is doing so here I'm

00:25:14,770 --> 00:25:19,090
pulling in these three modules I'm

00:25:17,350 --> 00:25:22,240
puffing them up with the Nemo object

00:25:19,090 --> 00:25:23,950
when Nemo resolves and then in the

00:25:22,240 --> 00:25:26,500
actual test itself you can see again

00:25:23,950 --> 00:25:27,880
this is very I mean it's almost I mean

00:25:26,500 --> 00:25:29,470
you could read it even if you didn't

00:25:27,880 --> 00:25:31,600
know JavaScript okay we're logging in

00:25:29,470 --> 00:25:36,210
failure success for card adding success

00:25:31,600 --> 00:25:36,210
and failure Bank success and failure

00:25:45,799 --> 00:25:49,519
and as you can imagine it's all going to

00:25:47,869 --> 00:25:51,200
work because it's a screencast and I

00:25:49,519 --> 00:25:54,039
like to stay away from the demo you know

00:25:51,200 --> 00:25:54,039
the demo demons

00:26:00,480 --> 00:26:04,200
so that's basically a walkthrough of

00:26:02,429 --> 00:26:06,660
nemo view and the way that you would go

00:26:04,200 --> 00:26:07,919
from the first writing of your test to

00:26:06,660 --> 00:26:12,390
the third where everything's packed away

00:26:07,919 --> 00:26:14,669
in a nice way and and reusable okay and

00:26:12,390 --> 00:26:16,380
just a reminder at this point is that

00:26:14,669 --> 00:26:18,150
this is this is how I train people to

00:26:16,380 --> 00:26:19,350
use Nemo within paypal that doesn't mean

00:26:18,150 --> 00:26:21,470
this is the way that you would have to

00:26:19,350 --> 00:26:23,940
use it Nemo again it's just a simple

00:26:21,470 --> 00:26:27,390
webdriver abstraction that allows you to

00:26:23,940 --> 00:26:28,650
to add plugins and do the configuration

00:26:27,390 --> 00:26:32,220
using can feel like we talked about

00:26:28,650 --> 00:26:34,470
before so I'm I have seen and I'm

00:26:32,220 --> 00:26:36,360
looking forward to seeing more examples

00:26:34,470 --> 00:26:38,580
of how to use it from other people who

00:26:36,360 --> 00:26:40,350
start to add their favorite modules in

00:26:38,580 --> 00:26:43,770
their favorite you know task and test

00:26:40,350 --> 00:26:45,120
runners around it and to get started to

00:26:43,770 --> 00:26:46,110
look at that stuff and to play around

00:26:45,120 --> 00:26:49,169
with the code that we looked at today

00:26:46,110 --> 00:26:52,980
you just have to clone the Nemo example

00:26:49,169 --> 00:26:54,900
app and we're looking for contributors

00:26:52,980 --> 00:26:56,429
and I didn't I didn't mention it at the

00:26:54,900 --> 00:26:58,710
outset but Nemo was actually named after

00:26:56,429 --> 00:27:00,540
Captain Nemo the scary sea captain guy

00:26:58,710 --> 00:27:02,520
and not the little fish so here's

00:27:00,540 --> 00:27:05,850
captain nemo looking for contributors

00:27:02,520 --> 00:27:08,160
and what we're looking for is help doing

00:27:05,850 --> 00:27:09,720
stuff like fixing the generator that we

00:27:08,160 --> 00:27:11,910
have a yeoman generator but it's not

00:27:09,720 --> 00:27:14,370
generic enough so i didn't really want

00:27:11,910 --> 00:27:16,260
to promote it today it does it does do

00:27:14,370 --> 00:27:18,330
some things but not to the point where i

00:27:16,260 --> 00:27:19,980
really want to talk about it some golf

00:27:18,330 --> 00:27:23,940
examples some mobile examples would be

00:27:19,980 --> 00:27:25,290
nice and we heard about Magellan earlier

00:27:23,940 --> 00:27:27,299
today so maybe that's something we can

00:27:25,290 --> 00:27:28,679
integrate in the future as well but we'd

00:27:27,299 --> 00:27:31,799
have to we'd have to look into that and

00:27:28,679 --> 00:27:33,270
i think that's my last slide asked me

00:27:31,799 --> 00:27:34,860
for a sticker I've got I've got stickers

00:27:33,270 --> 00:27:37,700
up here with the little guy on them so

00:27:34,860 --> 00:27:37,700

YouTube URL: https://www.youtube.com/watch?v=1DoveeFXptY


