Title: Steve Kinney: Building a musical instrument with the Web Audio API | JSConf US 2015
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	When you weren't looking, someone stuck a synthesizer into your favorite web browser. The Web Audio API is widely supported and makes it easy—and more importantly, fun—to create, process, and control audio in the browser. We can spin up oscillators, adjust gain, tweak frequencies, and slap on some funky delay. Additionally, we can also take existing sounds and manipulate them to our heart's content. We can grab input from cameras and microphones and use them as we see fit. But, the fun doesn't stop there—we still have the rest of the browser's media APIs at our disposal. We'll talk a little bit about the Web Audio API. We'll explore the browser as a vehicle for creative expression. We'll fire up some audio contexts and connect some nodes. We'll also leverage the getUserMedia Web API, WebSockets, and others to build unique musical instruments that could only be possible in the web browser. We'll not only talk about the API itself, but also some of the fundamental concepts for working with audio and making music.
Captions: 
	00:00:17,010 --> 00:00:18,630
How is everyone doing today?

00:00:18,630 --> 00:00:19,630
All right!

00:00:19,630 --> 00:00:20,630
Sweet.

00:00:20,630 --> 00:00:21,630
Hello!

00:00:21,630 --> 00:00:22,630
My name is Steve.

00:00:22,630 --> 00:00:23,630
As we've probably gathered.

00:00:23,630 --> 00:00:25,770
And I am an instructor at the Turing School of

00:00:25,770 --> 00:00:28,510
Software and Design out in Colorado.

00:00:28,510 --> 00:00:29,950
What is that?

00:00:29,950 --> 00:00:34,020
It's a 7 month developer training program where we take people who

00:00:34,020 --> 00:00:38,090
don't know how to develop web applications and hopefully show them how to

00:00:38,090 --> 00:00:41,110
develop web applications over the course of that 7 months.

00:00:41,110 --> 00:00:43,640
So if you're interested in mentoring people who want

00:00:43,640 --> 00:00:45,540
to become developers, please come talk to me.

00:00:45,540 --> 00:00:50,700
If you would like to hire six, seven, 12 developers, also come talk to me.

00:00:50,700 --> 00:00:53,620
I've got cards and other fun stuff.

00:00:53,620 --> 00:00:59,790
Other administrivia -- we're starting a nodebots group in Colorado.

00:00:59,790 --> 00:01:03,040
So if you are in the Boulder region, come hang

00:01:03,040 --> 00:01:05,210
out with us.

00:01:05,210 --> 00:01:09,450
Everything you can see today lives in a little readme file on

00:01:09,450 --> 00:01:10,479
this repo.

00:01:10,479 --> 00:01:12,900
So you can play along.

00:01:12,900 --> 00:01:16,479
If you start playing with it while I'm talking, this is an audio talk, and

00:01:16,479 --> 00:01:20,880
I'll know -- so maybe wait until lunchtime.

00:01:20,880 --> 00:01:24,320
But everything is there along with the slides and everything else.

00:01:24,320 --> 00:01:28,000
So as you've probably gathered from the title of this talk, either A you're in the wrong

00:01:28,000 --> 00:01:33,010
room or B you're here to hear about making music with a web browser.

00:01:33,010 --> 00:01:35,390
So I have a little secret for you.

00:01:35,390 --> 00:01:38,350
I'll just get this out of the way now.

00:01:38,350 --> 00:01:43,290
As it turns out, somebody put a synthesizer into your web browser.

00:01:43,290 --> 00:01:45,830
It's true.

00:01:45,830 --> 00:01:47,160
So what does that mean?

00:01:47,160 --> 00:01:50,720
It takes the form of this fun thing called the Web

00:01:50,720 --> 00:01:55,740
Audio API, which Sam just kind of introduced us to a little bit, and I'm going

00:01:55,740 --> 00:01:57,830
to go into a little more detail with.

00:01:57,830 --> 00:02:01,320
And how do we use this Web Audio API?

00:02:01,320 --> 00:02:03,390
That's a great question and I'm glad that you asked it.

00:02:03,390 --> 00:02:05,590
Start with some context.

00:02:05,590 --> 00:02:08,600
So if you've ever worked with HTML5 canvas or anything along those

00:02:08,600 --> 00:02:11,159
lines, you're familiar with a context.

00:02:11,159 --> 00:02:12,950
It's the canvas you're drawing on.

00:02:12,950 --> 00:02:14,599
In this case, it's the audio graph that you're

00:02:14,599 --> 00:02:16,320
working with.

00:02:16,320 --> 00:02:20,610
In most cases, there is one audio context per page.

00:02:20,610 --> 00:02:22,709
Basically you create one, spin it up, and start

00:02:22,709 --> 00:02:25,500
to hook together your different audio nodes.

00:02:25,500 --> 00:02:26,500
How do we do that?

00:02:26,500 --> 00:02:28,200
That's a good question as well.

00:02:28,200 --> 00:02:30,859
Basically there's a built-in in the browser called audio

00:02:30,859 --> 00:02:36,620
context, there's a little bit of vendor prefix silliness going on with Safari.

00:02:36,620 --> 00:02:42,441
So in order to support Safari, we do this little trick -- oh, hey, give me

00:02:42,441 --> 00:02:43,790
your audio context.

00:02:43,790 --> 00:02:44,790
You don't have that?

00:02:44,790 --> 00:02:46,000
I'll take your Webkit audio context.

00:02:46,000 --> 00:02:47,000
Either way.

00:02:47,000 --> 00:02:49,889
We'll do Tomfoolery to get it.

00:02:49,889 --> 00:02:55,319
And then we have it to use.

00:02:55,319 --> 00:02:58,569
So what is a web audio context?

00:02:58,569 --> 00:03:02,610
We need to get the audio out of our browser.

00:03:02,610 --> 00:03:04,609
So we have this thing called a destination.

00:03:04,609 --> 00:03:08,200
The metaphor I'm going to use if you've ever played guitar is -- it's like your amplifier.

00:03:08,200 --> 00:03:10,030
The thing you're plugging everything into.

00:03:10,030 --> 00:03:16,720
Technically speaking, the operating system's audio, whatever.

00:03:16,720 --> 00:03:17,720
It's the amplifier.

00:03:17,720 --> 00:03:20,420
Your computer speakers, your ear buds, whatever.

00:03:20,420 --> 00:03:22,029
We also need some kind of sound source.

00:03:22,029 --> 00:03:27,469
And we connect that sound source to our destination and we can make sound.

00:03:27,469 --> 00:03:31,610
The other cool thing is we can put a whole bunch of stuff in the middle, like

00:03:31,610 --> 00:03:32,610
effect pedals.

00:03:32,610 --> 00:03:35,489
If you were playing guitar, a wa-wa pedal or delay or chord

00:03:35,489 --> 00:03:36,489
pedal.

00:03:36,489 --> 00:03:43,159
Take the nodes, whatever sources, do the processing on it, and send

00:03:43,159 --> 00:03:47,349
that processed version of our audio to the destination and get to use it as

00:03:47,349 --> 00:03:48,769
well.

00:03:48,769 --> 00:03:51,159
So let's start by talking about the first piece of this.

00:03:51,159 --> 00:03:53,249
We want to get some sound out of the browser, so we're going

00:03:53,249 --> 00:03:56,959
to need to set up that audio context destination.

00:03:56,959 --> 00:03:58,540
And that is also pretty easy to do.

00:03:58,540 --> 00:04:01,609
That context that we created in the last little code sample -- it's

00:04:01,609 --> 00:04:03,840
got a bunch of properties and methods on it.

00:04:03,840 --> 00:04:07,889
One of those is destination, and that is a representation of

00:04:07,889 --> 00:04:09,709
your audio context destination.

00:04:09,709 --> 00:04:10,739
It is your amplifier.

00:04:10,739 --> 00:04:14,719
It's what you're going to plug other stuff into and where sound is

00:04:14,719 --> 00:04:16,280
going to come out.

00:04:16,280 --> 00:04:18,030
So we've got a destination.

00:04:18,030 --> 00:04:20,910
And now we need some kind of audio source.

00:04:20,910 --> 00:04:23,580
And we've got a bunch of options.

00:04:23,580 --> 00:04:25,850
We could load in some kind of sound file.

00:04:25,850 --> 00:04:27,450
That would be cool.

00:04:27,450 --> 00:04:32,030
We could take something from the user's microphone and analyze

00:04:32,030 --> 00:04:35,090
it and process it along those lines.

00:04:35,090 --> 00:04:37,190
Or we could generate our own tones.

00:04:37,190 --> 00:04:40,270
Now, we're talking about making music with the browser.

00:04:40,270 --> 00:04:41,270
Right?

00:04:41,270 --> 00:04:43,410
So the first two are kind of off the table.

00:04:43,410 --> 00:04:45,170
We don't want to take a pre-recorded music and

00:04:45,170 --> 00:04:46,170
play it.

00:04:46,170 --> 00:04:47,170
That's been done.

00:04:47,170 --> 00:04:48,170
Right?

00:04:48,170 --> 00:04:49,170
Midi files in the '90s.

00:04:49,170 --> 00:04:50,170
On my Geocities page.

00:04:50,170 --> 00:04:52,130
I'm not embarrassed at all.

00:04:52,130 --> 00:04:56,570
We don't just want to play recorded sounds.

00:04:56,570 --> 00:04:58,250
We want to make sounds.

00:04:58,250 --> 00:05:01,750
So our hero is going to be the oscillator, which you got

00:05:01,750 --> 00:05:05,120
a bit of an introduction to in the last talk.

00:05:05,120 --> 00:05:09,240
And an oscillator basically creates a sound wave.

00:05:09,240 --> 00:05:14,000
And a sound wave is just kind of vibration in the air that your ear makes some

00:05:14,000 --> 00:05:18,630
sense out of, and turns into a given tone, and there's some distance between

00:05:18,630 --> 00:05:24,880
each of the waves and the amplitude, which is how high the peaks are and how

00:05:24,880 --> 00:05:25,880
deep the valleys are.

00:05:25,880 --> 00:05:26,880
Right?

00:05:26,880 --> 00:05:27,880
Which...

00:05:27,880 --> 00:05:31,970
For our purposes, is basically the volume.

00:05:31,970 --> 00:05:33,200
How do we create an oscillator?

00:05:33,200 --> 00:05:36,960
Again, we've got some methods on that context that we created before.

00:05:36,960 --> 00:05:44,750
And all we have to do is call create oscillator, and we have created an oscillator.

00:05:44,750 --> 00:05:45,750
And that's great.

00:05:45,750 --> 00:05:47,960
Now we've got an oscillator and a destination.

00:05:47,960 --> 00:05:51,310
Next we need to connect the two of them.

00:05:51,310 --> 00:05:54,530
Take our keytar in this case and plug it into our

00:05:54,530 --> 00:05:57,940
amp to get any sound out of it.

00:05:57,940 --> 00:06:03,710
So we've got a method on that oscillator and we connect the method to the

00:06:03,710 --> 00:06:05,150
context destination.

00:06:05,150 --> 00:06:08,500
So we plug the keytar into the amp and we're almost ready

00:06:08,500 --> 00:06:09,500
to rock and roll.

00:06:09,500 --> 00:06:13,420
Because the other thing is we need to hit some keys on the

00:06:13,420 --> 00:06:16,110
keytar in order to play anything.

00:06:16,110 --> 00:06:21,780
So we start our oscillator and have it create some sounds for us.

00:06:21,780 --> 00:06:25,350
How do we start an oscillator?

00:06:25,350 --> 00:06:26,810
We call start on it.

00:06:26,810 --> 00:06:27,810
You might be wondering...

00:06:27,810 --> 00:06:28,860
What is this zero?

00:06:28,860 --> 00:06:30,590
That is when you want it to start.

00:06:30,590 --> 00:06:33,330
How far in the future you want it to start.

00:06:33,330 --> 00:06:35,870
In this case, we want it to start right now.

00:06:35,870 --> 00:06:38,190
Firefox and Chrome -- totally okay with you omitting this.

00:06:38,190 --> 00:06:39,660
It will just start immediately.

00:06:39,660 --> 00:06:41,530
Safari, not okay with this.

00:06:41,530 --> 00:06:44,830
So we put in a zero, say -- I want to start this oscillator and

00:06:44,830 --> 00:06:46,700
start it right now.

00:06:46,700 --> 00:06:47,700
And that's great.

00:06:47,700 --> 00:06:49,870
You probably messed up your frequency.

00:06:49,870 --> 00:06:52,020
If you're like me, you're blowing out your eardrums right now

00:06:52,020 --> 00:06:54,670
with a super high pitched frequency.

00:06:54,670 --> 00:06:58,090
Now you probably want to stop it.

00:06:58,090 --> 00:07:01,150
Surprise -- the method is called stop.

00:07:01,150 --> 00:07:02,410
Here's where it gets tricky.

00:07:02,410 --> 00:07:03,410
All right.

00:07:03,410 --> 00:07:04,900
I'm done blowing out my ear drums.

00:07:04,900 --> 00:07:08,670
I want to adjust the frequency and I want to start the oscillator

00:07:08,670 --> 00:07:10,560
again.

00:07:10,560 --> 00:07:11,880
Not going to happen.

00:07:11,880 --> 00:07:12,880
Right?

00:07:12,880 --> 00:07:13,880
Here's the kind of gotcha on that.

00:07:13,880 --> 00:07:16,990
Once you stop an oscillator, you cannot restart it.

00:07:16,990 --> 00:07:17,990
Game over.

00:07:17,990 --> 00:07:20,060
You have to get rid of it.

00:07:20,060 --> 00:07:21,250
And get a new one.

00:07:21,250 --> 00:07:22,430
So you might say to yourself...

00:07:22,430 --> 00:07:23,430
All right.

00:07:23,430 --> 00:07:24,430
Yeah.

00:07:24,430 --> 00:07:25,430
I'll just generate another one.

00:07:25,430 --> 00:07:26,430
No big deal.

00:07:26,430 --> 00:07:28,580
The other thing you want to make sure that you do is disconnect the oscillator that

00:07:28,580 --> 00:07:30,810
you had, so it can get garbage collected.

00:07:30,810 --> 00:07:34,930
If you don't disconnect it, the context still has a reference to

00:07:34,930 --> 00:07:39,460
it, it starts hanging out in memory, you get out of control, do that too much,

00:07:39,460 --> 00:07:41,390
congratulations -- you have a memory leak.

00:07:41,390 --> 00:07:42,800
Don't have a memory leak.

00:07:42,800 --> 00:07:43,800
Disconnect your oscillators when you're done.

00:07:43,800 --> 00:07:48,150
It's the responsible thing to do.

00:07:48,150 --> 00:07:49,740
So now it's gotten garbage collected.

00:07:49,740 --> 00:07:50,740
We can bring in a new one.

00:07:50,740 --> 00:07:54,210
And here it is.

00:07:54,210 --> 00:07:57,620
The other thing we talked about before is that we can connect stuff in the

00:07:57,620 --> 00:07:58,620
middle.

00:07:58,620 --> 00:08:03,050
So you might say -- I don't want to keep creating and destroying

00:08:03,050 --> 00:08:04,050
oscillators.

00:08:04,050 --> 00:08:05,230
That seems reckless.

00:08:05,230 --> 00:08:06,650
I'm not interested in doing that.

00:08:06,650 --> 00:08:08,280
It's actually pretty efficient.

00:08:08,280 --> 00:08:09,280
It's not a big deal.

00:08:09,280 --> 00:08:10,280
But...

00:08:10,280 --> 00:08:11,430
It makes me feel a little dirty.

00:08:11,430 --> 00:08:15,830
So the other option is to plug in our sound source, into some

00:08:15,830 --> 00:08:20,581
kind of intermediary node, that will process that sound, and in this case, we

00:08:20,581 --> 00:08:24,840
use a gain node, where we can basically turn up and down the amplitude, which

00:08:24,840 --> 00:08:26,710
for our purposes is the volume.

00:08:26,710 --> 00:08:30,610
So we can turn the volume down to zero and yeah, the oscillator is still running, but

00:08:30,610 --> 00:08:34,479
none of the sound is getting to the destination, which means for all intents and

00:08:34,479 --> 00:08:36,370
purposes the thing is stopped.

00:08:36,370 --> 00:08:37,709
That's it.

00:08:37,709 --> 00:08:40,620
And when we're ready to hear from it again, we can turn the gain up

00:08:40,620 --> 00:08:45,430
to one, which is the default setting, and all of the sound will continue to

00:08:45,430 --> 00:08:46,430
travel through.

00:08:46,430 --> 00:08:49,111
So we kind of get to mimic the idea that we're turning the

00:08:49,111 --> 00:08:53,000
oscillator on and off, but really we're just adjusting an intermediary gain

00:08:53,000 --> 00:08:55,070
node instead.

00:08:55,070 --> 00:08:56,070
How do we do that?

00:08:56,070 --> 00:08:58,920
There should be no surprises here.

00:08:58,920 --> 00:09:01,830
Context has a few other methods for generating the intermediary nodes

00:09:01,830 --> 00:09:02,850
we might need.

00:09:02,850 --> 00:09:08,620
In this case, we create a gain node, and we can hook up our

00:09:08,620 --> 00:09:15,580
keytar to our gain node, connect the oscillator to the gain node, then hook

00:09:15,580 --> 00:09:19,710
the gain node up to our destination.

00:09:19,710 --> 00:09:22,560
And now we can start the oscillator, and we can just adjust the

00:09:22,560 --> 00:09:23,560
volume.

00:09:23,560 --> 00:09:26,140
To kind of give the illusion that we're turning it off and on but in

00:09:26,140 --> 00:09:31,110
fact, we're just simply adjusting again an intermediary node.

00:09:31,110 --> 00:09:33,691
So again, we notice that we're talking about the oscillator.

00:09:33,691 --> 00:09:36,800
The oscillator has a bunch of other properties to it.

00:09:36,800 --> 00:09:38,950
What frequency?

00:09:38,950 --> 00:09:41,440
What should be the bandwidth of those waves?

00:09:41,440 --> 00:09:42,440
Right?

00:09:42,440 --> 00:09:44,180
How close together or far apart should they be?

00:09:44,180 --> 00:09:48,270
By default, we get an oscillator that is at 440.

00:09:48,270 --> 00:09:52,760
But we can adjust it down to 220, adjust it up to 8,000.

00:09:52,760 --> 00:09:54,700
Don't do that if you're wearing headphones, again.

00:09:54,700 --> 00:09:56,250
I don't know if you...

00:09:56,250 --> 00:09:57,250
There was a...

00:09:57,250 --> 00:10:00,690
Malls in the UK a few years ago would play super high

00:10:00,690 --> 00:10:05,020
pitched tones, because as you get older, you can't hear those, so it would be

00:10:05,020 --> 00:10:08,010
for the sole purpose of scaring away teenagers.

00:10:08,010 --> 00:10:10,230
So there's a use for this, in your practical everyday life.

00:10:10,230 --> 00:10:12,960
When you want teenagers to go away, create an

00:10:12,960 --> 00:10:14,910
ultrahigh frequency and turn it on.

00:10:14,910 --> 00:10:17,040
It might also scare away your dog and cat.

00:10:17,040 --> 00:10:22,170
That could be a bonus, depending on how you're feeling about them at the

00:10:22,170 --> 00:10:23,360
moment.

00:10:23,360 --> 00:10:26,230
So this is the shape of the wave.

00:10:26,230 --> 00:10:28,230
We get a few out of the box by default.

00:10:28,230 --> 00:10:32,860
A sine wave is this curvy happy wave, sounds pretty pleasant to the

00:10:32,860 --> 00:10:33,860
ears.

00:10:33,860 --> 00:10:39,330
A square wave gets its name from looking like squares, a triangle wave

00:10:39,330 --> 00:10:43,950
gets its name from looking like triangles, and a saw tooth looks like a saw.

00:10:43,950 --> 00:10:46,940
Not a lot of heavy vocabulary here.

00:10:46,940 --> 00:10:50,550
It's like hey, that's what that wave looks like.

00:10:50,550 --> 00:10:55,780
And if you want, you can also create your own custom wave forms that are

00:10:55,780 --> 00:10:59,670
different from those, but those are the default traditional synthesizer sound

00:10:59,670 --> 00:11:02,800
waves that we've had available since the '70s.

00:11:02,800 --> 00:11:06,280
And we can basically -- oscillator has a property on it, where we

00:11:06,280 --> 00:11:09,029
can change it to whatever type of wave that we want.

00:11:09,029 --> 00:11:10,500
So let's actually take a look at this.

00:11:10,500 --> 00:11:14,880
We're going to look at a little example, where we can kind of

00:11:14,880 --> 00:11:17,540
create an oscillator.

00:11:17,540 --> 00:11:21,260
There we go.

00:11:21,260 --> 00:11:25,060
I can adjust the gain here.

00:11:25,060 --> 00:11:32,890
(pure tone playing)

00:11:32,890 --> 00:11:50,610
So this is a sine wave, and we can change the frequency...

00:11:50,610 --> 00:11:55,060
(higher pure tone playing)

00:11:55,060 --> 00:11:56,060
And you can see as the frequency increases, then in that case the pitch to

00:11:56,060 --> 00:11:57,060
our ears sounds higher.

00:11:57,060 --> 00:11:58,060
We can also...

00:11:58,060 --> 00:11:59,060
I'm going to go back down to 220 for everyone's benefit.

00:11:59,060 --> 00:12:00,060
Because I care.

00:12:00,060 --> 00:12:01,060
(lower pure tone playing)

00:12:01,060 --> 00:12:02,060
We can try a square wave.

00:12:02,060 --> 00:12:05,720
(noisier tone playing)

00:12:05,720 --> 00:12:08,970
And the triangle.

00:12:08,970 --> 00:12:11,217
So the shape of the wave has different tonal properties

00:12:11,217 --> 00:12:12,217
to our ears.

00:12:12,217 --> 00:12:13,217
And we can change it.

00:12:13,217 --> 00:12:19,190
For the rest of this talk, we're going to be going with the nice sine wave, because

00:12:19,190 --> 00:12:21,540
it's probably the most pleasant.

00:12:21,540 --> 00:12:22,540
Cool!

00:12:22,540 --> 00:12:25,870
So at this point, we now know how to make sound!

00:12:25,870 --> 00:12:26,920
And that's super cool.

00:12:26,920 --> 00:12:31,220
Sound is necessary, but it's not sufficient for making music.

00:12:31,220 --> 00:12:32,220
Right?

00:12:32,220 --> 00:12:35,000
So it's called the Web Audio API, not the web music

00:12:35,000 --> 00:12:36,000
API.

00:12:36,000 --> 00:12:38,930
It's going to help make some sound, but it's on us to turn that sound into

00:12:38,930 --> 00:12:39,930
music.

00:12:39,930 --> 00:12:41,880
We're going to need to know a few things about music in order to

00:12:41,880 --> 00:12:42,880
get this working.

00:12:42,880 --> 00:12:47,420
So we talked a little bit about the default frequency of an oscillator.

00:12:47,420 --> 00:12:48,760
It's 440.

00:12:48,760 --> 00:12:54,161
If you've ever seen one of those tuning forks, that A4, and it's what we

00:12:54,161 --> 00:12:59,600
base most of our general tones -- on most Western musical instruments.

00:12:59,600 --> 00:13:00,770
So we've got 440.

00:13:00,770 --> 00:13:05,200
If we were to double that frequency to 880, conveniently, we

00:13:05,200 --> 00:13:06,980
would get A5.

00:13:06,980 --> 00:13:09,600
Which is an A note, but an octave higher.

00:13:09,600 --> 00:13:13,240
And if we were to halve 440 to that 220 we had before, we would

00:13:13,240 --> 00:13:15,649
have A, but an octave lower.

00:13:15,649 --> 00:13:17,760
I don't know if you know this, but there are

00:13:17,760 --> 00:13:25,310
more notes than just A. We have semi-tones -- and the 12 units in between

00:13:25,310 --> 00:13:26,930
two octaves.

00:13:26,930 --> 00:13:29,029
That's simply a Western music thing.

00:13:29,029 --> 00:13:32,430
It's not like a physics law or anything, but we have decided that

00:13:32,430 --> 00:13:35,430
these are the tones that sound reasonably pleasant to our ears.

00:13:35,430 --> 00:13:38,540
And some of them have some basis in actual physics.

00:13:38,540 --> 00:13:43,270
If you take a guitar string and put your finger in the middle of the string, that

00:13:43,270 --> 00:13:44,890
is usually one octave higher.

00:13:44,890 --> 00:13:46,560
If you put it a third of the way, you'll get

00:13:46,560 --> 00:13:48,480
a fifth, and so on and so forth.

00:13:48,480 --> 00:13:50,529
So we've got basic ones and we filled in the

00:13:50,529 --> 00:13:51,529
gaps.

00:13:51,529 --> 00:13:54,750
So if you want to get the rest of the notes, you might say to yourself -- I'll

00:13:54,750 --> 00:13:56,370
using math.

00:13:56,370 --> 00:13:58,080
That's reasonable.

00:13:58,080 --> 00:14:00,160
At first glance it works.

00:14:00,160 --> 00:14:06,290
A at 440, A an octave up, it's 880, and if we divide

00:14:06,290 --> 00:14:10,240
by 1/12 steps each way, we get there.

00:14:10,240 --> 00:14:11,260
No big deal.

00:14:11,260 --> 00:14:12,650
Sounds great.

00:14:12,650 --> 00:14:15,810
Unfortunately, it only works in one key.

00:14:15,810 --> 00:14:16,810
Right?

00:14:16,810 --> 00:14:20,160
If you were to start at C, you can see almost immediately the notes don't

00:14:20,160 --> 00:14:21,160
match up.

00:14:21,160 --> 00:14:23,610
So if you were to use this kind of mathematical approach, you could

00:14:23,610 --> 00:14:27,080
create an instrument that only sounds good in one key.

00:14:27,080 --> 00:14:30,140
And that's -- it's called a harmonica.

00:14:30,140 --> 00:14:31,140
Right?

00:14:31,140 --> 00:14:32,580
You buy a whole bunch of them, and you never learn

00:14:32,580 --> 00:14:33,580
how to play them.

00:14:33,580 --> 00:14:36,209
And that's kind of how it works.

00:14:36,209 --> 00:14:37,209
But...

00:14:37,209 --> 00:14:39,870
So the first thing I tried to do is like -- all right.

00:14:39,870 --> 00:14:41,150
I'm smart.

00:14:41,150 --> 00:14:42,150
Reasonably.

00:14:42,150 --> 00:14:43,150
I can figure this out.

00:14:43,150 --> 00:14:46,040
So I'll come up with an algorithm that will, like, work.

00:14:46,040 --> 00:14:49,000
Unfortunately, this is a problem that humans have been working on for thousands of years,

00:14:49,000 --> 00:14:53,180
and I was not able to figure out on one Red Bull-fueled afternoon.

00:14:53,180 --> 00:14:56,270
However, it occurred to me that...

00:14:56,270 --> 00:14:57,270
You know what I'll do?

00:14:57,270 --> 00:14:58,339
I'll just steal an approach that already works.

00:14:58,339 --> 00:14:59,370
We have figured this out.

00:14:59,370 --> 00:15:01,709
This is a solved problem.

00:15:01,709 --> 00:15:04,820
Going by units of 1/12 is equal temperament.

00:15:04,820 --> 00:15:08,400
The other approach is to use this thing called just intonation,

00:15:08,400 --> 00:15:11,810
which is a bunch of compromises between the other keys.

00:15:11,810 --> 00:15:18,120
So it's not perfect in a physical sense, in the way of equal temperament,

00:15:18,120 --> 00:15:22,300
but it is reasonably good in every key, but not perfectly accurate in

00:15:22,300 --> 00:15:23,709
any of them.

00:15:23,709 --> 00:15:25,010
So we can steal something from the piano.

00:15:25,010 --> 00:15:29,930
I just needed a way to get from the piano frequencies and just steal a little cheat

00:15:29,930 --> 00:15:33,040
sheet from that, and be able to use this.

00:15:33,040 --> 00:15:37,980
I was just keeping a giant hash table in a file and trying to reference

00:15:37,980 --> 00:15:38,980
it.

00:15:38,980 --> 00:15:39,980
It was getting obnoxious.

00:15:39,980 --> 00:15:42,970
So when you have a need and a cute name for a

00:15:42,970 --> 00:15:46,500
project, you have an Open Source library.

00:15:46,500 --> 00:15:50,990
A little library called Octavian, and basically what it does -- you can hand

00:15:50,990 --> 00:15:56,410
it a general note and what it'll do is give you the frequency.

00:15:56,410 --> 00:15:57,890
Also give you all those other things you might need

00:15:57,890 --> 00:15:59,990
to use, like what key on the piano it is.

00:15:59,990 --> 00:16:05,210
All it basically does is reference a lookup table of this note on the piano, this

00:16:05,210 --> 00:16:06,839
would be this frequency.

00:16:06,839 --> 00:16:09,040
The other fun thing it does is it lets you do

00:16:09,040 --> 00:16:11,360
the different intervals between notes.

00:16:11,360 --> 00:16:15,980
A major chord is a root note, major third, and perfect fifth.

00:16:15,980 --> 00:16:19,270
A minor chord is a root note, a minor third, and a

00:16:19,270 --> 00:16:20,270
perfect fifth.

00:16:20,270 --> 00:16:22,990
So you can reason about these notes and get everything you need

00:16:22,990 --> 00:16:24,470
along the way.

00:16:24,470 --> 00:16:25,470
All right.

00:16:25,470 --> 00:16:28,149
So now we can create sound.

00:16:28,149 --> 00:16:34,000
And the other thing we can do is we can reason about it, in terms of music.

00:16:34,000 --> 00:16:36,330
Let's actually build a musical instrument.

00:16:36,330 --> 00:16:41,410
So this is a little example instrument called audiophonic.

00:16:41,410 --> 00:16:42,660
And let's take a look.

00:16:42,660 --> 00:16:43,660
Adam?

00:16:43,660 --> 00:16:44,920
Adam is going...

00:16:44,920 --> 00:16:46,660
Ladies and gentlemen, Adam Sontag is going to

00:16:46,660 --> 00:16:52,800
play us a song.

00:16:52,800 --> 00:16:54,820
(applause)

00:16:54,820 --> 00:16:58,840
All right.

00:16:58,840 --> 00:17:02,870
You ready?

00:17:02,870 --> 00:17:06,890
All right.

00:17:06,890 --> 00:17:10,909
So... (inaudible)

00:17:10,909 --> 00:17:21,470
(playing happy pure tones up and down)

00:17:21,470 --> 00:17:28,429
Really hard without looking.

00:17:28,429 --> 00:17:30,170
Yeah.

00:17:30,170 --> 00:17:31,910
(inaudible)

00:17:31,910 --> 00:17:37,130
(playing boogie-woogie-style improvisation)

00:17:37,130 --> 00:17:38,870
(laughter)

00:17:38,870 --> 00:17:47,580
Round of applause for Adam!

00:17:47,580 --> 00:17:48,960
More like AJ's synthesizer.

00:17:48,960 --> 00:17:53,700
So as you can see, we can hover over a bunch of notes and it

00:17:53,700 --> 00:17:59,260
will play tones and if we press a key, it will activate that tone.

00:17:59,260 --> 00:18:01,140
So we've created a musical instrument.

00:18:01,140 --> 00:18:02,140
That's great.

00:18:02,140 --> 00:18:05,030
How exactly did we do that?

00:18:05,030 --> 00:18:07,430
So the trick here is we basically spun up a

00:18:07,430 --> 00:18:12,210
bunch of oscillators, and hooked them all up to gain nodes, and on different

00:18:12,210 --> 00:18:14,630
events, we'll simply turn one of those on and off.

00:18:14,630 --> 00:18:18,400
So when a key gets pressed, it will listen for a key down event.

00:18:18,400 --> 00:18:22,300
When that key down event happens, what we'll do is we'll say -- all right.

00:18:22,300 --> 00:18:24,270
I have this synthesizer object.

00:18:24,270 --> 00:18:27,840
Get me an oscillator for C3.

00:18:27,840 --> 00:18:31,390
And it will go ahead and look up -- do I have one?

00:18:31,390 --> 00:18:33,270
In this notes hash?

00:18:33,270 --> 00:18:34,270
No.

00:18:34,270 --> 00:18:36,190
If I don't have one...

00:18:36,190 --> 00:18:39,810
What it'll do is go and put one in there for me.

00:18:39,810 --> 00:18:41,480
There we are.

00:18:41,480 --> 00:18:43,150
I'm caught up.

00:18:43,150 --> 00:18:44,150
And then return it out.

00:18:44,150 --> 00:18:47,040
Now, a real synthesizer usually has, like, three oscillators that it's

00:18:47,040 --> 00:18:49,280
adjusting the frequencies on and turning it on and off.

00:18:49,280 --> 00:18:52,780
But I've got 16 gigs of RAM and I'm going to treat myself to 80

00:18:52,780 --> 00:18:53,780
oscillators.

00:18:53,780 --> 00:18:55,180
I can do that.

00:18:55,180 --> 00:18:57,920
If I have one, great.

00:18:57,920 --> 00:19:01,170
If I don't, make one, put it in the table, and use it as

00:19:01,170 --> 00:19:02,890
well.

00:19:02,890 --> 00:19:04,000
What is this oscillator thing?

00:19:04,000 --> 00:19:05,640
It's a little abstraction.

00:19:05,640 --> 00:19:10,160
It creates an oscillator and a gain node, sets some default

00:19:10,160 --> 00:19:14,380
values on them, in this case the frequency I want an oscillator for, hook them

00:19:14,380 --> 00:19:19,630
up together, start it, return it out to me, and I've got start and stop methods

00:19:19,630 --> 00:19:22,600
that are not actually start and stop methods on the oscillator but on the

00:19:22,600 --> 00:19:23,720
gain node.

00:19:23,720 --> 00:19:26,150
For me, I feel like I'm working on the oscillator, but there's a few

00:19:26,150 --> 00:19:28,780
more things happening in the middle.

00:19:28,780 --> 00:19:33,850
So if we hit the button bound to C3, get me an oscillator for C3,

00:19:33,850 --> 00:19:40,460
start it, and when they do a key up event, we'll simply send it off and we'll

00:19:40,460 --> 00:19:43,890
stop the oscillator.

00:19:43,890 --> 00:19:45,790
And that's all we need to do, to create a very small

00:19:45,790 --> 00:19:46,920
synthesizer.

00:19:46,920 --> 00:19:51,170
Nothing like saying that in front of 600 people.

00:19:51,170 --> 00:19:52,170
So that's cool!

00:19:52,170 --> 00:19:55,900
But that's only, like, why wouldn't you just buy a keyboard at

00:19:55,900 --> 00:19:56,900
that point?

00:19:56,900 --> 00:19:58,600
Why do you need to do all this?

00:19:58,600 --> 00:19:59,600
It's fun.

00:19:59,600 --> 00:20:01,240
You can share with your friends and they can use it, and it's great

00:20:01,240 --> 00:20:03,860
to come up on stage and play in front of everyone.

00:20:03,860 --> 00:20:04,900
That's awesome.

00:20:04,900 --> 00:20:07,570
But why would we want to use something like it?

00:20:07,570 --> 00:20:11,320
The other kind of interesting part is that somebody put a web browser in

00:20:11,320 --> 00:20:13,140
your synthesizer.

00:20:13,140 --> 00:20:17,270
That's not the only API that's available in the browser.

00:20:17,270 --> 00:20:19,820
So the fun comes in when we start mixing and

00:20:19,820 --> 00:20:23,419
matching different APIs.

00:20:23,419 --> 00:20:26,830
So one example is -- we can mix the Web Audio API

00:20:26,830 --> 00:20:28,230
with the get user media API.

00:20:28,230 --> 00:20:30,520
My favorite slide coming up.

00:20:30,520 --> 00:20:33,090
So this little app called face theremin.

00:20:33,090 --> 00:20:37,220
Are you familiar with what a theremin is?

00:20:37,220 --> 00:20:42,070
The thing that makes the spooky space music and you lift your hand and everything.

00:20:42,070 --> 00:20:47,400
So I thought it would be cool if I could do that with my face.

00:20:47,400 --> 00:20:49,090
So what we'll do...

00:20:49,090 --> 00:20:54,210
I can't actually see myself here.

00:20:54,210 --> 00:21:04,760
(theremin swooping up and down)

00:21:04,760 --> 00:21:06,870
(applause)

00:21:06,870 --> 00:21:15,290
In fairness, most of the hard work there is being done by the head tracking

00:21:15,290 --> 00:21:16,290
software.

00:21:16,290 --> 00:21:18,510
So it detects your face.

00:21:18,510 --> 00:21:21,640
And when you move your face, it emits a face tracking event.

00:21:21,640 --> 00:21:22,640
Right?

00:21:22,640 --> 00:21:24,700
Which has a whole bunch of properties on it.

00:21:24,700 --> 00:21:27,270
I really only care about two of them right now.

00:21:27,270 --> 00:21:29,680
You might care about other ones.

00:21:29,680 --> 00:21:32,820
But height and the X value to -- the X is the horizontal, where am I in this

00:21:32,820 --> 00:21:37,020
direction or that direction, and the height is how close or how far I am, and

00:21:37,020 --> 00:21:41,720
I'll take those two properties and do some simple math to make sure they're

00:21:41,720 --> 00:21:46,111
reasonable frequencies and gain amounts, and then I'll take my oscillator and

00:21:46,111 --> 00:21:48,570
my gain value and I'll adjust them accordingly.

00:21:48,570 --> 00:21:50,830
And that's really all there is to it.

00:21:50,830 --> 00:21:54,120
There's also the entire face tracking library, but that's somebody

00:21:54,120 --> 00:21:55,530
else's problem.

00:21:55,530 --> 00:22:00,900
And then lastly, I will bind myself to that event, and update stuff along

00:22:00,900 --> 00:22:02,040
those lines.

00:22:02,040 --> 00:22:03,060
Okay.

00:22:03,060 --> 00:22:05,380
So now we've seen the real power here is when we can mix

00:22:05,380 --> 00:22:08,340
and match other APIs.

00:22:08,340 --> 00:22:09,340
What about web sockets?

00:22:09,340 --> 00:22:10,340
All right.

00:22:10,340 --> 00:22:11,340
So you might say -- cool!

00:22:11,340 --> 00:22:13,620
We can have an instrument where a bunch of people can play in realtime

00:22:13,620 --> 00:22:14,620
together.

00:22:14,620 --> 00:22:15,620
There is some latency.

00:22:15,620 --> 00:22:21,650
So you don't want a bunch of people moving their heads together, synchronized head movements.

00:22:21,650 --> 00:22:23,770
Or even playing keyboard tones.

00:22:23,770 --> 00:22:26,360
Because there's going to be some latency, and the other part about

00:22:26,360 --> 00:22:28,929
music that I never had was rhythm.

00:22:28,929 --> 00:22:30,950
So that's going to be an issue with the latency thing.

00:22:30,950 --> 00:22:33,710
But we can kind of address that by using what's called a step

00:22:33,710 --> 00:22:35,650
sequencer.

00:22:35,650 --> 00:22:41,070
We've got 16 quarter notes, which I have zero indexed, because this

00:22:41,070 --> 00:22:44,549
is a JavaScript conference, and they are quarter notes and we'll step through

00:22:44,549 --> 00:22:49,360
each and every one of those, and then the rows are a bunch of musical notes.

00:22:49,360 --> 00:22:54,830
In this case, I have only chosen C, D, G, and A, because it's very difficult

00:22:54,830 --> 00:22:58,090
for you to make a melody that sounds bad with that.

00:22:58,090 --> 00:22:59,140
You could probably do it.

00:22:59,140 --> 00:23:00,809
I believe in you.

00:23:00,809 --> 00:23:01,809
But it makes it like...

00:23:01,809 --> 00:23:03,010
When you have multiple people playing...

00:23:03,010 --> 00:23:08,690
So now what we can do is -- any time somebody activates a square on

00:23:08,690 --> 00:23:15,480
the grid, we send that over web sockets to a little express socket IO server.

00:23:15,480 --> 00:23:19,010
That will then take that sequence, match it up with all the other ones it has,

00:23:19,010 --> 00:23:22,930
and push it out to all the other connected clients.

00:23:22,930 --> 00:23:26,929
And what we'll do then is when it gets to the client, we'll take all the

00:23:26,929 --> 00:23:30,250
sequences, and we'll -- for the user sequence, we'll, like, make those bright

00:23:30,250 --> 00:23:31,250
yellow.

00:23:31,250 --> 00:23:33,070
For everyone else, we'll make them this pale color.

00:23:33,070 --> 00:23:34,380
Render all the other sequences below.

00:23:34,380 --> 00:23:38,360
But we'll then combine them all to one sequence that

00:23:38,360 --> 00:23:39,360
will get played out.

00:23:39,360 --> 00:23:40,480
So it'll be everyone's music together.

00:23:40,480 --> 00:23:43,600
Let's take it for a spin.

00:23:43,600 --> 00:23:44,600
Beep!

00:23:44,600 --> 00:23:45,600
Excellent.

00:23:45,600 --> 00:23:47,760
Now you know what's coming next.

00:23:47,760 --> 00:23:49,840
There's my face again.

00:23:49,840 --> 00:23:50,880
All right.

00:23:50,880 --> 00:23:56,500
So here we've got a sequencer, and I happen to have an iPad

00:23:56,500 --> 00:24:00,110
over here, to be my other set of ears.

00:24:00,110 --> 00:24:02,480
So I can begin to unmute.

00:24:02,480 --> 00:24:05,380
And I'll start playing like a bass line.

00:24:05,380 --> 00:24:07,000
This is so hard!

00:24:07,000 --> 00:24:09,690
I can't see.

00:24:09,690 --> 00:24:18,650
(bass line playing perfect fifths up and down)

00:24:18,650 --> 00:24:23,130
All right.

00:24:23,130 --> 00:24:34,110
So I've got a bass line going.

00:24:34,110 --> 00:24:45,490
So I can start playing a melody here.

00:24:45,490 --> 00:24:54,020
(top line with distortion playing melody)

00:24:54,020 --> 00:24:57,250
There's the sequence I'm playing on the iPad.

00:24:57,250 --> 00:25:01,500
Here's the bass line that I put down in my browser.

00:25:01,500 --> 00:25:02,500
And they're all being connected.

00:25:02,500 --> 00:25:06,490
Ideally, you could have tens, twenties, hundreds of people creating

00:25:06,490 --> 00:25:08,650
music together as well.

00:25:08,650 --> 00:25:10,660
And there's a link to this in the repo that I

00:25:10,660 --> 00:25:15,800
posted, so I totally encourage you at lunch to have a giant JSConf song.

00:25:15,800 --> 00:25:26,720
It's only going to be four measures long and made out of four different notes, but

00:25:26,720 --> 00:25:27,740
whatever!

00:25:27,740 --> 00:25:28,770
Mute!

00:25:28,770 --> 00:25:30,820
All right.

00:25:30,820 --> 00:25:31,840
(applause)

00:25:31,840 --> 00:25:32,870
So...

00:25:32,870 --> 00:25:33,870
That's cool.

00:25:33,870 --> 00:25:37,520
But so far we've also been a little bit limited by what

00:25:37,520 --> 00:25:39,429
we've been able to do on the screen.

00:25:39,429 --> 00:25:43,970
So we've kind of had to either bind stuff to the keyboard, which is kind of cool but

00:25:43,970 --> 00:25:47,350
also kind of difficult, because it's not a musical instrument.

00:25:47,350 --> 00:25:49,350
Or we've been able to click on different things.

00:25:49,350 --> 00:25:52,490
As we know, JavaScript runs on the client.

00:25:52,490 --> 00:25:53,490
It runs on the server.

00:25:53,490 --> 00:25:55,490
It also runs on hardware.

00:25:55,490 --> 00:25:58,170
Which means we can begin to build our own musical

00:25:58,170 --> 00:25:59,170
instruments.

00:25:59,170 --> 00:26:00,170
Right?

00:26:00,170 --> 00:26:01,820
I've got a very small example we're going to switch to in

00:26:01,820 --> 00:26:02,840
a moment.

00:26:02,840 --> 00:26:05,020
But it means you can build, like, a Nintendo Power Glove.

00:26:05,020 --> 00:26:08,150
There's an '80s reference, by the way.

00:26:08,150 --> 00:26:10,471
Where every pinch of the finger started to play a

00:26:10,471 --> 00:26:11,471
different note.

00:26:11,471 --> 00:26:13,789
It means you can use all the sensors that's available for

00:26:13,789 --> 00:26:17,540
Arduino, and begin to create hardware musical instruments programmed in

00:26:17,540 --> 00:26:21,290
JavaScript that work with the Web Audio API in the browser.

00:26:21,290 --> 00:26:25,419
So this is a really clear diagram of what I've got going

00:26:25,419 --> 00:26:26,419
on here.

00:26:26,419 --> 00:26:27,679
And I'll explain this.

00:26:27,679 --> 00:26:33,110
But basically we've got some buttons, and we've got a little potentiometer.

00:26:33,110 --> 00:26:38,130
And whenever we hit one of the buttons, it'll send a signal to Johnny5.

00:26:38,130 --> 00:26:43,350
Johnny5 has an express and socket IO server running alongside of it, which is

00:26:43,350 --> 00:26:48,520
incredibly easy to do, by the way, and it will send that data over the web

00:26:48,520 --> 00:26:52,919
socket to the browser, and the browser will start playing that tone, based on

00:26:52,919 --> 00:26:55,320
the button that we hit.

00:26:55,320 --> 00:26:59,210
So I'm going to listen for pins 2, 4, 6, and 8.

00:26:59,210 --> 00:27:02,150
I'm just going to keep them in this quick little

00:27:02,150 --> 00:27:03,710
object over here.

00:27:03,710 --> 00:27:06,150
I'm going to say -- when the button is down, we'll send

00:27:06,150 --> 00:27:10,900
whatever key that was, whatever button that was, and we'll send that as true.

00:27:10,900 --> 00:27:13,870
When the button is up, we'll send one saying it's false.

00:27:13,870 --> 00:27:15,530
Basically the status of the buttons on my board --

00:27:15,530 --> 00:27:18,260
I'm sending them out to the browser.

00:27:18,260 --> 00:27:22,780
And then the potentiometer is, as we turn it, going to go through all the

00:27:22,780 --> 00:27:26,780
notes between C3 and C5.

00:27:26,780 --> 00:27:33,410
So let's check out the demo.

00:27:33,410 --> 00:27:38,710
(notes playing arpeggio)

00:27:38,710 --> 00:27:52,850
(top pure tones playing thirds up and down)

00:27:52,850 --> 00:27:59,910
(lower distorted tones echoing)

00:27:59,910 --> 00:28:10,510
(rapid repeated notes on top line)

00:28:10,510 --> 00:28:21,110
(major chords on distorted bottom line)

00:28:21,110 --> 00:28:22,880
Cool!

00:28:22,880 --> 00:28:23,970
So basically at this point...

00:28:23,970 --> 00:28:27,930
Not only can we build our own hardware that creates music in the browser with JavaScript

00:28:27,930 --> 00:28:30,510
-- there's very limitless possibilities.

00:28:30,510 --> 00:28:33,530
And so the moral of the story is that music is pretty awesome!

00:28:33,530 --> 00:28:35,710
I think we can all agree on that.

00:28:35,710 --> 00:28:38,809
The web -- also pretty awesome.

00:28:38,809 --> 00:28:40,640
Music and the web together are like ice cream and cookie

00:28:40,640 --> 00:28:42,220
dough.

00:28:42,220 --> 00:28:45,090
Each individually awesome, but exponentially more awesome when

00:28:45,090 --> 00:28:47,480
put together.

00:28:47,480 --> 00:28:49,010
And we only kind of scratched the surface.

00:28:49,010 --> 00:28:51,580
There's a bunch of other really cool APIs.

00:28:51,580 --> 00:28:54,710
There's the gamepad API, there is web RTC, so you could

00:28:54,710 --> 00:28:58,010
theoretically create multi-face theremin.

00:28:58,010 --> 00:29:05,240
There is the gyroscope accelerometer API, and there is also mixing

00:29:05,240 --> 00:29:08,960
and matching the possibilities we went over.

00:29:08,960 --> 00:29:12,590
So limitless possibilities for you to create musical instruments that have

00:29:12,590 --> 00:29:14,809
never existed before.

00:29:14,809 --> 00:29:18,450
So I kind of encourage you to do that.

00:29:18,450 --> 00:29:22,190
On the page, it has the links to everything.

00:29:22,190 --> 00:29:24,409
Whee!

00:29:24,409 --> 00:29:28,250
If you make something really cool, please send me a pull request,

00:29:28,250 --> 00:29:32,419
and we'll put a link below, and let's, like, collect all the really cool musical

00:29:32,419 --> 00:29:39,370
instruments that you make in the next days, weeks, and months.

00:29:39,370 --> 00:29:40,910
And with that...

00:29:40,910 --> 00:29:41,970

YouTube URL: https://www.youtube.com/watch?v=56spBAgOYfg


