Title: JSConf 2015   Mike O'Brien
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	
Captions: 
	00:00:14,019 --> 00:00:19,610
oops go and swap for having me again I'm

00:00:17,270 --> 00:00:21,380
Mike and I'm the head of our platform

00:00:19,610 --> 00:00:23,990
team at famous and kind of what we

00:00:21,380 --> 00:00:26,060
specifically work on is the rendering

00:00:23,990 --> 00:00:28,220
engine for our JavaScript architecture

00:00:26,060 --> 00:00:31,250
and one thing I wanted to talk today

00:00:28,220 --> 00:00:33,320
about is mixed mode and mixed mode to us

00:00:31,250 --> 00:00:35,930
is kind of client-side compositing for

00:00:33,320 --> 00:00:37,699
the web what it is exactly is it's a

00:00:35,930 --> 00:00:39,739
feature of our new rendering engine that

00:00:37,699 --> 00:00:42,680
allows for like the complete unification

00:00:39,739 --> 00:00:45,110
of dom and web-dl and by unification i

00:00:42,680 --> 00:00:47,030
mean there's a single API there's one

00:00:45,110 --> 00:00:49,580
coordinate space there's complete layer

00:00:47,030 --> 00:00:52,670
compositing and there's no user side tax

00:00:49,580 --> 00:00:54,500
so one API it's the idea that I move

00:00:52,670 --> 00:00:56,839
things around in space and all of these

00:00:54,500 --> 00:00:59,390
things affect both Dom and WebGL I don't

00:00:56,839 --> 00:01:01,220
actually have to care about these like

00:00:59,390 --> 00:01:03,350
how they fit into the system differently

00:01:01,220 --> 00:01:04,760
one coordinate space I'll get talked to

00:01:03,350 --> 00:01:07,430
more of it later but there's a pretty

00:01:04,760 --> 00:01:09,770
different sense of spacing when you do

00:01:07,430 --> 00:01:12,680
WebGL content person than when you do

00:01:09,770 --> 00:01:14,540
dham content compositing what i mean by

00:01:12,680 --> 00:01:16,640
compositing is if you take a like a

00:01:14,540 --> 00:01:18,560
three-dimensional scene so my hand here

00:01:16,640 --> 00:01:20,600
in my hand here what it does is

00:01:18,560 --> 00:01:21,950
compositing is the way to understand

00:01:20,600 --> 00:01:24,259
where things are in three-dimensional

00:01:21,950 --> 00:01:26,390
space where the camera is and flatten

00:01:24,259 --> 00:01:29,030
them into such a way that it looks

00:01:26,390 --> 00:01:30,619
correct as projected onto the screen and

00:01:29,030 --> 00:01:33,409
we want to abstract all of this away

00:01:30,619 --> 00:01:35,270
from the user to have to deal with it so

00:01:33,409 --> 00:01:37,939
again this is kind of what compositing

00:01:35,270 --> 00:01:39,920
is so the question is why would anybody

00:01:37,939 --> 00:01:42,499
even want this is this a feature that no

00:01:39,920 --> 00:01:43,819
one really wants is what what is the

00:01:42,499 --> 00:01:47,359
point of trying to merge these two

00:01:43,819 --> 00:01:49,670
things and to me it's because the web is

00:01:47,359 --> 00:01:51,859
becoming a lot less about pages and it's

00:01:49,670 --> 00:01:54,109
becoming a lot more about full

00:01:51,859 --> 00:01:56,950
experiences and applications things were

00:01:54,109 --> 00:02:00,469
it's not a big piece of paper scrolling

00:01:56,950 --> 00:02:02,689
that said there are a ton of use cases

00:02:00,469 --> 00:02:05,030
where that is the best way for your sort

00:02:02,689 --> 00:02:07,009
of the medium that you're in the content

00:02:05,030 --> 00:02:08,600
that you're trying to show so if you

00:02:07,009 --> 00:02:10,069
look at something like reddit reddit is

00:02:08,600 --> 00:02:12,590
the perfect example of something that

00:02:10,069 --> 00:02:14,150
needs to be in a document you have all

00:02:12,590 --> 00:02:16,280
these news stories that are listed one

00:02:14,150 --> 00:02:18,590
by one by one and you can scroll through

00:02:16,280 --> 00:02:20,210
them it's really easy it really simple

00:02:18,590 --> 00:02:22,640
and people want to view this kind of

00:02:20,210 --> 00:02:25,190
content and list form similarly a lot of

00:02:22,640 --> 00:02:27,780
other news outlets like BBC have

00:02:25,190 --> 00:02:30,180
pages where it makes a lot of sense for

00:02:27,780 --> 00:02:31,830
them to just list everything vertically

00:02:30,180 --> 00:02:33,690
and have users scroll through it's like

00:02:31,830 --> 00:02:35,190
a really common interface and it makes

00:02:33,690 --> 00:02:38,430
sense there's no teaching the user how

00:02:35,190 --> 00:02:40,140
to do something similarly ESPN you know

00:02:38,430 --> 00:02:41,940
they love the bar at the top and

00:02:40,140 --> 00:02:45,630
navigation but then the bulk of the

00:02:41,940 --> 00:02:46,920
content is in the document so what are

00:02:45,630 --> 00:02:48,630
the benefits of this one it's been

00:02:46,920 --> 00:02:51,360
familiar for users users know how to

00:02:48,630 --> 00:02:53,160
navigate this kind of application it's

00:02:51,360 --> 00:02:54,690
familiar for developers there's like no

00:02:53,160 --> 00:02:57,540
tricks this stuff has been around for

00:02:54,690 --> 00:02:59,400
years and years and years and browsers

00:02:57,540 --> 00:03:01,320
have were actually literally designed

00:02:59,400 --> 00:03:02,700
for this particular purpose there's a

00:03:01,320 --> 00:03:05,280
reason it's called the document object

00:03:02,700 --> 00:03:06,959
model it's the idea that all of our CSS

00:03:05,280 --> 00:03:09,209
all the way we do stuff is based around

00:03:06,959 --> 00:03:11,310
the idea of positioning a document on

00:03:09,209 --> 00:03:12,720
the screen it's compatible it will run

00:03:11,310 --> 00:03:15,480
everywhere these things are super super

00:03:12,720 --> 00:03:17,640
old and one of the big benefits for me

00:03:15,480 --> 00:03:19,920
to is easy navigation so like this is a

00:03:17,640 --> 00:03:22,830
little picture I drew of me on the couch

00:03:19,920 --> 00:03:25,170
browsing reddit like I have my laptop in

00:03:22,830 --> 00:03:26,730
my lap I scroll with my two fingers and

00:03:25,170 --> 00:03:28,890
I don't want to have to like navigate

00:03:26,730 --> 00:03:30,690
this big space I want like a little bit

00:03:28,890 --> 00:03:33,299
of scrolling to get me everywhere I need

00:03:30,690 --> 00:03:35,340
to be into my application but this is

00:03:33,299 --> 00:03:37,620
also not the best use case for a lot of

00:03:35,340 --> 00:03:39,209
things so if you go to like the website

00:03:37,620 --> 00:03:41,310
for the movie Birdman they have this

00:03:39,209 --> 00:03:43,500
really nice art cinematic with like

00:03:41,310 --> 00:03:45,030
meteors falling down different

00:03:43,500 --> 00:03:47,640
typography when you type in these all

00:03:45,030 --> 00:03:48,660
pop and it's all written in WebGL and

00:03:47,640 --> 00:03:51,150
then there's a lot of things like these

00:03:48,660 --> 00:03:52,799
chrome experiments out there where this

00:03:51,150 --> 00:03:54,810
particular demo what they did is they

00:03:52,799 --> 00:03:56,400
have a they have a globe and the globe

00:03:54,810 --> 00:03:58,170
is completely mapped to be like

00:03:56,400 --> 00:03:59,730
correctly sized and it shows the

00:03:58,170 --> 00:04:01,739
different arms trades between nations so

00:03:59,730 --> 00:04:04,350
you can say art what is that if like how

00:04:01,739 --> 00:04:06,720
many guns and ammunition go between the

00:04:04,350 --> 00:04:08,220
United States and Canada and you can see

00:04:06,720 --> 00:04:10,799
the lines and where they're coming from

00:04:08,220 --> 00:04:12,720
the depth and that's something that only

00:04:10,799 --> 00:04:14,700
really really makes sense when it's not

00:04:12,720 --> 00:04:16,979
in the document form it gives it a lot

00:04:14,700 --> 00:04:18,209
more expression because you're able to

00:04:16,979 --> 00:04:22,049
use three-dimensional space to your

00:04:18,209 --> 00:04:23,940
advantage similarly there's this one

00:04:22,049 --> 00:04:26,790
really cool chrome experiment that is

00:04:23,940 --> 00:04:28,260
the galaxy and it's you literally pick a

00:04:26,790 --> 00:04:29,550
star and you zoom into the star and you

00:04:28,260 --> 00:04:31,800
get to see all the properties about it

00:04:29,550 --> 00:04:33,810
and this only makes sense because

00:04:31,800 --> 00:04:36,479
spatially we want to be able to see the

00:04:33,810 --> 00:04:37,860
galaxy in terms of like proportions as

00:04:36,479 --> 00:04:39,330
to where they are relative to each other

00:04:37,860 --> 00:04:41,780
so you know there is

00:04:39,330 --> 00:04:44,250
legend that says you know 10 pixels is

00:04:41,780 --> 00:04:47,250
one light year away or something like

00:04:44,250 --> 00:04:49,139
that that can accurately describe what

00:04:47,250 --> 00:04:51,000
the galaxy is and again something like

00:04:49,139 --> 00:04:53,610
this does not make sense to be used in a

00:04:51,000 --> 00:04:55,979
document so what are the benefits of

00:04:53,610 --> 00:04:58,949
heavy WebGL use one it's beautiful and

00:04:55,979 --> 00:05:01,169
inspiring you get much much better

00:04:58,949 --> 00:05:03,060
performance than you do with the Dom you

00:05:01,169 --> 00:05:05,099
get shapes the DOM is really really good

00:05:03,060 --> 00:05:07,979
four rectangles and that's about it but

00:05:05,099 --> 00:05:09,330
you can do Torres's you can do pyramids

00:05:07,979 --> 00:05:11,370
you can do triangles you can do any kind

00:05:09,330 --> 00:05:13,620
of shape and you can do arbitrary 3d

00:05:11,370 --> 00:05:16,740
models also so I can import like a coke

00:05:13,620 --> 00:05:18,389
bottle or you know an elephant obj for a

00:05:16,740 --> 00:05:19,800
game or something and now I have the

00:05:18,389 --> 00:05:22,259
ability to create content on the web

00:05:19,800 --> 00:05:26,669
that's not just panels on a screen that

00:05:22,259 --> 00:05:29,400
are moving up and down so the real thing

00:05:26,669 --> 00:05:31,020
is that you saw a few examples that use

00:05:29,400 --> 00:05:33,000
the document to their advantage and you

00:05:31,020 --> 00:05:34,919
saw a few things that used WebGL really

00:05:33,000 --> 00:05:36,449
heavily to their advantage and the idea

00:05:34,919 --> 00:05:38,460
is you want to use the best technology

00:05:36,449 --> 00:05:39,750
that represents your content so if you

00:05:38,460 --> 00:05:41,990
have content that makes sense in the

00:05:39,750 --> 00:05:44,279
document that's fine but there's also

00:05:41,990 --> 00:05:48,930
content that's better represented in a

00:05:44,279 --> 00:05:50,789
non document format but the one thing is

00:05:48,930 --> 00:05:53,400
that it's not just use WebGL for like

00:05:50,789 --> 00:05:55,740
super high like experimental stuff and

00:05:53,400 --> 00:05:58,020
artwork and use Dom for documents the

00:05:55,740 --> 00:06:00,029
Dom can work in a 3d environment it's

00:05:58,020 --> 00:06:01,650
more than just an overlay if you looked

00:06:00,029 --> 00:06:03,240
at like the prior examples with all the

00:06:01,650 --> 00:06:05,310
chrome experiments there was DOM and

00:06:03,240 --> 00:06:07,979
there was WebGL in all of those scenes

00:06:05,310 --> 00:06:10,889
but the Dom was only ever used as an

00:06:07,979 --> 00:06:12,779
overlay that fits in front of the WebGL

00:06:10,889 --> 00:06:16,830
there was never any layering between the

00:06:12,779 --> 00:06:17,969
two and and it the DOM is capable of a

00:06:16,830 --> 00:06:21,240
lot more than that so here are some

00:06:17,969 --> 00:06:23,099
examples to help show like kind of what

00:06:21,240 --> 00:06:24,569
the upper limits for what the Dom can do

00:06:23,099 --> 00:06:26,159
in terms of just like performance so

00:06:24,569 --> 00:06:28,930
here's an example somebody on our

00:06:26,159 --> 00:06:32,100
creative team made of an ad

00:06:28,930 --> 00:06:32,100
and this is all done

00:06:40,969 --> 00:06:43,029
you

00:07:35,199 --> 00:07:40,430
so one more example of just something

00:07:38,000 --> 00:07:41,750
that groups yeah that can be done in the

00:07:40,430 --> 00:07:43,040
dawn this is my personal website just

00:07:41,750 --> 00:07:45,020
something I had to test some stuff but

00:07:43,040 --> 00:07:48,080
this is all dumb and you get the ability

00:07:45,020 --> 00:07:52,550
to manipulate space and work in three

00:07:48,080 --> 00:07:53,750
dimensions just by using DOM and so now

00:07:52,550 --> 00:07:55,790
the question is like well this looks

00:07:53,750 --> 00:07:57,590
really good but it still comes short in

00:07:55,790 --> 00:07:59,479
a lot of ways Dom you're going to hit

00:07:57,590 --> 00:08:01,070
performance issues as soon as you hit a

00:07:59,479 --> 00:08:03,860
large number of elements on your screen

00:08:01,070 --> 00:08:06,320
the browser does not handle it's not

00:08:03,860 --> 00:08:08,030
designed for the case of you know

00:08:06,320 --> 00:08:11,120
thousands of moving dudes on the screen

00:08:08,030 --> 00:08:13,729
all at once also the Dom does not make

00:08:11,120 --> 00:08:15,889
really good their browsers don't make

00:08:13,729 --> 00:08:17,870
really good use of the ability to change

00:08:15,889 --> 00:08:19,400
color frequently when you change color

00:08:17,870 --> 00:08:21,979
you're causing repaints over your entire

00:08:19,400 --> 00:08:23,360
screen and then you can't do certain

00:08:21,979 --> 00:08:25,190
types of blurs you can't do post

00:08:23,360 --> 00:08:26,570
processing all these like types of

00:08:25,190 --> 00:08:28,160
effects that you see in games and you

00:08:26,570 --> 00:08:31,220
see in other forms of medium are kind of

00:08:28,160 --> 00:08:32,990
not at your disposal also you can't do

00:08:31,220 --> 00:08:36,050
shapes you have squares and you have

00:08:32,990 --> 00:08:37,640
circles you can do CSS arrows and you do

00:08:36,050 --> 00:08:39,229
stuff like that but that's you know more

00:08:37,640 --> 00:08:41,029
of a hack than anything else but you're

00:08:39,229 --> 00:08:42,979
really really limited to the amount of

00:08:41,029 --> 00:08:44,720
like different shapes and primitives you

00:08:42,979 --> 00:08:46,550
have and even just the level of detail

00:08:44,720 --> 00:08:48,500
you know I could have a square here that

00:08:46,550 --> 00:08:50,450
has some gradient on it but I can't make

00:08:48,500 --> 00:08:51,890
a gradient that reacts over time based

00:08:50,450 --> 00:08:55,580
on when I click it and that's something

00:08:51,890 --> 00:08:57,410
that WebGL does give you so again one of

00:08:55,580 --> 00:08:59,450
these flaws exists it's because the time

00:08:57,410 --> 00:09:01,339
Dom was not designed to do this browsers

00:08:59,450 --> 00:09:03,290
are optimized for scrolling pages of

00:09:01,339 --> 00:09:05,270
content they make a lot of consolations

00:09:03,290 --> 00:09:06,860
so that when you scroll a webpage up and

00:09:05,270 --> 00:09:09,440
down that image in that video looks

00:09:06,860 --> 00:09:14,420
really really crisp and because of that

00:09:09,440 --> 00:09:16,580
you because of the ability for them to

00:09:14,420 --> 00:09:18,170
scroll up and down like make that really

00:09:16,580 --> 00:09:19,850
really performant they take you take

00:09:18,170 --> 00:09:21,290
hits elsewhere and again this is kind of

00:09:19,850 --> 00:09:23,720
like the roots are in newspaper style

00:09:21,290 --> 00:09:26,540
Dom information so where's the Dom

00:09:23,720 --> 00:09:28,190
better than WebGL so what we want to do

00:09:26,540 --> 00:09:30,080
is we want to be able to the best of

00:09:28,190 --> 00:09:32,209
both of these rendering targets and use

00:09:30,080 --> 00:09:33,980
them into a single API so what is the

00:09:32,209 --> 00:09:37,670
Dom really good for the DOM is really

00:09:33,980 --> 00:09:38,990
good for CSS CSS is like iterating very

00:09:37,670 --> 00:09:42,230
fast they're getting a lot of new stuff

00:09:38,990 --> 00:09:43,940
and you can style really really nice

00:09:42,230 --> 00:09:45,800
looking down with it it's got a built-in

00:09:43,940 --> 00:09:46,700
a venting system it's really good for

00:09:45,800 --> 00:09:48,680
search engine optimization

00:09:46,700 --> 00:09:50,930
asian it's compatible it's everywhere

00:09:48,680 --> 00:09:53,570
you can have forms links and there are

00:09:50,930 --> 00:09:55,850
standards that get try to get followed

00:09:53,570 --> 00:09:57,560
and what is web geo lab WebGL is

00:09:55,850 --> 00:09:59,510
performance gains color changes

00:09:57,560 --> 00:10:01,280
different types of shapes like I was

00:09:59,510 --> 00:10:03,440
mentioning before 3d models it's more

00:10:01,280 --> 00:10:05,240
expressive and something that's also

00:10:03,440 --> 00:10:07,100
nice is that it's more familiar for

00:10:05,240 --> 00:10:10,700
graphics people there that are not

00:10:07,100 --> 00:10:12,350
involved in the web currently so this

00:10:10,700 --> 00:10:15,590
sounds good let's think about what we

00:10:12,350 --> 00:10:17,270
want to do to like make a mixed-mode you

00:10:15,590 --> 00:10:19,310
know rendering system and like what the

00:10:17,270 --> 00:10:20,840
requirements of this would be so the

00:10:19,310 --> 00:10:22,760
first thing is we need one API to roll

00:10:20,840 --> 00:10:24,620
them all we need the exact same

00:10:22,760 --> 00:10:26,740
coordinate space so 20 pixels to the

00:10:24,620 --> 00:10:29,180
right means 20 pixels to the right and

00:10:26,740 --> 00:10:30,830
we need proper layering which means we

00:10:29,180 --> 00:10:33,050
need to have Dom be able to be in front

00:10:30,830 --> 00:10:36,260
of GL and WebGL to be and be able to be

00:10:33,050 --> 00:10:37,670
in front of the DOM and this again needs

00:10:36,260 --> 00:10:40,610
to be abstracted completely away from

00:10:37,670 --> 00:10:44,330
the user so step one let's create a

00:10:40,610 --> 00:10:45,770
single API for the Dom so what we want

00:10:44,330 --> 00:10:47,780
to do is because we want to make use of

00:10:45,770 --> 00:10:50,870
three dimensional space and kind of work

00:10:47,780 --> 00:10:52,640
the way you know WebGL kind of works the

00:10:50,870 --> 00:10:53,990
document object model is not the way we

00:10:52,640 --> 00:10:55,790
want to do layout we want to position

00:10:53,990 --> 00:10:57,770
everything in terms of three dimensions

00:10:55,790 --> 00:10:59,110
and the abstraction we use for this is

00:10:57,770 --> 00:11:01,820
something called a scene graph and

00:10:59,110 --> 00:11:04,490
basically it's a mutable graph of nodes

00:11:01,820 --> 00:11:06,440
where your parent tells you hierarchical

00:11:04,490 --> 00:11:08,420
information about where you are in the

00:11:06,440 --> 00:11:10,250
scene so if I'm a child of a parent node

00:11:08,420 --> 00:11:12,530
and my parent gets translated to the

00:11:10,250 --> 00:11:16,340
right 20 pixels I am also translated to

00:11:12,530 --> 00:11:17,780
the right 20 pixels so that begs the

00:11:16,340 --> 00:11:20,350
question what other type of information

00:11:17,780 --> 00:11:22,940
is hierarchical like what is

00:11:20,350 --> 00:11:26,390
preferentially treated in our system so

00:11:22,940 --> 00:11:28,370
that we can get this motion between you

00:11:26,390 --> 00:11:29,840
know Dom and WebGL synced so we have

00:11:28,370 --> 00:11:34,580
transformed so that's translation

00:11:29,840 --> 00:11:36,740
rotation scale their size so i can set

00:11:34,580 --> 00:11:39,410
size in terms of pixels i could say i'm

00:11:36,740 --> 00:11:42,650
50 by 50 by 50 box or i can say all

00:11:39,410 --> 00:11:44,930
right i'm 50 by 50 but my depth is half

00:11:42,650 --> 00:11:46,670
of my parents depth and then also

00:11:44,930 --> 00:11:48,590
opacity we want to passively chained

00:11:46,670 --> 00:11:51,650
down so if my parent get soap acetate

00:11:48,590 --> 00:11:54,230
addai also need to be a basset ated so

00:11:51,650 --> 00:11:56,270
because of this information we kind of

00:11:54,230 --> 00:11:57,620
have everything we need to define where

00:11:56,270 --> 00:11:58,579
something is in three-dimensional space

00:11:57,620 --> 00:12:01,069
and that

00:11:58,579 --> 00:12:03,379
kind of the key to everything is just by

00:12:01,069 --> 00:12:05,329
having these three properties on every

00:12:03,379 --> 00:12:07,129
note in the scene we can define where

00:12:05,329 --> 00:12:09,619
something is in space and that's kind of

00:12:07,129 --> 00:12:13,129
the crux of the API is that you are

00:12:09,619 --> 00:12:14,509
taking these you know if if a point if a

00:12:13,129 --> 00:12:16,399
node has a point in space that

00:12:14,509 --> 00:12:18,499
determines where it is and it has the

00:12:16,399 --> 00:12:20,119
size so that gives it pretty much a cube

00:12:18,499 --> 00:12:22,129
you're essentially positioning these

00:12:20,119 --> 00:12:24,799
cubes in space to make your application

00:12:22,129 --> 00:12:28,730
and the only thing left to do from that

00:12:24,799 --> 00:12:31,489
point is we need to add the ability to

00:12:28,730 --> 00:12:33,290
draw so the idea is that we have these

00:12:31,489 --> 00:12:36,499
renderable components that attach onto

00:12:33,290 --> 00:12:38,689
nodes and again nodes are defined as a

00:12:36,499 --> 00:12:40,519
point in space a cube so if we just give

00:12:38,689 --> 00:12:42,319
the node the ability to understand how

00:12:40,519 --> 00:12:45,470
to draw or send information on how to

00:12:42,319 --> 00:12:47,019
draw then we're kind of all set so if we

00:12:45,470 --> 00:12:49,220
take a look at this example right here

00:12:47,019 --> 00:12:50,420
you can see like the first line we're

00:12:49,220 --> 00:12:52,399
going to create our scene and we're

00:12:50,420 --> 00:12:53,480
going to add a brand new node and then

00:12:52,399 --> 00:12:54,739
the next few lines we're going to

00:12:53,480 --> 00:12:57,049
position the node we're going to say all

00:12:54,739 --> 00:12:59,029
right you're 250 pixels by 250 pixels by

00:12:57,049 --> 00:13:00,829
250 pixels we're going to move you to

00:12:59,029 --> 00:13:02,689
the center of your parent your center is

00:13:00,829 --> 00:13:04,429
going to be at that point and your

00:13:02,689 --> 00:13:08,119
origin for your rotations is going to be

00:13:04,429 --> 00:13:09,319
your Center so and then we also attach a

00:13:08,119 --> 00:13:11,480
component that's responsible for

00:13:09,319 --> 00:13:13,790
rotating the thing around the y-axis as

00:13:11,480 --> 00:13:15,769
time moves on so this is all the code to

00:13:13,790 --> 00:13:18,019
set up this like fictitious cube in

00:13:15,769 --> 00:13:19,819
space rotating and that's all we need to

00:13:18,019 --> 00:13:21,649
do and now from here what we can do is

00:13:19,819 --> 00:13:24,649
we can attach components to these nodes

00:13:21,649 --> 00:13:26,660
to give them the ability to draw so here

00:13:24,649 --> 00:13:28,100
we have this node that's spinning this

00:13:26,660 --> 00:13:29,209
like invisible node spinning in space

00:13:28,100 --> 00:13:30,799
and we're going to say all right I'm

00:13:29,209 --> 00:13:32,179
going to add a Dom element to it and

00:13:30,799 --> 00:13:34,459
it's going to have a background color of

00:13:32,179 --> 00:13:36,319
red and I'm going to add a mesh to it

00:13:34,459 --> 00:13:38,720
and the meshes geometry is going to be a

00:13:36,319 --> 00:13:42,319
sphere so what this ends up looking like

00:13:38,720 --> 00:13:43,999
is exactly kind of what we would think

00:13:42,319 --> 00:13:45,919
you know we have a single node that's

00:13:43,999 --> 00:13:48,829
spinning and on this thing is both WebGL

00:13:45,919 --> 00:13:50,360
content and Dom content I'll get to more

00:13:48,829 --> 00:13:51,619
about kind of the coordinate space and

00:13:50,360 --> 00:13:53,689
while the layering is working later on

00:13:51,619 --> 00:13:55,309
but you can see that like this API

00:13:53,689 --> 00:13:58,189
really abstract sawey the idea of

00:13:55,309 --> 00:14:01,160
positioning content from the actual

00:13:58,189 --> 00:14:03,230
drawing of the content so the next thing

00:14:01,160 --> 00:14:04,910
we need to reconcile is the differences

00:14:03,230 --> 00:14:07,730
in coordinate systems and unfortunately

00:14:04,910 --> 00:14:09,649
there's a lot of differences so for the

00:14:07,730 --> 00:14:11,610
Dom the origin of the DOM is the top

00:14:09,649 --> 00:14:12,950
left of your screen and it's the

00:14:11,610 --> 00:14:16,350
with in height of the screen and pixels

00:14:12,950 --> 00:14:18,750
and the transform origin of all of these

00:14:16,350 --> 00:14:20,070
on elements is the top left so that's

00:14:18,750 --> 00:14:22,350
why when you put something out identity

00:14:20,070 --> 00:14:24,870
you know it's up in the top left corner

00:14:22,350 --> 00:14:27,600
its top left corner is up there also for

00:14:24,870 --> 00:14:28,860
WebGL is very different the outer bounds

00:14:27,600 --> 00:14:30,149
of the screen are negative one to one

00:14:28,860 --> 00:14:31,890
and with and negative one to one in

00:14:30,149 --> 00:14:34,500
height and when I throw something in at

00:14:31,890 --> 00:14:36,990
the origin and WebGL the center of that

00:14:34,500 --> 00:14:38,880
object is on the center of the screen so

00:14:36,990 --> 00:14:41,070
what we need to do is we need to have

00:14:38,880 --> 00:14:44,760
the ability to treat these to see like

00:14:41,070 --> 00:14:46,380
systems the exact same way so for

00:14:44,760 --> 00:14:49,529
example kind of make sense if I have a

00:14:46,380 --> 00:14:50,940
screen that's for 1400 x 900 and we're

00:14:49,529 --> 00:14:53,130
going to take 100 100 square to the

00:14:50,940 --> 00:14:55,740
right and throw it 50 units down and 100

00:14:53,130 --> 00:14:59,070
units right the Dom in the web dl are

00:14:55,740 --> 00:15:01,589
going to be miles apart so how do we

00:14:59,070 --> 00:15:04,260
reconcile this the first thing we need

00:15:01,589 --> 00:15:06,269
to decide is what we decided to do is

00:15:04,260 --> 00:15:07,829
like what do we want the API in do we

00:15:06,269 --> 00:15:10,560
want the EPI to be in this clip space

00:15:07,829 --> 00:15:12,269
this negative 1 to 1 this around there

00:15:10,560 --> 00:15:15,149
or do we want it to be based in pixels

00:15:12,269 --> 00:15:18,060
and we decided to go with pixels for a

00:15:15,149 --> 00:15:21,029
few reasons one developers know it it's

00:15:18,060 --> 00:15:23,370
easy and the real reason is that it

00:15:21,029 --> 00:15:26,160
makes 2d layout so much easier when

00:15:23,370 --> 00:15:27,480
you're using negative 1 to 1 it's really

00:15:26,160 --> 00:15:28,949
designed for like three dimensional

00:15:27,480 --> 00:15:30,240
environments and it's not designed for

00:15:28,949 --> 00:15:33,149
something that you need pixel perfect

00:15:30,240 --> 00:15:35,670
design for on you know on different

00:15:33,149 --> 00:15:37,529
sized devices and whatever so we went

00:15:35,670 --> 00:15:39,029
with you know the origin is going to be

00:15:37,529 --> 00:15:42,660
up in the top left corner and our entire

00:15:39,029 --> 00:15:44,730
API is going to be in pixels so do it

00:15:42,660 --> 00:15:46,949
all in pixels and then we convert it for

00:15:44,730 --> 00:15:48,269
you so the idea is that you can treat

00:15:46,949 --> 00:15:50,490
your application and write it all in

00:15:48,269 --> 00:15:52,500
pixels in even though WebGL doesn't want

00:15:50,490 --> 00:15:53,910
that kind of information the rendering

00:15:52,500 --> 00:15:56,640
part that you don't even deal with can

00:15:53,910 --> 00:15:58,290
do the conversions for you so what we

00:15:56,640 --> 00:15:59,910
have is we've broken up the system into

00:15:58,290 --> 00:16:01,199
two parts there's the application part

00:15:59,910 --> 00:16:02,640
and there's the render so the

00:16:01,199 --> 00:16:05,070
application part does all your business

00:16:02,640 --> 00:16:06,720
logic your layout logic it has the nodes

00:16:05,070 --> 00:16:07,949
it has all your renderable components

00:16:06,720 --> 00:16:10,110
kind of the code you guys saw earlier

00:16:07,949 --> 00:16:12,120
and then there's the render and what the

00:16:10,110 --> 00:16:13,860
renderer does is it takes draw commands

00:16:12,120 --> 00:16:15,779
that are generated by the nodes and the

00:16:13,860 --> 00:16:17,279
components of the note and it turns them

00:16:15,779 --> 00:16:20,550
into the actual pixels that get drawn

00:16:17,279 --> 00:16:23,660
onto the screen so this is kind of like

00:16:20,550 --> 00:16:25,500
a simple diagram of our architecture

00:16:23,660 --> 00:16:26,970
basically what happens is we

00:16:25,500 --> 00:16:28,950
our render loop which in most cases

00:16:26,970 --> 00:16:32,070
something like requestanimationframe and

00:16:28,950 --> 00:16:33,390
we pass like a frame into here the frame

00:16:32,070 --> 00:16:35,400
lots of the famous engine know that it

00:16:33,390 --> 00:16:36,810
needs to update a bunch of stuff update

00:16:35,400 --> 00:16:38,550
this clock and tells the scenes to

00:16:36,810 --> 00:16:40,110
update what the scenes now do is the

00:16:38,550 --> 00:16:42,330
scenes go through and they say okay did

00:16:40,110 --> 00:16:44,340
anything change for me do I am i red

00:16:42,330 --> 00:16:45,990
instead of blue did I get translated at

00:16:44,340 --> 00:16:47,640
all and it goes through all the nodes in

00:16:45,990 --> 00:16:49,110
the scene and anybody that has diffs

00:16:47,640 --> 00:16:51,240
that they need to push sends all the

00:16:49,110 --> 00:16:52,590
draw commands back over so all of this

00:16:51,240 --> 00:16:54,870
draw command information goes back

00:16:52,590 --> 00:16:56,340
through the compositor and from the

00:16:54,870 --> 00:16:58,170
compositor the compositor can decide

00:16:56,340 --> 00:16:59,850
okay this is information that the Dom

00:16:58,170 --> 00:17:01,260
render needs to know about or the WebGL

00:16:59,850 --> 00:17:03,860
render needs to know about or something

00:17:01,260 --> 00:17:06,949
that they both need to know about so

00:17:03,860 --> 00:17:09,720
from here we can do all of our stuff in

00:17:06,949 --> 00:17:11,670
like in pixel space and then when it

00:17:09,720 --> 00:17:12,810
gets down to the WebGL render the WebGL

00:17:11,670 --> 00:17:14,730
renders can be the one that's

00:17:12,810 --> 00:17:16,319
responsible for saying okay I know what

00:17:14,730 --> 00:17:18,839
to do with this the screen is this big

00:17:16,319 --> 00:17:22,290
and my transform is this so therefore I

00:17:18,839 --> 00:17:24,780
can handle this for them so again if we

00:17:22,290 --> 00:17:26,339
consider the world transform and size in

00:17:24,780 --> 00:17:29,130
pixels and by world transform I mean

00:17:26,339 --> 00:17:31,410
like physical place in reality like

00:17:29,130 --> 00:17:33,060
regardless of camera regardless of thing

00:17:31,410 --> 00:17:34,470
if we're trying to think of our

00:17:33,060 --> 00:17:36,720
applications as three-dimensional seems

00:17:34,470 --> 00:17:38,190
like where they are in space and again

00:17:36,720 --> 00:17:40,980
it's the renders job to make the medium

00:17:38,190 --> 00:17:42,390
specific investments so the Dom does

00:17:40,980 --> 00:17:43,890
have to make some adjustments to because

00:17:42,390 --> 00:17:45,980
we have Dom nesting now which is really

00:17:43,890 --> 00:17:49,980
great you can use CSS and you can use

00:17:45,980 --> 00:17:51,810
you know the bubbling that Dom Nesta Dom

00:17:49,980 --> 00:17:53,250
gives you for free but basically the

00:17:51,810 --> 00:17:55,500
idea is we need to account for the

00:17:53,250 --> 00:17:58,410
parents transform if in world space I'm

00:17:55,500 --> 00:18:01,080
500 pixels to the right and my parent is

00:17:58,410 --> 00:18:04,050
also a Dom element and he in world space

00:18:01,080 --> 00:18:05,460
he's 400 pixels to the right my one that

00:18:04,050 --> 00:18:07,470
I right to the Dom only needs to be 100

00:18:05,460 --> 00:18:10,230
because my parents already taken care of

00:18:07,470 --> 00:18:12,030
400 for me WebGL needs to make very

00:18:10,230 --> 00:18:13,590
similar adjustments they need to convert

00:18:12,030 --> 00:18:15,000
the size to clip space on negative one

00:18:13,590 --> 00:18:18,300
to one they need to convert the

00:18:15,000 --> 00:18:19,560
transforms to clip space- 101 or yet

00:18:18,300 --> 00:18:21,660
negative one to one and then also

00:18:19,560 --> 00:18:23,400
account for the move of the top-left org

00:18:21,660 --> 00:18:28,200
from the middle to the top left of the

00:18:23,400 --> 00:18:29,760
screen so the third step in this is the

00:18:28,200 --> 00:18:32,250
proper layer composition and this is

00:18:29,760 --> 00:18:35,429
kind of like the biggest part of kind of

00:18:32,250 --> 00:18:37,290
what we do so the thing is that we have

00:18:35,429 --> 00:18:39,179
two elements that we control pretty much

00:18:37,290 --> 00:18:39,450
so you put you know a little famous

00:18:39,179 --> 00:18:41,250
apple

00:18:39,450 --> 00:18:43,110
asian somewhere and we have a canvas

00:18:41,250 --> 00:18:44,460
where we put all of our GL content and

00:18:43,110 --> 00:18:47,309
we have a div where we put all of our

00:18:44,460 --> 00:18:49,860
Dom content so how do we get it so that

00:18:47,309 --> 00:18:52,230
Dom can both be in front and in back of

00:18:49,860 --> 00:18:54,899
the WebGL it seems like it can be

00:18:52,230 --> 00:18:56,669
possible so the big trick is that we

00:18:54,899 --> 00:18:58,789
always have our canvas in front of our

00:18:56,669 --> 00:19:00,779
web or in front of our Dom content and

00:18:58,789 --> 00:19:02,760
because we're doing everything in terms

00:19:00,779 --> 00:19:04,950
of world space we know where every Dom

00:19:02,760 --> 00:19:07,080
element is and we can tell the WebGL

00:19:04,950 --> 00:19:09,779
render to add a completely transparent

00:19:07,080 --> 00:19:12,090
Dom L or plane to the scene at the exact

00:19:09,779 --> 00:19:14,610
same location as the Dom element so what

00:19:12,090 --> 00:19:18,630
this does is this pretty much creates an

00:19:14,610 --> 00:19:21,510
invisible plane that is referenced in

00:19:18,630 --> 00:19:25,789
the WebGL render so that it can cut out

00:19:21,510 --> 00:19:27,929
a little little spot for us and so

00:19:25,789 --> 00:19:30,720
basically the thing is that you don't

00:19:27,929 --> 00:19:32,130
ever have Dom in front of WebGL but what

00:19:30,720 --> 00:19:34,470
happens is that we cut out a little

00:19:32,130 --> 00:19:36,659
scene in our web Yale scene so that you

00:19:34,470 --> 00:19:38,549
can look through see the Dom element

00:19:36,659 --> 00:19:41,070
there and it lines up so perfectly that

00:19:38,549 --> 00:19:43,260
you don't even know that your eyes

00:19:41,070 --> 00:19:44,850
pulling a trick and you don't even can't

00:19:43,260 --> 00:19:48,630
even tell that it's like actually

00:19:44,850 --> 00:19:50,730
layered behind it in the Dom so here's

00:19:48,630 --> 00:19:53,730
some of like the cut out stuff in action

00:19:50,730 --> 00:19:55,679
so this is a scene where everything is

00:19:53,730 --> 00:19:57,659
working just some context so we have a

00:19:55,679 --> 00:19:59,190
little light here we have a GL plane and

00:19:57,659 --> 00:20:02,039
we have a Dom element that's right here

00:19:59,190 --> 00:20:04,470
so if we move this around from more on

00:20:02,039 --> 00:20:06,779
perspective to like imagine you and your

00:20:04,470 --> 00:20:10,169
the camera this looks correct like if I

00:20:06,779 --> 00:20:11,549
turn this the angles are right and

00:20:10,169 --> 00:20:16,470
everything is layered the way I would

00:20:11,549 --> 00:20:20,220
imagine it to be so let's say we didn't

00:20:16,470 --> 00:20:22,679
have let's say we didn't have cutouts on

00:20:20,220 --> 00:20:25,679
so that there was no cutting out of that

00:20:22,679 --> 00:20:27,750
invisible plane for for the WebGL scene

00:20:25,679 --> 00:20:29,519
so you can see that like this looks

00:20:27,750 --> 00:20:31,019
somewhere you know the light this was in

00:20:29,519 --> 00:20:33,899
front rotating and you have your plane

00:20:31,019 --> 00:20:37,409
and when I go behind it still looks

00:20:33,899 --> 00:20:39,750
really really good but the issue is I'm

00:20:37,409 --> 00:20:43,620
not cutting out from there so even

00:20:39,750 --> 00:20:45,000
though the the pink div is technically

00:20:43,620 --> 00:20:46,470
in front in world space we're not

00:20:45,000 --> 00:20:48,419
cutting anything out of our plane to

00:20:46,470 --> 00:20:49,950
account for this which is why it looks

00:20:48,419 --> 00:20:51,629
like it's behind it looks like it gets

00:20:49,950 --> 00:20:52,980
hidden behind but even though we know

00:20:51,629 --> 00:20:56,130
that it's in front

00:20:52,980 --> 00:20:57,660
in terms of world space another here's

00:20:56,130 --> 00:20:59,400
one more example of kind of the exact

00:20:57,660 --> 00:21:02,070
same demo but this shows it pretty well

00:20:59,400 --> 00:21:04,590
so we have an invisible div right now

00:21:02,070 --> 00:21:06,030
and we have the same thing so imagine

00:21:04,590 --> 00:21:08,549
the invisible div is right right around

00:21:06,030 --> 00:21:10,440
to your right what you can see is this

00:21:08,549 --> 00:21:13,830
is exactly what's happening is that

00:21:10,440 --> 00:21:16,770
we're just cutting out a plane inside of

00:21:13,830 --> 00:21:19,080
our WebGL scene and now you get this

00:21:16,770 --> 00:21:21,030
complete interactive doing DOM and WebGL

00:21:19,080 --> 00:21:22,980
in the same space the user doesn't need

00:21:21,030 --> 00:21:24,480
to know at all that these are like

00:21:22,980 --> 00:21:27,320
technically not supposed to happen this

00:21:24,480 --> 00:21:29,309
way and we can abstract the like the

00:21:27,320 --> 00:21:31,260
differences between the two rendering

00:21:29,309 --> 00:21:32,760
mediums away from the user so that the

00:21:31,260 --> 00:21:34,320
user can just focus on like okay

00:21:32,760 --> 00:21:36,480
position everything in space in the

00:21:34,320 --> 00:21:38,640
consistent like definition of what lay

00:21:36,480 --> 00:21:45,809
out in spaces and then just draw the

00:21:38,640 --> 00:21:47,970
nice things with the correct tool so we

00:21:45,809 --> 00:21:50,340
also have a few examples of putting it

00:21:47,970 --> 00:21:52,140
all together so these are some like of

00:21:50,340 --> 00:21:54,780
our mixed mode demos that show you know

00:21:52,140 --> 00:21:56,520
what you can do with this and again

00:21:54,780 --> 00:21:58,500
these are demos but you know everybody

00:21:56,520 --> 00:22:00,900
you know you guys probably have the jas

00:21:58,500 --> 00:22:03,809
comp which I open on a tab in your

00:22:00,900 --> 00:22:05,850
browser right now well i have a macbook

00:22:03,809 --> 00:22:08,760
with a macbook with the ge'ez conf

00:22:05,850 --> 00:22:10,650
website in here and this is completely

00:22:08,760 --> 00:22:16,950
navigatable and i can look through this

00:22:10,650 --> 00:22:19,410
and this is all Dom I can check the

00:22:16,950 --> 00:22:21,960
schedule and I can even navigate

00:22:19,410 --> 00:22:23,400
backwards to it and it's really cool and

00:22:21,960 --> 00:22:25,590
that's the nice thing is that like I

00:22:23,400 --> 00:22:27,990
wouldn't want to do that web page again

00:22:25,590 --> 00:22:29,910
in WebGL I wanted to use that web page

00:22:27,990 --> 00:22:32,190
for what it is but I can do cool things

00:22:29,910 --> 00:22:34,470
like I can put it with this macbook obj

00:22:32,190 --> 00:22:36,059
I can put a plane on top of it that has

00:22:34,470 --> 00:22:37,590
some nice sheer on it so it looks like

00:22:36,059 --> 00:22:39,750
there's like lighting glossing off of

00:22:37,590 --> 00:22:42,270
the screen and being able to take the

00:22:39,750 --> 00:22:43,830
best about what these both of what take

00:22:42,270 --> 00:22:45,450
the best of what both these technologies

00:22:43,830 --> 00:22:49,230
has to offer is a really really useful

00:22:45,450 --> 00:22:53,780
thing here's an example that we've had

00:22:49,230 --> 00:22:53,780
for a while now long second

00:23:13,640 --> 00:23:18,540
cool so if you look at all of these

00:23:16,320 --> 00:23:19,890
things they're completely done i can

00:23:18,540 --> 00:23:21,570
highlight them i can select them i can

00:23:19,890 --> 00:23:24,270
copy paste everything that's really nice

00:23:21,570 --> 00:23:26,820
but i can do really cool sparkle effects

00:23:24,270 --> 00:23:30,750
with them and do stuff i couldn't do

00:23:26,820 --> 00:23:32,190
with just you know just the dom yeah

00:23:30,750 --> 00:23:34,050
this could probably be images for now

00:23:32,190 --> 00:23:35,940
but you could imagine these were like

00:23:34,050 --> 00:23:38,670
more glowing and particle effects and

00:23:35,940 --> 00:23:39,960
stuff with you now and you don't again

00:23:38,670 --> 00:23:41,580
the user doesn't have to think about how

00:23:39,960 --> 00:23:44,060
to marry these two they just had already

00:23:41,580 --> 00:23:46,740
existed the exact same coordinate space

00:23:44,060 --> 00:23:48,870
and then the last example of like this

00:23:46,740 --> 00:23:51,870
is something that is completely da Mon

00:23:48,870 --> 00:23:53,910
Lee but just kind of shows the idea more

00:23:51,870 --> 00:23:55,290
so more along like the original point I

00:23:53,910 --> 00:23:56,940
was making is that there's a lot of

00:23:55,290 --> 00:23:58,800
content out there that is just not a

00:23:56,940 --> 00:24:00,690
document and to think about something as

00:23:58,800 --> 00:24:01,980
a document is like a really inherently

00:24:00,690 --> 00:24:04,440
wrong way to think about the problem

00:24:01,980 --> 00:24:06,270
space so if I have an image carousel of

00:24:04,440 --> 00:24:09,120
things and I want to like throw things

00:24:06,270 --> 00:24:10,620
like that nothing about this is document

00:24:09,120 --> 00:24:12,270
the way I thought about this when I was

00:24:10,620 --> 00:24:14,340
building it is okay i have a little

00:24:12,270 --> 00:24:15,870
window right and what i need to be able

00:24:14,340 --> 00:24:19,050
to see are the arrows the dots in the

00:24:15,870 --> 00:24:21,450
middle content everything else i want to

00:24:19,050 --> 00:24:23,040
just put over here and what i ended up

00:24:21,450 --> 00:24:25,050
using is some physics simulation where I

00:24:23,040 --> 00:24:27,240
move some Springs and things from

00:24:25,050 --> 00:24:28,860
outside of the screen come in so if I

00:24:27,240 --> 00:24:31,200
take a look and I tilt this thing back a

00:24:28,860 --> 00:24:33,770
little bit you can see you like this is

00:24:31,200 --> 00:24:37,500
actually kind of what the application is

00:24:33,770 --> 00:24:39,060
and you get out and better sense from

00:24:37,500 --> 00:24:41,030
working like this in my opinion of like

00:24:39,060 --> 00:24:43,320
kind of what you're building and why

00:24:41,030 --> 00:24:45,300
it's easier in that you can think of

00:24:43,320 --> 00:24:47,130
applications is just like a small little

00:24:45,300 --> 00:24:48,780
window into your scene you can hide

00:24:47,130 --> 00:24:51,240
stuff you bind your head and you can do

00:24:48,780 --> 00:24:53,580
really cool stuff like that but you have

00:24:51,240 --> 00:24:54,900
the like really easy ability to kind of

00:24:53,580 --> 00:24:56,910
almost work with something that's more

00:24:54,900 --> 00:24:58,680
tangible than just a document and like

00:24:56,910 --> 00:25:03,980
the magic rules that CSS lay I have to

00:24:58,680 --> 00:25:03,980
give to you cool so

00:25:05,049 --> 00:25:09,580
so what are the current limitations of

00:25:07,299 --> 00:25:13,119
what we have so unfortunately right now

00:25:09,580 --> 00:25:15,610
we only support rectangular dom and that

00:25:13,119 --> 00:25:18,850
is not that bad of a thing because it's

00:25:15,610 --> 00:25:21,129
a completely fixable solution so what we

00:25:18,850 --> 00:25:22,899
have right now is that the cutout we

00:25:21,129 --> 00:25:24,759
make is a complete rectangle that is

00:25:22,899 --> 00:25:26,440
based around the size that you have

00:25:24,759 --> 00:25:28,960
defined through the thing what we're not

00:25:26,440 --> 00:25:30,759
listening for is let's say you have a

00:25:28,960 --> 00:25:33,929
Dom element and the Dom element is there

00:25:30,759 --> 00:25:36,669
and it's border radius you know 25 25 25

00:25:33,929 --> 00:25:39,220
what we can do is we can apply custom

00:25:36,669 --> 00:25:40,929
shaders to that cut out mesh to mimic

00:25:39,220 --> 00:25:43,899
the CSS property so that that gets

00:25:40,929 --> 00:25:46,629
shaped properly also we currently only

00:25:43,899 --> 00:25:49,960
work with opaque tom so if you think

00:25:46,629 --> 00:25:52,809
about it one of the issues is that we're

00:25:49,960 --> 00:25:56,080
doing a full cut out for WebGL so if my

00:25:52,809 --> 00:25:58,330
div is half like translucent I'm

00:25:56,080 --> 00:26:00,159
actually going to miss anything that was

00:25:58,330 --> 00:26:02,559
rendered back behind it that the cutout

00:26:00,159 --> 00:26:04,389
was occluding so what we need to do is

00:26:02,559 --> 00:26:06,039
have a second layer of WebGL that does

00:26:04,389 --> 00:26:09,429
all like the color math for us we're so

00:26:06,039 --> 00:26:11,619
that we can that so that we can pretty

00:26:09,429 --> 00:26:16,269
much fake the idea that there's like

00:26:11,619 --> 00:26:17,649
another layer there so one thing that

00:26:16,269 --> 00:26:19,059
was really good about this project was

00:26:17,649 --> 00:26:20,049
we got a chance to be architected a lot

00:26:19,059 --> 00:26:22,029
of our system and make a lot of

00:26:20,049 --> 00:26:25,690
improvements and as such we had a lot of

00:26:22,029 --> 00:26:27,519
happy side effects one thing that's

00:26:25,690 --> 00:26:28,989
really nice is because the entire system

00:26:27,519 --> 00:26:31,509
is completely based around these draw

00:26:28,989 --> 00:26:33,999
commands that go like from your from

00:26:31,509 --> 00:26:36,340
your components on your nodes to the

00:26:33,999 --> 00:26:38,950
renders this is this code can be

00:26:36,340 --> 00:26:41,470
completely run in like in not the UI

00:26:38,950 --> 00:26:42,999
thread so we can take all of your

00:26:41,470 --> 00:26:44,320
application code where you create your

00:26:42,999 --> 00:26:46,090
scenes you create your nodes and do all

00:26:44,320 --> 00:26:48,460
this stuff and I can throw it into a web

00:26:46,090 --> 00:26:50,259
worker and we have a build working where

00:26:48,460 --> 00:26:52,059
you know you have all your web worker

00:26:50,259 --> 00:26:53,889
code and then it sends it all the draw

00:26:52,059 --> 00:26:55,899
commands to the UI thread and that keeps

00:26:53,889 --> 00:26:57,989
your UI thread just a very very thin

00:26:55,899 --> 00:27:00,489
client that doesn't have to do a lot

00:26:57,989 --> 00:27:04,059
right now the performance benefits of

00:27:00,489 --> 00:27:05,679
web web workers is kind of minimal I

00:27:04,059 --> 00:27:07,119
think there's probably a use case out

00:27:05,679 --> 00:27:08,499
there where people could make use of it

00:27:07,119 --> 00:27:11,350
but the technology is only going to get

00:27:08,499 --> 00:27:13,200
better and it's an abstraction we really

00:27:11,350 --> 00:27:15,309
wanted to keep for a few other reasons

00:27:13,200 --> 00:27:17,590
another reason this kind of stuff is

00:27:15,309 --> 00:27:18,200
good is I we also have ways where I

00:27:17,590 --> 00:27:21,020
could

00:27:18,200 --> 00:27:23,150
on my entire application as a node

00:27:21,020 --> 00:27:25,340
server and I could pipe through socket

00:27:23,150 --> 00:27:27,410
messages to my thin client just what the

00:27:25,340 --> 00:27:30,170
draw commands were so now that's really

00:27:27,410 --> 00:27:32,060
really interesting imagine your ESPN and

00:27:30,170 --> 00:27:33,560
I have like a scoreboard somewhere right

00:27:32,060 --> 00:27:34,970
I don't need to have all of the

00:27:33,560 --> 00:27:37,070
client-side logic for how that

00:27:34,970 --> 00:27:38,900
scoreboard works what i can do is i

00:27:37,070 --> 00:27:40,370
could just have the renderer over there

00:27:38,900 --> 00:27:42,290
and the render is getting all the draw

00:27:40,370 --> 00:27:43,730
commands and all of the like complicated

00:27:42,290 --> 00:27:46,010
logic about what needs to be there

00:27:43,730 --> 00:27:50,240
happens and you know once every hour

00:27:46,010 --> 00:27:52,910
it'll be you know Cincinnati Reds for

00:27:50,240 --> 00:27:54,350
and that's the only like difference that

00:27:52,910 --> 00:28:00,440
needs to happen as a result of like

00:27:54,350 --> 00:28:01,850
these changes so something else yeah so

00:28:00,440 --> 00:28:04,030
some of the next steps that we're

00:28:01,850 --> 00:28:06,710
considering taking with the project are

00:28:04,030 --> 00:28:08,060
rendered to non web technologies so

00:28:06,710 --> 00:28:09,230
again some one of the benefits of this

00:28:08,060 --> 00:28:11,240
whole thing is that it's completely

00:28:09,230 --> 00:28:14,210
based around Rock'em and so what if the

00:28:11,240 --> 00:28:16,610
compositor wasn't compositing for da man

00:28:14,210 --> 00:28:18,770
would do what if you used components

00:28:16,610 --> 00:28:20,540
that output to opengl command and the

00:28:18,770 --> 00:28:22,220
render was an opengl render so you could

00:28:20,540 --> 00:28:23,840
have this completely JavaScript pipeline

00:28:22,220 --> 00:28:25,610
write your application in JavaScript and

00:28:23,840 --> 00:28:29,960
it's generating commands for like a

00:28:25,610 --> 00:28:32,210
native open heel application also you

00:28:29,960 --> 00:28:35,120
know possibly port to azum you know fast

00:28:32,210 --> 00:28:37,910
math is fast no garbage is good garbage

00:28:35,120 --> 00:28:40,610
and it also opens a way for non-web

00:28:37,910 --> 00:28:42,410
people to build into the like get their

00:28:40,610 --> 00:28:43,640
feet wet into the web so if you can

00:28:42,410 --> 00:28:45,620
write haskell if you could write Python

00:28:43,640 --> 00:28:48,560
if you can write c you can write all

00:28:45,620 --> 00:28:51,110
your code compile it down like through

00:28:48,560 --> 00:28:52,880
compiler to llvm bytecode and then we

00:28:51,110 --> 00:28:54,380
can eat that lov m bytecode and just

00:28:52,880 --> 00:28:55,940
shove it in and get stuff rendered on

00:28:54,380 --> 00:28:59,690
the screen so there's some of the things

00:28:55,940 --> 00:29:01,790
that we're kind of working towards so in

00:28:59,690 --> 00:29:03,230
summary I think the big thing is you got

00:29:01,790 --> 00:29:04,970
to think outside the document there's a

00:29:03,230 --> 00:29:06,500
lot of cases where the document is like

00:29:04,970 --> 00:29:09,080
the right thing to do your content

00:29:06,500 --> 00:29:11,630
really is like newspaper style content

00:29:09,080 --> 00:29:13,550
but it's not for everything you know 2d

00:29:11,630 --> 00:29:15,830
layout is a subset of 3d so let's define

00:29:13,550 --> 00:29:17,930
the world in three dimensions if I need

00:29:15,830 --> 00:29:20,300
to do 2d it's about you know moving

00:29:17,930 --> 00:29:21,920
something here and then just working in

00:29:20,300 --> 00:29:24,920
two dimensions like you can make that

00:29:21,920 --> 00:29:27,010
adjustment very very quick by like

00:29:24,920 --> 00:29:29,000
shrinking the amount of Z you use and

00:29:27,010 --> 00:29:30,410
then I think something else that's

00:29:29,000 --> 00:29:31,910
really really nice is the idea of

00:29:30,410 --> 00:29:34,340
abstracting away the rendering meet

00:29:31,910 --> 00:29:35,840
the what the transform in the scene

00:29:34,340 --> 00:29:37,820
graph give you is it gives you the

00:29:35,840 --> 00:29:39,710
ability to think about like points in

00:29:37,820 --> 00:29:43,100
space that are completely agnostic as to

00:29:39,710 --> 00:29:45,410
like where what what I'm rendering to

00:29:43,100 --> 00:29:47,150
these are just mathematical concepts

00:29:45,410 --> 00:29:49,940
that are pervasive and will always exist

00:29:47,150 --> 00:29:51,410
and if you just think of if you think of

00:29:49,940 --> 00:29:52,490
applications and application

00:29:51,410 --> 00:29:54,440
architecture like that and UI

00:29:52,490 --> 00:29:56,270
development like that it's really easy

00:29:54,440 --> 00:29:58,550
to switch in like what the drawing bits

00:29:56,270 --> 00:30:00,800
of that are and again thin clients give

00:29:58,550 --> 00:30:02,480
the flexibility to the web if you're not

00:30:00,800 --> 00:30:03,650
having like full client side code and

00:30:02,480 --> 00:30:05,210
you're just having a render on your

00:30:03,650 --> 00:30:06,230
front and you can do a lot of cool

00:30:05,210 --> 00:30:08,540
things you could do server-side

00:30:06,230 --> 00:30:11,600
rendering you could do web workers you

00:30:08,540 --> 00:30:13,100
can do a lot that you know that

00:30:11,600 --> 00:30:14,420
currently isn't possible with a lot of

00:30:13,100 --> 00:30:15,950
things where you're just you know

00:30:14,420 --> 00:30:18,590
manually touching the DOM and your

00:30:15,950 --> 00:30:20,710
entire like workflow is you grabbing Dom

00:30:18,590 --> 00:30:24,380
elements and manipulating them yourself

00:30:20,710 --> 00:30:25,880
so thank you guys for hear me talk feel

00:30:24,380 --> 00:30:27,800
free to email me at might get famous and

00:30:25,880 --> 00:30:31,630
I don't really have a website but if you

00:30:27,800 --> 00:30:31,630

YouTube URL: https://www.youtube.com/watch?v=5g3NUT8QGGg


