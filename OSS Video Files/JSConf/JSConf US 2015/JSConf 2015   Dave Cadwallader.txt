Title: JSConf 2015   Dave Cadwallader
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	
Captions: 
	00:00:13,919 --> 00:00:21,550
so we're gonna learn how to draw a horse

00:00:17,609 --> 00:00:24,869
it's real easy okay check this out for

00:00:21,550 --> 00:00:29,619
five steps step one draw two circles

00:00:24,869 --> 00:00:31,630
step to draw the legs it's really coming

00:00:29,619 --> 00:00:35,350
together now here see check draw the

00:00:31,630 --> 00:00:42,900
face draw the hair add some small

00:00:35,350 --> 00:00:45,219
details and you got a beautiful horse so

00:00:42,900 --> 00:00:48,430
something's a little bit missing here

00:00:45,219 --> 00:00:50,859
between step 4 and 5 and a lot of

00:00:48,430 --> 00:00:52,690
technology is like this when it comes to

00:00:50,859 --> 00:00:56,010
read me files or instructions or

00:00:52,690 --> 00:00:58,480
technical blogs that kind of paint this

00:00:56,010 --> 00:01:00,519
really rosy picture about how easy

00:00:58,480 --> 00:01:02,320
something is especially you know

00:01:00,519 --> 00:01:03,789
integrating this technology with this

00:01:02,320 --> 00:01:07,360
technology I'm going to give you the

00:01:03,789 --> 00:01:11,170
step-by-step guide I call things like

00:01:07,360 --> 00:01:14,640
this the the troll read me when they

00:01:11,170 --> 00:01:16,959
when they leave out the really nasty

00:01:14,640 --> 00:01:19,390
nitty-gritty details of stuff that

00:01:16,959 --> 00:01:20,830
you're going to get stuck on it give you

00:01:19,390 --> 00:01:23,830
some little getting started guide like

00:01:20,830 --> 00:01:26,319
this you know just NPM install this and

00:01:23,830 --> 00:01:28,090
then super easy and that's it and and

00:01:26,319 --> 00:01:31,000
then you're like right out of the gate

00:01:28,090 --> 00:01:34,090
you just like get smacked down and you

00:01:31,000 --> 00:01:36,009
run into some problem and you go google

00:01:34,090 --> 00:01:37,509
it you go google the error you find out

00:01:36,009 --> 00:01:39,759
there's like thousands of other people

00:01:37,509 --> 00:01:42,160
who have had this problem and there's

00:01:39,759 --> 00:01:44,020
you know 500 different possible

00:01:42,160 --> 00:01:46,360
solutions for the problem and so your

00:01:44,020 --> 00:01:48,220
next step is like great I'm already

00:01:46,360 --> 00:01:51,220
going off on this forked paths like

00:01:48,220 --> 00:01:53,349
which which road do i choose and it's

00:01:51,220 --> 00:01:55,509
really frustrating and so I work for

00:01:53,349 --> 00:01:58,360
Walmart labs and we kept running into

00:01:55,509 --> 00:02:01,270
stuff like this with regards to our

00:01:58,360 --> 00:02:02,890
end-to-end testing strategy when it when

00:02:01,270 --> 00:02:04,569
it came to automation and it it really

00:02:02,890 --> 00:02:08,110
sucked so I wanted to share some of our

00:02:04,569 --> 00:02:12,550
experiences there so that's me and my

00:02:08,110 --> 00:02:15,849
boy up there and me not him work for

00:02:12,550 --> 00:02:17,890
Walmart labs and when we create common

00:02:15,849 --> 00:02:20,230
infrastructure on my team where the core

00:02:17,890 --> 00:02:23,680
web team we create building automation

00:02:20,230 --> 00:02:25,840
tools that other teams use to build out

00:02:23,680 --> 00:02:29,980
everything about ww1

00:02:25,840 --> 00:02:32,019
marcom that that everybody uses so we we

00:02:29,980 --> 00:02:33,670
we try to support them with with common

00:02:32,019 --> 00:02:37,390
tools and infrastructure especially with

00:02:33,670 --> 00:02:38,950
regards to automation to make it so they

00:02:37,390 --> 00:02:41,410
can spend more time doing fun stuff in

00:02:38,950 --> 00:02:44,230
less time doing tedious stuff so we

00:02:41,410 --> 00:02:47,379
follow the test pyramid which you may

00:02:44,230 --> 00:02:49,239
have seen before it prescribes that you

00:02:47,379 --> 00:02:50,950
have a whole lot of unit tests and that

00:02:49,239 --> 00:02:54,549
you rely on unit tests as your bread and

00:02:50,950 --> 00:02:56,349
butter for for for quality control unit

00:02:54,549 --> 00:02:58,750
tests are fast they're reliable they're

00:02:56,349 --> 00:03:00,910
predictable they hopefully our are

00:02:58,750 --> 00:03:04,569
pretty consistent when they pass and

00:03:00,910 --> 00:03:07,450
fail and very easy to run on a dev

00:03:04,569 --> 00:03:08,230
machine see I machine service tests

00:03:07,450 --> 00:03:11,170
we're not really going to talk about

00:03:08,230 --> 00:03:12,790
today but just testing an HTTP endpoint

00:03:11,170 --> 00:03:14,519
on a server to make sure that it's it's

00:03:12,790 --> 00:03:17,379
giving you the response you expect and

00:03:14,519 --> 00:03:18,940
then at the tip of the pyramid just like

00:03:17,379 --> 00:03:22,329
the sweets on your food pyramid in

00:03:18,940 --> 00:03:24,459
moderation but still have them there are

00:03:22,329 --> 00:03:28,060
the are the UI tests or the end-to-end

00:03:24,459 --> 00:03:29,739
tests and these are generally at the tip

00:03:28,060 --> 00:03:32,769
of the pyramid because they're generally

00:03:29,739 --> 00:03:35,500
thought to be slower they're more hard

00:03:32,769 --> 00:03:37,510
to maintain their brittle but for a good

00:03:35,500 --> 00:03:40,180
testing strategy especially with with a

00:03:37,510 --> 00:03:42,280
site as complex as something like

00:03:40,180 --> 00:03:43,989
Walmart it's really necessary because

00:03:42,280 --> 00:03:46,359
when you have a bunch of unit tests that

00:03:43,989 --> 00:03:47,590
are written by separate teams there's no

00:03:46,359 --> 00:03:49,540
matter how good you are there's always

00:03:47,590 --> 00:03:51,040
going to be gaps between this test in

00:03:49,540 --> 00:03:53,069
this test especially if it's going

00:03:51,040 --> 00:03:54,819
across two different functional areas

00:03:53,069 --> 00:03:56,980
there's always going to be missed

00:03:54,819 --> 00:03:58,510
assumptions between between teams

00:03:56,980 --> 00:04:01,000
between developers between different

00:03:58,510 --> 00:04:02,590
parts of your stack and end-to-end tests

00:04:01,000 --> 00:04:04,510
are a good way of just making sure that

00:04:02,590 --> 00:04:10,299
none of those gaps wind up being a

00:04:04,510 --> 00:04:12,160
showstopper so n 10 tests should also be

00:04:10,299 --> 00:04:13,900
cross-browser so everybody should

00:04:12,160 --> 00:04:15,190
understand what browsers they have to

00:04:13,900 --> 00:04:17,349
support and which ones they don't have

00:04:15,190 --> 00:04:18,729
to support because there's a lot of

00:04:17,349 --> 00:04:23,110
browsers that we're really hoping are

00:04:18,729 --> 00:04:25,060
going to die off IE 8 and friends as

00:04:23,110 --> 00:04:27,190
soon as possible but there's still a

00:04:25,060 --> 00:04:29,650
depressingly large number of customers

00:04:27,190 --> 00:04:31,300
using these old browsers and we know

00:04:29,650 --> 00:04:33,789
that if we stop supporting them we would

00:04:31,300 --> 00:04:35,380
lose X number of dollars so it's a huge

00:04:33,789 --> 00:04:37,450
pain to test them all it's a huge waste

00:04:35,380 --> 00:04:40,060
of human time to run through the same

00:04:37,450 --> 00:04:42,600
scenarios over and over

00:04:40,060 --> 00:04:46,000
on all these different browsers and

00:04:42,600 --> 00:04:47,950
because it's a pain to test it means you

00:04:46,000 --> 00:04:51,580
all know what I'm talking about like did

00:04:47,950 --> 00:04:56,110
you test it on ie oh yeah I did last

00:04:51,580 --> 00:04:57,880
last month maybe and QA people you know

00:04:56,110 --> 00:04:59,230
are the same way right there they're not

00:04:57,880 --> 00:05:00,790
they're not physically going to have

00:04:59,230 --> 00:05:02,710
enough time in the day to run all their

00:05:00,790 --> 00:05:04,180
test cases continuously in all the

00:05:02,710 --> 00:05:05,770
browsers we have to support so things

00:05:04,180 --> 00:05:07,300
are going to slip there's going to be

00:05:05,770 --> 00:05:10,990
times when maybe it's a week or two

00:05:07,300 --> 00:05:13,630
weeks since anybody actually fired up

00:05:10,990 --> 00:05:16,110
ie8 and ran through all of the scenarios

00:05:13,630 --> 00:05:18,970
to make sure everything still works and

00:05:16,110 --> 00:05:21,520
because of that if somebody finds a bug

00:05:18,970 --> 00:05:23,050
in ie8 the first question we often ask

00:05:21,520 --> 00:05:26,500
is well when was the last time it worked

00:05:23,050 --> 00:05:29,290
in ie8 well I don't know I tested it I

00:05:26,500 --> 00:05:30,580
think three weeks ago perfect let's look

00:05:29,290 --> 00:05:32,710
at all the commits in the last three

00:05:30,580 --> 00:05:34,540
weeks and figure out which one caused a

00:05:32,710 --> 00:05:39,250
regression in a legacy browser that

00:05:34,540 --> 00:05:41,350
sucks nobody likes doing that but what

00:05:39,250 --> 00:05:43,240
can we do about it right so automation

00:05:41,350 --> 00:05:44,680
everybody says that's it I'm going to

00:05:43,240 --> 00:05:46,600
sit down I'm going to figure out how to

00:05:44,680 --> 00:05:50,110
automate all this stuff so I don't have

00:05:46,600 --> 00:05:52,000
to do it by hand anymore awesome how

00:05:50,110 --> 00:05:55,240
many people have said have said that

00:05:52,000 --> 00:05:59,200
before that's it okay yeah see you know

00:05:55,240 --> 00:06:01,510
what I'm talking about so pretty much

00:05:59,200 --> 00:06:03,490
every cross browser end-to-end testing

00:06:01,510 --> 00:06:07,840
solution relies on selenium at its core

00:06:03,490 --> 00:06:10,210
so this is a great tool open source it

00:06:07,840 --> 00:06:11,979
has drivers for every major browser that

00:06:10,210 --> 00:06:13,960
give you deep hooks into the browser to

00:06:11,979 --> 00:06:16,960
control it with with puppet strings to

00:06:13,960 --> 00:06:18,370
tell it you know to behave and do any

00:06:16,960 --> 00:06:19,840
kind of user interaction that a user

00:06:18,370 --> 00:06:24,100
would do click this fill in this form

00:06:19,840 --> 00:06:28,120
navigate here it has an API that's over

00:06:24,100 --> 00:06:29,530
HTTP HTTP it's not the most friendly API

00:06:28,120 --> 00:06:31,270
to work with so there's always a lot of

00:06:29,530 --> 00:06:35,560
rappers on top of selenium that people

00:06:31,270 --> 00:06:36,700
use and and there's a lot of companion

00:06:35,560 --> 00:06:39,010
tools that go along with it a lot of

00:06:36,700 --> 00:06:42,910
services like sauce labs this is a

00:06:39,010 --> 00:06:45,160
diagram of sauce labs which we use to

00:06:42,910 --> 00:06:47,280
outsource the tedious task of

00:06:45,160 --> 00:06:49,599
maintaining a farm of different browsers

00:06:47,280 --> 00:06:51,490
there's browser stack there's there's a

00:06:49,599 --> 00:06:52,990
whole bunch of other ones but there's a

00:06:51,490 --> 00:06:54,009
whole ecosystem around this because

00:06:52,990 --> 00:06:56,830
people really

00:06:54,009 --> 00:06:57,969
this kind of stuff to work but when you

00:06:56,830 --> 00:07:00,389
start putting all these pieces together

00:06:57,969 --> 00:07:02,619
companion libraries for selenium

00:07:00,389 --> 00:07:06,189
external services to manage your

00:07:02,619 --> 00:07:08,020
browsers as a service it starts to look

00:07:06,189 --> 00:07:11,559
like this it's a big rube goldberg

00:07:08,020 --> 00:07:12,969
machine there's so many points of

00:07:11,559 --> 00:07:17,919
failure that it's hard to keep track of

00:07:12,969 --> 00:07:20,830
them all and guaranteed anybody who

00:07:17,919 --> 00:07:25,749
starts down this path sooner or later is

00:07:20,830 --> 00:07:27,399
going to run into test flake so when we

00:07:25,749 --> 00:07:29,349
talk about test flake we're not talking

00:07:27,399 --> 00:07:31,330
about the tests that developers

00:07:29,349 --> 00:07:33,099
themselves are writing being flaky we're

00:07:31,330 --> 00:07:35,349
not talking about bad application code

00:07:33,099 --> 00:07:38,379
we're talking about something in the

00:07:35,349 --> 00:07:41,069
system in this big complicated system

00:07:38,379 --> 00:07:43,960
failing for really no good reason at all

00:07:41,069 --> 00:07:45,789
creating false positive results sending

00:07:43,960 --> 00:07:49,990
developers on a wild-goose chase when

00:07:45,789 --> 00:07:51,689
something fails only to realize five

00:07:49,990 --> 00:07:54,849
minutes later this thing that I've been

00:07:51,689 --> 00:07:56,830
chasing is now passing unexplained you

00:07:54,849 --> 00:08:00,819
know for no good reason and I just

00:07:56,830 --> 00:08:02,139
wasted all that time so see also waste

00:08:00,819 --> 00:08:04,629
everyone's time with this one weird

00:08:02,139 --> 00:08:07,389
trick developers ate this so anybody

00:08:04,629 --> 00:08:09,639
who's tried to implement an antenna

00:08:07,389 --> 00:08:11,529
testing solution has probably had the

00:08:09,639 --> 00:08:13,479
best of intentions but has wound up

00:08:11,529 --> 00:08:17,289
frustrating a whole lot of people if

00:08:13,479 --> 00:08:18,759
they try to get them to use it just a

00:08:17,289 --> 00:08:20,709
quick plug for a really awesome podcast

00:08:18,759 --> 00:08:23,289
if anybody hasn't checked out Rebecca

00:08:20,709 --> 00:08:24,969
Murphy's TTM podcasts definitely check

00:08:23,289 --> 00:08:27,999
it out it's all about front-end ops and

00:08:24,969 --> 00:08:30,849
this emerging discipline I was on I

00:08:27,999 --> 00:08:33,550
think episode 4 talking about some of

00:08:30,849 --> 00:08:35,409
the same stuff in more detail but the

00:08:33,550 --> 00:08:36,849
the really cool thing to hear was was

00:08:35,409 --> 00:08:38,889
everybody else on the interviews before

00:08:36,849 --> 00:08:40,329
me she asked them if they if they were

00:08:38,889 --> 00:08:41,919
doing end-to-end testing and they said

00:08:40,329 --> 00:08:44,589
we really want to but it's just not

00:08:41,919 --> 00:08:48,970
really worth the time because it's just

00:08:44,589 --> 00:08:50,740
so flaky it's so frustrating so you know

00:08:48,970 --> 00:08:52,389
this this this was really actually good

00:08:50,740 --> 00:08:53,709
to hear because it lends a lot of

00:08:52,389 --> 00:08:56,769
credibility to this fight that we're

00:08:53,709 --> 00:08:59,410
trying to fight even on Google's own

00:08:56,769 --> 00:09:01,300
google testing blog there was this great

00:08:59,410 --> 00:09:02,949
article called just say no to more

00:09:01,300 --> 00:09:05,050
end-to-end tests like I thought this was

00:09:02,949 --> 00:09:07,870
click bait because it was such a you

00:09:05,050 --> 00:09:09,839
know like bold title here but like

00:09:07,870 --> 00:09:12,220
they made some really really good points

00:09:09,839 --> 00:09:15,460
but my favorite line here was that they

00:09:12,220 --> 00:09:16,600
it compared end-to-end testing to going

00:09:15,460 --> 00:09:18,490
to a movie with your friends that you

00:09:16,600 --> 00:09:21,160
all wanted to see and then you all

00:09:18,490 --> 00:09:23,880
regretted watching afterwards like a

00:09:21,160 --> 00:09:25,779
good idea that just failed in practice

00:09:23,880 --> 00:09:27,279
but they talked about a lot of good

00:09:25,779 --> 00:09:30,010
points in here they talk about n timed

00:09:27,279 --> 00:09:32,410
tests being slow unreliable flaky and

00:09:30,010 --> 00:09:33,520
that they don't isolate failures so at

00:09:32,410 --> 00:09:35,410
the end of the day while they have the

00:09:33,520 --> 00:09:39,700
best intentions they end up just wasting

00:09:35,410 --> 00:09:41,410
more time than they save so we said all

00:09:39,700 --> 00:09:42,730
right we're going that we're going to

00:09:41,410 --> 00:09:45,250
roll up our sleeves and we're going to

00:09:42,730 --> 00:09:46,779
really fix this right we have what we

00:09:45,250 --> 00:09:49,060
have a team of people we asked for some

00:09:46,779 --> 00:09:52,029
time to like focus on this for a few

00:09:49,060 --> 00:09:53,500
months so we got this right so we

00:09:52,029 --> 00:09:55,810
decided we're going to create an

00:09:53,500 --> 00:09:59,339
end-to-end testing solution that's going

00:09:55,810 --> 00:10:01,150
to work for dev and QA alike so so

00:09:59,339 --> 00:10:02,410
non-technical people should be able to

00:10:01,150 --> 00:10:05,680
write tests there shouldn't be a high

00:10:02,410 --> 00:10:10,000
barrier to entry should be fast enough

00:10:05,680 --> 00:10:13,029
to run as part of our CI system and no

00:10:10,000 --> 00:10:14,170
flake absolutely not acceptable we want

00:10:13,029 --> 00:10:16,540
to win the hearts and minds of

00:10:14,170 --> 00:10:20,529
developers and QA and we're going to

00:10:16,540 --> 00:10:23,800
have no tolerance for false positives so

00:10:20,529 --> 00:10:25,390
for the first goal of of having tests

00:10:23,800 --> 00:10:28,330
that are simple enough to write for for

00:10:25,390 --> 00:10:30,850
QA as well we picked a companion library

00:10:28,330 --> 00:10:32,589
a nodejs based adapter called Night

00:10:30,850 --> 00:10:33,970
Watch it's one of the more popular ones

00:10:32,589 --> 00:10:36,160
there's a lot of them that are really

00:10:33,970 --> 00:10:38,980
good that talked to selenium through a

00:10:36,160 --> 00:10:41,260
node API to make the the API a little

00:10:38,980 --> 00:10:43,959
bit more palatable to work with a Night

00:10:41,260 --> 00:10:45,550
Watch is awesome and we made some really

00:10:43,959 --> 00:10:47,470
great progress with it right off the bat

00:10:45,550 --> 00:10:49,570
we were taming these browsers we got a

00:10:47,470 --> 00:10:51,010
sauce labs subscription we had a huge

00:10:49,570 --> 00:10:53,890
collaborative test writing effort

00:10:51,010 --> 00:10:56,170
between developers and QA and we were

00:10:53,890 --> 00:10:57,670
rocking we were getting just every green

00:10:56,170 --> 00:10:59,560
checkmark we saw we were thinking of

00:10:57,670 --> 00:11:02,650
we're saving this many hours of manual

00:10:59,560 --> 00:11:04,060
time and and QA is loving us and

00:11:02,650 --> 00:11:05,230
developers are going to love us because

00:11:04,060 --> 00:11:08,260
we're going to catch these regressions

00:11:05,230 --> 00:11:09,520
sooner rather than later so we started

00:11:08,260 --> 00:11:11,920
running these tests just you know

00:11:09,520 --> 00:11:14,110
hundreds of them every hour and all the

00:11:11,920 --> 00:11:15,550
time and increasing our browser matrix

00:11:14,110 --> 00:11:19,390
more and more going back you know

00:11:15,550 --> 00:11:21,000
testing IE 8 9 10 11 Firefox last couple

00:11:19,390 --> 00:11:24,090
versions chrome

00:11:21,000 --> 00:11:26,520
are a mobile emulators everything was

00:11:24,090 --> 00:11:28,680
golden and every now and then we'd see

00:11:26,520 --> 00:11:31,260
something like this would be like Oh a

00:11:28,680 --> 00:11:33,180
test failure great our tool caught

00:11:31,260 --> 00:11:36,020
something in the wild let's go let's go

00:11:33,180 --> 00:11:39,600
fix it and then five minutes later Oh

00:11:36,020 --> 00:11:40,980
past that time okay well just a little

00:11:39,600 --> 00:11:45,410
glitch nothing to worry about and then

00:11:40,980 --> 00:11:48,000
like 10 minutes later oh that one failed

00:11:45,410 --> 00:11:51,990
okay nothing to worry about you know

00:11:48,000 --> 00:11:56,430
we'll just kind of like sweep that under

00:11:51,990 --> 00:12:00,120
the oh okay and then oh no why is it

00:11:56,430 --> 00:12:02,190
passing now and so we we got really

00:12:00,120 --> 00:12:04,650
really quickly like the old 8020 rule

00:12:02,190 --> 00:12:06,330
right like we got really close to this

00:12:04,650 --> 00:12:08,850
eighty percent mark of being super happy

00:12:06,330 --> 00:12:10,470
and then we were just like ah like we

00:12:08,850 --> 00:12:15,000
were so close to feeling like this was a

00:12:10,470 --> 00:12:16,500
complete solution and in the end we have

00:12:15,000 --> 00:12:18,660
the same problems with flakiness as

00:12:16,500 --> 00:12:21,300
everybody else despite trying to design

00:12:18,660 --> 00:12:23,430
with overcoming these very specific

00:12:21,300 --> 00:12:26,550
flaky things from the beginning we still

00:12:23,430 --> 00:12:27,960
got burned by this so let's look we

00:12:26,550 --> 00:12:30,000
thought okay we need to change our

00:12:27,960 --> 00:12:32,280
mindset here we've been we've been we

00:12:30,000 --> 00:12:33,839
need we have this realization like whoa

00:12:32,280 --> 00:12:37,500
we okay we've been trying to think of

00:12:33,839 --> 00:12:39,180
end-to-end tests like unit tests like a

00:12:37,500 --> 00:12:41,339
predictable environment that we can

00:12:39,180 --> 00:12:43,920
control but but in reality they're

00:12:41,339 --> 00:12:45,500
they're nothing like that at all so we

00:12:43,920 --> 00:12:49,950
came up with this little metaphor of

00:12:45,500 --> 00:12:52,410
soup a can of soup is like a test result

00:12:49,950 --> 00:12:54,900
when you're hungry okay i'm hungry i

00:12:52,410 --> 00:12:56,490
want to have some soup for lunch i want

00:12:54,900 --> 00:12:58,710
to be able to test my code i want to run

00:12:56,490 --> 00:13:02,010
this test and I want to get a test

00:12:58,710 --> 00:13:03,930
result back a binary pass/fail which is

00:13:02,010 --> 00:13:07,350
which is like reaching and getting a can

00:13:03,930 --> 00:13:09,870
of soup so stick with me here with a

00:13:07,350 --> 00:13:11,339
unit tests it's like going and grabbing

00:13:09,870 --> 00:13:14,250
a can of soup from your own kitchen

00:13:11,339 --> 00:13:15,900
cupboard you're controlling the safety

00:13:14,250 --> 00:13:17,580
of your own house it's very safe it's

00:13:15,900 --> 00:13:19,230
quick and easy it's right there you just

00:13:17,580 --> 00:13:21,720
have to reach right there and grab it

00:13:19,230 --> 00:13:22,890
and so that's why everybody loves unit

00:13:21,720 --> 00:13:28,560
tests they're predictable they're easy

00:13:22,890 --> 00:13:30,150
end to end tests are different so n 10

00:13:28,560 --> 00:13:33,030
tests you want your can of soup first

00:13:30,150 --> 00:13:33,990
you have to get in your car next you

00:13:33,030 --> 00:13:34,830
have to drive through a zombie

00:13:33,990 --> 00:13:37,050
apocalypse

00:13:34,830 --> 00:13:39,240
on the way to the grocery store who

00:13:37,050 --> 00:13:40,740
knows what's going to happen when you

00:13:39,240 --> 00:13:43,680
get to the grocery store a store might

00:13:40,740 --> 00:13:45,060
be overrun by zombies and once you

00:13:43,680 --> 00:13:46,800
actually grab your can of soup you might

00:13:45,060 --> 00:13:49,920
have to like fight to the death on your

00:13:46,800 --> 00:13:51,900
on your way out to try to get home so in

00:13:49,920 --> 00:13:54,090
this metaphor the the lurking zombies

00:13:51,900 --> 00:13:55,680
are all of these things that we have

00:13:54,090 --> 00:13:59,520
encountered as being sources of test

00:13:55,680 --> 00:14:01,050
flake there's bugs in the web drivers

00:13:59,520 --> 00:14:03,120
themselves this this goes back to that

00:14:01,050 --> 00:14:04,260
troll read me thing it's like none of

00:14:03,120 --> 00:14:06,360
the none of the read Mees for these

00:14:04,260 --> 00:14:07,920
things talk about all of these common

00:14:06,360 --> 00:14:10,680
sources of flake that like everybody

00:14:07,920 --> 00:14:12,660
quickly discovers the web drivers

00:14:10,680 --> 00:14:15,210
themselves have bugs ie driver it's like

00:14:12,660 --> 00:14:17,520
five percent of the time when you tell

00:14:15,210 --> 00:14:19,590
selenium to click on a button it says

00:14:17,520 --> 00:14:24,660
that it did it but it didn't really

00:14:19,590 --> 00:14:28,080
click it oh well flaky network so like I

00:14:24,660 --> 00:14:29,460
said everything runs over HTTP when

00:14:28,080 --> 00:14:31,500
you're set when you're doing hundreds

00:14:29,460 --> 00:14:33,360
and thousands of tests per day and you

00:14:31,500 --> 00:14:35,400
have these really chatty selenium

00:14:33,360 --> 00:14:37,620
clients talking to these remote servers

00:14:35,400 --> 00:14:39,810
across different networks and data

00:14:37,620 --> 00:14:41,660
centers inevitably you're going to have

00:14:39,810 --> 00:14:43,920
some some packet loss here and there and

00:14:41,660 --> 00:14:45,870
just one little drop to packet here and

00:14:43,920 --> 00:14:47,730
there can just make a test blow up or

00:14:45,870 --> 00:14:50,340
timeout and there's nothing you can do

00:14:47,730 --> 00:14:52,560
about it and then sometimes the services

00:14:50,340 --> 00:14:54,630
themselves might have bugs or outages or

00:14:52,560 --> 00:14:59,820
you know a vm just fails to spin up and

00:14:54,630 --> 00:15:01,230
a test fails and we we tried to you know

00:14:59,820 --> 00:15:02,940
treat these things like a whack-a-mole

00:15:01,230 --> 00:15:04,680
problem where we just deal with each one

00:15:02,940 --> 00:15:06,900
at a time but even months into this

00:15:04,680 --> 00:15:08,460
project we were still hitting new

00:15:06,900 --> 00:15:11,010
problems that we had never seen before

00:15:08,460 --> 00:15:12,690
and we you know some of these problems

00:15:11,010 --> 00:15:15,240
were super obscure we would google them

00:15:12,690 --> 00:15:18,600
and we'd find you know one person with a

00:15:15,240 --> 00:15:20,480
post you know from 2006 with the same

00:15:18,600 --> 00:15:25,280
problem and then no response were like

00:15:20,480 --> 00:15:25,280
like that XKCD comic what did you see

00:15:25,550 --> 00:15:30,330
but we really quickly realized this is a

00:15:27,990 --> 00:15:32,250
losing battle so there's going to be new

00:15:30,330 --> 00:15:35,130
problems every day we can't possibly fix

00:15:32,250 --> 00:15:39,450
them all but what do we do did we just

00:15:35,130 --> 00:15:43,200
give up we had this this moment where

00:15:39,450 --> 00:15:46,140
you said what if what if we could just

00:15:43,200 --> 00:15:48,570
make all of these flaky tests not flaky

00:15:46,140 --> 00:15:51,170
anymore without actually fixing the

00:15:48,570 --> 00:15:54,450
dividual problems this was a very like

00:15:51,170 --> 00:15:56,520
Morpheus moment here how can we make the

00:15:54,450 --> 00:15:59,580
tests not flaky without actually fixing

00:15:56,520 --> 00:16:03,870
anything so we had to go back and think

00:15:59,580 --> 00:16:05,220
about some more geeky stuff here so from

00:16:03,870 --> 00:16:07,080
the point of view of the consumers of

00:16:05,220 --> 00:16:08,610
our tool the developers who are going to

00:16:07,080 --> 00:16:10,500
be running these tests and the QA people

00:16:08,610 --> 00:16:14,550
who are going to be writing these tests

00:16:10,500 --> 00:16:18,630
the notion of a pass/fail or a can of

00:16:14,550 --> 00:16:20,790
soup in this metaphor is an axiom in in

00:16:18,630 --> 00:16:22,920
a mathematical proof it's a premise or a

00:16:20,790 --> 00:16:24,600
starting point of reasoning a premise so

00:16:22,920 --> 00:16:27,270
evident as to be accepted as true

00:16:24,600 --> 00:16:30,420
without controversy if we broke that

00:16:27,270 --> 00:16:32,520
axiom we've lost everybody if nobody

00:16:30,420 --> 00:16:33,780
trusts our tool to be accurate they're

00:16:32,520 --> 00:16:35,370
not going to use it they're not going to

00:16:33,780 --> 00:16:39,870
pay attention to it when it breaks and

00:16:35,370 --> 00:16:43,350
so we had to make it so that this axiom

00:16:39,870 --> 00:16:45,150
was true no matter what and making it

00:16:43,350 --> 00:16:48,360
true was actually more important than

00:16:45,150 --> 00:16:52,830
how we made it true this is where things

00:16:48,360 --> 00:16:56,940
get a little bit scary we did some dirty

00:16:52,830 --> 00:16:58,860
stuff really dirty stuff duct tape and

00:16:56,940 --> 00:17:00,960
rubber bands like don't look under the

00:16:58,860 --> 00:17:05,189
covers stuff to make some of these tests

00:17:00,960 --> 00:17:08,430
pass we figured out okay if an assertion

00:17:05,189 --> 00:17:09,810
fails the first time let's just try it

00:17:08,430 --> 00:17:11,730
again and see if it passes the second

00:17:09,810 --> 00:17:14,070
time and if it fails that time let's try

00:17:11,730 --> 00:17:16,290
it again like a few hundred milliseconds

00:17:14,070 --> 00:17:18,570
later and see if it passes that time we

00:17:16,290 --> 00:17:21,600
found out like hey that seems like a

00:17:18,570 --> 00:17:23,579
really ugly hack but that makes tests

00:17:21,600 --> 00:17:27,270
past fifty percent more at the time than

00:17:23,579 --> 00:17:29,610
it used to then we had these like IE

00:17:27,270 --> 00:17:31,280
driver bugs like oh that click thing

00:17:29,610 --> 00:17:33,540
that said it clicked but didn't work

00:17:31,280 --> 00:17:35,910
what if instead of using the buggy

00:17:33,540 --> 00:17:37,950
selenium driver for click events what if

00:17:35,910 --> 00:17:39,720
we actually inject jQuery into the page

00:17:37,950 --> 00:17:42,960
if it's not already there and actually

00:17:39,720 --> 00:17:44,430
do a jQuery click event and that

00:17:42,960 --> 00:17:46,680
smoothed over like another twenty five

00:17:44,430 --> 00:17:48,540
percent of the tests so we're kind of

00:17:46,680 --> 00:17:51,990
like addicted to this to this like new

00:17:48,540 --> 00:17:55,670
sort of like fighting dirty kind of kind

00:17:51,990 --> 00:17:58,680
of method for dealing with our zombies

00:17:55,670 --> 00:18:00,330
but we were we were making huge progress

00:17:58,680 --> 00:18:02,070
and we're starting to see fewer and

00:18:00,330 --> 00:18:03,540
fewer of those false positives

00:18:02,070 --> 00:18:06,720
so this is where we kind of had this

00:18:03,540 --> 00:18:10,350
major breakthrough where we were gaining

00:18:06,720 --> 00:18:12,330
momentum and we were smoothing over all

00:18:10,350 --> 00:18:14,280
these bumps in in kind of non optimal

00:18:12,330 --> 00:18:16,650
ways but the momentum that we were

00:18:14,280 --> 00:18:19,050
gaining was much more important than how

00:18:16,650 --> 00:18:20,760
what we had to do to gain that momentum

00:18:19,050 --> 00:18:23,040
and we started thinking of this in a

00:18:20,760 --> 00:18:25,530
different mindset that not all problems

00:18:23,040 --> 00:18:27,150
require precision solutions sometimes

00:18:25,530 --> 00:18:30,750
you just have to smooth over the speed

00:18:27,150 --> 00:18:32,550
bump to move on so we kind of ended up

00:18:30,750 --> 00:18:34,080
with something like this instead of

00:18:32,550 --> 00:18:37,560
getting in your car to get to the

00:18:34,080 --> 00:18:39,480
grocery store you get into this you get

00:18:37,560 --> 00:18:41,840
into this armored convoy this is this is

00:18:39,480 --> 00:18:44,220
this is the the tool that we built and

00:18:41,840 --> 00:18:47,610
it's going to get you to the grocery

00:18:44,220 --> 00:18:50,940
store one way or the other is it

00:18:47,610 --> 00:18:53,280
overkill yes no question about it is it

00:18:50,940 --> 00:18:55,340
is it computationally expensive all the

00:18:53,280 --> 00:18:57,510
stuff that we're doing no question

00:18:55,340 --> 00:19:00,750
making the test run slower with all

00:18:57,510 --> 00:19:03,210
these retries and things yeah not going

00:19:00,750 --> 00:19:06,180
to argue with that but does it fix the

00:19:03,210 --> 00:19:10,290
Reliant reliability problem hell yes it

00:19:06,180 --> 00:19:11,640
did anybody watch The Walking Dead so

00:19:10,290 --> 00:19:14,940
when they come to a zombie do they're

00:19:11,640 --> 00:19:17,190
like they say Oh Sam be yes I'm dead now

00:19:14,940 --> 00:19:19,410
no they drive like sometimes they just

00:19:17,190 --> 00:19:20,790
drive through herds of zombies and you

00:19:19,410 --> 00:19:23,870
know turn on the windshield wipers and

00:19:20,790 --> 00:19:27,030
like they get to the other side right so

00:19:23,870 --> 00:19:29,910
that's what you have to do in today's

00:19:27,030 --> 00:19:32,940
world of end-to-end testing to get to

00:19:29,910 --> 00:19:35,340
this point so we're back at this point

00:19:32,940 --> 00:19:37,290
now we're getting tests running we're

00:19:35,340 --> 00:19:40,230
going days and weeks without seeing any

00:19:37,290 --> 00:19:42,540
false positives and when we do see a

00:19:40,230 --> 00:19:44,340
test failure we don't even have to

00:19:42,540 --> 00:19:47,790
investigate it anymore ourselves we can

00:19:44,340 --> 00:19:51,030
just send this directly to the to the

00:19:47,790 --> 00:19:53,700
developer who owns the test and say hey

00:19:51,030 --> 00:19:57,540
check this out looks like ie9 is broken

00:19:53,700 --> 00:19:58,890
when you try to view your cart and it

00:19:57,540 --> 00:20:00,180
used to be that we'd be shaking in our

00:19:58,890 --> 00:20:02,760
shoes whenever we'd have that

00:20:00,180 --> 00:20:04,050
conversation because we'd be worried is

00:20:02,760 --> 00:20:06,050
it going to turn out to be our problem

00:20:04,050 --> 00:20:07,950
and then we just pissed off a developer

00:20:06,050 --> 00:20:10,380
because there we're going to waste their

00:20:07,950 --> 00:20:13,380
time but now it's like oh thanks man

00:20:10,380 --> 00:20:14,820
like you just saved me from having to

00:20:13,380 --> 00:20:16,340
pull an all-nighter when we when we

00:20:14,820 --> 00:20:19,680
launch next week

00:20:16,340 --> 00:20:21,420
so we're back to this point where we're

00:20:19,680 --> 00:20:24,750
making great progress we hit our speed

00:20:21,420 --> 00:20:29,190
bump we do what we have to do to smooth

00:20:24,750 --> 00:20:31,350
it over and we're there we've got a

00:20:29,190 --> 00:20:34,670
reliable and to end test suite running

00:20:31,350 --> 00:20:37,020
on our complete browser support matrix

00:20:34,670 --> 00:20:40,260
it's made out of kludgy duct tape and

00:20:37,020 --> 00:20:41,600
rubber bands but it works so the next

00:20:40,260 --> 00:20:43,980
thing we thought we started we started

00:20:41,600 --> 00:20:45,390
hearing like hey this is cool like have

00:20:43,980 --> 00:20:48,810
you guys thought about opening open

00:20:45,390 --> 00:20:50,850
sourcing this and we were like nobody

00:20:48,810 --> 00:20:52,860
nobody wants to like open this can of

00:20:50,850 --> 00:20:54,330
spam and see like what's in there you

00:20:52,860 --> 00:20:57,780
know it's like okay this is helping us

00:20:54,330 --> 00:21:00,300
but like we're not we're not proud of

00:20:57,780 --> 00:21:01,920
what's going on in there we thought this

00:21:00,300 --> 00:21:03,750
is not suitable to release right because

00:21:01,920 --> 00:21:06,450
just because that's that's kind of the

00:21:03,750 --> 00:21:08,550
mindset of development as a craft and

00:21:06,450 --> 00:21:10,200
like you know you create these small

00:21:08,550 --> 00:21:11,970
lightweight tools you publish them on

00:21:10,200 --> 00:21:13,950
NPM their elegant they solve a tiny

00:21:11,970 --> 00:21:16,380
little problem in like seven lines of

00:21:13,950 --> 00:21:17,820
code and this was like a monstrosity

00:21:16,380 --> 00:21:20,160
that we created you know it was it was

00:21:17,820 --> 00:21:22,940
good solid code but the things that we

00:21:20,160 --> 00:21:25,920
did to make it work just felt felt dirty

00:21:22,940 --> 00:21:28,050
so you know did we feel like we were a

00:21:25,920 --> 00:21:29,730
bunch of clever engineers like yeah we

00:21:28,050 --> 00:21:31,920
thought like we were shoveling and

00:21:29,730 --> 00:21:34,890
we got the job done but at the end of

00:21:31,920 --> 00:21:36,840
the day we're shovelin but then we

00:21:34,890 --> 00:21:40,110
thought okay we thought about our

00:21:36,840 --> 00:21:42,260
journey and this is where we ended up

00:21:40,110 --> 00:21:45,270
but what would have happened if we

00:21:42,260 --> 00:21:47,940
hadn't thought about that whole axiom of

00:21:45,270 --> 00:21:51,930
truth thing and and pushed on no matter

00:21:47,940 --> 00:21:54,990
what and how many others must have tried

00:21:51,930 --> 00:21:57,180
and given up how many other individuals

00:21:54,990 --> 00:21:58,890
how many teams how many companies got

00:21:57,180 --> 00:22:01,920
thirty percent seventy percent eighty

00:21:58,890 --> 00:22:03,900
percent of the way and wasted so much

00:22:01,920 --> 00:22:05,340
time trying to make it work and then

00:22:03,900 --> 00:22:08,430
just gave up because they couldn't find

00:22:05,340 --> 00:22:09,990
an elegant clean solution and how many

00:22:08,430 --> 00:22:11,970
more people in the future we're going to

00:22:09,990 --> 00:22:13,890
do that and then still we started

00:22:11,970 --> 00:22:15,510
thinking about what's the responsible

00:22:13,890 --> 00:22:18,330
thing to do and what if we could take

00:22:15,510 --> 00:22:25,050
all of that wasted effort in the future

00:22:18,330 --> 00:22:26,760
and actually add it on to the point of

00:22:25,050 --> 00:22:28,620
after like after the problem that we

00:22:26,760 --> 00:22:29,789
solved of making tests not flaky anymore

00:22:28,620 --> 00:22:31,919
what if we could have people

00:22:29,789 --> 00:22:34,159
contributing to other more interesting

00:22:31,919 --> 00:22:36,179
parts of end-to-end testing after that

00:22:34,159 --> 00:22:39,029
because we had started moving on to

00:22:36,179 --> 00:22:40,590
cooler problems ourselves we realized

00:22:39,029 --> 00:22:41,909
okay we have these tests running but we

00:22:40,590 --> 00:22:43,830
don't have a good way of going back and

00:22:41,909 --> 00:22:46,229
historically looking at trends about

00:22:43,830 --> 00:22:49,049
what passed when and who broke what and

00:22:46,229 --> 00:22:51,960
which browsers were failing together so

00:22:49,049 --> 00:22:53,960
we forked the jQuery test swarm project

00:22:51,960 --> 00:22:57,749
which already had a really nice

00:22:53,960 --> 00:23:00,960
dashboard which they used for keeping

00:22:57,749 --> 00:23:03,509
track of their unit tests cross-browser

00:23:00,960 --> 00:23:05,729
for jQuery and we made this work with

00:23:03,509 --> 00:23:07,619
our end-to-end tests so we were running

00:23:05,729 --> 00:23:10,139
builds at regular intervals every hour

00:23:07,619 --> 00:23:12,179
two hours and if there was a failure we

00:23:10,139 --> 00:23:15,389
could get a very narrow slice where we

00:23:12,179 --> 00:23:17,940
could say up and ie8 regression was

00:23:15,389 --> 00:23:19,739
introduced between twelve o'clock and

00:23:17,940 --> 00:23:21,539
one o'clock today and that gives you a

00:23:19,739 --> 00:23:23,460
very small number of commits to go and

00:23:21,539 --> 00:23:25,200
look at and then when somebody claims

00:23:23,460 --> 00:23:27,330
that they fixed it we just wait for the

00:23:25,200 --> 00:23:28,919
next iteration of the build to run and

00:23:27,330 --> 00:23:34,820
then we can see oh sweet everything is

00:23:28,919 --> 00:23:37,049
green again after that we implemented a

00:23:34,820 --> 00:23:38,609
massively parallel test runner so

00:23:37,049 --> 00:23:41,820
instead of just running these tests one

00:23:38,609 --> 00:23:47,340
at a time on each remote browser we

00:23:41,820 --> 00:23:49,470
could run 10 15 50 tests at once so we

00:23:47,340 --> 00:23:51,419
could compress down the total time it

00:23:49,470 --> 00:23:53,789
takes to execute this entire matrix of

00:23:51,419 --> 00:23:57,059
tests from an hour to an hour and a half

00:23:53,789 --> 00:24:00,599
into more like 15 or 20 minutes and that

00:23:57,059 --> 00:24:02,519
gave us the freedom to run these these

00:24:00,599 --> 00:24:04,349
builds not only just at a regular

00:24:02,519 --> 00:24:07,169
interval but actually as part of our

00:24:04,349 --> 00:24:08,639
pull requests verification we use it we

00:24:07,169 --> 00:24:11,249
as github internally and so it gives you

00:24:08,639 --> 00:24:13,619
that nice border around your merge box

00:24:11,249 --> 00:24:15,359
that says all good to merge or you know

00:24:13,619 --> 00:24:18,119
hey you failed the build so now we can

00:24:15,359 --> 00:24:20,220
have our remote sauce labs cross-browser

00:24:18,119 --> 00:24:21,869
builds actually contributing to that to

00:24:20,220 --> 00:24:23,549
that safety check of saying to a

00:24:21,869 --> 00:24:27,389
developer whether it's cool to merge or

00:24:23,549 --> 00:24:29,489
not so remember that Google criticism

00:24:27,389 --> 00:24:32,669
about just say no to end to end tests

00:24:29,489 --> 00:24:34,109
because they're too slow well because we

00:24:32,669 --> 00:24:36,690
smoothed over that speed bump and we

00:24:34,109 --> 00:24:38,220
could move on to cooler problems we got

00:24:36,690 --> 00:24:40,259
to actually tackle that problem and we

00:24:38,220 --> 00:24:42,210
found a pretty good solution for it so

00:24:40,259 --> 00:24:43,350
it's no longer hard to isolate failures

00:24:42,210 --> 00:24:45,510
because we can run this on every

00:24:43,350 --> 00:24:47,070
pull request now we had this nagging

00:24:45,510 --> 00:24:48,780
feeling about what about the flake right

00:24:47,070 --> 00:24:50,429
what are we sweeping under the rug when

00:24:48,780 --> 00:24:53,340
we're retrying what if there's

00:24:50,429 --> 00:24:54,929
legitimate issues in the app code maybe

00:24:53,340 --> 00:24:57,270
a timing issue maybe there's something

00:24:54,929 --> 00:24:59,840
that in the app code actually fails two

00:24:57,270 --> 00:25:02,100
percent of the time and are we just

00:24:59,840 --> 00:25:03,750
sweeping that under the rug so we

00:25:02,100 --> 00:25:05,250
started actually looking at the data

00:25:03,750 --> 00:25:07,410
that we're collecting through tests form

00:25:05,250 --> 00:25:09,390
we've got a big database of historically

00:25:07,410 --> 00:25:12,299
all the tests we've run how many times

00:25:09,390 --> 00:25:14,250
each test has retried what user agent it

00:25:12,299 --> 00:25:16,200
ran with and so we can start producing

00:25:14,250 --> 00:25:18,330
graphs like this it's kind of hard to

00:25:16,200 --> 00:25:22,169
see at the bottom but we've got a list

00:25:18,330 --> 00:25:26,549
of all of our use it's you know browser

00:25:22,169 --> 00:25:28,049
vendor version and operating system so

00:25:26,549 --> 00:25:29,460
we can sort and start seeing what are

00:25:28,049 --> 00:25:32,130
our biggest problems here we can see

00:25:29,460 --> 00:25:34,320
that we've got the most tests flake

00:25:32,130 --> 00:25:38,370
we've got like you know nine point seven

00:25:34,320 --> 00:25:40,710
percent retry rate for our iOS

00:25:38,370 --> 00:25:42,720
simulators so this could be a problem

00:25:40,710 --> 00:25:45,270
with the simulator itself this could be

00:25:42,720 --> 00:25:47,640
a problem with how our code is working

00:25:45,270 --> 00:25:50,400
in a responsive scenario but it gives us

00:25:47,640 --> 00:25:52,020
a narrower window to look at instead of

00:25:50,400 --> 00:25:54,210
just giving up and saying oh the tests

00:25:52,020 --> 00:25:55,860
are flaky what do I do we can say yeah

00:25:54,210 --> 00:25:58,080
but they're more flaky on this browser

00:25:55,860 --> 00:25:59,610
than this one so that gives somebody who

00:25:58,080 --> 00:26:02,610
wants to investigate a little bit more

00:25:59,610 --> 00:26:05,000
to go on we can also slice by the test

00:26:02,610 --> 00:26:08,280
names themselves so if we start to see

00:26:05,000 --> 00:26:11,520
particular groups of tests that all test

00:26:08,280 --> 00:26:12,900
common features that are failing more

00:26:11,520 --> 00:26:14,490
frequently together then that's a

00:26:12,900 --> 00:26:19,350
feature that a developer should should

00:26:14,490 --> 00:26:20,970
look into so Google and and and some of

00:26:19,350 --> 00:26:22,110
these other companies that have tried

00:26:20,970 --> 00:26:23,580
this we're all we're all trying to

00:26:22,110 --> 00:26:26,220
summit the same mountain together right

00:26:23,580 --> 00:26:28,980
but because a lot of them got really

00:26:26,220 --> 00:26:30,390
stuck on the flaky part they never got

00:26:28,980 --> 00:26:32,190
to research the more interesting things

00:26:30,390 --> 00:26:34,169
and we're at the point now where we're

00:26:32,190 --> 00:26:36,240
researching the sources of the flake and

00:26:34,169 --> 00:26:37,890
starting to narrow down this problem

00:26:36,240 --> 00:26:41,400
that seemed just totally insurmountable

00:26:37,890 --> 00:26:42,900
before so we're going to open source

00:26:41,400 --> 00:26:45,720
this right now we have a code name

00:26:42,900 --> 00:26:47,370
called Magellan because we're a large

00:26:45,720 --> 00:26:49,049
company we have to we have to run all of

00:26:47,370 --> 00:26:51,510
our open source stuff through a lengthy

00:26:49,049 --> 00:26:53,940
review process and the name is likely to

00:26:51,510 --> 00:26:57,270
change but look for this to be open

00:26:53,940 --> 00:26:59,340
source soon what Magellan actually is

00:26:57,270 --> 00:27:01,440
is an end-to-end test runner that hooks

00:26:59,340 --> 00:27:04,230
into other libraries such as Night Watch

00:27:01,440 --> 00:27:06,120
or WD so it's not a replacement for

00:27:04,230 --> 00:27:08,760
Night Watch or protractor or all of

00:27:06,120 --> 00:27:12,390
these but you can think of it as a test

00:27:08,760 --> 00:27:14,250
runner runner so it's it's a commander

00:27:12,390 --> 00:27:16,770
for your fleet or a conductor for your

00:27:14,250 --> 00:27:18,600
orchestra and it does a few very

00:27:16,770 --> 00:27:20,940
specific things it smooths over test

00:27:18,600 --> 00:27:23,460
flake but gives you insight into what's

00:27:20,940 --> 00:27:25,920
flaky it's a massively parallel test

00:27:23,460 --> 00:27:28,320
runner that compresses down your your

00:27:25,920 --> 00:27:30,420
runtime of your sweet and it gives you

00:27:28,320 --> 00:27:32,900
beautiful reporting tools like we saw

00:27:30,420 --> 00:27:37,110
from our tests warm fork so that you can

00:27:32,900 --> 00:27:39,600
make sense of it all so we came to think

00:27:37,110 --> 00:27:40,950
of this as instead of shoveling as

00:27:39,600 --> 00:27:44,760
being like something we should be

00:27:40,950 --> 00:27:46,740
ashamed of this is shoveling as a

00:27:44,760 --> 00:27:48,980
service not as a service on a server but

00:27:46,740 --> 00:27:52,050
as a service to your fellow developers

00:27:48,980 --> 00:27:54,660
and to your community I've never

00:27:52,050 --> 00:27:57,300
actually like coined a hashtag before

00:27:54,660 --> 00:27:58,650
but I want to see this trending on all

00:27:57,300 --> 00:27:59,790
of the stuff that you've done that

00:27:58,650 --> 00:28:01,710
you've kind of been like a little bit

00:27:59,790 --> 00:28:03,900
ashamed of but like would really be

00:28:01,710 --> 00:28:05,670
useful to everybody because it solves a

00:28:03,900 --> 00:28:08,250
problem even if it's a messy problem

00:28:05,670 --> 00:28:11,070
shovel that and and do it for the

00:28:08,250 --> 00:28:12,720
benefit of everybody else so how do we

00:28:11,070 --> 00:28:15,540
how do what are that what are the core

00:28:12,720 --> 00:28:18,240
tenants of shoveling 101 momentum

00:28:15,540 --> 00:28:20,610
is is greater than perfection so getting

00:28:18,240 --> 00:28:23,990
stuck on shitty problems is demoralizing

00:28:20,610 --> 00:28:26,580
it's unproductive and there's no point

00:28:23,990 --> 00:28:29,310
get that momentum smoothing things over

00:28:26,580 --> 00:28:31,050
is better than giving up so I'll think

00:28:29,310 --> 00:28:32,820
of all of those eighty percent solved

00:28:31,050 --> 00:28:34,710
problems that never saw the light of day

00:28:32,820 --> 00:28:36,960
because somebody just couldn't do it as

00:28:34,710 --> 00:28:39,440
cleanly as they wanted to that's a shame

00:28:36,960 --> 00:28:43,560
there's so much wasted effort they're

00:28:39,440 --> 00:28:45,270
useful is better than precise so if you

00:28:43,560 --> 00:28:47,220
can help someone else smooth over a bump

00:28:45,270 --> 00:28:48,690
it doesn't matter how much duct tape and

00:28:47,220 --> 00:28:50,070
rubber bands how much dirty stuff you

00:28:48,690 --> 00:28:51,870
have to do to get there if you can be

00:28:50,070 --> 00:28:54,090
useful to somebody else and package that

00:28:51,870 --> 00:28:55,020
up they can get over a speed bump but

00:28:54,090 --> 00:28:57,660
they wouldn't have otherwise been able

00:28:55,020 --> 00:28:59,760
to do an open source is better than

00:28:57,660 --> 00:29:02,520
closed source if you built a tool like

00:28:59,760 --> 00:29:03,990
this you think well maybe i'll release

00:29:02,520 --> 00:29:06,210
it one day when i can polish it all up

00:29:03,990 --> 00:29:08,100
no release it when it's useful even if

00:29:06,210 --> 00:29:10,820
it's only marginally useful and so in

00:29:08,100 --> 00:29:10,820
some small way

00:29:11,299 --> 00:29:17,129
so you can follow me at geek underscore

00:29:14,190 --> 00:29:18,840
day if you want to be notified when when

00:29:17,129 --> 00:29:20,759
Magellan is out in the wild or whatever

00:29:18,840 --> 00:29:22,559
it's called at the time if you want to

00:29:20,759 --> 00:29:24,749
check out the podcast on Rebecca

00:29:22,559 --> 00:29:26,100
Murphy's show check out TTL podcast com

00:29:24,749 --> 00:29:28,350
we talked for a long time about

00:29:26,100 --> 00:29:30,899
everything that Magellan does in a lot

00:29:28,350 --> 00:29:35,090
more detail and for real use this

00:29:30,899 --> 00:29:35,090

YouTube URL: https://www.youtube.com/watch?v=e3hkjeM_DUQ


