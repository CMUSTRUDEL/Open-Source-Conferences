Title: Marcy Sutton: 30 Minutes or Less: The Magic of Automated Accessibility Testing | JSConf US 2015
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	In the amount of time it would take to have a pizza delivered, I'll teach you about accessibility through JavaScript testing. By using a pragmatic approach to software quality, we can create a more inclusive Web. Take it from someone who has broken high-profile builds: you can win by automating tests for common accessibility problems and catching them before they are deployed out into the world.
Captions: 
	00:00:16,750 --> 00:00:17,750
Hi, JSConf!

00:00:17,750 --> 00:00:18,980
I am so excited to be here.

00:00:18,980 --> 00:00:23,200
I gave a talk last year in the B track of accessibility of web components.

00:00:23,200 --> 00:00:27,590
If you caught that talk, you may remember a secret thing that happened at the

00:00:27,590 --> 00:00:31,880
end which resulted in real life tacos.

00:00:31,880 --> 00:00:33,680
To admit, though, I actually...

00:00:33,680 --> 00:00:37,160
I've got to say I like pizza more than tacos.

00:00:37,160 --> 00:00:41,320
If I could choose, I would always choose pizza every time.

00:00:41,320 --> 00:00:44,220
I really wanted to work pizza into this talk somehow,

00:00:44,220 --> 00:00:46,480
and at the risk of sounding cheesy...

00:00:46,480 --> 00:00:48,870
We are going to make this happen.

00:00:48,870 --> 00:00:52,480
So hold on a second.

00:00:52,480 --> 00:00:55,280
Hi.

00:00:55,280 --> 00:00:58,960
I'd like to order a pizza.

00:00:58,960 --> 00:00:59,960
Yeah.

00:00:59,960 --> 00:01:00,960
Let's do...

00:01:00,960 --> 00:01:03,379
One cheese and one pepperoni.

00:01:03,379 --> 00:01:05,180
Yeah.

00:01:05,180 --> 00:01:07,560
You're going to bring it to Marcy Sutton.

00:01:07,560 --> 00:01:13,650
JSConf in track A. Yeah.

00:01:13,650 --> 00:01:15,649
You have 30 minutes.

00:01:15,649 --> 00:01:16,649
Thanks.

00:01:16,649 --> 00:01:17,649
Bye.

00:01:17,649 --> 00:01:18,649
Okay.

00:01:18,649 --> 00:01:19,649
So...

00:01:19,649 --> 00:01:20,680
Now we can get started.

00:01:20,680 --> 00:01:25,720
In the time it takes for this pizza to get here, I'm going

00:01:25,720 --> 00:01:28,060
to tell you about something I'm really passionate about.

00:01:28,060 --> 00:01:29,150
Which is accessibility.

00:01:29,150 --> 00:01:32,660
We're going to talk about automated accessibility testing.

00:01:32,660 --> 00:01:36,840
Which is a way that you can actually work accessibility into your workflow.

00:01:36,840 --> 00:01:39,939
I'm Marcy Sutton, I'm a developer in Seattle.

00:01:39,939 --> 00:01:43,619
I currently work at a company called Substantial, and I want to give

00:01:43,619 --> 00:01:47,790
them a shoutout, because I went to Substantial to learn about git and

00:01:47,790 --> 00:01:52,880
pragmatic software practices, and now I'm giving a talk at JSConf.

00:01:52,880 --> 00:01:55,340
So I'm pretty stoked that I get to work there and

00:01:55,340 --> 00:01:57,409
work on this stuff.

00:01:57,409 --> 00:02:04,310
In July, I'm moving to Adobe, so I'm pretty stoked about

00:02:04,310 --> 00:02:05,310
that.

00:02:05,310 --> 00:02:10,840
I'm an Angular core team member, I'm devoted to ARIA, the accessibility

00:02:10,840 --> 00:02:17,060
module, and since July I've been working on Angular.

00:02:17,060 --> 00:02:19,540
We'll talk a little bit about it, but the focus today

00:02:19,540 --> 00:02:23,790
is obviously automated accessibility testing.

00:02:23,790 --> 00:02:25,720
My slides are on Github.

00:02:25,720 --> 00:02:33,790
There's a shortcut for my website, Marcy Sutton.com/JSConf2015.

00:02:33,790 --> 00:02:36,930
So accessibility -- the answer to a more inclusive web.

00:02:36,930 --> 00:02:41,900
It's the way that we can build websites and mobile apps and experiences that work

00:02:41,900 --> 00:02:43,790
for more people.

00:02:43,790 --> 00:02:48,650
Because a fifth of the population on the planet has some kind of disability.

00:02:48,650 --> 00:02:52,510
So if we don't -- if we keep not addressing accessibility, we're leaving out a

00:02:52,510 --> 00:02:54,849
ton of people.

00:02:54,849 --> 00:02:56,550
Pizza is also always the answer.

00:02:56,550 --> 00:02:58,930
Just saying.

00:02:58,930 --> 00:03:01,701
I'm going to gloss over some accessibility basics, because

00:03:01,701 --> 00:03:04,380
we're focusing on something really technical.

00:03:04,380 --> 00:03:05,550
Automated testing.

00:03:05,550 --> 00:03:08,410
But you should become familiar with accessibility basics.

00:03:08,410 --> 00:03:10,569
I have them listed in my slides and there's a link to

00:03:10,569 --> 00:03:13,010
more principles if you want to read more.

00:03:13,010 --> 00:03:16,159
But some things you should be considering if you're a web developer are

00:03:16,159 --> 00:03:18,090
text alternatives.

00:03:18,090 --> 00:03:21,920
Including alt text for images, form labels, offscreen text

00:03:21,920 --> 00:03:28,099
if you have infographics and things like that, document structure and hierarchy,

00:03:28,099 --> 00:03:31,459
which we'll touch on a little bit today in talking about headings,

00:03:31,459 --> 00:03:35,409
HTML semantics, which you should definitely be using.

00:03:35,409 --> 00:03:37,590
Use real buttons and so on.

00:03:37,590 --> 00:03:40,930
Keyboard interactivity, making sure if you're creating custom controls

00:03:40,930 --> 00:03:45,000
that they're reachable and operable from the keyboard and they have adequate

00:03:45,000 --> 00:03:47,599
focus styles.

00:03:47,599 --> 00:03:48,989
Color contrast.

00:03:48,989 --> 00:03:51,019
That's a huge population of people.

00:03:51,019 --> 00:03:53,269
As well as keyboard interactivity.

00:03:53,269 --> 00:03:56,220
Not just blind people or people with deafness or hard of

00:03:56,220 --> 00:04:02,010
hearing -- these visual disabilities are a little more subtle, and they affect

00:04:02,010 --> 00:04:03,860
huge populations of people.

00:04:03,860 --> 00:04:06,349
So color contrast is in that category.

00:04:06,349 --> 00:04:09,190
And visual contrast in general, which even my slides

00:04:09,190 --> 00:04:12,459
-- this projector looks a little different than my computer screen.

00:04:12,459 --> 00:04:15,459
So my slides need adequate contrast.

00:04:15,459 --> 00:04:17,440
And then lastly, if you're building single page

00:04:17,440 --> 00:04:21,060
apps or client rendered applications, you should be familiar with

00:04:21,060 --> 00:04:22,659
focus management.

00:04:22,659 --> 00:04:26,659
It means that you're guiding the user's keyboard focus around your apps, so

00:04:26,659 --> 00:04:31,370
that if you're opening dialogues or bottom sheets or other components, that

00:04:31,370 --> 00:04:32,770
their focus isn't being dropped.

00:04:32,770 --> 00:04:37,729
That you're actually curating their focus experience so that you can notify them when

00:04:37,729 --> 00:04:40,680
things are opening and things are happening.

00:04:40,680 --> 00:04:44,030
And I have some resources at the end if you want to learn more

00:04:44,030 --> 00:04:45,080
about that.

00:04:45,080 --> 00:04:47,410
But there was a time when I didn't know accessibility.

00:04:47,410 --> 00:04:49,090
Like, you have to start somewhere.

00:04:49,090 --> 00:04:53,520
And so it's important to recognize that you're not going to be perfect at this

00:04:53,520 --> 00:04:54,870
right away.

00:04:54,870 --> 00:04:57,710
Jake the Dog from adventure time says -- dude, sucking at

00:04:57,710 --> 00:05:01,840
something is the first step towards becoming sort of good at something.

00:05:01,840 --> 00:05:02,840
And that's okay.

00:05:02,840 --> 00:05:03,840
You know?

00:05:03,840 --> 00:05:06,139
It's not something that's going to be perfect all the

00:05:06,139 --> 00:05:07,139
time.

00:05:07,139 --> 00:05:09,650
But every little bit of accessibility that you contribute is so

00:05:09,650 --> 00:05:14,060
appreciated and so needed that you can just learn more as you go.

00:05:14,060 --> 00:05:18,150
And it's a huge win, any time there's something for accessibility

00:05:18,150 --> 00:05:20,660
that we're including.

00:05:20,660 --> 00:05:21,660
But we're developers.

00:05:21,660 --> 00:05:23,340
This is a JavaScript conference.

00:05:23,340 --> 00:05:27,150
So we're going to let the tooling that we're already familiar with

00:05:27,150 --> 00:05:31,690
-- using JavaScript task runners and tools that we love to work with, because

00:05:31,690 --> 00:05:35,650
they're technical and geeky -- we can use this tooling to do some heavy lifting

00:05:35,650 --> 00:05:36,729
for us.

00:05:36,729 --> 00:05:40,130
Help us identify accessibility issues in our apps.

00:05:40,130 --> 00:05:44,580
The low hanging fruit stuff that you don't need to pay someone to find, if you can automate

00:05:44,580 --> 00:05:45,580
that.

00:05:45,580 --> 00:05:48,229
You can free up people's time to test things that are a little

00:05:48,229 --> 00:05:51,790
bit more nuanced and more subjective.

00:05:51,790 --> 00:05:54,140
So we're going to talk about manual testing.

00:05:54,140 --> 00:05:57,580
You know, where do I start when I audit a website for accessibility?

00:05:57,580 --> 00:06:02,620
And then we'll move into what I'm calling sort of automated testing.

00:06:02,620 --> 00:06:05,979
Not looking at the rendered source code, but using

00:06:05,979 --> 00:06:08,840
some tools to help you identify issues.

00:06:08,840 --> 00:06:11,630
And then lastly, we'll talk about what you really came to hear about,

00:06:11,630 --> 00:06:13,889
which is definitely automated testing.

00:06:13,889 --> 00:06:18,020
And how you can incorporate accessibility testing -- so, for example,

00:06:18,020 --> 00:06:22,310
if you could prevent a broken build from going out into the wild.

00:06:22,310 --> 00:06:28,120
Automating that, so it can withhold a deployment of some kind.

00:06:28,120 --> 00:06:31,250
But the elephant in the room that I have to mention to you, because we're

00:06:31,250 --> 00:06:35,479
talking about automated accessibility testing, is that it is no substitute for

00:06:35,479 --> 00:06:37,620
real user feedback.

00:06:37,620 --> 00:06:39,090
Including people with disabilities.

00:06:39,090 --> 00:06:41,660
You want to have people testing your apps so that they can

00:06:41,660 --> 00:06:43,650
tell you when something really sucks.

00:06:43,650 --> 00:06:46,789
Like Peter Griffin saying what really grinds his gears.

00:06:46,789 --> 00:06:49,150
Because that feedback is so valuable.

00:06:49,150 --> 00:06:52,260
So that should be part of your strategy as well.

00:06:52,260 --> 00:06:55,139
And even getting to accessibility earlier in the

00:06:55,139 --> 00:06:57,139
design process, too.

00:06:57,139 --> 00:06:58,569
Those are all very important things.

00:06:58,569 --> 00:07:01,190
But we're here to talk about automated testing.

00:07:01,190 --> 00:07:04,569
Which is an important thing to know how to do.

00:07:04,569 --> 00:07:08,199
So the first thing that I do, when I look at a website to figure out what the

00:07:08,199 --> 00:07:13,039
accessibility situation is -- I just tab through the page with the keyboard.

00:07:13,039 --> 00:07:14,200
So we're going to do that real quick.

00:07:14,200 --> 00:07:19,819
I'm going to show you gov.uk, which has pretty good focus styles, solid blocks of

00:07:19,819 --> 00:07:26,479
color, the text links are either bolded with blue text or bold with white text,

00:07:26,479 --> 00:07:32,080
and if we start tabbing through the page, the focus indicator is really obvious.

00:07:32,080 --> 00:07:36,099
It's orange color on whatever the other background color is.

00:07:36,099 --> 00:07:41,130
And it actually really shows you effectively where you are on a web page.

00:07:41,130 --> 00:07:46,830
It has been pointed out to me that this is technically not WCAG AA compliant.

00:07:46,830 --> 00:07:50,040
And that's because there isn't quite enough visual contrast to meet that

00:07:50,040 --> 00:07:51,069
standard.

00:07:51,069 --> 00:07:55,539
But what they could do to fix it is either widen the visual contrast

00:07:55,539 --> 00:07:58,789
between the foreground and background colors, or you could make the text

00:07:58,789 --> 00:07:59,789
bigger.

00:07:59,789 --> 00:08:02,790
So you have some things that you can do to fix this.

00:08:02,790 --> 00:08:06,330
But compared to most websites, gov.uk is awesome, and it's

00:08:06,330 --> 00:08:07,820
winning the focus style...

00:08:07,820 --> 00:08:11,610
Like, they do it the best of any site I've seen.

00:08:11,610 --> 00:08:14,699
So they deserve a pat on the back.

00:08:14,699 --> 00:08:16,099
Okay.

00:08:16,099 --> 00:08:17,599
So that's the first thing I do.

00:08:17,599 --> 00:08:21,680
The next thing I do -- which I'm not going to spend a whole lot of time on -- but

00:08:21,680 --> 00:08:23,930
you should be demoing in screen readers.

00:08:23,930 --> 00:08:29,420
I'm going to show you SoundCloud in Safari with VoiceOver on the Mac.

00:08:29,420 --> 00:08:32,219
But it's not the most used screen reader.

00:08:32,219 --> 00:08:35,560
JAWS is the most used.

00:08:35,560 --> 00:08:39,060
NVDA and Firefox are well used.

00:08:39,060 --> 00:08:41,349
There's also mobile screen readers.

00:08:41,349 --> 00:08:46,569
IOS Safari, TalkBack with Android is great.

00:08:46,569 --> 00:08:51,250
But you should be checking your stuff in a screen reader so you know what's going on

00:08:51,250 --> 00:08:52,250
in your app.

00:08:52,250 --> 00:08:54,620
So we're going to demo...

00:08:54,620 --> 00:08:59,300
Oops, wrong window.

00:08:59,300 --> 00:09:02,000
So I'm going to hit command F5 and fire up VoiceOver.

00:09:02,000 --> 00:09:03,860
VoiceOver on Safari.

00:09:03,860 --> 00:09:04,860
Stream on SoundCloud.

00:09:04,860 --> 00:09:05,860
Visit link.

00:09:05,860 --> 00:09:13,770
So you see how the SoundCloud link...

00:09:13,770 --> 00:09:15,380
It is just a graphic.

00:09:15,380 --> 00:09:17,930
There's no text saying SoundCloud, but when I use the screen

00:09:17,930 --> 00:09:22,000
reader, SoundCloud has done a great job in adding alternative text to their

00:09:22,000 --> 00:09:23,000
images.

00:09:23,000 --> 00:09:25,750
When I tab through it with a screen reader, even though it's a graphic

00:09:25,750 --> 00:09:29,980
button, I get some text, because it says SoundCloud on it.

00:09:29,980 --> 00:09:31,700
Visiting link.

00:09:31,700 --> 00:09:32,700
Link.

00:09:32,700 --> 00:09:33,700
Link.

00:09:33,700 --> 00:09:34,700
Upload.

00:09:34,700 --> 00:09:38,050
Banner seven items.

00:09:38,050 --> 00:09:39,360
Marcy_SSS pop-up button.

00:09:39,360 --> 00:09:41,330
So this is a pop-up little toggle thing.

00:09:41,330 --> 00:09:47,870
If I hit enter, it opens the pop-up and sends my focus into it.

00:09:47,870 --> 00:09:50,240
Now I'm in this list of child links.

00:09:50,240 --> 00:09:52,550
You are currently in a list.

00:09:52,550 --> 00:09:54,610
Trick with VoiceOver -- mute it.

00:09:54,610 --> 00:09:56,600
So we're in this list.

00:09:56,600 --> 00:10:03,300
And to get out of it, I hit escape.

00:10:03,300 --> 00:10:04,300
Pop-up button.

00:10:04,300 --> 00:10:05,640
Banner seven items.

00:10:05,640 --> 00:10:06,920
VoiceOver off.

00:10:06,920 --> 00:10:12,560
So that's just a really quick demo with VoiceOver, to show you what it's

00:10:12,560 --> 00:10:13,660
like to use it.

00:10:13,660 --> 00:10:17,260
And again, you just turn it on with command F5 on the Mac, and

00:10:17,260 --> 00:10:18,399
you can go check it out.

00:10:18,399 --> 00:10:20,960
And I will say Safari works a little better than

00:10:20,960 --> 00:10:21,960
Chrome.

00:10:21,960 --> 00:10:23,149
But it's a good thing to do every now and then.

00:10:23,149 --> 00:10:26,880
So that's one of the first things I do.

00:10:26,880 --> 00:10:30,310
Now I want to get into sort of automated testing, using a

00:10:30,310 --> 00:10:33,410
few tools that I think are useful.

00:10:33,410 --> 00:10:37,110
Something that you should be checking for are headings and semantic structure.

00:10:37,110 --> 00:10:40,320
So the web was created for documents.

00:10:40,320 --> 00:10:41,769
We're creating applications.

00:10:41,769 --> 00:10:43,110
It doesn't mean that because you're creating an

00:10:43,110 --> 00:10:48,370
application you get to throw out the semantic structure and not care about it.

00:10:48,370 --> 00:10:53,050
Because a user with a screen reader can use your heading structure to get an

00:10:53,050 --> 00:10:55,519
overall picture of what is on your site.

00:10:55,519 --> 00:10:59,290
They can also navigate by headings and other landmarks.

00:10:59,290 --> 00:11:03,290
So this Firefox web developer tool bar I loved, because

00:11:03,290 --> 00:11:05,839
it can show you the heading structure.

00:11:05,839 --> 00:11:11,000
So if you install the tool bar, go to information, and then view document outline,

00:11:11,000 --> 00:11:13,480
you can see the heading structure on your page.

00:11:13,480 --> 00:11:14,680
I still use this.

00:11:14,680 --> 00:11:18,250
It's probably the only feature in this tool bar I still use.

00:11:18,250 --> 00:11:24,920
But for my Tumblr, accessibility wins, I could go and look at

00:11:24,920 --> 00:11:30,740
it and it'll show you when everything is all aligned.

00:11:30,740 --> 00:11:35,270
So next I want to tell you about the Chrome accessibility developer tools.

00:11:35,270 --> 00:11:38,360
It's a must have for any well developer these days.

00:11:38,360 --> 00:11:43,000
It's great for checking the overall page accessibility for any website.

00:11:43,000 --> 00:11:45,529
Especially in active development.

00:11:45,529 --> 00:11:49,140
It catches kind of the low hanging fruit of things that you --

00:11:49,140 --> 00:11:50,930
like missing labels and things.

00:11:50,930 --> 00:11:54,300
So let's go check out an audit.

00:11:54,300 --> 00:11:55,899
Okay.

00:11:55,899 --> 00:11:57,500
So...

00:11:57,500 --> 00:11:59,560
I'm going to pick on CNN today.

00:11:59,560 --> 00:12:03,480
Let's go see what crusty accessibility things they have going on.

00:12:03,480 --> 00:12:05,149
So I'm going to open up the dev tools.

00:12:05,149 --> 00:12:07,090
And I have the extension installed.

00:12:07,090 --> 00:12:12,530
So under audits, I get an accessibility audit, which I can go and run, and it will

00:12:12,530 --> 00:12:17,329
go and it will look at their site, analyze it, run tests against it, and it will

00:12:17,329 --> 00:12:19,600
report back to you what's wrong with it.

00:12:19,600 --> 00:12:22,360
So they are missing a bunch of form labels.

00:12:22,360 --> 00:12:26,320
If I drill down into it, I can look at the specific node that is a

00:12:26,320 --> 00:12:27,320
problem.

00:12:27,320 --> 00:12:31,829
I can review it in the elements panel, and go over here in the element

00:12:31,829 --> 00:12:32,829
inspector.

00:12:32,829 --> 00:12:33,829
You get a couple little add-ons.

00:12:33,829 --> 00:12:37,230
Actually, with the extension, you get this accessibility

00:12:37,230 --> 00:12:38,720
properties panel.

00:12:38,720 --> 00:12:42,390
And it will show you some of the accessibility information.

00:12:42,390 --> 00:12:46,920
I'm using Chrome Canary, which actually has a dev tools experiment.

00:12:46,920 --> 00:12:50,470
If you're curious, I can send you the information later.

00:12:50,470 --> 00:12:52,959
Because it's sort of hard to enable.

00:12:52,959 --> 00:12:56,300
But the deal is that this extension will be moved into the dev tools

00:12:56,300 --> 00:12:57,300
at some point.

00:12:57,300 --> 00:12:59,389
And Google is working on that right now.

00:12:59,389 --> 00:13:02,740
But if you have it enabled in Chrome Canary, you get this secret

00:13:02,740 --> 00:13:06,779
panel of extra information of the accessibility node.

00:13:06,779 --> 00:13:09,360
And this will tell you what role it has, if it has any

00:13:09,360 --> 00:13:13,980
ARIA attributes, and so on.

00:13:13,980 --> 00:13:16,250
That highlights an important concept that I want you to know.

00:13:16,250 --> 00:13:18,460
Which is about the accessibility tree.

00:13:18,460 --> 00:13:20,740
The accessibility tree is something created by

00:13:20,740 --> 00:13:21,740
browsers.

00:13:21,740 --> 00:13:23,670
It is a parallel structure to the DOM.

00:13:23,670 --> 00:13:27,020
And it has in it semantic information that screen readers and other

00:13:27,020 --> 00:13:31,970
assistive technologies can use to present information without the performance

00:13:31,970 --> 00:13:34,850
implications of everything else in the DOM.

00:13:34,850 --> 00:13:38,600
So the accessibility tree you can check a couple different ways.

00:13:38,600 --> 00:13:42,769
If you go to Chrome://accessibility, you can

00:13:42,769 --> 00:13:46,740
look at a raw dump of the accessibility tree of every tab that you have

00:13:46,740 --> 00:13:47,740
open.

00:13:47,740 --> 00:13:49,940
Which you can imagine -- it's turned off by default.

00:13:49,940 --> 00:13:53,390
Because that would be a pretty big performance hit.

00:13:53,390 --> 00:13:56,620
I have a post in my slides from the Paciello group with more on the

00:13:56,620 --> 00:14:00,800
accessibility tree, including their tool, called aViewer, which is really

00:14:00,800 --> 00:14:03,230
helpful for that.

00:14:03,230 --> 00:14:06,160
But when I first got into the Chrome accessibility developer

00:14:06,160 --> 00:14:10,480
tools I found on Github that all the library code is out there under the

00:14:10,480 --> 00:14:16,910
Google Chrome organization on Github, down to every audit rule as a JavaScript

00:14:16,910 --> 00:14:17,910
file.

00:14:17,910 --> 00:14:19,690
And I didn't quite know what those were for.

00:14:19,690 --> 00:14:23,589
I felt like Finn from Adventure Time going -- what do you do with those?

00:14:23,589 --> 00:14:26,370
Well, that's where we get into definitely automated testing.

00:14:26,370 --> 00:14:31,769
I'm going to start by showing you a tool called a11y.

00:14:31,769 --> 00:14:34,170
It's a numeronym for accessibility.

00:14:34,170 --> 00:14:37,290
You take out all the numbers and add 11 in the middle.

00:14:37,290 --> 00:14:40,260
You see me tweeting that all the time because it's shorter.

00:14:40,260 --> 00:14:44,100
But they made a really great NPM module.

00:14:44,100 --> 00:14:52,720
You can install it with a11y, and you get this tool where you can call the same

00:14:52,720 --> 00:14:56,710
audit that we ran in the browser from the command line.

00:14:56,710 --> 00:14:59,350
So I'm going to show you this.

00:14:59,350 --> 00:15:02,019
Instead of pulling it into a JavaScript file, we're just going to

00:15:02,019 --> 00:15:03,699
run it from the command line.

00:15:03,699 --> 00:15:09,100
So I'm going to type a11y cnn.com and then we're

00:15:09,100 --> 00:15:11,070
going to wait and hope that it resolves.

00:15:11,070 --> 00:15:12,390
It takes a second.

00:15:12,390 --> 00:15:15,209
It's a little bit longer than the browser extension.

00:15:15,209 --> 00:15:19,579
But this is using phantom.js, which is a headless browser.

00:15:19,579 --> 00:15:21,209
So we're not seeing the browser open.

00:15:21,209 --> 00:15:25,640
This is running on the command line, using phantom, hitting their site, and returning

00:15:25,640 --> 00:15:27,790
an audit back to us.

00:15:27,790 --> 00:15:29,589
Hopefully this will work.

00:15:29,589 --> 00:15:32,839
Hello, conference Wi-Fi.

00:15:32,839 --> 00:15:37,779
So the audit that it gave back to us was the same audit that we got in the browser

00:15:37,779 --> 00:15:40,960
extension, except this is on the command line.

00:15:40,960 --> 00:15:45,360
So I find that this report is a little bit harder to digest than

00:15:45,360 --> 00:15:47,420
the browser extension.

00:15:47,420 --> 00:15:49,450
But you can see that it tells you the same warnings.

00:15:49,450 --> 00:15:52,790
It says the controls and media elements should have labels.

00:15:52,790 --> 00:15:57,019
And then it points you to a node in the DOM tree.

00:15:57,019 --> 00:16:04,380
It actually shows you the tree of items, selectors, that it actually

00:16:04,380 --> 00:16:07,920
used to point you to that node in the browser.

00:16:07,920 --> 00:16:09,399
So this is pretty cool.

00:16:09,399 --> 00:16:12,589
But I'm not quite sure how I would use this in a project

00:16:12,589 --> 00:16:13,589
yet.

00:16:13,589 --> 00:16:19,850
I will add that there is a grunt task for a11y that could be useful.

00:16:19,850 --> 00:16:23,400
Ways that you could integrate automated testing for accessibility.

00:16:23,400 --> 00:16:25,860
What if you ran it on every save?

00:16:25,860 --> 00:16:28,180
So that you could check whether something was inaccessible?

00:16:28,180 --> 00:16:30,490
It might be a little aggressive.

00:16:30,490 --> 00:16:32,459
But you could also run it on every commit.

00:16:32,459 --> 00:16:36,130
Maybe you wanted to check that you had a pre-commit hook for

00:16:36,130 --> 00:16:39,420
git, and you could check whether something is broken.

00:16:39,420 --> 00:16:42,149
More likely, you're going to run it on a deployment.

00:16:42,149 --> 00:16:46,360
If you push out a build that's broken, I'm either not going to let it go forward or I

00:16:46,360 --> 00:16:50,480
can use Travis on Github to say -- hey, the build is broken and that person broke

00:16:50,480 --> 00:16:52,899
it.

00:16:52,899 --> 00:16:56,199
Which leads us to protractor, the end to end testing framework

00:16:56,199 --> 00:16:57,420
for Angular.

00:16:57,420 --> 00:17:00,000
I'm focusing on this because I worked on it, but the concepts are

00:17:00,000 --> 00:17:02,769
similar for any framework.

00:17:02,769 --> 00:17:09,150
Protractor is a node module that runs on top of Selenium web driver.

00:17:09,150 --> 00:17:11,660
It fires up a browser programmatically, you tell it

00:17:11,660 --> 00:17:17,579
where to go, and you set up your website so you can run tests against it and

00:17:17,579 --> 00:17:20,949
assert that it's doing the right thing at the right time.

00:17:20,949 --> 00:17:23,650
I wrote an accessibility plug-in for protractor that

00:17:23,650 --> 00:17:26,220
I'll tell you about a little bit.

00:17:26,220 --> 00:17:30,020
But protractor would be really useful -- it's what's called end to end

00:17:30,020 --> 00:17:31,020
testing.

00:17:31,020 --> 00:17:35,840
It's useful for testing multiple components on a page together, as

00:17:35,840 --> 00:17:38,840
opposed to unit testing, which we'll talk about in a minute.

00:17:38,840 --> 00:17:42,280
But some things that you could test for include focus management.

00:17:42,280 --> 00:17:46,290
Like if you are writing a single page or client rendered app.

00:17:46,290 --> 00:17:48,080
You could check for live updates.

00:17:48,080 --> 00:17:52,140
Like, say your focus is in an input field, and the

00:17:52,140 --> 00:17:55,720
act of typing filter something somewhere else on the screen -- you want to

00:17:55,720 --> 00:17:58,169
make sure those components are working together.

00:17:58,169 --> 00:18:01,380
That might be a good thing to test for with end to end

00:18:01,380 --> 00:18:02,380
testing.

00:18:02,380 --> 00:18:03,380
Or color contrast.

00:18:03,380 --> 00:18:04,920
Maybe you want to check the color contrast across

00:18:04,920 --> 00:18:05,920
your whole app.

00:18:05,920 --> 00:18:08,440
You can do that in this as well.

00:18:08,440 --> 00:18:12,990
So to get an example, we're going to look at Angular material start, which I

00:18:12,990 --> 00:18:16,870
mentioned I've worked on Angular material, which is a component library built

00:18:16,870 --> 00:18:21,500
on material design -- build on Angular, using material design.

00:18:21,500 --> 00:18:25,530
The Angular material start is just a small repository

00:18:25,530 --> 00:18:27,710
you can grab on Github to get started.

00:18:27,710 --> 00:18:30,130
So I wanted to incorporate the protractor plugin.

00:18:30,130 --> 00:18:31,130
It's pretty simple.

00:18:31,130 --> 00:18:37,850
It only has one view.

00:18:37,850 --> 00:18:40,669
It has a list of users on the left site nav and when you

00:18:40,669 --> 00:18:46,110
click on one, it opens the specific view in the primary column on the right.

00:18:46,110 --> 00:18:49,809
There's a little share button, and if you tap that, it will open a bottom

00:18:49,809 --> 00:18:54,780
sheet, which is kind of like a dialogue, in that it opens on top of things.

00:18:54,780 --> 00:18:58,270
But it is a sort of drawer that comes up from the bottom.

00:18:58,270 --> 00:19:01,190
It's kind of a mobile pattern in material design.

00:19:01,190 --> 00:19:04,820
The idea with this, though, is that it is an interim element.

00:19:04,820 --> 00:19:08,100
And so when it opens, for a keyboard user or a screen reader

00:19:08,100 --> 00:19:10,150
user, we want to send our focus there.

00:19:10,150 --> 00:19:14,260
Both so that they are alerted to new content, but also so their focus

00:19:14,260 --> 00:19:17,640
is in the general location of this new content.

00:19:17,640 --> 00:19:19,980
This would be a perfect thing to write a test for.

00:19:19,980 --> 00:19:23,570
I want to assert that the first button in the bottom

00:19:23,570 --> 00:19:25,320
sheet has focus.

00:19:25,320 --> 00:19:28,999
So some setup I had to do for protractor -- the config file

00:19:28,999 --> 00:19:34,590
-- this is in the project now, but I had to add a line to enable the plugins,

00:19:34,590 --> 00:19:38,330
which come with protractor now, that come with the Chrome accessibility

00:19:38,330 --> 00:19:39,340
developer tools.

00:19:39,340 --> 00:19:42,049
You just have to enable them in your config.

00:19:42,049 --> 00:19:46,210
It also supports the Tenon API, an accessibility API.

00:19:46,210 --> 00:19:47,730
It's super awesome, really robust.

00:19:47,730 --> 00:19:51,570
It requires a subscription and an API key, but

00:19:51,570 --> 00:19:53,860
that is worth considering as well.

00:19:53,860 --> 00:19:58,820
And the other thing I had to do was add a selenium address in the config file.

00:19:58,820 --> 00:20:03,990
Then in the package.json, under the dev dependencies, there's something called

00:20:03,990 --> 00:20:08,780
scripts, where you can put any arbitrary hook you want to run from the command

00:20:08,780 --> 00:20:09,820
line.

00:20:09,820 --> 00:20:16,470
For me to run NPM test, I put a binary from protractor, which is the

00:20:16,470 --> 00:20:23,980
node module we download with it installed, and then the config.

00:20:23,980 --> 00:20:27,330
So once we have this set up, we can write some tests.

00:20:27,330 --> 00:20:30,620
The tests in the project -- I think they look a little different now, but the

00:20:30,620 --> 00:20:35,760
tests for the bottom sheet assumes that you have already navigated to the page

00:20:35,760 --> 00:20:40,039
and that you have already clicked on one of the avatars on the left.

00:20:40,039 --> 00:20:45,919
But this is a jasmine test, so it starts with a describe statement, just an arbitrary

00:20:45,919 --> 00:20:50,039
what we're testing, and then for each, we have to click on that little share

00:20:50,039 --> 00:20:51,790
button to get the bottom sheet open.

00:20:51,790 --> 00:20:56,150
But we're setting up the selenium web driver to be in the state we want

00:20:56,150 --> 00:20:57,570
to test.

00:20:57,570 --> 00:21:01,840
So once that happens, we can assert that it should focus on the first

00:21:01,840 --> 00:21:02,840
item.

00:21:02,840 --> 00:21:06,770
And this -- there's an infinite number of ways that you could write a test.

00:21:06,770 --> 00:21:08,910
This was the first pass I took at this.

00:21:08,910 --> 00:21:12,870
And what I did was I iterated through the buttons in the bottom sheet, and when

00:21:12,870 --> 00:21:15,730
it focuses on one, we have a hold of the active element.

00:21:15,730 --> 00:21:18,400
So I just verify that the one we're iterating over is the

00:21:18,400 --> 00:21:20,270
same one as the active element.

00:21:20,270 --> 00:21:22,020
You could do this other ways.

00:21:22,020 --> 00:21:24,490
But that was how I verified that the focus management piece

00:21:24,490 --> 00:21:27,020
was working.

00:21:27,020 --> 00:21:30,539
So on top of that, that's a test that I wrote, and that is the

00:21:30,539 --> 00:21:32,140
secret to this plugin.

00:21:32,140 --> 00:21:34,750
Is that you have to write tests that hit different parts

00:21:34,750 --> 00:21:39,160
of your app, and then the plugin currently -- it doesn't crawl your whole app.

00:21:39,160 --> 00:21:43,421
You have to write some tests, and then if you have the plugin enabled, like

00:21:43,421 --> 00:21:48,190
I showed you in the config, it will actually run the same audit tools -- or

00:21:48,190 --> 00:21:53,220
the audits that we ran in the browser extension, and Adi's tool.

00:21:53,220 --> 00:21:54,840
Same library.

00:21:54,840 --> 00:21:58,260
It will run those in your markup in protractor.

00:21:58,260 --> 00:22:01,740
So in material, everything passed.

00:22:01,740 --> 00:22:05,070
So I had to make it fail to show you what a failure looks like.

00:22:05,070 --> 00:22:09,470
Ironically, the pass and fail messages in the command line are in red and

00:22:09,470 --> 00:22:13,220
green, which I've heard are a little hard to see for some people.

00:22:13,220 --> 00:22:15,159
So that's a change we have to make.

00:22:15,159 --> 00:22:18,780
But it also says pass and fail in text, so it's not

00:22:18,780 --> 00:22:20,730
relying on color alone.

00:22:20,730 --> 00:22:23,000
But that's an improvement I would like to make.

00:22:23,000 --> 00:22:27,140
Which I can imagine -- even on a different monitor would be harder to see.

00:22:27,140 --> 00:22:30,909
And quickly mention that Tenon API would be another option.

00:22:30,909 --> 00:22:33,610
If you're interested in that, look at the protractor

00:22:33,610 --> 00:22:36,160
documentation.

00:22:36,160 --> 00:22:42,140
But to fix those failures that I made fail on purpose -- it has

00:22:42,140 --> 00:22:46,990
a list of contexts that it iterates over, and objects, and for each item

00:22:46,990 --> 00:22:49,210
there's a button with an icon on it.

00:22:49,210 --> 00:22:54,900
I just removed the text from the icon so it would fail, and to fix it, I just add the

00:22:54,900 --> 00:22:56,210
text back in.

00:22:56,210 --> 00:22:58,500
Which you can see highlighted.

00:22:58,500 --> 00:23:03,320
And then we're going to run it on the command line and see if it works.

00:23:03,320 --> 00:23:06,100
So I have the command line in my slides, and I'm

00:23:06,100 --> 00:23:07,530
just typing NPM test.

00:23:07,530 --> 00:23:12,610
That's the hook that we put into package.json.

00:23:12,610 --> 00:23:16,039
So I have selenium web driver running in another tab

00:23:16,039 --> 00:23:17,809
in my terminal.

00:23:17,809 --> 00:23:21,290
We can see selenium open up the browser, and now I have to go

00:23:21,290 --> 00:23:22,470
back to the slide.

00:23:22,470 --> 00:23:25,560
So the difference between Adi's tool and this one was Adi's

00:23:25,560 --> 00:23:27,180
used phantom.

00:23:27,180 --> 00:23:28,970
So it didn't open another browser.

00:23:28,970 --> 00:23:31,300
It didn't move our focus away.

00:23:31,300 --> 00:23:35,770
With protractor, it's actually using web driver to fire up a browser.

00:23:35,770 --> 00:23:40,320
We specified Chrome in the config, but you could fire up Firefox, you could run it

00:23:40,320 --> 00:23:46,130
in other environments -- but what that's doing is actually running our tests

00:23:46,130 --> 00:23:48,000
against that real browser.

00:23:48,000 --> 00:23:52,490
And then since I fixed the code in the HTML, now it

00:23:52,490 --> 00:23:56,510
passes all of the failures that we had before.

00:23:56,510 --> 00:24:00,430
We can also see that there are -- in the actual material start, there are two

00:24:00,430 --> 00:24:01,430
tests.

00:24:01,430 --> 00:24:02,590
I only showed you one of them.

00:24:02,590 --> 00:24:08,090
But the actual real project, which I'm running on my computer, that has two tests.

00:24:08,090 --> 00:24:11,620
And then we have the plugin enabled, so on top of our tests, it runs the

00:24:11,620 --> 00:24:13,130
Chrome accessibility audit.

00:24:13,130 --> 00:24:14,690
It's pretty awesome.

00:24:14,690 --> 00:24:17,510
I'm pretty stoked about that.

00:24:17,510 --> 00:24:19,700
So in comparison, unit testing.

00:24:19,700 --> 00:24:22,960
And actually, this is something I use more in my day-to-day work as a

00:24:22,960 --> 00:24:24,340
developer.

00:24:24,340 --> 00:24:28,700
Unit testing is different in -- different from end to end testing

00:24:28,700 --> 00:24:31,980
in that you need to write tests for individual components.

00:24:31,980 --> 00:24:35,220
Things you could test are -- ARIA properties that need to change

00:24:35,220 --> 00:24:39,390
with user interaction, keyboard operability, to make sure that tab

00:24:39,390 --> 00:24:42,820
index is enabled, and keyboard commands work.

00:24:42,820 --> 00:24:46,220
Text alternatives, making sure, for example, if you had an icon

00:24:46,220 --> 00:24:50,241
button, and you wanted to make sure that it had a label, or it fell back to a

00:24:50,241 --> 00:24:54,360
label or something -- semantics as well.

00:24:54,360 --> 00:24:58,020
So unit testing is a really great way -- if you're not already doing unit testing,

00:24:58,020 --> 00:24:59,559
you should be.

00:24:59,559 --> 00:25:01,340
That's what I went to learn at my last job.

00:25:01,340 --> 00:25:04,600
But accessibility fits in with that so well, because

00:25:04,600 --> 00:25:08,430
you all of a sudden have test coverage across your whole app for

00:25:08,430 --> 00:25:10,270
accessibility.

00:25:10,270 --> 00:25:16,190
So an example that I use a lot is that I am the primary contributor to NG

00:25:16,190 --> 00:25:18,809
ARIA, the accessibility module for Angular.

00:25:18,809 --> 00:25:23,672
There are some things I like about it, some things I want to change, but I have

00:25:23,672 --> 00:25:30,659
an example of a custom check box, a custom element with web components and custom

00:25:30,659 --> 00:25:31,659
HTML now.

00:25:31,659 --> 00:25:33,809
You can write any tag name that you want.

00:25:33,809 --> 00:25:36,169
So I have sum-check box.

00:25:36,169 --> 00:25:40,720
And then using ng model and ng checked in Angular, I can have it dynamically

00:25:40,720 --> 00:25:41,799
add attributes.

00:25:41,799 --> 00:25:44,980
So what ngARIA is doing is ensuring that the ARIA

00:25:44,980 --> 00:25:49,460
checked attribute is on the attribute, as well as the checked attribute.

00:25:49,460 --> 00:25:56,350
So if I uncheck the check box, we see ARIA checked change to false and the HTML5

00:25:56,350 --> 00:25:58,310
checked attribute go away.

00:25:58,310 --> 00:26:01,279
And that actually -- checked is what NG checked

00:26:01,279 --> 00:26:02,279
is adding.

00:26:02,279 --> 00:26:06,770
But because this isn't a real check box, it's not an input, we need ARIA to

00:26:06,770 --> 00:26:11,220
tell the accessibility tree in a screen reader that it's checked or unchecked.

00:26:11,220 --> 00:26:15,510
But the one thing we want to look at here is that this has tab index.

00:26:15,510 --> 00:26:18,929
So NG model, when it detects a role of check box

00:26:18,929 --> 00:26:23,940
-- there are certain scenarios where it will add tab index dynamically.

00:26:23,940 --> 00:26:26,620
And that is what I want to show you the test for.

00:26:26,620 --> 00:26:29,600
I'm refactoring NG ARIA right now, because it's a bit too

00:26:29,600 --> 00:26:32,000
liberal with what it adds.

00:26:32,000 --> 00:26:36,330
So I have tests that I'm working on locally about

00:26:36,330 --> 00:26:38,720
which elements it should attach to.

00:26:38,720 --> 00:26:44,360
And because Angular has thousands of unit tests, I usually use -- well, I will isolate

00:26:44,360 --> 00:26:46,730
to the NG ARIA tests.

00:26:46,730 --> 00:26:49,440
So I validate that it should not attach to native

00:26:49,440 --> 00:26:51,049
controls.

00:26:51,049 --> 00:26:53,779
Buttons -- if you put NG click on a button, it doesn't need tab

00:26:53,779 --> 00:26:54,809
index.

00:26:54,809 --> 00:26:58,570
It should attach to custom inputs, and it should attach to elements with

00:26:58,570 --> 00:27:00,600
NG click, like divs.

00:27:00,600 --> 00:27:04,080
So this is the stuff that NG ARIA -- the opportunity

00:27:04,080 --> 00:27:07,289
we have to improve Angular applications accessibility.

00:27:07,289 --> 00:27:10,070
But we need a little finessing to get this module

00:27:10,070 --> 00:27:11,670
in a better place.

00:27:11,670 --> 00:27:14,050
The unit testing is obviously a huge part of that.

00:27:14,050 --> 00:27:19,350
Actually, I'll talk a little bit more about that, since we have some more time

00:27:19,350 --> 00:27:21,430
than I thought we would.

00:27:21,430 --> 00:27:25,180
The unit testing -- every time I go to add a feature

00:27:25,180 --> 00:27:29,090
to something like NG ARIA or angular material, I will start with a test.

00:27:29,090 --> 00:27:30,860
Test driven development -- we're all familiar with

00:27:30,860 --> 00:27:31,860
that.

00:27:31,860 --> 00:27:33,520
But for accessibility you can do that.

00:27:33,520 --> 00:27:37,650
So when I went to make these changes to NG ARIA, I would start

00:27:37,650 --> 00:27:38,650
with the test.

00:27:38,650 --> 00:27:39,880
But it would fail.

00:27:39,880 --> 00:27:44,330
It's doing things it shouldn't right now.

00:27:44,330 --> 00:27:46,669
So I start by writing the test and then I go

00:27:46,669 --> 00:27:50,390
back to the code and then I make the changes to get all the tests to pass.

00:27:50,390 --> 00:27:54,309
There were actually a lot of features in NG ARIA, so it wasn't as easy as I thought

00:27:54,309 --> 00:27:55,710
it should be.

00:27:55,710 --> 00:27:59,100
But that should be coming up soon.

00:27:59,100 --> 00:28:04,080
So today we've talked about keyboard and screen reader testing as a manual way

00:28:04,080 --> 00:28:08,659
to actually check or diagnose the accessibility of an app.

00:28:08,659 --> 00:28:12,029
We looked at sort of automated tools like the Firefox web developer

00:28:12,029 --> 00:28:15,830
tool bar and the Chrome accessibility developer tools, which the latter

00:28:15,830 --> 00:28:18,299
-- the Chrome tool I would highly recommend using.

00:28:18,299 --> 00:28:21,260
Firefox -- the web developer tool bar is cool.

00:28:21,260 --> 00:28:23,860
It's a little bit more dated, and I would say the

00:28:23,860 --> 00:28:26,809
heading feature is the only one that I really use.

00:28:26,809 --> 00:28:31,890
But then in automated testing, we talked about Adi's a11y module and

00:28:31,890 --> 00:28:32,890
protractor.

00:28:32,890 --> 00:28:37,529
There's other tools out there like Quail and Tenon and other

00:28:37,529 --> 00:28:39,929
things you can use to automate accessibility testing.

00:28:39,929 --> 00:28:41,110
There's more of a culture.

00:28:41,110 --> 00:28:43,669
I'm here talking to you about it at JSConf.

00:28:43,669 --> 00:28:46,880
I never thought this would be a subject you would want to hear

00:28:46,880 --> 00:28:48,630
about, but it's changing.

00:28:48,630 --> 00:28:52,340
There are more tools and resources for us as developers

00:28:52,340 --> 00:28:56,630
to make the world better, make a more accessible web.

00:28:56,630 --> 00:29:00,180
So it's really exciting to see these things start to

00:29:00,180 --> 00:29:01,340
happen.

00:29:01,340 --> 00:29:02,820
In case you're like -- whoa, okay.

00:29:02,820 --> 00:29:06,340
I know about automated stuff, but I don't know anything about accessibility.

00:29:06,340 --> 00:29:12,740
I have a ton of resources in my slides, including people with disabilities user research.

00:29:12,740 --> 00:29:14,820
Because that's something we should be doing.

00:29:14,820 --> 00:29:16,330
Conducting user evaluations.

00:29:16,330 --> 00:29:20,809
As developers, I always think it's really cool when I get to go do a different

00:29:20,809 --> 00:29:23,080
task than development, like interviewing users.

00:29:23,080 --> 00:29:24,520
I think that's really valuable.

00:29:24,520 --> 00:29:29,080
I have a couple blog posts about auditing a website for accessibility,

00:29:29,080 --> 00:29:34,460
a recent one from smashing magazine on client rendered accessibility.

00:29:34,460 --> 00:29:40,290
There's some more tooling on W3C posts about web accessibility evaluation tools,

00:29:40,290 --> 00:29:43,779
the screen reader survey is the closest thing we have to analytics for

00:29:43,779 --> 00:29:44,779
accessibility.

00:29:44,779 --> 00:29:46,410
What do people self-report?

00:29:46,410 --> 00:29:51,290
What do they use for browsers and screen readers?

00:29:51,290 --> 00:29:54,740
And we can look at that and look at our own analytics to tell

00:29:54,740 --> 00:29:58,060
-- do I really need to support IE8?

00:29:58,060 --> 00:29:59,679
You can go and check.

00:29:59,679 --> 00:30:03,770
And then a little bit on what is ARIA, because I didn't go into that very

00:30:03,770 --> 00:30:05,440
much.

00:30:05,440 --> 00:30:08,010
So that means that we're at the end.

00:30:08,010 --> 00:30:12,140
And there should be something awesome happening now.

00:30:12,140 --> 00:30:16,461
Beyonce dancing, with, like, a pizza coming out, I

00:30:16,461 --> 00:30:20,080
think, is like a win alone.

00:30:20,080 --> 00:30:23,220
We're actually done a little bit early.

00:30:23,220 --> 00:30:25,080
So I wanted to say...

00:30:25,080 --> 00:30:29,360
In case you don't get a slice of pizza, I have some pizza

00:30:29,360 --> 00:30:34,240
buttons that I would be happy to give to you.

00:30:34,240 --> 00:30:39,539
And you can come and find me at any time, and ask me questions about accessibility.

00:30:39,539 --> 00:30:44,160
I'm pretty passionate about it, obviously.

00:30:44,160 --> 00:30:51,970
Our magic thing is not happening.

00:30:51,970 --> 00:30:53,270
Oh.

00:30:53,270 --> 00:30:55,870
That sucks.

00:30:55,870 --> 00:30:57,179
(laughter)

00:30:57,179 --> 00:30:58,480
You know, I had a really good run.

00:30:58,480 --> 00:30:59,730
Last year was amazing.

00:30:59,730 --> 00:31:01,421
And I guess it's just not happening.

00:31:01,421 --> 00:31:03,580
What was supposed to happen was that there was supposed to

00:31:03,580 --> 00:31:04,580
be a pizza that came out.

00:31:04,580 --> 00:31:06,020
I actually really want pizza.

00:31:06,020 --> 00:31:08,210
I skipped the afternoon snack.

00:31:08,210 --> 00:31:09,520
So it just...

00:31:09,520 --> 00:31:11,340
My dreams are foiled.

00:31:11,340 --> 00:31:14,100
Your pizza dreams.

00:31:14,100 --> 00:31:16,690
As a consolation prize, I have an inflatable pizza

00:31:16,690 --> 00:31:18,830
slice that we can play with in the pool.

00:31:18,830 --> 00:31:20,409
I don't know if you heard about that.

00:31:20,409 --> 00:31:23,720
I'm really glad I brought that now, because I'm so let down that the pizza

00:31:23,720 --> 00:31:24,720
didn't show up.

00:31:24,720 --> 00:31:26,650
Give them an angry phone call.

00:31:26,650 --> 00:31:30,190
Anyway, thanks for letting me dawdle here for a minute.

00:31:30,190 --> 00:31:31,419
It's been really fun talking to you.

00:31:31,419 --> 00:31:31,799

YouTube URL: https://www.youtube.com/watch?v=-XUmf_RPF8k


