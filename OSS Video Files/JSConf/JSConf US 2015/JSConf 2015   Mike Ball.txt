Title: JSConf 2015   Mike Ball
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	
Captions: 
	00:00:13,940 --> 00:00:20,640
hi thanks everyone so i'll be speaking

00:00:18,120 --> 00:00:25,290
today about a headless testing against

00:00:20,640 --> 00:00:28,020
real web browsers using XV fe so if

00:00:25,290 --> 00:00:31,050
you're not familiar with what XV FB is

00:00:28,020 --> 00:00:33,600
just just bear with me i'm going to

00:00:31,050 --> 00:00:35,520
share some background on why this was

00:00:33,600 --> 00:00:37,530
relevant to my team and may be relevant

00:00:35,520 --> 00:00:40,380
to yours as well will transition into

00:00:37,530 --> 00:00:43,800
you an explanation of what exactly is XV

00:00:40,380 --> 00:00:47,910
FB and then allah i'll finish off with a

00:00:43,800 --> 00:00:50,880
demo also a quick footnote is my first

00:00:47,910 --> 00:00:53,130
time speaking at a conference so so bear

00:00:50,880 --> 00:00:58,500
with me there too hopefully you're not

00:00:53,130 --> 00:01:00,060
about to watch my yeah hopefully you're

00:00:58,500 --> 00:01:04,199
not about to watch my career in

00:01:00,060 --> 00:01:07,080
professional stature crash and burn so

00:01:04,199 --> 00:01:10,079
again my name is mike ball md be on

00:01:07,080 --> 00:01:14,000
github and clap excitement on twitter

00:01:10,079 --> 00:01:18,659
and i work for a little company called

00:01:14,000 --> 00:01:23,400
comcast my team at comcast is

00:01:18,659 --> 00:01:27,450
responsible for building some TV and

00:01:23,400 --> 00:01:30,630
video streaming applications effectively

00:01:27,450 --> 00:01:34,260
where we turn your web browser into a

00:01:30,630 --> 00:01:39,300
tv's 2015 and TV is not just for your

00:01:34,260 --> 00:01:42,810
set-top box anymore so we do that with

00:01:39,300 --> 00:01:46,520
heart in Philadelphia as is evidenced by

00:01:42,810 --> 00:01:49,680
our Xfinity origin label response header

00:01:46,520 --> 00:01:52,729
which we serve back with every HTTP

00:01:49,680 --> 00:01:56,670
response served by our application and I

00:01:52,729 --> 00:01:59,700
mention this because I know historically

00:01:56,670 --> 00:02:02,070
comcast is a company that hasn't always

00:01:59,700 --> 00:02:04,860
enjoyed the best reputation customer

00:02:02,070 --> 00:02:09,899
service wise and user experience wise

00:02:04,860 --> 00:02:12,870
and my team is really really working to

00:02:09,899 --> 00:02:15,209
change that we do do what we do with

00:02:12,870 --> 00:02:19,620
heart and with quality in mind and that

00:02:15,209 --> 00:02:24,360
that in turn relates to a lot of what I

00:02:19,620 --> 00:02:25,890
plan to speak about here today so a

00:02:24,360 --> 00:02:29,670
little bit of prologue

00:02:25,890 --> 00:02:32,610
um why why am I talking about this here

00:02:29,670 --> 00:02:35,550
today so let me let me lead up to that

00:02:32,610 --> 00:02:39,060
with some background on my beliefs about

00:02:35,550 --> 00:02:42,390
software development so automated

00:02:39,060 --> 00:02:44,280
testing I'm a huge advocate of automated

00:02:42,390 --> 00:02:48,060
testing and I'm sure many of you guys

00:02:44,280 --> 00:02:51,390
are as well I I rely pretty heavily on

00:02:48,060 --> 00:02:53,900
automated tests within my own team to

00:02:51,390 --> 00:02:56,880
operate as an insurance policy

00:02:53,900 --> 00:03:00,000
guaranteeing that our software continues

00:02:56,880 --> 00:03:02,670
working as it should with every change

00:03:00,000 --> 00:03:05,430
that introduced this this helps my team

00:03:02,670 --> 00:03:08,970
move fast it helps us understand how a

00:03:05,430 --> 00:03:11,550
changing changing business requirements

00:03:08,970 --> 00:03:14,760
or changing user experience impacts a

00:03:11,550 --> 00:03:16,769
larger system and we this this insurance

00:03:14,760 --> 00:03:20,580
policy is in place again with the goal

00:03:16,769 --> 00:03:24,269
of guaranteeing customer quality and and

00:03:20,580 --> 00:03:26,700
serving as kind of a digital audit trail

00:03:24,269 --> 00:03:31,260
that when something needs to change

00:03:26,700 --> 00:03:35,010
because change is inevitable that suite

00:03:31,260 --> 00:03:37,380
of tests or in this maybe in this case

00:03:35,010 --> 00:03:41,010
test failures highlights immediately

00:03:37,380 --> 00:03:46,200
what else throughout the software needs

00:03:41,010 --> 00:03:50,130
to change to align with the evolving

00:03:46,200 --> 00:03:53,060
business requirements and that leads

00:03:50,130 --> 00:03:55,170
into you another important aspect of my

00:03:53,060 --> 00:03:56,940
philosophy as software developer I

00:03:55,170 --> 00:04:00,299
believe pretty strongly in continuous

00:03:56,940 --> 00:04:03,570
integration and my team relies really

00:04:00,299 --> 00:04:06,150
heavily on a healthy continuous

00:04:03,570 --> 00:04:08,040
integration pipeline I think in its

00:04:06,150 --> 00:04:09,920
ideal form continuous integration

00:04:08,040 --> 00:04:12,870
ensures a code based health is

00:04:09,920 --> 00:04:15,570
continuously monitored with with each

00:04:12,870 --> 00:04:17,910
change with each push a developer on the

00:04:15,570 --> 00:04:20,430
team makes and that happens many many

00:04:17,910 --> 00:04:23,780
many times throughout the day in its

00:04:20,430 --> 00:04:26,669
ideal form this CI pipeline should be

00:04:23,780 --> 00:04:29,430
scientific it should be consistent needs

00:04:26,669 --> 00:04:31,050
to be easily repeatable and it also

00:04:29,430 --> 00:04:34,110
needs to be as fast and cheap as

00:04:31,050 --> 00:04:38,480
possible but still just as sophisticated

00:04:34,110 --> 00:04:41,250
as is necessary to serve as

00:04:38,480 --> 00:04:42,540
quality insurance policy and I mentioned

00:04:41,250 --> 00:04:46,470
that because I think that's kind of true

00:04:42,540 --> 00:04:49,320
of all engineered systems that you want

00:04:46,470 --> 00:04:51,720
them to be just complex enough to honor

00:04:49,320 --> 00:04:54,360
their responsibilities but when they're

00:04:51,720 --> 00:04:56,700
they grow in complexity beyond what's

00:04:54,360 --> 00:04:59,340
necessary that's kind of a sticky space

00:04:56,700 --> 00:05:02,070
in which in my experience problems occur

00:04:59,340 --> 00:05:06,030
and conversely when they're not complex

00:05:02,070 --> 00:05:07,440
enough to serve their their need that's

00:05:06,030 --> 00:05:11,820
a sticky space as well and that

00:05:07,440 --> 00:05:14,100
threshold is ever-changing so we're

00:05:11,820 --> 00:05:16,500
constantly monitoring that constantly

00:05:14,100 --> 00:05:18,930
tweaking the process to make sure

00:05:16,500 --> 00:05:23,100
quality is guaranteed and so that brings

00:05:18,930 --> 00:05:26,040
me to you my my last point about a good

00:05:23,100 --> 00:05:28,490
CI system which is that the feedback

00:05:26,040 --> 00:05:32,160
cycle should be fast we work fast

00:05:28,490 --> 00:05:36,090
business changes fast the customers

00:05:32,160 --> 00:05:38,370
expect fast so we we really need to to

00:05:36,090 --> 00:05:41,990
rely on speed we need to get feedback as

00:05:38,370 --> 00:05:46,650
soon as possible about problem scenarios

00:05:41,990 --> 00:05:50,340
so moving on with that point I'll say I

00:05:46,650 --> 00:05:51,780
think the story of computers is kind of

00:05:50,340 --> 00:05:54,500
that they're getting you know they're

00:05:51,780 --> 00:05:58,710
getting cheaper and cheaper and servers

00:05:54,500 --> 00:06:02,100
disposable infrastructure is more and

00:05:58,710 --> 00:06:05,040
more readily available technology like

00:06:02,100 --> 00:06:08,120
virtualization container technology like

00:06:05,040 --> 00:06:12,780
docker cloud infrastructure all of this

00:06:08,120 --> 00:06:16,530
works in concert to illustrate this

00:06:12,780 --> 00:06:17,970
point I have that servers are cheaper

00:06:16,530 --> 00:06:20,070
and cheaper and more and more readily

00:06:17,970 --> 00:06:22,650
available in our own continuous

00:06:20,070 --> 00:06:25,400
integration pipeline relies on this

00:06:22,650 --> 00:06:31,350
pretty heavily we rely on virtualized

00:06:25,400 --> 00:06:34,050
disposable Linux VMS and then within

00:06:31,350 --> 00:06:36,600
this world especially at the JavaScript

00:06:34,050 --> 00:06:39,060
layer headless testing is is pretty

00:06:36,600 --> 00:06:43,550
important and so historically tools like

00:06:39,060 --> 00:06:51,020
phantom jsf jsf ear acer have all

00:06:43,550 --> 00:06:51,020
provided a headless JavaScript runtime

00:06:51,030 --> 00:06:57,180
and and this this allows us of course to

00:06:54,180 --> 00:07:01,590
execute our JavaScript code and assert

00:06:57,180 --> 00:07:05,190
that all all within it continues to work

00:07:01,590 --> 00:07:10,170
as it should that the overall health of

00:07:05,190 --> 00:07:13,730
the software is as it should be or or

00:07:10,170 --> 00:07:17,040
that it isn't as it should be and and

00:07:13,730 --> 00:07:22,620
accordingly we're alerted to this

00:07:17,040 --> 00:07:26,130
problem but there is a problem now those

00:07:22,620 --> 00:07:27,900
all those tools are great and I my own

00:07:26,130 --> 00:07:30,150
team relies pretty heavily on phantom

00:07:27,900 --> 00:07:32,040
j/s is a great tool and seems to have

00:07:30,150 --> 00:07:34,410
risen as the leader amongst these

00:07:32,040 --> 00:07:36,630
headless run times in recent years and

00:07:34,410 --> 00:07:40,370
so this is not at all a dis on phantom

00:07:36,630 --> 00:07:44,400
JSI blown away by how great it is but

00:07:40,370 --> 00:07:46,770
one problem remains and even ray touched

00:07:44,400 --> 00:07:49,380
upon this and mentioning the need to run

00:07:46,770 --> 00:07:51,990
headless ie in the presentation before

00:07:49,380 --> 00:07:54,750
mine so what if your technology can't

00:07:51,990 --> 00:07:57,770
run on one of these headless runtimes

00:07:54,750 --> 00:08:01,770
what if phantom j/s doesn't suffice in

00:07:57,770 --> 00:08:05,280
serving your needs so what do I mean by

00:08:01,770 --> 00:08:09,090
this well here's a few examples flash

00:08:05,280 --> 00:08:11,700
and wjs which was until recently known

00:08:09,090 --> 00:08:13,740
as node WebKit and google polymer web

00:08:11,700 --> 00:08:17,160
component tester provides some examples

00:08:13,740 --> 00:08:22,140
here so these are all three examples of

00:08:17,160 --> 00:08:24,960
some technology that comcast in across

00:08:22,140 --> 00:08:28,290
various teams or different layers of the

00:08:24,960 --> 00:08:31,980
ginormous software ecosystem that

00:08:28,290 --> 00:08:35,550
comcast is responsible for leverages so

00:08:31,980 --> 00:08:39,570
flash of course requires and assumes the

00:08:35,550 --> 00:08:42,330
presence of a GUI n wjs if you're not

00:08:39,570 --> 00:08:45,420
familiar is a great technology for

00:08:42,330 --> 00:08:50,120
authoring distributed desktop

00:08:45,420 --> 00:08:55,650
applications across windows linux mac OS

00:08:50,120 --> 00:08:59,360
using web technologies and nodejs and it

00:08:55,650 --> 00:09:01,710
to buy it you're reasonably of being a

00:08:59,360 --> 00:09:03,690
technology for authoring desktop

00:09:01,710 --> 00:09:04,800
applications it seems the presence of a

00:09:03,690 --> 00:09:07,410
GUI

00:09:04,800 --> 00:09:10,680
and Google polymer web component tester

00:09:07,410 --> 00:09:13,610
web component tester being the the

00:09:10,680 --> 00:09:17,130
polymer community testing tool of choice

00:09:13,610 --> 00:09:19,080
also assumes the presence of a web

00:09:17,130 --> 00:09:24,480
component or excuse me the presence of

00:09:19,080 --> 00:09:28,279
an actual GUI in actual web browser so

00:09:24,480 --> 00:09:32,310
for the purpose of this presentation

00:09:28,279 --> 00:09:36,450
let's focus on Google polymer as a case

00:09:32,310 --> 00:09:38,130
study now if you're not familiar with

00:09:36,450 --> 00:09:41,760
Google polymer I'm not going to go into

00:09:38,130 --> 00:09:45,690
too much depth at this stage partially

00:09:41,760 --> 00:09:47,430
because my colleague Chris lurin and

00:09:45,690 --> 00:09:49,620
raise your hand chris is going to be

00:09:47,430 --> 00:09:53,640
given a great introduction to Google

00:09:49,620 --> 00:09:57,329
polymer this evening at 5 45 is that

00:09:53,640 --> 00:10:01,410
correct so be sure to check that out but

00:09:57,329 --> 00:10:04,680
the basic skim the surface background as

00:10:01,410 --> 00:10:06,990
is relevant to my talk here is that a

00:10:04,680 --> 00:10:11,339
google google polymer is some great

00:10:06,990 --> 00:10:14,310
technology used to author HTML web

00:10:11,339 --> 00:10:17,430
component this is a technology that

00:10:14,310 --> 00:10:21,570
various teams throughout Comcast's have

00:10:17,430 --> 00:10:25,350
taken increasing interest in as of late

00:10:21,570 --> 00:10:28,800
and like i mentioned this tool web

00:10:25,350 --> 00:10:33,260
component tester is the polymer

00:10:28,800 --> 00:10:37,380
community setting tool of choice for

00:10:33,260 --> 00:10:40,560
automating google polymer tests but

00:10:37,380 --> 00:10:42,260
here's the here's the deal web component

00:10:40,560 --> 00:10:46,860
tester like i mentioned previously

00:10:42,260 --> 00:10:50,610
assumes a GUI and so these virtualized

00:10:46,860 --> 00:10:52,170
CI build agents i mentioned earlier they

00:10:50,610 --> 00:10:57,980
don't have a screen they don't have a

00:10:52,170 --> 00:11:01,920
GUI they're cheap disposable VMs and so

00:10:57,980 --> 00:11:06,089
in this case web component tester really

00:11:01,920 --> 00:11:11,899
challenges some antal infrastructure

00:11:06,089 --> 00:11:14,910
assumptions and problem isn't isn't

00:11:11,899 --> 00:11:17,010
mountable there are some candidate

00:11:14,910 --> 00:11:21,800
solutions provided

00:11:17,010 --> 00:11:25,290
by Travis CI for example or sauce labs

00:11:21,800 --> 00:11:29,330
or Travis CI has some really extensive

00:11:25,290 --> 00:11:33,510
and great documentation on how to run

00:11:29,330 --> 00:11:35,790
GUI headless browsers on its own boy

00:11:33,510 --> 00:11:39,330
infrastructure and incidentally this

00:11:35,790 --> 00:11:41,190
their technique also leverages xvii FB

00:11:39,330 --> 00:11:44,690
which I'll cover in more detail here and

00:11:41,190 --> 00:11:48,180
a headless Firefox so that's great and

00:11:44,690 --> 00:11:52,650
sauce labs if you're not familiar is

00:11:48,180 --> 00:11:56,190
also a great option sauce labs offers a

00:11:52,650 --> 00:11:58,890
selenium cloud with access to over a

00:11:56,190 --> 00:12:02,970
hundred device OS browser combo so

00:11:58,890 --> 00:12:05,940
that's a great option as well but what

00:12:02,970 --> 00:12:07,980
if your team can't use these tools so

00:12:05,940 --> 00:12:11,280
why might your team not be able to use

00:12:07,980 --> 00:12:13,710
these tools well budget might get in a

00:12:11,280 --> 00:12:16,890
way these are vendor services and your

00:12:13,710 --> 00:12:19,500
team might just not have the capital to

00:12:16,890 --> 00:12:22,170
pay for it sought complex software

00:12:19,500 --> 00:12:27,320
licensing agreements may not meet your

00:12:22,170 --> 00:12:30,420
needs for various reasons or maybe the

00:12:27,320 --> 00:12:36,030
amount of load that your team will do

00:12:30,420 --> 00:12:40,010
will will generate is just prohibitive

00:12:36,030 --> 00:12:46,040
so what are we doing in these cases well

00:12:40,010 --> 00:12:48,840
that's a that's really where my my

00:12:46,040 --> 00:12:51,570
concept that my ideas for X virtual

00:12:48,840 --> 00:12:53,970
frame buffer come into to play so X

00:12:51,570 --> 00:12:56,040
virtual frame buffer more commonly known

00:12:53,970 --> 00:12:58,170
as X vfb I'm kind of using the two

00:12:56,040 --> 00:13:01,320
interchangeable in this interchangeably

00:12:58,170 --> 00:13:03,780
in this presentation is it's not new

00:13:01,320 --> 00:13:06,900
technology and it's not JavaScript

00:13:03,780 --> 00:13:09,780
technology but it is some technology

00:13:06,900 --> 00:13:13,830
that allows you to run GUI applications

00:13:09,780 --> 00:13:18,990
like web growl web browsers with no guey

00:13:13,830 --> 00:13:22,380
so with no screen so let's talk a little

00:13:18,990 --> 00:13:24,210
bit about x.x VFD and i'll hopefully

00:13:22,380 --> 00:13:26,130
provide some contextual understanding

00:13:24,210 --> 00:13:31,050
for what it is before I lead into my

00:13:26,130 --> 00:13:33,209
demo and with that a quick sidebar the

00:13:31,050 --> 00:13:36,899
talk about the x window system so the x

00:13:33,209 --> 00:13:40,920
window system is how guha displays are

00:13:36,899 --> 00:13:46,320
rendered on unix-like systems unix-like

00:13:40,920 --> 00:13:49,529
systems being linux and mac OS and the

00:13:46,320 --> 00:13:52,260
x11 display server is the curt release

00:13:49,529 --> 00:13:54,660
of the x window system so again this is

00:13:52,260 --> 00:13:56,880
a windowing system for bit map displays

00:13:54,660 --> 00:13:59,790
used to render gooeys and this is

00:13:56,880 --> 00:14:01,740
effectively how visual elements are

00:13:59,790 --> 00:14:05,540
rendered on a screen and available for

00:14:01,740 --> 00:14:09,600
user interaction via mouse click or

00:14:05,540 --> 00:14:17,790
visual gooeys with qualities like color

00:14:09,600 --> 00:14:20,250
and shape on mac OS and linux and so

00:14:17,790 --> 00:14:24,450
with that what is x virtual frame buffer

00:14:20,250 --> 00:14:27,000
so x virtual frame buffer or x vfb babes

00:14:24,450 --> 00:14:29,370
just like any other x server the

00:14:27,000 --> 00:14:33,660
difference being no graphical output

00:14:29,370 --> 00:14:37,230
which is rendered so it allows us to

00:14:33,660 --> 00:14:40,290
perform all graphical operations in

00:14:37,230 --> 00:14:43,860
memory without showing screen output so

00:14:40,290 --> 00:14:47,459
again it doesn't require the computer

00:14:43,860 --> 00:14:50,880
running it to have a screen as is the

00:14:47,459 --> 00:14:52,860
case in my own teams continuous

00:14:50,880 --> 00:14:55,200
integration workflow and I'm sure that's

00:14:52,860 --> 00:14:56,970
true of many other teams continuous

00:14:55,200 --> 00:15:00,810
integration workflows we're relying on

00:14:56,970 --> 00:15:04,110
EMS either in a cloud or even managed

00:15:00,810 --> 00:15:11,370
VMs that have no display they have no

00:15:04,110 --> 00:15:14,190
screen so that brings me Oh Jim so with

00:15:11,370 --> 00:15:16,770
all of these problems in mind and

00:15:14,190 --> 00:15:19,680
bearing into consideration xvii fbsm

00:15:16,770 --> 00:15:24,089
candidate solution technology a doctored

00:15:19,680 --> 00:15:27,620
up a polymer testing box so this uh this

00:15:24,089 --> 00:15:30,899
is a repo available and like all along

00:15:27,620 --> 00:15:33,779
my github user name is md b and the

00:15:30,899 --> 00:15:36,709
testing boxes polymer dash testing dash

00:15:33,779 --> 00:15:39,540
box and so a little disclaimer I'm not

00:15:36,709 --> 00:15:42,810
advocating necessarily that this is the

00:15:39,540 --> 00:15:44,819
best or most appropriate way to solve

00:15:42,810 --> 00:15:46,889
this problem your team this is just a

00:15:44,819 --> 00:15:50,309
reference implementation proof of

00:15:46,889 --> 00:15:55,139
concept for how you can run your

00:15:50,309 --> 00:15:57,149
automated tests in a headless DM so the

00:15:55,139 --> 00:15:59,879
core technologies I'm going to be using

00:15:57,149 --> 00:16:01,739
throughout it throughout the

00:15:59,879 --> 00:16:04,470
presentation and demoing polymer testing

00:16:01,739 --> 00:16:08,939
box are of course xvii FB we're going to

00:16:04,470 --> 00:16:11,220
use ansible ansible is a configuration

00:16:08,939 --> 00:16:14,519
and configuration management and

00:16:11,220 --> 00:16:18,989
provisioning technology comparable to

00:16:14,519 --> 00:16:21,029
chef or puppet or CF engine typically

00:16:18,989 --> 00:16:23,609
used by system administrators and

00:16:21,029 --> 00:16:26,999
operations professionals in provisioning

00:16:23,609 --> 00:16:28,589
servers we're going to install Google

00:16:26,999 --> 00:16:32,129
Chrome we're going to solve Firefox

00:16:28,589 --> 00:16:36,239
nodejs Bower and web component tester

00:16:32,129 --> 00:16:38,759
which are all the prerequisites for

00:16:36,239 --> 00:16:44,100
running Google polymer web component

00:16:38,759 --> 00:16:45,929
tester test ok so demo time so again

00:16:44,100 --> 00:16:49,439
here's what we're going to do we'll

00:16:45,929 --> 00:16:52,169
provision a vagrant bun to box ansible

00:16:49,439 --> 00:16:54,239
is then going to do its work installing

00:16:52,169 --> 00:16:56,669
and configuring all necessary

00:16:54,239 --> 00:16:59,489
dependencies and then we're going to run

00:16:56,669 --> 00:17:03,809
some web component tester tests against

00:16:59,489 --> 00:17:07,319
a polymer web component so quick sidebar

00:17:03,809 --> 00:17:08,909
on vagrant a disclaimer for those of you

00:17:07,319 --> 00:17:13,049
who aren't familiar with vagrant this is

00:17:08,909 --> 00:17:17,970
not JavaScript but you know takes a

00:17:13,049 --> 00:17:19,709
village so it's a feel obligated to say

00:17:17,970 --> 00:17:22,350
that at a javascript conference right

00:17:19,709 --> 00:17:25,439
but this is some great technology that

00:17:22,350 --> 00:17:27,779
helps us help serve our needs within the

00:17:25,439 --> 00:17:31,620
JavaScript community so vagrant is built

00:17:27,779 --> 00:17:35,549
on VirtualBox and it's effectively a

00:17:31,620 --> 00:17:38,039
tool to spin up lightweight headless VMs

00:17:35,549 --> 00:17:41,159
but a quick quick point I want to make

00:17:38,039 --> 00:17:44,820
about this is that in this case on my

00:17:41,159 --> 00:17:47,850
laptop vagrant is the provider of this

00:17:44,820 --> 00:17:50,759
Linux VM but that provider could just as

00:17:47,850 --> 00:17:55,260
easily be a remote or cloud provider

00:17:50,759 --> 00:17:57,570
such as Amazon Web Services or digital

00:17:55,260 --> 00:18:00,540
ocean or OpenStack

00:17:57,570 --> 00:18:03,000
in this case for this demos purpose is

00:18:00,540 --> 00:18:07,530
I'm just using vagrant but in theory

00:18:03,000 --> 00:18:12,300
this ansible PlayBook playbook being the

00:18:07,530 --> 00:18:18,150
ansible metaphor for how provisioning

00:18:12,300 --> 00:18:19,830
happens could take effect on on a box

00:18:18,150 --> 00:18:24,470
provided by a different provider like a

00:18:19,830 --> 00:18:28,920
crab cloud provider and so the primary

00:18:24,470 --> 00:18:38,190
way that we communicate right that we

00:18:28,920 --> 00:18:40,950
want a the bun to vm from vagrant is via

00:18:38,190 --> 00:18:44,850
this vagrant file so again this is also

00:18:40,950 --> 00:18:46,410
not JavaScript this is Ruby but i do

00:18:44,850 --> 00:18:49,770
want to point out a few things here

00:18:46,410 --> 00:18:51,810
there's there's more going on but in the

00:18:49,770 --> 00:18:55,680
larger vagrant file which you can see in

00:18:51,810 --> 00:19:00,000
my repo but quick quick points here so

00:18:55,680 --> 00:19:06,900
number one note that we are poor we are

00:19:00,000 --> 00:19:08,610
forwarding port 5900 to 5901 on the host

00:19:06,900 --> 00:19:13,470
machine so the host machine in this

00:19:08,610 --> 00:19:15,480
context being my macbook so the vm

00:19:13,470 --> 00:19:19,050
becomes available to us on my macbook

00:19:15,480 --> 00:19:23,220
via port 5901 and then secondly we're

00:19:19,050 --> 00:19:26,430
declaring a vagrant provision this bun

00:19:23,220 --> 00:19:29,040
to box we're asking for via ansible and

00:19:26,430 --> 00:19:32,090
the instructions for how to do so are

00:19:29,040 --> 00:19:35,250
contained in this playbook yeah mol file

00:19:32,090 --> 00:19:38,100
alright so the ansible playbook yamo

00:19:35,250 --> 00:19:44,550
file again not JavaScript ansible is

00:19:38,100 --> 00:19:48,300
Python but again I hope you see the

00:19:44,550 --> 00:19:50,670
relevancy we're going to as per

00:19:48,300 --> 00:19:53,610
directive of this playbook diamo file

00:19:50,670 --> 00:19:56,430
install and run xvf be on display port 0

00:19:53,610 --> 00:19:58,230
we're going to install node Bauer web

00:19:56,430 --> 00:20:01,500
component tester and then we're going to

00:19:58,230 --> 00:20:05,880
install Chrome and Firefox so we kick

00:20:01,500 --> 00:20:10,040
all this off by executing by running

00:20:05,880 --> 00:20:12,740
vagrant up so that gives us

00:20:10,040 --> 00:20:17,180
bass ubuntu box and then kicks off the

00:20:12,740 --> 00:20:20,300
ansible provisioning process point here

00:20:17,180 --> 00:20:22,820
is that this is you know I'm storing my

00:20:20,300 --> 00:20:25,040
infrastructure in code here so this is

00:20:22,820 --> 00:20:29,050
an easily repeatable scientific process

00:20:25,040 --> 00:20:32,120
this is not a fragile managed server

00:20:29,050 --> 00:20:34,010
this code allows us to repeat this

00:20:32,120 --> 00:20:37,400
process again and again and again and

00:20:34,010 --> 00:20:40,160
get the in theory exact same vm again

00:20:37,400 --> 00:20:42,760
and again and again so when that's all

00:20:40,160 --> 00:20:45,650
done we're going to shell into the

00:20:42,760 --> 00:20:50,300
polymer testing box which I'll do via

00:20:45,650 --> 00:20:52,700
vagrant SSH and then I'm going to clone

00:20:50,300 --> 00:20:55,820
a Google polymer web component so in

00:20:52,700 --> 00:20:58,460
this case will clone core Ajax which is

00:20:55,820 --> 00:21:01,790
a google polymer component maintained by

00:20:58,460 --> 00:21:06,140
the polymer team that whoops provides

00:21:01,790 --> 00:21:09,800
some Ajax functionality within polymer

00:21:06,140 --> 00:21:14,900
so will clone that I'm going to check

00:21:09,800 --> 00:21:17,540
out version 056 of core Ajax I'll do

00:21:14,900 --> 00:21:21,710
that because I want a demo working tests

00:21:17,540 --> 00:21:24,650
and I know 056 is an official release so

00:21:21,710 --> 00:21:29,840
it's tests pass and then we're going to

00:21:24,650 --> 00:21:32,030
run Bower install to install the core

00:21:29,840 --> 00:21:35,840
Ajax dependency so again this is all

00:21:32,030 --> 00:21:44,000
happening the polymer testing box

00:21:35,840 --> 00:21:48,020
vagrant box okay so now I'll demo

00:21:44,000 --> 00:21:52,490
running web component tester so what

00:21:48,020 --> 00:21:55,180
you'll see is all i'll run WCT which is

00:21:52,490 --> 00:21:57,680
the web component tester executable

00:21:55,180 --> 00:22:00,530
setting the environment variable to

00:21:57,680 --> 00:22:02,930
display port 0 so I'm telling web

00:22:00,530 --> 00:22:07,640
component tester to run on display port

00:22:02,930 --> 00:22:10,160
0 and remember per hour ansible playbook

00:22:07,640 --> 00:22:14,150
ex virtual frame buffer is also running

00:22:10,160 --> 00:22:18,460
on display port 0 and we'll see evidence

00:22:14,150 --> 00:22:18,460
I'll go ahead and kick this off that

00:22:19,060 --> 00:22:27,590
selenium is going to spin up both crow

00:22:23,420 --> 00:22:31,040
and firefox so you see chrome 43 and

00:22:27,590 --> 00:22:33,860
firefox 38 which were installed via

00:22:31,040 --> 00:22:36,560
ansible and we're going to run the web

00:22:33,860 --> 00:22:38,660
component tester test in each browser so

00:22:36,560 --> 00:22:41,330
you can see we've passed all of our

00:22:38,660 --> 00:22:44,450
tests in each browser and that happened

00:22:41,330 --> 00:22:48,170
with no screen output that happened

00:22:44,450 --> 00:22:52,040
entirely on my vagrant box so that's

00:22:48,170 --> 00:23:01,760
like as the core of what I I seek to

00:22:52,040 --> 00:23:04,040
demo here thanks so i can understand any

00:23:01,760 --> 00:23:06,320
skepticism you have you know how do we

00:23:04,040 --> 00:23:08,960
know that chrome and firefox really ran

00:23:06,320 --> 00:23:11,450
and what about debugging what if you

00:23:08,960 --> 00:23:14,240
actually need to poke around in

00:23:11,450 --> 00:23:16,490
development or maybe even remotely to

00:23:14,240 --> 00:23:18,320
figure out why are things failing you

00:23:16,490 --> 00:23:21,830
might need a GUI to do so you might need

00:23:18,320 --> 00:23:26,570
to actually with a web browser so I have

00:23:21,830 --> 00:23:29,840
a solution BNC well the polymer testing

00:23:26,570 --> 00:23:34,190
box has no screen and has no GUI your

00:23:29,840 --> 00:23:38,420
Mac does so what this means is that we

00:23:34,190 --> 00:23:42,800
can open a VNC connection from in this

00:23:38,420 --> 00:23:48,040
case my macbook to the vagrant box and

00:23:42,800 --> 00:23:54,140
because my macbook has a GUI has screen

00:23:48,040 --> 00:24:00,320
the drall commands and the of the GUI

00:23:54,140 --> 00:24:03,920
commands executed will have a screen to

00:24:00,320 --> 00:24:06,430
take effect on so step one on the

00:24:03,920 --> 00:24:09,140
polymer testing box will have to install

00:24:06,430 --> 00:24:12,560
VNC server so i'll do that via sudo

00:24:09,140 --> 00:24:16,370
apt-get install x11 VNC and also writes

00:24:12,560 --> 00:24:19,430
on display port 0 and then on your mac

00:24:16,370 --> 00:24:23,540
or on my mac rather I've brew installed

00:24:19,430 --> 00:24:25,280
tiger VNC viewer any any VNC client will

00:24:23,540 --> 00:24:29,390
do and i'm running this on localhost

00:24:25,280 --> 00:24:34,640
5901 you'll recall that I i forwarded

00:24:29,390 --> 00:24:36,320
port 5900 of the the vagrant vm to port

00:24:34,640 --> 00:24:42,649
00:24:36,320 --> 00:24:44,090
Mac sorry for the little small I wasn't

00:24:42,649 --> 00:24:46,580
sure what kind of screen real estate I

00:24:44,090 --> 00:24:50,990
have to deal with but on the Left you'll

00:24:46,580 --> 00:24:57,350
see this is my BMC connection opened

00:24:50,990 --> 00:25:01,159
from my mac to the to the vagrant box on

00:24:57,350 --> 00:25:04,039
the right so I'll go ahead and run the

00:25:01,159 --> 00:25:05,809
same command Iran previously on the

00:25:04,039 --> 00:25:07,039
vagrant box and now on the left it's

00:25:05,809 --> 00:25:08,570
going to be a little squished up but

00:25:07,039 --> 00:25:13,039
hopefully I'll take my word for it that

00:25:08,570 --> 00:25:16,159
you'll see chrome and firefox actually

00:25:13,039 --> 00:25:18,019
open and execute these passing tests so

00:25:16,159 --> 00:25:21,799
there was chrome first and there's

00:25:18,019 --> 00:25:24,970
Firefox and all tests pass and then the

00:25:21,799 --> 00:25:24,970
browsers will close

00:25:29,990 --> 00:25:36,390
so again that that code is available at

00:25:33,360 --> 00:25:39,570
my github profile MDB polymer testing

00:25:36,390 --> 00:25:43,620
box in quick extra credit I also

00:25:39,570 --> 00:25:46,410
doctored up a solution for running in NW

00:25:43,620 --> 00:25:50,850
running and and testing both unit

00:25:46,410 --> 00:25:55,650
testing and in testing an NW desktop

00:25:50,850 --> 00:25:59,040
application on a similar box so as for

00:25:55,650 --> 00:26:00,870
next steps you know I'm hoping that you

00:25:59,040 --> 00:26:03,870
could see how you could kind of adopt

00:26:00,870 --> 00:26:07,680
maybe some of what I've proof of concept

00:26:03,870 --> 00:26:09,780
adhere to spin up some cloud

00:26:07,680 --> 00:26:12,390
infrastructure or something during your

00:26:09,780 --> 00:26:14,490
own builds maybe a leveraging AWS

00:26:12,390 --> 00:26:17,550
digital ocean or OpenStack or some

00:26:14,490 --> 00:26:21,180
comparable cloud provider also have a

00:26:17,550 --> 00:26:24,300
harebrained idea for how similar vm

00:26:21,180 --> 00:26:28,590
could be spun up and provisioned for a

00:26:24,300 --> 00:26:30,510
building and unit testing actionscript I

00:26:28,590 --> 00:26:31,830
think this also opens a lot of

00:26:30,510 --> 00:26:33,840
opportunities for some advanced web

00:26:31,830 --> 00:26:36,930
scraping for those wacky websites which

00:26:33,840 --> 00:26:40,500
just don't seem to behave at all in

00:26:36,930 --> 00:26:42,900
Phantom Jas for whatever reason and it

00:26:40,500 --> 00:26:45,150
also provides a path towards headless

00:26:42,900 --> 00:26:48,930
functional testing if if that's

00:26:45,150 --> 00:26:51,270
something that you're interested in so

00:26:48,930 --> 00:26:54,090
that's it thank you very much again on

00:26:51,270 --> 00:26:56,450
clap excitement on Twitter and MDB on

00:26:54,090 --> 00:26:56,450

YouTube URL: https://www.youtube.com/watch?v=aGIJWWKLzF8


