Title: JSConf 2015   Peter Piekarczyk
Publication date: 2015-06-17
Playlist: JSConf US 2015
Description: 
	
Captions: 
	00:00:13,919 --> 00:00:18,699
it was really exciting this is not only

00:00:16,689 --> 00:00:20,980
my first time speaking it's my first

00:00:18,699 --> 00:00:28,179
conference ever so I don't think I've

00:00:20,980 --> 00:00:29,560
been in front of a larger the largest

00:00:28,179 --> 00:00:32,640
group I've been in front of his like

00:00:29,560 --> 00:00:36,220
stand up for the last ten years so

00:00:32,640 --> 00:00:39,070
anyway my name is Peter pacar chick I'm

00:00:36,220 --> 00:00:40,870
a UI engineer at trunk club if I could

00:00:39,070 --> 00:00:42,940
go to the next slide I would oh there we

00:00:40,870 --> 00:00:45,039
go okay the UI engineer at trunk club

00:00:42,940 --> 00:00:46,719
and he haven't heard of us we can

00:00:45,039 --> 00:00:48,039
actually was stylist they'll talk to you

00:00:46,719 --> 00:00:51,160
about what you're looking for and what

00:00:48,039 --> 00:00:52,780
your kind of look is and then we'll send

00:00:51,160 --> 00:00:54,940
you a whole trunk full of clothing you

00:00:52,780 --> 00:00:56,859
keep what you like and you return what

00:00:54,940 --> 00:00:59,769
you don't like no subscription fees easy

00:00:56,859 --> 00:01:01,090
as that cool part is we build all our

00:00:59,769 --> 00:01:03,010
internal tools from the ground up

00:01:01,090 --> 00:01:04,750
everything from our catalogue the

00:01:03,010 --> 00:01:06,729
warehouse to all of our internal tools

00:01:04,750 --> 00:01:10,390
it's great and it's cool working with

00:01:06,729 --> 00:01:11,530
physical products too so we're located

00:01:10,390 --> 00:01:13,690
in chicago and if you're ever around

00:01:11,530 --> 00:01:17,200
feel free to stop by we're very nice

00:01:13,690 --> 00:01:18,940
people all right getting started so how

00:01:17,200 --> 00:01:22,750
many people here use or have used

00:01:18,940 --> 00:01:24,399
backbone in production oh great nice now

00:01:22,750 --> 00:01:26,229
how many of you have wanted to use react

00:01:24,399 --> 00:01:28,270
for one reason or another but haven't

00:01:26,229 --> 00:01:31,690
had the time or resources to get started

00:01:28,270 --> 00:01:34,270
there's always a p.m. or someone family

00:01:31,690 --> 00:01:37,840
member that like no you can't work after

00:01:34,270 --> 00:01:39,220
work yeah okay go home right there's

00:01:37,840 --> 00:01:40,989
always something that comes up that

00:01:39,220 --> 00:01:43,929
stops us from doing that and we can't

00:01:40,989 --> 00:01:46,239
just like flip things over one day write

00:01:43,929 --> 00:01:48,190
those things just don't happen a lot of

00:01:46,239 --> 00:01:50,140
what you see here will be coffee script

00:01:48,190 --> 00:01:52,030
or sort of pseudo CoffeeScript because

00:01:50,140 --> 00:01:54,489
that's what we've been using but

00:01:52,030 --> 00:01:56,709
otherwise i'd recommend Babel which

00:01:54,489 --> 00:01:59,920
comes with es6 and j sx right out of the

00:01:56,709 --> 00:02:02,410
box it's freaking fantastic so let's

00:01:59,920 --> 00:02:04,690
start with trunk club past and present

00:02:02,410 --> 00:02:06,940
we have the stack called brunch with

00:02:04,690 --> 00:02:10,060
panache a modular approach to building

00:02:06,940 --> 00:02:11,739
web apps with brunch this was created by

00:02:10,060 --> 00:02:15,930
someone at your own club named josh

00:02:11,739 --> 00:02:19,239
named josh abdus and it's been fantastic

00:02:15,930 --> 00:02:21,370
more or less its backbone Chaplin jquery

00:02:19,239 --> 00:02:23,230
brunch and coffee script for those of

00:02:21,370 --> 00:02:25,870
you that haven't heard of chaplain or

00:02:23,230 --> 00:02:28,650
brunch it's very similar to

00:02:25,870 --> 00:02:31,569
marionette it offers controllers

00:02:28,650 --> 00:02:34,360
automatic memory management rails like

00:02:31,569 --> 00:02:36,159
routes and custom routers common JSN AMD

00:02:34,360 --> 00:02:39,069
support all those cool things that we've

00:02:36,159 --> 00:02:40,330
always wanted as front-end developers it

00:02:39,069 --> 00:02:43,420
was like the dream framework for the

00:02:40,330 --> 00:02:45,849
longest time brunch is more or less

00:02:43,420 --> 00:02:48,280
similar to gulp inria our gulp and grunt

00:02:45,849 --> 00:02:50,440
it's a build tool it takes care of all

00:02:48,280 --> 00:02:51,970
the minification and the stuff that we

00:02:50,440 --> 00:02:54,970
don't really worry about anymore that

00:02:51,970 --> 00:02:56,650
used to be a big deal right chaplain

00:02:54,970 --> 00:02:59,680
also comes with a mediator which is our

00:02:56,650 --> 00:03:01,599
pub sub communication between apps so

00:02:59,680 --> 00:03:04,180
it's great for like moving member data

00:03:01,599 --> 00:03:05,859
around for example we like to automate

00:03:04,180 --> 00:03:08,890
all of our process redundancies the

00:03:05,859 --> 00:03:11,019
philosophy is onion apps peel back the

00:03:08,890 --> 00:03:13,510
layers as you need to let's avoid

00:03:11,019 --> 00:03:16,840
complexity let's fatter let's follow

00:03:13,510 --> 00:03:21,030
patterns and scale and it's what led us

00:03:16,840 --> 00:03:24,790
build great apps really really quickly

00:03:21,030 --> 00:03:26,560
so here we go humble SOA trunk club

00:03:24,790 --> 00:03:29,280
beginnings we had a service-oriented

00:03:26,560 --> 00:03:33,609
architecture and two of these bwp apps

00:03:29,280 --> 00:03:36,130
simple API calls only a few services not

00:03:33,609 --> 00:03:38,739
much to go wrong it was fun those were

00:03:36,130 --> 00:03:41,680
great days but as you can imagine things

00:03:38,739 --> 00:03:43,389
change very very quickly the company

00:03:41,680 --> 00:03:45,549
starts growing so did the business

00:03:43,389 --> 00:03:48,280
requirements and we kept building and

00:03:45,549 --> 00:03:50,980
building and building we had more single

00:03:48,280 --> 00:03:54,629
page apps we had more api's and we had

00:03:50,980 --> 00:03:57,459
more dependencies we were making API

00:03:54,629 --> 00:03:59,260
excuse me we're making API calls to

00:03:57,459 --> 00:04:01,329
numerous services and stuff started

00:03:59,260 --> 00:04:04,049
getting hectic we want to improve that

00:04:01,329 --> 00:04:06,069
member experience we built wardrobes

00:04:04,049 --> 00:04:08,019
recommendations a whole freakin

00:04:06,069 --> 00:04:10,209
warehouse that all work together in one

00:04:08,019 --> 00:04:13,540
way shape or form the technology behind

00:04:10,209 --> 00:04:15,910
it is great and it worked great for a

00:04:13,540 --> 00:04:18,820
long time until it stopped working that

00:04:15,910 --> 00:04:21,010
great and that's when that's when we had

00:04:18,820 --> 00:04:23,410
some issues we need to take care of we

00:04:21,010 --> 00:04:26,050
have a fantastic group of engineers but

00:04:23,410 --> 00:04:28,690
as a uit we wanted to try to solve those

00:04:26,050 --> 00:04:30,760
issues on our own so what was happening

00:04:28,690 --> 00:04:33,539
we were making numerous API calls and

00:04:30,760 --> 00:04:37,780
doing a lot of hydration client-side and

00:04:33,539 --> 00:04:39,620
it worked but the thing is we were doing

00:04:37,780 --> 00:04:42,050
a lot of useless rerun during we

00:04:39,620 --> 00:04:44,210
increased load times and we had like the

00:04:42,050 --> 00:04:45,830
craziest flame chart spikes like we

00:04:44,210 --> 00:04:48,470
needed to fix that as engineers we

00:04:45,830 --> 00:04:50,270
didn't like that stuff and then from the

00:04:48,470 --> 00:04:52,820
business side to our users were

00:04:50,270 --> 00:04:55,130
complaining or stylists same with our

00:04:52,820 --> 00:04:58,330
leadership and we were dedicating a lot

00:04:55,130 --> 00:05:00,440
of time for render ordered debugging and

00:04:58,330 --> 00:05:02,630
optimizations and it was great it was

00:05:00,440 --> 00:05:04,850
fun but we wanted to spend less time

00:05:02,630 --> 00:05:07,760
debugging and more time building cool

00:05:04,850 --> 00:05:10,040
software like we all do patches weren't

00:05:07,760 --> 00:05:14,949
really doing the trick anymore so what

00:05:10,040 --> 00:05:17,380
could we do react to the rescue

00:05:14,949 --> 00:05:21,080
replacing backbone views with react

00:05:17,380 --> 00:05:24,110
instant gratification I'm sure most of

00:05:21,080 --> 00:05:26,900
you know what react is by now but just

00:05:24,110 --> 00:05:29,630
as a quick recap reusable encapsulated

00:05:26,900 --> 00:05:31,550
components it's got a fantastic dipping

00:05:29,630 --> 00:05:33,979
algorithm that rear enders only what it

00:05:31,550 --> 00:05:36,350
needs to rerender which it which is what

00:05:33,979 --> 00:05:38,150
makes it so fast we love the deck load

00:05:36,350 --> 00:05:41,000
of style that makes it easy to focus on

00:05:38,150 --> 00:05:42,500
the app itself rather than coming up

00:05:41,000 --> 00:05:44,960
with like nitty-gritty solutions to

00:05:42,500 --> 00:05:46,910
making things work we just say hey react

00:05:44,960 --> 00:05:48,740
we're going to give you some data render

00:05:46,910 --> 00:05:51,229
it you know we're not going to tell it

00:05:48,740 --> 00:05:53,810
how to do it and there was less mental

00:05:51,229 --> 00:05:56,630
overhead with bringing in templates and

00:05:53,810 --> 00:05:58,010
views together I know I know it's hard

00:05:56,630 --> 00:06:00,740
thinking about putting those two things

00:05:58,010 --> 00:06:02,570
together but trust me the world is great

00:06:00,740 --> 00:06:05,750
after a couple of components you guys

00:06:02,570 --> 00:06:08,000
will never go back and most importantly

00:06:05,750 --> 00:06:09,560
for the first time ever our backends

00:06:08,000 --> 00:06:12,740
were much more comfortable with working

00:06:09,560 --> 00:06:14,690
with our code video BP was fantastic

00:06:12,740 --> 00:06:17,780
from a UI perspective it did everything

00:06:14,690 --> 00:06:20,090
we wanted it to do but our backends

00:06:17,780 --> 00:06:21,860
didn't want to work with this or that

00:06:20,090 --> 00:06:23,570
and it's not because they didn't want to

00:06:21,860 --> 00:06:25,880
it's because it did get confusing you've

00:06:23,570 --> 00:06:27,470
had to invest a lot of time up front to

00:06:25,880 --> 00:06:30,650
understand how the framework works for

00:06:27,470 --> 00:06:32,479
it to be effective right with react we

00:06:30,650 --> 00:06:34,669
were able to move a lot of that stuff

00:06:32,479 --> 00:06:36,680
over to the back ends and let them work

00:06:34,669 --> 00:06:39,080
on their apps as well without really

00:06:36,680 --> 00:06:40,820
interfering with the UI with the UI team

00:06:39,080 --> 00:06:41,840
so we're like more the experts they

00:06:40,820 --> 00:06:43,940
would come to if they need help

00:06:41,840 --> 00:06:46,400
otherwise they're building great stuff

00:06:43,940 --> 00:06:48,440
on their own too we started with a

00:06:46,400 --> 00:06:50,780
simple drop down and now we're up to

00:06:48,440 --> 00:06:52,760
about 80 components in each of our apps

00:06:50,780 --> 00:06:53,960
and everything keeps growing our

00:06:52,760 --> 00:06:56,509
components aren't

00:06:53,960 --> 00:06:59,000
sarily huge but for the ones that are

00:06:56,509 --> 00:07:00,979
and have a ton of internal state react

00:06:59,000 --> 00:07:05,180
makes it much easier to manage and

00:07:00,979 --> 00:07:06,470
that's just like less headaches so here

00:07:05,180 --> 00:07:09,380
we are I don't know how well you can see

00:07:06,470 --> 00:07:11,240
that but this is everything this is the

00:07:09,380 --> 00:07:12,800
view in the template combined it might

00:07:11,240 --> 00:07:16,340
look a little crazy but you have to

00:07:12,800 --> 00:07:19,310
remember it's not HTML it's jsx which is

00:07:16,340 --> 00:07:22,220
JavaScript and everything just made

00:07:19,310 --> 00:07:23,900
sense so in this case I might be getting

00:07:22,220 --> 00:07:25,370
ahead of myself here with props but

00:07:23,900 --> 00:07:27,530
you've got a header then you've got a

00:07:25,370 --> 00:07:30,770
logo and then things just trickle down

00:07:27,530 --> 00:07:32,810
accordingly our code became much more

00:07:30,770 --> 00:07:34,970
manageable that's a lot easier to

00:07:32,810 --> 00:07:37,039
understand then Oh open up this view

00:07:34,970 --> 00:07:39,410
that corresponds to this template but

00:07:37,039 --> 00:07:41,000
then there's this like oh you know now

00:07:39,410 --> 00:07:42,650
we use this like external method that

00:07:41,000 --> 00:07:44,539
you need to download to know more

00:07:42,650 --> 00:07:46,820
mind-boggling things everything's right

00:07:44,539 --> 00:07:50,030
here in front of you and simple easy to

00:07:46,820 --> 00:07:55,190
use files our backends our designers

00:07:50,030 --> 00:07:58,759
everyone was a huge fan so speaking of

00:07:55,190 --> 00:08:01,550
design it helped with CSS to it made

00:07:58,759 --> 00:08:03,470
much more sense so what we started doing

00:08:01,550 --> 00:08:06,560
is we started modeling our CSS classes

00:08:03,470 --> 00:08:08,389
after our reactive components it's much

00:08:06,560 --> 00:08:11,000
easier to traverse CSS and make changes

00:08:08,389 --> 00:08:13,909
and designers are more comfortable

00:08:11,000 --> 00:08:16,219
making those changes to there was a time

00:08:13,909 --> 00:08:19,330
where you'd have you know thousands of

00:08:16,219 --> 00:08:21,680
lines for a couple of simple things but

00:08:19,330 --> 00:08:24,440
did it really make sense was it

00:08:21,680 --> 00:08:26,830
effective was it maintainable those were

00:08:24,440 --> 00:08:30,380
questions that we asked ourselves a new

00:08:26,830 --> 00:08:32,300
head we knew the answers to we needed to

00:08:30,380 --> 00:08:34,190
make a change so now we have a

00:08:32,300 --> 00:08:36,620
one-to-one relationship between a react

00:08:34,190 --> 00:08:38,839
component and CSS and it's helped all of

00:08:36,620 --> 00:08:41,450
our apps grow it just makes sense it's

00:08:38,839 --> 00:08:43,669
as easy as going into sublime searching

00:08:41,450 --> 00:08:45,680
for a class letting that designer change

00:08:43,669 --> 00:08:47,450
that information and then if they need

00:08:45,680 --> 00:08:49,160
to find it in the react component they

00:08:47,450 --> 00:08:50,930
can easily open up that file and make

00:08:49,160 --> 00:08:52,820
the change themselves without relying on

00:08:50,930 --> 00:08:55,339
another you I resource to make it happen

00:08:52,820 --> 00:08:58,820
our design and code became much more

00:08:55,339 --> 00:09:02,000
manageable the best part about all of

00:08:58,820 --> 00:09:05,300
this is there's no magic involved it's

00:09:02,000 --> 00:09:07,640
just good JavaScript right I'm guilty of

00:09:05,300 --> 00:09:09,170
saying this but I had to look up call by

00:09:07,640 --> 00:09:10,850
and apply because when's the last time

00:09:09,170 --> 00:09:13,340
you had to use that in like a framework

00:09:10,850 --> 00:09:16,430
like backbone I haven't had a user for a

00:09:13,340 --> 00:09:19,070
while all those frameworks abstracted

00:09:16,430 --> 00:09:21,140
all those awesome layers of JavaScript

00:09:19,070 --> 00:09:22,670
lets you build cool things but then you

00:09:21,140 --> 00:09:25,760
forget about the most important stuff

00:09:22,670 --> 00:09:27,500
right so react kind of reintroduces you

00:09:25,760 --> 00:09:30,140
to those concepts and lets you build

00:09:27,500 --> 00:09:33,500
cool stuff and sort of foreshadowing

00:09:30,140 --> 00:09:36,410
here handle click bind if you haven't

00:09:33,500 --> 00:09:38,000
used react yet you're going to like this

00:09:36,410 --> 00:09:39,890
this will help you a lot remember the

00:09:38,000 --> 00:09:41,960
slide because I did run into a couple

00:09:39,890 --> 00:09:45,710
issues with this in the past but now

00:09:41,960 --> 00:09:47,660
it's awesome anyway we came up with the

00:09:45,710 --> 00:09:49,640
whole migration process because like I

00:09:47,660 --> 00:09:52,700
said we can't just flip the switch turn

00:09:49,640 --> 00:09:54,890
stuff on and let our users see all this

00:09:52,700 --> 00:09:56,990
broken code right so we started with

00:09:54,890 --> 00:09:59,150
small components things that don't

00:09:56,990 --> 00:10:00,740
really have a lot of data things that we

00:09:59,150 --> 00:10:04,880
just wanted to try out and see how they

00:10:00,740 --> 00:10:06,980
worked random pages we use the mixin if

00:10:04,880 --> 00:10:08,990
you haven't used react a mixin is sort

00:10:06,980 --> 00:10:10,700
of like a plug-in its reacts answer to

00:10:08,990 --> 00:10:13,340
sharing code between multiple components

00:10:10,700 --> 00:10:14,390
I know the components are reusable but

00:10:13,340 --> 00:10:16,810
there are times where you don't really

00:10:14,390 --> 00:10:19,220
need a component to make stuff happen

00:10:16,810 --> 00:10:20,840
form validation for example you could

00:10:19,220 --> 00:10:23,540
have a simple mix in with the regex

00:10:20,840 --> 00:10:27,410
involved and apply classes accordingly

00:10:23,540 --> 00:10:29,090
or apply state accordingly we use

00:10:27,410 --> 00:10:31,340
something called the ria backbone react

00:10:29,090 --> 00:10:33,140
component which i'll talk to talk to you

00:10:31,340 --> 00:10:34,820
about more in a second and that glues

00:10:33,140 --> 00:10:36,950
backbone models and collections and to

00:10:34,820 --> 00:10:39,020
react components once it mount once it's

00:10:36,950 --> 00:10:40,640
mounted a rapper will listen to those

00:10:39,020 --> 00:10:43,570
changes and automatically set your

00:10:40,640 --> 00:10:46,340
component state for you freaking awesome

00:10:43,570 --> 00:10:48,470
lastly we wanted to get familiar with

00:10:46,340 --> 00:10:50,510
the API there are things like initialize

00:10:48,470 --> 00:10:53,120
and remove and backbone we wanted to see

00:10:50,510 --> 00:10:54,440
if we can match to in react just to kind

00:10:53,120 --> 00:10:56,330
of get a feeling for it and really

00:10:54,440 --> 00:10:58,640
understand we had component did mount

00:10:56,330 --> 00:11:00,500
component will unmount unmount component

00:10:58,640 --> 00:11:03,580
at node those are all great things that

00:11:00,500 --> 00:11:06,350
will help you kind of transition over

00:11:03,580 --> 00:11:08,270
and most importantly convert your parent

00:11:06,350 --> 00:11:10,340
view to use react I'll create element

00:11:08,270 --> 00:11:12,920
instead so you're rendering all these

00:11:10,340 --> 00:11:15,470
views out in backbone and you need some

00:11:12,920 --> 00:11:17,360
sort of a tie some sort of adapter to

00:11:15,470 --> 00:11:20,000
make those changes happen for you and

00:11:17,360 --> 00:11:21,320
react and that's when we came up with

00:11:20,000 --> 00:11:23,270
the react backbone adapter

00:11:21,320 --> 00:11:25,360
this was actually made by Jason block

00:11:23,270 --> 00:11:29,450
who's actually in the crowd hey Jay said

00:11:25,360 --> 00:11:33,230
it's a very simple it's a very simple

00:11:29,450 --> 00:11:36,560
set of utilities that helps us attach

00:11:33,230 --> 00:11:39,860
that component to the backbone view so

00:11:36,560 --> 00:11:42,050
we pass in an element you pass in a

00:11:39,860 --> 00:11:44,540
container and then finally an optional

00:11:42,050 --> 00:11:49,340
call back you don't necessarily need the

00:11:44,540 --> 00:11:52,990
call back but it's there just in case so

00:11:49,340 --> 00:11:56,690
here we are we create identify attach

00:11:52,990 --> 00:11:58,970
render and then finally disposed so we

00:11:56,690 --> 00:12:01,550
create whatever element you'd like we

00:11:58,970 --> 00:12:03,980
had a react reclast to identify within

00:12:01,550 --> 00:12:06,230
the Dom it's more of a sanity check for

00:12:03,980 --> 00:12:08,420
us we apply classes to all of our

00:12:06,230 --> 00:12:10,010
backbone views it was sort of a good

00:12:08,420 --> 00:12:12,170
habit to bring that over when we were

00:12:10,010 --> 00:12:14,270
debugging we know right away oh that

00:12:12,170 --> 00:12:16,910
must be coming from react let's check

00:12:14,270 --> 00:12:19,130
the react folder had a time and so we

00:12:16,910 --> 00:12:21,950
don't run into any weird issues we then

00:12:19,130 --> 00:12:24,410
append that element to the backbone view

00:12:21,950 --> 00:12:26,450
and then let react go from there just

00:12:24,410 --> 00:12:29,450
render everything call the callback if

00:12:26,450 --> 00:12:31,970
you pass one otherwise react do your

00:12:29,450 --> 00:12:35,270
thing you're great added finally

00:12:31,970 --> 00:12:38,180
disposed so not only do we unmount the

00:12:35,270 --> 00:12:40,310
react component remove from the Dom you

00:12:38,180 --> 00:12:41,840
can't forget about the container one

00:12:40,310 --> 00:12:43,760
with three actually let's remove that as

00:12:41,840 --> 00:12:48,050
well it just makes it easier you don't

00:12:43,760 --> 00:12:52,250
want that stuff lingering around so like

00:12:48,050 --> 00:12:54,530
I said the use chaplain and it delivers

00:12:52,250 --> 00:12:56,840
and it gives us controller so here we

00:12:54,530 --> 00:12:58,820
are we do a lot of stuff with member

00:12:56,840 --> 00:13:00,650
conversion and onboarding it's a huge

00:12:58,820 --> 00:13:02,840
part of my team out on the member facing

00:13:00,650 --> 00:13:06,020
team and we want to convert as many

00:13:02,840 --> 00:13:07,430
users as possible right in this case

00:13:06,020 --> 00:13:10,310
here we are we've got a sign-up header

00:13:07,430 --> 00:13:13,070
just a simple logo that stretches across

00:13:10,310 --> 00:13:15,800
the top of your screen how can we get

00:13:13,070 --> 00:13:18,560
that into the browser in a nice way

00:13:15,800 --> 00:13:21,550
without freaking out too much so here we

00:13:18,560 --> 00:13:24,170
go we use common J house we require that

00:13:21,550 --> 00:13:25,700
module and then we create an element

00:13:24,170 --> 00:13:28,010
with it sign up header as you can see

00:13:25,700 --> 00:13:30,020
here there's one thing here that may

00:13:28,010 --> 00:13:32,210
look a little weird and that's the reuse

00:13:30,020 --> 00:13:34,760
it's it's a chaplain composition

00:13:32,210 --> 00:13:36,470
function what that lets us do is

00:13:34,760 --> 00:13:38,690
it grants us the ability to reuse data

00:13:36,470 --> 00:13:40,760
and views beyond one controller action

00:13:38,690 --> 00:13:43,310
it's a nice performance perk that we get

00:13:40,760 --> 00:13:45,890
right out of the box so then like I said

00:13:43,310 --> 00:13:48,200
element container and call back we've

00:13:45,890 --> 00:13:51,530
got a sign-up header we've got a simple

00:13:48,200 --> 00:13:53,090
utility function to get whatever that

00:13:51,530 --> 00:13:55,190
header funk or whatever that wherever

00:13:53,090 --> 00:13:57,170
that header lies we kind of query it

00:13:55,190 --> 00:13:59,660
it's it's basically query selector

00:13:57,170 --> 00:14:03,230
behind the scenes and then the call back

00:13:59,660 --> 00:14:05,380
if you need it react gives you component

00:14:03,230 --> 00:14:07,430
did mount if you need some sort of

00:14:05,380 --> 00:14:08,960
utility method and you want to talk to

00:14:07,430 --> 00:14:10,910
something but if you're looking for more

00:14:08,960 --> 00:14:13,370
control via backbone that's what the

00:14:10,910 --> 00:14:15,370
callback is therefore I don't want to

00:14:13,370 --> 00:14:17,360
get too far ahead of myself but as

00:14:15,370 --> 00:14:19,760
engineers we always want to move forward

00:14:17,360 --> 00:14:22,610
and so we started coming up with a react

00:14:19,760 --> 00:14:25,310
backbone wrapper what it does is it

00:14:22,610 --> 00:14:27,290
takes the adapt to the next level with

00:14:25,310 --> 00:14:29,780
the adapter we're still using backbone

00:14:27,290 --> 00:14:33,140
views we wanted to get rid of that

00:14:29,780 --> 00:14:36,530
completely so the react backbone wrapper

00:14:33,140 --> 00:14:38,720
makes an appt root level react

00:14:36,530 --> 00:14:40,970
components and that completely releases

00:14:38,720 --> 00:14:42,920
chaplain and all of the features that

00:14:40,970 --> 00:14:45,470
come with it and let's react take care

00:14:42,920 --> 00:14:47,780
of the whole show I think this is what

00:14:45,470 --> 00:14:50,330
everyone loves about it because it was

00:14:47,780 --> 00:14:52,940
so simple to insert and the ideas are

00:14:50,330 --> 00:14:55,100
more or less the same but we extend the

00:14:52,940 --> 00:14:57,650
adapter what we do is we check for

00:14:55,100 --> 00:15:01,550
amounted component we check for updates

00:14:57,650 --> 00:15:02,960
we pass in props which are properties

00:15:01,550 --> 00:15:05,810
which we'll talk about in just a second

00:15:02,960 --> 00:15:07,430
we find the note in the Dom apply that

00:15:05,810 --> 00:15:10,010
identifier class that's how much ADA to

00:15:07,430 --> 00:15:13,010
reacted rapper and then just render and

00:15:10,010 --> 00:15:15,980
then we're good to go no delays no

00:15:13,010 --> 00:15:17,330
performance lags it just works we're

00:15:15,980 --> 00:15:18,410
still in the process of tweaking this so

00:15:17,330 --> 00:15:21,970
I don't want to get too far ahead of

00:15:18,410 --> 00:15:26,530
myself but it's worked great thus far

00:15:21,970 --> 00:15:28,690
and here we are our sign up header

00:15:26,530 --> 00:15:31,400
component since we are using

00:15:28,690 --> 00:15:34,280
CoffeeScript you have to use something

00:15:31,400 --> 00:15:36,830
like CJ SX it works great but there are

00:15:34,280 --> 00:15:39,860
bugs with it so if you're looking to try

00:15:36,830 --> 00:15:43,940
something new like I said go with Babel

00:15:39,860 --> 00:15:45,350
it's been awesome here we go like I said

00:15:43,940 --> 00:15:46,820
don't freak out about the template in

00:15:45,350 --> 00:15:48,680
view it's okay we're not doing much

00:15:46,820 --> 00:15:51,680
javascript manipulation here

00:15:48,680 --> 00:15:54,470
but we've got our render method and then

00:15:51,680 --> 00:15:55,910
we wrap a header around just the trunk

00:15:54,470 --> 00:16:01,250
club imagine that being a logo for

00:15:55,910 --> 00:16:02,570
example super simple super basic but you

00:16:01,250 --> 00:16:04,700
know we want to do some more creative

00:16:02,570 --> 00:16:06,290
stuff right we want to pass down data we

00:16:04,700 --> 00:16:09,890
want to see some interaction we want to

00:16:06,290 --> 00:16:12,080
see you know cool things happen so we

00:16:09,890 --> 00:16:16,220
pass down data multiple models and

00:16:12,080 --> 00:16:18,770
collections as props a perhaps perhaps

00:16:16,220 --> 00:16:21,140
are basically objects that react lets

00:16:18,770 --> 00:16:23,870
you play around with and the mixing that

00:16:21,140 --> 00:16:27,320
we're using kind of requires them so

00:16:23,870 --> 00:16:29,510
here we are we're namespacing model for

00:16:27,320 --> 00:16:31,610
member and stylists and then we're

00:16:29,510 --> 00:16:33,230
grabbing some more information from them

00:16:31,610 --> 00:16:35,209
out of with and then passing it through

00:16:33,230 --> 00:16:38,570
as a collection we've got addresses and

00:16:35,209 --> 00:16:41,180
credit cards for example so what are

00:16:38,570 --> 00:16:43,149
props I know this isn't a react talk but

00:16:41,180 --> 00:16:45,290
it's great to go over these things right

00:16:43,149 --> 00:16:47,360
react props or properties that are

00:16:45,290 --> 00:16:49,250
received from above and are immutable as

00:16:47,360 --> 00:16:51,200
far as the component is concerned it's

00:16:49,250 --> 00:16:55,040
short for properties it's commits

00:16:51,200 --> 00:16:57,290
component configuration a component

00:16:55,040 --> 00:16:58,760
can't change its own props but it's

00:16:57,290 --> 00:17:02,240
responsible for the props of its

00:16:58,760 --> 00:17:04,010
children and while we're at it let's

00:17:02,240 --> 00:17:07,069
just go over state too because they play

00:17:04,010 --> 00:17:09,110
a great role together state starts with

00:17:07,069 --> 00:17:11,059
a default value in a component mounts

00:17:09,110 --> 00:17:13,189
and then suffers for mutations in time

00:17:11,059 --> 00:17:14,990
mostly generated from user events

00:17:13,189 --> 00:17:17,030
submitting a form clicking a button

00:17:14,990 --> 00:17:19,750
changing the page anything that user

00:17:17,030 --> 00:17:22,429
interacts with should always be state

00:17:19,750 --> 00:17:24,860
there's a great way to kind of keep

00:17:22,429 --> 00:17:26,390
track of that components manage its own

00:17:24,860 --> 00:17:28,610
state internally you can think of them

00:17:26,390 --> 00:17:30,410
you can think of state as private it

00:17:28,610 --> 00:17:33,440
doesn't affect the state of its children

00:17:30,410 --> 00:17:36,309
a component can't change its own props

00:17:33,440 --> 00:17:38,840
but it could change its own States a

00:17:36,309 --> 00:17:40,910
component can't change a child's prop

00:17:38,840 --> 00:17:43,250
component can change a child's prop

00:17:40,910 --> 00:17:46,360
before passing them down but it can't

00:17:43,250 --> 00:17:49,730
change its own I hope that makes sense

00:17:46,360 --> 00:17:52,910
in any case here we are let's pass down

00:17:49,730 --> 00:17:55,400
some data so as you saw earlier we were

00:17:52,910 --> 00:17:58,040
passing in addresses and credit cards

00:17:55,400 --> 00:18:00,470
here we are we want to map over the

00:17:58,040 --> 00:18:02,210
addresses we have a separate address

00:18:00,470 --> 00:18:04,490
component living somewhere

00:18:02,210 --> 00:18:07,850
and we're passing in a key prop and an

00:18:04,490 --> 00:18:09,670
address-- prop this is what I was

00:18:07,850 --> 00:18:12,950
talking about when you can pass down

00:18:09,670 --> 00:18:14,480
props to other sorts of components this

00:18:12,950 --> 00:18:16,280
is where you would make the mutation do

00:18:14,480 --> 00:18:19,370
whatever you have to do before the

00:18:16,280 --> 00:18:20,960
component below it gets it so like I

00:18:19,370 --> 00:18:23,990
said consuming the address collection

00:18:20,960 --> 00:18:27,830
mapping them over in our account profile

00:18:23,990 --> 00:18:31,340
I'll mention this to pro tip passing a

00:18:27,830 --> 00:18:33,800
key whenever you do a map its reacts way

00:18:31,340 --> 00:18:35,390
of doing a reconciliation making sure

00:18:33,800 --> 00:18:37,070
there's nothing weird that happens it

00:18:35,390 --> 00:18:39,200
will ensure that any child within that

00:18:37,070 --> 00:18:41,710
key will be ordered reordered instead of

00:18:39,200 --> 00:18:44,870
clobbered or destroyed instead of reused

00:18:41,710 --> 00:18:46,330
so it's important to have even if you

00:18:44,870 --> 00:18:49,370
forget that after this presentation

00:18:46,330 --> 00:18:51,860
react is a really good job with error

00:18:49,370 --> 00:18:53,690
messages it'll console everything out

00:18:51,860 --> 00:18:56,600
and let you know exactly what you should

00:18:53,690 --> 00:19:01,130
stack overflow or Google for so don't

00:18:56,600 --> 00:19:03,440
worry about it too much now we've passed

00:19:01,130 --> 00:19:05,540
down props we talked about state but the

00:19:03,440 --> 00:19:07,850
most important part of this is how does

00:19:05,540 --> 00:19:09,770
react know that our model has been

00:19:07,850 --> 00:19:11,780
updated or we change something or our

00:19:09,770 --> 00:19:13,610
collections been updated this is where

00:19:11,780 --> 00:19:15,920
the backbone react component mixin comes

00:19:13,610 --> 00:19:18,770
from it'll glue your backbone model and

00:19:15,920 --> 00:19:21,320
collections and to react components this

00:19:18,770 --> 00:19:24,170
was made by jose miguel hayes and it's

00:19:21,320 --> 00:19:25,790
been a fantastic part of our workflow so

00:19:24,170 --> 00:19:27,110
once your component is mounted a rapper

00:19:25,790 --> 00:19:29,330
starts listening in the models and

00:19:27,110 --> 00:19:31,130
collection changes to automatically set

00:19:29,330 --> 00:19:35,030
components stave and the cheap you I

00:19:31,130 --> 00:19:38,300
binding through reactive updates here's

00:19:35,030 --> 00:19:39,950
a very simple example get model member

00:19:38,300 --> 00:19:42,020
is sinking if it's sinking let's show a

00:19:39,950 --> 00:19:44,270
loading indicator otherwise let's load

00:19:42,020 --> 00:19:46,070
that member information it's super

00:19:44,270 --> 00:19:51,130
simple and it's that easy there's no

00:19:46,070 --> 00:19:54,560
weird things happening it just works so

00:19:51,130 --> 00:19:56,990
um this mix and gives us some awesome

00:19:54,560 --> 00:19:59,510
helper methods because as you recall

00:19:56,990 --> 00:20:01,250
props are immutable you can't change

00:19:59,510 --> 00:20:02,930
them but sometimes you want to update

00:20:01,250 --> 00:20:04,400
that model you want to update a first

00:20:02,930 --> 00:20:06,350
and last name you want to update an

00:20:04,400 --> 00:20:09,740
email address you have to change that

00:20:06,350 --> 00:20:12,290
stuff so what we get is two really great

00:20:09,740 --> 00:20:14,480
helper functions this not yet model and

00:20:12,290 --> 00:20:15,530
this dock collection or this not get

00:20:14,480 --> 00:20:18,080
collection

00:20:15,530 --> 00:20:21,080
when you're using just one model you can

00:20:18,080 --> 00:20:23,480
just do this dot get model get name and

00:20:21,080 --> 00:20:25,220
when you're using numerous you kind of

00:20:23,480 --> 00:20:28,910
just use that namespace we talked about

00:20:25,220 --> 00:20:32,030
previously get modeled member get name

00:20:28,910 --> 00:20:34,520
and then setting works the same way I

00:20:32,030 --> 00:20:36,430
get model that address that set zip code

00:20:34,520 --> 00:20:40,190
and then whatever your zip code maybe

00:20:36,430 --> 00:20:42,230
get collection same idea you saw that

00:20:40,190 --> 00:20:49,040
earlier and we were looping over an

00:20:42,230 --> 00:20:51,290
array of models so there are some

00:20:49,040 --> 00:20:53,630
gotchas that we faced especially if you

00:20:51,290 --> 00:20:57,500
are using CoffeeScript like i said

00:20:53,630 --> 00:20:58,970
earlier CJ SX is great if you need to

00:20:57,500 --> 00:21:00,800
get something up and running you need to

00:20:58,970 --> 00:21:02,720
get moving you don't have time to start

00:21:00,800 --> 00:21:05,540
rewriting a nap but you want to use

00:21:02,720 --> 00:21:08,840
coffeescript Babel is much more robust

00:21:05,540 --> 00:21:11,300
if you can use it use it implicit

00:21:08,840 --> 00:21:13,250
returns in CoffeeScript sometimes those

00:21:11,300 --> 00:21:15,080
will bite you in the butt right remember

00:21:13,250 --> 00:21:16,940
to wrap a series of components in a

00:21:15,080 --> 00:21:19,970
parent div otherwise it won't render

00:21:16,940 --> 00:21:25,340
like you want it to since what react

00:21:19,970 --> 00:21:27,560
does is it renders or it renders the it

00:21:25,340 --> 00:21:29,240
returns the main component and if

00:21:27,560 --> 00:21:30,710
there's other things involved it just

00:21:29,240 --> 00:21:34,550
won't work out so you want to wrap

00:21:30,710 --> 00:21:36,710
everything in a parent div and then

00:21:34,550 --> 00:21:39,500
event handlers to we were getting this

00:21:36,710 --> 00:21:41,180
pesky pesky console dot log and we

00:21:39,500 --> 00:21:42,980
couldn't figure it out you know like

00:21:41,180 --> 00:21:45,140
we're not using prevent when clicking a

00:21:42,980 --> 00:21:47,900
button you get this weird oh stop using

00:21:45,140 --> 00:21:50,180
event return false like use a vent

00:21:47,900 --> 00:21:52,400
propping or event stop propagation a

00:21:50,180 --> 00:21:54,080
really weird message but that's because

00:21:52,400 --> 00:21:56,390
it's not because of what we were doing

00:21:54,080 --> 00:21:57,560
it's because what CJ sx was doing and

00:21:56,390 --> 00:22:01,430
what coffeescript was doing behind the

00:21:57,560 --> 00:22:07,850
scenes it will emit a warning so just

00:22:01,430 --> 00:22:10,040
look out for that so final thoughts this

00:22:07,850 --> 00:22:12,500
is all very temporary we don't plan to

00:22:10,040 --> 00:22:14,780
keep building our apps this way all of

00:22:12,500 --> 00:22:16,880
our newer single-page applications are

00:22:14,780 --> 00:22:18,800
more rebus flux and react applications

00:22:16,880 --> 00:22:22,060
that use es6 and all those fun things

00:22:18,800 --> 00:22:24,080
that we've been learning about so please

00:22:22,060 --> 00:22:26,660
once you get the once you get the

00:22:24,080 --> 00:22:28,070
ability to start building a new app with

00:22:26,660 --> 00:22:28,880
it it's great for now and it works

00:22:28,070 --> 00:22:32,060
fantastic

00:22:28,880 --> 00:22:33,530
but it can get sort of mingled sometimes

00:22:32,060 --> 00:22:36,200
so just keep that in mind once your apps

00:22:33,530 --> 00:22:38,750
do grow to just outrageous sizes and

00:22:36,200 --> 00:22:40,160
then I had the pleasure of meeting Joe

00:22:38,750 --> 00:22:44,090
Hudson I'm not sure if you're here

00:22:40,160 --> 00:22:45,890
anywhere Joe but he built this react

00:22:44,090 --> 00:22:49,040
backbone Nixon to I haven't had a chance

00:22:45,890 --> 00:22:50,480
to use it this week but it seems to be

00:22:49,040 --> 00:22:53,530
pretty awesome he seems to be a really

00:22:50,480 --> 00:22:55,970
smart guy so give that a shot as well

00:22:53,530 --> 00:22:59,680
all right everyone thank you that was

00:22:55,970 --> 00:22:59,680

YouTube URL: https://www.youtube.com/watch?v=X7njm67K6QA


