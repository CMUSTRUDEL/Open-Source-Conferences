Title: Kushagra Gour: 10 Commandments for Efficient CSS Architecture - CSSConf.Asia 2014
Publication date: 2015-02-05
Playlist: CSSConf.Asia 2014
Description: 
	CSS is a very funny language. That is something we all have realised at some point or the other while working with it. If not used correctly, a language used to make things look good can itself start looking bad and we can end up with CSS that is hard to manage and extend. My talk will be about 10 things which I have learnt from experience can make one’s CSS manageable and easy to extend, specially in large scale applications. Plus there is a fun CSS game for everyone to play along during the talk! Lets have fun with CSS together.

Kushagra is a front-end developer on VWO, a Wingify product, a CSS freak and author of Hint.css. He likes to create things that use existing concepts in new ways. Also sometimes called as the PJ king (beware!), he likes to beatbox and doodle sketches in spare time.

CSSConf.Asia - Bridging Design and Implementation. Amara Sanctuary, Singapore - 19 November 2014.

Source: http://2014.cssconf.asia/#speakers
Slides: https://github.com/chinchang/cssconf-asia

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:17,790 --> 00:00:21,750
but title of my talk is basically ten

00:00:20,100 --> 00:00:24,000
Commandant's for efficiency access

00:00:21,750 --> 00:00:26,310
architecture and you might have noticed

00:00:24,000 --> 00:00:30,270
the star on the ten and that says

00:00:26,310 --> 00:00:35,610
condition supply which will no you know

00:00:30,270 --> 00:00:38,010
that soon why it's there so let me start

00:00:35,610 --> 00:00:41,370
by introducing myself my name is cachaça

00:00:38,010 --> 00:00:44,640
record and I'm if known I am better

00:00:41,370 --> 00:00:47,550
known as chen changwu on web and i'm

00:00:44,640 --> 00:00:49,820
from india now just to clarify india is

00:00:47,550 --> 00:00:54,949
not just the land of snakes and tigers

00:00:49,820 --> 00:00:54,949
we recently started writing CSS also

00:00:56,269 --> 00:01:02,489
okay I'm a front-end developer by it's

00:01:00,210 --> 00:01:03,780
my day job and I work at a wonderful

00:01:02,489 --> 00:01:05,339
startup called wing if I

00:01:03,780 --> 00:01:06,479
so we basically develop an AV testing

00:01:05,339 --> 00:01:10,620
tool called visual website optimizer

00:01:06,479 --> 00:01:12,900
that I work on and in case you have

00:01:10,620 --> 00:01:15,990
already heard about me it is probably

00:01:12,900 --> 00:01:17,850
due to my open source projects oh one of

00:01:15,990 --> 00:01:20,220
which is a hindered CSS it basically of

00:01:17,850 --> 00:01:22,290
CSS - tape library and the second one is

00:01:20,220 --> 00:01:27,240
epistle art that lets you create pixel

00:01:22,290 --> 00:01:31,340
art using CSS alright so what is this

00:01:27,240 --> 00:01:33,990
talk going to be about so I've been

00:01:31,340 --> 00:01:36,210
doing front-end stuff for almost three

00:01:33,990 --> 00:01:38,820
years now and like we all do I have

00:01:36,210 --> 00:01:43,040
learnt a lot about issues we face in CSS

00:01:38,820 --> 00:01:46,170
and many solutions that we can use to

00:01:43,040 --> 00:01:48,330
prevent them and avoid them so this is

00:01:46,170 --> 00:01:49,320
going to be about those CSS stuff that I

00:01:48,330 --> 00:01:53,790
would like to share with you from

00:01:49,320 --> 00:01:56,820
experience and the target of this talk

00:01:53,790 --> 00:01:58,590
is to basically help us know certain

00:01:56,820 --> 00:02:00,990
things which make the CSS architecture

00:01:58,590 --> 00:02:04,140
efficient and by efficient I mean two

00:02:00,990 --> 00:02:05,760
things over here so first your CSS will

00:02:04,140 --> 00:02:09,780
be easy it should be easy to understand

00:02:05,760 --> 00:02:12,120
for you as well as anyone on new joining

00:02:09,780 --> 00:02:13,790
on your project and also it should be

00:02:12,120 --> 00:02:16,379
easy to extend in future

00:02:13,790 --> 00:02:19,730
so no more kale in style sprinkling

00:02:16,379 --> 00:02:22,470
which generally tends to be in our apps

00:02:19,730 --> 00:02:23,940
also I'm a first-time speaker at a

00:02:22,470 --> 00:02:26,579
conference and that is such a big

00:02:23,940 --> 00:02:28,170
conference and it's quite hot and I'm

00:02:26,579 --> 00:02:31,140
not really good at speaking and making

00:02:28,170 --> 00:02:33,210
presentations so I

00:02:31,140 --> 00:02:34,980
and basically added a game for some

00:02:33,210 --> 00:02:38,970
reason because I'm good at making games

00:02:34,980 --> 00:02:41,150
and this is a game which we can all play

00:02:38,970 --> 00:02:44,280
together at the end of the talk

00:02:41,150 --> 00:02:47,340
all right so commandment number one it

00:02:44,280 --> 00:02:50,570
says thy height shall remain greater

00:02:47,340 --> 00:02:53,100
than thy files as at all times

00:02:50,570 --> 00:02:56,580
it simply means keep your file size is

00:02:53,100 --> 00:02:58,410
small but why why do we need to make a

00:02:56,580 --> 00:03:01,140
file size is small so first thing it

00:02:58,410 --> 00:03:03,560
keep helps to keep your code modular and

00:03:01,140 --> 00:03:05,910
more modular code basically means

00:03:03,560 --> 00:03:07,980
whenever need you need to add something

00:03:05,910 --> 00:03:09,390
or you need to change something you can

00:03:07,980 --> 00:03:12,269
quickly search for it

00:03:09,390 --> 00:03:14,760
added you can search for the target spot

00:03:12,269 --> 00:03:18,000
where in the code you actually need to

00:03:14,760 --> 00:03:20,850
place your CSS because modularity will

00:03:18,000 --> 00:03:24,000
easily enable you to figure out which

00:03:20,850 --> 00:03:26,310
file or which module actually needs to

00:03:24,000 --> 00:03:28,550
be changed so things become quite fast

00:03:26,310 --> 00:03:31,110
in

00:03:28,550 --> 00:03:33,180
extensibility wise and what do we need

00:03:31,110 --> 00:03:34,769
to do it's a simple rule keep dividing

00:03:33,180 --> 00:03:36,840
and refactoring your files as and when

00:03:34,769 --> 00:03:38,760
they get too big so you just need to

00:03:36,840 --> 00:03:41,820
stop at points in your development and

00:03:38,760 --> 00:03:43,860
see what could be separated out into

00:03:41,820 --> 00:03:46,650
separate modules and just keep on doing

00:03:43,860 --> 00:03:49,140
it periodically so let's take a simple

00:03:46,650 --> 00:03:51,150
scenario when you you're starting a

00:03:49,140 --> 00:03:53,430
slight side project on the first day of

00:03:51,150 --> 00:03:56,190
Christmas and obviously you start with a

00:03:53,430 --> 00:03:58,590
single CSS file style of CSS as it is

00:03:56,190 --> 00:04:01,530
commonly known for for a single file and

00:03:58,590 --> 00:04:04,350
you pay for your CSS in just a single

00:04:01,530 --> 00:04:07,110
file right and you quickly recognize and

00:04:04,350 --> 00:04:09,420
apply the rule that my style of CSS is

00:04:07,110 --> 00:04:11,579
getting bigger and I need to refactor it

00:04:09,420 --> 00:04:12,810
and separate it out into modules so on

00:04:11,579 --> 00:04:16,140
the fourth day of Christmas you realize

00:04:12,810 --> 00:04:19,049
that and this is a common scenario which

00:04:16,140 --> 00:04:21,600
applies to almost every app so you could

00:04:19,049 --> 00:04:25,350
separate your styled or CSS file into

00:04:21,600 --> 00:04:27,360
say four separate files or modules so

00:04:25,350 --> 00:04:30,840
base could have styles pertaining to

00:04:27,360 --> 00:04:32,729
tags anchor tags and other tags which

00:04:30,840 --> 00:04:34,590
need to have a basic style then there

00:04:32,729 --> 00:04:37,680
could be a helper store CSS which is

00:04:34,590 --> 00:04:40,080
basically helpers like for helper for

00:04:37,680 --> 00:04:42,960
floating elements left and right or say

00:04:40,080 --> 00:04:44,879
clearing throats then there could be a

00:04:42,960 --> 00:04:46,860
file called components or CS

00:04:44,879 --> 00:04:49,530
which could carry your components like

00:04:46,860 --> 00:04:51,780
buttons dropdowns tabs and all then

00:04:49,530 --> 00:04:53,909
there could be an optional theme dot CSS

00:04:51,780 --> 00:04:57,599
let's say you have your site which

00:04:53,909 --> 00:04:59,460
renders in a blue team and also there is

00:04:57,599 --> 00:05:05,310
a red team so maybe you could have team

00:04:59,460 --> 00:05:07,499
dogs as well and if you are having a

00:05:05,310 --> 00:05:09,719
view using a preprocessor or like sass

00:05:07,499 --> 00:05:12,860
you might as well have a file called

00:05:09,719 --> 00:05:15,240
mixing dot a CSS which has a mixed sense

00:05:12,860 --> 00:05:16,590
for them on the area of Christmas you

00:05:15,240 --> 00:05:20,069
realize that your components orders here

00:05:16,590 --> 00:05:22,110
CSS again got bigger it has a lot of

00:05:20,069 --> 00:05:24,449
components in it so again you apply the

00:05:22,110 --> 00:05:26,669
same rule you basically divided and

00:05:24,449 --> 00:05:29,099
refactor into separate modules so your

00:05:26,669 --> 00:05:31,409
component or CSS now can become a folder

00:05:29,099 --> 00:05:34,139
basically components and it can have

00:05:31,409 --> 00:05:35,669
files like buttons dot CSS drop downs or

00:05:34,139 --> 00:05:39,629
CSS basically every component divided

00:05:35,669 --> 00:05:41,909
into a separate file and if you follow

00:05:39,629 --> 00:05:46,740
this approach most probably you will be

00:05:41,909 --> 00:05:48,810
happy on the twelfth day of Christmas ok

00:05:46,740 --> 00:05:51,539
commandment number two the code config

00:05:48,810 --> 00:05:53,939
shall remain at one place and this

00:05:51,539 --> 00:05:57,990
basically means use variables now this

00:05:53,939 --> 00:05:59,939
is related to a pre process of I mean a

00:05:57,990 --> 00:06:02,189
preprocessor because this won't work in

00:05:59,939 --> 00:06:06,060
CSS currently but the good news is that

00:06:02,189 --> 00:06:08,490
variables are arriving in C native CSS

00:06:06,060 --> 00:06:12,599
in future as well so you can always use

00:06:08,490 --> 00:06:14,819
that in CSS also so let's take a sample

00:06:12,599 --> 00:06:17,339
layout so this is a very common layout

00:06:14,819 --> 00:06:19,349
into apps today so basically I have a

00:06:17,339 --> 00:06:21,719
header sidebar and content so how does

00:06:19,349 --> 00:06:23,879
something that spans full width and it

00:06:21,719 --> 00:06:26,339
has a height of 50 pixel then you have a

00:06:23,879 --> 00:06:28,830
sidebar that spans the complete height

00:06:26,339 --> 00:06:31,500
and a width fixed width and it's

00:06:28,830 --> 00:06:33,389
obviously starting from the bottom of

00:06:31,500 --> 00:06:35,610
header then there is content which is

00:06:33,389 --> 00:06:37,800
below the header and alongside the

00:06:35,610 --> 00:06:40,710
sidebar now if you notice here there are

00:06:37,800 --> 00:06:42,839
too many magic numbers and these are ha

00:06:40,710 --> 00:06:46,500
coded numbers which should be avoided

00:06:42,839 --> 00:06:50,669
and we will see why so consider this

00:06:46,500 --> 00:06:53,459
approach what basically I have done is

00:06:50,669 --> 00:06:55,800
I've separated those hard-coded magic

00:06:53,459 --> 00:06:58,620
numbers into separate into variables

00:06:55,800 --> 00:07:00,660
right so I have a variable called head

00:06:58,620 --> 00:07:03,270
header height which is 50 pixels and a

00:07:00,660 --> 00:07:05,580
sidebar with so what I'm doing right now

00:07:03,270 --> 00:07:07,620
is instead of using those hard-coded

00:07:05,580 --> 00:07:13,500
numbers in my code I'm actually using

00:07:07,620 --> 00:07:16,740
those variables so why is this better

00:07:13,500 --> 00:07:20,070
first of all it's less error-prone so we

00:07:16,740 --> 00:07:22,470
have we have minimized the chance of

00:07:20,070 --> 00:07:24,750
making mistakes so if I was using those

00:07:22,470 --> 00:07:27,150
hard-coded numbers I might at some place

00:07:24,750 --> 00:07:32,030
use wrong values instead of 10 I might

00:07:27,150 --> 00:07:35,270
use 20 or so likewise so we have

00:07:32,030 --> 00:07:37,620
potentially minimize see error here and

00:07:35,270 --> 00:07:40,260
the second thing is easy extensibility

00:07:37,620 --> 00:07:43,080
in future while extensibility because

00:07:40,260 --> 00:07:44,580
let's say this probably applies to early

00:07:43,080 --> 00:07:47,250
stages of development where you need to

00:07:44,580 --> 00:07:49,470
tweak things very quickly and see how it

00:07:47,250 --> 00:07:51,600
goes so with this approach you can

00:07:49,470 --> 00:07:53,460
basically treat the variables instead of

00:07:51,600 --> 00:07:55,830
modifying the values at every place in

00:07:53,460 --> 00:07:59,190
the code and you can very quickly see

00:07:55,830 --> 00:08:04,740
how the result is and decide on the

00:07:59,190 --> 00:08:05,340
values and fix on them okay commandment

00:08:04,740 --> 00:08:08,849
number three

00:08:05,340 --> 00:08:13,380
thou shalt believe in abstractions this

00:08:08,849 --> 00:08:16,650
simply means component abstraction okay

00:08:13,380 --> 00:08:18,330
so let's take this example okay you have

00:08:16,650 --> 00:08:20,760
a game and you are developing this in

00:08:18,330 --> 00:08:23,550
HTML file just because you can nowadays

00:08:20,760 --> 00:08:27,199
and you're basically styling the

00:08:23,550 --> 00:08:30,360
complete screen of the game and

00:08:27,199 --> 00:08:31,740
specifically the HUD elements you see so

00:08:30,360 --> 00:08:35,330
let's take the example of the one you

00:08:31,740 --> 00:08:38,099
see at the bottom left and the top right

00:08:35,330 --> 00:08:40,380
so your code might look probably look

00:08:38,099 --> 00:08:42,360
like this you have a class for these

00:08:40,380 --> 00:08:43,830
stats hot element called

00:08:42,360 --> 00:08:46,620
let's say it's a class called hot stats

00:08:43,830 --> 00:08:48,750
so it's a fixed position element of the

00:08:46,620 --> 00:08:52,140
screen and it has some opacity and

00:08:48,750 --> 00:08:54,330
filter - just to give it a feel now we

00:08:52,140 --> 00:08:57,150
see we position it using the bottom

00:08:54,330 --> 00:09:00,570
bottom and left similarly for the map

00:08:57,150 --> 00:09:01,680
hot element so it's gonna be same it's a

00:09:00,570 --> 00:09:04,080
fixed position element the same

00:09:01,680 --> 00:09:07,240
filtering and obviously the top and

00:09:04,080 --> 00:09:09,370
right properties - just to position it

00:09:07,240 --> 00:09:12,130
now if you notice here the first three

00:09:09,370 --> 00:09:17,020
properties in both the rules are exactly

00:09:12,130 --> 00:09:20,320
the same and this is repetition and we

00:09:17,020 --> 00:09:22,810
all know repetition is bad it's a common

00:09:20,320 --> 00:09:25,210
issue of common reason for issues that

00:09:22,810 --> 00:09:28,990
you face in your applications so we

00:09:25,210 --> 00:09:31,150
should not repeat it so this is a

00:09:28,990 --> 00:09:32,620
different approach what we have done

00:09:31,150 --> 00:09:34,540
here is we have separated out those

00:09:32,620 --> 00:09:38,470
three properties into a separate class

00:09:34,540 --> 00:09:40,690
and it's called HUD element and now HUD

00:09:38,470 --> 00:09:42,370
stats and Hart map which were initial

00:09:40,690 --> 00:09:44,980
assess are just left with the

00:09:42,370 --> 00:09:47,560
positioning styles and actually these

00:09:44,980 --> 00:09:51,340
styles which were different for those

00:09:47,560 --> 00:09:53,380
classes and the usage is simple so we

00:09:51,340 --> 00:09:55,300
have a HTML element now the thing is

00:09:53,380 --> 00:09:57,730
that both the classes need to be applied

00:09:55,300 --> 00:10:04,350
so that we get these tiles from both the

00:09:57,730 --> 00:10:07,900
classes so this can be improved for you

00:10:04,350 --> 00:10:10,180
let's say we are using a preprocessor so

00:10:07,900 --> 00:10:11,770
there's something called specifically

00:10:10,180 --> 00:10:14,950
inside is something called placeholders

00:10:11,770 --> 00:10:16,570
so the difference in from the previous

00:10:14,950 --> 00:10:18,430
slide is that we now define a

00:10:16,570 --> 00:10:21,160
placeholder instead of a class which

00:10:18,430 --> 00:10:22,960
basically defines are those properties

00:10:21,160 --> 00:10:26,620
which are common in those hard elements

00:10:22,960 --> 00:10:28,840
and instead of basically using that

00:10:26,620 --> 00:10:31,060
placeholder we extend our current

00:10:28,840 --> 00:10:32,770
classes with that right so what it

00:10:31,060 --> 00:10:35,170
enables is basically hard stats and

00:10:32,770 --> 00:10:38,020
heart map classes are now extended with

00:10:35,170 --> 00:10:40,270
the header element placeholders and now

00:10:38,020 --> 00:10:41,980
I can simply use the individual class in

00:10:40,270 --> 00:10:47,590
my HTML I don't have to repeat the two

00:10:41,980 --> 00:10:53,140
classes so no repetition here clean code

00:10:47,590 --> 00:10:55,480
less transfers of error commandment

00:10:53,140 --> 00:10:57,430
number four thou shalt speed a spread

00:10:55,480 --> 00:11:04,870
peace and stop tie selectors from

00:10:57,430 --> 00:11:07,380
fighting any cases for this keeps vector

00:11:04,870 --> 00:11:07,380
strength flow

00:11:07,740 --> 00:11:13,540
so selectors have strengths and they do

00:11:10,960 --> 00:11:17,890
fight we have all seen this in Christian

00:11:13,540 --> 00:11:20,410
stock so selectors have something called

00:11:17,890 --> 00:11:23,200
as specificity which determines the

00:11:20,410 --> 00:11:25,150
strength of those selectors and they do

00:11:23,200 --> 00:11:26,830
conflict with each other let's take a

00:11:25,150 --> 00:11:29,950
simple example let's say we have a

00:11:26,830 --> 00:11:32,020
component of tabs in an app and for some

00:11:29,950 --> 00:11:34,480
reason a developer styled it using depth

00:11:32,020 --> 00:11:38,260
or taps and it was being used in the

00:11:34,480 --> 00:11:41,860
HTML we simply put the class now another

00:11:38,260 --> 00:11:43,540
developer joining the project and he he

00:11:41,860 --> 00:11:45,610
was required to make a variation of the

00:11:43,540 --> 00:11:48,160
tab component which instead of having a

00:11:45,610 --> 00:11:50,740
full width which initial class has it

00:11:48,160 --> 00:11:52,930
was required to have 1/2 with 50% width

00:11:50,740 --> 00:11:55,510
so he went ahead and made a separate

00:11:52,930 --> 00:11:59,140
class for that tabs half and gave it a

00:11:55,510 --> 00:12:00,850
property with 50% and this was meant to

00:11:59,140 --> 00:12:04,510
be used with along with the tabs class

00:12:00,850 --> 00:12:06,520
so this is a simple common usage how he

00:12:04,510 --> 00:12:08,590
would go about have the tabs class on

00:12:06,520 --> 00:12:12,160
the element and along with it he has the

00:12:08,590 --> 00:12:12,880
tabs half now this won't work and the

00:12:12,160 --> 00:12:15,010
reason is simple

00:12:12,880 --> 00:12:16,780
the strength of the first selector which

00:12:15,010 --> 00:12:21,100
is div dot tabs is basically greater

00:12:16,780 --> 00:12:24,160
than the selector define after it which

00:12:21,100 --> 00:12:27,790
is tabs half and the reason is because

00:12:24,160 --> 00:12:30,340
of concatenation so concatenation of the

00:12:27,790 --> 00:12:33,100
actual tag with the class increases the

00:12:30,340 --> 00:12:34,390
strength and hence the second class is

00:12:33,100 --> 00:12:39,520
not able to override the properties of

00:12:34,390 --> 00:12:42,340
first class so things can get a lot

00:12:39,520 --> 00:12:44,950
Messier from here the probable solution

00:12:42,340 --> 00:12:46,810
is you again prefix your class name with

00:12:44,950 --> 00:12:48,370
the div tag just to make your selectors

00:12:46,810 --> 00:12:51,400
equal with the first one and able to

00:12:48,370 --> 00:12:55,710
override the first one right or you

00:12:51,400 --> 00:12:58,360
could go the better way not important

00:12:55,710 --> 00:13:00,820
plus we have another problem now the

00:12:58,360 --> 00:13:04,510
tabs can only be used on the width along

00:13:00,820 --> 00:13:07,390
with a div tag so it's it is fine but

00:13:04,510 --> 00:13:10,870
it's an unnecessary restriction you have

00:13:07,390 --> 00:13:12,520
put on your selector that even in future

00:13:10,870 --> 00:13:14,320
if you decide to have the tab class on

00:13:12,520 --> 00:13:17,380
some other element this won't work it

00:13:14,320 --> 00:13:19,720
could break so the solution is simple

00:13:17,380 --> 00:13:22,540
here there was no need to concatenate

00:13:19,720 --> 00:13:25,600
the tab component the cap class but we

00:13:22,540 --> 00:13:29,260
could simply have dot tabs and this

00:13:25,600 --> 00:13:32,080
would be solved so the key thing is just

00:13:29,260 --> 00:13:33,670
keep your selectors no don't put

00:13:32,080 --> 00:13:35,830
unnecessary nesting don't put

00:13:33,670 --> 00:13:40,810
unnecessary concatenation because that

00:13:35,830 --> 00:13:42,880
would just make things worse okay / -

00:13:40,810 --> 00:13:44,800
come on another five thou shalt treat

00:13:42,880 --> 00:13:48,610
your classes as their own children name

00:13:44,800 --> 00:13:51,060
them with equal love which is basically

00:13:48,610 --> 00:13:51,060
a naming convention

00:13:52,140 --> 00:13:58,510
okay so naming is very important in CSS

00:13:56,350 --> 00:14:02,260
I feel and when I say it's important in

00:13:58,510 --> 00:14:03,930
CSS I actually mean not in CSS itself

00:14:02,260 --> 00:14:07,330
but in comparison to other languages

00:14:03,930 --> 00:14:09,100
because if you see in other languages if

00:14:07,330 --> 00:14:12,820
your variable names are not correct they

00:14:09,100 --> 00:14:13,600
don't makes sense they're not I mean

00:14:12,820 --> 00:14:15,040
they are not good

00:14:13,600 --> 00:14:17,140
nothing would break your code will still

00:14:15,040 --> 00:14:21,430
function everything will work fine but

00:14:17,140 --> 00:14:23,320
CSS has some bad things in it like the

00:14:21,430 --> 00:14:26,080
earlier commandment we saw a selectors

00:14:23,320 --> 00:14:28,750
friends vector specificity so these

00:14:26,080 --> 00:14:31,300
things are something which can be

00:14:28,750 --> 00:14:33,370
avoided if we incorporate a very good

00:14:31,300 --> 00:14:38,110
naming system in our CSS and that is why

00:14:33,370 --> 00:14:40,180
I say it is very important in CSS so BEM

00:14:38,110 --> 00:14:45,640
is something I'm going to talk about as

00:14:40,180 --> 00:14:49,630
a naming convention so then basically is

00:14:45,640 --> 00:14:54,370
a methodology to not to name things but

00:14:49,630 --> 00:14:57,160
instead to separate out components from

00:14:54,370 --> 00:14:59,830
your app it basically supports component

00:14:57,160 --> 00:15:01,720
abstraction so M stands for block

00:14:59,830 --> 00:15:05,950
element and modifier so what it says

00:15:01,720 --> 00:15:09,000
that in your app you most probably have

00:15:05,950 --> 00:15:11,290
things which are independent

00:15:09,000 --> 00:15:13,180
independent components things which

00:15:11,290 --> 00:15:16,390
could be separated out into modules and

00:15:13,180 --> 00:15:20,770
could be used anywhere independently so

00:15:16,390 --> 00:15:22,510
BEM can say a terms them as block so

00:15:20,770 --> 00:15:24,010
block is basically a component you have

00:15:22,510 --> 00:15:26,830
in your app then there is something

00:15:24,010 --> 00:15:29,050
called element so element is sub parts

00:15:26,830 --> 00:15:31,870
of your component a component might have

00:15:29,050 --> 00:15:33,430
several things which eventually build up

00:15:31,870 --> 00:15:36,850
2d components so those are called

00:15:33,430 --> 00:15:38,560
elements then finally this modifier the

00:15:36,850 --> 00:15:42,490
component might have variations which

00:15:38,560 --> 00:15:46,440
BEM terms as modifier so this is the

00:15:42,490 --> 00:15:48,490
methodology part of them but this is

00:15:46,440 --> 00:15:51,279
augmented with a naming convention as

00:15:48,490 --> 00:15:53,230
well so the naming convention I have

00:15:51,279 --> 00:15:55,210
shown here is basically a variation of

00:15:53,230 --> 00:15:58,870
actual thing which was developed at

00:15:55,210 --> 00:16:02,050
Yandex so it's a variation by Nicholas

00:15:58,870 --> 00:16:04,630
and Harry Roberts so what we translate

00:16:02,050 --> 00:16:07,029
this into is a block is always a single

00:16:04,630 --> 00:16:09,130
class rule number one so let us say we

00:16:07,029 --> 00:16:11,200
have a class called component so block

00:16:09,130 --> 00:16:13,450
is a component then there's an element

00:16:11,200 --> 00:16:17,290
class so element class according to this

00:16:13,450 --> 00:16:20,320
rule is basically prefect sing with the

00:16:17,290 --> 00:16:23,050
actual component name and double

00:16:20,320 --> 00:16:27,130
underscores and lastly we have the

00:16:23,050 --> 00:16:29,920
modifier which is whose name we get by

00:16:27,130 --> 00:16:32,380
prefixing component name and then double

00:16:29,920 --> 00:16:34,260
hyphens so this is the naming convention

00:16:32,380 --> 00:16:38,950
we follow for all the three elements

00:16:34,260 --> 00:16:41,040
three parts of them now let's see how

00:16:38,950 --> 00:16:43,810
this applies actually and why it's good

00:16:41,040 --> 00:16:45,550
so let's take an example of a component

00:16:43,810 --> 00:16:50,350
because then basically works on

00:16:45,550 --> 00:16:52,390
component we have a slider an app if

00:16:50,350 --> 00:16:55,089
what if you were not to use BEM this was

00:16:52,390 --> 00:16:57,610
deep probably the CSS you would have

00:16:55,089 --> 00:17:00,280
written so we have the slider class

00:16:57,610 --> 00:17:03,520
which has a position relative then we

00:17:00,280 --> 00:17:05,890
have two things residing in this slider

00:17:03,520 --> 00:17:08,260
so firstly this slider track so be

00:17:05,890 --> 00:17:09,160
writer C says when the side will track

00:17:08,260 --> 00:17:11,050
in the side of slider

00:17:09,160 --> 00:17:13,839
they give it a background and similarly

00:17:11,050 --> 00:17:16,319
for the knob right and you might as well

00:17:13,839 --> 00:17:19,060
have a variation of this slider

00:17:16,319 --> 00:17:21,670
variation in which we have an extra

00:17:19,060 --> 00:17:23,380
input to basically

00:17:21,670 --> 00:17:26,350
and really let the user manually change

00:17:23,380 --> 00:17:30,850
the values so forth for that we might

00:17:26,350 --> 00:17:34,000
have a selector like this so if you see

00:17:30,850 --> 00:17:36,730
here we have lots of so-called the bad

00:17:34,000 --> 00:17:40,120
things in CSS in our selectors so the

00:17:36,730 --> 00:17:42,280
first first selector is fine but the

00:17:40,120 --> 00:17:46,440
second selector has nesting in it the

00:17:42,280 --> 00:17:49,540
third as well and the last one is quite

00:17:46,440 --> 00:17:54,610
variable so we have concatenation along

00:17:49,540 --> 00:17:58,090
with nesting so that is really bad so

00:17:54,610 --> 00:17:59,560
let's apply them on this example so if

00:17:58,090 --> 00:18:02,350
you were to use the same name naming

00:17:59,560 --> 00:18:04,240
conventions we just saw this would

00:18:02,350 --> 00:18:06,760
actually translate into the component

00:18:04,240 --> 00:18:10,600
class being the same Sider the slider

00:18:06,760 --> 00:18:12,940
track would be simply named as the

00:18:10,600 --> 00:18:15,250
component name underscore underscore the

00:18:12,940 --> 00:18:17,260
actual element so these are the elements

00:18:15,250 --> 00:18:19,810
track and not the slider not track and

00:18:17,260 --> 00:18:23,470
slider knob then the variation so

00:18:19,810 --> 00:18:26,770
variation would actually be styled like

00:18:23,470 --> 00:18:28,150
slider - - with input and whenever this

00:18:26,770 --> 00:18:30,010
variation class is basically on a

00:18:28,150 --> 00:18:32,140
component we need to actually display

00:18:30,010 --> 00:18:34,660
the slider input which is again an

00:18:32,140 --> 00:18:37,210
element of a component so if you notice

00:18:34,660 --> 00:18:38,680
here first vector remains the same but

00:18:37,210 --> 00:18:42,670
the second and third selector we have

00:18:38,680 --> 00:18:45,190
managed to remove the nesting so they

00:18:42,670 --> 00:18:48,040
are single classes now much better much

00:18:45,190 --> 00:18:50,470
uniform and less specific and even in

00:18:48,040 --> 00:18:52,300
the last one we have the nesting is

00:18:50,470 --> 00:18:53,590
still there but concatenation has been

00:18:52,300 --> 00:18:57,520
removed much better than the previous

00:18:53,590 --> 00:19:00,130
one so this is how BEM can be used to

00:18:57,520 --> 00:19:02,380
actually keep your selectors low the

00:19:00,130 --> 00:19:09,580
target is to keep this every selector as

00:19:02,380 --> 00:19:11,680
just one class wherever it works okay

00:19:09,580 --> 00:19:16,600
commandment number six thou shalt not

00:19:11,680 --> 00:19:18,880
mix up the ego and the indexes z-index

00:19:16,600 --> 00:19:22,930
management so what's the issue with Z

00:19:18,880 --> 00:19:27,160
indexes so this is a common thing we see

00:19:22,930 --> 00:19:29,740
in most our apps so people tend to set

00:19:27,160 --> 00:19:32,550
properties set the values of the indexes

00:19:29,740 --> 00:19:34,440
properties like nine nine nine

00:19:32,550 --> 00:19:37,110
and the reason is simple they don't know

00:19:34,440 --> 00:19:42,780
what might come over me so why not set a

00:19:37,110 --> 00:19:46,080
max value so the solution for this is

00:19:42,780 --> 00:19:48,750
basically using the commandment number

00:19:46,080 --> 00:19:50,730
two which we saw earlier using variables

00:19:48,750 --> 00:19:54,330
and separating out your Z indexes in two

00:19:50,730 --> 00:19:56,970
variables right so let's say we have an

00:19:54,330 --> 00:19:58,620
app and it has multiple components so

00:19:56,970 --> 00:20:00,270
components like overlay slide out

00:19:58,620 --> 00:20:02,250
backdrop and there is a slide-out

00:20:00,270 --> 00:20:06,030
there's a side bar navigation header and

00:20:02,250 --> 00:20:08,220
stuff so first thing we separate out the

00:20:06,030 --> 00:20:09,150
indexes into variables but that is not

00:20:08,220 --> 00:20:12,180
it

00:20:09,150 --> 00:20:14,310
so what addition purpose this code is

00:20:12,180 --> 00:20:16,230
solving is it's basically translating

00:20:14,310 --> 00:20:19,230
your visual hierarchy the actual layer

00:20:16,230 --> 00:20:23,040
system of your components into code now

00:20:19,230 --> 00:20:29,480
I have a linear representation of your

00:20:23,040 --> 00:20:32,310
layers right in my code what good is it

00:20:29,480 --> 00:20:34,590
so there are two things you could do

00:20:32,310 --> 00:20:38,040
with your components in with your UI

00:20:34,590 --> 00:20:41,070
elements in an app you could change the

00:20:38,040 --> 00:20:43,650
existing layer position of those

00:20:41,070 --> 00:20:45,780
elements or you might add new elements

00:20:43,650 --> 00:20:47,370
UI elements to your app so changing

00:20:45,780 --> 00:20:49,380
existing Z indexes become really easy

00:20:47,370 --> 00:20:51,900
because you actually know what might

00:20:49,380 --> 00:20:54,740
break you actually know the what things

00:20:51,900 --> 00:20:57,600
come pay for me and what after me and

00:20:54,740 --> 00:20:59,670
same with the scene while adding new

00:20:57,600 --> 00:21:03,420
elements to your app you actually you

00:20:59,670 --> 00:21:07,100
can now actually visualize where my

00:21:03,420 --> 00:21:09,990
element fits in the layer system right

00:21:07,100 --> 00:21:11,580
so normal Z index 9 9 9 9 9

00:21:09,990 --> 00:21:13,470
you can keep your Z index is short

00:21:11,580 --> 00:21:15,980
because now you know what's allow me and

00:21:13,470 --> 00:21:15,980
what's below me

00:21:19,650 --> 00:21:24,360
okay over to commandment number seven

00:21:21,809 --> 00:21:30,900
inheritance doesn't always gives you no

00:21:24,360 --> 00:21:36,270
money so this is again a SAS commandment

00:21:30,900 --> 00:21:38,430
and it basically is about the ad extent

00:21:36,270 --> 00:21:40,050
thing which SAS provides so like you saw

00:21:38,430 --> 00:21:43,470
earlier ad extent is something which you

00:21:40,050 --> 00:21:45,510
can use to extend a current class with

00:21:43,470 --> 00:21:47,910
any previous class and the properties of

00:21:45,510 --> 00:21:51,990
that class which you actually extend

00:21:47,910 --> 00:21:57,300
would be carried over to your new class

00:21:51,990 --> 00:22:01,050
right so and extend has a thing which it

00:21:57,300 --> 00:22:04,530
which might make your CSS very bad and

00:22:01,050 --> 00:22:09,410
item it as selector hell let's see what

00:22:04,530 --> 00:22:12,720
it is so let's say in your app you have

00:22:09,410 --> 00:22:15,360
an error class which is basically used

00:22:12,720 --> 00:22:19,170
to define things which any error in your

00:22:15,360 --> 00:22:22,410
app might have so your error should be

00:22:19,170 --> 00:22:24,450
colored red and it might have a

00:22:22,410 --> 00:22:26,820
background a reddish background so

00:22:24,450 --> 00:22:29,130
anything which is which represents error

00:22:26,820 --> 00:22:32,220
would obviously be using this error

00:22:29,130 --> 00:22:35,820
class then there was a requirement to

00:22:32,220 --> 00:22:37,830
actually increase the padding let's say

00:22:35,820 --> 00:22:40,770
of any error which is coming in the

00:22:37,830 --> 00:22:42,570
sidebar so we probably will have a style

00:22:40,770 --> 00:22:45,950
like that any error in the sidebar

00:22:42,570 --> 00:22:49,020
should be having a padding of 10 pixels

00:22:45,950 --> 00:22:51,120
now consider we have a notification box

00:22:49,020 --> 00:22:53,460
and it's basically an error notification

00:22:51,120 --> 00:22:56,640
box so what I would do is my error

00:22:53,460 --> 00:22:58,920
notification should extend with an error

00:22:56,640 --> 00:23:00,630
class so I get the error properties on

00:22:58,920 --> 00:23:05,970
myself without actually writing the

00:23:00,630 --> 00:23:07,860
properties again now notice this this is

00:23:05,970 --> 00:23:09,450
the compiled CSS of the sass over here

00:23:07,860 --> 00:23:12,150
and if you notice the highlighted

00:23:09,450 --> 00:23:13,820
selector is something which we did not

00:23:12,150 --> 00:23:16,110
want it and did not actually

00:23:13,820 --> 00:23:17,940
intentionally write but it is being

00:23:16,110 --> 00:23:23,220
generated and this is an unnecessary C

00:23:17,940 --> 00:23:25,770
or CSS so this might look not so much of

00:23:23,220 --> 00:23:28,200
concern right now but if you let's say

00:23:25,770 --> 00:23:29,460
you have a huge app of with so many

00:23:28,200 --> 00:23:32,270
styles

00:23:29,460 --> 00:23:40,190
this is something you could end up with

00:23:32,270 --> 00:23:40,190
this is real selector we had in an app

00:23:42,710 --> 00:23:47,220
so the solution for this is basically

00:23:45,120 --> 00:23:49,950
using placeholders which we earlier saw

00:23:47,220 --> 00:23:53,610
in component extract abstraction

00:23:49,950 --> 00:23:57,150
commandment so what we are doing

00:23:53,610 --> 00:23:59,760
differently here is first of all the

00:23:57,150 --> 00:24:01,710
error class does not have the properties

00:23:59,760 --> 00:24:03,210
now it's basically transferred into a

00:24:01,710 --> 00:24:06,030
placeholder so we define a new

00:24:03,210 --> 00:24:09,030
placeholder core error and that now has

00:24:06,030 --> 00:24:11,640
the properties of an error second rule

00:24:09,030 --> 00:24:15,270
we never extend a class we always extend

00:24:11,640 --> 00:24:17,340
a placeholder so error class is

00:24:15,270 --> 00:24:19,170
something that is to be used in the HTML

00:24:17,340 --> 00:24:20,880
so we create the error class and this

00:24:19,170 --> 00:24:22,710
then basically extend it with the

00:24:20,880 --> 00:24:24,930
placeholder similarly we have the

00:24:22,710 --> 00:24:27,360
message notification so that is

00:24:24,930 --> 00:24:29,580
extending the error again and rule

00:24:27,360 --> 00:24:32,610
number three three whenever a class

00:24:29,580 --> 00:24:35,640
needs to be tweaked based on some

00:24:32,610 --> 00:24:38,880
location or based on some anything so we

00:24:35,640 --> 00:24:41,970
use class for that and that you can see

00:24:38,880 --> 00:24:44,550
so when doing the PAC padding of the

00:24:41,970 --> 00:24:47,250
error error we basically use the class

00:24:44,550 --> 00:24:50,550
there and if you follow those three

00:24:47,250 --> 00:24:55,890
rules you see that that unnecessary CSS

00:24:50,550 --> 00:24:58,110
that was generated is no mother and this

00:24:55,890 --> 00:25:00,420
actually helps reducing compilation time

00:24:58,110 --> 00:25:03,360
as well and in app we were able to

00:25:00,420 --> 00:25:06,000
reduce it by 76% because sass needs to

00:25:03,360 --> 00:25:08,430
do a lot of work to while compilation to

00:25:06,000 --> 00:25:10,350
actually see what what is extending

00:25:08,430 --> 00:25:12,690
being extended wear in your code and

00:25:10,350 --> 00:25:16,230
replace those instances so it's a lot of

00:25:12,690 --> 00:25:20,480
work it's could really be of quite a

00:25:16,230 --> 00:25:25,080
benefit this is what that start meant so

00:25:20,480 --> 00:25:31,560
seven Commandments is all I have and now

00:25:25,080 --> 00:25:34,890
I'll be actually switching over to the

00:25:31,560 --> 00:25:38,240
game which I was talking about so this

00:25:34,890 --> 00:25:38,240
game is basically a MMO

00:25:39,210 --> 00:25:46,210
see T G so that's massively multiplayer

00:25:43,240 --> 00:25:49,059
online CSS throwing game so if you could

00:25:46,210 --> 00:25:51,460
open this IP in your Mobile's or laptops

00:25:49,059 --> 00:25:54,460
we could all play this together so the

00:25:51,460 --> 00:25:56,320
thing here is I don't play this you guys

00:25:54,460 --> 00:26:02,440
paid together so if anything goes wrong

00:25:56,320 --> 00:26:05,530
it is because because of you I mean so

00:26:02,440 --> 00:26:06,909
we are getting a count here the number

00:26:05,530 --> 00:26:11,650
of people who are getting connected to

00:26:06,909 --> 00:26:15,730
the game so nine people please don't

00:26:11,650 --> 00:26:24,659
start sending things that may explain

00:26:15,730 --> 00:26:28,900
what it does okay so so this let's see

00:26:24,659 --> 00:26:34,960
what we need to do here so I'm starting

00:26:28,900 --> 00:26:39,730
a simple lever here level three is guys

00:26:34,960 --> 00:26:41,950
where's the code of conduct piece so

00:26:39,730 --> 00:26:44,890
this is level number three it's quite

00:26:41,950 --> 00:26:47,100
hard so I'm using another demo level so

00:26:44,890 --> 00:26:51,580
we have a player here and that's a flag

00:26:47,100 --> 00:26:54,370
which we need to basically get and

00:26:51,580 --> 00:26:57,460
there's a block in between which we need

00:26:54,370 --> 00:27:00,520
to somehow remove right now all you guys

00:26:57,460 --> 00:27:05,860
what you need to do is you you all see

00:27:00,520 --> 00:27:07,659
your text box right it's all good so you

00:27:05,860 --> 00:27:10,659
see a text box where you need to put a

00:27:07,659 --> 00:27:13,330
pair of property or a no value right so

00:27:10,659 --> 00:27:17,380
let's say display : none and you need to

00:27:13,330 --> 00:27:19,090
submit submit that right and the thing

00:27:17,380 --> 00:27:21,130
here is this is a sample scenario

00:27:19,090 --> 00:27:22,890
whatever rule you submit whatever

00:27:21,130 --> 00:27:26,080
property and value you sum it is

00:27:22,890 --> 00:27:27,940
basically gonna apply in an abstract way

00:27:26,080 --> 00:27:32,830
on the scenario not really getting

00:27:27,940 --> 00:27:35,700
applied technically but as you won't be

00:27:32,830 --> 00:27:35,700
able to kill like this

00:27:37,360 --> 00:27:43,960
so can we try submitting sensible

00:27:41,570 --> 00:27:43,960
solutions

00:27:44,170 --> 00:27:54,980
this is CSS contract so let me give you

00:27:52,610 --> 00:27:57,700
a hint here so you all every one of you

00:27:54,980 --> 00:28:01,820
is basically in front of a table and

00:27:57,700 --> 00:28:04,310
this is a border which is blocking so if

00:28:01,820 --> 00:28:07,630
you are in front of a table and there is

00:28:04,310 --> 00:28:07,630
a border how do you remove the border

00:28:14,170 --> 00:28:16,200
Oh

00:28:17,470 --> 00:28:21,540
something related to border and table

00:28:30,200 --> 00:28:38,000
okay so solution here was I guess nobody

00:28:33,770 --> 00:28:38,980
is making and current attempt so the

00:28:38,000 --> 00:28:41,720
solution is basically

00:28:38,980 --> 00:28:44,290
border-collapse:collapse so if you do

00:28:41,720 --> 00:28:48,230
rat it basically will disappear the

00:28:44,290 --> 00:28:50,060
bottom so let's try this level one so

00:28:48,230 --> 00:28:53,620
that's an enemy it keeps on hitting us

00:28:50,060 --> 00:28:53,620
oh my god

00:28:53,980 --> 00:29:00,320
so you need to submit a a property and a

00:28:58,130 --> 00:29:03,200
value pair that will basically somehow

00:29:00,320 --> 00:29:21,170
block this enemy from hitting us can we

00:29:03,200 --> 00:29:22,280
try this okay I think I need to give a

00:29:21,170 --> 00:29:25,880
hint here as well

00:29:22,280 --> 00:29:27,700
so you basically need something in

00:29:25,880 --> 00:29:30,320
between the player and the enemy

00:29:27,700 --> 00:29:32,840
probably a block so how do you display a

00:29:30,320 --> 00:29:38,300
block can we try submitting correct

00:29:32,840 --> 00:29:43,250
solutions vendor prefixes are not

00:29:38,300 --> 00:29:44,930
required so another thing which I forgot

00:29:43,250 --> 00:29:47,060
to mention is if 50% of the audience

00:29:44,930 --> 00:29:49,790
submits the correct solution this level

00:29:47,060 --> 00:29:53,510
would get cleared and out of 1:03 we

00:29:49,790 --> 00:30:01,070
just 17 correct solutions you want CSS

00:29:53,510 --> 00:30:05,630
lovers I don't think we are going to

00:30:01,070 --> 00:30:07,580
reach 50% correct solution okay solution

00:30:05,630 --> 00:30:08,900
for this is obvious or people are

00:30:07,580 --> 00:30:14,060
sending display:block

00:30:08,900 --> 00:30:16,990
so assuming 50% audience was not doing

00:30:14,060 --> 00:30:16,990
funny stuff Oh

00:30:25,010 --> 00:30:29,280
so we would have a block which would

00:30:27,420 --> 00:30:31,950
actually kill the enemy and level clear

00:30:29,280 --> 00:30:35,280
so this is an interesting one last level

00:30:31,950 --> 00:30:37,890
from my side they will do so the player

00:30:35,280 --> 00:30:39,750
is on a platform and he needs to capture

00:30:37,890 --> 00:30:42,390
the flag but the issue is the platforms

00:30:39,750 --> 00:30:45,140
on order and save seem level so I'm not

00:30:42,390 --> 00:30:47,460
able to get the flag so how do you get

00:30:45,140 --> 00:30:49,620
something which has broken on the next

00:30:47,460 --> 00:30:55,010
line to actually get on the same level

00:30:49,620 --> 00:30:55,010
as the previous element come on

00:30:58,250 --> 00:31:07,789
not a single right solution okay so the

00:31:05,240 --> 00:31:24,340
solution is basically white-space:nowrap

00:31:07,789 --> 00:31:27,289
so that's it hi

00:31:24,340 --> 00:31:30,019
pretty much the beginning of your talk

00:31:27,289 --> 00:31:33,500
you talked about keeping your files

00:31:30,019 --> 00:31:36,769
modular and small right

00:31:33,500 --> 00:31:38,929
but you mentioned CSS and then you

00:31:36,769 --> 00:31:40,669
mentioned if you're using sass you

00:31:38,929 --> 00:31:43,309
should use the mid sense file for sense

00:31:40,669 --> 00:31:46,309
like don't you think that reason sass

00:31:43,309 --> 00:31:50,600
you should keep small files but then

00:31:46,309 --> 00:31:53,330
concatenate them into one CSS file when

00:31:50,600 --> 00:31:55,759
you deploy so production is not really

00:31:53,330 --> 00:31:57,889
of a concern here it's a good practice

00:31:55,759 --> 00:32:01,610
even to get your audio styles in to

00:31:57,889 --> 00:32:03,950
single CSS so you don't have I mean

00:32:01,610 --> 00:32:05,450
multiple HTTP request being sent from

00:32:03,950 --> 00:32:08,029
the browser so that is something which

00:32:05,450 --> 00:32:10,399
is fine the concern here is actually the

00:32:08,029 --> 00:32:12,590
indie development process so you know

00:32:10,399 --> 00:32:14,629
why you need modularity is because you

00:32:12,590 --> 00:32:17,419
need to append things and change things

00:32:14,629 --> 00:32:19,159
over time right so spreading of files is

00:32:17,419 --> 00:32:23,120
necessary in develop and not in

00:32:19,159 --> 00:32:28,519
production I guess another small

00:32:23,120 --> 00:32:32,179
question you show that you're separating

00:32:28,519 --> 00:32:34,789
it to files according to kind of the

00:32:32,179 --> 00:32:36,529
style of the components dropdowns and

00:32:34,789 --> 00:32:39,529
stuff like that right don't you think

00:32:36,529 --> 00:32:43,129
maybe also it would be good to separate

00:32:39,529 --> 00:32:46,429
it to the pages that you're using or the

00:32:43,129 --> 00:32:47,990
templates that are associated with most

00:32:46,429 --> 00:32:50,450
of these styles because a lot of times

00:32:47,990 --> 00:32:53,059
styles are associated more with the page

00:32:50,450 --> 00:32:57,470
they appear on and not with a specific

00:32:53,059 --> 00:32:59,299
component right so so writing styles

00:32:57,470 --> 00:33:01,850
pertaining to specific pages is

00:32:59,299 --> 00:33:05,679
something we all have been doing for a

00:33:01,850 --> 00:33:08,149
long time now but the issue with that is

00:33:05,679 --> 00:33:11,360
it leads to basically a lot of

00:33:08,149 --> 00:33:12,110
repetitive code and code gets repeated

00:33:11,360 --> 00:33:15,320
on

00:33:12,110 --> 00:33:17,690
friend pages and even though certain

00:33:15,320 --> 00:33:19,910
things are same on all the pages you

00:33:17,690 --> 00:33:21,440
still have repeated code so the solution

00:33:19,910 --> 00:33:24,200
for this which many people have started

00:33:21,440 --> 00:33:26,780
using is to have a different outlook

00:33:24,200 --> 00:33:28,820
over this so instead of styling things

00:33:26,780 --> 00:33:32,540
on specific pages again and again you

00:33:28,820 --> 00:33:34,220
basically what you do is look out for

00:33:32,540 --> 00:33:36,559
things which are common in all the pages

00:33:34,220 --> 00:33:38,240
and separate down them as components so

00:33:36,559 --> 00:33:40,220
that is reason number one I have I

00:33:38,240 --> 00:33:45,530
haven't included those page Styles in

00:33:40,220 --> 00:33:47,690
the sample solution eyes just showed so

00:33:45,530 --> 00:33:50,030
you basically should have components in

00:33:47,690 --> 00:33:51,919
your averages and styling pages but even

00:33:50,030 --> 00:33:54,260
if you have those specific page styling

00:33:51,919 --> 00:33:55,940
things even if it's a requirement you

00:33:54,260 --> 00:33:58,330
can always have something called as

00:33:55,940 --> 00:34:00,559
specific page section where you have

00:33:58,330 --> 00:34:04,850
styles for your homepage your for your

00:34:00,559 --> 00:34:06,950
about page and so thanks

00:34:04,850 --> 00:34:09,100
actually I'm going to bring about

00:34:06,950 --> 00:34:12,889
support number five events and a bouncer

00:34:09,100 --> 00:34:14,720
instead of using the next editor you

00:34:12,889 --> 00:34:17,570
trying to prefix and using the name

00:34:14,720 --> 00:34:20,810
convention using underscore or not -

00:34:17,570 --> 00:34:23,050
right I'm gonna really miss the coolest

00:34:20,810 --> 00:34:27,470
reusable because I mean every time you I

00:34:23,050 --> 00:34:41,300
mean then with some other author class

00:34:27,470 --> 00:34:44,840
name so I agree these selectors do get

00:34:41,300 --> 00:34:47,270
do tend to get longer if you use the BEM

00:34:44,840 --> 00:34:52,149
convention but I feel the extensibility

00:34:47,270 --> 00:34:55,190
and the and the reusability and the

00:34:52,149 --> 00:34:57,350
thing that it lets you avoid very

00:34:55,190 --> 00:35:00,650
various things in CSS like stricter

00:34:57,350 --> 00:35:02,150
sense and all is much more than just the

00:35:00,650 --> 00:35:04,070
names getting bigger it doesn't really

00:35:02,150 --> 00:35:06,680
affect affect you it's just a visual

00:35:04,070 --> 00:35:08,090
thing that you see long selectors and

00:35:06,680 --> 00:35:11,869
that really scares you

00:35:08,090 --> 00:35:16,000
I guess the advantages are better more

00:35:11,869 --> 00:35:19,660
than you disadvantages in that case

00:35:16,000 --> 00:35:21,790
hello greater what what do you think is

00:35:19,660 --> 00:35:24,630
the advantage of using placeholder if

00:35:21,790 --> 00:35:26,770
you compare it to like variables

00:35:24,630 --> 00:35:28,300
placeholder and variables are I guess

00:35:26,770 --> 00:35:31,720
two separate things so variables can

00:35:28,300 --> 00:35:33,819
like in other languages to store values

00:35:31,720 --> 00:35:36,400
right they could be single decimal

00:35:33,819 --> 00:35:37,930
strings and maps and stuff but place

00:35:36,400 --> 00:35:40,569
what is on the other hand something

00:35:37,930 --> 00:35:43,119
which is a group of properties just like

00:35:40,569 --> 00:35:44,770
classes are or any other rulers so it's

00:35:43,119 --> 00:35:46,510
a group of property which you can extend

00:35:44,770 --> 00:35:50,609
variables is not something you can

00:35:46,510 --> 00:35:50,609

YouTube URL: https://www.youtube.com/watch?v=FYcu-wWrNqo


