Title: Christian Lilley: Build Scalable, Automated CSS - CSSConf.Asia 2014
Publication date: 2015-01-17
Playlist: CSSConf.Asia 2014
Description: 
	Why don’t ’back-end’ coders get CSS?!? They call it an ’anti-language full of black magic’, and post GIFs making fun of our craft. Let’s kill two birds with one stone: learn how to evangelize CSS to them, and to make our CSS-Foo better and stronger by understanding both what makes them crazy, and what they bring to the table in terms of building scalable, maintainable applications. 
We’ll take the bad with the good: purge from your own repertoire the habits (like over-use of floats) that never should have caught on. And acquire new habits (like naming conventions and preprocessors) that make your own code vastly more readable and maintainable. Finally, we’ll look at how automation with life-changing tools like Node, Grunt and Compass can not only grant you new super-powers, but also make your whole working style vastly more familiar to the server-side guys. By the end of our talk, you’ll be on a path to enlightenment, and the gear-heads down the hall will look at you in a whole new light.

Christian is a UI Architect at McKinsey Digital Labs and turns theoretical business-y stuff into real useful blinky-lights. He digs rapid-prototyping with AngularJS, agile and co-founded the Data Visualization NY meetup. Now he lives in KL, whishing there was better GeoViz to find the best hawker stalls.

CSSConf.Asia - Bridging Design and Implementation. Amara Sanctuary, Singapore - 19 November 2014.

Source: http://2014.cssconf.asia/#speakers
Slides: http://www.slideshare.net/xmlilley/css-conf-asia-2014-preso

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:12,769 --> 00:00:23,010
so let's talk scalable CSS I am a UI guy

00:00:20,279 --> 00:00:25,050
full time it's what I do so I am

00:00:23,010 --> 00:00:28,830
thrilled that you I Devon JavaScript

00:00:25,050 --> 00:00:32,030
seem to have suddenly become cool senior

00:00:28,830 --> 00:00:34,230
back-end guys back end only guys are

00:00:32,030 --> 00:00:36,780
suddenly behaving very differently these

00:00:34,230 --> 00:00:40,590
days they're becoming back-end guys who

00:00:36,780 --> 00:00:43,230
are also willing to do front end their

00:00:40,590 --> 00:00:44,460
their ears are perking up when i

00:00:43,230 --> 00:00:47,700
mentioned that i'm doing angular

00:00:44,460 --> 00:00:53,190
training they do a sheepish it'll will

00:00:47,700 --> 00:00:56,430
can I come too and hard core java

00:00:53,190 --> 00:00:58,109
architects I'm seeing they've got a new

00:00:56,430 --> 00:01:01,230
tool to write they want to do

00:00:58,109 --> 00:01:03,239
authentication or they want to do a napi

00:01:01,230 --> 00:01:06,270
for storage or something and they'll

00:01:03,239 --> 00:01:08,880
write it in note not just because

00:01:06,270 --> 00:01:11,310
they're trying to be hip but because

00:01:08,880 --> 00:01:14,310
javascript does useful things really

00:01:11,310 --> 00:01:16,200
efficiently and really well so people

00:01:14,310 --> 00:01:18,150
now they know note they know about

00:01:16,200 --> 00:01:21,570
single page applications they get that

00:01:18,150 --> 00:01:23,340
that change they get grunts they get

00:01:21,570 --> 00:01:26,009
angular they get em ER they know about

00:01:23,340 --> 00:01:28,439
parse calm and OS 10 itself is now

00:01:26,009 --> 00:01:30,750
scriptable in JavaScript we have

00:01:28,439 --> 00:01:34,770
JavaScript editors written in JavaScript

00:01:30,750 --> 00:01:36,860
not 12 and they understand that the

00:01:34,770 --> 00:01:39,840
JavaScript ecosystem has suddenly become

00:01:36,860 --> 00:01:41,640
familiar to them that it does all the

00:01:39,840 --> 00:01:43,829
things they expect it to do that it has

00:01:41,640 --> 00:01:45,570
the tooling they expected to have but

00:01:43,829 --> 00:01:52,409
it's mature in the way they expect it to

00:01:45,570 --> 00:01:55,680
be whoo so truly we have a set of three

00:01:52,409 --> 00:01:58,409
powerful you I dev languages at our

00:01:55,680 --> 00:02:01,350
disposal that everybody loves and

00:01:58,409 --> 00:02:05,880
respects now all three of them are equal

00:02:01,350 --> 00:02:07,879
oh wait wait what happened you see

00:02:05,880 --> 00:02:10,720
there's this awkward moment in

00:02:07,879 --> 00:02:13,160
conversations about you i def

00:02:10,720 --> 00:02:14,840
with an old job of great beard or

00:02:13,160 --> 00:02:18,020
someone like that where we're talking

00:02:14,840 --> 00:02:24,350
about javascript is like yeah yeah yeah

00:02:18,020 --> 00:02:28,910
cool and then suddenly CSS comes up why

00:02:24,350 --> 00:02:31,160
is that why is it come play yeah there

00:02:28,910 --> 00:02:33,860
we go why is it that otherwise

00:02:31,160 --> 00:02:36,620
intelligent rational people suddenly

00:02:33,860 --> 00:02:38,540
become practically bigoted when we talk

00:02:36,620 --> 00:02:43,190
about our lovely little language about

00:02:38,540 --> 00:02:46,460
CSS so here's one especially telling

00:02:43,190 --> 00:02:50,030
example this particular guy that I work

00:02:46,460 --> 00:02:51,560
with is crazy ridiculous smart he's

00:02:50,030 --> 00:02:54,860
afraid of absolutely nothing in the

00:02:51,560 --> 00:03:00,050
technical world not even CSS in fact he

00:02:54,860 --> 00:03:03,050
wrote the the default drop in SAS sheet

00:03:00,050 --> 00:03:04,820
that our company uses so that you can

00:03:03,050 --> 00:03:06,890
get sort of you know instant Brander

00:03:04,820 --> 00:03:08,900
with all of your colors and fonts and

00:03:06,890 --> 00:03:11,840
logos and everything else he's the kind

00:03:08,900 --> 00:03:14,720
of guy who when he gets some gigantic

00:03:11,840 --> 00:03:16,640
Excel spreadsheet full of you know

00:03:14,720 --> 00:03:18,890
ridiculous business calculations that a

00:03:16,640 --> 00:03:21,290
consultant came up with and he's told to

00:03:18,890 --> 00:03:24,380
port all of that code over to a web

00:03:21,290 --> 00:03:26,840
interface so that the logic can get some

00:03:24,380 --> 00:03:30,350
data visualization tools in JavaScript

00:03:26,840 --> 00:03:33,110
he says yeah sure I could do it that way

00:03:30,350 --> 00:03:35,120
but that would be boring so how about if

00:03:33,110 --> 00:03:39,200
I instead figure out how to embed

00:03:35,120 --> 00:03:41,209
chromium inside of Excel and then create

00:03:39,200 --> 00:03:43,160
the API for communicating back and forth

00:03:41,209 --> 00:03:46,370
across the membrane right some advanced

00:03:43,160 --> 00:03:48,500
JavaScript visualization tools inside of

00:03:46,370 --> 00:03:52,519
that I think it does it all in like a

00:03:48,500 --> 00:03:54,590
week or two why does that guy who can

00:03:52,519 --> 00:03:57,739
stand with the best people in this room

00:03:54,590 --> 00:04:02,480
or really anywhere say that CSS is an

00:03:57,739 --> 00:04:04,790
anti language full of dark magic so

00:04:02,480 --> 00:04:07,820
let's savor this expression for a moment

00:04:04,790 --> 00:04:08,959
if if CSS were nearly a language full of

00:04:07,820 --> 00:04:13,310
dark magic it would be something

00:04:08,959 --> 00:04:15,290
powerful but evil like Voldemort but

00:04:13,310 --> 00:04:17,340
instead my buddy is trying to say that

00:04:15,290 --> 00:04:20,970
CSS doesn't even deserve

00:04:17,340 --> 00:04:22,889
bad ass street cred that it's instead an

00:04:20,970 --> 00:04:25,320
anti language and so it's inherently

00:04:22,889 --> 00:04:27,860
something fake and synthetic and

00:04:25,320 --> 00:04:31,790
unreliable and want to be more like

00:04:27,860 --> 00:04:33,900
Britney Spears with our head shaved then

00:04:31,790 --> 00:04:38,220
he-who-must-not-be-named which is a

00:04:33,900 --> 00:04:40,770
pretty awful sort of comparison so

00:04:38,220 --> 00:04:44,010
taking it for granted that my friend is

00:04:40,770 --> 00:04:46,070
just wrong about CSS it's not an anti

00:04:44,010 --> 00:04:50,400
language it's not full of dark magic

00:04:46,070 --> 00:04:52,680
where did it get the idea and why do we

00:04:50,400 --> 00:04:56,460
care what he thinks in the first place

00:04:52,680 --> 00:04:59,430
so I told with a couple theories about

00:04:56,460 --> 00:05:03,120
this starting with the idea that maybe

00:04:59,430 --> 00:05:04,860
they're all colorblind and you might

00:05:03,120 --> 00:05:07,400
think so based on the way that they

00:05:04,860 --> 00:05:10,260
dress compared to stylish you I people

00:05:07,400 --> 00:05:12,840
but but no they do multiple multiplayer

00:05:10,260 --> 00:05:16,770
gaming and they frag the right people so

00:05:12,840 --> 00:05:18,570
it's not color so maybe it's fonts maybe

00:05:16,770 --> 00:05:22,380
they have an allergy to seraphis or

00:05:18,570 --> 00:05:23,910
something maybe could it be could they

00:05:22,380 --> 00:05:27,990
be responsible for the greatest

00:05:23,910 --> 00:05:29,850
aesthetic plague of our time no the

00:05:27,990 --> 00:05:32,160
scientists now tell us that the plague

00:05:29,850 --> 00:05:33,660
of comic sons was principally carried

00:05:32,160 --> 00:05:36,120
into the world by secretary as an

00:05:33,660 --> 00:05:39,240
administrative assistance not by

00:05:36,120 --> 00:05:42,389
back-end devs and if you've ever seen a

00:05:39,240 --> 00:05:44,610
job guys been half as day tweaking a new

00:05:42,389 --> 00:05:47,639
installation of IntelliJ to get his

00:05:44,610 --> 00:05:56,039
monospaced fonts just right and his code

00:05:47,639 --> 00:05:58,830
coloring just right you'll know CSS nor

00:05:56,039 --> 00:06:02,389
is it that CSS doesn't do cool things

00:05:58,830 --> 00:06:06,000
and doing jerky screen captures with it

00:06:02,389 --> 00:06:07,680
CSS does awesome things increasingly it

00:06:06,000 --> 00:06:10,139
does things that we would have had to do

00:06:07,680 --> 00:06:12,720
the hard way in other languages with

00:06:10,139 --> 00:06:14,639
javascript in ways that weren't hardware

00:06:12,720 --> 00:06:19,229
optimized like our friend was just

00:06:14,639 --> 00:06:21,030
talking about so what gives then so i

00:06:19,229 --> 00:06:24,129
gave up the horizon and i just asked i

00:06:21,030 --> 00:06:28,119
said to these guys who made the e

00:06:24,129 --> 00:06:30,479
you face about CSS okay so what is it

00:06:28,119 --> 00:06:33,009
really tell me give me specifics and

00:06:30,479 --> 00:06:36,219
while the results of my survey are

00:06:33,009 --> 00:06:44,229
entirely unscientific they give us a

00:06:36,219 --> 00:06:46,989
starting place so boiled down to a few

00:06:44,229 --> 00:06:51,369
things and a few things that we're kind

00:06:46,989 --> 00:06:54,429
of shocking um things that we we all

00:06:51,369 --> 00:06:57,189
pretty much take for granted in fact you

00:06:54,429 --> 00:07:00,249
can't really train somebody in CSS

00:06:57,189 --> 00:07:01,330
without explaining these things or maybe

00:07:00,249 --> 00:07:04,719
not the third one that's a little

00:07:01,330 --> 00:07:07,419
opinionated but but the other two and

00:07:04,719 --> 00:07:11,979
especially this third one are kind of

00:07:07,419 --> 00:07:14,289
fundamental all right well so what do

00:07:11,979 --> 00:07:17,079
you make of that that that that's what

00:07:14,289 --> 00:07:20,429
they complain about like is it it

00:07:17,079 --> 00:07:22,839
there's two basic options i think one is

00:07:20,429 --> 00:07:24,999
they just need better better training

00:07:22,839 --> 00:07:29,349
right or maybe they need some motivation

00:07:24,999 --> 00:07:31,569
i tried once saying well you know CSS is

00:07:29,349 --> 00:07:33,669
really just or at least positioning CSS

00:07:31,569 --> 00:07:35,979
positioning is really just math and

00:07:33,669 --> 00:07:37,839
algorithms and so if you're not really

00:07:35,979 --> 00:07:40,740
good at math and algorithms i guess i

00:07:37,839 --> 00:07:44,740
can understand why you wouldn't like CSS

00:07:40,740 --> 00:07:47,649
that went over really well I I don't

00:07:44,740 --> 00:07:49,479
recommend it because it's not helpful

00:07:47,649 --> 00:07:51,369
it's not that it's not really really fun

00:07:49,479 --> 00:07:54,039
I recommend it if you just want to have

00:07:51,369 --> 00:07:56,800
fun but if what you're trying to do is

00:07:54,039 --> 00:08:02,769
persuade people that's not the way to go

00:07:56,800 --> 00:08:03,879
so option two is to think again to think

00:08:02,769 --> 00:08:06,099
about those things that we take for

00:08:03,879 --> 00:08:08,860
granted those things like the Cascade

00:08:06,099 --> 00:08:12,699
and specificity that we just take as as

00:08:08,860 --> 00:08:14,619
Givens and I realized that maybe the

00:08:12,699 --> 00:08:17,709
signal that I'm getting from these guys

00:08:14,619 --> 00:08:19,929
I respect and unfortunately they were

00:08:17,709 --> 00:08:23,829
all guys in my sample I apologize for

00:08:19,929 --> 00:08:25,689
that maybe we can do better what we're

00:08:23,829 --> 00:08:28,589
doing and we don't have to wait for

00:08:25,689 --> 00:08:31,539
browsers to change to make it possible

00:08:28,589 --> 00:08:33,320
we've been using CSS for so long now

00:08:31,539 --> 00:08:36,229
that we've maybe become a bit

00:08:33,320 --> 00:08:40,490
lined to the things it does to us to the

00:08:36,229 --> 00:08:43,070
hoops it makes us jump through I come to

00:08:40,490 --> 00:08:46,130
believe that the Cascade and the

00:08:43,070 --> 00:08:50,000
specificity algorithm themselves are

00:08:46,130 --> 00:08:54,040
very cool ideas they solve edge and

00:08:50,000 --> 00:08:57,200
corner cases in very important ways but

00:08:54,040 --> 00:09:00,080
because of them we've been fundamentally

00:08:57,200 --> 00:09:02,960
encouraged to do things that we should

00:09:00,080 --> 00:09:05,720
not do or at least that we should try

00:09:02,960 --> 00:09:08,780
very hard not to do they cause us in

00:09:05,720 --> 00:09:12,940
many cases to write CSS that's mushy in

00:09:08,780 --> 00:09:16,310
precise overlapping and hard to maintain

00:09:12,940 --> 00:09:18,710
code that normal humans let's think

00:09:16,310 --> 00:09:22,910
about that the browser understands it

00:09:18,710 --> 00:09:24,440
but humans don't an all code ideally the

00:09:22,910 --> 00:09:27,290
reason we don't just write it ones and

00:09:24,440 --> 00:09:30,200
zeros is so that humans can interpret it

00:09:27,290 --> 00:09:31,970
and predict the results without needing

00:09:30,200 --> 00:09:34,220
the browser's help without needing an

00:09:31,970 --> 00:09:37,760
execution engine in other words to make

00:09:34,220 --> 00:09:39,500
sense of what's going on so let's take a

00:09:37,760 --> 00:09:41,240
fresh start let's forget about the

00:09:39,500 --> 00:09:44,150
browser wars let's forget about the ear

00:09:41,240 --> 00:09:46,520
I back when people thought that HTML was

00:09:44,150 --> 00:09:49,070
a document format not a tool for

00:09:46,520 --> 00:09:51,890
building awesome interfaces what would

00:09:49,070 --> 00:09:53,750
we want from code that we built cool

00:09:51,890 --> 00:09:56,540
interfaces from if we're starting from

00:09:53,750 --> 00:09:59,240
scratch we want it dry we want it

00:09:56,540 --> 00:10:01,040
maintainable we want it predictable

00:09:59,240 --> 00:10:03,140
which are things that you'll hear every

00:10:01,040 --> 00:10:05,390
programmer in every language talking

00:10:03,140 --> 00:10:07,130
about constantly and i'm going to add

00:10:05,390 --> 00:10:09,830
another one to the list that you don't

00:10:07,130 --> 00:10:13,970
hear everybody say but that i think is

00:10:09,830 --> 00:10:17,540
is just as important don't optimize

00:10:13,970 --> 00:10:21,920
prematurely or premature optimization is

00:10:17,540 --> 00:10:24,380
the root of all evil so can we do with

00:10:21,920 --> 00:10:26,060
that how do we get there the specifics

00:10:24,380 --> 00:10:29,420
particularly around optimization are

00:10:26,060 --> 00:10:31,580
very much open to interpretation and my

00:10:29,420 --> 00:10:34,160
version of the specifics is pretty

00:10:31,580 --> 00:10:36,890
opinionated but these I think are some

00:10:34,160 --> 00:10:41,279
general principles that we can probably

00:10:36,890 --> 00:10:42,839
all rally around name all the things

00:10:41,279 --> 00:10:45,360
I put that TM there not because it's

00:10:42,839 --> 00:10:47,610
mine I did I owe it to a good friend of

00:10:45,360 --> 00:10:50,999
mine named chris hoffman super smart

00:10:47,610 --> 00:10:52,649
young coder and he makes the point that

00:10:50,999 --> 00:10:54,930
one of the things that we're just not

00:10:52,649 --> 00:10:57,540
taught you can go to the fanciest CS

00:10:54,930 --> 00:11:00,420
program ever and nobody will ever tell

00:10:57,540 --> 00:11:02,850
you that how you name things may be as

00:11:00,420 --> 00:11:04,949
important as everything else that you do

00:11:02,850 --> 00:11:07,050
in your application in terms of its

00:11:04,949 --> 00:11:09,959
maintainability you can write a program

00:11:07,050 --> 00:11:12,269
just for yourself and not care at all

00:11:09,959 --> 00:11:14,220
what things are called you can use hex

00:11:12,269 --> 00:11:17,160
codes the name everything if you want as

00:11:14,220 --> 00:11:19,439
long as you read hex codes fluently

00:11:17,160 --> 00:11:21,569
you'll be fine but the second you want

00:11:19,439 --> 00:11:23,939
it to be maintained by anybody other

00:11:21,569 --> 00:11:25,230
than yourself or even by yourself two

00:11:23,939 --> 00:11:30,920
days from now after you've worked on

00:11:25,230 --> 00:11:35,399
other things naming things is critical

00:11:30,920 --> 00:11:37,290
classes we can disagree about when

00:11:35,399 --> 00:11:40,649
exactly we should use a particular class

00:11:37,290 --> 00:11:42,180
whether to stack them or not but we can

00:11:40,649 --> 00:11:44,339
all agree that for some reason we've

00:11:42,180 --> 00:11:47,370
gotten it into our heads that classes

00:11:44,339 --> 00:11:49,050
you can have too many of them that you

00:11:47,370 --> 00:11:51,269
can have too many letters in the name of

00:11:49,050 --> 00:11:54,569
a class and I think we can make the case

00:11:51,269 --> 00:11:56,399
pretty clearly that that's not true be a

00:11:54,569 --> 00:11:59,639
lover not a fighter everybody can agree

00:11:56,399 --> 00:12:01,350
with that right and the last one again a

00:11:59,639 --> 00:12:03,959
little bit opinionated but I think

00:12:01,350 --> 00:12:07,829
you'll see where I'm going it's time to

00:12:03,959 --> 00:12:10,170
automate if you haven't done it yet so

00:12:07,829 --> 00:12:12,059
challenge number one and specific layout

00:12:10,170 --> 00:12:13,259
is the hardest thing about CSS people

00:12:12,059 --> 00:12:16,500
figure out how to change fonts and

00:12:13,259 --> 00:12:19,379
colors and CSS with in like an hour but

00:12:16,500 --> 00:12:21,000
layout takes much much longer because

00:12:19,379 --> 00:12:25,949
there's much more going on there's more

00:12:21,000 --> 00:12:27,809
possible points of failure right so this

00:12:25,949 --> 00:12:31,050
is the one common pain point that unites

00:12:27,809 --> 00:12:33,240
all beginning or part-time CSS devs you

00:12:31,050 --> 00:12:37,429
know those back-end dads who also do a

00:12:33,240 --> 00:12:41,149
little CSS in confusing them in

00:12:37,429 --> 00:12:43,690
aggravating them and I have I think a

00:12:41,149 --> 00:12:45,990
solution too much of

00:12:43,690 --> 00:12:45,990
what else

00:12:49,710 --> 00:12:55,140
if you care about making CSS and CSS

00:12:53,610 --> 00:12:58,680
layout in particular comprehensible to

00:12:55,140 --> 00:13:01,440
other people I truly think that you

00:12:58,680 --> 00:13:04,350
could get 90 yards down the field with

00:13:01,440 --> 00:13:06,990
this one little gem not the whole way

00:13:04,350 --> 00:13:10,620
but a lot of it the people who created

00:13:06,990 --> 00:13:15,650
this wonderful little gem that you've

00:13:10,620 --> 00:13:15,650
probably seen out on the interwebs

00:13:19,820 --> 00:13:27,540
they're talking about floats I'm

00:13:22,340 --> 00:13:30,150
convinced of it every bigoted anti CSS

00:13:27,540 --> 00:13:33,030
developer that I talk about talks about

00:13:30,150 --> 00:13:34,380
floats they say why the hell when I just

00:13:33,030 --> 00:13:37,500
want something to go over there on the

00:13:34,380 --> 00:13:39,720
right and stay put on the right and i

00:13:37,500 --> 00:13:44,310
use the CSS feature that has the word

00:13:39,720 --> 00:13:46,890
right in it does it not do what I want

00:13:44,310 --> 00:13:49,410
or anything remotely resembling what I

00:13:46,890 --> 00:13:51,300
want sure some things move right but it

00:13:49,410 --> 00:13:53,220
turns around and everything inside of it

00:13:51,300 --> 00:13:55,500
faces backwards and then it screws up

00:13:53,220 --> 00:13:58,800
everything that comes after it instead

00:13:55,500 --> 00:14:01,290
of this top one which would be a fairly

00:13:58,800 --> 00:14:04,080
normal toolbar and then a header

00:14:01,290 --> 00:14:06,260
underneath it or the one below it where

00:14:04,080 --> 00:14:11,910
you want your tool bar over on the right

00:14:06,260 --> 00:14:14,520
you use floats and you get this either

00:14:11,910 --> 00:14:18,060
your headers screwed up in the wrong

00:14:14,520 --> 00:14:21,060
place or if you are foolish enough to

00:14:18,060 --> 00:14:23,160
use float right everything gets reversed

00:14:21,060 --> 00:14:26,160
and your headers in the wrong place and

00:14:23,160 --> 00:14:28,080
this is a simple example okay if you've

00:14:26,160 --> 00:14:29,640
ever tried to throw a float into the

00:14:28,080 --> 00:14:32,220
middle of a complex layout that has a

00:14:29,640 --> 00:14:35,670
bunch of other stuff going on it can

00:14:32,220 --> 00:14:37,830
just totally explode now the very

00:14:35,670 --> 00:14:41,070
logical response of the people in this

00:14:37,830 --> 00:14:46,590
audience vast majority is just use a

00:14:41,070 --> 00:14:50,580
clear fix duh but let's be honest it's a

00:14:46,590 --> 00:14:54,630
hack it's a dirty hack and anybody who's

00:14:50,580 --> 00:14:55,980
in denial about a tackiness is in fact I

00:14:54,630 --> 00:14:59,820
believe suffering from more than a

00:14:55,980 --> 00:15:01,040
little Stockholm Syndrome floats were

00:14:59,820 --> 00:15:03,440
invented for one reason

00:15:01,040 --> 00:15:06,529
then one reason alone and alone to allow

00:15:03,440 --> 00:15:08,329
text to wrap around an image that's why

00:15:06,529 --> 00:15:11,329
they exist in because it was the guys at

00:15:08,329 --> 00:15:13,250
CERN he practically invented it it was

00:15:11,329 --> 00:15:16,040
meant to go around an image of like a

00:15:13,250 --> 00:15:18,709
super collider or something they were

00:15:16,040 --> 00:15:21,850
not floats were not intended to do what

00:15:18,709 --> 00:15:24,860
we do with them so I know this hurts but

00:15:21,850 --> 00:15:28,639
floats are the table based layout of our

00:15:24,860 --> 00:15:32,029
time stop doing it unless you have to

00:15:28,639 --> 00:15:34,610
support IE 6 or except in very specific

00:15:32,029 --> 00:15:36,380
very discreet situations like you've got

00:15:34,610 --> 00:15:38,120
that one thing at the end of the road

00:15:36,380 --> 00:15:40,459
that just needs them move over there and

00:15:38,120 --> 00:15:42,680
stay over there okay maybe but otherwise

00:15:40,459 --> 00:15:45,620
start making fun of the people who do

00:15:42,680 --> 00:15:47,480
basic layout with them don't hire people

00:15:45,620 --> 00:15:50,740
who say they've been doing CSS for 10

00:15:47,480 --> 00:15:55,160
years and then do it all with floats and

00:15:50,740 --> 00:15:56,779
switch to better options so inline-block

00:15:55,160 --> 00:15:58,880
even though it has its own

00:15:56,779 --> 00:16:01,579
idiosyncrasies with vertical alignment

00:15:58,880 --> 00:16:03,800
and white space at least does something

00:16:01,579 --> 00:16:05,959
resembling what you expect it to do

00:16:03,800 --> 00:16:08,779
based on its name and if you explain to

00:16:05,959 --> 00:16:12,649
people what in line is and what block is

00:16:08,779 --> 00:16:16,160
you can then explain inline-block and

00:16:12,649 --> 00:16:17,720
have them go oh right I get it it's like

00:16:16,160 --> 00:16:19,760
a paragraph that behaves like a

00:16:17,720 --> 00:16:23,600
character and flows across the page but

00:16:19,760 --> 00:16:25,279
takes up space okay cool you can explain

00:16:23,600 --> 00:16:27,110
this to a trainee you can explain this

00:16:25,279 --> 00:16:29,440
to one of the old job of gray beards who

00:16:27,110 --> 00:16:35,389
are dabbling a little you I dev and

00:16:29,440 --> 00:16:37,699
they'll be like oh yeah all right it's

00:16:35,389 --> 00:16:40,430
not the inline block is is totally

00:16:37,699 --> 00:16:43,550
perfect though flexbox on the other hand

00:16:40,430 --> 00:16:45,589
is perfect and I want to marry it but

00:16:43,550 --> 00:16:49,029
its father says it won't be of age until

00:16:45,589 --> 00:16:53,180
ie8 market share falls below ten percent

00:16:49,029 --> 00:16:54,709
the reason I love it is that it does

00:16:53,180 --> 00:16:57,740
what it should the way your fellow

00:16:54,709 --> 00:17:00,199
coders expect and if things do what they

00:16:57,740 --> 00:17:02,660
should and you can explain it to the

00:17:00,199 --> 00:17:04,189
other people on your team you win you

00:17:02,660 --> 00:17:06,780
have a colleague who supports you and

00:17:04,189 --> 00:17:09,540
doesn't call you a witch of practices

00:17:06,780 --> 00:17:11,880
magic and you get to stop fighting you

00:17:09,540 --> 00:17:14,160
get to be a lover not a fighter right

00:17:11,880 --> 00:17:17,010
stop working around things stop hacking

00:17:14,160 --> 00:17:18,450
and you can build stuff that behaves

00:17:17,010 --> 00:17:20,400
rationally and provides a good

00:17:18,450 --> 00:17:24,630
foundation for that flexbox future

00:17:20,400 --> 00:17:27,570
whenever it does eventually come and

00:17:24,630 --> 00:17:29,340
then my final note is just that if if

00:17:27,570 --> 00:17:30,990
for anybody in the audience is like well

00:17:29,340 --> 00:17:33,600
it's not that bad a hack I don't even

00:17:30,990 --> 00:17:37,890
have to use extra HTML anymore to apply

00:17:33,600 --> 00:17:40,740
a clear fix in order to do that you have

00:17:37,890 --> 00:17:45,090
to have a browser that already supports

00:17:40,740 --> 00:17:47,820
not using floats anymore okay so so just

00:17:45,090 --> 00:17:49,470
just move on and then here's where I get

00:17:47,820 --> 00:17:51,150
really opinionated and I'm going to poke

00:17:49,470 --> 00:17:54,330
some people in a way that they don't

00:17:51,150 --> 00:17:57,630
like I love accessibility but I think

00:17:54,330 --> 00:18:00,120
that m's most of the time in most cases

00:17:57,630 --> 00:18:01,980
until you prove in a use case for them

00:18:00,120 --> 00:18:04,440
are probably more trouble than they're

00:18:01,980 --> 00:18:07,140
worth but I'm gonna let that go because

00:18:04,440 --> 00:18:09,780
it's it's there for you to just chew on

00:18:07,140 --> 00:18:12,570
and meditate on so what's

00:18:09,780 --> 00:18:16,110
maintainability ok we've addressed the

00:18:12,570 --> 00:18:18,080
the one crazy pain point about floats in

00:18:16,110 --> 00:18:21,150
a nutshell its readability and

00:18:18,080 --> 00:18:23,130
reusability now very few people are

00:18:21,150 --> 00:18:24,840
going to oppose readability and

00:18:23,130 --> 00:18:26,970
reusability on principle right nobody

00:18:24,840 --> 00:18:29,760
says I want my code to not be

00:18:26,970 --> 00:18:32,070
maintainable to not be readable to not

00:18:29,760 --> 00:18:34,820
be reusable what happens instead is that

00:18:32,070 --> 00:18:37,740
some junior dev commits some stuff and

00:18:34,820 --> 00:18:40,380
unless you spend a half hour staring at

00:18:37,740 --> 00:18:43,080
it it's never going to make sense and so

00:18:40,380 --> 00:18:45,390
you go to them and you ask and they say

00:18:43,080 --> 00:18:51,120
well yeah this codes a little hard to

00:18:45,390 --> 00:18:54,780
maintain but dude it's optimized like

00:18:51,120 --> 00:18:59,310
it's a magic wand that excuses all sins

00:18:54,780 --> 00:19:03,600
that you wave it over it does not and

00:18:59,310 --> 00:19:07,680
the truth is that what we think we spend

00:19:03,600 --> 00:19:11,160
all of our time doing is not where we

00:19:07,680 --> 00:19:13,130
actually spend all of our time we spend

00:19:11,160 --> 00:19:22,950
all of our time

00:19:13,130 --> 00:19:26,220
doing this stuff so any habit that we

00:19:22,950 --> 00:19:28,320
have that's about typing less or making

00:19:26,220 --> 00:19:32,700
things be shorter we're having there be

00:19:28,320 --> 00:19:35,690
less text on the page is probably anti

00:19:32,700 --> 00:19:39,890
maintainability so what is

00:19:35,690 --> 00:19:43,880
maintainability so dr. one of my idols

00:19:39,890 --> 00:19:46,500
Venkat Subramanyam and others they say

00:19:43,880 --> 00:19:49,440
premature optimization is the root of

00:19:46,500 --> 00:19:51,930
all evil which I agree with but I think

00:19:49,440 --> 00:19:55,160
that mrs. an important point or another

00:19:51,930 --> 00:19:59,000
way of thinking about it it's premature

00:19:55,160 --> 00:20:01,440
execution optimization premature runtime

00:19:59,000 --> 00:20:03,660
optimization that is the root of all

00:20:01,440 --> 00:20:06,510
evil we're always going to make a choice

00:20:03,660 --> 00:20:07,440
about what to optimize for the second

00:20:06,510 --> 00:20:10,380
you sit down and start writing code

00:20:07,440 --> 00:20:13,310
you're optimizing writing code that is

00:20:10,380 --> 00:20:17,430
optimized for developer productivity and

00:20:13,310 --> 00:20:20,520
maintainability is never premature it's

00:20:17,430 --> 00:20:25,650
never wrong you may go back and refactor

00:20:20,520 --> 00:20:27,570
it later but you're going to do that

00:20:25,650 --> 00:20:30,630
because you hit that sucker with a

00:20:27,570 --> 00:20:34,050
profiler and you proved that in some

00:20:30,630 --> 00:20:36,900
meaningful way your maintainable code is

00:20:34,050 --> 00:20:38,820
producing sub optimal results some user

00:20:36,900 --> 00:20:42,720
observable latency more than 100

00:20:38,820 --> 00:20:45,890
milliseconds let's say if so only then

00:20:42,720 --> 00:20:49,050
should you make non-trivial set

00:20:45,890 --> 00:20:50,640
non-trivial sacrifices of the

00:20:49,050 --> 00:20:53,400
maintainability that you've worked so

00:20:50,640 --> 00:20:55,650
hard for in return for execution

00:20:53,400 --> 00:20:57,420
optimization so let me be explicit let

00:20:55,650 --> 00:21:01,260
me say it again straight up I'm not

00:20:57,420 --> 00:21:04,050
against execution optimization I'm not

00:21:01,260 --> 00:21:07,320
against giving our users fantastic quick

00:21:04,050 --> 00:21:08,970
snappy near-native experiences or

00:21:07,320 --> 00:21:11,220
against any particular optimizing

00:21:08,970 --> 00:21:13,470
technique again if you're writing code

00:21:11,220 --> 00:21:16,290
you're always optimizing for something

00:21:13,470 --> 00:21:18,480
just at the outset know that it's your

00:21:16,290 --> 00:21:20,940
developers that arm the most expensive

00:21:18,480 --> 00:21:21,770
most precious resource that you probably

00:21:20,940 --> 00:21:23,720
have

00:21:21,770 --> 00:21:26,420
okay if you're working for amazon if

00:21:23,720 --> 00:21:28,160
you're working for new york times you

00:21:26,420 --> 00:21:30,680
already have hundreds of millions of

00:21:28,160 --> 00:21:33,500
users you have customers and those

00:21:30,680 --> 00:21:36,110
customers make you a lot of money they

00:21:33,500 --> 00:21:38,300
are extremely precious your developers

00:21:36,110 --> 00:21:40,850
will have to adapt okay but if you're

00:21:38,300 --> 00:21:43,490
not in that position chances are you

00:21:40,850 --> 00:21:48,980
need to optimize for what's rarest in

00:21:43,490 --> 00:21:51,380
your shop when you decide to do

00:21:48,980 --> 00:21:52,940
something else do it with proof not your

00:21:51,380 --> 00:21:55,280
hunch not your assumption that you're

00:21:52,940 --> 00:21:57,170
prejudiced the the evolution of the

00:21:55,280 --> 00:21:59,810
browser engines has made a lot of our

00:21:57,170 --> 00:22:03,050
old prejudices about performance

00:21:59,810 --> 00:22:04,580
outdated we could someone far better

00:22:03,050 --> 00:22:07,370
than me could spend an entire session

00:22:04,580 --> 00:22:11,960
just talking about those things so I'm

00:22:07,370 --> 00:22:14,750
just going to float it out there and and

00:22:11,960 --> 00:22:16,610
let it go all right so we're all on

00:22:14,750 --> 00:22:19,100
board with the main idea how do we get

00:22:16,610 --> 00:22:22,670
maintainability how does it apply to CSS

00:22:19,100 --> 00:22:25,000
here's my very opinionated perspective

00:22:22,670 --> 00:22:25,000
on this

00:22:29,810 --> 00:22:41,970
so let's look at details this first one

00:22:34,730 --> 00:22:45,060
automate or die whoops oh I hate these

00:22:41,970 --> 00:22:50,940
when you copy the transitions you didn't

00:22:45,060 --> 00:22:52,770
expect automation automation is easier

00:22:50,940 --> 00:22:55,440
than you think quick survey how many

00:22:52,770 --> 00:23:02,790
people use a pre compiler for almost

00:22:55,440 --> 00:23:03,870
everything they write yeah okay how many

00:23:02,790 --> 00:23:07,350
people should have raised their hands

00:23:03,870 --> 00:23:10,290
just now but didn't okay good thank you

00:23:07,350 --> 00:23:12,180
honesty all right there's a lot of fear

00:23:10,290 --> 00:23:15,030
uncertainty and doubt for people who

00:23:12,180 --> 00:23:18,000
come out of HTML and CSS and design

00:23:15,030 --> 00:23:21,060
about pre compilers they're like ooh no

00:23:18,000 --> 00:23:26,460
scary difficult hard and really it's

00:23:21,060 --> 00:23:31,680
optional it's not optional anymore it's

00:23:26,460 --> 00:23:33,720
easier than you think and I strongly

00:23:31,680 --> 00:23:35,550
strongly recommend if you're just

00:23:33,720 --> 00:23:37,320
getting started with it try yeoman

00:23:35,550 --> 00:23:40,950
yeoman provides you with an entire

00:23:37,320 --> 00:23:42,690
workflow that includes a compiler it's

00:23:40,950 --> 00:23:44,100
tightly integrated with compass so you

00:23:42,690 --> 00:23:47,040
can give that a try but try anything

00:23:44,100 --> 00:23:51,210
else but give it a try don't be afraid

00:23:47,040 --> 00:23:54,930
of it you will figure it out point

00:23:51,210 --> 00:23:57,300
number two and new age is upon us I'm

00:23:54,930 --> 00:24:00,030
not going to belabor this point but what

00:23:57,300 --> 00:24:02,820
I'm seeing all over the world it started

00:24:00,030 --> 00:24:06,150
in New York and San Francisco and is

00:24:02,820 --> 00:24:08,190
making its way everywhere is that the

00:24:06,150 --> 00:24:11,340
time is coming when it's going to be

00:24:08,190 --> 00:24:15,090
hard for us to have the jobs that we

00:24:11,340 --> 00:24:18,800
want to have if we say nope I'm just a

00:24:15,090 --> 00:24:22,920
in HTML and CSS and light JavaScript guy

00:24:18,800 --> 00:24:25,590
this new age I think requires that

00:24:22,920 --> 00:24:28,680
almost everybody get on board with

00:24:25,590 --> 00:24:30,530
automation get on board with tooling get

00:24:28,680 --> 00:24:33,460
on board with making your code more

00:24:30,530 --> 00:24:36,110
amiable and even just with the idea that

00:24:33,460 --> 00:24:39,380
CSS isn't just presentation it's not

00:24:36,110 --> 00:24:41,510
just style it's code and it needs to be

00:24:39,380 --> 00:24:45,410
maintained with the same tools that we

00:24:41,510 --> 00:24:47,720
use for other code again we could spend

00:24:45,410 --> 00:24:50,090
an entire session on millions of

00:24:47,720 --> 00:24:55,220
examples about why that is about what a

00:24:50,090 --> 00:24:59,000
compiler gets you but here's a few oh

00:24:55,220 --> 00:25:01,040
and yeah a comparison I'm sure that

00:24:59,000 --> 00:25:03,710
everybody in this room everybody

00:25:01,040 --> 00:25:06,650
everybody everybody uses a reset or a

00:25:03,710 --> 00:25:08,810
normal answer right if you if you aren't

00:25:06,650 --> 00:25:11,240
you should the browser doesn't make you

00:25:08,810 --> 00:25:12,800
do that the technology doesn't require

00:25:11,240 --> 00:25:15,020
you when you first start writing your

00:25:12,800 --> 00:25:18,200
code to specify your normalizer file

00:25:15,020 --> 00:25:21,290
right just like it doesn't force you to

00:25:18,200 --> 00:25:23,450
use compass or SAS or less or it's

00:25:21,290 --> 00:25:27,020
stylist or whatever tool it is whatever

00:25:23,450 --> 00:25:28,910
syntax it is that you like but we accept

00:25:27,020 --> 00:25:30,890
now that it makes our code better it

00:25:28,910 --> 00:25:34,640
makes our jobs easier and I think it's

00:25:30,890 --> 00:25:36,200
time that it became a universal that we

00:25:34,640 --> 00:25:41,330
also understood the same thing about pre

00:25:36,200 --> 00:25:43,310
compilers all right so everybody's heard

00:25:41,330 --> 00:25:44,570
okay anybody who's heard of a pre

00:25:43,310 --> 00:25:46,010
compiler has heard that there are these

00:25:44,570 --> 00:25:47,750
things called variables that there are

00:25:46,010 --> 00:25:49,850
these things called mix-ins and the

00:25:47,750 --> 00:25:52,880
question is what do they really get me

00:25:49,850 --> 00:25:54,290
ok here's the first obviously we talked

00:25:52,880 --> 00:25:56,510
about maintainability and how

00:25:54,290 --> 00:25:58,820
maintainability is about readability how

00:25:56,510 --> 00:26:01,130
many people really like reading hex

00:25:58,820 --> 00:26:04,580
codes raise your hand who likes reading

00:26:01,130 --> 00:26:06,080
hex codes oh and and who prefers rgba

00:26:04,580 --> 00:26:07,820
that's a little easier right because you

00:26:06,080 --> 00:26:09,440
can tell whether you added some opacity

00:26:07,820 --> 00:26:10,730
to it at the end and if the numbers

00:26:09,440 --> 00:26:12,500
really high you know that it's really

00:26:10,730 --> 00:26:14,090
dark and rich and if it's really low you

00:26:12,500 --> 00:26:18,110
know that it's really light that makes

00:26:14,090 --> 00:26:20,060
it easy right to know which color which

00:26:18,110 --> 00:26:23,270
hex code or which rgba that you're

00:26:20,060 --> 00:26:26,960
looking at is ugly greenish blue right

00:26:23,270 --> 00:26:30,620
so why not just start naming things ugly

00:26:26,960 --> 00:26:32,300
greenish blue put that hex code in there

00:26:30,620 --> 00:26:34,970
once when you define your variable and

00:26:32,300 --> 00:26:37,160
now every other time you look at it it's

00:26:34,970 --> 00:26:37,700
written for your brain it's written for

00:26:37,160 --> 00:26:40,429
you

00:26:37,700 --> 00:26:43,669
understand and now you're like okay I

00:26:40,429 --> 00:26:45,409
can get behind that but where does the

00:26:43,669 --> 00:26:47,779
program income in the programming comes

00:26:45,409 --> 00:26:50,389
in when you realize that once you're

00:26:47,779 --> 00:26:53,450
dealing with ugly greenish-blue you can

00:26:50,389 --> 00:26:56,059
now do things like say well okay yeah I

00:26:53,450 --> 00:26:57,919
was going to go to my color picker and

00:26:56,059 --> 00:27:00,350
mess around with the sliders until I

00:26:57,919 --> 00:27:02,960
figured out how to make five different

00:27:00,350 --> 00:27:06,399
darker and lighter versions of ugly

00:27:02,960 --> 00:27:09,710
greenish blue or my red in this case or

00:27:06,399 --> 00:27:11,990
you can just use a compiler and let that

00:27:09,710 --> 00:27:14,240
compiler do it for you and boom

00:27:11,990 --> 00:27:16,669
instantly you've got all five of them

00:27:14,240 --> 00:27:19,549
and you're still using names that you

00:27:16,669 --> 00:27:22,190
understand you're using ugly greenish

00:27:19,549 --> 00:27:24,049
blue minus ten percent now right and

00:27:22,190 --> 00:27:26,240
everywhere in your application that you

00:27:24,049 --> 00:27:29,659
need it you write ugly greenish blue

00:27:26,240 --> 00:27:31,340
minus ten percent and you get it and

00:27:29,659 --> 00:27:33,019
when the day comes that you're like you

00:27:31,340 --> 00:27:35,029
know what this version isn't dark enough

00:27:33,019 --> 00:27:37,669
what I really need here is ugly greenish

00:27:35,029 --> 00:27:40,010
blue minus twenty percent a couple

00:27:37,669 --> 00:27:42,380
characters you're done you just saved

00:27:40,010 --> 00:27:43,730
yourself a lot of work you save the

00:27:42,380 --> 00:27:45,919
people who are coming after you trying

00:27:43,730 --> 00:27:47,899
to understand what you do a lot of work

00:27:45,919 --> 00:27:53,720
and it's about a seemingly doping little

00:27:47,899 --> 00:27:56,320
thing colors oh and themes anybody ever

00:27:53,720 --> 00:27:58,399
do theming or want to do theming a

00:27:56,320 --> 00:28:00,470
precompiler lets you define a few

00:27:58,399 --> 00:28:03,049
variables for one theme and then all of

00:28:00,470 --> 00:28:05,510
your base rules then define some other

00:28:03,049 --> 00:28:08,240
variables for your other theme same base

00:28:05,510 --> 00:28:10,669
rules mix and match boom you've got two

00:28:08,240 --> 00:28:13,460
different themed style sheets you only

00:28:10,669 --> 00:28:15,620
wrote one style sheet it gives you stuff

00:28:13,460 --> 00:28:17,299
like that that's awesome and who's done

00:28:15,620 --> 00:28:19,850
responsive everybody wants responsive

00:28:17,299 --> 00:28:21,620
these days right have you ever seen

00:28:19,850 --> 00:28:23,899
those monsters where there's an entire

00:28:21,620 --> 00:28:26,240
style sheet at one size and then an

00:28:23,899 --> 00:28:28,820
entire style sheet at another size and

00:28:26,240 --> 00:28:31,159
maybe two more after that or if it's not

00:28:28,820 --> 00:28:33,350
a whole separate style sheet it's just

00:28:31,159 --> 00:28:34,850
one gigantic monster style sheet and

00:28:33,350 --> 00:28:36,799
first you have to wade through all the

00:28:34,850 --> 00:28:38,179
ones at the small size before you then

00:28:36,799 --> 00:28:40,250
finally get down to the ones that are

00:28:38,179 --> 00:28:42,919
the big size and the medium size and the

00:28:40,250 --> 00:28:45,440
ones in between what if instead you

00:28:42,919 --> 00:28:48,530
could say I've got this component and I

00:28:45,440 --> 00:28:50,870
want that at one size it's going to

00:28:48,530 --> 00:28:52,610
with the seventy eight percent and at

00:28:50,870 --> 00:28:56,510
another break point I want it to have a

00:28:52,610 --> 00:28:58,100
width of fifty percent or even actually

00:28:56,510 --> 00:29:00,530
at another breakpoint I just wanted to

00:28:58,100 --> 00:29:02,420
disappear altogether and I wanted to do

00:29:00,530 --> 00:29:05,630
that in a way that's semantics readable

00:29:02,420 --> 00:29:09,260
easy to maintain you can use mix-ins

00:29:05,630 --> 00:29:11,840
like this please steal this that allow

00:29:09,260 --> 00:29:15,560
you to do exactly that instead of three

00:29:11,840 --> 00:29:17,600
different style sheets instead of making

00:29:15,560 --> 00:29:20,570
your life really difficult you can use

00:29:17,600 --> 00:29:21,950
mix-ins and all of a sudden you're

00:29:20,570 --> 00:29:25,520
looking at something and you're saying

00:29:21,950 --> 00:29:28,190
up when the screen is big make it big

00:29:25,520 --> 00:29:30,320
when the screen is medium make it medium

00:29:28,190 --> 00:29:34,130
what it's really tiny make it disappear

00:29:30,320 --> 00:29:36,590
all in one space altogether all where

00:29:34,130 --> 00:29:38,780
you can get your brain around it after

00:29:36,590 --> 00:29:41,290
you've done ten other things and come

00:29:38,780 --> 00:29:45,230
back and are like what was I thinking

00:29:41,290 --> 00:29:50,000
that's what programmability that's what

00:29:45,230 --> 00:29:51,770
automation gets you and all of that just

00:29:50,000 --> 00:29:53,360
these few variables to define your

00:29:51,770 --> 00:29:57,440
screen sizes these are actually based on

00:29:53,360 --> 00:29:59,600
the boots crap boot strap screen sizes

00:29:57,440 --> 00:30:03,740
should you find yourself trying to hack

00:29:59,600 --> 00:30:05,990
bootstrap to use their responsive

00:30:03,740 --> 00:30:08,690
patterns it's actually fairly easy to

00:30:05,990 --> 00:30:11,420
just modify their their sizes by just

00:30:08,690 --> 00:30:12,610
changing these variables all right so

00:30:11,420 --> 00:30:17,720
what else can you do with automation

00:30:12,610 --> 00:30:20,750
browser prefixes suck so you can use

00:30:17,720 --> 00:30:21,590
mix-ins okay just define once that you

00:30:20,750 --> 00:30:24,050
need all these different browser

00:30:21,590 --> 00:30:25,730
prefixes for a particular feature slap

00:30:24,050 --> 00:30:29,390
in the mix in wherever you're using that

00:30:25,730 --> 00:30:31,760
feature and you're done or bonus points

00:30:29,390 --> 00:30:35,630
if you use yeoman you'll see that yeoman

00:30:31,760 --> 00:30:37,520
has a tool called Auto pre fixer okay so

00:30:35,630 --> 00:30:39,710
yeoman is the next level out that's when

00:30:37,520 --> 00:30:42,110
you have your CSS your programming your

00:30:39,710 --> 00:30:44,900
CSS with compass then you're programming

00:30:42,110 --> 00:30:49,670
your entire application in an

00:30:44,900 --> 00:30:52,220
environment based on node it'll change

00:30:49,670 --> 00:30:54,440
your life truly if you mess around with

00:30:52,220 --> 00:30:57,450
browser prefixes this stuff will change

00:30:54,440 --> 00:31:05,580
your life alright

00:30:57,450 --> 00:31:07,470
next point Oh name all the things i love

00:31:05,580 --> 00:31:09,059
this i think it picks up on some memes

00:31:07,470 --> 00:31:11,460
although actually i don't even have the

00:31:09,059 --> 00:31:13,710
pictures of the the cool means that it

00:31:11,460 --> 00:31:15,240
references so it just sounds cute but

00:31:13,710 --> 00:31:20,460
name all the things and name them

00:31:15,240 --> 00:31:24,899
clearly so who was it that told us that

00:31:20,460 --> 00:31:26,880
this thing at the top okay where you

00:31:24,899 --> 00:31:30,149
aren't naming things were you just using

00:31:26,880 --> 00:31:34,519
element selectors li a what's a good

00:31:30,149 --> 00:31:39,659
idea why not just named those a's

00:31:34,519 --> 00:31:43,500
clearly right why are we treating them

00:31:39,659 --> 00:31:47,370
like classes or something need to be

00:31:43,500 --> 00:31:54,179
rationed it's okay um and and i

00:31:47,370 --> 00:31:56,309
recommend stop doing this using element

00:31:54,179 --> 00:31:59,309
selectors even when you're first

00:31:56,309 --> 00:32:00,630
roughing things out it's okay to use a

00:31:59,309 --> 00:32:02,610
class name that you're going to change

00:32:00,630 --> 00:32:03,690
later it's okay to use a class name that

00:32:02,610 --> 00:32:05,970
you're going to change two or three

00:32:03,690 --> 00:32:09,000
times that's a simple find and replace

00:32:05,970 --> 00:32:11,279
what's not okay is when the new junior

00:32:09,000 --> 00:32:13,950
dev that you hire spends three months

00:32:11,279 --> 00:32:16,529
working around your redefinitions of UL

00:32:13,950 --> 00:32:19,049
and table before they finally get up the

00:32:16,529 --> 00:32:22,500
courage to ask did you really mean to do

00:32:19,049 --> 00:32:24,240
that and can i change it please what's

00:32:22,500 --> 00:32:26,070
even worse is when you come back to a

00:32:24,240 --> 00:32:27,899
project six months later and you can't

00:32:26,070 --> 00:32:30,320
figure out who on earth was responsible

00:32:27,899 --> 00:32:32,970
for doing something so foolish as to

00:32:30,320 --> 00:32:35,580
redefine course tiles instead of naming

00:32:32,970 --> 00:32:39,029
them and you realize you're the only one

00:32:35,580 --> 00:32:43,769
who's ever written any of the CSS that's

00:32:39,029 --> 00:32:47,190
bad so stop rationing your classes okay

00:32:43,769 --> 00:32:49,559
we act a lot of stuff that we see on the

00:32:47,190 --> 00:32:52,889
web that tells us how to write our

00:32:49,559 --> 00:32:57,179
selectors and to do things like specific

00:32:52,889 --> 00:33:00,779
selector li a it acts like classes a

00:32:57,179 --> 00:33:02,850
radioactive to use too many of them in

00:33:00,779 --> 00:33:05,490
too much proximity to each other things

00:33:02,850 --> 00:33:08,010
will blow up that for some reason

00:33:05,490 --> 00:33:11,490
selectors without classes

00:33:08,010 --> 00:33:14,910
are cooler like classes are messing up

00:33:11,490 --> 00:33:17,190
our HTML they're not they also like to

00:33:14,910 --> 00:33:19,440
make us feel clever think about the

00:33:17,190 --> 00:33:23,070
first time that you ever used a pseudo

00:33:19,440 --> 00:33:27,480
selector like first child or perhaps n

00:33:23,070 --> 00:33:29,490
child 3 um you're like yeah look what i

00:33:27,480 --> 00:33:33,780
just did huh you can't even see it there

00:33:29,490 --> 00:33:37,320
all right yeah no i I've done that

00:33:33,780 --> 00:33:39,480
everybody does that try it once figure

00:33:37,320 --> 00:33:42,750
out how it works and then rip it back

00:33:39,480 --> 00:33:45,090
out be afraid of that instinct to be

00:33:42,750 --> 00:33:46,410
clever to to do things that you want to

00:33:45,090 --> 00:33:49,410
reach over and pointed somebody and say

00:33:46,410 --> 00:33:52,950
look what I just did because it'll end

00:33:49,410 --> 00:33:55,440
in pain and speed wise classes are

00:33:52,950 --> 00:33:58,380
efficient as it gets okay there is no

00:33:55,440 --> 00:34:00,420
selector literally that is faster not

00:33:58,380 --> 00:34:03,990
even an IDs far as I know IDs and

00:34:00,420 --> 00:34:07,159
selectors are nearly always identical in

00:34:03,990 --> 00:34:10,649
speed or very nearly so right but

00:34:07,159 --> 00:34:15,300
specific selector space li space a is

00:34:10,649 --> 00:34:16,530
not or is not the same so use clear

00:34:15,300 --> 00:34:17,850
descriptive classes so that you don't

00:34:16,530 --> 00:34:20,370
have to hunt for things so you don't

00:34:17,850 --> 00:34:22,560
have to guess where things are class

00:34:20,370 --> 00:34:24,000
names should tell us where to expect to

00:34:22,560 --> 00:34:26,310
find something when we're looking at our

00:34:24,000 --> 00:34:29,070
CSS when we're looking at our HTML there

00:34:26,310 --> 00:34:30,840
should be a clear link between them now

00:34:29,070 --> 00:34:33,240
sometimes the hardest thing about using

00:34:30,840 --> 00:34:35,669
good descriptive names is just inventing

00:34:33,240 --> 00:34:38,970
ones that make sense that's why there

00:34:35,669 --> 00:34:47,210
are some great systems out there vem OCS

00:34:38,970 --> 00:34:49,470
suit they will help you do that and a

00:34:47,210 --> 00:34:52,470
lot of the time when i recommend this to

00:34:49,470 --> 00:34:54,450
people people say i don't need to use BM

00:34:52,470 --> 00:34:57,560
them however you like to pronounce it I

00:34:54,450 --> 00:35:02,970
don't need to do that I namespace I

00:34:57,560 --> 00:35:07,680
names based me some stuff and now name

00:35:02,970 --> 00:35:09,800
spacing is not bad but if what you're

00:35:07,680 --> 00:35:11,440
saying is that you want to use

00:35:09,800 --> 00:35:13,480
unforgivably general

00:35:11,440 --> 00:35:16,359
helpful names for things and that's okay

00:35:13,480 --> 00:35:18,510
because you namespace you're saying well

00:35:16,359 --> 00:35:21,970
I've made it statistically improbable

00:35:18,510 --> 00:35:25,480
that I'll actually have a collision at

00:35:21,970 --> 00:35:28,720
runtime you're saying I'm having it I'm

00:35:25,480 --> 00:35:30,910
terrified of repeating that really

00:35:28,720 --> 00:35:32,950
embarrassing bug that we spent a week

00:35:30,910 --> 00:35:34,900
solvent that was actually caused by

00:35:32,950 --> 00:35:36,760
giving two things the same name and

00:35:34,900 --> 00:35:39,130
you're saying I really don't give a

00:35:36,760 --> 00:35:42,160
rat's ass about making me and my fellow

00:35:39,130 --> 00:35:44,770
developers more efficient I just care

00:35:42,160 --> 00:35:47,829
about avoiding embarrassment okay name

00:35:44,770 --> 00:35:50,650
spacing is not a bad thing but don't let

00:35:47,829 --> 00:35:53,349
it be a substitute for doing other

00:35:50,650 --> 00:35:55,150
things and don't over do it we're going

00:35:53,349 --> 00:35:57,510
to see an example of overdoing it just a

00:35:55,150 --> 00:35:57,510
second

00:36:01,400 --> 00:36:07,220
so we've talked about naming things

00:36:03,200 --> 00:36:09,770
clearly and that gets us to element

00:36:07,220 --> 00:36:13,340
selectors and why I think that they're

00:36:09,770 --> 00:36:15,140
bad and why I think relying on the

00:36:13,340 --> 00:36:17,780
specificity algorithm to figure out

00:36:15,140 --> 00:36:19,880
which one we were talking about or

00:36:17,780 --> 00:36:22,520
thought we were talking about is bad the

00:36:19,880 --> 00:36:24,650
specificity algorithm okay everybody

00:36:22,520 --> 00:36:27,590
who's heard of the specificity algorithm

00:36:24,650 --> 00:36:29,810
right it's that thing that makes those

00:36:27,590 --> 00:36:32,270
five different competing rules decide

00:36:29,810 --> 00:36:34,400
which one applies and which one doesn't

00:36:32,270 --> 00:36:36,110
which rule shows up at the top and the

00:36:34,400 --> 00:36:38,330
chrome dev tools and which ones show up

00:36:36,110 --> 00:36:40,490
further down in the bottom yeah it's an

00:36:38,330 --> 00:36:43,070
algorithm yeah it's math and I made fun

00:36:40,490 --> 00:36:44,840
of the math guys earlier but basically

00:36:43,070 --> 00:36:48,290
it's long division by four hundred and

00:36:44,840 --> 00:36:49,730
seventeen point 23 carry the two round

00:36:48,290 --> 00:36:52,700
to the nearest thousand and spin around

00:36:49,730 --> 00:36:55,160
the mulberry bush right it's it's not

00:36:52,700 --> 00:36:58,480
something that you can use meaningfully

00:36:55,160 --> 00:37:02,300
on a daily basis and your back-end guy

00:36:58,480 --> 00:37:04,880
that that dabbler in CSS is quite right

00:37:02,300 --> 00:37:06,170
to be suspicious of it when they look at

00:37:04,880 --> 00:37:08,360
your code and they see that you're

00:37:06,170 --> 00:37:10,580
relying on it that you're using that is

00:37:08,360 --> 00:37:12,470
the way to distinguish between a whole

00:37:10,580 --> 00:37:14,660
bunch of element selectors and sub

00:37:12,470 --> 00:37:16,640
selectors and descendant selectors that

00:37:14,660 --> 00:37:22,250
incorporate things with really vague

00:37:16,640 --> 00:37:28,130
hard to maintain names so I strongly

00:37:22,250 --> 00:37:29,720
recommend avoiding element selectors

00:37:28,130 --> 00:37:33,200
which are the number one reason that we

00:37:29,720 --> 00:37:35,390
wind up fighting the Cascade and hoping

00:37:33,200 --> 00:37:38,360
that specificity algorithm is on our

00:37:35,390 --> 00:37:41,000
side today on the one good use for them

00:37:38,360 --> 00:37:43,070
is resets and normalizes okay we're

00:37:41,000 --> 00:37:48,400
truly Universal styles like declaring

00:37:43,070 --> 00:37:51,290
this font everywhere all the time done

00:37:48,400 --> 00:37:53,030
or links thanks sir could use them

00:37:51,290 --> 00:37:55,670
because it's something that you'll use

00:37:53,030 --> 00:37:58,250
almost everywhere or everywhere

00:37:55,670 --> 00:37:59,960
everywhere and never need to redefine it

00:37:58,250 --> 00:38:01,700
never need to customize it never need to

00:37:59,960 --> 00:38:06,380
style in some sites not every but it

00:38:01,700 --> 00:38:09,230
does it that way so what do we do to get

00:38:06,380 --> 00:38:11,030
around our our vague element selectors

00:38:09,230 --> 00:38:11,460
right when we can't figure out how to

00:38:11,030 --> 00:38:13,710
get

00:38:11,460 --> 00:38:15,330
rule that we want to apply up to the top

00:38:13,710 --> 00:38:18,060
of the list and the chrome dev tools

00:38:15,330 --> 00:38:22,560
instead of being somewhere further down

00:38:18,060 --> 00:38:25,800
we use important using important is

00:38:22,560 --> 00:38:27,870
pretty much always a code smell code

00:38:25,800 --> 00:38:31,170
smell is a term that people throw around

00:38:27,870 --> 00:38:35,640
a lot in other languages it means in a

00:38:31,170 --> 00:38:38,190
nutshell it just I can't explain quite

00:38:35,640 --> 00:38:41,820
why this is wrong in 10 seconds or less

00:38:38,190 --> 00:38:45,210
it's just not it smells funny it just

00:38:41,820 --> 00:38:46,800
throws off that odor of not being

00:38:45,210 --> 00:38:50,070
something that I'm going to be able to

00:38:46,800 --> 00:38:55,080
maintain important is pretty much always

00:38:50,070 --> 00:38:57,330
a code smell so consider again we can't

00:38:55,080 --> 00:38:59,670
go into the details here consider using

00:38:57,330 --> 00:39:02,370
something like extend or include in your

00:38:59,670 --> 00:39:04,560
precompiler to create a narrower class

00:39:02,370 --> 00:39:07,170
to be able to redefine your classes

00:39:04,560 --> 00:39:14,190
easily rather than fight the existing

00:39:07,170 --> 00:39:15,450
one and where is so we're finally going

00:39:14,190 --> 00:39:17,520
to get we're going to stop talk we're

00:39:15,450 --> 00:39:20,370
going to talk about nesting okay this is

00:39:17,520 --> 00:39:23,790
this is the final nesting and nesting

00:39:20,370 --> 00:39:27,090
can mean descendant selectors it can be

00:39:23,790 --> 00:39:29,460
over nesting in our CSS I'm fusing a

00:39:27,090 --> 00:39:31,380
couple things together here we're going

00:39:29,460 --> 00:39:37,310
to get to a description very shortly I

00:39:31,380 --> 00:39:39,840
think of vem so the general use of

00:39:37,310 --> 00:39:41,580
descendant selectors where you've got

00:39:39,840 --> 00:39:44,280
these three different rules somewhere in

00:39:41,580 --> 00:39:46,970
your website fighting with each other

00:39:44,280 --> 00:39:50,850
competing with each other overlapping

00:39:46,970 --> 00:39:53,580
this is anathema to knowing what's going

00:39:50,850 --> 00:39:55,890
to happen okay to being predictable to

00:39:53,580 --> 00:39:58,560
being readable and yet we've been taught

00:39:55,890 --> 00:40:01,740
to do it since day one right doing

00:39:58,560 --> 00:40:03,840
specific thing space Li space a it's in

00:40:01,740 --> 00:40:06,540
like all the manuals all the tutorials

00:40:03,840 --> 00:40:10,770
all the guidebooks about how selectors

00:40:06,540 --> 00:40:12,990
work right but they lock your content

00:40:10,770 --> 00:40:15,690
into a single context making it really

00:40:12,990 --> 00:40:16,240
hard to reuse it someplace else or move

00:40:15,690 --> 00:40:18,010
it

00:40:16,240 --> 00:40:20,590
to someplace else it also makes it

00:40:18,010 --> 00:40:22,750
really hard to move anything else into a

00:40:20,590 --> 00:40:27,610
given context right so you use a

00:40:22,750 --> 00:40:29,200
descendant selector on on on some stuff

00:40:27,610 --> 00:40:31,270
and then you try to drop in a jQuery

00:40:29,200 --> 00:40:33,730
date picker or something well guess what

00:40:31,270 --> 00:40:35,890
it has tons more of those same elements

00:40:33,730 --> 00:40:38,440
that you just redefined using a

00:40:35,890 --> 00:40:42,510
descendant selector and now those are

00:40:38,440 --> 00:40:42,510
all descendants of what you created

00:40:42,930 --> 00:40:47,320
another kind of nesting a lot of folks

00:40:45,850 --> 00:40:48,460
when they start using pre compilers

00:40:47,320 --> 00:40:52,210
particularly if they come from a world

00:40:48,460 --> 00:40:55,540
view that is all about name spacing is

00:40:52,210 --> 00:40:58,030
they'll say oh great fantastic compass

00:40:55,540 --> 00:41:00,430
will let me name space that crap out of

00:40:58,030 --> 00:41:02,380
every single CSS rule that I have a

00:41:00,430 --> 00:41:04,960
right and then I'll get this visual

00:41:02,380 --> 00:41:07,300
indication that this second rule in

00:41:04,960 --> 00:41:08,800
purple is inside of that other rule in

00:41:07,300 --> 00:41:12,090
purple and then that other one is inside

00:41:08,800 --> 00:41:15,730
of that and what you wind up with is

00:41:12,090 --> 00:41:18,160
this example over here at the top where

00:41:15,730 --> 00:41:21,640
you your five deep and we've only gotten

00:41:18,160 --> 00:41:26,290
like 20 lines down this CSS file i have

00:41:21,640 --> 00:41:29,740
seen examples of this where to address a

00:41:26,290 --> 00:41:32,110
single element on a single page people

00:41:29,740 --> 00:41:38,940
are using descendant selectors with 20

00:41:32,110 --> 00:41:43,780
or 30 or 40 components that's really

00:41:38,940 --> 00:41:45,820
really inefficient I'm not here to make

00:41:43,780 --> 00:41:48,340
specific points about inefficiency I can

00:41:45,820 --> 00:41:51,660
tell you with a for a fact absolutely

00:41:48,340 --> 00:41:55,000
uncertain with with no uncertainty that

00:41:51,660 --> 00:42:01,060
nesting your selectors 40 deep is always

00:41:55,000 --> 00:42:03,010
bad a hallways whereas there is ZERO

00:42:01,060 --> 00:42:05,950
difference performance-wise at runtime

00:42:03,010 --> 00:42:08,350
between a class that has two letters in

00:42:05,950 --> 00:42:10,990
its name in a class that has 50 letters

00:42:08,350 --> 00:42:12,730
in its name okay think about that think

00:42:10,990 --> 00:42:14,590
about that difference think about the

00:42:12,730 --> 00:42:17,260
typing issue oh I don't want to type all

00:42:14,590 --> 00:42:19,270
those extra characters well you'll be

00:42:17,260 --> 00:42:22,030
able to read it you'll understand what

00:42:19,270 --> 00:42:24,650
it does and it runs as fast or faster

00:42:22,030 --> 00:42:28,970
than anything else that you've ever

00:42:24,650 --> 00:42:30,260
ought to do the most important thing

00:42:28,970 --> 00:42:33,230
that you can understand performance wise

00:42:30,260 --> 00:42:35,329
is that selectors work from right to

00:42:33,230 --> 00:42:38,839
left okay so that thing we do where

00:42:35,329 --> 00:42:40,369
there's the ID space Li space a we think

00:42:38,839 --> 00:42:42,049
oh well I'm starting with the most

00:42:40,369 --> 00:42:43,609
specific piece over there on the left

00:42:42,049 --> 00:42:46,400
which means that I've narrowed it down

00:42:43,609 --> 00:42:48,890
man I found the one tiny little piece

00:42:46,400 --> 00:42:50,539
and then it's okay if I just say well

00:42:48,890 --> 00:42:53,180
give me all the lis inside of that

00:42:50,539 --> 00:42:56,240
that's not how it works it's actually

00:42:53,180 --> 00:42:58,700
the opposite of that when the CSS

00:42:56,240 --> 00:43:00,710
matcher implements your rules it's going

00:42:58,700 --> 00:43:03,380
to go through the entire page and find

00:43:00,710 --> 00:43:06,589
all of whatever's on the right so if

00:43:03,380 --> 00:43:08,960
you're doing specific selector that sent

00:43:06,589 --> 00:43:13,190
my specific selector then Li than a it

00:43:08,960 --> 00:43:15,980
starts with all the A's every single one

00:43:13,190 --> 00:43:18,049
and then goes actually call them anchors

00:43:15,980 --> 00:43:20,990
and starts with all the anchors and goes

00:43:18,049 --> 00:43:24,710
up from there it has to reparse the

00:43:20,990 --> 00:43:27,650
entire tree of elements above every

00:43:24,710 --> 00:43:30,770
single a on the entire page to find out

00:43:27,650 --> 00:43:34,279
which of them contains all of these

00:43:30,770 --> 00:43:38,119
additional elements or you can use a

00:43:34,279 --> 00:43:40,220
single class so the fact that we can do

00:43:38,119 --> 00:43:42,859
stuff the fact that the specificity

00:43:40,220 --> 00:43:45,619
algorithm in the Cascade let us do this

00:43:42,859 --> 00:43:49,910
doesn't mean that we should in fact I

00:43:45,619 --> 00:43:53,990
would argue that we should try start

00:43:49,910 --> 00:43:55,760
getting away from it you can nest things

00:43:53,990 --> 00:44:00,079
without stacking this is a general

00:43:55,760 --> 00:44:02,569
example of one variant one syntax of BBM

00:44:00,079 --> 00:44:06,049
where you can use the ampersand over

00:44:02,569 --> 00:44:07,880
here to nest one style within another

00:44:06,049 --> 00:44:09,740
style to indicate that they're related

00:44:07,880 --> 00:44:12,529
that you're always going to find one

00:44:09,740 --> 00:44:15,500
within the other but then the actual

00:44:12,529 --> 00:44:17,339
compiled CSS down at the bottom does not

00:44:15,500 --> 00:44:20,130
actually you make turn them into

00:44:17,339 --> 00:44:21,930
selectors this gives you all the same

00:44:20,130 --> 00:44:23,369
readability all the same ability to

00:44:21,930 --> 00:44:25,589
express where you expect to find

00:44:23,369 --> 00:44:28,079
something without all of the overhead

00:44:25,589 --> 00:44:30,349
without all of the inefficiency all the

00:44:28,079 --> 00:44:33,089
same benefits none of the disadvantages

00:44:30,349 --> 00:44:34,799
and if you don't like those systems that

00:44:33,089 --> 00:44:37,319
at least just you start using

00:44:34,799 --> 00:44:39,119
indentation for your name spacing

00:44:37,319 --> 00:44:41,759
instead of putting everything inside of

00:44:39,119 --> 00:44:44,460
everything else it's a rule of thumb

00:44:41,759 --> 00:44:46,529
nest selectors and stack classes when

00:44:44,460 --> 00:44:50,400
you have to not just when the browser

00:44:46,529 --> 00:44:53,789
will let you and neston stack whenever

00:44:50,400 --> 00:44:58,170
possible mix-ins and extends rather than

00:44:53,789 --> 00:45:00,059
your selectors themselves if you do that

00:44:58,170 --> 00:45:02,190
if you use descriptive classes rather

00:45:00,059 --> 00:45:05,150
than ones that you've stacked a mile

00:45:02,190 --> 00:45:08,700
deep it means that refactoring is easy

00:45:05,150 --> 00:45:11,549
overrides if they're necessary happen

00:45:08,700 --> 00:45:13,859
exactly where you can see them in your

00:45:11,549 --> 00:45:15,329
code instead of it being something that

00:45:13,859 --> 00:45:17,880
you have to puzzle out in the browser

00:45:15,329 --> 00:45:19,589
and the dev tools and if it comes time

00:45:17,880 --> 00:45:22,319
to refactor for performance a lot of the

00:45:19,589 --> 00:45:23,849
performance of folks are like no no man

00:45:22,319 --> 00:45:25,710
and I have to use stacked classes

00:45:23,849 --> 00:45:30,029
because I have to be able to reuse these

00:45:25,710 --> 00:45:32,999
most commonly accessed chunks of style

00:45:30,029 --> 00:45:34,829
if you it so if you take those most

00:45:32,999 --> 00:45:38,579
commonly accessed chunks of style and

00:45:34,829 --> 00:45:40,589
make them into a mix in it's easy to

00:45:38,579 --> 00:45:43,589
refactor them into a separate class but

00:45:40,589 --> 00:45:47,309
it's really hard to go the other way so

00:45:43,589 --> 00:45:48,900
pros and cons there's quite a few but

00:45:47,309 --> 00:45:52,859
we're going to blow through them in

00:45:48,900 --> 00:45:54,539
general try not to and think about how

00:45:52,859 --> 00:45:56,729
many of the reasons that we stack our

00:45:54,539 --> 00:45:59,759
classes are because they're waving the

00:45:56,729 --> 00:46:01,319
you gotta go sign and me in the back how

00:45:59,759 --> 00:46:04,979
many of the reasons that we stack our

00:46:01,319 --> 00:46:06,299
classes are because we don't those of

00:46:04,979 --> 00:46:08,339
you who don't use pre compilers you

00:46:06,299 --> 00:46:10,469
can't see this but once you do use them

00:46:08,339 --> 00:46:16,200
you'll be like oh I was doing that

00:46:10,469 --> 00:46:18,150
because I didn't have this ok and so our

00:46:16,200 --> 00:46:21,040
very last point that I have like 10

00:46:18,150 --> 00:46:23,050
seconds avoid unnecessarily complex

00:46:21,040 --> 00:46:25,270
that means don't use elements because

00:46:23,050 --> 00:46:26,890
somebody told you you should don't use

00:46:25,270 --> 00:46:29,320
things because somebody told you they're

00:46:26,890 --> 00:46:32,650
semantics and don't feel guilty not

00:46:29,320 --> 00:46:35,980
doing it use the most flexible elements

00:46:32,650 --> 00:46:38,050
you can get and not the ones that you

00:46:35,980 --> 00:46:39,400
think you're supposed to use use the

00:46:38,050 --> 00:46:44,530
ones that let you read maintainable code

00:46:39,400 --> 00:46:47,860
and avoid the pseudo selectors it's not

00:46:44,530 --> 00:46:49,780
that they're never ever okay but you

00:46:47,860 --> 00:46:54,670
should use them as a last resort when

00:46:49,780 --> 00:46:57,760
you have to not because it'll make you

00:46:54,670 --> 00:47:00,400
feel clever to to find a way to squeeze

00:46:57,760 --> 00:47:01,570
it in to get that number two item to

00:47:00,400 --> 00:47:03,870
have a different style than that number

00:47:01,570 --> 00:47:06,870
one item there's probably another way

00:47:03,870 --> 00:47:06,870
thank

00:47:13,990 --> 00:47:18,980
yeah so you've kind of like gone against

00:47:16,340 --> 00:47:21,230
the grain you know the kind of practice

00:47:18,980 --> 00:47:23,480
do you have any suggestions for like

00:47:21,230 --> 00:47:27,369
further readings by that like where

00:47:23,480 --> 00:47:29,540
would you start in this approach the

00:47:27,369 --> 00:47:32,119
yeah the one thing I don't have in this

00:47:29,540 --> 00:47:37,670
presentation is like a see also my

00:47:32,119 --> 00:47:39,500
reference right um the I think you can

00:47:37,670 --> 00:47:44,750
get a lot of what I'm going for by

00:47:39,500 --> 00:47:46,609
reading the documentation around BM BM

00:47:44,750 --> 00:47:47,810
is not the only one it's not my favorite

00:47:46,609 --> 00:47:49,340
one but it seems to be the one that's

00:47:47,810 --> 00:47:51,890
getting a lot of action right now and

00:47:49,340 --> 00:47:55,670
it's the one that's focused on naming

00:47:51,890 --> 00:47:58,730
things well on declarative clear named

00:47:55,670 --> 00:48:01,850
on being able to whenever possible have

00:47:58,730 --> 00:48:04,940
be able to look at your code see what it

00:48:01,850 --> 00:48:08,450
means and have their be preferably when

00:48:04,940 --> 00:48:10,940
possible one class on it that

00:48:08,450 --> 00:48:12,500
documentation and then read the articles

00:48:10,940 --> 00:48:14,180
about people arguing back and forth

00:48:12,500 --> 00:48:15,920
about which parts of that are good and

00:48:14,180 --> 00:48:17,450
which parts of that are bad which parts

00:48:15,920 --> 00:48:19,970
mess with performance which parts don't

00:48:17,450 --> 00:48:21,380
that is probably the best available

00:48:19,970 --> 00:48:25,100
right now I don't think anybody has

00:48:21,380 --> 00:48:29,000
written a book about this approach that

00:48:25,100 --> 00:48:32,320
and compilers you know the document the

00:48:29,000 --> 00:48:35,210
the compiler documentation and API

00:48:32,320 --> 00:48:39,290
tutorials about how to do that and why

00:48:35,210 --> 00:48:41,720
to do that these are to me the best

00:48:39,290 --> 00:48:46,000
sources right now of how to start

00:48:41,720 --> 00:48:46,000

YouTube URL: https://www.youtube.com/watch?v=Tk_0qYEFtAY


