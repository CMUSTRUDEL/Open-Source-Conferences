Title: Ryan Seddon: Performant UIs Using CSS Magic - CSSConf.Asia 2014
Publication date: 2015-01-17
Playlist: CSSConf.Asia 2014
Description: 
	Performance doesn’t end with making our sites load fast it’s also crucial in improving perceived speed and creating delight with silky smooth animations that creates beautiful UX for our websites and web apps.
In this talk we’ll explore how you can identify and improve performance using the various dev tools as well as techniques used to make sure animations run at the golden standard of 60fps.

Ryan is a Tech Lead at Zendesk. Hailing from Melbourne Australia, he has an unnatural obsession with CSS, JavaScript and the many places it runs. In his spare time he’s either hiking, writing for his blog thecssninja.com or committing code to github.

CSSConf.Asia - Bridging Design and Implementation. Amara Sanctuary, Singapore - 19 November 2014.

Source: http://2014.cssconf.asia/#speakers
Slides: http://ryanseddon.github.io/css_magic-talk/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:16,220 --> 00:00:22,859
so I'm gonna be talking about

00:00:18,350 --> 00:00:24,420
performance user interfaces using CSS

00:00:22,859 --> 00:00:27,330
magic so kind of trying to take that

00:00:24,420 --> 00:00:29,210
magic of CSS and trying to explain what

00:00:27,330 --> 00:00:31,700
is actually going on and how you can

00:00:29,210 --> 00:00:34,590
make and use the dev tools to measure

00:00:31,700 --> 00:00:36,210
performance and define where performance

00:00:34,590 --> 00:00:37,739
bottlenecks are etc and find issues

00:00:36,210 --> 00:00:41,129
using the different tools we have

00:00:37,739 --> 00:00:44,280
available so yeah I'm Ryan Sedin from

00:00:41,129 --> 00:00:46,739
Melbourne Australia I did a fun little

00:00:44,280 --> 00:00:49,170
animation they're going to call play

00:00:46,739 --> 00:00:51,809
with it works on touch as well and just

00:00:49,170 --> 00:00:54,870
to show that like performance is more

00:00:51,809 --> 00:00:57,690
than just about HTTP it's about the user

00:00:54,870 --> 00:00:59,609
experience and also about how fast you

00:00:57,690 --> 00:01:02,129
can paint to the screen so there's sort

00:00:59,609 --> 00:01:04,229
of two sides to it I'm mostly going to

00:01:02,129 --> 00:01:05,220
like the the technical side of it but

00:01:04,229 --> 00:01:09,810
i'll cover slightly some of the

00:01:05,220 --> 00:01:11,580
animation side so animation can improve

00:01:09,810 --> 00:01:13,860
performance whether you're a technical

00:01:11,580 --> 00:01:15,270
person and you like you like you look at

00:01:13,860 --> 00:01:16,920
the animation you think I this is really

00:01:15,270 --> 00:01:18,330
well executed or you're just a general

00:01:16,920 --> 00:01:21,960
user and you sort of get some delight

00:01:18,330 --> 00:01:24,150
out of it well executed animation it

00:01:21,960 --> 00:01:26,250
really instills the perception of like a

00:01:24,150 --> 00:01:28,799
really well performing application well

00:01:26,250 --> 00:01:31,860
that's on the web and mobile and it's

00:01:28,799 --> 00:01:35,360
not the bad old days of 22nd transitions

00:01:31,860 --> 00:01:38,939
and flash this is about like to enhance

00:01:35,360 --> 00:01:40,710
the animations and the user experience a

00:01:38,939 --> 00:01:44,310
really great example that I've seen is

00:01:40,710 --> 00:01:46,140
the stripe check out page I'm going to

00:01:44,310 --> 00:01:47,549
Adam Atticus there you can see that

00:01:46,140 --> 00:01:48,960
comes in really nicely and it looks so

00:01:47,549 --> 00:01:50,430
really cool and how everything sort of

00:01:48,960 --> 00:01:54,420
interacts and like sort of like it's got

00:01:50,430 --> 00:01:55,649
a pseudo physics pace set up um necron

00:01:54,420 --> 00:01:57,840
it looks really perform it and looks

00:01:55,649 --> 00:02:00,750
like that it's like a really nice user

00:01:57,840 --> 00:02:04,469
experience to use so how could you do

00:02:00,750 --> 00:02:05,790
this yourself a not sure how strive did

00:02:04,469 --> 00:02:08,550
a technically themselves but there is a

00:02:05,790 --> 00:02:10,619
couple tools that I've seen one called

00:02:08,550 --> 00:02:11,970
bass chairs and that allows you to do is

00:02:10,619 --> 00:02:13,980
sort of like pseudo based physics

00:02:11,970 --> 00:02:16,110
animation so you can do like Springs

00:02:13,980 --> 00:02:17,580
staff interferes with each other and you

00:02:16,110 --> 00:02:20,580
get that sort of nice spring emotion

00:02:17,580 --> 00:02:23,519
natural sort of movement in your

00:02:20,580 --> 00:02:24,989
application and the web is capable of

00:02:23,519 --> 00:02:26,459
native performance I ain't using that

00:02:24,989 --> 00:02:28,849
word Nettie's performance but they've

00:02:26,459 --> 00:02:30,959
sort of set the bar of what users expect

00:02:28,849 --> 00:02:32,310
but it's a lot harder on the web because

00:02:30,959 --> 00:02:37,290
it's really easy to degrade performance

00:02:32,310 --> 00:02:38,549
and not no way so that's kind of

00:02:37,290 --> 00:02:41,129
animation side so I'm going to go into

00:02:38,549 --> 00:02:43,170
sort of like a case study this is like a

00:02:41,129 --> 00:02:44,310
little project I built and we had a

00:02:43,170 --> 00:02:45,690
performance issue with it and I couldn't

00:02:44,310 --> 00:02:47,160
figure out what so sort of like my

00:02:45,690 --> 00:02:48,900
journey and how I discovered what was

00:02:47,160 --> 00:02:52,349
going on and sort of what the browser

00:02:48,900 --> 00:02:54,090
does so I read this library called

00:02:52,349 --> 00:02:55,650
scroll this view so just be too

00:02:54,090 --> 00:02:57,840
background on it it's kind of like a put

00:02:55,650 --> 00:03:00,720
the idea was a performance scrolling

00:02:57,840 --> 00:03:02,640
library it's not like I scroller doesn't

00:03:00,720 --> 00:03:06,569
do like the bathroom stuff but what it

00:03:02,640 --> 00:03:08,180
does is it basically works like in iOS

00:03:06,569 --> 00:03:11,010
development they've got the UI tableview

00:03:08,180 --> 00:03:12,569
essentially it'll display as many cells

00:03:11,010 --> 00:03:15,030
that needs to to fit the viewport and

00:03:12,569 --> 00:03:16,940
then only a few more either side and as

00:03:15,030 --> 00:03:19,349
you scroll it sort of reorders the cells

00:03:16,940 --> 00:03:22,349
and I'll show you an animation of that

00:03:19,349 --> 00:03:24,090
second mi own uses the flexbox order

00:03:22,349 --> 00:03:26,419
property so rather than using like

00:03:24,090 --> 00:03:29,099
transformed to or position up to loop to

00:03:26,419 --> 00:03:30,599
reposition an element or even ripping

00:03:29,099 --> 00:03:32,849
out of the dolmen replacing it down the

00:03:30,599 --> 00:03:35,639
bottom we can rely on the algorithm that

00:03:32,849 --> 00:03:37,380
flexbox has and this has had more

00:03:35,639 --> 00:03:39,450
benefits where I can have variable

00:03:37,380 --> 00:03:41,010
height cells so a lot of those a lot of

00:03:39,450 --> 00:03:43,169
the scrolling values you'll see that I

00:03:41,010 --> 00:03:45,840
always have a fixed fight and with the

00:03:43,169 --> 00:03:49,340
flexi-box order property you can you can

00:03:45,840 --> 00:03:53,730
do some really cool stuff this is a

00:03:49,340 --> 00:03:55,319
animated gif you can see I this is a

00:03:53,730 --> 00:03:57,930
chrome tracing so this is like a really

00:03:55,319 --> 00:03:58,799
low level tool but more importantly I

00:03:57,930 --> 00:04:01,799
just wanted to show like how the

00:03:58,799 --> 00:04:04,379
scrolling work so you can see up here as

00:04:01,799 --> 00:04:06,239
I scroll the cells move down bottom here

00:04:04,379 --> 00:04:08,040
it's kind of replacing and that's the

00:04:06,239 --> 00:04:09,329
flexbox order property being changed on

00:04:08,040 --> 00:04:11,160
those elements and so look this

00:04:09,329 --> 00:04:13,650
experience painting that's kind of like

00:04:11,160 --> 00:04:15,540
a 3d view so that's the scroll container

00:04:13,650 --> 00:04:17,699
and that's like the browser window you

00:04:15,540 --> 00:04:19,199
see it gives you like a frame-by-frame

00:04:17,699 --> 00:04:20,970
look at what's going on in the browser

00:04:19,199 --> 00:04:23,849
but it was a nice way to demonstrate

00:04:20,970 --> 00:04:25,530
what it's actually doing I wrote an

00:04:23,849 --> 00:04:27,450
article about this so you can check out

00:04:25,530 --> 00:04:32,700
my blog the CSS dinger if you want to

00:04:27,450 --> 00:04:35,450
have a look and there was a problem so

00:04:32,700 --> 00:04:39,870
let me actually show you a live demo of

00:04:35,450 --> 00:04:41,790
it here so you can see the the scrolling

00:04:39,870 --> 00:04:44,130
here I've got like a list item in here

00:04:41,790 --> 00:04:46,110
so this initially has 20 items but to

00:04:44,130 --> 00:04:48,390
just feel the viewport its renders 8

00:04:46,110 --> 00:04:50,690
list items and you can see I put the

00:04:48,390 --> 00:04:53,310
order property on there so as I scroll

00:04:50,690 --> 00:04:54,570
and see that adjusts and now that's down

00:04:53,310 --> 00:04:56,130
to bottom so it's going to disagree

00:04:54,570 --> 00:04:57,300
ordering as you go and just adds up

00:04:56,130 --> 00:04:58,980
adding to the top so you keep that

00:04:57,300 --> 00:05:02,100
scroll position so you can scroll

00:04:58,980 --> 00:05:08,610
through a lot of stuffs and it works

00:05:02,100 --> 00:05:10,590
pretty well so it doesn't sales and

00:05:08,610 --> 00:05:11,790
performance problem with it so as I

00:05:10,590 --> 00:05:13,830
showed you there it works pretty well it

00:05:11,790 --> 00:05:15,930
works fine and good example working at

00:05:13,830 --> 00:05:17,610
mobile and it works well so as you like

00:05:15,930 --> 00:05:19,320
normal as a user that goes through their

00:05:17,610 --> 00:05:22,410
Facebook feed or Twitter feed a sort of

00:05:19,320 --> 00:05:23,520
scroll at a steady pace but when you

00:05:22,410 --> 00:05:24,870
start to do high-velocity solar

00:05:23,520 --> 00:05:25,740
scrolling so you get to the bottom of

00:05:24,870 --> 00:05:27,990
the list and then you want to scroll

00:05:25,740 --> 00:05:30,780
really quickly the top and you build

00:05:27,990 --> 00:05:32,700
momentum of the scroll the screen starts

00:05:30,780 --> 00:05:33,870
like whiting up I see who they like it

00:05:32,700 --> 00:05:37,890
just goes blank and doesn't render

00:05:33,870 --> 00:05:41,250
anything and I didn't know why so I'll

00:05:37,890 --> 00:05:44,400
go back and I'll show you demo so if i

00:05:41,250 --> 00:05:46,050
drag the scroll bar you can see it's

00:05:44,400 --> 00:05:47,160
kind of just wiped out there and not

00:05:46,050 --> 00:05:49,440
sure why if i scroll a little bit

00:05:47,160 --> 00:05:52,020
suddenly repainting it and it's kind of

00:05:49,440 --> 00:05:53,730
confusing why that's happened there's

00:05:52,020 --> 00:05:55,350
like steady pace it's fine but then when

00:05:53,730 --> 00:05:57,240
you start like really getting some

00:05:55,350 --> 00:06:00,270
movement happening it sort of like

00:05:57,240 --> 00:06:06,630
renders what's that and something is

00:06:00,270 --> 00:06:07,920
going on and that's animated gifs of

00:06:06,630 --> 00:06:09,240
showing it so it's null scrolling and

00:06:07,920 --> 00:06:13,320
then just drag it you can see you like

00:06:09,240 --> 00:06:16,500
it just gets white with family so why is

00:06:13,320 --> 00:06:18,960
that so to understand why we need to

00:06:16,500 --> 00:06:21,180
sort of take a step back and understand

00:06:18,960 --> 00:06:24,180
the performance the cost of changing its

00:06:21,180 --> 00:06:25,530
CSS property there's a few things that

00:06:24,180 --> 00:06:26,730
happen and ending on what's this is

00:06:25,530 --> 00:06:28,890
probably you change different things

00:06:26,730 --> 00:06:32,070
happen really good website you should

00:06:28,890 --> 00:06:33,900
check out is CSS triggers calm so this

00:06:32,070 --> 00:06:35,430
is basically like a nice little search

00:06:33,900 --> 00:06:37,740
tool you can search recessive property

00:06:35,430 --> 00:06:40,480
and a layout and tell you like this it

00:06:37,740 --> 00:06:44,130
caused a paint that's caused a reflow

00:06:40,480 --> 00:06:45,940
or does it just cause a composite and

00:06:44,130 --> 00:06:47,740
looking up the order property

00:06:45,940 --> 00:06:49,540
essentially order when you have you

00:06:47,740 --> 00:06:51,220
change it update it it causes a reflow

00:06:49,540 --> 00:06:53,740
and a paint which is expensive in the

00:06:51,220 --> 00:06:56,880
browser and it if it needs to do a lot

00:06:53,740 --> 00:06:59,050
then then some things can happen

00:06:56,880 --> 00:07:00,580
essentially the only really safe

00:06:59,050 --> 00:07:04,230
properties you can do we are updating a

00:07:00,580 --> 00:07:07,090
lot transform so like scale rotate

00:07:04,230 --> 00:07:09,310
translate and a past Atia there are only

00:07:07,090 --> 00:07:11,200
really safe ones to do because what the

00:07:09,310 --> 00:07:13,240
browser does that composite it to the

00:07:11,200 --> 00:07:14,830
GPU and the GPU then handles that and

00:07:13,240 --> 00:07:16,890
there's no sort of reflow your paints

00:07:14,830 --> 00:07:19,230
happening and if you're translating

00:07:16,890 --> 00:07:21,100
elements using those two properties

00:07:19,230 --> 00:07:23,800
otherwise everything else is kind of

00:07:21,100 --> 00:07:27,580
detrimental and will will degrade

00:07:23,800 --> 00:07:29,200
performance and that is a screen grab

00:07:27,580 --> 00:07:32,080
from the CSS triggers so you can see

00:07:29,200 --> 00:07:33,490
like order on when it initializes and

00:07:32,080 --> 00:07:36,250
went to updates the causes the layout

00:07:33,490 --> 00:07:37,420
paint and composite and you kind of want

00:07:36,250 --> 00:07:41,760
to stick to just properties of do

00:07:37,420 --> 00:07:43,540
composites for a performance-based us

00:07:41,760 --> 00:07:45,040
another side of it is knowing your

00:07:43,540 --> 00:07:46,920
paints versus reflow so it's kind of

00:07:45,040 --> 00:07:49,030
rudimentary knowledge of the browser

00:07:46,920 --> 00:07:50,650
it's two different diets so a pain is

00:07:49,030 --> 00:07:52,240
like a non geometric change so that's

00:07:50,650 --> 00:07:54,100
when you change out the background color

00:07:52,240 --> 00:07:56,050
or the background image something it

00:07:54,100 --> 00:07:58,420
doesn't affect like the dimensions of

00:07:56,050 --> 00:08:01,960
the page a reflow the other side so when

00:07:58,420 --> 00:08:04,570
you affect the dimension so you change

00:08:01,960 --> 00:08:06,100
the font size you change a margin got a

00:08:04,570 --> 00:08:08,020
border etc anything that where the

00:08:06,100 --> 00:08:11,950
browser needs to recalculate little

00:08:08,020 --> 00:08:14,140
stuff is missing an example so encourage

00:08:11,950 --> 00:08:16,330
so toggling like visibility that's just

00:08:14,140 --> 00:08:19,120
the paint because it's not it's a non

00:08:16,330 --> 00:08:20,860
geometric change whereas totaling the

00:08:19,120 --> 00:08:24,400
font size will cause a paint in a reflow

00:08:20,860 --> 00:08:25,450
so it is the reflow to calculate where

00:08:24,400 --> 00:08:27,340
everything's position now because the

00:08:25,450 --> 00:08:30,400
font size increased and then it needs to

00:08:27,340 --> 00:08:31,780
paint it to the screen and then you can

00:08:30,400 --> 00:08:33,760
also have properties where you access

00:08:31,780 --> 00:08:35,500
where it forces the browser to do a

00:08:33,760 --> 00:08:36,910
reflow to the browser probably

00:08:35,500 --> 00:08:38,880
intelligent tries to queue up a lot of

00:08:36,910 --> 00:08:41,200
this stuff for you but there's certain

00:08:38,880 --> 00:08:43,330
bits are out has two black flush the

00:08:41,200 --> 00:08:45,640
queue and it has to like cause a reflow

00:08:43,330 --> 00:08:47,470
so one of those is like offset left so

00:08:45,640 --> 00:08:49,930
you have to get the correct dimension

00:08:47,470 --> 00:08:51,130
back otherwise the browser could be

00:08:49,930 --> 00:08:53,650
lying to you so they need to cause a

00:08:51,130 --> 00:08:55,290
tree slow so you kind of need casts all

00:08:53,650 --> 00:08:57,370
those property

00:08:55,290 --> 00:08:59,440
you can see here this is a screenshot

00:08:57,370 --> 00:09:01,450
from the chrome timeline dev tools and

00:08:59,440 --> 00:09:03,340
it kind of shows you what happened so

00:09:01,450 --> 00:09:04,750
like you do it you do a change that the

00:09:03,340 --> 00:09:07,930
function call happens it'll change to

00:09:04,750 --> 00:09:09,640
recalculate the styles and then any of

00:09:07,930 --> 00:09:12,160
the properties like wit pipe margin left

00:09:09,640 --> 00:09:15,460
and top can cause a layout any of the

00:09:12,160 --> 00:09:17,590
other properties in the green bar screen

00:09:15,460 --> 00:09:20,080
bar here can cause I box-shadow border

00:09:17,590 --> 00:09:21,220
radius those things that don't do a

00:09:20,080 --> 00:09:23,020
geometric change and you can see you

00:09:21,220 --> 00:09:25,390
lastly the composite layer which is like

00:09:23,020 --> 00:09:30,040
transform and opacity it's like handled

00:09:25,390 --> 00:09:31,390
by the GPU so that's really fast so one

00:09:30,040 --> 00:09:34,750
of the key things you should do is

00:09:31,390 --> 00:09:36,310
batting so you need to batch you read

00:09:34,750 --> 00:09:37,480
and write so you'll want to read write

00:09:36,310 --> 00:09:38,890
read write read by other words the

00:09:37,480 --> 00:09:40,420
browser needs to reflow repaint real

00:09:38,890 --> 00:09:42,840
slow the paint and you get that sort of

00:09:40,420 --> 00:09:45,940
junk that a lot of people talk about and

00:09:42,840 --> 00:09:47,650
that's it up so you want the only one

00:09:45,940 --> 00:09:50,710
layout and paint it happen once per tick

00:09:47,650 --> 00:09:52,240
so it's kind of like you will use

00:09:50,710 --> 00:09:54,880
something like requestanimationframe so

00:09:52,240 --> 00:09:57,420
that works that doesn't call back every

00:09:54,880 --> 00:09:59,770
time the screen refreshes so the average

00:09:57,420 --> 00:10:01,630
refresh rate my screen is like 60 Hertz

00:09:59,770 --> 00:10:03,400
nuts without 60 frames a second come

00:10:01,630 --> 00:10:06,580
from so I want to execute 60 times a

00:10:03,400 --> 00:10:07,930
second so that way you can like queue up

00:10:06,580 --> 00:10:09,700
a lot of stuff and have it happened fast

00:10:07,930 --> 00:10:11,770
and it won't like make your app seems

00:10:09,700 --> 00:10:13,839
slow because it's happening a lot but

00:10:11,770 --> 00:10:17,680
you'll get like this is what they call

00:10:13,839 --> 00:10:19,030
layout thrashing they're on a controller

00:10:17,680 --> 00:10:21,970
in minimize so the best way to do that

00:10:19,030 --> 00:10:25,540
is use a doll abstraction like because

00:10:21,970 --> 00:10:27,339
it's really easy to degrade performance

00:10:25,540 --> 00:10:30,280
you kind of need an abstraction on top

00:10:27,339 --> 00:10:31,390
it's really thinking about that kind of

00:10:30,280 --> 00:10:33,850
paved the way in that thinking with

00:10:31,390 --> 00:10:35,650
their virtual Dom and kind of their

00:10:33,850 --> 00:10:37,690
representation of the Dom that you write

00:10:35,650 --> 00:10:40,420
and they sort of angle writing to it so

00:10:37,690 --> 00:10:43,290
it's pretty good amber has HTML bars

00:10:40,420 --> 00:10:45,910
which is like a lot of similar thinking

00:10:43,290 --> 00:10:46,990
to react so they're kind of doing a lot

00:10:45,910 --> 00:10:50,700
of performance stuff there and their

00:10:46,990 --> 00:10:53,710
latest release and if you don't use a

00:10:50,700 --> 00:10:55,870
application sort of framework there's a

00:10:53,710 --> 00:10:57,580
library called fast on which hooks into

00:10:55,870 --> 00:10:59,050
like requestanimationframe so all your

00:10:57,580 --> 00:11:00,850
reads and writes is Dom you do through

00:10:59,050 --> 00:11:03,330
this library and that will bat it up and

00:11:00,850 --> 00:11:05,560
do it in a performant way for you and

00:11:03,330 --> 00:11:07,680
you can't opt into a framework it's

00:11:05,560 --> 00:11:12,329
pretty good one

00:11:07,680 --> 00:11:12,329
so how do we measure you I performance

00:11:12,540 --> 00:11:16,690
recently so for a long time will Dailey

00:11:14,950 --> 00:11:20,200
really chrome that offered the ability

00:11:16,690 --> 00:11:21,880
to do that but now like I Elevens firing

00:11:20,200 --> 00:11:24,339
Firefox will have really great support

00:11:21,880 --> 00:11:26,350
to extract in performance seeing what

00:11:24,339 --> 00:11:29,410
Spain what's reflow and kind of giving

00:11:26,350 --> 00:11:31,779
you like a frame rate and they all offer

00:11:29,410 --> 00:11:34,240
a timeline I just checked out I Elevens

00:11:31,779 --> 00:11:36,100
tools and they're like really really

00:11:34,240 --> 00:11:38,200
good they're up there with chrome for

00:11:36,100 --> 00:11:40,570
getting performance information addict

00:11:38,200 --> 00:11:43,930
like your website they give it a really

00:11:40,570 --> 00:11:45,700
nice interface for it so let's let's go

00:11:43,930 --> 00:11:49,060
back to that issue of the scroll this

00:11:45,700 --> 00:11:52,209
view was waitting out and we can sort of

00:11:49,060 --> 00:11:55,089
discover what's going on so first thing

00:11:52,209 --> 00:11:57,040
we'll do is a timeline in chrome and

00:11:55,089 --> 00:11:58,060
this will like I showed no other

00:11:57,040 --> 00:11:59,529
screenshot i'll show you like the

00:11:58,060 --> 00:12:03,430
reflows paints and will give you like a

00:11:59,529 --> 00:12:05,709
frame rate but when we do that and I'll

00:12:03,430 --> 00:12:07,720
share a screenshot of a profile i took

00:12:05,709 --> 00:12:09,579
it doesn't eliminate why the way that is

00:12:07,720 --> 00:12:10,510
happening so as far as the timeline is

00:12:09,579 --> 00:12:12,010
concerned it looks like it's really

00:12:10,510 --> 00:12:14,500
performant it's not doing much the

00:12:12,010 --> 00:12:16,959
browsers like handily okay but it

00:12:14,500 --> 00:12:19,170
doesn't make it clear why suddenly

00:12:16,959 --> 00:12:22,060
everything is disappearing off the page

00:12:19,170 --> 00:12:23,350
so it doesn't it doesn't help and that's

00:12:22,060 --> 00:12:25,269
the same for all the browsers they're

00:12:23,350 --> 00:12:29,019
kind of say it's ticking on 60 frames a

00:12:25,269 --> 00:12:30,550
second and everything according to the

00:12:29,019 --> 00:12:32,290
timeline is fine but it's still you can

00:12:30,550 --> 00:12:36,160
see it's not fine because it's not

00:12:32,290 --> 00:12:37,449
displaying the data so that's a timeline

00:12:36,160 --> 00:12:40,300
i did of the scrolling thing you can see

00:12:37,449 --> 00:12:41,649
it's it's below the 60 frames a second

00:12:40,300 --> 00:12:43,480
which is up here so you want to be below

00:12:41,649 --> 00:12:44,529
this line so that's ticking along and

00:12:43,480 --> 00:12:45,940
then you can see sort of the bars

00:12:44,529 --> 00:12:47,529
happening there it's like doing some

00:12:45,940 --> 00:12:49,470
paints and composites and they're really

00:12:47,529 --> 00:12:51,730
small and it happening with the past and

00:12:49,470 --> 00:12:56,709
better still problem so it doesn't

00:12:51,730 --> 00:12:58,600
doesn't always help this is where Safari

00:12:56,709 --> 00:13:01,000
sort of has some really hidden tools for

00:12:58,600 --> 00:13:03,430
a long time this feature called show

00:13:01,000 --> 00:13:05,890
compositing borders was hidden behind a

00:13:03,430 --> 00:13:07,360
flag you had launched safari in the

00:13:05,890 --> 00:13:09,730
command line to get it happening but now

00:13:07,360 --> 00:13:12,910
they've exposed it in a debug menu and

00:13:09,730 --> 00:13:15,149
I'll show that in a second and show that

00:13:12,910 --> 00:13:15,149
Nia

00:13:15,769 --> 00:13:19,040
refresh that

00:13:27,290 --> 00:13:30,339
one second

00:13:32,790 --> 00:13:35,480
so

00:13:47,320 --> 00:13:50,010
what

00:13:50,810 --> 00:13:58,050
so to show this this you can see it's

00:13:54,540 --> 00:14:00,509
got these borders and essentially these

00:13:58,050 --> 00:14:02,279
are like the the textures that upload to

00:14:00,509 --> 00:14:04,620
the GPU it finally gives you some

00:14:02,279 --> 00:14:07,980
numbers here so you can expose that by

00:14:04,620 --> 00:14:09,810
going to debug draw compositing flags

00:14:07,980 --> 00:14:12,240
and then down here show so it's kind of

00:14:09,810 --> 00:14:13,620
hidden behind these these menu options

00:14:12,240 --> 00:14:16,290
but you can get to but what actually

00:14:13,620 --> 00:14:19,920
illuminates is as I scroll you can see

00:14:16,290 --> 00:14:21,420
that number is increasing a lot what

00:14:19,920 --> 00:14:23,310
that means is that's uploading a texture

00:14:21,420 --> 00:14:25,110
to the GPU but every time and it's

00:14:23,310 --> 00:14:27,300
happening a lot because we are paying

00:14:25,110 --> 00:14:30,420
order property so like I start to scroll

00:14:27,300 --> 00:14:31,889
that really fast you get the wire

00:14:30,420 --> 00:14:35,130
happening and you see like the number of

00:14:31,889 --> 00:14:38,910
creases exponentially and that's that's

00:14:35,130 --> 00:14:40,829
kind of like what what is happening in

00:14:38,910 --> 00:14:42,990
the browser so Straits of textures are

00:14:40,829 --> 00:14:45,180
being sent to the GPU and that number

00:14:42,990 --> 00:14:46,440
should be small so if that's big then

00:14:45,180 --> 00:14:48,949
you've got a you've got an issue where

00:14:46,440 --> 00:14:51,259
like the GPU is getting overloaded

00:14:48,949 --> 00:14:53,190
things here I took a screenshot here

00:14:51,259 --> 00:14:55,260
essentially what we're doing is we're

00:14:53,190 --> 00:14:57,360
flooding the GPU so kind of and good

00:14:55,260 --> 00:14:59,490
analogy is like a big sports game and a

00:14:57,360 --> 00:15:00,810
stadiums finished and all the crowd is

00:14:59,490 --> 00:15:02,790
coming out to the door kind of a really

00:15:00,810 --> 00:15:04,589
slows down so you're trying to upload

00:15:02,790 --> 00:15:06,750
way too many textures to the jeep you

00:15:04,589 --> 00:15:08,250
and I just can't handle it or just just

00:15:06,750 --> 00:15:09,720
wiped out and it just like stopped

00:15:08,250 --> 00:15:13,350
rendering in fact keep up because you're

00:15:09,720 --> 00:15:14,699
doing too much for it to handle and just

00:15:13,350 --> 00:15:17,370
you know you're technically overloading

00:15:14,699 --> 00:15:19,529
the GPU bus with too many textures for

00:15:17,370 --> 00:15:22,649
it to handle properly to be able to

00:15:19,529 --> 00:15:24,930
painter the screen in the browser and

00:15:22,649 --> 00:15:27,060
that's the Atari ever answer to the

00:15:24,930 --> 00:15:30,720
white out so it's kind of get a bit of a

00:15:27,060 --> 00:15:32,190
journey the tools a bit immature to get

00:15:30,720 --> 00:15:34,709
to it and they're kind of hidden behind

00:15:32,190 --> 00:15:35,730
probably some confusing names but once

00:15:34,709 --> 00:15:37,500
you start to learn it they make a lot

00:15:35,730 --> 00:15:40,319
more sense there's a good article about

00:15:37,500 --> 00:15:46,470
this very subject of using that to debug

00:15:40,319 --> 00:15:47,759
performance and Safari and basically the

00:15:46,470 --> 00:15:50,009
conclusion we come to is the order

00:15:47,759 --> 00:15:51,389
property isn't performant option when

00:15:50,009 --> 00:15:52,949
you want to do high velocity scrolling

00:15:51,389 --> 00:15:55,139
like it has a lot of other benefits but

00:15:52,949 --> 00:15:57,000
when it comes to like writing out that's

00:15:55,139 --> 00:15:59,399
kind of like a no-go so it's kind of

00:15:57,000 --> 00:16:02,340
like you have to avoid it but offers so

00:15:59,399 --> 00:16:04,630
much which is unfortunate

00:16:02,340 --> 00:16:07,210
so it's not easy like the dev tools are

00:16:04,630 --> 00:16:09,460
still immature whether they where they

00:16:07,210 --> 00:16:12,880
do Excel is you know inspecting and

00:16:09,460 --> 00:16:14,290
looking CSS JavaScript profiling but in

00:16:12,880 --> 00:16:16,630
a lot of like the UI performance stuff

00:16:14,290 --> 00:16:18,400
the stool likes and some blank areas

00:16:16,630 --> 00:16:19,990
where they don't cover it work where you

00:16:18,400 --> 00:16:22,000
kind of get stuck is only because Safari

00:16:19,990 --> 00:16:23,100
expose that that I was able to discover

00:16:22,000 --> 00:16:25,150
what was actually happening and

00:16:23,100 --> 00:16:28,110
otherwise I'd just be I wouldn't know

00:16:25,150 --> 00:16:30,700
what what was going on and

00:16:28,110 --> 00:16:33,760
high-performance user interfaces are

00:16:30,700 --> 00:16:35,470
really hard on the web especially

00:16:33,760 --> 00:16:36,850
because it's so easy to degrade but you

00:16:35,470 --> 00:16:39,160
can do simple things like just change

00:16:36,850 --> 00:16:41,770
the CSS property and then suddenly like

00:16:39,160 --> 00:16:46,480
everything comes crashing down but it's

00:16:41,770 --> 00:16:48,190
not impossible so like I said before if

00:16:46,480 --> 00:16:50,320
you want to do native like performance

00:16:48,190 --> 00:16:51,880
really fast and you kind of need to use

00:16:50,320 --> 00:16:53,770
an abstraction where they're really

00:16:51,880 --> 00:16:56,440
thinking about this for you and you kind

00:16:53,770 --> 00:16:58,000
of just define your application and a

00:16:56,440 --> 00:17:01,180
really good one that I've seen lately is

00:16:58,000 --> 00:17:02,920
called famous the kind of stews all

00:17:01,180 --> 00:17:06,520
these ideas into soft instruction where

00:17:02,920 --> 00:17:07,329
they really think about performance and

00:17:06,520 --> 00:17:09,430
you should have described your

00:17:07,329 --> 00:17:12,030
application in JavaScript and it sort of

00:17:09,430 --> 00:17:14,170
handles the rendering to the Dom for you

00:17:12,030 --> 00:17:16,690
and now you so they use a number of

00:17:14,170 --> 00:17:18,550
strategies so they use a flat Dom so the

00:17:16,690 --> 00:17:20,380
Dom structure is really like flat so

00:17:18,550 --> 00:17:21,820
it's easy for the style recalculation to

00:17:20,380 --> 00:17:23,650
happen so the more complex the Dom you

00:17:21,820 --> 00:17:25,390
have the more work to grouse has to do

00:17:23,650 --> 00:17:28,060
when it needs to recalculate installs it

00:17:25,390 --> 00:17:30,850
means to traverse all the notes in your

00:17:28,060 --> 00:17:34,090
document they use your first animation

00:17:30,850 --> 00:17:35,170
frame to do it 60 times a second they

00:17:34,090 --> 00:17:37,210
make sure everything's put on for the

00:17:35,170 --> 00:17:39,340
GPU so they use the matrix Freddy

00:17:37,210 --> 00:17:40,660
transform and also have it built in

00:17:39,340 --> 00:17:43,510
physics engine so you can get that nice

00:17:40,660 --> 00:17:44,920
stuff so that where I was dragging my

00:17:43,510 --> 00:17:46,330
head around before that was using the

00:17:44,920 --> 00:17:49,420
famous same thing you like the sort of

00:17:46,330 --> 00:17:53,110
spring physics happening it's really

00:17:49,420 --> 00:17:55,000
quite good the other benefit is too is

00:17:53,110 --> 00:17:57,960
because you described in a in their

00:17:55,000 --> 00:18:00,490
framework you can render it to other

00:17:57,960 --> 00:18:02,860
endpoint so you can range the Dom you

00:18:00,490 --> 00:18:05,230
can do SVG and they even have WebGL so

00:18:02,860 --> 00:18:08,170
that sort of Brewster performance again

00:18:05,230 --> 00:18:10,150
and you can start to do more cool

00:18:08,170 --> 00:18:11,650
animations with in reggio that's all

00:18:10,150 --> 00:18:14,760
possible in the doll so you can do like

00:18:11,650 --> 00:18:14,760
cloth based off

00:18:15,320 --> 00:18:21,360
so before it is fragile it's very easy

00:18:18,990 --> 00:18:23,850
of us said many times to degrade

00:18:21,360 --> 00:18:27,090
performance now you really need to put

00:18:23,850 --> 00:18:29,610
an abstraction in front hand rolling

00:18:27,090 --> 00:18:31,200
always end in tears so if you're working

00:18:29,610 --> 00:18:33,960
by itself maybe that will work for you

00:18:31,200 --> 00:18:36,000
but if you're in a team really trying to

00:18:33,960 --> 00:18:37,140
like not degrade performance is really

00:18:36,000 --> 00:18:40,020
hard when you're working with many

00:18:37,140 --> 00:18:42,179
people and basically the dollars of West

00:18:40,020 --> 00:18:43,650
it's a worse for performance is not was

00:18:42,179 --> 00:18:44,820
never intended to do like the sort of

00:18:43,650 --> 00:18:46,200
application level stuff that we're doing

00:18:44,820 --> 00:18:50,270
now but that's what we've got to work

00:18:46,200 --> 00:18:52,620
with though we have to work with it and

00:18:50,270 --> 00:18:54,330
what we really need is the web platforms

00:18:52,620 --> 00:18:55,890
kind of needs is low level control so

00:18:54,330 --> 00:18:57,630
people who really want to extract the

00:18:55,890 --> 00:18:59,520
most performance out of their web apps

00:18:57,630 --> 00:19:01,050
they really kind of need to trust from

00:18:59,520 --> 00:19:03,240
the browser that then they know what

00:19:01,050 --> 00:19:04,679
they're doing so there's a few things

00:19:03,240 --> 00:19:06,960
where you could control you could

00:19:04,679 --> 00:19:09,030
isolate something on the page to know to

00:19:06,960 --> 00:19:12,300
say I know when it needs to paint and

00:19:09,030 --> 00:19:14,340
when it needs to reflow but that's sort

00:19:12,300 --> 00:19:16,050
of not available there's there's some

00:19:14,340 --> 00:19:17,850
specifications like there's a CSS

00:19:16,050 --> 00:19:21,240
containment specification which you can

00:19:17,850 --> 00:19:23,640
isolate some stuff to do that but that's

00:19:21,240 --> 00:19:26,850
all early days and just just a it's not

00:19:23,640 --> 00:19:29,910
even in any browsers so yeah isolate

00:19:26,850 --> 00:19:31,559
opponents pretty much we need the

00:19:29,910 --> 00:19:34,830
functionality of an iframe but without

00:19:31,559 --> 00:19:36,809
the baggage so I frame has obviously has

00:19:34,830 --> 00:19:40,170
a lot of baggage around it we kind of

00:19:36,809 --> 00:19:43,559
need the benefits of that but in a nicer

00:19:40,170 --> 00:19:46,220
way so we can do we can start getting so

00:19:43,559 --> 00:19:52,740
extracting really good performance

00:19:46,220 --> 00:19:56,280
that's it thanks you're living with

00:19:52,740 --> 00:19:57,990
ember it's in this man ah yeah yep do

00:19:56,280 --> 00:20:00,690
you have issues with repo'ing we've got

00:19:57,990 --> 00:20:03,360
a bunch of them having issues with

00:20:00,690 --> 00:20:06,960
things don't have the right time or seem

00:20:03,360 --> 00:20:08,760
a bit slow are you doing Oh

00:20:06,960 --> 00:20:10,350
optimizations or is it just changes to

00:20:08,760 --> 00:20:13,470
imitate it going through going to sleep

00:20:10,350 --> 00:20:16,050
set up so I don't work with that day

00:20:13,470 --> 00:20:18,240
today but I think HTML bars kind of like

00:20:16,050 --> 00:20:19,410
fixes a lot of the problems that the the

00:20:18,240 --> 00:20:22,050
other templating engine they used

00:20:19,410 --> 00:20:25,040
previously and they're kind of taking

00:20:22,050 --> 00:20:25,040
some cues from react

00:20:26,710 --> 00:20:33,070
hi great talk with all the amazing

00:20:31,600 --> 00:20:33,940
performance that you've shown do you

00:20:33,070 --> 00:20:37,029
think there's reason to be optimistic

00:20:33,940 --> 00:20:38,230
enough to think that web applications

00:20:37,029 --> 00:20:42,940
will at some point become better than

00:20:38,230 --> 00:20:44,710
meet us in terms of performance yeah I'm

00:20:42,940 --> 00:20:47,830
pretty optimistic about it I think I

00:20:44,710 --> 00:20:49,270
think the it's capable they're like

00:20:47,830 --> 00:20:50,980
there's a lot of work being done in

00:20:49,270 --> 00:20:53,940
discovering performance issues as well

00:20:50,980 --> 00:20:57,909
as like helping increase performance so

00:20:53,940 --> 00:21:00,190
a lot of like the frameworks are kind of

00:20:57,909 --> 00:21:02,020
like fixing that for us by retracting us

00:21:00,190 --> 00:21:05,049
away from that like fine-tuning their

00:21:02,020 --> 00:21:07,570
they're working on the fine-tuning as to

00:21:05,049 --> 00:21:10,299
whether we ever get like native maybe

00:21:07,570 --> 00:21:11,860
we'll be close you know mozillas doing a

00:21:10,299 --> 00:21:14,409
lot of work with their as I'm jeaious

00:21:11,860 --> 00:21:16,899
for high-performing games in the browser

00:21:14,409 --> 00:21:20,799
and Java scripts getting faster and

00:21:16,899 --> 00:21:22,630
faster all the time and the nailing so

00:21:20,799 --> 00:21:26,320
though I'm pretty hopeful that the web

00:21:22,630 --> 00:21:31,029
will be like the the one true place I

00:21:26,320 --> 00:21:32,470
hope hi I'm that was an awesome talk can

00:21:31,029 --> 00:21:34,929
you you mentioned a little bit about how

00:21:32,470 --> 00:21:36,070
the Safari dev tools that you that you

00:21:34,929 --> 00:21:37,419
see repaints but then there's stuff in

00:21:36,070 --> 00:21:39,130
the chrome devtools jump like a

00:21:37,419 --> 00:21:40,809
suggestion of your preferred workflow of

00:21:39,130 --> 00:21:44,679
like we're developing in chrome and

00:21:40,809 --> 00:21:47,799
safari or so yeah I tend to mix between

00:21:44,679 --> 00:21:50,200
firefox and chrome like Rome because

00:21:47,799 --> 00:21:52,450
Derek on the first ones to surface that

00:21:50,200 --> 00:21:55,090
sort of timeline user interface

00:21:52,450 --> 00:21:56,649
performance stuff and I've only just

00:21:55,090 --> 00:21:58,059
been recently looking into Safari

00:21:56,649 --> 00:22:00,370
because they've got some extra stuff

00:21:58,059 --> 00:22:02,110
that other browsers don't that's really

00:22:00,370 --> 00:22:03,700
focused on like seeing what's happening

00:22:02,110 --> 00:22:08,140
with the GPU like when you're doing like

00:22:03,700 --> 00:22:09,700
transform stuff there yeah so I mostly

00:22:08,140 --> 00:22:11,380
work in chrome with my looks like i

00:22:09,700 --> 00:22:12,700
don't really i kind of just jump around

00:22:11,380 --> 00:22:15,159
browsers depending on what i need to

00:22:12,700 --> 00:22:16,740
discover it have been kind of nice to

00:22:15,159 --> 00:22:22,470
have like a unified to the devtools

00:22:16,740 --> 00:22:22,470

YouTube URL: https://www.youtube.com/watch?v=ScXXBvs32Pg


