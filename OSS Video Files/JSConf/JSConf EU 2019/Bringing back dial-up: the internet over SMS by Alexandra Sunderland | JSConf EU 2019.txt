Title: Bringing back dial-up: the internet over SMS by Alexandra Sunderland | JSConf EU 2019
Publication date: 2019-06-07
Playlist: JSConf EU 2019
Description: 
	Travelling to JSConf EU from another country? You probably had to pay an arm and a leg for a data roaming package on your phone. But there’s a better way! What if I told you that you could stay connected to the internet with a phone that can only send and receive text messages? In this talk we’ll build our own browser that makes all requests over SMS, so that next time you can forget about that fancy data package.

https://2019.jsconf.eu/alexandra-sunderland/bringing-back-dial-up-the-internet-over-sms.html
Captions: 
	00:00:07,479 --> 00:00:08,510
I'm Alexandra.

00:00:08,510 --> 00:00:14,570
I'm a software engineer at Bella, we're making a product that acts as copilot for a manager,

00:00:14,570 --> 00:00:16,100
one on ones and feedback.

00:00:16,100 --> 00:00:20,619
If that's useful, check out bella.app.

00:00:20,619 --> 00:00:28,660
And what I was to talk about today is something completely different in my spare time.

00:00:28,660 --> 00:00:37,960
It's transferring all the data you need other SMS.

00:00:37,960 --> 00:00:42,080
Why would I build something like this when we have data on Wi Fi connections all over

00:00:42,080 --> 00:00:43,280
the world?

00:00:43,280 --> 00:00:48,949
I come from a country where a data plan for 2 gigabytes a month costs 55 Euros and only

00:00:48,949 --> 00:00:54,500
works in my hometown.

00:00:54,500 --> 00:00:59,340
Three quarters of a million people are using dialup Internet in their homes.

00:00:59,340 --> 00:01:00,780
I come from Canada.

00:01:00,780 --> 00:01:07,100
So, the Internet is so, so expensive just when I'm at home, that when I'm traveling

00:01:07,100 --> 00:01:11,940
somewhere, to come to Berlin, the prices are out my price range.

00:01:11,940 --> 00:01:16,860
I like to travel, this data is an issue.

00:01:16,860 --> 00:01:21,000
When I travel, I love to visit Paris and the streets look like this.

00:01:21,000 --> 00:01:23,820
I get lost really easily in a grid like structure.

00:01:23,820 --> 00:01:27,720
When I'm over here, I need data to get around.

00:01:27,720 --> 00:01:31,760
And I could technically download a map offline and use that.

00:01:31,760 --> 00:01:34,970
But that doesn't give me transit directions which is something I really need when I walk

00:01:34,970 --> 00:01:36,060
an hour in the wrong direction.

00:01:36,060 --> 00:01:37,720
I need a subway to get back home.

00:01:37,720 --> 00:01:43,310
When I was trying to come up with a solution for this problem, I noticed like I can't afford

00:01:43,310 --> 00:01:44,310
the data plans.

00:01:44,310 --> 00:01:48,399
But SMS without a data plan costs about 15 cents per message.

00:01:48,399 --> 00:01:49,850
I tried to work around that.

00:01:49,850 --> 00:01:58,110
When I was starting a solution to this problem, chatbots were the big thing at the time.

00:01:58,110 --> 00:02:03,900
I set up this problem, setting up a Python server with SMS and grabbing it from the Internet

00:02:03,900 --> 00:02:08,619
and grabbing the directions and text it back to me.

00:02:08,619 --> 00:02:13,970
I could do something simple, how do I get from point A to B and get the Google Map directions

00:02:13,970 --> 00:02:15,120
back in one SMS.

00:02:15,120 --> 00:02:18,340
I could do this for 30 cents per direction.

00:02:18,340 --> 00:02:21,840
Which is pretty good compared to what I would be paying for data otherwise.

00:02:21,840 --> 00:02:26,090
And this really worked, and I used it lot when I was traveling.

00:02:26,090 --> 00:02:30,530
But the issue is when you get a little bit of access to the Internet, you start to crave

00:02:30,530 --> 00:02:31,760
it quite a bit more.

00:02:31,760 --> 00:02:37,680
So, I was building these one off integrations to figure out ratings for a restaurant I wanted

00:02:37,680 --> 00:02:41,040
to see or a translated word I didn't know and do all this stuff.

00:02:41,040 --> 00:02:46,159
And building out all these integrations as a one off took up a lot of time.

00:02:46,159 --> 00:02:47,730
I thought, there must be a better way.

00:02:47,730 --> 00:02:49,550
I'll just build a browser.

00:02:49,550 --> 00:02:52,470
And that's what I'm gonna show you today.

00:02:52,470 --> 00:02:55,269
So, your two main components to the project I did.

00:02:55,269 --> 00:03:00,300
There's the Android app on one side and the server in NodeJS on the other.

00:03:00,300 --> 00:03:03,950
The app I made in Android because I was it just for me.

00:03:03,950 --> 00:03:05,390
I don't have an iPhone.

00:03:05,390 --> 00:03:06,900
I didn't care about iOS.

00:03:06,900 --> 00:03:13,000
And I'm using Java instead of Kotlin because there was a lot more on StackOverflow on SMS.

00:03:13,000 --> 00:03:16,459
That was a good solution for me, I'm not an app developer.

00:03:16,459 --> 00:03:22,470
And NodeJS, I thought it would be fun you to use JavaScript on a browser where it doesn't

00:03:22,470 --> 00:03:27,790
belong to make this JavaScript less browser.

00:03:27,790 --> 00:03:30,650
And then Twilio for the communication.

00:03:30,650 --> 00:03:38,989
And Twilio does a lot of things, I bought a phone number from it and it let me set up

00:03:38,989 --> 00:03:41,330
an end point to forward all any SMS to.

00:03:41,330 --> 00:03:45,550
I can send a text message to my Twilio phone number and it will forward all those messages

00:03:45,550 --> 00:03:46,650
to my server.

00:03:46,650 --> 00:03:53,269
So, before I jump into the project, just to set up like a limitation I had to deal with,

00:03:53,269 --> 00:03:57,209
SMS can only handle 160 characters at a time.

00:03:57,209 --> 00:04:02,150
If I want to create a browser, I'm going to have to transmit this data less than one Tweet

00:04:02,150 --> 00:04:03,830
at a time.

00:04:03,830 --> 00:04:07,370
So, for more context on the issue.

00:04:07,370 --> 00:04:10,769
Like this Google web page looks very, very small.

00:04:10,769 --> 00:04:13,579
It's just a text box and the logo and a button.

00:04:13,579 --> 00:04:18,440
But the thing is, if you actually look at the page source, not including any CSS, not

00:04:18,440 --> 00:04:23,222
including the images or any sources being loaded in, this web page is a quarter of a

00:04:23,222 --> 00:04:24,400
million characters long.

00:04:24,400 --> 00:04:30,940
If you were to transmit this entire thing, 1300 SMS, not including the ones dropped along

00:04:30,940 --> 00:04:31,940
the way.

00:04:31,940 --> 00:04:36,840
In Twilio fees alone, I would have been paying $10 to transmit this Google page.

00:04:36,840 --> 00:04:40,550
It defeats the purpose of being a cheap solution.

00:04:40,550 --> 00:04:45,860
So, we have to do a lot on this page to get it to work.

00:04:45,860 --> 00:04:49,730
But if we were to imagine what this Google page look would like building it up from scratch,

00:04:49,730 --> 00:04:53,850
we wouldn't imagine all the CSS to make it load.

00:04:53,850 --> 00:04:59,950
We would imagine this little bit of HTML that sets up the form and the text box which is

00:04:59,950 --> 00:05:03,540
with a we need and takes one SMS.

00:05:03,540 --> 00:05:08,870
This is how we envision a lot of the web pages to make this project work.

00:05:08,870 --> 00:05:15,100
So, we're going to walk through the life cycle of a request and that's starting on the Android

00:05:15,100 --> 00:05:16,670
side in the app.

00:05:16,670 --> 00:05:23,350
Right off the bat we get into this huge limitation with systems because the URL spec says that

00:05:23,350 --> 00:05:26,210
a URL can be 2,000 characters longitudinal.

00:05:26,210 --> 00:05:31,770
So, that could take up 13 SMS which is a lot more than we want to deal with.

00:05:31,770 --> 00:05:37,460
The first thing on the app side, and the app looks like this, a text box and a go button.

00:05:37,460 --> 00:05:39,030
Very simple browser.

00:05:39,030 --> 00:05:43,560
We're going to start off by chopping off everything that we don't really need.

00:05:43,560 --> 00:05:47,350
So, the browser is going to be a very text based browser.

00:05:47,350 --> 00:05:51,660
We're not going to allow any kind of cool single page applications.

00:05:51,660 --> 00:05:56,070
We can chop off anything that has a pound symbol, page, whatever.

00:05:56,070 --> 00:06:00,790
We don't want any tracking IDs or query parameters.

00:06:00,790 --> 00:06:04,150
Everything in black after the URL there we can get rid of.

00:06:04,150 --> 00:06:09,140
And same with the HTTPS, www, at the start of the URL because it's assumed that all websites

00:06:09,140 --> 00:06:10,380
have that anyway.

00:06:10,380 --> 00:06:16,790
So, the part in yellow is what we're going to be sending over as an SMS.

00:06:16,790 --> 00:06:18,600
And that's gonna look something like this.

00:06:18,600 --> 00:06:22,840
I'm not going to cover the Android side of things too much.

00:06:22,840 --> 00:06:29,890
But make sure we have send, receive and write permissions on Android and use their simple

00:06:29,890 --> 00:06:35,000
SMS manager API which lets you just specify the destination phone number which in this

00:06:35,000 --> 00:06:37,220
case is our Twilio one.

00:06:37,220 --> 00:06:41,110
Specify the text that you want to send and then it just gets sent off.

00:06:41,110 --> 00:06:49,110
So, then Twilio picks up on message and converts it into a format that the server will read.

00:06:49,110 --> 00:06:50,840
It comes with a bunch of metadata.

00:06:50,840 --> 00:06:56,300
We're only going to care about the body, who it's to and from so we know who to send this

00:06:56,300 --> 00:06:58,210
message back to.

00:06:58,210 --> 00:07:02,380
So, this message gets sent over to the server.

00:07:02,380 --> 00:07:04,090
Which we're gonna look at next.

00:07:04,090 --> 00:07:09,830
So, a lot of us probably working in React or some kind of like componentizing library

00:07:09,830 --> 00:07:11,320
or framework all day.

00:07:11,320 --> 00:07:15,270
So, we kind of forget how big our HTML ends up really being because we're only dealing

00:07:15,270 --> 00:07:17,520
with these little tiny components at once.

00:07:17,520 --> 00:07:22,580
If like me and page source accidently instead of inspect element all the time you end up

00:07:22,580 --> 00:07:24,070
with a massive wall of text.

00:07:24,070 --> 00:07:28,010
And how on Earth are web pages this big?

00:07:28,010 --> 00:07:32,150
This is what the Google source page looks like.

00:07:32,150 --> 00:07:37,060
This is what we're going to have to deal with and parse before sending it back over for

00:07:37,060 --> 00:07:38,470
a text.

00:07:38,470 --> 00:07:41,410
But there are a lot of things that we can remove from this off the bat.

00:07:41,410 --> 00:07:44,710
We don't care about comments, we don't care about header data.

00:07:44,710 --> 00:07:47,320
We don't care about CSS or any that have stuff.

00:07:47,320 --> 00:07:53,340
So, there's a lot of stuff we can take off pretty easily to get this to work.

00:07:53,340 --> 00:07:58,880
On the server side, what we're gonna do is start by grabbing the URL that Twilio sent

00:07:58,880 --> 00:08:05,150
us, making a request to that URL by pre penning the HTTPS to it and then use a library called

00:08:05,150 --> 00:08:08,750
Cheerios which is jQuery for the server side pretty much.

00:08:08,750 --> 00:08:16,910
And use that to get the body off of the HTML because jQuery makes that quite easy.

00:08:16,910 --> 00:08:21,960
And then once we have this body, we're going to start to remove a bunch of the HTML.

00:08:21,960 --> 00:08:25,210
For that, I used a library, sanitize HTML.

00:08:25,210 --> 00:08:31,520
So, line four that I highlighted lets you specify specific tags in the HTML that you

00:08:31,520 --> 00:08:32,550
want to allow.

00:08:32,550 --> 00:08:37,690
So, here we're only going to allow anchor tags, inputs and forms.

00:08:37,690 --> 00:08:42,451
Those are the only elements in my opinion that really provide any kind of value to the

00:08:42,451 --> 00:08:44,700
user in a text based browser.

00:08:44,700 --> 00:08:50,110
Lines 7 10 highlighted shows the specific attributes on those tags that we are gonna

00:08:50,110 --> 00:08:51,110
allow.

00:08:51,110 --> 00:08:55,050
So, we're not gonna allow class name because we don't have CSS anyway.

00:08:55,050 --> 00:08:59,000
We're not gonna allow image tags because we can't really load images over SMS.

00:08:59,000 --> 00:09:02,580
And we're going to start loading these things.

00:09:02,580 --> 00:09:05,040
The last bit that's highlighted in the exclusive filter.

00:09:05,040 --> 00:09:11,240
So, sanitize HTML lets us specify a function of the tags and attributes to decide whether

00:09:11,240 --> 00:09:12,760
we want to show certain things.

00:09:12,760 --> 00:09:19,050
So, one of the examples I have there is we're going to get rid of all of the hidden inputs

00:09:19,050 --> 00:09:22,350
because the user can't see those anyways so it's not going to provide any value.

00:09:22,350 --> 00:09:25,530
And we're gonna get rid of policy URLs and terms and conditions.

00:09:25,530 --> 00:09:30,240
No one is going to click on those anyway so it's kind of wasted space.

00:09:30,240 --> 00:09:35,650
Now we have essentially a whole bunch of text and a couple of tags left in the HTML.

00:09:35,650 --> 00:09:38,320
We're going to start to compress this text.

00:09:38,320 --> 00:09:41,770
And we could use something like Gzip.

00:09:41,770 --> 00:09:44,170
But that's not fun.

00:09:44,170 --> 00:09:48,020
So, we're gonna forget about any kind of real compression.

00:09:48,020 --> 00:09:53,130
So, in the English language there are a lot of words that we use super often like the

00:09:53,130 --> 00:09:54,130
and.

00:09:54,130 --> 00:10:05,900
And a lot of single letters that are words, I and A. And any common English word can be

00:10:05,900 --> 00:10:13,340
mapped to a single later that's not a word, everything that's the becomes T, and becomes

00:10:13,340 --> 00:10:15,430
ampersand or whatever letter.

00:10:15,430 --> 00:10:21,870
And on Android side, doing the decompression, we know if that letter is there on its own,

00:10:21,870 --> 00:10:27,170
it means the because it's not a word otherwise.

00:10:27,170 --> 00:10:29,220
And to do that, it's very, very simple.

00:10:29,220 --> 00:10:33,650
We have to set up a dictionary mapping these words to their shorter versions and then go

00:10:33,650 --> 00:10:37,800
through the text and do a replace all.

00:10:37,800 --> 00:10:41,970
Another way of compressing the text is through the source APIs.

00:10:41,970 --> 00:10:47,680
So, if we're visiting a website like Wikipedia, there are going to be a lot of big words that

00:10:47,680 --> 00:10:48,910
don't need to be that big.

00:10:48,910 --> 00:10:53,690
So, what we can do is find those very large words, use a thesaurus API and see if there's

00:10:53,690 --> 00:10:56,530
a matching synonym that's much shorter.

00:10:56,530 --> 00:11:07,230
Pen ten chair is many letters and jail is a four letter word, we don't care about the

00:11:07,230 --> 00:11:09,230
word, do a replacement.

00:11:09,230 --> 00:11:14,090
This is a 66% compression which is quite a good compression rate.

00:11:14,090 --> 00:11:25,400
The last way we're going to compress the text in our HTML is by replacing links.

00:11:25,400 --> 00:11:32,210
So, when you're using a website on your phone, you don't care what a link actually is.

00:11:32,210 --> 00:11:35,800
You just care that it takes you to where it's supposed to take you.

00:11:35,800 --> 00:11:37,550
The links can be really, really long.

00:11:37,550 --> 00:11:39,160
Like up to 2,000 characters.

00:11:39,160 --> 00:11:43,590
So, instead of sending over these links that no one is actually going to be reading, we're

00:11:43,590 --> 00:11:47,020
gonna replace them with really short, random strings.

00:11:47,020 --> 00:11:52,790
So, when a user clicks on a link on the app side, that short link is what's gonna be sent

00:11:52,790 --> 00:11:53,990
back to the server.

00:11:53,990 --> 00:11:58,270
The server's gonna know that short link means that long link and it's gonna fetch the correct

00:11:58,270 --> 00:12:00,710
data to send back to us.

00:12:00,710 --> 00:12:02,750
And that's gonna look like this.

00:12:02,750 --> 00:12:09,390
I'm using Reddit to store the pairings of short to long URLs because we don't need anything

00:12:09,390 --> 00:12:11,120
super persistent.

00:12:11,120 --> 00:12:14,890
Most links are not going to be clicked on anyway and the web page is probably going

00:12:14,890 --> 00:12:16,350
to be gone in five minutes.

00:12:16,350 --> 00:12:22,380
What we're doing here is there's a function that takes the phone number from the user

00:12:22,380 --> 00:12:27,990
and the actual URL that is in the web page and it's going to store it in Redis where

00:12:27,990 --> 00:12:31,890
the key is the phone number and the short URL so it's really easy to retrieve when it's

00:12:31,890 --> 00:12:32,890
sent back.

00:12:32,890 --> 00:12:35,580
And then the value of that is the full URL.

00:12:35,580 --> 00:12:41,570
Now, the last bit of compression we're going to do is on the HTML itself.

00:12:41,570 --> 00:12:45,960
So, we've compressed all the English text, we've compressed the tags and attributes.

00:12:45,960 --> 00:12:49,810
But we still have going to have a lot of large tags like this.

00:12:49,810 --> 00:12:54,060
And things like input or type and name and value and all those tags that we do allow

00:12:54,060 --> 00:12:56,390
are going to show up pretty often.

00:12:56,390 --> 00:12:59,390
So, we can remove those and replace them.

00:12:59,390 --> 00:13:04,890
A nice thing about the SMS characters is that it supports all of the English or all of the

00:13:04,890 --> 00:13:10,640
English or letters and numbers and things that you see on an English keyboard plus the

00:13:10,640 --> 00:13:11,640
whole Greek alphabet.

00:13:11,640 --> 00:13:16,570
So, what we've done here since all the individual letters are already used by our English compression,

00:13:16,570 --> 00:13:21,520
the text compression, we're going to start mapping specific HTML tags and combinations

00:13:21,520 --> 00:13:24,000
of symbols to these Greek letters.

00:13:24,000 --> 00:13:28,980
I tried to map it by color here, the open bracket input matches the first character,

00:13:28,980 --> 00:13:33,160
type equals open quotation mark is the second character.

00:13:33,160 --> 00:13:34,160
So on.

00:13:34,160 --> 00:13:39,490
This brings it down from 44 characters to 12 characters which is going to provide a

00:13:39,490 --> 00:13:41,190
significant compression.

00:13:41,190 --> 00:13:46,220
So, now the HTML is ready to be sent out.

00:13:46,220 --> 00:13:51,270
But an annoying thing about SMS is that there's no guarantee of delivery and there's no guarantee

00:13:51,270 --> 00:13:53,720
that it's gonna be delivered in the right order either.

00:13:53,720 --> 00:13:58,490
So, you might end up with a situation where we've sent out six SMS, but only four of them

00:13:58,490 --> 00:14:00,740
get there and they're all out of order.

00:14:00,740 --> 00:14:05,460
We're not going to really care about the part where the SMS are dropped in this project

00:14:05,460 --> 00:14:10,610
because it's just a small project for me to access the Internet for fun.

00:14:10,610 --> 00:14:14,730
And if we did worry about that, we would have to build out an entire pact delivery network

00:14:14,730 --> 00:14:19,180
where you have to figure out which messages were dropped, how to recover from that and

00:14:19,180 --> 00:14:21,180
that's just a little bit more effort.

00:14:21,180 --> 00:14:25,320
But we are going to worry about this out of order problem.

00:14:25,320 --> 00:14:31,181
And to solve that, the HTML that we have is going to be divided up into the 160 character

00:14:31,181 --> 00:14:32,410
limit.

00:14:32,410 --> 00:14:37,920
And we're going to pre pen some metadata to the start of each message that shows the total

00:14:37,920 --> 00:14:43,000
number of messages in this web page and then the index where that SMS falls so that when

00:14:43,000 --> 00:14:48,000
we put the HTML back together it's in the correct order.

00:14:48,000 --> 00:14:51,910
And to send out those messages, we're just going use Twilio's library.

00:14:51,910 --> 00:14:55,350
Very simple, Twilio, send message.

00:14:55,350 --> 00:14:57,880
And it goes off and that's all I have to do.

00:14:57,880 --> 00:15:03,130
Now the messages are sent and we're ready to start getting them again on the Android

00:15:03,130 --> 00:15:04,130
side.

00:15:04,130 --> 00:15:11,220
So, Android has a thing called a broadcast receiver which is something that listens out

00:15:11,220 --> 00:15:13,530
for certain signals that are sent within your phone.

00:15:13,530 --> 00:15:19,170
So, here we have set up a broadcast receiver that listens out for messages coming in specifically

00:15:19,170 --> 00:15:22,620
from the number that we own on Twilio.

00:15:22,620 --> 00:15:26,620
So, what this is doing is it's just listening for that message to come in.

00:15:26,620 --> 00:15:31,240
And then it's grabbing the text from that message and sending it other to an activity

00:15:31,240 --> 00:15:34,490
which is Android's way of saying a new you.

00:15:34,490 --> 00:15:39,410
And in that new view, the first thing we're going to have to do is reverse that Greek

00:15:39,410 --> 00:15:43,190
letter conversion that we did to get the proper HTML back.

00:15:43,190 --> 00:15:45,850
We're going to reverse the shortened English words.

00:15:45,850 --> 00:15:49,810
We're going to add some spaces between closing and opening tags so there's a little bit of

00:15:49,810 --> 00:15:51,270
format in our page.

00:15:51,270 --> 00:15:53,910
There's no CSS to make it look good.

00:15:53,910 --> 00:15:56,150
We're going to try to break it up a little bit.

00:15:56,150 --> 00:15:58,200
And then we're going to load the HTML.

00:15:58,200 --> 00:16:03,440
So, Android has my favorite feature ever which is called a web view.

00:16:03,440 --> 00:16:09,300
And web view is something that lets you have a like a little version of Chrome within your

00:16:09,300 --> 00:16:10,300
app.

00:16:10,300 --> 00:16:13,480
And this was the most exciting feature for me because going into this project I didn't

00:16:13,480 --> 00:16:17,740
know that you could pass a web view in actual HTML string, I thought you could only pass

00:16:17,740 --> 00:16:19,950
a URL to load.

00:16:19,950 --> 00:16:25,370
I thought I would have to build my own browser and rendering engine and that didn't sound

00:16:25,370 --> 00:16:27,350
like tons of fun.

00:16:27,350 --> 00:16:28,930
This takes care of everything.

00:16:28,930 --> 00:16:32,360
Chrome is just going render everything properly for us.

00:16:32,360 --> 00:16:35,399
And this is what it ends up looking like.

00:16:35,399 --> 00:16:42,839
So, if we load if we load Google .ca, on the left we have what this looks like in the app

00:16:42,839 --> 00:16:48,230
which is basically what Google looked like 15 years ago.

00:16:48,230 --> 00:16:53,890
On the right side is the SMS that you can actually see coming in your default messaging

00:16:53,890 --> 00:16:55,210
app on your phone.

00:16:55,210 --> 00:17:02,910
So, this entire web page took just three SMS to transmit instead of the 1300 otherwise.

00:17:02,910 --> 00:17:05,880
And the code is not specific to Google.

00:17:05,880 --> 00:17:09,460
It's applicable to any text based website.

00:17:09,460 --> 00:17:14,390
So, we could just hard code this website instead like on one of the first few slides where

00:17:14,390 --> 00:17:21,230
it's just one SMS to transmit and that would have taken even less data to send over.

00:17:21,230 --> 00:17:23,449
So, I have dial up in the name of the talk.

00:17:23,449 --> 00:17:28,720
And I was curious, how does this actually compare to dial up Internet?

00:17:28,720 --> 00:17:34,350
On my phone, loading Google takes about 2 seconds using like regular data or Wi Fi.

00:17:34,350 --> 00:17:37,660
On dial up a couple years ago, it would have taken a minute to do.

00:17:37,660 --> 00:17:42,010
And on my phone, it's about 10 seconds when my phone is working.

00:17:42,010 --> 00:17:47,490
If you're somewhere where you don't have any other axe out Internet, me travelling to Europe,

00:17:47,490 --> 00:17:52,550
10 seconds is not that bad to wait for a website to load.

00:17:52,550 --> 00:17:56,010
So, SMS is not secure at all.

00:17:56,010 --> 00:17:59,430
It is subject to be intercepted.

00:17:59,430 --> 00:18:01,170
It is not secure.

00:18:01,170 --> 00:18:07,130
One of the ways I prevented people from misusing this is by removing in I kind of sign in links

00:18:07,130 --> 00:18:09,900
from the HTML and doing that.

00:18:09,900 --> 00:18:14,670
But otherwise, this is not something that should be used to log into anything.

00:18:14,670 --> 00:18:18,340
On the bright side, though, because this is a custom browser, there's no tracking.

00:18:18,340 --> 00:18:24,380
So, it's technically more private than your general browser.

00:18:24,380 --> 00:18:28,250
Something that would have made this project quite a bit easier is using MMS instead of

00:18:28,250 --> 00:18:29,250
SMS.

00:18:29,250 --> 00:18:33,220
I could have transmitted the entire website just by compressing a little bit and sending

00:18:33,220 --> 00:18:39,470
it over very, very little for not that much more expensive.

00:18:39,470 --> 00:18:41,780
But that's not fun.

00:18:41,780 --> 00:18:45,540
So, didn't do it that way.

00:18:45,540 --> 00:18:47,680
There are a lot of things I want to do with this project.

00:18:47,680 --> 00:18:51,690
So, phones are, by nature, bidirectional in communication.

00:18:51,690 --> 00:18:55,530
So, we could do something really easily with web sockets because a server can just ping

00:18:55,530 --> 00:18:57,130
the phone whenever it wants.

00:18:57,130 --> 00:18:58,850
We could do AJAX.

00:18:58,850 --> 00:19:04,420
For websites we visit a lot like Twitter or something, the format of every Tweet is exactly

00:19:04,420 --> 00:19:05,420
the same.

00:19:05,420 --> 00:19:10,700
We could store the HTML in CSS to re create the proper Twitter on our phone and just use

00:19:10,700 --> 00:19:14,270
the SMS to get the actual text content.

00:19:14,270 --> 00:19:16,309
We could support JavaScript.

00:19:16,309 --> 00:19:18,730
Might be a little difficult because we're removing so much HTML.

00:19:18,730 --> 00:19:24,080
But it would be a fun problem to figure out how to map JavaScript to the HTML and properly

00:19:24,080 --> 00:19:29,830
compress those and my favorite, what I'm working on now, is true dial up for this project.

00:19:29,830 --> 00:19:33,450
We're not doing dial up because it's SMS.

00:19:33,450 --> 00:19:39,590
But we could do a phone call to transmit data like dial up used to work.

00:19:39,590 --> 00:19:43,790
That would be quite a bit cheaper.

00:19:43,790 --> 00:19:47,831
It would be much faster, and it would be real dial up in that case because you could use

00:19:47,831 --> 00:19:51,630
your phone while the website was loading.

00:19:51,630 --> 00:19:57,210
So, there are probably a lot of you thinking this is ridiculous, there are cards for this

00:19:57,210 --> 00:19:58,210
purpose.

00:19:58,210 --> 00:20:01,029
I didn't know about this until a couple months ago.

00:20:01,029 --> 00:20:06,050
[ Laughter ] So, if you're traveling to Europe, you can

00:20:06,050 --> 00:20:10,420
get a SIM card like for 20 gigs for very, very cheap.

00:20:10,420 --> 00:20:15,970
And 20 gigs compared to my 2 gigs at home is essentially unlimited data.

00:20:15,970 --> 00:20:18,800
This is what I get when I travel now.

00:20:18,800 --> 00:20:20,700
And it's a much better solution.

00:20:20,700 --> 00:20:25,059
But when I'm in Europe, I usually come for the two weeks you're allows with a SIM card

00:20:25,059 --> 00:20:26,540
plus a day.

00:20:26,540 --> 00:20:31,470
My project comes in handy for that one extra day.

00:20:31,470 --> 00:20:35,130
And so, my talk or my the code is available on my GitHub.

00:20:35,130 --> 00:20:37,920
There's a link to that from my website.

00:20:37,920 --> 00:20:40,630
And, yeah.

00:20:40,630 --> 00:20:44,690
That's my talk.

00:20:44,690 --> 00:20:47,390
Thank you.

00:20:47,390 --> 00:20:48,750

YouTube URL: https://www.youtube.com/watch?v=ZsBAkSxwU5c


