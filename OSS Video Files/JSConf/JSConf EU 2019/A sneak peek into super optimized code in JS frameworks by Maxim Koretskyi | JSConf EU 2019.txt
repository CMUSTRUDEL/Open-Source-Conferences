Title: A sneak peek into super optimized code in JS frameworks by Maxim Koretskyi | JSConf EU 2019
Publication date: 2019-06-12
Playlist: JSConf EU 2019
Description: 
	Very few developers have the need to write super optimized code. In application development we tend to favor readability over optimization. But that’s not the case with frameworks. Developers who use frameworks expect them to run as fast as possible. In fact, speed is often a defining characteristic when choosing a framework. There are techniques that make code run faster. You’ve probably heard about linked lists, monomorphism and bitmasks, right? Maybe you’ve even used some. Well, you can find all these and a bunch of other interesting approaches in the sources of most popular JS frameworks. Over the past year I’ve seen a lot while reverse-engineering Angular and React. In this talk I want to share my findings with you. Some of you may end up applying them at work. And others, who knows, may even end up writing the next big framework.

https://2019.jsconf.eu/maxim-koretskyi/a-sneak-peek-into-super-optimized-code-in-js-frameworks.html
Captions: 
	00:00:06,790 --> 00:00:07,790
>> Okay.

00:00:07,790 --> 00:00:08,790
Hi, everyone.

00:00:08,790 --> 00:00:15,740
My name is Maxim Koretskyi, but I'm also known as the Wizard because I like to talk and write

00:00:15,740 --> 00:00:23,360
about complicated stuff, topics that sometimes are seen as mysterious, and hence the name

00:00:23,360 --> 00:00:24,360
The Wizard.

00:00:24,360 --> 00:00:34,360
I'm going to be talking about why Angular and React, the top web frameworks we have

00:00:34,360 --> 00:00:36,430
today, are so fast.

00:00:36,430 --> 00:00:44,190
I will present a few JavaScript opened myself techniques that these frameworks use to make

00:00:44,190 --> 00:00:45,820
JavaScript run fast.

00:00:45,820 --> 00:00:48,250
Now, I work at AG Grid.

00:00:48,250 --> 00:00:54,300
This is where we develop the best data grid in the world, so, if you need the data grid,

00:00:54,300 --> 00:00:59,930
we have a free community version with a lot of features, so definitely give it a try if

00:00:59,930 --> 00:01:01,250
you need data grid.

00:01:01,250 --> 00:01:07,810
I'm also the founder of Angular and dev community where we write and publish articles about

00:01:07,810 --> 00:01:12,000
advanced topics of Angular.

00:01:12,000 --> 00:01:21,390
So, we will be talking about three things today: monomorphism, bitfils, and filters.

00:01:21,390 --> 00:01:27,400
How many know about monomorphism, watch talks?

00:01:27,400 --> 00:01:28,840
Something?

00:01:28,840 --> 00:01:30,290
Okay.

00:01:30,290 --> 00:01:34,950
I watched a talk by Benedict last year, gave a talk about monomorphism.

00:01:34,950 --> 00:01:39,600
I will give you an overview of what it is.

00:01:39,600 --> 00:01:49,060
I will talk about bitfils and how Angular uses structure known as bloom filters.

00:01:49,060 --> 00:01:51,080
Let's start with monomorphism.

00:01:51,080 --> 00:01:52,590
I do a lot of reverse engineering.

00:01:52,590 --> 00:01:57,869
I sit at the computer with debugger and go through the sores of the frameworks.

00:01:57,869 --> 00:02:04,590
These are the comments that I found inside Angular and React sources.

00:02:04,590 --> 00:02:10,280
So these are the comments by technical leads of the frameworks, and they talk about hidden

00:02:10,280 --> 00:02:12,310
class.

00:02:12,310 --> 00:02:17,029
And internal data structures called fibre and view nodes.

00:02:17,029 --> 00:02:24,359
They want to ensure that these internal data structures share the same hidden class, and

00:02:24,359 --> 00:02:28,209
that is to make property access monomorphic.

00:02:28,209 --> 00:02:32,870
So a bunch of words when I first encountered that, I didn't really know what they were

00:02:32,870 --> 00:02:34,620
talking about.

00:02:34,620 --> 00:02:37,809
We need to clarify today what is hidden class?

00:02:37,809 --> 00:02:39,739
What is monomorphic property access?

00:02:39,739 --> 00:02:46,609
Why is it important in what are these data structures, like fibre and view nodes?

00:02:46,609 --> 00:02:50,150
Let's start with data structures.

00:02:50,150 --> 00:03:00,120
Fibre nodes and view nodes in Angular are used internally to represent a template, basically.

00:03:00,120 --> 00:03:08,329
When you define a component, this is the declaration of a component in Angular.

00:03:08,329 --> 00:03:16,290
Angular uses view nodes, data structures, that it creates to represent a template.

00:03:16,290 --> 00:03:24,359
They define the metadata needed to render the DOM, and it also specifies which part

00:03:24,359 --> 00:03:27,670
of the DOM needs to be up dated.

00:03:27,670 --> 00:03:29,349
Something called bindings.

00:03:29,349 --> 00:03:34,859
How many of you work with Angular?

00:03:34,859 --> 00:03:37,969
The same thing in React.

00:03:37,969 --> 00:03:45,719
We also define components, we define a template, and React uses fibre node.

00:03:45,719 --> 00:03:48,680
This is new React fibre 16 architecture.

00:03:48,680 --> 00:03:53,159
It uses fibre node to represent the DOM.

00:03:53,159 --> 00:03:55,549
How many use React?

00:03:55,549 --> 00:04:01,939
About 40 per cent.

00:04:01,939 --> 00:04:05,779
Fibre nodes and view nodes are used by these frameworks to represent a template.

00:04:05,779 --> 00:04:12,450
This is something in between the declaration of a component template and the DOM.

00:04:12,450 --> 00:04:20,420
What is common between these data structures is that they are used a lot when these frameworks

00:04:20,420 --> 00:04:24,050
process changes.

00:04:24,050 --> 00:04:29,210
Imagine there's a function called update node, an example of a function, there are a bunch

00:04:29,210 --> 00:04:34,390
of functions similar to this one in both frameworks.

00:04:34,390 --> 00:04:40,820
This function takes in a data structure, fibre or view node as the first parameter and then

00:04:40,820 --> 00:04:45,160
it reads some property.

00:04:45,160 --> 00:04:53,840
What is interesting that these kind of functions and the property access to easily exceed 10,000

00:04:53,840 --> 00:04:55,670
times.

00:04:55,670 --> 00:05:07,250
So it reads the data structure 10,000 times, every single times, changes are being processed.

00:05:07,250 --> 00:05:11,370
So it can happen a few times per second.

00:05:11,370 --> 00:05:16,510
You can imagine how many times the framework in JavaScript needs to have access to the

00:05:16,510 --> 00:05:17,870
property.

00:05:17,870 --> 00:05:26,930
The problem is virtual machines bike V8, it's a complicated process to figure out where

00:05:26,930 --> 00:05:33,580
exactly in memory for the value of the property is stored.

00:05:33,580 --> 00:05:40,920
Hence the virtual machine has optimisation techniques they use to make the process faster.

00:05:40,920 --> 00:05:45,920
First, let me explain to you: when I was trying to figure out all that stuff, the question

00:05:45,920 --> 00:05:48,500
I had is why is it complicated?

00:05:48,500 --> 00:05:52,200
Why is it complicated to figure out where the value is, right?

00:05:52,200 --> 00:05:56,370
And the answer is because of something called shapes or hidden classes.

00:05:56,370 --> 00:06:03,360
That is exactly the hidden class that Sebastian talked in his comment.

00:06:03,360 --> 00:06:09,270
So every single JavaScript object that you write in your everyday code is represented

00:06:09,270 --> 00:06:17,810
by the JavaScript object, the object internally, inside the VM, and this also is the corresponding

00:06:17,810 --> 00:06:19,290
shape object.

00:06:19,290 --> 00:06:26,950
So shape defines or describes the layout, which properties the object has, and some

00:06:26,950 --> 00:06:33,160
metadata, for example, the offset, where to find the value in memory.

00:06:33,160 --> 00:06:36,420
You might think why do we need this shape, right?

00:06:36,420 --> 00:06:41,100
Why not put all description of the properties on the object itself?

00:06:41,100 --> 00:06:44,570
And the reason is memory save.

00:06:44,570 --> 00:06:52,090
So, if we have two objects, on 1,000 objects, right, there's no need to describe the layout

00:06:52,090 --> 00:06:53,800
every single time.

00:06:53,800 --> 00:07:01,030
We can describe the layout only once, and then link this object to the shape that describes

00:07:01,030 --> 00:07:02,030
the layout, right?

00:07:02,030 --> 00:07:07,090
In this way, we only describe the layout once, even though we have, I don't know, potentially

00:07:07,090 --> 00:07:11,210
millions of objects in memory.

00:07:11,210 --> 00:07:14,780
But then, it creates a problem.

00:07:14,780 --> 00:07:20,220
What if we want to add an extra property?

00:07:20,220 --> 00:07:26,410
Now we want to extend the object A. We want to introduce the new property "W".

00:07:26,410 --> 00:07:31,270
Well, we need to introduce a new shape.

00:07:31,270 --> 00:07:36,740
We cannot add the W property to the original shape.

00:07:36,740 --> 00:07:41,060
Because it would mean that the other object, the object B that points to the same shape

00:07:41,060 --> 00:07:44,139
has this property, which is not true.

00:07:44,139 --> 00:07:48,350
We need to introduce the new property and then the new shape.

00:07:48,350 --> 00:07:50,200
Then we update links.

00:07:50,200 --> 00:07:55,139
The object now, the object points to the new shape.

00:07:55,139 --> 00:08:01,730
The same thing happens if we introduce another property we create one more shape.

00:08:01,730 --> 00:08:07,300
And so, in fact, we end up with something called Transition Chains.

00:08:07,300 --> 00:08:11,610
And it means that, when you try to access the property, for example, X, the original

00:08:11,610 --> 00:08:20,900
property on the A object which points to the button on the chain.

00:08:20,900 --> 00:08:26,460
It needs to go through every single property upwards and will until it finds the shape

00:08:26,460 --> 00:08:30,919
that describes the property.

00:08:30,919 --> 00:08:32,760
Okay?

00:08:32,760 --> 00:08:37,250
You can imagine that, if you add a lot of properties in different places and modify

00:08:37,250 --> 00:08:43,180
object shape, you will have a transition shape potentially with hundreds of transitions.

00:08:43,180 --> 00:08:47,459
And so, every single time when you access a property, the virtual machine has to go

00:08:47,459 --> 00:08:53,379
through all that process to figure out the shape that describes the layout and memory

00:08:53,379 --> 00:08:57,199
of that and retrieve that information.

00:08:57,199 --> 00:09:06,779
So a technique that V8 uses is to make that process faster.

00:09:06,779 --> 00:09:12,589
The idea is simple: the ... is the main word here.

00:09:12,589 --> 00:09:19,470
Every single JavaScript function is represented internally by the object called closure.

00:09:19,470 --> 00:09:26,129
This is where the virtual machine caches some information about the function, which objects

00:09:26,129 --> 00:09:32,260
are used to add parameters to this function, and the other information.

00:09:32,260 --> 00:09:35,180
And feed the vector, and this is the cache.

00:09:35,180 --> 00:09:38,670
This is where the virtual machine will cache some information.

00:09:38,670 --> 00:09:41,639
So let me give you an example of how it works.

00:09:41,639 --> 00:09:47,589
Suppose we are calling the function Get X and passing in an object with the X property.

00:09:47,589 --> 00:09:55,269
The virtual machine figures out the shape for this object, right, and then what it can

00:09:55,269 --> 00:10:05,639
do is that it can cache the shape of the object, and then the property, right, because we are

00:10:05,639 --> 00:10:13,779
getting access to the X property, and it can couch the offset, right?

00:10:13,779 --> 00:10:21,519
So the next time when we execute this function and pass in an object that has the same shape,

00:10:21,519 --> 00:10:27,300
the virtual machine can only compare the shapes, and, if they match, there's no longer need

00:10:27,300 --> 00:10:29,050
to figure out the shape.

00:10:29,050 --> 00:10:35,209
You can just take the cache value from the offset and use it to resolve the value in

00:10:35,209 --> 00:10:36,880
the memory.

00:10:36,880 --> 00:10:42,970
And what it also does is it defines the state of the function, and the state there can be

00:10:42,970 --> 00:10:52,170
three types of states: monomorphic state, monomorphic property access, and polymorphic.

00:10:52,170 --> 00:10:58,110
In this case, it's monomorphism because it - it's monomorphic because it has been called

00:10:58,110 --> 00:11:03,410
with one type of shape.

00:11:03,410 --> 00:11:10,019
Polymorphic is when a function has seen four types of shapes up to four times, and megamorphic

00:11:10,019 --> 00:11:16,490
is when you've been passing objects of different shapes, more than four types of shapes.

00:11:16,490 --> 00:11:26,920
It's important that you pass objects of the state to one function so the state remains

00:11:26,920 --> 00:11:28,769
monomorphic.

00:11:28,769 --> 00:11:42,240
I read the comment that monomorphic property access can be up to 100 times faster than

00:11:42,240 --> 00:11:43,240
megamorphic.

00:11:43,240 --> 00:11:50,910
If you take into account this 10,000 times of access during each change detection cycle

00:11:50,910 --> 00:11:56,689
that can happen several hundred times a second, you can imagine the kind of impact monomorphic

00:11:56,689 --> 00:12:01,220
property access can have on the speed.

00:12:01,220 --> 00:12:09,949
So frameworks use this to create - actually, what they do is they want to enforce this

00:12:09,949 --> 00:12:16,619
function that takes these nodes, it uses the same shape, same hidden class for fibre and

00:12:16,619 --> 00:12:21,700
view nodes, and that makes property access monomorphic.

00:12:21,700 --> 00:12:32,819
You can have HTML elements, child opponents, and if you follow object-orientated programming

00:12:32,819 --> 00:12:38,490
principles, you would create different classes for different elements.

00:12:38,490 --> 00:12:45,399
These frameworks actually merge everything into one data structure, one class, with all

00:12:45,399 --> 00:12:53,100
set of fields and they use one tag filled to distinguish between types of node.

00:12:53,100 --> 00:12:55,399
This is the code from the React framework.

00:12:55,399 --> 00:13:00,990
This is a function that is executed for every single DOM element, so potentially thousands

00:13:00,990 --> 00:13:08,529
of times during each cycle, and you can see here that they try to distinguish by tag,

00:13:08,529 --> 00:13:11,670
and then run the corresponding logic.

00:13:11,670 --> 00:13:14,860
Okay, so that is monomorphism.

00:13:14,860 --> 00:13:16,660
Now, let's talk about bitfils.

00:13:16,660 --> 00:13:20,250
This is the other things that both frameworks happily used.

00:13:20,250 --> 00:13:23,670
Bitfils is a low-level concept.

00:13:23,670 --> 00:13:29,930
Those who have programmed with C++, for example, know this data structure, and bitfils is just

00:13:29,930 --> 00:13:35,019
basically an array of bits - zeros and ones.

00:13:35,019 --> 00:13:43,120
You can define a bitfil today in JavaScript, type OB prefix in console and you'll get the

00:13:43,120 --> 00:13:46,360
binary fill.

00:13:46,360 --> 00:13:51,939
Now React uses bitfils to en code side effects.

00:13:51,939 --> 00:13:58,310
Side effects in React are basically just operations that the framework needs to do on DOM elements,

00:13:58,310 --> 00:14:04,579
maybe place an element in the DOM, update tags, remove element, and, instead of having

00:14:04,579 --> 00:14:12,329
an array of strings, for example, that define operations, they just assign places, and say

00:14:12,329 --> 00:14:16,389
that, "Okay, the third bit is the update operation."

00:14:16,389 --> 00:14:20,499
So, if the bit is one, I know that I need to update task.

00:14:20,499 --> 00:14:25,529
If the bit is zero, it means that there is nothing to do here.

00:14:25,529 --> 00:14:30,050
And I found that when I was debugging React, I'm sitting with a debugger, and I'm following

00:14:30,050 --> 00:14:37,739
the spun element, and I've just updated the tag on the spun element, so I'm trying to

00:14:37,739 --> 00:14:41,600
figure out what changes it will have.

00:14:41,600 --> 00:14:48,619
So the effect tag is this effects filled, and it's a bitfil, so right after the render

00:14:48,619 --> 00:14:56,759
face when it has process changes, the number, the value, is four, and, because it's a bitfil,

00:14:56,759 --> 00:15:07,300
it's binary, so I converted it into like - here, it is actually the decimal, but I know it's

00:15:07,300 --> 00:15:11,820
binary, so I converted it to binary and I got 100.

00:15:11,820 --> 00:15:19,500
If you explore the fill, you can see it's a third bit, and that's exactly what I expected.

00:15:19,500 --> 00:15:28,429
React encoded the update operation, so later - for example, here, when the function update

00:15:28,429 --> 00:15:35,249
hosts the facts, it's executed, so, React will check every single bit and see what kind

00:15:35,249 --> 00:15:36,800
of operations it needs to perform.

00:15:36,800 --> 00:15:41,559
For example, update will up date the tags.

00:15:41,559 --> 00:15:48,370
Now, you might be looking at that and think to yourself, "Well, why bother?"

00:15:48,370 --> 00:15:54,869
This is okay, but it's still too low level, but there are a number of benefits, and advantages

00:15:54,869 --> 00:15:59,630
that bitfils have over other types of data structures.

00:15:59,630 --> 00:16:05,980
For example, with bitfils, there is no need to allocate memory for JavaScript objects

00:16:05,980 --> 00:16:13,149
and shapes, so the virtual machine can save a lot of space, and because there is no shapes

00:16:13,149 --> 00:16:20,660
and JavaScript objects, there are no references, it means that the garbage collection is a

00:16:20,660 --> 00:16:22,299
lot simpler.

00:16:22,299 --> 00:16:28,029
You know, you figure out the dependency graph and know which objects are safe to remove.

00:16:28,029 --> 00:16:34,949
With the bitfils, it's one instruction to the processor to clear the contingent memory,

00:16:34,949 --> 00:16:37,759
and that's it.

00:16:37,759 --> 00:16:46,579
With the bitfil, it's a smaller contiguous memory usage and allows for fast access for

00:16:46,579 --> 00:16:47,600
a single bit.

00:16:47,600 --> 00:16:54,170
It's one twice operator, and that's it.

00:16:54,170 --> 00:16:55,449
So that is bitfils.

00:16:55,449 --> 00:16:59,209
They're used by both Angular and React.

00:16:59,209 --> 00:17:02,899
The last date structure is bloom filters.

00:17:02,899 --> 00:17:07,200
It's an interesting data structure.

00:17:07,200 --> 00:17:13,670
This data structure is designed to answer one simple question: is it element in the

00:17:13,670 --> 00:17:16,150
set or not?

00:17:16,150 --> 00:17:23,420
Well, you can use an array, of course, and just go over each element, make a comparison

00:17:23,420 --> 00:17:26,120
and figure out whether there is an element in the set or not.

00:17:26,120 --> 00:17:27,120
It's quite long.

00:17:27,120 --> 00:17:32,490
You can imagine you have one million objects, you need to go through every single one, and

00:17:32,490 --> 00:17:33,490
it's pretty long.

00:17:33,490 --> 00:17:37,600
Well, bloom filters allows you to do that with just one operation.

00:17:37,600 --> 00:17:42,340
I show you how to do that.

00:17:42,340 --> 00:17:49,900
What is good about bloom filters is you can get two types of answers - yes or no - and,

00:17:49,900 --> 00:17:55,310
when you get the answer no, it means the element is definitely not in the set.

00:17:55,310 --> 00:18:00,010
But when you get the answer yes, it's not actually yes, it's maybe.

00:18:00,010 --> 00:18:04,110
The probability varies.

00:18:04,110 --> 00:18:07,620
Because of that, this data structure is called probabilistic, right?

00:18:07,620 --> 00:18:11,330
There is probability here.

00:18:11,330 --> 00:18:14,780
You might be looking at that and thinking to yourself, "Who needs a data structure that

00:18:14,780 --> 00:18:18,670
doesn't give you correct answer s?"

00:18:18,670 --> 00:18:27,260
This data structure is used most often when you expect the answer no most of the time.

00:18:27,260 --> 00:18:29,720
And this is exactly the case that I will present to you now.

00:18:29,720 --> 00:18:36,350
But first, I will show you how this data structure works, so each element in the set is encoded

00:18:36,350 --> 00:18:43,040
in a bitfil - one bitfils, or a few bitfils - you will have a hashing function that will

00:18:43,040 --> 00:18:46,570
take a value and produce some number.

00:18:46,570 --> 00:18:52,850
For example, for John, if we run the function and we get the number 2, for example, we use

00:18:52,850 --> 00:18:59,720
the first letter and the code, for the letter, we will just use a binary or operator to set

00:18:59,720 --> 00:19:02,170
the second bit.

00:19:02,170 --> 00:19:09,430
And later, we will use the same function to get the number for John, but now we will use

00:19:09,430 --> 00:19:16,700
the B twice or operator to check if the John is here.

00:19:16,700 --> 00:19:21,500
You can imagine if the bit is not set, if it is zero, it means that John is not here.

00:19:21,500 --> 00:19:27,770
Now, where the problem is why, yes, it's not guaranteed.

00:19:27,770 --> 00:19:30,890
The problem is collisions.

00:19:30,890 --> 00:19:36,750
If we use the same hashing function and we use, for example, the only first letter to

00:19:36,750 --> 00:19:44,690
figure out the number, we're passing John and Jane, they have the same first letter.

00:19:44,690 --> 00:19:46,490
Here we have a collision, right?

00:19:46,490 --> 00:19:53,290
We end up with the John being in the set and Jane not being in the set, but the hash function

00:19:53,290 --> 00:20:01,160
would produce the same value and we get a wrong result.

00:20:01,160 --> 00:20:03,020
So where does Angular use this?

00:20:03,020 --> 00:20:07,040
It uses in a dependency injection system.

00:20:07,040 --> 00:20:10,740
So the cornerstone of the dependency injection system is an injector.

00:20:10,740 --> 00:20:17,030
It's a service, a container, where you can con figure the dependencies between services,

00:20:17,030 --> 00:20:22,420
and then the injectors responsible for instantiating them.

00:20:22,420 --> 00:20:29,760
Whereas most systems have only single injector called Global Injector, Angular has a hierarchical

00:20:29,760 --> 00:20:38,130
dependency injection, so, for the hierarchy of components, it creates an injector.

00:20:38,130 --> 00:20:44,320
For each component, you get an extra injector, so you end up with a hierarchy of injectors,

00:20:44,320 --> 00:20:51,810
and let's say the widget manager is provided in the top-most injector, or the bottom-most

00:20:51,810 --> 00:20:56,140
one requires on the widget.

00:20:56,140 --> 00:21:02,900
Angular would have to go through every single injector to figure out where exactly is this

00:21:02,900 --> 00:21:10,460
service, and only when it reaches the bottom-most injector it will be able to resolve the component.

00:21:10,460 --> 00:21:16,690
You can imagine it could take quite a while, for example, if every single injector has

00:21:16,690 --> 00:21:22,300
ten dependencies, ten services, it would need to go through every single one of them and

00:21:22,300 --> 00:21:25,530
do comparison which is a long time.

00:21:25,530 --> 00:21:31,930
So what Angular does, it introduces a bloom filter for every single injector, and with

00:21:31,930 --> 00:21:38,540
bloom filter, as I showed you, it's one operation to know whether the service is in the set

00:21:38,540 --> 00:21:41,450
or not.

00:21:41,450 --> 00:21:54,300
As I told you, the answer is most likely to go to be no, to so here, no here, and the

00:21:54,300 --> 00:21:57,630
last, the top-most, the answer is maybe.

00:21:57,630 --> 00:22:05,460
If we get the answer maybe, then we can do our actual comparison and find the service

00:22:05,460 --> 00:22:07,860
if it is there.

00:22:07,860 --> 00:22:11,030
So that is bloom filter for you.

00:22:11,030 --> 00:22:16,810
Okay, so here's a bunch of protocols that, if you're interested in that kind of flow-level

00:22:16,810 --> 00:22:25,540
details, I've written about reverse engineering, because I've reverse engineered webpack, other

00:22:25,540 --> 00:22:32,210
tools, change detection in Angular, and reconciliation in React.

00:22:32,210 --> 00:22:34,400
So here are the articles for you to check out.

00:22:34,400 --> 00:22:39,610
Also, if you want to learn more about this kind of topics, you can follow me on Twitter.

00:22:39,610 --> 00:22:46,070
I regularly write about some findings that I pick in these frameworks, and I've written

00:22:46,070 --> 00:22:51,400
about my journey, the article you can also read.

00:22:51,400 --> 00:22:56,370
So I hope that the knowledge that I've told you today that is awakened your curiosity

00:22:56,370 --> 00:23:01,961
to learn more about this kind of stuff, and I want you never to stop learning, and, by

00:23:01,961 --> 00:23:05,900
doing so, you will be able to reach new heights every day.

00:23:05,900 --> 00:23:08,650
Because I want you all guys to be extraordinary engineers.

00:23:08,650 --> 00:23:10,760
Thank you for your attention, and good luck.

00:23:10,760 --> 00:23:11,030

YouTube URL: https://www.youtube.com/watch?v=_VHNTC67NR8


