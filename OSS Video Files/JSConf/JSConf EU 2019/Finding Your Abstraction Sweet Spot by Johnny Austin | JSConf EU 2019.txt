Title: Finding Your Abstraction Sweet Spot by Johnny Austin | JSConf EU 2019
Publication date: 2019-06-18
Playlist: JSConf EU 2019
Description: 
	Many would argue there are only two hard problems in software: naming and cache invalidation. Iâ€™d argue thereâ€™s a third problem - abstractions. Whether youâ€™re implementing an API for devs outside of your organization or creating a reusable library for devs on your team, creating the right level of abstraction is difficult. You have to balance flexibility with the ease-of-use. The correct choice is often a function of time constraints, compromise, and trial & error. Iâ€™ll talk about how to navigate these issues more efficiently.

https://2019.jsconf.eu/johnny-austin/finding-your-abstraction-sweet-spot.html
Captions: 
	00:00:13,060 --> 00:00:14,060
Perfect.

00:00:14,060 --> 00:00:15,060
Cool.

00:00:15,060 --> 00:00:16,390
So, my name is Johnny.

00:00:16,390 --> 00:00:18,580
I'm a staff engineer in Washington, D.C.

00:00:18,580 --> 00:00:20,960
Working at a company called morning consult.

00:00:20,960 --> 00:00:27,300
And today I want to talk to you about a very bikesheddyworthy topic, which is finding your

00:00:27,300 --> 00:00:29,640
abstractions sweet spot.

00:00:29,640 --> 00:00:37,350
So, moving right along, this begs the question: What exactly is an abstraction?

00:00:37,350 --> 00:00:42,370
Before we get into that, though, I want to talk just a little bit about simplicity and

00:00:42,370 --> 00:00:43,690
complexity.

00:00:43,690 --> 00:00:49,620
So, we've all heard the mantra: Keep it simple, stupid.

00:00:49,620 --> 00:00:55,800
And truth be told, other than being a bit rude, I think it's a bit misguided as well.

00:00:55,800 --> 00:00:59,239
The fact of the matter is, simple doesn't really scale.

00:00:59,239 --> 00:01:03,590
It's really easy to get that hello world up and going and, you know, the first couple

00:01:03,590 --> 00:01:06,190
months of the thing you're trying to build, it's really great.

00:01:06,190 --> 00:01:12,250
But if you have any amount of success, things get really big, really complex really quickly.

00:01:12,250 --> 00:01:19,630
So, how do you embrace this idea of simplicity while accounting for inevitable complexity,

00:01:19,630 --> 00:01:20,630
right?

00:01:20,630 --> 00:01:23,049
So, we don't want KISS.

00:01:23,049 --> 00:01:28,080
What I tend to think about is elegance.

00:01:28,080 --> 00:01:29,080
Right?

00:01:29,080 --> 00:01:33,320
I think this is what we really mean when we say to keep things simple.

00:01:33,320 --> 00:01:34,450
Right?

00:01:34,450 --> 00:01:39,880
Elegance I define as complexity expressed simply.

00:01:39,880 --> 00:01:46,259
And the goto metaphor I tend to use is if you think about all of our reality, all the

00:01:46,259 --> 00:01:48,409
space and all that, it exists, right?

00:01:48,409 --> 00:01:55,790
There are trillions and trillions of protons and photons whatnot in the universe.

00:01:55,790 --> 00:02:02,579
They come together to form everything you see around you, stars and planets and meteors.

00:02:02,579 --> 00:02:05,670
And even you and I, living organisms.

00:02:05,670 --> 00:02:09,560
That's a hugely complex system.

00:02:09,560 --> 00:02:17,010
But it's really interesting that all of reality as we understand it today can also be expressed

00:02:17,010 --> 00:02:19,389
in the language of mathematics.

00:02:19,389 --> 00:02:21,700
That's an incredibly elegant thing.

00:02:21,700 --> 00:02:23,090
We don't know why.

00:02:23,090 --> 00:02:26,730
There's a big argument in, you know, physics about, you know, whether math is real, whether

00:02:26,730 --> 00:02:27,730
it's not.

00:02:27,730 --> 00:02:28,730
You know?

00:02:28,730 --> 00:02:29,809
Do you discover math?

00:02:29,809 --> 00:02:31,199
Or do you invent it?

00:02:31,199 --> 00:02:35,499
That's a completely different talk out of the realm of my particular expertise.

00:02:35,499 --> 00:02:39,159
But I think it's really elegant, nonetheless.

00:02:39,159 --> 00:02:40,159
Don't keep it simple.

00:02:40,159 --> 00:02:41,870
Keep it elegant.

00:02:41,870 --> 00:02:46,090
So, with that said, what is an abstraction?

00:02:46,090 --> 00:02:52,719
In this context, I like to think about an abstraction as the degree to which complexity

00:02:52,719 --> 00:02:54,610
is encapsulated.

00:02:54,610 --> 00:03:00,379
And going a little bit deeper here, I like to think about things in terms of strong and

00:03:00,379 --> 00:03:01,379
weak abstractions.

00:03:01,379 --> 00:03:06,989
When you think about a strong abstraction, it encapsulates a lot of complexity.

00:03:06,989 --> 00:03:10,440
And this is not necessarily a good thing.

00:03:10,440 --> 00:03:11,440
Right?

00:03:11,440 --> 00:03:15,529
There are many times when you don't necessarily want to hide a ton of complexity.

00:03:15,529 --> 00:03:19,650
When you want to maximize the amount of flexibility you give people who consume your APIs.

00:03:19,650 --> 00:03:22,719
And we'll talk a little bit about that later.

00:03:22,719 --> 00:03:28,189
Conversely, a weak abstraction encapsulates very little complexity.

00:03:28,189 --> 00:03:32,349
And pejorative to the term weak itself, this is not necessarily a bad thing.

00:03:32,349 --> 00:03:37,669
Sometimes you actually need people to be able to get down to the nuts and bolts of what

00:03:37,669 --> 00:03:40,879
you're providing them because that's what they need in order to be able to build something

00:03:40,879 --> 00:03:45,059
on top of your platform.

00:03:45,059 --> 00:03:49,010
Games seem to be really popular this year at JSConf.

00:03:49,010 --> 00:03:53,389
And I swear I put this up before I saw all the other games that were available.

00:03:53,389 --> 00:03:55,439
So, this is gonna be called guess the API.

00:03:55,439 --> 00:04:00,519
So, essentially the way it works, I'm gonna show you a small code snippet and then you're

00:04:00,519 --> 00:04:06,329
going to use context clues to figure out which famous JavaScript API invokes this implementation.

00:04:06,329 --> 00:04:09,339
So, we'll go through an example real quick.

00:04:09,339 --> 00:04:16,350
If I were to show you this block of code, you'd look at it, pick up some context clues.

00:04:16,350 --> 00:04:21,250
You know, you see the word "App," create application, all this good stuff.

00:04:21,250 --> 00:04:25,080
Does anyone have any idea where this block of code comes from?

00:04:25,080 --> 00:04:31,580
Oh, if you have any idea if you wrote this code, you are not allowed to participate.

00:04:31,580 --> 00:04:35,199
And if you cheat, may your life be filled with misery forever.

00:04:35,199 --> 00:04:36,980
[ Laughter ] Anyone?

00:04:36,980 --> 00:04:37,980
Yes?

00:04:37,980 --> 00:04:43,300
AUDIENCE: [ Away from microphone ] JOHNNY: Express application.

00:04:43,300 --> 00:04:46,370
But specifically, which function?

00:04:46,370 --> 00:04:49,479
That's all right.

00:04:49,479 --> 00:04:52,590
You were right.

00:04:52,590 --> 00:04:56,780
It's basically when you invoke express itself at the root, right?

00:04:56,780 --> 00:04:58,840
So, that's the only example I have.

00:04:58,840 --> 00:05:00,580
The others aren't going to be that easy.

00:05:00,580 --> 00:05:04,650
I picked stuff without revealing docs, but you get the point, right?

00:05:04,650 --> 00:05:05,720
All right.

00:05:05,720 --> 00:05:06,720
Ready?

00:05:06,720 --> 00:05:10,490
Here's the next one.

00:05:10,490 --> 00:05:12,460
Picking up context clues.

00:05:12,460 --> 00:05:18,639
There's some event stuff in here, some listener stuff.

00:05:18,639 --> 00:05:20,879
Anyone want to take a stab?

00:05:20,879 --> 00:05:27,060
Event on, that's pretty good.

00:05:27,060 --> 00:05:28,060
Yeah.

00:05:28,060 --> 00:05:36,180
This is whenever anyone in Node uses an event emitter and calls a .on event, that's what's

00:05:36,180 --> 00:05:37,190
invoked.

00:05:37,190 --> 00:05:43,500
Most notably in strings, but also when you're creating HTTP servers and things like that.

00:05:43,500 --> 00:05:46,050
What about this one?

00:05:46,050 --> 00:05:47,919
This one might be a little bit easy.

00:05:47,919 --> 00:05:54,969
This is props in a particular library all over the place.

00:05:54,969 --> 00:05:57,240
React what?

00:05:57,240 --> 00:06:01,280
React dot?

00:06:01,280 --> 00:06:03,310
Right.

00:06:03,310 --> 00:06:04,310
React.createelement.

00:06:04,310 --> 00:06:07,770
So, somebody's mad.

00:06:07,770 --> 00:06:10,139
So, what's the point here?

00:06:10,139 --> 00:06:14,360
The point is to illustrate that, you know, with some context clues you can kind of get

00:06:14,360 --> 00:06:15,990
an idea of what's going on.

00:06:15,990 --> 00:06:22,840
But the fact of the matter is, there's like nothing wrong with this code itself.

00:06:22,840 --> 00:06:25,930
You know, unless you hate semicolons or whatever.

00:06:25,930 --> 00:06:32,389
But the idea is that I wanted to illustrate the entropy that's involved in creating the

00:06:32,389 --> 00:06:34,620
abstractions that you use every day.

00:06:34,620 --> 00:06:42,360
Someone had to write so you can essentially write this.

00:06:42,360 --> 00:06:46,120
This doesn't just apply to code either.

00:06:46,120 --> 00:06:53,069
When you think about abstractions and what they're useful for, they're all over the place.

00:06:53,069 --> 00:06:55,689
Most notably, when we think about infrastructure, right?

00:06:55,689 --> 00:07:00,240
This is a big thing that's been happening within the industry really for about the last

00:07:00,240 --> 00:07:01,240
ten years.

00:07:01,240 --> 00:07:02,240
A lot of innovation has been happening.

00:07:02,240 --> 00:07:05,270
But really the last few years is when things really heated up.

00:07:05,270 --> 00:07:10,469
And I want to talk a bit about going up the abstraction chain to kind of figure out to

00:07:10,469 --> 00:07:14,860
kind of illustrate exactly why these things are important and the big milestones that

00:07:14,860 --> 00:07:15,860
we've seen.

00:07:15,860 --> 00:07:21,600
So, for those of us who were around when you needed to essentially have access to a physical

00:07:21,600 --> 00:07:23,990
server to actually deploy something.

00:07:23,990 --> 00:07:26,699
Whether it's a website or whatever you.

00:07:26,699 --> 00:07:30,940
This was a very imperative workflow to actually get your stuff deployed, right?

00:07:30,940 --> 00:07:32,419
Needed to know a lot of things.

00:07:32,419 --> 00:07:35,939
You needed to know where the server was.

00:07:35,939 --> 00:07:40,949
You needed to know security considerables to get into the server.

00:07:40,949 --> 00:07:44,969
You needed to know where on the server to put your deployable artifacts.

00:07:44,969 --> 00:07:47,840
It was a very, very imperative thing.

00:07:47,840 --> 00:07:52,400
And when say you need to know where it was, sometimes that was just in your bedroom, right?

00:07:52,400 --> 00:07:57,680
So, moving forward a little bit, someone had a great idea to just use virtual machines.

00:07:57,680 --> 00:08:01,729
The idea is like, forget the hardware, but I do need a computer.

00:08:01,729 --> 00:08:06,069
And so, began this whole revolution of computer emulation.

00:08:06,069 --> 00:08:11,020
A whole level of abstraction that was really a game changer in terms of portability.

00:08:11,020 --> 00:08:17,550
For the first time, really the thing on which your application rely wasn't necessarily the

00:08:17,550 --> 00:08:21,190
host operating system on which your stack actually ran.

00:08:21,190 --> 00:08:23,780
And this was huge.

00:08:23,780 --> 00:08:29,229
So, moving up a little bit, we talk about containers a bit, right?

00:08:29,229 --> 00:08:34,630
Forget the computer, all I really need are compute resources, right?

00:08:34,630 --> 00:08:37,339
This is about compute resource emulation, right?

00:08:37,339 --> 00:08:38,599
I don't need a UI.

00:08:38,599 --> 00:08:41,180
I don't need a start menu, that's kind of dumb.

00:08:41,180 --> 00:08:46,380
What I really need is a file system, CPU and, you know, memory.

00:08:46,380 --> 00:08:47,380
Other stuff.

00:08:47,380 --> 00:08:49,390
And that's what I need to run my application.

00:08:49,390 --> 00:08:55,750
And so, the abstraction gets a bit stronger.

00:08:55,750 --> 00:08:58,100
Platform as a service.

00:08:58,100 --> 00:09:04,440
This was really great as well because it allowed you to not even have to think about what your

00:09:04,440 --> 00:09:06,090
application was running on.

00:09:06,090 --> 00:09:08,210
That was irrelevant most of the time, right?

00:09:08,210 --> 00:09:10,130
And there are caveats here as well.

00:09:10,130 --> 00:09:14,250
But the idea is, the only thing you ship is an application.

00:09:14,250 --> 00:09:16,589
And someone else worries about everything else.

00:09:16,589 --> 00:09:19,630
That was your interface to your deployments.

00:09:19,630 --> 00:09:20,630
Right?

00:09:20,630 --> 00:09:27,040
Forget the compute resources, mostly, here's my app running.

00:09:27,040 --> 00:09:31,779
Which brings us to the current revolution, which is serverless, right?

00:09:31,779 --> 00:09:34,560
Forget the application and the computer.

00:09:34,560 --> 00:09:36,290
I'm gonna ship business logic.

00:09:36,290 --> 00:09:39,490
I want you to take care of essentially everything else.

00:09:39,490 --> 00:09:41,260
And that's kind of where we are now.

00:09:41,260 --> 00:09:48,899
And you see this continuously evolving and getting more and more strong as an abstraction.

00:09:48,899 --> 00:09:52,880
And you see where the benefits are for getting things up and running really closely.

00:09:52,880 --> 00:09:58,610
But you also encounter situations where these strong abstractions don't really make sense.

00:09:58,610 --> 00:10:02,009
Other people really need to use other things.

00:10:02,009 --> 00:10:05,350
So, what can go wrong?

00:10:05,350 --> 00:10:08,710
Well, short answer is: A lot.

00:10:08,710 --> 00:10:13,279
So, breaking changes.

00:10:13,279 --> 00:10:18,440
When you're not focusing on thinking about this up front, at least to some extent, you

00:10:18,440 --> 00:10:23,370
really run the risk of having a lot of breaking changes occur when you are developing your

00:10:23,370 --> 00:10:25,990
software, right?

00:10:25,990 --> 00:10:31,850
And you end up with nonbackwards compatibility software which forces you to essentially abandon

00:10:31,850 --> 00:10:36,029
users or have a lot of support over a long time.

00:10:36,029 --> 00:10:42,360
And truth be told, too many breaking changes is gonna prevent you from being able to sell

00:10:42,360 --> 00:10:43,810
to large enterprise customers.

00:10:43,810 --> 00:10:44,839
They're very risk averse.

00:10:44,839 --> 00:10:49,910
If you think about customers like the government or people in highly regulated industries like

00:10:49,910 --> 00:10:56,709
the finance industry or whatnot, they will not use your software if it's not stable.

00:10:56,709 --> 00:10:57,709
Tech debt.

00:10:57,709 --> 00:10:59,620
You could go the other direction, right?

00:10:59,620 --> 00:11:05,190
If you decide to keep those major versions in place, but you still need to make a lot

00:11:05,190 --> 00:11:10,000
of changes, you're going to have to do a lot of contorting in order to be able to maintain

00:11:10,000 --> 00:11:11,459
that backward compatibility.

00:11:11,459 --> 00:11:15,480
We've all worked in those codebases where we didn't want to break anything or we absolutely

00:11:15,480 --> 00:11:19,050
couldn't break anything, but we needed to make fixes.

00:11:19,050 --> 00:11:24,690
This created a lot of tech debt in the weight and there was no clear path to actually cleaning

00:11:24,690 --> 00:11:32,230
it up without essentially a complete refactor or rewrite.

00:11:32,230 --> 00:11:33,540
User confusion.

00:11:33,540 --> 00:11:36,800
So, this one is a bit less obvious.

00:11:36,800 --> 00:11:43,700
But if you get your abstraction wrong, or if it's not ideal, there's gonna be a lot

00:11:43,700 --> 00:11:48,920
of confusion within the communities that consume your software.

00:11:48,920 --> 00:11:56,899
I remember back when the AngularJS 1 landed, and it was absolutely a game change fetor

00:11:56,899 --> 00:11:58,570
frontend environment.

00:11:58,570 --> 00:12:06,149
And I remember they demonstrated the twoway data binding and it was like amazing.

00:12:06,149 --> 00:12:07,940
And this was great.

00:12:07,940 --> 00:12:09,130
But then something happened.

00:12:09,130 --> 00:12:12,940
I guess about 24 months had gone by.

00:12:12,940 --> 00:12:17,880
Companies had started adopting AngularJS as like, you know, something that was real.

00:12:17,880 --> 00:12:22,870
And then people actually started building really big, robust web applications using

00:12:22,870 --> 00:12:25,230
AngularJS.

00:12:25,230 --> 00:12:30,360
And then what happens is, you get to a place where you need to make a deployment or you're

00:12:30,360 --> 00:12:31,720
getting close to the end.

00:12:31,720 --> 00:12:33,600
But you have some last-minute requirement changes.

00:12:33,600 --> 00:12:36,290
It happens all the time.

00:12:36,290 --> 00:12:43,329
But you've architected your application in such a way that your directives need to communicate

00:12:43,329 --> 00:12:47,260
with each other in a very elegant way.

00:12:47,260 --> 00:12:49,021
But you didn't architect, you didn't account for this, right?

00:12:49,021 --> 00:12:54,190
This is before we had sort, you know before redux was really a thing and we had like really

00:12:54,190 --> 00:12:57,720
mature sort of like state management solutions on the frontend.

00:12:57,720 --> 00:13:03,240
So, what would happen is people would try to get two directives to talk to each other

00:13:03,240 --> 00:13:04,240
very quickly.

00:13:04,240 --> 00:13:10,150
And instead of having to refactor the way the communication messaging happened, they

00:13:10,150 --> 00:13:14,069
would adopt what I refer to as the spray and pray architecture.

00:13:14,069 --> 00:13:18,339
And you take advantage of Angular's dependency injection.

00:13:18,339 --> 00:13:24,449
You inject root scope and you do a rootscope.broadcast and throw out data out into the either a hope

00:13:24,449 --> 00:13:26,010
something receives.

00:13:26,010 --> 00:13:28,529
I know some of you have done it.

00:13:28,529 --> 00:13:30,480
You look guilty, heads down.

00:13:30,480 --> 00:13:32,980
I know, I have been there.

00:13:32,980 --> 00:13:36,190
This was not Angular's fault.

00:13:36,190 --> 00:13:42,160
This was the abstraction we were given in order to build our applications.

00:13:42,160 --> 00:13:46,560
And it just so happen when is trying to scale out he's applications, this was the challenges

00:13:46,560 --> 00:13:47,560
we ran into.

00:13:47,560 --> 00:13:53,709
In fact, a lot of these issues were some of the early inspirations for, you know, architect

00:13:53,709 --> 00:13:57,470
for libraries like React and Vue, et cetera.

00:13:57,470 --> 00:14:00,389
And these are the types of things that can happen, right?

00:14:00,389 --> 00:14:02,980
This is not bashing Angular 1.x.

00:14:02,980 --> 00:14:04,660
I'm a big fan.

00:14:04,660 --> 00:14:08,170
I don't think it deserves half the flak it received.

00:14:08,170 --> 00:14:11,570
So, the reason you're all here.

00:14:11,570 --> 00:14:13,360
Where is my sweet spot?

00:14:13,360 --> 00:14:20,980
How can I figure out where I need to be placing my abstractions such that it benefits both

00:14:20,980 --> 00:14:23,250
myself and my users?

00:14:23,250 --> 00:14:28,480
So, opinions, opinions, opinions, warning.

00:14:28,480 --> 00:14:37,060
So, the big thing I think everyone should really think about is flexibility versus ease

00:14:37,060 --> 00:14:38,060
of use.

00:14:38,060 --> 00:14:39,060
Right?

00:14:39,060 --> 00:14:40,060
This is the big one.

00:14:40,060 --> 00:14:41,720
This is going to be your ultimate tradeoff.

00:14:41,720 --> 00:14:47,550
The idea is the more flexible you are, you're gonna tend to sacrifice some ease of use,

00:14:47,550 --> 00:14:48,550
right?

00:14:48,550 --> 00:14:50,870
This is gonna be your weaker abstractions with flexibility.

00:14:50,870 --> 00:14:52,690
This is gonna be your low-level stuff.

00:14:52,690 --> 00:14:57,379
This is gonna be your WebGLs of the world which are really great.

00:14:57,379 --> 00:15:02,180
But someone like me, not a 3D programmer, I need something higher level.

00:15:02,180 --> 00:15:03,970
I need the 3JSs of the world.

00:15:03,970 --> 00:15:07,370
Or higher than that, truth be told.

00:15:07,370 --> 00:15:09,750
Versus ease of use, right?

00:15:09,750 --> 00:15:13,760
You are a 3D programmer and you really know what you're doing, a lot of the helpers out

00:15:13,760 --> 00:15:17,000
there are just gonna get in your way more than anything else.

00:15:17,000 --> 00:15:18,310
Maybe that's not what you need.

00:15:18,310 --> 00:15:23,690
So, what you have to do is figure out where your users are and make sure you're meeting

00:15:23,690 --> 00:15:27,790
them where they are.

00:15:27,790 --> 00:15:30,529
Similar to that, you have to consider your audience, right?

00:15:30,529 --> 00:15:32,500
Who are you building for?

00:15:32,500 --> 00:15:34,529
Is this internal or external?

00:15:34,529 --> 00:15:35,529
Right?

00:15:35,529 --> 00:15:37,330
Internal you can get away with a lot of stuff.

00:15:37,330 --> 00:15:42,800
If it's external and people are gonna be using this either as a product or maybe just an

00:15:42,800 --> 00:15:47,009
open source tool, you need to make sure that you have that correct understanding.

00:15:47,009 --> 00:15:50,190
What are people using your stuff to build with?

00:15:50,190 --> 00:15:53,519
You can't control that, but it may come into play.

00:15:53,519 --> 00:15:59,129
This is when you really get intimate with the users and figure out what they're doing.

00:15:59,129 --> 00:16:01,480
Platforms.

00:16:01,480 --> 00:16:03,209
This is a good one as well.

00:16:03,209 --> 00:16:07,829
Some platforms and languages lend themselves better to certain levels of abstraction.

00:16:07,829 --> 00:16:12,339
Practitioners of a language might regularly work on a certain level, right?

00:16:12,339 --> 00:16:17,569
JavaScript developers generally want objects and strings, that sort of thing.

00:16:17,569 --> 00:16:18,790
Maybe some arrays.

00:16:18,790 --> 00:16:26,610
Go Lang, they want buffers and errors, have you looked at go code?

00:16:26,610 --> 00:16:27,730
Rust developers want jobs.

00:16:27,730 --> 00:16:28,730
Just kidding.

00:16:28,730 --> 00:16:29,730
That's a troll.

00:16:29,730 --> 00:16:32,329
I love Rust.

00:16:32,329 --> 00:16:34,660
It's a great language.

00:16:34,660 --> 00:16:38,009
Life span.

00:16:38,009 --> 00:16:39,240
This is a big one as well.

00:16:39,240 --> 00:16:40,240
Right?

00:16:40,240 --> 00:16:42,730
This is very similar to, you know, the breaking changes.

00:16:42,730 --> 00:16:47,540
If you're very up front with your audience and your users about the type of timeline

00:16:47,540 --> 00:16:52,000
they can expect for support, this is gonna inform the level at which you actually, you

00:16:52,000 --> 00:16:53,670
know, write your software.

00:16:53,670 --> 00:16:56,800
That's gonna be really important.

00:16:56,800 --> 00:17:01,350
So, coming to wrap things up a little bit.

00:17:01,350 --> 00:17:04,089
You want to make sure you focus on elegance.

00:17:04,089 --> 00:17:06,190
And not just simplicity.

00:17:06,190 --> 00:17:07,190
Simplicity won't scale.

00:17:07,190 --> 00:17:10,540
No one's gonna buy anything that's simple, right?

00:17:10,540 --> 00:17:12,950
Because anyone can reproduce your work.

00:17:12,950 --> 00:17:16,980
If you're gonna be successful, you're gonna inevitably head towards complexity.

00:17:16,980 --> 00:17:21,970
The best thing downing is account for it in a way that allows you to build a competitive

00:17:21,970 --> 00:17:22,970
product.

00:17:22,970 --> 00:17:28,209
But also ensures that your users are happy.

00:17:28,209 --> 00:17:33,130
Think in terms of weak or strong abstractions and when is the right time to use either one.

00:17:33,130 --> 00:17:35,870
Sometimes you need to support the whole spectrum, right?

00:17:35,870 --> 00:17:37,370
That's something that's really important.

00:17:37,370 --> 00:17:40,010
That's gonna take a lot of resources, it's gonna take a lot of time.

00:17:40,010 --> 00:17:44,080
Maybe you start at one end of the spectrum and you end up on the other.

00:17:44,080 --> 00:17:47,150
This is a decision that you have to make.

00:17:47,150 --> 00:17:52,440
So, remember the tradeoffs of flexibility and ease of use.

00:17:52,440 --> 00:17:54,110
Very similar to the previous point.

00:17:54,110 --> 00:17:55,180
There are real tradeoffs here.

00:17:55,180 --> 00:17:59,120
And you need to make them as close to up front as you can.

00:17:59,120 --> 00:18:03,250
But not necessarily completely.

00:18:03,250 --> 00:18:06,310
Think about the consequences of getting it wrong.

00:18:06,310 --> 00:18:12,420
Frequent breaking changes, tech debt, user confusion, there's nothing you can do to avoid

00:18:12,420 --> 00:18:15,200
all of these things, unfortunately.

00:18:15,200 --> 00:18:18,880
Part of the planning up front is to make sure that you know that you're gonna accumulate

00:18:18,880 --> 00:18:19,880
that tech debt.

00:18:19,880 --> 00:18:22,890
So, just have a plan to kind of pay it down, right?

00:18:22,890 --> 00:18:25,990
Or if you're gonna have frequent breaking changes, maybe you want to launch in a beta

00:18:25,990 --> 00:18:29,400
for a while and make sure people understand that up front.

00:18:29,400 --> 00:18:33,751
If you know this is gonna be crazy and maybe people are gonna be a bit confused, focus

00:18:33,751 --> 00:18:38,420
more on developer reach out and make sure people know exactly how to use your software.

00:18:38,420 --> 00:18:41,650
And think about your audience.

00:18:41,650 --> 00:18:44,650
you can have the best product and the best software in the world.

00:18:44,650 --> 00:18:49,820
But if no one is going to buy it and no one wants to use it, then you're essentially dead

00:18:49,820 --> 00:18:51,660
in the water.

00:18:51,660 --> 00:19:02,810

YouTube URL: https://www.youtube.com/watch?v=go5VCfJMJhw


