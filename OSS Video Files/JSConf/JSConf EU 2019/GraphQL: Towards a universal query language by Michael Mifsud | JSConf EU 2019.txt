Title: GraphQL: Towards a universal query language by Michael Mifsud | JSConf EU 2019
Publication date: 2019-08-14
Playlist: JSConf EU 2019
Description: 
	From its friendly developer experience to its performance benefits, a lot has been said about GraphQL. Underlying it all is the GraphQL query language, made possible by GraphQL schema language. These surprisingly versatile features have the potential to provide a single interface for all modern web app development concerns.

We will start with a case study on how we use GraphQL queries as an universal interface to resolve data over a variety of datasources ranging from remote HTTP requests, to local CSV files, and in-memory data stores. Next we will explore these ideas further, using GraphQL queries as an interface over the DOM and various other web APIs.

https://2019.jsconf.eu/michael-mifsud/graphql-towards-a-universal-query-language.html
Captions: 
	00:00:12,929 --> 00:00:15,480
Thank you.

00:00:15,480 --> 00:00:16,760
GraphQL.

00:00:16,760 --> 00:00:20,369
You might have heard of it by now, and, if you have, you've heard about how to it's great

00:00:20,369 --> 00:00:27,660
for performance, backwards compatibility, and great for those hard to get out stains!

00:00:27,660 --> 00:00:29,200
Probably!

00:00:29,200 --> 00:00:31,240
There's seemingly nothing it can't do.

00:00:31,240 --> 00:00:33,730
But have you wondered how?

00:00:33,730 --> 00:00:36,930
How can GraphQL have these supposed superpowers?

00:00:36,930 --> 00:00:41,160
I think the key to this lays in its basic building blocks.

00:00:41,160 --> 00:00:46,079
In this talk, we will start off by taking a look at the schema definition language,

00:00:46,079 --> 00:00:51,540
RSL, and the resolvers, and understand how they work together to execute a query.

00:00:51,540 --> 00:00:57,630
Then I will show ways to use these features to graph all the things before finally entering

00:00:57,630 --> 00:01:00,610
the "don't try this at home" portion of the talk.

00:01:00,610 --> 00:01:09,320
First, g, the ' day, how is it going?

00:01:09,320 --> 00:01:14,939
We work on building tooling services and platforms to enable at Red Bubble.

00:01:14,939 --> 00:01:22,680
I'm the maintainer of Lis Sass and notes Sass.

00:01:22,680 --> 00:01:24,290
So let's jump right into it.

00:01:24,290 --> 00:01:26,750
The schema is the skeleton of GraphQL.

00:01:26,750 --> 00:01:27,800
It's what gives it its shape.

00:01:27,800 --> 00:01:31,450
Everything else builds on top of or happens because of the schema.

00:01:31,450 --> 00:01:34,979
It is defined using the schema definition language.

00:01:34,979 --> 00:01:38,280
We are we have an example schema.

00:01:38,280 --> 00:01:43,340
We're using "type" to define conference.

00:01:43,340 --> 00:01:46,850
Our conference type is a name field which we set as a string.

00:01:46,850 --> 00:01:51,630
String is one of the skeletypes, in graph, and others like ints, floats, and booleans

00:01:51,630 --> 00:01:54,760
and the other suspects.

00:01:54,760 --> 00:02:00,490
We have a speakers' field which has an array of the speaker type.

00:02:00,490 --> 00:02:03,740
It's not a built-in type, so we define it ourselves.

00:02:03,740 --> 00:02:06,890
Our speaker has a name and a favourite emoji.

00:02:06,890 --> 00:02:12,290
This gives me licence to use member throughout the talk!

00:02:12,290 --> 00:02:14,650
We have some fields with exclamation marks and others don't.

00:02:14,650 --> 00:02:19,069
It means a field is omitted but still valid.

00:02:19,069 --> 00:02:25,939
IDs are convenient for querying and mutating data.

00:02:25,939 --> 00:02:33,359
Speaking of querying and mutating data, we have the query types called root types.

00:02:33,359 --> 00:02:36,169
There are others too but we're not going to talk about them today.

00:02:36,169 --> 00:02:40,730
On our query type, we have a conference field that returns any conferences we know about.

00:02:40,730 --> 00:02:47,780
We also have a speaker's field that has a required emoji argument and returns some speakers.

00:02:47,780 --> 00:02:48,819
We have a mutation type.

00:02:48,819 --> 00:02:53,400
It has a speak field, that takes a speaker ID and a Conference ID.

00:02:53,400 --> 00:02:58,519
Something to note, it's common to refer to fields on query mutation types.

00:02:58,519 --> 00:03:05,420
You see return-type mutation looks like the return type of a query field.

00:03:05,420 --> 00:03:10,780
A field on a mutation could return things like booleans but as richer types as part

00:03:10,780 --> 00:03:12,809
of the expressiveness of GraphQL.

00:03:12,809 --> 00:03:18,500
There is some detail as to how these are defined that we won't go into today.

00:03:18,500 --> 00:03:22,120
The important thing to take away from this is the field in the query type to ask for

00:03:22,120 --> 00:03:25,909
information whereas fields and mutation type typically change things.

00:03:25,909 --> 00:03:33,280
Lastly, the resulting data from mutation can be expected to have the changes already applied.

00:03:33,280 --> 00:03:37,109
The schemas are the skeletons of GraphQL and at their beating heart.

00:03:37,109 --> 00:03:38,900
They bring life to GraphQL.

00:03:38,900 --> 00:03:43,739
With the amazing things that GraphQL can do, you would think they would be pretty complicated,

00:03:43,739 --> 00:03:48,499
but it's the simplicity of resolvers that is the key to their flexibility.

00:03:48,499 --> 00:03:49,779
It's just a function.

00:03:49,779 --> 00:03:51,420
It takes a couple of arguments.

00:03:51,420 --> 00:03:55,069
We're going to talk about these three today, but there are others.

00:03:55,069 --> 00:04:00,430
You can define a resolver or any or all fields on your schema, including fields in the query

00:04:00,430 --> 00:04:08,109
type, the speak field, and fields on any type like the emoji field on the speaker type.

00:04:08,109 --> 00:04:12,209
Inside a resolver, you can do anything it could do in any other JavaScript function.

00:04:12,209 --> 00:04:16,199
The only requirement is that it returns of value in the shape that matches the type of

00:04:16,199 --> 00:04:20,389
the field that it is responsible for.

00:04:20,389 --> 00:04:21,640
Here we have a map of resolvers.

00:04:21,640 --> 00:04:26,090
It has a query object representing the query type.

00:04:26,090 --> 00:04:30,080
And a query object, there is a speaker's resolver.

00:04:30,080 --> 00:04:32,590
A speaker's query has an emoji argument.

00:04:32,590 --> 00:04:37,330
We can access that argument by the name on the arc's argument on its resolver.

00:04:37,330 --> 00:04:43,730
We know from our schema that the query should returning the or an array of speaker types.

00:04:43,730 --> 00:04:50,360
Here it's returning an array of objects which have an integer ID field and a name and an

00:04:50,360 --> 00:04:55,360
emoji string field which means they match the expected shape of the query and all is

00:04:55,360 --> 00:04:56,360
well.

00:04:56,360 --> 00:05:02,490
Remember, the conference field doesn't have an exclamation mark so it's entirely optional

00:05:02,490 --> 00:05:03,490
here.

00:05:03,490 --> 00:05:11,250
Our speaker mutation - here we have a speaker mutation loading data from the context by

00:05:11,250 --> 00:05:13,790
the conference ID argument.

00:05:13,790 --> 00:05:17,080
Conference is a bit special.

00:05:17,080 --> 00:05:22,159
It makes it useful for storing things like configuration or services like database connections.

00:05:22,159 --> 00:05:28,219
After it is loaded, the speaker ID argument is appended to the conference object, the

00:05:28,219 --> 00:05:36,449
- finally does a query for the conferences that the speaker is attending.

00:05:36,449 --> 00:05:37,449
So that was a lot.

00:05:37,449 --> 00:05:39,939
But it is just a groundwork for what is coming up next.

00:05:39,939 --> 00:05:45,379
We're going to take a look at practical use of resolvers to feel how they work together

00:05:45,379 --> 00:05:49,570
and give you the versatility of GraphQL.

00:05:49,570 --> 00:05:51,810
The simplest resolver is one that returns an object.

00:05:51,810 --> 00:05:56,199
Earlier, we saw a resolver and all good because it returned a resolver that matched the shape

00:05:56,199 --> 00:06:01,500
of the speaker type before how does GraphQL match the speaker shape?

00:06:01,500 --> 00:06:05,639
Is there some kind of internal validation engine or some form of intro expect on their

00:06:05,639 --> 00:06:07,370
return type or AI?

00:06:07,370 --> 00:06:10,069
GraphQL can do these magical things.

00:06:10,069 --> 00:06:12,410
Why not build AI in there?

00:06:12,410 --> 00:06:16,509
No doubt there is a way to return these types.

00:06:16,509 --> 00:06:21,069
If you're like me, you're thinking about how you would have done it yourself.

00:06:21,069 --> 00:06:23,569
I've shown you how it happens.

00:06:23,569 --> 00:06:27,530
Every field from GraphQL gets a default resolver.

00:06:27,530 --> 00:06:29,919
The default resolver is straightforward.

00:06:29,919 --> 00:06:34,979
For any field, it takes the object, the parent object and tries to be the access a field

00:06:34,979 --> 00:06:38,430
as a function call, or an object property on the parent.

00:06:38,430 --> 00:06:44,130
Importantly, this happens recursively, so, if a field returns a type, the field's return

00:06:44,130 --> 00:06:49,240
type is a custom type, then all the fields on that type have their resolvers called.

00:06:49,240 --> 00:06:51,740
This is what happens in our case.

00:06:51,740 --> 00:06:55,870
The schema for our speaker's query returns return type to a null or an array of speaker

00:06:55,870 --> 00:06:57,690
type.

00:06:57,690 --> 00:06:59,350
GraphQL takes the speaker value.

00:06:59,350 --> 00:07:01,720
If it is null, it's returned.

00:07:01,720 --> 00:07:05,490
If it is an array, the value is iterated over and a resolver default is called for each

00:07:05,490 --> 00:07:07,800
speaker field.

00:07:07,800 --> 00:07:12,569
The parent armed for the resolver is the object at the current loop of the array.

00:07:12,569 --> 00:07:17,020
If a resolver for a field returns the wrong time, GraphQL throws an error.

00:07:17,020 --> 00:07:22,509
Also, if the return type of the initial speaker's query isn't null or an array, we also get

00:07:22,509 --> 00:07:23,509
an error.

00:07:23,509 --> 00:07:28,610
The default resolver is a great example of how we use building blocks to solve tricky

00:07:28,610 --> 00:07:30,719
problems like validation.

00:07:30,719 --> 00:07:37,150
So, a common use case for GraphQL is putting it in front of existing APIs.

00:07:37,150 --> 00:07:41,099
This really its bread and butter and what gave it momentum to start off with.

00:07:41,099 --> 00:07:43,330
Even here, there are interesting possibilities.

00:07:43,330 --> 00:07:48,540
Here, I've updated our speaker query to make an HTTP request instead of returning a hard-coded

00:07:48,540 --> 00:07:51,770
API.

00:07:51,770 --> 00:07:54,580
The schema could have different types.

00:07:54,580 --> 00:08:02,710
In this case, you iterate over the JSON and transform it to the phenotype you expect.

00:08:02,710 --> 00:08:06,610
Once again, we've added the conference resolver to the speaker type.

00:08:06,610 --> 00:08:09,469
There are a couple of interesting things happening here.

00:08:09,469 --> 00:08:12,270
Firstly, using both jQuery and fetch.

00:08:12,270 --> 00:08:13,849
Because, why wouldn't you?

00:08:13,849 --> 00:08:18,122
You have the entire power of JavaScript and MPM at our resolvers, so we might as well

00:08:18,122 --> 00:08:20,430
use it all.

00:08:20,430 --> 00:08:28,730
We are iterating over the array of speakers, and for each of those speakers, the conference

00:08:28,730 --> 00:08:31,500
resolver has called from an entirely different API.

00:08:31,500 --> 00:08:37,500
Here, GraphQL's essentially aggregating across multiple APIs in order to resolve a single

00:08:37,500 --> 00:08:38,500
query.

00:08:38,500 --> 00:08:42,060
The remaining queries are resolved using a default resolver.

00:08:42,060 --> 00:08:45,380
You can have a resolver with any or all fields.

00:08:45,380 --> 00:08:52,180
You can resolve all fields by its own API and users wouldn't be any the wiser.

00:08:52,180 --> 00:08:57,800
I'm not saying you should do this but you could if you wanted to.

00:08:57,800 --> 00:09:01,649
GraphQL got a lot of attention early on because of how well it worked as a facade on top of

00:09:01,649 --> 00:09:07,170
these fragmented APIs which often had incompatible methods of authentication, different transport

00:09:07,170 --> 00:09:10,170
types or content types.

00:09:10,170 --> 00:09:16,930
We can expose a single interface over - you have, APIs, without having to rewrite any

00:09:16,930 --> 00:09:17,930
of them.

00:09:17,930 --> 00:09:22,550
It wasn't long before people start rescinding these ideas, sometimes cutting out the APIs

00:09:22,550 --> 00:09:25,050
altogether and going straight to the database.

00:09:25,050 --> 00:09:29,290
Some truly innovative people have gone as far as defining the schemas themselves in

00:09:29,290 --> 00:09:31,880
a different language.

00:09:31,880 --> 00:09:37,810
Here, we are resolving a speaker query by making a -gate query.

00:09:37,810 --> 00:09:47,530
We are pulling the database operation - we set this up earlier.

00:09:47,530 --> 00:09:51,209
Because you have the full power of JavaScript to get a disposal here, you can do all the

00:09:51,209 --> 00:09:57,660
things you would do in an attractional RM, like read or write instances, whatever the

00:09:57,660 --> 00:09:59,790
requirements of that field might be.

00:09:59,790 --> 00:10:05,730
If you can use a database, there's no reason you can't use any other kind of of data store.

00:10:05,730 --> 00:10:11,510
Here, we are mixing and matching between relation al databases, elastic searches, at the field

00:10:11,510 --> 00:10:12,510
resolver level.

00:10:12,510 --> 00:10:17,440
Being able to make these choices at the field resolver levels allows us to fit best-fit

00:10:17,440 --> 00:10:21,680
solutions for the requirements of an individual field and changes of requirements over time

00:10:21,680 --> 00:10:23,000
as our systems change.

00:10:23,000 --> 00:10:28,290
By no means saying this is unique to GraphQL, simply aiming to illustrate the ease as which

00:10:28,290 --> 00:10:34,290
these capabilities are achieved between - within the play between schemas and resolvers within

00:10:34,290 --> 00:10:35,290
GraphQL.

00:10:35,290 --> 00:10:37,880
This is actually my favourite use case.

00:10:37,880 --> 00:10:42,630
I said earlier that the platform team is a bubble, we focus on enabling everyone, not

00:10:42,630 --> 00:10:43,630
just engineers.

00:10:43,630 --> 00:10:48,040
The way we do this is let people bring their own tools and adapt our systems to work with

00:10:48,040 --> 00:10:49,620
them.

00:10:49,620 --> 00:10:51,280
Enter spreadsheets.

00:10:51,280 --> 00:10:56,260
Who doesn't love a good spreadsheet in I know I do, our copy writers do, our data scientists

00:10:56,260 --> 00:10:57,800
do.

00:10:57,800 --> 00:11:03,279
They're practically ubiquitous and this makes them a powerful tool for enabling and encouraging

00:11:03,279 --> 00:11:05,500
contributions.

00:11:05,500 --> 00:11:08,889
Spreadsheets are fantastic for GraphQL because they are already structured.

00:11:08,889 --> 00:11:13,490
They come with their own schemas in the form of columns and rows.

00:11:13,490 --> 00:11:23,389
Here our speaker's query is loading it from disk, filtering the speakers to knows matching

00:11:23,389 --> 00:11:26,040
the emoji we passed them as a query alter.

00:11:26,040 --> 00:11:31,949
Now, anyone in our organisation can drag and drop a new spreadsheet on the GitHub UI.

00:11:31,949 --> 00:11:39,860
This kicks off our pipelines, and if the test passes, this is live for everyone to see,

00:11:39,860 --> 00:11:44,740
no engineer was required for this process.

00:11:44,740 --> 00:11:53,019
I mentioned at Red Bubble, we have a lot of this GraphQL distributed and a lot of configuration

00:11:53,019 --> 00:11:55,829
services to back this up.

00:11:55,829 --> 00:11:59,959
These configurations services are different to other services in that they fetch configuration

00:11:59,959 --> 00:12:01,699
on deploy and fetch low locally.

00:12:01,699 --> 00:12:05,350
They're not meant to be used in request.

00:12:05,350 --> 00:12:10,310
They may get over-the-wire updates as their lifetime goes on.

00:12:10,310 --> 00:12:13,810
We like the approach for - but it covers the complexities.

00:12:13,810 --> 00:12:18,339
Is is is the configuration stored in memory or on disk?

00:12:18,339 --> 00:12:20,339
What happens when we receive an update?

00:12:20,339 --> 00:12:23,760
How do we validate the new configuration?

00:12:23,760 --> 00:12:28,230
We tried a few ways of managing and exposing configuration in our services and as you might

00:12:28,230 --> 00:12:31,560
expected, we eventually landed on GraphQL.

00:12:31,560 --> 00:12:35,140
Loading configuration files in resolver is pretty straightforward using the FS promises

00:12:35,140 --> 00:12:36,140
API.

00:12:36,140 --> 00:12:43,610
If we're unable to load the configuration for any reason, the server fails to boot.

00:12:43,610 --> 00:12:47,269
This works really well in many cloud environments because currently running it deploys will

00:12:47,269 --> 00:12:53,540
keep running until new versions can come up, so we don't lose any downtime.

00:12:53,540 --> 00:13:00,410
Next up internally, we created a configuration object by querying for that GraphQL configuration.

00:13:00,410 --> 00:13:05,810
If some important data is missing or if the data is otherwise unsuitable, the query fails

00:13:05,810 --> 00:13:08,329
and the service failed fails to boot again.

00:13:08,329 --> 00:13:14,390
Here, GraphQL's acting as an internal API abstracting over the node files APIs and abstracting

00:13:14,390 --> 00:13:20,480
over the complexities of dealing with validity and freshness.

00:13:20,480 --> 00:13:23,980
So some of you may have the inned in a previous slide, it was a chicken-and-egg scenario,

00:13:23,980 --> 00:13:29,470
how to load configuration and put it in context if we are loading configuration inside a resolver?

00:13:29,470 --> 00:13:32,430
This is where we do something nifty.

00:13:32,430 --> 00:13:39,750
We create multiple GraphQL servers with their own schemas and resolvers.

00:13:39,750 --> 00:13:44,480
One server handles incoming requests and reloads configuration by querying the second GraphQL

00:13:44,480 --> 00:13:46,920
server.

00:13:46,920 --> 00:13:48,170
That's right.

00:13:48,170 --> 00:13:53,630
You can even use GraphQL to abstract over GraphQLs running on the same machine.

00:13:53,630 --> 00:13:58,590
In fact, just about any API that is simply reads and writes can be represented as GraphQL

00:13:58,590 --> 00:14:01,300
queries and mutations.

00:14:01,300 --> 00:14:08,170
This is a real - this got me thinking - a light build up bulb moment for me.

00:14:08,170 --> 00:14:10,730
What if our JavaScript APIs were GraphQL?

00:14:10,730 --> 00:14:16,980
What if the browsers had a GraphQL interface?

00:14:16,980 --> 00:14:20,550
This is my friends when things go off the rails.

00:14:20,550 --> 00:14:23,139
Welcome to the don't try this portion at home.

00:14:23,139 --> 00:14:26,060
Don't try this at home portion of the talk.

00:14:26,060 --> 00:14:29,649
I hope by now I've been able to convince you that enough about any read or write interface

00:14:29,649 --> 00:14:32,820
can be like plastered over with graphical representation.

00:14:32,820 --> 00:14:37,680
This got me thinking: the browser has read and write APIs.

00:14:37,680 --> 00:14:40,079
Surely these could have some graphical interfaces.

00:14:40,079 --> 00:14:45,959
As it turns out, there's nothing about GraphQL that inherently limits you in server environments.

00:14:45,959 --> 00:14:50,860
As long as you have a schema and resolver map, most implementations are happily run

00:14:50,860 --> 00:14:51,870
in the browser.

00:14:51,870 --> 00:14:52,870
Why?

00:14:52,870 --> 00:14:57,100
I think there are a couple of good reasons for this.

00:14:57,100 --> 00:15:01,430
We live in a world of heavy browser feature fragmentation, and even when those features

00:15:01,430 --> 00:15:06,740
exist, like the rolled out in a progressive manner, with API fragmentation in those features.

00:15:06,740 --> 00:15:12,889
There's the complexities of dealing with progressive enhance the and degradation because it's fun.

00:15:12,889 --> 00:15:17,279
Admittedly, I did if for the fun, but there's something valuable in the idea of the interface

00:15:17,279 --> 00:15:19,209
across all our web languages.

00:15:19,209 --> 00:15:23,240
Let's look at some examples.

00:15:23,240 --> 00:15:28,829
We've looked at how we use resolvers to interact with data stores, but the browser has a bunch

00:15:28,829 --> 00:15:29,829
of its own data stores.

00:15:29,829 --> 00:15:35,980
We have the web storage APIs in local storage and session storage, web SQL databases, and

00:15:35,980 --> 00:15:36,980
cookies.

00:15:36,980 --> 00:15:42,480
With a bit of creativity, you can stuff any kind of data inside a URL.

00:15:42,480 --> 00:15:47,040
There's a handful of libraries that do this for us acting as an interface across a buffer

00:15:47,040 --> 00:15:55,350
of these storage engines with using a mix of feature detection or polyfills.

00:15:55,350 --> 00:15:57,600
And so abstracting over data source is something that GraphQL is already good at.

00:15:57,600 --> 00:16:00,240
It's a really great fit for the scenario.

00:16:00,240 --> 00:16:04,500
We are, we've taken the spreadsheet consolidate from earlier, but reading a file off disk

00:16:04,500 --> 00:16:09,779
we're using it as an abstraction over various browser storage APIs.

00:16:09,779 --> 00:16:14,529
Libraries will progressively enhance or degrade, depending on which APIs are available in the

00:16:14,529 --> 00:16:17,590
current environment.

00:16:17,590 --> 00:16:21,319
More importantly, the user APIs don't get to juggle all the different APIs themselves

00:16:21,319 --> 00:16:24,170
or learn a whole new third-party API.

00:16:24,170 --> 00:16:28,519
They're just looking at the schema for the types required and executing queries and mutations

00:16:28,519 --> 00:16:32,269
as they already know how to on server.

00:16:32,269 --> 00:16:38,069
Just like on the server, a browser has equally capable of making network requests to APIs.

00:16:38,069 --> 00:16:42,630
Just like on the server, we can call it working APIs within the resolvers.

00:16:42,630 --> 00:16:48,330
Just like - we can gratefully degrade depending on what is available in the operating environment.

00:16:48,330 --> 00:16:53,660
And that, my friends, is running GraphQL in the browser.

00:16:53,660 --> 00:16:56,089
I think that's pretty cool.

00:16:56,089 --> 00:16:57,269
So I thought I would end it here.

00:16:57,269 --> 00:17:01,689
Like, in many ways, browser JS isn't different from the server side JS.

00:17:01,689 --> 00:17:07,089
It's not surprising they're able to use GraphQL as an abstraction layer over finicky APIs.

00:17:07,089 --> 00:17:10,470
There's something unique to the browser.

00:17:10,470 --> 00:17:14,220
Does GraphQL still hold up in this new world?

00:17:14,220 --> 00:17:16,680
For example, our good old buddy, the DOM.

00:17:16,680 --> 00:17:19,300
DOM libraries are nothing new.

00:17:19,300 --> 00:17:22,640
Some started our JavaScript journeys with DOJO.

00:17:22,640 --> 00:17:35,090
Even new, like, in React - here is an example of what a schema might look like for document

00:17:35,090 --> 00:17:36,290
query selector.

00:17:36,290 --> 00:17:39,400
All the dollar-sign functions in jQuery.

00:17:39,400 --> 00:17:43,440
And this is what the resolvers might look like.

00:17:43,440 --> 00:17:47,820
We have a document query to get to our document object and the document type has APIs we care

00:17:47,820 --> 00:17:49,320
about and fields.

00:17:49,320 --> 00:17:54,910
The resolvers for those fields just call methods on the parent, the parent being document in

00:17:54,910 --> 00:17:55,910
this case.

00:17:55,910 --> 00:17:59,100
And I think things - things pretty much work as expected.

00:17:59,100 --> 00:18:01,300
By now, you should not be surprised by anything on the slide.

00:18:01,300 --> 00:18:04,290
It's like previous examples we've seen before.

00:18:04,290 --> 00:18:06,600
The question you might have is why?

00:18:06,600 --> 00:18:08,680
Why even do this?

00:18:08,680 --> 00:18:10,010
And I get it: I was up front.

00:18:10,010 --> 00:18:12,010
These aren't necessarily good ideas.

00:18:12,010 --> 00:18:16,830
They're just ideas, but honestly, slides like this I think is why.

00:18:16,830 --> 00:18:20,590
Every time I forget to await my fetch only to have JavaScript yell at me that I can't

00:18:20,590 --> 00:18:23,910
use top-level awaits is why.

00:18:23,910 --> 00:18:28,450
Every time I forget Node list aren't actually arrays is why.

00:18:28,450 --> 00:18:32,460
Every time I decide whether to have to decide to use a callback or a promise interface is

00:18:32,460 --> 00:18:33,650
why.

00:18:33,650 --> 00:18:39,350
All the reasons you might use jQuery today because it's easier is why.

00:18:39,350 --> 00:18:42,150
Something about these slides really speaks to me.

00:18:42,150 --> 00:18:47,690
But I have to concede, building and maintaining a schema like this for the entirety of the

00:18:47,690 --> 00:18:49,220
DOM is kind of absurd.

00:18:49,220 --> 00:18:52,590
I get shivers thinking about what it would take to maintain.

00:18:52,590 --> 00:18:57,000
So maybe some enterprising folks could generate schemas and resolvers by scraping things like

00:18:57,000 --> 00:19:05,970
MDN or W3C specs or get crazy with web IDL, or maybe if we don't have the schema.

00:19:05,970 --> 00:19:10,180
I know I spent you 20 minutes saying they're amazing and the skeleton of GraphQL.

00:19:10,180 --> 00:19:16,180
That's all true, but also I'm really lazy, like super lazy.

00:19:16,180 --> 00:19:18,120
Did you see that schema?

00:19:18,120 --> 00:19:21,130
It's massive, and it's not getting any smaller any time.

00:19:21,130 --> 00:19:25,110
So if we don't have schemas, we don't need resolvers, either.

00:19:25,110 --> 00:19:41,660
I know, the beating heart of GraphQL, life blood, blah, blah, blah ... if I squint my

00:19:41,660 --> 00:19:47,550
eyes and tilt my head and use imagination, this looks like the resolver we had in our

00:19:47,550 --> 00:19:50,370
DOM APIs.

00:19:50,370 --> 00:19:54,670
So what if we define our own default resolver?

00:19:54,670 --> 00:19:59,710
A single resolver that was general enough to handle any field for any DOM API, if it

00:19:59,710 --> 00:20:03,360
follows a general pattern of fields being properties or functions on their parents,

00:20:03,360 --> 00:20:04,960
then we don't really need the schema.

00:20:04,960 --> 00:20:08,430
Like the DOM is the schema, like MDM becomes our schema.

00:20:08,430 --> 00:20:15,000
I thought it was a nifty idea and gave it a shot.

00:20:15,000 --> 00:20:18,660
So I have some demos coming up.

00:20:18,660 --> 00:20:20,020
I think this stuff is cool.

00:20:20,020 --> 00:20:22,040
I've been told it's probably just me!

00:20:22,040 --> 00:20:27,940
If you think this stuff is kind of cool, how about giving it a clap so I know to continue.

00:20:27,940 --> 00:20:28,940
[Applause].

00:20:28,940 --> 00:20:30,210
All right.

00:20:30,210 --> 00:20:37,530
So, in the interests of tile, I have demos prepared earlier.

00:20:37,530 --> 00:20:42,580
As I mentioned, we could abstract over things like network requests.

00:20:42,580 --> 00:20:46,660
So here we are making our request to some random API that someone kindly allowed cause

00:20:46,660 --> 00:20:47,660
on for me.

00:20:47,660 --> 00:20:48,800
- calls on for me.

00:20:48,800 --> 00:20:54,150
You can see here, we are essentially querying for our window object, run the object calling

00:20:54,150 --> 00:20:55,150
fetch.

00:20:55,150 --> 00:20:58,880
In fetch, we're passing an array of arguments that line up to the argument forward of the

00:20:58,880 --> 00:21:00,440
fetch API.

00:21:00,440 --> 00:21:04,970
We are saying fetch this URL and then causing the JSON method on that response.

00:21:04,970 --> 00:21:09,700
Under the covers, you may await this, but you don't have to care about it.

00:21:09,700 --> 00:21:12,500
It's done for you.

00:21:12,500 --> 00:21:18,730
And here we can see the output, just for the saying that I'm not lying.

00:21:18,730 --> 00:21:23,750
And you can get the result here by calling the path on which we made the query, so our

00:21:23,750 --> 00:21:27,000
result is window reflect JSON.

00:21:27,000 --> 00:21:32,500
You may think we've already showed how resolvers can make requests.

00:21:32,500 --> 00:21:37,350
This is different, it's not resolvers making the network request, the query itself is the

00:21:37,350 --> 00:21:38,350
network request.

00:21:38,350 --> 00:21:40,900
We're resolving how to make requests.

00:21:40,900 --> 00:21:45,550
It's a bit unique, I think.

00:21:45,550 --> 00:21:47,440
So that is all well and good.

00:21:47,440 --> 00:21:48,440
What about the DOM?

00:21:48,440 --> 00:21:50,790
I promised the DOM.

00:21:50,790 --> 00:21:59,610
So here, we're emulating what I talked about earlier, we are taking - querying the document,

00:21:59,610 --> 00:22:03,990
querying the query selector role and giving it an parliament with the P tags.

00:22:03,990 --> 00:22:06,370
On the resulting P tags, we're pulling properties off.

00:22:06,370 --> 00:22:08,940
I think of this like a map.

00:22:08,940 --> 00:22:13,490
Like, what we've saved here, because you don't have to know what this returns.

00:22:13,490 --> 00:22:14,900
Is it an array, not an array?

00:22:14,900 --> 00:22:16,570
How do we cast an array?

00:22:16,570 --> 00:22:18,270
Is it going to yell at me?

00:22:18,270 --> 00:22:21,870
All those areas you probably run into like I have.

00:22:21,870 --> 00:22:22,870
And we can see the output here.

00:22:22,870 --> 00:22:24,540
We can see the properties coming out.

00:22:24,540 --> 00:22:30,910
That's not going to impress you.

00:22:30,910 --> 00:22:36,230
Let's try this one out!

00:22:36,230 --> 00:22:40,570
So here, we're doing the same thing, except we are using GraphQL aliases.

00:22:40,570 --> 00:22:46,700
We are essentially saying passing a document in, saying this is the root purely for the

00:22:46,700 --> 00:22:50,210
sake of indentation and readability but also for the sake that we can show we can operate

00:22:50,210 --> 00:22:51,770
on the resolve to something else.

00:22:51,770 --> 00:22:57,850
Passing in a document, doing three queries of the DOM and assigning those results to

00:22:57,850 --> 00:22:59,970
variables.

00:22:59,970 --> 00:23:08,549
We are saying our good boys are querying for all the Dojo emojis.

00:23:08,549 --> 00:23:10,720
There are some dogs and not dogs here.

00:23:10,720 --> 00:23:19,880
We're also querying for the non-Dojos, and for the yummy Dojo.

00:23:19,880 --> 00:23:25,820
These though you the results of the variables, but really bringing this home, we can actually

00:23:25,820 --> 00:23:32,830
pass this variable back into another query as the context, and here, we are doing the

00:23:32,830 --> 00:23:40,710
mutation, calling set attribute on our first good est boy, and we are giving it a style

00:23:40,710 --> 00:23:42,410
and increasing the font size.

00:23:42,410 --> 00:23:57,470
If we scroll up - oh, I changed the name - if we scroll up!

00:23:57,470 --> 00:24:09,340
Giant hot dog!

00:24:09,340 --> 00:24:13,290
[Applause].

00:24:13,290 --> 00:24:16,900
As you may have guessed, this is the hungry boy.

00:24:16,900 --> 00:24:26,000
We can query the DOM, we can mutate the DOM.

00:24:26,000 --> 00:24:31,050
What else can we do?

00:24:31,050 --> 00:24:34,960
We can also do animations on the DOM using web animation API.

00:24:34,960 --> 00:24:42,790
Here, we are getting our hungry boy once again, and we're using the web animation API by calling

00:24:42,790 --> 00:24:48,540
animate on the resulting thing and giving it the object of the web animation specs.

00:24:48,540 --> 00:24:50,890
We are spinning it and scaling it up and down.

00:24:50,890 --> 00:24:52,760
We can change these.

00:24:52,760 --> 00:24:54,310
This is all live.

00:24:54,310 --> 00:24:56,580
I'm not lying to you.

00:24:56,580 --> 00:25:03,870
This is, like, so here we have had to do is look at MDN, find the API, and it's the same

00:25:03,870 --> 00:25:04,870
query interface.

00:25:04,870 --> 00:25:07,240
We didn't care how it returned or how it worked.

00:25:07,240 --> 00:25:10,920
If we want to reuse the animation?

00:25:10,920 --> 00:25:13,170
How do we copy it around and use it?

00:25:13,170 --> 00:25:15,370
We can use the GraphQL fragments.

00:25:15,370 --> 00:25:18,970
We are querying two different nodes in our yummy node.

00:25:18,970 --> 00:25:23,620
We are giving a spin and a bounce animation.

00:25:23,620 --> 00:25:28,780
These are defined down here asking from fragments on the element type before we have one that

00:25:28,780 --> 00:25:32,580
bounces and one that spins, and then named as such.

00:25:32,580 --> 00:25:46,370
If we uncomment this - woah, ... . Animations as variables.

00:25:46,370 --> 00:25:50,060
That's the best I got.

00:25:50,060 --> 00:25:53,120
I'm sorry!

00:25:53,120 --> 00:25:54,650
[Applause].

00:25:54,650 --> 00:25:58,850
I know some of you are thinking: DOM, who uses the DOM?

00:25:58,850 --> 00:26:01,540
I'm more about the jQuery life.

00:26:01,540 --> 00:26:05,390
For you, we have this.

00:26:05,390 --> 00:26:10,340
We are passing our jQuery as the root context and can call jQuery as northerly.

00:26:10,340 --> 00:26:13,500
We're doing our request for the item and calling animate function.

00:26:13,500 --> 00:26:16,660
We're animating properties if the way that you would in jQuery.

00:26:16,660 --> 00:26:18,820
These can be used together.

00:26:18,820 --> 00:26:22,930
There's no limit to the hilarity that can ensue with enough animations.

00:26:22,930 --> 00:26:26,500
Let's give this one more spin before I wrap up.

00:26:26,500 --> 00:26:29,380
And there we go.

00:26:29,380 --> 00:26:35,690
GraphQL on the DOM in the browser.

00:26:35,690 --> 00:26:40,380
[Applause].

00:26:40,380 --> 00:26:50,030
In closing, I started by saying GraphQL superpower be and shaped everything else like a - this

00:26:50,030 --> 00:26:53,520
makes GraphQL infinitely versatile.

00:26:53,520 --> 00:26:59,180
With a little creativity, we can GraphQL all the things and move towards a universal query

00:26:59,180 --> 00:27:01,430
language before the web.

00:27:01,430 --> 00:27:04,910
Thank you.

00:27:04,910 --> 00:27:06,650

YouTube URL: https://www.youtube.com/watch?v=Xi3sxygtDc4


