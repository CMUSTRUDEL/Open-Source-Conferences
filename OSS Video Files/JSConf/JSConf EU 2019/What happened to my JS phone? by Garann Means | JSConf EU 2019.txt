Title: What happened to my JS phone? by Garann Means | JSConf EU 2019
Publication date: 2019-06-24
Playlist: JSConf EU 2019
Description: 
	Not long ago, it seemed like JavaScript devices were going to free JS developers from the constraints of the browser and let us control every aspect of our lives as easily as we once controlled hover menus. Though nodebots were captivating, many of us were anxious for the JS device revolution to reach a more mundane destination: our phones. And yet today the constraints of the mobile landscape look not much different from several years ago. We have the same two operating systems, the same two app stores, and same option to write a native app or push people to save what is still mostly a bookmark. How did we cover so little distance, given the enthusiasm, resources, and potential that appeared to exist, and more importantly, how close can we come to a JavaScript phone today?

https://2019.jsconf.eu/garann-means/what-happened-to-my-javascript-phone.html
Captions: 
	00:00:13,019 --> 00:00:14,509
>> All right, hi.

00:00:14,509 --> 00:00:20,410
My name's Garann, and I would like to talk today what happened to our JavaScript phones?

00:00:20,410 --> 00:00:26,869
I want to start off with a hypothesis which is that nobody in this room actually has a

00:00:26,869 --> 00:00:28,380
hacker phone.

00:00:28,380 --> 00:00:33,340
About five to six years ago, I feel like I could have asked you all this kind of conference

00:00:33,340 --> 00:00:39,969
if you had some kind of experimental advice running Firefox OS, Ubuntu on your person

00:00:39,969 --> 00:00:44,320
right now, and there would be a fair amount of hands in the air given the demographic

00:00:44,320 --> 00:00:45,340
of this conference.

00:00:45,340 --> 00:00:50,550
Today, I doubt there are any of those devices here in the room, unless you brought them

00:00:50,550 --> 00:00:52,320
here specifically to troll me?

00:00:52,320 --> 00:00:54,310
Am I right?

00:00:54,310 --> 00:00:55,360
I'm assuming that I am!

00:00:55,360 --> 00:01:01,350
So I think it's fair to say that hacker phones as a concept kind of disappeared.

00:01:01,350 --> 00:01:06,360
We just gave up, and we went back to our iPhones and our Androids.

00:01:06,360 --> 00:01:07,630
It wasn't for no reason.

00:01:07,630 --> 00:01:14,790
We got better cameras, faster modems, and greater stability.

00:01:14,790 --> 00:01:17,000
These phones seemed to get more and more expensive.

00:01:17,000 --> 00:01:24,859
I can't even fathom how I would have justified paying nearly a grand for my first Nokia,

00:01:24,859 --> 00:01:30,420
but they also become more impressive and able to replace our real computers.

00:01:30,420 --> 00:01:34,579
So you could say that they cost more, because they help us accomplish for.

00:01:34,579 --> 00:01:39,479
They go far beyond what we could have done with hacker phones.

00:01:39,479 --> 00:01:42,249
Except they don't work like real computers.

00:01:42,249 --> 00:01:48,119
We're locked into somebody else's vision of this sort of like Ikea office computer that

00:01:48,119 --> 00:01:53,060
looks pretty convincing, but it's actually quite limited.

00:01:53,060 --> 00:01:59,279
If you don't like the vision that you're offered, you have at maximum one alternative option.

00:01:59,279 --> 00:02:06,299
So maybe that's why I'm up here today wondering what happened to JavaScript phones which would

00:02:06,299 --> 00:02:12,260
blow up this field and put the future of these computers back into the hands of your average

00:02:12,260 --> 00:02:19,250
JavaScript developer, the way we grabbed the web back from IE5 and Flash.

00:02:19,250 --> 00:02:25,310
Interestingly, what happened involves a bit of all the things I just mentioned.

00:02:25,310 --> 00:02:30,630
The stunning cameras, the connection speeds, the stability of the firmware.

00:02:30,630 --> 00:02:36,220
And it might seem superficially like this is triumph of the free market where the products

00:02:36,220 --> 00:02:40,060
that won do so because they were simply better products.

00:02:40,060 --> 00:02:46,870
It's actually more of a triumph of old boys' network, monopolies, the obtuseness of infrastructure,

00:02:46,870 --> 00:02:51,750
and fashion having lots and lots of capital to throw at something so that nobody else

00:02:51,750 --> 00:02:54,740
can compete on your level.

00:02:54,740 --> 00:02:59,690
It's not a story of the natural even Lukes of products to become better, it's the story

00:02:59,690 --> 00:03:02,750
of capitalism rewarding capitalism.

00:03:02,750 --> 00:03:08,170
Let's go back five or six years when some of us thought it might play out differently.

00:03:08,170 --> 00:03:14,220
There are a few things relevant to examine from that time that should have culminated

00:03:14,220 --> 00:03:23,120
in a great JavaScript phone - the interest in Cordova and the tools, the exponential

00:03:23,120 --> 00:03:29,120
adoption of Node, and Node bots being like artisan coffee brewing, or bread-making or

00:03:29,120 --> 00:03:34,810
knitting, whatever you're into these days, of the day.

00:03:34,810 --> 00:03:40,510
People searching for ways of web skills on their phones, putting Node where they could

00:03:40,510 --> 00:03:44,530
think of and everybody seemed to have a soldiering iron.

00:03:44,530 --> 00:03:48,730
If that is not a recipe for a JavaScript phone, I don't know what is.

00:03:48,730 --> 00:03:55,290
Some of your babies, you will remember that time, so let's talk about the details.

00:03:55,290 --> 00:03:59,760
First, the state of mobile development was really unresolved.

00:03:59,760 --> 00:04:03,510
People were already developing native apps, and they were making quite decent money off

00:04:03,510 --> 00:04:06,610
them because there wasn't as much competition.

00:04:06,610 --> 00:04:11,510
So, naturally, developers who didn't work in the native languages of the platforms wanted

00:04:11,510 --> 00:04:16,070
a piece of that too or their employers or client did, and from there, we got things

00:04:16,070 --> 00:04:18,220
like phone gap.

00:04:18,220 --> 00:04:26,030
Phone gap was bought by Adobe and became Cordova, a tool to allow JavaScript developers to write

00:04:26,030 --> 00:04:31,259
a JavaScript application and compile it to native code.

00:04:31,259 --> 00:04:36,090
There was a lot of focus on making normal hosted web apps and websites mobile-friendly.

00:04:36,090 --> 00:04:43,389
There are tool kits such as emulators, and intensive theorising about responsive design

00:04:43,389 --> 00:04:47,650
that started appearing out of nowhere to meet the needs of smartphones.

00:04:47,650 --> 00:04:52,509
You could compare it to the current consensus we should be producing accessibility websites,

00:04:52,509 --> 00:04:56,360
but in this case, we actually went and did something about it.

00:04:56,360 --> 00:05:03,729
At this point, testing cross-browser had been a significant and limiting piece of work recently.

00:05:03,729 --> 00:05:08,499
Adding mobile browsers generated mobile apps to the list of things to check felt pretty

00:05:08,499 --> 00:05:15,909
natural, and everybody wanted to be on the everybody's phone and we all just did it.

00:05:15,909 --> 00:05:17,050
That's the front-end.

00:05:17,050 --> 00:05:22,120
On the back-end, you have Node, which at this point is still fairly new, or at least is

00:05:22,120 --> 00:05:24,360
still being treated that way.

00:05:24,360 --> 00:05:30,350
It's gone through a few years of people insisting it's merely a novelty, and people insisting

00:05:30,350 --> 00:05:36,449
it will never have the robustness of Engine X, or Ruby, or the corporate assured reliability

00:05:36,449 --> 00:05:39,540
of .NET.

00:05:39,540 --> 00:05:44,039
Express has existed a few minutes after Node was released so people have been using Node

00:05:44,039 --> 00:05:47,559
as a web server all this time.

00:05:47,559 --> 00:05:53,039
Even the Node community itself has been trying to distance Node from being a web server.

00:05:53,039 --> 00:06:00,889
I always read it as an unfortunate giving into pressure from hacker news-type people

00:06:00,889 --> 00:06:02,340
to be more serious.

00:06:02,340 --> 00:06:06,419
There is nothing more serious than hardware.

00:06:06,419 --> 00:06:13,889
At this time, you can assume that you will see people playing with circuit boards with

00:06:13,889 --> 00:06:24,930
lights on them, and somebody's nocopter will be sitting on the ground, gathering speculation

00:06:24,930 --> 00:06:28,560
about what actually needs to be fixed, and how sweet it's going to be when it actually

00:06:28,560 --> 00:06:31,120
runs.

00:06:31,120 --> 00:06:42,400
The hardware is just marketing being useful things to do with JavaScript, not necessarily

00:06:42,400 --> 00:06:44,529
ma'am-up and not individual interfaces.

00:06:44,529 --> 00:06:45,529
Why not?

00:06:45,529 --> 00:06:49,689
Scripting languages are lovely to work with if introducing the additional layer of abstraction

00:06:49,689 --> 00:06:52,389
doesn't slow things down massively.

00:06:52,389 --> 00:06:58,559
JavaScript has been getting faster, more powerful for years at this point, so that easier adoption

00:06:58,559 --> 00:07:03,069
makes it a very attractive interface to code against.

00:07:03,069 --> 00:07:06,599
There's one more big things that is happening at this point in time, which is that there

00:07:06,599 --> 00:07:11,949
is a JavaScript phone, and at a conference like this, a bunch of people would have had

00:07:11,949 --> 00:07:12,949
one.

00:07:12,949 --> 00:07:16,650
We talked a little bit about - we will talk about Firefox OS in a second.

00:07:16,650 --> 00:07:20,020
You may or may not have noticed there's an elephant in this room.

00:07:20,020 --> 00:07:25,070
Maybe it's more clear when it seemed like we could have a JavaScript phone, but what

00:07:25,070 --> 00:07:27,680
made us think if we should?

00:07:27,680 --> 00:07:31,379
If you're thinking that was a really good idea, why didn't that happen?

00:07:31,379 --> 00:07:33,719
Why do you think that?

00:07:33,719 --> 00:07:37,289
Personally, I wondered if today it's too late?

00:07:37,289 --> 00:07:42,710
I don't know if people still feel this way, or if the ship has sailed?

00:07:42,710 --> 00:07:46,169
Several years ago, though, it was too early to wonder that.

00:07:46,169 --> 00:07:51,419
Another advantage for Apple and Google sharing the smartphone monopoly is they have had the

00:07:51,419 --> 00:07:55,189
privilege of training us all to use their products.

00:07:55,189 --> 00:07:59,710
If you think back, though, people used to have tons of complaints about the phone interfaces.

00:07:59,710 --> 00:08:05,960
But if your echo chamber is like mine, that sort of grumbling has died down over the recent

00:08:05,960 --> 00:08:11,249
years, and if anything, you're left with a sniping back and forth about whether Android

00:08:11,249 --> 00:08:13,569
or iOS is better.

00:08:13,569 --> 00:08:15,610
Probably not even that, though.

00:08:15,610 --> 00:08:21,369
Because we have no or limited opportunity for personalisation, and for deviation from

00:08:21,369 --> 00:08:25,900
this sort of single-sanction set of use cases, there's nothing on our smartphones really

00:08:25,900 --> 00:08:28,300
to get invested in now.

00:08:28,300 --> 00:08:30,169
That didn't used to be true.

00:08:30,169 --> 00:08:35,760
There are probably even now things on your phone that kind of annoy you, but you found

00:08:35,760 --> 00:08:37,180
workarounds for them.

00:08:37,180 --> 00:08:42,349
Like maybe the mail client isn't full-featured enough, or the maps give bad directions, the

00:08:42,349 --> 00:08:46,710
system preferences seem intentionally hard to set and confusing.

00:08:46,710 --> 00:08:51,220
I think the big reason that people wanted a JavaScript phone is because several years

00:08:51,220 --> 00:08:57,020
ago, the most serious JavaScript developers still have experience writing interfaces.

00:08:57,020 --> 00:09:01,130
Even if we weren't designers per se, we felt we could do better.

00:09:01,130 --> 00:09:06,310
Because phones at that point were like this trash heap of badly functioning operating

00:09:06,310 --> 00:09:11,200
system and carrier-installed apps and the third-party apps that might have improved

00:09:11,200 --> 00:09:13,750
that situation were treated and super sketchy.

00:09:13,750 --> 00:09:18,340
I believe people wanted JavaScript phones because they wanted to make the software on

00:09:18,340 --> 00:09:22,770
their phones live up to the promise of the hardware.

00:09:22,770 --> 00:09:26,940
So you've been very patient waiting for me to say something about Firefox OS, and now

00:09:26,940 --> 00:09:29,830
I'm going to say something about Firefox OS.

00:09:29,830 --> 00:09:36,690
Mozilla had a project called Boot to Gecko that was meant to give us JavaScript phones.

00:09:36,690 --> 00:09:41,530
Mozilla was probably the only company that could have pulled this off, being a huge company

00:09:41,530 --> 00:09:46,940
that nonetheless maintained an open back-and-forth with the web community as a whole and isn't

00:09:46,940 --> 00:09:51,410
the growth diabetic focused business the same as Apple and Google were.

00:09:51,410 --> 00:10:02,190
The idea was to bring a smartphone to everybody by using the power of web technologies.

00:10:02,190 --> 00:10:03,770
That's clearly not happened.

00:10:03,770 --> 00:10:08,430
To understand why, we need to talk a bit about hardware and what goes on inside these little

00:10:08,430 --> 00:10:11,780
machines.

00:10:11,780 --> 00:10:15,970
Your phone is a tiny little computer, but it's also kind of not.

00:10:15,970 --> 00:10:19,570
It contains a lot of the same pieces as the computers that you work with, the processor,

00:10:19,570 --> 00:10:21,510
modem, sound, and graphics cards.

00:10:21,510 --> 00:10:23,240
They're in a different format.

00:10:23,240 --> 00:10:35,560
In the old days, personal computers were hobbyist devices, and you could build it yourself to

00:10:35,560 --> 00:10:37,650
has your own machine.

00:10:37,650 --> 00:10:42,400
Even big-brand desktop machines as recently as the dawn of wildly available cell phones

00:10:42,400 --> 00:10:48,620
were the things that you expected to customise, but that's never been the case with phones.

00:10:48,620 --> 00:10:53,940
Handheld devices have always been largely single units that weren't intended to be customised,

00:10:53,940 --> 00:10:55,810
let alone built from spare parts.

00:10:55,810 --> 00:11:01,680
Today, you can still get a GSM shield, and you can make something similar to a phone

00:11:01,680 --> 00:11:08,960
but a long way from from the definition of mobile phone.

00:11:08,960 --> 00:11:13,600
Similarly, you can sit at your computer and do pretty much everything your phone does,

00:11:13,600 --> 00:11:20,760
just using different networks, but we still don't recognise your computer as a phone.

00:11:20,760 --> 00:11:25,800
The size is a big part of what makes a phone a phone, but the size is only important because

00:11:25,800 --> 00:11:27,530
it offers portability.

00:11:27,530 --> 00:11:32,380
And portability is only useful if you can connect at that cell network.

00:11:32,380 --> 00:11:40,050
This the - the protocol is needed to negotiate a negotiation with a cellphone tower are only

00:11:40,050 --> 00:11:43,040
licensed to carriers.

00:11:43,040 --> 00:11:45,920
It's not quite as exclusive as it might sound.

00:11:45,920 --> 00:11:51,400
Even the carriers who have their own communications infrastructure will regularly rent space on

00:11:51,400 --> 00:11:55,470
other networks for the client's communications.

00:11:55,470 --> 00:11:59,360
But it's another hurdle for anyone who wants to start making phones.

00:11:59,360 --> 00:12:04,140
This hardware needs to be certified by the individual carriers that it's going to connect

00:12:04,140 --> 00:12:09,010
to, and then it also needs to be approved by the relevant governing bodies in whatever

00:12:09,010 --> 00:12:14,160
countries it will be used in, for example, the FCC in the United States.

00:12:14,160 --> 00:12:19,100
And none of the hardware in the phone exists in isolation, so, if you love writing integration

00:12:19,100 --> 00:12:23,930
tests and stress tests, you will probably spend a lifetime being entertained by getting

00:12:23,930 --> 00:12:25,570
the hardware certified.

00:12:25,570 --> 00:12:29,860
On the other hand, if you have some different agenda by actually releasing something, just

00:12:29,860 --> 00:12:36,370
passing tests and getting certifications could kind of end up being a lot.

00:12:36,370 --> 00:12:41,260
This is where, as JavaScript developers who, as likely as not have a front-end and web

00:12:41,260 --> 00:12:47,500
background when on unfamiliar territory may seem hostile, because the regulation the around

00:12:47,500 --> 00:12:49,970
telecommunications are strict.

00:12:49,970 --> 00:12:54,640
If connection drops because it's something to do with hardware that you're trying to

00:12:54,640 --> 00:12:58,480
distribute, you can't just like throw up an error page with a cheeky gif as ask people

00:12:58,480 --> 00:12:59,650
to reload.

00:12:59,650 --> 00:13:01,790
Like who would you ask?

00:13:01,790 --> 00:13:05,030
The modem, the operating system?

00:13:05,030 --> 00:13:09,720
The phone's tight integration means if your hardware fucks up, you have to notify every

00:13:09,720 --> 00:13:11,500
component involved.

00:13:11,500 --> 00:13:16,500
If your hardware is fucking up and makes your component look bad, there goes your certification

00:13:16,500 --> 00:13:19,700
from that manufacturer.

00:13:19,700 --> 00:13:25,920
Say you're building a cellphone and consider writing an application with a bunch of micro

00:13:25,920 --> 00:13:31,470
frameworks or using an all-in-one framework that makes every decision for you.

00:13:31,470 --> 00:13:35,730
You might be attracted to using micro frameworks because you can get the best tool for every

00:13:35,730 --> 00:13:41,640
job and nothing you don't need, but there is overhead associated with making sure that

00:13:41,640 --> 00:13:48,720
all of the micro frameworks co-operate together, eventually, if every micro framework you npm

00:13:48,720 --> 00:13:57,900
install require you to pay fees and be certified, you may say fuck it and use a monolith.

00:13:57,900 --> 00:14:05,330
Your phone is a chip with a big high-resolution screen on the other.

00:14:05,330 --> 00:14:08,160
Everything it does is the same bit of hardware.

00:14:08,160 --> 00:14:15,400
Even the antenna is designed to meander through the phone's guts and takes up all the available

00:14:15,400 --> 00:14:18,100
space left by the geography of the chip.

00:14:18,100 --> 00:14:22,360
There's no market where you can go and buy the most high-end pieces of the system on

00:14:22,360 --> 00:14:23,410
a chip of your phone.

00:14:23,410 --> 00:14:29,650
The iPhone's chip is designed by specifically Apple and produced exclusively for them.

00:14:29,650 --> 00:14:31,950
You can't get those parts.

00:14:31,950 --> 00:14:34,830
Fairphone couldn't get those parts and Mozilla can't get those parts.

00:14:34,830 --> 00:14:41,090
When a company produces a phone, it produces the whole.

00:14:41,090 --> 00:14:45,080
Anyone who wants to come along and make a JavaScript phone would have to have the same

00:14:45,080 --> 00:14:49,840
variety of skills and large piles of currency and Apple and Google have at their disposal

00:14:49,840 --> 00:14:53,960
to make something comparable to an iPhone or a Android.

00:14:53,960 --> 00:15:00,470
No everyone gives the a shit about having the fastest camera or modem.

00:15:00,470 --> 00:15:10,550
Some feature phones using KOS which is based on Firefox OS, and some like the Nokia we

00:15:10,550 --> 00:15:13,860
boots using old-school operating systems.

00:15:13,860 --> 00:15:20,420
If lots of people can come and build a feature phone, how come Mozilla couldn't build a $25

00:15:20,420 --> 00:15:24,070
smartphone with a slightly shittier camera?

00:15:24,070 --> 00:15:27,730
The answer, which you probably already knew is they could have.

00:15:27,730 --> 00:15:34,290
Mozilla could have bet the whole company on becoming a carrier producing hardware giving

00:15:34,290 --> 00:15:38,240
people lovely $25 JavaScript phones.

00:15:38,240 --> 00:15:42,660
According to people who worked on the project, they nearly did that anyway, rather than throw

00:15:42,660 --> 00:15:47,710
behind becoming a carrier, they looked for carriers who would become a partner.

00:15:47,710 --> 00:15:53,540
Becoming a carrier is time-consuming and expensive, so those partners wanted to ensure there would

00:15:53,540 --> 00:16:00,160
be lots of profits in it for them, load the phone down with their apps and get various

00:16:00,160 --> 00:16:03,279
marketing managers.

00:16:03,279 --> 00:16:09,510
If you're a web standards - if you want to give the world $25 phones, that's not what

00:16:09,510 --> 00:16:11,670
you're about.

00:16:11,670 --> 00:16:16,780
Are there companies that could have acted as the carrier needed by Mozilla?

00:16:16,780 --> 00:16:17,780
Yes.

00:16:17,780 --> 00:16:23,630
Do such people benefit from such a phone give the same carriers many thousands of dollars

00:16:23,630 --> 00:16:28,170
out of a sense of profession that requires them to earn the latest tech?

00:16:28,170 --> 00:16:29,350
Definitely.

00:16:29,350 --> 00:16:34,810
Is there incentive for those carriers to back a competitor who break up their monopolies?

00:16:34,810 --> 00:16:36,000
No.

00:16:36,000 --> 00:16:39,240
That's business, and that is what happened to your JavaScript phone.

00:16:39,240 --> 00:16:41,740
Sorry to be depressing.

00:16:41,740 --> 00:16:42,960
Now what?

00:16:42,960 --> 00:16:46,750
You're still sitting here desperately wishing you had a JavaScript phone, there are a few

00:16:46,750 --> 00:16:48,590
things you could do.

00:16:48,590 --> 00:16:52,560
Which you would choose depends on what a phone actually is to you.

00:16:52,560 --> 00:16:56,350
For example, most people probably define as a phone as something you make and receive

00:16:56,350 --> 00:16:58,270
calls on, right?

00:16:58,270 --> 00:17:02,340
Who uses up all their voice minutes every month?

00:17:02,340 --> 00:17:06,209
I don't think a lot in the people do.

00:17:06,209 --> 00:17:11,089
So you could build your own voice and SMS phone with hobby I have the hardware.

00:17:11,089 --> 00:17:15,050
You could wipe the firmware on your smartphone and put a more hackable operating system on

00:17:15,050 --> 00:17:16,050
it.

00:17:16,050 --> 00:17:20,060
You could work through approved channels and JavaScript apps that improve on the things

00:17:20,060 --> 00:17:24,980
you don't like, our you could rebel.

00:17:24,980 --> 00:17:28,600
To be honest, I avoid working with hardware because it's a little fiddly for me, but I've

00:17:28,600 --> 00:17:32,910
spoken to colleagues and peers about this, and it turns out there are a few little chips

00:17:32,910 --> 00:17:39,290
that you can use to do traditional phone stuff, and an interface you can control it JavaScript.

00:17:39,290 --> 00:17:44,750
I work with Nexmo that provides an API to do this kind of communications development,

00:17:44,750 --> 00:17:48,020
so I feel pretty confident it's possible.

00:17:48,020 --> 00:17:52,020
You could also just put together a piece of hardware that works like a My-Fi, and use

00:17:52,020 --> 00:17:58,300
an API like Nexmo's voice over IP, not worrying about carriers, cellphone towers, and all

00:17:58,300 --> 00:18:01,100
of that, and in theory weep going.

00:18:01,100 --> 00:18:08,390
You could add a nice screen, a graphics chip, an antenna, and you would end up with a large

00:18:08,390 --> 00:18:15,620
thing, not one that matched the power, quality, or size of commercial smartphones.

00:18:15,620 --> 00:18:16,750
You could tick all the boxes.

00:18:16,750 --> 00:18:21,840
Then you would only have to write the firmware for that, so that it functioned together seamlessly

00:18:21,840 --> 00:18:25,870
and automatically, and you didn't have to start an app and click a button to connect

00:18:25,870 --> 00:18:29,880
to the near est cellphone tower.

00:18:29,880 --> 00:18:36,770
Your grandchildren might be able to finish the work you started.

00:18:36,770 --> 00:18:40,680
So is that the real way forward?

00:18:40,680 --> 00:18:41,680
Maybe.

00:18:41,680 --> 00:18:46,770
There are projects like the Light Phone that make for an interesting argument that the

00:18:46,770 --> 00:18:52,920
ability to have appealing hardware once you scale back functionality is a good trade-off.

00:18:52,920 --> 00:18:56,960
Maybe a community-driven JavaScript phone starts somewhere simple like that, rather

00:18:56,960 --> 00:19:00,860
than trying to compete with smartphones out of the gate, and it builds on the hardware

00:19:00,860 --> 00:19:05,559
and firmware iteratively.

00:19:05,559 --> 00:19:12,470
Developers as a whole don't have a great patience for patience, and team work so don't hold

00:19:12,470 --> 00:19:14,680
your breath.

00:19:14,680 --> 00:19:18,690
You might not have a lot of friends running custom firmware on their custom hardware these

00:19:18,690 --> 00:19:21,820
days but the projects still exist.

00:19:21,820 --> 00:19:27,390
If you have different versions of Android, you can replace the operating system you like

00:19:27,390 --> 00:19:30,030
better.

00:19:30,030 --> 00:19:35,270
This is another option I can't speak to you from personal experience, like many people

00:19:35,270 --> 00:19:39,010
I experimented with Linux in college, and it's interesting that the hellscape of finding

00:19:39,010 --> 00:19:43,160
drivers for the perfectly nice hardware I already owned and were in my operating system

00:19:43,160 --> 00:19:48,670
then to use then is the same one I would find myself in if I installed a version of Linux

00:19:48,670 --> 00:19:54,200
on my nice modern Android and gave up on using the camera or maps ever again.

00:19:54,200 --> 00:19:59,210
The risk in flashing your phone is that the very nice hardware that lets the manufacturer

00:19:59,210 --> 00:20:04,270
maybe taken their monopoly is operated by a nice proprietary driver, and any operating

00:20:04,270 --> 00:20:09,200
system under the sun could use those drivers and would end up a pretty shit monopoly.

00:20:09,200 --> 00:20:14,600
Things in your phone that have access to the system typically get signed by code that lives

00:20:14,600 --> 00:20:19,230
in a special secure area of the phone, which has its own processor and memory sealed off

00:20:19,230 --> 00:20:20,990
from the rest of the phone.

00:20:20,990 --> 00:20:25,670
If you wipe your phone, you lose access to that area, which you could see at a helpful

00:20:25,670 --> 00:20:32,960
way of stopping ne'er do wells from taking over your - or a cynical way of protecting

00:20:32,960 --> 00:20:34,590
intellectual property.

00:20:34,590 --> 00:20:37,240
Probably, it's both.

00:20:37,240 --> 00:20:41,200
Whether good, bad, or neutral, though, the security is going to fuck up your phone if

00:20:41,200 --> 00:20:45,560
you flash it, and a lot of people learned that the hard way a few years ago, and that's

00:20:45,560 --> 00:20:49,040
probably why people don't do it as much any more.

00:20:49,040 --> 00:20:53,660
There are probably plenty of people in this room who I've barely addressed you at all,

00:20:53,660 --> 00:20:57,710
that means those who write apps intended to be on smartphones.

00:20:57,710 --> 00:21:00,080
To be clear, there's obviously nothing wrong with that.

00:21:00,080 --> 00:21:04,170
Does it accomplish the goal of providing nicer alternatives to the apps that the phone comes

00:21:04,170 --> 00:21:05,170
with?

00:21:05,170 --> 00:21:06,460
It absolutely does.

00:21:06,460 --> 00:21:12,830
You can make - you can't make those apps automatic, and, in some cases get people to move your

00:21:12,830 --> 00:21:18,830
client but move the default to a back screen somewhere so they don't click on it.

00:21:18,830 --> 00:21:23,520
If you can create compelling software, it works.

00:21:23,520 --> 00:21:28,630
If you want JavaScript functionality on your phone, the least risky most effective route

00:21:28,630 --> 00:21:32,720
by far is to write apps.

00:21:32,720 --> 00:21:38,160
It doesn't look like the revolution we were promised, though, does it?

00:21:38,160 --> 00:21:46,500
I have to ask you to indulge my nostalgia as we go back 15 to 20 years.

00:21:46,500 --> 00:21:50,380
This around the time of the web standards movement which you may remember a lot of arguing

00:21:50,380 --> 00:21:53,580
about CSS versus tables, or something to do with XHTML.

00:21:53,580 --> 00:21:59,541
If you were doing much web development around that time, there was a period when developers

00:21:59,541 --> 00:22:05,390
like us argued over and over for taking the more difficult, more expensive, and less reliable

00:22:05,390 --> 00:22:11,440
path of throwing out perfectly good existing product to sign on to still very theoretical

00:22:11,440 --> 00:22:17,430
standards and turn our backs on the powerful, established proprietary languages like Action

00:22:17,430 --> 00:22:20,090
Script that worked great.

00:22:20,090 --> 00:22:25,150
Every day folks using the web weren't clamouring for us to break their fucking web pages.

00:22:25,150 --> 00:22:27,350
That push came from developers like us.

00:22:27,350 --> 00:22:34,200
I kind of think much of the evidence suggests that it will never happen, that a similar

00:22:34,200 --> 00:22:36,340
rebellion is coming for mobile phones.

00:22:36,340 --> 00:22:42,000
I don't know exactly what that would look like, and if it has anything to do with JavaScript,

00:22:42,000 --> 00:22:46,220
but I it has something to do with the fatigue expressed by people intentionally trading

00:22:46,220 --> 00:22:48,050
in their smartphones for feature phones.

00:22:48,050 --> 00:22:52,870
If the world is deciding this they don't literally need a thousand other smart phones in their

00:22:52,870 --> 00:22:58,190
pocket, just to take pictures and send the occasional text, maybe it's really open alternative

00:22:58,190 --> 00:23:00,290
has a chance to compete.

00:23:00,290 --> 00:23:04,990
If people switch to feature phones and don't use as much data and do their texting via

00:23:04,990 --> 00:23:11,250
T9, maybe they don't want to pay for below-the-pack age contracts with the carriers, and so the

00:23:11,250 --> 00:23:18,429
carriers' power comes to a threat, and hardware companies fragment and they seek to serve

00:23:18,429 --> 00:23:22,650
a wider variety of interest.

00:23:22,650 --> 00:23:25,610
It's a lot of maybes.

00:23:25,610 --> 00:23:29,580
Even the tools that are closed and locked in now began with people working together

00:23:29,580 --> 00:23:33,860
on protocols, electronics, and computer science in public.

00:23:33,860 --> 00:23:37,870
If you lock people into a mono culture where the most exciting innovation you can offer

00:23:37,870 --> 00:23:43,170
them is removing their head phone jacks, they will start moving in other directions to find

00:23:43,170 --> 00:23:44,350
a way out of it.

00:23:44,350 --> 00:23:48,050
I think a JavaScript phone might still be out there.

00:23:48,050 --> 00:23:49,700
Thanks!

00:23:49,700 --> 00:23:54,650

YouTube URL: https://www.youtube.com/watch?v=14wIbWGyaKg


