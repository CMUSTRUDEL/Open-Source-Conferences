Title: Performance Empathy by Houssein Djirdeh | JSConf EU 2019
Publication date: 2019-06-20
Playlist: JSConf EU 2019
Description: 
	Performance advocates spend a lot of time telling developers how to build fast and reliable experiences on the web. Every website is built differently, however.

Instead of just listing a number of progressive enhancements and techniques, this talk will try to take a different approach. We’ll first explore who needs to consider improving their site in the first place and see if their is a messaging problem between advocates and developers in the community. We’ll then address concerns that can arise when performance is being worked on and discuss some real and practical solutions.

https://2019.jsconf.eu/houssein-djirdeh/performance-empathy.html
Captions: 
	00:00:10,120 --> 00:00:15,980
Yeah, as Aga mentioned, my name is Houssein, and I will be talking today about performance

00:00:15,980 --> 00:00:17,380
empathy.

00:00:17,380 --> 00:00:25,210
Empathy's a term we commonly use to describe the ability to understand and share the feelings

00:00:25,210 --> 00:00:27,640
of another individual or a group.

00:00:27,640 --> 00:00:33,390
I like to think of the term "performance empathy" to be the same thing, but for the performance

00:00:33,390 --> 00:00:38,550
concerns and issues of a particular site.

00:00:38,550 --> 00:00:46,720
To explain why I thought it would be a good topic for a talk, I need first to describe

00:00:46,720 --> 00:00:49,019
a bit more about myself.

00:00:49,019 --> 00:00:52,739
I work as an advocate for the web team at Google.

00:00:52,739 --> 00:00:58,289
Now, developer-advocates in many different companies usually act as a bridge between

00:00:58,289 --> 00:01:03,870
a specific engineering community and a specific engineering team and a developer community.

00:01:03,870 --> 00:01:09,890
Being an advocate for the web team means that it's my job to make sure the web gets better

00:01:09,890 --> 00:01:11,520
and better.

00:01:11,520 --> 00:01:19,740
I focus on speed and performance.

00:01:19,740 --> 00:01:25,640
So a lot of advocates, we sometimes give advice that can seem a little overwhelming.

00:01:25,640 --> 00:01:32,320
I don't know why my clicker feels weird!

00:01:32,320 --> 00:01:43,010
There you go.

00:01:43,010 --> 00:01:50,140
[Scattered laughter].

00:01:50,140 --> 00:01:55,080
But in all seriousness why are so many performance advocates fascinated about what they do with

00:01:55,080 --> 00:01:56,860
their own tool chains?

00:01:56,860 --> 00:02:00,930
Why are we so focused whether it will improve performance or not?

00:02:00,930 --> 00:02:03,780
Why do we care performance that much to begin with?

00:02:03,780 --> 00:02:07,440
Is it really that much of a problem?

00:02:07,440 --> 00:02:12,220
To help us answer this question, let's look at this example of a site.

00:02:12,220 --> 00:02:16,690
It's an entirely client-side rendered site that ships a megabyte of JavaScript.

00:02:16,690 --> 00:02:24,939
This means that the initial request only contains a shell of an HTML document.

00:02:24,939 --> 00:02:30,140
Only after the JavaScript bundle finishes executing, the user gets to see any real content.

00:02:30,140 --> 00:02:35,370
Now, in case you weren't counting, the amount of time it took for this app to finish loading

00:02:35,370 --> 00:02:37,799
was about 19 seconds.

00:02:37,799 --> 00:02:43,030
19 seconds isn't fast by any means.

00:02:43,030 --> 00:02:48,080
So we know that one megabyte of JavaScript can seem like a lot to ship town to browsers.

00:02:48,080 --> 00:02:50,749
How much are we generally shipping?

00:02:50,749 --> 00:02:55,280
If we take a look at the HTTP archive, we can see the median amount of JavaScript we

00:02:55,280 --> 00:03:02,280
are sending down the wire is about 350 kilobytes, and this for mobile web pages.

00:03:02,280 --> 00:03:06,870
The reason this is such a big deal is because a lot of websites currently living in the

00:03:06,870 --> 00:03:11,269
web that are either entirely static or they have little to no interactivity at all.

00:03:11,269 --> 00:03:15,870
I thought it would be interesting to dive in a little deeper and see how much how much

00:03:15,870 --> 00:03:21,670
site they use of a particular framework are shipping in terms of JavaScript.

00:03:21,670 --> 00:03:27,099
And I did it with three frameworks to begin with: Angular, React, and Vue.

00:03:27,099 --> 00:03:31,680
The reason I chose these three is because they are the most popular client-side frameworks

00:03:31,680 --> 00:03:34,959
today to build our UI.

00:03:34,959 --> 00:03:43,219
I found out after querying 250,000 origins, about 50 per cent of them ship over a megabyte

00:03:43,219 --> 00:03:44,219
of JavaScript.

00:03:44,219 --> 00:03:48,299
Now, each of these origins either use one or more of these frameworks.

00:03:48,299 --> 00:03:53,969
There's a lot of reasons why this might be the case, but it does show that we are shipping

00:03:53,969 --> 00:03:56,950
a lot of JavaScript if we are not entirely careful.

00:03:56,950 --> 00:04:03,200
Now, what I want to do now is take a step back and talk about how I began the presentation.

00:04:03,200 --> 00:04:08,549
You see, every single talk I've ever given before today has always followed the exact

00:04:08,549 --> 00:04:14,569
same format: I begin with a word of caution, and talk about how performance is a pretty

00:04:14,569 --> 00:04:15,590
big problem.

00:04:15,590 --> 00:04:22,180
I then move on to showing some stats and some numbers to back up my claim, and I do this

00:04:22,180 --> 00:04:26,610
to convey how much of a problem this actually is.

00:04:26,610 --> 00:04:31,050
And then the rest of my talk usually follows the same sort of pattern where I talk about

00:04:31,050 --> 00:04:35,960
different tips, different techniques, that you should be applying to make sure your site

00:04:35,960 --> 00:04:39,979
stays as small as possible and as fast as possible.

00:04:39,979 --> 00:04:42,849
For this talk, I'm going to go in a slightly different direction.

00:04:42,849 --> 00:04:48,410
I want to talk about what we can do as advocates, and what we can do better to reach the community

00:04:48,410 --> 00:04:52,820
better, as well as how we can all work together to try and think of different ways to to make

00:04:52,820 --> 00:04:59,030
sure performance is a win for everybody.

00:04:59,030 --> 00:05:03,800
Going back to that example of a site we just talked about, here I mentioned that, at the

00:05:03,800 --> 00:05:11,669
end, I mentioned that we are running this on a mobile device and a slow 3G connection.

00:05:11,669 --> 00:05:16,639
A lot of people when they trace performance, they talk about specific user conditions that

00:05:16,639 --> 00:05:19,870
might not be the same as yours when you build your application.

00:05:19,870 --> 00:05:25,720
And we do this because the fending on the user's device or network type, they can experience

00:05:25,720 --> 00:05:28,610
your site a lot slower than you think.

00:05:28,610 --> 00:05:29,789
And there's more.

00:05:29,789 --> 00:05:33,820
We sometimes talk about how your users might experience your site if they're completely

00:05:33,820 --> 00:05:40,780
offline, or if they have a flaky network connection, or maybe they have a weaker device, on mobile,

00:05:40,780 --> 00:05:42,550
so forth, and so on.

00:05:42,550 --> 00:05:48,639
Although it is important to talk about all these scenarios and try to capture different

00:05:48,639 --> 00:05:53,889
conditions your user might be in, the thing I want to make sure I mention is that you

00:05:53,889 --> 00:05:56,550
know your users better than anyone else.

00:05:56,550 --> 00:06:00,879
You definitely know your users better than any advocate that stands on stage telling

00:06:00,879 --> 00:06:06,270
you how well your site performs under a certain condition.

00:06:06,270 --> 00:06:12,690
That being said, one thing I want also to mention is the fact that nobody prioritises

00:06:12,690 --> 00:06:14,490
performance over anything.

00:06:14,490 --> 00:06:18,250
If you think about it, when you're trying to build a site, the very first thing you're

00:06:18,250 --> 00:06:21,389
thinking about usually isn't performance.

00:06:21,389 --> 00:06:23,349
Most people are like this.

00:06:23,349 --> 00:06:27,550
But if you also think about it, why should someone make it the very top thing they think

00:06:27,550 --> 00:06:29,720
about?

00:06:29,720 --> 00:06:33,670
Let's talk about something to try and complain what I mean here.

00:06:33,670 --> 00:06:36,790
Say you wake up one Monday morning and you have an amazing idea.

00:06:36,790 --> 00:06:39,960
You've thought about a product you want to sell on the website or maybe you want to provide

00:06:39,960 --> 00:06:41,780
a specific type of service.

00:06:41,780 --> 00:06:46,629
So you're excited, and the next thing you naturally do is try to find out how to build

00:06:46,629 --> 00:06:47,629
it.

00:06:47,629 --> 00:06:51,520
You spend a little time researching the tools, the tips, the tricks that you need, maybe

00:06:51,520 --> 00:06:56,020
you're building wire frames, maybe building graphics, so forth and so on, but only after

00:06:56,020 --> 00:06:59,550
that, you actually start building.

00:06:59,550 --> 00:07:06,080
And at this point, throughout the initial process, nobody really thinks about performance.

00:07:06,080 --> 00:07:10,580
The thing that you actually most likely are thinking about is the fact that you want to

00:07:10,580 --> 00:07:15,930
build a site that loads and does exactly what you expect it to do, but build it with as

00:07:15,930 --> 00:07:20,740
minimal effort and as fast as possible.

00:07:20,740 --> 00:07:26,919
A second possible scenario could be the fact that you join a brand new team as a developer.

00:07:26,919 --> 00:07:33,130
Say the newest developer on a brand new team, and, when you get assigned your first ticket,

00:07:33,130 --> 00:07:36,300
you're most likely going to try and familiarise yourself with the code base.

00:07:36,300 --> 00:07:41,069
You will spend a little time trying to know where your components live, where the utilities

00:07:41,069 --> 00:07:45,229
live, how the unit tests work, and so on.

00:07:45,229 --> 00:07:48,770
Only after that, while you're doing that, you start building and working on your first

00:07:48,770 --> 00:07:49,770
feature.

00:07:49,770 --> 00:07:53,270
Maybe it's a small feature you're adding on a page, maybe it's a small bug that you're

00:07:53,270 --> 00:07:54,270
working on.

00:07:54,270 --> 00:07:57,930
But again, also, when you're in these shoes, you're not thinking about performance.

00:07:57,930 --> 00:08:03,490
You're not think about what I'm building doesn't degrade the performance of my site.

00:08:03,490 --> 00:08:08,159
No, it's the first thing you're doing, most likely trying to check every single box assigned

00:08:08,159 --> 00:08:09,180
to you.

00:08:09,180 --> 00:08:16,330
It's highly unlikely performance is on that list.

00:08:16,330 --> 00:08:24,259
The way I like to think about awareness and performance in general, and how people are

00:08:24,259 --> 00:08:29,030
aware of the performance and location of the site, I try to think of it as some sort of

00:08:29,030 --> 00:08:30,950
scale.

00:08:30,950 --> 00:08:34,890
For example, let's say you're building something for the first time, or you're building something

00:08:34,890 --> 00:08:38,390
for the umpteenth time which you're learning a brand new tool.

00:08:38,390 --> 00:08:41,620
What you're going to be doing at this point is seeing how this tool works.

00:08:41,620 --> 00:08:43,110
Does it do what you expect it to do?

00:08:43,110 --> 00:08:47,310
You're going to learn the API, is it easy to plug into your site?

00:08:47,310 --> 00:08:52,230
At this point, it's unlikely you're unlikely thinking how badly it's going to affect your

00:08:52,230 --> 00:08:53,230
performance.

00:08:53,230 --> 00:08:56,890
You're thinking how easy is it for me to use?

00:08:56,890 --> 00:09:03,110
Let me spend some more time with that, and after a while, you end up launching your first

00:09:03,110 --> 00:09:04,110
website.

00:09:04,110 --> 00:09:08,400
You have an idea of how it works in development mode and how it works in production mode.

00:09:08,400 --> 00:09:13,160
You have a better feeling whether it is really affecting performance or not, but you still

00:09:13,160 --> 00:09:17,550
might be slightly unsure of what you need to do about it.

00:09:17,550 --> 00:09:20,670
But the more and more you use this tool, and the more websites that you build, the more

00:09:20,670 --> 00:09:26,630
familiar you are with how it affects the speed and reliability of your site.

00:09:26,630 --> 00:09:31,820
That being said, nobody is more aware with the fact that they need to work on performance

00:09:31,820 --> 00:09:34,649
than those that actually know they have issues.

00:09:34,649 --> 00:09:40,490
If a significant per cent of your user base tells you we can't access your site because

00:09:40,490 --> 00:09:46,209
it's too slow, you're most likely going to try and prioritise it as soon as possible.

00:09:46,209 --> 00:09:49,240
This is what I mean by performance being an afterthought.

00:09:49,240 --> 00:09:54,570
Maybe there are ways out there of it being not of something we only think of when it

00:09:54,570 --> 00:09:57,310
is too late.

00:09:57,310 --> 00:10:01,279
Throughout this talk, I sort of this this dichotomy between two different users groups,

00:10:01,279 --> 00:10:06,730
one being performance advocates like myself, and one being a normal developer working on

00:10:06,730 --> 00:10:08,460
a regular codebase.

00:10:08,460 --> 00:10:15,060
Now, advocates, I think we all agree on the fact that there are way too many slow sites,

00:10:15,060 --> 00:10:19,840
and the reason why I think this is true is because we have our job because a lot of the

00:10:19,840 --> 00:10:22,940
sites out there aren't as fast as they should be.

00:10:22,940 --> 00:10:27,191
If every user accesses the website and felt like it was faster than it needed to be, we

00:10:27,191 --> 00:10:29,589
wouldn't need to be doing what we do every day.

00:10:29,589 --> 00:10:35,420
But there's another misconception, or another thought that sometimes gets misconstrued that

00:10:35,420 --> 00:10:40,800
seems kind of weird, and it's the idea that developers are sloppy when they ship slow

00:10:40,800 --> 00:10:41,800
experience.

00:10:41,800 --> 00:10:46,160
I've seen the sentiment time to time, and I can't understand it, because a developer

00:10:46,160 --> 00:10:51,550
working on a website, and it happens too bad too slow, it is usually one of three reasons.

00:10:51,550 --> 00:10:57,070
One, they don't know it is too slow for their users, two, they know it's too slow but they

00:10:57,070 --> 00:11:01,530
don't know how to fix it, or they haven't prioritised that yet, and, three, they know

00:11:01,530 --> 00:11:04,440
it's too slow and they're actively working to effectively.

00:11:04,440 --> 00:11:06,870
Indeed again is always relative.

00:11:06,870 --> 00:11:11,300
Having an advocate tell you that you're not focusing on something very important to them

00:11:11,300 --> 00:11:13,190
isn't always the best approach.

00:11:13,190 --> 00:11:19,090
Now, on the other side of the coin, when we talk about a developer, when you're building

00:11:19,090 --> 00:11:22,550
a website, you're most likely going to agree that you have a million things you can work

00:11:22,550 --> 00:11:23,550
on.

00:11:23,550 --> 00:11:26,360
Performance is just one of them.

00:11:26,360 --> 00:11:29,990
But it's also another weird thought that I see sometimes floating around and it's the

00:11:29,990 --> 00:11:34,300
idea that advocates, or performance advocates, specifically, are out of touch.

00:11:34,300 --> 00:11:38,050
The reason why some people might think this is because of the fact that many performance

00:11:38,050 --> 00:11:42,970
advocates will build small sample apps and show you how to optimise and some people will

00:11:42,970 --> 00:11:48,350
feel it's not easy to do it with a massive codebase and a massive team where code is

00:11:48,350 --> 00:11:50,339
being checked in everywhere.

00:11:50,339 --> 00:11:55,300
The reason why I want to squash this thought is because advocates have been in your shoes.

00:11:55,300 --> 00:11:56,300
We are developers.

00:11:56,300 --> 00:12:00,480
We worked with teams who understand that there are more concerns to a site than there is

00:12:00,480 --> 00:12:02,810
just performance.

00:12:02,810 --> 00:12:10,120
Instead of having the back-and-forth between small weird opinions and small, small thoughts,

00:12:10,120 --> 00:12:15,190
I think it's safe to say we all agree towards one common goal: we all want the web to be

00:12:15,190 --> 00:12:17,700
faster for everybody.

00:12:17,700 --> 00:12:25,459
So the big question is: how can we make sure we can fix the performance problem better?

00:12:25,459 --> 00:12:29,490
What I'm going to do is talk about a few ways we can explore that, because there are changing

00:12:29,490 --> 00:12:33,820
sort of how we think about making things better for our developers.

00:12:33,820 --> 00:12:38,139
The very first is making sure everybody has better defaults.

00:12:38,139 --> 00:12:40,839
What I mean by default is the idea is that let's say you're building something with a

00:12:40,839 --> 00:12:41,910
certain tool.

00:12:41,910 --> 00:12:48,200
If it always gives you a better starting point, you will most likely always have more wiggle

00:12:48,200 --> 00:12:52,910
room, and more room to play with where it will take you longer to reach a threshold

00:12:52,910 --> 00:12:55,550
or performance and end up being slow.

00:12:55,550 --> 00:13:01,690
And in terms of framework level, a lot of frameworks are looking into this already.

00:13:01,690 --> 00:13:05,649
React has already been looking to try to improve React DOM and make the sites smaller.

00:13:05,649 --> 00:13:12,550
Doing this a few different ways, one of them being simplifying its event system.

00:13:12,550 --> 00:13:19,490
With Vue and Vue3, they are looking to reduce memory function and making things more tree-shakeable

00:13:19,490 --> 00:13:22,790
where they can.

00:13:22,790 --> 00:13:28,060
The Angular team is looking into building brand new rendering engine called Ivy, and

00:13:28,060 --> 00:13:32,730
with it exploring ways to cut down the initial bundle size and also looking at ways of maybe

00:13:32,730 --> 00:13:37,310
progressively heightening experiences when you have server render architectures.

00:13:37,310 --> 00:13:46,400
React and Suspense is also doing the same thing.

00:13:46,400 --> 00:13:53,149
And then there are metaframeworks, things like Next.js that allow you to do what you

00:13:53,149 --> 00:13:56,510
want to do most of the time, write and build your component.

00:13:56,510 --> 00:14:00,490
There are things that we tell people to do quite often.

00:14:00,490 --> 00:14:06,250
You should be code - these frameworks take it out of the hands of the develop.

00:14:06,250 --> 00:14:07,250
Developer.

00:14:07,250 --> 00:14:11,329
We are already working with XJS to see if we can do things even better and even have

00:14:11,329 --> 00:14:20,149
smaller bundle sizes and make sure users get the best experience wherever they can.

00:14:20,149 --> 00:14:24,410
When we talk about defaults, the only way to think about it too is the default APIs

00:14:24,410 --> 00:14:27,140
or the out-the-box APIs that the browser provides.

00:14:27,140 --> 00:14:31,959
It will be a lot easier if we didn't have to leverage third-party libraries or write

00:14:31,959 --> 00:14:38,380
scripts ourselves when we try to optimise things that the browser can probably do already.

00:14:38,380 --> 00:14:41,389
An example of this is the lazy-loading attribute.

00:14:41,389 --> 00:14:45,630
Now, if anybody here is actually building something with a lot of images, you most likely

00:14:45,630 --> 00:14:51,779
realise that having a lot of images load at once can affect performance, so people have

00:14:51,779 --> 00:14:56,880
become quite used to either pulling in a third-party library or writing their own custom script

00:14:56,880 --> 00:15:02,430
that takes advantage of the intersection observer API or scroll-event listers to only add listers

00:15:02,430 --> 00:15:05,410
to those close enough to them.

00:15:05,410 --> 00:15:09,480
The loading attribute is something that will be rolled out to Chrome pretty soon, and by

00:15:09,480 --> 00:15:15,769
using it with any image or iFrame tag, it will automatically lazy-load images after

00:15:15,769 --> 00:15:20,000
it reaches a certain distance threshold from the bottom of the viewport.

00:15:20,000 --> 00:15:22,330
Think about the wins this can make to any developer.

00:15:22,330 --> 00:15:26,230
Think about the main developers that don't know how to build their own lazy-loading scripts

00:15:26,230 --> 00:15:30,920
or even know if there is such a thing, but once they realise there is a simple app they

00:15:30,920 --> 00:15:35,970
can add, it will make it a lot simpler for everybody.

00:15:35,970 --> 00:15:40,339
Another example of an API that makes things easier is the virtual scrolling API that is

00:15:40,339 --> 00:15:42,850
also being worked on right now.

00:15:42,850 --> 00:15:49,160
If you've ever built anything, a site with a long table, or very large list, you also

00:15:49,160 --> 00:15:55,610
realise that having all those DOM nodes populate at once can affect rendering performance.

00:15:55,610 --> 00:16:01,019
And the idea behind this virtualisation or virtual scrolling is to make sure that only

00:16:01,019 --> 00:16:06,670
the nodes or only the items on the list that the user can see is populated through DOM,

00:16:06,670 --> 00:16:13,209
and as the user scrolls down, those DOM nodes get recycled with newer DOM nodes.

00:16:13,209 --> 00:16:17,459
A lot of frameworks like React, like Angular, have third-party libraries that allow you

00:16:17,459 --> 00:16:19,430
a virtualised list.

00:16:19,430 --> 00:16:24,839
Having a bake-in API means you can do this without relying on any of them at all at all.

00:16:24,839 --> 00:16:34,251
For example, accessibility concerns, or the find on page feature, or how could SDO crawl

00:16:34,251 --> 00:16:38,680
your page, or a crawler crawl your page, and detect things that are not rendered to the

00:16:38,680 --> 00:16:44,579
DOM just yet?

00:16:44,579 --> 00:16:49,699
Another very important thing we also realise is in general, we need better guardrails for

00:16:49,699 --> 00:16:50,699
all developers.

00:16:50,699 --> 00:16:55,180
We've noticed a pattern where we tell people to optimise, and a lot of teams will go ahead

00:16:55,180 --> 00:16:56,529
and they will start doing so.

00:16:56,529 --> 00:17:03,370
After a certain period of time, feature creep is in, new code is being shipped, or they

00:17:03,370 --> 00:17:08,630
regress to the initial state or the state worse than prior.

00:17:08,630 --> 00:17:12,260
The idea behind guardrails is what if you had something that made sure everybody stayed

00:17:12,260 --> 00:17:17,370
accountable and made sure everybody stayed on a narrow path?

00:17:17,370 --> 00:17:20,480
One such example of a guardrail is a performance budget.

00:17:20,480 --> 00:17:26,490
A performance budget is a budget for certain performance metrics that you make sure your

00:17:26,490 --> 00:17:27,799
app never exceeds.

00:17:27,799 --> 00:17:33,080
There are many tools out there that can allow you to add performance budgets.

00:17:33,080 --> 00:17:39,060
One such example of those recently launched was something called Lighthouse, a team built

00:17:39,060 --> 00:17:45,310
by the Chrome team that allows you to audit how well your pages are doing.

00:17:45,310 --> 00:17:49,620
It allows to check for accessibility, performance, and so on.

00:17:49,620 --> 00:17:55,202
A lot of developers use Lighthouse every day in their work flow, and the idea is what if

00:17:55,202 --> 00:18:01,280
you can specify a single JSON file to add performance budgets into it?

00:18:01,280 --> 00:18:05,799
You can specify different resource types, define the budget that you never exceed, as

00:18:05,799 --> 00:18:11,390
well as the defined third-party request and make sure the number of requests never exceeds

00:18:11,390 --> 00:18:18,539
a certain value.

00:18:18,539 --> 00:18:21,830
The third most important point, and I think this is something that actually resonates

00:18:21,830 --> 00:18:25,940
with me quite well, is the fact that we need to meet develops where they are.

00:18:25,940 --> 00:18:30,860
As an advocate, if we are telling developers that they need to change their entire work

00:18:30,860 --> 00:18:35,380
flow, or the tools that they're using isn't going to work and they have to swap it out

00:18:35,380 --> 00:18:38,220
for another, we're not going to go very far.

00:18:38,220 --> 00:18:40,920
And it's something I've seen more and more of right now.

00:18:40,920 --> 00:18:45,000
What I'm trying to do is trying to improve the fact that whatever tool you decide to

00:18:45,000 --> 00:18:50,440
use, whatever framework or library you decide to use, what if we could always make sure

00:18:50,440 --> 00:18:54,679
that tools stays and performant as it possibly can?

00:18:54,679 --> 00:18:59,360
And in terms of how we are trying to do this one way is through tooling.

00:18:59,360 --> 00:19:01,450
And there is a feature called Stack Back.

00:19:01,450 --> 00:19:05,330
This extends to Lighthouse but in a different way.

00:19:05,330 --> 00:19:09,880
The idea behind Stack Pack is that it allows Lighthouse to detect what tools are being

00:19:09,880 --> 00:19:16,600
run on your page and then give specific recommendations specific to that room.

00:19:16,600 --> 00:19:22,110
Let's say you're using WordPress to build a site, and you're working out how to properly

00:19:22,110 --> 00:19:23,750
side your images.

00:19:23,750 --> 00:19:28,690
You can read a highly generalised advice that will apply to anyone, but see advice that

00:19:28,690 --> 00:19:29,940
is more specific to you.

00:19:29,940 --> 00:19:33,240
You see how to do it using the WordPress.

00:19:33,240 --> 00:19:42,309
The idea with Stack Pack, we try to roll this out to many Java frameworks and CMS tools.

00:19:42,309 --> 00:19:49,530
WordPress is the only one that is supported right now.

00:19:49,530 --> 00:19:51,960
Documentation is always going to be a big deal, and it's going to be a big deal for

00:19:51,960 --> 00:19:52,960
a while.

00:19:52,960 --> 00:19:57,910
Now, in Google and the Chrome team, we have a lot of documentation at a high level, generalised,

00:19:57,910 --> 00:20:01,679
and they work for the main developers as they possibly can.

00:20:01,679 --> 00:20:05,140
They're trying to roll out frameworks-specific guidance.

00:20:05,140 --> 00:20:09,809
This is a new documentation site that we have that is more interactive and specific to the

00:20:09,809 --> 00:20:13,779
user, and recently launched a whole section on frameworks.

00:20:13,779 --> 00:20:17,250
The idea is we're not - the idea is we're not trying to teach you how to use a tool

00:20:17,250 --> 00:20:22,470
like React, we are trying to show you how you can make your React app as fast as possible

00:20:22,470 --> 00:20:27,270
using in-built React APIs and third-party libraries in the React ecosystem.

00:20:27,270 --> 00:20:33,679
We plan on having more Angular View and other frameworks in the future.

00:20:33,679 --> 00:20:39,400
In the Chrome team we've also been doing in terms of monitoring support.

00:20:39,400 --> 00:20:45,940
Malte and Nicole announced this and mentioned something called framework fund.

00:20:45,940 --> 00:20:54,429
A lot of people working in open source, a lot of developers in open source, and how

00:20:54,429 --> 00:20:59,781
can we support them in more than one way, to continue to try to increase performance

00:20:59,781 --> 00:21:05,520
of their tools or those who use them will get better defaults, better guardrails, and

00:21:05,520 --> 00:21:07,950
more.

00:21:07,950 --> 00:21:15,210
When it comes to fixing the performance problem, I think as advocates, we are doing it in two

00:21:15,210 --> 00:21:19,210
sort of ways, one being which I call internal support.

00:21:19,210 --> 00:21:21,510
We write blogs to tell you how to do things.

00:21:21,510 --> 00:21:24,450
We build third-party libraries that you can plug in through sites.

00:21:24,450 --> 00:21:28,890
We give talks at a place like JSConf and tell you what you need to do to improve the speed

00:21:28,890 --> 00:21:29,890
your site.

00:21:29,890 --> 00:21:32,590
Then the internal side of things.

00:21:32,590 --> 00:21:35,690
How does the tool you're using get better by default?

00:21:35,690 --> 00:21:37,720
What if they get better at a starting point?

00:21:37,720 --> 00:21:42,240
What if they have better guidance and better warnings?

00:21:42,240 --> 00:21:47,640
As of now, I currently feel we're more so on the external side, and that's fine.

00:21:47,640 --> 00:21:52,789
We will continue to do that as long as we can reach more developers can we possibly

00:21:52,789 --> 00:21:53,789
can.

00:21:53,789 --> 00:21:56,890
What I would like to see in the next few years is a shift in the other direction.

00:21:56,890 --> 00:22:01,610
In an ideal world, we wouldn't have to tell developers what to do if every tool they're

00:22:01,610 --> 00:22:04,430
using already does it automatically.

00:22:04,430 --> 00:22:09,360
I hope you enjoyed this talk as much as I enjoyed giving it.

00:22:09,360 --> 00:22:12,240
Thank you.

00:22:12,240 --> 00:22:13,679

YouTube URL: https://www.youtube.com/watch?v=uIBYN6w9cBc


