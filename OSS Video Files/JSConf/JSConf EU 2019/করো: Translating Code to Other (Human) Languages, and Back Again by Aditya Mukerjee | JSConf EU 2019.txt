Title: করো: Translating Code to Other (Human) Languages, and Back Again by Aditya Mukerjee | JSConf EU 2019
Publication date: 2019-06-24
Playlist: JSConf EU 2019
Description: 
	Javascript runs on nearly any platform. Most languages can compile to Javascript. It’s well-positioned to become the lingua franca of programmers, with one problem: Like most programming languages, Javascript is based on English. 89% of the world’s population doesn’t speak any English. Many of those people can’t even read the Latin script. If we want Javascript to be a lingua franca, we need to ensure it is accessible to all people, regardless of their native language.

Let’s look at the barriers that non-native speakers face when contributing to OSS Javascript projects and what it would take to remove them entirely, so that two developers could collaborate without speaking the same language. We will see what techniques Javascript can borrow from other languages by taking a look at করো (koro), a project which adds Bengali support to the Go compiler. And, we will learn enough about compilers and character encoding to answer the eternal question: “Could we do this in Javascript?”

https://2019.jsconf.eu/aditya-mukerjee/translating-code-to-other-human-languages-and-back-again.html
Captions: 
	00:00:08,170 --> 00:00:09,769
My name's Aditya.

00:00:09,769 --> 00:00:14,799
This talk is entitled koro, translating human code back into languages and back again.

00:00:14,799 --> 00:00:22,710
I've been writing JavaScript off and on again for about 20 years, but these days my primary

00:00:22,710 --> 00:00:25,760
language isn't JavaScript, it's Go.

00:00:25,760 --> 00:00:31,349
I've been writing Go for the last seven years and I will be taking a look at work that has

00:00:31,349 --> 00:00:32,349
been done?

00:00:32,349 --> 00:00:37,070
Go and seeing how we might apply that same work to the JavaScript world as well.

00:00:37,070 --> 00:00:45,489
Even though my examples will be in Go, everything can and should be done in JavaScript too.

00:00:45,489 --> 00:00:50,640
How many of you speak English as a second language?

00:00:50,640 --> 00:00:53,230
That's the overall majority here.

00:00:53,230 --> 00:00:58,410
So worldwide, only five per cent of the world speaks English as their first language, and

00:00:58,410 --> 00:01:03,030
only about 11 per cent speaks English at all.

00:01:03,030 --> 00:01:06,780
That means that the majority of people who speak English speak it as their second language.

00:01:06,780 --> 00:01:13,020
If this conference were perfectly represented of the entire world, that only means 165 people

00:01:13,020 --> 00:01:18,021
out of this entire conference would be able to understand this talk, and of those, all

00:01:18,021 --> 00:01:23,130
but 75 would be listening to me speak in what is for them a foreign language.

00:01:23,130 --> 00:01:29,530
I feel like to say software is eating the world, but also JavaScript is eating software.

00:01:29,530 --> 00:01:33,770
I don't just mean that things are moving to the web, which has always been JavaScript's

00:01:33,770 --> 00:01:39,100
platform of dominance, but JavaScript also is being used in ways that we never really

00:01:39,100 --> 00:01:42,549
thought of maybe like 20 years ago.

00:01:42,549 --> 00:01:47,510
Node.js was launched on this very stage ten years ago at this conference, and that completely

00:01:47,510 --> 00:01:52,350
changed the way in which we think of JavaScript.

00:01:52,350 --> 00:01:56,740
JavaScript is now being used - you can use JavaScript to write Excel macros.

00:01:56,740 --> 00:02:02,299
Try explaining someone to that in the mid-90s, that you would be using live script to write

00:02:02,299 --> 00:02:05,119
your Microsoft Office macros.

00:02:05,119 --> 00:02:09,940
If you want to do positioning logic within Linux, you're going to be writing JavaScript

00:02:09,940 --> 00:02:15,950
rules.

00:02:15,950 --> 00:02:19,660
Technology which includes software is a powerful enabling force.

00:02:19,660 --> 00:02:25,080
We have the ability to do amazingly things on a global scale using software.

00:02:25,080 --> 00:02:29,970
Thanks to software, we are able to take pictures of a black hole that is 55 million light years

00:02:29,970 --> 00:02:31,250
away.

00:02:31,250 --> 00:02:35,010
We can treat and cure diseases that would have been thought chronic or even fatal just

00:02:35,010 --> 00:02:36,419
a few decades ago.

00:02:36,419 --> 00:02:40,859
We might not think of this as achievements of software specifically but software is the

00:02:40,859 --> 00:02:44,630
underlying force that is powering and enabling all of these.

00:02:44,630 --> 00:02:53,360
But software can be used for terrible things as well, using it to inflict violence or commit

00:02:53,360 --> 00:02:54,859
genocide.

00:02:54,859 --> 00:03:02,170
If we think software is a powerful and enable enabling force, who does it enable and what

00:03:02,170 --> 00:03:03,410
does it allow them to do?

00:03:03,410 --> 00:03:06,949
I have really lives who don't speak English.

00:03:06,949 --> 00:03:13,540
If one came to me and said they want to learn to write software and asked me for advice,

00:03:13,540 --> 00:03:18,720
the first thing I would say is you have to learn English because if you don't speak English,

00:03:18,720 --> 00:03:23,419
you're not really going to be able to do much in the software world, certainly not in open-source

00:03:23,419 --> 00:03:25,060
software development.

00:03:25,060 --> 00:03:30,910
Especially if you don't even read the Latin script because your native language uses a

00:03:30,910 --> 00:03:32,370
different script altogether.

00:03:32,370 --> 00:03:34,359
That itself is a barrier.

00:03:34,359 --> 00:03:38,500
If writing software is only an option for the ten per cent of the world who can speak

00:03:38,500 --> 00:03:42,950
English, that has huge implications about what it means when we say that software is

00:03:42,950 --> 00:03:45,919
an empowering and enabling force.

00:03:45,919 --> 00:03:49,350
So if JavaScript wants to be the future of software development and we think that software

00:03:49,350 --> 00:03:55,290
development is going to be an enable willing force for the world, then we need to writing

00:03:55,290 --> 00:04:00,480
JavaScript is accessible to people of all languages, not just English.

00:04:00,480 --> 00:04:04,450
The idea of eliminating natural language barriers to programming isn't new at all.

00:04:04,450 --> 00:04:06,600
In fact, it's very old.

00:04:06,600 --> 00:04:10,790
Grace Hopper is one of the first computer scientists and she wrote THE very first compiler

00:04:10,790 --> 00:04:13,490
for a high-level language.

00:04:13,490 --> 00:04:18,850
You should check out her portrait there.

00:04:18,850 --> 00:04:24,070
The language that she invented was called Cobal, and the goal was to have English-like

00:04:24,070 --> 00:04:28,180
national language syntax so that business executives could write code.

00:04:28,180 --> 00:04:33,320
She got a lot of pushback about this because engineers thought if non-engineers can write

00:04:33,320 --> 00:04:38,070
code, this can put us out of a job but Hopper took this vision further.

00:04:38,070 --> 00:04:41,570
Why restrict it to English-like syntax?

00:04:41,570 --> 00:04:45,160
What if engineers who speak other languages want to be able to write code as well, and

00:04:45,160 --> 00:04:50,390
she wanted Cobal to be a language you can talk to people around the world.

00:04:50,390 --> 00:04:55,310
The response she got to that was more vitriolic.

00:04:55,310 --> 00:05:01,040
How can we teach American computers to run German programmes?

00:05:01,040 --> 00:05:02,880
That wasn't an accident.

00:05:02,880 --> 00:05:07,560
This wasn't a question of how it can be done technically, it was a political question.

00:05:07,560 --> 00:05:13,600
This was the 1950s, and in the US military, the fear of a threat from Germany or Russia

00:05:13,600 --> 00:05:18,940
was still a huge fear in people's minds.

00:05:18,940 --> 00:05:27,280
But even if Hopper's idea was put on the back burner in the 1950s due to xenophobia and

00:05:27,280 --> 00:05:33,970
Cold War politics, we can look at what that means today, and apply that approach to modern

00:05:33,970 --> 00:05:34,970
languages.

00:05:34,970 --> 00:05:39,490
So this is Hopper speaking about Cobal many years later, ""I would have thought it would

00:05:39,490 --> 00:05:43,890
be useful to NATO because they had the common verbs for the things they're going to do,

00:05:43,890 --> 00:05:47,480
and the nouns, they have to have a dictionary for the things they were referring to for

00:05:47,480 --> 00:05:48,480
inventory control.

00:05:48,480 --> 00:05:53,090
They would have common announce throughout NATO and a diction of common verbs and translate

00:05:53,090 --> 00:05:54,300
the programme.

00:05:54,300 --> 00:05:58,510
You can write one in English and you could translate it and it goes to the other language.

00:05:58,510 --> 00:05:59,510
No problem.

00:05:59,510 --> 00:06:00,870
You have communication.

00:06:00,870 --> 00:06:02,480
It would be a limited vocabulary.""

00:06:02,480 --> 00:06:08,120
One thing is that she chose the imperative mood specifically because she thought it would

00:06:08,120 --> 00:06:13,430
be universal to languages, because not all languages distinguish between tenses in the

00:06:13,430 --> 00:06:18,370
same way but they generally have a commanding way to do something.

00:06:18,370 --> 00:06:24,280
Cobol popularised the programming style, and that stuck with us today.

00:06:24,280 --> 00:06:28,870
Even JavaScript, way has the capabilities of a function al language, we still usually

00:06:28,870 --> 00:06:38,690
use imperatives for the four function names and that is - let's see what we get when we

00:06:38,690 --> 00:06:43,520
take the principles of hopper's vision and apply that to a modern programming language

00:06:43,520 --> 00:06:51,889
like JavaScript or Go, Koro is an extension of the Go compiler.

00:06:51,889 --> 00:06:56,500
It's an idiomatic translation of the English name Go.

00:06:56,500 --> 00:07:00,730
You will see why I chose it for this example.

00:07:00,730 --> 00:07:08,290
But as for Bengali, I chose that because Bengali it's the language my family speaks, and we're

00:07:08,290 --> 00:07:12,970
Bengali, and, if you talk to Bengali about our language and culture, you'll see very

00:07:12,970 --> 00:07:15,600
quickly that we're pretty proud of it.

00:07:15,600 --> 00:07:20,200
The Bengalis like to say is the language that is so beautiful, people literally fought a

00:07:20,200 --> 00:07:24,430
revolution, an entire war, to defend the right to speak it.

00:07:24,430 --> 00:07:28,320
The United Nations more recently actually issued a declaration stating that Bengali

00:07:28,320 --> 00:07:33,440
was the sweetest-sounding language in the entire world.

00:07:33,440 --> 00:07:37,040
But on a more practical note, Bengali is a pretty common language.

00:07:37,040 --> 00:07:41,590
After Hindi, it's the most common language spoken in India, and also the national language

00:07:41,590 --> 00:07:42,740
of Bangladesh.

00:07:42,740 --> 00:07:47,460
Combined, that means it's the seventh most widely spoken language in the entire world.

00:07:47,460 --> 00:07:52,220
There are more native speakers of Bengali than there are of German and French combined.

00:07:52,220 --> 00:07:59,250
It also uses a non-Latin script, so it gives us an opportunity to test the boundaries of

00:07:59,250 --> 00:08:05,930
what we can do with Unicode and how characters get treated and rendered in languages outside

00:08:05,930 --> 00:08:07,669
the ASCII code range.

00:08:07,669 --> 00:08:12,290
Again, nothing that I'm doing here is unique to Bengali or to Go.

00:08:12,290 --> 00:08:16,250
If you speak another language, which it seems the majority of this room does, I encourage

00:08:16,250 --> 00:08:20,960
you to go home and try to do this with your own language as well.

00:08:20,960 --> 00:08:26,410
This right here is a simple ""hello, world"" in standard Go.

00:08:26,410 --> 00:08:33,110
If you've never written a line of code, you can guess what it is doing here.

00:08:33,110 --> 00:08:37,210
This is that equivalent programme written in koro.

00:08:37,210 --> 00:08:47,090
We've left the identifier names intact, and I did not forget ""true"", true is not a key

00:08:47,090 --> 00:08:50,760
word in Go.

00:08:50,760 --> 00:08:54,570
Based on the previous slide, you can take a guess at what this programme is doing.

00:08:54,570 --> 00:08:57,890
If you don't speak Bengali, you might not be able to figure it out from scratch, if

00:08:57,890 --> 00:09:01,500
you do, this is a whole lot more readable than what we just saw on the previous slide.

00:09:01,500 --> 00:09:05,330
The first challenge we need to do here is we need to get this programme to run because

00:09:05,330 --> 00:09:12,850
the Go compiler isn't going to know what to do with the key words.

00:09:12,850 --> 00:09:14,430
Here we can take advantage of a nice trick.

00:09:14,430 --> 00:09:17,000
This is why we chose Go for this example.

00:09:17,000 --> 00:09:18,900
Go's source code is all UTF8.

00:09:18,900 --> 00:09:27,470
The Go compiler has trouble dealing with non-ASCII characters in Go programmes and the Go compiler

00:09:27,470 --> 00:09:33,170
is bootstrapped, written in Go which means that the Go compiler is a Go programme so

00:09:33,170 --> 00:09:41,260
it has trouble dealing with non-ASCII key word definitions or strings.

00:09:41,260 --> 00:09:46,500
There are a few checks that ensure that non-alphabetic or non-alphabetic characters can be used in

00:09:46,500 --> 00:09:51,550
key words but it turns out that you additional them and nothing goes wrong.

00:09:51,550 --> 00:09:57,560
If we disable them, all you need to do is extend the mapping that has the strings, that

00:09:57,560 --> 00:10:03,150
map strings to the internal tokens, and extend those to include the Bengali translations

00:10:03,150 --> 00:10:05,760
of the key words as well.

00:10:05,760 --> 00:10:09,510
JavaScript already has the analogous concept of transformations, and that is something

00:10:09,510 --> 00:10:16,560
that is used heavily in JavaScript, if languages like TypeScript and also with polyfills, and

00:10:16,560 --> 00:10:21,520
it is a little trickier to do this for reasons of they have to do with compiler architecture

00:10:21,520 --> 00:10:25,570
which I'm not going to get into, but it's still - it's fairly similar.

00:10:25,570 --> 00:10:30,010
It's the still very much possible to use this same approach in JavaScript to translate from

00:10:30,010 --> 00:10:36,610
one human language to another, or one dialect of a programming language to another.

00:10:36,610 --> 00:10:41,480
Having made those changes, this is what that ""Hello, World"" looks like in practice.

00:10:41,480 --> 00:10:47,600
You can see the programme, and we are going to run it.

00:10:47,600 --> 00:10:50,810
There we go.

00:10:50,810 --> 00:10:52,710
Thank you.

00:10:52,710 --> 00:10:54,320
[Applause].

00:10:54,320 --> 00:10:59,760
Remember, our goal is to defragment open-source development, not to fragment it further.

00:10:59,760 --> 00:11:04,410
We need to make sure that our code that we are writing in koro is still interoperable

00:11:04,410 --> 00:11:08,040
with English-speaking Go developers are use as well.

00:11:08,040 --> 00:11:12,460
We don't want to have to translate every programme manually because that would be unfeasible,

00:11:12,460 --> 00:11:16,040
but the computers are doing the heavy-lifting for us.

00:11:16,040 --> 00:11:26,721
Conveniently, for translation, Go has a handy utility for format ing - and mostly we you

00:11:26,721 --> 00:11:32,560
have the use Go format to argue over bike shedding, semicolons, things like that.

00:11:32,560 --> 00:11:38,899
Instead of arguing which is the proper way to indent your code, you set up the editor

00:11:38,899 --> 00:11:44,420
whichever way you want and render tabs how you want them to be, and, when you save your

00:11:44,420 --> 00:11:47,960
code, it's committed in the standard form.

00:11:47,960 --> 00:11:52,850
If I want to use four spaces for indentation and you want to use two, Go format means we

00:11:52,850 --> 00:11:54,500
can work together.

00:11:54,500 --> 00:11:59,760
I set up my editor to render it to the width I want and we don't need to know that we have

00:11:59,760 --> 00:12:04,980
different indentation preferences because the code committed is on the standard form.

00:12:04,980 --> 00:12:12,040
Go format is syntax aware, so it can do things like remove unnecessarily parentheses and

00:12:12,040 --> 00:12:15,570
ensure it will never change your code semantics.

00:12:15,570 --> 00:12:20,300
That's a simpler way of saying it is a great way of performing fully isomorphic translations

00:12:20,300 --> 00:12:24,529
of source code which is exactly what we could wouldn't here.

00:12:24,529 --> 00:12:31,820
All we have to do is extend Go format and repurpose it for translating English Go code

00:12:31,820 --> 00:12:36,560
into Bengali or vice versa, and that is what koro format does.

00:12:36,560 --> 00:12:41,390
So let's translate that same programme written in koro back into English-speaking Go and

00:12:41,390 --> 00:12:45,050
run it.

00:12:45,050 --> 00:12:48,890
Here is the koro programme.

00:12:48,890 --> 00:12:52,610
And now we can format it, and we get the English programme again, but if you don't believe

00:12:52,610 --> 00:13:04,170
me, we can run it and prove it does the exact same thing.

00:13:04,170 --> 00:13:05,170
There we go.

00:13:05,170 --> 00:13:12,800
We just translated from one language to another, and back again.

00:13:12,800 --> 00:13:13,800
There we go.

00:13:13,800 --> 00:13:16,959
So the same way that you didn't know that I was using four spaces for tabs and I don't

00:13:16,959 --> 00:13:22,430
know that you were using two, having bidirectional translation layers means you don't need to

00:13:22,430 --> 00:13:26,180
know that I'm writing my code in English and I don't need to know that you're writing your

00:13:26,180 --> 00:13:31,620
code in whatever language you happy to speak.

00:13:31,620 --> 00:13:36,680
We can still work together and we localise our source code as a commit hook and the editor

00:13:36,680 --> 00:13:39,589
will display it for us in the language that we want.

00:13:39,589 --> 00:13:44,750
As a developer, koro means we only need to look at source code in our own language, and

00:13:44,750 --> 00:13:49,200
as far as the code is concerned, the language barriers are no more of a barrier to you and

00:13:49,200 --> 00:13:53,740
me writing code and working together than our indentation preferences are.

00:13:53,740 --> 00:13:57,230
That's the way it should be.

00:13:57,230 --> 00:14:00,480
Translated the key words but you will notice that we left the - we didn't touch everything,

00:14:00,480 --> 00:14:05,649
so like the package names and identifiers, those we kept in English.

00:14:05,649 --> 00:14:12,060
Is there a way that we can translate those as well in there are a lot of ways to choose

00:14:12,060 --> 00:14:20,140
variable names but the one thing that everyone agrees on is they should be descriptive and

00:14:20,140 --> 00:14:21,140
concise.

00:14:21,140 --> 00:14:25,790
If you don't speak English, then it's not descriptive to have English codenames.

00:14:25,790 --> 00:14:33,140
In reality, many functional names are highly structured.

00:14:33,140 --> 00:14:38,750
We don't need to, as Hopper mentioned, we already have the verbs that we use when talking

00:14:38,750 --> 00:14:39,750
about our programme.

00:14:39,750 --> 00:14:41,510
There is the common vocabulary.

00:14:41,510 --> 00:14:46,170
We can take advantage of that in the translation step as well and translate these.

00:14:46,170 --> 00:14:48,930
There we go.

00:14:48,930 --> 00:14:57,090
So, yes, we have read fu, write fu, et cetera, and these are common verbs that you use when

00:14:57,090 --> 00:15:02,000
we write JavaScript programming, and even if we don't translate all of them, having

00:15:02,000 --> 00:15:07,399
that on the right is a whole lot better and descriptive and compatible on the rest.

00:15:07,399 --> 00:15:12,980
You might know what fu means, you might not be able to pronounce that, but you can still

00:15:12,980 --> 00:15:15,810
tell that that means you're going to be reading something.

00:15:15,810 --> 00:15:17,970
It's some sort of access or method.

00:15:17,970 --> 00:15:23,140
By being more conscious about these conventions we're already using, we can make our code

00:15:23,140 --> 00:15:25,690
that much more accessible to non-English speakers.

00:15:25,690 --> 00:15:29,420
We might not get all of these translations for free but we can still get many of them,

00:15:29,420 --> 00:15:33,180
and that is a huge step forward.

00:15:33,180 --> 00:15:40,970
Now the million-dollar question: could we do this with JavaScript?

00:15:40,970 --> 00:15:43,540
There are a few reasons I chose Go for this example.

00:15:43,540 --> 00:15:51,200
In Go the source code is acquired by the UTF8 means internally strings and byte arrays are

00:15:51,200 --> 00:15:57,459
treated as UTF8 as well.

00:15:57,459 --> 00:16:03,420
JavaScript is - source code can be what you want in JavaScript, whatever the interpreter

00:16:03,420 --> 00:16:05,790
happens to support.

00:16:05,790 --> 00:16:09,830
As for the internal representation of strings, that is an even trickier question.

00:16:09,830 --> 00:16:16,970
If you talk to most people, they will say UTF-16, wide Unicode, that's mostly true except

00:16:16,970 --> 00:16:18,740
where it's not.

00:16:18,740 --> 00:16:24,029
Some people will say it's UCS2, that some were true except where it's not.

00:16:24,029 --> 00:16:28,800
The reality is probably best described like this like this: JavaScript is some weird amalgamation

00:16:28,800 --> 00:16:37,730
of UTF16 and UTFC2 internally which works fine, but it makes, trickier when you're dealing

00:16:37,730 --> 00:16:43,660
with non-ASCII things outside the code point, especially when you're dealing with the actual

00:16:43,660 --> 00:16:49,079
digging into the actual internals of the language implementation itself because you can't rely

00:16:49,079 --> 00:16:54,269
on the source encoding, because it can be whatever the interpreter happens to support,

00:16:54,269 --> 00:17:00,300
and you can't rely on, and dealing with code points that are far outside the ASCII code

00:17:00,300 --> 00:17:04,699
range so you need to be able to handle more than one byte at a time in your key words.

00:17:04,699 --> 00:17:08,679
A lot of implementations, particularly things implemented in C, they're going to struggle

00:17:08,679 --> 00:17:11,110
with that.

00:17:11,110 --> 00:17:12,230
Could we do this in JavaScript?

00:17:12,230 --> 00:17:15,529
I mean, honestly, I think so.

00:17:15,529 --> 00:17:20,739
Definitely, not as easy as it is in Go, like I've outlined some of the challenges there,

00:17:20,739 --> 00:17:22,679
but definitely possible.

00:17:22,679 --> 00:17:28,840
That said, one of my friend, who is a very die-hard JavaScript programmer, she told me

00:17:28,840 --> 00:17:34,309
that the best way to get JavaScript developers to write something is to convince them that

00:17:34,309 --> 00:17:38,850
it can't be done in JavaScript.

00:17:38,850 --> 00:17:42,740
If you tell them they can't tell them in JavaScript, then within an hour of your talk finishing,

00:17:42,740 --> 00:17:46,330
there will be three packages which do that thing.

00:17:46,330 --> 00:17:51,820
I'm going to tell you this can't be done in JavaScript, and I'm going to bet that you

00:17:51,820 --> 00:17:55,279
cannot prove me wrong!

00:17:55,279 --> 00:17:58,239
[Applause].

00:17:58,239 --> 00:18:12,019
Ask how we've done the - we've done the source code itself, and we have to talk about the

00:18:12,019 --> 00:18:15,419
users, and the users include developers who are using developer tooling as well.

00:18:15,419 --> 00:18:17,730
Error messages are a big part of that.

00:18:17,730 --> 00:18:22,320
Node.js does a pretty good job with this by abstracting the way that messages are presented

00:18:22,320 --> 00:18:29,120
from the internals of it, so JavaScript actually already does, I would say, well, some platforms

00:18:29,120 --> 00:18:32,480
of JavaScript, does maybe 70 per cent of the work that you would need for this.

00:18:32,480 --> 00:18:37,139
Go is an approach to error-handling that is different from most languages, but if you've

00:18:37,139 --> 00:18:40,590
actually written JavaScript, you're probably still familiar with it, because in JavaScript,

00:18:40,590 --> 00:18:47,899
you can't use access - exception handling to, or error handling within a callback because

00:18:47,899 --> 00:18:49,090
it's asynchronous code.

00:18:49,090 --> 00:18:53,389
You have to pass in error values and operate on the values.

00:18:53,389 --> 00:18:58,840
Go does the exact same thing but for all code where synchronous or asynchronous.

00:18:58,840 --> 00:19:06,480
In Go, to juice JavaScript terminology, all errors are an object that happens for a dot

00:19:06,480 --> 00:19:10,940
error method on it, and that is guaranteed to return a string.

00:19:10,940 --> 00:19:15,190
That's the only thing that you're guaranteed to know about than error is that one specific

00:19:15,190 --> 00:19:20,549
method is present and it will always return a string if it is not null.

00:19:20,549 --> 00:19:26,480
And that applies, that is a proper that means it's powerful but it means that that message

00:19:26,480 --> 00:19:32,100
then needs to be accessible to people who don't speak English because - what happened

00:19:32,100 --> 00:19:35,150
here?

00:19:35,150 --> 00:19:45,460
As developers, we've struggled with cryptic error messages.

00:19:45,460 --> 00:19:51,690
This is from Java because I've been using it so long as an example of a terrible error

00:19:51,690 --> 00:19:53,519
message that I've forgotten what it means.

00:19:53,519 --> 00:19:54,789
It's a real error message.

00:19:54,789 --> 00:19:58,279
If you know what it means, tell me, because it's been years, I've forget.

00:19:58,279 --> 00:20:01,799
JavaScript isn't immune, either.

00:20:01,799 --> 00:20:05,600
If you write JavaScript a lot, you probably have an idea of what that means and what the

00:20:05,600 --> 00:20:10,729
error is, but if you've never written JavaScript, this is your first time encountering that

00:20:10,729 --> 00:20:14,999
error, it's not so clear what you need to do there to fix it.

00:20:14,999 --> 00:20:17,649
Certainly if you don't speak English because the only thing that is worse than a cryptic

00:20:17,649 --> 00:20:23,260
error message is a cryptic error message in a language you can't understand.

00:20:23,260 --> 00:20:25,029
Translating error messages is a good starting point.

00:20:25,029 --> 00:20:32,130
Not only are they fine night in full - finite in number - and they are the easiest to solve

00:20:32,130 --> 00:20:36,149
technically because we can rely on existing localisation strategies.

00:20:36,149 --> 00:20:40,479
Node.js does a good job of making this abstraction available.

00:20:40,479 --> 00:20:43,820
We just don't have that fully for all languages.

00:20:43,820 --> 00:20:46,960
We're not taking advantage of that, and we're certainly not taking advantage of it over

00:20:46,960 --> 00:20:48,679
the JavaScript ecosystem.

00:20:48,679 --> 00:20:54,479
JavaScript has localisation libraries that will provide experience of textual strings

00:20:54,479 --> 00:20:59,619
in a designated locale.

00:20:59,619 --> 00:21:10,979
You can present it to the user in a in the language that we're going to be able to understand.

00:21:10,979 --> 00:21:17,239
So, we've talked about a lot of different things so far.

00:21:17,239 --> 00:21:21,149
There are a lot of steps that we can take to including non-English speakers more in

00:21:21,149 --> 00:21:22,909
JavaScript development.

00:21:22,909 --> 00:21:26,470
Making tool chains for translating code to other languages, like what we saw here with

00:21:26,470 --> 00:21:29,360
koro, that's just one of them, and there is more as well.

00:21:29,360 --> 00:21:33,610
I don't have time to talk about the aspects like documentation.

00:21:33,610 --> 00:21:37,789
How do you translate documentation and how do you make sure that that documentation stays

00:21:37,789 --> 00:21:40,109
in sync between across languages?

00:21:40,109 --> 00:21:43,840
How do you make things like mailing lists or even meet-ups and conferences like this,

00:21:43,840 --> 00:21:48,690
make those accessible to people who speak any language, not just people who happen to

00:21:48,690 --> 00:21:49,899
speak English?

00:21:49,899 --> 00:21:54,389
I don't have time to go into the details today, but I've spoken about some of the challenges

00:21:54,389 --> 00:21:59,000
in the past, so, if you're interested, you can check that out, or come and find me afterwards.

00:21:59,000 --> 00:22:04,499
Of course, that means that not all the stuff is technical, but - but some of his requires

00:22:04,499 --> 00:22:09,809
you rolling up your sleeves and lying code, and if someone is interesting in doing this

00:22:09,809 --> 00:22:17,840
with JavaScript or another language like what koro does for Go, go ahead and prove me wrong

00:22:17,840 --> 00:22:20,419
when I say it can't be done in JavaScript.

00:22:20,419 --> 00:22:23,440
But others are straightforward, and more low-tech.

00:22:23,440 --> 00:22:25,620
They involve the ways we operate as a community.

00:22:25,620 --> 00:22:28,210
We are scratching the surface here.

00:22:28,210 --> 00:22:33,789
For think of this stuff to happen, we need to commit ourselves to doing it.

00:22:33,789 --> 00:22:37,979
We need to remember that 95 per cent of the world doesn't speak English as their first

00:22:37,979 --> 00:22:43,350
language, and 89 per cent of the world doesn't speak English fluently at all.

00:22:43,350 --> 00:22:48,020
Thanks to JavaScript's dominance over the web over the years, that means that if there

00:22:48,020 --> 00:22:55,100
is language that has been spoken and is being written today by active users, and it is basically

00:22:55,100 --> 00:23:00,109
a certainty that, at some point, that language is being used alongside JavaScript, that JavaScript

00:23:00,109 --> 00:23:02,679
is handling that language in some capacity.

00:23:02,679 --> 00:23:06,299
That's a virtual certainty because of how widely used JavaScript is across the web and

00:23:06,299 --> 00:23:11,509
how powerful the web has been in transforming people's lives, not just in English-speaking

00:23:11,509 --> 00:23:14,340
countries, but really all around the world.

00:23:14,340 --> 00:23:19,789
So, it means that there is really no language that is as well suited and JavaScript is to

00:23:19,789 --> 00:23:24,129
being used by the entire world, not just people who speak English.

00:23:24,129 --> 00:23:29,100
We have an opportunity to bridge this language divide, to make Hopper's vision a reality

00:23:29,100 --> 00:23:33,049
in a way that no other programming language has been able to do before.

00:23:33,049 --> 00:23:35,159
So, let's do that.

00:23:35,159 --> 00:23:39,259
Let's make JavaScript a programming language that is truly accessible to everyone, no matter

00:23:39,259 --> 00:23:42,549
what language you happen to speak.

00:23:42,549 --> 00:23:46,830
Thank you.

00:23:46,830 --> 00:23:48,960

YouTube URL: https://www.youtube.com/watch?v=-0WQCs2JsFY


