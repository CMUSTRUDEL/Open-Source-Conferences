Title: Building WebApps Like It's 1972 🧙‍♂️by Leandro Ostera | JSConf EU 2019
Publication date: 2019-08-22
Playlist: JSConf EU 2019
Description: 
	The year is 1972 and GUI applications like no one has seen before are being built in Smalltalk: bitmaps graphics, draggable elements, drop-down menus, collapsable windows 🤯; all of them and many more coming straight from the future, powered by asynchronous message passing, object orientation, and functional programming. An unprecedented cocktail to be later rediscovered as the Actor-model.

Fast forward to the present day, and typical web applications are modeled as monolithic deeply nested structures, resembling the medium the web was built for (HTML), but leaving us handicapped to build outstanding user facing applications. 🦖

Let’s explore together what we can learn from the early days of UIs, languages like Erlang and Smalltalk, the Actor-model, and how we can apply some of these principles and ideas today to take our UIs back to the future 🚀

https://2019.jsconf.eu/leandro-ostera/building-webapps-like-its-1972-male.html
Captions: 
	00:00:00,399 --> 00:00:16,209
 

00:00:16,209 --> 00:00:22,230
Around ten years ago, I left my home town in the north-west of Argentina, and I could

00:00:22,230 --> 00:00:26,140
not envision that I would be speaking today to all of you.

00:00:26,140 --> 00:00:28,720
Thank you.

00:00:28,720 --> 00:00:35,500
Earlier this week, I was asking any speakers if they had rituals before they went on stage.

00:00:35,500 --> 00:00:37,880
This is the largest audience IBA been in front of.

00:00:37,880 --> 00:00:41,820
Laurie Voss suggested I take a selfie to help with my stage fright.

00:00:41,820 --> 00:00:45,320
If that is okay with you, can we take one at least?

00:00:45,320 --> 00:00:48,450
Thank you so much!

00:00:48,450 --> 00:00:52,360
So we've got it here.

00:00:52,360 --> 00:00:55,490
Can we say "actors"!

00:00:55,490 --> 00:00:58,620
One, two, three, actors!

00:00:58,620 --> 00:00:59,620
Okay.

00:00:59,620 --> 00:01:01,510
It was worth a shot.

00:01:01,510 --> 00:01:06,740
So, all right, for those of you who don't know me, my name is Leandro, and I work as

00:01:06,740 --> 00:01:10,170
a research engineer at Source.

00:01:10,170 --> 00:01:16,640
We're fully open source non-profit dedicated to advance humanity in our interactions with

00:01:16,640 --> 00:01:17,640
computers.

00:01:17,640 --> 00:01:20,470
Today, I'm here to talk about us.

00:01:20,470 --> 00:01:21,470
All of us.

00:01:21,470 --> 00:01:25,060
And about our history-building software for human beings.

00:01:25,060 --> 00:01:30,370
By the end of this talk I hopefully will have done two things.

00:01:30,370 --> 00:01:35,390
While the web flourishes with incredible ideas, we have a great many lessons to learn from

00:01:35,390 --> 00:01:37,090
our past.

00:01:37,090 --> 00:01:41,450
The second one is that was perhaps I will have compelled some of you to challenge the

00:01:41,450 --> 00:01:48,780
way we build web applications, both at a technical level but also philosophically.

00:01:48,780 --> 00:01:49,780
So let us begin.

00:01:49,780 --> 00:01:52,830
And in the spirit of fun, let's play a gale.

00:01:52,830 --> 00:01:56,860
I will describe a programme and some of the features it has, and you will try to guess

00:01:56,860 --> 00:01:57,860
out loud its name.

00:01:57,860 --> 00:01:59,510
Are you up for it?

00:01:59,510 --> 00:02:00,510
Yeah?

00:02:00,510 --> 00:02:01,510
Cool.

00:02:01,510 --> 00:02:03,960
I know we are tired, the last day, but please, bear with me.

00:02:03,960 --> 00:02:11,239
Can you think of a programme that lets you draw maybe free handed, and then you can resize

00:02:11,239 --> 00:02:13,489
your shapes at will?

00:02:13,489 --> 00:02:18,150
Does this programme let you set constraints for those shapes and say that they will be

00:02:18,150 --> 00:02:22,069
centred, parallel to something else?

00:02:22,069 --> 00:02:24,340
Can you make copies of those shapes?

00:02:24,340 --> 00:02:29,980
And if you make a copy and update the regional, does the copy update as well?

00:02:29,980 --> 00:02:30,980
Anybody any guesses?

00:02:30,980 --> 00:02:31,980
Photoshop?

00:02:31,980 --> 00:02:32,980
Anyone else?

00:02:32,980 --> 00:02:39,049
All right, I was hoping would actually say "Sketch".

00:02:39,049 --> 00:02:46,829
These are some of the features in Sketch but I was referring to subscribers sketch Pad,

00:02:46,829 --> 00:02:52,189
a programme developed back in 1963, and yet this is this old.

00:02:52,189 --> 00:02:54,829
This is really over 50 years old.

00:02:54,829 --> 00:03:01,780
So I want to show you a little bit of what Sketch Pad looks like.

00:03:01,780 --> 00:03:06,469
We can see that something on screen, right.

00:03:06,469 --> 00:03:10,819
It looks like a rivet or maybe some sort of square with a base.

00:03:10,819 --> 00:03:15,749
He has a crossbar, and the centre of the crossbar now to draw an arc.

00:03:15,749 --> 00:03:21,389
Then he's going to point to the different edges of the drawing and ask the programme

00:03:21,389 --> 00:03:23,620
to make them mutually perpendicular.

00:03:23,620 --> 00:03:33,329
As the problem solves the constraints, it forces the arc to change.

00:03:33,329 --> 00:03:37,550
Then he shows that no matter how you distort it, it comes up with a symmetrical solution,

00:03:37,550 --> 00:03:39,049
which is pretty cool.

00:03:39,049 --> 00:03:43,689
These constraints could have been more complicated, could have been ratios between lines, and

00:03:43,689 --> 00:03:44,689
other drawings.

00:03:44,689 --> 00:03:53,139
We will see a last example there.

00:03:53,139 --> 00:03:54,139
Turns it on.

00:03:54,139 --> 00:03:56,550
There you go.

00:03:56,550 --> 00:03:59,569
Perfectly symmetrical rivet.

00:03:59,569 --> 00:04:04,469
Another important idea we will see here, and the first time it is shown, is the idea of

00:04:04,469 --> 00:04:08,140
a master and an instance, right?

00:04:08,140 --> 00:04:12,469
He was working before on this master drawing, and now he has an instance of it on screen

00:04:12,469 --> 00:04:15,180
that is completely independent from the master.

00:04:15,180 --> 00:04:20,200
You can see that he's rotating it, trying to fit it into the plank.

00:04:20,200 --> 00:04:21,200
It's a tedious process.

00:04:21,200 --> 00:04:22,960
It takes a little bit of time.

00:04:22,960 --> 00:04:27,610
This flickers because it's not actually a display, it's an oscilloscope.

00:04:27,610 --> 00:04:31,289
They did not have displays back then.

00:04:31,289 --> 00:04:33,330
Perfect.

00:04:33,330 --> 00:04:39,430
There you go.

00:04:39,430 --> 00:04:42,520
We can relate now to this pattern using different names.

00:04:42,520 --> 00:04:47,909
Perhaps we think of components and elements in React or classed as an object in JavaScript.

00:04:47,909 --> 00:04:50,889
He creates a few more instances, and then he goes back to the master, and you can see

00:04:50,889 --> 00:04:56,310
that he will just remove some of the crossbar lines, and, when he goes back, lo and behold,

00:04:56,310 --> 00:05:01,479
the copies, the instance was be the elements have been updated.

00:05:01,479 --> 00:05:03,580
Yes.

00:05:03,580 --> 00:05:09,560
This is the work of Ivan Sutherland who, in 1963, published his seminal work on Sketch

00:05:09,560 --> 00:05:11,040
Pad.

00:05:11,040 --> 00:05:13,330
It's pretty intense.

00:05:13,330 --> 00:05:14,880
It's on line.

00:05:14,880 --> 00:05:21,420
This development during the thesis, all by himself, and when Alan Okay one of his students,

00:05:21,420 --> 00:05:27,150
asked him how did he manage to create this first object-orientated system, and the first

00:05:27,150 --> 00:05:33,270
graphical interface system all within one year by himself, the guy just replied he didn't

00:05:33,270 --> 00:05:35,970
know it was hard.

00:05:35,970 --> 00:05:38,169
Which is interesting.

00:05:38,169 --> 00:05:43,750
Either way, Ivan really set the bar high for a people that came after him, right?

00:05:43,750 --> 00:05:48,840
He set the direction for the likes of Douglas Engelberg, the fellow who created the first

00:05:48,840 --> 00:05:51,960
computer mouse.

00:05:51,960 --> 00:05:58,610
They developed through a span of ten years a system that is kind of incredible.

00:05:58,610 --> 00:06:01,639
I can't quite grasp that it has existed.

00:06:01,639 --> 00:06:07,800
This is the online system for historical reasons that I'm not going to get into, and it was

00:06:07,800 --> 00:06:10,909
first made publicly in 1968.

00:06:10,909 --> 00:06:14,889
In dates a long time ago as well.

00:06:14,889 --> 00:06:18,530
This has been dubbed "the mother of all demos".

00:06:18,530 --> 00:06:20,310
Let's look at why.

00:06:20,310 --> 00:06:23,469
And this is audio, so hopefully, you will be able to see it.

00:06:23,469 --> 00:06:26,889
>> [Video]: I would like to see you while I'm working on it.

00:06:26,889 --> 00:06:27,979
Oops.

00:06:27,979 --> 00:06:30,180
The kind of display.

00:06:30,180 --> 00:06:33,110
I would like to see you while I'm working on it.

00:06:33,110 --> 00:06:39,020
So before I can do that, I have to set up my display in a certain way.

00:06:39,020 --> 00:06:42,770
>> We can hear Douglas doing the live stream of the computer.

00:06:42,770 --> 00:06:46,550
>> [Video]: It leaves a corner up there.

00:06:46,550 --> 00:06:52,349
[Voices speak all at once].

00:06:52,349 --> 00:07:05,240
>> You can see my work, I can point on the at it, and we can talk.

00:07:05,240 --> 00:07:07,339
Let's do some collaborating.

00:07:07,339 --> 00:07:09,979
>> That is video conferencing 1968.

00:07:09,979 --> 00:07:17,699
>> There is nobody here but a large audience, Bill.

00:07:17,699 --> 00:07:22,650
Let's talk about information retrieval, and a lot of things I've been showing them jumping

00:07:22,650 --> 00:07:23,650
around and finding your way.

00:07:23,650 --> 00:07:26,889
>> Can we lower the volume on the video, please?

00:07:26,889 --> 00:07:32,990
>> "An instrument, complex data structures, it shows them how we can get around and find

00:07:32,990 --> 00:07:33,990
things.

00:07:33,990 --> 00:07:36,930
I showed them the content analysers ..." >> They're discussing some matters of the

00:07:36,930 --> 00:07:41,580
presentation they were doing there, and then they proceeded to link work spaces to the

00:07:41,580 --> 00:07:44,509
point that they are essentially doing live-coding.

00:07:44,509 --> 00:07:49,939
If you look carefully, in a second from now, two mouses on the same computer.

00:07:49,939 --> 00:07:54,370
They're modifying the same environment.

00:07:54,370 --> 00:07:56,550
This is live coding.

00:07:56,550 --> 00:07:57,550
This presentation is epical.

00:07:57,550 --> 00:08:04,910
If you haven't watched it, after this talk, wherever you're home, look at it on YouTube.

00:08:04,910 --> 00:08:07,259
You see two mouses there.

00:08:07,259 --> 00:08:14,419
With this contextual background, we can move on to the last piece of history that we need

00:08:14,419 --> 00:08:19,770
for this presentation, and that is Xerox Park, the Palo Alto research centre.

00:08:19,770 --> 00:08:28,930
They create the Smalltalk.

00:08:28,930 --> 00:08:31,289
Smalltalk is a language that was designed to be a - Smalltalk was designed to be a vehicle

00:08:31,289 --> 00:08:38,030
for human symbiosis, not like in Star Trek.

00:08:38,030 --> 00:08:42,820
It's a language that is designed to fade into the background fast and let you express yourself,

00:08:42,820 --> 00:08:46,000
sort of like a musical instrument would.

00:08:46,000 --> 00:08:50,261
It offers the programmers two core capabilities: the first one is classes and objects, which

00:08:50,261 --> 00:08:55,950
are used to represent things, right, and processes, and the second one is message-passing.

00:08:55,950 --> 00:09:01,310
That provides the communication layer, a way for the objects to talk to each other.

00:09:01,310 --> 00:09:06,000
Something worth noting is that Alan Okay has repeatedly said that when he invented object-orientated

00:09:06,000 --> 00:09:11,750
programming, the important part was not the objects themselves but the messages.

00:09:11,750 --> 00:09:14,680
It was the communication that he really cared about.

00:09:14,680 --> 00:09:18,380
Let's look at an example of this system.

00:09:18,380 --> 00:09:23,590
We can see here an animation of a bowl in what appears to be a static website.

00:09:23,590 --> 00:09:26,870
In reality, the animation is being programmed as objects.

00:09:26,870 --> 00:09:28,830
We can stop it, step through it.

00:09:28,830 --> 00:09:32,900
It's going to go through until it finds the right frame.

00:09:32,900 --> 00:09:39,040
He opens up a browser, and this browser lets you see the messages that this object in particular

00:09:39,040 --> 00:09:41,060
can receive, right?

00:09:41,060 --> 00:09:42,460
That you can send to it.

00:09:42,460 --> 00:09:47,990
After finding the right message, he is kind of going to the painter tool and doing the

00:09:47,990 --> 00:09:52,340
same thing, and finding that, okay, we have the current frame message on the top, and

00:09:52,340 --> 00:09:55,600
we need to find a message to link the current frame into the painting tool.

00:09:55,600 --> 00:09:58,720
So it's going to look for the picture arrow.

00:09:58,720 --> 00:10:02,931
It's going to then sort of sketch an arrow, and the system will recognise that you have

00:10:02,931 --> 00:10:08,690
to messages selected, so you can type in there what you want to say.

00:10:08,690 --> 00:10:14,140
He's saying, hey, painter, here's a message picture, give me the picture that you're currently

00:10:14,140 --> 00:10:18,460
using and link it to the bouncing, which is the name of the object which represents the

00:10:18,460 --> 00:10:19,480
animation, current frame.

00:10:19,480 --> 00:10:21,630
So the current frame of the animation above.

00:10:21,630 --> 00:10:25,160
After he sends the message, we get the frame below.

00:10:25,160 --> 00:10:26,770
This is done completely live.

00:10:26,770 --> 00:10:29,260
This is not something that has been prepared beforehand.

00:10:29,260 --> 00:10:33,710
It's the live system that the user is going to use.

00:10:33,710 --> 00:10:34,910
Right?

00:10:34,910 --> 00:10:42,790
All of these applications are customisable by the users to feed their needs.

00:10:42,790 --> 00:10:48,280
They turn the whole computer into some bicycle for the mind.

00:10:48,280 --> 00:10:52,270
And all of these examples have been built on each other to formalise the idea that our

00:10:52,270 --> 00:10:53,850
world is concurrent.

00:10:53,850 --> 00:10:56,690
Everything around us is happening in parallel from us.

00:10:56,690 --> 00:11:00,550
We communicate with everything around us by sending these metal, just like right now,

00:11:00,550 --> 00:11:07,470
I'm not letting you access the memory in my head, I'm sending mention to you so we communicate.

00:11:07,470 --> 00:11:10,200
Yes.

00:11:10,200 --> 00:11:14,210
The underlying philosophical grounds that all of these people shared, the vision they

00:11:14,210 --> 00:11:18,400
had, was to advance the human intellect.

00:11:18,400 --> 00:11:22,960
We're not talking about for-profit companies trying to lure you into buying a product but

00:11:22,960 --> 00:11:27,650
altruistic men and women dedicating the lives for all of us.

00:11:27,650 --> 00:11:31,410
We've seen the sketch about the NLS - Smalltalk.

00:11:31,410 --> 00:11:35,370
What are the learning we can take from them and apply today?

00:11:35,370 --> 00:11:38,590
I want to talk about two ideas.

00:11:38,590 --> 00:11:43,110
The first one is the competition model behind this application, how is it that they're run,

00:11:43,110 --> 00:11:46,730
and the second one is the philosophy behind it?

00:11:46,730 --> 00:11:48,170
Let's begin with a first one.

00:11:48,170 --> 00:11:53,430
When we model an application in Smalltalk, we model it in terms of objects that interact

00:11:53,430 --> 00:11:58,060
with each other in terms of message-passing and each of those objects performs hopefully

00:11:58,060 --> 00:11:59,060
one small task.

00:11:59,060 --> 00:12:05,690
That's a number of messages that it understands that it sends to all their objects.

00:12:05,690 --> 00:12:10,670
It may have some internal state that can change over time.

00:12:10,670 --> 00:12:16,660
Normally, one of these Smalltalk applications, right, can have millions, or hundreds of millions

00:12:16,660 --> 00:12:21,220
of objects, and you may even think of those tiny objects as tiny computers on their own.

00:12:21,220 --> 00:12:23,500
It's kind of like an internet inside your application.

00:12:23,500 --> 00:12:29,040
If you look at this diagram, you can see we have some ... that is sending essentially

00:12:29,040 --> 00:12:33,290
an in put object, a message called "clear", and it clears itself, and a container object

00:12:33,290 --> 00:12:38,890
is sending a draw message telling where it has to be drawn, the same with a slide er

00:12:38,890 --> 00:12:46,640
linked to the graph, and the synchronise from send to the graph that will in turn update

00:12:46,640 --> 00:12:49,300
the slider.

00:12:49,300 --> 00:12:54,360
The underlying principles behind how Smalltalk works have been formalised with some differences

00:12:54,360 --> 00:12:55,400
as the Actor model.

00:12:55,400 --> 00:13:00,850
In the Actor model, we have separate actors, essentially independent entities, that they're

00:13:00,850 --> 00:13:04,780
executed completely independently, completely in isolation.

00:13:04,780 --> 00:13:09,200
They solve problems by collaboration, and then collaborate with each other by message-passing.

00:13:09,200 --> 00:13:14,610
They collaborate by talking to each other just like humans do.

00:13:14,610 --> 00:13:17,980
Modelling the system with this approach history is interesting properties.

00:13:17,980 --> 00:13:21,060
The first one is failure ... by default.

00:13:21,060 --> 00:13:28,410
The second one is an asynchronous nature, and the second one is that it is parallelisable.

00:13:28,410 --> 00:13:36,760
A show of hands: have you ever seen an application, a website that bass completely unusable because

00:13:36,760 --> 00:13:40,920
of some exception that blew up the complete application stack?

00:13:40,920 --> 00:13:42,310
Yes or no?

00:13:42,310 --> 00:13:46,130
Pretty everyone is yeah, that's the way it goes.

00:13:46,130 --> 00:13:48,440
I think we all have, right?

00:13:48,440 --> 00:13:54,370
Before application s start normally compose of those independent ly collaborating systems,

00:13:54,370 --> 00:13:59,070
why do we treat them as a single monolith that has to be carefully programmed?

00:13:59,070 --> 00:14:00,660
I don't quite understand that.

00:14:00,660 --> 00:14:06,060
We know that applications are scaling massively in complexity, and for the user experiences

00:14:06,060 --> 00:14:11,480
that people that used them is perhaps the definition of a ... for some of us.

00:14:11,480 --> 00:14:17,170
In the Actor model, an actor failing does not take down the entire system.

00:14:17,170 --> 00:14:22,480
If you build it carefully, all the actors can take a look at your actors, and restart

00:14:22,480 --> 00:14:23,480
them whenever they fail.

00:14:23,480 --> 00:14:26,050
You have a system that heals.

00:14:26,050 --> 00:14:31,540
Of course, we could decide the certain failures are worth a complete application crash, irrecoverable

00:14:31,540 --> 00:14:32,540
crash.

00:14:32,540 --> 00:14:34,230
Now it's a constant decision that we make.

00:14:34,230 --> 00:14:37,300
It's not something that just happens.

00:14:37,300 --> 00:14:39,930
The second thing I want to talk about is asynchronous nature.

00:14:39,930 --> 00:14:42,900
This is fairly straightforward.

00:14:42,900 --> 00:14:45,750
The applications that we build are asynchronous by default.

00:14:45,750 --> 00:14:48,870
The user interacts with it and we don't know when that is going to happen.

00:14:48,870 --> 00:14:56,170
Why do we need to build up stacks of reactive libraries, we could be using a competition

00:14:56,170 --> 00:14:59,440
model that is fit for it?

00:14:59,440 --> 00:15:03,500
Lastly, parallelisable.

00:15:03,500 --> 00:15:10,860
We struggle to parallelise this because we have a accessible stack running, and any co-ordination

00:15:10,860 --> 00:15:15,490
in the thread has been thought about beforehand and done manually.

00:15:15,490 --> 00:15:19,340
In terms of actors, we could potentially run every Actor parallelly.

00:15:19,340 --> 00:15:23,530
That might be useless because some might depend on messages from each other but you can do

00:15:23,530 --> 00:15:24,530
that.

00:15:24,530 --> 00:15:28,090
This is because each one of the actors is essentially its own tiny computer.

00:15:28,090 --> 00:15:34,620
Just think of the performance gains some applications would have by using more cores because they

00:15:34,620 --> 00:15:35,620
are available.

00:15:35,620 --> 00:15:37,700
Without having to be rewritten.

00:15:37,700 --> 00:15:40,640
There is this three properties, right.

00:15:40,640 --> 00:15:49,440
They are incredible in practice like in Erlang or Pony been when they are used for building

00:15:49,440 --> 00:15:54,780
massively concurrent systems, like WhatsApp, for example, were built on it.

00:15:54,780 --> 00:16:00,620
I will grant you that we don't want two million users per browser but knowing your application

00:16:00,620 --> 00:16:06,490
can crash and recover on the fly by itself, it's incredibly powerful when it comes to

00:16:06,490 --> 00:16:13,040
raising the bar on quality of any experience that we design or develop.

00:16:13,040 --> 00:16:18,240
The second point I wanted to make beyond the competition model is the one of philosophy.

00:16:18,240 --> 00:16:19,580
This is a briefer one.

00:16:19,580 --> 00:16:22,850
It's the last point I like to make today.

00:16:22,850 --> 00:16:30,060
And it is that most applications, if not all of them, are built on two key ideas: the idea

00:16:30,060 --> 00:16:36,720
of liveness of an application, and the idea of directness of an application.

00:16:36,720 --> 00:16:41,130
When we talk about liveness, we are talking about the ability to always respond to a user's

00:16:41,130 --> 00:16:42,130
actions.

00:16:42,130 --> 00:16:46,490
This means that whatever you do in the system, and whatever the system is doing, they will

00:16:46,490 --> 00:16:51,160
never be a complete stop or gap in the feedback loop.

00:16:51,160 --> 00:16:53,030
This is a little bit how the real world works.

00:16:53,030 --> 00:16:58,060
We are constantly sending messages, sometimes we get responses back, sometimes, we get,

00:16:58,060 --> 00:17:01,920
you know, double-tick red.

00:17:01,920 --> 00:17:05,980
But naturally, as the workload of the system increases, you will expect some performance

00:17:05,980 --> 00:17:06,980
degradation.

00:17:06,980 --> 00:17:11,520
You would expect the system to gracefully degrade without actually stopping to work

00:17:11,520 --> 00:17:12,520
entirely.

00:17:12,520 --> 00:17:17,180
Now, do you remember the last time you were a were on a website that didn't do something

00:17:17,180 --> 00:17:19,060
or anything, really, for some time.

00:17:19,060 --> 00:17:23,839
There was perhaps something taking over the main loop, and your application just sort

00:17:23,839 --> 00:17:26,970
of stopped working entirely.

00:17:26,970 --> 00:17:30,570
Really, we can do much better than that.

00:17:30,570 --> 00:17:36,050
And I think considering liveness and the actor model how they work together in isolation

00:17:36,050 --> 00:17:39,730
is foundational to recoverable errors.

00:17:39,730 --> 00:17:47,270
The second thing in the philosophy track is directness, or directness.

00:17:47,270 --> 00:17:54,120
Directness means that everything you see can be modified, whatever the user sees on screen

00:17:54,120 --> 00:18:01,030
that he can click on, whatever graphical representation of the system we have is the point that the

00:18:01,030 --> 00:18:05,130
user can begin to explore the entire system.

00:18:05,130 --> 00:18:08,730
That might be scary for some because you can right-click on something and get the actual

00:18:08,730 --> 00:18:12,760
source and not bundled or minified version of it and modified.

00:18:12,760 --> 00:18:19,100
If they can inspect the button, change the attributes to restructure the behaviour, even

00:18:19,100 --> 00:18:28,000
reconstruct a user employee to suit their needs better, persist those changes and essentially

00:18:28,000 --> 00:18:35,690
modify everything they already see, we have an application that show cases directness.

00:18:35,690 --> 00:18:41,310
Really this is a deeper philosophical question to ask to all of you here, is are we going

00:18:41,310 --> 00:18:47,610
to be building applications that model a flow that everybody sort of understands and doesn't

00:18:47,610 --> 00:18:51,810
actually empower anybody to do better than they actually are doing?

00:18:51,810 --> 00:18:57,150
Are we going to be giving them bicycles for their processes, or are we going to carry

00:18:57,150 --> 00:19:01,370
them around?

00:19:01,370 --> 00:19:04,920
So how do we get there?

00:19:04,920 --> 00:19:10,230
I would inventory ure the that most of you who haven't heard of me before so it's hard

00:19:10,230 --> 00:19:14,641
to agree with me right now that we need to rethink the complete foundations on which

00:19:14,641 --> 00:19:17,220
we build applications.

00:19:17,220 --> 00:19:20,850
After all, with all those fancy frameworks out there, backed by corporations, how could

00:19:20,850 --> 00:19:22,760
they be wrong, right?

00:19:22,760 --> 00:19:29,560
I invite you to take a first step in this world by trying out Smalltalk.

00:19:29,560 --> 00:19:32,760
Just to get a feeling of what we are missing in web development nowadays.

00:19:32,760 --> 00:19:39,010
What is it like to build user interfaces, applications, user experiences in other platforms?

00:19:39,010 --> 00:19:53,640
... and it should be more than enough to show why some of these attributes are paramount

00:19:53,640 --> 00:19:57,630
to increasing the quality of the software we build.

00:19:57,630 --> 00:20:02,300
You will find that the same properties alongside highly, highly reflective language allow for

00:20:02,300 --> 00:20:09,630
a development experience quite unlike we've seen in other mainstream languages.

00:20:09,630 --> 00:20:19,250
Seriously, most importantly, what is it we can do right now to start building web apps

00:20:19,250 --> 00:20:20,620
like it's 1972?

00:20:20,620 --> 00:20:25,950
My best answer to all of you is to start by learning about them.

00:20:25,950 --> 00:20:31,290
Look online for videos, people that put screen casts on how to build these applications with

00:20:31,290 --> 00:20:32,290
these technologies.

00:20:32,290 --> 00:20:39,400
There are languages out there from like Smalltalk, with Self Squeak, just random names.

00:20:39,400 --> 00:20:45,480
I feel like I'm reading a lot of npm packages right now!

00:20:45,480 --> 00:20:47,660
Really try to get inspired.

00:20:47,660 --> 00:20:51,790
Take a look at how they're thinking, what is it they want to give the users?

00:20:51,790 --> 00:20:53,520
Are they trying to solve the problem?

00:20:53,520 --> 00:20:55,380
Are they trying to give them a tool.

00:20:55,380 --> 00:21:01,670
Start by asking why are we treating people as cattle to put through a conversion funnel

00:21:01,670 --> 00:21:06,130
instead of empowering them to solve their problems by giving them flexible systems with

00:21:06,130 --> 00:21:11,550
powerful tools to be as efficient, and effective, at their jobs as they can be.

00:21:11,550 --> 00:21:15,410
I'm sure we are aware there are learning curves for these things.

00:21:15,410 --> 00:21:19,980
But if this community is capable of anything, it's growing and learning, so there's no good

00:21:19,980 --> 00:21:22,640
reason to stop doing what we are doing.

00:21:22,640 --> 00:21:27,040
Do not stop doing what we are doing and reconsider it.

00:21:27,040 --> 00:21:32,290
We can begin today with a fundamental philosophical shift.

00:21:32,290 --> 00:21:37,520
At source, we are working as hard as we can to implement a universal virtual machine,

00:21:37,520 --> 00:21:44,030
a Stage VM, that we can use to bring this computational model on some of the goodies

00:21:44,030 --> 00:21:48,420
that BBC seen in these languages to the WebAssembly.

00:21:48,420 --> 00:21:51,270
It's not just to target the browser but to do it through WebAssembly.

00:21:51,270 --> 00:21:58,260
It will be something we have worth demoing, but if you're interested, follow us on Twitter.

00:21:58,260 --> 00:22:05,930
And with that, I want to say if you're interested in non-profits for software, I work at one.

00:22:05,930 --> 00:22:09,630
If you're interested in the actor model or want to learn more about Smalltalk or Erlang

00:22:09,630 --> 00:22:14,380
distributed systems, come and say hi to me after the talk.

00:22:14,380 --> 00:22:26,510

YouTube URL: https://www.youtube.com/watch?v=yuk7n43xU4g


