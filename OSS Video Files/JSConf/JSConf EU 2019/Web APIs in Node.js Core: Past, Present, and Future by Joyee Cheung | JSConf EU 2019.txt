Title: Web APIs in Node.js Core: Past, Present, and Future by Joyee Cheung | JSConf EU 2019
Publication date: 2019-08-09
Playlist: JSConf EU 2019
Description: 
	Web APIs developed and standardized by the browsers have been serving client-side JavaScript applications with a wide selection of features out of the box, while Node.js have been developing another set of APIs that are today the de-facto standards for server-side JavaScript runtimes. There is now a conscious effort to bring the two worlds closer together, in particular by introducing more Web APIs into Node.js core, but itâ€™s not an easy ride - not every Web API, designed for the browsers, makes sense for Node.js.

In this talk, we are going to take a look at the story of Web APIs in Node.js core - what Node.js have implemented, what are being discussed, what are blocking more APIs from being implemented, and what we can do to improve the developer experience of the JavaScript ecosystem.

https://2019.jsconf.eu/joyee-cheung/web-apis-in-nodejs-core-past-present-and-future.html
Captions: 
	00:00:12,700 --> 00:00:17,890
You may have opinion at JSConf Europe last year.

00:00:17,890 --> 00:00:22,380
And this morning, there was a great introduction to workers.

00:00:22,380 --> 00:00:29,970
It is exciting times again for animations in serverside JavaScript run times.

00:00:29,970 --> 00:00:38,100
So, here I am to talk about our recent effort to bring a new set of APIs into Node Core.

00:00:38,100 --> 00:00:44,390
This may be an opportunity for us to really think about the JavaScript API service in

00:00:44,390 --> 00:00:50,940
the ecosystem and create a more universal developer experience across the different

00:00:50,940 --> 00:00:51,940
platforms.

00:00:51,940 --> 00:01:00,360
So, let's finish this that is right, I'm Joyee, I live in Hangzhou.

00:01:00,360 --> 00:01:08,680
I worked on Gaia, and I'm a member of the Node steering committee.

00:01:08,680 --> 00:01:13,180
On Twitter or GitHub, Joyee Cheung handle.

00:01:13,180 --> 00:01:21,220
Some of you may be aware of this effort of bringing more web APIs into Node Core.

00:01:21,220 --> 00:01:27,560
But maybe some folks are just curious because they hear things that are interesting.

00:01:27,560 --> 00:01:34,430
So, in case I am using some lingoes that only a very few people understood.

00:01:34,430 --> 00:01:42,660
So, what does it mean when we talk about bringing web APIs into Node Core? of well, we are basically

00:01:42,660 --> 00:01:48,400
talking about adding browser APIs to the Node.js runtime as buildings.

00:01:48,400 --> 00:01:52,990
So, you can run them on the server side without using npm install.

00:01:52,990 --> 00:02:00,409
So, in this talk I will try to be objective and summarize how far we have come in this

00:02:00,409 --> 00:02:04,740
journey, where we are, and where we are going.

00:02:04,740 --> 00:02:10,999
On a teeny tiny side note, Node.js is silent.

00:02:10,999 --> 00:02:17,299
So, like many others, I will try to use the correct pronunciation in this talk.

00:02:17,299 --> 00:02:24,370
Here is a mental picture of how JavaScript in the wild came to be.

00:02:24,370 --> 00:02:29,700
In the beginning before Node came along there were two kinds of APIs that came with the

00:02:29,700 --> 00:02:32,730
runtime for JavaScript developers.

00:02:32,730 --> 00:02:39,319
There were some JavaScript builtins like date, regular submissions, errors that were part

00:02:39,319 --> 00:02:40,319
of the language.

00:02:40,319 --> 00:02:46,500
It was created by system 9 and implemented by engines.

00:02:46,500 --> 00:02:48,090
There was a host API.

00:02:48,090 --> 00:02:52,019
And at that time hosts were basically just browsers.

00:02:52,019 --> 00:02:57,989
These APIs were implemented by the browsers and are more or less run by organizations

00:02:57,989 --> 00:03:01,879
like W3C.

00:03:01,879 --> 00:03:07,150
And then Node was created a started to take off on the server side.

00:03:07,150 --> 00:03:12,769
Initially it included some of the web APIs that were already present in the browsers.

00:03:12,769 --> 00:03:17,449
Or like at least some APIs that look like what you'll find in browsers.

00:03:17,449 --> 00:03:22,370
But Node also introduced several different APIs for doing certain things on the server

00:03:22,370 --> 00:03:28,389
side like instead of even target in the browsers.

00:03:28,389 --> 00:03:33,599
Because the semantics of the equivalent APIs on the browser side may not make sense for

00:03:33,599 --> 00:03:34,599
servers.

00:03:34,599 --> 00:03:41,449
Like, for example, there isn't one DOM tree in this execution context for events to bubble

00:03:41,449 --> 00:03:42,449
through on the server side.

00:03:42,449 --> 00:03:47,700
So, it does not really make sense to implement part of the event target specification in

00:03:47,700 --> 00:03:49,029
Node.

00:03:49,029 --> 00:03:57,180
So, as time goes by, browsers have developed and synthesized more APIs in the browser to

00:03:57,180 --> 00:03:58,980
empower web developers.

00:03:58,980 --> 00:04:05,769
While Node also developed several equivalent APIs on the server side with a didn't design.

00:04:05,769 --> 00:04:12,099
Because of the popularity of the Node.js runtime, these home-grown APIs gradually became the

00:04:12,099 --> 00:04:18,079
defacto factors for the server side run times.

00:04:18,079 --> 00:04:23,650
But obviously no one likes to remember two sets of APIs for doing basically the same

00:04:23,650 --> 00:04:24,650
thing.

00:04:24,650 --> 00:04:29,450
So, over the past few years people have been sending feature requests to Node to bring

00:04:29,450 --> 00:04:32,340
the two platforms closer together.

00:04:32,340 --> 00:04:37,270
For now, it usually means making the runtime more compatible with browsers.

00:04:37,270 --> 00:04:44,600
So, Node did evaluate and implement some of the requests and it is looking into more APIs

00:04:44,600 --> 00:04:45,699
from the web.

00:04:45,699 --> 00:04:52,259
So, we currently have different types of web APIs implemented in Node Core.

00:04:52,259 --> 00:04:56,400
So, some of them are more localize the with the browsers.

00:04:56,400 --> 00:05:03,229
And, for instance, we have methods in the browsers, and this is the living standard

00:05:03,229 --> 00:05:09,020
of the timers in the HTML specification.

00:05:09,020 --> 00:05:14,590
In Node we also have a set of timer APIs, that's similar, but the implementation does

00:05:14,590 --> 00:05:17,770
not strictly follow what the browsers do.

00:05:17,770 --> 00:05:25,919
For example, it returns an object while browsers usually return a number instead.

00:05:25,919 --> 00:05:32,659
The other type of web APIs we have in Node Core are the ones implemented with an existing

00:05:32,659 --> 00:05:39,740
specification in mind and behave mostly the same as the APIs that you will find in browsers.

00:05:39,740 --> 00:05:46,750
For instance, the new URL implementation in Node Core was developed specifically according

00:05:46,750 --> 00:05:49,410
to the URL standard.

00:05:49,410 --> 00:05:55,099
This means we did look at the spec test when we implemented them.

00:05:55,099 --> 00:05:56,889
And we also have tests.

00:05:56,889 --> 00:06:03,199
So, how do we know how close our implementations are to the ones in the browser?

00:06:03,199 --> 00:06:10,159
We run a subset of the web platform tests which are tests which are on browsers and

00:06:10,159 --> 00:06:12,219
other implementations.

00:06:12,219 --> 00:06:18,810
So, to see the current status of the performance in Node, you can look at the status files

00:06:18,810 --> 00:06:24,379
under tests, the status folder of the Node project.

00:06:24,379 --> 00:06:30,990
There are a few pretty selfexplanatory JSON files documenting the web standards implemented

00:06:30,990 --> 00:06:32,050
in Node.

00:06:32,050 --> 00:06:38,789
So, this one is not technically a web API addition, but I wanted to mention that there

00:06:38,789 --> 00:06:42,889
is now another type of web standards implemented in the core.

00:06:42,889 --> 00:06:49,400
We have collaborated with the what is the HTML specification and the first implementation

00:06:49,400 --> 00:06:56,889
of JSON modules has landed in the master branch as part of our experimental ECMAScript module.

00:06:56,889 --> 00:06:59,939
So, Node implemented first.

00:06:59,939 --> 00:07:09,340
So, here we have the web APIs implemented in Node Core that can be alternatives to certain

00:07:09,340 --> 00:07:12,199
home-grown Node build teams.

00:07:12,199 --> 00:07:19,380
Legacy methods under the URL and the string built in module can be replaced by the new

00:07:19,380 --> 00:07:23,620
URL and the URL search params classes.

00:07:23,620 --> 00:07:29,449
And searching and coding and decoding methods of buffer and string decoder can be replaced

00:07:29,449 --> 00:07:33,629
by text decoder and text decoder as well.

00:07:33,629 --> 00:07:39,750
And there is the performance API which, for example, can be used to replace certain timing

00:07:39,750 --> 00:07:43,349
methods in the process object.

00:07:43,349 --> 00:07:49,949
In addition, we also have some APIs that are not exactly replacements for existing Node

00:07:49,949 --> 00:07:50,949
APIs.

00:07:50,949 --> 00:07:56,590
But are similar enough in many use cases that it is reasonable to consider them as alternatives.

00:07:56,590 --> 00:08:02,159
Be sure to read the documentation if you want to rewrite your code with these APIs.

00:08:02,159 --> 00:08:08,379
For example, cue microtask can be used to cue a microtask which will be run asynchronously

00:08:08,379 --> 00:08:16,309
which will be used to replace the process if you do not have strict requirements about

00:08:16,309 --> 00:08:19,569
the timing you want your task to be run.

00:08:19,569 --> 00:08:24,889
There is also web worker which spawns threads in Node.

00:08:24,889 --> 00:08:33,440
And it may be used to replace child processes if you are only looking for a way to upload

00:08:33,440 --> 00:08:36,159
and you don't necessarily need processes.

00:08:36,159 --> 00:08:43,310
So, as of Node 12, we have several web API implementations that are now stable and can

00:08:43,310 --> 00:08:44,380
be used in production.

00:08:44,380 --> 00:08:47,420
Those are listed on the left here.

00:08:47,420 --> 00:08:49,860
And these are available as globals.

00:08:49,860 --> 00:08:54,589
So, you don't have to require a builtin to get hold of them.

00:08:54,589 --> 00:08:59,110
These are also covered by the web platform task in Node Core.

00:08:59,110 --> 00:09:01,970
There may be some additional extensions in these APIs.

00:09:01,970 --> 00:09:05,850
There's some minor unspecified behavior differences.

00:09:05,850 --> 00:09:11,310
But at least those are fairly limited, and we are aware of them.

00:09:11,310 --> 00:09:18,040
We also have a few APIs that are still experimental which means there may still be breaking changes

00:09:18,040 --> 00:09:19,820
in the future.

00:09:19,820 --> 00:09:25,339
These are currently placed under builtin modules and not on the global object yet.

00:09:25,339 --> 00:09:33,730
The current experimental web APIs that we have are workers and performance time being

00:09:33,730 --> 00:09:34,730
API.

00:09:34,730 --> 00:09:38,620
But they also differ significantly from what you would get from the browsers.

00:09:38,620 --> 00:09:42,730
And we do not run web platform tests for them yet.

00:09:42,730 --> 00:09:44,170
So, watch out.

00:09:44,170 --> 00:09:52,790
So, there is also an implementation of WebAssembly, the JavaScript API of WebAssembly that we

00:09:52,790 --> 00:09:55,440
get for free from V8.

00:09:55,440 --> 00:10:01,880
But the web API of it has not been implemented yet.

00:10:01,880 --> 00:10:08,940
Other than existing APIs, there are a bunch of others that are hunting the issue tracker.

00:10:08,940 --> 00:10:09,940
Oops.

00:10:09,940 --> 00:10:14,230
There are still under active discussion.

00:10:14,230 --> 00:10:21,180
They're web strings which are the foundation of web specifications.

00:10:21,180 --> 00:10:26,579
But then we already have Node strings in Core which are also the foundation of many existing

00:10:26,579 --> 00:10:29,070
Node Core APIs.

00:10:29,070 --> 00:10:33,970
In case you didn't know, there are many different types of strings in Node.

00:10:33,970 --> 00:10:35,389
There's string number one.

00:10:35,389 --> 00:10:37,139
Which has several issues.

00:10:37,139 --> 00:10:41,180
So, they now introduce string number two.

00:10:41,180 --> 00:10:43,700
But then they also had some issues.

00:10:43,700 --> 00:10:47,780
And then actually introduce string number three which still had issues.

00:10:47,780 --> 00:10:54,070
So, there's now a new implementation of strings called Bob which is under development for

00:10:54,070 --> 00:10:55,620
some time.

00:10:55,620 --> 00:10:58,699
And will hopefully solve all our problems.

00:10:58,699 --> 00:11:01,180
Anyway, this is not a string talk.

00:11:01,180 --> 00:11:03,760
You can read the documentation if you want to learn more about them.

00:11:03,760 --> 00:11:08,940
So, with all the strings, you can imagine how complicated it would be to bring yet another

00:11:08,940 --> 00:11:12,709
string into Node Core.

00:11:12,709 --> 00:11:14,510
And there is also Fetch.

00:11:14,510 --> 00:11:19,740
Which is probably the most requested web API in Node Core.

00:11:19,740 --> 00:11:26,330
We just had a session about it this week at the Open JS Coverage Summit in Berlin and

00:11:26,330 --> 00:11:33,870
there is now a new work in progress pull request to bring it fresh into Node Core.

00:11:33,870 --> 00:11:35,270
Yay!

00:11:35,270 --> 00:11:44,279
[ Applause ] So, we have to talk about the history of these

00:11:44,279 --> 00:11:48,269
web APIs in Node and what may be coming next.

00:11:48,269 --> 00:11:52,610
So, why exactly are we doing this?

00:11:52,610 --> 00:12:00,139
One obvious run is with a common API surface, there is less cognitive burden for developers.

00:12:00,139 --> 00:12:04,149
We could their documentation, tutorials, tooling.

00:12:04,149 --> 00:12:10,600
Instead of developing and maintaining a separate set of educational resources.

00:12:10,600 --> 00:12:14,040
This is especially important for just beginners.

00:12:14,040 --> 00:12:21,170
At the moment they have to choose between Web APIs and Node APIs when they are just

00:12:21,170 --> 00:12:23,130
getting started.

00:12:23,130 --> 00:12:29,380
With a common API service, beginners can be less distracted learning about basics.

00:12:29,380 --> 00:12:31,910
There are still differences between the two platforms.

00:12:31,910 --> 00:12:38,630
But it will be less intimidating when they already learned a bit more about these APIs.

00:12:38,630 --> 00:12:47,490
So, another reason for web APIs into Node core, we have more containers compared to

00:12:47,490 --> 00:12:49,589
more npm modules.

00:12:49,589 --> 00:12:55,170
This is open source and it's natural that contributors come and go.

00:12:55,170 --> 00:13:02,959
In Node, even when the existing maintainers of a specific builtin module shop less often,

00:13:02,959 --> 00:13:09,590
we have an open governance and an effective nomination and onboarding process to bring

00:13:09,590 --> 00:13:13,140
new contributors into the team.

00:13:13,140 --> 00:13:19,750
Compared to regular npm modules, this kind of maintenance story fits better with the

00:13:19,750 --> 00:13:24,240
Web APIs that are designed as builtins for the host environment.

00:13:24,240 --> 00:13:31,139
So, if you have been paying some attention to this topic, you may be aware that it takes

00:13:31,139 --> 00:13:37,790
an extraordinary amount of time for this API additions to be accepted into Node Core.

00:13:37,790 --> 00:13:43,480
Here I will lay out some of the reasons why there are several requests that keep showing

00:13:43,480 --> 00:13:48,589
up in the issue checker but have never really gone anywhere.

00:13:48,589 --> 00:13:54,910
So, everything I'm going to talk about later are in the context of the consensusseeking

00:13:54,910 --> 00:13:56,600
model of Node Core.

00:13:56,600 --> 00:14:04,470
So, Node Core is operated under the consensus from over 100 core collaborators.

00:14:04,470 --> 00:14:08,580
These are contributors who have write access to the repository.

00:14:08,580 --> 00:14:14,420
For every technical decision, any one of these 100 more than 100 Node Core collaborators

00:14:14,420 --> 00:14:17,089
creates an objection.

00:14:17,089 --> 00:14:22,740
If consensus cannot be reached within the collaborators, it may come down to a vote

00:14:22,740 --> 00:14:28,279
among the members of the tech committee who are a subset of the collaborators.

00:14:28,279 --> 00:14:30,790
But we usually try to avoid voting.

00:14:30,790 --> 00:14:37,220
We also take community feedback into account even if it's not from someone who has committed

00:14:37,220 --> 00:14:39,550
into Node before.

00:14:39,550 --> 00:14:47,360
So, here are the common arguments against adding Web APIs into Node Core.

00:14:47,360 --> 00:14:53,440
There is still, to some extent, a small core philosophy within Node Core.

00:14:53,440 --> 00:15:00,990
It's about providing only the basics functionalities in Core and empower users to implement user

00:15:00,990 --> 00:15:07,279
modules instead of building our own opinionated APIs that may become a compatibility or maintenance

00:15:07,279 --> 00:15:08,279
burden.

00:15:08,279 --> 00:15:12,350
This philosophy has been broken several times in the past.

00:15:12,350 --> 00:15:20,879
But at least as far as Web API goes, we are still mostly just trying to expose the existing

00:15:20,879 --> 00:15:25,920
functionalities through a different API services.

00:15:25,920 --> 00:15:31,180
This is not exactly an idea that's welcomed by everybody either.

00:15:31,180 --> 00:15:37,920
Especially when the web API may also lack features that do not make sense for browsers.

00:15:37,920 --> 00:15:39,360
Oh, yeah.

00:15:39,360 --> 00:15:44,519
And like sometimes they may be necessary for servers.

00:15:44,519 --> 00:15:53,670
So, one alternative to adding these APIs in Node is to release them as official modules.

00:15:53,670 --> 00:15:59,130
Theoretically for modules that are maintained under the Node organization, it will be possible

00:15:59,130 --> 00:16:04,620
to have a maintenance story similar to the one that Node query has.

00:16:04,620 --> 00:16:11,080
But some may also argue that it is easier to optimize if it's done in Core because it

00:16:11,080 --> 00:16:13,600
can use certain internal APIs.

00:16:13,600 --> 00:16:18,959
Or sometimes it may just not be technically possible to implement something without access

00:16:18,959 --> 00:16:20,089
to internals.

00:16:20,089 --> 00:16:26,980
A part of the philosophical concerns, apart from those, there are concerns about the design

00:16:26,980 --> 00:16:29,540
of the web APIs.

00:16:29,540 --> 00:16:33,310
They're more than just a bunch of interfaces.

00:16:33,310 --> 00:16:38,379
Behind the Design of these APIs, there is just a very different context.

00:16:38,379 --> 00:16:44,180
For instance, the browser has a very different security model.

00:16:44,180 --> 00:16:53,620
When you fetch an API endpoint, for example, at a script and you want to send credentials

00:16:53,620 --> 00:16:56,629
like cookies along with the request.

00:16:56,629 --> 00:17:04,100
Fetch as implemented according to the specifications should follow the crossorigin resource protocol

00:17:04,100 --> 00:17:11,130
and check the access control allowed header in the HTTP response before invoking that

00:17:11,130 --> 00:17:12,130
with the data.

00:17:12,130 --> 00:17:16,700
So, that scripts cannot untrusted scripts cannot steal your cookies when the server

00:17:16,700 --> 00:17:20,040
is not aware of them.

00:17:20,040 --> 00:17:25,590
Somewhere in Node, there isn't really a concept of origins.

00:17:25,590 --> 00:17:28,280
At least for now.

00:17:28,280 --> 00:17:36,530
So, these are loaded from your local file system and are just trusted by default within

00:17:36,530 --> 00:17:39,470
current security model of Node.

00:17:39,470 --> 00:17:45,630
If you perform the request using the existing HTTP request method in Node, this security

00:17:45,630 --> 00:17:48,810
policy would have to be implemented by the users.

00:17:48,810 --> 00:17:51,420
Well, if they do want them.

00:17:51,420 --> 00:17:55,350
It is not impossible to implement something like this in Node.

00:17:55,350 --> 00:18:01,680
But this may just be confusing for most users because then we'll have two conflicting security

00:18:01,680 --> 00:18:03,400
models in Node.

00:18:03,400 --> 00:18:10,700
So, when we look at the Fetch specification, the interface itself is just the tip of the

00:18:10,700 --> 00:18:12,040
iceberg.

00:18:12,040 --> 00:18:19,590
There are many implications under the surface of the API like course origin, consent and

00:18:19,590 --> 00:18:26,420
security policy, caching interop with service workers and like potential management.

00:18:26,420 --> 00:18:29,700
So, some of this may make sense for now.

00:18:29,700 --> 00:18:30,880
Some of them don't.

00:18:30,880 --> 00:18:36,430
If we only implement part of the API that we think makes sense for Node, we may confuse

00:18:36,430 --> 00:18:43,270
our users more because this will bring another kind of platform compatibility headache to

00:18:43,270 --> 00:18:44,640
everyone.

00:18:44,640 --> 00:18:47,830
There is also another type of concern.

00:18:47,830 --> 00:18:54,420
The ecosystem has come to depend on a lot of existing infrastructure in Node.

00:18:54,420 --> 00:18:59,150
And this may differ significantly from their web equivalence.

00:18:59,150 --> 00:19:05,400
For example, we have different interfaces to do stringing and to emit events.

00:19:05,400 --> 00:19:13,080
As usual, there are even more differences in the underlying design of these infrastructures.

00:19:13,080 --> 00:19:18,260
When implementing web APIs in Node, we also need to decide whether we want to introduce

00:19:18,260 --> 00:19:24,630
the web infrastructure into Node Core or base the higher-level APIs on the existing Node

00:19:24,630 --> 00:19:28,440
infrastructure or just use some instruction layer instead.

00:19:28,440 --> 00:19:34,840
We will also need to figure out the interop between these abstractions for other existing

00:19:34,840 --> 00:19:35,840
modules.

00:19:35,840 --> 00:19:38,940
And this work just takes a lot of time.

00:19:38,940 --> 00:19:42,750
So, there are a lot of open questions to answer.

00:19:42,750 --> 00:19:46,210
A lot of decisions to be made.

00:19:46,210 --> 00:19:51,370
And this, you know, just takes time in the current this is the model in Node Core.

00:19:51,370 --> 00:19:58,150
But how do new Web API actually ended up being added to Node Core these days?

00:19:58,150 --> 00:20:05,390
It usually starts with a feature request opened in the Node.js/node repository.

00:20:05,390 --> 00:20:12,520
To actually make progress on the request, someone, or some group of people, need to

00:20:12,520 --> 00:20:16,490
step up and start a prototype.

00:20:16,490 --> 00:20:18,640
They do not need to be Node collaborators.

00:20:18,640 --> 00:20:23,580
It could be anyone who are willing to invest their time in the work.

00:20:23,580 --> 00:20:26,670
Typically, they would create a fork.

00:20:26,670 --> 00:20:31,290
Either as a personal fork or as a fork under the Node organization.

00:20:31,290 --> 00:20:38,370
And they will hack together an initial invitation and then send a pull request back to the main

00:20:38,370 --> 00:20:41,720
repository against the master branch.

00:20:41,720 --> 00:20:48,641
At these stages there may be objections coming from collaborators or the community.

00:20:48,641 --> 00:20:52,150
Sometimes the proposal just gets stalled and closed.

00:20:52,150 --> 00:20:58,230
For example, this is the current status of the feature request for web crypto.

00:20:58,230 --> 00:21:03,150
Sometimes, but rarely, there are no objections.

00:21:03,150 --> 00:21:08,800
Or these objections get resolved either through discussion or through voting.

00:21:08,800 --> 00:21:14,590
Either way, someone must be interested enough in this feature to get it through the consensusseeking

00:21:14,590 --> 00:21:15,800
model.

00:21:15,800 --> 00:21:21,880
Then the initial implementation may get merged into the master branch.

00:21:21,880 --> 00:21:27,160
So, once the feature is merged in master, we'll start iterating on this.

00:21:27,160 --> 00:21:29,260
Fixing bugs, optimizing.

00:21:29,260 --> 00:21:36,890
At a certain point, depending how visible it is, we may start with the subset of web

00:21:36,890 --> 00:21:43,900
platform tests with it and collaborate with the web platform tests upstring as well as

00:21:43,900 --> 00:21:49,160
the authors to improve this spec and the test suite.

00:21:49,160 --> 00:21:55,770
It is also typical to eventually expose these interfaces to the global object.

00:21:55,770 --> 00:22:02,850
But this is depending on various complexities.

00:22:02,850 --> 00:22:08,330
At this phase, the feature is still in experimental status.

00:22:08,330 --> 00:22:14,920
Depending on the release schedule, this feature may be released to users while it is experimental.

00:22:14,920 --> 00:22:21,360
And it may get updated in the release branch with patches back ported and the master branch.

00:22:21,360 --> 00:22:27,790
So, this is the current status of web workers and the performance timing API.

00:22:27,790 --> 00:22:35,420
Eventually this feature would be, or it is supposed to be, moved out of experiment and

00:22:35,420 --> 00:22:37,530
becomes a stable feature.

00:22:37,530 --> 00:22:42,060
This is the current status of the URL and encoding implementation.

00:22:42,060 --> 00:22:45,300
So, here's a quick summary.

00:22:45,300 --> 00:22:51,790
Node query APIs have diverged from the web APIs because they were designed for very different

00:22:51,790 --> 00:22:53,120
use cases.

00:22:53,120 --> 00:22:57,830
But more and more web APIs have now been added into Node Core.

00:22:57,830 --> 00:23:03,580
We have work would through the existing web APIs in Node Core and their status.

00:23:03,580 --> 00:23:09,240
Then we looked into the challenges and the workflow of bringing for APIs into Node Core

00:23:09,240 --> 00:23:10,510
in the future.

00:23:10,510 --> 00:23:16,780
So, finally, we are starting an open standards initiative in Node to collaborate more with

00:23:16,780 --> 00:23:19,830
senders and other implementations.

00:23:19,830 --> 00:23:26,020
As we said earlier, there are many questions to answer and it takes a lot of energy to

00:23:26,020 --> 00:23:28,000
find the answers.

00:23:28,000 --> 00:23:35,880
If you are interested, please get involved.

00:23:35,880 --> 00:23:39,550
Thank you.

00:23:39,550 --> 00:23:41,380

YouTube URL: https://www.youtube.com/watch?v=ceiUozUFF3Y


