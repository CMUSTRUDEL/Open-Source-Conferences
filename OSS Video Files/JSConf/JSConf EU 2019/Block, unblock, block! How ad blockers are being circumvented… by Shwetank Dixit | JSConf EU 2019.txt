Title: Block, unblock, block! How ad blockers are being circumvented… by Shwetank Dixit | JSConf EU 2019
Publication date: 2019-06-26
Playlist: JSConf EU 2019
Description: 
	Original title: Block, unblock, block! How ad blockers are being circumvented, and how they are fighting back.

As usage of ad blocking software has risen over the years, an entire micro-industry has popped up catering to publishers - promising to get around the ad blocker and show ads to users of ad blocking software.

Some of these techniques rely on browser bugs, or limitations of browser extensions and some are just extremely creative ways to get around ad-blockers. This has forced ad blockers to come up with their own ingenious ways to counter and block the circumvented ads.

In this talk, we’ll go over some of the techniques used in this cat and mouse game between ad blocking extensions and the people who want to circumvent them. It’s a fascinating peek into a world very few people seem to know.

https://2019.jsconf.eu/shwetank-dixit/block-unblock-block-how-ad-blockers-are-being-circumvented-and-how-they-are-fighting-back.html
Captions: 
	00:00:07,149 --> 00:00:11,960
See if it works. Can someone help me in checking if it works? Yeah. Cool. So, thanks for joining.

00:00:11,960 --> 00:00:17,310
This talk is about how ad blockers are being circumvented and basically what we're doing

00:00:17,310 --> 00:00:22,430
to fight back. What are the challenges that we face on a daytoday basis and then what

00:00:22,430 --> 00:00:28,580
are we trying to do to counter them? A little bit about me. I'm product owner of

00:00:28,580 --> 00:00:35,940
anticircumvention which makes plus, and previously I was head of R&D where I basically tried

00:00:35,940 --> 00:00:41,190
to use technology for making some solutions for people with disabilities. And before this

00:00:41,190 --> 00:00:48,580
I used to work at Opera. Amongst many things also being part of the extensions platform.

00:00:48,580 --> 00:00:56,070
So, an entire micro industry has basically popped up in the last few years promising

00:00:56,070 --> 00:01:01,660
to bypass ad blockers. So, basically, they go to publishers and say that even if your

00:01:01,660 --> 00:01:08,830
site isn't on the user's ad blockers white list, we can still find a way to show user's

00:01:08,830 --> 00:01:14,020
ads. Generally, if you go to their websites, they'll say something we cover blocked ad

00:01:14,020 --> 00:01:24,110
impressions, cover your blocked ads. This is more of a problem. Back in 2016 there was

00:01:24,110 --> 00:01:32,630
a research paper that analyzed this. We found that at least 6.7% of the top five websites

00:01:32,630 --> 00:01:40,080
engage in some form of anti-ad blocking. We call it circumvention. It's at the next level,

00:01:40,080 --> 00:01:48,290
rough privacy badger, and others that are half of the ad blocking scripts in the dataset.

00:01:48,290 --> 00:01:54,530
This was back in 2016. It's believed in 2019 this has scaled even more on both sides.

00:01:54,530 --> 00:01:59,650
So, you have more people engaging in this kind of behavior. And there's also increased

00:01:59,650 --> 00:02:05,090
amount of attention from ad blockers trying to look at this particular problem as well.

00:02:05,090 --> 00:02:10,909
So, what exactly is circumvention? As I said, it's showing users ads by getting around the

00:02:10,909 --> 00:02:16,930
ad blocker despite them not being on the ad blocker whitelist. Either implicitly or explicitly.

00:02:16,930 --> 00:02:22,310
Now, for obvious reasons this is bad, yes. But there are some nonobvious reasons why

00:02:22,310 --> 00:02:27,599
it's even worse. To talk about this, or to think about this,

00:02:27,599 --> 00:02:32,750
let's look at some types of opinions towards ads and ad blockers. So, on the one hand,

00:02:32,750 --> 00:02:37,439
you have some people who are just fine with that. Either they don't know about ad blockers

00:02:37,439 --> 00:02:41,459
or they don't care. Or they, as a matter of principle, don't want it use ad blockers.

00:02:41,459 --> 00:02:46,840
I know a few people like this. On the other hand, on the other extreme, you have people,

00:02:46,840 --> 00:02:52,790
what I call the scorched Earth mentality. Where every ad is bad all the time and block

00:02:52,790 --> 00:02:56,209
each and every one of them. Don't support any online ads, don't care about publisher

00:02:56,209 --> 00:03:02,189
revenue. And this is a spectrum. There's something in between where it's like, okay, most ads

00:03:02,189 --> 00:03:08,109
are bad. But not all of them are bad. As long as someone respects me and is not doing annoying

00:03:08,109 --> 00:03:13,639
stuff, then I'm willing to give them a chance. And there's a lot of movement within the industry

00:03:13,639 --> 00:03:20,510
to somehow take these ad companies and try to make sure that they follow some kind of

00:03:20,510 --> 00:03:25,190
standards or some kind of rules for good behavior. Whether it's the coalition for better ads

00:03:25,190 --> 00:03:29,900
or whether it's acceptable ads or something. Let's take a look at one of them, called the

00:03:29,900 --> 00:03:34,290
acceptable ads criteria. No matter how big and powerful you are, no matter how much money

00:03:34,290 --> 00:03:40,669
you have, it doesn't matter. At the end, if your ad has to be as part of the acceptable

00:03:40,669 --> 00:03:45,219
ads criteria, these are things which are not allowed. And this is not an exhaustive list.

00:03:45,219 --> 00:03:50,189
These are just some of the things. Animated ads, automated ads, expanding ads, popups,

00:03:50,189 --> 00:03:56,230
pop unders, these are not allowed no matter how much influence you have. Now, it you

00:03:56,230 --> 00:04:02,290
can circumvent the ad blocker, you can do anything you want. You can make your ads as

00:04:02,290 --> 00:04:09,200
intrusive and as annoying as possible. And that's what we've seen. When it comes to circumvented

00:04:09,200 --> 00:04:14,849
ads, these are the worst of the worst on the web and make things miserable for people online.

00:04:14,849 --> 00:04:21,169
This is why circumvention is maybe worse than what might appear as obvious.

00:04:21,169 --> 00:04:26,650
Before we go, let's talk about how ad blockers work on a very, very high level. You have

00:04:26,650 --> 00:04:31,360
a web page, it has ads. You have a browser extension installed. It's an ad blocker. What

00:04:31,360 --> 00:04:39,520
it does is updates from a filter list which is a communitymaintained list of filter rules.

00:04:39,520 --> 00:04:45,639
And if that site matches that filter rule, that piece of HTML or whatever is blocked,

00:04:45,639 --> 00:04:49,740
right? And that's how you see a page without the ads.

00:04:49,740 --> 00:04:55,340
Now, generally the biggest one, communitymaintained filter list is called easy list. But when

00:04:55,340 --> 00:05:02,810
it comes to circumvention, we wanted our own, we launched the anticircumvention filter list.

00:05:02,810 --> 00:05:10,360
It's to target circumvention. We wanted higher privileges to do more complex stuff. And it

00:05:10,360 --> 00:05:16,199
allows us to react extremely fast to circumvention. If you see circumvention, we can push out

00:05:16,199 --> 00:05:25,449
a change and it's there instantly. User cans generally update this by default every 60

00:05:25,449 --> 00:05:32,680
minutes so it's regularly up to date. So, as we're moving fast towards circumvention

00:05:32,680 --> 00:05:38,050
and pushing all of these filters, CV providers, or circumvention providers, they're forced

00:05:38,050 --> 00:05:44,640
to become faster too. So much so that there's a constant war going on between the ad blocker

00:05:44,640 --> 00:05:49,250
and the CV provider. In terms of we push out a filter to block their ads, they change the

00:05:49,250 --> 00:05:53,330
content of the website. We once again push out a filter, they change things. So, this

00:05:53,330 --> 00:05:59,689
goes on and on and on. And they keep an eye on the repo, it's open source. Anyone can

00:05:59,689 --> 00:06:08,550
take a look. They constantly keep an eye. One example of this is where one of our colleagues

00:06:08,550 --> 00:06:15,390
who pushes out a lot of filters on a particular website, had he found the source code, he

00:06:15,390 --> 00:06:22,740
found his GitHub username as one of the classes. So, make going to a website and view the source

00:06:22,740 --> 00:06:27,790
code and see your name over there. And this was kind of like I think from that website's

00:06:27,790 --> 00:06:32,490
end, kind of like a wink, wink, nudge. Okay, we know what you're doing now, and this is

00:06:32,490 --> 00:06:38,639
kind of like us acknowledging you. So, this is all about filters. But, you know,

00:06:38,639 --> 00:06:43,310
it's a constant cat and mouse game between ad blockers and circumvention providers. And

00:06:43,310 --> 00:06:47,860
somewhere in between this game became more complex. So, it's not just about, you know,

00:06:47,860 --> 00:06:52,690
the cat chasing the mouse. There's just stopped and started playing chess. So, things are

00:06:52,690 --> 00:06:59,449
becoming a little bit more complex. So, now we're gonna talk about snippets. There's

00:06:59,449 --> 00:07:04,870
so, snippets are basically small JavaScript functions designed to counter one or more

00:07:04,870 --> 00:07:10,979
circumvention techniques. Generally, they're use when had just writing a normal filter

00:07:10,979 --> 00:07:15,569
isn't enough. So, you have to do something more complex. And a significant amount of

00:07:15,569 --> 00:07:21,919
the filters in our filter list is, you know, using snippets. Snippets are also called scriptlets

00:07:21,919 --> 00:07:26,590
in the block origin, for example. And if you want to take a look at the source code, everything

00:07:26,590 --> 00:07:31,880
is open source, this is the URL. Let's look at case Studies of what we have

00:07:31,880 --> 00:07:39,979
to deal with on ad blockers on a daily basis. There was this one CV provider which at no

00:07:39,979 --> 00:07:44,939
time want you it take a look at what they're doing, right? So, what we did was kind I have

00:07:44,939 --> 00:07:48,840
like a jujitsu move using their own energy against them and I'll explain about it in

00:07:48,840 --> 00:07:54,240
the following way. So, the CV provider, what they used to do

00:07:54,240 --> 00:07:59,909
was, whenever you try to go tots website and open up the developer tools, they used to

00:07:59,909 --> 00:08:05,139
detect this and basically clean up all their code, remove the ads so that you cannot even

00:08:05,139 --> 00:08:11,539
try to understand what's going on. You cannot even debug the code. Which is  when I found

00:08:11,539 --> 00:08:16,699
out I was like, what the hell is going on? So, we thought long and hard about this and

00:08:16,699 --> 00:08:21,300
then we tried to use their own things against them. We developed a snippet which tricks

00:08:21,300 --> 00:08:28,099
the developer tools into being already open, when they're not. They did the work for us.

00:08:28,099 --> 00:08:31,699
They just removed the code themselves. [ Laughter ]

00:08:31,699 --> 00:08:37,409
So, yeah. Since then they've caught on to this, so they no longer do this trick. But

00:08:37,409 --> 00:08:43,570
it was quite effective and quite funny for us as well. Another thing I want to talk about

00:08:43,570 --> 00:08:48,290
is something called the abort and property read, or abort and property write. Typically,

00:08:48,290 --> 00:08:55,351
a lot of these sites or CV provider, they want to access a particular property or write

00:08:55,351 --> 00:08:59,770
to a particular property. So, what we do is we kind of know which ones they're looking

00:08:59,770 --> 00:09:05,590
for and we made a script to kind of block the script or abort the script as soon as

00:09:05,590 --> 00:09:10,090
we detected they're trying to read a particular property or write to a particular property.

00:09:10,090 --> 00:09:15,760
This idea was originally from the block origin. Even though our implementation in AVP is different

00:09:15,760 --> 00:09:20,210
from theirs. But the overall idea was from there and we give credit over here as well

00:09:20,210 --> 00:09:25,460
as in the source code and good on them for doing some wonderful work.

00:09:25,460 --> 00:09:31,180
The next thing that I want to talk about is superfluous element stuffing. So, there are

00:09:31,180 --> 00:09:39,400
a few highprofile websites, not just one. But a few. Which try to get around the fact

00:09:39,400 --> 00:09:44,770
that, you know, you have posts and you have to mention which posts are sponsored. So,

00:09:44,770 --> 00:09:50,010
of course, if it's just the normal text, you can search for the text that says sponsored

00:09:50,010 --> 00:09:55,450
and that's the end of it. But they end up stuffing a bunch of elements. They break down

00:09:55,450 --> 00:10:01,340
the word sponsored into different parts and then they do something like this. So, make

00:10:01,340 --> 00:10:07,590
things clear a little bit more, this is what they do. So, as you can see, there's some

00:10:07,590 --> 00:10:13,890
divs, there's some spans. Some of these elements are not going to be visible. The in ends it

00:10:13,890 --> 00:10:20,190
will say ""Sponsored"" visually. But the source code says this.

00:10:20,190 --> 00:10:28,320
How do you deal with this? It's really frustrating. It bloats up the page. It doesn't help anyone.

00:10:28,320 --> 00:10:34,760
This is an approach that is gonna be there soon in AVP. We're still making a few adjustments

00:10:34,760 --> 00:10:40,850
here and there. But basically, what you did is you go through all of these child elements.

00:10:40,850 --> 00:10:45,520
And first what you have to do is remove the invisible stuff. Stuff that doesn't really

00:10:45,520 --> 00:10:51,090
stuff which is what we call decoy elements. You check for invisible text, opacity zero

00:10:51,090 --> 00:11:01,600
or font none, check for invisibility or collapse. And you ignore those. You go through the ones

00:11:01,600 --> 00:11:07,990
that are invisible and take the inner text and you concatenate them. And if it says ""Sponsored,""

00:11:07,990 --> 00:11:14,600
then you have your sponsored ads. Then you can do whatever you want with it.

00:11:14,600 --> 00:11:21,100
This is the kind of stuff that ad blockers have to deal with daily. But this was still

00:11:21,100 --> 00:11:28,480
okay. There's another example someone said that, okay, we have sponsored posts and we

00:11:28,480 --> 00:11:33,940
have to make sure that this says sponsored. So, instead of text now they have something

00:11:33,940 --> 00:11:38,870
where it's just an image. And inside the image there's text. And it's really bad for accessibility

00:11:38,870 --> 00:11:44,170
because it doesn't even have an alt attribute. They don't care about anything. Even then

00:11:44,170 --> 00:11:50,450
it will be okay to detect this, but what they also do is, you see this blank space? That's

00:11:50,450 --> 00:11:53,761
also an image. That's the same PNG image as this one. The

00:11:53,761 --> 00:11:59,010
only difference is that this is a transparent PNG so you can't see this and the other one

00:11:59,010 --> 00:12:05,290
is a nontransparent PNG so you can't see that. So, it looks a little like this, it's a data

00:12:05,290 --> 00:12:11,620
URI. And it's going to be really, really difficult to detect what's going to happen over here.

00:12:11,620 --> 00:12:18,100
And to make things even more complex, they make minor variations in the way they're serving

00:12:18,100 --> 00:12:24,920
images. In this example, this data URL for this data sponsored image can be any of the

00:12:24,920 --> 00:12:31,620
three data URIs over here. And same for the data labels. It can be any of these things.

00:12:31,620 --> 00:12:37,000
We had to look into the PNG spec and do a lot of work. Ultimately, we found out some

00:12:37,000 --> 00:12:44,170
kind of pattern which was only applicable to the visible sponsored image.

00:12:44,170 --> 00:12:47,800
And then what we did was basically it's just a matter of taking that image, converting

00:12:47,800 --> 00:12:53,910
it to a basis before, looking for that pattern and matching it. If it does, then bingo. We

00:12:53,910 --> 00:13:01,320
have our PNG ad label and then do the blocking. So, yeah, there's a lot of stuff that we have

00:13:01,320 --> 00:13:06,870
to do with, you know, circumvention on a daily basis over here.

00:13:06,870 --> 00:13:16,110
So, let's look at some gaps and challenges that we have. So, when it comes to this, we,

00:13:16,110 --> 00:13:21,190
you know, when it comes to circumvention, the effort is being fought on multiple fronts.

00:13:21,190 --> 00:13:26,610
It's not just one thing. So, we have people who are working on kind of reverse engineering

00:13:26,610 --> 00:13:30,320
what they're doing. You know, people who are hard core JavaScript people. And then filter

00:13:30,320 --> 00:13:37,520
list authors pushing out filters on an hourly basis. And then there's many other things

00:13:37,520 --> 00:13:42,110
that I will talk about in the next few slides. On the other hand, even though we have some

00:13:42,110 --> 00:13:48,900
really smart people working for us to kind of deal with this situation, they also have

00:13:48,900 --> 00:13:54,060
some really smart people on their end. And they're willing to go through many creative

00:13:54,060 --> 00:13:58,850
lengths to get around the ad blockers. It's a daily challenge to keep up with what

00:13:58,850 --> 00:14:04,620
they're trying to do. And as I said, this thing is being fought on multiple levels.

00:14:04,620 --> 00:14:13,730
Not just the technical level. Recently there is this landmark Supreme Court case. Basically,

00:14:13,730 --> 00:14:20,010
what some publishers wanted to do was to kind of argue that ad blocking itself is illegal.

00:14:20,010 --> 00:14:23,031
And they, you know, went through the lower courts, the higher courts and ultimately to

00:14:23,031 --> 00:14:28,780
the Supreme Court. And ad block plus was at the vanguard of this and basically argued

00:14:28,780 --> 00:14:34,130
that, no, it should be legal. And the Supreme Court of Germany said that, yes, it is actually

00:14:34,130 --> 00:14:39,450
legal. And, you know, it's totally okay to use ad blockers and do ad blocking.

00:14:39,450 --> 00:14:45,120
So, yeah. When it comes to fighting, you know, circumvention fighters or publishers, a lot

00:14:45,120 --> 00:14:50,190
of times what you have is not just people using technical approaches, but sometimes

00:14:50,190 --> 00:14:58,200
these kind of legal approaches as well. Gaps and challenges? So, apart from this thing,

00:14:58,200 --> 00:15:03,260
one more thing is the fact that in Firefox you have an API called the content scripts

00:15:03,260 --> 00:15:10,760
API. Which means that you can have a reliable way for the extension to  for the extension

00:15:10,760 --> 00:15:17,560
to run always before the sites code which is actually good in these circumvention things.

00:15:17,560 --> 00:15:23,180
But in Chrome, you don't have an equivalent API so there's no reliable way to guarantee

00:15:23,180 --> 00:15:28,680
that the extension scripts always runs before the site scripts. So, that's that. But there's

00:15:28,680 --> 00:15:34,930
also the Chrome manifest V3 situation where there are some significant architecture changes

00:15:34,930 --> 00:15:42,200
that might be coming which will be impacting a lot of ad blockers.

00:15:42,200 --> 00:15:47,520
Some with welcome. The background page architecture might be displaced by a service worker, which

00:15:47,520 --> 00:15:52,290
is good. There's a switch to a promisebased API rather than a callback API, which is also

00:15:52,290 --> 00:15:57,100
good. But there are some major changes to the blocking portion of the web request API.

00:15:57,100 --> 00:16:04,510
So, this is the part of the extensions API which allows you to block a network request.

00:16:04,510 --> 00:16:09,540
And this is something which is going to be  or at least announced to be changed. Instead,

00:16:09,540 --> 00:16:17,020
they'll have a declarative rulebased instead, which is I think Apple. From most of the ad

00:16:17,020 --> 00:16:21,950
blockers, if you read their opinion, it's still not in a good enough shape right now.

00:16:21,950 --> 00:16:26,340
And updating the rules from the filter list might require a new version list. Right now,

00:16:26,340 --> 00:16:30,230
if you want to update the rules in the easy list, all you have to do is update the easy

00:16:30,230 --> 00:16:39,221
list. It's there. But if you have to do this new v3 thing, if you have to update the filter

00:16:39,221 --> 00:16:44,040
list you might need to do a whole new extension release and send in the extension to the Chrome

00:16:44,040 --> 00:16:49,450
web store once again and gets moderated and released. And if you have to do this each

00:16:49,450 --> 00:16:52,630
and every day multiple times a day, it's going to be impractical.

00:16:52,630 --> 00:17:02,420
So, we worked together across ad blockers, Adblock Plus, Adblock  Adguard, Ghostery

00:17:02,420 --> 00:17:10,400
and two authors, Fanboy, as well as Malwarebytes. We gave the Chrome team feedback on one of

00:17:10,400 --> 00:17:15,770
the things we would like in v3. What are the changes we would like? It seems that the Chrome

00:17:15,770 --> 00:17:23,541
team is taking a look and kind of evaluating all of this. But at the same time, there's

00:17:23,541 --> 00:17:31,070
a question mark over here on what do they really want to do? What is the  what is the

00:17:31,070 --> 00:17:36,990
end goal when it comes to ad blocking and, you know, when it comes to v3, what exactly

00:17:36,990 --> 00:17:41,170
do they want? What is the quality that they want in terms of ad blocking?

00:17:41,170 --> 00:17:46,180
There's this performance argument that, okay, you know, we want to make these changes because

00:17:46,180 --> 00:17:50,860
we want to make things a little bit more performant. There's the security argument as well. But

00:17:50,860 --> 00:17:58,170
at the same time when it comes to ad blockers, if the ad blockers are harmed, then circumvention

00:17:58,170 --> 00:18:10,320
rises as well, and everyone is in a bad situation. Whether it comes to this, I'll just end with

00:18:10,320 --> 00:18:17,320
this recentlyreleased W3C tag ethical web principles document which is something that

00:18:17,320 --> 00:18:21,890
every browser maker  everyone should read. But especially all the browser makers should

00:18:21,890 --> 00:18:27,500
read. It says that people should be able to render content as they want. Users should

00:18:27,500 --> 00:18:32,690
be able to install stylesheets, assistive browser extensions, blockers of unwanted content

00:18:32,690 --> 00:18:38,750
or scripts of autoplayed videos. Through technology such as browser extensions, people must be

00:18:38,750 --> 00:18:45,440
able to change web pages according to their needs. So, with this  I think this is a pretty

00:18:45,440 --> 00:18:50,290
good way to end the talk. If you have any questions regarding all of this, I'm here

00:18:50,290 --> 00:19:01,580
after this talk and tomorrow as well. So, I'll just say, thank you so much.

00:19:01,580 --> 00:19:02,620

YouTube URL: https://www.youtube.com/watch?v=Vk9bPDaZELQ


