Title: Promises API in Node.js core: where we are and where we’ll get to by Joe Sepi | JSConf EU 2019
Publication date: 2019-08-12
Playlist: JSConf EU 2019
Description: 
	Currently only ‘fs’ and ‘dns’ have an experimental promise api in Node core. People LOL at node.js core modules for still using the callback pattern. I could launch into a bunch of puns here but instead I’ll just say the current status is sad but fixable. Where are we? What do we need to do? How can you help?

Footnotes: https://twitter.com/MylesBorins/status/1064925041039761409 https://twitter.com/cramforce/status/1064734275478577152

https://2019.jsconf.eu/joe-sepi/promises-api-in-nodejs-core-where-we-are-and-where-well-get-to.html
Captions: 
	00:00:10,960 --> 00:00:20,500
Thank you. Hello. How is everyone doing? I am I am actually superexcited to be here.

00:00:20,500 --> 00:00:29,719
But I've also had very little sleep so it might not show through. But, yeah. Thanks

00:00:29,719 --> 00:00:37,970
for coming. And thanks to JSConf for inviting me and thanks to everyone that has made this

00:00:37,970 --> 00:00:44,080
event really awesome. It's super great to be here.

00:00:44,080 --> 00:00:51,149
And I wanted to kind of just take a quick moment to say, like, happy anniversary, tenth

00:00:51,149 --> 00:00:57,500
year of JSConf. Superexciting, but also a little bit sad since they're gonna take a

00:00:57,500 --> 00:01:03,840
little break. But let's stay positive and be excited about the tenth year and I'm really

00:01:03,840 --> 00:01:10,370
excited to see what happens next. There are some amazing people that are involved in this

00:01:10,370 --> 00:01:16,310
whole effort. So, I look forward to seeing what they bring next. But also, happy birthday

00:01:16,310 --> 00:01:25,299
to Node. I don't know if everyone knows that this is ten years of Node. Whoo!

00:01:25,299 --> 00:01:35,240
[ Applause ] Ryan introduced Node here at JSConf in 2009.

00:01:35,240 --> 00:01:45,130
Shoutout to Jenn Shiffer, 2009. Happy belated birthday from I/O JS. I couldn't find the

00:01:45,130 --> 00:01:51,430
Node.js Tweet that said happy birthday, so I went with this one. I'm here to talk to

00:01:51,430 --> 00:01:59,579
you about promises in Node Core. The Core APIs in Node and what state they are in terms

00:01:59,579 --> 00:02:08,009
of being promisified. And I want to start with a little disclaim. I will try to make

00:02:08,009 --> 00:02:13,780
as few puns as possible. I'm going for zero. And technically I don't think this is a pun.

00:02:13,780 --> 00:02:23,750
And if you are keeping track, mark of zero. I'm Joe Sepi. My little Twitter handle's down

00:02:23,750 --> 00:02:30,000
there. You can barely see it. But if you search, you'll find me. I'm an open source engineer.

00:02:30,000 --> 00:02:37,720
I have the great fortune of being paid to work on open source exclusively pretty much.

00:02:37,720 --> 00:02:43,860
And technically and in the community and as a part of the Foundation. Why does my phone

00:02:43,860 --> 00:02:48,770
keep buzzing? I told them, leave me alone. Okay. It's not doing it. Anyway.

00:02:48,770 --> 00:02:56,250
So, I'm superfortunate and it's great. I love it. I work if a lovely company called IBM.

00:02:56,250 --> 00:03:03,290
We make typewriters and we have we have a cloud. But it's really just someone else's

00:03:03,290 --> 00:03:11,480
computer. So, don't be fooled. Not to be confused with how so, you know, IBM. This is my lovely

00:03:11,480 --> 00:03:16,050
family. [ Laughter ]

00:03:16,050 --> 00:03:21,390
This is also my lovely family. This is what I do in my spare time. That's Pat and Stella,

00:03:21,390 --> 00:03:27,560
and this is what I really enjoy doing. I play in another band, that's also Stella in the

00:03:27,560 --> 00:03:33,810
background. That's me up there as well in the back. And I occasionally play in a Misfits

00:03:33,810 --> 00:03:40,910
cover band. So, funny story. All of this was to lead up to, you know, karaoke tonight.

00:03:40,910 --> 00:03:45,700
But then I realized that was my talk is after official karaoke.

00:03:45,700 --> 00:03:52,010
However, I am always open for karaoke. So, if anyone wants to go, I'm here all week for

00:03:52,010 --> 00:04:00,840
the TC39 meetings. Ping me. My DMs are open, let's go do karaoke. Okay. Cool. So, I digress.

00:04:00,840 --> 00:04:04,810
Which I do often if you know me. I wanted to just quickly share a little bit

00:04:04,810 --> 00:04:12,880
of personal context around Promises. I've worked at a company called The New York Times

00:04:12,880 --> 00:04:18,280
a few years ago. And pretty much everywhere I've worked for the last I think almost every

00:04:18,280 --> 00:04:24,949
job I've ever had I've done some form of developer advocacy formally or informally.

00:04:24,949 --> 00:04:34,110
And I started this weekly JavaScript thing. Which I managed to do every single week. Largely

00:04:34,110 --> 00:04:40,009
sourced by internal folks. Luckily at the Times we had so many great people like Jeremy

00:04:40,009 --> 00:04:48,580
and David Nolan and Mike and lots of great people. But occasionally I would have some

00:04:48,580 --> 00:04:56,930
outside folks come in and talk to us about cool stuff. So, this is in like 2012? 2013?

00:04:56,930 --> 00:05:05,370
Tom Hughes came in, Rebecca Murphey. Spike came by and my old friend Dominik was there

00:05:05,370 --> 00:05:15,080
too. So, Tom talked about sockets and streams in Node. What's the date on this again? Yeah,

00:05:15,080 --> 00:05:20,570
2012. And so, I mean, Node was around for a few years. It was still pretty new, pretty

00:05:20,570 --> 00:05:26,949
exciting. And the hockey stick had not really happened yet. Rebecca came and we had kind

00:05:26,949 --> 00:05:31,349
of an informal discussion, you know, a group discussion. This was one of the things she

00:05:31,349 --> 00:05:36,310
talked about. Shoutout to yayQuery. I mean, does anyone

00:05:36,310 --> 00:05:44,280
know yayQuery? All right? Do some research. It's fantastic. Anyway. Spike came and talked

00:05:44,280 --> 00:05:48,330
to us about Render which was this really cool isomorphic framework where you could bring

00:05:48,330 --> 00:05:55,460
backbone app that would be frontend and backend with the same code. It was kind of revolutionary

00:05:55,460 --> 00:06:01,009
at the same time. It was really cool. And Dominik came in to talk to us about this little

00:06:01,009 --> 00:06:07,240
spec he was working on. And at the time there were a few libraries

00:06:07,240 --> 00:06:13,759
that were implementing Promises. But everybody kind of had their own flavor. And so, Dominik

00:06:13,759 --> 00:06:20,210
was working on, you know, developing a spec that would be something that the language

00:06:20,210 --> 00:06:25,659
could implement. And fortunately, Dominik continues to be amazing work in the spec space.

00:06:25,659 --> 00:06:31,220
Thank you, Dominik. It was also a great opportunity for me to say that wrote for the "New York

00:06:31,220 --> 00:06:39,150
Times," which is pretty cool. I talked about callback hell in JavaScripts. And how we're

00:06:39,150 --> 00:06:45,789
working on it using, you know, the Promises async flow.

00:06:45,789 --> 00:06:50,480
And this looks bad, but it's not actually that bad. It's fairly linear. But when you're

00:06:50,480 --> 00:06:56,210
nesting asynchronous flow in a variety of ways, they can get really, really, really

00:06:56,210 --> 00:07:01,860
painful and hard to debug. And, you know, I think it was one of the quiz questions last

00:07:01,860 --> 00:07:06,990
night, you know? Which of these async functions are gonna end first? If I'm not mistaken,

00:07:06,990 --> 00:07:12,610
almost everyone got it wrong. Then I went to work for a company called Behance

00:07:12,610 --> 00:07:18,590
which was a lot of fun. And there were really smart people there. And everything we did

00:07:18,590 --> 00:07:23,710
there was kind of Promisebased and it kind of blew my mind for a few weeks or months.

00:07:23,710 --> 00:07:32,069
But once I got a hang of it, writing almost all my code using Promises, it was just a

00:07:32,069 --> 00:07:40,990
fantastic way to control your async flow. And you may know that Ryan was here last year

00:07:40,990 --> 00:07:47,130
talking about regrets in Node. And one of the key things he talked about

00:07:47,130 --> 00:07:54,310
was not sticking with Promises. And granted, this is really early on, 2009 to 2010. He

00:07:54,310 --> 00:08:02,969
removed them in February. And as he says in the talk, you know, maybe it's okay that they

00:08:02,969 --> 00:08:09,090
didn't remain in Promises. Because not having the implementation in there allowed the community

00:08:09,090 --> 00:08:14,000
to kind of work through what might be the best implementation. There were a variety

00:08:14,000 --> 00:08:22,839
of libraries like I said before, Q and R is SVP doing their own implementations of promises.

00:08:22,839 --> 00:08:27,660
And it allowed the community to find the right abstraction and we could go from there. It's

00:08:27,660 --> 00:08:34,490
a good model that I think we've used time and again in JavaScript.

00:08:34,490 --> 00:08:42,930
But as he said, Node's many async APIs are aging pretty badly. And this is definitely

00:08:42,930 --> 00:08:49,230
a pain point in writing Node which has a lot of callbackbased APIs, obviously. Async is

00:08:49,230 --> 00:08:54,150
at the core. So, one tip, if you are really trying to get

00:08:54,150 --> 00:09:00,250
your talk accepted at a conference is to reference one of the organizers in your talk proposal.

00:09:00,250 --> 00:09:05,950
I don't know if it worked or not, but I'm here in front of you now. So, one of those

00:09:05,950 --> 00:09:15,310
references is to this Tweet. And it really was kind much funny, but sad. LOL at Node.js

00:09:15,310 --> 00:09:20,810
Core modules for still using the callback pattern. This is in November. And I have this

00:09:20,810 --> 00:09:26,580
bad habit of maybe it's a good habit, actually of finding something interesting that I would

00:09:26,580 --> 00:09:32,120
like to hear a talk about and submitting it. Whether I know a lot about it or not. But

00:09:32,120 --> 00:09:37,280
this was really interesting to me and so I submitted a talk about how, you know, where

00:09:37,280 --> 00:09:43,250
we are and where we're trying to get to. And how you may be able to help. And fortunately

00:09:43,250 --> 00:09:50,410
for me, it got accepted. Here we are. So, one of the responses is Myles who is superactive

00:09:50,410 --> 00:09:57,450
in the Node space, in a variety of spaces. I love Myles. And he shares with us that the

00:09:57,450 --> 00:10:06,660
FS API already has an experimental promise implementation. And this is one of the problems.

00:10:06,660 --> 00:10:13,900
It's not maybe the prettiest because we needed to figure out how to namespace, essentially,

00:10:13,900 --> 00:10:18,970
Promise implementations of APIs. But he points this out and people are pretty excited about

00:10:18,970 --> 00:10:24,320
it. And he shares that, you know, unfortunately there are only two that were implemented at

00:10:24,320 --> 00:10:31,391
the time in late November. And it's FS and DNS and they're experimental. Now, there are

00:10:31,391 --> 00:10:36,250
some puns on these slides. But I did not make them. So, I don't I still don't think they

00:10:36,250 --> 00:10:44,080
count. Keep it zero, Donny. And then it was also pointed out that there's a utility in

00:10:44,080 --> 00:10:54,120
the framework that you can basically wrap any callbackbased Node API using util.promisify.

00:10:54,120 --> 00:11:03,080
As stated there, it's still a little bit horrible. But it gets somewhere. Why was it taken out

00:11:03,080 --> 00:11:11,470
and then has not been just like brought back into Node? And this was something Matteo said

00:11:11,470 --> 00:11:17,620
to me a couple of days ago at the Open JS Collaborator Summit which happened just before

00:11:17,620 --> 00:11:23,110
JSConf. Is that it's an insanely hard problem that's been there forever. And that we've

00:11:23,110 --> 00:11:29,350
never really been able to find a great way to solve and find consensus on what the implementation

00:11:29,350 --> 00:11:34,720
is. For a variety of reasons. So, the big problem is that Promises were

00:11:34,720 --> 00:11:41,700
primarily designed for browsers. And so, if you have, you know, something go wrong in

00:11:41,700 --> 00:11:47,750
your promise in a browser for a user, you're only affecting one user, you know, one tab.

00:11:47,750 --> 00:11:54,450
They might not even notice. They may think why is my Facebook reply not showing up or

00:11:54,450 --> 00:11:58,820
something? And they view the console, they may see some sort of error. But it probably

00:11:58,820 --> 00:12:03,170
doesn't even affect them that much in most cases.

00:12:03,170 --> 00:12:08,520
But if something happens on the server, it could bring the whole server down. It likely

00:12:08,520 --> 00:12:15,850
will. And that affects obviously way more than one user, right? So, this is one of the

00:12:15,850 --> 00:12:22,240
big problems, the challenges that we face with Promises in Node Core. And here is an

00:12:22,240 --> 00:12:28,480
example. So, we had a session at the collab summit on this very topic and we kind of worked

00:12:28,480 --> 00:12:38,310
through some of these things as a group. And this is pretty basic pseudo code. But

00:12:38,310 --> 00:12:45,280
the sum function call will anything, you know, beyond that resolve will essentially get swallowed.

00:12:45,280 --> 00:12:52,130
And so, you could have code like this in and bunch of code after that, but if your promises

00:12:52,130 --> 00:12:57,451
resolved, all of that code is essentially it's run. But if you have any errors, you

00:12:57,451 --> 00:13:02,381
have very little I think no way of actually seeing what's going on there. Your app may

00:13:02,381 --> 00:13:11,050
come down. You may have all sorts of problems. But you may never know that that's the issue.

00:13:11,050 --> 00:13:18,500
And then this is another example. Essentially if you have a promise that never resolves

00:13:18,500 --> 00:13:24,440
and the event loop finishes all of the things that it needs to do, you just have this promise

00:13:24,440 --> 00:13:29,450
kind of hanging out out there, you don't really know that that's there because it never resolves

00:13:29,450 --> 00:13:37,010
and it's sort of invisible as well. So, essentially this is all a debugging nightmare,

00:13:37,010 --> 00:13:46,251
right? But the great news is that there has been progress. And things are happening. There's

00:13:46,251 --> 00:13:54,270
a zero cost async stack traces were shipped not that long ago. And so, that can help us

00:13:54,270 --> 00:14:00,560
get some insight into some of these issues. But here's another big one reason, right?

00:14:00,560 --> 00:14:08,420
So, how do you promise event emitters that don't resolve once? They may have multiple

00:14:08,420 --> 00:14:16,990
events coming back, right? So, what do we do there? Well, the and, you know, as I said

00:14:16,990 --> 00:14:22,510
there are multiple responses. The tricky part too is that some of the key things that the

00:14:22,510 --> 00:14:28,780
core APIs use event emitter under the hood, right? So, this is a daunting problem.

00:14:28,780 --> 00:14:37,390
Well, the good news is, events.once, that one's kind of easy to solve. And I can't remember

00:14:37,390 --> 00:14:46,610
if there's a PR. It may have already landed in Core. But events.on needs an async iterator.

00:14:46,610 --> 00:14:55,020
This talk has been evolving minutebyminute, hourbyhour. We had the collab summit Thursday

00:14:55,020 --> 00:15:00,760
and Friday of last week and this Tweet came through yesterday morning.

00:15:00,760 --> 00:15:06,550
So, I'm like continually updating these slides. And they're also my talk notes. So, if they

00:15:06,550 --> 00:15:12,580
come up and I haven't actually implemented a slide, don't blame me. I'm working on it.

00:15:12,580 --> 00:15:21,510
But the great news is, there's a PR open by Matteo to implement async iterator for the

00:15:21,510 --> 00:15:28,940
event emitter. So, stuff is happening. It's really, really exciting.

00:15:28,940 --> 00:15:35,590
Sometimes this is thrown up as a bit of a road block. And, you know, obviously we do

00:15:35,590 --> 00:15:41,200
need to be considering performance and the implementations that we're making. But I think

00:15:41,200 --> 00:15:48,380
we need to make sure we balance them between the developer experience and delivering on

00:15:48,380 --> 00:15:56,050
what is, you know, a modern interface for a modern platform, right?

00:15:56,050 --> 00:16:01,740
So, like I'm kind of getting at, the good news is that things are getting better and

00:16:01,740 --> 00:16:13,230
progress is being made on a very ongoing basis. Some APIs are already done. As I mentioned,

00:16:13,230 --> 00:16:20,260
F S and DNS, events.once. There are a few others that are already implemented. Some

00:16:20,260 --> 00:16:26,250
PRs are open like the one we just looked at for a second there. I have one I'm going to

00:16:26,250 --> 00:16:33,800
open over the next few days that's around crypto. So, things things are definitely happening.

00:16:33,800 --> 00:16:40,490
And other development is in progress. And when I say that, I mean, this is from November

00:16:40,490 --> 00:16:50,760
of that Tweet about lol at Node Core to now, there has been a real swell of activity.

00:16:50,760 --> 00:16:57,900
And especially with the Summit session that we had. Like the people are focused on this

00:16:57,900 --> 00:17:02,440
when we asked for volunteers. There were, you know, six or seven people that raised

00:17:02,440 --> 00:17:07,280
their hands. And I'm trying to think about this too from like a something of a project

00:17:07,280 --> 00:17:14,230
management standpoint and helping list out the APIs, see what state they're in. I'll

00:17:14,230 --> 00:17:21,669
be opening some issues soon to catalog what APIs still need to be done. And we can start

00:17:21,669 --> 00:17:25,539
to really track this effort in a holistic fashion.

00:17:25,539 --> 00:17:32,769
So, we try to do everything in Node out in the open. You know, through issues and comments

00:17:32,769 --> 00:17:39,730
and PRs and such. And so, this is an issue in the Summit repo for the recent Berlin Summit.

00:17:39,730 --> 00:17:46,450
And so, as you can see here, one of the topics that we talked about was unhandled rejections.

00:17:46,450 --> 00:17:52,440
So, when like I showed earlier, if you resolve your promise and you have a bunch of other

00:17:52,440 --> 00:17:58,419
stuff happen and you get exceptions, how can we handle that and surface these errors so

00:17:58,419 --> 00:18:02,490
that you know where they're coming from? We have a survey that we're working through,

00:18:02,490 --> 00:18:08,669
if people are interested in. We're also if I were able to scroll down on the screenshot,

00:18:08,669 --> 00:18:12,789
there's a link to user feedback survey that's I have been trying to get over the finish

00:18:12,789 --> 00:18:17,669
line that would be more for end users, what their experiences are, how they're managing

00:18:17,669 --> 00:18:23,870
promises and give us some more insight into what we may want to be considering in further

00:18:23,870 --> 00:18:27,470
development here. And then that bottom link there is the list

00:18:27,470 --> 00:18:31,970
of all the APIs and some notes on the current state of things.

00:18:31,970 --> 00:18:40,110
So, as mentioned, there's a survey, primarily focused for implementers as to what we think

00:18:40,110 --> 00:18:47,330
would be the best way to handle these rejections. This is that list of the APIs that I mentioned.

00:18:47,330 --> 00:18:52,669
There are only 50 of them. And a bunch of them are not relevant. Some of them are already

00:18:52,669 --> 00:18:58,030
done. But, you know, we're trying to get a real handle on the overall effort. But like

00:18:58,030 --> 00:19:03,970
I said, the ground swell within the project is real. People are focused on this. It's

00:19:03,970 --> 00:19:11,009
taken a little bit of time to get there. There are PRs open and there's work being done and

00:19:11,009 --> 00:19:16,770
it's actually kind of exciting to think we may have some more modern interfaces for those

00:19:16,770 --> 00:19:23,499
Core APIs. The kind of call to action here too is if you are at all interested, we always

00:19:23,499 --> 00:19:27,860
welcome people to get involved. I know sometimes working on Node Core can

00:19:27,860 --> 00:19:33,340
be a little daunting. But it's not that bad. You should talk to the folks involved, Joyee,

00:19:33,340 --> 00:19:43,889
Fedor, any of the folks involved would be happy to share with you. It is a strategic

00:19:43,889 --> 00:19:52,309
initiative for the technical steering committee, the TSE. Matteo is the champion. I'm trying

00:19:52,309 --> 00:20:00,190
to help along with Ruben to Ruben Bridgewater to spearhead these things. Myles is doing

00:20:00,190 --> 00:20:05,309
work. Everybody is doing work on these things. Benjamin is involved. A lot of people are

00:20:05,309 --> 00:20:10,870
focused on this now. This is exciting. This is one of those slides that I should

00:20:10,870 --> 00:20:18,309
have updated, but I haven't filed that initial PR. Once I did, there would be next to Matteo's

00:20:18,309 --> 00:20:29,299
name a link to catalog where we are. And I promise you that we will resolve this problem.

00:20:29,299 --> 00:20:35,499

YouTube URL: https://www.youtube.com/watch?v=-4p_qLYjUDc


