Title: CSS Houdini & The Future of Styling by Una Kravets | JSConf EU 2019
Publication date: 2019-06-25
Playlist: JSConf EU 2019
Description: 
	It’s almost here! Houdini — the future of CSS! This spec allows developers to write web worklets with JavaScript syntax and access the CSS Object Model for the very first time. Everything will change!

In this talk, we’ll will walk through some of the visual magic we can create by using Houdini and its various upcoming browser APIs, and go through a live demo of how we can get started with implementation. Learn about how to use Houdini and what it means for the future of web application styling.

https://2019.jsconf.eu/una-kravets/css-houdini-and-the-future-of-styling.html
Captions: 
	00:00:07,809 --> 00:00:19,390
Talking to you about Houdini, and there is so much to cover so I will go right into it.

00:00:19,390 --> 00:00:20,400
I love this meme.

00:00:20,400 --> 00:00:24,320
When I was a pup, I had one toy and it was sick.

00:00:24,320 --> 00:00:30,760
This is like writing CSS 15 years ago, where we didn't have the technology we have today,

00:00:30,760 --> 00:00:35,550
we have custom properties, there is so much at our hands, and it makes writing styles

00:00:35,550 --> 00:00:38,150
for the web such a joy.

00:00:38,150 --> 00:00:43,720
CSS still has its downfalls and challenges, right?

00:00:43,720 --> 00:00:45,510
Let's talk about form styling.

00:00:45,510 --> 00:00:46,510
Why?

00:00:46,510 --> 00:00:51,040
Why can't we style forms in 2019?

00:00:51,040 --> 00:00:59,560
If you're familiar with W3 schools, an education site that shows you basic ways to write web

00:00:59,560 --> 00:01:04,330
for the code, and so I saw this custom dropdown there and I thought, ""Oh, cool.""

00:01:04,330 --> 00:01:11,790
The steps we've got is we've got HTML, we are adding CSS - fine - there's like some

00:01:11,790 --> 00:01:19,560
studio elements there, and then I scroll down and it's [sound problem].

00:01:19,560 --> 00:01:26,000
Still today, it's frustrating because I like to separate my logic and my styling.

00:01:26,000 --> 00:01:28,250
You can't do it on the web.

00:01:28,250 --> 00:01:33,310
We can make gradients on the web, and they're cool, dynamic, you can create a comma-separated

00:01:33,310 --> 00:01:37,100
list of values - live on page - you can adjust these things.

00:01:37,100 --> 00:01:38,650
You can layer them.

00:01:38,650 --> 00:01:45,140
So it becomes this really great tool when you're creating filter effects on images.

00:01:45,140 --> 00:01:48,759
I using this on the web.

00:01:48,759 --> 00:01:54,500
You can't read ... gradients yet.

00:01:54,500 --> 00:01:58,220
The top point, they go round the centre and to to that point.

00:01:58,220 --> 00:02:05,040
If we wanted to create ... if we wanted to create a continuous gradient we would create

00:02:05,040 --> 00:02:09,090
the colour for the first and last value and create it there.

00:02:09,090 --> 00:02:17,049
If we look at ""can I use"", we can see that the gradients are not well stored, so we can't

00:02:17,049 --> 00:02:20,090
use those on the web.

00:02:20,090 --> 00:02:24,180
Gradients are something that doesn't currently exist in CSS.

00:02:24,180 --> 00:02:28,709
Right here, I have an example where I have a div, and, when I hover it, I'm converting

00:02:28,709 --> 00:02:30,420
from red to blue.

00:02:30,420 --> 00:02:32,170
So that is what I'm trying to do inside this gradient.

00:02:32,170 --> 00:02:37,180
I'm setting it to go to right and from red to blue, and then transferring to deep pink.

00:02:37,180 --> 00:02:42,730
When I hover on this gradient, this div, it's not able to transition that value, and we

00:02:42,730 --> 00:02:44,379
will get into it a little bit later.

00:02:44,379 --> 00:02:46,700
Not able to do it on the web.

00:02:46,700 --> 00:02:49,650
Custom borders are something that you can kind of on the web.

00:02:49,650 --> 00:02:54,139
We have a border digital property which is cool but it's limited.

00:02:54,139 --> 00:02:58,569
If you wanted to do something like a corner shape which would mask your image as well

00:02:58,569 --> 00:03:03,969
as apply a border shape on that element, this is not something that you can do, and this

00:03:03,969 --> 00:03:12,279
is 200013 spec who tried to push this forward and it never really got into browsers - sad.

00:03:12,279 --> 00:03:29,480
But there's Houdini?

00:03:29,480 --> 00:03:33,079
If you haven't heard of Houdini, it's really, really cool.

00:03:33,079 --> 00:03:38,309
It's basically a low-level API-for-CSS, and more accurately, it's a series of APIs that

00:03:38,309 --> 00:03:43,549
give developers access to the CSS object model, and it allows us to tell the browser how we

00:03:43,549 --> 00:03:45,650
want it to read our CSS code.

00:03:45,650 --> 00:03:48,010
So, this is kind of what happens now?

00:03:48,010 --> 00:03:52,770
If you want to style something on the web that doesn't currently exist as a CSS property

00:03:52,770 --> 00:03:57,819
and value pair that you can write in CSS, you have to write a JavaScript polyfill for

00:03:57,819 --> 00:03:58,819
it.

00:03:58,819 --> 00:04:06,029
So, your browser goes through this parser set and reads the DOM and the CSS object model,

00:04:06,029 --> 00:04:08,979
and then you have to do that all over again with the JavaScript polyfill because you're

00:04:08,979 --> 00:04:12,430
reapplying the styles to the page after it's already loaded ones.

00:04:12,430 --> 00:04:20,090
But with Houdini we can apply the styles directly to the CSS, so we have so much power as developers

00:04:20,090 --> 00:04:25,509
now, because we can tell the browser at that CSS step what it should be doing when it is

00:04:25,509 --> 00:04:27,229
reading our code.

00:04:27,229 --> 00:04:28,590
Exciting.

00:04:28,590 --> 00:04:33,919
So while it takes a while for specs to get implemented in browsers, that is like this

00:04:33,919 --> 00:04:37,730
big dog here taking its time, that's a good thing, we don't want the browser to implement

00:04:37,730 --> 00:04:38,800
anything.

00:04:38,800 --> 00:04:43,259
If you wanted a feature that doesn't currently exist, you can be like this pupper zooming

00:04:43,259 --> 00:04:49,830
by creating your own tech, CSS polyfills, creating JavaScript to do it, and it exists

00:04:49,830 --> 00:04:50,889
in the browser.

00:04:50,889 --> 00:04:51,889
Pretty cool.

00:04:51,889 --> 00:04:59,331
The best resource for this right now is Houdini ready yet - we have all the browsers agreed

00:04:59,331 --> 00:05:04,940
that implement the spec, as well as the W3 specs you can go and read.

00:05:04,940 --> 00:05:09,139
The state of ""can I use?

00:05:09,139 --> 00:05:12,240
"" For Houdini.

00:05:12,240 --> 00:05:14,620
It's very much a work in progress.

00:05:14,620 --> 00:05:20,710
The most supported APIs are the paint API and the typed object model, and so because

00:05:20,710 --> 00:05:24,009
we have limited time, that's what we are going to focus on here today.

00:05:24,009 --> 00:05:26,780
So let's start with the typed object model.

00:05:26,780 --> 00:05:32,319
The typed object model allows us to have more semantic CSS parsing.

00:05:32,319 --> 00:05:34,189
What does that mean?

00:05:34,189 --> 00:05:41,659
Right now, it has to go through the whole string-based Regex parsing, and that is slow,

00:05:41,659 --> 00:05:48,180
it's looking for an ID, property, class, or a specific key word in that string which is

00:05:48,180 --> 00:05:54,699
like the dot here, and the string from that dot until that open curly brace, then looking

00:05:54,699 --> 00:06:01,509
for a property value, a colon, a value, a unit, a semicolon, making sure those are accurate

00:06:01,509 --> 00:06:04,080
values and they work properly.

00:06:04,080 --> 00:06:09,590
This can get really messy really fast, and it's just so much slower than having some

00:06:09,590 --> 00:06:20,590
structured data, so the typed object model supplies that structured model.

00:06:20,590 --> 00:06:26,319
I get a value like height and we return a CSS unit value which is this object that returns

00:06:26,319 --> 00:06:31,800
a value and a unit, so this is a lot more semantic and so therefore it makes it faster

00:06:31,800 --> 00:06:33,340
to read through that CSS.

00:06:33,340 --> 00:06:38,009
And so here I'm doing this, I have a box, it has width and height.

00:06:38,009 --> 00:06:43,740
We can get properties from computer style-out and you can set properties, so do attributes,

00:06:43,740 --> 00:06:49,889
property, and then I could specify css.number giving it a type, and then it's going to update

00:06:49,889 --> 00:06:54,199
and a that, and, when we do that again, we see we're getting our parsing.

00:06:54,199 --> 00:06:59,840
If you look at this in DevTools, you will get the CSS unit value object where you have

00:06:59,840 --> 00:07:03,560
that unit and value separated out.

00:07:03,560 --> 00:07:11,960
That leads me to the property and the values API.

00:07:11,960 --> 00:07:15,249
Have any of you used custom properties right now?

00:07:15,249 --> 00:07:18,370
That's 30 per cent of you.

00:07:18,370 --> 00:07:24,259
Custom properties are really great because they're actual dynamic CSS variables that

00:07:24,259 --> 00:07:25,979
we have not browser.

00:07:25,979 --> 00:07:30,490
Unlike Sass where you have a static variable that you're using which is going to port out

00:07:30,490 --> 00:07:35,210
to some value, here, you can actually update these in JavaScript.

00:07:35,210 --> 00:07:39,050
You can separate your logic and your styling again because you can keep the style part

00:07:39,050 --> 00:07:43,599
in CSS and do the logic to change that value inside of your JavaScript, and then pass it,

00:07:43,599 --> 00:07:49,680
and super dynamic and cool, so you get a name and a value with your basic custom properties,

00:07:49,680 --> 00:07:53,270
but with the properties and values API, you get so much more than that.

00:07:53,270 --> 00:07:59,080
You can specify a name for it, a syntax for it, and an initial value definition, and,

00:07:59,080 --> 00:08:01,449
if it isn't going to inherit from its parent.

00:08:01,449 --> 00:08:05,130
Let's look at the example again of the gradient.

00:08:05,130 --> 00:08:10,180
We have our box, and I have a colour, so it is custom property, and I'm transitioning

00:08:10,180 --> 00:08:11,199
from that colour.

00:08:11,199 --> 00:08:15,199
I'm specifying the transition's going to be one second long, and on hover, it's going

00:08:15,199 --> 00:08:16,389
to turn blue.

00:08:16,389 --> 00:08:20,160
So, again, still not getting an interaction here.

00:08:20,160 --> 00:08:22,740
It should take one second to register that colour.

00:08:22,740 --> 00:08:27,090
We can call this whatever we want.

00:08:27,090 --> 00:08:31,069
I have colour-stop, the syntax is colour, and specifying that syntax.

00:08:31,069 --> 00:08:35,279
I'm not going to inherit the initial value which will be transparent.

00:08:35,279 --> 00:08:41,510
The as I update this to colour-stop, update this value here, also to colour-stop, and

00:08:41,510 --> 00:08:46,480
I update the transition to colour-stop, if I create the hover to match all of those and

00:08:46,480 --> 00:08:50,829
run this, it's going to slowly fade into the blue.

00:08:50,829 --> 00:08:51,829
[Applause].

00:08:51,829 --> 00:08:54,160
I love visual demos!

00:08:54,160 --> 00:08:56,399
It's just like, wow.

00:08:56,399 --> 00:09:01,160
I typed one thing, registered property, there's so much meeting behind that property now.

00:09:01,160 --> 00:09:03,180
It's not just a string value.

00:09:03,180 --> 00:09:06,790
There's actual meaning for the browser to understand interpolation between to these

00:09:06,790 --> 00:09:09,560
these two values.

00:09:09,560 --> 00:09:16,829
The other thing about custom properties is that you can set initial, fallback values.

00:09:16,829 --> 00:09:20,880
I have to registered properties, colour primary and secondary.

00:09:20,880 --> 00:09:27,560
If you look at the CSS, we are transitioning from colour primary to secondary on hover.

00:09:27,560 --> 00:09:33,570
We are getting that one-second transition, if you notice, I'm not actually specifying

00:09:33,570 --> 00:09:37,340
that custom property, that variable inside of the CSS here.

00:09:37,340 --> 00:09:42,500
I don't have to do that because I've registered it in the CSS registered property.

00:09:42,500 --> 00:09:43,880
I can update colour primary.

00:09:43,880 --> 00:09:49,990
I can do colour primary red, and then if I run this, it will update to red.

00:09:49,990 --> 00:09:50,990
There's no problem there.

00:09:50,990 --> 00:09:52,050
We can always update it.

00:09:52,050 --> 00:09:57,480
If I don't have a fall here, if I have a false value like 23, it will always fall back to

00:09:57,480 --> 00:09:58,980
the blue-violet.

00:09:58,980 --> 00:10:05,500
Let me show you what happens if I don't register a custom property, there's an invalid colour

00:10:05,500 --> 00:10:11,080
in the background, I run this, it falls back to transparent.

00:10:11,080 --> 00:10:16,300
The best thing about CSS is when there is a false line, it doesn't crash your programme,

00:10:16,300 --> 00:10:20,070
it just ignores that line so you can continue living your life.

00:10:20,070 --> 00:10:26,410
But it's something we can now look forward to with this sort of air channelling and type-checking

00:10:26,410 --> 00:10:28,120
for CSS.

00:10:28,120 --> 00:10:32,970
And so this is kind of like having typed CSS variables, and I think that's great for CSS

00:10:32,970 --> 00:10:38,190
systems, design systems, making sure that everything is super cohesive, and aligned

00:10:38,190 --> 00:10:41,670
when you're building for the web with CSS, with your team.

00:10:41,670 --> 00:10:45,410
So, now I want to talk about the paint worklet.

00:10:45,410 --> 00:10:49,621
If you've heard of service workers and web workers kind of works the same in that it

00:10:49,621 --> 00:10:58,370
is a layer between your - it pre renders assets and push notifications because they live in

00:10:58,370 --> 00:10:59,410
the in-between.

00:10:59,410 --> 00:11:07,769
When you open the website, you register the worklet on your website, so you can always

00:11:07,769 --> 00:11:10,410
access that, even if your network is offline.

00:11:10,410 --> 00:11:19,720
So, if we are registering our worklets, working with the paints worklets, what we do in JavaScript

00:11:19,720 --> 00:11:21,459
is register that type.

00:11:21,459 --> 00:11:24,030
We give it a name.

00:11:24,030 --> 00:11:25,171
I'm using a class here here.

00:11:25,171 --> 00:11:26,630
You can put it in there.

00:11:26,630 --> 00:11:34,410
In HTML, we need to ... to add it to the page, and then you call what your naming register

00:11:34,410 --> 00:11:39,079
paint, and then the CSS, you would specify that work clip by name, so I called it ""fun""

00:11:39,079 --> 00:11:43,490
in this example and I would be able to background-paint fun.

00:11:43,490 --> 00:11:47,240
Is this JavaScript and CSS?

00:11:47,240 --> 00:11:48,260
Yes.

00:11:48,260 --> 00:11:51,920
So let's take a look at this little example that I made.

00:11:51,920 --> 00:11:55,940
It's just some text, and what I'm doing is I wrote this little Rainbow worklet where

00:11:55,940 --> 00:12:01,340
I'm going top left to bottom right and adjusting the size with these pixel values.

00:12:01,340 --> 00:12:09,420
Then in the HTML, I'm adding the worklet to the CSS, and then the style, the way that

00:12:09,420 --> 00:12:11,930
I get to use it is by setting the background image.

00:12:11,930 --> 00:12:15,040
You can set a border image, use this in any way you want.

00:12:15,040 --> 00:12:19,570
It's one line of code to get all of those effects in CSS.

00:12:19,570 --> 00:12:21,060
Separate those concerns.

00:12:21,060 --> 00:12:23,149
Here's our conig gradient again.

00:12:23,149 --> 00:12:24,710
You can write Polly files.

00:12:24,710 --> 00:12:25,710
Right now, there is a polyfill.

00:12:25,710 --> 00:12:35,399
This polyfill where writing out this worklet to allow for gradients, and you can send in

00:12:35,399 --> 00:12:37,690
context geometry, properties, and argument.

00:12:37,690 --> 00:12:44,980
So sending in those arguments allows us to in the CSS type in here ""red"" and then we

00:12:44,980 --> 00:12:48,920
can run this, and, in the browser, we get what we saw before with that gradient is now

00:12:48,920 --> 00:12:50,190
a full circle.

00:12:50,190 --> 00:12:51,600
This is pretty cool.

00:12:51,600 --> 00:12:56,670
The feature syntax is going to allow for us this use these in variables where we can do

00:12:56,670 --> 00:13:01,699
background gradient and right now we have the syntax.

00:13:01,699 --> 00:13:05,620
Again, this is experimental.

00:13:05,620 --> 00:13:07,779
This is like extending the web.

00:13:07,779 --> 00:13:08,779
That's really cool.

00:13:08,779 --> 00:13:13,009
You're extending the web with CSS.

00:13:13,009 --> 00:13:15,330
I work on material design now.

00:13:15,330 --> 00:13:20,820
We provide a platform for developers to create their own customised themes, and that includes

00:13:20,820 --> 00:13:26,440
colour, topic, and also includes shape, and this example is one of the samples called

00:13:26,440 --> 00:13:30,000
Shine, where we have this angular shape.

00:13:30,000 --> 00:13:36,050
These are the two things that we have as shape sort of specs, and so rounded corner is one,

00:13:36,050 --> 00:13:39,699
and you can definitely do that on the web, but a cut corner is not something that we

00:13:39,699 --> 00:13:40,699
can do on the web yet.

00:13:40,699 --> 00:13:45,899
Like I showed earlier, that corner shape spec never really got put into the browser.

00:13:45,899 --> 00:13:48,639
But, we can sort of work around this.

00:13:48,639 --> 00:13:56,069
You can create a CSS Houdini paint worklet, and this is one that I made to just specify

00:13:56,069 --> 00:14:01,889
the different corner radiuses, paint style to be outlined, or filled, and you can just

00:14:01,889 --> 00:14:04,950
start really to play and get a really good feel for this.

00:14:04,950 --> 00:14:07,199
You can use masking as well as background.

00:14:07,199 --> 00:14:09,460
Remember the examples I was using showing background.

00:14:09,460 --> 00:14:17,190
When you use WebKit mask image, you specify what you're doing at your mask for any elements,

00:14:17,190 --> 00:14:23,050
and then I combine these techniques to recreate these materials buttons but with the notches

00:14:23,050 --> 00:14:24,440
here.

00:14:24,440 --> 00:14:28,779
These are the original ones, and a big challenge here was containing that ripple effect when

00:14:28,779 --> 00:14:36,529
you hovered, so I used a mixture of background and mask when I was creating in notch corners

00:14:36,529 --> 00:14:42,560
worklet and applying it in the CSS to these outlined buttons and filled buttons.

00:14:42,560 --> 00:14:47,870
So you could take existing infrastructure and progressively enhance it because you can

00:14:47,870 --> 00:14:53,550
use that support, if you're using background, it will just fall back to the previous line

00:14:53,550 --> 00:14:55,470
in CSS.

00:14:55,470 --> 00:14:58,529
And this is the way that we can integrate it into our UIs now.

00:14:58,529 --> 00:15:00,850
So, let's make some magic.

00:15:00,850 --> 00:15:02,790
I'm going to do a live demo here.

00:15:02,790 --> 00:15:04,649
Wish me luck.

00:15:04,649 --> 00:15:12,750
Warnings: this is experimental, so have web platform features enabled.

00:15:12,750 --> 00:15:22,670
Also, you must be using ACDVS or localhost because this lives outside of your page and

00:15:22,670 --> 00:15:24,709
it's for security.

00:15:24,709 --> 00:15:26,769
I hope this works.

00:15:26,769 --> 00:15:30,209
So, let's start with a canvas.

00:15:30,209 --> 00:15:36,329
I have a canvas here that I've set up, and so it's just giving it a width and height.

00:15:36,329 --> 00:15:39,370
I'm going to zoom in here so you could see this a little better.

00:15:39,370 --> 00:15:44,980
Inside of my JavaScript I'm having a random function, setting up the canvas, giving parameters

00:15:44,980 --> 00:15:52,350
for a sparkle, height, width of weight, and position.

00:15:52,350 --> 00:15:56,300
It's going to randomise the height, width, and weight that have, randomise the position

00:15:56,300 --> 00:15:57,300
of that.

00:15:57,300 --> 00:16:00,500
We will set the colour, and then we are going to paint this.

00:16:00,500 --> 00:16:05,519
That's why every time I refresh, I'm going to get a random sparkle.

00:16:05,519 --> 00:16:08,620
We don't want one sparkle, we want probably multiple sparkles.

00:16:08,620 --> 00:16:10,980
Let's set 30 sparkles.

00:16:10,980 --> 00:16:15,920
We are creating a loop here to loop through and apply the sparkles.

00:16:15,920 --> 00:16:20,389
Once this reloads, we have all the sparkles - 30, that's a good start.

00:16:20,389 --> 00:16:28,329
I feel like this colour yellow is a bit too similar here, so we can use HSL values to

00:16:28,329 --> 00:16:33,779
get a really saturated value, so I'm doing a random between 90 and 100.

00:16:33,779 --> 00:16:39,699
Hue is going to be the yellow/orange range, and light is the thing that changes the most,

00:16:39,699 --> 00:16:46,350
so I can get rid of our colour, so we have this canvas, but I want to convert that now

00:16:46,350 --> 00:16:49,069
into a paint worklet, right?

00:16:49,069 --> 00:16:51,660
Let's get rid of all this.

00:16:51,660 --> 00:16:59,089
Let's use something we're all familiar with, and this is .... this is the Codepen for the

00:16:59,089 --> 00:17:00,449
X?

00:17:00,449 --> 00:17:04,360
Did you know you can change it?

00:17:04,360 --> 00:17:08,120
The main thing here is that the tiles keep their positions.

00:17:08,120 --> 00:17:11,580
I will show you what that looks like here.

00:17:11,580 --> 00:17:18,450
If I zoom out all the way, you can see that this is the layout for the X up there, and

00:17:18,450 --> 00:17:22,750
we're going to try to make some Houdini magic work in that X.

00:17:22,750 --> 00:17:28,510
So, what we need to do now since BBC got rid of the canvas in the HTML is get rid of the

00:17:28,510 --> 00:17:32,620
canvas in the JavaScript since we're not using in stuff any more, and we have to start writing

00:17:32,620 --> 00:17:33,800
a worklet.

00:17:33,800 --> 00:17:34,810
Let's do that.

00:17:34,810 --> 00:17:44,510
Let's do a type-check so we can see if type of register paint is not equal to unde fined,

00:17:44,510 --> 00:17:50,420
then we will create a class, create a class call ""sparkle"".

00:17:50,420 --> 00:17:52,530
And then inside of that, we want to use paint.

00:17:52,530 --> 00:18:01,120
We're going to get the context and the size of the div that we want to apply this to.

00:18:01,120 --> 00:18:02,193
From there, we want to put this in here.

00:18:02,193 --> 00:18:08,530
All of this we did, we created those sparkles and place those inside here.

00:18:08,530 --> 00:18:14,050
Now I have the beginning of a worklet but we have to register it.

00:18:14,050 --> 00:18:17,830
Let's go right outside of our statement where we are checking to see if this is even supported,

00:18:17,830 --> 00:18:24,410
and we will do a register paint, and we will do sparkles as the name of it, and we have

00:18:24,410 --> 00:18:26,540
to call that class sparkles.

00:18:26,540 --> 00:18:30,520
So what we have to do now is make sure that we are getting the size and height, not from

00:18:30,520 --> 00:18:35,000
the canvas but from the element, so we have to update that to size.

00:18:35,000 --> 00:18:38,660
We have to to make sure that we are going in here calling this JavaScript code, and

00:18:38,660 --> 00:18:41,650
the way to do that inside of Codepen is use your pen ID.

00:18:41,650 --> 00:18:44,910
It's a little hackie.

00:18:44,910 --> 00:18:46,960
I have to register this script.

00:18:46,960 --> 00:18:54,790
I'm going to do css.paint.worklet.module.

00:18:54,790 --> 00:18:58,720
It's going to listening to this file in theory.

00:18:58,720 --> 00:19:01,220
I'm going to save that.

00:19:01,220 --> 00:19:06,460
Inside of our tile which is every single one of the tiles, I'm going to do a background

00:19:06,460 --> 00:19:10,780
paint sparkles.

00:19:10,780 --> 00:19:14,920
And if this all worked out, we will see some sparkles.

00:19:14,920 --> 00:19:17,650
Sometimes, I have to refresh for it to work.

00:19:17,650 --> 00:19:18,880
Oh, no!

00:19:18,880 --> 00:19:20,740
What happened?

00:19:20,740 --> 00:19:22,520
Okay.

00:19:22,520 --> 00:19:23,520
Let's go through this.

00:19:23,520 --> 00:19:25,320
All right, registered our worklet.

00:19:25,320 --> 00:19:26,810
It has a name.

00:19:26,810 --> 00:19:33,010
We are adding it to the HTML with this script.

00:19:33,010 --> 00:19:37,630
The CSS paint worklet.

00:19:37,630 --> 00:19:48,890
And we are applying this to our tile with the name that we called for the time.

00:19:48,890 --> 00:19:58,050
Well, this is not working, so, we're just going to do this inside of another little

00:19:58,050 --> 00:19:59,430
starter.

00:19:59,430 --> 00:20:03,350
I will show you what this looks like.

00:20:03,350 --> 00:20:04,350
We have a back-up!

00:20:04,350 --> 00:20:05,350
[Applause].

00:20:05,350 --> 00:20:12,030
Darn, I wished that worked so much.

00:20:12,030 --> 00:20:16,070
That would have been so cool!

00:20:16,070 --> 00:20:17,070
[Applause].

00:20:17,070 --> 00:20:18,070
So you can play with these slides.

00:20:18,070 --> 00:20:21,130
You can play with that Codepen which is really, really cool.

00:20:21,130 --> 00:20:28,670
What I did next was I got these input properties, so I'm pulling in the input properties from

00:20:28,670 --> 00:20:35,440
our document here where I'm creating a custom property called ""sparkle num"" I'm animating

00:20:35,440 --> 00:20:40,640
a key frame called sparkle, and I'm pulling in the values and updating those and using

00:20:40,640 --> 00:20:42,070
that as my animation.

00:20:42,070 --> 00:20:46,071
Since this is not a registered property, it's not going to interplate those values that

00:20:46,071 --> 00:20:51,060
you want to - it's not going to return to that every time.

00:20:51,060 --> 00:20:52,850
A thing I learned yesterday.

00:20:52,850 --> 00:20:58,650
So that is what that looks like, but remember when I mentioned that this was truly JavaScript

00:20:58,650 --> 00:21:00,190
in CSS?

00:21:00,190 --> 00:21:11,820
So who created houdini.rocks, he created this worklet that just evaluates a custom property,

00:21:11,820 --> 00:21:18,570
so you can basically in your CSS put all of this code and then you can apply the background

00:21:18,570 --> 00:21:21,920
paint inside of your CSS.

00:21:21,920 --> 00:21:25,420
It's super, super meta, but you're writing your JavaScript and I thought you might like

00:21:25,420 --> 00:21:26,420
to apply it.

00:21:26,420 --> 00:21:29,470
I thought you might like that.

00:21:29,470 --> 00:21:31,840
[Applause].

00:21:31,840 --> 00:21:36,570
Thank you.

00:21:36,570 --> 00:21:45,990
So there are some caveats to this approach, and that is that it is semicolon sensitive.

00:21:45,990 --> 00:21:51,530
Also, your variables must be there in instantiation, they're not dynamic, so you can't get those

00:21:51,530 --> 00:21:54,040
static properties and apply those here.

00:21:54,040 --> 00:21:55,520
You have to have it all in one place.

00:21:55,520 --> 00:21:59,760
I would love it if that could be its own custom property that you include inside of your elements

00:21:59,760 --> 00:22:01,150
but you can't do that right now.

00:22:01,150 --> 00:22:05,850
You have to make sure that it is all in one place if you do that method.

00:22:05,850 --> 00:22:07,791
Now I want to talk about something extra.

00:22:07,791 --> 00:22:17,200
Extra.css is a little library I've been working on that

00:22:17,200 --> 00:22:20,700
allows you to use Houdini today in your own applications.

00:22:20,700 --> 00:22:25,580
This is a CSS Houdini paint API library for to make the making your sites a little more

00:22:25,580 --> 00:22:31,190
Extra.

00:22:31,190 --> 00:22:35,760
What we can do here is play with all of these different things like the sparkle demo, you

00:22:35,760 --> 00:22:41,090
can change the number of sparkles.. you can make them bigger by changing the width variants,

00:22:41,090 --> 00:22:46,500
the height variants, the weight to make them thicker, you can create this scallop border,

00:22:46,500 --> 00:22:52,940
give it any colour you want, you can play with the weight of that, so you can adjust

00:22:52,940 --> 00:22:54,330
that here.

00:22:54,330 --> 00:22:57,360
Why have one underline when you can have many underlines?

00:22:57,360 --> 00:22:59,870
So, we have super underline.

00:22:59,870 --> 00:23:04,910
You can adjust the number of underlines, the spread of those underlines, the weight of

00:23:04,910 --> 00:23:09,060
those underlines, and just have a little fun playing with that.

00:23:09,060 --> 00:23:14,950
There's a cross-out, so you can adjust this colour too, you can change the weights of

00:23:14,950 --> 00:23:19,450
this cross-out, and then confetti, because who doesn't like confetti?

00:23:19,450 --> 00:23:22,840
Confetti is a fun little thing to add to any website.

00:23:22,840 --> 00:23:26,170
Here, you have control over what that looks like.

00:23:26,170 --> 00:23:33,070
The way to use it is you can use this right now by setting it up with one CDN listening,

00:23:33,070 --> 00:23:36,860
so inside of the HTML, this example, I'm going to close that result.

00:23:36,860 --> 00:23:43,280
What I'm doing is we're just including the worklet as a file, shout-out to my first contributor

00:23:43,280 --> 00:23:47,040
working on this yesterday.

00:23:47,040 --> 00:23:48,040
Yay.

00:23:48,040 --> 00:23:52,180
So here you could include your script, and then inside of your CSS, you can set properties

00:23:52,180 --> 00:23:56,400
if you want to override them, or you can just use background paint, and it will take the

00:23:56,400 --> 00:23:59,240
default value as I showed you before.

00:23:59,240 --> 00:24:05,900
With one line of code, one script inclusion, you could have Houdini working right now in

00:24:05,900 --> 00:24:10,400
Chrome Stable in the future Edge which I also test these slides on, and they work, so that

00:24:10,400 --> 00:24:11,570
was pretty cool.

00:24:11,570 --> 00:24:15,350
I hope to see a lot more of this in the future.

00:24:15,350 --> 00:24:22,280
It's a great way it that gives developers so much control over the styles of our website.

00:24:22,280 --> 00:24:28,480
So, you can combine all those things to make layouts like this, and as Aga said, I do sing

00:24:28,480 --> 00:24:31,090
songs for every intro to my podcast.

00:24:31,090 --> 00:24:34,560
I thought I would end this with a little ditty.

00:24:34,560 --> 00:24:41,610
Can I get some music?

00:24:41,610 --> 00:24:45,840
[Electronic piano music].

00:24:45,840 --> 00:24:47,310
I'm doing this for you all.

00:24:47,310 --> 00:24:48,620
* Try bootstrap.

00:24:48,620 --> 00:24:52,020
* Go to the website with Stylus.

00:24:52,020 --> 00:24:54,000
* Even almost with native.

00:24:54,000 --> 00:24:55,480
* First I'm so thankful.

00:24:55,480 --> 00:24:57,700
* Thank you to web good morning.

00:24:57,700 --> 00:25:06,340
I don't understand it, though.

00:25:06,340 --> 00:25:08,500
* One taught me love.

00:25:08,500 --> 00:25:12,340
* One taught me to build patience.

00:25:12,340 --> 00:25:15,090
* Now my paint looks amazing.

00:25:15,090 --> 00:25:17,680
* I've learned and I've shared.

00:25:17,680 --> 00:25:20,740
* But please don't look at it.

00:25:20,740 --> 00:25:23,290
* Changing tech is a habit.

00:25:23,290 --> 00:25:25,490
* And to that I say.

00:25:25,490 --> 00:25:26,670
* Thank you, next!

00:25:26,670 --> 00:25:27,670
>> Thank you!

00:25:27,670 --> 00:25:28,640

YouTube URL: https://www.youtube.com/watch?v=GhRE3rML9t4


