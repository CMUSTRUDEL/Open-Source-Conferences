Title: Let’s build a JavaScript Engine in Rust by Jason Williams | JSConf EU 2019
Publication date: 2019-06-20
Playlist: JSConf EU 2019
Description: 
	Have you wondered how JS engines work? This past year I built an engine from scratch in Rust. It was fun, weird, exciting and sometimes exhausting. I will share my experience as well as what it is like to work on the specification, collaborate with TC39, and lessons from engines in use today.

https://2019.jsconf.eu/jason-williams/lets-build-a-javascript-engine.html
Captions: 
	00:00:09,429 --> 00:00:10,429
Wow.

00:00:10,429 --> 00:00:12,840
I mean, thank you by the way to JSConf EU for having me here.

00:00:12,840 --> 00:00:19,810
It's an absolute privilege to be at the last JSConf EU of its time.

00:00:19,810 --> 00:00:22,270
Can you guys give it up for JSConf EU?

00:00:22,270 --> 00:00:25,450
I can't believe it.

00:00:25,450 --> 00:00:26,450
[Applause].

00:00:26,450 --> 00:00:27,450
I cannot believe it.

00:00:27,450 --> 00:00:32,500
So, you know, biggest JavaScript conference in Europe, I think biggest JavaScript conference

00:00:32,500 --> 00:00:33,500
in the world.

00:00:33,500 --> 00:00:37,500
Going to be talking about building a JS engine.

00:00:37,500 --> 00:00:38,579
No pressure at all!

00:00:38,579 --> 00:00:40,010
It will be completely fine!

00:00:40,010 --> 00:00:41,140
I should probably introduce myself.

00:00:41,140 --> 00:00:42,140
I'm Jason Williams.

00:00:42,140 --> 00:00:49,780
I'm a senior software engineer at Bloomberg in the UK in London, dare I say Europe?

00:00:49,780 --> 00:00:53,000
We're still clinging on.

00:00:53,000 --> 00:00:57,230
I used to work at the BBC as well.

00:00:57,230 --> 00:00:59,190
Are there BBC people?

00:00:59,190 --> 00:01:00,190
Here?

00:01:00,190 --> 00:01:02,129
Yes, wow!

00:01:02,129 --> 00:01:08,970
I've also been involved in sort of TC39, so I've been working on the proposal over the

00:01:08,970 --> 00:01:14,601
past year which allows you to get on board all of your promises, regardless of the state

00:01:14,601 --> 00:01:21,810
whether fulfilled or rejected, and you have control then to do what you want with them.

00:01:21,810 --> 00:01:24,560
On the Rust side, I've also been involved in Rust as well.

00:01:24,560 --> 00:01:28,770
I used to be the maintainer of the Sublime Text Rust plugin.

00:01:28,770 --> 00:01:38,380
I've since moved into the Rust DevTools team, and they focus on sort of ID plugins, tooling,

00:01:38,380 --> 00:01:41,860
and then the Rust language server as well which is pretty cool which is a single process

00:01:41,860 --> 00:01:47,500
that handles things like debugging, hinting, and all the editors can make use of that.

00:01:47,500 --> 00:01:53,450
So I thought doing some specifications with JavaScript, really interesting, you know,

00:01:53,450 --> 00:01:58,140
working a little bit on Rust as well, my two favourite things, how can I marry these two

00:01:58,140 --> 00:02:01,840
things together?

00:02:01,840 --> 00:02:04,090
My two languages that I love so much?

00:02:04,090 --> 00:02:05,570
How can I bring these together?

00:02:05,570 --> 00:02:09,590
And by the way, the biggest JavaScript conference in the world, I know it's a ballsy move talking

00:02:09,590 --> 00:02:11,650
about Rust, but I'm going to go with it.

00:02:11,650 --> 00:02:13,650
Bear with me.

00:02:13,650 --> 00:02:17,919
I thought why not build a JavaScript engine written in Rust?

00:02:17,919 --> 00:02:24,930
Take the fun and accessibility of JavaScript and then power that with Rust, and then see

00:02:24,930 --> 00:02:27,260
what we can get?

00:02:27,260 --> 00:02:28,959
It was a bit ambitious.

00:02:28,959 --> 00:02:30,680
It was quite checking.

00:02:30,680 --> 00:02:36,209
I actually started off by looking for a place where I could contribute to this.

00:02:36,209 --> 00:02:40,150
Nowhere existed, like no-one had built one in Rust before, at least two years ago, anyway.

00:02:40,150 --> 00:02:48,169
There was one single project called js.rs, and the maintainer abandoned it.

00:02:48,169 --> 00:02:50,200
It was six years old.

00:02:50,200 --> 00:02:55,260
I tried to build it, and there were 650 errors.

00:02:55,260 --> 00:03:01,239
It was basically because he made it at a time when Rust wasn't 1.0 and so the syntax had

00:03:01,239 --> 00:03:07,419
changed and moved on, and it was faster to build one from scratch than it was to try

00:03:07,419 --> 00:03:09,319
and get this working.

00:03:09,319 --> 00:03:11,699
That's exactly what I did.

00:03:11,699 --> 00:03:16,780
I'm not an expert by the way in parsing, or writing compilers, or any of that.

00:03:16,780 --> 00:03:21,499
I mean, I even struggle to read CSS in the morning, so I'm not an expert in parsing source

00:03:21,499 --> 00:03:23,779
code, so I thought let's start from somewhere.

00:03:23,779 --> 00:03:25,879
I thought it was a jump.

00:03:25,879 --> 00:03:32,769
Doing small things in Rust, and going from like "hello, world" to full-on JavaScript

00:03:32,769 --> 00:03:34,629
interpreter was probably a bit of a jump.

00:03:34,629 --> 00:03:41,620
I probably should have done something in between like a to-do MVC, or something like that.

00:03:41,620 --> 00:03:45,319
I knew I was on to something here that I had a good language, something to work with.

00:03:45,319 --> 00:03:49,360
There were a couple of reasons that I wanted to use Rust to build this engine.

00:03:49,360 --> 00:03:51,479
One was control.

00:03:51,479 --> 00:03:55,230
One of the things Rust says to you we're going to give you the control you can have plus

00:03:55,230 --> 00:03:57,219
all the safety.

00:03:57,219 --> 00:04:03,260
And so I can utilise a sort of close to the metalness of Rust and do the things I need

00:04:03,260 --> 00:04:07,609
to do, and then the compile time means I don't fall over myself.

00:04:07,609 --> 00:04:16,010
It was quite fast, so it is built on top of LOVM which means the years of the LOVM compiler

00:04:16,010 --> 00:04:19,289
they've done, Rust can tap into that and make use of it.

00:04:19,289 --> 00:04:28,680
Sometimes, you can get faster CodeGen which produces C. There's memory safety as well.

00:04:28,680 --> 00:04:31,439
Rust has an ownership system which is quite unique.

00:04:31,439 --> 00:04:36,430
Basically, if you were passing a value into a function, the function is now the owner

00:04:36,430 --> 00:04:40,419
of that value, so there can only be one owner to a value.

00:04:40,419 --> 00:04:44,570
That means when Rust wants to get rid of data it can do so with 100 per cent confidence

00:04:44,570 --> 00:04:47,260
because nothing else is pointing to that thing.

00:04:47,260 --> 00:04:50,699
You don't have dangling pointers, or anything like that.

00:04:50,699 --> 00:04:57,370
Currency, I might want to make use of this at some point.

00:04:57,370 --> 00:05:02,509
Again, because of the ownership model, I won't have to worry too much about multiple threads,

00:05:02,509 --> 00:05:06,280
trying to access the same value, and then what I need to worry about data races.

00:05:06,280 --> 00:05:11,699
All of that is taken care of at compile time which means at run time, I'm not penalised

00:05:11,699 --> 00:05:12,900
on performance.

00:05:12,900 --> 00:05:17,550
So, yes I thought it's a good start.

00:05:17,550 --> 00:05:19,569
Let's get going.

00:05:19,569 --> 00:05:20,569
So I started.

00:05:20,569 --> 00:05:25,479
About two years ago, I started, I made a Git Repo, an engine called Boa.

00:05:25,479 --> 00:05:29,020
Someone asked me why I called that?

00:05:29,020 --> 00:05:30,810
An evil boa in a zoo in Australia.

00:05:30,810 --> 00:05:33,689
I thought I'm naming my engine after that.

00:05:33,689 --> 00:05:38,889
I'm going to start with a high-level view here.

00:05:38,889 --> 00:05:44,010
So the architecture that I'm going to go with for now is going to be a few things missing,

00:05:44,010 --> 00:05:48,889
for those of you who are familiar with compilers, but the view that I'm going to start with

00:05:48,889 --> 00:05:54,370
is taking some source code, and that can be from, say, a network, or in this case reading

00:05:54,370 --> 00:05:57,319
from a file, basically.

00:05:57,319 --> 00:06:01,509
Taking the source code, bringing it into as a string buffer, so just imagine a big string

00:06:01,509 --> 00:06:03,240
of JavaScript.

00:06:03,240 --> 00:06:07,970
And I'm going to use the scanner that I've made to break that down into some various

00:06:07,970 --> 00:06:08,970
tokens.

00:06:08,970 --> 00:06:15,159
And these tokens, they're basically like groups of characters that are bunched together to

00:06:15,159 --> 00:06:16,659
have some sort of semantic meaning.

00:06:16,659 --> 00:06:24,169
In this case, we've got function as a tone, or fu, or the opening parenthesis here.

00:06:24,169 --> 00:06:37,740
We are going to send them on to the parser operation.

00:06:37,740 --> 00:06:40,349
These expressions are different.

00:06:40,349 --> 00:06:42,270
Expressions are hold other for example s.

00:06:42,270 --> 00:06:48,050
If you've got the opening of a function, you've got function declaration.

00:06:48,050 --> 00:06:52,539
The block inside that function, we've got some variable declaration, so the variable

00:06:52,539 --> 00:06:56,190
declarations would be children to that function.

00:06:56,190 --> 00:06:58,990
That's generally the idea.

00:06:58,990 --> 00:07:01,319
Let's just step into that a little bit closer.

00:07:01,319 --> 00:07:07,850
I'm going to take that line of JS here.

00:07:07,850 --> 00:07:12,039
I showed this to someone earlier, and they were like, "You should have used const!"

00:07:12,039 --> 00:07:13,199
Sorry, I forgot.

00:07:13,199 --> 00:07:17,999
I'm going to start with Let.

00:07:17,999 --> 00:07:22,909
Imagine you're scanning this, so the thing that reads the file has done its job now and

00:07:22,909 --> 00:07:24,310
it's going to pass this through.

00:07:24,310 --> 00:07:29,629
The first thing we are sitting on is the Let.

00:07:29,629 --> 00:07:31,099
We will produce a token from that.

00:07:31,099 --> 00:07:33,830
The token in this case is our object.

00:07:33,830 --> 00:07:34,830
We've got the value.

00:07:34,830 --> 00:07:36,130
We want to keep hold of the value.

00:07:36,130 --> 00:07:37,130
That's useful.

00:07:37,130 --> 00:07:38,830
We want to make a category for the tone.

00:07:38,830 --> 00:07:40,970
In this case, it's a key word.

00:07:40,970 --> 00:07:45,199
The reason I know that it is a key word is because I took a look on the spec, grabbed

00:07:45,199 --> 00:07:48,550
key words and codified against that.

00:07:48,550 --> 00:07:54,920
So, when I take a string like let that's got no quotes at the beginning, I know it's going

00:07:54,920 --> 00:08:00,379
to be either an identifier, or maybe even a token, so what I start off by doing is checking

00:08:00,379 --> 00:08:07,759
off against my list of key words, and I know that this one is a key word.

00:08:07,759 --> 00:08:17,090
Conf does the same thing but it doesn't exist as a key word so we assume it's an identifier.

00:08:17,090 --> 00:08:20,160
We are keeping track of the position.

00:08:20,160 --> 00:08:23,569
The compiler doesn't really need that per se, but it's good if you're debugging and

00:08:23,569 --> 00:08:27,749
you can output that there's a problem on this line, or if there is a token we're not expecting,

00:08:27,749 --> 00:08:32,719
we can say there was an issue here, and it's on this column, this line number.

00:08:32,719 --> 00:08:36,539
Punctuation gets its own category.

00:08:36,539 --> 00:08:42,870
Again with, we want to keep the value and where we are and so on.

00:08:42,870 --> 00:08:43,870
So here we've got.

00:08:43,870 --> 00:08:47,019
Some punctuation, a string, and an identifier, and a key word.

00:08:47,019 --> 00:08:51,760
We're going to place this into an array, and then pass it on to our parser.

00:08:51,760 --> 00:08:54,950
This makes it easier for us to deal with when we're traversing through the source code.

00:08:54,950 --> 00:09:00,820
If you want to look at Rust, don't worry about understanding the syntax or anything like

00:09:00,820 --> 00:09:04,250
that, but I make use of Rust pattern-matching.

00:09:04,250 --> 00:09:05,520
Think of Switch Case.

00:09:05,520 --> 00:09:08,149
It is similar but more powerful.

00:09:08,149 --> 00:09:14,550
The idea is that you can take a character, or anything, actually, and then the pattern-matching

00:09:14,550 --> 00:09:16,790
allows you to do some destructuring on that.

00:09:16,790 --> 00:09:19,760
You can say is it this or this?

00:09:19,760 --> 00:09:24,690
You can do bindings which I don't have an example about here, or we can say is it a

00:09:24,690 --> 00:09:26,709
digit, or is it alphabetic?

00:09:26,709 --> 00:09:33,440
This this case, we're on let, so it is alphabetic, so we go into a state of trying to parse and

00:09:33,440 --> 00:09:35,210
an identifier.

00:09:35,210 --> 00:09:40,410
And then we take this, put it in a loop, and of through each character in our source code

00:09:40,410 --> 00:09:41,820
and you do the same thing.

00:09:41,820 --> 00:09:44,620
With each character you land on, that's a state.

00:09:44,620 --> 00:09:46,370
It's a state machine going on.

00:09:46,370 --> 00:09:48,660
If you're in a quote, it's a state of parsing a string.

00:09:48,660 --> 00:09:53,850
If you're in a character, it's parsing an identifier and a key word, and so on.

00:09:53,850 --> 00:09:58,480
I've got a demo.

00:09:58,480 --> 00:09:59,690
This is something I did earlier.

00:09:59,690 --> 00:10:05,240
I was going to do it live, but Paul Irish is around, so I just wanted to make sure that

00:10:05,240 --> 00:10:07,649
he's not going to get interference, or anything!

00:10:07,649 --> 00:10:14,510
This is a quick writing conf, equals JSConf.

00:10:14,510 --> 00:10:16,800
We will output some tones.

00:10:16,800 --> 00:10:21,760
Very similar to what I showed you earlier.

00:10:21,760 --> 00:10:26,370
We have key words, an identifier, and our punctuation, et cetera.

00:10:26,370 --> 00:10:27,370
This is now ready to go.

00:10:27,370 --> 00:10:30,290
We're Aldershot Town done in this area.

00:10:30,290 --> 00:10:34,970
With parsing, we're going to sort of take that array of tokens, and we are going to

00:10:34,970 --> 00:10:37,880
try to build a tree structure now.

00:10:37,880 --> 00:10:40,570
So we are going to start building expressions from these tokens.

00:10:40,570 --> 00:10:44,360
The way we do that is similar to how we were iterating for the tokens as well.

00:10:44,360 --> 00:10:47,860
With the characters, we had some pattern-matching going on.

00:10:47,860 --> 00:10:50,590
We're going to do the same thing.

00:10:50,590 --> 00:10:53,160
This time, though, we're able to pattern-match on tokens.

00:10:53,160 --> 00:10:57,980
Now we can say we are sitting on a token that is representing a key word, or representing

00:10:57,980 --> 00:10:59,780
an identifier.

00:10:59,780 --> 00:11:04,890
If it is a key word, we can say this is the key word that we are currently sitting on.

00:11:04,890 --> 00:11:07,160
A quick side note about pattern-matching.

00:11:07,160 --> 00:11:15,430
It's been so successful in Rust, it's had a lot of success that there's been, there's

00:11:15,430 --> 00:11:19,990
been a proposal in stage one to bring pattern-matching across into JavaScript.

00:11:19,990 --> 00:11:22,320
Keep an eye on that.

00:11:22,320 --> 00:11:26,970
In this case here, we are sitting on top of an "if", and we know our next token should

00:11:26,970 --> 00:11:28,930
be an open parenthesis.

00:11:28,930 --> 00:11:36,900
I've made a utility function here called expect punc, expect to have a premises or error out

00:11:36,900 --> 00:11:38,620
at that point.

00:11:38,620 --> 00:11:40,430
We can then parse our condition.

00:11:40,430 --> 00:11:45,600
This is between the parenthesis, and we can make an expression there, and we can do the

00:11:45,600 --> 00:11:48,890
same thing with the "if" body, and that is the expression underneath.

00:11:48,890 --> 00:11:56,220
"Next" there chemicals it if the token is "else", which is optional.

00:11:56,220 --> 00:11:58,019
We may or may not have angles.

00:11:58,019 --> 00:12:01,699
If we do, we parse that as well.

00:12:01,699 --> 00:12:07,980
After that, we've got three expressions: the condition, the body, and then potentially

00:12:07,980 --> 00:12:13,180
the else, and we add those expressions underneath the if "if" expression, so you can start to

00:12:13,180 --> 00:12:16,199
see the free structure we've got.

00:12:16,199 --> 00:12:23,170
Don't worry about the syntax of this, but this is implemented using an enum.

00:12:23,170 --> 00:12:26,500
The expressions are what they call variants.

00:12:26,500 --> 00:12:28,339
Each variant can hold another expression.

00:12:28,339 --> 00:12:34,829
You get the recursive structure, and the if variant holds an expression which is a condition

00:12:34,829 --> 00:12:38,560
which is another expression that might hold other things.

00:12:38,560 --> 00:12:44,800
The if body, and we wrap the "else" in an option which basically means we may or may

00:12:44,800 --> 00:12:46,110
not have a value there.

00:12:46,110 --> 00:12:51,420
It's basically a way of way of us checking to say is there angles?

00:12:51,420 --> 00:12:56,480
If not, we move on and we get a non-value.

00:12:56,480 --> 00:13:01,170
The box you can see as well, so these are like the types and the box is basically saying

00:13:01,170 --> 00:13:04,850
that these are going to live on the heap.

00:13:04,850 --> 00:13:07,390
And it will manage that for us.

00:13:07,390 --> 00:13:09,730
So, take a look at this.

00:13:09,730 --> 00:13:11,540
I've added a bit more code now.

00:13:11,540 --> 00:13:13,899
We had a let const.

00:13:13,899 --> 00:13:18,220
I've added more around that.

00:13:18,220 --> 00:13:23,540
If we started with our function, we get a function declaration expression.

00:13:23,540 --> 00:13:31,700
And as we work our way down, we get a let const, and that generates is a "let" generation

00:13:31,700 --> 00:13:36,910
expression underneath the function, and the const expression is just a little, so that

00:13:36,910 --> 00:13:42,720
is basically saying it's a value that we don't need to evaluate, it's already there.

00:13:42,720 --> 00:13:45,970
That is also a child of the let declaration.

00:13:45,970 --> 00:13:51,160
The reason for that is that you can declare variables without defining what they are.

00:13:51,160 --> 00:13:54,100
In this case, we are defining it as well.

00:13:54,100 --> 00:14:02,980
So we go down to our "if", and we have our if expression which holds an operation, a

00:14:02,980 --> 00:14:06,089
condition, a then, and angles.

00:14:06,089 --> 00:14:10,232
As I said earlier, the else was wrapped in an option, and we didn't use else in this

00:14:10,232 --> 00:14:12,800
case so we just return as non.

00:14:12,800 --> 00:14:19,770
Then we go into our if body which is the block expression, and we have another let declaration,

00:14:19,770 --> 00:14:23,050
and that also has a concept underneath that as well.

00:14:23,050 --> 00:14:28,740
The last thing is the return which gives us the return expression.

00:14:28,740 --> 00:14:32,370
So the source code that you see on the left is what would generate the tree we have on

00:14:32,370 --> 00:14:33,370
the right.

00:14:33,370 --> 00:14:39,459
Again, a demo, so, hope you can run this.

00:14:39,459 --> 00:14:42,069
And then there we go.

00:14:42,069 --> 00:14:43,069
Yes.

00:14:43,069 --> 00:14:45,629
And so there is a lot more going on there, and that is because I can only cover one more

00:14:45,629 --> 00:14:49,740
on one slide, but there are more expressions.

00:14:49,740 --> 00:14:52,930
In this case, there's a block expression at the top, and that represents the global scope,

00:14:52,930 --> 00:14:55,620
and you've got the function declaration underneath.

00:14:55,620 --> 00:14:58,199
But you kind of get the idea.

00:14:58,199 --> 00:15:04,709
So, now we are going to try and evaluate the tree that we've generated.

00:15:04,709 --> 00:15:09,120
And there are a couple of things that we need to do and bear in mind.

00:15:09,120 --> 00:15:15,319
The idea is that we want to walk through the tree and then make decisions based on which

00:15:15,319 --> 00:15:17,569
expression we land on.

00:15:17,569 --> 00:15:26,360
So, in this example here, we've got a let declaration expression, and the JavaScript

00:15:26,360 --> 00:15:30,060
underneath is just an example of what that has generated, and so, on the right, we've

00:15:30,060 --> 00:15:31,060
got the Rust code.

00:15:31,060 --> 00:15:38,110
What I decided to do was to represent JavaScript values in an email, and so we've got the sort

00:15:38,110 --> 00:15:41,399
of values that you can have on the right-hand side.

00:15:41,399 --> 00:15:43,569
A symbol is missing.

00:15:43,569 --> 00:15:46,540
PRs are welcome.

00:15:46,540 --> 00:15:52,680
But we've got null undefined, boolean string number, integer, object, and function.

00:15:52,680 --> 00:16:00,379
Some people wandering why we have integer if all numbers are 64, 64-bit floating points?

00:16:00,379 --> 00:16:05,480
If you're doing stuff around bit-wise operations, we need to convert them to a number, do the

00:16:05,480 --> 00:16:10,329
operation on that, and then convert it back into a floating point.

00:16:10,329 --> 00:16:13,110
So it's kind of used internally.

00:16:13,110 --> 00:16:19,690
Then we take a value and wrap it in a GC so there is a great GC library that somebody

00:16:19,690 --> 00:16:25,079
made and it was super useful, and the reason I needed that is because in JavaScript, you

00:16:25,079 --> 00:16:30,560
can reference one value for multiple functions, and so that value goes out of scope.

00:16:30,560 --> 00:16:35,190
You need to make sure that it stays alive, and so the idea here is I can take a value

00:16:35,190 --> 00:16:41,370
that I've made, put it in the GC, and that GC will automatically handle not garbage-collecting

00:16:41,370 --> 00:16:46,279
that until nothing else needs it, or at least until it goes out of scope and nothing else

00:16:46,279 --> 00:16:48,769
can possibly point to it.

00:16:48,769 --> 00:16:50,550
Manesh worked on that.

00:16:50,550 --> 00:16:58,230
He did a great job on that.

00:16:58,230 --> 00:17:04,940
I have my value data which is a string, and I pass my string in, and I now have my value,

00:17:04,940 --> 00:17:08,840
which is great.

00:17:08,840 --> 00:17:10,660
We need to put the value somewhere.

00:17:10,660 --> 00:17:15,560
So I started off by using hashmaps.

00:17:15,560 --> 00:17:22,260
The idea was that I had a naïve approach which was whenever we come across a function,

00:17:22,260 --> 00:17:23,260
create a hashmap.

00:17:23,260 --> 00:17:25,380
Anything inside that function, I will throw in there.

00:17:25,380 --> 00:17:27,220
This is to get going.

00:17:27,220 --> 00:17:29,220
It got me surprisingly far.

00:17:29,220 --> 00:17:33,900
As you saw the tree earlier, every time I stepped on to a function declaration, I would

00:17:33,900 --> 00:17:41,820
step on to a hashmap.

00:17:41,820 --> 00:17:47,580
Every time I came across a let declaration, I would add the value straight in.

00:17:47,580 --> 00:17:54,000
Real engines do more than this, but if you want to get going, it was pretty effective.

00:17:54,000 --> 00:17:58,920
You can see here, though, that quickly it start to fail, because we have our B here

00:17:58,920 --> 00:18:05,020
that is in same environment as the conf and the B should probably be removed once that

00:18:05,020 --> 00:18:07,960
block expression finishes.

00:18:07,960 --> 00:18:13,290
So I realised I do need to have more environments than just the one for function.

00:18:13,290 --> 00:18:14,860
Took a look at the spec.

00:18:14,860 --> 00:18:20,300
The specification actually points out five of them, and it calls them records.

00:18:20,300 --> 00:18:24,780
I'm not going to read them out, but you kind of get the idea.

00:18:24,780 --> 00:18:31,070
And is to I then took the environment section of the spec and basically implemented that.

00:18:31,070 --> 00:18:32,440
It was not easy.

00:18:32,440 --> 00:18:34,020
It was not easy at all.

00:18:34,020 --> 00:18:38,950
But basically, what I do now is I created function records, I created block scope records,

00:18:38,950 --> 00:18:44,060
global scope records, and even modular records, and then the idea is every time I made a new

00:18:44,060 --> 00:18:53,080
record, I would add metadata to add value, and I would give it a parent property as well,

00:18:53,080 --> 00:18:56,961
so that I could point to the record I made of previously and then you start to have a

00:18:56,961 --> 00:19:00,240
sort of chain, the scope chain, where we can do our look-ups.

00:19:00,240 --> 00:19:04,580
If you go back to our tree, the idea is that I make a function declaration, and I make

00:19:04,580 --> 00:19:06,340
a function environment.

00:19:06,340 --> 00:19:10,440
I have a declaration, I add my value in there.

00:19:10,440 --> 00:19:15,720
Have a block expression, I make a declarative environment, add my value in there.

00:19:15,720 --> 00:19:18,890
So far, so good.

00:19:18,890 --> 00:19:22,200
Return is interesting, because the Conf is not in the turn the current environment I've

00:19:22,200 --> 00:19:27,250
just made, so I have to make use of the patient property to do a lockup.

00:19:27,250 --> 00:19:29,850
In this case, I'm trying to find where const is.

00:19:29,850 --> 00:19:31,750
I'm saying can you give me the value for const?

00:19:31,750 --> 00:19:32,750
It doesn't find it.

00:19:32,750 --> 00:19:37,820
It gets it from the function declaration scope and gets it from there.

00:19:37,820 --> 00:19:44,000
This is basically the scope chain that you probably heard obviously people talk about.

00:19:44,000 --> 00:19:50,150
You can actually put your code into various tools that show you the tree, so there's AST

00:19:50,150 --> 00:19:51,150
Explorer.

00:19:51,150 --> 00:19:59,491
I think it's astexplorer.com or dot net, and you can put your view in there and see how

00:19:59,491 --> 00:20:02,580
it would be expressed as an abstract stream.

00:20:02,580 --> 00:20:05,610
With all of this.

00:20:05,610 --> 00:20:10,440
Let's give this a try.

00:20:10,440 --> 00:20:12,650
I'm going to console.log it out.

00:20:12,650 --> 00:20:19,620
It implements the console.log which prints the value given.

00:20:19,620 --> 00:20:26,250
There we go.

00:20:26,250 --> 00:20:31,110
And so we have JSConf EU.

00:20:31,110 --> 00:20:35,430
Thank you!

00:20:35,430 --> 00:20:37,590
[Applause].

00:20:37,590 --> 00:20:41,060
It's pretty fast as well.

00:20:41,060 --> 00:20:43,540
Yes, there we go.

00:20:43,540 --> 00:20:45,400
Got it working.

00:20:45,400 --> 00:20:50,010
To begin with, I got small things working, then I slowly started adding some other stuff,

00:20:50,010 --> 00:20:56,140
so I think this week, you know, it can do let and comps, a bit better, arrow functions

00:20:56,140 --> 00:20:57,840
were easy to add.

00:20:57,840 --> 00:21:01,920
Once you get the building blocks there, it becomes easier and easier to add more stuff.

00:21:01,920 --> 00:21:07,940
A couple of performance opportunities: so one is maybe don't parse everything.

00:21:07,940 --> 00:21:09,300
Most functions are declared.

00:21:09,300 --> 00:21:14,400
Don't end up evening being ... so it's not worth parsing every single thing you come

00:21:14,400 --> 00:21:17,710
across because that can slow things down.

00:21:17,710 --> 00:21:25,740
Spider Monkey and V8 do lazy parsing and may not add it to the syntax free straightaway

00:21:25,740 --> 00:21:33,230
and make a note of it and parse it will have before it is ran and parse lazily.

00:21:33,230 --> 00:21:36,760
It will check through functions but not actually add them to the AST.

00:21:36,760 --> 00:21:39,340
That's one tip.

00:21:39,340 --> 00:21:42,050
Don't parse functions that aren't going to be called.

00:21:42,050 --> 00:21:45,340
All the JS engines in use today already do this.

00:21:45,340 --> 00:21:49,370
Another opportunity is to make use of the concurrency in Rust, so I can actually break

00:21:49,370 --> 00:21:54,530
these tasks apart, have them run on separate threads and pass data between each etch other.

00:21:54,530 --> 00:22:00,240
Got a scanner, pass the tokens across into the parser, because a scanner doesn't need

00:22:00,240 --> 00:22:05,130
those values anymore, and it doesn't need to hold on to them.

00:22:05,130 --> 00:22:07,800
I can go further than this.

00:22:07,800 --> 00:22:19,660
I can go further and have a work er reading the files into the parser.

00:22:19,660 --> 00:22:23,030
This is something that script engines do today.

00:22:23,030 --> 00:22:24,600
It's called script-screaming.

00:22:24,600 --> 00:22:28,820
The new WebAssembly cider monkey does this.

00:22:28,820 --> 00:22:32,130
As the script is downloading, it can start running straightaway.

00:22:32,130 --> 00:22:34,540
V8 does this already as well.

00:22:34,540 --> 00:22:40,730
A couple of good things - implementing JavaScript, I need to do that.

00:22:40,730 --> 00:22:48,830
JIT compilation, hopeful working for us with a good package called Holy JIT - I like that.

00:22:48,830 --> 00:22:59,120
I will do more stuff on the event loop, and more tests around that, and United States

00:22:59,120 --> 00:23:00,850
advertising tests 262.

00:23:00,850 --> 00:23:02,000
That's it.

00:23:02,000 --> 00:23:05,970
I've brought JavaScript to the Rust ecosystem.

00:23:05,970 --> 00:23:08,680
People in the Rust world can make use of it if they want to tokenise.

00:23:08,680 --> 00:23:14,470
It's quite modular, if they want to have a parser in the Rust world, they can do it.

00:23:14,470 --> 00:23:15,470
They can use it.

00:23:15,470 --> 00:23:16,470
They have some JavaScript.

00:23:16,470 --> 00:23:20,740
Then I thought have I married my love of these two things together?

00:23:20,740 --> 00:23:23,430
I brought JS into the world of Rust.

00:23:23,430 --> 00:23:28,420
Can I bring this piece of Rust into the world of JavaScript?

00:23:28,420 --> 00:23:32,440
Yes, I can!

00:23:32,440 --> 00:23:35,130
There's WebAssembly.

00:23:35,130 --> 00:23:37,990
I can bring this whole thing into the browser.

00:23:37,990 --> 00:23:40,040
I know!

00:23:40,040 --> 00:23:41,260
I know!

00:23:41,260 --> 00:23:44,700
The Rust team and the WebAssembly working group have been working together for quite

00:23:44,700 --> 00:23:51,750
a while now to make Wasm really awesome especially via Rust, working on great tooling over the

00:23:51,750 --> 00:23:53,600
past few years.

00:23:53,600 --> 00:23:54,740
Why not take of those.

00:23:54,740 --> 00:24:02,960
One of those tools is Wasm bind be and let's take that and use it with Boa, bring it into

00:24:02,960 --> 00:24:07,740
the browser, running JS.

00:24:07,740 --> 00:24:09,400
The way that works is pretty peaceful.

00:24:09,400 --> 00:24:16,370
You take WebAssembly, bring it on to a place where you want expose.

00:24:16,370 --> 00:24:21,980
Something like this, exposed as a ES6 module.

00:24:21,980 --> 00:24:27,740
I thought let's add Wasm into that, build my package.

00:24:27,740 --> 00:24:31,010
It will generate WebAssembly, and I can use that.

00:24:31,010 --> 00:24:33,200
There are some advantages to this.

00:24:33,200 --> 00:24:35,340
It is quite fast.

00:24:35,340 --> 00:24:38,360
When the browser pulls it in, it can run it straightaway.

00:24:38,360 --> 00:24:42,470
But it's compiled, it's more compact, so you've got a faster download because you're downloading

00:24:42,470 --> 00:24:43,610
less code.

00:24:43,610 --> 00:24:47,750
There's still the safety aspect there as well because it follows the same rules, like same

00:24:47,750 --> 00:24:52,130
origin and browser limitations, so you don't get the ballot box making requests where it

00:24:52,130 --> 00:24:54,030
shouldn't be.

00:24:54,030 --> 00:24:56,790
I can expose it to JavaScript.

00:24:56,790 --> 00:25:02,480
I can use it as though it's a JS module.

00:25:02,480 --> 00:25:04,610
It's actually Rust I'm importing there.

00:25:04,610 --> 00:25:07,400
It's not JS.

00:25:07,400 --> 00:25:09,850
I can pass it a string.

00:25:09,850 --> 00:25:14,340
And I can run it.

00:25:14,340 --> 00:25:16,040
That's the Wasm attribute.

00:25:16,040 --> 00:25:19,740
You put that on to be of the function of any function you want to expose in the JS world

00:25:19,740 --> 00:25:24,950
and it will build your package into a Wasm file and then export it.

00:25:24,950 --> 00:25:27,030
Like this.

00:25:27,030 --> 00:25:31,660
I'm going to build it.

00:25:31,660 --> 00:25:34,360
I'm doing Yarn serve because there's a WebAssembly plugin.

00:25:34,360 --> 00:25:37,880
That's going to build that out.

00:25:37,880 --> 00:25:38,880
Take a look on the left.

00:25:38,880 --> 00:25:40,560
It's going to generate a package folder.

00:25:40,560 --> 00:25:42,900
It's pretty quick.

00:25:42,900 --> 00:25:46,680
I can make changes to Rust code and that are long-run, and the browser will reload.

00:25:46,680 --> 00:25:49,200
It's like I'm writing JavaScript, basically.

00:25:49,200 --> 00:26:03,340
Now we have a Boa bind gen Wasm file, and you can import that

00:26:03,340 --> 00:26:10,140
into - we're going to write it, scan it, parse it would be evaluate it.

00:26:10,140 --> 00:26:16,250
And then we're going to bring that back into JavaScript, and then basically print the value

00:26:16,250 --> 00:26:17,250
out.

00:26:17,250 --> 00:26:20,820
I'm going to try to do something challenging.

00:26:20,820 --> 00:26:24,120
Over time, it will get more challenging, but this is the most I can do right now.

00:26:24,120 --> 00:26:36,620
Hopefully, we get - we can return "hello", we can do plus JSConf, second function.

00:26:36,620 --> 00:26:44,000
Are you ready?

00:26:44,000 --> 00:26:46,450
Oh!

00:26:46,450 --> 00:26:51,370
Come on!

00:26:51,370 --> 00:26:53,830
[Applause].

00:26:53,830 --> 00:26:56,150
That's what keeps me up.

00:26:56,150 --> 00:26:57,150
This is why I'm in the industry.

00:26:57,150 --> 00:27:00,860
This is that's Rust running there.

00:27:00,860 --> 00:27:03,170
There's no network request.

00:27:03,170 --> 00:27:08,770
That's Rust running in the browser executing that JS, scanning it would be parsing it,

00:27:08,770 --> 00:27:12,190
evaluating, and the JavaScript is there as well.

00:27:12,190 --> 00:27:14,230
They work hand in hand.

00:27:14,230 --> 00:27:22,870
The takeaway is you can take the ... performance-sensitive parts of your application, build them in Rust,

00:27:22,870 --> 00:27:27,150
as and you only need to change those bits, not the whole application.

00:27:27,150 --> 00:27:34,380
The next time you're thinking of building a JS parse er like this one, or a game engine,

00:27:34,380 --> 00:27:37,790
it was super easy and worth doing.

00:27:37,790 --> 00:27:39,650
It's definitely worth thinking about.

00:27:39,650 --> 00:27:42,020
You can actually play with the demo as well.

00:27:42,020 --> 00:27:44,280
It's on that GitHub repo.

00:27:44,280 --> 00:27:48,000
You can go with there and play it live.

00:27:48,000 --> 00:28:09,190

YouTube URL: https://www.youtube.com/watch?v=_uD2pijcSi4


