Title: Yarn — 2019 and Beyond by Maël Nison | JSConf EU 2019
Publication date: 2019-06-05
Playlist: JSConf EU 2019
Description: 
	Since its creation in 2016, Yarn continuously pushed for better standards in the JavaScript ecosystem in particular. Dependency locking, built-in monorepos, zero-network modes, Plug’n’Play resolution, we’ve been on all fronts. Let’s discuss what we have in store for the future, and what it means for our ecosystem!

https://2019.jsconf.eu/mael-nison/yarn-2019-and-beyond.html
Captions: 
	00:00:11,700 --> 00:00:14,849
>> So you might have seen the talk from Kat just before.

00:00:14,849 --> 00:00:19,210
It's really interesting, and you should keep it in mind while we make this one as there

00:00:19,210 --> 00:00:21,850
are a few things that might overlap a bit.

00:00:21,850 --> 00:00:24,140
First, who am I?

00:00:24,140 --> 00:00:25,140
My name is Maël.

00:00:25,140 --> 00:00:29,640
I used to work at Facebook as part of the JavaScript foundation team.

00:00:29,640 --> 00:00:37,780
My job there was to en - do the infrastructure, and I came to contribute to Yarn.

00:00:37,780 --> 00:00:45,050
As time passed, I started to take more and more responsibilities on the project, and

00:00:45,050 --> 00:00:49,730
here I am today talking about the work we've been doing for the V2 which is in two small

00:00:49,730 --> 00:00:54,920
part based on my observation after using Yarn at scale for a few years.

00:00:54,920 --> 00:01:00,060
Something I like to remember when doing this talk is why does Yarn exist in the first place?

00:01:00,060 --> 00:01:01,579
How did it get created?

00:01:01,579 --> 00:01:07,290
It all started with three companies - Facebook, Google, and Expo - which felt something was

00:01:07,290 --> 00:01:09,530
missing in their infrastructure.

00:01:09,530 --> 00:01:15,100
They figured the existing solution didn't meet all their needs in terms of stability,

00:01:15,100 --> 00:01:19,899
user experience, and so they decided to try something different, to try something new.

00:01:19,899 --> 00:01:26,329
A different solution with different architectural choices, different trade-offs that would still

00:01:26,329 --> 00:01:29,670
be compatible with the ecosystem at large.

00:01:29,670 --> 00:01:33,579
That was a huge bet but we succeeded, and that is how Yarn got created.

00:01:33,579 --> 00:01:42,249
Since then, we keep this philosophy, think of Yarn as an a laboratory.

00:01:42,249 --> 00:01:47,909
Speaking of feels, before talking about what Yarn 2 will bring to the table in 2019 and

00:01:47,909 --> 00:01:52,999
beyond, we must first go quickly over what it contributed and more importantly what are

00:01:52,999 --> 00:01:54,450
the things they did right.

00:01:54,450 --> 00:01:58,870
It's the important to know because that's how we can ensure that we won't lose what

00:01:58,870 --> 00:02:03,920
makes our core values when we make the transition from the v1 to the v2.

00:02:03,920 --> 00:02:05,549
This is an open question, by the way.

00:02:05,549 --> 00:02:09,510
I would like to hear what you think Yarn did right.

00:02:09,510 --> 00:02:15,400
Please come and see me after the talk and share the stories.

00:02:15,400 --> 00:02:20,390
Ever since Yarn got created, something we deem very important was stability.

00:02:20,390 --> 00:02:22,370
We want JavaScript project to be stable.

00:02:22,370 --> 00:02:26,569
We want you to trust your project, and we are ready to go the extra mile to achieve

00:02:26,569 --> 00:02:27,569
this goal.

00:02:27,569 --> 00:02:32,319
This is about teaching good practices and letting you know when something is wrong before

00:02:32,319 --> 00:02:34,319
it can cause any article.

00:02:34,319 --> 00:02:38,700
We work to remove unsafe patterns from the equation as much as possible.

00:02:38,700 --> 00:02:43,810
Our log files ensure that the install dependencies are always the same, our install strategy,

00:02:43,810 --> 00:02:51,040
plug 'n' play, prevent your application breaking at deploy time, and our offline mirror ensures

00:02:51,040 --> 00:02:54,569
that the network will never be a problem in deployment.

00:02:54,569 --> 00:03:00,640
Speaking of the network, this is one thing in particular we worked really well for us.

00:03:00,640 --> 00:03:03,790
At Facebook, we barely even noticed when the registry was down.

00:03:03,790 --> 00:03:08,090
In fact, we often learned about it through Twitter, really.

00:03:08,090 --> 00:03:13,240
Despite the offline mirror being one of our less-known features, it might be one of the

00:03:13,240 --> 00:03:15,290
most important ones in my mind.

00:03:15,290 --> 00:03:16,689
You should definitely check it out.

00:03:16,689 --> 00:03:21,519
If you don't, it's fine, because it will soon become unmissable, starting from the v2 where

00:03:21,519 --> 00:03:24,680
it will be enabled by default.

00:03:24,680 --> 00:03:28,830
Going back to the things we did right, work spaces are high on the list.

00:03:28,830 --> 00:03:34,959
If you don't know them pretty well, they allow you to split your applications into sub projects

00:03:34,959 --> 00:03:40,370
that can live independently from each other while style being able to cross-reference

00:03:40,370 --> 00:03:41,370
each other.

00:03:41,370 --> 00:03:45,549
Ing see them as a declarative Yarn link.

00:03:45,549 --> 00:03:50,390
For example, you can see here we've been able to split our huge blob of dependencies into

00:03:50,390 --> 00:03:54,920
smaller pieces, one for the back end and one for the front-end.

00:03:54,920 --> 00:04:01,660
Spaces came to the community, but as we noticed how much they improve our own product, we

00:04:01,660 --> 00:04:04,080
decided to make it a core feature in Yarn.

00:04:04,080 --> 00:04:05,970
That was a great idea.

00:04:05,970 --> 00:04:11,239
Given the success they got, we will be double ing down our efforts to make them first-class

00:04:11,239 --> 00:04:14,540
citizens, as you will soon see.

00:04:14,540 --> 00:04:20,420
Finally, the last core value that we definitely should mention is the overall user experience.

00:04:20,420 --> 00:04:26,190
It doesn't seem of, but it's actually a big reason why our users say they use Yarn.

00:04:26,190 --> 00:04:31,440
The small things, like the run key while not being native, or the merge conflicts automatically

00:04:31,440 --> 00:04:32,940
being resolved.

00:04:32,940 --> 00:04:37,010
Those things aren't the big shiny things you typically that are on our side, but they are

00:04:37,010 --> 00:04:41,440
the comments that you use every day, the ones that shape your work flow, and that is something

00:04:41,440 --> 00:04:44,110
we keep in mind when working on the v2.

00:04:44,110 --> 00:04:49,570
Okay, so now we have to talk a bit about the elephant in the room: why are we even talking

00:04:49,570 --> 00:04:53,450
about a new major Yarn release today?

00:04:53,450 --> 00:04:59,170
About half of you use Yarn in your life with great success, so how would a new major release

00:04:59,170 --> 00:05:00,330
affect you?

00:05:00,330 --> 00:05:03,710
Do we really have something significant to bring to the table?

00:05:03,710 --> 00:05:06,160
If so, what?

00:05:06,160 --> 00:05:08,830
Something to realise is that Yarn got created in 2016.

00:05:08,830 --> 00:05:11,900
Since then, a lot of things happened.

00:05:11,900 --> 00:05:14,700
For one, we released a lot of major features.

00:05:14,700 --> 00:05:22,190
Work spaces in 2017, plug 'n' play in 2018, zip loading is coming in 2019, and we will

00:05:22,190 --> 00:05:23,710
go to that later.

00:05:23,710 --> 00:05:29,030
Our architecture needed a refresh to stay up to date with all those new concepts that

00:05:29,030 --> 00:05:34,510
didn't even exist when Yarn got created, and to support the new work flow they unlock.

00:05:34,510 --> 00:05:38,460
Additionally, Yarn got initially created as an npm clone.

00:05:38,460 --> 00:05:45,000
As such, we ... values behaviours that won't mesh well with the user experience we provide

00:05:45,000 --> 00:05:48,810
which is something we really care about.

00:05:48,810 --> 00:05:52,580
For those technical reasons, we needed to build something new, to build a new modern

00:05:52,580 --> 00:05:56,340
foundation more suited to what we had in mind.

00:05:56,340 --> 00:05:57,830
That's not the only reason.

00:05:57,830 --> 00:06:04,210
The main reason in my mind is that we wanted to give you more power.

00:06:04,210 --> 00:06:07,550
We wanted to make it easier for you to contribute to Yarn.

00:06:07,550 --> 00:06:13,080
To write your own features, to fix what blocks you, not to have to rely on us.

00:06:13,080 --> 00:06:15,300
After all, Yarn is a community project.

00:06:15,300 --> 00:06:19,110
We don't want to work for you, we want to work with you.

00:06:19,110 --> 00:06:23,880
So our architecture needed to reflect that, and for this reason, we decided to make it

00:06:23,880 --> 00:06:27,810
very modular so that you would be able to write your own plugins.

00:06:27,810 --> 00:06:33,630
In fact, most of the features in Yarn 2 are actually plugins that got aggregated together

00:06:33,630 --> 00:06:35,240
in a single binary.

00:06:35,240 --> 00:06:41,490
In the same vein, we moved our codebase to a more familiar stack-typescript, and we hoped

00:06:41,490 --> 00:06:46,080
that, by doing this, it will decrease the time needed for you to understand the pieces,

00:06:46,080 --> 00:06:51,340
how they fit together in such a way that you will be able to help us maintain this critical

00:06:51,340 --> 00:07:01,270
part of your infrastructure, and it's scope to ... enough about the abstract talk, let's

00:07:01,270 --> 00:07:08,120
delve a bit into what the next major version of Yarn will concretely bringing to the table.

00:07:08,120 --> 00:07:12,110
The first thing you will notice is that we revamped the output.

00:07:12,110 --> 00:07:16,540
What Yarn prints is how it communicates with you, and we wanted to make it easier for you

00:07:16,540 --> 00:07:21,630
to figure out what happens and highlight the most important information.

00:07:21,630 --> 00:07:28,000
This translates into important way: first, we know print message codes that can be Googled

00:07:28,000 --> 00:07:33,100
for more detail on what a specific message means, and, if if the in the case of errors,

00:07:33,100 --> 00:07:34,970
how to solve them.

00:07:34,970 --> 00:07:40,040
Secondly, we are now using colours with a specific purpose to highlight the dynamic

00:07:40,040 --> 00:07:42,460
parts of our messages.

00:07:42,460 --> 00:07:46,270
It's one of those very tiny things that I mention that happened to matter a lot when

00:07:46,270 --> 00:07:48,220
you work with Yarn every day.

00:07:48,220 --> 00:07:55,000
By using the colours at the right place, we aim to decrease the - you won't have to fight

00:07:55,000 --> 00:07:57,900
to understand it.

00:07:57,900 --> 00:08:00,140
The v2 also comes with new comments.

00:08:00,140 --> 00:08:04,300
You might have heard about Yarn creating the v1 which allowed you to download and run any

00:08:04,300 --> 00:08:07,780
package prefixed by the word "create".

00:08:07,780 --> 00:08:12,000
We decided to expand it and build Yarn DLX.

00:08:12,000 --> 00:08:18,860
That very similar to its sibling and PX can install packages from the registry.

00:08:18,860 --> 00:08:28,170
It allows you to run 1&1-off strips without having to revert your changes after the fact.

00:08:28,170 --> 00:08:30,930
Let's see a quick demonstration of it.

00:08:30,930 --> 00:08:36,930
So here, we are a JavaScript file which is webpack configuration, and we will want to

00:08:36,930 --> 00:08:37,930
minify it.

00:08:37,930 --> 00:08:46,000
Usually, we would have to add the minimum fire filter into our package at JSON and then

00:08:46,000 --> 00:08:53,550
remove it - but by using DLX, you just have to run Yarn DLX and the tame of the file,

00:08:53,550 --> 00:08:59,250
and Yarn will download everything's that is needed and run it locally.

00:08:59,250 --> 00:09:04,450
But even better, since we are using plug 'n' play, it means that we don't have to create

00:09:04,450 --> 00:09:13,890
... more, and DLX at the second invocation will be just as fast as it can be because

00:09:13,890 --> 00:09:16,830
we don't have to fetch the package again.

00:09:16,830 --> 00:09:25,750
If I run it again, it will be super fast.

00:09:25,750 --> 00:09:27,640
So that is for newcomers.

00:09:27,640 --> 00:09:29,090
We have other ones.

00:09:29,090 --> 00:09:32,280
We've also improved the existing ones.

00:09:32,280 --> 00:09:37,270
Various changes were made to make it easier to work with mono repos or fix long-standing

00:09:37,270 --> 00:09:39,050
issues peeve.

00:09:39,050 --> 00:09:44,920
Yarn hub can upgrade a package across all your at once.

00:09:44,920 --> 00:09:51,520
Yarn Link is able to properly resolve peer dependencies even when you link an external

00:09:51,520 --> 00:09:54,210
package into your current product.

00:09:54,210 --> 00:10:03,330
Yarn Ad accept an interactive flag that be instructs Yarn to ask you for advice in various

00:10:03,330 --> 00:10:04,330
situations.

00:10:04,330 --> 00:10:05,830
And it's not only a toy.

00:10:05,830 --> 00:10:11,710
The interactive mode, for example, allows you to quickly reuse a version of a package

00:10:11,710 --> 00:10:15,130
that another one of your work spaces is already using.

00:10:15,130 --> 00:10:21,080
You don't need to grab into your packager JSON any more to find that out.

00:10:21,080 --> 00:10:26,210
Speaking about - we are introducing constraints.

00:10:26,210 --> 00:10:32,930
Wouldn't it be nice if you could just check that your project obeys some rules?

00:10:32,930 --> 00:10:37,650
Like linting, some kind of ES lint, but for package.json.

00:10:37,650 --> 00:10:38,870
We thought so too.

00:10:38,870 --> 00:10:47,920
One of our newest conditions are constraints which are basically lints rules and written

00:10:47,920 --> 00:10:48,920
in prologue.

00:10:48,920 --> 00:10:52,050
Prologue makes them extremely small and powerful.

00:10:52,050 --> 00:11:01,940
In the example, you can see our work spaces forbids Babel listed as an a regular dependency.

00:11:01,940 --> 00:11:10,070
In fact, with only two more lines, we could extend this to automatically move the dependency

00:11:10,070 --> 00:11:14,360
within the dev dependency field.

00:11:14,360 --> 00:11:17,180
Constraints are very powerful, and they have many usages.

00:11:17,180 --> 00:11:21,320
You can see some of the screen, and we would provide some recipes in our documentation

00:11:21,320 --> 00:11:27,190
to get started, but you will quickly see that it is super easy to write new ones that are

00:11:27,190 --> 00:11:30,070
directly adapted to your use case.

00:11:30,070 --> 00:11:32,350
We can see them in practice a bit.

00:11:32,350 --> 00:11:37,820
So here, I have project with two work spaces: my front-end and my back-end.

00:11:37,820 --> 00:11:48,680
Both my front-end and back-end are depending on low dash except both are TypeScript and

00:11:48,680 --> 00:11:56,130
should depend on - it would be nice if there was a way to detect all of those problems

00:11:56,130 --> 00:11:59,250
and fix them as best as we can.

00:11:59,250 --> 00:12:04,810
Yarn as a newcomer, Yarn constraints check, when Yarn constraints check is called, it

00:12:04,810 --> 00:12:08,990
will validate the project against the defined rules, so, in this case, you can see that

00:12:08,990 --> 00:12:16,540
it has been able to detect that back-end and front-end must depend on TS ... and they depend

00:12:16,540 --> 00:12:18,860
on conflicting versions of lodash.

00:12:18,860 --> 00:12:27,120
If I run Yarn constraints fix, Yarn will automatically try to fix all the problems that it detects

00:12:27,120 --> 00:12:29,339
and can fix.

00:12:29,339 --> 00:12:35,160
In this case, for example, you can see that it is able to add TSLIB to the dependencies.

00:12:35,160 --> 00:12:41,300
It hasn't been able to correct the mismatch in lodash because it's ambiguous.

00:12:41,300 --> 00:12:43,360
It doesn't know which one you want to use.

00:12:43,360 --> 00:12:50,180
In order to fix those kind of issues, you have the good old Yarn Add.

00:12:50,180 --> 00:12:57,320
If you run that with interactive mode, Yarn will ask you which version of Yarn you want

00:12:57,320 --> 00:13:00,290
to use amongst multiple possible ones.

00:13:00,290 --> 00:13:05,830
In this situation, it is smart enough to tell you that lodash is already used in two work

00:13:05,830 --> 00:13:07,070
spaces.

00:13:07,070 --> 00:13:08,980
Which one do you want to use?

00:13:08,980 --> 00:13:15,310
By using this feature, you don't have to think about how should I fix the problem?

00:13:15,310 --> 00:13:24,630
You just have to validate and Yarn will automatically continue and do its stuff.

00:13:24,630 --> 00:13:33,480
You will see that all the ... have been properly fixed and everything has been applied.

00:13:33,480 --> 00:13:40,970
Now, something else we can do with constraint, because of how powerful they are, is using

00:13:40,970 --> 00:13:45,600
them as a query.

00:13:45,600 --> 00:13:52,290
By using Yarn constraints Query, you get to ask Yarn what do you know about my project?

00:13:52,290 --> 00:13:57,940
So, for example, in this case, by using one simple query, I'm able to ask Yarn to tell

00:13:57,940 --> 00:14:03,410
me all the dependencies and all the ranges in all of my work spaces.

00:14:03,410 --> 00:14:06,040
But I want - I can be more precise if I want to.

00:14:06,040 --> 00:14:13,630
I have to specify one of the parameters and Yarn will be able to filter those.

00:14:13,630 --> 00:14:18,660
That is the power of the constraints.

00:14:18,660 --> 00:14:23,510
Another feature that we are working on, and that is maybe the biggest feature that we

00:14:23,510 --> 00:14:27,100
will ship, is zero install.

00:14:27,100 --> 00:14:31,779
Zero install is not actually a feeling, it's more of a concept, and it's more aimed for

00:14:31,779 --> 00:14:36,940
applications than libraries, even though they work for both.

00:14:36,940 --> 00:14:42,210
The idea is never run Yarn Install again.

00:14:42,210 --> 00:14:45,650
That might remind you of something!

00:14:45,650 --> 00:14:52,130
The idea behind this is that if a code needs to run, this code will fail, even though we

00:14:52,130 --> 00:14:56,860
try our best to make a package manager that never fails, from time to time, we're not

00:14:56,860 --> 00:15:02,160
free of making a bug, or making a mistake, and is it will crash at some point, or if

00:15:02,160 --> 00:15:11,190
it is not us, maybe it's - maybe your file system will be run - that actually happened

00:15:11,190 --> 00:15:13,089
to me before.

00:15:13,089 --> 00:15:19,280
So, in order for something to work every time, it doesn't - it must not run.

00:15:19,280 --> 00:15:24,230
So, with the zero install, the concept is simple.

00:15:24,230 --> 00:15:27,880
You just add all your Yarn files into the repository.

00:15:27,880 --> 00:15:32,310
And then you don't need to run Yarn install because everything will be there.

00:15:32,310 --> 00:15:37,350
I know what you think that committing the directory bad.

00:15:37,350 --> 00:15:43,670
With plug 'n' play, we don't have a directory any more and plug 'n' play is the default

00:15:43,670 --> 00:15:44,670
in v2.

00:15:44,670 --> 00:15:52,990
The problem can committing non-models was that non-models contain 20,000 text files.

00:15:52,990 --> 00:15:55,900
You may remember that I mentioned zip loading before.

00:15:55,900 --> 00:16:03,980
With Yarn 2, instead of generating an unpacked cache, we just download each package that

00:16:03,980 --> 00:16:10,440
you use, and we store them within your project, or elsewhere if you don't want to.

00:16:10,440 --> 00:16:15,750
Which means that, for each package that you use, you will have exactly one archive.

00:16:15,750 --> 00:16:20,230
And that is peanuts for it to support.

00:16:20,230 --> 00:16:25,360
We discussed it with GitHub before breaking their infra, and they told us it would be

00:16:25,360 --> 00:16:28,540
fine.

00:16:28,540 --> 00:16:31,060
So what does zero install bring to the table?

00:16:31,060 --> 00:16:35,750
Kat mentioned it improves the developer experience by a large factor.

00:16:35,750 --> 00:16:42,670
We don't have to run Yarn style between git pull and checkout.

00:16:42,670 --> 00:16:49,279
Peer reviewers know which packet has been - they look at the file's change and see what

00:16:49,279 --> 00:16:52,000
has been added into the project.

00:16:52,000 --> 00:16:58,560
It is faster, simpler, and more stable for deployments, because again you don't have

00:16:58,560 --> 00:17:02,950
to run Yarn at all, so there is no risk of Yarn crashing in production.

00:17:02,950 --> 00:17:08,250
Additionally, you will always have exactly the same state on production as you have on

00:17:08,250 --> 00:17:11,079
development, because that is the guarantee we provide.

00:17:11,079 --> 00:17:14,780
If it works locally, it will work in production.

00:17:14,780 --> 00:17:20,289
Additionally, it allows you to skip the CI configuration step.

00:17:20,289 --> 00:17:27,179
So, in this case, we can see a quick demonstration of zero install, so you can see that we have

00:17:27,179 --> 00:17:29,789
a small project that is using webpack 3.

00:17:29,789 --> 00:17:35,909
We would like to update to webpack 4, so we create a new branch, and here, we will just

00:17:35,909 --> 00:17:38,910
run Yarn add webpack four.

00:17:38,910 --> 00:17:43,710
Yarn is now running, downloading be the dependencies as it always did.

00:17:43,710 --> 00:17:51,640
If we do after that git status, we will see something very interesting.

00:17:51,640 --> 00:17:57,230
But first, yes, you can see that webpack got updated correctly, of course.

00:17:57,230 --> 00:18:00,780
And now if we run GIT status, you can see something interesting.

00:18:00,780 --> 00:18:05,470
Instead of having ... we have as I mentioned one zip for each package.

00:18:05,470 --> 00:18:13,029
If we commit all this, then we have everything we need in order to run our applications.

00:18:13,029 --> 00:18:18,110
Let's say that suddenly a project manager comes into your room and says we need to fix

00:18:18,110 --> 00:18:23,649
this problem on master, and it needs to be done now, so here you need to give a switch

00:18:23,649 --> 00:18:29,309
quickly into the webpack 3 branch, make your child, and commit it.

00:18:29,309 --> 00:18:34,580
But just after switching, you don't have to run Yarn install because everything is like

00:18:34,580 --> 00:18:35,769
it should be.

00:18:35,769 --> 00:18:39,049
Your project is always in a good state.

00:18:39,049 --> 00:18:45,019
Once you're done, you just have to switch back on your webpack 4 and everything will

00:18:45,019 --> 00:18:47,019
work just the same.

00:18:47,019 --> 00:18:52,489
By having this work flow and the simplifying context switches, it makes you more productive

00:18:52,489 --> 00:18:55,889
because you can work on multiple features at any point in time.

00:18:55,889 --> 00:19:03,559
In fact, it's super useful for me and a Yarn maintainer, because I can quickly check out

00:19:03,559 --> 00:19:13,420
the pulls submitted to Yarn and fix them myself, something that was before very painful because

00:19:13,420 --> 00:19:23,110
I had to be careful in which state my project - it's now super easy, in fact, Yarn to itself

00:19:23,110 --> 00:19:32,499
is using zero install, so, for example, here, you can find that I'm - so it's a bit slower

00:19:32,499 --> 00:19:38,399
than it would be if you don't have those tar balls inside your repository but it's faster

00:19:38,399 --> 00:19:43,409
than it would be if you were to clone your repository and then run Yarn install.

00:19:43,409 --> 00:19:45,570
In the end, there's a kind of balance here.

00:19:45,570 --> 00:19:49,429
And, yes, there is a balance here.

00:19:49,429 --> 00:19:51,289
So the clone is about to finish.

00:19:51,289 --> 00:19:54,820
And starting from now, you can use any comment that you would typically use.

00:19:54,820 --> 00:19:58,470
For example, here, I can run the unit test for Yarn.

00:19:58,470 --> 00:20:02,110
I don't have to run Yarn install.

00:20:02,110 --> 00:20:03,809
Everything is already there.

00:20:03,809 --> 00:20:07,590
It makes it much easier for our contributors to jump into the project.

00:20:07,590 --> 00:20:10,419
They just have to clone and run the counter.

00:20:10,419 --> 00:20:12,380
They don't think more about it.

00:20:12,380 --> 00:20:15,100
Let's recap a bit.

00:20:15,100 --> 00:20:16,780
We have an improved login.

00:20:16,780 --> 00:20:18,429
We have new comments.

00:20:18,429 --> 00:20:20,259
We have improved comments.

00:20:20,259 --> 00:20:22,759
We have added packages and linting.

00:20:22,759 --> 00:20:25,440
We have removed the need to run Yarn Install.

00:20:25,440 --> 00:20:29,360
That has to be worth a major bump, right?

00:20:29,360 --> 00:20:31,799
That is the tip of the iceberg.

00:20:31,799 --> 00:20:36,419
This is only a 30-minute talk, and there is only so much that we can discuss here.

00:20:36,419 --> 00:20:41,080
Fortunately, we have a more comprehensive change log on our GitHub repository.

00:20:41,080 --> 00:20:44,809
I encourage you to look at it to see what is coming.

00:20:44,809 --> 00:20:50,690
The v2 is flagged as experimental but it's starting to become stable enough for your

00:20:50,690 --> 00:20:52,639
future projects.

00:20:52,639 --> 00:20:56,039
The official release is still to be determined but we are thinking somewhere in the second

00:20:56,039 --> 00:21:02,609
half of 2019 once we've ensured the transition path is as smooth as possible.

00:21:02,609 --> 00:21:08,059
A big thanks should go to our contributors, of course, because we have had the pleasure

00:21:08,059 --> 00:21:13,070
to welcome various you in people who simple stepped into the project and improved what

00:21:13,070 --> 00:21:14,669
the feature they liked.

00:21:14,669 --> 00:21:18,369
I said Yarn is a community project at the beginning of my talk.

00:21:18,369 --> 00:21:20,070
And I really meant it.

00:21:20,070 --> 00:21:22,519
We are always looking for new contributors.

00:21:22,519 --> 00:21:27,179
More than that, we are ready to go the extra mile and help you get started.

00:21:27,179 --> 00:21:31,919
Yarn is a huge project with a huge reach, a huge impact but we still aim to make it

00:21:31,919 --> 00:21:33,570
approachable by anyone.

00:21:33,570 --> 00:21:39,669
Plus we have cool T-shirts for the v2 if you contribute to the project, of course!

00:21:39,669 --> 00:21:40,970
So I will now leave you.

00:21:40,970 --> 00:21:43,340
I hope you enjoyed this talk.

00:21:43,340 --> 00:21:45,369
Please come ask your questions when you see me in the hall.

00:21:45,369 --> 00:21:48,190
I will be thrilled to share more about the work we do.

00:21:48,190 --> 00:21:51,590
Thank you, and have a good evening.

00:21:51,590 --> 00:21:54,279

YouTube URL: https://www.youtube.com/watch?v=XePfzVs852s


