Title: Push Button Receive Beacon - Bristol JS - July 2018
Publication date: 2018-08-08
Playlist: Bristol JS
Description: 
	Presented by Drew McLellan.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,980
so this is a lightning talk about

00:00:02,520 --> 00:00:08,599
something called the beacon API is

00:00:04,980 --> 00:00:11,580
anyone used the beacon API at all

00:00:08,599 --> 00:00:13,049
one person brilliant the reason it's a

00:00:11,580 --> 00:00:16,109
lightning talk is because it's a

00:00:13,049 --> 00:00:20,520
lightning small API there's very little

00:00:16,109 --> 00:00:22,439
code involved but mostly what you need

00:00:20,520 --> 00:00:24,240
to know is around the concept about why

00:00:22,439 --> 00:00:25,140
you'd use it and just kind of knowing

00:00:24,240 --> 00:00:27,359
it's there I think it's really useful

00:00:25,140 --> 00:00:29,310
there's so many things getting put into

00:00:27,359 --> 00:00:32,009
the web platform all the time that we

00:00:29,310 --> 00:00:33,329
don't necessarily know were there and if

00:00:32,009 --> 00:00:35,579
we don't know they're there we can't

00:00:33,329 --> 00:00:38,640
take advantage of them so called this

00:00:35,579 --> 00:00:42,300
push button receive beacon because I

00:00:38,640 --> 00:00:46,620
thought I was being funny but beacon API

00:00:42,300 --> 00:00:48,570
is say a JavaScript based web API that's

00:00:46,620 --> 00:00:50,640
in pretty much all modern browsers it's

00:00:48,570 --> 00:00:53,039
for sending a small amount of data from

00:00:50,640 --> 00:00:56,219
the browser to the server but without

00:00:53,039 --> 00:00:57,690
waiting for a response and that turns

00:00:56,219 --> 00:00:59,609
out to be a really really critical bit

00:00:57,690 --> 00:01:02,340
of the beacon API and why you'd use it

00:00:59,609 --> 00:01:03,420
so it's not only that you don't need to

00:01:02,340 --> 00:01:06,570
wait for a response you actually don't

00:01:03,420 --> 00:01:08,670
get a response from it file your data at

00:01:06,570 --> 00:01:11,549
the server and it doesn't return you

00:01:08,670 --> 00:01:12,930
anything so your server could do what it

00:01:11,549 --> 00:01:16,950
likes but you're never gonna know about

00:01:12,930 --> 00:01:19,950
it in your script it's a w3c candidate

00:01:16,950 --> 00:01:23,729
recommendation it's it's they're ready

00:01:19,950 --> 00:01:26,700
to use proper web standard so why would

00:01:23,729 --> 00:01:28,320
we want to send data from the browser to

00:01:26,700 --> 00:01:31,710
the server and not care what the server

00:01:28,320 --> 00:01:33,540
has to say about it turns out there are

00:01:31,710 --> 00:01:37,409
a few really really common things that

00:01:33,540 --> 00:01:39,990
we do that fall into that model one of

00:01:37,409 --> 00:01:43,380
them is analytics so doing things like

00:01:39,990 --> 00:01:45,600
you know logging pageviews logging how

00:01:43,380 --> 00:01:50,369
people interact with JavaScript based

00:01:45,600 --> 00:01:52,140
stuff you know interfaces timing how

00:01:50,369 --> 00:01:53,490
long people spend on a page all the

00:01:52,140 --> 00:01:55,799
sorts of things that like Google

00:01:53,490 --> 00:01:57,060
Analytics might give you in a general

00:01:55,799 --> 00:01:59,280
sense you want might want to do in a

00:01:57,060 --> 00:02:02,850
very specific sense specific sense in

00:01:59,280 --> 00:02:05,040
your application there's things like

00:02:02,850 --> 00:02:07,350
diagnostic logging say you've got some

00:02:05,040 --> 00:02:09,479
code which works absolutely fine for you

00:02:07,350 --> 00:02:11,650
but you keep getting reports in

00:02:09,479 --> 00:02:13,090
production from users who

00:02:11,650 --> 00:02:15,069
getting errors and you can't reproduce

00:02:13,090 --> 00:02:17,799
it well you might want to put some code

00:02:15,069 --> 00:02:20,260
in there to catch that error if it ever

00:02:17,799 --> 00:02:22,500
occurs and send some diagnostic stuff

00:02:20,260 --> 00:02:25,329
back to your server to help you debug it

00:02:22,500 --> 00:02:27,099
if you're running multivariate tests a/b

00:02:25,329 --> 00:02:28,930
tests that's the thing you could be

00:02:27,099 --> 00:02:30,189
gathering the results from those so

00:02:28,930 --> 00:02:33,400
there's there's all sorts of different

00:02:30,189 --> 00:02:35,739
ways basically anything that fits into a

00:02:33,400 --> 00:02:38,650
logging model where you would just like

00:02:35,739 --> 00:02:40,150
write it to a log file you can do the

00:02:38,650 --> 00:02:40,980
same from a browser but write it to the

00:02:40,150 --> 00:02:44,260
server

00:02:40,980 --> 00:02:47,200
now you might say hey drew we can do

00:02:44,260 --> 00:02:49,569
this already and you'd be right we can

00:02:47,200 --> 00:02:52,510
do it already we can do it with the

00:02:49,569 --> 00:02:55,209
fetch API anyway use the fetch API at

00:02:52,510 --> 00:02:57,099
all probably have even if you don't

00:02:55,209 --> 00:02:59,650
realize it your frameworks probably

00:02:57,099 --> 00:03:01,530
using it the fetch API is basically a

00:02:59,650 --> 00:03:05,799
nice modern standardized version of

00:03:01,530 --> 00:03:09,670
xmlhttprequest aka Ajax which we've had

00:03:05,799 --> 00:03:12,639
for what 12 years something like that

00:03:09,670 --> 00:03:14,769
so we can do this we can send stuff from

00:03:12,639 --> 00:03:17,410
the browser to the surf and no problems

00:03:14,769 --> 00:03:21,370
so why on earth would we need the beacon

00:03:17,410 --> 00:03:24,340
API what's all that about crucial thing

00:03:21,370 --> 00:03:26,730
unlike everything else the beacon API is

00:03:24,340 --> 00:03:29,430
non-blocking

00:03:26,730 --> 00:03:32,590
when I said you don't get a response

00:03:29,430 --> 00:03:34,599
from the server back to your code it's

00:03:32,590 --> 00:03:36,930
because we don't know when the browser

00:03:34,599 --> 00:03:40,959
is actually going to send that request

00:03:36,930 --> 00:03:44,979
when you use the beacon API you say to

00:03:40,959 --> 00:03:47,109
the browser okay send this data and then

00:03:44,979 --> 00:03:49,449
you just get back whether yes it's it's

00:03:47,109 --> 00:03:52,329
received that it that data will be sent

00:03:49,449 --> 00:03:53,709
or or no it there's a problem

00:03:52,329 --> 00:03:55,720
but the browser cues it in the

00:03:53,709 --> 00:04:01,239
background and it doesn't block the

00:03:55,720 --> 00:04:03,190
execution of your code turns out this is

00:04:01,239 --> 00:04:05,220
like really really super important

00:04:03,190 --> 00:04:08,079
especially for for things like analytics

00:04:05,220 --> 00:04:11,470
so say you were timing the amount of

00:04:08,079 --> 00:04:13,479
time somebody spent on your page you

00:04:11,470 --> 00:04:17,079
would start your timer when the page

00:04:13,479 --> 00:04:18,400
loads and when the page finishes when

00:04:17,079 --> 00:04:21,400
they when the user leaves the page

00:04:18,400 --> 00:04:24,190
that's when you want to log that data to

00:04:21,400 --> 00:04:29,440
the server if you're doing that with

00:04:24,190 --> 00:04:31,840
JPI or with xhr running the code to make

00:04:29,440 --> 00:04:34,630
the HTTP request would block the page

00:04:31,840 --> 00:04:37,120
unloading and would basically cause a

00:04:34,630 --> 00:04:39,190
delay in user navigating from one page

00:04:37,120 --> 00:04:42,280
to the next so your performance goes

00:04:39,190 --> 00:04:43,930
through the floor it just feels like

00:04:42,280 --> 00:04:45,970
either your site is laggy if that's

00:04:43,930 --> 00:04:47,170
where the next link is going to or if

00:04:45,970 --> 00:04:48,910
you're linking out to another site feels

00:04:47,170 --> 00:04:51,610
like the size of your linking out to is

00:04:48,910 --> 00:04:56,140
laggy because there's this weird delay

00:04:51,610 --> 00:04:58,960
after clicking the link because beacon

00:04:56,140 --> 00:05:00,340
queues the request the browser then just

00:04:58,960 --> 00:05:03,310
deals with it when it can so it might

00:05:00,340 --> 00:05:06,820
choose like moment when the CPU is is

00:05:03,310 --> 00:05:09,310
low or if the networks offline it might

00:05:06,820 --> 00:05:11,020
wait until it comes back online it's

00:05:09,310 --> 00:05:12,640
basically up to the browser to send that

00:05:11,020 --> 00:05:14,290
in a timely fashion

00:05:12,640 --> 00:05:16,840
it shouldn't hang on to it forever you

00:05:14,290 --> 00:05:19,150
should do it relatively soon but at the

00:05:16,840 --> 00:05:22,660
optimum moment and your code doesn't

00:05:19,150 --> 00:05:25,710
have to hang around for it ok so how

00:05:22,660 --> 00:05:30,280
would we use it it's really really

00:05:25,710 --> 00:05:32,140
really really simple there's a send

00:05:30,280 --> 00:05:35,770
beacon method on the navigator object

00:05:32,140 --> 00:05:37,360
and you takes two arguments one is a URL

00:05:35,770 --> 00:05:42,150
and the other is the data you want to

00:05:37,360 --> 00:05:44,230
send so I said it was lightning quick

00:05:42,150 --> 00:05:47,890
it's a little bit more complicated than

00:05:44,230 --> 00:05:49,750
that it returns a boolean so you know if

00:05:47,890 --> 00:05:51,130
the browser has accepted it or not you

00:05:49,750 --> 00:05:52,240
don't know anything has said what

00:05:51,130 --> 00:05:53,800
happens in the cervix that's going to

00:05:52,240 --> 00:05:56,530
happen while you're essentially

00:05:53,800 --> 00:05:57,820
disconnected from the process but the

00:05:56,530 --> 00:06:00,640
browser will tell you yet that's okay

00:05:57,820 --> 00:06:03,370
I've got that or no I'm not going to

00:06:00,640 --> 00:06:04,780
accept it for whatever isn't these

00:06:03,370 --> 00:06:08,530
requests are posted so when you give it

00:06:04,780 --> 00:06:09,880
some data it's an HTTP post and if

00:06:08,530 --> 00:06:11,590
you've used the fetch API there are

00:06:09,880 --> 00:06:13,570
several different types of body that you

00:06:11,590 --> 00:06:16,000
can send with the fetch API there's blob

00:06:13,570 --> 00:06:19,090
there's like these array buffer things

00:06:16,000 --> 00:06:20,410
there's form data you can send all these

00:06:19,090 --> 00:06:22,780
different types that are specified for

00:06:20,410 --> 00:06:25,150
the fetch API well these work the same

00:06:22,780 --> 00:06:26,890
for the beacon API if it's just key

00:06:25,150 --> 00:06:29,980
value stuff which it often is I like

00:06:26,890 --> 00:06:32,950
using form data so I might set up

00:06:29,980 --> 00:06:34,990
something like this is my URL and create

00:06:32,950 --> 00:06:35,970
some data which is a new form data then

00:06:34,990 --> 00:06:39,480
give it hello and

00:06:35,970 --> 00:06:42,090
world then purchase Poseidon a vagator

00:06:39,480 --> 00:06:45,150
Datsun beacon to this URL here's the

00:06:42,090 --> 00:06:46,590
data and I find out if it's been cured

00:06:45,150 --> 00:06:48,450
or not and as far as my servers

00:06:46,590 --> 00:06:50,490
concerned that'll just come through as

00:06:48,450 --> 00:06:52,370
if it were forum posted so they'll just

00:06:50,490 --> 00:06:56,100
be post variables I'll get the variable

00:06:52,370 --> 00:07:00,350
hello is equal to the value of world so

00:06:56,100 --> 00:07:03,390
really really easy browser support is

00:07:00,350 --> 00:07:07,770
surprisingly Eric it doesn't work in IE

00:07:03,390 --> 00:07:10,140
oh well but it is there an edge it's not

00:07:07,770 --> 00:07:15,480
there or not / mini yeah well but it is

00:07:10,140 --> 00:07:18,270
there in every other mobile device so

00:07:15,480 --> 00:07:20,970
pretty good support and the nice thing

00:07:18,270 --> 00:07:23,430
with it is there is really really easy

00:07:20,970 --> 00:07:25,890
to test if it's there or not you can

00:07:23,430 --> 00:07:29,280
just literally say if navigator dot same

00:07:25,890 --> 00:07:31,890
beacon and if it's not there well maybe

00:07:29,280 --> 00:07:33,600
you could fall back to xhr or something

00:07:31,890 --> 00:07:36,540
that that those older browsers going to

00:07:33,600 --> 00:07:39,630
understand or maybe you don't care that

00:07:36,540 --> 00:07:41,940
much depends what you're doing and

00:07:39,630 --> 00:07:45,840
depends on your audience of course so

00:07:41,940 --> 00:07:48,000
really really successful so say about

00:07:45,840 --> 00:07:51,780
you know timing a page those who put

00:07:48,000 --> 00:07:54,270
that into practice you know you your

00:07:51,780 --> 00:07:57,270
page loads set a global variable start

00:07:54,270 --> 00:07:58,919
time using performance now just to give

00:07:57,270 --> 00:08:00,630
me a nice easy timestamp I don't care

00:07:58,919 --> 00:08:03,270
actually what time of day it is just a

00:08:00,630 --> 00:08:07,020
timestamp and then right at the bottom

00:08:03,270 --> 00:08:09,300
using the before unload event and then

00:08:07,020 --> 00:08:12,080
calling my function which is just going

00:08:09,300 --> 00:08:16,410
to test to see if beacon is available

00:08:12,080 --> 00:08:17,730
and if it is it'll pull in that global

00:08:16,410 --> 00:08:21,210
variable to start time send that to

00:08:17,730 --> 00:08:25,650
start grab the current time send that

00:08:21,210 --> 00:08:26,490
has end and the URL the document and so

00:08:25,650 --> 00:08:29,010
if it can do the rest

00:08:26,490 --> 00:08:31,919
nice and easy interestingly I'm using

00:08:29,010 --> 00:08:35,370
before unload rather than unload itself

00:08:31,919 --> 00:08:36,810
because Safari on the Mac through

00:08:35,370 --> 00:08:40,039
security warnings if you try and do

00:08:36,810 --> 00:08:42,659
anything to have beacon in the unload

00:08:40,039 --> 00:08:44,310
event who knows why I couldn't find out

00:08:42,659 --> 00:08:46,380
why well I could find this frustrated

00:08:44,310 --> 00:08:47,720
people experiencing it but it works fine

00:08:46,380 --> 00:08:51,200
with before unload and

00:08:47,720 --> 00:08:53,000
effectively will give you in most cases

00:08:51,200 --> 00:08:54,770
the same thing unless you've got

00:08:53,000 --> 00:08:57,200
something else also running on before

00:08:54,770 --> 00:09:01,940
unload which cancels the event edge

00:08:57,200 --> 00:09:04,370
cases a couple of considerations for so

00:09:01,940 --> 00:09:07,370
much this to do with logging it's always

00:09:04,370 --> 00:09:09,290
worth thinking about things like GDP are

00:09:07,370 --> 00:09:12,320
you know what are you logging if you're

00:09:09,290 --> 00:09:14,690
identifying sessions is that within the

00:09:12,320 --> 00:09:16,670
scope of what your current policies say

00:09:14,690 --> 00:09:20,320
should do so that's always worth

00:09:16,670 --> 00:09:23,240
thinking about it's not just email and

00:09:20,320 --> 00:09:26,570
do not track header people come across

00:09:23,240 --> 00:09:27,860
do not track header at all it's an

00:09:26,570 --> 00:09:30,320
option you get in your browser where you

00:09:27,860 --> 00:09:32,570
can express that you would rather things

00:09:30,320 --> 00:09:35,300
didn't track you and it gets sent

00:09:32,570 --> 00:09:37,820
through as an HTTP header either DMT 0

00:09:35,300 --> 00:09:40,520
for I don't care about that or dnt one

00:09:37,820 --> 00:09:42,320
please do not track me and if you're

00:09:40,520 --> 00:09:44,900
being nice and polite you would look for

00:09:42,320 --> 00:09:46,880
that header and if you're doing track in

00:09:44,900 --> 00:09:48,970
perhaps anonymize to have in your

00:09:46,880 --> 00:09:51,320
tracking or just don't track it

00:09:48,970 --> 00:09:53,390
obviously depending on on what it is

00:09:51,320 --> 00:09:55,790
you're doing that's it that's the beacon

00:09:53,390 --> 00:10:00,470
API dead easy just useful notes there

00:09:55,790 --> 00:10:02,180
and I'm a dream and all my slides are on

00:10:00,470 --> 00:10:05,330
noticed which is where the best people

00:10:02,180 --> 00:10:08,150
put in all their slides these days not I

00:10:05,330 --> 00:10:10,100
built it or anything but noticed slash

00:10:08,150 --> 00:10:11,530
drew em is where you find all that yeah

00:10:10,100 --> 00:10:16,190
thank you very much

00:10:11,530 --> 00:10:16,190

YouTube URL: https://www.youtube.com/watch?v=OY-TuKBu0CI


