Title: Hidden Benefits of Unit Tests - Bristol JS - April 2019
Publication date: 2019-05-08
Playlist: Bristol JS
Description: 
	Rachel Davies - Hidden Benefits of Unit Tests

Unit tests provide a quick way for us to confirm our code is working as we expect but many developers remain unconvinced whether it's worth investing time writing unit tests especially in front-end projects. Once we have implemented a working solution, there's often pressure to move on to adding more crowd-pleasing features rather than trying to wrap our code with tests. However, the benefit of writing unit tests is not limited to automated checking our code still works. In this talk, I'll share some less obvious benefits for investing time writing unit tests with some examples drawn from a recent project using GraphQL.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,549
so a bit about me just so you know kind

00:00:03,060 --> 00:00:08,309
of background wise at the moment I work

00:00:05,549 --> 00:00:10,200
as a full-stack JavaScript software

00:00:08,309 --> 00:00:11,820
engineer I work for a company called

00:00:10,200 --> 00:00:14,700
tears watch I'll just say briefly a

00:00:11,820 --> 00:00:16,590
little bit about in a minute I'm in the

00:00:14,700 --> 00:00:19,470
lucky position that I work from home so

00:00:16,590 --> 00:00:21,300
I live in bath I used to commute to

00:00:19,470 --> 00:00:24,390
London for years and years and I hated

00:00:21,300 --> 00:00:26,430
it and the main reason why I kind of

00:00:24,390 --> 00:00:27,990
made the shift away from consulting and

00:00:26,430 --> 00:00:31,019
back into development is so that I can

00:00:27,990 --> 00:00:33,210
work from home and it's great my commute

00:00:31,019 --> 00:00:39,480
is go downstairs we'll come back inside

00:00:33,210 --> 00:00:41,430
from outside and my background and what

00:00:39,480 --> 00:00:44,250
why I proposed this topic is because

00:00:41,430 --> 00:00:46,410
about 20 years ago and that seems like a

00:00:44,250 --> 00:00:48,989
really long time ago probably most of

00:00:46,410 --> 00:00:51,570
you is that I was one of the first

00:00:48,989 --> 00:00:54,059
people in the UK interested in extreme

00:00:51,570 --> 00:00:58,050
programming test-driven development so I

00:00:54,059 --> 00:00:59,850
have an interest in testing we were

00:00:58,050 --> 00:01:01,050
using JavaScript at the time but

00:00:59,850 --> 00:01:04,049
JavaScript was a very different language

00:01:01,050 --> 00:01:05,640
so I won't say how we were using it we

00:01:04,049 --> 00:01:07,979
were mostly pushing all the logic to the

00:01:05,640 --> 00:01:10,470
server side so that we could test on

00:01:07,979 --> 00:01:14,070
that side and not testing at the front

00:01:10,470 --> 00:01:18,000
end the company I work for

00:01:14,070 --> 00:01:20,189
so tez people who were involved in the

00:01:18,000 --> 00:01:22,080
world of teaching they have heard of

00:01:20,189 --> 00:01:23,700
toes and pretty much anyone else you

00:01:22,080 --> 00:01:27,840
speak to has never heard of toes and

00:01:23,700 --> 00:01:29,970
they're like days what's that it's was

00:01:27,840 --> 00:01:32,759
Times Educational Supplement I think we

00:01:29,970 --> 00:01:37,530
still publish that publication but now

00:01:32,759 --> 00:01:40,200
our website is for teachers to find jobs

00:01:37,530 --> 00:01:43,860
and teacher resources and stuff like

00:01:40,200 --> 00:01:46,740
that it has a great architecture where

00:01:43,860 --> 00:01:50,869
it's actually all microservices based

00:01:46,740 --> 00:01:55,409
it's all JavaScript front-end is

00:01:50,869 --> 00:01:56,820
typically react and back-end node we

00:01:55,409 --> 00:02:01,680
have lots of tests we have lots of

00:01:56,820 --> 00:02:06,390
continuous integration we have about 50

00:02:01,680 --> 00:02:08,849
I think it's 56 or something engineers

00:02:06,390 --> 00:02:11,099
who work there and we work for most of

00:02:08,849 --> 00:02:13,200
us work remotely so we have to figure

00:02:11,099 --> 00:02:13,709
out how to do things when we're not all

00:02:13,200 --> 00:02:18,450
together

00:02:13,709 --> 00:02:20,670
so tests can help sometimes and we have

00:02:18,450 --> 00:02:23,750
this remote first culture so we have

00:02:20,670 --> 00:02:26,370
some ways of working that help us

00:02:23,750 --> 00:02:27,989
basically not bunk off all the time and

00:02:26,370 --> 00:02:31,349
actually be focused on what we're doing

00:02:27,989 --> 00:02:34,680
and not forget people are not enough on

00:02:31,349 --> 00:02:36,569
the in the office I tried to think of

00:02:34,680 --> 00:02:40,560
what an introduction to unit test would

00:02:36,569 --> 00:02:42,750
be and I have thought well what's the

00:02:40,560 --> 00:02:45,329
test well so because I was actually

00:02:42,750 --> 00:02:47,220
sitting next to somebody last time who

00:02:45,329 --> 00:02:48,900
didn't know what test was and that's

00:02:47,220 --> 00:02:50,519
fair enough because I think lots of the

00:02:48,900 --> 00:02:52,500
tutorials that you do with new

00:02:50,519 --> 00:02:54,480
JavaScript frameworks they kind of I've

00:02:52,500 --> 00:02:56,609
even seen some that say delete these

00:02:54,480 --> 00:02:59,129
tests that you know create create react

00:02:56,609 --> 00:03:03,569
apps crates for you and things like that

00:02:59,129 --> 00:03:06,239
so a test is some code that you write to

00:03:03,569 --> 00:03:07,169
check that your production code or the

00:03:06,239 --> 00:03:09,810
code that you're actually going to

00:03:07,169 --> 00:03:12,750
deliver to people is working so you

00:03:09,810 --> 00:03:14,400
write a program to test the program but

00:03:12,750 --> 00:03:14,730
then the good thing is you don't have to

00:03:14,400 --> 00:03:16,409
go

00:03:14,730 --> 00:03:18,840
click-click click-click click-click and

00:03:16,409 --> 00:03:21,510
keep trying to reload and reload reload

00:03:18,840 --> 00:03:23,790
so the idea is that you use your coding

00:03:21,510 --> 00:03:29,939
skills to help you check stuff is

00:03:23,790 --> 00:03:33,930
working so but when people talk about

00:03:29,939 --> 00:03:36,689
unit tests what unit means is pretty

00:03:33,930 --> 00:03:38,909
vague it's not it's something smaller

00:03:36,689 --> 00:03:40,349
than the whole thing so people when they

00:03:38,909 --> 00:03:42,060
are testing from the outside of the

00:03:40,349 --> 00:03:45,000
application that they usually talking

00:03:42,060 --> 00:03:46,739
about acceptance tests and when you're

00:03:45,000 --> 00:03:50,430
talking about testing your component or

00:03:46,739 --> 00:03:52,379
testing a function you these green

00:03:50,430 --> 00:03:53,729
things are meant to be the tests these

00:03:52,379 --> 00:03:55,470
brown things are meant to be the

00:03:53,729 --> 00:03:56,970
production code you might just call the

00:03:55,470 --> 00:03:59,959
police and say this is a lump of code

00:03:56,970 --> 00:04:03,659
that I can test with by writing a

00:03:59,959 --> 00:04:07,189
program there are many test frameworks I

00:04:03,659 --> 00:04:09,629
don't have a favorite I'm not going to

00:04:07,189 --> 00:04:11,489
extol the virtues of any particular one

00:04:09,629 --> 00:04:14,069
probably the examples I'm going to show

00:04:11,489 --> 00:04:17,190
you are in mocker using various

00:04:14,069 --> 00:04:20,690
different assertions and stuff here is a

00:04:17,190 --> 00:04:26,090
simple test I don't know if you can read

00:04:20,690 --> 00:04:29,210
the code there but basically this

00:04:26,090 --> 00:04:30,889
test here so I was trying to think of

00:04:29,210 --> 00:04:34,760
something that's a very easy thing right

00:04:30,889 --> 00:04:37,790
so the outer block is you write

00:04:34,760 --> 00:04:39,740
something that describes what you're

00:04:37,790 --> 00:04:42,430
going to test so that it's the describe

00:04:39,740 --> 00:04:47,780
you were describing what an array does

00:04:42,430 --> 00:04:49,820
then inside of that array has various

00:04:47,780 --> 00:04:51,919
different functions so you might then

00:04:49,820 --> 00:04:54,530
pick one of those functions and then

00:04:51,919 --> 00:04:58,040
have the different scenarios that that

00:04:54,530 --> 00:05:02,090
function would respond to so for example

00:04:58,040 --> 00:05:06,590
array index of so in my example first

00:05:02,090 --> 00:05:08,990
example right if I have an array and it

00:05:06,590 --> 00:05:11,720
has a banana and apricot in it I'm

00:05:08,990 --> 00:05:14,410
looking after there's a typo in there so

00:05:11,720 --> 00:05:16,760
I did fix this typo but then I obviously

00:05:14,410 --> 00:05:18,620
didn't if there should be a quote there

00:05:16,760 --> 00:05:21,800
and I quote there these should be two

00:05:18,620 --> 00:05:24,290
strings but what colored whether there

00:05:21,800 --> 00:05:27,410
is a string with a comma in it or not if

00:05:24,290 --> 00:05:29,419
you look for an apple in the array that

00:05:27,410 --> 00:05:32,419
doesn't contain an apple you should

00:05:29,419 --> 00:05:34,820
expect it to return you minus one so the

00:05:32,419 --> 00:05:38,990
idea is that you have your subject to

00:05:34,820 --> 00:05:42,560
your test then you invoke the thing that

00:05:38,990 --> 00:05:45,530
you expect to happen say the result and

00:05:42,560 --> 00:05:48,560
then check it matches what you expect a

00:05:45,530 --> 00:05:51,229
new tenten write tests for the abnormal

00:05:48,560 --> 00:05:53,360
scenarios and the normal scenarios so

00:05:51,229 --> 00:05:55,039
like the abnormal scenario is I'm

00:05:53,360 --> 00:05:58,039
looking for thing and I don't find it

00:05:55,039 --> 00:05:59,060
but the more normal thing is like a way

00:05:58,039 --> 00:06:02,150
I'm looking for thing

00:05:59,060 --> 00:06:04,760
what should it give me so and then this

00:06:02,150 --> 00:06:06,260
is slightly counterintuitive for people

00:06:04,760 --> 00:06:09,590
who are not thinking about zero indexed

00:06:06,260 --> 00:06:13,130
arrays so if I have an array of one two

00:06:09,590 --> 00:06:15,919
three and then I do index of three I

00:06:13,130 --> 00:06:19,940
expect the result to be two because it's

00:06:15,919 --> 00:06:25,880
a zero one two so this is a very simple

00:06:19,940 --> 00:06:27,530
example of what tests look like I did

00:06:25,880 --> 00:06:29,120
some googling around for definitions and

00:06:27,530 --> 00:06:33,470
things and I thought this is a good way

00:06:29,120 --> 00:06:37,520
of explaining how you tip tend to

00:06:33,470 --> 00:06:39,440
structure a test so tests tend to have

00:06:37,520 --> 00:06:42,320
the beginning where you're getting

00:06:39,440 --> 00:06:44,750
things set up in the world is before you

00:06:42,320 --> 00:06:48,320
try invoking what you're going to try

00:06:44,750 --> 00:06:51,140
and then so you arranged you set up your

00:06:48,320 --> 00:06:54,020
preconditions and and inputs you act on

00:06:51,140 --> 00:06:57,080
your component or your function and then

00:06:54,020 --> 00:06:59,270
you assert you check what did I get back

00:06:57,080 --> 00:07:01,040
is it what I was expecting and then the

00:06:59,270 --> 00:07:03,140
idea really is that you can build all of

00:07:01,040 --> 00:07:08,750
these things into Suites so that you can

00:07:03,140 --> 00:07:10,370
remember slots of tests and here is an

00:07:08,750 --> 00:07:12,590
example I just put some comments in on

00:07:10,370 --> 00:07:16,070
the previous tests to kind of illustrate

00:07:12,590 --> 00:07:19,400
so range is the beginning part where you

00:07:16,070 --> 00:07:21,620
say I'm creating this array and this is

00:07:19,400 --> 00:07:23,270
what I expect and this is this is the

00:07:21,620 --> 00:07:27,400
value of the thing I'm expecting to get

00:07:23,270 --> 00:07:29,990
back then you have your I'm calling

00:07:27,400 --> 00:07:32,420
index of on my array under tasks and

00:07:29,990 --> 00:07:34,580
then you at the end have here is my

00:07:32,420 --> 00:07:36,410
expected results so it's just a way of

00:07:34,580 --> 00:07:38,390
structuring and very often and I

00:07:36,410 --> 00:07:40,940
probably in the next example you'll see

00:07:38,390 --> 00:07:43,310
people collapse this right down and then

00:07:40,940 --> 00:07:46,160
sometimes it's harder to see what the

00:07:43,310 --> 00:07:48,410
test is really trying to do but it can

00:07:46,160 --> 00:07:55,370
be especially when you're new to writing

00:07:48,410 --> 00:07:57,919
tests it's a good way to start so as

00:07:55,370 --> 00:08:00,290
somebody who's used to writing lots of

00:07:57,919 --> 00:08:01,820
tests and working code bases that do

00:08:00,290 --> 00:08:04,730
have lots of tests because I've been

00:08:01,820 --> 00:08:07,040
working the world of Java and not

00:08:04,730 --> 00:08:08,540
JavaScript it's really quite strange to

00:08:07,040 --> 00:08:10,550
come to JavaScript done you know you're

00:08:08,540 --> 00:08:11,780
like that loads of big code bases with

00:08:10,550 --> 00:08:13,520
not many tests and you're trying to

00:08:11,780 --> 00:08:14,990
figure out what does this do and it's

00:08:13,520 --> 00:08:17,330
really nice if you have some tests

00:08:14,990 --> 00:08:20,000
because the tests actually give you some

00:08:17,330 --> 00:08:23,150
documentation they say this is this

00:08:20,000 --> 00:08:28,550
function expects to get data of this

00:08:23,150 --> 00:08:30,200
kind of input and this is how it handles

00:08:28,550 --> 00:08:32,240
it and you know here are the error cases

00:08:30,200 --> 00:08:33,770
it's expecting to handle and this kind

00:08:32,240 --> 00:08:37,610
of way that you would expect to interact

00:08:33,770 --> 00:08:39,560
with it so one big value apart from the

00:08:37,610 --> 00:08:42,169
value of making sure your code is still

00:08:39,560 --> 00:08:45,800
working is also leaving some

00:08:42,169 --> 00:08:47,330
documentation behind for the people who

00:08:45,800 --> 00:08:50,450
come along afterwards who are trying to

00:08:47,330 --> 00:08:52,400
figure out what your code does so that's

00:08:50,450 --> 00:08:53,030
one of the things that's valuable and

00:08:52,400 --> 00:08:55,280
they

00:08:53,030 --> 00:08:57,740
talk is about the hidden benefits of

00:08:55,280 --> 00:08:59,450
unit tests this is not a hidden benefit

00:08:57,740 --> 00:09:05,120
this is one of the more obvious benefits

00:08:59,450 --> 00:09:09,290
so oops so here's another example and I

00:09:05,120 --> 00:09:11,510
just actually I just took this from one

00:09:09,290 --> 00:09:13,970
of the projects I was working on in the

00:09:11,510 --> 00:09:16,540
summer so it's and you can see how it is

00:09:13,970 --> 00:09:19,420
not really broke broken down into those

00:09:16,540 --> 00:09:23,030
three A's at all it's just like one line

00:09:19,420 --> 00:09:25,580
so but it's what it's doing it's quite a

00:09:23,030 --> 00:09:27,530
useful thing which is it's explaining

00:09:25,580 --> 00:09:30,650
the validation function for email

00:09:27,530 --> 00:09:35,530
addresses how it works and what you'd

00:09:30,650 --> 00:09:35,530
expect to happen so the first thing is

00:09:35,740 --> 00:09:42,140
it's kind of counterintuitive because a

00:09:39,140 --> 00:09:45,200
validation function gives you a text

00:09:42,140 --> 00:09:46,790
message when it's not a valid thing when

00:09:45,200 --> 00:09:48,500
it is a valid thing doesn't give you

00:09:46,790 --> 00:09:53,390
anything because it's giving you an

00:09:48,500 --> 00:09:55,730
error message to show so if you have an

00:09:53,390 --> 00:10:00,230
invalid email then you expect it to give

00:09:55,730 --> 00:10:02,090
you a message but if you have but what

00:10:00,230 --> 00:10:05,420
one of the interesting scenarios kind of

00:10:02,090 --> 00:10:07,520
is what does it give you if you give it

00:10:05,420 --> 00:10:12,110
an empty value it's like invalid or is

00:10:07,520 --> 00:10:14,630
that valid and so in a way this

00:10:12,110 --> 00:10:17,750
documents and helps you to see that's

00:10:14,630 --> 00:10:20,480
what the email validation does if you

00:10:17,750 --> 00:10:25,160
have an empty thing you won't get a

00:10:20,480 --> 00:10:32,240
failure you will get undefined so that's

00:10:25,160 --> 00:10:34,910
just a small example now because my

00:10:32,240 --> 00:10:39,650
background is more from outside the

00:10:34,910 --> 00:10:42,970
JavaScript world I read a lot of the

00:10:39,650 --> 00:10:47,540
work of Martin Fowler back in the 2000

00:10:42,970 --> 00:10:49,820
and he has recently actually published a

00:10:47,540 --> 00:10:52,480
book about refactoring he's republished

00:10:49,820 --> 00:10:55,760
this book which was originally published

00:10:52,480 --> 00:10:57,470
back in 2000 but now we published it and

00:10:55,760 --> 00:10:59,900
he's filled it with JavaScript examples

00:10:57,470 --> 00:11:02,420
which is great and he talks about in

00:10:59,900 --> 00:11:05,450
that book his thinking process around

00:11:02,420 --> 00:11:06,170
how he develops code and a big part of

00:11:05,450 --> 00:11:09,290
his thing

00:11:06,170 --> 00:11:13,730
process is how the code is developed

00:11:09,290 --> 00:11:15,529
with tests and this is one mindset that

00:11:13,730 --> 00:11:17,450
people have is like they actually write

00:11:15,529 --> 00:11:20,060
the test as they're writing the code

00:11:17,450 --> 00:11:22,070
rather than writing a lot of things when

00:11:20,060 --> 00:11:24,199
it's working going at all I'll just

00:11:22,070 --> 00:11:25,910
write a few tests afterwards so this

00:11:24,199 --> 00:11:30,889
this idea that you would write the test

00:11:25,910 --> 00:11:33,829
as you go along and he explains that for

00:11:30,889 --> 00:11:36,170
some tests you can he have but this idea

00:11:33,829 --> 00:11:38,510
that this some when you're trying to

00:11:36,170 --> 00:11:41,600
think what is a unit it can be a

00:11:38,510 --> 00:11:44,180
function totally isolated on its own and

00:11:41,600 --> 00:11:46,399
you give it fake things so it doesn't

00:11:44,180 --> 00:11:49,940
really know it's not using any of the

00:11:46,399 --> 00:11:53,630
rest of the application you give it what

00:11:49,940 --> 00:11:55,550
people call mock objects stubs but you

00:11:53,630 --> 00:11:57,740
have a way of detaching it from the real

00:11:55,550 --> 00:12:00,709
world so you're just literally testing

00:11:57,740 --> 00:12:02,240
this thing on its own or the other style

00:12:00,709 --> 00:12:05,209
of unit test is you're testing the

00:12:02,240 --> 00:12:06,320
function and it is you really using the

00:12:05,209 --> 00:12:08,329
other things that would normally

00:12:06,320 --> 00:12:10,730
collaborate with so you're testing more

00:12:08,329 --> 00:12:13,600
than just one thing you're testing also

00:12:10,730 --> 00:12:20,449
the other things that it's working with

00:12:13,600 --> 00:12:23,990
so Diaries there are there's a word for

00:12:20,449 --> 00:12:25,970
this that didn't originally exist I was

00:12:23,990 --> 00:12:27,529
actually working the first company where

00:12:25,970 --> 00:12:31,279
they came up with the idea of mock

00:12:27,529 --> 00:12:35,540
objects but as it turns out there are

00:12:31,279 --> 00:12:38,269
different ways of faking out reality

00:12:35,540 --> 00:12:41,779
when you're testing a small thing so one

00:12:38,269 --> 00:12:46,040
thing is to write some code this is a

00:12:41,779 --> 00:12:53,180
step for a stub is where you set it up

00:12:46,040 --> 00:12:55,250
so that it acts as the thing that's

00:12:53,180 --> 00:12:57,100
supposed to be there but it always gives

00:12:55,250 --> 00:13:02,290
a particular response so you can say

00:12:57,100 --> 00:13:07,699
here's your response give it back and

00:13:02,290 --> 00:13:10,579
then you have other different flavors

00:13:07,699 --> 00:13:12,319
and the thing is that when you actually

00:13:10,579 --> 00:13:14,870
look at the different frameworks they

00:13:12,319 --> 00:13:18,350
don't really map to this anymore so you

00:13:14,870 --> 00:13:20,259
have for instance spies that can tell

00:13:18,350 --> 00:13:27,169
you whether they were cool

00:13:20,259 --> 00:13:28,819
and a thing that when what you find is

00:13:27,169 --> 00:13:31,129
that quite often these terms are used

00:13:28,819 --> 00:13:34,160
interchangeably but they do actually

00:13:31,129 --> 00:13:35,779
have a more precise meaning so sometimes

00:13:34,160 --> 00:13:38,989
people say oh yeah just knock that out

00:13:35,779 --> 00:13:41,239
and they might mean write a stub write a

00:13:38,989 --> 00:13:42,709
spy and then actually in JavaScript

00:13:41,239 --> 00:13:44,869
there is actually different frameworks

00:13:42,709 --> 00:13:46,639
you could use and those deep different

00:13:44,869 --> 00:13:51,679
frameworks might have the option to do

00:13:46,639 --> 00:13:54,109
these different things so I'm not saying

00:13:51,679 --> 00:13:56,720
this particular mocking framework or

00:13:54,109 --> 00:13:59,029
this spy framework is better than the

00:13:56,720 --> 00:14:00,470
other I'm just saying be aware of it

00:13:59,029 --> 00:14:01,730
because it's one of the things that can

00:14:00,470 --> 00:14:05,019
be very useful you when you're writing

00:14:01,730 --> 00:14:07,129
your tests and I will give an example

00:14:05,019 --> 00:14:09,589
recently on a project where we've been

00:14:07,129 --> 00:14:14,809
using graph QL where we've been using

00:14:09,589 --> 00:14:15,980
mocks to set up the graph QL part so I

00:14:14,809 --> 00:14:16,730
can't remember whether that comes next

00:14:15,980 --> 00:14:20,749
or not though

00:14:16,730 --> 00:14:22,609
ah yes no something else comes back so

00:14:20,749 --> 00:14:25,519
this is what I've been recently working

00:14:22,609 --> 00:14:29,600
on and so this is just writing unit

00:14:25,519 --> 00:14:31,999
tests for just a simple react component

00:14:29,600 --> 00:14:34,910
so I've been working on an image

00:14:31,999 --> 00:14:37,459
uploader component but the design of God

00:14:34,910 --> 00:14:40,249
I I don't I haven't got the whole of the

00:14:37,459 --> 00:14:44,600
design here but the design of the scope

00:14:40,249 --> 00:14:47,869
component is if this component is in

00:14:44,600 --> 00:14:50,989
this initialized without an existing

00:14:47,869 --> 00:14:52,759
value it shows would you like an upload

00:14:50,989 --> 00:14:54,889
button because don't your up your option

00:14:52,759 --> 00:14:55,730
is when you don't have a value upload

00:14:54,889 --> 00:14:59,480
something at least

00:14:55,730 --> 00:15:02,329
but once you've uploaded it it should

00:14:59,480 --> 00:15:05,269
display in this format at the bottom

00:15:02,329 --> 00:15:06,769
where it shows you know the lit so this

00:15:05,269 --> 00:15:09,470
so like a little thumbnail of what the

00:15:06,769 --> 00:15:13,660
image you upload it was then there's the

00:15:09,470 --> 00:15:16,309
name of the original file not the URL

00:15:13,660 --> 00:15:19,369
then there's like a little trashcan

00:15:16,309 --> 00:15:20,660
button so it's got it's it's the the

00:15:19,369 --> 00:15:23,569
kind of component that's slightly

00:15:20,660 --> 00:15:25,369
annoying to write because it's both this

00:15:23,569 --> 00:15:28,579
kind of button and this kind of button

00:15:25,369 --> 00:15:31,639
and so you can't and then even if you

00:15:28,579 --> 00:15:33,580
write a file load up but a file load up

00:15:31,639 --> 00:15:37,840
load

00:15:33,580 --> 00:15:40,330
you have to it has if you use the native

00:15:37,840 --> 00:15:43,120
component it has a message which says

00:15:40,330 --> 00:15:46,300
something like no files choosen which is

00:15:43,120 --> 00:15:48,250
like total in a graphical English that

00:15:46,300 --> 00:15:50,140
you have to kind of honeyed it so you

00:15:48,250 --> 00:15:51,550
have to remove the style of the thing

00:15:50,140 --> 00:15:54,550
that is actually there and then put

00:15:51,550 --> 00:15:57,130
something on top of it so because I was

00:15:54,550 --> 00:15:59,350
developing this thing I felt well

00:15:57,130 --> 00:16:00,700
normally we would have acceptance s but

00:15:59,350 --> 00:16:02,890
in this particular case it'd be quite

00:16:00,700 --> 00:16:04,890
handy to be able to just check that the

00:16:02,890 --> 00:16:07,420
right things are appearing in the right

00:16:04,890 --> 00:16:10,390
situations so this was a case where I

00:16:07,420 --> 00:16:13,750
did write a unit test for it so here is

00:16:10,390 --> 00:16:16,690
my unit test I don't know why it has

00:16:13,750 --> 00:16:22,000
stopped doing the color formatting but

00:16:16,690 --> 00:16:23,350
basically so the first case is if you

00:16:22,000 --> 00:16:27,370
don't have an image URL when you

00:16:23,350 --> 00:16:30,310
construct this image input then you

00:16:27,370 --> 00:16:33,700
expect there to be an upload button the

00:16:30,310 --> 00:16:38,910
second scenario is that if you do

00:16:33,700 --> 00:16:43,120
construct this image input with a URL

00:16:38,910 --> 00:16:48,250
obviously of a kitten then you would

00:16:43,120 --> 00:16:51,510
expect to see the kitten file name there

00:16:48,250 --> 00:16:54,370
and you would expect to have also

00:16:51,510 --> 00:16:59,950
something that allows you to delete the

00:16:54,370 --> 00:17:06,610
image and then you would also want once

00:16:59,950 --> 00:17:07,959
you've clicked the trashcan button you

00:17:06,610 --> 00:17:13,030
would expect to be back in the first

00:17:07,959 --> 00:17:16,150
state so although it's these are not

00:17:13,030 --> 00:17:18,130
very fancy or complicated tests for me

00:17:16,150 --> 00:17:19,540
it's quite handy to have that to make

00:17:18,130 --> 00:17:21,280
sure that that bit of logic is still

00:17:19,540 --> 00:17:24,820
working I can just run the test make

00:17:21,280 --> 00:17:30,460
sure that I have not broken the two

00:17:24,820 --> 00:17:34,650
states of this component if you want to

00:17:30,460 --> 00:17:36,940
read a bit more about testing react

00:17:34,650 --> 00:17:40,150
there is a tutorial by one of my

00:17:36,940 --> 00:17:41,710
colleagues about with much more detailed

00:17:40,150 --> 00:17:43,480
examples and I don't want to give like

00:17:41,710 --> 00:17:47,080
too many detailed examples because I

00:17:43,480 --> 00:17:52,629
know that that can be a bit kind of Guru

00:17:47,080 --> 00:17:55,509
if you're listening to talk so here's

00:17:52,629 --> 00:17:58,360
the graph QL component and again I'm not

00:17:55,509 --> 00:18:00,220
gonna explain too much about the context

00:17:58,360 --> 00:18:06,090
I really want you to get the idea

00:18:00,220 --> 00:18:09,519
because for in where I work we have a

00:18:06,090 --> 00:18:11,830
front-end component written react we

00:18:09,519 --> 00:18:14,019
have a back-end node component which

00:18:11,830 --> 00:18:17,710
then calls to the database we're

00:18:14,019 --> 00:18:20,919
introducing graph QL graph QL is a means

00:18:17,710 --> 00:18:24,940
for you to make send queries to the

00:18:20,919 --> 00:18:28,239
backend so instead of a typical rest

00:18:24,940 --> 00:18:30,759
endpoint the backend exposes just this

00:18:28,239 --> 00:18:36,369
graph QL endpoint that you pass queries

00:18:30,759 --> 00:18:38,019
and mutations to but then that could

00:18:36,369 --> 00:18:40,210
lead you to say well I have to always

00:18:38,019 --> 00:18:42,489
build back-end part before I build a

00:18:40,210 --> 00:18:43,989
front-end part and actually you don't

00:18:42,489 --> 00:18:47,169
have to do that and there's a more

00:18:43,989 --> 00:18:50,859
lightweight way of working so what we've

00:18:47,169 --> 00:18:54,879
been doing is we're using this mock

00:18:50,859 --> 00:18:58,749
provider so that we were able to mock

00:18:54,879 --> 00:19:01,629
out so this is like create a fake graph

00:18:58,749 --> 00:19:04,419
QL world that this thing that we're

00:19:01,629 --> 00:19:06,549
testing thinks it's talking to and it

00:19:04,419 --> 00:19:08,769
enables us to then structure the query

00:19:06,549 --> 00:19:10,899
so that we can figure out how the query

00:19:08,769 --> 00:19:12,399
should look before we then go and

00:19:10,899 --> 00:19:15,730
implement the backend which actually

00:19:12,399 --> 00:19:17,649
then goes and calls the my sequel

00:19:15,730 --> 00:19:23,409
database and gets the particular fields

00:19:17,649 --> 00:19:25,269
so I'm not sure how far to go through in

00:19:23,409 --> 00:19:28,389
detail this example but I will explain a

00:19:25,269 --> 00:19:29,859
little bit and we could come back to it

00:19:28,389 --> 00:19:33,519
if you if you're interested

00:19:29,859 --> 00:19:36,100
but basically and then if there are

00:19:33,519 --> 00:19:39,159
probably some concepts in this example

00:19:36,100 --> 00:19:41,499
that you may not know so the project I'm

00:19:39,159 --> 00:19:44,889
working on at the moment is something

00:19:41,499 --> 00:19:47,200
where we are have a workbench where

00:19:44,889 --> 00:19:50,679
people in the marketing team can create

00:19:47,200 --> 00:19:53,320
campaigns to run across the site so we

00:19:50,679 --> 00:19:56,769
have this concept of slots on pages and

00:19:53,320 --> 00:20:00,580
we have this concept of of components

00:19:56,769 --> 00:20:03,630
that can be allocated to slots so the

00:20:00,580 --> 00:20:08,260
it's the domain that this example is in

00:20:03,630 --> 00:20:11,620
so we've created some take data there is

00:20:08,260 --> 00:20:13,330
a super cool component and there's

00:20:11,620 --> 00:20:21,130
probably another yet another cool

00:20:13,330 --> 00:20:24,340
component and these are when we then we

00:20:21,130 --> 00:20:28,750
can mock out an empty query so we can

00:20:24,340 --> 00:20:31,830
say we can declare a query that

00:20:28,750 --> 00:20:34,570
basically if you give it a slot ID

00:20:31,830 --> 00:20:39,220
doesn't return any components this then

00:20:34,570 --> 00:20:41,380
enables you to write a test for this and

00:20:39,220 --> 00:20:44,830
then we have another mock empty query

00:20:41,380 --> 00:20:46,990
without a slope so this is like if the

00:20:44,830 --> 00:20:49,809
slot ID is null then again return

00:20:46,990 --> 00:20:52,029
nothing and then the final one is right

00:20:49,809 --> 00:20:53,740
now we've got a query and we give it a

00:20:52,029 --> 00:20:56,590
slot ID and it actually does give us

00:20:53,740 --> 00:20:58,450
these cool components right so you set

00:20:56,590 --> 00:21:00,190
up this mock data this means that you

00:20:58,450 --> 00:21:03,190
can write the front-end without having

00:21:00,190 --> 00:21:04,539
to do the backend part first and it

00:21:03,190 --> 00:21:07,899
means that you can work on these things

00:21:04,539 --> 00:21:10,299
independently and actually when you're

00:21:07,899 --> 00:21:14,049
using graph QL I don't know it's anybody

00:21:10,299 --> 00:21:17,679
in here using graph QL I don't know yes

00:21:14,049 --> 00:21:21,220
so one of the things that you find is

00:21:17,679 --> 00:21:22,929
that because it's it's like a query

00:21:21,220 --> 00:21:24,610
language you're trying to think how do I

00:21:22,929 --> 00:21:26,169
want to express this query what do I

00:21:24,610 --> 00:21:30,700
want to do how so

00:21:26,169 --> 00:21:35,590
this this step of writing the tests and

00:21:30,700 --> 00:21:38,260
writing the mock queries helps you

00:21:35,590 --> 00:21:40,929
actually to design what careers you want

00:21:38,260 --> 00:21:43,750
to build because it would be very easy

00:21:40,929 --> 00:21:46,539
if you tried to go and build on the back

00:21:43,750 --> 00:21:48,370
end first for you to assume that you

00:21:46,539 --> 00:21:52,210
needed a lot of information that you

00:21:48,370 --> 00:21:55,630
don't necessarily need so this way it

00:21:52,210 --> 00:21:58,480
and this is a actually very much a

00:21:55,630 --> 00:22:01,120
test-driven development though people

00:21:58,480 --> 00:22:04,870
talk about test-driven design concept

00:22:01,120 --> 00:22:07,419
basically when you write a test you are

00:22:04,870 --> 00:22:11,049
the first person calling the code that

00:22:07,419 --> 00:22:12,730
you want to test and so you then think

00:22:11,049 --> 00:22:14,140
about will watch DB called and what

00:22:12,730 --> 00:22:16,630
should the arguments be and how

00:22:14,140 --> 00:22:19,000
relate to the other things so actually

00:22:16,630 --> 00:22:21,400
writing the test is like a design step

00:22:19,000 --> 00:22:27,280
but it's a design step for writing your

00:22:21,400 --> 00:22:29,740
code and so this writing tests using

00:22:27,280 --> 00:22:31,930
mock graph QL queries helps you to then

00:22:29,740 --> 00:22:36,220
think about how you shape your graph QL

00:22:31,930 --> 00:22:38,530
queries so that you can when you come to

00:22:36,220 --> 00:22:40,300
write backend part you have a clear idea

00:22:38,530 --> 00:22:43,690
what is the thing I want to call and

00:22:40,300 --> 00:22:45,550
then I can now write it so and then I'll

00:22:43,690 --> 00:22:49,120
just show you the test that use this

00:22:45,550 --> 00:22:51,640
just I guess for interest on and I'm not

00:22:49,120 --> 00:22:56,020
sure if you can read all of this anyway

00:22:51,640 --> 00:23:01,260
so so there's the describe block so I'm

00:22:56,020 --> 00:23:05,260
describing a component selector and I

00:23:01,260 --> 00:23:08,440
mock the provider this is this mock

00:23:05,260 --> 00:23:11,770
provider is there so I have to go back

00:23:08,440 --> 00:23:14,470
to the top is from reactor Paulo test

00:23:11,770 --> 00:23:16,660
utils so it's something that we we

00:23:14,470 --> 00:23:19,170
bought in and I will share the link

00:23:16,660 --> 00:23:22,860
about more about that information

00:23:19,170 --> 00:23:27,250
afterwards so going back to the test

00:23:22,860 --> 00:23:30,370
so we mock the provider we set it up

00:23:27,250 --> 00:23:33,160
with its empty empty query then we call

00:23:30,370 --> 00:23:35,170
the component this that the thing we're

00:23:33,160 --> 00:23:37,900
actually trying to test is this

00:23:35,170 --> 00:23:41,740
component selector container we give it

00:23:37,900 --> 00:23:43,900
a slot ID but because we've set it up

00:23:41,740 --> 00:23:47,950
with an empty thing it's going to return

00:23:43,900 --> 00:23:50,470
nothing result so we had to put some

00:23:47,950 --> 00:23:53,170
stuff in about waiting for things to

00:23:50,470 --> 00:23:55,930
happen and then what we expect to see is

00:23:53,170 --> 00:24:01,030
that we expect to find a select but we

00:23:55,930 --> 00:24:02,920
and this is bit not easy to see if I I

00:24:01,030 --> 00:24:06,430
can't show you the UI at the moment but

00:24:02,920 --> 00:24:09,790
basically if what you're doing is you

00:24:06,430 --> 00:24:11,410
then check and you find oh yes I haven't

00:24:09,790 --> 00:24:14,940
got any options I haven't got any

00:24:11,410 --> 00:24:19,120
options for this component selector and

00:24:14,940 --> 00:24:22,960
then if people then the next scenario is

00:24:19,120 --> 00:24:26,990
actually a bit easier to understand

00:24:22,960 --> 00:24:30,350
because if you try to create a component

00:24:26,990 --> 00:24:33,010
select a container but you don't and you

00:24:30,350 --> 00:24:35,240
give it an empty query with no slot ID

00:24:33,010 --> 00:24:37,429
then it says it gives you a message

00:24:35,240 --> 00:24:38,809
saying please select a slot because if

00:24:37,429 --> 00:24:40,730
you don't have a slot you're not going

00:24:38,809 --> 00:24:46,850
to be able to get any results and then

00:24:40,730 --> 00:24:48,890
the very last one is actually a query

00:24:46,850 --> 00:24:50,809
that will return some results and when

00:24:48,890 --> 00:24:54,920
you do return some results you expect to

00:24:50,809 --> 00:24:58,520
see the component names in your field in

00:24:54,920 --> 00:25:02,440
your HTML that is rendered from the

00:24:58,520 --> 00:25:06,679
component so that's an example of using

00:25:02,440 --> 00:25:09,320
a mop provider for graph QL that enables

00:25:06,679 --> 00:25:12,220
us to write a unit test this is not an

00:25:09,320 --> 00:25:14,690
acceptance test it's not testing any

00:25:12,220 --> 00:25:17,809
endpoints it's actually just all running

00:25:14,690 --> 00:25:20,300
within the front-end code and at least

00:25:17,809 --> 00:25:22,400
it helps us to think about how we want

00:25:20,300 --> 00:25:23,660
to design our queries for when we come

00:25:22,400 --> 00:25:29,720
to the backend and then we write those

00:25:23,660 --> 00:25:34,420
queries so that is a that's basically

00:25:29,720 --> 00:25:34,420
where we learned all this from so and

00:25:34,540 --> 00:25:40,010
right now I'm kind of stopped giving

00:25:37,460 --> 00:25:42,980
examples of tests and talk a little bit

00:25:40,010 --> 00:25:45,380
more step away from kind of what our

00:25:42,980 --> 00:25:48,860
tests and how would you write them to

00:25:45,380 --> 00:25:51,380
more like why is it that there were some

00:25:48,860 --> 00:25:52,670
people in the category of yeah I know

00:25:51,380 --> 00:25:54,320
what tests are but I don't write them

00:25:52,670 --> 00:25:57,679
and I would include myself in that

00:25:54,320 --> 00:26:01,250
category sometimes so what are the

00:25:57,679 --> 00:26:04,130
trade-offs so there are some obvious

00:26:01,250 --> 00:26:06,350
benefits if you go to the bother and

00:26:04,130 --> 00:26:08,900
I've been on projects where there is an

00:26:06,350 --> 00:26:11,780
obsessive desire to have tests for

00:26:08,900 --> 00:26:13,850
everything it's great in a way because

00:26:11,780 --> 00:26:16,340
you know you can always be sure that you

00:26:13,850 --> 00:26:18,710
haven't broken any of the existing

00:26:16,340 --> 00:26:20,870
functionality if all of the developers

00:26:18,710 --> 00:26:23,000
that have gone before you we're really

00:26:20,870 --> 00:26:24,820
assiduous wrote loads of tests you can

00:26:23,000 --> 00:26:28,040
just add something and you go all right

00:26:24,820 --> 00:26:30,020
all the tests pass it's working well

00:26:28,040 --> 00:26:31,309
often that is a lie and it doesn't it

00:26:30,020 --> 00:26:33,950
and there are still some cases that

00:26:31,309 --> 00:26:37,010
people haven't thought of and so it is

00:26:33,950 --> 00:26:40,610
it's possible but it does mean a big

00:26:37,010 --> 00:26:43,940
benefit is you get automatic checking

00:26:40,610 --> 00:26:46,760
you only have to invest the time the

00:26:43,940 --> 00:26:49,850
once really in writing the test and then

00:26:46,760 --> 00:26:53,600
many people could run that test so given

00:26:49,850 --> 00:26:55,039
the example of my silly little component

00:26:53,600 --> 00:26:58,370
where it has to render once with an

00:26:55,039 --> 00:26:59,809
upload button or a trash bin other

00:26:58,370 --> 00:27:01,399
people don't have to keep clicking

00:26:59,809 --> 00:27:03,230
around trying to figure out how it works

00:27:01,399 --> 00:27:05,059
they can just run the test and they can

00:27:03,230 --> 00:27:08,960
have confidence all that's the basic

00:27:05,059 --> 00:27:14,559
idea of what it's supposed to do and you

00:27:08,960 --> 00:27:19,159
can illustrate how the what scenarios

00:27:14,559 --> 00:27:20,720
your component does address and also it

00:27:19,159 --> 00:27:22,909
can be clear from looking at the test

00:27:20,720 --> 00:27:26,179
well what scenarios doesn't address and

00:27:22,909 --> 00:27:29,570
often when you'll you have a live issue

00:27:26,179 --> 00:27:31,580
a defect a problem to resolve it can

00:27:29,570 --> 00:27:35,389
help you you just add an extra test case

00:27:31,580 --> 00:27:40,220
and say well does it do this I had an

00:27:35,389 --> 00:27:43,519
example today where I was I was trying

00:27:40,220 --> 00:27:46,460
to strip a bit off when you upload this

00:27:43,519 --> 00:27:48,200
file to yes three bucket it then puts a

00:27:46,460 --> 00:27:50,120
time stamp on it and I wanted to strip

00:27:48,200 --> 00:27:55,460
that bit off and I thought I could just

00:27:50,120 --> 00:27:56,720
slice it on a - character what I hadn't

00:27:55,460 --> 00:27:59,480
bargained for is that there were -

00:27:56,720 --> 00:28:01,100
characters in the URL and then so it

00:27:59,480 --> 00:28:02,600
meant that it was cutting the wrong

00:28:01,100 --> 00:28:05,960
piece off and so then I could just add a

00:28:02,600 --> 00:28:09,169
test there that could be sure that it

00:28:05,960 --> 00:28:11,210
was working and so those are the

00:28:09,169 --> 00:28:12,740
benefits of tests but there must be some

00:28:11,210 --> 00:28:17,059
drawbacks otherwise people would always

00:28:12,740 --> 00:28:19,010
be writing tests so one of the hard

00:28:17,059 --> 00:28:23,510
things is it takes time to write tests

00:28:19,010 --> 00:28:29,419
and sometimes it's pretty hard to get it

00:28:23,510 --> 00:28:31,429
to - to kind of set the code up in the

00:28:29,419 --> 00:28:35,179
situation that you want it to be to be

00:28:31,429 --> 00:28:37,070
able to test it and sometimes it feels

00:28:35,179 --> 00:28:39,230
like the investment of doing that

00:28:37,070 --> 00:28:41,120
programmatically it's not worthwhile and

00:28:39,230 --> 00:28:44,149
you might as well just click click click

00:28:41,120 --> 00:28:50,570
right reload the page is it there yes it

00:28:44,149 --> 00:28:54,020
is also one of the frustrating things

00:28:50,570 --> 00:28:56,180
can be is that you change

00:28:54,020 --> 00:28:58,880
something about an application and it

00:28:56,180 --> 00:29:02,090
breaks the existing tests but it doesn't

00:28:58,880 --> 00:29:04,700
break them I mean the tests stop working

00:29:02,090 --> 00:29:07,160
and stop passing but it's not because

00:29:04,700 --> 00:29:11,030
the application is broken it's because

00:29:07,160 --> 00:29:13,460
they require new setup so in the summer

00:29:11,030 --> 00:29:17,120
I was doing some work on the job

00:29:13,460 --> 00:29:18,890
application form at tez and we were

00:29:17,120 --> 00:29:20,480
doing some restyling of it which

00:29:18,890 --> 00:29:22,310
shouldn't have broken anything because

00:29:20,480 --> 00:29:24,500
it was literally putting a grey

00:29:22,310 --> 00:29:26,660
background around various different

00:29:24,500 --> 00:29:29,930
sections it was to make it look more

00:29:26,660 --> 00:29:34,760
visually exciting with this grey

00:29:29,930 --> 00:29:37,340
background but it broke tests and it was

00:29:34,760 --> 00:29:41,330
annoying and fiddly to work out why they

00:29:37,340 --> 00:29:44,800
were broken and then you think what are

00:29:41,330 --> 00:29:47,870
these tests really adding any value and

00:29:44,800 --> 00:29:49,280
sometimes what happens is people see

00:29:47,870 --> 00:29:54,200
some code and they want to clean it up

00:29:49,280 --> 00:29:57,710
and then a few tests break and they

00:29:54,200 --> 00:29:59,360
think of I can't be bothered and so

00:29:57,710 --> 00:30:00,650
sometimes the tests although they are

00:29:59,360 --> 00:30:01,370
nice because they make sure you don't

00:30:00,650 --> 00:30:03,650
break anything

00:30:01,370 --> 00:30:08,330
they sometimes stop you from improving

00:30:03,650 --> 00:30:09,740
the code so there is a it's like putting

00:30:08,330 --> 00:30:13,430
a little straitjacket around the code

00:30:09,740 --> 00:30:16,460
base is that it sometimes means that it

00:30:13,430 --> 00:30:18,890
doesn't grow and evolve because people

00:30:16,460 --> 00:30:20,990
are kind of hemmed in by the tests so

00:30:18,890 --> 00:30:27,320
those are some of the trade-offs to

00:30:20,990 --> 00:30:31,160
think about in my view I think it's

00:30:27,320 --> 00:30:34,010
worthwhile writing the tests when you're

00:30:31,160 --> 00:30:37,120
developing a thing and doing it in small

00:30:34,010 --> 00:30:39,770
steps it doesn't necessarily have to be

00:30:37,120 --> 00:30:41,270
exactly faithfully write a test and then

00:30:39,770 --> 00:30:43,160
write the code and then write a test and

00:30:41,270 --> 00:30:45,800
then write the code but I think it's

00:30:43,160 --> 00:30:48,320
worthwhile not building a very fancy

00:30:45,800 --> 00:30:49,850
component and then writing a few simple

00:30:48,320 --> 00:30:51,260
tests for it I think it's worthwhile and

00:30:49,850 --> 00:30:53,540
it can help you while you're in the

00:30:51,260 --> 00:30:55,940
process of developing something because

00:30:53,540 --> 00:30:58,460
it helps you to shape your code and and

00:30:55,940 --> 00:31:00,920
it also can help one of the things we

00:30:58,460 --> 00:31:03,770
found and I'm only working in a team

00:31:00,920 --> 00:31:05,690
where there's three developers sometimes

00:31:03,770 --> 00:31:07,490
we want to work on different pieces

00:31:05,690 --> 00:31:09,890
independently and it

00:31:07,490 --> 00:31:12,649
it's quite nice to be able to say well

00:31:09,890 --> 00:31:14,210
I'll take my piece I can work separately

00:31:12,649 --> 00:31:16,309
from you because I don't have to wait

00:31:14,210 --> 00:31:19,100
for your bit to be ready that's gonna

00:31:16,309 --> 00:31:20,570
call my thing so I've been working on

00:31:19,100 --> 00:31:22,820
the image uploader component but I

00:31:20,570 --> 00:31:25,370
haven't had to worry about the thing

00:31:22,820 --> 00:31:29,690
that it's going to be used in I can just

00:31:25,370 --> 00:31:32,720
write it without with my tests and then

00:31:29,690 --> 00:31:35,659
obviously it's worthwhile to do if you

00:31:32,720 --> 00:31:37,760
have non-trivial logics I mean I imagine

00:31:35,659 --> 00:31:39,860
we've all been in this in a situation

00:31:37,760 --> 00:31:41,870
where we've been looking at some code

00:31:39,860 --> 00:31:47,000
base and thinking what the hell does

00:31:41,870 --> 00:31:49,580
that function do and so having some

00:31:47,000 --> 00:31:51,470
tests does help you because you're at

00:31:49,580 --> 00:31:54,500
they're able to see well what is the

00:31:51,470 --> 00:31:57,080
data supposed Oh recently I was working

00:31:54,500 --> 00:31:58,730
on some code and it was for filtering

00:31:57,080 --> 00:32:01,100
but I couldn't tell whether it's

00:31:58,730 --> 00:32:02,990
filtering in or filtering out because

00:32:01,100 --> 00:32:04,580
the naming of the variables and it just

00:32:02,990 --> 00:32:06,830
would be helpful to have a test which

00:32:04,580 --> 00:32:08,029
goes here's a set of three things and

00:32:06,830 --> 00:32:10,039
that when you've filtered that there one

00:32:08,029 --> 00:32:14,000
thing or you know is a filtering down

00:32:10,039 --> 00:32:17,360
refills yeah it's so anyway it can help

00:32:14,000 --> 00:32:23,149
document your code and it helps you to

00:32:17,360 --> 00:32:25,460
uncover edge cases however and since

00:32:23,149 --> 00:32:27,380
I've been moving to being a JavaScript

00:32:25,460 --> 00:32:30,820
developer I found that I often don't

00:32:27,380 --> 00:32:34,220
write tests as much as I used to and

00:32:30,820 --> 00:32:37,159
often it's because it's fiddly to get

00:32:34,220 --> 00:32:40,279
set up and if you spent like I don't

00:32:37,159 --> 00:32:43,010
mind spending half an hour or an hour

00:32:40,279 --> 00:32:45,020
setting up a test but if it's all

00:32:43,010 --> 00:32:47,779
morning then I'm thinking no probably

00:32:45,020 --> 00:32:51,169
I'm it's not worth it so just just have

00:32:47,779 --> 00:32:53,149
a sense of is this taking too long also

00:32:51,169 --> 00:32:55,250
be aware of the thing that you're

00:32:53,149 --> 00:32:58,809
building so is this something that's

00:32:55,250 --> 00:33:01,100
going to be kind of a keystone of your

00:32:58,809 --> 00:33:02,690
application your building or is this

00:33:01,100 --> 00:33:04,580
just something where you're kind of it's

00:33:02,690 --> 00:33:06,080
an interim way of how it's going to work

00:33:04,580 --> 00:33:10,039
and then something else is going to be

00:33:06,080 --> 00:33:13,070
added because if it's not that permanent

00:33:10,039 --> 00:33:15,110
then I don't think it's worth investing

00:33:13,070 --> 00:33:18,440
in tests unless you really feel that's

00:33:15,110 --> 00:33:20,870
going to give you an advantage and then

00:33:18,440 --> 00:33:22,940
up and then the last thing is

00:33:20,870 --> 00:33:24,320
and we when you're working with rack for

00:33:22,940 --> 00:33:26,600
example you're always trying to make

00:33:24,320 --> 00:33:29,120
things very simple very obvious you know

00:33:26,600 --> 00:33:32,330
just as this thing you can just see

00:33:29,120 --> 00:33:34,520
there is no complex conditional logic

00:33:32,330 --> 00:33:36,350
path and so therefore if it's really

00:33:34,520 --> 00:33:38,500
simple you shouldn't need to write a

00:33:36,350 --> 00:33:44,240
test for it so there is that kind of

00:33:38,500 --> 00:33:45,200
case so this is now my conclusion I

00:33:44,240 --> 00:33:46,730
should I should have had something

00:33:45,200 --> 00:33:51,620
saying something up or something like

00:33:46,730 --> 00:33:54,080
that but this is so I find that unit

00:33:51,620 --> 00:33:56,059
tests help me to shape the design of my

00:33:54,080 --> 00:33:58,100
code they help me to think what what the

00:33:56,059 --> 00:34:00,590
parameter was the arguments to this

00:33:58,100 --> 00:34:04,550
function going to be what's going to be

00:34:00,590 --> 00:34:06,860
called do what I have to set up any

00:34:04,550 --> 00:34:09,490
relationships how would I mock those out

00:34:06,860 --> 00:34:15,080
so that helps you it's a sort of

00:34:09,490 --> 00:34:16,970
software design practice it also helps

00:34:15,080 --> 00:34:18,800
you to work on things independently it's

00:34:16,970 --> 00:34:22,879
particularly unit tests help you with

00:34:18,800 --> 00:34:25,820
this and it can help you think about the

00:34:22,879 --> 00:34:27,679
API of for the back end before you write

00:34:25,820 --> 00:34:29,000
the back end so again it's another thing

00:34:27,679 --> 00:34:33,649
where you can work on things separately

00:34:29,000 --> 00:34:36,110
and then just finally it does always

00:34:33,649 --> 00:34:38,300
save you from kind of like constantly

00:34:36,110 --> 00:34:39,860
reloading the page and just say oh just

00:34:38,300 --> 00:34:42,350
does it work this time does it work this

00:34:39,860 --> 00:34:45,909
time it saves you time and it usually

00:34:42,350 --> 00:34:50,480
saves your colleagues time as well so

00:34:45,909 --> 00:34:52,940
that is the end of my talk this is a

00:34:50,480 --> 00:34:55,100
little bit about ties we've got a

00:34:52,940 --> 00:34:57,440
Twitter account and various engineers

00:34:55,100 --> 00:35:01,310
write blog posts and share them there

00:34:57,440 --> 00:35:04,250
but anyway that's all I have to say

00:35:01,310 --> 00:35:06,310
about unit testing thank you and let me

00:35:04,250 --> 00:35:12,099
know if there's any questions

00:35:06,310 --> 00:35:12,099

YouTube URL: https://www.youtube.com/watch?v=QF9dPkYTfxQ


