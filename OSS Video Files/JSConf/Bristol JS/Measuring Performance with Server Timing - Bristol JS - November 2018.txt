Title: Measuring Performance with Server Timing - Bristol JS - November 2018
Publication date: 2018-12-10
Playlist: Bristol JS
Description: 
	Presented by Drew McLellan.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,440
my name is drew I'm gonna be talking

00:00:02,370 --> 00:00:07,230
just for like 10 minutes about something

00:00:04,440 --> 00:00:09,450
that's only ten minutes worth of talking

00:00:07,230 --> 00:00:12,450
about which is quite good but if there

00:00:09,450 --> 00:00:14,190
are a few that QR code is where all my

00:00:12,450 --> 00:00:16,289
slides are and links to resources and

00:00:14,190 --> 00:00:20,580
other stuff so if you remember QR code

00:00:16,289 --> 00:00:22,500
that works it's first time I've used one

00:00:20,580 --> 00:00:26,150
oh you can tell them I'm down with new

00:00:22,500 --> 00:00:28,019
technology so I'm talking about

00:00:26,150 --> 00:00:30,300
performance obviously very very

00:00:28,019 --> 00:00:31,920
important topic and something that

00:00:30,300 --> 00:00:33,750
everybody who works across the whole

00:00:31,920 --> 00:00:36,719
stack from front end to back end needs

00:00:33,750 --> 00:00:39,030
to be thinking about as typically

00:00:36,719 --> 00:00:40,290
probably most of us bias to the front

00:00:39,030 --> 00:00:44,149
end I guess presuming because you're

00:00:40,290 --> 00:00:47,280
here we spend an awful lot of time

00:00:44,149 --> 00:00:50,640
looking at things like this right so the

00:00:47,280 --> 00:00:54,239
this is the network tab of in Chrome

00:00:50,640 --> 00:00:56,219
browser console just looking at a

00:00:54,239 --> 00:00:58,890
typical request and seeing all the

00:00:56,219 --> 00:01:00,390
resources load in and just looking for

00:00:58,890 --> 00:01:03,229
where held up cell why things are

00:01:00,390 --> 00:01:05,670
rendering slowly or you know what

00:01:03,229 --> 00:01:06,030
looking at repaints and all that sort of

00:01:05,670 --> 00:01:08,040
stuff

00:01:06,030 --> 00:01:13,020
and figuring out why a particular page

00:01:08,040 --> 00:01:14,939
might be performing slowly but sometimes

00:01:13,020 --> 00:01:17,430
you're asked to look at a page which is

00:01:14,939 --> 00:01:20,159
performing badly and you look right up

00:01:17,430 --> 00:01:23,460
at the top of the of the stack bear and

00:01:20,159 --> 00:01:25,590
you see there's this big blue bar which

00:01:23,460 --> 00:01:27,450
is your initial source document loading

00:01:25,590 --> 00:01:30,390
and it seems to be taking a long time

00:01:27,450 --> 00:01:31,920
and you look into it and there's this

00:01:30,390 --> 00:01:34,200
big green thing here this is just

00:01:31,920 --> 00:01:38,570
waiting all right time to first byte

00:01:34,200 --> 00:01:40,650
just waiting anything there's nothing

00:01:38,570 --> 00:01:43,770
there's nothing I can do in the browser

00:01:40,650 --> 00:01:46,470
there's going to going to do anything

00:01:43,770 --> 00:01:49,259
about that because that science first

00:01:46,470 --> 00:01:51,240
byte is basically the the time it takes

00:01:49,259 --> 00:01:53,040
to compose the page on your server and

00:01:51,240 --> 00:01:53,939
start sending it back to the browser so

00:01:53,040 --> 00:01:55,950
the browser's obviously can't do

00:01:53,939 --> 00:01:58,860
anything until it's been until the

00:01:55,950 --> 00:02:01,320
result is the response has been streamed

00:01:58,860 --> 00:02:02,969
to it so what causes those sorts of

00:02:01,320 --> 00:02:05,250
delays on the server well it could be

00:02:02,969 --> 00:02:07,829
things like really slow database queries

00:02:05,250 --> 00:02:09,840
or just like a lot of activity back to a

00:02:07,829 --> 00:02:12,480
datastore that sort of thing templating

00:02:09,840 --> 00:02:13,770
engines sometimes on a go slow if you're

00:02:12,480 --> 00:02:16,440
doing any synchronous API

00:02:13,770 --> 00:02:18,870
interactions like logging in Vyra a

00:02:16,440 --> 00:02:21,780
third party service or something like

00:02:18,870 --> 00:02:25,680
that if your cache is completely cold

00:02:21,780 --> 00:02:28,200
and not primed and there's a load of

00:02:25,680 --> 00:02:30,360
work that normally goes quickly but for

00:02:28,200 --> 00:02:33,390
the first time it gets hit go slow

00:02:30,360 --> 00:02:36,140
basically anything as bottlenecks so if

00:02:33,390 --> 00:02:38,880
you're doing a lot of i/o on a slow disk

00:02:36,140 --> 00:02:39,930
stuff like that and then if you're doing

00:02:38,880 --> 00:02:41,700
things you really shouldn't be doing

00:02:39,930 --> 00:02:44,550
like sending emails for the user

00:02:41,700 --> 00:02:47,820
attached or resizing images or things

00:02:44,550 --> 00:02:49,380
that should be shifted out process in

00:02:47,820 --> 00:02:50,550
order to improvement form so a page for

00:02:49,380 --> 00:02:53,460
you to work out what's causing those

00:02:50,550 --> 00:02:55,250
delays and of course there are loads of

00:02:53,460 --> 00:02:58,500
server monitoring tools that you can use

00:02:55,250 --> 00:03:02,070
things like New Relic roll bar dates dog

00:02:58,500 --> 00:03:04,530
app optics ray guns cows anyone use any

00:03:02,070 --> 00:03:07,830
of these or anything like them yeah and

00:03:04,530 --> 00:03:10,230
that's great problem with these although

00:03:07,830 --> 00:03:12,660
they do modes of great stuff one

00:03:10,230 --> 00:03:14,340
downside is if you're debugging

00:03:12,660 --> 00:03:15,630
something in a browser you don't think

00:03:14,340 --> 00:03:17,820
I'll right now this is a server issue

00:03:15,630 --> 00:03:19,620
I've got to go fire up this other tool

00:03:17,820 --> 00:03:21,570
I've got to work it how does this

00:03:19,620 --> 00:03:23,550
request that I'm looking at that I know

00:03:21,570 --> 00:03:26,130
is slow how does that map to all this

00:03:23,550 --> 00:03:30,060
data I've got in New Relic where you

00:03:26,130 --> 00:03:33,450
know and it's basically it's annoying

00:03:30,060 --> 00:03:35,370
what would be really good is if we could

00:03:33,450 --> 00:03:36,930
get all that information right in our

00:03:35,370 --> 00:03:40,590
browser right that'd be great

00:03:36,930 --> 00:03:45,540
and well I've got good news that's

00:03:40,590 --> 00:03:48,660
exactly what server timing is so server

00:03:45,540 --> 00:03:50,520
timing is a w3c specification so it's

00:03:48,660 --> 00:03:52,620
nothing crazy there's just some browser

00:03:50,520 --> 00:03:55,740
manufacturers made up it's something

00:03:52,620 --> 00:03:58,140
crazy the w3c have made up its an HTTP

00:03:55,740 --> 00:04:00,120
response header so when the response

00:03:58,140 --> 00:04:02,310
comes back to your server server timing

00:04:00,120 --> 00:04:03,810
is a header that comes back with that

00:04:02,310 --> 00:04:06,750
that then you can inspect in the browser

00:04:03,810 --> 00:04:09,390
and is basically for sending basic

00:04:06,750 --> 00:04:11,220
timing information from the server to

00:04:09,390 --> 00:04:12,930
the browser and the browser can do

00:04:11,220 --> 00:04:17,760
something with it like in Chrome it'll

00:04:12,930 --> 00:04:19,980
show in dev tools so what does the this

00:04:17,760 --> 00:04:22,380
header look like well its server -

00:04:19,980 --> 00:04:25,500
timing and then you send back a metric

00:04:22,380 --> 00:04:27,770
and here I'm sending two metrics one of

00:04:25,500 --> 00:04:29,990
them is called DB

00:04:27,770 --> 00:04:33,050
and I'm saying the duration of that is

00:04:29,990 --> 00:04:35,240
123 milliseconds and I'm sending a

00:04:33,050 --> 00:04:36,740
second one there's TPL and these are

00:04:35,240 --> 00:04:39,380
just name you know you just name things

00:04:36,740 --> 00:04:41,150
whatever you'd need them to be so this

00:04:39,380 --> 00:04:42,680
is maybe signs over the database maybe

00:04:41,150 --> 00:04:45,950
something to do with templating I'm

00:04:42,680 --> 00:04:49,370
saying that ones 56 milliseconds and

00:04:45,950 --> 00:04:52,280
then when you go to the the page in your

00:04:49,370 --> 00:04:53,630
dev tools and look at that initial page

00:04:52,280 --> 00:04:55,550
load you can see that great big waiting

00:04:53,630 --> 00:04:57,980
tons first byte bother we looking at

00:04:55,550 --> 00:05:00,139
before they're now down below it there's

00:04:57,980 --> 00:05:01,610
a section called server timing and that

00:05:00,139 --> 00:05:04,520
includes the information that was sent

00:05:01,610 --> 00:05:06,320
back in that header so has the two

00:05:04,520 --> 00:05:08,120
different timing points what it won't

00:05:06,320 --> 00:05:09,889
give you is a waterfall of this happened

00:05:08,120 --> 00:05:10,610
then that happened there's no start and

00:05:09,889 --> 00:05:12,740
end times

00:05:10,610 --> 00:05:14,090
there's just durations so you'll have

00:05:12,740 --> 00:05:15,530
lots of different blocks of anything you

00:05:14,090 --> 00:05:19,419
send back in that header from the server

00:05:15,530 --> 00:05:21,590
that tells you how long each thing took

00:05:19,419 --> 00:05:25,400
so you can send back as many things as

00:05:21,590 --> 00:05:27,139
you like there comma-separated so here

00:05:25,400 --> 00:05:29,780
we'll be sending back three different

00:05:27,139 --> 00:05:33,350
metrics and a metric is made up of three

00:05:29,780 --> 00:05:35,740
possible properties always has a short

00:05:33,350 --> 00:05:38,479
name which is kind of like an identifier

00:05:35,740 --> 00:05:41,720
that was the DP and the example we just

00:05:38,479 --> 00:05:44,180
had you can send back a duration which

00:05:41,720 --> 00:05:46,910
is in milliseconds which is due you are

00:05:44,180 --> 00:05:48,530
equals and then the time and you can

00:05:46,910 --> 00:05:50,750
actually send back a description so if

00:05:48,530 --> 00:05:52,400
you want it to look a bit prettier in

00:05:50,750 --> 00:05:57,169
your dev tools then you can send back a

00:05:52,400 --> 00:05:58,280
description as well so with the

00:05:57,169 --> 00:06:00,500
description it might look a bit like

00:05:58,280 --> 00:06:03,979
that so you've got your name you

00:06:00,500 --> 00:06:06,800
duration a new description so they're

00:06:03,979 --> 00:06:10,720
separated by semicolons and then each

00:06:06,800 --> 00:06:13,039
metric block is separated by commas

00:06:10,720 --> 00:06:14,810
so our second one while they'd like that

00:06:13,039 --> 00:06:17,630
and then altogether if we were sending

00:06:14,810 --> 00:06:18,139
to fully fully sort of full metrics with

00:06:17,630 --> 00:06:21,940
our header

00:06:18,139 --> 00:06:23,900
it would allow that all the one-line

00:06:21,940 --> 00:06:25,970
then when you sped that in the browser

00:06:23,900 --> 00:06:27,530
you can see down here hopefully you can

00:06:25,970 --> 00:06:29,300
see it's a little bit small then now

00:06:27,530 --> 00:06:31,130
we've got our nice descriptions database

00:06:29,300 --> 00:06:34,310
and template processing rather than the

00:06:31,130 --> 00:06:35,690
short IDs that we passed in now you

00:06:34,310 --> 00:06:40,220
don't actually have to send a duration

00:06:35,690 --> 00:06:43,310
you can just send back something like a

00:06:40,220 --> 00:06:44,180
a name you can't just send a name here

00:06:43,310 --> 00:06:47,720
we're sending a name and a description

00:06:44,180 --> 00:06:50,270
to say we know oh this this page was

00:06:47,720 --> 00:06:51,650
generated from this data center or

00:06:50,270 --> 00:06:53,210
whatever so if there's additional

00:06:51,650 --> 00:06:56,860
information you want to communicate back

00:06:53,210 --> 00:06:56,860
into dev tools you can do it that way

00:06:58,280 --> 00:07:03,170
and you can see down the bottom here

00:07:00,950 --> 00:07:05,060
there's that East Coast data center

00:07:03,170 --> 00:07:06,740
bolts up and it doesn't have any timing

00:07:05,060 --> 00:07:08,720
because it does have any timing but it's

00:07:06,740 --> 00:07:12,800
information so there's useful for for

00:07:08,720 --> 00:07:14,030
debugging okay so how might we use that

00:07:12,800 --> 00:07:15,970
this is we're gonna get into some

00:07:14,030 --> 00:07:17,960
server-side code is everybody braced

00:07:15,970 --> 00:07:22,010
everybody ready it's okay

00:07:17,960 --> 00:07:24,700
it's Java Script so there's a an NPM

00:07:22,010 --> 00:07:27,650
package called server timing

00:07:24,700 --> 00:07:32,419
conveniently and so I've been using that

00:07:27,650 --> 00:07:36,410
with Express so here's a really basic

00:07:32,419 --> 00:07:39,110
Express thing I'm studies including

00:07:36,410 --> 00:07:41,060
Express including server timing creating

00:07:39,110 --> 00:07:43,400
a new app and then for my app I'm saying

00:07:41,060 --> 00:07:45,980
use server timing to add in and then

00:07:43,400 --> 00:07:48,320
I've got this really basic root here for

00:07:45,980 --> 00:07:50,240
the homepage of my sign it looks like

00:07:48,320 --> 00:07:53,300
that expanded out so if we're gonna do

00:07:50,240 --> 00:07:55,490
something that takes a lot of time we're

00:07:53,300 --> 00:07:58,220
better to do it than a get request or a

00:07:55,490 --> 00:07:59,810
homepage right you know we're we're best

00:07:58,220 --> 00:08:01,070
to do this expensive operation so what

00:07:59,810 --> 00:08:02,720
sort of expensive operation could we do

00:08:01,070 --> 00:08:04,760
let's say we wanted to paint the whole

00:08:02,720 --> 00:08:06,740
world with a rainbow that would take a

00:08:04,760 --> 00:08:08,210
long time right so we're going to make

00:08:06,740 --> 00:08:11,180
our paint the whole world with a rainbow

00:08:08,210 --> 00:08:13,160
method cool and we want to make sure

00:08:11,180 --> 00:08:15,380
that we want to test to see whether

00:08:13,160 --> 00:08:17,570
that's you know taking a long time

00:08:15,380 --> 00:08:21,380
taking a short time we want to get the

00:08:17,570 --> 00:08:23,810
information into a browser so we're

00:08:21,380 --> 00:08:25,640
going to do that by just at the

00:08:23,810 --> 00:08:27,560
beginning we'll create a variable called

00:08:25,640 --> 00:08:29,240
start stick the current timestamp into

00:08:27,560 --> 00:08:32,270
it then we'll do our paint our world

00:08:29,240 --> 00:08:35,930
with a rainbow and then we do we're

00:08:32,270 --> 00:08:40,010
going to call set metric which passes a

00:08:35,930 --> 00:08:41,360
method of the server timing module that

00:08:40,010 --> 00:08:44,570
we added so we're going to give it the

00:08:41,360 --> 00:08:46,880
three values paint being our our name

00:08:44,570 --> 00:08:48,650
for it then we're doing the current time

00:08:46,880 --> 00:08:50,870
stamp and take off the time stamp that

00:08:48,650 --> 00:08:52,660
we first thought of which gives us a

00:08:50,870 --> 00:08:55,899
duration

00:08:52,660 --> 00:08:58,029
a nice name obviously I would have

00:08:55,899 --> 00:09:00,819
thought typically in a standard

00:08:58,029 --> 00:09:02,230
application might be a little bit more

00:09:00,819 --> 00:09:03,819
complex than that maybe if we're

00:09:02,230 --> 00:09:06,459
thinking about asynchronous stuff or

00:09:03,819 --> 00:09:09,430
whatever but it is a very very simplest

00:09:06,459 --> 00:09:12,730
case we're timing some stuff and we're

00:09:09,430 --> 00:09:14,680
calling set metric said we wanted to do

00:09:12,730 --> 00:09:18,910
another another operation then what if

00:09:14,680 --> 00:09:22,000
we wanted to email bjerk you know

00:09:18,910 --> 00:09:23,889
iceland's pint-size songstress don't be

00:09:22,000 --> 00:09:26,439
ashamed we've all done it if you wanted

00:09:23,889 --> 00:09:29,379
to email Bjork every time your home page

00:09:26,439 --> 00:09:30,910
was requested you could again set

00:09:29,379 --> 00:09:34,930
another timestamp then call your email

00:09:30,910 --> 00:09:37,000
Bjork method and then just again cool

00:09:34,930 --> 00:09:41,529
say my sent me true and it call this one

00:09:37,000 --> 00:09:43,509
email do the same thing if I load that

00:09:41,529 --> 00:09:45,399
up then in my browser and see that the

00:09:43,509 --> 00:09:46,959
the response header that was sent back I

00:09:45,399 --> 00:09:49,600
can see yeah there's paint

00:09:46,959 --> 00:09:52,329
there's my Buick thing which I think a

00:09:49,600 --> 00:09:54,189
called email that's typo and then this

00:09:52,329 --> 00:09:56,920
particular module has added a third item

00:09:54,189 --> 00:09:58,810
that we didn't explicitly declare called

00:09:56,920 --> 00:10:00,069
total and that's giving us the total

00:09:58,810 --> 00:10:01,630
process time from the point it was

00:10:00,069 --> 00:10:03,250
instantiated to the point in its

00:10:01,630 --> 00:10:05,680
generation in the header and that's

00:10:03,250 --> 00:10:07,389
quite useful so if we look at that in

00:10:05,680 --> 00:10:09,009
the browser there are those three things

00:10:07,389 --> 00:10:10,630
what's quite interesting because it's

00:10:09,009 --> 00:10:13,029
given us that total response time we can

00:10:10,630 --> 00:10:15,819
see that's actually different from the

00:10:13,029 --> 00:10:17,439
time that the browser thinks the request

00:10:15,819 --> 00:10:18,610
took which gives us a little bit of

00:10:17,439 --> 00:10:20,290
insight into the overhead of the

00:10:18,610 --> 00:10:22,300
framework and the overhead of the server

00:10:20,290 --> 00:10:25,360
response time which we can see is pretty

00:10:22,300 --> 00:10:27,970
quick will Express running on a local

00:10:25,360 --> 00:10:32,980
machine as it was but it's another

00:10:27,970 --> 00:10:36,399
interesting metric so that's it what are

00:10:32,980 --> 00:10:37,360
the considerations when using it you

00:10:36,399 --> 00:10:39,759
might want to keep the names and

00:10:37,360 --> 00:10:41,709
descriptions nice and compact I mean

00:10:39,759 --> 00:10:43,420
it's not a big deal but they are going

00:10:41,709 --> 00:10:44,819
into an HTTP header and it's good to

00:10:43,420 --> 00:10:48,300
keep those headers as small as possible

00:10:44,819 --> 00:10:52,240
where you can ski from shortish I did

00:10:48,300 --> 00:10:54,879
try non ASCII characters in naming

00:10:52,240 --> 00:10:57,670
things particularly the the Oh with the

00:10:54,879 --> 00:11:01,750
umlauts in Bjork that didn't work well

00:10:57,670 --> 00:11:04,149
to keep ASCII don't expose anything

00:11:01,750 --> 00:11:05,920
secret or sensitive of stickers it can

00:11:04,149 --> 00:11:06,140
it can it's just in the header it can be

00:11:05,920 --> 00:11:09,140
read

00:11:06,140 --> 00:11:10,910
if you it is such that you can just

00:11:09,140 --> 00:11:12,260
switch it on on a production server you

00:11:10,910 --> 00:11:14,720
can start sending these headers back

00:11:12,260 --> 00:11:17,330
because they're pretty small they're not

00:11:14,720 --> 00:11:18,860
going to you know be generally visible

00:11:17,330 --> 00:11:20,570
and they're somebody knows to look for

00:11:18,860 --> 00:11:22,250
them so it's the sort of thing that if

00:11:20,570 --> 00:11:24,680
you are debugging something in a

00:11:22,250 --> 00:11:27,980
pressured scenario you couldn't get away

00:11:24,680 --> 00:11:31,460
with that but just be aware that it's

00:11:27,980 --> 00:11:34,510
not you know it's not secure it is just

00:11:31,460 --> 00:11:36,530
being put out with every request and

00:11:34,510 --> 00:11:38,480
probably the most expensive thing we're

00:11:36,530 --> 00:11:40,040
doing this is all the timing points in

00:11:38,480 --> 00:11:41,510
your apps if you're putting lots of time

00:11:40,040 --> 00:11:43,370
again to be able to see where things

00:11:41,510 --> 00:11:44,600
going slow you want to have some way to

00:11:43,370 --> 00:11:45,470
turn that off because that's probably

00:11:44,600 --> 00:11:48,620
going to be the biggest performance

00:11:45,470 --> 00:11:49,640
overhead if you have them running on

00:11:48,620 --> 00:11:53,090
every request you want to be able switch

00:11:49,640 --> 00:11:55,600
it off so generally I think it's good

00:11:53,090 --> 00:11:58,910
I've been using it on my app noticed

00:11:55,600 --> 00:12:00,230
just I just have it running all the time

00:11:58,910 --> 00:12:02,570
on a few key things and then I have

00:12:00,230 --> 00:12:04,670
other bits I can switch on and off so

00:12:02,570 --> 00:12:06,230
that's pretty cool I like it it's been

00:12:04,670 --> 00:12:10,190
useful if you want to find out more you

00:12:06,230 --> 00:12:12,020
can go to MDM Docs and such server

00:12:10,190 --> 00:12:16,120
timing and there's a really great

00:12:12,020 --> 00:12:20,420
article there about it and you can find

00:12:16,120 --> 00:12:23,390
the slides and links to more information

00:12:20,420 --> 00:12:27,350
and all sort of stuff on noticed slash

00:12:23,390 --> 00:12:32,700
Drouin and thank you very much

00:12:27,350 --> 00:12:32,700

YouTube URL: https://www.youtube.com/watch?v=VKjhLHM1Xr8


