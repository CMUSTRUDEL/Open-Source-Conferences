Title: React Native and Native iOS - Bristol JS - February 2020
Publication date: 2020-03-10
Playlist: Bristol JS
Description: 
	Sam Ollason - My experience building mobile apps with React Native and Swift

React is a powerful JavaScript library for creating rich user interfaces. It was originally developed for the web for websites like Facebook and Instagram.

React Native is a way of using the same React technology to create mobile apps that automatically work on different platforms.

I share my experiences and the lessons l learnt from creating apps with React Native and talk about how it compares to developing native iOS apps and working with React for the web.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:03,240
so thank you very much for having me

00:00:01,319 --> 00:00:04,589
here today my name is Sam I work at a

00:00:03,240 --> 00:00:06,180
company called 'cycle and we're

00:00:04,589 --> 00:00:07,859
revolutionizing the wealth management

00:00:06,180 --> 00:00:09,750
space using our technology if you're

00:00:07,859 --> 00:00:11,070
interested check out our website oh you

00:00:09,750 --> 00:00:12,840
can talk to me more afterwards if you

00:00:11,070 --> 00:00:15,059
like and yeah I'm here today's talk

00:00:12,840 --> 00:00:17,039
about my experiences developing mobile

00:00:15,059 --> 00:00:20,070
applications with react native and also

00:00:17,039 --> 00:00:21,779
native iOS applications with Swift right

00:00:20,070 --> 00:00:23,609
so just a quick show hands to begin with

00:00:21,779 --> 00:00:28,170
who here has worked with react native

00:00:23,609 --> 00:00:30,900
before okay who's worked with Swift for

00:00:28,170 --> 00:00:33,840
developing native iOS and who's done

00:00:30,900 --> 00:00:35,730
react okay good

00:00:33,840 --> 00:00:37,649
fantastic so I'll explain different

00:00:35,730 --> 00:00:39,510
things as I go along if you haven't used

00:00:37,649 --> 00:00:41,550
these technologies but yes good to get a

00:00:39,510 --> 00:00:43,170
feel for the room a bit of an overview

00:00:41,550 --> 00:00:45,180
of what we're going to talk about a bit

00:00:43,170 --> 00:00:47,100
about how react native works just as a

00:00:45,180 --> 00:00:48,420
bit of a refresher to give some context

00:00:47,100 --> 00:00:49,590
if you haven't worked with it before and

00:00:48,420 --> 00:00:52,829
then I'm going to kind of share my

00:00:49,590 --> 00:00:55,020
experiences stepping back briefly this

00:00:52,829 --> 00:00:57,090
talk was really born out of a research

00:00:55,020 --> 00:00:59,789
project I did at my previous employer a

00:00:57,090 --> 00:01:01,620
few months ago and we were thinking

00:00:59,789 --> 00:01:03,300
about launching a mobile application and

00:01:01,620 --> 00:01:05,339
basically we weren't quite sure exactly

00:01:03,300 --> 00:01:07,650
what solution to go with so I undertook

00:01:05,339 --> 00:01:09,510
a research project to see what the

00:01:07,650 --> 00:01:13,380
differences are between react native and

00:01:09,510 --> 00:01:15,659
Swift and and using swiffer developing

00:01:13,380 --> 00:01:16,830
native applications and the focus of

00:01:15,659 --> 00:01:18,540
this talk really is on what's a

00:01:16,830 --> 00:01:20,670
developer experience like what it's like

00:01:18,540 --> 00:01:22,080
for me as developer or you or anyone

00:01:20,670 --> 00:01:23,549
else that you sit down and build these

00:01:22,080 --> 00:01:24,869
applications what does it feel like

00:01:23,549 --> 00:01:26,689
what's good about the different

00:01:24,869 --> 00:01:30,930
approaches and what could be improved

00:01:26,689 --> 00:01:32,520
and I've also thought it'll be obvious a

00:01:30,930 --> 00:01:35,400
bit more if you've worked with react

00:01:32,520 --> 00:01:36,930
before but I'll explain it a bit later

00:01:35,400 --> 00:01:38,250
on I've also got some comparisons

00:01:36,930 --> 00:01:40,380
between what it's like to work with

00:01:38,250 --> 00:01:43,229
react on across the different areas as

00:01:40,380 --> 00:01:44,670
well so comparing native iOS and react

00:01:43,229 --> 00:01:46,890
native and react to see what it's like

00:01:44,670 --> 00:01:48,540
so a quick overview on react native for

00:01:46,890 --> 00:01:51,299
those of you that are maybe not as

00:01:48,540 --> 00:01:53,070
familiar with it so react is a

00:01:51,299 --> 00:01:55,170
JavaScript library for building UI is

00:01:53,070 --> 00:01:57,659
very famous and been promoted by

00:01:55,170 --> 00:01:59,640
Facebook who created it and react native

00:01:57,659 --> 00:02:01,860
is also a JavaScript library but for

00:01:59,640 --> 00:02:04,680
building cross mobile cross-platform

00:02:01,860 --> 00:02:06,960
mobile applications so the idea behind

00:02:04,680 --> 00:02:08,970
react native is that you write one react

00:02:06,960 --> 00:02:11,039
native and JavaScript application in one

00:02:08,970 --> 00:02:13,410
place and it can be used across multiple

00:02:11,039 --> 00:02:15,210
platforms wherever that's iOS Android

00:02:13,410 --> 00:02:16,920
or even on an Amazon platform for

00:02:15,210 --> 00:02:18,120
example it's meant to be kind of

00:02:16,920 --> 00:02:19,980
platform-independent

00:02:18,120 --> 00:02:24,420
the important things kind of take away

00:02:19,980 --> 00:02:26,760
about react native is how it works so it

00:02:24,420 --> 00:02:28,350
works in the same way to react for

00:02:26,760 --> 00:02:29,790
creating new your user interface so with

00:02:28,350 --> 00:02:31,680
reacts you kind of split up your user

00:02:29,790 --> 00:02:33,630
interface into different components you

00:02:31,680 --> 00:02:35,580
might have a bus component a sidebar

00:02:33,630 --> 00:02:37,830
component a footer bar component and you

00:02:35,580 --> 00:02:39,870
kind of think of yeah your application

00:02:37,830 --> 00:02:42,690
is kind of encapsulated these different

00:02:39,870 --> 00:02:44,400
areas very similarly with react native

00:02:42,690 --> 00:02:47,160
you think of your mobile application is

00:02:44,400 --> 00:02:48,930
composed of these kind of encapsulated

00:02:47,160 --> 00:02:50,370
components so you ever a button

00:02:48,930 --> 00:02:51,750
component and that button component

00:02:50,370 --> 00:02:53,550
handles all the functionality of

00:02:51,750 --> 00:02:54,990
clicking on a button as well as all the

00:02:53,550 --> 00:02:59,250
UI bits you see as well and all the

00:02:54,990 --> 00:03:01,200
styling so it's almost the same code for

00:02:59,250 --> 00:03:03,480
creating a react application as to

00:03:01,200 --> 00:03:05,700
creating a ret native application most

00:03:03,480 --> 00:03:08,580
react developers as I was coming into a

00:03:05,700 --> 00:03:10,490
react native application it's not so

00:03:08,580 --> 00:03:12,480
much of a learning curve going into it

00:03:10,490 --> 00:03:14,400
the other important thing to take away

00:03:12,480 --> 00:03:17,010
about react native is that you get a

00:03:14,400 --> 00:03:18,900
real native application so I've got this

00:03:17,010 --> 00:03:20,760
Pinocchio thing down the bottom I had

00:03:18,900 --> 00:03:21,780
the gift version but it was painful

00:03:20,760 --> 00:03:23,250
enough when I was practicing this

00:03:21,780 --> 00:03:25,740
presentation so I thought I just have

00:03:23,250 --> 00:03:28,110
the still image here but what I mean by

00:03:25,740 --> 00:03:30,600
a real native application is that when

00:03:28,110 --> 00:03:32,280
you have a reactive mobile application

00:03:30,600 --> 00:03:34,590
when a user clicks on a button it is

00:03:32,280 --> 00:03:37,140
genuinely a native button that's

00:03:34,590 --> 00:03:39,510
provided by Android or iOS for example

00:03:37,140 --> 00:03:41,670
it's not like some approaches and where

00:03:39,510 --> 00:03:43,620
they essentially spin up a browser

00:03:41,670 --> 00:03:45,660
inside a mobile app for example you're

00:03:43,620 --> 00:03:47,100
not necessarily clicking on the real

00:03:45,660 --> 00:03:50,430
buttons that came with your Android

00:03:47,100 --> 00:03:51,690
phone or with your iOS system so a user

00:03:50,430 --> 00:03:53,640
wouldn't know unless you told them

00:03:51,690 --> 00:03:55,530
necessarily that they're working with a

00:03:53,640 --> 00:03:57,270
react native application which I think's

00:03:55,530 --> 00:03:59,010
really exciting building a JavaScript

00:03:57,270 --> 00:04:02,280
app that actually becomes a real native

00:03:59,010 --> 00:04:03,959
mobile app so these are the different

00:04:02,280 --> 00:04:05,340
kind of areas I'm going to talk about in

00:04:03,959 --> 00:04:07,920
the comparisons between the three

00:04:05,340 --> 00:04:09,510
different approaches which is working

00:04:07,920 --> 00:04:11,520
with react applications working with

00:04:09,510 --> 00:04:14,670
react native applications and their iOS

00:04:11,520 --> 00:04:17,910
applications so to begin with onto

00:04:14,670 --> 00:04:19,709
language so react native as I mentioned

00:04:17,910 --> 00:04:22,500
earlier it's almost like working with

00:04:19,709 --> 00:04:24,210
react but creating native apps there

00:04:22,500 --> 00:04:26,400
they're very similar in the syntax they

00:04:24,210 --> 00:04:26,970
use in the way you kind of wire up the

00:04:26,400 --> 00:04:29,090
application

00:04:26,970 --> 00:04:32,460
and the way you compose the applications

00:04:29,090 --> 00:04:34,440
so I say it's almost identical with

00:04:32,460 --> 00:04:37,440
isn't quite the same you can just take a

00:04:34,440 --> 00:04:39,090
react project and dump it onto a into a

00:04:37,440 --> 00:04:40,950
react native shell to make a mobile

00:04:39,090 --> 00:04:42,330
application but it is very similar and

00:04:40,950 --> 00:04:45,930
the learning curve this is quite shallow

00:04:42,330 --> 00:04:47,790
I found that actually some of the

00:04:45,930 --> 00:04:49,230
pre-made components that come with react

00:04:47,790 --> 00:04:51,510
native are actually easier to work with

00:04:49,230 --> 00:04:53,460
them react so for example handling

00:04:51,510 --> 00:04:56,070
pop-ups or modal's that pop out of the

00:04:53,460 --> 00:04:58,350
screen one of the solutions you can use

00:04:56,070 --> 00:04:59,760
in react for that is this a concept

00:04:58,350 --> 00:05:02,070
called a portal which is part of the

00:04:59,760 --> 00:05:03,690
react API and they're fairly easy to use

00:05:02,070 --> 00:05:05,700
and they take away some with a pain of

00:05:03,690 --> 00:05:07,050
working with them pop up components and

00:05:05,700 --> 00:05:09,330
some of the challenges they work with

00:05:07,050 --> 00:05:11,190
but the react native solution is this

00:05:09,330 --> 00:05:13,440
component which you import into one of

00:05:11,190 --> 00:05:15,240
your components in your application

00:05:13,440 --> 00:05:17,190
called a modal so called something

00:05:15,240 --> 00:05:19,650
similar but it's so much easier to use

00:05:17,190 --> 00:05:21,510
and takes away so much more of the pain

00:05:19,650 --> 00:05:23,550
of kind of having pop-ups come up come

00:05:21,510 --> 00:05:24,960
throughout your screen so I was really

00:05:23,550 --> 00:05:26,910
surprised that actually the react native

00:05:24,960 --> 00:05:30,750
experience from this point of view is I

00:05:26,910 --> 00:05:32,760
actually prefer to react something to

00:05:30,750 --> 00:05:35,130
kind of mention is that it's just

00:05:32,760 --> 00:05:37,470
JavaScript under the surface really with

00:05:35,130 --> 00:05:39,000
a react native application so lots of

00:05:37,470 --> 00:05:40,800
the quirks that exists with JavaScript

00:05:39,000 --> 00:05:42,630
like with this keyword and lots of other

00:05:40,800 --> 00:05:43,650
things like that are still present when

00:05:42,630 --> 00:05:45,450
you're developing and you're still

00:05:43,650 --> 00:05:46,919
working so although there's no

00:05:45,450 --> 00:05:49,500
difference there between react and react

00:05:46,919 --> 00:05:51,000
native the frustrations I have with

00:05:49,500 --> 00:05:52,440
JavaScript at times are still present

00:05:51,000 --> 00:05:55,410
when working with their react native

00:05:52,440 --> 00:05:57,750
applications so then looking at the

00:05:55,410 --> 00:06:00,419
language for a native iOS application so

00:05:57,750 --> 00:06:02,280
you you can use Objective C which is one

00:06:00,419 --> 00:06:04,500
of the kind of the older approach to

00:06:02,280 --> 00:06:05,910
developing native iOS apps but the more

00:06:04,500 --> 00:06:08,270
modern approach is using this language

00:06:05,910 --> 00:06:12,060
called Swift it came out I believe in

00:06:08,270 --> 00:06:14,280
2014 and developed by Apple and it's a

00:06:12,060 --> 00:06:15,900
really nice modern feeling language I

00:06:14,280 --> 00:06:19,080
really liked using it for lots of

00:06:15,900 --> 00:06:20,640
different reasons primarily these two

00:06:19,080 --> 00:06:22,740
concepts here in the middle of the

00:06:20,640 --> 00:06:24,570
screen so the language has got type

00:06:22,740 --> 00:06:27,930
checking but also type inference as well

00:06:24,570 --> 00:06:29,310
so scripts Swift when it's compiled will

00:06:27,930 --> 00:06:31,020
make sure that you're not using an

00:06:29,310 --> 00:06:32,760
integer we're going to be using a string

00:06:31,020 --> 00:06:34,200
so it's got that kind of checking in

00:06:32,760 --> 00:06:37,650
there which can catch bugs which is

00:06:34,200 --> 00:06:39,270
fantastic however it's also got type

00:06:37,650 --> 00:06:40,740
inference which means you don't have to

00:06:39,270 --> 00:06:42,630
declare your variables

00:06:40,740 --> 00:06:44,690
being a string or as being an integer or

00:06:42,630 --> 00:06:46,710
as being a date or something like that

00:06:44,690 --> 00:06:48,000
you get the benefits of the type

00:06:46,710 --> 00:06:49,410
checking at compile time which is

00:06:48,000 --> 00:06:51,420
fantastic but you don't have to kind of

00:06:49,410 --> 00:06:52,860
let your code with lots of different

00:06:51,420 --> 00:06:54,540
declarations it will kind of work out

00:06:52,860 --> 00:06:55,980
automatically for you which I think

00:06:54,540 --> 00:06:57,750
means you get the kind of safety but

00:06:55,980 --> 00:06:59,970
also get the speed of developing as well

00:06:57,750 --> 00:07:02,270
so some of the benefits of JavaScript

00:06:59,970 --> 00:07:04,500
but with a kind of bit more safety

00:07:02,270 --> 00:07:05,760
it was interesting learn in the language

00:07:04,500 --> 00:07:07,980
so I picked up the Apple kind of

00:07:05,760 --> 00:07:09,740
textbook and that's available online it

00:07:07,980 --> 00:07:11,910
was either free or quite cheap and

00:07:09,740 --> 00:07:13,050
getting started with Swift is really

00:07:11,910 --> 00:07:15,810
easy it kind of felt a bit like

00:07:13,050 --> 00:07:18,600
JavaScript but felt kind of a bit more

00:07:15,810 --> 00:07:19,980
structured in a bit safer to me but then

00:07:18,600 --> 00:07:22,320
all of a sudden my learning curve kind

00:07:19,980 --> 00:07:23,280
of went up a bit of a step so I found

00:07:22,320 --> 00:07:25,260
the kind of basics of the language

00:07:23,280 --> 00:07:27,300
really really easy to learn but then I

00:07:25,260 --> 00:07:28,350
didn't find it linear going to some of

00:07:27,300 --> 00:07:31,080
the more advanced features of the

00:07:28,350 --> 00:07:32,790
language so in particular I didn't I'd

00:07:31,080 --> 00:07:34,740
not work with optional types before I

00:07:32,790 --> 00:07:36,450
sent to work with them in typescript but

00:07:34,740 --> 00:07:38,340
an optional type of if you haven't

00:07:36,450 --> 00:07:39,840
worked with it before is basically there

00:07:38,340 --> 00:07:41,310
may be data there there may be not so

00:07:39,840 --> 00:07:44,040
you just have to kind of take care with

00:07:41,310 --> 00:07:46,530
him and I found it a bit confusing to

00:07:44,040 --> 00:07:48,330
work with them in Swift primarily

00:07:46,530 --> 00:07:50,070
because you have to well one way of

00:07:48,330 --> 00:07:51,780
working with them is and unwrapping them

00:07:50,070 --> 00:07:53,790
if you want to access a value inside of

00:07:51,780 --> 00:07:56,160
it and it's got this kind of exclamation

00:07:53,790 --> 00:07:57,990
mark syntax that I confuse me for awhile

00:07:56,160 --> 00:07:59,490
and kind of struggled to get my head

00:07:57,990 --> 00:08:01,440
around but there were a few other areas

00:07:59,490 --> 00:08:03,060
of the language that I thought first few

00:08:01,440 --> 00:08:04,950
chapters the book really easy to learn

00:08:03,060 --> 00:08:06,450
then all of a sudden it kind of stepped

00:08:04,950 --> 00:08:08,010
up a little bit whereas other languages

00:08:06,450 --> 00:08:11,970
I've learned can and have a nice linear

00:08:08,010 --> 00:08:13,770
learning curve so just kind of a summary

00:08:11,970 --> 00:08:15,420
they're looking at the language I prefer

00:08:13,770 --> 00:08:17,130
working with Swift compared to react

00:08:15,420 --> 00:08:18,990
native and for react for the web

00:08:17,130 --> 00:08:21,470
primarily because I prefer working with

00:08:18,990 --> 00:08:23,700
Swift compared to JavaScript really and

00:08:21,470 --> 00:08:25,080
it wasn't really so much the react

00:08:23,700 --> 00:08:26,250
native or the react components of that

00:08:25,080 --> 00:08:29,340
it's the fact that it's just JavaScript

00:08:26,250 --> 00:08:31,110
under the surface and in your kind of

00:08:29,340 --> 00:08:34,440
methods and functionality in your react

00:08:31,110 --> 00:08:35,910
or react native applications and compare

00:08:34,440 --> 00:08:37,320
and react native to react for the web

00:08:35,910 --> 00:08:38,670
actually preferred react native because

00:08:37,320 --> 00:08:40,500
I thought some of the components that

00:08:38,670 --> 00:08:41,690
come with the library actually were a

00:08:40,500 --> 00:08:44,130
lot easier to work with

00:08:41,690 --> 00:08:46,200
so overall I think Swift has the best

00:08:44,130 --> 00:08:48,930
developer experience when it comes to

00:08:46,200 --> 00:08:51,090
the language so tooling and

00:08:48,930 --> 00:08:54,150
infrastructure and to really kind of

00:08:51,090 --> 00:08:54,810
important parts of any projects so with

00:08:54,150 --> 00:08:57,630
a native

00:08:54,810 --> 00:09:00,300
project I developed on a Mac and I used

00:08:57,630 --> 00:09:02,640
Xcode which came with my Mac and the

00:09:00,300 --> 00:09:05,070
emulators for testing the application

00:09:02,640 --> 00:09:08,730
the same well it looked like also come

00:09:05,070 --> 00:09:11,339
with Xcode as well built in the emulator

00:09:08,730 --> 00:09:12,690
experience was generally really good it

00:09:11,339 --> 00:09:14,610
seemed to kind of match up whenever I

00:09:12,690 --> 00:09:16,560
looked at a real application on my phone

00:09:14,610 --> 00:09:18,990
primarily really I suppose because

00:09:16,560 --> 00:09:21,300
they're developed by Apple to be used on

00:09:18,990 --> 00:09:24,000
Apple phones and they spogli spend a lot

00:09:21,300 --> 00:09:26,070
of money and making the emulators really

00:09:24,000 --> 00:09:28,380
good and really realistic and to an

00:09:26,070 --> 00:09:30,240
actual mobile application so I know I've

00:09:28,380 --> 00:09:32,430
worked with other types of technology

00:09:30,240 --> 00:09:33,930
before we use an emulator or a simulator

00:09:32,430 --> 00:09:35,250
and then you get it into the real world

00:09:33,930 --> 00:09:36,810
or whatever your device you're going to

00:09:35,250 --> 00:09:38,670
use it on and it's totally different but

00:09:36,810 --> 00:09:42,960
I found the emulators to be really good

00:09:38,670 --> 00:09:44,850
actually so Swift for iOS applications

00:09:42,960 --> 00:09:47,940
is compiled you have to compile it

00:09:44,850 --> 00:09:49,440
before it's run on any any devices or

00:09:47,940 --> 00:09:54,180
before you upload to the App Store for

00:09:49,440 --> 00:09:56,279
example developing UI is often involves

00:09:54,180 --> 00:09:57,390
quite a lot of quick iterations I find

00:09:56,279 --> 00:10:00,089
on once and they could change to a

00:09:57,390 --> 00:10:02,610
layout or a color or add a quick bit of

00:10:00,089 --> 00:10:04,380
functionality and having the whole app

00:10:02,610 --> 00:10:06,210
compiled each time of raqqa then look at

00:10:04,380 --> 00:10:08,400
the changes in the emulator I actually

00:10:06,210 --> 00:10:09,750
found quite frustrating other compiled

00:10:08,400 --> 00:10:11,460
languages have worked with before

00:10:09,750 --> 00:10:13,110
I haven't been kind of going through

00:10:11,460 --> 00:10:14,940
it's quicker iterations because I hadn't

00:10:13,110 --> 00:10:17,190
been working with you eyes so I actually

00:10:14,940 --> 00:10:18,540
found this yeah quite frustrating to

00:10:17,190 --> 00:10:19,860
work with after a time even though I

00:10:18,540 --> 00:10:23,760
wasn't working with a really really big

00:10:19,860 --> 00:10:25,589
project when I was doing it so moving on

00:10:23,760 --> 00:10:28,620
to react native I tend to use webstorm

00:10:25,589 --> 00:10:30,660
of my ide that seems to split opinion

00:10:28,620 --> 00:10:31,950
massively a lot of people go Oh a lot of

00:10:30,660 --> 00:10:34,110
people go oh yeah we thought we're

00:10:31,950 --> 00:10:36,420
feeling you say I've done a weather to

00:10:34,110 --> 00:10:37,800
ask for opinion not on that but so I use

00:10:36,420 --> 00:10:39,630
web some fall on my JavaScript

00:10:37,800 --> 00:10:41,850
development and I use that for my react

00:10:39,630 --> 00:10:43,380
native and development as well but the

00:10:41,850 --> 00:10:45,930
emulators I used to test what the

00:10:43,380 --> 00:10:47,670
application would look like and work

00:10:45,930 --> 00:10:49,620
came from Xcode as well they're exactly

00:10:47,670 --> 00:10:51,120
the same ones that I would use for

00:10:49,620 --> 00:10:54,570
developing native applications were

00:10:51,120 --> 00:10:56,339
Swift so that was good because again the

00:10:54,570 --> 00:10:58,380
representations of my project were

00:10:56,339 --> 00:10:59,790
always pretty much accurate to what it

00:10:58,380 --> 00:11:01,410
looked like on a real device which was

00:10:59,790 --> 00:11:02,490
really good and you have some kind of

00:11:01,410 --> 00:11:03,810
confidence that you're building and

00:11:02,490 --> 00:11:05,580
testing against something that Apple

00:11:03,810 --> 00:11:06,650
made for an Apple product which was

00:11:05,580 --> 00:11:09,560
really good

00:11:06,650 --> 00:11:11,390
the big difference between working with

00:11:09,560 --> 00:11:13,820
react native competitor Swift was the

00:11:11,390 --> 00:11:15,080
ability firm to have hot reloading so if

00:11:13,820 --> 00:11:17,660
you've not worked with it before it's

00:11:15,080 --> 00:11:19,640
you save you changes in webstorm or your

00:11:17,660 --> 00:11:22,970
idea of choice and automatically your

00:11:19,640 --> 00:11:24,110
chains get your changes get shown in the

00:11:22,970 --> 00:11:26,390
browser if you're working with a web

00:11:24,110 --> 00:11:28,940
project or in the emulator automatically

00:11:26,390 --> 00:11:29,870
which was a massive time saver I didn't

00:11:28,940 --> 00:11:31,580
think it would be as much of a

00:11:29,870 --> 00:11:35,570
difference but for me it really really

00:11:31,580 --> 00:11:38,540
impacted the developer experience me so

00:11:35,570 --> 00:11:40,100
overall looking at tooling working with

00:11:38,540 --> 00:11:41,810
react native and comparing that to the

00:11:40,100 --> 00:11:43,550
native side they had the same emulator

00:11:41,810 --> 00:11:45,200
experience so there's no difference

00:11:43,550 --> 00:11:47,840
there but they were both equally as good

00:11:45,200 --> 00:11:49,460
which is a good thing I might prefer to

00:11:47,840 --> 00:11:51,320
having the hot reloading functionality

00:11:49,460 --> 00:11:52,940
that comes with the react native tooling

00:11:51,320 --> 00:11:55,460
and compared to the compilation it made

00:11:52,940 --> 00:11:57,320
it a lot faster to develop I preferred

00:11:55,460 --> 00:11:59,720
yeah so I prefer react native to the

00:11:57,320 --> 00:12:01,610
native iOS development there overall and

00:11:59,720 --> 00:12:04,340
the react native experience was pretty

00:12:01,610 --> 00:12:07,220
much the same as react reacts also got

00:12:04,340 --> 00:12:08,900
hot reloading capabilities in lots of

00:12:07,220 --> 00:12:11,840
the common infrastructures you can use

00:12:08,900 --> 00:12:13,460
so overall I think react native was the

00:12:11,840 --> 00:12:16,280
winner there for me and it's the same as

00:12:13,460 --> 00:12:18,290
react so moving on to styling the UI

00:12:16,280 --> 00:12:20,240
obviously a really important part of the

00:12:18,290 --> 00:12:22,850
application so with the native iOS

00:12:20,240 --> 00:12:24,500
approach inside of Xcode which you can

00:12:22,850 --> 00:12:28,220
use for lots of different projects for

00:12:24,500 --> 00:12:29,900
building native iOS apps you use the

00:12:28,220 --> 00:12:31,160
Xcode interface builder which is

00:12:29,900 --> 00:12:34,070
basically a set of tools that come with

00:12:31,160 --> 00:12:35,240
Xcode for building interfaces so I'll

00:12:34,070 --> 00:12:36,470
show you a picture of it in a minute if

00:12:35,240 --> 00:12:38,660
you don't used it before for a bit of

00:12:36,470 --> 00:12:41,060
context it gives you a lot of kind of

00:12:38,660 --> 00:12:42,920
fine grained control and there's lots of

00:12:41,060 --> 00:12:45,080
sliders and menus and dropdowns and

00:12:42,920 --> 00:12:46,580
stuff like that for manually and

00:12:45,080 --> 00:12:49,640
dragging and dropping stuff and making

00:12:46,580 --> 00:12:51,500
your UI look as you want it to and I

00:12:49,640 --> 00:12:52,970
really like that to begin with it felt

00:12:51,500 --> 00:12:55,430
like I had a lot of control and a lot of

00:12:52,970 --> 00:12:57,560
power but in the end I found actually

00:12:55,430 --> 00:13:00,050
quite cluttered and I felt it was quite

00:12:57,560 --> 00:13:01,700
hard to make it I wanted to make it

00:13:00,050 --> 00:13:03,650
particularly change to a particular part

00:13:01,700 --> 00:13:06,140
of one of the screens and I have to

00:13:03,650 --> 00:13:07,400
maybe go 30 seconds to two minutes to

00:13:06,140 --> 00:13:10,040
find the right slider on the right

00:13:07,400 --> 00:13:12,830
button or the right checkbox and that I

00:13:10,040 --> 00:13:14,510
wanted to find that I needed to enact

00:13:12,830 --> 00:13:16,370
the change I wanted so to begin with

00:13:14,510 --> 00:13:18,590
fantastic but over time actually found

00:13:16,370 --> 00:13:20,000
it quite frustrating so here's a

00:13:18,590 --> 00:13:22,460
screenshot of just

00:13:20,000 --> 00:13:25,490
sample project so lots of things going

00:13:22,460 --> 00:13:28,130
on on the screen to the left to your

00:13:25,490 --> 00:13:29,450
left you've got the files you've got the

00:13:28,130 --> 00:13:31,100
things that interact with the main view

00:13:29,450 --> 00:13:32,840
the main storyboard here in the middle

00:13:31,100 --> 00:13:34,490
and off to the right you've got the code

00:13:32,840 --> 00:13:37,100
files that relate to what's going on

00:13:34,490 --> 00:13:39,470
over there and on the very far right you

00:13:37,100 --> 00:13:41,420
can see there's some different check

00:13:39,470 --> 00:13:43,420
boxes and dropdowns for controlling what

00:13:41,420 --> 00:13:45,740
different aspects the UI looked like and

00:13:43,420 --> 00:13:47,630
yes to begin with I love this I thought

00:13:45,740 --> 00:13:49,160
it was absolutely fantastic but over

00:13:47,630 --> 00:13:52,390
time I found it a bit frustrating and I

00:13:49,160 --> 00:13:55,610
found it slowed down my development

00:13:52,390 --> 00:13:57,320
here's another example here this is

00:13:55,610 --> 00:14:00,680
actually part of a blog post I wrote to

00:13:57,320 --> 00:14:02,540
try and describe how to make a UI

00:14:00,680 --> 00:14:05,900
element scrollable because I didn't find

00:14:02,540 --> 00:14:07,010
it to be natively easy and you can see

00:14:05,900 --> 00:14:08,780
there's just lots of things going on

00:14:07,010 --> 00:14:10,790
here use lots of checkboxes lots of

00:14:08,780 --> 00:14:12,740
information I found it but overwhelming

00:14:10,790 --> 00:14:14,660
and frustrating over time and then yeah

00:14:12,740 --> 00:14:17,060
just a final kind of screenshot this is

00:14:14,660 --> 00:14:18,800
all about specifying how you want a

00:14:17,060 --> 00:14:20,240
particular elements be positioned

00:14:18,800 --> 00:14:22,940
relative to the kind of view and

00:14:20,240 --> 00:14:25,400
container it's in very manual lots of

00:14:22,940 --> 00:14:27,230
control I tended not to like that

00:14:25,400 --> 00:14:30,580
towards the end of my kind of experience

00:14:27,230 --> 00:14:33,920
developing with this prototype I built

00:14:30,580 --> 00:14:34,880
so moving on to react native it's kind

00:14:33,920 --> 00:14:36,740
of the opposite end of the spectrum

00:14:34,880 --> 00:14:39,320
really so you style your applications

00:14:36,740 --> 00:14:41,330
using flexbox and CSS which are two

00:14:39,320 --> 00:14:42,890
really common web technologies so I

00:14:41,330 --> 00:14:44,900
found that real easy to get my head

00:14:42,890 --> 00:14:46,760
around because I've use flexbox and CSS

00:14:44,900 --> 00:14:49,460
and in various web projects before and

00:14:46,760 --> 00:14:51,860
they're quite familiar to me and in fact

00:14:49,460 --> 00:14:53,390
it's very similar to react it's there's

00:14:51,860 --> 00:14:55,220
not really any techniques i've used in

00:14:53,390 --> 00:14:56,810
any react native development that are

00:14:55,220 --> 00:14:59,270
different really than any react

00:14:56,810 --> 00:15:00,710
applications which was quite nice coming

00:14:59,270 --> 00:15:03,410
from a react background to just kind of

00:15:00,710 --> 00:15:05,360
seamlessly transition into this one of

00:15:03,410 --> 00:15:08,210
the nice things I found about flexbox is

00:15:05,360 --> 00:15:09,410
that in the in the browser where it was

00:15:08,210 --> 00:15:11,480
designed to be used originally it

00:15:09,410 --> 00:15:12,380
handles resizing elements quite

00:15:11,480 --> 00:15:14,510
gracefully and it does that

00:15:12,380 --> 00:15:16,670
automatically if you you know expand and

00:15:14,510 --> 00:15:20,930
shrink the screen in the browser or if

00:15:16,670 --> 00:15:22,850
you rotate a mobile application to be

00:15:20,930 --> 00:15:24,680
horizontal it automatically positions

00:15:22,850 --> 00:15:26,720
all the elements and quite nicely you

00:15:24,680 --> 00:15:28,339
don't have to do too much work whereas

00:15:26,720 --> 00:15:29,959
with the native iOS approach at least

00:15:28,339 --> 00:15:32,690
the way I was doing in the way that I

00:15:29,959 --> 00:15:33,510
found you almost had to specify a layout

00:15:32,690 --> 00:15:35,160
for port

00:15:33,510 --> 00:15:36,030
in the layout for landscape and there

00:15:35,160 --> 00:15:41,040
were almost kind of two different

00:15:36,030 --> 00:15:43,110
tickets here's an example of a react

00:15:41,040 --> 00:15:45,210
native project so down the bottom of the

00:15:43,110 --> 00:15:48,570
screen here I've just got a stylesheet

00:15:45,210 --> 00:15:50,340
object which just comes from react

00:15:48,570 --> 00:15:51,990
native it's very similar to a CSS

00:15:50,340 --> 00:15:53,460
stylesheet really and it's all just

00:15:51,990 --> 00:15:55,500
controlled through code I've just

00:15:53,460 --> 00:15:57,180
defined a bunch of constant things here

00:15:55,500 --> 00:16:00,060
and I just apply them to different

00:15:57,180 --> 00:16:01,620
elements of the screen here and it's all

00:16:00,060 --> 00:16:02,580
in the same file which is part of the

00:16:01,620 --> 00:16:04,770
kind of react and react native

00:16:02,580 --> 00:16:06,720
philosophy and I found that a lot easier

00:16:04,770 --> 00:16:08,550
in the end to be able to associate

00:16:06,720 --> 00:16:11,670
what's going on in my view with how I

00:16:08,550 --> 00:16:13,230
want it to look so just as a bit of a

00:16:11,670 --> 00:16:14,670
summary there so reacting react native

00:16:13,230 --> 00:16:16,590
are really kind of similar they use

00:16:14,670 --> 00:16:18,750
flexbox and CSS which was fantastic

00:16:16,590 --> 00:16:20,100
coming from a react background and I

00:16:18,750 --> 00:16:21,840
actually much prefer working with the

00:16:20,100 --> 00:16:23,520
react native approach of kind of

00:16:21,840 --> 00:16:25,590
programmatically styling things as

00:16:23,520 --> 00:16:27,740
opposed to the Xcode interface builder

00:16:25,590 --> 00:16:30,210
for having this kind of manual control

00:16:27,740 --> 00:16:30,600
so anyone got any questions on styling

00:16:30,210 --> 00:16:35,970
at all

00:16:30,600 --> 00:16:40,290
yeah fantastically it's all of CSS

00:16:35,970 --> 00:16:42,720
supported I I don't know that I only

00:16:40,290 --> 00:16:46,650
really found I had to use a small subset

00:16:42,720 --> 00:16:48,810
of CSS to achieve what I wanted it was a

00:16:46,650 --> 00:16:51,210
far smaller subset of what I'd use in

00:16:48,810 --> 00:16:53,130
the browser develop a react application

00:16:51,210 --> 00:16:54,750
so I don't know the answer but my

00:16:53,130 --> 00:16:56,340
instinct is that everything would be

00:16:54,750 --> 00:16:59,760
supported to mess with you that's it

00:16:56,340 --> 00:17:01,560
thank you for your question so now

00:16:59,760 --> 00:17:03,210
looking at UI and logic so this is all

00:17:01,560 --> 00:17:05,579
about connecting up different aspects of

00:17:03,210 --> 00:17:07,020
your interface to the logic that you

00:17:05,579 --> 00:17:08,430
want to be triggered when people

00:17:07,020 --> 00:17:10,140
interact with your interface so again

00:17:08,430 --> 00:17:13,380
another important part of developing

00:17:10,140 --> 00:17:16,170
applications so with the native iOS

00:17:13,380 --> 00:17:18,329
approach it's got this MVC paradigm so

00:17:16,170 --> 00:17:19,920
you've got control early you've got a

00:17:18,329 --> 00:17:21,870
model which houses your data you've got

00:17:19,920 --> 00:17:23,730
a view which shows your data to the user

00:17:21,870 --> 00:17:26,490
and a controller which kind of controls

00:17:23,730 --> 00:17:28,740
both of them the view is the storyboard

00:17:26,490 --> 00:17:30,420
area in this in the middle of the

00:17:28,740 --> 00:17:32,490
section here so this is what kind of

00:17:30,420 --> 00:17:34,710
what your view is and the different

00:17:32,490 --> 00:17:35,280
storyboard of your application the

00:17:34,710 --> 00:17:38,220
controller

00:17:35,280 --> 00:17:41,070
Earths with source code files so over

00:17:38,220 --> 00:17:45,260
here on the right of the screen you see

00:17:41,070 --> 00:17:47,130
it's just it's just the kind of code why

00:17:45,260 --> 00:17:48,330
what I found a bit

00:17:47,130 --> 00:17:51,660
straighting about this is you have to

00:17:48,330 --> 00:17:54,180
make sure the appropriate files are open

00:17:51,660 --> 00:17:56,370
and close at the same time to connect

00:17:54,180 --> 00:17:57,750
different bits of your view to the logic

00:17:56,370 --> 00:17:59,640
in your applications I'm not going to do

00:17:57,750 --> 00:18:01,740
now because coding demonstrations never

00:17:59,640 --> 00:18:04,170
work but essentially the way you make a

00:18:01,740 --> 00:18:06,120
connection between your source code to

00:18:04,170 --> 00:18:09,870
the view say you want to control a

00:18:06,120 --> 00:18:11,670
button on a page is you go over to your

00:18:09,870 --> 00:18:13,290
Swift source code file you hold down on

00:18:11,670 --> 00:18:15,990
a Mac something like a shift key I think

00:18:13,290 --> 00:18:19,110
off the top of my head you drag from the

00:18:15,990 --> 00:18:20,910
source control file and you drop it onto

00:18:19,110 --> 00:18:23,580
the element you want so you make a kind

00:18:20,910 --> 00:18:25,740
of visible link with your cursor and

00:18:23,580 --> 00:18:27,390
that's how you connect them together and

00:18:25,740 --> 00:18:30,600
then what the Xcode interface build will

00:18:27,390 --> 00:18:31,890
do was drop a reference into your source

00:18:30,600 --> 00:18:33,300
code it will basically create a variable

00:18:31,890 --> 00:18:34,980
for you that's already linked up in the

00:18:33,300 --> 00:18:37,430
background so I don't know how where you

00:18:34,980 --> 00:18:39,600
can see it this isn't for the particular

00:18:37,430 --> 00:18:42,300
view that's visible but there's these

00:18:39,600 --> 00:18:44,220
weak these outlet things which are

00:18:42,300 --> 00:18:47,040
basically references to the appropriate

00:18:44,220 --> 00:18:50,550
part of the of the view of your view

00:18:47,040 --> 00:18:52,020
application and I like this to begin

00:18:50,550 --> 00:18:53,280
with because it was quite cool to drag

00:18:52,020 --> 00:18:54,870
and drop things and have a reference

00:18:53,280 --> 00:18:56,040
already made for you but again you have

00:18:54,870 --> 00:18:57,450
to kind of make sure you've got the

00:18:56,040 --> 00:18:59,220
right folders open at the same time

00:18:57,450 --> 00:19:00,480
otherwise you want to work on the bit of

00:18:59,220 --> 00:19:03,330
a view and you can't find the right

00:19:00,480 --> 00:19:05,220
source and file to connect it with and

00:19:03,330 --> 00:19:08,460
also I ran into some problems that took

00:19:05,220 --> 00:19:09,480
me quite a while to solve where some you

00:19:08,460 --> 00:19:11,490
might want to delete one of these

00:19:09,480 --> 00:19:12,690
outlets and naturally I just went and

00:19:11,490 --> 00:19:14,160
kind of deleted the line of code

00:19:12,690 --> 00:19:15,540
thinking the variables gone

00:19:14,160 --> 00:19:17,340
everyone's forgot about it we don't have

00:19:15,540 --> 00:19:18,630
to deal with that ever again but Xcode

00:19:17,340 --> 00:19:20,670
did something clever in the background

00:19:18,630 --> 00:19:22,440
where the reference is more than just

00:19:20,670 --> 00:19:24,900
the kind of line of code in the source

00:19:22,440 --> 00:19:26,640
file there so in the end I found out how

00:19:24,900 --> 00:19:27,960
to delete that link but again I had to

00:19:26,640 --> 00:19:30,150
kind of go through a few sudden then

00:19:27,960 --> 00:19:32,220
used to find out what to do so once you

00:19:30,150 --> 00:19:34,650
know it is fantastic and it's easy to

00:19:32,220 --> 00:19:36,810
find but it was more than it had to

00:19:34,650 --> 00:19:38,250
delete the line of code and then kind of

00:19:36,810 --> 00:19:40,140
go through two or three menus to find

00:19:38,250 --> 00:19:42,030
what I wanted to do so that slowed me

00:19:40,140 --> 00:19:43,680
down a little bit again another kind of

00:19:42,030 --> 00:19:46,140
polar opposite really working with react

00:19:43,680 --> 00:19:47,940
native one of the core concepts of react

00:19:46,140 --> 00:19:50,820
and react native is building your

00:19:47,940 --> 00:19:52,500
application using components which is

00:19:50,820 --> 00:19:56,010
all about bundling up the logic and the

00:19:52,500 --> 00:19:58,140
markup in one kind of place really so

00:19:56,010 --> 00:19:59,580
because of that the logic and the mark

00:19:58,140 --> 00:20:00,809
up the controls review is in one

00:19:59,580 --> 00:20:03,029
location which I

00:20:00,809 --> 00:20:05,100
really good and your markup scraped with

00:20:03,029 --> 00:20:07,169
JSX if you haven't worked with it before

00:20:05,100 --> 00:20:08,759
it's kind of like a hybrid between HTML

00:20:07,169 --> 00:20:12,149
and JavaScript so kind of mix up

00:20:08,759 --> 00:20:14,700
together so here's a an example here

00:20:12,149 --> 00:20:16,080
although I'm not hooking up any logic

00:20:14,700 --> 00:20:17,700
and any kind of functionality the

00:20:16,080 --> 00:20:19,860
principles still the same so at the very

00:20:17,700 --> 00:20:22,580
top with the big red box I've got

00:20:19,860 --> 00:20:26,159
basically a property on an object and

00:20:22,580 --> 00:20:27,929
I'm associating that with this bit of

00:20:26,159 --> 00:20:31,529
the view with this bit of what I want to

00:20:27,929 --> 00:20:33,960
render to the user really easily just by

00:20:31,529 --> 00:20:35,340
kind of yeah inserting the variable and

00:20:33,960 --> 00:20:37,080
if you like so there's no dragging and

00:20:35,340 --> 00:20:38,940
dropping that's where the reference is

00:20:37,080 --> 00:20:40,830
and if I wanted to delete where this

00:20:38,940 --> 00:20:43,320
variable was used inside this slide

00:20:40,830 --> 00:20:45,480
component then I just delete it and it

00:20:43,320 --> 00:20:48,480
kind of goes straight away any kind of

00:20:45,480 --> 00:20:50,399
eagle-eyed people here today will might

00:20:48,480 --> 00:20:52,470
notice that this is a slide and this is

00:20:50,399 --> 00:20:53,789
a first slide so this application on

00:20:52,470 --> 00:20:55,769
showing you today is actually written in

00:20:53,789 --> 00:20:57,210
react which you may expect being a react

00:20:55,769 --> 00:20:58,499
geek but yeah so this is the

00:20:57,210 --> 00:21:02,730
presentation you're looking at under the

00:20:58,499 --> 00:21:04,139
surface so conclusion I might refer the

00:21:02,730 --> 00:21:05,639
react native approach of doing this

00:21:04,139 --> 00:21:07,320
having everything in one file everything

00:21:05,639 --> 00:21:07,529
programmatic found that a lot easier to

00:21:07,320 --> 00:21:09,899
use

00:21:07,529 --> 00:21:12,720
although the native iOS approach is neat

00:21:09,899 --> 00:21:14,389
and I found that react was basically the

00:21:12,720 --> 00:21:16,499
same as react for the web here because

00:21:14,389 --> 00:21:18,059
when you're talking about connecting you

00:21:16,499 --> 00:21:19,980
iEARN logic the fact that it's a mobile

00:21:18,059 --> 00:21:23,539
app or you're working with a web app is

00:21:19,980 --> 00:21:23,539
pretty much agnostic and doesn't matter

00:21:23,749 --> 00:21:27,600
project roadmap this is really meant to

00:21:26,190 --> 00:21:29,879
mean what are the decisions you have to

00:21:27,600 --> 00:21:31,830
make as a developer from starting out to

00:21:29,879 --> 00:21:33,499
getting your app into production and

00:21:31,830 --> 00:21:35,519
deploying it and what are the kind of

00:21:33,499 --> 00:21:39,509
options you have along the way for doing

00:21:35,519 --> 00:21:41,159
that so with react native I found that

00:21:39,509 --> 00:21:43,529
there were kind of two main branches you

00:21:41,159 --> 00:21:45,749
could take in two approaches one is

00:21:43,529 --> 00:21:47,879
using a tool called Expo which is kind

00:21:45,749 --> 00:21:51,059
of like a shell around your react native

00:21:47,879 --> 00:21:52,379
application and expo basically makes it

00:21:51,059 --> 00:21:55,139
feel like more of a hybrid you don't

00:21:52,379 --> 00:21:57,299
have any access to any of the native iOS

00:21:55,139 --> 00:22:00,029
code or any Android code you're just

00:21:57,299 --> 00:22:02,940
kind of writing JavaScript and it's got

00:22:00,029 --> 00:22:04,950
some neat tools where you can share your

00:22:02,940 --> 00:22:06,990
project very easily between developers

00:22:04,950 --> 00:22:08,580
who also have the right expo tools so

00:22:06,990 --> 00:22:10,379
you can very quickly create a URL of

00:22:08,580 --> 00:22:11,630
your development project send it to

00:22:10,379 --> 00:22:13,429
someone and they can open up

00:22:11,630 --> 00:22:14,630
the kind of Xcode tools and see what

00:22:13,429 --> 00:22:16,760
your apps looking like which is really

00:22:14,630 --> 00:22:19,309
neat and they can also do similar kind

00:22:16,760 --> 00:22:21,080
of things with QR codes as well the

00:22:19,309 --> 00:22:24,230
other approach is using the react native

00:22:21,080 --> 00:22:26,299
CLI route which is kind of more I

00:22:24,230 --> 00:22:28,340
suppose traditional route that was

00:22:26,299 --> 00:22:29,690
created by Facebook originally and this

00:22:28,340 --> 00:22:32,000
is where you have access to the native

00:22:29,690 --> 00:22:34,340
code and for iOS and Android as well as

00:22:32,000 --> 00:22:36,080
a JavaScript code as well so it's not

00:22:34,340 --> 00:22:38,450
always clear or it wasn't at least clear

00:22:36,080 --> 00:22:39,590
to me which one to pick they they both

00:22:38,450 --> 00:22:42,320
seem to have their benefits and their

00:22:39,590 --> 00:22:45,110
pros and their cons but one challenge I

00:22:42,320 --> 00:22:47,840
found quite away into one of my kind of

00:22:45,110 --> 00:22:50,419
first projects is going down the expo

00:22:47,840 --> 00:22:52,130
route although I didn't have access to

00:22:50,419 --> 00:22:54,200
any of the native file so I couldn't see

00:22:52,130 --> 00:22:55,010
any of the iOS or Android files to

00:22:54,200 --> 00:22:57,350
change anything

00:22:55,010 --> 00:22:58,789
I found that I needed that for something

00:22:57,350 --> 00:23:00,799
I didn't think I'd need it for so I

00:22:58,789 --> 00:23:02,720
wanted to integrate Google firebase for

00:23:00,799 --> 00:23:05,600
authentication and I found that I hadn't

00:23:02,720 --> 00:23:07,400
had to add a few lines to a color of

00:23:05,600 --> 00:23:09,470
Android files and a couple of iOS files

00:23:07,400 --> 00:23:10,850
and nothing wasn't really much code it

00:23:09,470 --> 00:23:13,580
was just adding a few things into the

00:23:10,850 --> 00:23:15,080
appropriate configs basically but I

00:23:13,580 --> 00:23:17,090
found there wasn't really a way of doing

00:23:15,080 --> 00:23:19,429
that with expo that's all you have to

00:23:17,090 --> 00:23:21,500
essentially eject it and so the project

00:23:19,429 --> 00:23:24,200
kind of looks like being a react native

00:23:21,500 --> 00:23:26,090
CLI project so it's almost as if you

00:23:24,200 --> 00:23:27,500
went down the first route in the first

00:23:26,090 --> 00:23:30,679
place and you lose those benefits of

00:23:27,500 --> 00:23:32,090
expo and it was probably because it was

00:23:30,679 --> 00:23:33,470
one of my first times developing but

00:23:32,090 --> 00:23:34,549
that was quite a way through the project

00:23:33,470 --> 00:23:36,669
but I found that and it wasn't quite

00:23:34,549 --> 00:23:38,330
clear what the best approach was

00:23:36,669 --> 00:23:40,400
although you could argue this

00:23:38,330 --> 00:23:42,970
flexibility there so it's swings and

00:23:40,400 --> 00:23:45,080
roundabouts there's present cons and

00:23:42,970 --> 00:23:46,460
because of the kind of style of react

00:23:45,080 --> 00:23:48,409
native being a kind of open source

00:23:46,460 --> 00:23:50,330
JavaScript project there's lots of

00:23:48,409 --> 00:23:51,590
community approaches so I looked at what

00:23:50,330 --> 00:23:52,970
other companies were doing what other

00:23:51,590 --> 00:23:55,159
people were doing in their side projects

00:23:52,970 --> 00:23:56,929
and when I started it wasn't quite clear

00:23:55,159 --> 00:23:58,520
what the kind of best approach was to

00:23:56,929 --> 00:24:01,010
structure an application and what the

00:23:58,520 --> 00:24:04,970
kind of impacts would be of going down a

00:24:01,010 --> 00:24:06,830
particular route so with the native iOS

00:24:04,970 --> 00:24:08,510
approach quite the opposite really

00:24:06,830 --> 00:24:11,000
there's a kind of clear linear learning

00:24:08,510 --> 00:24:12,710
path between this is how you go from

00:24:11,000 --> 00:24:15,140
writing hello world all the way kind of

00:24:12,710 --> 00:24:16,880
through to releasing an actor to

00:24:15,140 --> 00:24:18,440
production and and I kind of make sense

00:24:16,880 --> 00:24:20,780
really with the Apple philosophy of

00:24:18,440 --> 00:24:24,440
doing things the Apple way so I wasn't

00:24:20,780 --> 00:24:25,370
really surprised with that so comparing

00:24:24,440 --> 00:24:27,170
both of them together

00:24:25,370 --> 00:24:29,630
I actually preferred the kind of guided

00:24:27,170 --> 00:24:31,370
nature that the Apple and native iOS

00:24:29,630 --> 00:24:33,770
approach gives you if there was a lot

00:24:31,370 --> 00:24:35,450
more hand held and could be argued it's

00:24:33,770 --> 00:24:39,590
less flexible but I found it was a lot

00:24:35,450 --> 00:24:42,410
easier to get going and I the mark of

00:24:39,590 --> 00:24:44,000
color kind of good roadmap I think it

00:24:42,410 --> 00:24:45,860
delayed the point of which I had to make

00:24:44,000 --> 00:24:47,809
important architectural decisions which

00:24:45,860 --> 00:24:49,220
was really useful it was quite late in

00:24:47,809 --> 00:24:51,710
the project that I had to start kind of

00:24:49,220 --> 00:24:55,720
making important kind of branching

00:24:51,710 --> 00:24:57,830
changes which was really handy deploying

00:24:55,720 --> 00:25:01,610
kind of getting to there was the end of

00:24:57,830 --> 00:25:03,140
the project life cycle here so we've

00:25:01,610 --> 00:25:05,210
react native if you've built your

00:25:03,140 --> 00:25:08,170
project using the react native CLI

00:25:05,210 --> 00:25:11,510
option which was one of the two options

00:25:08,170 --> 00:25:14,420
inside your your alongside or your kind

00:25:11,510 --> 00:25:16,490
of JavaScript code and the config

00:25:14,420 --> 00:25:18,290
options there's an Xcode project in

00:25:16,490 --> 00:25:20,660
there if you open the Xcode project into

00:25:18,290 --> 00:25:23,929
Xcode from that point onwards you just

00:25:20,660 --> 00:25:26,090
use the Xcode tools as if it was a

00:25:23,929 --> 00:25:27,920
native iOS application so it was really

00:25:26,090 --> 00:25:29,720
seamless really it was almost as if I

00:25:27,920 --> 00:25:34,309
was just developing a native iOS app

00:25:29,720 --> 00:25:36,980
which was good with the with the expo

00:25:34,309 --> 00:25:40,340
routes of working with a react native

00:25:36,980 --> 00:25:41,929
application I found that being able to

00:25:40,340 --> 00:25:43,100
deploy it I couldn't quite get it to

00:25:41,929 --> 00:25:44,630
work with that let's go for some reason

00:25:43,100 --> 00:25:46,460
but that was probably something I was

00:25:44,630 --> 00:25:47,929
doing but there was a similar Apple

00:25:46,460 --> 00:25:49,309
desktop tool that I found where you

00:25:47,929 --> 00:25:50,870
could bundle up the application and

00:25:49,309 --> 00:25:53,320
again from that point on what it was

00:25:50,870 --> 00:25:55,190
just as if it was a native iOS

00:25:53,320 --> 00:25:56,570
application which was really handy

00:25:55,190 --> 00:25:58,250
because there's all the Apple

00:25:56,570 --> 00:26:01,190
documentation available and it felt very

00:25:58,250 --> 00:26:03,230
streamlined something that is really

00:26:01,190 --> 00:26:04,640
neat and worth mentioning about Expo

00:26:03,230 --> 00:26:06,650
it's not really deploying it's more

00:26:04,640 --> 00:26:09,410
about what they call publishing which is

00:26:06,650 --> 00:26:12,410
and sharing I suppose the kind of

00:26:09,410 --> 00:26:16,940
snapshot of the application really so if

00:26:12,410 --> 00:26:18,530
I develop using the expo CLI route and

00:26:16,940 --> 00:26:20,900
I've got this Expo shell around my react

00:26:18,530 --> 00:26:22,460
native application I can share demos

00:26:20,900 --> 00:26:24,650
with people my team really easily it's

00:26:22,460 --> 00:26:26,720
really really handy but I can then also

00:26:24,650 --> 00:26:28,550
ship over-the-air updates with them so

00:26:26,720 --> 00:26:30,200
they wouldn't I can very easily kind of

00:26:28,550 --> 00:26:31,490
push my code out to them and they don't

00:26:30,200 --> 00:26:33,530
have to go through the App Store or

00:26:31,490 --> 00:26:35,210
something like that to get test versions

00:26:33,530 --> 00:26:37,250
of my application which is really handy

00:26:35,210 --> 00:26:39,050
and means you can iterate a lot faster I

00:26:37,250 --> 00:26:39,260
didn't really explore that too much in

00:26:39,050 --> 00:26:41,060
debt

00:26:39,260 --> 00:26:42,950
there was work on this kind of research

00:26:41,060 --> 00:26:45,140
project by myself but I'd be interested

00:26:42,950 --> 00:26:46,670
here afterwards if anyone's got any

00:26:45,140 --> 00:26:48,730
experiences or any comments about that

00:26:46,670 --> 00:26:51,740
I'd be yeah it'd be great to hear

00:26:48,730 --> 00:26:53,780
so overall the react native approach and

00:26:51,740 --> 00:26:55,430
was pretty much the same as the native

00:26:53,780 --> 00:26:56,660
iOS approach which was really good and

00:26:55,430 --> 00:26:58,940
Apple spent a lot of time and money

00:26:56,660 --> 00:27:00,530
making that process relatively smooth

00:26:58,940 --> 00:27:02,060
once you kind of get head around the

00:27:00,530 --> 00:27:05,240
documentation so they were both really

00:27:02,060 --> 00:27:07,580
quite painless approaches to do which

00:27:05,240 --> 00:27:09,530
was really good and I've heard that kind

00:27:07,580 --> 00:27:11,960
of this is more on the publishing side

00:27:09,530 --> 00:27:13,610
that the expo route is actually better

00:27:11,960 --> 00:27:15,320
than the native iOS route because you

00:27:13,610 --> 00:27:17,600
can share these over-the-air updates

00:27:15,320 --> 00:27:19,250
with other developers on your team and

00:27:17,600 --> 00:27:21,080
other test users for example which makes

00:27:19,250 --> 00:27:23,330
things a bit faster again would be

00:27:21,080 --> 00:27:27,080
really keen to hear anyone else's

00:27:23,330 --> 00:27:29,810
thoughts on that finally near in the end

00:27:27,080 --> 00:27:31,610
looking at bugs and support none of us

00:27:29,810 --> 00:27:35,030
write bugs in our code right now we

00:27:31,610 --> 00:27:36,740
unfortunately these things happen and my

00:27:35,030 --> 00:27:39,860
philosophy going into this before I even

00:27:36,740 --> 00:27:41,120
looked at which you know explored how

00:27:39,860 --> 00:27:43,610
different things worked with react

00:27:41,120 --> 00:27:45,560
native or Swift was my philosophy is

00:27:43,610 --> 00:27:47,600
imagine it's 5:00 p.m. I want to go home

00:27:45,560 --> 00:27:49,610
it's on a Friday which project would I

00:27:47,600 --> 00:27:51,170
rather be working with and that kind of

00:27:49,610 --> 00:27:53,420
help helps you make an informed opinion

00:27:51,170 --> 00:27:55,070
about these things so looking at react

00:27:53,420 --> 00:27:57,560
native it leaks when I started building

00:27:55,070 --> 00:27:59,300
rack native apps which is quite was

00:27:57,560 --> 00:28:00,590
quite a while ago and when I look at

00:27:59,300 --> 00:28:02,560
this research project we're kind of

00:28:00,590 --> 00:28:05,480
looking just after six months ago maybe

00:28:02,560 --> 00:28:07,130
it felt like it had lots of moving parts

00:28:05,480 --> 00:28:08,930
there was lots of different tools around

00:28:07,130 --> 00:28:10,610
the infrastructure for doing various

00:28:08,930 --> 00:28:12,530
different things and building testing

00:28:10,610 --> 00:28:15,050
running up and and you know these kind

00:28:12,530 --> 00:28:17,480
of things and I found that when I had a

00:28:15,050 --> 00:28:21,200
bug it was quite hard to tell whether it

00:28:17,480 --> 00:28:22,820
was in my code or my config or in one of

00:28:21,200 --> 00:28:24,920
the react native tools as part of their

00:28:22,820 --> 00:28:27,170
ecosystem and I found that when I looked

00:28:24,920 --> 00:28:29,180
on the kind of classic gethub issues

00:28:27,170 --> 00:28:30,950
there was lots of breaking changes

00:28:29,180 --> 00:28:33,260
between North point 5 7 and North Point

00:28:30,950 --> 00:28:34,520
5 8 and North point 6 1 or point 6 2 so

00:28:33,260 --> 00:28:36,050
it's quite hard to kind of route out

00:28:34,520 --> 00:28:40,790
where the real bug was which was quite

00:28:36,050 --> 00:28:42,650
frustrating to get started with react

00:28:40,790 --> 00:28:44,720
I suppose it's similar in some respects

00:28:42,650 --> 00:28:45,830
because it's a open source project and

00:28:44,720 --> 00:28:48,140
there's lots of tools and there's lots

00:28:45,830 --> 00:28:50,510
of open source infrastructure you can

00:28:48,140 --> 00:28:52,190
use but it's got such a bigger community

00:28:50,510 --> 00:28:52,980
and it's so much more mature I've never

00:28:52,190 --> 00:28:54,360
really

00:28:52,980 --> 00:28:56,940
have many problems with this and

00:28:54,360 --> 00:28:59,279
whenever I have a bug was react it seems

00:28:56,940 --> 00:29:00,600
to be that I can find and identify where

00:28:59,279 --> 00:29:04,320
the problem is quite quickly which is

00:29:00,600 --> 00:29:06,480
really handy kind of in in the polar

00:29:04,320 --> 00:29:07,830
opposite really with the native route it

00:29:06,480 --> 00:29:09,720
was actually really easy to find the

00:29:07,830 --> 00:29:11,010
solution to whatever problem I was

00:29:09,720 --> 00:29:13,740
having whether it was a problem with my

00:29:11,010 --> 00:29:16,740
code or my config or whether the way I

00:29:13,740 --> 00:29:18,630
set up Xcode for example and not only

00:29:16,740 --> 00:29:20,070
was it easy to find a solution but it

00:29:18,630 --> 00:29:22,649
was always quite clear on Stack Overflow

00:29:20,070 --> 00:29:24,809
or one of the Apple help sites on github

00:29:22,649 --> 00:29:26,460
what was the kind of best practice and

00:29:24,809 --> 00:29:28,559
recommended solution that was advised

00:29:26,460 --> 00:29:30,210
either by Apple or by you know

00:29:28,559 --> 00:29:31,919
well-known people in the community so I

00:29:30,210 --> 00:29:33,929
often had a lot of confidence when I was

00:29:31,919 --> 00:29:36,269
making a change or fixing a bug that I

00:29:33,929 --> 00:29:39,870
was doing the right thing which is quite

00:29:36,269 --> 00:29:41,940
good so overall I much preferred the

00:29:39,870 --> 00:29:44,970
native experience with this compared to

00:29:41,940 --> 00:29:47,220
working with react for the web and react

00:29:44,970 --> 00:29:48,480
for the web actually preferred with

00:29:47,220 --> 00:29:50,700
react native because it's a lot more

00:29:48,480 --> 00:29:52,200
mature really so arguably it's a

00:29:50,700 --> 00:29:54,090
slightly unfair comparison but this is

00:29:52,200 --> 00:29:56,580
all about the experience of what it's

00:29:54,090 --> 00:29:58,070
like to develop from my perspective so

00:29:56,580 --> 00:30:01,139
that's what I found

00:29:58,070 --> 00:30:04,760
so overall is a bit of summary we looked

00:30:01,139 --> 00:30:07,470
at the language Swift very modern very

00:30:04,760 --> 00:30:09,149
nice feeling language and type checking

00:30:07,470 --> 00:30:11,279
and type inference so you get the speed

00:30:09,149 --> 00:30:13,200
of development but the kind of the power

00:30:11,279 --> 00:30:15,029
of type checking so I actually preferred

00:30:13,200 --> 00:30:17,909
this to working with react native and

00:30:15,029 --> 00:30:19,230
react and fundamentally JavaScript the

00:30:17,909 --> 00:30:20,760
tooling and infrastructure I actually

00:30:19,230 --> 00:30:22,710
prefer working with react native

00:30:20,760 --> 00:30:25,019
fundamentally because of this abilities

00:30:22,710 --> 00:30:27,600
have hot reloading and I at the time

00:30:25,019 --> 00:30:30,000
wasn't aware of a way you could have hot

00:30:27,600 --> 00:30:31,919
reloading available in the native iOS

00:30:30,000 --> 00:30:34,470
projects I was working in and the react

00:30:31,919 --> 00:30:35,549
native version of this hot reloading

00:30:34,470 --> 00:30:37,620
worked pretty well for me and worked

00:30:35,549 --> 00:30:38,700
really easily with the styling I

00:30:37,620 --> 00:30:40,980
preferred the kind of programmatic

00:30:38,700 --> 00:30:43,370
approach using flexbox and CSS and

00:30:40,980 --> 00:30:46,380
having variables inside source code

00:30:43,370 --> 00:30:47,970
rather than having the Xcode interface

00:30:46,380 --> 00:30:48,950
builder to control different aspects of

00:30:47,970 --> 00:30:51,929
my UI

00:30:48,950 --> 00:30:53,429
connecting the UI to logic so how do you

00:30:51,929 --> 00:30:55,679
make a button on your page responsive

00:30:53,429 --> 00:30:57,929
similar to the point above I preferred

00:30:55,679 --> 00:31:00,360
having the programmatic approaches

00:30:57,929 --> 00:31:02,159
having variables and functions and

00:31:00,360 --> 00:31:04,559
pastner's into my person those things

00:31:02,159 --> 00:31:06,179
into my react components using code as

00:31:04,559 --> 00:31:06,690
opposed to creating these links between

00:31:06,179 --> 00:31:08,430
the

00:31:06,690 --> 00:31:10,320
from bits of your application in the

00:31:08,430 --> 00:31:13,650
storyboard and in the source control

00:31:10,320 --> 00:31:15,390
file the source code file with the

00:31:13,650 --> 00:31:17,550
project roadmap approach I much

00:31:15,390 --> 00:31:19,590
preferred the kind of hand held apple

00:31:17,550 --> 00:31:21,300
guided approach it was a lot easier to

00:31:19,590 --> 00:31:23,880
get things going there's a lot smoother

00:31:21,300 --> 00:31:25,590
and again fundamentally I didn't have to

00:31:23,880 --> 00:31:26,940
make important architectural branching

00:31:25,590 --> 00:31:30,720
decisions until quite late in the

00:31:26,940 --> 00:31:32,550
process we're deploying I they were

00:31:30,720 --> 00:31:34,920
quite similar approaches really to kind

00:31:32,550 --> 00:31:38,160
of getting your code up into the App

00:31:34,920 --> 00:31:39,360
Store but the reason why I've chosen

00:31:38,160 --> 00:31:41,430
react native here is because of

00:31:39,360 --> 00:31:44,730
publishing which is I suppose a kind of

00:31:41,430 --> 00:31:46,560
subset of deploying really this ability

00:31:44,730 --> 00:31:48,630
to have over-the-air updates and share

00:31:46,560 --> 00:31:49,860
your code easily which I think in

00:31:48,630 --> 00:31:51,390
principle sounds fantastic

00:31:49,860 --> 00:31:53,400
and although I've not got too much

00:31:51,390 --> 00:31:55,260
experience with and then finally for

00:31:53,400 --> 00:31:57,240
support it was lot easier to find

00:31:55,260 --> 00:31:58,680
exactly where the problem was when I was

00:31:57,240 --> 00:32:01,010
working with the native approach using

00:31:58,680 --> 00:32:03,630
Swift and it was what easier to see

00:32:01,010 --> 00:32:06,240
whether a solution was kind of best

00:32:03,630 --> 00:32:07,560
practice and recommended or whether it

00:32:06,240 --> 00:32:10,500
was just kind of one of the many they're

00:32:07,560 --> 00:32:12,810
out there and so I've got some resources

00:32:10,500 --> 00:32:15,780
I've got an article which was the

00:32:12,810 --> 00:32:16,950
inspiration for this presentation that I

00:32:15,780 --> 00:32:19,500
wrote on medium which you're more than

00:32:16,950 --> 00:32:21,150
welcome to check out I'm sure will share

00:32:19,500 --> 00:32:22,860
these these links new slides afterwards

00:32:21,150 --> 00:32:24,570
that's got a bit more detailed write-up

00:32:22,860 --> 00:32:25,920
and goes into a bit more kind of yeah

00:32:24,570 --> 00:32:27,420
elaborates bit more than what I've

00:32:25,920 --> 00:32:31,470
spoken about today if you're interested

00:32:27,420 --> 00:32:34,200
you can find these slides on my github

00:32:31,470 --> 00:32:36,420
page so I've got them hosted online

00:32:34,200 --> 00:32:39,180
using github pages you can see all the

00:32:36,420 --> 00:32:41,490
whole of the presentation online and

00:32:39,180 --> 00:32:43,380
find me this tool that this presentation

00:32:41,490 --> 00:32:45,960
was created with a tool called spectacle

00:32:43,380 --> 00:32:47,340
which is using react so the whole the

00:32:45,960 --> 00:32:48,900
pacman down the bottom to all the

00:32:47,340 --> 00:32:50,910
buttons and everything that goes on and

00:32:48,900 --> 00:32:53,220
it was all all part the framework that

00:32:50,910 --> 00:32:55,110
comes with using spec school which is

00:32:53,220 --> 00:32:56,730
just basically using react really easy

00:32:55,110 --> 00:32:58,170
to use really easy development

00:32:56,730 --> 00:32:59,580
experience I'd recommend anyone that's

00:32:58,170 --> 00:33:01,320
interested in react going checking out

00:32:59,580 --> 00:33:03,510
it was basically painless self this

00:33:01,320 --> 00:33:04,920
application and so thank you very much

00:33:03,510 --> 00:33:06,960
for your time giving up your evening to

00:33:04,920 --> 00:33:08,580
have me come and talk to you I really do

00:33:06,960 --> 00:33:11,040
appreciate it if anyone's got any

00:33:08,580 --> 00:33:13,710
questions or comments and the floors

00:33:11,040 --> 00:33:15,090
open and I've got more of a good time

00:33:13,710 --> 00:33:21,330
testing if anyone's got any questions I

00:33:15,090 --> 00:33:23,010
welcome them grab a burger that's a

00:33:21,330 --> 00:33:24,780
fantastic question and did I get the

00:33:23,010 --> 00:33:25,860
chance to test performance I didn't

00:33:24,780 --> 00:33:27,240
really see honest with you that wasn't

00:33:25,860 --> 00:33:29,340
part of the project it was more about

00:33:27,240 --> 00:33:30,390
what would it feel like to develop with

00:33:29,340 --> 00:33:32,550
these two and what would it be like if

00:33:30,390 --> 00:33:34,170
we had to maintain one long-term

00:33:32,550 --> 00:33:36,120
unfortunately the project didn't go

00:33:34,170 --> 00:33:37,620
ahead and so I got a couple of

00:33:36,120 --> 00:33:39,690
prototypes in a couple of helloworld

00:33:37,620 --> 00:33:41,550
plus plus apps I suppose out there but

00:33:39,690 --> 00:33:43,410
no I didn't get the chance to experiment

00:33:41,550 --> 00:33:46,380
with that if you had the chance to do

00:33:43,410 --> 00:33:48,600
that I've been oh I don't know I imagine

00:33:46,380 --> 00:33:50,490
so there's lots of tolling that enables

00:33:48,600 --> 00:33:52,230
react native so when you're debugging

00:33:50,490 --> 00:33:53,820
your react native application you can

00:33:52,230 --> 00:33:55,530
open up the developer tools in Google

00:33:53,820 --> 00:33:57,570
Chrome for example which is basically

00:33:55,530 --> 00:33:59,640
where you can console.log stuff so I

00:33:57,570 --> 00:34:02,730
imagine whatever tools you have in

00:33:59,640 --> 00:34:04,260
Chrome for example you may be able to

00:34:02,730 --> 00:34:05,910
exploit for a react native application

00:34:04,260 --> 00:34:07,530
but I don't know to me that's a really

00:34:05,910 --> 00:34:08,640
interesting area to have a look at so

00:34:07,530 --> 00:34:12,320
yeah sorry I can't answer your question

00:34:08,640 --> 00:34:12,320

YouTube URL: https://www.youtube.com/watch?v=nBgHuZKKmFI


