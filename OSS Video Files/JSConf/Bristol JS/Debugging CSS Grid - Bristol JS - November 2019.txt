Title: Debugging CSS Grid - Bristol JS - November 2019
Publication date: 2019-12-21
Playlist: Bristol JS
Description: 
	Debugging CSS Grid by Michelle Barker

CSS Grid gives us incredible powers for building web layouts. But with so many different ways to create a grid and place items, it’s not always easy to debug when layouts don’t behave as we expect them to. In this talk we’ll tackle some common difficulties, check out some tools for debugging and put the CSS Grid specification under the microscope.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:06,859
hi so I'm Misha today I'm gonna be

00:00:03,090 --> 00:00:10,230
talking about CSS grid I last spoke at

00:00:06,859 --> 00:00:12,750
Bristol jeaious around 18 months ago so

00:00:10,230 --> 00:00:14,849
not that long ago so some of you might

00:00:12,750 --> 00:00:17,609
have come to that talk before I was

00:00:14,849 --> 00:00:19,590
talking about CSS grid then I'm talking

00:00:17,609 --> 00:00:21,869
about CSS grid again today

00:00:19,590 --> 00:00:24,269
there might be a little bit of overlap

00:00:21,869 --> 00:00:25,650
but hopefully not too much so hopefully

00:00:24,269 --> 00:00:28,949
they'll still be some new things to

00:00:25,650 --> 00:00:31,710
learn as well last time I think I

00:00:28,949 --> 00:00:35,790
managed to get two lines of JavaScript

00:00:31,710 --> 00:00:38,820
into my talk this talk has zero lines of

00:00:35,790 --> 00:00:41,700
JavaScript there's no JavaScript at all

00:00:38,820 --> 00:00:44,250
it's it's just CSS so I'm sorry

00:00:41,700 --> 00:00:49,670
you've come to a JavaScript meter to

00:00:44,250 --> 00:00:52,800
learn about CSS but yeah CSS is great so

00:00:49,670 --> 00:00:55,289
before I start my talk I like like to

00:00:52,800 --> 00:00:59,370
ask a couple of questions how many of

00:00:55,289 --> 00:01:01,129
you have heard of CSS grid layout cool

00:00:59,370 --> 00:01:04,619
pretty much everyone

00:01:01,129 --> 00:01:09,869
how many of you have used CSS grid even

00:01:04,619 --> 00:01:11,939
just a little bit and how many of you

00:01:09,869 --> 00:01:17,729
are using grid in production right now

00:01:11,939 --> 00:01:19,350
oh yeah some of you well I hope by the

00:01:17,729 --> 00:01:22,080
end of this talk a few more of you will

00:01:19,350 --> 00:01:25,890
feel confident and hopefully inspired

00:01:22,080 --> 00:01:28,409
enough to give it a go when I talk about

00:01:25,890 --> 00:01:31,009
CSS grid I mean at the CSS grid layout

00:01:28,409 --> 00:01:33,810
specification which is a relatively new

00:01:31,009 --> 00:01:36,270
specification for layout on the web and

00:01:33,810 --> 00:01:39,570
although it's been around for a few

00:01:36,270 --> 00:01:41,759
years now a recent analysis by Adam

00:01:39,570 --> 00:01:45,360
Argyle and you know Kravitz showed that

00:01:41,759 --> 00:01:49,590
roughly only 2% of websites are using

00:01:45,360 --> 00:01:52,649
grid so it's that's not insignificant

00:01:49,590 --> 00:01:54,780
because it's obviously like taking into

00:01:52,649 --> 00:01:56,610
account websites that may have been made

00:01:54,780 --> 00:02:00,180
years ago still around

00:01:56,610 --> 00:02:02,399
but it's it does still show that grid is

00:02:00,180 --> 00:02:06,540
quite in quite the early adoption phase

00:02:02,399 --> 00:02:09,300
at the moment so who am I to be talking

00:02:06,540 --> 00:02:11,700
about CSS grid so I am a front-end

00:02:09,300 --> 00:02:13,270
developer at Bristol agency called

00:02:11,700 --> 00:02:17,440
atomic smash as a

00:02:13,270 --> 00:02:21,010
two weeks ago I'm also a Mozilla tech

00:02:17,440 --> 00:02:22,960
speaker and I have a blog called CSS in

00:02:21,010 --> 00:02:25,660
real life where I write quite a lot

00:02:22,960 --> 00:02:28,090
about my adventures with grid and other

00:02:25,660 --> 00:02:29,650
things to do with CSS including some of

00:02:28,090 --> 00:02:33,220
the stuff that we're gonna cover here

00:02:29,650 --> 00:02:36,730
today now if we take a look at a brief

00:02:33,220 --> 00:02:39,760
history of CSS layout from the birth of

00:02:36,730 --> 00:02:41,620
CSS until today you can see the first of

00:02:39,760 --> 00:02:44,110
all we had nothing much at all we just

00:02:41,620 --> 00:02:48,340
had flow layout you basically just get

00:02:44,110 --> 00:02:49,750
one long column and then people figured

00:02:48,340 --> 00:02:52,510
out that you could hack around with

00:02:49,750 --> 00:02:53,830
tables to produce layouts for the web

00:02:52,510 --> 00:02:56,830
and people started getting really

00:02:53,830 --> 00:02:59,170
creative with that and then a few people

00:02:56,830 --> 00:03:00,040
said that this was a pretty bad idea for

00:02:59,170 --> 00:03:02,410
lots of reasons

00:03:00,040 --> 00:03:04,930
and people start stopped using tables

00:03:02,410 --> 00:03:07,750
and we started using floats instead

00:03:04,930 --> 00:03:10,180
which if any of you have worked with

00:03:07,750 --> 00:03:12,550
building layouts with floats and writing

00:03:10,180 --> 00:03:15,760
clear fixes and so on it's not really a

00:03:12,550 --> 00:03:18,340
very fun way of building and layout it's

00:03:15,760 --> 00:03:23,080
not intuitive particularly and the code

00:03:18,340 --> 00:03:25,240
looks quite great but in the intervening

00:03:23,080 --> 00:03:27,130
time quite a few frameworks sprung up to

00:03:25,240 --> 00:03:29,560
help us with layout so we didn't have to

00:03:27,130 --> 00:03:31,150
write stuff like that so you often and

00:03:29,560 --> 00:03:34,480
things like bootstrap and foundation

00:03:31,150 --> 00:03:36,880
which many of you may have used but then

00:03:34,480 --> 00:03:38,830
a little while later flexbox came along

00:03:36,880 --> 00:03:40,300
and I think this is a pretty big moment

00:03:38,830 --> 00:03:42,310
for layout on the web because it

00:03:40,300 --> 00:03:45,250
suddenly made working with layout so

00:03:42,310 --> 00:03:47,440
much easier and I really love flex box

00:03:45,250 --> 00:03:50,260
but flex box does not give us everything

00:03:47,440 --> 00:03:54,340
we need for building layouts it's great

00:03:50,260 --> 00:03:58,870
at what it does but now finally we have

00:03:54,340 --> 00:04:02,470
CSS grid layout and I arrived at web

00:03:58,870 --> 00:04:04,360
development around here so I was when

00:04:02,470 --> 00:04:06,630
most people were still using floats but

00:04:04,360 --> 00:04:09,730
flexbox was starting to become a thing

00:04:06,630 --> 00:04:12,010
and I was pretty excited about where CSS

00:04:09,730 --> 00:04:16,540
layout was headed and I've been pretty

00:04:12,010 --> 00:04:18,520
obsessed with it ever since so now with

00:04:16,540 --> 00:04:20,680
grid we finally have a tool that's fit

00:04:18,520 --> 00:04:23,620
for purpose and if I was to go back five

00:04:20,680 --> 00:04:25,930
years and think about how I imagined

00:04:23,620 --> 00:04:27,050
layout should work on the web I'd be

00:04:25,930 --> 00:04:29,660
hard-pressed to find

00:04:27,050 --> 00:04:31,069
a better solution than CSS grid it's the

00:04:29,660 --> 00:04:34,039
layout method I would have dreamed of

00:04:31,069 --> 00:04:36,199
and see FF grid is incredibly powerful

00:04:34,039 --> 00:04:38,720
but it also can be a little bit daunting

00:04:36,199 --> 00:04:40,550
as you have so much choice when it comes

00:04:38,720 --> 00:04:44,090
to building and layout and placing items

00:04:40,550 --> 00:04:47,539
and it's not always easy to see how and

00:04:44,090 --> 00:04:50,330
why things go wrong now I recommend

00:04:47,539 --> 00:04:52,819
using Firefox to debug your grits and

00:04:50,330 --> 00:04:56,360
Mozilla have really invested recently in

00:04:52,819 --> 00:04:58,190
their dev tools for debugging CSS and in

00:04:56,360 --> 00:05:00,770
particular if you're working with layout

00:04:58,190 --> 00:05:02,780
then the grid inspector and flexbox

00:05:00,770 --> 00:05:04,699
inspector in Firefox dev tools are

00:05:02,780 --> 00:05:08,150
really better than anything else out

00:05:04,699 --> 00:05:09,710
there I had an issue with my local

00:05:08,150 --> 00:05:11,990
development yesterday which meant I

00:05:09,710 --> 00:05:14,419
couldn't use Firefox of the day and I

00:05:11,990 --> 00:05:16,009
really massively noted the difference so

00:05:14,419 --> 00:05:17,659
you suddenly have to like go into Chrome

00:05:16,009 --> 00:05:20,720
start counting your grid lines it's

00:05:17,659 --> 00:05:22,849
really horrible so use Firefox everyone

00:05:20,720 --> 00:05:25,940
I think I don't get paid by Mozilla or

00:05:22,849 --> 00:05:28,340
anything by the way today we're gonna

00:05:25,940 --> 00:05:29,810
take a look at some of the ways that the

00:05:28,340 --> 00:05:32,960
grid inspector can help us in the

00:05:29,810 --> 00:05:35,030
upcoming examples now I've been using

00:05:32,960 --> 00:05:37,580
grid in production for a couple of years

00:05:35,030 --> 00:05:40,520
now and this was one of the first

00:05:37,580 --> 00:05:42,560
websites that I built with CSS grid and

00:05:40,520 --> 00:05:45,380
it's for Warner Brothers and UK studios

00:05:42,560 --> 00:05:47,690
and I built it with the agency I was

00:05:45,380 --> 00:05:51,830
with at the time called mutt they're

00:05:47,690 --> 00:05:53,659
based in bath so at the time that I

00:05:51,830 --> 00:05:56,780
built this there weren't really that

00:05:53,659 --> 00:05:58,729
many articles and tutorials to do with

00:05:56,780 --> 00:06:00,530
grids like we were just all still

00:05:58,729 --> 00:06:03,400
figuring out a lot of stuff there

00:06:00,530 --> 00:06:06,469
weren't very many examples around at all

00:06:03,400 --> 00:06:08,270
so that kind of got me more and more

00:06:06,469 --> 00:06:10,130
interested in grid I was playing around

00:06:08,270 --> 00:06:12,169
with it a lot and experimenting and

00:06:10,130 --> 00:06:14,300
that's where a lot of my kind of

00:06:12,169 --> 00:06:16,370
findings have come from this talk

00:06:14,300 --> 00:06:18,650
because since then I've helped quite a

00:06:16,370 --> 00:06:20,960
lot of people get started with it too

00:06:18,650 --> 00:06:23,300
and I've noticed that the same issues

00:06:20,960 --> 00:06:25,580
often come up time and time again or a

00:06:23,300 --> 00:06:27,590
lot of people get stuck on similar

00:06:25,580 --> 00:06:30,169
things so I want to dig into some of

00:06:27,590 --> 00:06:32,000
those issues today but first of all

00:06:30,169 --> 00:06:33,409
let's just take a brief look at some of

00:06:32,000 --> 00:06:36,349
the different ways you could build a

00:06:33,409 --> 00:06:38,779
layout with grid now I like to think of

00:06:36,349 --> 00:06:39,669
using grid as two parts and then fast

00:06:38,779 --> 00:06:41,710
first part

00:06:39,669 --> 00:06:43,360
is the scaffolding actually building the

00:06:41,710 --> 00:06:45,610
structure onto which you place your

00:06:43,360 --> 00:06:49,360
items and these are the properties

00:06:45,610 --> 00:06:51,789
acting on the grid container so here

00:06:49,360 --> 00:06:54,460
we're defining a four by four grid and

00:06:51,789 --> 00:06:57,039
so it has four column tracks and four

00:06:54,460 --> 00:06:59,050
road tracks and it has a one Ram gap

00:06:57,039 --> 00:07:02,249
between each of the tracks using the gap

00:06:59,050 --> 00:07:05,110
property which is an alias for grid gap

00:07:02,249 --> 00:07:07,479
you can use kind of either syntax I

00:07:05,110 --> 00:07:09,520
think well grid gap is kind of the

00:07:07,479 --> 00:07:13,180
previous one but Mount gap is pretty

00:07:09,520 --> 00:07:15,699
well supported now so now we have an

00:07:13,180 --> 00:07:17,979
empty grid but it's invisible unless we

00:07:15,699 --> 00:07:19,870
inspect it in the browser so this

00:07:17,979 --> 00:07:21,759
screenshot shows what ever it looks like

00:07:19,870 --> 00:07:25,870
with the Firefox grid inspector turned

00:07:21,759 --> 00:07:28,659
on and we can take a look at that now so

00:07:25,870 --> 00:07:31,839
I have the dev tools panel open on the

00:07:28,659 --> 00:07:34,719
right-hand side and this second panel

00:07:31,839 --> 00:07:38,169
tap down and houses our layout tab which

00:07:34,719 --> 00:07:40,449
is the one that can which is the one

00:07:38,169 --> 00:07:42,789
that we need to debug our layouts and

00:07:40,449 --> 00:07:45,279
that houses the flexbox books inspector

00:07:42,789 --> 00:07:48,699
and the grid inspector and the grid

00:07:45,279 --> 00:07:50,860
inspector will show you any grids on

00:07:48,699 --> 00:07:53,409
your page and with their corresponding

00:07:50,860 --> 00:07:55,870
class names and it has this little

00:07:53,409 --> 00:07:58,270
checkbox to toggle them on and off so

00:07:55,870 --> 00:08:02,409
straight away you'll be able to see your

00:07:58,270 --> 00:08:05,050
grid with these lines for the gaps and

00:08:02,409 --> 00:08:06,729
everything else and then we have this

00:08:05,050 --> 00:08:09,009
little map of our grids and if we hover

00:08:06,729 --> 00:08:11,409
over any of the cells here then we get

00:08:09,009 --> 00:08:14,620
the computed tract size in a little

00:08:11,409 --> 00:08:17,349
bubble over the grid cells we also have

00:08:14,620 --> 00:08:20,500
these check boxes on the right and the

00:08:17,349 --> 00:08:24,279
first one is to display the line numbers

00:08:20,500 --> 00:08:26,169
so as the name would suggest that shows

00:08:24,279 --> 00:08:29,259
you the line numbers along the top and

00:08:26,169 --> 00:08:32,140
the sides of your grid and then we'll

00:08:29,259 --> 00:08:34,029
come back to the other ones shortly so

00:08:32,140 --> 00:08:36,909
now we need to play some items on our

00:08:34,029 --> 00:08:39,940
grid so we want to place this image in

00:08:36,909 --> 00:08:43,630
the top left hand quadrant of our grids

00:08:39,940 --> 00:08:45,279
and so up against the first grid line so

00:08:43,630 --> 00:08:47,170
there are a number of different ways we

00:08:45,279 --> 00:08:49,120
can place this item on our grid and the

00:08:47,170 --> 00:08:49,680
first way is to use a start line and an

00:08:49,120 --> 00:08:51,930
end line

00:08:49,680 --> 00:08:54,149
so we're doing that using the grid row

00:08:51,930 --> 00:08:56,640
and the grid column properties we're

00:08:54,149 --> 00:09:00,120
giving them both the start line and an

00:08:56,640 --> 00:09:02,010
end line we could also use a start line

00:09:00,120 --> 00:09:04,440
and a span value so instead of

00:09:02,010 --> 00:09:06,690
specifying and n Blaine we can say we

00:09:04,440 --> 00:09:10,500
want this item to span two rows and two

00:09:06,690 --> 00:09:12,420
columns or we could use span and an end

00:09:10,500 --> 00:09:15,050
line and sometimes it's easier to place

00:09:12,420 --> 00:09:18,899
items by end line rather than start by

00:09:15,050 --> 00:09:20,580
or in this case because this is the only

00:09:18,899 --> 00:09:23,940
item that we're placing a grid on our

00:09:20,580 --> 00:09:25,680
grids and we want to place it against

00:09:23,940 --> 00:09:30,959
the first grid line then we could you

00:09:25,680 --> 00:09:33,390
just use span and auto placement so if

00:09:30,959 --> 00:09:35,459
we don't specify a start or end line

00:09:33,390 --> 00:09:37,680
then grid will place this item up

00:09:35,459 --> 00:09:40,620
against the very first grid line that is

00:09:37,680 --> 00:09:42,270
available on both axes and that works in

00:09:40,620 --> 00:09:45,779
this instance because we haven't got any

00:09:42,270 --> 00:09:47,640
other items in our grid but if we wanted

00:09:45,779 --> 00:09:49,589
to place this item somewhere else on the

00:09:47,640 --> 00:09:52,290
grid then we couldn't rely on auto

00:09:49,589 --> 00:09:55,320
placement we would have to specify a

00:09:52,290 --> 00:09:56,940
start or end line and all of the

00:09:55,320 --> 00:09:59,370
previous examples are just different

00:09:56,940 --> 00:10:01,709
ways of placing this item in exactly at

00:09:59,370 --> 00:10:03,570
the same position on the grid and

00:10:01,709 --> 00:10:05,279
there's no right or wrong way and you

00:10:03,570 --> 00:10:09,060
can mix and match them as much as you

00:10:05,279 --> 00:10:11,850
like we could also use named grid lines

00:10:09,060 --> 00:10:14,880
to place our item so here I'm defining

00:10:11,850 --> 00:10:17,070
two line names image that an image ends

00:10:14,880 --> 00:10:19,860
on the row access in the grid template

00:10:17,070 --> 00:10:21,959
rows property and we can use any name we

00:10:19,860 --> 00:10:24,570
like but if we suffix that line name

00:10:21,959 --> 00:10:27,600
with start and end then we get a grid

00:10:24,570 --> 00:10:29,610
area which we can just reference in our

00:10:27,600 --> 00:10:31,740
grid row property instead of saying

00:10:29,610 --> 00:10:34,079
image start / image end

00:10:31,740 --> 00:10:37,820
we can just say place this in the grid

00:10:34,079 --> 00:10:40,290
area called image on the right axis and

00:10:37,820 --> 00:10:43,740
even better if we do the same thing on

00:10:40,290 --> 00:10:45,930
the column axis then that great creates

00:10:43,740 --> 00:10:50,420
an area like this so it's the equivalent

00:10:45,930 --> 00:10:53,910
to naming our lines on both axes and

00:10:50,420 --> 00:10:56,220
that area is now called image so then we

00:10:53,910 --> 00:10:58,320
can just reference that entire area with

00:10:56,220 --> 00:11:02,339
the grid area property instead of using

00:10:58,320 --> 00:11:05,250
grid row and grid column and that's the

00:11:02,339 --> 00:11:07,829
equivalent to doing this so grid area is

00:11:05,250 --> 00:11:10,380
shorthand for grid row start grid column

00:11:07,829 --> 00:11:13,950
start grid row and and grid column ends

00:11:10,380 --> 00:11:16,829
but I think giving it a named area is

00:11:13,950 --> 00:11:18,990
kind of much easier to read and there is

00:11:16,829 --> 00:11:20,730
one more way to create grid areas and

00:11:18,990 --> 00:11:23,310
that's with the grid template areas

00:11:20,730 --> 00:11:25,890
property which basically lets us draw

00:11:23,310 --> 00:11:28,980
the areas of our grip with text so I'm

00:11:25,890 --> 00:11:31,050
using the letter I to create an area

00:11:28,980 --> 00:11:33,180
called eye instead of using the whole

00:11:31,050 --> 00:11:35,820
word image but I could write the whole

00:11:33,180 --> 00:11:39,510
word image if I wanted to or name that

00:11:35,820 --> 00:11:41,730
line name that area whatever I like

00:11:39,510 --> 00:11:43,500
there is a limitation with grid template

00:11:41,730 --> 00:11:47,790
areas and that's that you can't place

00:11:43,500 --> 00:11:51,209
overlapping items so suppose I have this

00:11:47,790 --> 00:11:53,459
second grid item we have this block with

00:11:51,209 --> 00:11:55,350
our cupcake recipe and on on the

00:11:53,459 --> 00:11:58,079
right-hand side so I want to place this

00:11:55,350 --> 00:12:01,020
in the bottom right quadrant overlapping

00:11:58,079 --> 00:12:03,000
the first item by one grid cell and I

00:12:01,020 --> 00:12:06,270
can't do that with grid template areas

00:12:03,000 --> 00:12:08,370
alone but what I could do is named

00:12:06,270 --> 00:12:10,320
gridlines for the image using grid

00:12:08,370 --> 00:12:14,610
template rows and grid template columns

00:12:10,320 --> 00:12:16,350
and then I could name the area and for

00:12:14,610 --> 00:12:18,779
the text block in the grid template

00:12:16,350 --> 00:12:22,020
areas property so there's nothing to

00:12:18,779 --> 00:12:24,000
stop you mixing those two together now

00:12:22,020 --> 00:12:28,079
if we go over to you the grid inspector

00:12:24,000 --> 00:12:30,480
again and toggle on our grid here

00:12:28,079 --> 00:12:33,959
the second checkbox is display area

00:12:30,480 --> 00:12:36,120
names and that will light up any named

00:12:33,959 --> 00:12:38,760
grid areas that you have in your grid so

00:12:36,120 --> 00:12:41,339
because I've defined this grid area

00:12:38,760 --> 00:12:44,790
called text that shows the word text in

00:12:41,339 --> 00:12:47,640
every grid cell that that encompasses

00:12:44,790 --> 00:12:51,890
that area and that will show even if

00:12:47,640 --> 00:12:54,510
there's no item in that grid cell the

00:12:51,890 --> 00:12:56,520
image I actually have created a grid

00:12:54,510 --> 00:12:59,130
area with the grid template rows and

00:12:56,520 --> 00:13:00,990
grid template columns property for some

00:12:59,130 --> 00:13:02,520
reason and the grid inspector doesn't

00:13:00,990 --> 00:13:04,949
handle that in the same way and it

00:13:02,520 --> 00:13:08,370
doesn't show the named grid area but if

00:13:04,949 --> 00:13:11,069
I hover over any of these cells the

00:13:08,370 --> 00:13:13,050
whole area does light up so the

00:13:11,069 --> 00:13:14,910
inspector is aware that that is a grid

00:13:13,050 --> 00:13:15,390
area it's just for some reason it

00:13:14,910 --> 00:13:18,029
doesn't

00:13:15,390 --> 00:13:20,190
in the same way cool so we've covered

00:13:18,029 --> 00:13:22,709
quite a lot of different ways to build a

00:13:20,190 --> 00:13:24,450
grit and place items and I want to show

00:13:22,709 --> 00:13:27,269
you a quick example of how some of these

00:13:24,450 --> 00:13:30,959
placement methods can work together my

00:13:27,269 --> 00:13:34,260
son recently came home with the class

00:13:30,959 --> 00:13:37,260
bear from preschool and we had to like

00:13:34,260 --> 00:13:39,750
take it on adventures and put all our

00:13:37,260 --> 00:13:41,990
adventures in this scrapbook which I had

00:13:39,750 --> 00:13:44,880
quite a lot of fun doing as you can see

00:13:41,990 --> 00:13:47,430
and obviously my next thought after

00:13:44,880 --> 00:13:52,440
building this scrapbook is but can I

00:13:47,430 --> 00:13:56,910
create it in CSS grid and the answer is

00:13:52,440 --> 00:14:00,209
yes so this is the layout I built based

00:13:56,910 --> 00:14:04,440
on my child's preschool scrapbook not

00:14:00,209 --> 00:14:11,010
photos of my child here great

00:14:04,440 --> 00:14:16,140
photographer if we just let me turn the

00:14:11,010 --> 00:14:18,990
inspector on if I toggle the grid on

00:14:16,140 --> 00:14:22,290
here so you can see straight away that

00:14:18,990 --> 00:14:24,990
it's a much more complex grid than the

00:14:22,290 --> 00:14:26,880
previous example so we have lots and

00:14:24,990 --> 00:14:29,490
lots of rows and columns and we have

00:14:26,880 --> 00:14:32,459
items overlapping each other all the way

00:14:29,490 --> 00:14:34,350
down the page so it might not always be

00:14:32,459 --> 00:14:37,589
so obvious how you would go about

00:14:34,350 --> 00:14:40,699
building something like this I go over

00:14:37,589 --> 00:14:40,699
to the code here

00:14:49,300 --> 00:14:53,500
so if I go down to where I'm actually

00:14:51,190 --> 00:14:56,500
placing the item so this is how I'm

00:14:53,500 --> 00:15:00,580
placing the images in this block here

00:14:56,500 --> 00:15:02,890
and you can see I'm using two different

00:15:00,580 --> 00:15:05,740
placement methods so on the column axis

00:15:02,890 --> 00:15:08,770
with the grid : properties I'm using a

00:15:05,740 --> 00:15:11,710
mixture of start and end lines and span

00:15:08,770 --> 00:15:14,680
values and on the row axis I'm using

00:15:11,710 --> 00:15:19,570
named grid areas and there are a couple

00:15:14,680 --> 00:15:23,290
of reasons why I chose to do that so in

00:15:19,570 --> 00:15:27,100
this layout if we go back to the actual

00:15:23,290 --> 00:15:30,070
layout a moment the way I was building

00:15:27,100 --> 00:15:32,790
out I wanted to be able to add new items

00:15:30,070 --> 00:15:35,500
to the layout and be able to control

00:15:32,790 --> 00:15:38,140
them quite easily like maybe shift an

00:15:35,500 --> 00:15:41,080
item like one or two rows to the left or

00:15:38,140 --> 00:15:43,180
right so on the column axis it didn't

00:15:41,080 --> 00:15:46,000
make very much sense to me to use named

00:15:43,180 --> 00:15:47,770
grid areas because then I every time I

00:15:46,000 --> 00:15:50,170
wanted to move an item to try and

00:15:47,770 --> 00:15:52,150
perfect my layout I would have to go

00:15:50,170 --> 00:15:55,420
into the grid template columns property

00:15:52,150 --> 00:15:57,670
and shift around that line name and that

00:15:55,420 --> 00:15:58,330
that seemed to me to be more trouble

00:15:57,670 --> 00:16:02,020
than it was worth

00:15:58,330 --> 00:16:04,270
so by using line numbers that's very

00:16:02,020 --> 00:16:06,990
easy for me to shift an item to the left

00:16:04,270 --> 00:16:11,890
or to the right by one column

00:16:06,990 --> 00:16:14,020
whereas on the row axis all the items

00:16:11,890 --> 00:16:16,750
are overlapping each other and we have

00:16:14,020 --> 00:16:18,550
lots and lots of rows in the grid and if

00:16:16,750 --> 00:16:20,620
we have a look at this there's a map of

00:16:18,550 --> 00:16:22,750
the grid you can see we have all these

00:16:20,620 --> 00:16:24,100
rows all the way down the page if you

00:16:22,750 --> 00:16:30,910
have a look at the map on the right-hand

00:16:24,100 --> 00:16:35,530
side so I decided that using named grid

00:16:30,910 --> 00:16:38,320
lines were or named grid areas was a

00:16:35,530 --> 00:16:40,300
kind of better way to do that for me and

00:16:38,320 --> 00:16:42,880
the other thing I the other thing I like

00:16:40,300 --> 00:16:45,460
about that is that I can actually line

00:16:42,880 --> 00:16:47,800
up my grid template rows property so

00:16:45,460 --> 00:16:50,560
that it mirrors the layout of the page

00:16:47,800 --> 00:16:54,340
all of those grid rows are actually

00:16:50,560 --> 00:16:58,300
echoes in the page layout and that made

00:16:54,340 --> 00:17:00,280
it much easier for me to place items I'm

00:16:58,300 --> 00:17:02,499
not going to go into every single

00:17:00,280 --> 00:17:04,360
property here because I'm using like

00:17:02,499 --> 00:17:07,389
properties and all sorts but look over

00:17:04,360 --> 00:17:09,519
some of those maybe later on you have

00:17:07,389 --> 00:17:11,500
hopefully got an idea of how some of the

00:17:09,519 --> 00:17:13,620
different layout methods or layout

00:17:11,500 --> 00:17:16,480
placement with methods can work together

00:17:13,620 --> 00:17:18,730
there's not always a clear-cut solution

00:17:16,480 --> 00:17:21,879
and there's never a right or wrong way

00:17:18,730 --> 00:17:24,220
it's just what works for you at the time

00:17:21,879 --> 00:17:26,019
so I quite often start building a layout

00:17:24,220 --> 00:17:28,120
in a certain way and then switch things

00:17:26,019 --> 00:17:30,159
up halfway through when it becomes clear

00:17:28,120 --> 00:17:34,539
to me that something isn't quite working

00:17:30,159 --> 00:17:36,970
the way I want it to now we don't always

00:17:34,539 --> 00:17:41,019
have to explicitly position every item

00:17:36,970 --> 00:17:42,909
on our grid if we don't place items then

00:17:41,019 --> 00:17:44,769
there'll be Auto placed which means

00:17:42,909 --> 00:17:47,350
they'll each be placed into the first

00:17:44,769 --> 00:17:49,539
available grid cell filling up one row

00:17:47,350 --> 00:17:51,940
before moving on to the next one and

00:17:49,539 --> 00:17:55,509
that's assuming that we're using the

00:17:51,940 --> 00:17:58,450
default grid Auto flow value of row if

00:17:55,509 --> 00:18:00,190
we switch that grid Auto flow value to

00:17:58,450 --> 00:18:03,850
column then they'll fill up they column

00:18:00,190 --> 00:18:05,679
instead so we have a grid of three rows

00:18:03,850 --> 00:18:10,090
here and defined by the grid template

00:18:05,679 --> 00:18:12,129
rows property now if there aren't enough

00:18:10,090 --> 00:18:14,980
rows in our grid for the number of items

00:18:12,129 --> 00:18:17,110
that we want to place in it then grid is

00:18:14,980 --> 00:18:19,899
pretty clever it will simply create new

00:18:17,110 --> 00:18:23,559
rows for us and we call these implicit

00:18:19,899 --> 00:18:26,500
tracks so implicit tracks are any tracks

00:18:23,559 --> 00:18:29,679
that are outside of the explicitly

00:18:26,500 --> 00:18:31,389
defined grid area and we can control the

00:18:29,679 --> 00:18:34,929
size of those tracks with the grid auto

00:18:31,389 --> 00:18:38,289
rows property all grid Auto columns if

00:18:34,929 --> 00:18:40,690
you're on the column axis so if you have

00:18:38,289 --> 00:18:42,580
maybe something like a news feed and you

00:18:40,690 --> 00:18:45,340
don't know how many items are going to

00:18:42,580 --> 00:18:47,860
be in your layout then you might want to

00:18:45,340 --> 00:18:52,000
leave the grid Auto rows value as the

00:18:47,860 --> 00:18:54,549
default Auto value because you might

00:18:52,000 --> 00:18:58,000
want those newly created rows to be

00:18:54,549 --> 00:19:00,039
sized to the content whereas if we have

00:18:58,000 --> 00:19:03,039
maybe something like this image gallery

00:19:00,039 --> 00:19:06,009
we might want any newly created rows to

00:19:03,039 --> 00:19:08,320
have the same fixed height so that our

00:19:06,009 --> 00:19:11,710
gallery gallery will be uniform all the

00:19:08,320 --> 00:19:13,269
way down so implicit tracks are really

00:19:11,710 --> 00:19:13,970
useful if we want to build something

00:19:13,269 --> 00:19:17,990
like

00:19:13,970 --> 00:19:22,880
this but they sometimes trip us up if we

00:19:17,990 --> 00:19:24,760
don't mean to create them and that's the

00:19:22,880 --> 00:19:28,820
first problem that I want to talk about

00:19:24,760 --> 00:19:31,460
accidental implicit tracks so let's say

00:19:28,820 --> 00:19:33,560
we want to place this red item in our

00:19:31,460 --> 00:19:35,660
grip on our grid and now put some

00:19:33,560 --> 00:19:39,260
content in there as well so we want to

00:19:35,660 --> 00:19:43,790
place it on the third grid line with a

00:19:39,260 --> 00:19:45,950
span of two column tracks so it goes

00:19:43,790 --> 00:19:49,970
right up against the last line of our

00:19:45,950 --> 00:19:51,860
grid now if we accidentally gave that

00:19:49,970 --> 00:19:53,660
item a span of three then it would

00:19:51,860 --> 00:19:55,730
create an implicit track because there

00:19:53,660 --> 00:19:58,790
aren't enough column tracks in our grid

00:19:55,730 --> 00:20:00,320
and because we've put some text content

00:19:58,790 --> 00:20:02,840
inside that item we can quite clearly

00:20:00,320 --> 00:20:06,140
see that implicit track has been created

00:20:02,840 --> 00:20:08,180
on the right but if we don't have any

00:20:06,140 --> 00:20:10,130
content inside that grid item so maybe

00:20:08,180 --> 00:20:13,070
it just has a background image or a

00:20:10,130 --> 00:20:15,140
background color then the implicit track

00:20:13,070 --> 00:20:17,210
will have a width of zero because

00:20:15,140 --> 00:20:19,190
there's nothing creating that extra

00:20:17,210 --> 00:20:20,840
width but you might be able to see

00:20:19,190 --> 00:20:22,670
there's something a little bit off about

00:20:20,840 --> 00:20:24,500
your grids or perhaps it's causing

00:20:22,670 --> 00:20:26,210
overflow somewhere because they'll

00:20:24,500 --> 00:20:29,900
actually be this extra little gutter

00:20:26,210 --> 00:20:31,670
with on the right so if you have this

00:20:29,900 --> 00:20:33,890
problem where things don't seem to be

00:20:31,670 --> 00:20:36,380
exactly as they should be with your grid

00:20:33,890 --> 00:20:39,350
then what you can do is check the line

00:20:36,380 --> 00:20:41,030
numbers in the grid inspector and if the

00:20:39,350 --> 00:20:43,130
line numbers are higher than you would

00:20:41,030 --> 00:20:45,410
expect then the chances are you've

00:20:43,130 --> 00:20:48,230
created implicit tracks without meaning

00:20:45,410 --> 00:20:51,140
to and in some cases it can completely

00:20:48,230 --> 00:20:55,040
throw your layout off or cause items to

00:20:51,140 --> 00:20:57,590
disappear altogether so I'll show you a

00:20:55,040 --> 00:20:59,600
slightly different example my friend had

00:20:57,590 --> 00:21:01,910
two items that he wanted to place on a

00:20:59,600 --> 00:21:05,110
grid like this so each one spans two

00:21:01,910 --> 00:21:07,700
rows and they have a one row overlap and

00:21:05,110 --> 00:21:10,190
this was a CFS that he used to place

00:21:07,700 --> 00:21:13,790
those items and on first glance this

00:21:10,190 --> 00:21:18,470
seems like it should work so each item

00:21:13,790 --> 00:21:20,750
spans four columns the image starts that

00:21:18,470 --> 00:21:24,050
grid line one on the row axis and spans

00:21:20,750 --> 00:21:27,380
two rows and the text blocks that's a

00:21:24,050 --> 00:21:27,590
grid line too and also spans two rows so

00:21:27,380 --> 00:21:29,179
that

00:21:27,590 --> 00:21:32,630
seems like it should do do what we

00:21:29,179 --> 00:21:37,490
wanted see but how come what happens is

00:21:32,630 --> 00:21:39,770
this if we turn on the grid inspector

00:21:37,490 --> 00:21:42,440
and we can see that implicit tracks have

00:21:39,770 --> 00:21:44,809
been created so rather than fill the

00:21:42,440 --> 00:21:46,909
explicit grid by overlapping those items

00:21:44,809 --> 00:21:50,419
the browser is attempting to place them

00:21:46,909 --> 00:21:54,230
in a way that avoids overlap by creating

00:21:50,419 --> 00:21:56,059
implicit tracks so if you want to

00:21:54,230 --> 00:22:00,260
overlap items on your grid then you

00:21:56,059 --> 00:22:03,140
explicitly need to to say that you

00:22:00,260 --> 00:22:06,950
quickly grid won't overlap items and

00:22:03,140 --> 00:22:09,350
less utility so we can avoid this by

00:22:06,950 --> 00:22:11,210
explicitly placing those items on both

00:22:09,350 --> 00:22:17,510
axes so we're going to give them a start

00:22:11,210 --> 00:22:19,789
line as well as a span value and this

00:22:17,510 --> 00:22:23,299
would be a great cause for using

00:22:19,789 --> 00:22:25,669
negative grid lines as we want those

00:22:23,299 --> 00:22:28,070
items to span the full width of the grid

00:22:25,669 --> 00:22:31,340
so negative grid lines are basically

00:22:28,070 --> 00:22:33,049
your grid slipped around so line one is

00:22:31,340 --> 00:22:36,140
the very first line of the grid line

00:22:33,049 --> 00:22:37,909
minus one is the very last line so if

00:22:36,140 --> 00:22:40,250
you wanted to place an item up against

00:22:37,909 --> 00:22:43,730
this last line you could use line five

00:22:40,250 --> 00:22:45,919
or you could also use minus one both of

00:22:43,730 --> 00:22:48,500
those will work and the same with line

00:22:45,919 --> 00:22:50,539
one that will also be grid line minus

00:22:48,500 --> 00:22:53,570
five because there are five lines in our

00:22:50,539 --> 00:22:55,549
grid and I find using negative grid

00:22:53,570 --> 00:22:58,700
lines are really really useful so this

00:22:55,549 --> 00:23:01,730
way if we wanted this item to span the

00:22:58,700 --> 00:23:03,710
full width of the grid we could then we

00:23:01,730 --> 00:23:05,510
could still create more columns at

00:23:03,710 --> 00:23:07,580
different break points and we wouldn't

00:23:05,510 --> 00:23:11,200
need to reposition that item it would

00:23:07,580 --> 00:23:11,200
still span the full width of the grid

00:23:11,350 --> 00:23:15,470
but there is a limitation with negative

00:23:13,970 --> 00:23:18,590
grid lines and that's that they only

00:23:15,470 --> 00:23:21,110
apply to you the explicit grid if you're

00:23:18,590 --> 00:23:23,630
relying on implicit tracks then negative

00:23:21,110 --> 00:23:26,330
grid lines won't work so if we go back

00:23:23,630 --> 00:23:29,539
to our autoflow example we created three

00:23:26,330 --> 00:23:31,760
explicit grid rows rows but that last

00:23:29,539 --> 00:23:34,270
row is an implicit track because that's

00:23:31,760 --> 00:23:37,070
created just when we have more content

00:23:34,270 --> 00:23:39,980
in our grid and grids creating those

00:23:37,070 --> 00:23:40,940
extra rows but line minus one isn't the

00:23:39,980 --> 00:23:43,370
last line of the

00:23:40,940 --> 00:23:45,800
it's gonna be away from the fourth line

00:23:43,370 --> 00:23:50,780
down no matter how many extra rows are

00:23:45,800 --> 00:23:52,520
created through implicit tracks now you

00:23:50,780 --> 00:23:55,490
might have noticed in some of the

00:23:52,520 --> 00:23:58,400
previous examples we sized our grid

00:23:55,490 --> 00:24:00,860
tracks using fixed units so REMS in this

00:23:58,400 --> 00:24:03,290
case and that might be what we want in

00:24:00,860 --> 00:24:06,380
some cases but often on the responsive

00:24:03,290 --> 00:24:10,160
web we want flexible grits so we can use

00:24:06,380 --> 00:24:12,230
the fr unit or fraction unit so using

00:24:10,160 --> 00:24:14,720
the fr unit there's very little need for

00:24:12,230 --> 00:24:17,420
calc or percentage sizing when it comes

00:24:14,720 --> 00:24:20,000
to sizing your grid tracks track sized

00:24:17,420 --> 00:24:22,670
with the fr unit take up a proportion of

00:24:20,000 --> 00:24:24,500
the space in the grid container so they

00:24:22,670 --> 00:24:26,510
respond to left over space the way that

00:24:24,500 --> 00:24:29,210
flex items fill space in a Flex

00:24:26,510 --> 00:24:31,640
container so the fi unit takes your

00:24:29,210 --> 00:24:33,560
gutters your length based tracks and any

00:24:31,640 --> 00:24:35,120
fixed tracks into account and it

00:24:33,560 --> 00:24:39,260
distributes the remaining space

00:24:35,120 --> 00:24:40,940
accordingly so we could use the fr unit

00:24:39,260 --> 00:24:44,960
and the grid template columns property

00:24:40,940 --> 00:24:47,390
to create for equal width tracks for

00:24:44,960 --> 00:24:49,520
flexible column tracks and they all take

00:24:47,390 --> 00:24:52,580
up an equal proportion of the available

00:24:49,520 --> 00:24:54,710
space so that's pretty cool as it means

00:24:52,580 --> 00:24:57,340
we've created four equal width tracks

00:24:54,710 --> 00:25:00,650
with a very simple line of code or

00:24:57,340 --> 00:25:03,080
that's what we might expect but that

00:25:00,650 --> 00:25:06,410
actually doesn't necessarily mean equal

00:25:03,080 --> 00:25:08,570
width tracks so fr units are flex units

00:25:06,410 --> 00:25:13,400
not length based units and they'll

00:25:08,570 --> 00:25:15,140
respond to fill the available space so

00:25:13,400 --> 00:25:16,730
if we want one column to be twice the

00:25:15,140 --> 00:25:17,930
width of the others we could make that

00:25:16,730 --> 00:25:20,570
column to Fr

00:25:17,930 --> 00:25:24,440
and the others one fr or we could make

00:25:20,570 --> 00:25:26,870
one column a fixed size like 15 runs day

00:25:24,440 --> 00:25:29,030
and the rest of the tracks will

00:25:26,870 --> 00:25:31,790
distribute the remaining space between

00:25:29,030 --> 00:25:33,650
them so between this example and the

00:25:31,790 --> 00:25:36,230
previous one we can already see that

00:25:33,650 --> 00:25:39,110
track sized as one fr are not

00:25:36,230 --> 00:25:42,980
necessarily the same their size depends

00:25:39,110 --> 00:25:45,620
on the context so let's keep them as one

00:25:42,980 --> 00:25:47,960
fr for now and now let's put some

00:25:45,620 --> 00:25:49,790
content in those tracks so we've got

00:25:47,960 --> 00:25:52,040
paragraphs of different lengths here and

00:25:49,790 --> 00:25:53,770
the last grid item I've deliberately

00:25:52,040 --> 00:25:55,900
left

00:25:53,770 --> 00:25:57,910
and you might wonder why I've

00:25:55,900 --> 00:26:01,690
highlighted certain words here and

00:25:57,910 --> 00:26:03,430
hopefully you'll see in a moment if we

00:26:01,690 --> 00:26:09,430
change the width of the viewport watch

00:26:03,430 --> 00:26:12,100
what happens to each of these tracks so

00:26:09,430 --> 00:26:15,370
they end up at different widths each one

00:26:12,100 --> 00:26:17,590
is sized to the longest word in inside

00:26:15,370 --> 00:26:20,140
that grid item and the last track

00:26:17,590 --> 00:26:22,180
collapses right down to zero and in fact

00:26:20,140 --> 00:26:28,420
it would be invisible if it wasn't for

00:26:22,180 --> 00:26:30,910
that board so why is that F our tracks

00:26:28,420 --> 00:26:34,120
are both extrinsic me and intrinsically

00:26:30,910 --> 00:26:37,510
sized so by extrinsic sizing we mean our

00:26:34,120 --> 00:26:40,150
size is determined by the context so

00:26:37,510 --> 00:26:45,100
that's the available space any fixed

00:26:40,150 --> 00:26:47,170
track values and any gap values and by

00:26:45,100 --> 00:26:49,540
intrinsic sizing we mean that size is

00:26:47,170 --> 00:26:51,610
determined by the content so both of

00:26:49,540 --> 00:26:55,390
these things are acting on our fr tracks

00:26:51,610 --> 00:26:57,370
to resolve the computed size if the

00:26:55,390 --> 00:26:59,440
content in each column was the same and

00:26:57,370 --> 00:27:02,500
yes we would get four equal width tracks

00:26:59,440 --> 00:27:04,750
but if one of our grid items has content

00:27:02,500 --> 00:27:06,850
that's much larger like the second item

00:27:04,750 --> 00:27:11,530
here which has this really large word in

00:27:06,850 --> 00:27:15,970
it then the grids column will grow and

00:27:11,530 --> 00:27:17,920
expand to fit the content so this is

00:27:15,970 --> 00:27:20,230
great because grid is responding to our

00:27:17,920 --> 00:27:23,470
content and avoiding breaking the layout

00:27:20,230 --> 00:27:25,180
but perhaps that's not what we want so

00:27:23,470 --> 00:27:27,850
perhaps we want our columns to be the

00:27:25,180 --> 00:27:29,350
same way it's no matter what and there

00:27:27,850 --> 00:27:33,240
are reasons why you might do that so it

00:27:29,350 --> 00:27:35,830
might be part of a page wide grid system

00:27:33,240 --> 00:27:38,950
what we need to do instead is use grids

00:27:35,830 --> 00:27:41,350
min/max function so with min max we pass

00:27:38,950 --> 00:27:43,960
in a minimum and a maximum size for our

00:27:41,350 --> 00:27:47,080
grid tracks and by setting a minimum of

00:27:43,960 --> 00:27:49,120
zero or any fixed length we can lock

00:27:47,080 --> 00:27:51,850
those tracks into growing at the same

00:27:49,120 --> 00:27:57,490
rate even if the content is larger or

00:27:51,850 --> 00:28:00,640
smaller now if we go over to the grid

00:27:57,490 --> 00:28:03,460
inspector again for a moment we have

00:28:00,640 --> 00:28:06,850
this last option on the right up to

00:28:03,460 --> 00:28:08,800
extend grid lines indefinitely if

00:28:06,850 --> 00:28:10,390
toggle that one on then you'll see our

00:28:08,800 --> 00:28:12,520
grid lines go all the way up and down

00:28:10,390 --> 00:28:14,410
our page and this is really useful

00:28:12,520 --> 00:28:17,770
because if you have lots of components

00:28:14,410 --> 00:28:19,690
on your page that use the same grid and

00:28:17,770 --> 00:28:21,610
you want all to line up with each other

00:28:19,690 --> 00:28:23,560
then you can straight away fee if

00:28:21,610 --> 00:28:24,940
something is pushing one of your grids

00:28:23,560 --> 00:28:27,370
out of alignment

00:28:24,940 --> 00:28:30,160
because those tracks then won't line up

00:28:27,370 --> 00:28:32,290
with each other anymore now I want to

00:28:30,160 --> 00:28:34,090
look at a problem that isn't quite

00:28:32,290 --> 00:28:36,580
solved with the level 1 grid

00:28:34,090 --> 00:28:39,640
specification but it will be with level

00:28:36,580 --> 00:28:42,670
2 and that's alignment between grid

00:28:39,640 --> 00:28:44,740
items so grid gives us access to a lot

00:28:42,670 --> 00:28:46,480
of different alignment properties some

00:28:44,740 --> 00:28:49,840
of which you might recognize from flex

00:28:46,480 --> 00:28:52,270
books and no one ever remembers what

00:28:49,840 --> 00:28:54,070
late will do and so it's compulsory to

00:28:52,270 --> 00:28:55,120
try out every single one until you find

00:28:54,070 --> 00:28:59,890
the one that that's the thing that you

00:28:55,120 --> 00:29:02,110
want now by default items will stretch

00:28:59,890 --> 00:29:05,260
to fill the grid cell like with Flex box

00:29:02,110 --> 00:29:09,160
they have an align items value of

00:29:05,260 --> 00:29:10,750
stretch or we could use align items with

00:29:09,160 --> 00:29:12,700
a value of Center to have all our

00:29:10,750 --> 00:29:14,380
content like line up nicely in the

00:29:12,700 --> 00:29:16,780
center of each grid cell because

00:29:14,380 --> 00:29:21,040
vertical centering is witchcraft as we

00:29:16,780 --> 00:29:23,650
all know now grid and flex box are not

00:29:21,040 --> 00:29:27,430
mutually exclusive and combining them is

00:29:23,650 --> 00:29:30,370
often really really useful so say we

00:29:27,430 --> 00:29:33,250
have these items in our grid and each

00:29:30,370 --> 00:29:36,940
one has two children it has a bit of

00:29:33,250 --> 00:29:39,640
text and it has a link at the bottom we

00:29:36,940 --> 00:29:43,150
could make the top item or so the

00:29:39,640 --> 00:29:44,830
heading of each one line up to the top

00:29:43,150 --> 00:29:47,530
of each grid cell and we could make the

00:29:44,830 --> 00:29:49,450
bottom item or the link line up to the

00:29:47,530 --> 00:29:51,760
bottom of each grid cell by using

00:29:49,450 --> 00:29:55,600
flexbox so we'd make each item a flex

00:29:51,760 --> 00:29:58,750
item and with Flex direction of column

00:29:55,600 --> 00:30:01,270
and we could either use justify content

00:29:58,750 --> 00:30:04,210
with a value of space between or we

00:30:01,270 --> 00:30:07,090
could use a top margin of auto on our

00:30:04,210 --> 00:30:09,940
links there to push them right down to

00:30:07,090 --> 00:30:13,900
the bottom off the grid cell node the

00:30:09,940 --> 00:30:15,730
grid item but what if these cards have

00:30:13,900 --> 00:30:17,470
another child element so they have a

00:30:15,730 --> 00:30:19,130
heading they have a paragraph of text

00:30:17,470 --> 00:30:21,710
and they have the link there

00:30:19,130 --> 00:30:23,600
well what might be a little bit nicer is

00:30:21,710 --> 00:30:26,179
if all the headings lined up with each

00:30:23,600 --> 00:30:28,220
other and all the paragraphs of text

00:30:26,179 --> 00:30:30,110
line up with each other and all the

00:30:28,220 --> 00:30:32,510
links line up with each other too so

00:30:30,110 --> 00:30:35,360
something like this but there's

00:30:32,510 --> 00:30:39,650
currently no way to do that using grid

00:30:35,360 --> 00:30:41,390
and flexbox as they are those items the

00:30:39,650 --> 00:30:43,880
contents of those items don't have any

00:30:41,390 --> 00:30:45,830
awareness of each other they all exist

00:30:43,880 --> 00:30:48,650
in their own little contextual bubble

00:30:45,830 --> 00:30:51,289
but this is where subgrid will come in

00:30:48,650 --> 00:30:55,070
useful and sub-grid is part of the level

00:30:51,289 --> 00:30:58,549
2 specification and it allows grid items

00:30:55,070 --> 00:31:00,080
to inherit the parent grid so we can use

00:30:58,549 --> 00:31:02,240
the grid template columns and grid

00:31:00,080 --> 00:31:05,000
template rows properties to specify

00:31:02,240 --> 00:31:07,250
which access we want to inherit the grid

00:31:05,000 --> 00:31:10,809
of parent so in this case it would be

00:31:07,250 --> 00:31:15,039
the row access and this is how we do it

00:31:10,809 --> 00:31:18,640
so we make each item now span three rows

00:31:15,039 --> 00:31:23,419
each item now becomes a grid in itself

00:31:18,640 --> 00:31:26,690
and we give it a value of sub grid for

00:31:23,419 --> 00:31:29,030
the grid template rows property and now

00:31:26,690 --> 00:31:34,669
those items will inherit the parent

00:31:29,030 --> 00:31:38,510
grids on the row access so sub grid is

00:31:34,669 --> 00:31:40,520
currently behind a flag in Firefox but

00:31:38,510 --> 00:31:43,010
it will be supported with the next

00:31:40,520 --> 00:31:45,919
release of Firefox which is Firefox 70 I

00:31:43,010 --> 00:31:47,750
think currently I don't think there are

00:31:45,919 --> 00:31:50,929
any plans for any of the other browsers

00:31:47,750 --> 00:31:52,789
to follow suit hopefully they will be

00:31:50,929 --> 00:31:55,610
pretty soon because I think this is

00:31:52,789 --> 00:31:59,030
probably a bit of a game changer for a

00:31:55,610 --> 00:32:00,440
lot of people using grid absolute but

00:31:59,030 --> 00:32:04,549
we're definitely in progressive

00:32:00,440 --> 00:32:06,950
enhancement territory right now now as

00:32:04,549 --> 00:32:09,710
much power as grid gives us it's not the

00:32:06,950 --> 00:32:12,620
solution to everything and it's just one

00:32:09,710 --> 00:32:14,179
tool of many so I'm a big fan of using

00:32:12,620 --> 00:32:16,400
the right layout method for the right

00:32:14,179 --> 00:32:19,159
purpose and here are some scenarios

00:32:16,400 --> 00:32:22,010
where I would not ease grid and the

00:32:19,159 --> 00:32:23,690
first one is tables I've seen plenty of

00:32:22,010 --> 00:32:26,090
layouts built with grids that should

00:32:23,690 --> 00:32:28,100
really be a table and if you're

00:32:26,090 --> 00:32:33,000
rendering a tabular data you should use

00:32:28,100 --> 00:32:36,390
a table don't do this

00:32:33,000 --> 00:32:38,039
and the main reason is that it renders

00:32:36,390 --> 00:32:41,010
your table in accessible to screen

00:32:38,039 --> 00:32:43,200
readers and you might think well I would

00:32:41,010 --> 00:32:45,000
never do that anyway because then you

00:32:43,200 --> 00:32:47,640
know I would have to flatten my markup

00:32:45,000 --> 00:32:50,700
but actually sub-grid makes it more

00:32:47,640 --> 00:32:52,380
tempting to do this because the table

00:32:50,700 --> 00:32:55,020
rows could inherit the grid of the

00:32:52,380 --> 00:32:57,120
parent and so on but a screen reader

00:32:55,020 --> 00:32:59,820
will not be able to read your table so

00:32:57,120 --> 00:33:04,080
don't do it and that a place for table

00:32:59,820 --> 00:33:06,179
raise too and the other one is when you

00:33:04,080 --> 00:33:08,490
don't want items to align in rows and

00:33:06,179 --> 00:33:11,039
columns which might sound kind of

00:33:08,490 --> 00:33:12,809
obvious but I have seen examples of

00:33:11,039 --> 00:33:15,090
people using grid where they would

00:33:12,809 --> 00:33:15,990
actually be much better served with

00:33:15,090 --> 00:33:18,840
flexbox

00:33:15,990 --> 00:33:21,539
so if Lex box is designed to be flexible

00:33:18,840 --> 00:33:24,570
and perhaps we don't want such a rigid

00:33:21,539 --> 00:33:26,400
layout where it gives us so maybe you've

00:33:24,570 --> 00:33:28,110
got something like a long navigation

00:33:26,400 --> 00:33:30,480
menu and you want that to wrap on two

00:33:28,110 --> 00:33:34,020
and two lines as the viewport gets

00:33:30,480 --> 00:33:36,179
smaller flexbox is perfect for that kind

00:33:34,020 --> 00:33:40,740
of scenario or you can have all those

00:33:36,179 --> 00:33:43,020
items nicely lined up in the center or

00:33:40,740 --> 00:33:45,240
perhaps when you have only one item in a

00:33:43,020 --> 00:33:48,570
line you want that item to expand and

00:33:45,240 --> 00:33:51,690
fill the line and this isn't really that

00:33:48,570 --> 00:33:54,419
practical to do with grid but it's

00:33:51,690 --> 00:33:59,400
exactly what flexbox excels at it's

00:33:54,419 --> 00:34:01,679
designed to be flexible whereas with

00:33:59,400 --> 00:34:04,320
grid the items will always be aligned in

00:34:01,679 --> 00:34:06,090
rows and columns and we could make some

00:34:04,320 --> 00:34:08,339
of them span different numbers of rows

00:34:06,090 --> 00:34:10,500
and columns to give the impression of a

00:34:08,339 --> 00:34:14,460
more uneven layout but they would still

00:34:10,500 --> 00:34:16,800
be aligned in rows and columns but if we

00:34:14,460 --> 00:34:19,770
want some of those items to span more

00:34:16,800 --> 00:34:21,899
than one row then we're laying that

00:34:19,770 --> 00:34:24,389
things out in two dimensions rather than

00:34:21,899 --> 00:34:29,190
one so that's the perfect case to use

00:34:24,389 --> 00:34:31,919
grid and the last one is when your

00:34:29,190 --> 00:34:33,810
fallback layouts take twice as long so

00:34:31,919 --> 00:34:35,849
one of the most common reasons that I

00:34:33,810 --> 00:34:39,389
hear for people not adopting grid is

00:34:35,849 --> 00:34:41,190
browser support or lack of so great is

00:34:39,389 --> 00:34:44,010
actually really well supported like

00:34:41,190 --> 00:34:46,159
something like 90% of all browsers

00:34:44,010 --> 00:34:49,730
support grid or possibly more it might

00:34:46,159 --> 00:34:54,470
like 92% now but it's not supported in

00:34:49,730 --> 00:34:57,760
ie 11 ie 10 and older browsers which

00:34:54,470 --> 00:35:01,339
still a lot of people do need to support

00:34:57,760 --> 00:35:03,770
in fact ie 10 and ie 11 do you support

00:35:01,339 --> 00:35:05,510
grids older syntax which is a prefix

00:35:03,770 --> 00:35:08,390
version and it doesn't have all the

00:35:05,510 --> 00:35:10,309
features of the modern spec so I prefer

00:35:08,390 --> 00:35:12,440
to treat those browsers as if they don't

00:35:10,309 --> 00:35:16,609
support grit at all and give them a full

00:35:12,440 --> 00:35:21,109
back layout and my way of doing that is

00:35:16,609 --> 00:35:23,000
to use at supports rules so this app

00:35:21,109 --> 00:35:25,130
supports rule says if the browser does

00:35:23,000 --> 00:35:27,829
not support grid do this flex layout

00:35:25,130 --> 00:35:31,190
instead but actually this is a really

00:35:27,829 --> 00:35:34,940
bad idea because ie doesn't support at

00:35:31,190 --> 00:35:36,950
supports so this whole block will be

00:35:34,940 --> 00:35:39,770
ignored and you won't get your full back

00:35:36,950 --> 00:35:41,930
layout so what you need to do instead is

00:35:39,770 --> 00:35:44,420
to put your full back first and then you

00:35:41,930 --> 00:35:47,630
can wrap your grid code in the app

00:35:44,420 --> 00:35:49,910
supports rule and I would recommend

00:35:47,630 --> 00:35:51,710
providing a simpler layout for your full

00:35:49,910 --> 00:35:53,809
bags and if you're spending time

00:35:51,710 --> 00:35:56,420
painstakingly trying to recreate your

00:35:53,809 --> 00:35:58,730
grid layouts using older layout methods

00:35:56,420 --> 00:36:02,089
then that's really not good use of grid

00:35:58,730 --> 00:36:04,640
or your time and I think in truth in

00:36:02,089 --> 00:36:07,309
order to truly embrace modern CSS layout

00:36:04,640 --> 00:36:09,020
that we need to let go of the idea that

00:36:07,309 --> 00:36:12,020
websites need to look the same in all

00:36:09,020 --> 00:36:13,940
browsers and if your clients or whoever

00:36:12,020 --> 00:36:15,470
you're building a website for really

00:36:13,940 --> 00:36:17,839
believes that and can't be persuaded

00:36:15,470 --> 00:36:19,760
otherwise then it's probably not a good

00:36:17,839 --> 00:36:21,829
idea to build your entire website in

00:36:19,760 --> 00:36:24,920
grid you're basically doubling your

00:36:21,829 --> 00:36:27,710
workload but there's nothing to stop you

00:36:24,920 --> 00:36:30,650
using grid for smaller components or

00:36:27,710 --> 00:36:33,619
smaller chunks of UI and actually I

00:36:30,650 --> 00:36:35,839
think that can be quite a good testbed

00:36:33,619 --> 00:36:38,299
and a great way to convince other people

00:36:35,839 --> 00:36:42,589
that it's something worth investing in

00:36:38,299 --> 00:36:45,020
and exploring more you don't have to use

00:36:42,589 --> 00:36:46,880
grid as an all-or-nothing thing and

00:36:45,020 --> 00:36:50,029
that's the great thing about it is it's

00:36:46,880 --> 00:36:52,700
native CSS it doesn't involve importing

00:36:50,029 --> 00:36:57,890
another dependency into your project it

00:36:52,700 --> 00:36:59,880
costs nothing to use grid so thank you

00:36:57,890 --> 00:37:01,769
for listening if you're interested in

00:36:59,880 --> 00:37:03,990
learning a bit more about grid I really

00:37:01,769 --> 00:37:06,930
recommend anything by Rachel Andrew or

00:37:03,990 --> 00:37:10,200
Jen Simmons so Rachel Andrew has grit by

00:37:06,930 --> 00:37:12,299
example calm where she has written like

00:37:10,200 --> 00:37:14,549
probably like literally hundreds of

00:37:12,299 --> 00:37:16,170
articles about grids like really deep

00:37:14,549 --> 00:37:18,990
diving into some of the different

00:37:16,170 --> 00:37:21,599
aspects so she is kind of the font of

00:37:18,990 --> 00:37:24,059
all knowledge in that regard and John

00:37:21,599 --> 00:37:26,279
Simmons has this layout land and YouTube

00:37:24,059 --> 00:37:28,829
channel so if you prefer learning by

00:37:26,279 --> 00:37:30,990
video that's definitely worth taking a

00:37:28,829 --> 00:37:33,210
look at and if you want to know a bit

00:37:30,990 --> 00:37:35,819
more about their Firefox developer tools

00:37:33,210 --> 00:37:37,859
there's also a mozilla developer chat

00:37:35,819 --> 00:37:40,559
channel where they talk about some of

00:37:37,859 --> 00:37:43,859
the new CSS features and how to debug

00:37:40,559 --> 00:37:46,259
those with dev tools and lastly this is

00:37:43,859 --> 00:37:47,730
my blog CSS in real life where I've

00:37:46,259 --> 00:37:50,069
written quite a lot of articles about

00:37:47,730 --> 00:37:52,170
grid including some of the stuff that I

00:37:50,069 --> 00:38:07,349
talked about here today so thanks for

00:37:52,170 --> 00:38:09,569
having me it really depends so the thing

00:38:07,349 --> 00:38:13,170
like with grid especially using things

00:38:09,569 --> 00:38:16,349
like fr tracks and min/max is you

00:38:13,170 --> 00:38:18,779
actually kind of I find don't need as

00:38:16,349 --> 00:38:21,930
many break points as you otherwise would

00:38:18,779 --> 00:38:25,289
because you can kind of build things in

00:38:21,930 --> 00:38:28,259
the way that they kind of respond to the

00:38:25,289 --> 00:38:30,720
layout a bit better so I haven't shown

00:38:28,259 --> 00:38:31,950
the examples here but in another one of

00:38:30,720 --> 00:38:34,950
the talks they've done I've shown how

00:38:31,950 --> 00:38:36,960
you can kind of use the sort of similar

00:38:34,950 --> 00:38:38,880
layouts you the scrapbook layout but you

00:38:36,960 --> 00:38:41,369
can actually get down to quite small

00:38:38,880 --> 00:38:43,319
screen sizes maybe kind of just before

00:38:41,369 --> 00:38:46,740
mobile before the layout starts looking

00:38:43,319 --> 00:38:48,420
not right and so in that case you

00:38:46,740 --> 00:38:51,509
probably would only need like one

00:38:48,420 --> 00:38:54,960
breakpoint I tend to go like you know

00:38:51,509 --> 00:38:57,450
from like mobile like just a stacked

00:38:54,960 --> 00:39:01,079
layout and then initiate grid once you

00:38:57,450 --> 00:39:03,930
get to kind of like tablet size in most

00:39:01,079 --> 00:39:06,960
cases but you could like do sort of grid

00:39:03,930 --> 00:39:08,880
all the way down theoretically I mean

00:39:06,960 --> 00:39:11,180
hey for the browsers that support it

00:39:08,880 --> 00:39:11,180
anyway

00:39:13,170 --> 00:39:19,050
and you use message quiz yes so I wonder

00:39:17,400 --> 00:39:21,000
if I have the example I don't think I do

00:39:19,050 --> 00:39:22,830
here but so I'm actually using that on a

00:39:21,000 --> 00:39:27,330
project that I'm working on at the

00:39:22,830 --> 00:39:30,000
moment again it's like a kind of like

00:39:27,330 --> 00:39:32,880
layout where items are overlapping quite

00:39:30,000 --> 00:39:38,220
a bit and I'm using kind of like three

00:39:32,880 --> 00:39:40,140
or four levels of grids so yet some so

00:39:38,220 --> 00:39:45,090
sometimes that's kind of the best

00:39:40,140 --> 00:39:48,540
approach anyway because yeah you would

00:39:45,090 --> 00:39:53,220
like so with sub grid that would be a

00:39:48,540 --> 00:39:55,110
bit easier because you could like it was

00:39:53,220 --> 00:39:58,290
still kind of is a nested grid but it's

00:39:55,110 --> 00:40:00,180
inheriting the parent grid whereas now I

00:39:58,290 --> 00:40:02,910
have to do things like you know defining

00:40:00,180 --> 00:40:04,890
like if I want a grid that takes you

00:40:02,910 --> 00:40:07,260
know five out of six columns but then I

00:40:04,890 --> 00:40:09,150
also want that to be a grid then I have

00:40:07,260 --> 00:40:11,520
to like define these five columns inside

00:40:09,150 --> 00:40:12,240
that bread and so on but yeah you can

00:40:11,520 --> 00:40:29,030
totally do that

00:40:12,240 --> 00:40:34,380
but sub grid will make it more tools so

00:40:29,030 --> 00:40:36,090
not exactly and but you can like by

00:40:34,380 --> 00:40:37,530
extending the grid lines I think that's

00:40:36,090 --> 00:40:43,590
quite helpful if you do have multiple

00:40:37,530 --> 00:40:46,650
grids on the page or if you say when you

00:40:43,590 --> 00:40:48,690
do have a grid if you hover over any of

00:40:46,650 --> 00:40:51,330
these grid cells then you get the

00:40:48,690 --> 00:40:54,450
computed track size in the little bubble

00:40:51,330 --> 00:40:56,760
above the grid cell so you can see if

00:40:54,450 --> 00:40:58,320
like you know you to your eye something

00:40:56,760 --> 00:41:01,110
you might not be sure whether something

00:40:58,320 --> 00:41:02,880
is it was your tracks of the same size

00:41:01,110 --> 00:41:05,430
or not and that will tell you definitely

00:41:02,880 --> 00:41:10,670
whether they're the same size but yeah

00:41:05,430 --> 00:41:10,670

YouTube URL: https://www.youtube.com/watch?v=s2IXTNOPvow


