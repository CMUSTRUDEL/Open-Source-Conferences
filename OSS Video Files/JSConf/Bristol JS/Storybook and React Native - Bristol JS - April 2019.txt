Title: Storybook and React Native - Bristol JS - April 2019
Publication date: 2019-05-08
Playlist: Bristol JS
Description: 
	Wyc Slingsby - Storybook and React Native

Storybook is a popular tool for the development of UI components in many of the leading web frameworks including React, Vue and Angular. It provides a convenient environment for developing components in isolation from the main app, making the testing of hard-to-reach edge cases easier. Storybook also supports React Native, bringing the same advantages to mobile developers. In this talk I'll look at how we have used Storybook in the development of a new React Native app, sharing some of the key things we have learned along the way. We will also look at how the structural testing of React Native UI components can be automated using Storybook and Jest snapshots, providing an additional option for static front-end testing.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:07,470
I'm going to talk to you about storybook

00:00:05,120 --> 00:00:10,679
so I'll start just with a very quick

00:00:07,470 --> 00:00:13,679
intro of kind of how I've how I've

00:00:10,679 --> 00:00:15,660
landed up doing storybook are working

00:00:13,679 --> 00:00:20,100
with storybook for the last eight months

00:00:15,660 --> 00:00:21,750
or so a bit longer actually talked a

00:00:20,100 --> 00:00:24,449
little bit about the sort of approach

00:00:21,750 --> 00:00:26,039
that story book describes sort of they

00:00:24,449 --> 00:00:30,359
call it a component driven development

00:00:26,039 --> 00:00:32,700
but for for those of you who've done

00:00:30,359 --> 00:00:33,989
this stuff it'll be very familiar and

00:00:32,700 --> 00:00:35,489
there are so many frameworks use

00:00:33,989 --> 00:00:37,710
components these days that I open it be

00:00:35,489 --> 00:00:40,260
pretty familiar to most but I think

00:00:37,710 --> 00:00:42,780
storybook is quite an interesting way

00:00:40,260 --> 00:00:46,590
that encourages you to think in a

00:00:42,780 --> 00:00:48,690
particular way I've been either dumb

00:00:46,590 --> 00:00:51,180
enough or brave enough or what something

00:00:48,690 --> 00:00:53,309
to try and put some kind of live demo

00:00:51,180 --> 00:00:56,010
together so I've built built a little

00:00:53,309 --> 00:00:58,800
app to try and demonstrate some of this

00:00:56,010 --> 00:01:01,590
stuff for you and then summary and some

00:00:58,800 --> 00:01:04,320
questions so before we get stuck in

00:01:01,590 --> 00:01:05,909
it's a story so we need to introduce you

00:01:04,320 --> 00:01:07,860
to the characters in the story we've got

00:01:05,909 --> 00:01:12,000
story book there's the star of the show

00:01:07,860 --> 00:01:13,619
and who here has used storybook they say

00:01:12,000 --> 00:01:15,210
quite a lot of you so you probably know

00:01:13,619 --> 00:01:17,159
a lot more about it than I do then so

00:01:15,210 --> 00:01:20,159
please let me know when I get something

00:01:17,159 --> 00:01:22,020
wrong I'm talking about it in the

00:01:20,159 --> 00:01:24,750
context of react native specifically

00:01:22,020 --> 00:01:29,689
tonight so how many react native

00:01:24,750 --> 00:01:32,700
developers have we got okay a few and

00:01:29,689 --> 00:01:34,079
typescript as well so I'm going to talk

00:01:32,700 --> 00:01:36,299
a little about all of these things

00:01:34,079 --> 00:01:37,500
because I think they come together and

00:01:36,299 --> 00:01:39,390
there are some particular challenges

00:01:37,500 --> 00:01:42,630
with bringing all of these technologies

00:01:39,390 --> 00:01:48,030
together that I've found typescript

00:01:42,630 --> 00:01:51,960
developers okay few and then the team at

00:01:48,030 --> 00:01:54,479
tamela where I work all down the bottom

00:01:51,960 --> 00:01:56,640
there they were kind enough to support

00:01:54,479 --> 00:01:59,759
me and encourage me indeed to do this

00:01:56,640 --> 00:02:03,420
talk so before we move on a very quick

00:01:59,759 --> 00:02:07,979
bit about taboo blimey

00:02:03,420 --> 00:02:11,009
smelly tomato is where a small start-up

00:02:07,979 --> 00:02:12,390
there are six of us at the moment three

00:02:11,009 --> 00:02:13,560
in the development team I'm working on

00:02:12,390 --> 00:02:16,640
the mobile app

00:02:13,560 --> 00:02:20,010
as you'll guess it's all about

00:02:16,640 --> 00:02:23,190
investment and value-based investing so

00:02:20,010 --> 00:02:26,520
we help you we find out the things that

00:02:23,190 --> 00:02:27,930
matter to you about your values whether

00:02:26,520 --> 00:02:30,290
that's gender equality or the

00:02:27,930 --> 00:02:33,300
environment or something like that

00:02:30,290 --> 00:02:36,000
understand your risk profile and build

00:02:33,300 --> 00:02:38,670
you a recommended portfolio so we

00:02:36,000 --> 00:02:41,840
provide financial advice and then allow

00:02:38,670 --> 00:02:44,370
you to invest through the app and

00:02:41,840 --> 00:02:46,470
importantly we then help you engage with

00:02:44,370 --> 00:02:48,090
those companies that you've invested in

00:02:46,470 --> 00:02:50,220
so you're now a shareholder of these

00:02:48,090 --> 00:02:54,060
companies albeit maybe indirectly

00:02:50,220 --> 00:02:55,950
through some kind of fund but we expose

00:02:54,060 --> 00:02:57,630
to you the companies that you're

00:02:55,950 --> 00:02:59,580
actually invested in and help you

00:02:57,630 --> 00:03:01,920
interact with them to hopefully help

00:02:59,580 --> 00:03:04,709
them encourage them to bring about

00:03:01,920 --> 00:03:08,790
positive change in the world so that's

00:03:04,709 --> 00:03:12,120
the idea that's Tamela and now a little

00:03:08,790 --> 00:03:15,810
bit about me I call this confessions of

00:03:12,120 --> 00:03:19,799
an iOS developer because I kind of react

00:03:15,810 --> 00:03:22,950
native is really cool because it sort of

00:03:19,799 --> 00:03:28,470
it says that it brings the world of web

00:03:22,950 --> 00:03:29,430
development to the mobile world so

00:03:28,470 --> 00:03:31,769
allows people with web development

00:03:29,430 --> 00:03:33,900
experience to build react to build

00:03:31,769 --> 00:03:36,900
native apps I kind of came at it

00:03:33,900 --> 00:03:40,890
backwards so it was an iOS developer a

00:03:36,900 --> 00:03:42,329
native iOS developer and about a year

00:03:40,890 --> 00:03:45,260
and a half ago the company I was working

00:03:42,329 --> 00:03:48,209
at before decided to evaluate we had a

00:03:45,260 --> 00:03:52,620
we had a native app an iOS app and an

00:03:48,209 --> 00:03:56,400
Android app actually squeezie

00:03:52,620 --> 00:03:57,660
it's a NHS approved app in the Women's

00:03:56,400 --> 00:04:01,110
Health domain so very different from

00:03:57,660 --> 00:04:02,549
what we're doing now but we wanted to

00:04:01,110 --> 00:04:03,900
add on some features to that and we

00:04:02,549 --> 00:04:06,320
thought maybe we should investigate

00:04:03,900 --> 00:04:09,060
whether one of the new cross platform

00:04:06,320 --> 00:04:11,160
technologies was the good way forward we

00:04:09,060 --> 00:04:13,290
ended up choosing react native flutter

00:04:11,160 --> 00:04:15,630
was still very early and not quite

00:04:13,290 --> 00:04:18,600
mature enough at that time so when I

00:04:15,630 --> 00:04:21,260
came back at it backwards I've been used

00:04:18,600 --> 00:04:24,030
to sort of imperative programming style

00:04:21,260 --> 00:04:26,430
react obviously quite declarative being

00:04:24,030 --> 00:04:30,540
used to very strongly tight

00:04:26,430 --> 00:04:35,620
language in the form of swift versus

00:04:30,540 --> 00:04:37,510
JavaScript which isn't compiled language

00:04:35,620 --> 00:04:40,990
versus an interpreted language or a

00:04:37,510 --> 00:04:44,370
just-in-time compiled language Xcode is

00:04:40,990 --> 00:04:48,870
kind of the only real way to write react

00:04:44,370 --> 00:04:51,730
native iOS absol yeah as that as the IDE

00:04:48,870 --> 00:04:53,760
and then for welcome to this amazing

00:04:51,730 --> 00:04:56,560
world of the web where you got

00:04:53,760 --> 00:04:58,630
incredibly rich ecosystem of development

00:04:56,560 --> 00:05:03,190
tools and things so quite quite an

00:04:58,630 --> 00:05:05,350
interesting experience it will become

00:05:03,190 --> 00:05:08,530
blatantly obvious when I do my demo that

00:05:05,350 --> 00:05:12,610
I'm not a designer so please forgive me

00:05:08,530 --> 00:05:14,020
for that so a little bit about react

00:05:12,610 --> 00:05:15,970
native for those of you who don't know

00:05:14,020 --> 00:05:18,790
about it and apologies for those of you

00:05:15,970 --> 00:05:21,610
who do I noticed that next month talk is

00:05:18,790 --> 00:05:24,850
also has a talk about getting into react

00:05:21,610 --> 00:05:27,670
native so that might be interesting so

00:05:24,850 --> 00:05:30,550
the idea is that you can build native

00:05:27,670 --> 00:05:31,990
mobile apps using javascript and react

00:05:30,550 --> 00:05:35,680
which are frameworks that are familiar

00:05:31,990 --> 00:05:37,860
to a lot of web developers declarative

00:05:35,680 --> 00:05:41,170
approach and you end up with a real

00:05:37,860 --> 00:05:43,090
mobile app using native UI components

00:05:41,170 --> 00:05:45,490
this is very different so they kind of

00:05:43,090 --> 00:05:47,200
called over a phone gap type of

00:05:45,490 --> 00:05:49,720
solutions or around a few years ago

00:05:47,200 --> 00:05:52,660
where you're basically building a web

00:05:49,720 --> 00:05:54,600
app that ran in a browser that was just

00:05:52,660 --> 00:05:58,270
packaged up and bundled onto your phone

00:05:54,600 --> 00:06:00,460
so in react native you really are using

00:05:58,270 --> 00:06:03,130
JavaScript but it's rendering ultimately

00:06:00,460 --> 00:06:08,110
to native UI components on both Android

00:06:03,130 --> 00:06:10,270
and on iOS it's got some nice advantages

00:06:08,110 --> 00:06:12,430
though because you don't have to sit

00:06:10,270 --> 00:06:14,650
there recompiling your code all the time

00:06:12,430 --> 00:06:16,720
when you want to test it you can just

00:06:14,650 --> 00:06:19,030
reload the JavaScript in a matter of

00:06:16,720 --> 00:06:22,090
seconds and it's it's up so it's magic

00:06:19,030 --> 00:06:26,380
and that's that is magic for a sort of

00:06:22,090 --> 00:06:27,880
native developer like me one of the cool

00:06:26,380 --> 00:06:29,770
things about react native is it does let

00:06:27,880 --> 00:06:33,940
you fall back to native code if you need

00:06:29,770 --> 00:06:36,250
to if you want to and that's that's kind

00:06:33,940 --> 00:06:38,440
of so there's always a way out if you

00:06:36,250 --> 00:06:39,820
need it although of course the more you

00:06:38,440 --> 00:06:41,350
take that way out the more

00:06:39,820 --> 00:06:43,960
you have to worry about doing it on two

00:06:41,350 --> 00:06:47,410
platforms and needing native skills for

00:06:43,960 --> 00:06:49,990
both platforms so so it is very widely

00:06:47,410 --> 00:06:53,910
adopted it's growing very rapidly as a

00:06:49,990 --> 00:06:57,520
platform backed by Facebook mm-hmm but

00:06:53,910 --> 00:07:02,160
there are certainly some some challenges

00:06:57,520 --> 00:07:04,930
out there the upgrade process is

00:07:02,160 --> 00:07:08,740
horrible and very frequent the

00:07:04,930 --> 00:07:10,150
platform's moving on very frequently in

00:07:08,740 --> 00:07:12,070
terms of performance and getting really

00:07:10,150 --> 00:07:15,400
nice performance smooth performance it

00:07:12,070 --> 00:07:17,050
can be a bit of a problem Facebook could

00:07:15,400 --> 00:07:19,990
completely react attacking the innards

00:07:17,050 --> 00:07:24,310
of it to hopefully address some of those

00:07:19,990 --> 00:07:25,440
issues but in my last place where we

00:07:24,310 --> 00:07:28,390
were use that we actually had a

00:07:25,440 --> 00:07:32,050
brownfield app so a native app where we

00:07:28,390 --> 00:07:34,030
were adding react native to it all sorts

00:07:32,050 --> 00:07:35,760
of difficult problems within to working

00:07:34,030 --> 00:07:38,320
the UIs and getting it to smooth

00:07:35,760 --> 00:07:40,840
smoothly change between one platform and

00:07:38,320 --> 00:07:41,830
the other but for greenfield apps like

00:07:40,840 --> 00:07:44,800
the one I'm working on at the moment

00:07:41,830 --> 00:07:47,800
where it's pure react native not quite

00:07:44,800 --> 00:07:51,100
so bad and for those of you know

00:07:47,800 --> 00:07:54,490
somewhat famously air B&B were a major

00:07:51,100 --> 00:07:57,880
user of react native until they

00:07:54,490 --> 00:08:00,460
announced their Sun setting of using

00:07:57,880 --> 00:08:05,400
react native a while back and that was

00:08:00,460 --> 00:08:07,420
at least in part I think made made

00:08:05,400 --> 00:08:09,640
brought about by the fact that they were

00:08:07,420 --> 00:08:12,970
trying to inter work native app and bits

00:08:09,640 --> 00:08:16,240
of react native so a little bit about

00:08:12,970 --> 00:08:19,320
typescript Microsoft mmm claim it's

00:08:16,240 --> 00:08:19,320
JavaScript and scales

00:08:20,100 --> 00:08:24,040
I'm one of their big sort of selling

00:08:22,420 --> 00:08:26,980
points is that it enables much better

00:08:24,040 --> 00:08:29,730
developer tooling and experience it

00:08:26,980 --> 00:08:32,140
provides and supports all sorts of

00:08:29,730 --> 00:08:35,080
refactoring static analysis type

00:08:32,140 --> 00:08:37,060
checking as you go and the nice thing

00:08:35,080 --> 00:08:39,099
about it is you can incrementally adopt

00:08:37,060 --> 00:08:41,950
you can start add types to your

00:08:39,099 --> 00:08:45,700
JavaScript code as you go it's a super

00:08:41,950 --> 00:08:47,880
it's a superset of JavaScript and it

00:08:45,700 --> 00:08:50,830
really is just a layer that that adds

00:08:47,880 --> 00:08:52,690
typing to it but it also then compiles

00:08:50,830 --> 00:08:53,620
down to whatever javascript target you

00:08:52,690 --> 00:08:55,750
want and

00:08:53,620 --> 00:08:58,270
sorts of cool stuff so actually it hides

00:08:55,750 --> 00:08:59,890
away for someone like me who wasn't a

00:08:58,270 --> 00:09:02,440
JavaScript developer and really hadn't

00:08:59,890 --> 00:09:05,050
kept up with it having played with it

00:09:02,440 --> 00:09:08,050
like 20 years ago and not ever since

00:09:05,050 --> 00:09:11,290
hadn't kept up with it it's sort of

00:09:08,050 --> 00:09:13,540
hides a lot of the details of JavaScript

00:09:11,290 --> 00:09:16,529
behind the scenes and just it just kind

00:09:13,540 --> 00:09:20,290
of works which is kind of nice

00:09:16,529 --> 00:09:22,540
interactive JavaScript vs code and

00:09:20,290 --> 00:09:24,730
Microsoft JavaScript language service

00:09:22,540 --> 00:09:26,470
you if any of you use vs code you'll

00:09:24,730 --> 00:09:28,600
notice that it's code completion just

00:09:26,470 --> 00:09:31,060
for pure JavaScript is actually quite

00:09:28,600 --> 00:09:33,400
good and what's going on is internally

00:09:31,060 --> 00:09:35,350
it's using its typescript types that it

00:09:33,400 --> 00:09:37,990
knows about to act first some of the

00:09:35,350 --> 00:09:39,700
major standard libraries to do some of

00:09:37,990 --> 00:09:42,190
that code completion intellisense for

00:09:39,700 --> 00:09:43,180
you so even though you're not maybe

00:09:42,190 --> 00:09:44,770
using typescript

00:09:43,180 --> 00:09:46,690
maybe some of you are and you don't even

00:09:44,770 --> 00:09:50,170
note the s code is actually written in

00:09:46,690 --> 00:09:51,970
typescript so types interfaces classes

00:09:50,170 --> 00:09:53,350
generics all sorts of modern-day

00:09:51,970 --> 00:09:55,420
language features which is really cool

00:09:53,350 --> 00:09:57,910
for for me having come from a world of

00:09:55,420 --> 00:10:00,070
Swift where all those things are there

00:09:57,910 --> 00:10:00,580
and then finally we get to the star of

00:10:00,070 --> 00:10:05,020
the show

00:10:00,580 --> 00:10:09,190
storybook it's sort of a framework that

00:10:05,020 --> 00:10:11,560
is designed to let you develop

00:10:09,190 --> 00:10:15,420
components in isolation from your main

00:10:11,560 --> 00:10:18,430
app so you've got your react components

00:10:15,420 --> 00:10:21,370
supports all the major frameworks and

00:10:18,430 --> 00:10:24,880
also react native so we've been using it

00:10:21,370 --> 00:10:27,330
to build up the UI components for the

00:10:24,880 --> 00:10:30,930
app that I'm working on it tomorrow

00:10:27,330 --> 00:10:35,220
storybooks an open-source framework and

00:10:30,930 --> 00:10:40,150
it sort of as you'll see when I sort of

00:10:35,220 --> 00:10:41,950
run through the examples it's sort of

00:10:40,150 --> 00:10:44,709
provides a way of documenting different

00:10:41,950 --> 00:10:47,350
use cases so each use case is what they

00:10:44,709 --> 00:10:49,810
would call a story a story is just a

00:10:47,350 --> 00:10:52,390
function that returns something that can

00:10:49,810 --> 00:10:54,700
be rendered to the screen and that's it

00:10:52,390 --> 00:10:57,100
as simple as it gets really a story

00:10:54,700 --> 00:11:00,850
usually contains a single state of a

00:10:57,100 --> 00:11:03,150
single component and it's effectively a

00:11:00,850 --> 00:11:05,650
visual test case in many ways

00:11:03,150 --> 00:11:06,830
and I find that it sort of encourages

00:11:05,650 --> 00:11:08,870
quite thoughtful

00:11:06,830 --> 00:11:11,240
design and it's sort of a bit like your

00:11:08,870 --> 00:11:13,370
point of earlier in that if you write

00:11:11,240 --> 00:11:16,700
tests you can think of these as visual

00:11:13,370 --> 00:11:20,900
tests really and helps you structure and

00:11:16,700 --> 00:11:26,750
breakdown your your your design into

00:11:20,900 --> 00:11:30,770
good good set of components so I needed

00:11:26,750 --> 00:11:33,440
a demo app so I've built one called

00:11:30,770 --> 00:11:36,410
faithful friends it's based on the idea

00:11:33,440 --> 00:11:38,780
of a trot Top Trumps style game for cute

00:11:36,410 --> 00:11:42,080
and fluffy things every internet tool

00:11:38,780 --> 00:11:47,860
needs some cats obviously so that's what

00:11:42,080 --> 00:11:47,860
you're gonna get so when we look at this

00:11:47,950 --> 00:11:54,560
thing and start thinking about how we're

00:11:52,640 --> 00:11:58,130
going to break it out into components UI

00:11:54,560 --> 00:12:00,080
components I kind of started at the

00:11:58,130 --> 00:12:01,880
bottom level up so we've got well

00:12:00,080 --> 00:12:03,740
actually maybe we start at the top level

00:12:01,880 --> 00:12:07,400
down we've got a cards the character

00:12:03,740 --> 00:12:10,160
card that has a name a picture and then

00:12:07,400 --> 00:12:13,400
a list of sort of character traits and

00:12:10,160 --> 00:12:15,470
this character trait list has that's one

00:12:13,400 --> 00:12:17,570
of these lines is a is a component as

00:12:15,470 --> 00:12:18,980
well because it occurs multiple times so

00:12:17,570 --> 00:12:23,330
that feels like something we might want

00:12:18,980 --> 00:12:24,740
to pick out and reuse too so the end up

00:12:23,330 --> 00:12:26,720
you end up with a sort of component

00:12:24,740 --> 00:12:29,180
hierarchy somewhat like that

00:12:26,720 --> 00:12:30,980
now I've you know really put try to pull

00:12:29,180 --> 00:12:34,130
things apart as much as possible to sort

00:12:30,980 --> 00:12:39,530
of prove an illustrator point so I hope

00:12:34,130 --> 00:12:42,290
you you see where it's going so I don't

00:12:39,530 --> 00:12:46,970
know if you can read this hopefully you

00:12:42,290 --> 00:12:51,980
can on the left you see basically a

00:12:46,970 --> 00:12:58,850
snippet from my storybook file so this

00:12:51,980 --> 00:13:02,210
is a simple way of adding each line if

00:12:58,850 --> 00:13:04,240
that had provides a test case

00:13:02,210 --> 00:13:07,010
essentially a story

00:13:04,240 --> 00:13:09,770
it's just rendering as I say rendering

00:13:07,010 --> 00:13:12,620
one thing so the first one is this trait

00:13:09,770 --> 00:13:16,100
info component that we've created it's

00:13:12,620 --> 00:13:18,400
got a title a value and a background

00:13:16,100 --> 00:13:22,960
color

00:13:18,400 --> 00:13:26,710
and then when rendered the storybook

00:13:22,960 --> 00:13:29,230
within the phone renders this view here

00:13:26,710 --> 00:13:32,770
when you run it and you'll see that

00:13:29,230 --> 00:13:34,630
every ad or the stories of character

00:13:32,770 --> 00:13:37,660
card end up as character card in your

00:13:34,630 --> 00:13:39,580
section then you've got the ad that's

00:13:37,660 --> 00:13:42,220
the name of the test so it's quite like

00:13:39,580 --> 00:13:44,020
that what we were seeing earlier trait

00:13:42,220 --> 00:13:47,260
info and then we've got different test

00:13:44,020 --> 00:13:51,210
cases style a stile B and then we sort

00:13:47,260 --> 00:13:51,210
of build up the whole thing

00:13:52,110 --> 00:13:59,850
storybook on the phone actually runs as

00:13:55,660 --> 00:14:03,460
a component within on the phone itself

00:13:59,850 --> 00:14:05,740
you can that you don't have to run the

00:14:03,460 --> 00:14:11,010
storybook server and which you might be

00:14:05,740 --> 00:14:14,650
more used to doing in the web world the

00:14:11,010 --> 00:14:17,140
server is actually kind of useful though

00:14:14,650 --> 00:14:19,300
for some of the phone stuff as we'll see

00:14:17,140 --> 00:14:21,430
in a minute when it's running on the

00:14:19,300 --> 00:14:22,990
phone you can switch between the

00:14:21,430 --> 00:14:24,760
navigator view in the preview view the

00:14:22,990 --> 00:14:27,100
navigator lets you select the component

00:14:24,760 --> 00:14:28,210
you want to look at and then it sort of

00:14:27,100 --> 00:14:30,280
gives you a little preview in the right

00:14:28,210 --> 00:14:33,580
and click on that and it sort of expands

00:14:30,280 --> 00:14:36,250
to full full screen so here we see the

00:14:33,580 --> 00:14:40,030
first test case trait in face selected

00:14:36,250 --> 00:14:42,220
style a it renders the title of strength

00:14:40,030 --> 00:14:44,350
value of 3 and that's the background

00:14:42,220 --> 00:14:49,480
color so really really super simple

00:14:44,350 --> 00:14:53,950
components they then building up from

00:14:49,480 --> 00:14:58,330
that we have one of those components

00:14:53,950 --> 00:15:01,840
placed in a list which and then the list

00:14:58,330 --> 00:15:04,390
determines which color the lines can be

00:15:01,840 --> 00:15:07,150
and then we build up to a whole card

00:15:04,390 --> 00:15:10,860
where we see the name of the character a

00:15:07,150 --> 00:15:13,980
picture and some character traits then

00:15:10,860 --> 00:15:18,000
if you do run this the server up mm-hmm

00:15:13,980 --> 00:15:20,200
you see exactly the same view except

00:15:18,000 --> 00:15:21,670
clicking on these guys actually change

00:15:20,200 --> 00:15:24,460
what's happening on the phone which is

00:15:21,670 --> 00:15:26,770
kind of neat so you can it's a this is

00:15:24,460 --> 00:15:28,300
like a navigator and then you can see

00:15:26,770 --> 00:15:29,980
the things changing on the phone that's

00:15:28,300 --> 00:15:35,560
quite convenient

00:15:29,980 --> 00:15:37,930
and importantly you can when you start

00:15:35,560 --> 00:15:42,970
clicking around on things if you have an

00:15:37,930 --> 00:15:44,980
action add-on in your test then the

00:15:42,970 --> 00:15:47,410
outputs of the action will appear over

00:15:44,980 --> 00:15:49,000
here there's no other way on the in the

00:15:47,410 --> 00:15:51,490
react native environment for that output

00:15:49,000 --> 00:15:52,839
the action output to appear so it's

00:15:51,490 --> 00:15:54,010
super helpful to know whether you've

00:15:52,839 --> 00:15:55,240
clicked on something and whether you've

00:15:54,010 --> 00:15:57,790
clicked on the right thing and the right

00:15:55,240 --> 00:16:05,650
data is being sent sort of propagated

00:15:57,790 --> 00:16:09,040
back up the stack so what are we what

00:16:05,650 --> 00:16:12,880
have I learnt about combination of

00:16:09,040 --> 00:16:14,680
Storybrooke and react native as I say

00:16:12,880 --> 00:16:16,750
there the server is optional this

00:16:14,680 --> 00:16:19,210
changed in a storybook version for

00:16:16,750 --> 00:16:22,450
actually in version 3 you had to run the

00:16:19,210 --> 00:16:25,720
server in four they made that optional

00:16:22,450 --> 00:16:27,940
and now they've introduced the need so

00:16:25,720 --> 00:16:30,580
that they're kind of the upside is that

00:16:27,940 --> 00:16:32,589
the whole of the storybook interface is

00:16:30,580 --> 00:16:33,880
presented as a single react component

00:16:32,589 --> 00:16:35,680
you just drop into the app and it

00:16:33,880 --> 00:16:38,380
renders the whole thing that navigator

00:16:35,680 --> 00:16:39,700
and everything really lovely but somehow

00:16:38,380 --> 00:16:41,860
when you're running your app you need to

00:16:39,700 --> 00:16:43,270
be able to switch between the or

00:16:41,860 --> 00:16:44,920
debugging your app developing your own

00:16:43,270 --> 00:16:48,160
needs to switch between the storybook

00:16:44,920 --> 00:16:51,160
view of it and the real app view of it

00:16:48,160 --> 00:16:53,730
and that can be a bit fiddly there are a

00:16:51,160 --> 00:16:56,050
number of different ways of doing it

00:16:53,730 --> 00:16:58,089
we're using some environment variables

00:16:56,050 --> 00:17:00,250
in in the real app that I'm working on

00:16:58,089 --> 00:17:06,490
I've used a slightly different approach

00:17:00,250 --> 00:17:08,319
in the demo tonight so this is the the

00:17:06,490 --> 00:17:13,059
view that I was showing you earlier

00:17:08,319 --> 00:17:15,459
right so try so this is the Snow who is

00:17:13,059 --> 00:17:18,459
seeing earlier so you can see these

00:17:15,459 --> 00:17:24,400
translate directly over into this one so

00:17:18,459 --> 00:17:28,750
here's the style that guy different ones

00:17:24,400 --> 00:17:32,020
so there's that so it's quite quite

00:17:28,750 --> 00:17:33,640
convenient and of course what you're

00:17:32,020 --> 00:17:35,230
what you're doing behind the scenes is

00:17:33,640 --> 00:17:36,940
you're working on these components

00:17:35,230 --> 00:17:39,550
you're reloading them you're testing and

00:17:36,940 --> 00:17:41,790
making sure they appear right they look

00:17:39,550 --> 00:17:41,790
right

00:17:42,220 --> 00:17:51,520
and everything's good so then if we have

00:17:47,049 --> 00:17:54,220
a look at the server so now if we change

00:17:51,520 --> 00:17:57,520
over here you'll notice that it's

00:17:54,220 --> 00:18:01,720
updating on the on the screen which is

00:17:57,520 --> 00:18:04,600
cool bringing up the whole card thus

00:18:01,720 --> 00:18:06,730
looking good so we've also got a

00:18:04,600 --> 00:18:09,419
character list component which have

00:18:06,730 --> 00:18:14,260
broken down in a very similar way items

00:18:09,419 --> 00:18:16,210
components now here's a so imagine that

00:18:14,260 --> 00:18:18,940
this list was being loaded from a server

00:18:16,210 --> 00:18:21,190
which would be fairly typical whilst

00:18:18,940 --> 00:18:23,230
that's loading you might want to present

00:18:21,190 --> 00:18:26,799
a slightly different view so this is the

00:18:23,230 --> 00:18:29,440
list view the character list view in its

00:18:26,799 --> 00:18:32,169
loading States then you've got the

00:18:29,440 --> 00:18:34,510
character list view maybe if it comes

00:18:32,169 --> 00:18:37,480
back with no answers for some reason or

00:18:34,510 --> 00:18:39,850
other and then the character list view

00:18:37,480 --> 00:18:43,360
of when it's returned a couple of

00:18:39,850 --> 00:18:48,280
different data items so you can within

00:18:43,360 --> 00:18:50,470
story boat compose ever sort of build up

00:18:48,280 --> 00:18:52,270
your components into more and more

00:18:50,470 --> 00:18:55,600
sophisticated components layered on top

00:18:52,270 --> 00:18:59,320
of each other so clearly the the data of

00:18:55,600 --> 00:19:01,720
the whole card item over here is built

00:18:59,320 --> 00:19:03,010
out of those lower-level components so

00:19:01,720 --> 00:19:05,530
it's sort of breaking it down and then

00:19:03,010 --> 00:19:08,200
building up and you can test each of

00:19:05,530 --> 00:19:11,230
these visually develop them get the

00:19:08,200 --> 00:19:14,650
styling right get all your meeting all

00:19:11,230 --> 00:19:20,320
your design requirements and try it out

00:19:14,650 --> 00:19:22,690
on different sides bones and indeed try

00:19:20,320 --> 00:19:24,820
it out on the other platform as well so

00:19:22,690 --> 00:19:30,250
I'll show you it running on Android in a

00:19:24,820 --> 00:19:35,640
moment hopefully so what I was saying

00:19:30,250 --> 00:19:38,909
about the clicking thing is we've got in

00:19:35,640 --> 00:19:38,909
nastya again

00:19:39,150 --> 00:19:47,670
in this test here we've got an action

00:19:45,010 --> 00:19:52,300
we're using the action add-on for

00:19:47,670 --> 00:19:55,480
storybook which says when rather than

00:19:52,300 --> 00:19:59,170
this is an event handler so when this

00:19:55,480 --> 00:20:04,420
action is invoked hmm then this is

00:19:59,170 --> 00:20:09,220
called zoom vs code right I shall do

00:20:04,420 --> 00:20:14,770
that wrong way can you see that a bit

00:20:09,220 --> 00:20:17,830
better cool so here we've got an action

00:20:14,770 --> 00:20:20,710
of press so when I click on one of these

00:20:17,830 --> 00:20:22,710
items we should see the item that I've

00:20:20,710 --> 00:20:28,210
clicked on up here

00:20:22,710 --> 00:20:30,040
there we go so press object and you can

00:20:28,210 --> 00:20:32,740
drill down into the object that's been

00:20:30,040 --> 00:20:38,070
passed so this is an object with a

00:20:32,740 --> 00:20:41,230
property named sleepy images there is a

00:20:38,070 --> 00:20:43,120
include of that and then the list of the

00:20:41,230 --> 00:20:47,080
traits that are that this guy's returned

00:20:43,120 --> 00:20:50,590
as well so cuteness and so on so it's a

00:20:47,080 --> 00:20:53,920
really nice way of making sure that the

00:20:50,590 --> 00:20:56,770
right data has been passed to your event

00:20:53,920 --> 00:21:05,620
handlers and propagated back up through

00:20:56,770 --> 00:21:08,530
the app so if I also show you may just

00:21:05,620 --> 00:21:13,660
come out for a moment somewhere hiding

00:21:08,530 --> 00:21:16,540
over here hopefully is Android so this

00:21:13,660 --> 00:21:23,110
is exactly the same thing running this

00:21:16,540 --> 00:21:24,460
time on on Android so you'll see it it's

00:21:23,110 --> 00:21:26,080
the same as meant to be that's really

00:21:24,460 --> 00:21:28,360
cool but that's kind of one of the cool

00:21:26,080 --> 00:21:31,660
benefits of react native it allows you

00:21:28,360 --> 00:21:34,180
to do the same

00:21:31,660 --> 00:21:37,720
now I haven't spent any time trying to

00:21:34,180 --> 00:21:39,220
optimize the this layout for different

00:21:37,720 --> 00:21:40,750
screen sizes and so on but that's

00:21:39,220 --> 00:21:43,450
exactly the kind of process that you

00:21:40,750 --> 00:21:45,460
typically go through and the storybook

00:21:43,450 --> 00:21:48,440
provides a really quick and easy way of

00:21:45,460 --> 00:21:50,450
just focusing on one component at a time

00:21:48,440 --> 00:21:52,250
getting the styling for that right going

00:21:50,450 --> 00:21:57,920
through all the different screen sizes

00:21:52,250 --> 00:22:00,430
phone sizes phone platforms and so on so

00:21:57,920 --> 00:22:00,430
that's kind of cool

00:22:00,970 --> 00:22:07,820
one of the questions we were talking

00:22:05,240 --> 00:22:10,640
about earlier was testing now each of

00:22:07,820 --> 00:22:14,030
these is kind of a kind of a visual test

00:22:10,640 --> 00:22:19,100
case and although you worked it to

00:22:14,030 --> 00:22:23,560
develop the code what I'd started doing

00:22:19,100 --> 00:22:26,750
was writing jest snapshot tests to

00:22:23,560 --> 00:22:30,590
render each one of these basically

00:22:26,750 --> 00:22:34,070
creating a test that would create this

00:22:30,590 --> 00:22:38,090
component render it to JSON to create a

00:22:34,070 --> 00:22:39,860
snapshot and compare the snapshots but

00:22:38,090 --> 00:22:42,200
then I ended up doing that for like

00:22:39,860 --> 00:22:44,690
every component I was a bit of a fiddle

00:22:42,200 --> 00:22:47,990
then I discovered the magic of story

00:22:44,690 --> 00:22:52,870
shots anyone used story shots special

00:22:47,990 --> 00:22:57,680
story shots makes it super simple to

00:22:52,870 --> 00:23:00,800
literally turn your all of your

00:22:57,680 --> 00:23:02,990
storybook stories into jest snapshot

00:23:00,800 --> 00:23:05,420
tests so you can do structural testing

00:23:02,990 --> 00:23:11,360
on the output of your thing and it's

00:23:05,420 --> 00:23:21,560
literally that simple right so if I now

00:23:11,360 --> 00:23:24,620
go to the terminal and run test you

00:23:21,560 --> 00:23:28,130
should see it basically running through

00:23:24,620 --> 00:23:34,610
all of these stories one at a time ooh

00:23:28,130 --> 00:23:36,470
one failed I wonder why it's failed to

00:23:34,610 --> 00:23:40,310
be because I've changed the names I've

00:23:36,470 --> 00:23:44,090
changed some colors since my last since

00:23:40,310 --> 00:23:47,480
the last time a running thing so that's

00:23:44,090 --> 00:23:49,640
okay you can reset the snapshots and run

00:23:47,480 --> 00:23:51,940
it again and you job done so you check

00:23:49,640 --> 00:23:55,190
your snapshots in to get or whatever and

00:23:51,940 --> 00:23:56,630
next time you run so that's it so this

00:23:55,190 --> 00:23:58,850
this provides what they call structural

00:23:56,630 --> 00:24:00,890
testing so it's rendered in JSON

00:23:58,850 --> 00:24:02,480
describing the components in the output

00:24:00,890 --> 00:24:04,610
so you see that's a review

00:24:02,480 --> 00:24:09,610
hierarchies and the properties built up

00:24:04,610 --> 00:24:12,230
there and that's that's a kind of quite

00:24:09,610 --> 00:24:14,809
it's not providing any interactivity

00:24:12,230 --> 00:24:17,690
it's not providing any sort of state

00:24:14,809 --> 00:24:20,540
management or changes but it is quite a

00:24:17,690 --> 00:24:23,290
handy way of checking that you haven't

00:24:20,540 --> 00:24:25,160
broken anything styling wise or and

00:24:23,290 --> 00:24:27,080
basically your components are still

00:24:25,160 --> 00:24:29,059
rendering as expected so when the tests

00:24:27,080 --> 00:24:31,220
fail you can obviously go back have a

00:24:29,059 --> 00:24:33,740
look visually inspect to make sure you

00:24:31,220 --> 00:24:36,440
understood that the change was expected

00:24:33,740 --> 00:24:38,570
as you wanted update the snapshots and

00:24:36,440 --> 00:24:39,290
you're good to go again so my

00:24:38,570 --> 00:24:41,870
compressions

00:24:39,290 --> 00:24:45,830
so we've got to the end towards the end

00:24:41,870 --> 00:24:49,250
I think it's true to say I've I really

00:24:45,830 --> 00:24:51,590
quite like typescript coming from a sort

00:24:49,250 --> 00:24:52,250
of strongly typed background it feels

00:24:51,590 --> 00:24:55,910
familiar

00:24:52,250 --> 00:24:59,330
it feels capable it feels modern and I

00:24:55,910 --> 00:25:00,410
feel quite at home in tight script as I

00:24:59,330 --> 00:25:02,419
alluded to earlier

00:25:00,410 --> 00:25:04,669
I really really hate react native

00:25:02,419 --> 00:25:06,799
upgrades and things go out of date so

00:25:04,669 --> 00:25:12,860
quickly that it's something that happens

00:25:06,799 --> 00:25:16,460
quite a lot there still so we're on

00:25:12,860 --> 00:25:17,840
version 59 or 0.9 point five nine when

00:25:16,460 --> 00:25:20,090
they'll ever get to version one point

00:25:17,840 --> 00:25:26,390
north of react native who knows but

00:25:20,090 --> 00:25:29,809
please let it be soon getting a truly

00:25:26,390 --> 00:25:34,520
native experience is difficult if not

00:25:29,809 --> 00:25:36,350
impossible in some situations react

00:25:34,520 --> 00:25:38,299
native should get better with the Ryoka

00:25:36,350 --> 00:25:40,250
tech team they're doing to allow

00:25:38,299 --> 00:25:42,799
synchronous calls across everything's

00:25:40,250 --> 00:25:46,370
bridged at the moment through to native

00:25:42,799 --> 00:25:48,410
land serialized and deserialized across

00:25:46,370 --> 00:25:49,940
the bridge and that makes doing some

00:25:48,410 --> 00:25:52,070
things particularly things like

00:25:49,940 --> 00:25:55,970
animation and high high performance

00:25:52,070 --> 00:25:58,820
rendering very difficult if not just not

00:25:55,970 --> 00:26:02,780
practical really that should be better

00:25:58,820 --> 00:26:04,390
once it's updated but we who note that

00:26:02,780 --> 00:26:09,020
remains to be seen

00:26:04,390 --> 00:26:11,830
flutter has just released their 1.0

00:26:09,020 --> 00:26:15,020
version which is google's cross-platform

00:26:11,830 --> 00:26:18,470
mobile app development framework

00:26:15,020 --> 00:26:21,200
which looks really quite cool it's much

00:26:18,470 --> 00:26:24,980
much better for animations than react

00:26:21,200 --> 00:26:28,760
native is at the moment but it's still

00:26:24,980 --> 00:26:31,210
early days but quite interesting to keep

00:26:28,760 --> 00:26:34,070
keep an eye on I think

00:26:31,210 --> 00:26:39,070
storybooks been really useful and it's

00:26:34,070 --> 00:26:41,720
definitely a good friend of mine now it

00:26:39,070 --> 00:26:43,760
encourages thinking carefully about your

00:26:41,720 --> 00:26:48,679
components how which ones you want to

00:26:43,760 --> 00:26:50,750
reuse separating state and all all of

00:26:48,679 --> 00:26:54,130
the good principles of design really so

00:26:50,750 --> 00:26:56,330
I think it's quite good as I've seen

00:26:54,130 --> 00:26:58,340
we've managed to automate some

00:26:56,330 --> 00:27:00,350
structural testing this story shots

00:26:58,340 --> 00:27:01,970
which is great my code coverage went

00:27:00,350 --> 00:27:03,590
through the roof once I added story

00:27:01,970 --> 00:27:08,770
shots for zero effort which was

00:27:03,590 --> 00:27:10,850
wonderful but we have seen some problems

00:27:08,770 --> 00:27:12,740
specifically some of the views we're

00:27:10,850 --> 00:27:14,390
rendering a kind of graphs financial

00:27:12,740 --> 00:27:18,770
performance graphs and pie charts and

00:27:14,390 --> 00:27:22,730
stuff with SVG and when you render a

00:27:18,770 --> 00:27:25,220
component like that to a snapshot all of

00:27:22,730 --> 00:27:29,179
the the floating-point numbers that make

00:27:25,220 --> 00:27:31,820
up the SVG paths are very very long and

00:27:29,179 --> 00:27:35,420
you just need one digit to be slightly

00:27:31,820 --> 00:27:37,010
differ and your test fails and actually

00:27:35,420 --> 00:27:40,280
we've seen a difference between running

00:27:37,010 --> 00:27:44,720
the tests on Mac environment versus our

00:27:40,280 --> 00:27:48,950
CI environment on Linux so for really

00:27:44,720 --> 00:27:53,600
complex scenes maybe it's not the best

00:27:48,950 --> 00:27:57,110
answer haven't delved into what a good

00:27:53,600 --> 00:27:58,700
solution to that might be yet but for

00:27:57,110 --> 00:28:00,230
the simple components like we were

00:27:58,700 --> 00:28:02,179
looking at earlier actually it's it's

00:28:00,230 --> 00:28:06,080
pretty good those things are quite

00:28:02,179 --> 00:28:08,990
reliable as I say we haven't really

00:28:06,080 --> 00:28:12,679
delved into automated and interactive UI

00:28:08,990 --> 00:28:16,400
testing I think one of the things we

00:28:12,679 --> 00:28:19,910
could do is to look at using X codes or

00:28:16,400 --> 00:28:22,580
the iOS is UI testing framework and

00:28:19,910 --> 00:28:24,050
trying to push events down into react

00:28:22,580 --> 00:28:25,790
native

00:28:24,050 --> 00:28:28,070
components with that all of the

00:28:25,790 --> 00:28:30,620
components support the test ID which

00:28:28,070 --> 00:28:33,680
allows you to in theory gain access

00:28:30,620 --> 00:28:37,070
don't know if that's going to work yet

00:28:33,680 --> 00:28:38,900
and I do still love Swift so maybe one

00:28:37,070 --> 00:28:39,830
day we'll get back to that so thanks

00:28:38,900 --> 00:28:47,450
very much

00:28:39,830 --> 00:28:50,660
any questions how do you deal with more

00:28:47,450 --> 00:28:52,610
complex state management and injecting

00:28:50,660 --> 00:28:57,650
different state into your components

00:28:52,610 --> 00:29:00,140
it's really hard so if your component

00:28:57,650 --> 00:29:02,480
isn't built to have state injected into

00:29:00,140 --> 00:29:04,640
it you're screwed you can't I mean so

00:29:02,480 --> 00:29:07,430
you either have to expose some way of

00:29:04,640 --> 00:29:09,410
injecting state into it or accept the

00:29:07,430 --> 00:29:13,220
fact that you can't test it in that way

00:29:09,410 --> 00:29:15,200
so you can within when you're running

00:29:13,220 --> 00:29:16,880
storybook you can have a stateful

00:29:15,200 --> 00:29:18,350
component and you can play around with

00:29:16,880 --> 00:29:20,180
it so I've build components that you

00:29:18,350 --> 00:29:21,890
know do switches that have animated

00:29:20,180 --> 00:29:24,860
little things going around the place and

00:29:21,890 --> 00:29:27,110
so you can do stateful component

00:29:24,860 --> 00:29:29,300
development in storybook but actually

00:29:27,110 --> 00:29:31,660
doing the automated testing of it not so

00:29:29,300 --> 00:29:31,660
easy

00:29:34,000 --> 00:29:42,550
don't put in an existing react native

00:29:36,400 --> 00:29:45,160
that I think that you can add story so

00:29:42,550 --> 00:29:46,600
adding storybook is quite quite

00:29:45,160 --> 00:29:48,970
straightforward there's quite a lot of

00:29:46,600 --> 00:29:51,940
boilerplate code to just get it

00:29:48,970 --> 00:29:54,100
don't dropped into your project but once

00:29:51,940 --> 00:29:56,710
you're there you can build up as many or

00:29:54,100 --> 00:29:59,590
as few stories as you want so you could

00:29:56,710 --> 00:30:02,740
incrementally build up stories that you

00:29:59,590 --> 00:30:05,260
know test your key components as you go

00:30:02,740 --> 00:30:08,050
and just add more tests it's like it's

00:30:05,260 --> 00:30:10,120
like any retrospectively adding tests do

00:30:08,050 --> 00:30:12,340
anything but unit tests or story book

00:30:10,120 --> 00:30:14,050
tests is sort of if you don't do it at

00:30:12,340 --> 00:30:16,810
the time sometimes you never quite get

00:30:14,050 --> 00:30:18,970
around to it but so I would kind of

00:30:16,810 --> 00:30:21,250
encourage you to do it the other way

00:30:18,970 --> 00:30:23,080
around but it if possible but if you do

00:30:21,250 --> 00:30:25,420
have a code basis already got stuff that

00:30:23,080 --> 00:30:31,360
you want to add test do is perfectly

00:30:25,420 --> 00:30:33,460
possible to incrementally add tests of

00:30:31,360 --> 00:30:36,100
the software design process or the

00:30:33,460 --> 00:30:38,080
visual design process or both visual

00:30:36,100 --> 00:30:41,740
design process so the visual design

00:30:38,080 --> 00:30:44,980
process actually at the moment where

00:30:41,740 --> 00:30:48,460
we're a small teeny-weeny company we

00:30:44,980 --> 00:30:53,740
don't have a very sophisticated design

00:30:48,460 --> 00:30:55,930
process but in the sense that we haven't

00:30:53,740 --> 00:30:58,720
built up a rich component library

00:30:55,930 --> 00:30:59,890
ourselves yet so this was kind of where

00:30:58,720 --> 00:31:01,930
we're trying to get to we're trying to

00:30:59,890 --> 00:31:03,550
establish a set of components that we

00:31:01,930 --> 00:31:07,210
can reuse and have a consistent

00:31:03,550 --> 00:31:09,400
appearance across the app so hopefully

00:31:07,210 --> 00:31:12,850
once what actually one thing that story

00:31:09,400 --> 00:31:15,400
but could do is allow us to present that

00:31:12,850 --> 00:31:18,640
component library that we've built to

00:31:15,400 --> 00:31:21,370
the designers to say okay now this looks

00:31:18,640 --> 00:31:23,230
like this try and make other things

00:31:21,370 --> 00:31:25,630
consistent with it sort of it's a

00:31:23,230 --> 00:31:27,880
feedback loop I guess of this is the ad

00:31:25,630 --> 00:31:31,650
say here's your designs here's as built

00:31:27,880 --> 00:31:34,120
now we can sort of either iterate mine

00:31:31,650 --> 00:31:36,100
build closer to your designs or your

00:31:34,120 --> 00:31:37,780
designs can sort of start pulling into

00:31:36,100 --> 00:31:40,510
if the has built or there's obviously a

00:31:37,780 --> 00:31:44,470
bit of both so I think the answer to

00:31:40,510 --> 00:31:46,600
your question is early days not quite

00:31:44,470 --> 00:31:51,900
sure yet

00:31:46,600 --> 00:31:51,900

YouTube URL: https://www.youtube.com/watch?v=1TlNgsIAWSE


