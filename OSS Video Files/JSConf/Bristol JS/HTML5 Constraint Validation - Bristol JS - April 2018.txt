Title: HTML5 Constraint Validation - Bristol JS - April 2018
Publication date: 2018-05-11
Playlist: Bristol JS
Description: 
	HTML5 Constraint Validation - Lightning Talk - Drew McLellan
Captions: 
	00:00:00,030 --> 00:00:07,859
so this is all based on the premise the

00:00:04,950 --> 00:00:09,929
forms are hard if you're building any

00:00:07,859 --> 00:00:12,450
sort of interface that involves forms

00:00:09,929 --> 00:00:14,219
it's always going to be a little bit of

00:00:12,450 --> 00:00:16,080
a nightmare they're hard work you're

00:00:14,219 --> 00:00:20,070
dealing with input from users that's

00:00:16,080 --> 00:00:24,000
always horrible and there's the whole

00:00:20,070 --> 00:00:25,769
thing about validation around gathering

00:00:24,000 --> 00:00:27,300
data make sure you get accurate data

00:00:25,769 --> 00:00:30,810
making sure you get the right types of

00:00:27,300 --> 00:00:34,079
data in through forms so it just forms a

00:00:30,810 --> 00:00:35,760
doorway thorny and hard and the other

00:00:34,079 --> 00:00:36,570
premise here is that you're lazy in your

00:00:35,760 --> 00:00:40,710
code sucks

00:00:36,570 --> 00:00:43,230
so if you've got a right validation code

00:00:40,710 --> 00:00:45,570
for form input well firstly you don't

00:00:43,230 --> 00:00:48,930
really want to do that tool I mean who

00:00:45,570 --> 00:00:52,110
wants to write validation code but also

00:00:48,930 --> 00:00:53,670
you're going to be thinking about doing

00:00:52,110 --> 00:00:55,710
the least work possible so you can get

00:00:53,670 --> 00:00:57,960
past writing this wretched form

00:00:55,710 --> 00:00:59,760
validation code and get on to the next

00:00:57,960 --> 00:01:02,129
thing which is far more interesting so

00:00:59,760 --> 00:01:05,309
you tend to think about you know or if

00:01:02,129 --> 00:01:08,400
I'm validating a number Psalm I'll make

00:01:05,309 --> 00:01:09,930
sure it's like between 0 and 9 and then

00:01:08,400 --> 00:01:12,210
you might not think about ok what if

00:01:09,930 --> 00:01:15,720
somebody in different locale puts a

00:01:12,210 --> 00:01:18,030
comma instead of a full-stop as a

00:01:15,720 --> 00:01:20,970
decimal marker or what if somebody puts

00:01:18,030 --> 00:01:23,130
a number in in scientific notation with

00:01:20,970 --> 00:01:24,659
an e in it and all you know these sort

00:01:23,130 --> 00:01:27,600
of thing you're not necessarily going to

00:01:24,659 --> 00:01:30,150
have that whole overview of of well

00:01:27,600 --> 00:01:32,189
tested well proven code and say think

00:01:30,150 --> 00:01:34,200
okay well I'm lazy instead of writing

00:01:32,189 --> 00:01:36,450
all this I'll import some giant

00:01:34,200 --> 00:01:39,090
JavaScript library that's going to do

00:01:36,450 --> 00:01:41,630
this for me and of course then you

00:01:39,090 --> 00:01:44,939
possibly in to the opposite extreme of

00:01:41,630 --> 00:01:47,250
kilobytes and kilobytes of code of this

00:01:44,939 --> 00:01:49,619
other people of R in there how all has

00:01:47,250 --> 00:01:52,140
to be downloaded and does all this job

00:01:49,619 --> 00:01:56,130
for you so then your performance is

00:01:52,140 --> 00:02:05,040
suffering and good news is browsers are

00:01:56,130 --> 00:02:06,869
here to save us ray so obviously users

00:02:05,040 --> 00:02:10,050
enter weird stuff that you're not

00:02:06,869 --> 00:02:12,090
expecting into form fields and that

00:02:10,050 --> 00:02:13,740
input needs to be validated because we

00:02:12,090 --> 00:02:16,020
don't know what it's going to be

00:02:13,740 --> 00:02:17,370
if you're dealing with a server in your

00:02:16,020 --> 00:02:19,050
application you're probably going to

00:02:17,370 --> 00:02:21,120
validate that stuff on the server as

00:02:19,050 --> 00:02:22,620
well but we're not always dealing with a

00:02:21,120 --> 00:02:24,990
service sometimes we might just be using

00:02:22,620 --> 00:02:26,520
that in the browser and from terms of

00:02:24,990 --> 00:02:28,380
user experience it's always good to try

00:02:26,520 --> 00:02:30,270
and validate stuff in the browser before

00:02:28,380 --> 00:02:34,470
it's sent anywhere because it's quicker

00:02:30,270 --> 00:02:36,180
quicker to correct mistakes and you know

00:02:34,470 --> 00:02:37,560
it's the whole user experience is

00:02:36,180 --> 00:02:39,810
improved if we can do things in the

00:02:37,560 --> 00:02:42,180
browser first but we're lazy in our code

00:02:39,810 --> 00:02:44,010
sucks so browsers have come to our

00:02:42,180 --> 00:02:46,410
rescue html5 introduced built-in

00:02:44,010 --> 00:02:50,100
validation into forms now hopefully

00:02:46,410 --> 00:02:53,310
you'll know about this stuff in that in

00:02:50,100 --> 00:02:54,990
your plain old HTML with an input you

00:02:53,310 --> 00:02:57,060
can output a required boolean attribute

00:02:54,990 --> 00:02:58,890
and the browser will we'll check that

00:02:57,060 --> 00:03:03,480
for you everyone really familiar with

00:02:58,890 --> 00:03:04,560
that hopefully so if you've got a form

00:03:03,480 --> 00:03:06,780
and the use of putting some information

00:03:04,560 --> 00:03:08,790
in if you've told me it's in the HTML

00:03:06,780 --> 00:03:10,380
but it's a required field they try to

00:03:08,790 --> 00:03:13,500
submit and the browser will put out a

00:03:10,380 --> 00:03:16,920
really ugly bit of interfaces please

00:03:13,500 --> 00:03:18,420
fill out this field it goes one step

00:03:16,920 --> 00:03:19,710
further than that well it goes many

00:03:18,420 --> 00:03:22,320
steps further than that but the next

00:03:19,710 --> 00:03:25,860
step on is that html5 introduced more

00:03:22,320 --> 00:03:28,140
types of field so we've got things here

00:03:25,860 --> 00:03:29,820
like type equals email so rather than

00:03:28,140 --> 00:03:30,900
just using a text box like we used to to

00:03:29,820 --> 00:03:32,250
collect or something like an email

00:03:30,900 --> 00:03:35,490
address we've got a specific field for

00:03:32,250 --> 00:03:37,950
that and the great thing about using all

00:03:35,490 --> 00:03:40,730
these different types of field is that

00:03:37,950 --> 00:03:43,980
then the browser can do things like

00:03:40,730 --> 00:03:46,290
present an email specific keyboard for

00:03:43,980 --> 00:03:48,660
an email field and what this is doing in

00:03:46,290 --> 00:03:51,680
terms of validation is this help helping

00:03:48,660 --> 00:03:54,120
you capture valid data to begin with

00:03:51,680 --> 00:03:55,770
rather than waiting fuser to put

00:03:54,120 --> 00:03:57,900
something in and then checking it and

00:03:55,770 --> 00:04:00,840
telling them it's wrong the browser can

00:03:57,900 --> 00:04:03,840
can mold itself to make sure that it's

00:04:00,840 --> 00:04:05,340
gathering good data to begin with so the

00:04:03,840 --> 00:04:07,530
built-in validation it can do things

00:04:05,340 --> 00:04:10,260
like obviously enforce required fields

00:04:07,530 --> 00:04:12,630
it can prevent mistakes by putting

00:04:10,260 --> 00:04:15,930
custom UI to gather the right sort of

00:04:12,630 --> 00:04:19,980
data it can validate the the format of

00:04:15,930 --> 00:04:21,549
common types email URL number those

00:04:19,980 --> 00:04:23,620
sorts of things

00:04:21,549 --> 00:04:25,479
and you can customize it you can put in

00:04:23,620 --> 00:04:28,449
reg X patterns so if you're trying to

00:04:25,479 --> 00:04:30,340
collect data for something like I don't

00:04:28,449 --> 00:04:33,580
know a car number plate which has got a

00:04:30,340 --> 00:04:35,650
fixed format you can write a quick reg X

00:04:33,580 --> 00:04:39,370
put it in the pattern attribute and that

00:04:35,650 --> 00:04:40,810
would be checked as you go and how many

00:04:39,370 --> 00:04:47,710
people knew you could style things with

00:04:40,810 --> 00:04:50,650
CSS based on the validation some so here

00:04:47,710 --> 00:04:53,520
we can say input valid and input invalid

00:04:50,650 --> 00:04:55,960
and give them different styling based on

00:04:53,520 --> 00:04:59,080
the browser's assessment of the

00:04:55,960 --> 00:05:00,460
validation of those fields so here if

00:04:59,080 --> 00:05:02,680
it's invalid we're giving it a red

00:05:00,460 --> 00:05:04,960
border there's a few different things

00:05:02,680 --> 00:05:07,300
you can test for these CSS pseudo

00:05:04,960 --> 00:05:10,000
classes valid invalid in range and out

00:05:07,300 --> 00:05:11,710
of range required an optional or all

00:05:10,000 --> 00:05:14,169
states that you can test for in your CSS

00:05:11,710 --> 00:05:17,229
based on the user input and those change

00:05:14,169 --> 00:05:18,520
dynamically as people fill out forms so

00:05:17,229 --> 00:05:20,740
you can have your form fields just

00:05:18,520 --> 00:05:23,530
automatically turn red if they have

00:05:20,740 --> 00:05:26,349
invalid input just for CSS no no

00:05:23,530 --> 00:05:28,270
JavaScript required so the situation I

00:05:26,349 --> 00:05:30,460
came across okay was a little bit more

00:05:28,270 --> 00:05:32,349
complex than this though that's the sort

00:05:30,460 --> 00:05:34,719
of basics of what browsers and HTML and

00:05:32,349 --> 00:05:37,780
CSS can do I was building this interface

00:05:34,719 --> 00:05:40,870
that I was presenting a form to the user

00:05:37,780 --> 00:05:42,340
but the entire form wasn't on screen the

00:05:40,870 --> 00:05:45,130
whole time it was like a multi-step

00:05:42,340 --> 00:05:47,770
thing so I had my first state of the

00:05:45,130 --> 00:05:49,060
form here I was asking for something

00:05:47,770 --> 00:05:51,789
like an email address and that's a

00:05:49,060 --> 00:05:53,440
required field so what was happening is

00:05:51,789 --> 00:05:57,400
that maybe the user didn't fill that out

00:05:53,440 --> 00:06:00,639
hit next get the next state of the form

00:05:57,400 --> 00:06:03,610
fill out there that's that stuff or not

00:06:00,639 --> 00:06:06,699
and then go to submit it now what should

00:06:03,610 --> 00:06:09,750
happen here with the the browser's

00:06:06,699 --> 00:06:12,729
validation is it would normally show a

00:06:09,750 --> 00:06:15,460
you need to fill out this foot this this

00:06:12,729 --> 00:06:16,599
field dialogue on top of the field but

00:06:15,460 --> 00:06:20,830
the field that's required and wasn't

00:06:16,599 --> 00:06:23,409
filled in isn't on screen anymore and so

00:06:20,830 --> 00:06:25,300
the user submits and what the donor

00:06:23,409 --> 00:06:26,199
feels familiar with this scenario but

00:06:25,300 --> 00:06:27,909
the browser just like

00:06:26,199 --> 00:06:29,800
spits out an error into the console

00:06:27,909 --> 00:06:32,560
saying oh I can't validate this because

00:06:29,800 --> 00:06:34,839
the things not on so what do you do I

00:06:32,560 --> 00:06:35,450
think an awful lot of people get to this

00:06:34,839 --> 00:06:37,940
point

00:06:35,450 --> 00:06:40,910
think ah this built-in validations

00:06:37,940 --> 00:06:43,520
absolutely rubbish what I'm gonna do is

00:06:40,910 --> 00:06:44,240
turn it off and we've got a great way to

00:06:43,520 --> 00:06:48,410
turn it off

00:06:44,240 --> 00:06:49,400
no validate so you know this is a pain

00:06:48,410 --> 00:06:51,140
it's ugly

00:06:49,400 --> 00:06:52,730
it's not doing what I won it's getting

00:06:51,140 --> 00:06:54,770
in the way I'm just going to turn it off

00:06:52,730 --> 00:06:58,850
and go back to how we used to do things

00:06:54,770 --> 00:07:00,320
in the 90s so what you would do to do

00:06:58,850 --> 00:07:02,540
that is you would put the no validate

00:07:00,320 --> 00:07:05,840
attribute on the form and that will just

00:07:02,540 --> 00:07:08,050
stop those validation their browsers

00:07:05,840 --> 00:07:10,960
validation running on that form entirely

00:07:08,050 --> 00:07:13,580
so it's very tempting to do that

00:07:10,960 --> 00:07:14,840
unfortunately you'd lose an awful lot of

00:07:13,580 --> 00:07:17,510
functionality of you are lawyers getting

00:07:14,840 --> 00:07:18,470
for free if you turn it off and then

00:07:17,510 --> 00:07:20,150
you've got to implement it yourself

00:07:18,470 --> 00:07:23,690
you're back to downloading massive

00:07:20,150 --> 00:07:25,190
libraries and all that of course we're

00:07:23,690 --> 00:07:26,330
lazy in our code sucks who don't really

00:07:25,190 --> 00:07:28,640
want to do that so it's better to

00:07:26,330 --> 00:07:32,180
actually work with the browser and with

00:07:28,640 --> 00:07:39,980
the browser's validation to to see how

00:07:32,180 --> 00:07:41,860
we can improve things now this is where

00:07:39,980 --> 00:07:44,210
I started learning when I was on my

00:07:41,860 --> 00:07:47,600
project all this I was completely

00:07:44,210 --> 00:07:50,300
familiar with you know I can put

00:07:47,600 --> 00:07:52,250
attributes in in my HTML the browser

00:07:50,300 --> 00:07:54,020
will take care of it with dialogues I

00:07:52,250 --> 00:07:57,770
can do bits assist that's fine what I

00:07:54,020 --> 00:08:03,980
didn't know was as a JavaScript API

00:07:57,770 --> 00:08:05,870
hooray all this foundation stuff that's

00:08:03,980 --> 00:08:11,600
in the browser we can actually get to

00:08:05,870 --> 00:08:14,270
and use with JavaScript the validation

00:08:11,600 --> 00:08:19,190
able API enables us to ascertain the

00:08:14,270 --> 00:08:20,390
validity of any field we can not only

00:08:19,190 --> 00:08:22,400
find out if it's valid or invalid

00:08:20,390 --> 00:08:24,770
according to the rules but we can find

00:08:22,400 --> 00:08:28,550
out why in what way it's failing those

00:08:24,770 --> 00:08:29,900
tests and then we can do stuff based on

00:08:28,550 --> 00:08:32,900
that we can update the interface how we

00:08:29,900 --> 00:08:36,350
want we can write the bespoke parts of

00:08:32,900 --> 00:08:38,120
our experience the bits we actually want

00:08:36,350 --> 00:08:39,500
to write and let the browser deal with

00:08:38,120 --> 00:08:41,150
working out some things a valid email

00:08:39,500 --> 00:08:42,979
address or not we haven't got to do any

00:08:41,150 --> 00:08:45,730
of that we just get told if it is or it

00:08:42,979 --> 00:08:48,830
isn't and then we can decide how our

00:08:45,730 --> 00:08:50,210
interface reacts to that and this is

00:08:48,830 --> 00:08:52,730
great

00:08:50,210 --> 00:08:56,240
we're all lazy in our code sucks how

00:08:52,730 --> 00:08:58,970
does that work say I'm just targeting a

00:08:56,240 --> 00:09:02,420
field somehow in my form putting into

00:08:58,970 --> 00:09:04,960
variable my field and you get you can

00:09:02,420 --> 00:09:08,630
get from it then what's called a

00:09:04,960 --> 00:09:12,670
validity state object which is just in

00:09:08,630 --> 00:09:15,800
the dot validity property of any field

00:09:12,670 --> 00:09:17,540
so what is this validity state object

00:09:15,800 --> 00:09:19,700
I've done I've actually said validity

00:09:17,540 --> 00:09:20,030
state out loud until just now so bear

00:09:19,700 --> 00:09:22,430
with me

00:09:20,030 --> 00:09:26,860
validity state object it's an object

00:09:22,430 --> 00:09:30,980
that has loaded billion properties on it

00:09:26,860 --> 00:09:33,980
really important one is valid so you can

00:09:30,980 --> 00:09:36,710
you can test valid or not and that tells

00:09:33,980 --> 00:09:38,420
you whether it's passing and if I mean

00:09:36,710 --> 00:09:40,700
if you test that all the fields in your

00:09:38,420 --> 00:09:42,050
form are reporting valid you know that

00:09:40,700 --> 00:09:43,340
when the user actually hit submit

00:09:42,050 --> 00:09:45,440
they're not going to see any of that

00:09:43,340 --> 00:09:47,600
browser UI they're not going to see the

00:09:45,440 --> 00:09:49,070
ugly little pop-ups on top of the fields

00:09:47,600 --> 00:09:53,030
because you've already tested it for

00:09:49,070 --> 00:09:54,530
them if valid is false then there's all

00:09:53,030 --> 00:09:57,470
sorts of other properties you can look

00:09:54,530 --> 00:10:02,570
at to see in what way is invalid so

00:09:57,470 --> 00:10:04,390
value missing is true if the if it's a

00:10:02,570 --> 00:10:07,370
required field that doesn't have a value

00:10:04,390 --> 00:10:11,500
type mismatch is used for an email or

00:10:07,370 --> 00:10:13,940
URL field that doesn't have the right

00:10:11,500 --> 00:10:17,240
isn't of the right format for that type

00:10:13,940 --> 00:10:18,770
of field to shorten to long map to the

00:10:17,240 --> 00:10:22,730
min length and max length properties

00:10:18,770 --> 00:10:24,710
that you have on some fields if you've

00:10:22,730 --> 00:10:26,960
put a custom reg X pattern in the

00:10:24,710 --> 00:10:28,850
pattern attribute on a field pattern

00:10:26,960 --> 00:10:34,580
mismatch get set to true if that's not

00:10:28,850 --> 00:10:36,740
valid bad input I don't for a number

00:10:34,580 --> 00:10:39,020
field you get bad input if it's not

00:10:36,740 --> 00:10:40,280
numeric also for number fields you've

00:10:39,020 --> 00:10:42,590
got this su familiar with a step

00:10:40,280 --> 00:10:44,720
attribute on a number field we say step

00:10:42,590 --> 00:10:47,300
equals 5 and then only increments of 5

00:10:44,720 --> 00:10:48,770
valid on that field and the browser UI

00:10:47,300 --> 00:10:51,680
usually gives up and down arrows and

00:10:48,770 --> 00:10:53,540
move in those increments so if somebody

00:10:51,680 --> 00:10:55,820
was to put have you had step equals 5

00:10:53,540 --> 00:10:58,430
and somebody put a value of 7 in that

00:10:55,820 --> 00:10:59,630
would it would fail on that ground then

00:10:58,430 --> 00:11:01,970
you've got range overflow and range

00:10:59,630 --> 00:11:02,780
under flow so you can see with the min

00:11:01,970 --> 00:11:08,030
and Max

00:11:02,780 --> 00:11:11,180
values so how do we use that use any way

00:11:08,030 --> 00:11:14,870
you like is my bit knotty JavaScript so

00:11:11,180 --> 00:11:18,860
I'm targeting an input saying when it's

00:11:14,870 --> 00:11:22,460
changed calling my field dot validity to

00:11:18,860 --> 00:11:25,490
get that validity state object and then

00:11:22,460 --> 00:11:27,590
you can just test yet is it valid is

00:11:25,490 --> 00:11:29,110
there you know is a value missing that

00:11:27,590 --> 00:11:32,540
means this required field that's empty

00:11:29,110 --> 00:11:34,280
and in this last one here the type

00:11:32,540 --> 00:11:36,980
mismatch is one that fires on like email

00:11:34,280 --> 00:11:39,890
and URL fields things so it would output

00:11:36,980 --> 00:11:42,100
a great value in email field or what

00:11:39,890 --> 00:11:44,660
have you

00:11:42,100 --> 00:11:46,850
and that's pretty much as complex as the

00:11:44,660 --> 00:11:49,280
code gets with this stuff so all that

00:11:46,850 --> 00:11:50,810
work in figuring out is something a URL

00:11:49,280 --> 00:11:52,610
is something you know does it match the

00:11:50,810 --> 00:11:54,320
pattern reg X does it do you know is it

00:11:52,610 --> 00:11:55,820
between these bounds it's all just being

00:11:54,320 --> 00:11:59,960
done for you and you just get to look at

00:11:55,820 --> 00:12:01,100
the result and see what's that so what

00:11:59,960 --> 00:12:03,410
you do with the information is

00:12:01,100 --> 00:12:05,560
completely up to you you can build those

00:12:03,410 --> 00:12:08,330
interesting parts of your interface

00:12:05,560 --> 00:12:11,480
based on that information without having

00:12:08,330 --> 00:12:14,330
to worry about the complex stuff it's an

00:12:11,480 --> 00:12:15,620
opportunity to customize the the UI so

00:12:14,330 --> 00:12:19,190
if you don't want users seeing those

00:12:15,620 --> 00:12:21,560
horrible balloons that appear over stuff

00:12:19,190 --> 00:12:23,630
well you can step in in front of them

00:12:21,560 --> 00:12:25,940
make sure they never appear by putting

00:12:23,630 --> 00:12:28,250
your own interface in first which is

00:12:25,940 --> 00:12:32,300
good because the interface the UK's ogly

00:12:28,250 --> 00:12:35,300
so how would I update my example so if i

00:12:32,300 --> 00:12:36,200
was using this i'd have this first day

00:12:35,300 --> 00:12:37,880
of the forum where i've got that email

00:12:36,200 --> 00:12:39,290
field that's required if the user didn't

00:12:37,880 --> 00:12:39,920
put in a thing in a email field and hit

00:12:39,290 --> 00:12:42,350
next

00:12:39,920 --> 00:12:45,200
well i can now test for that before i

00:12:42,350 --> 00:12:47,270
move on to the next state get the user

00:12:45,200 --> 00:12:50,150
to fill in their data and then when they

00:12:47,270 --> 00:12:51,530
hit next after that i can see that okay

00:12:50,150 --> 00:12:54,440
that's valid i can move on to my next

00:12:51,530 --> 00:12:59,120
state and then when they finally submit

00:12:54,440 --> 00:13:02,600
the form everything's okay and they

00:12:59,120 --> 00:13:04,970
don't have to endure nasty browser

00:13:02,600 --> 00:13:08,450
interface quite simply I think it's

00:13:04,970 --> 00:13:10,820
brilliant it's it does exactly what a

00:13:08,450 --> 00:13:14,270
good API should do it takes masses of

00:13:10,820 --> 00:13:16,460
complexity and puts just a really really

00:13:14,270 --> 00:13:17,690
simple interface on it

00:13:16,460 --> 00:13:20,330
you can use within your code without

00:13:17,690 --> 00:13:21,980
caring about all the complex stuff it's

00:13:20,330 --> 00:13:23,990
there and users browsers already I'm

00:13:21,980 --> 00:13:26,200
going to download masses of of extra

00:13:23,990 --> 00:13:26,200
code

00:13:26,600 --> 00:13:32,240
it just works exactly like you think it

00:13:28,640 --> 00:13:34,730
should work the best place I found to

00:13:32,240 --> 00:13:36,590
find information on it other than going

00:13:34,730 --> 00:13:37,550
directly to the specs which that's

00:13:36,590 --> 00:13:39,830
probably the best place for information

00:13:37,550 --> 00:13:41,990
but on the most digestible form let's go

00:13:39,830 --> 00:13:43,670
to mdn and it's just search for

00:13:41,990 --> 00:13:48,440
constrain validation they've got lots of

00:13:43,670 --> 00:13:49,680
good docs on it and that's it

00:13:48,440 --> 00:13:54,059
thank you much

00:13:49,680 --> 00:13:54,059

YouTube URL: https://www.youtube.com/watch?v=56yL2ca-EEc


