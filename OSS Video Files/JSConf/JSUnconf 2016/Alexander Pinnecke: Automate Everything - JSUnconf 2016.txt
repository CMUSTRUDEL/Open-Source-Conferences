Title: Alexander Pinnecke: Automate Everything - JSUnconf 2016
Publication date: 2016-06-03
Playlist: JSUnconf 2016
Description: 
	Slides: http://apinnecke.github.io/deployment-talk/

Did you ever want to achieve super simple test cycles, deployments and serving for front- and backend projects? In this talk I'm gonna show you how this can work with tools like Docker, a CI Server and Kubernetes - and how this works out in a production/staging environment integration.

Experiences, tips, ideas, discussion. Hopefully, we can share a bit of knowledge of everyone!
Captions: 
	00:00:10,030 --> 00:00:15,650
yeah welcome everybody my name is Alex

00:00:14,180 --> 00:00:18,670
I'm going to get the talk

00:00:15,650 --> 00:00:21,529
odd from get up to production a few

00:00:18,670 --> 00:00:27,200
learnings I did implementing an old

00:00:21,529 --> 00:00:32,050
deployment process our concepts my

00:00:27,200 --> 00:00:38,480
slides are on github under this domain

00:00:32,050 --> 00:00:42,250
not very interesting okay who's the one

00:00:38,480 --> 00:00:45,760
in front I'm Alex working at adventure

00:00:42,250 --> 00:00:49,760
so you know in him work is very small

00:00:45,760 --> 00:00:52,220
company I'm front and software engineer

00:00:49,760 --> 00:00:55,610
and I'm carrying about everything

00:00:52,220 --> 00:01:01,519
regarding to develop our automation and

00:00:55,610 --> 00:01:06,650
operations Oh from originally yeah I

00:01:01,519 --> 00:01:10,340
love music and play drums okay almost

00:01:06,650 --> 00:01:14,740
two months ago very not far away i

00:01:10,340 --> 00:01:17,780
started at adventure as frontal engineer

00:01:14,740 --> 00:01:22,700
the first day i had looked at as

00:01:17,780 --> 00:01:25,910
followed well i had a project and i did

00:01:22,700 --> 00:01:28,940
some small changes committed it pushed

00:01:25,910 --> 00:01:33,650
it to get up then okay i wanted to apply

00:01:28,940 --> 00:01:37,700
to staging yeah hey guys which button

00:01:33,650 --> 00:01:40,280
arrived to press i see is more a few

00:01:37,700 --> 00:01:47,210
smiling face maybe a few of you can

00:01:40,280 --> 00:01:50,390
imagine yeah even better there's nobody

00:01:47,210 --> 00:01:56,409
but haha as this etching to the

00:01:50,390 --> 00:02:03,830
surrogate pool yeah cool and I was like

00:01:56,409 --> 00:02:08,209
sorry wrong direction you all you all

00:02:03,830 --> 00:02:11,930
know it seriously it's 2016 one does not

00:02:08,209 --> 00:02:15,319
deploy a very good call so I said okay

00:02:11,930 --> 00:02:19,220
we need to change that seriously Kenneth

00:02:15,319 --> 00:02:23,060
BAE okay to give you a little bit of

00:02:19,220 --> 00:02:24,380
background as i'm doing mainly front and

00:02:23,060 --> 00:02:27,170
I give you the

00:02:24,380 --> 00:02:31,310
project / he would kind of repositories

00:02:27,170 --> 00:02:36,440
we have first and variant important we

00:02:31,310 --> 00:02:38,780
have documentation repositories yeah we

00:02:36,440 --> 00:02:41,240
have also front and projects the regular

00:02:38,780 --> 00:02:44,000
one we did too for customers and for

00:02:41,240 --> 00:02:47,000
internal purposes and for our own

00:02:44,000 --> 00:02:49,160
startups plus we have front and

00:02:47,000 --> 00:02:52,820
libraries where are all these project

00:02:49,160 --> 00:02:54,910
depend on and obviously we have taken

00:02:52,820 --> 00:02:59,800
repositories back since this isn't

00:02:54,910 --> 00:03:04,850
JavaScript's so I keep them away sorry

00:02:59,800 --> 00:03:09,200
okay requirement what do we want to have

00:03:04,850 --> 00:03:12,080
from this from this deployment circuit

00:03:09,200 --> 00:03:14,630
yeah after pushing to get up to the

00:03:12,080 --> 00:03:17,720
branch develop as we follow the kids get

00:03:14,630 --> 00:03:25,280
flow convenience we want to have the

00:03:17,720 --> 00:03:27,470
deployment running on the CI server we

00:03:25,280 --> 00:03:31,850
want to have the tests executed

00:03:27,470 --> 00:03:34,070
obviously we want to have bumped the

00:03:31,850 --> 00:03:37,640
next semantic version to our package

00:03:34,070 --> 00:03:41,180
Jason as we are only following it flow

00:03:37,640 --> 00:03:46,280
but also following the semantic version

00:03:41,180 --> 00:03:51,140
release cycle I will have a deeper look

00:03:46,280 --> 00:03:53,570
into that later plus we want to build an

00:03:51,140 --> 00:03:56,000
automatic change lock from the last

00:03:53,570 --> 00:04:00,770
symmetric version we did till now to the

00:03:56,000 --> 00:04:03,200
latest release the next yeah fancy

00:04:00,770 --> 00:04:05,480
buzzword we want to build docker

00:04:03,200 --> 00:04:08,120
containers yeah everybody likes docker

00:04:05,480 --> 00:04:11,930
containers or having haven't even heard

00:04:08,120 --> 00:04:16,820
about it we want to push this sucker

00:04:11,930 --> 00:04:21,560
container into our repository we use

00:04:16,820 --> 00:04:23,150
scuba netas as deployment know as an

00:04:21,560 --> 00:04:29,060
serving framework for the docker

00:04:23,150 --> 00:04:30,740
containers as an infrastructure we want

00:04:29,060 --> 00:04:32,370
to push the flag because we are fancy we

00:04:30,740 --> 00:04:35,220
want to have a slack party here

00:04:32,370 --> 00:04:38,639
we have them at Donnie deployment yeah

00:04:35,220 --> 00:04:44,460
good stuff plus we want to have the

00:04:38,639 --> 00:04:46,830
sides SSH protected this isn't exactly a

00:04:44,460 --> 00:04:50,690
requirement of the deployment workflow

00:04:46,830 --> 00:05:00,500
but for the whole infrastructure setup

00:04:50,690 --> 00:05:00,500
so i added it to the list next what we

00:05:01,639 --> 00:05:10,139
what we have as as tooling set a coffee

00:05:07,320 --> 00:05:13,440
ously we have get up so we done don't

00:05:10,139 --> 00:05:15,810
need to change that we have Circle C I

00:05:13,440 --> 00:05:20,190
that was one of the first decisions I

00:05:15,810 --> 00:05:22,560
contributed in the new company as we are

00:05:20,190 --> 00:05:24,900
very deciding to use Travis CI or a

00:05:22,560 --> 00:05:26,910
circle TI and I said I've got some very

00:05:24,900 --> 00:05:29,070
good very good experiences with soccer

00:05:26,910 --> 00:05:36,740
see I regarding speed and extensibility

00:05:29,070 --> 00:05:40,229
and the possibility to to script things

00:05:36,740 --> 00:05:42,570
yeah so as circle has a free container

00:05:40,229 --> 00:05:45,110
for builds for private bills we decided

00:05:42,570 --> 00:05:49,380
to try circular and if it's not cool we

00:05:45,110 --> 00:05:50,910
can even change to the Travis so today

00:05:49,380 --> 00:05:55,139
we still stick with circle because it's

00:05:50,910 --> 00:05:59,070
cool sorry we use cout benitez but not

00:05:55,139 --> 00:06:01,530
the plane coo benitez we use google

00:05:59,070 --> 00:06:08,099
cloud platform so we use the google

00:06:01,530 --> 00:06:12,000
container engine to serve our stuff plus

00:06:08,099 --> 00:06:15,180
obviously we have Tucker and I equally

00:06:12,000 --> 00:06:21,020
asslick not infrastructure related by

00:06:15,180 --> 00:06:26,430
the school okay the first I did because

00:06:21,020 --> 00:06:28,410
no the other way aren't the first step I

00:06:26,430 --> 00:06:32,880
took was creating a deployment

00:06:28,410 --> 00:06:37,020
repository we decided to not put the

00:06:32,880 --> 00:06:39,110
whole executions the whole command into

00:06:37,020 --> 00:06:42,240
the circle Yama's or travis yours and

00:06:39,110 --> 00:06:45,870
because we want to have them one reuse

00:06:42,240 --> 00:06:47,940
all reusable and two

00:06:45,870 --> 00:06:51,720
we change them we want them to be

00:06:47,940 --> 00:06:54,630
applied to every circle Yama so in order

00:06:51,720 --> 00:06:56,730
to do that we decided to create a

00:06:54,630 --> 00:07:00,450
deployment repository where all this

00:06:56,730 --> 00:07:03,320
deploy and Peele scripts and the circle

00:07:00,450 --> 00:07:09,390
yeah modes we have they are are

00:07:03,320 --> 00:07:12,030
collected there yeah soccer yeah Mets

00:07:09,390 --> 00:07:14,970
and the deploy scripts to pushing it to

00:07:12,030 --> 00:07:18,870
cuoco Benitez or for the old projects

00:07:14,970 --> 00:07:24,720
SSH into the server and to agra pool and

00:07:18,870 --> 00:07:28,670
that's good yeah of course that isn't as

00:07:24,720 --> 00:07:33,960
easy as expected as every project so

00:07:28,670 --> 00:07:37,980
obviously there are pitfalls first we

00:07:33,960 --> 00:07:40,080
wanted to imagine automatically get the

00:07:37,980 --> 00:07:42,210
commit or the bunch of comets

00:07:40,080 --> 00:07:44,250
transitions through the gate flow

00:07:42,210 --> 00:07:49,980
workflow but there is a problem with

00:07:44,250 --> 00:07:53,430
that because sorry locally you would

00:07:49,980 --> 00:07:57,630
just do a brew install good flow adh

00:07:53,430 --> 00:08:02,040
assuming you're on Meg and this is

00:07:57,630 --> 00:08:05,790
working pretty good but it's working

00:08:02,040 --> 00:08:11,190
pretty good on OS X or locally it works

00:08:05,790 --> 00:08:13,290
on my machine hat all super fancy as we

00:08:11,190 --> 00:08:16,020
are building on ubuntu distributions on

00:08:13,290 --> 00:08:21,450
in circle you one would assume that is

00:08:16,020 --> 00:08:26,130
only a sudo apt-get install dash no cash

00:08:21,450 --> 00:08:29,010
flow yes that works but you can't

00:08:26,130 --> 00:08:33,210
execute good flow I have no idea why I

00:08:29,010 --> 00:08:37,470
wasn't able to figure out so I had to

00:08:33,210 --> 00:08:40,530
install it manually luckily the gate

00:08:37,470 --> 00:08:44,060
flow AVH repository ships with an

00:08:40,530 --> 00:08:48,270
install script but this install script

00:08:44,060 --> 00:08:53,400
wasn't that easy to use it doesn't get

00:08:48,270 --> 00:08:56,190
clone and from serious reasons it wasn't

00:08:53,400 --> 00:08:58,889
able to get clone so it's a public

00:08:56,190 --> 00:09:01,079
repository and doing that it said hey

00:08:58,889 --> 00:09:03,179
looks like either the preparatory does

00:09:01,079 --> 00:09:04,889
not exist or you don't have access it's

00:09:03,179 --> 00:09:08,850
appropriate public repository what's the

00:09:04,889 --> 00:09:15,029
matter I don't know I will show you that

00:09:08,850 --> 00:09:19,619
one later it's it's a bit of a mess no

00:09:15,029 --> 00:09:38,699
i'm going to show you that now does work

00:09:19,619 --> 00:09:42,929
I have to find my manual yeah so is

00:09:38,699 --> 00:09:47,939
everyone able to read that yeah yeah

00:09:42,929 --> 00:09:50,779
yeah cool okay that looks pretty simple

00:09:47,939 --> 00:09:54,299
but it took me five or to figure out

00:09:50,779 --> 00:09:56,279
okay first we create under the home

00:09:54,299 --> 00:10:02,730
directory they get flow directory it's

00:09:56,279 --> 00:10:06,689
pretty obviously then we get this there

00:10:02,730 --> 00:10:12,209
is an install script string there so we

00:10:06,689 --> 00:10:14,429
just get this deploy script and now they

00:10:12,209 --> 00:10:18,989
are so magic you have to export a

00:10:14,429 --> 00:10:23,059
variable repo home to set the repository

00:10:18,989 --> 00:10:27,419
a where L to get to work on circle so

00:10:23,059 --> 00:10:32,519
simply get clone HTTP Calvin double

00:10:27,419 --> 00:10:38,100
slash does not work and but with this

00:10:32,519 --> 00:10:40,589
setup cool it works with this setup one

00:10:38,100 --> 00:10:45,029
could easily export this environment

00:10:40,589 --> 00:10:47,429
variable and tell 0a0 if you open a new

00:10:45,029 --> 00:10:49,919
shell to execute this command please

00:10:47,429 --> 00:10:53,669
pass through every environment variable

00:10:49,919 --> 00:10:56,549
to the command bash and then you could

00:10:53,669 --> 00:11:00,089
easily executed funny leap there is

00:10:56,549 --> 00:11:03,239
another problem as you may see and now

00:11:00,089 --> 00:11:06,629
I'm executing this script with set dash

00:11:03,239 --> 00:11:09,919
e setesh e fails if one of the commands

00:11:06,629 --> 00:11:11,940
containing contained in this file fails

00:11:09,919 --> 00:11:15,400
but honey

00:11:11,940 --> 00:11:22,500
this command failed every time even if

00:11:15,400 --> 00:11:22,500
it installed correctly so yeah no words

00:11:25,560 --> 00:11:36,550
right and having that done one can

00:11:32,020 --> 00:11:43,330
easily install it okay let's remove it

00:11:36,550 --> 00:11:58,750
again there's my cursor goodbye yep

00:11:43,330 --> 00:12:01,000
storm okay that was good flow now it's

00:11:58,750 --> 00:12:03,610
set up and the working with it was

00:12:01,000 --> 00:12:08,140
pretty pretty nice but there is another

00:12:03,610 --> 00:12:11,230
funny effect with get flow if you do n

00:12:08,140 --> 00:12:13,000
brew install get cash flow on was X you

00:12:11,230 --> 00:12:15,400
get the old version there are two

00:12:13,000 --> 00:12:18,190
versions of kit flow one is get dash

00:12:15,400 --> 00:12:21,550
flow and one is get dash flow dash AVH

00:12:18,190 --> 00:12:24,970
and there is an issue with the old one

00:12:21,550 --> 00:12:29,410
which doesn't get update for two years

00:12:24,970 --> 00:12:32,770
now I guess when you do get flow release

00:12:29,410 --> 00:12:35,800
finish dash mne to pass a message and

00:12:32,770 --> 00:12:37,930
this message contains the space it flow

00:12:35,800 --> 00:12:42,880
will fail for some serious reason I

00:12:37,930 --> 00:12:45,820
don't know this issue was fixed and get

00:12:42,880 --> 00:12:48,190
flow AVH so I simply decided to use that

00:12:45,820 --> 00:12:56,740
but then I could we get got into this

00:12:48,190 --> 00:13:01,060
issues and you can imagine yeah okay coo

00:12:56,740 --> 00:13:05,770
benitez coo Benitez's how many of you

00:13:01,060 --> 00:13:10,090
doesn't know coo Benitez 1 2 3 4 50 K

00:13:05,770 --> 00:13:13,560
and Q Benitez is an very smart framework

00:13:10,090 --> 00:13:16,510
it allows you to simply replicate

00:13:13,560 --> 00:13:21,120
containers within replication controller

00:13:16,510 --> 00:13:24,520
which you can then expose as a service

00:13:21,120 --> 00:13:25,360
which makes the whole process very easy

00:13:24,520 --> 00:13:27,550
about

00:13:25,360 --> 00:13:33,040
show you a bit more of that later when

00:13:27,550 --> 00:13:39,160
it gets to an example there is a problem

00:13:33,040 --> 00:13:44,260
with that because yeah koo Benitez has a

00:13:39,160 --> 00:13:47,680
nice feature called rolling update to

00:13:44,260 --> 00:13:50,769
replicate no to replace the replication

00:13:47,680 --> 00:13:53,079
controllers which does work very nice

00:13:50,769 --> 00:13:56,170
you know just tell cubanita say please

00:13:53,079 --> 00:13:58,709
repeat please replace this replication

00:13:56,170 --> 00:14:03,550
controller with this new image of docker

00:13:58,709 --> 00:14:07,990
with this new docker container image but

00:14:03,550 --> 00:14:12,970
this this pretty nice command has a

00:14:07,990 --> 00:14:17,200
problem which isn't contained in any

00:14:12,970 --> 00:14:20,589
dogs it's singleton over the whole crew

00:14:17,200 --> 00:14:22,720
benitez cluster so if you do a rolling

00:14:20,589 --> 00:14:26,290
update for one replication controller

00:14:22,720 --> 00:14:28,450
and during that one is running start

00:14:26,290 --> 00:14:31,209
another one combinations will say sorry

00:14:28,450 --> 00:14:34,240
there is already a rolling update

00:14:31,209 --> 00:14:37,000
running if you want to do that on a CI

00:14:34,240 --> 00:14:40,060
server with multiple projects you can

00:14:37,000 --> 00:14:48,459
imagine that does not work so I don't

00:14:40,060 --> 00:14:50,890
know why does I don't know okay you want

00:14:48,459 --> 00:14:54,250
to see it in action sure and we want to

00:14:50,890 --> 00:14:59,680
see some code obviously sure so Tim time

00:14:54,250 --> 00:15:02,170
um as an example this is a very small

00:14:59,680 --> 00:15:05,430
documentary documentation repository I

00:15:02,170 --> 00:15:09,820
created about one and a half weeks ago

00:15:05,430 --> 00:15:13,690
this gets compiled to Jekyll and we'll

00:15:09,820 --> 00:15:16,690
get to this later and we just have

00:15:13,690 --> 00:15:20,850
marked on files here and a bunch of

00:15:16,690 --> 00:15:27,220
configurations so how does that work on

00:15:20,850 --> 00:15:29,850
circle well let's give it and let's

00:15:27,220 --> 00:15:29,850
change

00:15:39,890 --> 00:15:48,390
uh-huh gets even bigger okay and this is

00:15:46,110 --> 00:15:51,480
the circle yamel which tells circle what

00:15:48,390 --> 00:15:54,720
what it has to do during a build run so

00:15:51,480 --> 00:15:59,820
first okay we do some Tucker info that

00:15:54,720 --> 00:16:02,310
doesn't care but then we we clone no

00:15:59,820 --> 00:16:05,630
that doesn't fit on the monitor we clone

00:16:02,310 --> 00:16:11,160
our internal deployment repository under

00:16:05,630 --> 00:16:14,370
deployment in the home directory then we

00:16:11,160 --> 00:16:17,850
do a simple NPM install because there

00:16:14,370 --> 00:16:21,590
are some and PM scripts and we use some

00:16:17,850 --> 00:16:26,010
NPM modules which will dig into later

00:16:21,590 --> 00:16:28,620
then we have to execute a few scripts

00:16:26,010 --> 00:16:30,480
and as you see here we just execute

00:16:28,620 --> 00:16:32,400
scripts in the circle llaman so there is

00:16:30,480 --> 00:16:34,470
no no command which gets executed

00:16:32,400 --> 00:16:37,760
because every command we execute a

00:16:34,470 --> 00:16:41,660
certain are contained by one of these

00:16:37,760 --> 00:16:44,210
script files so in this case we use

00:16:41,660 --> 00:16:46,560
within the scripts file we have

00:16:44,210 --> 00:16:50,700
documentation directory which contains

00:16:46,560 --> 00:16:54,420
every file or build and keep write

00:16:50,700 --> 00:16:56,990
scripts depending on documentation

00:16:54,420 --> 00:17:03,510
repositories there is an installed eps

00:16:56,990 --> 00:17:06,449
file there is also a google cloud or

00:17:03,510 --> 00:17:09,329
file which just as google cloud hey i am

00:17:06,449 --> 00:17:11,939
this user please give me access to push

00:17:09,329 --> 00:17:17,310
the docker image and access the coup

00:17:11,939 --> 00:17:24,870
benitez cluster and then it's just just

00:17:17,310 --> 00:17:27,540
a built just a bit of car plus we have

00:17:24,870 --> 00:17:30,720
here this deployment configuration on

00:17:27,540 --> 00:17:32,430
master and develop we want to build the

00:17:30,720 --> 00:17:34,730
docker container you want to push the

00:17:32,430 --> 00:17:37,560
docker container into our registry and

00:17:34,730 --> 00:17:40,320
we want to trigger the release and crew

00:17:37,560 --> 00:17:42,899
benitez as you as I told you before

00:17:40,320 --> 00:17:46,139
this I want to trigger the deployment

00:17:42,899 --> 00:17:49,289
Combinator's isn't that easy currently

00:17:46,139 --> 00:17:53,759
this is to is doing nothing and because

00:17:49,289 --> 00:17:57,950
it was breaking the bills but we plan to

00:17:53,759 --> 00:18:00,840
push and message into a cue from this

00:17:57,950 --> 00:18:04,230
circle build and then have a cue

00:18:00,840 --> 00:18:07,220
consumer working this disc you and doing

00:18:04,230 --> 00:18:16,080
this rolling update to have them

00:18:07,220 --> 00:18:18,059
executed in a in a sequence okay now

00:18:16,080 --> 00:18:22,529
this this talks i'll show you pretty

00:18:18,059 --> 00:18:28,889
quick it's just the sequence of of bash

00:18:22,529 --> 00:18:30,990
scripts we just do we just do and Jeckle

00:18:28,889 --> 00:18:33,929
build of this of this documentation

00:18:30,990 --> 00:18:36,929
stuff and to a jackal headpiece compare

00:18:33,929 --> 00:18:42,539
this this background files and build it

00:18:36,929 --> 00:18:45,240
and not much then we just do a tucker

00:18:42,539 --> 00:18:49,759
built from this image and push the image

00:18:45,240 --> 00:18:49,759
into the registry and that's all for it

00:18:51,019 --> 00:19:04,559
on circle this looks as follows that is

00:18:57,210 --> 00:19:08,179
pretty big I guess week yeah better okay

00:19:04,559 --> 00:19:11,250
so on circle it looks like follows um

00:19:08,179 --> 00:19:13,799
just installed the whole bunch and

00:19:11,250 --> 00:19:15,960
installs the whole okay one cannot read

00:19:13,799 --> 00:19:19,139
it dependencies and install the

00:19:15,960 --> 00:19:22,559
dependencies and authorize ice builds

00:19:19,139 --> 00:19:26,340
the bill to the docks yes they are not

00:19:22,559 --> 00:19:30,149
tested we execute exit here then we

00:19:26,340 --> 00:19:32,879
built a container and this one can see

00:19:30,149 --> 00:19:37,100
from here and at this whole stuff and

00:19:32,879 --> 00:19:42,000
install HTTP server as as a serving

00:19:37,100 --> 00:19:49,049
package and then we just push it into

00:19:42,000 --> 00:19:50,909
our google container registry so but

00:19:49,049 --> 00:19:54,160
that's it for this documentation

00:19:50,909 --> 00:19:55,540
repository you will say no okay

00:19:54,160 --> 00:20:00,520
it's just the commutation we want to see

00:19:55,540 --> 00:20:02,910
some I don't know project the problems

00:20:00,520 --> 00:20:09,930
that end of the lot to show these and

00:20:02,910 --> 00:20:16,060
what I can show you how it works out but

00:20:09,930 --> 00:20:19,270
also not a lot sorry okay for the

00:20:16,060 --> 00:20:21,730
projects what we decided to use as I

00:20:19,270 --> 00:20:25,090
mentioned before we want to get these

00:20:21,730 --> 00:20:28,540
change locks from what we did in order

00:20:25,090 --> 00:20:32,500
to get that working we decided to use

00:20:28,540 --> 00:20:35,490
conventional change lock which itself

00:20:32,500 --> 00:20:39,520
requires some commit message standards

00:20:35,490 --> 00:20:44,200
how many of you are are aware of this

00:20:39,520 --> 00:20:48,040
angular commit message standard not so

00:20:44,200 --> 00:20:51,540
many you didn't expect that one angular

00:20:48,040 --> 00:21:02,100
has a commit message standard guideline

00:20:51,540 --> 00:21:05,170
in which does that open that's working

00:21:02,100 --> 00:21:09,790
the commit message standard is pretty

00:21:05,170 --> 00:21:12,790
much only okay you have a type of commit

00:21:09,790 --> 00:21:15,520
you give them its scope and a subject

00:21:12,790 --> 00:21:21,670
plus you can add some informations here

00:21:15,520 --> 00:21:25,050
and these get and gets analized you have

00:21:21,670 --> 00:21:27,610
a few types like feature or bug fix

00:21:25,050 --> 00:21:34,900
documentation style changes refactorings

00:21:27,610 --> 00:21:37,510
a bunch of things yep so we decided to

00:21:34,900 --> 00:21:41,230
use this commit message Jenner as we all

00:21:37,510 --> 00:21:44,710
were aware of it plus there are a few

00:21:41,230 --> 00:21:46,600
very nice packages they are all

00:21:44,710 --> 00:21:50,500
belonging to the conventional change

00:21:46,600 --> 00:21:53,510
locative organization yep there are a

00:21:50,500 --> 00:21:57,560
few packages which you can use like

00:21:53,510 --> 00:22:00,770
these there is one package which does

00:21:57,560 --> 00:22:04,010
the whole infrastructure setup called

00:22:00,770 --> 00:22:06,700
conventional change lock and then there

00:22:04,010 --> 00:22:09,470
are a few very important packages for us

00:22:06,700 --> 00:22:14,170
there is this conventional recommended

00:22:09,470 --> 00:22:18,920
bump this is the package analyzing the

00:22:14,170 --> 00:22:21,230
git commit history and telling you a you

00:22:18,920 --> 00:22:25,220
need to you need to do a major bump you

00:22:21,230 --> 00:22:27,500
can use then zemer to say ok my current

00:22:25,220 --> 00:22:29,810
releases this one and I get a major bump

00:22:27,500 --> 00:22:34,270
and temporal and tells you ok you have

00:22:29,810 --> 00:22:39,410
to do in one dot one dot 0 for example

00:22:34,270 --> 00:22:43,160
plus having that set you have this

00:22:39,410 --> 00:22:45,320
conventional change lock COI which

00:22:43,160 --> 00:22:48,500
generates from the dip from the last

00:22:45,320 --> 00:22:52,700
from the previous get tech to the

00:22:48,500 --> 00:22:55,460
current get tech and generates a very

00:22:52,700 --> 00:22:58,820
nice change lock from that we also use

00:22:55,460 --> 00:23:02,240
comet ISM that isn't plug-in or in non

00:22:58,820 --> 00:23:05,240
module which you lose locally to have

00:23:02,240 --> 00:23:07,010
your git commit messages standardized so

00:23:05,240 --> 00:23:10,460
it gives you a form which type one I do

00:23:07,010 --> 00:23:13,310
you wanna to commit orange which scope

00:23:10,460 --> 00:23:14,810
to UF and stuff like that and then

00:23:13,310 --> 00:23:20,810
generates the commit message for you

00:23:14,810 --> 00:23:24,740
pretty nice ok unfortunately this whole

00:23:20,810 --> 00:23:30,200
setup isn't done yet for production

00:23:24,740 --> 00:23:31,640
because I'm I'm there only two months

00:23:30,200 --> 00:23:36,500
and it wasn't enough time to get

00:23:31,640 --> 00:23:38,950
everybody set up unfortunately but we

00:23:36,500 --> 00:23:42,020
have all this this process for

00:23:38,950 --> 00:23:46,460
committing and i'm building the npm

00:23:42,020 --> 00:23:49,760
release and going through the gits flow

00:23:46,460 --> 00:23:53,720
workflow we have our everything belongs

00:23:49,760 --> 00:23:56,960
let's working for the documentation

00:23:53,720 --> 00:24:00,440
repos and for the libraries so when a

00:23:56,960 --> 00:24:02,990
library is is merged when the puerto

00:24:00,440 --> 00:24:06,860
rico's on the library is merged and then

00:24:02,990 --> 00:24:07,309
we we go through the sole workflow and

00:24:06,860 --> 00:24:09,950
open

00:24:07,309 --> 00:24:13,330
get flow release and commit the next

00:24:09,950 --> 00:24:16,039
bump and commit to change lock and

00:24:13,330 --> 00:24:19,249
finish the release push it back to

00:24:16,039 --> 00:24:23,809
github and then the NPM release is done

00:24:19,249 --> 00:24:28,429
plus a change as notices pushed to to

00:24:23,809 --> 00:24:33,499
snag and but you can do a lot of things

00:24:28,429 --> 00:24:38,509
more you can do what I tell you earlier

00:24:33,499 --> 00:24:41,419
I'm able to queue to get this whole crew

00:24:38,509 --> 00:24:45,619
benitez rolling update on either using

00:24:41,419 --> 00:24:49,149
cube CDs CTL which is the CLI are using

00:24:45,619 --> 00:24:49,149
the communities API which does the same

00:24:49,389 --> 00:25:00,740
plus we are planning on using on doing a

00:24:54,440 --> 00:25:03,799
netting monitoring one using google

00:25:00,740 --> 00:25:07,190
container engine there are a few options

00:25:03,799 --> 00:25:09,679
you can choose one is google cloud

00:25:07,190 --> 00:25:14,320
monitoring which has some pretty pretty

00:25:09,679 --> 00:25:16,730
nice statistics but unfortunately Google

00:25:14,320 --> 00:25:19,249
monitoring google cloud monitoring

00:25:16,730 --> 00:25:21,289
collects all the data data but you

00:25:19,249 --> 00:25:24,409
cannot create statistics from all of

00:25:21,289 --> 00:25:28,809
those there are only a bunch of lock

00:25:24,409 --> 00:25:31,159
types which you can aggregate and do an

00:25:28,809 --> 00:25:33,619
address that is this going to create a

00:25:31,159 --> 00:25:37,309
statistic from that so we just decided

00:25:33,619 --> 00:25:40,519
okay there is a nice dashboard framework

00:25:37,309 --> 00:25:42,649
of their Jets just use it so we're going

00:25:40,519 --> 00:25:44,629
to use we gonna build those webs for our

00:25:42,649 --> 00:25:47,419
circle status and all sort them and

00:25:44,629 --> 00:25:49,279
gonna build some zips for KU bonitos

00:25:47,419 --> 00:25:52,190
replication status because Q Benitez

00:25:49,279 --> 00:25:56,179
itself and provides a very clean API to

00:25:52,190 --> 00:25:58,309
get information about every everything

00:25:56,179 --> 00:26:00,080
you have running in your cluster so you

00:25:58,309 --> 00:26:03,799
get Larry variables output and you can

00:26:00,080 --> 00:26:09,679
use this to to create some informational

00:26:03,799 --> 00:26:13,279
dashboards for it yeah we want to build

00:26:09,679 --> 00:26:15,379
status overview for our projects like

00:26:13,279 --> 00:26:16,879
you know from Travis are circular gets

00:26:15,379 --> 00:26:18,970
up where you can see okay this project

00:26:16,879 --> 00:26:22,210
is this version and

00:26:18,970 --> 00:26:24,690
the last build on circle was green and

00:26:22,210 --> 00:26:27,100
it's the last version there and

00:26:24,690 --> 00:26:30,280
production is this and on staging is

00:26:27,100 --> 00:26:33,130
that version and communities is green

00:26:30,280 --> 00:26:36,669
for it there are four pots running with

00:26:33,130 --> 00:26:39,220
this application where you can also

00:26:36,669 --> 00:26:43,990
create projects and trigger deployments

00:26:39,220 --> 00:26:48,400
by hand if one failed and that's pretty

00:26:43,990 --> 00:26:51,070
much all from now I guess I missed a few

00:26:48,400 --> 00:26:54,880
steps or I left a few steps out because

00:26:51,070 --> 00:26:58,090
either I'm was enabled to fill them or I

00:26:54,880 --> 00:27:00,130
wasn't allowed to show them you can do

00:26:58,090 --> 00:27:02,740
pretty much with the soul npm and

00:27:00,130 --> 00:27:06,610
conventional changelog stuff on honest

00:27:02,740 --> 00:27:09,429
on a CI server and if you invest in a

00:27:06,610 --> 00:27:13,480
few mount of time you can automate the

00:27:09,429 --> 00:27:16,390
whole process so that one of your

00:27:13,480 --> 00:27:20,880
developers doesn't need to do anything

00:27:16,390 --> 00:27:25,330
by hand and this is this is pretty a

00:27:20,880 --> 00:27:30,700
pretty strong feature because automatics

00:27:25,330 --> 00:27:34,780
things are tested often and there are

00:27:30,700 --> 00:27:37,960
less best false false afflicted so for

00:27:34,780 --> 00:27:42,309
us it worked out pretty clear and it's

00:27:37,960 --> 00:27:46,150
running pretty pretty good since now um

00:27:42,309 --> 00:27:49,270
so I hope we can open source a few of

00:27:46,150 --> 00:27:51,600
these scripts and a few of these

00:27:49,270 --> 00:27:57,220
projects we are building like this

00:27:51,600 --> 00:27:59,650
rolling update q and and we hopefully

00:27:57,220 --> 00:28:02,530
will write a few blog posts with this

00:27:59,650 --> 00:28:05,260
learnings with hey how to install good

00:28:02,530 --> 00:28:10,740
flow AVH or how to do this and how do

00:28:05,260 --> 00:28:10,740
that and yeah then thanks everybody

00:28:11,920 --> 00:28:13,980

YouTube URL: https://www.youtube.com/watch?v=MlrY3qcMkHE


