Title: Martin Schuhfuss: Welcome to 3D - JSUnconf 2016
Publication date: 2016-06-07
Playlist: JSUnconf 2016
Description: 
	An Introduction to WebGL Introductions

Slides: http://slides.com/martinschuhfuss/jsunconf-welcome-to-3d

One of the most complicated things about learning WebGL or 3D in general is the massive amount of very special concepts and terminology that are often unique to 3D rendering.

Knowledge of these underpinnings is needed to understand documentation and code for any of the popular WebGL frameworks.

This talk will give you an introduction into how different rendering methods work, some terminology (how does the GL rendering pipeline work? wtf is a phong-material? what does a shader do?) and the mathematical concepts you need to know about (why are all these matrices?) to better understand how 3D works.
Captions: 
	00:00:08,400 --> 00:00:20,860
thank you all right so um yeah I'm

00:00:15,219 --> 00:00:24,130
Martin welcome to 3d um yeah the reason

00:00:20,860 --> 00:00:28,420
I I decided to do those talk as just

00:00:24,130 --> 00:00:30,550
that every 3d introduction that you read

00:00:28,420 --> 00:00:33,790
somehow assumes that you already know

00:00:30,550 --> 00:00:37,390
quite a lot about 3d so I'm here to

00:00:33,790 --> 00:00:40,930
clear a bit obvious things up in the

00:00:37,390 --> 00:00:44,620
last half year something I've been doing

00:00:40,930 --> 00:00:47,350
quite a lot of work but has had to do

00:00:44,620 --> 00:00:53,890
with three jrs had to do with WebGL and

00:00:47,350 --> 00:00:55,869
so I came to learn the hard way and so

00:00:53,890 --> 00:00:57,670
this is one of the project i'm currently

00:00:55,869 --> 00:01:02,350
working on which is basically just

00:00:57,670 --> 00:01:05,470
rendering study to see how we can

00:01:02,350 --> 00:01:09,189
achieve real nice looking effects with

00:01:05,470 --> 00:01:11,260
very simple polygons and all those

00:01:09,189 --> 00:01:17,890
post-processing that is required to do

00:01:11,260 --> 00:01:20,710
that and yeah this is one of the studies

00:01:17,890 --> 00:01:24,359
for the intro for Jays convoy Lopez the

00:01:20,710 --> 00:01:27,310
first time I'm showing this publicly so

00:01:24,359 --> 00:01:32,020
the problem with WebGL is basically it's

00:01:27,310 --> 00:01:34,270
learning curve so maybe if you read a

00:01:32,020 --> 00:01:36,850
little bit about what 3d in the web can

00:01:34,270 --> 00:01:39,810
do and you're like hey we can do this

00:01:36,850 --> 00:01:42,880
thing in 3d only to discover that

00:01:39,810 --> 00:01:45,850
somehow along this straight wall of

00:01:42,880 --> 00:01:49,450
learning curve you just say no maybe we

00:01:45,850 --> 00:01:54,249
find a simpler solution another problem

00:01:49,450 --> 00:01:56,229
here is every WebGL tutorial ever starts

00:01:54,249 --> 00:01:59,139
with hey let's just draw a triangle

00:01:56,229 --> 00:02:01,630
which is very okay so you create camera

00:01:59,139 --> 00:02:03,719
then you have to set some parameters you

00:02:01,630 --> 00:02:06,219
don't know about and we need to create

00:02:03,719 --> 00:02:08,140
two shaders the fragment and vertex

00:02:06,219 --> 00:02:10,209
shader come to that later and those

00:02:08,140 --> 00:02:12,670
traders yeah well they have written in a

00:02:10,209 --> 00:02:14,590
different language but don't worry too

00:02:12,670 --> 00:02:19,360
much because we're still not done

00:02:14,590 --> 00:02:21,740
drawing a triangle finally right there

00:02:19,360 --> 00:02:23,540
was a vertices array that

00:02:21,740 --> 00:02:25,850
and those are the points of the triangle

00:02:23,540 --> 00:02:28,760
and it's really those code really just

00:02:25,850 --> 00:02:33,680
ran as a black or white triangle on the

00:02:28,760 --> 00:02:36,740
black background so yeah it's so III

00:02:33,680 --> 00:02:39,170
think that there is a better way to

00:02:36,740 --> 00:02:41,090
explain this and I will do this without

00:02:39,170 --> 00:02:43,760
showing you any color so the way that

00:02:41,090 --> 00:02:46,550
will work is basically i'm following

00:02:43,760 --> 00:02:48,650
buzzword after buzzword at you and try

00:02:46,550 --> 00:02:53,120
to explain what all these words mean in

00:02:48,650 --> 00:02:55,490
the 3d world so I did this the hard way

00:02:53,120 --> 00:02:58,070
because this is a one really really

00:02:55,490 --> 00:03:01,850
awesome book but really really have your

00:02:58,070 --> 00:03:04,880
math but yeah it's quite worth reading

00:03:01,850 --> 00:03:07,850
because it explores all those fully

00:03:04,880 --> 00:03:10,520
rendering up to how current generation

00:03:07,850 --> 00:03:14,080
games do they are rendering in greatest

00:03:10,520 --> 00:03:19,550
detail so if you really want a deep dive

00:03:14,080 --> 00:03:23,660
all of this book so I'm contributor

00:03:19,550 --> 00:03:27,560
graphics and 3d rendering is a really

00:03:23,660 --> 00:03:29,660
vast field so we have around around 50

00:03:27,560 --> 00:03:33,620
years of research having gone on in to

00:03:29,660 --> 00:03:36,380
this this yeah probably one of the best

00:03:33,620 --> 00:03:38,090
funded areas of research just games

00:03:36,380 --> 00:03:41,750
industry the visual effects for

00:03:38,090 --> 00:03:44,600
Hollywood all those that rely on 3d

00:03:41,750 --> 00:03:47,390
graphics poor vast amounts of money into

00:03:44,600 --> 00:03:52,040
it so there's no shortage and research

00:03:47,390 --> 00:03:54,860
and yeah finally it's also a really huge

00:03:52,040 --> 00:03:58,580
scientific field it involves physics and

00:03:54,860 --> 00:04:01,460
involves math so it involves lots of

00:03:58,580 --> 00:04:04,190
numerics and information technology

00:04:01,460 --> 00:04:14,990
things there are feels like radiometry

00:04:04,190 --> 00:04:18,140
and all the likes involved so what is 3d

00:04:14,990 --> 00:04:21,440
rendering the basic idea and 3d

00:04:18,140 --> 00:04:24,830
rendering is let me use a virtual camera

00:04:21,440 --> 00:04:28,520
to take pictures of virtual scene so

00:04:24,830 --> 00:04:31,340
it's a pretty easy like that to it but

00:04:28,520 --> 00:04:33,320
yeah how do we do this

00:04:31,340 --> 00:04:35,419
we need to figure out how how light

00:04:33,320 --> 00:04:39,919
would behave in over to virtual the

00:04:35,419 --> 00:04:41,660
world and finally find out which parts

00:04:39,919 --> 00:04:46,479
of the light will end up in our camera

00:04:41,660 --> 00:04:49,100
sensor and form the pixels on screen so

00:04:46,479 --> 00:04:51,169
naive solution to those what the year we

00:04:49,100 --> 00:04:53,840
make a simulation of how the photons

00:04:51,169 --> 00:04:56,389
behave and how they bounce around on a

00:04:53,840 --> 00:04:58,820
scene and finally figure out which of

00:04:56,389 --> 00:05:01,310
these photons hit the camera sensor and

00:04:58,820 --> 00:05:04,580
get this play but yeah as you may know a

00:05:01,310 --> 00:05:08,960
quite many photons to simulate there so

00:05:04,580 --> 00:05:12,650
there's not an option um so this leads

00:05:08,960 --> 00:05:16,010
to some rendering techniques being

00:05:12,650 --> 00:05:20,389
developed that and I will show you the

00:05:16,010 --> 00:05:23,030
most prominent ones just right now so

00:05:20,389 --> 00:05:27,229
the first thing is the ray tracing and

00:05:23,030 --> 00:05:31,010
path tracing the idea behind this is but

00:05:27,229 --> 00:05:36,200
you that you just trace how how race

00:05:31,010 --> 00:05:38,870
behave in your light seen you can see

00:05:36,200 --> 00:05:41,270
there are left pictures basically how

00:05:38,870 --> 00:05:44,090
how light normally behave so you have a

00:05:41,270 --> 00:05:47,360
yellow ray it hits an object and gets

00:05:44,090 --> 00:05:50,330
gets reflected of that object so the

00:05:47,360 --> 00:05:52,700
orange race and then all these refer the

00:05:50,330 --> 00:05:55,520
reflected rays are reflected themselves

00:05:52,700 --> 00:05:58,280
so those are the rep raised and then you

00:05:55,520 --> 00:06:01,099
can see what's happening and we can we

00:05:58,280 --> 00:06:04,220
can describe each of these paths of

00:06:01,099 --> 00:06:11,030
light which you can see in our right

00:06:04,220 --> 00:06:14,510
hand picture so what path tracing now

00:06:11,030 --> 00:06:15,770
does that is it starts backwards so you

00:06:14,510 --> 00:06:18,200
have a camera or somewhere in the scene

00:06:15,770 --> 00:06:22,419
and you cast a riot ray out of the

00:06:18,200 --> 00:06:26,210
camera so this looks a bit like those

00:06:22,419 --> 00:06:29,180
apologize for the for the contrast not

00:06:26,210 --> 00:06:31,220
that awesome beemo so we help a camera

00:06:29,180 --> 00:06:33,950
and we start with a red rays and we

00:06:31,220 --> 00:06:36,650
recast those of you raised into the

00:06:33,950 --> 00:06:39,070
scene and see where it hits an object so

00:06:36,650 --> 00:06:41,599
at that point where it's an object

00:06:39,070 --> 00:06:44,599
several of things might happen so the

00:06:41,599 --> 00:06:45,000
first we'll draw these lines towards

00:06:44,599 --> 00:06:47,610
ever

00:06:45,000 --> 00:06:52,130
every light source and a scene to see it

00:06:47,610 --> 00:06:54,540
is in shadow or isn't it and otherwise

00:06:52,130 --> 00:06:57,840
which is the case for the for the right

00:06:54,540 --> 00:07:00,270
hand point of intersection there could

00:06:57,840 --> 00:07:02,820
be a reflection which is the green ray

00:07:00,270 --> 00:07:06,000
or it could be refracted through the

00:07:02,820 --> 00:07:09,240
material if it's made of glass of water

00:07:06,000 --> 00:07:13,490
or something so this will be the blu-ray

00:07:09,240 --> 00:07:16,770
and finally things can happen like

00:07:13,490 --> 00:07:18,600
subsurface scattering which is shown on

00:07:16,770 --> 00:07:21,960
the left hand side where rather light

00:07:18,600 --> 00:07:24,030
slightly emphasis circles gets bounced

00:07:21,960 --> 00:07:27,660
around and exits the surface at another

00:07:24,030 --> 00:07:29,730
point so um what ray tracing and pulse

00:07:27,660 --> 00:07:33,030
racing now try to do is calculate

00:07:29,730 --> 00:07:35,040
backwards towards the light source where

00:07:33,030 --> 00:07:39,150
the light shines on that object is

00:07:35,040 --> 00:07:41,250
coming from the point the point of use

00:07:39,150 --> 00:07:45,410
algorithms that they are really very

00:07:41,250 --> 00:07:49,919
accurate they can they can have a really

00:07:45,410 --> 00:07:54,660
amazing quality especially in rendering

00:07:49,919 --> 00:07:58,020
how whole shadows and lights behave they

00:07:54,660 --> 00:08:00,060
support several special behaviors the

00:07:58,020 --> 00:08:02,580
commonly called global illumination

00:08:00,060 --> 00:08:05,190
which is refers to or everything that is

00:08:02,580 --> 00:08:07,229
illumination that isn't directly from a

00:08:05,190 --> 00:08:08,729
light source so in this room for

00:08:07,229 --> 00:08:10,890
instance we only have global

00:08:08,729 --> 00:08:15,270
illumination because the light sources

00:08:10,890 --> 00:08:18,810
are basically hidden from us okay and

00:08:15,270 --> 00:08:22,440
yeah ray tracing or more path tracing

00:08:18,810 --> 00:08:23,970
are used for everything that doesn't

00:08:22,440 --> 00:08:26,130
need to be in real time well

00:08:23,970 --> 00:08:27,630
unfortunately it's we are still not

00:08:26,130 --> 00:08:30,870
there that we can do those in real time

00:08:27,630 --> 00:08:34,589
just because the amount of computation

00:08:30,870 --> 00:08:38,159
required us way too big Princeton's

00:08:34,589 --> 00:08:43,650
twice Daria they took for rendering the

00:08:38,159 --> 00:08:45,330
movie around 2 to 15 hours for every

00:08:43,650 --> 00:08:49,830
single image in the film and they were

00:08:45,330 --> 00:08:53,339
like 140,000 images so it took some time

00:08:49,830 --> 00:09:00,770
to render that new movie okay so here's

00:08:53,339 --> 00:09:06,680
an example of someone actually built a

00:09:00,770 --> 00:09:11,040
real path tracing renderer in WebGL and

00:09:06,680 --> 00:09:12,959
like can change the scene here and we

00:09:11,040 --> 00:09:15,209
can move move move around to other

00:09:12,959 --> 00:09:19,110
camera and you can see some some of the

00:09:15,209 --> 00:09:21,320
effects that only path tracing can do

00:09:19,110 --> 00:09:25,130
like these shadows here in between or

00:09:21,320 --> 00:09:27,990
these refractions within that glass ball

00:09:25,130 --> 00:09:31,520
we can even just camera Pam our

00:09:27,990 --> 00:09:34,500
parameters like the focal length or the

00:09:31,520 --> 00:09:37,440
aperture size of the camera so it's it's

00:09:34,500 --> 00:09:43,770
a really good simulation of how how

00:09:37,440 --> 00:09:45,780
light really behaves anyway um the main

00:09:43,770 --> 00:09:48,839
techniques exist that is useful for a

00:09:45,780 --> 00:09:51,720
real-time rendering though is called

00:09:48,839 --> 00:09:54,150
rasterization and together with scanline

00:09:51,720 --> 00:09:59,480
rendering which is accompanying

00:09:54,150 --> 00:10:02,760
technique so basically all applications

00:09:59,480 --> 00:10:06,450
like games or everything that does 3d

00:10:02,760 --> 00:10:10,020
graphics in real time uses this

00:10:06,450 --> 00:10:13,160
technique to renderer so this is

00:10:10,020 --> 00:10:19,500
basically also GPUs are designed for

00:10:13,160 --> 00:10:23,130
this restoration technique so what

00:10:19,500 --> 00:10:25,560
rasterization basically does is we have

00:10:23,130 --> 00:10:28,740
objects that are described as a huge

00:10:25,560 --> 00:10:32,820
amount of triangles and each of these

00:10:28,740 --> 00:10:35,070
triangles is then split up according to

00:10:32,820 --> 00:10:39,660
which screen pixels are covered by it

00:10:35,070 --> 00:10:43,350
and then finally for every pixel of the

00:10:39,660 --> 00:10:45,690
color is provided it's calculated from

00:10:43,350 --> 00:10:54,600
the data that is available for that

00:10:45,690 --> 00:10:57,660
triangle so um in order to explain more

00:10:54,600 --> 00:11:02,100
deeply what this rasterization does is

00:10:57,660 --> 00:11:04,579
we need to take a look at some math so

00:11:02,100 --> 00:11:08,070
let's begin with the rendering equation

00:11:04,579 --> 00:11:09,510
this is a funny mix of calculus and

00:11:08,070 --> 00:11:14,670
linear algebra

00:11:09,510 --> 00:11:16,410
and trigonometry yeah but nope you

00:11:14,670 --> 00:11:20,490
really didn't don't need to know too

00:11:16,410 --> 00:11:22,680
much math in order to work with 3d there

00:11:20,490 --> 00:11:24,810
are just three four things that i'm

00:11:22,680 --> 00:11:28,320
going to show you that that you need to

00:11:24,810 --> 00:11:32,250
be aware of so first is we have

00:11:28,320 --> 00:11:34,170
coordinates bases a coordinate space is

00:11:32,250 --> 00:11:37,770
basically just the frame of reference so

00:11:34,170 --> 00:11:39,540
it shows for any given back to where we

00:11:37,770 --> 00:11:43,770
are the origin point is the vector

00:11:39,540 --> 00:11:47,640
refers to and it has three axis XY and Z

00:11:43,770 --> 00:11:49,440
and yeah these three axes are organized

00:11:47,640 --> 00:11:51,720
another right-handed system so if you

00:11:49,440 --> 00:11:55,740
take your right hand hold up like this

00:11:51,720 --> 00:11:58,410
thumb is the x-axis or y-axis and the z

00:11:55,740 --> 00:12:01,200
axis so this is how you have always find

00:11:58,410 --> 00:12:04,440
out which direction which axis is

00:12:01,200 --> 00:12:07,320
pointing to so in this case we have x

00:12:04,440 --> 00:12:09,870
axis pointing pointing from left to

00:12:07,320 --> 00:12:14,240
right y axis up like a node and the z

00:12:09,870 --> 00:12:18,810
axis is coming towards you so um

00:12:14,240 --> 00:12:24,660
vertices this is a here you probably all

00:12:18,810 --> 00:12:29,310
know vectors do you mass at school all

00:12:24,660 --> 00:12:31,800
right so vertices is just a vertex just

00:12:29,310 --> 00:12:36,030
the term used in 3d graphics for vectors

00:12:31,800 --> 00:12:38,820
and enough so it's basically just a

00:12:36,030 --> 00:12:41,640
single point somewhere in a cabinet

00:12:38,820 --> 00:12:44,870
space so in this this example was a

00:12:41,640 --> 00:12:47,610
teapot you can see the thin black line

00:12:44,870 --> 00:12:51,110
which points to the director to the

00:12:47,610 --> 00:12:55,530
point where we had 111 coordinate is and

00:12:51,110 --> 00:12:58,530
yeah so every vertex have the three

00:12:55,530 --> 00:13:02,970
components of the dial in direction of x

00:12:58,530 --> 00:13:06,540
y&z axis so what we can do with vertices

00:13:02,970 --> 00:13:10,140
is now we can transform them you will

00:13:06,540 --> 00:13:14,850
probably know from CSS these CSS

00:13:10,140 --> 00:13:17,670
transform this is the same thing so um

00:13:14,850 --> 00:13:19,800
we can rotate them we can translate them

00:13:17,670 --> 00:13:22,470
so move them around we can scale them

00:13:19,800 --> 00:13:23,070
and all of this is done with something

00:13:22,470 --> 00:13:24,960
called

00:13:23,070 --> 00:13:27,090
matrix multiplication don't worry too

00:13:24,960 --> 00:13:29,670
much because you have a math library

00:13:27,090 --> 00:13:31,560
that takes care of those so it's just

00:13:29,670 --> 00:13:34,080
you have a matrix and you have a vector

00:13:31,560 --> 00:13:37,940
and you basically throw that vector at

00:13:34,080 --> 00:13:37,940
the matrix and out comes another waxhaw

00:13:38,480 --> 00:13:46,230
so that matrix yeah just the recipe

00:13:42,900 --> 00:13:49,140
about how to make one vector of another

00:13:46,230 --> 00:13:52,650
vector and the recipe contains all these

00:13:49,140 --> 00:13:55,860
rotations translations and so on so

00:13:52,650 --> 00:13:59,250
another thing I need I need to talk

00:13:55,860 --> 00:14:03,360
about a hormone homogeneous coordinates

00:13:59,250 --> 00:14:06,840
and this is a weird term but you will if

00:14:03,360 --> 00:14:08,760
you start diving into 3d graphics you

00:14:06,840 --> 00:14:12,150
will see four dimensional coordinates

00:14:08,760 --> 00:14:15,390
everywhere so don't vary they simulate a

00:14:12,150 --> 00:14:19,320
similar just describe a point in 3d

00:14:15,390 --> 00:14:21,300
space i have x y&z corner and the force

00:14:19,320 --> 00:14:24,750
why are you it's basically just used to

00:14:21,300 --> 00:14:26,880
enable some mathematic tricks that are

00:14:24,750 --> 00:14:28,230
you that are required for some

00:14:26,880 --> 00:14:36,150
calculations you don't need to worry

00:14:28,230 --> 00:14:38,760
about so moving on the the single most

00:14:36,150 --> 00:14:43,170
important thing and 3d graphics are the

00:14:38,760 --> 00:14:47,130
geometry so geometry is defined using

00:14:43,170 --> 00:14:50,820
triangles or in some other in some other

00:14:47,130 --> 00:14:52,910
systems like direct x jail we can also

00:14:50,820 --> 00:14:57,120
use quartz which are rectangles

00:14:52,910 --> 00:14:59,640
basically and those are called faces and

00:14:57,120 --> 00:15:01,920
all of these faces together like you can

00:14:59,640 --> 00:15:06,810
see in the picture we form from the

00:15:01,920 --> 00:15:09,870
surface of the object so all of these

00:15:06,810 --> 00:15:13,050
all of these triangles are described by

00:15:09,870 --> 00:15:16,350
three points three vertices and all of

00:15:13,050 --> 00:15:18,660
these vertices have a common reference

00:15:16,350 --> 00:15:20,400
point a comment coordinate system this

00:15:18,660 --> 00:15:24,210
coordinate system is called the object

00:15:20,400 --> 00:15:28,290
space so reason for this is that you can

00:15:24,210 --> 00:15:31,800
move the object space around without

00:15:28,290 --> 00:15:33,870
having to modify any of the vertices so

00:15:31,800 --> 00:15:36,510
the shape of the object stays the same

00:15:33,870 --> 00:15:42,180
where you can move and rotate and sky

00:15:36,510 --> 00:15:46,470
look around so from the from the

00:15:42,180 --> 00:15:49,920
geometry we come to object so an object

00:15:46,470 --> 00:15:52,980
in 3d is just a combination of the

00:15:49,920 --> 00:16:00,230
geometry and a material information will

00:15:52,980 --> 00:16:03,630
come to that later so the object is the

00:16:00,230 --> 00:16:06,590
provides provides the coordinate space

00:16:03,630 --> 00:16:10,440
for the vertices of a geometry and

00:16:06,590 --> 00:16:12,740
managers all these transforms that I

00:16:10,440 --> 00:16:17,880
used on that object to move it around

00:16:12,740 --> 00:16:22,440
and finally get objects are hierarchical

00:16:17,880 --> 00:16:25,650
so they can contain more objects so if I

00:16:22,440 --> 00:16:28,830
I came for instance just a model robot

00:16:25,650 --> 00:16:31,500
by I have a body and a child of the body

00:16:28,830 --> 00:16:34,710
would be the arm so if I move the body

00:16:31,500 --> 00:16:39,900
around but I'm moves with it so the arm

00:16:34,710 --> 00:16:45,180
uses the body as a reference and finally

00:16:39,900 --> 00:16:48,870
there's one root object in every 15 so

00:16:45,180 --> 00:16:52,830
well this is also in three.js is called

00:16:48,870 --> 00:16:56,880
the scene and i hope the term in various

00:16:52,830 --> 00:16:59,690
other systems as well so yeah the root

00:16:56,880 --> 00:17:02,130
object hosts the one coordinate space

00:16:59,690 --> 00:17:04,110
that is called the world coordinate

00:17:02,130 --> 00:17:07,500
space which is a single point of

00:17:04,110 --> 00:17:11,400
reference for everything and it also

00:17:07,500 --> 00:17:14,010
contains special objects like cameras

00:17:11,400 --> 00:17:18,930
that do the actual filming of your scene

00:17:14,010 --> 00:17:22,770
and lights that light it up so the

00:17:18,930 --> 00:17:25,800
camera is a special in that it actually

00:17:22,770 --> 00:17:29,580
it does the viewing part of filming your

00:17:25,800 --> 00:17:31,860
scene so it can be positioned and

00:17:29,580 --> 00:17:34,680
rotators like everything else on the

00:17:31,860 --> 00:17:37,530
scene but it has something the field of

00:17:34,680 --> 00:17:39,990
view which you might know from from

00:17:37,530 --> 00:17:42,540
normal cameras which are basically just

00:17:39,990 --> 00:17:45,390
two angles like the horizontal and the

00:17:42,540 --> 00:17:48,750
vertical angle that open up that camera

00:17:45,390 --> 00:17:49,660
view frustum like it's called in

00:17:48,750 --> 00:17:52,330
addition to this

00:17:49,660 --> 00:17:56,830
there's also an airplane and of our

00:17:52,330 --> 00:18:01,500
plane which then define this cut off by

00:17:56,830 --> 00:18:05,410
remote which is called the frustum so

00:18:01,500 --> 00:18:06,970
putting all this together you see and

00:18:05,410 --> 00:18:09,970
lower left for instance there are

00:18:06,970 --> 00:18:12,100
several teapots and the coordinate

00:18:09,970 --> 00:18:14,350
system that you can see there within

00:18:12,100 --> 00:18:18,220
these teapots those are the object

00:18:14,350 --> 00:18:20,160
spaces so all of those teapots are

00:18:18,220 --> 00:18:26,200
basically identical they are just

00:18:20,160 --> 00:18:28,210
rotated around on the scene so um the

00:18:26,200 --> 00:18:31,140
difference between these three pictures

00:18:28,210 --> 00:18:35,140
is just what the point of reference so

00:18:31,140 --> 00:18:37,300
we can we can just view it in any way

00:18:35,140 --> 00:18:39,730
you won't like if you use the world

00:18:37,300 --> 00:18:42,700
space as a point of reference like in

00:18:39,730 --> 00:18:44,530
the bottom left you have the camera

00:18:42,700 --> 00:18:47,680
positioned according to the world space

00:18:44,530 --> 00:18:50,950
and finally there is a view space that

00:18:47,680 --> 00:18:54,040
is used by as a camera and so if you use

00:18:50,950 --> 00:18:57,250
that as a reference you have coordinates

00:18:54,040 --> 00:18:59,530
of the camera are 0 0 0 and everything

00:18:57,250 --> 00:19:02,610
else is positioned related to the camera

00:18:59,530 --> 00:19:05,440
and you can move between these different

00:19:02,610 --> 00:19:08,110
systems using these matrix

00:19:05,440 --> 00:19:10,810
multiplications I mentioned earlier this

00:19:08,110 --> 00:19:15,100
is why you will find a lot of this

00:19:10,810 --> 00:19:19,300
matrix stuff everywhere in every 3d

00:19:15,100 --> 00:19:21,190
implementation then there is a one

00:19:19,300 --> 00:19:25,240
interesting thing how do we do

00:19:21,190 --> 00:19:30,010
perspective so um this is a really neat

00:19:25,240 --> 00:19:32,770
trick so um if you see the left image we

00:19:30,010 --> 00:19:37,870
have that view frustum and the regular

00:19:32,770 --> 00:19:40,570
world coordinates and in order to do

00:19:37,870 --> 00:19:44,110
those perspective so further away

00:19:40,570 --> 00:19:47,590
objects are rendered smaller we simply

00:19:44,110 --> 00:19:51,430
convert this frustum shape of pyramid

00:19:47,590 --> 00:19:55,270
shape into a square and this the squares

00:19:51,430 --> 00:19:58,270
is called the the club space or a

00:19:55,270 --> 00:20:01,530
canonical view volume so all coordinates

00:19:58,270 --> 00:20:04,169
are converted into into values between

00:20:01,530 --> 00:20:08,830
minus 1 and 1

00:20:04,169 --> 00:20:11,710
so um as the frustum defines everything

00:20:08,830 --> 00:20:14,260
that camera can see so does this cube

00:20:11,710 --> 00:20:17,409
and everything that is outside of the

00:20:14,260 --> 00:20:20,770
value range from minus one to one simply

00:20:17,409 --> 00:20:22,390
clipped and will not be visible and on

00:20:20,770 --> 00:20:26,399
the same at the same time you can see

00:20:22,390 --> 00:20:29,110
that uh that as teapot gets distorted

00:20:26,399 --> 00:20:33,220
according to this prospector so if we

00:20:29,110 --> 00:20:37,419
now just watch from left to right into

00:20:33,220 --> 00:20:41,309
this cube we will see we will see the

00:20:37,419 --> 00:20:44,470
perspective transformation taking place

00:20:41,309 --> 00:20:47,409
the conversion from the left image to

00:20:44,470 --> 00:20:49,149
right images done by once again matrix

00:20:47,409 --> 00:20:55,299
multiplication which is called the

00:20:49,149 --> 00:20:57,610
perspective transform so um now we have

00:20:55,299 --> 00:21:01,029
all those paths together so let's talk

00:20:57,610 --> 00:21:03,490
about the rendering algorithm first the

00:21:01,029 --> 00:21:05,470
first step is we need to project all the

00:21:03,490 --> 00:21:08,049
vertices into the canonical view volume

00:21:05,470 --> 00:21:11,980
so we have them into the in this clip

00:21:08,049 --> 00:21:14,620
space then we can start to assemble the

00:21:11,980 --> 00:21:16,600
triangles rasterize up those triangles

00:21:14,620 --> 00:21:19,149
like I explained earlier and then

00:21:16,600 --> 00:21:23,649
finally we can compute the color value

00:21:19,149 --> 00:21:28,899
for every of the fragments in that image

00:21:23,649 --> 00:21:31,840
and yet last step fragment was the

00:21:28,899 --> 00:21:35,500
special term for a pixel that is not yet

00:21:31,840 --> 00:21:37,419
a pixel on screen but just corresponds

00:21:35,500 --> 00:21:41,260
to a picture and as part of one of these

00:21:37,419 --> 00:21:44,200
restaurants triangles so um last step is

00:21:41,260 --> 00:21:47,529
to blend these color values in case

00:21:44,200 --> 00:21:49,059
there's any transparency involved we

00:21:47,529 --> 00:21:51,220
take the value that's already there and

00:21:49,059 --> 00:21:55,899
put where you'll be computed and plant

00:21:51,220 --> 00:21:59,679
them together so and this is what WebGL

00:21:55,899 --> 00:22:02,649
basically does so we have a lot of a lot

00:21:59,679 --> 00:22:05,890
of vertex data coming in with the rep

00:22:02,649 --> 00:22:08,049
power the vertex buffer objects they are

00:22:05,890 --> 00:22:10,600
named attributes and they they run into

00:22:08,049 --> 00:22:12,399
the vertex shader which is the first of

00:22:10,600 --> 00:22:16,000
those two shader programs that you can

00:22:12,399 --> 00:22:16,519
write the vertex shader does does the

00:22:16,000 --> 00:22:19,070
thing

00:22:16,519 --> 00:22:22,190
which is basically just can compute the

00:22:19,070 --> 00:22:24,440
club space Corps not been and there are

00:22:22,190 --> 00:22:28,099
two stages called primitive assembly and

00:22:24,440 --> 00:22:30,979
rasterization and finally the single

00:22:28,099 --> 00:22:32,779
rough arrested fragments are passed on

00:22:30,979 --> 00:22:35,989
to the fragment shader which will then

00:22:32,779 --> 00:22:38,869
compute the color the color blending

00:22:35,989 --> 00:22:40,580
happens and everything lands the frame

00:22:38,869 --> 00:22:44,330
buffer of the graphics car which is

00:22:40,580 --> 00:22:47,089
exactly what will be on screen so the

00:22:44,330 --> 00:22:51,609
vertex shader computes the club space

00:22:47,089 --> 00:22:55,179
coordinates and it gets the vertices in

00:22:51,609 --> 00:22:58,070
something that's called attributes and

00:22:55,179 --> 00:23:03,259
get some additional data I'll just call

00:22:58,070 --> 00:23:05,509
uniforms and it can write output data in

00:23:03,259 --> 00:23:10,419
form of varying variables which are

00:23:05,509 --> 00:23:16,909
passed on to the vertex shader the

00:23:10,419 --> 00:23:21,070
primitive assembly now we'll take this

00:23:16,909 --> 00:23:23,149
computer vertex values in club space

00:23:21,070 --> 00:23:27,109
assembler triangles rest of those

00:23:23,149 --> 00:23:29,659
triangles and find out where each screen

00:23:27,109 --> 00:23:34,759
pixel corresponds to some pixel in the

00:23:29,659 --> 00:23:37,369
triangle and then finally we can compute

00:23:34,759 --> 00:23:40,879
the color so the fragment shader can

00:23:37,369 --> 00:23:42,889
only access data that is pastored by by

00:23:40,879 --> 00:23:49,849
the vertex shader doesn't matter too

00:23:42,889 --> 00:23:51,289
much yeah the primary responsibility of

00:23:49,849 --> 00:23:54,169
the fragment shaders to implement

00:23:51,289 --> 00:23:59,659
lighting equations and implement

00:23:54,169 --> 00:24:02,839
texturing for the surfaces involved so

00:23:59,659 --> 00:24:06,889
let's talk about materials in the real

00:24:02,839 --> 00:24:11,359
world materials so stuff objects are

00:24:06,889 --> 00:24:13,820
made of can react light in three

00:24:11,359 --> 00:24:16,459
different ways basically which is a they

00:24:13,820 --> 00:24:19,700
can absorb the light or parts of the

00:24:16,459 --> 00:24:22,309
light like only specific parts of the

00:24:19,700 --> 00:24:25,099
spectrum which make service bottle cap

00:24:22,309 --> 00:24:28,520
here look blue for instance because

00:24:25,099 --> 00:24:32,310
everything but blue color is absorbed

00:24:28,520 --> 00:24:35,640
they can reflect light or light bounces

00:24:32,310 --> 00:24:37,950
off the surface and finally there's a

00:24:35,640 --> 00:24:42,600
possibility that there's a refraction of

00:24:37,950 --> 00:24:44,940
a material is transparent it slightly

00:24:42,600 --> 00:24:49,590
changes the lights direction which is

00:24:44,940 --> 00:24:53,880
something you see you with lenses glass

00:24:49,590 --> 00:24:59,130
surfaces and everything like that so in

00:24:53,880 --> 00:25:01,530
the 3d world materials are basically

00:24:59,130 --> 00:25:04,320
just what encapsulates all those all

00:25:01,530 --> 00:25:08,940
those parameters that are required to

00:25:04,320 --> 00:25:12,150
calculate the color so we have at least

00:25:08,940 --> 00:25:14,550
one of the other one material per object

00:25:12,150 --> 00:25:18,600
and we can have as many year as one

00:25:14,550 --> 00:25:21,480
material / triangle so each of the

00:25:18,600 --> 00:25:22,980
phases of the object can be rendered in

00:25:21,480 --> 00:25:30,930
a different way with different

00:25:22,980 --> 00:25:33,750
properties so there are some terms you

00:25:30,930 --> 00:25:36,210
should have heard which are basically

00:25:33,750 --> 00:25:37,980
just Lambert shading and the bloom phong

00:25:36,210 --> 00:25:41,730
shading models those are the most

00:25:37,980 --> 00:25:45,840
commonly used and shading models which

00:25:41,730 --> 00:25:48,330
is basically just a simple equation not

00:25:45,840 --> 00:25:52,070
so simple maybe but it's just an

00:25:48,330 --> 00:25:55,230
equation that takes in light sources and

00:25:52,070 --> 00:25:58,040
material properties like the the own

00:25:55,230 --> 00:26:02,040
color of the material or the color of

00:25:58,040 --> 00:26:04,950
reflected light and finally a calculus

00:26:02,040 --> 00:26:07,800
from all these values together the final

00:26:04,950 --> 00:26:10,470
color that you will see if you look at

00:26:07,800 --> 00:26:15,660
that object from this direction at that

00:26:10,470 --> 00:26:18,750
point so um the three used models here

00:26:15,660 --> 00:26:21,300
there's basic which is just a plain

00:26:18,750 --> 00:26:25,140
color independent of every light

00:26:21,300 --> 00:26:27,390
influence lambo chatting does this is a

00:26:25,140 --> 00:26:31,950
very simple and fast lighting equation

00:26:27,390 --> 00:26:35,280
that can just have the few surfaces and

00:26:31,950 --> 00:26:39,240
finally the foam material which can

00:26:35,280 --> 00:26:40,580
properly render also specular highlights

00:26:39,240 --> 00:26:48,140
so gloss

00:26:40,580 --> 00:26:55,039
nose and stuff maybe so again the Beamer

00:26:48,140 --> 00:26:57,140
sucks but as you can see here we have we

00:26:55,039 --> 00:27:00,340
have for instance from from back to

00:26:57,140 --> 00:27:03,950
front here on the the diffuse color

00:27:00,340 --> 00:27:06,679
mount changes for instance so you can

00:27:03,950 --> 00:27:09,380
see in the back the objects are

00:27:06,679 --> 00:27:11,600
basically black and to the front they

00:27:09,380 --> 00:27:14,570
get they get more and more intense red

00:27:11,600 --> 00:27:17,000
then there's parameters like the

00:27:14,570 --> 00:27:21,740
roughness of the material just a bit

00:27:17,000 --> 00:27:25,760
hard to see but can see these specular

00:27:21,740 --> 00:27:28,210
highlights here which are caused by the

00:27:25,760 --> 00:27:37,929
material just not being very rough and

00:27:28,210 --> 00:27:42,200
finally yeah I'm getting a bit stressed

00:27:37,929 --> 00:27:46,730
so I'm texture Maps texture maps is last

00:27:42,200 --> 00:27:49,610
point here and you can see it is

00:27:46,730 --> 00:27:53,090
basically just way to paint images onto

00:27:49,610 --> 00:27:57,649
all 3d objects so these are two simple

00:27:53,090 --> 00:28:01,159
cubes and all phases of these cubes have

00:27:57,649 --> 00:28:06,440
the same same picture of a side wall of

00:28:01,159 --> 00:28:09,380
a box painted on them so we can use by

00:28:06,440 --> 00:28:13,639
using texture maps we can use these

00:28:09,380 --> 00:28:16,490
textures on to add further detail to our

00:28:13,639 --> 00:28:18,950
objects without needing to specify all

00:28:16,490 --> 00:28:22,039
of those in form of three angles and

00:28:18,950 --> 00:28:25,220
colors of triangles so we can simply

00:28:22,039 --> 00:28:27,470
draw an image onto an object surface so

00:28:25,220 --> 00:28:29,899
this is the most common use cases it's

00:28:27,470 --> 00:28:32,240
called diffuse mapping and there are

00:28:29,899 --> 00:28:35,799
several other use cases possible for

00:28:32,240 --> 00:28:38,600
like bump mapping or environment mapping

00:28:35,799 --> 00:28:41,600
alpha mapping so iphone mapping would

00:28:38,600 --> 00:28:43,549
describe how how transparent an object

00:28:41,600 --> 00:28:47,139
would be at a specific point of its

00:28:43,549 --> 00:28:49,730
surface bump mapping describes tiny

00:28:47,139 --> 00:28:53,020
details of the object surface I have an

00:28:49,730 --> 00:28:55,450
example for the environment web mapping

00:28:53,020 --> 00:28:58,420
is something that we need in order to

00:28:55,450 --> 00:29:00,340
describe reflection because the object

00:28:58,420 --> 00:29:05,040
needs to know about its environment in

00:29:00,340 --> 00:29:09,100
order to have something to reflect so

00:29:05,040 --> 00:29:12,880
it's all bit difficult to put into the

00:29:09,100 --> 00:29:16,470
30 minutes I see finally one important

00:29:12,880 --> 00:29:23,380
term here is a UV mapping the UV mapping

00:29:16,470 --> 00:29:26,820
the process of describing how a part of

00:29:23,380 --> 00:29:30,130
your texture image maps to the geometry

00:29:26,820 --> 00:29:32,850
so a UV map is something that you

00:29:30,130 --> 00:29:34,690
definitely need an order to put this

00:29:32,850 --> 00:29:38,080
two-dimensional image on for your

00:29:34,690 --> 00:29:40,840
three-dimensional geometry and as

00:29:38,080 --> 00:29:44,260
promised here is this is an example of

00:29:40,840 --> 00:29:48,460
what what is very simple material can do

00:29:44,260 --> 00:29:54,160
if you just add a bump map so you can

00:29:48,460 --> 00:29:58,390
see here all those detail all this tiny

00:29:54,160 --> 00:30:01,480
tiny specks in the face are simply

00:29:58,390 --> 00:30:07,180
caused by adding a bump map which shows

00:30:01,480 --> 00:30:14,130
how a bit of a displacement how the how

00:30:07,180 --> 00:30:20,650
the face is detailed yeah and finally a

00:30:14,130 --> 00:30:25,650
no time for questions but yeah just find

00:30:20,650 --> 00:30:25,650
me outside thanks for listening

00:30:27,340 --> 00:30:29,400

YouTube URL: https://www.youtube.com/watch?v=kNnyjygRTFI


