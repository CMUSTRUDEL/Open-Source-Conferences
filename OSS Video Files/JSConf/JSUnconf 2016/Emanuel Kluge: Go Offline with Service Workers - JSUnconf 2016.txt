Title: Emanuel Kluge: Go Offline with Service Workers - JSUnconf 2016
Publication date: 2016-06-01
Playlist: JSUnconf 2016
Description: 
	Slides: https://docs.google.com/presentation/d/1crh5m2aDdZPAL07Zo1FtuAliwwghW6FMOEtXviA_BZo/edit

Service Workers are a great way to persist data in the browser cache for offline usage & faster load times. I will give an introduction, point out what it tries to do better than previous solutions and show different ways of using it, depending on the type of data to serve.
Captions: 
	00:00:11,440 --> 00:00:18,710
thank you okay yeah we'll introduce

00:00:15,709 --> 00:00:21,320
myself shortly then I will talk about

00:00:18,710 --> 00:00:24,829
where we do come from regarding offline

00:00:21,320 --> 00:00:26,779
capabilities of browsers after that I

00:00:24,829 --> 00:00:29,450
want to point out what's different now

00:00:26,779 --> 00:00:30,710
with service workers and after that we

00:00:29,450 --> 00:00:33,500
dive in and I'll show you how to

00:00:30,710 --> 00:00:36,850
implement them and yeah after that a

00:00:33,500 --> 00:00:39,200
little outlook on what's next so okay

00:00:36,850 --> 00:00:42,620
who's talking here yeah my name is

00:00:39,200 --> 00:00:44,990
similar ill and I'm a JavaScript

00:00:42,620 --> 00:00:47,360
developer here in Hamburg at gym do we

00:00:44,990 --> 00:00:50,060
are offering like a website builder for

00:00:47,360 --> 00:00:53,239
the common people i'm also on twitter

00:00:50,060 --> 00:00:55,370
and get up you can click the link if you

00:00:53,239 --> 00:00:59,600
are interested in that i will post the

00:00:55,370 --> 00:01:03,440
slides after the talk so okay where do

00:00:59,600 --> 00:01:05,780
we come from you already have heard of

00:01:03,440 --> 00:01:10,159
it I think it's the app cache manifest I

00:01:05,780 --> 00:01:13,340
call it the unloved child well i did i

00:01:10,159 --> 00:01:16,189
do that i mean it has a declarative API

00:01:13,340 --> 00:01:20,509
that's easy to use on the first glance

00:01:16,189 --> 00:01:23,270
you just set up a file like manifest app

00:01:20,509 --> 00:01:26,659
cache and put in the path of the files

00:01:23,270 --> 00:01:29,959
you want to be cached and after their to

00:01:26,659 --> 00:01:32,630
register this fire and by putting this

00:01:29,959 --> 00:01:36,049
manifest a tribute to the HTML element

00:01:32,630 --> 00:01:38,359
and then you're good to go that's it the

00:01:36,049 --> 00:01:41,479
browser parses this file and puts all

00:01:38,359 --> 00:01:45,709
the stuff in the app cache sounds great

00:01:41,479 --> 00:01:49,340
actually but I have this quote by Jake

00:01:45,709 --> 00:01:52,369
Archibald he wrote in an article and he

00:01:49,340 --> 00:01:54,979
said the application cares cashback it's

00:01:52,369 --> 00:01:58,389
like an onion it has many many layers

00:01:54,979 --> 00:02:03,529
and SPS rulem you'll be reduced to tears

00:01:58,389 --> 00:02:07,399
which sounds harsh actually yeah why is

00:02:03,529 --> 00:02:09,590
that well first of all you actually have

00:02:07,399 --> 00:02:14,420
no control over what content is loaded

00:02:09,590 --> 00:02:17,959
with the application cache so you can't

00:02:14,420 --> 00:02:20,330
be sure or like in other way the

00:02:17,959 --> 00:02:22,370
application cache will always serve

00:02:20,330 --> 00:02:26,600
cash content even if there's a fresh

00:02:22,370 --> 00:02:29,090
version and when the flash version of

00:02:26,600 --> 00:02:32,060
the file is loaded from the network then

00:02:29,090 --> 00:02:35,600
there's an update ready event and the

00:02:32,060 --> 00:02:38,420
user has to reload the page to get the

00:02:35,600 --> 00:02:42,530
new version you could do it yourself

00:02:38,420 --> 00:02:44,270
with navigator on a location reload but

00:02:42,530 --> 00:02:46,010
the problem is the user may already have

00:02:44,270 --> 00:02:49,520
interacted with the page and then you

00:02:46,010 --> 00:02:51,830
can't just reload it and the user loses

00:02:49,520 --> 00:02:54,710
all the stuff he has done till this

00:02:51,830 --> 00:02:58,610
moment so yet a little bit complicated

00:02:54,710 --> 00:03:03,440
to get new stuff served the other thing

00:02:58,610 --> 00:03:07,760
is it is not enough to to change files

00:03:03,440 --> 00:03:10,280
and provide them but you have to change

00:03:07,760 --> 00:03:12,260
the manifest itself to signal to the

00:03:10,280 --> 00:03:16,310
application cat hey there are some

00:03:12,260 --> 00:03:20,320
changes please have a look yeah it's not

00:03:16,310 --> 00:03:22,940
that nice and the other funny thing is

00:03:20,320 --> 00:03:25,459
the application cache interferes with

00:03:22,940 --> 00:03:29,930
the normal browser caching so one might

00:03:25,459 --> 00:03:31,820
think it is an replacement for the bra

00:03:29,930 --> 00:03:35,030
for the browser cache but this is not

00:03:31,820 --> 00:03:37,040
the case so even if you manage to tell

00:03:35,030 --> 00:03:41,060
the application cache on to load a new

00:03:37,040 --> 00:03:43,340
version the browser still might say well

00:03:41,060 --> 00:03:46,010
the cache headers say it's valid for

00:03:43,340 --> 00:03:48,050
five years I serve the old version so to

00:03:46,010 --> 00:03:49,820
prevent this you have to disable the

00:03:48,050 --> 00:03:51,489
normal caching for all files that you

00:03:49,820 --> 00:03:57,220
want to have on the application cache

00:03:51,489 --> 00:03:59,450
the sucks and you don't let at you

00:03:57,220 --> 00:04:02,810
content during runtime so we have a

00:03:59,450 --> 00:04:04,670
static file the manifest file and that's

00:04:02,810 --> 00:04:06,709
it during runtime of your web app

00:04:04,670 --> 00:04:10,220
there's no way to edit this fire so if

00:04:06,709 --> 00:04:13,519
you want to cache dynamic content

00:04:10,220 --> 00:04:16,010
request it during runtime you have to do

00:04:13,519 --> 00:04:20,120
some hacking with local host or browser

00:04:16,010 --> 00:04:24,050
databases and finally it doesn't require

00:04:20,120 --> 00:04:28,190
HTTPS just sounds nice but it leads to

00:04:24,050 --> 00:04:29,690
sound security flaws which I don't want

00:04:28,190 --> 00:04:31,170
to point out in detail about that you

00:04:29,690 --> 00:04:34,690
can google it up

00:04:31,170 --> 00:04:37,690
and yeah all these points let mozilla to

00:04:34,690 --> 00:04:41,500
even say okay that's enough we remove

00:04:37,690 --> 00:04:43,510
the support for app cache well soon you

00:04:41,500 --> 00:04:45,940
won't be able to use app cache in

00:04:43,510 --> 00:04:47,650
Firefox anymore and maybe other browser

00:04:45,940 --> 00:04:53,140
we're not will follow I don't know at

00:04:47,650 --> 00:04:54,640
the moment but it is possible so yeah

00:04:53,140 --> 00:04:57,760
what is actually different service

00:04:54,640 --> 00:05:00,580
workers then service worker it's a new

00:04:57,760 --> 00:05:02,560
approach to caching and first of all

00:05:00,580 --> 00:05:05,680
they have no declarative API by the

00:05:02,560 --> 00:05:08,410
programmatic IPI so you write JavaScript

00:05:05,680 --> 00:05:11,860
and tell the browser which files to cash

00:05:08,410 --> 00:05:14,710
and when to low load or serve which

00:05:11,860 --> 00:05:17,830
contents and this javascript is executed

00:05:14,710 --> 00:05:24,550
in a serviceworker threat during the run

00:05:17,830 --> 00:05:26,170
time and as a service workers running it

00:05:24,550 --> 00:05:28,870
acts like a proxy between your web

00:05:26,170 --> 00:05:33,280
application and the network so we have

00:05:28,870 --> 00:05:38,710
full control over which requests go go

00:05:33,280 --> 00:05:41,470
out and so you can remove files and add

00:05:38,710 --> 00:05:43,780
files to the cash during the run time so

00:05:41,470 --> 00:05:46,330
you are not limited to static assets

00:05:43,780 --> 00:05:48,280
that you define before deploying your

00:05:46,330 --> 00:05:52,810
web app but you can do this in the rant

00:05:48,280 --> 00:05:54,910
at runtime yeah and finally as the

00:05:52,810 --> 00:05:58,240
service work as a proxy you have full

00:05:54,910 --> 00:06:01,480
control what to serve there are several

00:05:58,240 --> 00:06:03,460
strategies to what serve when if to hit

00:06:01,480 --> 00:06:09,820
the cash out forward the request to the

00:06:03,460 --> 00:06:14,080
network I will point out that later okay

00:06:09,820 --> 00:06:16,330
so that the theoretical background let's

00:06:14,080 --> 00:06:19,810
have a look at how to use them there are

00:06:16,330 --> 00:06:22,630
some prerequisites and first you need a

00:06:19,810 --> 00:06:26,320
secure connection this is learning from

00:06:22,630 --> 00:06:28,540
the app cache luckily you don't need it

00:06:26,320 --> 00:06:31,150
on the localhost so you don't have to go

00:06:28,540 --> 00:06:32,980
through the hassle to install a

00:06:31,150 --> 00:06:37,630
certificate when you just want to fill

00:06:32,980 --> 00:06:40,030
around on your machine another thing is

00:06:37,630 --> 00:06:41,610
the support of the browsers at the

00:06:40,030 --> 00:06:45,060
moment only five

00:06:41,610 --> 00:06:49,620
and opera and chrome support service

00:06:45,060 --> 00:06:52,620
workers log on mobile and desktop

00:06:49,620 --> 00:06:54,870
browsers but actually there shouldn't be

00:06:52,620 --> 00:06:56,189
a problem so service workers are

00:06:54,870 --> 00:06:59,909
regarded as a progressive enhancement

00:06:56,189 --> 00:07:02,550
and your web app should we work fine

00:06:59,909 --> 00:07:04,949
without them and get even better when

00:07:02,550 --> 00:07:09,000
the users browser support service

00:07:04,949 --> 00:07:11,189
workers and finally you should have a

00:07:09,000 --> 00:07:14,580
basic understanding of promises so the

00:07:11,189 --> 00:07:16,169
API around service workers makes heavily

00:07:14,580 --> 00:07:18,539
user of them and if you aren't familiar

00:07:16,169 --> 00:07:24,180
with promises the code might look a

00:07:18,539 --> 00:07:26,340
little awkward okay first of all if you

00:07:24,180 --> 00:07:30,000
want to use service workers you have to

00:07:26,340 --> 00:07:32,669
register them and yeah as I said it's a

00:07:30,000 --> 00:07:35,219
progressive enhancement so we first look

00:07:32,669 --> 00:07:38,639
at the the Navigator object if there's

00:07:35,219 --> 00:07:40,650
this property service worker and if this

00:07:38,639 --> 00:07:43,250
exists the browser should support them

00:07:40,650 --> 00:07:46,250
and we call the register method and

00:07:43,250 --> 00:07:49,520
register our service worker jas file

00:07:46,250 --> 00:07:52,289
that's one thing to have in mind here

00:07:49,520 --> 00:07:54,990
the location of this file defines the

00:07:52,289 --> 00:07:58,440
scope so if you are used to put all your

00:07:54,990 --> 00:08:01,469
javascript in a J a subfolder you might

00:07:58,440 --> 00:08:05,069
be tempted to do to do the same with the

00:08:01,469 --> 00:08:07,319
service work of fire but then your users

00:08:05,069 --> 00:08:10,560
won't have any caching because they

00:08:07,319 --> 00:08:13,080
won't go in in the part of your web app

00:08:10,560 --> 00:08:16,469
where j/s isn't part of your web app

00:08:13,080 --> 00:08:18,839
then for the user so normally I think

00:08:16,469 --> 00:08:21,319
you want to do I put this in the root of

00:08:18,839 --> 00:08:21,319
your web app

00:08:27,400 --> 00:08:33,500
there's also another way in the making

00:08:29,960 --> 00:08:35,690
and this isn't supported at the moment

00:08:33,500 --> 00:08:38,719
but soon crown was supported in Firefox

00:08:35,690 --> 00:08:41,769
signaled that they like this approach as

00:08:38,719 --> 00:08:43,880
well and this is a declarative way to

00:08:41,769 --> 00:08:47,060
register the service worker with the

00:08:43,880 --> 00:08:52,820
link element I just put it here for

00:08:47,060 --> 00:08:55,220
completeness then when your service

00:08:52,820 --> 00:08:59,029
workers finally registered you can yet

00:08:55,220 --> 00:09:03,200
start managing your caches and in the

00:08:59,029 --> 00:09:06,500
file first of all you need aversion to

00:09:03,200 --> 00:09:08,959
to control which files are cached and

00:09:06,500 --> 00:09:11,899
which old files to delete so every time

00:09:08,959 --> 00:09:14,750
you edit this version you have the

00:09:11,899 --> 00:09:16,910
opportunity to clean up your cash I

00:09:14,750 --> 00:09:19,190
choose this number but you can choose

00:09:16,910 --> 00:09:24,550
whatever string you want like animal

00:09:19,190 --> 00:09:26,930
names or your favorite manga characters

00:09:24,550 --> 00:09:30,829
they only have to change when you deploy

00:09:26,930 --> 00:09:33,529
a new state yeah after that I define an

00:09:30,829 --> 00:09:37,040
area with static assets like the

00:09:33,529 --> 00:09:39,920
index.html and some CSS some JavaScript

00:09:37,040 --> 00:09:44,029
a nice image to make it more beautiful

00:09:39,920 --> 00:09:45,800
and in the life cycle of the

00:09:44,029 --> 00:09:48,649
serviceworker there's this installation

00:09:45,800 --> 00:09:52,310
process and when this happens the car

00:09:48,649 --> 00:09:56,570
back on the lifecycle event is called

00:09:52,310 --> 00:09:59,510
and the event object that is passed into

00:09:56,570 --> 00:10:02,300
it has this wait until method which

00:09:59,510 --> 00:10:04,310
expects the promise so the installation

00:10:02,300 --> 00:10:07,310
stops at this moment and we have the

00:10:04,310 --> 00:10:11,510
opportunity to put our files into the

00:10:07,310 --> 00:10:16,100
cache then the process goes on so we

00:10:11,510 --> 00:10:19,399
open the cash and put our static files

00:10:16,100 --> 00:10:21,740
into it by the way this caches object

00:10:19,399 --> 00:10:24,920
it's not only available in the service

00:10:21,740 --> 00:10:26,870
worker but also in your main web

00:10:24,920 --> 00:10:29,449
application on the windows object so you

00:10:26,870 --> 00:10:33,260
could actually put contents into the

00:10:29,449 --> 00:10:35,910
cash from there if this does make sense

00:10:33,260 --> 00:10:39,120
in the situation

00:10:35,910 --> 00:10:43,320
so yeah we have put our contents into

00:10:39,120 --> 00:10:45,900
the cash and the life cycle goes on next

00:10:43,320 --> 00:10:49,080
it will be activated and there again we

00:10:45,900 --> 00:10:52,170
have a call an event to to attach a call

00:10:49,080 --> 00:10:56,160
vector and here we have again our event

00:10:52,170 --> 00:10:59,280
wait until method and when the service

00:10:56,160 --> 00:11:02,760
worker is activated we can clean the

00:10:59,280 --> 00:11:05,750
caches by getting all the keys from it

00:11:02,760 --> 00:11:08,190
and compared to our current version and

00:11:05,750 --> 00:11:10,410
if the cash doesn't match our current

00:11:08,190 --> 00:11:12,750
regime be just deleted stuff and so

00:11:10,410 --> 00:11:16,950
everything is tidy and we only have the

00:11:12,750 --> 00:11:19,410
latest content in our cash here then

00:11:16,950 --> 00:11:22,170
finally after the activation was

00:11:19,410 --> 00:11:25,200
successful the service workers start

00:11:22,170 --> 00:11:27,020
intercepting event requests and every

00:11:25,200 --> 00:11:29,910
time a request is made in our web app

00:11:27,020 --> 00:11:32,640
this car baganda fetch event is called

00:11:29,910 --> 00:11:36,200
and there we have a respond with method

00:11:32,640 --> 00:11:40,380
on our event object which expects a

00:11:36,200 --> 00:11:42,270
expected promise which then gets the

00:11:40,380 --> 00:11:46,680
contents that are served to the web app

00:11:42,270 --> 00:11:49,830
and as I only have static assets in my

00:11:46,680 --> 00:11:51,570
cash at the moment I immediately hit the

00:11:49,830 --> 00:11:54,690
cash I don't have to go to the network

00:11:51,570 --> 00:11:59,520
because I know what is needed actually

00:11:54,690 --> 00:12:02,340
there are no requests planned so I look

00:11:59,520 --> 00:12:05,640
up with the match method on the cash and

00:12:02,340 --> 00:12:09,140
if there's a response I return this and

00:12:05,640 --> 00:12:11,760
if there is no fire or no resource found

00:12:09,140 --> 00:12:14,070
then the response is undefined and then

00:12:11,760 --> 00:12:21,240
I forward to request and to the network

00:12:14,070 --> 00:12:23,670
with the fatty function and yeah that's

00:12:21,240 --> 00:12:26,850
the basic usage of the service worker

00:12:23,670 --> 00:12:31,230
actually what we've seen so far is like

00:12:26,850 --> 00:12:33,390
a usage and there is quite similar to

00:12:31,230 --> 00:12:37,560
the app cache we have static files I'm

00:12:33,390 --> 00:12:40,260
defined before before deployment of our

00:12:37,560 --> 00:12:43,500
web app but it all happens with less

00:12:40,260 --> 00:12:48,390
pain and more control and hopefully more

00:12:43,500 --> 00:12:49,660
security will but what is more

00:12:48,390 --> 00:12:56,770
interesting with service work

00:12:49,660 --> 00:13:00,610
the caching of dynamic content so let's

00:12:56,770 --> 00:13:02,830
go on and look how to do this there are

00:13:00,610 --> 00:13:06,040
basically two strategies when it comes

00:13:02,830 --> 00:13:08,350
to us dynamic contents requested during

00:13:06,040 --> 00:13:13,390
the run time and the first one is

00:13:08,350 --> 00:13:16,000
network first so you immediately forward

00:13:13,390 --> 00:13:17,860
the request to the network and if it

00:13:16,000 --> 00:13:20,830
fails you look up in the cache if you

00:13:17,860 --> 00:13:24,310
have an old version and if it succeeds

00:13:20,830 --> 00:13:28,480
you update the cache and you serve the

00:13:24,310 --> 00:13:30,910
response to the web app yeah this code

00:13:28,480 --> 00:13:34,360
is a bit a little bit just a little bit

00:13:30,910 --> 00:13:37,030
more code about this approach first of

00:13:34,360 --> 00:13:38,770
all we have another version for the

00:13:37,030 --> 00:13:43,360
dynamic contents so it doesn't interfere

00:13:38,770 --> 00:13:46,990
with our static assets and we

00:13:43,360 --> 00:13:52,930
immediately forward the request to the

00:13:46,990 --> 00:13:55,450
network and inside the decor back and

00:13:52,930 --> 00:14:00,040
the Dan then method and we open our cash

00:13:55,450 --> 00:14:02,500
with our current version and update the

00:14:00,040 --> 00:14:07,120
cache that matches the requested

00:14:02,500 --> 00:14:10,870
resource and we have this funny thing

00:14:07,120 --> 00:14:14,950
here we have to clone the response so

00:14:10,870 --> 00:14:17,560
responses response objects when they are

00:14:14,950 --> 00:14:21,040
used once they're used up and gun so you

00:14:17,560 --> 00:14:24,670
can't use the poor response for the cash

00:14:21,040 --> 00:14:26,320
and for returning it to the web app we

00:14:24,670 --> 00:14:29,050
have to clone it so the cash gets a

00:14:26,320 --> 00:14:33,040
clone and the original one gets served

00:14:29,050 --> 00:14:35,680
to the web app and finally if this fails

00:14:33,040 --> 00:14:39,370
we just look up in the cache if we have

00:14:35,680 --> 00:14:43,420
an old version to serve what we see here

00:14:39,370 --> 00:14:46,570
is that we don't have to care about the

00:14:43,420 --> 00:14:49,870
online status of the user there's this

00:14:46,570 --> 00:14:52,180
online property on the navigator object

00:14:49,870 --> 00:14:55,990
which tells us if the users online or

00:14:52,180 --> 00:14:58,300
not but it isn't reliable so if users

00:14:55,990 --> 00:15:01,240
are on shitty mobile connections which

00:14:58,300 --> 00:15:03,480
leads to time outs or if they are on an

00:15:01,240 --> 00:15:06,060
airport and don't want to pay for

00:15:03,480 --> 00:15:08,100
the Wi-Fi this property you will tell us

00:15:06,060 --> 00:15:11,220
we are the users online but actually

00:15:08,100 --> 00:15:14,100
they aren't and with the service worker

00:15:11,220 --> 00:15:15,690
of this approach to hit the network and

00:15:14,100 --> 00:15:18,620
then look up in the cash we don't have

00:15:15,690 --> 00:15:24,050
to care about that just do our stuff and

00:15:18,620 --> 00:15:28,410
finally something will come to the user

00:15:24,050 --> 00:15:31,740
yeah when to use this approach this is

00:15:28,410 --> 00:15:35,430
good for for data that is updated very

00:15:31,740 --> 00:15:39,170
frequently like soccer data at the

00:15:35,430 --> 00:15:42,570
weekend so if you have a web app

00:15:39,170 --> 00:15:44,220
displaying soccer results you might not

00:15:42,570 --> 00:15:46,920
want to show the user the results from

00:15:44,220 --> 00:15:50,699
the last weekend but the act the current

00:15:46,920 --> 00:15:53,100
want to hit the network and if that

00:15:50,699 --> 00:15:56,699
fails yeah you have to go with all data

00:15:53,100 --> 00:15:59,100
and weather forecasts and stock market

00:15:56,699 --> 00:16:03,180
data are typical examples for this kind

00:15:59,100 --> 00:16:05,970
of contents here the other approach

00:16:03,180 --> 00:16:08,339
would be to go cash first so just look

00:16:05,970 --> 00:16:10,860
up in the cash and serve content really

00:16:08,339 --> 00:16:14,540
fast but also do a request to look if

00:16:10,860 --> 00:16:14,540
there's a new version of this resource

00:16:15,500 --> 00:16:20,100
the code is a little bit different I

00:16:18,120 --> 00:16:21,870
have this unavailable function i hope

00:16:20,100 --> 00:16:26,610
you can read this from behind actually

00:16:21,870 --> 00:16:30,660
this is okay no one said anything that's

00:16:26,610 --> 00:16:32,940
good yeah this is unavailable function

00:16:30,660 --> 00:16:35,220
which return to response with status are

00:16:32,940 --> 00:16:38,220
five or three this is our last resort

00:16:35,220 --> 00:16:41,339
but hopefully we'll get contents before

00:16:38,220 --> 00:16:43,949
so we immediately start hitting the cash

00:16:41,339 --> 00:16:47,970
and look for a resource that matches our

00:16:43,949 --> 00:16:50,699
request and at the end you can see we

00:16:47,970 --> 00:16:54,779
return this but we also do our request

00:16:50,699 --> 00:16:58,050
and again update the cache mr. the

00:16:54,779 --> 00:17:00,449
response of the request succeeds and if

00:16:58,050 --> 00:17:05,280
the result from the cache is undefined

00:17:00,449 --> 00:17:08,459
we will return our fetch promise and if

00:17:05,280 --> 00:17:10,230
this fails as well then yeah we have to

00:17:08,459 --> 00:17:13,290
take our unavailable function that

00:17:10,230 --> 00:17:16,720
returns to five or three so we can

00:17:13,290 --> 00:17:18,990
either return all the content fast

00:17:16,720 --> 00:17:24,400
or a newer content from the network or

00:17:18,990 --> 00:17:28,780
we fail gracefully with a 5 or 3 yeah

00:17:24,400 --> 00:17:30,850
this is a good strategy for for contents

00:17:28,780 --> 00:17:35,320
that aren't saw updated so frequently

00:17:30,850 --> 00:17:39,450
like rock pools and news articles there

00:17:35,320 --> 00:17:39,450
you can surf fast which is always good

00:17:39,750 --> 00:17:45,039
yeah I kind of lied to you when I said

00:17:43,299 --> 00:17:48,400
there are basically two strategies and

00:17:45,039 --> 00:17:50,110
there are more you might have contents

00:17:48,400 --> 00:17:52,840
where you don't want to serve old stuff

00:17:50,110 --> 00:17:54,909
and only hit the network and don't

00:17:52,840 --> 00:17:58,659
deserve anything at all if the users not

00:17:54,909 --> 00:18:00,820
online you may also have contents where

00:17:58,659 --> 00:18:02,860
you only have to hit the cash remember

00:18:00,820 --> 00:18:05,980
the first example where I defined the

00:18:02,860 --> 00:18:08,679
static assets I can be pretty sure that

00:18:05,980 --> 00:18:11,200
they are installed every time the web

00:18:08,679 --> 00:18:13,750
app is loaded and the service workers

00:18:11,200 --> 00:18:16,150
installed so actually you don't have to

00:18:13,750 --> 00:18:19,090
talk about anything and to the network I

00:18:16,150 --> 00:18:21,220
just can hit the cash and serve really

00:18:19,090 --> 00:18:27,309
fast and boost performance of my web app

00:18:21,220 --> 00:18:30,100
and asses fastest approach on some

00:18:27,309 --> 00:18:33,549
devices maybe take some time to to read

00:18:30,100 --> 00:18:37,480
from disk if the device is old and test

00:18:33,549 --> 00:18:39,970
a slow disk i/o operation and if you

00:18:37,480 --> 00:18:41,559
request a very small aesthetic asset it

00:18:39,970 --> 00:18:44,860
might be faster to get it from the

00:18:41,559 --> 00:18:46,960
network so you can start a race and make

00:18:44,860 --> 00:18:50,200
the request to the network and ask the

00:18:46,960 --> 00:18:56,710
cash and whoever's fastest allowed to

00:18:50,200 --> 00:18:59,169
self eventually so this was it yeah

00:18:56,710 --> 00:19:02,950
what's next there are some service

00:18:59,169 --> 00:19:06,370
worker related specifications for

00:19:02,950 --> 00:19:08,799
example they push API which enables you

00:19:06,370 --> 00:19:11,350
to annoy your users with push

00:19:08,799 --> 00:19:14,559
notifications and what's nice about

00:19:11,350 --> 00:19:16,480
service workers is that they they are

00:19:14,559 --> 00:19:19,840
running in a threat in the background so

00:19:16,480 --> 00:19:21,610
even if the web app is not active they

00:19:19,840 --> 00:19:28,000
can receive push notifications and you

00:19:21,610 --> 00:19:30,050
can handle them also and it does the

00:19:28,000 --> 00:19:35,030
interesting thing is the back

00:19:30,050 --> 00:19:37,040
think so the browser can store made

00:19:35,030 --> 00:19:39,850
requests like post requests that the

00:19:37,040 --> 00:19:44,150
user writes a message or something

00:19:39,850 --> 00:19:45,890
similar and if the user then is offline

00:19:44,150 --> 00:19:54,830
it's stored in the background and then

00:19:45,890 --> 00:19:58,130
zoomed when the user goes online yeah

00:19:54,830 --> 00:20:02,810
and finally give a fencing um it's a

00:19:58,130 --> 00:20:05,510
good way to react to the the kaiserin

00:20:02,810 --> 00:20:08,180
when the user enters or leaves a

00:20:05,510 --> 00:20:12,740
specific region you could do this with

00:20:08,180 --> 00:20:15,170
geolocation but here again we have this

00:20:12,740 --> 00:20:16,610
nice thing that the background the

00:20:15,170 --> 00:20:19,790
service worker is running in a

00:20:16,610 --> 00:20:24,490
background so the web app doesn't have

00:20:19,790 --> 00:20:30,920
to be active and you can react to this

00:20:24,490 --> 00:20:33,590
nonetheless yeah what's also next is I

00:20:30,920 --> 00:20:35,930
propose you learn more about service

00:20:33,590 --> 00:20:39,560
workers and I have a list of resources

00:20:35,930 --> 00:20:42,050
which I can recommend like a very good

00:20:39,560 --> 00:20:46,130
introduction to the topic on html5 rocks

00:20:42,050 --> 00:20:48,080
calm and if you are more into this topic

00:20:46,130 --> 00:20:52,970
this offline cookbook by Jake Archibald

00:20:48,080 --> 00:20:58,310
is covering some summer strategies to

00:20:52,970 --> 00:21:02,480
serve content and they are suspect was

00:20:58,310 --> 00:21:04,040
the UL service work ers this is a

00:21:02,480 --> 00:21:08,090
collection of some very interesting

00:21:04,040 --> 00:21:11,780
recipes it goes really deep into the

00:21:08,090 --> 00:21:14,090
topic and also nice is instant loading

00:21:11,780 --> 00:21:18,200
with service workers it's a video from a

00:21:14,090 --> 00:21:20,390
talk at Google i/o and it also covers

00:21:18,200 --> 00:21:22,490
tooling around service workers like

00:21:20,390 --> 00:21:24,470
having a guard task building a service

00:21:22,490 --> 00:21:28,880
worker including all the aesthetic

00:21:24,470 --> 00:21:32,090
assets and fresh version strings and he

00:21:28,880 --> 00:21:35,570
talks about the polymer component that

00:21:32,090 --> 00:21:38,060
handles service workers declaratively I

00:21:35,570 --> 00:21:39,500
recommend this even if you don't want to

00:21:38,060 --> 00:21:42,800
use this component but it's interesting

00:21:39,500 --> 00:21:46,380
to see how they solve problems coming up

00:21:42,800 --> 00:21:48,060
yeah and if you want to see what the

00:21:46,380 --> 00:21:51,210
browser supporters have a look at this

00:21:48,060 --> 00:21:55,980
website that's interesting to see how

00:21:51,210 --> 00:21:58,950
the things develop yeah and finally if

00:21:55,980 --> 00:22:00,720
you have your own web app boosted with

00:21:58,950 --> 00:22:05,910
service workers you might need a service

00:22:00,720 --> 00:22:08,010
with HTTPS I can recommend search dot as

00:22:05,910 --> 00:22:12,390
age I put my demos up there you get a

00:22:08,010 --> 00:22:14,580
subdomain and can force https or you

00:22:12,390 --> 00:22:18,470
want to use cloud sec for your get up

00:22:14,580 --> 00:22:21,270
pages with a custom domain or finally

00:22:18,470 --> 00:22:24,960
let's encrypt thought the latest

00:22:21,270 --> 00:22:29,070
solution for bringing https to the

00:22:24,960 --> 00:22:31,170
masses yeah that's finally it thanks for

00:22:29,070 --> 00:22:34,190
listening if you have questions then

00:22:31,170 --> 00:22:34,190

YouTube URL: https://www.youtube.com/watch?v=ou6oPEEyjNQ


