Title: JS Monthly - November 2020 - Live Stream
Publication date: 2020-11-27
Playlist: JS Monthly London
Description: 
	https://twitter.com/jsmonthlylondon

12:40 Introduction
15:15 What the heck(ma) is ECMA? // Abby Mitchell
40:35 Q&A
52:00 Introduction to Computer Vision(open CV) // Italo
1:09:35 Q&A

Agenda
18:30 - Introduction
18:35 - What the heck(ma) is ECMA? // Abby Mitchell
Have you ever felt confused by terms like ES5, ES6, ES2015? What is the difference? Is it all still Javascript? Why isn't it JS2015???

These are all great questions that will be answered during this talk. We'll cover a bit about the history of Javascript standards, where you can find the most up to date information, and the key syntactic differences between the most common versions.

18:50 - Break

19:00 - Introduction to Computer Vision(open CV) in JS // Italo Jose Goncalves De Oliveira
Do you wanna know computer vision but don't know Python? Are you in a project that needs to be coded in a fast way and can't use a custom deep learning model?

In this talk, we will see how the classical computer vision works and how a computer vision engineer can solve many problems in a fast and easy way than deep leaning. Everything in Javascript!

// *****************************

If you have a talk we'd love to hear from you.

Submit your talk here:(https://docs.google.com/forms/d/e/1FAIpQLSdFaatfveOUbrmer47jYb5J4J4ttxAFc1CgTjUDltBXmDOJmg/viewform)

// *****************************
// Conferences
//******************************

CityJS Conference (26 Mar 2021) http://CityJSConf.org

Regent Street Cinema - Hurry up only a few tickets left!

Early birds only for 120 pounds

A hybrid event

// ****************************


_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:27,170 --> 00:01:27,840
[Music]

00:01:24,840 --> 00:01:27,840
hmm

00:01:33,580 --> 00:02:01,209
[Music]

00:02:20,450 --> 00:02:43,300
[Music]

00:02:48,840 --> 00:02:51,840
so

00:03:00,060 --> 00:08:09,339
[Music]

00:08:10,840 --> 00:08:13,840
um

00:08:19,610 --> 00:10:27,969
[Music]

00:10:30,839 --> 00:10:33,839
so

00:10:44,839 --> 00:10:47,839
so

00:10:50,990 --> 00:11:15,220
[Music]

00:11:12,839 --> 00:12:15,519
do

00:11:15,220 --> 00:12:15,519
[Music]

00:12:26,720 --> 00:12:32,079
okay i said wait wait

00:12:29,760 --> 00:12:32,079
and

00:12:33,040 --> 00:12:38,320
hello everyone and welcome to november

00:12:35,839 --> 00:12:41,519
to our november meetup and

00:12:38,320 --> 00:12:43,040
we have two amazing speakers i'm gonna

00:12:41,519 --> 00:12:47,920
tell you a bit more about them

00:12:43,040 --> 00:12:47,920
in a while and

00:12:48,959 --> 00:12:56,880
welcome this is our eighth online meetup

00:12:53,600 --> 00:12:58,880
and we have some announcements

00:12:56,880 --> 00:13:00,639
and i would like to let you know that

00:12:58,880 --> 00:13:03,519
we're still going ahead with

00:13:00,639 --> 00:13:05,360
cdjs conference on the 26th of march

00:13:03,519 --> 00:13:08,000
00:13:05,360 --> 00:13:09,440
it's a hybrid event depending on the

00:13:08,000 --> 00:13:12,399
conditions of the

00:13:09,440 --> 00:13:14,160
the current situation we can decide if

00:13:12,399 --> 00:13:16,800
it's going to be just online or if it's

00:13:14,160 --> 00:13:20,000
going to be in a venue

00:13:16,800 --> 00:13:23,440
and we have we have an announcement

00:13:20,000 --> 00:13:25,839
and i have um

00:13:23,440 --> 00:13:28,000
i have some tickets to offer for the

00:13:25,839 --> 00:13:30,720
international javascript conference

00:13:28,000 --> 00:13:33,279
that's happening on the 19th of april

00:13:30,720 --> 00:13:38,000
and between 19th and 22nd of april

00:13:33,279 --> 00:13:40,720
2021 you can access the

00:13:38,000 --> 00:13:42,160
more information about this event on

00:13:40,720 --> 00:13:45,920
this url

00:13:42,160 --> 00:13:49,519
and we are also giving you 15 off

00:13:45,920 --> 00:13:53,120
with this code it's from also another

00:13:49,519 --> 00:13:56,560
fellow meetup the london not user group

00:13:53,120 --> 00:13:56,560
but we are saying the same code

00:13:56,959 --> 00:14:02,320
we are looking for new faces and new

00:13:59,040 --> 00:14:05,360
people to help us to make our meetup

00:14:02,320 --> 00:14:08,399
better and to to get more and

00:14:05,360 --> 00:14:08,959
more out of our meet up if you are happy

00:14:08,399 --> 00:14:12,240
to

00:14:08,959 --> 00:14:15,519
join our meetup in the leadership team

00:14:12,240 --> 00:14:16,720
you can send us an email at js monthly

00:14:15,519 --> 00:14:19,519
london

00:14:16,720 --> 00:14:22,160
gmail.com i'm going to share this into

00:14:19,519 --> 00:14:22,160
in the chat

00:14:22,880 --> 00:14:26,560
and i'm going to pass you now to our

00:14:25,120 --> 00:14:29,360
first speaker

00:14:26,560 --> 00:14:30,800
and abi this is going to be talking

00:14:29,360 --> 00:14:34,399
about um

00:14:30,800 --> 00:14:37,760
what the heck ma is ekma

00:14:34,399 --> 00:14:45,839
and then i will pass you to abi

00:14:37,760 --> 00:14:45,839
thank you very much thanks very much

00:15:18,240 --> 00:15:21,360
hi everyone thank you for coming along

00:15:20,480 --> 00:15:24,560
to this talk

00:15:21,360 --> 00:15:28,720
i'm gonna be um going through what the

00:15:24,560 --> 00:15:29,279
heck ma is ekma i apologize for my bad

00:15:28,720 --> 00:15:31,440
puns

00:15:29,279 --> 00:15:32,880
and i can either confirm nor deny that

00:15:31,440 --> 00:15:34,399
that will be the last one that you will

00:15:32,880 --> 00:15:37,440
hear this evening

00:15:34,399 --> 00:15:40,959
um so i don't know what kind of level

00:15:37,440 --> 00:15:43,040
um you guys who are watching this um

00:15:40,959 --> 00:15:44,480
talk are in terms of your journey into

00:15:43,040 --> 00:15:46,959
javascript so

00:15:44,480 --> 00:15:48,639
i hope that this talk will kind of cater

00:15:46,959 --> 00:15:49,600
to a range of different experience

00:15:48,639 --> 00:15:53,120
levels

00:15:49,600 --> 00:15:55,279
um and really this is a talk to kind of

00:15:53,120 --> 00:15:56,480
get you guys familiar with the concept

00:15:55,279 --> 00:15:58,000
of ecmascript

00:15:56,480 --> 00:16:00,079
and what it means in relation to

00:15:58,000 --> 00:16:01,600
javascript i think if you

00:16:00,079 --> 00:16:03,519
have started using javascript you're

00:16:01,600 --> 00:16:05,440
probably like me

00:16:03,519 --> 00:16:07,519
when i first started get quite confused

00:16:05,440 --> 00:16:08,480
when you go on stack overflow and people

00:16:07,519 --> 00:16:11,839
are using

00:16:08,480 --> 00:16:13,519
random combinations of years and letters

00:16:11,839 --> 00:16:17,040
and numbers and es

00:16:13,519 --> 00:16:18,639
5 or 6 or es 2015 and it can get a bit

00:16:17,040 --> 00:16:20,240
confusing and you might think what has

00:16:18,639 --> 00:16:23,440
this got to do with javascript

00:16:20,240 --> 00:16:24,079
um so hopefully i'm gonna help um clear

00:16:23,440 --> 00:16:27,600
some of that

00:16:24,079 --> 00:16:30,160
confusion up today so firstly

00:16:27,600 --> 00:16:31,360
let's talk about what is ecmascript

00:16:30,160 --> 00:16:34,399
ecmascript

00:16:31,360 --> 00:16:36,320
and javascript are the same

00:16:34,399 --> 00:16:37,759
except when we talk about ecmascript

00:16:36,320 --> 00:16:40,800
what we're really talking about

00:16:37,759 --> 00:16:42,560
is the official specification

00:16:40,800 --> 00:16:44,560
of the coding language that is

00:16:42,560 --> 00:16:45,279
javascript and javascript is the term we

00:16:44,560 --> 00:16:47,199
use

00:16:45,279 --> 00:16:49,600
kind of more colloquially whereas

00:16:47,199 --> 00:16:52,000
ecmascript we use or es which

00:16:49,600 --> 00:16:53,519
is shortened to es we use when we're

00:16:52,000 --> 00:16:56,320
trying to

00:16:53,519 --> 00:16:57,360
refer to a specific version um

00:16:56,320 --> 00:16:59,600
javascript

00:16:57,360 --> 00:17:00,800
and coding languages are you know the

00:16:59,600 --> 00:17:03,040
same as

00:17:00,800 --> 00:17:05,039
human languages and in the fact that

00:17:03,040 --> 00:17:08,240
they evolve over time

00:17:05,039 --> 00:17:10,799
um they don't stay static um

00:17:08,240 --> 00:17:13,360
and with something like javascript it's

00:17:10,799 --> 00:17:19,199
evolving quite at quite a fast pace and

00:17:13,360 --> 00:17:21,280
nowadays we get

00:17:19,199 --> 00:17:24,000
um so i'll give you a bit about the

00:17:21,280 --> 00:17:27,360
history of how the language has evolved

00:17:24,000 --> 00:17:30,880
um so the reason it's called ecmascript

00:17:27,360 --> 00:17:33,919
is that the ecma international is the

00:17:30,880 --> 00:17:36,960
um kind of the international

00:17:33,919 --> 00:17:37,520
committee that decides what features are

00:17:36,960 --> 00:17:40,880
going to go

00:17:37,520 --> 00:17:43,760
into each version of javascript

00:17:40,880 --> 00:17:46,320
um the first kind of standard for the

00:17:43,760 --> 00:17:49,520
language was published in 1997

00:17:46,320 --> 00:17:52,400
and then that was officially es1

00:17:49,520 --> 00:17:53,200
um and then over the next kind of decade

00:17:52,400 --> 00:17:56,000
or so

00:17:53,200 --> 00:17:56,960
there were a few different releases es2

00:17:56,000 --> 00:18:01,120
00:17:56,960 --> 00:18:02,720
4 5 um and that was when in 2009 es5

00:18:01,120 --> 00:18:06,080
came out and that's probably the most

00:18:02,720 --> 00:18:07,520
um that was a pretty big um release

00:18:06,080 --> 00:18:08,320
there was a lot of new features into

00:18:07,520 --> 00:18:10,960
that

00:18:08,320 --> 00:18:13,360
um and then since then they didn't do

00:18:10,960 --> 00:18:14,240
very much until 2015 when es6 was

00:18:13,360 --> 00:18:16,880
released

00:18:14,240 --> 00:18:17,360
and this was a pretty big year because

00:18:16,880 --> 00:18:20,480
in

00:18:17,360 --> 00:18:21,200
um 2015 from then onwards they decided

00:18:20,480 --> 00:18:22,880
that

00:18:21,200 --> 00:18:24,640
instead of doing kind of intermittent

00:18:22,880 --> 00:18:28,000
releases they were going to start

00:18:24,640 --> 00:18:29,840
doing releases every single year um at

00:18:28,000 --> 00:18:31,280
which point it gets a bit confusing to

00:18:29,840 --> 00:18:34,480
keep naming things like

00:18:31,280 --> 00:18:36,960
es6 789 so

00:18:34,480 --> 00:18:37,600
from 2015 onwards you'll start seeing

00:18:36,960 --> 00:18:40,799
more

00:18:37,600 --> 00:18:42,720
um common names named after the year

00:18:40,799 --> 00:18:45,200
that it was released

00:18:42,720 --> 00:18:45,919
and that's kind of the official name of

00:18:45,200 --> 00:18:49,679
that

00:18:45,919 --> 00:18:52,000
version is es followed by the year name

00:18:49,679 --> 00:18:56,480
although some people will still use es6

00:18:52,000 --> 00:18:57,919
to mean es2015 and es7 to mean 2016. um

00:18:56,480 --> 00:18:59,520
you know whatever floats your boat

00:18:57,919 --> 00:19:02,640
really

00:18:59,520 --> 00:19:05,600
um if you want to know why it's called

00:19:02,640 --> 00:19:06,640
ecmascript really and not javascript

00:19:05,600 --> 00:19:10,080
2015 or

00:19:06,640 --> 00:19:13,360
js 2015 um it's

00:19:10,080 --> 00:19:15,919
the short answer is a copyright thing

00:19:13,360 --> 00:19:18,160
ekma international doesn't actually own

00:19:15,919 --> 00:19:19,840
the trademark name javascript i think

00:19:18,160 --> 00:19:20,720
it's owned by a company called oracle

00:19:19,840 --> 00:19:23,600
actually

00:19:20,720 --> 00:19:24,400
um and so they can't call it they can't

00:19:23,600 --> 00:19:27,440
call

00:19:24,400 --> 00:19:30,720
their standards um js

00:19:27,440 --> 00:19:33,840
2015 or js 678

00:19:30,720 --> 00:19:36,320
um yeah so

00:19:33,840 --> 00:19:37,360
i don't have a huge amount of time so i

00:19:36,320 --> 00:19:39,600
don't want to

00:19:37,360 --> 00:19:40,559
kind of go down into a huge amount of

00:19:39,600 --> 00:19:42,880
detail about

00:19:40,559 --> 00:19:43,919
each individual version of javascript

00:19:42,880 --> 00:19:46,160
since

00:19:43,919 --> 00:19:47,840
you know the dawn of time but um i will

00:19:46,160 --> 00:19:49,440
try and highlight just some of the key

00:19:47,840 --> 00:19:51,679
differences between

00:19:49,440 --> 00:19:53,200
um between the versions and how they

00:19:51,679 --> 00:19:55,280
kind of relate to

00:19:53,200 --> 00:19:56,320
what you will be work seeing in the

00:19:55,280 --> 00:19:58,400
browser

00:19:56,320 --> 00:19:59,600
um and things like that so i'll start

00:19:58,400 --> 00:20:02,880
with es5

00:19:59,600 --> 00:20:04,640
that was um released in 2009

00:20:02,880 --> 00:20:06,480
and the biggest things that came out of

00:20:04,640 --> 00:20:08,559
that um

00:20:06,480 --> 00:20:09,840
of that release was we basically got a

00:20:08,559 --> 00:20:13,360
whole load of funky

00:20:09,840 --> 00:20:15,280
um array functions um and

00:20:13,360 --> 00:20:16,799
i probably only got started with

00:20:15,280 --> 00:20:19,120
javascript kind of

00:20:16,799 --> 00:20:21,039
you know i'm a millennial so i got

00:20:19,120 --> 00:20:22,080
started only you know fairly recently in

00:20:21,039 --> 00:20:25,200
javascript

00:20:22,080 --> 00:20:26,960
in comparison so to me i find it you

00:20:25,200 --> 00:20:28,720
know just really strange that these kind

00:20:26,960 --> 00:20:31,280
of functions that i use

00:20:28,720 --> 00:20:33,360
every day in my job didn't exist you

00:20:31,280 --> 00:20:34,880
know pre-2009

00:20:33,360 --> 00:20:36,480
and you know one of the things that i

00:20:34,880 --> 00:20:37,679
really enjoy about javascript is the

00:20:36,480 --> 00:20:40,159
fact that you can

00:20:37,679 --> 00:20:41,440
um you know you don't have to write

00:20:40,159 --> 00:20:43,200
really bespoke

00:20:41,440 --> 00:20:44,799
for loops or anything you can use these

00:20:43,200 --> 00:20:48,480
handy array functions like

00:20:44,799 --> 00:20:50,480
map and filter and things like that um

00:20:48,480 --> 00:20:51,679
yeah so that was kind of the big these

00:20:50,480 --> 00:20:55,360
are the big

00:20:51,679 --> 00:20:58,559
releases that came out of um the 20

00:20:55,360 --> 00:20:59,280
es5 um and then after that there wasn't

00:20:58,559 --> 00:21:02,799
much

00:20:59,280 --> 00:21:06,720
until um there wasn't uh

00:21:02,799 --> 00:21:09,200
the next big release was es 2015 es6

00:21:06,720 --> 00:21:10,400
and this is where you'll kind of see a

00:21:09,200 --> 00:21:12,799
lot online of

00:21:10,400 --> 00:21:15,280
you know chatter about the differences

00:21:12,799 --> 00:21:16,640
between es5 and es6 because previously

00:21:15,280 --> 00:21:18,000
the kind of

00:21:16,640 --> 00:21:20,000
each change in version wasn't

00:21:18,000 --> 00:21:20,640
drastically different but you did get a

00:21:20,000 --> 00:21:23,200
big

00:21:20,640 --> 00:21:25,520
shift from when you moved from es5 to

00:21:23,200 --> 00:21:26,960
es6 and we start getting

00:21:25,520 --> 00:21:28,640
again it was a big release and you have

00:21:26,960 --> 00:21:31,679
quite a lot of different

00:21:28,640 --> 00:21:33,039
um things that came out of that um

00:21:31,679 --> 00:21:34,960
i don't want this to be a really boring

00:21:33,039 --> 00:21:37,679
talk where you just stare at

00:21:34,960 --> 00:21:38,400
you know lists on powerpoint so i will

00:21:37,679 --> 00:21:40,320
try and

00:21:38,400 --> 00:21:42,080
um i have kind of put together a little

00:21:40,320 --> 00:21:44,240
bit of a demo for you

00:21:42,080 --> 00:21:45,919
i'll try and kind of go over some of the

00:21:44,240 --> 00:21:49,760
key features of the

00:21:45,919 --> 00:21:53,280
different um ecmascript versions since

00:21:49,760 --> 00:21:54,720
um es5 onwards um

00:21:53,280 --> 00:21:57,280
i'll kind of just try and highlight the

00:21:54,720 --> 00:21:59,200
differences between them really so

00:21:57,280 --> 00:22:01,360
the big difference that i want to start

00:21:59,200 --> 00:22:04,080
with between es5 and es6

00:22:01,360 --> 00:22:06,559
is you're prob you may or may not be

00:22:04,080 --> 00:22:09,760
familiar with in es5 when you want to

00:22:06,559 --> 00:22:12,080
um kind of import modules into your code

00:22:09,760 --> 00:22:13,760
you would specif you would declare them

00:22:12,080 --> 00:22:17,039
in this kind of format

00:22:13,760 --> 00:22:20,720
um and then from es6 onwards

00:22:17,039 --> 00:22:24,159
you have um you

00:22:20,720 --> 00:22:26,159
sorry you have more of this star where

00:22:24,159 --> 00:22:28,000
you can import um

00:22:26,159 --> 00:22:30,000
just straight like that and you can do

00:22:28,000 --> 00:22:32,640
kind of import asterisks from

00:22:30,000 --> 00:22:33,840
the file name if you want um and

00:22:32,640 --> 00:22:34,320
similarly you also have slightly

00:22:33,840 --> 00:22:36,640
different

00:22:34,320 --> 00:22:38,720
formats for exports as well so in

00:22:36,640 --> 00:22:41,679
something like es5 we had a

00:22:38,720 --> 00:22:43,200
you know file that was written in es5

00:22:41,679 --> 00:22:46,400
you would export your

00:22:43,200 --> 00:22:48,480
functions or um variables and things

00:22:46,400 --> 00:22:51,840
using module.exports

00:22:48,480 --> 00:22:53,520
um whereas in something like es6 you can

00:22:51,840 --> 00:22:58,240
just kind of go

00:22:53,520 --> 00:23:01,039
straight away and um export something

00:22:58,240 --> 00:23:02,559
a bit like um just straight there from

00:23:01,039 --> 00:23:06,000
next to the the function

00:23:02,559 --> 00:23:08,720
um so that's kind of the importance and

00:23:06,000 --> 00:23:09,840
export side of things um with es6 you

00:23:08,720 --> 00:23:12,960
also got

00:23:09,840 --> 00:23:14,799
um some new um

00:23:12,960 --> 00:23:16,799
you got some other new features like you

00:23:14,799 --> 00:23:19,520
got let and const

00:23:16,799 --> 00:23:20,320
um for those of you that don't know the

00:23:19,520 --> 00:23:22,480
difference

00:23:20,320 --> 00:23:24,080
i don't want to do a deep dive into the

00:23:22,480 --> 00:23:27,039
you know specifics of javascript

00:23:24,080 --> 00:23:28,640
but just a quick overview if you kind of

00:23:27,039 --> 00:23:30,320
declare something using let it means

00:23:28,640 --> 00:23:34,320
that you can reassign it later

00:23:30,320 --> 00:23:36,640
so here we said yoda my name yoda is

00:23:34,320 --> 00:23:38,159
and if you want to translate that you

00:23:36,640 --> 00:23:40,080
can reassign

00:23:38,159 --> 00:23:41,679
the value of what yoda is and it won't

00:23:40,080 --> 00:23:45,360
complain um

00:23:41,679 --> 00:23:47,840
whereas if you declare it as a constant

00:23:45,360 --> 00:23:49,440
you will get an error saying that you've

00:23:47,840 --> 00:23:50,960
tried to assign something to a constant

00:23:49,440 --> 00:23:54,240
variable

00:23:50,960 --> 00:23:55,840
um you may notice that i have been

00:23:54,240 --> 00:23:58,159
watching the new season of the

00:23:55,840 --> 00:23:59,200
mandalorians this week so you'll

00:23:58,159 --> 00:24:02,720
probably see a lot of

00:23:59,200 --> 00:24:05,760
star wars references in this demo

00:24:02,720 --> 00:24:08,960
just a heads up on that um

00:24:05,760 --> 00:24:10,640
what else did you get in es6 we also get

00:24:08,960 --> 00:24:14,559
classes

00:24:10,640 --> 00:24:16,720
so um actually one of my colleagues

00:24:14,559 --> 00:24:18,000
that today was talking to me she's very

00:24:16,720 --> 00:24:20,720
um keen on on

00:24:18,000 --> 00:24:22,559
java and she was saying how javascript

00:24:20,720 --> 00:24:24,000
is now trying to be like java and java

00:24:22,559 --> 00:24:26,000
is trying to be like javascript and i

00:24:24,000 --> 00:24:27,679
think you can kind of see that in

00:24:26,000 --> 00:24:29,440
the different versions of the languages

00:24:27,679 --> 00:24:32,480
that are being released um

00:24:29,440 --> 00:24:34,880
so in es6 we got kind of

00:24:32,480 --> 00:24:36,240
we got classes which are very similar to

00:24:34,880 --> 00:24:38,880
what you would get in

00:24:36,240 --> 00:24:40,480
um object-oriented programming languages

00:24:38,880 --> 00:24:42,000
like java where

00:24:40,480 --> 00:24:44,240
you can create a whole class of

00:24:42,000 --> 00:24:45,360
something and then it kind of makes it

00:24:44,240 --> 00:24:48,400
easier to create

00:24:45,360 --> 00:24:50,880
new instances of that class um so here

00:24:48,400 --> 00:24:52,320
we can console log out the characters

00:24:50,880 --> 00:24:53,600
that we've created here

00:24:52,320 --> 00:24:55,760
and you can see it comes up in the

00:24:53,600 --> 00:24:59,200
console as

00:24:55,760 --> 00:25:00,720
an object of class character

00:24:59,200 --> 00:25:02,480
and that kind of suits people that

00:25:00,720 --> 00:25:05,440
prefer more kind of class

00:25:02,480 --> 00:25:07,039
based programming rather than just um

00:25:05,440 --> 00:25:09,760
functional based

00:25:07,039 --> 00:25:10,320
um yeah and then we also the big

00:25:09,760 --> 00:25:14,320
addition

00:25:10,320 --> 00:25:17,120
in es6 was um promises

00:25:14,320 --> 00:25:18,159
i could you know you could spend a whole

00:25:17,120 --> 00:25:20,320
meet-up session

00:25:18,159 --> 00:25:21,679
explaining promises so i'm not gonna do

00:25:20,320 --> 00:25:23,919
that but

00:25:21,679 --> 00:25:25,200
here's just something for you to look at

00:25:23,919 --> 00:25:26,320
if you're not familiar with what a

00:25:25,200 --> 00:25:29,760
promise is

00:25:26,320 --> 00:25:32,880
you can resolve or reject the result

00:25:29,760 --> 00:25:35,840
um of a promise and you can chain

00:25:32,880 --> 00:25:37,679
promises together using dot then

00:25:35,840 --> 00:25:38,880
that was what was included in the

00:25:37,679 --> 00:25:42,480
release of promises in

00:25:38,880 --> 00:25:44,080
es6 um yeah i think that's kind of the

00:25:42,480 --> 00:25:47,520
main things that

00:25:44,080 --> 00:25:49,840
i wanted to show you in the es6 version

00:25:47,520 --> 00:25:51,760
you also got a few other more obscure

00:25:49,840 --> 00:25:55,039
things you can find full details of

00:25:51,760 --> 00:25:59,039
these on websites like w3schools or

00:25:55,039 --> 00:26:02,559
um mdn and that kind of thing as well

00:25:59,039 --> 00:26:03,840
um so moving on to since es6 was the

00:26:02,559 --> 00:26:07,679
probably the

00:26:03,840 --> 00:26:09,919
biggest release in the past kind of

00:26:07,679 --> 00:26:11,919
past kind of five years or so and since

00:26:09,919 --> 00:26:12,559
then like each year they have done a

00:26:11,919 --> 00:26:15,039
release

00:26:12,559 --> 00:26:16,400
um and but they've been kind of smaller

00:26:15,039 --> 00:26:18,080
and they've had a fewer things so i'll

00:26:16,400 --> 00:26:21,120
try and kind of for the sake of time

00:26:18,080 --> 00:26:21,679
bunch them together um so key features

00:26:21,120 --> 00:26:25,039
that came

00:26:21,679 --> 00:26:28,679
in es2016 and es2017

00:26:25,039 --> 00:26:32,559
um we get um exponent

00:26:28,679 --> 00:26:34,720
exponentiation um whereas previously

00:26:32,559 --> 00:26:37,039
you would have to kind of actually i

00:26:34,720 --> 00:26:40,320
think i have an example for you here

00:26:37,039 --> 00:26:42,640
yeah so previously in

00:26:40,320 --> 00:26:45,039
prior versions of um javascript you

00:26:42,640 --> 00:26:48,159
would have to do something like math.pal

00:26:45,039 --> 00:26:49,039
um in order to kind of do um an exponent

00:26:48,159 --> 00:26:52,240
whereas

00:26:49,039 --> 00:26:54,480
now since es2016 it's just a lot easier

00:26:52,240 --> 00:26:56,320
kind of similar to python syntax you

00:26:54,480 --> 00:26:58,720
just do the double asterix

00:26:56,320 --> 00:27:00,480
um and oh this is a good thing to

00:26:58,720 --> 00:27:04,000
highlight as well at this point

00:27:00,480 --> 00:27:06,000
is um ecmascript is

00:27:04,000 --> 00:27:07,360
javascript is completely backwards

00:27:06,000 --> 00:27:09,440
compatible so

00:27:07,360 --> 00:27:11,520
if you still like your old-fashioned

00:27:09,440 --> 00:27:13,440
version of javascript then you can

00:27:11,520 --> 00:27:15,440
you know still use that to your heart's

00:27:13,440 --> 00:27:17,360
content um

00:27:15,440 --> 00:27:18,559
it also is really and it won't you know

00:27:17,360 --> 00:27:20,880
interfere you can have a

00:27:18,559 --> 00:27:22,559
file which has a mixture of the newer

00:27:20,880 --> 00:27:25,520
versions the older versions

00:27:22,559 --> 00:27:26,640
um and it's fine um that also means if

00:27:25,520 --> 00:27:29,039
you have a kind of an

00:27:26,640 --> 00:27:30,640
older javascript project you don't need

00:27:29,039 --> 00:27:32,320
to feel like every time a new version

00:27:30,640 --> 00:27:35,200
releases you don't have to go

00:27:32,320 --> 00:27:36,480
back and rewrite everything which is

00:27:35,200 --> 00:27:40,720
also nice

00:27:36,480 --> 00:27:44,559
um any other so another nice

00:27:40,720 --> 00:27:48,080
function we got in es 2016

00:27:44,559 --> 00:27:51,679
was another handy array function

00:27:48,080 --> 00:27:54,480
includes so you can kind of search a

00:27:51,679 --> 00:27:56,240
long array and if it include will return

00:27:54,480 --> 00:27:57,039
true or false based on whether it finds

00:27:56,240 --> 00:27:59,919
the

00:27:57,039 --> 00:28:00,640
object the string or object that you're

00:27:59,919 --> 00:28:04,640
looking for

00:28:00,640 --> 00:28:06,480
which is quite handy um

00:28:04,640 --> 00:28:07,919
so those were the main those are in fact

00:28:06,480 --> 00:28:09,360
that was the only stuff that came out in

00:28:07,919 --> 00:28:12,760
es7 that was a bit of a

00:28:09,360 --> 00:28:16,320
lazy year for them um for

00:28:12,760 --> 00:28:18,720
es2017 we get um

00:28:16,320 --> 00:28:19,840
yeah we kind of get some more object

00:28:18,720 --> 00:28:22,320
functions

00:28:19,840 --> 00:28:22,960
um we also get the biggest one that we

00:28:22,320 --> 00:28:26,679
get in

00:28:22,960 --> 00:28:28,080
um sorry the biggest one that we get in

00:28:26,679 --> 00:28:31,760
es2017

00:28:28,080 --> 00:28:35,760
is the ability to do async functions um

00:28:31,760 --> 00:28:38,559
so this is when you're as we saw in es6

00:28:35,760 --> 00:28:39,840
when you're um creating promises

00:28:38,559 --> 00:28:42,720
normally if you want to

00:28:39,840 --> 00:28:44,240
kind of chain different things together

00:28:42,720 --> 00:28:47,840
you have to do

00:28:44,240 --> 00:28:49,120
um a dot then and then

00:28:47,840 --> 00:28:51,200
you have you want to wait for your

00:28:49,120 --> 00:28:52,480
promise to resolve or reject and then

00:28:51,200 --> 00:28:53,840
move on to the next thing and the next

00:28:52,480 --> 00:28:57,600
thing and the next thing

00:28:53,840 --> 00:29:00,640
um with es20

00:28:57,600 --> 00:29:03,279
what 2017 we get the um

00:29:00,640 --> 00:29:04,880
async and await which i personally

00:29:03,279 --> 00:29:06,480
really like to use a lot because

00:29:04,880 --> 00:29:08,960
that means i don't have to have long

00:29:06,480 --> 00:29:11,039
chains of dot then dot n dot then

00:29:08,960 --> 00:29:12,559
um i can just kind of wait for the

00:29:11,039 --> 00:29:15,039
promise to complete

00:29:12,559 --> 00:29:15,600
um and then the next line won't execute

00:29:15,039 --> 00:29:17,679
until

00:29:15,600 --> 00:29:18,720
that um the result of that promise has

00:29:17,679 --> 00:29:21,600
come back

00:29:18,720 --> 00:29:23,440
um so that's uh really handy some people

00:29:21,600 --> 00:29:24,000
have very strong opinions about whether

00:29:23,440 --> 00:29:27,120
they like

00:29:24,000 --> 00:29:29,039
dot then or the async await format

00:29:27,120 --> 00:29:30,799
i think it's a bit like marmite you

00:29:29,039 --> 00:29:33,279
either love it or you hate it

00:29:30,799 --> 00:29:34,880
you know i won't try and tell you which

00:29:33,279 --> 00:29:37,360
one is better i'll let you make your own

00:29:34,880 --> 00:29:41,679
minds up

00:29:37,360 --> 00:29:44,480
um all right

00:29:41,679 --> 00:29:46,000
so how are we doing for time okay try

00:29:44,480 --> 00:29:50,240
and speed through a bit

00:29:46,000 --> 00:29:51,919
so that yes 2018 and 2019.

00:29:50,240 --> 00:29:53,559
what do we get here we've got a few more

00:29:51,919 --> 00:29:57,039
things um

00:29:53,559 --> 00:29:59,360
es2018 we get um

00:29:57,039 --> 00:30:00,559
the most interesting stuff i think about

00:29:59,360 --> 00:30:02,640
es 2018

00:30:00,559 --> 00:30:03,679
is we get dot finally the spread

00:30:02,640 --> 00:30:07,200
operator

00:30:03,679 --> 00:30:11,200
we also get a few regular expressions um

00:30:07,200 --> 00:30:13,200
functions as well um for

00:30:11,200 --> 00:30:14,320
let's see if i'll show you a demo so

00:30:13,200 --> 00:30:17,360
spread operators

00:30:14,320 --> 00:30:20,000
honestly is probably my favorite of

00:30:17,360 --> 00:30:21,440
the newer javascript functions if you i

00:30:20,000 --> 00:30:22,480
use it all the time especially if you're

00:30:21,440 --> 00:30:24,159
doing

00:30:22,480 --> 00:30:26,080
react and you have you're trying to

00:30:24,159 --> 00:30:27,279
update state it kind of just saves you a

00:30:26,080 --> 00:30:29,279
lot of time

00:30:27,279 --> 00:30:30,799
um for those of you who aren't familiar

00:30:29,279 --> 00:30:33,360
with spread operators

00:30:30,799 --> 00:30:34,559
and this is just a quick example for

00:30:33,360 --> 00:30:36,399
example you have a

00:30:34,559 --> 00:30:38,880
an object called spaceship and it has a

00:30:36,399 --> 00:30:42,320
name pilot and co-pilot

00:30:38,880 --> 00:30:43,600
um key value pairs say you want to

00:30:42,320 --> 00:30:45,600
create a new spaceship

00:30:43,600 --> 00:30:46,720
and it's going to be exactly the same as

00:30:45,600 --> 00:30:49,039
your old spaceship

00:30:46,720 --> 00:30:50,960
but you just want a new pilot you don't

00:30:49,039 --> 00:30:53,840
have to kind of rewrite

00:30:50,960 --> 00:30:55,520
every single line you can just use the

00:30:53,840 --> 00:30:58,240
spread operator to say

00:30:55,520 --> 00:30:59,440
i want everything that was in spaceship

00:30:58,240 --> 00:31:01,760
except

00:30:59,440 --> 00:31:04,000
pilot which i'm going to reassign and

00:31:01,760 --> 00:31:06,080
then you can see here

00:31:04,000 --> 00:31:08,640
you have spaceship on your new spaceship

00:31:06,080 --> 00:31:11,519
they contain exactly the same

00:31:08,640 --> 00:31:13,120
attributes uh key value pairs but just

00:31:11,519 --> 00:31:14,640
with the one change that you wanted i

00:31:13,120 --> 00:31:16,880
use this one all the time

00:31:14,640 --> 00:31:18,240
because i like to be efficient and it

00:31:16,880 --> 00:31:21,519
just saves me time and

00:31:18,240 --> 00:31:24,480
energy and it's great um

00:31:21,519 --> 00:31:25,440
what else did we get in 2018 we get dot

00:31:24,480 --> 00:31:29,279
finally

00:31:25,440 --> 00:31:32,480
so this is again with promises um

00:31:29,279 --> 00:31:34,240
if you have a long chain of promises

00:31:32,480 --> 00:31:36,880
and you want to specify something that's

00:31:34,240 --> 00:31:36,880
going to happen

00:31:37,039 --> 00:31:40,320
way at the end after the all the thens

00:31:39,360 --> 00:31:43,760
after the catch

00:31:40,320 --> 00:31:45,760
then you can add dot finally um

00:31:43,760 --> 00:31:48,080
so for example in our promise here we

00:31:45,760 --> 00:31:49,600
have our promise resolves

00:31:48,080 --> 00:31:52,159
then we can say we want to do something

00:31:49,600 --> 00:31:53,840
else we might want to catch the error

00:31:52,159 --> 00:31:56,559
and then only once everything else has

00:31:53,840 --> 00:31:59,039
been completed then we have

00:31:56,559 --> 00:32:00,720
finally we can do whatever we want in

00:31:59,039 --> 00:32:03,840
this dot finally

00:32:00,720 --> 00:32:07,200
section um and then

00:32:03,840 --> 00:32:10,640
moving on to es2019

00:32:07,200 --> 00:32:14,240
we get um another few

00:32:10,640 --> 00:32:16,960
kind of helpful um array

00:32:14,240 --> 00:32:17,440
functions we get some string functions

00:32:16,960 --> 00:32:20,960
as well

00:32:17,440 --> 00:32:24,159
sorry um i'll just

00:32:20,960 --> 00:32:25,200
demo a few of them quickly so dot flat

00:32:24,159 --> 00:32:28,240
is just if you have

00:32:25,200 --> 00:32:30,159
nested arrays you can um

00:32:28,240 --> 00:32:31,519
flatten them kind of the clues in the

00:32:30,159 --> 00:32:33,679
name um

00:32:31,519 --> 00:32:35,360
also if you have for example arrays

00:32:33,679 --> 00:32:37,919
within arrays within a raise

00:32:35,360 --> 00:32:39,279
you can also chain your dot flat to kind

00:32:37,919 --> 00:32:41,039
of flatten it as

00:32:39,279 --> 00:32:42,399
as many times as you need which is

00:32:41,039 --> 00:32:45,679
really nice

00:32:42,399 --> 00:32:46,559
um optional catch binding we got that as

00:32:45,679 --> 00:32:50,080
well

00:32:46,559 --> 00:32:52,000
so that's previously for example in

00:32:50,080 --> 00:32:53,840
if you see in our promise here if you

00:32:52,000 --> 00:32:55,840
want to catch an error you have to pass

00:32:53,840 --> 00:32:59,840
an argument normally which is the error

00:32:55,840 --> 00:33:01,679
itself um from es2019 onwards

00:32:59,840 --> 00:33:04,080
you don't need to do that anymore you

00:33:01,679 --> 00:33:08,080
can just have a catch without

00:33:04,080 --> 00:33:11,200
any um without any

00:33:08,080 --> 00:33:13,760
parameter passed in which really nice

00:33:11,200 --> 00:33:15,679
and then um one of the most random ones

00:33:13,760 --> 00:33:17,840
that i found added which

00:33:15,679 --> 00:33:19,279
um i don't know just entertains me if

00:33:17,840 --> 00:33:23,200
you really want to

00:33:19,279 --> 00:33:23,760
you can since um yes 2019 came out you

00:33:23,200 --> 00:33:26,559
can

00:33:23,760 --> 00:33:27,760
just convert any random function to a

00:33:26,559 --> 00:33:30,000
string if you want to

00:33:27,760 --> 00:33:32,000
and it will for example here i've just

00:33:30,000 --> 00:33:34,559
created a simple function

00:33:32,000 --> 00:33:36,320
and if i wanted to console log it out i

00:33:34,559 --> 00:33:38,399
could console log it out i have no idea

00:33:36,320 --> 00:33:40,960
why you would ever want to use this

00:33:38,399 --> 00:33:42,640
function maybe someone who knows

00:33:40,960 --> 00:33:43,279
javascript better than me can tell me

00:33:42,640 --> 00:33:44,640
what use

00:33:43,279 --> 00:33:46,240
i have for this but i just thought it

00:33:44,640 --> 00:33:47,679
was funky and i wanted to share that

00:33:46,240 --> 00:33:48,880
with you all today i didn't know that

00:33:47,679 --> 00:33:51,039
this existed

00:33:48,880 --> 00:33:52,399
before i did the research for this talk

00:33:51,039 --> 00:33:54,640
so um

00:33:52,399 --> 00:33:55,760
yeah just wanted to share that with you

00:33:54,640 --> 00:33:58,480
today

00:33:55,760 --> 00:33:59,760
um and then what else do we get right

00:33:58,480 --> 00:34:00,640
okay we're almost we're on the home

00:33:59,760 --> 00:34:03,679
stretch guys

00:34:00,640 --> 00:34:04,640
we're almost up to the present day yes

00:34:03,679 --> 00:34:07,840
00:34:04,640 --> 00:34:08,639
we get some things some mathematical

00:34:07,840 --> 00:34:11,119
things

00:34:08,639 --> 00:34:12,240
big int basically means that javascript

00:34:11,119 --> 00:34:14,720
can now deal with

00:34:12,240 --> 00:34:15,679
really big integers whereas before it

00:34:14,720 --> 00:34:18,879
could only deal with

00:34:15,679 --> 00:34:21,839
slightly less big integers we get

00:34:18,879 --> 00:34:24,159
dynamic imports and optional chaining

00:34:21,839 --> 00:34:26,000
um a bunch of other just kind of random

00:34:24,159 --> 00:34:29,839
assortment of helpful things

00:34:26,000 --> 00:34:33,599
another promise um another promise

00:34:29,839 --> 00:34:36,960
function there um and

00:34:33,599 --> 00:34:37,599
in es2021 um i won't show you this

00:34:36,960 --> 00:34:38,800
because it's been

00:34:37,599 --> 00:34:40,879
unreleased we're going to get some

00:34:38,800 --> 00:34:44,560
really cool stuff um

00:34:40,879 --> 00:34:48,720
some another array function for replace

00:34:44,560 --> 00:34:51,760
all which is where you can just um

00:34:48,720 --> 00:34:54,240
for example if you had a a long string

00:34:51,760 --> 00:34:55,679
you could just do replace all and then

00:34:54,240 --> 00:34:56,639
replace any substrings within that

00:34:55,679 --> 00:34:59,599
string that you want

00:34:56,639 --> 00:35:01,040
so if you had something that said dogs

00:34:59,599 --> 00:35:03,599
are the best i love dogs

00:35:01,040 --> 00:35:04,240
you could do replace all with cats and

00:35:03,599 --> 00:35:07,680
say

00:35:04,240 --> 00:35:10,960
and then replace that all with cats um

00:35:07,680 --> 00:35:13,280
promise dot any um is

00:35:10,960 --> 00:35:14,839
another i won't go into a lot of details

00:35:13,280 --> 00:35:18,960
i don't want to make this all about

00:35:14,839 --> 00:35:20,480
promises um basically there's a lot of

00:35:18,960 --> 00:35:22,960
cool things that you get with every

00:35:20,480 --> 00:35:24,000
version of javascript and the best place

00:35:22,960 --> 00:35:27,280
if you want to know

00:35:24,000 --> 00:35:29,680
what is coming is um to look at the

00:35:27,280 --> 00:35:30,000
online docs things like w3schools does

00:35:29,680 --> 00:35:34,640
really

00:35:30,000 --> 00:35:34,640
good um resources on this

00:35:34,880 --> 00:35:39,520
so does mdn web docs as well

00:35:37,920 --> 00:35:42,480
you'll find loads of people writing blog

00:35:39,520 --> 00:35:44,320
posts about what's coming next

00:35:42,480 --> 00:35:46,800
the one thing that you i do want to

00:35:44,320 --> 00:35:50,079
highlight before i run out of time

00:35:46,800 --> 00:35:52,400
is if you ever see the term es next um

00:35:50,079 --> 00:35:53,280
that's kind of cloak wheel term for

00:35:52,400 --> 00:35:56,480
whatever is

00:35:53,280 --> 00:35:58,240
the next version of ecmascript um

00:35:56,480 --> 00:35:59,839
so whatever one is not currently

00:35:58,240 --> 00:36:02,240
released right now

00:35:59,839 --> 00:36:03,680
um and then browse compatibility that's

00:36:02,240 --> 00:36:04,560
a really important thing to take into

00:36:03,680 --> 00:36:07,760
account

00:36:04,560 --> 00:36:09,680
um so currently the

00:36:07,760 --> 00:36:11,040
browsers always kind of update slower

00:36:09,680 --> 00:36:13,920
than their language does

00:36:11,040 --> 00:36:16,240
so and they don't always necessarily

00:36:13,920 --> 00:36:19,440
release an update of a browser which has

00:36:16,240 --> 00:36:20,800
the compatibility which has um

00:36:19,440 --> 00:36:22,880
which has all of the features of the

00:36:20,800 --> 00:36:26,480
next version of ecmascript

00:36:22,880 --> 00:36:28,240
so and that can cause issues when you're

00:36:26,480 --> 00:36:30,160
writing your code you can have errors in

00:36:28,240 --> 00:36:30,960
different some something that might work

00:36:30,160 --> 00:36:33,680
in chrome

00:36:30,960 --> 00:36:34,400
might not work in firefox depending on

00:36:33,680 --> 00:36:36,320
what

00:36:34,400 --> 00:36:38,079
the feature is of the specific version

00:36:36,320 --> 00:36:39,599
that you're trying to use

00:36:38,079 --> 00:36:41,920
um and that can be really important to

00:36:39,599 --> 00:36:43,280
make sure that your um

00:36:41,920 --> 00:36:44,480
that whatever code you're writing if

00:36:43,280 --> 00:36:46,160
it's going to be run in the browser like

00:36:44,480 --> 00:36:47,280
make sure that it's accessible to people

00:36:46,160 --> 00:36:50,240
that are using

00:36:47,280 --> 00:36:50,800
different browsers um you can either

00:36:50,240 --> 00:36:53,280
kind of

00:36:50,800 --> 00:36:55,520
again check the documentation there's a

00:36:53,280 --> 00:36:58,960
really good website called can i use

00:36:55,520 --> 00:37:01,280
which if you want to use a funky array

00:36:58,960 --> 00:37:03,119
method that you don't know is in the

00:37:01,280 --> 00:37:04,560
current version of javascript that's

00:37:03,119 --> 00:37:07,280
supported on

00:37:04,560 --> 00:37:08,000
safari then you can use the can i use

00:37:07,280 --> 00:37:11,040
website

00:37:08,000 --> 00:37:14,720
to check if that function is supported

00:37:11,040 --> 00:37:17,920
um or you could just um

00:37:14,720 --> 00:37:19,760
use transpilers like babel or webpack

00:37:17,920 --> 00:37:22,320
um if you don't know what a transpiler

00:37:19,760 --> 00:37:23,040
is essentially what that does is it just

00:37:22,320 --> 00:37:24,720
kind of

00:37:23,040 --> 00:37:26,640
if you have a project and you're using a

00:37:24,720 --> 00:37:29,599
mixture of all different types of

00:37:26,640 --> 00:37:31,280
um javascript versions then you can use

00:37:29,599 --> 00:37:34,320
something like babel or webpack

00:37:31,280 --> 00:37:36,079
to essentially just translate any later

00:37:34,320 --> 00:37:37,599
version you're using back down to

00:37:36,079 --> 00:37:39,119
an earlier version that will be

00:37:37,599 --> 00:37:39,599
supported in the browsers that you want

00:37:39,119 --> 00:37:41,599
to

00:37:39,599 --> 00:37:43,040
run your code in um so that's really

00:37:41,599 --> 00:37:44,000
useful and this is stuff that you should

00:37:43,040 --> 00:37:45,359
definitely

00:37:44,000 --> 00:37:46,880
think about whenever you're trying to

00:37:45,359 --> 00:37:47,599
develop anything that's going to be used

00:37:46,880 --> 00:37:50,000
by people

00:37:47,599 --> 00:37:51,760
on the web because you never know

00:37:50,000 --> 00:37:53,760
there's probably someone's grandma

00:37:51,760 --> 00:37:54,640
somewhere who is still using internet

00:37:53,760 --> 00:37:57,119
explorer

00:37:54,640 --> 00:37:58,000
and so will not you know be able to read

00:37:57,119 --> 00:38:01,520
your website

00:37:58,000 --> 00:38:05,359
if you haven't you know properly um

00:38:01,520 --> 00:38:06,160
considered that um really last quick

00:38:05,359 --> 00:38:09,520
thing

00:38:06,160 --> 00:38:13,599
is ecmascript is an open standard um

00:38:09,520 --> 00:38:13,839
fun fact we call um any languages that

00:38:13,599 --> 00:38:15,920
are

00:38:13,839 --> 00:38:18,240
open source we call them open standards

00:38:15,920 --> 00:38:20,240
only projects

00:38:18,240 --> 00:38:21,440
or source code can be referred to as

00:38:20,240 --> 00:38:24,000
open source

00:38:21,440 --> 00:38:24,720
so when we say that something like a

00:38:24,000 --> 00:38:27,520
language

00:38:24,720 --> 00:38:29,280
is available for you to look at online

00:38:27,520 --> 00:38:30,480
and contribute to we call it an open

00:38:29,280 --> 00:38:32,800
standard

00:38:30,480 --> 00:38:34,160
an an ecmascript is one of those open

00:38:32,800 --> 00:38:36,880
standards so

00:38:34,160 --> 00:38:37,920
if you really want to see a certain

00:38:36,880 --> 00:38:41,760
feature

00:38:37,920 --> 00:38:42,880
um uh in the next version of javascript

00:38:41,760 --> 00:38:46,079
you can

00:38:42,880 --> 00:38:48,240
go um to the

00:38:46,079 --> 00:38:49,119
their github you can have a look through

00:38:48,240 --> 00:38:51,520
what's coming

00:38:49,119 --> 00:38:53,280
you can look up how to contribute you

00:38:51,520 --> 00:38:55,599
can see all the proposals that are going

00:38:53,280 --> 00:38:59,200
to go into the next version

00:38:55,599 --> 00:39:02,880
um of ecmascript um

00:38:59,200 --> 00:39:05,440
yeah and you can even see which which um

00:39:02,880 --> 00:39:06,880
versions are kind of at different stages

00:39:05,440 --> 00:39:09,040
in the approval process

00:39:06,880 --> 00:39:11,040
stage four means that it's 100

00:39:09,040 --> 00:39:12,800
definitely going in the next version

00:39:11,040 --> 00:39:15,280
and then there's kind of different tiers

00:39:12,800 --> 00:39:17,680
of approval for different things

00:39:15,280 --> 00:39:19,119
um so if you're looking to if you're

00:39:17,680 --> 00:39:20,480
just curious or you want to get more

00:39:19,119 --> 00:39:22,640
involved in open source like this is

00:39:20,480 --> 00:39:23,040
definitely a nice place to have a poke

00:39:22,640 --> 00:39:25,200
around

00:39:23,040 --> 00:39:26,320
it's very well kind of structured and

00:39:25,200 --> 00:39:30,240
put together and

00:39:26,320 --> 00:39:32,560
everything is reviewed by committee um

00:39:30,240 --> 00:39:34,320
so yeah i think that was kind of is that

00:39:32,560 --> 00:39:36,720
the last thing i have to show with you

00:39:34,320 --> 00:39:38,400
yes i do we did it and i kind of was on

00:39:36,720 --> 00:39:40,560
time which is great

00:39:38,400 --> 00:39:41,440
um thanks very much everyone for

00:39:40,560 --> 00:39:45,119
listening and

00:39:41,440 --> 00:39:45,119
i hope that you all learned something

00:39:54,839 --> 00:39:57,839
new

00:40:27,599 --> 00:40:32,720
um thank you abby

00:40:30,800 --> 00:40:34,000
and it was that was a very interesting

00:40:32,720 --> 00:40:37,839
talk especially for

00:40:34,000 --> 00:40:38,880
people that start learning javascript

00:40:37,839 --> 00:40:41,920
and

00:40:38,880 --> 00:40:44,480
i have some questions first

00:40:41,920 --> 00:40:48,000
what are the difference between es6 and

00:40:44,480 --> 00:40:51,040
es5 function constructors

00:40:48,000 --> 00:40:53,440
es6 an es5 what sorry function

00:40:51,040 --> 00:40:56,560
constructors

00:40:53,440 --> 00:40:59,200
function constructors yeah

00:40:56,560 --> 00:40:59,680
yeah that's a good point um i think i

00:40:59,200 --> 00:41:01,680
was

00:40:59,680 --> 00:41:03,599
rushing for time so i probably didn't

00:41:01,680 --> 00:41:05,119
explain that very

00:41:03,599 --> 00:41:06,800
well and i might have even missed it

00:41:05,119 --> 00:41:09,440
completely um

00:41:06,800 --> 00:41:11,119
if i maybe i can share my screen again

00:41:09,440 --> 00:41:11,680
and i can give a quick little demo on

00:41:11,119 --> 00:41:15,520
that

00:41:11,680 --> 00:41:20,319
why not sure hold on one bear with me

00:41:15,520 --> 00:41:23,760
one sec

00:41:20,319 --> 00:41:23,760
yeah so um

00:41:23,920 --> 00:41:27,200
so the question was between es5 and es6

00:41:26,319 --> 00:41:29,680
right

00:41:27,200 --> 00:41:31,200
so um yeah i think i probably glossed

00:41:29,680 --> 00:41:33,520
over this or potentially just missed

00:41:31,200 --> 00:41:34,319
out completely because i was washing but

00:41:33,520 --> 00:41:37,359
in um

00:41:34,319 --> 00:41:38,319
es6 one of the big new additions you get

00:41:37,359 --> 00:41:41,920
is the

00:41:38,319 --> 00:41:44,960
um sorry

00:41:41,920 --> 00:41:46,960
is the use of arrow functions which is

00:41:44,960 --> 00:41:50,240
kind of this type of format

00:41:46,960 --> 00:41:51,760
whereas in es5 you normally get things

00:41:50,240 --> 00:41:54,160
which are a bit more

00:41:51,760 --> 00:41:55,280
which look like like this you get

00:41:54,160 --> 00:41:58,319
function

00:41:55,280 --> 00:42:01,680
my function blah blah blah and then the

00:41:58,319 --> 00:42:04,319
curly brackets whereas in es6 you can

00:42:01,680 --> 00:42:07,440
just go straight for this kind of

00:42:04,319 --> 00:42:08,640
um parentheses with a little it's called

00:42:07,440 --> 00:42:10,400
they're called arrow functions because

00:42:08,640 --> 00:42:13,200
you have an arrow here

00:42:10,400 --> 00:42:13,599
um and both of them work completely fine

00:42:13,200 --> 00:42:14,880
um

00:42:13,599 --> 00:42:16,960
completely fine they kind of do

00:42:14,880 --> 00:42:19,920
essentially the same thing um

00:42:16,960 --> 00:42:21,520
i you i think that the arrow functions

00:42:19,920 --> 00:42:23,440
are particularly useful

00:42:21,520 --> 00:42:25,760
if because in javascript you do a lot of

00:42:23,440 --> 00:42:28,560
passing functions to other functions

00:42:25,760 --> 00:42:29,599
um so when you're doing that it becomes

00:42:28,560 --> 00:42:31,359
um

00:42:29,599 --> 00:42:33,040
it's more readable to just pass

00:42:31,359 --> 00:42:34,400
something simply like this and then you

00:42:33,040 --> 00:42:37,359
can put in

00:42:34,400 --> 00:42:39,520
um kind of a parameter in there rather

00:42:37,359 --> 00:42:41,839
than having to go through the whole

00:42:39,520 --> 00:42:42,800
function my function with this kind of

00:42:41,839 --> 00:42:44,079
format

00:42:42,800 --> 00:42:47,680
is just slightly more readable when

00:42:44,079 --> 00:42:47,680
you're passing them between functions

00:42:48,880 --> 00:42:52,800
yep that's great and which one do you

00:42:51,280 --> 00:42:55,839
prefer

00:42:52,800 --> 00:42:57,680
which one do i prefer yeah i

00:42:55,839 --> 00:42:59,200
i mean i'm lazy so i want to write the

00:42:57,680 --> 00:43:00,000
most efficient code as quickly as

00:42:59,200 --> 00:43:02,240
possible

00:43:00,000 --> 00:43:03,760
so i probably do arrow functions more

00:43:02,240 --> 00:43:04,480
and i have to if i have to type the

00:43:03,760 --> 00:43:07,440
whole word

00:43:04,480 --> 00:43:09,040
function out that's that's just too much

00:43:07,440 --> 00:43:10,960
effort for me

00:43:09,040 --> 00:43:12,319
did it change your life when you start

00:43:10,960 --> 00:43:16,000
using these kind of

00:43:12,319 --> 00:43:18,960
arrow functions was it different

00:43:16,000 --> 00:43:19,839
well so i'm going to show my my youth by

00:43:18,960 --> 00:43:21,760
answering this but

00:43:19,839 --> 00:43:23,920
why i only started learning javascript

00:43:21,760 --> 00:43:26,000
when arrow functions already existed so

00:43:23,920 --> 00:43:30,079
i kind of went straight into the

00:43:26,000 --> 00:43:32,079
um es6 uh versions of things so i'm

00:43:30,079 --> 00:43:33,200
probably more biased towards the newer

00:43:32,079 --> 00:43:36,079
things

00:43:33,200 --> 00:43:37,280
that's great yeah it's it's it's it's a

00:43:36,079 --> 00:43:41,119
new world i think

00:43:37,280 --> 00:43:44,400
from s5 to es6 and

00:43:41,119 --> 00:43:47,599
and then there's one more question

00:43:44,400 --> 00:43:50,319
if i uh only learn es6

00:43:47,599 --> 00:43:52,839
is there any point in me going back to

00:43:50,319 --> 00:43:55,920
es5 ns

00:43:52,839 --> 00:43:58,800
2015 yes absolutely

00:43:55,920 --> 00:44:01,280
there's still there were it's i guess

00:43:58,800 --> 00:44:03,839
you need to think of it not as

00:44:01,280 --> 00:44:04,400
necessarily once the new version comes

00:44:03,839 --> 00:44:06,880
along

00:44:04,400 --> 00:44:08,400
the old version is completely irrelevant

00:44:06,880 --> 00:44:10,960
because it's more of a kind of

00:44:08,400 --> 00:44:11,680
building building on top of what came

00:44:10,960 --> 00:44:14,480
before

00:44:11,680 --> 00:44:15,280
so sometimes you'll get a new option for

00:44:14,480 --> 00:44:17,359
how to write

00:44:15,280 --> 00:44:18,640
something like a function but sometimes

00:44:17,359 --> 00:44:20,960
you know the

00:44:18,640 --> 00:44:22,160
the array functions like dot map and for

00:44:20,960 --> 00:44:24,560
each those

00:44:22,160 --> 00:44:25,520
you know haven't really i still use them

00:44:24,560 --> 00:44:26,880
every single day

00:44:25,520 --> 00:44:28,560
and they haven't been replaced by

00:44:26,880 --> 00:44:30,079
anything

00:44:28,560 --> 00:44:31,680
because it's kind of you know they're

00:44:30,079 --> 00:44:33,440
good as what they are and we haven't

00:44:31,680 --> 00:44:34,800
replaced it with anything better so

00:44:33,440 --> 00:44:37,599
there's definitely

00:44:34,800 --> 00:44:39,839
um use whatever you find is the most

00:44:37,599 --> 00:44:44,000
intuitive to make your code work

00:44:39,839 --> 00:44:46,000
and look readable and usable

00:44:44,000 --> 00:44:47,200
yeah definitely and we had we had the

00:44:46,000 --> 00:44:49,839
talk back in uh

00:44:47,200 --> 00:44:51,760
two years ago at cdjs about the

00:44:49,839 --> 00:44:56,400
syntactic sugar and how this

00:44:51,760 --> 00:44:56,400
would potentially create diabetes

00:44:56,880 --> 00:45:02,960
and yeah so you have to still know

00:45:00,880 --> 00:45:04,720
the previous stuff plus the new one so

00:45:02,960 --> 00:45:08,800
you cannot really avoid

00:45:04,720 --> 00:45:11,920
um using the the the old stuff

00:45:08,800 --> 00:45:15,440
and the next question when should we

00:45:11,920 --> 00:45:17,839
destructure alignments near six

00:45:15,440 --> 00:45:18,640
sorry what was that when should we

00:45:17,839 --> 00:45:22,079
destructure

00:45:18,640 --> 00:45:24,400
align assignments in es6

00:45:22,079 --> 00:45:26,079
when do you find it uh appropriate to

00:45:24,400 --> 00:45:28,480
use the structuring

00:45:26,079 --> 00:45:30,240
in es6 when where would you find it

00:45:28,480 --> 00:45:32,640
helpful

00:45:30,240 --> 00:45:33,359
so what do you mean by destructuring so

00:45:32,640 --> 00:45:34,560
when you are

00:45:33,359 --> 00:45:36,480
having an object and you have to

00:45:34,560 --> 00:45:39,520
destructure it sometimes you know

00:45:36,480 --> 00:45:40,640
it's very quite it's another part of es6

00:45:39,520 --> 00:45:44,319
where

00:45:40,640 --> 00:45:47,599
instead of having like to do always.

00:45:44,319 --> 00:45:52,000
we can use the structure yeah yeah

00:45:47,599 --> 00:45:52,000
um sure so i

00:45:52,160 --> 00:45:56,560
i guess you know you use it whenever you

00:45:55,359 --> 00:45:59,920
feel

00:45:56,560 --> 00:46:01,040
like like whenever you feel like it's

00:45:59,920 --> 00:46:03,359
most useful to you

00:46:01,040 --> 00:46:04,400
as with anything in javascript it's kind

00:46:03,359 --> 00:46:06,319
of

00:46:04,400 --> 00:46:07,520
up to you how you want to use it the

00:46:06,319 --> 00:46:08,880
best like i don't think

00:46:07,520 --> 00:46:10,079
i don't i'm not the kind of person that

00:46:08,880 --> 00:46:11,359
believes that oh these are all of the

00:46:10,079 --> 00:46:14,800
times when you should use this

00:46:11,359 --> 00:46:16,480
exact method and any other way is just

00:46:14,800 --> 00:46:18,000
ridiculous like why would you do that i

00:46:16,480 --> 00:46:20,720
think you know

00:46:18,000 --> 00:46:22,160
it's ultimately whatever helps you write

00:46:20,720 --> 00:46:24,880
code that is effective

00:46:22,160 --> 00:46:26,720
and will help and other people can read

00:46:24,880 --> 00:46:29,599
it i think that's fine but maybe i'm

00:46:26,720 --> 00:46:32,000
just not a javascript purist

00:46:29,599 --> 00:46:33,839
it's like a ticket basically so you you

00:46:32,000 --> 00:46:35,680
get your tools and you're using them

00:46:33,839 --> 00:46:36,800
whenever you need you have to use them

00:46:35,680 --> 00:46:39,119
so you just exactly

00:46:36,800 --> 00:46:40,160
right yeah and i think one of the great

00:46:39,119 --> 00:46:43,119
things about

00:46:40,160 --> 00:46:44,880
the fact that we are getting um you know

00:46:43,119 --> 00:46:46,160
we get a new version we get a new

00:46:44,880 --> 00:46:48,160
ecmascript version

00:46:46,160 --> 00:46:50,720
every year and you're constantly getting

00:46:48,160 --> 00:46:52,160
new tools to add to that toolbox

00:46:50,720 --> 00:46:53,920
um but at the end of the day it's kind

00:46:52,160 --> 00:46:56,560
of up to you how you

00:46:53,920 --> 00:46:58,560
use them and then obviously there's kind

00:46:56,560 --> 00:46:59,119
of some things which are considered best

00:46:58,560 --> 00:47:02,480
practice

00:46:59,119 --> 00:47:03,920
but um i think it's you know coding is

00:47:02,480 --> 00:47:05,680
also a creative

00:47:03,920 --> 00:47:07,680
discipline and you have the freedom to

00:47:05,680 --> 00:47:09,200
use whatever you find the easiest as

00:47:07,680 --> 00:47:12,960
well

00:47:09,200 --> 00:47:13,920
yeah um exactly yeah but sometimes you

00:47:12,960 --> 00:47:17,599
have to avoid the

00:47:13,920 --> 00:47:20,800
callback hell how do you how do you go

00:47:17,599 --> 00:47:23,440
about it sorry

00:47:20,800 --> 00:47:24,800
how do i feel there's one more question

00:47:23,440 --> 00:47:27,680
it says um

00:47:24,800 --> 00:47:28,319
how can you prevent a so-called callback

00:47:27,680 --> 00:47:31,839
hell

00:47:28,319 --> 00:47:35,520
how do you go about it call back hell

00:47:31,839 --> 00:47:36,319
gosh i i don't have a good answer that

00:47:35,520 --> 00:47:38,720
question but

00:47:36,319 --> 00:47:40,480
like the sink and weight and all these

00:47:38,720 --> 00:47:43,520
promises that

00:47:40,480 --> 00:47:46,960
using the callbacks isn't it that

00:47:43,520 --> 00:47:49,839
i guess but what did they refer to

00:47:46,960 --> 00:47:51,040
yeah i mean i guess it's always good to

00:47:49,839 --> 00:47:54,720
kind of

00:47:51,040 --> 00:47:56,800
go back and re-write

00:47:54,720 --> 00:47:59,119
rewrite your code if you are getting

00:47:56,800 --> 00:48:02,240
into that callback hell then maybe

00:47:59,119 --> 00:48:04,559
it's because you haven't set your

00:48:02,240 --> 00:48:05,280
your what you're writing up in a way

00:48:04,559 --> 00:48:07,359
that is

00:48:05,280 --> 00:48:08,960
possibly the best way of doing it if you

00:48:07,359 --> 00:48:10,800
are getting into a situation where you

00:48:08,960 --> 00:48:13,119
feel like you're in call back hell

00:48:10,800 --> 00:48:14,960
probably best to kind of evaluate how

00:48:13,119 --> 00:48:16,240
what happened in your life to make you

00:48:14,960 --> 00:48:18,640
get to that point

00:48:16,240 --> 00:48:20,559
and then see if you can go back and kind

00:48:18,640 --> 00:48:23,119
of change the way that you approach the

00:48:20,559 --> 00:48:24,880
problem and fix it and maybe rewrite

00:48:23,119 --> 00:48:28,319
some things and fix it from

00:48:24,880 --> 00:48:29,359
the start and i'm going to ask you one

00:48:28,319 --> 00:48:32,000
more question from

00:48:29,359 --> 00:48:33,359
the audience sarah k in our in our

00:48:32,000 --> 00:48:35,839
youtube

00:48:33,359 --> 00:48:38,319
live stream she's asking do i need to

00:48:35,839 --> 00:48:39,280
ensure my linter is aware of the ecma

00:48:38,319 --> 00:48:42,640
version

00:48:39,280 --> 00:48:42,640
i'm using in my project

00:48:43,200 --> 00:48:48,480
um that is a good question um

00:48:46,880 --> 00:48:50,160
make sure that your linter is aware of

00:48:48,480 --> 00:48:51,920
what ecmascript version

00:48:50,160 --> 00:48:53,280
i think it also i think it depends on

00:48:51,920 --> 00:48:56,240
the linter that you use

00:48:53,280 --> 00:48:56,640
i'm not i'm not actually sure about that

00:48:56,240 --> 00:48:58,640
um

00:48:56,640 --> 00:48:59,839
i think they probably have a default

00:48:58,640 --> 00:49:02,480
already set for

00:48:59,839 --> 00:49:04,160
like probably you know yes five or six

00:49:02,480 --> 00:49:04,640
and it's probably customizable beyond

00:49:04,160 --> 00:49:06,000
that

00:49:04,640 --> 00:49:08,160
um but then again like linters

00:49:06,000 --> 00:49:11,200
themselves are very customizable so

00:49:08,160 --> 00:49:14,400
i can't answer that for all

00:49:11,200 --> 00:49:16,720
linters and um yeah i'd say have a

00:49:14,400 --> 00:49:18,000
like have a reset do some research into

00:49:16,720 --> 00:49:19,440
what is available

00:49:18,000 --> 00:49:22,480
for the specific lender that you're

00:49:19,440 --> 00:49:24,319
using well thank you very much

00:49:22,480 --> 00:49:25,920
and i think we're going to go to the

00:49:24,319 --> 00:49:28,400
next uh speaker

00:49:25,920 --> 00:49:31,040
if you if there are any other questions

00:49:28,400 --> 00:49:34,559
would you mind answering them on

00:49:31,040 --> 00:49:37,040
our youtube channel in the live stream

00:49:34,559 --> 00:49:37,920
sure that's great i'll do my best thank

00:49:37,040 --> 00:49:45,839
you very much

00:49:37,920 --> 00:49:45,839
congratulations thank you

00:52:02,839 --> 00:52:08,400
okay

00:52:04,079 --> 00:52:11,440
hey guys so uh

00:52:08,400 --> 00:52:13,599
thank you for your presentation here and

00:52:11,440 --> 00:52:14,720
my name is italu and today we will talk

00:52:13,599 --> 00:52:17,040
about

00:52:14,720 --> 00:52:18,000
computer vision and to start this talk i

00:52:17,040 --> 00:52:20,800
would like to introduce

00:52:18,000 --> 00:52:21,440
me so my name is italo i'm developer

00:52:20,800 --> 00:52:23,359
circle

00:52:21,440 --> 00:52:25,760
organizer the health circles are a

00:52:23,359 --> 00:52:27,599
community from

00:52:25,760 --> 00:52:29,040
from facebook and it's a global

00:52:27,599 --> 00:52:32,160
community

00:52:29,040 --> 00:52:36,160
and to microsoft multiple professional

00:52:32,160 --> 00:52:36,720
from micro microsoft use and i work as a

00:52:36,160 --> 00:52:40,079
solution

00:52:36,720 --> 00:52:42,079
text at vortex it's a fintech so

00:52:40,079 --> 00:52:43,920
today we will talk about computer vision

00:52:42,079 --> 00:52:47,280
but to start

00:52:43,920 --> 00:52:48,400
i want to talk about what isn't computer

00:52:47,280 --> 00:52:51,680
vision okay

00:52:48,400 --> 00:52:54,160
computer vision is not deep learn uh not

00:52:51,680 --> 00:52:54,960
necessarily deep learn and detect

00:52:54,160 --> 00:52:58,480
objects

00:52:54,960 --> 00:53:01,920
and use machine learning and some

00:52:58,480 --> 00:53:02,880
things like that and uh configuring

00:53:01,920 --> 00:53:06,000
computer vision

00:53:02,880 --> 00:53:09,280
is more you get an image

00:53:06,000 --> 00:53:12,400
and process it you know so for example

00:53:09,280 --> 00:53:13,520
uh you have three big areas inside

00:53:12,400 --> 00:53:17,280
computer vision

00:53:13,520 --> 00:53:21,280
there is image processing that is get

00:53:17,280 --> 00:53:24,079
an image and transform it for an image

00:53:21,280 --> 00:53:24,480
you have the computer vision that is get

00:53:24,079 --> 00:53:27,599
an

00:53:24,480 --> 00:53:28,480
image and transform it for a symbol for

00:53:27,599 --> 00:53:31,200
example

00:53:28,480 --> 00:53:32,240
an information get information from an

00:53:31,200 --> 00:53:35,520
image

00:53:32,240 --> 00:53:37,839
and here we don't

00:53:35,520 --> 00:53:39,040
using deep learning or machine learning

00:53:37,839 --> 00:53:41,040
or something like this

00:53:39,040 --> 00:53:42,160
okay we're just using the classical

00:53:41,040 --> 00:53:45,839
computer vision

00:53:42,160 --> 00:53:47,920
and when we got an image and extract

00:53:45,839 --> 00:53:51,280
some information for this image

00:53:47,920 --> 00:53:54,400
we are using computer vision okay

00:53:51,280 --> 00:53:57,359
and we have the computer graphs that

00:53:54,400 --> 00:53:58,240
is got a symbol got a mathematical

00:53:57,359 --> 00:54:02,000
formula

00:53:58,240 --> 00:54:05,200
get uh input and with this input

00:54:02,000 --> 00:54:08,400
transformation in an image okay

00:54:05,200 --> 00:54:11,760
and it's easy to confuse

00:54:08,400 --> 00:54:12,960
some of these terms because they are so

00:54:11,760 --> 00:54:15,599
much together

00:54:12,960 --> 00:54:17,040
but we have this difference and it's

00:54:15,599 --> 00:54:20,880
important to know when

00:54:17,040 --> 00:54:23,440
you are just uh searching something

00:54:20,880 --> 00:54:24,000
in the google for studying and something

00:54:23,440 --> 00:54:27,040
like this

00:54:24,000 --> 00:54:29,280
this terms is important but

00:54:27,040 --> 00:54:30,480
uh what do you have inside computer

00:54:29,280 --> 00:54:33,359
vision why we

00:54:30,480 --> 00:54:34,880
can do with computer vision when we

00:54:33,359 --> 00:54:37,599
don't using deep learning

00:54:34,880 --> 00:54:38,480
you know so here we have some examples

00:54:37,599 --> 00:54:42,000
for example

00:54:38,480 --> 00:54:44,880
a credit card we can uh learn

00:54:42,000 --> 00:54:45,920
uh an image and we can get some

00:54:44,880 --> 00:54:49,920
information

00:54:45,920 --> 00:54:53,599
about uh an image like this cat

00:54:49,920 --> 00:54:56,720
and for example these informations

00:54:53,599 --> 00:54:58,559
that you got from computer vision you

00:54:56,720 --> 00:55:02,720
can use it to improve

00:54:58,559 --> 00:55:06,160
a diploma model uh and we have here two

00:55:02,720 --> 00:55:09,200
uh among uh a month

00:55:06,160 --> 00:55:12,319
counter a hand counter you know uh

00:55:09,200 --> 00:55:12,799
and everything here done using deep

00:55:12,319 --> 00:55:17,280
learning

00:55:12,799 --> 00:55:19,200
uh and when i think when i talk about

00:55:17,280 --> 00:55:21,119
don't use deep learn it's not

00:55:19,200 --> 00:55:23,920
necessarily the deep learning

00:55:21,119 --> 00:55:24,400
is a bad thing you know but sometimes

00:55:23,920 --> 00:55:26,720
you

00:55:24,400 --> 00:55:28,960
can't use the learn because you have a

00:55:26,720 --> 00:55:32,880
short time to develop a featuring

00:55:28,960 --> 00:55:36,079
or you you need just to develop

00:55:32,880 --> 00:55:38,400
experimental software for some

00:55:36,079 --> 00:55:39,119
customer and you don't have data you

00:55:38,400 --> 00:55:42,160
don't have

00:55:39,119 --> 00:55:46,000
time you don't have gpus to process

00:55:42,160 --> 00:55:48,240
a deep learning model fast so

00:55:46,000 --> 00:55:50,000
for solution this problem you can use

00:55:48,240 --> 00:55:53,040
classical computer vision

00:55:50,000 --> 00:55:55,040
you know and another thing

00:55:53,040 --> 00:55:56,559
the computer vision without deep

00:55:55,040 --> 00:56:00,079
learning you can do

00:55:56,559 --> 00:56:03,119
is uh for example this project

00:56:00,079 --> 00:56:03,839
this version is islam okay this land is

00:56:03,119 --> 00:56:07,520
a

00:56:03,839 --> 00:56:10,720
it's a software to to detect it

00:56:07,520 --> 00:56:14,240
the movements you by the camera and

00:56:10,720 --> 00:56:17,599
with that serious times construct

00:56:14,240 --> 00:56:21,119
our path you know so it's a

00:56:17,599 --> 00:56:24,079
for me it's the most powerful

00:56:21,119 --> 00:56:25,520
usage of computer vision that we don't

00:56:24,079 --> 00:56:28,319
use deep learning

00:56:25,520 --> 00:56:30,319
and it's show the part the whole

00:56:28,319 --> 00:56:31,520
powerful is compromised called computer

00:56:30,319 --> 00:56:34,720
vision

00:56:31,520 --> 00:56:38,000
and should to

00:56:34,720 --> 00:56:41,040
for our demo we we use the opencv

00:56:38,000 --> 00:56:44,880
opencv is a library uh it's a

00:56:41,040 --> 00:56:48,319
library powered by bing tao and

00:56:44,880 --> 00:56:48,799
this library original is built in c plus

00:56:48,319 --> 00:56:51,839
plus

00:56:48,799 --> 00:56:53,040
but we have some binds for python for

00:56:51,839 --> 00:56:56,960
node.js

00:56:53,040 --> 00:57:00,000
for c chart and today we will use opencv

00:56:56,960 --> 00:57:03,680
for node.js okay so

00:57:00,000 --> 00:57:07,359
show the code um

00:57:03,680 --> 00:57:10,000
here i have a code and when i execute

00:57:07,359 --> 00:57:10,000
this code

00:57:10,319 --> 00:57:18,480
i have this result um

00:57:14,799 --> 00:57:21,440
i have some stats oh sorry by that but

00:57:18,480 --> 00:57:21,839
the application the windows is spawning

00:57:21,440 --> 00:57:24,960
in my

00:57:21,839 --> 00:57:26,079
another monitor you know so we have so

00:57:24,960 --> 00:57:29,839
much steps

00:57:26,079 --> 00:57:34,160
of processor uh processing image so

00:57:29,839 --> 00:57:37,119
in the final we can got uh

00:57:34,160 --> 00:57:38,319
a contour of our document this is a

00:57:37,119 --> 00:57:41,760
brazilian document

00:57:38,319 --> 00:57:45,359
okay so and for this problem

00:57:41,760 --> 00:57:49,200
we want to get an image

00:57:45,359 --> 00:57:52,240
this image and extract

00:57:49,200 --> 00:57:52,960
the document but i don't have time i

00:57:52,240 --> 00:57:56,240
don't have

00:57:52,960 --> 00:57:57,680
money for gpu i don't have uh know how

00:57:56,240 --> 00:58:01,440
about deep learning

00:57:57,680 --> 00:58:02,559
but i need do it i need to extract this

00:58:01,440 --> 00:58:05,920
document from

00:58:02,559 --> 00:58:09,599
this image how i can do it in a fast

00:58:05,920 --> 00:58:10,480
way uh i can use classical computer

00:58:09,599 --> 00:58:14,480
vision

00:58:10,480 --> 00:58:17,920
and as i say it to do it we use

00:58:14,480 --> 00:58:21,119
the opencv for node.js so

00:58:17,920 --> 00:58:24,480
obviously for node.js is a library that

00:58:21,119 --> 00:58:28,000
implements the simplest plus binds okay

00:58:24,480 --> 00:58:30,160
it's a community library and

00:58:28,000 --> 00:58:31,760
as you can see in the documentation we

00:58:30,160 --> 00:58:34,960
have saw one thing

00:58:31,760 --> 00:58:38,319
uh already do it

00:58:34,960 --> 00:58:41,440
so just just implement it

00:58:38,319 --> 00:58:45,040
and use these features okay

00:58:41,440 --> 00:58:46,880
but for this demo we will see how we can

00:58:45,040 --> 00:58:50,720
do with

00:58:46,880 --> 00:58:53,760
we can do it without uh any

00:58:50,720 --> 00:58:57,119
already did it feature it okay

00:58:53,760 --> 00:59:00,319
so uh the first thing is

00:58:57,119 --> 00:59:01,920
request okay the node.js for the opencv

00:59:00,319 --> 00:59:06,079
for node.js

00:59:01,920 --> 00:59:09,200
so after that we just uh

00:59:06,079 --> 00:59:12,640
we read our image and

00:59:09,200 --> 00:59:16,799
when we read the image we got a matrix

00:59:12,640 --> 00:59:20,079
and these metrics we can do what we want

00:59:16,799 --> 00:59:23,280
so uh we got this image and sent to

00:59:20,079 --> 00:59:24,240
method process frame this method process

00:59:23,280 --> 00:59:27,200
frame

00:59:24,240 --> 00:59:28,880
we do we start to do something like

00:59:27,200 --> 00:59:31,920
photoshop you know

00:59:28,880 --> 00:59:33,599
so uh i have a problem that is the that

00:59:31,920 --> 00:59:36,799
um

00:59:33,599 --> 00:59:39,760
uh document in my image so first

00:59:36,799 --> 00:59:40,400
everything i need to do that a pattern

00:59:39,760 --> 00:59:43,359
you know

00:59:40,400 --> 00:59:43,920
and the first pattern as you can see

00:59:43,359 --> 00:59:47,119
here

00:59:43,920 --> 00:59:47,839
is this document is green all document

00:59:47,119 --> 00:59:51,200
is green

00:59:47,839 --> 00:59:55,440
so if i if i extract only green

00:59:51,200 --> 00:59:59,440
color i can get only the document

00:59:55,440 --> 01:00:03,119
session you know so in my index ds

00:59:59,440 --> 01:00:04,079
i do exactly it so i create a mask by

01:00:03,119 --> 01:00:07,040
color

01:00:04,079 --> 01:00:07,040
in this method

01:00:07,920 --> 01:00:16,319
in this method i just uh transform

01:00:12,240 --> 01:00:19,760
my my image that is rgb

01:00:16,319 --> 01:00:22,799
to hsv hsv

01:00:19,760 --> 01:00:25,839
it's a color schema that we have uh

01:00:22,799 --> 01:00:29,200
our color our saturation

01:00:25,839 --> 01:00:32,319
and uh the intensity how much uh

01:00:29,200 --> 01:00:35,599
is uh how much darker

01:00:32,319 --> 01:00:38,799
or clear er your easer image

01:00:35,599 --> 01:00:41,920
you know so uh when you

01:00:38,799 --> 01:00:42,799
create this transformation we just

01:00:41,920 --> 01:00:46,160
selected

01:00:42,799 --> 01:00:49,359
the our color by nahin

01:00:46,160 --> 01:00:53,280
these two colors here and just

01:00:49,359 --> 01:00:56,480
uh that defining here in

01:00:53,280 --> 01:01:00,000
setting 6080 line so

01:00:56,480 --> 01:01:03,119
i set a air gp color

01:01:00,000 --> 01:01:06,240
okay so i define how much

01:01:03,119 --> 01:01:10,559
uh is the range that i

01:01:06,240 --> 01:01:14,319
i want to to filter this image

01:01:10,559 --> 01:01:18,400
so when i do this mask i show it

01:01:14,319 --> 01:01:22,160
as i already showed it before for you

01:01:18,400 --> 01:01:25,440
so when i create this mask

01:01:22,160 --> 01:01:28,799
this mask will

01:01:25,440 --> 01:01:31,200
will be a little bit sharp you know

01:01:28,799 --> 01:01:31,839
as you can see here we have so much

01:01:31,200 --> 01:01:34,960
noise

01:01:31,839 --> 01:01:38,079
in this image we can't extract

01:01:34,960 --> 01:01:42,559
only only only the document here

01:01:38,079 --> 01:01:46,559
so how we can remove this noise

01:01:42,559 --> 01:01:49,680
so i can

01:01:46,559 --> 01:01:52,960
for example blur this mask

01:01:49,680 --> 01:01:56,559
when i blur this mask i

01:01:52,960 --> 01:02:00,160
just remove some little nice

01:01:56,559 --> 01:02:04,160
piece of my image for example

01:02:00,160 --> 01:02:07,039
as you can see here we have a sharpened

01:02:04,160 --> 01:02:08,319
super noisy image and here we have a

01:02:07,039 --> 01:02:11,520
cleaner image

01:02:08,319 --> 01:02:12,160
as you can see for example some uh some

01:02:11,520 --> 01:02:15,359
blank

01:02:12,160 --> 01:02:18,799
this here are here

01:02:15,359 --> 01:02:22,400
some points here we don't have it here

01:02:18,799 --> 01:02:28,160
as you can see so

01:02:22,400 --> 01:02:28,160
to do that to learn an image we can just

01:02:28,480 --> 01:02:36,400
show just ask for the opencv to blur

01:02:31,760 --> 01:02:39,440
our image ah a size in this size

01:02:36,400 --> 01:02:42,720
is is a

01:02:39,440 --> 01:02:45,839
it's a it's like convolution you know so

01:02:42,720 --> 01:02:47,039
the blur method we've got 10 pixels by

01:02:45,839 --> 01:02:50,640
10 pixels

01:02:47,039 --> 01:02:54,000
and we'll multiply the all these colors

01:02:50,640 --> 01:02:57,520
and we've got a planet image blurred

01:02:54,000 --> 01:03:02,480
piece and these windows this window

01:02:57,520 --> 01:03:06,400
will uh will will be replaced by all

01:03:02,480 --> 01:03:09,839
the image all the biotic pixels

01:03:06,400 --> 01:03:11,039
so after that after i got my blended

01:03:09,839 --> 01:03:14,240
image

01:03:11,039 --> 01:03:15,440
i just sharpened it again because as you

01:03:14,240 --> 01:03:18,240
can see

01:03:15,440 --> 01:03:18,960
i have a blur knit image and i can't

01:03:18,240 --> 01:03:22,480
detect

01:03:18,960 --> 01:03:23,280
um a rectangle you know because it's a

01:03:22,480 --> 01:03:26,240
blurred

01:03:23,280 --> 01:03:27,359
image and i i don't know where it start

01:03:26,240 --> 01:03:31,359
and where is

01:03:27,359 --> 01:03:35,359
finish uh so to do that

01:03:31,359 --> 01:03:39,039
i just when i when i

01:03:35,359 --> 01:03:43,599
started it you can see that i can

01:03:39,039 --> 01:03:46,640
just select my just select my

01:03:43,599 --> 01:03:49,760
my document and i

01:03:46,640 --> 01:03:53,039
know exactly where my document starts

01:03:49,760 --> 01:03:56,319
and where my document finished you know

01:03:53,039 --> 01:03:59,839
and we have okay we have uh some

01:03:56,319 --> 01:04:03,200
noises here but to

01:03:59,839 --> 01:04:07,200
avoid this noise we can

01:04:03,200 --> 01:04:11,440
just choose the biggest contour

01:04:07,200 --> 01:04:14,880
so for example here we have

01:04:11,440 --> 01:04:18,960
an object and another object a big

01:04:14,880 --> 01:04:22,640
object here we have another object

01:04:18,960 --> 01:04:23,680
and to filter all these little objects i

01:04:22,640 --> 01:04:27,119
can just

01:04:23,680 --> 01:04:28,079
choose the biggest one okay so and to do

01:04:27,119 --> 01:04:31,839
that

01:04:28,079 --> 01:04:34,960
in my get biggest contour

01:04:31,839 --> 01:04:38,240
i just uh call the method find

01:04:34,960 --> 01:04:41,599
contours passing as parameter

01:04:38,240 --> 01:04:45,119
head external so i want to contour

01:04:41,599 --> 01:04:46,319
the external of my objects and i usually

01:04:45,119 --> 01:04:49,440
like to

01:04:46,319 --> 01:04:52,480
uh to do a simple

01:04:49,440 --> 01:04:57,119
chain uh i will i used to like

01:04:52,480 --> 01:05:01,280
this contour is closed you know

01:04:57,119 --> 01:05:03,520
and so after that i will got somewhat

01:05:01,280 --> 01:05:06,319
contoured i will got a one contour for

01:05:03,520 --> 01:05:09,440
each object inside my mask

01:05:06,319 --> 01:05:12,960
so i just sort it and get

01:05:09,440 --> 01:05:13,599
the biggest one after that after get to

01:05:12,960 --> 01:05:17,039
the

01:05:13,599 --> 01:05:20,799
biggest contour i need to

01:05:17,039 --> 01:05:24,960
to draw where my document is

01:05:20,799 --> 01:05:28,640
you know so i just

01:05:24,960 --> 01:05:32,799
create a method to do it too

01:05:28,640 --> 01:05:36,480
so i just define the perimeter

01:05:32,799 --> 01:05:40,559
and the brim of my mask

01:05:36,480 --> 01:05:44,319
so after that i asked for opencv

01:05:40,559 --> 01:05:48,319
to to return me

01:05:44,319 --> 01:05:52,240
the point where this where this

01:05:48,319 --> 01:05:53,200
contour is you know so i will go after

01:05:52,240 --> 01:05:57,200
uh

01:05:53,200 --> 01:06:00,880
here in points i have got a array

01:05:57,200 --> 01:06:04,240
uh and this array is filled with so much

01:06:00,880 --> 01:06:07,760
uh points and we with x

01:06:04,240 --> 01:06:11,359
and y of my image so after that

01:06:07,760 --> 01:06:14,559
i can just draw it passing my

01:06:11,359 --> 01:06:18,480
points that's uh how much

01:06:14,559 --> 01:06:21,680
is the trickiness of my my my line

01:06:18,480 --> 01:06:24,000
the color of my line and if i want to

01:06:21,680 --> 01:06:27,440
close or not my

01:06:24,000 --> 01:06:30,880
my my my contour you know

01:06:27,440 --> 01:06:34,079
so after that i can got my result

01:06:30,880 --> 01:06:37,440
and the benefits of this is

01:06:34,079 --> 01:06:40,720
like i already said before

01:06:37,440 --> 01:06:43,599
sometimes when you don't have time to do

01:06:40,720 --> 01:06:45,599
some protospo or something like this you

01:06:43,599 --> 01:06:48,559
can use the opencv

01:06:45,599 --> 01:06:49,119
and costco computer vision to build

01:06:48,559 --> 01:06:52,720
these

01:06:49,119 --> 01:06:56,160
products for example here we can

01:06:52,720 --> 01:06:59,440
here i two years ago i

01:06:56,160 --> 01:07:02,000
have a problem that is to detect

01:06:59,440 --> 01:07:03,039
the the this document that you can see

01:07:02,000 --> 01:07:07,119
here it's a

01:07:03,039 --> 01:07:10,960
card id from here brazil and another

01:07:07,119 --> 01:07:15,039
another type of card id that is

01:07:10,960 --> 01:07:18,160
uh that was bloom so we got a card id

01:07:15,039 --> 01:07:21,200
a green card id and a blue card id

01:07:18,160 --> 01:07:22,960
so i didn't need to develop a big

01:07:21,200 --> 01:07:25,680
command complex model

01:07:22,960 --> 01:07:27,359
using deep learn to detect these two

01:07:25,680 --> 01:07:30,640
objects inside my image

01:07:27,359 --> 01:07:34,319
i just use costco computer vision and as

01:07:30,640 --> 01:07:37,359
you can see this code it's a simple code

01:07:34,319 --> 01:07:40,480
it's not a complex code so

01:07:37,359 --> 01:07:42,880
uh with it i with it i

01:07:40,480 --> 01:07:43,520
just built an application that is

01:07:42,880 --> 01:07:46,880
tracked these

01:07:43,520 --> 01:07:50,240
two two images and extract is

01:07:46,880 --> 01:07:52,960
extracting these two image i can

01:07:50,240 --> 01:07:53,839
work in more technicals inside it for

01:07:52,960 --> 01:07:56,880
example

01:07:53,839 --> 01:08:00,160
to got my

01:07:56,880 --> 01:08:06,319
my card id number or verify if

01:08:00,160 --> 01:08:06,319
my if this session of my image has some

01:08:06,480 --> 01:08:15,440
some data that i need you know

01:08:09,680 --> 01:08:15,440
so uh the message here is

01:08:15,680 --> 01:08:19,759
you can you don't need deep learn you

01:08:18,640 --> 01:08:23,679
can use

01:08:19,759 --> 01:08:27,199
a simple classical computer vision

01:08:23,679 --> 01:08:27,679
and i mean i guess i will be a little

01:08:27,199 --> 01:08:30,880
bit

01:08:27,679 --> 01:08:33,120
faster sorry about that

01:08:30,880 --> 01:08:33,120
but

01:08:35,440 --> 01:08:40,640
we got in the end and

01:08:38,719 --> 01:08:53,839
thank you very much if you have some

01:08:40,640 --> 01:08:53,839
questions on something like this

01:09:36,159 --> 01:09:42,799
hello italo how are you hey everyone

01:09:40,239 --> 01:09:43,839
i'm fine i'm a little bit uh electrical

01:09:42,799 --> 01:09:48,080
so

01:09:43,839 --> 01:09:48,080
i was a little bit fast

01:09:51,279 --> 01:09:58,560
we can ask a lot of questions and and

01:09:55,600 --> 01:09:59,600
learn more from you and the first

01:09:58,560 --> 01:10:01,760
question is

01:09:59,600 --> 01:10:02,880
what is the most exciting projects you

01:10:01,760 --> 01:10:07,520
have

01:10:02,880 --> 01:10:10,640
you have been able to build with opencv

01:10:07,520 --> 01:10:14,159
can you give us some examples okay so

01:10:10,640 --> 01:10:17,440
this opencv was a person tracking

01:10:14,159 --> 01:10:18,239
so in computer vision we have some

01:10:17,440 --> 01:10:21,840
technicals

01:10:18,239 --> 01:10:25,520
to for example extract the front

01:10:21,840 --> 01:10:28,800
objects the objects is from the camera

01:10:25,520 --> 01:10:29,600
and ignore the background so with this

01:10:28,800 --> 01:10:33,280
you can

01:10:29,600 --> 01:10:37,120
for example got the different from two

01:10:33,280 --> 01:10:40,880
two frames so when you got the different

01:10:37,120 --> 01:10:44,400
between two frames you you can detect

01:10:40,880 --> 01:10:47,840
what are moving and

01:10:44,400 --> 01:10:51,679
you can just uh tracking

01:10:47,840 --> 01:10:54,159
this movement object or you can just

01:10:51,679 --> 01:10:56,560
delete this object and deleting this

01:10:54,159 --> 01:11:00,480
object you can have only the

01:10:56,560 --> 01:11:03,679
clean background so imagine you have

01:11:00,480 --> 01:11:06,400
uh a video and

01:11:03,679 --> 01:11:07,360
so much people passing in in a tourist

01:11:06,400 --> 01:11:10,880
place

01:11:07,360 --> 01:11:12,480
and you want a perfect photography from

01:11:10,880 --> 01:11:15,520
this place with

01:11:12,480 --> 01:11:19,440
any one person in front your victory

01:11:15,520 --> 01:11:22,560
so using computer vision and open tv

01:11:19,440 --> 01:11:26,560
uh i viewed a

01:11:22,560 --> 01:11:30,560
a project that compared the

01:11:26,560 --> 01:11:32,719
the frames and tracking the

01:11:30,560 --> 01:11:35,040
and tracking the different pixels you

01:11:32,719 --> 01:11:38,080
know and the different pixels

01:11:35,040 --> 01:11:41,280
is equals the movement objects

01:11:38,080 --> 01:11:42,159
in these objects was the people and i

01:11:41,280 --> 01:11:45,280
just removed

01:11:42,159 --> 01:11:49,280
these uh different pixels and

01:11:45,280 --> 01:11:52,640
i was merging the

01:11:49,280 --> 01:11:53,280
the photograph that has the same piece

01:11:52,640 --> 01:11:56,560
of

01:11:53,280 --> 01:12:00,400
image in the video so in the final i

01:11:56,560 --> 01:12:01,199
i have a unique victory with only the

01:12:00,400 --> 01:12:04,719
place

01:12:01,199 --> 01:12:08,400
of this trick to rescue victory and with

01:12:04,719 --> 01:12:12,239
any one person inside this image

01:12:08,400 --> 01:12:15,760
you know uh it was a cool a cool project

01:12:12,239 --> 01:12:19,120
and i built it another project

01:12:15,760 --> 01:12:23,440
another interesting project was

01:12:19,120 --> 01:12:26,560
as i i show it here

01:12:23,440 --> 01:12:31,199
was dayslam islam

01:12:26,560 --> 01:12:36,000
uh for me is my favorite algorithm

01:12:31,199 --> 01:12:37,760
islam here we as you can see here we

01:12:36,000 --> 01:12:42,320
detect some

01:12:37,760 --> 01:12:42,320
some key points from our image

01:12:44,320 --> 01:12:47,840
oh sorry about it

01:12:48,880 --> 01:12:52,400
okay so my favorite algorithm in

01:12:51,440 --> 01:12:55,920
computer vision

01:12:52,400 --> 01:12:59,440
is this lamp and i built it in

01:12:55,920 --> 01:13:02,000
for uh in my uh

01:12:59,440 --> 01:13:02,560
in a hackathon in the china where i

01:13:02,000 --> 01:13:06,320
built

01:13:02,560 --> 01:13:09,199
a self-driving car there and we

01:13:06,320 --> 01:13:10,000
used this land to detect the movement of

01:13:09,199 --> 01:13:12,800
the car

01:13:10,000 --> 01:13:13,440
just using computer vision so here we

01:13:12,800 --> 01:13:16,560
got

01:13:13,440 --> 01:13:19,440
the key points from image and we

01:13:16,560 --> 01:13:20,080
we compare this key point with the next

01:13:19,440 --> 01:13:23,440
image

01:13:20,080 --> 01:13:26,400
you know and comparing these key points

01:13:23,440 --> 01:13:27,360
with the next image the same key point

01:13:26,400 --> 01:13:30,480
we can

01:13:27,360 --> 01:13:34,000
uh verify the distance between first

01:13:30,480 --> 01:13:35,679
frame and second framing so with this we

01:13:34,000 --> 01:13:39,280
can got the

01:13:35,679 --> 01:13:42,480
the camera movement and when you do it

01:13:39,280 --> 01:13:45,600
in so much frames by so much seconds

01:13:42,480 --> 01:13:47,040
you can get exactly a movement of the

01:13:45,600 --> 01:13:49,840
camera

01:13:47,040 --> 01:13:52,320
so uh everything use only computer

01:13:49,840 --> 01:13:54,960
vision and classical computer vision

01:13:52,320 --> 01:13:56,080
and for me it's them it's my favorite

01:13:54,960 --> 01:13:59,760
project

01:13:56,080 --> 01:14:02,800
this gif is not about my project okay

01:13:59,760 --> 01:14:06,800
because my project was only cold

01:14:02,800 --> 01:14:09,840
it's not a feasible project but

01:14:06,800 --> 01:14:12,159
for me for me it's it's long it's

01:14:09,840 --> 01:14:12,159
awesome

01:14:12,400 --> 01:14:17,440
really amazing um

01:14:15,440 --> 01:14:18,640
is it is there something from this that

01:14:17,440 --> 01:14:21,360
you you did

01:14:18,640 --> 01:14:23,280
used during the your presentation at

01:14:21,360 --> 01:14:27,520
cdjs

01:14:23,280 --> 01:14:31,040
is there any relative thing

01:14:27,520 --> 01:14:33,840
uh sorry during ctjs you did

01:14:31,040 --> 01:14:35,120
do some really amazing stuff are there

01:14:33,840 --> 01:14:36,960
any

01:14:35,120 --> 01:14:38,560
any stuff that you did today that you

01:14:36,960 --> 01:14:41,520
showed us today that they have any

01:14:38,560 --> 01:14:41,520
connection to it

01:14:41,600 --> 01:14:47,679
uh some some connection with uh

01:14:44,880 --> 01:14:49,679
city city yes yeah yeah the talk that

01:14:47,679 --> 01:14:52,880
you did during the ctjs

01:14:49,679 --> 01:14:56,719
oh oh sure um

01:14:52,880 --> 01:14:56,719
let me remember what was

01:14:59,199 --> 01:15:02,480
more about machine learning and you're

01:15:00,960 --> 01:15:02,880
moving your hands do you remember that

01:15:02,480 --> 01:15:06,400
really

01:15:02,880 --> 01:15:09,440
oh yeah sure no there i was using

01:15:06,400 --> 01:15:10,640
the dip learn but there i was using a

01:15:09,440 --> 01:15:13,360
prep builded

01:15:10,640 --> 01:15:14,320
tripling model and the different there

01:15:13,360 --> 01:15:18,480
and here

01:15:14,320 --> 01:15:21,840
is there i was segmenting my

01:15:18,480 --> 01:15:25,040
body and i use it a prep

01:15:21,840 --> 01:15:29,040
builded model so the facebook has

01:15:25,040 --> 01:15:32,640
trained a deep learning model

01:15:29,040 --> 01:15:35,600
you know so i used a library to

01:15:32,640 --> 01:15:37,040
get this information from my my body

01:15:35,600 --> 01:15:39,280
segment my body

01:15:37,040 --> 01:15:40,320
to write as my hand the deck wears my

01:15:39,280 --> 01:15:43,920
head

01:15:40,320 --> 01:15:46,400
and here i'm not using the deep learn

01:15:43,920 --> 01:15:47,280
i i'm using just classical computer

01:15:46,400 --> 01:15:50,159
vision and

01:15:47,280 --> 01:15:51,360
classical image processing and it's

01:15:50,159 --> 01:15:54,800
different because

01:15:51,360 --> 01:15:55,440
uh in deep learning and did you learn is

01:15:54,800 --> 01:15:58,880
a hype

01:15:55,440 --> 01:16:01,920
you know and learn is awesome too

01:15:58,880 --> 01:16:05,600
but sometimes we can't use deep learning

01:16:01,920 --> 01:16:08,640
but it's

01:16:05,600 --> 01:16:09,440
if you can't use deep learn don't stop

01:16:08,640 --> 01:16:12,880
your project

01:16:09,440 --> 01:16:13,520
done don't forget it don't forget your

01:16:12,880 --> 01:16:16,640
project

01:16:13,520 --> 01:16:20,159
you can build uh your project in a

01:16:16,640 --> 01:16:21,280
synthesis way and using classical

01:16:20,159 --> 01:16:23,840
computer vision

01:16:21,280 --> 01:16:24,320
and classical computer vision is super

01:16:23,840 --> 01:16:28,239
more

01:16:24,320 --> 01:16:30,400
super powerful and some some developers

01:16:28,239 --> 01:16:31,440
ignore the classical computer vision

01:16:30,400 --> 01:16:34,800
because we have

01:16:31,440 --> 01:16:37,760
deep learned today but uh

01:16:34,800 --> 01:16:39,360
as i said sometimes you can use the deep

01:16:37,760 --> 01:16:42,640
learning so you need to know

01:16:39,360 --> 01:16:46,080
computer vision and uh

01:16:42,640 --> 01:16:49,360
the difference between their their talk

01:16:46,080 --> 01:16:51,040
and this talk is there i was using the

01:16:49,360 --> 01:16:52,080
learn here i'm not in using deep

01:16:51,040 --> 01:16:54,400
learning you know

01:16:52,080 --> 01:16:55,679
okay that's good and if the talk is

01:16:54,400 --> 01:16:58,560
online so if people

01:16:55,679 --> 01:16:59,670
want to watch it it's on the same pusher

01:16:58,560 --> 01:17:01,199
channel and

01:16:59,670 --> 01:17:03,280
[Music]

01:17:01,199 --> 01:17:05,440
we broadcast this talk twice because it

01:17:03,280 --> 01:17:07,600
was quite uh interesting

01:17:05,440 --> 01:17:09,280
and but yeah you can go we can you can

01:17:07,600 --> 01:17:12,640
go to the booster channel and

01:17:09,280 --> 01:17:14,880
watch it there's one more question

01:17:12,640 --> 01:17:16,000
is there anything you've seen that you

01:17:14,880 --> 01:17:20,080
want to recreate with

01:17:16,000 --> 01:17:21,760
opencv everything anything it's most

01:17:20,080 --> 01:17:22,800
exciting that you would like to recreate

01:17:21,760 --> 01:17:25,760
it

01:17:22,800 --> 01:17:26,640
okay uh something that i want to create

01:17:25,760 --> 01:17:28,159
recreate

01:17:26,640 --> 01:17:29,679
it's something you have seen and it's

01:17:28,159 --> 01:17:31,360
very exciting

01:17:29,679 --> 01:17:33,440
and you would like to recreate it with

01:17:31,360 --> 01:17:36,400
opencv

01:17:33,440 --> 01:17:38,080
that i created before yeah you played

01:17:36,400 --> 01:17:39,679
before and you liked the snowmans that

01:17:38,080 --> 01:17:43,760
you would go back again

01:17:39,679 --> 01:17:44,800
and do it okay uh this one this one is

01:17:43,760 --> 01:17:47,920
it was my

01:17:44,800 --> 01:17:51,440
my favorite project that i had built uh

01:17:47,920 --> 01:17:53,679
and as as i can as i said this gif

01:17:51,440 --> 01:17:56,800
is not about the my code because my

01:17:53,679 --> 01:17:56,800
codes don't have a

01:17:57,199 --> 01:18:01,040
image you know it's not it's not visible

01:17:59,600 --> 01:18:04,640
it's only called but

01:18:01,040 --> 01:18:07,360
uh this learn for me was the

01:18:04,640 --> 01:18:07,840
most cool project that i built in my

01:18:07,360 --> 01:18:11,280
life

01:18:07,840 --> 01:18:11,920
using just computer vision and after

01:18:11,280 --> 01:18:14,800
that

01:18:11,920 --> 01:18:15,760
is used is using computer vision to

01:18:14,800 --> 01:18:20,320
detect

01:18:15,760 --> 01:18:23,199
to work with uh with card ids

01:18:20,320 --> 01:18:25,280
here in brazil we have so much so much

01:18:23,199 --> 01:18:28,719
problem with card ids

01:18:25,280 --> 01:18:30,000
and we need to detect if if this card

01:18:28,719 --> 01:18:33,120
like this

01:18:30,000 --> 01:18:37,360
is not false and something like this

01:18:33,120 --> 01:18:40,960
so i have so much jobs with this

01:18:37,360 --> 01:18:45,920
with this project and i just most

01:18:40,960 --> 01:18:48,880
parts of this this project i use only

01:18:45,920 --> 01:18:50,239
on computer vision because it's faster

01:18:48,880 --> 01:18:53,360
it's cheapest

01:18:50,239 --> 01:18:56,640
and we have the same result

01:18:53,360 --> 01:18:59,040
you know that's amazing and

01:18:56,640 --> 01:19:03,120
have you found anything that you feel

01:18:59,040 --> 01:19:07,040
like it needs to be improved in opencv

01:19:03,120 --> 01:19:10,719
something to improve in opencv

01:19:07,040 --> 01:19:13,760
it's i guess is the performance because

01:19:10,719 --> 01:19:15,360
but it's not about the open cv it's

01:19:13,760 --> 01:19:19,280
about the computer vision

01:19:15,360 --> 01:19:23,840
because sometimes if you

01:19:19,280 --> 01:19:23,840
don't know so much about

01:19:23,920 --> 01:19:30,640
code complexity you can

01:19:27,280 --> 01:19:33,920
you can make some mistakes

01:19:30,640 --> 01:19:37,760
and as you are working with

01:19:33,920 --> 01:19:40,880
metrics when you for example

01:19:37,760 --> 01:19:44,000
work with loops inside your

01:19:40,880 --> 01:19:47,040
your image you got a bad performance and

01:19:44,000 --> 01:19:51,120
it's uh in the deep learning

01:19:47,040 --> 01:19:53,199
have a it's better because uh

01:19:51,120 --> 01:19:54,159
in the deep learn you don't will have

01:19:53,199 --> 01:19:56,960
this problem

01:19:54,159 --> 01:19:59,040
and the difference between the principal

01:19:56,960 --> 01:20:02,560
problem between computer vision

01:19:59,040 --> 01:20:04,960
and uh diploma is the in the computer

01:20:02,560 --> 01:20:07,600
vision you need to

01:20:04,960 --> 01:20:08,560
pay attention about performance you know

01:20:07,600 --> 01:20:12,800
so

01:20:08,560 --> 01:20:15,679
uh i don't have a specific thing about

01:20:12,800 --> 01:20:16,639
opencv but i have because it's just a

01:20:15,679 --> 01:20:20,320
framework you know

01:20:16,639 --> 01:20:23,520
computer vision is computer vision

01:20:20,320 --> 01:20:26,159
you using opencv or not

01:20:23,520 --> 01:20:27,840
and i believe the computer vision have

01:20:26,159 --> 01:20:30,880
this

01:20:27,840 --> 01:20:33,920
downside that is the performance

01:20:30,880 --> 01:20:36,239
it's not less per format but you can

01:20:33,920 --> 01:20:38,400
you need to pay attention about it you

01:20:36,239 --> 01:20:38,400
know

01:20:41,280 --> 01:20:44,719
yeah i think i think gabby has always

01:20:43,199 --> 01:20:48,639
got a question for us

01:20:44,719 --> 01:20:50,880
for you yeah i just had a quick question

01:20:48,639 --> 01:20:51,840
um firstly great talk it was super

01:20:50,880 --> 01:20:54,159
interesting

01:20:51,840 --> 01:20:54,880
um i'm just i was just wondering because

01:20:54,159 --> 01:20:56,639
i know that

01:20:54,880 --> 01:20:57,920
people don't normally think of

01:20:56,639 --> 01:21:00,080
javascript as

01:20:57,920 --> 01:21:02,400
a language for doing computer vision

01:21:00,080 --> 01:21:04,560
with um so i was just wondering was did

01:21:02,400 --> 01:21:06,320
you start learning computer vision

01:21:04,560 --> 01:21:07,760
with javascript or did you start with a

01:21:06,320 --> 01:21:09,920
different language and then

01:21:07,760 --> 01:21:11,760
um figure out how to do it okay this is

01:21:09,920 --> 01:21:15,199
an awesome question

01:21:11,760 --> 01:21:17,760
so uh i started studying computer vision

01:21:15,199 --> 01:21:20,400
uh using python because the community is

01:21:17,760 --> 01:21:24,000
super strong

01:21:20,400 --> 01:21:28,239
but as

01:21:24,000 --> 01:21:32,320
as opencv is built in c plus plus

01:21:28,239 --> 01:21:33,760
uh the code the binds is super similar

01:21:32,320 --> 01:21:37,280
from c plus plus

01:21:33,760 --> 01:21:40,400
so when you got a python opencv and got

01:21:37,280 --> 01:21:44,080
a nodejs opencv it's super

01:21:40,400 --> 01:21:45,199
similar so i know today we don't have so

01:21:44,080 --> 01:21:48,159
much content

01:21:45,199 --> 01:21:49,760
about a computer vision with node.js

01:21:48,159 --> 01:21:53,040
with javascript

01:21:49,760 --> 01:21:57,679
and we don't have a big community

01:21:53,040 --> 01:22:00,800
using computer vision in jet stream

01:21:57,679 --> 01:22:02,639
and i started use i started with

01:22:00,800 --> 01:22:06,400
computer vision using python

01:22:02,639 --> 01:22:08,800
but if you want if you don't code

01:22:06,400 --> 01:22:10,480
in python and you want to know more

01:22:08,800 --> 01:22:14,080
about computer vision

01:22:10,480 --> 01:22:17,920
and you don't find some content

01:22:14,080 --> 01:22:22,480
and some nice content about this topic

01:22:17,920 --> 01:22:22,480
using javascript you can

01:22:22,639 --> 01:22:27,040
got a python code and translate it for

01:22:25,920 --> 01:22:29,440
javascript because

01:22:27,040 --> 01:22:30,719
it's the same methods it's the same

01:22:29,440 --> 01:22:34,719
terms

01:22:30,719 --> 01:22:35,920
uh this javascript and the opencv in

01:22:34,719 --> 01:22:39,679
javascript

01:22:35,920 --> 01:22:43,280
and opencv python working the same way

01:22:39,679 --> 01:22:46,560
uh it's more for me it's the most

01:22:43,280 --> 01:22:49,679
uh compatible framework between two

01:22:46,560 --> 01:22:49,679
different fights you know

01:22:49,760 --> 01:22:56,560
so uh

01:22:53,199 --> 01:22:57,920
is study computer vision in js but if

01:22:56,560 --> 01:23:00,960
you have some question

01:22:57,920 --> 01:23:03,520
you can just read a python code and use

01:23:00,960 --> 01:23:06,159
the same method and the same logic

01:23:03,520 --> 01:23:08,000
and the view it will work are the

01:23:06,159 --> 01:23:08,639
functions in between javascript and

01:23:08,000 --> 01:23:12,000
python

01:23:08,639 --> 01:23:15,760
the same they define

01:23:12,000 --> 01:23:15,760
error functions no but

01:23:16,480 --> 01:23:24,880
in when you are using a

01:23:21,679 --> 01:23:25,840
a framework you don't will use a area

01:23:24,880 --> 01:23:28,960
function you know

01:23:25,840 --> 01:23:32,560
because uh area functions is

01:23:28,960 --> 01:23:35,760
as we say as

01:23:32,560 --> 01:23:38,800
we see saw in the previous talk

01:23:35,760 --> 01:23:43,600
it's you use

01:23:38,800 --> 01:23:46,719
only way we only when you create it

01:23:43,600 --> 01:23:49,840
but when you are using a library

01:23:46,719 --> 01:23:51,199
you don't you call wires of either

01:23:49,840 --> 01:23:55,600
function

01:23:51,199 --> 01:23:59,280
as uh as a declaration you know

01:23:55,600 --> 01:24:02,320
it's it's just a method it's equal

01:23:59,280 --> 01:24:05,920
uh your work with a method

01:24:02,320 --> 01:24:08,080
a phone channel or something like this

01:24:05,920 --> 01:24:09,440
i think there's another question uh from

01:24:08,080 --> 01:24:12,880
the the youtube

01:24:09,440 --> 01:24:15,920
live stream um it's

01:24:12,880 --> 01:24:17,280
from someone called matt they say what's

01:24:15,920 --> 01:24:19,199
your workflow to

01:24:17,280 --> 01:24:20,719
figure out the algorithm for a

01:24:19,199 --> 01:24:24,480
particular problem

01:24:20,719 --> 01:24:27,679
do you for example play around with the

01:24:24,480 --> 01:24:30,320
image in photoshop to start with

01:24:27,679 --> 01:24:32,000
okay uh i also like to compare with

01:24:30,320 --> 01:24:35,040
photoshop because

01:24:32,000 --> 01:24:35,760
uh for me when i was starting with these

01:24:35,040 --> 01:24:38,800
problems

01:24:35,760 --> 01:24:41,840
is the thing that helped me

01:24:38,800 --> 01:24:45,120
how i can think to

01:24:41,840 --> 01:24:48,719
to choose the better implementation

01:24:45,120 --> 01:24:49,760
but the first thing is detect the

01:24:48,719 --> 01:24:53,280
pattern

01:24:49,760 --> 01:24:56,560
for example in my document

01:24:53,280 --> 01:24:59,360
my brazilian card id i have

01:24:56,560 --> 01:25:00,560
the first pattern then this is a

01:24:59,360 --> 01:25:03,360
rectangle

01:25:00,560 --> 01:25:03,840
the second and more important pattern

01:25:03,360 --> 01:25:07,040
that

01:25:03,840 --> 01:25:10,840
this is green so for example

01:25:07,040 --> 01:25:14,719
uh how i can detect

01:25:10,840 --> 01:25:15,280
farms so i will short about detect form

01:25:14,719 --> 01:25:19,280
because i

01:25:15,280 --> 01:25:22,800
need to detect a rectangle and so i

01:25:19,280 --> 01:25:26,000
find a contour okay awesome they

01:25:22,800 --> 01:25:29,679
get the contours is a method to

01:25:26,000 --> 01:25:33,840
find geometric forms awesome

01:25:29,679 --> 01:25:36,239
so i just try it but it's not enough

01:25:33,840 --> 01:25:36,880
to detect my rectangle in my image

01:25:36,239 --> 01:25:40,080
because

01:25:36,880 --> 01:25:42,719
as you can see here i will share my

01:25:40,080 --> 01:25:42,719
screen again

01:25:44,000 --> 01:25:50,600
and i will execute my script as you

01:25:47,199 --> 01:25:54,719
as you can see here i don't have exactly

01:25:50,600 --> 01:25:57,920
rectangle here because i have a hand

01:25:54,719 --> 01:26:01,920
in front my document and this

01:25:57,920 --> 01:26:02,639
will uh that will help me to detect this

01:26:01,920 --> 01:26:07,199
rectangle

01:26:02,639 --> 01:26:10,239
so how can i filter this headbanger

01:26:07,199 --> 01:26:13,679
first uh

01:26:10,239 --> 01:26:16,320
to just to detect this nintendo so

01:26:13,679 --> 01:26:16,719
i can work with the second pattern that

01:26:16,320 --> 01:26:19,520
is

01:26:16,719 --> 01:26:20,480
its screen so hey how can i filter

01:26:19,520 --> 01:26:23,520
colors

01:26:20,480 --> 01:26:24,000
so i just shirt how can i filter colors

01:26:23,520 --> 01:26:27,360
with

01:26:24,000 --> 01:26:30,639
opencv and after that

01:26:27,360 --> 01:26:34,000
i can combine these two patterns

01:26:30,639 --> 01:26:38,239
to do this project so first i think

01:26:34,000 --> 01:26:41,440
i detect my i filter my

01:26:38,239 --> 01:26:44,719
my color so i will get

01:26:41,440 --> 01:26:46,880
a noisy image so

01:26:44,719 --> 01:26:48,080
with this image i have a problem that is

01:26:46,880 --> 01:26:52,719
the noise so i should

01:26:48,080 --> 01:26:55,840
search how can i clean noise from mask

01:26:52,719 --> 01:26:59,600
and i just cleaned it

01:26:55,840 --> 01:27:02,639
and after that i can

01:26:59,600 --> 01:27:05,760
arrive in my rectangle

01:27:02,639 --> 01:27:08,880
you know so if this the first thing

01:27:05,760 --> 01:27:11,600
is detect the patterns the patterns

01:27:08,880 --> 01:27:14,159
is the key for you choose your

01:27:11,600 --> 01:27:14,159
techniques

01:27:15,760 --> 01:27:22,159
that's great thanks

01:27:19,440 --> 01:27:23,280
yeah welcome i don't think let me see i

01:27:22,159 --> 01:27:25,360
don't think we have any

01:27:23,280 --> 01:27:27,120
any other questions what is your maybe

01:27:25,360 --> 01:27:28,000
your next step after that what do what

01:27:27,120 --> 01:27:29,360
do you

01:27:28,000 --> 01:27:31,840
what do you think you're gonna do after

01:27:29,360 --> 01:27:34,800
that because you have uh really

01:27:31,840 --> 01:27:36,639
surprises with some really great dogs

01:27:34,800 --> 01:27:39,679
so what's what's the next one i think

01:27:36,639 --> 01:27:43,679
that you have in mind

01:27:39,679 --> 01:27:47,199
oh uh i don't know i'm thinking

01:27:43,679 --> 01:27:50,239
i'm in a in a hard time and i'm not

01:27:47,199 --> 01:27:51,199
building new new talks but i i guess i'm

01:27:50,239 --> 01:27:54,880
thinking

01:27:51,199 --> 01:27:57,920
it talk about islam islam for me

01:27:54,880 --> 01:28:01,520
it's a little bit complex to to resume

01:27:57,920 --> 01:28:05,199
it in a simple talk but

01:28:01,520 --> 01:28:08,239
for me it's a super interesting uh

01:28:05,199 --> 01:28:09,199
topic and i love it and i i believe that

01:28:08,239 --> 01:28:12,000
i will talk

01:28:09,199 --> 01:28:13,440
more about it in the future do you have

01:28:12,000 --> 01:28:15,120
any questions to ask to

01:28:13,440 --> 01:28:16,719
abby because i'll be asking you some

01:28:15,120 --> 01:28:17,679
questions you have any anything to ask

01:28:16,719 --> 01:28:22,320
about the asleep

01:28:17,679 --> 01:28:24,560
about no

01:28:22,320 --> 01:28:25,520
and and i would like to thank you both

01:28:24,560 --> 01:28:28,639
of you for

01:28:25,520 --> 01:28:31,920
joining us today and i

01:28:28,639 --> 01:28:35,600
you know as you know we are under really

01:28:31,920 --> 01:28:36,320
strange circumstances and our meetups

01:28:35,600 --> 01:28:38,159
and you

01:28:36,320 --> 01:28:40,400
both of you you entertain the people

01:28:38,159 --> 01:28:43,520
where they have to sit at home and

01:28:40,400 --> 01:28:47,520
and protect themselves and protect

01:28:43,520 --> 01:28:50,560
everyone else i hope you stay and

01:28:47,520 --> 01:28:52,239
healthy and and

01:28:50,560 --> 01:28:54,560
don't forget everyone you have to wear

01:28:52,239 --> 01:28:56,800
your mask and keep your distances

01:28:54,560 --> 01:28:59,040
i hope we we are able to come back and

01:28:56,800 --> 01:29:02,320
and a face-to-face event and

01:28:59,040 --> 01:29:03,600
i see him presenting in front of a live

01:29:02,320 --> 01:29:06,159
audience

01:29:03,600 --> 01:29:07,760
thank you very much and um and see you

01:29:06,159 --> 01:29:10,080
soon

01:29:07,760 --> 01:29:10,880
and thank you so much for for having us

01:29:10,080 --> 01:29:14,159
uh it's been

01:29:10,880 --> 01:29:25,840
really great thank you as the same

01:29:14,159 --> 01:29:25,840
thank you very much

01:29:27,750 --> 01:29:36,430
[Music]

01:29:36,840 --> 01:29:42,669
so

01:29:38,380 --> 01:29:42,669
[Music]

01:29:50,840 --> 01:29:53,840
so

01:29:59,430 --> 01:31:45,840
[Music]

01:31:42,840 --> 01:31:45,840
so

01:31:56,840 --> 01:32:33,339
so

01:31:59,420 --> 01:32:33,339
[Music]

01:32:38,840 --> 01:32:41,840
do

01:32:42,100 --> 01:33:31,880
[Music]

01:33:34,840 --> 01:33:37,840
so

01:33:48,840 --> 01:33:51,840
so

01:33:53,700 --> 01:34:16,759
[Music]

01:34:16,840 --> 01:35:12,770
do

01:34:19,110 --> 01:35:12,770
[Music]

01:35:12,840 --> 01:35:15,840
um

01:35:17,630 --> 01:35:39,850
[Music]

01:36:07,840 --> 01:36:09,920

YouTube URL: https://www.youtube.com/watch?v=aVTXc8foBPM


