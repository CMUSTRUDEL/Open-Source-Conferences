Title: Next.js: The React Framework - JS Monthly - July 2019
Publication date: 2019-08-06
Playlist: JS Monthly London
Description: 
	Next.js: The React Framework // Tim Neutkens - Zeit

63% of npm users are using React. Making it the most popular JavaScript framework ever. React is being used everywhere from your favorite websites and web applications to maybe your personal website. However building fast and scaleable React applications is complex. There are many pieces that have to come together, from compilation to optimization to developer experience. Furthermore there are many strategies in which websites and applications are being built today, for example statically prerendering, server-rendering and client-side only rendering. Let's explore how Next.js solves all of these problems for you.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,049
and I refer a company called Zayed you

00:00:03,060 --> 00:00:05,190
should look it up it's really

00:00:04,049 --> 00:00:07,649
interesting

00:00:05,190 --> 00:00:09,120
I already saw our tools like mentioned

00:00:07,649 --> 00:00:11,639
in all the other talks it's really funny

00:00:09,120 --> 00:00:13,259
but yeah I work on this thing called

00:00:11,639 --> 00:00:15,599
next year's and I'm going to tell you

00:00:13,259 --> 00:00:18,420
about it today

00:00:15,599 --> 00:00:20,270
so yeah let's start right in so

00:00:18,420 --> 00:00:23,160
generally when you start building

00:00:20,270 --> 00:00:25,949
websites which most of you probably do

00:00:23,160 --> 00:00:28,519
if you're not like an AI engineer using

00:00:25,949 --> 00:00:32,070
javascript or something I don't know

00:00:28,519 --> 00:00:34,739
you start we have some kind of component

00:00:32,070 --> 00:00:36,870
system right because you want your code

00:00:34,739 --> 00:00:38,850
to be really consistent across like all

00:00:36,870 --> 00:00:40,230
these pages that you're building you

00:00:38,850 --> 00:00:42,719
don't want five versions of the same

00:00:40,230 --> 00:00:45,180
button and like ten versions of the

00:00:42,719 --> 00:00:47,760
header some companies have 300 versions

00:00:45,180 --> 00:00:50,280
of their header I'm not kidding it's

00:00:47,760 --> 00:00:52,140
literary thing but yeah you want some

00:00:50,280 --> 00:00:55,680
component system to help you manage that

00:00:52,140 --> 00:00:59,370
right so there are some libraries in

00:00:55,680 --> 00:01:03,660
this space like UI libraries right so

00:00:59,370 --> 00:01:07,500
you have react and angular and few and

00:01:03,660 --> 00:01:11,250
all these are tools spelled but let's

00:01:07,500 --> 00:01:14,540
say for the sake of everyone knows

00:01:11,250 --> 00:01:18,210
reacts I suppose let's use react right

00:01:14,540 --> 00:01:19,619
so has everyone heard of react before I

00:01:18,210 --> 00:01:21,840
can we do show hands

00:01:19,619 --> 00:01:25,320
everyone's nothing but like probably

00:01:21,840 --> 00:01:28,320
everyone if you didn't it's fine I can

00:01:25,320 --> 00:01:29,400
do a really simple introduction to it my

00:01:28,320 --> 00:01:32,880
slide is actually one of the

00:01:29,400 --> 00:01:38,250
introductions which is a react is pretty

00:01:32,880 --> 00:01:40,020
simple ish most people are going to

00:01:38,250 --> 00:01:42,030
disagree with me but like it's pretty

00:01:40,020 --> 00:01:44,220
simple because the most basic react

00:01:42,030 --> 00:01:48,840
component is just a JavaScript function

00:01:44,220 --> 00:01:52,070
that returns HTML JS acts basically so

00:01:48,840 --> 00:01:57,450
you do h1 hello world and just works

00:01:52,070 --> 00:01:59,700
however going to production with react

00:01:57,450 --> 00:02:01,469
it's really complex actually so

00:01:59,700 --> 00:02:03,180
oftentimes when you start building your

00:02:01,469 --> 00:02:05,310
project and you'd like all right

00:02:03,180 --> 00:02:07,770
oh let's use react it feels like this

00:02:05,310 --> 00:02:10,770
like you're almost ready to implement

00:02:07,770 --> 00:02:11,910
your hello will react out right cuz yep

00:02:10,770 --> 00:02:13,520
there you have to set up all these

00:02:11,910 --> 00:02:16,790
things like web pack

00:02:13,520 --> 00:02:17,510
available and like I know you have to

00:02:16,790 --> 00:02:20,120
make sure that you're optimizing

00:02:17,510 --> 00:02:24,170
production and like there's so much

00:02:20,120 --> 00:02:26,000
stuff to get into basically and in

00:02:24,170 --> 00:02:27,740
reality it's gotten a lot easier through

00:02:26,000 --> 00:02:30,350
tooling and like all these other things

00:02:27,740 --> 00:02:33,440
that react team has been doing and you

00:02:30,350 --> 00:02:35,870
have dev tools and like really good

00:02:33,440 --> 00:02:39,770
visibility like what's going on you have

00:02:35,870 --> 00:02:43,550
free xyx now Jaron laughs but going to a

00:02:39,770 --> 00:02:45,170
production is still really complex so

00:02:43,550 --> 00:02:47,420
generally you need some kind of

00:02:45,170 --> 00:02:50,960
framework for react that can skill with

00:02:47,420 --> 00:02:52,790
your projects because react is in really

00:02:50,960 --> 00:02:55,430
interesting position where it's only a

00:02:52,790 --> 00:02:56,990
UI library and it handles one thing

00:02:55,430 --> 00:03:02,330
really well which is rendering two pages

00:02:56,990 --> 00:03:04,910
and the only problem there is that it's

00:03:02,330 --> 00:03:08,240
really hard to build production grade

00:03:04,910 --> 00:03:10,010
apps using just react because you can

00:03:08,240 --> 00:03:12,020
only render UI using reacting you have

00:03:10,010 --> 00:03:14,840
to invent all these other things to make

00:03:12,020 --> 00:03:17,030
it work so generally when you start

00:03:14,840 --> 00:03:19,610
building a website you start off with

00:03:17,030 --> 00:03:22,100
some static pages maybe a prototype or

00:03:19,610 --> 00:03:24,020
something like that like so you're

00:03:22,100 --> 00:03:26,209
building a marketing page and it has to

00:03:24,020 --> 00:03:30,110
be like fast and reliable because static

00:03:26,209 --> 00:03:31,790
and content pages the complete changes

00:03:30,110 --> 00:03:35,450
require some kind of rebuild because

00:03:31,790 --> 00:03:38,020
it's all static pages right and as your

00:03:35,450 --> 00:03:41,750
project grows pages got added to that

00:03:38,020 --> 00:03:45,650
solution and all these pages may have

00:03:41,750 --> 00:03:48,260
different requirements so say you go

00:03:45,650 --> 00:03:50,000
from like you're building your marketing

00:03:48,260 --> 00:03:52,130
side and then like some manager comes in

00:03:50,000 --> 00:03:54,410
and he's like hey I went to you like do

00:03:52,130 --> 00:03:58,760
this dynamic stuff and it just has to

00:03:54,410 --> 00:04:00,140
work right so then you're like now we

00:03:58,760 --> 00:04:02,180
have a problem because we started this

00:04:00,140 --> 00:04:04,760
like static website and it just doesn't

00:04:02,180 --> 00:04:06,500
work so after you take this other

00:04:04,760 --> 00:04:10,010
framework or like this sort of thing to

00:04:06,500 --> 00:04:12,800
make it work basically so really that

00:04:10,010 --> 00:04:15,549
brings up the question how do I make my

00:04:12,800 --> 00:04:18,109
app scale of changes right and

00:04:15,549 --> 00:04:20,150
furthermore there's another problem

00:04:18,109 --> 00:04:25,100
which is how do I make my app scale of

00:04:20,150 --> 00:04:27,590
size so this is a small graphic that the

00:04:25,100 --> 00:04:30,770
chrome team ate on what happ

00:04:27,590 --> 00:04:33,139
when you have just one single JavaScript

00:04:30,770 --> 00:04:34,550
bundle it serves everything and just

00:04:33,139 --> 00:04:37,040
sort of like the default if you use

00:04:34,550 --> 00:04:38,510
react because you just like start with

00:04:37,040 --> 00:04:41,570
an entry point which is like your app

00:04:38,510 --> 00:04:43,070
file and in your app file has imports

00:04:41,570 --> 00:04:48,050
for components and all these different

00:04:43,070 --> 00:04:49,880
components render your UI but in most

00:04:48,050 --> 00:04:51,110
cases you're not rendering all your UI

00:04:49,880 --> 00:04:52,610
in one view right

00:04:51,110 --> 00:04:53,930
you're not rendering the settings page

00:04:52,610 --> 00:04:59,330
if you're going to the home page and

00:04:53,930 --> 00:05:02,090
that kind of thing so as you can see FCP

00:04:59,330 --> 00:05:04,190
and TTI are first

00:05:02,090 --> 00:05:08,030
FCPS first contentful paint which

00:05:04,190 --> 00:05:09,950
basically means the first time that you

00:05:08,030 --> 00:05:13,880
can actually see content on your page

00:05:09,950 --> 00:05:16,040
and then try a TTY is like when the

00:05:13,880 --> 00:05:17,930
whole page gets interactive so that

00:05:16,040 --> 00:05:21,229
means that you can click on links that

00:05:17,930 --> 00:05:23,060
do you like certain stuff you're like

00:05:21,229 --> 00:05:26,780
validation on fields works and that kind

00:05:23,060 --> 00:05:30,530
of thing and generally just have like

00:05:26,780 --> 00:05:32,960
one big JavaScript burn on one big ceeze

00:05:30,530 --> 00:05:35,270
Aspinwall right necrose uncontrollably

00:05:32,960 --> 00:05:37,400
like you're always adding new code to

00:05:35,270 --> 00:05:39,440
your projects you're generally either

00:05:37,400 --> 00:05:40,880
deleting stuff because you replaced it

00:05:39,440 --> 00:05:44,810
with some new code but it's like never

00:05:40,880 --> 00:05:48,310
going down basically so yeah this is

00:05:44,810 --> 00:05:51,740
where next comes in and next is a

00:05:48,310 --> 00:05:54,770
framework for react that helps you scale

00:05:51,740 --> 00:05:56,300
with these changes and it allows you to

00:05:54,770 --> 00:06:00,050
focus on what's important which is like

00:05:56,300 --> 00:06:06,139
all your logic that you have they sleep

00:06:00,050 --> 00:06:07,940
making money so you start by to start

00:06:06,139 --> 00:06:10,280
using next you start by creating a pages

00:06:07,940 --> 00:06:11,870
directory this is nothing special it's

00:06:10,280 --> 00:06:15,039
just a directory so we create this

00:06:11,870 --> 00:06:18,110
directory called pages and in every

00:06:15,039 --> 00:06:21,710
every file in the pages directory this

00:06:18,110 --> 00:06:26,210
maps to a route so say you have pages

00:06:21,710 --> 00:06:30,340
about it yes it will map to slash about

00:06:26,210 --> 00:06:34,280
right but what if you want to do like a

00:06:30,340 --> 00:06:35,690
slash product / ID like some custom or

00:06:34,280 --> 00:06:39,500
not really custom but like dynamic

00:06:35,690 --> 00:06:40,670
riding next allows this since version 9

00:06:39,500 --> 00:06:43,310
to

00:06:40,670 --> 00:06:46,340
this week create sub directories and I'm

00:06:43,310 --> 00:06:48,680
put in this special file which is marked

00:06:46,340 --> 00:06:52,870
by brackets that will automatically

00:06:48,680 --> 00:06:55,880
inject the ID into your file basically

00:06:52,870 --> 00:06:58,580
but let's back up a bit what is a page

00:06:55,880 --> 00:07:00,500
because I haven't showed you a page and

00:06:58,580 --> 00:07:02,840
it's actually just a react component so

00:07:00,500 --> 00:07:05,420
like I was showing earlier you have

00:07:02,840 --> 00:07:09,770
react components in reacts and it

00:07:05,420 --> 00:07:12,650
returns some HTML and a page in X is

00:07:09,770 --> 00:07:16,070
just a react component so if you create

00:07:12,650 --> 00:07:17,900
the about OGS file you go to slash about

00:07:16,070 --> 00:07:24,380
and return this reacts component it will

00:07:17,900 --> 00:07:26,510
just show hello world in h1 so there's

00:07:24,380 --> 00:07:28,190
just one problem here which is that how

00:07:26,510 --> 00:07:32,240
can you choose how pages are rendered

00:07:28,190 --> 00:07:33,980
because generally frameworks have or

00:07:32,240 --> 00:07:36,440
like generally applications have

00:07:33,980 --> 00:07:39,440
different requirements so you might want

00:07:36,440 --> 00:07:42,320
to do a server-side rendered only months

00:07:39,440 --> 00:07:45,110
or surrendered application that has

00:07:42,320 --> 00:07:46,670
dynamic data that's like that you get on

00:07:45,110 --> 00:07:49,100
the client side or on the surface side I

00:07:46,670 --> 00:07:51,640
mean and then like some other page is

00:07:49,100 --> 00:07:54,830
just like a dashboard you might want to

00:07:51,640 --> 00:07:55,340
only a fully server a client-side

00:07:54,830 --> 00:07:59,240
renderer

00:07:55,340 --> 00:08:02,090
I mean so every page can have different

00:07:59,240 --> 00:08:04,640
requirements right but as you can see

00:08:02,090 --> 00:08:08,690
the chrome team created this really

00:08:04,640 --> 00:08:10,280
beautiful infographic which is quite

00:08:08,690 --> 00:08:12,380
complex but let's go through it really

00:08:10,280 --> 00:08:15,500
quick you have source at rendering

00:08:12,380 --> 00:08:16,490
static surface at rendering surf

00:08:15,500 --> 00:08:19,220
surrendering with rehydration

00:08:16,490 --> 00:08:21,980
rehydration and client-side rendering

00:08:19,220 --> 00:08:25,160
with pre-rendering and in full

00:08:21,980 --> 00:08:27,950
client-side rendering write all sounds

00:08:25,160 --> 00:08:30,440
very simple to all if you write probably

00:08:27,950 --> 00:08:32,150
not that much like you have to actually

00:08:30,440 --> 00:08:34,430
look into it like what it is and like

00:08:32,150 --> 00:08:38,270
what it does but there's a nice overview

00:08:34,430 --> 00:08:41,060
to every single item and there if you

00:08:38,270 --> 00:08:45,230
look to the like the very last row which

00:08:41,060 --> 00:08:47,120
is kind of it's very small from probably

00:08:45,230 --> 00:08:51,770
people in the back that I'll go to it

00:08:47,120 --> 00:08:54,090
it's basically what every single

00:08:51,770 --> 00:08:56,490
[Music]

00:08:54,090 --> 00:08:59,100
example of rendering targets has a

00:08:56,490 --> 00:09:01,470
different framework so it affects the

00:08:59,100 --> 00:09:02,970
question do I really need to use like a

00:09:01,470 --> 00:09:04,880
different framework for every single

00:09:02,970 --> 00:09:07,500
rendering target that I want to use a

00:09:04,880 --> 00:09:09,810
like or am I going to write my app in

00:09:07,500 --> 00:09:12,570
like five different frameworks and

00:09:09,810 --> 00:09:15,030
maintain those so it feels like this

00:09:12,570 --> 00:09:19,830
right we're back to de I'm really

00:09:15,030 --> 00:09:22,430
confused state basically and this is

00:09:19,830 --> 00:09:25,520
where next basically helps you which is

00:09:22,430 --> 00:09:28,500
we allow you to do multiple different

00:09:25,520 --> 00:09:29,870
per page you can choose which rendering

00:09:28,500 --> 00:09:32,490
target you want to use

00:09:29,870 --> 00:09:35,130
so let's first go into pre rendering

00:09:32,490 --> 00:09:38,250
which is you generate static HTML at

00:09:35,130 --> 00:09:40,890
built time so this means we just created

00:09:38,250 --> 00:09:42,600
a static page which is just it doesn't

00:09:40,890 --> 00:09:45,120
have any blocking data requirements so

00:09:42,600 --> 00:09:46,950
there's no fetches to get data in that

00:09:45,120 --> 00:09:49,260
kind of thing this is great for like

00:09:46,950 --> 00:09:52,040
marketing pages your blog it has great

00:09:49,260 --> 00:09:55,440
SEO because everything is static HTML

00:09:52,040 --> 00:09:57,660
rendered on a server and the only

00:09:55,440 --> 00:10:00,090
downside are is that content changes

00:09:57,660 --> 00:10:01,800
require rebuild however this doesn't

00:10:00,090 --> 00:10:03,810
matter because this is all in your code

00:10:01,800 --> 00:10:06,560
right you have to HTML inside of your

00:10:03,810 --> 00:10:08,610
code already no J's acts basically

00:10:06,560 --> 00:10:11,670
generates server-side rendering which

00:10:08,610 --> 00:10:15,030
means that you render when a user does a

00:10:11,670 --> 00:10:17,340
request so every single request that

00:10:15,030 --> 00:10:20,160
comes in to your server it will do some

00:10:17,340 --> 00:10:21,420
data fetching logic like in this case we

00:10:20,160 --> 00:10:24,140
have the special method called get

00:10:21,420 --> 00:10:27,240
initial props to get all your data and

00:10:24,140 --> 00:10:28,530
if it's there we basically assume that

00:10:27,240 --> 00:10:31,830
the page is going to be serviced that

00:10:28,530 --> 00:10:35,340
rendered so this returns a post from

00:10:31,830 --> 00:10:37,820
headless CMS which is beautiful library

00:10:35,340 --> 00:10:40,830
that does nothing but return one post

00:10:37,820 --> 00:10:44,280
you can use it on NPM it will just

00:10:40,830 --> 00:10:47,850
return ID one and the tip but it's a

00:10:44,280 --> 00:10:49,770
story for another time and this will

00:10:47,850 --> 00:10:51,210
serve the owner so enough requests and

00:10:49,770 --> 00:10:52,350
this is just a different page right we

00:10:51,210 --> 00:10:54,300
have the about two chairs and we have

00:10:52,350 --> 00:10:55,460
the product ID with a dynamic idea

00:10:54,300 --> 00:10:57,300
basically

00:10:55,460 --> 00:10:59,010
and then there's client-side rendering

00:10:57,300 --> 00:11:00,390
so if you only want to render in the

00:10:59,010 --> 00:11:03,120
browser you can actually also do that

00:11:00,390 --> 00:11:05,160
using next unlike inside of pages all

00:11:03,120 --> 00:11:05,730
you have to do is create a react to

00:11:05,160 --> 00:11:09,629
actually

00:11:05,730 --> 00:11:12,149
that triggers when something is mounted

00:11:09,629 --> 00:11:14,730
basically so use like use effect and

00:11:12,149 --> 00:11:17,429
then do a set state when the use of act

00:11:14,730 --> 00:11:19,410
is called and this works really good for

00:11:17,429 --> 00:11:21,569
like dashboards and internal

00:11:19,410 --> 00:11:23,869
applications and like your classic

00:11:21,569 --> 00:11:26,309
single page application basically

00:11:23,869 --> 00:11:28,609
however there's something more like what

00:11:26,309 --> 00:11:31,980
if you want to go beyond react rendering

00:11:28,609 --> 00:11:33,839
so next allows one additional rendering

00:11:31,980 --> 00:11:36,749
strategy or actually two that are

00:11:33,839 --> 00:11:38,579
similar to each other I just am so I

00:11:36,749 --> 00:11:41,790
don't know if anyone if you heard of amp

00:11:38,579 --> 00:11:44,489
can we do a show hands it's a lot

00:11:41,790 --> 00:11:46,019
actually sometimes like I give this talk

00:11:44,489 --> 00:11:47,669
to people and they're like oh I don't

00:11:46,019 --> 00:11:51,889
know what amp is this is standard

00:11:47,669 --> 00:11:54,540
created by Google but it's now basically

00:11:51,889 --> 00:11:57,329
maintained by a group of companies that

00:11:54,540 --> 00:12:01,319
basically allows you to build very fast

00:11:57,329 --> 00:12:04,169
web pages so the way this works is you

00:12:01,319 --> 00:12:07,160
have you write your code in a specific

00:12:04,169 --> 00:12:10,889
way like the HTML its HTML standard and

00:12:07,160 --> 00:12:12,329
that allows crawlers like Google and

00:12:10,889 --> 00:12:14,459
Bing and like all these other companies

00:12:12,329 --> 00:12:16,799
to index your pages and share them

00:12:14,459 --> 00:12:18,720
inside of the search engine so this

00:12:16,799 --> 00:12:20,279
means that in Google you'll actually see

00:12:18,720 --> 00:12:23,129
if you search for an actual yes because

00:12:20,279 --> 00:12:26,850
we have amp in nestled org that it

00:12:23,129 --> 00:12:29,489
shares this lightning icon on the next

00:12:26,850 --> 00:12:31,079
to the URL basically and this lightning

00:12:29,489 --> 00:12:32,609
I can means that if you click on it it's

00:12:31,079 --> 00:12:34,919
going to be instantaneously loaded

00:12:32,609 --> 00:12:36,329
inside of Google without going actually

00:12:34,919 --> 00:12:38,039
to the web side with as renders inside

00:12:36,329 --> 00:12:41,549
of Google using extra caching and like

00:12:38,039 --> 00:12:44,850
it's just really fast and there's two

00:12:41,549 --> 00:12:47,699
ways to use app servers and hybrid which

00:12:44,850 --> 00:12:50,609
means that you have next yes react page

00:12:47,699 --> 00:12:53,730
on one side and then you have an amp

00:12:50,609 --> 00:12:56,009
page for like when crawlers index it

00:12:53,730 --> 00:12:57,899
basically so when Google comes by it

00:12:56,009 --> 00:12:59,579
will actually like index the amp page to

00:12:57,899 --> 00:13:01,949
you but your users are never going to it

00:12:59,579 --> 00:13:03,449
directly and this works really well if

00:13:01,949 --> 00:13:07,049
you like want to incrementally adopt em

00:13:03,449 --> 00:13:10,049
for example a nurse amp first which

00:13:07,049 --> 00:13:13,169
means that all the the whole page will

00:13:10,049 --> 00:13:15,910
be rendered in amp also for desktop

00:13:13,169 --> 00:13:19,510
users and a kind of thing and

00:13:15,910 --> 00:13:22,630
in doing so you basically get a really

00:13:19,510 --> 00:13:25,300
fast webpage that is almost instantly

00:13:22,630 --> 00:13:29,050
loaded and we optimize like a lot of

00:13:25,300 --> 00:13:31,930
different things on this and to go back

00:13:29,050 --> 00:13:34,270
on the whole strategy is a bit so all

00:13:31,930 --> 00:13:36,910
these strategies can be combined so the

00:13:34,270 --> 00:13:41,020
Abbado GS could be a pre-rendered to

00:13:36,910 --> 00:13:42,490
HTML plus hybrid amp then the dashboard

00:13:41,020 --> 00:13:44,890
can be completely client-side rendered

00:13:42,490 --> 00:13:46,900
and your product ID can be server-side

00:13:44,890 --> 00:13:48,970
rendered and it can all be in the same

00:13:46,900 --> 00:13:50,950
app so you're building this one app that

00:13:48,970 --> 00:13:54,030
has all these different rendering

00:13:50,950 --> 00:13:56,770
methods so you basically don't need

00:13:54,030 --> 00:13:59,010
multiple frameworks to do these

00:13:56,770 --> 00:14:02,310
different methods basically of rendering

00:13:59,010 --> 00:14:04,900
so it's unified in a single framework

00:14:02,310 --> 00:14:07,660
and it works for like web sites and web

00:14:04,900 --> 00:14:09,190
applications basically and it built

00:14:07,660 --> 00:14:13,690
allows you to build truly hybrid

00:14:09,190 --> 00:14:16,810
applications however generally you're

00:14:13,690 --> 00:14:18,970
not just building a front-end right for

00:14:16,810 --> 00:14:21,880
example your website might need a

00:14:18,970 --> 00:14:24,490
contact form or like some extra logic

00:14:21,880 --> 00:14:27,520
that you want to like execute I get some

00:14:24,490 --> 00:14:29,290
data back that kind of thing so you need

00:14:27,520 --> 00:14:31,330
some kind of back-end to handle your

00:14:29,290 --> 00:14:33,790
data and that comes back from the forums

00:14:31,330 --> 00:14:35,800
so I don't know if you ever build a

00:14:33,790 --> 00:14:38,980
back-end service using notes yes for

00:14:35,800 --> 00:14:40,660
example there's like this this almost

00:14:38,980 --> 00:14:43,450
standard thing that everyone always does

00:14:40,660 --> 00:14:46,210
which is you create a separate project

00:14:43,450 --> 00:14:48,160
or a directory inside of your projects

00:14:46,210 --> 00:14:49,810
you install your favorite web server

00:14:48,160 --> 00:14:52,560
which could be like Express or something

00:14:49,810 --> 00:14:54,520
like that you create the endpoint and

00:14:52,560 --> 00:14:56,830
you've written the server on a different

00:14:54,520 --> 00:14:58,090
port then your front end basically as

00:14:56,830 --> 00:15:00,850
you have to service running at this

00:14:58,090 --> 00:15:02,890
point and every time you make a change

00:15:00,850 --> 00:15:04,510
you have to restart your server this is

00:15:02,890 --> 00:15:07,630
really important because if you don't

00:15:04,510 --> 00:15:09,790
you still have the server running on the

00:15:07,630 --> 00:15:12,580
old code you can request the endpoint

00:15:09,790 --> 00:15:16,270
but it will return the old côtes data

00:15:12,580 --> 00:15:19,660
obviously so if you I've done this many

00:15:16,270 --> 00:15:21,310
times obviously where you make changes

00:15:19,660 --> 00:15:23,380
and you're requesting the API endpoint

00:15:21,310 --> 00:15:25,450
and you're like it doesn't work I made

00:15:23,380 --> 00:15:27,070
all this change this doesn't work so you

00:15:25,450 --> 00:15:29,130
have to restart your server then like 10

00:15:27,070 --> 00:15:30,480
minutes later you're like oh wait

00:15:29,130 --> 00:15:32,580
got to restart my server and then you

00:15:30,480 --> 00:15:34,080
restart the server basically I need some

00:15:32,580 --> 00:15:34,910
extra library to handle it for you

00:15:34,080 --> 00:15:37,200
basically

00:15:34,910 --> 00:15:39,950
so you're basically needed need an API

00:15:37,200 --> 00:15:42,360
server that can scale with your projects

00:15:39,950 --> 00:15:45,810
because running multiple projects is not

00:15:42,360 --> 00:15:48,390
going to scale like two like two above

00:15:45,810 --> 00:15:49,440
more than a few endpoints so that means

00:15:48,390 --> 00:15:52,080
that if you have like a hundred

00:15:49,440 --> 00:15:53,520
endpoints how are you going to do you're

00:15:52,080 --> 00:15:55,110
going to like boot up one hundred

00:15:53,520 --> 00:15:56,640
different ports and then like figure out

00:15:55,110 --> 00:16:01,140
like how it's all going to tie together

00:15:56,640 --> 00:16:03,000
right so starting with next just nine

00:16:01,140 --> 00:16:06,240
you can actually create endpoints in

00:16:03,000 --> 00:16:07,980
next so that means you don't need a

00:16:06,240 --> 00:16:10,230
custom server or something like that you

00:16:07,980 --> 00:16:13,260
don't need to install Express to the

00:16:10,230 --> 00:16:16,050
handle most of your logic by just

00:16:13,260 --> 00:16:18,510
creating a pages directory with an API

00:16:16,050 --> 00:16:22,470
directory inside of it so you create

00:16:18,510 --> 00:16:25,080
pages API contact let's yes and inside

00:16:22,470 --> 00:16:28,020
of that context yes you can use the same

00:16:25,080 --> 00:16:29,850
programmatic usage as Express so you get

00:16:28,020 --> 00:16:32,370
requests and respond so you can do you

00:16:29,850 --> 00:16:34,260
can do like resto j-jason which is

00:16:32,370 --> 00:16:37,100
returns some JSON data but you can also

00:16:34,260 --> 00:16:39,060
send files back and that kind of thing

00:16:37,100 --> 00:16:41,010
and some of the middle rafts from

00:16:39,060 --> 00:16:42,300
Express are also included by default so

00:16:41,010 --> 00:16:44,610
you don't have to configure down

00:16:42,300 --> 00:16:47,160
basically so you have request a query

00:16:44,610 --> 00:16:49,020
recursive body requests like cookies

00:16:47,160 --> 00:16:50,520
which is not to default but we included

00:16:49,020 --> 00:16:55,590
by default because everyone has it in

00:16:50,520 --> 00:17:01,740
their server and then you end it we've

00:16:55,590 --> 00:17:03,150
locked the body basically so the fun

00:17:01,740 --> 00:17:04,860
thing of this is that you actually get

00:17:03,150 --> 00:17:08,100
all the benefits that next already gives

00:17:04,860 --> 00:17:10,980
you for API rights so it's probably

00:17:08,100 --> 00:17:16,020
already playing but I'm not sure exactly

00:17:10,980 --> 00:17:18,449
but let's go through it let's see so if

00:17:16,020 --> 00:17:20,280
you make changes to your API endpoint

00:17:18,449 --> 00:17:22,709
it's automatically updated so let's go

00:17:20,280 --> 00:17:26,760
through this I hope the place now okay

00:17:22,709 --> 00:17:28,800
do I guys so obviously open the file and

00:17:26,760 --> 00:17:30,900
says you have just a very simple

00:17:28,800 --> 00:17:34,710
endpoint you boot up the next year's

00:17:30,900 --> 00:17:36,210
server which handles your basically

00:17:34,710 --> 00:17:38,250
everything for you in terms of like

00:17:36,210 --> 00:17:40,530
compilation that kind of thing and now

00:17:38,250 --> 00:17:42,600
you do like you curl the API slash hello

00:17:40,530 --> 00:17:47,669
they change it to

00:17:42,600 --> 00:17:52,500
hello rules basically and then you save

00:17:47,669 --> 00:17:55,200
it and then you curl again I hope yeah

00:17:52,500 --> 00:17:56,760
it does that and then you have hello

00:17:55,200 --> 00:17:58,500
world without restarting anything

00:17:56,760 --> 00:18:00,929
without getting out of context of what

00:17:58,500 --> 00:18:06,720
you're doing in a kind of thing and it's

00:18:00,929 --> 00:18:08,940
all just works by default so then there

00:18:06,720 --> 00:18:11,970
is the question of you're building a

00:18:08,940 --> 00:18:14,039
front-end and an API endpoint or

00:18:11,970 --> 00:18:15,539
multiple API endpoints and they are

00:18:14,039 --> 00:18:17,370
handling data right

00:18:15,539 --> 00:18:19,710
they're rendering data or they're

00:18:17,370 --> 00:18:21,450
handling data in a certain way and you

00:18:19,710 --> 00:18:23,520
can't afford them to break because like

00:18:21,450 --> 00:18:24,929
will be bad for your business and you

00:18:23,520 --> 00:18:29,130
lose money and that kind of thing we

00:18:24,929 --> 00:18:30,870
don't want that of course so how do you

00:18:29,130 --> 00:18:34,049
avoid bucks basically that's the

00:18:30,870 --> 00:18:35,850
question right and generally how people

00:18:34,049 --> 00:18:39,510
do this is using static type checking

00:18:35,850 --> 00:18:41,700
like typescript so hear us use

00:18:39,510 --> 00:18:45,390
typescript before users flow or anything

00:18:41,700 --> 00:18:47,280
else into our day-to-day job cool it's

00:18:45,390 --> 00:18:49,770
quite a lot of people it's starting to

00:18:47,280 --> 00:18:52,799
catch on it's really interesting to see

00:18:49,770 --> 00:18:54,390
that everyone is now like in this space

00:18:52,799 --> 00:18:56,760
where they want to incrementally adopt

00:18:54,390 --> 00:19:00,390
either typescript or flow or like some

00:18:56,760 --> 00:19:02,580
other static typing tool so starting

00:19:00,390 --> 00:19:04,679
with next nine you actually get

00:19:02,580 --> 00:19:09,600
automatic type script by default so you

00:19:04,679 --> 00:19:12,059
create pages slash some fishy parties X

00:19:09,600 --> 00:19:16,260
which is a typescript we have J's X file

00:19:12,059 --> 00:19:18,960
and that can have typings and that kind

00:19:16,260 --> 00:19:20,730
of thing and it makes it work

00:19:18,960 --> 00:19:23,610
automatically so that means that you

00:19:20,730 --> 00:19:26,159
don't have to set up ts config everyone

00:19:23,610 --> 00:19:27,960
that has set up typescript before has

00:19:26,159 --> 00:19:30,450
set up this these config and had to like

00:19:27,960 --> 00:19:32,010
figure out all these options and then

00:19:30,450 --> 00:19:33,510
they didn't know like exactly what the

00:19:32,010 --> 00:19:36,240
correct options were and then it like

00:19:33,510 --> 00:19:38,580
sort of works but still not really in

00:19:36,240 --> 00:19:41,789
the correct way so we set up this

00:19:38,580 --> 00:19:44,070
conflict for you and like we help you

00:19:41,789 --> 00:19:47,039
like optimize it basically you can still

00:19:44,070 --> 00:19:48,630
make some changes there and then on top

00:19:47,039 --> 00:19:50,640
of that next we'll fill the bill if

00:19:48,630 --> 00:19:52,919
there are typescript errors that are in

00:19:50,640 --> 00:19:54,670
your app basically you like it can't

00:19:52,919 --> 00:19:56,650
compile at a point

00:19:54,670 --> 00:19:58,180
and furthermore the next chest core is

00:19:56,650 --> 00:20:00,220
written inside script now so that means

00:19:58,180 --> 00:20:03,430
that every single fatty import has

00:20:00,220 --> 00:20:05,230
typing's so if you use a component it

00:20:03,430 --> 00:20:06,790
will show you which props you are using

00:20:05,230 --> 00:20:09,490
if you're using like fierce code or like

00:20:06,790 --> 00:20:12,910
some extra some editor that supports

00:20:09,490 --> 00:20:17,860
side script and on top of that you got

00:20:12,910 --> 00:20:19,690
just really good like type checking on

00:20:17,860 --> 00:20:22,840
those components too so if you basically

00:20:19,690 --> 00:20:24,910
add in an extra property that doesn't

00:20:22,840 --> 00:20:26,920
exist basically in excess it will also

00:20:24,910 --> 00:20:30,700
yell at you and say like hey you added

00:20:26,920 --> 00:20:33,130
in this property that's not there so

00:20:30,700 --> 00:20:35,530
yeah let me build your project and let's

00:20:33,130 --> 00:20:37,900
fast for it into the future

00:20:35,530 --> 00:20:39,510
your application has grown to hundreds

00:20:37,900 --> 00:20:42,190
of pages you're like a very successful

00:20:39,510 --> 00:20:46,450
company or you have a like a very big

00:20:42,190 --> 00:20:48,220
startup now right and there's one

00:20:46,450 --> 00:20:51,190
problem there every page that you add in

00:20:48,220 --> 00:20:52,570
like a standard tool is adding on to

00:20:51,190 --> 00:20:55,120
your build time right everything gets

00:20:52,570 --> 00:20:56,560
slower basically because compilation

00:20:55,120 --> 00:20:59,620
needs to like compile all these pages

00:20:56,560 --> 00:21:01,180
for you so how do you solve this and

00:20:59,620 --> 00:21:04,780
there's like some prior art here which

00:21:01,180 --> 00:21:08,230
is yarn basically it's already playing

00:21:04,780 --> 00:21:10,450
but it's very facile just replay it it's

00:21:08,230 --> 00:21:11,590
basically if you run yarn I don't know

00:21:10,450 --> 00:21:14,710
if you've ever used yarn but it's like

00:21:11,590 --> 00:21:16,930
this alternative NPM package manager and

00:21:14,710 --> 00:21:19,570
if you're in yarn in a directory where

00:21:16,930 --> 00:21:23,170
it already has been executed before it

00:21:19,570 --> 00:21:25,810
will finish in like zero 34 35 seconds

00:21:23,170 --> 00:21:28,300
which is incredibly fast right it's like

00:21:25,810 --> 00:21:30,280
installing appends is really slow so

00:21:28,300 --> 00:21:31,840
what yarn does is it diffs all the

00:21:30,280 --> 00:21:34,030
changes that have been made to your

00:21:31,840 --> 00:21:38,770
projects since the last time it has been

00:21:34,030 --> 00:21:41,260
run basically and we've like we started

00:21:38,770 --> 00:21:42,820
out on this journey to basically make

00:21:41,260 --> 00:21:45,310
something similar for next like if

00:21:42,820 --> 00:21:47,230
you're in multiple next builds to avoid

00:21:45,310 --> 00:21:50,440
rebuilding pages when there are no

00:21:47,230 --> 00:21:52,350
changes basically and the next just

00:21:50,440 --> 00:21:56,010
built pipeline will like understand

00:21:52,350 --> 00:21:58,480
which pages have changed and then only

00:21:56,010 --> 00:22:00,370
recompile change changes that are

00:21:58,480 --> 00:22:04,300
actually there that are actually made

00:22:00,370 --> 00:22:07,720
there so say you have a header component

00:22:04,300 --> 00:22:10,000
that isn't like every single of your

00:22:07,720 --> 00:22:12,190
or like in half of your application say

00:22:10,000 --> 00:22:13,900
like it's half of the application then

00:22:12,190 --> 00:22:15,970
it will only recompile it that half of

00:22:13,900 --> 00:22:17,770
your application of the rest of it so it

00:22:15,970 --> 00:22:19,720
will like cut your bill times in half

00:22:17,770 --> 00:22:21,070
but in most cases you're not changing

00:22:19,720 --> 00:22:23,650
the header all the time right you're

00:22:21,070 --> 00:22:25,330
changing certain pages and that will

00:22:23,650 --> 00:22:30,160
just bring down your bill times to like

00:22:25,330 --> 00:22:32,170
10 to 20 seconds in most cases and it

00:22:30,160 --> 00:22:34,960
reduces your bill times from our see

00:22:32,170 --> 00:22:36,400
milliseconds basically right this is

00:22:34,960 --> 00:22:37,780
still in the works and it's not out yet

00:22:36,400 --> 00:22:41,230
but it's something that we're actively

00:22:37,780 --> 00:22:44,080
working on so yeah and it's just

00:22:41,230 --> 00:22:47,230
basically skills for few projects so you

00:22:44,080 --> 00:22:49,630
go from my personal website which

00:22:47,230 --> 00:22:51,390
doesn't have that much stuff on it if

00:22:49,630 --> 00:22:55,290
you go to edit the literary has two

00:22:51,390 --> 00:22:59,280
paragraphs of text and a very nice logo

00:22:55,290 --> 00:23:02,410
to Hulu which is a very very big

00:22:59,280 --> 00:23:05,520
streaming company in the US hopefully

00:23:02,410 --> 00:23:10,720
soon in the UK and everywhere else too

00:23:05,520 --> 00:23:12,870
and it's just a really big app so and

00:23:10,720 --> 00:23:15,520
there's not even Hulu but there's

00:23:12,870 --> 00:23:19,650
thousands of really big companies using

00:23:15,520 --> 00:23:22,690
next in production to served our main

00:23:19,650 --> 00:23:24,580
experiences basically so that goes from

00:23:22,690 --> 00:23:27,310
your personal website to the largest

00:23:24,580 --> 00:23:28,780
companies in the world like literally

00:23:27,310 --> 00:23:31,200
the largest companies in the world like

00:23:28,780 --> 00:23:34,780
$0.10 which is like the sixth largest

00:23:31,200 --> 00:23:37,660
website of the internet for example but

00:23:34,780 --> 00:23:41,830
also really well known here delivery for

00:23:37,660 --> 00:23:46,060
example but also github Zillow which is

00:23:41,830 --> 00:23:48,160
a large housing company Hilton Eurostar

00:23:46,060 --> 00:23:50,170
I took the Eurostar here I ordered on

00:23:48,160 --> 00:23:54,610
the on this website it was built in next

00:23:50,170 --> 00:23:55,750
it's very cool and like Marvel for

00:23:54,610 --> 00:23:59,290
example and all these other companies

00:23:55,750 --> 00:24:01,150
and specifically with Hulu we did a case

00:23:59,290 --> 00:24:03,640
study so you can go to this website and

00:24:01,150 --> 00:24:05,530
you can see like how Hulu approached

00:24:03,640 --> 00:24:08,560
they're like migration to next and that

00:24:05,530 --> 00:24:10,630
kind of thing and then if you want to

00:24:08,560 --> 00:24:12,580
learn more about next and like got

00:24:10,630 --> 00:24:15,400
really into like how everything works

00:24:12,580 --> 00:24:17,260
and like basically in a playful way got

00:24:15,400 --> 00:24:19,600
true you get your way through like how

00:24:17,260 --> 00:24:20,290
to start using next I would recommend

00:24:19,600 --> 00:24:23,260
going to next

00:24:20,290 --> 00:24:25,780
learn which basically is an interactive

00:24:23,260 --> 00:24:29,230
tutorial where you build all these apps

00:24:25,780 --> 00:24:30,700
with next and it just helps you

00:24:29,230 --> 00:24:34,870
understand all the different aspects

00:24:30,700 --> 00:24:36,970
that we provide and that was it in terms

00:24:34,870 --> 00:24:39,310
of testing does it change anything for

00:24:36,970 --> 00:24:41,500
you there is any kind of extra tester or

00:24:39,310 --> 00:24:43,630
different techniques so that you find

00:24:41,500 --> 00:24:46,300
like you should use if you pass to ninja

00:24:43,630 --> 00:24:47,860
yes or adjust something like a layer on

00:24:46,300 --> 00:24:49,630
top and you just test as you will do

00:24:47,860 --> 00:24:52,480
your own react app and you don't

00:24:49,630 --> 00:24:54,400
currently it's the same as building

00:24:52,480 --> 00:24:56,680
reactor like testing react apps so you

00:24:54,400 --> 00:24:58,600
use either you do unit testing using

00:24:56,680 --> 00:25:01,090
react testing library or something like

00:24:58,600 --> 00:25:03,610
that or use Cypress for like integration

00:25:01,090 --> 00:25:07,720
tests that kind of thing we are self

00:25:03,610 --> 00:25:10,900
tests next using selenium in friendly

00:25:07,720 --> 00:25:12,160
enough five or six different browsers so

00:25:10,900 --> 00:25:15,400
we still do that we really care about

00:25:12,160 --> 00:25:17,800
that compatibility with like ie 11 for

00:25:15,400 --> 00:25:20,080
the framework itself but we also test

00:25:17,800 --> 00:25:21,760
like all these other things like how

00:25:20,080 --> 00:25:23,110
much your replacement and like all these

00:25:21,760 --> 00:25:24,730
things all the feature of necks

00:25:23,110 --> 00:25:27,610
basically so we make sure that it never

00:25:24,730 --> 00:25:31,060
breaks between upgrades and that kind of

00:25:27,610 --> 00:25:34,630
thing and the example that you showed

00:25:31,060 --> 00:25:36,970
before that was using hooks do you have

00:25:34,630 --> 00:25:39,460
examples are these available in the

00:25:36,970 --> 00:25:40,840
github repository because this one in

00:25:39,460 --> 00:25:44,790
particular not but it's like two lines

00:25:40,840 --> 00:25:48,490
of code so I can like request it in but

00:25:44,790 --> 00:25:50,980
it's literally you do set to you state

00:25:48,490 --> 00:25:53,710
and you do use effect with the second

00:25:50,980 --> 00:25:57,070
parameter being an empty array and then

00:25:53,710 --> 00:26:03,730
function is literally set state mounted

00:25:57,070 --> 00:26:06,130
true and that's Ganesha press will still

00:26:03,730 --> 00:26:07,900
run on the server and then return the

00:26:06,130 --> 00:26:09,430
props but if you're doing that in

00:26:07,900 --> 00:26:13,000
particular you would want to do

00:26:09,430 --> 00:26:14,860
client-side fetches cool yeah so I have

00:26:13,000 --> 00:26:16,390
one more thing which I was saying

00:26:14,860 --> 00:26:19,690
there's an easter egg and it's next year

00:26:16,390 --> 00:26:21,490
so I applied actually it's an excess

00:26:19,690 --> 00:26:24,280
website as many Easter acts and it's

00:26:21,490 --> 00:26:25,900
called magic leap so I don't know if you

00:26:24,280 --> 00:26:28,240
ever heard of this and I'm going to this

00:26:25,900 --> 00:26:31,720
website and you can't see it so let me

00:26:28,240 --> 00:26:33,970
just fix that so I have this silver X

00:26:31,720 --> 00:26:39,530
because otherwise

00:26:33,970 --> 00:26:42,740
let's see so magic clip is this VR

00:26:39,530 --> 00:26:44,660
glasses basically or a our glasses and a

00:26:42,740 --> 00:26:46,310
messiah so you like Luke Troodon but you

00:26:44,660 --> 00:26:49,700
can see like this augmented reality

00:26:46,310 --> 00:26:52,910
world very cool stuff they use next for

00:26:49,700 --> 00:26:56,720
pretty much everything they do so you go

00:26:52,910 --> 00:26:59,420
to the 404 page it's just I mean slash

00:26:56,720 --> 00:27:02,750
404 oh my zero so I have a MacBook Pro

00:26:59,420 --> 00:27:04,850
and it has this funny thing in the

00:27:02,750 --> 00:27:09,260
keyboard where it doesn't allow you to

00:27:04,850 --> 00:27:11,870
press here anymore but anyway so this is

00:27:09,260 --> 00:27:12,290
really funny so you see the light there

00:27:11,870 --> 00:27:14,180
right

00:27:12,290 --> 00:27:17,440
it was blinking so I don't know if

00:27:14,180 --> 00:27:20,540
anyone if you miss Morse code I don't

00:27:17,440 --> 00:27:22,400
and so I went translate it but it says

00:27:20,540 --> 00:27:26,830
something with rounds and stuff I think

00:27:22,400 --> 00:27:26,830
so let's just try something with rinds

00:27:28,330 --> 00:27:35,030
right there's this thing opening what is

00:27:31,070 --> 00:27:38,840
this right so let's accept the cookies

00:27:35,030 --> 00:27:40,070
because for all gdpr complained so let's

00:27:38,840 --> 00:27:43,790
just try clicking it we could select

00:27:40,070 --> 00:27:48,050
what's going on here and suddenly your

00:27:43,790 --> 00:27:52,100
end is different universe and it was

00:27:48,050 --> 00:27:54,410
really cool and it's built in next it

00:27:52,100 --> 00:27:55,910
uses WebGL and they have like many many

00:27:54,410 --> 00:27:58,880
engineers that are really good at this

00:27:55,910 --> 00:28:03,350
stuff because certain a our company of

00:27:58,880 --> 00:28:06,020
course there's a skyline of magic leap

00:28:03,350 --> 00:28:08,390
logos I don't know what's happening

00:28:06,020 --> 00:28:12,270
we're like this is just really cool but

00:28:08,390 --> 00:28:18,710
I just wanted to share it anyway yeah

00:28:12,270 --> 00:28:18,710

YouTube URL: https://www.youtube.com/watch?v=KC7j3DtOnYE


