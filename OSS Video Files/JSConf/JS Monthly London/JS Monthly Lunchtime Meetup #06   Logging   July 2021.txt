Title: JS Monthly Lunchtime Meetup #06   Logging   July 2021
Publication date: 2021-07-16
Playlist: JS Monthly London
Description: 
	@JSMonthlyLondon
https://www.meetup.com/js-monthly/

Why Logging is Important // Thanos Polychronakis

We will explore why logging is important, how to do it properly and how Logality, a new logging library, can help. We'll also see how various Node.js Libraries compare with each other.

Pre-Roll: 00:00
Intro: 7:51
Logging: Why It's Important: 10:00
Q&A: 42:16
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:01,120 --> 00:00:12,439
[Music]

00:00:14,920 --> 00:00:17,920
um

00:00:18,670 --> 00:00:34,119
[Music]

00:00:38,900 --> 00:00:41,970
[Music]

00:00:43,760 --> 00:00:45,840
foreign

00:00:46,580 --> 00:01:28,009
[Music]

00:01:30,720 --> 00:02:23,110
[Music]

00:02:20,020 --> 00:02:23,110
[Applause]

00:02:23,130 --> 00:02:51,469
[Music]

00:02:57,570 --> 00:03:00,630
[Music]

00:03:02,840 --> 00:03:17,840
so

00:03:05,250 --> 00:03:18,100
[Music]

00:03:17,840 --> 00:03:46,669
you

00:03:18,100 --> 00:03:46,669
[Music]

00:03:49,390 --> 00:04:00,080
[Music]

00:03:58,840 --> 00:04:13,840
do

00:04:00,080 --> 00:04:14,410
[Music]

00:04:13,840 --> 00:04:38,690
you

00:04:14,410 --> 00:04:41,769
[Music]

00:04:38,690 --> 00:04:41,769
[Applause]

00:04:41,800 --> 00:04:57,840
[Music]

00:04:54,840 --> 00:04:57,840
so

00:04:58,760 --> 00:05:11,840
[Music]

00:05:08,840 --> 00:05:11,840
well

00:05:16,250 --> 00:05:19,300
[Music]

00:05:22,840 --> 00:05:50,840
so

00:05:23,920 --> 00:05:52,760
[Music]

00:05:50,840 --> 00:06:05,339
uh

00:05:52,760 --> 00:06:05,339
[Music]

00:06:08,050 --> 00:06:18,610
[Music]

00:06:18,840 --> 00:06:57,350
do

00:06:20,870 --> 00:07:00,439
[Music]

00:06:57,350 --> 00:07:00,439
[Applause]

00:07:00,460 --> 00:07:17,430
[Music]

00:07:14,840 --> 00:07:28,800
do

00:07:17,430 --> 00:07:28,800
[Music]

00:07:34,910 --> 00:07:44,750
[Music]

00:07:42,840 --> 00:07:50,000
foreign

00:07:44,750 --> 00:07:54,319
[Music]

00:07:50,000 --> 00:07:57,680
hello everyone this is the js monthly

00:07:54,319 --> 00:08:00,960
our july meetup at lunchtime

00:07:57,680 --> 00:08:02,960
it's one o'clock in uk and we today we

00:08:00,960 --> 00:08:04,479
have another meet up

00:08:02,960 --> 00:08:07,199
before we start our meetup with our

00:08:04,479 --> 00:08:07,199
special guest

00:08:07,280 --> 00:08:11,199
i'm going to take you through my name is

00:08:08,960 --> 00:08:12,800
aries marco janakis

00:08:11,199 --> 00:08:14,319
you can find me on twitter at aries

00:08:12,800 --> 00:08:17,520
marco

00:08:14,319 --> 00:08:22,639
and i'm organizing a js monthly

00:08:17,520 --> 00:08:25,840
and also i'm organizing ctjs

00:08:22,639 --> 00:08:26,479
conference we're always looking for new

00:08:25,840 --> 00:08:27,919
people

00:08:26,479 --> 00:08:30,639
so if you if you want to help the

00:08:27,919 --> 00:08:33,440
community we're a community meetup

00:08:30,639 --> 00:08:34,000
you can email us at the js monthly

00:08:33,440 --> 00:08:37,360
london

00:08:34,000 --> 00:08:40,479
gmail.com and you can involve help

00:08:37,360 --> 00:08:43,519
help us and help the community

00:08:40,479 --> 00:08:46,640
i have a special announcement today

00:08:43,519 --> 00:08:49,200
we're gonna be doing the first outdoor

00:08:46,640 --> 00:08:50,880
and in-person event in london it's gonna

00:08:49,200 --> 00:08:54,320
be happening at the

00:08:50,880 --> 00:08:56,880
beach bar next time in london

00:08:54,320 --> 00:08:59,040
on the 7th of september there are only

00:08:56,880 --> 00:09:01,680
70 tickets available at the moment

00:08:59,040 --> 00:09:04,240
so grab yours and come and join us in

00:09:01,680 --> 00:09:04,240
september

00:09:05,360 --> 00:09:11,680
i will now pass you to a special guest

00:09:09,440 --> 00:09:12,480
thanos volcanics is quite well known for

00:09:11,680 --> 00:09:14,800
his

00:09:12,480 --> 00:09:16,000
community contribution and he's going to

00:09:14,800 --> 00:09:18,160
be talking about

00:09:16,000 --> 00:09:20,480
why logging is important we're going to

00:09:18,160 --> 00:09:23,519
have a q a after the

00:09:20,480 --> 00:09:24,880
the talk and for any questions you can

00:09:23,519 --> 00:09:28,320
post them on

00:09:24,880 --> 00:09:32,399
and also on our youtube on the youtube

00:09:28,320 --> 00:09:35,519
feed thank you very much enjoy

00:09:32,399 --> 00:09:38,720
hello everyone my name is thomas

00:09:35,519 --> 00:09:41,839
i'm very happy to be here with you

00:09:38,720 --> 00:09:42,800
one moment to share my screen and get

00:09:41,839 --> 00:09:45,360
started

00:09:42,800 --> 00:09:45,360
right away

00:09:48,000 --> 00:09:54,720
so iris can you see my search screen

00:09:51,279 --> 00:09:57,279
uh yes i can cool

00:09:54,720 --> 00:09:58,000
so today we'll talk about why logging is

00:09:57,279 --> 00:09:59,360
important

00:09:58,000 --> 00:10:02,640
and how logarithmic can help you with

00:09:59,360 --> 00:10:05,200
that logarithm is a logging library that

00:10:02,640 --> 00:10:07,279
i've built and we will see what it can

00:10:05,200 --> 00:10:08,320
do and how it compares to other popular

00:10:07,279 --> 00:10:11,760
libraries

00:10:08,320 --> 00:10:13,760
on the node.js ecosystem

00:10:11,760 --> 00:10:15,040
so before we get started a few things

00:10:13,760 --> 00:10:18,560
about me

00:10:15,040 --> 00:10:20,000
i've published nearly 50 packages on npm

00:10:18,560 --> 00:10:22,959
i've got over 200

00:10:20,000 --> 00:10:25,680
open source repositories and i have

00:10:22,959 --> 00:10:28,160
contributions on major and small

00:10:25,680 --> 00:10:30,720
open source projects like mongoose

00:10:28,160 --> 00:10:30,720
equalize

00:10:30,880 --> 00:10:38,560
socket and a few smaller ones

00:10:34,560 --> 00:10:39,120
so i um i'm quite passionate about open

00:10:38,560 --> 00:10:40,959
source

00:10:39,120 --> 00:10:42,480
and i've been doing that for over 10

00:10:40,959 --> 00:10:46,240
years now

00:10:42,480 --> 00:10:48,240
it's been a few couple of years that uh

00:10:46,240 --> 00:10:49,440
i consider myself semi-retired and

00:10:48,240 --> 00:10:52,959
focused on gardening

00:10:49,440 --> 00:10:55,760
and quite recently i have developed a

00:10:52,959 --> 00:10:56,720
interest on decentralized violence which

00:10:55,760 --> 00:11:00,480
is an entire

00:10:56,720 --> 00:11:02,079
subject a different subject entirely

00:11:00,480 --> 00:11:03,760
so uh let's see what we're going to talk

00:11:02,079 --> 00:11:06,079
about today today

00:11:03,760 --> 00:11:07,279
um we're going to see why logging is

00:11:06,079 --> 00:11:09,279
important

00:11:07,279 --> 00:11:11,519
what are the logging requirements so as

00:11:09,279 --> 00:11:13,680
you are required to set up logging

00:11:11,519 --> 00:11:16,399
uh on your system or your infrastructure

00:11:13,680 --> 00:11:18,800
what the requirements should be

00:11:16,399 --> 00:11:20,959
what and how to log and where and when

00:11:18,800 --> 00:11:23,200
to log

00:11:20,959 --> 00:11:24,720
and then we're going to have a quick

00:11:23,200 --> 00:11:28,240
pass-through on locality

00:11:24,720 --> 00:11:31,680
and how it compares to other libraries

00:11:28,240 --> 00:11:33,360
so this is quite straightforward logging

00:11:31,680 --> 00:11:35,440
is important because

00:11:33,360 --> 00:11:37,279
having a log in the right place at the

00:11:35,440 --> 00:11:38,320
right time and with the right kind of

00:11:37,279 --> 00:11:40,560
information

00:11:38,320 --> 00:11:42,640
can really save you from hours of

00:11:40,560 --> 00:11:45,760
frustration troubleshooting

00:11:42,640 --> 00:11:47,680
and most likely save

00:11:45,760 --> 00:11:49,519
your uh you know your life production

00:11:47,680 --> 00:11:51,360
system from burning down

00:11:49,519 --> 00:11:55,360
and staying and having downtime for

00:11:51,360 --> 00:11:55,360
hours having a very bad day

00:11:55,519 --> 00:12:00,079
um so let's break this down what logging

00:11:58,720 --> 00:12:01,839
helps you with it helps you with

00:12:00,079 --> 00:12:03,760
natural debugging as you're developing

00:12:01,839 --> 00:12:05,760
error tracing while on production

00:12:03,760 --> 00:12:09,040
and local development as well

00:12:05,760 --> 00:12:09,040
performance troubleshooting

00:12:09,760 --> 00:12:12,800
i wouldn't say that logging excels at

00:12:12,000 --> 00:12:15,839
performance

00:12:12,800 --> 00:12:16,720
but it can give you hints if you have

00:12:15,839 --> 00:12:19,279
the correct

00:12:16,720 --> 00:12:21,680
logs at the right place as to whether

00:12:19,279 --> 00:12:26,000
you have bottlenecks in your system

00:12:21,680 --> 00:12:28,000
accounting accounting is

00:12:26,000 --> 00:12:29,519
the act of monitoring everything that

00:12:28,000 --> 00:12:31,120
happens in your system everything that

00:12:29,519 --> 00:12:34,880
changes every

00:12:31,120 --> 00:12:38,240
change on your system and not the trail

00:12:34,880 --> 00:12:38,480
audit trail is accounting when you store

00:12:38,240 --> 00:12:40,720
it

00:12:38,480 --> 00:12:42,160
on an immutable uh data store and we're

00:12:40,720 --> 00:12:44,959
gonna see

00:12:42,160 --> 00:12:46,800
in depth what we mean by that later down

00:12:44,959 --> 00:12:49,279
on another slide

00:12:46,800 --> 00:12:50,240
and uh security so logging helps you

00:12:49,279 --> 00:12:52,000
with security as

00:12:50,240 --> 00:12:53,680
naturally you would log suspicious

00:12:52,000 --> 00:12:58,160
events

00:12:53,680 --> 00:12:59,680
and attempt breaches

00:12:58,160 --> 00:13:02,160
now let's start with the requirements

00:12:59,680 --> 00:13:06,240
and those requirements

00:13:02,160 --> 00:13:08,000
really kind of apply to all uh you know

00:13:06,240 --> 00:13:08,880
all sizes whether you start with a

00:13:08,000 --> 00:13:11,440
single

00:13:08,880 --> 00:13:12,959
instance on a single server or you have

00:13:11,440 --> 00:13:15,920
a big infrastructure

00:13:12,959 --> 00:13:17,200
the you know the natural outcome of your

00:13:15,920 --> 00:13:19,040
application as it grows

00:13:17,200 --> 00:13:20,480
is that you're gonna have multiple

00:13:19,040 --> 00:13:21,519
instances and probably multiple

00:13:20,480 --> 00:13:25,279
operating systems

00:13:21,519 --> 00:13:27,360
and multiple stacks so

00:13:25,279 --> 00:13:29,040
those requirements are kind of cross

00:13:27,360 --> 00:13:31,519
across

00:13:29,040 --> 00:13:33,680
you know all of the sizes of your

00:13:31,519 --> 00:13:35,360
infrastructure so

00:13:33,680 --> 00:13:36,800
first off uh you know one of the

00:13:35,360 --> 00:13:38,639
requirements is that you need to take

00:13:36,800 --> 00:13:40,800
under account that

00:13:38,639 --> 00:13:42,240
multiple instances of your application

00:13:40,800 --> 00:13:44,959
are going to be running

00:13:42,240 --> 00:13:47,360
so this is about scaling you know

00:13:44,959 --> 00:13:48,800
horizontally your application

00:13:47,360 --> 00:13:50,480
your application will have multiple

00:13:48,800 --> 00:13:52,480
workers which are going to work on the

00:13:50,480 --> 00:13:55,600
back end

00:13:52,480 --> 00:13:58,480
and perform

00:13:55,600 --> 00:14:00,079
you know reduced tasks and things that

00:13:58,480 --> 00:14:01,839
need to happen in the background

00:14:00,079 --> 00:14:03,839
you will probably have multiple stacks

00:14:01,839 --> 00:14:05,600
and runtimes so

00:14:03,839 --> 00:14:08,160
you know might have a server that runs

00:14:05,600 --> 00:14:08,959
on go another server that does something

00:14:08,160 --> 00:14:12,560
in

00:14:08,959 --> 00:14:12,560
java and uh

00:14:13,360 --> 00:14:16,720
and you're gonna have you know basically

00:14:15,440 --> 00:14:19,920
a multi-stack

00:14:16,720 --> 00:14:21,360
environment and it's most likely that

00:14:19,920 --> 00:14:23,920
you're going to be using

00:14:21,360 --> 00:14:25,120
multiple services and databases like you

00:14:23,920 --> 00:14:30,000
know postgres

00:14:25,120 --> 00:14:32,480
nosql database radis all sorts of things

00:14:30,000 --> 00:14:33,360
and it's quite likely that if you grow

00:14:32,480 --> 00:14:35,120
enough you're gonna

00:14:33,360 --> 00:14:36,800
run on multiple platforms that is

00:14:35,120 --> 00:14:39,279
multiple um

00:14:36,800 --> 00:14:41,199
providers like you might be in between

00:14:39,279 --> 00:14:43,680
the migration from aws

00:14:41,199 --> 00:14:45,760
to google cloud or you might have some

00:14:43,680 --> 00:14:48,240
service running on azure to

00:14:45,760 --> 00:14:48,800
satisfy a certain customer all things

00:14:48,240 --> 00:14:50,560
can happen

00:14:48,800 --> 00:14:52,959
so that also needs to be taken under

00:14:50,560 --> 00:14:52,959
account

00:14:53,040 --> 00:14:58,399
now when you are

00:14:57,279 --> 00:15:00,480
thinking about how you're going to

00:14:58,399 --> 00:15:01,440
consume your logs you need to

00:15:00,480 --> 00:15:03,839
you need to consider the following

00:15:01,440 --> 00:15:05,519
requirements as well which is it makes

00:15:03,839 --> 00:15:06,160
sense to have a common logic aggregator

00:15:05,519 --> 00:15:08,880
so

00:15:06,160 --> 00:15:09,199
you won't need to hop between systems to

00:15:08,880 --> 00:15:11,279
view

00:15:09,199 --> 00:15:13,440
your logs right you would expect that

00:15:11,279 --> 00:15:15,600
all of the infrastructure of the systems

00:15:13,440 --> 00:15:18,639
across your infrastructure

00:15:15,600 --> 00:15:20,079
log to one single system and where you

00:15:18,639 --> 00:15:23,279
can view the logs

00:15:20,079 --> 00:15:26,560
and it would make sense for

00:15:23,279 --> 00:15:28,720
that aggregator to be querable and while

00:15:26,560 --> 00:15:30,160
most aggregators are basically text

00:15:28,720 --> 00:15:33,440
search engines

00:15:30,160 --> 00:15:34,320
it would be way more convenient to have

00:15:33,440 --> 00:15:37,440
your logs

00:15:34,320 --> 00:15:39,600
in a json format so that you have a

00:15:37,440 --> 00:15:40,240
specific schema that you can query

00:15:39,600 --> 00:15:43,920
against

00:15:40,240 --> 00:15:45,600
okay i don't believe i need to go

00:15:43,920 --> 00:15:48,320
more in depth about why this is

00:15:45,600 --> 00:15:50,959
important and

00:15:48,320 --> 00:15:52,839
you need to have a common logging schema

00:15:50,959 --> 00:15:56,000
and

00:15:52,839 --> 00:15:57,600
so this is very

00:15:56,000 --> 00:15:59,759
important and that's why i want to

00:15:57,600 --> 00:16:02,000
repeat it and

00:15:59,759 --> 00:16:03,360
it makes a whole lot of sense for all of

00:16:02,000 --> 00:16:04,560
the applications no matter what the

00:16:03,360 --> 00:16:07,199
stack they're on

00:16:04,560 --> 00:16:08,880
to use the same properties when they are

00:16:07,199 --> 00:16:12,240
referring to a time stamp

00:16:08,880 --> 00:16:15,360
okay so you would be able to

00:16:12,240 --> 00:16:17,199
query easily based on this timestamp or

00:16:15,360 --> 00:16:19,440
based on the log level

00:16:17,199 --> 00:16:21,440
and you know every system wouldn't have

00:16:19,440 --> 00:16:24,320
its own different

00:16:21,440 --> 00:16:26,480
log level system or different schema of

00:16:24,320 --> 00:16:29,680
logging things and you would be

00:16:26,480 --> 00:16:30,959
forced to jump through hoops to be able

00:16:29,680 --> 00:16:33,839
to interpret

00:16:30,959 --> 00:16:34,959
logs between different systems so having

00:16:33,839 --> 00:16:38,720
a common logging

00:16:34,959 --> 00:16:42,320
schema is of paramount importance

00:16:38,720 --> 00:16:45,839
let's now see what and how to look

00:16:42,320 --> 00:16:49,519
and let's start with what and

00:16:45,839 --> 00:16:52,399
we start with who am i and who am i

00:16:49,519 --> 00:16:52,959
is going to be explained like you know

00:16:52,399 --> 00:16:55,920
who am i

00:16:52,959 --> 00:16:57,120
my node.js application what instance in

00:16:55,920 --> 00:17:00,399
my running

00:16:57,120 --> 00:17:02,880
what worker am i where am i is

00:17:00,399 --> 00:17:04,559
um you know where am i running on what

00:17:02,880 --> 00:17:07,919
server exactly what

00:17:04,559 --> 00:17:09,280
data center and what i buy

00:17:07,919 --> 00:17:11,520
what is my performance what is my

00:17:09,280 --> 00:17:14,559
function

00:17:11,520 --> 00:17:15,919
metadata and flags and tagging so this

00:17:14,559 --> 00:17:19,439
is actually the mid

00:17:15,919 --> 00:17:21,439
of the logging message which is uh okay

00:17:19,439 --> 00:17:22,880
we've covered the basics who am i where

00:17:21,439 --> 00:17:25,360
am i what am i now

00:17:22,880 --> 00:17:26,640
let's give you the actual data that i

00:17:25,360 --> 00:17:27,839
want to log this is what we call

00:17:26,640 --> 00:17:29,440
metadata

00:17:27,839 --> 00:17:31,280
and flags and tagging we're going to see

00:17:29,440 --> 00:17:32,160
later on what we mean by that it is

00:17:31,280 --> 00:17:34,480
basically

00:17:32,160 --> 00:17:36,080
creating boolean tags and flags to

00:17:34,480 --> 00:17:38,400
easily being able to

00:17:36,080 --> 00:17:40,000
filter and query for the logs that you

00:17:38,400 --> 00:17:42,480
care about

00:17:40,000 --> 00:17:43,120
so let's see what we mean by who am i

00:17:42,480 --> 00:17:45,919
who am i

00:17:43,120 --> 00:17:47,440
means you know what's my run time is it

00:17:45,919 --> 00:17:50,640
no does it go

00:17:47,440 --> 00:17:51,120
is it php the hostname that i'm running

00:17:50,640 --> 00:17:55,840
on

00:17:51,120 --> 00:17:58,480
uh the exact hostname my process id

00:17:55,840 --> 00:18:01,360
is my process name you know how was the

00:17:58,480 --> 00:18:04,160
application launched was it npm start or

00:18:01,360 --> 00:18:05,919
note dot or node app slash starts

00:18:04,160 --> 00:18:08,480
whatever

00:18:05,919 --> 00:18:09,600
how did this came to be where and where

00:18:08,480 --> 00:18:12,960
am i

00:18:09,600 --> 00:18:15,200
and this is this has to do about uh

00:18:12,960 --> 00:18:17,440
you know logging level the severity is

00:18:15,200 --> 00:18:20,480
it an info message or is it a warning

00:18:17,440 --> 00:18:22,960
or is it a fatal message that brings the

00:18:20,480 --> 00:18:27,039
service down

00:18:22,960 --> 00:18:29,440
what module was the log

00:18:27,039 --> 00:18:32,480
did the log originate from and that is

00:18:29,440 --> 00:18:35,679
what file in particular

00:18:32,480 --> 00:18:39,039
produced that log and more specifically

00:18:35,679 --> 00:18:41,679
what function in that file

00:18:39,039 --> 00:18:43,200
produced that log and this is important

00:18:41,679 --> 00:18:45,200
so you want

00:18:43,200 --> 00:18:46,799
when you're trying to debug your

00:18:45,200 --> 00:18:50,080
application and you see an error

00:18:46,799 --> 00:18:52,160
you don't need to go search across your

00:18:50,080 --> 00:18:54,480
entire code base to find where this log

00:18:52,160 --> 00:18:56,080
got produced from you have this

00:18:54,480 --> 00:18:58,799
information right there

00:18:56,080 --> 00:19:00,320
and then and you can directly go to that

00:18:58,799 --> 00:19:02,960
file and

00:19:00,320 --> 00:19:06,000
do what you have to do because without

00:19:02,960 --> 00:19:08,160
saying that we need a timestamp

00:19:06,000 --> 00:19:10,240
now flags and tagging flags and tagging

00:19:08,160 --> 00:19:13,360
is nothing else other than having

00:19:10,240 --> 00:19:17,440
boolean flags basically that

00:19:13,360 --> 00:19:19,440
uh create tags for your log messages

00:19:17,440 --> 00:19:21,440
and you might target log messages as

00:19:19,440 --> 00:19:23,440
being security related so you know you

00:19:21,440 --> 00:19:28,240
have a failed login

00:19:23,440 --> 00:19:31,200
or something that

00:19:28,240 --> 00:19:32,640
is really you know you should raise your

00:19:31,200 --> 00:19:34,640
awareness around security

00:19:32,640 --> 00:19:35,919
you tag that log message with the

00:19:34,640 --> 00:19:39,280
security

00:19:35,919 --> 00:19:41,919
equals true flag equally

00:19:39,280 --> 00:19:42,880
when you when it's an error condition

00:19:41,919 --> 00:19:45,360
you have an error

00:19:42,880 --> 00:19:46,320
boolean so you can easily query for that

00:19:45,360 --> 00:19:48,080
and uh

00:19:46,320 --> 00:19:52,160
similarly an audit and we're going to

00:19:48,080 --> 00:19:54,480
see more examples about an audit later

00:19:52,160 --> 00:19:55,840
let's go into the how to log um pretty

00:19:54,480 --> 00:19:58,240
straight forward

00:19:55,840 --> 00:19:59,039
you need to have the ability to pretty

00:19:58,240 --> 00:20:01,120
print

00:19:59,039 --> 00:20:02,960
pretty printing is the act of having the

00:20:01,120 --> 00:20:04,960
logs uh pretty printed

00:20:02,960 --> 00:20:06,720
in a human readable manner so this is a

00:20:04,960 --> 00:20:09,360
human readable

00:20:06,720 --> 00:20:11,039
log you can see the date here you can

00:20:09,360 --> 00:20:13,360
see the log level

00:20:11,039 --> 00:20:15,039
you can see where the log came from it's

00:20:13,360 --> 00:20:17,120
from this particular file

00:20:15,039 --> 00:20:18,320
and the log message itself booting

00:20:17,120 --> 00:20:20,960
services

00:20:18,320 --> 00:20:22,240
and when you're a production you need

00:20:20,960 --> 00:20:26,000
this to be

00:20:22,240 --> 00:20:27,600
outputted as a json so this is the same

00:20:26,000 --> 00:20:29,840
block message

00:20:27,600 --> 00:20:30,960
when it's been echoed on production

00:20:29,840 --> 00:20:33,520
which we can see

00:20:30,960 --> 00:20:35,520
it has way richer information like all

00:20:33,520 --> 00:20:38,559
the things we talked about host name

00:20:35,520 --> 00:20:40,320
process id the process name

00:20:38,559 --> 00:20:41,919
and all other stuff that you may want to

00:20:40,320 --> 00:20:44,480
attach

00:20:41,919 --> 00:20:45,600
and when you're testing you would expect

00:20:44,480 --> 00:20:48,080
that all of your tests

00:20:45,600 --> 00:20:50,159
are passing on your continuous

00:20:48,080 --> 00:20:53,280
integration machine so you

00:20:50,159 --> 00:20:57,120
basically mute your uh logs so they

00:20:53,280 --> 00:20:59,440
they won't produce huge artifacts

00:20:57,120 --> 00:21:00,640
and in case something breaks and breaks

00:20:59,440 --> 00:21:03,200
and you want to

00:21:00,640 --> 00:21:04,480
debug it then you can manually enable

00:21:03,200 --> 00:21:07,120
tests for

00:21:04,480 --> 00:21:10,480
ci but typically from experience it

00:21:07,120 --> 00:21:10,480
doesn't need to happen that often

00:21:10,720 --> 00:21:14,840
so let's talk about where and when to

00:21:12,960 --> 00:21:17,840
log

00:21:14,840 --> 00:21:22,480
and it makes sense

00:21:17,840 --> 00:21:24,960
to uh to start logging

00:21:22,480 --> 00:21:25,679
logs on your application boot up and

00:21:24,960 --> 00:21:28,799
that means

00:21:25,679 --> 00:21:31,840
that you know as your application starts

00:21:28,799 --> 00:21:35,280
to bootstrap itself

00:21:31,840 --> 00:21:37,760
you create the first log should state

00:21:35,280 --> 00:21:39,120
you know who am i where are my node

00:21:37,760 --> 00:21:41,120
environments

00:21:39,120 --> 00:21:42,559
operating system running on what user am

00:21:41,120 --> 00:21:44,400
i running on

00:21:42,559 --> 00:21:45,840
that's important so for instance you

00:21:44,400 --> 00:21:48,799
don't want your

00:21:45,840 --> 00:21:49,280
application running as good and you want

00:21:48,799 --> 00:21:51,520
to

00:21:49,280 --> 00:21:53,280
uh make sure that your application is

00:21:51,520 --> 00:21:55,919
running as a specific user

00:21:53,280 --> 00:21:58,000
so you log that and you know that that's

00:21:55,919 --> 00:22:00,159
the case

00:21:58,000 --> 00:22:02,400
models and service booting services

00:22:00,159 --> 00:22:04,559
putting up so basically

00:22:02,400 --> 00:22:07,039
as your application bootstraps it starts

00:22:04,559 --> 00:22:07,600
to connect to services before it becomes

00:22:07,039 --> 00:22:10,720
ready

00:22:07,600 --> 00:22:13,679
uh log all of those steps it's

00:22:10,720 --> 00:22:15,200
one by one so you know i'm connecting to

00:22:13,679 --> 00:22:19,440
postgres i'm connecting

00:22:15,200 --> 00:22:22,400
to redis i am connecting to xyz api

00:22:19,440 --> 00:22:23,120
and i am warming up the cache whatever

00:22:22,400 --> 00:22:25,360
you do as

00:22:23,120 --> 00:22:26,799
steps of bringing your application in a

00:22:25,360 --> 00:22:28,880
ready state

00:22:26,799 --> 00:22:30,880
log them each one of them so when

00:22:28,880 --> 00:22:31,440
something breaks it's easy to understand

00:22:30,880 --> 00:22:34,720
you know

00:22:31,440 --> 00:22:36,320
at what point your application broke and

00:22:34,720 --> 00:22:38,000
how to fix it and you know exactly where

00:22:36,320 --> 00:22:41,280
to go

00:22:38,000 --> 00:22:44,080
error handlers so there are uh

00:22:41,280 --> 00:22:45,520
global error handlers on node.js that

00:22:44,080 --> 00:22:48,400
you can

00:22:45,520 --> 00:22:50,400
capture like uncode exception or uncode

00:22:48,400 --> 00:22:53,360
problems rejection

00:22:50,400 --> 00:22:54,000
when the application goes down c gain

00:22:53,360 --> 00:22:56,159
sick term

00:22:54,000 --> 00:22:57,360
you know all of that stuff put a lot

00:22:56,159 --> 00:23:00,880
there

00:22:57,360 --> 00:23:05,120
look for those and put a lot there

00:23:00,880 --> 00:23:07,520
you have an http server whatever that is

00:23:05,120 --> 00:23:08,640
there is a certain global error handler

00:23:07,520 --> 00:23:11,760
for the http

00:23:08,640 --> 00:23:14,559
server log that as well

00:23:11,760 --> 00:23:15,520
so you know what's happening there and

00:23:14,559 --> 00:23:17,200
uh

00:23:15,520 --> 00:23:19,200
throughout your code base wherever you

00:23:17,200 --> 00:23:23,280
have you know try catch statements

00:23:19,200 --> 00:23:24,960
naturally all of those need to log and

00:23:23,280 --> 00:23:26,880
typically they shouldn't bubble up

00:23:24,960 --> 00:23:28,720
because you would

00:23:26,880 --> 00:23:30,159
best practice is to handle the log on

00:23:28,720 --> 00:23:32,720
the spot and

00:23:30,159 --> 00:23:36,320
part of handling the log part of sorry

00:23:32,720 --> 00:23:36,320
handling the error is logging it

00:23:38,320 --> 00:23:44,159
accounting audit at security so

00:23:41,360 --> 00:23:45,840
what else do you log throughout your uh

00:23:44,159 --> 00:23:47,679
application's lifetime

00:23:45,840 --> 00:23:50,000
only mutating operations any operation

00:23:47,679 --> 00:23:52,880
that basically writes on your database

00:23:50,000 --> 00:23:54,159
mutates the state like update the user

00:23:52,880 --> 00:23:57,120
profile

00:23:54,159 --> 00:23:59,039
save a different email create a new

00:23:57,120 --> 00:24:02,799
product

00:23:59,039 --> 00:24:04,000
whatever of your application is whenever

00:24:02,799 --> 00:24:06,159
the state changes whenever you have a

00:24:04,000 --> 00:24:07,840
right in the database log that you know

00:24:06,159 --> 00:24:10,480
this user

00:24:07,840 --> 00:24:12,159
did this change at that time previous

00:24:10,480 --> 00:24:15,039
value

00:24:12,159 --> 00:24:16,000
new value depending on the use case you

00:24:15,039 --> 00:24:19,279
want to log

00:24:16,000 --> 00:24:21,600
more or less and this

00:24:19,279 --> 00:24:22,559
this uh accounting becomes an audit

00:24:21,600 --> 00:24:25,039
trail

00:24:22,559 --> 00:24:25,679
when it is uh saved on an immutable

00:24:25,039 --> 00:24:28,480
store

00:24:25,679 --> 00:24:29,919
and what's an immutable store well again

00:24:28,480 --> 00:24:31,600
it's up to the

00:24:29,919 --> 00:24:33,760
it's up to you to figure what this is

00:24:31,600 --> 00:24:35,200
but for instance a simple example would

00:24:33,760 --> 00:24:38,559
be to have

00:24:35,200 --> 00:24:40,640
um an s3 bucket that

00:24:38,559 --> 00:24:43,360
you know has only write permissions does

00:24:40,640 --> 00:24:44,880
not have update or delete

00:24:43,360 --> 00:24:47,120
and then automatically that becomes you

00:24:44,880 --> 00:24:50,320
know kind of an audit trail because

00:24:47,120 --> 00:24:51,760
the store now is immutable but you know

00:24:50,320 --> 00:24:52,880
all of this is going to be dictated

00:24:51,760 --> 00:24:56,000
based on your infosec

00:24:52,880 --> 00:25:00,640
policies and your mileage may vary

00:24:56,000 --> 00:25:02,880
i'm coming from

00:25:00,640 --> 00:25:04,240
uh security aware business and that is

00:25:02,880 --> 00:25:06,480
why the reason why i created

00:25:04,240 --> 00:25:07,520
locality that's the reason why i dived

00:25:06,480 --> 00:25:10,559
so much deep into

00:25:07,520 --> 00:25:13,440
logging and this is important for

00:25:10,559 --> 00:25:15,200
security aware applications and when

00:25:13,440 --> 00:25:15,600
you're in that kind of regime it might

00:25:15,200 --> 00:25:18,799
be

00:25:15,600 --> 00:25:22,320
uh required that you also log the

00:25:18,799 --> 00:25:26,080
reads so uh you know this user access

00:25:22,320 --> 00:25:29,440
this information that might also be

00:25:26,080 --> 00:25:30,799
important for your compliance

00:25:29,440 --> 00:25:33,840
requirements

00:25:30,799 --> 00:25:35,520
and naturally to easily capture what

00:25:33,840 --> 00:25:37,520
needs to go where

00:25:35,520 --> 00:25:40,640
like what needs to become an audit trail

00:25:37,520 --> 00:25:42,720
and what it pertains to security

00:25:40,640 --> 00:25:44,240
the flags had you know we talked about

00:25:42,720 --> 00:25:47,520
the boolean flags

00:25:44,240 --> 00:25:51,039
before now one thing to be aware of

00:25:47,520 --> 00:25:53,840
is personal identifiable information

00:25:51,039 --> 00:25:54,880
and considering uh european and

00:25:53,840 --> 00:25:58,559
california's

00:25:54,880 --> 00:25:59,279
privacy laws and considering the fact

00:25:58,559 --> 00:26:01,600
that it's

00:25:59,279 --> 00:26:03,360
most likely the case that your logs are

00:26:01,600 --> 00:26:06,480
going to be aggregated on a third party

00:26:03,360 --> 00:26:07,760
like locally or something else and you

00:26:06,480 --> 00:26:11,279
cannot

00:26:07,760 --> 00:26:14,320
guarantee you know the safety of those

00:26:11,279 --> 00:26:17,360
logs or the retention or

00:26:14,320 --> 00:26:18,480
the fact that they remain on sovereign

00:26:17,360 --> 00:26:20,080
land like

00:26:18,480 --> 00:26:21,520
the data remains in europe and doesn't

00:26:20,080 --> 00:26:24,960
travel across

00:26:21,520 --> 00:26:28,559
continents so if you're not sure

00:26:24,960 --> 00:26:31,200
tokenize the data basically so convert

00:26:28,559 --> 00:26:32,240
emails ids and names into a hash and md5

00:26:31,200 --> 00:26:36,159
string

00:26:32,240 --> 00:26:39,600
and work work like that

00:26:36,159 --> 00:26:42,720
so that was the theory now let's

00:26:39,600 --> 00:26:44,240
go into uh the

00:26:42,720 --> 00:26:46,799
logging applications and let's start

00:26:44,240 --> 00:26:49,840
with the deep dive on locality

00:26:46,799 --> 00:26:51,760
an application i authored because of

00:26:49,840 --> 00:26:54,320
the requirements that i had had a very

00:26:51,760 --> 00:26:56,640
high uh

00:26:54,320 --> 00:26:58,159
at the very demanding security wise

00:26:56,640 --> 00:27:01,279
business

00:26:58,159 --> 00:27:03,919
so this locality location is a versatile

00:27:01,279 --> 00:27:06,640
and extensible logger for node.js what

00:27:03,919 --> 00:27:09,600
does it do differently well

00:27:06,640 --> 00:27:11,760
it prints log messages naturally that's

00:27:09,600 --> 00:27:14,000
a standard thing

00:27:11,760 --> 00:27:16,720
but aside from that it can extend the

00:27:14,000 --> 00:27:19,679
login schema to fit your needs

00:27:16,720 --> 00:27:20,640
it has built-in overrideable serializers

00:27:19,679 --> 00:27:22,880
i'm going to see

00:27:20,640 --> 00:27:24,399
exactly what those are you can also have

00:27:22,880 --> 00:27:27,840
custom serializers

00:27:24,399 --> 00:27:29,360
it supports middleware like express does

00:27:27,840 --> 00:27:31,200
like true middleware and you have

00:27:29,360 --> 00:27:34,159
multiple middleware where

00:27:31,200 --> 00:27:35,600
you can transform the log or you can

00:27:34,159 --> 00:27:37,039
perform different actions

00:27:35,600 --> 00:27:39,200
and again we're going to see this in

00:27:37,039 --> 00:27:41,840
more detail

00:27:39,200 --> 00:27:43,679
uh locality enables full manipulation of

00:27:41,840 --> 00:27:45,520
the output so you can

00:27:43,679 --> 00:27:48,080
rewrite the entire schema to fit your

00:27:45,520 --> 00:27:50,799
needs remember that is a requirement

00:27:48,080 --> 00:27:52,159
that all systems uh log with the same

00:27:50,799 --> 00:27:55,600
schema

00:27:52,159 --> 00:27:58,559
and that is what is the case right here

00:27:55,600 --> 00:27:59,039
it supports asynchronous operation which

00:27:58,559 --> 00:28:01,120
is

00:27:59,039 --> 00:28:02,480
a unique feature of locality and we're

00:28:01,120 --> 00:28:05,919
gonna see why this is

00:28:02,480 --> 00:28:07,200
powerful and very useful and locality

00:28:05,919 --> 00:28:09,760
can also be

00:28:07,200 --> 00:28:10,640
used on open source libraries and

00:28:09,760 --> 00:28:13,679
composed

00:28:10,640 --> 00:28:15,520
on the root project which is something

00:28:13,679 --> 00:28:18,799
that has an open source

00:28:15,520 --> 00:28:20,480
contributor i have suffered with

00:28:18,799 --> 00:28:22,080
for a very long time and going to see

00:28:20,480 --> 00:28:25,279
why

00:28:22,080 --> 00:28:28,399
and locality also has some helping

00:28:25,279 --> 00:28:29,919
features that automatically detects the

00:28:28,399 --> 00:28:32,000
module

00:28:29,919 --> 00:28:34,880
filename and path that the log

00:28:32,000 --> 00:28:34,880
originated from

00:28:34,960 --> 00:28:42,559
so let's see an expanded

00:28:39,120 --> 00:28:44,960
log of logality so you can see the

00:28:42,559 --> 00:28:46,080
level is expressed both as a string and

00:28:44,960 --> 00:28:48,000
as a number

00:28:46,080 --> 00:28:51,360
they both have their use cases and they

00:28:48,000 --> 00:28:53,679
are both important to exist

00:28:51,360 --> 00:28:55,679
you have the message here and it's

00:28:53,679 --> 00:28:57,919
either an event or a context that's

00:28:55,679 --> 00:28:59,840
going to be populated depending on what

00:28:57,919 --> 00:29:03,039
triggered and what

00:28:59,840 --> 00:29:05,600
the data is of the logger

00:29:03,039 --> 00:29:07,120
of the log that is being produced and as

00:29:05,600 --> 00:29:11,200
you can see here we have

00:29:07,120 --> 00:29:15,520
the application name we have the source

00:29:11,200 --> 00:29:18,640
where this log originated from

00:29:15,520 --> 00:29:19,520
and system information is automatically

00:29:18,640 --> 00:29:22,480
also

00:29:19,520 --> 00:29:23,600
populated all of this is automatically

00:29:22,480 --> 00:29:26,080
detected

00:29:23,600 --> 00:29:28,399
by locality for you you don't have to do

00:29:26,080 --> 00:29:28,399
anything

00:29:29,679 --> 00:29:35,840
previously that was a json log

00:29:32,799 --> 00:29:39,279
expanded this is the pretty print

00:29:35,840 --> 00:29:42,960
output the logging level uses the

00:29:39,279 --> 00:29:43,919
syslog rfc system for severity levels so

00:29:42,960 --> 00:29:48,559
we start from

00:29:43,919 --> 00:29:51,760
debug info notice up to emergency

00:29:48,559 --> 00:29:54,799
pretty straightforward and this is

00:29:51,760 --> 00:29:58,240
how this is the basic signature of

00:29:54,799 --> 00:30:01,039
uh locality so you have the locality

00:29:58,240 --> 00:30:01,600
instance and then the methods are based

00:30:01,039 --> 00:30:03,679
on

00:30:01,600 --> 00:30:04,880
the severity of the log so this in this

00:30:03,679 --> 00:30:06,799
case that's info

00:30:04,880 --> 00:30:08,080
the first argument is the message and

00:30:06,799 --> 00:30:10,240
the second argument is

00:30:08,080 --> 00:30:12,080
any data you want to pass through this

00:30:10,240 --> 00:30:15,200
is basically the metadata

00:30:12,080 --> 00:30:18,640
and here is where serializers

00:30:15,200 --> 00:30:20,799
kick in and what serializers do

00:30:18,640 --> 00:30:22,240
is that they look for a specific key

00:30:20,799 --> 00:30:24,720
like the user key

00:30:22,240 --> 00:30:26,080
and then they take the value of that key

00:30:24,720 --> 00:30:29,360
which is the udl in this

00:30:26,080 --> 00:30:32,320
instance which is uh

00:30:29,360 --> 00:30:34,960
initials for user data object and

00:30:32,320 --> 00:30:38,080
serializes it in a way that

00:30:34,960 --> 00:30:40,960
that makes sense for logging

00:30:38,080 --> 00:30:42,559
so for instance this is a built-in

00:30:40,960 --> 00:30:44,320
serializer and this is a user

00:30:42,559 --> 00:30:47,679
similarizer

00:30:44,320 --> 00:30:51,679
whenever you input a user

00:30:47,679 --> 00:30:54,480
object with a user key with an object

00:30:51,679 --> 00:30:55,039
on the building serializer this is what

00:30:54,480 --> 00:30:59,679
it will do

00:30:55,039 --> 00:30:59,679
it will extract the id and the email

00:30:59,840 --> 00:31:02,159
and

00:31:03,279 --> 00:31:06,880
there are a couple more built-in

00:31:05,600 --> 00:31:09,120
serializers

00:31:06,880 --> 00:31:10,159
you have a serializer for javascript

00:31:09,120 --> 00:31:13,519
errors

00:31:10,159 --> 00:31:15,519
so if you pass an exception locality

00:31:13,519 --> 00:31:16,159
will automatically break it out into

00:31:15,519 --> 00:31:18,000
name

00:31:16,159 --> 00:31:19,200
message and then it will give you a very

00:31:18,000 --> 00:31:24,640
nice stack trace

00:31:19,200 --> 00:31:27,600
that is serialized without new lines

00:31:24,640 --> 00:31:29,760
and finally there is the express

00:31:27,600 --> 00:31:32,799
serializer where you pass the request

00:31:29,760 --> 00:31:34,880
object of express and

00:31:32,799 --> 00:31:36,799
you get some very nice information out

00:31:34,880 --> 00:31:39,440
of that already

00:31:36,799 --> 00:31:39,440
out of the box

00:31:39,919 --> 00:31:44,559
you can have your own custom serializers

00:31:41,840 --> 00:31:48,000
say you are an eshop

00:31:44,559 --> 00:31:51,120
e-commerce website and you have an order

00:31:48,000 --> 00:31:51,760
and you know naturally all of these

00:31:51,120 --> 00:31:54,559
objects

00:31:51,760 --> 00:31:55,760
are their schema is standardized and

00:31:54,559 --> 00:31:59,120
that's

00:31:55,760 --> 00:32:01,440
the whole you know convention

00:31:59,120 --> 00:32:03,440
here that the order objects don't have

00:32:01,440 --> 00:32:04,880
the same amount of the time

00:32:03,440 --> 00:32:07,200
and it should throughout your

00:32:04,880 --> 00:32:10,480
application so

00:32:07,200 --> 00:32:12,880
this is serializing the the order object

00:32:10,480 --> 00:32:15,760
so we're being more explicit here this

00:32:12,880 --> 00:32:19,679
is another id so we take the id

00:32:15,760 --> 00:32:21,679
this is the skuid so we take the sku

00:32:19,679 --> 00:32:23,600
we can perform transformations like we

00:32:21,679 --> 00:32:25,039
can have multiplication between the

00:32:23,600 --> 00:32:25,760
fields we can do pretty much anything

00:32:25,039 --> 00:32:28,880
this is

00:32:25,760 --> 00:32:30,159
plain javascript here so the next time

00:32:28,880 --> 00:32:33,200
you

00:32:30,159 --> 00:32:35,919
log anything

00:32:33,200 --> 00:32:37,120
and you pass an order item under the

00:32:35,919 --> 00:32:39,039
order key

00:32:37,120 --> 00:32:40,640
this serializer is going to run and

00:32:39,039 --> 00:32:43,679
properly format

00:32:40,640 --> 00:32:46,720
the object for you

00:32:43,679 --> 00:32:47,919
now you are also free to overwrite the

00:32:46,720 --> 00:32:50,480
building serializers

00:32:47,919 --> 00:32:52,159
so if your user data object doesn't have

00:32:50,480 --> 00:32:55,120
id and email but it has

00:32:52,159 --> 00:32:57,519
different names that's totally okay in

00:32:55,120 --> 00:33:00,000
this particular example we are

00:32:57,519 --> 00:33:00,799
adding a first name and the last name on

00:33:00,000 --> 00:33:04,000
top of the id

00:33:00,799 --> 00:33:06,720
and the email so whenever we pass the

00:33:04,000 --> 00:33:09,120
user object this is how it gets

00:33:06,720 --> 00:33:11,200
serialized

00:33:09,120 --> 00:33:12,960
now let's look into middleware and as

00:33:11,200 --> 00:33:16,000
i've said before midway

00:33:12,960 --> 00:33:18,399
are a very powerful feature of locality

00:33:16,000 --> 00:33:21,919
it allows you to interject

00:33:18,399 --> 00:33:24,240
business logic in the logging lifecycle

00:33:21,919 --> 00:33:25,840
so the the usage is pretty

00:33:24,240 --> 00:33:27,919
straightforward you have a use

00:33:25,840 --> 00:33:29,279
function and then your callback the

00:33:27,919 --> 00:33:31,679
callback

00:33:29,279 --> 00:33:33,120
receives one argument which is the log

00:33:31,679 --> 00:33:35,279
context analog context

00:33:33,120 --> 00:33:38,000
is the entire log message represented in

00:33:35,279 --> 00:33:41,120
a native.js object

00:33:38,000 --> 00:33:42,480
which is mutable so you can you know

00:33:41,120 --> 00:33:45,679
delete certain

00:33:42,480 --> 00:33:47,600
fields you can change them shift them

00:33:45,679 --> 00:33:49,120
you can do whatever you want basically

00:33:47,600 --> 00:33:52,000
with the log message

00:33:49,120 --> 00:33:54,480
before it goes downstream to the output

00:33:52,000 --> 00:33:54,480
functions

00:33:55,120 --> 00:33:59,039
and here is where

00:34:01,120 --> 00:34:05,360
locality really excels at which is it

00:34:03,840 --> 00:34:07,360
has this unique feature

00:34:05,360 --> 00:34:09,119
that with a single streets during

00:34:07,360 --> 00:34:11,919
instantiation of

00:34:09,119 --> 00:34:13,200
locality you can make it operate

00:34:11,919 --> 00:34:15,040
asynchronously

00:34:13,200 --> 00:34:16,480
and that means that all of the

00:34:15,040 --> 00:34:18,720
middleware

00:34:16,480 --> 00:34:20,079
are operating asynchronously and that

00:34:18,720 --> 00:34:23,599
enables some very

00:34:20,079 --> 00:34:26,159
very interesting um applications

00:34:23,599 --> 00:34:27,760
where you can now start distributing

00:34:26,159 --> 00:34:30,159
your log messages

00:34:27,760 --> 00:34:31,760
to multiple endpoints so for instance

00:34:30,159 --> 00:34:35,119
you can see here

00:34:31,760 --> 00:34:36,079
that we perform a database right of the

00:34:35,119 --> 00:34:39,200
log

00:34:36,079 --> 00:34:41,599
and for instance this could be there

00:34:39,200 --> 00:34:43,520
could be a conditional here checking for

00:34:41,599 --> 00:34:44,960
a boolean the audit boolean that we

00:34:43,520 --> 00:34:47,919
talked about before

00:34:44,960 --> 00:34:49,599
and if the audit boolean is true then

00:34:47,919 --> 00:34:51,679
you know i want you to write this on the

00:34:49,599 --> 00:34:52,560
database as well and what this may be is

00:34:51,679 --> 00:34:55,760
up to you again

00:34:52,560 --> 00:34:58,800
this is just you know showcase or

00:34:55,760 --> 00:35:01,920
if it's a security

00:34:58,800 --> 00:35:02,320
kind of log then i need you to send that

00:35:01,920 --> 00:35:05,920
log

00:35:02,320 --> 00:35:09,440
on my slide channel as well so you can

00:35:05,920 --> 00:35:12,640
have all any sort of business logic here

00:35:09,440 --> 00:35:16,400
interjecting into your log messages

00:35:12,640 --> 00:35:18,480
and i remember that these are very

00:35:16,400 --> 00:35:19,839
nicely formatted messages as we have

00:35:18,480 --> 00:35:21,520
serialized them

00:35:19,839 --> 00:35:23,680
in the previous step right serializers

00:35:21,520 --> 00:35:27,280
come before middleware

00:35:23,680 --> 00:35:28,720
in the life cycle of the log

00:35:27,280 --> 00:35:31,440
naturally that means that you're gonna

00:35:28,720 --> 00:35:34,240
have to invoke all of log messages

00:35:31,440 --> 00:35:34,240
with the await

00:35:35,599 --> 00:35:39,359
yeah you're going to have to because

00:35:37,520 --> 00:35:43,440
they execute a sequence link

00:35:39,359 --> 00:35:46,560
it's required that you wait for them

00:35:43,440 --> 00:35:46,960
the keyword is a way to make sure that

00:35:46,560 --> 00:35:50,720
the

00:35:46,960 --> 00:35:55,359
everything executes properly and

00:35:50,720 --> 00:35:59,520
last but not least is that

00:35:55,359 --> 00:36:02,560
you can interject on the master outputs

00:35:59,520 --> 00:36:04,560
so this is how locality is instantiated

00:36:02,560 --> 00:36:05,760
we require the library right here and

00:36:04,560 --> 00:36:08,240
then we get an instance

00:36:05,760 --> 00:36:10,560
which accepts a single argument an

00:36:08,240 --> 00:36:12,800
object of configurations

00:36:10,560 --> 00:36:14,320
we pass the app name we say whether we

00:36:12,800 --> 00:36:15,040
want to pretty print or not we say

00:36:14,320 --> 00:36:16,800
whether with

00:36:15,040 --> 00:36:20,160
this instance is a synchronous or node

00:36:16,800 --> 00:36:23,839
we just saw the example of asynchronous

00:36:20,160 --> 00:36:26,560
and uh then we can define

00:36:23,839 --> 00:36:28,000
and overwrite the output and basically

00:36:26,560 --> 00:36:29,520
what happens here is that we are

00:36:28,000 --> 00:36:31,680
overwriting because

00:36:29,520 --> 00:36:34,480
as long as we are not returning the log

00:36:31,680 --> 00:36:36,640
context from this function

00:36:34,480 --> 00:36:39,200
locality will not continue any further

00:36:36,640 --> 00:36:40,560
action if we return to local context in

00:36:39,200 --> 00:36:43,359
this function

00:36:40,560 --> 00:36:45,359
then locality would proceed and and use

00:36:43,359 --> 00:36:46,960
its own output functions but now since

00:36:45,359 --> 00:36:49,119
we

00:36:46,960 --> 00:36:51,040
don't do that locality will take no

00:36:49,119 --> 00:36:52,560
further action because this is a signal

00:36:51,040 --> 00:36:54,560
to locality that

00:36:52,560 --> 00:36:55,599
do not plug this with taking care of

00:36:54,560 --> 00:36:58,079
that and

00:36:55,599 --> 00:37:01,040
you don't need to bother yourself with

00:36:58,079 --> 00:37:01,040
outputting anything

00:37:02,160 --> 00:37:06,000
and that's the last feature that i

00:37:04,160 --> 00:37:07,440
talked to you about which is locality

00:37:06,000 --> 00:37:09,200
can be used in

00:37:07,440 --> 00:37:11,520
libraries so this is a third party

00:37:09,200 --> 00:37:14,160
library imagine this is mongoose or this

00:37:11,520 --> 00:37:15,920
is equalized but you're requiring and

00:37:14,160 --> 00:37:19,520
sqlize then

00:37:15,920 --> 00:37:22,800
exposes the locality instance

00:37:19,520 --> 00:37:26,480
which you pipe

00:37:22,800 --> 00:37:28,560
to your own instance and then

00:37:26,480 --> 00:37:29,520
with the use of middleware as we saw you

00:37:28,560 --> 00:37:32,320
can

00:37:29,520 --> 00:37:34,000
intercept the log messages coming from

00:37:32,320 --> 00:37:36,240
mongoose or sqlize

00:37:34,000 --> 00:37:37,839
and apply whatever business logic makes

00:37:36,240 --> 00:37:40,560
sense to you

00:37:37,839 --> 00:37:41,920
this has been a very thorny issue

00:37:40,560 --> 00:37:44,240
because

00:37:41,920 --> 00:37:45,119
you know major libraries require some

00:37:44,240 --> 00:37:46,720
sort of logging

00:37:45,119 --> 00:37:49,359
so that you know and understand what's

00:37:46,720 --> 00:37:50,640
going on and the only way

00:37:49,359 --> 00:37:53,119
for logging libraries to pass

00:37:50,640 --> 00:37:54,079
information upstream to the application

00:37:53,119 --> 00:37:56,079
required in them

00:37:54,079 --> 00:37:57,280
is through errors and that is a very

00:37:56,079 --> 00:38:01,359
brutal

00:37:57,280 --> 00:38:04,640
method right so the

00:38:01,359 --> 00:38:06,560
legality let's have a quick look at

00:38:04,640 --> 00:38:08,640
uh how lugardi compares to all the other

00:38:06,560 --> 00:38:10,640
popular libraries out there

00:38:08,640 --> 00:38:12,000
and i've chosen three of the most

00:38:10,640 --> 00:38:17,040
popular ones winston

00:38:12,000 --> 00:38:17,040
with 6 million downloads per week pino

00:38:17,280 --> 00:38:21,920
pinot has been hosted a lot of times by

00:38:19,599 --> 00:38:23,760
this meetup

00:38:21,920 --> 00:38:27,040
and probably are very familiar with it

00:38:23,760 --> 00:38:30,320
and bunyan was one of the classic

00:38:27,040 --> 00:38:33,839
vloggers of node.js

00:38:30,320 --> 00:38:33,839
in the past so

00:38:34,079 --> 00:38:40,320
all of the libraries output has json

00:38:36,560 --> 00:38:42,640
which is very important and very nice

00:38:40,320 --> 00:38:44,079
all of them pretty print except boonian

00:38:42,640 --> 00:38:47,440
which requires another

00:38:44,079 --> 00:38:50,720
library to transform the json output and

00:38:47,440 --> 00:38:52,000
3d print it so it's not included custom

00:38:50,720 --> 00:38:55,040
log levels

00:38:52,000 --> 00:38:57,040
is not supported by locality and bunion

00:38:55,040 --> 00:38:59,680
but i guess if you're really determined

00:38:57,040 --> 00:39:02,640
with custom block levels you can

00:38:59,680 --> 00:39:04,640
intercept the master output and

00:39:02,640 --> 00:39:07,359
transpose

00:39:04,640 --> 00:39:09,200
localities levels into whatever you see

00:39:07,359 --> 00:39:12,839
fit

00:39:09,200 --> 00:39:14,800
serializers winston doesn't have

00:39:12,839 --> 00:39:17,440
serializers bunion does

00:39:14,800 --> 00:39:18,640
pinot kind of has it gives it a check

00:39:17,440 --> 00:39:23,119
mark

00:39:18,640 --> 00:39:27,280
because it it's got the same concept

00:39:23,119 --> 00:39:29,520
middleware locality has material

00:39:27,280 --> 00:39:31,680
as we've seen winston has milwaukee

00:39:29,520 --> 00:39:33,599
albeit in a very complicated way

00:39:31,680 --> 00:39:34,880
that's a general remark around winston

00:39:33,599 --> 00:39:36,800
is that

00:39:34,880 --> 00:39:39,119
it's fairly complicated as a library to

00:39:36,800 --> 00:39:41,520
work with bunion doesn't have

00:39:39,119 --> 00:39:44,000
middleware and pino barely has midware

00:39:41,520 --> 00:39:47,040
in the sense that it only has

00:39:44,000 --> 00:39:48,720
it only supports a single mirror and

00:39:47,040 --> 00:39:51,280
so you can't you cannot have multiple

00:39:48,720 --> 00:39:54,240
middleware with pino

00:39:51,280 --> 00:39:55,119
mutating json schema we've seen why this

00:39:54,240 --> 00:39:57,680
is important

00:39:55,119 --> 00:39:58,880
and why this is a core requirement for

00:39:57,680 --> 00:40:02,320
the logging libraries

00:39:58,880 --> 00:40:06,319
because you cannot get

00:40:02,320 --> 00:40:06,880
you should get married with the schema

00:40:06,319 --> 00:40:09,200
that

00:40:06,880 --> 00:40:11,280
the authors propose right because then

00:40:09,200 --> 00:40:13,280
there's another library on go

00:40:11,280 --> 00:40:14,960
that has a different schema and you need

00:40:13,280 --> 00:40:16,960
to have parity between the schemas

00:40:14,960 --> 00:40:19,359
so uh that's only supported by instant

00:40:16,960 --> 00:40:20,720
and locality

00:40:19,359 --> 00:40:22,839
output destination you can choose

00:40:20,720 --> 00:40:24,000
another destination on all of the

00:40:22,839 --> 00:40:26,800
libraries

00:40:24,000 --> 00:40:28,319
mutate the output the master output

00:40:26,800 --> 00:40:31,040
function that we talked about this is

00:40:28,319 --> 00:40:34,160
only possible on missile and legality

00:40:31,040 --> 00:40:35,440
a sequence operation as we've seen is

00:40:34,160 --> 00:40:39,599
only available with

00:40:35,440 --> 00:40:42,480
locality file name detection again

00:40:39,599 --> 00:40:44,160
it's a locality on the feature speed

00:40:42,480 --> 00:40:46,960
optimization is clearly

00:40:44,160 --> 00:40:48,319
uh pino is the winner here that's the

00:40:46,960 --> 00:40:50,960
entire value prop

00:40:48,319 --> 00:40:53,119
of uh pino and the reason why it was it

00:40:50,960 --> 00:40:56,800
was built around it's it's

00:40:53,119 --> 00:40:56,800
a very fast logger that's

00:40:57,280 --> 00:41:00,640
you know that's the reason why you use

00:40:59,440 --> 00:41:03,920
pino

00:41:00,640 --> 00:41:06,240
and library composibility is only

00:41:03,920 --> 00:41:08,560
available in locality

00:41:06,240 --> 00:41:10,640
all the other libraries have a system of

00:41:08,560 --> 00:41:16,400
producing child loggers

00:41:10,640 --> 00:41:16,400
which only works on the same application

00:41:17,200 --> 00:41:23,599
so to recap logging is important

00:41:20,960 --> 00:41:26,000
for uh debugging and troubleshooting

00:41:23,599 --> 00:41:28,640
security and auditing

00:41:26,000 --> 00:41:29,359
excel is there performance monitoring

00:41:28,640 --> 00:41:32,720
less so

00:41:29,359 --> 00:41:34,480
but it can help common schema

00:41:32,720 --> 00:41:35,839
and appropriate logs can make all the

00:41:34,480 --> 00:41:39,520
difference

00:41:35,839 --> 00:41:42,319
in your entire infrastructure and

00:41:39,520 --> 00:41:44,319
you have many choices for a logger

00:41:42,319 --> 00:41:48,960
choose what is appropriate for you

00:41:44,319 --> 00:41:52,560
not what is more shinier

00:41:48,960 --> 00:41:55,040
and that's all since i don't have a live

00:41:52,560 --> 00:41:58,240
crowd i'm going to upload on myself

00:41:55,040 --> 00:42:00,640
thank you very much and

00:41:58,240 --> 00:42:03,839
i am open to any questions that you

00:42:00,640 --> 00:42:03,839
might have

00:42:05,920 --> 00:42:08,319
harris

00:42:13,520 --> 00:42:18,800
yeah that last slide because i've seen

00:42:17,040 --> 00:42:21,760
it before

00:42:18,800 --> 00:42:22,160
uh for me it's the key slide from the

00:42:21,760 --> 00:42:25,200
whole

00:42:22,160 --> 00:42:28,319
talk where people can can

00:42:25,200 --> 00:42:32,319
see why

00:42:28,319 --> 00:42:36,079
you know it's so important to use

00:42:32,319 --> 00:42:39,680
and i mean people just have to get a

00:42:36,079 --> 00:42:42,560
coffee or a beer or thanos

00:42:39,680 --> 00:42:44,960
because he helps them to find out what

00:42:42,560 --> 00:42:47,119
is the the best solution

00:42:44,960 --> 00:42:48,160
and in greece probably they have to get

00:42:47,119 --> 00:42:49,920
him a coffee

00:42:48,160 --> 00:42:51,760
because that's what we drink most of the

00:42:49,920 --> 00:42:55,839
time and

00:42:51,760 --> 00:42:58,800
but yeah i mean that was a good talk and

00:42:55,839 --> 00:42:59,119
let's see if there any questions on on

00:42:58,800 --> 00:43:02,880
on

00:42:59,119 --> 00:43:02,880
youtube and

00:43:06,079 --> 00:43:09,599
we're waiting and

00:43:07,820 --> 00:43:14,319
[Music]

00:43:09,599 --> 00:43:14,319
how did you come up with building this

00:43:14,560 --> 00:43:17,680
building locality and

00:43:18,160 --> 00:43:22,880
so the requirements were from the

00:43:21,359 --> 00:43:26,160
security aware business

00:43:22,880 --> 00:43:28,560
that i was working with and we

00:43:26,160 --> 00:43:28,560
needed

00:43:30,400 --> 00:43:34,160
two requirements that basically

00:43:34,240 --> 00:43:40,560
could not be done by any package

00:43:37,760 --> 00:43:43,280
that i completely transform the schema

00:43:40,560 --> 00:43:44,720
so it meets a certain

00:43:43,280 --> 00:43:46,240
you know it meets a certain schema that

00:43:44,720 --> 00:43:48,079
we had in the infrastructure that would

00:43:46,240 --> 00:43:51,200
work with all of the

00:43:48,079 --> 00:43:53,599
stacks across the infrastructure

00:43:51,200 --> 00:43:54,319
and the other requirement was being able

00:43:53,599 --> 00:43:58,960
to

00:43:54,319 --> 00:44:01,680
flag and store audit log trails

00:43:58,960 --> 00:44:05,599
as they happened so you have such

00:44:01,680 --> 00:44:05,599
well-structured information

00:44:06,000 --> 00:44:10,640
it made sense to leverage that in

00:44:08,880 --> 00:44:14,079
creating the audit logs versus

00:44:10,640 --> 00:44:15,760
building a different uh service

00:44:14,079 --> 00:44:17,839
that basically did the same thing has

00:44:15,760 --> 00:44:19,280
serialized information and stored in a

00:44:17,839 --> 00:44:22,560
different data store

00:44:19,280 --> 00:44:23,440
okay and then and i am probably a bit of

00:44:22,560 --> 00:44:26,480
repetition but

00:44:23,440 --> 00:44:28,319
it's good to know um how was the thought

00:44:26,480 --> 00:44:31,119
of

00:44:28,319 --> 00:44:33,839
using these creating a something from

00:44:31,119 --> 00:44:37,119
scratch rather than using something that

00:44:33,839 --> 00:44:38,880
already exists how did you take that

00:44:37,119 --> 00:44:41,839
decision

00:44:38,880 --> 00:44:42,480
and what was right that chart that you

00:44:41,839 --> 00:44:44,880
saw was

00:44:42,480 --> 00:44:46,640
with them all the different systems that

00:44:44,880 --> 00:44:48,160
they didn't have something

00:44:46,640 --> 00:44:49,680
that made you build something from

00:44:48,160 --> 00:44:53,280
scratch

00:44:49,680 --> 00:44:56,640
yeah i mean that goes back to the matrix

00:44:53,280 --> 00:44:57,839
this that i had with features and the

00:44:56,640 --> 00:45:02,000
reality is that

00:44:57,839 --> 00:45:05,680
logality didn't wasn't built in a day

00:45:02,000 --> 00:45:09,119
so it started like four years ago

00:45:05,680 --> 00:45:13,119
as a very simple uh way to log a schema

00:45:09,119 --> 00:45:14,960
and provide a pipe to save the data on a

00:45:13,119 --> 00:45:19,040
different endpoint as well

00:45:14,960 --> 00:45:20,880
it was very very you know custom made

00:45:19,040 --> 00:45:23,920
and

00:45:20,880 --> 00:45:26,720
very coupled and took

00:45:23,920 --> 00:45:29,280
the course of four years to make it into

00:45:26,720 --> 00:45:31,920
a library where everything is decoupled

00:45:29,280 --> 00:45:32,560
and it's more of a generic use rather

00:45:31,920 --> 00:45:35,440
than

00:45:32,560 --> 00:45:37,119
you know verticalized structured only

00:45:35,440 --> 00:45:40,720
for our use case

00:45:37,119 --> 00:45:42,319
okay so it can be used now much easier

00:45:40,720 --> 00:45:44,170
than all the other

00:45:42,319 --> 00:45:47,219
different solutions like

00:45:44,170 --> 00:45:47,219
[Music]

00:45:47,440 --> 00:45:51,359
well i wouldn't say easier but it's like

00:45:49,920 --> 00:45:53,440
yeah it's more of a generic

00:45:51,359 --> 00:45:56,079
logger right now rather than a specific

00:45:53,440 --> 00:45:58,560
logger to our particular needs

00:45:56,079 --> 00:46:00,160
and it just so happens that out of that

00:45:58,560 --> 00:46:00,480
you know some interesting features came

00:46:00,160 --> 00:46:04,319
out

00:46:00,480 --> 00:46:04,319
like the middleware where you can have

00:46:05,040 --> 00:46:09,839
intercepting uh the live cycle of a log

00:46:08,319 --> 00:46:12,000
and the asynchronous operation that

00:46:09,839 --> 00:46:14,240
allows you to pipe

00:46:12,000 --> 00:46:15,599
the log messages through different uh

00:46:14,240 --> 00:46:20,240
mediums like slack

00:46:15,599 --> 00:46:20,240
or you know location data store

00:46:20,720 --> 00:46:27,359
no that's a good feature um

00:46:23,839 --> 00:46:28,000
no that's very good and and how have you

00:46:27,359 --> 00:46:30,720
seen the

00:46:28,000 --> 00:46:32,400
the usage so far have they been using

00:46:30,720 --> 00:46:35,599
intellect

00:46:32,400 --> 00:46:38,800
you know some projects that have it uh

00:46:35,599 --> 00:46:41,599
to to be frank i'm not monitoring it but

00:46:38,800 --> 00:46:42,000
we can check it right now yeah it will

00:46:41,599 --> 00:46:44,960
be good

00:46:42,000 --> 00:46:46,160
for people to know where it's being used

00:46:44,960 --> 00:46:57,760
in some

00:46:46,160 --> 00:46:59,490
different kind of cases

00:46:57,760 --> 00:47:00,800
i have an open source uh

00:46:59,490 --> 00:47:03,839
[Music]

00:47:00,800 --> 00:47:08,560
library that is linked from locality

00:47:03,839 --> 00:47:08,560
that uses locality

00:47:08,720 --> 00:47:12,880
and uh so that people can see how it's

00:47:11,040 --> 00:47:16,079
actually using production

00:47:12,880 --> 00:47:18,079
the usage is uh

00:47:16,079 --> 00:47:19,359
rather small but it's not something that

00:47:18,079 --> 00:47:22,880
i've been actively

00:47:19,359 --> 00:47:26,160
uh promoting as i see now on nbm

00:47:22,880 --> 00:47:29,359
it is at 55 downloads per week

00:47:26,160 --> 00:47:31,119
so that's very smooth very small

00:47:29,359 --> 00:47:32,400
but with the help of your meetup maybe

00:47:31,119 --> 00:47:35,440
we can raise them

00:47:32,400 --> 00:47:38,640
and you're looking for contributors and

00:47:35,440 --> 00:47:39,760
people to help you to improve are there

00:47:38,640 --> 00:47:41,839
anything that

00:47:39,760 --> 00:47:44,400
in particular that you are you that you

00:47:41,839 --> 00:47:47,599
are looking in terms of help

00:47:44,400 --> 00:47:50,720
i am looking i'm not looking

00:47:47,599 --> 00:47:53,359
for any help in terms of development i

00:47:50,720 --> 00:47:54,400
i'm mostly looking for participation in

00:47:53,359 --> 00:47:57,440
the project

00:47:54,400 --> 00:47:59,520
people using it people coming out with

00:47:57,440 --> 00:48:02,640
feature requests or issues

00:47:59,520 --> 00:48:05,760
and moving the library forwards

00:48:02,640 --> 00:48:09,599
okay now that's great it's good to know

00:48:05,760 --> 00:48:10,160
okay yeah um so yeah so it can be used

00:48:09,599 --> 00:48:12,720
for uh

00:48:10,160 --> 00:48:14,800
for uh both back end and front end right

00:48:12,720 --> 00:48:17,119
because you said uh

00:48:14,800 --> 00:48:18,240
is it is it i believe so i haven't

00:48:17,119 --> 00:48:20,960
really uh

00:48:18,240 --> 00:48:22,160
tested it on the front end but uh i

00:48:20,960 --> 00:48:26,480
intend on doing that

00:48:22,160 --> 00:48:29,440
fairly soon and if anything needs to be

00:48:26,480 --> 00:48:30,079
worked out i will do it on spots okay

00:48:29,440 --> 00:48:32,960
that's very

00:48:30,079 --> 00:48:34,559
that's perfect and there are no

00:48:32,960 --> 00:48:37,599
questions on the

00:48:34,559 --> 00:48:41,119
on youtube um but um

00:48:37,599 --> 00:48:43,839
we will be checking the defeat because

00:48:41,119 --> 00:48:45,200
people can watch it after this and when

00:48:43,839 --> 00:48:47,440
they have time

00:48:45,200 --> 00:48:50,240
yep yeah i will check it too and answer

00:48:47,440 --> 00:48:53,760
any questions in the comments

00:48:50,240 --> 00:48:54,240
perfect uh thank you very much as always

00:48:53,760 --> 00:48:56,720
thank you

00:48:54,240 --> 00:48:58,480
thank you for the opportunity and we're

00:48:56,720 --> 00:49:01,440
very excited to have you

00:48:58,480 --> 00:49:03,839
every time and we look forward to have

00:49:01,440 --> 00:49:06,960
you in the future as well

00:49:03,839 --> 00:49:17,100
thank you very much thank you

00:49:06,960 --> 00:49:42,839
have a great day

00:49:17,100 --> 00:49:45,839
[Music]

00:49:42,839 --> 00:49:45,839
foreign

00:49:46,110 --> 00:50:06,199
[Music]

00:50:10,839 --> 00:50:13,839
do

00:50:16,390 --> 00:50:37,809
[Music]

00:50:38,839 --> 00:50:52,839
so

00:50:41,700 --> 00:50:55,839
[Music]

00:50:52,839 --> 00:50:55,839
so

00:50:55,910 --> 00:51:01,300
[Music]

00:50:58,210 --> 00:51:01,300
[Applause]

00:51:01,330 --> 00:51:09,839
[Music]

00:51:06,839 --> 00:51:09,839
my

00:51:10,490 --> 00:51:29,659
[Music]

00:51:34,839 --> 00:51:37,839
one

00:51:38,670 --> 00:51:50,780
[Music]

00:51:48,839 --> 00:52:24,869
so

00:51:50,780 --> 00:52:24,869
[Music]

00:52:27,580 --> 00:53:12,819
[Music]

00:53:12,839 --> 00:53:48,329
so

00:53:14,580 --> 00:53:48,329
[Music]

00:53:54,839 --> 00:54:43,539
so

00:53:57,340 --> 00:54:43,539
[Music]

00:54:50,839 --> 00:55:02,639
so

00:54:53,720 --> 00:55:02,639
[Music]

00:55:04,839 --> 00:55:32,839
so

00:55:06,120 --> 00:55:34,990
[Music]

00:55:32,839 --> 00:55:35,550
so

00:55:34,990 --> 00:55:38,639
[Music]

00:55:35,550 --> 00:55:38,639
[Applause]

00:55:38,660 --> 00:55:46,230
[Music]

00:55:46,839 --> 00:55:49,839
my

00:55:50,710 --> 00:56:06,999
[Music]

00:56:13,110 --> 00:56:16,000
[Music]

00:56:14,960 --> 00:56:43,820
foreign

00:56:16,000 --> 00:56:43,820
[Music]

00:56:43,839 --> 00:57:02,199
you

00:56:44,290 --> 00:57:02,199
[Music]

00:57:04,920 --> 00:57:26,780
[Music]

00:57:24,839 --> 00:57:38,839
so

00:57:26,780 --> 00:57:41,240
[Music]

00:57:38,839 --> 00:58:20,429
so

00:57:41,240 --> 00:58:20,429
[Music]

00:58:20,839 --> 00:58:23,839
then

00:58:31,780 --> 00:58:34,829
[Music]

00:58:34,839 --> 00:58:37,839
so

00:58:39,450 --> 00:59:05,839
[Music]

00:59:02,839 --> 00:59:05,839
foreign

00:59:14,910 --> 00:59:19,110
[Music]

00:59:16,839 --> 00:59:23,829
so

00:59:19,110 --> 00:59:23,829

YouTube URL: https://www.youtube.com/watch?v=S_AzdcJhM9s


