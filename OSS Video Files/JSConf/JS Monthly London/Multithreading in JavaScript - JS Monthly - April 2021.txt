Title: Multithreading in JavaScript - JS Monthly - April 2021
Publication date: 2021-05-27
Playlist: JS Monthly London
Description: 
	Multithreading in JavaScript - how we moved log processing from the main thread to a separate thread. \\ Matteo Collina

Matteo has self-recorded this presentation for JS monthly to cover how the upcoming release of Pino would offload the data processing of log lines to a separate thread using Atomics.. to build a true ThreadStream!

Intro [00:00:00] 
About me [00:00:39] 
How Pino Works [00:03:14] 
An example [00:03:55] 
Pino V7 [00:04:38]
New Transports [00:07:09] 
Thread Stream [00:08:10] 
Flash synch [00:09:17] 
Example [00:11:07]
Pretty Print [00:12:00]
Node example transports [00:12:26] 
Thread Stream [00:17:11]
Atomics [00:19:30] 
Conclusion [00:21:45]
________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:01,520 --> 00:00:06,960
i london so happy to be

00:00:04,000 --> 00:00:08,559
uh back here speaking at your meet up

00:00:06,960 --> 00:00:09,519
after the conference and a bunch of

00:00:08,559 --> 00:00:11,440
other things

00:00:09,519 --> 00:00:13,759
to be honest i would really love this

00:00:11,440 --> 00:00:16,640
was a real me meet up because i

00:00:13,759 --> 00:00:17,440
can't wait to meet all of you in in

00:00:16,640 --> 00:00:19,840
person

00:00:17,440 --> 00:00:21,920
and yeah i can't wait to be back in the

00:00:19,840 --> 00:00:25,519
city it has been more than a year

00:00:21,920 --> 00:00:28,400
and you know i start to get

00:00:25,519 --> 00:00:30,800
a little bit of cabin fever and i really

00:00:28,400 --> 00:00:34,480
really love to be back traveling and

00:00:30,800 --> 00:00:36,079
meeting u-haul anyway before we start

00:00:34,480 --> 00:00:38,879
i just want to thank for for having me

00:00:36,079 --> 00:00:42,000
tonight anyway before we start

00:00:38,879 --> 00:00:44,640
who i am i am mattocolina at matacolina

00:00:42,000 --> 00:00:45,360
on twitter you might have you might know

00:00:44,640 --> 00:00:48,079
me

00:00:45,360 --> 00:00:48,960
from conference interwebs whatever if

00:00:48,079 --> 00:00:50,800
you're not

00:00:48,960 --> 00:00:52,800
you haven't ever heard of me follow me

00:00:50,800 --> 00:00:54,960
on twitter pretty please

00:00:52,800 --> 00:00:57,039
what else about me i'm part of the new

00:00:54,960 --> 00:01:00,719
jazz technical steering committee

00:00:57,039 --> 00:01:04,559
the team that maintains node.js

00:01:00,719 --> 00:01:09,200
i'm also part i'm also the co-creator of

00:01:04,559 --> 00:01:12,479
fastify and and pinum i'm

00:01:09,200 --> 00:01:15,759
work at near form as a title a

00:01:12,479 --> 00:01:17,680
technical director i'm also a software

00:01:15,759 --> 00:01:22,320
architect engineering consultant so

00:01:17,680 --> 00:01:25,280
i help companies shipping node.js

00:01:22,320 --> 00:01:26,880
please follow my newsletter adventures

00:01:25,280 --> 00:01:30,560
in noteland

00:01:26,880 --> 00:01:32,000
at nodleigh.dev it's i think it's kind

00:01:30,560 --> 00:01:34,400
of nice

00:01:32,000 --> 00:01:35,680
but you know you might want to decide

00:01:34,400 --> 00:01:36,880
you might want to decide for yourself

00:01:35,680 --> 00:01:39,040
but check it out

00:01:36,880 --> 00:01:40,240
i you know a lot of people i've been

00:01:39,040 --> 00:01:42,960
enjoying it

00:01:40,240 --> 00:01:45,439
for the last few for the last few issues

00:01:42,960 --> 00:01:46,320
apparently i am a six billion download

00:01:45,439 --> 00:01:48,479
person

00:01:46,320 --> 00:01:50,320
i don't know what that means if i got

00:01:48,479 --> 00:01:51,520
one sent for each one of those downloads

00:01:50,320 --> 00:01:55,040
i will be reply pretty

00:01:51,520 --> 00:01:58,479
pretty rich i'm not getting any so

00:01:55,040 --> 00:02:01,600
i don't know well oh before we go it's

00:01:58,479 --> 00:02:04,000
what i doing in my role at near form i

00:02:01,600 --> 00:02:07,119
tend to balance between helping out

00:02:04,000 --> 00:02:08,640
helping people using node.js and working

00:02:07,119 --> 00:02:10,479
as a consultant with maintaining the

00:02:08,640 --> 00:02:11,840
ecosystem so this is always this is

00:02:10,479 --> 00:02:15,120
stable balance

00:02:11,840 --> 00:02:16,879
but it's kind of unique in that sense so

00:02:15,120 --> 00:02:19,040
it's a company i really like

00:02:16,879 --> 00:02:21,440
by the way near from here you can see it

00:02:19,040 --> 00:02:24,480
here we are hiding quite a lot

00:02:21,440 --> 00:02:27,520
both permanent contractor roles

00:02:24,480 --> 00:02:30,640
in in the uk and beyond

00:02:27,520 --> 00:02:31,760
so just check it and check us out near

00:02:30,640 --> 00:02:35,040
from.com

00:02:31,760 --> 00:02:36,959
careers if you are interested

00:02:35,040 --> 00:02:38,480
so we are here today to talk about pinot

00:02:36,959 --> 00:02:41,599
the fastest the

00:02:38,480 --> 00:02:43,760
fastest longer for node.js it has

00:02:41,599 --> 00:02:44,720
i don't know maybe minimal features and

00:02:43,760 --> 00:02:47,040
a great community

00:02:44,720 --> 00:02:48,800
it's been downloaded quite a lot to be

00:02:47,040 --> 00:02:51,360
honest

00:02:48,800 --> 00:02:52,879
if you ever check this live but you know

00:02:51,360 --> 00:02:56,879
there is this nice

00:02:52,879 --> 00:02:59,200
website called mpm stat where you can go

00:02:56,879 --> 00:02:59,920
and check how many downloads you are

00:02:59,200 --> 00:03:02,400
getting

00:02:59,920 --> 00:03:03,040
yay is six million and a half downloads

00:03:02,400 --> 00:03:05,200
per month

00:03:03,040 --> 00:03:06,879
in march anyway pinot has four

00:03:05,200 --> 00:03:09,440
collaborators and it has

00:03:06,879 --> 00:03:10,319
version six however we are here to talk

00:03:09,440 --> 00:03:13,440
about version

00:03:10,319 --> 00:03:15,920
seven so this talk it's really about

00:03:13,440 --> 00:03:17,519
version seven let's do a quick refresh

00:03:15,920 --> 00:03:20,159
on how pinot works

00:03:17,519 --> 00:03:20,800
so pinot is these nice loggers that

00:03:20,159 --> 00:03:24,080
produce

00:03:20,800 --> 00:03:25,040
jason and produce new line the limited

00:03:24,080 --> 00:03:28,080
json so it's

00:03:25,040 --> 00:03:30,239
a it's a json on a line very simple

00:03:28,080 --> 00:03:31,840
and you just can just create pinot and

00:03:30,239 --> 00:03:32,879
you can just use the logger to log

00:03:31,840 --> 00:03:35,200
things out

00:03:32,879 --> 00:03:37,040
so you can have the concept of child

00:03:35,200 --> 00:03:40,080
loggers which are pretty common

00:03:37,040 --> 00:03:43,680
so this is the very simple part of

00:03:40,080 --> 00:03:46,720
the talk finished let me do a quick

00:03:43,680 --> 00:03:49,200
demo of of pinot

00:03:46,720 --> 00:03:50,000
first so that now we can talk about

00:03:49,200 --> 00:03:53,200
pinot seven

00:03:50,000 --> 00:03:54,319
and what has changed now we can there is

00:03:53,200 --> 00:03:57,200
this is called

00:03:54,319 --> 00:03:57,680
example so let's open the example okay

00:03:57,200 --> 00:04:00,720
and

00:03:57,680 --> 00:04:04,400
if we open the example

00:04:00,720 --> 00:04:08,560
you can do node example

00:04:04,400 --> 00:04:10,799
and you see you get all those lines whoa

00:04:08,560 --> 00:04:12,400
how can we read them well you can

00:04:10,799 --> 00:04:16,799
actually read them

00:04:12,400 --> 00:04:19,519
by doing using pinopretti

00:04:16,799 --> 00:04:20,320
and with this you get a nice output cool

00:04:19,519 --> 00:04:22,160
okay so

00:04:20,320 --> 00:04:25,280
you've seen how this work okay you've

00:04:22,160 --> 00:04:28,800
seen that in order to format our logs we

00:04:25,280 --> 00:04:32,240
actually connect it to to another

00:04:28,800 --> 00:04:33,600
processor that you know make them pretty

00:04:32,240 --> 00:04:34,880
nice or change the format

00:04:33,600 --> 00:04:37,199
we can have for example pino

00:04:34,880 --> 00:04:39,360
elasticsearch to send them to

00:04:37,199 --> 00:04:42,560
elasticsearch for example so these are

00:04:39,360 --> 00:04:45,840
my these are my diagrams for pinot v7

00:04:42,560 --> 00:04:48,880
so what we have in in in the in the ipad

00:04:45,840 --> 00:04:50,720
well in the ipad we have

00:04:48,880 --> 00:04:52,160
you can see that we have this concept of

00:04:50,720 --> 00:04:54,639
the previous transport

00:04:52,160 --> 00:04:56,800
which essentially we were recommending

00:04:54,639 --> 00:04:59,120
people to run the transports

00:04:56,800 --> 00:05:00,320
off process so in a separate process why

00:04:59,120 --> 00:05:03,280
so you will not block

00:05:00,320 --> 00:05:05,199
the main event loop to deal with logs as

00:05:03,280 --> 00:05:06,960
much as logs are important our

00:05:05,199 --> 00:05:08,720
the job of our applications is to

00:05:06,960 --> 00:05:11,120
respond to their clients

00:05:08,720 --> 00:05:12,960
so we don't want to block the event loop

00:05:11,120 --> 00:05:13,680
block the response or create additional

00:05:12,960 --> 00:05:16,479
load

00:05:13,680 --> 00:05:17,199
to send your logs to elasticsearch for

00:05:16,479 --> 00:05:20,479
example

00:05:17,199 --> 00:05:22,800
however this type of transport system

00:05:20,479 --> 00:05:25,360
for example pi using unix pipes

00:05:22,800 --> 00:05:26,960
was very complex to run and deploy

00:05:25,360 --> 00:05:30,080
typically when we run them

00:05:26,960 --> 00:05:31,199
in on the cloud we were what i was

00:05:30,080 --> 00:05:32,880
recommending was

00:05:31,199 --> 00:05:34,880
that you know you got you run your node

00:05:32,880 --> 00:05:37,919
app as a docker container

00:05:34,880 --> 00:05:38,800
and these when plugged into the docker

00:05:37,919 --> 00:05:42,240
locks

00:05:38,800 --> 00:05:45,120
that then send to the for example

00:05:42,240 --> 00:05:46,639
with file beat you could get them to

00:05:45,120 --> 00:05:50,160
elasticsearch

00:05:46,639 --> 00:05:52,160
as before and and kibana and then you

00:05:50,160 --> 00:05:52,880
could access them from humana pretty

00:05:52,160 --> 00:05:56,800
neat

00:05:52,880 --> 00:05:58,479
however you could also use for example

00:05:56,800 --> 00:06:01,440
aws

00:05:58,479 --> 00:06:02,960
cloud watch that was also good as well

00:06:01,440 --> 00:06:05,600
these ad had a few

00:06:02,960 --> 00:06:06,080
issues though because for a lot of

00:06:05,600 --> 00:06:09,360
people

00:06:06,080 --> 00:06:11,680
running like node lighting up to pipe

00:06:09,360 --> 00:06:15,520
piping to system together

00:06:11,680 --> 00:06:17,840
it was not really

00:06:15,520 --> 00:06:19,600
useful they complained a lot they wanted

00:06:17,840 --> 00:06:20,800
to run things at the same thing on the

00:06:19,600 --> 00:06:24,160
same process

00:06:20,800 --> 00:06:25,360
so you know this was also a feature that

00:06:24,160 --> 00:06:28,160
was supported by

00:06:25,360 --> 00:06:30,400
bunyan it was supported by winston and a

00:06:28,160 --> 00:06:33,120
lot of people coming from those loggers

00:06:30,400 --> 00:06:35,039
they really wanted this feature in and

00:06:33,120 --> 00:06:38,800
we always recommend it against it

00:06:35,039 --> 00:06:40,560
because essentially we did not want to

00:06:38,800 --> 00:06:42,560
create too much burden on the main

00:06:40,560 --> 00:06:44,639
thread that was also already very busy

00:06:42,560 --> 00:06:46,319
responding to your clients the typical

00:06:44,639 --> 00:06:47,840
behavior when you're doing the all these

00:06:46,319 --> 00:06:49,520
operations in the logger by the way it's

00:06:47,840 --> 00:06:51,039
a huge spike in memory

00:06:49,520 --> 00:06:52,560
so essentially when you were running

00:06:51,039 --> 00:06:53,520
this type of things in memory you will

00:06:52,560 --> 00:06:55,759
see that

00:06:53,520 --> 00:06:56,720
the memory usage was actually spiking to

00:06:55,759 --> 00:06:58,960
the roof

00:06:56,720 --> 00:06:59,840
which was really really bad what did we

00:06:58,960 --> 00:07:02,319
do well

00:06:59,840 --> 00:07:04,000
what we did was we thought about this

00:07:02,319 --> 00:07:05,120
problem and outprovide a better user

00:07:04,000 --> 00:07:07,759
experience

00:07:05,120 --> 00:07:09,440
and we actually divided this concept of

00:07:07,759 --> 00:07:12,000
the new transports

00:07:09,440 --> 00:07:14,400
so new transports what do they do well

00:07:12,000 --> 00:07:16,240
it's outside the same node process

00:07:14,400 --> 00:07:17,759
you have the your main thread when your

00:07:16,240 --> 00:07:20,479
main application runs

00:07:17,759 --> 00:07:22,560
as well as the worker thread where you

00:07:20,479 --> 00:07:24,240
and then the worker thread where we run

00:07:22,560 --> 00:07:25,919
all your log processing

00:07:24,240 --> 00:07:27,440
this is pretty neat because we can

00:07:25,919 --> 00:07:29,759
actually differentiate

00:07:27,440 --> 00:07:31,919
so that we can do a lot of log things in

00:07:29,759 --> 00:07:34,880
the the secondary thread

00:07:31,919 --> 00:07:35,199
and not block the event loop in the main

00:07:34,880 --> 00:07:38,479
one

00:07:35,199 --> 00:07:40,400
unless we really want to so all of these

00:07:38,479 --> 00:07:43,599
things can actually work in tandem

00:07:40,400 --> 00:07:45,199
and produce a extremely good really good

00:07:43,599 --> 00:07:46,560
developer experience as well as really

00:07:45,199 --> 00:07:49,840
good performance

00:07:46,560 --> 00:07:52,879
so how does this work well

00:07:49,840 --> 00:07:54,560
i'm glad you asked and this is david

00:07:52,879 --> 00:07:56,319
maclemens

00:07:54,560 --> 00:07:58,000
so the first thing that i wanted to show

00:07:56,319 --> 00:08:03,120
you it's a

00:07:58,000 --> 00:08:03,120
new tiny module called

00:08:04,639 --> 00:08:12,240
pino.js thread

00:08:08,160 --> 00:08:16,400
stream thread stream

00:08:12,240 --> 00:08:18,960
it's a very simple module these it's

00:08:16,400 --> 00:08:20,000
essentially you can create your your

00:08:18,960 --> 00:08:21,520
stream

00:08:20,000 --> 00:08:24,000
and you require your stream you create

00:08:21,520 --> 00:08:26,160
your stream and then

00:08:24,000 --> 00:08:27,039
you just you know specified that file

00:08:26,160 --> 00:08:29,759
name

00:08:27,039 --> 00:08:31,680
the full path of a worker file this file

00:08:29,759 --> 00:08:32,719
is going to be word used as the worker

00:08:31,680 --> 00:08:36,320
thread

00:08:32,719 --> 00:08:39,680
and we can actually pass in

00:08:36,320 --> 00:08:40,479
some data in some options some some some

00:08:39,680 --> 00:08:42,000
more stuff

00:08:40,479 --> 00:08:44,000
and this behaves like a string it has

00:08:42,000 --> 00:08:47,279
the same api of a string

00:08:44,000 --> 00:08:49,120
a part that it only accepts strings so

00:08:47,279 --> 00:08:51,440
in inside your worker file you just need

00:08:49,120 --> 00:08:54,160
to export a single lasting function

00:08:51,440 --> 00:08:55,760
where you can just create your

00:08:54,160 --> 00:08:58,480
destinations

00:08:55,760 --> 00:09:00,160
and that's it that's how you set it up

00:08:58,480 --> 00:09:01,920
however you can support a lot more

00:09:00,160 --> 00:09:04,720
complex scenario now that you can run

00:09:01,920 --> 00:09:06,240
things separately note that it supports

00:09:04,720 --> 00:09:08,560
both synchronous and the synchronous

00:09:06,240 --> 00:09:10,560
flashing so that

00:09:08,560 --> 00:09:11,760
whenever you one of the tricky bits of

00:09:10,560 --> 00:09:14,720
the system is

00:09:11,760 --> 00:09:16,640
that whenever your process is crashing

00:09:14,720 --> 00:09:17,440
you might not have a full level loop

00:09:16,640 --> 00:09:20,959
running

00:09:17,440 --> 00:09:24,480
so you might need to do as it says

00:09:20,959 --> 00:09:26,240
a flash or a flash sync and those things

00:09:24,480 --> 00:09:26,880
are actually supported by by this

00:09:26,240 --> 00:09:29,600
library

00:09:26,880 --> 00:09:30,480
which is pretty neat so how does this

00:09:29,600 --> 00:09:33,519
work

00:09:30,480 --> 00:09:36,240
okay i just wanted to show you briefly

00:09:33,519 --> 00:09:37,839
in here let's see an example so this is

00:09:36,240 --> 00:09:41,120
a very simple example

00:09:37,839 --> 00:09:44,640
that creates a new thread stream use

00:09:41,120 --> 00:09:46,800
join passing some worker data and

00:09:44,640 --> 00:09:47,760
which processor v is the input from my

00:09:46,800 --> 00:09:49,920
command line

00:09:47,760 --> 00:09:51,680
and then when the stream is ready we

00:09:49,920 --> 00:09:54,560
write some stuff to it

00:09:51,680 --> 00:09:55,680
and then we call flashsync and then we

00:09:54,560 --> 00:09:58,800
ref

00:09:55,680 --> 00:09:59,920
so hey happy days so that the process

00:09:58,800 --> 00:10:03,200
can actually act

00:09:59,920 --> 00:10:04,160
okay let's let's start this so if i do

00:10:03,200 --> 00:10:06,720
node create

00:10:04,160 --> 00:10:06,720
and exit

00:10:07,360 --> 00:10:15,440
london here we go okay

00:10:10,959 --> 00:10:17,279
did nothing but if we if we cast london

00:10:15,440 --> 00:10:18,959
london you'll see that there is hello

00:10:17,279 --> 00:10:21,920
world okay

00:10:18,959 --> 00:10:22,959
so i can actually remove london cool

00:10:21,920 --> 00:10:25,440
right it's pretty nice

00:10:22,959 --> 00:10:26,959
what's in that file so well this is the

00:10:25,440 --> 00:10:29,600
file that you can use

00:10:26,959 --> 00:10:30,480
and it's the same one that it was in the

00:10:29,600 --> 00:10:34,720
readme

00:10:30,480 --> 00:10:34,720
and as you can see we can just

00:10:35,040 --> 00:10:42,800
create it and call run pretty neat

00:10:38,640 --> 00:10:45,519
again uh note that you can actually use

00:10:42,800 --> 00:10:46,240
ecmascript modules if you like them so

00:10:45,519 --> 00:10:49,680
you can

00:10:46,240 --> 00:10:51,680
literally create import and you know use

00:10:49,680 --> 00:10:52,959
your import and export to do the exact

00:10:51,680 --> 00:10:54,079
same thing that you were doing before

00:10:52,959 --> 00:10:56,560
without them

00:10:54,079 --> 00:10:58,480
so if you prefer this syntax you can use

00:10:56,560 --> 00:11:00,480
this syntax as well

00:10:58,480 --> 00:11:01,680
cool how they're using how are you going

00:11:00,480 --> 00:11:04,560
to use these in

00:11:01,680 --> 00:11:07,360
pino and this is how what type of user

00:11:04,560 --> 00:11:10,560
experience we would like to provide

00:11:07,360 --> 00:11:13,920
so okay let's see let's see an example

00:11:10,560 --> 00:11:15,600
so let's open up the transports so in

00:11:13,920 --> 00:11:18,640
this new release of

00:11:15,600 --> 00:11:21,680
of pino we can we create a new logger

00:11:18,640 --> 00:11:23,519
with called the multi-transport thing

00:11:21,680 --> 00:11:25,680
maybe this api might change a little

00:11:23,519 --> 00:11:28,079
these things is not released yet

00:11:25,680 --> 00:11:28,959
i'm talking about pre-release code hope

00:11:28,079 --> 00:11:32,079
i hope you are

00:11:28,959 --> 00:11:34,079
as excited about it as i am so that

00:11:32,079 --> 00:11:35,200
you know you can contribute and check it

00:11:34,079 --> 00:11:37,200
out so

00:11:35,200 --> 00:11:39,279
so what do we do we create our our

00:11:37,200 --> 00:11:42,079
logger with

00:11:39,279 --> 00:11:44,240
pulsing this multitransport concept and

00:11:42,079 --> 00:11:48,000
we pass in two transports

00:11:44,240 --> 00:11:51,120
one we want to send all the log with

00:11:48,000 --> 00:11:54,240
with level one to a file

00:11:51,120 --> 00:11:57,680
and all the log with level info

00:11:54,240 --> 00:11:58,639
to pre with a pre-printer so standard

00:11:57,680 --> 00:12:01,200
output with

00:11:58,639 --> 00:12:02,240
some pretty printing outfit so that by

00:12:01,200 --> 00:12:03,600
the way this is

00:12:02,240 --> 00:12:06,000
you know we don't recommend produce

00:12:03,600 --> 00:12:08,880
pretty print in production

00:12:06,000 --> 00:12:09,279
because it will block the event loop in

00:12:08,880 --> 00:12:12,320
a

00:12:09,279 --> 00:12:14,160
not needed way to be honest with worker

00:12:12,320 --> 00:12:15,040
tread if you have cpu system to spare

00:12:14,160 --> 00:12:17,279
probably not

00:12:15,040 --> 00:12:18,399
it's not going to make a lot of farm but

00:12:17,279 --> 00:12:21,839
still don't do it

00:12:18,399 --> 00:12:25,040
because it's it will be more costly than

00:12:21,839 --> 00:12:27,120
what you would usually want it to be

00:12:25,040 --> 00:12:28,480
we create those two things we do some

00:12:27,120 --> 00:12:33,279
logging

00:12:28,480 --> 00:12:33,279
and then the process exits okay

00:12:33,680 --> 00:12:40,160
so what do we do

00:12:36,880 --> 00:12:43,519
we do node example transport

00:12:40,160 --> 00:12:48,399
you will see that all the output get out

00:12:43,519 --> 00:12:50,880
and we got a new log big log line here

00:12:48,399 --> 00:12:52,079
big log file and we are going to cut

00:12:50,880 --> 00:12:56,959
this file

00:12:52,079 --> 00:12:56,959
as as you see it has only error and

00:12:57,279 --> 00:13:03,600
npx pretty print

00:13:01,279 --> 00:13:03,600
and

00:13:05,200 --> 00:13:11,839
yeah that was probably not a good idea

00:13:09,440 --> 00:13:11,839
come on

00:13:12,639 --> 00:13:14,959
ah

00:13:18,240 --> 00:13:25,680
really good okay so

00:13:21,839 --> 00:13:28,959
as you can see it only contains those

00:13:25,680 --> 00:13:32,160
cool okay so we can rerun this

00:13:28,959 --> 00:13:34,959
and it will just work as expected

00:13:32,160 --> 00:13:35,920
note that it is a very interesting part

00:13:34,959 --> 00:13:39,600
too

00:13:35,920 --> 00:13:41,839
so to say so if we open it up

00:13:39,600 --> 00:13:43,040
if we open it up and at the very end of

00:13:41,839 --> 00:13:49,199
the script

00:13:43,040 --> 00:13:52,160
we do console log

00:13:49,199 --> 00:13:52,160
example finished

00:13:54,959 --> 00:14:00,560
you will see that it actually

00:14:00,800 --> 00:14:05,120
print example finished at the at the

00:14:03,360 --> 00:14:07,120
very first line why because

00:14:05,120 --> 00:14:08,880
all the others are being done in the

00:14:07,120 --> 00:14:10,720
secondary thread

00:14:08,880 --> 00:14:12,480
which needs a little bit leads a couple

00:14:10,720 --> 00:14:14,800
of event loop cycle to

00:14:12,480 --> 00:14:15,519
be started up and so on before writing

00:14:14,800 --> 00:14:20,320
it

00:14:15,519 --> 00:14:22,560
so hey just so that you are aware of it

00:14:20,320 --> 00:14:23,920
that is there is that that is actually

00:14:22,560 --> 00:14:28,480
important

00:14:23,920 --> 00:14:32,160
so how is this you might wonder

00:14:28,480 --> 00:14:35,519
how it's how is this implemented

00:14:32,160 --> 00:14:38,480
internally and this is something that i

00:14:35,519 --> 00:14:38,880
would i really want to show you because

00:14:38,480 --> 00:14:41,519
it's

00:14:38,880 --> 00:14:42,639
it's actually pretty easy so in here

00:14:41,519 --> 00:14:44,800
what we have we

00:14:42,639 --> 00:14:47,360
we have the worker this is the same

00:14:44,800 --> 00:14:50,720
worker of the tread stream worker

00:14:47,360 --> 00:14:53,279
and what this does it

00:14:50,720 --> 00:14:55,440
essentially it performs some some some

00:14:53,279 --> 00:14:59,680
simple stream manipulation

00:14:55,440 --> 00:15:02,399
to assemble a multi-stream

00:14:59,680 --> 00:15:04,000
which it's still something that we

00:15:02,399 --> 00:15:07,040
support

00:15:04,000 --> 00:15:08,720
in in pino and it will you know it

00:15:07,040 --> 00:15:10,959
it's it's used to assemble a bunch of

00:15:08,720 --> 00:15:14,160
sims together as a single destination

00:15:10,959 --> 00:15:15,920
so that's that's what it is as again you

00:15:14,160 --> 00:15:17,120
see a bunch of to-do's because i haven't

00:15:15,920 --> 00:15:21,680
finished

00:15:17,120 --> 00:15:23,920
working on this topic just yet so

00:15:21,680 --> 00:15:26,079
so this is actually pretty simple in the

00:15:23,920 --> 00:15:29,120
sense that we do some initialization

00:15:26,079 --> 00:15:31,519
then we return a function

00:15:29,120 --> 00:15:32,880
then use called build on this pino

00:15:31,519 --> 00:15:36,320
abstract transport

00:15:32,880 --> 00:15:41,839
whoa what does pino abstract transfer do

00:15:36,320 --> 00:15:41,839
you know absolute abstract transform

00:15:43,279 --> 00:15:48,800
here we go oh

00:15:46,560 --> 00:15:49,920
maybe the rhythm is better okay what

00:15:48,800 --> 00:15:53,120
does pinup sometimes

00:15:49,920 --> 00:15:55,199
do well p knobs a transform essentially

00:15:53,120 --> 00:15:58,560
it's it turns a function build

00:15:55,199 --> 00:16:00,480
that it simplifies writing transports it

00:15:58,560 --> 00:16:03,680
makes writing them pretty easily

00:16:00,480 --> 00:16:07,279
so essentially it combines 2

00:16:03,680 --> 00:16:10,639
to process and parse

00:16:07,279 --> 00:16:14,079
the incoming new line limited

00:16:10,639 --> 00:16:17,120
new line limited json so

00:16:14,079 --> 00:16:19,360
how is this implemented well let's see

00:16:17,120 --> 00:16:20,399
it's actually very straightforward we

00:16:19,360 --> 00:16:24,639
use split

00:16:20,399 --> 00:16:26,800
two and we create to pass the stream

00:16:24,639 --> 00:16:28,079
and then for each line we try to parse

00:16:26,800 --> 00:16:31,680
the json

00:16:28,079 --> 00:16:35,279
create objects set some metadata

00:16:31,680 --> 00:16:38,399
and that's it essentially

00:16:35,279 --> 00:16:40,880
so pretty great and

00:16:38,399 --> 00:16:41,839
it's it's something that works uh really

00:16:40,880 --> 00:16:44,639
really well

00:16:41,839 --> 00:16:46,079
so you know you can we can combine those

00:16:44,639 --> 00:16:47,680
things together and you will be able to

00:16:46,079 --> 00:16:49,600
use this utility to write your own

00:16:47,680 --> 00:16:52,560
transports

00:16:49,600 --> 00:16:54,240
if you if you want so so it's it's

00:16:52,560 --> 00:16:56,399
pretty pretty neat

00:16:54,240 --> 00:16:58,399
some other very important bits that i

00:16:56,399 --> 00:17:02,000
would like to cover before i

00:16:58,399 --> 00:17:04,160
i wrap up is how

00:17:02,000 --> 00:17:07,120
the thread stream is implemented in

00:17:04,160 --> 00:17:10,079
order to do so i will need my ipad

00:17:07,120 --> 00:17:11,120
because i'm going to draw i i need to

00:17:10,079 --> 00:17:14,319
draw something

00:17:11,120 --> 00:17:18,079
okay so let's hope so you have

00:17:14,319 --> 00:17:21,760
so thread stream it's a thread stream

00:17:18,079 --> 00:17:21,760
is built on the concept

00:17:22,000 --> 00:17:24,240
of

00:17:25,360 --> 00:17:30,799
it's called the ring buffer

00:17:31,039 --> 00:17:34,320
what you do how it works it works that

00:17:33,760 --> 00:17:37,440
the

00:17:34,320 --> 00:17:40,080
you have the you have two pointers okay

00:17:37,440 --> 00:17:41,120
so you have two pointers which says this

00:17:40,080 --> 00:17:44,559
is the

00:17:41,120 --> 00:17:47,840
right pointer and the

00:17:44,559 --> 00:17:51,280
re pointer so

00:17:47,840 --> 00:17:55,919
the one

00:17:51,280 --> 00:17:59,840
so let's say that at any given time

00:17:55,919 --> 00:18:00,559
we have written till and then the read

00:17:59,840 --> 00:18:04,160
pointer

00:18:00,559 --> 00:18:06,480
would be here

00:18:04,160 --> 00:18:08,880
for example okay oh no this is probably

00:18:06,480 --> 00:18:12,480
not a good color

00:18:08,880 --> 00:18:16,000
here okay so at any given time

00:18:12,480 --> 00:18:17,200
we know how much the worker thread will

00:18:16,000 --> 00:18:19,520
have to read

00:18:17,200 --> 00:18:21,360
so essentially in this situation when

00:18:19,520 --> 00:18:24,799
the worker tried wakes up

00:18:21,360 --> 00:18:29,840
it knows oh i have essentially

00:18:24,799 --> 00:18:29,840
all this area here

00:18:30,080 --> 00:18:32,559
to read

00:18:33,760 --> 00:18:39,600
this is one of the key part of our

00:18:37,360 --> 00:18:41,120
thread stream work so essentially we

00:18:39,600 --> 00:18:43,919
maintain those data

00:18:41,120 --> 00:18:45,760
it maintains this data structure to be

00:18:43,919 --> 00:18:49,200
able to

00:18:45,760 --> 00:18:50,720
constantly synchronize the two streams

00:18:49,200 --> 00:18:52,720
without never blocking

00:18:50,720 --> 00:18:54,320
so they can actually never blocks well

00:18:52,720 --> 00:18:56,160
that's not true

00:18:54,320 --> 00:18:58,400
it can when he needs they block when he

00:18:56,160 --> 00:19:00,240
needs to need to cycle the ring buffer

00:18:58,400 --> 00:19:02,240
so then when he needs to start with the

00:19:00,240 --> 00:19:05,440
fresh one and move to the previous one

00:19:02,240 --> 00:19:07,440
uh start from scratch this is

00:19:05,440 --> 00:19:08,880
pretty great from my point of view

00:19:07,440 --> 00:19:11,280
because we can

00:19:08,880 --> 00:19:12,480
actually can communicate between those

00:19:11,280 --> 00:19:14,559
two streams

00:19:12,480 --> 00:19:16,400
just to thread without mostly never

00:19:14,559 --> 00:19:19,600
blocking never block

00:19:16,400 --> 00:19:22,250
by default these it's i

00:19:19,600 --> 00:19:23,840
think four

00:19:22,250 --> 00:19:26,880
[Music]

00:19:23,840 --> 00:19:27,760
area which is you know big enough you

00:19:26,880 --> 00:19:30,720
can even make it

00:19:27,760 --> 00:19:31,440
bigger if you want to there is also some

00:19:30,720 --> 00:19:34,240
activity that

00:19:31,440 --> 00:19:34,880
can be done to improve the efficiency of

00:19:34,240 --> 00:19:37,280
these

00:19:34,880 --> 00:19:39,760
of this data structure maybe they won't

00:19:37,280 --> 00:19:41,840
be made in time for the pinot v7 release

00:19:39,760 --> 00:19:43,200
so if you're interested in playing with

00:19:41,840 --> 00:19:45,919
atomics

00:19:43,200 --> 00:19:47,600
and this kind of work like please please

00:19:45,919 --> 00:19:48,160
please please please please please come

00:19:47,600 --> 00:19:51,440
back

00:19:48,160 --> 00:19:51,440
cam came back and

00:19:51,600 --> 00:19:55,840
i can you know i wanted to show a couple

00:19:54,160 --> 00:19:59,039
more things of this library

00:19:55,840 --> 00:20:02,080
as you can see this it has

00:19:59,039 --> 00:20:04,000
quite a long piece of code but

00:20:02,080 --> 00:20:06,799
the interesting one of the interesting

00:20:04,000 --> 00:20:09,520
bit is

00:20:06,799 --> 00:20:10,000
the use of atomic's weight as you can

00:20:09,520 --> 00:20:13,440
see

00:20:10,000 --> 00:20:15,280
it we do atomic's load and atomic weight

00:20:13,440 --> 00:20:20,320
so with atomic's weight we wait

00:20:15,280 --> 00:20:22,400
on this read red index for this value

00:20:20,320 --> 00:20:23,760
pretty for this value to change for this

00:20:22,400 --> 00:20:26,880
value to change so it's

00:20:23,760 --> 00:20:29,919
pretty great i love it

00:20:26,880 --> 00:20:32,960
and on the other end we do uh

00:20:29,919 --> 00:20:35,520
notify and when we do a notify we don't

00:20:32,960 --> 00:20:37,679
notify to wake up

00:20:35,520 --> 00:20:38,559
now we set up the worker threat while we

00:20:37,679 --> 00:20:42,159
use

00:20:38,559 --> 00:20:44,480
const worker and we get the worker trade

00:20:42,159 --> 00:20:45,360
it's pretty neat because we can just new

00:20:44,480 --> 00:20:47,840
new worker

00:20:45,360 --> 00:20:49,520
to execute the file to execute and then

00:20:47,840 --> 00:20:52,559
we pass in the option

00:20:49,520 --> 00:20:54,320
on the other end

00:20:52,559 --> 00:20:55,679
what we do we have our worker

00:20:54,320 --> 00:20:58,799
implementation

00:20:55,679 --> 00:21:01,280
and this is just

00:20:58,799 --> 00:21:02,240
is what gets executed in the worker shed

00:21:01,280 --> 00:21:05,600
and we

00:21:02,240 --> 00:21:07,840
import your function your file name

00:21:05,600 --> 00:21:09,120
and it creates a little bit of all our

00:21:07,840 --> 00:21:12,159
state stuff

00:21:09,120 --> 00:21:14,799
and then we receive a pass message

00:21:12,159 --> 00:21:15,679
and then we start running and in running

00:21:14,799 --> 00:21:19,039
we just read

00:21:15,679 --> 00:21:22,720
your the red index

00:21:19,039 --> 00:21:23,280
we do some weight diff which is some you

00:21:22,720 --> 00:21:26,559
know

00:21:23,280 --> 00:21:28,640
asynchronous magic but you know we don't

00:21:26,559 --> 00:21:30,159
pretty interesting things again that are

00:21:28,640 --> 00:21:31,840
happening because

00:21:30,159 --> 00:21:33,200
the platform still does not have all the

00:21:31,840 --> 00:21:36,720
things that we need

00:21:33,200 --> 00:21:38,080
so essentially that is not a weight

00:21:36,720 --> 00:21:41,520
async

00:21:38,080 --> 00:21:45,039
operator whatever anyway

00:21:41,520 --> 00:21:48,490
and then we write up until we can

00:21:45,039 --> 00:21:50,159
so i just wanted to

00:21:48,490 --> 00:21:53,840
[Music]

00:21:50,159 --> 00:21:56,720
to show this thank you very much for

00:21:53,840 --> 00:21:58,720
for watching staying with me with this

00:21:56,720 --> 00:22:01,919
with for this talk tonight

00:21:58,720 --> 00:22:03,840
thank you for your time and please

00:22:01,919 --> 00:22:09,280
follow me on twitter at motocolina

00:22:03,840 --> 00:22:09,280
and you know as i said near from.com

00:22:09,360 --> 00:22:15,520
slash careers we are heading

00:22:12,480 --> 00:22:17,919
quite a lot all sorts of positions and

00:22:15,520 --> 00:22:19,120
you know remember also to go to

00:22:17,919 --> 00:22:21,760
northland.div

00:22:19,120 --> 00:22:23,440
and subscribe just saying thank you very

00:22:21,760 --> 00:22:24,159
much my ideas are open in case you have

00:22:23,440 --> 00:22:35,440
any questions

00:22:24,159 --> 00:22:35,440

YouTube URL: https://www.youtube.com/watch?v=Og3MXBZ4JKI


