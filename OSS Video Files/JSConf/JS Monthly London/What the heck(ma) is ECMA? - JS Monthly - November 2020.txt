Title: What the heck(ma) is ECMA? - JS Monthly - November 2020
Publication date: 2020-12-09
Playlist: JS Monthly London
Description: 
	What the heck(ma) is ECMA? // Abby Mitchell

Have you ever felt confused by terms like ES5, ES6, ES2015? What is the difference? Is it all still Javascript? Why isn't it JS2015???

These are all great questions that will be answered during this talk. We'll cover a bit about the history of Javascript standards, where you can find the most up to date information, and the key syntactic differences between the most common versions.

See the Q&A with Abby on the original live-stream:
https://youtu.be/aVTXc8foBPM

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:01,520 --> 00:00:06,000
hi everyone thank you for

00:00:03,280 --> 00:00:06,640
coming along to this talk i'm gonna be

00:00:06,000 --> 00:00:10,240
um

00:00:06,640 --> 00:00:13,200
going through what the heck ma is ekma

00:00:10,240 --> 00:00:15,120
i apologize for my bad puns and i can

00:00:13,200 --> 00:00:16,560
either confirm nor deny that that will

00:00:15,120 --> 00:00:17,680
be the last one that you're here this

00:00:16,560 --> 00:00:21,199
evening

00:00:17,680 --> 00:00:24,240
um so i don't know what kind of level um

00:00:21,199 --> 00:00:26,080
you guys who are watching this um

00:00:24,240 --> 00:00:27,760
talk are at in terms of your journey

00:00:26,080 --> 00:00:30,240
into javascript so

00:00:27,760 --> 00:00:31,920
i hope that this talk will kind of cater

00:00:30,240 --> 00:00:32,880
to a range of different experience

00:00:31,920 --> 00:00:36,320
levels

00:00:32,880 --> 00:00:38,480
um and really this is a talk to kind of

00:00:36,320 --> 00:00:39,760
get you guys familiar with the concept

00:00:38,480 --> 00:00:41,280
of ecmascript

00:00:39,760 --> 00:00:43,280
and what it means in relation to

00:00:41,280 --> 00:00:44,879
javascript i think if you

00:00:43,280 --> 00:00:46,800
have started using javascript you're

00:00:44,879 --> 00:00:48,719
probably like me

00:00:46,800 --> 00:00:50,800
when i first started get quite confused

00:00:48,719 --> 00:00:51,760
when you go on stack overflow and people

00:00:50,800 --> 00:00:55,120
are using

00:00:51,760 --> 00:00:56,800
random combinations of years and letters

00:00:55,120 --> 00:01:00,320
and numbers and es

00:00:56,800 --> 00:01:01,920
5 or 6 or es 2015 and it can get a bit

00:01:00,320 --> 00:01:03,520
confusing and you might think what has

00:01:01,920 --> 00:01:06,400
this got to do with javascript

00:01:03,520 --> 00:01:07,360
and so hopefully i'm going to help um

00:01:06,400 --> 00:01:10,880
clear some of that

00:01:07,360 --> 00:01:13,439
confusion up today so firstly

00:01:10,880 --> 00:01:14,560
let's talk about what is ecmascript

00:01:13,439 --> 00:01:17,680
ecmascript

00:01:14,560 --> 00:01:19,600
and javascript are the same

00:01:17,680 --> 00:01:21,040
except when we talk about ecmascript

00:01:19,600 --> 00:01:24,080
what we're really talking about

00:01:21,040 --> 00:01:25,840
is the official specification

00:01:24,080 --> 00:01:27,840
of the coding language that is

00:01:25,840 --> 00:01:28,560
javascript and javascript is the term we

00:01:27,840 --> 00:01:30,479
use

00:01:28,560 --> 00:01:32,880
kind of more colloquially whereas

00:01:30,479 --> 00:01:35,280
ecmascript we use or es which

00:01:32,880 --> 00:01:36,079
is shortened to es we use when we're

00:01:35,280 --> 00:01:39,119
trying to

00:01:36,079 --> 00:01:42,399
um refer to a specific version

00:01:39,119 --> 00:01:45,439
um javascript and coding languages are

00:01:42,399 --> 00:01:48,799
you know the same as human languages and

00:01:45,439 --> 00:01:52,320
in the fact that they evolve over time

00:01:48,799 --> 00:01:54,079
they don't stay static and

00:01:52,320 --> 00:01:56,640
with something like javascript it's

00:01:54,079 --> 00:01:59,600
evolving quite at quite a fast pace and

00:01:56,640 --> 00:01:59,600
nowadays we get

00:02:02,479 --> 00:02:07,280
um so i'll give you a bit about the

00:02:04,560 --> 00:02:10,560
history of how the language has evolved

00:02:07,280 --> 00:02:11,200
um so the reason it's called ecmascript

00:02:10,560 --> 00:02:14,959
is that

00:02:11,200 --> 00:02:18,160
the ecma international is the um

00:02:14,959 --> 00:02:19,120
kind of the international committee that

00:02:18,160 --> 00:02:21,760
decides

00:02:19,120 --> 00:02:22,319
what features are going to go into each

00:02:21,760 --> 00:02:26,239
version

00:02:22,319 --> 00:02:28,160
of javascript the first kind of

00:02:26,239 --> 00:02:29,599
standard for the language was published

00:02:28,160 --> 00:02:32,800
in 1997

00:02:29,599 --> 00:02:35,680
and then that was officially es1

00:02:32,800 --> 00:02:36,480
um and then over the next kind of decade

00:02:35,680 --> 00:02:39,280
or so

00:02:36,480 --> 00:02:40,239
there were a few different releases es2

00:02:39,280 --> 00:02:44,400
00:02:40,239 --> 00:02:46,000
4 5 um and that was when in 2009 es5

00:02:44,400 --> 00:02:49,280
came out and that's probably the most

00:02:46,000 --> 00:02:50,720
um that was a pretty big um release

00:02:49,280 --> 00:02:51,599
there was a lot of new features into

00:02:50,720 --> 00:02:54,239
that

00:02:51,599 --> 00:02:56,640
um and then since then they didn't do

00:02:54,239 --> 00:02:57,519
very much until 2015 when es6 was

00:02:56,640 --> 00:03:00,159
released

00:02:57,519 --> 00:03:00,640
and this was a pretty big year because

00:03:00,159 --> 00:03:03,760
in

00:03:00,640 --> 00:03:04,480
um 2015 from then onwards they decided

00:03:03,760 --> 00:03:06,159
that

00:03:04,480 --> 00:03:08,560
instead of doing kind of intermittent

00:03:06,159 --> 00:03:11,519
releases they were going to start doing

00:03:08,560 --> 00:03:13,360
releases every single year um at which

00:03:11,519 --> 00:03:16,800
point it gets a bit confusing to keep

00:03:13,360 --> 00:03:20,239
naming things like es6789

00:03:16,800 --> 00:03:20,879
so from 2015 onwards you'll start seeing

00:03:20,239 --> 00:03:24,080
more

00:03:20,879 --> 00:03:25,599
um common names named after the year

00:03:24,080 --> 00:03:28,319
that it was released

00:03:25,599 --> 00:03:29,200
um and that's kind of the official name

00:03:28,319 --> 00:03:32,959
of that

00:03:29,200 --> 00:03:35,280
version is yes followed by the year name

00:03:32,959 --> 00:03:39,040
although some people will still use es6

00:03:35,280 --> 00:03:41,200
to mean es2015 and es7 to mean 2016.

00:03:39,040 --> 00:03:42,799
um you know whatever floats your boat

00:03:41,200 --> 00:03:45,920
really

00:03:42,799 --> 00:03:48,879
um if you want to know why it's called

00:03:45,920 --> 00:03:52,560
ecmascript really and not javascript

00:03:48,879 --> 00:03:55,840
2015 or js 2015 um

00:03:52,560 --> 00:03:58,159
it's the short answer is a copyright

00:03:55,840 --> 00:03:59,120
thing ekma international doesn't

00:03:58,159 --> 00:04:01,360
actually own

00:03:59,120 --> 00:04:03,120
the trademark name javascript i think

00:04:01,360 --> 00:04:04,000
it's owned by a company called oracle

00:04:03,120 --> 00:04:06,879
actually

00:04:04,000 --> 00:04:07,680
um and so they can't call it they can't

00:04:06,879 --> 00:04:10,720
call

00:04:07,680 --> 00:04:14,000
their standards um js

00:04:10,720 --> 00:04:17,040
2015 or js 678

00:04:14,000 --> 00:04:19,600
um yeah so

00:04:17,040 --> 00:04:20,639
i don't have a huge amount of time so i

00:04:19,600 --> 00:04:22,880
don't want to

00:04:20,639 --> 00:04:23,840
kind of go down into a huge amount of

00:04:22,880 --> 00:04:26,080
detail about

00:04:23,840 --> 00:04:27,199
each individual version of javascript

00:04:26,080 --> 00:04:29,440
since

00:04:27,199 --> 00:04:31,120
you know the dawn of time but um i will

00:04:29,440 --> 00:04:32,720
try and highlight just some of the key

00:04:31,120 --> 00:04:34,960
differences between

00:04:32,720 --> 00:04:36,479
um between the versions and how they

00:04:34,960 --> 00:04:39,840
kind of relate to

00:04:36,479 --> 00:04:41,919
what you will be seeing in the browser

00:04:39,840 --> 00:04:42,880
and things like that so i'll start with

00:04:41,919 --> 00:04:46,080
es5

00:04:42,880 --> 00:04:47,919
that was um released in 2009

00:04:46,080 --> 00:04:49,759
and the biggest things that came out of

00:04:47,919 --> 00:04:51,840
that um

00:04:49,759 --> 00:04:53,120
about release was we basically got a

00:04:51,840 --> 00:04:56,639
whole load of funky

00:04:53,120 --> 00:04:58,560
um array functions um and

00:04:56,639 --> 00:05:00,080
i probably only got started with

00:04:58,560 --> 00:05:02,320
javascript kind of

00:05:00,080 --> 00:05:04,320
you know i'm a millennial so i got

00:05:02,320 --> 00:05:05,360
started only you know fairly recently in

00:05:04,320 --> 00:05:08,479
javascript

00:05:05,360 --> 00:05:10,000
in comparison so to me i find it you

00:05:08,479 --> 00:05:12,479
know just really strange that these

00:05:10,000 --> 00:05:13,360
kind of functions that i use every day

00:05:12,479 --> 00:05:16,639
in my job

00:05:13,360 --> 00:05:18,160
didn't exist you know pre-2009

00:05:16,639 --> 00:05:19,759
and you know one of the things that i

00:05:18,160 --> 00:05:20,880
really enjoy about javascript is the

00:05:19,759 --> 00:05:23,440
fact that you can

00:05:20,880 --> 00:05:24,720
um you know you don't have to write

00:05:23,440 --> 00:05:26,479
really bespoke

00:05:24,720 --> 00:05:28,080
for loops or anything you can use these

00:05:26,479 --> 00:05:31,759
handy array functions like

00:05:28,080 --> 00:05:33,759
map and filter and things like that um

00:05:31,759 --> 00:05:34,960
yeah so that was kind of the big these

00:05:33,759 --> 00:05:38,639
are the big

00:05:34,960 --> 00:05:41,840
releases that came out of um the 20

00:05:38,639 --> 00:05:42,560
es5 um and then after that there wasn't

00:05:41,840 --> 00:05:46,400
much

00:05:42,560 --> 00:05:47,360
until um there wasn't a heat the next

00:05:46,400 --> 00:05:50,960
big release was

00:05:47,360 --> 00:05:53,680
es 2015 es6 and this is

00:05:50,960 --> 00:05:54,320
where you'll kind of see a lot online of

00:05:53,680 --> 00:05:56,400
you know

00:05:54,320 --> 00:05:59,199
chatter about the differences between

00:05:56,400 --> 00:06:01,280
es5 and es6 because previously the

00:05:59,199 --> 00:06:03,280
kind of each changing version wasn't

00:06:01,280 --> 00:06:03,919
drastically different but you did get a

00:06:03,280 --> 00:06:07,120
big

00:06:03,919 --> 00:06:08,800
shift from when you move from es5 to es6

00:06:07,120 --> 00:06:10,240
and we start getting

00:06:08,800 --> 00:06:11,840
again it was a big release and you have

00:06:10,240 --> 00:06:14,960
quite a lot of different

00:06:11,840 --> 00:06:16,319
um things that came out of that um

00:06:14,960 --> 00:06:18,240
i don't want this to be a really boring

00:06:16,319 --> 00:06:20,960
talk where you just stare at

00:06:18,240 --> 00:06:21,600
you know lists on powerpoint so i will

00:06:20,960 --> 00:06:23,600
try and

00:06:21,600 --> 00:06:25,360
um i have kind of put together a little

00:06:23,600 --> 00:06:27,440
bit of a demo for you

00:06:25,360 --> 00:06:29,199
i'll try and kind of go over some of the

00:06:27,440 --> 00:06:33,280
key features of the

00:06:29,199 --> 00:06:36,560
different um ecmascript versions since

00:06:33,280 --> 00:06:38,000
es5 onwards um

00:06:36,560 --> 00:06:40,560
i'll kind of just try and highlight the

00:06:38,000 --> 00:06:42,479
differences between them really so

00:06:40,560 --> 00:06:44,639
the big difference that i want to start

00:06:42,479 --> 00:06:47,360
with between es5 and es6

00:06:44,639 --> 00:06:48,080
is you'll probably you may or may not be

00:06:47,360 --> 00:06:51,280
familiar with

00:06:48,080 --> 00:06:53,039
in es5 when you want to um kind of

00:06:51,280 --> 00:06:55,360
import modules into your code

00:06:53,039 --> 00:06:57,039
you would specif you would declare them

00:06:55,360 --> 00:07:00,319
in this kind of format

00:06:57,039 --> 00:07:04,000
um and then from es6 onwards

00:07:00,319 --> 00:07:07,199
you have um

00:07:04,000 --> 00:07:08,960
sorry you have more of this um star

00:07:07,199 --> 00:07:11,039
where you can import

00:07:08,960 --> 00:07:12,000
um just straight like that and you can

00:07:11,039 --> 00:07:15,199
do kind of import

00:07:12,000 --> 00:07:17,120
asterix from the file name if you want

00:07:15,199 --> 00:07:19,599
um and similarly you also have slightly

00:07:17,120 --> 00:07:22,160
different formats for exports as well

00:07:19,599 --> 00:07:24,960
so in something like es5 you had a you

00:07:22,160 --> 00:07:28,880
know file that was yeah written in es5

00:07:24,960 --> 00:07:30,199
you would export your functions or

00:07:28,880 --> 00:07:32,560
variables and things using

00:07:30,199 --> 00:07:35,120
module.exports um

00:07:32,560 --> 00:07:35,919
whereas in something like es6 you can

00:07:35,120 --> 00:07:39,360
just kind of

00:07:35,919 --> 00:07:42,639
go straight away and

00:07:39,360 --> 00:07:44,960
um export something a bit like

00:07:42,639 --> 00:07:45,840
um just straight there from next to the

00:07:44,960 --> 00:07:49,280
the function

00:07:45,840 --> 00:07:50,879
um so that's kind of the importance and

00:07:49,280 --> 00:07:54,960
export side of things

00:07:50,879 --> 00:07:57,440
um with es6 you also got um some new

00:07:54,960 --> 00:08:00,080
um you've got some other new features

00:07:57,440 --> 00:08:02,800
like you got let and const

00:08:00,080 --> 00:08:03,599
um for those of you that don't know the

00:08:02,800 --> 00:08:05,759
difference

00:08:03,599 --> 00:08:07,360
i don't want to do a deep dive into the

00:08:05,759 --> 00:08:10,240
you know specifics of javascript

00:08:07,360 --> 00:08:11,599
but just a quick overview if you kind of

00:08:10,240 --> 00:08:13,599
declare something using let

00:08:11,599 --> 00:08:15,520
it means that you can reassign it later

00:08:13,599 --> 00:08:19,039
so here we said

00:08:15,520 --> 00:08:21,599
yoda my name yoda is and if you want to

00:08:19,039 --> 00:08:23,360
translate that you can reassign the

00:08:21,599 --> 00:08:24,319
value of what yoda is and it won't

00:08:23,360 --> 00:08:27,280
complain

00:08:24,319 --> 00:08:28,639
um whereas if you declare it as a

00:08:27,280 --> 00:08:31,120
constant

00:08:28,639 --> 00:08:32,719
you will get an error saying that you've

00:08:31,120 --> 00:08:34,240
tried to assign something to a constant

00:08:32,719 --> 00:08:37,440
variable

00:08:34,240 --> 00:08:39,120
um you may notice that i have been

00:08:37,440 --> 00:08:41,360
watching the new season of the

00:08:39,120 --> 00:08:42,880
mandalorians this week so you'll

00:08:41,360 --> 00:08:43,839
probably see a lot of um star wars

00:08:42,880 --> 00:08:46,959
references

00:08:43,839 --> 00:08:50,160
in this demo um just a heads up

00:08:46,959 --> 00:08:54,959
on that um what else did you get in

00:08:50,160 --> 00:08:58,080
es6 we also get classes so

00:08:54,959 --> 00:09:00,000
um actually one of my colleagues that

00:08:58,080 --> 00:09:02,480
today was talking to me she's very

00:09:00,000 --> 00:09:03,279
um keen on on java and she was saying

00:09:02,480 --> 00:09:05,279
how

00:09:03,279 --> 00:09:07,040
javascript is now trying to be like java

00:09:05,279 --> 00:09:09,279
and java is trying to be like javascript

00:09:07,040 --> 00:09:10,959
and i think you can kind of see that in

00:09:09,279 --> 00:09:12,720
the different versions of the languages

00:09:10,959 --> 00:09:15,760
that are being released um

00:09:12,720 --> 00:09:18,160
so in es6 we got kind of

00:09:15,760 --> 00:09:19,519
we got classes which are very similar to

00:09:18,160 --> 00:09:22,399
what you would get in

00:09:19,519 --> 00:09:23,760
um object programming languages like

00:09:22,399 --> 00:09:25,279
java where

00:09:23,760 --> 00:09:27,519
you can create a whole class of

00:09:25,279 --> 00:09:28,560
something and then it kind of makes it

00:09:27,519 --> 00:09:31,680
easier to create

00:09:28,560 --> 00:09:34,160
new instances of that class um so here

00:09:31,680 --> 00:09:35,600
we can console log out the characters

00:09:34,160 --> 00:09:36,880
that we've created here

00:09:35,600 --> 00:09:39,040
and you can see it comes up in the

00:09:36,880 --> 00:09:42,399
console as um

00:09:39,040 --> 00:09:44,000
an object of class character

00:09:42,399 --> 00:09:45,760
and that kind of suits people that

00:09:44,000 --> 00:09:48,720
prefer more kind of class

00:09:45,760 --> 00:09:50,320
based programming rather than just um

00:09:48,720 --> 00:09:52,959
functional based

00:09:50,320 --> 00:09:53,600
um yeah and then we also the big

00:09:52,959 --> 00:09:57,600
addition

00:09:53,600 --> 00:10:00,399
in es6 was um promises

00:09:57,600 --> 00:10:01,440
i could you know you could spend a whole

00:10:00,399 --> 00:10:03,600
meetup session

00:10:01,440 --> 00:10:04,959
explaining promises so i'm not gonna do

00:10:03,600 --> 00:10:07,200
that but

00:10:04,959 --> 00:10:08,480
here's just something for you to look at

00:10:07,200 --> 00:10:09,600
if you're not familiar with what a

00:10:08,480 --> 00:10:13,040
promise is

00:10:09,600 --> 00:10:16,160
you can resolve or reject the result

00:10:13,040 --> 00:10:19,279
um of a promise and you can chain

00:10:16,160 --> 00:10:19,760
promises together using dot then that

00:10:19,279 --> 00:10:21,440
was

00:10:19,760 --> 00:10:24,000
what was included in the release of

00:10:21,440 --> 00:10:26,079
promises in es6

00:10:24,000 --> 00:10:27,360
um yeah i think that's kind of the main

00:10:26,079 --> 00:10:30,800
things that

00:10:27,360 --> 00:10:33,040
i wanted to show you in the es6 version

00:10:30,800 --> 00:10:35,040
you also got a few other more obscure

00:10:33,040 --> 00:10:38,320
things you can find full details of

00:10:35,040 --> 00:10:42,320
these on websites like w3schools or

00:10:38,320 --> 00:10:45,839
um mdn and that kind of thing as well

00:10:42,320 --> 00:10:47,040
um so moving on to since es6 was the

00:10:45,839 --> 00:10:50,959
probably the

00:10:47,040 --> 00:10:53,200
biggest release in the past kind of

00:10:50,959 --> 00:10:55,200
past kind of five years or so and since

00:10:53,200 --> 00:10:55,839
then like each year they have done a

00:10:55,200 --> 00:10:58,320
release

00:10:55,839 --> 00:10:59,680
um and but they've been kind of smaller

00:10:58,320 --> 00:11:01,360
and they've had a fewer things so i'll

00:10:59,680 --> 00:11:04,399
try and kind of for the sake of time

00:11:01,360 --> 00:11:04,959
bunch them together um so key features

00:11:04,399 --> 00:11:08,320
that came

00:11:04,959 --> 00:11:12,839
in es 2016 and es2017

00:11:08,320 --> 00:11:15,760
um we get um exponent

00:11:12,839 --> 00:11:18,000
exponentiation um whereas previously

00:11:15,760 --> 00:11:20,320
you would have to kind of actually i

00:11:18,000 --> 00:11:23,600
think i have an example for you here

00:11:20,320 --> 00:11:26,079
yeah so previously in

00:11:23,600 --> 00:11:28,320
prior versions of javascript you would

00:11:26,079 --> 00:11:31,360
have to do something like math.pal

00:11:28,320 --> 00:11:32,240
um in order to kind of do um an exponent

00:11:31,360 --> 00:11:35,519
whereas

00:11:32,240 --> 00:11:37,760
now since es2016 it's just a lot easier

00:11:35,519 --> 00:11:39,600
kind of similar to python syntax you

00:11:37,760 --> 00:11:41,920
just do the double asterisks

00:11:39,600 --> 00:11:43,760
um and oh this is a good thing to

00:11:41,920 --> 00:11:47,279
highlight as well at this point

00:11:43,760 --> 00:11:49,279
is um ecmascript is

00:11:47,279 --> 00:11:50,639
javascript is completely backwards

00:11:49,279 --> 00:11:52,720
compatible so

00:11:50,639 --> 00:11:54,800
if you still like your old-fashioned

00:11:52,720 --> 00:11:56,720
version of javascript then you can

00:11:54,800 --> 00:11:58,639
you know still use that to your heart's

00:11:56,720 --> 00:12:00,639
content um

00:11:58,639 --> 00:12:01,839
it also is really and it won't you know

00:12:00,639 --> 00:12:04,160
interfere you can have a

00:12:01,839 --> 00:12:05,839
file which has a mixture of the newer

00:12:04,160 --> 00:12:08,720
versions the older versions

00:12:05,839 --> 00:12:10,959
um and it's fine and that also means if

00:12:08,720 --> 00:12:12,160
you have a kind of an older javascript

00:12:10,959 --> 00:12:13,519
project you don't

00:12:12,160 --> 00:12:15,600
need to feel like every time a new

00:12:13,519 --> 00:12:18,480
version releases you don't have to go

00:12:15,600 --> 00:12:19,760
back and rewrite everything um which is

00:12:18,480 --> 00:12:24,000
also nice

00:12:19,760 --> 00:12:27,839
um any other so another nice

00:12:24,000 --> 00:12:31,279
function we got in es 2016

00:12:27,839 --> 00:12:34,959
was another handy array function

00:12:31,279 --> 00:12:37,760
includes so you can kind of search a

00:12:34,959 --> 00:12:39,440
long array and if it include will return

00:12:37,760 --> 00:12:40,320
true or false based on whether it finds

00:12:39,440 --> 00:12:43,120
the

00:12:40,320 --> 00:12:43,920
object the string or object that you're

00:12:43,120 --> 00:12:47,920
looking for

00:12:43,920 --> 00:12:49,760
which is quite handy um

00:12:47,920 --> 00:12:51,200
so those were the main those are in fact

00:12:49,760 --> 00:12:52,639
that was the only stuff that came out in

00:12:51,200 --> 00:12:56,040
es7 that was a bit of a

00:12:52,639 --> 00:12:59,600
lazy year for them um for

00:12:56,040 --> 00:13:02,000
es2017 we get um

00:12:59,600 --> 00:13:03,040
yeah we kind of get some more object

00:13:02,000 --> 00:13:05,600
functions

00:13:03,040 --> 00:13:06,240
um we also get the biggest one that we

00:13:05,600 --> 00:13:09,959
get in

00:13:06,240 --> 00:13:11,279
um sorry the biggest one that we get in

00:13:09,959 --> 00:13:15,040
es2017

00:13:11,279 --> 00:13:19,040
is the ability to do async functions um

00:13:15,040 --> 00:13:22,160
so this is when you're as we saw in es6

00:13:19,040 --> 00:13:23,120
when you're creating promises normally

00:13:22,160 --> 00:13:26,000
if you want to

00:13:23,120 --> 00:13:27,519
kind of chain different things together

00:13:26,000 --> 00:13:31,600
you have to do

00:13:27,519 --> 00:13:32,959
um a dot then and then

00:13:31,600 --> 00:13:34,880
you want to wait for your promise to

00:13:32,959 --> 00:13:36,000
resolve or reject and then move on to

00:13:34,880 --> 00:13:37,120
the next thing and the next thing and

00:13:36,000 --> 00:13:41,199
the next thing

00:13:37,120 --> 00:13:45,600
um with es20

00:13:41,199 --> 00:13:47,279
2017 we get the um async and await

00:13:45,600 --> 00:13:49,199
which i personally really like to use a

00:13:47,279 --> 00:13:51,279
lot because that means i don't have to

00:13:49,199 --> 00:13:54,000
have long chains of dot then dot n dot

00:13:51,279 --> 00:13:55,839
n dot then um i can just kind of wait

00:13:54,000 --> 00:13:58,320
for the promise to complete

00:13:55,839 --> 00:13:59,440
um and then the next line won't execute

00:13:58,320 --> 00:14:01,120
until that

00:13:59,440 --> 00:14:03,120
um the result of that promise has come

00:14:01,120 --> 00:14:05,279
back um so that's

00:14:03,120 --> 00:14:07,279
uh really handy some people have very

00:14:05,279 --> 00:14:10,399
strong opinions about whether they like

00:14:07,279 --> 00:14:12,320
dot then or the async await format

00:14:10,399 --> 00:14:14,079
i think it's a bit like marmite you

00:14:12,320 --> 00:14:16,560
either love it or you hate it

00:14:14,079 --> 00:14:18,160
you know i won't try and tell you which

00:14:16,560 --> 00:14:20,639
one is better i'll let you make your own

00:14:18,160 --> 00:14:23,760
minds up

00:14:20,639 --> 00:14:23,760
um all right

00:14:24,959 --> 00:14:29,279
so how are we doing for time okay try

00:14:27,760 --> 00:14:33,519
and speed through a bit

00:14:29,279 --> 00:14:35,199
so that yes 2018 and 2019.

00:14:33,519 --> 00:14:36,839
what do we get here we got a few more

00:14:35,199 --> 00:14:40,320
things um

00:14:36,839 --> 00:14:42,639
es2018 we get um

00:14:40,320 --> 00:14:44,399
the most interesting stuff i think about

00:14:42,639 --> 00:14:47,279
es 2018 as we get

00:14:44,399 --> 00:14:49,120
dot finally the spread operator we also

00:14:47,279 --> 00:14:52,240
get a few regular expressions

00:14:49,120 --> 00:14:55,839
um functions as well

00:14:52,240 --> 00:14:56,399
um for let's see if i'll show you a demo

00:14:55,839 --> 00:14:59,120
so

00:14:56,399 --> 00:15:00,000
spread operators honestly is probably my

00:14:59,120 --> 00:15:03,120
favorite

00:15:00,000 --> 00:15:04,560
of the newer javascript functions if you

00:15:03,120 --> 00:15:05,680
i use it all the time especially if

00:15:04,560 --> 00:15:07,360
you're doing

00:15:05,680 --> 00:15:09,360
react and you have you're trying to

00:15:07,360 --> 00:15:10,560
update state it kind of just saves you a

00:15:09,360 --> 00:15:12,560
lot of time

00:15:10,560 --> 00:15:14,000
um for those of you who aren't familiar

00:15:12,560 --> 00:15:16,639
with spread operators

00:15:14,000 --> 00:15:17,839
and this is just a quick example for

00:15:16,639 --> 00:15:19,680
example you have a

00:15:17,839 --> 00:15:22,160
an object called spaceship and it has a

00:15:19,680 --> 00:15:25,600
name pilot and copilot

00:15:22,160 --> 00:15:26,880
um key value pairs say you want to

00:15:25,600 --> 00:15:28,800
create a new spaceship

00:15:26,880 --> 00:15:30,000
and it's going to be exactly the same as

00:15:28,800 --> 00:15:32,240
your old spaceship

00:15:30,000 --> 00:15:34,240
but you just want a new pilot you don't

00:15:32,240 --> 00:15:37,040
have to kind of rewrite

00:15:34,240 --> 00:15:38,800
every single line you can just use the

00:15:37,040 --> 00:15:41,440
spread operator to say

00:15:38,800 --> 00:15:42,720
i want everything that was in spaceship

00:15:41,440 --> 00:15:45,040
except

00:15:42,720 --> 00:15:47,279
pilot which i'm going to reassign and

00:15:45,040 --> 00:15:49,360
then you can see here

00:15:47,279 --> 00:15:51,920
you have spaceship on your new spaceship

00:15:49,360 --> 00:15:54,959
they contain exactly the same

00:15:51,920 --> 00:15:56,560
attributes key value pairs but just with

00:15:54,959 --> 00:15:56,959
the one change that you wanted i use

00:15:56,560 --> 00:15:59,279
this one

00:15:56,959 --> 00:16:01,519
all the time because i like to be

00:15:59,279 --> 00:16:04,800
efficient and it just saves me time and

00:16:01,519 --> 00:16:07,759
energy and it's great um

00:16:04,800 --> 00:16:08,720
what else did we get in 2018 we get dot

00:16:07,759 --> 00:16:12,560
finally

00:16:08,720 --> 00:16:15,759
so this is again with promises um

00:16:12,560 --> 00:16:17,519
if you have a long chain of promises

00:16:15,759 --> 00:16:20,160
and you want to specify something that's

00:16:17,519 --> 00:16:20,160
going to happen

00:16:20,320 --> 00:16:23,600
way at the end after the all the thens

00:16:22,639 --> 00:16:26,959
after the catch

00:16:23,600 --> 00:16:29,040
then you can add dot finally um

00:16:26,959 --> 00:16:31,360
so for example in our promise here we

00:16:29,040 --> 00:16:32,880
have our promise resolves

00:16:31,360 --> 00:16:35,440
then we can say we want to do something

00:16:32,880 --> 00:16:37,120
else we might want to catch the error

00:16:35,440 --> 00:16:39,759
and then only once everything else has

00:16:37,120 --> 00:16:42,320
been completed then we have

00:16:39,759 --> 00:16:42,800
finally we can do whatever we want in

00:16:42,320 --> 00:16:46,079
this

00:16:42,800 --> 00:16:50,480
dot finally section

00:16:46,079 --> 00:16:53,920
um and then moving on to es2019

00:16:50,480 --> 00:16:57,519
we get um another few

00:16:53,920 --> 00:17:00,240
kind of helpful um array

00:16:57,519 --> 00:17:00,720
functions we get some string functions

00:17:00,240 --> 00:17:04,240
as well

00:17:00,720 --> 00:17:07,439
sorry um i'll just

00:17:04,240 --> 00:17:08,480
demo a few of them quickly so dot flat

00:17:07,439 --> 00:17:12,480
is just if you have

00:17:08,480 --> 00:17:15,280
nested arrays you can um flatten them

00:17:12,480 --> 00:17:16,959
kind of the clues in the name um also if

00:17:15,280 --> 00:17:18,880
you have for example arrays

00:17:16,959 --> 00:17:20,240
within arrays within a raise you can

00:17:18,880 --> 00:17:22,799
also chain your

00:17:20,240 --> 00:17:24,480
dot flat to kind of flatten it as as

00:17:22,799 --> 00:17:25,679
many times as you need which is really

00:17:24,480 --> 00:17:28,960
nice

00:17:25,679 --> 00:17:29,840
um optional catch binding we got that as

00:17:28,960 --> 00:17:33,360
well

00:17:29,840 --> 00:17:35,280
so that's previously for example in

00:17:33,360 --> 00:17:37,120
if you see in our promise here if you

00:17:35,280 --> 00:17:37,360
want to catch an error you have to pass

00:17:37,120 --> 00:17:39,039
an

00:17:37,360 --> 00:17:40,640
argument normally which is the error

00:17:39,039 --> 00:17:44,240
itself um

00:17:40,640 --> 00:17:46,000
from es2019 onwards you don't need to do

00:17:44,240 --> 00:17:49,440
that anymore you can just have

00:17:46,000 --> 00:17:52,640
a catch without any um

00:17:49,440 --> 00:17:54,480
without any um parameter passed in which

00:17:52,640 --> 00:17:56,960
really nice

00:17:54,480 --> 00:17:57,679
and then one of the most random ones

00:17:56,960 --> 00:18:00,080
that i found

00:17:57,679 --> 00:18:02,559
added which um i don't know just

00:18:00,080 --> 00:18:07,039
entertains me if you really want to

00:18:02,559 --> 00:18:09,840
you can since um es2019 came out you can

00:18:07,039 --> 00:18:11,679
just convert any random function to a

00:18:09,840 --> 00:18:13,760
string if you want to and it will

00:18:11,679 --> 00:18:15,280
for example here i've just created a

00:18:13,760 --> 00:18:17,840
simple function

00:18:15,280 --> 00:18:19,600
and if i wanted to console log it out i

00:18:17,840 --> 00:18:21,679
could console log it out i have no idea

00:18:19,600 --> 00:18:24,240
why you would ever want to use this

00:18:21,679 --> 00:18:25,919
function maybe someone who knows

00:18:24,240 --> 00:18:26,559
javascript better than me can tell me

00:18:25,919 --> 00:18:27,919
what use

00:18:26,559 --> 00:18:29,440
i have for this but i just thought it

00:18:27,919 --> 00:18:30,960
was funky and i wanted to share that

00:18:29,440 --> 00:18:32,160
with you all today i didn't know that

00:18:30,960 --> 00:18:34,240
this existed

00:18:32,160 --> 00:18:35,200
before i did the research for this talk

00:18:34,240 --> 00:18:37,679
so

00:18:35,200 --> 00:18:39,039
um yeah just wanted to share that with

00:18:37,679 --> 00:18:41,679
you today

00:18:39,039 --> 00:18:43,039
um and then what else do we get right

00:18:41,679 --> 00:18:43,919
okay we're almost we're on the home

00:18:43,039 --> 00:18:46,880
stretch guys

00:18:43,919 --> 00:18:47,919
we're almost up to the present day yes

00:18:46,880 --> 00:18:51,120
00:18:47,919 --> 00:18:51,919
we get some things some mathematical

00:18:51,120 --> 00:18:54,400
things

00:18:51,919 --> 00:18:55,440
big int basically means the javascript

00:18:54,400 --> 00:18:58,000
can now deal with

00:18:55,440 --> 00:18:58,960
really big integers whereas before it

00:18:58,000 --> 00:19:02,160
could only deal with

00:18:58,960 --> 00:19:05,120
slightly less big integers um we get

00:19:02,160 --> 00:19:07,440
dynamic imports and optional chaining

00:19:05,120 --> 00:19:09,280
um a bunch of other just kind of random

00:19:07,440 --> 00:19:12,880
assortment of helpful things

00:19:09,280 --> 00:19:16,000
another promise um another promise

00:19:12,880 --> 00:19:19,520
uh function there um

00:19:16,000 --> 00:19:20,799
and in es2021 um

00:19:19,520 --> 00:19:22,320
i won't show you this because it's been

00:19:20,799 --> 00:19:23,200
unreleased we're gonna get some really

00:19:22,320 --> 00:19:27,200
cool stuff

00:19:23,200 --> 00:19:30,640
um some another array function for

00:19:27,200 --> 00:19:33,840
replace all which is where you can just

00:19:30,640 --> 00:19:36,400
um for example if you had a

00:19:33,840 --> 00:19:37,440
long string you could just do replace

00:19:36,400 --> 00:19:38,960
all and then

00:19:37,440 --> 00:19:40,799
replace any substrings within that

00:19:38,960 --> 00:19:42,480
string that you want so if you had

00:19:40,799 --> 00:19:44,720
something that said

00:19:42,480 --> 00:19:47,520
dogs are the best i love dogs you could

00:19:44,720 --> 00:19:50,960
do replace all with cats and say

00:19:47,520 --> 00:19:54,240
and then replace that all with cats um

00:19:50,960 --> 00:19:56,480
promise dot any um is

00:19:54,240 --> 00:19:57,840
another i won't go into a lot of details

00:19:56,480 --> 00:20:02,240
i don't want to make this all about

00:19:57,840 --> 00:20:03,760
promises um basically there's a lot of

00:20:02,240 --> 00:20:06,240
cool things that you get with every

00:20:03,760 --> 00:20:07,280
version of javascript and the best place

00:20:06,240 --> 00:20:10,559
if you want to know

00:20:07,280 --> 00:20:12,960
what is coming is um to look at the

00:20:10,559 --> 00:20:14,080
online docs things like w3schools does

00:20:12,960 --> 00:20:18,159
really good

00:20:14,080 --> 00:20:21,200
um resources on this um

00:20:18,159 --> 00:20:22,799
so does mdn uh web docs as well

00:20:21,200 --> 00:20:24,960
you'll find loads of people writing blog

00:20:22,799 --> 00:20:27,520
posts about what's coming next

00:20:24,960 --> 00:20:30,080
um the one thing that you i do want to

00:20:27,520 --> 00:20:33,360
highlight before i run out of time

00:20:30,080 --> 00:20:35,679
is if you ever see the term yes next um

00:20:33,360 --> 00:20:36,559
that's kind of colloquial term for

00:20:35,679 --> 00:20:39,760
whatever is

00:20:36,559 --> 00:20:41,440
the next version of ecmascript um

00:20:39,760 --> 00:20:43,039
so whatever one is not currently

00:20:41,440 --> 00:20:45,440
released right now

00:20:43,039 --> 00:20:46,960
um and then browse compatibility that's

00:20:45,440 --> 00:20:48,240
a really important thing to take into

00:20:46,960 --> 00:20:52,080
account um

00:20:48,240 --> 00:20:54,240
so currently the browsers always kind of

00:20:52,080 --> 00:20:57,200
update slower than their language does

00:20:54,240 --> 00:20:59,520
so and they don't always necessarily

00:20:57,200 --> 00:21:02,720
release an update of a browser which has

00:20:59,520 --> 00:21:04,080
the compatibility which has um

00:21:02,720 --> 00:21:06,159
which has all of the features of the

00:21:04,080 --> 00:21:09,760
next version of ecmascript

00:21:06,159 --> 00:21:11,520
so and that can cause issues when you're

00:21:09,760 --> 00:21:13,440
writing your code you can have errors in

00:21:11,520 --> 00:21:14,240
different some something that might work

00:21:13,440 --> 00:21:16,880
in chrome

00:21:14,240 --> 00:21:17,679
might not work in firefox depending on

00:21:16,880 --> 00:21:19,600
what

00:21:17,679 --> 00:21:21,280
the feature is of the specific version

00:21:19,600 --> 00:21:22,880
that you're trying to use

00:21:21,280 --> 00:21:25,200
um and that can be really important to

00:21:22,880 --> 00:21:26,559
make sure that your um

00:21:25,200 --> 00:21:27,760
that whatever code you're writing if

00:21:26,559 --> 00:21:29,440
it's going to be run in the browser like

00:21:27,760 --> 00:21:30,559
make sure that it's accessible to people

00:21:29,440 --> 00:21:33,760
that are using

00:21:30,559 --> 00:21:34,080
different browsers you can either kind

00:21:33,760 --> 00:21:36,559
of

00:21:34,080 --> 00:21:38,720
again check the documentation there's a

00:21:36,559 --> 00:21:39,360
really good website called can i use

00:21:38,720 --> 00:21:42,559
which

00:21:39,360 --> 00:21:43,760
if you want to use a funky array method

00:21:42,559 --> 00:21:46,240
that you don't know

00:21:43,760 --> 00:21:47,840
is in the current version of javascript

00:21:46,240 --> 00:21:50,559
that's supported on

00:21:47,840 --> 00:21:51,200
safari then you can use the can i use

00:21:50,559 --> 00:21:54,320
website

00:21:51,200 --> 00:21:58,000
to check if that function is supported

00:21:54,320 --> 00:22:01,200
um or you could just um

00:21:58,000 --> 00:22:03,039
use transpilers like babel or webpack

00:22:01,200 --> 00:22:05,440
um if you don't know what a transpiler

00:22:03,039 --> 00:22:06,320
is um essentially what that does is it

00:22:05,440 --> 00:22:07,919
just kind of

00:22:06,320 --> 00:22:09,919
if you have a project and you're using a

00:22:07,919 --> 00:22:12,880
mixture of all different types of

00:22:09,919 --> 00:22:14,559
um javascript versions then you can use

00:22:12,880 --> 00:22:17,600
something like babel or webpack

00:22:14,559 --> 00:22:19,760
to essentially just translate any later

00:22:17,600 --> 00:22:21,360
version you're using back down to an

00:22:19,760 --> 00:22:22,880
earlier version that will be supported

00:22:21,360 --> 00:22:24,880
in the browsers that you want to

00:22:22,880 --> 00:22:26,240
run your code in um so that's really

00:22:24,880 --> 00:22:27,280
useful and this is stuff that you should

00:22:26,240 --> 00:22:28,640
definitely

00:22:27,280 --> 00:22:30,159
think about whenever you're trying to

00:22:28,640 --> 00:22:30,880
develop anything that's going to be used

00:22:30,159 --> 00:22:33,280
by people

00:22:30,880 --> 00:22:35,039
on the web because you never know

00:22:33,280 --> 00:22:37,039
there's probably someone's grandma

00:22:35,039 --> 00:22:37,919
somewhere who are still using internet

00:22:37,039 --> 00:22:40,400
explorer

00:22:37,919 --> 00:22:41,200
and so will not you know be able to read

00:22:40,400 --> 00:22:44,799
your website

00:22:41,200 --> 00:22:48,640
if you haven't you know properly um

00:22:44,799 --> 00:22:49,440
considered that um really last quick

00:22:48,640 --> 00:22:52,799
thing

00:22:49,440 --> 00:22:56,799
is ecmastrict is an open standard um

00:22:52,799 --> 00:22:58,480
fun fact we call um any languages that

00:22:56,799 --> 00:22:59,200
are open source we call them open

00:22:58,480 --> 00:23:02,559
standards

00:22:59,200 --> 00:23:04,880
only projects um or source code

00:23:02,559 --> 00:23:05,679
can be referred to as open source so

00:23:04,880 --> 00:23:08,159
when we say

00:23:05,679 --> 00:23:08,960
that um something like a language is

00:23:08,159 --> 00:23:10,880
available

00:23:08,960 --> 00:23:12,559
um for you to look at online and

00:23:10,880 --> 00:23:13,440
contribute to we call it an open

00:23:12,559 --> 00:23:15,840
standard

00:23:13,440 --> 00:23:16,720
um an exp an ecmascript is one of those

00:23:15,840 --> 00:23:20,159
open standards

00:23:16,720 --> 00:23:21,200
so if you really want to see a certain

00:23:20,159 --> 00:23:25,280
feature

00:23:21,200 --> 00:23:26,080
um in the next version of javascript you

00:23:25,280 --> 00:23:29,280
can

00:23:26,080 --> 00:23:31,520
go um to the

00:23:29,280 --> 00:23:32,400
their github you can have a look through

00:23:31,520 --> 00:23:34,799
what's coming

00:23:32,400 --> 00:23:36,559
you can look up how to contribute you

00:23:34,799 --> 00:23:38,799
can see all the proposals that are going

00:23:36,559 --> 00:23:42,480
to go into the next version

00:23:38,799 --> 00:23:46,080
um of ecmascript um

00:23:42,480 --> 00:23:48,720
yeah and you can even see which which um

00:23:46,080 --> 00:23:50,159
versions are kind of at different stages

00:23:48,720 --> 00:23:52,320
in the approval process

00:23:50,159 --> 00:23:54,320
stage four means that it's 100

00:23:52,320 --> 00:23:56,080
definitely going in the next version

00:23:54,320 --> 00:23:58,559
and then there's kind of different tiers

00:23:56,080 --> 00:24:00,960
of um approval for different things

00:23:58,559 --> 00:24:02,400
um so if you're looking to if you're

00:24:00,960 --> 00:24:03,760
just curious or you want to get more

00:24:02,400 --> 00:24:05,919
involved in open source like this is

00:24:03,760 --> 00:24:06,320
definitely a nice place to have a poke

00:24:05,919 --> 00:24:08,480
around

00:24:06,320 --> 00:24:09,600
it's very well kind of structured and

00:24:08,480 --> 00:24:13,440
put together and

00:24:09,600 --> 00:24:15,840
everything is reviewed by committee um

00:24:13,440 --> 00:24:17,520
so yeah i think that was kind of is that

00:24:15,840 --> 00:24:18,080
the last thing i have to show with you

00:24:17,520 --> 00:24:20,320
yes i

00:24:18,080 --> 00:24:21,679
do we did it and i kind of was on time

00:24:20,320 --> 00:24:23,840
which is great

00:24:21,679 --> 00:24:25,279
um thanks very much everyone for

00:24:23,840 --> 00:24:29,200
listening and i hope

00:24:25,279 --> 00:24:29,200

YouTube URL: https://www.youtube.com/watch?v=auTKfwfWrw8


