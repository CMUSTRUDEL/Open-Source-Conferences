Title: JS Monthly: Webpack 5 | Type Systems | Algolia - Live Stream - October 2020
Publication date: 2020-10-29
Playlist: JS Monthly London
Description: 
	2:54 Intro
8:31 Fantastic (Webpack) 5 // Tim Benniks
30:25 Under-the-hood of type systems (e.g. TypeScript) // Craig Taub
53:25 Q&A
1:00:46 Find Me If You Can: Algolia Search is Easy // Gleb Bahmutov
1:32:43 Q&A and Outro

Following an amazing 2 day conference, we're hosting JS Monthly this October with 3 fantastic talks. So kick back and enjoy the event.

We'll be hosting a Q&A right here on the YouTube channel - so leave your questions in the comments!

Agenda
Fantastic (Webpack) 5 // Tim Benniks

Tim will take us through the new features of Webpack 5 and also provide some examples where we could benefit in our day to day development

Under-the-hood of type systems (e.g. TypeScript) // Craig Taub

This talk aims to shine a light on some of the fundamentals at work under-the-hood for type systems such as TypeScript or Flow. It is not possible to focus on everything in 1 article so here we will be looking at "type checks" specifically.

Starting with an overview of type systems then building our own compiler which can run type checks and output sensible messages.

A blog post for this video can be found here: https://craigtaub.dev/under-the-hood-of-type-systems

Break

Find Me If You Can: Algolia Search is Easy // Gleb Bahmutov

Having a good text search is the key to successful documentation, especially as the number of pages, examples, code recipes, answers, and other =user-facing text snippets grows. In this presentation, I will show how to set up the Algolia search index and use it from a static site to make sure your users find _everything_ they are looking for.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Please give us enough notice if you can't make it so that other people can take your place.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have a talk we'd love to hear from you.

Submit your talk here:(https://docs.google.com/forms/d/e/1FAIpQLSdFaatfveOUbrmer47jYb5J4J4ttxAFc1CgTjUDltBXmDOJmg/viewform)

// *****************************
// Conferences
//******************************

CityJS Conference (26 Mar 2021) http://CityJSConf.org

Regent Street Cinema - Hurry up only a few tickets left!

Early birds only for 120 pounds

A hybrid event

// *****************************
// Follow us
//******************************

Follow us on twitter:
https://twitter.com/jsmonthlylondon


______________
Pusher is a hosted API provider which gives developers with the tools they need to build vital realtime experiences for users; from remote collaboration to dashboards, gaming, polls, live location, chat, notifications and more. Use the Channels and Beams services to bypass complex WebSocket, FCM and APNS infrastructure and quickly boost engagement, collaboration and retention.

It's easy for healthcare application developers to stay HIPAA compliant with Pusher Channels using a simply to implement end-to-end encryption feature.

Sign up and start building for free with the Sandbox plan today: https://bit.ly/3gnCrwP
Captions: 
	00:00:00,340 --> 00:00:35,679
[Music]

00:00:43,910 --> 00:01:00,360
[Music]

00:01:03,430 --> 00:01:10,650
[Music]

00:01:10,840 --> 00:01:13,840
so

00:01:23,350 --> 00:02:43,759
[Music]

00:02:56,640 --> 00:03:03,040
all right thank you uh

00:02:59,840 --> 00:03:05,159
hi all and welcome to uh seventh

00:03:03,040 --> 00:03:06,319
uh js monthly online meetup

00:03:05,159 --> 00:03:09,440
unfortunately

00:03:06,319 --> 00:03:12,000
uh we are still under like very bad

00:03:09,440 --> 00:03:14,879
circumstances because of the coronavirus

00:03:12,000 --> 00:03:15,920
but we are still managing to organize

00:03:14,879 --> 00:03:18,800
these meetups

00:03:15,920 --> 00:03:19,920
and uh we are really glad that you are

00:03:18,800 --> 00:03:22,720
joining us

00:03:19,920 --> 00:03:25,440
uh today we are going to be having um

00:03:22,720 --> 00:03:25,440
three talks

00:03:27,519 --> 00:03:32,799
uh three talks uh first

00:03:30,640 --> 00:03:34,640
i'm sorry for the messed up schedule but

00:03:32,799 --> 00:03:36,560
today the first talk is going to be uh

00:03:34,640 --> 00:03:38,319
by tim and he's going to be talking to

00:03:36,560 --> 00:03:41,040
us about uh webpack

00:03:38,319 --> 00:03:42,480
after that we are going to have uh craig

00:03:41,040 --> 00:03:45,360
that is going to talk about

00:03:42,480 --> 00:03:46,480
typescript and lastly but not least

00:03:45,360 --> 00:03:49,200
we're going to have

00:03:46,480 --> 00:03:51,599
uh glebgoy that's going to tell us about

00:03:49,200 --> 00:03:53,280
algolia search

00:03:51,599 --> 00:03:55,599
my name is milos for those of you who

00:03:53,280 --> 00:03:59,360
don't know and you can find me at

00:03:55,599 --> 00:04:00,319
twitter with the tag at happy underscore

00:03:59,360 --> 00:04:02,319
fist

00:04:00,319 --> 00:04:03,519
and if you have any questions for me

00:04:02,319 --> 00:04:06,799
regarding the meetup

00:04:03,519 --> 00:04:07,519
or anything else regarding javascript

00:04:06,799 --> 00:04:09,680
you can

00:04:07,519 --> 00:04:12,840
uh drop me at the end or you can contact

00:04:09,680 --> 00:04:14,400
us such as monthlylondon

00:04:12,840 --> 00:04:17,680
gmail.com

00:04:14,400 --> 00:04:20,720
uh we

00:04:17,680 --> 00:04:21,759
currently this agenda is not um right if

00:04:20,720 --> 00:04:23,680
you want to check the

00:04:21,759 --> 00:04:25,440
the correct agenda you can go to

00:04:23,680 --> 00:04:27,520
meetup.com and

00:04:25,440 --> 00:04:28,479
see the updated agenda i apologize for

00:04:27,520 --> 00:04:30,400
that

00:04:28,479 --> 00:04:32,560
we had some last minute changes because

00:04:30,400 --> 00:04:34,479
we had a speaker from

00:04:32,560 --> 00:04:36,080
and we have a speaker from france and

00:04:34,479 --> 00:04:40,000
francis uh

00:04:36,080 --> 00:04:42,400
going to a lockdown today so like it was

00:04:40,000 --> 00:04:44,960
kind of hard to juggle everything and

00:04:42,400 --> 00:04:44,960
make it work

00:04:45,120 --> 00:04:52,479
uh we would like to say big thank you to

00:04:48,960 --> 00:04:52,880
pusha which is a company that sponsors

00:04:52,479 --> 00:04:56,479
this

00:04:52,880 --> 00:04:56,800
meetup and a shout out to devpost which

00:04:56,479 --> 00:05:00,240
is

00:04:56,800 --> 00:05:01,919
a company that organizes that bodies up

00:05:00,240 --> 00:05:05,039
with companies and organizes

00:05:01,919 --> 00:05:06,800
uh hackathons where you can uh win uh

00:05:05,039 --> 00:05:09,600
prizes so if you have

00:05:06,800 --> 00:05:10,080
any uh downtown in your developer life

00:05:09,600 --> 00:05:12,479
and

00:05:10,080 --> 00:05:13,360
have some free time make sure to head

00:05:12,479 --> 00:05:15,199
out to

00:05:13,360 --> 00:05:16,639
their website and check there any

00:05:15,199 --> 00:05:18,720
hackathons that you might be interested

00:05:16,639 --> 00:05:18,720
in

00:05:19,039 --> 00:05:25,520
you can contact us at js monthly london

00:05:23,039 --> 00:05:27,199
and if you are interested in promoting

00:05:25,520 --> 00:05:30,160
us you can

00:05:27,199 --> 00:05:32,080
write a tweet about us and just add

00:05:30,160 --> 00:05:35,759
hashtag jazz monthly

00:05:32,080 --> 00:05:36,560
online the last thing that i would like

00:05:35,759 --> 00:05:39,440
to mention

00:05:36,560 --> 00:05:39,759
is half stack conference halfstack has

00:05:39,440 --> 00:05:42,880
been

00:05:39,759 --> 00:05:44,800
with us for i think

00:05:42,880 --> 00:05:46,639
four years now they've been helping us

00:05:44,800 --> 00:05:48,800
reorganizing our meetups and with

00:05:46,639 --> 00:05:52,160
organizing city jazz conference

00:05:48,800 --> 00:05:54,160
uh the conference is live uh tomorrow so

00:05:52,160 --> 00:05:57,919
if you don't have a ticket make sure

00:05:54,160 --> 00:06:02,479
that you go to hopsterconf.com

00:05:57,919 --> 00:06:02,479
online and grab yourself one

00:06:02,560 --> 00:06:08,880
thank you very much also

00:06:06,400 --> 00:06:10,639
one more thing that i would like to

00:06:08,880 --> 00:06:13,039
mention

00:06:10,639 --> 00:06:14,880
is uh that we are looking for uh new

00:06:13,039 --> 00:06:17,199
faces at js monthly london

00:06:14,880 --> 00:06:18,960
so if you are interested in uh helping

00:06:17,199 --> 00:06:21,840
us out and helping out the javascript

00:06:18,960 --> 00:06:25,600
community uh you can drop us an email

00:06:21,840 --> 00:06:27,360
i'm going to post uh this pdf as a

00:06:25,600 --> 00:06:30,080
comment on youtube so

00:06:27,360 --> 00:06:31,360
um actually not the the whole pdf but

00:06:30,080 --> 00:06:33,680
you're gonna get a link

00:06:31,360 --> 00:06:34,560
uh if you are interested in what we are

00:06:33,680 --> 00:06:38,319
doing and

00:06:34,560 --> 00:06:41,120
you're willing to help us out uh

00:06:38,319 --> 00:06:42,960
make sure that you drop us a message and

00:06:41,120 --> 00:06:45,440
we'll be in contact with you

00:06:42,960 --> 00:06:46,000
uh i think that that's it regarding me

00:06:45,440 --> 00:06:48,479
uh

00:06:46,000 --> 00:07:03,840
we can head over to tim for his first

00:06:48,479 --> 00:07:03,840
talk about webpack

00:07:13,450 --> 00:07:16,210
[Music]

00:07:14,840 --> 00:08:44,640
so

00:07:16,210 --> 00:08:48,240
[Music]

00:08:44,640 --> 00:08:50,880
i think i am ready to rock so

00:08:48,240 --> 00:08:51,600
in this video we will talk about webpack

00:08:50,880 --> 00:08:54,560
5 and

00:08:51,600 --> 00:08:56,160
all the new stuff that it offers let's

00:08:54,560 --> 00:08:58,399
roll

00:08:56,160 --> 00:08:59,200
you can watch this video either on

00:08:58,399 --> 00:09:01,040
youtube

00:08:59,200 --> 00:09:02,240
and if you do please consider

00:09:01,040 --> 00:09:04,240
subscribing or

00:09:02,240 --> 00:09:06,080
liking or whatever you do and whatever

00:09:04,240 --> 00:09:08,160
youtubers keep asking

00:09:06,080 --> 00:09:09,760
i don't ask very often but you know once

00:09:08,160 --> 00:09:11,920
in a while cannot hurt

00:09:09,760 --> 00:09:12,959
and the other way that you can watch

00:09:11,920 --> 00:09:15,600
this video is

00:09:12,959 --> 00:09:17,360
probably by being forced right you're at

00:09:15,600 --> 00:09:19,360
a meet-up or you're at a conference and

00:09:17,360 --> 00:09:20,080
this is one of those pre-recorded talks

00:09:19,360 --> 00:09:22,640
that you'll be

00:09:20,080 --> 00:09:24,240
watching so because of that i will also

00:09:22,640 --> 00:09:26,240
introduce myself because

00:09:24,240 --> 00:09:27,360
you kind of want to know your speaker

00:09:26,240 --> 00:09:29,440
right who is this that

00:09:27,360 --> 00:09:30,880
is talking to you on a youtube video

00:09:29,440 --> 00:09:32,800
that might be a little bit off so you

00:09:30,880 --> 00:09:34,560
can find chapter markers

00:09:32,800 --> 00:09:36,320
in the video so you can switch if you

00:09:34,560 --> 00:09:39,839
wanted to so

00:09:36,320 --> 00:09:41,920
let's dive in and marvel at this

00:09:39,839 --> 00:09:44,000
you know hours worth of photoshop that i

00:09:41,920 --> 00:09:47,360
did for this talk

00:09:44,000 --> 00:09:50,560
here we go so aris

00:09:47,360 --> 00:09:52,959
who is organizing this meetup

00:09:50,560 --> 00:09:54,880
link in the description he told me tim

00:09:52,959 --> 00:09:57,120
webpack five is awesome

00:09:54,880 --> 00:09:59,440
but it's also fantastic and four was

00:09:57,120 --> 00:10:02,000
also fantastic but now we are five so

00:09:59,440 --> 00:10:02,959
why not do some like fantastic four kind

00:10:02,000 --> 00:10:06,000
of

00:10:02,959 --> 00:10:08,399
superhero theme and i thought yes

00:10:06,000 --> 00:10:10,480
i like superheroes and i don't really

00:10:08,399 --> 00:10:11,839
watch all the new marvel videos or

00:10:10,480 --> 00:10:14,880
marvel movies but

00:10:11,839 --> 00:10:17,279
actually those 60s cartoons are awesome

00:10:14,880 --> 00:10:20,640
so that's where this cover came from

00:10:17,279 --> 00:10:21,760
okay on to the talk now so as i said

00:10:20,640 --> 00:10:23,360
just now

00:10:21,760 --> 00:10:25,120
i'll introduce myself because this is

00:10:23,360 --> 00:10:25,600
actually conference talk so my name is

00:10:25,120 --> 00:10:28,720
tim

00:10:25,600 --> 00:10:31,920
you can follow me here on twitter i

00:10:28,720 --> 00:10:33,200
am dutch but i live in paris so born and

00:10:31,920 --> 00:10:34,959
raised in amsterdam

00:10:33,200 --> 00:10:36,880
and that's also why my accent is a

00:10:34,959 --> 00:10:38,079
little bit off it's not entirely english

00:10:36,880 --> 00:10:41,040
it's not really french

00:10:38,079 --> 00:10:42,480
and it's a little dutch whatever there

00:10:41,040 --> 00:10:44,800
you go that's me

00:10:42,480 --> 00:10:46,560
so i work as director of front end

00:10:44,800 --> 00:10:49,040
development at valtec

00:10:46,560 --> 00:10:50,640
and i'm also a media developer expert at

00:10:49,040 --> 00:10:53,040
cloudinary

00:10:50,640 --> 00:10:55,200
and i have a little bit of news that i

00:10:53,040 --> 00:10:56,399
am very proud to announce today in this

00:10:55,200 --> 00:11:00,640
video is that i am

00:10:56,399 --> 00:11:02,320
also a next ambassador yes

00:11:00,640 --> 00:11:04,640
that just happened and i'm really happy

00:11:02,320 --> 00:11:06,560
because you know what i love next and

00:11:04,640 --> 00:11:08,320
next is in almost all my videos and all

00:11:06,560 --> 00:11:11,360
my talks so there you go

00:11:08,320 --> 00:11:14,000
thank you guys that's super awesome okay

00:11:11,360 --> 00:11:14,399
now it's time for the talk so what is

00:11:14,000 --> 00:11:18,160
new

00:11:14,399 --> 00:11:20,640
in webpack 5 but first

00:11:18,160 --> 00:11:23,040
i would say let's do a quick refresher

00:11:20,640 --> 00:11:25,680
on how webpack actually works

00:11:23,040 --> 00:11:26,079
and why those new features in version 5

00:11:25,680 --> 00:11:29,040
are

00:11:26,079 --> 00:11:29,440
so much better than what it was in

00:11:29,040 --> 00:11:31,279
future

00:11:29,440 --> 00:11:33,200
in version 4 even though it's already

00:11:31,279 --> 00:11:35,920
cool right so here we go

00:11:33,200 --> 00:11:36,320
so webpack is a static module bundler

00:11:35,920 --> 00:11:39,440
for

00:11:36,320 --> 00:11:41,200
modern js apps i guess everybody kind of

00:11:39,440 --> 00:11:43,360
already knows this and you just use it

00:11:41,200 --> 00:11:46,560
as is and it works really well

00:11:43,360 --> 00:11:49,600
right so let's talk about what did we do

00:11:46,560 --> 00:11:51,279
before web pack like steve ballmer is

00:11:49,600 --> 00:11:52,399
like truly back in the day when he was

00:11:51,279 --> 00:11:56,079
shouting developers

00:11:52,399 --> 00:11:59,360
look at him go man such majesticness

00:11:56,079 --> 00:12:00,639
anyways so back in the day we had static

00:11:59,360 --> 00:12:02,079
assets on our website right

00:12:00,639 --> 00:12:03,600
so we had them in the source and they

00:12:02,079 --> 00:12:04,399
were just pushed to the browser and

00:12:03,600 --> 00:12:06,000
that's it

00:12:04,399 --> 00:12:08,240
if you had 10 javascript files we would

00:12:06,000 --> 00:12:11,360
just serve 10 of them

00:12:08,240 --> 00:12:15,760
then we actually started to think about

00:12:11,360 --> 00:12:17,920
okay so now we have a lot of small files

00:12:15,760 --> 00:12:19,600
but then http is a little bit slow and

00:12:17,920 --> 00:12:21,440
if we load a lot of files there's too

00:12:19,600 --> 00:12:22,639
much overhead things are slow so we

00:12:21,440 --> 00:12:24,240
decided you know what we need to

00:12:22,639 --> 00:12:26,639
concatenate them

00:12:24,240 --> 00:12:28,320
and we had php magic we had other stuff

00:12:26,639 --> 00:12:30,560
too right but we had some sort of magic

00:12:28,320 --> 00:12:32,240
where we can concatenate things

00:12:30,560 --> 00:12:33,839
like two javascript files would become

00:12:32,240 --> 00:12:35,040
one bigger file and that would actually

00:12:33,839 --> 00:12:37,040
be faster

00:12:35,040 --> 00:12:39,120
and then we got things like yui

00:12:37,040 --> 00:12:40,000
compressor and a whole bunch of others

00:12:39,120 --> 00:12:42,240
that i won't dive

00:12:40,000 --> 00:12:43,760
into now that made our lives a lot

00:12:42,240 --> 00:12:45,600
easier but there was a lot of

00:12:43,760 --> 00:12:46,959
you know there's a big tool set you

00:12:45,600 --> 00:12:49,760
needed a back-end developer and a

00:12:46,959 --> 00:12:52,880
front-ender to to do all this stuff

00:12:49,760 --> 00:12:53,200
and then jumping a whole bunch of steps

00:12:52,880 --> 00:12:57,600
here

00:12:53,200 --> 00:13:00,880
but then we got to the era of webpack

00:12:57,600 --> 00:13:02,720
where basically webpack still does magic

00:13:00,880 --> 00:13:04,560
but actually it's not that magical i

00:13:02,720 --> 00:13:06,160
have another talk

00:13:04,560 --> 00:13:08,000
or a video where you can actually see

00:13:06,160 --> 00:13:10,320
how webpack really works on the inside

00:13:08,000 --> 00:13:13,519
and i'll link it in one of those cards

00:13:10,320 --> 00:13:15,120
but basically webpack would have a

00:13:13,519 --> 00:13:16,800
dependency graph

00:13:15,120 --> 00:13:18,480
you would include everything into your

00:13:16,800 --> 00:13:20,480
main file and then webpack would be

00:13:18,480 --> 00:13:22,160
super smart based on loaders and all the

00:13:20,480 --> 00:13:25,200
things that it has

00:13:22,160 --> 00:13:27,120
to output highly optimized assets for

00:13:25,200 --> 00:13:30,000
your website

00:13:27,120 --> 00:13:31,040
wow that was a crash course right there

00:13:30,000 --> 00:13:34,399
so

00:13:31,040 --> 00:13:36,560
i photoshopped a lot for this talk so

00:13:34,399 --> 00:13:38,560
i just kept like three or four of them

00:13:36,560 --> 00:13:40,800
in there and only for the parts that

00:13:38,560 --> 00:13:43,680
count because it was just too much work

00:13:40,800 --> 00:13:45,920
so now with that we know webpack let's

00:13:43,680 --> 00:13:47,120
dive into what version 5 actually can

00:13:45,920 --> 00:13:50,639
give us

00:13:47,120 --> 00:13:53,279
right so um there's a whole list here

00:13:50,639 --> 00:13:54,800
right so um i know there's a bunch more

00:13:53,279 --> 00:13:57,760
than i'm going to tell you now

00:13:54,800 --> 00:13:59,760
but this is more of a shorter video to

00:13:57,760 --> 00:14:00,399
get you inspired and try to use it right

00:13:59,760 --> 00:14:03,040
so

00:14:00,399 --> 00:14:03,440
faster builds with persistent caching we

00:14:03,040 --> 00:14:06,560
have

00:14:03,440 --> 00:14:08,959
smaller bundle sizes we have better long

00:14:06,560 --> 00:14:10,560
term caching and the big one module

00:14:08,959 --> 00:14:14,000
federation

00:14:10,560 --> 00:14:16,000
right so let's dive right in and i know

00:14:14,000 --> 00:14:17,519
people who are a bit more expert-like

00:14:16,000 --> 00:14:19,440
on webpack they know there's a bunch of

00:14:17,519 --> 00:14:21,120
other stuff i know too

00:14:19,440 --> 00:14:22,720
and i'm really excited but for this

00:14:21,120 --> 00:14:23,839
video we're gonna keep it relatively

00:14:22,720 --> 00:14:27,600
short

00:14:23,839 --> 00:14:29,360
okay so how do we have faster builds

00:14:27,600 --> 00:14:30,639
right so basically the thing that they

00:14:29,360 --> 00:14:33,839
did is really smart

00:14:30,639 --> 00:14:35,120
the caching is really good now it was

00:14:33,839 --> 00:14:37,920
good already but now

00:14:35,120 --> 00:14:40,240
you can also have cached stuff module

00:14:37,920 --> 00:14:42,639
stuff that you use all the time

00:14:40,240 --> 00:14:44,240
on the file system right so it doesn't

00:14:42,639 --> 00:14:46,959
have to repopulate or

00:14:44,240 --> 00:14:48,000
re um compile everything the moment you

00:14:46,959 --> 00:14:51,120
hit save

00:14:48,000 --> 00:14:52,399
or when you click build right so stuff

00:14:51,120 --> 00:14:54,160
that's in use all the time

00:14:52,399 --> 00:14:55,600
is actually cached so it's much easier

00:14:54,160 --> 00:14:57,920
to grab and put in

00:14:55,600 --> 00:14:59,680
and therefore you have faster builds

00:14:57,920 --> 00:15:01,440
it's a very simplified explanation but

00:14:59,680 --> 00:15:05,120
this is actually really really

00:15:01,440 --> 00:15:07,920
convenient then smaller bundle sizes

00:15:05,120 --> 00:15:08,720
we all want smaller bundle sizes right

00:15:07,920 --> 00:15:10,959
and

00:15:08,720 --> 00:15:12,880
you get smaller bundle sizes generally

00:15:10,959 --> 00:15:15,040
by something called tree shaking

00:15:12,880 --> 00:15:16,720
so a tree shaking is kind of like you

00:15:15,040 --> 00:15:18,240
have a whole tree of all this javascript

00:15:16,720 --> 00:15:21,040
stuff and stuff you don't need you just

00:15:18,240 --> 00:15:22,240
snap off and you don't use so webpack 4

00:15:21,040 --> 00:15:25,440
does this really well

00:15:22,240 --> 00:15:27,279
already but in webpack 5 it got way

00:15:25,440 --> 00:15:30,079
smarter so they can actually

00:15:27,279 --> 00:15:31,279
even if you use a specific part of a

00:15:30,079 --> 00:15:33,279
module

00:15:31,279 --> 00:15:35,360
it can inside that module now also

00:15:33,279 --> 00:15:38,000
remove that code so everything becomes

00:15:35,360 --> 00:15:38,480
even smaller really really nice stuff

00:15:38,000 --> 00:15:40,079
guys

00:15:38,480 --> 00:15:41,600
i don't know how you do it but it's it's

00:15:40,079 --> 00:15:44,399
magical

00:15:41,600 --> 00:15:46,639
then we have better long-term caching

00:15:44,399 --> 00:15:48,720
which is also a pretty

00:15:46,639 --> 00:15:50,320
interesting thing and it's actually kind

00:15:48,720 --> 00:15:53,279
of an open door

00:15:50,320 --> 00:15:53,680
but what they did now is if you add like

00:15:53,279 --> 00:15:56,000
well

00:15:53,680 --> 00:15:56,880
let's say what we used to have when you

00:15:56,000 --> 00:15:58,560
add

00:15:56,880 --> 00:16:00,320
anything to your file and you make

00:15:58,560 --> 00:16:01,920
another build

00:16:00,320 --> 00:16:04,399
the file names would change based on a

00:16:01,920 --> 00:16:06,639
hash right the hash of the file inside

00:16:04,399 --> 00:16:08,399
and therefore if you now deploy all your

00:16:06,639 --> 00:16:11,199
stuff for a new deploy

00:16:08,399 --> 00:16:12,160
all files are invalidated because they

00:16:11,199 --> 00:16:14,160
all have another

00:16:12,160 --> 00:16:15,199
name so the browser have to re-fetch

00:16:14,160 --> 00:16:16,880
them

00:16:15,199 --> 00:16:18,639
and now if you add a comment or you

00:16:16,880 --> 00:16:19,279
change a variable name or stuff like

00:16:18,639 --> 00:16:21,279
that

00:16:19,279 --> 00:16:22,800
it won't actually change the name of

00:16:21,279 --> 00:16:24,240
that junk for you anymore

00:16:22,800 --> 00:16:26,399
because there's not that much different

00:16:24,240 --> 00:16:28,240
it still works right a comment doesn't

00:16:26,399 --> 00:16:29,360
change your code a variable name doesn't

00:16:28,240 --> 00:16:33,040
change your code

00:16:29,360 --> 00:16:35,120
so because of that browsers can now

00:16:33,040 --> 00:16:36,480
cache the same way as they always did

00:16:35,120 --> 00:16:38,320
but because the names don't always

00:16:36,480 --> 00:16:39,600
change on every update you don't have to

00:16:38,320 --> 00:16:42,000
recache

00:16:39,600 --> 00:16:43,759
right so less cash invalidation and

00:16:42,000 --> 00:16:47,120
therefore better long-term cash

00:16:43,759 --> 00:16:50,800
this is a really good one guys

00:16:47,120 --> 00:16:52,800
and then the big one i'm calling this

00:16:50,800 --> 00:16:54,959
the big one module federation because

00:16:52,800 --> 00:16:56,639
there's a whole bunch of cool stuff that

00:16:54,959 --> 00:16:59,839
now suddenly

00:16:56,639 --> 00:17:01,759
happens or is possible

00:16:59,839 --> 00:17:03,759
actually model federation already worked

00:17:01,759 --> 00:17:04,559
in webpack 4 through a really cool

00:17:03,759 --> 00:17:07,439
plugin

00:17:04,559 --> 00:17:08,559
i'll link that below but now it's native

00:17:07,439 --> 00:17:10,559
right so

00:17:08,559 --> 00:17:11,600
basically i would say yay for micro

00:17:10,559 --> 00:17:13,839
frontends

00:17:11,600 --> 00:17:14,959
like in a whole bunch of projects that i

00:17:13,839 --> 00:17:17,839
do at work

00:17:14,959 --> 00:17:21,120
which is pretty big enterprise stuff for

00:17:17,839 --> 00:17:22,959
example we have

00:17:21,120 --> 00:17:24,880
a whole bunch of separate applications

00:17:22,959 --> 00:17:28,240
for a car brand

00:17:24,880 --> 00:17:30,559
or a dealership right we have checking

00:17:28,240 --> 00:17:32,720
license plates it's a little app we have

00:17:30,559 --> 00:17:34,960
a car configurator is a little app

00:17:32,720 --> 00:17:36,160
we have a checkout flow for all those

00:17:34,960 --> 00:17:38,400
different kind of

00:17:36,160 --> 00:17:39,919
i lease this car but i buy that part

00:17:38,400 --> 00:17:41,360
myself and there's like that's a little

00:17:39,919 --> 00:17:42,880
app like we have a whole bunch of

00:17:41,360 --> 00:17:45,039
applications

00:17:42,880 --> 00:17:46,400
and the drawback of having all these

00:17:45,039 --> 00:17:48,160
applications

00:17:46,400 --> 00:17:50,640
is that you cannot really share your

00:17:48,160 --> 00:17:54,240
bundles every application has its own

00:17:50,640 --> 00:17:56,799
full bundle size and you kind of want to

00:17:54,240 --> 00:17:59,520
figure out how you can actually expose

00:17:56,799 --> 00:18:03,360
certain features from certain bundles so

00:17:59,520 --> 00:18:05,600
apps can share right and this

00:18:03,360 --> 00:18:06,720
is what module federation does in

00:18:05,600 --> 00:18:08,559
webpack 5.

00:18:06,720 --> 00:18:10,799
so basically each app or each bundle

00:18:08,559 --> 00:18:13,919
that you build can expose

00:18:10,799 --> 00:18:15,280
or ingest external components or

00:18:13,919 --> 00:18:16,640
functions or whatever

00:18:15,280 --> 00:18:18,000
so you can make one bundle with the

00:18:16,640 --> 00:18:19,280
header and the footer and that's just

00:18:18,000 --> 00:18:21,440
exposed

00:18:19,280 --> 00:18:22,640
and then all of the apps will just get

00:18:21,440 --> 00:18:25,360
those and

00:18:22,640 --> 00:18:26,640
guys this is life-changing for big

00:18:25,360 --> 00:18:27,440
companies that have a whole bunch of

00:18:26,640 --> 00:18:30,559
applications

00:18:27,440 --> 00:18:32,960
all working with webpack that now

00:18:30,559 --> 00:18:34,080
constantly has to serve all new bundles

00:18:32,960 --> 00:18:36,559
for every user

00:18:34,080 --> 00:18:39,280
but now with webpack 5 with module

00:18:36,559 --> 00:18:42,400
federation this is no longer a problem

00:18:39,280 --> 00:18:43,600
yes i can finally re-architect all those

00:18:42,400 --> 00:18:45,360
big systems

00:18:43,600 --> 00:18:47,039
and make it just way better for the end

00:18:45,360 --> 00:18:48,240
user and that's what it's all about

00:18:47,039 --> 00:18:51,919
right

00:18:48,240 --> 00:18:55,600
so i went really quite fast over these

00:18:51,919 --> 00:18:56,720
and now let's look at the braking

00:18:55,600 --> 00:18:58,559
changes

00:18:56,720 --> 00:19:00,400
because basically what they did is they

00:18:58,559 --> 00:19:02,160
decided okay we have a new version now

00:19:00,400 --> 00:19:04,320
there's a bunch of braking changes

00:19:02,160 --> 00:19:05,520
let's do them all now so in the future

00:19:04,320 --> 00:19:07,520
we can be more stable

00:19:05,520 --> 00:19:08,799
because webpack tends to be a system

00:19:07,520 --> 00:19:10,640
that is just i

00:19:08,799 --> 00:19:12,640
set it and forget it i touch it twice a

00:19:10,640 --> 00:19:14,000
year right it just works

00:19:12,640 --> 00:19:15,520
so you don't want to have too many

00:19:14,000 --> 00:19:16,640
breaking jsons over time you just want

00:19:15,520 --> 00:19:20,240
to have it once

00:19:16,640 --> 00:19:22,240
so fix your stuff right so what they did

00:19:20,240 --> 00:19:24,880
is from webpack 4 there's a bunch of

00:19:22,240 --> 00:19:28,480
things that are deprecated so right now

00:19:24,880 --> 00:19:30,080
that deprecation warning it still works

00:19:28,480 --> 00:19:32,320
but it's a warning in webpack five

00:19:30,080 --> 00:19:33,280
that's gone so if you are moving to

00:19:32,320 --> 00:19:34,960
webpack five

00:19:33,280 --> 00:19:37,120
and you have a whole bunch of those

00:19:34,960 --> 00:19:38,000
warnings make sure you solve those

00:19:37,120 --> 00:19:42,000
warnings before

00:19:38,000 --> 00:19:43,440
moving then some of the built-in plugins

00:19:42,000 --> 00:19:45,280
have changed

00:19:43,440 --> 00:19:46,640
we don't we won't discuss which those

00:19:45,280 --> 00:19:48,240
are but it's like the way you give them

00:19:46,640 --> 00:19:51,840
properties and stuff like that it's just

00:19:48,240 --> 00:19:54,080
streamlining things then and this is a

00:19:51,840 --> 00:19:57,120
bigger one that has a bit of hate

00:19:54,080 --> 00:19:59,200
from some people is that by default

00:19:57,120 --> 00:20:00,880
webpack would actually polyfill a lot of

00:19:59,200 --> 00:20:03,120
things from node.js

00:20:00,880 --> 00:20:04,400
right so if you build a node component

00:20:03,120 --> 00:20:05,919
or node module

00:20:04,400 --> 00:20:07,679
that would always work on the web

00:20:05,919 --> 00:20:10,320
because of some polyfills

00:20:07,679 --> 00:20:12,400
and that's really really cool but it's

00:20:10,320 --> 00:20:14,640
also a bit bloaty and it's like

00:20:12,400 --> 00:20:16,720
now they decided to remove it and you

00:20:14,640 --> 00:20:18,000
can write your own polyfills to be super

00:20:16,720 --> 00:20:19,440
optimized

00:20:18,000 --> 00:20:22,000
and it's also better for the code base

00:20:19,440 --> 00:20:25,280
of webpack five but i can imagine

00:20:22,000 --> 00:20:27,280
people who are note um module builders

00:20:25,280 --> 00:20:28,640
um probably now might get a bunch of

00:20:27,280 --> 00:20:30,159
tickets in there or

00:20:28,640 --> 00:20:31,919
issues in their githubs saying hey but

00:20:30,159 --> 00:20:33,360
it doesn't work in the browser

00:20:31,919 --> 00:20:35,280
and they might complain that they

00:20:33,360 --> 00:20:37,840
actually have to add support for

00:20:35,280 --> 00:20:39,600
webpack now you know what i guess for

00:20:37,840 --> 00:20:42,000
the future this is the way to go

00:20:39,600 --> 00:20:43,679
you know dino is coming in at one point

00:20:42,000 --> 00:20:45,600
and so they kind of need to

00:20:43,679 --> 00:20:47,360
streamline stuff but this is kind of a

00:20:45,600 --> 00:20:50,000
hard one

00:20:47,360 --> 00:20:51,280
and now the last one should you upgrade

00:20:50,000 --> 00:20:53,679
right now

00:20:51,280 --> 00:20:54,640
i would say it really depends on your

00:20:53,679 --> 00:20:56,480
project

00:20:54,640 --> 00:20:58,640
right if you have a completely

00:20:56,480 --> 00:21:00,240
customized webpack setup

00:20:58,640 --> 00:21:02,000
and you know what you're doing you've

00:21:00,240 --> 00:21:03,919
worked with that all the time

00:21:02,000 --> 00:21:05,919
this is an excellent moment to just

00:21:03,919 --> 00:21:07,520
switch right if you know it already you

00:21:05,919 --> 00:21:08,080
have custom stuff you can just update

00:21:07,520 --> 00:21:10,640
things

00:21:08,080 --> 00:21:11,600
but if you use something like you know

00:21:10,640 --> 00:21:14,720
react scripts

00:21:11,600 --> 00:21:16,480
or defuse cli or whatever kind of

00:21:14,720 --> 00:21:18,880
packaging system that gives you all the

00:21:16,480 --> 00:21:21,200
features you want as black magic

00:21:18,880 --> 00:21:24,559
don't touch it just yet let react

00:21:21,200 --> 00:21:27,280
scripts add v5 add fusela let fear

00:21:24,559 --> 00:21:28,400
wow let view cli add some new stuff and

00:21:27,280 --> 00:21:30,960
then just

00:21:28,400 --> 00:21:32,559
benefit later on right that's just the

00:21:30,960 --> 00:21:36,159
easiest way to go

00:21:32,559 --> 00:21:39,360
so this was like super fast like

00:21:36,159 --> 00:21:41,679
the fantastic five webpack um

00:21:39,360 --> 00:21:42,720
an overview of webpack five so i really

00:21:41,679 --> 00:21:45,840
want to thank you

00:21:42,720 --> 00:21:49,200
for watching and you can follow me

00:21:45,840 --> 00:21:50,960
at tim bennex and twitter you can also

00:21:49,200 --> 00:21:52,480
subscribe to me on youtube where i do a

00:21:50,960 --> 00:21:53,120
whole bunch of those kind of videos i

00:21:52,480 --> 00:21:55,679
have like

00:21:53,120 --> 00:21:56,640
41 videos out now at the time of

00:21:55,679 --> 00:21:58,080
recording so

00:21:56,640 --> 00:21:59,679
there's a whole bunch of stuff you can

00:21:58,080 --> 00:22:02,559
dive into and

00:21:59,679 --> 00:22:03,120
last but not least i actually decided to

00:22:02,559 --> 00:22:05,600
start

00:22:03,120 --> 00:22:07,120
a sponsorship or donations page at buy

00:22:05,600 --> 00:22:10,159
me a coffee

00:22:07,120 --> 00:22:11,440
um i have done this because there's so

00:22:10,159 --> 00:22:12,799
much work that goes

00:22:11,440 --> 00:22:15,039
into these kind of videos this is

00:22:12,799 --> 00:22:16,320
probably like take 50 like it needs to

00:22:15,039 --> 00:22:19,440
be correct

00:22:16,320 --> 00:22:20,799
right so um if you wanted to please

00:22:19,440 --> 00:22:23,919
consider

00:22:20,799 --> 00:22:26,080
either subscribing or even donating i

00:22:23,919 --> 00:22:29,200
would love you forever

00:22:26,080 --> 00:22:32,240
and that's it thank you

00:22:29,200 --> 00:22:41,840
very much and have fun at your

00:22:32,240 --> 00:22:41,840
meetup cheers

00:22:48,559 --> 00:22:52,080
all right uh tim thank you very much

00:22:51,200 --> 00:22:54,480
that was

00:22:52,080 --> 00:22:57,840
an amazing talk an amazing amazing

00:22:54,480 --> 00:22:57,840
production amazing music

00:22:58,000 --> 00:23:03,360
so unfortunately tim was not

00:23:01,600 --> 00:23:05,280
live with us this was a pre-recorded

00:23:03,360 --> 00:23:08,159
talk uh because

00:23:05,280 --> 00:23:10,320
uh tim is in france and france is

00:23:08,159 --> 00:23:11,840
currently going into into the lockdown

00:23:10,320 --> 00:23:12,559
so he had to prepare everything in

00:23:11,840 --> 00:23:15,120
advance

00:23:12,559 --> 00:23:16,559
and we won't have team with us uh at q a

00:23:15,120 --> 00:23:18,720
uh q a session

00:23:16,559 --> 00:23:20,080
but he told us that if you have any

00:23:18,720 --> 00:23:23,840
questions for him you can

00:23:20,080 --> 00:23:26,960
always uh dm him uh on twitter

00:23:23,840 --> 00:23:30,320
uh at team benics i think is his

00:23:26,960 --> 00:23:33,280
handle uh if uh i'm wrong you can just

00:23:30,320 --> 00:23:34,000
uh check his twitter handle at almeida

00:23:33,280 --> 00:23:36,400
page

00:23:34,000 --> 00:23:38,000
uh once again thank you very much and

00:23:36,400 --> 00:23:39,840
we're going to have a short break

00:23:38,000 --> 00:23:42,320
and we'll be back with you in five

00:23:39,840 --> 00:23:42,880
minutes uh more precisely at seven

00:23:42,320 --> 00:23:50,600
o'clock

00:23:42,880 --> 00:24:30,840
see you then

00:23:50,600 --> 00:24:33,660
[Music]

00:24:30,840 --> 00:25:26,180
room

00:24:33,660 --> 00:25:26,180
[Music]

00:25:26,840 --> 00:25:54,099
wow

00:25:28,360 --> 00:25:54,099
[Music]

00:25:54,840 --> 00:26:11,840
do wow

00:26:14,980 --> 00:26:52,890
[Music]

00:26:50,840 --> 00:26:57,559
so

00:26:52,890 --> 00:26:57,559
[Music]

00:26:59,850 --> 00:28:56,759
[Music]

00:28:56,840 --> 00:30:07,039
so

00:28:58,190 --> 00:30:09,600
[Music]

00:30:07,039 --> 00:30:11,279
all right thank you all for waiting uh

00:30:09,600 --> 00:30:13,919
the next talk is going to be

00:30:11,279 --> 00:30:14,559
under the hood of type systems uh by

00:30:13,919 --> 00:30:16,640
craig

00:30:14,559 --> 00:30:18,080
so craig is going to tell us a bit about

00:30:16,640 --> 00:30:20,880
uh fundamentals

00:30:18,080 --> 00:30:23,840
of how the type systems work uh off the

00:30:20,880 --> 00:30:27,120
craig

00:30:23,840 --> 00:30:29,360
so hi everyone my name is craig um

00:30:27,120 --> 00:30:30,399
i struggled to find an explanation from

00:30:29,360 --> 00:30:32,399
a low-level view

00:30:30,399 --> 00:30:34,159
of exactly how a javascript type system

00:30:32,399 --> 00:30:36,000
compiler is implemented

00:30:34,159 --> 00:30:38,080
i understood many of the jobs of the

00:30:36,000 --> 00:30:39,679
type system but was really unsure on the

00:30:38,080 --> 00:30:40,799
mechanisms involved and how they work

00:30:39,679 --> 00:30:42,880
together

00:30:40,799 --> 00:30:44,399
so this talk aims to shine a light on

00:30:42,880 --> 00:30:46,559
the fundamentals at work

00:30:44,399 --> 00:30:48,480
under the hood it's not possible to

00:30:46,559 --> 00:30:49,679
focus on everything in one talk

00:30:48,480 --> 00:30:51,919
so here we're going to be looking at

00:30:49,679 --> 00:30:53,840
type checks specifically we're going to

00:30:51,919 --> 00:30:55,440
start with an overview of type systems

00:30:53,840 --> 00:30:57,600
then build our own compiler which can

00:30:55,440 --> 00:30:59,440
run type checks and output some sensible

00:30:57,600 --> 00:31:02,080
messages

00:30:59,440 --> 00:31:04,000
so first a little bit about me i'm

00:31:02,080 --> 00:31:06,399
producing an under the hood of series

00:31:04,000 --> 00:31:08,559
which this is actually a part of so far

00:31:06,399 --> 00:31:10,720
it includes webpack react hooks

00:31:08,559 --> 00:31:12,000
source maps vs code and there's a couple

00:31:10,720 --> 00:31:13,440
of others

00:31:12,000 --> 00:31:15,279
they usually include building a small

00:31:13,440 --> 00:31:17,679
proof of concept to demonstrate the

00:31:15,279 --> 00:31:19,760
internal mechanisms of the tool

00:31:17,679 --> 00:31:22,240
i'm an engineer at fit where a startup

00:31:19,760 --> 00:31:24,080
helping people create fitness habits

00:31:22,240 --> 00:31:25,679
i'm a member of the mokka core team for

00:31:24,080 --> 00:31:27,279
a little over two and a half years

00:31:25,679 --> 00:31:28,880
so i'm a big advocate of testing and

00:31:27,279 --> 00:31:30,480
open source

00:31:28,880 --> 00:31:33,039
i'm a big football fan of a championship

00:31:30,480 --> 00:31:36,320
club qpr and you can find me on twitter

00:31:33,039 --> 00:31:38,559
and github at craigtob

00:31:36,320 --> 00:31:40,000
so this talk is going to be broken down

00:31:38,559 --> 00:31:42,720
into two parts

00:31:40,000 --> 00:31:44,240
uh plan a pi is going to be an overview

00:31:42,720 --> 00:31:46,159
of type system compilers

00:31:44,240 --> 00:31:48,080
including typescript we're going to look

00:31:46,159 --> 00:31:51,279
at syntax versus semantics

00:31:48,080 --> 00:31:52,720
what is ast types of compilers language

00:31:51,279 --> 00:31:54,559
compilers on their jobs

00:31:52,720 --> 00:31:56,000
and then part b will be building our own

00:31:54,559 --> 00:31:58,559
type system compiler

00:31:56,000 --> 00:32:00,080
which looks at the parser the checker

00:31:58,559 --> 00:32:00,799
running our own compiler and then

00:32:00,080 --> 00:32:02,640
finally

00:32:00,799 --> 00:32:03,919
what have we missed and that's going to

00:32:02,640 --> 00:32:06,080
be having a look at what

00:32:03,919 --> 00:32:08,880
the things that ours do not do that most

00:32:06,080 --> 00:32:12,559
other compilers would do

00:32:08,880 --> 00:32:12,559
so let's start with an overview

00:32:12,720 --> 00:32:15,840
so something which is important to run

00:32:14,320 --> 00:32:17,679
over early is the difference between

00:32:15,840 --> 00:32:19,919
syntax and semantics

00:32:17,679 --> 00:32:21,279
syntax is typically code which is native

00:32:19,919 --> 00:32:22,799
to javascript

00:32:21,279 --> 00:32:24,399
you're essentially asking if the given

00:32:22,799 --> 00:32:25,279
code is correct for the javascript

00:32:24,399 --> 00:32:27,679
runtime

00:32:25,279 --> 00:32:28,880
for example the below might be some

00:32:27,679 --> 00:32:31,440
correct although

00:32:28,880 --> 00:32:32,720
ignoring the the type and then some and

00:32:31,440 --> 00:32:34,799
then the semantics

00:32:32,720 --> 00:32:36,080
so this is code specific to the type

00:32:34,799 --> 00:32:37,840
system that is

00:32:36,080 --> 00:32:39,440
essentially asking if the given types

00:32:37,840 --> 00:32:40,799
attached to the code are correct

00:32:39,440 --> 00:32:42,960
for example the above could be

00:32:40,799 --> 00:32:44,799
syntactically correct but semantically

00:32:42,960 --> 00:32:45,360
wrong as we're defining a variable with

00:32:44,799 --> 00:32:48,720
a number

00:32:45,360 --> 00:32:50,720
we're setting it as a string so

00:32:48,720 --> 00:32:51,840
before we go much further we need to

00:32:50,720 --> 00:32:53,440
take a quick look at one of the

00:32:51,840 --> 00:32:54,559
important mechanisms inside of any

00:32:53,440 --> 00:32:57,679
javascript compiler

00:32:54,559 --> 00:32:58,559
that's ast so ast stands for abstract

00:32:57,679 --> 00:33:00,720
syntax tree

00:32:58,559 --> 00:33:02,880
as i'm sure many of you are aware it's

00:33:00,720 --> 00:33:06,159
basically a tree of nodes

00:33:02,880 --> 00:33:07,840
representing a program of code a node

00:33:06,159 --> 00:33:08,960
being the smallest possible unit

00:33:07,840 --> 00:33:11,440
and it's basically a plain old

00:33:08,960 --> 00:33:12,640
javascript object with type and location

00:33:11,440 --> 00:33:14,720
properties

00:33:12,640 --> 00:33:15,679
all nodes have those two properties but

00:33:14,720 --> 00:33:17,039
based on the type

00:33:15,679 --> 00:33:18,960
they can have various other properties

00:33:17,039 --> 00:33:21,760
as well so

00:33:18,960 --> 00:33:22,640
in ast form code is very easy to

00:33:21,760 --> 00:33:24,159
manipulate

00:33:22,640 --> 00:33:25,919
so operations like adding to code

00:33:24,159 --> 00:33:27,120
removing or even replacing parts becomes

00:33:25,919 --> 00:33:28,799
much easier

00:33:27,120 --> 00:33:30,960
an example is the code at the top you

00:33:28,799 --> 00:33:33,279
can the image and then just below that

00:33:30,960 --> 00:33:35,760
is the ast we produce and there are

00:33:33,279 --> 00:33:36,960
websites such as asd explorer.net

00:33:35,760 --> 00:33:38,240
which are great at letting you write

00:33:36,960 --> 00:33:41,600
some javascript code and then

00:33:38,240 --> 00:33:41,600
immediately seeing it's ast

00:33:41,919 --> 00:33:46,240
there are really two types of compilers

00:33:43,760 --> 00:33:48,080
which exist there are native compilers

00:33:46,240 --> 00:33:50,399
which convert code into a form that can

00:33:48,080 --> 00:33:52,720
be run by a server or a computer

00:33:50,399 --> 00:33:54,480
i.e machine code a compiler such as the

00:33:52,720 --> 00:33:56,480
one funding the java ecosystem

00:33:54,480 --> 00:33:58,159
converts code into bytecode and then

00:33:56,480 --> 00:33:59,600
into native machine code

00:33:58,159 --> 00:34:01,200
and then there's a language compiler

00:33:59,600 --> 00:34:03,600
which was quite a different role

00:34:01,200 --> 00:34:04,960
the compilers for typescript and flow

00:34:03,600 --> 00:34:07,600
and most other javascript

00:34:04,960 --> 00:34:08,800
uh tools uh both count in the category

00:34:07,600 --> 00:34:11,359
as language compilers

00:34:08,800 --> 00:34:13,040
as they output code into javascript the

00:34:11,359 --> 00:34:15,040
main difference with nato compilers

00:34:13,040 --> 00:34:17,280
is that they compile for for tooling's

00:34:15,040 --> 00:34:18,879
sake so for optimizing code performance

00:34:17,280 --> 00:34:21,119
or for adding additional features

00:34:18,879 --> 00:34:22,960
not to produce the machine code they all

00:34:21,119 --> 00:34:23,919
still rely on the javascript runtime

00:34:22,960 --> 00:34:27,040
native compiler

00:34:23,919 --> 00:34:29,280
to do that so

00:34:27,040 --> 00:34:30,399
a few of the core jobs found in any type

00:34:29,280 --> 00:34:33,200
system

00:34:30,399 --> 00:34:34,960
are one performing type checks by this i

00:34:33,200 --> 00:34:37,280
mean the introduction of types

00:34:34,960 --> 00:34:38,800
often via explicit annotations or

00:34:37,280 --> 00:34:40,639
implicit inference

00:34:38,800 --> 00:34:42,159
and a way to check that one type matches

00:34:40,639 --> 00:34:44,639
another

00:34:42,159 --> 00:34:45,599
and then there's transf two transforming

00:34:44,639 --> 00:34:47,440
code

00:34:45,599 --> 00:34:49,280
many type systems contain code which is

00:34:47,440 --> 00:34:50,960
not supported in native javascript

00:34:49,280 --> 00:34:52,720
for example type annotations are not

00:34:50,960 --> 00:34:55,040
supportive supported

00:34:52,720 --> 00:34:57,200
so they must transform from unsupported

00:34:55,040 --> 00:34:58,880
javascript to supported javascript

00:34:57,200 --> 00:35:01,200
i actually explore transforming code

00:34:58,880 --> 00:35:03,599
more in my post on web bundlers

00:35:01,200 --> 00:35:04,400
and my posts and source maps and then

00:35:03,599 --> 00:35:06,720
three

00:35:04,400 --> 00:35:08,079
run from a language server so for a type

00:35:06,720 --> 00:35:08,800
system to work in a development

00:35:08,079 --> 00:35:10,640
environment

00:35:08,800 --> 00:35:12,240
it's best if it can run any type checks

00:35:10,640 --> 00:35:14,160
in an ide and provide

00:35:12,240 --> 00:35:16,240
instant feedback for the user so

00:35:14,160 --> 00:35:18,400
language servers connect the type system

00:35:16,240 --> 00:35:19,520
to an ide they can run the compiler in

00:35:18,400 --> 00:35:22,400
the background and

00:35:19,520 --> 00:35:23,040
re-run when a user saves a file popular

00:35:22,400 --> 00:35:24,800
languages

00:35:23,040 --> 00:35:26,480
such as typescript from flow both

00:35:24,800 --> 00:35:29,200
contain a language server

00:35:26,480 --> 00:35:30,079
so for vs code users the main extinction

00:35:29,200 --> 00:35:32,079
spawns a language

00:35:30,079 --> 00:35:33,680
server uh you can actually see my blog

00:35:32,079 --> 00:35:35,200
post on vs code for a bit more of an

00:35:33,680 --> 00:35:37,280
in-depth look at those

00:35:35,200 --> 00:35:38,320
so as mentioned at the start we're just

00:35:37,280 --> 00:35:40,079
going to be focusing

00:35:38,320 --> 00:35:42,320
on point one today so that's performing

00:35:40,079 --> 00:35:45,440
type checks

00:35:42,320 --> 00:35:46,400
so how does a language compiler work so

00:35:45,440 --> 00:35:47,520
now we're going to look at a couple of

00:35:46,400 --> 00:35:49,280
the steps required

00:35:47,520 --> 00:35:51,680
to perform all the previously mentioned

00:35:49,280 --> 00:35:53,359
jobs in an efficient and scalable way

00:35:51,680 --> 00:35:55,760
there are three common jobs to most

00:35:53,359 --> 00:35:56,560
compilers in some form of an error of

00:35:55,760 --> 00:35:58,400
another

00:35:56,560 --> 00:35:59,760
step one is where you pass the source

00:35:58,400 --> 00:36:02,000
code into ast

00:35:59,760 --> 00:36:03,280
this involves lexical analysis which is

00:36:02,000 --> 00:36:05,280
turning a string of code

00:36:03,280 --> 00:36:06,480
into a stream of tokens and then

00:36:05,280 --> 00:36:08,480
syntactic analysis

00:36:06,480 --> 00:36:10,400
where we turn our stream of tokens into

00:36:08,480 --> 00:36:12,400
its ast representation

00:36:10,400 --> 00:36:14,240
passes uh are responsible for checking

00:36:12,400 --> 00:36:16,160
this syntax of the given code

00:36:14,240 --> 00:36:17,359
a type system will typically have to

00:36:16,160 --> 00:36:18,960
house its own parser

00:36:17,359 --> 00:36:20,640
often containing thousands of lines of

00:36:18,960 --> 00:36:22,720
code there are that

00:36:20,640 --> 00:36:24,240
a lot of them are open source like babel

00:36:22,720 --> 00:36:26,000
and tap skip but actually a lot of the

00:36:24,240 --> 00:36:28,800
the bigger libraries how's their own

00:36:26,000 --> 00:36:29,599
so the babel parser is just over 2 000

00:36:28,800 --> 00:36:31,680
lines of code

00:36:29,599 --> 00:36:33,520
to process the code statements which can

00:36:31,680 --> 00:36:33,920
understand the syntactical analysis of

00:36:33,520 --> 00:36:36,640
any

00:36:33,920 --> 00:36:39,119
compiler specific code but also append

00:36:36,640 --> 00:36:42,000
the additional information for types

00:36:39,119 --> 00:36:43,760
the hegel compiler parser attends

00:36:42,000 --> 00:36:44,720
appends an additional type annotation

00:36:43,760 --> 00:36:47,359
property to code

00:36:44,720 --> 00:36:48,800
which is a type annotation and actually

00:36:47,359 --> 00:36:51,839
we'll be looking a bit more at that

00:36:48,800 --> 00:36:53,839
shortly typescript compiler types gets

00:36:51,839 --> 00:36:56,400
passes sorry is a whopping 8

00:36:53,839 --> 00:36:57,760
600 lines of code it houses an entire

00:36:56,400 --> 00:36:59,440
superset of javascript

00:36:57,760 --> 00:37:01,760
which requires the parser to understand

00:36:59,440 --> 00:37:03,040
all of it so it's far larger than most

00:37:01,760 --> 00:37:05,119
that you find

00:37:03,040 --> 00:37:06,480
step two is where we transform the node

00:37:05,119 --> 00:37:09,280
on ast

00:37:06,480 --> 00:37:11,280
where we manipulate the ast nodes here

00:37:09,280 --> 00:37:12,640
any transformations to apply to the st

00:37:11,280 --> 00:37:14,240
are performed

00:37:12,640 --> 00:37:16,480
and then the final step is to generate

00:37:14,240 --> 00:37:18,400
source code so here we're going to turn

00:37:16,480 --> 00:37:20,800
ast into a string of javascript source

00:37:18,400 --> 00:37:22,960
code the type system has to map any

00:37:20,800 --> 00:37:25,839
non-js compliant ast

00:37:22,960 --> 00:37:29,440
back to native.js so how does a type

00:37:25,839 --> 00:37:31,520
system file a compiler fit into this

00:37:29,440 --> 00:37:33,280
as well as the mentioned steps type

00:37:31,520 --> 00:37:34,720
system compilers will usually include an

00:37:33,280 --> 00:37:37,200
additional step or two

00:37:34,720 --> 00:37:39,280
after passing uh which we which will

00:37:37,200 --> 00:37:41,920
include the type specific work

00:37:39,280 --> 00:37:44,160
so on a side note typesc actually has a

00:37:41,920 --> 00:37:45,760
total of five phases in its compiler

00:37:44,160 --> 00:37:48,320
and they are the language server

00:37:45,760 --> 00:37:50,880
preprocessor which works via import

00:37:48,320 --> 00:37:52,240
the parser the binder the checker and

00:37:50,880 --> 00:37:54,400
the emitter

00:37:52,240 --> 00:37:56,240
so as you can see it's got a

00:37:54,400 --> 00:37:57,599
pre-processor which triggers the type

00:37:56,240 --> 00:37:59,839
compiler to only run

00:37:57,599 --> 00:38:01,520
over the files which have changed this

00:37:59,839 --> 00:38:02,880
will follow any import statements

00:38:01,520 --> 00:38:04,880
to determine what else could have

00:38:02,880 --> 00:38:06,560
changed i would need to be included in

00:38:04,880 --> 00:38:09,280
the next rerun

00:38:06,560 --> 00:38:11,760
additionally the typescript compiler

00:38:09,280 --> 00:38:13,839
actually has the ability to reprocess

00:38:11,760 --> 00:38:15,920
to only reprocess the node tree branch

00:38:13,839 --> 00:38:17,200
or the asd graph which has changed

00:38:15,920 --> 00:38:19,280
that's actually a technique known as

00:38:17,200 --> 00:38:21,119
lazy compilation so

00:38:19,280 --> 00:38:24,000
previously run ast can be stored in

00:38:21,119 --> 00:38:25,440
memory which it calls look aside tables

00:38:24,000 --> 00:38:28,480
and then that allows for even faster

00:38:25,440 --> 00:38:28,480
compilation in the future

00:38:29,040 --> 00:38:33,280
so for general type system compilers

00:38:31,599 --> 00:38:36,160
there are two common jobs

00:38:33,280 --> 00:38:37,839
there's inferring so inferring is

00:38:36,160 --> 00:38:39,359
required for code which does not have an

00:38:37,839 --> 00:38:41,440
annotation

00:38:39,359 --> 00:38:43,520
using a predefined algorithm the engine

00:38:41,440 --> 00:38:44,160
will calculate what type for a given

00:38:43,520 --> 00:38:46,320
variable

00:38:44,160 --> 00:38:47,760
what what the type for a given variable

00:38:46,320 --> 00:38:49,760
or function is

00:38:47,760 --> 00:38:51,119
typescript uses the algorithm best

00:38:49,760 --> 00:38:52,720
common type

00:38:51,119 --> 00:38:54,800
and it applies inside of its binding

00:38:52,720 --> 00:38:57,359
phase which is the first of two

00:38:54,800 --> 00:38:58,400
semantic passes it considers each

00:38:57,359 --> 00:39:00,240
candidate type

00:38:58,400 --> 00:39:02,000
and picks the type that is compatible

00:39:00,240 --> 00:39:04,000
with all other types

00:39:02,000 --> 00:39:05,520
contextual typing comes into play here

00:39:04,000 --> 00:39:07,119
which is using the location in the

00:39:05,520 --> 00:39:08,960
inference

00:39:07,119 --> 00:39:11,520
typescript actually introduces the idea

00:39:08,960 --> 00:39:13,359
of symbols these are named declarations

00:39:11,520 --> 00:39:15,440
which connect declaration nodes

00:39:13,359 --> 00:39:17,359
in the ast to other declarations

00:39:15,440 --> 00:39:18,720
contributing to the same entity

00:39:17,359 --> 00:39:20,800
they are the basic building block of the

00:39:18,720 --> 00:39:21,920
typescript semantic system and actually

00:39:20,800 --> 00:39:23,760
when i was digging through it

00:39:21,920 --> 00:39:25,280
it was kind of relatively easy to get

00:39:23,760 --> 00:39:27,359
pretty lost with them it's a

00:39:25,280 --> 00:39:29,359
it's a huge system built with symbols so

00:39:27,359 --> 00:39:30,560
um i've tried to not follow that same

00:39:29,359 --> 00:39:32,720
approach so we can kind of

00:39:30,560 --> 00:39:34,480
really show the mechanisms here today

00:39:32,720 --> 00:39:35,359
and then the second common job is

00:39:34,480 --> 00:39:37,200
checking

00:39:35,359 --> 00:39:38,560
so now that inferring is complete and

00:39:37,200 --> 00:39:40,800
the types have been assigned

00:39:38,560 --> 00:39:42,640
the engine can run its type checks they

00:39:40,800 --> 00:39:44,160
check the semantics of the given code

00:39:42,640 --> 00:39:46,560
and there are many flavors of these

00:39:44,160 --> 00:39:48,480
types of checks ranging from mismatches

00:39:46,560 --> 00:39:50,800
to non-existing types

00:39:48,480 --> 00:39:51,599
for typescript this is the checker which

00:39:50,800 --> 00:39:54,640
is actually

00:39:51,599 --> 00:39:57,839
the second semantic pass and it's 20

00:39:54,640 --> 00:39:59,359
000 lines of code long so i really feel

00:39:57,839 --> 00:40:02,000
that that gives a strong idea

00:39:59,359 --> 00:40:03,520
of just how complicated and difficult it

00:40:02,000 --> 00:40:05,599
is

00:40:03,520 --> 00:40:07,280
to check so many different types across

00:40:05,599 --> 00:40:09,040
so many different scenarios

00:40:07,280 --> 00:40:10,400
the type checker is not dependent on the

00:40:09,040 --> 00:40:12,560
calling code i

00:40:10,400 --> 00:40:13,760
if the file executes any of its own code

00:40:12,560 --> 00:40:15,680
at runtime

00:40:13,760 --> 00:40:16,960
the type checker will process each line

00:40:15,680 --> 00:40:20,319
in a given file itself

00:40:16,960 --> 00:40:20,319
and run the appropriate checks

00:40:20,560 --> 00:40:24,079
so that's it for part a that's the

00:40:22,960 --> 00:40:25,839
overview finished

00:40:24,079 --> 00:40:27,760
so now we're going to be looking at

00:40:25,839 --> 00:40:28,480
building our own compiler which can run

00:40:27,760 --> 00:40:30,560
type checks

00:40:28,480 --> 00:40:32,400
for three different scenarios and throw

00:40:30,560 --> 00:40:33,920
a specific message for each

00:40:32,400 --> 00:40:36,240
the reason we're going to limit it to

00:40:33,920 --> 00:40:38,000
three scenarios is so we can focus on

00:40:36,240 --> 00:40:40,000
the specific mechanisms that

00:40:38,000 --> 00:40:41,920
work around each one and hopefully by

00:40:40,000 --> 00:40:44,160
the end have a really strong idea

00:40:41,920 --> 00:40:45,280
on how to introduce more complex type

00:40:44,160 --> 00:40:46,800
checks

00:40:45,280 --> 00:40:48,640
we will be working with a function

00:40:46,800 --> 00:40:50,079
declaration and then a function

00:40:48,640 --> 00:40:53,839
expression and the expression is going

00:40:50,079 --> 00:40:53,839
to be calling that declaration

00:40:54,400 --> 00:40:59,200
so these are the scenarios so scenario 1

00:40:57,760 --> 00:41:01,359
is going to be an issue with a type

00:40:59,200 --> 00:41:02,800
matching a string versus a number

00:41:01,359 --> 00:41:04,560
you can see we've defined a function

00:41:02,800 --> 00:41:05,760
there we've got a type of number

00:41:04,560 --> 00:41:08,079
but we're calling the function with a

00:41:05,760 --> 00:41:09,440
string we've got scenario two

00:41:08,079 --> 00:41:11,680
where there's an issue with using an

00:41:09,440 --> 00:41:13,920
unknown type which is not defined

00:41:11,680 --> 00:41:15,280
so again we're defining our function but

00:41:13,920 --> 00:41:17,359
this time with a type which

00:41:15,280 --> 00:41:19,599
does not exist and we're calling our

00:41:17,359 --> 00:41:22,480
function with a string again

00:41:19,599 --> 00:41:24,000
and then scenario three where there's an

00:41:22,480 --> 00:41:26,000
issue with using a property name

00:41:24,000 --> 00:41:27,200
not found on the interface so we've

00:41:26,000 --> 00:41:28,880
defined an interface

00:41:27,200 --> 00:41:30,640
we've defined a function which should be

00:41:28,880 --> 00:41:32,400
using this interface and now we're

00:41:30,640 --> 00:41:33,839
calling that function and actually

00:41:32,400 --> 00:41:35,760
handing an object with the wrong

00:41:33,839 --> 00:41:38,400
property name

00:41:35,760 --> 00:41:39,440
so those are our scenarios now onto the

00:41:38,400 --> 00:41:41,440
compiler

00:41:39,440 --> 00:41:42,720
there are two parts to the compiler

00:41:41,440 --> 00:41:44,880
there's the parser

00:41:42,720 --> 00:41:46,319
and the checker and as previously

00:41:44,880 --> 00:41:47,440
mentioned we won't be focusing on the

00:41:46,319 --> 00:41:48,480
pass today

00:41:47,440 --> 00:41:50,560
we're just going to be following the

00:41:48,480 --> 00:41:52,000
hegel passing approach of assuming a

00:41:50,560 --> 00:41:53,839
type annotation object

00:41:52,000 --> 00:41:56,079
has been attached to all the annotated

00:41:53,839 --> 00:41:58,240
ast nodes so what i've basically done

00:41:56,079 --> 00:42:01,119
is i've hard coded the ast objects so

00:41:58,240 --> 00:42:03,200
we're going to go through that now

00:42:01,119 --> 00:42:04,319
so scenario one is going to use this

00:42:03,200 --> 00:42:05,440
parser and ast

00:42:04,319 --> 00:42:06,800
so we've got to imagine that it's

00:42:05,440 --> 00:42:08,079
already been put through the hebrew

00:42:06,800 --> 00:42:09,839
parser

00:42:08,079 --> 00:42:12,079
i've actually put a comment above any of

00:42:09,839 --> 00:42:12,800
the ast block to clarify what code it's

00:42:12,079 --> 00:42:15,200
for

00:42:12,800 --> 00:42:16,319
so on the left on line three you can see

00:42:15,200 --> 00:42:18,560
the expressions t

00:42:16,319 --> 00:42:20,160
block for our top line expression

00:42:18,560 --> 00:42:21,760
statement which you can see actually on

00:42:20,160 --> 00:42:24,160
line two commented out

00:42:21,760 --> 00:42:25,680
and on the right on line 21 is the

00:42:24,160 --> 00:42:26,880
declaration as t

00:42:25,680 --> 00:42:29,359
this is for where we have declared our

00:42:26,880 --> 00:42:32,560
function on line 20 comment it out

00:42:29,359 --> 00:42:33,680
so staying on the right on line 46 we

00:42:32,560 --> 00:42:36,319
return

00:42:33,680 --> 00:42:36,960
a program ast object which is the

00:42:36,319 --> 00:42:40,079
program

00:42:36,960 --> 00:42:41,520
with both ast nodes in the program body

00:42:40,079 --> 00:42:42,839
is basically an array which

00:42:41,520 --> 00:42:44,640
which is going to be holding these

00:42:42,839 --> 00:42:48,079
objects so

00:42:44,640 --> 00:42:50,079
inside the declaration ast on line 31

00:42:48,079 --> 00:42:52,319
you can see the type annotation on the

00:42:50,079 --> 00:42:54,480
param identifier a

00:42:52,319 --> 00:42:55,839
which you can see on line 30 which

00:42:54,480 --> 00:42:57,520
matches where it sits in the code so

00:42:55,839 --> 00:42:58,319
this is what i mean by we've i've hard

00:42:57,520 --> 00:43:03,440
coded the

00:42:58,319 --> 00:43:05,440
the actual the passes type annotations

00:43:03,440 --> 00:43:07,839
on scenario two it's going to be using

00:43:05,440 --> 00:43:09,359
this parser and ast

00:43:07,839 --> 00:43:11,359
it's very similar to scenario one with

00:43:09,359 --> 00:43:13,760
its expression its declaration

00:43:11,359 --> 00:43:15,280
and program st blocks the code is seen

00:43:13,760 --> 00:43:17,359
on line one

00:43:15,280 --> 00:43:18,800
however the difference is on line 12.

00:43:17,359 --> 00:43:21,359
the type annotation

00:43:18,800 --> 00:43:22,480
inside the declarations params array is

00:43:21,359 --> 00:43:24,720
made up type

00:43:22,480 --> 00:43:26,480
and you can see it on line 16 instead of

00:43:24,720 --> 00:43:28,319
what scenario has which was

00:43:26,480 --> 00:43:29,839
a number type annotation and we can

00:43:28,319 --> 00:43:33,359
actually see that if we go back

00:43:29,839 --> 00:43:34,960
and you look on 930 slide line line 35

00:43:33,359 --> 00:43:36,960
on the right you can see the number type

00:43:34,960 --> 00:43:38,400
annotation and so if i go back to

00:43:36,960 --> 00:43:39,599
scenario two you can see it's now made

00:43:38,400 --> 00:43:42,079
up type

00:43:39,599 --> 00:43:44,319
so the expression and the program ast

00:43:42,079 --> 00:43:45,680
blocks are identical scenario one

00:43:44,319 --> 00:43:47,280
so i haven't displayed them here again

00:43:45,680 --> 00:43:49,200
so that's really the main the main

00:43:47,280 --> 00:43:52,240
change in scenario two between the two

00:43:49,200 --> 00:43:53,760
ast blocks and then finally we've got

00:43:52,240 --> 00:43:54,880
scenario three which is going to use

00:43:53,760 --> 00:43:56,720
this parser nst

00:43:54,880 --> 00:43:58,319
i apologize there's a lot a lot of code

00:43:56,720 --> 00:44:00,480
on the screen but um

00:43:58,319 --> 00:44:02,640
it's just to get across how the objects

00:44:00,480 --> 00:44:04,640
look going into the program

00:44:02,640 --> 00:44:06,240
so as well as our expression and

00:44:04,640 --> 00:44:08,319
declaration and program st

00:44:06,240 --> 00:44:09,920
blocks there's now an interface ast

00:44:08,319 --> 00:44:11,839
block and that that's on the left

00:44:09,920 --> 00:44:12,960
and you can see that's starting the ast

00:44:11,839 --> 00:44:14,640
starting on line four

00:44:12,960 --> 00:44:17,359
and you can see the type the interface

00:44:14,640 --> 00:44:19,599
declaration on line five

00:44:17,359 --> 00:44:20,960
also looking on the far right now the

00:44:19,599 --> 00:44:23,520
declaration ast

00:44:20,960 --> 00:44:25,440
now has a generic type on its annotation

00:44:23,520 --> 00:44:28,240
and you can see that on line 74.

00:44:25,440 --> 00:44:28,960
so instead of it being a string or a

00:44:28,240 --> 00:44:30,720
numeric

00:44:28,960 --> 00:44:32,480
it's now a generic type and that's

00:44:30,720 --> 00:44:34,880
actually just something i've called

00:44:32,480 --> 00:44:36,319
it because it's an object and this is

00:44:34,880 --> 00:44:37,040
this is the part that takes our object

00:44:36,319 --> 00:44:39,599
identifier

00:44:37,040 --> 00:44:41,440
which is person and you can see its name

00:44:39,599 --> 00:44:43,040
on line 77.

00:44:41,440 --> 00:44:45,119
uh yeah and the init the initial code

00:44:43,040 --> 00:44:48,640
for this is on the top

00:44:45,119 --> 00:44:50,880
on line 60. so similarly to scenario one

00:44:48,640 --> 00:44:52,560
and two the program ast is going to

00:44:50,880 --> 00:44:54,000
return an array of these three objects

00:44:52,560 --> 00:44:56,160
for this scenario

00:44:54,000 --> 00:44:57,440
so you can see on line 50 if i go back

00:44:56,160 --> 00:45:00,800
to scenario one

00:44:57,440 --> 00:45:02,000
the program ast body in this in scenario

00:45:00,800 --> 00:45:04,560
three it's going to be

00:45:02,000 --> 00:45:05,760
an array of all three st blocks whereas

00:45:04,560 --> 00:45:07,119
for scenario one and two

00:45:05,760 --> 00:45:09,200
it's just got the expression and

00:45:07,119 --> 00:45:11,760
exploration

00:45:09,200 --> 00:45:12,319
uh so as you can see from this previous

00:45:11,760 --> 00:45:13,760
slides

00:45:12,319 --> 00:45:15,839
the main area which actually holds the

00:45:13,760 --> 00:45:16,640
type annotation object for all three

00:45:15,839 --> 00:45:18,640
scenarios

00:45:16,640 --> 00:45:20,240
is the declaration parameter which is

00:45:18,640 --> 00:45:22,000
the declaration ast

00:45:20,240 --> 00:45:23,680
all three have that in common so you can

00:45:22,000 --> 00:45:27,040
see line 71 here

00:45:23,680 --> 00:45:29,200
got type annotation line 12 here

00:45:27,040 --> 00:45:31,280
type annotation on scenario 2 and on

00:45:29,200 --> 00:45:32,800
scenario 1 on line 34.

00:45:31,280 --> 00:45:34,319
so and they're all so all of the type

00:45:32,800 --> 00:45:36,720
annotations are under the declaration

00:45:34,319 --> 00:45:36,720
asd

00:45:36,960 --> 00:45:40,720
so now onto the part of the compiler

00:45:39,359 --> 00:45:42,079
which does our type checks

00:45:40,720 --> 00:45:43,920
we've got three slides to look up for

00:45:42,079 --> 00:45:45,200
this all under the single function which

00:45:43,920 --> 00:45:48,079
is called checker

00:45:45,200 --> 00:45:49,920
so what does it need to do it needs to

00:45:48,079 --> 00:45:50,560
iterate through all the program body ast

00:45:49,920 --> 00:45:52,400
objects

00:45:50,560 --> 00:45:53,839
and depending on the node type do the

00:45:52,400 --> 00:45:56,079
appropriate checks

00:45:53,839 --> 00:45:57,839
where we're going to add any errors onto

00:45:56,079 --> 00:45:59,520
an array to be returned

00:45:57,839 --> 00:46:01,040
to the caller for printing so we can

00:45:59,520 --> 00:46:03,359
actually see the error

00:46:01,040 --> 00:46:04,880
so before we go any further the basic

00:46:03,359 --> 00:46:08,319
logic we will work with

00:46:04,880 --> 00:46:10,240
for each type is is this so

00:46:08,319 --> 00:46:11,760
for our function declaration we're going

00:46:10,240 --> 00:46:12,720
to check the types for the argument are

00:46:11,760 --> 00:46:14,400
valid

00:46:12,720 --> 00:46:16,560
then check each statement in the block

00:46:14,400 --> 00:46:18,160
body for our expression

00:46:16,560 --> 00:46:19,920
we're going to find the function

00:46:18,160 --> 00:46:21,599
declaration for the caller

00:46:19,920 --> 00:46:23,280
we're going to grab the type of the

00:46:21,599 --> 00:46:25,280
declarations argument

00:46:23,280 --> 00:46:27,280
lastly grab the type of the expressions

00:46:25,280 --> 00:46:30,400
call argument and then compare them

00:46:27,280 --> 00:46:33,359
to make sure that they're the same type

00:46:30,400 --> 00:46:35,119
so this code contains the type you type

00:46:33,359 --> 00:46:37,440
checks utility objects

00:46:35,119 --> 00:46:39,200
and an empty errors array which will be

00:46:37,440 --> 00:46:41,920
used to check our expression

00:46:39,200 --> 00:46:43,040
and the basic annotation check so

00:46:41,920 --> 00:46:44,960
nothing has been called yet we're just

00:46:43,040 --> 00:46:47,119
defining this utility object

00:46:44,960 --> 00:46:48,079
so this object has got this is for for

00:46:47,119 --> 00:46:50,640
the expression

00:46:48,079 --> 00:46:51,599
there are two types of checks so on line

00:46:50,640 --> 00:46:54,800
00:46:51,599 --> 00:46:57,200
you can see the numeric type annotation

00:46:54,800 --> 00:46:58,000
here the caller type should be a numeric

00:46:57,200 --> 00:47:01,200
literal

00:46:58,000 --> 00:47:02,960
as you can see on line 14. so if if it

00:47:01,200 --> 00:47:05,440
was annotated as a number

00:47:02,960 --> 00:47:07,200
the caller type should be a number

00:47:05,440 --> 00:47:09,760
scenario one would fail here but

00:47:07,200 --> 00:47:11,200
nothing has actually been logged yet for

00:47:09,760 --> 00:47:13,440
our there's also a generic type

00:47:11,200 --> 00:47:16,560
annotation on line 15

00:47:13,440 --> 00:47:18,319
and if it's an object we search the tree

00:47:16,560 --> 00:47:20,319
for an interface declaration there's the

00:47:18,319 --> 00:47:23,200
the scope

00:47:20,319 --> 00:47:24,000
we see you can see online 19 and then we

00:47:23,200 --> 00:47:25,680
check each property

00:47:24,000 --> 00:47:28,400
of the caller on that interface which

00:47:25,680 --> 00:47:29,599
you can see online 26 to 35

00:47:28,400 --> 00:47:32,400
we're checking each property on the

00:47:29,599 --> 00:47:33,440
caller and then if there are any issues

00:47:32,400 --> 00:47:35,119
they're going to get pushed into the

00:47:33,440 --> 00:47:35,760
errors array and you can see that online

00:47:35,119 --> 00:47:37,599
00:47:35,760 --> 00:47:38,960
with a helpful message about what

00:47:37,599 --> 00:47:41,280
property name does exist

00:47:38,960 --> 00:47:43,119
and therefore what it could actually be

00:47:41,280 --> 00:47:45,119
this is actually limited because

00:47:43,119 --> 00:47:46,800
it only works with the one object but

00:47:45,119 --> 00:47:48,640
it's the proof of concept

00:47:46,800 --> 00:47:50,400
scenario three would fail here and get

00:47:48,640 --> 00:47:52,160
this error

00:47:50,400 --> 00:47:53,359
so you can probably see that the

00:47:52,160 --> 00:47:53,680
processing is going to be limited to

00:47:53,359 --> 00:47:56,160
this

00:47:53,680 --> 00:47:57,920
file to the file that's given however

00:47:56,160 --> 00:47:58,640
most type checks will have a notion of

00:47:57,920 --> 00:48:00,160
scope

00:47:58,640 --> 00:48:02,480
so they're able to determine if a

00:48:00,160 --> 00:48:04,960
declaration was anywhere in the runtime

00:48:02,480 --> 00:48:06,559
and not just available in this program

00:48:04,960 --> 00:48:08,880
again ours has an easier job because

00:48:06,559 --> 00:48:11,920
it's this proof of concept

00:48:08,880 --> 00:48:13,920
so uh slide number two this code

00:48:11,920 --> 00:48:14,319
contains the processing of each node

00:48:13,920 --> 00:48:16,640
type

00:48:14,319 --> 00:48:18,079
in the program body so this is where the

00:48:16,640 --> 00:48:18,880
type check logic that we defined

00:48:18,079 --> 00:48:21,280
previously

00:48:18,880 --> 00:48:22,160
is going to be called from so let's walk

00:48:21,280 --> 00:48:25,200
through the code again

00:48:22,160 --> 00:48:26,800
and then break it down by type so

00:48:25,200 --> 00:48:28,000
here we have the function declaration

00:48:26,800 --> 00:48:29,280
which is where we would define our

00:48:28,000 --> 00:48:32,079
function

00:48:29,280 --> 00:48:33,520
you can see that on line 48 so we start

00:48:32,079 --> 00:48:34,240
by processing the arguments and the

00:48:33,520 --> 00:48:38,000
params

00:48:34,240 --> 00:48:41,119
on line 49 if it finds a type annotation

00:48:38,000 --> 00:48:42,559
which here it doesn't line 50 on line 51

00:48:41,119 --> 00:48:44,880
check if the type exists for the

00:48:42,559 --> 00:48:46,880
argument given i the arc type

00:48:44,880 --> 00:48:48,960
if it does not add an error to the

00:48:46,880 --> 00:48:50,960
errors which was on line 56

00:48:48,960 --> 00:48:54,000
scenario two would get an error here

00:48:50,960 --> 00:48:56,160
because the type does not exist

00:48:54,000 --> 00:48:58,000
lastly we process the function body

00:48:56,160 --> 00:48:59,839
however as we know there's no function

00:48:58,000 --> 00:49:02,400
body to process i've left it blank

00:48:59,839 --> 00:49:03,119
the function body is the actual block of

00:49:02,400 --> 00:49:05,359
the function

00:49:03,119 --> 00:49:06,800
and if you remember when i defined the

00:49:05,359 --> 00:49:08,000
function there was nothing actually

00:49:06,800 --> 00:49:09,200
inside of it it was all about the

00:49:08,000 --> 00:49:11,920
arguments and the

00:49:09,200 --> 00:49:13,520
type definition so now on to the last

00:49:11,920 --> 00:49:15,760
slide of code

00:49:13,520 --> 00:49:16,960
this is the final bit here we have the

00:49:15,760 --> 00:49:20,160
expression statement

00:49:16,960 --> 00:49:21,839
at line 69 on the left top

00:49:20,160 --> 00:49:23,200
first we check the program body for the

00:49:21,839 --> 00:49:25,119
declaration of the function

00:49:23,200 --> 00:49:26,559
on line 71 so we've got to go off and

00:49:25,119 --> 00:49:28,319
find the declaration

00:49:26,559 --> 00:49:30,960
this is where scope would apply to real

00:49:28,319 --> 00:49:31,599
chat checker so if no declaration is

00:49:30,960 --> 00:49:33,680
found

00:49:31,599 --> 00:49:36,000
add an error to the to the errors array

00:49:33,680 --> 00:49:38,640
which we're doing on line 79.

00:49:36,000 --> 00:49:40,079
next on the right we check each defined

00:49:38,640 --> 00:49:41,200
argument type against the caller

00:49:40,079 --> 00:49:42,640
argument type

00:49:41,200 --> 00:49:44,800
and then if there's a type mismatch

00:49:42,640 --> 00:49:47,280
found then add an error onto the errors

00:49:44,800 --> 00:49:49,359
array which we're doing on line 105.

00:49:47,280 --> 00:49:51,680
so both scenario 1 and scenario 2 will

00:49:49,359 --> 00:49:54,480
get this error

00:49:51,680 --> 00:49:56,839
so what i'm out for now we can have a

00:49:54,480 --> 00:49:59,920
look at what this is output

00:49:56,839 --> 00:50:02,000
outputted so i've introduced a basic

00:49:59,920 --> 00:50:03,119
repository with a simple index file and

00:50:02,000 --> 00:50:05,599
some tests

00:50:03,119 --> 00:50:06,559
which processes these ast nodes and logs

00:50:05,599 --> 00:50:09,040
the errors

00:50:06,559 --> 00:50:10,880
when i run it i get this output so here

00:50:09,040 --> 00:50:13,359
you can see the errors for scenario one

00:50:10,880 --> 00:50:14,079
is type craig string is incompatible

00:50:13,359 --> 00:50:15,200
with number

00:50:14,079 --> 00:50:17,040
and i've actually just realized that

00:50:15,200 --> 00:50:18,400
that should probably be the string

00:50:17,040 --> 00:50:19,839
literal because it's the type that it

00:50:18,400 --> 00:50:23,359
should give us but

00:50:19,839 --> 00:50:24,240
proof of concept uh then scenario errors

00:50:23,359 --> 00:50:25,839
for scenario two

00:50:24,240 --> 00:50:27,280
we can see we've got the type craig

00:50:25,839 --> 00:50:29,520
string off done again

00:50:27,280 --> 00:50:31,760
is incompatible with undefined so this

00:50:29,520 --> 00:50:33,760
would again be a string literal

00:50:31,760 --> 00:50:35,599
and then we've also got type made up for

00:50:33,760 --> 00:50:37,520
argument a does not exist

00:50:35,599 --> 00:50:38,640
this is where the type match type does

00:50:37,520 --> 00:50:41,359
not exist

00:50:38,640 --> 00:50:42,559
and then errors for scenario three this

00:50:41,359 --> 00:50:44,319
is the interface

00:50:42,559 --> 00:50:46,559
property nam does not exist on interface

00:50:44,319 --> 00:50:48,720
person did you mean name

00:50:46,559 --> 00:50:49,680
so if we are to summarize what these are

00:50:48,720 --> 00:50:52,160
actually talking about

00:50:49,680 --> 00:50:52,880
scenario one we defined an argument type

00:50:52,160 --> 00:50:55,440
of number

00:50:52,880 --> 00:50:56,160
but we called it with a string scenario

00:50:55,440 --> 00:50:57,839
two

00:50:56,160 --> 00:50:59,440
we defined a type on the function

00:50:57,839 --> 00:51:00,960
argument which does not exist

00:50:59,440 --> 00:51:02,800
and then we called our function so we

00:51:00,960 --> 00:51:03,599
get two errors one for the bad type

00:51:02,800 --> 00:51:05,599
defined

00:51:03,599 --> 00:51:08,000
one for the type mismatch and then

00:51:05,599 --> 00:51:09,920
scenario three we defined an interface

00:51:08,000 --> 00:51:11,359
but used the property called nam which

00:51:09,920 --> 00:51:14,319
was not on the object

00:51:11,359 --> 00:51:16,240
we asked if it asked if if we meant to

00:51:14,319 --> 00:51:18,720
use name instead

00:51:16,240 --> 00:51:22,000
so that's it it's a basic type checker

00:51:18,720 --> 00:51:25,040
in less than 100 lines of code

00:51:22,000 --> 00:51:27,839
so what have we missed as mentioned

00:51:25,040 --> 00:51:29,680
there are many many many additional

00:51:27,839 --> 00:51:30,960
parts to a type compiler which we've

00:51:29,680 --> 00:51:33,040
emitted from our compiler

00:51:30,960 --> 00:51:34,480
and some of these are listed here so we

00:51:33,040 --> 00:51:36,400
can start with the most basic which is

00:51:34,480 --> 00:51:37,920
the parser you know we we manually write

00:51:36,400 --> 00:51:39,440
these says t-blocks

00:51:37,920 --> 00:51:41,040
uh within a real compiler these would

00:51:39,440 --> 00:51:42,480
have to be generated

00:51:41,040 --> 00:51:45,680
then there's the pre-processing in the

00:51:42,480 --> 00:51:47,760
language server a real compiler has this

00:51:45,680 --> 00:51:48,960
language language server mechanism to

00:51:47,760 --> 00:51:50,800
plug into an ide

00:51:48,960 --> 00:51:53,280
and we run out appropriate times ours

00:51:50,800 --> 00:51:55,040
doesn't it's the lazy compilation

00:51:53,280 --> 00:51:56,880
we've got no intelligence around what's

00:51:55,040 --> 00:51:59,200
being changed or used or storing any of

00:51:56,880 --> 00:52:01,359
the st blocks in memory

00:51:59,200 --> 00:52:03,040
uh the transform step we've completely

00:52:01,359 --> 00:52:04,960
skipped the final part of the compiler

00:52:03,040 --> 00:52:06,559
which is where it would be converted

00:52:04,960 --> 00:52:07,680
back into our javascript code which can

00:52:06,559 --> 00:52:08,720
actually be read by the javascript

00:52:07,680 --> 00:52:10,480
runtime

00:52:08,720 --> 00:52:12,240
and also scope which is something we

00:52:10,480 --> 00:52:14,160
meant touched on a few times

00:52:12,240 --> 00:52:16,079
as it's a proof of concept it's all in a

00:52:14,160 --> 00:52:17,440
single file didn't really need to know

00:52:16,079 --> 00:52:19,359
the notion of scope

00:52:17,440 --> 00:52:23,200
however real compilers have to be really

00:52:19,359 --> 00:52:23,200
aware of what has access to what

00:52:24,000 --> 00:52:28,240
so that's it thank you so much for

00:52:26,000 --> 00:52:30,400
listening i learned a huge amount from

00:52:28,240 --> 00:52:32,559
this research on type on type systems

00:52:30,400 --> 00:52:34,480
and i hope it was useful for you you can

00:52:32,559 --> 00:52:35,440
find the repository for the code and the

00:52:34,480 --> 00:52:38,400
tests

00:52:35,440 --> 00:52:39,760
on on github and github at this link and

00:52:38,400 --> 00:52:40,480
also you can check my site for more

00:52:39,760 --> 00:52:43,839
under the hoods

00:52:40,480 --> 00:52:46,490
which is craigtob so thank you very much

00:52:43,839 --> 00:53:01,099
for listening

00:52:46,490 --> 00:53:01,099
[Music]

00:53:04,650 --> 00:53:09,320
[Music]

00:53:11,200 --> 00:53:15,200
all right i apologize for that uh so

00:53:14,079 --> 00:53:18,079
once again craig

00:53:15,200 --> 00:53:20,800
i'm gonna say the good thing is about

00:53:18,079 --> 00:53:22,160
you multiple times what's bad about that

00:53:20,800 --> 00:53:24,720
uh thank you very much for that great

00:53:22,160 --> 00:53:27,280
presentation uh i think that was

00:53:24,720 --> 00:53:29,760
really really insightful especially that

00:53:27,280 --> 00:53:33,839
i imagine like bunch of us just

00:53:29,760 --> 00:53:34,640
were aware of uh type systems but like

00:53:33,839 --> 00:53:36,480
never actually

00:53:34,640 --> 00:53:37,760
even talked about how that thing works

00:53:36,480 --> 00:53:40,559
under the hood

00:53:37,760 --> 00:53:41,280
um so i have like a quick question for

00:53:40,559 --> 00:53:43,440
you

00:53:41,280 --> 00:53:46,559
how did you come up with the whole idea

00:53:43,440 --> 00:53:49,680
of under the hood series

00:53:46,559 --> 00:53:52,000
and how long have you been doing it um

00:53:49,680 --> 00:53:53,839
so i came up with the idea about a year

00:53:52,000 --> 00:53:55,440
ago and it was with webpack and it was

00:53:53,839 --> 00:53:56,480
all around module bundlers and it was

00:53:55,440 --> 00:53:59,040
all about

00:53:56,480 --> 00:54:00,800
how how does it like i would look at the

00:53:59,040 --> 00:54:04,800
the output from webpack

00:54:00,800 --> 00:54:07,359
see all my module code in in an array

00:54:04,800 --> 00:54:08,319
and think how does my how does my es6

00:54:07,359 --> 00:54:11,839
module

00:54:08,319 --> 00:54:13,359
become a an object in an array

00:54:11,839 --> 00:54:14,960
and how and and then and when you look

00:54:13,359 --> 00:54:16,960
at the web the output you can see the

00:54:14,960 --> 00:54:18,480
require calls they require index zero

00:54:16,960 --> 00:54:20,880
index one index two

00:54:18,480 --> 00:54:23,040
and i got thinking about how does it do

00:54:20,880 --> 00:54:25,280
that and actually it turns out it's not

00:54:23,040 --> 00:54:26,480
um particularly complicated how it does

00:54:25,280 --> 00:54:27,920
that um

00:54:26,480 --> 00:54:29,359
and that got me thinking more about well

00:54:27,920 --> 00:54:30,480
actually if it's under if it's if it's

00:54:29,359 --> 00:54:32,480
possible to understand

00:54:30,480 --> 00:54:34,480
how webpack works maybe it's possible

00:54:32,480 --> 00:54:37,680
how typescript works and how

00:54:34,480 --> 00:54:39,839
uh run run systems work and how

00:54:37,680 --> 00:54:41,200
react hooks work and it kind of just

00:54:39,839 --> 00:54:43,200
took me on the any time

00:54:41,200 --> 00:54:46,319
and i'm currently looking at graphql as

00:54:43,200 --> 00:54:48,559
well and a lot of them share similar

00:54:46,319 --> 00:54:50,240
similar mechanics um and i've kind of

00:54:48,559 --> 00:54:52,400
found that once you understand

00:54:50,240 --> 00:54:54,240
the core mechanics involved a lot of

00:54:52,400 --> 00:54:56,640
which are with ast

00:54:54,240 --> 00:54:59,040
um you kind of can really it kind of

00:54:56,640 --> 00:55:00,720
helps you to understand how

00:54:59,040 --> 00:55:02,319
how to extend the tools that exist and

00:55:00,720 --> 00:55:05,920
how you could actually improve them and

00:55:02,319 --> 00:55:07,920
so i it's kind of a bit of a mix between

00:55:05,920 --> 00:55:09,680
a beginner's talk and an advanced talk

00:55:07,920 --> 00:55:12,559
at the same time i felt like it was

00:55:09,680 --> 00:55:15,040
explaining from a very beginner's level

00:55:12,559 --> 00:55:15,920
how things work but also can help fill

00:55:15,040 --> 00:55:19,119
in the gaps

00:55:15,920 --> 00:55:20,960
on an advanced level so yeah

00:55:19,119 --> 00:55:23,359
yeah so one one thing went through my

00:55:20,960 --> 00:55:26,400
mind uh like for listening to your talk

00:55:23,359 --> 00:55:26,799
uh and especially like uh after you came

00:55:26,400 --> 00:55:28,160
to

00:55:26,799 --> 00:55:30,640
uh after you went through your last

00:55:28,160 --> 00:55:32,720
slide uh so

00:55:30,640 --> 00:55:34,720
in our unis and the courses that we've

00:55:32,720 --> 00:55:37,440
been through like we were always

00:55:34,720 --> 00:55:37,839
uh talk about abstraction and i think

00:55:37,440 --> 00:55:40,000
that

00:55:37,839 --> 00:55:40,960
what he did here like is absolutely

00:55:40,000 --> 00:55:42,400
perfect uh

00:55:40,960 --> 00:55:44,000
example of abstraction like he

00:55:42,400 --> 00:55:46,319
completely ignored

00:55:44,000 --> 00:55:47,680
like loads of things that were they're

00:55:46,319 --> 00:55:50,240
really important

00:55:47,680 --> 00:55:51,280
but you you actually managed to explain

00:55:50,240 --> 00:55:53,119
to us like how

00:55:51,280 --> 00:55:55,359
part of that whole type type system

00:55:53,119 --> 00:55:58,400
works and um i think that that is

00:55:55,359 --> 00:56:01,680
uh that is just amazing uh so how

00:55:58,400 --> 00:56:06,640
did you end up choosing uh like to do

00:56:01,680 --> 00:56:06,640
passes as um your under the hood series

00:56:06,880 --> 00:56:12,400
type systems uh

00:56:09,920 --> 00:56:13,760
do you mean do you mean how did i pick

00:56:12,400 --> 00:56:16,799
the checker or why did i

00:56:13,760 --> 00:56:19,040
type systems in general actually like

00:56:16,799 --> 00:56:22,000
both of those are good questions

00:56:19,040 --> 00:56:23,440
thank you for your help so i i guess

00:56:22,000 --> 00:56:26,559
yeah when i when i start doing the

00:56:23,440 --> 00:56:29,440
research just for myself

00:56:26,559 --> 00:56:31,280
it's passes are such a big and a good

00:56:29,440 --> 00:56:32,799
example was the symbols so my initial

00:56:31,280 --> 00:56:34,240
plan was to do all about typescript

00:56:32,799 --> 00:56:35,760
symbols because a lot of a lot of the

00:56:34,240 --> 00:56:36,640
typescript documentation talks about

00:56:35,760 --> 00:56:38,720
symbols

00:56:36,640 --> 00:56:41,040
and i thought maybe i can simplify this

00:56:38,720 --> 00:56:42,640
but after many hours of research

00:56:41,040 --> 00:56:44,000
it turns out there's a fair amount of

00:56:42,640 --> 00:56:45,440
things that you just can't really

00:56:44,000 --> 00:56:48,000
simplify to a

00:56:45,440 --> 00:56:48,799
to some degrees um and certainly not

00:56:48,000 --> 00:56:50,400
myself

00:56:48,799 --> 00:56:52,319
hopefully others can and actually maybe

00:56:50,400 --> 00:56:53,520
produce do some content that can help me

00:56:52,319 --> 00:56:56,000
to understand those

00:56:53,520 --> 00:56:57,280
um and then the second part of that

00:56:56,000 --> 00:56:58,880
question i guess the type systems is

00:56:57,280 --> 00:56:59,520
just because there's such a fundamental

00:56:58,880 --> 00:57:01,599
part of

00:56:59,520 --> 00:57:02,880
what we do in the javascript ecosystem

00:57:01,599 --> 00:57:04,960
um

00:57:02,880 --> 00:57:07,599
on top of web bundles especially in

00:57:04,960 --> 00:57:09,520
recent years they've we've gone from

00:57:07,599 --> 00:57:10,880
typescript and flow becoming being

00:57:09,520 --> 00:57:11,599
something that only would be used in the

00:57:10,880 --> 00:57:12,799
edge case

00:57:11,599 --> 00:57:15,680
to bring something which is now

00:57:12,799 --> 00:57:17,920
completely ubiquitous as as a convention

00:57:15,680 --> 00:57:19,440
so it seemed like a critical thing to

00:57:17,920 --> 00:57:20,880
understand and to

00:57:19,440 --> 00:57:23,760
actually have an awareness on the

00:57:20,880 --> 00:57:23,760
mechanics involved

00:57:24,079 --> 00:57:27,520
all right i think that that's that's a

00:57:25,839 --> 00:57:31,040
pretty good explanation

00:57:27,520 --> 00:57:34,319
and would you say that you learned

00:57:31,040 --> 00:57:36,000
quite a lot like writing this uh

00:57:34,319 --> 00:57:37,520
actually not specifically for for just

00:57:36,000 --> 00:57:39,119
this specific project but like

00:57:37,520 --> 00:57:41,280
throughout all the the under the hood

00:57:39,119 --> 00:57:42,079
series i imagine that it's a really good

00:57:41,280 --> 00:57:44,000
way to

00:57:42,079 --> 00:57:45,599
uh help you understand as you mentioned

00:57:44,000 --> 00:57:48,640
already like webca webpack

00:57:45,599 --> 00:57:50,880
uh type systems uh would you say

00:57:48,640 --> 00:57:52,480
that those are the things that actually

00:57:50,880 --> 00:57:55,839
help you as a developer

00:57:52,480 --> 00:57:55,839
like improve or

00:57:56,799 --> 00:58:00,559
yeah that's it yeah abs absolutely i've

00:57:59,200 --> 00:58:02,559
kind of

00:58:00,559 --> 00:58:04,400
there's this i'm in i would say a

00:58:02,559 --> 00:58:05,040
category of people who are very visual

00:58:04,400 --> 00:58:08,079
learners

00:58:05,040 --> 00:58:09,200
who learn a lot by visually being able

00:58:08,079 --> 00:58:11,920
to comprehend

00:58:09,200 --> 00:58:13,599
the moving parts and actually something

00:58:11,920 --> 00:58:16,720
that i've learned through this process

00:58:13,599 --> 00:58:18,400
is if ever i'm using a library the

00:58:16,720 --> 00:58:19,839
no matter what it is within the

00:58:18,400 --> 00:58:21,920
javascript ecosystem

00:58:19,839 --> 00:58:22,880
um i always will try and put aside some

00:58:21,920 --> 00:58:24,640
time to go and look

00:58:22,880 --> 00:58:26,240
through the code and actually try and

00:58:24,640 --> 00:58:27,599
build like a small proof of concept to

00:58:26,240 --> 00:58:30,000
prove how it works

00:58:27,599 --> 00:58:31,599
um even if even if it's just a session

00:58:30,000 --> 00:58:31,920
with some of my colleagues at lunchtime

00:58:31,599 --> 00:58:34,079
just

00:58:31,920 --> 00:58:35,599
right let's spend 20 minutes can we

00:58:34,079 --> 00:58:36,720
build a really small version of how this

00:58:35,599 --> 00:58:38,000
works and actually

00:58:36,720 --> 00:58:40,240
there's been a few that we've really

00:58:38,000 --> 00:58:42,640
struggled with um

00:58:40,240 --> 00:58:43,839
and actually the react hooks talk that

00:58:42,640 --> 00:58:45,040
i've done uh

00:58:43,839 --> 00:58:46,319
blog posts that i've done it came from

00:58:45,040 --> 00:58:47,520
one of those lunch sessions that i did

00:58:46,319 --> 00:58:49,680
with my colleagues yeah

00:58:47,520 --> 00:58:52,160
um i would say i and i wouldn't

00:58:49,680 --> 00:58:54,160
recommend people just

00:58:52,160 --> 00:58:55,680
what like my content is actually what i

00:58:54,160 --> 00:58:58,079
have learnt from it but actually

00:58:55,680 --> 00:58:59,119
there are vast amounts to be learned by

00:58:58,079 --> 00:59:00,799
going through it yourself

00:58:59,119 --> 00:59:02,559
by by spending the time going through it

00:59:00,799 --> 00:59:03,280
because a lot of the time we can be

00:59:02,559 --> 00:59:06,240
siloed by

00:59:03,280 --> 00:59:06,720
how our own companies write code and our

00:59:06,240 --> 00:59:09,040
own

00:59:06,720 --> 00:59:10,079
design concepts and actually the best

00:59:09,040 --> 00:59:13,040
way to really

00:59:10,079 --> 00:59:13,839
get some outside external help in it in

00:59:13,040 --> 00:59:16,000
a very quick

00:59:13,839 --> 00:59:17,280
space unless you you plan on moving jobs

00:59:16,000 --> 00:59:18,880
every six months for 10 years and then

00:59:17,280 --> 00:59:19,680
you've seen 20 companies worth of design

00:59:18,880 --> 00:59:23,200
concepts

00:59:19,680 --> 00:59:25,839
and even then many will probably be long

00:59:23,200 --> 00:59:27,200
too old to be using anymore um the best

00:59:25,839 --> 00:59:29,119
way really to keep yourself up to date

00:59:27,200 --> 00:59:31,359
and understand what's really

00:59:29,119 --> 00:59:33,200
a good good design approach in the

00:59:31,359 --> 00:59:34,720
javascript ecosystem these days

00:59:33,200 --> 00:59:35,680
is to just go looking through the tools

00:59:34,720 --> 00:59:36,960
that you use and going looking through

00:59:35,680 --> 00:59:39,520
some libraries and

00:59:36,960 --> 00:59:40,880
clies and and some of the frameworks and

00:59:39,520 --> 00:59:42,640
just how do they actually work and how

00:59:40,880 --> 00:59:44,640
do they look and

00:59:42,640 --> 00:59:45,760
you'd be really surprised i have always

00:59:44,640 --> 00:59:47,599
been very surprised

00:59:45,760 --> 00:59:49,520
how much i come away with so i would

00:59:47,599 --> 00:59:51,119
recommend

00:59:49,520 --> 00:59:52,400
everyone everyone does spend a bit of

00:59:51,119 --> 00:59:53,599
time doing that because you learn a huge

00:59:52,400 --> 00:59:55,920
amount

00:59:53,599 --> 00:59:57,440
all right thank you very much craig i'd

00:59:55,920 --> 00:59:58,720
really love to continue chatting to you

00:59:57,440 --> 01:00:02,160
about this uh it was

00:59:58,720 --> 01:00:05,040
uh really helpful uh but we have to

01:00:02,160 --> 01:00:06,240
move on with our uh meetup and yeah

01:00:05,040 --> 01:00:09,280
thank you very much

01:00:06,240 --> 01:00:10,160
uh we are heading off to uh gleb that is

01:00:09,280 --> 01:00:15,839
going to talk

01:00:10,160 --> 01:00:15,839
about algolia search engine

01:00:47,680 --> 01:00:53,440
hello everyone uh thank you for

01:00:50,720 --> 01:00:55,119
joining i'm leo bachmat of vp of

01:00:53,440 --> 01:00:56,000
engineering at cypress.taiyo you can

01:00:55,119 --> 01:00:57,680
find me on twitter

01:00:56,000 --> 01:00:59,280
you can find me on github you can find

01:00:57,680 --> 01:01:02,400
my personal site

01:00:59,280 --> 01:01:02,799
and i am here to talk about something

01:01:02,400 --> 01:01:05,119
else

01:01:02,799 --> 01:01:06,160
not about testing not about javascript

01:01:05,119 --> 01:01:07,680
code

01:01:06,160 --> 01:01:10,240
it will kind of look a javascript code

01:01:07,680 --> 01:01:12,960
but my main point today is

01:01:10,240 --> 01:01:14,720
to talk about documentation search right

01:01:12,960 --> 01:01:15,440
and how to make a good documentation

01:01:14,720 --> 01:01:19,040
search

01:01:15,440 --> 01:01:20,319
using algolia before we do that i'll

01:01:19,040 --> 01:01:24,319
start how i

01:01:20,319 --> 01:01:27,040
usually start with uh a warning um

01:01:24,319 --> 01:01:28,160
so right now we are in a huge climate

01:01:27,040 --> 01:01:30,559
crisis

01:01:28,160 --> 01:01:31,839
if you read uh guardian this week you'll

01:01:30,559 --> 01:01:35,599
find that

01:01:31,839 --> 01:01:38,720
the arctic is not freezing over like it

01:01:35,599 --> 01:01:40,400
used to uh but the methane that sits

01:01:38,720 --> 01:01:41,520
right now frozen is actually started

01:01:40,400 --> 01:01:44,880
bubbling

01:01:41,520 --> 01:01:46,400
and we are pretty much on course to 3.5

01:01:44,880 --> 01:01:50,000
celsius degrees

01:01:46,400 --> 01:01:53,280
uh but if methane starts melting its

01:01:50,000 --> 01:01:55,680
runaway reaction which causes five maybe

01:01:53,280 --> 01:01:59,599
10 degrees celsius average rise

01:01:55,680 --> 01:02:02,000
so everything we do will have to stop

01:01:59,599 --> 01:02:03,839
all javascript all coding jobs will

01:02:02,000 --> 01:02:06,640
fight for survival

01:02:03,839 --> 01:02:08,400
um good thing is that we can actually

01:02:06,640 --> 01:02:11,200
stop it but we have to act

01:02:08,400 --> 01:02:12,319
we cannot delete any more you can change

01:02:11,200 --> 01:02:16,400
your life

01:02:12,319 --> 01:02:17,760
eat less meat don't uh don't fly

01:02:16,400 --> 01:02:19,440
but the most important is to join

01:02:17,760 --> 01:02:22,720
organization so

01:02:19,440 --> 01:02:25,280
in london extinction rebellion is huge

01:02:22,720 --> 01:02:26,079
uh but find organization and just start

01:02:25,280 --> 01:02:29,119
acting

01:02:26,079 --> 01:02:32,720
that's all i'm asking okay a little bit

01:02:29,119 --> 01:02:34,319
to a better topic so in this talk i'll

01:02:32,720 --> 01:02:36,000
talk about the documentation and how

01:02:34,319 --> 01:02:38,480
important is to the funnel

01:02:36,000 --> 01:02:40,400
of users in your organization i'll show

01:02:38,480 --> 01:02:42,000
a couple of examples how i set up

01:02:40,400 --> 01:02:43,920
documentation search

01:02:42,000 --> 01:02:45,359
and then i'll share a couple tips and

01:02:43,920 --> 01:02:48,799
answer any questions

01:02:45,359 --> 01:02:50,480
at the end okay let's go

01:02:48,799 --> 01:02:52,400
so imagine you work at a company you

01:02:50,480 --> 01:02:53,520
sell software right it could be

01:02:52,400 --> 01:02:55,599
something users install

01:02:53,520 --> 01:02:57,440
something maybe they use online so there

01:02:55,599 --> 01:03:00,400
is always a funnel

01:02:57,440 --> 01:03:02,160
and a funnel is how you lose customers

01:03:00,400 --> 01:03:04,240
the final looks kind of like this

01:03:02,160 --> 01:03:05,760
at the top you have first-time visitors

01:03:04,240 --> 01:03:07,200
people just checking out

01:03:05,760 --> 01:03:09,440
maybe they heard the name of your

01:03:07,200 --> 01:03:09,920
company maybe they found the tweet about

01:03:09,440 --> 01:03:11,839
you

01:03:09,920 --> 01:03:13,440
maybe someone mentioned them so they

01:03:11,839 --> 01:03:15,520
come and they take a look

01:03:13,440 --> 01:03:16,799
just to figure out what are you doing if

01:03:15,520 --> 01:03:18,960
they can use it

01:03:16,799 --> 01:03:20,240
uh just a percentage of those visitors

01:03:18,960 --> 01:03:22,640
will actually say yeah

01:03:20,240 --> 01:03:23,839
this looks interesting let me try it so

01:03:22,640 --> 01:03:26,640
this is the first time

01:03:23,839 --> 01:03:28,400
users after a while some of those first

01:03:26,640 --> 01:03:30,559
time users will be converted to

01:03:28,400 --> 01:03:32,240
repeat users you like the product you

01:03:30,559 --> 01:03:35,599
use it again and again

01:03:32,240 --> 01:03:38,880
and what we're trying to do right is

01:03:35,599 --> 01:03:39,520
we're trying to convert users to paying

01:03:38,880 --> 01:03:42,559
users

01:03:39,520 --> 01:03:45,119
that will of course will lose a couple

01:03:42,559 --> 01:03:46,559
and the but most important are promoters

01:03:45,119 --> 01:03:48,960
so these are heavy users

01:03:46,559 --> 01:03:50,720
who actually pay for a product but they

01:03:48,960 --> 01:03:52,880
also recommend the product

01:03:50,720 --> 01:03:55,839
to someone else right and they actually

01:03:52,880 --> 01:03:58,880
allow you to to get more customers

01:03:55,839 --> 01:04:01,359
so the best case scenario

01:03:58,880 --> 01:04:02,640
right even if you write awesome thing

01:04:01,359 --> 01:04:06,000
right

01:04:02,640 --> 01:04:09,039
it's probably 10 20

01:04:06,000 --> 01:04:11,760
of first time users will be converted to

01:04:09,039 --> 01:04:13,039
paying customers it's ridiculously small

01:04:11,760 --> 01:04:16,079
percentage

01:04:13,039 --> 01:04:19,039
uh so imagine that

01:04:16,079 --> 01:04:20,160
you convert all first-time visitors or

01:04:19,039 --> 01:04:23,680
first-time users

01:04:20,160 --> 01:04:24,839
into paying customers imagine what it

01:04:23,680 --> 01:04:27,839
will do to your

01:04:24,839 --> 01:04:30,559
revenue right

01:04:27,839 --> 01:04:31,039
it will blow you out of a warrior

01:04:30,559 --> 01:04:34,000
because

01:04:31,039 --> 01:04:34,960
it you'll convert to five maybe 10 times

01:04:34,000 --> 01:04:37,760
the revenue

01:04:34,960 --> 01:04:38,880
imagine what it will do to your company

01:04:37,760 --> 01:04:41,440
unfortunately

01:04:38,880 --> 01:04:42,160
you always lose people through this

01:04:41,440 --> 01:04:44,880
funnel

01:04:42,160 --> 01:04:46,079
right they're dropping out so i kind of

01:04:44,880 --> 01:04:49,200
think about people

01:04:46,079 --> 01:04:51,280
and why they drop out in two ways

01:04:49,200 --> 01:04:52,799
so for example first time visitor comes

01:04:51,280 --> 01:04:56,000
in says ah

01:04:52,799 --> 01:04:57,599
pistol doesn't do what i need uh maybe

01:04:56,000 --> 01:05:00,160
it doesn't work on my operating system

01:04:57,599 --> 01:05:02,960
so i consider those valid reasons

01:05:00,160 --> 01:05:04,000
yeah it's fine to lose people who cannot

01:05:02,960 --> 01:05:06,079
run at all

01:05:04,000 --> 01:05:07,520
but maybe a user drops out because they

01:05:06,079 --> 01:05:10,960
say this tool doesn't do

01:05:07,520 --> 01:05:12,880
what i need but it does uh does not work

01:05:10,960 --> 01:05:13,680
on my platform but it does work on that

01:05:12,880 --> 01:05:16,079
platform

01:05:13,680 --> 01:05:17,359
so i consider those the wrong reasons to

01:05:16,079 --> 01:05:20,240
drop out

01:05:17,359 --> 01:05:20,720
uh let's say you're trying to say oh

01:05:20,240 --> 01:05:23,200
this

01:05:20,720 --> 01:05:24,799
tool doesn't run on ci though okay yeah

01:05:23,200 --> 01:05:26,559
it doesn't run doesn't run

01:05:24,799 --> 01:05:28,799
but imagine they drop out because they

01:05:26,559 --> 01:05:30,559
don't know how to set it up to run on ci

01:05:28,799 --> 01:05:32,160
so that's a wrong reason for dropping

01:05:30,559 --> 01:05:34,480
out imagine

01:05:32,160 --> 01:05:35,359
uh a user says uh your tool is great

01:05:34,480 --> 01:05:38,240
tried it

01:05:35,359 --> 01:05:40,799
love it uh i cannot afford it that's a

01:05:38,240 --> 01:05:42,880
valid reason for dropout

01:05:40,799 --> 01:05:45,039
but if a user drops out saying i don't

01:05:42,880 --> 01:05:46,640
know what value it gives me

01:05:45,039 --> 01:05:49,280
i don't know how to justify your price

01:05:46,640 --> 01:05:52,880
that's absolutely wrong reason

01:05:49,280 --> 01:05:54,000
finally maybe uh someone says i'm you

01:05:52,880 --> 01:05:55,760
know happy

01:05:54,000 --> 01:05:58,880
i'm not recommend to anyone but it works

01:05:55,760 --> 01:06:00,799
for me okay fine

01:05:58,880 --> 01:06:02,079
but maybe they don't recommend it to

01:06:00,799 --> 01:06:03,599
someone who asked

01:06:02,079 --> 01:06:07,440
because they didn't know it was possible

01:06:03,599 --> 01:06:07,440
to do so that's the wrong reason

01:06:07,760 --> 01:06:12,880
so kind of a valid reasons are

01:06:10,799 --> 01:06:14,880
you know it's your market fit maybe you

01:06:12,880 --> 01:06:16,880
should pivot a little bit and add a

01:06:14,880 --> 01:06:18,720
feature maybe you should fix some bugs

01:06:16,880 --> 01:06:20,880
this is absolutely you know the green

01:06:18,720 --> 01:06:23,440
area that's our day-to-day work

01:06:20,880 --> 01:06:24,640
right we identify maybe a feature that

01:06:23,440 --> 01:06:28,000
people want to pay for

01:06:24,640 --> 01:06:28,799
we implement it no problem but on the

01:06:28,000 --> 01:06:30,640
left

01:06:28,799 --> 01:06:33,119
these are all the reasons but you lose

01:06:30,640 --> 01:06:35,760
customers but you could actually keep

01:06:33,119 --> 01:06:37,200
and convert you know bad user interface

01:06:35,760 --> 01:06:39,760
bad documentation

01:06:37,200 --> 01:06:40,400
lack of examples all the wrong reasons

01:06:39,760 --> 01:06:42,960
for

01:06:40,400 --> 01:06:44,400
uh potential customers dropping out so

01:06:42,960 --> 01:06:47,280
our goal is to

01:06:44,400 --> 01:06:48,240
drive that like red area or orange area

01:06:47,280 --> 01:06:49,680
to zero

01:06:48,240 --> 01:06:51,440
because then we'll get so much more

01:06:49,680 --> 01:06:53,359
revenue because we'll stop

01:06:51,440 --> 01:06:56,079
dropping these people out from our

01:06:53,359 --> 01:06:58,000
funnel so imagine

01:06:56,079 --> 01:07:00,000
if you get twice as many people going

01:06:58,000 --> 01:07:02,720
all the way from first-time visitors

01:07:00,000 --> 01:07:03,440
all the way down to paying customers so

01:07:02,720 --> 01:07:06,240
promoters

01:07:03,440 --> 01:07:07,520
your revenue will increase end times not

01:07:06,240 --> 01:07:11,200
like percentage but

01:07:07,520 --> 01:07:12,960
end times so another point where i think

01:07:11,200 --> 01:07:15,119
it's very important if you compare how

01:07:12,960 --> 01:07:16,319
hard it is for you to work on features

01:07:15,119 --> 01:07:18,319
and bugs compared

01:07:16,319 --> 01:07:20,720
to how hard it is to actually do better

01:07:18,319 --> 01:07:23,920
documentation and more examples

01:07:20,720 --> 01:07:25,520
it is so much easier

01:07:23,920 --> 01:07:28,400
to write documentation for things you

01:07:25,520 --> 01:07:29,760
already have it's hard to you know write

01:07:28,400 --> 01:07:33,440
a new

01:07:29,760 --> 01:07:34,799
product it's easy to have a nice guide

01:07:33,440 --> 01:07:36,960
that works for

01:07:34,799 --> 01:07:38,559
so how do you create better

01:07:36,960 --> 01:07:41,599
documentation so you don't

01:07:38,559 --> 01:07:44,640
lose customers through a funnel

01:07:41,599 --> 01:07:45,039
well you just don't start blindly

01:07:44,640 --> 01:07:47,920
writing

01:07:45,039 --> 01:07:48,480
documentation you think about the users

01:07:47,920 --> 01:07:50,799
and you

01:07:48,480 --> 01:07:52,960
kind of create a couple personas so for

01:07:50,799 --> 01:07:56,240
example a persona could be

01:07:52,960 --> 01:07:57,839
a first-time visitor right maybe

01:07:56,240 --> 01:07:59,599
what kind of question do they want

01:07:57,839 --> 01:08:02,400
answered by your documentation

01:07:59,599 --> 01:08:03,599
uh what does this service do how does it

01:08:02,400 --> 01:08:05,520
work will it work for me

01:08:03,599 --> 01:08:07,520
so you want to answer those questions

01:08:05,520 --> 01:08:08,400
the trick there is to put like hello

01:08:07,520 --> 01:08:10,240
world

01:08:08,400 --> 01:08:12,480
example first in your documentation so

01:08:10,240 --> 01:08:15,599
that users immediately understand

01:08:12,480 --> 01:08:17,040
what the tool does how great the tool is

01:08:15,599 --> 01:08:19,679
so they don't drop out because they

01:08:17,040 --> 01:08:22,400
don't understand what's going on

01:08:19,679 --> 01:08:24,080
uh imagine first time user not a visitor

01:08:22,400 --> 01:08:26,960
but the user well they might

01:08:24,080 --> 01:08:27,920
want to ask a couple specific questions

01:08:26,960 --> 01:08:30,480
does it do x

01:08:27,920 --> 01:08:32,880
how does it do why so in that case you

01:08:30,480 --> 01:08:35,520
probably want more examples

01:08:32,880 --> 01:08:36,000
under or after hello world kind of

01:08:35,520 --> 01:08:38,960
showing

01:08:36,000 --> 01:08:39,839
basic use cases you don't want the user

01:08:38,960 --> 01:08:42,880
to kind of

01:08:39,839 --> 01:08:45,040
give up after trying the first time

01:08:42,880 --> 01:08:46,960
another user persona could be a repeat

01:08:45,040 --> 01:08:48,400
user they want to know how to do

01:08:46,960 --> 01:08:51,759
specific things

01:08:48,400 --> 01:08:53,440
how to solve errors right

01:08:51,759 --> 01:08:55,679
in that case you have to write more

01:08:53,440 --> 01:08:58,080
examples so after a couple of inline

01:08:55,679 --> 01:08:59,839
you want to give links to all potential

01:08:58,080 --> 01:09:03,440
use cases of your software

01:08:59,839 --> 01:09:06,799
that you foresee people hitting

01:09:03,440 --> 01:09:08,799
a repeat visitor same questions but

01:09:06,799 --> 01:09:11,520
one's training wants to be efficient

01:09:08,799 --> 01:09:14,080
right it is very support available

01:09:11,520 --> 01:09:16,000
so you know you probably won't create

01:09:14,080 --> 01:09:16,880
more complicated recipes not just

01:09:16,000 --> 01:09:20,560
individual

01:09:16,880 --> 01:09:22,400
kind of do how to do x examples

01:09:20,560 --> 01:09:24,080
uh finally promoters with people who

01:09:22,400 --> 01:09:27,759
recommend things the people who

01:09:24,080 --> 01:09:30,319
love your tool you probably want to push

01:09:27,759 --> 01:09:32,799
updates tell them what's coming up the

01:09:30,319 --> 01:09:34,719
roadmap and so on

01:09:32,799 --> 01:09:36,000
the point is your documentation will

01:09:34,719 --> 01:09:39,520
keep growing right

01:09:36,000 --> 01:09:41,920
in our like we do test runner just the

01:09:39,520 --> 01:09:45,279
index is painful to watch right because

01:09:41,920 --> 01:09:47,120
it keeps expanding and expanding

01:09:45,279 --> 01:09:48,400
well the worst thing about creating a

01:09:47,120 --> 01:09:50,880
lot of documentation

01:09:48,400 --> 01:09:52,799
is that when you go back to our support

01:09:50,880 --> 01:09:53,440
channel you know like the online chat

01:09:52,799 --> 01:09:55,520
channel

01:09:53,440 --> 01:09:56,800
and you look at that you start crying

01:09:55,520 --> 01:09:59,440
because you like

01:09:56,800 --> 01:10:00,960
you see all these questions where you're

01:09:59,440 --> 01:10:04,080
like

01:10:00,960 --> 01:10:04,960
how come it's a question like i know it

01:10:04,080 --> 01:10:07,040
can do it

01:10:04,960 --> 01:10:08,880
right every question that you see in

01:10:07,040 --> 01:10:11,600
your support channel

01:10:08,880 --> 01:10:12,640
that is a failure it's a failure of your

01:10:11,600 --> 01:10:14,640
tax

01:10:12,640 --> 01:10:16,000
and bad failure means you either have

01:10:14,640 --> 01:10:18,320
support where you have to

01:10:16,000 --> 01:10:20,000
yourself answer it which costs money or

01:10:18,320 --> 01:10:20,800
you're potentially losing a customer

01:10:20,000 --> 01:10:23,920
which again

01:10:20,800 --> 01:10:25,679
is a huge money living on table

01:10:23,920 --> 01:10:27,040
i kind of like to measure that

01:10:25,679 --> 01:10:29,520
percentage kind of

01:10:27,040 --> 01:10:30,080
look at all the questions across all

01:10:29,520 --> 01:10:33,520
support

01:10:30,080 --> 01:10:34,320
things right like your github issues

01:10:33,520 --> 01:10:38,159
your

01:10:34,320 --> 01:10:39,440
chat channel find all the questions then

01:10:38,159 --> 01:10:41,199
look at the questions that you think

01:10:39,440 --> 01:10:41,840
your documentation answers like right

01:10:41,199 --> 01:10:44,239
now

01:10:41,840 --> 01:10:44,880
and look at this as a percentage because

01:10:44,239 --> 01:10:47,679
then

01:10:44,880 --> 01:10:48,159
you can say okay if i have less than 50

01:10:47,679 --> 01:10:50,480
of both

01:10:48,159 --> 01:10:53,199
questions answered by my documentation i

01:10:50,480 --> 01:10:56,640
just have to write more documentation

01:10:53,199 --> 01:10:59,040
right but if it's above 50 that means

01:10:56,640 --> 01:10:59,760
that you wrote documentation you have it

01:10:59,040 --> 01:11:03,199
it's just

01:10:59,760 --> 01:11:05,120
users cannot find it right and the trick

01:11:03,199 --> 01:11:06,960
is that you want the users to answer

01:11:05,120 --> 01:11:09,120
their own questions

01:11:06,960 --> 01:11:10,960
by themselves like finding how to do

01:11:09,120 --> 01:11:12,320
things not you answering because that

01:11:10,960 --> 01:11:15,040
doesn't scale

01:11:12,320 --> 01:11:15,600
unfortunately good documentation that

01:11:15,040 --> 01:11:17,679
answers

01:11:15,600 --> 01:11:18,800
everyone's questions is very hard and a

01:11:17,679 --> 01:11:21,840
thing it's hard

01:11:18,800 --> 01:11:24,239
because it's all contradictory

01:11:21,840 --> 01:11:26,159
all those personas right like imagine

01:11:24,239 --> 01:11:27,360
first time user versus repeat user

01:11:26,159 --> 01:11:29,679
versus power user

01:11:27,360 --> 01:11:30,719
they have completely different questions

01:11:29,679 --> 01:11:32,640
so you

01:11:30,719 --> 01:11:34,159
if you try to organize your

01:11:32,640 --> 01:11:36,080
documentation

01:11:34,159 --> 01:11:37,280
focused on particular persona you're

01:11:36,080 --> 01:11:40,000
gonna fail

01:11:37,280 --> 01:11:40,880
right like what do you put first right

01:11:40,000 --> 01:11:45,120
um

01:11:40,880 --> 01:11:48,320
easy always optimize for for beginners

01:11:45,120 --> 01:11:49,440
for hello world right that's your first

01:11:48,320 --> 01:11:53,199
question

01:11:49,440 --> 01:11:54,960
because for every pretend like beginners

01:11:53,199 --> 01:11:57,040
10 first time users compared to

01:11:54,960 --> 01:11:58,719
one advanced user and every advanced

01:11:57,040 --> 01:12:00,480
user used to be a beginner who

01:11:58,719 --> 01:12:02,480
successfully was converted

01:12:00,480 --> 01:12:04,000
so all is optimized at the top of a

01:12:02,480 --> 01:12:06,840
funnel that's where

01:12:04,000 --> 01:12:08,480
like the number of potential is the

01:12:06,840 --> 01:12:11,280
highest okay

01:12:08,480 --> 01:12:13,679
for everything else put documentation

01:12:11,280 --> 01:12:16,080
maybe have some structure

01:12:13,679 --> 01:12:17,040
don't worry about much but what you can

01:12:16,080 --> 01:12:20,080
do next

01:12:17,040 --> 01:12:22,000
is make sure that your documentation

01:12:20,080 --> 01:12:23,679
search is really really good like

01:12:22,000 --> 01:12:25,679
i'm searching here like things

01:12:23,679 --> 01:12:28,159
interesting to beginners

01:12:25,679 --> 01:12:29,679
things to more advanced uh you know

01:12:28,159 --> 01:12:32,880
maybe advanced users

01:12:29,679 --> 01:12:36,719
the search finds everything so

01:12:32,880 --> 01:12:38,719
another thing what i can recommend is

01:12:36,719 --> 01:12:40,000
don't answer support questions right

01:12:38,719 --> 01:12:41,840
don't go to your support channel and

01:12:40,000 --> 01:12:44,480
start adding things

01:12:41,840 --> 01:12:45,360
instead and especially for for private

01:12:44,480 --> 01:12:47,760
triples because

01:12:45,360 --> 01:12:49,679
that is one single operation nobody

01:12:47,760 --> 01:12:52,480
benefits but one user

01:12:49,679 --> 01:12:55,040
instead every time you see a question

01:12:52,480 --> 01:12:58,080
update your documentation

01:12:55,040 --> 01:12:59,199
answer with a link so that everyone

01:12:58,080 --> 01:13:01,600
after that user

01:12:59,199 --> 01:13:03,040
benefits from your work so that's just

01:13:01,600 --> 01:13:04,400
my thing

01:13:03,040 --> 01:13:05,920
that's what your support team should be

01:13:04,400 --> 01:13:07,840
doing they should be automating

01:13:05,920 --> 01:13:11,040
themselves or writing themselves

01:13:07,840 --> 01:13:13,600
out of existence so

01:13:11,040 --> 01:13:14,960
i talk about documentation kind of my

01:13:13,600 --> 01:13:17,760
view of a value

01:13:14,960 --> 01:13:19,040
let's see how we can set up a search so

01:13:17,760 --> 01:13:20,719
i have this example

01:13:19,040 --> 01:13:22,719
it's a small little website with a

01:13:20,719 --> 01:13:25,679
couple pages i can use search

01:13:22,719 --> 01:13:27,600
uh let's say i want to search for maybe

01:13:25,679 --> 01:13:30,320
right and it finds maybe

01:13:27,600 --> 01:13:31,440
because it's right here if i search for

01:13:30,320 --> 01:13:35,040
about

01:13:31,440 --> 01:13:37,120
it finds about page and

01:13:35,040 --> 01:13:38,159
about on the main page because i have

01:13:37,120 --> 01:13:40,719
both

01:13:38,159 --> 01:13:43,040
great just a little you know kind of

01:13:40,719 --> 01:13:44,840
static site

01:13:43,040 --> 01:13:46,960
the question you might ask yourself is

01:13:44,840 --> 01:13:49,520
well a majority

01:13:46,960 --> 01:13:50,080
of frameworks right they kind of have

01:13:49,520 --> 01:13:53,120
this

01:13:50,080 --> 01:13:55,360
like search widget

01:13:53,120 --> 01:13:56,560
already built in like you know viewpress

01:13:55,360 --> 01:13:59,920
has it

01:13:56,560 --> 01:14:03,360
all of those client-side widgets they're

01:13:59,920 --> 01:14:05,600
very very simple they just index h1 h2

01:14:03,360 --> 01:14:08,080
header so for example in this case

01:14:05,600 --> 01:14:08,960
by using this client side thing uh

01:14:08,080 --> 01:14:11,840
client-side

01:14:08,960 --> 01:14:14,080
organizate search it only finds about on

01:14:11,840 --> 01:14:16,320
the second page it doesn't find the text

01:14:14,080 --> 01:14:17,199
about on the first page so they're a lot

01:14:16,320 --> 01:14:20,640
a lot

01:14:17,199 --> 01:14:23,840
more primitive and do not work long term

01:14:20,640 --> 01:14:24,480
so the thing that really kind of i like

01:14:23,840 --> 01:14:26,840
using

01:14:24,480 --> 01:14:29,840
is algolia and it's something i'm not

01:14:26,840 --> 01:14:32,080
affiliated completely outside company

01:14:29,840 --> 01:14:34,080
but you notice that most of the

01:14:32,080 --> 01:14:35,679
javascript projects are using algolia

01:14:34,080 --> 01:14:38,000
it's actually unbelievable

01:14:35,679 --> 01:14:39,840
right they give you free resources so

01:14:38,000 --> 01:14:42,560
it's nice but it's unbelievable

01:14:39,840 --> 01:14:43,840
they got like 90 percent search market

01:14:42,560 --> 01:14:46,960
right now which is

01:14:43,840 --> 01:14:48,800
quite huge uh especially considering

01:14:46,960 --> 01:14:51,760
google completely missed about that

01:14:48,800 --> 01:14:52,320
so um i came to to kind of like look at

01:14:51,760 --> 01:14:54,080
alcohol

01:14:52,320 --> 01:14:55,360
as like when i searched uh vgs

01:14:54,080 --> 01:14:58,560
documentation like

01:14:55,360 --> 01:15:01,360
this works so well so how do i do myself

01:14:58,560 --> 01:15:01,600
okay so here's how you do it you create

01:15:01,360 --> 01:15:03,600
a

01:15:01,600 --> 01:15:05,360
algolia app they have a free plan you

01:15:03,600 --> 01:15:06,960
can start using it for your sites

01:15:05,360 --> 01:15:08,400
like right away you create an

01:15:06,960 --> 01:15:10,400
application

01:15:08,400 --> 01:15:11,679
then inside application you create a

01:15:10,400 --> 01:15:14,880
search index

01:15:11,679 --> 01:15:15,679
that's where all those records will be

01:15:14,880 --> 01:15:17,679
stored

01:15:15,679 --> 01:15:19,199
so when you search it will find a record

01:15:17,679 --> 01:15:22,320
return it which will link

01:15:19,199 --> 01:15:25,280
to a particular part on your page so

01:15:22,320 --> 01:15:26,320
after every deploy you scrape the site

01:15:25,280 --> 01:15:29,920
create for record

01:15:26,320 --> 01:15:32,719
and then you'll just use some search win

01:15:29,920 --> 01:15:34,400
widget but we'll go to that index find

01:15:32,719 --> 01:15:37,120
relevant information

01:15:34,400 --> 01:15:38,400
and algolia runs the back-end service so

01:15:37,120 --> 01:15:40,960
every time you scrape a site

01:15:38,400 --> 01:15:42,640
you recreate the whole index because you

01:15:40,960 --> 01:15:44,560
recreate the whole website right so it

01:15:42,640 --> 01:15:47,679
completely blows away existing

01:15:44,560 --> 01:15:50,719
index creates you a new one

01:15:47,679 --> 01:15:53,280
so when you create algolia app it

01:15:50,719 --> 01:15:55,679
creates a couple of api keys

01:15:53,280 --> 01:15:57,280
so if you want to scrape that means add

01:15:55,679 --> 01:15:57,920
new records because it blows away

01:15:57,280 --> 01:16:01,360
previous

01:15:57,920 --> 01:16:03,679
uh search index but puts new records you

01:16:01,360 --> 01:16:05,920
need application id and the private

01:16:03,679 --> 01:16:07,600
admin api key so keyboard secrets

01:16:05,920 --> 01:16:11,760
otherwise someone can just destroy

01:16:07,600 --> 01:16:14,560
or inject bad information if you want to

01:16:11,760 --> 01:16:15,360
search you just need the public search

01:16:14,560 --> 01:16:17,840
api key

01:16:15,360 --> 01:16:21,199
let's just read only key so you're safe

01:16:17,840 --> 01:16:24,640
that's what you put on your website

01:16:21,199 --> 01:16:26,560
so scraping aside is pretty simple you

01:16:24,640 --> 01:16:29,679
just need the url

01:16:26,560 --> 01:16:31,520
and all the records will go into the

01:16:29,679 --> 01:16:33,120
index on algolia

01:16:31,520 --> 01:16:34,640
you have to actually look at the

01:16:33,120 --> 01:16:37,120
structure of your

01:16:34,640 --> 01:16:38,480
web page and see how do you like where

01:16:37,120 --> 01:16:39,199
is the main content that you want to

01:16:38,480 --> 01:16:42,719
scrape

01:16:39,199 --> 01:16:44,159
does it have specific article does it

01:16:42,719 --> 01:16:46,000
you know what's the structure what's

01:16:44,159 --> 01:16:49,199
more important h1

01:16:46,000 --> 01:16:50,560
is where like h2 or h3 right

01:16:49,199 --> 01:16:52,960
so once you know the structure of your

01:16:50,560 --> 01:16:55,360
documentation you create a json file

01:16:52,960 --> 01:16:56,560
that's algolia config file where you

01:16:55,360 --> 01:17:00,080
have different

01:16:56,560 --> 01:17:03,440
levels ld level 0 level 1

01:17:00,080 --> 01:17:04,880
from most important to least important

01:17:03,440 --> 01:17:07,280
so when you search for let's say

01:17:04,880 --> 01:17:09,840
something and it matches level zero

01:17:07,280 --> 01:17:11,360
that's the most important page result it

01:17:09,840 --> 01:17:13,199
will return

01:17:11,360 --> 01:17:15,360
if it's just somewhere in a text of my

01:17:13,199 --> 01:17:19,280
document that will be the tax level

01:17:15,360 --> 01:17:21,440
which is the lowest level okay so

01:17:19,280 --> 01:17:22,320
you create this and then to actually

01:17:21,440 --> 01:17:23,679
scrape it

01:17:22,320 --> 01:17:25,360
you just run a docker image that

01:17:23,679 --> 01:17:27,360
algorithm provides you put your

01:17:25,360 --> 01:17:30,400
application and api keys

01:17:27,360 --> 01:17:33,440
and you say go and it will go and

01:17:30,400 --> 01:17:36,080
fi it actually runs a selenium scraper

01:17:33,440 --> 01:17:36,960
um traverses all the pages that it can

01:17:36,080 --> 01:17:39,440
reach

01:17:36,960 --> 01:17:40,880
and returns all the records so for each

01:17:39,440 --> 01:17:43,520
page it will say

01:17:40,880 --> 01:17:44,080
found eight different records and free

01:17:43,520 --> 01:17:46,239
records

01:17:44,080 --> 01:17:47,920
so that's it it creates index it runs

01:17:46,239 --> 01:17:49,600
very quickly

01:17:47,920 --> 01:17:51,760
if you want to search for example on

01:17:49,600 --> 01:17:55,199
viewpress there is a built-in

01:17:51,760 --> 01:17:58,640
widget you provide the search api key

01:17:55,199 --> 01:17:59,360
and index name and api app id and that's

01:17:58,640 --> 01:18:02,239
it

01:17:59,360 --> 01:18:03,679
so now when you search you will see that

01:18:02,239 --> 01:18:06,719
algolia widget

01:18:03,679 --> 01:18:08,239
uh creates all the markup and when you

01:18:06,719 --> 01:18:08,960
search you will actually see all those

01:18:08,239 --> 01:18:11,920
queries

01:18:08,960 --> 01:18:13,120
going on right and hitting the algolia

01:18:11,920 --> 01:18:15,040
server

01:18:13,120 --> 01:18:18,080
and you can look at the response it's

01:18:15,040 --> 01:18:20,960
literally like json objects

01:18:18,080 --> 01:18:23,520
json records from most important to

01:18:20,960 --> 01:18:26,719
least important

01:18:23,520 --> 01:18:28,800
okay um but that's the simple side

01:18:26,719 --> 01:18:31,280
imagine you have documentation side and

01:18:28,800 --> 01:18:31,920
you also have a blog that has technical

01:18:31,280 --> 01:18:34,640
content

01:18:31,920 --> 01:18:36,080
and maybe you have more examples maybe

01:18:34,640 --> 01:18:39,520
some secondary side with

01:18:36,080 --> 01:18:40,800
just examples in that case take with

01:18:39,520 --> 01:18:44,000
algolia config

01:18:40,800 --> 01:18:47,280
file right and you can define

01:18:44,000 --> 01:18:50,320
multiple starting urls so you can start

01:18:47,280 --> 01:18:52,640
you know scraping the main site your

01:18:50,320 --> 01:18:54,480
secondary site and a blog and you can

01:18:52,640 --> 01:18:56,640
give different selectors so that

01:18:54,480 --> 01:18:57,920
you can define different selectors for

01:18:56,640 --> 01:19:00,719
each site

01:18:57,920 --> 01:19:02,480
and you look at html in each one and you

01:19:00,719 --> 01:19:05,040
say okay on my main site

01:19:02,480 --> 01:19:07,120
these are the selectors and elements in

01:19:05,040 --> 01:19:10,480
this particular hierarchy

01:19:07,120 --> 01:19:11,120
on my i know blog completely different

01:19:10,480 --> 01:19:14,560
ones

01:19:11,120 --> 01:19:17,600
so it will scrape each site differently

01:19:14,560 --> 01:19:20,480
and the scraping is is pretty fast so

01:19:17,600 --> 01:19:23,040
our large documentation site plus blog

01:19:20,480 --> 01:19:26,320
plus everything um

01:19:23,040 --> 01:19:28,640
21 000 different blocks of text

01:19:26,320 --> 01:19:33,040
only took exactly two minutes so it's

01:19:28,640 --> 01:19:33,040
pretty fast around after each deploy

01:19:33,199 --> 01:19:38,560
and then you know it just works and

01:19:36,400 --> 01:19:40,000
this video shows that it finds something

01:19:38,560 --> 01:19:42,159
on our documentation

01:19:40,000 --> 01:19:43,199
and another heat result is from our

01:19:42,159 --> 01:19:46,159
example site

01:19:43,199 --> 01:19:47,520
so it actually finds things from

01:19:46,159 --> 01:19:50,800
multiple sources

01:19:47,520 --> 01:19:51,920
and it actually you can define which one

01:19:50,800 --> 01:19:53,760
is more important

01:19:51,920 --> 01:19:55,760
and priority of each source of

01:19:53,760 --> 01:19:58,800
information so it will always display

01:19:55,760 --> 01:19:59,440
main documentation first and maybe a

01:19:58,800 --> 01:20:04,640
blog

01:19:59,440 --> 01:20:08,159
second okay

01:20:04,640 --> 01:20:12,320
okay so i describe what this you know

01:20:08,159 --> 01:20:14,719
index is how it works a couple of

01:20:12,320 --> 01:20:14,719
tips

01:20:16,719 --> 01:20:21,040
so because we are developers we

01:20:21,120 --> 01:20:27,600
want to make sure that our code is

01:20:24,320 --> 01:20:31,760
searchable and algolia documentation

01:20:27,600 --> 01:20:33,199
tells you that you should not scrape

01:20:31,760 --> 01:20:35,360
blocks of code

01:20:33,199 --> 01:20:36,800
right because it doesn't know what to do

01:20:35,360 --> 01:20:40,080
right it's

01:20:36,800 --> 01:20:43,199
alcohol is optimized for natural text

01:20:40,080 --> 01:20:45,120
it doesn't know how how to do how to

01:20:43,199 --> 01:20:47,600
parse tokens and create ast

01:20:45,120 --> 01:20:48,639
and do all the types and so on so

01:20:47,600 --> 01:20:51,440
everything that craig

01:20:48,639 --> 01:20:52,000
said like for goalies like completely is

01:20:51,440 --> 01:20:54,560
beyond

01:20:52,000 --> 01:20:57,600
its understanding so what i've done

01:20:54,560 --> 01:20:59,840
myself because we have a lot of examples

01:20:57,600 --> 01:21:01,040
in my examples i use a lot of comments

01:20:59,840 --> 01:21:03,600
because they do

01:21:01,040 --> 01:21:05,840
provide valuable information about what

01:21:03,600 --> 01:21:09,120
each code sample does

01:21:05,840 --> 01:21:09,840
so what i've done in my algolia scraping

01:21:09,120 --> 01:21:12,239
thing

01:21:09,840 --> 01:21:14,000
is that i actually allowed it to scrape

01:21:12,239 --> 01:21:16,239
just the comment lines not

01:21:14,000 --> 01:21:18,000
you know anything else but just the

01:21:16,239 --> 01:21:22,159
comments and the way it works

01:21:18,000 --> 01:21:25,679
is that if i look at the structure

01:21:22,159 --> 01:21:28,400
of my page when i create the static site

01:21:25,679 --> 01:21:29,440
before it gets scraped the page is

01:21:28,400 --> 01:21:33,199
static

01:21:29,440 --> 01:21:36,239
and the page is all the code examples

01:21:33,199 --> 01:21:36,719
are syntax highlighted that means that

01:21:36,239 --> 01:21:39,920
they are

01:21:36,719 --> 01:21:42,000
tokenized and like a variable common

01:21:39,920 --> 01:21:43,679
everything has its own class because

01:21:42,000 --> 01:21:47,920
that class

01:21:43,679 --> 01:21:50,239
is used to properly attach css

01:21:47,920 --> 01:21:51,760
with different colors so for example in

01:21:50,239 --> 01:21:54,960
this case the comment

01:21:51,760 --> 01:21:56,000
would have a class comment because

01:21:54,960 --> 01:21:58,960
that's what it shows

01:21:56,000 --> 01:22:01,920
up as gray so i know that my comments

01:21:58,960 --> 01:22:04,639
have a specific selector

01:22:01,920 --> 01:22:05,280
and so what i've done in my algolia

01:22:04,639 --> 01:22:08,320
config

01:22:05,280 --> 01:22:12,239
is that i defined the selectors for

01:22:08,320 --> 01:22:12,800
h1 level h2 like least important and so

01:22:12,239 --> 01:22:16,239
on

01:22:12,800 --> 01:22:17,199
and all the way at the bottom i have a

01:22:16,239 --> 01:22:20,719
text selector

01:22:17,199 --> 01:22:24,080
like this is the main thing like the

01:22:20,719 --> 01:22:26,800
text on your site but it's not h1

01:22:24,080 --> 01:22:27,679
or h2 like not the heading and so

01:22:26,800 --> 01:22:31,520
usually

01:22:27,679 --> 01:22:34,400
that would be html tag for a paragraph p

01:22:31,520 --> 01:22:35,040
for example so what i've done i just

01:22:34,400 --> 01:22:39,120
added

01:22:35,040 --> 01:22:42,800
a comma and i added

01:22:39,120 --> 01:22:45,840
class comment so it will take both

01:22:42,800 --> 01:22:47,280
paragraphs and the code comments

01:22:45,840 --> 01:22:49,280
together

01:22:47,280 --> 01:22:51,520
all right and so my algolia will

01:22:49,280 --> 01:22:53,760
actually scrape it and will consider

01:22:51,520 --> 01:22:56,080
the code comments as well during

01:22:53,760 --> 01:22:57,679
scraping

01:22:56,080 --> 01:22:59,120
what you can do when you're actually

01:22:57,679 --> 01:23:01,280
defining this you can

01:22:59,120 --> 01:23:03,360
open your browser and you can take that

01:23:01,280 --> 01:23:06,480
selector because it's a normal

01:23:03,360 --> 01:23:08,880
css selector and you can just

01:23:06,480 --> 01:23:09,520
copy paste it into your dev tools and

01:23:08,880 --> 01:23:13,040
use

01:23:09,520 --> 01:23:14,159
double dollar sign which is like query

01:23:13,040 --> 01:23:16,320
selector all

01:23:14,159 --> 01:23:18,159
and then it will give you all elements

01:23:16,320 --> 01:23:21,440
matching that selector so you can see

01:23:18,159 --> 01:23:24,880
on this page what are all the elements

01:23:21,440 --> 01:23:26,880
that algolia will consider and scrape so

01:23:24,880 --> 01:23:30,400
you can see how i hover it actually

01:23:26,880 --> 01:23:33,199
has like a p block a common block

01:23:30,400 --> 01:23:34,480
so it will actually grab those and each

01:23:33,199 --> 01:23:37,600
one of those

01:23:34,480 --> 01:23:41,040
will become a record in this index

01:23:37,600 --> 01:23:43,760
and that means it's searchable right

01:23:41,040 --> 01:23:45,040
and it works out very well because then

01:23:43,760 --> 01:23:48,000
it encourages

01:23:45,040 --> 01:23:49,600
you to actually explain everything in

01:23:48,000 --> 01:23:52,000
your code examples

01:23:49,600 --> 01:23:53,679
using comments and the users benefit

01:23:52,000 --> 01:23:55,920
from that because when they search

01:23:53,679 --> 01:23:56,880
something for like a regular expression

01:23:55,920 --> 01:24:01,360
it will be

01:23:56,880 --> 01:24:04,000
found as i um

01:24:01,360 --> 01:24:05,920
well i don't show here but they'll be

01:24:04,000 --> 01:24:09,280
found

01:24:05,920 --> 01:24:10,719
uh the second thing that i think is

01:24:09,280 --> 01:24:12,800
extremely important

01:24:10,719 --> 01:24:14,639
so you should look at your support

01:24:12,800 --> 01:24:16,800
channels once in a while

01:24:14,639 --> 01:24:18,080
your chat your github issues your

01:24:16,800 --> 01:24:20,000
private support

01:24:18,080 --> 01:24:21,920
and you you should look at the questions

01:24:20,000 --> 01:24:26,320
that people ask

01:24:21,920 --> 01:24:28,239
and if you see a lot of questions right

01:24:26,320 --> 01:24:31,520
that are answered by your documentation

01:24:28,239 --> 01:24:34,480
but people still ask them

01:24:31,520 --> 01:24:35,920
that means but your search is bad right

01:24:34,480 --> 01:24:37,360
people don't don't find it

01:24:35,920 --> 01:24:39,280
or they don't even know that they can

01:24:37,360 --> 01:24:40,960
find it right sometimes your search box

01:24:39,280 --> 01:24:43,199
is hidden somewhere and people have no

01:24:40,960 --> 01:24:46,239
idea but it actually is that useful

01:24:43,199 --> 01:24:48,560
so um sometimes you will have both

01:24:46,239 --> 01:24:49,840
queries right like in this case have

01:24:48,560 --> 01:24:52,159
that text

01:24:49,840 --> 01:24:54,080
that have no results so alcohol that

01:24:52,159 --> 01:24:57,760
just says no results found

01:24:54,080 --> 01:25:01,360
i give up but interesting thing

01:24:57,760 --> 01:25:01,600
on a free algolia plan you will just get

01:25:01,360 --> 01:25:05,520
an

01:25:01,600 --> 01:25:09,280
email once a week right that will say

01:25:05,520 --> 01:25:13,120
um out of all queries that users entered

01:25:09,280 --> 01:25:16,159
40 had no results and this is uh

01:25:13,120 --> 01:25:17,040
really important that means people uh

01:25:16,159 --> 01:25:18,719
you have users

01:25:17,040 --> 01:25:20,320
they came into your documentation site

01:25:18,719 --> 01:25:23,679
tried to find an answer

01:25:20,320 --> 01:25:25,440
and failed you had nothing and algolia

01:25:23,679 --> 01:25:28,239
actually tells you all the queries

01:25:25,440 --> 01:25:28,719
right so in this case the user search

01:25:28,239 --> 01:25:30,639
for

01:25:28,719 --> 01:25:33,440
have the text and stop it you know

01:25:30,639 --> 01:25:35,679
things for testing

01:25:33,440 --> 01:25:36,480
if you had paid algolia plan you could

01:25:35,679 --> 01:25:39,040
actually go

01:25:36,480 --> 01:25:40,800
in you know in real time and see it like

01:25:39,040 --> 01:25:41,280
right there on that dashboard and you

01:25:40,800 --> 01:25:44,239
could

01:25:41,280 --> 01:25:45,920
understand it in detail right away but

01:25:44,239 --> 01:25:48,000
for even for free plan they actually

01:25:45,920 --> 01:25:51,679
tell you how squares

01:25:48,000 --> 01:25:53,760
so what do you do you go back and you

01:25:51,679 --> 01:25:56,800
write documentation for those

01:25:53,760 --> 01:26:00,080
queries so they no longer

01:25:56,800 --> 01:26:02,480
are empty because you know right

01:26:00,080 --> 01:26:03,280
this is what people are searching for

01:26:02,480 --> 01:26:06,000
you know but

01:26:03,280 --> 01:26:07,600
if they don't find it they either give

01:26:06,000 --> 01:26:09,520
up right away

01:26:07,600 --> 01:26:11,280
or lower the opinion of your

01:26:09,520 --> 01:26:14,480
documentation and software

01:26:11,280 --> 01:26:15,120
or be asked privately or for support

01:26:14,480 --> 01:26:16,960
right

01:26:15,120 --> 01:26:18,480
in in a support channel and that costs

01:26:16,960 --> 01:26:21,840
money to answer

01:26:18,480 --> 01:26:23,440
so i find it extremely easy just look at

01:26:21,840 --> 01:26:26,560
the questions that people

01:26:23,440 --> 01:26:29,679
search for and feel the gaps

01:26:26,560 --> 01:26:32,320
in your documentation

01:26:29,679 --> 01:26:32,800
another thing that i want to finish with

01:26:32,320 --> 01:26:36,000
just

01:26:32,800 --> 01:26:39,199
tips and tricks

01:26:36,000 --> 01:26:42,880
algolia is not just

01:26:39,199 --> 01:26:47,199
a website uh widget

01:26:42,880 --> 01:26:50,320
right algolia is the indexing service

01:26:47,199 --> 01:26:54,159
most of all and very fast api

01:26:50,320 --> 01:26:57,360
so you can take the same api key

01:26:54,159 --> 01:27:00,159
right and the same application id

01:26:57,360 --> 01:27:01,199
which are public and you can execute

01:27:00,159 --> 01:27:03,280
both queries

01:27:01,199 --> 01:27:04,639
but search algol and they have npm

01:27:03,280 --> 01:27:07,840
library you can execute

01:27:04,639 --> 01:27:09,840
yourself from any client

01:27:07,840 --> 01:27:11,280
right which means that for example for

01:27:09,840 --> 01:27:15,040
my you know

01:27:11,280 --> 01:27:18,080
job i built a node

01:27:15,040 --> 01:27:20,880
terminal you know documentation search

01:27:18,080 --> 01:27:22,719
so you can use it without installing it

01:27:20,880 --> 01:27:25,280
you start running it

01:27:22,719 --> 01:27:26,960
and then just type text as you would

01:27:25,280 --> 01:27:30,960
normally search on a website

01:27:26,960 --> 01:27:33,840
and it shows all the found hits

01:27:30,960 --> 01:27:35,520
with urls and you just select in a

01:27:33,840 --> 01:27:38,080
terminal the one that you

01:27:35,520 --> 01:27:40,159
think you want to see and it opens your

01:27:38,080 --> 01:27:42,480
browser at what url

01:27:40,159 --> 01:27:44,480
pretty straightforward right and allows

01:27:42,480 --> 01:27:46,719
you to quickly find documentation

01:27:44,480 --> 01:27:48,800
now i haven't explored it more but i

01:27:46,719 --> 01:27:50,960
think i would love to have those search

01:27:48,800 --> 01:27:51,840
widgets to be built into our support

01:27:50,960 --> 01:27:55,040
channel

01:27:51,840 --> 01:27:58,320
uh in our sales force right and

01:27:55,040 --> 01:28:01,199
and things like that it's it's extremely

01:27:58,320 --> 01:28:02,000
straightforward to access the index and

01:28:01,199 --> 01:28:04,159
search it

01:28:02,000 --> 01:28:05,760
because they've done the hard part of

01:28:04,159 --> 01:28:10,639
scraping

01:28:05,760 --> 01:28:12,639
right and organizing your information

01:28:10,639 --> 01:28:14,320
okay so i want to finish my

01:28:12,639 --> 01:28:16,960
documentation with again

01:28:14,320 --> 01:28:18,480
reiterating that good documentation is

01:28:16,960 --> 01:28:20,560
essential

01:28:18,480 --> 01:28:21,920
to the success of your project and the

01:28:20,560 --> 01:28:25,440
company

01:28:21,920 --> 01:28:26,320
all right open source and commercial

01:28:25,440 --> 01:28:29,199
products

01:28:26,320 --> 01:28:30,800
they live and die by how well people can

01:28:29,199 --> 01:28:33,840
use them

01:28:30,800 --> 01:28:36,960
and it's hard to write a software that

01:28:33,840 --> 01:28:38,080
has no bugs has all the features so

01:28:36,960 --> 01:28:41,120
obvious that you

01:28:38,080 --> 01:28:45,199
but users are never stuck never

01:28:41,120 --> 01:28:46,800
feel uh silly i would say using it

01:28:45,199 --> 01:28:48,480
so they'll go to your documentation

01:28:46,800 --> 01:28:51,520
trying to understand how to use it

01:28:48,480 --> 01:28:52,560
what to do what else it can do if you

01:28:51,520 --> 01:28:56,560
don't have

01:28:52,560 --> 01:28:58,960
answers you're losing right

01:28:56,560 --> 01:29:00,400
famous example in front-end world

01:28:58,960 --> 01:29:03,600
angularjs

01:29:00,400 --> 01:29:04,080
famously bad documentation fuji s came

01:29:03,600 --> 01:29:06,239
in

01:29:04,080 --> 01:29:07,280
with extremely good documentation from

01:29:06,239 --> 01:29:09,679
day one

01:29:07,280 --> 01:29:10,960
and people were like absolutely blown

01:29:09,679 --> 01:29:14,320
away and really like

01:29:10,960 --> 01:29:17,679
yeah i think view documentation

01:29:14,320 --> 01:29:20,000
like that's it so um as i kind of

01:29:17,679 --> 01:29:20,639
explain in in my view of documentation

01:29:20,000 --> 01:29:22,960
and how

01:29:20,639 --> 01:29:24,800
to set up personas and organize

01:29:22,960 --> 01:29:28,239
documentation

01:29:24,800 --> 01:29:30,480
focused on each persona it's hard

01:29:28,239 --> 01:29:31,920
right and it's often contradictory so i

01:29:30,480 --> 01:29:34,480
don't think you can create

01:29:31,920 --> 01:29:35,679
perfect website where every user who

01:29:34,480 --> 01:29:37,600
comes in

01:29:35,679 --> 01:29:38,719
can see their question answered right

01:29:37,600 --> 01:29:40,800
away of

01:29:38,719 --> 01:29:42,080
even find the answers like just by

01:29:40,800 --> 01:29:45,520
looking at index

01:29:42,080 --> 01:29:46,400
but right um so it's it might be

01:29:45,520 --> 01:29:48,719
impossible to

01:29:46,400 --> 01:29:49,600
to create organization luckily the

01:29:48,719 --> 01:29:53,040
search

01:29:49,600 --> 01:29:55,600
allows us to bypass that question and

01:29:53,040 --> 01:29:56,159
allow any user at any level if they can

01:29:55,600 --> 01:29:58,880
come in

01:29:56,159 --> 01:30:01,040
and use the search they can find their

01:29:58,880 --> 01:30:03,120
information anything with algolia

01:30:01,040 --> 01:30:04,840
we even with pretty simple setup i i

01:30:03,120 --> 01:30:06,639
didn't configure anything else i did not

01:30:04,840 --> 01:30:10,159
configure you know

01:30:06,639 --> 01:30:10,719
keywords alice's synonyms nothing just

01:30:10,159 --> 01:30:14,080
straight

01:30:10,719 --> 01:30:15,520
out of a box things just select

01:30:14,080 --> 01:30:17,679
in the structure of my document it

01:30:15,520 --> 01:30:21,600
turned out to be pretty simple

01:30:17,679 --> 01:30:23,920
and i would say much better

01:30:21,600 --> 01:30:25,120
than what we had before or much better

01:30:23,920 --> 01:30:28,560
than i expected

01:30:25,120 --> 01:30:32,080
and now whenever i see a support channel

01:30:28,560 --> 01:30:35,360
right question i go and use the search

01:30:32,080 --> 01:30:37,760
and when i like receive a result i just

01:30:35,360 --> 01:30:38,639
maybe do a screenshot of my search box

01:30:37,760 --> 01:30:41,679
and the result

01:30:38,639 --> 01:30:43,120
and i answer not even with a link but

01:30:41,679 --> 01:30:46,639
with a search box

01:30:43,120 --> 01:30:48,960
screenshot kind of trying to teach

01:30:46,639 --> 01:30:50,880
the user you could find the answer to

01:30:48,960 --> 01:30:54,080
your question by searching

01:30:50,880 --> 01:30:54,639
and i hope you know that then the users

01:30:54,080 --> 01:30:57,840
can find

01:30:54,639 --> 01:31:00,639
all answers in the future perfect

01:30:57,840 --> 01:31:03,280
so you can find these slides online i

01:31:00,639 --> 01:31:05,600
have a blog post explaining how i set up

01:31:03,280 --> 01:31:07,040
with the search and the scraping for

01:31:05,600 --> 01:31:10,400
this simple website

01:31:07,040 --> 01:31:13,600
so you can do that um the comm

01:31:10,400 --> 01:31:16,320
documentation but you can you can see my

01:31:13,600 --> 01:31:18,159
kind of approach to cyprus in action

01:31:16,320 --> 01:31:20,880
yourself and kind of try it out

01:31:18,159 --> 01:31:21,199
and algolia has a lot of documentation

01:31:20,880 --> 01:31:24,480
and

01:31:21,199 --> 01:31:28,239
very good and maybe some somewhat

01:31:24,480 --> 01:31:31,840
even scary documentation search

01:31:28,239 --> 01:31:34,800
themselves so just check it out

01:31:31,840 --> 01:31:35,120
they explain everything very well again

01:31:34,800 --> 01:31:37,600
uh

01:31:35,120 --> 01:31:39,120
in london and great britain join

01:31:37,600 --> 01:31:41,360
rebellion global because

01:31:39,120 --> 01:31:42,719
that stuff is the most important thing

01:31:41,360 --> 01:31:45,679
right now and

01:31:42,719 --> 01:31:47,040
if you want to ask me a question or if

01:31:45,679 --> 01:31:49,360
you really set up a very good

01:31:47,040 --> 01:31:52,560
documentation site and you set up

01:31:49,360 --> 01:31:53,360
documentation scraping and you see the

01:31:52,560 --> 01:31:56,960
difference

01:31:53,360 --> 01:32:00,000
let me know like i'm looking for more

01:31:56,960 --> 01:32:01,760
i would say um

01:32:00,000 --> 01:32:03,520
i want to suffer from confirmation bias

01:32:01,760 --> 01:32:04,880
so if you're successful let me know if

01:32:03,520 --> 01:32:07,199
you're not

01:32:04,880 --> 01:32:09,600
don't let me know okay don't tell me so

01:32:07,199 --> 01:32:11,360
uh i'm on twitter at bachmata

01:32:09,600 --> 01:32:27,840
thank you very much i really appreciate

01:32:11,360 --> 01:32:27,840
the time thank you for joining

01:32:40,480 --> 01:32:43,600
all right glad thank you very much that

01:32:42,560 --> 01:32:47,040
was actually

01:32:43,600 --> 01:32:47,840
really amazing talk um we i think that

01:32:47,040 --> 01:32:50,239
all of us got

01:32:47,840 --> 01:32:51,760
a lot of insights into uh into search

01:32:50,239 --> 01:32:54,880
into documentation

01:32:51,760 --> 01:32:55,920
and um about the whole process that you

01:32:54,880 --> 01:32:58,639
mentioned

01:32:55,920 --> 01:32:59,840
uh so the first thing that i would

01:32:58,639 --> 01:33:02,880
probably want to address

01:32:59,840 --> 01:33:05,920
is uh your call out for uh

01:33:02,880 --> 01:33:09,280
like affecting the the climate change

01:33:05,920 --> 01:33:10,719
uh we actually

01:33:09,280 --> 01:33:12,880
we actually had a really interesting

01:33:10,719 --> 01:33:16,880
talk at ctgs uh conference

01:33:12,880 --> 01:33:20,480
um so we had natalia they talked about

01:33:16,880 --> 01:33:23,520
uh how we as developers actually

01:33:20,480 --> 01:33:26,320
uh do completely opposite of help

01:33:23,520 --> 01:33:28,560
how much how much service like produce

01:33:26,320 --> 01:33:28,560
uh

01:33:28,800 --> 01:33:33,440
like bad uh

01:33:33,679 --> 01:33:41,199
i'm missing the word yeah

01:33:37,520 --> 01:33:42,880
emissions uh and basically what she told

01:33:41,199 --> 01:33:45,360
us is that like every single

01:33:42,880 --> 01:33:46,239
one of us that has a website uh is

01:33:45,360 --> 01:33:50,080
basically

01:33:46,239 --> 01:33:50,480
uh helping those those emissions um like

01:33:50,080 --> 01:33:53,600
spread

01:33:50,480 --> 01:33:55,520
spread around and also uh

01:33:53,600 --> 01:33:57,679
by listening to spotify by watching to

01:33:55,520 --> 01:33:58,320
youtube watching netflix all of that is

01:33:57,679 --> 01:34:00,639
actually

01:33:58,320 --> 01:34:03,040
uh doing that so i think that what you

01:34:00,639 --> 01:34:05,120
said is a really really important thing

01:34:03,040 --> 01:34:06,639
and it's really to think of really

01:34:05,120 --> 01:34:07,840
important for us as the developers to

01:34:06,639 --> 01:34:10,320
think about like how

01:34:07,840 --> 01:34:12,239
can we like help help our planet so uh

01:34:10,320 --> 01:34:15,280
thank you very much for that

01:34:12,239 --> 01:34:20,239
um the first question that i had

01:34:15,280 --> 01:34:22,800
uh is what did you use before uh algolia

01:34:20,239 --> 01:34:24,320
so how how did your search work before

01:34:22,800 --> 01:34:26,320
that and like what was that

01:34:24,320 --> 01:34:27,920
why was that a problem like did it look

01:34:26,320 --> 01:34:28,719
simple in the beginning so you decided

01:34:27,920 --> 01:34:32,560
to

01:34:28,719 --> 01:34:35,280
use that and then it became harder

01:34:32,560 --> 01:34:35,920
uh it's an excellent question i forgot

01:34:35,280 --> 01:34:39,440
what we

01:34:35,920 --> 01:34:42,159
it was something like readme docs

01:34:39,440 --> 01:34:45,040
some other solution right um because our

01:34:42,159 --> 01:34:46,639
documentation is actually open source

01:34:45,040 --> 01:34:48,960
you can probably find what we used

01:34:46,639 --> 01:34:50,560
before right

01:34:48,960 --> 01:34:52,239
but i don't remember what we use

01:34:50,560 --> 01:34:54,320
unfortunately a coup

01:34:52,239 --> 01:34:55,280
probably two years ago we switched to

01:34:54,320 --> 01:34:57,280
algolia

01:34:55,280 --> 01:34:59,679
right because we actually had a lot more

01:34:57,280 --> 01:35:01,920
content you know like i write

01:34:59,679 --> 01:35:04,480
so many blog posts and so many examples

01:35:01,920 --> 01:35:06,719
and our whole team probably puts 25

01:35:04,480 --> 01:35:09,040
percent of our engineering time

01:35:06,719 --> 01:35:10,480
all of us into updating the mutation so

01:35:09,040 --> 01:35:12,320
for us the communication is like first

01:35:10,480 --> 01:35:15,600
class citizen and we want to

01:35:12,320 --> 01:35:17,520
to find it right and we looked around

01:35:15,600 --> 01:35:18,960
and alcott was definitely the best

01:35:17,520 --> 01:35:20,880
especially as we looked at our open

01:35:18,960 --> 01:35:23,040
source projects and at first we even

01:35:20,880 --> 01:35:26,239
started using algolia's

01:35:23,040 --> 01:35:28,480
um offering where it's like if you have

01:35:26,239 --> 01:35:30,080
open source website

01:35:28,480 --> 01:35:31,760
will scrape it for you you don't have to

01:35:30,080 --> 01:35:35,199
do anything just point your

01:35:31,760 --> 01:35:37,520
index at us right and you can

01:35:35,199 --> 01:35:39,600
make a pull request with your selector

01:35:37,520 --> 01:35:41,520
like your algolia config file

01:35:39,600 --> 01:35:42,719
if you don't like hours and update and

01:35:41,520 --> 01:35:44,800
we'll do the rest

01:35:42,719 --> 01:35:46,320
so we started doing that that and that

01:35:44,800 --> 01:35:49,600
was so much better

01:35:46,320 --> 01:35:51,600
and probably half a year ago we looked

01:35:49,600 --> 01:35:54,480
again at like all the queries that

01:35:51,600 --> 01:35:54,960
didn't have an answer and we looked

01:35:54,480 --> 01:35:58,080
again

01:35:54,960 --> 01:35:59,920
at how we scraping the selectors and we

01:35:58,080 --> 01:36:00,400
started scraping ourselves so that means

01:35:59,920 --> 01:36:03,199
we could

01:36:00,400 --> 01:36:04,480
control the config file a little bit

01:36:03,199 --> 01:36:06,960
better because we did

01:36:04,480 --> 01:36:08,480
now and we could scrape and try

01:36:06,960 --> 01:36:09,600
different selectors and then look at the

01:36:08,480 --> 01:36:11,760
index that it created

01:36:09,600 --> 01:36:12,719
and try it like from even algolia

01:36:11,760 --> 01:36:14,159
dashboard and like

01:36:12,719 --> 01:36:16,480
try different searches and see if we

01:36:14,159 --> 01:36:18,239
find what we expected to find

01:36:16,480 --> 01:36:19,520
so we tweaked the selectors we

01:36:18,239 --> 01:36:21,600
understood how things

01:36:19,520 --> 01:36:22,960
work right and that's why i'm doing this

01:36:21,600 --> 01:36:25,040
talk so you don't have to go for this

01:36:22,960 --> 01:36:26,719
process and we understood how for

01:36:25,040 --> 01:36:29,520
example to script multiple sources of

01:36:26,719 --> 01:36:31,679
information and given different priority

01:36:29,520 --> 01:36:32,800
and so after we we've gone through this

01:36:31,679 --> 01:36:35,360
work and it probably took

01:36:32,800 --> 01:36:36,000
one or two days to understand everything

01:36:35,360 --> 01:36:38,800
understand

01:36:36,000 --> 01:36:39,440
what we did wrong after that i think it

01:36:38,800 --> 01:36:41,840
it started

01:36:39,440 --> 01:36:44,000
working really really well right because

01:36:41,840 --> 01:36:46,000
we can find our information ourselves

01:36:44,000 --> 01:36:47,280
everything we expect to find comes as

01:36:46,000 --> 01:36:50,320
the first hit

01:36:47,280 --> 01:36:52,480
so um i don't remember what we used but

01:36:50,320 --> 01:36:55,199
we're so happy with alcohol

01:36:52,480 --> 01:36:56,000
nowadays yeah that's that's actually

01:36:55,199 --> 01:36:58,639
amazing

01:36:56,000 --> 01:36:59,679
so i don't know if you know the answer

01:36:58,639 --> 01:37:02,960
to this question

01:36:59,679 --> 01:37:06,080
because it's probably uh like

01:37:02,960 --> 01:37:08,400
more forwarded towards algolia team

01:37:06,080 --> 01:37:09,920
uh but like do you know who who is this

01:37:08,400 --> 01:37:12,400
who is algolia built for

01:37:09,920 --> 01:37:13,920
like is it built for uh like individuals

01:37:12,400 --> 01:37:15,119
like really big companies medium

01:37:13,920 --> 01:37:18,639
companies

01:37:15,119 --> 01:37:21,600
uh what what kind of people do you think

01:37:18,639 --> 01:37:22,639
should be using algolia so it's a very

01:37:21,600 --> 01:37:24,880
interesting question

01:37:22,639 --> 01:37:26,560
uh i if i understand correctly algolia

01:37:24,880 --> 01:37:29,679
tries to capture everything

01:37:26,560 --> 01:37:32,239
right and that like stuff by developers

01:37:29,679 --> 01:37:33,760
for developers but their documentation

01:37:32,239 --> 01:37:35,840
and their widgets

01:37:33,760 --> 01:37:37,600
are so nice that you can incorporate it

01:37:35,840 --> 01:37:39,920
if you're a developer yourself

01:37:37,600 --> 01:37:40,880
but i do believe that trying to kind of

01:37:39,920 --> 01:37:43,679
do bottoms

01:37:40,880 --> 01:37:45,199
up approach where developers tried they

01:37:43,679 --> 01:37:46,800
have a very generous free plan

01:37:45,199 --> 01:37:48,560
where you can try if you have your own

01:37:46,800 --> 01:37:51,360
blog or your own website

01:37:48,560 --> 01:37:53,040
you just add the index add the widget

01:37:51,360 --> 01:37:54,880
and then see how it works

01:37:53,040 --> 01:37:57,360
so i do believe they're trying to spread

01:37:54,880 --> 01:38:00,159
for developers who try it first

01:37:57,360 --> 01:38:00,560
and then scale up to the organization so

01:38:00,159 --> 01:38:03,440
we

01:38:00,560 --> 01:38:03,760
start paying for algolia as as a company

01:38:03,440 --> 01:38:06,800
for

01:38:03,760 --> 01:38:07,600
our documentation but now i'm looking

01:38:06,800 --> 01:38:09,840
back

01:38:07,600 --> 01:38:11,040
at my own projects let's say i have a

01:38:09,840 --> 01:38:13,520
github

01:38:11,040 --> 01:38:14,159
now i started for every project a large

01:38:13,520 --> 01:38:16,719
project

01:38:14,159 --> 01:38:19,040
creating a site as well you know with

01:38:16,719 --> 01:38:20,080
example so i convert like my readme file

01:38:19,040 --> 01:38:23,040
or like i build it

01:38:20,080 --> 01:38:24,639
into a static site and now i'm thinking

01:38:23,040 --> 01:38:27,440
every

01:38:24,639 --> 01:38:28,800
project of mine that has a github open

01:38:27,440 --> 01:38:32,000
source

01:38:28,800 --> 01:38:33,920
and creates a public site could actually

01:38:32,000 --> 01:38:36,800
use algolia search right there

01:38:33,920 --> 01:38:39,119
so it works very well for companies and

01:38:36,800 --> 01:38:41,440
for open source developers because

01:38:39,119 --> 01:38:42,560
then you can create examples inside your

01:38:41,440 --> 01:38:45,199
repository

01:38:42,560 --> 01:38:45,920
more me but then scrape all of them

01:38:45,199 --> 01:38:49,040
right

01:38:45,920 --> 01:38:50,320
and have answers right there and if you

01:38:49,040 --> 01:38:51,440
know anything about github their

01:38:50,320 --> 01:38:54,560
documentation or

01:38:51,440 --> 01:38:57,119
their code search is awful so

01:38:54,560 --> 01:38:59,040
by converting and exporting your readmes

01:38:57,119 --> 01:39:02,239
and maybe some of the examples

01:38:59,040 --> 01:39:04,400
into code blocks and letting alcohol

01:39:02,239 --> 01:39:06,000
index and search it you will actually

01:39:04,400 --> 01:39:08,320
get a lot better experience

01:39:06,000 --> 01:39:09,360
and just have a repository so i think

01:39:08,320 --> 01:39:13,840
we're trying to scale

01:39:09,360 --> 01:39:15,840
from developers to organizations

01:39:13,840 --> 01:39:16,960
yeah that's that's uh quite a good

01:39:15,840 --> 01:39:20,080
answer uh

01:39:16,960 --> 01:39:24,480
how would you rate uh algolia's

01:39:20,080 --> 01:39:26,719
documentation i would say it's

01:39:24,480 --> 01:39:27,679
nine out of ten and i'm only saying nine

01:39:26,719 --> 01:39:30,000
and not ten because

01:39:27,679 --> 01:39:31,920
it's a lot of documentation it could be

01:39:30,000 --> 01:39:35,199
overwhelming a little bit

01:39:31,920 --> 01:39:38,800
i feel like right yeah but again

01:39:35,199 --> 01:39:42,480
even the code uh like not code the text

01:39:38,800 --> 01:39:43,119
uh search widget right gives you so many

01:39:42,480 --> 01:39:45,119
hits for

01:39:43,119 --> 01:39:46,320
anything you type right you might be

01:39:45,119 --> 01:39:48,639
like oh

01:39:46,320 --> 01:39:49,440
i don't know if there is too much

01:39:48,639 --> 01:39:51,360
information

01:39:49,440 --> 01:39:53,199
right so i wish you only gave me free

01:39:51,360 --> 01:39:55,920
answers right but instead they give you

01:39:53,199 --> 01:39:58,400
like 10 hit results and then tabs so

01:39:55,920 --> 01:39:59,520
each of those tabs is another 10 answers

01:39:58,400 --> 01:40:01,600
and i was like

01:39:59,520 --> 01:40:02,639
there is a blog should i read this blog

01:40:01,600 --> 01:40:05,040
and then this

01:40:02,639 --> 01:40:05,760
like it's way too much but i understand

01:40:05,040 --> 01:40:07,679
okay

01:40:05,760 --> 01:40:10,639
actually documenting their features very

01:40:07,679 --> 01:40:14,400
well all right awesome thanks for that

01:40:10,639 --> 01:40:17,040
uh and i wanted to check with you uh

01:40:14,400 --> 01:40:18,560
about that uh like a hacky thing that

01:40:17,040 --> 01:40:19,119
you did is that a hacky thing like

01:40:18,560 --> 01:40:23,520
scanning

01:40:19,119 --> 01:40:25,920
uh scanning codes as part of comments

01:40:23,520 --> 01:40:26,960
so i don't think it's hacky right they

01:40:25,920 --> 01:40:30,480
algolia says

01:40:26,960 --> 01:40:33,600
you should not uh

01:40:30,480 --> 01:40:35,440
scrape your code blocks yeah right

01:40:33,600 --> 01:40:36,880
because it's not natural text right it's

01:40:35,440 --> 01:40:40,800
very structured

01:40:36,880 --> 01:40:44,239
but inside that uh computer

01:40:40,800 --> 01:40:46,239
language we'll say javascript you have

01:40:44,239 --> 01:40:48,080
you know human readable comments so i

01:40:46,239 --> 01:40:48,800
don't see anything wrong with just

01:40:48,080 --> 01:40:51,760
scraping

01:40:48,800 --> 01:40:53,440
those blocks so it's not something we

01:40:51,760 --> 01:40:54,239
you have to really hack all you do is

01:40:53,440 --> 01:40:56,159
just saying

01:40:54,239 --> 01:40:58,800
well if you're going to take the text of

01:40:56,159 --> 01:41:01,840
you know paragraph html elements

01:40:58,800 --> 01:41:04,880
also take the lines that are just called

01:41:01,840 --> 01:41:05,760
comments and scrape them makes sense to

01:41:04,880 --> 01:41:08,000
me

01:41:05,760 --> 01:41:10,239
otherwise you would have to put you

01:41:08,000 --> 01:41:11,360
would write the same comment above the

01:41:10,239 --> 01:41:14,159
code block saying

01:41:11,360 --> 01:41:14,800
oh this is an example of a you know

01:41:14,159 --> 01:41:17,840
tasks

01:41:14,800 --> 01:41:18,639
that or assertion that searches regular

01:41:17,840 --> 01:41:21,360
expression

01:41:18,639 --> 01:41:22,560
for example so it's the same information

01:41:21,360 --> 01:41:24,639
it's just now

01:41:22,560 --> 01:41:27,360
you don't have to manually move all

01:41:24,639 --> 01:41:28,159
those comments into the html page so to

01:41:27,360 --> 01:41:30,840
me it's not

01:41:28,159 --> 01:41:33,040
not a hack but i think it's actually

01:41:30,840 --> 01:41:36,159
nice yeah i think it was

01:41:33,040 --> 01:41:38,800
like quite quite a creative way way of

01:41:36,159 --> 01:41:41,440
using using their search

01:41:38,800 --> 01:41:43,360
um okay i think that that's it uh from

01:41:41,440 --> 01:41:46,719
my side if there's anything else

01:41:43,360 --> 01:41:50,159
you wanna say uh clev you can

01:41:46,719 --> 01:41:53,280
um craig had a question in

01:41:50,159 --> 01:41:56,239
on the panel and he asked if

01:41:53,280 --> 01:41:57,520
what are algolia's limitations so they

01:41:56,239 --> 01:41:59,360
they do have limits

01:41:57,520 --> 01:42:01,360
right so for a free plan for example

01:41:59,360 --> 01:42:03,600
like i said they don't show you

01:42:01,360 --> 01:42:05,440
the queries with no results but they do

01:42:03,600 --> 01:42:08,639
send you an email

01:42:05,440 --> 01:42:10,480
right um all their plans like free

01:42:08,639 --> 01:42:13,199
and then like paid plans they have

01:42:10,480 --> 01:42:14,960
limits on number of records

01:42:13,199 --> 01:42:17,040
and number of search operations per

01:42:14,960 --> 01:42:20,480
month but i think it's

01:42:17,040 --> 01:42:22,800
it's i i see why right

01:42:20,480 --> 01:42:24,480
um and i just want to finish with thank

01:42:22,800 --> 01:42:24,960
you so much milos for your questions

01:42:24,480 --> 01:42:28,000
thank you

01:42:24,960 --> 01:42:30,239
everyone and remember it's not just you

01:42:28,000 --> 01:42:32,080
who causing global warming it's it's not

01:42:30,239 --> 01:42:34,000
you if you had a choice

01:42:32,080 --> 01:42:35,119
you would always speak don't deserve a

01:42:34,000 --> 01:42:38,159
planet

01:42:35,119 --> 01:42:39,040
it's it's the whole system of fossil

01:42:38,159 --> 01:42:41,360
fuels

01:42:39,040 --> 01:42:42,400
and how you know our civilization is

01:42:41,360 --> 01:42:44,480
built right now

01:42:42,400 --> 01:42:47,440
but we can switch that don't take it

01:42:44,480 --> 01:42:50,080
personally but join an organization

01:42:47,440 --> 01:42:51,840
all right uh glad thank you very much uh

01:42:50,080 --> 01:42:55,679
thank you for your talk thank you

01:42:51,840 --> 01:42:56,960
uh like for your tips uh i'd like to say

01:42:55,679 --> 01:42:59,199
uh big thanks to

01:42:56,960 --> 01:43:00,960
uh craig and the team who also uh like

01:42:59,199 --> 01:43:03,840
spoke today at jazz monthly

01:43:00,960 --> 01:43:04,800
uh i'd like to uh say big thank you to

01:43:03,840 --> 01:43:07,520
uh

01:43:04,800 --> 01:43:09,520
alex from uh pusher that helped us

01:43:07,520 --> 01:43:11,840
record a record and might stream this

01:43:09,520 --> 01:43:14,880
whole event tonight

01:43:11,840 --> 01:43:16,320
once again uh we have uh half stack

01:43:14,880 --> 01:43:17,920
happening tomorrow so if you don't have

01:43:16,320 --> 01:43:21,119
a ticket make sure that

01:43:17,920 --> 01:43:23,440
you uh head off to halfstack.com

01:43:21,119 --> 01:43:24,960
and grab one for yourself it is an

01:43:23,440 --> 01:43:26,960
amazing conference

01:43:24,960 --> 01:43:28,800
uh and you're probably going to learn a

01:43:26,960 --> 01:43:31,840
lot a lot uh

01:43:28,800 --> 01:43:32,239
like by watching it uh and one last

01:43:31,840 --> 01:43:35,920
thing

01:43:32,239 --> 01:43:37,040
is that um jazz monthly is looking for

01:43:35,920 --> 01:43:39,199
volunteers

01:43:37,040 --> 01:43:40,960
so if you're interested in helping us

01:43:39,199 --> 01:43:44,239
out uh just drop us a message

01:43:40,960 --> 01:43:46,400
and uh like we are ready to talk to you

01:43:44,239 --> 01:43:48,480
to explain to you what do we want

01:43:46,400 --> 01:43:49,520
uh but just in case like we are going to

01:43:48,480 --> 01:43:52,639
send you

01:43:49,520 --> 01:43:54,960
uh a thank you email for listening to us

01:43:52,639 --> 01:43:56,239
and we're also going to drop in a pdf

01:43:54,960 --> 01:43:59,280
with all the details

01:43:56,239 --> 01:44:02,880
um about what we're looking from

01:43:59,280 --> 01:44:04,080
uh for other uh volunteers uh that's it

01:44:02,880 --> 01:44:07,840
thank you very much and

01:44:04,080 --> 01:44:07,840
enjoy bye

01:44:14,880 --> 01:44:35,840
[Music]

01:44:32,840 --> 01:44:35,840
so

01:44:48,360 --> 01:45:27,249
[Music]

01:45:28,840 --> 01:45:31,840
so

01:45:33,550 --> 01:46:09,270
[Music]

01:46:10,840 --> 01:47:32,840
um

01:46:13,710 --> 01:47:35,840
[Music]

01:47:32,840 --> 01:47:35,840

YouTube URL: https://www.youtube.com/watch?v=OArbAGhVIF4


