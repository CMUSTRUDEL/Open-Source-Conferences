Title: Secrets of a Testable UI Architecture | Lunchtime Sessions | JS Monthly - June 2020
Publication date: 2020-06-10
Playlist: JS Monthly London
Description: 
	This Lunchtime Session was organised by @JSMonthlyLondon and presented on YouTube by Pusher as part of a live-stream.

The Secrets of a Testable UI Architecture // Pete Heard
A Q&A will also be held afterwards

This talk is for UI engineers who feel like GIVING UP writing tests!

When we rely heavily on UI frameworks (React, Angular or Vue), integration tools like (Cypress or Protractor) and even browser intricacies (like HTML/DOM) to inform our test decisions; then eventually we grind to a halt because our tests become too complicated!

Instead of focusing on 'tools' in order to write tests we should instead focus on 'architecture'.

In this talk you will learn 3 secrets to creating a 'testable UI architecture'. The secrets will help you to scale your code and tests much easier. The concepts are taken from Logic Rooms breakthrough training course 'Ultra-fast Testing and TDD for JavaScript UI Engineers'.

Find out more about JS Monthly:
https://www.meetup.com/js-monthly

// *****************************
// Conferences
//******************************

Halfstack Online (22nd of May) https://halfstackconf.com/online/

HalfStack Online is a worldwide creative JS and web celebration and covid-19 fundraiser on the 22nd of May. Tickets are just $19. The event commences around mid-day in the UK and runs until very late. The format encourages everyone to drop in when convenient throughout the world. Join us for an amazing celebration and much needed day of creative inspiration.

CityJS Conference (14 Sep 2020) http://CityJSConf.org

Regent Street Cinema - Hurry up only a few tickets left!

11 international speakers and 3 workshops!

Covering all the cool subjects such as React, Vue, NodeJS, IoT, Testing, TypeScript.

// *****************************
// Follow us
//******************************

Follow us on twitter:
https://twitter.com/jsmonthlylondon

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,399 --> 00:00:06,399
so normally i like to uh start

00:00:03,199 --> 00:00:08,559
my talks with a little bit about why uh

00:00:06,399 --> 00:00:10,800
we're having this conversation today

00:00:08,559 --> 00:00:12,480
and this is the part where you can you

00:00:10,800 --> 00:00:14,000
can you can fully commit to the talk and

00:00:12,480 --> 00:00:15,759
you can make a decision if anything in

00:00:14,000 --> 00:00:19,279
this talk resonates with you

00:00:15,759 --> 00:00:22,160
and so this course is for ui engineers

00:00:19,279 --> 00:00:22,640
um or engineers in general that feel

00:00:22,160 --> 00:00:25,840
that

00:00:22,640 --> 00:00:27,279
testing uh takes maybe takes too long or

00:00:25,840 --> 00:00:30,080
that it's too hard

00:00:27,279 --> 00:00:32,719
or that they feel that they never hurt

00:00:30,080 --> 00:00:34,480
never know how to architect code to uh

00:00:32,719 --> 00:00:35,920
yeah essentially make it testable so

00:00:34,480 --> 00:00:38,000
it's really for people that

00:00:35,920 --> 00:00:39,440
you know you might have been doing

00:00:38,000 --> 00:00:40,879
development for two years you might have

00:00:39,440 --> 00:00:42,559
been doing it for 20 years

00:00:40,879 --> 00:00:44,960
and if you are still feeling that you

00:00:42,559 --> 00:00:46,719
haven't gained a big picture idea

00:00:44,960 --> 00:00:48,239
of how to test an app specifically a

00:00:46,719 --> 00:00:50,399
javascript ui app

00:00:48,239 --> 00:00:52,239
then uh this this is what this this talk

00:00:50,399 --> 00:00:54,719
will hopefully help you with today

00:00:52,239 --> 00:00:55,680
um so what we're going to be doing is

00:00:54,719 --> 00:00:57,600
we're going to

00:00:55,680 --> 00:00:59,920
we're going to try and understand what

00:00:57,600 --> 00:01:01,280
what stops you writing great tests in a

00:00:59,920 --> 00:01:03,760
javascript app

00:01:01,280 --> 00:01:05,360
this talk is is has got three parts to

00:01:03,760 --> 00:01:07,600
it and the first part

00:01:05,360 --> 00:01:09,600
is called the lean testing philosophy

00:01:07,600 --> 00:01:12,560
and what we'll be talking about there

00:01:09,600 --> 00:01:13,280
and is a mental model if you like on how

00:01:12,560 --> 00:01:15,600
to make good

00:01:13,280 --> 00:01:17,360
decisions with regards to your

00:01:15,600 --> 00:01:19,680
approaches to testing an app

00:01:17,360 --> 00:01:21,920
and then we're going to be looking at um

00:01:19,680 --> 00:01:24,960
the uh two two other topics which

00:01:21,920 --> 00:01:26,880
which fundamentally make up the um the

00:01:24,960 --> 00:01:29,280
thinking behind this course if you like

00:01:26,880 --> 00:01:30,880
and that is testing the hole and then

00:01:29,280 --> 00:01:32,400
something called the framework trap

00:01:30,880 --> 00:01:34,079
and testing the whole is about how we

00:01:32,400 --> 00:01:36,079
put together apps so

00:01:34,079 --> 00:01:37,439
they are more holistic and uh the

00:01:36,079 --> 00:01:40,640
framework trap

00:01:37,439 --> 00:01:43,680
is is probably the number one thing uh

00:01:40,640 --> 00:01:45,360
that you need to try and not get into

00:01:43,680 --> 00:01:46,799
and if you are in then hopefully get out

00:01:45,360 --> 00:01:48,399
and hopefully hopefully you'll learn a

00:01:46,799 --> 00:01:49,360
bit about getting out of the framework

00:01:48,399 --> 00:01:51,439
trap today

00:01:49,360 --> 00:01:53,280
at the end of this talk there is a

00:01:51,439 --> 00:01:55,439
follow-up option so i'm going to try and

00:01:53,280 --> 00:01:58,320
get done at well before one o'clock

00:01:55,439 --> 00:02:00,159
uh so we can we can have some uh we can

00:01:58,320 --> 00:02:01,920
have some questions and and whatnot at

00:02:00,159 --> 00:02:04,960
the end

00:02:01,920 --> 00:02:06,240
so before we go any further and just a

00:02:04,960 --> 00:02:09,039
little bit about myself

00:02:06,240 --> 00:02:09,759
and what my story is um so my name is

00:02:09,039 --> 00:02:12,720
pete

00:02:09,759 --> 00:02:13,040
and i'm the founder of logic room and uh

00:02:12,720 --> 00:02:16,319
we

00:02:13,040 --> 00:02:19,760
started two or three years ago we are

00:02:16,319 --> 00:02:21,280
a training and consulting company and

00:02:19,760 --> 00:02:23,840
in this picture here you can see some of

00:02:21,280 --> 00:02:26,080
the engineers that we we hired

00:02:23,840 --> 00:02:29,520
and what we've done over the last few

00:02:26,080 --> 00:02:32,720
years is we've been using a methodology

00:02:29,520 --> 00:02:36,160
to design software javascript apps for

00:02:32,720 --> 00:02:37,680
our customers and this methodology uh

00:02:36,160 --> 00:02:39,360
it's it's a part methodology part

00:02:37,680 --> 00:02:41,599
training course has been

00:02:39,360 --> 00:02:43,200
in development for the last six years

00:02:41,599 --> 00:02:46,000
and i started

00:02:43,200 --> 00:02:47,680
uh creating this this methodology and

00:02:46,000 --> 00:02:50,640
about six years ago

00:02:47,680 --> 00:02:51,519
i was working on the south coast i was a

00:02:50,640 --> 00:02:54,640
contractor

00:02:51,519 --> 00:02:57,760
and i started on a new project there and

00:02:54,640 --> 00:03:00,000
the manager who hired me uh said to me

00:02:57,760 --> 00:03:01,519
look you know we do tdd and we do bdd

00:03:00,000 --> 00:03:02,159
and you know he threw all the buzzwords

00:03:01,519 --> 00:03:03,840
at me

00:03:02,159 --> 00:03:05,440
and i thought you know fantastic this is

00:03:03,840 --> 00:03:08,640
this is what i want to be doing

00:03:05,440 --> 00:03:10,400
and i started uh i started there and

00:03:08,640 --> 00:03:11,840
uh on the first day one of the lead

00:03:10,400 --> 00:03:14,879
engineers said to me said

00:03:11,840 --> 00:03:17,200
um he said our tests uh they they run

00:03:14,879 --> 00:03:20,239
overnight i thought okay fine

00:03:17,200 --> 00:03:22,000
and he said that they take 12 hours and

00:03:20,239 --> 00:03:23,760
and that was i realized that was a

00:03:22,000 --> 00:03:25,920
really big problem i looked to my watch

00:03:23,760 --> 00:03:29,040
i realized this was a really big problem

00:03:25,920 --> 00:03:30,879
because the office only closed for 11

00:03:29,040 --> 00:03:33,280
which meant that when we got in in the

00:03:30,879 --> 00:03:33,599
morning the tests were still running if

00:03:33,280 --> 00:03:35,519
we

00:03:33,599 --> 00:03:38,000
if we'd kick them off the night before

00:03:35,519 --> 00:03:39,599
so i realized that what was happening

00:03:38,000 --> 00:03:41,360
is that they didn't have a very good way

00:03:39,599 --> 00:03:43,280
of testing their apps

00:03:41,360 --> 00:03:44,480
and so they were forced to do a lot of

00:03:43,280 --> 00:03:46,239
heavyweight

00:03:44,480 --> 00:03:48,080
integration testing and what they were

00:03:46,239 --> 00:03:50,159
calling bdd testing which

00:03:48,080 --> 00:03:51,760
wasn't actually bdd testing but what

00:03:50,159 --> 00:03:54,080
they'd done is they'd created this this

00:03:51,760 --> 00:03:56,000
very complicated architecture

00:03:54,080 --> 00:03:57,920
and therefore they had a very uh they

00:03:56,000 --> 00:04:01,360
were forced into a very complicated

00:03:57,920 --> 00:04:03,760
testing scenario and what that meant

00:04:01,360 --> 00:04:05,040
is that the code was ultimately fragile

00:04:03,760 --> 00:04:06,799
and so were the tests

00:04:05,040 --> 00:04:08,480
and for that reason we just couldn't

00:04:06,799 --> 00:04:09,840
iterate quickly

00:04:08,480 --> 00:04:12,080
which sort of defeated the whole

00:04:09,840 --> 00:04:12,799
objective of having tests in the first

00:04:12,080 --> 00:04:15,519
place

00:04:12,799 --> 00:04:16,959
so i set about designing uh this this

00:04:15,519 --> 00:04:20,400
this course to actually

00:04:16,959 --> 00:04:21,759
try and improve uh to try and find a way

00:04:20,400 --> 00:04:23,360
to create a course that could

00:04:21,759 --> 00:04:24,720
you know firstly help these engineers i

00:04:23,360 --> 00:04:25,840
was working with and then also help

00:04:24,720 --> 00:04:28,400
other engineers so

00:04:25,840 --> 00:04:29,520
this course uh it's battle tested uh the

00:04:28,400 --> 00:04:30,240
the things that we teach are battle

00:04:29,520 --> 00:04:32,400
tested

00:04:30,240 --> 00:04:34,080
and they work really well they've worked

00:04:32,400 --> 00:04:35,840
really well for us and our clients and

00:04:34,080 --> 00:04:39,680
uh you know they can work well for you

00:04:35,840 --> 00:04:42,160
uh as well and so it just

00:04:39,680 --> 00:04:43,759
before we sort of get in get into it and

00:04:42,160 --> 00:04:44,880
imposter syndrome i know it's something

00:04:43,759 --> 00:04:46,960
that is very common with

00:04:44,880 --> 00:04:48,400
with a lot of people and certainly

00:04:46,960 --> 00:04:50,560
something that i've i've you know

00:04:48,400 --> 00:04:52,560
had and you know what imposter syndrome

00:04:50,560 --> 00:04:54,240
says is you know i can't do xyz

00:04:52,560 --> 00:04:55,680
or you know i'll never figure out how to

00:04:54,240 --> 00:04:56,000
do xyz or i'm not good enough or

00:04:55,680 --> 00:04:57,840
anything

00:04:56,000 --> 00:04:59,440
like that and so you need to just get

00:04:57,840 --> 00:05:02,080
rid of those thoughts out of your head

00:04:59,440 --> 00:05:03,680
entirely because what you realize with

00:05:02,080 --> 00:05:05,120
imposter syndrome the same as for

00:05:03,680 --> 00:05:06,720
anything you learn in engineering or

00:05:05,120 --> 00:05:08,479
anything in life is that

00:05:06,720 --> 00:05:10,720
um you just have to have the right

00:05:08,479 --> 00:05:12,880
process okay so so you can if you are

00:05:10,720 --> 00:05:13,840
struggling to do testing or tdd or any

00:05:12,880 --> 00:05:15,440
of these stuff

00:05:13,840 --> 00:05:17,039
you just need the right process and

00:05:15,440 --> 00:05:20,960
hopefully you're going to get

00:05:17,039 --> 00:05:22,639
a little nugget of that process today so

00:05:20,960 --> 00:05:24,320
the first thing we're going to talk

00:05:22,639 --> 00:05:28,160
about is lean testing

00:05:24,320 --> 00:05:28,800
and in front of us uh we have a diagram

00:05:28,160 --> 00:05:31,280
here

00:05:28,800 --> 00:05:32,240
um it's it's this diagram was was

00:05:31,280 --> 00:05:35,680
created by

00:05:32,240 --> 00:05:38,720
a hungarian uh psychologist or

00:05:35,680 --> 00:05:41,039
or a philosopher um

00:05:38,720 --> 00:05:42,560
called me highly cheek sent me high now

00:05:41,039 --> 00:05:44,639
i won't put his name on the screen

00:05:42,560 --> 00:05:45,600
um because it's just it's just really

00:05:44,639 --> 00:05:47,840
really long

00:05:45,600 --> 00:05:48,880
and but i had to actually go and find

00:05:47,840 --> 00:05:51,520
out the phonetic

00:05:48,880 --> 00:05:52,560
pronunciation of it and but what uh what

00:05:51,520 --> 00:05:55,840
mihaili said

00:05:52,560 --> 00:05:57,600
was that um when we approach any task

00:05:55,840 --> 00:05:59,360
we can get into a state called flow and

00:05:57,600 --> 00:06:01,520
what's what flow means is that if you

00:05:59,360 --> 00:06:02,720
if you take challenge on the left-hand

00:06:01,520 --> 00:06:04,560
side of this graph and you take

00:06:02,720 --> 00:06:07,039
capabilities across the bottom

00:06:04,560 --> 00:06:09,199
and if the relative challenge if the

00:06:07,039 --> 00:06:10,880
challenge is relative to the capability

00:06:09,199 --> 00:06:12,560
or rather if if the challenge is too

00:06:10,880 --> 00:06:14,800
high compared to the capability

00:06:12,560 --> 00:06:16,880
it gives us anxiety when we do the task

00:06:14,800 --> 00:06:18,400
if our capabilities get too strong

00:06:16,880 --> 00:06:20,880
compared to the challenge

00:06:18,400 --> 00:06:23,280
then we get boredom right but if we have

00:06:20,880 --> 00:06:25,199
a matching overtime between challenging

00:06:23,280 --> 00:06:26,880
capabilities we end up in this bit in

00:06:25,199 --> 00:06:28,960
the middle and this is called in flow

00:06:26,880 --> 00:06:30,160
and the state of flow is recognizable

00:06:28,960 --> 00:06:32,319
because you are happy

00:06:30,160 --> 00:06:33,199
you have low anxiety and you're

00:06:32,319 --> 00:06:36,000
productive

00:06:33,199 --> 00:06:38,240
and generally um i would say that this

00:06:36,000 --> 00:06:39,680
is where a professional should aim to be

00:06:38,240 --> 00:06:41,120
especially an engineer because if

00:06:39,680 --> 00:06:41,680
they're in that state of flow that means

00:06:41,120 --> 00:06:43,680
that they're

00:06:41,680 --> 00:06:44,960
progressively moving on in their

00:06:43,680 --> 00:06:47,680
capabilities

00:06:44,960 --> 00:06:48,080
with regards to constructing code and

00:06:47,680 --> 00:06:50,639
over

00:06:48,080 --> 00:06:51,120
time they can you know the capabilities

00:06:50,639 --> 00:06:52,400
are

00:06:51,120 --> 00:06:55,039
matching the challenge and what this

00:06:52,400 --> 00:06:56,160
means is this means that as you grow a

00:06:55,039 --> 00:06:58,160
code base

00:06:56,160 --> 00:07:00,400
you your code should not become too

00:06:58,160 --> 00:07:02,479
bloated and too badly architected

00:07:00,400 --> 00:07:03,599
and over time you can still scale that

00:07:02,479 --> 00:07:05,759
code base right

00:07:03,599 --> 00:07:07,919
um so how does this what does this mean

00:07:05,759 --> 00:07:10,319
for testing what this means is that

00:07:07,919 --> 00:07:10,960
if we if we slowly grow a code base and

00:07:10,319 --> 00:07:12,880
we have

00:07:10,960 --> 00:07:15,919
uh over time the code you know stays

00:07:12,880 --> 00:07:16,800
scalable and it stays you know

00:07:15,919 --> 00:07:18,960
everything is

00:07:16,800 --> 00:07:20,479
is is good in that code base this is

00:07:18,960 --> 00:07:22,240
what good testing looks like and good

00:07:20,479 --> 00:07:22,639
testing takes us down the flow channel

00:07:22,240 --> 00:07:24,080
right

00:07:22,639 --> 00:07:25,199
it takes us individually flow down the

00:07:24,080 --> 00:07:25,759
flow channel and it takes in our

00:07:25,199 --> 00:07:28,639
colleagues and

00:07:25,759 --> 00:07:32,479
as a team should be able to continuously

00:07:28,639 --> 00:07:32,479
test that code base to any size

00:07:33,440 --> 00:07:37,440
of the team right and you do that by

00:07:35,360 --> 00:07:39,520
having a good testable architecture

00:07:37,440 --> 00:07:41,199
but you see bad testing obviously will

00:07:39,520 --> 00:07:41,919
you know the challenge becomes too great

00:07:41,199 --> 00:07:44,240
quickly

00:07:41,919 --> 00:07:45,599
and compared to the capabilities and you

00:07:44,240 --> 00:07:47,520
know we i'm sure we've

00:07:45,599 --> 00:07:49,360
i'm sure we've all had been down this

00:07:47,520 --> 00:07:50,639
one and this is the six month point this

00:07:49,360 --> 00:07:52,400
is where we start an app

00:07:50,639 --> 00:07:54,400
and then six months down the line it

00:07:52,400 --> 00:07:57,199
just becomes too hard to test so we

00:07:54,400 --> 00:07:59,599
give up right and so we don't want that

00:07:57,199 --> 00:08:00,319
and we want to stay in in this middle

00:07:59,599 --> 00:08:02,879
zone and

00:08:00,319 --> 00:08:03,599
creating a good ui architecture is is

00:08:02,879 --> 00:08:06,080
how we do it

00:08:03,599 --> 00:08:07,680
so you might have seen this before this

00:08:06,080 --> 00:08:08,720
is called the testing triangle and what

00:08:07,680 --> 00:08:12,000
the testing triangle

00:08:08,720 --> 00:08:13,759
says is that um if we imagine

00:08:12,000 --> 00:08:15,360
all of the testing within our app at the

00:08:13,759 --> 00:08:17,360
bottom we have unit testing

00:08:15,360 --> 00:08:19,360
and the unit testing is the simplest

00:08:17,360 --> 00:08:22,000
type of test that we can have

00:08:19,360 --> 00:08:23,440
and um what what happens with unit

00:08:22,000 --> 00:08:24,639
testing is that we have lots of them so

00:08:23,440 --> 00:08:25,440
that's why it's at the bottom of the

00:08:24,639 --> 00:08:27,919
triangle

00:08:25,440 --> 00:08:28,560
and it's a it's a fat triangle then we

00:08:27,919 --> 00:08:31,360
have

00:08:28,560 --> 00:08:32,320
integration testing and the integration

00:08:31,360 --> 00:08:34,399
testing

00:08:32,320 --> 00:08:36,000
is is the next part which you know wires

00:08:34,399 --> 00:08:38,240
together various different parts and we

00:08:36,000 --> 00:08:38,880
go all the way up to end to end testing

00:08:38,240 --> 00:08:42,240
right

00:08:38,880 --> 00:08:44,080
and this uh this testing triangle is is

00:08:42,240 --> 00:08:45,760
a very common way of you know

00:08:44,080 --> 00:08:47,279
understanding how many tests roughly

00:08:45,760 --> 00:08:49,040
it's a mental model for how many tests

00:08:47,279 --> 00:08:52,800
we should have in a code base

00:08:49,040 --> 00:08:55,279
and but if we actually think about

00:08:52,800 --> 00:08:56,480
it really what we should do in anything

00:08:55,279 --> 00:08:58,000
in software development

00:08:56,480 --> 00:08:59,519
is we should realize there's no such

00:08:58,000 --> 00:09:02,000
thing as best practice

00:08:59,519 --> 00:09:02,880
that we might see here right it really

00:09:02,000 --> 00:09:05,440
everything is just

00:09:02,880 --> 00:09:06,640
a payoff uh compared to the difficulty

00:09:05,440 --> 00:09:07,440
of the thing right so we're going to get

00:09:06,640 --> 00:09:08,959
some payoff

00:09:07,440 --> 00:09:10,320
but some things might be too difficult

00:09:08,959 --> 00:09:12,000
compared to what we're going to get from

00:09:10,320 --> 00:09:12,720
them so in other words we have to create

00:09:12,000 --> 00:09:15,040
balance

00:09:12,720 --> 00:09:16,720
in the the conceptual models that we

00:09:15,040 --> 00:09:18,720
bring to building software

00:09:16,720 --> 00:09:21,279
and in front of us is another way a bit

00:09:18,720 --> 00:09:23,120
like a high leads diagram of putting

00:09:21,279 --> 00:09:24,959
payoff against difficulty

00:09:23,120 --> 00:09:26,399
what it says is that at the bottom you

00:09:24,959 --> 00:09:28,560
have a unit test

00:09:26,399 --> 00:09:30,720
and that is you know the minimal payoff

00:09:28,560 --> 00:09:32,800
with the least difficulty because a unit

00:09:30,720 --> 00:09:34,240
really just tests a little function or a

00:09:32,800 --> 00:09:36,720
little bit of code it doesn't really do

00:09:34,240 --> 00:09:37,920
a lot right so you don't get much payoff

00:09:36,720 --> 00:09:39,680
and they're difficult but it's really

00:09:37,920 --> 00:09:40,720
easy so yeah you can you can do loads of

00:09:39,680 --> 00:09:43,440
them and then right at the end you've

00:09:40,720 --> 00:09:45,600
got e2e now e2e testing and you know

00:09:43,440 --> 00:09:46,640
browser testing and all this stuff it's

00:09:45,600 --> 00:09:48,000
really difficult

00:09:46,640 --> 00:09:49,680
it's really difficult because it's

00:09:48,000 --> 00:09:51,600
complex because you have to dig around

00:09:49,680 --> 00:09:53,040
in html you have to run complicated

00:09:51,600 --> 00:09:54,320
tools you have to make sure it's set up

00:09:53,040 --> 00:09:57,040
on the ci server

00:09:54,320 --> 00:09:57,600
et cetera et cetera right but but but

00:09:57,040 --> 00:10:00,640
the

00:09:57,600 --> 00:10:02,240
payoff over time will go up and up

00:10:00,640 --> 00:10:04,560
and comparatively compared to the

00:10:02,240 --> 00:10:06,240
difficulty you actually see a big

00:10:04,560 --> 00:10:08,320
drop-off right you're going to see that

00:10:06,240 --> 00:10:10,800
the payoff becomes less and less

00:10:08,320 --> 00:10:12,079
because of that difficulty right so

00:10:10,800 --> 00:10:14,560
really what we want

00:10:12,079 --> 00:10:15,760
is we want to find the sweet spot and

00:10:14,560 --> 00:10:18,640
the sweet spot

00:10:15,760 --> 00:10:19,040
is is is our testable ui architecture

00:10:18,640 --> 00:10:21,040
right

00:10:19,040 --> 00:10:22,240
if we create a testable architecture

00:10:21,040 --> 00:10:24,240
we're going to be able to

00:10:22,240 --> 00:10:25,920
to test it more with unit tests that

00:10:24,240 --> 00:10:28,800
test larger parts

00:10:25,920 --> 00:10:30,720
of the app so what we we say is that

00:10:28,800 --> 00:10:33,040
instead of just looking at it

00:10:30,720 --> 00:10:34,160
as a triangle what we can do is we can

00:10:33,040 --> 00:10:35,839
optimize

00:10:34,160 --> 00:10:37,920
and instead what we can do is we can

00:10:35,839 --> 00:10:40,720
focus on creating a good architecture so

00:10:37,920 --> 00:10:41,200
so when we focus on the testing what we

00:10:40,720 --> 00:10:43,279
get

00:10:41,200 --> 00:10:45,040
is we just get tests lots and lots of

00:10:43,279 --> 00:10:46,560
tests and lots and lots of tools and

00:10:45,040 --> 00:10:49,120
lots and lots of people with their own

00:10:46,560 --> 00:10:50,160
you know preference and what they do

00:10:49,120 --> 00:10:51,360
but actually if we shift the

00:10:50,160 --> 00:10:52,720
conversation away from that just say

00:10:51,360 --> 00:10:53,680
let's make a really testable ui

00:10:52,720 --> 00:10:55,519
architecture

00:10:53,680 --> 00:10:57,839
what we can then do is we can start to

00:10:55,519 --> 00:10:59,760
use a simple unit testing framework

00:10:57,839 --> 00:11:01,680
but we can start to run those unit tests

00:10:59,760 --> 00:11:02,480
likes mini specifications that are

00:11:01,680 --> 00:11:06,079
actually going to

00:11:02,480 --> 00:11:09,040
um invoke the entire application right

00:11:06,079 --> 00:11:09,360
so that's the the foundational theory to

00:11:09,040 --> 00:11:10,880
this

00:11:09,360 --> 00:11:12,720
to this this particular talk that we're

00:11:10,880 --> 00:11:13,920
doing so we so next

00:11:12,720 --> 00:11:16,000
the next two things that we're going to

00:11:13,920 --> 00:11:17,680
focus on um is is

00:11:16,000 --> 00:11:19,839
is testing the hole and then we're going

00:11:17,680 --> 00:11:20,800
to look at the the the dangers of being

00:11:19,839 --> 00:11:24,000
in the framework

00:11:20,800 --> 00:11:27,200
trap so um

00:11:24,000 --> 00:11:29,519
in front of us uh we have this is a

00:11:27,200 --> 00:11:31,120
estate machine and what the state's

00:11:29,519 --> 00:11:32,800
machine says is that everything can

00:11:31,120 --> 00:11:34,320
start in some sort of state

00:11:32,800 --> 00:11:36,079
then there's a process and then you have

00:11:34,320 --> 00:11:39,360
some sort of end state

00:11:36,079 --> 00:11:40,480
afterwards and what the uh the state

00:11:39,360 --> 00:11:43,040
machine can do is

00:11:40,480 --> 00:11:44,240
this will typically describe what

00:11:43,040 --> 00:11:45,839
happened in a piece of software

00:11:44,240 --> 00:11:47,839
as engineers we are paid to make

00:11:45,839 --> 00:11:49,200
predictable software uh the customer

00:11:47,839 --> 00:11:50,880
wants a or

00:11:49,200 --> 00:11:52,399
our boss or whoever wants a button when

00:11:50,880 --> 00:11:53,120
you click it something will happen we

00:11:52,399 --> 00:11:56,320
want it to be

00:11:53,120 --> 00:11:57,120
predictable for the 99.9 percent of

00:11:56,320 --> 00:11:59,519
cases

00:11:57,120 --> 00:12:00,160
and what we can say is that the state

00:11:59,519 --> 00:12:01,600
theory

00:12:00,160 --> 00:12:03,440
should be doing should just be taking

00:12:01,600 --> 00:12:06,320
our app through one state

00:12:03,440 --> 00:12:06,720
now that one state is is contextual

00:12:06,320 --> 00:12:08,720
because

00:12:06,720 --> 00:12:10,000
that one state may have many sub-states

00:12:08,720 --> 00:12:12,320
that make up that state

00:12:10,000 --> 00:12:14,240
right and so we may in this example

00:12:12,320 --> 00:12:14,880
we've taken a car which is idle and then

00:12:14,240 --> 00:12:16,560
accelerates

00:12:14,880 --> 00:12:18,079
60 miles an hour and we've said well

00:12:16,560 --> 00:12:19,200
actually within that there's there's

00:12:18,079 --> 00:12:21,040
there's a few different

00:12:19,200 --> 00:12:22,240
states that are important such as

00:12:21,040 --> 00:12:26,000
starting the engine

00:12:22,240 --> 00:12:29,680
engaging the clutch rotating the wheels

00:12:26,000 --> 00:12:32,160
now um when

00:12:29,680 --> 00:12:34,160
normally what happens with uh you know

00:12:32,160 --> 00:12:36,160
take taking in mind this this this

00:12:34,160 --> 00:12:37,519
state-based approach to to testing which

00:12:36,160 --> 00:12:40,079
is the right way to do it

00:12:37,519 --> 00:12:41,920
normally what happens is that the

00:12:40,079 --> 00:12:42,480
frameworks that we typically go to right

00:12:41,920 --> 00:12:44,079
react

00:12:42,480 --> 00:12:45,360
angular view doesn't really matter

00:12:44,079 --> 00:12:46,480
they're all pretty much the same even

00:12:45,360 --> 00:12:49,519
even the second generation

00:12:46,480 --> 00:12:52,160
such as such as backbone and whatnot and

00:12:49,519 --> 00:12:53,360
so all of these these frameworks give us

00:12:52,160 --> 00:12:56,480
tools with which to

00:12:53,360 --> 00:12:59,200
to test our app and they make uh

00:12:56,480 --> 00:13:00,720
they suggest and maybe even promote

00:12:59,200 --> 00:13:01,760
depending on how much you read into the

00:13:00,720 --> 00:13:04,480
documentation

00:13:01,760 --> 00:13:06,480
this concept of mocking and isolationism

00:13:04,480 --> 00:13:06,800
and what this says and i've taken these

00:13:06,480 --> 00:13:09,360
from

00:13:06,800 --> 00:13:11,040
from the respective websites if we just

00:13:09,360 --> 00:13:13,120
have a look at this react example just

00:13:11,040 --> 00:13:15,200
here what this is saying is that

00:13:13,120 --> 00:13:16,240
they have this this test and what's

00:13:15,200 --> 00:13:17,519
happening here is they want to test

00:13:16,240 --> 00:13:17,920
something in contact so what they do is

00:13:17,519 --> 00:13:20,240
they

00:13:17,920 --> 00:13:21,200
mock out the map module or object or

00:13:20,240 --> 00:13:23,440
whatever

00:13:21,200 --> 00:13:25,040
and what what happens is that then they

00:13:23,440 --> 00:13:26,880
you know they can they can then assert

00:13:25,040 --> 00:13:28,320
the state of contact right so they can

00:13:26,880 --> 00:13:29,519
start the contact and they can

00:13:28,320 --> 00:13:30,320
do something and then load the map and

00:13:29,519 --> 00:13:31,839
then they can say you know is the

00:13:30,320 --> 00:13:33,200
contact done something right

00:13:31,839 --> 00:13:34,880
that would be the react world in the

00:13:33,200 --> 00:13:35,920
angular world we have this concept of

00:13:34,880 --> 00:13:37,279
testing modules

00:13:35,920 --> 00:13:38,560
and they've done something similar but

00:13:37,279 --> 00:13:39,600
the difference with angular angular

00:13:38,560 --> 00:13:42,079
comes loaded with

00:13:39,600 --> 00:13:42,880
extra tools um that are actually quite

00:13:42,079 --> 00:13:45,040
powerful

00:13:42,880 --> 00:13:47,120
um but what this does is shifts the

00:13:45,040 --> 00:13:48,959
conversation to inversion of control

00:13:47,120 --> 00:13:50,000
and what this does is this gives you an

00:13:48,959 --> 00:13:50,959
it this gives you something called a

00:13:50,000 --> 00:13:52,800
container

00:13:50,959 --> 00:13:54,880
where you can start to it's it's a

00:13:52,800 --> 00:13:58,079
different way of of of of

00:13:54,880 --> 00:14:01,040
bringing out mocks and hiding things now

00:13:58,079 --> 00:14:02,560
these are really really great tools but

00:14:01,040 --> 00:14:04,880
um if

00:14:02,560 --> 00:14:06,639
someone doesn't really focus on a

00:14:04,880 --> 00:14:10,000
testable ui architecture

00:14:06,639 --> 00:14:10,560
they can often uh become well they can

00:14:10,000 --> 00:14:13,120
often

00:14:10,560 --> 00:14:14,079
become a bad thing long term put it that

00:14:13,120 --> 00:14:16,639
way and

00:14:14,079 --> 00:14:18,399
and and here's why and what they will

00:14:16,639 --> 00:14:20,079
often do is they will force us to break

00:14:18,399 --> 00:14:22,480
our application down into

00:14:20,079 --> 00:14:24,079
lots of mini state machines okay so they

00:14:22,480 --> 00:14:25,199
will say you know hey i want to test the

00:14:24,079 --> 00:14:26,800
contact well i'll just

00:14:25,199 --> 00:14:28,000
do that as its own state machine and it

00:14:26,800 --> 00:14:29,120
doesn't really matter about its

00:14:28,000 --> 00:14:30,800
interaction with the map

00:14:29,120 --> 00:14:32,639
what i'll do is i'll just i'll just mock

00:14:30,800 --> 00:14:33,360
out the map and i'll run the contact in

00:14:32,639 --> 00:14:34,639
isolation

00:14:33,360 --> 00:14:36,320
and with the angular one you know we've

00:14:34,639 --> 00:14:37,279
got this this master service and test

00:14:36,320 --> 00:14:38,720
service and i'll

00:14:37,279 --> 00:14:40,720
mock out the test service and i'll just

00:14:38,720 --> 00:14:41,199
run the master service so what we get is

00:14:40,720 --> 00:14:43,839
we get

00:14:41,199 --> 00:14:45,519
you know the ui frame x almost suggests

00:14:43,839 --> 00:14:47,680
lots of different state machines

00:14:45,519 --> 00:14:49,360
all running with things isolated and

00:14:47,680 --> 00:14:50,800
what what can happen is that we can run

00:14:49,360 --> 00:14:53,680
all of our tests

00:14:50,800 --> 00:14:54,399
and although all the tests pass we've

00:14:53,680 --> 00:14:55,920
actually made

00:14:54,399 --> 00:14:58,079
incorrect assumptions between the

00:14:55,920 --> 00:14:59,120
interaction between the pieces right and

00:14:58,079 --> 00:15:00,959
what happens

00:14:59,120 --> 00:15:02,639
is that we get something called a false

00:15:00,959 --> 00:15:04,399
positive so we run all our tests but

00:15:02,639 --> 00:15:06,480
we're actually not

00:15:04,399 --> 00:15:07,839
actually testing the interaction uh

00:15:06,480 --> 00:15:11,279
between the two

00:15:07,839 --> 00:15:13,839
right and this means when when this

00:15:11,279 --> 00:15:16,959
happens what this means is that we are

00:15:13,839 --> 00:15:20,240
forced to have to move our tests

00:15:16,959 --> 00:15:22,480
up that testing triangle into the

00:15:20,240 --> 00:15:23,680
uh the integration tests or the end to

00:15:22,480 --> 00:15:27,279
end tests right

00:15:23,680 --> 00:15:28,959
and those things are complex so what we

00:15:27,279 --> 00:15:31,600
need to do is we need to

00:15:28,959 --> 00:15:32,399
focus on building our app if we want to

00:15:31,600 --> 00:15:35,759
test the whole

00:15:32,399 --> 00:15:38,560
we need to focus on shielding

00:15:35,759 --> 00:15:39,680
and our architecture our testable

00:15:38,560 --> 00:15:42,959
architecture

00:15:39,680 --> 00:15:44,560
from the component from the component

00:15:42,959 --> 00:15:46,959
by component what i mean is from the

00:15:44,560 --> 00:15:48,079
framework component right be it react

00:15:46,959 --> 00:15:49,839
angular or view

00:15:48,079 --> 00:15:51,600
right so let's just go through it so if

00:15:49,839 --> 00:15:52,959
we want to avoid this situation of

00:15:51,600 --> 00:15:54,480
isolationism where we

00:15:52,959 --> 00:15:56,160
think everything's working but it's not

00:15:54,480 --> 00:15:58,480
and we want to avoid the brittleness of

00:15:56,160 --> 00:16:01,519
being forced to use integration testing

00:15:58,480 --> 00:16:03,360
to test this system as a whole test

00:16:01,519 --> 00:16:05,279
then what we have to do is we have to

00:16:03,360 --> 00:16:07,120
start to think about rules and one of

00:16:05,279 --> 00:16:08,480
the rules that we teach is the rule of

00:16:07,120 --> 00:16:10,399
the black box

00:16:08,480 --> 00:16:11,600
and the black box says we're going to

00:16:10,399 --> 00:16:14,160
create a testable

00:16:11,600 --> 00:16:15,600
ui architecture and we're going to keep

00:16:14,160 --> 00:16:19,519
the component

00:16:15,600 --> 00:16:23,839
outside of this particular architecture

00:16:19,519 --> 00:16:26,959
okay so this moves us into

00:16:23,839 --> 00:16:30,240
something called um the uh the framework

00:16:26,959 --> 00:16:31,040
trap right so this builds uh this builds

00:16:30,240 --> 00:16:33,680
on top

00:16:31,040 --> 00:16:35,360
of uh testing as a whole so we we'd say

00:16:33,680 --> 00:16:37,759
we do want to test as a whole it's

00:16:35,360 --> 00:16:39,759
important so we want to avoid mocking

00:16:37,759 --> 00:16:41,759
but we need we and to do that we we

00:16:39,759 --> 00:16:43,360
understand that we create this black box

00:16:41,759 --> 00:16:45,920
but when we create the black box what we

00:16:43,360 --> 00:16:47,600
have to do is we have to realize that we

00:16:45,920 --> 00:16:49,600
also although we want to test the hole

00:16:47,600 --> 00:16:50,480
we also want to actually remove the

00:16:49,600 --> 00:16:52,720
framework

00:16:50,480 --> 00:16:53,759
from what we're testing right and this

00:16:52,720 --> 00:16:57,120
is why and

00:16:53,759 --> 00:16:58,800
normally what happens is um you know if

00:16:57,120 --> 00:16:59,360
we even if we were to follow the test

00:16:58,800 --> 00:17:01,360
the whole

00:16:59,360 --> 00:17:03,040
we normally what we get without

00:17:01,360 --> 00:17:05,360
structure we get chaos

00:17:03,040 --> 00:17:06,319
and what happens is that we we get a

00:17:05,360 --> 00:17:07,919
code base

00:17:06,319 --> 00:17:09,199
with you know lots of different types of

00:17:07,919 --> 00:17:10,799
tests lots of different types of

00:17:09,199 --> 00:17:12,319
component and lots of our own code

00:17:10,799 --> 00:17:14,400
now most people know that they would

00:17:12,319 --> 00:17:15,120
want to keep keep data transfer code

00:17:14,400 --> 00:17:17,120
away from

00:17:15,120 --> 00:17:18,480
uh you know away from components and and

00:17:17,120 --> 00:17:20,640
stuff like that um

00:17:18,480 --> 00:17:23,360
but i don't think most people are

00:17:20,640 --> 00:17:25,360
necessarily um as rigid as they could be

00:17:23,360 --> 00:17:27,199
and the reason for that is is because

00:17:25,360 --> 00:17:30,160
frameworks move so fast

00:17:27,199 --> 00:17:31,120
that nobody really spends the time to

00:17:30,160 --> 00:17:32,559
learn

00:17:31,120 --> 00:17:33,919
how do i shield myself from these

00:17:32,559 --> 00:17:35,200
frameworks how do i get underneath and

00:17:33,919 --> 00:17:37,360
actually architect

00:17:35,200 --> 00:17:39,200
a software so the framework is not in

00:17:37,360 --> 00:17:41,200
control and what we get is we get this

00:17:39,200 --> 00:17:42,960
most code bases and i'm sure you've seen

00:17:41,200 --> 00:17:45,200
this most code bases end of this big

00:17:42,960 --> 00:17:47,039
mishmash of tests and code and

00:17:45,200 --> 00:17:48,000
components and they will also get thrown

00:17:47,039 --> 00:17:50,799
in together

00:17:48,000 --> 00:17:51,679
and this is you know this is normally

00:17:50,799 --> 00:17:54,000
what happens

00:17:51,679 --> 00:17:55,360
and this is this creates a problem and

00:17:54,000 --> 00:17:57,280
we're just going to look at a couple of

00:17:55,360 --> 00:17:58,960
the framework example problems right

00:17:57,280 --> 00:18:00,320
so here's a react component right this

00:17:58,960 --> 00:18:01,919
is the first example of where the

00:18:00,320 --> 00:18:05,039
framework starts to get in the way of

00:18:01,919 --> 00:18:07,280
of testing and this is just a normal uh

00:18:05,039 --> 00:18:08,559
react component and what's happening

00:18:07,280 --> 00:18:11,200
here is we've got

00:18:08,559 --> 00:18:13,120
and we've got the props dot start and

00:18:11,200 --> 00:18:15,200
props dot end is passed in so it's so

00:18:13,120 --> 00:18:17,120
it's every stuff is passed in here

00:18:15,200 --> 00:18:19,120
and what happens is this creates a

00:18:17,120 --> 00:18:20,799
closure okay and all the closure means

00:18:19,120 --> 00:18:22,400
is that we have an open

00:18:20,799 --> 00:18:24,559
curly bracket there and a closed curly

00:18:22,400 --> 00:18:26,080
bracket there and

00:18:24,559 --> 00:18:28,080
what's happening is that it's it's

00:18:26,080 --> 00:18:30,960
adding together the start and end

00:18:28,080 --> 00:18:31,760
and it's it's summing it up in the total

00:18:30,960 --> 00:18:34,320
there right

00:18:31,760 --> 00:18:35,600
and it's it's writing it out now and if

00:18:34,320 --> 00:18:37,919
i want to test that

00:18:35,600 --> 00:18:39,120
that's really hard because the only way

00:18:37,919 --> 00:18:42,400
i can test that

00:18:39,120 --> 00:18:43,039
is to actually read the return of that

00:18:42,400 --> 00:18:44,559
statement

00:18:43,039 --> 00:18:46,240
so i'm going to have to start digging

00:18:44,559 --> 00:18:47,600
around in that entire string all that

00:18:46,240 --> 00:18:49,360
html wherever it's returned

00:18:47,600 --> 00:18:51,520
you see this is a closure so nothing can

00:18:49,360 --> 00:18:53,039
access it yeah just pure function

00:18:51,520 --> 00:18:54,480
but of course it's returning something

00:18:53,039 --> 00:18:55,679
so i'm going to have to the only thing

00:18:54,480 --> 00:18:58,000
i've got access to is

00:18:55,679 --> 00:18:59,280
is is that you know that that html block

00:18:58,000 --> 00:19:01,760
there and so

00:18:59,280 --> 00:19:03,760
this this is really really hard to test

00:19:01,760 --> 00:19:05,200
code like this right we really want to

00:19:03,760 --> 00:19:06,480
create something in you know and that's

00:19:05,200 --> 00:19:08,080
because of the framework the framework

00:19:06,480 --> 00:19:08,799
dictates the framework reads that

00:19:08,080 --> 00:19:10,640
structure

00:19:08,799 --> 00:19:11,840
react knows that structure and wants it

00:19:10,640 --> 00:19:13,200
to be in that structure it's

00:19:11,840 --> 00:19:15,120
you know this it creates purely

00:19:13,200 --> 00:19:16,960
functional components right so we the

00:19:15,120 --> 00:19:18,960
reactor has taken the option away from

00:19:16,960 --> 00:19:22,240
us to read what the total of that is

00:19:18,960 --> 00:19:24,880
um so the other example

00:19:22,240 --> 00:19:26,720
is angular angular has this this

00:19:24,880 --> 00:19:28,240
end-to-end test and they all do but you

00:19:26,720 --> 00:19:29,840
know this is an example of an end-to-end

00:19:28,240 --> 00:19:32,080
test i just you know google round

00:19:29,840 --> 00:19:33,280
and found this online and angular's

00:19:32,080 --> 00:19:35,360
end-to-end testing

00:19:33,280 --> 00:19:37,440
um is like any other end-to-end testing

00:19:35,360 --> 00:19:39,520
and ultimately what it does is it uses

00:19:37,440 --> 00:19:41,200
something like protractor or

00:19:39,520 --> 00:19:42,640
one of the other ones that i can't

00:19:41,200 --> 00:19:43,440
remember what the other one we used to

00:19:42,640 --> 00:19:45,280
use was

00:19:43,440 --> 00:19:46,400
you know a few years ago but

00:19:45,280 --> 00:19:47,919
fundamentally they're all the same what

00:19:46,400 --> 00:19:48,880
this does this is just an in-memory

00:19:47,919 --> 00:19:50,480
browser

00:19:48,880 --> 00:19:52,000
so it's a headless browser i think it's

00:19:50,480 --> 00:19:54,080
called and what it will do is it will

00:19:52,000 --> 00:19:56,080
go to you know go and get a page and

00:19:54,080 --> 00:19:57,200
then it will read that html a bit like

00:19:56,080 --> 00:19:59,440
we saw on the react one

00:19:57,200 --> 00:20:01,200
and then it will use css to find the

00:19:59,440 --> 00:20:03,840
right place in that html

00:20:01,200 --> 00:20:05,679
and that's great if you write great css

00:20:03,840 --> 00:20:08,559
but you know

00:20:05,679 --> 00:20:10,000
we we haven't even mastered architecture

00:20:08,559 --> 00:20:11,840
yet and then we're now trying to write

00:20:10,000 --> 00:20:12,400
css and the problem is is that they're

00:20:11,840 --> 00:20:13,760
both

00:20:12,400 --> 00:20:16,400
uh they're both sort of doing different

00:20:13,760 --> 00:20:17,919
jobs and so the problem is is that we

00:20:16,400 --> 00:20:21,039
are trying to now

00:20:17,919 --> 00:20:22,880
build css and views that are

00:20:21,039 --> 00:20:25,039
are testable rather than just making our

00:20:22,880 --> 00:20:26,880
code testable so you know it depends on

00:20:25,039 --> 00:20:27,760
really what you want but so the problems

00:20:26,880 --> 00:20:30,080
that this sort of thing

00:20:27,760 --> 00:20:31,039
causes is that you know we get this

00:20:30,080 --> 00:20:34,000
confusing

00:20:31,039 --> 00:20:35,760
stuff here um and you know my experience

00:20:34,000 --> 00:20:37,440
of this over time is this doesn't scale

00:20:35,760 --> 00:20:38,480
very well because now you know when you

00:20:37,440 --> 00:20:40,080
want to change your

00:20:38,480 --> 00:20:41,520
you you want to change the layout of

00:20:40,080 --> 00:20:42,880
things on the page your test break

00:20:41,520 --> 00:20:44,480
the software's still working i mean i've

00:20:42,880 --> 00:20:45,280
just moved something you know i might

00:20:44,480 --> 00:20:47,360
have nested

00:20:45,280 --> 00:20:49,120
an element the software is still working

00:20:47,360 --> 00:20:50,480
um but the rendering has changed the

00:20:49,120 --> 00:20:52,400
visualization of it has changed and now

00:20:50,480 --> 00:20:55,520
my test breaks when when really

00:20:52,400 --> 00:20:56,799
it was just a trivial ui level change so

00:20:55,520 --> 00:20:58,720
uh this is the sort of problem that we

00:20:56,799 --> 00:20:59,360
see with uh with with angular and and

00:20:58,720 --> 00:21:01,360
just for

00:20:59,360 --> 00:21:03,280
so i'm so i'm not picking on react on

00:21:01,360 --> 00:21:03,840
angular and i'm going to pick on vue.js

00:21:03,280 --> 00:21:07,440
now

00:21:03,840 --> 00:21:09,200
and so yeah vue.js is this is another

00:21:07,440 --> 00:21:11,200
framework thing and it uses snapshots

00:21:09,200 --> 00:21:11,760
you know much the same as um as react

00:21:11,200 --> 00:21:13,200
does

00:21:11,760 --> 00:21:14,960
and and this is you know returns an

00:21:13,200 --> 00:21:16,880
error for valid code well

00:21:14,960 --> 00:21:18,080
i mean yeah for me again this is just

00:21:16,880 --> 00:21:18,400
something i found online you know i was

00:21:18,080 --> 00:21:20,559
like

00:21:18,400 --> 00:21:21,840
looking through it and you know the

00:21:20,559 --> 00:21:23,520
problem with snapshots

00:21:21,840 --> 00:21:24,880
across these these frameworks is that

00:21:23,520 --> 00:21:26,720
they uh

00:21:24,880 --> 00:21:28,240
you know you can't see immediately what

00:21:26,720 --> 00:21:30,080
the actual output that is right

00:21:28,240 --> 00:21:31,360
you have to go and look on disk if you

00:21:30,080 --> 00:21:32,480
mostly snapshot managers you have to go

00:21:31,360 --> 00:21:34,080
and look on disk because you have to

00:21:32,480 --> 00:21:35,120
write your snapshot on disk somewhere

00:21:34,080 --> 00:21:36,880
and it's stored in memory

00:21:35,120 --> 00:21:38,240
it means i have to now go into another

00:21:36,880 --> 00:21:40,159
file to check what the output is

00:21:38,240 --> 00:21:41,919
and normally those outputs are massive

00:21:40,159 --> 00:21:43,360
uh you know they've got lots of html

00:21:41,919 --> 00:21:46,000
buried in them

00:21:43,360 --> 00:21:47,280
and you know unless you use your mocking

00:21:46,000 --> 00:21:48,799
and you make it so small but then you

00:21:47,280 --> 00:21:50,000
get the the problems with um

00:21:48,799 --> 00:21:52,720
you know these problems with false

00:21:50,000 --> 00:21:53,679
positives so so so the problem is is

00:21:52,720 --> 00:21:56,240
that you you've now

00:21:53,679 --> 00:21:56,960
got obscure inputs and outputs to your

00:21:56,240 --> 00:22:00,000
tests

00:21:56,960 --> 00:22:00,720
and which is uh which is really what you

00:22:00,000 --> 00:22:03,440
don't want

00:22:00,720 --> 00:22:04,480
if you want to write a good testable

00:22:03,440 --> 00:22:06,480
code then you need

00:22:04,480 --> 00:22:08,400
good inputs and outputs and here's what

00:22:06,480 --> 00:22:09,919
um good inputs and outputs gives you

00:22:08,400 --> 00:22:11,120
we typically all of these problems these

00:22:09,919 --> 00:22:12,159
last three problems i've shown you

00:22:11,120 --> 00:22:14,159
typically

00:22:12,159 --> 00:22:15,360
result in something like that you see at

00:22:14,159 --> 00:22:17,120
the top here they

00:22:15,360 --> 00:22:18,400
want the the way they want you to test

00:22:17,120 --> 00:22:21,520
is they want you to you know

00:22:18,400 --> 00:22:22,159
iterate some html uh and then they want

00:22:21,520 --> 00:22:25,679
you to

00:22:22,159 --> 00:22:28,640
you know understand things like css here

00:22:25,679 --> 00:22:29,360
and html semantic html structure here

00:22:28,640 --> 00:22:32,400
and

00:22:29,360 --> 00:22:34,240
html you know 20 year old tags

00:22:32,400 --> 00:22:35,919
here and they want you to iterate them

00:22:34,240 --> 00:22:37,760
and then they want you to check that

00:22:35,919 --> 00:22:39,520
output but you know this is this is mad

00:22:37,760 --> 00:22:41,360
because this is just too complex

00:22:39,520 --> 00:22:42,880
to actually do that now you can use

00:22:41,360 --> 00:22:44,559
things like page object models but

00:22:42,880 --> 00:22:46,000
problem with page object models is again

00:22:44,559 --> 00:22:47,600
you're just collapsing it down behind

00:22:46,000 --> 00:22:48,799
another layer and if you change any of

00:22:47,600 --> 00:22:50,400
that css you're going to

00:22:48,799 --> 00:22:52,159
still break your page object model so

00:22:50,400 --> 00:22:53,600
really what you want is you want to

00:22:52,159 --> 00:22:55,120
remove the framework

00:22:53,600 --> 00:22:57,600
and you want to just boil everything

00:22:55,120 --> 00:22:59,520
down to to just clean

00:22:57,600 --> 00:23:01,039
objects and this is what's this this bit

00:22:59,520 --> 00:23:02,960
here and the clean object just

00:23:01,039 --> 00:23:05,280
represents that customer page it is an

00:23:02,960 --> 00:23:07,039
abstraction of that customer page

00:23:05,280 --> 00:23:09,360
it's not the actual custom page it's a

00:23:07,039 --> 00:23:11,360
clean uh two-dimensional abstraction of

00:23:09,360 --> 00:23:11,919
that customer page and what it says is

00:23:11,360 --> 00:23:13,919
that

00:23:11,919 --> 00:23:15,520
um you just use simple objects to

00:23:13,919 --> 00:23:17,280
represent where the

00:23:15,520 --> 00:23:18,720
something like the main title is okay so

00:23:17,280 --> 00:23:20,880
main title would live

00:23:18,720 --> 00:23:22,159
inside the h1 right and then you just

00:23:20,880 --> 00:23:24,159
you pull out that main title and you

00:23:22,159 --> 00:23:26,320
test that in isolation and that means

00:23:24,159 --> 00:23:27,440
um that you're going to be able to do

00:23:26,320 --> 00:23:30,240
this

00:23:27,440 --> 00:23:30,880
what we used to have and what we have

00:23:30,240 --> 00:23:33,840
when we

00:23:30,880 --> 00:23:34,320
we follow the the default process is

00:23:33,840 --> 00:23:37,600
that we

00:23:34,320 --> 00:23:39,840
we have a test that starts and when we

00:23:37,600 --> 00:23:41,279
when we when we when we when we put the

00:23:39,840 --> 00:23:44,080
framework in control

00:23:41,279 --> 00:23:44,400
um the test will start and it will you

00:23:44,080 --> 00:23:46,799
know

00:23:44,400 --> 00:23:48,320
pick up the component and start it it

00:23:46,799 --> 00:23:50,400
with snapshots or

00:23:48,320 --> 00:23:52,640
you know if it's end-to-end testing um

00:23:50,400 --> 00:23:54,240
you know it'll pick up that component

00:23:52,640 --> 00:23:55,760
and it will invoke it and then it will

00:23:54,240 --> 00:23:57,679
run a load of our code

00:23:55,760 --> 00:23:59,440
and then that code will need to do some

00:23:57,679 --> 00:24:01,600
i o with maybe with the browser or with

00:23:59,440 --> 00:24:02,720
the http module you know do a fetch or

00:24:01,600 --> 00:24:03,360
something and then you know the test

00:24:02,720 --> 00:24:05,679
ends right

00:24:03,360 --> 00:24:07,039
we get some sort of yeah this is yeah a

00:24:05,679 --> 00:24:08,480
lot of tests ends up

00:24:07,039 --> 00:24:10,720
being like this because we're forced to

00:24:08,480 --> 00:24:12,559
be like this right because we haven't

00:24:10,720 --> 00:24:14,080
uh because we haven't got access we

00:24:12,559 --> 00:24:15,760
we're putting too much information in

00:24:14,080 --> 00:24:16,480
the framework we've got access to that

00:24:15,760 --> 00:24:19,520
stuff because it

00:24:16,480 --> 00:24:20,240
the framework hides it so so so really

00:24:19,520 --> 00:24:22,000
what we want

00:24:20,240 --> 00:24:23,760
is we want to just take the framework

00:24:22,000 --> 00:24:25,840
out of the out of the equation

00:24:23,760 --> 00:24:27,039
and we want to just yeah we don't need

00:24:25,840 --> 00:24:29,600
the component we don't need the

00:24:27,039 --> 00:24:30,880
the the i o sort of stuff we want to

00:24:29,600 --> 00:24:32,640
just start the test

00:24:30,880 --> 00:24:34,640
run all of our code and then end the

00:24:32,640 --> 00:24:37,440
test and then what we do

00:24:34,640 --> 00:24:38,080
is we pass the resulting output to the

00:24:37,440 --> 00:24:41,200
framework

00:24:38,080 --> 00:24:44,400
but our tests are nested okay

00:24:41,200 --> 00:24:45,520
are nested just before you pass back to

00:24:44,400 --> 00:24:48,159
the framework right

00:24:45,520 --> 00:24:49,279
so this is where we find this uh this

00:24:48,159 --> 00:24:52,400
new way

00:24:49,279 --> 00:24:54,480
uh which is actually an old way um but

00:24:52,400 --> 00:24:56,080
you know i think has maybe been if this

00:24:54,480 --> 00:24:58,240
if this isn't used to you it's maybe

00:24:56,080 --> 00:25:00,240
lost lost in in translation because

00:24:58,240 --> 00:25:02,320
we so i think as an industry so fixated

00:25:00,240 --> 00:25:05,279
on frameworks um

00:25:02,320 --> 00:25:06,159
that really this this this way of

00:25:05,279 --> 00:25:08,799
testing an

00:25:06,159 --> 00:25:09,520
app and you know this way of getting

00:25:08,799 --> 00:25:11,760
this uh

00:25:09,520 --> 00:25:12,720
this this efficiency of finding the

00:25:11,760 --> 00:25:15,679
sweet spot

00:25:12,720 --> 00:25:17,600
we seek the tests around our code and

00:25:15,679 --> 00:25:18,720
what we call our code is the true app so

00:25:17,600 --> 00:25:20,880
we call the

00:25:18,720 --> 00:25:22,559
presentation and the business logic and

00:25:20,880 --> 00:25:24,240
we test that in isolation

00:25:22,559 --> 00:25:25,760
but we test it as a whole right and

00:25:24,240 --> 00:25:28,320
that's that's what

00:25:25,760 --> 00:25:28,799
creating the testable architecture is

00:25:28,320 --> 00:25:30,559
right

00:25:28,799 --> 00:25:32,320
and then what we do is the output to our

00:25:30,559 --> 00:25:35,600
code we just simply pass that off to the

00:25:32,320 --> 00:25:37,679
html framework renderer which is react

00:25:35,600 --> 00:25:38,880
angular or view right and we just keep a

00:25:37,679 --> 00:25:41,279
very very clear

00:25:38,880 --> 00:25:42,640
line down the middle and what this

00:25:41,279 --> 00:25:46,159
enables us to do

00:25:42,640 --> 00:25:48,400
is to develop tests fast right

00:25:46,159 --> 00:25:50,159
and and i as i said to you at the start

00:25:48,400 --> 00:25:53,200
of this uh this this talk

00:25:50,159 --> 00:25:54,320
um you know i'm i i'm not my history

00:25:53,200 --> 00:25:56,240
isn't really in being

00:25:54,320 --> 00:25:57,679
you know a guru or writing books or

00:25:56,240 --> 00:25:58,480
anything my history is from a commercial

00:25:57,679 --> 00:26:00,640
background

00:25:58,480 --> 00:26:01,840
and you know having made this course

00:26:00,640 --> 00:26:04,080
into something that we use

00:26:01,840 --> 00:26:06,000
with our clients so i wanted to just

00:26:04,080 --> 00:26:07,760
show you how well this works by actually

00:26:06,000 --> 00:26:09,200
showing you um some code that's

00:26:07,760 --> 00:26:11,039
been anonymized but this is from a

00:26:09,200 --> 00:26:13,440
customer's code base and

00:26:11,039 --> 00:26:14,720
in this uh what we do is we we use

00:26:13,440 --> 00:26:16,080
something called the fast test

00:26:14,720 --> 00:26:17,520
architecture and i'm going to

00:26:16,080 --> 00:26:19,679
tell you what the fast test architecture

00:26:17,520 --> 00:26:20,880
is at the end because we've actually put

00:26:19,679 --> 00:26:23,520
it into a course

00:26:20,880 --> 00:26:24,720
it's a six week training course and the

00:26:23,520 --> 00:26:27,279
the course actually

00:26:24,720 --> 00:26:27,919
and this this particular uh video that

00:26:27,279 --> 00:26:29,279
you'll watch or

00:26:27,919 --> 00:26:30,960
this live stream you're watching at the

00:26:29,279 --> 00:26:32,320
moment is it's sort of the foundational

00:26:30,960 --> 00:26:33,440
material we don't let people do the

00:26:32,320 --> 00:26:34,400
course until they've seen this video

00:26:33,440 --> 00:26:35,679
because they have to understand what

00:26:34,400 --> 00:26:38,720
they're getting themselves into

00:26:35,679 --> 00:26:40,480
it's just you know complex stuff so this

00:26:38,720 --> 00:26:42,240
works really well right we have used

00:26:40,480 --> 00:26:43,520
this with customers and you know we have

00:26:42,240 --> 00:26:45,760
uh you know big teams

00:26:43,520 --> 00:26:46,880
that are using this and this is the sort

00:26:45,760 --> 00:26:49,440
of code it produces

00:26:46,880 --> 00:26:50,880
and you know 90 of our code looks like

00:26:49,440 --> 00:26:52,880
this our test code 90

00:26:50,880 --> 00:26:54,960
of our test code looks like this and i

00:26:52,880 --> 00:26:56,240
remember um when we we started uh you

00:26:54,960 --> 00:26:57,679
know we have one project that we we

00:26:56,240 --> 00:26:59,279
started a few years ago and

00:26:57,679 --> 00:27:00,880
you know the engineers at the time you

00:26:59,279 --> 00:27:02,159
know they were they

00:27:00,880 --> 00:27:03,679
it was a little bit of resistance a

00:27:02,159 --> 00:27:05,200
little bit of resistance but as they

00:27:03,679 --> 00:27:06,880
slowly got into this they suddenly

00:27:05,200 --> 00:27:07,760
realized what this is all about and it's

00:27:06,880 --> 00:27:09,440
about having

00:27:07,760 --> 00:27:11,840
really clean tests that test

00:27:09,440 --> 00:27:12,159
specifications i can pick that test up

00:27:11,840 --> 00:27:13,600
now

00:27:12,159 --> 00:27:15,279
and just say should display a list of

00:27:13,600 --> 00:27:16,559
users right and what's happened here is

00:27:15,279 --> 00:27:18,320
i've gone off to

00:27:16,559 --> 00:27:20,320
something quickly we use inversion of

00:27:18,320 --> 00:27:22,559
control containers and and whatnot but

00:27:20,320 --> 00:27:23,840
and we go off to you know some abstract

00:27:22,559 --> 00:27:24,159
service you know we pull stuff back and

00:27:23,840 --> 00:27:26,080
we

00:27:24,159 --> 00:27:28,000
we are really populating an entire

00:27:26,080 --> 00:27:28,799
system under test and we're populating

00:27:28,000 --> 00:27:30,880
we're keeping

00:27:28,799 --> 00:27:32,320
it as a whole but we're taking a lean

00:27:30,880 --> 00:27:34,480
approach to it and we're testing that

00:27:32,320 --> 00:27:36,159
our software actually works but without

00:27:34,480 --> 00:27:37,840
including the framework and this is the

00:27:36,159 --> 00:27:39,120
power of this testable ui architecture

00:27:37,840 --> 00:27:40,640
okay this is what you get

00:27:39,120 --> 00:27:42,240
you get clean tests that are faster

00:27:40,640 --> 00:27:43,840
right and when stuff

00:27:42,240 --> 00:27:45,679
is clean and a faster right it's going

00:27:43,840 --> 00:27:47,200
to keep you in that flow channel

00:27:45,679 --> 00:27:49,039
right and when you do that you're going

00:27:47,200 --> 00:27:50,720
to get good you're going to get

00:27:49,039 --> 00:27:52,559
high test coverage which a lot of people

00:27:50,720 --> 00:27:53,760
get anyway but the test coverage is

00:27:52,559 --> 00:27:55,200
going to be high value

00:27:53,760 --> 00:27:57,120
you can't tell whether it's high value

00:27:55,200 --> 00:27:58,240
from at all you you may tell us high

00:27:57,120 --> 00:27:59,600
value from tools you have to go in and

00:27:58,240 --> 00:28:01,360
look at the architecture and that

00:27:59,600 --> 00:28:03,120
that's really what you know what i

00:28:01,360 --> 00:28:05,360
wanted to do in part with you today

00:28:03,120 --> 00:28:07,279
is is is to get a good architecture and

00:28:05,360 --> 00:28:08,799
that your tests are you actually are

00:28:07,279 --> 00:28:10,720
connected to your test you want

00:28:08,799 --> 00:28:12,399
to maintain them because they're they

00:28:10,720 --> 00:28:15,039
truly are good tests they're not just

00:28:12,399 --> 00:28:16,640
you're not just doing it because you

00:28:15,039 --> 00:28:18,960
are told to or you're not just doing it

00:28:16,640 --> 00:28:20,960
because you know um you think you should

00:28:18,960 --> 00:28:22,559
you're doing it because you found a way

00:28:20,960 --> 00:28:24,320
you found a process

00:28:22,559 --> 00:28:26,320
that puts you in flow and makes you so

00:28:24,320 --> 00:28:28,480
you know so it's you find it so easy

00:28:26,320 --> 00:28:30,080
that you why wouldn't you do it right uh

00:28:28,480 --> 00:28:31,440
you know this this this way of doing it

00:28:30,080 --> 00:28:35,360
is is so great um

00:28:31,440 --> 00:28:36,880
i found um personally because um

00:28:35,360 --> 00:28:38,399
i can get distracted i know i can get

00:28:36,880 --> 00:28:40,080
distracted and i can come back to it and

00:28:38,399 --> 00:28:42,640
i know exactly where i am it's

00:28:40,080 --> 00:28:43,679
really really fantastic so putting it

00:28:42,640 --> 00:28:46,799
all together

00:28:43,679 --> 00:28:47,200
and really what this uh this to today's

00:28:46,799 --> 00:28:49,520
talk

00:28:47,200 --> 00:28:50,399
has been about is is creating is is

00:28:49,520 --> 00:28:52,799
finding out some

00:28:50,399 --> 00:28:53,520
some secrets of this this testable ui

00:28:52,799 --> 00:28:54,960
architecture and

00:28:53,520 --> 00:28:56,720
it's really just understanding this

00:28:54,960 --> 00:28:58,480
testable ui architecture is

00:28:56,720 --> 00:29:00,240
a single page app in it you have you

00:28:58,480 --> 00:29:00,720
know two apps you have your ui app where

00:29:00,240 --> 00:29:02,799
you put

00:29:00,720 --> 00:29:05,200
your framework code and then you have a

00:29:02,799 --> 00:29:07,279
business and ui presentation concern

00:29:05,200 --> 00:29:08,640
section and then you uh you you test

00:29:07,279 --> 00:29:10,640
that in isolation

00:29:08,640 --> 00:29:12,559
so from a bird's eye perspective what

00:29:10,640 --> 00:29:15,360
we've what we've learned today

00:29:12,559 --> 00:29:17,200
is that um testing won't get done unless

00:29:15,360 --> 00:29:18,159
it's simple because it will take us out

00:29:17,200 --> 00:29:19,760
of the flow channel

00:29:18,159 --> 00:29:21,679
nothing happens outside the flow channel

00:29:19,760 --> 00:29:24,960
apart from anxiety or boredom

00:29:21,679 --> 00:29:26,799
and so what we need to do to to to have

00:29:24,960 --> 00:29:27,440
better testing is we need to create a

00:29:26,799 --> 00:29:29,679
testable

00:29:27,440 --> 00:29:31,679
ui architecture and we saw how taking a

00:29:29,679 --> 00:29:34,000
lean mental model to

00:29:31,679 --> 00:29:35,360
architecture will help us make decisions

00:29:34,000 --> 00:29:36,960
okay that's our first

00:29:35,360 --> 00:29:38,320
the first thing that hopefully you know

00:29:36,960 --> 00:29:39,600
you've learned today is how to make good

00:29:38,320 --> 00:29:40,080
decisions because if you make good

00:29:39,600 --> 00:29:42,480
decisions

00:29:40,080 --> 00:29:43,360
then you won't need to ask too much you

00:29:42,480 --> 00:29:44,880
know being

00:29:43,360 --> 00:29:47,200
having frameworks to make good decisions

00:29:44,880 --> 00:29:49,600
is important as the decisions themselves

00:29:47,200 --> 00:29:51,279
the second thing that we we saw is how

00:29:49,600 --> 00:29:53,520
the testing documentation

00:29:51,279 --> 00:29:55,760
advocates sometimes promotes

00:29:53,520 --> 00:29:58,960
isolationism and mocking

00:29:55,760 --> 00:30:00,240
which if you don't uh know i say don't

00:29:58,960 --> 00:30:02,080
know what don't know what you're doing

00:30:00,240 --> 00:30:03,600
if you don't have the right mental model

00:30:02,080 --> 00:30:05,279
the right mental cap on

00:30:03,600 --> 00:30:06,720
what's going to happen is that this can

00:30:05,279 --> 00:30:07,679
cause false positives and a lot of

00:30:06,720 --> 00:30:09,039
coupling

00:30:07,679 --> 00:30:11,600
right so we what we want to do is we

00:30:09,039 --> 00:30:14,960
want to test the hole and in order to

00:30:11,600 --> 00:30:15,919
test the hole uh we we we saw that we

00:30:14,960 --> 00:30:17,120
need to um

00:30:15,919 --> 00:30:19,039
you know we need to have a testable

00:30:17,120 --> 00:30:21,120
architecture but we need to

00:30:19,039 --> 00:30:23,679
uh we need to dial out of the frameworks

00:30:21,120 --> 00:30:24,799
and we need to find a framework agnostic

00:30:23,679 --> 00:30:28,559
way a framework

00:30:24,799 --> 00:30:29,120
separated way of testing um of actually

00:30:28,559 --> 00:30:32,399
testing

00:30:29,120 --> 00:30:36,080
our sit of of of exercising our system

00:30:32,399 --> 00:30:39,600
under test so um

00:30:36,080 --> 00:30:42,799
this uh so this this particular um

00:30:39,600 --> 00:30:44,080
talk that you're seeing the um the it's

00:30:42,799 --> 00:30:47,120
the foundation

00:30:44,080 --> 00:30:50,159
um of a six week uh training uh

00:30:47,120 --> 00:30:52,159
course which covers um we

00:30:50,159 --> 00:30:54,000
in it we in week one we do architecture

00:30:52,159 --> 00:30:54,960
and we we teach you how to lay out all

00:30:54,000 --> 00:30:56,799
these files

00:30:54,960 --> 00:30:58,960
then we talk about execution and we we

00:30:56,799 --> 00:31:00,799
teach you the differences between

00:30:58,960 --> 00:31:02,480
async and await and observables and

00:31:00,799 --> 00:31:05,200
specifically when to use them in

00:31:02,480 --> 00:31:07,360
a ui architecture and then what we do is

00:31:05,200 --> 00:31:08,960
we teach you how to make a simple test

00:31:07,360 --> 00:31:11,120
uh just a simple state test and then we

00:31:08,960 --> 00:31:12,480
show you complicated tests which are

00:31:11,120 --> 00:31:14,320
the you know the car is moving and we

00:31:12,480 --> 00:31:15,200
show you how to take that through

00:31:14,320 --> 00:31:17,279
multiple

00:31:15,200 --> 00:31:19,200
loading and state changes within the

00:31:17,279 --> 00:31:21,600
test without using the framework

00:31:19,200 --> 00:31:22,960
and then the the final week five and six

00:31:21,600 --> 00:31:25,279
is we teach you how to

00:31:22,960 --> 00:31:27,120
um it's how to create a vertically

00:31:25,279 --> 00:31:28,880
scalar test suite so that you are

00:31:27,120 --> 00:31:30,080
getting maximum code reuse but you're

00:31:28,880 --> 00:31:31,760
still testing the whole

00:31:30,080 --> 00:31:33,679
and then we show you how to horizontally

00:31:31,760 --> 00:31:35,120
scale it where we we show you without

00:31:33,679 --> 00:31:36,559
using the framework how you can actually

00:31:35,120 --> 00:31:38,480
test a ui and we can

00:31:36,559 --> 00:31:39,600
have an architecture that mimics what's

00:31:38,480 --> 00:31:41,200
in that ui and you can

00:31:39,600 --> 00:31:43,440
you know you can make tests where you

00:31:41,200 --> 00:31:45,760
can invoke one part of the screen

00:31:43,440 --> 00:31:47,600
and but then another part opens you know

00:31:45,760 --> 00:31:48,720
opens a repeater or an even asynchronous

00:31:47,600 --> 00:31:50,399
repeater control

00:31:48,720 --> 00:31:51,679
and but but you're not going to do that

00:31:50,399 --> 00:31:53,200
with framework code you're going to do

00:31:51,679 --> 00:31:55,600
that with abstracted

00:31:53,200 --> 00:31:56,960
code okay and those tests will be robust

00:31:55,600 --> 00:31:58,399
nine times out of ten you can get that

00:31:56,960 --> 00:31:59,200
code and drop it into your framework and

00:31:58,399 --> 00:32:02,559
it

00:31:59,200 --> 00:32:05,039
were first time so um

00:32:02,559 --> 00:32:06,240
so if you would like information about

00:32:05,039 --> 00:32:09,279
this i'm going to give this

00:32:06,240 --> 00:32:10,080
all the details um to iris and if you

00:32:09,279 --> 00:32:12,080
want to

00:32:10,080 --> 00:32:13,840
redo this course we it's available on

00:32:12,080 --> 00:32:15,039
our main site if you want to redo

00:32:13,840 --> 00:32:16,320
today's talks a little bit different

00:32:15,039 --> 00:32:17,519
than we have on the site but you can you

00:32:16,320 --> 00:32:18,480
can do that it's a three-day email

00:32:17,519 --> 00:32:20,559
course

00:32:18,480 --> 00:32:22,320
um the six-week testable ui architecture

00:32:20,559 --> 00:32:24,000
course it's sort of it's normally

00:32:22,320 --> 00:32:25,840
invite-only and but if you go to that

00:32:24,000 --> 00:32:27,360
link there you'll get an invite and it

00:32:25,840 --> 00:32:28,080
has a it has some information about the

00:32:27,360 --> 00:32:31,279
course including

00:32:28,080 --> 00:32:34,240
the pricing and today uh we have a

00:32:31,279 --> 00:32:35,519
there's a 40 we have a 47 discount

00:32:34,240 --> 00:32:37,919
coupon that is

00:32:35,519 --> 00:32:39,440
active until uh closer play friday just

00:32:37,919 --> 00:32:39,919
for you guys this hasn't gone anywhere

00:32:39,440 --> 00:32:41,600
else

00:32:39,919 --> 00:32:43,200
so if you would be interested in taking

00:32:41,600 --> 00:32:45,679
that course you just need to visit

00:32:43,200 --> 00:32:47,360
the link there uh put your details in it

00:32:45,679 --> 00:32:47,919
will send you the course info including

00:32:47,360 --> 00:32:50,240
the full

00:32:47,919 --> 00:32:50,960
schedule and when it happens etc and the

00:32:50,240 --> 00:32:52,799
syllabus

00:32:50,960 --> 00:32:54,000
uh in the pricing and then you just get

00:32:52,799 --> 00:32:56,000
this um this this

00:32:54,000 --> 00:32:58,640
this coupon will give you a 47 discount

00:32:56,000 --> 00:33:00,880
on that um available until friday

00:32:58,640 --> 00:33:01,840
so i hope you've enjoyed it i hope i

00:33:00,880 --> 00:33:04,880
haven't run

00:33:01,840 --> 00:33:07,120
over got 10 minutes left and any

00:33:04,880 --> 00:33:08,960
questions

00:33:07,120 --> 00:33:11,440
while we're waiting for any any

00:33:08,960 --> 00:33:13,679
questions and

00:33:11,440 --> 00:33:15,679
and how many companies at the moment how

00:33:13,679 --> 00:33:19,440
are they using this approach that you

00:33:15,679 --> 00:33:22,480
you just mentioned a bit

00:33:19,440 --> 00:33:25,440
uh three

00:33:22,480 --> 00:33:27,200
three right and then what is what what

00:33:25,440 --> 00:33:27,919
kind of results do you see in terms of

00:33:27,200 --> 00:33:31,760
uh moving

00:33:27,919 --> 00:33:35,519
outside of the frame um framework um

00:33:31,760 --> 00:33:38,399
so we and we we started uh we started

00:33:35,519 --> 00:33:39,360
we launched this course in january and

00:33:38,399 --> 00:33:42,559
um

00:33:39,360 --> 00:33:44,240
we've noticed that we've got one uh case

00:33:42,559 --> 00:33:45,760
study that we've done with with a

00:33:44,240 --> 00:33:48,080
they're a fintech company

00:33:45,760 --> 00:33:49,120
a rapidly growing fintech fintech

00:33:48,080 --> 00:33:51,600
company

00:33:49,120 --> 00:33:52,399
and we've seen around about a 30

00:33:51,600 --> 00:33:55,440
improvement in

00:33:52,399 --> 00:33:56,880
overall development speed and the way we

00:33:55,440 --> 00:33:58,720
were able to measure that is because we

00:33:56,880 --> 00:33:59,760
were basically rebuilding a platform and

00:33:58,720 --> 00:34:03,039
we had data

00:33:59,760 --> 00:34:04,720
off the the last platform they built um

00:34:03,039 --> 00:34:06,880
compared to rebuilding at this time so

00:34:04,720 --> 00:34:08,480
we started with them that funnily enough

00:34:06,880 --> 00:34:11,520
they were a company i i started with the

00:34:08,480 --> 00:34:13,520
cto there five years ago and you know

00:34:11,520 --> 00:34:14,800
used the methodology that it was in my

00:34:13,520 --> 00:34:16,399
head at the time

00:34:14,800 --> 00:34:18,079
back then and that's why he asked me you

00:34:16,399 --> 00:34:19,520
know could we could we meet up and you

00:34:18,079 --> 00:34:20,000
know look at this new project they were

00:34:19,520 --> 00:34:21,839
doing

00:34:20,000 --> 00:34:23,760
and you know we've seen a significant

00:34:21,839 --> 00:34:25,520
speed improvement uh you know compared

00:34:23,760 --> 00:34:27,200
to the old way they're doing it and

00:34:25,520 --> 00:34:28,800
you know generally the sentiment with

00:34:27,200 --> 00:34:29,280
all of the engineers both the senior and

00:34:28,800 --> 00:34:32,639
the uh

00:34:29,280 --> 00:34:34,560
the the more junior engineers is it it

00:34:32,639 --> 00:34:36,320
you know they compared to working in the

00:34:34,560 --> 00:34:37,919
old code base which was just

00:34:36,320 --> 00:34:39,520
what we call a smart ui which was just

00:34:37,919 --> 00:34:40,879
two two layers yep this

00:34:39,520 --> 00:34:42,720
way is just so much easier they can

00:34:40,879 --> 00:34:43,440
write tests fast you know they feel more

00:34:42,720 --> 00:34:45,359
empowered

00:34:43,440 --> 00:34:47,040
and i you know i can honestly say that

00:34:45,359 --> 00:34:48,639
i've um you know with

00:34:47,040 --> 00:34:50,000
it recently you know professionally i've

00:34:48,639 --> 00:34:50,480
never been in the situation where i

00:34:50,000 --> 00:34:51,839
could

00:34:50,480 --> 00:34:52,879
explain how to do something with someone

00:34:51,839 --> 00:34:53,839
and put the framework in front of them

00:34:52,879 --> 00:34:55,679
and just see

00:34:53,839 --> 00:34:57,040
them become architects themselves i've

00:34:55,679 --> 00:34:58,000
always had to do the work myself as a

00:34:57,040 --> 00:34:59,839
professional

00:34:58,000 --> 00:35:01,680
and uh it's only recently that i've seen

00:34:59,839 --> 00:35:03,839
how well this technique works because

00:35:01,680 --> 00:35:04,880
it really empowers them to take control

00:35:03,839 --> 00:35:06,960
of the architecture

00:35:04,880 --> 00:35:08,560
it really empowers them to to to do what

00:35:06,960 --> 00:35:10,800
i've always naturally done

00:35:08,560 --> 00:35:11,839
um and so it's you know it's really

00:35:10,800 --> 00:35:13,200
working out well

00:35:11,839 --> 00:35:14,880
um so it's you know it's fairly early

00:35:13,200 --> 00:35:16,240
days early days for it

00:35:14,880 --> 00:35:17,760
but we're getting some you know some

00:35:16,240 --> 00:35:19,280
really really interesting results at the

00:35:17,760 --> 00:35:22,720
moment

00:35:19,280 --> 00:35:26,160
um and so that's this um

00:35:22,720 --> 00:35:27,760
in the previous one of the previous um

00:35:26,160 --> 00:35:31,760
one of the previous talks we had it was

00:35:27,760 --> 00:35:35,119
about um about

00:35:31,760 --> 00:35:37,520
cyprus oh yes how does this

00:35:35,119 --> 00:35:40,000
how do your test connect with this kind

00:35:37,520 --> 00:35:43,280
of approach where

00:35:40,000 --> 00:35:45,440
we can use platforms like this to

00:35:43,280 --> 00:35:46,720
basically run our tests through the

00:35:45,440 --> 00:35:49,839
cloud

00:35:46,720 --> 00:35:51,119
yes um so the cyprus question comes up

00:35:49,839 --> 00:35:54,160
quite a lot

00:35:51,119 --> 00:35:56,240
and so and so what i usually stress is

00:35:54,160 --> 00:35:58,240
that cyprus is a tool

00:35:56,240 --> 00:36:00,240
uh it's you know it's an end-to-end or

00:35:58,240 --> 00:36:04,320
integration testing tool

00:36:00,240 --> 00:36:06,560
um and but this approach is about

00:36:04,320 --> 00:36:08,079
that that's a tool and this is a concept

00:36:06,560 --> 00:36:08,800
and so what we what we're doing here is

00:36:08,079 --> 00:36:11,040
we're saying

00:36:08,800 --> 00:36:13,040
if you want to use cyprus to drive this

00:36:11,040 --> 00:36:13,760
architecture you know use cyprus but you

00:36:13,040 --> 00:36:15,680
know cyprus

00:36:13,760 --> 00:36:16,800
you probably use something a little bit

00:36:15,680 --> 00:36:18,320
less heavyweight

00:36:16,800 --> 00:36:20,880
probably something like jest would be

00:36:18,320 --> 00:36:22,240
enough to run these lean tests to run

00:36:20,880 --> 00:36:23,760
these mass tests you know

00:36:22,240 --> 00:36:26,079
and what you would do is you would just

00:36:23,760 --> 00:36:28,160
say well let's run our specification via

00:36:26,079 --> 00:36:30,079
a simple test framework like karma or

00:36:28,160 --> 00:36:31,520
jest and what that does is that brings

00:36:30,079 --> 00:36:32,960
that that that brings that challenge

00:36:31,520 --> 00:36:34,800
down it brings that heavy weightness

00:36:32,960 --> 00:36:37,200
down it brings that cost down

00:36:34,800 --> 00:36:38,640
which increases the value which improves

00:36:37,200 --> 00:36:39,920
the chances that the developers you know

00:36:38,640 --> 00:36:40,880
the engineer is going to pick it up and

00:36:39,920 --> 00:36:44,640
run with it

00:36:40,880 --> 00:36:47,359
okay that's great um questions we have

00:36:44,640 --> 00:36:49,520
is um is testable ui compatible with

00:36:47,359 --> 00:36:53,040
accessibility features access a bit

00:36:49,520 --> 00:36:54,960
absolutely so what um what would happen

00:36:53,040 --> 00:36:56,240
in that scenario in fact it works really

00:36:54,960 --> 00:36:58,320
well with that because

00:36:56,240 --> 00:37:00,960
if you imagine what happens is that you

00:36:58,320 --> 00:37:03,280
have this uh imaginary boundary

00:37:00,960 --> 00:37:05,280
um and in the outside that imaginary

00:37:03,280 --> 00:37:07,839
boundary you have your true app

00:37:05,280 --> 00:37:09,359
and your true app normally doesn't have

00:37:07,839 --> 00:37:11,200
accessibility in it because your true

00:37:09,359 --> 00:37:12,800
app is just in memory representations of

00:37:11,200 --> 00:37:13,440
whatever you physically need to code

00:37:12,800 --> 00:37:14,880
right

00:37:13,440 --> 00:37:16,560
normally what happens is that when you

00:37:14,880 --> 00:37:17,440
pass it back to the framework at that

00:37:16,560 --> 00:37:19,599
point

00:37:17,440 --> 00:37:21,119
just after you've left the boundary the

00:37:19,599 --> 00:37:23,359
black box that we talked about

00:37:21,119 --> 00:37:24,960
after you've left the black box what

00:37:23,359 --> 00:37:25,680
happens is you then pass that to the

00:37:24,960 --> 00:37:27,280
framework

00:37:25,680 --> 00:37:29,680
and then the framework takes over your

00:37:27,280 --> 00:37:30,800
accessibility if you want to test your

00:37:29,680 --> 00:37:32,400
accessibility

00:37:30,800 --> 00:37:33,680
then what we usually recommend is you

00:37:32,400 --> 00:37:35,040
test that in isolation with the

00:37:33,680 --> 00:37:37,440
framework to make sure

00:37:35,040 --> 00:37:38,720
that if you get past a you know a rubber

00:37:37,440 --> 00:37:39,280
duck that a picture of a rubber

00:37:38,720 --> 00:37:41,280
duckworth

00:37:39,280 --> 00:37:42,400
audio of a rubber duck comes out on the

00:37:41,280 --> 00:37:44,640
framework right

00:37:42,400 --> 00:37:45,440
yeah so it helps you it helps you get

00:37:44,640 --> 00:37:47,680
very clean

00:37:45,440 --> 00:37:49,440
which actually would be good for for

00:37:47,680 --> 00:37:50,560
accessibility and especially it's good

00:37:49,440 --> 00:37:52,640
for your users because you're less

00:37:50,560 --> 00:37:54,400
likely to have accessibility that breaks

00:37:52,640 --> 00:37:56,320
i can't imagine how frustrating it would

00:37:54,400 --> 00:37:57,680
be to need accessibility and to not have

00:37:56,320 --> 00:38:00,640
it working it's probably the thing we

00:37:57,680 --> 00:38:03,040
should get working first

00:38:00,640 --> 00:38:04,640
that's great and i don't know if there

00:38:03,040 --> 00:38:08,400
are any other questions

00:38:04,640 --> 00:38:11,440
and one of the one of our attendees

00:38:08,400 --> 00:38:12,560
is asking if you could post a link and

00:38:11,440 --> 00:38:16,240
that you mentioned

00:38:12,560 --> 00:38:18,560
in the in the actual chat chat yeah

00:38:16,240 --> 00:38:21,280
what we can do we can send an email to

00:38:18,560 --> 00:38:25,119
the people subscribe to this meetup

00:38:21,280 --> 00:38:28,400
for them to go and

00:38:25,119 --> 00:38:30,800
access it afterwards yeah and so

00:38:28,400 --> 00:38:31,440
the slides will be available after this

00:38:30,800 --> 00:38:34,480
talk uh

00:38:31,440 --> 00:38:38,000
into the playlist um that the

00:38:34,480 --> 00:38:41,040
pusser is giving to us and i have

00:38:38,000 --> 00:38:41,440
so yeah we will we will also send a link

00:38:41,040 --> 00:38:46,480
through

00:38:41,440 --> 00:38:49,839
our um our normal um

00:38:46,480 --> 00:38:52,079
newsletter and announcements and

00:38:49,839 --> 00:38:53,280
thank you very much pete for accepting

00:38:52,079 --> 00:38:56,480
to come and talk to our

00:38:53,280 --> 00:38:59,680
and to our meetup and we

00:38:56,480 --> 00:39:00,320
we hope to see you in the next meet up

00:38:59,680 --> 00:39:04,320
or

00:39:00,320 --> 00:39:07,520
in a conference and we'll keep in touch

00:39:04,320 --> 00:39:10,720
and yeah thanks everyone for attending

00:39:07,520 --> 00:39:13,040
and i'm gonna close that

00:39:10,720 --> 00:39:14,800
close it down now and we can all get

00:39:13,040 --> 00:39:17,760
back to our to our work thank you

00:39:14,800 --> 00:39:19,440
thank you very much cheers thank you

00:39:17,760 --> 00:39:29,839
thanks guys bye

00:39:19,440 --> 00:39:29,839
thank you bye

00:39:29,870 --> 00:39:32,909
[Music]

00:39:35,200 --> 00:39:37,280

YouTube URL: https://www.youtube.com/watch?v=dhyuBcnNZ_c


