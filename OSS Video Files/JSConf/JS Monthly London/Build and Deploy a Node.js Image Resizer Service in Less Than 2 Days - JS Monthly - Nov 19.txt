Title: Build and Deploy a Node.js Image Resizer Service in Less Than 2 Days - JS Monthly - Nov 19
Publication date: 2019-11-24
Playlist: JS Monthly London
Description: 
	How we built and deployed a Node.js Image resizer service in less than 2 days // Ardeshir Eshghi (Funding Circle)

This talk, will take you on a journey to share with you our experience with Serverless for building a Node.js microservice.

As developers we like to be empowered by useful tools, practices and technologies. When it comes to building applications, we like to build features quickly and validate them. We often want to focus on the code rather than worrying about setting up environments and dealing with infrastructure. But some of these complexities stop us from executing our ideas as we simply think it is either impossible or very time consuming to build and deploy a new app.

This talk aims to encourage JS developers to consider using Serverless for turning their ideas into apps and be able to validate them by abstracting away the infrastructural concerns.

As with any other tool or technology, we also touch upon the dark side of Serverless and where it might not be fit for purpose.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:07,890
hi Irish Ihram basically a software

00:00:04,470 --> 00:00:09,750
engineer at funding circle and what I'm

00:00:07,890 --> 00:00:11,759
going to talk to you about is how we

00:00:09,750 --> 00:00:15,900
basically managed to build and deploy in

00:00:11,759 --> 00:00:19,730
ojs sort of service application in less

00:00:15,900 --> 00:00:22,020
than two days so as you can imagine

00:00:19,730 --> 00:00:24,810
usually always starts with some sort of

00:00:22,020 --> 00:00:27,000
idea you're thinking about a particular

00:00:24,810 --> 00:00:30,539
problem that you feel it's worth solving

00:00:27,000 --> 00:00:32,309
or you can do something about as

00:00:30,539 --> 00:00:35,850
software engineers we are problem

00:00:32,309 --> 00:00:38,340
solvers so we try to solve problems but

00:00:35,850 --> 00:00:41,070
what actually happens is whilst we try

00:00:38,340 --> 00:00:42,899
to solve problems we either create more

00:00:41,070 --> 00:00:45,329
problems or make things more complex

00:00:42,899 --> 00:00:48,320
this is because I guess we have a

00:00:45,329 --> 00:00:51,629
tendency to sometimes oversimplify or

00:00:48,320 --> 00:00:53,879
sometimes over complicate things

00:00:51,629 --> 00:00:56,730
say you were thinking about building

00:00:53,879 --> 00:01:01,320
some sort of application you've already

00:00:56,730 --> 00:01:02,460
started coding your application so you

00:01:01,320 --> 00:01:04,830
think you're gonna use nodejs

00:01:02,460 --> 00:01:07,590
because you always choose the right tool

00:01:04,830 --> 00:01:10,049
for the job it's not because you like

00:01:07,590 --> 00:01:12,750
JavaScript your at least some sort of

00:01:10,049 --> 00:01:14,040
storage obviously there's a lot of

00:01:12,750 --> 00:01:15,900
options for that but I'm not going to

00:01:14,040 --> 00:01:18,420
talk about any of the names today as

00:01:15,900 --> 00:01:22,939
much as possible so you pick a database

00:01:18,420 --> 00:01:26,670
you kind of go through the process of

00:01:22,939 --> 00:01:28,290
basically choosing a UI framework you

00:01:26,670 --> 00:01:30,900
don't want to use a UI framework to

00:01:28,290 --> 00:01:32,159
begin with because you know we got es6

00:01:30,900 --> 00:01:34,320
these days so you can just use the

00:01:32,159 --> 00:01:37,380
vanilla JavaScript it's quite cool but

00:01:34,320 --> 00:01:39,270
you have some kind of ideas on sort of

00:01:37,380 --> 00:01:41,400
using react because you've explored

00:01:39,270 --> 00:01:43,049
these new features of react you're quiet

00:01:41,400 --> 00:01:45,509
excited about but you're gonna keep it

00:01:43,049 --> 00:01:48,479
simple right it seems you're on the

00:01:45,509 --> 00:01:48,930
right track correct I mean before I

00:01:48,479 --> 00:01:50,670
forget

00:01:48,930 --> 00:01:52,380
obviously you also care about other

00:01:50,670 --> 00:01:54,659
things like local development

00:01:52,380 --> 00:01:58,140
environments you want to make sure that

00:01:54,659 --> 00:01:59,579
you can you know set up a local

00:01:58,140 --> 00:02:02,219
development environment and you want to

00:01:59,579 --> 00:02:06,840
also run unit tests because you love TD

00:02:02,219 --> 00:02:08,789
right or is it just on your CV so it

00:02:06,840 --> 00:02:12,930
seems like you kind of have covered

00:02:08,789 --> 00:02:13,890
everything but wait are we not missing

00:02:12,930 --> 00:02:17,640
anything else

00:02:13,890 --> 00:02:19,860
right how about CI and deployment where

00:02:17,640 --> 00:02:22,170
it is this app going to run like is it

00:02:19,860 --> 00:02:23,430
gonna just run in your basement you got

00:02:22,170 --> 00:02:25,110
a server in your basement I think most

00:02:23,430 --> 00:02:28,860
of us don't even have a basement to

00:02:25,110 --> 00:02:31,530
start with so obviously we have cloud so

00:02:28,860 --> 00:02:33,240
we can use cloud services but we still

00:02:31,530 --> 00:02:37,290
need some CI tool or something similar

00:02:33,240 --> 00:02:39,630
to run our test build deploy what have

00:02:37,290 --> 00:02:42,690
you so you need to choose something like

00:02:39,630 --> 00:02:44,280
that so imagine your service in the

00:02:42,690 --> 00:02:46,260
beginning is just one service so you

00:02:44,280 --> 00:02:50,220
have this Express application serving

00:02:46,260 --> 00:02:52,860
front-end so it's quite simple but

00:02:50,220 --> 00:02:54,209
clearly you are thinking back of your

00:02:52,860 --> 00:02:56,970
head that you might want to separate it

00:02:54,209 --> 00:02:58,860
to two different apps but we want to

00:02:56,970 --> 00:03:00,959
keep it simple for now because as

00:02:58,860 --> 00:03:07,320
engineers we actually love simplicity

00:03:00,959 --> 00:03:09,630
don't we so then what like where is this

00:03:07,320 --> 00:03:11,430
actually going to run so now you're kind

00:03:09,630 --> 00:03:14,459
of drawn in the overwhelming number of

00:03:11,430 --> 00:03:17,910
options you have which cloud provider is

00:03:14,459 --> 00:03:20,100
good should I use virtual machines or

00:03:17,910 --> 00:03:22,739
should I use containers I have played a

00:03:20,100 --> 00:03:25,290
little bit with containers or docker on

00:03:22,739 --> 00:03:26,670
my local so it should be you know easy

00:03:25,290 --> 00:03:29,670
enough so you think about it and

00:03:26,670 --> 00:03:32,280
obviously VMs used to be they approach

00:03:29,670 --> 00:03:33,570
back in the day you kind of baked images

00:03:32,280 --> 00:03:35,100
in the cloud and you know put your

00:03:33,570 --> 00:03:36,870
application there but you're thinking

00:03:35,100 --> 00:03:38,400
about all these options you're also

00:03:36,870 --> 00:03:40,950
thinking maybe there's a lot of pain

00:03:38,400 --> 00:03:43,440
with you know setting up containers or

00:03:40,950 --> 00:03:47,970
VM so maybe you can use a platform as a

00:03:43,440 --> 00:03:50,070
service I also can think about a you

00:03:47,970 --> 00:03:52,799
know all sorts of other options you can

00:03:50,070 --> 00:03:54,510
imagine this list goes on and on and you

00:03:52,799 --> 00:03:58,739
know there's more and more and more

00:03:54,510 --> 00:04:00,180
things you can do so are you not just

00:03:58,739 --> 00:04:03,180
overthinking this

00:04:00,180 --> 00:04:05,730
like imagine none of these things would

00:04:03,180 --> 00:04:08,310
really matter to your user like what if

00:04:05,730 --> 00:04:10,760
you have spent all this time to set up a

00:04:08,310 --> 00:04:13,620
very good sort of infrastructure

00:04:10,760 --> 00:04:16,320
local set up gold and infrastructure

00:04:13,620 --> 00:04:18,840
testing strategy monitoring all that

00:04:16,320 --> 00:04:20,010
jazz and once you really wrap it once

00:04:18,840 --> 00:04:21,840
you release your app you realize

00:04:20,010 --> 00:04:25,530
basically it's absolutely rubbish or

00:04:21,840 --> 00:04:27,800
useless imagine how much time you have

00:04:25,530 --> 00:04:31,470
wasted in this process

00:04:27,800 --> 00:04:34,350
so is there any hope like there's a

00:04:31,470 --> 00:04:35,580
question um and before I actually

00:04:34,350 --> 00:04:37,889
explore that

00:04:35,580 --> 00:04:41,340
speaking of amounts of time spent on

00:04:37,889 --> 00:04:43,800
setting up environments I can't remember

00:04:41,340 --> 00:04:46,470
a memory from years back when I was

00:04:43,800 --> 00:04:48,690
trying to deploy my first node.js app it

00:04:46,470 --> 00:04:51,810
was a bookmarking app so basically back

00:04:48,690 --> 00:04:55,350
in the days I had this free cloud

00:04:51,810 --> 00:04:57,270
service sort of cloud VM thing so what I

00:04:55,350 --> 00:04:59,729
would do was you know pushing the code

00:04:57,270 --> 00:05:00,000
to get I was using birth control so fair

00:04:59,729 --> 00:05:02,330
enough

00:05:00,000 --> 00:05:05,340
I mean I was in kind of copying things

00:05:02,330 --> 00:05:06,560
local to the server so I was I was

00:05:05,340 --> 00:05:08,970
basically pushing the codes to the

00:05:06,560 --> 00:05:11,370
version control I would then SSH into

00:05:08,970 --> 00:05:13,610
the server then pull it from there and

00:05:11,370 --> 00:05:16,860
then you know set up all these funny

00:05:13,610 --> 00:05:19,340
Linux services to allow running this in

00:05:16,860 --> 00:05:22,280
the background and you know demonize it

00:05:19,340 --> 00:05:25,650
don't want to go through that

00:05:22,280 --> 00:05:28,320
but basically you can imagine that for

00:05:25,650 --> 00:05:29,970
me was very very kind of time consuming

00:05:28,320 --> 00:05:31,349
to do all of this and but I was really

00:05:29,970 --> 00:05:33,330
enjoying it I thought this is the normal

00:05:31,349 --> 00:05:35,760
way of doing things and you have to it

00:05:33,330 --> 00:05:37,770
everything looks really cool until it

00:05:35,760 --> 00:05:40,470
would just break for no good reason and

00:05:37,770 --> 00:05:42,870
I had to go back like look at the log

00:05:40,470 --> 00:05:45,479
see what's going on restart things over

00:05:42,870 --> 00:05:47,280
and over again and eventually was

00:05:45,479 --> 00:05:48,740
happening was I realized I'm spending a

00:05:47,280 --> 00:05:51,330
lot of time just going through

00:05:48,740 --> 00:05:53,699
infrastructure work and not spending

00:05:51,330 --> 00:05:56,310
enough time on improving the application

00:05:53,699 --> 00:05:57,990
itself so fast forwarding today I'm

00:05:56,310 --> 00:06:00,570
thinking about how I would have

00:05:57,990 --> 00:06:03,120
approached the same problem what if

00:06:00,570 --> 00:06:05,789
there was an easier way to run and

00:06:03,120 --> 00:06:08,520
basically deploy the application whereby

00:06:05,789 --> 00:06:10,409
I was not kind of spending a lot of time

00:06:08,520 --> 00:06:14,009
on these type of things and I could

00:06:10,409 --> 00:06:16,409
literally quickly iterate on the

00:06:14,009 --> 00:06:18,360
application put it in front and put it

00:06:16,409 --> 00:06:20,070
in front of some actual user so they

00:06:18,360 --> 00:06:21,990
could actually you know have it play

00:06:20,070 --> 00:06:25,979
with it and I could validate some of my

00:06:21,990 --> 00:06:29,880
ideas and that is how I came across

00:06:25,979 --> 00:06:31,349
several is raise your hand if you

00:06:29,880 --> 00:06:33,419
haven't heard about servers I assume

00:06:31,349 --> 00:06:36,389
most people have done like I I guess

00:06:33,419 --> 00:06:38,550
maybe this is not the first talk in

00:06:36,389 --> 00:06:40,800
relation sterilized I have just in case

00:06:38,550 --> 00:06:42,659
put some sort of

00:06:40,800 --> 00:06:44,939
definition coming from the good old

00:06:42,659 --> 00:06:48,479
Wikipedia here I'm not gonna read it all

00:06:44,939 --> 00:06:51,119
but just like parts of it so the

00:06:48,479 --> 00:06:53,339
functions of service is a sort of a

00:06:51,119 --> 00:06:56,580
cloud computing service platform that

00:06:53,339 --> 00:06:58,879
allows you to develop run and manage

00:06:56,580 --> 00:07:00,930
applications without the complexity of

00:06:58,879 --> 00:07:03,869
worrying about infrastructure

00:07:00,930 --> 00:07:06,330
so in short Cerberus is a platform that

00:07:03,869 --> 00:07:08,029
allows running apps and focusing on

00:07:06,330 --> 00:07:09,899
building the application without

00:07:08,029 --> 00:07:12,539
worrying about infrastructure

00:07:09,899 --> 00:07:15,180
complexities there which is kind of

00:07:12,539 --> 00:07:17,159
typical to most apps so how does service

00:07:15,180 --> 00:07:19,080
work again this is not a talk about how

00:07:17,159 --> 00:07:22,110
service work but I just assume that

00:07:19,080 --> 00:07:25,589
maybe I come up with some sort of a high

00:07:22,110 --> 00:07:28,020
level definition or explanation so what

00:07:25,589 --> 00:07:29,939
happens is you basically build and

00:07:28,020 --> 00:07:32,039
implement your server-side code this is

00:07:29,939 --> 00:07:35,039
quite similar to any other sort of thing

00:07:32,039 --> 00:07:38,219
that you build you upload the code

00:07:35,039 --> 00:07:40,199
package it into the cloud and then it

00:07:38,219 --> 00:07:43,319
runs in some sort of stateless container

00:07:40,199 --> 00:07:45,539
if you like and how it gets invoked or

00:07:43,319 --> 00:07:47,930
executed is by just some events that

00:07:45,539 --> 00:07:50,339
could be different things and and

00:07:47,930 --> 00:07:52,379
generally speaking it's ephemeral so it

00:07:50,339 --> 00:07:54,149
means like the data is short-lived and

00:07:52,379 --> 00:07:55,889
if you want to persist anything you need

00:07:54,149 --> 00:07:58,229
to kind of worry about it in a different

00:07:55,889 --> 00:08:00,779
way so the some of the very fundamental

00:07:58,229 --> 00:08:02,459
benefits of using several s are reduced

00:08:00,779 --> 00:08:04,759
cost this is the thing that it promises

00:08:02,459 --> 00:08:08,039
to give you it could give you that

00:08:04,759 --> 00:08:10,050
because in you know in principle you

00:08:08,039 --> 00:08:12,539
don't have like several server idle

00:08:10,050 --> 00:08:15,629
times and you know you just paper kind

00:08:12,539 --> 00:08:17,069
of usage or execution and the other

00:08:15,629 --> 00:08:21,019
thing is the auto scaling which comes

00:08:17,069 --> 00:08:25,009
out box so that's about as far as I go

00:08:21,019 --> 00:08:28,860
about describing how service work so

00:08:25,009 --> 00:08:31,289
should we care about this and what does

00:08:28,860 --> 00:08:33,419
that mean for us as JavaScript

00:08:31,289 --> 00:08:36,240
developers or front-end developers or

00:08:33,419 --> 00:08:41,430
general developers let me tell you a

00:08:36,240 --> 00:08:43,310
story at funning circle we do hackathons

00:08:41,430 --> 00:08:45,259
every once in a while

00:08:43,310 --> 00:08:47,509
so what happened was during the last

00:08:45,259 --> 00:08:49,879
hackathon a group of us came up with

00:08:47,509 --> 00:08:52,790
this idea of building a smart image

00:08:49,879 --> 00:08:55,639
resizer smart because he could detect

00:08:52,790 --> 00:08:58,699
faces in the image and then what it does

00:08:55,639 --> 00:09:01,100
is it could crop the image by taking

00:08:58,699 --> 00:09:03,259
into account where the face is and kind

00:09:01,100 --> 00:09:07,129
of position the face in a desired sort

00:09:03,259 --> 00:09:09,740
of place in the output when we initially

00:09:07,129 --> 00:09:12,949
came up with this idea the question

00:09:09,740 --> 00:09:15,649
raised was that can we manage to build

00:09:12,949 --> 00:09:16,970
test deploy this all of this in less

00:09:15,649 --> 00:09:19,790
than two days because out that was the

00:09:16,970 --> 00:09:22,430
kind of hackathons time that was given

00:09:19,790 --> 00:09:23,870
to us and clearly we did not have any

00:09:22,430 --> 00:09:26,180
sort of time for setting up

00:09:23,870 --> 00:09:29,300
infrastructure or any any other things

00:09:26,180 --> 00:09:32,329
so we had to clearly just focus on the

00:09:29,300 --> 00:09:34,730
code and the logic so we knew this was

00:09:32,329 --> 00:09:37,160
going to be written in no js' this is

00:09:34,730 --> 00:09:39,470
not because we just like no genius is

00:09:37,160 --> 00:09:43,699
because as a team we felt we're more

00:09:39,470 --> 00:09:46,100
familiar with JavaScript stagg and what

00:09:43,699 --> 00:09:47,629
happened was also knowing that initially

00:09:46,100 --> 00:09:49,910
we have no idea about how the image

00:09:47,629 --> 00:09:53,300
resizer worked it was a bit of a kind of

00:09:49,910 --> 00:09:56,540
a challenge for us to be able to kind of

00:09:53,300 --> 00:09:58,129
find a solution for you know analyzing

00:09:56,540 --> 00:09:59,899
the image and finding the face so we

00:09:58,129 --> 00:10:02,720
thought that might kind of be a rabbit

00:09:59,899 --> 00:10:05,769
hole and take a lot of time and then one

00:10:02,720 --> 00:10:08,740
thing you might ask is why do we kind of

00:10:05,769 --> 00:10:10,399
choose to build a image resizer right

00:10:08,740 --> 00:10:12,379
because we know there are other

00:10:10,399 --> 00:10:16,189
solutions out there and the simple

00:10:12,379 --> 00:10:17,990
answer is saving money we already use

00:10:16,189 --> 00:10:20,180
AWS and we did not want to pay another

00:10:17,990 --> 00:10:22,160
bill also we needed some sort of

00:10:20,180 --> 00:10:24,529
customization for the particular use

00:10:22,160 --> 00:10:28,370
case we'd have we had in funny circles

00:10:24,529 --> 00:10:31,790
so we wanted to build it in a customized

00:10:28,370 --> 00:10:34,910
way and we also did some sort of you

00:10:31,790 --> 00:10:38,149
know budget forecasting thing that comes

00:10:34,910 --> 00:10:40,429
from AWS and we realized that we could

00:10:38,149 --> 00:10:40,879
save eight times more in terms of the

00:10:40,429 --> 00:10:42,470
cost

00:10:40,879 --> 00:10:44,240
comparing to another service called

00:10:42,470 --> 00:10:46,089
cloud inari I don't know if you anyone

00:10:44,240 --> 00:10:48,019
heard about binary so it's kind of a

00:10:46,089 --> 00:10:52,129
software as a service that gives you the

00:10:48,019 --> 00:10:54,559
sort of similar feature set and honestly

00:10:52,129 --> 00:10:57,010
I mean the numbers are there but I don't

00:10:54,559 --> 00:10:59,180
really trust Amazon with number

00:10:57,010 --> 00:11:01,340
but I mean there was a business case

00:10:59,180 --> 00:11:06,770
there clearly is if if not many times

00:11:01,340 --> 00:11:08,210
maybe like two times so containers of

00:11:06,770 --> 00:11:11,000
service was another thing although we

00:11:08,210 --> 00:11:12,620
were kind of keen on several s what we

00:11:11,000 --> 00:11:14,660
actually initially considered maybe we

00:11:12,620 --> 00:11:16,340
can use containers but then straight

00:11:14,660 --> 00:11:18,410
away we realized we've got only two days

00:11:16,340 --> 00:11:20,570
and we don't have a lot of time to set

00:11:18,410 --> 00:11:21,920
things up and imagining every time you

00:11:20,570 --> 00:11:24,170
have to deploy changes we need to build

00:11:21,920 --> 00:11:27,140
a new image things like that so we went

00:11:24,170 --> 00:11:29,600
for service and because we were using

00:11:27,140 --> 00:11:31,910
AWS we kind of decided that obviously we

00:11:29,600 --> 00:11:36,290
decided it was there a diverse lamda was

00:11:31,910 --> 00:11:38,030
the kind of Amazon's function as a

00:11:36,290 --> 00:11:42,830
service kind of platform so we chose

00:11:38,030 --> 00:11:44,300
always a dove is lamda but basically

00:11:42,830 --> 00:11:46,310
there was another requirement we had

00:11:44,300 --> 00:11:47,390
which was because this was a serve like

00:11:46,310 --> 00:11:49,610
a resizer service

00:11:47,390 --> 00:11:52,130
it had to be exposing some web pages and

00:11:49,610 --> 00:11:55,280
you know used and we needed some sort of

00:11:52,130 --> 00:11:58,280
HTTP server URL for this or API

00:11:55,280 --> 00:12:00,320
interface so we knew that you could do

00:11:58,280 --> 00:12:02,480
it separately on Amazon but we wanted to

00:12:00,320 --> 00:12:04,220
find a tool which would abstract away

00:12:02,480 --> 00:12:08,690
all the complexity of having an API

00:12:04,220 --> 00:12:13,000
which then uses lamda so basically we

00:12:08,690 --> 00:12:15,140
came across service framework so I

00:12:13,000 --> 00:12:17,030
didn't if anyone has used service

00:12:15,140 --> 00:12:20,089
framework it could raise their hands

00:12:17,030 --> 00:12:22,130
okay that's pretty good so basically

00:12:20,089 --> 00:12:24,860
service framework is an open source

00:12:22,130 --> 00:12:27,530
software that allows you to build

00:12:24,860 --> 00:12:30,020
compile and package you know service

00:12:27,530 --> 00:12:31,850
applications and it kind of abstracts

00:12:30,020 --> 00:12:35,390
away some of the complexities that are

00:12:31,850 --> 00:12:37,580
necessary to set them up and it's kind

00:12:35,390 --> 00:12:39,740
of quite cloud agnostic so you can use

00:12:37,580 --> 00:12:44,120
service framework with most of the cloud

00:12:39,740 --> 00:12:46,490
providers and what it usually does is

00:12:44,120 --> 00:12:48,410
allows you to set up events those events

00:12:46,490 --> 00:12:51,020
can be anything any type of events it

00:12:48,410 --> 00:12:54,170
could be like a cron like schedule event

00:12:51,020 --> 00:12:56,630
it could be like a HTTP event and these

00:12:54,170 --> 00:13:00,500
events will in turn invoke or kind of

00:12:56,630 --> 00:13:01,130
execute lambda functions which are your

00:13:00,500 --> 00:13:04,370
actual

00:13:01,130 --> 00:13:05,120
business logic it looks very simple

00:13:04,370 --> 00:13:07,790
right

00:13:05,120 --> 00:13:09,600
but if you think about it there is a lot

00:13:07,790 --> 00:13:12,360
that goes into it

00:13:09,600 --> 00:13:13,890
now I'm not going to have a deep dive

00:13:12,360 --> 00:13:17,040
into the service in this talk because

00:13:13,890 --> 00:13:20,790
this is not the service framework in his

00:13:17,040 --> 00:13:22,770
talk is this is not what is planned but

00:13:20,790 --> 00:13:24,810
all I can tell you in terms of how you

00:13:22,770 --> 00:13:26,430
set it up is you you have to configure

00:13:24,810 --> 00:13:30,060
it there's this sort of service Yama

00:13:26,430 --> 00:13:32,280
file which allows you to define the sort

00:13:30,060 --> 00:13:37,680
of functions definitions and also the

00:13:32,280 --> 00:13:39,600
events and then this maps into your sets

00:13:37,680 --> 00:13:41,660
of functions that you define so these

00:13:39,600 --> 00:13:43,800
functions are actually the handlers

00:13:41,660 --> 00:13:46,530
serverless framework and generally most

00:13:43,800 --> 00:13:50,010
service platforms support multiple

00:13:46,530 --> 00:13:53,460
runtimes in this case we use nodejs

00:13:50,010 --> 00:13:55,950
and as you can see the way works is an

00:13:53,460 --> 00:13:59,790
event comes in and then a response comes

00:13:55,950 --> 00:14:01,560
out you might say that's easy but we

00:13:59,790 --> 00:14:04,800
actually had our challenges to make it

00:14:01,560 --> 00:14:07,260
all work so when you decided we're going

00:14:04,800 --> 00:14:10,280
to go for the service framework we came

00:14:07,260 --> 00:14:12,600
up with some sort of architecture and

00:14:10,280 --> 00:14:15,780
I'm going to explain this architecture

00:14:12,600 --> 00:14:17,430
from a user journey perspective so what

00:14:15,780 --> 00:14:20,220
happens is you have this user on the

00:14:17,430 --> 00:14:21,570
sort of wrestling button the user could

00:14:20,220 --> 00:14:24,330
be your designer it could be like a

00:14:21,570 --> 00:14:26,430
normal developer they will upload some

00:14:24,330 --> 00:14:29,010
sort of an image into like an image

00:14:26,430 --> 00:14:32,510
storage in this case was s3 Amazon

00:14:29,010 --> 00:14:36,230
storage then they will kind of use the

00:14:32,510 --> 00:14:38,490
CDN URL which is kind of a caching URL

00:14:36,230 --> 00:14:41,760
provided with the path to their image

00:14:38,490 --> 00:14:44,520
and they put that URL as well as

00:14:41,760 --> 00:14:46,080
whatever sort of dimensions they have in

00:14:44,520 --> 00:14:48,450
mind like the width and height of the

00:14:46,080 --> 00:14:52,230
crop version they provide us query

00:14:48,450 --> 00:14:53,970
params to the URL and basically they put

00:14:52,230 --> 00:14:56,040
it in a web page so what happens is when

00:14:53,970 --> 00:14:58,740
this request goes out it goes to the

00:14:56,040 --> 00:15:00,830
cloud front the CDN solution it will

00:14:58,740 --> 00:15:03,570
either be served by cloud from which is

00:15:00,830 --> 00:15:05,520
in cases cache before but if it's not

00:15:03,570 --> 00:15:08,520
cached it's full kind of fall back and

00:15:05,520 --> 00:15:11,130
go back to the actual origin which cloud

00:15:08,520 --> 00:15:12,900
front is configure to in this case that

00:15:11,130 --> 00:15:15,720
origin is our Seles stack and

00:15:12,900 --> 00:15:18,360
application so what happens is it prints

00:15:15,720 --> 00:15:21,000
request goes to the API the smart

00:15:18,360 --> 00:15:22,250
resizer API which will then as I

00:15:21,000 --> 00:15:24,470
explained earlier

00:15:22,250 --> 00:15:28,100
it will create HTTP events and it will

00:15:24,470 --> 00:15:29,990
trigger your lambda function now in this

00:15:28,100 --> 00:15:32,950
case the lambda function will pull the

00:15:29,990 --> 00:15:37,070
image from your storage so both the

00:15:32,950 --> 00:15:39,680
developer and your lambda function have

00:15:37,070 --> 00:15:42,220
access to the storage it will pull the

00:15:39,680 --> 00:15:47,180
image and then it will kind of make a

00:15:42,220 --> 00:15:49,250
call to your image analyzer ai which

00:15:47,180 --> 00:15:52,160
will then analyze this image and come up

00:15:49,250 --> 00:15:53,990
with all the faces they recognize in

00:15:52,160 --> 00:15:56,150
there it will come up with some sort of

00:15:53,990 --> 00:15:57,440
metadata back to your service yourselves

00:15:56,150 --> 00:15:59,360
to take that into account and it will

00:15:57,440 --> 00:16:03,290
crop your image and then it will return

00:15:59,360 --> 00:16:06,230
the sort of cropped binary back to the

00:16:03,290 --> 00:16:07,910
API and an API intent to the cloud front

00:16:06,230 --> 00:16:09,770
and CloudFront will cache it and then

00:16:07,910 --> 00:16:11,720
you will see the crop version on the

00:16:09,770 --> 00:16:14,750
webpage so that's more or less how it

00:16:11,720 --> 00:16:20,000
works over engineered you might say

00:16:14,750 --> 00:16:23,090
right think so to be fair we did think

00:16:20,000 --> 00:16:24,890
about that in the first place and as our

00:16:23,090 --> 00:16:28,070
sort of Minimum Viable version we did

00:16:24,890 --> 00:16:30,610
think that we might not managed to do

00:16:28,070 --> 00:16:34,250
the caching nor we could potentially

00:16:30,610 --> 00:16:37,220
finish the image allies ai but guess

00:16:34,250 --> 00:16:39,290
what happened we managed in time we got

00:16:37,220 --> 00:16:41,330
enough time to build all of it and it

00:16:39,290 --> 00:16:44,060
was really good

00:16:41,330 --> 00:16:45,920
here's just a very simple example on the

00:16:44,060 --> 00:16:48,440
left you got this original image you see

00:16:45,920 --> 00:16:52,760
our favorite character Captain Galactic

00:16:48,440 --> 00:16:54,320
it's like our branding superhero and

00:16:52,760 --> 00:16:56,660
then you go to the crop version of it on

00:16:54,320 --> 00:16:59,089
the right you see one normal sort of

00:16:56,660 --> 00:17:02,960
crop like serve resize version and the

00:16:59,089 --> 00:17:05,900
one on the sort of towards in the end is

00:17:02,960 --> 00:17:08,000
the actual smart version of it which

00:17:05,900 --> 00:17:12,110
actually recognizes Captain Galactic as

00:17:08,000 --> 00:17:15,949
a face and crops around it quickly

00:17:12,110 --> 00:17:18,589
describing how we test employed and did

00:17:15,949 --> 00:17:20,959
the integration I think testing wise we

00:17:18,589 --> 00:17:24,230
use this plugin from several Islamic

00:17:20,959 --> 00:17:25,430
colleagues others offline essentially we

00:17:24,230 --> 00:17:27,620
didn't do any automated tests because

00:17:25,430 --> 00:17:31,160
you didn't have time it's a shame but

00:17:27,620 --> 00:17:33,670
this service often allowed us to run the

00:17:31,160 --> 00:17:36,100
service locally and try to you know

00:17:33,670 --> 00:17:37,750
build a code on top of it and

00:17:36,100 --> 00:17:39,970
managed to have some sort of exploratory

00:17:37,750 --> 00:17:42,900
testing and then we couldn't deploy and

00:17:39,970 --> 00:17:45,090
see how it works in the in the cloud

00:17:42,900 --> 00:17:47,830
deployment wise we didn't set up a CI

00:17:45,090 --> 00:17:50,590
what we did was basically just relied on

00:17:47,830 --> 00:17:52,530
several s frameworks CLI deployments

00:17:50,590 --> 00:17:56,080
which was quite easy to use the only

00:17:52,530 --> 00:17:59,410
additional bit was using a sort of

00:17:56,080 --> 00:18:01,660
running this in a note 8.1 container

00:17:59,410 --> 00:18:03,700
just to make sure that we use the same

00:18:01,660 --> 00:18:05,710
runtime version as what the ADA was

00:18:03,700 --> 00:18:07,090
lambda was using because sometimes you

00:18:05,710 --> 00:18:10,480
get some funny things when you don't do

00:18:07,090 --> 00:18:12,580
that and the last thing was our

00:18:10,480 --> 00:18:14,799
integration with with the image analyzer

00:18:12,580 --> 00:18:17,500
ai this integration was with this

00:18:14,799 --> 00:18:19,270
service called a device recognition so

00:18:17,500 --> 00:18:23,350
it obvious recognition just that you

00:18:19,270 --> 00:18:26,320
know as a sort of API managed service in

00:18:23,350 --> 00:18:28,840
Amazon allows you to make deep learning

00:18:26,320 --> 00:18:31,659
image analysis so it has pre trained

00:18:28,840 --> 00:18:34,030
models that are already there running

00:18:31,659 --> 00:18:37,000
and it will give you very very useful

00:18:34,030 --> 00:18:39,039
kind of information I think our use case

00:18:37,000 --> 00:18:41,650
was really simple so basically we were

00:18:39,039 --> 00:18:44,860
just wanted to detect faces and there's

00:18:41,650 --> 00:18:47,020
a lot more you can do with this we have

00:18:44,860 --> 00:18:49,690
some challenges namely we won it's our

00:18:47,020 --> 00:18:52,600
response to the binary because this is

00:18:49,690 --> 00:18:54,370
basically image resizer it has to return

00:18:52,600 --> 00:18:57,159
a new image right and this is not plain

00:18:54,370 --> 00:18:59,049
text usually when you write lambda

00:18:57,159 --> 00:19:01,440
functions or use lambda you kind of are

00:18:59,049 --> 00:19:05,080
either creating JSON API s or XML or

00:19:01,440 --> 00:19:07,539
like a little HTML whatever plain text

00:19:05,080 --> 00:19:09,190
so we wanted binary and it was initially

00:19:07,539 --> 00:19:11,260
a bit of a challenge but then we kind of

00:19:09,190 --> 00:19:13,210
researched and found the right plugins

00:19:11,260 --> 00:19:15,250
the good thing with service framework is

00:19:13,210 --> 00:19:16,990
there's so many additional plugins that

00:19:15,250 --> 00:19:19,299
are get attached to it and you can

00:19:16,990 --> 00:19:22,059
develop plugins they work like hooks

00:19:19,299 --> 00:19:25,270
they run during building deployments and

00:19:22,059 --> 00:19:27,130
different sort of stages of the service

00:19:25,270 --> 00:19:28,270
serve lifecycle and I think I'm not

00:19:27,130 --> 00:19:30,700
going to go through that but generally

00:19:28,270 --> 00:19:34,929
just search service framework plugins

00:19:30,700 --> 00:19:38,530
quite interesting so what did we learn

00:19:34,929 --> 00:19:40,710
as a team I think the most valuable

00:19:38,530 --> 00:19:44,500
thing we learn was that we realized that

00:19:40,710 --> 00:19:46,510
with little or no op skill we can build

00:19:44,500 --> 00:19:48,610
these applications use Excel as

00:19:46,510 --> 00:19:49,530
framework I can give you some context

00:19:48,610 --> 00:19:51,060
because the

00:19:49,530 --> 00:19:54,510
team which was working on this we were

00:19:51,060 --> 00:19:56,910
mainly like more skilled in the front

00:19:54,510 --> 00:19:59,940
and side we had little or some

00:19:56,910 --> 00:20:01,110
experience on no js' but let's say very

00:19:59,940 --> 00:20:04,140
very little experience and

00:20:01,110 --> 00:20:06,570
infrastructure and yet we realized that

00:20:04,140 --> 00:20:09,780
just keeping our own skill set we were

00:20:06,570 --> 00:20:11,970
able to build applications which work

00:20:09,780 --> 00:20:15,270
and train and we could deploy it and it

00:20:11,970 --> 00:20:17,730
could scale and work perfectly the

00:20:15,270 --> 00:20:20,490
second thing was we were able to focus

00:20:17,730 --> 00:20:25,140
on real value and by that I mean we

00:20:20,490 --> 00:20:27,090
basically were able to because of how

00:20:25,140 --> 00:20:30,300
the service framework work abstract away

00:20:27,090 --> 00:20:32,280
all the sort of difficulties and

00:20:30,300 --> 00:20:34,350
complexity the infrastructure and focus

00:20:32,280 --> 00:20:36,660
on the code so we were adding small bits

00:20:34,350 --> 00:20:39,060
of code doing a deployment there was a

00:20:36,660 --> 00:20:41,040
very short lead time before pushing the

00:20:39,060 --> 00:20:42,990
code and drying the deployment so it was

00:20:41,040 --> 00:20:46,680
quite quick we could get really good

00:20:42,990 --> 00:20:48,480
feedback and this really helped us to be

00:20:46,680 --> 00:20:49,890
able to cover everything that he had

00:20:48,480 --> 00:20:51,750
actually planned to build which was

00:20:49,890 --> 00:20:54,180
really good and the other thing is this

00:20:51,750 --> 00:20:56,400
quite we realized that is quite easy to

00:20:54,180 --> 00:20:58,410
extend with features so not only we did

00:20:56,400 --> 00:21:01,260
manage to build his features which were

00:20:58,410 --> 00:21:03,780
the functional ones but we also were

00:21:01,260 --> 00:21:05,700
able to just simply add a CDN cache

00:21:03,780 --> 00:21:08,220
quite easily in a matter of hours soon

00:21:05,700 --> 00:21:10,560
which something that could not be that

00:21:08,220 --> 00:21:13,500
simple sometimes when you want to you

00:21:10,560 --> 00:21:17,040
know add some caching for API was quite

00:21:13,500 --> 00:21:21,000
seamless and we actually realized that

00:21:17,040 --> 00:21:25,020
it's quite extensible which was really

00:21:21,000 --> 00:21:26,490
good so instead of as perfect like

00:21:25,020 --> 00:21:29,370
there's a question like is there any

00:21:26,490 --> 00:21:31,020
dark side to service there's some three

00:21:29,370 --> 00:21:33,540
points I'm going to touch on which are

00:21:31,020 --> 00:21:35,040
kind of maybe some things that you

00:21:33,540 --> 00:21:37,710
already know but I'm just gonna review

00:21:35,040 --> 00:21:40,320
them first of all is not fit for all

00:21:37,710 --> 00:21:42,210
purposes when you're kind of building

00:21:40,320 --> 00:21:44,880
something quite complex which kind of

00:21:42,210 --> 00:21:47,780
needs particular types of integrations

00:21:44,880 --> 00:21:50,370
or it's doing something quite heavy or

00:21:47,780 --> 00:21:52,950
time-consuming you probably could not

00:21:50,370 --> 00:21:54,990
use several s because first of all it

00:21:52,950 --> 00:21:57,330
has limitations executions the second of

00:21:54,990 --> 00:21:59,400
all it might just cost you a fortune I

00:21:57,330 --> 00:22:01,890
can give another example because what

00:21:59,400 --> 00:22:03,360
happened was we like few months later we

00:22:01,890 --> 00:22:06,390
had a different requirement to Bill

00:22:03,360 --> 00:22:08,550
another service it was a no J service to

00:22:06,390 --> 00:22:11,190
integrate with some message broker like

00:22:08,550 --> 00:22:13,500
consume some messages and then probably

00:22:11,190 --> 00:22:15,660
some messages and for that particular

00:22:13,500 --> 00:22:17,040
use case we couldn't also use service

00:22:15,660 --> 00:22:22,290
because we wanted something to anymore

00:22:17,040 --> 00:22:23,970
stateful and also basically kind of run

00:22:22,290 --> 00:22:26,820
as a process rather than something that

00:22:23,970 --> 00:22:30,600
just is ephemeral and runs and dies so

00:22:26,820 --> 00:22:34,500
that was one of the examples um the

00:22:30,600 --> 00:22:35,970
other thing is I think given like what

00:22:34,500 --> 00:22:38,850
service framework does and it kind of

00:22:35,970 --> 00:22:40,770
eliminates a lot of kind of complexity

00:22:38,850 --> 00:22:41,850
as an infrastructure still your thing is

00:22:40,770 --> 00:22:45,000
necessary to have some understanding

00:22:41,850 --> 00:22:46,350
about cloud infrastructure like as long

00:22:45,000 --> 00:22:48,300
as you are in a sort of happy path

00:22:46,350 --> 00:22:50,100
everything works fine it's good but as

00:22:48,300 --> 00:22:52,620
soon as you come across some problems or

00:22:50,100 --> 00:22:55,140
troubles then you kind of need to have

00:22:52,620 --> 00:22:57,060
some ideas about various services that

00:22:55,140 --> 00:22:59,940
you're using things like ADA with lambda

00:22:57,060 --> 00:23:01,590
or API gateway or depending on what

00:22:59,940 --> 00:23:03,240
cloud provider you use you kind of need

00:23:01,590 --> 00:23:06,630
a little bit of understanding there and

00:23:03,240 --> 00:23:09,180
the last thing is a vendor lock-in this

00:23:06,630 --> 00:23:10,740
is compared to what you get from the

00:23:09,180 --> 00:23:12,780
container so you with containers you

00:23:10,740 --> 00:23:15,780
create one docker image this docker

00:23:12,780 --> 00:23:17,340
image could be used everywhere it's sort

00:23:15,780 --> 00:23:20,010
of agnostic to where you run it

00:23:17,340 --> 00:23:21,990
whereas when with sort of function and

00:23:20,010 --> 00:23:24,320
service platforms each cloud provider

00:23:21,990 --> 00:23:26,430
might have their own flavor they might

00:23:24,320 --> 00:23:28,170
define different interfaces which are

00:23:26,430 --> 00:23:30,660
not necessarily compatible so there's no

00:23:28,170 --> 00:23:33,270
such thing as a standard standardization

00:23:30,660 --> 00:23:35,490
in sort of function as a service

00:23:33,270 --> 00:23:36,810
platforms and that might mean that you

00:23:35,490 --> 00:23:39,390
need to make changes if you want same

00:23:36,810 --> 00:23:43,830
from Amazon to Google or something like

00:23:39,390 --> 00:23:45,780
that and finally I just want to say that

00:23:43,830 --> 00:23:47,790
whatever I spoke about today was

00:23:45,780 --> 00:23:50,700
literally around some of the examples

00:23:47,790 --> 00:23:52,830
and it just represented the very sort of

00:23:50,700 --> 00:23:54,390
narrow relatively limited experience we

00:23:52,830 --> 00:23:56,670
have a service so I don't think there's

00:23:54,390 --> 00:23:58,500
any right or wrong in this like whether

00:23:56,670 --> 00:24:02,340
you want you should use service or not

00:23:58,500 --> 00:24:05,070
should service but what I really like to

00:24:02,340 --> 00:24:07,590
leave you with is the thought of all the

00:24:05,070 --> 00:24:10,860
potential things that you can do with

00:24:07,590 --> 00:24:12,480
Sarah less if you come across some ideas

00:24:10,860 --> 00:24:16,050
on building you tools or apps

00:24:12,480 --> 00:24:17,130
it just helps a lot with solving a lot

00:24:16,050 --> 00:24:20,520
of the problems that you need to

00:24:17,130 --> 00:24:23,220
and I think now it's a very very good

00:24:20,520 --> 00:24:25,710
time to play and experiment with cell s

00:24:23,220 --> 00:24:28,140
I think now it's the right time to just

00:24:25,710 --> 00:24:29,910
go further with your ideas thank you

00:24:28,140 --> 00:24:34,299
very much

00:24:29,910 --> 00:24:34,299

YouTube URL: https://www.youtube.com/watch?v=AYM_4sDh3Lg


