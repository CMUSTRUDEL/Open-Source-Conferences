Title: JS Monthly #14   Quadtree & High Performance   May 2021
Publication date: 2021-05-25
Playlist: JS Monthly London
Description: 
	@JSMonthlyLondon
https://www.meetup.com/js-monthly/

Here's the agenda!

Welcome and community news

Quadtree and its implementation on Maps using D3 by Gunaseelan Narayanan

Have you noticed in a World map, where markers are used to represent something? The markers when seen at the beginning appear close between two locations and when zoomed in, appear far away. If the cities are too close they can even overlap each other. It will look ugly, right? In this talk we will explore the Quadtree approach which can be used to search for geometric points in a plane accurately and instantly and how this can be used in clustering.

Guna is a Front End Developer working at JFrog India in Bangalore. He started his career with Mindtree as a Junior Engineer. He has experience in many front end frameworks and specialises in Data Viz using D3. He is an open source contributor in Billboard.js which is a JavaScript chart library, based on D3. When he is not coding he is a sports enthusiasts and a gamer. Bmedium.com/@gunaseel


Building a high performance financial web application with JavaScript by Pawel Badenski

A short summary of one team's journey to run a real-time financial calculation engine in the browser using JavaScript. Buffet 🍔 🍟 🥤 style (as in food, not Warren) presentation with something for everyone - React & Redux, V8 optimisations, monads and evolving simple design.

Pawel is a cofounder & CTO @ Pricing Monkey and has been a coder for nearly 15 years. Performance engineering has been one of his biggest passions in software. He got hooked many years ago when working on a Java-based airline scheduling system. Then he switched his focus to JavaScript and the world of browsers. One thing stays the same, as my former colleague said to me many years ago "Contrary to what many people think - performance engineering is hard."

00:00 Pre- roll
7:15 Intro
17:15 Quadtree and its implementation on Maps using D3
35:55 Q&A
49:03 Building a high performance financial web application with JavaScript
01:23:00 Q&A

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:23,840 --> 00:00:26,890
[Music]

00:00:28,840 --> 00:01:11,349
so

00:00:31,510 --> 00:01:11,349
[Music]

00:01:15,650 --> 00:02:08,040
[Music]

00:02:04,950 --> 00:02:08,040
[Applause]

00:02:08,060 --> 00:02:37,840
[Music]

00:02:34,840 --> 00:02:37,840
so

00:02:42,510 --> 00:02:45,560
[Music]

00:02:48,840 --> 00:03:29,790
so

00:02:50,180 --> 00:03:29,790
[Music]

00:03:34,320 --> 00:04:01,920
[Music]

00:03:59,840 --> 00:04:01,920
you

00:04:02,320 --> 00:04:26,699
[Music]

00:04:23,610 --> 00:04:26,699
[Applause]

00:04:26,840 --> 00:04:55,360
so

00:04:29,160 --> 00:04:55,360
[Music]

00:05:01,180 --> 00:05:11,010
[Music]

00:05:08,840 --> 00:05:48,449
so

00:05:11,010 --> 00:05:48,449
[Music]

00:05:52,980 --> 00:06:05,920
[Music]

00:06:04,840 --> 00:06:19,269
do

00:06:05,920 --> 00:06:19,269
[Music]

00:06:19,840 --> 00:06:42,280
you

00:06:20,990 --> 00:06:45,370
[Music]

00:06:42,280 --> 00:06:45,370
[Applause]

00:06:45,390 --> 00:06:49,840
[Music]

00:06:46,840 --> 00:06:49,840
so

00:06:51,120 --> 00:07:14,019
[Music]

00:07:14,840 --> 00:07:18,960
one thanks

00:07:16,400 --> 00:07:20,720
and it's um yeah it's actually like

00:07:18,960 --> 00:07:22,479
being uh you know part of a

00:07:20,720 --> 00:07:24,240
professional broadcast well i mean of

00:07:22,479 --> 00:07:24,880
course this is a professional broadcast

00:07:24,240 --> 00:07:28,479
right

00:07:24,880 --> 00:07:31,440
but uh yeah i really like having the

00:07:28,479 --> 00:07:34,080
queue in it's great uh yeah thanks alex

00:07:31,440 --> 00:07:35,199
um yeah welcome everyone uh really good

00:07:34,080 --> 00:07:38,479
to see

00:07:35,199 --> 00:07:41,599
uh yeah see so many people joining us

00:07:38,479 --> 00:07:43,039
on this slightly cool summer's evening

00:07:41,599 --> 00:07:46,160
i guess if the weather was gorgeous

00:07:43,039 --> 00:07:46,160
there'd be fewer of you

00:07:46,560 --> 00:07:49,840
yeah we got two really great talks lined

00:07:48,879 --> 00:07:53,280
up for this evening

00:07:49,840 --> 00:07:55,840
um so yeah firstly we have uh gunner

00:07:53,280 --> 00:07:58,080
narayanan who's going to talk to you

00:07:55,840 --> 00:07:58,639
about quad 3 and its implementation on

00:07:58,080 --> 00:08:03,120
maps

00:07:58,639 --> 00:08:06,639
using d3 and the visualization library

00:08:03,120 --> 00:08:08,639
and then after the break we have

00:08:06,639 --> 00:08:11,280
building high performance financial web

00:08:08,639 --> 00:08:13,759
applications with javascript by

00:08:11,280 --> 00:08:15,919
pavel badinsky who i don't think has

00:08:13,759 --> 00:08:18,560
joined quite yet but is going to

00:08:15,919 --> 00:08:21,199
hopefully make an appearance um after

00:08:18,560 --> 00:08:21,199
goodness talk

00:08:21,599 --> 00:08:28,000
so yeah that was the high level

00:08:24,960 --> 00:08:29,280
that was the high level um agenda the

00:08:28,000 --> 00:08:30,960
slightly more detailed one

00:08:29,280 --> 00:08:32,640
is i'm just going to give a bit of a

00:08:30,960 --> 00:08:35,680
intro about some industry news

00:08:32,640 --> 00:08:38,240
which is hopefully of interest to you uh

00:08:35,680 --> 00:08:39,919
and then after gunners talk we'll have a

00:08:38,240 --> 00:08:41,200
short comfort break probably five

00:08:39,919 --> 00:08:43,919
minutes or so

00:08:41,200 --> 00:08:45,680
uh and after both talks we'll have a q a

00:08:43,919 --> 00:08:47,279
so we'll leave about five minutes for

00:08:45,680 --> 00:08:48,880
people to ask questions you can do that

00:08:47,279 --> 00:08:53,600
in the chat uh

00:08:48,880 --> 00:08:55,920
or just a mute and uh yeah and ask away

00:08:53,600 --> 00:08:58,399
so before i dive into the industry news

00:08:55,920 --> 00:09:01,200
i've just got to thank our sponsor

00:08:58,399 --> 00:09:02,160
pusher who've sponsored us for years now

00:09:01,200 --> 00:09:05,200
um

00:09:02,160 --> 00:09:07,519
yeah alex has um become i guess

00:09:05,200 --> 00:09:09,360
yeah really important partner for us

00:09:07,519 --> 00:09:11,120
especially with online

00:09:09,360 --> 00:09:12,399
so previously we used to film the events

00:09:11,120 --> 00:09:14,080
and then we would publish that on

00:09:12,399 --> 00:09:16,320
youtube and people could watch

00:09:14,080 --> 00:09:17,200
watch the material back now it's

00:09:16,320 --> 00:09:20,080
obviously

00:09:17,200 --> 00:09:22,240
critical that we have um yeah a zoom

00:09:20,080 --> 00:09:23,440
link that we can use it doesn't expire

00:09:22,240 --> 00:09:26,080
after 40 minutes

00:09:23,440 --> 00:09:27,360
and then we're able to stream to youtube

00:09:26,080 --> 00:09:30,640
and uh

00:09:27,360 --> 00:09:32,640
yeah and that um yeah you're all able to

00:09:30,640 --> 00:09:34,080
to join and participate so yeah massive

00:09:32,640 --> 00:09:35,680
thanks to pusher for that

00:09:34,080 --> 00:09:37,920
um for those of you that don't know what

00:09:35,680 --> 00:09:41,040
pusher is uh it's um a set of

00:09:37,920 --> 00:09:44,080
um uh real-time data

00:09:41,040 --> 00:09:44,560
uh apis there are well two products i

00:09:44,080 --> 00:09:46,160
believe

00:09:44,560 --> 00:09:47,920
now is that right alex so there's um

00:09:46,160 --> 00:09:51,040
there's channels and beams

00:09:47,920 --> 00:09:53,920
uh we'll give an updated uh

00:09:51,040 --> 00:09:54,880
slide or you know a slightly refreshed

00:09:53,920 --> 00:09:57,279
um

00:09:54,880 --> 00:09:58,080
pusher intro next time but yeah and

00:09:57,279 --> 00:09:59,920
check them out

00:09:58,080 --> 00:10:01,440
um yeah they've been going for years and

00:09:59,920 --> 00:10:05,200
they've supported us for years so

00:10:01,440 --> 00:10:06,160
uh really okay diving into some

00:10:05,200 --> 00:10:09,680
interesting news

00:10:06,160 --> 00:10:11,440
for you um and this really caught my eye

00:10:09,680 --> 00:10:13,360
i think it was in javascript weekly a

00:10:11,440 --> 00:10:16,640
little while ago a few weeks ago

00:10:13,360 --> 00:10:18,640
um a company that claimed or a group of

00:10:16,640 --> 00:10:19,120
developers that worked in collaboration

00:10:18,640 --> 00:10:21,440
i think

00:10:19,120 --> 00:10:23,600
i remember correctly with google and

00:10:21,440 --> 00:10:25,040
mozilla and various organizations to

00:10:23,600 --> 00:10:26,720
to build an operating system that

00:10:25,040 --> 00:10:27,920
actually runs node in the browser you

00:10:26,720 --> 00:10:31,519
can do everything from

00:10:27,920 --> 00:10:34,320
order a pizza within an emoji to

00:10:31,519 --> 00:10:35,600
you know hire a car whatever it is um or

00:10:34,320 --> 00:10:38,800
just through one application

00:10:35,600 --> 00:10:39,839
and this this kind of um leap forward

00:10:38,800 --> 00:10:41,920
out i would say

00:10:39,839 --> 00:10:43,600
uh yeah it definitely introduces a sort

00:10:41,920 --> 00:10:44,399
of game changer for us i mean if you can

00:10:43,600 --> 00:10:46,240
imagine

00:10:44,399 --> 00:10:47,760
previously it would be impossible to do

00:10:46,240 --> 00:10:49,440
something like video editing

00:10:47,760 --> 00:10:51,519
in the browser there'd be too much

00:10:49,440 --> 00:10:52,079
latency it would be highly inefficient

00:10:51,519 --> 00:10:53,360
it just

00:10:52,079 --> 00:10:55,839
you know wouldn't feel like the right

00:10:53,360 --> 00:10:59,040
place but um what they've done is

00:10:55,839 --> 00:11:01,040
they've used webassembly

00:10:59,040 --> 00:11:02,160
to run the application in the browser

00:11:01,040 --> 00:11:04,720
and create the environment

00:11:02,160 --> 00:11:05,680
and various progressive web app pwa

00:11:04,720 --> 00:11:09,440
features

00:11:05,680 --> 00:11:12,560
um so that it can work offline um

00:11:09,440 --> 00:11:13,200
and yeah this is a screen grab of uh of

00:11:12,560 --> 00:11:15,279
the

00:11:13,200 --> 00:11:16,720
of the application that stack blitz have

00:11:15,279 --> 00:11:18,959
built with this technology

00:11:16,720 --> 00:11:21,120
so it's yeah understandably going to be

00:11:18,959 --> 00:11:23,200
familiar to a lot of you right you know

00:11:21,120 --> 00:11:24,800
probably a lot of developers on this

00:11:23,200 --> 00:11:27,360
call and

00:11:24,800 --> 00:11:28,000
and this yeah as you can tell is a fork

00:11:27,360 --> 00:11:30,880
of um

00:11:28,000 --> 00:11:31,279
vs code this is actually a screening up

00:11:30,880 --> 00:11:34,560
of me

00:11:31,279 --> 00:11:37,680
using it in the browser and yeah it was

00:11:34,560 --> 00:11:38,560
super slick very very clever why would i

00:11:37,680 --> 00:11:40,079
want to do that

00:11:38,560 --> 00:11:43,360
um well they have got some very

00:11:40,079 --> 00:11:45,120
compelling reasons in their sales pitch

00:11:43,360 --> 00:11:46,800
so faster than your local environment

00:11:45,120 --> 00:11:49,920
builds completely up to 20

00:11:46,800 --> 00:11:51,360
20 faster and package in stores are five

00:11:49,920 --> 00:11:52,399
times faster i mean i have to say i was

00:11:51,360 --> 00:11:55,760
really impressed how

00:11:52,399 --> 00:11:56,639
quickly it installed the dependencies um

00:11:55,760 --> 00:11:58,639
you can actually

00:11:56,639 --> 00:12:00,560
debug node in the browser right now

00:11:58,639 --> 00:12:01,279
because it actually integrates properly

00:12:00,560 --> 00:12:04,000
with

00:12:01,279 --> 00:12:05,120
chrome dev tools um so that was really

00:12:04,000 --> 00:12:07,040
impressive

00:12:05,120 --> 00:12:08,560
and it's like yeah they make the point

00:12:07,040 --> 00:12:11,680
it's more secure

00:12:08,560 --> 00:12:14,160
um you know it's it's in a safe sandbox

00:12:11,680 --> 00:12:15,279
um no one can no one can access that

00:12:14,160 --> 00:12:16,639
unless you want them to

00:12:15,279 --> 00:12:18,720
and as i mentioned before it actually

00:12:16,639 --> 00:12:20,399
works offline which is really clever

00:12:18,720 --> 00:12:22,880
uh so yeah i was really impressed by

00:12:20,399 --> 00:12:24,320
that um i will post a link to

00:12:22,880 --> 00:12:26,480
this and the other things i'm about to

00:12:24,320 --> 00:12:30,079
mention in the chat

00:12:26,480 --> 00:12:33,360
uh yeah during goodness talk

00:12:30,079 --> 00:12:34,240
the next item that um i felt compelled

00:12:33,360 --> 00:12:36,639
to

00:12:34,240 --> 00:12:38,639
uh talk to you about briefly with some

00:12:36,639 --> 00:12:41,760
babel running out of money

00:12:38,639 --> 00:12:44,560
um which i found quite sad um so

00:12:41,760 --> 00:12:45,839
you know we all depend uh either

00:12:44,560 --> 00:12:49,040
directly or indirectly

00:12:45,839 --> 00:12:52,160
enormously on this tool um

00:12:49,040 --> 00:12:55,120
and yeah they they wrote an article um

00:12:52,160 --> 00:12:56,000
telling the story of um you know of of

00:12:55,120 --> 00:12:58,720
their team

00:12:56,000 --> 00:13:00,000
and on what's happened over the last uh

00:12:58,720 --> 00:13:01,440
three or four years

00:13:00,000 --> 00:13:02,959
so you'll see on this timeline it's not

00:13:01,440 --> 00:13:04,320
the prettiest thing you've ever seen but

00:13:02,959 --> 00:13:07,120
it does tell the story

00:13:04,320 --> 00:13:07,440
um so yeah they had someone henry join

00:13:07,120 --> 00:13:12,000
in

00:13:07,440 --> 00:13:13,680
2018. um yeah at one point they had

00:13:12,000 --> 00:13:15,200
you know pretty good funding and easily

00:13:13,680 --> 00:13:17,920
enough to cover his

00:13:15,200 --> 00:13:18,800
salary that two more people joined i

00:13:17,920 --> 00:13:20,079
mean

00:13:18,800 --> 00:13:21,839
as you can imagine it's going to take

00:13:20,079 --> 00:13:24,320
quite a few people to keep something

00:13:21,839 --> 00:13:26,560
as powerful as this alive but donations

00:13:24,320 --> 00:13:30,959
have gone down

00:13:26,560 --> 00:13:34,000
um so for a package um that has 24

00:13:30,959 --> 00:13:37,279
million weekly downloads the fact

00:13:34,000 --> 00:13:39,360
that funding for this package is short

00:13:37,279 --> 00:13:40,639
it's really sad yeah and just to call

00:13:39,360 --> 00:13:42,240
out what that looks like

00:13:40,639 --> 00:13:45,040
to fully fund the currently paid

00:13:42,240 --> 00:13:47,120
maintainers we need at least 333

00:13:45,040 --> 00:13:48,240
000 per year twice what we're currently

00:13:47,120 --> 00:13:50,079
bringing in

00:13:48,240 --> 00:13:51,839
so my message was not necessarily for

00:13:50,079 --> 00:13:54,079
you to all hand your hard-earned cash

00:13:51,839 --> 00:13:57,760
over but certainly if you're not the

00:13:54,079 --> 00:13:58,560
budget holder please yeah flag this to

00:13:57,760 --> 00:14:01,279
your boss

00:13:58,560 --> 00:14:01,680
and help fund them um it can be really

00:14:01,279 --> 00:14:05,120
good

00:14:01,680 --> 00:14:07,279
for businesses to join um or back

00:14:05,120 --> 00:14:08,880
projects through the open collective so

00:14:07,279 --> 00:14:11,600
i'll post the link to that

00:14:08,880 --> 00:14:12,160
in this afterwards open collective or a

00:14:11,600 --> 00:14:15,199
way of

00:14:12,160 --> 00:14:17,279
um or a group that um organize

00:14:15,199 --> 00:14:19,519
contributions to lots of popular

00:14:17,279 --> 00:14:23,040
projects that you'll have heard of

00:14:19,519 --> 00:14:25,600
so yeah i really um recommend um

00:14:23,040 --> 00:14:26,720
yeah i think telling your boss uh that

00:14:25,600 --> 00:14:28,560
we need to keep

00:14:26,720 --> 00:14:29,760
these really important pieces of kit

00:14:28,560 --> 00:14:31,760
alive and

00:14:29,760 --> 00:14:32,959
thanks for the um round of applause

00:14:31,760 --> 00:14:35,440
emoji richard

00:14:32,959 --> 00:14:36,000
uh it's good to see that um yeah then

00:14:35,440 --> 00:14:38,639
this is

00:14:36,000 --> 00:14:39,680
uh landing an important point uh and

00:14:38,639 --> 00:14:41,760
then finally

00:14:39,680 --> 00:14:42,800
um a little bit of self-promotion but it

00:14:41,760 --> 00:14:44,800
is some

00:14:42,800 --> 00:14:46,800
uh hopefully going to be really useful

00:14:44,800 --> 00:14:49,279
to some of you on the call

00:14:46,800 --> 00:14:50,560
i've over the last few years had some

00:14:49,279 --> 00:14:53,600
really

00:14:50,560 --> 00:14:57,600
frustrating niggly headaches

00:14:53,600 --> 00:15:00,399
with unit testing in different module

00:14:57,600 --> 00:15:01,199
javascript module patterns so i decided

00:15:00,399 --> 00:15:04,320
to

00:15:01,199 --> 00:15:06,639
yeah to write an article on medium

00:15:04,320 --> 00:15:08,160
which explained how to tackle some of

00:15:06,639 --> 00:15:09,519
them so specifically there's two

00:15:08,160 --> 00:15:10,399
problems that i talk about in the

00:15:09,519 --> 00:15:14,240
article

00:15:10,399 --> 00:15:15,920
uh it's all about using stubs and spies

00:15:14,240 --> 00:15:18,399
and problem number one is that stubs and

00:15:15,920 --> 00:15:20,800
spies uh with es6

00:15:18,399 --> 00:15:21,920
when you compile using babel funnily

00:15:20,800 --> 00:15:24,160
enough probably

00:15:21,920 --> 00:15:26,079
to common js which is what you know the

00:15:24,160 --> 00:15:28,079
vast majority of projects do

00:15:26,079 --> 00:15:29,360
that has a particular problem when you

00:15:28,079 --> 00:15:31,600
compile to common js

00:15:29,360 --> 00:15:33,839
it's not possible to stub or spy on a

00:15:31,600 --> 00:15:36,720
function that's called by another one

00:15:33,839 --> 00:15:38,320
in the same module uh so you may have

00:15:36,720 --> 00:15:39,920
seen the error below that i've put here

00:15:38,320 --> 00:15:41,279
expected spy spider had been called once

00:15:39,920 --> 00:15:44,079
but it was never called

00:15:41,279 --> 00:15:45,279
this is just yeah drove me nuts um so in

00:15:44,079 --> 00:15:47,040
the article i offer

00:15:45,279 --> 00:15:48,480
well i offer an explanation as to why

00:15:47,040 --> 00:15:51,360
that's happening um

00:15:48,480 --> 00:15:52,800
a lower level and some solutions and

00:15:51,360 --> 00:15:55,600
then the second problem

00:15:52,800 --> 00:15:57,360
um because i decided when i got really

00:15:55,600 --> 00:15:58,320
frustrated with one particular project

00:15:57,360 --> 00:16:00,959
that i was starting

00:15:58,320 --> 00:16:02,880
to switch to a different module pattern

00:16:00,959 --> 00:16:05,120
i thought when i'm writing an es6

00:16:02,880 --> 00:16:06,320
using import export why don't i just use

00:16:05,120 --> 00:16:08,000
es modules

00:16:06,320 --> 00:16:09,680
so i switch that project to es modules

00:16:08,000 --> 00:16:10,959
and then i got the error yes modules

00:16:09,680 --> 00:16:13,680
cannot be stopped

00:16:10,959 --> 00:16:14,880
so yeah that was frustrating don't worry

00:16:13,680 --> 00:16:16,800
it's not game over

00:16:14,880 --> 00:16:18,240
um but yeah you may have encountered

00:16:16,800 --> 00:16:21,040
some other uh

00:16:18,240 --> 00:16:22,959
challenges so yeah i will share the link

00:16:21,040 --> 00:16:26,399
afterwards i hope some of you

00:16:22,959 --> 00:16:30,240
find it useful um yeah and um

00:16:26,399 --> 00:16:33,360
finally uh tweet us or follow us or both

00:16:30,240 --> 00:16:33,839
so yeah if you wanna um yeah spread the

00:16:33,360 --> 00:16:36,959
love

00:16:33,839 --> 00:16:40,399
um you know share any uh screen grabs or

00:16:36,959 --> 00:16:43,519
uh any quotes from today's uh session

00:16:40,399 --> 00:16:46,320
please do that would be great okay

00:16:43,519 --> 00:16:47,120
i am going to hand over to gunner for

00:16:46,320 --> 00:16:50,160
the first

00:16:47,120 --> 00:16:53,920
talk uh alex i imagine you'll

00:16:50,160 --> 00:17:05,839
want to uh to count him in so

00:16:53,920 --> 00:17:05,839
who are you gonna

00:17:17,199 --> 00:17:19,839
thank you alex

00:17:20,880 --> 00:17:26,480
hi guys so uh so topic for me today is

00:17:24,720 --> 00:17:26,959
uh quad tree and its implementation on

00:17:26,480 --> 00:17:32,799
maps

00:17:26,959 --> 00:17:35,039
uh using d3 so uh let's get started

00:17:32,799 --> 00:17:36,480
yeah so uh here i have a section of you

00:17:35,039 --> 00:17:39,360
know uh section of

00:17:36,480 --> 00:17:40,559
london uh in google map so what i did

00:17:39,360 --> 00:17:43,360
was i searched for

00:17:40,559 --> 00:17:44,480
costa coffee as you know a lot of chains

00:17:43,360 --> 00:17:46,960
are there in

00:17:44,480 --> 00:17:48,799
london so can anyone guess the number

00:17:46,960 --> 00:17:51,960
you can even you know uh

00:17:48,799 --> 00:17:53,120
send it in the chat sorry yeah

00:17:51,960 --> 00:17:55,679
[Music]

00:17:53,120 --> 00:17:56,160
few seconds maybe like not much because

00:17:55,679 --> 00:18:00,720
it's

00:17:56,160 --> 00:18:05,280
not easy to guess like this

00:18:00,720 --> 00:18:08,320
23 closer but yeah little bit far away

00:18:05,280 --> 00:18:08,320
i think this is hiding

00:18:09,120 --> 00:18:15,840
oh 125 your way of me

00:18:18,160 --> 00:18:24,880
cool so yeah uh let's get to it

00:18:21,919 --> 00:18:25,600
but uh i think no one got it i guess

00:18:24,880 --> 00:18:29,440
that's

00:18:25,600 --> 00:18:32,720
this that's why this is all about

00:18:29,440 --> 00:18:36,240
yeah so uh my name is you can call me as

00:18:32,720 --> 00:18:38,720
kuna i'm a front-end developer in jfrog

00:18:36,240 --> 00:18:39,440
i go by the social media id number 93

00:18:38,720 --> 00:18:41,600
guna and

00:18:39,440 --> 00:18:42,960
almost all the social media so you can

00:18:41,600 --> 00:18:45,360
follow me on twitter

00:18:42,960 --> 00:18:46,960
you know medium as well so uh before

00:18:45,360 --> 00:18:49,840
getting into the topics uh

00:18:46,960 --> 00:18:51,679
let me tell you something um if you want

00:18:49,840 --> 00:18:55,520
you can take a screenshot of this uh

00:18:51,679 --> 00:18:57,360
slide uh you can go to uh jayfer.com.js

00:18:55,520 --> 00:18:58,799
home hub where you can you know uh refer

00:18:57,360 --> 00:19:00,960
to my slides if you

00:18:58,799 --> 00:19:02,000
wanna you know look in the future and

00:19:00,960 --> 00:19:04,080
you can rate my talk

00:19:02,000 --> 00:19:06,320
uh the video will also be posted there

00:19:04,080 --> 00:19:08,960
and also uh we have a raffle uh

00:19:06,320 --> 00:19:10,000
available so you can fill the form and

00:19:08,960 --> 00:19:12,720
you know you might be

00:19:10,000 --> 00:19:13,360
a lucky winner to win uh google home hub

00:19:12,720 --> 00:19:15,919
so

00:19:13,360 --> 00:19:25,840
why not give it a try so i'll give you a

00:19:15,919 --> 00:19:25,840
few few seconds to take a screenshot

00:19:27,520 --> 00:19:30,640
okay so yeah so these are the topics for

00:19:30,000 --> 00:19:33,440
the day

00:19:30,640 --> 00:19:34,240
uh first let me uh explain what is

00:19:33,440 --> 00:19:38,240
clustering

00:19:34,240 --> 00:19:40,480
and uh then we'll go on to uh

00:19:38,240 --> 00:19:41,840
understand what a quarter is and then

00:19:40,480 --> 00:19:45,120
we'll see how to implement

00:19:41,840 --> 00:19:47,760
clustering uh on a map using quad tree

00:19:45,120 --> 00:19:48,240
and then we'll get on with the demo of

00:19:47,760 --> 00:19:50,320
uh

00:19:48,240 --> 00:19:52,400
jfrog application where we implemented

00:19:50,320 --> 00:19:54,799
uh clustering in our map

00:19:52,400 --> 00:19:55,760
and then uh i'll talk about why we

00:19:54,799 --> 00:19:57,840
haven't considered

00:19:55,760 --> 00:19:58,960
all other map apis available right we

00:19:57,840 --> 00:20:01,679
have a lot of uh

00:19:58,960 --> 00:20:02,880
things available so why not uh take

00:20:01,679 --> 00:20:07,840
something which is existing

00:20:02,880 --> 00:20:07,840
so yeah that's the topics for today so

00:20:08,080 --> 00:20:11,840
getting on with clustering of markers

00:20:12,320 --> 00:20:17,600
so the right answer is 17 as you uh see

00:20:15,520 --> 00:20:19,280
here

00:20:17,600 --> 00:20:21,200
the map look cluttered a little bit

00:20:19,280 --> 00:20:23,120
right so there were a lot of change

00:20:21,200 --> 00:20:25,679
available i just searched for it and

00:20:23,120 --> 00:20:26,480
you know uh it showed everything as a

00:20:25,679 --> 00:20:29,600
marker each

00:20:26,480 --> 00:20:31,600
uh shop as a marker and everything was

00:20:29,600 --> 00:20:33,360
cluttered what if there are like you

00:20:31,600 --> 00:20:35,520
know thousands of

00:20:33,360 --> 00:20:37,039
available you know whatever you search

00:20:35,520 --> 00:20:38,799
for uh you know

00:20:37,039 --> 00:20:40,400
starbucks or whatever what if there are

00:20:38,799 --> 00:20:42,480
thousands in the map and

00:20:40,400 --> 00:20:44,080
how will it look so it will be like you

00:20:42,480 --> 00:20:46,159
know a sea of markers

00:20:44,080 --> 00:20:47,840
right so you don't want want it that way

00:20:46,159 --> 00:20:48,240
that's why we need clustering where you

00:20:47,840 --> 00:20:50,559
know

00:20:48,240 --> 00:20:51,360
you can group some things together which

00:20:50,559 --> 00:20:53,360
are close by

00:20:51,360 --> 00:20:54,400
and you know when you zoom on it can

00:20:53,360 --> 00:20:57,520
expand

00:20:54,400 --> 00:20:59,840
as you wish so uh what are the

00:20:57,520 --> 00:21:02,880
advantages of clustering it obviously

00:20:59,840 --> 00:21:04,240
uh gives you a visual help because as i

00:21:02,880 --> 00:21:05,520
said you don't want to see a lot of

00:21:04,240 --> 00:21:08,000
markers on the

00:21:05,520 --> 00:21:10,159
map and you don't you know uh get

00:21:08,000 --> 00:21:11,919
confused where you're looking at and

00:21:10,159 --> 00:21:13,679
you won't basically see the map i guess

00:21:11,919 --> 00:21:14,799
if you're having a lot of markers that

00:21:13,679 --> 00:21:17,120
covers the map

00:21:14,799 --> 00:21:18,640
and uh one more thing is you can do heat

00:21:17,120 --> 00:21:20,720
maps with clustering so

00:21:18,640 --> 00:21:22,240
currently i showed you about markers but

00:21:20,720 --> 00:21:23,840
what if instead of marked us

00:21:22,240 --> 00:21:25,919
you know you can change the color of a

00:21:23,840 --> 00:21:28,080
portion based on the

00:21:25,919 --> 00:21:29,360
concentration it is getting right so if

00:21:28,080 --> 00:21:31,120
a lot of

00:21:29,360 --> 00:21:32,880
markers point to a particular location

00:21:31,120 --> 00:21:33,679
you can just change the color and show

00:21:32,880 --> 00:21:36,000
it in a

00:21:33,679 --> 00:21:37,200
different way that's how heat maps work

00:21:36,000 --> 00:21:40,720
you would have seen that in

00:21:37,200 --> 00:21:43,120
weather forecasting many places

00:21:40,720 --> 00:21:44,000
and last but not the least performance

00:21:43,120 --> 00:21:48,240
improvement

00:21:44,000 --> 00:21:51,039
see uh each marker in svgs and node

00:21:48,240 --> 00:21:52,559
is a you know uh whatever it may be it

00:21:51,039 --> 00:21:54,000
will be a node obviously so

00:21:52,559 --> 00:21:55,760
when you have you know thousands of

00:21:54,000 --> 00:21:58,960
markers in a small place

00:21:55,760 --> 00:22:00,559
it will obviously you know affect the

00:21:58,960 --> 00:22:02,320
performance of the browser because there

00:22:00,559 --> 00:22:04,880
will be lot of elements

00:22:02,320 --> 00:22:06,799
that on the dome and it needs it takes

00:22:04,880 --> 00:22:08,000
up the space and it becomes low so that

00:22:06,799 --> 00:22:09,600
is one help it does

00:22:08,000 --> 00:22:11,600
you can when you clutter you will have

00:22:09,600 --> 00:22:13,600
only one marker for a particular group

00:22:11,600 --> 00:22:15,760
of markers so that obviously improves

00:22:13,600 --> 00:22:19,039
your improves your performance

00:22:15,760 --> 00:22:20,559
so uh that is one thing you have to

00:22:19,039 --> 00:22:24,000
consider when you are doing uh

00:22:20,559 --> 00:22:26,080
clustering right so uh this clustering

00:22:24,000 --> 00:22:27,120
should be based on the zoom level as you

00:22:26,080 --> 00:22:30,320
see in this uh

00:22:27,120 --> 00:22:33,039
image algif uh when you're zooming in

00:22:30,320 --> 00:22:34,320
it has to calculate again and group the

00:22:33,039 --> 00:22:36,240
markers accordingly

00:22:34,320 --> 00:22:37,440
when it was zoomed out it was showing 15

00:22:36,240 --> 00:22:40,400
but we zoom in

00:22:37,440 --> 00:22:42,080
it was going to its own location right

00:22:40,400 --> 00:22:44,640
so that is one important thing you have

00:22:42,080 --> 00:22:44,640
to consider

00:22:45,120 --> 00:22:48,720
right so yeah let's uh move on to

00:22:47,200 --> 00:22:50,480
quartering

00:22:48,720 --> 00:22:51,679
as you all know quarter is a tree data

00:22:50,480 --> 00:22:52,400
structure algorithm you would have

00:22:51,679 --> 00:22:56,559
studied in your

00:22:52,400 --> 00:22:59,200
you know uh school or college so uh

00:22:56,559 --> 00:23:01,200
what a note what a tree uh data

00:22:59,200 --> 00:23:01,840
structure does is it has a parent and it

00:23:01,200 --> 00:23:05,200
has some

00:23:01,840 --> 00:23:07,600
uh nodes as child nodes right so uh each

00:23:05,200 --> 00:23:10,000
parent node is split into four in

00:23:07,600 --> 00:23:10,799
in quarterly you know yeah you'd

00:23:10,000 --> 00:23:13,200
obviously guess

00:23:10,799 --> 00:23:15,039
quad is nothing but four so each node

00:23:13,200 --> 00:23:16,240
will be split into four so each parent

00:23:15,039 --> 00:23:19,360
node will have four

00:23:16,240 --> 00:23:22,640
child nodes so that's what ah quarter is

00:23:19,360 --> 00:23:23,360
and why quadri so quarter is nothing but

00:23:22,640 --> 00:23:26,720
you know

00:23:23,360 --> 00:23:29,360
uh uh

00:23:26,720 --> 00:23:30,640
it it is nothing but a you know you're

00:23:29,360 --> 00:23:32,640
you're having a space

00:23:30,640 --> 00:23:34,080
and uh you you're going to separate it

00:23:32,640 --> 00:23:35,679
however you want so when you're going to

00:23:34,080 --> 00:23:37,840
separate it by four

00:23:35,679 --> 00:23:39,360
ah it can be manipulated and accessed

00:23:37,840 --> 00:23:42,880
easily let me

00:23:39,360 --> 00:23:44,880
show you why consider this square so uh

00:23:42,880 --> 00:23:46,400
consider the whole square as a parent

00:23:44,880 --> 00:23:49,120
node and you are going to

00:23:46,400 --> 00:23:50,559
split it into four right what happens is

00:23:49,120 --> 00:23:52,880
each uh

00:23:50,559 --> 00:23:53,919
inner square becomes a child so in the

00:23:52,880 --> 00:23:55,919
same way

00:23:53,919 --> 00:23:57,840
that inner square can be split into four

00:23:55,919 --> 00:24:01,039
and that forms a parent node and

00:23:57,840 --> 00:24:03,039
again it goes on so uh

00:24:01,039 --> 00:24:05,360
in a circle you can't do that if you you

00:24:03,039 --> 00:24:07,520
know uh take a circle and split it you

00:24:05,360 --> 00:24:10,640
will always have left out spaces but

00:24:07,520 --> 00:24:12,320
uh when you have a square it's easy to

00:24:10,640 --> 00:24:13,440
you know split into four and go on

00:24:12,320 --> 00:24:16,640
inside so each

00:24:13,440 --> 00:24:19,279
level uh at each level you will have

00:24:16,640 --> 00:24:20,480
uh you can split it uh each square into

00:24:19,279 --> 00:24:22,320
a number of square four

00:24:20,480 --> 00:24:24,320
four different squares and so on so

00:24:22,320 --> 00:24:26,080
that's why it's easy to be accessed

00:24:24,320 --> 00:24:27,840
so uh when you have a point on a

00:24:26,080 --> 00:24:29,440
particular square it's easily you can

00:24:27,840 --> 00:24:31,039
access only the parent node and through

00:24:29,440 --> 00:24:34,080
that you can easily get to the

00:24:31,039 --> 00:24:34,480
child mode so i have a code pen where i

00:24:34,080 --> 00:24:37,679
can

00:24:34,480 --> 00:24:40,000
uh show you how uh this

00:24:37,679 --> 00:24:40,880
quarterly how watery creates its

00:24:40,000 --> 00:24:43,200
branches

00:24:40,880 --> 00:24:46,080
so consider this as a square i'm going

00:24:43,200 --> 00:24:47,679
to put points here and let's see how the

00:24:46,080 --> 00:24:50,320
branches are you know the nodes are

00:24:47,679 --> 00:24:53,919
formed so first let me put on

00:24:50,320 --> 00:24:56,559
put one point here

00:24:53,919 --> 00:24:56,559
next one here

00:24:57,120 --> 00:25:01,200
last so as you see here we have formed

00:25:00,080 --> 00:25:03,520
uh

00:25:01,200 --> 00:25:04,640
you know four different points each one

00:25:03,520 --> 00:25:07,440
represents

00:25:04,640 --> 00:25:08,960
uh you know one child right so the

00:25:07,440 --> 00:25:10,559
square is split into four

00:25:08,960 --> 00:25:12,840
and we have got four different childs

00:25:10,559 --> 00:25:16,640
now let me split this one

00:25:12,840 --> 00:25:16,640
into four more again

00:25:16,880 --> 00:25:21,840
right as you see here this uh

00:25:19,919 --> 00:25:23,600
one part of the square is again split

00:25:21,840 --> 00:25:26,799
into four and

00:25:23,600 --> 00:25:28,720
sorry and two uh is lying on if you see

00:25:26,799 --> 00:25:30,640
these two are lying on a small smaller

00:25:28,720 --> 00:25:32,480
square and this is on a separate square

00:25:30,640 --> 00:25:35,200
and this is on a separate square

00:25:32,480 --> 00:25:35,840
so uh this is how a quarterly algorithm

00:25:35,200 --> 00:25:37,360
works

00:25:35,840 --> 00:25:39,120
wherever you place the point it can

00:25:37,360 --> 00:25:41,279
easily split it into uh

00:25:39,120 --> 00:25:43,600
different nodes so when you're going to

00:25:41,279 --> 00:25:45,600
search for this particular uh

00:25:43,600 --> 00:25:47,520
node it know that it knows where to look

00:25:45,600 --> 00:25:48,159
at it already lies on this part of the

00:25:47,520 --> 00:25:49,840
square

00:25:48,159 --> 00:25:51,600
so you you have already already

00:25:49,840 --> 00:25:53,120
eliminated three of the

00:25:51,600 --> 00:25:54,799
nodes you are going to search only

00:25:53,120 --> 00:25:58,000
through this particular node

00:25:54,799 --> 00:25:59,760
so that's so uh your search will be

00:25:58,000 --> 00:26:01,120
uh you know streamlined you don't have

00:25:59,760 --> 00:26:03,840
to uh that's why

00:26:01,120 --> 00:26:04,400
quarterly does it does search faster

00:26:03,840 --> 00:26:07,679
than

00:26:04,400 --> 00:26:11,039
any other uh algorithm so that's it

00:26:07,679 --> 00:26:12,960
about quartering

00:26:11,039 --> 00:26:14,640
so let's see how we can implement

00:26:12,960 --> 00:26:16,640
clustering on maps

00:26:14,640 --> 00:26:18,000
so that's what this is about why i

00:26:16,640 --> 00:26:20,960
showed you why quarterly

00:26:18,000 --> 00:26:21,679
uh you know is the best choice for

00:26:20,960 --> 00:26:24,559
clustering

00:26:21,679 --> 00:26:26,159
or you know grouping of points now let's

00:26:24,559 --> 00:26:27,120
see how we are going to implement it on

00:26:26,159 --> 00:26:30,400
the maps

00:26:27,120 --> 00:26:32,559
so you know a map is nothing but a

00:26:30,400 --> 00:26:33,520
you know a graphical plane which has x

00:26:32,559 --> 00:26:35,840
comma y

00:26:33,520 --> 00:26:36,960
uh point it starts from zero comma zero

00:26:35,840 --> 00:26:40,640
and goes to

00:26:36,960 --> 00:26:42,000
x comma or 0 or y comma 0 to x comma y

00:26:40,640 --> 00:26:43,279
right it's a you know you have a

00:26:42,000 --> 00:26:45,840
rectangular square it

00:26:43,279 --> 00:26:46,400
it that's how the graphical plane works

00:26:45,840 --> 00:26:49,039
and

00:26:46,400 --> 00:26:50,400
what you are going to do is d3 has a

00:26:49,039 --> 00:26:52,480
quarterly api

00:26:50,400 --> 00:26:54,320
which you can easily use and you know

00:26:52,480 --> 00:26:56,080
you can send the points just an array of

00:26:54,320 --> 00:26:56,559
points you can send that you return back

00:26:56,080 --> 00:27:00,799
the

00:26:56,559 --> 00:27:02,400
quarterly structured uh array so

00:27:00,799 --> 00:27:05,039
that's what you're going to do and then

00:27:02,400 --> 00:27:07,120
what you're going to do is

00:27:05,039 --> 00:27:08,400
consider your plane as a big rectangular

00:27:07,120 --> 00:27:11,279
square and

00:27:08,400 --> 00:27:13,360
uh split it into different grids right

00:27:11,279 --> 00:27:16,240
each grid will be traversed and

00:27:13,360 --> 00:27:18,159
you can uh check whether a point like is

00:27:16,240 --> 00:27:22,159
lying inside a grid or not

00:27:18,159 --> 00:27:22,399
okay so uh based on the level you will

00:27:22,159 --> 00:27:24,080
be

00:27:22,399 --> 00:27:25,919
based on the zoom level you will be

00:27:24,080 --> 00:27:29,120
having the size of the square

00:27:25,919 --> 00:27:30,559
and uh if a point is lying on inside the

00:27:29,120 --> 00:27:33,919
square you are going to group it

00:27:30,559 --> 00:27:36,000
it's that simple and uh once you have

00:27:33,919 --> 00:27:37,760
grouped the points uh you know you can

00:27:36,000 --> 00:27:39,840
add one marker to it and

00:27:37,760 --> 00:27:40,799
display it uh you can add a number or

00:27:39,840 --> 00:27:44,080
however you want

00:27:40,799 --> 00:27:49,039
heat uh maps or however you want so

00:27:44,080 --> 00:27:53,679
uh let's see this code here uh

00:27:49,039 --> 00:27:55,760
the data sorry so the data points is the

00:27:53,679 --> 00:27:56,799
you know points on the points on the map

00:27:55,760 --> 00:27:58,880
that you already have

00:27:56,799 --> 00:28:00,240
you're going to pass it to the d3 uh

00:27:58,880 --> 00:28:03,279
quarterly api

00:28:00,240 --> 00:28:04,000
and this quarterly uh will have its

00:28:03,279 --> 00:28:07,279
methods and

00:28:04,000 --> 00:28:10,640
uh you know the points calculated so

00:28:07,279 --> 00:28:12,399
what you're going to do is you are going

00:28:10,640 --> 00:28:13,760
to give this cluster range the cluster

00:28:12,399 --> 00:28:16,399
range is nothing but the size

00:28:13,760 --> 00:28:17,600
so this will be calculated based on the

00:28:16,399 --> 00:28:19,360
zoom level

00:28:17,600 --> 00:28:21,760
suppose you are not you are fully zoomed

00:28:19,360 --> 00:28:23,600
out uh the cluster range will be

00:28:21,760 --> 00:28:24,880
you know a little big it will be a

00:28:23,600 --> 00:28:28,240
bigger number so

00:28:24,880 --> 00:28:30,159
you know uh a large number of uh

00:28:28,240 --> 00:28:32,000
space will be grouped together and when

00:28:30,159 --> 00:28:32,880
you're zooming in this cluster range

00:28:32,000 --> 00:28:34,480
will reduce

00:28:32,880 --> 00:28:36,320
based on the zoom level you can reduce

00:28:34,480 --> 00:28:38,960
the cluster range and

00:28:36,320 --> 00:28:40,080
the square will be smaller so each time

00:28:38,960 --> 00:28:43,279
when you zoom in

00:28:40,080 --> 00:28:46,159
the size of the square will be small and

00:28:43,279 --> 00:28:46,799
only those uh markers that are going

00:28:46,159 --> 00:28:49,440
inside the

00:28:46,799 --> 00:28:50,799
square will be grouped together right so

00:28:49,440 --> 00:28:52,960
uh

00:28:50,799 --> 00:28:54,159
width and height is the remaining or you

00:28:52,960 --> 00:28:56,240
know the plane size

00:28:54,159 --> 00:28:58,000
the svg that you are that is available

00:28:56,240 --> 00:29:01,120
that is the width and height it will be

00:28:58,000 --> 00:29:02,799
calculated automatically and uh so

00:29:01,120 --> 00:29:04,799
whenever a point is

00:29:02,799 --> 00:29:06,480
lying inside this quarterly dot visit

00:29:04,799 --> 00:29:07,440
will tell you if a point is lying inside

00:29:06,480 --> 00:29:09,840
the square

00:29:07,440 --> 00:29:11,039
okay you just have to pass the details

00:29:09,840 --> 00:29:14,799
whatever you get

00:29:11,039 --> 00:29:18,480
and uh based on this

00:29:14,799 --> 00:29:20,640
whenever a point is you know uh

00:29:18,480 --> 00:29:21,760
passing inside the particular square or

00:29:20,640 --> 00:29:24,240
more than one point

00:29:21,760 --> 00:29:25,840
is passing inside a particular square

00:29:24,240 --> 00:29:26,720
what you can do is you can calculate the

00:29:25,840 --> 00:29:28,399
middle point

00:29:26,720 --> 00:29:30,640
suppose there are two points you don't

00:29:28,399 --> 00:29:32,559
uh you have to calculate the mid

00:29:30,640 --> 00:29:34,000
middle point as well to show the markup

00:29:32,559 --> 00:29:34,320
you cannot if you're showing a marker

00:29:34,000 --> 00:29:36,240
right

00:29:34,320 --> 00:29:37,600
you cannot show it on one place or you

00:29:36,240 --> 00:29:39,200
know wherever you want

00:29:37,600 --> 00:29:41,279
you can just calculate the middle point

00:29:39,200 --> 00:29:43,840
easily with the height

00:29:41,279 --> 00:29:46,000
edge x and edge y right you know the

00:29:43,840 --> 00:29:47,760
sizes of the h x and h y but that you

00:29:46,000 --> 00:29:49,440
can easily calculate the middle point so

00:29:47,760 --> 00:29:53,679
you are going to place the marker on the

00:29:49,440 --> 00:29:56,320
middle point so uh yeah let's get down

00:29:53,679 --> 00:29:56,320
with the demo

00:30:02,720 --> 00:30:06,159
so uh this is a jfrog platform where we

00:30:05,760 --> 00:30:08,799
have

00:30:06,159 --> 00:30:09,279
you know a dashboard showing a map of

00:30:08,799 --> 00:30:11,840
all the

00:30:09,279 --> 00:30:12,640
uh you know connected interconnected uh

00:30:11,840 --> 00:30:15,440
default

00:30:12,640 --> 00:30:16,880
platforms between them so uh here is the

00:30:15,440 --> 00:30:19,840
map which has

00:30:16,880 --> 00:30:21,760
uh you know markers on venus yes

00:30:19,840 --> 00:30:25,120
mountain view and we have three on

00:30:21,760 --> 00:30:26,880
india and we have two on israel so uh

00:30:25,120 --> 00:30:29,279
and we have this we have we show the

00:30:26,880 --> 00:30:32,320
status of the you know the platform

00:30:29,279 --> 00:30:35,520
and how much storage it has used and

00:30:32,320 --> 00:30:37,760
uh replication is concept of you know

00:30:35,520 --> 00:30:40,159
duplicating data from one platform to

00:30:37,760 --> 00:30:41,600
another so you can even see that status

00:30:40,159 --> 00:30:43,440
and the license and

00:30:41,600 --> 00:30:46,559
services points to the other products

00:30:43,440 --> 00:30:49,440
that jfrog comes up with

00:30:46,559 --> 00:30:50,640
right so uh let me show you how we have

00:30:49,440 --> 00:30:53,200
implemented

00:30:50,640 --> 00:30:54,320
clustering here so as you can see here

00:30:53,200 --> 00:30:56,640
all these fine

00:30:54,320 --> 00:30:57,840
points are placed in india suppose the

00:30:56,640 --> 00:30:59,760
square is this big

00:30:57,840 --> 00:31:01,279
all those appearing inside all the

00:30:59,760 --> 00:31:03,760
markers inside

00:31:01,279 --> 00:31:04,880
the square are placed inside a cluster

00:31:03,760 --> 00:31:07,200
so this cluster shows

00:31:04,880 --> 00:31:08,399
the number three and when you hover over

00:31:07,200 --> 00:31:10,559
it we show the details

00:31:08,399 --> 00:31:12,799
other details right so let me zoom in

00:31:10,559 --> 00:31:12,799
here

00:31:13,440 --> 00:31:17,600
as you can see here uh when i zoomed in

00:31:16,080 --> 00:31:20,720
the

00:31:17,600 --> 00:31:23,760
you know the range of the cluster

00:31:20,720 --> 00:31:26,559
range of the grid is reduced so uh

00:31:23,760 --> 00:31:28,559
this marker has already fallen out of uh

00:31:26,559 --> 00:31:31,039
the other two markers so it will just

00:31:28,559 --> 00:31:32,480
go outside it will go to its own place

00:31:31,039 --> 00:31:35,760
previously it was in the middle

00:31:32,480 --> 00:31:36,480
but now it's fallen apart so let me zoom

00:31:35,760 --> 00:31:39,120
in more

00:31:36,480 --> 00:31:39,760
uh again because this has two markers

00:31:39,120 --> 00:31:41,760
these are all

00:31:39,760 --> 00:31:43,200
these are also close by but little far

00:31:41,760 --> 00:31:46,240
apart so as you see

00:31:43,200 --> 00:31:49,360
when i uh zoom to the maximum it has

00:31:46,240 --> 00:31:50,240
gone to its own place so the cluster the

00:31:49,360 --> 00:31:53,039
range of

00:31:50,240 --> 00:31:54,399
this marker is uh different to this

00:31:53,039 --> 00:31:57,279
marker so that's why it has

00:31:54,399 --> 00:31:58,080
fallen apart there is also one more

00:31:57,279 --> 00:32:00,320
thing

00:31:58,080 --> 00:32:01,919
as you can see here uh there are two

00:32:00,320 --> 00:32:03,840
cities netanyahu and tel aviv

00:32:01,919 --> 00:32:06,159
they are separated by just 30 kilometers

00:32:03,840 --> 00:32:06,960
right so our zoom is like you know i

00:32:06,159 --> 00:32:09,200
have uh

00:32:06,960 --> 00:32:10,399
given a zoom level of eight maximum so

00:32:09,200 --> 00:32:13,440
we can't zoom in

00:32:10,399 --> 00:32:15,279
uh above eight so uh it won't fall apart

00:32:13,440 --> 00:32:18,159
because it's so close to each other

00:32:15,279 --> 00:32:18,640
uh since the zoom has already uh been

00:32:18,159 --> 00:32:20,240
done

00:32:18,640 --> 00:32:22,480
it's always falling under the same

00:32:20,240 --> 00:32:23,120
square so it won't fall apart so that's

00:32:22,480 --> 00:32:25,840
one thing

00:32:23,120 --> 00:32:26,880
you have to look for if it is fine by

00:32:25,840 --> 00:32:28,960
your

00:32:26,880 --> 00:32:31,120
standards are what you're looking at so

00:32:28,960 --> 00:32:35,120
that's one thing

00:32:31,120 --> 00:32:35,120
so uh that's it about the demo

00:32:35,679 --> 00:32:41,200
so let me tell you why i didn't use

00:32:38,720 --> 00:32:42,080
any other map apis and libraries as you

00:32:41,200 --> 00:32:44,399
know there are a lot of

00:32:42,080 --> 00:32:45,360
uh very good map apis leaflet map box

00:32:44,399 --> 00:32:48,000
and you know google

00:32:45,360 --> 00:32:49,760
maps api you know uh they provide a lot

00:32:48,000 --> 00:32:52,640
of functionalities even clustering

00:32:49,760 --> 00:32:53,120
yeah you know uh leaflet i for one thing

00:32:52,640 --> 00:32:55,840
i know

00:32:53,120 --> 00:32:56,799
uh provides clustering uh with its api

00:32:55,840 --> 00:32:59,360
so

00:32:56,799 --> 00:33:00,960
why didn't they consider all those map

00:32:59,360 --> 00:33:03,200
libraries the first thing is

00:33:00,960 --> 00:33:04,880
framework granularity as you know all

00:33:03,200 --> 00:33:07,919
these map libraries

00:33:04,880 --> 00:33:08,840
they come with their own set of modules

00:33:07,919 --> 00:33:12,399
that they include

00:33:08,840 --> 00:33:14,720
so uh when you have an application

00:33:12,399 --> 00:33:15,919
uh where you are restricted to you know

00:33:14,720 --> 00:33:18,080
uh the number of

00:33:15,919 --> 00:33:19,600
modules or how heavy your application is

00:33:18,080 --> 00:33:20,320
you might have to consider that as well

00:33:19,600 --> 00:33:22,960
you cannot

00:33:20,320 --> 00:33:23,440
uh you know use uh library which because

00:33:22,960 --> 00:33:26,399
these

00:33:23,440 --> 00:33:28,000
uh have leaflet map box google ap are

00:33:26,399 --> 00:33:29,840
you know really complicated they use a

00:33:28,000 --> 00:33:32,480
lot of libraries along with it so

00:33:29,840 --> 00:33:34,559
that's one thing it helps and uh you are

00:33:32,480 --> 00:33:36,720
restricted to the apis available suppose

00:33:34,559 --> 00:33:39,600
if you want to implement something new

00:33:36,720 --> 00:33:41,039
and uh if the aps don't support it it

00:33:39,600 --> 00:33:42,799
will be difficult for you to go

00:33:41,039 --> 00:33:44,240
right if you're doing it on your own you

00:33:42,799 --> 00:33:45,919
are bound to your own imagination you

00:33:44,240 --> 00:33:49,120
can do whatever you want

00:33:45,919 --> 00:33:52,080
and however you want so

00:33:49,120 --> 00:33:53,760
that advantage you get and integration

00:33:52,080 --> 00:33:56,320
with other visualization so

00:33:53,760 --> 00:33:56,799
suppose you see an animation library uh

00:33:56,320 --> 00:33:59,760
you know

00:33:56,799 --> 00:34:01,760
uh that's uh you know very trendy and

00:33:59,760 --> 00:34:04,640
very catchy so you want to do it

00:34:01,760 --> 00:34:05,519
in your map and it uh you know the other

00:34:04,640 --> 00:34:07,679
apis that

00:34:05,519 --> 00:34:09,520
it might not support it so that's one

00:34:07,679 --> 00:34:11,520
other advantage you have

00:34:09,520 --> 00:34:12,639
so uh basically if you see our

00:34:11,520 --> 00:34:14,320
application uh

00:34:12,639 --> 00:34:16,000
it's very simple the map is not very

00:34:14,320 --> 00:34:17,919
complicated it's very simple i

00:34:16,000 --> 00:34:19,040
i you know i'm not showing a lot of

00:34:17,919 --> 00:34:22,000
details just a

00:34:19,040 --> 00:34:23,520
you know plain uh map that just shows

00:34:22,000 --> 00:34:24,000
the markers and some details that we

00:34:23,520 --> 00:34:26,480
want

00:34:24,000 --> 00:34:27,119
so these kind of situations you don't

00:34:26,480 --> 00:34:30,000
have to

00:34:27,119 --> 00:34:30,800
use a library uh to be specific and you

00:34:30,000 --> 00:34:32,480
know

00:34:30,800 --> 00:34:35,919
involve a lot of complicated stuff you

00:34:32,480 --> 00:34:39,200
don't want that it needs to be simple so

00:34:35,919 --> 00:34:42,720
that is one thing yeah

00:34:39,200 --> 00:34:45,679
so uh before uh

00:34:42,720 --> 00:34:47,839
winding up uh let me tell you about uh

00:34:45,679 --> 00:34:49,679
jfrog swamp up we have a devops

00:34:47,839 --> 00:34:52,639
conference as you as i've said

00:34:49,679 --> 00:34:54,159
jfrog is a you know a devops uh platform

00:34:52,639 --> 00:34:56,399
that we provide end-to-end uh

00:34:54,159 --> 00:34:57,440
you know automation and software

00:34:56,399 --> 00:35:00,400
development

00:34:57,440 --> 00:35:01,680
and uh we have a yearly uh conference

00:35:00,400 --> 00:35:04,560
where we you know

00:35:01,680 --> 00:35:05,040
have breakout sessions and you know a

00:35:04,560 --> 00:35:06,560
lot of

00:35:05,040 --> 00:35:08,640
leading companies and friend runners and

00:35:06,560 --> 00:35:11,280
devops participate they

00:35:08,640 --> 00:35:12,560
have their uh keynotes as well you can

00:35:11,280 --> 00:35:15,680
participate it's

00:35:12,560 --> 00:35:16,079
you know it's really nice and the emea

00:35:15,680 --> 00:35:19,119
june

00:35:16,079 --> 00:35:19,760
uh is on june 2nd to 3rd so if you want

00:35:19,119 --> 00:35:23,200
you can just

00:35:19,760 --> 00:35:26,160
just just google stamp up meetup jstor

00:35:23,200 --> 00:35:26,160
you will be able to find

00:35:26,240 --> 00:35:31,839
so yeah uh that's it for me

00:35:54,800 --> 00:35:59,520
uh yeah thanks so much for that gun that

00:35:56,560 --> 00:36:01,680
was great um yeah and i can't think of a

00:35:59,520 --> 00:36:02,640
time in the last few years that we've

00:36:01,680 --> 00:36:06,560
had a talk

00:36:02,640 --> 00:36:09,200
on yeah on how to uh handle

00:36:06,560 --> 00:36:10,640
um yeah two-dimensional space and using

00:36:09,200 --> 00:36:11,920
quad trees so that's that's really

00:36:10,640 --> 00:36:12,560
really good hopefully a lot of other

00:36:11,920 --> 00:36:15,359
people

00:36:12,560 --> 00:36:17,280
on the call really enjoyed that too um

00:36:15,359 --> 00:36:18,640
i'll open it out to the floor then does

00:36:17,280 --> 00:36:27,839
anyone have any

00:36:18,640 --> 00:36:30,800
questions don't be shy

00:36:27,839 --> 00:36:32,640
any questions anyone i have a couple if

00:36:30,800 --> 00:36:35,280
no one else does but

00:36:32,640 --> 00:36:35,920
i'll let you go first if you don't want

00:36:35,280 --> 00:36:41,839
to speak

00:36:35,920 --> 00:36:41,839
feel free to type in the chat

00:36:43,200 --> 00:36:48,000
no okay uh yeah

00:36:46,320 --> 00:36:49,599
okay well i've got a couple for you

00:36:48,000 --> 00:36:52,240
gonna so uh yeah

00:36:49,599 --> 00:36:53,359
firstly um how did you actually settle

00:36:52,240 --> 00:36:56,400
on quad trees

00:36:53,359 --> 00:36:58,960
as the solution when you're working on

00:36:56,400 --> 00:36:58,960
this problem

00:36:59,119 --> 00:37:03,280
okay uh yeah i just uh did a research

00:37:01,440 --> 00:37:05,200
actually first i was not planning to do

00:37:03,280 --> 00:37:08,880
it on my own i thought let me try

00:37:05,200 --> 00:37:10,800
uh you know a library like uh map box or

00:37:08,880 --> 00:37:11,440
leaflet if that was the one i considered

00:37:10,800 --> 00:37:13,680
a lot

00:37:11,440 --> 00:37:15,440
but uh it's a little heavy uh to be

00:37:13,680 --> 00:37:18,079
frank our application is already

00:37:15,440 --> 00:37:19,280
a lot of things and you know uh don't

00:37:18,079 --> 00:37:21,839
want to load it up with

00:37:19,280 --> 00:37:23,920
uh another library that brings a lot of

00:37:21,839 --> 00:37:26,960
other complicated stuff as well so

00:37:23,920 --> 00:37:28,640
uh then i thought of researching uh

00:37:26,960 --> 00:37:29,920
to understand how clustering is done

00:37:28,640 --> 00:37:32,079
first of all like how the other

00:37:29,920 --> 00:37:33,760
libraries do clustering so that's what i

00:37:32,079 --> 00:37:34,560
want to do it right so we already had a

00:37:33,760 --> 00:37:36,480
map we just

00:37:34,560 --> 00:37:38,000
wanna do clustering so when you search

00:37:36,480 --> 00:37:40,400
for it uh

00:37:38,000 --> 00:37:41,359
uh what i uh you know uh predominantly

00:37:40,400 --> 00:37:43,760
what i got was

00:37:41,359 --> 00:37:45,839
uh quartering quarterly uh is available

00:37:43,760 --> 00:37:47,200
in d3 that is one big advantage we don't

00:37:45,839 --> 00:37:48,880
have to do it on our own h3 already

00:37:47,200 --> 00:37:52,079
provides it so

00:37:48,880 --> 00:37:52,880
that's the path i took and that's how i

00:37:52,079 --> 00:37:54,480
got to

00:37:52,880 --> 00:37:56,160
make it work and yeah a lot of help i

00:37:54,480 --> 00:37:58,720
got i didn't do it on my own i

00:37:56,160 --> 00:38:00,160
you know there are a lot of uh blogs

00:37:58,720 --> 00:38:02,880
that you have to search and

00:38:00,160 --> 00:38:04,000
find out take whatever you want and

00:38:02,880 --> 00:38:07,119
build one that is suitable

00:38:04,000 --> 00:38:08,320
for you so yeah sure well it's yeah it's

00:38:07,119 --> 00:38:11,200
good that you mention all of the

00:38:08,320 --> 00:38:12,720
the uh the the other support you get out

00:38:11,200 --> 00:38:13,119
there right this is this is the thing

00:38:12,720 --> 00:38:15,280
about

00:38:13,119 --> 00:38:17,359
um being a developer particularly a web

00:38:15,280 --> 00:38:18,880
developer right this is that um

00:38:17,359 --> 00:38:20,960
yeah without the community without all

00:38:18,880 --> 00:38:22,079
that information out there with all that

00:38:20,960 --> 00:38:23,760
you know without all that knowledge

00:38:22,079 --> 00:38:25,200
sharing it would be certainly a lot

00:38:23,760 --> 00:38:26,720
harder we've definitely been

00:38:25,200 --> 00:38:28,240
reinventing the wheel a few times as

00:38:26,720 --> 00:38:30,960
well i think um

00:38:28,240 --> 00:38:32,640
so yeah you mentioned that um the d3 has

00:38:30,960 --> 00:38:35,920
um quadri

00:38:32,640 --> 00:38:39,760
um a quadri api um what other

00:38:35,920 --> 00:38:43,200
features of d3 are are you a fan of

00:38:39,760 --> 00:38:47,040
do you use it much uh yeah

00:38:43,200 --> 00:38:47,359
actually uh not uh like to be frank we

00:38:47,040 --> 00:38:49,599
use

00:38:47,359 --> 00:38:52,160
d3 uh only through other libraries we

00:38:49,599 --> 00:38:53,680
don't use it directly like uh we have a

00:38:52,160 --> 00:38:56,320
chat visualization library called

00:38:53,680 --> 00:38:57,040
billboard.js where we use uh you know

00:38:56,320 --> 00:39:00,400
the

00:38:57,040 --> 00:39:03,040
base is uh probably d3 so uh

00:39:00,400 --> 00:39:04,400
that's so only uh in maps i guess we

00:39:03,040 --> 00:39:06,880
have used

00:39:04,400 --> 00:39:07,599
d3 directly only for this map section

00:39:06,880 --> 00:39:11,119
but

00:39:07,599 --> 00:39:13,280
uh other than that uh nothing directly

00:39:11,119 --> 00:39:15,280
you know maybe somewhere if you want to

00:39:13,280 --> 00:39:17,599
do some modifications we use

00:39:15,280 --> 00:39:19,359
some of the things like you know

00:39:17,599 --> 00:39:21,920
accessing the dom is little uh

00:39:19,359 --> 00:39:22,560
easier using d3 so some of the places

00:39:21,920 --> 00:39:26,400
but

00:39:22,560 --> 00:39:29,520
not much yeah yeah okay

00:39:26,400 --> 00:39:32,160
yeah cool anyone anyone else want to ask

00:39:29,520 --> 00:39:32,880
i'm gonna a question before we go to the

00:39:32,160 --> 00:39:36,240
break

00:39:32,880 --> 00:39:39,520
oh i can see um pavel our next speaker's

00:39:36,240 --> 00:39:39,520
joined that's that's a relief

00:39:39,839 --> 00:39:44,800
otherwise you're gonna get my backup

00:39:41,280 --> 00:39:48,960
presentation uh but yeah anyone um

00:39:44,800 --> 00:39:51,599
anyone got a question hopefully you all

00:39:48,960 --> 00:39:52,960
found it informative uh well i'm gonna

00:39:51,599 --> 00:39:53,920
give you a round of applause gonna

00:39:52,960 --> 00:39:55,280
doesn't look like there's any more

00:39:53,920 --> 00:39:58,079
questions but um

00:39:55,280 --> 00:39:58,880
yeah really appreciate that um thank you

00:39:58,079 --> 00:40:02,400
guys

00:39:58,880 --> 00:40:04,720
really good talk thank you so much

00:40:02,400 --> 00:40:05,599
i can see a few clap emojis for you as

00:40:04,720 --> 00:40:07,760
well

00:40:05,599 --> 00:40:10,319
i guess uh yeah everyone's doing this

00:40:07,760 --> 00:40:12,480
purely visually today uh

00:40:10,319 --> 00:40:13,680
brilliant okay well yeah thanks again

00:40:12,480 --> 00:40:16,800
and uh we'll

00:40:13,680 --> 00:40:18,800
take a five minute break so well we're

00:40:16,800 --> 00:40:21,920
just at 10 past now so i'll see

00:40:18,800 --> 00:40:25,839
you all again at uh

00:40:21,920 --> 00:40:25,839
quarter past seven

00:40:48,480 --> 00:40:53,839
one moment

00:40:56,270 --> 00:41:06,100
[Music]

00:41:04,839 --> 00:41:32,839
foreign

00:41:06,100 --> 00:41:34,900
[Music]

00:41:32,839 --> 00:41:43,539
uh

00:41:34,900 --> 00:41:43,539
[Music]

00:41:48,070 --> 00:42:03,839
[Music]

00:42:00,839 --> 00:42:03,839
so

00:42:04,820 --> 00:42:14,360
[Music]

00:42:14,839 --> 00:42:37,370
so

00:42:16,090 --> 00:42:40,460
[Music]

00:42:37,370 --> 00:42:40,460
[Applause]

00:42:40,480 --> 00:42:45,839
[Music]

00:42:42,839 --> 00:42:45,839
so

00:42:46,210 --> 00:43:09,109
[Music]

00:43:10,839 --> 00:43:13,839
my

00:43:14,930 --> 00:43:55,120
[Music]

00:43:52,839 --> 00:44:02,439
my

00:43:55,120 --> 00:44:02,439
[Music]

00:44:06,740 --> 00:44:35,619
[Music]

00:44:35,760 --> 00:44:56,040
you

00:44:37,790 --> 00:44:59,130
[Music]

00:44:56,040 --> 00:44:59,130
[Applause]

00:44:59,150 --> 00:45:19,839
[Music]

00:45:16,839 --> 00:45:19,839
home

00:45:21,690 --> 00:45:27,769
[Music]

00:45:33,600 --> 00:45:46,420
[Music]

00:45:44,839 --> 00:46:20,880
foreign

00:45:46,420 --> 00:46:20,880
[Music]

00:46:25,400 --> 00:46:42,150
[Music]

00:46:41,760 --> 00:47:14,700
foreign

00:46:42,150 --> 00:47:17,790
[Music]

00:47:14,700 --> 00:47:17,790
[Applause]

00:47:17,820 --> 00:47:23,670
[Music]

00:47:23,839 --> 00:47:25,920
you

00:47:26,980 --> 00:47:46,449
[Music]

00:47:52,270 --> 00:48:07,270
[Music]

00:48:04,839 --> 00:48:34,059
foreign

00:48:07,270 --> 00:48:34,059
[Music]

00:48:48,319 --> 00:48:53,440
uh i think pablo's speaking and i think

00:48:50,160 --> 00:48:53,440
you i think you're muted paul

00:48:54,000 --> 00:48:57,040
yeah i'm sorry i was muted yeah no

00:48:56,160 --> 00:49:00,480
worries right

00:48:57,040 --> 00:49:01,520
the floor is yours okay cool yeah thanks

00:49:00,480 --> 00:49:04,880
for having me here

00:49:01,520 --> 00:49:07,920
um my name is pal badenski um

00:49:04,880 --> 00:49:09,440
and um today i wanted to chat um about

00:49:07,920 --> 00:49:10,880
building high performance

00:49:09,440 --> 00:49:12,720
uh web application specifically

00:49:10,880 --> 00:49:14,000
financial application with javascript

00:49:12,720 --> 00:49:16,480
something that

00:49:14,000 --> 00:49:17,599
we've been doing for the past uh over 10

00:49:16,480 --> 00:49:20,720
uh sorry over ten

00:49:17,599 --> 00:49:23,280
over four years um uh

00:49:20,720 --> 00:49:24,480
in our in our in our startup uh we

00:49:23,280 --> 00:49:26,079
started the journey actually

00:49:24,480 --> 00:49:28,240
uh four years uh more than four years

00:49:26,079 --> 00:49:30,720
ago um and uh yeah i've been i've been

00:49:28,240 --> 00:49:32,880
going since um

00:49:30,720 --> 00:49:34,240
so the presentation uh yes a little bit

00:49:32,880 --> 00:49:37,839
about

00:49:34,240 --> 00:49:39,119
a bit about me um uh i'm a ceo and

00:49:37,839 --> 00:49:42,240
pricing monkey i'm one of

00:49:39,119 --> 00:49:45,280
the co-founders um so i've seen this

00:49:42,240 --> 00:49:47,280
i've um i've been since day zero

00:49:45,280 --> 00:49:48,480
um so this is going to be a journey of

00:49:47,280 --> 00:49:50,880
uh

00:49:48,480 --> 00:49:51,839
experience from from from that journey

00:49:50,880 --> 00:49:54,160
uh you can see my

00:49:51,839 --> 00:49:56,480
twitter email uh you can reach me out um

00:49:54,160 --> 00:49:58,319
on those channels i'm also a mentor at

00:49:56,480 --> 00:50:00,640
uh meet a mentor if you haven't heard

00:49:58,319 --> 00:50:02,720
about it yet um

00:50:00,640 --> 00:50:04,240
to go ahead and check it out is a really

00:50:02,720 --> 00:50:07,119
cool and free

00:50:04,240 --> 00:50:07,119
um community

00:50:07,359 --> 00:50:12,000
um i have nearly 15 years of experience

00:50:10,800 --> 00:50:15,119
in building software

00:50:12,000 --> 00:50:15,920
i come from java background um where i

00:50:15,119 --> 00:50:19,119
spent uh

00:50:15,920 --> 00:50:21,839
quite a bit of my uh my past and uh

00:50:19,119 --> 00:50:22,640
i became a javascript developer five

00:50:21,839 --> 00:50:25,040
years ago

00:50:22,640 --> 00:50:26,079
and when uh when we started the business

00:50:25,040 --> 00:50:29,200
we

00:50:26,079 --> 00:50:32,400
um we're still we're still going

00:50:29,200 --> 00:50:36,000
uh now um i'm a journalist

00:50:32,400 --> 00:50:39,040
um uh so i i do love design

00:50:36,000 --> 00:50:42,400
um i do live software philosophy

00:50:39,040 --> 00:50:44,160
or all the different

00:50:42,400 --> 00:50:45,440
programming languages and all sort of

00:50:44,160 --> 00:50:46,960
problems but i do

00:50:45,440 --> 00:50:48,480
i love performance engineering my my

00:50:46,960 --> 00:50:51,040
life of performance engineering started

00:50:48,480 --> 00:50:52,720
relatively early in my career and since

00:50:51,040 --> 00:50:56,400
i it's really have been

00:50:52,720 --> 00:50:58,480
a thing i i kept being drawn to

00:50:56,400 --> 00:50:59,839
um so yeah so this presentation is our

00:50:58,480 --> 00:51:01,920
journey for points

00:50:59,839 --> 00:51:03,760
something to say is my style of

00:51:01,920 --> 00:51:05,359
presentation is that i

00:51:03,760 --> 00:51:08,079
do tend to overwhelm people with

00:51:05,359 --> 00:51:11,760
information so do take notes um

00:51:08,079 --> 00:51:15,680
things that you find interesting um um

00:51:11,760 --> 00:51:15,680
um sorry one second let me just

00:51:16,480 --> 00:51:21,440
have to disable my phone so do take

00:51:18,800 --> 00:51:23,359
notes if you find something interesting

00:51:21,440 --> 00:51:24,640
um and you know feel free to reach reach

00:51:23,359 --> 00:51:27,280
out to me um

00:51:24,640 --> 00:51:29,839
for um for more details or if you want

00:51:27,280 --> 00:51:33,119
to hear more about any any of what i was

00:51:29,839 --> 00:51:35,119
i'm going to to talk about it's going to

00:51:33,119 --> 00:51:37,599
be a bit of like i said in the in

00:51:35,119 --> 00:51:38,880
the um on the meetup page there's going

00:51:37,599 --> 00:51:41,119
to be a bit of a buffet

00:51:38,880 --> 00:51:42,559
um of of information i was trying to

00:51:41,119 --> 00:51:44,160
kind of cover

00:51:42,559 --> 00:51:45,440
uh for people who just beginning their

00:51:44,160 --> 00:51:46,240
journey and people who are quite

00:51:45,440 --> 00:51:49,680
experienced

00:51:46,240 --> 00:51:51,920
so yeah get ready for a bit of a

00:51:49,680 --> 00:51:53,200
um so first one don't get distracted by

00:51:51,920 --> 00:51:56,720
other people problems

00:51:53,200 --> 00:51:58,720
um this presentation included

00:51:56,720 --> 00:52:01,200
um i think it's quite relevant when you

00:51:58,720 --> 00:52:03,359
go to all sort of uh

00:52:01,200 --> 00:52:04,960
um and i've certainly been a victim to a

00:52:03,359 --> 00:52:06,160
sort of conferences and presentations

00:52:04,960 --> 00:52:08,160
you see a new

00:52:06,160 --> 00:52:11,440
cool thing the new technology and you

00:52:08,160 --> 00:52:12,960
know immediately jump into it and

00:52:11,440 --> 00:52:15,280
you know it's it's actually not

00:52:12,960 --> 00:52:15,839
necessarily the uh solving the problem

00:52:15,280 --> 00:52:18,240
you

00:52:15,839 --> 00:52:19,760
uh your pro your projects uh might want

00:52:18,240 --> 00:52:21,520
to be to be solving everybody

00:52:19,760 --> 00:52:24,319
has their own problems and their own

00:52:21,520 --> 00:52:28,240
challenges and the solutions might not

00:52:24,319 --> 00:52:30,480
uh work um across across the um

00:52:28,240 --> 00:52:31,680
uh different contexts now we are a

00:52:30,480 --> 00:52:33,359
specialized software as a service

00:52:31,680 --> 00:52:34,160
platform for financial analytics and

00:52:33,359 --> 00:52:37,440
what that means

00:52:34,160 --> 00:52:40,160
is that um

00:52:37,440 --> 00:52:40,880
our main javascript bundle um is six

00:52:40,160 --> 00:52:42,880
megabytes

00:52:40,880 --> 00:52:45,280
and that's 1.5 max compressed and

00:52:42,880 --> 00:52:48,319
everybody will probably you know

00:52:45,280 --> 00:52:52,000
run runaway screaming at at this point

00:52:48,319 --> 00:52:55,760
um we're not bothered at all

00:52:52,000 --> 00:52:57,920
um we failed a google lighthouse test

00:52:55,760 --> 00:53:00,000
um this screenshot here is from google

00:52:57,920 --> 00:53:03,119
lighthouse a tool that google has in

00:53:00,000 --> 00:53:04,240
chrome that can measure how well behaved

00:53:03,119 --> 00:53:07,280
your

00:53:04,240 --> 00:53:09,359
website is we got nine out of hundred uh

00:53:07,280 --> 00:53:10,720
first contentful paint five seconds for

00:53:09,359 --> 00:53:14,160
some of you this might be

00:53:10,720 --> 00:53:17,200
absolutely horrific um our

00:53:14,160 --> 00:53:18,000
customers go on to uh we have a small

00:53:17,200 --> 00:53:21,520
number of

00:53:18,000 --> 00:53:22,400
um high-paying customers they go on our

00:53:21,520 --> 00:53:24,000
platform and

00:53:22,400 --> 00:53:25,440
they open the page and they stay there

00:53:24,000 --> 00:53:27,119
for you know

00:53:25,440 --> 00:53:29,680
their day and maybe refreshing a few

00:53:27,119 --> 00:53:32,240
times in the day um

00:53:29,680 --> 00:53:34,160
so it really doesn't matter that you

00:53:32,240 --> 00:53:37,119
know the page takes a little longer to

00:53:34,160 --> 00:53:38,000
to load so yeah i know that 99 of the

00:53:37,119 --> 00:53:41,040
internet does

00:53:38,000 --> 00:53:42,800
or care about that we don't

00:53:41,040 --> 00:53:44,000
um so a lot of information that we find

00:53:42,800 --> 00:53:46,400
about performance when a google

00:53:44,000 --> 00:53:48,240
performance website performance or

00:53:46,400 --> 00:53:49,760
things like that um in chrome i actually

00:53:48,240 --> 00:53:51,440
find things that

00:53:49,760 --> 00:53:53,440
you know are not necessarily as

00:53:51,440 --> 00:53:55,119
interesting to us

00:53:53,440 --> 00:53:57,119
um yeah majority of performance

00:53:55,119 --> 00:54:00,480
suggestions don't apply to our project

00:53:57,119 --> 00:54:05,119
um so the screenshot you see here

00:54:00,480 --> 00:54:05,920
is um about prometus client we do use

00:54:05,119 --> 00:54:08,079
prometheus

00:54:05,920 --> 00:54:10,240
um interestingly actually we do report

00:54:08,079 --> 00:54:13,520
metrics from um

00:54:10,240 --> 00:54:15,760
prometheus to metrics from each of our

00:54:13,520 --> 00:54:19,359
users we report to promote use i'll

00:54:15,760 --> 00:54:21,599
say a bit more about that later

00:54:19,359 --> 00:54:23,040
so we basically track every single

00:54:21,599 --> 00:54:24,800
customer instance

00:54:23,040 --> 00:54:26,800
we treat it as a separate note because

00:54:24,800 --> 00:54:28,079
we do computation on

00:54:26,800 --> 00:54:31,760
some computation on the client's

00:54:28,079 --> 00:54:31,760
machines we do also track

00:54:32,000 --> 00:54:37,280
need visibility in performance of how it

00:54:35,040 --> 00:54:41,280
behaves on the user's computer so we

00:54:37,280 --> 00:54:45,119
we push metrics from our users browsers

00:54:41,280 --> 00:54:47,440
to promote to use with a prom client

00:54:45,119 --> 00:54:50,160
library which actually we forked in

00:54:47,440 --> 00:54:53,760
order to deploy it in the browser

00:54:50,160 --> 00:54:55,119
and uh prometheus does not encourage and

00:54:53,760 --> 00:54:57,760
they say it's an anti-pattern

00:54:55,119 --> 00:54:59,359
but you know it has worked for us for

00:54:57,760 --> 00:54:59,760
four years we have been recently looking

00:54:59,359 --> 00:55:01,599
at

00:54:59,760 --> 00:55:02,960
another technology that i do recommend

00:55:01,599 --> 00:55:04,160
you to check out if you're using

00:55:02,960 --> 00:55:05,520
prometheus

00:55:04,160 --> 00:55:07,040
um and struggling you might be

00:55:05,520 --> 00:55:08,079
interested in a tool called victoria

00:55:07,040 --> 00:55:10,960
metrics

00:55:08,079 --> 00:55:13,280
um which um we've been recently looking

00:55:10,960 --> 00:55:16,000
to to migrating to

00:55:13,280 --> 00:55:16,400
and it looks very very promising and uh

00:55:16,000 --> 00:55:18,559
it

00:55:16,400 --> 00:55:20,799
among other things does support the push

00:55:18,559 --> 00:55:24,559
uh that we've been missing

00:55:20,799 --> 00:55:27,200
um so yeah i mean first

00:55:24,559 --> 00:55:29,200
i guess first thing that um i would like

00:55:27,200 --> 00:55:31,040
to emphasize here is

00:55:29,200 --> 00:55:33,119
a lot of the time you might be using an

00:55:31,040 --> 00:55:34,799
anti-pattern and it actually works for a

00:55:33,119 --> 00:55:35,359
long long time so we've been doing this

00:55:34,799 --> 00:55:38,559
for

00:55:35,359 --> 00:55:41,760
almost four years um and only now

00:55:38,559 --> 00:55:44,400
um with you know scale uh

00:55:41,760 --> 00:55:46,400
are looking into a different solution so

00:55:44,400 --> 00:55:48,400
contexts also have a

00:55:46,400 --> 00:55:49,760
longevity i mean facebook is using has

00:55:48,400 --> 00:55:53,040
been using php and

00:55:49,760 --> 00:55:55,920
for a long long long time so

00:55:53,040 --> 00:55:57,599
everything um uh every every performance

00:55:55,920 --> 00:55:59,040
suggestion will apply differently and

00:55:57,599 --> 00:56:01,359
and might have a

00:55:59,040 --> 00:56:02,480
different context span as well our

00:56:01,359 --> 00:56:04,400
performance challenge

00:56:02,480 --> 00:56:06,240
as i mentioned is thousands of financial

00:56:04,400 --> 00:56:08,240
computations inside the browser

00:56:06,240 --> 00:56:09,760
so here's a screenshot from grafana so

00:56:08,240 --> 00:56:13,280
these are the

00:56:09,760 --> 00:56:15,520
metrics we would get from our users

00:56:13,280 --> 00:56:16,799
and what you can see on this screenshot

00:56:15,520 --> 00:56:20,079
is that

00:56:16,799 --> 00:56:22,240
um we calculate uh

00:56:20,079 --> 00:56:24,160
calculations on users in the users

00:56:22,240 --> 00:56:27,040
browsers on their computers

00:56:24,160 --> 00:56:28,400
um there's around you know 200

00:56:27,040 --> 00:56:29,680
calculations each taking a few

00:56:28,400 --> 00:56:33,200
milliseconds but

00:56:29,680 --> 00:56:35,839
200 calculations um

00:56:33,200 --> 00:56:38,000
um every second and that's something

00:56:35,839 --> 00:56:40,640
that we worry about so we worry about

00:56:38,000 --> 00:56:42,480
what happens after user weight at half

00:56:40,640 --> 00:56:43,200
you know 10 15 seconds for the website

00:56:42,480 --> 00:56:45,280
it's too loud

00:56:43,200 --> 00:56:46,400
we worry about the next few hours what's

00:56:45,280 --> 00:56:49,119
going to

00:56:46,400 --> 00:56:50,079
be happening as you know our financial

00:56:49,119 --> 00:56:52,240
data gets

00:56:50,079 --> 00:56:53,520
pulls a new life information has to

00:56:52,240 --> 00:56:55,920
recalculate and recalculate and

00:56:53,520 --> 00:56:57,680
recalculate

00:56:55,920 --> 00:56:58,960
so what is our problem our problem is

00:56:57,680 --> 00:57:00,880
called uh

00:56:58,960 --> 00:57:03,359
for us it's optimization for a cpu

00:57:00,880 --> 00:57:04,400
bounded uh situation with high event

00:57:03,359 --> 00:57:07,599
throughput

00:57:04,400 --> 00:57:10,559
uh so what we deal with is um 500 to

00:57:07,599 --> 00:57:14,000
1000 redux actions per second

00:57:10,559 --> 00:57:16,880
that's both system ui and non-ui

00:57:14,000 --> 00:57:18,160
so um as you might guess there's not

00:57:16,880 --> 00:57:19,680
going to be a lot of redux

00:57:18,160 --> 00:57:21,920
there's not going that this many redux

00:57:19,680 --> 00:57:24,079
actions coming from the user a lot of it

00:57:21,920 --> 00:57:27,839
is actually being triggered by the

00:57:24,079 --> 00:57:27,839
system in order to manage

00:57:28,000 --> 00:57:32,880
you know incoming data and all sort of

00:57:31,280 --> 00:57:36,720
bookkeeping that

00:57:32,880 --> 00:57:36,720
is connected to handling

00:57:37,760 --> 00:57:42,480
live market exchange updates

00:57:43,119 --> 00:57:49,839
uh so yeah really really um um

00:57:47,520 --> 00:57:50,960
i'll say i'll be talking a bit more

00:57:49,839 --> 00:57:53,520
about how

00:57:50,960 --> 00:57:54,480
redux handles that later but this is our

00:57:53,520 --> 00:57:56,559
reality

00:57:54,480 --> 00:57:58,799
and another one is the 10 to 2

00:57:56,559 --> 00:58:00,559
competitions per second so that's

00:57:58,799 --> 00:58:02,000
each other runs 10 to 50 milliseconds

00:58:00,559 --> 00:58:03,839
which takes to

00:58:02,000 --> 00:58:05,680
may take around 100 milliseconds to five

00:58:03,839 --> 00:58:09,520
seconds to perform a full sweep so to

00:58:05,680 --> 00:58:12,559
recalculate hundred computations uh

00:58:09,520 --> 00:58:15,040
with this throughput to recalculate um

00:58:12,559 --> 00:58:16,700
the whole user's context the whole

00:58:15,040 --> 00:58:19,760
user's

00:58:16,700 --> 00:58:23,599
[Music]

00:58:19,760 --> 00:58:25,359
sort of um workbook

00:58:23,599 --> 00:58:26,960
we might need up to five seconds so

00:58:25,359 --> 00:58:29,440
obvious of course

00:58:26,960 --> 00:58:30,799
we we uploaded to a web worker and

00:58:29,440 --> 00:58:32,400
that's something that's very specific to

00:58:30,799 --> 00:58:34,160
our use case as well

00:58:32,400 --> 00:58:36,000
i'm using web workers and offloading

00:58:34,160 --> 00:58:40,319
that cpu bounded

00:58:36,000 --> 00:58:43,839
problem to a web worker otherwise

00:58:40,319 --> 00:58:45,599
some of you as

00:58:43,839 --> 00:58:47,520
some of you know node.js is single

00:58:45,599 --> 00:58:49,200
threaded so otherwise we would have

00:58:47,520 --> 00:58:51,760
absolutely no time for the user to be

00:58:49,200 --> 00:58:54,079
able to interact with the eui

00:58:51,760 --> 00:58:55,520
with the user interface so we need to

00:58:54,079 --> 00:58:56,640
move that to a separate thread and that

00:58:55,520 --> 00:59:00,240
separate thread

00:58:56,640 --> 00:59:01,280
is in the web worker so what's cpu bound

00:59:00,240 --> 00:59:03,520
the cpu bound

00:59:01,280 --> 00:59:05,200
it's a fancy term and i when i've heard

00:59:03,520 --> 00:59:09,280
it a few years ago

00:59:05,200 --> 00:59:09,280
um i was really um

00:59:11,040 --> 00:59:14,079
i i could never really really get it it

00:59:12,960 --> 00:59:15,839
sounded very

00:59:14,079 --> 00:59:18,000
exotic to me but it's actually quite

00:59:15,839 --> 00:59:20,799
simple concept basically means that

00:59:18,000 --> 00:59:21,440
your program was was is mostly bounded

00:59:20,799 --> 00:59:24,880
by

00:59:21,440 --> 00:59:27,040
um by uh cpu so your program

00:59:24,880 --> 00:59:28,079
is prime will go faster if you get more

00:59:27,040 --> 00:59:31,200
cpus or

00:59:28,079 --> 00:59:33,680
if you get your program

00:59:31,200 --> 00:59:34,559
run faster on those uh on the cpus you

00:59:33,680 --> 00:59:37,680
have

00:59:34,559 --> 00:59:40,799
um it means that um the

00:59:37,680 --> 00:59:45,040
emphasis in cpu bounded is that

00:59:40,799 --> 00:59:46,799
um in comparison to any other resource

00:59:45,040 --> 00:59:47,599
in a computer like memory or drive or

00:59:46,799 --> 00:59:49,520
network

00:59:47,599 --> 00:59:51,200
they don't matter so you could have if

00:59:49,520 --> 00:59:51,920
you have a cpu bounded problem you could

00:59:51,200 --> 00:59:54,799
buy

00:59:51,920 --> 00:59:56,640
100 terabytes extra ram but your program

00:59:54,799 --> 00:59:58,079
will actually still run the same speed

00:59:56,640 --> 01:00:00,400
because the problem of this is with the

00:59:58,079 --> 01:00:04,640
cpu rather than with

01:00:00,400 --> 01:00:09,839
with other resources and

01:00:04,640 --> 01:00:09,839
a lot of so just to to use this um

01:00:10,079 --> 01:00:13,680
to connect it back to the reality that

01:00:12,720 --> 01:00:16,160
many

01:00:13,680 --> 01:00:16,799
many of us uh have every day is most

01:00:16,160 --> 01:00:18,799
problems

01:00:16,799 --> 01:00:21,280
uh the 99 problems that i mentioned

01:00:18,799 --> 01:00:25,040
earlier a lot of those problems

01:00:21,280 --> 01:00:25,599
are actually um part network bounded

01:00:25,040 --> 01:00:28,720
park c

01:00:25,599 --> 01:00:30,960
part cpu bounded so

01:00:28,720 --> 01:00:32,079
the faster your network so the faster

01:00:30,960 --> 01:00:36,079
your network is

01:00:32,079 --> 01:00:36,079
the faster the website um

01:00:36,400 --> 01:00:41,040
might render of course the the the story

01:00:39,280 --> 01:00:42,960
is not as simple because

01:00:41,040 --> 01:00:45,119
um another thing with boundedness is

01:00:42,960 --> 01:00:47,680
that things kind of tend to

01:00:45,119 --> 01:00:48,960
when you fix one problem as as in

01:00:47,680 --> 01:00:50,400
general in software development

01:00:48,960 --> 01:00:52,880
when you fix one problem another problem

01:00:50,400 --> 01:00:55,040
arises so what happens is

01:00:52,880 --> 01:00:56,720
um when you fix the network boundedness

01:00:55,040 --> 01:00:58,640
you often introduce another boundedness

01:00:56,720 --> 01:00:59,839
so that happens with websites often

01:00:58,640 --> 01:01:02,000
right like so you

01:00:59,839 --> 01:01:03,599
make your javascript to be delivered to

01:01:02,000 --> 01:01:05,920
the customer really quickly

01:01:03,599 --> 01:01:06,960
but once it's got delivered they open it

01:01:05,920 --> 01:01:09,119
on its mobile

01:01:06,960 --> 01:01:10,000
and then the mobile has a cpu that is

01:01:09,119 --> 01:01:11,680
too slow to load

01:01:10,000 --> 01:01:13,520
it quickly so now you have a cpu bounded

01:01:11,680 --> 01:01:16,240
problem so

01:01:13,520 --> 01:01:17,760
um something to to say here is it's

01:01:16,240 --> 01:01:20,559
gonna sound really obvious but it's

01:01:17,760 --> 01:01:21,760
like sixty percent of success in

01:01:20,559 --> 01:01:24,240
performance optimization is to

01:01:21,760 --> 01:01:27,680
understand what's bounding your problem

01:01:24,240 --> 01:01:28,960
and and at every specific time um so you

01:01:27,680 --> 01:01:31,599
actually spending your time

01:01:28,960 --> 01:01:33,200
smart solving a abundance that's

01:01:31,599 --> 01:01:36,400
interesting so there's no point

01:01:33,200 --> 01:01:37,440
um optimizing how um speed of your

01:01:36,400 --> 01:01:40,640
website

01:01:37,440 --> 01:01:41,440
if it actually takes long to load over

01:01:40,640 --> 01:01:44,240
the network

01:01:41,440 --> 01:01:45,440
so that's something to to remember

01:01:44,240 --> 01:01:46,079
that's like essential thing in

01:01:45,440 --> 01:01:48,880
performance

01:01:46,079 --> 01:01:48,880
optimizations

01:01:49,119 --> 01:01:55,359
um yeah so a bit of a javascript uh

01:01:54,079 --> 01:01:57,280
javascript is faster than you thought

01:01:55,359 --> 01:01:58,000
but slower than you want it and what i

01:01:57,280 --> 01:02:01,280
mean by that

01:01:58,000 --> 01:02:02,880
is javascript actually there's a lot of

01:02:01,280 --> 01:02:04,319
optimization that went into javascript

01:02:02,880 --> 01:02:05,920
and it's actually much different story

01:02:04,319 --> 01:02:08,319
when we started four years ago than it

01:02:05,920 --> 01:02:11,680
is now

01:02:08,319 --> 01:02:14,000
um it is slower than um

01:02:11,680 --> 01:02:15,760
sorry it's faster than you thought um

01:02:14,000 --> 01:02:18,160
because there's a lot of optimizations

01:02:15,760 --> 01:02:19,359
so the javascript that you load actually

01:02:18,160 --> 01:02:21,760
gets optimized

01:02:19,359 --> 01:02:24,079
to a lot of the time to assembly code

01:02:21,760 --> 01:02:27,119
and to see

01:02:24,079 --> 01:02:27,440
so things can run especially when you

01:02:27,119 --> 01:02:30,160
run

01:02:27,440 --> 01:02:30,880
smaller bits of code similarly to what

01:02:30,160 --> 01:02:33,359
you could

01:02:30,880 --> 01:02:35,200
achieve with c and languages like that

01:02:33,359 --> 01:02:35,839
it's slower than you wanted is because

01:02:35,200 --> 01:02:37,520
as your

01:02:35,839 --> 01:02:39,359
codebase grows and as the size of your

01:02:37,520 --> 01:02:41,599
project grows it's

01:02:39,359 --> 01:02:42,960
much easier to break those optimizations

01:02:41,599 --> 01:02:44,720
or make those optimizations more

01:02:42,960 --> 01:02:48,160
difficult

01:02:44,720 --> 01:02:51,359
for the um

01:02:48,160 --> 01:02:52,559
uh for the javascript engine so yeah so

01:02:51,359 --> 01:02:54,000
as you can see here these days

01:02:52,559 --> 01:02:58,319
javascript is pretty fast

01:02:54,000 --> 01:03:01,359
um unfortunately git which means um

01:02:58,319 --> 01:03:04,160
just in time optimization

01:03:01,359 --> 01:03:05,200
comes with with um with caveats oh yeah

01:03:04,160 --> 01:03:07,839
i didn't

01:03:05,200 --> 01:03:09,760
a bit about the git so um the thing that

01:03:07,839 --> 01:03:11,920
i said that javascript gets loaded

01:03:09,760 --> 01:03:12,960
as javascript and then gets compiled to

01:03:11,920 --> 01:03:15,359
assembly coding

01:03:12,960 --> 01:03:17,359
and to bytecode into c that's called

01:03:15,359 --> 01:03:19,200
java just in time optimization

01:03:17,359 --> 01:03:20,640
and java does the same thing so actually

01:03:19,200 --> 01:03:24,079
behind the scenes

01:03:20,640 --> 01:03:27,039
the code gets um sped up gets compiled

01:03:24,079 --> 01:03:28,640
into very fast machine code

01:03:27,039 --> 01:03:31,039
and that's happening on the fly that's

01:03:28,640 --> 01:03:32,799
why it's called just in time

01:03:31,039 --> 01:03:34,720
in comparison you know languages like

01:03:32,799 --> 01:03:37,039
rust go c c plus plus

01:03:34,720 --> 01:03:38,400
they get compiled to bite to machine

01:03:37,039 --> 01:03:42,400
code and that's it

01:03:38,400 --> 01:03:44,000
they're super optimized at that point um

01:03:42,400 --> 01:03:45,839
so they don't go for this intermediary

01:03:44,000 --> 01:03:48,000
step and the git

01:03:45,839 --> 01:03:49,760
the just automation happens when you run

01:03:48,000 --> 01:03:51,200
the code so that's important to to

01:03:49,760 --> 01:03:52,480
remember when you run your javascript

01:03:51,200 --> 01:03:54,400
when the user loads

01:03:52,480 --> 01:03:55,680
loads it on their computer that's when

01:03:54,400 --> 01:03:58,000
optimization

01:03:55,680 --> 01:03:58,880
um happens so something that you see on

01:03:58,000 --> 01:04:02,720
the screen is

01:03:58,880 --> 01:04:05,760
uh um just merely assigning

01:04:02,720 --> 01:04:06,960
um a function math power function to a

01:04:05,760 --> 01:04:09,760
variable

01:04:06,960 --> 01:04:12,480
and then calling it will slow it down

01:04:09,760 --> 01:04:15,359
and that's called to some um

01:04:12,480 --> 01:04:17,680
i dug it up from a block from 2014 13 so

01:04:15,359 --> 01:04:19,119
this might not no longer be a case

01:04:17,680 --> 01:04:20,799
but that was the case and there's a lot

01:04:19,119 --> 01:04:23,680
of things like that still

01:04:20,799 --> 01:04:24,559
um in um in v8 a lot of these things get

01:04:23,680 --> 01:04:27,359
fixed

01:04:24,559 --> 01:04:28,720
um but those are the type of challenges

01:04:27,359 --> 01:04:30,720
that you get

01:04:28,720 --> 01:04:32,400
that you know some things just are

01:04:30,720 --> 01:04:35,599
totally unintuitive

01:04:32,400 --> 01:04:36,240
um but unfortunately you know the byte

01:04:35,599 --> 01:04:37,920
code

01:04:36,240 --> 01:04:39,520
when when javascript is compiled the

01:04:37,920 --> 01:04:43,200
byte code changes

01:04:39,520 --> 01:04:45,200
and the engine is not able to optimize

01:04:43,200 --> 01:04:47,839
optimize it out anymore and in this

01:04:45,200 --> 01:04:50,319
example you can see that the slowdown is

01:04:47,839 --> 01:04:52,160
one order of magnitude so it's 10 times

01:04:50,319 --> 01:04:54,559
slower

01:04:52,160 --> 01:04:56,079
there's some more practical caveats um

01:04:54,559 --> 01:04:59,920
there was a it was pretty big

01:04:56,079 --> 01:05:04,960
um a few years ago when um the v8 uh

01:04:59,920 --> 01:05:04,960
update accidentally broke um react

01:05:05,200 --> 01:05:10,000
um there was some interaction between

01:05:07,760 --> 01:05:11,520
between different functionalities

01:05:10,000 --> 01:05:13,200
different features prevent extension bug

01:05:11,520 --> 01:05:14,700
in v8 and

01:05:13,200 --> 01:05:18,079
suddenly

01:05:14,700 --> 01:05:22,000
[Music]

01:05:18,079 --> 01:05:25,680
reacts when executed on a complex

01:05:22,000 --> 01:05:27,760
use case would run um

01:05:25,680 --> 01:05:29,280
would run slower you can read more about

01:05:27,760 --> 01:05:32,240
this

01:05:29,280 --> 01:05:33,119
uh online is a pretty uh it's a pretty

01:05:32,240 --> 01:05:36,160
in-depth

01:05:33,119 --> 01:05:37,839
uh in the problem but also what's

01:05:36,160 --> 01:05:40,559
um what's important to kind of mention

01:05:37,839 --> 01:05:40,559
here is that

01:05:40,720 --> 01:05:45,359
it's the um you might not be able you

01:05:43,920 --> 01:05:46,720
might not have to deal with this sort of

01:05:45,359 --> 01:05:49,280
problems day-to-day

01:05:46,720 --> 01:05:51,039
but they do matter in terms in case of

01:05:49,280 --> 01:05:53,280
frameworks or libraries

01:05:51,039 --> 01:05:55,760
so things that get called a lot under

01:05:53,280 --> 01:05:55,760
the hood

01:05:56,640 --> 01:06:01,039
so where your business code

01:05:59,680 --> 01:06:02,400
in your business code in your domain

01:06:01,039 --> 01:06:03,039
code your high level code is not going

01:06:02,400 --> 01:06:06,160
to be super

01:06:03,039 --> 01:06:08,400
that's super important but in

01:06:06,160 --> 01:06:08,400
um

01:06:11,200 --> 01:06:14,720
the lower you go in terms of your

01:06:13,680 --> 01:06:17,359
architecture

01:06:14,720 --> 01:06:18,880
the more relevant that might be of

01:06:17,359 --> 01:06:21,680
course as usual

01:06:18,880 --> 01:06:22,079
you know it will depend on your project

01:06:21,680 --> 01:06:24,240
um

01:06:22,079 --> 01:06:25,760
other challenges so here's going to be a

01:06:24,240 --> 01:06:29,599
big mishmash a

01:06:25,760 --> 01:06:32,319
um big all-you-can-eat buffet

01:06:29,599 --> 01:06:34,240
of examples so there's a lot of string

01:06:32,319 --> 01:06:35,920
representations in javascript i mean i

01:06:34,240 --> 01:06:38,480
found this on stack overflow

01:06:35,920 --> 01:06:39,839
um i'm not sure if i haven't been aware

01:06:38,480 --> 01:06:41,599
before that but actually

01:06:39,839 --> 01:06:43,440
you know you have one string in

01:06:41,599 --> 01:06:45,119
javascript but this can depending on the

01:06:43,440 --> 01:06:49,839
context be represented

01:06:45,119 --> 01:06:52,160
in actual v8 engine

01:06:49,839 --> 01:06:53,599
in 10 or 15 different ways and you you

01:06:52,160 --> 01:06:54,640
actually it's very difficult to know

01:06:53,599 --> 01:06:56,160
which way it is

01:06:54,640 --> 01:06:58,160
and all those representations have

01:06:56,160 --> 01:06:59,680
different performance characteristics

01:06:58,160 --> 01:07:01,680
so something that i wanted to really

01:06:59,680 --> 01:07:04,240
like put a warning here

01:07:01,680 --> 01:07:05,760
is be careful that's that's another

01:07:04,240 --> 01:07:07,039
point to be careful with your micro

01:07:05,760 --> 01:07:09,119
benchmarks

01:07:07,039 --> 01:07:10,799
because so what we don't notice a lot is

01:07:09,119 --> 01:07:11,920
we run our micro benchmark and it has

01:07:10,799 --> 01:07:15,039
totally different

01:07:11,920 --> 01:07:17,200
performance um

01:07:15,039 --> 01:07:18,799
characteristics then production code

01:07:17,200 --> 01:07:19,599
because production code might run on a

01:07:18,799 --> 01:07:20,640
different string

01:07:19,599 --> 01:07:21,839
and you don't even know that it's

01:07:20,640 --> 01:07:23,520
running on a different string because

01:07:21,839 --> 01:07:26,559
it's very difficult to inspect

01:07:23,520 --> 01:07:28,000
so you have to be very careful when you

01:07:26,559 --> 01:07:29,359
try to optimize production code and you

01:07:28,000 --> 01:07:30,960
try to create your micro benchmark and

01:07:29,359 --> 01:07:32,640
you're like oh i optimized

01:07:30,960 --> 01:07:34,000
the hell out of it ten times faster and

01:07:32,640 --> 01:07:36,640
then you deploy it and

01:07:34,000 --> 01:07:38,160
actually didn't didn't change because it

01:07:36,640 --> 01:07:40,839
used a different representation

01:07:38,160 --> 01:07:42,319
and it was different behavior in a git

01:07:40,839 --> 01:07:44,000
optimization um

01:07:42,319 --> 01:07:45,920
so be very very very very careful with

01:07:44,000 --> 01:07:50,079
micro benchmark i can't

01:07:45,920 --> 01:07:53,200
um emphasize it uh but enough like 19

01:07:50,079 --> 01:07:55,359
95 percent of the time i see a micro

01:07:53,200 --> 01:07:57,039
benchmark i'm like no it's wrong

01:07:55,359 --> 01:07:58,559
and it might sound a bit arrogant but

01:07:57,039 --> 01:08:00,960
unfortunately that's the reality it's

01:07:58,559 --> 01:08:03,039
very difficult to to do these things

01:08:00,960 --> 01:08:05,039
uh there's other things that hurt us a

01:08:03,039 --> 01:08:07,039
lot is there's no hash code

01:08:05,039 --> 01:08:09,680
in string and there's no interning

01:08:07,039 --> 01:08:11,760
interning is

01:08:09,680 --> 01:08:12,960
a process when you can flatten a

01:08:11,760 --> 01:08:14,559
representation into faster

01:08:12,960 --> 01:08:17,839
representation something that

01:08:14,559 --> 01:08:20,480
java has um and a hashcode is

01:08:17,839 --> 01:08:21,920
um a very important feature when you use

01:08:20,480 --> 01:08:25,120
um

01:08:21,920 --> 01:08:28,560
data structures like maps and sets

01:08:25,120 --> 01:08:30,640
uh it hurt for us it hurts us a lot

01:08:28,560 --> 01:08:32,159
um a lot of array representations again

01:08:30,640 --> 01:08:33,199
this comes with the same caveat you know

01:08:32,159 --> 01:08:34,799
be careful

01:08:33,199 --> 01:08:36,400
you you think you have one array you

01:08:34,799 --> 01:08:37,120
think you did your micro benchmark but

01:08:36,400 --> 01:08:38,560
actually you have all these

01:08:37,120 --> 01:08:39,520
representations and actually they will

01:08:38,560 --> 01:08:40,719
run with different performance

01:08:39,520 --> 01:08:43,040
characteristics they be

01:08:40,719 --> 01:08:44,880
they can be up to five times performance

01:08:43,040 --> 01:08:46,239
difference between them

01:08:44,880 --> 01:08:47,920
something that many people are not quite

01:08:46,239 --> 01:08:49,279
aware about object polymorph is

01:08:47,920 --> 01:08:52,319
megamorphism

01:08:49,279 --> 01:08:55,120
so this is that java doesn't have

01:08:52,319 --> 01:08:56,480
and um this is one of the if there's one

01:08:55,120 --> 01:08:58,560
thing to

01:08:56,480 --> 01:09:00,560
um remember from this precision it might

01:08:58,560 --> 01:09:04,080
be this

01:09:00,560 --> 01:09:06,480
so because javascript is dynamic um it

01:09:04,080 --> 01:09:10,560
optimizes based on execution

01:09:06,480 --> 01:09:10,560
so javascript will optimize your code

01:09:11,279 --> 01:09:16,960
based on the shape of the

01:09:14,719 --> 01:09:18,480
data that comes into the function so if

01:09:16,960 --> 01:09:21,359
you call your function

01:09:18,480 --> 01:09:22,960
with just numbers javascript will notice

01:09:21,359 --> 01:09:24,880
it over time and it will say oh

01:09:22,960 --> 01:09:26,400
amazing you're just giving me numbers to

01:09:24,880 --> 01:09:28,560
this function add

01:09:26,400 --> 01:09:30,080
that i'm going to optimize it into very

01:09:28,560 --> 01:09:31,520
efficient machine code because you're

01:09:30,080 --> 01:09:36,319
just giving me numbers

01:09:31,520 --> 01:09:36,319
but if you have these multi-function

01:09:37,199 --> 01:09:40,080
methods or you actually not are you

01:09:38,799 --> 01:09:41,199
actually using your methods a bit

01:09:40,080 --> 01:09:43,120
hazardly

01:09:41,199 --> 01:09:45,120
and you give a string you give a number

01:09:43,120 --> 01:09:46,799
you give a boolean you give an object

01:09:45,120 --> 01:09:47,759
javascript will be like okay dude i

01:09:46,799 --> 01:09:49,040
don't know what you're giving me you're

01:09:47,759 --> 01:09:50,560
giving me different objects

01:09:49,040 --> 01:09:53,199
i'm just gonna use the least efficient

01:09:50,560 --> 01:09:56,960
code so i can handle all these different

01:09:53,199 --> 01:09:57,360
um cases so that's something to

01:09:56,960 --> 01:10:00,239
um

01:09:57,360 --> 01:10:01,920
[Music]

01:10:00,239 --> 01:10:03,600
to remember things are optimized based

01:10:01,920 --> 01:10:06,800
on usage so making it

01:10:03,600 --> 01:10:08,800
obvious how you're using it will

01:10:06,800 --> 01:10:10,320
um um will make it faster we'll make it

01:10:08,800 --> 01:10:10,960
faster for another programmer as well

01:10:10,320 --> 01:10:12,800
because

01:10:10,960 --> 01:10:14,239
you know having things that are like you

01:10:12,800 --> 01:10:15,920
know a swiss

01:10:14,239 --> 01:10:17,520
knife are actually difficult to

01:10:15,920 --> 01:10:20,640
understand by

01:10:17,520 --> 01:10:21,760
other developers on the team as well and

01:10:20,640 --> 01:10:23,360
a tool that's really

01:10:21,760 --> 01:10:24,640
really cool to check out for this if

01:10:23,360 --> 01:10:26,080
you're interested but you know be

01:10:24,640 --> 01:10:27,199
careful because you can get stuck for

01:10:26,080 --> 01:10:28,239
days and days

01:10:27,199 --> 01:10:29,440
uh with this and it might not be

01:10:28,239 --> 01:10:30,640
relevant for your project it's called

01:10:29,440 --> 01:10:32,480
deoptigate

01:10:30,640 --> 01:10:34,239
it's it's a really cool tool to see how

01:10:32,480 --> 01:10:37,360
your objects uh how your

01:10:34,239 --> 01:10:40,960
how your code gets

01:10:37,360 --> 01:10:40,960
gets optimized or de-optimized

01:10:41,040 --> 01:10:44,080
um oh yeah something that i wanted to

01:10:43,120 --> 01:10:47,360
add here very quickly

01:10:44,080 --> 01:10:51,040
is the megamorphism also applies to um

01:10:47,360 --> 01:10:53,199
dictionaries and objects so um

01:10:51,040 --> 01:10:54,159
a bit of trivia i don't know how a bit

01:10:53,199 --> 01:10:57,120
of trivia

01:10:54,159 --> 01:10:58,159
is like if you line your keys in an

01:10:57,120 --> 01:10:59,520
object different way

01:10:58,159 --> 01:11:01,600
this will be actually considered a

01:10:59,520 --> 01:11:03,520
different object in javascript

01:11:01,600 --> 01:11:04,640
so if you say first name and last name

01:11:03,520 --> 01:11:07,440
in your object

01:11:04,640 --> 01:11:08,640
and then you spread it and then you add

01:11:07,440 --> 01:11:10,239
first name second

01:11:08,640 --> 01:11:11,600
this will actually be different

01:11:10,239 --> 01:11:12,880
representation so if you're using

01:11:11,600 --> 01:11:15,679
spreading a lot

01:11:12,880 --> 01:11:16,880
in your um and you have you know large

01:11:15,679 --> 01:11:18,320
objects and you're spreading a lot in

01:11:16,880 --> 01:11:21,280
your in your

01:11:18,320 --> 01:11:23,760
project this will have impact on

01:11:21,280 --> 01:11:25,199
performance

01:11:23,760 --> 01:11:27,280
something more relevant to us against

01:11:25,199 --> 01:11:28,880
slow date implementation something that

01:11:27,280 --> 01:11:30,239
um is kind of interesting because

01:11:28,880 --> 01:11:31,199
there's a bit of a tension between us

01:11:30,239 --> 01:11:32,480
and the rest of the world like i

01:11:31,199 --> 01:11:34,719
mentioned earlier

01:11:32,480 --> 01:11:35,840
we want javascript to run really fast on

01:11:34,719 --> 01:11:37,600
those cpus

01:11:35,840 --> 01:11:38,880
uh the rest of the world is kind of like

01:11:37,600 --> 01:11:42,159
happy with

01:11:38,880 --> 01:11:46,239
um and and rightly so um

01:11:42,159 --> 01:11:50,239
um is web assembly an alternative

01:11:46,239 --> 01:11:51,600
everybody keeps asking me that um maybe

01:11:50,239 --> 01:11:53,679
i'm i'm very skeptical about it

01:11:51,600 --> 01:11:56,960
something to really

01:11:53,679 --> 01:11:57,920
emphasize here is web assembly is still

01:11:56,960 --> 01:11:59,920
javascript

01:11:57,920 --> 01:12:04,000
ssr is still the same engine so

01:11:59,920 --> 01:12:05,150
webassembly still runs in a v8 engine

01:12:04,000 --> 01:12:07,760
so

01:12:05,150 --> 01:12:09,840
[Music]

01:12:07,760 --> 01:12:11,600
there is some opportunities for writing

01:12:09,840 --> 01:12:14,239
more optimized code

01:12:11,600 --> 01:12:14,960
um in web assembly um you can maybe

01:12:14,239 --> 01:12:17,760
scale your

01:12:14,960 --> 01:12:19,040
code base better to be able to leverage

01:12:17,760 --> 01:12:21,600
um

01:12:19,040 --> 01:12:22,800
the just in time compiler and optimizer

01:12:21,600 --> 01:12:26,480
optimizations

01:12:22,800 --> 01:12:28,640
but it's not a um it's not a

01:12:26,480 --> 01:12:29,760
super bullet that everybody's as it is

01:12:28,640 --> 01:12:30,800
and also

01:12:29,760 --> 01:12:32,960
there's still a lot of things in

01:12:30,800 --> 01:12:36,800
webassembly that that aren't quite there

01:12:32,960 --> 01:12:38,719
um for for more details there's a

01:12:36,800 --> 01:12:40,239
presentation that explains it in depth

01:12:38,719 --> 01:12:41,920
half an hour presentation just focus on

01:12:40,239 --> 01:12:45,280
this topic

01:12:41,920 --> 01:12:46,719
um okay so that was um that was

01:12:45,280 --> 01:12:50,719
javascript being fast now pick your

01:12:46,719 --> 01:12:50,719
battles uh we chose react and redux

01:12:50,880 --> 01:12:53,920
maybe you could have chosen something

01:12:52,080 --> 01:12:58,480
more lightweight i'm

01:12:53,920 --> 01:12:58,480
quite happy something to kind of

01:12:58,560 --> 01:13:01,920
was a takeaway for me is okay to choose

01:13:00,400 --> 01:13:05,199
a popular solution

01:13:01,920 --> 01:13:08,159
we have evolved some of the popular

01:13:05,199 --> 01:13:10,080
libraries we we use um we have evolved

01:13:08,159 --> 01:13:12,000
our asynchronous management for example

01:13:10,080 --> 01:13:12,719
a lot we use redux saga for a while we

01:13:12,000 --> 01:13:16,000
use

01:13:12,719 --> 01:13:18,800
we use tanks um now we use some half

01:13:16,000 --> 01:13:19,520
semi homegrown solution based on rxjs

01:13:18,800 --> 01:13:21,199
but reacts

01:13:19,520 --> 01:13:22,880
react and redux stayed with us for a

01:13:21,199 --> 01:13:24,800
long time and it kind of

01:13:22,880 --> 01:13:26,000
is just enough you can get used to

01:13:24,800 --> 01:13:28,560
living with it

01:13:26,000 --> 01:13:30,000
um we use on top of redux we optimize

01:13:28,560 --> 01:13:31,280
for performance of course so we use

01:13:30,000 --> 01:13:34,000
immutable gs which

01:13:31,280 --> 01:13:35,199
we still use it even though i know the

01:13:34,000 --> 01:13:36,560
rest of the world is kind of walking

01:13:35,199 --> 01:13:37,920
away from it but we do really need it

01:13:36,560 --> 01:13:40,400
for performance

01:13:37,920 --> 01:13:41,360
i mean we're quite sad that it's half

01:13:40,400 --> 01:13:44,880
abandoned

01:13:41,360 --> 01:13:47,040
i reselect um quite extensively

01:13:44,880 --> 01:13:49,440
for for creating our transformers and

01:13:47,040 --> 01:13:50,960
and a few other tools

01:13:49,440 --> 01:13:53,360
something we learned about react is not

01:13:50,960 --> 01:13:55,840
necessarily very reactive

01:13:53,360 --> 01:13:57,920
um i'm very sad about this no it's no

01:13:55,840 --> 01:14:00,080
built-in debouncing of rendering so you

01:13:57,920 --> 01:14:01,840
basically can't say okay if this

01:14:00,080 --> 01:14:05,360
component gets called a lot

01:14:01,840 --> 01:14:07,520
you know just ignore um you know

01:14:05,360 --> 01:14:09,920
ignore 90 of the renders and just render

01:14:07,520 --> 01:14:12,560
every 200 milliseconds

01:14:09,920 --> 01:14:13,040
worse even there's no debunking of pro

01:14:12,560 --> 01:14:14,400
updates

01:14:13,040 --> 01:14:16,560
many of you may have not even come

01:14:14,400 --> 01:14:19,199
across it it's very specific to us

01:14:16,560 --> 01:14:20,640
if you're calculating props is very

01:14:19,199 --> 01:14:22,400
expensive

01:14:20,640 --> 01:14:24,000
you actually do want to calculate your

01:14:22,400 --> 01:14:26,640
props

01:14:24,000 --> 01:14:28,320
um for example every half a second or

01:14:26,640 --> 01:14:31,520
every one second

01:14:28,320 --> 01:14:32,960
um we use lazy uh data structures to

01:14:31,520 --> 01:14:34,880
to facilitate that so it's a bit of a

01:14:32,960 --> 01:14:36,159
hack uh i've read recently that

01:14:34,880 --> 01:14:37,760
apparently somebody come up with a

01:14:36,159 --> 01:14:40,080
solution with react hooks

01:14:37,760 --> 01:14:41,440
so maybe maybe we're getting there but

01:14:40,080 --> 01:14:44,159
this one was um

01:14:41,440 --> 01:14:45,040
very frustrating to us for uh for a long

01:14:44,159 --> 01:14:46,640
time because

01:14:45,040 --> 01:14:48,640
there is there's a way to de-bounce and

01:14:46,640 --> 01:14:51,760
other people do this the bounce of

01:14:48,640 --> 01:14:53,280
rendering um but many don't

01:14:51,760 --> 01:14:54,960
don't get this problem of like okay but

01:14:53,280 --> 01:14:56,400
what if i need to debunk my prop updates

01:14:54,960 --> 01:14:59,520
as well

01:14:56,400 --> 01:15:00,960
um but you know overall we're quite

01:14:59,520 --> 01:15:04,000
happy with react and

01:15:00,960 --> 01:15:05,840
um it's uh uh

01:15:04,000 --> 01:15:08,159
with the with a few workarounds that we

01:15:05,840 --> 01:15:12,640
have um it's working out very well for

01:15:08,159 --> 01:15:14,480
for our use case okay so interestingly

01:15:12,640 --> 01:15:16,560
last but not least great performance

01:15:14,480 --> 01:15:20,719
will always start with great design

01:15:16,560 --> 01:15:24,159
um this is a massive topic so i'm only

01:15:20,719 --> 01:15:26,800
going to mention a few things here um

01:15:24,159 --> 01:15:28,960
but first of all right focus on great

01:15:26,800 --> 01:15:32,239
good architecture good design first

01:15:28,960 --> 01:15:33,760
um i see some people you know optimizing

01:15:32,239 --> 01:15:35,040
their agular teams and making like you

01:15:33,760 --> 01:15:36,800
know really efficient

01:15:35,040 --> 01:15:38,880
solution and saying hey look it's really

01:15:36,800 --> 01:15:40,880
fast and

01:15:38,880 --> 01:15:42,640
you can't you can't really then you know

01:15:40,880 --> 01:15:44,239
maintain it or read it

01:15:42,640 --> 01:15:46,080
and there's a lot of like you know hacks

01:15:44,239 --> 01:15:48,000
and tweaks and

01:15:46,080 --> 01:15:50,320
um really what's important if you want a

01:15:48,000 --> 01:15:52,880
long lift solution you wanna you wanna

01:15:50,320 --> 01:15:54,000
optimize for fast feature delivery right

01:15:52,880 --> 01:15:55,280
so

01:15:54,000 --> 01:15:57,199
performance is just one of the

01:15:55,280 --> 01:16:00,719
requirements so you want to

01:15:57,199 --> 01:16:00,719
write a performance application

01:16:01,120 --> 01:16:04,239
as performance as possible but not more

01:16:03,520 --> 01:16:06,080
so

01:16:04,239 --> 01:16:07,600
you kind of want to you kind of wanna

01:16:06,080 --> 01:16:09,360
make sure that you can you can write

01:16:07,600 --> 01:16:12,080
your features as fast as possible

01:16:09,360 --> 01:16:12,800
and at the same time uh optimize when

01:16:12,080 --> 01:16:15,280
it's

01:16:12,800 --> 01:16:16,000
where it's necessary and not even one

01:16:15,280 --> 01:16:19,440
inch

01:16:16,000 --> 01:16:22,560
more so so yeah can back

01:16:19,440 --> 01:16:23,679
make it work first refactor and oddly

01:16:22,560 --> 01:16:26,719
after you measure

01:16:23,679 --> 01:16:28,960
make it fast and when we optimize we up

01:16:26,719 --> 01:16:30,640
we always optimize systemically first

01:16:28,960 --> 01:16:33,120
and tactically second

01:16:30,640 --> 01:16:34,239
so what i what i mean by that is you

01:16:33,120 --> 01:16:37,360
want to do

01:16:34,239 --> 01:16:39,520
optimizations that re redesign

01:16:37,360 --> 01:16:40,719
change your design in a way that's still

01:16:39,520 --> 01:16:42,800
very readable but

01:16:40,719 --> 01:16:43,760
faster rather than doing one of these

01:16:42,800 --> 01:16:45,520
okay let me

01:16:43,760 --> 01:16:47,600
use these tricks to make my algorithm go

01:16:45,520 --> 01:16:49,440
really fast those

01:16:47,600 --> 01:16:50,640
you should you should always you know be

01:16:49,440 --> 01:16:54,159
very careful and do as

01:16:50,640 --> 01:16:56,159
as few those tactical you know local

01:16:54,159 --> 01:16:57,920
optimizations that make your code look

01:16:56,159 --> 01:16:58,800
um look worse you should be very careful

01:16:57,920 --> 01:17:02,400
with those

01:16:58,800 --> 01:17:03,920
because they will hurt you um this is a

01:17:02,400 --> 01:17:06,159
screenshot from the optigate this is

01:17:03,920 --> 01:17:10,239
what it looks like uh try it out

01:17:06,159 --> 01:17:13,520
um um it looks a bit cryptic but um

01:17:10,239 --> 01:17:15,360
it's it's um it's a very very very very

01:17:13,520 --> 01:17:15,679
useful tool to understand how your code

01:17:15,360 --> 01:17:18,000
gets

01:17:15,679 --> 01:17:20,239
optimized and you can see there's a very

01:17:18,000 --> 01:17:22,000
complicated code from from some parser

01:17:20,239 --> 01:17:24,159
bubbler or something like that and you

01:17:22,000 --> 01:17:25,760
can see the co the code that's complex

01:17:24,159 --> 01:17:27,360
to read by your fellow

01:17:25,760 --> 01:17:29,440
developer actually will be difficult for

01:17:27,360 --> 01:17:30,480
the machine to execute a lot of people

01:17:29,440 --> 01:17:32,400
don't

01:17:30,480 --> 01:17:34,080
um or even i don't you don't even think

01:17:32,400 --> 01:17:37,040
about that a lot every day but

01:17:34,080 --> 01:17:38,080
you know um the simplicity of the code

01:17:37,040 --> 01:17:40,159
translates to

01:17:38,080 --> 01:17:42,840
simplicity to read but also translate to

01:17:40,159 --> 01:17:45,440
simplicity to

01:17:42,840 --> 01:17:48,800
optimize so if you keep your

01:17:45,440 --> 01:17:49,520
methods relatively short um if you keep

01:17:48,800 --> 01:17:53,040
your objects

01:17:49,520 --> 01:17:57,280
simple um if you keep your design um

01:17:53,040 --> 01:17:58,640
well well factored um you're probably

01:17:57,280 --> 01:18:01,199
potentially just getting a faster

01:17:58,640 --> 01:18:01,199
application

01:18:01,520 --> 01:18:06,320
evolving great design topic of 1000

01:18:03,360 --> 01:18:10,000
presentations so we use typescript

01:18:06,320 --> 01:18:13,520
perfect best tool for fast code because

01:18:10,000 --> 01:18:14,719
um uh it deals with megamorphism that i

01:18:13,520 --> 01:18:17,920
mentioned earlier

01:18:14,719 --> 01:18:18,640
um it helps you create um predictable

01:18:17,920 --> 01:18:21,120
design

01:18:18,640 --> 01:18:22,880
it helps you manage a complex codebase

01:18:21,120 --> 01:18:24,320
um

01:18:22,880 --> 01:18:26,560
so if you follow the patterns that

01:18:24,320 --> 01:18:29,520
typescript is actually you're much more

01:18:26,560 --> 01:18:33,440
likely to get a nice performing

01:18:29,520 --> 01:18:36,640
a nice well-performing application

01:18:33,440 --> 01:18:39,520
something that we took a lot to learn

01:18:36,640 --> 01:18:41,600
and i would definitely recommend

01:18:39,520 --> 01:18:43,440
you don't make the same mistakes as us

01:18:41,600 --> 01:18:45,120
um that the book effective tab script

01:18:43,440 --> 01:18:45,840
wasn't there when we started it's there

01:18:45,120 --> 01:18:48,400
now

01:18:45,840 --> 01:18:50,320
um if using typescript it's an amazing

01:18:48,400 --> 01:18:53,520
uh source of knowledge

01:18:50,320 --> 01:18:57,840
um we had to learn a lot of it

01:18:53,520 --> 01:18:57,840
through through through our mistakes

01:18:58,320 --> 01:19:02,719
uh monads really useful for managing

01:19:01,199 --> 01:19:05,679
complexity

01:19:02,719 --> 01:19:07,280
um something that we use to handle to a

01:19:05,679 --> 01:19:10,719
lot of the time to

01:19:07,280 --> 01:19:12,400
represent exceptions so we use either

01:19:10,719 --> 01:19:13,600
monad rather than exceptions we use

01:19:12,400 --> 01:19:16,640
option type

01:19:13,600 --> 01:19:18,719
to deal with nullability and other

01:19:16,640 --> 01:19:23,679
monads to

01:19:18,719 --> 01:19:28,000
basically encapsulate the complexity

01:19:23,679 --> 01:19:29,920
um something that's i've not seen as

01:19:28,000 --> 01:19:32,719
popular in javascript community but is

01:19:29,920 --> 01:19:33,679
is being quite popular in java is

01:19:32,719 --> 01:19:36,880
especially for us

01:19:33,679 --> 01:19:37,760
our we have a monolith um because most

01:19:36,880 --> 01:19:39,760
of our

01:19:37,760 --> 01:19:41,679
uh application is a thick client that

01:19:39,760 --> 01:19:44,000
gets deployed on user browsers so it's

01:19:41,679 --> 01:19:46,880
very important for us to

01:19:44,000 --> 01:19:47,760
manage um dependencies in this monolith

01:19:46,880 --> 01:19:50,080
very carefully

01:19:47,760 --> 01:19:51,920
so we use dependency cruiser uh which

01:19:50,080 --> 01:19:53,280
basically allows you to

01:19:51,920 --> 01:19:55,520
manage dependencies between different

01:19:53,280 --> 01:19:57,199
modules um and and not

01:19:55,520 --> 01:19:58,719
for it not to get out of hand and become

01:19:57,199 --> 01:20:00,400
a

01:19:58,719 --> 01:20:01,920
spaghetti code of everything talking to

01:20:00,400 --> 01:20:05,360
everything

01:20:01,920 --> 01:20:07,600
we built a thin layer on top of it

01:20:05,360 --> 01:20:09,520
which which we got inspired by arc unit

01:20:07,600 --> 01:20:11,280
arc united solution in java

01:20:09,520 --> 01:20:12,960
uh which is much much more extensive but

01:20:11,280 --> 01:20:16,480
you can borrow from from that

01:20:12,960 --> 01:20:18,000
tool in order to

01:20:16,480 --> 01:20:20,960
build your simple domain-specific

01:20:18,000 --> 01:20:23,760
language for uh dependencies

01:20:20,960 --> 01:20:24,719
um yeah and we do leverage domain-driven

01:20:23,760 --> 01:20:27,920
design

01:20:24,719 --> 01:20:30,960
um uh domain for a way to

01:20:27,920 --> 01:20:32,480
keep making sure that our code base is

01:20:30,960 --> 01:20:36,320
close to the

01:20:32,480 --> 01:20:36,320
actual problem um

01:20:36,400 --> 01:20:42,400
domain problem and for to manage

01:20:40,000 --> 01:20:43,440
architecture at scale so in order to

01:20:42,400 --> 01:20:45,870
factor our

01:20:43,440 --> 01:20:47,600
our modules um

01:20:45,870 --> 01:20:50,800
[Music]

01:20:47,600 --> 01:20:52,000
to manage dependency between them um in

01:20:50,800 --> 01:20:53,520
in the same way i mean something that's

01:20:52,000 --> 01:20:54,239
really useful with domain-driven design

01:20:53,520 --> 01:20:56,800
is

01:20:54,239 --> 01:20:58,239
if you have uh your modules structure

01:20:56,800 --> 01:21:00,400
and domain concepts you know that

01:20:58,239 --> 01:21:01,280
if there is a dependency between modules

01:21:00,400 --> 01:21:02,639
in the code

01:21:01,280 --> 01:21:04,639
there should be a dependency between

01:21:02,639 --> 01:21:07,120
modules in the real life so

01:21:04,639 --> 01:21:08,480
when when you see uh there's dependency

01:21:07,120 --> 01:21:10,719
in the code but

01:21:08,480 --> 01:21:12,239
you know when you look at the real life

01:21:10,719 --> 01:21:14,080
that doesn't seem to be

01:21:12,239 --> 01:21:15,600
a relationship you should say okay

01:21:14,080 --> 01:21:17,600
something is wrong with our code

01:21:15,600 --> 01:21:19,920
so it's really useful in that that's one

01:21:17,600 --> 01:21:21,760
way how domain driven design is useful

01:21:19,920 --> 01:21:23,440
um there's this there's many many other

01:21:21,760 --> 01:21:24,239
ways if you want to start simple the

01:21:23,440 --> 01:21:26,560
best way to

01:21:24,239 --> 01:21:29,280
to start i think personally is to check

01:21:26,560 --> 01:21:33,679
out um

01:21:29,280 --> 01:21:38,480
dax which is a um a library for

01:21:33,679 --> 01:21:38,480
uh helps you start this journey in redux

01:21:39,040 --> 01:21:43,840
um sorry just very quickly some water

01:21:44,639 --> 01:21:48,239
so yeah in summary don't get distracted

01:21:47,120 --> 01:21:50,320
by other people's problems

01:21:48,239 --> 01:21:52,000
including this presentation you might

01:21:50,320 --> 01:21:52,560
have a different problem than other

01:21:52,000 --> 01:21:56,639
people

01:21:52,560 --> 01:21:58,159
and that's okay um javascript

01:21:56,639 --> 01:22:00,000
faster than you thought because a lot of

01:21:58,159 --> 01:22:02,080
things gets optimized for you

01:22:00,000 --> 01:22:03,679
but slower than you want it because if

01:22:02,080 --> 01:22:07,040
you're not careful all the things

01:22:03,679 --> 01:22:08,000
will not get optimized um and we will

01:22:07,040 --> 01:22:10,159
remain slow

01:22:08,000 --> 01:22:11,120
pick your battles you don't always have

01:22:10,159 --> 01:22:13,600
to have a new

01:22:11,120 --> 01:22:15,040
shiny technology you don't always build

01:22:13,600 --> 01:22:18,159
something yourself

01:22:15,040 --> 01:22:18,960
um you can just pick the most popular

01:22:18,159 --> 01:22:22,159
thing first

01:22:18,960 --> 01:22:23,600
and then iterate and last but not least

01:22:22,159 --> 01:22:25,040
remember that great performance there's

01:22:23,600 --> 01:22:26,239
a lot of tricks to great performance

01:22:25,040 --> 01:22:28,719
there's a lot of

01:22:26,239 --> 01:22:29,920
knowledge how to optimize things but you

01:22:28,719 --> 01:22:32,960
know start you start with

01:22:29,920 --> 01:22:34,639
great design actually um

01:22:32,960 --> 01:22:36,560
things might just get optimized for you

01:22:34,639 --> 01:22:39,040
most of the time

01:22:36,560 --> 01:22:40,080
and even as you go optimizing things

01:22:39,040 --> 01:22:41,520
it's gonna be

01:22:40,080 --> 01:22:43,840
it's gonna be much much much much much

01:22:41,520 --> 01:22:43,840
easier

01:22:44,320 --> 01:22:48,960
thank you that's uh that's it really for

01:22:46,560 --> 01:22:50,880
the uh for the all-you-can-eat buffet

01:22:48,960 --> 01:22:52,080
uh of tips and tricks from performance

01:22:50,880 --> 01:22:53,440
world

01:22:52,080 --> 01:22:57,280
and yeah if they have any questions

01:22:53,440 --> 01:22:57,280
comments or observations um

01:22:58,960 --> 01:23:01,600
i think chris

01:23:04,480 --> 01:23:07,760
thanks alex yeah i think chris has got

01:23:06,159 --> 01:23:08,880
his hand up chris do you want to ask a

01:23:07,760 --> 01:23:11,840
question

01:23:08,880 --> 01:23:12,560
uh thank you um sorry a couple of

01:23:11,840 --> 01:23:15,600
questions

01:23:12,560 --> 01:23:16,320
if i may first of all um so you said you

01:23:15,600 --> 01:23:19,040
were doing it

01:23:16,320 --> 01:23:19,600
all in typescript uh have you got any

01:23:19,040 --> 01:23:22,639
tips

01:23:19,600 --> 01:23:24,080
in terms of linting or compilation rules

01:23:22,639 --> 01:23:27,360
that helped you with performance

01:23:24,080 --> 01:23:28,560
or um because also

01:23:27,360 --> 01:23:30,719
because i mean one of the examples you

01:23:28,560 --> 01:23:31,760
gave i didn't think that would compile

01:23:30,719 --> 01:23:34,239
in typescript

01:23:31,760 --> 01:23:36,880
um because obviously it's a statically

01:23:34,239 --> 01:23:36,880
typed language

01:23:37,120 --> 01:23:40,560
yeah um

01:23:41,280 --> 01:23:46,840
that's a very good question um i have to

01:23:44,480 --> 01:23:50,239
think long and hard

01:23:46,840 --> 01:23:53,679
um so

01:23:50,239 --> 01:23:53,679
so i don't know so

01:23:54,000 --> 01:24:00,400
um so one thing that comes to mind

01:23:57,840 --> 01:24:01,920
is uh i i'd have to to to give you a

01:24:00,400 --> 01:24:02,880
more comprehensive answer i'd have to

01:24:01,920 --> 01:24:04,639
think more but

01:24:02,880 --> 01:24:06,719
something that i could probably say of

01:24:04,639 --> 01:24:09,840
the ca of the cuff is

01:24:06,719 --> 01:24:14,159
um there's an interesting problem uh

01:24:09,840 --> 01:24:17,040
for um with spreading that i mentioned

01:24:14,159 --> 01:24:18,560
so um when you spread objects you

01:24:17,040 --> 01:24:20,639
actually create a slightly different

01:24:18,560 --> 01:24:23,199
object representation

01:24:20,639 --> 01:24:24,560
and so if you spreading a lot you will

01:24:23,199 --> 01:24:27,679
actually confuse

01:24:24,560 --> 01:24:29,520
uh confuse the v8 a lot

01:24:27,679 --> 01:24:30,719
so you can very easily think that using

01:24:29,520 --> 01:24:34,480
the same object

01:24:30,719 --> 01:24:36,239
um but um v8 still thinks it's a

01:24:34,480 --> 01:24:39,280
different object and it will

01:24:36,239 --> 01:24:42,320
basically de-optimize all functions that

01:24:39,280 --> 01:24:44,560
um that that that that

01:24:42,320 --> 01:24:46,719
that get those uh presentations as

01:24:44,560 --> 01:24:48,239
arguments

01:24:46,719 --> 01:24:51,760
so the way to deal with that in

01:24:48,239 --> 01:24:53,920
typescript is is to use classes

01:24:51,760 --> 01:24:55,120
so if you just use plain dictionaries

01:24:53,920 --> 01:24:58,800
you can always like

01:24:55,120 --> 01:25:00,080
re re-shuffle them so when you spread

01:24:58,800 --> 01:25:01,520
basically when you spread things kind of

01:25:00,080 --> 01:25:02,719
move around properties i don't know if

01:25:01,520 --> 01:25:03,920
that's that kind of makes sense what i'm

01:25:02,719 --> 01:25:06,000
saying

01:25:03,920 --> 01:25:06,960
but if you want to use classes uh

01:25:06,000 --> 01:25:10,880
classes only

01:25:06,960 --> 01:25:12,320
always have um fields aligned so fields

01:25:10,880 --> 01:25:14,880
will always go in like

01:25:12,320 --> 01:25:17,600
in the the the properties of the class

01:25:14,880 --> 01:25:19,120
will always be in the same order

01:25:17,600 --> 01:25:21,040
so that's one way to to leverage

01:25:19,120 --> 01:25:22,560
typescript now there's a there's a small

01:25:21,040 --> 01:25:25,199
trick here that i'm going to

01:25:22,560 --> 01:25:26,480
to sell you on is you need to put a

01:25:25,199 --> 01:25:29,600
secret symbol

01:25:26,480 --> 01:25:31,840
to your class because um actually

01:25:29,600 --> 01:25:33,440
many people um i'm sorry i didn't know

01:25:31,840 --> 01:25:34,719
that many people don't know that i

01:25:33,440 --> 01:25:37,840
didn't know that

01:25:34,719 --> 01:25:39,760
initially but actually um there's a

01:25:37,840 --> 01:25:42,159
um there's a problem with typescript

01:25:39,760 --> 01:25:47,360
that um

01:25:42,159 --> 01:25:47,360
um you can actually uh uh uh

01:25:48,159 --> 01:25:52,639
in typescript you you could even if you

01:25:50,239 --> 01:25:54,800
define a class in your as your

01:25:52,639 --> 01:25:56,159
argument of your function you can still

01:25:54,800 --> 01:25:59,760
pass a structurally

01:25:56,159 --> 01:26:02,159
um identical um structure

01:25:59,760 --> 01:26:02,960
so so for example if you use instanceof

01:26:02,159 --> 01:26:04,239
in that method

01:26:02,960 --> 01:26:06,239
you think oh yeah i can use instance of

01:26:04,239 --> 01:26:07,280
it's a class no actually captured will

01:26:06,239 --> 01:26:10,880
accept

01:26:07,280 --> 01:26:14,080
a non-class instance um and there's a

01:26:10,880 --> 01:26:15,679
huge argument on github about this um

01:26:14,080 --> 01:26:17,120
so in order to like make sure that this

01:26:15,679 --> 01:26:18,800
is really that class you can put like a

01:26:17,120 --> 01:26:21,760
secret symbol property

01:26:18,800 --> 01:26:23,440
that's read only in private and then um

01:26:21,760 --> 01:26:25,360
you'll only be able to use it like that

01:26:23,440 --> 01:26:28,639
but that's like one example

01:26:25,360 --> 01:26:29,920
of how you could leverage typescript

01:26:28,639 --> 01:26:31,679
we actually leveraged typescript this

01:26:29,920 --> 01:26:35,120
way to to to to manage

01:26:31,679 --> 01:26:38,320
this megamorphism problem okay

01:26:35,120 --> 01:26:39,199
thank you um and the well the other

01:26:38,320 --> 01:26:40,239
question is probably

01:26:39,199 --> 01:26:42,320
i'll face it in the chat because it's

01:26:40,239 --> 01:26:43,760
more general and not directly javascript

01:26:42,320 --> 01:26:45,360
related

01:26:43,760 --> 01:26:46,960
feel free to reach out to me as well if

01:26:45,360 --> 01:26:49,360
you want to kind of have thank you

01:26:46,960 --> 01:26:51,520
more more in depth that's pretty thank

01:26:49,360 --> 01:26:53,600
you

01:26:51,520 --> 01:26:56,080
good stuff yeah anyone else got any

01:26:53,600 --> 01:26:56,080
questions

01:26:59,679 --> 01:27:05,360
no um i mean i've got a couple bubble um

01:27:02,719 --> 01:27:06,239
just before we wrap up uh yeah really

01:27:05,360 --> 01:27:09,280
interesting use of

01:27:06,239 --> 01:27:13,040
um web workers uh i'm always looking for

01:27:09,280 --> 01:27:15,520
uh yeah um for opportunities to

01:27:13,040 --> 01:27:16,239
to um you know to process things

01:27:15,520 --> 01:27:19,199
elsewhere

01:27:16,239 --> 01:27:20,480
um where possible um have you got any

01:27:19,199 --> 01:27:22,480
other

01:27:20,480 --> 01:27:23,760
you know uses for web workers that you

01:27:22,480 --> 01:27:26,400
could just share with everyone

01:27:23,760 --> 01:27:27,360
you know what what what um yeah what

01:27:26,400 --> 01:27:30,639
other

01:27:27,360 --> 01:27:33,440
um maybe cpu intensive um

01:27:30,639 --> 01:27:36,800
processor can be can we run there that

01:27:33,440 --> 01:27:40,719
don't need to be in the main thread

01:27:36,800 --> 01:27:42,560
um yes that's a really really

01:27:40,719 --> 01:27:46,800
interesting question

01:27:42,560 --> 01:27:47,199
um um so one thing another thing that we

01:27:46,800 --> 01:27:50,800
do

01:27:47,199 --> 01:27:53,199
is we actually do our websocket

01:27:50,800 --> 01:27:56,239
communication web workers

01:27:53,199 --> 01:27:58,400
okay uh so um uh

01:27:56,239 --> 01:28:01,280
if you have a lot of messages coming in

01:27:58,400 --> 01:28:03,120
um passing those messages

01:28:01,280 --> 01:28:05,520
um from strength to just in a

01:28:03,120 --> 01:28:07,760
presentation can be slow-ish

01:28:05,520 --> 01:28:09,360
um so but then there's a trick that when

01:28:07,760 --> 01:28:09,920
you transform things from the web worker

01:28:09,360 --> 01:28:12,480
they get

01:28:09,920 --> 01:28:14,320
actually um sent as a bina like some

01:28:12,480 --> 01:28:15,600
sort of efficient memory or presentation

01:28:14,320 --> 01:28:16,800
binary representation or something like

01:28:15,600 --> 01:28:18,560
that i don't know the details so i'm

01:28:16,800 --> 01:28:21,120
going to be handwriting a lot

01:28:18,560 --> 01:28:22,719
um but actually it's already a binary

01:28:21,120 --> 01:28:24,239
representation it's not string so what

01:28:22,719 --> 01:28:26,159
we do is

01:28:24,239 --> 01:28:27,360
we have a very very small web worker

01:28:26,159 --> 01:28:30,880
that

01:28:27,360 --> 01:28:32,560
it's my responsibility is to

01:28:30,880 --> 01:28:35,199
pass those message messages from

01:28:32,560 --> 01:28:37,199
websocket in json strings

01:28:35,199 --> 01:28:38,639
and then send them very on a very fast

01:28:37,199 --> 01:28:42,800
binary protocol

01:28:38,639 --> 01:28:44,400
to the main um to the main thread

01:28:42,800 --> 01:28:45,920
so that's one thing that comes to mind

01:28:44,400 --> 01:28:49,520
something that's a bit of a

01:28:45,920 --> 01:28:52,880
um um a shameless plug

01:28:49,520 --> 01:28:53,920
is uh we we wrote as a simple actor

01:28:52,880 --> 01:28:57,280
library

01:28:53,920 --> 01:29:00,320
uh for communicating with web workers uh

01:28:57,280 --> 01:29:03,120
uh libraries named tangi um

01:29:00,320 --> 01:29:04,159
which means um which means uh younger

01:29:03,120 --> 01:29:06,639
sister

01:29:04,159 --> 01:29:07,520
in canada uh which is my my wife's

01:29:06,639 --> 01:29:10,560
language

01:29:07,520 --> 01:29:12,080
is a joke because akka which is scala

01:29:10,560 --> 01:29:14,239
a solution for actress means almost

01:29:12,080 --> 01:29:16,239
older sister in that language

01:29:14,239 --> 01:29:17,600
um so that's something we struggle a lot

01:29:16,239 --> 01:29:19,679
with web workers for example

01:29:17,600 --> 01:29:20,960
is is doing this like orchestration

01:29:19,679 --> 01:29:21,440
communication bit so we wrote this kind

01:29:20,960 --> 01:29:23,199
of very

01:29:21,440 --> 01:29:25,360
thin layer and sort of wraps up

01:29:23,199 --> 01:29:26,639
everything um and you just kind of like

01:29:25,360 --> 01:29:28,239
you know you just have promises you just

01:29:26,639 --> 01:29:30,159
send them send a message

01:29:28,239 --> 01:29:31,679
and you get a promise rather than having

01:29:30,159 --> 01:29:34,639
to deal with the channels and

01:29:31,679 --> 01:29:35,679
all this stuff or stuff yeah yeah

01:29:34,639 --> 01:29:38,560
awesome yeah i mean

01:29:35,679 --> 01:29:39,760
yeah i have found a few uh nice uses for

01:29:38,560 --> 01:29:41,120
it myself

01:29:39,760 --> 01:29:43,360
especially with apps that are doing

01:29:41,120 --> 01:29:44,960
audio and visual processing or

01:29:43,360 --> 01:29:45,920
manipulating the dom as well as playing

01:29:44,960 --> 01:29:47,920
back some audio

01:29:45,920 --> 01:29:50,000
i might decide to delegate certain

01:29:47,920 --> 01:29:52,480
processes to to a worker

01:29:50,000 --> 01:29:54,000
um yeah brilliant i mean one one more

01:29:52,480 --> 01:29:56,000
question for you that reminded me

01:29:54,000 --> 01:29:57,280
just very quickly i know that um it was

01:29:56,000 --> 01:29:58,719
going to be very good i know that google

01:29:57,280 --> 01:30:01,840
has been working on some solution

01:29:58,719 --> 01:30:03,199
to do dom uh full dome uh rendering in

01:30:01,840 --> 01:30:04,480
the web worker i don't know where das is

01:30:03,199 --> 01:30:06,320
at but i was really excited about that

01:30:04,480 --> 01:30:08,800
two years ago

01:30:06,320 --> 01:30:10,320
right cool okay yeah yeah i'll look it

01:30:08,800 --> 01:30:13,040
up and i put in the comments what

01:30:10,320 --> 01:30:14,080
the uh the name of the uh uh the link to

01:30:13,040 --> 01:30:16,639
a github

01:30:14,080 --> 01:30:17,600
repo for that yeah great yeah thanks

01:30:16,639 --> 01:30:19,520
pablo

01:30:17,600 --> 01:30:21,040
uh yeah one last question for me so you

01:30:19,520 --> 01:30:24,560
mentioned um

01:30:21,040 --> 01:30:26,880
that you used some kind of um i think

01:30:24,560 --> 01:30:28,639
a fork or something of um of rxjs or

01:30:26,880 --> 01:30:31,679
something that you said that you

01:30:28,639 --> 01:30:33,840
use instead of redux sagas

01:30:31,679 --> 01:30:34,960
i i didn't quite catch whether that was

01:30:33,840 --> 01:30:37,040
for

01:30:34,960 --> 01:30:39,840
application design reasons or whether it

01:30:37,040 --> 01:30:42,480
was for performance

01:30:39,840 --> 01:30:43,280
i was for application uh design reasons

01:30:42,480 --> 01:30:46,320
right

01:30:43,280 --> 01:30:47,760
um rxgs is

01:30:46,320 --> 01:30:50,239
okay so that that would start a very

01:30:47,760 --> 01:30:52,880
very long round so i need to be careful

01:30:50,239 --> 01:30:53,679
rxjs is a very complex machinery and

01:30:52,880 --> 01:30:57,120
i've been

01:30:53,679 --> 01:30:59,520
um not trying not to be too arrogant but

01:30:57,120 --> 01:31:01,760
i've been in software for a while

01:30:59,520 --> 01:31:03,920
and i find rxj is very complex and we've

01:31:01,760 --> 01:31:05,679
been work we've been using it for

01:31:03,920 --> 01:31:07,360
three years now and i still find it very

01:31:05,679 --> 01:31:10,719
complex and difficult to test

01:31:07,360 --> 01:31:11,360
specifically and type reason so yeah so

01:31:10,719 --> 01:31:13,840
we

01:31:11,360 --> 01:31:15,280
built a layer on top which is also open

01:31:13,840 --> 01:31:16,000
source but maybe not explained very well

01:31:15,280 --> 01:31:19,090
we built a layer

01:31:16,000 --> 01:31:21,360
on top which basically um

01:31:19,090 --> 01:31:24,320
[Music]

01:31:21,360 --> 01:31:25,040
reduced the use of operators to minimum

01:31:24,320 --> 01:31:26,159
and

01:31:25,040 --> 01:31:28,960
and i think that i think the most

01:31:26,159 --> 01:31:30,719
problems we had with rxjs is from having

01:31:28,960 --> 01:31:32,400
encoding a lot of logic in the

01:31:30,719 --> 01:31:33,440
plentitude of the operators which all

01:31:32,400 --> 01:31:34,880
work differently under different

01:31:33,440 --> 01:31:37,280
conditions

01:31:34,880 --> 01:31:38,320
yeah and then made it hard as a test and

01:31:37,280 --> 01:31:41,440
made it harder to

01:31:38,320 --> 01:31:42,800
to to test and reason about yeah and we

01:31:41,440 --> 01:31:45,120
get really weird

01:31:42,800 --> 01:31:46,320
yeah issues when refactoring or yeah

01:31:45,120 --> 01:31:49,280
right well

01:31:46,320 --> 01:31:50,800
yeah this is a this is still really um

01:31:49,280 --> 01:31:52,639
uh yeah might not be performance related

01:31:50,800 --> 01:31:53,760
but still really useful information for

01:31:52,639 --> 01:31:57,120
everyone on the court to

01:31:53,760 --> 01:31:58,639
to hear for sure um yeah

01:31:57,120 --> 01:32:00,159
brilliant well if i'll just give

01:31:58,639 --> 01:32:02,480
everyone one more chance to

01:32:00,159 --> 01:32:04,239
to speak or to offer a comment or

01:32:02,480 --> 01:32:06,800
question

01:32:04,239 --> 01:32:06,800
anybody

01:32:07,760 --> 01:32:14,960
no okay well in that case i'm gonna

01:32:11,120 --> 01:32:18,080
wrap up by thanking profusely our two

01:32:14,960 --> 01:32:18,880
brilliant speakers so yeah thank you so

01:32:18,080 --> 01:32:23,600
much gunner

01:32:18,880 --> 01:32:26,880
for your talk earlier on quad 3 and d3

01:32:23,600 --> 01:32:29,040
and yeah thank you pavel um

01:32:26,880 --> 01:32:30,320
yeah two fantastic talks another great

01:32:29,040 --> 01:32:32,800
event thanks everyone

01:32:30,320 --> 01:32:34,159
for joining i think we've uh a few

01:32:32,800 --> 01:32:37,199
people have dropped out already but

01:32:34,159 --> 01:32:40,719
um uh yeah it's good to see uh

01:32:37,199 --> 01:32:42,400
uh your faces or your avatars and

01:32:40,719 --> 01:32:46,480
i look forward to seeing you next time

01:32:42,400 --> 01:32:46,480
so yeah many thanks to our speakers

01:32:47,040 --> 01:32:51,920
yeah take care everyone have a very good

01:32:49,520 --> 01:32:51,920
evening

01:32:52,159 --> 01:32:55,840
alex thanks a lot

01:33:14,000 --> 01:33:23,840
one more time

01:33:24,660 --> 01:33:36,760
[Music]

01:33:34,840 --> 01:34:09,039
so

01:33:36,760 --> 01:34:09,039
[Music]

01:34:13,570 --> 01:34:58,809
[Music]

01:34:58,840 --> 01:35:01,840
so

01:35:02,320 --> 01:35:05,960
[Music]

01:35:02,870 --> 01:35:05,960
[Applause]

01:35:05,980 --> 01:35:24,729
[Music]

01:35:26,840 --> 01:35:34,609
foreign

01:35:28,530 --> 01:35:34,609
[Music]

01:35:40,840 --> 01:35:57,840
so foreign

01:35:59,290 --> 01:36:27,939
[Music]

01:36:32,240 --> 01:36:39,710
[Music]

01:36:36,840 --> 01:36:50,499
so

01:36:39,710 --> 01:36:50,499
[Music]

01:36:50,840 --> 01:36:53,840
do

01:36:57,110 --> 01:37:00,160
[Music]

01:37:05,760 --> 01:37:07,840
foreign

01:37:07,950 --> 01:37:16,980
[Music]

01:37:11,990 --> 01:37:25,289
[Applause]

01:37:16,980 --> 01:37:25,289
[Music]

01:37:27,420 --> 01:37:35,090
[Music]

01:37:32,840 --> 01:37:54,110
so

01:37:35,090 --> 01:37:57,229
[Music]

01:37:54,110 --> 01:37:57,229
[Applause]

01:37:58,370 --> 01:38:01,460
[Music]

01:38:04,560 --> 01:38:06,639

YouTube URL: https://www.youtube.com/watch?v=s-_LW177Tj4


