Title: React Hooks - JS Monthly - August 2019
Publication date: 2019-09-19
Playlist: JS Monthly London
Description: 
	Presented by Nicolas Marcora

Building modern React applications, now with 100% fewer classes.
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,120 --> 00:00:05,339
I'm gonna be talking about react hooks

00:00:02,179 --> 00:00:07,410
I'm gonna skim over a lot of the basics

00:00:05,339 --> 00:00:09,120
because I've only got half an hour so I

00:00:07,410 --> 00:00:12,420
want to try and keep it nice and concise

00:00:09,120 --> 00:00:15,269
um what I really want to talk about is

00:00:12,420 --> 00:00:17,279
what I think is one of the actually the

00:00:15,269 --> 00:00:20,369
biggest selling point for hooks that is

00:00:17,279 --> 00:00:22,199
usually overlooked so let me start

00:00:20,369 --> 00:00:25,099
actually by asking raise your hand if

00:00:22,199 --> 00:00:27,420
you use react or if you've use react

00:00:25,099 --> 00:00:35,160
perfect and raise your hand if you've

00:00:27,420 --> 00:00:37,290
use hooks perfect now probably when you

00:00:35,160 --> 00:00:39,329
use hooks the main selling point for

00:00:37,290 --> 00:00:40,469
hooks you've been told this you don't

00:00:39,329 --> 00:00:42,480
have to use classes anymore

00:00:40,469 --> 00:00:44,730
you could just use functions and you

00:00:42,480 --> 00:00:46,920
never need to use classes again and and

00:00:44,730 --> 00:00:48,300
as a side sort of speech there some

00:00:46,920 --> 00:00:52,140
people say oh actually and you can also

00:00:48,300 --> 00:00:53,820
share behavioural so stateful behavior

00:00:52,140 --> 00:00:55,680
you can share that across components and

00:00:53,820 --> 00:00:56,940
that I think is the biggest selling

00:00:55,680 --> 00:00:59,280
point that I will be talking about today

00:00:56,940 --> 00:01:00,960
and it doesn't get emphasized enough so

00:00:59,280 --> 00:01:04,619
I just wanted to focus on that a little

00:01:00,960 --> 00:01:07,350
bit um but I will briefly go over what

00:01:04,619 --> 00:01:13,260
hooks are anyway very quickly and why

00:01:07,350 --> 00:01:14,100
they're here so let me click there let

00:01:13,260 --> 00:01:16,950
me get that out of the way

00:01:14,100 --> 00:01:20,909
there we are so hooks were introduced in

00:01:16,950 --> 00:01:23,909
react 16.8 I believe how long ago was it

00:01:20,909 --> 00:01:26,759
now about three months ago fairly

00:01:23,909 --> 00:01:28,470
recently um they allow this is this is

00:01:26,759 --> 00:01:30,479
taken from the react documentation right

00:01:28,470 --> 00:01:31,979
they allow functional components to use

00:01:30,479 --> 00:01:33,540
States and other react features that

00:01:31,979 --> 00:01:35,909
were only possible with classes until

00:01:33,540 --> 00:01:37,740
now right so that's usually what people

00:01:35,909 --> 00:01:39,060
hear when they hear hooks it's like well

00:01:37,740 --> 00:01:43,070
I don't need to use classes anymore and

00:01:39,060 --> 00:01:46,530
that's true but the motivation was

00:01:43,070 --> 00:01:48,000
many-fold right so one of the main

00:01:46,530 --> 00:01:50,430
motivations was that it was hard before

00:01:48,000 --> 00:01:52,610
to reuse stateful logic between

00:01:50,430 --> 00:01:55,829
components so if you wanted to share

00:01:52,610 --> 00:01:58,170
different behavior so the same behavior

00:01:55,829 --> 00:01:59,610
across many components before it was

00:01:58,170 --> 00:02:01,320
quite hard to do you had to resort to

00:01:59,610 --> 00:02:02,640
more advanced techniques like hi or the

00:02:01,320 --> 00:02:05,100
components and render props and stuff

00:02:02,640 --> 00:02:07,250
like that and hooks just make that way

00:02:05,100 --> 00:02:10,560
way simpler as to I'll show you later on

00:02:07,250 --> 00:02:13,030
um and then again this is from the react

00:02:10,560 --> 00:02:15,670
team itself so components

00:02:13,030 --> 00:02:17,770
or class components they were quite hard

00:02:15,670 --> 00:02:19,330
to understand you had to split it into

00:02:17,770 --> 00:02:20,980
smaller functions you have component in

00:02:19,330 --> 00:02:22,030
mound component will update component

00:02:20,980 --> 00:02:24,700
will amount and you have to sort of

00:02:22,030 --> 00:02:26,560
split that behavior across and all such

00:02:24,700 --> 00:02:28,540
as classes confuse people and machines

00:02:26,560 --> 00:02:30,130
apparently so when using classes you

00:02:28,540 --> 00:02:31,330
have to use the this keyword you have to

00:02:30,130 --> 00:02:32,230
learn about binding you have to learn

00:02:31,330 --> 00:02:36,250
about a lot of stuff

00:02:32,230 --> 00:02:37,870
so technically hopefully hooks take a

00:02:36,250 --> 00:02:42,070
lot of that overhead away and they make

00:02:37,870 --> 00:02:43,270
stuff a little bit simpler again very

00:02:42,070 --> 00:02:45,700
briefly I'm going to touch up on the

00:02:43,270 --> 00:02:49,080
basic built-in hooks that react uses so

00:02:45,700 --> 00:02:51,310
you state it's a hook that allows us to

00:02:49,080 --> 00:02:53,650
just like before when we had classes

00:02:51,310 --> 00:02:56,170
have state only now we can have state in

00:02:53,650 --> 00:02:59,500
a function instead of a class the way to

00:02:56,170 --> 00:03:01,900
use it is fairly simple and we just call

00:02:59,500 --> 00:03:03,850
you state give it any initial state here

00:03:01,900 --> 00:03:05,590
and then what we get back is an array

00:03:03,850 --> 00:03:08,140
and the first value of the array is a

00:03:05,590 --> 00:03:09,970
getter for our value so this is how we

00:03:08,140 --> 00:03:11,560
get the value and then we get a setter

00:03:09,970 --> 00:03:13,570
which is basically just a function that

00:03:11,560 --> 00:03:18,370
anytime we call that function will

00:03:13,570 --> 00:03:21,340
change the value that's in here the next

00:03:18,370 --> 00:03:23,230
one is use effect and use effect is a

00:03:21,340 --> 00:03:26,410
little bit more complex but use effect

00:03:23,230 --> 00:03:28,720
essentially encompasses all of the

00:03:26,410 --> 00:03:30,280
lifecycle that we had before with

00:03:28,720 --> 00:03:31,840
classes right so you can achieve very

00:03:30,280 --> 00:03:35,590
similar results I see what I've done

00:03:31,840 --> 00:03:37,690
with component will mount component the

00:03:35,590 --> 00:03:40,060
update component will amount and all the

00:03:37,690 --> 00:03:42,340
stuff combined into one single function

00:03:40,060 --> 00:03:44,200
called use effect and the way it works

00:03:42,340 --> 00:03:46,180
is it takes two arguments the first one

00:03:44,200 --> 00:03:48,489
is what's the effect that I'm trying to

00:03:46,180 --> 00:03:51,430
run and the second argument is an array

00:03:48,489 --> 00:03:54,940
and the array is just dependencies of

00:03:51,430 --> 00:03:56,769
this effect meaning when anything inside

00:03:54,940 --> 00:03:58,329
this array changes value I'm gonna

00:03:56,769 --> 00:04:00,940
compare them and if it's different okay

00:03:58,329 --> 00:04:03,190
I'm gonna run the effect again right so

00:04:00,940 --> 00:04:04,870
it's not exactly the same mindset as you

00:04:03,190 --> 00:04:06,730
had when you were dealing with component

00:04:04,870 --> 00:04:08,230
to a mount and all that stuff it sort of

00:04:06,730 --> 00:04:10,380
combines everything into one and it

00:04:08,230 --> 00:04:12,400
makes you think about state and

00:04:10,380 --> 00:04:16,600
synchronicity and in quite a different

00:04:12,400 --> 00:04:23,380
way don't know what's happening there

00:04:16,600 --> 00:04:25,390
you are it's all very magical and in

00:04:23,380 --> 00:04:25,690
order for us to not shoot ourselves in

00:04:25,390 --> 00:04:26,889
the foot

00:04:25,690 --> 00:04:28,150
what react tells us is

00:04:26,889 --> 00:04:31,509
only a couple of rules I need to follow

00:04:28,150 --> 00:04:34,629
to make sure that hooks work um the

00:04:31,509 --> 00:04:37,060
first rule is don't call hooks at the so

00:04:34,629 --> 00:04:38,800
only call hooks at the top level right

00:04:37,060 --> 00:04:40,870
so that means don't call it inside of

00:04:38,800 --> 00:04:42,999
loops or conditions and nested functions

00:04:40,870 --> 00:04:44,469
I'm not gonna go into the details as to

00:04:42,999 --> 00:04:46,029
why yes but if you do that it's

00:04:44,469 --> 00:04:47,710
basically gonna confuse react and try to

00:04:46,029 --> 00:04:49,330
get state that it's not actually there

00:04:47,710 --> 00:04:51,639
so it's gonna be out of sync in a way

00:04:49,330 --> 00:04:54,340
and so that's happening under the hood

00:04:51,639 --> 00:04:56,889
for you and then only call hooks from

00:04:54,340 --> 00:04:59,319
react functions so is if anyone I've

00:04:56,889 --> 00:05:01,090
seen people I teach a flatiron and I see

00:04:59,319 --> 00:05:03,069
students sometimes tried to call you

00:05:01,090 --> 00:05:04,659
State inside a class component and right

00:05:03,069 --> 00:05:06,250
away you'll get an error saying hey no

00:05:04,659 --> 00:05:07,629
you can only use it in a function so you

00:05:06,250 --> 00:05:12,039
need to actually refactor the entire

00:05:07,629 --> 00:05:14,680
component cool and now I'm going to talk

00:05:12,039 --> 00:05:19,270
about what I think is the best selling

00:05:14,680 --> 00:05:21,400
point for hooks so building your own now

00:05:19,270 --> 00:05:23,169
I mentioned you have you state and use

00:05:21,400 --> 00:05:25,449
effect and there's a couple more that

00:05:23,169 --> 00:05:27,249
are built in but usually you can combine

00:05:25,449 --> 00:05:30,279
all these and you can create your own

00:05:27,249 --> 00:05:32,620
set of hooks you can then sprinkle

00:05:30,279 --> 00:05:35,009
around many and any kind of react

00:05:32,620 --> 00:05:37,900
functional component that you have um

00:05:35,009 --> 00:05:40,449
this one for example is one that I built

00:05:37,900 --> 00:05:42,569
is use mouse coordinates so all it's

00:05:40,449 --> 00:05:46,449
doing this it's originally setting

00:05:42,569 --> 00:05:48,159
States for an x and y of 0 and then what

00:05:46,449 --> 00:05:49,539
I get back is basically those values and

00:05:48,159 --> 00:05:51,009
a function that I can use to change

00:05:49,539 --> 00:05:53,050
these values to update the values and

00:05:51,009 --> 00:05:54,789
then I'm using an effect and what I'm

00:05:53,050 --> 00:05:58,089
saying is ok let's create a listener

00:05:54,789 --> 00:06:00,460
that will get an event and get the x and

00:05:58,089 --> 00:06:05,259
y values from the event and it's going

00:06:00,460 --> 00:06:06,490
to set those values here basically now

00:06:05,259 --> 00:06:08,020
what we're saying is okay let's attach

00:06:06,490 --> 00:06:09,669
that to the window so whenever the mouse

00:06:08,020 --> 00:06:12,969
moves on the window trigger that

00:06:09,669 --> 00:06:15,279
listener and then the return here this

00:06:12,969 --> 00:06:16,899
is what many people think of as the

00:06:15,279 --> 00:06:18,189
component will unmount what I'm saying

00:06:16,899 --> 00:06:19,899
it's when the component leaves the page

00:06:18,189 --> 00:06:22,060
or when the effect refreshes so I'm

00:06:19,899 --> 00:06:23,969
changing something run this function

00:06:22,060 --> 00:06:26,349
here which is basically just going to

00:06:23,969 --> 00:06:28,330
get the window and remove the event

00:06:26,349 --> 00:06:30,759
listener that I had attached before this

00:06:28,330 --> 00:06:32,020
is to prevent any memory leaks right

00:06:30,759 --> 00:06:33,550
because sometimes you have a component

00:06:32,020 --> 00:06:35,949
the component subscribe to something

00:06:33,550 --> 00:06:37,870
maybe a WebSocket maybe an interval and

00:06:35,949 --> 00:06:39,580
you want to make sure that if when the

00:06:37,870 --> 00:06:40,480
component is mounted is subscribing to

00:06:39,580 --> 00:06:41,650
this thing well when the

00:06:40,480 --> 00:06:43,540
Component leaves the page we should

00:06:41,650 --> 00:06:44,770
unsubscribe to this thing we should

00:06:43,540 --> 00:06:46,930
remove the listener if we added a

00:06:44,770 --> 00:06:49,330
listener and so on and so forth right so

00:06:46,930 --> 00:06:52,710
the breakdown tear down of our component

00:06:49,330 --> 00:06:55,900
and then it just returns the X and the y

00:06:52,710 --> 00:06:58,570
so this combined I'm using you state and

00:06:55,900 --> 00:07:01,000
use effect to track the mouse

00:06:58,570 --> 00:07:02,470
coordinates and to be able to not only

00:07:01,000 --> 00:07:04,540
track it for one component but I could

00:07:02,470 --> 00:07:05,860
import this in any component I could

00:07:04,540 --> 00:07:08,440
have a hundred components and each could

00:07:05,860 --> 00:07:10,390
be keeping track of its own basically

00:07:08,440 --> 00:07:13,720
mouse coordinates or anything else

00:07:10,390 --> 00:07:15,160
okay so let me show you what I mean we

00:07:13,720 --> 00:07:18,070
have a component here and this is an

00:07:15,160 --> 00:07:20,710
old-school component class component we

00:07:18,070 --> 00:07:22,390
have some state and we have a function

00:07:20,710 --> 00:07:24,370
to update the coordinates and then when

00:07:22,390 --> 00:07:25,630
I'm mounting the component I'm saying I

00:07:24,370 --> 00:07:28,510
want you to start listening for Mouse

00:07:25,630 --> 00:07:29,860
moves and call that function and then

00:07:28,510 --> 00:07:31,810
when the component leaves the page when

00:07:29,860 --> 00:07:34,630
it's unmounting I said okay I want you

00:07:31,810 --> 00:07:36,340
to now get rid of that listener right

00:07:34,630 --> 00:07:39,040
and it just working you can see if I

00:07:36,340 --> 00:07:43,680
move the mouse around that's great and

00:07:39,040 --> 00:07:46,180
everything works but if I go to app and

00:07:43,680 --> 00:07:47,170
let's say that I wanted to have a second

00:07:46,180 --> 00:07:49,090
component that's doing something

00:07:47,170 --> 00:07:51,100
completely different but it should also

00:07:49,090 --> 00:07:54,160
for some reason keep track of the mouse

00:07:51,100 --> 00:07:59,890
and where the mouse is and I should be

00:07:54,160 --> 00:08:01,420
able to use that here great so you can

00:07:59,890 --> 00:08:03,220
see that we have two components now and

00:08:01,420 --> 00:08:05,290
the second component

00:08:03,220 --> 00:08:06,880
Carolee is just the very static

00:08:05,290 --> 00:08:09,580
component doesn't have any States or any

00:08:06,880 --> 00:08:13,090
of that information and and obviously

00:08:09,580 --> 00:08:16,060
it's not following yet and to make that

00:08:13,090 --> 00:08:18,010
follow to to be able for this component

00:08:16,060 --> 00:08:19,390
to now have access to the same kind of

00:08:18,010 --> 00:08:21,790
stateful behavior to be able to track

00:08:19,390 --> 00:08:23,320
the mouse and to refresh that I have a

00:08:21,790 --> 00:08:24,820
couple of options in this case I could

00:08:23,320 --> 00:08:26,800
just move everything out to app and then

00:08:24,820 --> 00:08:28,930
pass it down but that's not always the

00:08:26,800 --> 00:08:30,340
case right in this case we kind of share

00:08:28,930 --> 00:08:32,169
in the same mouse movement but what if

00:08:30,340 --> 00:08:32,890
we wanted each component to have their

00:08:32,169 --> 00:08:34,570
own State

00:08:32,890 --> 00:08:37,510
and be able to track that separately

00:08:34,570 --> 00:08:41,590
well my options right now it would be

00:08:37,510 --> 00:08:43,240
basically copy all of this and paste it

00:08:41,590 --> 00:08:44,350
in the other component right and that

00:08:43,240 --> 00:08:46,330
will lead to a lot of code duplication

00:08:44,350 --> 00:08:47,620
that I'm pretty sure as developers

00:08:46,330 --> 00:08:49,270
you've always heard the term dry we

00:08:47,620 --> 00:08:51,880
should try to not repeat ourselves and

00:08:49,270 --> 00:08:53,440
if we're doing this now we have the same

00:08:51,880 --> 00:08:54,310
code repeated in many different places

00:08:53,440 --> 00:08:55,810
that's

00:08:54,310 --> 00:08:57,370
know what we want because if we change

00:08:55,810 --> 00:08:59,620
something somewhere we need to go and

00:08:57,370 --> 00:09:03,010
change the same thing everywhere else

00:08:59,620 --> 00:09:04,960
and the other options it would be I

00:09:03,010 --> 00:09:06,220
could use something like a higher order

00:09:04,960 --> 00:09:07,570
component to provide this information

00:09:06,220 --> 00:09:10,480
but then we're getting into more

00:09:07,570 --> 00:09:12,910
advanced sort of react topics and and

00:09:10,480 --> 00:09:15,130
that actually gives us an overhead of

00:09:12,910 --> 00:09:17,589
whenever we have high order components

00:09:15,130 --> 00:09:18,940
how your components are wrapping

00:09:17,589 --> 00:09:21,190
components that have another component

00:09:18,940 --> 00:09:22,620
inside so we end up having the structure

00:09:21,190 --> 00:09:24,730
of our code a lot of unnecessary

00:09:22,620 --> 00:09:27,250
elements rendering on the page and

00:09:24,730 --> 00:09:30,130
necessary components wrapping things if

00:09:27,250 --> 00:09:32,110
you've ever used reactive tools in an

00:09:30,130 --> 00:09:34,330
enterprise app that uses a lot of higher

00:09:32,110 --> 00:09:35,740
components you may have seen that to get

00:09:34,330 --> 00:09:37,420
to the component that you want to get

00:09:35,740 --> 00:09:39,279
first you need to start expanding

00:09:37,420 --> 00:09:40,839
expanding expanding expanding or use the

00:09:39,279 --> 00:09:43,180
search and you get there eventually but

00:09:40,839 --> 00:09:44,920
you end up with this massive tree that

00:09:43,180 --> 00:09:46,750
it's never-ending until you get to the

00:09:44,920 --> 00:09:50,680
point you want with a lot of seemingly

00:09:46,750 --> 00:09:52,779
useless components in between so hooks

00:09:50,680 --> 00:09:54,520
will allow us to to get rid of that so

00:09:52,779 --> 00:09:56,050
what I like to do now it's just a little

00:09:54,520 --> 00:09:57,970
bit of like coding with you and I would

00:09:56,050 --> 00:10:00,940
like to be able to first of all change

00:09:57,970 --> 00:10:02,410
this component into a function component

00:10:00,940 --> 00:10:04,030
that will do exactly the same stuff that

00:10:02,410 --> 00:10:10,900
it's doing right now

00:10:04,030 --> 00:10:12,970
so what I will do is create it like this

00:10:10,900 --> 00:10:18,250
I don't need props so I'm gonna ignore

00:10:12,970 --> 00:10:21,120
that for now now because there's a

00:10:18,250 --> 00:10:25,080
function all that I care about is that

00:10:21,120 --> 00:10:28,290
it returns some JSX

00:10:25,080 --> 00:10:31,870
let's say we have a serial here for now

00:10:28,290 --> 00:10:34,180
and it's zero great so this is already

00:10:31,870 --> 00:10:37,360
working but it doesn't have any of the

00:10:34,180 --> 00:10:39,160
behavior that we had before so the next

00:10:37,360 --> 00:10:41,589
step is okay I want to be able to use

00:10:39,160 --> 00:10:46,330
state the U state I'm gonna have to

00:10:41,589 --> 00:10:48,550
import u state and I'm gonna have to

00:10:46,330 --> 00:10:50,230
declare in my state here so the state

00:10:48,550 --> 00:10:52,540
that I'm creating is coordinates so I'm

00:10:50,230 --> 00:10:54,100
gonna call it chords and the function to

00:10:52,540 --> 00:10:55,600
change the coordinates the convention is

00:10:54,100 --> 00:10:58,180
if you call this chords you call this

00:10:55,600 --> 00:11:03,400
set chords if you call this X you call

00:10:58,180 --> 00:11:07,089
this set X and now the starting behave

00:11:03,400 --> 00:11:08,230
the starting value for my state it's

00:11:07,089 --> 00:11:13,600
gonna be the same as before

00:11:08,230 --> 00:11:18,240
and X&Y and they start at zero cool so

00:11:13,600 --> 00:11:18,240
right off the bat I could come here and

00:11:19,380 --> 00:11:28,720
I could pass this there so we don't just

00:11:26,680 --> 00:11:31,120
have a static X&Y now we will have a

00:11:28,720 --> 00:11:37,030
stateful x and y so if these change

00:11:31,120 --> 00:11:38,440
these are going to reflect that now the

00:11:37,030 --> 00:11:40,600
next bit that I would like to do is I

00:11:38,440 --> 00:11:43,450
want to be able to when the component

00:11:40,600 --> 00:11:44,620
mounts create that attach that listener

00:11:43,450 --> 00:11:46,990
to the window and then when the

00:11:44,620 --> 00:11:49,570
component amounts remove that listener

00:11:46,990 --> 00:11:52,900
from the window so what I'll do is again

00:11:49,570 --> 00:11:55,030
better boilerplate so we have the

00:11:52,900 --> 00:11:56,980
function that I want to run and then the

00:11:55,030 --> 00:11:58,270
list of dependencies so when do I want

00:11:56,980 --> 00:12:03,220
this to change when there are one day I

00:11:58,270 --> 00:12:04,570
want the effect to trigger again and in

00:12:03,220 --> 00:12:06,880
here between the curly braces I can

00:12:04,570 --> 00:12:10,120
write the code I want to actually take

00:12:06,880 --> 00:12:11,020
place at mount and unmount so the first

00:12:10,120 --> 00:12:13,930
thing I'm going to do is I'm going to

00:12:11,020 --> 00:12:15,100
create a listener and what the listener

00:12:13,930 --> 00:12:18,280
is going to be doing is it's gonna take

00:12:15,100 --> 00:12:20,440
an event and when it gets the event it's

00:12:18,280 --> 00:12:23,440
going to set chords so it's gonna call

00:12:20,440 --> 00:12:26,800
set chords and in here I'm gonna pass a

00:12:23,440 --> 00:12:30,370
new X and a new Y X is going to be event

00:12:26,800 --> 00:12:31,570
x and y it's gonna be event y slightly

00:12:30,370 --> 00:12:35,700
different from the code I wrote before

00:12:31,570 --> 00:12:35,700
but it should achieve the same thing and

00:12:37,290 --> 00:12:43,990
now whatever gets returned from this use

00:12:42,460 --> 00:12:45,580
effect it's what's going to happen when

00:12:43,990 --> 00:12:47,440
we want to turn down the component we're

00:12:45,580 --> 00:12:50,800
unmounting or when the effect refreshes

00:12:47,440 --> 00:12:54,820
so what I would like to do here is at

00:12:50,800 --> 00:12:57,070
some point to window remove this

00:12:54,820 --> 00:13:03,040
listener which is gonna be a mouse move

00:12:57,070 --> 00:13:04,750
listener and here's the listener and now

00:13:03,040 --> 00:13:06,820
the main bit which is okay at this point

00:13:04,750 --> 00:13:13,150
when you run this effect add an event

00:13:06,820 --> 00:13:16,330
listener that's a mouse move and it's

00:13:13,150 --> 00:13:18,580
got that there now use effect is not

00:13:16,330 --> 00:13:21,840
defined so don't forget to actually

00:13:18,580 --> 00:13:21,840
import it from there

00:13:23,070 --> 00:13:27,190
you can see that it's now doing the same

00:13:26,170 --> 00:13:28,449
that it was doing before

00:13:27,190 --> 00:13:34,600
right so behaviorally it should be

00:13:28,449 --> 00:13:36,850
identical and it's a couple of things to

00:13:34,600 --> 00:13:38,860
note is it's way smaller in terms of

00:13:36,850 --> 00:13:41,740
lines of code I don't have to be using

00:13:38,860 --> 00:13:44,290
this dots everywhere this dot states

00:13:41,740 --> 00:13:45,940
this that update chords so I can get rid

00:13:44,290 --> 00:13:47,470
of that this keyword which can be quite

00:13:45,940 --> 00:13:49,750
annoying so the component is way less

00:13:47,470 --> 00:13:52,930
verbose is more concise and but more

00:13:49,750 --> 00:13:56,470
importantly all of the things that I'm

00:13:52,930 --> 00:13:59,279
using to make this feature work are in

00:13:56,470 --> 00:14:02,440
one place right so this and this

00:13:59,279 --> 00:14:03,850
together the listening so the adding the

00:14:02,440 --> 00:14:04,990
event listener and the removing the

00:14:03,850 --> 00:14:06,850
event listener they're all in the same

00:14:04,990 --> 00:14:09,839
place and if you compare that with the

00:14:06,850 --> 00:14:12,250
class version and here well we have

00:14:09,839 --> 00:14:14,949
everything spread all over we have state

00:14:12,250 --> 00:14:18,190
up here we have the function loosely

00:14:14,949 --> 00:14:20,500
here then we have a component in mount

00:14:18,190 --> 00:14:22,060
so some stuff is happening in component

00:14:20,500 --> 00:14:23,259
did mount and some stuff is happening in

00:14:22,060 --> 00:14:25,510
component with our mounts they sort of

00:14:23,259 --> 00:14:27,940
spread all over the place whereas here

00:14:25,510 --> 00:14:31,959
it sold nicely in one effect and one

00:14:27,940 --> 00:14:37,899
state now the real cool thing about this

00:14:31,959 --> 00:14:39,430
is that I can cut this out and put it

00:14:37,899 --> 00:14:41,649
somewhere else and I'm gonna create a

00:14:39,430 --> 00:14:44,550
function here called use mouse

00:14:41,649 --> 00:14:44,550
coordinates

00:14:48,780 --> 00:14:53,970
and I'm just gonna put that code in here

00:14:50,640 --> 00:15:02,040
same code as before it's now outside of

00:14:53,970 --> 00:15:04,410
the component and what I can do it's

00:15:02,040 --> 00:15:05,670
just add a return here so because this

00:15:04,410 --> 00:15:07,650
function is now outside it needs to

00:15:05,670 --> 00:15:08,880
return something so I can use it so it's

00:15:07,650 --> 00:15:09,360
doing all the stuff that it was doing

00:15:08,880 --> 00:15:11,040
before

00:15:09,360 --> 00:15:12,540
the only difference is now I want to

00:15:11,040 --> 00:15:16,310
return the coordinates when I call this

00:15:12,540 --> 00:15:19,230
function so I have access to that so I

00:15:16,310 --> 00:15:25,320
can now say Const chords I get my courts

00:15:19,230 --> 00:15:26,970
from use coordinates cool so it seems

00:15:25,320 --> 00:15:29,280
like a trivial thing but what I managed

00:15:26,970 --> 00:15:30,960
to do is extract that stateful behavior

00:15:29,280 --> 00:15:33,180
the stateful logic away from the

00:15:30,960 --> 00:15:34,770
component itself right so if you look at

00:15:33,180 --> 00:15:37,770
just the component now and you ignore

00:15:34,770 --> 00:15:41,190
this new how concise that is right and

00:15:37,770 --> 00:15:42,690
more importantly if I want this other

00:15:41,190 --> 00:15:44,820
component the second component to

00:15:42,690 --> 00:15:46,740
benefit from the same behavior it's

00:15:44,820 --> 00:15:50,490
gonna be way way way easier than before

00:15:46,740 --> 00:15:55,200
so I can just get rid of this maybe I'm

00:15:50,490 --> 00:16:00,480
gonna create a new folder let's call it

00:15:55,200 --> 00:16:05,700
hooks and I'm gonna say use Mouse courts

00:16:00,480 --> 00:16:07,589
is gonna put it here I need to import

00:16:05,700 --> 00:16:14,520
some stuff to make sure it works so I

00:16:07,589 --> 00:16:18,000
was using you state and use effect these

00:16:14,520 --> 00:16:21,089
come from react and I also need to make

00:16:18,000 --> 00:16:25,770
sure that I export the function that I

00:16:21,089 --> 00:16:28,260
just created so now just like before I

00:16:25,770 --> 00:16:35,990
can leave this exactly the same all I

00:16:28,260 --> 00:16:35,990
have to do is import from hooks

00:16:37,290 --> 00:16:43,980
use my chords you know tie something

00:16:42,300 --> 00:16:45,770
wrong no it's just in a different folder

00:16:43,980 --> 00:16:49,560
there you go

00:16:45,770 --> 00:16:51,960
relative path had to go up cool

00:16:49,560 --> 00:16:54,000
so still doing the same stuff it was

00:16:51,960 --> 00:16:55,710
doing before exactly the same and the

00:16:54,000 --> 00:16:58,770
difference is now if I wanted to come to

00:16:55,710 --> 00:17:00,510
this second component and I'm actually

00:16:58,770 --> 00:17:11,240
going to have to change this into a

00:17:00,510 --> 00:17:11,240
function mm-hmm should be fairly easy

00:17:12,709 --> 00:17:22,190
and I can copy this from there and copy

00:17:18,959 --> 00:17:22,190
this from there

00:17:30,980 --> 00:17:40,950
oops that's fun cool

00:17:37,520 --> 00:17:42,780
so like I said this is not the best

00:17:40,950 --> 00:17:44,580
example to be showing you because really

00:17:42,780 --> 00:17:45,930
I could I'm using the same mouse

00:17:44,580 --> 00:17:48,060
coordinates so I could just move that up

00:17:45,930 --> 00:17:49,200
and reuse that but if I was using clicks

00:17:48,060 --> 00:17:51,030
for example if I was using

00:17:49,200 --> 00:17:52,710
anything else each component now is

00:17:51,030 --> 00:17:54,660
keeping track of its own state and

00:17:52,710 --> 00:17:56,100
that's the beauty of this I can reuse it

00:17:54,660 --> 00:17:59,010
that I can make sure that each component

00:17:56,100 --> 00:18:00,330
has its own state and its own effect and

00:17:59,010 --> 00:18:02,270
it's keeping track of all the things and

00:18:00,330 --> 00:18:04,620
it's updating when it has to update so

00:18:02,270 --> 00:18:08,780
who thinks that's cleaner that using the

00:18:04,620 --> 00:18:11,040
class that was using before awesome I

00:18:08,780 --> 00:18:13,560
generally think this is the main selling

00:18:11,040 --> 00:18:14,850
point for using hooks it's not that you

00:18:13,560 --> 00:18:16,830
don't get to use classes anymore

00:18:14,850 --> 00:18:18,810
that's nice it's a bonus but it's mostly

00:18:16,830 --> 00:18:22,970
it just makes it so easy to compose

00:18:18,810 --> 00:18:25,410
hooks up on hooks and share in fact

00:18:22,970 --> 00:18:31,110
let's see if we can move I think we're

00:18:25,410 --> 00:18:34,560
here see that perfect one of the best

00:18:31,110 --> 00:18:38,400
things is this website called use hooks

00:18:34,560 --> 00:18:40,680
if you haven't seen it before this is a

00:18:38,400 --> 00:18:42,660
place where people post recipes that

00:18:40,680 --> 00:18:44,040
they call that of hooks that people

00:18:42,660 --> 00:18:46,020
created and it worked really well so you

00:18:44,040 --> 00:18:47,520
have use off if you want to be able to

00:18:46,020 --> 00:18:50,970
use authentication and have some

00:18:47,520 --> 00:18:52,560
provider for that you have use event

00:18:50,970 --> 00:18:54,120
listener if you want to be able to just

00:18:52,560 --> 00:18:56,130
use different kind of event listeners

00:18:54,120 --> 00:18:57,750
use why did you update if you want to

00:18:56,130 --> 00:18:59,100
see why a component is updating when

00:18:57,750 --> 00:19:01,620
you're trying to profile something for

00:18:59,100 --> 00:19:03,450
example you start mode you can see if

00:19:01,620 --> 00:19:05,970
the user has dark mode sets in the

00:19:03,450 --> 00:19:07,260
Preferences or not and this is all code

00:19:05,970 --> 00:19:08,490
that someone else wrote right and at

00:19:07,260 --> 00:19:11,190
some point what we're doing is we're

00:19:08,490 --> 00:19:12,840
building this library of hooks that we

00:19:11,190 --> 00:19:14,910
can reuse over and over so we don't have

00:19:12,840 --> 00:19:16,260
to keep reinventing the wheel we're

00:19:14,910 --> 00:19:17,730
gonna have basically a shop where we can

00:19:16,260 --> 00:19:19,320
go and say just install this library

00:19:17,730 --> 00:19:21,930
right in fact I've wrote a couple of

00:19:19,320 --> 00:19:24,690
libraries as NPM packages and you can

00:19:21,930 --> 00:19:26,520
just do NPM install this hook and use it

00:19:24,690 --> 00:19:29,850
you can use it among any components that

00:19:26,520 --> 00:19:32,820
you want right so I think they're pretty

00:19:29,850 --> 00:19:37,290
cool I think we have a little bit of

00:19:32,820 --> 00:19:38,940
extra time so I'm just going to go into

00:19:37,290 --> 00:19:40,410
so what are the next steps if you if you

00:19:38,940 --> 00:19:42,750
had a news hoop that's much before and

00:19:40,410 --> 00:19:43,789
you want to get it to hooks my first

00:19:42,750 --> 00:19:46,049
recommendation would

00:19:43,789 --> 00:19:47,720
take a look at the documentation the

00:19:46,049 --> 00:19:49,860
reactor commutation is really good and

00:19:47,720 --> 00:19:50,999
the team is making sure that whenever

00:19:49,860 --> 00:19:53,789
something happens so they're always

00:19:50,999 --> 00:19:55,440
keeping that up to date I think the big

00:19:53,789 --> 00:19:57,179
change almost on a daily basis and

00:19:55,440 --> 00:19:58,620
they're very very fresh so that's the

00:19:57,179 --> 00:20:01,080
first place that you should look at and

00:19:58,620 --> 00:20:03,690
if you want to get more into detail as

00:20:01,080 --> 00:20:04,409
to how hooks worked and how react works

00:20:03,690 --> 00:20:06,840
under the hood

00:20:04,409 --> 00:20:08,999
Donna berm of writes a blog at

00:20:06,840 --> 00:20:11,700
overreacted IO and he writes some really

00:20:08,999 --> 00:20:14,700
interesting and articles about how is

00:20:11,700 --> 00:20:16,440
hook how this use effect work under the

00:20:14,700 --> 00:20:18,899
hood and why is it important that you

00:20:16,440 --> 00:20:21,059
only call use state and use effect

00:20:18,899 --> 00:20:23,820
outside of loops and conditionals right

00:20:21,059 --> 00:20:25,679
so what why is that rule there why can

00:20:23,820 --> 00:20:28,169
you not just put it inside an F and it

00:20:25,679 --> 00:20:30,360
will just work anyway and be where some

00:20:28,169 --> 00:20:32,460
of the post that he writes are about 45

00:20:30,360 --> 00:20:35,279
minute reads so they're getting closer

00:20:32,460 --> 00:20:38,279
to books is their post but they're there

00:20:35,279 --> 00:20:39,960
and secondly just check that website

00:20:38,279 --> 00:20:41,820
that I showed you this has lots of

00:20:39,960 --> 00:20:44,009
really cool examples and it's really

00:20:41,820 --> 00:20:47,879
empowering when you just grab that grab

00:20:44,009 --> 00:20:49,590
an example move it here you can put it

00:20:47,879 --> 00:20:51,480
in your list of hooks and you can reuse

00:20:49,590 --> 00:20:53,580
it across your entire application and

00:20:51,480 --> 00:20:54,990
now you can share behavior across

00:20:53,580 --> 00:21:01,340
components which is pretty awesome

00:20:54,990 --> 00:21:08,670
ah cool I'm done

00:21:01,340 --> 00:21:08,670

YouTube URL: https://www.youtube.com/watch?v=ymMeu3foD_0


