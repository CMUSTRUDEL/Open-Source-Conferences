Title: Managing Multiple Packages with Typescript - JS Monthly - February 2020
Publication date: 2020-03-09
Playlist: JS Monthly London
Description: 
	Managing several services with TypeScript \\ Harris Geo
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:06,270
so hello everyone I am Harrison today

00:00:03,840 --> 00:00:08,340
we're going to talk about typescript and

00:00:06,270 --> 00:00:11,790
multiple packages and how do we manage

00:00:08,340 --> 00:00:12,980
them so first of all a little bit about

00:00:11,790 --> 00:00:16,199
myself

00:00:12,980 --> 00:00:18,570
I'm a senior developer in a company

00:00:16,199 --> 00:00:21,900
called equals group we basically do

00:00:18,570 --> 00:00:26,550
travel money I recently worked in a

00:00:21,900 --> 00:00:29,039
project where we created travel currency

00:00:26,550 --> 00:00:30,330
wallet that has several different

00:00:29,039 --> 00:00:32,790
currencies that you can use while

00:00:30,330 --> 00:00:36,750
traveling it has a physical card very

00:00:32,790 --> 00:00:39,300
interesting stuff I learned there so I'm

00:00:36,750 --> 00:00:41,910
a very passionate about traveling I've

00:00:39,300 --> 00:00:45,120
been to 40 countries so far there are

00:00:41,910 --> 00:00:47,579
more in the plans in the near future the

00:00:45,120 --> 00:00:50,579
kind of guy that you know my friends

00:00:47,579 --> 00:00:53,699
hate me for posting photos of a place of

00:00:50,579 --> 00:00:56,180
being recently generally I come from

00:00:53,699 --> 00:00:58,800
food background I've worked a lot on

00:00:56,180 --> 00:01:05,250
both the front and in the back end with

00:00:58,800 --> 00:01:06,780
databases with API is microservices is

00:01:05,250 --> 00:01:11,130
something that we're going to talk about

00:01:06,780 --> 00:01:12,990
a bit day a little bit of no SQL is also

00:01:11,130 --> 00:01:15,180
something but quite interests me

00:01:12,990 --> 00:01:17,460
recently now that I finally understood

00:01:15,180 --> 00:01:20,549
how to use it properly and apart from

00:01:17,460 --> 00:01:22,610
that scale link and infrastructure with

00:01:20,549 --> 00:01:27,119
dog with a little bit of kubernetes

00:01:22,610 --> 00:01:27,659
that's maybe for another talk so let's

00:01:27,119 --> 00:01:30,840
begin

00:01:27,659 --> 00:01:36,840
why typescript that is the question so

00:01:30,840 --> 00:01:39,000
basically the whole purpose we want to

00:01:36,840 --> 00:01:41,790
have someone that acts like a bodyguard

00:01:39,000 --> 00:01:44,159
like this guy that protects our code

00:01:41,790 --> 00:01:46,500
base from random data types that are

00:01:44,159 --> 00:01:51,630
untyped so that we increase the quality

00:01:46,500 --> 00:01:54,450
of our services okay now on the serious

00:01:51,630 --> 00:01:58,579
note how do we do it without any memes

00:01:54,450 --> 00:02:02,040
and why typescript is going to help us

00:01:58,579 --> 00:02:04,890
first of all if we type our code we

00:02:02,040 --> 00:02:08,550
automatically add much better quality on

00:02:04,890 --> 00:02:12,120
what we do I don't know if I'm the only

00:02:08,550 --> 00:02:13,860
one where while I was working with an

00:02:12,120 --> 00:02:16,620
untyped

00:02:13,860 --> 00:02:20,130
javascript framework there was this bug

00:02:16,620 --> 00:02:23,670
that would occur in a very extreme edge

00:02:20,130 --> 00:02:25,560
case where after a few hours of the

00:02:23,670 --> 00:02:28,770
bugging I ended up saying that there was

00:02:25,560 --> 00:02:31,530
a very special case where a type becomes

00:02:28,770 --> 00:02:34,500
from string into a number and then

00:02:31,530 --> 00:02:37,530
everything just gets destroyed so with

00:02:34,500 --> 00:02:40,290
typescript you don't have any stuff like

00:02:37,530 --> 00:02:43,560
that something I really like about typed

00:02:40,290 --> 00:02:48,980
code especially with JavaScript is that

00:02:43,560 --> 00:02:51,570
it acts like documentation you can use

00:02:48,980 --> 00:02:53,850
especially with a coded editor you can

00:02:51,570 --> 00:02:56,190
see every function or everything that

00:02:53,850 --> 00:02:58,350
you're using what kind of arguments

00:02:56,190 --> 00:03:00,990
expects what kind of types is returns

00:02:58,350 --> 00:03:04,860
and it helps you a lot without you

00:03:00,990 --> 00:03:06,930
having to navigate into the code like

00:03:04,860 --> 00:03:09,810
manually in order to understand what

00:03:06,930 --> 00:03:13,230
this code actually does again that makes

00:03:09,810 --> 00:03:16,680
it very sweet in order to use it with

00:03:13,230 --> 00:03:18,600
the code editor something that I really

00:03:16,680 --> 00:03:20,700
like about I've script is that it makes

00:03:18,600 --> 00:03:22,830
autocomplete actually work I don't know

00:03:20,700 --> 00:03:24,870
how many times in react projects I

00:03:22,830 --> 00:03:27,450
struggled to make intellisense to work

00:03:24,870 --> 00:03:29,340
properly with typescript basically as

00:03:27,450 --> 00:03:34,380
soon as you install it everything works

00:03:29,340 --> 00:03:36,900
fine like magic interfaces we're going

00:03:34,380 --> 00:03:39,720
to talk a lot about interfaces today and

00:03:36,900 --> 00:03:40,890
I will explain later why interfaces are

00:03:39,720 --> 00:03:44,250
going to be your best friend when it

00:03:40,890 --> 00:03:47,550
comes to typescript generally typescript

00:03:44,250 --> 00:03:52,709
is designed to scale what I mean by that

00:03:47,550 --> 00:03:56,220
because it acts like a guide on how

00:03:52,709 --> 00:04:00,330
you're going to write your code that

00:03:56,220 --> 00:04:02,340
helps a lot with big teams so that

00:04:00,330 --> 00:04:04,290
everyone can follow the certain

00:04:02,340 --> 00:04:06,390
structure work has been proposed and

00:04:04,290 --> 00:04:09,050
especially with tools like code

00:04:06,390 --> 00:04:11,400
generators that works quite well

00:04:09,050 --> 00:04:12,989
obviously we have all worked with a

00:04:11,400 --> 00:04:15,330
known JavaScript developers they're all

00:04:12,989 --> 00:04:16,709
like ooh I don't like JavaScript doesn't

00:04:15,330 --> 00:04:18,840
have any type so don't know what I'm

00:04:16,709 --> 00:04:23,100
writing so you don't have that problem

00:04:18,840 --> 00:04:24,270
anymore with typescript the completely

00:04:23,100 --> 00:04:26,480
servers are going to find other writers

00:04:24,270 --> 00:04:30,560
not like JavaScript but that

00:04:26,480 --> 00:04:32,390
another topic my approach where I have

00:04:30,560 --> 00:04:36,440
worked so far with typescript and how it

00:04:32,390 --> 00:04:38,510
actually helped us we come from

00:04:36,440 --> 00:04:40,550
backgrounds where there was a gigantic

00:04:38,510 --> 00:04:43,940
monolithic service where there was a lot

00:04:40,550 --> 00:04:45,320
of code like everywhere every time you

00:04:43,940 --> 00:04:47,750
wanted to scale something it was a

00:04:45,320 --> 00:04:50,200
nightmare so breaking that into my into

00:04:47,750 --> 00:04:54,290
several micro services helps a lot

00:04:50,200 --> 00:04:56,120
especially when it comes to giving a

00:04:54,290 --> 00:04:59,090
solid foundation where you can use

00:04:56,120 --> 00:05:00,740
certain services as an example was

00:04:59,090 --> 00:05:03,350
specially when you have stuff like data

00:05:00,740 --> 00:05:06,580
layers it can work in a very sweet way

00:05:03,350 --> 00:05:10,610
I'll explain more about how to do that

00:05:06,580 --> 00:05:13,130
with the interfaces later web script

00:05:10,610 --> 00:05:15,590
also is designed to work quite nicely

00:05:13,130 --> 00:05:20,810
when it comes to separating the concerns

00:05:15,590 --> 00:05:24,250
this is a philosophy of when you have

00:05:20,810 --> 00:05:27,530
code you break it into several different

00:05:24,250 --> 00:05:30,230
independent files less functions that

00:05:27,530 --> 00:05:33,770
each one of them has a single and only

00:05:30,230 --> 00:05:35,780
use there are quite a few examples that

00:05:33,770 --> 00:05:39,230
I'm pretty sure you have all experienced

00:05:35,780 --> 00:05:41,930
where you have code that is used by

00:05:39,230 --> 00:05:44,510
several different parts of your system

00:05:41,930 --> 00:05:47,750
that does multiple things and when it

00:05:44,510 --> 00:05:50,780
comes to adding a change that code it's

00:05:47,750 --> 00:05:53,870
a big nightmare to maintain that so

00:05:50,780 --> 00:05:56,120
separating the concerns is going to help

00:05:53,870 --> 00:05:59,950
massively with that I'm gonna show you

00:05:56,120 --> 00:06:04,070
some examples in their slides coming

00:05:59,950 --> 00:06:09,950
it's also quite friendly when it comes

00:06:04,070 --> 00:06:12,050
to stuff like TDD because having broken

00:06:09,950 --> 00:06:14,390
down all of your files or all of your

00:06:12,050 --> 00:06:17,540
code base into several different files

00:06:14,390 --> 00:06:20,260
it helps with testing its file

00:06:17,540 --> 00:06:23,990
independently without having to rely on

00:06:20,260 --> 00:06:28,910
big journeys a good example of that is

00:06:23,990 --> 00:06:32,720
when it comes to testing react lifecycle

00:06:28,910 --> 00:06:34,730
methods I don't know how many people

00:06:32,720 --> 00:06:38,420
have tried to do that here

00:06:34,730 --> 00:06:39,360
testing lifecycle methods company this

00:06:38,420 --> 00:06:43,259
sort of that

00:06:39,360 --> 00:06:45,870
not maybe so in case you do it use that

00:06:43,259 --> 00:06:47,340
it's a big nightmare and after a pond

00:06:45,870 --> 00:06:49,439
you're like why do I have to do that it

00:06:47,340 --> 00:06:53,039
hadn't been the great some tests used

00:06:49,439 --> 00:06:55,319
for that so that way if you split the

00:06:53,039 --> 00:06:57,960
logic outside of the react file then you

00:06:55,319 --> 00:07:00,479
can instantly test it it's way simpler

00:06:57,960 --> 00:07:04,289
without you having to rely on like some

00:07:00,479 --> 00:07:08,310
real heavy usage of testing within react

00:07:04,289 --> 00:07:10,259
then we introduced the design system in

00:07:08,310 --> 00:07:13,490
the monolith that I was talking about

00:07:10,259 --> 00:07:15,990
earlier we had everything in one place

00:07:13,490 --> 00:07:20,939
where especially when it comes to a

00:07:15,990 --> 00:07:25,199
front-end having centralized system that

00:07:20,939 --> 00:07:27,770
includes tokens for colors for spaces

00:07:25,199 --> 00:07:31,319
for stuff like that helped massively

00:07:27,770 --> 00:07:33,629
there were times were have worked in

00:07:31,319 --> 00:07:37,680
applications where I want to make a

00:07:33,629 --> 00:07:41,430
button blue and I just searched which

00:07:37,680 --> 00:07:43,289
blue is the one that is used in the

00:07:41,430 --> 00:07:45,629
application I found that there were ten

00:07:43,289 --> 00:07:47,610
different shades of it so based on what

00:07:45,629 --> 00:07:49,979
I found first that's what the one I used

00:07:47,610 --> 00:07:51,690
so organizing that kind of variables

00:07:49,979 --> 00:07:53,460
helps a lot especially with typescript

00:07:51,690 --> 00:07:55,909
you can have it on your plate so that

00:07:53,460 --> 00:08:00,029
you can see what this variable is about

00:07:55,909 --> 00:08:03,839
its actual value so it's a quite sweet

00:08:00,029 --> 00:08:05,490
scenario to use it for taking that to

00:08:03,839 --> 00:08:08,909
the next level we can have reusable

00:08:05,490 --> 00:08:11,430
components we can have stuff like login

00:08:08,909 --> 00:08:13,409
pages like for good password pages so

00:08:11,430 --> 00:08:17,039
are generally big sets of components

00:08:13,409 --> 00:08:19,710
that you can reuse them in several parts

00:08:17,039 --> 00:08:22,650
of your business or your system so that

00:08:19,710 --> 00:08:25,379
you don't have to actually rewrite them

00:08:22,650 --> 00:08:29,039
sellable interface again big fan of

00:08:25,379 --> 00:08:30,779
interfaces I'm going to a lot about the

00:08:29,039 --> 00:08:33,180
interfaces in the next slide so I'm not

00:08:30,779 --> 00:08:35,130
gonna bother you yet before we start

00:08:33,180 --> 00:08:38,839
actually talking about interfaces let's

00:08:35,130 --> 00:08:41,699
talk a bit about separating the concerns

00:08:38,839 --> 00:08:43,469
this is an example for let's say that we

00:08:41,699 --> 00:08:46,740
have a folder that is a new recipe by

00:08:43,469 --> 00:08:48,779
the way this is an Ed's case but just to

00:08:46,740 --> 00:08:51,209
give you an idea about how separating

00:08:48,779 --> 00:08:52,350
the concerns can actually help you the

00:08:51,209 --> 00:08:55,170
idea is of every

00:08:52,350 --> 00:08:58,250
this is a folder that is reusable you

00:08:55,170 --> 00:09:01,140
can use anything that you want out of it

00:08:58,250 --> 00:09:04,710
everything gets exported from the index

00:09:01,140 --> 00:09:07,850
file which is basically the core of this

00:09:04,710 --> 00:09:11,010
folder and then you can have stuff like

00:09:07,850 --> 00:09:14,130
you can have the the new recipe TSX

00:09:11,010 --> 00:09:16,200
which is their very act file then you

00:09:14,130 --> 00:09:18,510
can have stuff like utils which are the

00:09:16,200 --> 00:09:20,310
lifecycle methods that has the business

00:09:18,510 --> 00:09:23,460
logic like we talked about it earlier

00:09:20,310 --> 00:09:25,920
can have stuff like validation and

00:09:23,460 --> 00:09:28,350
obviously for each one of these you can

00:09:25,920 --> 00:09:31,410
have tests that actually make it much

00:09:28,350 --> 00:09:34,170
easier to know that you're delivering

00:09:31,410 --> 00:09:36,210
good quality code also increases the

00:09:34,170 --> 00:09:38,580
code coverage which is a new thing that

00:09:36,210 --> 00:09:41,670
everyone is asking for high coverage it

00:09:38,580 --> 00:09:47,070
helps massively with that and last but

00:09:41,670 --> 00:09:51,660
not least the models so models is where

00:09:47,070 --> 00:09:54,450
we store the interfaces so now let's

00:09:51,660 --> 00:09:56,580
finally talk about interfaces the way I

00:09:54,450 --> 00:09:58,320
think about interfaces like when you

00:09:56,580 --> 00:10:00,720
travel you go to a new place where you

00:09:58,320 --> 00:10:03,330
have never been before interface is like

00:10:00,720 --> 00:10:07,140
a map it so it tells you about what this

00:10:03,330 --> 00:10:10,860
place is about so that when you actually

00:10:07,140 --> 00:10:15,930
walk around you can understand what it

00:10:10,860 --> 00:10:18,930
is example we have here an interface

00:10:15,930 --> 00:10:22,050
that is recipe that consists of two

00:10:18,930 --> 00:10:23,820
types one is the name of the recipe

00:10:22,050 --> 00:10:25,530
which is the type of string and the

00:10:23,820 --> 00:10:28,680
other one is the photo of the recipe

00:10:25,530 --> 00:10:31,980
which is also type of string so here we

00:10:28,680 --> 00:10:34,440
can create a new variable that is called

00:10:31,980 --> 00:10:37,320
waka mala it's type of recipe and we we

00:10:34,440 --> 00:10:39,690
give it a name guacamole and then photo

00:10:37,320 --> 00:10:45,060
we add a URL that shows us a very

00:10:39,690 --> 00:10:48,660
beautiful picture of akumal going a bit

00:10:45,060 --> 00:10:51,960
further into interfaces the first is a

00:10:48,660 --> 00:10:53,760
typical example of parsley using

00:10:51,960 --> 00:10:56,670
typescript to be very honest with you

00:10:53,760 --> 00:10:59,370
the first approach I believe it's better

00:10:56,670 --> 00:11:02,010
if you don't attempt any typing at all

00:10:59,370 --> 00:11:04,920
the proper way of doing that is as we

00:11:02,010 --> 00:11:05,790
say the second example like sides which

00:11:04,920 --> 00:11:08,690
is M

00:11:05,790 --> 00:11:12,330
function that returns an array of

00:11:08,690 --> 00:11:14,760
recipes as we saw earlier in the

00:11:12,330 --> 00:11:19,020
previous slide the recipe is of a type

00:11:14,760 --> 00:11:21,000
name and photo that it includes so

00:11:19,020 --> 00:11:23,820
basically we return the guacamole as we

00:11:21,000 --> 00:11:26,280
saw earlier and then we have a new

00:11:23,820 --> 00:11:28,500
recipe that's called the Z key and we

00:11:26,280 --> 00:11:32,910
return that in an array and the code

00:11:28,500 --> 00:11:35,250
editor is quite happy the very big value

00:11:32,910 --> 00:11:37,040
that I see with type screen income so

00:11:35,250 --> 00:11:40,230
that kind of stuff is that when you

00:11:37,040 --> 00:11:43,590
write types that are incorrect like in

00:11:40,230 --> 00:11:47,130
the last example we expect an array of

00:11:43,590 --> 00:11:51,050
recipes but we return just one type of

00:11:47,130 --> 00:11:55,710
recipe so as you can see that variable

00:11:51,050 --> 00:11:59,160
is showing that it has an error so that

00:11:55,710 --> 00:12:01,410
can help you save some time instead of

00:11:59,160 --> 00:12:03,000
running the application and then and the

00:12:01,410 --> 00:12:05,570
browser or whatever you're running but

00:12:03,000 --> 00:12:09,510
you see like going a bit deeper into

00:12:05,570 --> 00:12:12,540
interfaces if we this is a very good

00:12:09,510 --> 00:12:15,420
example for people that have worked with

00:12:12,540 --> 00:12:19,140
meyers with no SQL databases where you

00:12:15,420 --> 00:12:20,790
have gigantic objects an example here is

00:12:19,140 --> 00:12:23,970
a recipe what we extend it we had an

00:12:20,790 --> 00:12:25,800
ingredients variable we are the

00:12:23,970 --> 00:12:28,290
ingredients which as you can see it's of

00:12:25,800 --> 00:12:31,080
type it has a number I call it now for

00:12:28,290 --> 00:12:34,020
just like be easier to understand what

00:12:31,080 --> 00:12:35,880
it's about then unit which is a string

00:12:34,020 --> 00:12:38,850
name which is also a string and we

00:12:35,880 --> 00:12:42,650
expect an array of these ingredients

00:12:38,850 --> 00:12:46,260
then we are the instructions which are

00:12:42,650 --> 00:12:48,540
type of string in an array then we have

00:12:46,260 --> 00:12:51,240
the type this is an interesting case

00:12:48,540 --> 00:12:54,270
because we can achieve the same result

00:12:51,240 --> 00:12:57,900
by also using in ohms just for the sake

00:12:54,270 --> 00:13:00,900
of simplicity I use that approach and

00:12:57,900 --> 00:13:03,600
also I'm not the biggest fan of Venom's

00:13:00,900 --> 00:13:05,670
because they are quite complicated and

00:13:03,600 --> 00:13:09,090
also you need to import in order to use

00:13:05,670 --> 00:13:12,350
themselves that gives exactly the same

00:13:09,090 --> 00:13:14,580
resources using enums then we have

00:13:12,350 --> 00:13:16,620
difficulty if you see it has a question

00:13:14,580 --> 00:13:17,580
mark at the end that means that it is

00:13:16,620 --> 00:13:19,980
optional

00:13:17,580 --> 00:13:26,190
which means that if you don't include it

00:13:19,980 --> 00:13:29,519
the compiler will not complain here is

00:13:26,190 --> 00:13:33,209
an example so this recipe the Dicky

00:13:29,519 --> 00:13:35,430
weeds we have added everything as we

00:13:33,209 --> 00:13:37,860
mentioned earlier and something that I

00:13:35,430 --> 00:13:40,500
really like about it is that if you see

00:13:37,860 --> 00:13:42,060
at the end the ingredients it has

00:13:40,500 --> 00:13:45,320
autocomplete where it tells you what

00:13:42,060 --> 00:13:49,709
kind of values you have to add inside

00:13:45,320 --> 00:13:52,680
ingredients something that has really

00:13:49,709 --> 00:13:55,589
helped me with using that approach is

00:13:52,680 --> 00:13:58,560
that when it comes to really nested the

00:13:55,589 --> 00:14:02,370
objects where sometimes you forget what

00:13:58,560 --> 00:14:04,019
a specific variable or you have a typo

00:14:02,370 --> 00:14:06,029
in one of them and then you may end up

00:14:04,019 --> 00:14:09,570
spending 20 minutes trying to understand

00:14:06,029 --> 00:14:11,790
why it doesn't work with typescript the

00:14:09,570 --> 00:14:14,820
code editor will automatically complain

00:14:11,790 --> 00:14:18,300
that doesn't meet the exact schema that

00:14:14,820 --> 00:14:20,459
you defined earlier so yes

00:14:18,300 --> 00:14:24,300
autocomplete once again save the day

00:14:20,459 --> 00:14:26,930
with typescript suite approach when it

00:14:24,300 --> 00:14:29,310
comes to working in several

00:14:26,930 --> 00:14:33,209
microservices is that you can extend

00:14:29,310 --> 00:14:35,760
from interfaces what does that mean we

00:14:33,209 --> 00:14:37,589
can create here a new interface that is

00:14:35,760 --> 00:14:41,130
called special recipe which extends from

00:14:37,589 --> 00:14:43,709
the recipe that we showed that we saw

00:14:41,130 --> 00:14:47,070
earlier it only has one variable which

00:14:43,709 --> 00:14:50,310
is called special and it's a boolean as

00:14:47,070 --> 00:14:52,770
we can see here we have a new special

00:14:50,310 --> 00:14:55,110
work Imola we call it awesome work a

00:14:52,770 --> 00:14:57,540
male not so special doesn't even have a

00:14:55,110 --> 00:14:59,640
photo and as you can see we go through

00:14:57,540 --> 00:15:02,279
all of the stuff and all of the

00:14:59,640 --> 00:15:03,930
variables and values that we added at

00:15:02,279 --> 00:15:05,970
the end we see that we have added a

00:15:03,930 --> 00:15:07,949
special which is true which is something

00:15:05,970 --> 00:15:10,410
that didn't exist earlier with the

00:15:07,949 --> 00:15:13,560
simple with the recipe type but it

00:15:10,410 --> 00:15:18,350
exists in special recipe so that way if

00:15:13,560 --> 00:15:21,089
you want to extend from api's or from

00:15:18,350 --> 00:15:26,040
data layers where you won't take the

00:15:21,089 --> 00:15:28,970
core business of what these this code is

00:15:26,040 --> 00:15:30,070
about you can extend from it and add

00:15:28,970 --> 00:15:33,490
further

00:15:30,070 --> 00:15:36,280
stuff into it apart from extending we

00:15:33,490 --> 00:15:40,630
can do several other things personal

00:15:36,280 --> 00:15:42,940
favorite is the pig where you can pick

00:15:40,630 --> 00:15:46,660
certain parts of the interface that you

00:15:42,940 --> 00:15:48,670
want good example is if we want to make

00:15:46,660 --> 00:15:53,530
a guacamole preview which is type recipe

00:15:48,670 --> 00:15:57,430
preview which we defined above we just

00:15:53,530 --> 00:16:01,120
give it three three values for one for

00:15:57,430 --> 00:16:04,480
name one for photo and one for type then

00:16:01,120 --> 00:16:06,610
at the same time if we want to if we

00:16:04,480 --> 00:16:08,140
have an existing interface and we just

00:16:06,610 --> 00:16:09,550
want to remove something so that we

00:16:08,140 --> 00:16:12,850
don't have to redefine everything from

00:16:09,550 --> 00:16:15,070
scratch we can use their meat util but

00:16:12,850 --> 00:16:18,190
basically we say that from recipe

00:16:15,070 --> 00:16:22,180
preview remove photo so we have the

00:16:18,190 --> 00:16:27,850
guacamole text which has the name and

00:16:22,180 --> 00:16:31,510
the type that way when it comes to API

00:16:27,850 --> 00:16:36,370
calls for example if you have AP eyes

00:16:31,510 --> 00:16:39,070
that give lists of certain data where

00:16:36,370 --> 00:16:41,530
you expect them to not return like

00:16:39,070 --> 00:16:44,730
everything that's a very good approach

00:16:41,530 --> 00:16:48,130
of doing that importing the core

00:16:44,730 --> 00:16:50,140
interface were its entries about and you

00:16:48,130 --> 00:16:52,720
can omit the data that you don't want to

00:16:50,140 --> 00:16:54,720
so in that way you automatically have

00:16:52,720 --> 00:16:58,740
your code that is tied without

00:16:54,720 --> 00:16:58,740
redefining everything from scratch

00:17:00,300 --> 00:17:08,770
that's a good question to be honest I've

00:17:02,440 --> 00:17:10,990
never you know in general there are way

00:17:08,770 --> 00:17:15,810
more YouTube's these are the ones that I

00:17:10,990 --> 00:17:18,490
have personally used the most so yes and

00:17:15,810 --> 00:17:20,740
yeah let's go to the next one now

00:17:18,490 --> 00:17:23,260
generics here is where things get

00:17:20,740 --> 00:17:26,160
interesting generics is when you are

00:17:23,260 --> 00:17:28,780
when you want whether an extra level of

00:17:26,160 --> 00:17:31,270
abstraction we have here a class which

00:17:28,780 --> 00:17:33,490
is a quick recipe the constructor

00:17:31,270 --> 00:17:36,610
expects this to have a name in the photo

00:17:33,490 --> 00:17:40,210
and then we also have a class which is

00:17:36,610 --> 00:17:42,550
called menu it expects one when we

00:17:40,210 --> 00:17:43,750
initiate it and then we call the new

00:17:42,550 --> 00:17:46,630
item function of it

00:17:43,750 --> 00:17:49,660
it expects a quick recipe type that we

00:17:46,630 --> 00:17:53,140
defined above so if you if you can see

00:17:49,660 --> 00:17:56,140
here in the code we create a new quick

00:17:53,140 --> 00:17:59,560
walka model which is new quick recipe

00:17:56,140 --> 00:18:02,680
type that we define above then we create

00:17:59,560 --> 00:18:05,170
a new menu and after that we just add a

00:18:02,680 --> 00:18:08,740
new item in the menu which is the quick

00:18:05,170 --> 00:18:13,960
walka model that we defined earlier so

00:18:08,740 --> 00:18:19,180
that approach can have problem if you

00:18:13,960 --> 00:18:22,660
want to let's say create another menu

00:18:19,180 --> 00:18:25,120
which is going to be for drinks what we

00:18:22,660 --> 00:18:27,430
would normally do is you would literally

00:18:25,120 --> 00:18:31,180
create new class which is drinks menu

00:18:27,430 --> 00:18:34,990
and then tell it that it's item is going

00:18:31,180 --> 00:18:37,660
to be drink type and do the same thing

00:18:34,990 --> 00:18:43,780
over again however what we can do here

00:18:37,660 --> 00:18:49,500
with generics is that as you can see

00:18:43,780 --> 00:18:53,830
here the menu has a tea type which is

00:18:49,500 --> 00:18:57,040
type agnostic and every time you want to

00:18:53,830 --> 00:18:59,770
add a new item depends it depends on

00:18:57,040 --> 00:19:01,390
what kind of type this item is so

00:18:59,770 --> 00:19:06,100
basically you can add whatever you want

00:19:01,390 --> 00:19:09,670
so we have created here a new class

00:19:06,100 --> 00:19:12,520
which is about beverages so exactly the

00:19:09,670 --> 00:19:14,380
same code for for the guacamole we had

00:19:12,520 --> 00:19:17,070
in the menu then we create a new

00:19:14,380 --> 00:19:20,230
lemonade which is type beverage and

00:19:17,070 --> 00:19:21,970
which is a new instance of beverage and

00:19:20,230 --> 00:19:23,650
after that we create a new drink menu

00:19:21,970 --> 00:19:27,400
which is exactly the same thing as we

00:19:23,650 --> 00:19:29,770
did here we just call it dreaming

00:19:27,400 --> 00:19:31,510
instead of menu and then we call exactly

00:19:29,770 --> 00:19:33,970
the same thing as we did before the new

00:19:31,510 --> 00:19:37,840
item and we can add the lemonade which

00:19:33,970 --> 00:19:40,390
is different type than the quick recipe

00:19:37,840 --> 00:19:44,590
so that way you can abstract that in a

00:19:40,390 --> 00:19:46,930
level that you basically don't have to

00:19:44,590 --> 00:19:50,610
fall into the loop of typing every

00:19:46,930 --> 00:19:55,890
single thing that you do so yeah I've

00:19:50,610 --> 00:19:57,580
talked a lot about how to use typescript

00:19:55,890 --> 00:19:58,960
however

00:19:57,580 --> 00:20:01,720
I need to show you some examples so

00:19:58,960 --> 00:20:05,470
enough is enough with me talking about

00:20:01,720 --> 00:20:10,300
how typescript works so some react

00:20:05,470 --> 00:20:14,410
specific examples look up here homepage

00:20:10,300 --> 00:20:16,690
which uses a menu wrapper and inside the

00:20:14,410 --> 00:20:20,170
mini wrapper we just want to display

00:20:16,690 --> 00:20:22,270
some recipes as we see the mini wrapper

00:20:20,170 --> 00:20:25,690
expects two probes one is name and the

00:20:22,270 --> 00:20:27,940
other one is children we just put the

00:20:25,690 --> 00:20:29,880
name inside the header one and then

00:20:27,940 --> 00:20:34,660
whatever the children are would just

00:20:29,880 --> 00:20:37,270
render them as you can see underneath we

00:20:34,660 --> 00:20:41,260
have the recipes which from what we see

00:20:37,270 --> 00:20:43,600
is an array we map and it's item is a

00:20:41,260 --> 00:20:48,700
different recipe and then we return the

00:20:43,600 --> 00:20:51,520
recipes as we wanted this is the actual

00:20:48,700 --> 00:20:53,080
interface in order to do that based on

00:20:51,520 --> 00:20:55,330
what we've talked about when you see

00:20:53,080 --> 00:20:58,030
that do you think that this code is

00:20:55,330 --> 00:21:01,090
going to work or not okay so here we say

00:20:58,030 --> 00:21:06,280
that the children need to be of type

00:21:01,090 --> 00:21:10,270
react element so no it's not going to

00:21:06,280 --> 00:21:14,380
work because as you can see here we have

00:21:10,270 --> 00:21:15,100
an array and we map through that so yeah

00:21:14,380 --> 00:21:17,170
exactly

00:21:15,100 --> 00:21:20,320
in order for it to actually work we need

00:21:17,170 --> 00:21:24,580
to say that the children are an array of

00:21:20,320 --> 00:21:28,000
react elements that approach can be

00:21:24,580 --> 00:21:30,460
quite sweet so if we do that then we see

00:21:28,000 --> 00:21:34,120
that the code editor doesn't complain

00:21:30,460 --> 00:21:36,460
anymore so that way can be quite sweet

00:21:34,120 --> 00:21:39,910
when it comes to especially when you

00:21:36,460 --> 00:21:44,260
have forms that you expect them to have

00:21:39,910 --> 00:21:47,020
very specific kind of kind of children

00:21:44,260 --> 00:21:49,060
that go into a special review for follow

00:21:47,020 --> 00:21:51,820
like a form stage where you need like

00:21:49,060 --> 00:21:54,610
wizard you eyes and its form has like a

00:21:51,820 --> 00:21:59,440
very specific structure that approach

00:21:54,610 --> 00:22:02,380
can help a lot control what exactly goes

00:21:59,440 --> 00:22:04,810
in there so that you don't just go while

00:22:02,380 --> 00:22:07,930
without like caring about what is

00:22:04,810 --> 00:22:11,710
happening so

00:22:07,930 --> 00:22:15,220
now let's talk a bit about what happens

00:22:11,710 --> 00:22:18,090
when we won't have compatibility with

00:22:15,220 --> 00:22:20,860
libraries that are not with typescript

00:22:18,090 --> 00:22:24,130
so there is something called definitely

00:22:20,860 --> 00:22:28,030
type which is repose a repository that

00:22:24,130 --> 00:22:29,559
has type definitions for most of the

00:22:28,030 --> 00:22:31,990
libraries that say you're gonna use if

00:22:29,559 --> 00:22:36,430
you check them on on github they have

00:22:31,990 --> 00:22:38,500
like 6,000 libraries they support first

00:22:36,430 --> 00:22:41,850
thing is that when you install one

00:22:38,500 --> 00:22:45,010
library that doesn't have typescript

00:22:41,850 --> 00:22:47,260
support your code editor will complain

00:22:45,010 --> 00:22:50,679
and will tell you that you basically

00:22:47,260 --> 00:22:53,470
need to run something like a like that

00:22:50,679 --> 00:22:57,309
were unit we are not the ad types and

00:22:53,470 --> 00:23:00,179
then for this example is react library

00:22:57,309 --> 00:23:05,470
and other doesn't develop our dependency

00:23:00,179 --> 00:23:07,270
that works quite okay however what if we

00:23:05,470 --> 00:23:10,210
have packages that don't have any

00:23:07,270 --> 00:23:13,240
support indefinitely type what do we do

00:23:10,210 --> 00:23:17,140
in that case this is where we have

00:23:13,240 --> 00:23:19,720
typing declaration files having the

00:23:17,140 --> 00:23:21,210
Clarizen file for example we have this

00:23:19,720 --> 00:23:25,420
new cookbook

00:23:21,210 --> 00:23:28,420
this is library called my cookbook where

00:23:25,420 --> 00:23:31,480
we export out of it the recipe lookup

00:23:28,420 --> 00:23:33,280
and then from what we remember it

00:23:31,480 --> 00:23:35,559
expects the name of the recipe and then

00:23:33,280 --> 00:23:37,510
another parameter with another argument

00:23:35,559 --> 00:23:41,620
that we don't remember exactly what it

00:23:37,510 --> 00:23:46,600
is so in plain react if we do that it's

00:23:41,620 --> 00:23:51,220
not going to complain so we can create a

00:23:46,600 --> 00:23:54,520
file body's cold typings dot d for

00:23:51,220 --> 00:23:58,270
declaration dot TS and inside that file

00:23:54,520 --> 00:24:00,610
or we can we can name it whatever we

00:23:58,270 --> 00:24:03,400
want as long as it ends with dot d dot

00:24:00,610 --> 00:24:07,660
TS this is what we can declare a new

00:24:03,400 --> 00:24:11,470
module which is for my cookbook and we

00:24:07,660 --> 00:24:13,690
say that this module exports a function

00:24:11,470 --> 00:24:15,670
that is called recipe lookup which

00:24:13,690 --> 00:24:19,240
expects two arguments one is name string

00:24:15,670 --> 00:24:21,990
and the other one is type which is type

00:24:19,240 --> 00:24:24,900
type that we talked about

00:24:21,990 --> 00:24:27,400
as you can see as soon as we do that the

00:24:24,900 --> 00:24:30,040
code editor will instantly start

00:24:27,400 --> 00:24:33,490
complaining it will tell us that it's

00:24:30,040 --> 00:24:35,380
not the type that we expected so then we

00:24:33,490 --> 00:24:40,210
have a brief idea about what we can do

00:24:35,380 --> 00:24:43,480
so that way no matter if there is a

00:24:40,210 --> 00:24:47,500
library that supports typescript or not

00:24:43,480 --> 00:24:49,810
we can use it and basically using that

00:24:47,500 --> 00:24:53,340
approach we can only type the parts of

00:24:49,810 --> 00:24:56,680
the library that we actually care about

00:24:53,340 --> 00:25:01,930
so let's do a summary over what we've

00:24:56,680 --> 00:25:05,140
learned today very important to mention

00:25:01,930 --> 00:25:05,620
that not every single thing needs to be

00:25:05,140 --> 00:25:08,020
typed

00:25:05,620 --> 00:25:10,000
because if you type everything first of

00:25:08,020 --> 00:25:12,550
all there are certain participation on

00:25:10,000 --> 00:25:14,140
the front end that you're just like in

00:25:12,550 --> 00:25:17,530
my opinion you're wasting your time

00:25:14,140 --> 00:25:21,040
typing because it doesn't make any big

00:25:17,530 --> 00:25:26,230
difference stuff like the critical parts

00:25:21,040 --> 00:25:30,310
of the code like user bases like lycra

00:25:26,230 --> 00:25:33,010
Duke stores like api's validations data

00:25:30,310 --> 00:25:34,510
layers these are the parts that need to

00:25:33,010 --> 00:25:39,460
be typed and especially they're going to

00:25:34,510 --> 00:25:43,600
help you with how having no with not

00:25:39,460 --> 00:25:44,980
having that many bugs so yes interfaces

00:25:43,600 --> 00:25:47,470
yeah I showed you how much I love

00:25:44,980 --> 00:25:51,540
interfaces I use them everywhere

00:25:47,470 --> 00:25:54,280
especially in working with several other

00:25:51,540 --> 00:25:55,900
API is coming from different packages I

00:25:54,280 --> 00:25:58,450
just import from this packages the

00:25:55,900 --> 00:26:01,810
interfaces and we can do stuff like

00:25:58,450 --> 00:26:05,550
extend or meet them and make use out of

00:26:01,810 --> 00:26:10,480
stuff that we want from these interfaces

00:26:05,550 --> 00:26:13,450
and separating the concerns we talked

00:26:10,480 --> 00:26:17,230
about how splitting the code is going to

00:26:13,450 --> 00:26:19,120
make our quality much better how we can

00:26:17,230 --> 00:26:22,810
have more control over the code that we

00:26:19,120 --> 00:26:26,440
use how we can add more tests it's a big

00:26:22,810 --> 00:26:31,000
big philosophy if you have seen these

00:26:26,440 --> 00:26:33,970
days then the type typing definition

00:26:31,000 --> 00:26:34,750
files case you are working with the

00:26:33,970 --> 00:26:37,300
library that

00:26:34,750 --> 00:26:39,960
have any types called support you can

00:26:37,300 --> 00:26:46,290
literally just go and create your own

00:26:39,960 --> 00:26:50,100
typescript support for this library and

00:26:46,290 --> 00:26:53,650
something that is good to mention about

00:26:50,100 --> 00:26:56,740
typing definition files I've seen quite

00:26:53,650 --> 00:26:59,530
a few libraries that when you go to the

00:26:56,740 --> 00:27:02,050
documentation you see in in your in the

00:26:59,530 --> 00:27:05,340
readme file that they have a link to

00:27:02,050 --> 00:27:08,500
their own typing definition file so you

00:27:05,340 --> 00:27:11,620
can literally just copy it from there

00:27:08,500 --> 00:27:14,950
put in your code and then it works quite

00:27:11,620 --> 00:27:16,510
well yes also use of some new memes in

00:27:14,950 --> 00:27:23,610
case you haven't seen them before

00:27:16,510 --> 00:27:23,610

YouTube URL: https://www.youtube.com/watch?v=lOhUBMsaHO0


