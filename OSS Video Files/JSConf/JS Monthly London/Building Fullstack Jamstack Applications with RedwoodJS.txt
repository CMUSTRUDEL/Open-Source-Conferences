Title: Building Fullstack Jamstack Applications with RedwoodJS
Publication date: 2020-12-18
Playlist: JS Monthly London
Description: 
	Building Fullstack Jamstack Applications with RedwoodJS by Anthony Campolo

RedwoodJS is a fullstack serverless framework for the Jamstack created by Tom Preston-Werner and Peter Pistorius that uses a combination of React, GraphQL, and Prisma. It is designed to be easily deployed on Netlify, Vercel, and AWS and the core team is in the process of configuring the project for containerization.
In this talk, Anthony Campolo will outline the origins and motivations of RedwoodJS along with the concepts it introduces

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,480 --> 00:00:03,840
building full stack jam stack

00:00:02,560 --> 00:00:07,520
applications with

00:00:03,840 --> 00:00:10,240
redwood js my name is anthony campolo

00:00:07,520 --> 00:00:11,280
and if you want to find me online uh my

00:00:10,240 --> 00:00:15,599
general handle

00:00:11,280 --> 00:00:17,279
is ajcwebdev so that would be on twitter

00:00:15,599 --> 00:00:20,640
or dev2

00:00:17,279 --> 00:00:23,600
or github now redwood

00:00:20,640 --> 00:00:24,240
is what we call a full stack serverless

00:00:23,600 --> 00:00:26,720
framework

00:00:24,240 --> 00:00:28,640
for the jam stack and there's a lot of

00:00:26,720 --> 00:00:31,760
kind of like buzzwords here

00:00:28,640 --> 00:00:34,000
and the kind of simpler definition that

00:00:31,760 --> 00:00:37,040
i like to use is that redwood is

00:00:34,000 --> 00:00:41,200
a program for generating web apps

00:00:37,040 --> 00:00:44,559
the idea being that it's for interactive

00:00:41,200 --> 00:00:47,920
data type manipulation applications

00:00:44,559 --> 00:00:51,360
that can be built really quickly and

00:00:47,920 --> 00:00:54,239
it was created by tom preston warner and

00:00:51,360 --> 00:00:55,280
peter pistorius they originally were

00:00:54,239 --> 00:00:57,760
working together

00:00:55,280 --> 00:00:59,280
on chatterbug which is a language

00:00:57,760 --> 00:01:02,800
learning platform

00:00:59,280 --> 00:01:05,439
and they were using graphql and react

00:01:02,800 --> 00:01:06,960
and just struggling with kind of

00:01:05,439 --> 00:01:09,119
figuring out how to

00:01:06,960 --> 00:01:11,520
create an application in this way and

00:01:09,119 --> 00:01:14,080
this framework has kind of emerged

00:01:11,520 --> 00:01:15,680
out of conversations between them of

00:01:14,080 --> 00:01:16,799
what type of architecture they're

00:01:15,680 --> 00:01:18,799
looking for

00:01:16,799 --> 00:01:20,159
and they brought on rob cameron he's

00:01:18,799 --> 00:01:23,200
helped out with the

00:01:20,159 --> 00:01:24,880
tutorial and with lots of other things

00:01:23,200 --> 00:01:28,159
in the framework he's also

00:01:24,880 --> 00:01:30,560
doing repeater.dev and then david price

00:01:28,159 --> 00:01:33,200
is the general community manager

00:01:30,560 --> 00:01:33,840
for the project and this was the

00:01:33,200 --> 00:01:36,640
original

00:01:33,840 --> 00:01:38,400
core four but now there's actually a

00:01:36,640 --> 00:01:42,079
larger expanded team

00:01:38,400 --> 00:01:45,119
the core team is now these 12 people

00:01:42,079 --> 00:01:46,320
so the project is growing it's there's a

00:01:45,119 --> 00:01:47,840
lot of people who are

00:01:46,320 --> 00:01:49,840
involved and who are really passionate

00:01:47,840 --> 00:01:53,040
about it

00:01:49,840 --> 00:01:56,240
this is the kind of big picture

00:01:53,040 --> 00:01:59,119
view of what redwood is the

00:01:56,240 --> 00:02:00,240
really important stuff is on the left

00:01:59,119 --> 00:02:03,360
where it says

00:02:00,240 --> 00:02:06,719
redwood codebase and you have a

00:02:03,360 --> 00:02:10,080
front end and a back end so your project

00:02:06,719 --> 00:02:13,200
is one what's called monorepo

00:02:10,080 --> 00:02:16,000
with two main folders in it a web folder

00:02:13,200 --> 00:02:17,599
and an api folder so let's just look at

00:02:16,000 --> 00:02:20,800
the web folder first

00:02:17,599 --> 00:02:24,800
if you've ever used create react app

00:02:20,800 --> 00:02:28,319
or gatsby or next it's a similar

00:02:24,800 --> 00:02:33,040
setup with pages and layouts

00:02:28,319 --> 00:02:33,440
and there's an index.js and index.html

00:02:33,040 --> 00:02:36,000
to

00:02:33,440 --> 00:02:38,400
load in your kind of single page

00:02:36,000 --> 00:02:42,480
application

00:02:38,400 --> 00:02:43,680
the pages is the kind of main way that

00:02:42,480 --> 00:02:45,440
you're going to organize

00:02:43,680 --> 00:02:47,280
your your project is you're going to

00:02:45,440 --> 00:02:49,120
have pages and

00:02:47,280 --> 00:02:50,319
with each of these there's going gonna

00:02:49,120 --> 00:02:52,239
be a command

00:02:50,319 --> 00:02:53,840
written underneath so the command is

00:02:52,239 --> 00:02:56,959
what generates

00:02:53,840 --> 00:03:00,080
this page that we see here uh yarn

00:02:56,959 --> 00:03:02,000
redwood that's what the rw stands for is

00:03:00,080 --> 00:03:05,040
what all the commands start with

00:03:02,000 --> 00:03:06,400
and then g is short for generate we're

00:03:05,040 --> 00:03:08,319
gonna see a lot of different

00:03:06,400 --> 00:03:09,519
generate commands that generate

00:03:08,319 --> 00:03:12,159
different things

00:03:09,519 --> 00:03:14,560
this being an example of a page that we

00:03:12,159 --> 00:03:14,560
generate

00:03:15,680 --> 00:03:19,120
we also can generate layouts a layout

00:03:18,560 --> 00:03:21,760
would be

00:03:19,120 --> 00:03:23,120
like if you had a navigation bar that

00:03:21,760 --> 00:03:25,840
you wanted to

00:03:23,120 --> 00:03:26,239
persist as you go from page to page so

00:03:25,840 --> 00:03:28,480
it's

00:03:26,239 --> 00:03:30,879
easy to to navigate or if you want a

00:03:28,480 --> 00:03:33,920
footer with like your copyright

00:03:30,879 --> 00:03:38,400
at the bottom that's the that's the idea

00:03:33,920 --> 00:03:41,440
and a cell this is kind of a newer idea

00:03:38,400 --> 00:03:44,239
that redwood has introduced it's

00:03:41,440 --> 00:03:46,400
based around your data fetching so we're

00:03:44,239 --> 00:03:48,319
using a lot of graphql here

00:03:46,400 --> 00:03:50,000
and in the top right we're writing a

00:03:48,319 --> 00:03:53,360
graphql query

00:03:50,000 --> 00:03:56,720
and that query is for our posts

00:03:53,360 --> 00:03:58,239
and specifically for the id of each of

00:03:56,720 --> 00:04:01,519
our posts

00:03:58,239 --> 00:04:03,439
and we write that query and then there's

00:04:01,519 --> 00:04:04,080
the four different states that our data

00:04:03,439 --> 00:04:06,319
can be in

00:04:04,080 --> 00:04:08,239
it can either be loading if we're

00:04:06,319 --> 00:04:11,439
waiting to receive the data

00:04:08,239 --> 00:04:13,519
empty if there is no data failure

00:04:11,439 --> 00:04:14,879
if there was some sort of error along

00:04:13,519 --> 00:04:17,199
the way and then

00:04:14,879 --> 00:04:21,040
success where you get the posts and then

00:04:17,199 --> 00:04:21,040
you can do whatever you want with it

00:04:21,199 --> 00:04:26,080
that was the front end now the back end

00:04:23,840 --> 00:04:29,440
is where we're gonna have

00:04:26,080 --> 00:04:32,800
prisma prisma is uh kind of like an

00:04:29,440 --> 00:04:33,280
orm or a query builder it's a way for us

00:04:32,800 --> 00:04:35,520
to

00:04:33,280 --> 00:04:37,600
easily talk to our database and do a lot

00:04:35,520 --> 00:04:41,520
of the sql stuff for us

00:04:37,600 --> 00:04:44,240
and then we also have a functions folder

00:04:41,520 --> 00:04:45,919
for serverless functions and we have a

00:04:44,240 --> 00:04:49,199
graphql folder

00:04:45,919 --> 00:04:51,360
for uh our

00:04:49,199 --> 00:04:52,560
basically like sdl so we're going to

00:04:51,360 --> 00:04:56,080
create a whole

00:04:52,560 --> 00:04:59,199
backend that can speak graphql

00:04:56,080 --> 00:05:02,639
this is what defines first our database

00:04:59,199 --> 00:05:04,160
of being sqlite and is going to set it

00:05:02,639 --> 00:05:07,280
to an environment variable

00:05:04,160 --> 00:05:09,039
of database underscore url and then it

00:05:07,280 --> 00:05:11,360
generates a prisma client and then it

00:05:09,039 --> 00:05:12,000
creates models so we have a post model

00:05:11,360 --> 00:05:14,160
here

00:05:12,000 --> 00:05:16,000
which is just like a blog post and it

00:05:14,160 --> 00:05:19,280
has a title and a body

00:05:16,000 --> 00:05:21,919
and then it also has an id each one will

00:05:19,280 --> 00:05:22,720
be given an id automatically and it will

00:05:21,919 --> 00:05:25,680
just go up

00:05:22,720 --> 00:05:26,800
starting at one and then it sets the

00:05:25,680 --> 00:05:30,160
current time

00:05:26,800 --> 00:05:33,280
to create it at if you've never

00:05:30,160 --> 00:05:35,360
used a graphql before then some of

00:05:33,280 --> 00:05:37,840
redwood might be a little foreign

00:05:35,360 --> 00:05:38,479
but it's a good way to actually get

00:05:37,840 --> 00:05:41,199
introduced

00:05:38,479 --> 00:05:43,039
to some of the ideas of graphql the

00:05:41,199 --> 00:05:44,320
schema definition language being one of

00:05:43,039 --> 00:05:47,440
the biggest ones

00:05:44,320 --> 00:05:48,080
this is our schema so just like we

00:05:47,440 --> 00:05:50,880
defined

00:05:48,080 --> 00:05:52,720
the post earlier we are also defining

00:05:50,880 --> 00:05:56,000
the post here with the id

00:05:52,720 --> 00:05:56,880
title body and created at and then we're

00:05:56,000 --> 00:05:59,919
defining

00:05:56,880 --> 00:06:03,039
our query as well so our query

00:05:59,919 --> 00:06:06,080
is for posts and it returns

00:06:03,039 --> 00:06:08,240
an array of each individual post

00:06:06,080 --> 00:06:09,120
that we have and then you could also

00:06:08,240 --> 00:06:13,360
query

00:06:09,120 --> 00:06:16,639
for just a single post by giving the id

00:06:13,360 --> 00:06:19,919
of that post on the right

00:06:16,639 --> 00:06:20,800
that's then for our mutations not only

00:06:19,919 --> 00:06:23,759
can you

00:06:20,800 --> 00:06:24,319
query for data with graphql you can also

00:06:23,759 --> 00:06:27,360
create

00:06:24,319 --> 00:06:29,360
update or delete things as well so

00:06:27,360 --> 00:06:32,560
it's can do all the kind of crud

00:06:29,360 --> 00:06:36,240
capabilities through graphql

00:06:32,560 --> 00:06:38,639
now our services this is how the

00:06:36,240 --> 00:06:39,280
kind of back end resolvers are being

00:06:38,639 --> 00:06:41,520
written

00:06:39,280 --> 00:06:42,720
and are talking to prisma so we're

00:06:41,520 --> 00:06:46,160
importing

00:06:42,720 --> 00:06:50,560
db which is the prisma client and then

00:06:46,160 --> 00:06:52,639
the db.post. that's to

00:06:50,560 --> 00:06:54,000
do the prismacommand to get all the

00:06:52,639 --> 00:06:56,960
posts or

00:06:54,000 --> 00:06:57,680
dot find one and then same for the right

00:06:56,960 --> 00:07:01,280
your create

00:06:57,680 --> 00:07:04,319
update and delete and that's where we

00:07:01,280 --> 00:07:07,280
import the prisma client this

00:07:04,319 --> 00:07:08,000
is what kind of wires up all of your

00:07:07,280 --> 00:07:11,360
back end

00:07:08,000 --> 00:07:11,919
into one graphql handler so most of this

00:07:11,360 --> 00:07:13,759
stuff

00:07:11,919 --> 00:07:15,440
in the back end you don't really have to

00:07:13,759 --> 00:07:17,680
worry about it it all gets

00:07:15,440 --> 00:07:19,199
generated for you write any of this code

00:07:17,680 --> 00:07:21,520
and i'm just showing you

00:07:19,199 --> 00:07:23,199
to kind of get context most of what

00:07:21,520 --> 00:07:25,360
we'll be writing will be

00:07:23,199 --> 00:07:27,039
more so in the front end and then the

00:07:25,360 --> 00:07:30,080
generators kind of create

00:07:27,039 --> 00:07:33,919
a lot of things for us cool so that

00:07:30,080 --> 00:07:35,039
is the slides and now let's take a look

00:07:33,919 --> 00:07:38,319
at

00:07:35,039 --> 00:07:42,840
project so first off let me

00:07:38,319 --> 00:07:45,440
hide some stuff on my screen there we go

00:07:42,840 --> 00:07:49,440
okay all i've done

00:07:45,440 --> 00:07:53,120
so far is created this project

00:07:49,440 --> 00:07:56,240
so i ran this command yarn create

00:07:53,120 --> 00:07:58,720
redwood dash app and then period forward

00:07:56,240 --> 00:08:01,840
slash and that's the name of the project

00:07:58,720 --> 00:08:04,879
it creates our project gives you

00:08:01,840 --> 00:08:08,560
some nice little info about community

00:08:04,879 --> 00:08:11,680
and where you get some resources and

00:08:08,560 --> 00:08:14,800
this is our project here

00:08:11,680 --> 00:08:16,720
so let's go ahead and get our

00:08:14,800 --> 00:08:18,319
development server started so we're

00:08:16,720 --> 00:08:21,680
going to yarn

00:08:18,319 --> 00:08:24,800
redwood dev and

00:08:21,680 --> 00:08:28,240
our development server is going to start

00:08:24,800 --> 00:08:31,440
on localhost 8910

00:08:28,240 --> 00:08:34,240
and this will be um already set up

00:08:31,440 --> 00:08:35,039
to watch our project so as we make

00:08:34,240 --> 00:08:38,080
changes

00:08:35,039 --> 00:08:40,719
it will automatically update itself

00:08:38,080 --> 00:08:41,919
first we're going to get uh just the

00:08:40,719 --> 00:08:45,040
splash page

00:08:41,919 --> 00:08:45,680
kind of saying hello this is redwood and

00:08:45,040 --> 00:08:49,360
then we'll

00:08:45,680 --> 00:08:52,880
run a command to create our first

00:08:49,360 --> 00:08:56,640
home page all right so there we go

00:08:52,880 --> 00:08:56,959
welcome to redwood.js and now that we

00:08:56,640 --> 00:09:00,800
got

00:08:56,959 --> 00:09:03,920
this going let's also go ahead

00:09:00,800 --> 00:09:05,360
and get a git repository set up

00:09:03,920 --> 00:09:08,560
because what we're going to do is we're

00:09:05,360 --> 00:09:11,600
going to end up uh deploying this

00:09:08,560 --> 00:09:13,360
so this will initialize our git

00:09:11,600 --> 00:09:15,600
repository

00:09:13,360 --> 00:09:18,000
add everything and then commit

00:09:15,600 --> 00:09:21,040
everything

00:09:18,000 --> 00:09:23,920
and we're also going to

00:09:21,040 --> 00:09:25,120
create a repository over here which will

00:09:23,920 --> 00:09:28,720
be

00:09:25,120 --> 00:09:32,399
rw dash js dash

00:09:28,720 --> 00:09:33,120
monthly and this is just going to be a

00:09:32,399 --> 00:09:35,920
blank

00:09:33,120 --> 00:09:36,959
repository that we're going to then push

00:09:35,920 --> 00:09:42,480
our project

00:09:36,959 --> 00:09:42,480
up into so we're going to set the remote

00:09:45,600 --> 00:09:51,839
and then push to origin

00:09:52,399 --> 00:10:00,399
and if we go back here now and refresh

00:09:56,560 --> 00:10:04,880
we will see our project

00:10:00,399 --> 00:10:09,440
so this is uh just a blank redwood

00:10:04,880 --> 00:10:11,760
project that we've generated cool

00:10:09,440 --> 00:10:13,040
now let's actually start building some

00:10:11,760 --> 00:10:15,440
stuff

00:10:13,040 --> 00:10:16,839
so the first command we're gonna do is

00:10:15,440 --> 00:10:19,839
yarn

00:10:16,839 --> 00:10:22,399
redwood generate

00:10:19,839 --> 00:10:24,160
page and then we're going to generate a

00:10:22,399 --> 00:10:26,160
home page

00:10:24,160 --> 00:10:27,440
at our home route which is the forward

00:10:26,160 --> 00:10:29,360
slash

00:10:27,440 --> 00:10:31,200
and then it's going to get rid of this

00:10:29,360 --> 00:10:33,519
slash page here

00:10:31,200 --> 00:10:35,360
and automatically update it with our

00:10:33,519 --> 00:10:39,519
first homepage

00:10:35,360 --> 00:10:47,839
this was created in our web folder src

00:10:39,519 --> 00:10:47,839
pages and home page

00:10:49,519 --> 00:10:56,399
so if we make a change and we save

00:10:52,560 --> 00:10:59,680
then we will see the change on the right

00:10:56,399 --> 00:11:03,040
cool let's generate another page

00:10:59,680 --> 00:11:06,800
yarn redwood generate page

00:11:03,040 --> 00:11:09,120
about and this time we don't need to

00:11:06,800 --> 00:11:10,320
even specify the route like we did with

00:11:09,120 --> 00:11:12,720
the forward slash

00:11:10,320 --> 00:11:13,600
because we want it to be set to the

00:11:12,720 --> 00:11:16,399
about route

00:11:13,600 --> 00:11:17,920
and also the about page you'll also

00:11:16,399 --> 00:11:20,959
notice that

00:11:17,920 --> 00:11:24,160
we're creating a couple other files here

00:11:20,959 --> 00:11:27,680
each one comes with a dot stories

00:11:24,160 --> 00:11:31,120
for storybook and a dot test for

00:11:27,680 --> 00:11:32,480
jest testing so this is now our about

00:11:31,120 --> 00:11:35,360
page

00:11:32,480 --> 00:11:37,120
if we go now to slash about we have our

00:11:35,360 --> 00:11:39,519
about page

00:11:37,120 --> 00:11:41,680
and we want to create a layout now

00:11:39,519 --> 00:11:43,600
that's going to

00:11:41,680 --> 00:11:45,440
wrap both of our pages and allow us to

00:11:43,600 --> 00:11:46,480
navigate in between so we now are doing

00:11:45,440 --> 00:11:49,279
yarn redwood

00:11:46,480 --> 00:11:51,279
generate layout and we're generating a

00:11:49,279 --> 00:11:53,440
blog layout

00:11:51,279 --> 00:11:54,639
it will not be in pages it'll be in

00:11:53,440 --> 00:11:58,399
layouts under

00:11:54,639 --> 00:12:01,519
blog layout and

00:11:58,399 --> 00:12:05,040
this layout is simply going to have

00:12:01,519 --> 00:12:12,000
links to home

00:12:05,040 --> 00:12:15,120
and links to about cool

00:12:12,000 --> 00:12:16,079
and then once you do that you have to

00:12:15,120 --> 00:12:19,839
actually

00:12:16,079 --> 00:12:23,120
bring the blog layout into your pages

00:12:19,839 --> 00:12:26,480
so let's go back to our home page

00:12:23,120 --> 00:12:29,680
and we're importing the blog layout

00:12:26,480 --> 00:12:29,680
and we are

00:12:30,880 --> 00:12:34,639
wrapping it or we're importing it and

00:12:33,040 --> 00:12:36,720
then wrapping our content with it so we

00:12:34,639 --> 00:12:40,959
have blog layout and then closing slash

00:12:36,720 --> 00:12:44,399
blog layout and if we

00:12:40,959 --> 00:12:46,480
go now to about we

00:12:44,399 --> 00:12:47,760
have to bring in the blog layout to our

00:12:46,480 --> 00:12:50,399
about page

00:12:47,760 --> 00:12:53,680
and then we'll be able to navigate in

00:12:50,399 --> 00:12:57,600
between the two of them

00:12:53,680 --> 00:12:57,600
so about page

00:13:00,560 --> 00:13:06,720
okay so if we can click that go to home

00:13:04,079 --> 00:13:07,519
go to about and there we are so that's

00:13:06,720 --> 00:13:10,720
pretty cool

00:13:07,519 --> 00:13:12,399
now what we're going to do is we're

00:13:10,720 --> 00:13:15,760
going to

00:13:12,399 --> 00:13:19,360
create our post model

00:13:15,760 --> 00:13:22,639
in schema.prisma we're going to delete

00:13:19,360 --> 00:13:25,839
this and we're gonna delete

00:13:22,639 --> 00:13:29,200
that and our post model is what we

00:13:25,839 --> 00:13:32,480
looked at on the slides

00:13:29,200 --> 00:13:36,160
once we do that we are going to do

00:13:32,480 --> 00:13:36,880
yarn redwood db save and then create

00:13:36,160 --> 00:13:40,560
posts

00:13:36,880 --> 00:13:44,079
in quotes and this is going to create

00:13:40,560 --> 00:13:46,800
a migration a migration is

00:13:44,079 --> 00:13:47,839
the series of sql steps that are going

00:13:46,800 --> 00:13:50,160
to be

00:13:47,839 --> 00:13:51,279
applied to the database to get our

00:13:50,160 --> 00:13:54,480
database set up

00:13:51,279 --> 00:13:58,240
with its tables for our blog posts

00:13:54,480 --> 00:14:00,839
so this will create a migrations

00:13:58,240 --> 00:14:03,360
here that you can look at if you're

00:14:00,839 --> 00:14:04,240
interested and to actually apply the

00:14:03,360 --> 00:14:07,600
migration

00:14:04,240 --> 00:14:10,240
you do yarn redwood db up

00:14:07,600 --> 00:14:11,519
this will get your database up and ready

00:14:10,240 --> 00:14:15,279
to go

00:14:11,519 --> 00:14:17,199
and the yarn redwood generate scaffold

00:14:15,279 --> 00:14:19,279
command this is going to be the command

00:14:17,199 --> 00:14:22,000
that's going to create

00:14:19,279 --> 00:14:23,680
essentially our entire blog interface

00:14:22,000 --> 00:14:26,079
that will allow us to

00:14:23,680 --> 00:14:28,079
create our posts and edit them and do

00:14:26,079 --> 00:14:31,600
all the things we want to do

00:14:28,079 --> 00:14:35,120
so once this finishes we will run

00:14:31,600 --> 00:14:38,720
the scaffold command and

00:14:35,120 --> 00:14:42,000
let's go back to home here

00:14:38,720 --> 00:14:45,519
and real quick just to show what came

00:14:42,000 --> 00:14:49,040
out of this it will

00:14:45,519 --> 00:14:50,800
give you exactly what was created so it

00:14:49,040 --> 00:14:53,360
shows the data model

00:14:50,800 --> 00:14:54,560
and then it shows the commands that are

00:14:53,360 --> 00:14:55,519
being run it shows you where the

00:14:54,560 --> 00:14:58,800
migration

00:14:55,519 --> 00:15:03,040
is and all that stuff so

00:14:58,800 --> 00:15:06,560
this is going to create a lot of stuff

00:15:03,040 --> 00:15:08,399
and it's kind of too much to go into

00:15:06,560 --> 00:15:10,000
just in the spans talk but i highly

00:15:08,399 --> 00:15:10,639
recommend just kind of poking around in

00:15:10,000 --> 00:15:12,639
it

00:15:10,639 --> 00:15:15,199
and it's a good way to kind of figure

00:15:12,639 --> 00:15:17,600
out how a project is structured

00:15:15,199 --> 00:15:19,519
but what's nice is that you can just run

00:15:17,600 --> 00:15:22,079
the command and get it set up

00:15:19,519 --> 00:15:23,360
for you now what we do here is we're

00:15:22,079 --> 00:15:28,160
going to go to

00:15:23,360 --> 00:15:32,079
slash posts and we're going to have

00:15:28,160 --> 00:15:35,040
our blog posts interface

00:15:32,079 --> 00:15:36,240
right here now when i was showing you

00:15:35,040 --> 00:15:39,120
the cells

00:15:36,240 --> 00:15:40,560
there was the different states that your

00:15:39,120 --> 00:15:43,279
data could be in

00:15:40,560 --> 00:15:43,759
right now you see how it says loading so

00:15:43,279 --> 00:15:47,040
it's

00:15:43,759 --> 00:15:50,639
checking the database to see if we have

00:15:47,040 --> 00:15:52,880
any posts and once it figures out

00:15:50,639 --> 00:15:54,560
whether we do or not it'll say no posts

00:15:52,880 --> 00:15:58,240
do you want to create one

00:15:54,560 --> 00:16:02,160
and yes just

00:15:58,240 --> 00:16:06,560
like and then when we do that

00:16:02,160 --> 00:16:10,480
we now have our post and if we want to

00:16:06,560 --> 00:16:13,759
edit the post you can edit it

00:16:10,480 --> 00:16:16,079
and if we want to delete a post

00:16:13,759 --> 00:16:17,600
we can also do that as well it'll give

00:16:16,079 --> 00:16:19,759
you a little warning

00:16:17,600 --> 00:16:21,519
asking if you really want to delete the

00:16:19,759 --> 00:16:25,759
post

00:16:21,519 --> 00:16:25,759
let's get one more post up here

00:16:26,959 --> 00:16:30,800
and now we want to do is we want to

00:16:29,040 --> 00:16:35,120
create a cell

00:16:30,800 --> 00:16:38,399
that's going to allow us to

00:16:35,120 --> 00:16:42,480
render all of our blog posts onto

00:16:38,399 --> 00:16:44,320
our home page and this is now going to

00:16:42,480 --> 00:16:48,079
go into the components

00:16:44,320 --> 00:16:51,519
folder and blog post cell

00:16:48,079 --> 00:16:55,120
blog post cell

00:16:51,519 --> 00:16:56,320
now what we want to search for is not

00:16:55,120 --> 00:16:59,440
blog posts but

00:16:56,320 --> 00:17:00,720
posts because that's what our schema was

00:16:59,440 --> 00:17:04,079
set to

00:17:00,720 --> 00:17:08,240
so if we do that posts

00:17:04,079 --> 00:17:11,039
and posts now right now we're not

00:17:08,240 --> 00:17:12,400
going to see anything because much like

00:17:11,039 --> 00:17:13,839
the blog layout

00:17:12,400 --> 00:17:16,400
once you've created it you have to

00:17:13,839 --> 00:17:19,439
actually import it

00:17:16,400 --> 00:17:21,600
into your

00:17:19,439 --> 00:17:22,640
your the page you want to see it in so

00:17:21,600 --> 00:17:26,319
we're going to

00:17:22,640 --> 00:17:32,000
import this into our home page

00:17:26,319 --> 00:17:34,320
which will be like so

00:17:32,000 --> 00:17:35,440
so now we have our blog layout but we

00:17:34,320 --> 00:17:38,640
have

00:17:35,440 --> 00:17:41,760
blog post cell and

00:17:38,640 --> 00:17:41,760
i'll get that right there

00:17:42,000 --> 00:17:44,320
okay

00:17:45,679 --> 00:17:49,039
so what we're seeing now is we're only

00:17:48,320 --> 00:17:52,320
seeing

00:17:49,039 --> 00:17:53,600
the id and we're being given the type

00:17:52,320 --> 00:17:56,080
of the thing we're getting which is a

00:17:53,600 --> 00:17:59,200
post now the reason for this

00:17:56,080 --> 00:18:00,240
is in our blog cell right now we're only

00:17:59,200 --> 00:18:03,360
asking for

00:18:00,240 --> 00:18:07,440
the id we also want the

00:18:03,360 --> 00:18:11,520
title and the body

00:18:07,440 --> 00:18:11,520
and the created at

00:18:12,400 --> 00:18:19,760
now we'll be able to see everything

00:18:16,160 --> 00:18:22,799
but if we really want to

00:18:19,760 --> 00:18:23,679
style it make it look a little nicer we

00:18:22,799 --> 00:18:28,320
can do that

00:18:23,679 --> 00:18:31,760
here in success

00:18:28,320 --> 00:18:34,960
this is taking the id say to the key

00:18:31,760 --> 00:18:36,080
creating a title in h2 putting the body

00:18:34,960 --> 00:18:39,200
in a paragraph

00:18:36,080 --> 00:18:44,160
and then creating a little div for the

00:18:39,200 --> 00:18:46,559
time created all right there is our blog

00:18:44,160 --> 00:18:47,760
now what we really want to do though is

00:18:46,559 --> 00:18:51,280
we want to put

00:18:47,760 --> 00:18:52,080
this blog on the internet this is going

00:18:51,280 --> 00:18:55,600
to

00:18:52,080 --> 00:18:56,080
set up our deploy for netlify there's

00:18:55,600 --> 00:18:59,200
also

00:18:56,080 --> 00:19:00,080
a similar command you can use for first

00:18:59,200 --> 00:19:02,880
cell

00:19:00,080 --> 00:19:03,520
and this is really nice because it gives

00:19:02,880 --> 00:19:08,240
you your

00:19:03,520 --> 00:19:08,240
build steps automatically and

00:19:08,840 --> 00:19:14,640
netlify.tommel while that

00:19:10,640 --> 00:19:15,840
is going there's only one other piece of

00:19:14,640 --> 00:19:17,760
configuration you have to do and you

00:19:15,840 --> 00:19:21,360
have to change your database

00:19:17,760 --> 00:19:25,120
from sql lite to postgres

00:19:21,360 --> 00:19:27,280
and that's all you gotta do

00:19:25,120 --> 00:19:28,400
so this was the netlify.tamal that was

00:19:27,280 --> 00:19:31,200
created

00:19:28,400 --> 00:19:32,080
it has a build command and sets up our

00:19:31,200 --> 00:19:35,520
database

00:19:32,080 --> 00:19:38,960
has a folder to publish your assets

00:19:35,520 --> 00:19:39,919
and redirects so now we all that is all

00:19:38,960 --> 00:19:42,559
set up

00:19:39,919 --> 00:19:44,320
you want to not forget to actually push

00:19:42,559 --> 00:19:48,000
all this stuff

00:19:44,320 --> 00:19:50,799
so we're gonna commit and we're gonna

00:19:48,000 --> 00:19:54,640
push that up to the repo that we created

00:19:50,799 --> 00:19:58,240
at the beginning we're going to use

00:19:54,640 --> 00:20:01,919
netlify to deploy

00:19:58,240 --> 00:20:05,600
the front end and heroku

00:20:01,919 --> 00:20:08,320
for the postgres database and all this

00:20:05,600 --> 00:20:09,520
is on the free tier which is pretty nice

00:20:08,320 --> 00:20:14,400
so we're gonna go

00:20:09,520 --> 00:20:14,400
new site select github

00:20:15,520 --> 00:20:24,080
type in your repo

00:20:20,640 --> 00:20:27,360
and select the repo and it will

00:20:24,080 --> 00:20:28,480
automatically include the

00:20:27,360 --> 00:20:32,000
build command because you have that

00:20:28,480 --> 00:20:35,200
netlify dot tomml

00:20:32,000 --> 00:20:37,840
that'll take a little while to deploy so

00:20:35,200 --> 00:20:42,000
while that's going on

00:20:37,840 --> 00:20:45,919
uh let me also turn this off

00:20:42,000 --> 00:20:50,159
okay create new app

00:20:45,919 --> 00:20:53,280
and call it redwood js

00:20:50,159 --> 00:20:56,720
monthly db

00:20:53,280 --> 00:21:02,720
create that app once you have

00:20:56,720 --> 00:21:04,400
created the app oh gotta re-authenticate

00:21:02,720 --> 00:21:05,840
once you have created the app you're

00:21:04,400 --> 00:21:09,039
gonna go to

00:21:05,840 --> 00:21:13,760
uh resources and then just

00:21:09,039 --> 00:21:16,880
enter postgres for add-ons

00:21:13,760 --> 00:21:18,960
her postgres there's

00:21:16,880 --> 00:21:20,799
a lot of different options we just can

00:21:18,960 --> 00:21:24,480
pick the hobby dev free

00:21:20,799 --> 00:21:27,360
and submit order form

00:21:24,480 --> 00:21:28,320
now to actually connect the two we're

00:21:27,360 --> 00:21:31,520
gonna have

00:21:28,320 --> 00:21:33,600
environment variables so these are

00:21:31,520 --> 00:21:35,200
the keys that you want to guard very

00:21:33,600 --> 00:21:37,120
carefully so after i do these

00:21:35,200 --> 00:21:38,080
presentations i like tear down these

00:21:37,120 --> 00:21:40,799
projects

00:21:38,080 --> 00:21:42,400
but basically it generated this database

00:21:40,799 --> 00:21:45,679
url

00:21:42,400 --> 00:21:49,360
environment variable with this postgres

00:21:45,679 --> 00:21:52,400
uh url and you go to

00:21:49,360 --> 00:21:54,320
your site settings and you go to build

00:21:52,400 --> 00:21:58,000
and deploy

00:21:54,320 --> 00:22:02,240
scroll down and you will see

00:21:58,000 --> 00:22:05,840
environment and environment variables

00:22:02,240 --> 00:22:09,039
type in the name database underscore

00:22:05,840 --> 00:22:10,240
url and then there's one other thing

00:22:09,039 --> 00:22:12,240
that you want to make sure you don't

00:22:10,240 --> 00:22:15,679
forget to do which is

00:22:12,240 --> 00:22:17,520
set the connection pool what this

00:22:15,679 --> 00:22:19,039
is is you want to make sure that your

00:22:17,520 --> 00:22:21,840
app isn't connecting

00:22:19,039 --> 00:22:23,520
to your database multiple times is is

00:22:21,840 --> 00:22:25,120
basically what this is

00:22:23,520 --> 00:22:26,880
and so we're going to set the connection

00:22:25,120 --> 00:22:31,280
limit to

00:22:26,880 --> 00:22:31,280
one and

00:22:31,679 --> 00:22:36,159
then you stick that right on the end

00:22:33,840 --> 00:22:36,159
here

00:22:36,400 --> 00:22:42,640
and then we're going to save so let's

00:22:39,200 --> 00:22:42,640
set our environment variable

00:22:42,880 --> 00:22:48,080
let's see if this is still deploying

00:22:49,120 --> 00:22:55,200
all right that is still going um

00:22:52,480 --> 00:22:55,919
are there any questions for me while

00:22:55,200 --> 00:22:58,880
this is

00:22:55,919 --> 00:22:58,880
uh building out

00:23:00,640 --> 00:23:09,120
yeah i have a couple answers cool

00:23:05,120 --> 00:23:11,280
hit me with them um

00:23:09,120 --> 00:23:12,400
so i suppose some quite a couple of

00:23:11,280 --> 00:23:16,880
quite broad questions

00:23:12,400 --> 00:23:20,000
um so um

00:23:16,880 --> 00:23:20,880
yeah what why this um why this project

00:23:20,000 --> 00:23:23,760
over and above

00:23:20,880 --> 00:23:24,480
um you know tools or collections of

00:23:23,760 --> 00:23:26,240
tools like

00:23:24,480 --> 00:23:28,400
next js and gatsby and things that

00:23:26,240 --> 00:23:29,760
already exist i mean i can see it's got

00:23:28,400 --> 00:23:32,720
a it's got a few other

00:23:29,760 --> 00:23:33,600
uh nice to haves in there and and um but

00:23:32,720 --> 00:23:35,200
is there like a

00:23:33,600 --> 00:23:37,760
single selling point that you would tell

00:23:35,200 --> 00:23:41,200
someone

00:23:37,760 --> 00:23:43,600
i would say it's giving you the

00:23:41,200 --> 00:23:44,559
full stack experience because with

00:23:43,600 --> 00:23:47,840
something like

00:23:44,559 --> 00:23:50,320
gatsby or next js they're

00:23:47,840 --> 00:23:52,559
really incredible tools and you can

00:23:50,320 --> 00:23:56,080
create really sophisticated

00:23:52,559 --> 00:23:56,880
client sides with them but for redwood

00:23:56,080 --> 00:24:00,400
it's

00:23:56,880 --> 00:24:01,840
giving you conventions to already have a

00:24:00,400 --> 00:24:03,520
way to speak to your database

00:24:01,840 --> 00:24:05,039
and have it be coherent throughout your

00:24:03,520 --> 00:24:05,520
whole project so i think a lot of people

00:24:05,039 --> 00:24:07,600
who

00:24:05,520 --> 00:24:10,000
have tried to learn react have struggled

00:24:07,600 --> 00:24:10,960
with the general lack of structure that

00:24:10,000 --> 00:24:12,960
comes with

00:24:10,960 --> 00:24:14,480
react because it's it's very flexible

00:24:12,960 --> 00:24:16,640
and it's very minimal

00:24:14,480 --> 00:24:17,679
and it's mostly just taking like the

00:24:16,640 --> 00:24:19,600
view layer

00:24:17,679 --> 00:24:20,799
so i see these different frameworks as

00:24:19,600 --> 00:24:24,400
each building out

00:24:20,799 --> 00:24:27,520
like more and more abstractions on top

00:24:24,400 --> 00:24:29,200
so i think if you want to go beyond just

00:24:27,520 --> 00:24:30,880
the type of like static content you

00:24:29,200 --> 00:24:31,440
create with gatsby or if you want to go

00:24:30,880 --> 00:24:33,120
beyond

00:24:31,440 --> 00:24:34,880
the type of like server stuff you can do

00:24:33,120 --> 00:24:35,919
it next because next still doesn't

00:24:34,880 --> 00:24:38,080
really

00:24:35,919 --> 00:24:39,679
have any opinions about the database

00:24:38,080 --> 00:24:41,360
that's even though

00:24:39,679 --> 00:24:43,039
people say it has like a back end that's

00:24:41,360 --> 00:24:45,200
like quote unquote full stack it's

00:24:43,039 --> 00:24:46,960
it's has a server side because it's like

00:24:45,200 --> 00:24:49,279
universal rendering but

00:24:46,960 --> 00:24:50,000
it doesn't really have like a database

00:24:49,279 --> 00:24:52,000
opinion

00:24:50,000 --> 00:24:53,840
whereas with redwood you get prizmo

00:24:52,000 --> 00:24:54,799
which is like a whole orm that's like

00:24:53,840 --> 00:24:56,400
active record

00:24:54,799 --> 00:24:58,720
so that's kind of the difference how i

00:24:56,400 --> 00:25:00,799
see it so right now our site is

00:24:58,720 --> 00:25:01,840
live but um we're gonna have to do this

00:25:00,799 --> 00:25:03,919
again

00:25:01,840 --> 00:25:05,600
so i will take one more question real

00:25:03,919 --> 00:25:07,919
quick another question real quick

00:25:05,600 --> 00:25:09,600
so right now this will be uh broken

00:25:07,919 --> 00:25:12,000
because

00:25:09,600 --> 00:25:14,720
we have to actually retrigger the builds

00:25:12,000 --> 00:25:17,919
to get the environment variables to run

00:25:14,720 --> 00:25:19,679
so we're going to do that again

00:25:17,919 --> 00:25:21,120
and you want to wait for it to finish

00:25:19,679 --> 00:25:22,159
the first time because that it has the

00:25:21,120 --> 00:25:25,520
cash

00:25:22,159 --> 00:25:28,640
so um yeah do you have um

00:25:25,520 --> 00:25:32,159
other questions saw that it um

00:25:28,640 --> 00:25:34,880
a lot of the files that you were um um

00:25:32,159 --> 00:25:37,120
demonstrating were js does it support ts

00:25:34,880 --> 00:25:39,039
does it support typescript

00:25:37,120 --> 00:25:40,720
yeah it's getting to the point where

00:25:39,039 --> 00:25:43,360
almost the entire framework

00:25:40,720 --> 00:25:45,039
has been converted over to to typescript

00:25:43,360 --> 00:25:47,360
it's sort of been a gradual process

00:25:45,039 --> 00:25:49,120
because it was originally written in

00:25:47,360 --> 00:25:50,480
javascript and then there was a lot of

00:25:49,120 --> 00:25:52,640
people wanted

00:25:50,480 --> 00:25:53,919
uh both like kind of types they want to

00:25:52,640 --> 00:25:55,279
be able to write in types and they want

00:25:53,919 --> 00:25:56,000
to like kind of types if they're

00:25:55,279 --> 00:25:58,640
contributing

00:25:56,000 --> 00:25:59,600
so it's been basically kind of like

00:25:58,640 --> 00:26:02,640
piecemeal

00:25:59,600 --> 00:26:05,360
breaking pieces off and making them

00:26:02,640 --> 00:26:06,960
typescript compatible so that's um work

00:26:05,360 --> 00:26:07,360
is ongoing but we're getting pretty

00:26:06,960 --> 00:26:10,000
close

00:26:07,360 --> 00:26:10,640
so if you're into into scripts then like

00:26:10,000 --> 00:26:12,240
we're

00:26:10,640 --> 00:26:14,559
almost across the finish line there in

00:26:12,240 --> 00:26:17,760
terms of being like

00:26:14,559 --> 00:26:19,279
fully typescript compatible but

00:26:17,760 --> 00:26:21,520
right now you can like write typescript

00:26:19,279 --> 00:26:24,799
and it'll work you know

00:26:21,520 --> 00:26:26,000
does it support incremental builds uh

00:26:24,799 --> 00:26:29,440
yes that's a good question

00:26:26,000 --> 00:26:32,240
uh right now it's um does not

00:26:29,440 --> 00:26:34,400
because the the kind of when it comes

00:26:32,240 --> 00:26:35,919
like the incremental build stuff

00:26:34,400 --> 00:26:37,679
it's it's a question of whether it needs

00:26:35,919 --> 00:26:39,840
to be in the framework or it needs to be

00:26:37,679 --> 00:26:41,360
in the provider level

00:26:39,840 --> 00:26:43,679
and how much integration there is

00:26:41,360 --> 00:26:45,279
between the frameworks and the

00:26:43,679 --> 00:26:47,039
and the providers in terms like who's

00:26:45,279 --> 00:26:49,279
doing the build so

00:26:47,039 --> 00:26:50,320
like for gatsby they they built their

00:26:49,279 --> 00:26:52,240
own kind of

00:26:50,320 --> 00:26:53,679
cloud to do their to do their own

00:26:52,240 --> 00:26:56,799
incremental builds

00:26:53,679 --> 00:26:57,919
so right now um we're not doing any sort

00:26:56,799 --> 00:27:01,679
of like incremental

00:26:57,919 --> 00:27:04,000
build process but that and things like

00:27:01,679 --> 00:27:04,880
uh pre-rendering uh all that kind of

00:27:04,000 --> 00:27:08,000
stuff is

00:27:04,880 --> 00:27:10,880
being worked on for for when we get to

00:27:08,000 --> 00:27:11,840
v1 so we're aiming for v1 in the first

00:27:10,880 --> 00:27:13,200
quarter

00:27:11,840 --> 00:27:14,960
and that's where we're going to kind of

00:27:13,200 --> 00:27:15,600
like iron out those last kind of bits

00:27:14,960 --> 00:27:18,720
but

00:27:15,600 --> 00:27:20,320
right now it's um just kind of like

00:27:18,720 --> 00:27:22,320
stabilizing the technology getting all

00:27:20,320 --> 00:27:23,760
the pieces to to fit together but

00:27:22,320 --> 00:27:25,840
in terms of like just getting you a

00:27:23,760 --> 00:27:26,480
project up and running really fast it's

00:27:25,840 --> 00:27:28,480
really good

00:27:26,480 --> 00:27:29,679
there's some people who are actually

00:27:28,480 --> 00:27:33,039
combining it with

00:27:29,679 --> 00:27:35,039
like a next js front end so

00:27:33,039 --> 00:27:36,720
hit this it's really interesting because

00:27:35,039 --> 00:27:39,840
they use like the redwood

00:27:36,720 --> 00:27:42,320
api and then attach uh

00:27:39,840 --> 00:27:43,919
next.js front end or like a gatsby front

00:27:42,320 --> 00:27:44,960
end so there's like these different kind

00:27:43,919 --> 00:27:48,640
of hybrid

00:27:44,960 --> 00:27:52,320
solutions that are also being created

00:27:48,640 --> 00:27:55,679
and this looks like it's good to go

00:27:52,320 --> 00:28:00,000
now if we check out

00:27:55,679 --> 00:28:03,279
our deploy if we go to

00:28:00,000 --> 00:28:06,320
slash posts we will

00:28:03,279 --> 00:28:06,880
be able to so now it says empty instead

00:28:06,320 --> 00:28:09,919
of

00:28:06,880 --> 00:28:09,919
giving us that error

00:28:12,799 --> 00:28:23,360
and if we go back to our home page

00:28:16,880 --> 00:28:23,360

YouTube URL: https://www.youtube.com/watch?v=x3NuaErh6vs


