Title: Awesome Web Data Visualization with Google Maps Platform and Deck.gl - JS Monthly - November 2019
Publication date: 2019-11-24
Playlist: JS Monthly London
Description: 
	The Google team recently announced initial support for the Deck.gl framework, which brings beautiful, high volume, WebGL accelerated data visualization capabilities to maps. In this talk we'll look at how to integrate Deck.gl into maps on the web using the Maps JS API.
Captions: 
	00:00:00,060 --> 00:00:06,029
today I'm gonna talk about using the

00:00:03,090 --> 00:00:08,519
Google Maps developer platform with a

00:00:06,029 --> 00:00:11,610
new open-source framework called Dec geo

00:00:08,519 --> 00:00:14,580
which was developed actually by the

00:00:11,610 --> 00:00:17,730
engineering team at uber so my name is

00:00:14,580 --> 00:00:21,900
Alex and I'm a developer advocate on the

00:00:17,730 --> 00:00:24,840
Geo team so Maps basically at Google

00:00:21,900 --> 00:00:27,150
that's my twitter handle at the bottom

00:00:24,840 --> 00:00:29,189
so if you have any questions you know

00:00:27,150 --> 00:00:30,960
about Maps or I actually have a long

00:00:29,189 --> 00:00:33,480
history and like JavaScript open source

00:00:30,960 --> 00:00:35,640
all that good stuff so please feel free

00:00:33,480 --> 00:00:38,219
to ping me if yeah if you have any

00:00:35,640 --> 00:00:40,530
questions afterwards I realized that my

00:00:38,219 --> 00:00:43,230
name is very long and hard to spell and

00:00:40,530 --> 00:00:45,440
pronounce so you can kind of universally

00:00:43,230 --> 00:00:49,020
find me online on github and everywhere

00:00:45,440 --> 00:00:50,820
by this angry little dog in the beer box

00:00:49,020 --> 00:00:53,219
that is my dog her name is Allie she is

00:00:50,820 --> 00:00:55,350
exactly as pissed off as she looks in

00:00:53,219 --> 00:00:57,660
that photo before I kind of get into

00:00:55,350 --> 00:01:00,270
into the actual like implementation

00:00:57,660 --> 00:01:02,329
details I like to start this talk with

00:01:00,270 --> 00:01:05,010
kind of a basic conceit and that's that

00:01:02,329 --> 00:01:07,409
understanding data is really very hard

00:01:05,010 --> 00:01:10,080
I'm sure so everyone here is a web

00:01:07,409 --> 00:01:12,119
developer I assume right or an aspiring

00:01:10,080 --> 00:01:14,220
web developer and which means that you

00:01:12,119 --> 00:01:15,840
probably work with some sort of data or

00:01:14,220 --> 00:01:18,150
like data processing or data

00:01:15,840 --> 00:01:18,930
visualization or analysis in your in

00:01:18,150 --> 00:01:21,420
your day to day life

00:01:18,930 --> 00:01:27,180
anyone here that doesn't apply to if you

00:01:21,420 --> 00:01:30,299
don't get out so that but here's the

00:01:27,180 --> 00:01:34,320
thing right as we work with increasingly

00:01:30,299 --> 00:01:35,430
large datasets over time right as human

00:01:34,320 --> 00:01:38,130
beings we have very little ability

00:01:35,430 --> 00:01:40,110
actually to really understand and

00:01:38,130 --> 00:01:41,759
conceptualize what that data represents

00:01:40,110 --> 00:01:44,579
this is particularly true when we talk

00:01:41,759 --> 00:01:46,020
about when we talk about geo data so

00:01:44,579 --> 00:01:47,880
when you look at a whole bunch of

00:01:46,020 --> 00:01:49,890
different latitude and longitude points

00:01:47,880 --> 00:01:52,020
for example that represent I don't know

00:01:49,890 --> 00:01:53,850
like the locations of stores or

00:01:52,020 --> 00:01:54,899
something like that right the reality is

00:01:53,850 --> 00:01:56,399
is looking at the data we have

00:01:54,899 --> 00:02:01,670
absolutely we have absolutely no ability

00:01:56,399 --> 00:02:03,509
to put that on the map right the

00:02:01,670 --> 00:02:06,390
conceptualize what that data actually

00:02:03,509 --> 00:02:07,950
means so understanding data is very geo

00:02:06,390 --> 00:02:11,670
data is very hard because of this thing

00:02:07,950 --> 00:02:13,090
that we call the world right so here's

00:02:11,670 --> 00:02:16,150
an example

00:02:13,090 --> 00:02:18,340
this is a gigantic array of latitude and

00:02:16,150 --> 00:02:24,880
longitude points would anybody like to

00:02:18,340 --> 00:02:28,060
guess what this represents directions

00:02:24,880 --> 00:02:30,580
path if anyone else guesses anyone think

00:02:28,060 --> 00:02:32,019
they can parse this the thing is this

00:02:30,580 --> 00:02:33,220
means absolutely nothing this is like

00:02:32,019 --> 00:02:35,560
complete guy this is like complete

00:02:33,220 --> 00:02:37,660
garbage I literally made the made all

00:02:35,560 --> 00:02:40,300
these data points by like smashing my

00:02:37,660 --> 00:02:43,209
hands on a number pad like over and over

00:02:40,300 --> 00:02:45,790
and just to point out the fact that

00:02:43,209 --> 00:02:49,330
again like we just we have no ability to

00:02:45,790 --> 00:02:51,459
to look to look at this data it you know

00:02:49,330 --> 00:02:53,230
either individually as individual points

00:02:51,459 --> 00:02:56,530
or in aggregate and actually understand

00:02:53,230 --> 00:02:58,989
what what is represented by it

00:02:56,530 --> 00:03:02,410
so this is where data visualization

00:02:58,989 --> 00:03:03,760
comes in okay actually oh man this

00:03:02,410 --> 00:03:08,799
clicker is like screwing up on me hold

00:03:03,760 --> 00:03:11,349
on so and up until this point we've

00:03:08,799 --> 00:03:13,540
basically we've had the pin everyone's

00:03:11,349 --> 00:03:15,250
familiar with the pen probably and let

00:03:13,540 --> 00:03:18,160
get me wrong like we love the pin like

00:03:15,250 --> 00:03:20,380
especially at maps like pins done a lot

00:03:18,160 --> 00:03:21,760
for us over the years right it's helped

00:03:20,380 --> 00:03:23,680
us find a lot of things get a lot of

00:03:21,760 --> 00:03:27,549
directions to do all that all that good

00:03:23,680 --> 00:03:29,079
stuff but the honest truth is that there

00:03:27,549 --> 00:03:30,670
are limitations right there's there's

00:03:29,079 --> 00:03:33,700
conceptual limitations like UX

00:03:30,670 --> 00:03:35,410
considerations to the pin where once you

00:03:33,700 --> 00:03:37,359
have a whole bunch of points on the map

00:03:35,410 --> 00:03:40,260
right like what does it even actually

00:03:37,359 --> 00:03:42,910
mean to us the the other thing is that

00:03:40,260 --> 00:03:47,380
who's used the Maps JavaScript API to

00:03:42,910 --> 00:03:48,700
put a map on a website before cool who

00:03:47,380 --> 00:03:52,000
has tried to put more than two or three

00:03:48,700 --> 00:03:54,780
hundred pins on the map well actually

00:03:52,000 --> 00:03:57,310
quite a few people how'd that go

00:03:54,780 --> 00:03:59,799
probably like actually not super good

00:03:57,310 --> 00:04:03,459
right like the the total truth is is

00:03:59,799 --> 00:04:06,880
that that the implementation of our

00:04:03,459 --> 00:04:09,069
marker library runs into fairly severe

00:04:06,880 --> 00:04:10,150
performance constraints once you start

00:04:09,069 --> 00:04:12,579
getting up to like two or three hundred

00:04:10,150 --> 00:04:15,370
now granted most people are not going to

00:04:12,579 --> 00:04:16,539
need to visual to visualize more than

00:04:15,370 --> 00:04:18,789
two or three hundred points on the map

00:04:16,539 --> 00:04:20,950
right most of us are maybe doing a

00:04:18,789 --> 00:04:23,020
couple dozen at the most but again like

00:04:20,950 --> 00:04:24,400
as we as time goes on and we're working

00:04:23,020 --> 00:04:26,530
with bigger larger and larger datasets

00:04:24,400 --> 00:04:29,140
and we look at things in Agra

00:04:26,530 --> 00:04:33,070
for example right the number of cases

00:04:29,140 --> 00:04:36,520
where we actually need to render much

00:04:33,070 --> 00:04:38,830
larger collections of data increases so

00:04:36,520 --> 00:04:40,330
this is where Dec GL comes in

00:04:38,830 --> 00:04:42,370
so Dec GL like I said it's an open

00:04:40,330 --> 00:04:44,440
source framework that was built by the

00:04:42,370 --> 00:04:46,450
engineering team at uber as you can

00:04:44,440 --> 00:04:48,820
imagine they probably have a lot of geo

00:04:46,450 --> 00:04:51,070
data over there that they that they want

00:04:48,820 --> 00:04:54,070
to visualize within the context of the

00:04:51,070 --> 00:04:56,530
real world so just a few quick points

00:04:54,070 --> 00:04:58,480
about it it's a way it's a WebGL powered

00:04:56,530 --> 00:05:00,010
data visualization framework is

00:04:58,480 --> 00:05:03,730
everybody from at least familiar with

00:05:00,010 --> 00:05:05,470
what WebGL is it's okay if you raise

00:05:03,730 --> 00:05:07,480
your hand and say you're not like I

00:05:05,470 --> 00:05:11,110
could talk about it a little bit hey so

00:05:07,480 --> 00:05:12,910
WebGL it's it's an open-source standard

00:05:11,110 --> 00:05:14,230
it's built on it's built on the OpenGL

00:05:12,910 --> 00:05:16,090
standard to mimic it as closely as

00:05:14,230 --> 00:05:20,950
possible and what it allows you to do is

00:05:16,090 --> 00:05:22,930
to basically access the GPU from from

00:05:20,950 --> 00:05:24,490
the browser for a rendering for 2d and

00:05:22,930 --> 00:05:29,560
3d rendering purposes is the is the

00:05:24,490 --> 00:05:32,320
common thing so WebGL is what is how Dec

00:05:29,560 --> 00:05:34,210
GL gets its performance because it's

00:05:32,320 --> 00:05:36,520
able to push all the render off and the

00:05:34,210 --> 00:05:38,800
data processing off to the GPU it was

00:05:36,520 --> 00:05:41,080
primarily built for a Geo or a mapping

00:05:38,800 --> 00:05:43,300
use case that doesn't mean that that's

00:05:41,080 --> 00:05:45,190
the only thing that you can use that geo

00:05:43,300 --> 00:05:46,540
for in fact you'll see that like there's

00:05:45,190 --> 00:05:48,100
that you could probably imagine a lot of

00:05:46,540 --> 00:05:51,220
more generic things that you could use

00:05:48,100 --> 00:05:53,530
it for but that's just it was purpose

00:05:51,220 --> 00:05:57,100
built specifically for looking at geo

00:05:53,530 --> 00:05:59,500
data also takes a layer based approach

00:05:57,100 --> 00:06:01,630
to visualization visualization rendering

00:05:59,500 --> 00:06:04,090
so what that means is and you'll you'll

00:06:01,630 --> 00:06:06,010
see later on kind of what like what this

00:06:04,090 --> 00:06:10,410
actually looks like it's it's actually

00:06:06,010 --> 00:06:12,550
layered renderings on top of the map and

00:06:10,410 --> 00:06:13,720
a cool thing is it gives us a whole

00:06:12,550 --> 00:06:15,790
bunch of really beautiful data

00:06:13,720 --> 00:06:18,430
visualizations right out right out of

00:06:15,790 --> 00:06:20,590
the box and I'll show like three or if I

00:06:18,430 --> 00:06:24,040
have time maybe four of the different

00:06:20,590 --> 00:06:25,810
ones that just come baked in to deck GL

00:06:24,040 --> 00:06:28,630
so this is this is really great because

00:06:25,810 --> 00:06:32,410
it saves you a ton of time in actually

00:06:28,630 --> 00:06:35,860
making things look nice and there's more

00:06:32,410 --> 00:06:38,890
so like you said this is a WebGL powered

00:06:35,860 --> 00:06:40,330
framework so it supports really really

00:06:38,890 --> 00:06:43,930
large data sets like

00:06:40,330 --> 00:06:45,909
large remember I said that that we

00:06:43,930 --> 00:06:48,159
currently run up against a problem with

00:06:45,909 --> 00:06:49,990
about two or three hundred markers the

00:06:48,159 --> 00:06:52,330
last time I checked the largest data set

00:06:49,990 --> 00:06:56,020
that had been rendered on a Google map

00:06:52,330 --> 00:07:01,780
with deck GL was 6 million so it's a

00:06:56,020 --> 00:07:04,389
very significant change also comes with

00:07:01,780 --> 00:07:06,639
a bunch of really nice really nice

00:07:04,389 --> 00:07:08,680
conveniences right out of the box for us

00:07:06,639 --> 00:07:09,879
such as the automatic handling of things

00:07:08,680 --> 00:07:12,250
like animations I'll show you some

00:07:09,879 --> 00:07:15,639
animation stuff later on and some things

00:07:12,250 --> 00:07:17,590
that are really important to like UI and

00:07:15,639 --> 00:07:19,509
and like UI design and user experience

00:07:17,590 --> 00:07:21,940
that you might not otherwise think about

00:07:19,509 --> 00:07:24,129
like resizing so for example right if

00:07:21,940 --> 00:07:25,960
you have markers on a map and somebody

00:07:24,129 --> 00:07:28,449
zooms way out you probably actually want

00:07:25,960 --> 00:07:29,830
those markers to resize down right

00:07:28,449 --> 00:07:32,710
otherwise you can have these gigantic

00:07:29,830 --> 00:07:34,690
you know icons sitting out covering big

00:07:32,710 --> 00:07:37,210
parts of your map so there's a lot of

00:07:34,690 --> 00:07:39,430
that sort of stuff and also it supports

00:07:37,210 --> 00:07:42,789
the building of custom layers as well

00:07:39,430 --> 00:07:46,389
like I said I'll I'll show you a bunch

00:07:42,789 --> 00:07:50,889
of visualizations that that come

00:07:46,389 --> 00:07:52,680
ready-made in Dec GL but the but the

00:07:50,889 --> 00:07:56,680
framework also exposes its underlying

00:07:52,680 --> 00:07:59,020
its underlying WebGL context so you can

00:07:56,680 --> 00:08:02,469
pretty much do whatever you want with it

00:07:59,020 --> 00:08:05,620
if you fancy yourself being very being

00:08:02,469 --> 00:08:09,190
very savvy with WebGL has anybody ever

00:08:05,620 --> 00:08:10,629
like written any WebGL probably not like

00:08:09,190 --> 00:08:13,120
too many people right I wouldn't

00:08:10,629 --> 00:08:16,199
recommend it it's like hard like real

00:08:13,120 --> 00:08:18,219
hard to like make a box is really hard

00:08:16,199 --> 00:08:20,680
usually you're gonna choose something

00:08:18,219 --> 00:08:22,599
you're gonna choose some helper

00:08:20,680 --> 00:08:25,930
framework like 3GS or something like

00:08:22,599 --> 00:08:27,250
that like I'm serious if I used to have

00:08:25,930 --> 00:08:28,839
I used to have a slide in here that

00:08:27,250 --> 00:08:31,719
showed all the code that you needed to

00:08:28,839 --> 00:08:37,810
make like a cube in WebGL and it's like

00:08:31,719 --> 00:08:40,240
a mountain of code so so that the

00:08:37,810 --> 00:08:42,820
ability the custom layers are something

00:08:40,240 --> 00:08:45,640
that you can do probably the thing that

00:08:42,820 --> 00:08:48,339
you would more likely do is deck GL

00:08:45,640 --> 00:08:50,770
gives you the ability to extend off of

00:08:48,339 --> 00:08:53,889
to basically subclass any existing

00:08:50,770 --> 00:08:55,209
visualization layer so that

00:08:53,889 --> 00:08:56,889
what you and I'm doing is taking

00:08:55,209 --> 00:08:59,369
something that's already there and kind

00:08:56,889 --> 00:09:05,230
of customizing it to what you want to do

00:08:59,369 --> 00:09:07,899
and at i/o this year we we introduced

00:09:05,230 --> 00:09:10,569
initial support for the for the

00:09:07,899 --> 00:09:12,160
framework in our Maps JavaScript API so

00:09:10,569 --> 00:09:15,129
that you could actually use it with with

00:09:12,160 --> 00:09:16,869
Google Maps now that'll I might have had

00:09:15,129 --> 00:09:24,910
a beer and discuss and discovered the

00:09:16,869 --> 00:09:27,100
fireworks transition so so we yeah we we

00:09:24,910 --> 00:09:31,480
introduced initial support which means

00:09:27,100 --> 00:09:33,279
that basically like I think about 90% of

00:09:31,480 --> 00:09:35,139
the features of deck GL are fully

00:09:33,279 --> 00:09:42,040
supported with with Google Maps

00:09:35,139 --> 00:09:44,350
currently and it's awesome so this that

00:09:42,040 --> 00:09:47,649
you see here not the kiddie the thing

00:09:44,350 --> 00:09:48,549
behind the kitty is a just the basic

00:09:47,649 --> 00:09:51,189
what's called a scatterplot

00:09:48,549 --> 00:09:54,819
visualization of all of the street trees

00:09:51,189 --> 00:09:58,089
in the city of Paris this this data

00:09:54,819 --> 00:09:59,980
comes from a Paris open city of Paris

00:09:58,089 --> 00:10:01,209
open data set if you're actually if

00:09:59,980 --> 00:10:03,999
you're interested in playing around with

00:10:01,209 --> 00:10:06,879
deck GL or really any sort of geo geo

00:10:03,999 --> 00:10:08,619
data highly recommend that you that you

00:10:06,879 --> 00:10:10,360
search for the city of your choice and

00:10:08,619 --> 00:10:12,429
the term open data because pretty much

00:10:10,360 --> 00:10:14,230
every major and like sub major city in

00:10:12,429 --> 00:10:15,579
the world now has an open data program

00:10:14,230 --> 00:10:17,709
where they put out all kinds of

00:10:15,579 --> 00:10:20,709
interesting data sets that you can that

00:10:17,709 --> 00:10:22,689
you can play with so scatter plot layer

00:10:20,709 --> 00:10:24,819
all it's doing you could probably see is

00:10:22,689 --> 00:10:28,600
putting a whole bunch of little dots on

00:10:24,819 --> 00:10:30,519
the map where where there's a tree and

00:10:28,600 --> 00:10:33,040
then the colors correspond to the type

00:10:30,519 --> 00:10:34,299
of tree that that's there so the

00:10:33,040 --> 00:10:36,100
interesting thing about this right is

00:10:34,299 --> 00:10:38,019
besides just kind of like looking pretty

00:10:36,100 --> 00:10:39,610
and I mean don't get me wrong I like I

00:10:38,019 --> 00:10:42,360
like pretty things that's kind of enough

00:10:39,610 --> 00:10:46,959
but the what's more interesting is that

00:10:42,360 --> 00:10:48,999
you get like a sense of a place right it

00:10:46,959 --> 00:10:52,179
starts to tell you a story about all

00:10:48,999 --> 00:10:54,639
kinds of things right like for example

00:10:52,179 --> 00:10:56,410
things like how did a city planner think

00:10:54,639 --> 00:10:58,119
about think about how this was all laid

00:10:56,410 --> 00:11:02,339
out right it gives you a whole new

00:10:58,119 --> 00:11:02,339
perspective on on a place

00:11:02,710 --> 00:11:09,230
so the next question is how does it work

00:11:05,450 --> 00:11:10,550
right again everyone's a web developer

00:11:09,230 --> 00:11:12,830
so you'll probably so you'll probably

00:11:10,550 --> 00:11:15,350
like this answer which is doesn't matter

00:11:12,830 --> 00:11:17,720
like Carrick's to be honest that's what

00:11:15,350 --> 00:11:20,300
frameworks are for there the great thing

00:11:17,720 --> 00:11:22,910
about Dec GL is it extract it abstracts

00:11:20,300 --> 00:11:24,980
away a whole bunch of complexity in

00:11:22,910 --> 00:11:26,660
terms of the implementation for us and

00:11:24,980 --> 00:11:29,060
lets us just kind of get to what we want

00:11:26,660 --> 00:11:31,940
to do which is to differentiate the

00:11:29,060 --> 00:11:35,210
design right of of some component of our

00:11:31,940 --> 00:11:38,990
of our web apps so it's just kind of a

00:11:35,210 --> 00:11:42,800
it's just kind of awesome but also I'll

00:11:38,990 --> 00:11:45,020
give a little bit as to how it works so

00:11:42,800 --> 00:11:48,050
the short answer is this the way that

00:11:45,020 --> 00:11:50,690
the way that deck GL works is like I

00:11:48,050 --> 00:11:54,440
said this is a WebGL powered data

00:11:50,690 --> 00:11:58,490
visualization framework so it so WebGL

00:11:54,440 --> 00:12:00,410
utilizes the canvas element as the as

00:11:58,490 --> 00:12:02,860
the way to insert its context is

00:12:00,410 --> 00:12:05,870
rendering context into the Dom and then

00:12:02,860 --> 00:12:07,520
it renders into into that canvas element

00:12:05,870 --> 00:12:10,430
the way that that happens on top of a

00:12:07,520 --> 00:12:14,090
Google map is in our in our jsapi we

00:12:10,430 --> 00:12:17,000
have a we have a class called overlay

00:12:14,090 --> 00:12:19,160
view and overlay view the way that you

00:12:17,000 --> 00:12:21,680
can imagine it is it essentially puts a

00:12:19,160 --> 00:12:23,750
transparent layer directly with the

00:12:21,680 --> 00:12:26,480
z-index directly on top of on top of the

00:12:23,750 --> 00:12:28,130
map and then syncs that layer with the

00:12:26,480 --> 00:12:30,320
with the movements of the map because

00:12:28,130 --> 00:12:31,910
right as you might imagine if you're

00:12:30,320 --> 00:12:33,440
putting if you're putting an overlay of

00:12:31,910 --> 00:12:35,930
data of some kind of data visualization

00:12:33,440 --> 00:12:38,150
on top of the map you probably want it

00:12:35,930 --> 00:12:40,670
to like move when people pan and like do

00:12:38,150 --> 00:12:43,850
things when people zoom in and out this

00:12:40,670 --> 00:12:46,790
was actually a very non-trivial problem

00:12:43,850 --> 00:12:48,920
to solve later on I'll show a link to a

00:12:46,790 --> 00:12:51,350
blog post that the Dec GL engineering

00:12:48,920 --> 00:12:54,140
team wrote about how they were able to

00:12:51,350 --> 00:12:56,150
work with us to actually solve that

00:12:54,140 --> 00:12:57,920
problem it gets into all kinds of like

00:12:56,150 --> 00:13:00,380
interesting but kind of boring stuff

00:12:57,920 --> 00:13:01,580
around around issues like camera syncing

00:13:00,380 --> 00:13:04,040
so if you're into that kind of thing can

00:13:01,580 --> 00:13:06,800
definitely talk about that later on also

00:13:04,040 --> 00:13:10,100
adopts a reactive programming model for

00:13:06,800 --> 00:13:11,870
performance purposes and I'll explode

00:13:10,100 --> 00:13:14,510
it's easier to kind of explain what that

00:13:11,870 --> 00:13:15,450
means later on when when I show like I

00:13:14,510 --> 00:13:19,560
give animation

00:13:15,450 --> 00:13:23,340
demo all right so if we get started this

00:13:19,560 --> 00:13:24,960
top link it goes to an app that I have

00:13:23,340 --> 00:13:26,670
running on App Engine and you can

00:13:24,960 --> 00:13:30,150
actually see all of the demos running

00:13:26,670 --> 00:13:31,550
live if you are on the Wi-Fi do not go

00:13:30,150 --> 00:13:35,940
to this link right now

00:13:31,550 --> 00:13:39,330
because one of the pitfalls of running

00:13:35,940 --> 00:13:41,490
of running demos for doing 3d

00:13:39,330 --> 00:13:43,200
visualizations of very large datasets is

00:13:41,490 --> 00:13:45,600
that it is extremely good at breaking

00:13:43,200 --> 00:13:48,480
Wi-Fi when like a hundred people do it

00:13:45,600 --> 00:13:49,770
all at once so I would not recommend if

00:13:48,480 --> 00:13:50,100
you're on the Wi-Fi going to that right

00:13:49,770 --> 00:13:52,470
now

00:13:50,100 --> 00:13:54,510
the second link goes to the source for

00:13:52,470 --> 00:13:58,620
that demo and you'll see there's like

00:13:54,510 --> 00:14:02,780
like a big chunk of source code for the

00:13:58,620 --> 00:14:05,160
like and and demo as well as individual

00:14:02,780 --> 00:14:06,960
repositories for or individual

00:14:05,160 --> 00:14:09,110
directories for each layer type that

00:14:06,960 --> 00:14:12,000
kind of simplify it to make it easier to

00:14:09,110 --> 00:14:14,340
digest alright the other thing that I

00:14:12,000 --> 00:14:17,940
always like to point out is please

00:14:14,340 --> 00:14:20,130
notice that B's links are goo GL e I

00:14:17,940 --> 00:14:23,340
know that for the last ten years or so

00:14:20,130 --> 00:14:26,160
Google has has trained us to see goo GL

00:14:23,340 --> 00:14:27,960
links took about ten years of research

00:14:26,160 --> 00:14:32,700
and development but we got the e finally

00:14:27,960 --> 00:14:35,790
welcome to the future and I cannot be

00:14:32,700 --> 00:14:37,550
held responsible for where Guji l / Dec

00:14:35,790 --> 00:14:40,760
GL demos takes you I've no idea

00:14:37,550 --> 00:14:43,500
so yeah feel free to check that out

00:14:40,760 --> 00:14:52,710
let's actually look at how this thing

00:14:43,500 --> 00:14:58,970
runs so I have a couple like basic

00:14:52,710 --> 00:15:02,220
projects here is that big enough for

00:14:58,970 --> 00:15:04,500
everyone in the back to see you can see

00:15:02,220 --> 00:15:08,400
this okay awesome all right I'm just

00:15:04,500 --> 00:15:09,420
gonna run through this real fast so we

00:15:08,400 --> 00:15:10,950
have a few different we have a few

00:15:09,420 --> 00:15:13,800
different things that we're importing

00:15:10,950 --> 00:15:15,780
the first the first is Google Maps

00:15:13,800 --> 00:15:18,210
overlay so Google Maps overlay is the

00:15:15,780 --> 00:15:21,000
class inside of Dec GL that actually

00:15:18,210 --> 00:15:24,480
that actually creates the instance of

00:15:21,000 --> 00:15:26,410
our overlay view right and then and then

00:15:24,480 --> 00:15:29,630
injects the

00:15:26,410 --> 00:15:32,570
injects the canvas element and the and

00:15:29,630 --> 00:15:36,320
the WebGL context so that everything

00:15:32,570 --> 00:15:38,420
everything can be rendered next we have

00:15:36,320 --> 00:15:41,360
a few different layer types so this is

00:15:38,420 --> 00:15:42,529
this is how the actual like

00:15:41,360 --> 00:15:44,600
implementation of different

00:15:42,529 --> 00:15:46,370
visualization layers happens index GL

00:15:44,600 --> 00:15:48,350
they just they just have these classes

00:15:46,370 --> 00:15:50,630
and you do and you instantiate with some

00:15:48,350 --> 00:15:53,000
options and it automatically renders

00:15:50,630 --> 00:15:55,850
inside of the WebGL context for you and

00:15:53,000 --> 00:15:57,440
then I'm just importing some map styles

00:15:55,850 --> 00:16:00,680
surprisingly a lot of people don't know

00:15:57,440 --> 00:16:03,710
that when you use when you use goo the

00:16:00,680 --> 00:16:07,550
Google Maps API is in SDKs you can

00:16:03,710 --> 00:16:09,589
actually you can actually customize the

00:16:07,550 --> 00:16:13,010
map pretty much however you want like

00:16:09,589 --> 00:16:14,510
everything from the the the resolution

00:16:13,010 --> 00:16:17,060
of different labels so like how many

00:16:14,510 --> 00:16:18,350
different you know place and subway

00:16:17,060 --> 00:16:20,150
labels this sort of thing that you want

00:16:18,350 --> 00:16:22,310
as well as the color of everything from

00:16:20,150 --> 00:16:24,650
like roads to rivers to different

00:16:22,310 --> 00:16:26,450
topographical features so that you can

00:16:24,650 --> 00:16:28,010
make really pretty maps and the thing

00:16:26,450 --> 00:16:29,930
the thing is right if you're doing data

00:16:28,010 --> 00:16:31,610
visualization or I mean if you're doing

00:16:29,930 --> 00:16:33,860
web design it all right like you know I

00:16:31,610 --> 00:16:38,779
think it'd be pretty so that's that's an

00:16:33,860 --> 00:16:40,790
option the way that that looks is you

00:16:38,779 --> 00:16:44,089
define you define those customizations

00:16:40,790 --> 00:16:46,430
in a gigantic ugly JSON blob that looks

00:16:44,089 --> 00:16:48,529
like this which I do not recommend that

00:16:46,430 --> 00:16:53,600
you try to write yourself because it's

00:16:48,529 --> 00:16:57,050
painful instead we have this map style

00:16:53,600 --> 00:16:58,580
dot with Google comm which is just like

00:16:57,050 --> 00:17:00,980
a styling wizard so you can see like

00:16:58,580 --> 00:17:03,709
right I if I don't want any roads to

00:17:00,980 --> 00:17:05,569
show up on the map or I want like dark

00:17:03,709 --> 00:17:08,600
mode there's there's like a really fine

00:17:05,569 --> 00:17:10,730
grain of different different options

00:17:08,600 --> 00:17:14,449
that are available here for you to do

00:17:10,730 --> 00:17:16,490
styling cool moving on so we have a

00:17:14,449 --> 00:17:17,870
basic index.html file there's pretty

00:17:16,490 --> 00:17:19,520
straightforward for everybody there's a

00:17:17,870 --> 00:17:20,600
little bit of CSS that I put in line

00:17:19,520 --> 00:17:22,449
even though I should have put in a

00:17:20,600 --> 00:17:26,480
separate flow in the separate file

00:17:22,449 --> 00:17:28,910
there's the the classic div with ID

00:17:26,480 --> 00:17:31,970
equals map probably anyone who's done

00:17:28,910 --> 00:17:33,980
maps J's before has seen this right this

00:17:31,970 --> 00:17:36,920
is the div where we actually like in

00:17:33,980 --> 00:17:38,660
where we actually insert the iframe into

00:17:36,920 --> 00:17:39,770
the Dom where we serve up the map to you

00:17:38,660 --> 00:17:42,470
right

00:17:39,770 --> 00:17:44,030
I'm just doing an include of the SAP JS

00:17:42,470 --> 00:17:48,520
file which is where all the deck geo

00:17:44,030 --> 00:17:52,580
stuff happens back here next I hope I

00:17:48,520 --> 00:17:54,740
have a variety of data sources these are

00:17:52,580 --> 00:17:56,900
just URLs to different REST API is for

00:17:54,740 --> 00:18:00,850
for open data sets that come from

00:17:56,900 --> 00:18:04,550
Chicago New York City and Los Angeles

00:18:00,850 --> 00:18:07,700
and then I'm and then in this script I'm

00:18:04,550 --> 00:18:08,930
just dynamically loading the map loading

00:18:07,700 --> 00:18:11,120
the map script probably if you've worked

00:18:08,930 --> 00:18:13,790
with Mouse jsapi before you're used to

00:18:11,120 --> 00:18:16,550
seeing this script tags like script

00:18:13,790 --> 00:18:20,660
acing source equals you know api's

00:18:16,550 --> 00:18:23,480
google.com or whatever but in this case

00:18:20,660 --> 00:18:26,920
right Dec GL with with Dec GL we need to

00:18:23,480 --> 00:18:30,740
know that that script has has actually

00:18:26,920 --> 00:18:34,070
loaded so this this particular function

00:18:30,740 --> 00:18:35,570
is just is just dynamically inserting

00:18:34,070 --> 00:18:37,220
that script element and then promise

00:18:35,570 --> 00:18:39,920
fine the whole thing so that we can be

00:18:37,220 --> 00:18:41,150
sure that matte that the maps jsapi is

00:18:39,920 --> 00:18:44,300
actually there before we run anything

00:18:41,150 --> 00:18:46,490
with duck Jill and then I've just

00:18:44,300 --> 00:18:49,490
defined a function to initialize the

00:18:46,490 --> 00:18:51,830
actual map so these are just different

00:18:49,490 --> 00:18:56,900
center points depending on which which

00:18:51,830 --> 00:18:59,330
city I'm in as well as different zoom

00:18:56,900 --> 00:19:00,740
levels because as you're doing obviously

00:18:59,330 --> 00:19:02,330
right as you're doing different like

00:19:00,740 --> 00:19:04,250
visualizations or you're doing different

00:19:02,330 --> 00:19:06,680
data sets into considers probably you

00:19:04,250 --> 00:19:08,210
want the map to load at different zoom

00:19:06,680 --> 00:19:12,590
levels that are going to kind of

00:19:08,210 --> 00:19:18,140
highlight the the view area that that

00:19:12,590 --> 00:19:20,090
you want the easier to see so yeah so

00:19:18,140 --> 00:19:23,870
then I just await the loading of the of

00:19:20,090 --> 00:19:26,990
the API and then this is the basic you

00:19:23,870 --> 00:19:29,030
know new Google Maps top map that that

00:19:26,990 --> 00:19:31,130
says go ahead create an instance of the

00:19:29,030 --> 00:19:33,080
map let it into the Dom show it to the

00:19:31,130 --> 00:19:37,220
user right make sense

00:19:33,080 --> 00:19:41,780
pretty straightforward cool so down here

00:19:37,220 --> 00:19:43,730
this is where the this is where the app

00:19:41,780 --> 00:19:46,070
actually runs so I'm just doing that map

00:19:43,730 --> 00:19:48,950
initialization and then I'm creating an

00:19:46,070 --> 00:19:50,630
instance of Google Maps overlay again

00:19:48,950 --> 00:19:52,190
remember this is where this is where

00:19:50,630 --> 00:19:53,190
that overlay view is actually created

00:19:52,190 --> 00:19:55,440
right

00:19:53,190 --> 00:19:56,999
and injected and then there's actually a

00:19:55,440 --> 00:19:59,999
number of different properties that you

00:19:56,999 --> 00:20:02,309
can get that you can give when you

00:19:59,999 --> 00:20:03,929
instantiate the the when you instantiate

00:20:02,309 --> 00:20:05,789
Google Maps overlay the one that we

00:20:03,929 --> 00:20:08,429
really care about for the purposes of

00:20:05,789 --> 00:20:11,700
this is just layers so you'll notice

00:20:08,429 --> 00:20:12,929
layers is actually an array right I'm

00:20:11,700 --> 00:20:15,450
only putting one thing in the array

00:20:12,929 --> 00:20:19,499
right now again just to keep things kind

00:20:15,450 --> 00:20:22,979
of simple and easy to view but and then

00:20:19,499 --> 00:20:25,320
and then the array takes a set of a

00:20:22,979 --> 00:20:27,359
layer of different visualization layer

00:20:25,320 --> 00:20:29,159
instances okay so the cool thing about

00:20:27,359 --> 00:20:32,220
this though is that because it's an

00:20:29,159 --> 00:20:34,590
array you can actually composite

00:20:32,220 --> 00:20:36,389
different different visualizations so

00:20:34,590 --> 00:20:38,039
this is this is good for a number of

00:20:36,389 --> 00:20:40,799
things right like you may want to sort

00:20:38,039 --> 00:20:42,869
of make like put multiple different

00:20:40,799 --> 00:20:44,909
visualizations overlaid on the same map

00:20:42,869 --> 00:20:47,429
to create some kind of effect or you

00:20:44,909 --> 00:20:50,249
might also use this for performance

00:20:47,429 --> 00:20:52,139
reasons because if you can imagine if I

00:20:50,249 --> 00:20:55,320
was to load a million data points over

00:20:52,139 --> 00:20:57,809
HTTP that's probably pretty slow so

00:20:55,320 --> 00:21:00,450
there's various there's various

00:20:57,809 --> 00:21:02,639
strategies for how you can handle the

00:21:00,450 --> 00:21:04,649
performance of this so for example you

00:21:02,639 --> 00:21:06,509
could come you could chunk your data set

00:21:04,649 --> 00:21:11,009
and then composite it as multiple layers

00:21:06,509 --> 00:21:13,679
as an example right so this one is a

00:21:11,009 --> 00:21:14,879
basic scatter plot layer which is like

00:21:13,679 --> 00:21:17,879
the city of Paris one that I showed you

00:21:14,879 --> 00:21:19,529
every layer has an ID I'll get more into

00:21:17,879 --> 00:21:22,169
that later on it doesn't really matter

00:21:19,529 --> 00:21:24,239
to this particular instance but it'll

00:21:22,169 --> 00:21:26,879
matter later on every every layer has to

00:21:24,239 --> 00:21:30,299
have a unique ID right then I give it

00:21:26,879 --> 00:21:32,249
whatever its data sources so interesting

00:21:30,299 --> 00:21:35,399
thing here to notice right is remember

00:21:32,249 --> 00:21:37,440
that that data source is dot and NYC was

00:21:35,399 --> 00:21:39,720
just a URL there's actually a whole

00:21:37,440 --> 00:21:41,070
different variety of data sources that

00:21:39,720 --> 00:21:42,929
you can feed into deck shell like you

00:21:41,070 --> 00:21:46,049
can you can pull in a local JSON file

00:21:42,929 --> 00:21:51,840
which I may do to try not to break the

00:21:46,049 --> 00:21:54,210
Wi-Fi or a like CSV also the probably

00:21:51,840 --> 00:21:57,419
the most common is you want to pull in

00:21:54,210 --> 00:22:00,090
the data from some REST API right so in

00:21:57,419 --> 00:22:02,159
this case the neat thing is I just give

00:22:00,090 --> 00:22:04,710
it a URL it recognizes that this is URL

00:22:02,159 --> 00:22:07,140
and it and it orchestrates the HTTP

00:22:04,710 --> 00:22:09,480
request and it awaits it

00:22:07,140 --> 00:22:13,950
for me automatically it's like a small

00:22:09,480 --> 00:22:16,440
thing but really convenient then we have

00:22:13,950 --> 00:22:18,930
a whole different a whole set of just

00:22:16,440 --> 00:22:20,490
styling options for the layer so whether

00:22:18,930 --> 00:22:21,990
or not there's passes whether or not

00:22:20,490 --> 00:22:23,730
there's opacity on the points if they're

00:22:21,990 --> 00:22:25,770
stroked what the fill color is all of

00:22:23,730 --> 00:22:29,610
this this is a very short list of the

00:22:25,770 --> 00:22:32,010
possible the possible styling settings

00:22:29,610 --> 00:22:36,870
you can have for for a layer and all the

00:22:32,010 --> 00:22:38,700
layers have a bunch so another thing to

00:22:36,870 --> 00:22:41,340
note is we have like this radius min

00:22:38,700 --> 00:22:43,080
pixels max pixels that was that dynamic

00:22:41,340 --> 00:22:45,330
resizing that I was talking about so the

00:22:43,080 --> 00:22:47,040
these two properties are setting you

00:22:45,330 --> 00:22:49,140
know as i zoom in what's the big what's

00:22:47,040 --> 00:22:50,970
the biggest that the points will get and

00:22:49,140 --> 00:22:52,410
as i zoom out what's the smallest that

00:22:50,970 --> 00:22:55,650
I'm willing to let them be so you have a

00:22:52,410 --> 00:22:58,320
lot of fine grain control the next thing

00:22:55,650 --> 00:22:59,940
to point out is the skin so basically

00:22:58,320 --> 00:23:02,910
every layer right you're pulling in the

00:22:59,940 --> 00:23:04,740
data set but obviously Dec teal doesn't

00:23:02,910 --> 00:23:07,200
know like we're in that JSON blob that's

00:23:04,740 --> 00:23:10,080
coming back from the from the API to

00:23:07,200 --> 00:23:12,090
actually look for its lat/long points

00:23:10,080 --> 00:23:14,640
right that it wants to render so this is

00:23:12,090 --> 00:23:16,530
where you actually tell it where in the

00:23:14,640 --> 00:23:18,600
returned object to look so you can see

00:23:16,530 --> 00:23:21,000
this is a function and it's just it's

00:23:18,600 --> 00:23:23,730
just iterating every line of an array of

00:23:21,000 --> 00:23:25,560
data points right and then pulling the

00:23:23,730 --> 00:23:26,760
pulling you know the coordinates that it

00:23:25,560 --> 00:23:32,790
wants to rip that you want it to render

00:23:26,760 --> 00:23:34,350
from there that makes sense and then

00:23:32,790 --> 00:23:36,300
here like get fill color get line color

00:23:34,350 --> 00:23:39,390
I'm I'm not dynamically setting the

00:23:36,300 --> 00:23:41,730
color but also just to point out that a

00:23:39,390 --> 00:23:44,250
lot of these properties will will accept

00:23:41,730 --> 00:23:45,660
either a static value or they'll or

00:23:44,250 --> 00:23:47,010
they'll accept a function so you can

00:23:45,660 --> 00:23:48,120
dynamically send so like when you saw

00:23:47,010 --> 00:23:51,030
that Paris one where they were all

00:23:48,120 --> 00:23:52,350
different trees for example of like you

00:23:51,030 --> 00:23:53,700
could do that here right you could sit

00:23:52,350 --> 00:23:55,800
you could just have like a ternary

00:23:53,700 --> 00:23:59,040
operator or some sort of conditional

00:23:55,800 --> 00:24:04,110
that says if tree type equals x then

00:23:59,040 --> 00:24:06,300
color Y right so that creates my

00:24:04,110 --> 00:24:08,730
instance of Google map our Google Maps

00:24:06,300 --> 00:24:11,550
overlay and then I just call set map on

00:24:08,730 --> 00:24:14,100
that and give it the instance of the

00:24:11,550 --> 00:24:18,480
actual of the actual map div right and

00:24:14,100 --> 00:24:20,790
so all that's doing is telling Dec GL to

00:24:18,480 --> 00:24:25,970
this this is the actual

00:24:20,790 --> 00:24:29,870
that I want to pin this overlay to cool

00:24:25,970 --> 00:24:29,870
so let's see what that does

00:24:32,810 --> 00:24:38,820
so I just like have a basic webpack dev

00:24:35,670 --> 00:24:42,510
server setup here there you go this is

00:24:38,820 --> 00:24:46,200
like 17,000 data points that loaded that

00:24:42,510 --> 00:24:47,640
quickly and when you look at it again it

00:24:46,200 --> 00:24:51,660
performs really well right it goes all

00:24:47,640 --> 00:24:53,400
the way down to the ground so quite a

00:24:51,660 --> 00:24:55,890
big difference from the limitation of

00:24:53,400 --> 00:24:57,390
two two or 300,000 and again I always

00:24:55,890 --> 00:24:58,890
like to point out that this kind of

00:24:57,390 --> 00:25:00,770
tells you something about a place so

00:24:58,890 --> 00:25:03,450
this is street trees in New York City

00:25:00,770 --> 00:25:09,510
what do you think this big empty area in

00:25:03,450 --> 00:25:10,890
the middle is it's Times Square have you

00:25:09,510 --> 00:25:14,280
ever been to Times Square that allowed

00:25:10,890 --> 00:25:16,050
trees grow in there same thing down here

00:25:14,280 --> 00:25:18,870
right in lower Manhattan there's Wall

00:25:16,050 --> 00:25:21,090
Street right not a lot of and not a lot

00:25:18,870 --> 00:25:29,820
of trees grown around the banks turns

00:25:21,090 --> 00:25:33,150
out cool so let's look at another one so

00:25:29,820 --> 00:25:35,120
I am going to save you all the pain of

00:25:33,150 --> 00:25:37,500
watching the live code boilerplate and

00:25:35,120 --> 00:25:38,490
I'm going to use the Marilyn the miracle

00:25:37,500 --> 00:25:40,320
of copy and paste

00:25:38,490 --> 00:25:41,610
everyone here's a JavaScript of everyone

00:25:40,320 --> 00:25:47,820
here's a developer so don't lie no you

00:25:41,610 --> 00:25:52,290
copy and paste I did it too so this this

00:25:47,820 --> 00:25:56,040
next one is called an arc layer and what

00:25:52,290 --> 00:25:57,750
an arc layer is made for is to is to

00:25:56,040 --> 00:25:59,640
visualize the connection between an

00:25:57,750 --> 00:26:01,920
origin and a destination point as a

00:25:59,640 --> 00:26:03,240
three dimensional arc all right so you

00:26:01,920 --> 00:26:05,460
can imagine like you've probably seen

00:26:03,240 --> 00:26:07,350
visualizations before of like an airport

00:26:05,460 --> 00:26:08,310
right and all of the all of the flights

00:26:07,350 --> 00:26:09,810
leaving the airport to their

00:26:08,310 --> 00:26:12,900
destinations then this is the sort of

00:26:09,810 --> 00:26:15,540
thing that arc layers is made for again

00:26:12,900 --> 00:26:17,940
has its unique ID I give it the data

00:26:15,540 --> 00:26:20,640
source in this case it needs two

00:26:17,940 --> 00:26:22,320
different two different setters to tell

00:26:20,640 --> 00:26:25,500
it where to find both the origin point

00:26:22,320 --> 00:26:28,110
and the destination point some basic

00:26:25,500 --> 00:26:31,980
some basic styling like the width of the

00:26:28,110 --> 00:26:34,230
arc and that's it oh wait sorry let me

00:26:31,980 --> 00:26:43,799
change one more thing because this one

00:26:34,230 --> 00:26:46,429
is actually in Chicago cool and this is

00:26:43,799 --> 00:26:50,360
what we get from this one so this is

00:26:46,429 --> 00:26:53,549
like I don't know like 30,000 arcs

00:26:50,360 --> 00:26:55,440
rendered which looks kind of cool but

00:26:53,549 --> 00:26:56,580
it's a little bit hard to actually tell

00:26:55,440 --> 00:26:59,429
what's going on here right because it's

00:26:56,580 --> 00:27:00,900
a lot of different data points or a lot

00:26:59,429 --> 00:27:02,610
of different arcs all overlaid on top of

00:27:00,900 --> 00:27:03,540
each other right the reason why I like

00:27:02,610 --> 00:27:06,240
to show this one though

00:27:03,540 --> 00:27:08,640
is is that this is kind of neat and kind

00:27:06,240 --> 00:27:10,860
of impressive because like that's a lot

00:27:08,640 --> 00:27:17,250
of data but what's really neat is when

00:27:10,860 --> 00:27:19,530
you do this so yeah this is a yeah this

00:27:17,250 --> 00:27:21,679
is 30,000 arcs that are individually

00:27:19,530 --> 00:27:24,030
rendered in three-dimensional space and

00:27:21,679 --> 00:27:28,080
totally performant totally performs well

00:27:24,030 --> 00:27:33,929
and again you can go all the way down to

00:27:28,080 --> 00:27:35,540
the ground we're just gonna need I've

00:27:33,929 --> 00:27:37,770
seen people do really interesting

00:27:35,540 --> 00:27:41,190
composite effects with this as well like

00:27:37,770 --> 00:27:43,410
I was at a hackathon and a guy he he

00:27:41,190 --> 00:27:45,720
took all of this on time and late

00:27:43,410 --> 00:27:49,200
departure data for flights and he had on

00:27:45,720 --> 00:27:51,510
time flights as white and late flights

00:27:49,200 --> 00:27:52,919
as red lines and then when they were all

00:27:51,510 --> 00:27:55,830
overlaid on top of each other you could

00:27:52,919 --> 00:27:58,260
tell the the relative on time rate of of

00:27:55,830 --> 00:28:00,360
an airport based on how pink or red it

00:27:58,260 --> 00:28:01,740
was so these are the sorts of things

00:28:00,360 --> 00:28:06,690
that you can imagine doing with like

00:28:01,740 --> 00:28:10,730
composite effects right nice cool we

00:28:06,690 --> 00:28:10,730
have just a little bit more time so oh

00:28:10,850 --> 00:28:17,490
this this data is actually taxi rides in

00:28:13,980 --> 00:28:19,169
the city of Chicago it's a big like

00:28:17,490 --> 00:28:20,280
obviously the city of Chicago Chicago is

00:28:19,169 --> 00:28:21,780
not going to like show people going

00:28:20,280 --> 00:28:23,490
door-to-door so it's like centroids of

00:28:21,780 --> 00:28:25,860
neighborhoods so it's like all of the

00:28:23,490 --> 00:28:29,100
people going from O'Hare to neighborhood

00:28:25,860 --> 00:28:30,510
X if it was actually going door-to-door

00:28:29,100 --> 00:28:36,390
then like you have lines all over the

00:28:30,510 --> 00:28:43,559
place would be crazy looking cool so the

00:28:36,390 --> 00:28:47,270
next one that I want to show is is what

00:28:43,559 --> 00:28:47,270
is called a trip Slayer

00:28:47,760 --> 00:28:53,470
so when we when we talk about geo data

00:28:50,049 --> 00:28:55,840
right often it's not just like static

00:28:53,470 --> 00:28:58,000
it's not just like static in time right

00:28:55,840 --> 00:29:00,850
we want to look at data that's moving

00:28:58,000 --> 00:29:02,950
through the world over some some time

00:29:00,850 --> 00:29:04,150
period right so troops layer is

00:29:02,950 --> 00:29:07,539
purpose-built for this so if you can

00:29:04,150 --> 00:29:09,460
imagine wanting to for example look at I

00:29:07,539 --> 00:29:11,409
don't know you have a fleet of delivery

00:29:09,460 --> 00:29:13,570
trucks right and you want to see how

00:29:11,409 --> 00:29:14,890
they how they all moved relative to one

00:29:13,570 --> 00:29:17,860
another at the same time right

00:29:14,890 --> 00:29:21,010
so so trips layer does and does a

00:29:17,860 --> 00:29:23,200
time-based animation of geo data all

00:29:21,010 --> 00:29:28,510
right this this one is just a little bit

00:29:23,200 --> 00:29:29,860
different same sort of thing though I'm

00:29:28,510 --> 00:29:32,230
importing my Google Maps overlay

00:29:29,860 --> 00:29:34,059
actually I don't need this one I keep

00:29:32,230 --> 00:29:35,740
forgetting to take this this line out I

00:29:34,059 --> 00:29:40,539
have the trips overlay and my map

00:29:35,740 --> 00:29:43,240
styling so the way that that I've set

00:29:40,539 --> 00:29:46,419
this particular this particularly demo

00:29:43,240 --> 00:29:49,029
up is I use our places API to just do a

00:29:46,419 --> 00:29:51,370
fetch of restaurants around a center

00:29:49,029 --> 00:29:54,010
point on the map okay so that returns me

00:29:51,370 --> 00:29:56,049
ten different places right with their

00:29:54,010 --> 00:29:59,320
location data and then I use our

00:29:56,049 --> 00:30:02,320
directions API to to just generate

00:29:59,320 --> 00:30:04,539
routes that join each each point to the

00:30:02,320 --> 00:30:08,950
other nine so that gives me like a

00:30:04,539 --> 00:30:20,679
hundred and ninety different sets of

00:30:08,950 --> 00:30:22,899
sets of directions okay so this is yeah

00:30:20,679 --> 00:30:25,299
so this function here is just where I'm

00:30:22,899 --> 00:30:30,700
generating that place data out of out of

00:30:25,299 --> 00:30:34,149
the places API and then here in these

00:30:30,700 --> 00:30:36,520
two functions I'm just generating the

00:30:34,149 --> 00:30:42,490
directions and then building those all

00:30:36,520 --> 00:30:46,029
into a race okay same thing as before

00:30:42,490 --> 00:30:48,760
I load I load the Maps API I initialize

00:30:46,029 --> 00:30:53,049
my map and then real quick I'm going to

00:30:48,760 --> 00:30:56,530
come down here so the so the API loads

00:30:53,049 --> 00:30:59,090
initialize the map I get my places right

00:30:56,530 --> 00:31:03,289
I generate my my trips

00:30:59,090 --> 00:31:04,850
okay and then I I create an instance of

00:31:03,289 --> 00:31:07,100
Google Maps overlay so in this case

00:31:04,850 --> 00:31:09,169
you'll see that unlike last time right

00:31:07,100 --> 00:31:10,730
I'm just create I'm just instantiating

00:31:09,169 --> 00:31:12,320
the overlay with nothing inside of it so

00:31:10,730 --> 00:31:17,419
it's it's empty right now right it's

00:31:12,320 --> 00:31:20,690
just a blank transparent overlay with

00:31:17,419 --> 00:31:22,519
with the WebGL context inside of it and

00:31:20,690 --> 00:31:24,110
again calling set map the difference is

00:31:22,519 --> 00:31:26,149
I'm going to call this render function

00:31:24,110 --> 00:31:29,539
so up here I have this render function

00:31:26,149 --> 00:31:34,399
and on the overlay I call set prompts so

00:31:29,539 --> 00:31:41,179
set props is how you can change a deck

00:31:34,399 --> 00:31:43,129
GL overlay like recursively so for

00:31:41,179 --> 00:31:44,869
example you know right you don't often

00:31:43,129 --> 00:31:47,149
want to or there's many times where

00:31:44,869 --> 00:31:49,730
you're not going to want to just do the

00:31:47,149 --> 00:31:50,960
one visualization and then just have it

00:31:49,730 --> 00:31:52,879
do nothing else right you want it

00:31:50,960 --> 00:31:54,139
usually you're trying to show some sort

00:31:52,879 --> 00:31:57,379
of change right or some sort of

00:31:54,139 --> 00:31:59,179
variation so this is what set props is

00:31:57,379 --> 00:32:04,539
for so you can see that what I'm doing

00:31:59,179 --> 00:32:06,759
is passing passing it a layer right

00:32:04,539 --> 00:32:10,369
which is an instance of this trips layer

00:32:06,759 --> 00:32:13,759
again there's an ID there's data right

00:32:10,369 --> 00:32:15,559
and then a path the data set for for a

00:32:13,759 --> 00:32:16,549
trips layer what it looks like is so

00:32:15,559 --> 00:32:17,450
imagine you have a set of directions

00:32:16,549 --> 00:32:20,539
right you have the turn-by-turn

00:32:17,450 --> 00:32:22,759
directions so each turn right is that a

00:32:20,539 --> 00:32:25,279
latitude and longitude point and there's

00:32:22,759 --> 00:32:29,509
a timestamp associated with it makes

00:32:25,279 --> 00:32:32,360
sense so what what what what Dec GL does

00:32:29,509 --> 00:32:34,850
with in this particular case is it takes

00:32:32,360 --> 00:32:37,090
this array of all the turn by turns with

00:32:34,850 --> 00:32:40,129
with their time stamps and it animates

00:32:37,090 --> 00:32:41,869
the animates the movement between points

00:32:40,129 --> 00:32:43,850
for us it's like very good that's a very

00:32:41,869 --> 00:32:46,100
good question so the question is does

00:32:43,850 --> 00:32:48,470
that mean that that I create a new trips

00:32:46,100 --> 00:32:52,129
layer on every render so I'll get to

00:32:48,470 --> 00:32:55,490
this in just a second actually again

00:32:52,129 --> 00:32:57,889
right we have various settings for what

00:32:55,490 --> 00:32:59,960
it looks like and then you can see that

00:32:57,889 --> 00:33:03,619
I have this current time property in

00:32:59,960 --> 00:33:06,769
trips layer and I'm every time I render

00:33:03,619 --> 00:33:08,899
I'm incrementing current time and then

00:33:06,769 --> 00:33:09,919
I'm recursively calling render with

00:33:08,899 --> 00:33:12,500
requestanimationframe

00:33:09,919 --> 00:33:14,690
so this is the interesting thing about

00:33:12,500 --> 00:33:18,370
the about the reactive programming model

00:33:14,690 --> 00:33:20,630
that's adopted by by Dec GL is that

00:33:18,370 --> 00:33:24,250
remember I had said the ID has to be

00:33:20,630 --> 00:33:28,460
unique so what so every time you you

00:33:24,250 --> 00:33:30,980
give Dec GL an instance of a layer it

00:33:28,460 --> 00:33:32,750
will use that ID to identify whether or

00:33:30,980 --> 00:33:38,960
not it has already rendered this layer

00:33:32,750 --> 00:33:42,440
once and then if it has it will only do

00:33:38,960 --> 00:33:43,730
a shallow diff on the on the previous

00:33:42,440 --> 00:33:45,380
version of the layer versus the new

00:33:43,730 --> 00:33:48,200
version that you're giving it this means

00:33:45,380 --> 00:33:50,210
that for example you know if it's

00:33:48,200 --> 00:33:52,130
already rendered out the data it knows

00:33:50,210 --> 00:33:53,720
the data set hasn't changed so it only

00:33:52,130 --> 00:33:56,630
has to change maybe some sort of

00:33:53,720 --> 00:33:59,090
particular visualization property write

00:33:56,630 --> 00:34:00,770
some sort of like styling property so in

00:33:59,090 --> 00:34:02,630
this case right the only thing that's

00:34:00,770 --> 00:34:05,090
changing over time is this curt is the

00:34:02,630 --> 00:34:10,929
time stamp on this current time which

00:34:05,090 --> 00:34:16,010
tells it where and time to animate to so

00:34:10,929 --> 00:34:16,970
real quick I just have I have a little

00:34:16,010 --> 00:34:19,339
node server running in the background

00:34:16,970 --> 00:34:20,990
that just orchestrates all of that like

00:34:19,339 --> 00:34:23,679
places and directions stuff for me to

00:34:20,990 --> 00:34:23,679
make it a little bit quicker

00:34:25,100 --> 00:34:36,230
[Music]

00:34:29,500 --> 00:34:38,119
how does yeah awesome so it's just like

00:34:36,230 --> 00:34:43,010
give it a second for it to like spin up

00:34:38,119 --> 00:34:45,379
all the data and that's what we yeah so

00:34:43,010 --> 00:34:48,379
this again right this is 190 like trips

00:34:45,379 --> 00:34:50,389
in motion all relative to one another

00:34:48,379 --> 00:34:52,909
and the cool thing is this is running at

00:34:50,389 --> 00:34:55,399
60 frames per second not only does does

00:34:52,909 --> 00:34:57,710
so I'm only incrementing current time by

00:34:55,399 --> 00:35:00,680
like one second at a time right but for

00:34:57,710 --> 00:35:02,570
every frame that I ask deck GL to render

00:35:00,680 --> 00:35:04,520
it actually also renders three to four

00:35:02,570 --> 00:35:06,230
in-betweens for me as well so I get

00:35:04,520 --> 00:35:07,730
these like really nice smooth animations

00:35:06,230 --> 00:35:09,940
it's pretty cool

00:35:07,730 --> 00:35:12,260
I've done this I've done this with like

00:35:09,940 --> 00:35:14,500
28,000 data points or something like

00:35:12,260 --> 00:35:14,500
that before

00:35:15,010 --> 00:35:20,599
another like neat little thing I like to

00:35:17,240 --> 00:35:22,600
point out is like let's change the color

00:35:20,599 --> 00:35:25,690
and

00:35:22,600 --> 00:35:30,670
make the length of the trails a little

00:35:25,690 --> 00:35:32,230
bit different and render it again and

00:35:30,670 --> 00:35:34,150
you can see like like your perception of

00:35:32,230 --> 00:35:37,120
the visualization like really changes

00:35:34,150 --> 00:35:39,430
based on you know your UI like based on

00:35:37,120 --> 00:35:42,070
your styling decisions that's pretty

00:35:39,430 --> 00:35:45,790
cool because right all the way down to

00:35:42,070 --> 00:35:47,560
the ground if you if you actually have

00:35:45,790 --> 00:35:49,030
the link with the demo that I had posted

00:35:47,560 --> 00:35:50,530
before if you're on the trips layer I

00:35:49,030 --> 00:35:53,050
have I have it where it just continues

00:35:50,530 --> 00:35:55,180
to grow basically forever so you end up

00:35:53,050 --> 00:35:57,750
with a lot of different lines moving

00:35:55,180 --> 00:36:00,490
around the map again these are the links

00:35:57,750 --> 00:36:03,010
if you want to see it and read it for

00:36:00,490 --> 00:36:04,480
yourself that all of these demos are

00:36:03,010 --> 00:36:07,780
made so you can run them on localhost

00:36:04,480 --> 00:36:09,280
you just run NPM start basically we have

00:36:07,780 --> 00:36:12,160
some we have some really good docs for

00:36:09,280 --> 00:36:14,470
the Maps platform also this link goes

00:36:12,160 --> 00:36:16,000
directly to the part of the deck GL

00:36:14,470 --> 00:36:18,250
Doc's that talk about Google Maps over

00:36:16,000 --> 00:36:20,050
way and this is that blog post where

00:36:18,250 --> 00:36:22,090
that I told you about earlier where they

00:36:20,050 --> 00:36:24,460
discuss how they actually made this

00:36:22,090 --> 00:36:26,170
implementation happen oh we just started

00:36:24,460 --> 00:36:29,710
need a new youtube channel too so if you

00:36:26,170 --> 00:36:30,850
understand maps check it out we were

00:36:29,710 --> 00:36:33,130
posting a bunch of videos and stuff

00:36:30,850 --> 00:36:34,600
there we would love to hear what it is

00:36:33,130 --> 00:36:36,730
that that you'd like to see as well

00:36:34,600 --> 00:36:38,330
that's it again that's my Twitter handle

00:36:36,730 --> 00:36:42,270
thank you very much

00:36:38,330 --> 00:36:42,270

YouTube URL: https://www.youtube.com/watch?v=-wni8jbNUzw


