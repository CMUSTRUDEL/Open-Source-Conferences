Title: Using Web Components in Angular, React, Vue or Not (as I understand it) - JS Monthly - January 2021
Publication date: 2021-02-11
Playlist: JS Monthly London
Description: 
	Dwane Hemmings
Using Web Components in Angular, React, Vue or Not (as I understand it)

An interactive walk-through with examples of how to include Web Components into Angular, React, Vue and Vanilla JavaScript applications.


Chapters & Excerpts:
Welcome 00:00:00

Getting Started [00:01:01]
Hi, I'm Dwayne. A JavaScript developer advocate advantage. If you're not familiar with Vonage, we are a cloud communication platform. RFE.

Web Components TLDR [00:03:38]
T L D R think of a web component as your own black box in your application. The user of your web component can pass in properties and set attributes. Then they can even call methods. You want them to use, but you want to let them use if your web component emits some custom events, the user can listen for those in their app.

Example with Vanilla JS - CDN [00:07:02]
Okay. So now let's get into the first example. Let's start with vanilla JavaScript. Now, first we need to load our web component. For this example, we will be using a CDN. So I'm using unpackage. There's so many, like we spoke about before, there's a lot of different new technologies out there.

Reference to web components [00:08:52]
And we're going to get into more examples of that, but continuing on now, then we need to get a reference to the web components. And so we're doing that there. Like I said, it's just a regular element. So we're going to do a document dot query selector and that you can do, if you put an ID there, you can do that.

Example with Angular [00:11:53]
Now up next, we're going to go in alphabetical order here. So we're going to start off with angular, cause I don't want to show any favouritism or anything. So now this image is from custom custom dash elements, dash everywhere.com and they do the work of making sure frameworks and custom elements are, can be BFFs.

View Child Decorator [00:16:11]
Now we use the view child decorator to find the key pad component using that hashtag key pad that I mentioned earlier. And then we create a key pad components, reference of class element ref, and that's being done on line 31 right there.

Issues with React and Web Components [00:17:53]
And as you can see, the relationship with web components is a rocky one. The issues lie with how react handles data and events react string of FYS data going into the web component. So for strings that's fine, but everything else like objects or race, or they're considered rich data that can cause problems.

Examples for older versions and legacy code [00:19:53]
And here's an example for versions older than 16.3, because there may be some legacy code and you will want to put in your web component so that when you upgrade, you don't have to rewrite all those things. And so now, like before we load our web component from a CDN, you can also use NPM installing and important as we did with the angular.

Using Create Ref [00:22:05]
Now, if you're using version 16.3 or later, you may want to use create ref. Now the way it's done in this example. So the way it was done in the previous example of 16, three or earlier earlier than 16.3, the example there would be considered legacy and will probably be removed in later versions.

Composition API [00:29:32] 
One of the newest additions to view is the composition API. It was created to help address some limitation. Developers were facing as applications grew over time and became more complex. Now, remember what I said that view three. 

Conclusion [00:31:12] 
So yeah, so you can see right there, we're importing ref from view, and then we're setting up the key pad  with a Knol, initially. 

Q&A [00:32:40]
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
YouTube URL: https://www.youtube.com/watch?v=SsijT3pEo8Q


