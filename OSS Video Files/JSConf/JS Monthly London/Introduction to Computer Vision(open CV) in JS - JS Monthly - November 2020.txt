Title: Introduction to Computer Vision(open CV) in JS - JS Monthly - November 2020
Publication date: 2020-12-09
Playlist: JS Monthly London
Description: 
	Introduction to Computer Vision(open CV) in JS // Italo Jose Goncalves De Oliveira

Do you wanna know computer vision but don't know Python? Are you in a project that needs to be coded in a fast way and can't use a custom deep learning model?

In this talk, we will see how the classical computer vision works and how a computer vision engineer can solve many problems in a fast and easy way than deep leaning. Everything in Javascript!

See the Q&A with Italo on the original live-stream:
https://youtu.be/aVTXc8foBPM

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,320 --> 00:00:07,680
hey guys so uh

00:00:04,640 --> 00:00:09,840
thank you for your presentation here and

00:00:07,680 --> 00:00:10,960
my name is italo and today we will talk

00:00:09,840 --> 00:00:13,280
about

00:00:10,960 --> 00:00:14,799
computer vision and to start this talk i

00:00:13,280 --> 00:00:16,960
would like to introduce me

00:00:14,799 --> 00:00:18,480
so my name is italo i'm the developer

00:00:16,960 --> 00:00:21,920
circle organizer

00:00:18,480 --> 00:00:23,760
the obstacles are a community from

00:00:21,920 --> 00:00:25,119
from facebook and it's a global

00:00:23,760 --> 00:00:28,320
community

00:00:25,119 --> 00:00:31,679
i'm to microsoft's musical professional

00:00:28,320 --> 00:00:32,960
from mike from microsoft views and i

00:00:31,679 --> 00:00:36,239
work as a solution

00:00:32,960 --> 00:00:38,239
text at vortex it's a fintech so

00:00:36,239 --> 00:00:40,160
today we will talk about computer vision

00:00:38,239 --> 00:00:43,440
but to start

00:00:40,160 --> 00:00:44,559
i want to talk about what isn't computer

00:00:43,440 --> 00:00:47,840
vision okay

00:00:44,559 --> 00:00:50,320
computer vision is not deep learn uh not

00:00:47,840 --> 00:00:51,120
necessarily deep learn and detect

00:00:50,320 --> 00:00:54,640
objects

00:00:51,120 --> 00:00:58,079
and use machine learning and some

00:00:54,640 --> 00:00:59,039
things like that and uh configuring

00:00:58,079 --> 00:01:02,160
computer vision

00:00:59,039 --> 00:01:05,439
is more you get an image

00:01:02,160 --> 00:01:08,560
and process it you know so for example

00:01:05,439 --> 00:01:09,680
uh you have three big areas inside

00:01:08,560 --> 00:01:13,840
computer vision

00:01:09,680 --> 00:01:17,439
that is image processing that is get an

00:01:13,840 --> 00:01:20,240
image and transform it for an image

00:01:17,439 --> 00:01:20,640
you have the computer vision that is get

00:01:20,240 --> 00:01:23,759
an

00:01:20,640 --> 00:01:24,720
image and transform it for a symbol for

00:01:23,759 --> 00:01:27,360
example

00:01:24,720 --> 00:01:28,400
an information get information from an

00:01:27,360 --> 00:01:31,680
image

00:01:28,400 --> 00:01:34,000
and here we don't

00:01:31,680 --> 00:01:35,200
using deep learning or machine learning

00:01:34,000 --> 00:01:37,280
or something like this

00:01:35,200 --> 00:01:38,320
okay we just using the classical

00:01:37,280 --> 00:01:42,000
computer vision

00:01:38,320 --> 00:01:44,079
and when we got an image and extract

00:01:42,000 --> 00:01:47,439
some information for this english

00:01:44,079 --> 00:01:50,240
we are using computer vision okay

00:01:47,439 --> 00:01:50,560
and we have the computer graphics uh

00:01:50,240 --> 00:01:53,520
that

00:01:50,560 --> 00:01:54,399
is got a symbol got a mathematical

00:01:53,520 --> 00:01:58,200
firmly

00:01:54,399 --> 00:02:01,360
get input and with this input

00:01:58,200 --> 00:02:04,560
transformation in an image okay

00:02:01,360 --> 00:02:07,920
and it's easy to confuse

00:02:04,560 --> 00:02:09,119
some of these terms because they are so

00:02:07,920 --> 00:02:11,760
much together

00:02:09,119 --> 00:02:13,200
but we have this difference and it's

00:02:11,760 --> 00:02:17,040
important to know when

00:02:13,200 --> 00:02:19,599
you are just uh searching something

00:02:17,040 --> 00:02:20,160
in the google for studying and something

00:02:19,599 --> 00:02:23,200
like this

00:02:20,160 --> 00:02:25,440
this term is important but

00:02:23,200 --> 00:02:26,640
uh what do you have inside computer

00:02:25,440 --> 00:02:29,520
vision why we

00:02:26,640 --> 00:02:31,760
can do with computer vision when we

00:02:29,520 --> 00:02:33,920
don't using deep learning you know

00:02:31,760 --> 00:02:36,160
so uh here we have some examples for

00:02:33,920 --> 00:02:39,760
example a credit card

00:02:36,160 --> 00:02:43,680
we can learn uh image

00:02:39,760 --> 00:02:46,879
and we can get some information about

00:02:43,680 --> 00:02:50,400
an image like this cat and

00:02:46,879 --> 00:02:53,680
for example these informations that you

00:02:50,400 --> 00:02:54,800
got from computer vision you can use it

00:02:53,680 --> 00:02:58,000
to improve

00:02:54,800 --> 00:02:58,879
a deep learning model uh and we have

00:02:58,000 --> 00:03:02,319
here two

00:02:58,879 --> 00:03:05,360
uh among uh a month

00:03:02,319 --> 00:03:08,480
counter a hand contour you know

00:03:05,360 --> 00:03:08,959
and everything here done using deep

00:03:08,480 --> 00:03:13,440
learning

00:03:08,959 --> 00:03:15,280
uh and when i think when i talk about

00:03:13,440 --> 00:03:17,280
don't use deep learn it's not

00:03:15,280 --> 00:03:20,080
necessarily the deep learning

00:03:17,280 --> 00:03:20,560
is a bad thing you know but sometimes

00:03:20,080 --> 00:03:22,879
you

00:03:20,560 --> 00:03:25,120
can't use the learn because you have a

00:03:22,879 --> 00:03:29,040
short time to develop that featuring

00:03:25,120 --> 00:03:32,239
or you you need just to develop

00:03:29,040 --> 00:03:34,560
experimental software for some

00:03:32,239 --> 00:03:35,280
customer and you don't have data you

00:03:34,560 --> 00:03:38,319
don't have

00:03:35,280 --> 00:03:42,159
time you don't have gpus to process

00:03:38,319 --> 00:03:44,480
a deep learning model fast so

00:03:42,159 --> 00:03:46,159
for solution this program you can use

00:03:44,480 --> 00:03:49,200
classical computer vision

00:03:46,159 --> 00:03:51,200
you know and another thing

00:03:49,200 --> 00:03:52,720
the computer vision without deep

00:03:51,200 --> 00:03:56,239
learning you can do

00:03:52,720 --> 00:04:00,000
is uh for example this project

00:03:56,239 --> 00:04:03,680
this portion is a slum okay island is a

00:04:00,000 --> 00:04:06,879
it's a software to to detect

00:04:03,680 --> 00:04:10,400
the movements you by the camera and

00:04:06,879 --> 00:04:13,680
with that serious times construct

00:04:10,400 --> 00:04:17,280
our path you know so it's uh

00:04:13,680 --> 00:04:20,239
for me it's the most powerful

00:04:17,280 --> 00:04:21,680
usage of computer vision that we don't

00:04:20,239 --> 00:04:25,040
use deep learning

00:04:21,680 --> 00:04:25,520
and it's show depart the whole powerful

00:04:25,040 --> 00:04:29,199
is

00:04:25,520 --> 00:04:33,199
called computer vision and

00:04:29,199 --> 00:04:37,199
to to for our demo we we use the

00:04:33,199 --> 00:04:40,639
opencv opencv is a library uh it's a

00:04:37,199 --> 00:04:43,680
library powered by intel and

00:04:40,639 --> 00:04:46,240
uh this library original is built

00:04:43,680 --> 00:04:46,880
in c plus plus but we have some binds

00:04:46,240 --> 00:04:50,479
for

00:04:46,880 --> 00:04:53,520
python for node.js for c chart

00:04:50,479 --> 00:04:58,960
and today we will use opencv for

00:04:53,520 --> 00:04:58,960
nodejs okay so show the code

00:04:59,840 --> 00:05:06,160
here i have a code and when i execute

00:05:03,520 --> 00:05:06,160
this code

00:05:06,479 --> 00:05:14,639
i have this result um

00:05:10,960 --> 00:05:17,600
i have some stats oh sorry by that but

00:05:14,639 --> 00:05:18,000
the application the windows is spawning

00:05:17,600 --> 00:05:21,039
in my

00:05:18,000 --> 00:05:22,240
another monitor you know so we have so

00:05:21,039 --> 00:05:26,000
much steps

00:05:22,240 --> 00:05:28,460
of processor processing image so

00:05:26,000 --> 00:05:30,320
in the final we can got uh

00:05:28,460 --> 00:05:33,280
[Music]

00:05:30,320 --> 00:05:34,479
a contour of our document this is a

00:05:33,280 --> 00:05:38,479
brazilian document

00:05:34,479 --> 00:05:41,520
okay so and for this problem we

00:05:38,479 --> 00:05:45,360
want to get an image

00:05:41,520 --> 00:05:48,400
this image and extract

00:05:45,360 --> 00:05:49,120
the document but i don't have time i

00:05:48,400 --> 00:05:52,479
don't have

00:05:49,120 --> 00:05:53,840
money for gpu i don't have uh know how

00:05:52,479 --> 00:05:57,600
about deep learning

00:05:53,840 --> 00:05:58,720
but i need do it i need to extract this

00:05:57,600 --> 00:06:02,160
document from

00:05:58,720 --> 00:06:05,759
this image how i can do it in a fast

00:06:02,160 --> 00:06:06,639
way uh i can use classical computer

00:06:05,759 --> 00:06:09,919
vision

00:06:06,639 --> 00:06:13,360
and as i said to do it

00:06:09,919 --> 00:06:16,400
we use the opencv for node.js

00:06:13,360 --> 00:06:20,160
so obviously for node.js is a library

00:06:16,400 --> 00:06:23,280
that implements the simplest plus binds

00:06:20,160 --> 00:06:26,160
okay it's a community library

00:06:23,280 --> 00:06:27,919
and as you can see in the documentation

00:06:26,160 --> 00:06:31,120
we have saw one thing

00:06:27,919 --> 00:06:34,479
uh already do it

00:06:31,120 --> 00:06:37,600
so just just implement it

00:06:34,479 --> 00:06:41,199
and use these features okay

00:06:37,600 --> 00:06:42,560
but for this demo we will see how we can

00:06:41,199 --> 00:06:45,680
do if

00:06:42,560 --> 00:06:49,919
we we can do it without

00:06:45,680 --> 00:06:53,280
uh any already did it feature it okay

00:06:49,919 --> 00:06:56,479
so uh the first thing is

00:06:53,280 --> 00:06:58,080
request okay the node.js for the opencv

00:06:56,479 --> 00:07:02,240
for node.js

00:06:58,080 --> 00:07:05,360
so after that we just uh

00:07:02,240 --> 00:07:08,800
we read our image and

00:07:05,360 --> 00:07:13,039
when we read the image we got a matrix

00:07:08,800 --> 00:07:16,240
and this matches we can do what we want

00:07:13,039 --> 00:07:19,440
so we got this image and sent to

00:07:16,240 --> 00:07:20,400
method process frame this method process

00:07:19,440 --> 00:07:23,360
frame

00:07:20,400 --> 00:07:24,080
we do we start to do something like

00:07:23,360 --> 00:07:27,440
photoshop

00:07:24,080 --> 00:07:30,160
you know so uh i have a problem that is

00:07:27,440 --> 00:07:33,680
that that um

00:07:30,160 --> 00:07:37,440
document in my image so first everything

00:07:33,680 --> 00:07:40,319
i need to detect a pattern you know and

00:07:37,440 --> 00:07:42,160
the first pattern as you can see here is

00:07:40,319 --> 00:07:45,280
this document is green

00:07:42,160 --> 00:07:48,479
all document is green so if i

00:07:45,280 --> 00:07:52,240
if i extract only green color

00:07:48,479 --> 00:07:55,599
i can get only the document of session

00:07:52,240 --> 00:07:59,360
you know so in my index yes

00:07:55,599 --> 00:08:00,319
i do exactly it so i create a mask by

00:07:59,360 --> 00:08:03,199
color

00:08:00,319 --> 00:08:03,199
in this method

00:08:04,080 --> 00:08:12,479
in this method i just uh transform

00:08:08,400 --> 00:08:15,919
my my image that is rgb

00:08:12,479 --> 00:08:18,960
to hsv hsv

00:08:15,919 --> 00:08:22,000
it's a color schema that we have

00:08:18,960 --> 00:08:25,360
our color our saturation

00:08:22,000 --> 00:08:28,479
and uh the intensity the whole mod

00:08:25,360 --> 00:08:31,759
is uh how much darker

00:08:28,479 --> 00:08:34,959
or clear er your easter egg image

00:08:31,759 --> 00:08:38,080
you know so uh when you

00:08:34,959 --> 00:08:42,320
create this transformation we just

00:08:38,080 --> 00:08:45,519
selected the art color by nahin

00:08:42,320 --> 00:08:49,440
these two colors here i'm just

00:08:45,519 --> 00:08:52,640
uh defining here in

00:08:49,440 --> 00:08:56,240
setting 6080 line so

00:08:52,640 --> 00:08:59,279
i set a air gp color

00:08:56,240 --> 00:09:02,399
okay so i define how much

00:08:59,279 --> 00:09:06,720
uh is the range that i

00:09:02,399 --> 00:09:10,480
i want to to filter to this image

00:09:06,720 --> 00:09:14,560
so when i do this mask i show it

00:09:10,480 --> 00:09:18,320
as i already showed it before for you

00:09:14,560 --> 00:09:21,440
so when i create this mask

00:09:18,320 --> 00:09:21,440
this mask will

00:09:21,600 --> 00:09:27,360
will be a little bit sharp you know

00:09:24,959 --> 00:09:28,000
as you can see here we have so much

00:09:27,360 --> 00:09:32,000
noise

00:09:28,000 --> 00:09:32,560
in this image we can't extract only only

00:09:32,000 --> 00:09:35,760
only

00:09:32,560 --> 00:09:39,440
the document here so how we can

00:09:35,760 --> 00:09:42,720
remove this noise so

00:09:39,440 --> 00:09:45,839
um i can

00:09:42,720 --> 00:09:49,120
for example blur this mask

00:09:45,839 --> 00:09:52,720
when i blur this mask i

00:09:49,120 --> 00:09:56,320
just removed some little uh nice

00:09:52,720 --> 00:10:00,320
piece of my image for example

00:09:56,320 --> 00:10:03,200
as you can see here we have a sharpened

00:10:00,320 --> 00:10:04,480
super noisy image and here we have a

00:10:03,200 --> 00:10:07,680
cleaner image

00:10:04,480 --> 00:10:08,320
as you can see for example some uh some

00:10:07,680 --> 00:10:11,519
blank

00:10:08,320 --> 00:10:15,040
piece here are here

00:10:11,519 --> 00:10:18,560
some points here we don't have it here

00:10:15,040 --> 00:10:22,000
as you can see so uh

00:10:18,560 --> 00:10:24,320
to do that to learn some image we can

00:10:22,000 --> 00:10:24,320
just

00:10:24,640 --> 00:10:31,760
show just ask for the opencv to blur

00:10:27,920 --> 00:10:32,560
our image that's in uh a size in this

00:10:31,760 --> 00:10:35,680
size

00:10:32,560 --> 00:10:38,480
is is a

00:10:35,680 --> 00:10:38,880
it's a it's like convolution you know so

00:10:38,480 --> 00:10:42,000
uh

00:10:38,880 --> 00:10:43,200
the blur method we've got 10 pixels by

00:10:42,000 --> 00:10:46,800
10 pixels

00:10:43,200 --> 00:10:50,160
and we'll multiply the all these colors

00:10:46,800 --> 00:10:53,680
and we'll got a planet image blended

00:10:50,160 --> 00:10:57,040
piece and these windows this window

00:10:53,680 --> 00:11:00,720
will uh will will be

00:10:57,040 --> 00:11:04,320
replaced by all the image all the

00:11:00,720 --> 00:11:08,160
biology pixels so after that

00:11:04,320 --> 00:11:10,720
after i got my blended image i just

00:11:08,160 --> 00:11:11,600
sharpened it again because as you can

00:11:10,720 --> 00:11:14,399
see

00:11:11,600 --> 00:11:15,120
i have a blended image and i can't

00:11:14,399 --> 00:11:18,640
detect

00:11:15,120 --> 00:11:19,519
um a rectangle you know because it's a

00:11:18,640 --> 00:11:22,399
blended

00:11:19,519 --> 00:11:23,519
image and i i don't know where it starts

00:11:22,399 --> 00:11:27,519
and where it's

00:11:23,519 --> 00:11:31,519
finished uh so to do that

00:11:27,519 --> 00:11:35,200
i just when i when i

00:11:31,519 --> 00:11:39,760
sharpen it you can see that i can

00:11:35,200 --> 00:11:42,800
just select my just select my

00:11:39,760 --> 00:11:46,000
my document and i

00:11:42,800 --> 00:11:49,200
know exactly where my document starts

00:11:46,000 --> 00:11:52,480
and where my document finished you know

00:11:49,200 --> 00:11:56,000
and we have okay we have uh some

00:11:52,480 --> 00:11:59,360
noises here but uh to

00:11:56,000 --> 00:12:03,360
avoid this noise we can

00:11:59,360 --> 00:12:07,839
just choose the biggest contour

00:12:03,360 --> 00:12:11,040
so for example here we have an

00:12:07,839 --> 00:12:15,120
object and another object a big

00:12:11,040 --> 00:12:18,800
object here we have another object

00:12:15,120 --> 00:12:19,839
and to filter all these little objects i

00:12:18,800 --> 00:12:23,279
can just

00:12:19,839 --> 00:12:24,240
choose the biggest one okay so and to do

00:12:23,279 --> 00:12:28,000
that

00:12:24,240 --> 00:12:31,120
in my get biggest contour

00:12:28,000 --> 00:12:34,480
i just uh call the method find

00:12:31,120 --> 00:12:37,760
contours passing as parameter

00:12:34,480 --> 00:12:41,279
head external so so i want to contour

00:12:37,760 --> 00:12:44,720
the external of my objects and i would

00:12:41,279 --> 00:12:48,639
like to uh to do

00:12:44,720 --> 00:12:52,480
a simple chain uh i will i used to like

00:12:48,639 --> 00:12:56,000
this contour is closed you know

00:12:52,480 --> 00:12:58,800
uh and so after that

00:12:56,000 --> 00:12:59,760
i will got somewhat contour i will got a

00:12:58,800 --> 00:13:03,120
one contour for

00:12:59,760 --> 00:13:07,200
each object inside my mask so

00:13:03,120 --> 00:13:10,240
i just sort it and get the biggest one

00:13:07,200 --> 00:13:11,360
after that after you get to the biggest

00:13:10,240 --> 00:13:14,880
contour

00:13:11,360 --> 00:13:18,320
i need to to drown

00:13:14,880 --> 00:13:21,680
where my document is you know

00:13:18,320 --> 00:13:24,800
so i just create

00:13:21,680 --> 00:13:28,959
a method to do it too

00:13:24,800 --> 00:13:32,639
so uh i just define the perimeter

00:13:28,959 --> 00:13:36,720
and the beam of my mask

00:13:32,639 --> 00:13:40,480
so after that i asked for opencv

00:13:36,720 --> 00:13:44,480
to to return me uh

00:13:40,480 --> 00:13:48,480
the points where this where this

00:13:44,480 --> 00:13:49,360
contour is you know so i will go after

00:13:48,480 --> 00:13:53,360
uh

00:13:49,360 --> 00:13:57,040
here in points i have got a array

00:13:53,360 --> 00:14:00,399
uh and this array is filled with so much

00:13:57,040 --> 00:14:03,920
uh points and we with x

00:14:00,399 --> 00:14:07,519
and y of my image so after that

00:14:03,920 --> 00:14:10,720
i can just draw it passing my

00:14:07,519 --> 00:14:14,639
points past uh how much

00:14:10,720 --> 00:14:17,839
is the trickness of my my my line

00:14:14,639 --> 00:14:20,160
the color of my line and if i want to

00:14:17,839 --> 00:14:23,600
close or not my

00:14:20,160 --> 00:14:27,040
my my contour you know

00:14:23,600 --> 00:14:30,240
so after that i can got my result

00:14:27,040 --> 00:14:33,600
and the benefits of this is

00:14:30,240 --> 00:14:36,880
like i already said before

00:14:33,600 --> 00:14:39,600
sometimes when you don't have time to do

00:14:36,880 --> 00:14:41,760
some protestable or something like this

00:14:39,600 --> 00:14:44,720
you can use the opencv

00:14:41,760 --> 00:14:45,279
and costco computer vision to build

00:14:44,720 --> 00:14:48,880
these

00:14:45,279 --> 00:14:52,320
products for example here we can

00:14:48,880 --> 00:14:55,600
here i two years ago i

00:14:52,320 --> 00:14:58,240
have a problem that is to detect

00:14:55,600 --> 00:14:59,199
the the this document that you can see

00:14:58,240 --> 00:15:03,279
here it's a

00:14:59,199 --> 00:15:07,120
card id from here brazil and another

00:15:03,279 --> 00:15:11,199
another type of card id that is

00:15:07,120 --> 00:15:14,320
uh that was blue so we got a card id

00:15:11,199 --> 00:15:17,360
a green card id and a blue card id

00:15:14,320 --> 00:15:19,120
so i didn't need to develop a big

00:15:17,360 --> 00:15:21,839
command complex model

00:15:19,120 --> 00:15:23,519
using deep learn to detect these two

00:15:21,839 --> 00:15:26,240
objects inside my image

00:15:23,519 --> 00:15:26,800
i just used costco computer vision and

00:15:26,240 --> 00:15:30,480
as

00:15:26,800 --> 00:15:32,720
you can see this code it's a simple code

00:15:30,480 --> 00:15:36,240
it's not a complex code

00:15:32,720 --> 00:15:39,040
so uh with it i with it

00:15:36,240 --> 00:15:40,480
i just built it application that is

00:15:39,040 --> 00:15:43,759
tracked these two

00:15:40,480 --> 00:15:45,120
two images and extract is extracting

00:15:43,759 --> 00:15:48,959
these two image

00:15:45,120 --> 00:15:50,000
i can work in more technicals inside it

00:15:48,959 --> 00:15:53,040
for example

00:15:50,000 --> 00:15:56,320
to go out my uh

00:15:53,040 --> 00:16:02,480
my card id number or verify if

00:15:56,320 --> 00:16:02,480
my if this session of my image has some

00:16:02,639 --> 00:16:11,600
some data that i need you know

00:16:05,920 --> 00:16:11,600
so uh the message here is

00:16:11,839 --> 00:16:15,920
you can you don't need deep learn you

00:16:14,800 --> 00:16:19,920
can use

00:16:15,920 --> 00:16:23,360
a simple classical computer vision

00:16:19,920 --> 00:16:23,839
and i mean i guess i will be a little

00:16:23,360 --> 00:16:27,040
bit

00:16:23,839 --> 00:16:30,399
faster sorry about that

00:16:27,040 --> 00:16:30,399
but um

00:16:31,600 --> 00:16:36,800
we got to the end and

00:16:34,880 --> 00:16:40,639
thank you very much if you have some

00:16:36,800 --> 00:16:40,639

YouTube URL: https://www.youtube.com/watch?v=EoXp8pRFOkM


