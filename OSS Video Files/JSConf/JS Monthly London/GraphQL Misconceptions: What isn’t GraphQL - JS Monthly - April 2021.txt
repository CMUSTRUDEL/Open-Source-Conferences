Title: GraphQL Misconceptions: What isn’t GraphQL - JS Monthly - April 2021
Publication date: 2021-05-21
Playlist: JS Monthly London
Description: 
	GraphQL Misconceptions: What isn’t GraphQL \\ Shruti Kapoor

When you first heard of GraphQL, did you think it was a SQL type language or something that was used for graph type data structures only? You are not alone! There are a lot of misconceptions about GraphQL In this talk, Shruti will be debunking common misconceptions about GraphQL.

Key Points:
Intro [00:00:00] 

More about GraphQL [00:00:55]

Jokes [00:01:25

Lets get started [00:02:21] 

GraphQL Misconceptions [00:06:53] 

GraphQL=Graph [00:08:12]

GraphQL = SQL [00:09:37] 

Data Fetching Works Magically [00:10:44] 

GraphQL replaces Redux [00:11:36] 

You can't have REST with GraphQL [00:12:22] 

Difficulty adding to an existing project [00:13:56] 

GraphQL is for Front-End [00:14:48] 

GraphQL will write database queries itself [00:15:36] 

It Requires Complicated Clients [00:16:04] 

Summary [00:16:54]

Why I Like GraphQL [00:17:23] 

How to get started with GraphQL [00:19:38]

Outro [00:21:24] 

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:01,410 --> 00:00:02,009
Hey everyone.

00:00:02,190 --> 00:00:03,660
Thank you for coming to this meetup.

00:00:04,200 --> 00:00:09,060
And thank you, Mila and Alex for hosting me, I am going to talk

00:00:09,060 --> 00:00:11,100
about what is in graph QL today.

00:00:11,430 --> 00:00:15,820
And I will be talking about it from a misconceptions point of view.

00:00:17,370 --> 00:00:19,740
Before I get started, I want to introduce myself.

00:00:20,415 --> 00:00:26,475
My name is Shutri Kapoor and I am in sunny, California USA in San Francisco.

00:00:27,663 --> 00:00:33,255
You can find me on Twitter @ Shutrikapoor08 on Twitch @shutrikapoor

00:00:33,525 --> 00:00:37,155
.And I host co-working live sessions where I invite people to bring

00:00:37,155 --> 00:00:40,755
their side projects so we can all work together, stay motivated.

00:00:41,955 --> 00:00:45,315
I work at PayPal as a senior software engineer, and I've been working with

00:00:45,315 --> 00:00:47,365
GraphQL for over three years now.

00:00:48,318 --> 00:00:53,625
When I first started with GAF QL there was a lot of questions I had in my mind, and

00:00:53,625 --> 00:00:55,425
I could not find those answers anywhere.

00:00:55,905 --> 00:01:01,065
For example, is graph similar graphQL similar to graph, or what is the graph

00:01:01,065 --> 00:01:06,525
in graph QL and to this presentation, I want to help answer so those

00:01:06,525 --> 00:01:10,215
questions for you guys, if you have those questions and I want to solve

00:01:10,215 --> 00:01:11,985
any misconceptions that you may have.

00:01:13,215 --> 00:01:17,355
If you're inteRESTed in more talks like this or more blog articles like

00:01:17,355 --> 00:01:21,495
this, or about graph QL or JavaScript in general, you can follow me on

00:01:21,495 --> 00:01:24,783
Twitter, where I shared out any blog posts and articles that I made.

00:01:25,695 --> 00:01:29,625
And if you've been following me on Twitter that I aggressively tweet that jokes.

00:01:29,985 --> 00:01:32,565
So of course we have to have it as jokes today as well.

00:01:33,015 --> 00:01:36,105
So I'm going to ask you a question and then you can answer it in the chat.

00:01:36,855 --> 00:01:39,285
I look at the chat here to see your answers as well.

00:01:39,765 --> 00:01:41,655
So first question.

00:01:42,420 --> 00:01:43,470
Where do programmers?

00:01:43,470 --> 00:01:44,090
Hang on.

00:01:44,820 --> 00:01:46,140
Let me open the chat here.

00:01:46,920 --> 00:01:47,550
We don't.

00:01:51,570 --> 00:01:52,230
That is true.

00:01:53,250 --> 00:01:54,120
Why don't we hang out at me?

00:01:54,370 --> 00:01:54,870
Right?.

00:01:56,440 --> 00:01:57,550
We hang out at Foo Bar!

00:01:58,240 --> 00:01:58,420
Okay.

00:01:58,420 --> 00:01:58,930
Next one.

00:01:59,710 --> 00:02:01,360
How did HTML get drunk?

00:02:02,470 --> 00:02:03,880
It had too many BR.

00:02:05,380 --> 00:02:07,840
What did the developers say to the depository?

00:02:09,220 --> 00:02:09,925
Fork you.

00:02:10,975 --> 00:02:11,215
Yeah.

00:02:11,245 --> 00:02:15,505
If you want to look at word of jokes, read more and find them on GitHub.

00:02:15,535 --> 00:02:17,545
There is a repository called get hub.

00:02:17,875 --> 00:02:20,290
Dot com slash with the composer eight slash 10 joke.

00:02:21,664 --> 00:02:23,455
But anyways, let's get started.

00:02:23,755 --> 00:02:26,735
So today I'm going to talk about what is in GraphQL.

00:02:27,265 --> 00:02:32,335
And specifically I will dive down, dive deep into what is graph QL versus

00:02:32,335 --> 00:02:37,345
REST and give a brief introduction of how graph QL and REST are different.

00:02:37,795 --> 00:02:39,565
We'll look at some misconceptions.

00:02:40,362 --> 00:02:41,515
10 misconceptions.

00:02:41,755 --> 00:02:44,815
We'll talk about some good things from my personal experience.

00:02:44,930 --> 00:02:47,810
And if you are inteRESTed in GraphQL QL and get started.

00:02:48,500 --> 00:02:51,840
So the first thing let's talk a little bit about what is GraphQL

00:02:51,860 --> 00:02:53,660
versus REST and how it compares.

00:02:53,990 --> 00:02:56,840
So for the example, for the purpose of this presentation, I'm going

00:02:56,840 --> 00:02:58,610
to be going over this example.

00:02:59,680 --> 00:03:04,150
Let's say that we're building a library app and we want to show the title of

00:03:04,180 --> 00:03:06,370
the book and the author of the book.

00:03:06,370 --> 00:03:08,109
So we're only inteRESTed in two fields.

00:03:08,510 --> 00:03:11,740
The title could be a string, the title  would be a string and then the

00:03:11,740 --> 00:03:15,380
author could be an array of strings.

00:03:15,400 --> 00:03:17,260
So there could be one or more authors.

00:03:18,135 --> 00:03:20,260
And so that's the stuff, the data that we're looking at.

00:03:22,269 --> 00:03:24,220
Let's say that we are building an app where we just want to

00:03:24,220 --> 00:03:27,549
show the title of the book and the author one or two authors.

00:03:28,209 --> 00:03:31,750
If this is an app that we're building, there's usually four to five

00:03:31,750 --> 00:03:33,370
different steps in building an app.

00:03:33,400 --> 00:03:37,630
The first step is we need to think about what data we want to send to the server.

00:03:37,720 --> 00:03:39,400
So what data should we get back?

00:03:39,430 --> 00:03:43,270
What data are we supposed to send, select for example, IDs and things like that.

00:03:43,270 --> 00:03:47,170
And in the REST world we'll look at the API documentation and we'll

00:03:47,170 --> 00:03:50,920
find out which routes we need to call, which methods are available.

00:03:50,950 --> 00:03:53,680
So for example, if you found out, you may have found out that there

00:03:53,680 --> 00:03:54,940
is an end point called books.

00:03:55,210 --> 00:03:59,020
There's an end point called authors and that's that end point can be, useful

00:03:59,620 --> 00:04:03,640
to us in graph QL instead we, before looking at the documentation, you

00:04:03,640 --> 00:04:05,500
have to think about what data we need.

00:04:05,785 --> 00:04:07,825
So in this example, we're building a library app.

00:04:07,825 --> 00:04:09,084
We need the book and the author.

00:04:09,144 --> 00:04:10,765
So those are the two fields that we need.

00:04:11,095 --> 00:04:13,795
The next step is that now we know what data we need to send.

00:04:13,855 --> 00:04:15,445
No, we have to create a request.

00:04:15,625 --> 00:04:18,625
So in the REST store, we have our end point books and authors.

00:04:18,655 --> 00:04:22,405
We have to find out what does books and author accept.

00:04:22,435 --> 00:04:24,115
So they may be accepting an ID.

00:04:24,115 --> 00:04:26,305
They may be accepting the string or things like that.

00:04:26,575 --> 00:04:30,835
So you have to find out which parameters the endpoint accepts in graph QL.

00:04:30,925 --> 00:04:35,275
We have an endpoint slash graph keyword, and that's the only end point we have.

00:04:35,650 --> 00:04:38,380
So we don't have like separate slash books slash other endpoint.

00:04:38,380 --> 00:04:43,510
We just have the one endpoint and in order to get the data, we need to first

00:04:43,690 --> 00:04:45,940
create a query of fields that we need.

00:04:46,150 --> 00:04:48,849
So for example, here we'll need the title of the book.

00:04:49,180 --> 00:04:51,880
So we have a quality of field called title, and then we haven't

00:04:52,060 --> 00:04:53,440
need the name of the author.

00:04:53,440 --> 00:04:54,700
So we'll have author names.

00:04:56,980 --> 00:04:59,110
So now we know what data we need to send.

00:04:59,740 --> 00:05:04,000
The next step is to figure it out in REST, which verb we are going to use.

00:05:04,150 --> 00:05:08,690
So we could have a gap or a post or a batch and delete or put in GraphQL.

00:05:08,710 --> 00:05:10,780
There would be either a quality or a mutation.

00:05:11,200 --> 00:05:16,870
So query is when we need to get the data it's similar to REST get, and mutation is

00:05:16,870 --> 00:05:18,830
the job of post patch delete put input.

00:05:20,380 --> 00:05:20,570
Okay.

00:05:20,590 --> 00:05:23,199
So now we know that we need, let's say query.

00:05:24,310 --> 00:05:26,215
And, REST we need get to fetch the data.

00:05:26,245 --> 00:05:29,015
We've got the IDs, you've got the fields that we need to do, then the

00:05:29,035 --> 00:05:31,225
next step is on the server side.

00:05:31,225 --> 00:05:34,720
We need to make sure that we've got the methods that can handle that.

00:05:34,975 --> 00:05:38,569
So we've got retrieve authors that accepts an author ID sends back that

00:05:38,815 --> 00:05:41,665
we've got three books that accepts a book ID since about the book.

00:05:41,995 --> 00:05:45,035
Similarly, in the GraphQL case on the service, I've needed to make sure that we.

00:05:45,185 --> 00:05:47,905
Got the resolve for the query that we are accepting.

00:05:47,905 --> 00:05:50,784
So for example, if we've got a field coming in, which is

00:05:50,784 --> 00:05:53,844
book or title, you need to make sure that we've got a resolver.

00:05:54,115 --> 00:05:57,205
So dissolve is similar to the resource implementation and REST.

00:05:57,474 --> 00:06:00,294
It's basically just a function that helps you send back the data

00:06:00,294 --> 00:06:01,675
for the field that was requested.

00:06:02,005 --> 00:06:05,875
So if you've got title that function may do something like fetch it from

00:06:05,875 --> 00:06:10,585
the database or call another endpoint or call it another REST API in,

00:06:10,585 --> 00:06:12,385
in case it's an -unclear- there.

00:06:12,840 --> 00:06:15,900
So dissolver does the magic of finding which data design.

00:06:17,340 --> 00:06:20,130
So now the server side, you build yourself server implementation.

00:06:20,490 --> 00:06:24,840
The next part is we have to send that data back and on the client's side,

00:06:24,870 --> 00:06:26,430
we need to parse that receive data.

00:06:26,860 --> 00:06:31,270
So in REST where we usually get an adjacent object, we also get fields

00:06:31,270 --> 00:06:34,030
that may not be, that may not be the ones that we're looking for.

00:06:34,030 --> 00:06:37,390
So if you ask for title, there may be other fields that we have not requested,

00:06:37,780 --> 00:06:42,310
whereas in graph QL, because you requested for the data, you only get back the

00:06:42,310 --> 00:06:46,090
data that you asked for, and which is a really powerful thing about graph QL.

00:06:46,540 --> 00:06:50,080
So you also get back a JSON object, but you only get the

00:06:50,080 --> 00:06:51,310
data that you had asked for.

00:06:53,860 --> 00:06:57,220
Now let's look at some of the myths that people have had about graph QL.

00:07:00,210 --> 00:07:00,249
Yeah.

00:07:01,386 --> 00:07:02,910
Like any professional engineer?

00:07:02,970 --> 00:07:08,220
I did my research on Twitter and I asked people tell me some misconceptions

00:07:08,220 --> 00:07:09,698
that you had with Graph QL.

00:07:11,515 --> 00:07:17,544
And the most common misconceptions are I, narrowed those down to 10 misconceptions.

00:07:17,585 --> 00:07:19,465
The most common misconceptions are here.

00:07:20,034 --> 00:07:22,914
The first misconception that most people have is that GraphQL is similar

00:07:22,914 --> 00:07:26,094
to graph, or the graph is similar to the SQL because of the code.

00:07:27,895 --> 00:07:31,585
Also then another misconception is that it only works in graph type data.

00:07:33,145 --> 00:07:39,940
And I think they, because of the way we present, it feels that GraphQL, does the

00:07:39,970 --> 00:07:41,959
magic of fetching data automatically.

00:07:43,992 --> 00:07:44,980
Another thing.

00:07:45,010 --> 00:07:48,280
I think that a lot of people have is that graph with graphs where you don't

00:07:48,280 --> 00:07:51,142
need to measure data on the client side, or like you don't need Redux.

00:07:52,425 --> 00:07:56,030
And that REST in graph QL can co-exist because GraphQL

00:07:56,050 --> 00:07:57,310
is very different from REST.

00:07:58,600 --> 00:08:02,530
And because it feels the GraphQl so are difficult to onboard, it feels a

00:08:02,530 --> 00:08:05,320
lot of people have the misconception that GraphQL is really difficult to

00:08:05,320 --> 00:08:06,790
introduce to an existing project.

00:08:08,350 --> 00:08:11,380
So let's look at some of these misconceptions in detail.

00:08:12,460 --> 00:08:16,360
Let's first talk about the, one that's more, most commonly found, which is

00:08:16,360 --> 00:08:18,010
that GraphQL is similar to graph.

00:08:18,550 --> 00:08:21,370
And the misconception here, usually that people have is that

00:08:21,370 --> 00:08:23,120
it's somehow related to the D3.

00:08:23,140 --> 00:08:23,710
JS.

00:08:24,670 --> 00:08:30,310
But it's kind of similar to the Facebook's graph, but actually the graph and graph

00:08:31,749 --> 00:08:37,630
the graph and graph QL works for data that looks or it feels like a graph.

00:08:37,630 --> 00:08:41,290
So for example, here we have the book, has a title.

00:08:41,290 --> 00:08:42,340
The title is a string.

00:08:42,340 --> 00:08:44,950
So this way we are drawing the connection between the data we're

00:08:45,010 --> 00:08:46,450
drawing the graph between data.

00:08:46,660 --> 00:08:48,640
And that's what the graph in GraphQL represents.

00:08:49,150 --> 00:08:52,150
Another example is that you may have a book and you haven't,

00:08:52,240 --> 00:08:53,830
you may have the books author.

00:08:54,130 --> 00:08:56,650
Then the author has also written a bunch of other books.

00:08:56,830 --> 00:08:58,840
So you're looking at book, then you're fetching author.

00:08:58,840 --> 00:09:03,675
Then you're also fetching another books from books list from that author.

00:09:03,825 --> 00:09:06,315
So this way you're kind of like drawing the relationship between

00:09:06,315 --> 00:09:09,735
the different fields and that's what the graph in GraphQL represents.

00:09:11,830 --> 00:09:14,680
So the misconception may be that it only works from graph like

00:09:14,680 --> 00:09:18,760
structures, but it actually works for any data that can be expressed in

00:09:18,760 --> 00:09:20,500
terms of notes and how they connect.

00:09:20,890 --> 00:09:23,920
So here we looked at books and we have the title.

00:09:25,365 --> 00:09:30,580
A book may have the diary may be like name or email or bio, but

00:09:30,580 --> 00:09:31,990
you're only interested in name.

00:09:32,170 --> 00:09:34,630
So that's the field that we'll use to draw a relationship.

00:09:37,195 --> 00:09:39,915
The next misconception is said, GraphQL is similar to SQL.

00:09:40,135 --> 00:09:44,725
And the thing that's probably because of the QL and graph QL and a lot of people

00:09:44,725 --> 00:09:49,165
have misconception that it's kind of like a, another query language for databases

00:09:49,435 --> 00:09:52,555
and that we may have to do something like select star or something like that, like

00:09:52,555 --> 00:09:58,795
a query language, but actually the query language of GraphQL, kind of means that

00:09:58,795 --> 00:10:00,715
this is just a way for asking for data.

00:10:01,015 --> 00:10:04,375
So you don't write like star or whatever, but you just said, it's

00:10:04,375 --> 00:10:07,555
kind of like a way of asking for the title, pragmatic programmer.

00:10:09,205 --> 00:10:14,065
And the QL here represents asking the data from the API.

00:10:14,515 --> 00:10:17,875
So graph QL is a query language for an API.

00:10:17,905 --> 00:10:19,435
It's not a database language.

00:10:19,960 --> 00:10:22,540
You can implement your database in whatever language you want.

00:10:22,570 --> 00:10:25,480
Your data makes me still be an SQL type language.

00:10:26,290 --> 00:10:28,240
But GraphQL is just built on top of that.

00:10:28,240 --> 00:10:33,100
The fetch data from the, API, from the database, there are however

00:10:33,100 --> 00:10:38,230
libraries like D graph that are all the way graph QL at the database level

00:10:38,230 --> 00:10:42,490
as well, but it's not mandatory to have GraphQL at the database level.

00:10:44,230 --> 00:10:48,100
Another common misconception, like with all that works magically that if you

00:10:48,100 --> 00:10:54,910
just pass a query and with the title book with the, field book or title that the

00:10:54,910 --> 00:10:59,260
data would come back magically, but just like in REST, you also have to write.

00:10:59,575 --> 00:11:02,485
Similarly in graph QL you also have to write the implementation

00:11:02,485 --> 00:11:07,285
on the server side and for graph QL, this is done in a resolver.

00:11:07,495 --> 00:11:09,895
So you write all the API set.

00:11:09,895 --> 00:11:11,095
You need to call within that resolver.

00:11:11,095 --> 00:11:14,035
You write all the database queries that you need to do in that resolver.

00:11:14,335 --> 00:11:17,755
This is all good as kind of similar to the resource implementation in REST.

00:11:19,675 --> 00:11:22,975
And I think another very common misconception is that

00:11:22,975 --> 00:11:24,625
graph tool replaces Redux.

00:11:26,095 --> 00:11:33,235
And I think this may be because GraphQL already reduces the need for

00:11:33,235 --> 00:11:35,155
having a state management library.

00:11:36,855 --> 00:11:40,685
A common misconception that people have said is that GraphQL, replaces Redux.

00:11:40,705 --> 00:11:46,375
So why bother having something like a Redux or even react hooks

00:11:46,855 --> 00:11:50,545
but the thing is that GraphQL is just a way for asking for data.

00:11:50,935 --> 00:11:53,935
And once you have that data on the client side, you still need to manage it.

00:11:55,025 --> 00:11:57,430
GraphQL reduces the data that comes back to the client.

00:11:57,430 --> 00:12:02,530
So you may not need a heavy statement library like Redux, but depending on

00:12:02,530 --> 00:12:06,370
how much data you get back from the API, you still have to manage that data.

00:12:06,640 --> 00:12:09,460
And you can use whichever library wants me to be able to just get away

00:12:09,460 --> 00:12:14,020
with React hooks, or you can use the default state management that comes

00:12:14,020 --> 00:12:18,430
from Apollo client, or you may have to use a heavier state management library

00:12:18,430 --> 00:12:21,820
like Redux, but you still have data that you need to manage on the client side.

00:12:22,375 --> 00:12:26,815
A very common misconception is that with GraphQL you have to strip everything down.

00:12:27,355 --> 00:12:29,125
You can't have any REST microservices.

00:12:29,155 --> 00:12:33,805
You can't have REST with GraphQl, but actually because GraphQL works really

00:12:33,805 --> 00:12:36,595
beautifully as a orchestration layer.

00:12:36,925 --> 00:12:40,075
One of the most powerful things of GraphQL is that you can have your

00:12:40,075 --> 00:12:44,215
existing architecture as this, and you can just build GraphQL on top of it.

00:12:44,365 --> 00:12:47,785
So you build a GraphQl as an orchestration layer that in turn just

00:12:47,785 --> 00:12:50,845
talks to rest API, but for your client, they're just seeing one end point.

00:12:50,845 --> 00:12:51,745
So they're just seeing that.

00:12:51,915 --> 00:12:53,235
Yeah, the GraphQL endpoint.

00:12:53,535 --> 00:12:58,005
So you still get the benefits of endpoint, whereas you can still keep

00:12:58,005 --> 00:13:02,085
your existing microservices architecture.

00:13:03,055 --> 00:13:04,595
That's a great thing about GraphQL.

00:13:05,385 --> 00:13:08,965
A lot of these companies have also implemented GraphQL in parallel with REST.

00:13:09,105 --> 00:13:13,395
So they have the rest implementations for REST endpoints for whatever existing, but

00:13:13,395 --> 00:13:15,355
everything that's new is going inGraphQL.

00:13:15,575 --> 00:13:19,695
So you can totally haveGraphQLl with REST or on top of rest.

00:13:20,155 --> 00:13:25,165
One library that does this kind of orchestration really well is one graph.

00:13:26,017 --> 00:13:29,605
And it's, a really cool way of selecting multiple API end points.

00:13:29,815 --> 00:13:35,695
So they have examples of Spotify or Github and dev dot two.

00:13:35,935 --> 00:13:39,815
And then you can, kind of pick and choose whichever library, which point you want.

00:13:40,075 --> 00:13:43,695
And then you can have that come up in GraphQL.

00:13:43,945 --> 00:13:48,030
So you're not doing any sort of like integrations, but one graph does that

00:13:48,030 --> 00:13:50,340
kind of like magic string of data for you.

00:13:50,760 --> 00:13:51,300
So it's really cool.

00:13:51,330 --> 00:13:54,480
Check it out if you're interested in that kind of like orchestration.

00:13:56,060 --> 00:14:01,710
Another misconception that kind of follows from the same microservices

00:14:01,710 --> 00:14:05,340
architecture is that it's difficult to introduce an existing project.

00:14:06,550 --> 00:14:09,760
And this was one common misconception that we commonly had when you were

00:14:09,760 --> 00:14:12,010
starting to adopt graph QL in paper.

00:14:12,940 --> 00:14:15,940
Because a lot of people thought that it's kind of like an all or nothing

00:14:15,940 --> 00:14:19,210
and need to replace everything that you have in your rest API in order to

00:14:19,210 --> 00:14:23,380
introduce graph QL in your project, or that it's only meant for like Greenfield

00:14:23,380 --> 00:14:25,120
projects, something that's completely new.

00:14:25,715 --> 00:14:28,715
But the thing with graph QL is that because it works really well as an

00:14:28,745 --> 00:14:34,055
orchestration layer, you can kind of pick and choose whichever, endpoint you want.

00:14:34,325 --> 00:14:37,535
So you can start with a small end point that doesn't have maybe a lot of

00:14:37,565 --> 00:14:42,455
audience doesn't have a lot of state, and you can kind of convert that into

00:14:42,455 --> 00:14:48,355
graph QL, and you can slowly start migrating your app one point at a time.

00:14:48,745 --> 00:14:52,105
Another really common misconception is that GraphQL is only for JavaScript

00:14:52,105 --> 00:14:55,675
or only for front-end folks or only for libraries that use react.

00:14:56,065 --> 00:15:00,055
But the, great beauty of GraphQL actually lies on the backend

00:15:00,355 --> 00:15:04,585
because you're able to only send the data back that the client needs.

00:15:05,005 --> 00:15:07,375
And that's amazing because on the backend you can.

00:15:07,585 --> 00:15:12,055
Add fields to the existing API without having to deprecate,

00:15:12,175 --> 00:15:14,875
because there's only one end point there's only the graft or end point.

00:15:15,145 --> 00:15:18,055
You can add fields without having to change the version.

00:15:18,385 --> 00:15:22,225
Or you can intelligently look at which fields are being used so that you

00:15:22,225 --> 00:15:26,995
can either deprecate it if you need to, or add a deprecate flag or see

00:15:26,995 --> 00:15:28,975
the instrumentation on that field.

00:15:28,975 --> 00:15:31,375
So you can see how many people are using a particular field.

00:15:31,615 --> 00:15:35,185
So I think the, real beauty of graph QL comes from the backend.

00:15:36,040 --> 00:15:40,600
And there, common misconception is that GraphQL will write database queries itself

00:15:40,930 --> 00:15:44,710
that you just need to take care of the quality or the mutation, but everything

00:15:44,710 --> 00:15:51,130
behind this have on itself the, thing is again, GraphQL is similar to how

00:15:51,130 --> 00:15:53,290
the rest has a resource implementation.

00:15:53,500 --> 00:15:56,440
So you still need to do all the magic of doing your database

00:15:56,440 --> 00:15:57,940
queries in your resolvers.

00:15:58,720 --> 00:16:02,900
Unless if you are using a library like Prisma orNeo4J,

00:16:02,920 --> 00:16:04,090
that kind of does this for you.

00:16:04,480 --> 00:16:07,150
Another really common misconception is that you need to have a really

00:16:07,150 --> 00:16:11,110
big client like Apollo or something do haveGraphQL in your project.

00:16:12,190 --> 00:16:15,730
The thing that GraphQL is actually just a curl command.

00:16:16,960 --> 00:16:17,800
People saying that.

00:16:18,340 --> 00:16:22,370
In order to get GraphQL, you need something you need to build a GraphQL

00:16:22,390 --> 00:16:24,460
server or as a third party client.

00:16:24,970 --> 00:16:29,650
But because GraphQL is just like an HTTP request, it's just an HTTP API.

00:16:30,070 --> 00:16:34,180
You can just do a curl command, just like how you would do with the, rest.

00:16:35,515 --> 00:16:37,525
For example here, we've got the curl command.

00:16:37,765 --> 00:16:40,675
And then the only thing you need to worry about is the data, because we

00:16:40,675 --> 00:16:43,855
have to fetch for the fields we have to fetch for which field we need.

00:16:44,155 --> 00:16:50,725
So you can pass that fields in the data, part and you can fetch the exact fields

00:16:50,725 --> 00:16:54,025
that you need, but then pass in your GraphQL end point as the end point.

00:16:54,285 --> 00:16:59,145
Sum up the 10 myths that we looked at was GraphQL is similar to graph or SQL.

00:16:59,787 --> 00:17:04,095
We looked at by GraphQL only we looked at the misconception that graph code

00:17:04,095 --> 00:17:09,435
only works for graph that data that data fetching works magically or that

00:17:09,435 --> 00:17:14,805
GraphQL replaces Redux, REST and GraphQL can co-exist and GraphQL is difficult

00:17:14,805 --> 00:17:16,335
to introduce to an existing project.

00:17:16,815 --> 00:17:20,895
GraphQL is only useful for front-end and if the right database writes itself or

00:17:20,895 --> 00:17:22,515
that it requires complicated clients.

00:17:23,035 --> 00:17:27,805
From my personal perspective, I really liked graph QL because I've been

00:17:27,805 --> 00:17:31,675
using it a lot on the front end and now a lot on the back end as well.

00:17:32,155 --> 00:17:36,295
And I think the best thing that it worked for us was that as a

00:17:36,295 --> 00:17:39,685
front end developer GraphQL gives you type definition for free.

00:17:39,925 --> 00:17:43,105
So as a front end developer, I don't need to do the validation of the data.

00:17:43,375 --> 00:17:47,215
So for example, if I say that title is a string, and then if a client

00:17:47,215 --> 00:17:51,625
passes, let's say a number that field automatically throw an error there.

00:17:51,875 --> 00:17:54,815
So as a front-end developer, that reduces the validation that

00:17:54,815 --> 00:17:56,885
I need to do on clients' data.

00:17:58,510 --> 00:18:01,710
And at PayPal, one of the great things about introducing GraphQL

00:18:01,730 --> 00:18:05,240
was that it brought our front end and backend teams together because

00:18:05,240 --> 00:18:06,770
we have to establish a schema.

00:18:06,770 --> 00:18:10,670
At the beginning of the project itself, we sat down together and we

00:18:10,670 --> 00:18:12,440
discussed all the fields that we need.

00:18:12,500 --> 00:18:17,240
And our schema was then driven by our UI instead of being driven by

00:18:17,510 --> 00:18:21,440
what data we need to send, like blindly sending that data back.

00:18:21,890 --> 00:18:25,470
So it brought an increase in the collaborations between our team and it

00:18:25,470 --> 00:18:29,100
brought the teams together because we set up a contract in the beginning itself.

00:18:29,400 --> 00:18:32,520
And then that also helped us to independently work and intelligently

00:18:32,520 --> 00:18:36,390
work on our APIs on our front end and backend bit independently.

00:18:37,620 --> 00:18:41,700
Another cool thing about graph QL of introducing it on the backend was that it

00:18:41,760 --> 00:18:47,475
gave us powerful instrumentation of the data and specifically, to a field level.

00:18:47,655 --> 00:18:51,465
So the data is super granular and that helped us understand which fields

00:18:51,465 --> 00:18:54,525
were being used so that the fields that were not being used, you could

00:18:54,945 --> 00:18:56,475
intelligently that depricate them.

00:18:56,835 --> 00:19:00,795
And the amazing thing about graph QL is that because you're only getting

00:19:00,795 --> 00:19:05,280
back the fields that you asked for, it helps to reduce, over fetching

00:19:05,280 --> 00:19:07,620
of data and under fetching of data.

00:19:07,620 --> 00:19:10,990
Over fetching of data means that you're getting too much fields and

00:19:10,990 --> 00:19:14,010
under fetching means that you didn't get the field that you needed.

00:19:14,220 --> 00:19:15,780
So you have to make another request.

00:19:15,990 --> 00:19:19,320
And because with GraphQL you only can ask for everything that you need in one

00:19:19,320 --> 00:19:21,510
go, you don't have to do multiple routes.

00:19:21,860 --> 00:19:27,200
And an amazing thing about GraphQl was that because this is one and we can keep

00:19:27,230 --> 00:19:29,270
pushing updates as often as we need to.

00:19:29,270 --> 00:19:33,350
And we don't have to worry about increasing, the versions or changing

00:19:33,350 --> 00:19:38,030
versions or deprecating versions, or like introducing breaking changes.

00:19:38,465 --> 00:19:42,815
So if you like GraphQL, and you want to get started with graph QL, here are some

00:19:42,815 --> 00:19:45,455
common place to places to get started.

00:19:45,845 --> 00:19:51,725
I think now is the GraphQL docs, official docs itself, which is on GraphQL.org.

00:19:52,702 --> 00:19:59,640
It has it has a list of FAQ's as well, which is really amazing for a

00:19:59,640 --> 00:20:01,341
followup of the Sprocket for interested.

00:20:02,354 --> 00:20:03,180
Apollo docs.

00:20:03,270 --> 00:20:07,450
Apollo is actually one of the libraries that is used for implementing GraphQl

00:20:07,770 --> 00:20:09,150
on the front end on the backend.

00:20:09,210 --> 00:20:10,860
Apollo has amazing docs as well.

00:20:11,280 --> 00:20:15,840
And then Prisma has the docs, which is like a quiz based approach of learning

00:20:15,840 --> 00:20:18,000
GraphQL which I found really helpful.

00:20:18,000 --> 00:20:19,980
It's on howtographql.com.

00:20:20,745 --> 00:20:24,765
When we were introducing GraphQL to our teams at PayPal the first

00:20:24,765 --> 00:20:27,645
thing we would show them is GraphQL tool, which is this tool here.

00:20:28,695 --> 00:20:33,075
And this is kind of like an interactive, -, of fetch, this was

00:20:33,075 --> 00:20:37,935
really helpful in kind of showing the power of and the dev tools around it.

00:20:38,325 --> 00:20:43,755
So if you're interested in checking out GraphQL, you can find it here on GitHub.

00:20:44,480 --> 00:20:47,600
There's also lots of great tutorials as well.

00:20:48,600 --> 00:20:51,440
Egghead has a lot of good GraphQL resources.

00:20:51,500 --> 00:20:55,310
There's an amazing book by Eve Porcello and Alex Banks on learning GraphQL, which

00:20:55,310 --> 00:20:57,800
is a very good, introduction of graph QL.

00:20:58,010 --> 00:20:59,330
There's also courses on Udemy.

00:20:59,330 --> 00:21:02,240
The specific one that I really like is by Stephen Grider, it's called

00:21:02,240 --> 00:21:06,210
GraphQL with React, and it was very helpful for me to introduce GraphQL

00:21:06,230 --> 00:21:08,150
in my current architecture at PayPal.

00:21:08,465 --> 00:21:11,225
If you're interested in getting started with GraphQL I also written a blog

00:21:11,225 --> 00:21:17,215
post that you can find on my get hub on github.com/shutrikapoor08/blogs.

00:21:18,155 --> 00:21:21,995
And it's an introduction of what is and how it differs

00:21:22,025 --> 00:21:23,465
from rest, things like that.

00:21:24,155 --> 00:21:27,905
So to sum up today, we talked about four things we talked about

00:21:27,905 --> 00:21:29,495
what is GraphQL versus rest.

00:21:29,825 --> 00:21:35,135
The misconceptions, some cool thing that we like of GraphQL at PayPal.

00:21:35,495 --> 00:21:36,575
And how you can get started.

00:21:37,850 --> 00:21:39,230
Before I end the presentation.

00:21:39,260 --> 00:21:44,465
I also want to give a I also wanted to share something that I'm doing today.

00:21:45,710 --> 00:21:49,970
Some of you are maybe aware of the crisis that's going on in India related to COVID.

00:21:50,030 --> 00:21:51,620
The country is breaking down.

00:21:51,650 --> 00:21:52,892
The system is breaking down.

00:21:54,200 --> 00:21:58,790
So I am doing a fundraiser today at 9:00 PM to 11:00 PM PST.

00:21:59,675 --> 00:22:04,625
Which may be tomorrow for you guys on my Twitch, twitch.tv/shutrikapoor, and

00:22:04,625 --> 00:22:10,145
basically I invite you all to donate whatever literally you can to a foundation

00:22:10,835 --> 00:22:13,205
for helping COVID relief in India.

00:22:13,595 --> 00:22:16,055
But also in addition to everything that you'll donate,

00:22:16,085 --> 00:22:18,245
I'll also donate $1 per viewer.

00:22:18,425 --> 00:22:19,925
So I encourage you to join.

00:22:19,955 --> 00:22:21,665
You're helping out just by being there.

00:22:21,965 --> 00:22:24,755
And I want to end the presentation with one file that joke.

00:22:25,625 --> 00:22:26,405
Thank you everybody.

00:22:26,405 --> 00:22:27,965

YouTube URL: https://www.youtube.com/watch?v=DKl9wgmQWyg


