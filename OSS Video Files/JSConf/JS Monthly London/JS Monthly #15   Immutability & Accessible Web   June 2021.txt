Title: JS Monthly #15   Immutability & Accessible Web   June 2021
Publication date: 2021-06-22
Playlist: JS Monthly London
Description: 
	@JSMonthlyLondon
https://www.meetup.com/js-monthly/

Here's the agenda!

- Welcome and community news

- How to prevent the collapse of society by building an accessible web by Salma Alam-Naylor

It’s 2031. Society, as we knew it in 2021, has officially collapsed. Old technology, deprecated hardware and a very slow internet connection is all we have left.

Accessibility on the web is now paramount to the survival of the human race. But how do you ensure your website is accessible amidst a raging apocalypse?

Join whitep4nth3r to explore why only the most accessible and inclusive websites will survive an apocalypse, how you can utilise free tools to ensure you are building for the apocalypse, and why all of this is more important than ever now, in 2021.

Salma helps developers build stuff, learn things and love what they do. Salma currently works as a Developer Evangelist for Contentful and you can find her building stuff and learning things live on Twitch as whitep4nth3r. You will often hear her shouting about inclusivity and accessibility.

- Break

- React Advanced London Announcement

- Records & Tuples: way more than immutability by Sébastien Lorber

Records and Tuples is a stage-2 proposal that brings deeply immutable data structures to JavaScript. But immutability is only one part of the story: their "compound primitives" behaviour could be the most interesting part, and have a way significant impact. Through different examples, we will see how to use them, and what are the benefits for frontend applications and frameworks, in particular ReactJS.

Sébastien is a ReactJS freelancer.
Lately, he works for Facebook as the lead maintainer of Docusaurus, the Jamstack open-source documentation framework used by Jest, React-Native, Relay, Redux, Babel, Prettier and many more.

He became an early adopter of ReactJS in 2014, specialized in techno, and contributed to the growth of its open-source ecosystem. He is passionate about cross-platform development, especially through ReactNative.

Chapters:
00:00 Pre-Roll
4:51 Introduction
12:36 Salma - How to prevent the collapse of society by building an accessible web
37.52 Q&A
01:04:35 Sebastien - Records & Tuples: way more than immutability
01:39:52 Q&A
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,050 --> 00:00:27,510
[Music]

00:00:28,840 --> 00:01:00,130
so

00:00:31,220 --> 00:01:00,130
[Music]

00:01:03,890 --> 00:01:07,290
[Music]

00:01:10,840 --> 00:01:13,840
um

00:01:34,450 --> 00:01:37,499
[Music]

00:01:38,840 --> 00:01:41,840
so

00:01:42,120 --> 00:01:54,970
[Music]

00:01:53,759 --> 00:02:20,840
i

00:01:54,970 --> 00:02:23,840
[Music]

00:02:20,840 --> 00:02:23,840
do

00:02:26,260 --> 00:03:18,650
[Music]

00:03:15,560 --> 00:03:18,650
[Applause]

00:03:18,670 --> 00:03:24,529
[Music]

00:03:30,840 --> 00:03:41,770
foreign

00:03:32,700 --> 00:03:41,770
[Music]

00:03:44,840 --> 00:03:47,840
foreign

00:03:53,120 --> 00:04:13,680
[Music]

00:04:13,760 --> 00:04:15,840
you

00:04:15,900 --> 00:04:40,399
[Music]

00:04:44,930 --> 00:04:53,489
[Music]

00:04:54,840 --> 00:05:01,440
awesome so yeah

00:04:57,520 --> 00:05:04,800
welcome everybody uh it's good to see uh

00:05:01,440 --> 00:05:07,840
a healthy looking crowd for this one i'm

00:05:04,800 --> 00:05:08,320
really excited about it um yeah we have

00:05:07,840 --> 00:05:10,880
two

00:05:08,320 --> 00:05:12,160
awesome speakers this evening so yeah

00:05:10,880 --> 00:05:15,280
i'm really looking forward to

00:05:12,160 --> 00:05:17,120
both talks i will um

00:05:15,280 --> 00:05:20,080
just point out a few other items we've

00:05:17,120 --> 00:05:20,080
got on the agenda

00:05:20,720 --> 00:05:27,520
so yeah i'll um i'll just do a bit of

00:05:24,479 --> 00:05:32,160
industry news um and a little nod

00:05:27,520 --> 00:05:34,800
to our sponsor and then we'll jump into

00:05:32,160 --> 00:05:36,240
salma's talk which is how to prevent the

00:05:34,800 --> 00:05:39,520
collapse of society

00:05:36,240 --> 00:05:42,160
by building an accessible web um which

00:05:39,520 --> 00:05:43,120
is going to be fantastic and we're

00:05:42,160 --> 00:05:45,360
looking forward to that

00:05:43,120 --> 00:05:47,440
and i'm sure you'll all agree we want to

00:05:45,360 --> 00:05:51,199
help prevent the collapse of society

00:05:47,440 --> 00:05:54,479
so um yeah there's gonna be uh

00:05:51,199 --> 00:05:57,680
yeah going to be positive results uh

00:05:54,479 --> 00:05:58,800
from that talk i'm sure in in what we do

00:05:57,680 --> 00:06:02,240
in our work

00:05:58,800 --> 00:06:05,199
uh then we'll have a short break and

00:06:02,240 --> 00:06:06,080
after that i've just got an announcement

00:06:05,199 --> 00:06:08,080
about react

00:06:06,080 --> 00:06:09,680
advance london which is an event taking

00:06:08,080 --> 00:06:11,360
place later this year

00:06:09,680 --> 00:06:13,120
and it's actually more than just an

00:06:11,360 --> 00:06:16,319
announcement um i actually have

00:06:13,120 --> 00:06:19,520
two tickets to give away um

00:06:16,319 --> 00:06:22,880
so yes there's going to be a a

00:06:19,520 --> 00:06:26,240
yeah a competition and a chance to

00:06:22,880 --> 00:06:26,880
win one of those two tickets for each of

00:06:26,240 --> 00:06:29,360
you

00:06:26,880 --> 00:06:30,800
and then we'll have our final talk

00:06:29,360 --> 00:06:33,759
records and topples

00:06:30,800 --> 00:06:36,080
way more than immutability by sebastian

00:06:33,759 --> 00:06:38,000
who's joining us shortly

00:06:36,080 --> 00:06:39,120
and as i said earlier there'll be a q a

00:06:38,000 --> 00:06:42,160
at the end of both

00:06:39,120 --> 00:06:44,720
of those talks

00:06:42,160 --> 00:06:45,600
uh so yes i said that we would um

00:06:44,720 --> 00:06:48,160
acknowledge our

00:06:45,600 --> 00:06:48,880
sponsor pusher who've been spottering us

00:06:48,160 --> 00:06:52,000
for years

00:06:48,880 --> 00:06:52,400
and uh alex who you can probably see on

00:06:52,000 --> 00:06:55,280
this

00:06:52,400 --> 00:06:56,080
call is um yeah has been amazing in

00:06:55,280 --> 00:06:59,520
helping us

00:06:56,080 --> 00:07:01,919
um yeah both organize the events that we

00:06:59,520 --> 00:07:03,919
had in physical spaces and filming them

00:07:01,919 --> 00:07:07,120
and putting them on youtube

00:07:03,919 --> 00:07:11,039
and in more recent times um

00:07:07,120 --> 00:07:13,759
setting up the the zoom for us and

00:07:11,039 --> 00:07:15,360
publishing on youtube streaming on

00:07:13,759 --> 00:07:17,599
youtube and then

00:07:15,360 --> 00:07:19,599
publishing the videos afterwards uh for

00:07:17,599 --> 00:07:23,199
people to catch up on in their own time

00:07:19,599 --> 00:07:26,240
um so what is pusher um well hopefully

00:07:23,199 --> 00:07:29,440
you're gathering from this um

00:07:26,240 --> 00:07:32,800
text that it's a a service which

00:07:29,440 --> 00:07:35,840
offers um real-time capabilities things

00:07:32,800 --> 00:07:39,280
like um real-time location charts

00:07:35,840 --> 00:07:42,639
present indicators notifications uh

00:07:39,280 --> 00:07:43,199
chat apps and and you know and many more

00:07:42,639 --> 00:07:45,360
things so

00:07:43,199 --> 00:07:46,639
lots of different uses for it um super

00:07:45,360 --> 00:07:50,000
powerful tool

00:07:46,639 --> 00:07:52,520
please do take a look at it um yeah

00:07:50,000 --> 00:07:53,919
as you probably guessed their website is

00:07:52,520 --> 00:07:56,400
pushy.com

00:07:53,919 --> 00:07:58,560
so yeah please check them out um and uh

00:07:56,400 --> 00:07:59,039
alex pass on my thanks to the rest of

00:07:58,560 --> 00:08:01,360
the

00:07:59,039 --> 00:08:04,080
rest of the pusher crew uh for

00:08:01,360 --> 00:08:04,080
supporting us

00:08:04,479 --> 00:08:08,479
um so yeah just a little bit of industry

00:08:06,479 --> 00:08:10,479
news i'm gonna keep this one a little

00:08:08,479 --> 00:08:13,120
bit more brief than usual because

00:08:10,479 --> 00:08:13,759
i'm keen for us to get into the talks

00:08:13,120 --> 00:08:16,479
but

00:08:13,759 --> 00:08:16,879
uh yeah i quite liked the look of this

00:08:16,479 --> 00:08:20,400
um

00:08:16,879 --> 00:08:23,599
announcement recently from uh the

00:08:20,400 --> 00:08:26,879
chrome team they have introduced

00:08:23,599 --> 00:08:30,080
an array buffer inspector into

00:08:26,879 --> 00:08:31,759
the dev tools uh so yeah previously you

00:08:30,080 --> 00:08:35,039
weren't able to actually

00:08:31,759 --> 00:08:37,279
um see the details of the

00:08:35,039 --> 00:08:39,120
array buffer itself uh you had to kind

00:08:37,279 --> 00:08:42,240
of painstakingly

00:08:39,120 --> 00:08:44,560
open each of the individual arrays

00:08:42,240 --> 00:08:45,440
uh when you when you'd um set a

00:08:44,560 --> 00:08:47,440
breakpoint

00:08:45,440 --> 00:08:48,560
uh whereas now you actually have this

00:08:47,440 --> 00:08:50,320
really lovely

00:08:48,560 --> 00:08:51,920
uh display at the bottom where you can

00:08:50,320 --> 00:08:53,519
make your way through

00:08:51,920 --> 00:08:55,120
each of the items in the array and

00:08:53,519 --> 00:08:56,640
actually see what it maps to in this

00:08:55,120 --> 00:08:57,839
example obviously we have some text

00:08:56,640 --> 00:09:01,120
saying this is

00:08:57,839 --> 00:09:02,240
an array buffer um and yeah you can

00:09:01,120 --> 00:09:05,279
actually play around

00:09:02,240 --> 00:09:08,480
um with the um

00:09:05,279 --> 00:09:10,959
the the different bit sizes um uh

00:09:08,480 --> 00:09:12,720
yeah super powerful tool i had a very

00:09:10,959 --> 00:09:15,519
brief play with it myself and

00:09:12,720 --> 00:09:16,160
uh yeah another really welcome addition

00:09:15,519 --> 00:09:19,279
to

00:09:16,160 --> 00:09:22,560
what is now a pretty huge arsenal of

00:09:19,279 --> 00:09:24,080
tools inside uh the inspector so

00:09:22,560 --> 00:09:26,640
yeah check it out if you haven't seen it

00:09:24,080 --> 00:09:29,200
already um

00:09:26,640 --> 00:09:30,320
yeah this article uh something i wrote

00:09:29,200 --> 00:09:32,560
recently

00:09:30,320 --> 00:09:33,440
um i just thought it'd make some of you

00:09:32,560 --> 00:09:36,399
aware of

00:09:33,440 --> 00:09:38,560
um it's about unit test in different

00:09:36,399 --> 00:09:41,760
modular javascript patterns

00:09:38,560 --> 00:09:44,880
uh i encountered a couple of really

00:09:41,760 --> 00:09:46,720
um unexpected challenges um over the

00:09:44,880 --> 00:09:48,000
last few years some of you may have

00:09:46,720 --> 00:09:49,680
encountered this and have your own

00:09:48,000 --> 00:09:51,519
solutions for it already

00:09:49,680 --> 00:09:53,760
but i wrote an article about it just to

00:09:51,519 --> 00:09:54,800
um summarize i guess the two primary

00:09:53,760 --> 00:09:56,959
problems i've encountered

00:09:54,800 --> 00:09:58,240
one of which is about using stubs and

00:09:56,959 --> 00:10:01,120
spies with

00:09:58,240 --> 00:10:02,959
um es6 modules which compile to common

00:10:01,120 --> 00:10:05,920
js which i guess is the most common

00:10:02,959 --> 00:10:09,200
pattern that we've all encountered

00:10:05,920 --> 00:10:11,440
when you call one function

00:10:09,200 --> 00:10:13,200
uh in another that's in the same module

00:10:11,440 --> 00:10:15,440
um spying on it

00:10:13,200 --> 00:10:17,040
can be tricky or you you know you can

00:10:15,440 --> 00:10:18,079
encounter errors

00:10:17,040 --> 00:10:19,120
and that's because of the way it

00:10:18,079 --> 00:10:20,160
compiles so there's a thorough

00:10:19,120 --> 00:10:21,839
explanation

00:10:20,160 --> 00:10:23,600
and various solutions i've put in an

00:10:21,839 --> 00:10:25,600
article and then the second one

00:10:23,600 --> 00:10:27,760
um is that actually if you're using

00:10:25,600 --> 00:10:29,839
native es modules and now they're fairly

00:10:27,760 --> 00:10:32,240
widely supported they're

00:10:29,839 --> 00:10:34,320
hopefully being adopted more and more um

00:10:32,240 --> 00:10:38,000
yeah you'll encounter certain issues

00:10:34,320 --> 00:10:41,279
or certain challenges uh using spies

00:10:38,000 --> 00:10:44,079
and stubs um because of the way

00:10:41,279 --> 00:10:45,600
es modules work out of the box so yeah

00:10:44,079 --> 00:10:46,640
again an explanation of the problem

00:10:45,600 --> 00:10:49,279
there and some

00:10:46,640 --> 00:10:51,279
solutions so i'll post the link in the

00:10:49,279 --> 00:10:54,640
chat afterwards

00:10:51,279 --> 00:10:55,200
and then finally um voice search with

00:10:54,640 --> 00:10:58,880
react

00:10:55,200 --> 00:11:00,320
was a project i came across recently

00:10:58,880 --> 00:11:02,399
on site point that i thought i would

00:11:00,320 --> 00:11:04,160
just share um so not really industry

00:11:02,399 --> 00:11:05,920
news but a really fun thing to play

00:11:04,160 --> 00:11:08,079
around with so it uses the speech

00:11:05,920 --> 00:11:11,120
recognition api which is really new

00:11:08,079 --> 00:11:14,240
um but really exciting so basically

00:11:11,120 --> 00:11:15,920
you know voice as um data input to web

00:11:14,240 --> 00:11:19,519
application is pretty cool

00:11:15,920 --> 00:11:20,640
new feature um this demo uses react and

00:11:19,519 --> 00:11:23,920
it uses a hook

00:11:20,640 --> 00:11:27,120
um for the input and for the data

00:11:23,920 --> 00:11:30,240
in the demo which is about a book search

00:11:27,120 --> 00:11:31,680
uh he uses open library um so yeah check

00:11:30,240 --> 00:11:33,360
it out it's really really nice i mean i

00:11:31,680 --> 00:11:36,079
basically just asked for

00:11:33,360 --> 00:11:37,920
um yeah books by tim winston and it

00:11:36,079 --> 00:11:40,800
listed you know his entire

00:11:37,920 --> 00:11:41,120
um back catalogue so yeah really really

00:11:40,800 --> 00:11:42,800
fun

00:11:41,120 --> 00:11:45,040
the link's down there but i'll post it

00:11:42,800 --> 00:11:47,440
in the chat afterwards

00:11:45,040 --> 00:11:49,600
so have fun with that one um yeah please

00:11:47,440 --> 00:11:52,959
do follow us if you don't already

00:11:49,600 --> 00:11:56,399
so uh yeah find us on twitter js

00:11:52,959 --> 00:11:59,760
monthly london or one word and um

00:11:56,399 --> 00:12:01,760
yeah if you want to tweet during the

00:11:59,760 --> 00:12:03,040
uh the talks please do so i'll try and

00:12:01,760 --> 00:12:06,560
keep an eye on the feed

00:12:03,040 --> 00:12:10,800
um time for us to jump into our first

00:12:06,560 --> 00:12:12,560
talk so we have selma

00:12:10,800 --> 00:12:14,079
who's going to talk to us about how to

00:12:12,560 --> 00:12:16,720
prevent the collapse of society by

00:12:14,079 --> 00:12:25,839
building an accessible web

00:12:16,720 --> 00:12:25,839
over to you selma hello everybody

00:12:27,240 --> 00:12:36,190
[Music]

00:12:39,360 --> 00:12:45,839
how to prevent the collapse of society

00:12:42,079 --> 00:12:45,839
by building an accessible web

00:12:46,000 --> 00:12:53,839
my clicker has just stopped working

00:12:50,639 --> 00:12:55,200
right hi friends i'm salma i help

00:12:53,839 --> 00:12:58,000
developers build stuff

00:12:55,200 --> 00:12:59,360
learn things and love what they do if

00:12:58,000 --> 00:13:01,360
you've seen me on the internet already

00:12:59,360 --> 00:13:04,560
you might know me as white panther or

00:13:01,360 --> 00:13:05,600
white p4 and 3r if you use a screen

00:13:04,560 --> 00:13:07,519
reader

00:13:05,600 --> 00:13:08,880
i am a developer evangelist for

00:13:07,519 --> 00:13:10,480
contentful

00:13:08,880 --> 00:13:12,160
and if you've never heard of contentful

00:13:10,480 --> 00:13:15,200
it's a headless cms

00:13:12,160 --> 00:13:16,959
with a rest api graphql api generous

00:13:15,200 --> 00:13:20,079
free community plan limits

00:13:16,959 --> 00:13:23,760
and some great cli tooling and other

00:13:20,079 --> 00:13:26,639
packages to help you build great stuff

00:13:23,760 --> 00:13:28,959
stephen hawking said i believe that life

00:13:26,639 --> 00:13:30,160
on earth is at an ever increasing risk

00:13:28,959 --> 00:13:33,440
of being wiped out

00:13:30,160 --> 00:13:36,079
by a disaster such as a sudden nuclear

00:13:33,440 --> 00:13:36,720
war or genetically engineered virus or

00:13:36,079 --> 00:13:41,279
other

00:13:36,720 --> 00:13:45,440
dangers why does it keep not working

00:13:41,279 --> 00:13:48,720
it's 2031 the apocalypse has

00:13:45,440 --> 00:13:49,120
arrived the internet is running on a

00:13:48,720 --> 00:13:52,240
slow

00:13:49,120 --> 00:13:55,279
3g connection and display screens

00:13:52,240 --> 00:13:58,399
are broken and this

00:13:55,279 --> 00:14:01,839
is what people are now googling for

00:13:58,399 --> 00:14:03,680
how to build a fallout

00:14:01,839 --> 00:14:05,600
and accessibility on the web is

00:14:03,680 --> 00:14:07,120
paramount to the survival of the human

00:14:05,600 --> 00:14:09,040
race

00:14:07,120 --> 00:14:11,440
so how do we prepare the web for the

00:14:09,040 --> 00:14:15,279
apocalypse of 2031

00:14:11,440 --> 00:14:17,839
and why is this important now

00:14:15,279 --> 00:14:18,399
let's first talk about accessibility for

00:14:17,839 --> 00:14:21,920
slow

00:14:18,399 --> 00:14:22,800
connections there are almost 2 billion

00:14:21,920 --> 00:14:26,320
websites

00:14:22,800 --> 00:14:27,040
in the world and 95 of those websites

00:14:26,320 --> 00:14:30,160
use

00:14:27,040 --> 00:14:32,240
javascript and so why is this bad news

00:14:30,160 --> 00:14:35,399
for the apocalypse

00:14:32,240 --> 00:14:36,880
let's take a look at the network tab of

00:14:35,399 --> 00:14:39,920
mobile.twitter.com

00:14:36,880 --> 00:14:41,480
on the first request it loads 37

00:14:39,920 --> 00:14:45,519
javascript files worth

00:14:41,480 --> 00:14:48,639
1.44 megabytes compressed 27 other files

00:14:45,519 --> 00:14:50,880
and nine image files

00:14:48,639 --> 00:14:53,040
if we look at lighthouse dev tools we'll

00:14:50,880 --> 00:14:56,880
see that the time to interactive

00:14:53,040 --> 00:14:59,199
is 5.8 seconds and the original trace of

00:14:56,880 --> 00:15:02,480
the page you see absolutely nothing

00:14:59,199 --> 00:15:04,560
on that first load that's a lot of

00:15:02,480 --> 00:15:07,519
requests for javascript

00:15:04,560 --> 00:15:09,279
and they're pretty expensive it takes

00:15:07,519 --> 00:15:13,240
time to load

00:15:09,279 --> 00:15:15,040
plus it might fail here's a tweet from

00:15:13,240 --> 00:15:17,360
00:15:15,040 --> 00:15:19,040
where our monitoring tells us that

00:15:17,360 --> 00:15:20,560
around one percent of requests for

00:15:19,040 --> 00:15:23,040
javascript on buzzfeed

00:15:20,560 --> 00:15:25,760
time out and that's around 13 million

00:15:23,040 --> 00:15:29,120
requests per month

00:15:25,760 --> 00:15:32,959
that's 156 million failed requests for

00:15:29,120 --> 00:15:35,360
javascript each year for buzzfeed alone

00:15:32,959 --> 00:15:37,199
and that's potentially that many failed

00:15:35,360 --> 00:15:41,120
javascript requests on the web

00:15:37,199 --> 00:15:42,240
each year assuming that all websites

00:15:41,120 --> 00:15:45,759
that use js

00:15:42,240 --> 00:15:48,240
have the same traffic as buzzfeed

00:15:45,759 --> 00:15:49,279
in the apocalypse time to interactive is

00:15:48,240 --> 00:15:52,399
the difference between

00:15:49,279 --> 00:15:54,000
life and death people need to know how

00:15:52,399 --> 00:15:56,880
to fight off those zombies

00:15:54,000 --> 00:15:59,759
as quickly as possible so how can we

00:15:56,880 --> 00:16:03,279
serve critical content faster

00:15:59,759 --> 00:16:06,160
do we abandon javascript

00:16:03,279 --> 00:16:07,519
the jam stack has gone some way to try

00:16:06,160 --> 00:16:09,040
and solve this problem

00:16:07,519 --> 00:16:10,720
the jam stack is an architecture

00:16:09,040 --> 00:16:11,519
designed to make the web faster more

00:16:10,720 --> 00:16:15,199
secure

00:16:11,519 --> 00:16:16,880
and easier to scale the key

00:16:15,199 --> 00:16:18,880
feature of the jam stack is

00:16:16,880 --> 00:16:19,680
pre-rendering where the entire front end

00:16:18,880 --> 00:16:21,680
is pre-built

00:16:19,680 --> 00:16:23,600
into highly optimized static pages and

00:16:21,680 --> 00:16:25,920
assets during a build process

00:16:23,600 --> 00:16:27,199
and then enhanced with javascript you

00:16:25,920 --> 00:16:29,360
might have heard of some of the most

00:16:27,199 --> 00:16:31,839
popular static site generators

00:16:29,360 --> 00:16:33,040
nox js which uses vue universal which

00:16:31,839 --> 00:16:36,560
uses angular

00:16:33,040 --> 00:16:39,600
and next js which uses react

00:16:36,560 --> 00:16:43,040
but does modern jam stack really solve

00:16:39,600 --> 00:16:45,920
this problem that we saw with twitter

00:16:43,040 --> 00:16:46,399
here's my website and the network tab

00:16:45,920 --> 00:16:50,160
it's

00:16:46,399 --> 00:16:52,880
built with next js and hosted on versel

00:16:50,160 --> 00:16:54,000
on a normal load of this site in a

00:16:52,880 --> 00:16:56,639
browser

00:16:54,000 --> 00:16:59,440
it loads more than 30 javascript files

00:16:56,639 --> 00:16:59,440
on the client

00:16:59,519 --> 00:17:04,000
the first document to load is the html

00:17:02,839 --> 00:17:07,280
document

00:17:04,000 --> 00:17:09,120
but why do we need all that javascript

00:17:07,280 --> 00:17:11,839
when the document has already loaded

00:17:09,120 --> 00:17:13,520
and the jam stack is telling us that our

00:17:11,839 --> 00:17:15,039
pages are pre-rendered and served

00:17:13,520 --> 00:17:17,360
statically

00:17:15,039 --> 00:17:18,240
let's do an experiment and let's turn

00:17:17,360 --> 00:17:22,079
off javascript

00:17:18,240 --> 00:17:23,600
on my website here it is

00:17:22,079 --> 00:17:26,079
you can see the blocked requests in the

00:17:23,600 --> 00:17:28,480
network tab javascript is disabled

00:17:26,079 --> 00:17:30,160
but as you can see it still loads it

00:17:28,480 --> 00:17:32,799
still works

00:17:30,160 --> 00:17:35,760
let's compare this site with javascript

00:17:32,799 --> 00:17:38,559
disabled and javascript enabled

00:17:35,760 --> 00:17:39,280
the load time for the javascript

00:17:38,559 --> 00:17:43,520
disabled

00:17:39,280 --> 00:17:44,559
site is 259 milliseconds compared to 793

00:17:43,520 --> 00:17:47,280
milliseconds

00:17:44,559 --> 00:17:49,360
and that is on a normal speedy

00:17:47,280 --> 00:17:52,000
connection in the uk

00:17:49,360 --> 00:17:53,200
what if we switched that to slow 3g

00:17:52,000 --> 00:17:56,160
which the apocalypse

00:17:53,200 --> 00:17:56,880
will be using the load times are

00:17:56,160 --> 00:17:59,760
incredibly

00:17:56,880 --> 00:18:00,400
different without javascript 8.67

00:17:59,760 --> 00:18:05,600
seconds

00:18:00,400 --> 00:18:05,600
and with javascript over 25 seconds

00:18:05,679 --> 00:18:09,440
and the sizes of these pages are

00:18:08,000 --> 00:18:12,840
phenomenally different

00:18:09,440 --> 00:18:14,480
300 kilobytes for no javascript versus

00:18:12,840 --> 00:18:17,600
1.4 megabytes

00:18:14,480 --> 00:18:20,880
using javascript and that's on compress

00:18:17,600 --> 00:18:21,520
that's compressed the uncompressed sizes

00:18:20,880 --> 00:18:25,440
are even

00:18:21,520 --> 00:18:27,280
more greater indifference 3.6 megabytes

00:18:25,440 --> 00:18:30,960
to load the same site

00:18:27,280 --> 00:18:34,400
with javascript enabled i did another

00:18:30,960 --> 00:18:37,840
experiment to test this theory

00:18:34,400 --> 00:18:41,039
i wanted to see how

00:18:37,840 --> 00:18:43,760
low we can get the size of the page

00:18:41,039 --> 00:18:44,559
and the load time of the page without

00:18:43,760 --> 00:18:46,559
javascript

00:18:44,559 --> 00:18:48,720
so the first thing is i recreated my

00:18:46,559 --> 00:18:49,360
blog article list fetching data at build

00:18:48,720 --> 00:18:52,480
time

00:18:49,360 --> 00:18:53,600
statically generated on next.js 105

00:18:52,480 --> 00:18:57,120
kilobytes loaded

00:18:53,600 --> 00:18:59,520
in just under 5 seconds

00:18:57,120 --> 00:19:01,039
i created the same page but loaded all

00:18:59,520 --> 00:19:02,480
the data on the client without

00:19:01,039 --> 00:19:04,400
javascript

00:19:02,480 --> 00:19:06,880
we obviously get no content because

00:19:04,400 --> 00:19:09,520
there's no javascript to load it

00:19:06,880 --> 00:19:10,480
and it's only slightly less than 92.7

00:19:09,520 --> 00:19:14,400
kilobytes

00:19:10,480 --> 00:19:16,240
loads in just about five seconds again

00:19:14,400 --> 00:19:18,080
so what if we could turn this into a

00:19:16,240 --> 00:19:22,080
static html page

00:19:18,080 --> 00:19:24,880
no framework html and css no javascript

00:19:22,080 --> 00:19:26,559
100 kilobytes 4.71 seconds so what's

00:19:24,880 --> 00:19:29,280
very interesting

00:19:26,559 --> 00:19:30,000
is that the statically generated next.js

00:19:29,280 --> 00:19:32,320
version

00:19:30,000 --> 00:19:34,960
is actually very very comparable to my

00:19:32,320 --> 00:19:36,720
static html page

00:19:34,960 --> 00:19:38,960
although my static html page does kind

00:19:36,720 --> 00:19:40,559
of win

00:19:38,960 --> 00:19:42,080
so these jobs like frameworks are pretty

00:19:40,559 --> 00:19:43,760
good

00:19:42,080 --> 00:19:45,440
and so in terms of accessibility for

00:19:43,760 --> 00:19:47,280
slow connections

00:19:45,440 --> 00:19:48,799
you can remove as much javascript as

00:19:47,280 --> 00:19:51,840
possible harness these

00:19:48,799 --> 00:19:52,480
jam stack frameworks but always use your

00:19:51,840 --> 00:19:55,200
judgment

00:19:52,480 --> 00:19:58,320
i was still able to get the load time

00:19:55,200 --> 00:19:58,320
and the page weight down

00:19:58,480 --> 00:20:01,520
so what i recommend for accessibility

00:20:00,080 --> 00:20:03,760
for slow connections

00:20:01,520 --> 00:20:05,280
websites must work without javascript in

00:20:03,760 --> 00:20:07,679
the apocalypse

00:20:05,280 --> 00:20:08,880
decrease your load time decrease your

00:20:07,679 --> 00:20:10,240
page weight

00:20:08,880 --> 00:20:11,760
because there is no progressive

00:20:10,240 --> 00:20:12,640
enhancement in the apocalypse there's

00:20:11,760 --> 00:20:18,080
just simply

00:20:12,640 --> 00:20:20,960
no time accessibility for broken screens

00:20:18,080 --> 00:20:21,919
in the apocalypse screens are broken

00:20:20,960 --> 00:20:25,360
everything

00:20:21,919 --> 00:20:27,200
is a wasteland you don't see fancy

00:20:25,360 --> 00:20:30,960
website designs and animations

00:20:27,200 --> 00:20:32,640
anymore there are almost 2 billion

00:20:30,960 --> 00:20:37,679
websites in the world

00:20:32,640 --> 00:20:39,200
and 96 of those websites use css

00:20:37,679 --> 00:20:41,320
and why is this bad news for the

00:20:39,200 --> 00:20:44,000
apocalypse

00:20:41,320 --> 00:20:46,640
developers.google.com tells us

00:20:44,000 --> 00:20:48,159
that by default css is treated as a

00:20:46,640 --> 00:20:50,080
render blocking resource

00:20:48,159 --> 00:20:51,679
meaning that the browser won't render

00:20:50,080 --> 00:20:53,679
any process content

00:20:51,679 --> 00:20:55,120
until the css object model is

00:20:53,679 --> 00:20:57,280
constructed

00:20:55,120 --> 00:20:58,480
this page recommends that we keep our

00:20:57,280 --> 00:21:00,720
css lean

00:20:58,480 --> 00:21:02,799
deliver it as quickly as possible and

00:21:00,720 --> 00:21:04,640
use media types and queries to unblock

00:21:02,799 --> 00:21:07,440
rendering

00:21:04,640 --> 00:21:08,159
i say in the apocalypse let's not do

00:21:07,440 --> 00:21:10,080
that

00:21:08,159 --> 00:21:11,200
because in the apocalypse time to

00:21:10,080 --> 00:21:15,039
interactive

00:21:11,200 --> 00:21:17,679
is the difference between life and death

00:21:15,039 --> 00:21:18,799
how can we serve critical content faster

00:21:17,679 --> 00:21:22,640
do we also

00:21:18,799 --> 00:21:24,799
abandon css you might have noticed

00:21:22,640 --> 00:21:27,600
i like tattoos there's a big saying in

00:21:24,799 --> 00:21:31,840
the tattoo industry go big or go home

00:21:27,600 --> 00:21:34,080
in this case i say go small or go die

00:21:31,840 --> 00:21:36,559
so let's take that static html page and

00:21:34,080 --> 00:21:39,760
make it as small as possible

00:21:36,559 --> 00:21:43,039
let's remove all css and class names

00:21:39,760 --> 00:21:45,760
every byte counts let's remove

00:21:43,039 --> 00:21:48,480
useless font imports we can't see them

00:21:45,760 --> 00:21:51,600
on broken screens

00:21:48,480 --> 00:21:53,039
let's remove svgs we don't need those

00:21:51,600 --> 00:21:56,080
bytes

00:21:53,039 --> 00:21:58,559
let's turn these links into just really

00:21:56,080 --> 00:22:01,120
simple links that don't even need any

00:21:58,559 --> 00:22:03,520
aria labels or anything like that

00:22:01,120 --> 00:22:05,039
and a little trick i found as well i'm

00:22:03,520 --> 00:22:06,480
going to replace the favicon with the

00:22:05,039 --> 00:22:09,039
sneaky zero killer

00:22:06,480 --> 00:22:10,320
pipe favicon you might notice that in

00:22:09,039 --> 00:22:12,159
the network tab

00:22:10,320 --> 00:22:14,799
if you don't have a favicon on your site

00:22:12,159 --> 00:22:17,440
the browser will throw a 404

00:22:14,799 --> 00:22:19,280
i found a little way to make a base64

00:22:17,440 --> 00:22:22,400
encoded string

00:22:19,280 --> 00:22:23,200
masquerade as a favicon it's zero

00:22:22,400 --> 00:22:25,440
kilobytes

00:22:23,200 --> 00:22:27,200
we just put that string into our head

00:22:25,440 --> 00:22:30,000
and there we go

00:22:27,200 --> 00:22:31,760
so here's what my page looks like now it

00:22:30,000 --> 00:22:32,240
actually looks pretty well laid out

00:22:31,760 --> 00:22:35,840
we've got

00:22:32,240 --> 00:22:37,600
links we've got sections we've got lists

00:22:35,840 --> 00:22:40,159
and it actually looks very much like

00:22:37,600 --> 00:22:43,120
this very iconic website

00:22:40,159 --> 00:22:44,640
it's lightweight it's responsive and it

00:22:43,120 --> 00:22:48,240
just works

00:22:44,640 --> 00:22:50,240
so how does my no css page compare to my

00:22:48,240 --> 00:22:53,919
html

00:22:50,240 --> 00:22:56,000
with css so here we go 100 kilobytes

00:22:53,919 --> 00:22:59,520
versus 4.6 kilobytes

00:22:56,000 --> 00:23:02,880
and on slow 3g 4.7 seconds

00:22:59,520 --> 00:23:05,280
versus 2.1 and if we look

00:23:02,880 --> 00:23:06,320
at the lighthouse performance on web dev

00:23:05,280 --> 00:23:09,600
measure

00:23:06,320 --> 00:23:11,679
everything is 100 that's going to rank

00:23:09,600 --> 00:23:14,720
really well in google search results and

00:23:11,679 --> 00:23:18,080
we're going to get to that later

00:23:14,720 --> 00:23:21,200
so in 2021 webaim surveyed 1 million

00:23:18,080 --> 00:23:23,919
home pages for accessibility

00:23:21,200 --> 00:23:25,840
and across those 1 million home pages

00:23:23,919 --> 00:23:28,960
over 51 million

00:23:25,840 --> 00:23:32,320
distinct errors were detected

00:23:28,960 --> 00:23:34,320
that's an average of 51.4 errors per

00:23:32,320 --> 00:23:36,000
page

00:23:34,320 --> 00:23:37,520
so what's going wrong it seems pretty

00:23:36,000 --> 00:23:40,880
broken

00:23:37,520 --> 00:23:43,919
here's a breakdown of the most common

00:23:40,880 --> 00:23:45,200
failures from this report and let's look

00:23:43,919 --> 00:23:47,840
at these one by one

00:23:45,200 --> 00:23:48,440
and see what's going on low contrast

00:23:47,840 --> 00:23:51,600
text

00:23:48,440 --> 00:23:52,960
86.4 of home pages and what's that

00:23:51,600 --> 00:23:54,880
caused by

00:23:52,960 --> 00:23:56,480
css and we already know we're going to

00:23:54,880 --> 00:23:57,039
abandon that but let's have a look i

00:23:56,480 --> 00:24:00,000
looked at

00:23:57,039 --> 00:24:00,480
uh some of the top 50 websites in the

00:24:00,000 --> 00:24:02,640
world

00:24:00,480 --> 00:24:05,120
to try and find these errors and they

00:24:02,640 --> 00:24:08,720
were present on quite a few of them

00:24:05,120 --> 00:24:10,799
we've got youtube.com and this

00:24:08,720 --> 00:24:12,080
violation appears in the little

00:24:10,799 --> 00:24:14,559
copyright

00:24:12,080 --> 00:24:15,360
disclaimer on the sidebar now you may

00:24:14,559 --> 00:24:17,760
think

00:24:15,360 --> 00:24:19,840
this doesn't matter really but let's

00:24:17,760 --> 00:24:23,520
have a look we've got the

00:24:19,840 --> 00:24:24,480
html here and the color contrast error

00:24:23,520 --> 00:24:27,039
is caused by

00:24:24,480 --> 00:24:28,159
this css rule the background and the

00:24:27,039 --> 00:24:31,919
foreground colors

00:24:28,159 --> 00:24:33,679
do not offer an accessible solution

00:24:31,919 --> 00:24:35,279
using one of my favorite color contrast

00:24:33,679 --> 00:24:36,559
checker tools actually built by an

00:24:35,279 --> 00:24:38,880
ex-colleague of mine

00:24:36,559 --> 00:24:40,640
and you can see here that on three out

00:24:38,880 --> 00:24:44,640
of four of the

00:24:40,640 --> 00:24:47,360
criteria that color contrast fails

00:24:44,640 --> 00:24:50,000
if we remove css we don't even need to

00:24:47,360 --> 00:24:52,320
think about this

00:24:50,000 --> 00:24:54,159
next missing alternative text for images

00:24:52,320 --> 00:24:57,600
on 60.6

00:24:54,159 --> 00:25:00,720
of homepages now what's this caused by

00:24:57,600 --> 00:25:02,080
directly in the html now you're going to

00:25:00,720 --> 00:25:05,200
see a running theme

00:25:02,080 --> 00:25:06,799
as i uh look through all of this these

00:25:05,200 --> 00:25:08,320
failures and we're going to start going

00:25:06,799 --> 00:25:11,520
with aliexpress

00:25:08,320 --> 00:25:12,559
now on aliexpress there is a rotating

00:25:11,520 --> 00:25:14,799
carousel

00:25:12,559 --> 00:25:17,520
on their home page full of lots and lots

00:25:14,799 --> 00:25:19,279
of images and links

00:25:17,520 --> 00:25:21,200
if we look at the accessibility tree in

00:25:19,279 --> 00:25:21,840
chromium dev tools you'll see that it's

00:25:21,200 --> 00:25:24,880
just div

00:25:21,840 --> 00:25:27,600
they've developed image

00:25:24,880 --> 00:25:30,159
and you get no supporting information in

00:25:27,600 --> 00:25:33,279
that accessibility tree

00:25:30,159 --> 00:25:35,520
here's the html div div

00:25:33,279 --> 00:25:37,200
a link no information and an image with

00:25:35,520 --> 00:25:39,520
no alternative text

00:25:37,200 --> 00:25:41,520
and what's very very interesting is that

00:25:39,520 --> 00:25:44,559
our aliexpress has chosen

00:25:41,520 --> 00:25:47,279
to hide the whole carousel

00:25:44,559 --> 00:25:48,720
for screen readers maybe with the

00:25:47,279 --> 00:25:51,520
assumption that if it's hidden

00:25:48,720 --> 00:25:53,760
it doesn't matter and i don't agree with

00:25:51,520 --> 00:25:53,760
that

00:25:54,200 --> 00:25:57,200
accessibilitydeveloperguide.com says

00:25:55,600 --> 00:25:58,799
whenever you think about hiding

00:25:57,200 --> 00:26:00,640
something from any audience

00:25:58,799 --> 00:26:02,000
better ask yourself what this is whether

00:26:00,640 --> 00:26:05,120
this is really a good

00:26:02,000 --> 00:26:06,960
solution most of the time it's better to

00:26:05,120 --> 00:26:08,320
create a solution that works the same

00:26:06,960 --> 00:26:11,760
way for everybody

00:26:08,320 --> 00:26:13,679
which does not need any shaky aria

00:26:11,760 --> 00:26:16,159
let's look at the fix for this violation

00:26:13,679 --> 00:26:18,559
on aliexpress

00:26:16,159 --> 00:26:19,200
add an alt tag this is a great image

00:26:18,559 --> 00:26:20,799
description

00:26:19,200 --> 00:26:22,799
and we'll get to this later but if you

00:26:20,799 --> 00:26:24,799
want to avoid cumulative layout shift

00:26:22,799 --> 00:26:27,039
add a height and width on the image as

00:26:24,799 --> 00:26:27,039
well

00:26:27,120 --> 00:26:34,000
missing form input labels on 54.4

00:26:30,880 --> 00:26:37,679
of home pages again caused by

00:26:34,000 --> 00:26:39,360
incorrect html i spent a long time

00:26:37,679 --> 00:26:40,400
trying to find an example of this and

00:26:39,360 --> 00:26:42,799
what's interesting

00:26:40,400 --> 00:26:44,480
is that if a placeholder is present in

00:26:42,799 --> 00:26:46,400
the input field

00:26:44,480 --> 00:26:48,000
screen readers and accessibility trees

00:26:46,400 --> 00:26:49,600
kind of get around that and give you

00:26:48,000 --> 00:26:52,080
some information

00:26:49,600 --> 00:26:54,559
however i did put a call out on twitter

00:26:52,080 --> 00:26:56,559
to ask if anybody had any examples

00:26:54,559 --> 00:26:58,640
of html forms without labels and

00:26:56,559 --> 00:27:00,559
placeholders

00:26:58,640 --> 00:27:02,799
wonderful member of the community alex

00:27:00,559 --> 00:27:04,559
said he had a gimmicky one on his 404

00:27:02,799 --> 00:27:06,799
page to do redirects

00:27:04,559 --> 00:27:09,200
and this was like gold dust to me this

00:27:06,799 --> 00:27:10,240
was an absolutely abysmal experience for

00:27:09,200 --> 00:27:13,360
screen readers

00:27:10,240 --> 00:27:13,360
and let's look at what's happening

00:27:13,440 --> 00:27:17,440
it looks pretty cool there's some ascii

00:27:15,279 --> 00:27:20,799
art the instructions are to press

00:27:17,440 --> 00:27:23,840
enter to continue which redirects you

00:27:20,799 --> 00:27:26,720
to alex's home page

00:27:23,840 --> 00:27:28,159
here we go um here is what the html

00:27:26,720 --> 00:27:31,279
looks like

00:27:28,159 --> 00:27:33,919
we have a form we have an input field we

00:27:31,279 --> 00:27:36,080
have no labels we have no placeholders

00:27:33,919 --> 00:27:36,960
and in the accessibility tree we have no

00:27:36,080 --> 00:27:39,039
information

00:27:36,960 --> 00:27:41,279
and furthermore when you focus on this

00:27:39,039 --> 00:27:45,039
element with voiceover on mac

00:27:41,279 --> 00:27:46,640
it reads out to you edit text blank main

00:27:45,039 --> 00:27:49,679
it's not really what you're expecting

00:27:46,640 --> 00:27:51,440
when you land on a 404

00:27:49,679 --> 00:27:52,720
so my question is does this page really

00:27:51,440 --> 00:27:55,360
need a form

00:27:52,720 --> 00:27:58,320
is this html giving meaning to what

00:27:55,360 --> 00:28:00,320
needs to be done on that page

00:27:58,320 --> 00:28:02,720
furthermore a fun little easter egg if

00:28:00,320 --> 00:28:04,159
you focus on the ascii art in its

00:28:02,720 --> 00:28:06,880
current state

00:28:04,159 --> 00:28:08,640
with voice over it reads this out to you

00:28:06,880 --> 00:28:10,399
underscore new line forward slash

00:28:08,640 --> 00:28:11,600
space underscore space back class space

00:28:10,399 --> 00:28:14,240
honor school underscore underscore

00:28:11,600 --> 00:28:16,720
underscore etc

00:28:14,240 --> 00:28:18,080
and there is a good fix for that where

00:28:16,720 --> 00:28:21,600
you can use aria

00:28:18,080 --> 00:28:22,880
labels and roles to allow the screen

00:28:21,600 --> 00:28:24,720
reader to know what that is

00:28:22,880 --> 00:28:26,240
you add role equals image and an aria

00:28:24,720 --> 00:28:28,480
label and you focus

00:28:26,240 --> 00:28:30,480
on that now with a screen reader you get

00:28:28,480 --> 00:28:32,399
more contextual information about what's

00:28:30,480 --> 00:28:35,440
on the page

00:28:32,399 --> 00:28:37,360
it's a pretty fancy page for a 404.

00:28:35,440 --> 00:28:39,039
i think i'd prefer my 404s to be

00:28:37,360 --> 00:28:40,640
functional especially when we're in an

00:28:39,039 --> 00:28:42,159
apocalypse

00:28:40,640 --> 00:28:44,720
now for a moment let's talk about

00:28:42,159 --> 00:28:48,880
placeholders as i mentioned earlier

00:28:44,720 --> 00:28:48,880
placeholders actually are not labels

00:28:48,919 --> 00:28:53,600
w3schools.com says the placeholder

00:28:51,360 --> 00:28:55,520
attribute specifies a short hint

00:28:53,600 --> 00:28:57,760
that describes the expected value of an

00:28:55,520 --> 00:29:01,279
input field e.g a sample value or a

00:28:57,760 --> 00:29:03,840
short description of the expected format

00:29:01,279 --> 00:29:05,840
let's go back to aliexpress when you

00:29:03,840 --> 00:29:07,840
refresh the page on aliexpress you get a

00:29:05,840 --> 00:29:09,760
new contextual placeholder

00:29:07,840 --> 00:29:11,120
it told me to search for true love

00:29:09,760 --> 00:29:14,880
starbucks

00:29:11,120 --> 00:29:17,120
fancy underwear and car accessories

00:29:14,880 --> 00:29:19,120
in the accessibility tree the

00:29:17,120 --> 00:29:21,520
placeholder says true love which is fair

00:29:19,120 --> 00:29:23,919
enough but there is no label on the form

00:29:21,520 --> 00:29:24,559
if i focus on that input with a screen

00:29:23,919 --> 00:29:26,559
reader

00:29:24,559 --> 00:29:28,880
i don't actually know what that form is

00:29:26,559 --> 00:29:32,240
for especially when the placeholder

00:29:28,880 --> 00:29:34,720
is changing every load of the page

00:29:32,240 --> 00:29:36,559
without a label that placeholder is

00:29:34,720 --> 00:29:39,919
meaningless

00:29:36,559 --> 00:29:41,600
so what does a good form input look like

00:29:39,919 --> 00:29:44,480
we have a label

00:29:41,600 --> 00:29:45,279
and we tell the label we tell the html

00:29:44,480 --> 00:29:47,360
the dom

00:29:45,279 --> 00:29:49,600
what input that label is for using the

00:29:47,360 --> 00:29:52,240
for and the id attributes

00:29:49,600 --> 00:29:53,120
we give the input a contextual

00:29:52,240 --> 00:29:55,600
placeholder

00:29:53,120 --> 00:29:56,799
hear its first name and that is going to

00:29:55,600 --> 00:30:00,240
really help you out

00:29:56,799 --> 00:30:03,840
when you can't see that screen

00:30:00,240 --> 00:30:08,080
let's go on to empty links 51.3

00:30:03,840 --> 00:30:10,320
of home pages again caused by html and

00:30:08,080 --> 00:30:13,279
we'd go back to aliexpress

00:30:10,320 --> 00:30:15,520
in the footer of aliexpress there are a

00:30:13,279 --> 00:30:18,399
set of social links

00:30:15,520 --> 00:30:20,399
they are empty they are full of

00:30:18,399 --> 00:30:22,720
non-breaking spaces

00:30:20,399 --> 00:30:24,480
and the accessibility tree tells us no

00:30:22,720 --> 00:30:26,960
information apart from space

00:30:24,480 --> 00:30:29,279
when we focus on those links and as a

00:30:26,960 --> 00:30:31,360
screen reader user as someone without a

00:30:29,279 --> 00:30:33,440
working display

00:30:31,360 --> 00:30:36,480
i'm going to ask myself what will happen

00:30:33,440 --> 00:30:38,320
if i click on this link

00:30:36,480 --> 00:30:40,799
and it's not just empty links that are

00:30:38,320 --> 00:30:44,559
problematic

00:30:40,799 --> 00:30:48,240
let's take a look at the basket

00:30:44,559 --> 00:30:48,960
icon on aliexpress again there is a text

00:30:48,240 --> 00:30:51,919
of zero

00:30:48,960 --> 00:30:53,520
inside that when i'm hovering over that

00:30:51,919 --> 00:30:55,360
with a screen reader when i'm focused on

00:30:53,520 --> 00:30:56,640
it if i've gone through the input field

00:30:55,360 --> 00:30:59,279
that says true love

00:30:56,640 --> 00:31:00,240
i go to there the basket icon and it

00:30:59,279 --> 00:31:03,440
just reads out

00:31:00,240 --> 00:31:07,919
zero here's the html

00:31:03,440 --> 00:31:07,919
a link an icon and xero

00:31:09,600 --> 00:31:13,039
and when i focus on it with a screen

00:31:11,840 --> 00:31:15,600
reader

00:31:13,039 --> 00:31:17,279
it reads out to me link xero i don't

00:31:15,600 --> 00:31:19,279
know where that link's going i'm not

00:31:17,279 --> 00:31:20,880
going to want to click on it

00:31:19,279 --> 00:31:22,320
i'm going to be asking myself again what

00:31:20,880 --> 00:31:26,000
even is this

00:31:22,320 --> 00:31:28,399
let's look at the fix add an aria label

00:31:26,000 --> 00:31:30,799
onto the link make it descriptive how

00:31:28,399 --> 00:31:32,960
about you have zero items in your basket

00:31:30,799 --> 00:31:36,399
go to basket tell the user what they're

00:31:32,960 --> 00:31:36,399
going to do if they click on that link

00:31:36,720 --> 00:31:40,960
missing document language attribute 29.

00:31:39,840 --> 00:31:44,000
28.9

00:31:40,960 --> 00:31:47,840
of home pages again caused by the very

00:31:44,000 --> 00:31:47,840
opening tag of your html

00:31:48,440 --> 00:31:52,720
accessibilitydeveloperguide.com says in

00:31:50,559 --> 00:31:54,480
the example of a screen reader

00:31:52,720 --> 00:31:56,320
the synthesizer needs to know which

00:31:54,480 --> 00:31:58,080
language language the content

00:31:56,320 --> 00:31:59,519
is in order to pronounce the output

00:31:58,080 --> 00:32:02,000
correctly otherwise

00:31:59,519 --> 00:32:04,799
it will be hard to understand even if

00:32:02,000 --> 00:32:06,880
you know the other language

00:32:04,799 --> 00:32:08,480
we go back to aliexpress and here you

00:32:06,880 --> 00:32:10,559
can see ax dev tools

00:32:08,480 --> 00:32:12,080
great free chromium extension to test

00:32:10,559 --> 00:32:14,480
accessibility

00:32:12,080 --> 00:32:15,760
there is no language attribute on the

00:32:14,480 --> 00:32:17,519
html

00:32:15,760 --> 00:32:19,840
and you can see here aliexpress have

00:32:17,519 --> 00:32:21,919
prioritized merging the facebook and

00:32:19,840 --> 00:32:24,720
open graph schema into their html

00:32:21,919 --> 00:32:25,440
before they've thought about language

00:32:24,720 --> 00:32:28,480
the fix

00:32:25,440 --> 00:32:29,039
very simple lang equals whatever your

00:32:28,480 --> 00:32:33,039
language

00:32:29,039 --> 00:32:36,159
is on the html and finally we come

00:32:33,039 --> 00:32:40,000
to empty buttons 26.9

00:32:36,159 --> 00:32:43,200
of home pages again caused by html

00:32:40,000 --> 00:32:46,399
but in this case it's also caused by css

00:32:43,200 --> 00:32:47,519
which we're going to abandon we go to a

00:32:46,399 --> 00:32:51,600
product page

00:32:47,519 --> 00:32:54,720
of aliexpress and there are two buttons

00:32:51,600 --> 00:32:56,640
on this page that presumably increment

00:32:54,720 --> 00:32:58,720
and decrement the amount of items you

00:32:56,640 --> 00:33:01,120
would like to add to your basket

00:32:58,720 --> 00:33:03,200
when using voiceover when you focus on

00:33:01,120 --> 00:33:05,360
this element it just reads out

00:33:03,200 --> 00:33:07,360
button no one is going to click that if

00:33:05,360 --> 00:33:11,120
they don't know what it's for

00:33:07,360 --> 00:33:14,399
here is the html it's a button element

00:33:11,120 --> 00:33:14,720
with an icon element inside it so how is

00:33:14,399 --> 00:33:18,159
that

00:33:14,720 --> 00:33:19,840
plus and minus added with css

00:33:18,159 --> 00:33:21,840
pseudo elements and what's really

00:33:19,840 --> 00:33:23,279
interesting is this character is not

00:33:21,840 --> 00:33:26,640
actually supported

00:33:23,279 --> 00:33:26,640
by a lot of

00:33:28,480 --> 00:33:35,519
browsers and also my vs code

00:33:32,320 --> 00:33:39,279
i presume they mean a plus but literally

00:33:35,519 --> 00:33:40,480
in the css inspector the character is

00:33:39,279 --> 00:33:43,440
unrecognized

00:33:40,480 --> 00:33:45,120
and i had to bring the what duck out for

00:33:43,440 --> 00:33:48,320
that

00:33:45,120 --> 00:33:51,200
the fix give a fullback

00:33:48,320 --> 00:33:52,640
to your button put a plus in there give

00:33:51,200 --> 00:33:55,039
it an aria label

00:33:52,640 --> 00:33:56,480
that tells the users what they're going

00:33:55,039 --> 00:34:00,880
to do when they click

00:33:56,480 --> 00:34:02,559
on that button give it some meaning

00:34:00,880 --> 00:34:04,640
so when we have a look at all of these

00:34:02,559 --> 00:34:08,399
most common failures they're caused by

00:34:04,640 --> 00:34:11,919
incorrect css and html that are not

00:34:08,399 --> 00:34:13,679
built for accessibility so what do we do

00:34:11,919 --> 00:34:15,520
for accessibility for broken screens in

00:34:13,679 --> 00:34:18,960
the apocalypse

00:34:15,520 --> 00:34:23,040
don't fake content with css put it

00:34:18,960 --> 00:34:25,679
there in the dom use semantic html

00:34:23,040 --> 00:34:26,079
use forms where it's appropriate don't

00:34:25,679 --> 00:34:29,200
break

00:34:26,079 --> 00:34:31,440
the web because if the web is unusable

00:34:29,200 --> 00:34:34,960
in the apocalypse

00:34:31,440 --> 00:34:38,320
everyone dies so we're talking about the

00:34:34,960 --> 00:34:41,359
apocalypse 2031 is 10 years off

00:34:38,320 --> 00:34:43,839
but why is all of this important now

00:34:41,359 --> 00:34:46,560
let's quickly recap how do we prepare

00:34:43,839 --> 00:34:49,119
the web for the apocalypse of 2031

00:34:46,560 --> 00:34:50,480
we start with semantic html we use

00:34:49,119 --> 00:34:52,480
minimal css

00:34:50,480 --> 00:34:54,079
and we use as little javascript as

00:34:52,480 --> 00:34:57,200
possible

00:34:54,079 --> 00:35:00,480
and why is this important now worldwide

00:34:57,200 --> 00:35:00,480
the internet is slow

00:35:00,599 --> 00:35:04,400
worldpopulationreview.com

00:35:01,839 --> 00:35:05,599
did a survey internet speeds by country

00:35:04,400 --> 00:35:08,280
in 2021

00:35:05,599 --> 00:35:11,280
and the average speed in the world is

00:35:08,280 --> 00:35:12,960
55.13 megabits per second

00:35:11,280 --> 00:35:14,640
if we look at the code from chromium

00:35:12,960 --> 00:35:19,040
devtools the slow

00:35:14,640 --> 00:35:20,160
3g simulated connection is 51.2 megabits

00:35:19,040 --> 00:35:22,000
per second

00:35:20,160 --> 00:35:23,839
and these are pretty much the same so

00:35:22,000 --> 00:35:26,320
all of the results you've seen

00:35:23,839 --> 00:35:28,079
when i had slow 3g in my dev tools

00:35:26,320 --> 00:35:30,000
loading that page with javascript

00:35:28,079 --> 00:35:31,839
the results are going to be very similar

00:35:30,000 --> 00:35:33,920
for a lot of people around the world

00:35:31,839 --> 00:35:34,960
they are not going to survive if pages

00:35:33,920 --> 00:35:38,400
take that long

00:35:34,960 --> 00:35:40,560
to load furthermore globally at least

00:35:38,400 --> 00:35:42,079
2.2 billion people have a near or

00:35:40,560 --> 00:35:44,400
distance vision impairment

00:35:42,079 --> 00:35:46,079
i'm one of them i have really bad eyes i

00:35:44,400 --> 00:35:47,200
can't see those of you who have seen me

00:35:46,079 --> 00:35:48,960
live streaming

00:35:47,200 --> 00:35:50,400
know that i miss placeholders all the

00:35:48,960 --> 00:35:53,760
time when they are

00:35:50,400 --> 00:35:55,200
really low contrast and also not all

00:35:53,760 --> 00:35:58,320
users of screen readers have

00:35:55,200 --> 00:36:00,160
vision impairments here's a survey by

00:35:58,320 --> 00:36:02,880
webaim it's 2017

00:36:00,160 --> 00:36:03,839
and it shows here that not everyone is

00:36:02,880 --> 00:36:05,440
blind who's

00:36:03,839 --> 00:36:07,119
out of this survey some people have

00:36:05,440 --> 00:36:07,599
cognitive disabilities some people are

00:36:07,119 --> 00:36:09,680
deaf

00:36:07,599 --> 00:36:11,200
some people have motor disabilities so

00:36:09,680 --> 00:36:12,480
it's not just blind people who use these

00:36:11,200 --> 00:36:13,280
there are a lot more people you're

00:36:12,480 --> 00:36:15,839
affecting

00:36:13,280 --> 00:36:16,880
if you don't build accessible websites

00:36:15,839 --> 00:36:20,000
and lastly

00:36:16,880 --> 00:36:22,160
as of this month google now uses core

00:36:20,000 --> 00:36:25,520
web vitals as a ranking factor

00:36:22,160 --> 00:36:27,119
in search results so what are the core

00:36:25,520 --> 00:36:29,280
web vitals we've got the largest

00:36:27,119 --> 00:36:32,560
contentful paint which means how

00:36:29,280 --> 00:36:34,400
quickly does the page render we've got

00:36:32,560 --> 00:36:36,480
the first input delay

00:36:34,400 --> 00:36:37,920
how quickly does the page respond to

00:36:36,480 --> 00:36:40,240
user input

00:36:37,920 --> 00:36:41,359
and we've got cumulative layout shift

00:36:40,240 --> 00:36:44,240
how stable

00:36:41,359 --> 00:36:45,119
is the page layout so in order to make

00:36:44,240 --> 00:36:48,560
the most

00:36:45,119 --> 00:36:51,520
out of search rankings and google

00:36:48,560 --> 00:36:52,240
core web vitals what do we need to do we

00:36:51,520 --> 00:36:54,240
need to get

00:36:52,240 --> 00:36:55,599
our content to our users as fast as

00:36:54,240 --> 00:36:57,280
possible

00:36:55,599 --> 00:36:59,920
we need to make our web applications

00:36:57,280 --> 00:37:02,000
usable as soon as possible

00:36:59,920 --> 00:37:04,320
and we need to make our web applications

00:37:02,000 --> 00:37:06,880
as stable as possible

00:37:04,320 --> 00:37:09,119
or we risk being forgotten in the

00:37:06,880 --> 00:37:11,119
apocalypse

00:37:09,119 --> 00:37:12,640
billions of people use the internet on a

00:37:11,119 --> 00:37:14,720
slow connection

00:37:12,640 --> 00:37:16,960
and millions of people use the internet

00:37:14,720 --> 00:37:19,119
via a screen reader

00:37:16,960 --> 00:37:20,240
people won't find your website if it's

00:37:19,119 --> 00:37:24,800
not performant

00:37:20,240 --> 00:37:28,880
or accessible the apocalypse of 2031

00:37:24,800 --> 00:37:31,760
might not happen but if it does

00:37:28,880 --> 00:37:34,320
hopefully with this information will be

00:37:31,760 --> 00:37:37,680
prepared

00:37:34,320 --> 00:37:39,440
my name is salma or white panther i

00:37:37,680 --> 00:37:41,040
encourage developers to build stuff

00:37:39,440 --> 00:37:43,119
learn things and love what you do

00:37:41,040 --> 00:37:46,000
you can find me on all of these social

00:37:43,119 --> 00:37:47,280
platforms as white panther

00:37:46,000 --> 00:37:51,839
and thank you very much i've had a

00:37:47,280 --> 00:37:51,839
lovely time

00:37:54,720 --> 00:38:02,800
fantastic thanks alma that was awesome

00:37:59,200 --> 00:38:03,599
yeah so good um yeah with there's been

00:38:02,800 --> 00:38:05,280
an interesting chat

00:38:03,599 --> 00:38:06,720
going on actually while you were talking

00:38:05,280 --> 00:38:09,680
so um yeah

00:38:06,720 --> 00:38:10,720
lots of topics in your talk that people

00:38:09,680 --> 00:38:14,560
have got um

00:38:10,720 --> 00:38:18,240
excited about and um yeah i don't know

00:38:14,560 --> 00:38:20,000
um nia did you want to ask your question

00:38:18,240 --> 00:38:22,720
i can see some round of applause

00:38:20,000 --> 00:38:22,720
absolutely

00:38:23,119 --> 00:38:27,680
awesome talk um yeah near did you want

00:38:26,160 --> 00:38:28,120
to ask your questions you want me to ask

00:38:27,680 --> 00:38:30,320
it for you

00:38:28,120 --> 00:38:32,720
[Music]

00:38:30,320 --> 00:38:32,720
you're getting

00:38:39,920 --> 00:38:47,520
i can tell you because i wait a second

00:38:44,079 --> 00:38:50,640
okay you hear me yes okay

00:38:47,520 --> 00:38:54,720
so sometimes um

00:38:50,640 --> 00:38:57,760
i have a i need to

00:38:54,720 --> 00:39:00,960
add images to my webpage but

00:38:57,760 --> 00:39:04,079
they are only for styling you know

00:39:00,960 --> 00:39:04,480
to see only images that it doesn't add

00:39:04,079 --> 00:39:09,119
the

00:39:04,480 --> 00:39:12,880
meaning and i wonder what is the best uh

00:39:09,119 --> 00:39:15,280
how to make it a apocalypse apocalypse

00:39:12,880 --> 00:39:15,280
ready

00:39:17,760 --> 00:39:21,440
attribute with the empty string because

00:39:19,760 --> 00:39:23,760
i don't want the screen reader will

00:39:21,440 --> 00:39:25,520
read it but i wonder if there is a

00:39:23,760 --> 00:39:28,079
better way

00:39:25,520 --> 00:39:29,359
so my question to you would be if you're

00:39:28,079 --> 00:39:32,560
going to

00:39:29,359 --> 00:39:34,720
hide these images from screen readers

00:39:32,560 --> 00:39:35,599
is it really important to the content of

00:39:34,720 --> 00:39:38,320
the page

00:39:35,599 --> 00:39:40,560
does the page need that contextual image

00:39:38,320 --> 00:39:43,680
information in order to make sense

00:39:40,560 --> 00:39:44,960
and if it doesn't get rid of it that's

00:39:43,680 --> 00:39:47,760
what i would say if you want your

00:39:44,960 --> 00:39:52,720
website to be apocalypse ready

00:39:47,760 --> 00:39:52,720
okay thank you my pleasure

00:39:55,040 --> 00:39:58,560
awesome um what else is coming in uh oh

00:39:57,920 --> 00:40:01,200
there we go

00:39:58,560 --> 00:40:02,720
question from matt do you want to read

00:40:01,200 --> 00:40:05,599
it out summer

00:40:02,720 --> 00:40:07,200
from matt oh you described the html page

00:40:05,599 --> 00:40:08,000
loading at a similar speed to the next

00:40:07,200 --> 00:40:09,839
jst

00:40:08,000 --> 00:40:12,079
page please where was the html page

00:40:09,839 --> 00:40:14,960
hosted so all of those three pages that

00:40:12,079 --> 00:40:16,720
i compared were all hosted on netlify

00:40:14,960 --> 00:40:18,480
so i wanted to host them on netflix to

00:40:16,720 --> 00:40:19,680
make sure i was kind of giving an even

00:40:18,480 --> 00:40:22,560
comparison

00:40:19,680 --> 00:40:23,359
um and obviously the html page was just

00:40:22,560 --> 00:40:26,079
a

00:40:23,359 --> 00:40:26,640
page dragged into netlify that was then

00:40:26,079 --> 00:40:29,760
hosted

00:40:26,640 --> 00:40:30,480
by a just static here's your html um and

00:40:29,760 --> 00:40:33,200
then the

00:40:30,480 --> 00:40:34,079
next pages were obviously built um and

00:40:33,200 --> 00:40:36,640
then served

00:40:34,079 --> 00:40:38,240
by next as they do so um it's an

00:40:36,640 --> 00:40:40,079
interesting one for sure

00:40:38,240 --> 00:40:42,640
i'd probably say like the google fonts

00:40:40,079 --> 00:40:45,119
the favicon and the css

00:40:42,640 --> 00:40:46,079
was were the were the main culprits um

00:40:45,119 --> 00:40:48,400
of that

00:40:46,079 --> 00:40:49,839
the the html static page being actually

00:40:48,400 --> 00:40:50,720
a lot bigger than i would have thought

00:40:49,839 --> 00:40:52,560
at that point

00:40:50,720 --> 00:40:54,000
and the favicon especially 15 kilobytes

00:40:52,560 --> 00:40:57,520
is a lot to take up

00:40:54,000 --> 00:40:57,520
on a small page like that

00:40:59,440 --> 00:41:03,200
oh does that some oh there you go yes it

00:41:01,599 --> 00:41:06,400
does answer your question

00:41:03,200 --> 00:41:07,280
fantastic uh i have a couple actually

00:41:06,400 --> 00:41:11,760
for you

00:41:07,280 --> 00:41:14,880
um yeah my first one was about um

00:41:11,760 --> 00:41:17,599
yeah i suppose it's about my frustration

00:41:14,880 --> 00:41:19,920
perhaps our shared frustration at how

00:41:17,599 --> 00:41:21,200
common some of those errors were that

00:41:19,920 --> 00:41:22,480
were picked up in that report and that

00:41:21,200 --> 00:41:23,520
report was really interesting by the way

00:41:22,480 --> 00:41:26,640
all those stats were

00:41:23,520 --> 00:41:29,839
were super helpful for making a case uh

00:41:26,640 --> 00:41:31,760
you know to make the web better um

00:41:29,839 --> 00:41:33,119
in particular you know missing labels

00:41:31,760 --> 00:41:36,400
from forms real

00:41:33,119 --> 00:41:37,200
bear of mine drives me nuts um why do

00:41:36,400 --> 00:41:40,319
you think

00:41:37,200 --> 00:41:43,680
given how easy it is now to automate um

00:41:40,319 --> 00:41:44,960
you know um a certain level of

00:41:43,680 --> 00:41:46,560
accessibility testing i'm not saying

00:41:44,960 --> 00:41:48,880
that solves every problem

00:41:46,560 --> 00:41:49,839
but you know things like that will

00:41:48,880 --> 00:41:52,240
certainly be picked up

00:41:49,839 --> 00:41:53,359
by accessibility auditing tools you know

00:41:52,240 --> 00:41:55,599
and can be part of your

00:41:53,359 --> 00:41:59,040
whole ci process what do you think it is

00:41:55,599 --> 00:42:00,720
that's still missing in the industry

00:41:59,040 --> 00:42:02,400
so there's a this is a tough one so i

00:42:00,720 --> 00:42:03,680
used to work in product development as a

00:42:02,400 --> 00:42:06,079
tech lead

00:42:03,680 --> 00:42:06,800
and i think what i still used to see a

00:42:06,079 --> 00:42:08,880
lot of was

00:42:06,800 --> 00:42:09,839
designers would design these beautiful

00:42:08,880 --> 00:42:13,760
pages

00:42:09,839 --> 00:42:15,680
with fancy animations and crazy forms

00:42:13,760 --> 00:42:17,520
and just all this beautiful it looks

00:42:15,680 --> 00:42:19,359
beautiful when you're looking at it in

00:42:17,520 --> 00:42:22,480
figma or photoshop

00:42:19,359 --> 00:42:24,079
and then i think as a good developer you

00:42:22,480 --> 00:42:25,760
want to make that design look great

00:42:24,079 --> 00:42:27,359
you want to stay true to what the

00:42:25,760 --> 00:42:30,000
designer's vision is

00:42:27,359 --> 00:42:30,480
and so especially if you're somebody who

00:42:30,000 --> 00:42:31,839
hasn't

00:42:30,480 --> 00:42:33,920
had that much experience in

00:42:31,839 --> 00:42:34,960
investigating accessibility issues

00:42:33,920 --> 00:42:37,119
you're going to build it and oh the

00:42:34,960 --> 00:42:38,640
designer says it's great so let's let's

00:42:37,119 --> 00:42:39,599
just build this and ship it and it's

00:42:38,640 --> 00:42:42,720
great

00:42:39,599 --> 00:42:43,920
um and so a lot of people actually in

00:42:42,720 --> 00:42:45,839
the industry are kind of saying

00:42:43,920 --> 00:42:46,800
sometimes designers need to code or they

00:42:45,839 --> 00:42:49,280
need to have

00:42:46,800 --> 00:42:50,960
that experience of those kind of issues

00:42:49,280 --> 00:42:51,839
and accessibility and i would say it's a

00:42:50,960 --> 00:42:55,119
joint

00:42:51,839 --> 00:42:57,280
a joint team effort so developers

00:42:55,119 --> 00:42:59,520
learn about accessibility learn about

00:42:57,280 --> 00:43:01,839
your users and how you need to

00:42:59,520 --> 00:43:02,640
cater for those and also designers learn

00:43:01,839 --> 00:43:06,240
about that too

00:43:02,640 --> 00:43:08,800
and talk about it make that a core

00:43:06,240 --> 00:43:09,520
factor in how you design stuff i would

00:43:08,800 --> 00:43:12,560
always say

00:43:09,520 --> 00:43:15,440
that an mvp should be like an

00:43:12,560 --> 00:43:16,640
mup a minimum usable product i kind of

00:43:15,440 --> 00:43:17,119
just made that up and it sounds pretty

00:43:16,640 --> 00:43:20,400
good

00:43:17,119 --> 00:43:23,200
um and so it's and it is also

00:43:20,400 --> 00:43:24,720
the uh responsibility of the companies

00:43:23,200 --> 00:43:27,040
and the product teams

00:43:24,720 --> 00:43:29,280
and those developer teams to prioritize

00:43:27,040 --> 00:43:31,280
that and the test is to prioritize that

00:43:29,280 --> 00:43:33,440
but sometimes this is i've been in this

00:43:31,280 --> 00:43:34,079
situation accessibility isn't in the

00:43:33,440 --> 00:43:35,520
budget

00:43:34,079 --> 00:43:37,040
or quick we've got to ship this feature

00:43:35,520 --> 00:43:38,560
really really quickly i don't care if

00:43:37,040 --> 00:43:41,040
it's accessible we need to get this out

00:43:38,560 --> 00:43:43,920
to customers and they need to use it

00:43:41,040 --> 00:43:44,560
and so i think it's an industry problem

00:43:43,920 --> 00:43:46,960
in that

00:43:44,560 --> 00:43:47,920
it's not being prioritized by product

00:43:46,960 --> 00:43:49,440
managers and

00:43:47,920 --> 00:43:51,599
there's no business case for

00:43:49,440 --> 00:43:52,640
accessibility and so it falls upon the

00:43:51,599 --> 00:43:54,800
developers

00:43:52,640 --> 00:43:56,000
to promote it and they don't get heard

00:43:54,800 --> 00:43:57,119
because they've just got to keep ship

00:43:56,000 --> 00:43:58,960
shipping features

00:43:57,119 --> 00:44:00,400
it has to start like a little bit higher

00:43:58,960 --> 00:44:02,640
i think um

00:44:00,400 --> 00:44:04,319
so it's an industry problem uh that's

00:44:02,640 --> 00:44:06,880
what i that's why i think

00:44:04,319 --> 00:44:07,839
yeah absolutely well i think it's really

00:44:06,880 --> 00:44:08,560
interesting what you say about the

00:44:07,839 --> 00:44:10,400
business case

00:44:08,560 --> 00:44:12,720
i mean maybe the business case is

00:44:10,400 --> 00:44:14,319
something people can't easily reach for

00:44:12,720 --> 00:44:16,560
but it's definitely there i mean the

00:44:14,319 --> 00:44:19,920
stats that you talked about you know

00:44:16,560 --> 00:44:21,359
um that there's readily available

00:44:19,920 --> 00:44:23,119
information about

00:44:21,359 --> 00:44:24,960
the number of people who have visual

00:44:23,119 --> 00:44:26,000
impairments or prefer to use the

00:44:24,960 --> 00:44:28,960
keyboard or you know

00:44:26,000 --> 00:44:30,800
whatever it is um so yeah i mean that's

00:44:28,960 --> 00:44:32,880
particularly for e-commerce you know

00:44:30,800 --> 00:44:34,079
as a great example right i mean if if

00:44:32,880 --> 00:44:37,440
your business

00:44:34,079 --> 00:44:38,800
you know um oriented around taking money

00:44:37,440 --> 00:44:42,000
online and people can't check out

00:44:38,800 --> 00:44:42,000
because they can't use it then

00:44:42,079 --> 00:44:45,680
yeah it's also very interesting that um

00:44:44,720 --> 00:44:47,119
you know in the in the product

00:44:45,680 --> 00:44:48,079
development worlds i've been in there's

00:44:47,119 --> 00:44:50,720
so much data

00:44:48,079 --> 00:44:52,160
being collected about users how many how

00:44:50,720 --> 00:44:54,480
long they've been on a page

00:44:52,160 --> 00:44:55,680
where they click bounce rate what they

00:44:54,480 --> 00:44:57,839
scroll down to

00:44:55,680 --> 00:44:59,680
but actually the data that is important

00:44:57,839 --> 00:45:02,319
for websites to be usable isn't

00:44:59,680 --> 00:45:04,079
as often collected and so that goes on

00:45:02,319 --> 00:45:07,119
the analytics team as well it's a whole

00:45:04,079 --> 00:45:09,040
product responsibility to understand

00:45:07,119 --> 00:45:10,160
how to make these websites better it's

00:45:09,040 --> 00:45:11,200
quite interesting that even though

00:45:10,160 --> 00:45:13,599
aliexpress is in

00:45:11,200 --> 00:45:15,119
the top 50 websites in the world it has

00:45:13,599 --> 00:45:18,240
so many problems

00:45:15,119 --> 00:45:20,880
yeah yeah absolutely

00:45:18,240 --> 00:45:21,599
yeah looks like we've got um uh another

00:45:20,880 --> 00:45:24,480
question from

00:45:21,599 --> 00:45:26,800
near about uh yeah there was a

00:45:24,480 --> 00:45:28,880
conversation in the chat

00:45:26,800 --> 00:45:29,920
okay before we jacob did you have one

00:45:28,880 --> 00:45:32,160
question

00:45:29,920 --> 00:45:33,280
yeah i just wanted to talk about the the

00:45:32,160 --> 00:45:36,240
business case

00:45:33,280 --> 00:45:38,160
for um accessibility um and people

00:45:36,240 --> 00:45:40,960
saying that like the

00:45:38,160 --> 00:45:42,000
um that they can't justify or it's hard

00:45:40,960 --> 00:45:45,040
to justify

00:45:42,000 --> 00:45:45,599
uh spending the money on it um so there

00:45:45,040 --> 00:45:48,640
are

00:45:45,599 --> 00:45:49,359
quite a lot of people who have um like a

00:45:48,640 --> 00:45:51,839
persistent

00:45:49,359 --> 00:45:53,520
disability uh but there are actually

00:45:51,839 --> 00:45:55,119
significantly more people who have a

00:45:53,520 --> 00:45:58,319
temporary disability

00:45:55,119 --> 00:46:00,560
um so like you've broken your wrist or

00:45:58,319 --> 00:46:02,880
um you've i don't know gone to the eye

00:46:00,560 --> 00:46:05,440
doctor and got eye drops or something

00:46:02,880 --> 00:46:06,319
there are millions of people uh around

00:46:05,440 --> 00:46:08,640
the world

00:46:06,319 --> 00:46:10,319
who have a disability that only lasts

00:46:08,640 --> 00:46:12,720
for a short period of time

00:46:10,319 --> 00:46:14,560
and those people are actually

00:46:12,720 --> 00:46:18,000
significantly less adapted

00:46:14,560 --> 00:46:21,200
to um situations where

00:46:18,000 --> 00:46:22,160
uh accessibility is not a cons is not a

00:46:21,200 --> 00:46:24,560
focus

00:46:22,160 --> 00:46:26,640
so they are they're less adapted to

00:46:24,560 --> 00:46:28,960
dealing with those sorts of problems

00:46:26,640 --> 00:46:31,200
so if you're ignoring accessibility

00:46:28,960 --> 00:46:33,680
you're also ignoring

00:46:31,200 --> 00:46:34,800
uh the person set next to you who

00:46:33,680 --> 00:46:36,560
tomorrow

00:46:34,800 --> 00:46:37,839
slips on the ice well not tomorrow but

00:46:36,560 --> 00:46:40,400
slips on the ice

00:46:37,839 --> 00:46:42,079
and sprains their wrist and now they

00:46:40,400 --> 00:46:43,599
only have one hand

00:46:42,079 --> 00:46:44,720
exactly you make a really good point i

00:46:43,599 --> 00:46:46,960
think a lot of people think

00:46:44,720 --> 00:46:49,119
accessibility concerns are only for the

00:46:46,960 --> 00:46:52,079
people who are disabled now

00:46:49,119 --> 00:46:53,680
and you it's for everybody and the more

00:46:52,079 --> 00:46:55,280
we realize that and the more we talk

00:46:53,680 --> 00:46:56,720
about that and the more we get

00:46:55,280 --> 00:46:58,319
and i hate to say this the more we get

00:46:56,720 --> 00:46:59,760
buy-in from the top but that's where

00:46:58,319 --> 00:47:02,800
it's going to come from in this

00:46:59,760 --> 00:47:03,839
capitalist world um the more people will

00:47:02,800 --> 00:47:07,599
probably start

00:47:03,839 --> 00:47:09,440
um advocating for it you're right

00:47:07,599 --> 00:47:12,000
yeah thanks jacob and nice to hear your

00:47:09,440 --> 00:47:15,440
voice again i hope you're keeping well

00:47:12,000 --> 00:47:16,880
um yeah you made them uh

00:47:15,440 --> 00:47:18,560
well you posted another question and

00:47:16,880 --> 00:47:19,920
made a really interesting point actually

00:47:18,560 --> 00:47:21,280
i think there's kind of two questions in

00:47:19,920 --> 00:47:22,079
there so there was a conversation about

00:47:21,280 --> 00:47:25,440
wrapping

00:47:22,079 --> 00:47:28,800
um uh form inputs with labels

00:47:25,440 --> 00:47:31,839
so that you don't have to use an id uh

00:47:28,800 --> 00:47:33,280
uh is that um

00:47:31,839 --> 00:47:35,119
yeah does that work across all screen

00:47:33,280 --> 00:47:37,680
readers i think is that question

00:47:35,119 --> 00:47:39,839
um i i don't actually know the exact

00:47:37,680 --> 00:47:40,880
answer to that but what you can do so uh

00:47:39,839 --> 00:47:42,800
nia asks

00:47:40,880 --> 00:47:44,480
is there a tool like can i use for ali

00:47:42,800 --> 00:47:45,440
that allows me to know this so i would

00:47:44,480 --> 00:47:46,880
recommend

00:47:45,440 --> 00:47:48,319
using a variety of different

00:47:46,880 --> 00:47:50,480
accessibility tools throughout your

00:47:48,319 --> 00:47:52,160
workflow because not every accessibility

00:47:50,480 --> 00:47:54,559
tool is going to give you the

00:47:52,160 --> 00:47:56,319
100 correct answer sometimes you get

00:47:54,559 --> 00:47:58,079
false positives sometimes

00:47:56,319 --> 00:48:00,319
you get stuff that actually is not an

00:47:58,079 --> 00:48:03,280
issue for example on my website

00:48:00,319 --> 00:48:04,319
i have a hidden link in my header that

00:48:03,280 --> 00:48:06,400
you can't see

00:48:04,319 --> 00:48:08,400
but it's for screen readers to skip over

00:48:06,400 --> 00:48:10,880
the navigation to the main content

00:48:08,400 --> 00:48:12,240
whenever i look at my site on ax dev

00:48:10,880 --> 00:48:13,680
tools it tells me that the color

00:48:12,240 --> 00:48:15,680
contrast is bad but

00:48:13,680 --> 00:48:16,720
it's it's meant to be like that so you

00:48:15,680 --> 00:48:17,760
have to use your judgment you have to

00:48:16,720 --> 00:48:19,440
educate yourself

00:48:17,760 --> 00:48:20,800
and you have to use a variety of

00:48:19,440 --> 00:48:21,760
different tools to get a variety of

00:48:20,800 --> 00:48:23,359
different answers

00:48:21,760 --> 00:48:24,960
some of the ones i use are wave

00:48:23,359 --> 00:48:28,079
evaluation tool

00:48:24,960 --> 00:48:30,880
lighthouse tools axe dev tools um

00:48:28,079 --> 00:48:31,760
and i read up a lot on the web aim and

00:48:30,880 --> 00:48:33,280
wcag

00:48:31,760 --> 00:48:34,720
stuff as well and keep trying to keep up

00:48:33,280 --> 00:48:38,079
to date because it's always changing as

00:48:34,720 --> 00:48:38,079
well the web is always changing

00:48:38,160 --> 00:48:41,200
awesome we actually have two more

00:48:39,839 --> 00:48:43,040
questions this is this is turning into

00:48:41,200 --> 00:48:43,760
an epic q a which is great everyone was

00:48:43,040 --> 00:48:46,400
really

00:48:43,760 --> 00:48:48,720
engaged uh so yeah there was another one

00:48:46,400 --> 00:48:51,040
from matt which is about

00:48:48,720 --> 00:48:53,680
best website resources for covering js

00:48:51,040 --> 00:48:55,520
performance optimization

00:48:53,680 --> 00:48:56,830
i didn't know actually off the top of my

00:48:55,520 --> 00:48:58,079
head um

00:48:56,830 --> 00:49:01,040
[Music]

00:48:58,079 --> 00:49:03,280
uh i would recommend to sign up to

00:49:01,040 --> 00:49:05,280
stefan udis's newsletter

00:49:03,280 --> 00:49:06,559
uh who's in the audience right now who

00:49:05,280 --> 00:49:09,200
always gives

00:49:06,559 --> 00:49:09,760
amazing no knowledge nuggets out every

00:49:09,200 --> 00:49:11,280
week i

00:49:09,760 --> 00:49:12,960
i didn't mean to plug him but i'm doing

00:49:11,280 --> 00:49:15,119
it so um

00:49:12,960 --> 00:49:16,079
follow follow as many of these people as

00:49:15,119 --> 00:49:17,920
possible who are just

00:49:16,079 --> 00:49:19,520
talking about it and the thing with web

00:49:17,920 --> 00:49:20,960
development is that

00:49:19,520 --> 00:49:22,800
when no one really knows what they're

00:49:20,960 --> 00:49:24,720
doing we're all trying to just gather

00:49:22,800 --> 00:49:25,680
information and investigate and try and

00:49:24,720 --> 00:49:27,440
understand the web

00:49:25,680 --> 00:49:28,960
as best we can and things are always

00:49:27,440 --> 00:49:30,480
changing and there's new frameworks

00:49:28,960 --> 00:49:33,119
coming out and blah blah

00:49:30,480 --> 00:49:35,040
if you can just keep in mind the things

00:49:33,119 --> 00:49:38,240
that i talked about in my talk

00:49:35,040 --> 00:49:39,119
just forget um css if you don't need it

00:49:38,240 --> 00:49:41,040
forget

00:49:39,119 --> 00:49:43,520
javascript if you don't need it and just

00:49:41,040 --> 00:49:45,680
get to focus on making your website

00:49:43,520 --> 00:49:46,880
as as quick as you can use your judgment

00:49:45,680 --> 00:49:48,720
use the tools

00:49:46,880 --> 00:49:50,640
because there's no one-size-fits-all

00:49:48,720 --> 00:49:52,800
there's no golden

00:49:50,640 --> 00:49:56,319
nugget to to make this you've just got

00:49:52,800 --> 00:49:56,319
to play about an experiment and

00:49:56,839 --> 00:50:01,839
understand

00:49:58,800 --> 00:50:03,280
yeah great i'll um post some links

00:50:01,839 --> 00:50:05,599
some favorite links of mine in the chat

00:50:03,280 --> 00:50:07,280
afterwards and um yeah i'm sure

00:50:05,599 --> 00:50:09,119
someone if you dig anything out that

00:50:07,280 --> 00:50:12,160
would be really appreciated too

00:50:09,119 --> 00:50:13,680
uh we've got yeah we've still got

00:50:12,160 --> 00:50:15,839
questions coming in so we've only really

00:50:13,680 --> 00:50:18,800
got two minutes before our break

00:50:15,839 --> 00:50:20,260
so uh do you want to pick one to answer

00:50:18,800 --> 00:50:22,640
someone should i pick one for you

00:50:20,260 --> 00:50:25,359
[Music]

00:50:22,640 --> 00:50:27,119
uh does ignoring accessibility features

00:50:25,359 --> 00:50:28,880
lead to any delay in deploying

00:50:27,119 --> 00:50:30,960
new technology to the website just as a

00:50:28,880 --> 00:50:33,359
data analyst or connecting to personal

00:50:30,960 --> 00:50:37,040
assistance software

00:50:33,359 --> 00:50:39,200
um i don't think that i i don't know how

00:50:37,040 --> 00:50:41,200
to answer that

00:50:39,200 --> 00:50:44,319
ignoring accessibility just makes your

00:50:41,200 --> 00:50:46,640
product sub standard

00:50:44,319 --> 00:50:47,920
yeah i mean yeah it's a tricky question

00:50:46,640 --> 00:50:50,880
to answer i suppose

00:50:47,920 --> 00:50:52,000
if there are accessibility checks in the

00:50:50,880 --> 00:50:55,040
delivery process

00:50:52,000 --> 00:50:56,400
then yeah the failures would any kind of

00:50:55,040 --> 00:50:57,839
failure would slow it down

00:50:56,400 --> 00:51:00,640
if there's no checks then i guess it

00:50:57,839 --> 00:51:02,640
just ships with flaws in it as you say

00:51:00,640 --> 00:51:04,160
yeah i mean i think what's what's key to

00:51:02,640 --> 00:51:05,839
understand in this in this

00:51:04,160 --> 00:51:07,440
world that we're in it's like get this

00:51:05,839 --> 00:51:11,040
stuff out get this stuff out quick

00:51:07,440 --> 00:51:12,400
ship ship quick react uh be reactive and

00:51:11,040 --> 00:51:14,000
not proactive and i think we have to

00:51:12,400 --> 00:51:16,000
switch it a little bit more

00:51:14,000 --> 00:51:18,319
no one's gonna die if you don't get your

00:51:16,000 --> 00:51:20,960
feature out in the next hour

00:51:18,319 --> 00:51:22,079
um and if you can spend a few more hours

00:51:20,960 --> 00:51:23,760
or a couple more days

00:51:22,079 --> 00:51:25,599
testing it thoroughly and properly and

00:51:23,760 --> 00:51:27,520
also what i would advocate for

00:51:25,599 --> 00:51:29,440
is actually getting people with those

00:51:27,520 --> 00:51:31,920
disabilities to test

00:51:29,440 --> 00:51:32,640
your products you know where are all the

00:51:31,920 --> 00:51:34,559
uh people

00:51:32,640 --> 00:51:36,079
who um are working in tech who have

00:51:34,559 --> 00:51:39,359
those disabilities who can actually

00:51:36,079 --> 00:51:40,880
give us real life data about what it's

00:51:39,359 --> 00:51:42,559
like to use these products

00:51:40,880 --> 00:51:44,079
i was streaming on twitch a couple of

00:51:42,559 --> 00:51:45,359
weeks ago and i had someone come into my

00:51:44,079 --> 00:51:46,800
chat who was blind

00:51:45,359 --> 00:51:48,800
and i was fascinated because they were

00:51:46,800 --> 00:51:50,559
using a screen reader in my uh

00:51:48,800 --> 00:51:51,839
in my stream they were telling me all

00:51:50,559 --> 00:51:53,040
the difficulties they have on the web

00:51:51,839 --> 00:51:53,839
and and what things are good and what

00:51:53,040 --> 00:51:56,160
things are bad and

00:51:53,839 --> 00:51:59,760
it's so eye-opening to talk to these

00:51:56,160 --> 00:52:02,800
people who face these problems every day

00:51:59,760 --> 00:52:06,240
yeah 100 yeah i've um

00:52:02,800 --> 00:52:08,319
myself used um the rnib in the past

00:52:06,240 --> 00:52:10,160
to yeah to help test software that was

00:52:08,319 --> 00:52:12,880
really fascinating experience

00:52:10,160 --> 00:52:14,079
um yeah great suggestion um we can

00:52:12,880 --> 00:52:17,359
probably just end on

00:52:14,079 --> 00:52:18,079
the final comment which is um someone

00:52:17,359 --> 00:52:19,920
getting really

00:52:18,079 --> 00:52:21,520
pumped about your t-shirt so yeah the

00:52:19,920 --> 00:52:25,280
question is where did you get it

00:52:21,520 --> 00:52:27,200
uh go to my website whitep4n3r.com and

00:52:25,280 --> 00:52:28,400
click on merch and you can go and buy a

00:52:27,200 --> 00:52:32,079
t-shirt sweatshirts

00:52:28,400 --> 00:52:34,319
mugs and i give away uh

00:52:32,079 --> 00:52:36,000
merch um on my giveaway fridays as well

00:52:34,319 --> 00:52:38,000
if you want to turn up to my twitch chat

00:52:36,000 --> 00:52:41,200
and hang out

00:52:38,000 --> 00:52:43,920
awesome well i'm gonna thank you um

00:52:41,200 --> 00:52:44,720
so much again for such a great talk and

00:52:43,920 --> 00:52:46,800
for

00:52:44,720 --> 00:52:48,319
fielding so many interesting and

00:52:46,800 --> 00:52:49,920
different questions from everyone

00:52:48,319 --> 00:52:51,359
looks like there's even possibly still

00:52:49,920 --> 00:52:52,240
more coming in so if you're

00:52:51,359 --> 00:52:53,440
if you're going to hang around and

00:52:52,240 --> 00:52:54,400
you're happy to answer them in the chat

00:52:53,440 --> 00:52:56,160
that would be awesome

00:52:54,400 --> 00:52:58,640
i will do yes i will do thank you for

00:52:56,160 --> 00:53:01,280
having me pleasure

00:52:58,640 --> 00:53:15,150
thank you so much so virtual round of

00:53:01,280 --> 00:53:21,739
applause not an easy thing

00:53:15,150 --> 00:53:21,739
[Music]

00:53:31,250 --> 00:53:43,839
[Music]

00:53:40,839 --> 00:53:43,839
so

00:53:44,070 --> 00:54:18,760
[Music]

00:54:23,050 --> 00:54:39,839
[Music]

00:54:36,839 --> 00:54:39,839
so

00:54:42,910 --> 00:54:53,839
[Music]

00:54:50,839 --> 00:54:53,839
so

00:54:54,130 --> 00:55:15,440
[Music]

00:55:12,350 --> 00:55:15,440
[Applause]

00:55:15,460 --> 00:55:35,839
[Music]

00:55:32,839 --> 00:55:35,839
my

00:55:38,010 --> 00:55:44,089
[Music]

00:55:49,910 --> 00:56:02,740
[Music]

00:56:00,839 --> 00:56:37,419
foreign

00:56:02,740 --> 00:56:37,419
[Music]

00:56:41,720 --> 00:57:23,970
[Music]

00:57:24,839 --> 00:57:31,010
so

00:57:25,970 --> 00:57:34,109
[Music]

00:57:31,010 --> 00:57:34,109
[Applause]

00:57:34,130 --> 00:57:41,920
[Music]

00:57:39,839 --> 00:57:41,920
you

00:57:43,290 --> 00:58:02,760
[Music]

00:58:08,580 --> 00:58:20,130
[Music]

00:58:20,839 --> 00:58:55,860
so

00:58:23,580 --> 00:58:55,860
[Music]

00:59:00,380 --> 00:59:29,599
[Music]

00:59:30,839 --> 00:59:49,680
so

00:59:33,130 --> 00:59:52,770
[Music]

00:59:49,680 --> 00:59:52,770
[Applause]

00:59:52,800 --> 01:00:11,539
[Music]

01:00:12,839 --> 01:00:21,429
so

01:00:15,340 --> 01:00:21,429
[Music]

01:00:27,250 --> 01:00:42,240
[Music]

01:00:40,839 --> 01:01:14,760
foreign

01:00:42,240 --> 01:01:14,760
[Music]

01:01:19,050 --> 01:01:37,320
[Music]

01:01:37,760 --> 01:01:39,839
foreign

01:01:44,070 --> 01:02:11,440
[Music]

01:02:08,350 --> 01:02:11,440
[Applause]

01:02:11,460 --> 01:02:34,010
[Music]

01:02:32,839 --> 01:02:40,089
foreign

01:02:34,010 --> 01:02:40,089
[Music]

01:02:46,839 --> 01:03:14,839
oh

01:02:48,810 --> 01:03:17,090
[Music]

01:03:14,839 --> 01:03:33,419
foreign

01:03:17,090 --> 01:03:33,419
[Music]

01:03:37,720 --> 01:04:12,470
[Music]

01:04:10,839 --> 01:04:29,070
so

01:04:12,470 --> 01:04:29,070
[Music]

01:04:31,920 --> 01:04:34,160
okay

01:04:36,160 --> 01:04:40,640
cool yeah well thanks um everyone for

01:04:39,839 --> 01:04:43,440
being patient

01:04:40,640 --> 01:04:44,240
and many thanks for sebastian for

01:04:43,440 --> 01:04:47,119
joining us

01:04:44,240 --> 01:04:48,720
where are you calling from sebastian uh

01:04:47,119 --> 01:04:51,599
i'm from france

01:04:48,720 --> 01:04:53,200
hello everyone so you're dying you're

01:04:51,599 --> 01:04:55,280
dining in from france

01:04:53,200 --> 01:04:56,480
yeah yeah this this event is just

01:04:55,280 --> 01:04:57,680
getting more and more international

01:04:56,480 --> 01:04:59,839
every time we do it

01:04:57,680 --> 01:05:01,200
uh yeah thanks so much for joining uh

01:04:59,839 --> 01:05:04,079
alejandroviti to

01:05:01,200 --> 01:05:06,160
do your talk now on records and topples

01:05:04,079 --> 01:05:08,720
so yeah thanks again for

01:05:06,160 --> 01:05:10,480
for being here yeah thank you for

01:05:08,720 --> 01:05:13,520
inviting me no problem

01:05:10,480 --> 01:05:16,880
so um i'm going to talk about

01:05:13,520 --> 01:05:19,280
records and tuples and i'm going to

01:05:16,880 --> 01:05:20,799
to explain why this is an important

01:05:19,280 --> 01:05:23,520
proposal to the

01:05:20,799 --> 01:05:26,160
to the javascript language so first to

01:05:23,520 --> 01:05:28,079
introduce myself i'm sever chandler bear

01:05:26,160 --> 01:05:29,839
you can follow me on twitter or read my

01:05:28,079 --> 01:05:32,400
blog post if you want

01:05:29,839 --> 01:05:33,359
i've been a developer for maybe over 10

01:05:32,400 --> 01:05:36,079
years

01:05:33,359 --> 01:05:37,119
and i reacted yeah early adopter a few

01:05:36,079 --> 01:05:39,200
years ago

01:05:37,119 --> 01:05:40,319
i've been in freelance for four years

01:05:39,200 --> 01:05:42,480
now and

01:05:40,319 --> 01:05:43,520
last year i had the opportunity to work

01:05:42,480 --> 01:05:46,359
for facebook

01:05:43,520 --> 01:05:47,680
on docus which is a document

01:05:46,359 --> 01:05:50,400
documentation

01:05:47,680 --> 01:05:51,119
statistics generator which permits to to

01:05:50,400 --> 01:05:54,160
easily

01:05:51,119 --> 01:05:57,599
deploy your documentation online by

01:05:54,160 --> 01:06:00,000
just writing markdown files

01:05:57,599 --> 01:06:01,280
so today i'm going to talk about records

01:06:00,000 --> 01:06:04,640
and tuples

01:06:01,280 --> 01:06:05,280
it's it's a proposal to the ecmascript

01:06:04,640 --> 01:06:08,559
language

01:06:05,280 --> 01:06:12,400
which is somehow javascript

01:06:08,559 --> 01:06:13,359
how does it work it is it is a proposal

01:06:12,400 --> 01:06:17,359
that is

01:06:13,359 --> 01:06:19,680
from on the tc39 committee

01:06:17,359 --> 01:06:21,039
which is the committee that is

01:06:19,680 --> 01:06:23,839
responsible to make

01:06:21,039 --> 01:06:25,280
evolutions to the javascript language it

01:06:23,839 --> 01:06:28,160
is currently in stage 2

01:06:25,280 --> 01:06:29,280
which which means it's already quite

01:06:28,160 --> 01:06:32,640
advanced

01:06:29,280 --> 01:06:36,240
and people know about this proposal

01:06:32,640 --> 01:06:39,039
for being new immutable data structures

01:06:36,240 --> 01:06:39,520
that will be native to javascript but i

01:06:39,039 --> 01:06:42,400
think

01:06:39,520 --> 01:06:42,720
the most important part of this proposal

01:06:42,400 --> 01:06:45,680
is

01:06:42,720 --> 01:06:47,680
uh is not widely known it's more about

01:06:45,680 --> 01:06:50,880
the compound primitive behavior which

01:06:47,680 --> 01:06:51,440
has a lot more impact for me than just

01:06:50,880 --> 01:06:54,640
being

01:06:51,440 --> 01:06:55,839
immutable data structures so to tonight

01:06:54,640 --> 01:06:57,520
i'd like to

01:06:55,839 --> 01:06:59,599
to explain to you why i think this

01:06:57,520 --> 01:07:03,039
proposal is very important

01:06:59,599 --> 01:07:05,280
and what are the the many advantages for

01:07:03,039 --> 01:07:07,440
for javascript in general and in

01:07:05,280 --> 01:07:10,559
particular react

01:07:07,440 --> 01:07:13,200
so to explain a bit at the

01:07:10,559 --> 01:07:14,079
the how the javascript language evolve

01:07:13,200 --> 01:07:17,119
over time

01:07:14,079 --> 01:07:17,839
there is the tc39 committee which is

01:07:17,119 --> 01:07:21,280
part of

01:07:17,839 --> 01:07:23,039
ecma international working group so it's

01:07:21,280 --> 01:07:25,359
a group of persons

01:07:23,039 --> 01:07:26,720
responsible to discuss the evolution of

01:07:25,359 --> 01:07:29,760
javascript

01:07:26,720 --> 01:07:32,799
and so there are proposals that

01:07:29,760 --> 01:07:35,280
that are in multiple stages

01:07:32,799 --> 01:07:36,640
so the first stage is the first stage is

01:07:35,280 --> 01:07:40,000
the the

01:07:36,640 --> 01:07:40,559
the id you just have a an informal id

01:07:40,000 --> 01:07:42,559
that you

01:07:40,559 --> 01:07:44,720
submit to the committee but you have to

01:07:42,559 --> 01:07:48,160
be a member of the committee to be

01:07:44,720 --> 01:07:51,440
able to submit such ideas because

01:07:48,160 --> 01:07:54,400
otherwise it would be quite messy

01:07:51,440 --> 01:07:56,640
the the stage one is you have a formal

01:07:54,400 --> 01:07:57,039
proposal which is not a specification

01:07:56,640 --> 01:08:00,640
but

01:07:57,039 --> 01:08:03,599
is somehow an idea but

01:08:00,640 --> 01:08:04,720
described in a in a more formal language

01:08:03,599 --> 01:08:07,920
with some api

01:08:04,720 --> 01:08:10,000
and examples the stage 2 you have a

01:08:07,920 --> 01:08:12,960
draft specification which means that

01:08:10,000 --> 01:08:14,559
you you know use a very formal language

01:08:12,960 --> 01:08:17,199
which is a

01:08:14,559 --> 01:08:18,560
quite hard to understand if you already

01:08:17,199 --> 01:08:22,239
read a

01:08:18,560 --> 01:08:25,359
specification from uh from ecmascript

01:08:22,239 --> 01:08:28,080
you also have polyfills you also have

01:08:25,359 --> 01:08:29,359
available bubble transforms that that

01:08:28,080 --> 01:08:32,480
should be available

01:08:29,359 --> 01:08:35,199
somehow from the stage two you you can

01:08:32,480 --> 01:08:36,799
start to play with the proposal in the

01:08:35,199 --> 01:08:39,440
in the sandbox or

01:08:36,799 --> 01:08:42,000
or locally if you try to to load

01:08:39,440 --> 01:08:45,279
polyfills and things like that

01:08:42,000 --> 01:08:47,759
the stage 3 is is

01:08:45,279 --> 01:08:48,400
more advanced you already have a quite

01:08:47,759 --> 01:08:51,600
stable

01:08:48,400 --> 01:08:53,279
specification you already you you are

01:08:51,600 --> 01:08:54,480
waiting for the last feedbacks to the

01:08:53,279 --> 01:08:56,719
proposal to make

01:08:54,480 --> 01:08:58,239
last minute changes before it is a part

01:08:56,719 --> 01:09:01,120
of javascript

01:08:58,239 --> 01:09:01,839
although um typescript will start to

01:09:01,120 --> 01:09:05,040
implement

01:09:01,839 --> 01:09:06,719
the proposal at stage free and also

01:09:05,040 --> 01:09:09,199
brother van der sten to

01:09:06,719 --> 01:09:10,799
to start implementing the features and

01:09:09,199 --> 01:09:12,560
maybe node.js if

01:09:10,799 --> 01:09:14,000
if it's meaningful for ngs and things

01:09:12,560 --> 01:09:17,120
like that so

01:09:14,000 --> 01:09:18,400
it's not um we don't know exactly i

01:09:17,120 --> 01:09:20,239
don't know exactly

01:09:18,400 --> 01:09:21,920
how the browser vendors choose to

01:09:20,239 --> 01:09:24,239
implement the future or not

01:09:21,920 --> 01:09:26,080
but generally at this stage they start

01:09:24,239 --> 01:09:28,560
to think about it and

01:09:26,080 --> 01:09:29,279
because the proposal is quite likely to

01:09:28,560 --> 01:09:32,319
end up in

01:09:29,279 --> 01:09:35,199
javascript and so when it's

01:09:32,319 --> 01:09:35,520
when it reached the stage 4 the proposal

01:09:35,199 --> 01:09:38,799
is

01:09:35,520 --> 01:09:41,920
completed and it will be in the next

01:09:38,799 --> 01:09:45,040
xml script version

01:09:41,920 --> 01:09:46,560
so today i i want to talk about records

01:09:45,040 --> 01:09:50,640
intervals let's present

01:09:46,560 --> 01:09:53,839
what this is somehow it's like

01:09:50,640 --> 01:09:55,600
regular objects and arrays so you are

01:09:53,839 --> 01:09:58,719
already used to

01:09:55,600 --> 01:10:01,280
these structures in javascript

01:09:58,719 --> 01:10:02,080
if you look at the record you can see

01:10:01,280 --> 01:10:04,960
that it's quite

01:10:02,080 --> 01:10:06,000
similar to an object in javascript you

01:10:04,960 --> 01:10:10,320
can create it

01:10:06,000 --> 01:10:12,880
but it has a hash syntax as a prefix

01:10:10,320 --> 01:10:15,040
you can log it like an object you can

01:10:12,880 --> 01:10:18,000
access an attribute like an object

01:10:15,040 --> 01:10:20,000
you can you can update it in an

01:10:18,000 --> 01:10:21,760
invitable way like an object but

01:10:20,000 --> 01:10:23,520
something different is that you can't

01:10:21,760 --> 01:10:27,760
reassign an attribute

01:10:23,520 --> 01:10:31,040
of this record because it is immutable

01:10:27,760 --> 01:10:34,000
so the tuple is quite similar but

01:10:31,040 --> 01:10:35,760
it's it's more like an immutable array

01:10:34,000 --> 01:10:39,040
you can create an array with

01:10:35,760 --> 01:10:41,679
the syntax and it is now a tuple

01:10:39,040 --> 01:10:42,159
you can log it to see the values of your

01:10:41,679 --> 01:10:45,520
temple

01:10:42,159 --> 01:10:48,159
you can access a value at the even index

01:10:45,520 --> 01:10:50,960
you but you can't really see any value

01:10:48,159 --> 01:10:52,719
at a given index because it is immutable

01:10:50,960 --> 01:10:54,880
and something interesting is that all

01:10:52,719 --> 01:10:58,640
the the methods that are available on

01:10:54,880 --> 01:10:59,360
the array like filters every and things

01:10:58,640 --> 01:11:02,320
like that

01:10:59,360 --> 01:11:02,880
are also available on the the record so

01:11:02,320 --> 01:11:06,560
so now

01:11:02,880 --> 01:11:09,600
it's quite easy to to intervert

01:11:06,560 --> 01:11:13,840
a record by an array and this versa

01:11:09,600 --> 01:11:13,840
if you don't do any imitation on it

01:11:14,080 --> 01:11:17,280
you can also update it in an immutable

01:11:16,239 --> 01:11:20,800
way by using

01:11:17,280 --> 01:11:23,120
the spread syntax to change the

01:11:20,800 --> 01:11:24,880
the value at a given index to add or

01:11:23,120 --> 01:11:28,239
other

01:11:24,880 --> 01:11:30,960
append or prepend a value to this

01:11:28,239 --> 01:11:32,159
tuple so what you need to understand is

01:11:30,960 --> 01:11:35,600
that the ash syntax

01:11:32,159 --> 01:11:37,679
is just a shortcut what you can do

01:11:35,600 --> 01:11:38,719
is also use the global record

01:11:37,679 --> 01:11:41,040
constructor

01:11:38,719 --> 01:11:42,159
of the additional methods like from

01:11:41,040 --> 01:11:45,760
entries

01:11:42,159 --> 01:11:49,199
or that form which permits to create

01:11:45,760 --> 01:11:51,679
records and tables from from a list of

01:11:49,199 --> 01:11:51,679
countries

01:11:51,840 --> 01:11:55,280
you can also nest records and tuples in

01:11:54,640 --> 01:11:58,480
a deep

01:11:55,280 --> 01:12:00,480
in a deeply nested way so you can create

01:11:58,480 --> 01:12:01,920
a record that contains the pulse and

01:12:00,480 --> 01:12:05,679
record and

01:12:01,920 --> 01:12:06,480
and recursively but very something that

01:12:05,679 --> 01:12:09,199
is forbidden

01:12:06,480 --> 01:12:10,880
you can't put non-primitive types inside

01:12:09,199 --> 01:12:12,960
a record so for example

01:12:10,880 --> 01:12:14,560
if you try to put a regular object

01:12:12,960 --> 01:12:16,159
inside a record you will have an

01:12:14,560 --> 01:12:18,400
exception that says

01:12:16,159 --> 01:12:20,560
that the object is not a primitive type

01:12:18,400 --> 01:12:22,640
so you can put it inside a record

01:12:20,560 --> 01:12:23,920
it's the same for many types in your

01:12:22,640 --> 01:12:27,360
speed like a date

01:12:23,920 --> 01:12:29,280
it is not a primitive type and it is

01:12:27,360 --> 01:12:32,560
actually immutable

01:12:29,280 --> 01:12:34,560
a class is also not a primitive type

01:12:32,560 --> 01:12:36,880
and the function is also not a primitive

01:12:34,560 --> 01:12:38,640
type so what are the primitive types

01:12:36,880 --> 01:12:42,159
that you can put in a

01:12:38,640 --> 01:12:43,760
in a record when i say record i mean a

01:12:42,159 --> 01:12:45,120
record on the pulse because it's a bit

01:12:43,760 --> 01:12:48,719
complicated to

01:12:45,120 --> 01:12:50,719
to say this um what can you put inside

01:12:48,719 --> 01:12:51,760
the record you can put all the primitive

01:12:50,719 --> 01:12:54,400
types like string

01:12:51,760 --> 01:12:55,280
number boolean begin symbol and define

01:12:54,400 --> 01:12:58,400
null

01:12:55,280 --> 01:13:00,640
and also you can put records intervals

01:12:58,400 --> 01:13:02,800
inside each other because records and

01:13:00,640 --> 01:13:04,480
tables are considered as compound

01:13:02,800 --> 01:13:07,760
primitives so somehow

01:13:04,480 --> 01:13:07,760
they are primitives too

01:13:08,560 --> 01:13:11,600
now let's talk about the most important

01:13:10,400 --> 01:13:15,280
part of the

01:13:11,600 --> 01:13:16,400
of the proposal it's about the identity

01:13:15,280 --> 01:13:18,800
of the

01:13:16,400 --> 01:13:20,080
of the recursion tables so let's see how

01:13:18,800 --> 01:13:22,560
it compares to

01:13:20,080 --> 01:13:23,280
objects and arrays if you have for

01:13:22,560 --> 01:13:26,400
example

01:13:23,280 --> 01:13:28,320
two object instances which have exactly

01:13:26,400 --> 01:13:30,400
the same content

01:13:28,320 --> 01:13:31,600
you can try to to use the triple equal

01:13:30,400 --> 01:13:34,239
operator to see

01:13:31,600 --> 01:13:34,960
the if the two object instances are

01:13:34,239 --> 01:13:37,040
equal

01:13:34,960 --> 01:13:39,199
and it will return false because these

01:13:37,040 --> 01:13:42,239
are two distinct instances

01:13:39,199 --> 01:13:44,400
uh the two objects are different in

01:13:42,239 --> 01:13:47,600
entities and if you modify one you don't

01:13:44,400 --> 01:13:49,679
modify the over and vice versa but

01:13:47,600 --> 01:13:52,080
if you if you use the triple equal

01:13:49,679 --> 01:13:54,640
operator for one attribute like the

01:13:52,080 --> 01:13:55,199
the value one which is a primitive type

01:13:54,640 --> 01:13:57,679
um

01:13:55,199 --> 01:13:58,560
the value one of y of the first object

01:13:57,679 --> 01:14:01,520
and the value one

01:13:58,560 --> 01:14:03,679
of the second object are equal because

01:14:01,520 --> 01:14:06,960
the primitive types are always

01:14:03,679 --> 01:14:08,800
equal when their values are equal and

01:14:06,960 --> 01:14:11,040
in the same way if you look at the b

01:14:08,800 --> 01:14:14,080
attribute you can see that

01:14:11,040 --> 01:14:16,560
the error which contains three and four

01:14:14,080 --> 01:14:17,520
are containing exactly the same for both

01:14:16,560 --> 01:14:20,640
objects but

01:14:17,520 --> 01:14:21,920
again the the two arrows have different

01:14:20,640 --> 01:14:24,480
identities

01:14:21,920 --> 01:14:27,440
so um the triple equal operator will

01:14:24,480 --> 01:14:30,080
wait on force in this case too

01:14:27,440 --> 01:14:31,440
now let's see how the what's the

01:14:30,080 --> 01:14:34,400
behavior for recording

01:14:31,440 --> 01:14:36,239
in tuples this is very different from

01:14:34,400 --> 01:14:39,679
objects and arrays because

01:14:36,239 --> 01:14:40,480
if two records have exactly the same

01:14:39,679 --> 01:14:43,040
content

01:14:40,480 --> 01:14:45,920
it's guaranteed that the triple equal

01:14:43,040 --> 01:14:48,960
operator will return true

01:14:45,920 --> 01:14:51,440
so somehow um

01:14:48,960 --> 01:14:53,120
the the records and tuples are compound

01:14:51,440 --> 01:14:55,440
primitives because

01:14:53,120 --> 01:14:56,719
the primitive values if they if they

01:14:55,440 --> 01:14:59,120
have the same value

01:14:56,719 --> 01:15:01,040
they are always equal and the records

01:14:59,120 --> 01:15:04,719
and doubles if they have the same value

01:15:01,040 --> 01:15:06,400
they are always equal

01:15:04,719 --> 01:15:08,880
so this is very important to understand

01:15:06,400 --> 01:15:11,840
because it has a lot of

01:15:08,880 --> 01:15:13,199
implications for in particular react i

01:15:11,840 --> 01:15:15,840
will explain later with some

01:15:13,199 --> 01:15:19,040
demos so that you can understand what uh

01:15:15,840 --> 01:15:20,440
what this means for react in particular

01:15:19,040 --> 01:15:22,239
now let's talk about the

01:15:20,440 --> 01:15:24,560
interoperability

01:15:22,239 --> 01:15:25,600
and records and tuples are very

01:15:24,560 --> 01:15:27,920
interoperable

01:15:25,600 --> 01:15:30,560
with json because json only contains

01:15:27,920 --> 01:15:33,920
primitive values it can contain

01:15:30,560 --> 01:15:35,600
arrays it can contain strings numbers

01:15:33,920 --> 01:15:38,640
and things like that so

01:15:35,600 --> 01:15:41,360
somehow a json object is

01:15:38,640 --> 01:15:43,199
an object which contains generally just

01:15:41,360 --> 01:15:44,400
primitives but you can easily convert it

01:15:43,199 --> 01:15:48,159
to a record

01:15:44,400 --> 01:15:51,760
because all the values inside json

01:15:48,159 --> 01:15:53,120
are compatible with are convertible to a

01:15:51,760 --> 01:15:56,800
recorder

01:15:53,120 --> 01:15:58,320
and if you have an object or an array

01:15:56,800 --> 01:15:59,600
it's not always compatible because for

01:15:58,320 --> 01:16:02,640
example your object may

01:15:59,600 --> 01:16:04,159
contain a function but this is not the

01:16:02,640 --> 01:16:06,719
case for json because

01:16:04,159 --> 01:16:08,560
a json file can't contain a function it

01:16:06,719 --> 01:16:11,440
can only contain the strings and

01:16:08,560 --> 01:16:12,320
numbers and things like that so even if

01:16:11,440 --> 01:16:14,719
you

01:16:12,320 --> 01:16:16,320
if you have nested objects and arrays

01:16:14,719 --> 01:16:19,600
inside the json object

01:16:16,320 --> 01:16:20,640
they are easily compatible to a record

01:16:19,600 --> 01:16:24,080
or a table because

01:16:20,640 --> 01:16:25,040
you can use the the form and from entry

01:16:24,080 --> 01:16:28,800
the

01:16:25,040 --> 01:16:28,800
methods to to do the conversion

01:16:28,880 --> 01:16:36,159
so um how do we update records intervals

01:16:32,719 --> 01:16:38,239
and it's still um it's

01:16:36,159 --> 01:16:40,320
if you are used to imitable data

01:16:38,239 --> 01:16:40,880
structures in particular in react you

01:16:40,320 --> 01:16:42,719
know that

01:16:40,880 --> 01:16:44,320
it can be a bit complicated to update

01:16:42,719 --> 01:16:46,000
objects in an imageable way

01:16:44,320 --> 01:16:48,080
particularly if you have the nested

01:16:46,000 --> 01:16:51,199
attributes you have to

01:16:48,080 --> 01:16:54,800
use a lot of spread syntax to

01:16:51,199 --> 01:16:57,520
to to spread the previous values and

01:16:54,800 --> 01:16:59,040
mutate the the new attributes that you

01:16:57,520 --> 01:17:02,400
want to change

01:16:59,040 --> 01:17:03,440
um so with records it's it's not going

01:17:02,400 --> 01:17:05,840
to be easier

01:17:03,440 --> 01:17:07,840
you still have to use this syntax and

01:17:05,840 --> 01:17:09,199
you will still need to use the library

01:17:07,840 --> 01:17:11,360
like maybe a

01:17:09,199 --> 01:17:13,040
dash or image yes i don't know exactly

01:17:11,360 --> 01:17:15,600
how this library is with

01:17:13,040 --> 01:17:18,239
will support records and tuples when the

01:17:15,600 --> 01:17:18,239
time will come

01:17:18,400 --> 01:17:22,560
but there is a child proposal to to

01:17:21,199 --> 01:17:24,800
record them tuples

01:17:22,560 --> 01:17:26,480
which will permit to use a new syntax

01:17:24,800 --> 01:17:28,159
that will be much more convenient to

01:17:26,480 --> 01:17:31,280
update the

01:17:28,159 --> 01:17:32,800
libraries in the the records intervals

01:17:31,280 --> 01:17:35,920
in a nested way

01:17:32,800 --> 01:17:37,920
and uh i think it will uh remove the

01:17:35,920 --> 01:17:40,800
need for libraries like image yes

01:17:37,920 --> 01:17:42,320
if you ever if you have ever used it

01:17:40,800 --> 01:17:44,800
even the creator

01:17:42,320 --> 01:17:46,480
make a restart was quite happy to see

01:17:44,800 --> 01:17:48,400
this proposal because

01:17:46,480 --> 01:17:52,239
he thinks that it deprecates at the

01:17:48,400 --> 01:17:52,239
library but he created it

01:17:52,719 --> 01:17:56,880
now let's talk about the benefits of

01:17:54,320 --> 01:17:59,679
records and tuples for react

01:17:56,880 --> 01:18:00,000
i i think it has many benefits uh i will

01:17:59,679 --> 01:18:02,800
uh

01:18:00,000 --> 01:18:04,239
just explain four of them for example

01:18:02,800 --> 01:18:06,880
the the security

01:18:04,239 --> 01:18:08,400
the behavior the performance and the rps

01:18:06,880 --> 01:18:10,480
you face

01:18:08,400 --> 01:18:12,960
so let's talk about the security you

01:18:10,480 --> 01:18:14,880
know when you you use react

01:18:12,960 --> 01:18:17,040
that it's not a good practice to mutate

01:18:14,880 --> 01:18:20,000
the the props that you receive

01:18:17,040 --> 01:18:22,719
now if you receive records as props you

01:18:20,000 --> 01:18:24,560
can't mutate them so if you try to

01:18:22,719 --> 01:18:27,360
for example if you receive a profile

01:18:24,560 --> 01:18:29,920
prop in a in your rack component

01:18:27,360 --> 01:18:30,880
and you try to to modify the name you

01:18:29,920 --> 01:18:34,159
will not be

01:18:30,880 --> 01:18:35,920
able to do this because because you

01:18:34,159 --> 01:18:38,080
you will get an exception if you try to

01:18:35,920 --> 01:18:40,000
do that so

01:18:38,080 --> 01:18:41,360
so now it's already possible today if

01:18:40,000 --> 01:18:43,120
you use object freeze

01:18:41,360 --> 01:18:44,560
in a deeply nested way to have the same

01:18:43,120 --> 01:18:48,000
security but

01:18:44,560 --> 01:18:48,880
i think it has a it has a cost to use a

01:18:48,000 --> 01:18:52,080
library to do

01:18:48,880 --> 01:18:55,360
that and it's better if it can be

01:18:52,080 --> 01:18:57,199
it can be native to javascript so this

01:18:55,360 --> 01:19:01,040
is an additional security that you

01:18:57,199 --> 01:19:04,719
you get for free now more importantly

01:19:01,040 --> 01:19:07,280
the some behavioral impacts

01:19:04,719 --> 01:19:08,000
so let's imagine that you have a right

01:19:07,280 --> 01:19:12,080
component like

01:19:08,000 --> 01:19:12,719
that you are creating an api filters

01:19:12,080 --> 01:19:16,000
object

01:19:12,719 --> 01:19:18,320
from two other objects one

01:19:16,000 --> 01:19:19,440
is user filter and the other is company

01:19:18,320 --> 01:19:22,880
filter

01:19:19,440 --> 01:19:25,280
and you use this api filters object as a

01:19:22,880 --> 01:19:28,000
dependency in the react effect

01:19:25,280 --> 01:19:28,480
so what what will happen here the thing

01:19:28,000 --> 01:19:31,120
is

01:19:28,480 --> 01:19:33,440
every time this component renders the

01:19:31,120 --> 01:19:36,000
api filters object is recreated so

01:19:33,440 --> 01:19:36,960
it has a different entity each time it

01:19:36,000 --> 01:19:40,000
renders

01:19:36,960 --> 01:19:42,000
and the user effect will

01:19:40,000 --> 01:19:43,520
will have this ipf filters object in the

01:19:42,000 --> 01:19:46,000
dependency array so the

01:19:43,520 --> 01:19:47,360
the user effect will trigger the effect

01:19:46,000 --> 01:19:50,560
for each render

01:19:47,360 --> 01:19:51,520
which will fetch the user and company

01:19:50,560 --> 01:19:54,159
data

01:19:51,520 --> 01:19:55,760
which will then set the result in the in

01:19:54,159 --> 01:19:58,800
the component state

01:19:55,760 --> 01:20:01,760
and then the component will render and

01:19:58,800 --> 01:20:02,159
the ipf filters will be recreated which

01:20:01,760 --> 01:20:03,760
will

01:20:02,159 --> 01:20:05,920
trigger the the values effect and it

01:20:03,760 --> 01:20:09,280
will create an infinite loop

01:20:05,920 --> 01:20:11,440
but the thing is if instead of using an

01:20:09,280 --> 01:20:13,199
object you use a record here

01:20:11,440 --> 01:20:14,800
you will not have this infinite loop

01:20:13,199 --> 01:20:17,760
because

01:20:14,800 --> 01:20:19,199
as long as the ipf as long as the ipl

01:20:17,760 --> 01:20:20,960
filters are the same

01:20:19,199 --> 01:20:22,639
contain exactly the same data for

01:20:20,960 --> 01:20:26,400
example the username is uh

01:20:22,639 --> 01:20:28,480
is sebastian uh you will not have the

01:20:26,400 --> 01:20:29,760
the use effect will not really

01:20:28,480 --> 01:20:32,719
re-execute because the

01:20:29,760 --> 01:20:34,560
the api filters object identity will

01:20:32,719 --> 01:20:37,679
will keep being the same

01:20:34,560 --> 01:20:40,159
so so the dependency array will uh

01:20:37,679 --> 01:20:41,600
react will be able to understand that it

01:20:40,159 --> 01:20:45,280
is not worth it to

01:20:41,600 --> 01:20:48,159
to run the effect so this

01:20:45,280 --> 01:20:49,920
i think here for such use case records

01:20:48,159 --> 01:20:51,120
intervals are very interesting because

01:20:49,920 --> 01:20:53,280
it will solve a lot of

01:20:51,120 --> 01:20:54,800
bugs that that we have in wrecked

01:20:53,280 --> 01:20:58,000
applications today

01:20:54,800 --> 01:21:01,280
where the the hooks tend to

01:20:58,000 --> 01:21:01,760
to re-execute execute not always when we

01:21:01,280 --> 01:21:05,280
want

01:21:01,760 --> 01:21:08,800
because we have the the objects and our

01:21:05,280 --> 01:21:11,280
identities that are constantly changing

01:21:08,800 --> 01:21:12,639
and there are even libraries that were

01:21:11,280 --> 01:21:14,800
created by people like

01:21:12,639 --> 01:21:16,639
mcdot to prevent infinite looks in

01:21:14,800 --> 01:21:18,960
direct applications to

01:21:16,639 --> 01:21:20,400
for example you can use a used deeply

01:21:18,960 --> 01:21:21,520
equal effect or something like that

01:21:20,400 --> 01:21:23,920
which will

01:21:21,520 --> 01:21:25,520
compare the previous ipf filters with

01:21:23,920 --> 01:21:27,840
the next one with a dp

01:21:25,520 --> 01:21:30,159
quality check to see if the object

01:21:27,840 --> 01:21:31,920
contains the same data

01:21:30,159 --> 01:21:33,440
there are a lot of solutions like this

01:21:31,920 --> 01:21:34,639
to to try to solve this problem

01:21:33,440 --> 01:21:36,880
currently but i think

01:21:34,639 --> 01:21:38,719
records and tuples is a very idiomatic

01:21:36,880 --> 01:21:40,480
solution to this problem to

01:21:38,719 --> 01:21:42,080
to solve you just have to use records

01:21:40,480 --> 01:21:43,440
and tuples whenever you can and the

01:21:42,080 --> 01:21:47,199
problem is

01:21:43,440 --> 01:21:51,120
it solves it a lot of

01:21:47,199 --> 01:21:52,000
a lot of the time so in the same way you

01:21:51,120 --> 01:21:54,960
have

01:21:52,000 --> 01:21:56,080
potential performance benefits it's

01:21:54,960 --> 01:21:58,719
quite similar to

01:21:56,080 --> 01:22:00,719
the use effect here imagine you get a

01:21:58,719 --> 01:22:01,520
user and a company and you are trying to

01:22:00,719 --> 01:22:04,239
create

01:22:01,520 --> 01:22:05,600
a user and company object in your inner

01:22:04,239 --> 01:22:08,719
right component

01:22:05,600 --> 01:22:11,440
and then you pass it as prop to another

01:22:08,719 --> 01:22:13,040
component which is memorized so what you

01:22:11,440 --> 01:22:15,360
expect is that the username

01:22:13,040 --> 01:22:17,520
and company view component here is

01:22:15,360 --> 01:22:20,480
optimized with react memo

01:22:17,520 --> 01:22:22,880
and you you don't want it to remember to

01:22:20,480 --> 01:22:26,400
you don't want it to remember

01:22:22,880 --> 01:22:29,280
no sorry to render if the

01:22:26,400 --> 01:22:30,080
data has not changed but the thing is if

01:22:29,280 --> 01:22:32,480
you create

01:22:30,080 --> 01:22:34,560
a new user and company object identity

01:22:32,480 --> 01:22:37,199
every time they are rendered

01:22:34,560 --> 01:22:39,600
the user and company view will not be

01:22:37,199 --> 01:22:42,800
able to optimize the rendering because

01:22:39,600 --> 01:22:44,159
it receives a new object a user and

01:22:42,800 --> 01:22:46,320
compiling instance

01:22:44,159 --> 01:22:47,199
which will trigger the remainder again

01:22:46,320 --> 01:22:51,040
and again

01:22:47,199 --> 01:22:53,840
and that the you have a lot of wasted

01:22:51,040 --> 01:22:56,320
resources for for that that could be

01:22:53,840 --> 01:22:58,080
optimized if you just choose a record

01:22:56,320 --> 01:22:59,920
because if you use a record here the

01:22:58,080 --> 01:23:00,719
user and company object will have a much

01:22:59,920 --> 01:23:03,920
more stable

01:23:00,719 --> 01:23:06,719
identity and the the user and your

01:23:03,920 --> 01:23:07,600
company the user and companies usori

01:23:06,719 --> 01:23:09,600
will be able

01:23:07,600 --> 01:23:11,679
much more easily to to optimize the

01:23:09,600 --> 01:23:13,679
rendering because it always received

01:23:11,679 --> 01:23:14,800
the same object and the react memo is

01:23:13,679 --> 01:23:18,719
able to

01:23:14,800 --> 01:23:18,719
understand that and block the rendering

01:23:18,880 --> 01:23:22,880
so in the in a similar way i think there

01:23:21,520 --> 01:23:26,000
are benefits for the

01:23:22,880 --> 01:23:28,560
the api surface um it's not

01:23:26,000 --> 01:23:30,239
already decided how what will be the

01:23:28,560 --> 01:23:33,520
syntax for typescript

01:23:30,239 --> 01:23:36,719
so this is um this is a

01:23:33,520 --> 01:23:38,480
just uh some syntax that i invented

01:23:36,719 --> 01:23:40,000
there is no immutable record in that

01:23:38,480 --> 01:23:41,920
script actually there is a record

01:23:40,000 --> 01:23:45,520
already so there is some kind of uh

01:23:41,920 --> 01:23:47,360
conflict because it's not sure how

01:23:45,520 --> 01:23:48,719
typescript will introduce records and

01:23:47,360 --> 01:23:50,480
tuples because

01:23:48,719 --> 01:23:52,400
there is already a record type which is

01:23:50,480 --> 01:23:54,719
not an imitable type it's more like an

01:23:52,400 --> 01:23:54,719
object

01:23:54,800 --> 01:23:59,280
so with typescript i think there are

01:23:57,199 --> 01:24:01,840
benefits because you will be able to

01:23:59,280 --> 01:24:02,800
to tell react for example that your

01:24:01,840 --> 01:24:06,560
components

01:24:02,800 --> 01:24:09,679
only accept immutable record

01:24:06,560 --> 01:24:12,880
instead of a regular object and somehow

01:24:09,679 --> 01:24:14,320
it is more explicit because now you will

01:24:12,880 --> 01:24:16,880
be able to use

01:24:14,320 --> 01:24:19,440
maybe hooks that really need to to

01:24:16,880 --> 01:24:21,520
receive stable identities

01:24:19,440 --> 01:24:23,280
it's very easy in react applications to

01:24:21,520 --> 01:24:24,080
have bugs where for example you you

01:24:23,280 --> 01:24:25,840
create a hook

01:24:24,080 --> 01:24:27,120
and you know that the hook will only

01:24:25,840 --> 01:24:30,159
work if for example

01:24:27,120 --> 01:24:31,280
the the the permit the parameters you

01:24:30,159 --> 01:24:34,560
pass to it

01:24:31,280 --> 01:24:35,440
are stable so if you always pass new

01:24:34,560 --> 01:24:38,320
identities

01:24:35,440 --> 01:24:38,880
maybe the hook will trigger weird things

01:24:38,320 --> 01:24:40,639
like uh

01:24:38,880 --> 01:24:42,320
unwanted side effects and things like

01:24:40,639 --> 01:24:45,040
that now you have

01:24:42,320 --> 01:24:47,199
you have the ability to to use with

01:24:45,040 --> 01:24:48,480
typescript and a more explicit api

01:24:47,199 --> 01:24:51,600
contract to say

01:24:48,480 --> 01:24:53,199
hey i'm creating an api here i want you

01:24:51,600 --> 01:24:55,440
to provide me

01:24:53,199 --> 01:24:56,480
very stable identities if the if the

01:24:55,440 --> 01:24:58,400
data doesn't change

01:24:56,480 --> 01:25:01,280
don't pass me uh objects that are

01:24:58,400 --> 01:25:03,600
different because i expect you to

01:25:01,280 --> 01:25:05,679
to to provide me uh stable objects

01:25:03,600 --> 01:25:08,000
somehow

01:25:05,679 --> 01:25:10,080
so this is a bit complicated to explain

01:25:08,000 --> 01:25:12,320
of that so i'm trying to

01:25:10,080 --> 01:25:14,000
i'm going to show you two real world

01:25:12,320 --> 01:25:14,639
demos so that maybe you will understand

01:25:14,000 --> 01:25:17,120
better

01:25:14,639 --> 01:25:18,880
how records and tuples will solve uh

01:25:17,120 --> 01:25:23,440
such problems

01:25:18,880 --> 01:25:23,440
so let's see uh let's look at the demos

01:25:24,239 --> 01:25:27,840
wait a minute yeah

01:25:28,719 --> 01:25:35,040
so this is a wrecked application

01:25:31,760 --> 01:25:37,440
um i i'm going to to run it soon so

01:25:35,040 --> 01:25:38,080
for now i'm just showing the card we are

01:25:37,440 --> 01:25:42,320
creating

01:25:38,080 --> 01:25:44,320
a list a list of a user

01:25:42,320 --> 01:25:46,080
you can see that there is the the user

01:25:44,320 --> 01:25:49,040
list component here

01:25:46,080 --> 01:25:50,000
it is just it receives the users as

01:25:49,040 --> 01:25:53,040
props

01:25:50,000 --> 01:25:55,199
and then it just loop over the users

01:25:53,040 --> 01:25:57,120
and it will render the user list items

01:25:55,199 --> 01:25:58,960
here

01:25:57,120 --> 01:26:01,280
you can see that all the components are

01:25:58,960 --> 01:26:04,719
memorized

01:26:01,280 --> 01:26:05,199
for to optimize the rendering now let's

01:26:04,719 --> 01:26:09,120
see

01:26:05,199 --> 01:26:10,880
the application that that i'm going to

01:26:09,120 --> 01:26:12,560
maybe it's a bit too big because we

01:26:10,880 --> 01:26:15,520
don't see it

01:26:12,560 --> 01:26:18,159
at all so the the application that i'm

01:26:15,520 --> 01:26:18,159
going to run

01:26:18,400 --> 01:26:22,560
is going to fetch the list of users from

01:26:21,440 --> 01:26:25,120
a backend

01:26:22,560 --> 01:26:26,719
actually it's a from a fake api method

01:26:25,120 --> 01:26:27,920
because i don't have a back-end for this

01:26:26,719 --> 01:26:30,320
demo but

01:26:27,920 --> 01:26:31,920
let's uh think about calling the

01:26:30,320 --> 01:26:34,159
back-end

01:26:31,920 --> 01:26:35,199
we we are going to to have filters on

01:26:34,159 --> 01:26:37,199
the application

01:26:35,199 --> 01:26:38,320
i will have for example the ability to

01:26:37,199 --> 01:26:40,639
filter by name

01:26:38,320 --> 01:26:42,560
and to filter by sex and we are going to

01:26:40,639 --> 01:26:44,719
see the

01:26:42,560 --> 01:26:46,719
the program that as i described about

01:26:44,719 --> 01:26:49,520
the infinite loop

01:26:46,719 --> 01:26:52,000
so if we run this application let's see

01:26:49,520 --> 01:26:55,600
what happens

01:26:52,000 --> 01:26:59,199
you can see on the on this side

01:26:55,600 --> 01:27:01,920
that the the application here is uh

01:26:59,199 --> 01:27:03,360
is working but you can see on the log

01:27:01,920 --> 01:27:05,600
there is something happening

01:27:03,360 --> 01:27:07,520
uh you can see there is an infinite loop

01:27:05,600 --> 01:27:10,159
it it keeps

01:27:07,520 --> 01:27:11,840
it keeps fetching the user again and

01:27:10,159 --> 01:27:13,679
again so basically if you use this in

01:27:11,840 --> 01:27:16,639
the rear world you are going to query

01:27:13,679 --> 01:27:18,960
your backend every second because

01:27:16,639 --> 01:27:20,239
because of the where is the infinite

01:27:18,960 --> 01:27:24,080
loop in the use effect

01:27:20,239 --> 01:27:26,030
so what happens here the problem

01:27:24,080 --> 01:27:27,679
is that you are um

01:27:26,030 --> 01:27:30,239
[Music]

01:27:27,679 --> 01:27:31,199
you are you have the list of users here

01:27:30,239 --> 01:27:33,440
but the thing is

01:27:31,199 --> 01:27:34,800
every time you re-fetch the users from

01:27:33,440 --> 01:27:36,719
the backend

01:27:34,800 --> 01:27:38,000
what happens is that the back-end is

01:27:36,719 --> 01:27:41,120
giving you

01:27:38,000 --> 01:27:42,880
a different object identity so this is

01:27:41,120 --> 01:27:45,280
this is something that can be surprising

01:27:42,880 --> 01:27:47,760
but the every time you refresh

01:27:45,280 --> 01:27:49,920
the the list of users even if the list

01:27:47,760 --> 01:27:52,159
of users didn't actually change

01:27:49,920 --> 01:27:54,239
when you when you deserialize the

01:27:52,159 --> 01:27:56,159
weapons from your backend you always get

01:27:54,239 --> 01:27:58,960
a new objective entity

01:27:56,159 --> 01:28:01,840
and as you get a new objective entity

01:27:58,960 --> 01:28:01,840
you will trigger

01:28:02,719 --> 01:28:05,440
you will um

01:28:06,159 --> 01:28:10,000
no sorry this is a this is not what i

01:28:08,639 --> 01:28:13,280
wanted to say

01:28:10,000 --> 01:28:15,600
no so if i melted with

01:28:13,280 --> 01:28:17,280
another demo so what i wanted to say is

01:28:15,600 --> 01:28:17,679
that here you can see that the filters

01:28:17,280 --> 01:28:20,239
is

01:28:17,679 --> 01:28:21,440
is a composition of the name and the sex

01:28:20,239 --> 01:28:23,120
filter

01:28:21,440 --> 01:28:26,560
so for example here i have the name i

01:28:23,120 --> 01:28:28,480
can type type sebastian

01:28:26,560 --> 01:28:31,120
and it is able to filter but you can see

01:28:28,480 --> 01:28:34,560
that it triggers an infinite loop

01:28:31,120 --> 01:28:36,320
now i can also filter by uh bisects it

01:28:34,560 --> 01:28:39,840
works

01:28:36,320 --> 01:28:42,000
but this is not the um

01:28:39,840 --> 01:28:44,000
but this doesn't you can see that there

01:28:42,000 --> 01:28:44,560
are still this infinite loop program so

01:28:44,000 --> 01:28:46,800
now

01:28:44,560 --> 01:28:47,600
let's see why this problem that happens

01:28:46,800 --> 01:28:50,800
it's because the

01:28:47,600 --> 01:28:52,639
filters object here is always a new

01:28:50,800 --> 01:28:53,840
objective that is different from the

01:28:52,639 --> 01:28:56,880
previous one

01:28:53,840 --> 01:28:59,920
and the dependencies dependency here

01:28:56,880 --> 01:29:02,000
is going to to have this filters object

01:28:59,920 --> 01:29:03,840
because we need this filter to fetch the

01:29:02,000 --> 01:29:05,600
data from the backend

01:29:03,840 --> 01:29:06,880
and it is going to create the infinite

01:29:05,600 --> 01:29:09,040
loop because it then

01:29:06,880 --> 01:29:10,960
sets the results which then retrigger

01:29:09,040 --> 01:29:12,480
the render which then recreates the

01:29:10,960 --> 01:29:15,520
filters object here

01:29:12,480 --> 01:29:15,920
now if we just use the ash syntax in

01:29:15,520 --> 01:29:19,120
front

01:29:15,920 --> 01:29:22,800
of the object here what you can see

01:29:19,120 --> 01:29:25,920
here is that it's it the infinite group

01:29:22,800 --> 01:29:26,800
has stopped to to render and now for

01:29:25,920 --> 01:29:30,800
example if

01:29:26,800 --> 01:29:33,360
if i just change the the filters here

01:29:30,800 --> 01:29:34,639
i am able to call the backend with the

01:29:33,360 --> 01:29:36,800
new filters and

01:29:34,639 --> 01:29:37,760
the the backend is only called when the

01:29:36,800 --> 01:29:41,520
filters change

01:29:37,760 --> 01:29:41,520
and there is no infinite loop anymore

01:29:42,000 --> 01:29:46,960
so um now this is the

01:29:45,199 --> 01:29:48,560
this is the demo so there are

01:29:46,960 --> 01:29:49,840
implementation details that i don't show

01:29:48,560 --> 01:29:52,800
because it's not very

01:29:49,840 --> 01:29:54,400
important it's more i think the the

01:29:52,800 --> 01:29:56,800
important part is this uh

01:29:54,400 --> 01:29:57,679
this line in particular like permits to

01:29:56,800 --> 01:30:00,080
to avoid this

01:29:57,679 --> 01:30:01,120
infinite loop and i think it's quite you

01:30:00,080 --> 01:30:03,199
uh quite

01:30:01,120 --> 01:30:05,199
common to actually create objects and

01:30:03,199 --> 01:30:06,639
pass them to dependency arrays by

01:30:05,199 --> 01:30:09,120
mistake and it can

01:30:06,639 --> 01:30:11,600
lead to a lot of problems if you if

01:30:09,120 --> 01:30:15,280
you're familiar with rack maybe you

01:30:11,600 --> 01:30:19,520
already saw these problems before

01:30:15,280 --> 01:30:19,520
so now i'm going to present another demo

01:30:19,600 --> 01:30:25,280
this demo we have a user which is a

01:30:23,360 --> 01:30:26,880
we have a user component that is

01:30:25,280 --> 01:30:29,920
optimized so we can see that there is

01:30:26,880 --> 01:30:29,920
react memo here

01:30:30,960 --> 01:30:37,520
you hear me yeah okay

01:30:34,000 --> 01:30:38,560
so uh uh so there is react memo because

01:30:37,520 --> 01:30:40,639
we wanted to

01:30:38,560 --> 01:30:41,760
to optimize the rendering there is also

01:30:40,639 --> 01:30:44,080
a company

01:30:41,760 --> 01:30:45,040
component on which we use react memo

01:30:44,080 --> 01:30:46,880
because we want to

01:30:45,040 --> 01:30:48,320
measure on the ring and there is the

01:30:46,880 --> 01:30:51,840
user and company

01:30:48,320 --> 01:30:54,320
component also optimized which will

01:30:51,840 --> 01:30:57,440
use the user and company independent

01:30:54,320 --> 01:30:57,440
components to render

01:30:57,679 --> 01:31:03,840
now i have another application

01:31:01,600 --> 01:31:04,800
what we will do is that we are going to

01:31:03,840 --> 01:31:07,760
fetch the

01:31:04,800 --> 01:31:08,080
the data from the backend every second

01:31:07,760 --> 01:31:11,040
and

01:31:08,080 --> 01:31:13,600
set it to state and then render the user

01:31:11,040 --> 01:31:16,320
and company

01:31:13,600 --> 01:31:19,600
and we we are going to track also when

01:31:16,320 --> 01:31:23,440
the components will render

01:31:19,600 --> 01:31:26,080
so what you can see here is that

01:31:23,440 --> 01:31:27,760
i'm i'm i'm refreshing the data from the

01:31:26,080 --> 01:31:30,719
backend every second

01:31:27,760 --> 01:31:32,719
and the the data doesn't change much

01:31:30,719 --> 01:31:34,960
only my age is incrementing

01:31:32,719 --> 01:31:36,239
every five seconds but what you can see

01:31:34,960 --> 01:31:39,679
in this demo is that

01:31:36,239 --> 01:31:42,320
even if the data very very changed

01:31:39,679 --> 01:31:44,400
the all the components constantly remain

01:31:42,320 --> 01:31:46,480
there because

01:31:44,400 --> 01:31:48,480
there is something wrong here and the

01:31:46,480 --> 01:31:51,920
thing is every time you call

01:31:48,480 --> 01:31:53,679
your backend api it returns

01:31:51,920 --> 01:31:55,600
a new object for example if you are if

01:31:53,679 --> 01:31:57,800
you have fetch the data from the backend

01:31:55,600 --> 01:32:00,400
and you call fetch

01:31:57,800 --> 01:32:01,040
response.json to get the the json object

01:32:00,400 --> 01:32:03,600
back

01:32:01,040 --> 01:32:04,320
it will give you a different objective

01:32:03,600 --> 01:32:06,000
entity

01:32:04,320 --> 01:32:07,600
even if it contains exactly the same

01:32:06,000 --> 01:32:10,080
data as it uh

01:32:07,600 --> 01:32:11,040
as it used to to contain the the

01:32:10,080 --> 01:32:13,920
previous call

01:32:11,040 --> 01:32:15,199
you will get a new objective entity and

01:32:13,920 --> 01:32:18,320
the this object

01:32:15,199 --> 01:32:19,760
will be set in the react state here you

01:32:18,320 --> 01:32:23,040
will pass this object

01:32:19,760 --> 01:32:25,360
as a as a prop in this component and

01:32:23,040 --> 01:32:27,199
despite the user and company the user

01:32:25,360 --> 01:32:29,920
and the company component being

01:32:27,199 --> 01:32:31,600
all three optimized with react memo you

01:32:29,920 --> 01:32:33,199
will have all the components we are in

01:32:31,600 --> 01:32:35,360
there because all the objects

01:32:33,199 --> 01:32:36,480
from the new backend weapons have

01:32:35,360 --> 01:32:39,760
actually different

01:32:36,480 --> 01:32:41,760
objective entities so this is quite

01:32:39,760 --> 01:32:44,080
something that happens quite uh

01:32:41,760 --> 01:32:45,199
quite often in real world applications

01:32:44,080 --> 01:32:47,040
because for example

01:32:45,199 --> 01:32:48,719
you might want to refresh the data when

01:32:47,040 --> 01:32:50,560
you navigate you might say for example

01:32:48,719 --> 01:32:53,040
when the user click on the navbar

01:32:50,560 --> 01:32:53,840
i wanted to to refresh the user data

01:32:53,040 --> 01:32:56,320
because

01:32:53,840 --> 01:32:58,719
i want to be a bit pessimistic and maybe

01:32:56,320 --> 01:32:59,600
maybe his avatar has changed in another

01:32:58,719 --> 01:33:01,760
tab or

01:32:59,600 --> 01:33:03,760
whatever or you want somehow to keep

01:33:01,760 --> 01:33:07,360
fresh data in your ui

01:33:03,760 --> 01:33:09,040
and the thing is you are every time you

01:33:07,360 --> 01:33:09,679
refresh the data from the backend you

01:33:09,040 --> 01:33:11,520
are going to

01:33:09,679 --> 01:33:12,719
waste a lot of resources because

01:33:11,520 --> 01:33:15,600
basically all

01:33:12,719 --> 01:33:16,560
your react application has to render

01:33:15,600 --> 01:33:18,639
because

01:33:16,560 --> 01:33:20,080
you receive a new payload and this

01:33:18,639 --> 01:33:22,480
payload is used in

01:33:20,080 --> 01:33:23,360
a lot of places but the thing is often

01:33:22,480 --> 01:33:25,760
you

01:33:23,360 --> 01:33:26,719
if you fetch for example you refresh the

01:33:25,760 --> 01:33:28,800
user data but

01:33:26,719 --> 01:33:30,719
most of the time the the user data

01:33:28,800 --> 01:33:33,360
didn't change

01:33:30,719 --> 01:33:36,159
it's quite uh it's not very often that

01:33:33,360 --> 01:33:38,320
the user name on the avatar will change

01:33:36,159 --> 01:33:41,040
and and you are rendering on the

01:33:38,320 --> 01:33:44,400
component all the components

01:33:41,040 --> 01:33:47,760
in a useless way for when this happens

01:33:44,400 --> 01:33:51,120
so how can we can we fix this

01:33:47,760 --> 01:33:53,920
actually it's pretty simple instead of

01:33:51,120 --> 01:33:56,639
fetching an object from your backend

01:33:53,920 --> 01:34:00,960
what you can do is fetch a record

01:33:56,639 --> 01:34:02,639
so here i have just added a toggle so

01:34:00,960 --> 01:34:05,840
that i can

01:34:02,639 --> 01:34:08,159
fetch a record or an object if i uh

01:34:05,840 --> 01:34:10,080
if i change the value so now instead of

01:34:08,159 --> 01:34:11,040
fetching an object i'm going to fetch a

01:34:10,080 --> 01:34:13,440
title

01:34:11,040 --> 01:34:15,760
no a record sorry and what you can see

01:34:13,440 --> 01:34:19,199
in this demo is that now

01:34:15,760 --> 01:34:20,480
the the re-renders are much more or less

01:34:19,199 --> 01:34:23,040
frequent

01:34:20,480 --> 01:34:24,239
you can still see that the app is uh is

01:34:23,040 --> 01:34:27,040
re-rendering

01:34:24,239 --> 01:34:27,760
every five seconds because actually the

01:34:27,040 --> 01:34:30,880
the age

01:34:27,760 --> 01:34:33,280
of the user selection is

01:34:30,880 --> 01:34:34,320
increasing every five seconds and you

01:34:33,280 --> 01:34:36,000
can see that the

01:34:34,320 --> 01:34:37,920
the intermediate components also

01:34:36,000 --> 01:34:39,920
re-render every five seconds and the

01:34:37,920 --> 01:34:42,080
user component will render only every

01:34:39,920 --> 01:34:45,199
five segment instead of every second

01:34:42,080 --> 01:34:46,880
and the company which the data of the

01:34:45,199 --> 01:34:48,960
company never change over time you can

01:34:46,880 --> 01:34:52,080
see it never renders again

01:34:48,960 --> 01:34:53,679
because actually the as we converted the

01:34:52,080 --> 01:34:55,600
company to record

01:34:53,679 --> 01:34:57,520
and the data of the company didn't

01:34:55,600 --> 01:34:59,280
change over time

01:34:57,520 --> 01:35:01,280
the company component is able to

01:34:59,280 --> 01:35:04,400
optimize this from the ring

01:35:01,280 --> 01:35:07,440
by understanding that the company prop

01:35:04,400 --> 01:35:11,040
didn't change so so this way

01:35:07,440 --> 01:35:12,800
just just converting objects to records

01:35:11,040 --> 01:35:15,440
when you fetch data from backend

01:35:12,800 --> 01:35:16,480
is able to optimize for free your react

01:35:15,440 --> 01:35:18,480
application

01:35:16,480 --> 01:35:20,560
because you save a lot of free renders

01:35:18,480 --> 01:35:24,159
that you you otherwise

01:35:20,560 --> 01:35:27,679
trigger unnecessary

01:35:24,159 --> 01:35:30,480
so actually there is no there is no

01:35:27,679 --> 01:35:32,639
current method to fetch a record from

01:35:30,480 --> 01:35:36,719
from your backend you have to convert it

01:35:32,639 --> 01:35:36,719
so i have i did some kind of

01:35:37,440 --> 01:35:41,520
conversion logic here to convert

01:35:39,760 --> 01:35:43,440
manually the

01:35:41,520 --> 01:35:44,960
the payload from the back end but in

01:35:43,440 --> 01:35:46,960
practice

01:35:44,960 --> 01:35:48,239
i think in the specification they will

01:35:46,960 --> 01:35:51,600
add a

01:35:48,239 --> 01:35:55,040
method like response.json

01:35:51,600 --> 01:35:56,800
record so that you can directly obtain a

01:35:55,040 --> 01:35:59,600
recon from your backend but

01:35:56,800 --> 01:36:01,600
i'm not sure it's specified yet so we'll

01:35:59,600 --> 01:36:05,119
see in the future if it

01:36:01,600 --> 01:36:07,360
becomes available so this is all for the

01:36:05,119 --> 01:36:10,480
demo

01:36:07,360 --> 01:36:12,719
to conclude this talk i'd like to

01:36:10,480 --> 01:36:15,520
explain a bit the trade-offs

01:36:12,719 --> 01:36:17,360
so javascript with records and tuples

01:36:15,520 --> 01:36:19,600
some people think that javascript will

01:36:17,360 --> 01:36:22,800
become more complex

01:36:19,600 --> 01:36:23,760
i mean somehow people don't like the ash

01:36:22,800 --> 01:36:25,679
syntax

01:36:23,760 --> 01:36:27,600
because it will add a new syntax that

01:36:25,679 --> 01:36:31,199
people will have to learn

01:36:27,600 --> 01:36:31,679
and and it's becoming harder and harder

01:36:31,199 --> 01:36:34,560
to

01:36:31,679 --> 01:36:36,000
to learn javascript which is not anymore

01:36:34,560 --> 01:36:38,639
language that

01:36:36,000 --> 01:36:39,199
that people you used to learn quite

01:36:38,639 --> 01:36:42,560
easily

01:36:39,199 --> 01:36:44,880
a few years ago um

01:36:42,560 --> 01:36:47,840
although there is a problem for example

01:36:44,880 --> 01:36:50,639
if you want to put a date in a record

01:36:47,840 --> 01:36:52,560
or any other non-primitive type it's a

01:36:50,639 --> 01:36:54,800
bit complicated but

01:36:52,560 --> 01:36:56,719
maybe you won't you still want to do

01:36:54,800 --> 01:36:57,360
that if you really want to do that

01:36:56,719 --> 01:36:59,199
instead of

01:36:57,360 --> 01:37:00,719
putting the permit the non-primitive

01:36:59,199 --> 01:37:03,440
type inside the record

01:37:00,719 --> 01:37:04,400
you will have to to put a reference of

01:37:03,440 --> 01:37:07,600
the

01:37:04,400 --> 01:37:10,400
to the primitive type in the regard and

01:37:07,600 --> 01:37:12,400
and then somehow cache the the

01:37:10,400 --> 01:37:14,719
non-primitive type in a map

01:37:12,400 --> 01:37:15,840
somewhere else like a a bit like a

01:37:14,719 --> 01:37:18,320
database

01:37:15,840 --> 01:37:19,679
so that you can reference the the

01:37:18,320 --> 01:37:21,679
non-primitive type

01:37:19,679 --> 01:37:23,600
but it's not very uh very

01:37:21,679 --> 01:37:25,440
straightforward currently so

01:37:23,600 --> 01:37:27,440
i don't know if it will become a problem

01:37:25,440 --> 01:37:29,360
in the future

01:37:27,440 --> 01:37:31,040
um the implementation details of the

01:37:29,360 --> 01:37:33,840
proper cell are not

01:37:31,040 --> 01:37:35,600
specified so this is just a language for

01:37:33,840 --> 01:37:38,800
now

01:37:35,600 --> 01:37:41,440
maybe we don't know exactly what are the

01:37:38,800 --> 01:37:42,800
the performance impacts of using a

01:37:41,440 --> 01:37:45,679
record versus a

01:37:42,800 --> 01:37:47,119
an object so we will have to to wait for

01:37:45,679 --> 01:37:49,360
browser vendors to propose

01:37:47,119 --> 01:37:51,679
implementation of this to see

01:37:49,360 --> 01:37:53,440
how performant it is because maybe there

01:37:51,679 --> 01:37:56,159
will be a little

01:37:53,440 --> 01:37:57,679
performance overhead if you use a record

01:37:56,159 --> 01:38:01,440
instead of

01:37:57,679 --> 01:38:04,239
of an object and also there is the

01:38:01,440 --> 01:38:05,360
the problem about the existing record

01:38:04,239 --> 01:38:09,440
typescript type

01:38:05,360 --> 01:38:13,280
because we don't know how this will be

01:38:09,440 --> 01:38:15,840
managed because we can't have

01:38:13,280 --> 01:38:17,199
two two types with the same name so we

01:38:15,840 --> 01:38:20,719
will have to find the

01:38:17,199 --> 01:38:23,119
maybe a new name for for the javascript

01:38:20,719 --> 01:38:23,119
record

01:38:23,280 --> 01:38:27,920
so to conclude i think records and

01:38:24,960 --> 01:38:30,800
tables are very easy to use

01:38:27,920 --> 01:38:32,639
and immutability is one interesting part

01:38:30,800 --> 01:38:34,400
but the most important one

01:38:32,639 --> 01:38:35,679
is really the the compound primitive

01:38:34,400 --> 01:38:38,400
behavior because

01:38:35,679 --> 01:38:40,239
it will uh be able it will solve a lot

01:38:38,400 --> 01:38:41,280
of use case that we have in real world

01:38:40,239 --> 01:38:44,480
applications

01:38:41,280 --> 01:38:45,600
i think i try to explain some of the use

01:38:44,480 --> 01:38:48,480
case in a react

01:38:45,600 --> 01:38:50,639
application here but it also has

01:38:48,480 --> 01:38:51,280
potential impact in other frameworks as

01:38:50,639 --> 01:38:53,440
well

01:38:51,280 --> 01:38:54,560
i don't know much over frameworks but

01:38:53,440 --> 01:38:57,840
for example i know that

01:38:54,560 --> 01:38:58,480
angular has some there is something

01:38:57,840 --> 01:39:00,719
called a

01:38:58,480 --> 01:39:02,480
change detection and push which also

01:39:00,719 --> 01:39:04,080
leverage immutability

01:39:02,480 --> 01:39:06,800
and i think your records and tables

01:39:04,080 --> 01:39:08,080
could be useful as well to optimize the

01:39:06,800 --> 01:39:10,719
performance of

01:39:08,080 --> 01:39:12,400
of angular applications and also any

01:39:10,719 --> 01:39:15,679
other application that

01:39:12,400 --> 01:39:18,480
that benefits from the from the

01:39:15,679 --> 01:39:20,719
imitable data structures and using

01:39:18,480 --> 01:39:21,440
objected entities to optimize things and

01:39:20,719 --> 01:39:24,320
uh

01:39:21,440 --> 01:39:26,000
and things like that so that's all for

01:39:24,320 --> 01:39:28,239
me thank you for

01:39:26,000 --> 01:39:30,400
for listening to my talk and if you have

01:39:28,239 --> 01:39:30,880
questions you can ask me on twitter now

01:39:30,400 --> 01:39:34,080
or

01:39:30,880 --> 01:39:36,400
maybe email me and i have written a blog

01:39:34,080 --> 01:39:38,480
post about records and tables for react

01:39:36,400 --> 01:39:40,159
on my site so if you want to take a look

01:39:38,480 --> 01:39:42,960
you will have

01:39:40,159 --> 01:39:44,000
maybe a lot a few more use case for

01:39:42,960 --> 01:39:47,199
react

01:39:44,000 --> 01:39:50,800
and maybe you you'll find

01:39:47,199 --> 01:39:50,800
this interesting thank you

01:39:53,280 --> 01:39:57,199
awesome thanks so much that was great i

01:39:55,840 --> 01:40:00,480
can see some

01:39:57,199 --> 01:40:03,679
some claps in the um

01:40:00,480 --> 01:40:06,320
uh yeah in the grid um

01:40:03,679 --> 01:40:07,920
on the right hand side so uh yeah people

01:40:06,320 --> 01:40:09,440
obviously really appreciate it there was

01:40:07,920 --> 01:40:11,280
um there was quite a lot of information

01:40:09,440 --> 01:40:14,080
to absorb but this really

01:40:11,280 --> 01:40:14,719
exciting development in the javascript

01:40:14,080 --> 01:40:17,360
world

01:40:14,719 --> 01:40:18,639
and i've got a question just to kick off

01:40:17,360 --> 01:40:21,600
uh sebastian

01:40:18,639 --> 01:40:24,480
um so are you actually using um

01:40:21,600 --> 01:40:28,159
requisite tuples in production code

01:40:24,480 --> 01:40:31,440
no not at all no no

01:40:28,159 --> 01:40:34,719
this is this is a stage two proposal so

01:40:31,440 --> 01:40:36,719
um this this is not i mean

01:40:34,719 --> 01:40:38,560
maybe when it will be stage three i

01:40:36,719 --> 01:40:41,280
think some people will use it

01:40:38,560 --> 01:40:43,119
and also there is a polyfill currently i

01:40:41,280 --> 01:40:44,000
don't know how performant it is but it's

01:40:43,119 --> 01:40:45,360
queer

01:40:44,000 --> 01:40:48,080
this is the kind of feature that you

01:40:45,360 --> 01:40:50,239
really need browsers to implement

01:40:48,080 --> 01:40:52,320
i mean it really depends on the

01:40:50,239 --> 01:40:54,239
application maybe you can try a

01:40:52,320 --> 01:40:56,159
very there is a bible transform today

01:40:54,239 --> 01:40:58,000
that you can use to actually uh

01:40:56,159 --> 01:40:59,280
run it um in your application in

01:40:58,000 --> 01:41:01,840
production

01:40:59,280 --> 01:41:03,280
uh so but the thing is the ideal support

01:41:01,840 --> 01:41:05,280
is not uh is not there

01:41:03,280 --> 01:41:06,719
you don't have prettier you don't have a

01:41:05,280 --> 01:41:08,400
sling

01:41:06,719 --> 01:41:10,719
there are a lot of things that you will

01:41:08,400 --> 01:41:14,080
lack if you try to use this today

01:41:10,719 --> 01:41:16,239
maybe you you can but uh i mean

01:41:14,080 --> 01:41:18,560
for a real application it's a bit

01:41:16,239 --> 01:41:22,320
complicated to there until the

01:41:18,560 --> 01:41:25,119
the tooling is uh supporting this

01:41:22,320 --> 01:41:26,320
yeah i thought that might be your answer

01:41:25,119 --> 01:41:28,480
and in fact when you were

01:41:26,320 --> 01:41:30,159
talking at the beginning i just quickly

01:41:28,480 --> 01:41:33,679
tried it out in the um

01:41:30,159 --> 01:41:35,040
babel and it didn't seem to know what to

01:41:33,679 --> 01:41:36,239
do with it so yeah i guess you need the

01:41:35,040 --> 01:41:38,320
polyfill right because

01:41:36,239 --> 01:41:39,280
basically yeah it's not going to be

01:41:38,320 --> 01:41:42,719
understood

01:41:39,280 --> 01:41:45,679
um but yeah okay this this is a really

01:41:42,719 --> 01:41:46,239
it's a really um important thing for us

01:41:45,679 --> 01:41:49,280
at

01:41:46,239 --> 01:41:50,159
um javascript monthly to have insights

01:41:49,280 --> 01:41:52,400
into what's

01:41:50,159 --> 01:41:53,920
coming next in javascript that's that's

01:41:52,400 --> 01:41:57,199
really going to make our

01:41:53,920 --> 01:41:58,719
lives easier um so yeah thanks again for

01:41:57,199 --> 01:42:00,560
the talk it was great

01:41:58,719 --> 01:42:03,840
anyone else on the court got any

01:42:00,560 --> 01:42:03,840
questions for sebastian

01:42:04,719 --> 01:42:08,000
is everyone's mind blown

01:42:08,560 --> 01:42:11,040
everyone really pumped about using it

01:42:10,000 --> 01:42:12,719
we're gonna have to wait until it's

01:42:11,040 --> 01:42:15,600
stage three

01:42:12,719 --> 01:42:17,679
yeah i'm i'm waiting but the i think the

01:42:15,600 --> 01:42:19,520
stage 3 will uh

01:42:17,679 --> 01:42:21,040
i'm not sure it will be very soon

01:42:19,520 --> 01:42:24,159
because it's a quite

01:42:21,040 --> 01:42:27,520
important proposal and they are going to

01:42:24,159 --> 01:42:28,560
to be careful to to avoid that it's easy

01:42:27,520 --> 01:42:31,119
when you work on

01:42:28,560 --> 01:42:32,880
gs proposals to have conflict with other

01:42:31,119 --> 01:42:34,719
proposals and things like that so

01:42:32,880 --> 01:42:36,480
you really need to have the the big

01:42:34,719 --> 01:42:39,040
picture of the world language in

01:42:36,480 --> 01:42:41,040
in ed and all the all the existing

01:42:39,040 --> 01:42:44,800
proposals to

01:42:41,040 --> 01:42:46,719
to be able to to to know if you

01:42:44,800 --> 01:42:48,320
if you are making the the right choice

01:42:46,719 --> 01:42:50,159
in accepting it

01:42:48,320 --> 01:42:51,440
yeah yeah i know it must be really

01:42:50,159 --> 01:42:52,639
really difficult to manage all that

01:42:51,440 --> 01:42:54,400
through

01:42:52,639 --> 01:42:56,080
um given how quickly it's evolving okay

01:42:54,400 --> 01:43:00,719
we've got a couple of questions then so

01:42:56,080 --> 01:43:04,320
um denise um she asks uh

01:43:00,719 --> 01:43:05,119
um to get the new goodies how can we

01:43:04,320 --> 01:43:08,800
prevent

01:43:05,119 --> 01:43:08,800
these effect serenade

01:43:09,119 --> 01:43:12,960
and execute

01:43:13,760 --> 01:43:22,000
serenader yeah i'm not sh

01:43:18,080 --> 01:43:25,600
uh okay re-render i think she meant

01:43:22,000 --> 01:43:29,119
so how can we prevent a re-render um

01:43:25,600 --> 01:43:31,440
but so as i've shown in the demo you can

01:43:29,119 --> 01:43:32,159
just replace some objects with records

01:43:31,440 --> 01:43:35,280
and then you

01:43:32,159 --> 01:43:37,360
you prevent the reminders but

01:43:35,280 --> 01:43:40,239
as you can choose you can choose this

01:43:37,360 --> 01:43:43,199
today so it's a bit complicated to

01:43:40,239 --> 01:43:43,679
to to solve your your problem today but

01:43:43,199 --> 01:43:45,520
i think

01:43:43,679 --> 01:43:47,520
for example there are a lot of tricks

01:43:45,520 --> 01:43:48,560
that you can use to avoid the rewinders

01:43:47,520 --> 01:43:51,600
for example you can

01:43:48,560 --> 01:43:54,560
use you can use refs to

01:43:51,600 --> 01:43:55,679
to to pass them to reblender because the

01:43:54,560 --> 01:43:58,639
refs are stable

01:43:55,679 --> 01:43:59,679
it permits you to somehow access fresh

01:43:58,639 --> 01:44:02,080
values from the

01:43:59,679 --> 01:44:04,560
effect without triggering a remainder

01:44:02,080 --> 01:44:07,040
but it's a bit complicated and i think

01:44:04,560 --> 01:44:07,840
that regarding the bulbs will uh will

01:44:07,040 --> 01:44:10,239
help uh

01:44:07,840 --> 01:44:12,480
solve a lot of problems like that in a

01:44:10,239 --> 01:44:14,560
in a more straightforward way

01:44:12,480 --> 01:44:15,920
so this is why i'm quite excited about

01:44:14,560 --> 01:44:17,840
this

01:44:15,920 --> 01:44:20,639
yeah it's definitely something that we

01:44:17,840 --> 01:44:22,960
that we've needed for a while um

01:44:20,639 --> 01:44:24,400
yeah jacob uh with refs there'd be

01:44:22,960 --> 01:44:27,040
dragons yeah

01:44:24,400 --> 01:44:28,560
um okay yeah denise um yeah glad your

01:44:27,040 --> 01:44:31,280
question was answered

01:44:28,560 --> 01:44:32,480
um there was one further up i mean it

01:44:31,280 --> 01:44:33,520
was a comment but i think we can turn it

01:44:32,480 --> 01:44:36,719
into a question

01:44:33,520 --> 01:44:40,080
and so nier is asking about um

01:44:36,719 --> 01:44:42,560
use memo so you know does does this

01:44:40,080 --> 01:44:43,360
potentially make some of uh some of that

01:44:42,560 --> 01:44:45,520
useless

01:44:43,360 --> 01:44:46,400
you know we don't you know can we avoid

01:44:45,520 --> 01:44:49,440
having to

01:44:46,400 --> 01:44:50,880
use memo now yeah i think actually yeah

01:44:49,440 --> 01:44:53,440
this is a very

01:44:50,880 --> 01:44:54,960
a very good good use case so you can

01:44:53,440 --> 01:44:58,639
basically

01:44:54,960 --> 01:45:01,199
replace all your use memo by uh by this

01:44:58,639 --> 01:45:02,000
but for at least for the data because

01:45:01,199 --> 01:45:04,080
sometimes you you

01:45:02,000 --> 01:45:05,199
want to use memo for example you can

01:45:04,080 --> 01:45:07,600
create an api

01:45:05,199 --> 01:45:09,600
object which will contain callbacks for

01:45:07,600 --> 01:45:11,920
example to mutate the state

01:45:09,600 --> 01:45:15,040
and in such case as you can't put

01:45:11,920 --> 01:45:18,000
functions inside a record you can't

01:45:15,040 --> 01:45:19,679
memoize an object which contains

01:45:18,000 --> 01:45:22,000
functions so

01:45:19,679 --> 01:45:23,280
you can replace all your use memo for

01:45:22,000 --> 01:45:26,400
data this way

01:45:23,280 --> 01:45:29,520
because if the data doesn't change then

01:45:26,400 --> 01:45:33,520
the the result of the record

01:45:29,520 --> 01:45:36,080
won't change ever but you can't do that

01:45:33,520 --> 01:45:38,000
if you try to use non-primitive types

01:45:36,080 --> 01:45:40,960
inside the records or you still need to

01:45:38,000 --> 01:45:44,239
use memoir in some cases

01:45:40,960 --> 01:45:48,400
yeah brilliant um i think

01:45:44,239 --> 01:45:48,400
that was all the questions um

01:45:49,199 --> 01:45:56,480
so jacob's posting some comments um

01:45:53,440 --> 01:45:58,400
state should not contain functions

01:45:56,480 --> 01:45:59,760
um i don't know if i can turn that into

01:45:58,400 --> 01:46:02,880
a question

01:45:59,760 --> 01:46:03,840
um i mean i mean almost a question i'll

01:46:02,880 --> 01:46:06,480
go on that

01:46:03,840 --> 01:46:07,280
yeah no i was just saying uh you should

01:46:06,480 --> 01:46:11,119
not actually

01:46:07,280 --> 01:46:13,119
encounter that problem um because

01:46:11,119 --> 01:46:14,320
uh you should your state should not

01:46:13,119 --> 01:46:16,480
actually contain functions

01:46:14,320 --> 01:46:18,560
if your state contains functions you

01:46:16,480 --> 01:46:21,920
have a different problem

01:46:18,560 --> 01:46:23,679
yeah um actually for example if you look

01:46:21,920 --> 01:46:26,159
at the react hook uh use

01:46:23,679 --> 01:46:27,440
your state you have the first uh the

01:46:26,159 --> 01:46:29,440
first uh

01:46:27,440 --> 01:46:30,880
item that is the state and the second

01:46:29,440 --> 01:46:33,760
that is the set state

01:46:30,880 --> 01:46:35,760
function and for example if you if you

01:46:33,760 --> 01:46:36,480
create an api for example for a custom

01:46:35,760 --> 01:46:39,920
hook

01:46:36,480 --> 01:46:41,920
but as state and as an api what i like

01:46:39,920 --> 01:46:43,679
to do is for example have the first item

01:46:41,920 --> 01:46:45,280
to be the state and then the second item

01:46:43,679 --> 01:46:48,400
to be the api

01:46:45,280 --> 01:46:49,760
but the api is not always you can make a

01:46:48,400 --> 01:46:53,840
more

01:46:49,760 --> 01:46:56,639
a more a better api than just exposing

01:46:53,840 --> 01:46:59,040
set state you can create for example

01:46:56,639 --> 01:47:00,159
an api which contains a toggle method a

01:46:59,040 --> 01:47:03,199
clause method and

01:47:00,159 --> 01:47:03,920
things like that and in such case i

01:47:03,199 --> 01:47:06,480
think

01:47:03,920 --> 01:47:08,719
use memo can be useful for example to

01:47:06,480 --> 01:47:11,040
memorize the second

01:47:08,719 --> 01:47:12,480
the second parameter the the api object

01:47:11,040 --> 01:47:14,800
which contains

01:47:12,480 --> 01:47:16,159
the the methods because you also want

01:47:14,800 --> 01:47:18,560
this um

01:47:16,159 --> 01:47:20,719
this api object to be stable because if

01:47:18,560 --> 01:47:23,600
you for example pass the api object

01:47:20,719 --> 01:47:24,960
to a sub-component you want you don't

01:47:23,600 --> 01:47:27,119
want to trigger

01:47:24,960 --> 01:47:29,040
you use less reminders to this component

01:47:27,119 --> 01:47:32,800
if it is memorized

01:47:29,040 --> 01:47:35,119
so memory memorizing objects

01:47:32,800 --> 01:47:37,119
which contain functions then it's not

01:47:35,119 --> 01:47:39,360
state can be useful because

01:47:37,119 --> 01:47:42,239
you can express your api as a as an

01:47:39,360 --> 01:47:42,239
object somehow

01:47:43,280 --> 01:47:46,910
yeah awesome i think that could be a

01:47:45,600 --> 01:47:49,360
topic for a whole other talk

01:47:46,910 --> 01:47:52,159
[Laughter]

01:47:49,360 --> 01:47:52,880
um but yeah brilliant i'll i'm gonna um

01:47:52,159 --> 01:47:54,880
i think we should

01:47:52,880 --> 01:47:56,400
probably wrap up now so that we finish

01:47:54,880 --> 01:47:58,880
on time if anyone has

01:47:56,400 --> 01:48:00,800
any more questions hopefully you grab

01:47:58,880 --> 01:48:04,080
sebastian's contact details

01:48:00,800 --> 01:48:08,080
um i can post um

01:48:04,080 --> 01:48:11,199
them in the um js monthly meetup page

01:48:08,080 --> 01:48:11,520
um uh so i'll do that for both speakers

01:48:11,199 --> 01:48:14,239
so

01:48:11,520 --> 01:48:15,840
yeah round of applause for sebastian and

01:48:14,239 --> 01:48:18,639
also for somewhere earlier

01:48:15,840 --> 01:48:19,840
who spoke at the beginning so yeah many

01:48:18,639 --> 01:48:23,360
thanks both of you

01:48:19,840 --> 01:48:26,080
yeah awesome so good um

01:48:23,360 --> 01:48:26,639
so yes uh we're going to close with

01:48:26,080 --> 01:48:30,320
because we've

01:48:26,639 --> 01:48:33,600
reshuffled the agenda uh the competition

01:48:30,320 --> 01:48:34,400
so i'll just um talk you through the

01:48:33,600 --> 01:48:37,760
event

01:48:34,400 --> 01:48:40,239
um who are very kindly given us those

01:48:37,760 --> 01:48:40,239
tickets

01:48:40,320 --> 01:48:44,840
hopefully uh you can see my screen

01:48:43,160 --> 01:48:49,679
[Music]

01:48:44,840 --> 01:48:52,400
yeah cool uh so yeah this is uh

01:48:49,679 --> 01:48:53,040
a new partnership um with react advanced

01:48:52,400 --> 01:48:56,719
london

01:48:53,040 --> 01:49:00,320
um it's a huge event uh it's

01:48:56,719 --> 01:49:03,600
happening in october 22nd to 23rd

01:49:00,320 --> 01:49:03,920
of this year um bravely they are going

01:49:03,600 --> 01:49:07,040
to

01:49:03,920 --> 01:49:07,440
actually have people in a venue uh but

01:49:07,040 --> 01:49:10,480
yeah

01:49:07,440 --> 01:49:12,000
i imagine that's subject to um yeah to

01:49:10,480 --> 01:49:12,480
the current situation in the uk but you

01:49:12,000 --> 01:49:14,800
know

01:49:12,480 --> 01:49:15,840
all being well they expect to have

01:49:14,800 --> 01:49:18,320
people in the physical

01:49:15,840 --> 01:49:19,440
space but also you can join online

01:49:18,320 --> 01:49:21,920
understandably

01:49:19,440 --> 01:49:23,119
uh where they reckon there could be as

01:49:21,920 --> 01:49:25,440
many as some 20

01:49:23,119 --> 01:49:26,159
000 people attending so pretty huge

01:49:25,440 --> 01:49:28,159
event

01:49:26,159 --> 01:49:29,520
um yeah a couple of speakers that they

01:49:28,159 --> 01:49:31,679
called out um

01:49:29,520 --> 01:49:32,560
are kent c dodds who i imagine you've

01:49:31,679 --> 01:49:35,760
come across and

01:49:32,560 --> 01:49:37,840
also sarah vieira um yeah

01:49:35,760 --> 01:49:38,880
those are just two of um you know lots

01:49:37,840 --> 01:49:41,119
and lots of great

01:49:38,880 --> 01:49:42,480
speakers that they have um so yeah

01:49:41,119 --> 01:49:45,920
really recommended

01:49:42,480 --> 01:49:48,400
um and as i say very kindly they have

01:49:45,920 --> 01:49:49,360
uh donated two tickets for us to give

01:49:48,400 --> 01:49:51,199
away

01:49:49,360 --> 01:49:52,560
uh so i'm not gonna make the question

01:49:51,199 --> 01:49:55,280
too hard um

01:49:52,560 --> 01:49:56,880
the rules are simply in the chat the

01:49:55,280 --> 01:50:00,159
first two people to type

01:49:56,880 --> 01:50:02,320
the correct answer get the two tickets

01:50:00,159 --> 01:50:05,440
so it's a little bit of a fastest

01:50:02,320 --> 01:50:07,760
finger first uh i've just got us

01:50:05,440 --> 01:50:09,679
something in the chat here people are

01:50:07,760 --> 01:50:10,480
answering or are nice yeah people are

01:50:09,679 --> 01:50:14,320
answering already

01:50:10,480 --> 01:50:17,280
awesome good answers

01:50:14,320 --> 01:50:18,480
um but that wasn't the question maybe it

01:50:17,280 --> 01:50:21,040
should have been

01:50:18,480 --> 01:50:21,840
the question is and i'm going to keep it

01:50:21,040 --> 01:50:24,239
on topic

01:50:21,840 --> 01:50:25,840
because we're talking about react um so

01:50:24,239 --> 01:50:29,760
the question is

01:50:25,840 --> 01:50:33,280
what stable edition of react

01:50:29,760 --> 01:50:34,080
introduced hooks okay so no alphas and

01:50:33,280 --> 01:50:36,159
betas

01:50:34,080 --> 01:50:38,000
which are there you go look at that near

01:50:36,159 --> 01:50:38,740
is super quick

01:50:38,000 --> 01:50:41,440
well

01:50:38,740 --> 01:50:43,440
[Laughter]

01:50:41,440 --> 01:50:45,840
sebastian you're one of the speakers so

01:50:43,440 --> 01:50:48,960
i wasn't necessarily including in

01:50:45,840 --> 01:50:50,800
you in this um however

01:50:48,960 --> 01:50:52,080
i actually got a ticket from the event

01:50:50,800 --> 01:50:54,080
so i can give

01:50:52,080 --> 01:50:55,840
you mine because i don't think i can go

01:50:54,080 --> 01:50:59,440
to that i'm away at the same time

01:50:55,840 --> 01:51:02,480
uh so winners are near and

01:50:59,440 --> 01:51:05,280
denise so congrats to youtube that

01:51:02,480 --> 01:51:06,080
was unbelievably quick um oh actually

01:51:05,280 --> 01:51:09,440
hang on

01:51:06,080 --> 01:51:11,280
no denise you put 16.6 which is not the

01:51:09,440 --> 01:51:15,679
right answer

01:51:11,280 --> 01:51:21,840
so unlucky but it was actually 16.8

01:51:15,679 --> 01:51:21,840
um denise was that a typo

01:51:22,239 --> 01:51:26,000
yes it was there you go yeah

01:51:26,480 --> 01:51:31,920
so i will need your uh

01:51:29,760 --> 01:51:34,560
yeah i'll need you to dm me your

01:51:31,920 --> 01:51:36,719
personal contact details so

01:51:34,560 --> 01:51:38,000
in the chat um i'll stay on the call for

01:51:36,719 --> 01:51:38,960
a couple of minutes in the chat if you

01:51:38,000 --> 01:51:41,280
can just dm me

01:51:38,960 --> 01:51:42,639
your uh yeah your email address or phone

01:51:41,280 --> 01:51:46,080
number whichever you prefer

01:51:42,639 --> 01:51:47,360
and i will get those over to you soon as

01:51:46,080 --> 01:51:50,639
i can

01:51:47,360 --> 01:51:54,159
so yeah we're done with the competition

01:51:50,639 --> 01:51:58,239
uh thanks again to our speakers

01:51:54,159 --> 01:51:58,239
let me uh come out of this

01:51:59,280 --> 01:52:02,960
yeah thanks again to our speakers thanks

01:52:00,719 --> 01:52:05,679
again to you alex for

01:52:02,960 --> 01:52:06,960
helping with all of the organization and

01:52:05,679 --> 01:52:10,239
technology

01:52:06,960 --> 01:52:11,360
um yeah really looking forward to seeing

01:52:10,239 --> 01:52:14,400
some of you again

01:52:11,360 --> 01:52:15,199
in our next event in july that will also

01:52:14,400 --> 01:52:17,280
definitely be

01:52:15,199 --> 01:52:19,119
online but as i say i'll keep you posted

01:52:17,280 --> 01:52:19,760
about us doing ones in physical spaces

01:52:19,119 --> 01:52:21,440
again

01:52:19,760 --> 01:52:22,800
uh yeah thanks for your brilliant

01:52:21,440 --> 01:52:25,610
questions participation

01:52:22,800 --> 01:52:28,689
have a great evening everyone

01:52:25,610 --> 01:52:28,689
[Music]

01:52:28,840 --> 01:52:51,280
farewell

01:52:31,190 --> 01:52:51,280
[Music]

01:53:01,570 --> 01:53:10,690
[Music]

01:53:05,770 --> 01:53:16,040
[Applause]

01:53:10,690 --> 01:53:19,170
[Music]

01:53:16,040 --> 01:53:19,170
[Applause]

01:53:25,240 --> 01:53:31,040
[Music]

01:53:26,190 --> 01:53:49,090
[Applause]

01:53:31,040 --> 01:53:49,090
[Music]

01:53:52,100 --> 01:53:55,169
[Music]

01:54:06,840 --> 01:54:26,410
so

01:54:08,010 --> 01:54:32,210
[Music]

01:54:26,410 --> 01:54:37,380
[Applause]

01:54:32,210 --> 01:54:37,380
[Music]

01:54:40,060 --> 01:54:52,600

YouTube URL: https://www.youtube.com/watch?v=0T87-RhKNOI


