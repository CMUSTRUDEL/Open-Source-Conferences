Title: Keep Calm and Fasten Your Seatbelts - JS Monthly - August 2019
Publication date: 2019-09-19
Playlist: JS Monthly London
Description: 
	Presented by Sonya Moisset.

Modern web development has many challenges and of those, security is both very important and often under-emphasised. Many of today’s data security professionals are beginning to recognise that unprotected web applications have become attractive targets for cybercriminals looking for easy entry points into their networks. It’s time to get serious about Web App Security.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:04,529
so hi everyone and welcome to keep calm

00:00:02,370 --> 00:00:07,410
and fasten your seatbelts

00:00:04,529 --> 00:00:09,389
so I'm Sonia I work during ADIZ usually

00:00:07,410 --> 00:00:12,500
and I listen to too much in wearing

00:00:09,389 --> 00:00:14,639
music so I'm alleged security engineer

00:00:12,500 --> 00:00:16,770
so first of all I would like to

00:00:14,639 --> 00:00:19,529
introduce you what excites you curry and

00:00:16,770 --> 00:00:20,880
why is it important so cyber security is

00:00:19,529 --> 00:00:23,369
the techniques of protecting computers

00:00:20,880 --> 00:00:25,650
networks program and data from

00:00:23,369 --> 00:00:28,830
unauthorized access or attacks that are

00:00:25,650 --> 00:00:30,810
aimed for exploitation so we've seen

00:00:28,830 --> 00:00:33,000
several attacks I'm sure you're quite

00:00:30,810 --> 00:00:36,090
familiar with some of them for example

00:00:33,000 --> 00:00:38,129
in October 2016 there were a series of

00:00:36,090 --> 00:00:40,140
DDoS attacks they were launched against

00:00:38,129 --> 00:00:43,200
DNS server and they caused major

00:00:40,140 --> 00:00:44,700
disruption to those web services and you

00:00:43,200 --> 00:00:48,000
would get this the pink area come from

00:00:44,700 --> 00:00:50,219
github so how does this work like

00:00:48,000 --> 00:00:52,440
usually the attacker would go on website

00:00:50,219 --> 00:00:54,180
like show them that I yo

00:00:52,440 --> 00:00:56,280
they will type like here in this case

00:00:54,180 --> 00:00:57,989
I've tapped the webcam and this gives me

00:00:56,280 --> 00:01:00,600
the result of all the webcam connected

00:00:57,989 --> 00:01:03,629
to the Internet and they will simplify

00:01:00,600 --> 00:01:06,840
all of those devices and launch an

00:01:03,629 --> 00:01:08,430
attack against DNS server another one

00:01:06,840 --> 00:01:13,740
that you might be familiar with is

00:01:08,430 --> 00:01:15,930
ransomware usually a classic script

00:01:13,740 --> 00:01:18,030
would be that you have a phishing attack

00:01:15,930 --> 00:01:20,070
and then the person gives their

00:01:18,030 --> 00:01:22,320
credential and then they kind of encrypt

00:01:20,070 --> 00:01:25,409
the data and you have to actually pay by

00:01:22,320 --> 00:01:28,290
bit currents you have it decrypted this

00:01:25,409 --> 00:01:30,720
is want to cry and it actually hates a

00:01:28,290 --> 00:01:31,890
hundred thirty countries it was one of

00:01:30,720 --> 00:01:36,540
the the biggest ransomware

00:01:31,890 --> 00:01:38,670
attack another one maybe some of you

00:01:36,540 --> 00:01:41,280
might have received last summer it's

00:01:38,670 --> 00:01:43,200
called the porn scam email so you had

00:01:41,280 --> 00:01:44,939
the blurred one is the the password

00:01:43,200 --> 00:01:47,070
usually the attacker would say that

00:01:44,939 --> 00:01:49,020
they've actually recorded you're doing

00:01:47,070 --> 00:01:51,869
some nasty stuff and then you had to

00:01:49,020 --> 00:01:56,430
actually pay bitcoins to not having it

00:01:51,869 --> 00:01:57,990
released so obviously this is scan what

00:01:56,430 --> 00:02:00,360
are usually recommend is to check the

00:01:57,990 --> 00:02:02,790
Bitcoin address down there and to

00:02:00,360 --> 00:02:04,950
actually check if there is any money

00:02:02,790 --> 00:02:06,390
within this wallet obviously it's a scam

00:02:04,950 --> 00:02:09,629
so there are zero and nobody pay for

00:02:06,390 --> 00:02:13,620
that yeah and also the attacker usually

00:02:09,629 --> 00:02:16,379
will go to the Tor grab to collect

00:02:13,620 --> 00:02:18,750
Rich's account and a lot of collected

00:02:16,379 --> 00:02:20,849
emails a good way to see if you've have

00:02:18,750 --> 00:02:22,349
been poned as a website literally have I

00:02:20,849 --> 00:02:24,450
been poned you can put your email

00:02:22,349 --> 00:02:27,330
address and see which account you've

00:02:24,450 --> 00:02:29,970
actually been bridged to so usually how

00:02:27,330 --> 00:02:32,040
data breaches occur so you have the

00:02:29,970 --> 00:02:33,480
attacker like two ways they usually do

00:02:32,040 --> 00:02:35,760
like social engineering them a little

00:02:33,480 --> 00:02:37,920
bit of research or they we try to find

00:02:35,760 --> 00:02:40,290
any vulnerabilities or attack vectors

00:02:37,920 --> 00:02:42,150
through the the app and then they will

00:02:40,290 --> 00:02:45,330
actually launch the attack and try to

00:02:42,150 --> 00:02:48,329
expose exfiltrate information and and

00:02:45,330 --> 00:02:50,940
here you go like today after you'll have

00:02:48,329 --> 00:02:54,329
those in the newspaper like all of those

00:02:50,940 --> 00:02:55,709
three breaches their usual one so you

00:02:54,329 --> 00:02:57,660
would say okay yeah this cruel Suniya

00:02:55,709 --> 00:03:00,540
this is like cybersecurity but why is it

00:02:57,660 --> 00:03:02,849
impacting developers so I'm gonna give

00:03:00,540 --> 00:03:04,560
you a couple of examples for web app

00:03:02,849 --> 00:03:06,629
Security's the first one is around the

00:03:04,560 --> 00:03:08,160
Trump donation website incidents I don't

00:03:06,629 --> 00:03:10,410
know if some of you have actually heard

00:03:08,160 --> 00:03:12,480
about that incidents so a couple of

00:03:10,410 --> 00:03:14,670
years back the u.s. presidential

00:03:12,480 --> 00:03:15,840
campaign was ramping up the Trump camp

00:03:14,670 --> 00:03:18,420
did something stupid

00:03:15,840 --> 00:03:20,420
not surprising one of their developer

00:03:18,420 --> 00:03:23,340
embedded this code in the campaign's

00:03:20,420 --> 00:03:25,200
donation website this one you're

00:03:23,340 --> 00:03:27,660
probably not seeing what's wrong in that

00:03:25,200 --> 00:03:30,540
script but actually this tag was in the

00:03:27,660 --> 00:03:32,849
source code directly over the donation

00:03:30,540 --> 00:03:35,910
page from Dollar Trump and was pulling

00:03:32,849 --> 00:03:38,130
the script directly off a full-stack

00:03:35,910 --> 00:03:41,670
developer curl called Al Gore Escobar

00:03:38,130 --> 00:03:43,950
github repository I bet this full stack

00:03:41,670 --> 00:03:45,419
developer is a nice guy I don't know if

00:03:43,950 --> 00:03:47,730
it would be happy actually to be

00:03:45,419 --> 00:03:51,180
embedded on the hypsi code would be

00:03:47,730 --> 00:03:52,859
embedded within Trump web site so

00:03:51,180 --> 00:03:55,200
basically you can submit a pillar to

00:03:52,859 --> 00:03:59,220
inject arbitrary JavaScript code into

00:03:55,200 --> 00:04:02,310
Donald Trump's site how exciting this

00:03:59,220 --> 00:04:03,810
was the donation page at the time and if

00:04:02,310 --> 00:04:05,730
you looked at the source code you could

00:04:03,810 --> 00:04:08,609
see actually the the script directly

00:04:05,730 --> 00:04:10,590
embedded within the donation page so

00:04:08,609 --> 00:04:12,569
this page is loading javascript file

00:04:10,590 --> 00:04:15,840
directly from a page hosted on github

00:04:12,569 --> 00:04:17,280
pages and github pages serves the file

00:04:15,840 --> 00:04:20,299
directly from the current sponding

00:04:17,280 --> 00:04:23,010
github repository the J's page branch

00:04:20,299 --> 00:04:25,289
which means that if they file on github

00:04:23,010 --> 00:04:26,250
gets modified somehow the changes will

00:04:25,289 --> 00:04:29,580
be reflected

00:04:26,250 --> 00:04:32,310
website usually and their 30 seconds so

00:04:29,580 --> 00:04:33,990
the repository was a jQuery mask plugin

00:04:32,310 --> 00:04:37,320
this is just to enhance something like

00:04:33,990 --> 00:04:44,490
the UX of submitting a form so this was

00:04:37,320 --> 00:04:48,300
the whoops yeah this was the script

00:04:44,490 --> 00:04:50,580
obviously it's minified that so as I

00:04:48,300 --> 00:04:53,790
said anyone can submit a PR on this

00:04:50,580 --> 00:04:56,220
javascript file so if the developer

00:04:53,790 --> 00:04:58,260
accepts your PR then your JavaScript

00:04:56,220 --> 00:05:01,410
code whatever it contains will go up

00:04:58,260 --> 00:05:03,060
straight to Trump's website so what you

00:05:01,410 --> 00:05:04,950
can do you can modify Dom you can

00:05:03,060 --> 00:05:06,390
redirect the user you can load in

00:05:04,950 --> 00:05:10,590
external content you can go crazy

00:05:06,390 --> 00:05:12,860
especially with translation webpage so

00:05:10,590 --> 00:05:15,330
for example if you're taking this and

00:05:12,860 --> 00:05:17,130
setting a very location helps to Hillary

00:05:15,330 --> 00:05:19,110
Clinton website basically every person

00:05:17,130 --> 00:05:21,300
will now get redirected to clinton

00:05:19,110 --> 00:05:24,180
website so this is just an example

00:05:21,300 --> 00:05:26,010
obviously it's on the developer tool so

00:05:24,180 --> 00:05:28,710
it won't have an impact but just for fun

00:05:26,010 --> 00:05:31,310
if you want to redirect the only Trump

00:05:28,710 --> 00:05:38,070
website to Hillary Clinton's website

00:05:31,310 --> 00:05:40,560
yeah there you go boom magic so let's

00:05:38,070 --> 00:05:47,550
bring this to another level and actually

00:05:40,560 --> 00:05:49,740
raise a PR and inject the the code this

00:05:47,550 --> 00:05:52,380
is as easy it is actually so obviously

00:05:49,740 --> 00:05:54,750
the researcher who did this just to

00:05:52,380 --> 00:05:58,229
troll he didn't actually erase the PR

00:05:54,750 --> 00:05:59,970
obviously but yeah so the security hole

00:05:58,229 --> 00:06:02,460
was fixed within less than three hours

00:05:59,970 --> 00:06:04,320
and no actual damage was done besides

00:06:02,460 --> 00:06:06,840
bad PR for the Trump campaign it was all

00:06:04,320 --> 00:06:09,540
over Twitter around that time another

00:06:06,840 --> 00:06:11,400
example is the crypto minor incidents

00:06:09,540 --> 00:06:14,070
you would tell yeah that's quite the

00:06:11,400 --> 00:06:16,110
usual so might be you might have heard

00:06:14,070 --> 00:06:19,290
about that one so if you look at the dev

00:06:16,110 --> 00:06:21,660
tools you have like the coin a hive calm

00:06:19,290 --> 00:06:24,210
and it was all over the place on ICO

00:06:21,660 --> 00:06:26,400
on the United States courts on the

00:06:24,210 --> 00:06:29,580
General Medical Council in Manchester

00:06:26,400 --> 00:06:30,660
City Council even in Australia it was

00:06:29,580 --> 00:06:32,400
all over the place and you could

00:06:30,660 --> 00:06:34,620
actually see was loaded through the

00:06:32,400 --> 00:06:36,570
requests it's just to show that it was

00:06:34,620 --> 00:06:39,960
loaded through requests and here you

00:06:36,570 --> 00:06:43,500
have more than 30,000 website are likely

00:06:39,960 --> 00:06:45,240
all victims of this trip two minor so

00:06:43,500 --> 00:06:46,949
just to be clear it wasn't decides

00:06:45,240 --> 00:06:49,250
themselves they were compromised it was

00:06:46,949 --> 00:06:53,069
rather a script they had a dependency on

00:06:49,250 --> 00:06:55,919
so that dependency was on text help and

00:06:53,069 --> 00:06:59,039
text help actually got compromised so

00:06:55,919 --> 00:07:01,949
text help is an accessibility platform

00:06:59,039 --> 00:07:05,099
which is good for adding and one of

00:07:01,949 --> 00:07:07,289
their product is cool browsealoud so

00:07:05,099 --> 00:07:10,110
this is the the tool that actually gets

00:07:07,289 --> 00:07:11,610
compromised it's as easy as just like

00:07:10,110 --> 00:07:15,330
take this script and embed it within

00:07:11,610 --> 00:07:17,639
your your website so now we're back to

00:07:15,330 --> 00:07:19,259
the shrimp problem but this time it's

00:07:17,639 --> 00:07:21,570
real it happened

00:07:19,259 --> 00:07:24,630
so this piece of code has been

00:07:21,570 --> 00:07:27,300
compromised you can see here the office

00:07:24,630 --> 00:07:30,180
cave version at the top this was

00:07:27,300 --> 00:07:32,729
actually the the crypto minor piece of

00:07:30,180 --> 00:07:34,080
code this is the the obfuscated version

00:07:32,729 --> 00:07:36,630
and you could see like you don't need to

00:07:34,080 --> 00:07:38,940
be a crypto minor expert but you can see

00:07:36,630 --> 00:07:40,830
that here the minor is starting and it's

00:07:38,940 --> 00:07:45,449
going to do some stuff with your CPU

00:07:40,830 --> 00:07:47,970
config so contrived say that they have

00:07:45,449 --> 00:07:50,759
no direct involvement from them in this

00:07:47,970 --> 00:07:52,740
case what happened is an attacker

00:07:50,759 --> 00:07:55,080
managed to gain access to the storage

00:07:52,740 --> 00:07:57,659
where the file was and compromised it on

00:07:55,080 --> 00:08:00,180
Roosevelt and texthelp so the file get

00:07:57,659 --> 00:08:02,009
distributed over the at the CDN and now

00:08:00,180 --> 00:08:04,070
every single website that's embedding it

00:08:02,009 --> 00:08:07,469
has the crypto minor

00:08:04,070 --> 00:08:08,940
another example is the event stream NPM

00:08:07,469 --> 00:08:11,419
package incident you might have been

00:08:08,940 --> 00:08:14,880
familiar with this one last year in 2018

00:08:11,419 --> 00:08:18,270
the flatmap stream was published to the

00:08:14,880 --> 00:08:20,789
NPM registry and was later added to the

00:08:18,270 --> 00:08:23,009
event stream package by a user cool rock

00:08:20,789 --> 00:08:25,500
night control so what happened like you

00:08:23,009 --> 00:08:27,090
had 8 million downloads layer and the

00:08:25,500 --> 00:08:29,090
application Oliver the web are just

00:08:27,090 --> 00:08:32,130
running and malicious code on production

00:08:29,090 --> 00:08:34,919
so what is the event stream is tolki

00:08:32,130 --> 00:08:37,680
that provides utilities to create and

00:08:34,919 --> 00:08:40,380
manage streams for JavaScript it was an

00:08:37,680 --> 00:08:43,620
author by Dominic our dmitar has more

00:08:40,380 --> 00:08:45,480
than 400 packages they had like more

00:08:43,620 --> 00:08:49,290
than 30 contributors and teachers and

00:08:45,480 --> 00:08:51,300
stars this is Dominic Thor this is the

00:08:49,290 --> 00:08:53,670
stream line so you can see that the

00:08:51,300 --> 00:08:55,920
package was created way back into

00:08:53,670 --> 00:09:00,090
and 18 actually the attack happened like

00:08:55,920 --> 00:09:02,850
seven years later on so in 2015

00:09:00,090 --> 00:09:04,770
github user called deaf yes comments on

00:09:02,850 --> 00:09:07,290
an issue on the event stream project

00:09:04,770 --> 00:09:09,270
questioning if flatmap functionality

00:09:07,290 --> 00:09:11,340
would be welcome so what happened

00:09:09,270 --> 00:09:13,380
actually right nine control which is the

00:09:11,340 --> 00:09:15,840
bad guy actually went through all the

00:09:13,380 --> 00:09:18,120
issues at the thread and look for where

00:09:15,840 --> 00:09:21,270
he could actually implement malicious

00:09:18,120 --> 00:09:23,580
code and you can see it the on this

00:09:21,270 --> 00:09:25,500
thread the last a bit if you publish a

00:09:23,580 --> 00:09:27,930
flat map module and then make a PRT

00:09:25,500 --> 00:09:30,030
included I'll merge so the core

00:09:27,930 --> 00:09:32,610
maintainer so yeah just do the flat map

00:09:30,030 --> 00:09:36,480
module I'll merge it so what happened

00:09:32,610 --> 00:09:39,750
2018 a user identify as antonio mathias

00:09:36,480 --> 00:09:43,200
actually created this non-malicious flat

00:09:39,750 --> 00:09:44,130
my package and then next you can guess

00:09:43,200 --> 00:09:46,110
it

00:09:44,130 --> 00:09:48,180
Antoni propose to you actually add this

00:09:46,110 --> 00:09:49,920
package to the event stream and ri9

00:09:48,180 --> 00:09:51,780
control actually approach dominique to

00:09:49,920 --> 00:09:54,450
say hey i'm gonna do it actually and

00:09:51,780 --> 00:09:57,450
what happened dominic accepted the offer

00:09:54,450 --> 00:10:00,270
and makes them both a contributor to the

00:09:57,450 --> 00:10:03,210
even stream and gave full access penalty

00:10:00,270 --> 00:10:07,080
access rights on the ampion registry for

00:10:03,210 --> 00:10:09,420
the module so back then Rockline control

00:10:07,080 --> 00:10:10,920
is still doing a little bit of social

00:10:09,420 --> 00:10:12,420
engineering both push like cosmetic

00:10:10,920 --> 00:10:14,700
changes like really small changes just

00:10:12,420 --> 00:10:16,380
to build up trust and then you can see

00:10:14,700 --> 00:10:21,150
in 2018 they actually pushed the

00:10:16,380 --> 00:10:23,220
malicious code September 2018 one of the

00:10:21,150 --> 00:10:24,960
user and github opt-in issue against

00:10:23,220 --> 00:10:26,880
normal reporting an unexpected

00:10:24,960 --> 00:10:29,340
application warning as I can what's

00:10:26,880 --> 00:10:31,320
going on this it's really slow and you

00:10:29,340 --> 00:10:33,570
started actually having a lot of issue

00:10:31,320 --> 00:10:35,130
created and you can see like this one is

00:10:33,570 --> 00:10:38,040
very suspicious coming from Dominic's

00:10:35,130 --> 00:10:40,680
are so they actually pinpoint their the

00:10:38,040 --> 00:10:43,290
issue so this was a targeted attack on

00:10:40,680 --> 00:10:46,040
copay which is a secure Bitcoin wallet

00:10:43,290 --> 00:10:48,990
platform this is the actually the target

00:10:46,040 --> 00:10:50,790
so the strategy of the attacker was to

00:10:48,990 --> 00:10:53,280
wait the opportunity for it to be

00:10:50,790 --> 00:10:56,280
executed when the copy app was being

00:10:53,280 --> 00:10:58,440
built which actually they succeeded and

00:10:56,280 --> 00:11:03,300
they it was built within copy version

00:10:58,440 --> 00:11:05,520
five oh two two five one zero so what

00:11:03,300 --> 00:11:06,790
happened after you can't really say that

00:11:05,520 --> 00:11:08,800
the

00:11:06,790 --> 00:11:12,310
stream has been archived you can see on

00:11:08,800 --> 00:11:15,250
the top rock nine control github profile

00:11:12,310 --> 00:11:17,260
has been shut down and when did you

00:11:15,250 --> 00:11:19,090
commit to grade the dependency

00:11:17,260 --> 00:11:22,180
management you can see love show to

00:11:19,090 --> 00:11:24,970
write line control okay so this was an

00:11:22,180 --> 00:11:26,980
example of attacks against web app

00:11:24,970 --> 00:11:29,530
security but I'll like to take a step

00:11:26,980 --> 00:11:31,570
back and explain to you what is web app

00:11:29,530 --> 00:11:33,310
security so web app security is a branch

00:11:31,570 --> 00:11:35,470
of a protect that deal specifically with

00:11:33,310 --> 00:11:38,770
security of website web app and web

00:11:35,470 --> 00:11:40,570
services and also I would like to use

00:11:38,770 --> 00:11:45,460
you for this we don't know who's really

00:11:40,570 --> 00:11:47,680
are here with us yeah okay so it says

00:11:45,460 --> 00:11:49,300
for open web app a security project

00:11:47,680 --> 00:11:55,060
it's basically communicate community

00:11:49,300 --> 00:11:57,610
dedicated to gave tools and guidelines

00:11:55,060 --> 00:12:00,100
to developers to actually implement

00:11:57,610 --> 00:12:03,490
security within web app so you have the

00:12:00,100 --> 00:12:06,040
web site OS org it's like all of the

00:12:03,490 --> 00:12:08,410
they do more than that but this is just

00:12:06,040 --> 00:12:10,690
to give you an example they do on mobile

00:12:08,410 --> 00:12:12,430
they do on could with you they do on

00:12:10,690 --> 00:12:14,770
threat modeling in terms of things

00:12:12,430 --> 00:12:16,900
server lace you just name it you will

00:12:14,770 --> 00:12:19,720
find and all of those is free actually

00:12:16,900 --> 00:12:21,640
on their on their website so I'm just

00:12:19,720 --> 00:12:23,170
going to focus on the OS top ten you

00:12:21,640 --> 00:12:25,660
might be familiar of have heard about

00:12:23,170 --> 00:12:27,670
the the OS top ten it's it's basically

00:12:25,660 --> 00:12:31,870
the ten most critical web app security

00:12:27,670 --> 00:12:33,430
risks so what is a security risk so if

00:12:31,870 --> 00:12:35,350
you've seen with all those example you

00:12:33,430 --> 00:12:36,670
have an attacker trying to find an

00:12:35,350 --> 00:12:38,440
attack vector it could be social

00:12:36,670 --> 00:12:41,170
engineering could be try to find some

00:12:38,440 --> 00:12:43,480
vulnerabilities in the app try to find

00:12:41,170 --> 00:12:45,310
security weaknesses and then implement

00:12:43,480 --> 00:12:47,050
the malicious code and then you have a

00:12:45,310 --> 00:12:48,610
business impact for example for the

00:12:47,050 --> 00:12:50,260
copay well it's it actually went down

00:12:48,610 --> 00:12:53,950
and they had to shut down the the

00:12:50,260 --> 00:12:56,530
website so this is the the all substance

00:12:53,950 --> 00:12:59,410
for 2017 they usually issue a new one

00:12:56,530 --> 00:13:01,390
every three to four years but we're

00:12:59,410 --> 00:13:05,770
going to focus on the a9 using

00:13:01,390 --> 00:13:07,360
components with known vulnerabilities so

00:13:05,770 --> 00:13:09,100
how do you know if your application is

00:13:07,360 --> 00:13:12,640
vulnerable so usually if you don't know

00:13:09,100 --> 00:13:14,830
the version of older components here how

00:13:12,640 --> 00:13:18,140
many people can tell me the version of

00:13:14,830 --> 00:13:20,750
all the components that are using yeah

00:13:18,140 --> 00:13:23,540
if you don't scan for vulnerabilities

00:13:20,750 --> 00:13:28,190
regularly who's using tools to scan for

00:13:23,540 --> 00:13:29,589
their dependency okay a couple obviously

00:13:28,190 --> 00:13:33,370
if you don't fix or upgrade the

00:13:29,589 --> 00:13:36,290
dependency so how can you prevent it

00:13:33,370 --> 00:13:38,779
easy one just remove the in use on us

00:13:36,290 --> 00:13:40,579
dependencies this was a little bit

00:13:38,779 --> 00:13:42,500
tricky if you can do in Vitoria an

00:13:40,579 --> 00:13:44,060
inventory of all the version of both

00:13:42,500 --> 00:13:47,390
both client-side and server-side

00:13:44,060 --> 00:13:49,940
components obviously try to obtain the

00:13:47,390 --> 00:13:51,920
components from official sources be

00:13:49,940 --> 00:13:53,660
careful about typos crying so for

00:13:51,920 --> 00:13:55,610
example if you type react with to eat

00:13:53,660 --> 00:13:57,399
when you do npm install you might

00:13:55,610 --> 00:14:00,320
probably get there the malicious one

00:13:57,399 --> 00:14:03,920
prefers sign packages monitor for

00:14:00,320 --> 00:14:06,019
libraries and components you can use the

00:14:03,920 --> 00:14:08,870
CVE which seems for common vulnerability

00:14:06,019 --> 00:14:11,660
exposures so this is website it actually

00:14:08,870 --> 00:14:14,240
lists all the publicly knowns cyber

00:14:11,660 --> 00:14:16,880
security security vulnerabilities i've

00:14:14,240 --> 00:14:19,070
found a quick search on react and they

00:14:16,880 --> 00:14:20,600
will tell you which version are actually

00:14:19,070 --> 00:14:25,310
vulnerable and which one it has been

00:14:20,600 --> 00:14:27,140
fixed so the good news is you don't have

00:14:25,310 --> 00:14:30,410
to do this manually there are tools for

00:14:27,140 --> 00:14:32,390
that the first one would be the the

00:14:30,410 --> 00:14:34,720
github dependency graph who here is

00:14:32,390 --> 00:14:37,339
familiar with github dependency graph

00:14:34,720 --> 00:14:40,339
cool so the fancy graph is available for

00:14:37,339 --> 00:14:42,529
every public repo if you have a private

00:14:40,339 --> 00:14:45,350
repo you have to actually turn on

00:14:42,529 --> 00:14:47,899
manually those are all the languages

00:14:45,350 --> 00:14:51,920
covered by the dependency graph so

00:14:47,899 --> 00:14:53,899
including javascript obviously and this

00:14:51,920 --> 00:14:55,880
is if you want to turn on you just have

00:14:53,899 --> 00:14:57,740
to go on a repo click on inside the

00:14:55,880 --> 00:15:01,269
Pennsy graph and you can allow access so

00:14:57,740 --> 00:15:04,670
it will start scanning your package file

00:15:01,269 --> 00:15:07,250
also you can set up notifications if you

00:15:04,670 --> 00:15:09,140
want to receive emails so this would be

00:15:07,250 --> 00:15:11,720
you would have like a weekly digest or

00:15:09,140 --> 00:15:13,959
daily Jazz's digest depending on the

00:15:11,720 --> 00:15:17,000
settings that you have if this

00:15:13,959 --> 00:15:18,949
disclaimer github security feature are

00:15:17,000 --> 00:15:21,199
actually quite limited they don't catch

00:15:18,949 --> 00:15:24,190
all vulnerabilities but good news

00:15:21,199 --> 00:15:26,959
dependable has been acquired by github

00:15:24,190 --> 00:15:29,540
so the good thing is dependable is

00:15:26,959 --> 00:15:30,860
covering much more than the dependency

00:15:29,540 --> 00:15:34,180
graph

00:15:30,860 --> 00:15:37,670
also it raised automatic pull requests

00:15:34,180 --> 00:15:43,400
so by the way this who here is familiar

00:15:37,670 --> 00:15:45,310
with github marketplace so I'm github

00:15:43,400 --> 00:15:48,620
they do have a marketplace when you can

00:15:45,310 --> 00:15:51,200
find a lot of application including

00:15:48,620 --> 00:15:55,670
dependable dependable is free for public

00:15:51,200 --> 00:15:58,520
and private repos so yeah you would set

00:15:55,670 --> 00:15:59,720
the security and then if you want to do

00:15:58,520 --> 00:16:01,930
manually you can actually create

00:15:59,720 --> 00:16:04,310
automatic security fix on a specific

00:16:01,930 --> 00:16:05,960
vulnerability but I would recommend you

00:16:04,310 --> 00:16:09,110
actually turn on and you have it

00:16:05,960 --> 00:16:10,820
automatically you'd have the PLR you can

00:16:09,110 --> 00:16:13,310
actually link it with selects you have a

00:16:10,820 --> 00:16:15,110
notification and you have what they call

00:16:13,310 --> 00:16:18,590
a compatibility score so basically they

00:16:15,110 --> 00:16:20,060
will compare with other public repo and

00:16:18,590 --> 00:16:22,490
if it's not breaking there is the Eisley

00:16:20,060 --> 00:16:25,370
pipeline they will bump up this score so

00:16:22,490 --> 00:16:27,970
you can merge with contents

00:16:25,370 --> 00:16:30,860
if you feel adventurous you can actually

00:16:27,970 --> 00:16:33,580
set the settings through yellow fowl and

00:16:30,860 --> 00:16:36,590
you can set all of those config options

00:16:33,580 --> 00:16:38,330
you can also validate your ya mol file

00:16:36,590 --> 00:16:40,370
if you don't feel adventurous you can

00:16:38,330 --> 00:16:44,030
just go on the online platform and just

00:16:40,370 --> 00:16:46,940
like checkboxes it's the same

00:16:44,030 --> 00:16:48,770
you can also set security alerts what we

00:16:46,940 --> 00:16:50,450
recommend in your company is to set

00:16:48,770 --> 00:16:51,980
distribution way so you you're not

00:16:50,450 --> 00:16:53,690
sending notification to you all the

00:16:51,980 --> 00:16:55,910
engineering department with pre Pune

00:16:53,690 --> 00:16:57,800
don't really care this is just the the

00:16:55,910 --> 00:17:01,610
ones for your repo or for your for your

00:16:57,800 --> 00:17:03,200
team there's another tool this one is

00:17:01,610 --> 00:17:07,160
Spade actually are you familiar with

00:17:03,200 --> 00:17:09,470
sneak sneak does the exact same thing as

00:17:07,160 --> 00:17:13,850
they penned the bolts so we'll check the

00:17:09,470 --> 00:17:17,300
repo for vulnerabilities so the same you

00:17:13,850 --> 00:17:20,300
can find it on the github marketplace so

00:17:17,300 --> 00:17:24,530
thing is free for open-source and small

00:17:20,300 --> 00:17:27,350
yeah small organizations so they have

00:17:24,530 --> 00:17:30,620
online platform where you could actually

00:17:27,350 --> 00:17:32,570
check out the you're vulnerable packages

00:17:30,620 --> 00:17:34,700
they'll give you information like which

00:17:32,570 --> 00:17:37,460
and they will classify by the current

00:17:34,700 --> 00:17:39,910
security status they will also give you

00:17:37,460 --> 00:17:43,169
a little bit of explanation why this

00:17:39,910 --> 00:17:44,309
package is vulnerable if

00:17:43,169 --> 00:17:46,379
you have the paid version you can

00:17:44,309 --> 00:17:48,119
actually create a JIRA issue and spam

00:17:46,379 --> 00:17:51,840
JIRA with all of this issue or you can

00:17:48,119 --> 00:17:54,359
just ignore it you can also link sneak

00:17:51,840 --> 00:17:56,970
through slack for those of you who are

00:17:54,359 --> 00:17:59,820
wondering how you do the the link it's

00:17:56,970 --> 00:18:01,859
all based through web hooks so usually

00:17:59,820 --> 00:18:03,539
you go there's tools aren't the the

00:18:01,859 --> 00:18:05,580
online platform they would usually have

00:18:03,539 --> 00:18:07,799
an integration tab and you could just

00:18:05,580 --> 00:18:09,629
select slack pick the the web hook and

00:18:07,799 --> 00:18:14,039
do the same for almost like you can

00:18:09,629 --> 00:18:17,369
actually customize it and snake would be

00:18:14,039 --> 00:18:21,450
step through your CSV pipeline as you

00:18:17,369 --> 00:18:23,369
can see here obviously they have the the

00:18:21,450 --> 00:18:26,999
option of sending you email so when you

00:18:23,369 --> 00:18:29,850
have a new vulnerability this is as I

00:18:26,999 --> 00:18:30,989
mentioned the github a marketplace so as

00:18:29,850 --> 00:18:32,369
you could say it's not only about

00:18:30,989 --> 00:18:34,080
security with dependency management

00:18:32,369 --> 00:18:35,730
security but you have obviously like

00:18:34,080 --> 00:18:37,139
good quality could review continuous

00:18:35,730 --> 00:18:38,129
integration so it's really good just

00:18:37,139 --> 00:18:40,340
have a look it's there's a lot of

00:18:38,129 --> 00:18:43,710
application and some of them are free or

00:18:40,340 --> 00:18:48,989
github is also occurring a couple of

00:18:43,710 --> 00:18:51,619
them yeah and this is for security so

00:18:48,989 --> 00:18:54,869
there's also features that allow you to

00:18:51,619 --> 00:18:56,190
protect your web app so it's the content

00:18:54,869 --> 00:18:59,759
security policy and sub resource

00:18:56,190 --> 00:19:04,559
integrity so who's here familiar with

00:18:59,759 --> 00:19:06,840
the content security policy okay

00:19:04,559 --> 00:19:08,669
so it's an added layer of security that

00:19:06,840 --> 00:19:11,070
helps to detect and mitigate attacks

00:19:08,669 --> 00:19:13,919
like a curse or scripting and data

00:19:11,070 --> 00:19:15,480
injection attacks so basically you would

00:19:13,919 --> 00:19:18,539
have some sort of like whitelist in the

00:19:15,480 --> 00:19:21,419
header and if the file is not on this

00:19:18,539 --> 00:19:23,159
why place it will just get rejected on

00:19:21,419 --> 00:19:25,859
the server side so it won't get loaded

00:19:23,159 --> 00:19:27,889
on the browser so there's a good

00:19:25,859 --> 00:19:30,779
documentation on the the MDM I

00:19:27,889 --> 00:19:32,879
recommended you to to have a look at it

00:19:30,779 --> 00:19:35,220
there's also the website cuts and

00:19:32,879 --> 00:19:38,190
security policy dot org

00:19:35,220 --> 00:19:40,289
I think or com they will give you a list

00:19:38,190 --> 00:19:41,909
of all the directive that you can use

00:19:40,289 --> 00:19:45,629
and as you can see it covers everything

00:19:41,909 --> 00:19:48,629
script style images frame sandbox they

00:19:45,629 --> 00:19:51,090
also you you can set the source value if

00:19:48,629 --> 00:19:52,019
you want to set the walcker or just be

00:19:51,090 --> 00:19:53,549
more specific

00:19:52,019 --> 00:19:55,149
obviously warrant card if it's the

00:19:53,549 --> 00:19:57,729
purpose

00:19:55,149 --> 00:20:00,580
and they give you a exemple for content

00:19:57,729 --> 00:20:01,899
security policy as well so for example

00:20:00,580 --> 00:20:05,019
if you want to allow everything you

00:20:01,899 --> 00:20:06,339
would do the default source self if you

00:20:05,019 --> 00:20:09,359
want to allow scripts from the same

00:20:06,339 --> 00:20:12,279
origin you would use script source self

00:20:09,359 --> 00:20:14,619
and what I would recommend cuz usually

00:20:12,279 --> 00:20:16,239
it's tricky to implement CSP will

00:20:14,619 --> 00:20:18,879
probably break a lot of stuff on your

00:20:16,239 --> 00:20:21,070
website at first is to have the report

00:20:18,879 --> 00:20:23,440
only turn on and you need an end point

00:20:21,070 --> 00:20:25,960
actually to see the results so I would

00:20:23,440 --> 00:20:28,210
recommend report your I which is free

00:20:25,960 --> 00:20:29,979
for the first ten thousand reports so

00:20:28,210 --> 00:20:32,169
you gotta recover it actually for when

00:20:29,979 --> 00:20:34,029
you first implement a CSP and when

00:20:32,169 --> 00:20:36,129
you're done when you're you fine-tune

00:20:34,029 --> 00:20:40,359
everything just remove the report only

00:20:36,129 --> 00:20:42,789
and implement like the proper CSP the

00:20:40,359 --> 00:20:44,889
other the other feature is the super

00:20:42,789 --> 00:20:46,599
source integrity which is also a

00:20:44,889 --> 00:20:48,669
security feature that enables the

00:20:46,599 --> 00:20:50,979
browser to verify the resource they

00:20:48,669 --> 00:20:54,070
fetch from the CDN are delivered without

00:20:50,979 --> 00:20:56,379
an expected manipulation so basically

00:20:54,070 --> 00:20:58,779
usually you have when you're taking from

00:20:56,379 --> 00:21:02,289
a city and those and you can actually

00:20:58,779 --> 00:21:06,159
copy with the SR I so it's basically a

00:21:02,289 --> 00:21:07,749
hash so you would see here on the SRM

00:21:06,159 --> 00:21:09,999
I've took the bootstrap I've actually

00:21:07,749 --> 00:21:12,369
removed the the one the SRO that they

00:21:09,999 --> 00:21:14,559
had on the website of hashes and you

00:21:12,369 --> 00:21:17,200
could see actually here the hash the

00:21:14,559 --> 00:21:19,690
shot three eight four and if you check

00:21:17,200 --> 00:21:21,969
on with the website the bootstrap

00:21:19,690 --> 00:21:25,029
website it will be the same so if you

00:21:21,969 --> 00:21:26,619
tamper with bit syrup and you regenerate

00:21:25,029 --> 00:21:27,849
Anusha I will be different so the

00:21:26,619 --> 00:21:31,690
browser won't load actually this

00:21:27,849 --> 00:21:36,820
malicious one yeah this is just to show

00:21:31,690 --> 00:21:38,499
that it's covered at 91% and also mdn

00:21:36,820 --> 00:21:41,919
has a really good documentation around

00:21:38,499 --> 00:21:44,969
the server source integrity so there's

00:21:41,919 --> 00:21:47,379
also more tools to help you actually

00:21:44,969 --> 00:21:50,589
have your web app more secure like

00:21:47,379 --> 00:21:55,089
online scans who here is familiar with

00:21:50,589 --> 00:21:57,669
web hints okay this one was created by

00:21:55,089 --> 00:21:59,789
Microsoft and then they gave you a

00:21:57,669 --> 00:22:02,859
project to the JavaScript foundation

00:21:59,789 --> 00:22:06,279
project so basically what you do is you

00:22:02,859 --> 00:22:09,160
take the the URL of your website and you

00:22:06,279 --> 00:22:10,630
just scan and they will tell you

00:22:09,160 --> 00:22:14,680
where you have some issue and how you

00:22:10,630 --> 00:22:16,930
can actually remediates so usually they

00:22:14,680 --> 00:22:19,600
quite throw on it so for the security if

00:22:16,930 --> 00:22:22,180
you don't know what is this all of this

00:22:19,600 --> 00:22:23,820
means they actually will give you like

00:22:22,180 --> 00:22:27,160
why is important how can you actually

00:22:23,820 --> 00:22:30,760
remit it and apply mitigation on it so

00:22:27,160 --> 00:22:32,500
it's quite true there's another one

00:22:30,760 --> 00:22:35,140
lighthouse I think you might be more

00:22:32,500 --> 00:22:38,680
familiar with this one yeah

00:22:35,140 --> 00:22:40,690
so basically if you go to your dev tools

00:22:38,680 --> 00:22:43,020
you just go to audits and you can

00:22:40,690 --> 00:22:45,400
perform a scan and the same they will

00:22:43,020 --> 00:22:49,240
flag if there's any there's actually a

00:22:45,400 --> 00:22:52,720
couple of security checks and they're

00:22:49,240 --> 00:22:55,990
performed by a snake in this case you

00:22:52,720 --> 00:23:00,130
also have PageSpeed insights they can

00:22:55,990 --> 00:23:03,670
give you also some security checks up

00:23:00,130 --> 00:23:06,570
trance and if you want to check the

00:23:03,670 --> 00:23:09,580
headers and if you have your CSP well

00:23:06,570 --> 00:23:13,870
configure you can use security headers

00:23:09,580 --> 00:23:15,490
Qualys SSL labs or up guard there's just

00:23:13,870 --> 00:23:18,640
like a couple of tools they're all free

00:23:15,490 --> 00:23:20,350
online you just need to put the your

00:23:18,640 --> 00:23:23,380
website and they will give you the the

00:23:20,350 --> 00:23:26,260
results so what's next if you're

00:23:23,380 --> 00:23:28,660
interested in security generally

00:23:26,260 --> 00:23:31,060
interested in security you could become

00:23:28,660 --> 00:23:33,040
security champion in your company if

00:23:31,060 --> 00:23:34,690
your security team don't have this

00:23:33,040 --> 00:23:37,180
scheme you can actually approach your

00:23:34,690 --> 00:23:39,040
security team so basically usually in

00:23:37,180 --> 00:23:42,100
the company security team is quite small

00:23:39,040 --> 00:23:44,400
and they can actually attend every scrum

00:23:42,100 --> 00:23:48,250
ceremonies what they do they actually

00:23:44,400 --> 00:23:50,230
try to have someone within each feature

00:23:48,250 --> 00:23:52,740
team well they will act as security

00:23:50,230 --> 00:23:55,600
champions they can also organize

00:23:52,740 --> 00:23:56,890
security Gayle's and basically you're

00:23:55,600 --> 00:24:00,220
the bridge between developer and

00:23:56,890 --> 00:24:03,310
security and if your security team has

00:24:00,220 --> 00:24:05,800
this scheme they can actually provide

00:24:03,310 --> 00:24:09,040
training as well on it so they can send

00:24:05,800 --> 00:24:13,360
you to your conferences or give you more

00:24:09,040 --> 00:24:15,910
like resources on it before we finishing

00:24:13,360 --> 00:24:17,620
I just wanted to recommend from stink

00:24:15,910 --> 00:24:19,750
Airport which is called the state of

00:24:17,620 --> 00:24:22,179
open source security report and for

00:24:19,750 --> 00:24:23,919
so no type the state of software is

00:24:22,179 --> 00:24:26,100
supply chain so there will go also

00:24:23,919 --> 00:24:28,929
through the example that I've mentioned

00:24:26,100 --> 00:24:31,120
earlier and there's a the post-mortem

00:24:28,929 --> 00:24:34,330
person eek this is for the event stream

00:24:31,120 --> 00:24:36,640
and Troy hunt is in sterling in security

00:24:34,330 --> 00:24:39,669
researcher that writes a lot of plug

00:24:36,640 --> 00:24:43,390
poster well CSP and SR I if you want to

00:24:39,669 --> 00:24:46,780
learn more about those features if you

00:24:43,390 --> 00:24:49,059
are interested in cyber security career

00:24:46,780 --> 00:24:51,460
I've actually worth a piece on medium

00:24:49,059 --> 00:24:53,770
and I hope to become secure engineer

00:24:51,460 --> 00:24:55,780
I've gathered a lot of resources even if

00:24:53,770 --> 00:24:57,190
you don't want to become a security sure

00:24:55,780 --> 00:25:00,190
it's always good to you have a look at

00:24:57,190 --> 00:25:04,780
the OS documentation just you have this

00:25:00,190 --> 00:25:06,520
this side also if you're interested in

00:25:04,780 --> 00:25:08,830
security I would strongly recommend this

00:25:06,520 --> 00:25:13,000
Meetup just like trying to hijack that

00:25:08,830 --> 00:25:14,710
yeah so if you're a female identifiable

00:25:13,000 --> 00:25:16,570
female you have the ladies of London

00:25:14,710 --> 00:25:18,970
hacking society and OS we are and

00:25:16,570 --> 00:25:22,360
there's the all West London chapter

00:25:18,970 --> 00:25:24,640
every month I think it's specifically

00:25:22,360 --> 00:25:28,480
for a developer actually so it's quite

00:25:24,640 --> 00:25:32,470
high level so yeah this is good meetups

00:25:28,480 --> 00:25:34,990
and yeah I'll just finish with gas

00:25:32,470 --> 00:25:35,590
secure be secure and stay secure thank

00:25:34,990 --> 00:25:41,540
you

00:25:35,590 --> 00:25:41,540

YouTube URL: https://www.youtube.com/watch?v=bxMTVHdk6gk


