Title: Green Builds When You’re Not Google - JS Monthly - January 2020
Publication date: 2020-02-12
Playlist: JS Monthly London
Description: 
	Green builds when you’re not Google // Duncan Walker

Continuous Delivery makes teams faster but at the cost constant vigilance - the build must always be green. So how do you keep it that way? Books like DevOps Handbook or Accelerate are packed with research on practices from some of the biggest tech companies. These are great particularly as your team scales. We’ll talk about some of these and focus on practical things you can do when you’re not quite at Google-scale. How you can do to improve developer experience? How can you use hard data about your delivery pipeline to learn where to focus your efforts, get feedback and fix broken windows?

Duncan is a Principal Software Engineer at the BBC. He works on the content production workflows for journalists - building systems to help them author content and test new article formats. Recently he's been experimenting with natural language processing of news articles.

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,359 --> 00:00:03,120
my name is Duncan Walker and I'm a

00:00:01,709 --> 00:00:05,819
principal software engineer at the BBC

00:00:03,120 --> 00:00:09,000
and I'm going to talk to you for about

00:00:05,819 --> 00:00:12,630
half an hour on the things that we do to

00:00:09,000 --> 00:00:14,549
keep the bills green but before I start

00:00:12,630 --> 00:00:16,379
I'm just going to ask a couple of

00:00:14,549 --> 00:00:20,460
questions just to get a feel for where

00:00:16,379 --> 00:00:21,900
everybody is sort of in the room so can

00:00:20,460 --> 00:00:23,640
you put your hand up if you use a

00:00:21,900 --> 00:00:26,210
continuous integration server and I'm

00:00:23,640 --> 00:00:29,070
expecting this to be almost everyone ok

00:00:26,210 --> 00:00:30,390
but keep you hands up because I'm going

00:00:29,070 --> 00:00:34,230
to ask you a couple more questions and

00:00:30,390 --> 00:00:37,140
we'll see how far we get so you also

00:00:34,230 --> 00:00:38,879
have good test coverage and by good I

00:00:37,140 --> 00:00:40,860
mean good enough that you're willing to

00:00:38,879 --> 00:00:42,510
let things go all the way through to

00:00:40,860 --> 00:00:44,370
life you're just going to deploy all the

00:00:42,510 --> 00:00:47,910
way through do you trust that enough to

00:00:44,370 --> 00:00:49,440
do multiple live deploys per day ok bit

00:00:47,910 --> 00:00:51,570
fewer people but still some people

00:00:49,440 --> 00:00:54,719
holding out and then the last one is

00:00:51,570 --> 00:01:00,059
just a test of honesty and is your build

00:00:54,719 --> 00:01:01,859
always green I don't even know what

00:01:00,059 --> 00:01:04,350
yellow means but yes it will take that

00:01:01,859 --> 00:01:08,580
oh and one last one does is there anyone

00:01:04,350 --> 00:01:10,530
in the room who works for Google no good

00:01:08,580 --> 00:01:11,820
ok I can say what everyone when I was

00:01:10,530 --> 00:01:14,100
thinking about this I was thinking about

00:01:11,820 --> 00:01:16,500
ok why are we doing continuous

00:01:14,100 --> 00:01:18,600
integration what is it that it actually

00:01:16,500 --> 00:01:20,070
gives us and it gives us a couple of

00:01:18,600 --> 00:01:22,049
things the first one the most obvious

00:01:20,070 --> 00:01:24,299
one is it's a bit of automation it just

00:01:22,049 --> 00:01:25,950
saves us some time it does things it

00:01:24,299 --> 00:01:29,280
reduces the risk of doing some manual

00:01:25,950 --> 00:01:31,560
handling stuff but also then perhaps

00:01:29,280 --> 00:01:32,430
mark more arguably more importantly it

00:01:31,560 --> 00:01:34,619
gives us a signal

00:01:32,430 --> 00:01:37,470
it gives us a signal about the health of

00:01:34,619 --> 00:01:39,780
the app so is it if it's green it's

00:01:37,470 --> 00:01:41,520
telling us ok yeah you're doing well if

00:01:39,780 --> 00:01:43,020
it's red just giving you a signal that

00:01:41,520 --> 00:01:46,229
ok maybe you need to do something about

00:01:43,020 --> 00:01:49,110
it but then even within those red builds

00:01:46,229 --> 00:01:50,369
when your pipeline fails even within

00:01:49,110 --> 00:01:51,720
that there's a couple of different ways

00:01:50,369 --> 00:01:53,369
that might happen it might be because

00:01:51,720 --> 00:01:55,470
something is genuinely wrong you've been

00:01:53,369 --> 00:01:58,500
introduced to aggression but also it

00:01:55,470 --> 00:02:02,399
might be something else some flaky test

00:01:58,500 --> 00:02:03,420
or a flaky build step and actually I'm

00:02:02,399 --> 00:02:05,939
going to talk about those as well

00:02:03,420 --> 00:02:07,570
because they're even maybe even more

00:02:05,939 --> 00:02:09,759
important than the

00:02:07,570 --> 00:02:11,710
the failing test because when you've got

00:02:09,759 --> 00:02:15,340
noise you basically don't have any

00:02:11,710 --> 00:02:19,360
signal at all so okay why when you're

00:02:15,340 --> 00:02:22,060
not Google when often when I've read

00:02:19,360 --> 00:02:24,040
things about continuous integration and

00:02:22,060 --> 00:02:25,690
build and why it's important to keep it

00:02:24,040 --> 00:02:27,640
green it's often from a very sort of

00:02:25,690 --> 00:02:30,280
abstract level and it's sort of saying

00:02:27,640 --> 00:02:32,560
oh well this is the sort of thing you

00:02:30,280 --> 00:02:34,810
should be doing but it's very rarely in

00:02:32,560 --> 00:02:37,570
a very sort of practical pragmatic sort

00:02:34,810 --> 00:02:41,110
of view so I'm gonna try and talk from a

00:02:37,570 --> 00:02:43,540
very pragmatic view of what what have we

00:02:41,110 --> 00:02:45,550
been doing at the BBC on my team to try

00:02:43,540 --> 00:02:47,950
and keep our build green and so you're

00:02:45,550 --> 00:02:53,320
going to hear some successes but also

00:02:47,950 --> 00:02:56,530
some total failures and yeah so I guess

00:02:53,320 --> 00:02:59,290
the best place to start the story is a

00:02:56,530 --> 00:03:03,459
couple of years ago when I joined my

00:02:59,290 --> 00:03:05,560
current team at the BBC we were we I

00:03:03,459 --> 00:03:07,690
just joined from another team that maybe

00:03:05,560 --> 00:03:10,000
wasn't quite as good as this team and I

00:03:07,690 --> 00:03:12,489
thought I was in paradise they had this

00:03:10,000 --> 00:03:14,140
amazing bill pipeline everything was

00:03:12,489 --> 00:03:16,120
always green things were going through

00:03:14,140 --> 00:03:17,769
really fast and we were delivering

00:03:16,120 --> 00:03:21,010
software and customers were happy and

00:03:17,769 --> 00:03:25,810
everything was great and that went on

00:03:21,010 --> 00:03:28,180
for maybe a week maybe maybe two and

00:03:25,810 --> 00:03:30,400
then we had this retrospective meeting

00:03:28,180 --> 00:03:33,280
and we had a retrospective meeting where

00:03:30,400 --> 00:03:35,709
we and someone mentioned oh isn't it

00:03:33,280 --> 00:03:37,209
annoying when the build fails and then

00:03:35,709 --> 00:03:40,120
another person and then another person

00:03:37,209 --> 00:03:42,640
and slowly we realized that we develops

00:03:40,120 --> 00:03:46,030
a condition we've got this can we had a

00:03:42,640 --> 00:03:48,670
condition of a flaky build and it was

00:03:46,030 --> 00:03:50,920
not just an irritation anymore it was

00:03:48,670 --> 00:03:52,570
suddenly a real blocker we couldn't

00:03:50,920 --> 00:03:54,640
deliver features because people were

00:03:52,570 --> 00:03:56,920
constantly having to solve almost

00:03:54,640 --> 00:03:58,690
manually crank this thing that's

00:03:56,920 --> 00:04:02,799
supposed to be helping us and pushing

00:03:58,690 --> 00:04:05,470
builds right and of course it it

00:04:02,799 --> 00:04:07,750
probably wasn't a sudden thing it wasn't

00:04:05,470 --> 00:04:10,120
like that it was probably that it had

00:04:07,750 --> 00:04:11,739
been developing over really long period

00:04:10,120 --> 00:04:13,420
of time and it just gotten to breaking

00:04:11,739 --> 00:04:15,459
point and we just couldn't deal with it

00:04:13,420 --> 00:04:16,739
anymore so we had to do something about

00:04:15,459 --> 00:04:19,000
it

00:04:16,739 --> 00:04:21,609
just to give you a bit of context this

00:04:19,000 --> 00:04:23,580
is this is the sort of thing we had at

00:04:21,609 --> 00:04:27,700
the time so this is our flat channel

00:04:23,580 --> 00:04:29,800
hashtag see I build that just shows all

00:04:27,700 --> 00:04:31,000
of the builds that go through you're on

00:04:29,800 --> 00:04:33,190
a given day and you can see there'll be

00:04:31,000 --> 00:04:35,380
there'd be a few green ones but then the

00:04:33,190 --> 00:04:38,410
important one the signal is that bit at

00:04:35,380 --> 00:04:40,210
the bottom a failing build and that'll

00:04:38,410 --> 00:04:43,870
zoom in that on that and talk about it a

00:04:40,210 --> 00:04:46,000
bit more so this is what it looks like

00:04:43,870 --> 00:04:48,970
when a bill fails and we get sent a

00:04:46,000 --> 00:04:50,560
message and at the time I've sort of

00:04:48,970 --> 00:04:51,940
blanked out the name because I didn't

00:04:50,560 --> 00:04:53,169
really want to put that person's name

00:04:51,940 --> 00:04:54,610
any big letters on the front but

00:04:53,169 --> 00:04:56,440
actually that's part of the story

00:04:54,610 --> 00:04:58,240
because at the time we didn't have even

00:04:56,440 --> 00:05:00,370
the name on there because we didn't want

00:04:58,240 --> 00:05:02,380
to have a sort of blame culture of in

00:05:00,370 --> 00:05:04,380
big lights with the channel with dozens

00:05:02,380 --> 00:05:10,360
of people in you have broken the build

00:05:04,380 --> 00:05:12,580
Ben it was Ben and so instead we we

00:05:10,360 --> 00:05:14,350
didn't have a name on and pretty soon we

00:05:12,580 --> 00:05:16,990
realized that that is just not tenable

00:05:14,350 --> 00:05:18,820
you need to put the name on there so he

00:05:16,990 --> 00:05:20,199
just made a little change just put the

00:05:18,820 --> 00:05:21,850
name of the person who committed or

00:05:20,199 --> 00:05:24,460
triggered the bill that on there and

00:05:21,850 --> 00:05:26,590
that sort of cleared up some of the

00:05:24,460 --> 00:05:28,930
builds where it was something broken and

00:05:26,590 --> 00:05:30,340
no one had noticed or they you know they

00:05:28,930 --> 00:05:32,710
haven't picked up on it quickly enough

00:05:30,340 --> 00:05:34,000
and the other thing we did was to try

00:05:32,710 --> 00:05:35,949
and make sure that we have a really

00:05:34,000 --> 00:05:37,600
active discussion on there so the moment

00:05:35,949 --> 00:05:38,740
something happens everyone jumps on it

00:05:37,600 --> 00:05:42,790
and you can see that there's a few

00:05:38,740 --> 00:05:44,350
replies on there and that made that made

00:05:42,790 --> 00:05:45,910
a big difference and then the final

00:05:44,350 --> 00:05:47,410
thing is my favourite thing with it

00:05:45,910 --> 00:05:49,540
which you might not be able to see that

00:05:47,410 --> 00:05:53,260
there's a tiny little house looming in

00:05:49,540 --> 00:05:55,000
that tiny eyes emoji like that which we

00:05:53,260 --> 00:05:58,150
in my favorite thing about this is that

00:05:55,000 --> 00:06:00,490
it required no code and no work and no

00:05:58,150 --> 00:06:02,169
effort it was just a convention that

00:06:00,490 --> 00:06:03,460
just developed over time and I don't

00:06:02,169 --> 00:06:06,370
know who was the first person to do it

00:06:03,460 --> 00:06:08,020
but just just show you very simply I've

00:06:06,370 --> 00:06:10,210
seen this I'm on it I'm doing something

00:06:08,020 --> 00:06:11,800
about it and that made a really really

00:06:10,210 --> 00:06:13,180
big difference because it's so much

00:06:11,800 --> 00:06:15,160
quicker for me to be able to scan

00:06:13,180 --> 00:06:16,780
through a list and just see ok these

00:06:15,160 --> 00:06:18,850
ones are red but someone's on it and

00:06:16,780 --> 00:06:21,340
they're going to work on it until it's

00:06:18,850 --> 00:06:25,960
fixed so that made a really big

00:06:21,340 --> 00:06:27,370
difference and it made it so that meant

00:06:25,960 --> 00:06:29,320
that we'd picked up on all of the

00:06:27,370 --> 00:06:32,260
obvious ones these are like the really

00:06:29,320 --> 00:06:33,409
low-hanging fruit of the pub the build

00:06:32,260 --> 00:06:34,939
is broken and no one's

00:06:33,409 --> 00:06:36,319
doing some doing anything about it and

00:06:34,939 --> 00:06:38,749
it just meant that we just stopped

00:06:36,319 --> 00:06:43,129
having that we've our time to get him

00:06:38,749 --> 00:06:44,749
back to Green got much better so that

00:06:43,129 --> 00:06:46,249
picks off the low-hanging fruit but that

00:06:44,749 --> 00:06:49,249
wasn't that wasn't enough we were still

00:06:46,249 --> 00:06:50,479
had a sort of flaky build but luckily

00:06:49,249 --> 00:06:52,399
for us at the time

00:06:50,479 --> 00:06:53,569
Google we're doing a load of research

00:06:52,399 --> 00:06:56,149
that's probably not what our office

00:06:53,569 --> 00:06:58,219
looks like but that's research they were

00:06:56,149 --> 00:06:59,659
doing load of research on their own

00:06:58,219 --> 00:07:03,529
flaky build because they had a similar

00:06:59,659 --> 00:07:05,089
problem and they were focusing they were

00:07:03,529 --> 00:07:08,569
looking at build but they were also

00:07:05,089 --> 00:07:10,399
focusing particularly on flaky tests so

00:07:08,569 --> 00:07:14,959
their definition of a flaky test would

00:07:10,399 --> 00:07:16,339
be one that fails once or more within a

00:07:14,959 --> 00:07:17,989
given week which is interesting because

00:07:16,339 --> 00:07:19,429
it's a time-based thing so it tells you

00:07:17,989 --> 00:07:24,739
something about what they define is

00:07:19,429 --> 00:07:26,569
flaky and they so they did a bit of

00:07:24,739 --> 00:07:29,239
research on this and they try to work

00:07:26,569 --> 00:07:31,939
out what it what is it that makes these

00:07:29,239 --> 00:07:36,679
tests or they could also be build steps

00:07:31,939 --> 00:07:38,809
flaky and they try to sort of analyze it

00:07:36,679 --> 00:07:40,279
from a load of different angles or they

00:07:38,809 --> 00:07:41,869
sort of checked or is it to do with the

00:07:40,279 --> 00:07:45,559
technology that we were using is it

00:07:41,869 --> 00:07:49,219
different products is it is it how we're

00:07:45,559 --> 00:07:50,749
writing the tests what is it and the the

00:07:49,219 --> 00:07:54,619
one thing that they found maybe isn't

00:07:50,749 --> 00:07:55,999
surprising is that the more code you're

00:07:54,619 --> 00:07:58,729
testing and the more code you're

00:07:55,999 --> 00:08:01,159
executing more generally the more flaky

00:07:58,729 --> 00:08:02,839
is going to be and that might not be

00:08:01,159 --> 00:08:04,459
surprising in itself but the thing that

00:08:02,839 --> 00:08:06,199
was a bit more surprising to me is the

00:08:04,459 --> 00:08:09,529
fact that that is the only strong

00:08:06,199 --> 00:08:12,769
correlation so there's a link to a

00:08:09,529 --> 00:08:14,929
report there but basically they say they

00:08:12,769 --> 00:08:16,339
found a weak correlation with some of

00:08:14,929 --> 00:08:17,869
the tools that they were using but they

00:08:16,339 --> 00:08:20,329
thought that perhaps that was probably

00:08:17,869 --> 00:08:23,239
just an echo of the more strong

00:08:20,329 --> 00:08:25,309
correlation of if you run more code

00:08:23,239 --> 00:08:27,139
whether it's code your production code

00:08:25,309 --> 00:08:29,119
or code in the environment or code in

00:08:27,139 --> 00:08:30,649
your test tools or whatever the more

00:08:29,119 --> 00:08:34,699
code you're running the more flaky is

00:08:30,649 --> 00:08:36,740
going to be and so that really that

00:08:34,699 --> 00:08:40,009
really led me to think more about what

00:08:36,740 --> 00:08:42,110
we're doing in our pipeline to try and

00:08:40,009 --> 00:08:45,050
reduce those so I was thinking about our

00:08:42,110 --> 00:08:46,790
tests and you could in some ways you can

00:08:45,050 --> 00:08:47,209
see this is just like a rephrasing of

00:08:46,790 --> 00:08:49,670
the

00:08:47,209 --> 00:08:52,519
test pyramid but I was thinking about a

00:08:49,670 --> 00:08:54,860
test and thinking that we we want to

00:08:52,519 --> 00:08:56,329
cover more of the code of our app to

00:08:54,860 --> 00:08:58,459
give us more confidence there's a pretty

00:08:56,329 --> 00:09:01,490
linear relationship between those two

00:08:58,459 --> 00:09:02,869
things like this so the closer we get to

00:09:01,490 --> 00:09:04,579
covering all of our app they're more

00:09:02,869 --> 00:09:07,839
confident we are it's straightforward

00:09:04,579 --> 00:09:10,369
and but then the same is also true of

00:09:07,839 --> 00:09:12,319
according to Google of the more code

00:09:10,369 --> 00:09:14,809
that we're executing the more of the app

00:09:12,319 --> 00:09:16,730
more of our app that we execute the more

00:09:14,809 --> 00:09:20,149
code is being executed it's also a very

00:09:16,730 --> 00:09:24,050
linear relationship except for this bit

00:09:20,149 --> 00:09:26,119
is not exactly true it is actually much

00:09:24,050 --> 00:09:28,730
more of like a stepped sort of

00:09:26,119 --> 00:09:30,319
relationship like that so you might have

00:09:28,730 --> 00:09:32,899
in the bottom left hand corner some

00:09:30,319 --> 00:09:35,360
static analysis or things like that

00:09:32,899 --> 00:09:36,619
linting and that sort of thing and right

00:09:35,360 --> 00:09:38,629
in the top right hand corner you've got

00:09:36,619 --> 00:09:40,550
end-to-end tests running on selenium or

00:09:38,629 --> 00:09:42,319
something like that in between you've

00:09:40,550 --> 00:09:45,350
got several points where you're sort of

00:09:42,319 --> 00:09:46,970
jumping out of the the runtime that

00:09:45,350 --> 00:09:49,129
you're in or the abstraction you're in

00:09:46,970 --> 00:09:50,779
so you might be jumping from your static

00:09:49,129 --> 00:09:52,910
analysis into the unit tests or from a

00:09:50,779 --> 00:09:55,549
unit test that one that's using that's

00:09:52,910 --> 00:09:57,199
spinning of J's Dom or then a real Dom

00:09:55,549 --> 00:10:01,939
or you know in that more and more

00:09:57,199 --> 00:10:04,160
jumping up like that so can you sort of

00:10:01,939 --> 00:10:07,519
make take advantage of the fact that

00:10:04,160 --> 00:10:09,139
that line has sort of steps in it and

00:10:07,519 --> 00:10:11,959
the other one doesn't it sort of

00:10:09,139 --> 00:10:14,929
straight and I think this is the sort of

00:10:11,959 --> 00:10:17,420
thing that what's-his-name Kenzie Dodd

00:10:14,929 --> 00:10:20,449
is talking about when he's suggesting

00:10:17,420 --> 00:10:22,819
that you should focus with the test

00:10:20,449 --> 00:10:24,799
trophy you should focus much more on

00:10:22,819 --> 00:10:26,899
static analysis and integration tests

00:10:24,799 --> 00:10:28,970
he's basically saying get yourself into

00:10:26,899 --> 00:10:30,980
one of these corners here so when you're

00:10:28,970 --> 00:10:33,049
doing an integration test it's still

00:10:30,980 --> 00:10:34,610
within JavaScript you're sort of getting

00:10:33,049 --> 00:10:35,839
into that point where you're doing as

00:10:34,610 --> 00:10:37,670
much as you possibly can without

00:10:35,839 --> 00:10:40,879
stepping out over that JavaScript

00:10:37,670 --> 00:10:43,759
runtime and I think that we found that

00:10:40,879 --> 00:10:45,860
the there's that corner but there's also

00:10:43,759 --> 00:10:47,959
other ones different points throughout

00:10:45,860 --> 00:10:49,759
their testing chain and so you can take

00:10:47,959 --> 00:10:52,369
advantage of those ones and I'll come

00:10:49,759 --> 00:10:53,600
back to some examples and so we're

00:10:52,369 --> 00:10:55,129
looking at some of this and thinking

00:10:53,600 --> 00:10:57,649
okay but that sort of explains some of

00:10:55,129 --> 00:11:00,709
it but it's not really enough and I

00:10:57,649 --> 00:11:02,730
can't work out how if I've got a test

00:11:00,709 --> 00:11:05,129
maybe I've got a test that's right

00:11:02,730 --> 00:11:06,209
passing 90% at the time but failing 10%

00:11:05,129 --> 00:11:08,490
this time but it doesn't seem to be that

00:11:06,209 --> 00:11:10,079
that that's the case in the pipeline it

00:11:08,490 --> 00:11:12,209
feels like it's much worse than that but

00:11:10,079 --> 00:11:16,199
I measure it objectively and it is not

00:11:12,209 --> 00:11:18,240
it's like that and the the sort of but

00:11:16,199 --> 00:11:20,490
the answer to that comes down to this

00:11:18,240 --> 00:11:23,339
formula and does anyone know what that

00:11:20,490 --> 00:11:27,660
sort of you shapes and n shaped symbol

00:11:23,339 --> 00:11:29,550
is yeah so it's the intersection in

00:11:27,660 --> 00:11:32,250
probability the intersection between

00:11:29,550 --> 00:11:34,500
those two probabilities of it happens

00:11:32,250 --> 00:11:36,199
90% of time and 90% of design and so

00:11:34,500 --> 00:11:39,290
what's the answer

00:11:36,199 --> 00:11:40,949
yeah so it's 81 percent and often I find

00:11:39,290 --> 00:11:43,019
probabilities quite sort of

00:11:40,949 --> 00:11:46,110
counterintuitive so just having just

00:11:43,019 --> 00:11:47,490
that some was enough to make it sort of

00:11:46,110 --> 00:11:50,339
makes sense to me that it's going to go

00:11:47,490 --> 00:11:51,779
down quite quickly and it's not the case

00:11:50,339 --> 00:11:53,759
that if you've got two things that are

00:11:51,779 --> 00:11:56,279
90% good you've got and you put them

00:11:53,759 --> 00:12:01,319
together you got a 90 saying good it's

00:11:56,279 --> 00:12:05,040
not and the problem is that that's true

00:12:01,319 --> 00:12:08,819
for two tests but it's also true for

00:12:05,040 --> 00:12:12,089
many so if you I've got one test that

00:12:08,819 --> 00:12:14,069
passes 90% at the time I've got 90% and

00:12:12,089 --> 00:12:16,199
then I'm going to go down to 81 72 and

00:12:14,069 --> 00:12:20,160
by the time I've got only five flaky

00:12:16,199 --> 00:12:21,540
tests of hit almost 50% I can flip a

00:12:20,160 --> 00:12:23,759
coin to tell you whether my build

00:12:21,540 --> 00:12:25,980
pipeline is going to pass and what makes

00:12:23,759 --> 00:12:27,959
it worse is these aren't these aren't

00:12:25,980 --> 00:12:30,810
necessarily just tests it could be any

00:12:27,959 --> 00:12:32,519
step in our pipeline so that number is

00:12:30,810 --> 00:12:34,560
not just the number that you've got in

00:12:32,519 --> 00:12:36,269
that test suite or in all of your test

00:12:34,560 --> 00:12:37,470
Suites it's also added to all of the

00:12:36,269 --> 00:12:39,600
things that you're doing anywhere in

00:12:37,470 --> 00:12:41,670
your pipeline and you can see that curve

00:12:39,600 --> 00:12:44,579
sort of drops off really suddenly at the

00:12:41,670 --> 00:12:46,740
start before it starts to flatten out so

00:12:44,579 --> 00:12:49,589
okay you might say oh well 10% mean oh

00:12:46,740 --> 00:12:52,620
that's that's pretty bad so maybe I'd

00:12:49,589 --> 00:12:55,589
want I'd think I think my thing my tests

00:12:52,620 --> 00:12:56,069
are less flaky that so let's say 1% okay

00:12:55,589 --> 00:12:58,800
right

00:12:56,069 --> 00:13:01,110
we now we've got a much flatter line you

00:12:58,800 --> 00:13:03,480
don't we're not subject to that quick

00:13:01,110 --> 00:13:05,819
drop off at the start but still by the

00:13:03,480 --> 00:13:07,680
time you've got to 10 of these events

00:13:05,819 --> 00:13:11,399
which they're going to be loads you've

00:13:07,680 --> 00:13:13,019
got down to 90 percent 90 percent a

00:13:11,399 --> 00:13:14,040
pipeline that's going to pass the 90

00:13:13,019 --> 00:13:16,230
percent at this time which still

00:13:14,040 --> 00:13:21,259
doesn't seem very good so okay all right

00:13:16,230 --> 00:13:24,570
okay let's let's push right down to 0.1%

00:13:21,259 --> 00:13:27,480
okay now now now I'm happy with that

00:13:24,570 --> 00:13:29,490
that we've got 210 and it's still

00:13:27,480 --> 00:13:32,850
passing 99 percent at the time then

00:13:29,490 --> 00:13:34,769
maybe that's just about good enough I'll

00:13:32,850 --> 00:13:39,329
just show that zoomed in as well so

00:13:34,769 --> 00:13:41,940
here's the same graph but just showing

00:13:39,329 --> 00:13:44,250
the top 2% just looks a little bit worse

00:13:41,940 --> 00:13:46,490
but we'll come back to that basically

00:13:44,250 --> 00:13:49,920
what that shows us that even when it's

00:13:46,490 --> 00:13:52,350
0.1 percent chance of it failing it's

00:13:49,920 --> 00:13:54,389
still really bad it's still a problem so

00:13:52,350 --> 00:13:56,790
that means that you really really tiny

00:13:54,389 --> 00:13:59,069
things that you think very very very

00:13:56,790 --> 00:14:01,560
rarely occur they occur one time in a

00:13:59,069 --> 00:14:03,959
thousand a still can still have a really

00:14:01,560 --> 00:14:05,699
big impact on your pipeline we tried to

00:14:03,959 --> 00:14:07,680
try to do something about that because

00:14:05,699 --> 00:14:09,480
we might have in the past had something

00:14:07,680 --> 00:14:10,860
that fails and you think oh but it was a

00:14:09,480 --> 00:14:12,000
one-off I don't need to do anything

00:14:10,860 --> 00:14:13,860
about it it's never going to happen

00:14:12,000 --> 00:14:16,319
again it's to do with the environment or

00:14:13,860 --> 00:14:19,260
something a solar flare or whatever and

00:14:16,319 --> 00:14:21,600
we so we decided okay well let's write

00:14:19,260 --> 00:14:23,430
everything down every time anything

00:14:21,600 --> 00:14:27,630
happens let's keep a record of it on a

00:14:23,430 --> 00:14:29,779
wiki and we did that to try and focus

00:14:27,630 --> 00:14:32,639
our effort on what we were fixing but

00:14:29,779 --> 00:14:34,610
actually within within about a week we'd

00:14:32,639 --> 00:14:37,079
found that there were a couple of I

00:14:34,610 --> 00:14:38,459
would get really specific we had a a

00:14:37,079 --> 00:14:40,709
Jenkins job that would occasionally

00:14:38,459 --> 00:14:42,420
freeze and it would freeze on the most

00:14:40,709 --> 00:14:44,069
innocuous steps and we couldn't work out

00:14:42,420 --> 00:14:45,870
what's going on but the moment we

00:14:44,069 --> 00:14:47,519
started to record it it was very clear

00:14:45,870 --> 00:14:50,040
it happened on any hour there was a

00:14:47,519 --> 00:14:51,449
backup issue so and that was very soon

00:14:50,040 --> 00:14:54,240
as you get into it it was very easy to

00:14:51,449 --> 00:14:55,829
fix but if you're not recording these

00:14:54,240 --> 00:14:58,529
things you're never gonna you're never

00:14:55,829 --> 00:14:59,990
going to find that and yeah and the

00:14:58,529 --> 00:15:05,959
other thing to say about that is very

00:14:59,990 --> 00:15:08,610
small numbers but if you if your

00:15:05,959 --> 00:15:11,250
application or your pipeline more

00:15:08,610 --> 00:15:14,660
generally had a real regression rate of

00:15:11,250 --> 00:15:18,000
1% say you were actually introducing

00:15:14,660 --> 00:15:20,670
regressions at a rate of 1% and if we

00:15:18,000 --> 00:15:23,459
plot that on this graph then suddenly

00:15:20,670 --> 00:15:26,760
that line which looks not too bad at the

00:15:23,459 --> 00:15:28,010
start is bad even that one's bad because

00:15:26,760 --> 00:15:31,090
by the time we've got

00:15:28,010 --> 00:15:33,230
- ten flaky tests even though they're

00:15:31,090 --> 00:15:35,150
incredibly unlikely to happen

00:15:33,230 --> 00:15:37,940
you still got to the point where when

00:15:35,150 --> 00:15:40,460
the bill fails it's a 50/50 chance of it

00:15:37,940 --> 00:15:42,320
being a real regression or something

00:15:40,460 --> 00:15:44,690
that's actually just a factor of the way

00:15:42,320 --> 00:15:49,070
your pipeline is working so it's not a

00:15:44,690 --> 00:15:51,800
great signal but luckily Google we're

00:15:49,070 --> 00:15:55,010
doing a load more research and Google

00:15:51,800 --> 00:15:57,650
did some research on their development

00:15:55,010 --> 00:15:59,840
practices and there's a report that just

00:15:57,650 --> 00:16:02,030
lists in my new detail everything that

00:15:59,840 --> 00:16:08,840
they do at Google and one of the things

00:16:02,030 --> 00:16:10,400
that jumped out to me was they on every

00:16:08,840 --> 00:16:13,780
project at Google they had just have

00:16:10,400 --> 00:16:16,220
three commands they have a command for

00:16:13,780 --> 00:16:18,050
running the tests commanded for doing

00:16:16,220 --> 00:16:20,300
build and a command for running the app

00:16:18,050 --> 00:16:21,710
and it's the same command it doesn't

00:16:20,300 --> 00:16:24,470
matter what programming language you're

00:16:21,710 --> 00:16:25,820
using it doesn't matter who set it up

00:16:24,470 --> 00:16:28,220
what product you're working and whatever

00:16:25,820 --> 00:16:31,160
it doesn't matter it's the same command

00:16:28,220 --> 00:16:33,530
and they do that so that it's easy to be

00:16:31,160 --> 00:16:35,960
able to switch between projects but it

00:16:33,530 --> 00:16:40,220
also made me think a bit about the way

00:16:35,960 --> 00:16:42,530
that we set up our our projects and I

00:16:40,220 --> 00:16:44,480
was finding that often developers were

00:16:42,530 --> 00:16:46,490
getting into a situation where they said

00:16:44,480 --> 00:16:49,550
oh I've done my bit I run the tests I

00:16:46,490 --> 00:16:51,590
did I did everything on my machine and

00:16:49,550 --> 00:16:55,160
then I deployed it and some tests failed

00:16:51,590 --> 00:16:56,480
and generally it was because they were

00:16:55,160 --> 00:16:58,190
they were running the tests but they

00:16:56,480 --> 00:16:59,870
were running them slightly in the wrong

00:16:58,190 --> 00:17:01,940
way or they work they did weren't

00:16:59,870 --> 00:17:03,860
running as many things as were actually

00:17:01,940 --> 00:17:06,320
going to happen on the continuous

00:17:03,860 --> 00:17:09,290
develop delivery continuous integration

00:17:06,320 --> 00:17:11,750
pipeline and so we just decided to just

00:17:09,290 --> 00:17:15,410
standardize and just went through all of

00:17:11,750 --> 00:17:17,209
our products all of our every single

00:17:15,410 --> 00:17:19,970
repository and make sure that it has a

00:17:17,209 --> 00:17:21,740
command that is test CI that regardless

00:17:19,970 --> 00:17:23,480
of where you are we'll just do the same

00:17:21,740 --> 00:17:25,280
thing as what's going to happen on the

00:17:23,480 --> 00:17:26,510
continuous integration environment so

00:17:25,280 --> 00:17:28,730
it'll make sure that the right feature

00:17:26,510 --> 00:17:30,590
toggles are on it'll do things with the

00:17:28,730 --> 00:17:31,910
concurrency or make sure coverages

00:17:30,590 --> 00:17:33,470
whatever you don't need to think about

00:17:31,910 --> 00:17:35,270
you just run this thing if that thing

00:17:33,470 --> 00:17:37,280
passes you're okay you've done your job

00:17:35,270 --> 00:17:37,790
there's no relying on an environment

00:17:37,280 --> 00:17:40,040
variable

00:17:37,790 --> 00:17:43,190
or anything like that that that made a

00:17:40,040 --> 00:17:44,930
big difference but we were still fight

00:17:43,190 --> 00:17:47,180
that meant that we were getting fewer

00:17:44,930 --> 00:17:49,040
fails that were actually legitimate

00:17:47,180 --> 00:17:51,710
fails that haven't been caught earlier

00:17:49,040 --> 00:17:53,540
on but we were still getting a lot of a

00:17:51,710 --> 00:17:55,550
lot of these failures that were more to

00:17:53,540 --> 00:17:58,010
do with flakiness of the build of the

00:17:55,550 --> 00:18:00,710
test so or whatever and so we went back

00:17:58,010 --> 00:18:04,640
to trying to focus to being in that sort

00:18:00,710 --> 00:18:06,200
of blue square on the staircase and we

00:18:04,640 --> 00:18:08,210
did we did a number of things like we

00:18:06,200 --> 00:18:11,840
pulled out parts of the application and

00:18:08,210 --> 00:18:15,170
ran just those in selenium but ignoring

00:18:11,840 --> 00:18:17,510
any HTTP calls and we also did things

00:18:15,170 --> 00:18:20,840
this is another really specific example

00:18:17,510 --> 00:18:22,810
but we have we have in one of the apps

00:18:20,840 --> 00:18:24,950
that we look after we have a sort of

00:18:22,810 --> 00:18:26,390
toolbar that becomes sticky when you

00:18:24,950 --> 00:18:29,630
scroll down you've probably all got it

00:18:26,390 --> 00:18:31,550
but just that very specific feature

00:18:29,630 --> 00:18:33,620
lovely though it was for the journalists

00:18:31,550 --> 00:18:35,420
who were using it was really really

00:18:33,620 --> 00:18:37,580
causing havoc with our end-to-end tests

00:18:35,420 --> 00:18:39,830
and so we did we did this I'm going to

00:18:37,580 --> 00:18:41,390
show you I'm not proud of it there are a

00:18:39,830 --> 00:18:43,910
lot of problems with this we've got a

00:18:41,390 --> 00:18:46,010
we're doing important we've got code in

00:18:43,910 --> 00:18:47,600
strings we've got all sorts of things

00:18:46,010 --> 00:18:50,540
wrong with this it's not an example of

00:18:47,600 --> 00:18:52,670
clean code but what is is an example of

00:18:50,540 --> 00:18:55,190
being pragmatic with our pipeline and

00:18:52,670 --> 00:18:57,760
just cutting off the corner of some of

00:18:55,190 --> 00:19:00,350
the complexity so that we can focus on

00:18:57,760 --> 00:19:03,110
getting as much confidence as we can

00:19:00,350 --> 00:19:07,400
without having to create a load of noise

00:19:03,110 --> 00:19:08,810
in our pipelines of false failures yeah

00:19:07,400 --> 00:19:10,970
so you can see we're just taking a bit

00:19:08,810 --> 00:19:12,800
of CSS and injecting in and telling

00:19:10,970 --> 00:19:14,840
selenium to do that that went really

00:19:12,800 --> 00:19:16,490
well and we felt oh this is fantastic

00:19:14,840 --> 00:19:18,410
all we need to do is just read some

00:19:16,490 --> 00:19:19,760
reports by Google or read the book and

00:19:18,410 --> 00:19:21,950
then do what they say and everything's

00:19:19,760 --> 00:19:26,780
fine and we'll just do that so the next

00:19:21,950 --> 00:19:28,550
thing we tried was to make sure that it

00:19:26,780 --> 00:19:31,850
just can follow completely by the book

00:19:28,550 --> 00:19:35,270
if there's a broken build that commit

00:19:31,850 --> 00:19:38,630
was bad we we need to revert that commit

00:19:35,270 --> 00:19:40,840
roll back the deploy and just

00:19:38,630 --> 00:19:43,460
everything's clean for the next person

00:19:40,840 --> 00:19:45,650
that's what you should do

00:19:43,460 --> 00:19:47,390
also it's great you know it's going to

00:19:45,650 --> 00:19:49,190
align incentives it will mean that

00:19:47,390 --> 00:19:51,230
developers really won't want to break

00:19:49,190 --> 00:19:52,110
the build because there it'll waste a

00:19:51,230 --> 00:19:54,780
load of their time

00:19:52,110 --> 00:19:56,190
they do do that the problem is it wastes

00:19:54,780 --> 00:19:58,860
that load of their time if they do do

00:19:56,190 --> 00:20:02,940
that and so I'm not going to say carnage

00:19:58,860 --> 00:20:05,130
but we we tried it and within a week

00:20:02,940 --> 00:20:07,049
we'd have gone back to allowing

00:20:05,130 --> 00:20:09,390
developers to manage it responsibilities

00:20:07,049 --> 00:20:10,890
responsibly themselves and giving them

00:20:09,390 --> 00:20:14,040
some tools to do that so that they can

00:20:10,890 --> 00:20:15,900
they can easily revert it or enroll it

00:20:14,040 --> 00:20:17,370
back but not making that decision

00:20:15,900 --> 00:20:19,320
automatically because we just found we

00:20:17,370 --> 00:20:20,820
couldn't keep track of what was being

00:20:19,320 --> 00:20:23,280
deployed to an environment at a given

00:20:20,820 --> 00:20:25,080
time and it was if you go back to the

00:20:23,280 --> 00:20:26,880
point of the continuous integration of

00:20:25,080 --> 00:20:29,700
being to automate things and save as'

00:20:26,880 --> 00:20:31,559
time it was just generating tasks that

00:20:29,700 --> 00:20:35,429
were wasting our time so we rolled that

00:20:31,559 --> 00:20:39,450
back that's not to say that we've given

00:20:35,429 --> 00:20:41,490
up on trying to follow the book we are

00:20:39,450 --> 00:20:43,169
still doing some things trying to do

00:20:41,490 --> 00:20:45,059
some things like that the one that's

00:20:43,169 --> 00:20:49,040
circulating the team at the moment is

00:20:45,059 --> 00:20:51,330
this book the DevOps handbook and I

00:20:49,040 --> 00:20:53,340
don't before I read this and my

00:20:51,330 --> 00:20:56,010
definition of DevOps would have been

00:20:53,340 --> 00:20:57,750
well they used to be called sysadmin and

00:20:56,010 --> 00:21:00,049
now they do some code so rou they've

00:20:57,750 --> 00:21:02,880
just changed the name to DevOps and

00:21:00,049 --> 00:21:04,260
maybe that is someone's that some

00:21:02,880 --> 00:21:05,820
definition but that's certainly not the

00:21:04,260 --> 00:21:08,820
definition that they're using in this

00:21:05,820 --> 00:21:11,520
book in the book they're you using it

00:21:08,820 --> 00:21:12,870
more to describe taking the sort of

00:21:11,520 --> 00:21:15,390
techniques that you use for managing

00:21:12,870 --> 00:21:18,720
your app and applying that more

00:21:15,390 --> 00:21:20,820
generally to other contexts so - for

00:21:18,720 --> 00:21:22,410
example your delivery pipeline and one

00:21:20,820 --> 00:21:25,710
of the big things that they go on about

00:21:22,410 --> 00:21:27,750
a lot is you wouldn't deploy an app

00:21:25,710 --> 00:21:30,360
without having some metrics about how

00:21:27,750 --> 00:21:32,880
it's performing as performance so you

00:21:30,360 --> 00:21:34,860
really shouldn't have a pipeline that it

00:21:32,880 --> 00:21:36,990
isn't gathering some metrics about how

00:21:34,860 --> 00:21:38,490
it's performing because otherwise you

00:21:36,990 --> 00:21:41,220
don't you don't even know how well

00:21:38,490 --> 00:21:45,620
you're doing so this is an example of

00:21:41,220 --> 00:21:49,620
one of the things that we did this is a

00:21:45,620 --> 00:21:51,330
cucumber hook that's just making sure

00:21:49,620 --> 00:21:53,490
that afterwards we get the test result

00:21:51,330 --> 00:21:56,850
and the scenario result and just send

00:21:53,490 --> 00:21:58,440
that off to stats D and I wasn't showing

00:21:56,850 --> 00:22:01,440
this not because it's particularly

00:21:58,440 --> 00:22:03,030
cucumber specific actually loads of all

00:22:01,440 --> 00:22:04,320
of the test frameworks whether it's jest

00:22:03,030 --> 00:22:05,940
or a vote

00:22:04,320 --> 00:22:08,039
or whatever you're looking at they all

00:22:05,940 --> 00:22:10,649
have an API like this for you to be able

00:22:08,039 --> 00:22:13,110
to hook into the test results and send

00:22:10,649 --> 00:22:15,690
it off gathering this sort of metrics

00:22:13,110 --> 00:22:18,240
and it's really really useful and we now

00:22:15,690 --> 00:22:21,720
do this just all over and also within

00:22:18,240 --> 00:22:23,340
our Jenkins pipelines just stats they on

00:22:21,720 --> 00:22:25,259
everything you just throw it in there

00:22:23,340 --> 00:22:27,360
and don't you don't need to think about

00:22:25,259 --> 00:22:29,940
it until you need to look at the graphs

00:22:27,360 --> 00:22:32,820
I think this is the last thing I'm going

00:22:29,940 --> 00:22:34,169
to show you that the the other the other

00:22:32,820 --> 00:22:38,429
thing that they go on about in the

00:22:34,169 --> 00:22:39,990
DevOps handbook is about just doing as

00:22:38,429 --> 00:22:42,269
much automation as you can of the

00:22:39,990 --> 00:22:43,679
pipeline as well and so that the message

00:22:42,269 --> 00:22:46,950
that I showed you at the start of in our

00:22:43,679 --> 00:22:50,159
CI builds channel is now evolved to look

00:22:46,950 --> 00:22:52,139
a bit more like this so we send if a

00:22:50,159 --> 00:22:55,139
build does fail we send a direct message

00:22:52,139 --> 00:22:56,730
to the person who triggered the build my

00:22:55,139 --> 00:22:58,649
favorite thing about this is it sums up

00:22:56,730 --> 00:23:00,779
quite a few different things in one

00:22:58,649 --> 00:23:02,120
little message that it tell it is

00:23:00,779 --> 00:23:04,710
telling you what's happening but also

00:23:02,120 --> 00:23:07,139
that second line once you've

00:23:04,710 --> 00:23:09,179
investigated the issue so it's making

00:23:07,139 --> 00:23:10,919
very clear what the expectation is is

00:23:09,179 --> 00:23:12,870
you sent you a direct message you've got

00:23:10,919 --> 00:23:14,129
a task go and do something which for

00:23:12,870 --> 00:23:17,399
junior developers who might not

00:23:14,129 --> 00:23:19,230
necessarily have such a like they do

00:23:17,399 --> 00:23:21,149
it's not an it it's not sort of

00:23:19,230 --> 00:23:23,580
engrained into them that it's now their

00:23:21,149 --> 00:23:26,490
top priority it's very clear that they

00:23:23,580 --> 00:23:30,830
just need to follow that and then the

00:23:26,490 --> 00:23:33,240
third thing is just asking them to

00:23:30,830 --> 00:23:35,399
provide a little bit of feedback so once

00:23:33,240 --> 00:23:36,840
they've investigated and click on one of

00:23:35,399 --> 00:23:39,629
these buttons and again it goes off to

00:23:36,840 --> 00:23:42,389
stats D to record exactly what it is so

00:23:39,629 --> 00:23:44,820
we can find out is it that there's a

00:23:42,389 --> 00:23:46,919
regression or is it a test failure and

00:23:44,820 --> 00:23:48,929
if it's one of our one of our existing

00:23:46,919 --> 00:23:51,210
known issues which one so we know

00:23:48,929 --> 00:23:52,950
exactly when they're happening and how

00:23:51,210 --> 00:23:54,960
frequently they're happening so we can

00:23:52,950 --> 00:23:57,450
know which which of the broken windows

00:23:54,960 --> 00:24:00,210
that we need to prioritize fixing it so

00:23:57,450 --> 00:24:02,190
automating that has been a huge help in

00:24:00,210 --> 00:24:04,169
making sure that we everyone get

00:24:02,190 --> 00:24:06,450
everyone does that and we always know

00:24:04,169 --> 00:24:07,980
what was that with the recourse so now

00:24:06,450 --> 00:24:08,610
yeah now everything's good we've fixed

00:24:07,980 --> 00:24:11,399
everything

00:24:08,610 --> 00:24:14,490
yeah and it's always green except for

00:24:11,399 --> 00:24:17,740
obviously it's not obviously we've with

00:24:14,490 --> 00:24:21,309
still fighting that battle

00:24:17,740 --> 00:24:23,230
but I think now at least we we've got we

00:24:21,309 --> 00:24:25,510
know a little bit more about what it

00:24:23,230 --> 00:24:26,950
what our problems are and we're able to

00:24:25,510 --> 00:24:29,230
measure a little bit so that hopefully

00:24:26,950 --> 00:24:30,850
when we do end up in that retro where

00:24:29,230 --> 00:24:32,290
suddenly everyone says I can't do

00:24:30,850 --> 00:24:35,170
anything because the pipeline's blocked

00:24:32,290 --> 00:24:36,700
all the time we can see it coming and we

00:24:35,170 --> 00:24:39,340
know what to do about it when it does

00:24:36,700 --> 00:24:42,100
happen and I'll just go to pull out

00:24:39,340 --> 00:24:44,380
three themes that I think have sort of

00:24:42,100 --> 00:24:46,809
gone through all of this and the first

00:24:44,380 --> 00:24:49,870
one is just focusing on the dev

00:24:46,809 --> 00:24:51,910
developers as users particularly if

00:24:49,870 --> 00:24:54,580
you're a more senior developer there is

00:24:51,910 --> 00:24:56,710
nothing you can do that will make you

00:24:54,580 --> 00:24:59,110
that will endear you to the team more

00:24:56,710 --> 00:25:01,780
than just doing something that will help

00:24:59,110 --> 00:25:03,400
them in their day job and just improve a

00:25:01,780 --> 00:25:04,780
command a little bit just do something

00:25:03,400 --> 00:25:07,210
that just makes something a little bit

00:25:04,780 --> 00:25:10,390
quicker they love it and often it will

00:25:07,210 --> 00:25:14,500
help you on on whatever you're trying to

00:25:10,390 --> 00:25:16,809
do is up and then obviously we always

00:25:14,500 --> 00:25:19,840
just push everything as much as you can

00:25:16,809 --> 00:25:21,400
further down the pipeline so when you're

00:25:19,840 --> 00:25:23,740
cutting off those little bits of

00:25:21,400 --> 00:25:25,420
complexity on that staircase often it

00:25:23,740 --> 00:25:27,240
means that you can run things earlier on

00:25:25,420 --> 00:25:30,700
as well and that's a massive help in

00:25:27,240 --> 00:25:32,590
keeping the pipeline green and the third

00:25:30,700 --> 00:25:35,320
one is yeah just absolutely measure

00:25:32,590 --> 00:25:37,300
everything stats T is amazing just throw

00:25:35,320 --> 00:25:39,100
data in there just get everything

00:25:37,300 --> 00:25:40,929
whatever you can because it will be

00:25:39,100 --> 00:25:43,240
useful and you don't know why but it

00:25:40,929 --> 00:25:46,540
will be when it comes up you'll know

00:25:43,240 --> 00:25:48,730
then yeah and I think the last thing to

00:25:46,540 --> 00:25:50,920
leave you with is just to say we're

00:25:48,730 --> 00:25:52,780
hiring and I'm going to talk for a while

00:25:50,920 --> 00:25:54,400
so that those links are on the screen

00:25:52,780 --> 00:25:57,790
and for enough time for people to be

00:25:54,400 --> 00:25:59,770
able to read them and I was talking to

00:25:57,790 --> 00:26:02,110
Richard just before I did this that he

00:25:59,770 --> 00:26:05,050
sort of check is it ok to just put the

00:26:02,110 --> 00:26:07,150
slides up saying this and he said yeah

00:26:05,050 --> 00:26:09,730
yeah yeah but only if you explain

00:26:07,150 --> 00:26:12,250
exactly what the team does so well we

00:26:09,730 --> 00:26:15,250
where content production workflows team

00:26:12,250 --> 00:26:17,679
and we do a load of work for journalists

00:26:15,250 --> 00:26:21,370
we provide them it's the platform for

00:26:17,679 --> 00:26:24,070
any sort of content crater in the BBC to

00:26:21,370 --> 00:26:26,919
get content onto the BBC News website

00:26:24,070 --> 00:26:29,830
BBC News app it used to be also for

00:26:26,919 --> 00:26:31,490
telly text read button basically you

00:26:29,830 --> 00:26:34,150
name it it all goes through this place

00:26:31,490 --> 00:26:36,530
form and we're currently working on

00:26:34,150 --> 00:26:39,650
developing a new article editor for the

00:26:36,530 --> 00:26:42,290
news website but also doing load more

00:26:39,650 --> 00:26:45,620
load of work with adding more metadata

00:26:42,290 --> 00:26:48,200
onto content so that we can target

00:26:45,620 --> 00:26:49,790
people or much more based on what the

00:26:48,200 --> 00:26:51,710
sorts of things are interested in rather

00:26:49,790 --> 00:26:53,330
than just saying you listen to this song

00:26:51,710 --> 00:26:55,809
you probably like another song like that

00:26:53,330 --> 00:27:10,070
more sort of moods and things like that

00:26:55,809 --> 00:27:13,429
and I think well well do you mean from a

00:27:10,070 --> 00:27:15,380
test perspective one would be the some

00:27:13,429 --> 00:27:18,530
test we don't spin up a new environment

00:27:15,380 --> 00:27:21,800
on the on a branch so we often will have

00:27:18,530 --> 00:27:23,450
really big apps that come with lots of

00:27:21,800 --> 00:27:26,270
different systems in the BBC so we can

00:27:23,450 --> 00:27:28,870
only do full end-to-end tests when it's

00:27:26,270 --> 00:27:28,870
actually deployed

00:27:28,950 --> 00:27:32,299

YouTube URL: https://www.youtube.com/watch?v=CL5FKMOGmBo


