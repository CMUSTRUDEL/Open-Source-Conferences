Title: Building a Serverless API with GraphQL API and Microservicest - JS Monthly - October 2019
Publication date: 2019-11-17
Playlist: JS Monthly London
Description: 
	Building a Serverless API with GraphQL API and Microservicest // Christoffer Noring (Microsoft)

This talk introduces technologies such as Serverless, GraphQL and Docker

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:06,899
and deploy said API to the cloud in

00:00:02,669 --> 00:00:09,210
roughly two minutes right so why

00:00:06,899 --> 00:00:11,280
graphical I know probably half the room

00:00:09,210 --> 00:00:14,250
says already it's awesome

00:00:11,280 --> 00:00:15,809
I already know what the arguments but

00:00:14,250 --> 00:00:17,789
for argument's sake let's kind of

00:00:15,809 --> 00:00:21,230
mention why it's awesome

00:00:17,789 --> 00:00:23,630
how many of you are using REST API s--

00:00:21,230 --> 00:00:27,060
soap

00:00:23,630 --> 00:00:29,449
any brave hands no you know I'm talking

00:00:27,060 --> 00:00:31,769
about right XML not the actual soap I

00:00:29,449 --> 00:00:33,450
kind of did that joke the other day at

00:00:31,769 --> 00:00:36,649
work saying that some people probably

00:00:33,450 --> 00:00:38,910
don't know anything but Jason anywho

00:00:36,649 --> 00:00:40,890
graph killer this about Condon

00:00:38,910 --> 00:00:42,809
negotiation it's about telling the API

00:00:40,890 --> 00:00:46,230
exactly what you want it's a bit like an

00:00:42,809 --> 00:00:47,760
API version of sequel they you know some

00:00:46,230 --> 00:00:50,219
kind of language were able to specify

00:00:47,760 --> 00:00:52,739
exactly these columns is what we want

00:00:50,219 --> 00:00:54,780
and that means that we are preventing

00:00:52,739 --> 00:00:56,969
something called over fetching we don't

00:00:54,780 --> 00:00:59,309
get a lot of columns a lot of extra data

00:00:56,969 --> 00:01:02,660
that we never asked for that's obviously

00:00:59,309 --> 00:01:07,770
also on a very bad network connection

00:01:02,660 --> 00:01:09,689
yeah so the whole point of graphical is

00:01:07,770 --> 00:01:12,240
to stay on top of things

00:01:09,689 --> 00:01:14,520
you might live in a data landscape where

00:01:12,240 --> 00:01:16,259
you have tons of different services all

00:01:14,520 --> 00:01:18,390
of those different services of course

00:01:16,259 --> 00:01:20,430
talk a different kind of protocol or

00:01:18,390 --> 00:01:22,830
there is a different way to access those

00:01:20,430 --> 00:01:24,509
services and of course your data might

00:01:22,830 --> 00:01:26,250
be spread out all over the place so

00:01:24,509 --> 00:01:28,049
you're challenged if you don't have

00:01:26,250 --> 00:01:30,000
graphical is actually to remember all of

00:01:28,049 --> 00:01:33,509
those protocols and remember exactly

00:01:30,000 --> 00:01:36,540
where is that data that I need now

00:01:33,509 --> 00:01:39,600
so graphical would become the front end

00:01:36,540 --> 00:01:41,759
of the back end if kind of that makes

00:01:39,600 --> 00:01:43,619
sense you can't use it for everything

00:01:41,759 --> 00:01:45,570
it's very tempting this is new

00:01:43,619 --> 00:01:47,250
technology we want to do that everything

00:01:45,570 --> 00:01:48,770
is you know the best thing since sliced

00:01:47,250 --> 00:01:51,899
bread I'm alright

00:01:48,770 --> 00:01:53,369
yeah so we put graphical on top so we

00:01:51,899 --> 00:01:56,780
don't have to worry about everything

00:01:53,369 --> 00:01:58,950
that's behind it so you can as a

00:01:56,780 --> 00:02:01,229
developer just say I want to talk to my

00:01:58,950 --> 00:02:03,090
graphical layer I want to bits and

00:02:01,229 --> 00:02:05,640
pieces of information I don't care where

00:02:03,090 --> 00:02:08,340
we have it I want to speak in jql the

00:02:05,640 --> 00:02:10,170
graphical query language and that's

00:02:08,340 --> 00:02:11,879
gonna save you a ton of time obviously

00:02:10,170 --> 00:02:13,170
the first time you build your graphical

00:02:11,879 --> 00:02:15,000
API you know kind of some

00:02:13,170 --> 00:02:16,350
you know save that much of time because

00:02:15,000 --> 00:02:19,260
you're gonna spend some time building

00:02:16,350 --> 00:02:21,060
the API but in the future all of the

00:02:19,260 --> 00:02:23,910
other apps is gonna save you a ton of

00:02:21,060 --> 00:02:26,100
time and you're gonna have happy users

00:02:23,910 --> 00:02:27,630
even those on a really bad network

00:02:26,100 --> 00:02:30,180
connection because you're not over

00:02:27,630 --> 00:02:35,790
fetching you're just fetching exactly

00:02:30,180 --> 00:02:37,650
what you need right we're also going to

00:02:35,790 --> 00:02:41,190
talk a little bit about service this is

00:02:37,650 --> 00:02:43,709
just an intro slide so a few hands but I

00:02:41,190 --> 00:02:46,860
wanted to say this about service service

00:02:43,709 --> 00:02:49,830
is cloud native code that runs for a

00:02:46,860 --> 00:02:52,110
reason something has occurred and that

00:02:49,830 --> 00:02:54,600
something triggers your code to run

00:02:52,110 --> 00:02:57,030
which is could be someone touching an

00:02:54,600 --> 00:02:59,519
endpoint or there's a new row in a

00:02:57,030 --> 00:03:02,150
database some kind of important event

00:02:59,519 --> 00:03:04,560
has happened and you should do something

00:03:02,150 --> 00:03:07,320
exactly what that's obviously up to you

00:03:04,560 --> 00:03:08,550
and your company it is managed which

00:03:07,320 --> 00:03:11,010
means you don't need to care about

00:03:08,550 --> 00:03:13,530
virtual machines you don't need to care

00:03:11,010 --> 00:03:17,910
about app servers and all that you know

00:03:13,530 --> 00:03:19,950
jazz we only are allowed to focus on

00:03:17,910 --> 00:03:22,829
business logic which is what we want at

00:03:19,950 --> 00:03:25,980
the end of the day and as I said before

00:03:22,829 --> 00:03:28,890
it runs in the cloud kind of nice

00:03:25,980 --> 00:03:32,090
definition right lots of promises of

00:03:28,890 --> 00:03:34,739
saying oh this is the next great thing

00:03:32,090 --> 00:03:37,140
so yeah again why serverless

00:03:34,739 --> 00:03:40,470
low cost how many here are using

00:03:37,140 --> 00:03:42,750
servlets because of low cost okay a few

00:03:40,470 --> 00:03:44,790
hands we should know that regardless of

00:03:42,750 --> 00:03:47,280
cloud provider we're using most of them

00:03:44,790 --> 00:03:48,989
they're gonna offer you a very good deal

00:03:47,280 --> 00:03:52,019
on service which means that they're

00:03:48,989 --> 00:03:54,180
gonna charge you by invocations in the

00:03:52,019 --> 00:03:56,400
millions which means that if you're a

00:03:54,180 --> 00:03:58,500
startup if you want to prototype you

00:03:56,400 --> 00:04:02,340
could probably do a million plus

00:03:58,500 --> 00:04:04,200
executions with no cost it runs to code

00:04:02,340 --> 00:04:05,910
when it's needed it's not up all the

00:04:04,200 --> 00:04:09,239
time which also makes it really really

00:04:05,910 --> 00:04:10,829
cheap on the cloud it's easy to talk to

00:04:09,239 --> 00:04:12,810
because it's already in the cloud and

00:04:10,829 --> 00:04:14,190
all of those great cloud vendors are

00:04:12,810 --> 00:04:16,590
probably going to make it super easy for

00:04:14,190 --> 00:04:18,239
you to talk to queues databases whatever

00:04:16,590 --> 00:04:22,260
else services you might have in the

00:04:18,239 --> 00:04:24,750
cloud and the focus is on code as I said

00:04:22,260 --> 00:04:25,540
no more virtual machines no more web

00:04:24,750 --> 00:04:29,560
service that

00:04:25,540 --> 00:04:31,360
need to configure that's managed now

00:04:29,560 --> 00:04:33,640
graph killed for those of you who

00:04:31,360 --> 00:04:39,010
haven't seen it what we're looking at

00:04:33,640 --> 00:04:42,310
here it's first off our query we use

00:04:39,010 --> 00:04:43,750
curly braces so how many of you sequel

00:04:42,310 --> 00:04:46,450
to do any kind of querying towards the

00:04:43,750 --> 00:04:48,490
database it's quite easy to understand

00:04:46,450 --> 00:04:50,230
graphical from that aspect now if you

00:04:48,490 --> 00:04:53,260
haven't used or talked straight to

00:04:50,230 --> 00:04:55,180
databases remember this curly braces is

00:04:53,260 --> 00:04:56,770
the thing the first thing you mentioned

00:04:55,180 --> 00:04:59,620
inside of that curly brace is the

00:04:56,770 --> 00:05:01,480
resource you want once you specified

00:04:59,620 --> 00:05:03,670
what resource you want you have to

00:05:01,480 --> 00:05:05,020
specify what columns you want unless of

00:05:03,670 --> 00:05:07,330
course in this case it's a primitive

00:05:05,020 --> 00:05:09,970
because that means that we don't have

00:05:07,330 --> 00:05:13,630
any columns under that thing so in this

00:05:09,970 --> 00:05:15,670
case we see type query on the left on

00:05:13,630 --> 00:05:17,560
the top left and we can see that it's of

00:05:15,670 --> 00:05:19,260
type string there should be a capital S

00:05:17,560 --> 00:05:20,880
by the way if someone knows graphical

00:05:19,260 --> 00:05:24,940
like me

00:05:20,880 --> 00:05:28,180
sorry kidding anywho here you got the

00:05:24,940 --> 00:05:30,670
query keyword that we use when we write

00:05:28,180 --> 00:05:32,260
our resolver object so the this kind of

00:05:30,670 --> 00:05:34,180
looks different depending on what kind

00:05:32,260 --> 00:05:36,790
of implementation you're doing whether

00:05:34,180 --> 00:05:40,990
it's expressed graphical or Apolo

00:05:36,790 --> 00:05:43,180
foreign this query is your public API in

00:05:40,990 --> 00:05:45,430
here you're putting everything that

00:05:43,180 --> 00:05:47,530
should be exposed all that you could be

00:05:45,430 --> 00:05:49,810
able to query for there is another

00:05:47,530 --> 00:05:52,090
resort T word that makes out the second

00:05:49,810 --> 00:05:53,650
half of your public API that one is

00:05:52,090 --> 00:05:57,850
called mutation we're going to come to

00:05:53,650 --> 00:05:59,860
that one now looking at the answer here

00:05:57,850 --> 00:06:02,500
to the bottom right we can see that when

00:05:59,860 --> 00:06:04,750
we ask for hello it goes down here and

00:06:02,500 --> 00:06:07,240
says how do I resolve hello

00:06:04,750 --> 00:06:10,060
okay it's a function I'm going to invoke

00:06:07,240 --> 00:06:16,630
once I do so I get some kind of hello

00:06:10,060 --> 00:06:18,640
world back it's very easy right so what

00:06:16,630 --> 00:06:20,470
about custom types of course we don't

00:06:18,640 --> 00:06:23,020
want a very simple API like hello world

00:06:20,470 --> 00:06:24,370
we want something real and this is what

00:06:23,020 --> 00:06:25,750
I want you to think about databases

00:06:24,370 --> 00:06:28,390
again because this is a very good

00:06:25,750 --> 00:06:32,140
analogy you're able to compare like a

00:06:28,390 --> 00:06:35,560
table in a database two types in a

00:06:32,140 --> 00:06:37,610
graphical world so here you got a type

00:06:35,560 --> 00:06:40,340
person you've got an ID with an

00:06:37,610 --> 00:06:42,169
name and address and speaker as you can

00:06:40,340 --> 00:06:44,180
see this is more of a complex type it's

00:06:42,169 --> 00:06:46,219
not a hello world it's not a hello you

00:06:44,180 --> 00:06:50,240
know of type string but the order of

00:06:46,219 --> 00:06:52,639
type person then we are using this very

00:06:50,240 --> 00:06:54,949
type in this second exposure Bowl

00:06:52,639 --> 00:06:57,949
property that we have person so suddenly

00:06:54,949 --> 00:07:03,289
we can query for person as well as hello

00:06:57,949 --> 00:07:05,539
I was kind of wondering if it was a

00:07:03,289 --> 00:07:06,620
train but it's actually the mic okay in

00:07:05,539 --> 00:07:11,270
case you're wondering we're not being

00:07:06,620 --> 00:07:13,219
run over all right so that's about that

00:07:11,270 --> 00:07:14,599
let's talk about list types because of

00:07:13,219 --> 00:07:17,150
course we need to support some kind of

00:07:14,599 --> 00:07:19,819
list type these types are a simple

00:07:17,150 --> 00:07:21,590
square bracket we just say that okay we

00:07:19,819 --> 00:07:24,439
want a new kind of property here called

00:07:21,590 --> 00:07:27,800
people it's an array of type person and

00:07:24,439 --> 00:07:29,599
looking at our query here to the right

00:07:27,800 --> 00:07:31,370
we can see that we need to resolve this

00:07:29,599 --> 00:07:33,889
in different ways hello will resolve

00:07:31,370 --> 00:07:35,990
that with a static string in the case

00:07:33,889 --> 00:07:38,120
with person we gave the object back in

00:07:35,990 --> 00:07:41,090
the case with people we of course need

00:07:38,120 --> 00:07:47,259
to give it an array back makes sense so

00:07:41,090 --> 00:07:47,259
far great strong beer I think a new

00:07:47,379 --> 00:07:51,770
let's have a look at query with

00:07:49,789 --> 00:07:53,629
parameter because of course we don't

00:07:51,770 --> 00:07:55,789
want to do select star right we don't

00:07:53,629 --> 00:07:57,259
want to select every single query so we

00:07:55,789 --> 00:08:01,430
need to be able to narrow that down a

00:07:57,259 --> 00:08:04,819
bit we do so with parentheses and we can

00:08:01,430 --> 00:08:07,699
do it's like so we say if we query for

00:08:04,819 --> 00:08:09,680
an ID the exclamation mark by the way it

00:08:07,699 --> 00:08:13,250
means that it's mandatory if someone

00:08:09,680 --> 00:08:16,400
wonders what that is and that yeah the

00:08:13,250 --> 00:08:18,710
aquarian here to the bottom-left kind of

00:08:16,400 --> 00:08:22,969
looks like so so we do get person we

00:08:18,710 --> 00:08:25,159
give it some value in this case one and

00:08:22,969 --> 00:08:27,080
because of the way we define it here on

00:08:25,159 --> 00:08:29,779
the top left we see we say that the

00:08:27,080 --> 00:08:31,639
return type should be a type person so

00:08:29,779 --> 00:08:33,890
every time we get something complex back

00:08:31,639 --> 00:08:35,539
we actually need to select what from

00:08:33,890 --> 00:08:38,240
that complex resource should we actually

00:08:35,539 --> 00:08:40,490
select out so in this case we have

00:08:38,240 --> 00:08:43,430
selected name but we could easily extend

00:08:40,490 --> 00:08:44,990
that and say we want name address and a

00:08:43,430 --> 00:08:47,270
lot of other properties that's on that

00:08:44,990 --> 00:08:48,709
resource the point is if we say there

00:08:47,270 --> 00:08:51,040
should be a resource back this would not

00:08:48,709 --> 00:08:56,380
be a valid query unless we tell it

00:08:51,040 --> 00:08:58,150
what columns that we asked for right and

00:08:56,380 --> 00:09:00,810
here we can see in our resolver how we

00:08:58,150 --> 00:09:03,730
were able to dig out the ID from it and

00:09:00,810 --> 00:09:06,520
we do people find which essentially just

00:09:03,730 --> 00:09:09,130
narrows out the exact person that we

00:09:06,520 --> 00:09:10,780
want from that list this is all very

00:09:09,130 --> 00:09:15,760
static data but I'll show you how to

00:09:10,780 --> 00:09:16,950
make that more dynamic query with well a

00:09:15,760 --> 00:09:20,440
micelle here

00:09:16,950 --> 00:09:22,630
sorry mutation this is the other half of

00:09:20,440 --> 00:09:24,880
the public API I said query was the

00:09:22,630 --> 00:09:27,880
first half query meant that we're only

00:09:24,880 --> 00:09:30,610
getting data right whereas the mutation

00:09:27,880 --> 00:09:33,460
means something else it means changing

00:09:30,610 --> 00:09:36,160
data which could be creation updates

00:09:33,460 --> 00:09:39,730
deletions and so on so here in the

00:09:36,160 --> 00:09:42,010
mutation on the top left we sorry top

00:09:39,730 --> 00:09:44,650
left we say type mutation and this is

00:09:42,010 --> 00:09:45,610
the way that we actually talk to it and

00:09:44,650 --> 00:09:47,830
sorry

00:09:45,610 --> 00:09:50,260
we're tired should have gotten more

00:09:47,830 --> 00:09:52,240
beers type mutation this is part of the

00:09:50,260 --> 00:09:55,150
schema what we're saying here is that

00:09:52,240 --> 00:09:57,370
what public properties exist so top left

00:09:55,150 --> 00:10:00,700
is the schema we say that add item

00:09:57,370 --> 00:10:02,310
exists we say that add product exists so

00:10:00,700 --> 00:10:07,780
what is the difference between these two

00:10:02,310 --> 00:10:10,810
can anyone see it all right I'll tell

00:10:07,780 --> 00:10:14,170
you add item takes a primitive in an

00:10:10,810 --> 00:10:16,120
item of type string for complex types

00:10:14,170 --> 00:10:18,490
such as the product we need to use

00:10:16,120 --> 00:10:19,750
something of type input so this is an

00:10:18,490 --> 00:10:22,120
important thing we need to know about in

00:10:19,750 --> 00:10:24,070
graphical that sir as soon as it becomes

00:10:22,120 --> 00:10:27,840
complex we need to change from this

00:10:24,070 --> 00:10:30,010
primitive to something of type input

00:10:27,840 --> 00:10:31,840
you're going to be getting all these

00:10:30,010 --> 00:10:36,340
slides you can look at them in your own

00:10:31,840 --> 00:10:40,090
pace yeah as for calling the mutation we

00:10:36,340 --> 00:10:43,210
can choose to opt out of giving it a

00:10:40,090 --> 00:10:46,090
name and just saying mutation some kind

00:10:43,210 --> 00:10:47,620
of name if we want and exactly what

00:10:46,090 --> 00:10:49,540
mutation we're calling in this case

00:10:47,620 --> 00:10:52,180
we're calling at item which means we're

00:10:49,540 --> 00:10:54,370
going to create something the moment is

00:10:52,180 --> 00:10:55,900
no longer optional is when we have two

00:10:54,370 --> 00:10:58,060
different mutations so we don't know

00:10:55,900 --> 00:10:59,890
which one to pick at that point we need

00:10:58,060 --> 00:11:04,060
to specify them by name so as long as

00:10:59,890 --> 00:11:10,760
you have one name is optional

00:11:04,060 --> 00:11:13,730
right so as for resolvers well we just

00:11:10,760 --> 00:11:15,950
add the part here at the bottom where we

00:11:13,730 --> 00:11:18,440
say mutation with the mutation keyword

00:11:15,950 --> 00:11:20,060
we say add person as you can see we're

00:11:18,440 --> 00:11:22,610
able to dig out whatever someone is

00:11:20,060 --> 00:11:25,190
posting towards us and we're able to say

00:11:22,610 --> 00:11:30,050
well we need to wait to store that to

00:11:25,190 --> 00:11:31,670
some kind of data source and there's

00:11:30,050 --> 00:11:33,260
another important bit I want you to know

00:11:31,670 --> 00:11:35,630
about this is for me the thing that

00:11:33,260 --> 00:11:38,240
really sells graft killed to me nested

00:11:35,630 --> 00:11:40,279
queries it means that we have some kind

00:11:38,240 --> 00:11:42,589
of query and we're able to dig it down

00:11:40,279 --> 00:11:45,110
we're not just on level one so level one

00:11:42,589 --> 00:11:46,460
means that we're asking for ID can name

00:11:45,110 --> 00:11:48,470
and for address a lot of other

00:11:46,460 --> 00:11:50,240
properties but now we can suddenly drill

00:11:48,470 --> 00:11:52,580
down so we can go to friend and say

00:11:50,240 --> 00:11:56,089
friend is a complex so we go to friend

00:11:52,580 --> 00:11:58,160
let's say we want your name of course

00:11:56,089 --> 00:11:59,870
you're probably thinking okay that's a

00:11:58,160 --> 00:12:02,089
very advanced secret question probably

00:11:59,870 --> 00:12:04,670
need to do some kind of left join image

00:12:02,089 --> 00:12:06,790
or in something right yeah you need to

00:12:04,670 --> 00:12:10,040
solve that on the query side of things

00:12:06,790 --> 00:12:12,589
I'll show you how to do that I got some

00:12:10,040 --> 00:12:17,750
time otherwise we will be here all night

00:12:12,589 --> 00:12:19,220
right nu let's have a look at what the

00:12:17,750 --> 00:12:21,080
data looks like cuz that's a really

00:12:19,220 --> 00:12:23,360
important realizer for how we resolve

00:12:21,080 --> 00:12:25,550
these nested queries because if we look

00:12:23,360 --> 00:12:27,950
at it we see that we have something

00:12:25,550 --> 00:12:30,020
called person friend it's not friend as

00:12:27,950 --> 00:12:31,940
a property exists on the person object

00:12:30,020 --> 00:12:34,280
and it's a complex it's not a primitive

00:12:31,940 --> 00:12:37,040
it's not a string is not an ID but not

00:12:34,280 --> 00:12:39,589
an object when something is an object we

00:12:37,040 --> 00:12:43,460
should actually store it data wise as a

00:12:39,589 --> 00:12:45,650
primitive like what you said it was a

00:12:43,460 --> 00:12:48,050
complex why should it be primitive well

00:12:45,650 --> 00:12:49,970
this is about lazy loading this is about

00:12:48,050 --> 00:12:53,270
not giving the user more than he

00:12:49,970 --> 00:12:55,400
actually need so they need so by saying

00:12:53,270 --> 00:12:58,040
data wise that this is a primitive if

00:12:55,400 --> 00:13:00,140
they actually ask for this then only

00:12:58,040 --> 00:13:02,839
then can we actually help them and say

00:13:00,140 --> 00:13:04,959
you're - probably corresponds to an

00:13:02,839 --> 00:13:07,670
actual object so we should do a lookup

00:13:04,959 --> 00:13:10,670
which is exactly what we do here at the

00:13:07,670 --> 00:13:13,040
bottom we go in here and friend and say

00:13:10,670 --> 00:13:15,769
people find it based on the ID so we're

00:13:13,040 --> 00:13:17,959
actually doing a lookup here

00:13:15,769 --> 00:13:19,790
this is part of the problems with

00:13:17,959 --> 00:13:21,920
graphical because if you love for this

00:13:19,790 --> 00:13:23,509
nested thing to go on to ten different

00:13:21,920 --> 00:13:26,089
levels you can just imagine the number

00:13:23,509 --> 00:13:28,279
of you know different nested calls that

00:13:26,089 --> 00:13:29,809
we trying to do that's a little heads up

00:13:28,279 --> 00:13:32,179
with graph QL is that should probably

00:13:29,809 --> 00:13:35,089
not allow nesting to keep going forever

00:13:32,179 --> 00:13:37,309
but probably limited to second or third

00:13:35,089 --> 00:13:39,259
level feels like I'm telling you all the

00:13:37,309 --> 00:13:41,629
bad things but you know it's very easy

00:13:39,259 --> 00:13:44,059
to say new technology it's awesome it's

00:13:41,629 --> 00:13:46,759
sliced bread but in reality everything

00:13:44,059 --> 00:13:49,459
has limitations this is one nesting is

00:13:46,759 --> 00:13:55,790
all right don't allow it for you know n

00:13:49,459 --> 00:13:58,009
plus one that's all I'm saying right so

00:13:55,790 --> 00:14:01,040
what about building our graph QL API we

00:13:58,009 --> 00:14:04,269
kind of know the basics maybe you kind

00:14:01,040 --> 00:14:07,610
of are with me in this super speed

00:14:04,269 --> 00:14:10,009
here's a schema in that schema we're

00:14:07,610 --> 00:14:12,230
kind of defining different types I've

00:14:10,009 --> 00:14:13,519
got a workshop actually for this that's

00:14:12,230 --> 00:14:16,220
completely free easy you can definitely

00:14:13,519 --> 00:14:17,839
browse at all the working code there I'm

00:14:16,220 --> 00:14:20,089
just going through this as a you know

00:14:17,839 --> 00:14:22,009
somewhat heightened speed we've got

00:14:20,089 --> 00:14:25,249
different types we got type product type

00:14:22,009 --> 00:14:27,980
review we got a product input and we got

00:14:25,249 --> 00:14:30,110
a mixture of mutations and the query

00:14:27,980 --> 00:14:34,009
which means it's a full-blown API right

00:14:30,110 --> 00:14:35,990
the creb API then what and of course we

00:14:34,009 --> 00:14:38,299
define some resolvers with some static

00:14:35,990 --> 00:14:40,519
data we've got a list of products and a

00:14:38,299 --> 00:14:42,230
list of reviews and if you've got your

00:14:40,519 --> 00:14:46,490
eyes with you you can see that we have

00:14:42,230 --> 00:14:48,139
something sorry of type product this one

00:14:46,490 --> 00:14:51,740
looks like primitive but it will

00:14:48,139 --> 00:14:53,389
actually result in actual object and of

00:14:51,740 --> 00:14:55,249
course we got a bunch of functions that

00:14:53,389 --> 00:14:59,839
has the ability to resolve all of these

00:14:55,249 --> 00:15:04,899
things so what about a demo of getting

00:14:59,839 --> 00:15:08,209
this to work well here we are looking at

00:15:04,899 --> 00:15:11,059
us having installed Apollo server we are

00:15:08,209 --> 00:15:15,199
defining different type custom types

00:15:11,059 --> 00:15:18,079
input type mutation query so here's our

00:15:15,199 --> 00:15:21,350
full schema here's our full half of our

00:15:18,079 --> 00:15:23,239
graphical server and yeah so here is us

00:15:21,350 --> 00:15:25,509
trying to resolve this it's a bunch of

00:15:23,239 --> 00:15:28,170
code as I said before this is on github

00:15:25,509 --> 00:15:30,420
the whole point is to take the scheme

00:15:28,170 --> 00:15:33,750
take the resolver those two together

00:15:30,420 --> 00:15:35,970
makes out your full api and once we have

00:15:33,750 --> 00:15:39,170
those two halves then we can merge them

00:15:35,970 --> 00:15:41,519
and we can actually run this completely

00:15:39,170 --> 00:15:44,579
let's see if I remember what the script

00:15:41,519 --> 00:15:46,470
was right we're yeah so we're looking at

00:15:44,579 --> 00:15:48,300
a bunch of things those are query those

00:15:46,470 --> 00:15:51,149
are mutation and also the ability to

00:15:48,300 --> 00:15:52,740
resolve the nested bits so server listen

00:15:51,149 --> 00:15:55,079
is what actually crates our Apollo

00:15:52,740 --> 00:15:58,740
server our graphical server that's now

00:15:55,079 --> 00:16:02,339
exposed once we run this on port 4000 if

00:15:58,740 --> 00:16:04,649
I remember correctly yeah so let's do an

00:16:02,339 --> 00:16:06,899
NPM start and that means that we are

00:16:04,649 --> 00:16:09,839
ending up in a browser and we can easily

00:16:06,899 --> 00:16:11,579
follow that link and yeah this is great

00:16:09,839 --> 00:16:13,740
right we have visual environment so we

00:16:11,579 --> 00:16:15,779
can test out our API is running with

00:16:13,740 --> 00:16:18,120
autocomplete and all the lovely parts

00:16:15,779 --> 00:16:20,490
and we can test out this simple query

00:16:18,120 --> 00:16:23,610
here our top left which asked for hello

00:16:20,490 --> 00:16:26,010
and we also have a secondary query in

00:16:23,610 --> 00:16:29,010
which we say we want hello we want

00:16:26,010 --> 00:16:30,870
products and we want reviews although

00:16:29,010 --> 00:16:33,630
this works really nicely but of course

00:16:30,870 --> 00:16:35,459
it's kind of static data okay so our end

00:16:33,630 --> 00:16:37,620
result right now is that we have some

00:16:35,459 --> 00:16:40,350
kind of graph QL API on top of a bunch

00:16:37,620 --> 00:16:43,470
of static data we have products we got

00:16:40,350 --> 00:16:45,959
create product review hello and reviews

00:16:43,470 --> 00:16:50,070
which is a yeah different type of

00:16:45,959 --> 00:16:51,870
datasource microservices is another

00:16:50,070 --> 00:16:53,910
thing so why am I talking micro services

00:16:51,870 --> 00:16:56,670
when I'm talking graph QL API well as

00:16:53,910 --> 00:16:58,560
human might have noticed initially when

00:16:56,670 --> 00:17:01,170
I talked about this we talked about the

00:16:58,560 --> 00:17:02,579
very complex data landscape right we've

00:17:01,170 --> 00:17:05,910
got different kind of services out there

00:17:02,579 --> 00:17:08,610
all talking different protocols so micro

00:17:05,910 --> 00:17:11,429
services is really the reality I think a

00:17:08,610 --> 00:17:13,199
lot of you are living with and my point

00:17:11,429 --> 00:17:14,939
I'm making is that graphical is the

00:17:13,199 --> 00:17:17,699
layer on top of all of those micro

00:17:14,939 --> 00:17:19,799
services because what the end result for

00:17:17,699 --> 00:17:20,970
you is to build an app but don't care it

00:17:19,799 --> 00:17:25,079
doesn't care whether you have a hundred

00:17:20,970 --> 00:17:26,309
micro services or two or even one and of

00:17:25,079 --> 00:17:28,049
course with the micro services we're

00:17:26,309 --> 00:17:30,419
going to talk about containerization

00:17:28,049 --> 00:17:34,620
what does that mean we're gonna well how

00:17:30,419 --> 00:17:35,920
many use docker ok you are believers

00:17:34,620 --> 00:17:38,140
right

00:17:35,920 --> 00:17:40,630
and you with doctor we have a doctor

00:17:38,140 --> 00:17:43,420
file we are able to create an image from

00:17:40,630 --> 00:17:45,700
that and ultimately we're able to create

00:17:43,420 --> 00:17:47,560
a container which crate contains our

00:17:45,700 --> 00:17:49,530
code environment variables a lot of

00:17:47,560 --> 00:17:53,560
libraries and a lot of other goodness

00:17:49,530 --> 00:17:55,750
so our micro service by definition is

00:17:53,560 --> 00:17:58,030
some kind of self-contained or should be

00:17:55,750 --> 00:17:59,950
a self-contained unit that has its own

00:17:58,030 --> 00:18:01,960
data source and its own business logic

00:17:59,950 --> 00:18:04,540
right it should be separated from all

00:18:01,960 --> 00:18:07,120
the other different services and it is

00:18:04,540 --> 00:18:08,770
the opposite of a monolith which you

00:18:07,120 --> 00:18:10,930
know contains everything of everything

00:18:08,770 --> 00:18:12,640
we will contain your eyes two different

00:18:10,930 --> 00:18:14,620
services which means that for every

00:18:12,640 --> 00:18:16,930
service we will have a docker file and

00:18:14,620 --> 00:18:19,000
an app file and ultimately we will have

00:18:16,930 --> 00:18:20,800
a docker compose file that's the big

00:18:19,000 --> 00:18:22,630
Orchestrator that's the one that's gonna

00:18:20,800 --> 00:18:25,060
say I don't care if you've got two

00:18:22,630 --> 00:18:26,860
services or hundred services I'm gonna

00:18:25,060 --> 00:18:29,400
build all of those and I'm gonna make

00:18:26,860 --> 00:18:31,420
sure that each of them get an endpoint

00:18:29,400 --> 00:18:33,280
you're gonna see how that works in a

00:18:31,420 --> 00:18:35,800
demo but first off this is the

00:18:33,280 --> 00:18:38,230
instruction file the recipe file for

00:18:35,800 --> 00:18:40,330
your micro service so here you're saying

00:18:38,230 --> 00:18:42,880
some kind of base image you wanna base

00:18:40,330 --> 00:18:45,340
this off and then you're saying some

00:18:42,880 --> 00:18:48,010
kind of work directory really depends on

00:18:45,340 --> 00:18:49,720
where you work right and you also say

00:18:48,010 --> 00:18:53,140
well there's gonna be some kind of port

00:18:49,720 --> 00:18:54,730
and I want some command here that kind

00:18:53,140 --> 00:18:58,330
of says I want to copy my application

00:18:54,730 --> 00:19:00,190
files to somewhere in the container then

00:18:58,330 --> 00:19:02,140
I want to run some kind of command in

00:19:00,190 --> 00:19:03,760
this case npm installed install a bunch

00:19:02,140 --> 00:19:07,750
of libraries that my service is

00:19:03,760 --> 00:19:10,180
dependent on then i'm exposing a port

00:19:07,750 --> 00:19:12,130
and lastly i'm telling it how do I

00:19:10,180 --> 00:19:14,500
actually get my service up and running

00:19:12,130 --> 00:19:16,570
so this is all your service might

00:19:14,500 --> 00:19:19,390
possibly need in the universe some kind

00:19:16,570 --> 00:19:22,300
of base image libraries the application

00:19:19,390 --> 00:19:24,300
code all of this is a recipe right from

00:19:22,300 --> 00:19:27,610
that recipe you were able to bake a cake

00:19:24,300 --> 00:19:30,700
which well it's an image once we have an

00:19:27,610 --> 00:19:33,130
image we can build a container looking

00:19:30,700 --> 00:19:36,580
at the code it's pretty simple stuff is

00:19:33,130 --> 00:19:39,580
just an express server that's running on

00:19:36,580 --> 00:19:42,360
a port with a simple default route and

00:19:39,580 --> 00:19:45,460
us just returning back a static list

00:19:42,360 --> 00:19:47,740
that's a review service now we have a

00:19:45,460 --> 00:19:49,770
product service and it's very simple

00:19:47,740 --> 00:19:52,169
that one as well but

00:19:49,770 --> 00:19:53,730
yeah it looks a bit smaller because you

00:19:52,169 --> 00:19:56,929
know the list is smaller but it's the

00:19:53,730 --> 00:20:01,080
same idea an Express service that just

00:19:56,929 --> 00:20:03,480
exposes a REST API the file structure

00:20:01,080 --> 00:20:05,909
after these two services is a docker

00:20:03,480 --> 00:20:07,289
compose Yama file that's the one that

00:20:05,909 --> 00:20:09,899
the docker compose is going to read from

00:20:07,289 --> 00:20:11,549
we got two different directories each of

00:20:09,899 --> 00:20:13,740
those directories contain everything

00:20:11,549 --> 00:20:16,049
they could possibly need which is your

00:20:13,740 --> 00:20:18,419
docker file your instruction file your

00:20:16,049 --> 00:20:21,059
app code and some kind of package Jason

00:20:18,419 --> 00:20:22,830
and depending of course of I mean I'm at

00:20:21,059 --> 00:20:25,100
the Java Script meetup right but if I

00:20:22,830 --> 00:20:28,169
was at the Java meetup that would be

00:20:25,100 --> 00:20:30,000
well some kind of a configuration file a

00:20:28,169 --> 00:20:33,600
manifest file that says what libraries

00:20:30,000 --> 00:20:35,070
does this service need all right so we

00:20:33,600 --> 00:20:36,899
got a file structure we kind of

00:20:35,070 --> 00:20:38,940
understand this bit now we got a docker

00:20:36,899 --> 00:20:40,830
compose and in the docker compose we

00:20:38,940 --> 00:20:43,860
kind of specify our two different

00:20:40,830 --> 00:20:45,659
services in this case we're saying first

00:20:43,860 --> 00:20:47,399
the context where can I find my docker

00:20:45,659 --> 00:20:50,490
file because that might not be at the

00:20:47,399 --> 00:20:52,980
root then I'm saying some kind of port

00:20:50,490 --> 00:20:55,559
mapping so I'm saying external port

00:20:52,980 --> 00:20:59,010
colon internal port in the container and

00:20:55,559 --> 00:21:01,649
for the next service I'm saying AHA ok

00:20:59,010 --> 00:21:03,779
similar scenario find the doctor file do

00:21:01,649 --> 00:21:06,090
some kind of external port mapping and

00:21:03,779 --> 00:21:08,640
yeah in both cases we're saying you

00:21:06,090 --> 00:21:10,520
should be in the same network that means

00:21:08,640 --> 00:21:15,450
that they are able to talk to each other

00:21:10,520 --> 00:21:17,279
once we got all this done what well we

00:21:15,450 --> 00:21:18,899
got some docker compose commands that me

00:21:17,279 --> 00:21:21,960
means different things how many of you

00:21:18,899 --> 00:21:23,309
use docker compose okay quite a show of

00:21:21,960 --> 00:21:25,980
hand so you know I'm talking about

00:21:23,309 --> 00:21:28,020
once you use docker compose that means

00:21:25,980 --> 00:21:29,549
that it's going to build and create

00:21:28,020 --> 00:21:32,070
containers for you and they're going to

00:21:29,549 --> 00:21:35,820
be up and running docker compose build

00:21:32,070 --> 00:21:37,529
is just building docker compose down

00:21:35,820 --> 00:21:40,080
means that we are taking everything down

00:21:37,529 --> 00:21:42,179
and we're even removing it this is

00:21:40,080 --> 00:21:46,049
really great tool for handling a bunch

00:21:42,179 --> 00:21:51,390
of different services now looking at a

00:21:46,049 --> 00:21:53,340
demo it's quite simple

00:21:51,390 --> 00:21:57,300
I think most of you have used docker but

00:21:53,340 --> 00:21:59,340
still yeah so we're just looking at the

00:21:57,300 --> 00:22:03,230
docker compose file just what I showed

00:21:59,340 --> 00:22:06,000
you on the PowerPoint and our products

00:22:03,230 --> 00:22:08,220
catalog with an app j/s of all our app

00:22:06,000 --> 00:22:09,660
code our doctor file with all the

00:22:08,220 --> 00:22:12,840
instructions for how to build the

00:22:09,660 --> 00:22:15,200
service see if I can fasten this up a

00:22:12,840 --> 00:22:15,200
bit right

00:22:16,370 --> 00:22:21,920
same thing with reviews contains app j/s

00:22:19,440 --> 00:22:27,300
and a docker file and the package Jason

00:22:21,920 --> 00:22:29,040
all very interesting stuff right really

00:22:27,300 --> 00:22:31,070
depends on the crowd sometimes somewhere

00:22:29,040 --> 00:22:33,510
where people are building Mona Lisa

00:22:31,070 --> 00:22:35,250
you're a bit more advanced but here we

00:22:33,510 --> 00:22:37,110
have our docker compose file which kind

00:22:35,250 --> 00:22:38,970
of specify both our services how to

00:22:37,110 --> 00:22:41,700
build them how to port map them and do

00:22:38,970 --> 00:22:43,320
all the other interesting bits now we're

00:22:41,700 --> 00:22:44,880
just calling docker composed to make

00:22:43,320 --> 00:22:46,290
sure that we actually build those two

00:22:44,880 --> 00:22:49,440
services because seeing is believing

00:22:46,290 --> 00:22:52,140
right otherwise I would just be some guy

00:22:49,440 --> 00:22:55,290
that shows you slides and say it works I

00:22:52,140 --> 00:22:57,360
promise so now we got two different

00:22:55,290 --> 00:23:00,180
services running and having a look at

00:22:57,360 --> 00:23:03,150
those in the browser just in a sec there

00:23:00,180 --> 00:23:05,580
now we can go to port 8000 we see that

00:23:03,150 --> 00:23:06,540
we got a bunch of products we shift to

00:23:05,580 --> 00:23:08,310
00:23:06,540 --> 00:23:10,680
and we see that we have a bunch of

00:23:08,310 --> 00:23:12,300
reviews so that's all good these are two

00:23:10,680 --> 00:23:15,260
external endpoints they could be living

00:23:12,300 --> 00:23:17,610
locally at your computer but also

00:23:15,260 --> 00:23:21,810
somewhere else completely else some IP

00:23:17,610 --> 00:23:24,930
far far away so what's the point of this

00:23:21,810 --> 00:23:26,460
well right now we got some endpoints

00:23:24,930 --> 00:23:29,100
over here and and endpoints over there

00:23:26,460 --> 00:23:33,510
and a graphic ql api and no one talks to

00:23:29,100 --> 00:23:34,740
each other awesome right no yeah they

00:23:33,510 --> 00:23:36,780
should probably talk to each other I'm

00:23:34,740 --> 00:23:38,700
all right yeah so we can easily

00:23:36,780 --> 00:23:40,940
integrate this by going into the

00:23:38,700 --> 00:23:43,080
resolver file for graph QL and just say

00:23:40,940 --> 00:23:46,290
actually talk to these two endpoints

00:23:43,080 --> 00:23:49,140
instead so really make sure you do a

00:23:46,290 --> 00:23:51,420
fetch towards this end point and then in

00:23:49,140 --> 00:23:53,730
here as well and suddenly everybody's

00:23:51,420 --> 00:23:55,890
happy and the graph QL is merged

00:23:53,730 --> 00:23:57,330
together with your micro services and

00:23:55,890 --> 00:23:59,780
you should have an image looking like

00:23:57,330 --> 00:23:59,780
this right

00:24:00,760 --> 00:24:05,059
awesome so this kind of scales here

00:24:03,470 --> 00:24:08,360
because we can keep on extending our

00:24:05,059 --> 00:24:13,070
graphical and I a pie all day long so

00:24:08,360 --> 00:24:15,289
what about hosting service fewer hands I

00:24:13,070 --> 00:24:18,289
think 30% of the crowd have been using

00:24:15,289 --> 00:24:21,200
service service is a way to host

00:24:18,289 --> 00:24:24,049
graphical api's it's not the perfect way

00:24:21,200 --> 00:24:26,510
what makes serving us a possibly good

00:24:24,049 --> 00:24:29,950
candidate is that the fact is you're

00:24:26,510 --> 00:24:33,260
building a graphical API over a big

00:24:29,950 --> 00:24:34,880
services landscape which means that all

00:24:33,260 --> 00:24:36,620
of those services might not be aware

00:24:34,880 --> 00:24:39,679
that you're actually building a great

00:24:36,620 --> 00:24:42,559
graphical API on top of everything so

00:24:39,679 --> 00:24:45,440
why is that relevant it means that maybe

00:24:42,559 --> 00:24:46,730
just maybe that graphical API don't need

00:24:45,440 --> 00:24:49,279
to be up all the time

00:24:46,730 --> 00:24:53,270
maybe the uptime is not 100 percent but

00:24:49,279 --> 00:24:55,309
maybe 20 percent or even less so I want

00:24:53,270 --> 00:24:57,799
you to consider the combination of

00:24:55,309 --> 00:24:59,539
service and graph QL API for that reason

00:24:57,799 --> 00:25:02,210
because service is not up and running

00:24:59,539 --> 00:25:05,270
all the time it's a very cheap option to

00:25:02,210 --> 00:25:10,399
just take data from here from there and

00:25:05,270 --> 00:25:12,020
from there now I talked a little bit

00:25:10,399 --> 00:25:13,970
about micro billing I just wanted to

00:25:12,020 --> 00:25:16,490
show you from the sake of a sure a lot

00:25:13,970 --> 00:25:20,659
of the URA on AWS if it's not that cheap

00:25:16,490 --> 00:25:21,200
on AWS then you go with DCP right are

00:25:20,659 --> 00:25:25,730
you still awake

00:25:21,200 --> 00:25:27,169
awesome I wasn't sure sometimes I do

00:25:25,730 --> 00:25:30,710
need to tell a joke but you know you

00:25:27,169 --> 00:25:32,929
might end up sleeping anyway so should I

00:25:30,710 --> 00:25:35,210
make everything serving us my kind of

00:25:32,929 --> 00:25:37,100
depends am i right if your code is

00:25:35,210 --> 00:25:38,090
called all the time 100% uptime is

00:25:37,100 --> 00:25:40,460
probably good idea

00:25:38,090 --> 00:25:42,770
service is a bad idea if you got

00:25:40,460 --> 00:25:44,990
seldom-used code you can use some kind

00:25:42,770 --> 00:25:47,450
of instrument instrumentation inside of

00:25:44,990 --> 00:25:49,010
your app and say hmm maybe this part of

00:25:47,450 --> 00:25:51,409
the code actually don't need to be here

00:25:49,010 --> 00:25:54,279
maybe it should be a micro service and

00:25:51,409 --> 00:25:57,230
just maybe I should use service for that

00:25:54,279 --> 00:25:59,950
and of course never used code anyone

00:25:57,230 --> 00:26:04,880
knows what to do with that thank you

00:25:59,950 --> 00:26:05,480
thank you all right so I've got two

00:26:04,880 --> 00:26:08,330
minutes left

00:26:05,480 --> 00:26:10,549
hyperspeed okay so the function secret

00:26:08,330 --> 00:26:13,670
sauce in most offers when it comes to

00:26:10,549 --> 00:26:15,530
service is the fact that one we got

00:26:13,670 --> 00:26:18,050
bunch of useful triggers which means

00:26:15,530 --> 00:26:19,730
there are different reasons why our code

00:26:18,050 --> 00:26:22,760
is starting in the first place which

00:26:19,730 --> 00:26:24,770
could be blob storage maybe some kind of

00:26:22,760 --> 00:26:27,260
database where there's an insertion or

00:26:24,770 --> 00:26:30,080
deletion or maybe there's a new message

00:26:27,260 --> 00:26:32,090
on top of our queue or there's a timer

00:26:30,080 --> 00:26:35,290
that just says at regular intervals

00:26:32,090 --> 00:26:39,320
please call this bit of code for me and

00:26:35,290 --> 00:26:41,540
yeah bindings is there binding it's an

00:26:39,320 --> 00:26:41,720
AWS on or do you know what I'm talking

00:26:41,540 --> 00:26:45,230
about

00:26:41,720 --> 00:26:47,270
and okay so bindings is the way to make

00:26:45,230 --> 00:26:49,370
life easy for you that means a lot of

00:26:47,270 --> 00:26:52,580
connection code that reads data and

00:26:49,370 --> 00:26:54,590
writes data is written for you bindings

00:26:52,580 --> 00:26:56,870
simply mean we have a configuration file

00:26:54,590 --> 00:26:59,770
so if you just say I've got a database

00:26:56,870 --> 00:27:02,090
here and Excel here I'm gonna make magic

00:26:59,770 --> 00:27:03,800
black box you don't need to care I'm

00:27:02,090 --> 00:27:05,810
gonna connect these two data sources for

00:27:03,800 --> 00:27:08,030
you so in this case you just specify

00:27:05,810 --> 00:27:10,820
with a connection string here's my

00:27:08,030 --> 00:27:13,640
database and I want to read from it so

00:27:10,820 --> 00:27:16,070
once my code executes I want a bunch of

00:27:13,640 --> 00:27:17,990
records in right I'm at the moment of

00:27:16,070 --> 00:27:20,510
execution of my code I got a bunch of

00:27:17,990 --> 00:27:23,750
data I'm happy but I also want the

00:27:20,510 --> 00:27:26,450
reference so I can write so that means

00:27:23,750 --> 00:27:28,580
when I'm running my service code I want

00:27:26,450 --> 00:27:32,030
the ability to just easily populate this

00:27:28,580 --> 00:27:34,930
reference and say insert please because

00:27:32,030 --> 00:27:37,400
when I'm writing service nowadays

00:27:34,930 --> 00:27:39,290
usually my code never ends up to more

00:27:37,400 --> 00:27:41,330
than ten lines of code and that's pretty

00:27:39,290 --> 00:27:44,210
much what you want right I have my data

00:27:41,330 --> 00:27:48,340
do some manipulation save or create

00:27:44,210 --> 00:27:50,510
whatever right it should be see

00:27:48,340 --> 00:27:53,060
different ways of authoring of course

00:27:50,510 --> 00:27:55,100
you got the azure portal but you also

00:27:53,060 --> 00:27:57,980
have vias code with web storms and

00:27:55,100 --> 00:27:59,510
different extensions in it and yeah at

00:27:57,980 --> 00:28:02,090
the bottom of things we got the azure

00:27:59,510 --> 00:28:03,830
functions core which is a library that

00:28:02,090 --> 00:28:07,790
you know you kind of need at the bottom

00:28:03,830 --> 00:28:10,370
that library installs a executable that

00:28:07,790 --> 00:28:11,780
executable is callable and CI CD

00:28:10,370 --> 00:28:13,640
sonorous because that's what you want

00:28:11,780 --> 00:28:17,470
right gonna be able to create your

00:28:13,640 --> 00:28:20,270
functions run them in different ways

00:28:17,470 --> 00:28:22,610
there are different options for mac for

00:28:20,270 --> 00:28:24,540
Windows and Ubuntu so a thing that

00:28:22,610 --> 00:28:28,980
should capture most of you unless

00:28:24,540 --> 00:28:30,570
you're on a very exotic OS no and of

00:28:28,980 --> 00:28:32,480
course there's a vyas code extension

00:28:30,570 --> 00:28:35,010
that's going to make life super easy

00:28:32,480 --> 00:28:37,920
let's have a look at the demo to see how

00:28:35,010 --> 00:28:39,480
easy this actually is and I'm probably

00:28:37,920 --> 00:28:42,030
going to be thrown out over here but I

00:28:39,480 --> 00:28:44,130
don't care I want to show you okay so

00:28:42,030 --> 00:28:48,150
now we're looking at trying to scaffold

00:28:44,130 --> 00:28:50,310
up a Astra functions project should note

00:28:48,150 --> 00:28:51,840
that probably in Amazon I think you just

00:28:50,310 --> 00:28:54,240
have functions you don't have the notion

00:28:51,840 --> 00:28:56,970
of an act but in a sure you have the

00:28:54,240 --> 00:28:58,800
notion of an app and that app contains X

00:28:56,970 --> 00:29:00,660
number of functions in it first thing

00:28:58,800 --> 00:29:02,480
we're gonna do is to select what type of

00:29:00,660 --> 00:29:05,100
the code language which is JavaScript

00:29:02,480 --> 00:29:07,020
then when we first create our first

00:29:05,100 --> 00:29:08,280
function app it's going to ask you

00:29:07,020 --> 00:29:10,710
probably want the function in there as

00:29:08,280 --> 00:29:12,210
well so what you want that function to

00:29:10,710 --> 00:29:16,290
be triggered by and what you want to

00:29:12,210 --> 00:29:18,420
call that function so we call it get and

00:29:16,290 --> 00:29:21,420
we got different authorization levels

00:29:18,420 --> 00:29:24,060
which is anonymous function which means

00:29:21,420 --> 00:29:26,010
you're using an API key and admin means

00:29:24,060 --> 00:29:27,750
you've got even more security added to

00:29:26,010 --> 00:29:30,690
that we're going to go with anonymous

00:29:27,750 --> 00:29:33,960
because we are wild and crazy this is a

00:29:30,690 --> 00:29:36,270
demo alright so we got to be a piece of

00:29:33,960 --> 00:29:37,830
code here on the right which essentially

00:29:36,270 --> 00:29:41,160
tells us we've got two different input

00:29:37,830 --> 00:29:43,920
parameter a quest object and from the

00:29:41,160 --> 00:29:45,870
request we can read queries but also

00:29:43,920 --> 00:29:48,300
from the body so depending on whether we

00:29:45,870 --> 00:29:51,330
are getting or posting we can find our

00:29:48,300 --> 00:29:53,520
data lastly here we populate this

00:29:51,330 --> 00:29:55,710
context rest object and this is just an

00:29:53,520 --> 00:29:57,890
HTTP response that comes back there's no

00:29:55,710 --> 00:30:00,240
actual return statement but rather

00:29:57,890 --> 00:30:02,280
populate context rest and everybody's

00:30:00,240 --> 00:30:04,140
happy

00:30:02,280 --> 00:30:05,520
yeah set the body property because

00:30:04,140 --> 00:30:07,920
that's what people are going to see and

00:30:05,520 --> 00:30:10,500
you can also override the content type

00:30:07,920 --> 00:30:14,130
so it goes from text to JSON or whatever

00:30:10,500 --> 00:30:18,000
else are the type you need as I said we

00:30:14,130 --> 00:30:19,680
got the HTTP trigger anonymous these are

00:30:18,000 --> 00:30:21,720
options that we did in the beginning we

00:30:19,680 --> 00:30:24,060
can easily change those to whatever we

00:30:21,720 --> 00:30:26,400
want them to be get them post we can

00:30:24,060 --> 00:30:28,440
also change that so if we just want it

00:30:26,400 --> 00:30:30,320
to be a get it's a get if we want it to

00:30:28,440 --> 00:30:32,940
be a put and so on

00:30:30,320 --> 00:30:35,190
now start debugging of course the

00:30:32,940 --> 00:30:38,420
bugging should be easy and nice so we

00:30:35,190 --> 00:30:40,400
fire this up this compiles

00:30:38,420 --> 00:30:43,880
and at the end of compilation it's going

00:30:40,400 --> 00:30:45,650
to give us an endpoint than what we've

00:30:43,880 --> 00:30:47,840
got the localhost 7071

00:30:45,650 --> 00:30:50,780
api get so we should go to a browser and

00:30:47,840 --> 00:30:54,710
try that out now let's give this a / am

00:30:50,780 --> 00:30:56,720
so say name Chris now what we're able to

00:30:54,710 --> 00:30:58,490
hover over context and rec and we see

00:30:56,720 --> 00:31:00,530
that it's fully populated and our debug

00:30:58,490 --> 00:31:06,230
experience is quite nice in this code

00:31:00,530 --> 00:31:09,740
thanks to the extension and yeah that's

00:31:06,230 --> 00:31:13,690
pretty much what I wanted to show in the

00:31:09,740 --> 00:31:17,260
context of surveillance in vs code and

00:31:13,690 --> 00:31:21,440
I'm getting angry loops no happy looks

00:31:17,260 --> 00:31:23,270
somewhat okay so integrating graphical

00:31:21,440 --> 00:31:24,710
in our service API we've seen all the

00:31:23,270 --> 00:31:26,960
parts right we have build the graphical

00:31:24,710 --> 00:31:29,930
API we had we are talking to different

00:31:26,960 --> 00:31:32,090
market services endpoints we have seen

00:31:29,930 --> 00:31:34,970
how we can scaffold up our service app

00:31:32,090 --> 00:31:36,680
we're gonna do pretty much the same what

00:31:34,970 --> 00:31:38,960
we need to understand is that we move

00:31:36,680 --> 00:31:40,790
need to move our graphical code inside

00:31:38,960 --> 00:31:43,160
of us the service app right so we've

00:31:40,790 --> 00:31:45,530
done all the hard work we have defined

00:31:43,160 --> 00:31:47,690
the schema or resolver everything that

00:31:45,530 --> 00:31:50,900
we could possibly need now we just need

00:31:47,690 --> 00:31:52,490
to scaffold up our service app and yeah

00:31:50,900 --> 00:31:54,680
we need to proxy all the different

00:31:52,490 --> 00:31:56,840
requests that comes into the service and

00:31:54,680 --> 00:31:58,550
just say here graphical API you know

00:31:56,840 --> 00:32:01,550
what to do with this take this and give

00:31:58,550 --> 00:32:03,890
me a suitable response back so we

00:32:01,550 --> 00:32:09,470
integrate our graphical API with service

00:32:03,890 --> 00:32:11,150
and that's another demo surprise so

00:32:09,470 --> 00:32:12,950
let's check the function config with

00:32:11,150 --> 00:32:15,230
right now we have scaffolded up a

00:32:12,950 --> 00:32:17,510
service app with one one function it's

00:32:15,230 --> 00:32:19,400
called graph kill just what you looked

00:32:17,510 --> 00:32:22,190
at we just named it differently we have

00:32:19,400 --> 00:32:25,070
also created this subdirectory API which

00:32:22,190 --> 00:32:27,470
contains app Jas that instantiate our

00:32:25,070 --> 00:32:31,610
Apollo server our resolvers and our

00:32:27,470 --> 00:32:33,350
schema all of that is in there that's

00:32:31,610 --> 00:32:37,700
great right so that that's the easy step

00:32:33,350 --> 00:32:41,810
we just moved the code now what let's

00:32:37,700 --> 00:32:43,190
see okay so we had a look at API we want

00:32:41,810 --> 00:32:45,440
to look at this one aha

00:32:43,190 --> 00:32:48,200
we are doing a require from the

00:32:45,440 --> 00:32:49,760
graphical API and of course we need to

00:32:48,200 --> 00:32:51,320
provide query that's one of the

00:32:49,760 --> 00:32:51,890
conditions right we need to expose some

00:32:51,320 --> 00:32:55,250
kind of

00:32:51,890 --> 00:32:58,010
so people can send that into our service

00:32:55,250 --> 00:33:00,590
API and we also have this server execute

00:32:58,010 --> 00:33:02,120
operation this is what we're doing when

00:33:00,590 --> 00:33:06,080
we're passing whatever comes from the

00:33:02,120 --> 00:33:08,870
outside into our graph QL API and yeah

00:33:06,080 --> 00:33:10,610
Apollo server graph QL node fetch all of

00:33:08,870 --> 00:33:12,410
those library dependencies of course the

00:33:10,610 --> 00:33:13,610
service project needs to depend on those

00:33:12,410 --> 00:33:16,100
as well

00:33:13,610 --> 00:33:18,040
because otherwise he wouldn't be able to

00:33:16,100 --> 00:33:22,790
build everything together

00:33:18,040 --> 00:33:25,429
okay then now what we get a endpoint and

00:33:22,790 --> 00:33:27,980
we're able to go here and specify our

00:33:25,429 --> 00:33:29,929
graphic URL query so we ask for reviews

00:33:27,980 --> 00:33:32,299
we ask for products and bunch of other

00:33:29,929 --> 00:33:34,940
things we see that all our nested

00:33:32,299 --> 00:33:37,309
queries work we also see that they are

00:33:34,940 --> 00:33:42,950
talking to the micro services so we see

00:33:37,309 --> 00:33:47,110
how everything now works together and

00:33:42,950 --> 00:33:49,429
you're like he missed me at graphical I

00:33:47,110 --> 00:33:50,929
mean fair enough this is a one-hour talk

00:33:49,429 --> 00:33:53,120
right I'm not going to show you the

00:33:50,929 --> 00:33:55,720
deploy part we don't have time for that

00:33:53,120 --> 00:33:59,480
but what I will show you is another

00:33:55,720 --> 00:34:02,480
summary slide in theory you have learned

00:33:59,480 --> 00:34:04,820
about micro services node years Express

00:34:02,480 --> 00:34:07,940
and docker compose I think most of you

00:34:04,820 --> 00:34:09,919
said yesterday from the get-go if you

00:34:07,940 --> 00:34:13,340
want to see this at probably quarter

00:34:09,919 --> 00:34:16,250
speed I got this eight akka ms graphical

00:34:13,340 --> 00:34:18,500
- workshop where you can do this

00:34:16,250 --> 00:34:20,149
yourself it's completely free it's

00:34:18,500 --> 00:34:22,490
hosted on the Internet you can do this

00:34:20,149 --> 00:34:25,040
at your own time if you want to give me

00:34:22,490 --> 00:34:27,560
a some kind of PR make it better please

00:34:25,040 --> 00:34:30,200
do so I very much welcome any

00:34:27,560 --> 00:34:32,810
contributions I also have a video

00:34:30,200 --> 00:34:36,260
tutorial where you can either mute me or

00:34:32,810 --> 00:34:38,659
have a look it's up to you there - slash

00:34:36,260 --> 00:34:41,960
soft Chris this is where I write most of

00:34:38,659 --> 00:34:44,119
my material and yeah I got a very long

00:34:41,960 --> 00:34:45,859
listing of doctor in kubernetes if

00:34:44,119 --> 00:34:48,800
someone is interested in that it's like

00:34:45,859 --> 00:34:51,470
15 20 articles kubernetes who loves

00:34:48,800 --> 00:34:52,090
communities who are confused by

00:34:51,470 --> 00:34:56,899
kubernetes

00:34:52,090 --> 00:35:01,100
all right okay thank you very much great

00:34:56,899 --> 00:35:03,440
to see all of you and yeah any questions

00:35:01,100 --> 00:35:06,420
make it quick right

00:35:03,440 --> 00:35:13,640
no time for question we knew that right

00:35:06,420 --> 00:35:13,640
I'll be here to the end of these yes

00:35:14,900 --> 00:35:22,619
access-control oh you mean like

00:35:17,700 --> 00:35:23,700
authorization levels and yeah so with

00:35:22,619 --> 00:35:25,410
graphic he really doesn't have an

00:35:23,700 --> 00:35:27,150
opinion or security at all which means

00:35:25,410 --> 00:35:30,300
that you need kind of need to build that

00:35:27,150 --> 00:35:32,760
in so yeah that also kind of sucks but

00:35:30,300 --> 00:35:35,640
that's really it with graphical it's

00:35:32,760 --> 00:35:38,070
just a you know query language more and

00:35:35,640 --> 00:35:39,960
it's up to you to solve that but the way

00:35:38,070 --> 00:35:42,030
I would solve it is I have some kind of

00:35:39,960 --> 00:35:44,550
parameter in that you would need like a

00:35:42,030 --> 00:35:46,680
token or something and say you know the

00:35:44,550 --> 00:35:48,869
JWT or something like that and you're

00:35:46,680 --> 00:35:50,670
able to say can this person actually do

00:35:48,869 --> 00:35:53,100
this at this nested level and so on

00:35:50,670 --> 00:35:55,110
there are also different ways to create

00:35:53,100 --> 00:35:56,940
different queries that so that depending

00:35:55,110 --> 00:35:58,920
on who is actually arriving at your

00:35:56,940 --> 00:36:01,560
endpoint you can just make sure to

00:35:58,920 --> 00:36:03,240
expose different versions so in one

00:36:01,560 --> 00:36:05,640
version you can have a query that only

00:36:03,240 --> 00:36:08,010
allows for three columns and in the more

00:36:05,640 --> 00:36:09,570
allowed level that could be like ten

00:36:08,010 --> 00:36:13,109
columns so there are different ways of

00:36:09,570 --> 00:36:18,050
putting security before but also inside

00:36:13,109 --> 00:36:18,050

YouTube URL: https://www.youtube.com/watch?v=mMod0dgnXvw


