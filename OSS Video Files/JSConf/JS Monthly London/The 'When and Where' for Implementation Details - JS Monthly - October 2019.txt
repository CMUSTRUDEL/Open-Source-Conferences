Title: The 'When and Where' for Implementation Details - JS Monthly - October 2019
Publication date: 2019-11-17
Playlist: JS Monthly London
Description: 
	The time and place for... Implementation Details // Johnny Magrippis (Funding Circle)

`Boolean(v)`, or `!!v`? React's `.setState` or hooks? Interface directly with a Rest API, or through a GraphQL layer? Johnny explores when and where you should be focusing on implementation details such as these... Spoiler alert: it's not in your tests.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,529
I'm Johnny I'm an engineer here at

00:00:02,220 --> 00:00:07,980
planning circle actually but I've worked

00:00:04,529 --> 00:00:11,340
in places such as Manchester New York

00:00:07,980 --> 00:00:13,620
and the u.s. Waco in Sweden Athens in

00:00:11,340 --> 00:00:16,920
Greece and hopefully that goes some way

00:00:13,620 --> 00:00:20,070
to explaining my in comprehensible

00:00:16,920 --> 00:00:22,650
accent which I do apologize for but I am

00:00:20,070 --> 00:00:24,630
told that the talk will be recorded and

00:00:22,650 --> 00:00:26,730
may be YouTube's Auto captioning system

00:00:24,630 --> 00:00:30,330
will help you understand what I'm saying

00:00:26,730 --> 00:00:33,030
today I have a so hey what are we going

00:00:30,330 --> 00:00:38,399
to do today we have a big agenda whoop

00:00:33,030 --> 00:00:40,920
all right are we singing well we'll see

00:00:38,399 --> 00:00:43,469
the talk is seen so far but we'll move

00:00:40,920 --> 00:00:45,629
on the attenders full of but they start

00:00:43,469 --> 00:00:47,460
hopefully this will work properly from

00:00:45,629 --> 00:00:49,379
now on we have to talk about the accent

00:00:47,460 --> 00:00:50,850
I'm gonna frame the problem I'm gonna

00:00:49,379 --> 00:00:55,039
frame the doc I'm gonna give you a

00:00:50,850 --> 00:00:57,120
contrived example about in code and

00:00:55,039 --> 00:00:59,280
testing code I'm gonna give you a

00:00:57,120 --> 00:01:01,980
realistic example then I'm gonna reframe

00:00:59,280 --> 00:01:03,840
this what our implementation details and

00:01:01,980 --> 00:01:07,049
then I'm gonna show you how to avoid

00:01:03,840 --> 00:01:13,920
them in tests and when to actually focus

00:01:07,049 --> 00:01:16,170
them on them so so you know what I love

00:01:13,920 --> 00:01:19,350
I love talking about implementation

00:01:16,170 --> 00:01:23,220
details I love talking to other

00:01:19,350 --> 00:01:26,820
engineers and telling them what's better

00:01:23,220 --> 00:01:29,130
view or react what's better is

00:01:26,820 --> 00:01:32,610
phosphorus or what's better for

00:01:29,130 --> 00:01:36,360
our use case I love talking to product

00:01:32,610 --> 00:01:37,680
owners I love talking to designers I

00:01:36,360 --> 00:01:40,430
love to tell them

00:01:37,680 --> 00:01:42,840
should we have models here should we

00:01:40,430 --> 00:01:46,310
have hidden inputs should we be

00:01:42,840 --> 00:01:49,259
forcefully opening things into new dams

00:01:46,310 --> 00:01:50,490
these things make me feel quite clever

00:01:49,259 --> 00:01:54,200
that make me feel like a master of

00:01:50,490 --> 00:01:54,200
minecraft make me feel like

00:01:56,900 --> 00:02:02,770
these things don't make me feel like

00:01:58,520 --> 00:02:02,770
muscles my grandma but us but you get

00:02:02,800 --> 00:02:10,220
alright forget about this let's do it

00:02:05,780 --> 00:02:12,320
live without notes hopeless right this

00:02:10,220 --> 00:02:15,710
guy is cool I'm not mad we'll get there

00:02:12,320 --> 00:02:18,410
alright so I love talking about

00:02:15,710 --> 00:02:21,350
implementation details it's great you

00:02:18,410 --> 00:02:22,190
know what I don't really like listening

00:02:21,350 --> 00:02:23,900
to other people talk about

00:02:22,190 --> 00:02:25,580
implementation details and not just

00:02:23,900 --> 00:02:27,470
because they boast their presentations

00:02:25,580 --> 00:02:27,890
and you know sorry sucks to be you I

00:02:27,470 --> 00:02:30,110
guess

00:02:27,890 --> 00:02:32,240
but now you've signed up for the AC came

00:02:30,110 --> 00:02:33,830
here to listen somebody talked about

00:02:32,240 --> 00:02:37,580
member implementation details but

00:02:33,830 --> 00:02:39,740
imagine this imagine you are working in

00:02:37,580 --> 00:02:42,200
a company you are part of one of two

00:02:39,740 --> 00:02:45,140
teams that work into two products and

00:02:42,200 --> 00:02:47,150
you are having a big early architecture

00:02:45,140 --> 00:02:51,280
meeting because those two teams need to

00:02:47,150 --> 00:02:54,170
work together one team is doing

00:02:51,280 --> 00:02:57,680
conversion product another thing is

00:02:54,170 --> 00:03:00,080
doing guest acquisition product and that

00:02:57,680 --> 00:03:02,780
meeting is how they'll work together to

00:03:00,080 --> 00:03:04,610
solve those two numbers attracted guests

00:03:02,780 --> 00:03:07,489
and converted guests into the same

00:03:04,610 --> 00:03:09,560
dashboard for your clients so that

00:03:07,489 --> 00:03:11,140
meeting you really don't want it to

00:03:09,560 --> 00:03:14,420
devolve into talking about

00:03:11,140 --> 00:03:17,420
implementation details you never want

00:03:14,420 --> 00:03:21,410
that and it's so easy to derail it into

00:03:17,420 --> 00:03:23,060
it being all about that why is it easy

00:03:21,410 --> 00:03:24,140
to drill into talking about

00:03:23,060 --> 00:03:26,420
implementation details

00:03:24,140 --> 00:03:28,280
well because implementation details are

00:03:26,420 --> 00:03:30,140
a bit like indulging yourself it doesn't

00:03:28,280 --> 00:03:32,810
make you feel clever when you go on and

00:03:30,140 --> 00:03:35,420
on about how your Postgres schema is the

00:03:32,810 --> 00:03:36,709
best how your RabbitMQ is pushing the

00:03:35,420 --> 00:03:40,250
events that are happening and you are

00:03:36,709 --> 00:03:43,130
subscribing like a pro but you should

00:03:40,250 --> 00:03:46,220
keep that meeting on the high level why

00:03:43,130 --> 00:03:49,040
are you even doing this what's the goal

00:03:46,220 --> 00:03:52,610
we have a design we want to show two

00:03:49,040 --> 00:03:55,760
things to numbers in one page all right

00:03:52,610 --> 00:03:58,549
so the UI is gonna need those numbers

00:03:55,760 --> 00:04:01,040
from somewhere so you create a service a

00:03:58,549 --> 00:04:03,709
service that you need to build how will

00:04:01,040 --> 00:04:06,139
that service get those numbers well one

00:04:03,709 --> 00:04:08,120
thing is putting their conversion stats

00:04:06,139 --> 00:04:08,860
in Postgres the other thing we put in

00:04:08,120 --> 00:04:11,980
there

00:04:08,860 --> 00:04:12,700
just acquisition stats in bigquery why

00:04:11,980 --> 00:04:14,800
bigquery

00:04:12,700 --> 00:04:17,709
why not Posterous look this thing was

00:04:14,800 --> 00:04:21,549
using phosphorus and putting all stuff

00:04:17,709 --> 00:04:23,140
in a business column and that's the

00:04:21,549 --> 00:04:24,460
point where you want to stop you just

00:04:23,140 --> 00:04:26,290
want to say zip it

00:04:24,460 --> 00:04:27,970
stop doing this stop getting into the

00:04:26,290 --> 00:04:30,580
implementation details we are all

00:04:27,970 --> 00:04:33,070
engineers here we know that we'll manage

00:04:30,580 --> 00:04:35,740
to get some things out of about database

00:04:33,070 --> 00:04:37,390
no matter if it's bigquery and the one

00:04:35,740 --> 00:04:41,530
rule about my queries never create

00:04:37,390 --> 00:04:44,020
McCrea or not hey we'll manage the high

00:04:41,530 --> 00:04:45,400
level is we have these two teams here we

00:04:44,020 --> 00:04:46,840
have these engineers who is going to

00:04:45,400 --> 00:04:49,060
work on what who's going to own the UI

00:04:46,840 --> 00:04:51,520
who's going to know own the service that

00:04:49,060 --> 00:04:53,380
spins up that should be the outcome of

00:04:51,520 --> 00:04:56,710
that meeting at that point if you start

00:04:53,380 --> 00:04:59,290
going on about your mastery of Posterous

00:04:56,710 --> 00:05:01,570
it's kind of like making jokes about

00:04:59,290 --> 00:05:03,670
current events or pop culture or film

00:05:01,570 --> 00:05:05,530
series it's kind of like saying we kind

00:05:03,670 --> 00:05:08,530
of forgot about metrics and then going

00:05:05,530 --> 00:05:10,270
on and on on a tirade about how that

00:05:08,530 --> 00:05:12,460
episode of Game of Thrones wasn't really

00:05:10,270 --> 00:05:14,230
great but do you want the outcome of the

00:05:12,460 --> 00:05:17,110
meeting to be well they bought the last

00:05:14,230 --> 00:05:18,669
season No and similarly you don't want

00:05:17,110 --> 00:05:20,770
the outcome of the meeting to be Oh

00:05:18,669 --> 00:05:23,470
Postgres is awesome and is

00:05:20,770 --> 00:05:24,820
terrible that's not what you want what

00:05:23,470 --> 00:05:26,860
you want is to go out of that meeting

00:05:24,820 --> 00:05:29,260
with your engineers knowing this is what

00:05:26,860 --> 00:05:32,890
I'm gonna do next we know we're on it

00:05:29,260 --> 00:05:35,560
we're gonna deliver so I love talking

00:05:32,890 --> 00:05:37,090
about my destiny bills I don't like

00:05:35,560 --> 00:05:38,800
hearing other people talk about

00:05:37,090 --> 00:05:41,730
implementation details especially on

00:05:38,800 --> 00:05:45,940
such meetings but you know what I hate

00:05:41,730 --> 00:05:48,460
testing implementation details now this

00:05:45,940 --> 00:05:50,710
is a JavaScript and engineering

00:05:48,460 --> 00:05:54,190
conference so we'll literally see some

00:05:50,710 --> 00:05:56,410
code and see how we use JavaScript to

00:05:54,190 --> 00:05:58,660
drive implementation details and tests

00:05:56,410 --> 00:06:01,419
that focus on the implementation details

00:05:58,660 --> 00:06:03,700
but believe me I hate all forms of this

00:06:01,419 --> 00:06:08,020
it's like you have the product owner

00:06:03,700 --> 00:06:10,380
telling you please test that this button

00:06:08,020 --> 00:06:13,330
is read a hundred percent of the time

00:06:10,380 --> 00:06:14,860
that's easy to do so maybe you feel good

00:06:13,330 --> 00:06:16,720
about delivering a ticket fast but

00:06:14,860 --> 00:06:18,100
what's the point there you don't really

00:06:16,720 --> 00:06:19,960
want to do easy things you want to do

00:06:18,100 --> 00:06:21,370
meaningful things maybe it's harder to

00:06:19,960 --> 00:06:23,980
track what's the click-through of

00:06:21,370 --> 00:06:26,500
or what's the conversion but that's the

00:06:23,980 --> 00:06:28,750
actual valuable thing try to focus on

00:06:26,500 --> 00:06:30,280
the things that are valuable try to

00:06:28,750 --> 00:06:32,160
focus on the things that you want to

00:06:30,280 --> 00:06:34,630
show you don't want to spend your test

00:06:32,160 --> 00:06:36,910
testing things that are meaningless if

00:06:34,630 --> 00:06:39,910
the color is the button red and it might

00:06:36,910 --> 00:06:41,949
feel silly are we ever testing such

00:06:39,910 --> 00:06:44,590
things as is this button red or not and

00:06:41,949 --> 00:06:49,419
you'll be surprised my argument is that

00:06:44,590 --> 00:06:52,120
yes we do so let's rephrase the problem

00:06:49,419 --> 00:06:55,090
you are an engineer so you're a problem

00:06:52,120 --> 00:06:58,270
solver you love to solve problems and

00:06:55,090 --> 00:07:00,729
you're paid to do it using code you're

00:06:58,270 --> 00:07:03,729
also well let's face it

00:07:00,729 --> 00:07:05,169
a lazy engineer because when you solve

00:07:03,729 --> 00:07:07,600
the problems with code you don't want to

00:07:05,169 --> 00:07:10,150
manually test does this still work and

00:07:07,600 --> 00:07:11,740
did they solve the problem and you want

00:07:10,150 --> 00:07:13,660
to be confident that you solve the

00:07:11,740 --> 00:07:17,289
problem forever and something to tell

00:07:13,660 --> 00:07:20,889
you it automatically and you're also an

00:07:17,289 --> 00:07:24,850
engineer that wants to refactor their

00:07:20,889 --> 00:07:26,919
code often an extended because last week

00:07:24,850 --> 00:07:30,370
code is terrible and the one you're

00:07:26,919 --> 00:07:31,229
about to write is genius so how do you

00:07:30,370 --> 00:07:34,110
solve this problem

00:07:31,229 --> 00:07:37,120
one good way is you write tests okay

00:07:34,110 --> 00:07:38,770
you're confident now that the problem

00:07:37,120 --> 00:07:41,680
you're trying to solve is all forever

00:07:38,770 --> 00:07:42,700
and we'll be solving the thing you're

00:07:41,680 --> 00:07:45,280
trying to solve

00:07:42,700 --> 00:07:47,200
rather more but every time those tests

00:07:45,280 --> 00:07:49,300
that you write are two coupled into deep

00:07:47,200 --> 00:07:51,669
limitation details you make your code

00:07:49,300 --> 00:07:55,150
harder to improve so you're defeating

00:07:51,669 --> 00:07:58,030
one of the basic things you wanted to

00:07:55,150 --> 00:08:00,789
solve you want to keep your code easily

00:07:58,030 --> 00:08:03,550
extendable and factorable so how do we

00:08:00,789 --> 00:08:05,169
end up into the situations where we've

00:08:03,550 --> 00:08:07,570
written tests that are two coupled into

00:08:05,169 --> 00:08:09,490
implementation details well consider

00:08:07,570 --> 00:08:11,770
this code let's say you're gonna join a

00:08:09,490 --> 00:08:14,770
new team let's say that thing is working

00:08:11,770 --> 00:08:16,450
on a sub product and you do some code

00:08:14,770 --> 00:08:19,060
archaeology before the first big meeting

00:08:16,450 --> 00:08:21,880
and you'll find this consider this code

00:08:19,060 --> 00:08:24,370
it's a helper method that gets some

00:08:21,880 --> 00:08:26,770
ferries gets all users who knows what

00:08:24,370 --> 00:08:29,440
that is and then it's people filters

00:08:26,770 --> 00:08:31,419
through all the users to keep your

00:08:29,440 --> 00:08:34,060
friends and those that are online now

00:08:31,419 --> 00:08:36,280
you've seen that script before so you

00:08:34,060 --> 00:08:38,140
that you are either reading through an

00:08:36,280 --> 00:08:40,510
array twice which is probably a

00:08:38,140 --> 00:08:42,880
performance hit you aren't quite sure

00:08:40,510 --> 00:08:45,130
because maybe like some compiler there

00:08:42,880 --> 00:08:47,260
is optimizing this out or there is some

00:08:45,130 --> 00:08:49,750
type script Matic who knows but you're

00:08:47,260 --> 00:08:52,600
pretty confident that looping twice is

00:08:49,750 --> 00:08:55,420
bad and that you can at least make this

00:08:52,600 --> 00:08:58,060
into one loop see what happens do you

00:08:55,420 --> 00:09:00,850
get any gains so from this you combine

00:08:58,060 --> 00:09:04,120
the two conditionals and are left with

00:09:00,850 --> 00:09:07,960
this just one filter circuits online

00:09:04,120 --> 00:09:10,390
check that that ID is one of the users

00:09:07,960 --> 00:09:12,280
friends seems simple enough you're

00:09:10,390 --> 00:09:15,460
excited to benchmark it see what happens

00:09:12,280 --> 00:09:18,700
but over at your terminal you see your

00:09:15,460 --> 00:09:20,590
tests the red you see a warning

00:09:18,700 --> 00:09:23,710
it says expected filter to be called

00:09:20,590 --> 00:09:27,460
twice so in a panic you go to the tests

00:09:23,710 --> 00:09:30,130
and you find this and you see that

00:09:27,460 --> 00:09:34,270
somebody was testing that filter was

00:09:30,130 --> 00:09:38,110
called exactly twice and then you go

00:09:34,270 --> 00:09:39,640
mental but of course you you might be

00:09:38,110 --> 00:09:43,150
thinking all right sunny

00:09:39,640 --> 00:09:46,210
that's ridiculous has anybody ever done

00:09:43,150 --> 00:09:49,690
this the answer is yes because I did it

00:09:46,210 --> 00:09:53,170
for this talk but outside of the talk

00:09:49,690 --> 00:09:55,240
mostly no I've recorded at large I'd say

00:09:53,170 --> 00:09:59,130
mostly no because this is if you

00:09:55,240 --> 00:10:01,930
remember the contrived example so

00:09:59,130 --> 00:10:03,670
defeated you are too scared to refactor

00:10:01,930 --> 00:10:06,670
this because who knows maybe the person

00:10:03,670 --> 00:10:08,920
that decided to do this that madman had

00:10:06,670 --> 00:10:11,260
some reason to check that you're doing

00:10:08,920 --> 00:10:13,630
this exactly twice so you revert your

00:10:11,260 --> 00:10:15,700
chains and you continue your code

00:10:13,630 --> 00:10:20,110
archaeology and moving up you find

00:10:15,700 --> 00:10:22,600
something very very big you see that at

00:10:20,110 --> 00:10:25,780
the point where that method was called

00:10:22,600 --> 00:10:27,970
all right before you see that you are

00:10:25,780 --> 00:10:31,900
literally giving it all the users in

00:10:27,970 --> 00:10:34,420
your database and you see database

00:10:31,900 --> 00:10:36,550
before anything that's kind of bad never

00:10:34,420 --> 00:10:39,190
mind looping through an array once or

00:10:36,550 --> 00:10:40,540
twice or three times you can not look

00:10:39,190 --> 00:10:42,160
through it at all you can have a

00:10:40,540 --> 00:10:44,860
database query that gets all the users

00:10:42,160 --> 00:10:46,740
you need straight away amazing so what

00:10:44,860 --> 00:10:50,800
do you do you refactor

00:10:46,740 --> 00:10:52,990
so you are the wearing to keep on the

00:10:50,800 --> 00:10:56,140
people that are inside that array of

00:10:52,990 --> 00:10:58,440
friendlies you are simply where to say

00:10:56,140 --> 00:11:00,540
that online is true and then of course

00:10:58,440 --> 00:11:04,480
before you try to benchmark and

00:11:00,540 --> 00:11:06,400
celebrate you get this wearing it's not

00:11:04,480 --> 00:11:09,220
a function and you look at your tests

00:11:06,400 --> 00:11:11,350
again and you see that somebody smoked

00:11:09,220 --> 00:11:13,570
the littlenecks adapter that you're

00:11:11,350 --> 00:11:16,000
using to connect to the database and now

00:11:13,570 --> 00:11:19,290
only the saw hand to see has anybody

00:11:16,000 --> 00:11:22,900
here mocked their database adapter

00:11:19,290 --> 00:11:24,610
apparently no one which is great there's

00:11:22,900 --> 00:11:28,660
a few people but I'm not here to judge

00:11:24,610 --> 00:11:30,910
clearly have done this before and I

00:11:28,660 --> 00:11:32,770
wanted to use this slide the success

00:11:30,910 --> 00:11:35,320
light because I was confident that most

00:11:32,770 --> 00:11:40,330
of people has experienced this but sadly

00:11:35,320 --> 00:11:44,710
now you're all Saints but still that is

00:11:40,330 --> 00:11:46,870
good and because this is not the talk to

00:11:44,710 --> 00:11:50,320
talk to you about don't do mocks like

00:11:46,870 --> 00:11:51,820
this try to use users stores try to use

00:11:50,320 --> 00:11:52,360
time script and interfaces and stuff

00:11:51,820 --> 00:11:54,250
like that

00:11:52,360 --> 00:11:57,250
this is not it so we can just straight

00:11:54,250 --> 00:11:59,950
on skip down and go back into the actual

00:11:57,250 --> 00:12:02,200
talk which is implementation details so

00:11:59,950 --> 00:12:03,760
what are they so after your code

00:12:02,200 --> 00:12:06,070
archeology experiment which didn't go

00:12:03,760 --> 00:12:10,300
that well you go into that meeting and

00:12:06,070 --> 00:12:12,070
what you'll build next it seems is user

00:12:10,300 --> 00:12:13,840
name creator

00:12:12,070 --> 00:12:15,940
you're gonna allow your users to create

00:12:13,840 --> 00:12:18,160
user names so you see some designs you

00:12:15,940 --> 00:12:20,260
have these little forms are quite simple

00:12:18,160 --> 00:12:22,840
they give you some initial states to

00:12:20,260 --> 00:12:24,340
start with it looks like this then if

00:12:22,840 --> 00:12:27,490
there is an error if the user name is

00:12:24,340 --> 00:12:28,960
too short then it looks like this and if

00:12:27,490 --> 00:12:31,500
it's successful then it looks like this

00:12:28,960 --> 00:12:35,710
great what are the things here that are

00:12:31,500 --> 00:12:39,370
implementation details well could be

00:12:35,710 --> 00:12:41,410
many things it could be the button if

00:12:39,370 --> 00:12:43,510
you hover it the designer didn't cuts

00:12:41,410 --> 00:12:45,520
not is it gonna have a shadow is it not

00:12:43,510 --> 00:12:49,570
have a bigger shadow not a hover say

00:12:45,520 --> 00:12:52,120
it's good bad who knows what is gonna be

00:12:49,570 --> 00:12:53,620
the threshold of three characters maybe

00:12:52,120 --> 00:12:56,920
not enough for characters not enough

00:12:53,620 --> 00:13:00,100
five characters on maybe that's great

00:12:56,920 --> 00:13:03,579
what's what's it gonna be when should

00:13:00,100 --> 00:13:07,239
the forum validate onblur or as you type

00:13:03,579 --> 00:13:09,879
maybe as you type after you first learn

00:13:07,239 --> 00:13:12,369
there are so many things but let's

00:13:09,879 --> 00:13:14,879
consider this what if even the forum

00:13:12,369 --> 00:13:18,069
itself is an implementation detail

00:13:14,879 --> 00:13:20,980
because your goal isn't I want to show

00:13:18,069 --> 00:13:25,029
my user a forum that's never the goal

00:13:20,980 --> 00:13:27,999
the goal might be for example allow

00:13:25,029 --> 00:13:30,970
users to pick a username and for that

00:13:27,999 --> 00:13:33,129
goal you've figured that I'm gonna put a

00:13:30,970 --> 00:13:34,179
forum there and I'm gonna make them go

00:13:33,129 --> 00:13:36,069
through it and then it'll be able to

00:13:34,179 --> 00:13:38,889
pick a username that might be a valid

00:13:36,069 --> 00:13:40,929
goal maybe you've heard that users say

00:13:38,889 --> 00:13:44,049
your app is unprofessional because there

00:13:40,929 --> 00:13:45,819
is no way to pick a username but does

00:13:44,049 --> 00:13:48,549
that really happen nowadays you need

00:13:45,819 --> 00:13:50,649
usernames maybe not maybe the actual

00:13:48,549 --> 00:13:52,929
goal is allow users to be identifiable

00:13:50,649 --> 00:13:54,929
without using their names because you

00:13:52,929 --> 00:13:57,129
found that in your chat product it was

00:13:54,929 --> 00:13:59,259
lots of people were uncomfortable when

00:13:57,129 --> 00:14:02,499
their full name appear maybe you wanted

00:13:59,259 --> 00:14:04,779
to do at mentions mainly maybe maybe so

00:14:02,499 --> 00:14:07,629
many things all valid all valid goals

00:14:04,779 --> 00:14:09,879
but the question is which one was it

00:14:07,629 --> 00:14:13,779
as an engineer I think you are as

00:14:09,879 --> 00:14:16,269
responsible to find out what the goal is

00:14:13,779 --> 00:14:19,209
what the thing you're trying to solve is

00:14:16,269 --> 00:14:22,660
just as much as actually delivering the

00:14:19,209 --> 00:14:24,910
solution that you decided upon so make

00:14:22,660 --> 00:14:26,949
sure to check make sure to find out what

00:14:24,910 --> 00:14:29,410
the goal is there is no right or wrong

00:14:26,949 --> 00:14:31,299
goal but you should be challenging and

00:14:29,410 --> 00:14:34,149
finding out how are we solving for our

00:14:31,299 --> 00:14:36,189
own for the right thing or the road the

00:14:34,149 --> 00:14:38,319
thing or just because somebody put in a

00:14:36,189 --> 00:14:40,209
nice picture of a forum somewhere

00:14:38,319 --> 00:14:46,509
it's just when the candidate implemented

00:14:40,209 --> 00:14:49,899
it so you have a forum and as a

00:14:46,509 --> 00:14:52,869
prototype you implemented it in two ways

00:14:49,899 --> 00:14:56,169
maybe to impress your new team one of

00:14:52,869 --> 00:15:00,339
them both of them use react one of them

00:14:56,169 --> 00:15:04,209
uses old school class state one of them

00:15:00,339 --> 00:15:06,669
uses new school hot react hooks can you

00:15:04,209 --> 00:15:09,290
tell if it's the one on the left or the

00:15:06,669 --> 00:15:21,050
one on the right

00:15:09,290 --> 00:15:22,550
so so left a bit deviated a bit from the

00:15:21,050 --> 00:15:25,100
implementation because instead of a

00:15:22,550 --> 00:15:28,730
clean button put here a button that will

00:15:25,100 --> 00:15:29,480
reveal the type of the component as soon

00:15:28,730 --> 00:15:32,600
as I press it

00:15:29,480 --> 00:15:34,640
who who think one is a function

00:15:32,600 --> 00:15:36,770
component one is a class component who

00:15:34,640 --> 00:15:40,240
think that this is going to say function

00:15:36,770 --> 00:15:41,450
when I click the button so yeah it is a

00:15:40,240 --> 00:15:45,080
function

00:15:41,450 --> 00:15:46,370
yeah I've also had 50% sense but I'm

00:15:45,080 --> 00:15:50,690
afraid that's incorrect

00:15:46,370 --> 00:15:52,160
they're both functions but they're

00:15:50,690 --> 00:15:53,630
actually one of them is client they

00:15:52,160 --> 00:15:56,150
didn't lie to you one of them is a class

00:15:53,630 --> 00:15:57,800
component the other is a functional

00:15:56,150 --> 00:16:01,030
component but you see how JavaScript

00:15:57,800 --> 00:16:05,630
works type of doesn't discriminate so

00:16:01,030 --> 00:16:07,760
why so do your test class it's just

00:16:05,630 --> 00:16:09,920
syntactic sugar for functions in the end

00:16:07,760 --> 00:16:11,330
right so it doesn't really matter in

00:16:09,920 --> 00:16:13,160
JavaScript it doesn't really matter to

00:16:11,330 --> 00:16:13,550
react it's gonna work the same either

00:16:13,160 --> 00:16:16,880
way

00:16:13,550 --> 00:16:19,490
but in our tests we very often find that

00:16:16,880 --> 00:16:22,280
it does matter your tests would break if

00:16:19,490 --> 00:16:25,940
you were to refactor a old class

00:16:22,280 --> 00:16:30,230
component into a new folks component why

00:16:25,940 --> 00:16:31,850
is that well there are some frameworks

00:16:30,230 --> 00:16:33,920
that make testing implementation details

00:16:31,850 --> 00:16:37,160
too easy and I have written two tests

00:16:33,920 --> 00:16:39,080
two sets of tests for this and one of

00:16:37,160 --> 00:16:43,160
them will work for either component one

00:16:39,080 --> 00:16:45,920
of them will break and it's not that the

00:16:43,160 --> 00:16:47,960
one I'm gonna show that framework is bad

00:16:45,920 --> 00:16:50,150
it's not that you can't write better

00:16:47,960 --> 00:16:52,640
tests with it but I do you think I do

00:16:50,150 --> 00:16:54,620
have an opinion on this I do think it

00:16:52,640 --> 00:16:57,290
makes it a bit too easy to test their

00:16:54,620 --> 00:16:59,780
own things so you might be familiar with

00:16:57,290 --> 00:17:01,490
enzyme airbnb are great people they've

00:16:59,780 --> 00:17:04,699
done more good for JavaScript and I

00:17:01,490 --> 00:17:06,920
that's for sure but I do think enzyme

00:17:04,699 --> 00:17:10,160
makes it a bit too easy to get into the

00:17:06,920 --> 00:17:12,050
implementation details so this test is

00:17:10,160 --> 00:17:14,810
it comprehensible if you haven't seen

00:17:12,050 --> 00:17:16,339
anything before if you haven't seen how

00:17:14,810 --> 00:17:18,380
does this you're setting some state

00:17:16,339 --> 00:17:20,810
you're taking if some probably success

00:17:18,380 --> 00:17:22,440
that means nothing to the user that

00:17:20,810 --> 00:17:24,900
means nothing to the browser

00:17:22,440 --> 00:17:27,590
why should it mean something to you why

00:17:24,900 --> 00:17:29,940
is it such a highlight in your tests and

00:17:27,590 --> 00:17:31,950
because it means nothing to the user or

00:17:29,940 --> 00:17:33,660
the browser it's why this is a brittle

00:17:31,950 --> 00:17:35,880
test that will break if you're trying to

00:17:33,660 --> 00:17:38,010
refactor even if the functionality is

00:17:35,880 --> 00:17:41,850
the same or even if you've got some bug

00:17:38,010 --> 00:17:43,440
of made a performance improvement on the

00:17:41,850 --> 00:17:45,470
other hand there are frameworks that

00:17:43,440 --> 00:17:49,890
help you avoid implementation details

00:17:45,470 --> 00:17:53,100
one of them is testing library by

00:17:49,890 --> 00:17:54,510
Tennessee dots Kent sometimes I agree

00:17:53,100 --> 00:17:57,060
with him sometimes I really disagree

00:17:54,510 --> 00:17:59,370
with him but he's also person that's on

00:17:57,060 --> 00:18:02,010
quite a lot of quite a lot for

00:17:59,370 --> 00:18:05,280
JavaScript and testing in particular and

00:18:02,010 --> 00:18:07,620
I did initially this means this latest

00:18:05,280 --> 00:18:10,410
never testing library just because it

00:18:07,620 --> 00:18:12,300
did had a tag line that's a bit too

00:18:10,410 --> 00:18:15,420
cocky like how encourage good testing

00:18:12,300 --> 00:18:16,620
practices that's a bit much but tell you

00:18:15,420 --> 00:18:19,290
what Kent you're right

00:18:16,620 --> 00:18:21,090
this library does encourage good testing

00:18:19,290 --> 00:18:23,310
practices I'm doing a talk today about

00:18:21,090 --> 00:18:25,440
avoiding implementation details at some

00:18:23,310 --> 00:18:27,270
points and I am going to use this

00:18:25,440 --> 00:18:30,000
library as an example because it does

00:18:27,270 --> 00:18:32,340
help I was when I was kind of burnt out

00:18:30,000 --> 00:18:35,280
with enzyme as good as this because I

00:18:32,340 --> 00:18:38,460
wanted to use hooks I did resort into

00:18:35,280 --> 00:18:41,910
using my own not my own using straight

00:18:38,460 --> 00:18:44,360
react render and being a hundred percent

00:18:41,910 --> 00:18:47,550
confident ah this is working for reals

00:18:44,360 --> 00:18:48,660
and then a colleague told me ah you're

00:18:47,550 --> 00:18:50,430
doing the same thing that testing

00:18:48,660 --> 00:18:54,000
libraries doing only worse because

00:18:50,430 --> 00:18:59,160
testing library is also giving you a few

00:18:54,000 --> 00:19:02,610
nice little selectors play with that are

00:18:59,160 --> 00:19:07,260
also ordered in by order of preference

00:19:02,610 --> 00:19:08,850
of less of less brittleness or more as

00:19:07,260 --> 00:19:10,050
soon as that you're not testing them

00:19:08,850 --> 00:19:13,610
there's an details if that makes sense

00:19:10,050 --> 00:19:17,280
you are supposed to write your tests now

00:19:13,610 --> 00:19:20,340
in a way that you'd be talking to a QA

00:19:17,280 --> 00:19:22,770
tester and say find this little label

00:19:20,340 --> 00:19:25,560
and then put something there and then

00:19:22,770 --> 00:19:28,650
find the submit and then click that and

00:19:25,560 --> 00:19:31,530
by trying to use this query selectors in

00:19:28,650 --> 00:19:34,820
that order it will ensure that your

00:19:31,530 --> 00:19:36,590
tests are more resilient

00:19:34,820 --> 00:19:38,809
to break heads if you just since

00:19:36,590 --> 00:19:40,549
implementation details so you'd not just

00:19:38,809 --> 00:19:42,769
a test ID is there for example but it's

00:19:40,549 --> 00:19:44,360
dead last and something like last name

00:19:42,769 --> 00:19:47,720
it's not even there it's kind of hard to

00:19:44,360 --> 00:19:49,269
do hey they don't they purposely not

00:19:47,720 --> 00:19:52,190
expose it in the library

00:19:49,269 --> 00:19:54,200
another tool to use that I've used

00:19:52,190 --> 00:19:56,720
successfully and that it can also take

00:19:54,200 --> 00:19:59,809
an adapter an extension to use testing

00:19:56,720 --> 00:20:02,360
library selectors his Cypress which

00:19:59,809 --> 00:20:04,850
gives you some UI which always looks

00:20:02,360 --> 00:20:06,529
cool allows you to take snapshots and go

00:20:04,850 --> 00:20:09,860
back in time to see exactly what was

00:20:06,529 --> 00:20:12,799
wrong and runs on a real browser on real

00:20:09,860 --> 00:20:15,980
chrome so you are more confident that

00:20:12,799 --> 00:20:18,860
this works for us it has limitations for

00:20:15,980 --> 00:20:21,919
example you can do slider still and I'm

00:20:18,860 --> 00:20:24,850
not that keen on using mocha inside

00:20:21,919 --> 00:20:29,210
which was kinda old school now yes and

00:20:24,850 --> 00:20:31,309
overtaken by this but still it is

00:20:29,210 --> 00:20:36,919
something to consider especially if you

00:20:31,309 --> 00:20:39,200
want to do more end-to-end tests and the

00:20:36,919 --> 00:20:41,990
problem with Cypress is that it does

00:20:39,200 --> 00:20:44,779
take a bit of time to spin up so for the

00:20:41,990 --> 00:20:46,370
examples today I am gonna rewrite this

00:20:44,779 --> 00:20:48,470
I'm gonna show you the tests really tend

00:20:46,370 --> 00:20:50,360
to use testing library instead so they

00:20:48,470 --> 00:20:53,269
look like this and they will do look

00:20:50,360 --> 00:20:55,700
like something that would be the same or

00:20:53,269 --> 00:20:58,940
kind of same paraphrasing to your QA

00:20:55,700 --> 00:21:02,480
person find this with a label of

00:20:58,940 --> 00:21:05,269
username click it type something there

00:21:02,480 --> 00:21:06,860
about and then expect to find some

00:21:05,269 --> 00:21:08,750
indication that this is too short and

00:21:06,860 --> 00:21:10,129
put something longer and then expect to

00:21:08,750 --> 00:21:13,820
find something with an indication that

00:21:10,129 --> 00:21:15,409
it's good you can claim it get in and I

00:21:13,820 --> 00:21:16,879
do think this is more a table and the

00:21:15,409 --> 00:21:19,100
beauty of it is not just that it's

00:21:16,879 --> 00:21:21,379
suitable is that it can work with a

00:21:19,100 --> 00:21:23,720
class component hooks component anything

00:21:21,379 --> 00:21:27,649
maybe even a view component who knows

00:21:23,720 --> 00:21:29,870
we'll talk about that later so you've

00:21:27,649 --> 00:21:32,059
done this and then you feature creep

00:21:29,870 --> 00:21:35,960
something in because you realize you

00:21:32,059 --> 00:21:37,669
don't want to have the users say

00:21:35,960 --> 00:21:39,500
username you want user names to be

00:21:37,669 --> 00:21:43,309
unique because you discovered before

00:21:39,500 --> 00:21:46,250
that the goal today is to have your

00:21:43,309 --> 00:21:48,590
users be easily identifiable in a more

00:21:46,250 --> 00:21:50,840
discreet way so you get some new designs

00:21:48,590 --> 00:21:53,690
you have some new states you have their

00:21:50,840 --> 00:21:56,210
takin availability stake state you have

00:21:53,690 --> 00:21:59,179
the oh it's not available and still

00:21:56,210 --> 00:22:00,740
there it is available claiming how would

00:21:59,179 --> 00:22:03,380
you rewrite your test to account for

00:22:00,740 --> 00:22:06,350
this a synchronicity it would look like

00:22:03,380 --> 00:22:08,470
this it's kind of similar it just has

00:22:06,350 --> 00:22:13,549
some a weight and a sink on the

00:22:08,470 --> 00:22:16,039
enclosing function and I do think it's

00:22:13,549 --> 00:22:17,510
not crazy at all it's actually quite

00:22:16,039 --> 00:22:20,000
readable it is still something that

00:22:17,510 --> 00:22:22,880
you'd say to your equipped a person but

00:22:20,000 --> 00:22:24,860
out how does this pass why is this

00:22:22,880 --> 00:22:27,230
screen how does it know that first time

00:22:24,860 --> 00:22:30,110
they Tama grip is username it's taken

00:22:27,230 --> 00:22:31,279
and not similar this is not it doesn't

00:22:30,110 --> 00:22:33,049
know me but that's don't know me

00:22:31,279 --> 00:22:35,179
personally so how does it do that

00:22:33,049 --> 00:22:36,890
well if you look up you'll see that

00:22:35,179 --> 00:22:39,470
you'll bring in fat milk and then you're

00:22:36,890 --> 00:22:41,570
feeding in some mocks to say if you hit

00:22:39,470 --> 00:22:43,730
and look for same Agrippa's you get a

00:22:41,570 --> 00:22:45,409
two hundred because it exists if you hit

00:22:43,730 --> 00:22:47,450
for not same agree basis you get a 404

00:22:45,409 --> 00:22:51,289
because it doesn't and before you get

00:22:47,450 --> 00:22:53,570
too upset I know that's like didn't we

00:22:51,289 --> 00:22:56,480
say that mocks are bad but this isn't

00:22:53,570 --> 00:22:58,340
the mocks are bad talk it's not

00:22:56,480 --> 00:23:01,130
necessarily bad to me mocking things and

00:22:58,340 --> 00:23:03,470
using something like fat smoke which at

00:23:01,130 --> 00:23:05,390
least is maintained by other people by

00:23:03,470 --> 00:23:07,549
the community and it's used in many

00:23:05,390 --> 00:23:11,529
projects it's better than you making up

00:23:07,549 --> 00:23:14,299
some mocks by yourself but still

00:23:11,529 --> 00:23:17,149
sometimes you do need to make a stand

00:23:14,299 --> 00:23:19,370
and understand what are we working and

00:23:17,149 --> 00:23:21,140
should we mocking so we should we be

00:23:19,370 --> 00:23:23,029
mocking what are the abstractions that

00:23:21,140 --> 00:23:25,340
we want to do you don't want to keep

00:23:23,029 --> 00:23:28,730
everything your tests abstract just to

00:23:25,340 --> 00:23:30,409
make your life harder if in the in your

00:23:28,730 --> 00:23:31,940
company you learnt gonna use react you

00:23:30,409 --> 00:23:34,039
don't need to abstract away and be able

00:23:31,940 --> 00:23:36,620
to accommodate even using vanilla tas

00:23:34,039 --> 00:23:39,710
review if in your company you are going

00:23:36,620 --> 00:23:41,570
to be fetching things using fats then

00:23:39,710 --> 00:23:43,370
maybe you don't need to accommodate for

00:23:41,570 --> 00:23:49,130
exodus you don't need to accommodate for

00:23:43,370 --> 00:23:51,049
graph UL but that is something to come

00:23:49,130 --> 00:23:53,720
to a conclusion with your other fellow

00:23:51,049 --> 00:23:55,429
experts that's when you want to focus to

00:23:53,720 --> 00:23:58,700
them limitation details you need to

00:23:55,429 --> 00:24:00,679
decide with your peers and say alright

00:23:58,700 --> 00:24:02,419
we're going to go full graph you on this

00:24:00,679 --> 00:24:04,700
so don't need to abstract

00:24:02,419 --> 00:24:07,340
way oh we want to be flexible maybe we

00:24:04,700 --> 00:24:08,769
want to play around with both fats and

00:24:07,340 --> 00:24:10,999
graph you well and see if we have the

00:24:08,769 --> 00:24:13,249
the benefits that we expect them and

00:24:10,999 --> 00:24:16,399
maybe switch over so just to finish up

00:24:13,249 --> 00:24:22,759
on some more code on how would you go

00:24:16,399 --> 00:24:25,190
about doing this one suggestion is you

00:24:22,759 --> 00:24:30,980
could be rewriting the testing library

00:24:25,190 --> 00:24:32,539
render or relax render into taking in

00:24:30,980 --> 00:24:35,200
the component that you want to render

00:24:32,539 --> 00:24:38,029
the UI but putting them into inside

00:24:35,200 --> 00:24:39,799
Apollo's provider that's craftwell or it

00:24:38,029 --> 00:24:43,070
could be like your face provider or

00:24:39,799 --> 00:24:45,889
whatever so in the tests how would this

00:24:43,070 --> 00:24:47,600
look you would just be rendering as

00:24:45,889 --> 00:24:49,639
before and giving it an optional

00:24:47,600 --> 00:24:51,379
variable that has all the marks that you

00:24:49,639 --> 00:24:54,529
want to store so that's the variable

00:24:51,379 --> 00:24:57,080
that we would have that for this URL you

00:24:54,529 --> 00:24:59,389
get a 200 for this URL you get a 404 or

00:24:57,080 --> 00:25:01,669
in the case of car fuel for this way

00:24:59,389 --> 00:25:04,279
with this parameter you do get a result

00:25:01,669 --> 00:25:07,789
or you get no on the other one this kind

00:25:04,279 --> 00:25:09,710
of sucks away what exactly is happening

00:25:07,789 --> 00:25:11,720
behind the scenes diplomat - in detail

00:25:09,710 --> 00:25:13,970
and keeps it in one file because we'll

00:25:11,720 --> 00:25:16,700
be keeping this bug into a test utils

00:25:13,970 --> 00:25:17,960
folder and always be using it if there

00:25:16,700 --> 00:25:19,730
is a component that doesn't need to know

00:25:17,960 --> 00:25:21,859
doesn't need to fetch things knows and

00:25:19,730 --> 00:25:24,350
doesn't need to connect with your Apollo

00:25:21,859 --> 00:25:25,460
client your graphical client then you

00:25:24,350 --> 00:25:28,220
don't need to pass the second variable

00:25:25,460 --> 00:25:29,059
and your none the wiser if you want to

00:25:28,220 --> 00:25:31,940
be super flexible

00:25:29,059 --> 00:25:34,669
you could explicitly say that this

00:25:31,940 --> 00:25:36,769
expects Apollo mocks or fetch mocks and

00:25:34,669 --> 00:25:38,470
use them accordingly and if you type it

00:25:36,769 --> 00:25:40,039
then you have a better understanding of

00:25:38,470 --> 00:25:45,350
how to use it

00:25:40,039 --> 00:25:47,809
but that's another thing the idea of

00:25:45,350 --> 00:25:50,539
this is keep your implementation details

00:25:47,809 --> 00:25:52,460
as far out as you of your test as

00:25:50,539 --> 00:25:56,029
possible if you have to make some

00:25:52,460 --> 00:26:00,259
decisions on implementation details keep

00:25:56,029 --> 00:26:02,539
them contained at least in one file so

00:26:00,259 --> 00:26:04,249
implementation details they can delight

00:26:02,539 --> 00:26:06,320
or they can frustrate your users they

00:26:04,249 --> 00:26:08,779
can for sale your team but only if users

00:26:06,320 --> 00:26:11,419
see them only if the team either it's

00:26:08,779 --> 00:26:14,899
further so if your form has the best

00:26:11,419 --> 00:26:15,800
index in the world then if nobody sees

00:26:14,899 --> 00:26:18,050
it

00:26:15,800 --> 00:26:19,940
that it's not gonna delight anyone it's

00:26:18,050 --> 00:26:23,330
not going to frustrate anyone if your

00:26:19,940 --> 00:26:25,280
queries take ten minutes to run and the

00:26:23,330 --> 00:26:28,790
server catches on fire afterwards when

00:26:25,280 --> 00:26:31,190
the user changes username twice in

00:26:28,790 --> 00:26:32,510
succession and nobody actually does this

00:26:31,190 --> 00:26:36,590
then it's not that big of a problem

00:26:32,510 --> 00:26:39,110
don't try to think too far ahead so try

00:26:36,590 --> 00:26:42,790
to get things out fast try to validate

00:26:39,110 --> 00:26:47,170
your propositions and see what happens

00:26:42,790 --> 00:26:49,820
however yeah this isn't the talk of

00:26:47,170 --> 00:26:52,010
let's just keep the scope in everything

00:26:49,820 --> 00:26:54,170
and only deliver MVPs because you can

00:26:52,010 --> 00:26:56,180
imagine how that situation happened

00:26:54,170 --> 00:27:00,170
where the user story is oh we're going

00:26:56,180 --> 00:27:02,000
to humanize somebody and also make them

00:27:00,170 --> 00:27:05,540
seem as an outsider so they'll have like

00:27:02,000 --> 00:27:08,780
a familiar drink in a while looking very

00:27:05,540 --> 00:27:11,450
secluded and somebody makes the familiar

00:27:08,780 --> 00:27:13,460
drink be a Starbucks cup well that's not

00:27:11,450 --> 00:27:15,170
gonna work and that's what might happen

00:27:13,460 --> 00:27:17,870
if you only care about the high level

00:27:15,170 --> 00:27:20,210
because technically it fulfills the user

00:27:17,870 --> 00:27:21,430
story but still you could have done

00:27:20,210 --> 00:27:24,440
better

00:27:21,430 --> 00:27:27,260
so implementation details be aware of

00:27:24,440 --> 00:27:28,430
them in silence do convene to do get

00:27:27,260 --> 00:27:30,050
into them in private

00:27:28,430 --> 00:27:33,140
especially specialists that's how you

00:27:30,050 --> 00:27:34,460
delete your users and only after you

00:27:33,140 --> 00:27:36,650
have an idea of the high level goals

00:27:34,460 --> 00:27:38,270
which you should always keep a mind of

00:27:36,650 --> 00:27:39,440
to keep asking and second do I really

00:27:38,270 --> 00:27:42,140
understand what I'm trying to deliver

00:27:39,440 --> 00:27:44,720
what I'm trying to solve and as little

00:27:42,140 --> 00:27:47,910
as possible in your deaths thank you

00:27:44,720 --> 00:27:52,619
very much questions

00:27:47,910 --> 00:27:52,619

YouTube URL: https://www.youtube.com/watch?v=kvoYe-Lo8EE


