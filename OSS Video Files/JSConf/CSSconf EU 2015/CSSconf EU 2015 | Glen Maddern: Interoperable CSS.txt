Title: CSSconf EU 2015 | Glen Maddern: Interoperable CSS
Publication date: 2015-09-26
Playlist: CSSconf EU 2015
Description: 
	There have been a lot of ideas and a lot of speculation about the future of CSS in the last year or so, largely driven by the ingenuity of the React community. Will we write styling code purely in JS? Will CSS continue to be useful? Will someone concoct some X-files-style JS+CSS alien-human hybrid language that takes over the world? It’s all possible (mostly).

This talk is about a new format for CSS, one that’s now supported by default in Webpack & JSPM, and available with plugins for Browserify. It’s called Interoperable CSS, and it hopes to do for CSS what CommonJS did for JavaScript.

Glen Maddern is an independent web developer from Melbourne, Australia. He also organizes CSSconf AU, and does rad web stuff.

http://2015.cssconf.eu/
Captions: 
	00:00:11,690 --> 00:00:18,619
all right hi everybody my name is Glen

00:00:14,180 --> 00:00:21,320
and I'm from Australia as basically half

00:00:18,619 --> 00:00:24,380
the people speaking today I think but

00:00:21,320 --> 00:00:25,970
I'm from Melbourne like Michael which is

00:00:24,380 --> 00:00:28,310
if you don't know it's like the most

00:00:25,970 --> 00:00:30,410
Berlin City of all of the places that

00:00:28,310 --> 00:00:34,250
aren't Berlin and it's fun you should

00:00:30,410 --> 00:00:36,110
come next year I'm gonna be talking

00:00:34,250 --> 00:00:38,120
about interoperable CSS which is a

00:00:36,110 --> 00:00:40,940
project I've been involved with for a

00:00:38,120 --> 00:00:44,770
little while but I'm gonna start with a

00:00:40,940 --> 00:00:48,200
bit of history a bit of background

00:00:44,770 --> 00:00:50,660
because if you know your stoic

00:00:48,200 --> 00:00:52,760
philosophy or have seen an episode of

00:00:50,660 --> 00:00:54,079
Battlestar Galactica you will know that

00:00:52,760 --> 00:00:58,430
everything has happened before

00:00:54,079 --> 00:01:00,289
and everything will happen again for our

00:00:58,430 --> 00:01:07,310
purposes everything happened in

00:01:00,289 --> 00:01:13,130
September 2008 which was a dark time 75%

00:01:07,310 --> 00:01:15,800
of the world was using ie 7 we were

00:01:13,130 --> 00:01:22,369
about here in the global financial

00:01:15,800 --> 00:01:23,810
crisis and we all know how that went but

00:01:22,369 --> 00:01:26,780
we're about here in Justin Bieber's

00:01:23,810 --> 00:01:34,569
career so I think on balance we're all

00:01:26,780 --> 00:01:34,569
happier I think thanks

00:01:34,729 --> 00:01:38,940
but specifically I wanna talk about

00:01:36,720 --> 00:01:42,000
JavaScript in 2008 because JavaScript in

00:01:38,940 --> 00:01:44,040
2008 looked like this it got the job

00:01:42,000 --> 00:01:45,570
done it's certain you know you can still

00:01:44,040 --> 00:01:48,360
write JavaScript like this many people

00:01:45,570 --> 00:01:49,650
do but what I want you to look at it

00:01:48,360 --> 00:01:51,869
critically and think about what it

00:01:49,650 --> 00:01:54,750
implies about JavaScript at that time I

00:01:51,869 --> 00:01:57,270
mean here we have window dot name space

00:01:54,750 --> 00:01:59,040
implying that ahead of this other stuff

00:01:57,270 --> 00:02:01,259
will have run and it will have started

00:01:59,040 --> 00:02:03,900
throwing stuff on namespace sorry on

00:02:01,259 --> 00:02:05,580
window and we don't necessarily know

00:02:03,900 --> 00:02:07,140
what's run in front of us we don't know

00:02:05,580 --> 00:02:08,910
what's running after it so we have to be

00:02:07,140 --> 00:02:11,190
very careful not to delete anyone else's

00:02:08,910 --> 00:02:15,239
stuff but to put our stuff somewhere

00:02:11,190 --> 00:02:16,739
someone can find it later the every

00:02:15,239 --> 00:02:18,330
piece of code that you write every piece

00:02:16,739 --> 00:02:21,690
of code every all of your dependencies

00:02:18,330 --> 00:02:24,750
all execute in this global soup and you

00:02:21,690 --> 00:02:28,769
just have to try and carve yourself off

00:02:24,750 --> 00:02:32,280
a little bit of room to work also in

00:02:28,769 --> 00:02:34,500
September 2008 Google released a comic

00:02:32,280 --> 00:02:36,660
book announcing that they had built a

00:02:34,500 --> 00:02:39,120
browser the comic book was basically to

00:02:36,660 --> 00:02:41,700
explain to the 75% of people using IE

00:02:39,120 --> 00:02:44,070
that browsers were a thing and you could

00:02:41,700 --> 00:02:48,239
choose another one so why didn't you

00:02:44,070 --> 00:02:50,880
choose Chrome with that they brought v8

00:02:48,239 --> 00:02:52,440
and v8 was a new engine it was much

00:02:50,880 --> 00:02:55,380
faster than any of the JavaScript

00:02:52,440 --> 00:02:58,890
engines around at the time and it sort

00:02:55,380 --> 00:03:00,959
of sped up a catalysed a movement that

00:02:58,890 --> 00:03:03,390
was already starting around this idea of

00:03:00,959 --> 00:03:08,220
running JavaScript on the server

00:03:03,390 --> 00:03:09,480
Kevin dangle back in January 2009 said

00:03:08,220 --> 00:03:11,940
that for server-side JavaScript to

00:03:09,480 --> 00:03:14,160
really catch on it needed some way to

00:03:11,940 --> 00:03:15,540
include other modules and for those

00:03:14,160 --> 00:03:17,970
modules every module to live in as

00:03:15,540 --> 00:03:19,680
discrete namespace now there are easy

00:03:17,970 --> 00:03:22,200
ways to do name spacing as I showed you

00:03:19,680 --> 00:03:24,390
with the window dot namespace technique

00:03:22,200 --> 00:03:28,560
but there's no standard programmatic way

00:03:24,390 --> 00:03:32,040
to load a module once he then went on to

00:03:28,560 --> 00:03:33,150
write in a wiki post saying that all of

00:03:32,040 --> 00:03:35,970
the attempts so far all of the

00:03:33,150 --> 00:03:38,310
server-side JavaScript frameworks were

00:03:35,970 --> 00:03:40,170
very fragmented if a script had to do

00:03:38,310 --> 00:03:44,459
something like access a file you

00:03:40,170 --> 00:03:45,959
couldn't use any engine to do that

00:03:44,459 --> 00:03:46,740
SpiderMonkey javascriptcore they

00:03:45,959 --> 00:03:50,850
couldn't load

00:03:46,740 --> 00:03:52,890
modules in in the same way so anything

00:03:50,850 --> 00:03:55,650
people were writing was very tied to the

00:03:52,890 --> 00:03:57,480
interpreter and they were often forced

00:03:55,650 --> 00:03:59,670
to create a bunch of api's that other

00:03:57,480 --> 00:04:01,590
programmers took for granted and to me

00:03:59,670 --> 00:04:03,930
that sounds a bit like what happens with

00:04:01,590 --> 00:04:06,240
CSS now something that's written for

00:04:03,930 --> 00:04:09,540
sass is not necessarily compatible with

00:04:06,240 --> 00:04:11,400
less something that's written for CSS

00:04:09,540 --> 00:04:14,670
next doesn't work with either of the

00:04:11,400 --> 00:04:17,489
others and each of those add things like

00:04:14,670 --> 00:04:19,290
variables and loops that every other

00:04:17,489 --> 00:04:22,130
program it takes for granted they're

00:04:19,290 --> 00:04:24,420
trying to put in to this language

00:04:22,130 --> 00:04:28,220
programming api's that should just be

00:04:24,420 --> 00:04:30,510
there chris cole who was also

00:04:28,220 --> 00:04:33,060
influential at the time wrote a blog

00:04:30,510 --> 00:04:35,220
post and said the year has begun with a

00:04:33,060 --> 00:04:37,230
combination of wonderous events i've

00:04:35,220 --> 00:04:38,790
been struggling to promote the idea of a

00:04:37,230 --> 00:04:40,530
module system in javascript for several

00:04:38,790 --> 00:04:42,270
years and there had been a sudden

00:04:40,530 --> 00:04:44,880
explosion of progress and i feel that

00:04:42,270 --> 00:04:46,590
way about CSS I think we can all sort of

00:04:44,880 --> 00:04:48,450
sense it that there's something changing

00:04:46,590 --> 00:04:49,470
about CSS at the moment we're not sure

00:04:48,450 --> 00:04:53,760
if we're gonna be still be doing it the

00:04:49,470 --> 00:04:56,700
same way in a couple of years of course

00:04:53,760 --> 00:04:58,350
Ryan doll at this point no js' started

00:04:56,700 --> 00:05:00,600
as a project building on top of v8 and

00:04:58,350 --> 00:05:01,920
that collective energy gave us commonjs

00:05:00,600 --> 00:05:05,850
the first time it was called jump

00:05:01,920 --> 00:05:07,260
commodious is july 2009 now node and

00:05:05,850 --> 00:05:08,850
colleges have kind of a complicated

00:05:07,260 --> 00:05:10,290
history where there were a bunch of

00:05:08,850 --> 00:05:11,850
different attempts at doing a module

00:05:10,290 --> 00:05:13,140
system in JavaScript come and jeff's

00:05:11,850 --> 00:05:15,600
wanted to do more on node kind of

00:05:13,140 --> 00:05:19,440
settled on a simple one and basically

00:05:15,600 --> 00:05:23,100
node one whatever node did was the

00:05:19,440 --> 00:05:26,550
standard and sub stack calls it command

00:05:23,100 --> 00:05:28,080
J esque which is just like a reduced

00:05:26,550 --> 00:05:32,880
version of comedy s and it's kind of

00:05:28,080 --> 00:05:35,190
what we all call comedy yesterday but I

00:05:32,880 --> 00:05:38,400
want you to think about the difference

00:05:35,190 --> 00:05:40,500
before and after this change because now

00:05:38,400 --> 00:05:42,900
instead of just assuming that our code

00:05:40,500 --> 00:05:45,420
ran before our code that our dependency

00:05:42,900 --> 00:05:47,610
ran before our dependency we can be

00:05:45,420 --> 00:05:48,960
explicit about it instead of just

00:05:47,610 --> 00:05:52,440
putting our code somewhere for other

00:05:48,960 --> 00:05:53,790
people to find it we export it but

00:05:52,440 --> 00:05:56,160
something in particular is that the

00:05:53,790 --> 00:05:58,290
words namespace widgets and food bar

00:05:56,160 --> 00:06:00,240
disappeared from this file they're in

00:05:58,290 --> 00:06:00,590
the file system we were able to move

00:06:00,240 --> 00:06:02,990
that in

00:06:00,590 --> 00:06:06,020
Meishan move that repetition into the

00:06:02,990 --> 00:06:09,110
file system and that'll kind of be

00:06:06,020 --> 00:06:13,490
important later I guess it's fair to say

00:06:09,110 --> 00:06:15,890
node was a success MPM came along a

00:06:13,490 --> 00:06:18,890
little bit later things kind of went

00:06:15,890 --> 00:06:21,620
bananas and I won't be thinking like I'm

00:06:18,890 --> 00:06:23,990
sure that's great like I'm sure this is

00:06:21,620 --> 00:06:26,600
all true about JavaScript but what does

00:06:23,990 --> 00:06:28,670
it have to do with CSS I mean CSS is not

00:06:26,600 --> 00:06:33,290
JavaScript styling code is not

00:06:28,670 --> 00:06:35,450
server-side code but again think

00:06:33,290 --> 00:06:37,730
critically about what changed think

00:06:35,450 --> 00:06:40,880
about the extension to the language I

00:06:37,730 --> 00:06:43,280
mean this line was valid before it just

00:06:40,880 --> 00:06:45,230
didn't do anything it's valid now and it

00:06:43,280 --> 00:06:47,360
has an entire module ecosystem built

00:06:45,230 --> 00:06:49,400
around it and all that changed was that

00:06:47,360 --> 00:06:53,000
there was convention added to this file

00:06:49,400 --> 00:06:54,920
that the language didn't change it was

00:06:53,000 --> 00:06:58,040
so powerful that it took this language

00:06:54,920 --> 00:06:59,960
that had a single global context and

00:06:58,040 --> 00:07:01,580
gave it multiple files which you

00:06:59,960 --> 00:07:02,990
couldn't do before and I had no

00:07:01,580 --> 00:07:04,910
mecha-suit mechanism for sharing code

00:07:02,990 --> 00:07:08,660
except by throwing things on a global

00:07:04,910 --> 00:07:15,140
object and now it has 175 thousand

00:07:08,660 --> 00:07:17,660
packages on NPM and what makes that

00:07:15,140 --> 00:07:20,270
really relevant to us is then in 2011

00:07:17,660 --> 00:07:21,920
browserify came along and said you can

00:07:20,270 --> 00:07:24,140
use that mental model you can use that

00:07:21,920 --> 00:07:25,850
filesystem based approach in the browser

00:07:24,140 --> 00:07:27,680
even though the browser doesn't support

00:07:25,850 --> 00:07:30,590
it I will take that directory of files

00:07:27,680 --> 00:07:33,170
and I'll compile it and here your your

00:07:30,590 --> 00:07:36,400
project will run in the browser as if it

00:07:33,170 --> 00:07:38,600
was running on a local filesystem

00:07:36,400 --> 00:07:41,120
browserify proved that you could change

00:07:38,600 --> 00:07:44,090
the human interface of the language of

00:07:41,120 --> 00:07:45,530
JavaScript without needing to change the

00:07:44,090 --> 00:07:47,870
machine interface we didn't have to wait

00:07:45,530 --> 00:07:49,970
for a new version of JavaScript of

00:07:47,870 --> 00:07:51,830
modules in it I mean if we had we would

00:07:49,970 --> 00:07:53,090
still be waiting and if it dropped today

00:07:51,830 --> 00:07:55,730
we would have to wait for browsers to

00:07:53,090 --> 00:07:58,640
support it but browser if I said we can

00:07:55,730 --> 00:08:01,760
separate we don't have to stay in step

00:07:58,640 --> 00:08:05,810
with what what the browsers are capable

00:08:01,760 --> 00:08:08,180
of so of course the question is is that

00:08:05,810 --> 00:08:10,570
possible well in fact I'll let this guy

00:08:08,180 --> 00:08:10,570
ask it

00:08:13,160 --> 00:08:19,560
thank you weird alien conspiracy dude

00:08:17,190 --> 00:08:22,260
that's what interruptible CSS is trying

00:08:19,560 --> 00:08:26,250
to be all right and here's what it looks

00:08:22,260 --> 00:08:28,470
like it is very small it is a very small

00:08:26,250 --> 00:08:30,060
addition to the CSS syntax there is an

00:08:28,470 --> 00:08:32,159
import and export directive the import

00:08:30,060 --> 00:08:33,930
references another file and says hey

00:08:32,159 --> 00:08:35,729
some information from that file I would

00:08:33,930 --> 00:08:38,159
like to bring it in here and I'll call

00:08:35,729 --> 00:08:39,810
it this but also can export things

00:08:38,159 --> 00:08:42,270
saying hey if I get included here's

00:08:39,810 --> 00:08:44,370
information out there's a local alias

00:08:42,270 --> 00:08:46,050
exported token but the rest of the file

00:08:44,370 --> 00:08:50,160
is completely global there's no other

00:08:46,050 --> 00:08:52,140
changes to CSS but it's quite different

00:08:50,160 --> 00:08:54,440
to something like writing modules in

00:08:52,140 --> 00:08:57,330
JavaScript because it's compiled target

00:08:54,440 --> 00:08:58,920
it's not something that we write by hand

00:08:57,330 --> 00:09:02,940
it's not good enough to be a human

00:08:58,920 --> 00:09:05,610
interface but recently a lot of our

00:09:02,940 --> 00:09:07,770
projects have involved a tools a bundler

00:09:05,610 --> 00:09:12,510
or a loader called web pack JVM or

00:09:07,770 --> 00:09:14,700
browserify to be able to build up a

00:09:12,510 --> 00:09:16,650
collection for the browser of a whole

00:09:14,700 --> 00:09:19,710
lot of files in the file system and you

00:09:16,650 --> 00:09:21,740
can load CSS in that manner and I CSS is

00:09:19,710 --> 00:09:24,870
designed to be consumed by one of these

00:09:21,740 --> 00:09:27,660
so each file of I CSS has then compiled

00:09:24,870 --> 00:09:31,110
separately emits both CSS and JavaScript

00:09:27,660 --> 00:09:33,030
and the CSS can get concatenated and

00:09:31,110 --> 00:09:34,650
inserted into the browser and we built

00:09:33,030 --> 00:09:35,940
it because we're trying to build a thing

00:09:34,650 --> 00:09:40,950
called CSS modules which I'll be talking

00:09:35,940 --> 00:09:45,360
about for the rest of today so it brings

00:09:40,950 --> 00:09:47,850
me apart to Christopher Zito who works

00:09:45,360 --> 00:09:49,890
for Facebook about a year ago presented

00:09:47,850 --> 00:09:53,940
these seven problems as being like the

00:09:49,890 --> 00:09:55,380
key core problems with CSS and it was it

00:09:53,940 --> 00:09:57,630
was great because nobody had really I

00:09:55,380 --> 00:10:01,170
don't think put the list together and

00:09:57,630 --> 00:10:03,210
had the the scale of developers and the

00:10:01,170 --> 00:10:06,630
scale of users on a product to really

00:10:03,210 --> 00:10:08,000
back it up of course he went on to say

00:10:06,630 --> 00:10:10,830
that if you write your Styles in

00:10:08,000 --> 00:10:12,660
JavaScript a large class of those in

00:10:10,830 --> 00:10:15,900
fact those seven just disappear

00:10:12,660 --> 00:10:18,089
instantly and I guess it's sort of fair

00:10:15,900 --> 00:10:20,430
to say that the CSS community wasn't

00:10:18,089 --> 00:10:22,950
that enthusiastic with it at the time

00:10:20,430 --> 00:10:24,029
straightaway wouldn't necessarily think

00:10:22,950 --> 00:10:30,119
that it was the best

00:10:24,029 --> 00:10:32,279
idea and I was certainly in that camp

00:10:30,119 --> 00:10:35,849
but thankfully a lot of people weren't

00:10:32,279 --> 00:10:37,589
and there's a whole host of now projects

00:10:35,849 --> 00:10:39,749
about doing styling in JavaScript a

00:10:37,589 --> 00:10:42,059
Facebook has sort of native support for

00:10:39,749 --> 00:10:44,999
inline styles and the virtual Dom the 3x

00:10:42,059 --> 00:10:46,229
file JJ sextile jss but I think radium

00:10:44,999 --> 00:10:47,849
is probably the most promising at the

00:10:46,229 --> 00:10:48,689
moment and they're worth checking out

00:10:47,849 --> 00:10:50,069
they're doing something really

00:10:48,689 --> 00:10:53,099
interesting in a way that basically no

00:10:50,069 --> 00:10:54,319
one else has done before and they may be

00:10:53,099 --> 00:10:56,549
onto something

00:10:54,319 --> 00:10:59,489
but I wasn't particularly convinced by

00:10:56,549 --> 00:11:01,289
them and in fact I wrote this in a blog

00:10:59,489 --> 00:11:02,489
post recently and that sort of

00:11:01,289 --> 00:11:04,229
crystallized how we'd all been thinking

00:11:02,489 --> 00:11:06,959
about it was that it was more important

00:11:04,229 --> 00:11:11,039
to keep knowledge about CSS keep some

00:11:06,959 --> 00:11:14,459
good parts of CSS within your product

00:11:11,039 --> 00:11:16,769
and your team but to solve the real

00:11:14,459 --> 00:11:18,989
problems which were being comfortable

00:11:16,769 --> 00:11:21,119
about making changes and being fast and

00:11:18,989 --> 00:11:24,209
making changes on a large code base and

00:11:21,119 --> 00:11:26,249
I said comfortable before fast because I

00:11:24,209 --> 00:11:29,579
think it's a lot more important to be

00:11:26,249 --> 00:11:31,799
comfortable making changes particularly

00:11:29,579 --> 00:11:35,639
in CSS than it is to go any faster than

00:11:31,799 --> 00:11:37,589
we can at the moment and this brings me

00:11:35,639 --> 00:11:39,989
with the first principle of CSS modules

00:11:37,589 --> 00:11:42,959
the thing that drives out basically half

00:11:39,989 --> 00:11:45,149
of it is that good design should good to

00:11:42,959 --> 00:11:47,849
lead you to good practice so if we're

00:11:45,149 --> 00:11:49,709
looking at a new version of CSS that has

00:11:47,849 --> 00:11:52,009
multiple files and passed symbols around

00:11:49,709 --> 00:11:55,159
what can we do with it what will it do

00:11:52,009 --> 00:11:57,869
what would make CSS easier for humans

00:11:55,159 --> 00:12:00,209
and I've been thinking about this a lot

00:11:57,869 --> 00:12:02,429
and I think it comes down to this every

00:12:00,209 --> 00:12:05,789
time we've tried to improve CSS every

00:12:02,429 --> 00:12:09,419
time we've tried to put a convention on

00:12:05,789 --> 00:12:13,559
CSS we've been guiding ourselves to one

00:12:09,419 --> 00:12:17,759
of these two things either focusing on

00:12:13,559 --> 00:12:19,499
isolation or focusing on reuse so

00:12:17,759 --> 00:12:20,699
isolation is when you start with your

00:12:19,499 --> 00:12:23,039
component and then you write all the

00:12:20,699 --> 00:12:25,019
Styles down like Ben all right you

00:12:23,039 --> 00:12:26,639
everything is nice and separated so you

00:12:25,019 --> 00:12:28,319
can add a component really easily and

00:12:26,639 --> 00:12:29,970
you can delete a component really easily

00:12:28,319 --> 00:12:32,220
because there's only one place that the

00:12:29,970 --> 00:12:33,419
styles are defined then of course you

00:12:32,220 --> 00:12:36,269
need to add the ability for those

00:12:33,419 --> 00:12:37,620
components to share styles which can

00:12:36,269 --> 00:12:39,690
lead to large payloads but

00:12:37,620 --> 00:12:41,820
generally bam successes I think proven

00:12:39,690 --> 00:12:45,390
that this is a good approach for a lot

00:12:41,820 --> 00:12:46,770
of teams the other side is reused first

00:12:45,390 --> 00:12:50,040
and this is a little bit more like what

00:12:46,770 --> 00:12:51,330
CSS is actually good at by default which

00:12:50,040 --> 00:12:53,010
is you start from the styles and you

00:12:51,330 --> 00:12:57,090
build up components so a component will

00:12:53,010 --> 00:13:00,480
have styles from many parts of your of

00:12:57,090 --> 00:13:03,420
your codebase so CSS and tachyons like

00:13:00,480 --> 00:13:06,960
this and it really captures the visual

00:13:03,420 --> 00:13:08,430
information in your site with a small

00:13:06,960 --> 00:13:10,260
file size and good performance but I

00:13:08,430 --> 00:13:11,810
believe it's not as successful at the

00:13:10,260 --> 00:13:13,200
moment because it is difficult for teams

00:13:11,810 --> 00:13:16,110
particularly if people have different

00:13:13,200 --> 00:13:17,880
abilities if you've got only one person

00:13:16,110 --> 00:13:20,070
who can touch the CSS on your team I

00:13:17,880 --> 00:13:21,720
think this is a symptom of what I call

00:13:20,070 --> 00:13:24,360
change paralysis where you're just not

00:13:21,720 --> 00:13:25,950
confident that the codebase is not in a

00:13:24,360 --> 00:13:27,360
state where anybody can just add

00:13:25,950 --> 00:13:31,680
something and you and you think you'll

00:13:27,360 --> 00:13:33,600
be okay so CSS modules is trying to

00:13:31,680 --> 00:13:35,550
unify those two approaches trying to

00:13:33,600 --> 00:13:41,300
give you real isolation and responsible

00:13:35,550 --> 00:13:41,300
reuse so let's talk about isolation

00:13:43,230 --> 00:13:48,330
if you want to target a single element

00:13:45,660 --> 00:13:51,210
on your page you can do this you can

00:13:48,330 --> 00:13:53,850
nest a lot

00:13:51,210 --> 00:13:55,110
if you've used CSS for probably about

00:13:53,850 --> 00:13:57,810
four or five minutes you'll know that

00:13:55,110 --> 00:14:00,000
that's really bad right because as soon

00:13:57,810 --> 00:14:01,920
as your Dom changes your HTML changes

00:14:00,000 --> 00:14:02,880
that doesn't apply or suddenly it might

00:14:01,920 --> 00:14:05,880
apply something you weren't trying to

00:14:02,880 --> 00:14:08,430
style the alternative of course on the

00:14:05,880 --> 00:14:10,650
other extreme is you invent a name that

00:14:08,430 --> 00:14:13,500
has never been seen before to target

00:14:10,650 --> 00:14:15,510
that exact one thing and actually it's

00:14:13,500 --> 00:14:18,840
better it's ridiculous but it's better

00:14:15,510 --> 00:14:21,510
and so we put some you know we put some

00:14:18,840 --> 00:14:24,480
sanity on it we say we invent them

00:14:21,510 --> 00:14:26,490
basically we say okay every class has to

00:14:24,480 --> 00:14:27,660
be unique but here's a nice convention

00:14:26,490 --> 00:14:29,280
so you can think of a class name really

00:14:27,660 --> 00:14:33,360
quickly you know exactly what it's going

00:14:29,280 --> 00:14:34,260
to be it implies its context and yeah

00:14:33,360 --> 00:14:38,880
there's a convention that your whole

00:14:34,260 --> 00:14:41,450
team can learn and apply but it looks an

00:14:38,880 --> 00:14:43,560
awful lot like JavaScript in 2008

00:14:41,450 --> 00:14:45,300
there's so much repetition there there's

00:14:43,560 --> 00:14:47,700
so much information that's just about

00:14:45,300 --> 00:14:52,080
the fact that the file is global not

00:14:47,700 --> 00:14:53,790
about what's happening and it occurred

00:14:52,080 --> 00:14:55,860
to me that if you're running a class for

00:14:53,790 --> 00:14:58,650
every element in your file then your

00:14:55,860 --> 00:15:03,270
class is not a global descriptor your

00:14:58,650 --> 00:15:06,420
class is a local variable imagine if in

00:15:03,270 --> 00:15:08,130
your JavaScript code you couldn't use a

00:15:06,420 --> 00:15:11,460
variable that you'd used anywhere else

00:15:08,130 --> 00:15:16,080
in that code or any of your dependencies

00:15:11,460 --> 00:15:18,140
had used I don't think we would still be

00:15:16,080 --> 00:15:21,840
doing JavaScript if that was the case

00:15:18,140 --> 00:15:25,830
and so CSS modules tries to fix that

00:15:21,840 --> 00:15:29,460
problem for CSS let's say I'm trying to

00:15:25,830 --> 00:15:30,660
build this beautiful button I stole the

00:15:29,460 --> 00:15:33,540
design for this button from someone who

00:15:30,660 --> 00:15:35,700
can design it's seven lines of CSS and

00:15:33,540 --> 00:15:39,630
the only change that you have to make to

00:15:35,700 --> 00:15:42,240
make this a CSS module is that just drop

00:15:39,630 --> 00:15:43,680
the noise out of the class name just

00:15:42,240 --> 00:15:45,300
call it normal it's just the normal

00:15:43,680 --> 00:15:47,300
button you've already got components

00:15:45,300 --> 00:15:49,350
like submit button dot CSS write

00:15:47,300 --> 00:15:52,890
something else should be able to tell

00:15:49,350 --> 00:15:55,180
the Machine what this is but for you

00:15:52,890 --> 00:15:57,590
just call it normal

00:15:55,180 --> 00:16:00,980
what happens in CSS modules as it

00:15:57,590 --> 00:16:02,960
compiles to this I CSS it extracts a net

00:16:00,980 --> 00:16:05,240
export statement and it rewrites the

00:16:02,960 --> 00:16:07,160
selector and this is a really low-level

00:16:05,240 --> 00:16:09,380
approach that could be used for a whole

00:16:07,160 --> 00:16:12,110
lot of things to change the way CSS

00:16:09,380 --> 00:16:14,870
works so here the selector becomes

00:16:12,110 --> 00:16:16,730
normal and then a unique hash and the

00:16:14,870 --> 00:16:19,400
export statement says what you think

00:16:16,730 --> 00:16:22,490
normal is actually this and then you can

00:16:19,400 --> 00:16:26,440
import it into your JavaScript and you

00:16:22,490 --> 00:16:29,150
get the mapping from normal to the hash

00:16:26,440 --> 00:16:31,130
once you do that you can use any method

00:16:29,150 --> 00:16:33,380
of getting that into the mark-up I mean

00:16:31,130 --> 00:16:35,300
the only requirement is you have a way

00:16:33,380 --> 00:16:39,530
to load CSS from your JavaScript and you

00:16:35,300 --> 00:16:41,270
have some control over the mark-up if

00:16:39,530 --> 00:16:43,760
you're using angular it's really easy

00:16:41,270 --> 00:16:46,130
you can even use the bind 1 syntax so it

00:16:43,760 --> 00:16:48,620
has no runtime performance if you're

00:16:46,130 --> 00:16:50,120
just using document right then you can

00:16:48,620 --> 00:16:53,420
just do that to just build up a string

00:16:50,120 --> 00:16:56,660
right but for my the rest of my examples

00:16:53,420 --> 00:16:58,970
I'll be showing react because react is

00:16:56,660 --> 00:17:00,230
already very component driven react is

00:16:58,970 --> 00:17:02,090
already really well supported by things

00:17:00,230 --> 00:17:05,589
like web pack and browser 5 J's p.m. and

00:17:02,090 --> 00:17:08,510
so it makes sense it's a really easy

00:17:05,589 --> 00:17:11,990
conversion to go from react and other

00:17:08,510 --> 00:17:14,660
cells other kinds of CSS to react in CSS

00:17:11,990 --> 00:17:20,480
modules and so this is what it looks

00:17:14,660 --> 00:17:23,780
like to do a button now the class name

00:17:20,480 --> 00:17:25,760
there is generating your JSX file is

00:17:23,780 --> 00:17:29,000
loading it injecting it into the DOM and

00:17:25,760 --> 00:17:30,770
that HTML is coming out but it doesn't

00:17:29,000 --> 00:17:32,450
really matter what that class name is in

00:17:30,770 --> 00:17:33,830
fact in development I recommend doing

00:17:32,450 --> 00:17:35,960
something like this where you have a

00:17:33,830 --> 00:17:39,680
longer class name which points you

00:17:35,960 --> 00:17:42,310
towards where that file was in fact you

00:17:39,680 --> 00:17:44,840
can actually put the line number of the

00:17:42,310 --> 00:17:47,300
definition in the class declaration and

00:17:44,840 --> 00:17:49,430
it all still work

00:17:47,300 --> 00:17:51,410
note that even though I'm changing this

00:17:49,430 --> 00:17:54,530
my component never changes no matter

00:17:51,410 --> 00:17:57,050
what the output is the component has

00:17:54,530 --> 00:18:01,550
complete isolation to the reality of the

00:17:57,050 --> 00:18:04,190
CSS if you want to minify you can just

00:18:01,550 --> 00:18:08,120
use the unique component or as I like to

00:18:04,190 --> 00:18:10,160
do use an emoji in fact just

00:18:08,120 --> 00:18:18,580
this morning I converted my entire

00:18:10,160 --> 00:18:22,210
website to use nothing but emoji I mean

00:18:18,580 --> 00:18:25,820
and you can't tell me that what is that

00:18:22,210 --> 00:18:27,950
they select a chicken firework up

00:18:25,820 --> 00:18:30,260
firework down Chinese lantern love heart

00:18:27,950 --> 00:18:31,880
that's a beautifully meaningful selector

00:18:30,260 --> 00:18:35,000
that you know packs the bytes

00:18:31,880 --> 00:18:38,150
beautifully let's say I'm mochi

00:18:35,000 --> 00:18:39,800
minifiers a really big feature but

00:18:38,150 --> 00:18:41,420
there's another reason that class you

00:18:39,800 --> 00:18:43,130
know that classes are hard there's

00:18:41,420 --> 00:18:45,380
another reason why when you're trying to

00:18:43,130 --> 00:18:47,620
write styles sometimes you have to over

00:18:45,380 --> 00:18:50,390
write things and things get messy and

00:18:47,620 --> 00:18:54,350
it's put a lot of it at the feet of

00:18:50,390 --> 00:18:58,670
nesting if you want to name this header

00:18:54,350 --> 00:19:00,470
one inside this edit v2 final object it

00:18:58,670 --> 00:19:02,660
can be very easy to just nest but that

00:19:00,470 --> 00:19:05,000
is a wide-ranging selector and if you

00:19:02,660 --> 00:19:06,530
include another component in there that

00:19:05,000 --> 00:19:07,850
has a h1 suddenly you have to override

00:19:06,530 --> 00:19:10,670
those Styles because of where it's

00:19:07,850 --> 00:19:11,810
included and lower there if you can't

00:19:10,670 --> 00:19:14,330
think of a good name then you're leaving

00:19:11,810 --> 00:19:16,640
this terribly named thing in your global

00:19:14,330 --> 00:19:19,790
code base and somebody is going to be

00:19:16,640 --> 00:19:21,410
very mad eat when they find it this uses

00:19:19,790 --> 00:19:23,330
modules because the file is local the

00:19:21,410 --> 00:19:25,250
pressure is off if it's a header call it

00:19:23,330 --> 00:19:27,560
header if it's a h1 if that's how you

00:19:25,250 --> 00:19:30,050
think about it caught h1 second thing is

00:19:27,560 --> 00:19:31,730
fine right the weird bit at the end if

00:19:30,050 --> 00:19:33,350
that is the thing that you're calling it

00:19:31,730 --> 00:19:36,860
in your team just call it that it's a

00:19:33,350 --> 00:19:38,510
local variable at least when you see

00:19:36,860 --> 00:19:40,250
that word you will see the context from

00:19:38,510 --> 00:19:42,140
which it comes right you'll see the

00:19:40,250 --> 00:19:43,400
component what it is and then that will

00:19:42,140 --> 00:19:47,270
trigger all the wee bit at the end of

00:19:43,400 --> 00:19:49,190
that component that makes sense and so I

00:19:47,270 --> 00:19:51,290
think if you make naming things

00:19:49,190 --> 00:19:53,330
effortless if you never have to worry

00:19:51,290 --> 00:19:55,040
about another global name you can target

00:19:53,330 --> 00:19:56,780
everything directly and if you can

00:19:55,040 --> 00:19:58,970
target everything directly you stop

00:19:56,780 --> 00:19:59,630
leaking styles and if you stop leaking

00:19:58,970 --> 00:20:03,230
styles

00:19:59,630 --> 00:20:09,470
I think isolation is solved so let's

00:20:03,230 --> 00:20:11,300
talk about reuse again I stole this

00:20:09,470 --> 00:20:13,480
button from some of the consign let's

00:20:11,300 --> 00:20:15,860
say you have two variations of a button

00:20:13,480 --> 00:20:17,270
now in BIM you have the common stuff

00:20:15,860 --> 00:20:19,210
then you have the normal stuff they

00:20:17,270 --> 00:20:21,860
neither have the arrow stuff works fine

00:20:19,210 --> 00:20:26,149
you then include both of those class

00:20:21,860 --> 00:20:27,890
on your button it's fine it's better

00:20:26,149 --> 00:20:31,220
than anything came before it I'll I like

00:20:27,890 --> 00:20:32,929
it a lot but there's I have a problem

00:20:31,220 --> 00:20:35,269
with it which is that when you're

00:20:32,929 --> 00:20:37,700
looking at your markup you have to think

00:20:35,269 --> 00:20:40,460
about how many different classes this

00:20:37,700 --> 00:20:43,220
thing is is is being built from you

00:20:40,460 --> 00:20:45,140
don't have any separation from your

00:20:43,220 --> 00:20:47,390
markup and the styling they are

00:20:45,140 --> 00:20:48,740
intrinsically connected and I think this

00:20:47,390 --> 00:20:50,840
is the other principle of CSS modules

00:20:48,740 --> 00:20:52,820
design is that good abstractions are

00:20:50,840 --> 00:20:54,289
there to save you cognitive load when

00:20:52,820 --> 00:20:55,909
you're thinking about one thing you

00:20:54,289 --> 00:20:59,000
shouldn't be exposed to the details of

00:20:55,909 --> 00:21:02,600
another and this brings me to part 2 CSS

00:20:59,000 --> 00:21:04,549
modules which is called composition so

00:21:02,600 --> 00:21:07,929
we will look at our BAM example we see

00:21:04,549 --> 00:21:11,539
our three classes button normal an error

00:21:07,929 --> 00:21:14,299
in CSS modules you have something called

00:21:11,539 --> 00:21:16,510
base could be called anything and then

00:21:14,299 --> 00:21:20,720
normal and error use a keyword called

00:21:16,510 --> 00:21:24,260
composes or compose with what that does

00:21:20,720 --> 00:21:27,590
is when CSS modules compiles that to I

00:21:24,260 --> 00:21:31,039
CSS now the three classes base

00:21:27,590 --> 00:21:33,919
normal and error they still just get

00:21:31,039 --> 00:21:35,990
compiled and their classes and their in

00:21:33,919 --> 00:21:37,760
their styles are still presented but the

00:21:35,990 --> 00:21:39,919
composed statements disappear they go up

00:21:37,760 --> 00:21:41,269
into the export statement and so now

00:21:39,919 --> 00:21:42,799
when you talk about normal you're

00:21:41,269 --> 00:21:44,389
actually talking about two classes when

00:21:42,799 --> 00:21:48,289
you talk about error you're also talking

00:21:44,389 --> 00:21:50,360
about two classes base is just one so

00:21:48,289 --> 00:21:54,769
that export statement when being

00:21:50,360 --> 00:21:57,769
imported now notice that this class this

00:21:54,769 --> 00:21:59,899
component declaration hasn't changed

00:21:57,769 --> 00:22:02,139
we're still just using one thing it

00:21:59,899 --> 00:22:04,940
generates markup with two classes and

00:22:02,139 --> 00:22:07,340
breaking this that I mean it seems

00:22:04,940 --> 00:22:08,570
subtle but like breaking having to worry

00:22:07,340 --> 00:22:10,820
about how many classes are being applied

00:22:08,570 --> 00:22:12,980
to this element at that time makes a

00:22:10,820 --> 00:22:14,029
huge difference to how much context

00:22:12,980 --> 00:22:14,750
switching you're actually having to do

00:22:14,029 --> 00:22:16,070
when you're thinking about your

00:22:14,750 --> 00:22:21,679
component when you're thinking about

00:22:16,070 --> 00:22:25,700
your Styles this gets kind of better

00:22:21,679 --> 00:22:28,730
with multi file composition because each

00:22:25,700 --> 00:22:30,980
file in I CSS and CSS modules is

00:22:28,730 --> 00:22:33,169
completely isolated you can't reference

00:22:30,980 --> 00:22:35,120
anything from any other file unless you

00:22:33,169 --> 00:22:36,460
use a couple of methods one of which is

00:22:35,120 --> 00:22:38,990
composed

00:22:36,460 --> 00:22:40,850
this is saying that yes normal composure

00:22:38,990 --> 00:22:44,150
space brings all those stars in as well

00:22:40,850 --> 00:22:48,680
but it also pulls in two classes from

00:22:44,150 --> 00:22:51,500
colors but CSS and this compiles out to

00:22:48,680 --> 00:22:52,850
the colors file goes to the top again

00:22:51,500 --> 00:22:54,740
this is being compiled and then

00:22:52,850 --> 00:22:56,960
concatenated because just CSS after the

00:22:54,740 --> 00:22:58,850
whole process goes and the button gets

00:22:56,960 --> 00:23:00,140
rendered with all four classes you have

00:22:58,850 --> 00:23:01,670
the blue class you have a light blue

00:23:00,140 --> 00:23:04,610
background Class C of the base class and

00:23:01,670 --> 00:23:07,280
the normal and the normal class actually

00:23:04,610 --> 00:23:09,080
ends up having nothing you know that

00:23:07,280 --> 00:23:11,270
you've said that this normal thing it's

00:23:09,080 --> 00:23:12,860
not a class anymore it's an element in

00:23:11,270 --> 00:23:14,870
your in your application and you've been

00:23:12,860 --> 00:23:16,490
able to say that every part of it styles

00:23:14,870 --> 00:23:18,620
comes from somewhere else you've just

00:23:16,490 --> 00:23:21,890
built a piece of like a novel piece of

00:23:18,620 --> 00:23:24,560
UI and not introduced a single line of

00:23:21,890 --> 00:23:27,590
CSS I mean assuming you just stripped

00:23:24,560 --> 00:23:28,730
this out with an optimizer later now I

00:23:27,590 --> 00:23:32,380
think that's really powerful the more

00:23:28,730 --> 00:23:37,310
times you add UI without adding CSS is

00:23:32,380 --> 00:23:39,980
good really good and this kind of goes

00:23:37,310 --> 00:23:41,510
on and on and on once you start to think

00:23:39,980 --> 00:23:42,890
about well what would you want to

00:23:41,510 --> 00:23:44,480
compose what do you want to bring

00:23:42,890 --> 00:23:46,490
together how do you want to separate all

00:23:44,480 --> 00:23:47,930
of the styles in your application you

00:23:46,490 --> 00:23:50,000
start to do things like this you start

00:23:47,930 --> 00:23:52,640
to say well my layout has things like

00:23:50,000 --> 00:23:54,470
the Flex vertical centered a margin one

00:23:52,640 --> 00:23:56,510
bottom padding one left padding one

00:23:54,470 --> 00:23:58,340
right because it'll lets you express

00:23:56,510 --> 00:24:00,110
these two objects an article in a

00:23:58,340 --> 00:24:01,790
masthead saying the article is a

00:24:00,110 --> 00:24:04,190
basically a vertically centered flexbox

00:24:01,790 --> 00:24:07,820
the masthead is a forty eight to forty

00:24:04,190 --> 00:24:09,560
eight point centered bold serif and the

00:24:07,820 --> 00:24:11,630
layer and and needs some padding on the

00:24:09,560 --> 00:24:13,400
sides of margin on the bottom now this

00:24:11,630 --> 00:24:15,590
generates markup that's reasonably

00:24:13,400 --> 00:24:19,130
complicated lots of classes but you

00:24:15,590 --> 00:24:20,810
don't see that you see this you just see

00:24:19,130 --> 00:24:22,550
the article and the masthead and you can

00:24:20,810 --> 00:24:25,370
go in and change all the different

00:24:22,550 --> 00:24:27,860
properties of that thing and it will

00:24:25,370 --> 00:24:29,780
change which classes get compiled but

00:24:27,860 --> 00:24:34,250
you never worry about that you worry

00:24:29,780 --> 00:24:35,900
about one thing at a time not both what

00:24:34,250 --> 00:24:39,590
this is effectively doing is defining an

00:24:35,900 --> 00:24:42,350
API into your Styles the CSS module

00:24:39,590 --> 00:24:44,090
becomes the point at which all of your

00:24:42,350 --> 00:24:47,060
visual information is collected and

00:24:44,090 --> 00:24:48,850
passed to your component and that it's

00:24:47,060 --> 00:24:51,460
that layer in the middle

00:24:48,850 --> 00:24:55,210
that I believe allows you to solve both

00:24:51,460 --> 00:24:57,250
isolation and reuse how am I going for

00:24:55,210 --> 00:24:58,950
time actually a bit ahead all right I'll

00:24:57,250 --> 00:25:03,250
take a bit long with my conclusion then

00:24:58,950 --> 00:25:04,810
um a lot of people when they start to

00:25:03,250 --> 00:25:07,330
find out about CSS modules because I

00:25:04,810 --> 00:25:09,190
think we we do a big blog post about a

00:25:07,330 --> 00:25:10,420
month ago and people have been reading

00:25:09,190 --> 00:25:11,920
it and asking questions one of the

00:25:10,420 --> 00:25:13,780
bigger questions is how does it relate

00:25:11,920 --> 00:25:15,400
to preprocessors and I mean when they

00:25:13,780 --> 00:25:18,580
say pre processes they mean SAS because

00:25:15,400 --> 00:25:21,670
66 percent right that is a bananas

00:25:18,580 --> 00:25:26,050
number of people to use one tool in our

00:25:21,670 --> 00:25:26,380
ecosystem and the truth is like we loves

00:25:26,050 --> 00:25:28,240
us

00:25:26,380 --> 00:25:30,070
I love SAS there's a lot of love for SAS

00:25:28,240 --> 00:25:32,320
in the room because I wouldn't have ever

00:25:30,070 --> 00:25:34,990
got through the first couple of months

00:25:32,320 --> 00:25:40,540
of doing CSS had I not had SAS I

00:25:34,990 --> 00:25:43,180
couldn't make sense of it without SAS if

00:25:40,540 --> 00:25:45,970
you're trying to marry isolation and

00:25:43,180 --> 00:25:48,190
reuse then using BEM for isolation which

00:25:45,970 --> 00:25:50,500
is what it's really good at and SAS for

00:25:48,190 --> 00:25:52,210
reuse is fantastic I mean the composer's

00:25:50,500 --> 00:25:54,160
keyword works basically the same as the

00:25:52,210 --> 00:25:55,630
extends keyword in SAS it just compiles

00:25:54,160 --> 00:25:56,980
quite differently it has different

00:25:55,630 --> 00:25:58,780
performance and other things

00:25:56,980 --> 00:26:02,830
implications but conceptually it's the

00:25:58,780 --> 00:26:08,560
same right and that was great but I do

00:26:02,830 --> 00:26:13,090
believe that given the way I CSS opens

00:26:08,560 --> 00:26:15,730
up a new way of doing multi file CSS CSS

00:26:13,090 --> 00:26:18,610
modules can eventually replace the need

00:26:15,730 --> 00:26:20,590
for SAS now I used kind of inflammatory

00:26:18,610 --> 00:26:23,020
emoji because there's no emoji for just

00:26:20,590 --> 00:26:24,820
like genuine respect and admiration for

00:26:23,020 --> 00:26:26,530
the generation that's gone before so I

00:26:24,820 --> 00:26:28,150
went with us wearing sunglasses and them

00:26:26,530 --> 00:26:33,160
on fire but like I do actually quite

00:26:28,150 --> 00:26:34,870
like SAS so what we're what we're trying

00:26:33,160 --> 00:26:38,050
to do is take all of the good things

00:26:34,870 --> 00:26:40,720
from SAS and every other technique look

00:26:38,050 --> 00:26:43,750
at what's possible now that a CSS file

00:26:40,720 --> 00:26:46,090
is actually legitimately local and then

00:26:43,750 --> 00:26:47,590
see what we want see what's good see

00:26:46,090 --> 00:26:49,240
what patterns emerge what auntie ballads

00:26:47,590 --> 00:26:51,340
we want to get rid of at the moment with

00:26:49,240 --> 00:26:52,780
out of three things into the mix and CSS

00:26:51,340 --> 00:26:56,940
module I told you about two the third is

00:26:52,780 --> 00:26:59,890
a bit smaller so I don't have time but

00:26:56,940 --> 00:27:02,020
that's the game now we're starting from

00:26:59,890 --> 00:27:02,310
a new generation of a baseline and we're

00:27:02,020 --> 00:27:05,700
look

00:27:02,310 --> 00:27:07,440
to see what works and so you might look

00:27:05,700 --> 00:27:09,000
at this and not like it that's fine you

00:27:07,440 --> 00:27:10,170
might look at it and love other you know

00:27:09,000 --> 00:27:12,990
other techniques you might think we're

00:27:10,170 --> 00:27:15,210
missing stuff but I hope that we all

00:27:12,990 --> 00:27:17,430
agree that that these are our goals

00:27:15,210 --> 00:27:19,800
these are our goals and if you if you

00:27:17,430 --> 00:27:21,300
come to us with arguments about how we

00:27:19,800 --> 00:27:23,970
could introduce things in a CSS modules

00:27:21,300 --> 00:27:27,600
that lead to good practice then that's

00:27:23,970 --> 00:27:29,610
where we'll go the other thing is how we

00:27:27,600 --> 00:27:31,290
can increase will make better

00:27:29,610 --> 00:27:34,080
abstractions that save cognitive load as

00:27:31,290 --> 00:27:38,070
you're developing then that's the point

00:27:34,080 --> 00:27:40,290
of this project I feel like we've made a

00:27:38,070 --> 00:27:42,870
new capability with things like web pack

00:27:40,290 --> 00:27:46,140
JSP and browser fly to make multi file

00:27:42,870 --> 00:27:50,670
CSS and CSS modules is al our best shot

00:27:46,140 --> 00:27:52,710
a best guess he didn't just me

00:27:50,670 --> 00:27:55,740
by all means there's a whole lot of

00:27:52,710 --> 00:27:58,410
people have contributed discussion code

00:27:55,740 --> 00:28:00,660
ideas I want to make special mention of

00:27:58,410 --> 00:28:02,730
mark and Tobias who did the original

00:28:00,660 --> 00:28:04,890
work on the local by default stuff which

00:28:02,730 --> 00:28:06,540
really opened this up really unlock to

00:28:04,890 --> 00:28:10,410
me Tobias a maintainer of web pack which

00:28:06,540 --> 00:28:15,660
makes a big deal is a big part of this

00:28:10,410 --> 00:28:18,600
project my slides are up there full of

00:28:15,660 --> 00:28:20,610
emoji you can read about it you can look

00:28:18,600 --> 00:28:22,080
at the specifications I definitely

00:28:20,610 --> 00:28:24,120
welcome feedback I would love to hear

00:28:22,080 --> 00:28:27,420
about use case your use case and whether

00:28:24,120 --> 00:28:27,570
it works with our stuff yeah thanks a

00:28:27,420 --> 00:28:30,110
lot

00:28:27,570 --> 00:28:30,110

YouTube URL: https://www.youtube.com/watch?v=aIyhhHTmsXE


