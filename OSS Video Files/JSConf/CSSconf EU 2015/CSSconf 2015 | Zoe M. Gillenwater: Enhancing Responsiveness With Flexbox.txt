Title: CSSconf 2015 | Zoe M. Gillenwater: Enhancing Responsiveness With Flexbox
Publication date: 2015-09-27
Playlist: CSSconf EU 2015
Description: 
	"Enhancing Responsiveness With Flexbox": Flexbox and responsive web design go great together, like peanut butter and jelly! Flexbox gives you more control over the things you care about in a responsive layout and lets you create much morecomplex and reliable layouts than you can with floats, table display, or inline-block. All with far less CSS.

In this talk, you’ll learn what flexbox features are particularly suited to responsive layouts and how you can harness them by applying flexbox as a progressive enhancement. We’ll look at examples of responsive page components and patterns that you can enhance further by layering flexbox on top of other layout methods, ensuring all users get a good experience.

Zoe is a senior designer for Booking.com. She is the author of two books on CSS and visual web design, and she recently wrote the chapter on flexbox for Smashing Magazine’s new Real-Life Responsive Web Design book.

http://2015.cssconf.eu/
Captions: 
	00:00:15,770 --> 00:00:23,039
so yeah I am I live in Amsterdam I'm

00:00:20,189 --> 00:00:26,189
originally from the US and I live there

00:00:23,039 --> 00:00:27,750
with my husband and my two kids who came

00:00:26,189 --> 00:00:29,429
with me today but they didn't really

00:00:27,750 --> 00:00:30,960
think this is cool enough to sit in on

00:00:29,429 --> 00:00:35,100
so I think they're running around

00:00:30,960 --> 00:00:37,320
outside I've been doing web design

00:00:35,100 --> 00:00:39,059
professionally for about 15 years and

00:00:37,320 --> 00:00:41,700
I'm currently a senior designer at

00:00:39,059 --> 00:00:45,270
booking.com where I do both design as

00:00:41,700 --> 00:00:47,550
well as HTML and CSS one of the things

00:00:45,270 --> 00:00:50,910
that's fun about working there is seeing

00:00:47,550 --> 00:00:53,100
the rather creative photos and names

00:00:50,910 --> 00:00:55,500
that some properties have chosen for

00:00:53,100 --> 00:00:59,609
themselves for instance how would you

00:00:55,500 --> 00:01:01,079
like to stay in wrong place and of

00:00:59,609 --> 00:01:03,210
course you can stay in hell or heaven

00:01:01,079 --> 00:01:03,899
depending on the type of person that you

00:01:03,210 --> 00:01:08,280
are I guess

00:01:03,899 --> 00:01:09,659
and finally there's Jesus this is my

00:01:08,280 --> 00:01:12,229
favorite line from its property

00:01:09,659 --> 00:01:12,229
description

00:01:15,610 --> 00:01:19,720
that Jesus is a great guy

00:01:19,750 --> 00:01:23,780
so these are just a few of the over

00:01:22,310 --> 00:01:25,610
eight hundred and two thousand

00:01:23,780 --> 00:01:28,310
properties providing booking with their

00:01:25,610 --> 00:01:30,259
own content for us to display that

00:01:28,310 --> 00:01:32,689
content then has to be translated into

00:01:30,259 --> 00:01:35,030
42 languages as does all the other

00:01:32,689 --> 00:01:36,649
website content and the prices that you

00:01:35,030 --> 00:01:39,289
see on this site are in one of fifty

00:01:36,649 --> 00:01:41,299
four currencies with this huge variation

00:01:39,289 --> 00:01:44,929
and content I have to make sure that my

00:01:41,299 --> 00:01:46,789
designs can be incredibly flexible for

00:01:44,929 --> 00:01:48,890
instance if I have to design a component

00:01:46,789 --> 00:01:51,770
that includes the name of a property

00:01:48,890 --> 00:01:54,619
that my name might be as short as two

00:01:51,770 --> 00:01:56,390
characters or as long as 109 characters

00:01:54,619 --> 00:01:58,459
or anywhere in between

00:01:56,390 --> 00:02:00,740
so my component has to be flexible

00:01:58,459 --> 00:02:04,189
enough to hold all the variations in an

00:02:00,740 --> 00:02:05,780
elegant way in responsive web design the

00:02:04,189 --> 00:02:07,729
challenge is that you never know how

00:02:05,780 --> 00:02:10,099
much space is available outside the

00:02:07,729 --> 00:02:12,019
component here the problem is kind of

00:02:10,099 --> 00:02:14,810
the opposite not knowing how much stuff

00:02:12,019 --> 00:02:17,330
is available inside the component but in

00:02:14,810 --> 00:02:19,160
both cases the question is the same how

00:02:17,330 --> 00:02:22,700
big do I make this thing so that

00:02:19,160 --> 00:02:24,410
everything will fit nicely in responsive

00:02:22,700 --> 00:02:27,260
web design you answer this question by

00:02:24,410 --> 00:02:29,630
picking a percentage and mrm value or a

00:02:27,260 --> 00:02:31,790
viewport unit based on what will work

00:02:29,630 --> 00:02:34,160
well for that item and the others on the

00:02:31,790 --> 00:02:35,959
page the majority of the time and these

00:02:34,160 --> 00:02:39,109
are all good relative units of

00:02:35,959 --> 00:02:40,940
measurement but they're not perfect they

00:02:39,109 --> 00:02:43,790
are still a decision that you are making

00:02:40,940 --> 00:02:46,579
ahead of time rather than a calculation

00:02:43,790 --> 00:02:48,829
made on the fly for an individual users

00:02:46,579 --> 00:02:50,180
precise set of viewing conditions and

00:02:48,829 --> 00:02:52,250
the precise piece of content that

00:02:50,180 --> 00:02:54,560
they're viewing at that moment they're

00:02:52,250 --> 00:02:57,230
always going to be your best guess at

00:02:54,560 --> 00:02:59,780
what will work well for the majority but

00:02:57,230 --> 00:03:02,359
not necessarily the ideal for any one

00:02:59,780 --> 00:03:04,160
thing in particular now don't get me

00:03:02,359 --> 00:03:05,810
wrong I have nothing against using these

00:03:04,160 --> 00:03:07,670
units of measurement of course they are

00:03:05,810 --> 00:03:10,489
the units that I have chosen to use in

00:03:07,670 --> 00:03:13,130
my work whenever possible for the last

00:03:10,489 --> 00:03:15,170
10 years and I continue to use them but

00:03:13,130 --> 00:03:17,329
any imposed unit of measurement is

00:03:15,170 --> 00:03:20,480
always going to be an approximation of

00:03:17,329 --> 00:03:23,150
the ideal flexbox is not the ideal

00:03:20,480 --> 00:03:25,610
either it's a tool with strengths and

00:03:23,150 --> 00:03:27,799
limitations just like any other but it

00:03:25,610 --> 00:03:28,600
gets us closer to the ideal because with

00:03:27,799 --> 00:03:30,610
it we know

00:03:28,600 --> 00:03:33,370
have to set explicit dimensions at all

00:03:30,610 --> 00:03:34,780
we can let the browser figure out what

00:03:33,370 --> 00:03:37,030
size is best based on the space

00:03:34,780 --> 00:03:39,310
available the surrounding elements and

00:03:37,030 --> 00:03:41,680
the content within and we still get to

00:03:39,310 --> 00:03:44,350
tell the browser a starting size a

00:03:41,680 --> 00:03:46,390
starting point for that size to give it

00:03:44,350 --> 00:03:48,820
some guidance but we're not laying down

00:03:46,390 --> 00:03:51,910
a law as we are with explicit dimensions

00:03:48,820 --> 00:03:53,290
even relative ones let me give you an

00:03:51,910 --> 00:03:55,570
example of the difference between the

00:03:53,290 --> 00:03:57,640
two approaches here is the job search

00:03:55,570 --> 00:03:59,800
form from The Guardian site it's a

00:03:57,640 --> 00:04:02,230
responsive layout they give all the

00:03:59,800 --> 00:04:05,110
fields percentage widths including the

00:04:02,230 --> 00:04:06,640
Select menu and the button and they

00:04:05,110 --> 00:04:08,410
change those percentages at different

00:04:06,640 --> 00:04:10,630
breakpoints this is the widest version

00:04:08,410 --> 00:04:13,120
of the layout and they didn't use

00:04:10,630 --> 00:04:14,890
flexbox and on it as they do now for

00:04:13,120 --> 00:04:17,770
their main site they still use floating

00:04:14,890 --> 00:04:19,660
here so I decided to make a copy of it

00:04:17,770 --> 00:04:22,420
to see if I could improve it at all by

00:04:19,660 --> 00:04:24,250
adding flexbox just as an exercise for

00:04:22,420 --> 00:04:27,340
me not because there's anything bad

00:04:24,250 --> 00:04:29,740
without their doing it currently so I

00:04:27,340 --> 00:04:32,560
copied it this is my copy it uses floats

00:04:29,740 --> 00:04:34,720
and percentage wits as they do and I use

00:04:32,560 --> 00:04:36,850
this as my starting point and I then

00:04:34,720 --> 00:04:39,310
tried to see if there was anywhere where

00:04:36,850 --> 00:04:41,710
I could add flexbox to make the form

00:04:39,310 --> 00:04:43,660
more responsive and I found two

00:04:41,710 --> 00:04:46,780
opportunities for simple progressive

00:04:43,660 --> 00:04:48,610
enhancement the first issue is that

00:04:46,780 --> 00:04:50,890
because the Select menu is set to a

00:04:48,610 --> 00:04:53,440
percentage not its content length the

00:04:50,890 --> 00:04:56,200
menu text can sometimes be cut off also

00:04:53,440 --> 00:04:58,750
the button can grow much wider than its

00:04:56,200 --> 00:05:01,360
text which looks rather awkward in my

00:04:58,750 --> 00:05:04,840
opinion even if you like it like that

00:05:01,360 --> 00:05:05,890
the which is fine the point is that you

00:05:04,840 --> 00:05:07,630
can't control it

00:05:05,890 --> 00:05:09,700
the viewport is controlling it and

00:05:07,630 --> 00:05:10,960
sometimes it will be snug to its text

00:05:09,700 --> 00:05:12,940
and sometimes not

00:05:10,960 --> 00:05:15,250
the percentage sizing becomes kind of

00:05:12,940 --> 00:05:18,070
arbitrary this is the problem with

00:05:15,250 --> 00:05:19,900
explicit dimensions now I could fix it

00:05:18,070 --> 00:05:21,640
by tweaking the breakpoints and not

00:05:19,900 --> 00:05:24,370
changing the layout until I'm sure that

00:05:21,640 --> 00:05:26,560
the Select menu content can fit but this

00:05:24,370 --> 00:05:28,150
is unreliable you can't always create a

00:05:26,560 --> 00:05:30,580
whole new set of breakpoints to

00:05:28,150 --> 00:05:33,460
accommodate one piece of content on one

00:05:30,580 --> 00:05:35,170
page out of your whole site also it's

00:05:33,460 --> 00:05:37,150
dependent on all users having the same

00:05:35,170 --> 00:05:39,370
font size and on the content in that

00:05:37,150 --> 00:05:41,610
select menu never changing neither of

00:05:39,370 --> 00:05:44,020
which I think are safe assumptions

00:05:41,610 --> 00:05:45,940
this is the perfect case for flexbox

00:05:44,020 --> 00:05:48,760
because as I said it lets you avoid

00:05:45,940 --> 00:05:51,610
explicit dimensions and use the Flex

00:05:48,760 --> 00:05:53,470
property instead to control sizing this

00:05:51,610 --> 00:05:55,210
tells the browser the starting size that

00:05:53,470 --> 00:05:57,190
you want to use including the native

00:05:55,210 --> 00:05:59,440
content size and whether the item can

00:05:57,190 --> 00:06:01,990
grow bigger or smaller then the size to

00:05:59,440 --> 00:06:04,090
fit the space available so for the

00:06:01,990 --> 00:06:06,160
select menu and the button I want them

00:06:04,090 --> 00:06:08,110
to stay at their content width exactly

00:06:06,160 --> 00:06:11,170
not get bigger or smaller so I don't

00:06:08,110 --> 00:06:13,090
want them to flex with the text fields I

00:06:11,170 --> 00:06:15,730
want them to stretch to take up whatever

00:06:13,090 --> 00:06:17,260
space is left after the select the

00:06:15,730 --> 00:06:17,890
button and all the margins have been

00:06:17,260 --> 00:06:19,720
accounted for

00:06:17,890 --> 00:06:21,670
and I don't have to do any math to

00:06:19,720 --> 00:06:23,500
figure out what value this should be I

00:06:21,670 --> 00:06:26,740
just tell them to flex and let the

00:06:23,500 --> 00:06:28,270
browser figure out the math so I can

00:06:26,740 --> 00:06:31,000
also at the same time that I do this

00:06:28,270 --> 00:06:32,890
keep the percentage widths in place for

00:06:31,000 --> 00:06:37,210
non supporting browsers and add these

00:06:32,890 --> 00:06:38,680
flex values on top as an enhancement the

00:06:37,210 --> 00:06:40,180
second problem with the original that I

00:06:38,680 --> 00:06:42,160
wanted to fix is that there's a slight

00:06:40,180 --> 00:06:43,750
misalignment of the fields across the

00:06:42,160 --> 00:06:45,850
line even though I set the same padding

00:06:43,750 --> 00:06:48,160
on all of them this shows two different

00:06:45,850 --> 00:06:49,450
browsers again I could fix this by

00:06:48,160 --> 00:06:51,400
adjusting all the padding's

00:06:49,450 --> 00:06:54,240
but it is browser dependent so it's

00:06:51,400 --> 00:06:57,280
really annoying hard to get perfect a

00:06:54,240 --> 00:06:59,650
more reliable and easier fix is to just

00:06:57,280 --> 00:07:02,680
turn on flexbox for each field wrapper

00:06:59,650 --> 00:07:04,870
because flex items across a row are

00:07:02,680 --> 00:07:07,750
equal height by default so with its

00:07:04,870 --> 00:07:09,970
wrapper a Flex container each field will

00:07:07,750 --> 00:07:13,330
stretch to match the tallest one on its

00:07:09,970 --> 00:07:15,970
line so these two lines of CSS in pink

00:07:13,330 --> 00:07:17,590
fix the height mismatch in five seconds

00:07:15,970 --> 00:07:19,030
and actually you can write it as one

00:07:17,590 --> 00:07:21,400
line because you can leave the second

00:07:19,030 --> 00:07:23,320
off it's the default value so although

00:07:21,400 --> 00:07:25,510
the visual effect isn't huge in this

00:07:23,320 --> 00:07:29,740
case neither is the effort to polish up

00:07:25,510 --> 00:07:31,090
this form none of the Flex box changes

00:07:29,740 --> 00:07:32,920
that I made to the form have to be

00:07:31,090 --> 00:07:34,720
hidden from older browsers they simply

00:07:32,920 --> 00:07:36,670
override existing properties and

00:07:34,720 --> 00:07:38,290
browsers that understand them which

00:07:36,670 --> 00:07:41,890
makes it really easy to progressively

00:07:38,290 --> 00:07:43,630
enhance this form ie 9 and earlier we'll

00:07:41,890 --> 00:07:45,610
see the top version which looks a bit

00:07:43,630 --> 00:07:47,290
different but it's still usable and just

00:07:45,610 --> 00:07:50,020
about everyone else will see the bottom

00:07:47,290 --> 00:07:52,360
version I think this enhancement is

00:07:50,020 --> 00:07:54,070
worthwhile to add because even though

00:07:52,360 --> 00:07:55,300
the Flex box form does use the same

00:07:54,070 --> 00:07:57,699
break points as the floater

00:07:55,300 --> 00:08:00,159
original the fields inside are more

00:07:57,699 --> 00:08:02,080
responsive to their content so overall

00:08:00,159 --> 00:08:04,000
the layout of the fields looks more

00:08:02,080 --> 00:08:08,349
proportional inside each of these

00:08:04,000 --> 00:08:10,419
breakpoints content-driven breakpoints

00:08:08,349 --> 00:08:12,460
are better than device size breakpoints

00:08:10,419 --> 00:08:15,280
but they are still a decision that

00:08:12,460 --> 00:08:17,110
you're making based on what is best for

00:08:15,280 --> 00:08:19,479
hopefully the majority of your content

00:08:17,110 --> 00:08:22,020
but not every component or piece of

00:08:19,479 --> 00:08:24,550
content on every page at every moment

00:08:22,020 --> 00:08:26,349
flexbox can enhance your components to

00:08:24,550 --> 00:08:30,069
be more responsive within your

00:08:26,349 --> 00:08:32,229
breakpoints the job forum was just a

00:08:30,069 --> 00:08:34,719
demo but we do use flexbox in a similar

00:08:32,229 --> 00:08:36,279
way live at booking comm on our customer

00:08:34,719 --> 00:08:40,000
service forum which uses a fluid

00:08:36,279 --> 00:08:41,529
responsive layout using flex the fields

00:08:40,000 --> 00:08:43,839
fill the full width of their container

00:08:41,529 --> 00:08:47,320
no matter its size switching from

00:08:43,839 --> 00:08:49,899
stacked to 2x2 automatically as soon as

00:08:47,320 --> 00:08:52,029
they can fit beside each other and by

00:08:49,899 --> 00:08:55,029
automatically I mean no media queries

00:08:52,029 --> 00:08:57,250
this is all of the CSS that's needed to

00:08:55,029 --> 00:08:59,380
create those two layouts there's no

00:08:57,250 --> 00:09:01,720
media queries because the browser

00:08:59,380 --> 00:09:04,899
figures out the breakpoint for you using

00:09:01,720 --> 00:09:06,640
flexbox the Flex property again is

00:09:04,899 --> 00:09:09,459
simply an enhancement on top of the

00:09:06,640 --> 00:09:11,290
floating and the percentage with that

00:09:09,459 --> 00:09:15,459
control the layout of the form when Flex

00:09:11,290 --> 00:09:19,089
box isn't available so the starter non

00:09:15,459 --> 00:09:21,790
flex box version of the form layout seen

00:09:19,089 --> 00:09:22,630
in IE seven through nine it has the same

00:09:21,790 --> 00:09:24,790
two layouts

00:09:22,630 --> 00:09:26,260
they just don't stretch to be full width

00:09:24,790 --> 00:09:28,720
but I think that this small difference

00:09:26,260 --> 00:09:31,420
is an acceptable trade-off for being

00:09:28,720 --> 00:09:33,399
able to write just a few lines of CSS no

00:09:31,420 --> 00:09:35,230
media queries and being completely done

00:09:33,399 --> 00:09:38,140
with laying out an entire responsive

00:09:35,230 --> 00:09:42,370
form let me walk you through how the CSS

00:09:38,140 --> 00:09:44,649
works so first we turn on flex box using

00:09:42,370 --> 00:09:47,350
display flex on the container that turns

00:09:44,649 --> 00:09:50,620
the form into a Flex container and the

00:09:47,350 --> 00:09:52,720
child fields into Flex items by default

00:09:50,620 --> 00:09:55,630
this puts the items horizontally on a

00:09:52,720 --> 00:09:57,579
single row but flex wrap wrap allows

00:09:55,630 --> 00:10:00,250
them to wrap onto multiple rows as

00:09:57,579 --> 00:10:02,890
needed so if I didn't have flex wrap

00:10:00,250 --> 00:10:04,899
wrap set the fields would always say on

00:10:02,890 --> 00:10:06,399
run one row no matter what even if

00:10:04,899 --> 00:10:08,230
content has to be cut off or they

00:10:06,399 --> 00:10:10,840
overflow out of their container

00:10:08,230 --> 00:10:13,090
but with flexwrap they will be stacked

00:10:10,840 --> 00:10:14,950
on narrow screens and then automatically

00:10:13,090 --> 00:10:17,640
switched to side-by-side when there's

00:10:14,950 --> 00:10:20,350
room for them to fit it's similar to

00:10:17,640 --> 00:10:22,270
changing flex direction from column to

00:10:20,350 --> 00:10:24,310
row and a media query but without

00:10:22,270 --> 00:10:26,590
needing any media query so the

00:10:24,310 --> 00:10:29,980
breakpoint can happen automatically in a

00:10:26,590 --> 00:10:31,750
more natural spot with less CSS so the

00:10:29,980 --> 00:10:34,720
fields do say row orientation the whole

00:10:31,750 --> 00:10:36,700
time it's just that they may form up to

00:10:34,720 --> 00:10:40,960
four rows when the viewport is narrow

00:10:36,700 --> 00:10:42,490
which then looks like one column so then

00:10:40,960 --> 00:10:44,860
the question is what makes them decide

00:10:42,490 --> 00:10:46,540
to wrap the browser wraps them when it

00:10:44,860 --> 00:10:48,880
can't fit them on one line but how does

00:10:46,540 --> 00:10:51,310
it know they can't fit at a certain

00:10:48,880 --> 00:10:53,470
point this is where their flex values

00:10:51,310 --> 00:10:55,720
come in so let me define the Flex

00:10:53,470 --> 00:10:58,570
property first before explaining this

00:10:55,720 --> 00:11:00,580
particular value of the property so the

00:10:58,570 --> 00:11:02,500
Flex property is set on Flex items to

00:11:00,580 --> 00:11:04,750
assign them a proportional size it

00:11:02,500 --> 00:11:07,120
affects either their width or their

00:11:04,750 --> 00:11:08,980
height whichever is the main size and

00:11:07,120 --> 00:11:13,180
that's the dimension along the main axis

00:11:08,980 --> 00:11:15,310
so the main axis is simply the set by

00:11:13,180 --> 00:11:17,590
Flex direction so flex Direction is set

00:11:15,310 --> 00:11:20,500
to row my main axis is horizontal and

00:11:17,590 --> 00:11:22,630
width is my main size if flex Direction

00:11:20,500 --> 00:11:26,250
is set to column my main axis is

00:11:22,630 --> 00:11:28,870
vertical and height is my main size and

00:11:26,250 --> 00:11:32,080
there's up to three components to a flex

00:11:28,870 --> 00:11:33,910
value as it's a shorthand property flex

00:11:32,080 --> 00:11:36,340
grow means how much the Flex item will

00:11:33,910 --> 00:11:39,400
grow relative to other items if there's

00:11:36,340 --> 00:11:41,560
extra space available flex rank means

00:11:39,400 --> 00:11:42,880
how much the item will shrink relative

00:11:41,560 --> 00:11:45,370
to others if there's not enough space

00:11:42,880 --> 00:11:48,550
and both flex grow and flex shrink are

00:11:45,370 --> 00:11:50,740
set to unitless integers like zero one

00:11:48,550 --> 00:11:53,650
two since they are specifying a

00:11:50,740 --> 00:11:55,330
proportion not an absolute value it's

00:11:53,650 --> 00:11:58,990
like the number of shares of extra space

00:11:55,330 --> 00:12:01,120
that they get Flex basis is the initial

00:11:58,990 --> 00:12:03,100
starting dimension before free space is

00:12:01,120 --> 00:12:04,930
added on or taken away from the item and

00:12:03,100 --> 00:12:07,330
it's set to any standard with their

00:12:04,930 --> 00:12:09,040
height value including Auto which

00:12:07,330 --> 00:12:12,040
basically sizes the item according to

00:12:09,040 --> 00:12:14,440
its content for example on the

00:12:12,040 --> 00:12:18,190
booking.com customer service form flex

00:12:14,440 --> 00:12:21,310
basis is set to 40% so that's the

00:12:18,190 --> 00:12:21,670
starting point each field will be 40% of

00:12:21,310 --> 00:12:23,890
the width

00:12:21,670 --> 00:12:26,110
of its container and then the browser

00:12:23,890 --> 00:12:28,600
looks at the Flex grow and flex shrink

00:12:26,110 --> 00:12:31,170
values to decide whether to get bigger

00:12:28,600 --> 00:12:33,940
or smaller than the Flex basis value

00:12:31,170 --> 00:12:36,190
Flex shrink the second value set to zero

00:12:33,940 --> 00:12:39,100
doesn't let the field shrink smaller

00:12:36,190 --> 00:12:40,600
than 40 percent effectively this means

00:12:39,100 --> 00:12:43,570
that the most we can ever have an align

00:12:40,600 --> 00:12:46,030
together is two right because three or

00:12:43,570 --> 00:12:48,250
four forty percent wide items are never

00:12:46,030 --> 00:12:51,250
going to fit on a line together so

00:12:48,250 --> 00:12:55,060
that's why the form only gets two into a

00:12:51,250 --> 00:12:57,790
two by two layout at its widest flex

00:12:55,060 --> 00:12:59,920
grow the first value set to one means

00:12:57,790 --> 00:13:03,160
that each field will get one share of

00:12:59,920 --> 00:13:05,110
any available extra width on a line and

00:13:03,160 --> 00:13:07,900
this is what ensures that the form is

00:13:05,110 --> 00:13:09,370
always full width because it tells each

00:13:07,900 --> 00:13:12,280
field to stretch to take up whatever

00:13:09,370 --> 00:13:14,530
space is left over after the 40 percent

00:13:12,280 --> 00:13:18,850
flex basis and the pixel margin and

00:13:14,530 --> 00:13:20,500
padding have been accounted for so

00:13:18,850 --> 00:13:22,990
basically what happens is when the

00:13:20,500 --> 00:13:25,450
viewport gets narrow the combination of

00:13:22,990 --> 00:13:27,820
the percentage flex basis size and the

00:13:25,450 --> 00:13:30,700
pixel margin and padding makes two

00:13:27,820 --> 00:13:33,550
inputs add up to more than 100% which

00:13:30,700 --> 00:13:34,840
forces them to wrap and stack the same

00:13:33,550 --> 00:13:36,310
thing happens with the float version

00:13:34,840 --> 00:13:39,010
this is not a new sort of layout

00:13:36,310 --> 00:13:41,590
behavior but with the Flex value as an

00:13:39,010 --> 00:13:44,380
enhancement the Flex grow piece of that

00:13:41,590 --> 00:13:46,420
value flex grow set to one ensures that

00:13:44,380 --> 00:13:48,550
when the wrap happens each field

00:13:46,420 --> 00:13:50,410
stretches to fill the width perfectly

00:13:48,550 --> 00:13:53,650
rather than remaining 40 percent wide

00:13:50,410 --> 00:13:54,790
and again flex box overrides the

00:13:53,650 --> 00:13:56,980
floating and the width values

00:13:54,790 --> 00:13:59,020
automatically so the Flex property can

00:13:56,980 --> 00:14:00,640
be added on to the same rule without

00:13:59,020 --> 00:14:03,460
having to hide anything from non

00:14:00,640 --> 00:14:06,340
supporting browsers so three extra lines

00:14:03,460 --> 00:14:08,080
flex box CSS made this form much more

00:14:06,340 --> 00:14:11,610
responsive to the space available and

00:14:08,080 --> 00:14:13,690
all without having to use a media query

00:14:11,610 --> 00:14:15,280
another place on booking.com

00:14:13,690 --> 00:14:17,320
where we change the layout without a

00:14:15,280 --> 00:14:19,660
media query is within the map info

00:14:17,320 --> 00:14:22,600
windows that show when you click on a

00:14:19,660 --> 00:14:24,970
marker I had the task to add a message

00:14:22,600 --> 00:14:27,490
about the room price that you see being

00:14:24,970 --> 00:14:29,040
almost sold out and the logical place to

00:14:27,490 --> 00:14:31,120
put it soon to be next to the price

00:14:29,040 --> 00:14:33,130
especially since there's often a big gap

00:14:31,120 --> 00:14:35,110
there and this is what that would look

00:14:33,130 --> 00:14:37,149
like the price and the message

00:14:35,110 --> 00:14:38,619
are visually connected and the message

00:14:37,149 --> 00:14:42,069
kind of leads you to the the

00:14:38,619 --> 00:14:43,540
call-to-action button so I like this but

00:14:42,069 --> 00:14:46,629
the problem is that there is not always

00:14:43,540 --> 00:14:49,119
a big gap there rack rate pricing long

00:14:46,629 --> 00:14:52,209
languages long currencies can all take

00:14:49,119 --> 00:14:54,639
up a lot of space in this case this is

00:14:52,209 --> 00:14:56,110
due to variable content but the same

00:14:54,639 --> 00:14:58,240
issue applies in responsive web design

00:14:56,110 --> 00:15:02,019
of course where the width that you have

00:14:58,240 --> 00:15:03,850
available in varies that you have

00:15:02,019 --> 00:15:06,429
something sorry the width that you have

00:15:03,850 --> 00:15:08,829
available to put something in varies as

00:15:06,429 --> 00:15:11,019
the viewport width changes size so in

00:15:08,829 --> 00:15:13,089
both cases I have the problem of wanting

00:15:11,019 --> 00:15:16,139
to put something in a spot but not being

00:15:13,089 --> 00:15:19,509
sure if that spot is always big enough

00:15:16,139 --> 00:15:21,339
what I would like to happen is that the

00:15:19,509 --> 00:15:23,110
text sits beside the price if there's

00:15:21,339 --> 00:15:25,569
enough room and then when the space

00:15:23,110 --> 00:15:27,699
shrinks below some minimum width that I

00:15:25,569 --> 00:15:29,679
set it drops down onto the following

00:15:27,699 --> 00:15:32,709
line and then it stretches to take up

00:15:29,679 --> 00:15:34,809
the full width now without an explicit

00:15:32,709 --> 00:15:38,259
width on the availability message the

00:15:34,809 --> 00:15:41,589
red text making it float or inline block

00:15:38,259 --> 00:15:44,259
will not let its text wrap so this first

00:15:41,589 --> 00:15:46,179
image with the red text wrapping could

00:15:44,259 --> 00:15:48,279
not happen the text would want to stay

00:15:46,179 --> 00:15:51,790
all in one line and so it would always

00:15:48,279 --> 00:15:54,339
drop below the price table cell will at

00:15:51,790 --> 00:15:56,230
the text wrap within that area but it

00:15:54,339 --> 00:15:58,120
won't let the entire block wrap down

00:15:56,230 --> 00:16:00,550
below the price when there's not enough

00:15:58,120 --> 00:16:02,319
room or when the space is just too

00:16:00,550 --> 00:16:04,899
narrow for that text to look good there

00:16:02,319 --> 00:16:07,809
so this second image with the red text

00:16:04,899 --> 00:16:09,579
below couldn't happen so that leaves

00:16:07,809 --> 00:16:11,350
Flex box which is kind of like the best

00:16:09,579 --> 00:16:14,079
of both worlds and lets me have both of

00:16:11,350 --> 00:16:15,850
these languages with one piece of CSS or

00:16:14,079 --> 00:16:18,009
both of these layouts with one you know

00:16:15,850 --> 00:16:20,980
piece of CSS so I get the stretch and

00:16:18,009 --> 00:16:23,799
squish behavior of table cell but it

00:16:20,980 --> 00:16:25,990
lets the boxes wrap if if I tell it to

00:16:23,799 --> 00:16:28,360
and if it needs to based on the space

00:16:25,990 --> 00:16:33,040
available and again it does this without

00:16:28,360 --> 00:16:35,079
media queries so IE 7 8 & 9 users will

00:16:33,040 --> 00:16:37,540
simply see the availab available 'ti

00:16:35,079 --> 00:16:40,720
message always below the price which

00:16:37,540 --> 00:16:42,999
doesn't look bad or broken the few line

00:16:40,720 --> 00:16:45,579
of lines of flexbox code are then

00:16:42,999 --> 00:16:48,910
layered on top as an enhancement for the

00:16:45,579 --> 00:16:49,180
vast majority of users and flex box is

00:16:48,910 --> 00:16:50,800
great

00:16:49,180 --> 00:16:53,980
for this sort of micro layout stuff

00:16:50,800 --> 00:16:57,070
managing the sizing and spacing of items

00:16:53,980 --> 00:16:58,480
within a component or module you can use

00:16:57,070 --> 00:16:59,920
flex locks in a similar way and

00:16:58,480 --> 00:17:01,960
responsive designs where you have a

00:16:59,920 --> 00:17:04,120
component that sometimes has room for

00:17:01,960 --> 00:17:06,790
its sub items to sit side by side and

00:17:04,120 --> 00:17:08,590
sometimes needs them to stack without

00:17:06,790 --> 00:17:12,550
you having to figure out at what point

00:17:08,590 --> 00:17:14,530
that happens another example of how flex

00:17:12,550 --> 00:17:17,200
box can handle wrapping more elegantly

00:17:14,530 --> 00:17:19,120
is in what we call the mini info windows

00:17:17,200 --> 00:17:21,880
on our maps that show when you hover

00:17:19,120 --> 00:17:23,950
over a marker I use flexbox to layout

00:17:21,880 --> 00:17:27,430
the review score and the price on

00:17:23,950 --> 00:17:28,900
opposite sides of the same line again I

00:17:27,430 --> 00:17:31,210
couldn't give either of these two blocks

00:17:28,900 --> 00:17:32,920
a width even in a relative unit of

00:17:31,210 --> 00:17:36,820
measurement because the length of the

00:17:32,920 --> 00:17:39,550
content in each can vary wildly without

00:17:36,820 --> 00:17:42,250
set widths inline-block would not move

00:17:39,550 --> 00:17:45,070
the price the price block to the right

00:17:42,250 --> 00:17:46,720
side so that was out table-cell worked

00:17:45,070 --> 00:17:48,970
fine without set widths but if the

00:17:46,720 --> 00:17:50,890
content was long the two pieces could

00:17:48,970 --> 00:17:52,390
overlap instead of the second block

00:17:50,890 --> 00:17:53,640
wrapping to new line which would be

00:17:52,390 --> 00:17:56,710
completely unacceptable

00:17:53,640 --> 00:17:59,680
that left floating and flexbox as my

00:17:56,710 --> 00:18:01,690
layout options floating worked but when

00:17:59,680 --> 00:18:03,760
the content was long and the price

00:18:01,690 --> 00:18:05,290
wrapped to a second line as in this

00:18:03,760 --> 00:18:08,890
screenshot down here with the long

00:18:05,290 --> 00:18:12,280
German words it would stay right aligned

00:18:08,890 --> 00:18:15,100
which looks awkward so I decided to use

00:18:12,280 --> 00:18:17,290
both float for older browsers and then I

00:18:15,100 --> 00:18:20,080
overrode it with Flex box which lets the

00:18:17,290 --> 00:18:23,680
text wrap to the left edge more

00:18:20,080 --> 00:18:25,840
elegantly I didn't have to use modernizr

00:18:23,680 --> 00:18:28,600
and hide pieces of CSS from certain

00:18:25,840 --> 00:18:30,790
browsers flexbox just takes over if the

00:18:28,600 --> 00:18:33,040
browser understands it so no matter what

00:18:30,790 --> 00:18:35,590
the two blocks will appear side by side

00:18:33,040 --> 00:18:37,750
in all browsers and they will wrap when

00:18:35,590 --> 00:18:39,400
needed the wrapping and alignment of the

00:18:37,750 --> 00:18:42,070
text just isn't quite as nice looking

00:18:39,400 --> 00:18:43,690
and non flexbox browsers but that was

00:18:42,070 --> 00:18:48,610
going to happen whether or not I added

00:18:43,690 --> 00:18:50,260
flex box here I made a demo to show you

00:18:48,610 --> 00:18:52,210
how this improved wrapping behavior can

00:18:50,260 --> 00:18:55,420
come in handy on responsive sites

00:18:52,210 --> 00:18:57,490
specifically this article header uses

00:18:55,420 --> 00:18:58,450
flex box as an enhancement on top of

00:18:57,490 --> 00:19:01,150
display:table-cell

00:18:58,450 --> 00:19:01,740
to layout an align its various chunks of

00:19:01,150 --> 00:19:04,150
con

00:19:01,740 --> 00:19:07,240
and it switches the layout automatically

00:19:04,150 --> 00:19:09,670
without a media query this header block

00:19:07,240 --> 00:19:11,170
is basically a media block UI pattern

00:19:09,670 --> 00:19:13,330
that you see everywhere right with an

00:19:11,170 --> 00:19:15,640
image plus a block of text associated

00:19:13,330 --> 00:19:17,800
with it except here the text portion

00:19:15,640 --> 00:19:19,990
stretches to fill the whole width and

00:19:17,800 --> 00:19:22,600
the whole height available thanks to

00:19:19,990 --> 00:19:29,800
flex on the category the green block and

00:19:22,600 --> 00:19:32,050
align content on the multiple rows using

00:19:29,800 --> 00:19:33,670
flex to push the date to the opposite

00:19:32,050 --> 00:19:35,710
side is a great enhancement for what

00:19:33,670 --> 00:19:37,750
happens when there's not enough room to

00:19:35,710 --> 00:19:39,640
fit both the category and the date on

00:19:37,750 --> 00:19:41,410
the same line such as when the viewport

00:19:39,640 --> 00:19:45,490
is very narrow or the content is very

00:19:41,410 --> 00:19:47,380
long or both there's lots of ways to

00:19:45,490 --> 00:19:50,380
align content to opposite sides of a

00:19:47,380 --> 00:19:52,780
line with the old existing CSS that

00:19:50,380 --> 00:19:54,790
we've had forever but if I used floating

00:19:52,780 --> 00:19:56,830
or text the line to push the date to the

00:19:54,790 --> 00:19:58,660
right side when the day needed to wrap

00:19:56,830 --> 00:20:00,940
it would wrap down to the right edge

00:19:58,660 --> 00:20:04,420
just like in the mini info windows on

00:20:00,940 --> 00:20:06,250
the maps which looks kind of weird using

00:20:04,420 --> 00:20:10,120
flex instead it wraps to the left side

00:20:06,250 --> 00:20:11,800
which looks a lot more natural this is

00:20:10,120 --> 00:20:14,020
not the only alignment enhancement that

00:20:11,800 --> 00:20:16,750
flexbox can accomplish that no other CSS

00:20:14,020 --> 00:20:18,610
can produce I briefly showed you the

00:20:16,750 --> 00:20:20,530
line content property on this this

00:20:18,610 --> 00:20:22,540
header but there are two other flex box

00:20:20,530 --> 00:20:25,950
alignment properties that allow you to

00:20:22,540 --> 00:20:28,270
align content in new ways really simply

00:20:25,950 --> 00:20:29,500
which is invaluable and responsive

00:20:28,270 --> 00:20:32,070
designs where the content wraps

00:20:29,500 --> 00:20:35,260
differently at different viewport widths

00:20:32,070 --> 00:20:37,210
for instance flexbox can distribute an

00:20:35,260 --> 00:20:39,940
unknown number of items across an

00:20:37,210 --> 00:20:42,850
unknown an area of unknown width or

00:20:39,940 --> 00:20:45,040
height such as making a navbar full

00:20:42,850 --> 00:20:47,920
width with equal spaces in between all

00:20:45,040 --> 00:20:50,110
of the links if you wanted to make a

00:20:47,920 --> 00:20:52,960
navbar like this you'd probably first

00:20:50,110 --> 00:20:54,870
turn to display:table-cell and you would

00:20:52,960 --> 00:20:57,490
be able to make the nav full width and

00:20:54,870 --> 00:20:59,800
have the first and last links at the

00:20:57,490 --> 00:21:02,620
edges and you could even make each of

00:20:59,800 --> 00:21:05,410
the link boxes equal in width to each

00:21:02,620 --> 00:21:06,790
other if used table layout fixed but you

00:21:05,410 --> 00:21:09,370
would discover that you could not get

00:21:06,790 --> 00:21:12,850
equal spaces between the text block of

00:21:09,370 --> 00:21:15,340
each link so if I do display table and

00:21:12,850 --> 00:21:17,860
table layout fixed on a ul

00:21:15,340 --> 00:21:19,270
makes each Li the same width so they

00:21:17,860 --> 00:21:22,030
look equally spaced if they have

00:21:19,270 --> 00:21:23,830
backgrounds or borders but remove the

00:21:22,030 --> 00:21:26,740
backgrounds and borders and you see that

00:21:23,830 --> 00:21:30,010
the gaps actual the gaps between the

00:21:26,740 --> 00:21:31,810
actual links text is not equal so longer

00:21:30,010 --> 00:21:34,600
links have smaller spaces around them

00:21:31,810 --> 00:21:36,610
short links have bigger spaces but

00:21:34,600 --> 00:21:40,660
flexbox can fix these unequal gaps

00:21:36,610 --> 00:21:44,070
really simply here is a simple navbar

00:21:40,660 --> 00:21:46,630
from my flexbox demo site smores data us

00:21:44,070 --> 00:21:49,030
for the starter layout i used inline

00:21:46,630 --> 00:21:51,070
block to Center the links in a row under

00:21:49,030 --> 00:21:52,960
the logo they don't stretch full width

00:21:51,070 --> 00:21:55,660
but there's nothing broken or wrong

00:21:52,960 --> 00:21:58,030
looking and it works as a layout in the

00:21:55,660 --> 00:21:59,770
responsive page but there's no reason

00:21:58,030 --> 00:22:02,500
why I can't add a few lines of flexbox

00:21:59,770 --> 00:22:05,070
on top of this CSS to enhance the

00:22:02,500 --> 00:22:07,420
responsiveness of the nav further I

00:22:05,070 --> 00:22:11,080
simply added these two lines of flexbox

00:22:07,420 --> 00:22:13,090
in pink to the existing rules the Li are

00:22:11,080 --> 00:22:14,920
still set to inline block but now their

00:22:13,090 --> 00:22:18,760
Flex items too so I can take advantage

00:22:14,920 --> 00:22:23,050
of these new alignment properties within

00:22:18,760 --> 00:22:25,870
flexbox such as justify content setting

00:22:23,050 --> 00:22:28,660
justify content to space between moves

00:22:25,870 --> 00:22:30,720
the first and last Li to the edges and

00:22:28,660 --> 00:22:34,720
it equally distributes the space

00:22:30,720 --> 00:22:36,880
remaining in between the other links so

00:22:34,720 --> 00:22:38,950
using justify content space between here

00:22:36,880 --> 00:22:41,560
is how the nav then looks on medium

00:22:38,950 --> 00:22:43,360
width screens the links stretch out in

00:22:41,560 --> 00:22:45,960
the Flex box version and they remain

00:22:43,360 --> 00:22:48,220
centered in the non flex box browsers

00:22:45,960 --> 00:22:50,230
now having the nav filling the full

00:22:48,220 --> 00:22:52,300
width looks great on medium width

00:22:50,230 --> 00:22:54,520
screens like this but on really wide

00:22:52,300 --> 00:22:57,070
screens it starts looking too stretched

00:22:54,520 --> 00:22:59,920
out I wanted to make it more responsive

00:22:57,070 --> 00:23:02,350
to this extra space so I decided to use

00:22:59,920 --> 00:23:04,390
flexbox to pin the first two links to

00:23:02,350 --> 00:23:05,920
the left side of the logo and the last

00:23:04,390 --> 00:23:09,360
two links to the right side of the logo

00:23:05,920 --> 00:23:13,630
again a pretty common responsive nav

00:23:09,360 --> 00:23:15,580
layout to do this I first added a media

00:23:13,630 --> 00:23:17,410
query for wide screens so you do

00:23:15,580 --> 00:23:18,520
sometimes need to still use media

00:23:17,410 --> 00:23:21,280
queries with flexbox

00:23:18,520 --> 00:23:23,380
and I also edit a link to the moderniser

00:23:21,280 --> 00:23:26,380
script because I need to feed some

00:23:23,380 --> 00:23:28,180
styles to only flexbox browsers in this

00:23:26,380 --> 00:23:29,049
particular case as you'll see in just a

00:23:28,180 --> 00:23:32,029
minute

00:23:29,049 --> 00:23:35,179
much of the time flex locks and fallback

00:23:32,029 --> 00:23:36,740
styles can coexist as they did with the

00:23:35,179 --> 00:23:38,990
medium width version of the navbar that

00:23:36,740 --> 00:23:40,580
I just showed you but occasionally

00:23:38,990 --> 00:23:42,950
they'll conflict and you'll only want to

00:23:40,580 --> 00:23:45,980
apply a certain property if Flex box is

00:23:42,950 --> 00:23:48,259
in effect or not the modernize our

00:23:45,980 --> 00:23:50,509
script is perfect for this it can detect

00:23:48,259 --> 00:23:52,639
whether the browser does or doesn't

00:23:50,509 --> 00:23:54,710
support Flex box and whether it supports

00:23:52,639 --> 00:23:56,929
an old version or the current version

00:23:54,710 --> 00:23:59,389
and then adds the appropriate classes to

00:23:56,929 --> 00:24:02,690
your HTML tag which you can use to scope

00:23:59,389 --> 00:24:04,369
the rules in your CSS if you don't like

00:24:02,690 --> 00:24:06,499
moderniser and you want to keep the

00:24:04,369 --> 00:24:09,919
feature detection in your CSS you can

00:24:06,499 --> 00:24:12,379
also use the @ supports rule to detect

00:24:09,919 --> 00:24:14,869
whether the browser supports Lex box and

00:24:12,379 --> 00:24:17,809
feed rules only in that case to do

00:24:14,869 --> 00:24:19,970
something like this so at supports and

00:24:17,809 --> 00:24:21,830
moderniser are both good options for

00:24:19,970 --> 00:24:24,529
those rare cases when you do need to

00:24:21,830 --> 00:24:28,309
isolate your flex box styles from your

00:24:24,529 --> 00:24:31,399
other CSS for my navbar here

00:24:28,309 --> 00:24:33,499
I used modernizers flex box class to

00:24:31,399 --> 00:24:35,840
scope this new rule to only flex flex

00:24:33,499 --> 00:24:38,960
browsers where I want the nav to move up

00:24:35,840 --> 00:24:40,700
on the to the same line as the logo non

00:24:38,960 --> 00:24:43,249
supporting browsers will not use this

00:24:40,700 --> 00:24:45,889
rule so they will still get the inline

00:24:43,249 --> 00:24:47,749
block centered nav beneath the logo only

00:24:45,889 --> 00:24:51,559
the Flex box version of the nav will

00:24:47,749 --> 00:24:53,600
move up now to move the last two links

00:24:51,559 --> 00:24:57,139
to the right side I simply set

00:24:53,600 --> 00:24:59,269
margin-left:auto on the third link the

00:24:57,139 --> 00:25:01,429
throw party link again scoped to only

00:24:59,269 --> 00:25:03,230
flex box browsers and the reason that

00:25:01,429 --> 00:25:04,999
this works is that in Flex box if you

00:25:03,230 --> 00:25:07,730
set a margin and the main access to auto

00:25:04,999 --> 00:25:11,090
it takes up all of the free space that's

00:25:07,730 --> 00:25:12,679
left in that line so with

00:25:11,090 --> 00:25:14,600
margin-left:auto on the throw a party

00:25:12,679 --> 00:25:16,809
link the browser places all of extra

00:25:14,600 --> 00:25:19,190
space in the line to its left side

00:25:16,809 --> 00:25:22,460
effectively pushing it and all the stuff

00:25:19,190 --> 00:25:24,259
after it to the right edge so I get that

00:25:22,460 --> 00:25:26,809
parents of a split list without having

00:25:24,259 --> 00:25:29,299
to cheat and break it into two lists in

00:25:26,809 --> 00:25:31,580
the HTML which is less accessible and

00:25:29,299 --> 00:25:33,230
robust not so good for responsive web

00:25:31,580 --> 00:25:37,940
design where I'm trying to keep my HTML

00:25:33,230 --> 00:25:40,490
the same at all viewport widths this is

00:25:37,940 --> 00:25:41,750
a simple navbar but thanks to a bit of

00:25:40,490 --> 00:25:43,300
flex box it can

00:25:41,750 --> 00:25:46,190
make full use of the changing width

00:25:43,300 --> 00:25:50,600
flexbox increases its responsiveness as

00:25:46,190 --> 00:25:52,370
an enhancement where available flex box

00:25:50,600 --> 00:25:54,080
is not only a great way to make better

00:25:52,370 --> 00:25:55,490
use of the changing widths in a

00:25:54,080 --> 00:25:58,010
responsive layout but also to make

00:25:55,490 --> 00:25:59,840
better use of the changing heights so as

00:25:58,010 --> 00:26:02,150
the viewport changes with your content

00:25:59,840 --> 00:26:04,600
wraps differently so you can't count on

00:26:02,150 --> 00:26:07,190
constant Heights for your content blocks

00:26:04,600 --> 00:26:09,590
flex box can enhance the appearance of

00:26:07,190 --> 00:26:12,470
this variable height because it works in

00:26:09,590 --> 00:26:16,300
any direction so let's say that I want

00:26:12,470 --> 00:26:18,920
to show some social media sharing icons

00:26:16,300 --> 00:26:22,130
down the side of each article or media

00:26:18,920 --> 00:26:24,410
object and that media object content

00:26:22,130 --> 00:26:26,330
varies as does the viewport width which

00:26:24,410 --> 00:26:29,000
controls wrapping so the height of each

00:26:26,330 --> 00:26:31,520
varies and if I want to equally spaced

00:26:29,000 --> 00:26:33,590
the icons vertically to take up the full

00:26:31,520 --> 00:26:36,170
height I am out of luck

00:26:33,590 --> 00:26:39,290
I cannot explicitly set each of them to

00:26:36,170 --> 00:26:41,510
height 33% because the parent media

00:26:39,290 --> 00:26:44,060
object has no explicitly set height

00:26:41,510 --> 00:26:46,550
itself to base these percentages off of

00:26:44,060 --> 00:26:48,920
so percentage height value does nothing

00:26:46,550 --> 00:26:52,010
here but I don't need the height

00:26:48,920 --> 00:26:53,750
property with Flex box first I make the

00:26:52,010 --> 00:26:56,570
icon section and the content section

00:26:53,750 --> 00:27:00,020
Flex items with the default horizontal

00:26:56,570 --> 00:27:02,150
row alignment and I do this because I

00:27:00,020 --> 00:27:04,010
need them to be equal height and sibling

00:27:02,150 --> 00:27:06,320
flex items are equal height by default

00:27:04,010 --> 00:27:09,500
thanks to the line items properties set

00:27:06,320 --> 00:27:11,450
to stretch by default you can't see it

00:27:09,500 --> 00:27:13,190
here because the icons are still top

00:27:11,450 --> 00:27:16,160
aligned within their section but if the

00:27:13,190 --> 00:27:18,530
two sections had background colors you

00:27:16,160 --> 00:27:22,000
would see that icon section stretches to

00:27:18,530 --> 00:27:22,000
match the height of the content section

00:27:22,630 --> 00:27:28,700
so now the icon and the content section

00:27:25,580 --> 00:27:30,800
are equal height flex items but the

00:27:28,700 --> 00:27:33,950
individual icon images are not flex

00:27:30,800 --> 00:27:36,110
items because only children of a Flex

00:27:33,950 --> 00:27:39,020
container become Flex items not all

00:27:36,110 --> 00:27:42,560
descendants but something can be able to

00:27:39,020 --> 00:27:45,200
flex item and a Flex container so that's

00:27:42,560 --> 00:27:47,380
what I do I turn the icons section into

00:27:45,200 --> 00:27:51,320
a Flex container that makes its three

00:27:47,380 --> 00:27:53,540
children icon images into Flex items but

00:27:51,320 --> 00:27:55,280
this time I set Flex direction to column

00:27:53,540 --> 00:27:57,950
to stack them vertically from top

00:27:55,280 --> 00:27:59,990
to bottom this doesn't change anything

00:27:57,950 --> 00:28:02,150
visually yet they already resect

00:27:59,990 --> 00:28:05,440
vertically but remember that flex

00:28:02,150 --> 00:28:08,390
direction also controls the main axis

00:28:05,440 --> 00:28:11,450
with flex direction column the icons

00:28:08,390 --> 00:28:14,840
main axis is now vertical so if I use

00:28:11,450 --> 00:28:16,670
justify content space between two it

00:28:14,840 --> 00:28:19,370
will equally spaced them over the main

00:28:16,670 --> 00:28:23,570
axis which is the height no matter how

00:28:19,370 --> 00:28:25,700
tall that is and here's the results each

00:28:23,570 --> 00:28:27,440
media object has a different height but

00:28:25,700 --> 00:28:31,910
the icons always span the full height

00:28:27,440 --> 00:28:34,310
with equal spaces in between to make

00:28:31,910 --> 00:28:36,170
this work with non flexbox browsers you

00:28:34,310 --> 00:28:38,600
can use whatever technique you normally

00:28:36,170 --> 00:28:40,010
would to get the icon block to sit next

00:28:38,600 --> 00:28:40,970
to the content block such as

00:28:40,010 --> 00:28:43,970
display:table-cell

00:28:40,970 --> 00:28:45,770
or floating both of these can work and

00:28:43,970 --> 00:28:49,010
exist with Flex Vox and the same CSS

00:28:45,770 --> 00:28:51,500
rules floating I mean flexbox just

00:28:49,010 --> 00:28:54,740
overrides the float and table properties

00:28:51,500 --> 00:28:56,990
and browsers that understand it and then

00:28:54,740 --> 00:28:59,660
non supporting browsers your the icons

00:28:56,990 --> 00:29:03,080
will be either top aligned with the text

00:28:59,660 --> 00:29:04,640
or vertically centered as a block the

00:29:03,080 --> 00:29:08,420
browsers that don't support flex box

00:29:04,640 --> 00:29:10,520
have about 5% global market share so a

00:29:08,420 --> 00:29:12,140
few users will see the non flex box

00:29:10,520 --> 00:29:14,750
versions that I've shown you in these

00:29:12,140 --> 00:29:17,630
examples but none of those versions look

00:29:14,750 --> 00:29:19,940
wrong or broken just a little different

00:29:17,630 --> 00:29:22,790
which is already happening all the time

00:29:19,940 --> 00:29:24,380
anyway flex box is simply an enhancement

00:29:22,790 --> 00:29:27,080
to make better use of the space

00:29:24,380 --> 00:29:28,730
especially between your breakpoints it's

00:29:27,080 --> 00:29:30,890
not a true grid system it wasn't

00:29:28,730 --> 00:29:33,680
designed to be so it's not the best

00:29:30,890 --> 00:29:35,690
choice for your overall page layout but

00:29:33,680 --> 00:29:38,360
it is a great choice for intelligently

00:29:35,690 --> 00:29:40,550
sizing and aligning components and

00:29:38,360 --> 00:29:45,560
smaller chunks of content within the

00:29:40,550 --> 00:29:47,510
major page page sections flex box also

00:29:45,560 --> 00:29:49,370
lets you visually rearrange content

00:29:47,510 --> 00:29:51,170
which comes in handy again on responsive

00:29:49,370 --> 00:29:53,570
sites where you're stuck with the same

00:29:51,170 --> 00:29:55,670
HTML order at all the sizes but you want

00:29:53,570 --> 00:29:57,860
to shuffle content around on different

00:29:55,670 --> 00:29:59,690
views and it's sometimes hard to make a

00:29:57,860 --> 00:30:01,160
block go where you want it to when

00:29:59,690 --> 00:30:04,460
you're tied to a certain source order

00:30:01,160 --> 00:30:06,890
but flex box makes this easier so

00:30:04,460 --> 00:30:08,750
remember the split navbar I used

00:30:06,890 --> 00:30:10,550
relative positioning and a negative

00:30:08,750 --> 00:30:12,530
top value to move the navbar up

00:30:10,550 --> 00:30:15,230
overlapping the same line as the logo

00:30:12,530 --> 00:30:17,540
which is fine but since the logo is not

00:30:15,230 --> 00:30:19,460
actually in the middle of the list the

00:30:17,540 --> 00:30:21,230
links on either side of it can overlap

00:30:19,460 --> 00:30:24,740
it if the browser window gets too small

00:30:21,230 --> 00:30:26,870
I avoid this with a media query but if

00:30:24,740 --> 00:30:28,190
the logo was actually moved in the flow

00:30:26,870 --> 00:30:30,740
to the middle of the list I wouldn't

00:30:28,190 --> 00:30:32,870
have to do this but I don't want to move

00:30:30,740 --> 00:30:35,300
the logo in the middle of the list in

00:30:32,870 --> 00:30:37,360
the HTML because on narrow screens I

00:30:35,300 --> 00:30:40,460
still want it to come before the nav

00:30:37,360 --> 00:30:44,000
with Flex box I can keep the logo in

00:30:40,460 --> 00:30:46,040
before the links in the HTML but move it

00:30:44,000 --> 00:30:49,820
visually and in the flow to the middle

00:30:46,040 --> 00:30:52,490
using the order property you set the

00:30:49,820 --> 00:30:54,530
order property on Flex items to specify

00:30:52,490 --> 00:30:57,050
which order you want the browser to lay

00:30:54,530 --> 00:30:59,510
them out in their container regardless

00:30:57,050 --> 00:31:01,250
of the HTML order and the browser runs

00:30:59,510 --> 00:31:03,560
from the lowest numbers including

00:31:01,250 --> 00:31:05,030
negative to the highest so you can think

00:31:03,560 --> 00:31:09,680
of it like assigning the items a

00:31:05,030 --> 00:31:12,320
position number in a line the first two

00:31:09,680 --> 00:31:13,910
links I want to stay first so they need

00:31:12,320 --> 00:31:16,670
the lowest order value so I'll just

00:31:13,910 --> 00:31:18,830
leave them with the default of zero the

00:31:16,670 --> 00:31:20,990
logo I want to be next so it needs the

00:31:18,830 --> 00:31:23,270
next highest order value I gave it one

00:31:20,990 --> 00:31:24,950
the last two links need to come after

00:31:23,270 --> 00:31:29,030
the logo so they need the next highest

00:31:24,950 --> 00:31:31,010
order value I gave them too so now that

00:31:29,030 --> 00:31:33,500
the logo is part of the line not

00:31:31,010 --> 00:31:36,170
separate from it it won't work to just

00:31:33,500 --> 00:31:38,840
have margin-left:auto on that third link

00:31:36,170 --> 00:31:41,990
as before because with every last bit of

00:31:38,840 --> 00:31:44,120
extra space in the line put to its left

00:31:41,990 --> 00:31:47,810
it will squish the logo over on the

00:31:44,120 --> 00:31:49,910
right side to fix this I can use two

00:31:47,810 --> 00:31:51,500
auto margins and the browser will simply

00:31:49,910 --> 00:31:54,950
divide the extra space on the line

00:31:51,500 --> 00:31:57,650
evenly between the two items with those

00:31:54,950 --> 00:32:00,080
margins so throw a party already has

00:31:57,650 --> 00:32:01,190
margin-left:auto from before but I'll

00:32:00,080 --> 00:32:03,890
sorry

00:32:01,190 --> 00:32:05,840
I'll add the same to the logo so half

00:32:03,890 --> 00:32:07,730
the extra space goes on the left side of

00:32:05,840 --> 00:32:10,010
the logo half of it goes on the left

00:32:07,730 --> 00:32:13,910
side of the throw a party link and thus

00:32:10,010 --> 00:32:15,830
the logos move to the center now in

00:32:13,910 --> 00:32:18,320
order to make this work I had to move

00:32:15,830 --> 00:32:20,540
the logo from outside the UL to inside

00:32:18,320 --> 00:32:22,190
at the same level as the other links

00:32:20,540 --> 00:32:24,650
that's because order

00:32:22,190 --> 00:32:26,630
only works on siblings within the same

00:32:24,650 --> 00:32:29,000
Flex container you cannot move elements

00:32:26,630 --> 00:32:31,280
outside of their container to be before

00:32:29,000 --> 00:32:34,190
after stuff that's outside the container

00:32:31,280 --> 00:32:36,200
this does make it limiting you have more

00:32:34,190 --> 00:32:38,960
sorcery order independence than

00:32:36,200 --> 00:32:40,370
currently out methods but you still have

00:32:38,960 --> 00:32:44,090
complete freedom to move anything

00:32:40,370 --> 00:32:45,470
anywhere this is perhaps a good thing

00:32:44,090 --> 00:32:47,840
because you don't want to go crazy

00:32:45,470 --> 00:32:50,510
moving everything around with the order

00:32:47,840 --> 00:32:52,280
property when you reorder content with

00:32:50,510 --> 00:32:54,140
Flex box you are only reordering it

00:32:52,280 --> 00:32:57,290
visually it does not change the screen

00:32:54,140 --> 00:32:59,180
reading order or the tab order so if the

00:32:57,290 --> 00:33:02,420
content that you're reordering contains

00:32:59,180 --> 00:33:05,750
text or tablet content make sure that

00:33:02,420 --> 00:33:08,630
the HTML order is logical first and then

00:33:05,750 --> 00:33:10,040
use visual reordering only if it's just

00:33:08,630 --> 00:33:13,880
decorative and doesn't change the

00:33:10,040 --> 00:33:15,560
meaning of the content I'm running out

00:33:13,880 --> 00:33:17,420
of time but let me quickly give you a

00:33:15,560 --> 00:33:20,570
simple example of accessible reordering

00:33:17,420 --> 00:33:22,730
with Flex box so on this recipe the

00:33:20,570 --> 00:33:25,370
photo comes before the ingredients list

00:33:22,730 --> 00:33:27,350
in the HTML so that on the wider view I

00:33:25,370 --> 00:33:29,840
can float it beside the ingredients and

00:33:27,350 --> 00:33:33,350
the narrow mobile view just stacks

00:33:29,840 --> 00:33:35,120
everything in the default HTML order but

00:33:33,350 --> 00:33:37,730
I could use the Flex box order property

00:33:35,120 --> 00:33:39,830
to move the photo from its HTML position

00:33:37,730 --> 00:33:42,710
before the ingredients to above the rest

00:33:39,830 --> 00:33:44,360
of title on mobile only and in this case

00:33:42,710 --> 00:33:46,130
this is not going to cause accessibility

00:33:44,360 --> 00:33:48,380
problems because there's no links in the

00:33:46,130 --> 00:33:49,970
photo to tab 2 and there's no text in

00:33:48,380 --> 00:33:51,770
the photo to be read by screen readers

00:33:49,970 --> 00:33:53,450
because I would give it no lul text

00:33:51,770 --> 00:33:56,750
because the recipe itself provides a

00:33:53,450 --> 00:33:59,360
text alternative so to move the photo

00:33:56,750 --> 00:34:01,700
and the styles outside any media queries

00:33:59,360 --> 00:34:04,640
I set flex direction to column to stack

00:34:01,700 --> 00:34:06,830
everything and I set the order value of

00:34:04,640 --> 00:34:09,020
the image to negative 1 all the other

00:34:06,830 --> 00:34:11,900
Flex items inside the recipe container

00:34:09,020 --> 00:34:14,060
have the default order value of 0 so

00:34:11,900 --> 00:34:16,850
negative 1 we'll move it to the top of

00:34:14,060 --> 00:34:19,190
the stack and then on the desktop view I

00:34:16,850 --> 00:34:21,710
simply turn off flex box by setting the

00:34:19,190 --> 00:34:23,480
recipes display back to block that puts

00:34:21,710 --> 00:34:25,870
the image back in the normal flow order

00:34:23,480 --> 00:34:28,190
where I can then float it to the right

00:34:25,870 --> 00:34:29,900
so there's no concern about flex box

00:34:28,190 --> 00:34:32,030
support on desktop since I'm not using

00:34:29,900 --> 00:34:33,860
it there and any mobile browsers that

00:34:32,030 --> 00:34:35,780
don't support it will simply see the

00:34:33,860 --> 00:34:39,409
image before the ingredients as

00:34:35,780 --> 00:34:42,080
normale I already showed you the

00:34:39,409 --> 00:34:43,909
Guardians job search form which doesn't

00:34:42,080 --> 00:34:46,070
use flexbox but their main site now does

00:34:43,909 --> 00:34:47,570
and they use flexbox to shuffle the

00:34:46,070 --> 00:34:50,510
stories around when you get to the wide

00:34:47,570 --> 00:34:53,630
view they actually don't use the order

00:34:50,510 --> 00:34:55,880
property to do this the Flex box lets

00:34:53,630 --> 00:34:58,490
you run content not just top to bottom

00:34:55,880 --> 00:35:00,770
and left to right but also bottom to top

00:34:58,490 --> 00:35:03,080
and right to left so this is another

00:35:00,770 --> 00:35:04,910
clever way that flexbox can improve

00:35:03,080 --> 00:35:06,740
responsiveness so definitely go to their

00:35:04,910 --> 00:35:08,900
site and check out their CSS to learn

00:35:06,740 --> 00:35:13,100
more about the they're sort of

00:35:08,900 --> 00:35:15,050
reordering I've shown you code for most

00:35:13,100 --> 00:35:16,850
of these examples but I don't think that

00:35:15,050 --> 00:35:19,370
the code is the most important part of

00:35:16,850 --> 00:35:22,040
learning flexbox I think the biggest

00:35:19,370 --> 00:35:24,380
obstacle to getting started with it is

00:35:22,040 --> 00:35:26,000
not being able to picture how to use it

00:35:24,380 --> 00:35:28,790
because you're stuck thinking in terms

00:35:26,000 --> 00:35:31,340
of what was possible with floats and

00:35:28,790 --> 00:35:33,680
other old layout methods it was the same

00:35:31,340 --> 00:35:36,290
when we switched from tables to CSS and

00:35:33,680 --> 00:35:38,720
from fixed to fluid you had to make a

00:35:36,290 --> 00:35:42,500
mental shift to start thinking in terms

00:35:38,720 --> 00:35:45,980
of the new possibilities and approaches

00:35:42,500 --> 00:35:47,390
to old problems flexbox lets you do lots

00:35:45,980 --> 00:35:49,220
of things that you haven't been able to

00:35:47,390 --> 00:35:51,080
do before and lots of things that you

00:35:49,220 --> 00:35:53,600
could do before but now in an even

00:35:51,080 --> 00:35:56,030
simpler way once you see what flexbox

00:35:53,600 --> 00:35:57,890
can do in the real world you can start

00:35:56,030 --> 00:35:59,690
picturing how to use it in your own work

00:35:57,890 --> 00:36:05,480
to solve real responsive web design

00:35:59,690 --> 00:36:07,670
problems today flex box can be tricky to

00:36:05,480 --> 00:36:09,200
wrap your head around at first but once

00:36:07,670 --> 00:36:11,570
you've learned it it's an incredibly

00:36:09,200 --> 00:36:13,850
quick cheap way for you to add more

00:36:11,570 --> 00:36:16,040
responsiveness to your components and it

00:36:13,850 --> 00:36:17,840
may sound weird to talk about enhancing

00:36:16,040 --> 00:36:20,150
responsiveness but I don't think that

00:36:17,840 --> 00:36:22,280
responsive web design is either on or

00:36:20,150 --> 00:36:24,590
off either your site is responsive or

00:36:22,280 --> 00:36:27,140
it's not there's always more that you

00:36:24,590 --> 00:36:29,180
could do to make a responsive site even

00:36:27,140 --> 00:36:33,050
more responsive to the different user

00:36:29,180 --> 00:36:34,880
settings and the content within it flex

00:36:33,050 --> 00:36:36,590
box is one of those things that you can

00:36:34,880 --> 00:36:40,130
do as I hope you have seen with these

00:36:36,590 --> 00:36:42,200
examples don't be afraid to add flex box

00:36:40,130 --> 00:36:45,200
to your work because flex box is not all

00:36:42,200 --> 00:36:47,360
or nothing you you don't need to use it

00:36:45,200 --> 00:36:49,160
you don't need to use every single part

00:36:47,360 --> 00:36:51,529
of it to layout every single

00:36:49,160 --> 00:36:53,480
on your site you can keep using floats

00:36:51,529 --> 00:36:55,970
or table display or whatever it is you

00:36:53,480 --> 00:36:58,190
use to create layouts just add on flex

00:36:55,970 --> 00:37:00,200
box in one spot to add one little

00:36:58,190 --> 00:37:02,200
enhancement and see how it can improve

00:37:00,200 --> 00:37:05,440
responsiveness on your site

00:37:02,200 --> 00:37:05,440

YouTube URL: https://www.youtube.com/watch?v=_98SE8WUvLk


