Title: Invisible Code by Martin Kleppe at JSConf Budapest 2015
Publication date: 2020-09-21
Playlist: JSConf Budapest 2015
Description: 
	Slides: https://speakerdeck.com/aemkei/jsconf-budapest-invisible-code

http://2015.jsconfbp.com/#aemkei

The JavaScript world has seen stunning demos in 1024 bytes, crazy hacks in 140 characters and esoteric sequences of only 6 different symbols. This talk will push the limits even further and reveal, how to write "Invisible Code": Hidden programs that will execute with mind-bending magic.
Captions: 
	00:00:11,599 --> 00:00:14,880
ah

00:00:12,000 --> 00:00:14,880
here we are okay

00:00:15,280 --> 00:00:17,920
um

00:00:19,359 --> 00:00:22,960
so this will be completely different

00:00:22,240 --> 00:00:25,599
maybe to

00:00:22,960 --> 00:00:26,240
what you're used to on conferences it's

00:00:25,599 --> 00:00:29,199
not

00:00:26,240 --> 00:00:31,840
practical the first point uh it's a bit

00:00:29,199 --> 00:00:33,920
like mind blowing maybe

00:00:31,840 --> 00:00:35,520
uh if you haven't had coffee i think

00:00:33,920 --> 00:00:38,640
this is the same

00:00:35,520 --> 00:00:41,120
effect so it will wake you up uh

00:00:38,640 --> 00:00:42,719
yeah but first of all it's really nice

00:00:41,120 --> 00:00:45,440
to be here in budapest

00:00:42,719 --> 00:00:46,239
i've been here the last time about 20

00:00:45,440 --> 00:00:49,440
years ago

00:00:46,239 --> 00:00:51,440
so it's quite a long time ago and

00:00:49,440 --> 00:00:53,760
before i was here with my parents when i

00:00:51,440 --> 00:00:56,480
was 16 it was exactly the name

00:00:53,760 --> 00:00:57,199
the day when they opened the border to

00:00:56,480 --> 00:00:59,120
um

00:00:57,199 --> 00:01:00,960
to austria so i'm from the eastern part

00:00:59,120 --> 00:01:03,359
of germany so it was really

00:01:00,960 --> 00:01:06,560
okay now something is changing and now

00:01:03,359 --> 00:01:10,880
i'm back and i'm really happy to be here

00:01:06,560 --> 00:01:12,159
okay so this is me um i'm working at ubi

00:01:10,880 --> 00:01:15,920
labs i'm one of the founder

00:01:12,159 --> 00:01:17,360
and head of development we are a company

00:01:15,920 --> 00:01:19,439
focused on

00:01:17,360 --> 00:01:20,960
implementing the google maps api and

00:01:19,439 --> 00:01:23,680
we're working with a really

00:01:20,960 --> 00:01:24,640
big amount of data big amount of code

00:01:23,680 --> 00:01:26,799
base

00:01:24,640 --> 00:01:27,680
and usually have to deal with really

00:01:26,799 --> 00:01:30,960
like a lot of

00:01:27,680 --> 00:01:32,000
aspects in our like work um but this

00:01:30,960 --> 00:01:35,600
talk will be

00:01:32,000 --> 00:01:37,680
about not my day work or what i do

00:01:35,600 --> 00:01:38,799
during uh during the daytime but more

00:01:37,680 --> 00:01:41,280
about what they're doing

00:01:38,799 --> 00:01:43,040
at night so what i'm doing when i'm at

00:01:41,280 --> 00:01:44,720
home and i have some free time to hack

00:01:43,040 --> 00:01:48,240
on new stuff so

00:01:44,720 --> 00:01:49,200
as i work with maps i said about like

00:01:48,240 --> 00:01:52,159
two

00:01:49,200 --> 00:01:52,799
years ago let's create a map library

00:01:52,159 --> 00:01:56,880
that fits

00:01:52,799 --> 00:01:59,439
into 1024 characters so exactly 1k

00:01:56,880 --> 00:02:01,119
without any dependencies and i wrote

00:01:59,439 --> 00:02:02,799
this kind of script

00:02:01,119 --> 00:02:04,159
you might have seen it so this is the

00:02:02,799 --> 00:02:06,399
source code you see

00:02:04,159 --> 00:02:08,080
there's a script tag in the top that

00:02:06,399 --> 00:02:10,399
goes to the button you have some code

00:02:08,080 --> 00:02:12,160
inside and then you have the world or

00:02:10,399 --> 00:02:14,560
globe in in there

00:02:12,160 --> 00:02:15,840
and once you open it up on the web

00:02:14,560 --> 00:02:18,560
browser

00:02:15,840 --> 00:02:19,120
without any dependencies you will see

00:02:18,560 --> 00:02:22,800
this

00:02:19,120 --> 00:02:25,280
so you will see a spinning 3d globe

00:02:22,800 --> 00:02:26,800
that turns around and you also have like

00:02:25,280 --> 00:02:29,520
color coding for the

00:02:26,800 --> 00:02:31,120
for the um the library around and yeah

00:02:29,520 --> 00:02:31,920
that's it so this is how i started

00:02:31,120 --> 00:02:34,319
somehow

00:02:31,920 --> 00:02:35,519
i did some smaller projects before but

00:02:34,319 --> 00:02:39,200
that's basically

00:02:35,519 --> 00:02:41,920
how i got more famous um

00:02:39,200 --> 00:02:43,360
another thing i did is this kind of

00:02:41,920 --> 00:02:45,680
project

00:02:43,360 --> 00:02:47,599
it's called monday code so it has the

00:02:45,680 --> 00:02:49,680
shape of a monday pro

00:02:47,599 --> 00:02:51,360
and once you open it in a browser it

00:02:49,680 --> 00:02:52,080
looks like this and you have to click

00:02:51,360 --> 00:02:54,720
once

00:02:52,080 --> 00:02:55,680
and once you activate it um you see an

00:02:54,720 --> 00:02:57,760
animated

00:02:55,680 --> 00:03:00,239
monthly port that goes really deep

00:02:57,760 --> 00:03:00,239
inside

00:03:01,200 --> 00:03:06,000
it's really cool it takes like two yeah

00:03:03,680 --> 00:03:06,000
thanks

00:03:07,680 --> 00:03:11,599
so it zooms in further and further until

00:03:10,239 --> 00:03:14,080
it reaches the limit where the

00:03:11,599 --> 00:03:16,640
javascript

00:03:14,080 --> 00:03:18,400
values can't like a difference anymore

00:03:16,640 --> 00:03:21,519
and you see the whole thing will break

00:03:18,400 --> 00:03:23,360
into parts which you see in maybe some

00:03:21,519 --> 00:03:26,480
seconds

00:03:23,360 --> 00:03:28,480
um so here you see

00:03:26,480 --> 00:03:30,720
things are going crazy and then that's

00:03:28,480 --> 00:03:32,400
the maximum amount of like um

00:03:30,720 --> 00:03:35,040
resolution that you get into numbers in

00:03:32,400 --> 00:03:35,040
javascript

00:03:35,440 --> 00:03:42,959
another thing i focus on after um

00:03:39,519 --> 00:03:44,959
thinking about okay how many or what

00:03:42,959 --> 00:03:46,720
you can get into a specific amount of

00:03:44,959 --> 00:03:47,920
character was the opposite question and

00:03:46,720 --> 00:03:49,760
the question was okay

00:03:47,920 --> 00:03:52,720
how many characters or how many

00:03:49,760 --> 00:03:54,799
different characters do we need to

00:03:52,720 --> 00:03:56,480
write javascript and it turns out there

00:03:54,799 --> 00:03:57,439
was a discussion somewhere else i i'm

00:03:56,480 --> 00:04:01,040
not

00:03:57,439 --> 00:04:03,360
in the in the original discussion but

00:04:01,040 --> 00:04:05,599
i fixed it and set up a website and it

00:04:03,360 --> 00:04:09,200
turns out that you only have to need

00:04:05,599 --> 00:04:10,959
um of parenthesis a plus sign square

00:04:09,200 --> 00:04:13,680
brackets and ampersand

00:04:10,959 --> 00:04:14,000
and i set up jsfuck.com where you can

00:04:13,680 --> 00:04:15,519
put

00:04:14,000 --> 00:04:17,280
in any javascript that you like for

00:04:15,519 --> 00:04:20,160
example edit one

00:04:17,280 --> 00:04:20,639
and it will encode you the data into

00:04:20,160 --> 00:04:23,199
this

00:04:20,639 --> 00:04:23,680
sequence of characters and you can take

00:04:23,199 --> 00:04:25,680
this

00:04:23,680 --> 00:04:27,120
sequence and copy it somewhere and it

00:04:25,680 --> 00:04:27,759
will run without a transpiler or

00:04:27,120 --> 00:04:30,160
something

00:04:27,759 --> 00:04:31,440
so it's valid javascript that will

00:04:30,160 --> 00:04:34,800
execute

00:04:31,440 --> 00:04:36,320
and this is a lot one in this case so

00:04:34,800 --> 00:04:38,240
it's quite a lot of characters that you

00:04:36,320 --> 00:04:40,800
need but it's only six different

00:04:38,240 --> 00:04:40,800
characters

00:04:40,840 --> 00:04:46,560
um before we go on i

00:04:44,000 --> 00:04:49,040
want to show you how to do this

00:04:46,560 --> 00:04:51,919
modification stuff so it's called

00:04:49,040 --> 00:04:53,360
code golfing and there are like many

00:04:51,919 --> 00:04:55,120
different languages where you can do it

00:04:53,360 --> 00:04:57,759
and i usually focus on

00:04:55,120 --> 00:05:00,160
html and javascript and one thing that

00:04:57,759 --> 00:05:03,120
you always need around is html

00:05:00,160 --> 00:05:04,400
that is really small and actually it's

00:05:03,120 --> 00:05:07,600
something i would call

00:05:04,400 --> 00:05:11,120
dynamic html5 so it's like the best of

00:05:07,600 --> 00:05:13,759
both worlds and

00:05:11,120 --> 00:05:15,039
to show you this is a common known

00:05:13,759 --> 00:05:18,720
template

00:05:15,039 --> 00:05:21,919
um but actually if we focus on this

00:05:18,720 --> 00:05:25,280
and if you wanna really have small sized

00:05:21,919 --> 00:05:28,320
html then we can skip the doctype

00:05:25,280 --> 00:05:29,919
we can get rid of the html tag we don't

00:05:28,320 --> 00:05:32,080
need a hat

00:05:29,919 --> 00:05:34,400
we don't need a title because we just

00:05:32,080 --> 00:05:37,039
have something there

00:05:34,400 --> 00:05:38,800
and we can also get rid of the type in

00:05:37,039 --> 00:05:43,440
the script tag

00:05:38,800 --> 00:05:46,080
we we then can

00:05:43,440 --> 00:05:46,720
skip the script itself and just place

00:05:46,080 --> 00:05:49,680
everything in

00:05:46,720 --> 00:05:51,600
on load handler and if we have this then

00:05:49,680 --> 00:05:52,000
we don't need the closing body because

00:05:51,600 --> 00:05:54,639
the browser

00:05:52,000 --> 00:05:56,240
does it for you so this is like a really

00:05:54,639 --> 00:06:00,160
minimal set

00:05:56,240 --> 00:06:03,199
that you need and if you look at this

00:06:00,160 --> 00:06:04,800
we can also skip the quotes if you don't

00:06:03,199 --> 00:06:08,960
have a space in between so

00:06:04,800 --> 00:06:11,919
that's cool um

00:06:08,960 --> 00:06:12,720
what can we do now so an easy example

00:06:11,919 --> 00:06:15,360
would be okay

00:06:12,720 --> 00:06:16,479
allot1 allot something this will pop up

00:06:15,360 --> 00:06:19,199
something

00:06:16,479 --> 00:06:20,800
i use this example later for some more

00:06:19,199 --> 00:06:23,919
general

00:06:20,800 --> 00:06:25,840
templates and if we want to have

00:06:23,919 --> 00:06:27,360
something in the html we can use

00:06:25,840 --> 00:06:30,720
document write which is

00:06:27,360 --> 00:06:32,639
a short way to do something the problem

00:06:30,720 --> 00:06:34,560
here is that you can't

00:06:32,639 --> 00:06:36,720
do things on animation so if you want to

00:06:34,560 --> 00:06:39,039
have an animated html

00:06:36,720 --> 00:06:40,880
like i wanna add you can't use this

00:06:39,039 --> 00:06:42,160
because document right will always

00:06:40,880 --> 00:06:45,759
append stuff to the

00:06:42,160 --> 00:06:47,120
document but we could use document body

00:06:45,759 --> 00:06:50,000
inner html

00:06:47,120 --> 00:06:51,520
something it's quite long because the

00:06:50,000 --> 00:06:54,800
document body is so

00:06:51,520 --> 00:06:55,520
massive um but we can fix this by saying

00:06:54,800 --> 00:06:58,639
okay

00:06:55,520 --> 00:06:59,520
body has an id b and we have access to

00:06:58,639 --> 00:07:01,919
this id

00:06:59,520 --> 00:07:02,960
b in the javascript and this is

00:07:01,919 --> 00:07:05,039
something

00:07:02,960 --> 00:07:06,240
many people don't know but once you

00:07:05,039 --> 00:07:09,360
define an id

00:07:06,240 --> 00:07:11,360
in in a dom or in html

00:07:09,360 --> 00:07:12,639
it's available on a global scope in

00:07:11,360 --> 00:07:15,360
javascript

00:07:12,639 --> 00:07:16,000
as long as you don't override it so no

00:07:15,360 --> 00:07:19,280
you need for

00:07:16,000 --> 00:07:23,280
jquery anymore just use the id

00:07:19,280 --> 00:07:25,280
and then you're good um

00:07:23,280 --> 00:07:26,479
i usually want to have it somewhere

00:07:25,280 --> 00:07:30,639
formatted so

00:07:26,479 --> 00:07:33,599
i want to have like shaped output and

00:07:30,639 --> 00:07:34,240
i don't include css because css is

00:07:33,599 --> 00:07:36,319
usually

00:07:34,240 --> 00:07:37,919
too massive and you need this extra

00:07:36,319 --> 00:07:41,199
style tag around

00:07:37,919 --> 00:07:44,240
um so what i do is use the pretag

00:07:41,199 --> 00:07:47,599
in this example or yeah

00:07:44,240 --> 00:07:48,720
and um the problem here is uh once you

00:07:47,599 --> 00:07:52,000
have this

00:07:48,720 --> 00:07:54,400
um greater than sign inside of an

00:07:52,000 --> 00:07:55,440
unload handler then the browser thinks

00:07:54,400 --> 00:07:58,479
okay the

00:07:55,440 --> 00:08:02,560
attack is ended here so it will output

00:07:58,479 --> 00:08:06,240
a one and to fix this we have to get

00:08:02,560 --> 00:08:08,080
back the quotes here and if you focus on

00:08:06,240 --> 00:08:08,960
this example then we see okay there's

00:08:08,080 --> 00:08:11,759
one

00:08:08,960 --> 00:08:12,400
byte to save one character to save and

00:08:11,759 --> 00:08:15,520
that's

00:08:12,400 --> 00:08:16,400
the space between the id and b and if we

00:08:15,520 --> 00:08:19,599
simply change

00:08:16,400 --> 00:08:22,560
the order and move the idb to the back

00:08:19,599 --> 00:08:23,120
and remove the space then it's working

00:08:22,560 --> 00:08:25,360
two

00:08:23,120 --> 00:08:28,800
because the attribute is closed and we

00:08:25,360 --> 00:08:31,680
don't need the space anymore

00:08:28,800 --> 00:08:33,120
okay this is one way to do it another

00:08:31,680 --> 00:08:36,560
way to do it would be to

00:08:33,120 --> 00:08:38,320
place the pre-tag in the beginning of

00:08:36,560 --> 00:08:41,440
the html with an id

00:08:38,320 --> 00:08:43,440
and then include a script with

00:08:41,440 --> 00:08:46,800
like the reference to it and used inner

00:08:43,440 --> 00:08:46,800
html to update this

00:08:48,959 --> 00:08:52,800
that's about html

00:08:52,959 --> 00:08:57,360
let's see what's possible in in um

00:08:55,200 --> 00:08:59,600
javascript so this is really basic stuff

00:08:57,360 --> 00:09:01,600
um there's a

00:08:59,600 --> 00:09:02,880
wiki about like all the crazy

00:09:01,600 --> 00:09:07,600
magnification

00:09:02,880 --> 00:09:10,240
um on the 140 bytes github project

00:09:07,600 --> 00:09:10,800
um but this is to give you an idea of

00:09:10,240 --> 00:09:13,200
what's

00:09:10,800 --> 00:09:15,600
like possible and if you take this

00:09:13,200 --> 00:09:18,640
simple example so we have x

00:09:15,600 --> 00:09:20,640
y and z and we have random values and

00:09:18,640 --> 00:09:21,279
then we get the maximum value of both of

00:09:20,640 --> 00:09:24,640
them

00:09:21,279 --> 00:09:26,320
and because we don't care about global

00:09:24,640 --> 00:09:29,360
leakage we can skip the va

00:09:26,320 --> 00:09:32,240
here we can use m

00:09:29,360 --> 00:09:33,839
as a reference to math and then replace

00:09:32,240 --> 00:09:37,040
the math with the m

00:09:33,839 --> 00:09:39,040
so to save some space we can do the same

00:09:37,040 --> 00:09:42,160
for the random things so we say

00:09:39,040 --> 00:09:45,839
r is m dot random and then get

00:09:42,160 --> 00:09:49,680
rid of the long call here

00:09:45,839 --> 00:09:52,240
and when so this should be obvious but

00:09:49,680 --> 00:09:53,440
it's getting interesting now once you

00:09:52,240 --> 00:09:57,040
specify

00:09:53,440 --> 00:10:00,399
um the random method not with the

00:09:57,040 --> 00:10:01,200
dot syntax but as a string you can say

00:10:00,399 --> 00:10:04,320
okay

00:10:01,200 --> 00:10:08,480
i have the string random and let's call

00:10:04,320 --> 00:10:11,680
the method with this string on math

00:10:08,480 --> 00:10:14,560
and it looks longer but once you

00:10:11,680 --> 00:10:16,000
look into this you can save another

00:10:14,560 --> 00:10:18,800
space by

00:10:16,000 --> 00:10:19,360
moving the definition inside of the

00:10:18,800 --> 00:10:22,720
first

00:10:19,360 --> 00:10:25,519
assignment so you get this

00:10:22,720 --> 00:10:27,519
in there and save some space and one

00:10:25,519 --> 00:10:31,200
thing that you also can do is use

00:10:27,519 --> 00:10:34,320
the not recommended with it

00:10:31,200 --> 00:10:38,000
you can skip the skip the curly braces

00:10:34,320 --> 00:10:40,480
if you use the comma syntax and then

00:10:38,000 --> 00:10:41,279
you can do the same for the random thing

00:10:40,480 --> 00:10:44,880
and

00:10:41,279 --> 00:10:47,760
if you um shrink this together you

00:10:44,880 --> 00:10:48,880
get this in the end so that's what you

00:10:47,760 --> 00:10:51,440
get

00:10:48,880 --> 00:10:53,600
after like working hard manually so

00:10:51,440 --> 00:10:55,360
there's no way to do this automatically

00:10:53,600 --> 00:10:58,399
or there are some ways to do it but it's

00:10:55,360 --> 00:11:01,839
like all done by hand in this case

00:10:58,399 --> 00:11:01,839
um yeah

00:11:01,920 --> 00:11:05,760
i was playing around with this kind of

00:11:03,600 --> 00:11:08,720
minification and

00:11:05,760 --> 00:11:10,399
about a year ago i came up with an idea

00:11:08,720 --> 00:11:14,480
after looking into

00:11:10,399 --> 00:11:16,240
um into my js i realized that i

00:11:14,480 --> 00:11:17,920
could replace some characters with other

00:11:16,240 --> 00:11:21,200
characters and

00:11:17,920 --> 00:11:24,800
i created something called death star

00:11:21,200 --> 00:11:28,160
and this is the output so this is an

00:11:24,800 --> 00:11:28,959
html file it has the shape of a russian

00:11:28,160 --> 00:11:31,120
star

00:11:28,959 --> 00:11:33,440
and if you look close you see okay

00:11:31,120 --> 00:11:36,160
there's a body unload on the top

00:11:33,440 --> 00:11:36,640
and this is the script that will execute

00:11:36,160 --> 00:11:40,320
you see

00:11:36,640 --> 00:11:41,040
there's no like obvious method in there

00:11:40,320 --> 00:11:44,079
it's only

00:11:41,040 --> 00:11:45,040
correlated alphabet and some symbols

00:11:44,079 --> 00:11:48,000
here

00:11:45,040 --> 00:11:49,600
and in the center there's this star and

00:11:48,000 --> 00:11:52,240
once you open it it gives you

00:11:49,600 --> 00:11:52,800
an error with this so it's like an alert

00:11:52,240 --> 00:11:56,000
one but

00:11:52,800 --> 00:11:58,000
with the unicode star and

00:11:56,000 --> 00:11:59,440
another example i'm gonna explain how

00:11:58,000 --> 00:12:02,560
this works in a second so

00:11:59,440 --> 00:12:03,519
wait a second um another thing i did for

00:12:02,560 --> 00:12:06,399
the first time is

00:12:03,519 --> 00:12:07,920
writing hebrew javascript so you have to

00:12:06,399 --> 00:12:11,279
read it from

00:12:07,920 --> 00:12:13,360
right to left to get it and it's also

00:12:11,279 --> 00:12:15,120
like valid javascript

00:12:13,360 --> 00:12:17,760
just paste it in console and it will

00:12:15,120 --> 00:12:20,720
output one

00:12:17,760 --> 00:12:22,720
and what i did too is this kind of stuff

00:12:20,720 --> 00:12:24,320
so it looks like it's written from up to

00:12:22,720 --> 00:12:27,279
down but actually it's

00:12:24,320 --> 00:12:28,720
using tabs to separate this this

00:12:27,279 --> 00:12:33,440
characters this is um

00:12:28,720 --> 00:12:37,200
katakana and it reminded me a bit

00:12:33,440 --> 00:12:38,639
about an intro of a famous movie so i

00:12:37,200 --> 00:12:41,440
created for js com

00:12:38,639 --> 00:12:42,720
asia last year this kind of project it's

00:12:41,440 --> 00:12:46,399
called the matrix

00:12:42,720 --> 00:12:48,800
and yeah it's like it's using

00:12:46,399 --> 00:12:49,680
canvas in this case and you see like

00:12:48,800 --> 00:12:52,079
something that

00:12:49,680 --> 00:12:53,760
you might have seen in an intro sequence

00:12:52,079 --> 00:12:57,360
of the matrix movie

00:12:53,760 --> 00:13:00,959
and if you look close you see that this

00:12:57,360 --> 00:13:03,440
is the source code itself so

00:13:00,959 --> 00:13:05,279
the script goes from top to bottom and

00:13:03,440 --> 00:13:06,480
in there it's only using asian

00:13:05,279 --> 00:13:09,920
characters

00:13:06,480 --> 00:13:09,920
to to execute this code

00:13:10,160 --> 00:13:13,519
okay the question now was how to write

00:13:12,560 --> 00:13:16,959
javascript

00:13:13,519 --> 00:13:21,839
without latin characters so this is

00:13:16,959 --> 00:13:21,839
that's the thing give me a second

00:13:23,760 --> 00:13:28,160
um okay so there are two ways to do it

00:13:26,079 --> 00:13:32,399
escape sequences

00:13:28,160 --> 00:13:35,440
and playing scrabble as i call it um

00:13:32,399 --> 00:13:36,959
i'm gonna place this here so um we start

00:13:35,440 --> 00:13:38,560
with escape sequences

00:13:36,959 --> 00:13:40,480
they're quite easy if you have on

00:13:38,560 --> 00:13:43,199
character a for example you could

00:13:40,480 --> 00:13:44,000
also write backslash u and then a

00:13:43,199 --> 00:13:46,800
unicode

00:13:44,000 --> 00:13:47,360
hexadecimal value for the character and

00:13:46,800 --> 00:13:50,720
it will

00:13:47,360 --> 00:13:52,399
like run it as you expect

00:13:50,720 --> 00:13:54,000
there's another way to do this oh no if

00:13:52,399 --> 00:13:54,800
you combine this for example if you

00:13:54,000 --> 00:13:57,839
write this in

00:13:54,800 --> 00:14:01,199
in javascript it's actually add one so

00:13:57,839 --> 00:14:03,120
it's like valid javascript another way

00:14:01,199 --> 00:14:05,920
to do it is to use like

00:14:03,120 --> 00:14:06,480
or a good way to use it it's to use for

00:14:05,920 --> 00:14:09,680
higher

00:14:06,480 --> 00:14:13,440
characters um from in this case the

00:14:09,680 --> 00:14:15,350
rain character in in the kanji

00:14:13,440 --> 00:14:16,639
or chinese alphabet

00:14:15,350 --> 00:14:20,000
[Music]

00:14:16,639 --> 00:14:23,760
but you could also use um a backslash x

00:14:20,000 --> 00:14:26,320
for lower values in the ascii

00:14:23,760 --> 00:14:26,800
character set to to write like anything

00:14:26,320 --> 00:14:28,800
you like

00:14:26,800 --> 00:14:31,199
the problem here is that you have to use

00:14:28,800 --> 00:14:33,040
it in quotes so you can't use it

00:14:31,199 --> 00:14:34,560
like everywhere around you have to use

00:14:33,040 --> 00:14:38,480
it in

00:14:34,560 --> 00:14:41,519
in a string um so we have backslash

00:14:38,480 --> 00:14:43,279
x and then the hex code and some people

00:14:41,519 --> 00:14:45,760
don't know this but there's also a way

00:14:43,279 --> 00:14:47,440
to use octal sequences so you only have

00:14:45,760 --> 00:14:50,639
a backslash and then

00:14:47,440 --> 00:14:51,920
um from zero to seven just eight

00:14:50,639 --> 00:14:55,120
different um

00:14:51,920 --> 00:14:58,720
numbers to to write anything you like

00:14:55,120 --> 00:15:01,760
yeah for example this is also alert one

00:14:58,720 --> 00:15:04,800
so it uses only symbols

00:15:01,760 --> 00:15:07,360
numbers and backslash and if you look at

00:15:04,800 --> 00:15:10,399
this you have this different

00:15:07,360 --> 00:15:13,440
number sequences and these are the octa

00:15:10,399 --> 00:15:16,000
representation of the of the um

00:15:13,440 --> 00:15:17,680
characters that are in this case map

00:15:16,000 --> 00:15:19,440
constructor alert so

00:15:17,680 --> 00:15:21,040
if i wrote it in one line it's it's this

00:15:19,440 --> 00:15:23,360
code basically

00:15:21,040 --> 00:15:24,639
and this is like a core thing that we

00:15:23,360 --> 00:15:27,360
need to do all the

00:15:24,639 --> 00:15:28,079
all the other hacks i have to explain it

00:15:27,360 --> 00:15:30,639
because

00:15:28,079 --> 00:15:31,920
if you have an empty area and you access

00:15:30,639 --> 00:15:33,920
the map

00:15:31,920 --> 00:15:35,360
method or you could also say filter or

00:15:33,920 --> 00:15:38,480
sword or whatever

00:15:35,360 --> 00:15:40,000
then it's basically a function and if

00:15:38,480 --> 00:15:43,040
you get the constructor

00:15:40,000 --> 00:15:46,320
of a function you get this function

00:15:43,040 --> 00:15:48,079
constructor and there you can pass like

00:15:46,320 --> 00:15:52,320
any code you like

00:15:48,079 --> 00:15:55,600
and it will execute so in this

00:15:52,320 --> 00:15:57,519
case it would be something like an eval

00:15:55,600 --> 00:15:58,639
and that's a good way because you can

00:15:57,519 --> 00:16:03,120
hide and eval

00:15:58,639 --> 00:16:06,079
in other characters yeah

00:16:03,120 --> 00:16:08,639
okay so we had s-cap sequences and the

00:16:06,079 --> 00:16:11,920
next thing to do it would be to use

00:16:08,639 --> 00:16:15,600
scrabble kind of things so um

00:16:11,920 --> 00:16:18,959
it's a basic um idea that i found

00:16:15,600 --> 00:16:22,240
at the js project so if you say

00:16:18,959 --> 00:16:24,240
not an empty array you get forward spec

00:16:22,240 --> 00:16:26,079
if you say not not an empty hours you

00:16:24,240 --> 00:16:30,000
get true

00:16:26,079 --> 00:16:32,399
and if you add an empty string here

00:16:30,000 --> 00:16:34,079
you get the string false and the string

00:16:32,399 --> 00:16:37,680
tool

00:16:34,079 --> 00:16:39,199
yeah and what you can do then is to get

00:16:37,680 --> 00:16:41,920
different characters here

00:16:39,199 --> 00:16:42,800
so for example i got the first one to

00:16:41,920 --> 00:16:45,279
get the t

00:16:42,800 --> 00:16:46,959
the r the u and the e if you use the

00:16:45,279 --> 00:16:50,000
different numbers here

00:16:46,959 --> 00:16:52,079
and if you mix them up for example the

00:16:50,000 --> 00:16:54,480
first or fourth the second or fourth

00:16:52,079 --> 00:16:57,199
the third of two the first of through

00:16:54,480 --> 00:16:59,759
and the sec the

00:16:57,199 --> 00:17:01,279
character at position zero from through

00:16:59,759 --> 00:17:03,680
then you see

00:17:01,279 --> 00:17:07,360
a pattern if you move it around you see

00:17:03,680 --> 00:17:07,360
okay we got this alert here

00:17:08,579 --> 00:17:16,160
[Applause]

00:17:14,480 --> 00:17:18,000
and this is really powerful so that's

00:17:16,160 --> 00:17:20,799
why i call it scrabble so scrabble would

00:17:18,000 --> 00:17:23,199
be false object true false object object

00:17:20,799 --> 00:17:26,720
false true

00:17:23,199 --> 00:17:28,480
um and there it's not possible to get

00:17:26,720 --> 00:17:30,960
all characters only a subset

00:17:28,480 --> 00:17:33,120
but the cool thing is that you get a

00:17:30,960 --> 00:17:36,160
constructor out of it so you can

00:17:33,120 --> 00:17:38,559
you have this undefined here untrue

00:17:36,160 --> 00:17:40,160
fault and object and these are used to

00:17:38,559 --> 00:17:41,919
to get these different characters that

00:17:40,160 --> 00:17:42,960
are needed for constructor and if you

00:17:41,919 --> 00:17:44,559
combine them

00:17:42,960 --> 00:17:46,480
then you are able to do this map

00:17:44,559 --> 00:17:47,200
constructor alert by just adding

00:17:46,480 --> 00:17:49,600
different

00:17:47,200 --> 00:17:50,880
characters together so that's a basic

00:17:49,600 --> 00:17:54,320
idea

00:17:50,880 --> 00:17:57,600
um so i thought about

00:17:54,320 --> 00:17:58,880
what's possible in like 1k what's

00:17:57,600 --> 00:18:01,200
possible with

00:17:58,880 --> 00:18:02,799
only six different characters how to

00:18:01,200 --> 00:18:06,480
write

00:18:02,799 --> 00:18:07,440
code in in other alphabets so without

00:18:06,480 --> 00:18:10,320
latin characters

00:18:07,440 --> 00:18:11,679
for example hebrew or asian characters

00:18:10,320 --> 00:18:13,760
and the next step

00:18:11,679 --> 00:18:14,960
i thought of would be okay how to do

00:18:13,760 --> 00:18:17,760
this

00:18:14,960 --> 00:18:19,840
um how to write code that's actually

00:18:17,760 --> 00:18:23,919
invisible

00:18:19,840 --> 00:18:26,720
and i come up with a quite simple idea

00:18:23,919 --> 00:18:28,960
or the question was how can we hide

00:18:26,720 --> 00:18:32,240
javascript inside itself

00:18:28,960 --> 00:18:32,640
and the basic idea here was to use white

00:18:32,240 --> 00:18:34,799
scale

00:18:32,640 --> 00:18:35,679
white space there's actually some quite

00:18:34,799 --> 00:18:39,120
simple tricks

00:18:35,679 --> 00:18:41,120
that you only use like spaces and tabs

00:18:39,120 --> 00:18:42,000
and new line characters and you use this

00:18:41,120 --> 00:18:45,120
to encode your

00:18:42,000 --> 00:18:47,120
script um and

00:18:45,120 --> 00:18:48,320
if you look at this characters then you

00:18:47,120 --> 00:18:50,080
see that

00:18:48,320 --> 00:18:52,640
and if you look at the hex codes here

00:18:50,080 --> 00:18:55,840
then you see that they are

00:18:52,640 --> 00:18:58,559
really one of the first 16

00:18:55,840 --> 00:18:59,840
characters in the ascii definition so

00:18:58,559 --> 00:19:02,160
these are all

00:18:59,840 --> 00:19:03,360
control characters some are known some

00:19:02,160 --> 00:19:06,240
are not known

00:19:03,360 --> 00:19:08,160
and the problem is that most of them

00:19:06,240 --> 00:19:11,360
once you place them into the code

00:19:08,160 --> 00:19:11,919
you still see them so they are blank but

00:19:11,360 --> 00:19:15,039
they

00:19:11,919 --> 00:19:17,360
take a width so a space is a space a tab

00:19:15,039 --> 00:19:19,600
is like four or eight spaces and the new

00:19:17,360 --> 00:19:22,960
line is a new line

00:19:19,600 --> 00:19:24,000
um but if you look further and go to the

00:19:22,960 --> 00:19:27,600
next page

00:19:24,000 --> 00:19:29,200
you see a list of ctrl characters

00:19:27,600 --> 00:19:30,799
that are quite strange i'm not sure if

00:19:29,200 --> 00:19:32,880
they are used somewhere in

00:19:30,799 --> 00:19:34,160
in the javascript but the cool thing

00:19:32,880 --> 00:19:36,240
here is

00:19:34,160 --> 00:19:38,320
they don't have a width so they are zero

00:19:36,240 --> 00:19:41,280
with characters so

00:19:38,320 --> 00:19:41,760
you can place them in your code and no

00:19:41,280 --> 00:19:43,280
one

00:19:41,760 --> 00:19:44,880
would ever see that there is something

00:19:43,280 --> 00:19:47,120
hidden um

00:19:44,880 --> 00:19:47,919
i created a project called zero it's up

00:19:47,120 --> 00:19:49,520
here

00:19:47,919 --> 00:19:52,799
and the source code is this so it's

00:19:49,520 --> 00:19:55,840
about like 80 characters wide

00:19:52,799 --> 00:19:57,840
and you see some strange eval eval

00:19:55,840 --> 00:20:00,320
escape replays magic

00:19:57,840 --> 00:20:02,559
and if you open this page you will see

00:20:00,320 --> 00:20:02,559
this

00:20:02,960 --> 00:20:09,520
so this is canvas game of life

00:20:06,080 --> 00:20:12,640
done in this amount of characters and

00:20:09,520 --> 00:20:16,080
it's like a thousand iteration

00:20:12,640 --> 00:20:16,080
until it reaches a stable level

00:20:16,320 --> 00:20:23,039
and when you look at the code

00:20:20,000 --> 00:20:24,960
um the uncompressed code or like if you

00:20:23,039 --> 00:20:27,919
look at the code in an editor

00:20:24,960 --> 00:20:29,039
that's able to display um hex values you

00:20:27,919 --> 00:20:32,559
see this

00:20:29,039 --> 00:20:35,520
and inside of this is

00:20:32,559 --> 00:20:37,039
something hidden that's generating this

00:20:35,520 --> 00:20:39,760
game of life code

00:20:37,039 --> 00:20:41,679
and this is about like 200 characters

00:20:39,760 --> 00:20:44,880
and the magic happens here

00:20:41,679 --> 00:20:46,480
because in the first escape um statement

00:20:44,880 --> 00:20:47,440
there's an empty string or it looks like

00:20:46,480 --> 00:20:49,919
an empty string

00:20:47,440 --> 00:20:51,760
so there's something here and this will

00:20:49,919 --> 00:20:55,440
be escaped and replaced

00:20:51,760 --> 00:20:56,880
by a new sequence of the third and six

00:20:55,440 --> 00:21:00,159
characters

00:20:56,880 --> 00:21:03,679
combined with an x in front of it

00:21:00,159 --> 00:21:04,320
so so that's a basic idea so we have 16

00:21:03,679 --> 00:21:07,679
different

00:21:04,320 --> 00:21:10,240
um contour characters um

00:21:07,679 --> 00:21:11,520
if you use a random sequence here like

00:21:10,240 --> 00:21:14,320
this or it's not random

00:21:11,520 --> 00:21:15,520
as you see in a moment and then you say

00:21:14,320 --> 00:21:18,240
escape

00:21:15,520 --> 00:21:20,640
you get this sequence and then we gonna

00:21:18,240 --> 00:21:23,679
replace the ampersand and the one

00:21:20,640 --> 00:21:26,240
to get only the relevant numbers here

00:21:23,679 --> 00:21:26,960
and we join them in groups by two like

00:21:26,240 --> 00:21:29,600
this

00:21:26,960 --> 00:21:30,640
and place an x in front of it and once

00:21:29,600 --> 00:21:33,520
we

00:21:30,640 --> 00:21:34,320
execute this or eval this we get a lot a

00:21:33,520 --> 00:21:37,679
lot one

00:21:34,320 --> 00:21:38,240
and like whatever you like so you can

00:21:37,679 --> 00:21:41,440
hide

00:21:38,240 --> 00:21:43,520
anything in there and as much code as

00:21:41,440 --> 00:21:46,960
you want

00:21:43,520 --> 00:21:49,440
yeah so i'm usually developing using

00:21:46,960 --> 00:21:50,880
chrome and i was really happy with the

00:21:49,440 --> 00:21:54,880
results uh

00:21:50,880 --> 00:21:57,679
until i came to another browser

00:21:54,880 --> 00:21:59,440
where they had this flag mods control

00:21:57,679 --> 00:22:03,120
character visibility visible

00:21:59,440 --> 00:22:05,520
so this is how it looks in chrome

00:22:03,120 --> 00:22:06,320
and when you open it in firefox you see

00:22:05,520 --> 00:22:08,080
this

00:22:06,320 --> 00:22:09,679
yeah and i was really disappointed after

00:22:08,080 --> 00:22:13,039
like weeks of work

00:22:09,679 --> 00:22:15,520
i thought okay

00:22:13,039 --> 00:22:18,000
and i did some research and found this

00:22:15,520 --> 00:22:19,679
quote within mozilla some people like

00:22:18,000 --> 00:22:21,360
the idea of displaying control

00:22:19,679 --> 00:22:26,000
characters

00:22:21,360 --> 00:22:28,480
yeah i i thought of yeah

00:22:26,000 --> 00:22:30,240
let's play the game on the next level so

00:22:28,480 --> 00:22:33,520
i've been to a conference in minsk

00:22:30,240 --> 00:22:34,480
um about a month ago and i created

00:22:33,520 --> 00:22:37,679
something new and

00:22:34,480 --> 00:22:39,919
i picked a theme

00:22:37,679 --> 00:22:42,000
the theme was tetris so tetris is a

00:22:39,919 --> 00:22:45,600
russian game or from a russian inventor

00:22:42,000 --> 00:22:46,240
and the name itself is tetra antenna so

00:22:45,600 --> 00:22:48,720
it

00:22:46,240 --> 00:22:50,799
contains titra is like the prefix of

00:22:48,720 --> 00:22:54,240
four and tennis is the game tennis

00:22:50,799 --> 00:22:57,520
so i set up a code that looks like this

00:22:54,240 --> 00:22:59,840
i spread it a bit and divided it

00:22:57,520 --> 00:23:01,280
and as you see here you have the script

00:22:59,840 --> 00:23:04,400
tag

00:23:01,280 --> 00:23:08,000
around um you have only

00:23:04,400 --> 00:23:11,200
numbers in there and different um

00:23:08,000 --> 00:23:11,919
symbols and the whole board is divided

00:23:11,200 --> 00:23:15,039
by

00:23:11,919 --> 00:23:18,000
this inline comments

00:23:15,039 --> 00:23:18,960
and inside of this i have a space with

00:23:18,000 --> 00:23:22,000
like different

00:23:18,960 --> 00:23:24,240
empty dots here and once you execute

00:23:22,000 --> 00:23:26,080
it in a browser you would see that the

00:23:24,240 --> 00:23:28,640
docs are filled by an

00:23:26,080 --> 00:23:29,679
block so there's a block moving down and

00:23:28,640 --> 00:23:31,440
you can use the

00:23:29,679 --> 00:23:33,200
the keyboard to control it and you can

00:23:31,440 --> 00:23:35,120
actually like play a simple version of

00:23:33,200 --> 00:23:37,760
tetris you can you can move it

00:23:35,120 --> 00:23:38,240
and once you have a full line as you see

00:23:37,760 --> 00:23:41,279
here

00:23:38,240 --> 00:23:42,960
it disappears so so i call it binary

00:23:41,279 --> 00:23:46,080
tetris because it's really like

00:23:42,960 --> 00:23:48,880
based on some atomic parts

00:23:46,080 --> 00:23:50,000
um the code itself if you reformat it it

00:23:48,880 --> 00:23:52,320
looks like this

00:23:50,000 --> 00:23:53,760
the first two lines are the well-known

00:23:52,320 --> 00:23:56,480
map constructor

00:23:53,760 --> 00:23:57,039
thing to evolve anything you like and

00:23:56,480 --> 00:24:00,480
then

00:23:57,039 --> 00:24:04,320
you have in here another

00:24:00,480 --> 00:24:08,080
eval and escape sequence and a replays

00:24:04,320 --> 00:24:10,400
and what we did before was using the

00:24:08,080 --> 00:24:11,360
third and sixth character to join them

00:24:10,400 --> 00:24:14,799
with a

00:24:11,360 --> 00:24:18,400
leading x and what we need now is

00:24:14,799 --> 00:24:19,760
like getting the six characters and join

00:24:18,400 --> 00:24:21,840
them in groups by three

00:24:19,760 --> 00:24:22,960
so to give you an idea this is what we

00:24:21,840 --> 00:24:24,799
had before

00:24:22,960 --> 00:24:26,480
but now we can only use like eight

00:24:24,799 --> 00:24:31,279
different numbers here

00:24:26,480 --> 00:24:35,279
and um i found an ask uh no in utf

00:24:31,279 --> 00:24:38,960
uh udf8 character uh one four four

00:24:35,279 --> 00:24:39,919
zero and a sequence uh that we can use

00:24:38,960 --> 00:24:41,919
to

00:24:39,919 --> 00:24:43,120
to write this kind of code and the

00:24:41,919 --> 00:24:46,159
characters look like this

00:24:43,120 --> 00:24:48,480
and if you zoom up there they look

00:24:46,159 --> 00:24:50,400
really strange and they're called chants

00:24:48,480 --> 00:24:51,360
or cantillation marks and they're used

00:24:50,400 --> 00:24:53,919
for

00:24:51,360 --> 00:24:54,559
in the in the hebrew language to specify

00:24:53,919 --> 00:24:56,960
like

00:24:54,559 --> 00:24:58,080
rhythmic speaking and the cool thing

00:24:56,960 --> 00:25:00,000
about it is

00:24:58,080 --> 00:25:02,080
once you combine them they don't have a

00:25:00,000 --> 00:25:05,120
space too so they just stack

00:25:02,080 --> 00:25:07,279
together it's quite cool because you can

00:25:05,120 --> 00:25:10,799
then combine them into a single

00:25:07,279 --> 00:25:14,400
like empty string

00:25:10,799 --> 00:25:18,000
yeah and if you have this example and

00:25:14,400 --> 00:25:18,400
we escape it we got that if we only take

00:25:18,000 --> 00:25:21,039
the

00:25:18,400 --> 00:25:22,000
six characters out we still have the the

00:25:21,039 --> 00:25:25,279
numbers here

00:25:22,000 --> 00:25:27,200
we then combine it into blocks of three

00:25:25,279 --> 00:25:28,480
put the backslash and then we have the

00:25:27,200 --> 00:25:30,400
octal encoding

00:25:28,480 --> 00:25:31,919
for the for the different characters and

00:25:30,400 --> 00:25:36,000
if we combine them

00:25:31,919 --> 00:25:38,480
we still have the uh alert one

00:25:36,000 --> 00:25:39,520
yeah so this is the basic idea the

00:25:38,480 --> 00:25:41,600
tetris itself

00:25:39,520 --> 00:25:43,679
is quite simple i just want to say i

00:25:41,600 --> 00:25:46,880
just want to show you how this works

00:25:43,679 --> 00:25:47,919
um this is the source code for tetris so

00:25:46,880 --> 00:25:51,760
if you don't have to

00:25:47,919 --> 00:25:53,600
like pack it somewhere um

00:25:51,760 --> 00:25:54,960
so we have embody an unload and a

00:25:53,600 --> 00:25:58,320
prescript with an id

00:25:54,960 --> 00:25:59,520
that we can use to like fill we have a

00:25:58,320 --> 00:26:02,080
set interval

00:25:59,520 --> 00:26:02,960
and where we listen to on key down

00:26:02,080 --> 00:26:05,840
events

00:26:02,960 --> 00:26:07,679
and this code is used to like control

00:26:05,840 --> 00:26:10,080
the blocks

00:26:07,679 --> 00:26:10,960
the next block here is used to to render

00:26:10,080 --> 00:26:13,679
the whole board

00:26:10,960 --> 00:26:16,960
so it converts the characters and

00:26:13,679 --> 00:26:19,919
renders blocks and new lines and dots

00:26:16,960 --> 00:26:20,559
and inside here it's really short so

00:26:19,919 --> 00:26:22,799
this is the

00:26:20,559 --> 00:26:24,320
the logic itself for tetra so it cares

00:26:22,799 --> 00:26:26,559
about

00:26:24,320 --> 00:26:28,400
like moving and collision detection and

00:26:26,559 --> 00:26:30,880
also about um like

00:26:28,400 --> 00:26:31,600
removing blank lines and if you look

00:26:30,880 --> 00:26:34,720
close here

00:26:31,600 --> 00:26:37,760
there's a lot of binary and shift

00:26:34,720 --> 00:26:38,720
magic going on and to explain you the

00:26:37,760 --> 00:26:41,760
idea

00:26:38,720 --> 00:26:44,159
is i wanted to have a board

00:26:41,760 --> 00:26:46,080
that looks like this and this board

00:26:44,159 --> 00:26:48,799
could be written like um

00:26:46,080 --> 00:26:49,600
with a binary representation so whenever

00:26:48,799 --> 00:26:53,520
we have

00:26:49,600 --> 00:26:54,080
a hash then we use a one and whenever we

00:26:53,520 --> 00:26:57,360
have a dot

00:26:54,080 --> 00:27:00,159
we use the zeros and this is actually

00:26:57,360 --> 00:27:02,080
then a number that we can use and this

00:27:00,159 --> 00:27:05,200
number 192

00:27:02,080 --> 00:27:08,320
can be used to do some

00:27:05,200 --> 00:27:12,159
bite shifting things and if we shift by

00:27:08,320 --> 00:27:14,480
five it goes down line if we say shift

00:27:12,159 --> 00:27:15,440
uh by one or minus one then it goes left

00:27:14,480 --> 00:27:18,799
and right

00:27:15,440 --> 00:27:21,279
and if you use um the

00:27:18,799 --> 00:27:22,320
bitwise and we can use it to detect

00:27:21,279 --> 00:27:25,039
collision

00:27:22,320 --> 00:27:25,840
so and that's basically what you need to

00:27:25,039 --> 00:27:29,279
to get it done

00:27:25,840 --> 00:27:30,640
and get it running yeah and the final

00:27:29,279 --> 00:27:33,919
result is this

00:27:30,640 --> 00:27:35,159
so you can play tetris and only i think

00:27:33,919 --> 00:27:39,840
it's

00:27:35,159 --> 00:27:39,840
240 bytes of javascript and html

00:27:40,320 --> 00:27:47,039
okay we're almost done five minutes left

00:27:44,080 --> 00:27:48,880
um everyone i want to show some work in

00:27:47,039 --> 00:27:51,840
progress so it's not done i

00:27:48,880 --> 00:27:52,399
tried to finished it but i wasn't in

00:27:51,840 --> 00:27:54,080
time

00:27:52,399 --> 00:27:55,679
but i want to give you impressions so

00:27:54,080 --> 00:27:57,600
this is something i'm currently working

00:27:55,679 --> 00:27:59,760
on it's called the aleph

00:27:57,600 --> 00:28:01,200
and this is like because i'm going to a

00:27:59,760 --> 00:28:04,399
conference in

00:28:01,200 --> 00:28:08,080
tel aviv in about two weeks and this is

00:28:04,399 --> 00:28:12,399
using using hebrew characters only

00:28:08,080 --> 00:28:15,840
and it packs the whole logic in a single

00:28:12,399 --> 00:28:17,679
in a single character in the top

00:28:15,840 --> 00:28:19,440
another thing i played around with is

00:28:17,679 --> 00:28:21,120
this code it looks really strange but

00:28:19,440 --> 00:28:24,480
it's valid javascript too

00:28:21,120 --> 00:28:27,200
so it uses um combining characters that

00:28:24,480 --> 00:28:29,200
stack over each other so you can still

00:28:27,200 --> 00:28:30,640
execute this and like run any code you

00:28:29,200 --> 00:28:34,480
like and it's like

00:28:30,640 --> 00:28:34,480
vertical layout that you have

00:28:35,039 --> 00:28:39,200
yeah that's about it

00:28:41,279 --> 00:28:45,840
thank you

00:28:46,399 --> 00:28:52,480
no i'm not not not finished it's about

00:28:49,760 --> 00:28:52,960
just that's that's the thing i i want to

00:28:52,480 --> 00:28:55,520
like

00:28:52,960 --> 00:28:56,960
answer some questions before you do okay

00:28:55,520 --> 00:29:01,440
the question is why do

00:28:56,960 --> 00:29:03,120
do i do this and i think it's

00:29:01,440 --> 00:29:04,880
it has many aspects one are the

00:29:03,120 --> 00:29:06,960
limitations that you're

00:29:04,880 --> 00:29:08,880
using so you have this really limitation

00:29:06,960 --> 00:29:10,960
of like a specific amount of characters

00:29:08,880 --> 00:29:13,760
that you have to use there's no

00:29:10,960 --> 00:29:14,159
way to bypass it and you really have to

00:29:13,760 --> 00:29:16,880
work

00:29:14,159 --> 00:29:18,399
through this limitation and you have to

00:29:16,880 --> 00:29:21,039
like focus on this

00:29:18,399 --> 00:29:22,080
um so focus is another thing so if you

00:29:21,039 --> 00:29:25,279
have an idea

00:29:22,080 --> 00:29:27,440
then you can only take the

00:29:25,279 --> 00:29:29,600
most important part of the idea out of

00:29:27,440 --> 00:29:31,120
it so there's no room for like

00:29:29,600 --> 00:29:33,200
packing stuff into it and this is

00:29:31,120 --> 00:29:35,360
something i take away to to my

00:29:33,200 --> 00:29:37,039
daily work because when someone asks me

00:29:35,360 --> 00:29:38,640
especially clients oh can we have this

00:29:37,039 --> 00:29:40,480
and that then it's always good to say

00:29:38,640 --> 00:29:44,399
okay no we have to focus

00:29:40,480 --> 00:29:46,480
and that's good um another thing is

00:29:44,399 --> 00:29:48,399
structure so the the code itself it

00:29:46,480 --> 00:29:50,640
looks really unreadable

00:29:48,399 --> 00:29:52,559
but if you write it you really have to

00:29:50,640 --> 00:29:55,200
structure it so it's like

00:29:52,559 --> 00:29:57,279
pages but it's really it's not wide so

00:29:55,200 --> 00:29:57,919
it's narrow but it's like really long

00:29:57,279 --> 00:30:01,120
and you

00:29:57,919 --> 00:30:03,679
need tools to reformat it and find ways

00:30:01,120 --> 00:30:05,760
to do this automatically

00:30:03,679 --> 00:30:07,840
and i think one of the most important

00:30:05,760 --> 00:30:10,159
part it's fun so it's really cool to

00:30:07,840 --> 00:30:12,080
create and hack this kind of projects

00:30:10,159 --> 00:30:13,440
and it's also cool to see what other

00:30:12,080 --> 00:30:16,480
people do

00:30:13,440 --> 00:30:18,559
and it's it's a good way to

00:30:16,480 --> 00:30:20,480
like live your creativity and it's good

00:30:18,559 --> 00:30:22,880
to do something

00:30:20,480 --> 00:30:25,840
with javascript or with other languages

00:30:22,880 --> 00:30:28,720
outside of your daily work job

00:30:25,840 --> 00:30:29,919
and what i like most here is it's a

00:30:28,720 --> 00:30:33,600
really nice community

00:30:29,919 --> 00:30:35,760
so you might have seen some demo

00:30:33,600 --> 00:30:37,919
demos like our school demos and there

00:30:35,760 --> 00:30:38,720
the community was always really close so

00:30:37,919 --> 00:30:40,880
everyone

00:30:38,720 --> 00:30:43,360
was we did a cool demo he didn't want to

00:30:40,880 --> 00:30:45,120
show the into source code so

00:30:43,360 --> 00:30:47,120
now it's changing and everyone in the

00:30:45,120 --> 00:30:47,840
javascript community set up a github

00:30:47,120 --> 00:30:49,840
project

00:30:47,840 --> 00:30:51,039
and talks about it and you can see the

00:30:49,840 --> 00:30:53,440
source code and

00:30:51,039 --> 00:30:55,120
everyone writes blog posts about it and

00:30:53,440 --> 00:30:57,600
giving talks

00:30:55,120 --> 00:31:00,080
and i would say okay now it's up to you

00:30:57,600 --> 00:31:03,200
to go out and just

00:31:00,080 --> 00:31:03,679
do something not work related just for

00:31:03,200 --> 00:31:06,880
fun

00:31:03,679 --> 00:31:10,480
just for creativity and yeah

00:31:06,880 --> 00:31:12,960
so that's it basically and um

00:31:10,480 --> 00:31:13,760
have a look at this site's js1k is a

00:31:12,960 --> 00:31:16,240
contest

00:31:13,760 --> 00:31:17,279
where you like create stuff and 1000

00:31:16,240 --> 00:31:21,440
characters or

00:31:17,279 --> 00:31:24,960
one chair you have this 140 bytes

00:31:21,440 --> 00:31:26,960
project um there is powered

00:31:24,960 --> 00:31:28,880
it's an odd school website and there's

00:31:26,960 --> 00:31:33,600
something new coming up it's called

00:31:28,880 --> 00:31:35,600
called shader toy and they use webgl

00:31:33,600 --> 00:31:37,200
shaders to create really stunning demos

00:31:35,600 --> 00:31:40,559
so have a look at this

00:31:37,200 --> 00:31:47,840
and yeah go out and play

00:31:40,559 --> 00:31:47,840
so thanks

00:31:51,120 --> 00:31:54,880
well i don't know what you think but i

00:31:53,039 --> 00:31:58,480
my mind is blowing and i can't

00:31:54,880 --> 00:32:00,480
even brain right now um that was amazing

00:31:58,480 --> 00:32:02,320
i am so impressed uh we have some

00:32:00,480 --> 00:32:04,880
questions from twitter which is pretty

00:32:02,320 --> 00:32:06,240
great uh the first question is what was

00:32:04,880 --> 00:32:09,279
the best tweet site

00:32:06,240 --> 00:32:10,399
twit size minify javascript you've came

00:32:09,279 --> 00:32:13,440
across

00:32:10,399 --> 00:32:16,240
did you make a 140 character one and if

00:32:13,440 --> 00:32:16,240
yes what was it

00:32:16,480 --> 00:32:22,080
um so the 140 by

00:32:20,000 --> 00:32:23,360
things so so this is another project i

00:32:22,080 --> 00:32:26,880
just mentioned it

00:32:23,360 --> 00:32:29,039
um it's initial in an initiative by

00:32:26,880 --> 00:32:30,880
judgment so he said okay let's

00:32:29,039 --> 00:32:32,240
try to hack something that's well at

00:32:30,880 --> 00:32:36,080
javascript it's not

00:32:32,240 --> 00:32:37,840
leaking globally and so it should

00:32:36,080 --> 00:32:40,840
be some libraries that you can use in

00:32:37,840 --> 00:32:43,600
your daily project in your daily work

00:32:40,840 --> 00:32:46,240
and i came in with

00:32:43,600 --> 00:32:47,200
a base64 encoder so this was how i get

00:32:46,240 --> 00:32:51,039
involved too

00:32:47,200 --> 00:32:53,919
and i ended with the tetris so the logic

00:32:51,039 --> 00:32:55,039
in inside of of tetris inside of 140

00:32:53,919 --> 00:32:58,000
characters

00:32:55,039 --> 00:32:58,480
and but there were so many and so many

00:32:58,000 --> 00:33:01,760
different

00:32:58,480 --> 00:33:03,840
projects so people really great

00:33:01,760 --> 00:33:06,240
tiny libraries made out of this um there

00:33:03,840 --> 00:33:09,840
was an ask parser or like a new language

00:33:06,240 --> 00:33:11,279
um parser that's written in like

00:33:09,840 --> 00:33:13,919
different parts of

00:33:11,279 --> 00:33:16,960
140 bytes project so it was really like

00:33:13,919 --> 00:33:16,960
stunning what's possible

00:33:17,200 --> 00:33:21,120
so the next question is how do you debug

00:33:19,679 --> 00:33:24,320
in a visible

00:33:21,120 --> 00:33:24,320
hand minified code

00:33:24,559 --> 00:33:31,840
to debug it um the thing is

00:33:28,320 --> 00:33:33,760
usually i don't write them all by hand

00:33:31,840 --> 00:33:36,399
so i don't open up a hex

00:33:33,760 --> 00:33:38,320
editor and do this so i have tools that

00:33:36,399 --> 00:33:41,279
will convert stuff like this

00:33:38,320 --> 00:33:42,399
and it's a long pro process change so

00:33:41,279 --> 00:33:45,440
it's like um

00:33:42,399 --> 00:33:47,840
there's ugly 5.js involved there are

00:33:45,440 --> 00:33:51,600
some other tools that will replace stuff

00:33:47,840 --> 00:33:53,440
and i have my own ascii art generator

00:33:51,600 --> 00:33:55,679
where i have like a

00:33:53,440 --> 00:33:57,600
bitmap and it scales and tries to

00:33:55,679 --> 00:33:59,360
replace characters by different

00:33:57,600 --> 00:34:01,200
points of the code and it tries to eval

00:33:59,360 --> 00:34:03,360
this kind of stuff so there

00:34:01,200 --> 00:34:05,760
is a really long code chain and it took

00:34:03,360 --> 00:34:08,000
some time to get it

00:34:05,760 --> 00:34:09,200
are there any other questions from the

00:34:08,000 --> 00:34:11,520
audience

00:34:09,200 --> 00:34:21,839
yeah there's one over there we can get a

00:34:11,520 --> 00:34:21,839
mic over there in the back

00:34:27,919 --> 00:34:31,280
hello thanks a lot um is it possible to

00:34:30,800 --> 00:34:33,119
see

00:34:31,280 --> 00:34:35,520
the tools that you use somewhere on

00:34:33,119 --> 00:34:39,040
github or something like that

00:34:35,520 --> 00:34:42,079
um yeah sure so i have mine

00:34:39,040 --> 00:34:42,639
my project so my my website is hosted on

00:34:42,079 --> 00:34:44,879
github

00:34:42,639 --> 00:34:47,280
i have like all the stuff i do on github

00:34:44,879 --> 00:34:50,879
it's not well documented so

00:34:47,280 --> 00:34:52,320
they are tools so i usually try to hack

00:34:50,879 --> 00:34:56,480
it really fast to get it

00:34:52,320 --> 00:34:58,640
work work and running and

00:34:56,480 --> 00:35:00,320
i have to clean it up but there are

00:34:58,640 --> 00:35:01,119
other projects or other people that

00:35:00,320 --> 00:35:04,160
really good

00:35:01,119 --> 00:35:05,119
in in this kind of two chains and there

00:35:04,160 --> 00:35:08,400
was a recent

00:35:05,119 --> 00:35:11,680
um submission in in the js1k contest

00:35:08,400 --> 00:35:13,119
and i think it was i have to look it up

00:35:11,680 --> 00:35:16,000
maybe i'm gonna tweet about this but

00:35:13,119 --> 00:35:19,119
there are some cool two chains to use

00:35:16,000 --> 00:35:21,359
yeah use your homework write your

00:35:19,119 --> 00:35:23,359
documentation

00:35:21,359 --> 00:35:24,960
is there another question or is that

00:35:23,359 --> 00:35:28,000
someone just starting

00:35:24,960 --> 00:35:29,359
because i can't really tell hey someone

00:35:28,000 --> 00:35:32,160
in the back i'm sorry but

00:35:29,359 --> 00:35:34,160
for the hey i don't know any more

00:35:32,160 --> 00:35:37,440
questions one more question

00:35:34,160 --> 00:35:40,480
come on there's one over there

00:35:37,440 --> 00:35:42,400
oh and there are two would you ever use

00:35:40,480 --> 00:35:45,680
it in a production

00:35:42,400 --> 00:35:48,079
sorry would you would you ever use

00:35:45,680 --> 00:35:48,880
or what you shown us in production um no

00:35:48,079 --> 00:35:52,079
actually not

00:35:48,880 --> 00:35:55,839
so okay okay so maybe that's

00:35:52,079 --> 00:35:59,520
two two cases so one would be to test

00:35:55,839 --> 00:36:01,200
your security aspects so you can use

00:35:59,520 --> 00:36:03,599
this jsf

00:36:01,200 --> 00:36:04,880
code for example to test if it's really

00:36:03,599 --> 00:36:08,140
safe

00:36:04,880 --> 00:36:09,760
for xss attacks but

00:36:08,140 --> 00:36:13,359
[Music]

00:36:09,760 --> 00:36:15,680
i think it's not needed to to be in the

00:36:13,359 --> 00:36:16,720
production code because there are always

00:36:15,680 --> 00:36:21,200
like ways to

00:36:16,720 --> 00:36:22,640
to unescape it and to find way to like

00:36:21,200 --> 00:36:26,480
read what's going on there

00:36:22,640 --> 00:36:28,560
so there's no no way to hide it at all

00:36:26,480 --> 00:36:30,720
because you can spend some effort to to

00:36:28,560 --> 00:36:32,800
get it so just a short follow-up so

00:36:30,720 --> 00:36:34,880
what would be the your perfect way of

00:36:32,800 --> 00:36:35,200
hiding the code so no one can read it

00:36:34,880 --> 00:36:39,119
and

00:36:35,200 --> 00:36:42,320
kind of copy it or steal it

00:36:39,119 --> 00:36:46,240
so the perfect way to hide code yeah

00:36:42,320 --> 00:36:49,440
um i think it's a combination so

00:36:46,240 --> 00:36:52,560
and i would only do it to hide it to

00:36:49,440 --> 00:36:56,160
to make people learn how to uh

00:36:52,560 --> 00:37:00,480
like reveal it so there's a cool website

00:36:56,160 --> 00:37:04,800
act no net i think it's called this 3d

00:37:00,480 --> 00:37:06,800
css experience and here's some really

00:37:04,800 --> 00:37:08,400
cool hidden code and you have to go

00:37:06,800 --> 00:37:11,280
through and you see

00:37:08,400 --> 00:37:12,240
um he's overriding the eval and the

00:37:11,280 --> 00:37:14,800
escape

00:37:12,240 --> 00:37:15,359
methods and then restoring it so he uses

00:37:14,800 --> 00:37:18,480
us

00:37:15,359 --> 00:37:21,760
his own custom methods and he also uses

00:37:18,480 --> 00:37:23,760
um characters from the hebrew

00:37:21,760 --> 00:37:25,440
alphabet that changes the reading

00:37:23,760 --> 00:37:26,960
direction so you can't read the code

00:37:25,440 --> 00:37:30,079
anymore because it's like

00:37:26,960 --> 00:37:32,320
you start from one and and it's flipping

00:37:30,079 --> 00:37:34,839
in between so it's really hard to see

00:37:32,320 --> 00:37:38,720
what's going on

00:37:34,839 --> 00:37:42,079
cheers okay i've seen one more question

00:37:38,720 --> 00:37:44,240
somewhere here yes

00:37:42,079 --> 00:37:47,599
and then you actually get to get some

00:37:44,240 --> 00:37:47,599
coffee so don't worry

00:37:49,359 --> 00:37:54,079
although i would imagine everyone is

00:37:51,040 --> 00:37:54,079
really awake right now

00:37:57,760 --> 00:38:00,960
you hear me have you done this kind of

00:38:00,160 --> 00:38:04,079
stuff in

00:38:00,960 --> 00:38:06,240
other languages and in general

00:38:04,079 --> 00:38:07,839
what do you think in javascript with

00:38:06,240 --> 00:38:09,200
this regard is it

00:38:07,839 --> 00:38:11,200
what stuff do you like what you don't

00:38:09,200 --> 00:38:13,280
like about the language

00:38:11,200 --> 00:38:15,440
um so i haven't done that in other

00:38:13,280 --> 00:38:16,079
languages i only focus on the javascript

00:38:15,440 --> 00:38:18,400
part

00:38:16,079 --> 00:38:20,480
i saw some really cool things going on i

00:38:18,400 --> 00:38:22,720
think pisces is really

00:38:20,480 --> 00:38:24,160
good for this and ruby and so there's

00:38:22,720 --> 00:38:26,240
some japanese guy

00:38:24,160 --> 00:38:27,200
creating really crazy stuff with ruby

00:38:26,240 --> 00:38:30,640
code

00:38:27,200 --> 00:38:33,359
um there are some

00:38:30,640 --> 00:38:35,359
i think this this js1k not not just okay

00:38:33,359 --> 00:38:37,040
this js so six different characters

00:38:35,359 --> 00:38:38,400
i think javascript is the

00:38:37,040 --> 00:38:40,160
language where you can do this there's

00:38:38,400 --> 00:38:42,160
no other language

00:38:40,160 --> 00:38:43,520
or at least i think there's no other

00:38:42,160 --> 00:38:47,359
language where you can really

00:38:43,520 --> 00:38:49,839
only use six different symbols

00:38:47,359 --> 00:38:51,200
but there are other language languages

00:38:49,839 --> 00:38:52,800
like like ruby that

00:38:51,200 --> 00:38:54,240
provide some more functionality by

00:38:52,800 --> 00:38:57,520
default so you can use

00:38:54,240 --> 00:38:58,320
like unpack algorithms that are already

00:38:57,520 --> 00:39:01,680
included

00:38:58,320 --> 00:39:03,839
somewhere so javascript is okay

00:39:01,680 --> 00:39:05,760
and for me it's quite fun and the cool

00:39:03,839 --> 00:39:08,000
thing about javascript is that

00:39:05,760 --> 00:39:09,119
if you combine it with html there's an

00:39:08,000 --> 00:39:10,720
immediate output

00:39:09,119 --> 00:39:12,320
so you can see it in a browser and

00:39:10,720 --> 00:39:14,079
that's that's what's cool so usually all

00:39:12,320 --> 00:39:18,079
the other examples you have to compile

00:39:14,079 --> 00:39:20,720
it or copy it to the command line and

00:39:18,079 --> 00:39:21,920
javascript box in the browser okay cool

00:39:20,720 --> 00:39:23,920
thanks

00:39:21,920 --> 00:39:25,680
awesome thank you for all the questions

00:39:23,920 --> 00:39:26,320
and thank you martin that was absolutely

00:39:25,680 --> 00:39:29,040
amazing

00:39:26,320 --> 00:39:29,760
and i hope that everyone is really like

00:39:29,040 --> 00:39:32,400
eager to

00:39:29,760 --> 00:39:34,480
work on some fun projects with

00:39:32,400 --> 00:39:37,359
javascript and now everyone gets coffee

00:39:34,480 --> 00:39:43,839
which is even more exciting

00:39:37,359 --> 00:39:43,839
thank you

00:39:46,079 --> 00:39:48,160

YouTube URL: https://www.youtube.com/watch?v=Ychs0T-4xoU


