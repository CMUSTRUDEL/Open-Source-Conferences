Title: Dependency Injection for Future Generations by Pascal Precht at JSConf Budapest 2015
Publication date: 2020-09-23
Playlist: JSConf Budapest 2015
Description: 
	Slides: http://pascalprecht.github.io/slides/dependency-injection-for-future-generations/#/

http://jsconfbp.com/#pascalprecht

Because dependency injection is cool and that it makes life of all us developers a looot easier, we start off this talk by first understanding what dependency injection stands for and why it is such a blessing in disguise...and also because first things first. Once that is clear we can dive deeper into some existing implementations, to get a real feel of how it all works, and finish by looking at how these implementations are used inside the new Angular 2, by embracing the power of TypeScript annotations.
Captions: 
	00:00:12,480 --> 00:00:15,280
all right

00:00:13,040 --> 00:00:16,160
so hi everyone um as you said my name is

00:00:15,280 --> 00:00:19,600
pascal and

00:00:16,160 --> 00:00:22,640
um so i've spent the last few months

00:00:19,600 --> 00:00:24,800
uh reading the angular 2 source code

00:00:22,640 --> 00:00:25,680
and today i would like to share some

00:00:24,800 --> 00:00:29,119
some learnings

00:00:25,680 --> 00:00:30,800
uh with you um and uh especially about

00:00:29,119 --> 00:00:33,120
dependency injection for

00:00:30,800 --> 00:00:35,040
future generations so i took the topic

00:00:33,120 --> 00:00:38,079
dependency injection because

00:00:35,040 --> 00:00:38,719
um because of a couple of reasons i

00:00:38,079 --> 00:00:41,920
think that

00:00:38,719 --> 00:00:43,760
dependency injection is important or at

00:00:41,920 --> 00:00:44,079
least it's a nice pattern to to write

00:00:43,760 --> 00:00:46,800
better

00:00:44,079 --> 00:00:48,320
code and in addition to that i think

00:00:46,800 --> 00:00:50,160
that the angular team has

00:00:48,320 --> 00:00:52,559
done a very very good job on the new

00:00:50,160 --> 00:00:55,360
dependency injection system

00:00:52,559 --> 00:00:56,320
um before i start a couple of things so

00:00:55,360 --> 00:00:59,680
first i want to

00:00:56,320 --> 00:01:00,160
thank two persons um merrick christensen

00:00:59,680 --> 00:01:02,000
from

00:01:00,160 --> 00:01:04,320
salt lake city he gave a great talk on

00:01:02,000 --> 00:01:06,400
dependency injection at angie vegas

00:01:04,320 --> 00:01:08,560
just a few weeks ago and he basically

00:01:06,400 --> 00:01:09,439
allowed me to steal some ideas for my

00:01:08,560 --> 00:01:11,600
talk

00:01:09,439 --> 00:01:12,479
and then there's also voyagina who's a

00:01:11,600 --> 00:01:14,640
former

00:01:12,479 --> 00:01:16,640
core member of the angular team and he

00:01:14,640 --> 00:01:17,680
gave a talk about the new dependency

00:01:16,640 --> 00:01:20,640
injection system

00:01:17,680 --> 00:01:22,240
last year at ngconf which is what

00:01:20,640 --> 00:01:24,720
everything in this talk is basically

00:01:22,240 --> 00:01:26,400
based on he made the original version

00:01:24,720 --> 00:01:28,479
what you see today will be like the

00:01:26,400 --> 00:01:29,920
latest and greatest and i hope you like

00:01:28,479 --> 00:01:33,280
it

00:01:29,920 --> 00:01:35,200
um right and then there's another thing

00:01:33,280 --> 00:01:36,720
uh it has nothing to do with the talk at

00:01:35,200 --> 00:01:40,320
all but i think it's

00:01:36,720 --> 00:01:43,600
it's fun to share so just recently um

00:01:40,320 --> 00:01:48,240
i bought some some new sunglasses and

00:01:43,600 --> 00:01:51,280
a soap bubble gun and a selfie stick

00:01:48,240 --> 00:01:52,479
and so you might you might ask yourself

00:01:51,280 --> 00:01:55,520
so why is this

00:01:52,479 --> 00:01:57,520
guy telling us about his latest

00:01:55,520 --> 00:01:59,840
achievements and online shopping

00:01:57,520 --> 00:02:01,600
so the reason for that is that um it

00:01:59,840 --> 00:02:03,439
didn't take long for me to realize that

00:02:01,600 --> 00:02:05,600
you can do some very very fun

00:02:03,439 --> 00:02:07,520
stuff with it and this is what i what i

00:02:05,600 --> 00:02:11,200
did

00:02:07,520 --> 00:02:12,800
so basically it's me running around

00:02:11,200 --> 00:02:14,959
randomly in the office

00:02:12,800 --> 00:02:16,319
with my selfie stick and shooting with

00:02:14,959 --> 00:02:19,920
soap bubbles as

00:02:16,319 --> 00:02:23,280
my colleagues um but yeah let's

00:02:19,920 --> 00:02:26,800
let's talk some business

00:02:23,280 --> 00:02:28,560
all right so dependency injection um

00:02:26,800 --> 00:02:30,480
so i talked with some people here at the

00:02:28,560 --> 00:02:31,760
conference and and so they came to me

00:02:30,480 --> 00:02:33,040
and they asked me yeah so you're

00:02:31,760 --> 00:02:34,560
you're giving a talk here right and i

00:02:33,040 --> 00:02:35,840
was like yeah and they were like okay so

00:02:34,560 --> 00:02:37,519
what are you talking about i was like

00:02:35,840 --> 00:02:40,400
yeah dependency injection

00:02:37,519 --> 00:02:41,440
and they're like okay so so what are you

00:02:40,400 --> 00:02:43,840
talking about then so

00:02:41,440 --> 00:02:46,239
there's not so much to say about it and

00:02:43,840 --> 00:02:47,760
uh it turned out that

00:02:46,239 --> 00:02:49,680
in fact about dependency injection

00:02:47,760 --> 00:02:52,800
itself there's not

00:02:49,680 --> 00:02:56,080
super much to to tell about but um

00:02:52,800 --> 00:02:58,080
again there will be much more especially

00:02:56,080 --> 00:02:59,200
in terms of the angular 2 dependency

00:02:58,080 --> 00:03:02,159
injection system

00:02:59,200 --> 00:03:04,319
so nonetheless um here is my talk

00:03:02,159 --> 00:03:07,599
basically in a single slide

00:03:04,319 --> 00:03:11,040
uh dependency injection is a 25 term

00:03:07,599 --> 00:03:14,239
for five cent concept and that's uh

00:03:11,040 --> 00:03:17,040
sort of true actually um

00:03:14,239 --> 00:03:18,640
so this guy right here this is voita i'm

00:03:17,040 --> 00:03:21,360
one of the ones that i've mentioned

00:03:18,640 --> 00:03:22,239
at the beginning of the talk and um this

00:03:21,360 --> 00:03:24,000
is uh

00:03:22,239 --> 00:03:25,680
where he gave his talk at ngconf about

00:03:24,000 --> 00:03:29,519
dependency injection

00:03:25,680 --> 00:03:31,360
and so he said that

00:03:29,519 --> 00:03:32,640
we can see dependency injection

00:03:31,360 --> 00:03:35,599
basically as

00:03:32,640 --> 00:03:37,120
first as a design pattern and we can

00:03:35,599 --> 00:03:40,000
also see it as a framework and we have

00:03:37,120 --> 00:03:41,840
to distinguish between those two things

00:03:40,000 --> 00:03:43,840
and this is um what i would like to do

00:03:41,840 --> 00:03:46,159
today as well i would like to

00:03:43,840 --> 00:03:47,680
show you the the pattern itself so that

00:03:46,159 --> 00:03:49,519
you that you that we all know what

00:03:47,680 --> 00:03:52,159
dependency injection actually is

00:03:49,519 --> 00:03:53,040
the the five cent concept and then we

00:03:52,159 --> 00:03:54,640
talk about the

00:03:53,040 --> 00:03:56,560
the dependency injection system or the

00:03:54,640 --> 00:03:59,280
framework

00:03:56,560 --> 00:04:00,720
so di as a design pattern or also known

00:03:59,280 --> 00:04:03,040
as the five cent concept

00:04:00,720 --> 00:04:05,040
let's start with this class right here

00:04:03,040 --> 00:04:08,480
so this is an es6 class

00:04:05,040 --> 00:04:10,080
it's a car and it has a constructor and

00:04:08,480 --> 00:04:12,560
there's some stuff going on it has a

00:04:10,080 --> 00:04:14,640
method drive to actually drive

00:04:12,560 --> 00:04:16,320
and in the constructor we can see that

00:04:14,640 --> 00:04:17,280
there are basically three dependencies

00:04:16,320 --> 00:04:20,639
right we have

00:04:17,280 --> 00:04:21,440
we have an engine we have tires and we

00:04:20,639 --> 00:04:25,440
have doors

00:04:21,440 --> 00:04:28,560
in order to to create our uh car

00:04:25,440 --> 00:04:29,199
and um so despite the fact that we now

00:04:28,560 --> 00:04:32,000
have

00:04:29,199 --> 00:04:32,639
three different ways to create objects

00:04:32,000 --> 00:04:35,600
at the

00:04:32,639 --> 00:04:37,120
particular point um turns out that this

00:04:35,600 --> 00:04:38,720
is actually

00:04:37,120 --> 00:04:40,560
not a good thing to do it like that we

00:04:38,720 --> 00:04:42,000
have some problems with that code

00:04:40,560 --> 00:04:43,919
and the problems the problem that we

00:04:42,000 --> 00:04:47,040
have is that

00:04:43,919 --> 00:04:47,680
so the car itself knows how to create an

00:04:47,040 --> 00:04:49,840
engine

00:04:47,680 --> 00:04:51,280
and the car itself knows how to get

00:04:49,840 --> 00:04:54,479
tires and doors

00:04:51,280 --> 00:04:57,040
and this can be a problem if you want to

00:04:54,479 --> 00:04:59,680
test your code and as we all know

00:04:57,040 --> 00:05:00,960
we love testing and we just do it every

00:04:59,680 --> 00:05:04,560
day

00:05:00,960 --> 00:05:07,360
we want to be able to to write tests

00:05:04,560 --> 00:05:08,639
for this particular class without uh too

00:05:07,360 --> 00:05:10,880
much effort like just

00:05:08,639 --> 00:05:12,880
just think about uh switching or

00:05:10,880 --> 00:05:16,479
swapping out those dependencies

00:05:12,880 --> 00:05:19,520
with mocks right it's pretty hard to do

00:05:16,479 --> 00:05:22,479
um so what we need is

00:05:19,520 --> 00:05:24,160
a way to kind of abstract those

00:05:22,479 --> 00:05:25,919
implementation details away

00:05:24,160 --> 00:05:28,880
so that the car doesn't know about it

00:05:25,919 --> 00:05:31,759
right and this is what it looks like

00:05:28,880 --> 00:05:32,160
so basically what we do is we we pass in

00:05:31,759 --> 00:05:34,800
the

00:05:32,160 --> 00:05:35,840
the uh dependencies that we have in the

00:05:34,800 --> 00:05:38,240
constructor

00:05:35,840 --> 00:05:40,400
so now the car needs an engine it needs

00:05:38,240 --> 00:05:43,520
tires and it needs doors in order to

00:05:40,400 --> 00:05:45,120
to be created and this makes the code

00:05:43,520 --> 00:05:48,240
much more testable

00:05:45,120 --> 00:05:50,880
right because now when we create a

00:05:48,240 --> 00:05:52,560
car we are able to inject our

00:05:50,880 --> 00:05:53,600
dependencies from the outside world and

00:05:52,560 --> 00:05:56,639
the car itself

00:05:53,600 --> 00:05:59,199
doesn't know how to create those objects

00:05:56,639 --> 00:06:00,560
um and this is especially important when

00:05:59,199 --> 00:06:03,600
we run tests

00:06:00,560 --> 00:06:05,280
um for each test we want to create a

00:06:03,600 --> 00:06:07,840
different environment right

00:06:05,280 --> 00:06:08,720
like when you write a test spec um you

00:06:07,840 --> 00:06:10,639
have different

00:06:08,720 --> 00:06:13,039
scenarios that you want to represent in

00:06:10,639 --> 00:06:16,000
your spec and therefore you need to be

00:06:13,039 --> 00:06:16,560
able to um create objects in in

00:06:16,000 --> 00:06:18,840
different

00:06:16,560 --> 00:06:20,880
um scenarios and in certain

00:06:18,840 --> 00:06:24,080
circumstances

00:06:20,880 --> 00:06:27,039
so in the end you can say that

00:06:24,080 --> 00:06:28,160
testing and reusable code is somewhat

00:06:27,039 --> 00:06:31,840
like the same

00:06:28,160 --> 00:06:34,800
thing right and uh this kind of

00:06:31,840 --> 00:06:36,080
uh construction that we see here is also

00:06:34,800 --> 00:06:38,720
called constructor

00:06:36,080 --> 00:06:40,319
injection and what we can do now is we

00:06:38,720 --> 00:06:42,560
can create our car like this

00:06:40,319 --> 00:06:43,680
right we pass in our three dependencies

00:06:42,560 --> 00:06:46,720
and if we write a test

00:06:43,680 --> 00:06:49,759
we can do it like that and uh yay

00:06:46,720 --> 00:06:52,639
our code is now testable which is cool

00:06:49,759 --> 00:06:55,840
and basically um that's it that's

00:06:52,639 --> 00:06:55,840
dependency injection

00:06:59,759 --> 00:07:03,840
okay um there's another problem though

00:07:02,800 --> 00:07:07,520
that we have now

00:07:03,840 --> 00:07:10,960
which is this guy here we now have a uh

00:07:07,520 --> 00:07:12,560
main method we now have to kind of wire

00:07:10,960 --> 00:07:14,560
all of our dependencies together

00:07:12,560 --> 00:07:14,880
manually ourselves in order to create a

00:07:14,560 --> 00:07:17,360
car

00:07:14,880 --> 00:07:18,479
object right so here we see all

00:07:17,360 --> 00:07:21,919
dependencies

00:07:18,479 --> 00:07:25,599
and then we get our car so in this case

00:07:21,919 --> 00:07:27,440
it's just a very very small application

00:07:25,599 --> 00:07:29,120
but just just imagine you have like a

00:07:27,440 --> 00:07:32,160
lot of classes and

00:07:29,120 --> 00:07:34,400
and components and whatever um

00:07:32,160 --> 00:07:35,280
this can get very very hairy just think

00:07:34,400 --> 00:07:38,560
about um

00:07:35,280 --> 00:07:40,560
adding just another dependency right

00:07:38,560 --> 00:07:43,039
so you have to really maintain it on

00:07:40,560 --> 00:07:46,240
each and every single object

00:07:43,039 --> 00:07:49,440
so wouldn't it be nice

00:07:46,240 --> 00:07:51,759
if we uh have a

00:07:49,440 --> 00:07:53,840
if we had a um system for that or a kind

00:07:51,759 --> 00:07:54,800
of service that takes care of wiring

00:07:53,840 --> 00:07:58,080
everything together

00:07:54,800 --> 00:07:59,120
when we ask for a specific object and

00:07:58,080 --> 00:08:01,919
and this is basically

00:07:59,120 --> 00:08:03,199
where um dependency injection as a

00:08:01,919 --> 00:08:05,039
framework comes in

00:08:03,199 --> 00:08:06,319
so first we just talked about the design

00:08:05,039 --> 00:08:09,440
pattern itself

00:08:06,319 --> 00:08:11,840
but now we want to we need a solution

00:08:09,440 --> 00:08:12,800
that makes the maintainability um

00:08:11,840 --> 00:08:17,599
actually

00:08:12,800 --> 00:08:19,919
good so getting back to our main method

00:08:17,599 --> 00:08:21,120
what we want to do or what would be very

00:08:19,919 --> 00:08:22,800
nice if is

00:08:21,120 --> 00:08:24,720
if we could do something something like

00:08:22,800 --> 00:08:27,840
this so

00:08:24,720 --> 00:08:29,919
we create an ejector wherever it

00:08:27,840 --> 00:08:31,120
comes from it's just a very abstract

00:08:29,919 --> 00:08:33,120
kind of code

00:08:31,120 --> 00:08:34,800
and we asked the injector to get a car

00:08:33,120 --> 00:08:36,959
like an instance of car

00:08:34,800 --> 00:08:39,440
and then we could use the car in order

00:08:36,959 --> 00:08:42,399
to work with that

00:08:39,440 --> 00:08:43,120
now the injector knows how to create a

00:08:42,399 --> 00:08:45,600
car

00:08:43,120 --> 00:08:47,200
and if the car has dependencies then the

00:08:45,600 --> 00:08:49,200
injector also takes care of

00:08:47,200 --> 00:08:51,760
instantiating those dependencies

00:08:49,200 --> 00:08:53,600
otherwise the car cannot be created

00:08:51,760 --> 00:08:55,680
but you see that all the wiring is not

00:08:53,600 --> 00:08:56,800
there anymore the injector takes care of

00:08:55,680 --> 00:09:00,399
that

00:08:56,800 --> 00:09:02,320
so it turns out that in angular 1 for

00:09:00,399 --> 00:09:05,360
example we have

00:09:02,320 --> 00:09:07,120
that kind of system already so here we

00:09:05,360 --> 00:09:09,519
have our car class

00:09:07,120 --> 00:09:11,279
and in order to tell the injector what

00:09:09,519 --> 00:09:12,800
other dependencies are needed in order

00:09:11,279 --> 00:09:14,800
to create such an object

00:09:12,800 --> 00:09:16,480
we have to annotate our code and this is

00:09:14,800 --> 00:09:17,360
where the dollar inject property of a

00:09:16,480 --> 00:09:19,600
class comes in

00:09:17,360 --> 00:09:21,279
right this is one way of annotating our

00:09:19,600 --> 00:09:22,240
code in angular 1 in order to tell the

00:09:21,279 --> 00:09:24,959
injector hey

00:09:22,240 --> 00:09:26,480
if you create an object of this class or

00:09:24,959 --> 00:09:29,279
this service

00:09:26,480 --> 00:09:32,399
you also need to create dependencies or

00:09:29,279 --> 00:09:35,040
other objects from from those classes

00:09:32,399 --> 00:09:36,320
so and once we've done that we could do

00:09:35,040 --> 00:09:39,040
something like this

00:09:36,320 --> 00:09:40,560
so what we see here is a uh an angular

00:09:39,040 --> 00:09:44,000
module that is created

00:09:40,560 --> 00:09:45,839
and we register our car as a car service

00:09:44,000 --> 00:09:48,480
so basically what happens here is we say

00:09:45,839 --> 00:09:52,080
okay when somebody asks for car

00:09:48,480 --> 00:09:54,000
uh that um person gets a uh an instance

00:09:52,080 --> 00:09:56,160
of the car service

00:09:54,000 --> 00:09:58,160
so and then we have another service that

00:09:56,160 --> 00:10:00,880
actually asks for car

00:09:58,160 --> 00:10:01,839
and what you see here is another way of

00:10:00,880 --> 00:10:05,040
um

00:10:01,839 --> 00:10:07,519
asking for an object

00:10:05,040 --> 00:10:08,560
without actually annotating the service

00:10:07,519 --> 00:10:11,680
itself

00:10:08,560 --> 00:10:13,760
so here angular actually

00:10:11,680 --> 00:10:16,079
finds out or smart enough to find out

00:10:13,760 --> 00:10:18,720
what what dependency you actually need

00:10:16,079 --> 00:10:19,279
based on the parameter name which is car

00:10:18,720 --> 00:10:20,959
and that

00:10:19,279 --> 00:10:23,600
in that case which of course is a

00:10:20,959 --> 00:10:26,240
problem when you minify your code

00:10:23,600 --> 00:10:27,600
um and then in that case you want to use

00:10:26,240 --> 00:10:31,040
some kind of annotation

00:10:27,600 --> 00:10:33,519
like like dollar inject okay

00:10:31,040 --> 00:10:35,200
this is all cool um the the dependency

00:10:33,519 --> 00:10:37,200
injection system works very well but

00:10:35,200 --> 00:10:40,880
there we still have some some problems

00:10:37,200 --> 00:10:44,160
so first we have an internal cache

00:10:40,880 --> 00:10:44,880
uh in the injector so whenever we get an

00:10:44,160 --> 00:10:46,880
object

00:10:44,880 --> 00:10:47,920
from a specific service it's always a

00:10:46,880 --> 00:10:50,480
singleton

00:10:47,920 --> 00:10:52,000
so if you ask for a car service then you

00:10:50,480 --> 00:10:53,600
get an instance of car service

00:10:52,000 --> 00:10:55,200
and if you ask for car service at

00:10:53,600 --> 00:10:57,120
another place

00:10:55,200 --> 00:10:58,320
you get the same the exact same instance

00:10:57,120 --> 00:10:59,920
back

00:10:58,320 --> 00:11:01,920
which is something we probably don't

00:10:59,920 --> 00:11:04,800
want maybe we want to

00:11:01,920 --> 00:11:07,120
get a different instance whenever we ask

00:11:04,800 --> 00:11:08,959
for a specific object

00:11:07,120 --> 00:11:10,079
another problem is that this uh

00:11:08,959 --> 00:11:12,000
dependency injection system is

00:11:10,079 --> 00:11:13,600
synchronous by default so we're not able

00:11:12,000 --> 00:11:15,920
to inject

00:11:13,600 --> 00:11:18,399
dependencies that are asynchronously

00:11:15,920 --> 00:11:20,800
resolved

00:11:18,399 --> 00:11:21,600
and we have namespace collisions there

00:11:20,800 --> 00:11:24,079
is no

00:11:21,600 --> 00:11:26,320
things like that there's nothing like

00:11:24,079 --> 00:11:27,519
like a real namespace system so when you

00:11:26,320 --> 00:11:29,279
create a service

00:11:27,519 --> 00:11:30,720
with a name car and there's a

00:11:29,279 --> 00:11:32,560
third-party extension

00:11:30,720 --> 00:11:34,880
angular extension that also introduces a

00:11:32,560 --> 00:11:36,800
service car then the last one wins right

00:11:34,880 --> 00:11:38,800
it basically overrides your service so

00:11:36,800 --> 00:11:39,920
it's not really able to

00:11:38,800 --> 00:11:42,959
[Music]

00:11:39,920 --> 00:11:47,040
have two different services

00:11:42,959 --> 00:11:47,040
with the same token and one application

00:11:47,680 --> 00:11:53,279
right and then last but not least

00:11:50,720 --> 00:11:55,279
it's built right into the framework the

00:11:53,279 --> 00:11:57,040
di system of angular 1 is not a system

00:11:55,279 --> 00:11:59,600
that we can use in any other code if you

00:11:57,040 --> 00:12:01,200
write react or amber or whatever

00:11:59,600 --> 00:12:03,519
there's nothing you can do you either

00:12:01,200 --> 00:12:05,279
you either take the whole framework or

00:12:03,519 --> 00:12:07,920
or nothing

00:12:05,279 --> 00:12:10,639
which brings us to the next animated gif

00:12:07,920 --> 00:12:12,720
taking di to the next level

00:12:10,639 --> 00:12:15,200
is anybody into dragon ball i really

00:12:12,720 --> 00:12:19,750
like that one

00:12:15,200 --> 00:12:22,720
okay so di and angular 2

00:12:19,750 --> 00:12:25,920
[Music]

00:12:22,720 --> 00:12:26,720
before we take a look at code of the new

00:12:25,920 --> 00:12:28,240
di system

00:12:26,720 --> 00:12:30,639
let's first understand the concept of

00:12:28,240 --> 00:12:33,680
the new dei system so

00:12:30,639 --> 00:12:34,480
in angular 2 um the dependency injection

00:12:33,680 --> 00:12:37,600
system

00:12:34,480 --> 00:12:39,200
has of course an injector right

00:12:37,600 --> 00:12:40,480
this is something that we want to have

00:12:39,200 --> 00:12:41,120
we want to have a service that we can

00:12:40,480 --> 00:12:43,760
ask for

00:12:41,120 --> 00:12:45,120
for object creation and then of course

00:12:43,760 --> 00:12:47,360
what an injector does

00:12:45,120 --> 00:12:48,800
is it creates an object this is what

00:12:47,360 --> 00:12:49,120
dependency injection in the end is all

00:12:48,800 --> 00:12:52,720
about

00:12:49,120 --> 00:12:55,839
object creation so

00:12:52,720 --> 00:12:56,320
now the big question is how do we get

00:12:55,839 --> 00:12:59,600
there

00:12:56,320 --> 00:13:02,720
like how does the the injector know

00:12:59,600 --> 00:13:04,880
how to instantiate a particular

00:13:02,720 --> 00:13:06,639
um object when we ask for a service how

00:13:04,880 --> 00:13:08,079
does how does the injector know how to

00:13:06,639 --> 00:13:10,720
create that object

00:13:08,079 --> 00:13:13,200
in angular 1 we have things like dot

00:13:10,720 --> 00:13:15,519
service dot factory dot value dot

00:13:13,200 --> 00:13:17,600
whatever

00:13:15,519 --> 00:13:19,519
in angular 2 and the dependency

00:13:17,600 --> 00:13:20,079
injection system we get something that

00:13:19,519 --> 00:13:23,600
is called

00:13:20,079 --> 00:13:26,240
a binding so a binding

00:13:23,600 --> 00:13:27,519
is basically an instruction that tells

00:13:26,240 --> 00:13:29,600
the inductor

00:13:27,519 --> 00:13:30,720
how to create an object of a certain

00:13:29,600 --> 00:13:36,240
token

00:13:30,720 --> 00:13:39,360
right so you can see a binding

00:13:36,240 --> 00:13:40,079
as a sort of recipe how to create an

00:13:39,360 --> 00:13:42,639
object

00:13:40,079 --> 00:13:44,320
and it takes a token whatever token is

00:13:42,639 --> 00:13:48,240
we'll get to that in a second

00:13:44,320 --> 00:13:50,000
and based on that token it creates or

00:13:48,240 --> 00:13:52,000
the the injector creates that object but

00:13:50,000 --> 00:13:54,639
the the binding instruction knows

00:13:52,000 --> 00:13:55,440
how to create an object of a certain

00:13:54,639 --> 00:13:58,399
dependency

00:13:55,440 --> 00:13:58,399
based on a token

00:13:58,800 --> 00:14:02,240
okay so so what does that actually look

00:14:00,800 --> 00:14:05,279
like in code

00:14:02,240 --> 00:14:06,720
this is what it looks like in code so

00:14:05,279 --> 00:14:09,680
what you see here is

00:14:06,720 --> 00:14:11,760
we are injecting a class injector from

00:14:09,680 --> 00:14:14,240
the angular di source code

00:14:11,760 --> 00:14:15,920
and this might change in the future so

00:14:14,240 --> 00:14:16,720
don't spend too much energy on the first

00:14:15,920 --> 00:14:19,199
line it's just

00:14:16,720 --> 00:14:21,120
somewhere of some way of getting that

00:14:19,199 --> 00:14:23,680
particular class

00:14:21,120 --> 00:14:24,240
and then we're creating an injector with

00:14:23,680 --> 00:14:27,199
the method

00:14:24,240 --> 00:14:28,800
resolve and create and resolve and

00:14:27,199 --> 00:14:30,880
create is basically a sort of

00:14:28,800 --> 00:14:32,079
factory function that lets us create

00:14:30,880 --> 00:14:34,160
injector instances

00:14:32,079 --> 00:14:35,360
like different injector services that we

00:14:34,160 --> 00:14:37,199
need

00:14:35,360 --> 00:14:39,760
and the resolve and create function gets

00:14:37,199 --> 00:14:42,160
a list of bindings so you see that

00:14:39,760 --> 00:14:43,839
that this list here is basically just a

00:14:42,160 --> 00:14:46,000
list of the classes that we need as

00:14:43,839 --> 00:14:48,720
dependencies so you might wonder

00:14:46,000 --> 00:14:50,480
how can classes just be like real

00:14:48,720 --> 00:14:51,279
bindings because they're just classes

00:14:50,480 --> 00:14:53,839
right

00:14:51,279 --> 00:14:56,399
we we get into that in a minute what we

00:14:53,839 --> 00:14:59,440
want to focus on now is

00:14:56,399 --> 00:15:03,360
how does the injector know

00:14:59,440 --> 00:15:04,800
um how to create a car when we ask for a

00:15:03,360 --> 00:15:07,279
car

00:15:04,800 --> 00:15:08,880
and if the car has dependencies how does

00:15:07,279 --> 00:15:10,560
the injector know which dependencies

00:15:08,880 --> 00:15:11,839
actually to resolve

00:15:10,560 --> 00:15:13,760
of course we're passing on all the

00:15:11,839 --> 00:15:15,040
dependencies in our factory function

00:15:13,760 --> 00:15:16,000
right here that we need in our entire

00:15:15,040 --> 00:15:19,440
application

00:15:16,000 --> 00:15:21,760
but it doesn't tell the the uh injector

00:15:19,440 --> 00:15:22,639
um which dependencies are needed for

00:15:21,760 --> 00:15:26,480
this particular

00:15:22,639 --> 00:15:27,360
car service so if we take a look at our

00:15:26,480 --> 00:15:31,040
car class

00:15:27,360 --> 00:15:33,040
it's exactly the same code we again need

00:15:31,040 --> 00:15:34,560
something like annotation

00:15:33,040 --> 00:15:36,160
our class needs to know what

00:15:34,560 --> 00:15:37,839
dependencies are needed in order to

00:15:36,160 --> 00:15:41,360
create an object of it

00:15:37,839 --> 00:15:44,160
and this is where this comes in

00:15:41,360 --> 00:15:44,880
so what we do here we again we inject

00:15:44,160 --> 00:15:48,000
something

00:15:44,880 --> 00:15:51,199
from the uh di system it's called

00:15:48,000 --> 00:15:54,000
inject and then we extend the current

00:15:51,199 --> 00:15:55,680
constructor with those weird guys here

00:15:54,000 --> 00:15:59,040
and you might wonder

00:15:55,680 --> 00:16:02,320
what the hell is that so

00:15:59,040 --> 00:16:04,480
basically what happens here is

00:16:02,320 --> 00:16:06,720
it's a metadata information that tells

00:16:04,480 --> 00:16:08,000
the injector that the first parameter of

00:16:06,720 --> 00:16:11,120
that constructor is an

00:16:08,000 --> 00:16:12,800
instance of the type engine and the

00:16:11,120 --> 00:16:14,000
second one is tires and the third one is

00:16:12,800 --> 00:16:16,320
doors

00:16:14,000 --> 00:16:18,800
and the type here is actually also a

00:16:16,320 --> 00:16:20,560
token at the same time

00:16:18,800 --> 00:16:22,480
but how is it possible that we can use

00:16:20,560 --> 00:16:25,199
inject with this add sign

00:16:22,480 --> 00:16:26,720
so what you see here is something that

00:16:25,199 --> 00:16:29,440
is called decorators

00:16:26,720 --> 00:16:30,959
and decorators is a proposal for es7 so

00:16:29,440 --> 00:16:34,959
it's really like something that

00:16:30,959 --> 00:16:37,759
eventually will be standardized and

00:16:34,959 --> 00:16:38,240
decorators allow us to like the name

00:16:37,759 --> 00:16:40,880
says

00:16:38,240 --> 00:16:43,040
um to to decorate existing objects with

00:16:40,880 --> 00:16:46,079
additional information

00:16:43,040 --> 00:16:48,079
and um the reason that we are

00:16:46,079 --> 00:16:49,600
able to to write the code like this and

00:16:48,079 --> 00:16:52,240
make it run is only because we

00:16:49,600 --> 00:16:53,839
we can use transpilers today right so

00:16:52,240 --> 00:16:56,240
there are two transpilers that actually

00:16:53,839 --> 00:16:59,360
um support decorators and those are

00:16:56,240 --> 00:17:01,199
babel and um typescript

00:16:59,360 --> 00:17:02,959
so in a decorator in the end is just a

00:17:01,199 --> 00:17:05,199
function

00:17:02,959 --> 00:17:06,160
right the the at sign that we use is

00:17:05,199 --> 00:17:07,760
just uh

00:17:06,160 --> 00:17:09,360
part of the syntax but in the end the

00:17:07,760 --> 00:17:12,400
decorator itself is just

00:17:09,360 --> 00:17:14,480
just a function so what we see here is a

00:17:12,400 --> 00:17:16,559
very very simplified implementation of

00:17:14,480 --> 00:17:18,799
what the inject decorator does

00:17:16,559 --> 00:17:20,079
it takes some dependencies and it has

00:17:18,799 --> 00:17:22,480
access to the target

00:17:20,079 --> 00:17:24,079
which in our case is the car class and

00:17:22,480 --> 00:17:27,039
then it adds some parameters

00:17:24,079 --> 00:17:28,960
on that class that's all it does so

00:17:27,039 --> 00:17:29,679
basically what happens is we call inject

00:17:28,960 --> 00:17:34,400
with engine

00:17:29,679 --> 00:17:37,520
on the car instance or on the car class

00:17:34,400 --> 00:17:39,360
so what that means is

00:17:37,520 --> 00:17:40,960
if we take a look at that code and we

00:17:39,360 --> 00:17:43,679
transpire that to es5

00:17:40,960 --> 00:17:45,760
what we get is something like that right

00:17:43,679 --> 00:17:47,280
a class in es6 in the end it's just a

00:17:45,760 --> 00:17:49,760
function es5

00:17:47,280 --> 00:17:51,440
and parameters is just a property on

00:17:49,760 --> 00:17:53,120
that particular function

00:17:51,440 --> 00:17:54,559
and then we have an area of parameters

00:17:53,120 --> 00:17:55,919
and you see that each parameter

00:17:54,559 --> 00:17:58,880
currently is also

00:17:55,919 --> 00:17:59,760
an area itself that's just because if

00:17:58,880 --> 00:18:02,240
you have

00:17:59,760 --> 00:18:03,120
more than one annotation or decorate uh

00:18:02,240 --> 00:18:04,960
decorator

00:18:03,120 --> 00:18:07,679
for a single parameter those are listed

00:18:04,960 --> 00:18:09,760
up in each array

00:18:07,679 --> 00:18:10,720
so in the end what this decorator does

00:18:09,760 --> 00:18:14,320
it really just

00:18:10,720 --> 00:18:16,640
adds metadata to that particular class

00:18:14,320 --> 00:18:18,160
and the injection system is able to read

00:18:16,640 --> 00:18:19,919
out that data in order to

00:18:18,160 --> 00:18:21,280
find out which other dependencies need

00:18:19,919 --> 00:18:23,520
to be instantiated

00:18:21,280 --> 00:18:25,600
in order to create a car object does

00:18:23,520 --> 00:18:28,080
that make sense

00:18:25,600 --> 00:18:30,320
okay everybody goes like like this so we

00:18:28,080 --> 00:18:33,600
can move on

00:18:30,320 --> 00:18:35,840
so but let's get back to the bindings

00:18:33,600 --> 00:18:38,000
what is happening here so we just pass

00:18:35,840 --> 00:18:40,960
in a list of classes

00:18:38,000 --> 00:18:42,000
and those are supposed to be bindings so

00:18:40,960 --> 00:18:44,160
it turns out that

00:18:42,000 --> 00:18:45,840
those classes here as we write them

00:18:44,160 --> 00:18:48,640
there is actually

00:18:45,840 --> 00:18:50,720
it's part of a kind of shorthand syntax

00:18:48,640 --> 00:18:51,919
it's like an implicit syntax of defining

00:18:50,720 --> 00:18:54,240
bindings

00:18:51,919 --> 00:18:54,960
we can write the explicit version of it

00:18:54,240 --> 00:18:58,000
and it would be

00:18:54,960 --> 00:19:01,120
it would look something like this

00:18:58,000 --> 00:19:04,320
so we import a function bind

00:19:01,120 --> 00:19:06,400
from the di system and and then this is

00:19:04,320 --> 00:19:08,640
what happens we say okay we create an

00:19:06,400 --> 00:19:11,840
injector with the following bindings

00:19:08,640 --> 00:19:14,080
we bind the token car to the class car

00:19:11,840 --> 00:19:17,200
and we do the same for the for the

00:19:14,080 --> 00:19:20,240
engine for the tires and for the doors

00:19:17,200 --> 00:19:22,240
so basically what we're seeing here what

00:19:20,240 --> 00:19:24,640
we're passing to bind is a token and a

00:19:22,240 --> 00:19:25,760
token can be a type which in the end is

00:19:24,640 --> 00:19:28,960
a class

00:19:25,760 --> 00:19:30,960
or a string and we bind it to another

00:19:28,960 --> 00:19:33,520
class

00:19:30,960 --> 00:19:35,039
and the classes are here so you might

00:19:33,520 --> 00:19:35,919
wonder why why do we want to do that

00:19:35,039 --> 00:19:37,520
actually

00:19:35,919 --> 00:19:39,039
this is something you probably won't do

00:19:37,520 --> 00:19:40,720
because you can just use the the

00:19:39,039 --> 00:19:43,280
shorthand syntax

00:19:40,720 --> 00:19:44,960
but what this allows us to do is

00:19:43,280 --> 00:19:53,520
something like this

00:19:44,960 --> 00:19:57,360
bind engine to class other engine boom

00:19:53,520 --> 00:20:00,720
so i show once again

00:19:57,360 --> 00:20:01,360
we bind the token engine to another

00:20:00,720 --> 00:20:04,559
class

00:20:01,360 --> 00:20:06,799
other engine what does that mean

00:20:04,559 --> 00:20:08,640
so it enables us basically to do three

00:20:06,799 --> 00:20:12,159
things

00:20:08,640 --> 00:20:14,400
first we uh we are able to

00:20:12,159 --> 00:20:15,520
map a token that is used across our

00:20:14,400 --> 00:20:18,159
application to

00:20:15,520 --> 00:20:18,559
any class doesn't matter so if you have

00:20:18,159 --> 00:20:19,919
a

00:20:18,559 --> 00:20:21,760
if you have an application with 10

00:20:19,919 --> 00:20:22,159
classes and they all ask for something

00:20:21,760 --> 00:20:24,400
like

00:20:22,159 --> 00:20:25,360
engine they will get an instance of

00:20:24,400 --> 00:20:26,880
other engine

00:20:25,360 --> 00:20:28,080
if you want to swap out that dependency

00:20:26,880 --> 00:20:30,480
you can just do it there you just bind

00:20:28,080 --> 00:20:31,919
it to another class

00:20:30,480 --> 00:20:33,440
and there are no name conflicts anymore

00:20:31,919 --> 00:20:34,400
because other engine in that case is

00:20:33,440 --> 00:20:36,720
also just

00:20:34,400 --> 00:20:37,840
a type or a class or maybe just another

00:20:36,720 --> 00:20:40,960
variable that is

00:20:37,840 --> 00:20:44,480
uh that has the value of another class

00:20:40,960 --> 00:20:47,039
so if you're using um

00:20:44,480 --> 00:20:47,760
or yeah if you're using a dependency

00:20:47,039 --> 00:20:50,000
that is called

00:20:47,760 --> 00:20:51,360
engine and you have a third-party uh

00:20:50,000 --> 00:20:53,200
library or extension that also

00:20:51,360 --> 00:20:54,559
introduces a service engine

00:20:53,200 --> 00:20:56,610
then this is the way how you can

00:20:54,559 --> 00:20:57,840
actually map both

00:20:56,610 --> 00:20:59,600
[Music]

00:20:57,840 --> 00:21:02,640
both dependencies into your application

00:20:59,600 --> 00:21:05,840
without any name collision

00:21:02,640 --> 00:21:08,240
right and this is actually

00:21:05,840 --> 00:21:10,240
not all we can we can do more so there

00:21:08,240 --> 00:21:12,000
are more binding instructions

00:21:10,240 --> 00:21:13,520
next to two class we also have something

00:21:12,000 --> 00:21:16,159
like two value

00:21:13,520 --> 00:21:17,280
which actually lets us bind a token to

00:21:16,159 --> 00:21:19,440
some value

00:21:17,280 --> 00:21:21,520
so what happens here is we bind string

00:21:19,440 --> 00:21:23,039
to the to the string hello world

00:21:21,520 --> 00:21:24,640
so if you have a class that has a

00:21:23,039 --> 00:21:27,600
dependency of type string

00:21:24,640 --> 00:21:28,320
what you get is hello world as a string

00:21:27,600 --> 00:21:30,880
which is

00:21:28,320 --> 00:21:32,080
amazing because uh you can do something

00:21:30,880 --> 00:21:33,919
like configuration

00:21:32,080 --> 00:21:36,480
configurations with that that are

00:21:33,919 --> 00:21:36,480
injectable

00:21:36,559 --> 00:21:43,520
we have uh two les which basically

00:21:40,000 --> 00:21:45,280
maps a token to yet another token

00:21:43,520 --> 00:21:47,440
right so if you have an engine and you

00:21:45,280 --> 00:21:49,440
would rather name it a v8

00:21:47,440 --> 00:21:51,360
for whatever reason you can create an

00:21:49,440 --> 00:21:53,039
alias for that particular token that

00:21:51,360 --> 00:21:56,080
binds to a class engine

00:21:53,039 --> 00:21:57,039
which is super powerful and of course we

00:21:56,080 --> 00:21:59,039
have factories

00:21:57,039 --> 00:22:00,799
so in some cases you might need

00:21:59,039 --> 00:22:02,080
something like that where you have a

00:22:00,799 --> 00:22:04,880
function that actually

00:22:02,080 --> 00:22:05,520
finds out which dependency you're

00:22:04,880 --> 00:22:08,240
actually

00:22:05,520 --> 00:22:10,840
uh you actually want to instantiate so

00:22:08,240 --> 00:22:13,760
whenever somebody asks for

00:22:10,840 --> 00:22:17,200
um an object that is of type engine

00:22:13,760 --> 00:22:17,840
what you get back is either an v8 engine

00:22:17,200 --> 00:22:20,400
or

00:22:17,840 --> 00:22:21,120
v6 engine depending on what the

00:22:20,400 --> 00:22:23,600
condition

00:22:21,120 --> 00:22:24,240
evaluates to and of course the factory

00:22:23,600 --> 00:22:26,480
itself can

00:22:24,240 --> 00:22:27,280
can have their own dependencies which is

00:22:26,480 --> 00:22:29,120
um

00:22:27,280 --> 00:22:30,799
so so you can introduce them just with a

00:22:29,120 --> 00:22:32,640
second parameter here

00:22:30,799 --> 00:22:34,480
it's just a list of another another list

00:22:32,640 --> 00:22:35,200
of tokens that your injectors already

00:22:34,480 --> 00:22:36,720
configured

00:22:35,200 --> 00:22:38,720
and then you can use those in your

00:22:36,720 --> 00:22:40,400
factory

00:22:38,720 --> 00:22:41,760
and i think this is actually pretty

00:22:40,400 --> 00:22:43,200
pretty cool because it's like super

00:22:41,760 --> 00:22:44,720
powerful it basically solves all

00:22:43,200 --> 00:22:47,679
problems that we have for the di system

00:22:44,720 --> 00:22:47,679
in angular 1 right now

00:22:48,960 --> 00:22:52,840
so there's still one thing that we

00:22:50,240 --> 00:22:54,000
haven't talked about yet which is

00:22:52,840 --> 00:22:57,200
asynchronicity

00:22:54,000 --> 00:22:58,880
so what are we doing with that

00:22:57,200 --> 00:23:00,559
it turns out that the udi system

00:22:58,880 --> 00:23:01,280
introduces yet another binding

00:23:00,559 --> 00:23:04,480
instruction

00:23:01,280 --> 00:23:06,320
which is called two async factory

00:23:04,480 --> 00:23:08,000
and what two async factory allows us to

00:23:06,320 --> 00:23:10,640
do is basically

00:23:08,000 --> 00:23:11,679
we can create a promise and the promise

00:23:10,640 --> 00:23:13,520
will eventually

00:23:11,679 --> 00:23:14,720
resolve or reject depending on whatever

00:23:13,520 --> 00:23:16,880
happens inside that

00:23:14,720 --> 00:23:18,400
code and then it will return that

00:23:16,880 --> 00:23:19,760
promise and whenever we ask for

00:23:18,400 --> 00:23:21,039
something like engine in that case we

00:23:19,760 --> 00:23:23,520
get an engine promise

00:23:21,039 --> 00:23:24,080
which eventually will be resolved so

00:23:23,520 --> 00:23:26,640
here

00:23:24,080 --> 00:23:28,080
we return a promise we fetch some engine

00:23:26,640 --> 00:23:30,960
data

00:23:28,080 --> 00:23:32,799
and when the data comes back we actually

00:23:30,960 --> 00:23:36,400
create a new instance of engine

00:23:32,799 --> 00:23:39,200
with that data right but still

00:23:36,400 --> 00:23:39,520
in your in your application code you

00:23:39,200 --> 00:23:43,440
just

00:23:39,520 --> 00:23:43,440
ask for something of type engine

00:23:44,799 --> 00:23:50,480
this leads to more um decorators

00:23:48,640 --> 00:23:52,400
because all of a sudden we have two

00:23:50,480 --> 00:23:54,880
strategies we can inject

00:23:52,400 --> 00:23:56,640
um dependency synchronous uh synchronous

00:23:54,880 --> 00:23:59,360
or asynchronous

00:23:56,640 --> 00:23:59,840
which means we need a new decorator that

00:23:59,360 --> 00:24:03,039
tells

00:23:59,840 --> 00:24:05,360
our application or our injector

00:24:03,039 --> 00:24:06,080
that some parameters are actually

00:24:05,360 --> 00:24:09,200
injected

00:24:06,080 --> 00:24:12,559
asynchronously so what we can do

00:24:09,200 --> 00:24:15,679
is we use inject promise

00:24:12,559 --> 00:24:17,279
as a decorator so what it does is it

00:24:15,679 --> 00:24:19,760
basically um tests the

00:24:17,279 --> 00:24:20,960
the injector okay so this is the token

00:24:19,760 --> 00:24:23,679
engine

00:24:20,960 --> 00:24:25,120
and um and the injection system then

00:24:23,679 --> 00:24:26,799
finds out okay so it's it's

00:24:25,120 --> 00:24:29,039
the the token that is bound to the async

00:24:26,799 --> 00:24:30,720
factory so it returns a promise

00:24:29,039 --> 00:24:33,279
so what we get is an engine promise and

00:24:30,720 --> 00:24:34,080
then later in our constructor we can use

00:24:33,279 --> 00:24:36,960
that promise

00:24:34,080 --> 00:24:38,400
in order to react on some some stuff

00:24:36,960 --> 00:24:41,840
depending on what the

00:24:38,400 --> 00:24:42,400
what the promise does there's another

00:24:41,840 --> 00:24:44,320
thing called

00:24:42,400 --> 00:24:46,720
inject lazy and inject lazy basically

00:24:44,320 --> 00:24:49,520
gives you the factory function

00:24:46,720 --> 00:24:50,720
that the ejector itself uses in order to

00:24:49,520 --> 00:24:53,520
create

00:24:50,720 --> 00:24:55,200
um a dependency so in this case you can

00:24:53,520 --> 00:24:57,279
create an engine only if you really need

00:24:55,200 --> 00:24:57,279
it

00:24:57,360 --> 00:25:03,039
and we also have optional dependencies

00:25:00,720 --> 00:25:04,559
so a decorator optional and this is uh

00:25:03,039 --> 00:25:05,760
by the way the first time you see

00:25:04,559 --> 00:25:08,960
more than one decorator and one

00:25:05,760 --> 00:25:10,320
parameter and um so what happens here is

00:25:08,960 --> 00:25:11,919
we're injecting an engine which is

00:25:10,320 --> 00:25:14,000
optional and if there is no engine in

00:25:11,919 --> 00:25:16,240
the system then it will return now

00:25:14,000 --> 00:25:17,440
it can be uh very helpful if you have

00:25:16,240 --> 00:25:19,919
something like

00:25:17,440 --> 00:25:21,919
um that your let's say your your your

00:25:19,919 --> 00:25:22,720
class expect something like jquery or

00:25:21,919 --> 00:25:24,480
something

00:25:22,720 --> 00:25:26,559
and it's just optional then it allows

00:25:24,480 --> 00:25:29,919
you to um create a fallback

00:25:26,559 --> 00:25:31,600
or ask for a fallback so

00:25:29,919 --> 00:25:33,679
the following problems are not solved in

00:25:31,600 --> 00:25:35,919
this di system which are

00:25:33,679 --> 00:25:37,679
so we have asynchronous and synchronous

00:25:35,919 --> 00:25:40,640
uh strategies

00:25:37,679 --> 00:25:41,440
we have no namespace conflicts anymore

00:25:40,640 --> 00:25:43,840
through the

00:25:41,440 --> 00:25:45,520
because of the the binding instructions

00:25:43,840 --> 00:25:46,799
it can be used standalone whatever you

00:25:45,520 --> 00:25:49,600
see right here is a

00:25:46,799 --> 00:25:51,039
framework agnostic system right i

00:25:49,600 --> 00:25:51,679
actually saw people using that with

00:25:51,039 --> 00:25:54,640
react

00:25:51,679 --> 00:25:54,640
which i think is awesome

00:25:54,799 --> 00:25:58,320
but there's still one thing dependencies

00:25:56,559 --> 00:26:00,559
are served as singletons

00:25:58,320 --> 00:26:01,919
so it turns out that the new di system

00:26:00,559 --> 00:26:05,440
still returns

00:26:01,919 --> 00:26:07,200
singletons so how do we handle that

00:26:05,440 --> 00:26:09,440
there's a concept that is called

00:26:07,200 --> 00:26:12,320
transient dependencies

00:26:09,440 --> 00:26:12,799
and what that means is we can we can

00:26:12,320 --> 00:26:15,200
create

00:26:12,799 --> 00:26:17,200
child injectors in our application in

00:26:15,200 --> 00:26:18,960
order to override some bindings

00:26:17,200 --> 00:26:21,760
or in order to get different uh

00:26:18,960 --> 00:26:24,480
instances of a specific class

00:26:21,760 --> 00:26:25,679
so what does it look like here we have

00:26:24,480 --> 00:26:28,159
the same code

00:26:25,679 --> 00:26:29,440
we create an injector with a binding

00:26:28,159 --> 00:26:32,000
engine which is

00:26:29,440 --> 00:26:32,559
as we know a bind engine two class

00:26:32,000 --> 00:26:34,559
engine

00:26:32,559 --> 00:26:35,600
and we create a child injector that gets

00:26:34,559 --> 00:26:38,720
the same

00:26:35,600 --> 00:26:39,760
binding but if we ask both both

00:26:38,720 --> 00:26:42,880
injectors for that

00:26:39,760 --> 00:26:46,000
um type we get different instances

00:26:42,880 --> 00:26:49,120
right so this is one thing

00:26:46,000 --> 00:26:49,120
the other thing is that

00:26:49,919 --> 00:26:54,000
if we like when we create a child

00:26:51,760 --> 00:26:54,400
injector and we have a parent injector

00:26:54,000 --> 00:26:57,360
that

00:26:54,400 --> 00:26:59,360
uh has more than just an engine binding

00:26:57,360 --> 00:27:01,200
and we ask the child injector for a

00:26:59,360 --> 00:27:01,600
binding that is actually not configured

00:27:01,200 --> 00:27:04,000
in the

00:27:01,600 --> 00:27:06,400
child injector then those bindings are

00:27:04,000 --> 00:27:08,000
locked up in the in the parent injector

00:27:06,400 --> 00:27:10,320
it sounds super confusing that's why i

00:27:08,000 --> 00:27:12,400
have this awesome

00:27:10,320 --> 00:27:13,679
graphic here that i by the way stole

00:27:12,400 --> 00:27:16,159
from from merrick

00:27:13,679 --> 00:27:17,120
so we create a parent injector with

00:27:16,159 --> 00:27:19,200
three bindings

00:27:17,120 --> 00:27:20,799
with four bindings car engine and tires

00:27:19,200 --> 00:27:23,039
and doors

00:27:20,799 --> 00:27:24,320
and we create a child injector with car

00:27:23,039 --> 00:27:26,000
and engine

00:27:24,320 --> 00:27:27,600
and we create another child injector

00:27:26,000 --> 00:27:30,399
with just car

00:27:27,600 --> 00:27:32,000
so what happens if we now ask the second

00:27:30,399 --> 00:27:35,679
child injector

00:27:32,000 --> 00:27:38,399
for a service car what we get is

00:27:35,679 --> 00:27:39,039
the car object created by the child

00:27:38,399 --> 00:27:42,080
child

00:27:39,039 --> 00:27:43,840
injector but there's no engine binding

00:27:42,080 --> 00:27:45,200
configured in that child injector so it

00:27:43,840 --> 00:27:46,640
looks it up in the parent injector and

00:27:45,200 --> 00:27:47,919
so on and so forth so it's a kind of

00:27:46,640 --> 00:27:50,399
prototypical inheritance what's

00:27:47,919 --> 00:27:50,399
happening here

00:27:51,679 --> 00:27:57,039
you're not impressed so

00:27:55,360 --> 00:27:58,480
when i saw that the first time i was

00:27:57,039 --> 00:28:00,960
like like wow that's

00:27:58,480 --> 00:28:02,159
awesome and super flexible and

00:28:00,960 --> 00:28:04,320
everything

00:28:02,159 --> 00:28:05,760
but yeah so how is it used in angular 2

00:28:04,320 --> 00:28:07,840
then

00:28:05,760 --> 00:28:09,120
so i don't know if you've seen any

00:28:07,840 --> 00:28:10,720
angular 2 code yet

00:28:09,120 --> 00:28:12,880
you probably did this is what a

00:28:10,720 --> 00:28:16,000
component angular 2 looks like

00:28:12,880 --> 00:28:17,120
so we have a class in this case just has

00:28:16,000 --> 00:28:18,480
a constructor that sets the name

00:28:17,120 --> 00:28:19,279
property and nothing nothing special

00:28:18,480 --> 00:28:21,919
here

00:28:19,279 --> 00:28:23,919
and then we have two more decorators

00:28:21,919 --> 00:28:27,200
also known as annotations

00:28:23,919 --> 00:28:28,880
um and the component decorator basically

00:28:27,200 --> 00:28:30,559
tells angular hey this particular class

00:28:28,880 --> 00:28:32,799
is a component

00:28:30,559 --> 00:28:33,600
and the view annotation tells angular

00:28:32,799 --> 00:28:35,919
this

00:28:33,600 --> 00:28:37,440
view configuration is the view for this

00:28:35,919 --> 00:28:38,799
component

00:28:37,440 --> 00:28:39,919
nothing super special about it and then

00:28:38,799 --> 00:28:41,279
we just need to bootstrap that

00:28:39,919 --> 00:28:42,799
application bootstrap is a function that

00:28:41,279 --> 00:28:43,760
we also need to import from the angular

00:28:42,799 --> 00:28:45,600
source code

00:28:43,760 --> 00:28:47,600
from from the framework so this is how

00:28:45,600 --> 00:28:48,799
you create your first angular 2

00:28:47,600 --> 00:28:51,039
application

00:28:48,799 --> 00:28:52,480
super simple so what happens if we want

00:28:51,039 --> 00:28:55,279
to inject a service

00:28:52,480 --> 00:28:56,399
so we create a service name service it

00:28:55,279 --> 00:28:58,000
does nothing special

00:28:56,399 --> 00:29:00,000
it sets the name property and it has a

00:28:58,000 --> 00:29:02,240
method to get the name

00:29:00,000 --> 00:29:03,520
and what we do then is we pass that

00:29:02,240 --> 00:29:05,360
service

00:29:03,520 --> 00:29:07,520
to that bootstrap function and this is

00:29:05,360 --> 00:29:09,440
basically the resolve and create part

00:29:07,520 --> 00:29:11,200
right so you pass on a binding what

00:29:09,440 --> 00:29:12,880
you're allowed to do is you can also use

00:29:11,200 --> 00:29:14,960
the bind syntax here

00:29:12,880 --> 00:29:16,399
so it's again just the shorthand syntax

00:29:14,960 --> 00:29:19,360
in order to make the name service

00:29:16,399 --> 00:29:21,600
available across your entire application

00:29:19,360 --> 00:29:22,640
and then in your component what you need

00:29:21,600 --> 00:29:25,760
to do is

00:29:22,640 --> 00:29:27,360
you just inject that name service

00:29:25,760 --> 00:29:29,279
of the type name service and get an

00:29:27,360 --> 00:29:31,440
instance of that

00:29:29,279 --> 00:29:33,120
if you're into typescript you can just

00:29:31,440 --> 00:29:36,159
use typescript like that

00:29:33,120 --> 00:29:38,880
so you add type annotations

00:29:36,159 --> 00:29:40,399
and it works the same way what is

00:29:38,880 --> 00:29:45,039
interesting here is you don't have

00:29:40,399 --> 00:29:47,600
any decorator machinery here anymore

00:29:45,039 --> 00:29:48,080
right so this is just plain typescript

00:29:47,600 --> 00:29:51,200
code

00:29:48,080 --> 00:29:51,200
and it works out of the box

00:29:52,240 --> 00:29:55,600
there's another thing um you might want

00:29:54,720 --> 00:29:58,880
to

00:29:55,600 --> 00:30:00,399
use child injectors in order to uh

00:29:58,880 --> 00:30:02,799
create a different binding for a name

00:30:00,399 --> 00:30:03,679
service in a particular component and

00:30:02,799 --> 00:30:05,520
this is where the

00:30:03,679 --> 00:30:06,799
injectables property of the component

00:30:05,520 --> 00:30:08,640
comes in

00:30:06,799 --> 00:30:10,399
so if you've seen that what it basically

00:30:08,640 --> 00:30:12,559
does is it

00:30:10,399 --> 00:30:14,000
uh just configures new bindings for that

00:30:12,559 --> 00:30:14,480
particular component it's basically a

00:30:14,000 --> 00:30:18,000
child

00:30:14,480 --> 00:30:21,440
injector that is created at that point

00:30:18,000 --> 00:30:24,240
okay so so we learned that the

00:30:21,440 --> 00:30:26,080
di system the new di system in angular 2

00:30:24,240 --> 00:30:29,600
solves all the problem of

00:30:26,080 --> 00:30:32,000
angular 1. and it's super flexible

00:30:29,600 --> 00:30:33,520
it is synchronous and asynchronous and

00:30:32,000 --> 00:30:35,919
you can use it with your code because

00:30:33,520 --> 00:30:36,559
it's framework agnostic which is awesome

00:30:35,919 --> 00:30:38,570
and

00:30:36,559 --> 00:30:48,359
that's all i have thank you very much

00:30:38,570 --> 00:30:48,359
[Applause]

00:30:49,679 --> 00:30:53,039
well there are a lot of questions so

00:30:51,600 --> 00:30:54,799
we're going to be sitting here for a

00:30:53,039 --> 00:30:57,440
while i know coffee for you

00:30:54,799 --> 00:30:58,559
uh-oh uh-oh please please ask questions

00:30:57,440 --> 00:31:01,360
that i can actually answer

00:30:58,559 --> 00:31:01,919
thank you there are only hard questions

00:31:01,360 --> 00:31:03,840
i don't know

00:31:01,919 --> 00:31:05,760
how we are going to manage okay so the

00:31:03,840 --> 00:31:07,600
first one is can you explain the

00:31:05,760 --> 00:31:08,559
difference between the dependency

00:31:07,600 --> 00:31:11,840
injection pattern

00:31:08,559 --> 00:31:13,360
and the factory pattern the dependency

00:31:11,840 --> 00:31:14,830
injection pattern and the factory

00:31:13,360 --> 00:31:16,480
pattern

00:31:14,830 --> 00:31:19,200
[Music]

00:31:16,480 --> 00:31:20,159
in angular 1 or is it the question from

00:31:19,200 --> 00:31:22,080
twitter

00:31:20,159 --> 00:31:24,880
yes okay then it's probably a bit hard

00:31:22,080 --> 00:31:24,880
to ask so

00:31:25,360 --> 00:31:29,519
the factory pattern as a design pattern

00:31:27,200 --> 00:31:33,039
itself it's it's just a pattern that

00:31:29,519 --> 00:31:34,880
creates an instance of an object

00:31:33,039 --> 00:31:36,640
but it has nothing to do with with

00:31:34,880 --> 00:31:37,440
dependency injection per se it's just a

00:31:36,640 --> 00:31:40,320
way of

00:31:37,440 --> 00:31:41,760
creating objects so what you can do is

00:31:40,320 --> 00:31:44,880
instead of

00:31:41,760 --> 00:31:45,600
doing something like var car equals new

00:31:44,880 --> 00:31:47,760
car

00:31:45,600 --> 00:31:49,279
so you're asking the you're calling the

00:31:47,760 --> 00:31:50,960
constructor directly what you can do is

00:31:49,279 --> 00:31:54,399
you can have a car factory

00:31:50,960 --> 00:31:56,159
that gives you a car um so you basically

00:31:54,399 --> 00:31:56,799
abstract the concrete implementation

00:31:56,159 --> 00:31:58,240
away

00:31:56,799 --> 00:32:00,000
which is good but it has nothing to do

00:31:58,240 --> 00:32:04,000
with dependency injections so it's

00:32:00,000 --> 00:32:06,960
not really a versus our question i guess

00:32:04,000 --> 00:32:08,320
so the next one is pretty great if you

00:32:06,960 --> 00:32:10,720
should convince people about

00:32:08,320 --> 00:32:15,120
static typing in javascript what would

00:32:10,720 --> 00:32:18,640
you say

00:32:15,120 --> 00:32:18,640
you can do it in dramatic voice

00:32:19,279 --> 00:32:25,600
so i like typescript that's my answer

00:32:22,320 --> 00:32:28,159
fair enough i think that's acceptable um

00:32:25,600 --> 00:32:30,159
can you explain the benefits of the da

00:32:28,159 --> 00:32:33,200
framework over a more traditional

00:32:30,159 --> 00:32:36,320
amd loading approach okay

00:32:33,200 --> 00:32:38,000
so that's a good question um

00:32:36,320 --> 00:32:39,840
i think i think we need to distinguish

00:32:38,000 --> 00:32:42,960
here amd

00:32:39,840 --> 00:32:43,919
is a module system that allows you to to

00:32:42,960 --> 00:32:46,640
load modules

00:32:43,919 --> 00:32:49,039
in an es5 today right you can do it with

00:32:46,640 --> 00:32:50,320
with common js or system.js or amd or

00:32:49,039 --> 00:32:53,360
whatever you want to do

00:32:50,320 --> 00:32:54,240
um dependency injection is on a

00:32:53,360 --> 00:32:57,279
different layer

00:32:54,240 --> 00:32:59,600
it doesn't um solve the problem of

00:32:57,279 --> 00:33:00,559
loading modules right so what you've

00:32:59,600 --> 00:33:03,679
seen in the code was

00:33:00,559 --> 00:33:05,200
um we used es6 and es6 modules

00:33:03,679 --> 00:33:06,799
um but the dependency injection

00:33:05,200 --> 00:33:08,000
basically has nothing to do with it so

00:33:06,799 --> 00:33:12,399
there are two different things

00:33:08,000 --> 00:33:14,799
loading modules and dependency injection

00:33:12,399 --> 00:33:15,519
okay two more which are kind of

00:33:14,799 --> 00:33:18,080
connected

00:33:15,519 --> 00:33:19,760
how async dependency injection works

00:33:18,080 --> 00:33:22,399
after minification

00:33:19,760 --> 00:33:24,880
and will async dependencies allow

00:33:22,399 --> 00:33:27,760
generators as well

00:33:24,880 --> 00:33:29,919
that's a good question so the the

00:33:27,760 --> 00:33:33,200
minification

00:33:29,919 --> 00:33:35,840
actually is decoupled from whatever

00:33:33,200 --> 00:33:36,799
binding instruction you use so the nice

00:33:35,840 --> 00:33:38,080
thing that we have with the new

00:33:36,799 --> 00:33:41,600
dependency injection system

00:33:38,080 --> 00:33:42,720
is we we can use string tokens but we

00:33:41,600 --> 00:33:44,559
don't have to

00:33:42,720 --> 00:33:46,080
so if you just do something like bind

00:33:44,559 --> 00:33:48,000
car to class car

00:33:46,080 --> 00:33:49,840
there's no string and minification just

00:33:48,000 --> 00:33:52,640
works right and you cannot

00:33:49,840 --> 00:33:53,519
minify strings so that's actually better

00:33:52,640 --> 00:33:56,880
um

00:33:53,519 --> 00:33:59,360
i'm actually not sure how the generator

00:33:56,880 --> 00:34:00,000
support will be in the asynchronous

00:33:59,360 --> 00:34:01,840
device

00:34:00,000 --> 00:34:03,360
there are just so many questions i think

00:34:01,840 --> 00:34:04,320
we're going to sit here forever

00:34:03,360 --> 00:34:05,919
seriously

00:34:04,320 --> 00:34:07,760
well we have a couple more minutes so

00:34:05,919 --> 00:34:10,399
might as well um

00:34:07,760 --> 00:34:13,040
can we inject objects into functions

00:34:10,399 --> 00:34:16,079
instead of class constructors

00:34:13,040 --> 00:34:17,520
oh good question um again a class is

00:34:16,079 --> 00:34:19,919
just a function

00:34:17,520 --> 00:34:20,720
so if you transpile a class in es6 to

00:34:19,919 --> 00:34:22,159
es5

00:34:20,720 --> 00:34:23,919
it will be just a constructor function

00:34:22,159 --> 00:34:26,079
so the answer is yes in the end you can

00:34:23,919 --> 00:34:28,159
use that system in es5

00:34:26,079 --> 00:34:29,280
and just write functions it's the same

00:34:28,159 --> 00:34:32,320
the same stuff it's

00:34:29,280 --> 00:34:34,320
just that um that one slide where we saw

00:34:32,320 --> 00:34:35,679
what the decorator does to that class

00:34:34,320 --> 00:34:38,320
when we transpile it

00:34:35,679 --> 00:34:39,839
so the answer is yes for the rest of the

00:34:38,320 --> 00:34:41,839
conference we're just going to have this

00:34:39,839 --> 00:34:43,440
interview basically just bring food okay

00:34:41,839 --> 00:34:46,480
and coffee thank you

00:34:43,440 --> 00:34:48,399
um okay two more because i guess they

00:34:46,480 --> 00:34:51,760
will be quick is there a way to destroy

00:34:48,399 --> 00:34:53,040
cleanup injectors to what sorry is there

00:34:51,760 --> 00:34:56,960
a way to destroy

00:34:53,040 --> 00:35:00,000
slash cleanup injectors ah okay um

00:34:56,960 --> 00:35:02,560
no i mean it's just an object so

00:35:00,000 --> 00:35:03,920
same would apply to the injector as to

00:35:02,560 --> 00:35:07,280
every object in javascript

00:35:03,920 --> 00:35:09,920
okay last question um how can we handle

00:35:07,280 --> 00:35:12,400
code modification do we have

00:35:09,920 --> 00:35:13,280
do we have an inject variable in angular

00:35:12,400 --> 00:35:14,960
2 as well

00:35:13,280 --> 00:35:16,240
right so i think that question i already

00:35:14,960 --> 00:35:16,960
answered with the other answers that's

00:35:16,240 --> 00:35:19,119
what i thought

00:35:16,960 --> 00:35:20,320
right so sure minification just works

00:35:19,119 --> 00:35:22,079
it's just code um

00:35:20,320 --> 00:35:23,760
if you don't use strings then it's even

00:35:22,079 --> 00:35:25,200
better and you can use that do that with

00:35:23,760 --> 00:35:28,240
the new dependency injection system

00:35:25,200 --> 00:35:29,040
so yeah okay maybe one question for the

00:35:28,240 --> 00:35:31,839
audience

00:35:29,040 --> 00:35:32,640
if there is one or everyone was using

00:35:31,839 --> 00:35:35,520
twitter

00:35:32,640 --> 00:35:36,079
i i have a question actually to yourself

00:35:35,520 --> 00:35:39,280
okay

00:35:36,079 --> 00:35:40,800
no to you guys um are you actually

00:35:39,280 --> 00:35:42,160
excited about that stuff i was super

00:35:40,800 --> 00:35:44,480
excited when i learned about it but you

00:35:42,160 --> 00:35:44,480
were like

00:35:45,650 --> 00:35:53,119
[Applause]

00:35:50,079 --> 00:35:56,480
hello in the returning about

00:35:53,119 --> 00:35:59,599
where ah over there here hi there here

00:35:56,480 --> 00:36:02,240
in return in about asynchronous md

00:35:59,599 --> 00:36:03,040
common gs they are solved the same

00:36:02,240 --> 00:36:06,240
problem as

00:36:03,040 --> 00:36:09,680
the dependency also and the

00:36:06,240 --> 00:36:11,040
models loading loading models why we

00:36:09,680 --> 00:36:13,599
should use something else

00:36:11,040 --> 00:36:15,280
if we have common gear that solves the

00:36:13,599 --> 00:36:17,839
same problem

00:36:15,280 --> 00:36:18,960
so i'm i think it's it's not really this

00:36:17,839 --> 00:36:20,480
exactly the same

00:36:18,960 --> 00:36:22,480
problem like when you use something like

00:36:20,480 --> 00:36:25,200
amd or common js it's

00:36:22,480 --> 00:36:27,440
still just a way to load a module or to

00:36:25,200 --> 00:36:28,880
load a dependency but you still at some

00:36:27,440 --> 00:36:30,960
point have a sort of

00:36:28,880 --> 00:36:32,000
main function that you need to maintain

00:36:30,960 --> 00:36:34,640
in order to

00:36:32,000 --> 00:36:36,000
create objects it of course it depends

00:36:34,640 --> 00:36:36,720
on your on your code and on your use

00:36:36,000 --> 00:36:40,480
case

00:36:36,720 --> 00:36:42,320
but um as i said so so you have module

00:36:40,480 --> 00:36:44,320
loading which is one thing

00:36:42,320 --> 00:36:45,520
and you have dependency injection which

00:36:44,320 --> 00:36:48,720
is which is really just

00:36:45,520 --> 00:36:49,839
a way of creating objects and then

00:36:48,720 --> 00:36:52,880
passing them

00:36:49,839 --> 00:36:54,320
into constructors which you maybe want

00:36:52,880 --> 00:36:54,720
to abstract away what you can do with

00:36:54,320 --> 00:36:57,680
that

00:36:54,720 --> 00:37:00,400
system so i i think those are two

00:36:57,680 --> 00:37:03,839
different things

00:37:00,400 --> 00:37:06,240
that's my opinion at least okay

00:37:03,839 --> 00:37:07,359
okay since we could actually sit here

00:37:06,240 --> 00:37:09,839
forever from

00:37:07,359 --> 00:37:11,200
what i'm saying like hand wise and

00:37:09,839 --> 00:37:13,599
twitter wise

00:37:11,200 --> 00:37:14,240
and i think everyone wants coffee and

00:37:13,599 --> 00:37:16,640
also

00:37:14,240 --> 00:37:17,599
we have another talk up coming after the

00:37:16,640 --> 00:37:19,680
break

00:37:17,599 --> 00:37:21,119
we're going to break it off but worry

00:37:19,680 --> 00:37:22,640
not pascal's still here

00:37:21,119 --> 00:37:24,640
you can catch him and ask all the

00:37:22,640 --> 00:37:27,920
questions he might

00:37:24,640 --> 00:37:29,200
get or not get annoying i also have

00:37:27,920 --> 00:37:31,200
stickers by the way

00:37:29,200 --> 00:37:33,119
yeah interesting stickers uh so if you

00:37:31,200 --> 00:37:35,119
have any more questions for rascal

00:37:33,119 --> 00:37:36,960
as i'm sure you do just catch them

00:37:35,119 --> 00:37:40,000
during the break or during lunch but

00:37:36,960 --> 00:37:41,200
let the guy eat first please thank you

00:37:40,000 --> 00:37:51,839
so much that was amazing

00:37:41,200 --> 00:37:51,839
thank you very much

00:37:54,000 --> 00:37:56,079

YouTube URL: https://www.youtube.com/watch?v=0kTq77ViAek


