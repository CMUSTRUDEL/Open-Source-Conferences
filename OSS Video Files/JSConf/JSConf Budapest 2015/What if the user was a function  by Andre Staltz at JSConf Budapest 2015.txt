Title: What if the user was a function  by Andre Staltz at JSConf Budapest 2015
Publication date: 2020-09-21
Playlist: JSConf Budapest 2015
Description: 
	Slides: https://speakerdeck.com/staltz/what-if-the-user-was-a-function

http://2015.jsconfbp.com/#andrestaltz

Exploring MV*, user interfaces, unidirectional dataflow, reactive and functional programming
Captions: 
	00:00:12,160 --> 00:00:16,480
right

00:00:13,519 --> 00:00:17,520
have you seen this diagram before this

00:00:16,480 --> 00:00:19,359
particular diagram

00:00:17,520 --> 00:00:20,880
does anyone know what the name of this

00:00:19,359 --> 00:00:22,880
is

00:00:20,880 --> 00:00:24,800
yeah um so it's supposed to make user

00:00:22,880 --> 00:00:26,160
interfaces very easy right instead of

00:00:24,800 --> 00:00:28,400
model view controller

00:00:26,160 --> 00:00:30,160
you have actions and dispatcher and

00:00:28,400 --> 00:00:32,399
action creators and and

00:00:30,160 --> 00:00:34,559
store and views and view controls and

00:00:32,399 --> 00:00:36,960
some other stuff

00:00:34,559 --> 00:00:38,399
right so what about this diagram do you

00:00:36,960 --> 00:00:39,920
recognize this

00:00:38,399 --> 00:00:42,320
it's supposed to make event driven

00:00:39,920 --> 00:00:45,920
programs somehow you know composable

00:00:42,320 --> 00:00:49,120
or observable and finally now you have

00:00:45,920 --> 00:00:51,360
propagation of change i mean what what

00:00:49,120 --> 00:00:55,120
does that mean

00:00:51,360 --> 00:00:57,600
and this thing here now that you know we

00:00:55,120 --> 00:00:58,000
have different patch and sort of virtual

00:00:57,600 --> 00:01:00,719
data

00:00:58,000 --> 00:01:01,359
structures finally uis are declarative

00:01:00,719 --> 00:01:05,519
right of

00:01:01,359 --> 00:01:09,119
obviously so virtual becomes declarative

00:01:05,519 --> 00:01:09,119
i mean why

00:01:09,520 --> 00:01:17,439
this is the state of javascript in 2015.

00:01:14,720 --> 00:01:17,840
like what happened here you know are we

00:01:17,439 --> 00:01:20,560
over

00:01:17,840 --> 00:01:23,840
engineering our apps or how we actually

00:01:20,560 --> 00:01:25,840
found a better way of building stuff

00:01:23,840 --> 00:01:27,759
and if it's better then why is there so

00:01:25,840 --> 00:01:30,799
much to learn i mean why is

00:01:27,759 --> 00:01:32,400
why why isn't better simpler and why

00:01:30,799 --> 00:01:35,439
isn't better sort of like

00:01:32,400 --> 00:01:35,439
more obvious for us

00:01:37,200 --> 00:01:41,759
that over there is a sunflower and the

00:01:39,280 --> 00:01:43,520
the center part of the sunflower

00:01:41,759 --> 00:01:45,360
has these seeds that form this beautiful

00:01:43,520 --> 00:01:46,960
pattern which is actually governed by

00:01:45,360 --> 00:01:49,640
the golden ratio so think about the

00:01:46,960 --> 00:01:51,439
golden ration for a while

00:01:49,640 --> 00:01:54,159
1.618033 etc

00:01:51,439 --> 00:01:54,799
sounds like an arbitrary sort of made-up

00:01:54,159 --> 00:01:56,560
number

00:01:54,799 --> 00:01:58,799
but actually occurs in nature and it

00:01:56,560 --> 00:02:00,240
creates these things like this

00:01:58,799 --> 00:02:01,920
so what if there would be something like

00:02:00,240 --> 00:02:04,479
this for javascript so

00:02:01,920 --> 00:02:05,360
a pattern which is natural it just

00:02:04,479 --> 00:02:08,239
happens to be

00:02:05,360 --> 00:02:09,119
there but it's still sort of beautiful

00:02:08,239 --> 00:02:12,160
and complex and

00:02:09,119 --> 00:02:12,160
you can't understand it

00:02:12,239 --> 00:02:16,400
so i've been studying how to apply

00:02:14,640 --> 00:02:17,680
reactive and functional programming for

00:02:16,400 --> 00:02:19,599
user interfaces

00:02:17,680 --> 00:02:21,280
and i stumbled upon this interesting

00:02:19,599 --> 00:02:24,160
architecture which i want to

00:02:21,280 --> 00:02:24,160
share with you today

00:02:25,200 --> 00:02:29,520
have you tried already virtual reality

00:02:27,200 --> 00:02:31,280
so first time i tried it there was this

00:02:29,520 --> 00:02:32,560
demo scene you just see the table and

00:02:31,280 --> 00:02:34,400
some objects

00:02:32,560 --> 00:02:36,720
on the table and the first thing you you

00:02:34,400 --> 00:02:39,840
feel is like i want to touch this and

00:02:36,720 --> 00:02:41,920
it's it's it's kind of so engaging as

00:02:39,840 --> 00:02:43,280
like your favorite single player

00:02:41,920 --> 00:02:46,080
campaign game where

00:02:43,280 --> 00:02:47,599
it's not a story it's not a movie it's

00:02:46,080 --> 00:02:48,560
real interaction you feel like you're

00:02:47,599 --> 00:02:50,160
there

00:02:48,560 --> 00:02:51,599
so why does this happen what is going on

00:02:50,160 --> 00:02:54,480
here

00:02:51,599 --> 00:02:56,560
so this is called user no sorry human

00:02:54,480 --> 00:02:59,440
computer interaction

00:02:56,560 --> 00:02:59,920
so like a conversation is both parties

00:02:59,440 --> 00:03:03,440
listen

00:02:59,920 --> 00:03:05,280
and speak so if we zoom into the

00:03:03,440 --> 00:03:07,920
computer what will we see well this the

00:03:05,280 --> 00:03:10,239
desktop tower or the processing unit

00:03:07,920 --> 00:03:12,080
and in between we have this thing called

00:03:10,239 --> 00:03:12,800
interface which is normally comprised of

00:03:12,080 --> 00:03:15,440
the

00:03:12,800 --> 00:03:16,959
screen and the mouse and the keyboard

00:03:15,440 --> 00:03:19,040
these kind of things

00:03:16,959 --> 00:03:21,360
now notice there's the cycle structure

00:03:19,040 --> 00:03:23,200
where information is inside the computer

00:03:21,360 --> 00:03:25,200
it goes onto the screen

00:03:23,200 --> 00:03:26,560
you see that with your eyes and you

00:03:25,200 --> 00:03:27,840
decide to do something with your hands

00:03:26,560 --> 00:03:29,280
on the mouse and keyboard

00:03:27,840 --> 00:03:31,280
that triggers another change to the

00:03:29,280 --> 00:03:34,319
computer and that generates another

00:03:31,280 --> 00:03:34,319
screen and it keeps on going

00:03:34,480 --> 00:03:38,080
so all user interfaces can be expressed

00:03:37,599 --> 00:03:40,720
as

00:03:38,080 --> 00:03:42,000
cycles this is our first insight when

00:03:40,720 --> 00:03:45,040
we're trying to find a

00:03:42,000 --> 00:03:47,360
interesting and natural architecture and

00:03:45,040 --> 00:03:50,480
actually i challenge you to find a

00:03:47,360 --> 00:03:52,959
ui that doesn't work on the low level as

00:03:50,480 --> 00:03:52,959
a cycle

00:03:53,599 --> 00:03:56,799
so in this system the interface devices

00:03:55,840 --> 00:03:59,840
are often called

00:03:56,799 --> 00:04:01,519
input device and output device

00:03:59,840 --> 00:04:03,120
right the graphics you know graphics

00:04:01,519 --> 00:04:04,080
output and that kind of stuff so

00:04:03,120 --> 00:04:06,959
whenever you have an

00:04:04,080 --> 00:04:10,239
input and an output what do you have in

00:04:06,959 --> 00:04:13,360
between what is the best candidate

00:04:10,239 --> 00:04:17,759
yeah a function right so x is

00:04:13,360 --> 00:04:20,560
your mouse and your screen is f of x

00:04:17,759 --> 00:04:21,840
so uis as functions so the computer's

00:04:20,560 --> 00:04:24,080
role should just be a function right

00:04:21,840 --> 00:04:26,960
whatever you put on the keyboard

00:04:24,080 --> 00:04:29,360
and the screen should be your output as

00:04:26,960 --> 00:04:31,280
a function

00:04:29,360 --> 00:04:33,520
so remember the terminal programs that

00:04:31,280 --> 00:04:35,120
sort of prompt for your input these were

00:04:33,520 --> 00:04:37,280
blocking uis

00:04:35,120 --> 00:04:39,520
so the computer will do nothing until

00:04:37,280 --> 00:04:42,080
you do something

00:04:39,520 --> 00:04:42,960
and modern uis are not like this anymore

00:04:42,080 --> 00:04:45,600
instead

00:04:42,960 --> 00:04:46,880
they are non-blocking so with this

00:04:45,600 --> 00:04:48,560
autocomplete field

00:04:46,880 --> 00:04:50,400
the computer is simultaneously

00:04:48,560 --> 00:04:53,120
processing while

00:04:50,400 --> 00:04:55,199
you are typing so there's no need to

00:04:53,120 --> 00:04:58,400
sort of wait until the user end that

00:04:55,199 --> 00:04:58,400
that just doesn't exist

00:04:58,639 --> 00:05:01,919
so if we would draw these events

00:05:00,240 --> 00:05:03,520
happening on timelines this is roughly

00:05:01,919 --> 00:05:06,080
what we would see

00:05:03,520 --> 00:05:08,320
the top tie line is what you input and

00:05:06,080 --> 00:05:11,440
it runs in parallel to the bottom

00:05:08,320 --> 00:05:12,400
timeline although the bottom timeline is

00:05:11,440 --> 00:05:15,919
a function

00:05:12,400 --> 00:05:18,160
of the top one there is no such idea as

00:05:15,919 --> 00:05:19,120
weight or you know waits until the other

00:05:18,160 --> 00:05:22,479
side stop

00:05:19,120 --> 00:05:25,360
it stops and this so happens to be the

00:05:22,479 --> 00:05:27,759
definition of asynchronous it's whenever

00:05:25,360 --> 00:05:29,520
one side is allowed to con continue its

00:05:27,759 --> 00:05:31,840
processing regardless of what the other

00:05:29,520 --> 00:05:33,840
side is doing

00:05:31,840 --> 00:05:34,880
so that's another one that uis are

00:05:33,840 --> 00:05:38,080
asynchronous

00:05:34,880 --> 00:05:40,639
by nature or should be we don't want

00:05:38,080 --> 00:05:42,000
blocking your eyes what else so the

00:05:40,639 --> 00:05:44,720
computer has all these

00:05:42,000 --> 00:05:45,600
kind of devices to make um its interface

00:05:44,720 --> 00:05:47,280
but what about

00:05:45,600 --> 00:05:49,199
you as the user don't you have your

00:05:47,280 --> 00:05:51,440
biological devices

00:05:49,199 --> 00:05:53,039
for instance your eyes and your hands

00:05:51,440 --> 00:05:55,360
right those are sort of your

00:05:53,039 --> 00:05:57,120
devices one of them is part of your

00:05:55,360 --> 00:05:58,080
senses and the other one is your

00:05:57,120 --> 00:06:01,840
instrument of

00:05:58,080 --> 00:06:04,400
expression now your devices are

00:06:01,840 --> 00:06:08,240
connected to the computer's devices

00:06:04,400 --> 00:06:10,720
right your your eyes are sort of

00:06:08,240 --> 00:06:12,400
looking to the screen so but isn't the

00:06:10,720 --> 00:06:15,680
computer um

00:06:12,400 --> 00:06:18,240
doesn't it have also senses for instance

00:06:15,680 --> 00:06:19,600
the mouse is how the computer senses the

00:06:18,240 --> 00:06:21,759
outside world and

00:06:19,600 --> 00:06:23,199
the computer's ears would be its

00:06:21,759 --> 00:06:25,520
microphone

00:06:23,199 --> 00:06:27,440
and also the computer screen is how the

00:06:25,520 --> 00:06:30,639
computer sort of expresses its own

00:06:27,440 --> 00:06:33,120
feelings or opinions right so there's a

00:06:30,639 --> 00:06:37,199
symmetry here where both sides have

00:06:33,120 --> 00:06:37,199
senses and both sides have expression

00:06:37,440 --> 00:06:41,520
and that's another insight the uis are

00:06:39,520 --> 00:06:43,840
symmetric with the user so the computer

00:06:41,520 --> 00:06:46,080
symmetric with the user

00:06:43,840 --> 00:06:48,319
and if they are symmetric then just as

00:06:46,080 --> 00:06:50,960
the computer has an input device and

00:06:48,319 --> 00:06:52,000
an output device so do you have an input

00:06:50,960 --> 00:06:55,199
device your eyes

00:06:52,000 --> 00:06:56,960
and an output device your hands

00:06:55,199 --> 00:06:59,919
whenever you have an input and an output

00:06:56,960 --> 00:07:03,680
what do you have in between

00:06:59,919 --> 00:07:04,479
a function so now your brain is a

00:07:03,680 --> 00:07:06,560
function

00:07:04,479 --> 00:07:08,560
now this is a bit philosophical because

00:07:06,560 --> 00:07:09,919
are you a referentially transparent

00:07:08,560 --> 00:07:12,479
function

00:07:09,919 --> 00:07:13,599
are you non-deterministic if you would

00:07:12,479 --> 00:07:15,120
see the same screen

00:07:13,599 --> 00:07:17,840
at the same time at the same place would

00:07:15,120 --> 00:07:19,680
you do the same thing

00:07:17,840 --> 00:07:20,880
now we don't really need to answer that

00:07:19,680 --> 00:07:21,440
question we don't need to worry about

00:07:20,880 --> 00:07:22,880
that

00:07:21,440 --> 00:07:25,039
why because you don't have a time

00:07:22,880 --> 00:07:26,720
machine you can't go back in the past

00:07:25,039 --> 00:07:28,720
we cannot go and check if you would

00:07:26,720 --> 00:07:31,840
actually do the same thing

00:07:28,720 --> 00:07:33,440
so we can just assume that yeah let's

00:07:31,840 --> 00:07:35,440
assume that you're going to do the same

00:07:33,440 --> 00:07:38,639
thing if we would go back in time

00:07:35,440 --> 00:07:41,680
so you are sort of deterministic

00:07:38,639 --> 00:07:44,639
and this is what you do as a function

00:07:41,680 --> 00:07:46,080
when you see jskoff put aside no jsc

00:07:44,639 --> 00:07:48,400
budapest aside yeah

00:07:46,080 --> 00:07:50,560
you emit some scroll events as your

00:07:48,400 --> 00:07:52,080
output and you

00:07:50,560 --> 00:07:54,160
see something interesting you click on

00:07:52,080 --> 00:07:54,960
it so the input is what you see from the

00:07:54,160 --> 00:07:56,840
computer

00:07:54,960 --> 00:07:58,879
and the output is what you do with your

00:07:56,840 --> 00:08:01,599
hands

00:07:58,879 --> 00:08:02,639
so let's try to explore the final

00:08:01,599 --> 00:08:05,759
insight that

00:08:02,639 --> 00:08:09,280
the user could be a function as well

00:08:05,759 --> 00:08:12,479
that's our we have now nice five

00:08:09,280 --> 00:08:14,479
insights to build something but we have

00:08:12,479 --> 00:08:15,599
sublime text open and all that was

00:08:14,479 --> 00:08:17,759
interesting and nice

00:08:15,599 --> 00:08:20,560
philosophy but how do we get coding some

00:08:17,759 --> 00:08:22,240
actual javascript

00:08:20,560 --> 00:08:23,759
so let's start with a relatively easy

00:08:22,240 --> 00:08:26,160
one probably the smartest people in this

00:08:23,759 --> 00:08:29,440
room can make a function that given

00:08:26,160 --> 00:08:32,959
a string of the url renders as an

00:08:29,440 --> 00:08:35,200
output the screen of the website

00:08:32,959 --> 00:08:37,039
but it's not a function from a string to

00:08:35,200 --> 00:08:37,680
a screen why because that would be a

00:08:37,039 --> 00:08:39,360
blocking

00:08:37,680 --> 00:08:41,440
function it would be you know we don't

00:08:39,360 --> 00:08:43,839
want to do that so it's a function from

00:08:41,440 --> 00:08:44,560
that weird arrow to this weird arrow so

00:08:43,839 --> 00:08:47,040
what are these

00:08:44,560 --> 00:08:48,080
arrow thingies well to me they kind of

00:08:47,040 --> 00:08:51,200
look like

00:08:48,080 --> 00:08:54,240
fruit skewers or you know

00:08:51,200 --> 00:08:55,279
well yeah sorry so how could we express

00:08:54,240 --> 00:08:57,360
these

00:08:55,279 --> 00:08:58,720
food sticks in javascript well we have

00:08:57,360 --> 00:09:01,600
the first cucumber

00:08:58,720 --> 00:09:03,040
first tomato second cucumber etc these

00:09:01,600 --> 00:09:04,720
are sequences so

00:09:03,040 --> 00:09:06,640
we could probably use an array right

00:09:04,720 --> 00:09:09,839
that's what javascript gives us

00:09:06,640 --> 00:09:12,160
for basic sequences and

00:09:09,839 --> 00:09:13,120
arrays in javascript has have these

00:09:12,160 --> 00:09:16,320
functions sort of

00:09:13,120 --> 00:09:17,680
map so here we are multiplying each item

00:09:16,320 --> 00:09:19,839
by 10.

00:09:17,680 --> 00:09:20,800
and we also have filter as a function

00:09:19,839 --> 00:09:22,880
over arrays

00:09:20,800 --> 00:09:24,880
which is kind of like removing an item

00:09:22,880 --> 00:09:27,120
except we are creating a new

00:09:24,880 --> 00:09:28,800
array instead of changing the previous

00:09:27,120 --> 00:09:30,480
one

00:09:28,800 --> 00:09:32,399
so it does look like our fruit skewers

00:09:30,480 --> 00:09:36,000
could have this map function right i

00:09:32,399 --> 00:09:38,240
don't see a big challenge in doing this

00:09:36,000 --> 00:09:40,640
and they could easily also have a filter

00:09:38,240 --> 00:09:40,640
function

00:09:40,720 --> 00:09:46,240
but there is a big problem why uh

00:09:43,839 --> 00:09:48,560
these things cannot be erased is because

00:09:46,240 --> 00:09:51,680
of this arrow meaning time

00:09:48,560 --> 00:09:54,160
right and these dots are just things

00:09:51,680 --> 00:09:55,839
happening which is the definition of an

00:09:54,160 --> 00:09:58,959
event

00:09:55,839 --> 00:10:01,519
so our fruit sticks are kind of you know

00:09:58,959 --> 00:10:02,959
event streams that's what they are

00:10:01,519 --> 00:10:06,560
what's the difference with array

00:10:02,959 --> 00:10:08,240
well an array is a sequence in space and

00:10:06,560 --> 00:10:10,320
an event stream is basically a sequence

00:10:08,240 --> 00:10:11,920
in time

00:10:10,320 --> 00:10:13,519
and for sequences in time you can do

00:10:11,920 --> 00:10:16,160
fancier things that arrays

00:10:13,519 --> 00:10:18,959
cannot do for instance you can delay

00:10:16,160 --> 00:10:21,519
each item by one second

00:10:18,959 --> 00:10:23,360
and also event streams can be infinite

00:10:21,519 --> 00:10:25,200
so there will always be the next hour

00:10:23,360 --> 00:10:26,560
from now even if this planet stops

00:10:25,200 --> 00:10:30,560
existing

00:10:26,560 --> 00:10:32,000
while arrays have to be finite

00:10:30,560 --> 00:10:33,600
and not just delay but you have many

00:10:32,000 --> 00:10:35,279
other functions like merge and window

00:10:33,600 --> 00:10:37,360
and combine latest and with latest from

00:10:35,279 --> 00:10:40,480
and flatmap

00:10:37,360 --> 00:10:42,480
so now we know that the computer

00:10:40,480 --> 00:10:44,399
is not a function from a string to a

00:10:42,480 --> 00:10:45,680
screen it's a function from an event

00:10:44,399 --> 00:10:49,040
stream of string

00:10:45,680 --> 00:10:50,800
to an event stream of screen

00:10:49,040 --> 00:10:52,640
and we could name the top one as

00:10:50,800 --> 00:10:53,360
interaction events is whatever you do as

00:10:52,640 --> 00:10:54,880
a user

00:10:53,360 --> 00:10:57,680
and the bottom one is screen events is

00:10:54,880 --> 00:10:59,440
whatever the computer generates

00:10:57,680 --> 00:11:00,959
so if we would write in javascript

00:10:59,440 --> 00:11:01,839
actually typescript here just to show

00:11:00,959 --> 00:11:03,920
the types

00:11:01,839 --> 00:11:05,920
this is roughly how we would get started

00:11:03,920 --> 00:11:09,200
and we just need to fill in

00:11:05,920 --> 00:11:11,120
what happens inside that function so

00:11:09,200 --> 00:11:12,720
all event streams have this listen

00:11:11,120 --> 00:11:14,399
method which is really what you expect

00:11:12,720 --> 00:11:15,760
it to be it's kind of like add event

00:11:14,399 --> 00:11:18,959
listener for clicks so

00:11:15,760 --> 00:11:18,959
no mystery on this part

00:11:19,200 --> 00:11:22,800
now the user function will do the

00:11:21,279 --> 00:11:25,120
opposite right as we saw

00:11:22,800 --> 00:11:26,240
it will take the screen events as input

00:11:25,120 --> 00:11:29,440
and it will generate

00:11:26,240 --> 00:11:32,560
interaction events as output

00:11:29,440 --> 00:11:33,360
but how can you write this in javascript

00:11:32,560 --> 00:11:36,560
right we need your

00:11:33,360 --> 00:11:38,560
we would need your brain for that so no

00:11:36,560 --> 00:11:40,959
can do

00:11:38,560 --> 00:11:42,000
so we can actually decompose the user

00:11:40,959 --> 00:11:44,720
function into

00:11:42,000 --> 00:11:45,839
smaller functions first this screen

00:11:44,720 --> 00:11:48,480
event is rendered

00:11:45,839 --> 00:11:49,040
is put to the dom and the dom with the

00:11:48,480 --> 00:11:51,360
browser

00:11:49,040 --> 00:11:53,200
shows that on the physical screen that

00:11:51,360 --> 00:11:55,279
goes to your eyes and then

00:11:53,200 --> 00:11:56,880
your eyes and the signal to your brain

00:11:55,279 --> 00:11:57,839
and your brain takes some time deciding

00:11:56,880 --> 00:11:59,200
what to do

00:11:57,839 --> 00:12:01,279
and then finally you decide okay i'm

00:11:59,200 --> 00:12:03,600
going to click that and that

00:12:01,279 --> 00:12:05,040
triggers an event on the dawn event

00:12:03,600 --> 00:12:06,320
dispatcher

00:12:05,040 --> 00:12:08,959
so we only need to care about the

00:12:06,320 --> 00:12:12,320
beginning and the end which is the dom

00:12:08,959 --> 00:12:16,800
right the dom will be the ambassador

00:12:12,320 --> 00:12:19,440
for our user or the proxy for our user

00:12:16,800 --> 00:12:21,760
and the other functions are just living

00:12:19,440 --> 00:12:23,680
in another world in javascript so

00:12:21,760 --> 00:12:25,920
they're still part of our user function

00:12:23,680 --> 00:12:27,600
but we don't have direct access to them

00:12:25,920 --> 00:12:29,680
it's as if you know they were living on

00:12:27,600 --> 00:12:31,839
some remote server

00:12:29,680 --> 00:12:33,920
and we're using the dom as the client to

00:12:31,839 --> 00:12:35,519
access that

00:12:33,920 --> 00:12:38,160
so in javascript it would look like this

00:12:35,519 --> 00:12:41,279
we first start with

00:12:38,160 --> 00:12:42,480
this given screen event stream and we

00:12:41,279 --> 00:12:45,040
can listen to each

00:12:42,480 --> 00:12:47,040
screen event and render that to the dom

00:12:45,040 --> 00:12:50,320
somehow

00:12:47,040 --> 00:12:51,440
then we create an a plain empty event

00:12:50,320 --> 00:12:53,120
stream

00:12:51,440 --> 00:12:54,959
called interaction events which is what

00:12:53,120 --> 00:12:57,120
we will return at the bottom of the

00:12:54,959 --> 00:12:59,040
function

00:12:57,120 --> 00:13:00,959
so then we listen to all possible events

00:12:59,040 --> 00:13:02,880
happening on the dawn so this star

00:13:00,959 --> 00:13:04,639
there doesn't actually exist it's just

00:13:02,880 --> 00:13:06,000
to illustrate our idea

00:13:04,639 --> 00:13:07,760
and this probably is not performing

00:13:06,000 --> 00:13:09,839
either but just to show you that we can

00:13:07,760 --> 00:13:12,480
write this function

00:13:09,839 --> 00:13:14,639
and so we whatever we listen to anything

00:13:12,480 --> 00:13:18,160
we just

00:13:14,639 --> 00:13:20,000
forward that to interaction events

00:13:18,160 --> 00:13:22,000
so and we're done so the user function

00:13:20,000 --> 00:13:24,639
is written and we can also listen to

00:13:22,000 --> 00:13:26,480
what it what it outputs

00:13:24,639 --> 00:13:28,000
now if you put both function

00:13:26,480 --> 00:13:31,680
applications together you

00:13:28,000 --> 00:13:33,760
get this and now we have kind of like a

00:13:31,680 --> 00:13:35,519
serious problem because

00:13:33,760 --> 00:13:37,760
well if you can't see the problem i'm

00:13:35,519 --> 00:13:38,959
going to rename these so it's easier to

00:13:37,760 --> 00:13:42,320
see

00:13:38,959 --> 00:13:44,720
can you see it now well

00:13:42,320 --> 00:13:47,120
if we replace a with f of b on the

00:13:44,720 --> 00:13:49,279
second line you get this

00:13:47,120 --> 00:13:52,639
and now you can see the problem because

00:13:49,279 --> 00:13:55,839
b is undefined on the right hand side

00:13:52,639 --> 00:13:57,440
so we just can't do this it's because

00:13:55,839 --> 00:13:59,839
this equals symbols

00:13:57,440 --> 00:14:01,279
means assignment right that's where a

00:13:59,839 --> 00:14:03,199
complication is coming from you can't

00:14:01,279 --> 00:14:05,760
assign from think that it doesn't ex

00:14:03,199 --> 00:14:07,120
you know yeah so we have other types of

00:14:05,760 --> 00:14:09,199
equals in javascript

00:14:07,120 --> 00:14:10,959
for instance double equals and triple

00:14:09,199 --> 00:14:13,279
equals

00:14:10,959 --> 00:14:15,120
so the equal symbols in mathematics

00:14:13,279 --> 00:14:16,000
means an equation so what if we just

00:14:15,120 --> 00:14:17,600
forget assignment

00:14:16,000 --> 00:14:19,360
and think of an equation to solve this

00:14:17,600 --> 00:14:22,480
this is actually a special type of

00:14:19,360 --> 00:14:24,720
equation because it's a fixed point

00:14:22,480 --> 00:14:25,680
that over there is the definition of a

00:14:24,720 --> 00:14:28,880
fixed point

00:14:25,680 --> 00:14:30,480
it's whenever x is f of x

00:14:28,880 --> 00:14:33,519
and it's pretty common in mathematics

00:14:30,480 --> 00:14:35,360
like the cosine has one

00:14:33,519 --> 00:14:36,720
so what if our problem would be actually

00:14:35,360 --> 00:14:39,120
to discover this

00:14:36,720 --> 00:14:40,160
the event stream that satisfies this

00:14:39,120 --> 00:14:43,199
equation

00:14:40,160 --> 00:14:45,600
so let's forget assignment and instead

00:14:43,199 --> 00:14:46,959
consider equality let's use mathematics

00:14:45,600 --> 00:14:48,560
as an inspiration

00:14:46,959 --> 00:14:51,120
so we're back into the dangerous

00:14:48,560 --> 00:14:54,240
unmathematical world of javascript and

00:14:51,120 --> 00:14:56,000
uh assignment will not help us here the

00:14:54,240 --> 00:14:57,360
complication actually is that well the

00:14:56,000 --> 00:14:59,040
second line doesn't have a problem at

00:14:57,360 --> 00:15:01,839
all but the first line has a problem

00:14:59,040 --> 00:15:02,240
because it needs to exist before we call

00:15:01,839 --> 00:15:05,040
this

00:15:02,240 --> 00:15:06,079
computer function so what if we just do

00:15:05,040 --> 00:15:08,240
that like

00:15:06,079 --> 00:15:10,399
with this line we declare interaction

00:15:08,240 --> 00:15:12,000
events as an empty event stream what is

00:15:10,399 --> 00:15:14,639
an empty event stream is just an empty

00:15:12,000 --> 00:15:16,639
fruit skewer with nothing on it quite

00:15:14,639 --> 00:15:18,639
uninteresting

00:15:16,639 --> 00:15:20,160
and then now that it's available we can

00:15:18,639 --> 00:15:20,959
call the computer function on it and we

00:15:20,160 --> 00:15:23,920
get this

00:15:20,959 --> 00:15:26,240
screen events as output naturally now

00:15:23,920 --> 00:15:29,279
the screen events is available we can

00:15:26,240 --> 00:15:32,720
apply the user function on it and we get

00:15:29,279 --> 00:15:35,040
interaction events 2 a second one

00:15:32,720 --> 00:15:36,800
so what have we just achieved with this

00:15:35,040 --> 00:15:38,160
piece of code

00:15:36,800 --> 00:15:39,920
well when we called the computer

00:15:38,160 --> 00:15:41,360
function on an empty event stream we got

00:15:39,920 --> 00:15:43,360
this

00:15:41,360 --> 00:15:45,279
screen events which by the way starts

00:15:43,360 --> 00:15:45,920
with this default screen why because

00:15:45,279 --> 00:15:47,279
well

00:15:45,920 --> 00:15:50,480
if you don't interact with the computer

00:15:47,279 --> 00:15:52,639
at least you see this login screen

00:15:50,480 --> 00:15:54,240
so and then now we apply the screen

00:15:52,639 --> 00:15:56,880
events on the user and we got this

00:15:54,240 --> 00:15:58,320
real interaction events coming from the

00:15:56,880 --> 00:16:01,920
real user

00:15:58,320 --> 00:16:03,839
but we have these two interaction events

00:16:01,920 --> 00:16:05,360
so we just need to sort of copy paste

00:16:03,839 --> 00:16:07,360
whatever happens on the bottom one back

00:16:05,360 --> 00:16:09,680
into the first one

00:16:07,360 --> 00:16:10,720
so with this whenever an event happens

00:16:09,680 --> 00:16:12,480
on the second

00:16:10,720 --> 00:16:14,880
it will be replicated back into the

00:16:12,480 --> 00:16:17,199
first and then we have sort of closed

00:16:14,880 --> 00:16:17,199
loop

00:16:17,680 --> 00:16:21,199
so in javascript this would be actually

00:16:19,360 --> 00:16:22,000
about listening to whatever happens on

00:16:21,199 --> 00:16:26,240
the second and

00:16:22,000 --> 00:16:28,079
just forwarding that to the first

00:16:26,240 --> 00:16:30,399
and we can also simplify this code by

00:16:28,079 --> 00:16:31,759
getting rid of intermediate variables so

00:16:30,399 --> 00:16:36,000
this is not a scary operation

00:16:31,759 --> 00:16:39,360
okay no magic and we can do that again

00:16:36,000 --> 00:16:41,120
with screen events and we get this

00:16:39,360 --> 00:16:42,639
so hopefully now you see something that

00:16:41,120 --> 00:16:45,279
looks like a fixed point

00:16:42,639 --> 00:16:47,120
right i mean you can compare b with

00:16:45,279 --> 00:16:47,680
interaction events and you can compare g

00:16:47,120 --> 00:16:52,240
of f

00:16:47,680 --> 00:16:52,240
with a computer

00:16:53,120 --> 00:16:56,880
and it's solved right it wasn't that

00:16:56,480 --> 00:16:59,839
hard

00:16:56,880 --> 00:17:01,279
after all but there's something that

00:16:59,839 --> 00:17:03,120
still annoys me with this computer

00:17:01,279 --> 00:17:06,400
function because in reality

00:17:03,120 --> 00:17:08,480
it would be a huge function so

00:17:06,400 --> 00:17:10,079
in a real javascript application this

00:17:08,480 --> 00:17:11,280
would be thousands of lines of code

00:17:10,079 --> 00:17:13,039
because it should do

00:17:11,280 --> 00:17:15,439
networking and rendering and

00:17:13,039 --> 00:17:18,720
calculations and whatnot so

00:17:15,439 --> 00:17:21,600
how can we improve on this

00:17:18,720 --> 00:17:22,160
so model view controller is older than i

00:17:21,600 --> 00:17:24,160
am

00:17:22,160 --> 00:17:25,360
so it's been around since the 70s and

00:17:24,160 --> 00:17:26,959
80s

00:17:25,360 --> 00:17:29,200
and this is the rough this is roughly

00:17:26,959 --> 00:17:31,440
the same diagram from the 80s i

00:17:29,200 --> 00:17:32,880
didn't really change this and there's

00:17:31,440 --> 00:17:34,799
two things i really like about this

00:17:32,880 --> 00:17:38,000
diagram and first of all

00:17:34,799 --> 00:17:39,679
is the user so with all these fancy

00:17:38,000 --> 00:17:40,640
architectures for user interfaces we

00:17:39,679 --> 00:17:42,400
kind of forgot

00:17:40,640 --> 00:17:44,720
where does the user plug in into our

00:17:42,400 --> 00:17:46,720
system right

00:17:44,720 --> 00:17:48,559
so i like it that that is here and we

00:17:46,720 --> 00:17:49,760
should probably do this more often

00:17:48,559 --> 00:17:51,919
the other thing that i like about this

00:17:49,760 --> 00:17:52,320
diagram is that it almost looks like

00:17:51,919 --> 00:17:55,280
that

00:17:52,320 --> 00:17:56,000
cycle cycle diagram that we saw some

00:17:55,280 --> 00:17:58,880
minutes ago

00:17:56,000 --> 00:18:00,799
right except there's one big difference

00:17:58,880 --> 00:18:02,400
is that there's no arrow from the mouse

00:18:00,799 --> 00:18:03,200
to the screen while there is an arrow

00:18:02,400 --> 00:18:06,240
from a

00:18:03,200 --> 00:18:09,840
controller to a view

00:18:06,240 --> 00:18:12,960
so mvc is not a perfect cycle and

00:18:09,840 --> 00:18:14,799
we just can't name this mvc but it does

00:18:12,960 --> 00:18:15,760
look like those could correspond to

00:18:14,799 --> 00:18:18,320
model

00:18:15,760 --> 00:18:20,000
view and user but then we don't know how

00:18:18,320 --> 00:18:21,120
to name the mouse because it's the

00:18:20,000 --> 00:18:24,400
complicated bit

00:18:21,120 --> 00:18:24,400
it cannot be named controller

00:18:24,640 --> 00:18:28,640
so do you know what was the original

00:18:26,320 --> 00:18:30,880
idea in mvc in small talk forgetting all

00:18:28,640 --> 00:18:32,960
these routes and back-ends and stuff

00:18:30,880 --> 00:18:35,520
it was actually in their words to bridge

00:18:32,960 --> 00:18:36,640
the gap between the digital information

00:18:35,520 --> 00:18:39,120
of the computer

00:18:36,640 --> 00:18:39,919
and the user's mental model that's what

00:18:39,120 --> 00:18:42,320
they said

00:18:39,919 --> 00:18:42,960
so the computer speaks bits zeros and

00:18:42,320 --> 00:18:45,039
ones

00:18:42,960 --> 00:18:46,240
and bytes and you speak english

00:18:45,039 --> 00:18:49,440
hungarian and

00:18:46,240 --> 00:18:49,760
cat pictures so that's what the view

00:18:49,440 --> 00:18:52,799
does

00:18:49,760 --> 00:18:56,320
right it translates from zeros and ones

00:18:52,799 --> 00:18:58,400
to english and cat pictures right

00:18:56,320 --> 00:18:59,679
if we're talking about two languages and

00:18:58,400 --> 00:19:02,720
the view just should

00:18:59,679 --> 00:19:04,480
just bridge that gap for you so why not

00:19:02,720 --> 00:19:07,039
the other direction should just be

00:19:04,480 --> 00:19:08,840
translating from cat pictures back into

00:19:07,039 --> 00:19:11,760
something that the computer appreciates

00:19:08,840 --> 00:19:13,679
right you're giving sort of

00:19:11,760 --> 00:19:14,799
you're making a request to change

00:19:13,679 --> 00:19:16,400
something in the computer and you're

00:19:14,799 --> 00:19:19,760
giving that in sort of human terms

00:19:16,400 --> 00:19:20,320
mouse and keyboard and whatnot so i call

00:19:19,760 --> 00:19:22,480
this thing

00:19:20,320 --> 00:19:23,360
intent but you can name it whatever else

00:19:22,480 --> 00:19:24,880
you want

00:19:23,360 --> 00:19:28,240
i just like this name because it means

00:19:24,880 --> 00:19:30,080
an in an interpretation of what the user

00:19:28,240 --> 00:19:33,679
is trying to achieve in the context of

00:19:30,080 --> 00:19:35,520
the digital information so it turns out

00:19:33,679 --> 00:19:37,919
this big massive computer function can

00:19:35,520 --> 00:19:41,200
be decomposed into smaller functions

00:19:37,919 --> 00:19:43,840
intent model and view where intent

00:19:41,200 --> 00:19:45,440
translates the user's interactions the

00:19:43,840 --> 00:19:48,000
model does the heavy lifting

00:19:45,440 --> 00:19:49,520
and the view translated back to cat

00:19:48,000 --> 00:19:51,280
pictures

00:19:49,520 --> 00:19:52,640
and if you're not satisfied with this

00:19:51,280 --> 00:19:54,080
with this decomposition

00:19:52,640 --> 00:19:55,679
you can split it into two functions or

00:19:54,080 --> 00:19:56,559
you can split it into six functions i

00:19:55,679 --> 00:19:59,360
don't care

00:19:56,559 --> 00:20:01,280
so these are just functions and as a

00:19:59,360 --> 00:20:02,720
good programmer you should know when to

00:20:01,280 --> 00:20:04,840
split a function whenever it gets too

00:20:02,720 --> 00:20:07,679
big

00:20:04,840 --> 00:20:09,840
right well this is roughly what my

00:20:07,679 --> 00:20:11,440
framework called cycle.js does you can

00:20:09,840 --> 00:20:13,679
find that in it in that

00:20:11,440 --> 00:20:15,200
address up there and the event stream

00:20:13,679 --> 00:20:17,120
that it uses

00:20:15,200 --> 00:20:19,760
come from this library called rxjs a

00:20:17,120 --> 00:20:21,520
reactive library

00:20:19,760 --> 00:20:22,880
now what cycle just does is basically

00:20:21,520 --> 00:20:24,640
solve some problems

00:20:22,880 --> 00:20:26,000
with this code what we wrote some

00:20:24,640 --> 00:20:27,760
minutes ago

00:20:26,000 --> 00:20:29,200
first of all this is boilerplate we

00:20:27,760 --> 00:20:32,080
don't want to write that

00:20:29,200 --> 00:20:33,919
in every app and this is mutation and

00:20:32,080 --> 00:20:35,919
it's also boilerplate we don't

00:20:33,919 --> 00:20:38,400
want to write that every time in our

00:20:35,919 --> 00:20:39,120
code and then we have two event streams

00:20:38,400 --> 00:20:41,360
to

00:20:39,120 --> 00:20:43,280
represent the same thing one of them is

00:20:41,360 --> 00:20:43,760
the proxy and the other one is the real

00:20:43,280 --> 00:20:46,000
when we

00:20:43,760 --> 00:20:46,799
attach them to each other so if all all

00:20:46,000 --> 00:20:49,280
of this mess

00:20:46,799 --> 00:20:50,000
you just want to care about this part

00:20:49,280 --> 00:20:52,400
right

00:20:50,000 --> 00:20:53,520
you want to specify as a programmer how

00:20:52,400 --> 00:20:56,720
does the computer work

00:20:53,520 --> 00:20:58,159
in this user interface so

00:20:56,720 --> 00:21:00,400
that's what cycle allows you to do is

00:20:58,159 --> 00:21:04,240
just specify one function

00:21:00,400 --> 00:21:06,400
and it does the rest of the loop for you

00:21:04,240 --> 00:21:07,840
and this is the api basically two

00:21:06,400 --> 00:21:09,679
functions actually

00:21:07,840 --> 00:21:11,919
for this presentation we just need apply

00:21:09,679 --> 00:21:12,559
to dom where we give there the computer

00:21:11,919 --> 00:21:15,280
function

00:21:12,559 --> 00:21:17,440
and we say where in in the dom will this

00:21:15,280 --> 00:21:19,200
live so the container there

00:21:17,440 --> 00:21:21,039
let's see wait how we can use this so

00:21:19,200 --> 00:21:22,000
imagine a hello basic hello world

00:21:21,039 --> 00:21:24,000
program where

00:21:22,000 --> 00:21:27,440
there's this one big input field where

00:21:24,000 --> 00:21:30,640
you insert the name and the

00:21:27,440 --> 00:21:32,559
header just greets the name let's try to

00:21:30,640 --> 00:21:35,679
encode this quickly

00:21:32,559 --> 00:21:37,760
so we can call apply to dom giving id

00:21:35,679 --> 00:21:39,120
app as a pointer to where on the dom

00:21:37,760 --> 00:21:42,840
should our app live

00:21:39,120 --> 00:21:44,080
and the computer function as the second

00:21:42,840 --> 00:21:47,120
parameter

00:21:44,080 --> 00:21:49,120
if you call interactions.get you it will

00:21:47,120 --> 00:21:52,400
return you an event stream so you give

00:21:49,120 --> 00:21:53,440
dot field as a selector and input as the

00:21:52,400 --> 00:21:56,080
vent type

00:21:53,440 --> 00:21:56,960
so this will this will return us the

00:21:56,080 --> 00:22:00,559
event stream of

00:21:56,960 --> 00:22:01,600
input events on the dot field element

00:22:00,559 --> 00:22:03,440
so we don't have that yet but you're

00:22:01,600 --> 00:22:05,360
going to see it soon and i call this

00:22:03,440 --> 00:22:07,280
change name dollar sign and dollar sign

00:22:05,360 --> 00:22:10,720
is just a convention to say that this is

00:22:07,280 --> 00:22:13,120
an event stream you don't really need it

00:22:10,720 --> 00:22:15,200
so name stream will represent the actual

00:22:13,120 --> 00:22:17,600
data that we will display

00:22:15,200 --> 00:22:19,760
so it needs to have an an initial value

00:22:17,600 --> 00:22:21,200
so we just choose empty string

00:22:19,760 --> 00:22:24,480
otherwise it just takes everything that

00:22:21,200 --> 00:22:26,400
comes from change name stream

00:22:24,480 --> 00:22:28,000
and then we convert name stream into

00:22:26,400 --> 00:22:30,400
screen stream

00:22:28,000 --> 00:22:32,720
by mapping every name to a div that

00:22:30,400 --> 00:22:35,600
displays this data

00:22:32,720 --> 00:22:37,600
so notice now that we have this uh input

00:22:35,600 --> 00:22:39,679
element with class name field

00:22:37,600 --> 00:22:43,600
and now it makes sense how this will

00:22:39,679 --> 00:22:43,600
work because with the first line there

00:22:44,240 --> 00:22:48,240
it's after all a cycle right and then we

00:22:47,200 --> 00:22:51,360
just return

00:22:48,240 --> 00:22:52,880
at the bottom screen stream we can also

00:22:51,360 --> 00:22:54,880
rearrange this code by

00:22:52,880 --> 00:22:56,080
doing something which is not magical

00:22:54,880 --> 00:22:58,960
don't be scared

00:22:56,080 --> 00:23:00,159
and we get this so just rearranging so

00:22:58,960 --> 00:23:03,200
literally what the key

00:23:00,159 --> 00:23:04,080
what the computer does is translate from

00:23:03,200 --> 00:23:06,480
keyboard

00:23:04,080 --> 00:23:08,000
to screen you can clearly see that in

00:23:06,480 --> 00:23:11,679
this function

00:23:08,000 --> 00:23:13,440
it gets interactions events

00:23:11,679 --> 00:23:15,679
from the keyboard and it generates the

00:23:13,440 --> 00:23:17,440
screen

00:23:15,679 --> 00:23:19,360
so remember that of course we can

00:23:17,440 --> 00:23:21,840
refactor this computer function to

00:23:19,360 --> 00:23:23,600
smaller functions composition of intent

00:23:21,840 --> 00:23:26,480
model and view so how would it look like

00:23:23,600 --> 00:23:29,039
if we would split it like this

00:23:26,480 --> 00:23:29,520
well first of all the intent would take

00:23:29,039 --> 00:23:31,360
care of

00:23:29,520 --> 00:23:33,919
interpreting whatever the user is trying

00:23:31,360 --> 00:23:35,440
to do and this function just wraps those

00:23:33,919 --> 00:23:37,919
two parts that we're doing so

00:23:35,440 --> 00:23:38,720
whenever we get an event of input on

00:23:37,919 --> 00:23:40,799
that field

00:23:38,720 --> 00:23:43,200
we just get what is the value inside

00:23:40,799 --> 00:23:46,720
that element

00:23:43,200 --> 00:23:48,640
and then the model takes care of

00:23:46,720 --> 00:23:50,080
of taking whatever happens on change

00:23:48,640 --> 00:23:52,080
name stream from the intent

00:23:50,080 --> 00:23:54,240
and just make sure that it starts with

00:23:52,080 --> 00:23:56,320
some initial data

00:23:54,240 --> 00:23:59,039
then the view converts the model's name

00:23:56,320 --> 00:24:00,880
stream into these divs

00:23:59,039 --> 00:24:05,760
and finally the computer is just a

00:24:00,880 --> 00:24:08,080
function composition of these three

00:24:05,760 --> 00:24:09,919
so you choose you can either do it like

00:24:08,080 --> 00:24:13,600
this or you can do it like that or like

00:24:09,919 --> 00:24:15,520
this it's up to you as the programmer

00:24:13,600 --> 00:24:17,200
so what have we just made here model

00:24:15,520 --> 00:24:19,360
view user and intent

00:24:17,200 --> 00:24:21,679
are functions and between each of them

00:24:19,360 --> 00:24:23,840
is an event stream

00:24:21,679 --> 00:24:25,919
so name stream is the output of the

00:24:23,840 --> 00:24:28,080
model and the input of the view

00:24:25,919 --> 00:24:29,279
and screen stream is the output of the

00:24:28,080 --> 00:24:33,039
view and the input and

00:24:29,279 --> 00:24:35,760
of the user and so forth and guess what

00:24:33,039 --> 00:24:37,760
you know this is unidirectional data

00:24:35,760 --> 00:24:39,919
flow

00:24:37,760 --> 00:24:40,960
and this thing here was functional

00:24:39,919 --> 00:24:44,000
programming

00:24:40,960 --> 00:24:45,840
and immutable techniques

00:24:44,000 --> 00:24:47,840
and these food sticks were you know

00:24:45,840 --> 00:24:49,039
reactive programming

00:24:47,840 --> 00:24:50,799
that's another name you can give to

00:24:49,039 --> 00:24:51,200
react to programming other than regular

00:24:50,799 --> 00:24:54,480
programming

00:24:51,200 --> 00:24:55,440
food sticks that and the divs that the

00:24:54,480 --> 00:24:58,559
view creates

00:24:55,440 --> 00:25:00,880
they are using the virtual dom

00:24:58,559 --> 00:25:03,279
so it turns out that not all of these

00:25:00,880 --> 00:25:04,240
concepts were that scary after all right

00:25:03,279 --> 00:25:06,240
i mean

00:25:04,240 --> 00:25:08,480
we saw that most of most of these

00:25:06,240 --> 00:25:09,039
actually just emerged naturally from

00:25:08,480 --> 00:25:12,840
those

00:25:09,039 --> 00:25:14,480
in insights that we got from user

00:25:12,840 --> 00:25:18,000
interfaces

00:25:14,480 --> 00:25:19,520
oh and hey one last thing remember

00:25:18,000 --> 00:25:21,120
the human computer interaction what

00:25:19,520 --> 00:25:25,600
happens if we

00:25:21,120 --> 00:25:27,679
replace the computer with another human

00:25:25,600 --> 00:25:29,360
i mean if the computer has senses and

00:25:27,679 --> 00:25:31,760
expression can't we just replace the

00:25:29,360 --> 00:25:34,960
computer with anything that has senses

00:25:31,760 --> 00:25:37,440
and expression so what if this

00:25:34,960 --> 00:25:39,360
model here can actually represent any

00:25:37,440 --> 00:25:42,400
kind of interaction whether it's

00:25:39,360 --> 00:25:43,760
computer and a human or it's a

00:25:42,400 --> 00:25:46,240
human and a human or it's a computer in

00:25:43,760 --> 00:25:49,039
a computer et cetera

00:25:46,240 --> 00:25:49,760
so in an interaction with another human

00:25:49,039 --> 00:25:52,720
you

00:25:49,760 --> 00:25:52,960
take um input words with your ears and

00:25:52,720 --> 00:25:56,720
you

00:25:52,960 --> 00:25:58,960
output words with your mouth right

00:25:56,720 --> 00:26:00,159
so when alice hears her friend bob

00:25:58,960 --> 00:26:02,720
saying what's up

00:26:00,159 --> 00:26:03,520
she processes that in her brain and she

00:26:02,720 --> 00:26:06,400
outputs

00:26:03,520 --> 00:26:09,919
her answer the event stream of alice's

00:26:06,400 --> 00:26:10,799
words is her part in the interaction and

00:26:09,919 --> 00:26:13,039
then when bob

00:26:10,799 --> 00:26:14,240
takes alice's words as input he also

00:26:13,039 --> 00:26:16,320
makes an answer

00:26:14,240 --> 00:26:17,919
so it turns out that alice's words are

00:26:16,320 --> 00:26:19,840
an event stream as a fixed point of the

00:26:17,919 --> 00:26:21,600
composition of alice brain with bob's

00:26:19,840 --> 00:26:24,640
brain

00:26:21,600 --> 00:26:26,720
so if we merge alice's words with bob's

00:26:24,640 --> 00:26:29,919
words we get an event streams

00:26:26,720 --> 00:26:32,080
of words from both of them which is what

00:26:29,919 --> 00:26:39,840
you know we normal humans name is just

00:26:32,080 --> 00:26:39,840
a conversation thank you

00:26:48,700 --> 00:26:53,310
[Applause]

00:26:50,070 --> 00:26:53,310
[Music]

00:26:53,840 --> 00:26:59,840
let's have a sit on this awesome awesome

00:26:57,360 --> 00:27:00,880
seat so from what i've noticed there

00:26:59,840 --> 00:27:04,880
were no questions

00:27:00,880 --> 00:27:07,919
on twitter i'm a little bit disappointed

00:27:04,880 --> 00:27:09,840
but um we have someone with a mic

00:27:07,919 --> 00:27:13,279
so if there are any questions for the

00:27:09,840 --> 00:27:13,279
audience anyone

00:27:13,360 --> 00:27:20,240
i can't see anyone seriously

00:27:17,679 --> 00:27:22,559
any oh there's a question over there

00:27:20,240 --> 00:27:22,559
awesome

00:27:28,559 --> 00:27:32,559
okay thank you for your interesting

00:27:31,039 --> 00:27:36,000
presentation

00:27:32,559 --> 00:27:39,440
and you wrote some markup

00:27:36,000 --> 00:27:40,080
in the javascript uh does this framework

00:27:39,440 --> 00:27:44,240
or something

00:27:40,080 --> 00:27:47,440
use react or something different

00:27:44,240 --> 00:27:50,080
yeah um is this mic still yeah um yes

00:27:47,440 --> 00:27:51,360
it actually doesn't use react it uses

00:27:50,080 --> 00:27:53,200
virtual dom

00:27:51,360 --> 00:27:55,919
virtual dash don that's the name of the

00:27:53,200 --> 00:27:59,039
library basically because i want to get

00:27:55,919 --> 00:28:00,799
the different patch algorithms

00:27:59,039 --> 00:28:03,679
and and i want to use them in the

00:28:00,799 --> 00:28:05,919
framework so react doesn't provide that

00:28:03,679 --> 00:28:07,840
but on the other hand the community

00:28:05,919 --> 00:28:11,200
around cyclejs just made this

00:28:07,840 --> 00:28:13,679
cycle dash react which where you can use

00:28:11,200 --> 00:28:15,679
react there and also the the markup you

00:28:13,679 --> 00:28:17,360
can use jsx with cycle

00:28:15,679 --> 00:28:18,960
but normally i use this virtual

00:28:17,360 --> 00:28:22,640
hyperscript it's just an age

00:28:18,960 --> 00:28:28,080
function but you could use jsx as well

00:28:22,640 --> 00:28:28,080
thank you any more questions

00:28:28,840 --> 00:28:31,840
yay

00:28:35,039 --> 00:28:42,080
hi last time i saw sanctuary

00:28:38,559 --> 00:28:45,360
a yes github page is under development

00:28:42,080 --> 00:28:48,960
is this yet or production

00:28:45,360 --> 00:28:50,720
ready now um yeah so

00:28:48,960 --> 00:28:52,000
this is not production ready because

00:28:50,720 --> 00:28:54,720
actually

00:28:52,000 --> 00:28:56,159
i'm redesigning it quite a lot like so

00:28:54,720 --> 00:28:57,760
the first version i made was

00:28:56,159 --> 00:28:59,679
had a completely different api than this

00:28:57,760 --> 00:29:02,159
and if you would build a production api

00:28:59,679 --> 00:29:02,799
production app on that it would have you

00:29:02,159 --> 00:29:05,200
know

00:29:02,799 --> 00:29:06,640
been like angular 2 but instead of that

00:29:05,200 --> 00:29:09,840
effect it would be angular 3

00:29:06,640 --> 00:29:12,080
4 5 6 and 7. so

00:29:09,840 --> 00:29:13,360
because this is really new stuff and

00:29:12,080 --> 00:29:16,000
sometimes you just really

00:29:13,360 --> 00:29:17,360
get it that okay this is like i need to

00:29:16,000 --> 00:29:19,200
remake this because i actually

00:29:17,360 --> 00:29:21,760
discovered that i need to do this

00:29:19,200 --> 00:29:24,080
better but finally now i think we're

00:29:21,760 --> 00:29:24,720
converging to a very nice api i don't

00:29:24,080 --> 00:29:28,080
think i can get

00:29:24,720 --> 00:29:30,960
nicer than this so soon and enough

00:29:28,080 --> 00:29:32,960
i think maybe you know a couple of i

00:29:30,960 --> 00:29:36,080
can't promise anything but you know

00:29:32,960 --> 00:29:39,120
yeah thank you thank you uh

00:29:36,080 --> 00:29:40,799
we still have some time so maybe another

00:29:39,120 --> 00:29:42,320
question there it is

00:29:40,799 --> 00:29:45,760
see you won't ask questions why won't

00:29:42,320 --> 00:29:49,200
you ask questions on twitter

00:29:45,760 --> 00:29:51,679
no internet that's true

00:29:49,200 --> 00:29:53,600
hello thank you for your presentation uh

00:29:51,679 --> 00:29:56,480
how to handle errors in this

00:29:53,600 --> 00:29:56,880
reactive pattern should i put errors on

00:29:56,480 --> 00:30:00,480
the

00:29:56,880 --> 00:30:02,880
same in screen stream or

00:30:00,480 --> 00:30:04,159
for example on that conversation between

00:30:02,880 --> 00:30:07,360
alice

00:30:04,159 --> 00:30:10,080
the errors should go to the same stream

00:30:07,360 --> 00:30:13,760
or some

00:30:10,080 --> 00:30:14,720
individual stream yeah so rxjs this

00:30:13,760 --> 00:30:17,520
library for

00:30:14,720 --> 00:30:19,360
event streams it has these uh error

00:30:17,520 --> 00:30:19,760
handling operators already for yourself

00:30:19,360 --> 00:30:22,320
and

00:30:19,760 --> 00:30:23,679
when you watch matt's presentation about

00:30:22,320 --> 00:30:25,279
rx he's going to explain it

00:30:23,679 --> 00:30:26,960
completely you're going to see that yes

00:30:25,279 --> 00:30:29,600
you can handle arrows here so

00:30:26,960 --> 00:30:31,520
it's really not a mystery but i'll leave

00:30:29,600 --> 00:30:32,080
the all the details to him because

00:30:31,520 --> 00:30:34,320
you're going to see

00:30:32,080 --> 00:30:36,240
the presentations quite nice but yeah

00:30:34,320 --> 00:30:37,679
you can handle errors and it's just not

00:30:36,240 --> 00:30:42,080
a problem

00:30:37,679 --> 00:30:45,120
thanks okay one more

00:30:42,080 --> 00:30:49,120
so many questions then

00:30:45,120 --> 00:30:52,000
hi so if you're thinking about this

00:30:49,120 --> 00:30:54,640
small little apps that you showed they

00:30:52,000 --> 00:30:58,159
are easy to comprehend in cycles

00:30:54,640 --> 00:30:59,600
but what if you have like a web store or

00:30:58,159 --> 00:31:03,039
something like that would you

00:30:59,600 --> 00:31:07,039
want to do sep or several of these

00:31:03,039 --> 00:31:09,360
little cycles or would you want to

00:31:07,039 --> 00:31:10,480
make a really large app that somehow

00:31:09,360 --> 00:31:13,600
just merges

00:31:10,480 --> 00:31:16,880
all the different

00:31:13,600 --> 00:31:18,640
cycles together yeah so um when i showed

00:31:16,880 --> 00:31:20,080
the api there were these two functions

00:31:18,640 --> 00:31:22,240
one of them was applied to dawn and the

00:31:20,080 --> 00:31:23,760
other one was register custom element

00:31:22,240 --> 00:31:25,760
and the other one the second one we

00:31:23,760 --> 00:31:27,440
didn't use and

00:31:25,760 --> 00:31:29,039
that basically creates kind of

00:31:27,440 --> 00:31:32,880
components of

00:31:29,039 --> 00:31:35,440
you know react style so you can build uh

00:31:32,880 --> 00:31:36,799
components with cycle and the components

00:31:35,440 --> 00:31:39,039
are also

00:31:36,799 --> 00:31:40,799
specified just like the computer

00:31:39,039 --> 00:31:42,559
function was so it's also

00:31:40,799 --> 00:31:44,559
so you could think of the components as

00:31:42,559 --> 00:31:48,080
cycles also so they're kind of

00:31:44,559 --> 00:31:49,679
mini programs so yeah and

00:31:48,080 --> 00:31:51,360
so basically the tools for building

00:31:49,679 --> 00:31:54,399
building very large apps are

00:31:51,360 --> 00:31:56,559
components react style and also

00:31:54,399 --> 00:31:58,000
just you know decomposing your function

00:31:56,559 --> 00:32:01,120
into smaller bits

00:31:58,000 --> 00:32:04,480
and yeah okay cool

00:32:01,120 --> 00:32:07,360
thanks bobby good awesome um

00:32:04,480 --> 00:32:15,840
we have another speaker um one more

00:32:07,360 --> 00:32:15,840
round of applause please

00:32:18,720 --> 00:32:20,799

YouTube URL: https://www.youtube.com/watch?v=gG2S0tLrZCE


