Title: We fail to follow SemVer and why it needn't matter by Stephan Bonnemann at JSConf Budapest 2015
Publication date: 2020-09-23
Playlist: JSConf Budapest 2015
Description: 
	Slides: https://speakerdeck.com/boennemann/we-fail-to-follow-semver-and-why-it-neednt-matter-1

http://2015.jsconfbp.com/#boennemann

If extensive libraries and even the tiniest module followed SemVer strictly, dependency hell would be a thing of the past … but humans weren’t made to follow rules. 

There are over 125.000 packages on npm today. By the time of this conference, at least another 10.000 will have been added. Using the right packages in your own modules and applications makes JavaScript the joy to develop it is today. But if even immensely popular libraries fail to properly declare breaking changes, how can we trust the over 50.000 strangers who developed all these modules? Currently we can’t. Let me show you how to write confidence-inspiring modules by leaving package publishing up to the machines – instead of buggy humans.
Captions: 
	00:00:15,440 --> 00:00:18,560
thank you carolina for the kind words

00:00:17,119 --> 00:00:20,800
that's really appreciated

00:00:18,560 --> 00:00:22,320
and also thank you for the whole for the

00:00:20,800 --> 00:00:24,560
whole team for

00:00:22,320 --> 00:00:26,160
putting all this up this is awesome and

00:00:24,560 --> 00:00:30,160
it's a lot of work i know that

00:00:26,160 --> 00:00:32,239
so hi all also hi to the people

00:00:30,160 --> 00:00:35,440
on a live stream watching right now so

00:00:32,239 --> 00:00:35,440
let's get right into it

00:00:35,559 --> 00:00:41,440
125 000 packages on npm

00:00:38,960 --> 00:00:42,320
back in march when i proposed this talk

00:00:41,440 --> 00:00:43,920
i said

00:00:42,320 --> 00:00:47,200
by the time of this conference we will

00:00:43,920 --> 00:00:50,160
have at least 10 000 packages more

00:00:47,200 --> 00:00:51,800
and so i checked again this morning and

00:00:50,160 --> 00:00:55,360
what we have today is

00:00:51,800 --> 00:00:57,120
148 000 packages that's more than double

00:00:55,360 --> 00:00:59,680
the amount that i predicted

00:00:57,120 --> 00:01:02,719
and this is a whole lot if you consider

00:00:59,680 --> 00:01:05,680
that npm itself is five years old

00:01:02,719 --> 00:01:07,200
but why am i focusing so much on

00:01:05,680 --> 00:01:07,920
quantity here isn't quality more

00:01:07,200 --> 00:01:10,560
important

00:01:07,920 --> 00:01:12,400
of course quality is important but this

00:01:10,560 --> 00:01:13,600
shows us something this is a huge number

00:01:12,400 --> 00:01:16,880
there are huge growing

00:01:13,600 --> 00:01:18,080
growth rates so it seems like it's easy

00:01:16,880 --> 00:01:20,240
to publish

00:01:18,080 --> 00:01:21,439
and a lot of people are doing it which

00:01:20,240 --> 00:01:23,680
is nice

00:01:21,439 --> 00:01:25,040
so you have to keep in mind that every

00:01:23,680 --> 00:01:27,759
package exists

00:01:25,040 --> 00:01:29,600
because there seems to be a problem and

00:01:27,759 --> 00:01:32,479
ideally each of these packages

00:01:29,600 --> 00:01:35,119
solves its own little problem and if we

00:01:32,479 --> 00:01:37,280
have 148 000 of them

00:01:35,119 --> 00:01:38,640
that's that's pretty amazing like these

00:01:37,280 --> 00:01:39,600
are all doing one thing and they're

00:01:38,640 --> 00:01:42,479
doing it well

00:01:39,600 --> 00:01:44,560
so that's a lot to choose from and it's

00:01:42,479 --> 00:01:48,040
it's super incredible

00:01:44,560 --> 00:01:51,520
that we can build upon all of this so

00:01:48,040 --> 00:01:53,520
148 000 solve problems that's a lot less

00:01:51,520 --> 00:01:56,000
problems if you ask me

00:01:53,520 --> 00:01:57,360
so this is the rule of diversity in play

00:01:56,000 --> 00:01:59,840
you can distrust one

00:01:57,360 --> 00:02:00,880
true way and compose everything the way

00:01:59,840 --> 00:02:02,479
you like

00:02:00,880 --> 00:02:04,079
this is why we are so productive in

00:02:02,479 --> 00:02:06,079
javascript today this is why

00:02:04,079 --> 00:02:08,879
node is so popular this is because of

00:02:06,079 --> 00:02:09,440
this ecosystem and if you look at things

00:02:08,879 --> 00:02:12,560
like

00:02:09,440 --> 00:02:13,440
react native for example one of the main

00:02:12,560 --> 00:02:15,840
advantages

00:02:13,440 --> 00:02:16,879
is that they can npm install things

00:02:15,840 --> 00:02:20,840
which puts them

00:02:16,879 --> 00:02:24,000
way ahead of any other native developer

00:02:20,840 --> 00:02:26,000
so our workday looks like this

00:02:24,000 --> 00:02:27,360
first we go to npmsearch.com and we

00:02:26,000 --> 00:02:29,840
enter what we want to do

00:02:27,360 --> 00:02:32,160
then we install the package and for

00:02:29,840 --> 00:02:35,680
every problem we repeat that process

00:02:32,160 --> 00:02:37,440
then we write some glue code

00:02:35,680 --> 00:02:38,879
or we pretend that we are actually

00:02:37,440 --> 00:02:40,400
working by

00:02:38,879 --> 00:02:42,959
installing the latest and greatest build

00:02:40,400 --> 00:02:46,160
system or arguing about semicolons

00:02:42,959 --> 00:02:50,319
and then then we're done profit

00:02:46,160 --> 00:02:53,200
awesome but

00:02:50,319 --> 00:02:55,680
of course there's a catch you come back

00:02:53,200 --> 00:02:58,400
after weekend you have changed nothing

00:02:55,680 --> 00:02:59,760
your app is broken you update one module

00:02:58,400 --> 00:03:00,959
and something entirely different is

00:02:59,760 --> 00:03:03,280
broken

00:03:00,959 --> 00:03:06,319
or it works locally but you see on your

00:03:03,280 --> 00:03:08,159
ci server the tests are failing

00:03:06,319 --> 00:03:10,080
you feel like flipping tables because

00:03:08,159 --> 00:03:12,159
this is happening all the time

00:03:10,080 --> 00:03:13,680
and you know why that is you have to

00:03:12,159 --> 00:03:15,519
trust some strangers

00:03:13,680 --> 00:03:16,959
we cannot know whether they are changing

00:03:15,519 --> 00:03:18,560
their modules so that they are

00:03:16,959 --> 00:03:21,120
affecting our apps that they're breaking

00:03:18,560 --> 00:03:22,480
our apps and how can we make sure that

00:03:21,120 --> 00:03:24,159
nothing is breaking

00:03:22,480 --> 00:03:26,080
these apps this is what we call

00:03:24,159 --> 00:03:28,640
dependency hell

00:03:26,080 --> 00:03:29,920
but there's already a solution for this

00:03:28,640 --> 00:03:32,080
problem

00:03:29,920 --> 00:03:33,519
a long time ago wise people came up with

00:03:32,080 --> 00:03:34,720
something that is called semantic

00:03:33,519 --> 00:03:37,920
versioning or short

00:03:34,720 --> 00:03:39,360
december which is here to prevent

00:03:37,920 --> 00:03:41,440
exactly that

00:03:39,360 --> 00:03:42,480
so what you see here this is a version

00:03:41,440 --> 00:03:45,360
number or the scheme of

00:03:42,480 --> 00:03:46,000
version number and december gives gives

00:03:45,360 --> 00:03:50,080
each of these

00:03:46,000 --> 00:03:53,920
digits a precise meaning

00:03:50,080 --> 00:03:56,640
so for example this is 1.0.0

00:03:53,920 --> 00:03:57,200
this is where your module should start

00:03:56,640 --> 00:03:59,519
and

00:03:57,200 --> 00:04:02,000
as it happens sometimes we have bugs in

00:03:59,519 --> 00:04:04,560
our software and what we do is we

00:04:02,000 --> 00:04:05,200
increase the patch release the patch

00:04:04,560 --> 00:04:07,040
version

00:04:05,200 --> 00:04:08,959
so the people who are consuming our

00:04:07,040 --> 00:04:10,159
module know that we have brought them

00:04:08,959 --> 00:04:14,640
some bug fixes

00:04:10,159 --> 00:04:17,359
or security fixes

00:04:14,640 --> 00:04:18,160
then if we add new functionality to our

00:04:17,359 --> 00:04:20,720
package we

00:04:18,160 --> 00:04:21,840
increase the minor version number and

00:04:20,720 --> 00:04:24,160
reset the other one

00:04:21,840 --> 00:04:25,440
the patch version so this is if we add

00:04:24,160 --> 00:04:28,479
functionality

00:04:25,440 --> 00:04:30,960
and now last but certainly not least

00:04:28,479 --> 00:04:31,680
is the major version which we increase

00:04:30,960 --> 00:04:34,639
if we have

00:04:31,680 --> 00:04:36,960
broken a use case of our module that was

00:04:34,639 --> 00:04:39,360
working before

00:04:36,960 --> 00:04:40,800
so now you know what each of these

00:04:39,360 --> 00:04:43,840
numbers stands for

00:04:40,800 --> 00:04:47,040
and i tweeted that like two days ago

00:04:43,840 --> 00:04:50,080
the versions are named major and minor

00:04:47,040 --> 00:04:51,280
i think that's um that's wrong

00:04:50,080 --> 00:04:53,040
because that leaves room for

00:04:51,280 --> 00:04:55,120
interpretation because people are

00:04:53,040 --> 00:04:57,680
arguing this is just a minor breaking

00:04:55,120 --> 00:05:00,080
change and that does not exist

00:04:57,680 --> 00:05:01,759
so maybe we can just name them the

00:05:00,080 --> 00:05:03,440
breaking version the feature version and

00:05:01,759 --> 00:05:06,479
the patch version

00:05:03,440 --> 00:05:06,800
so why is this so awesome what does this

00:05:06,479 --> 00:05:09,520
give

00:05:06,800 --> 00:05:10,560
us it gives us version ranges so for

00:05:09,520 --> 00:05:12,720
example

00:05:10,560 --> 00:05:13,919
if you specify your dependency with a

00:05:12,720 --> 00:05:16,000
tilde before that

00:05:13,919 --> 00:05:17,360
you automatically get all the patch

00:05:16,000 --> 00:05:19,759
versions which means you

00:05:17,360 --> 00:05:21,199
have all all the bug fixes and all the

00:05:19,759 --> 00:05:23,840
security fixes

00:05:21,199 --> 00:05:25,759
automatically installed for you and

00:05:23,840 --> 00:05:28,000
using the hat or carat symbol you will

00:05:25,759 --> 00:05:32,479
get all the bug fixes plus features

00:05:28,000 --> 00:05:35,199
which shouldn't break your software and

00:05:32,479 --> 00:05:35,919
this is really really important because

00:05:35,199 --> 00:05:38,960
this

00:05:35,919 --> 00:05:41,520
prevents dependency hell first

00:05:38,960 --> 00:05:43,520
we dependency how there are two things

00:05:41,520 --> 00:05:44,320
to it the first thing is version log

00:05:43,520 --> 00:05:47,759
which means

00:05:44,320 --> 00:05:49,520
you define your dependency so tightly

00:05:47,759 --> 00:05:51,199
that you don't get the bug fixes or

00:05:49,520 --> 00:05:53,120
updates which not only

00:05:51,199 --> 00:05:54,560
affects your dependencies but also the

00:05:53,120 --> 00:05:55,600
dependencies of your dependencies of

00:05:54,560 --> 00:05:57,919
your dependencies

00:05:55,600 --> 00:05:59,759
and so on so deep down the dependency

00:05:57,919 --> 00:06:01,520
tree you might have some outdated

00:05:59,759 --> 00:06:02,960
software which is

00:06:01,520 --> 00:06:05,840
really really bad especially if it's a

00:06:02,960 --> 00:06:07,919
security fix and the other thing is

00:06:05,840 --> 00:06:09,840
version promiscuity which means you have

00:06:07,919 --> 00:06:11,680
to lose

00:06:09,840 --> 00:06:14,160
version definitions and then you get the

00:06:11,680 --> 00:06:18,319
breakings i described earlier

00:06:14,160 --> 00:06:22,240
so sambar is really important to

00:06:18,319 --> 00:06:22,960
prevent that so now we have 148 000

00:06:22,240 --> 00:06:24,720
modules

00:06:22,960 --> 00:06:26,240
we have summer to prevent all them we

00:06:24,720 --> 00:06:27,840
can harness the power of all these

00:06:26,240 --> 00:06:31,600
modules

00:06:27,840 --> 00:06:33,440
well no we can't almost no day goes by

00:06:31,600 --> 00:06:36,000
without these problems occurring

00:06:33,440 --> 00:06:37,280
and that's because we failed to follow

00:06:36,000 --> 00:06:40,319
sambar

00:06:37,280 --> 00:06:42,560
big time this is a lot of use

00:06:40,319 --> 00:06:43,520
this is a lot of wasted potential and a

00:06:42,560 --> 00:06:47,199
lot of development

00:06:43,520 --> 00:06:50,479
time is wasted every day

00:06:47,199 --> 00:06:52,479
but why are we failing so badly let me

00:06:50,479 --> 00:06:55,840
show you some examples

00:06:52,479 --> 00:06:57,280
so what you see here is an analysis of

00:06:55,840 --> 00:07:01,120
all the packages

00:06:57,280 --> 00:07:04,240
on npm conducted by irene ross of buku

00:07:01,120 --> 00:07:04,960
in late 2014 what you can see on the

00:07:04,240 --> 00:07:08,000
left

00:07:04,960 --> 00:07:08,560
are all the versions that start with a

00:07:08,000 --> 00:07:11,759
minor

00:07:08,560 --> 00:07:14,080
a major zero version that's over 80

00:07:11,759 --> 00:07:16,240
percent of all packages on npm

00:07:14,080 --> 00:07:18,400
and you might have noticed that i left

00:07:16,240 --> 00:07:20,800
out major zero versions

00:07:18,400 --> 00:07:23,680
in my introduction before and that's

00:07:20,800 --> 00:07:26,240
because they're inherently bad

00:07:23,680 --> 00:07:28,560
let me quote from this back major

00:07:26,240 --> 00:07:30,639
version zero is for initial development

00:07:28,560 --> 00:07:32,960
anything may change at any time the

00:07:30,639 --> 00:07:36,160
public api should not be considered

00:07:32,960 --> 00:07:37,759
stable what this means is that basically

00:07:36,160 --> 00:07:40,319
december does not apply

00:07:37,759 --> 00:07:42,560
so sambar does not apply to 80 of all

00:07:40,319 --> 00:07:44,560
packages

00:07:42,560 --> 00:07:45,840
you might say that these versions are

00:07:44,560 --> 00:07:47,680
unstable anyways

00:07:45,840 --> 00:07:50,240
but i think that does not matter first

00:07:47,680 --> 00:07:50,479
of all some of the most popular packages

00:07:50,240 --> 00:07:54,240
on

00:07:50,479 --> 00:07:56,240
npm like async run forever pm2 karma

00:07:54,240 --> 00:07:58,000
these are the ones if you open npm

00:07:56,240 --> 00:07:59,520
js.org that's just the

00:07:58,000 --> 00:08:01,280
most popular things and all of them are

00:07:59,520 --> 00:08:03,840
below 1.0.0

00:08:01,280 --> 00:08:04,720
and they're used by thousands of people

00:08:03,840 --> 00:08:06,479
so

00:08:04,720 --> 00:08:07,840
it seems like it doesn't apply really

00:08:06,479 --> 00:08:09,360
that doesn't say anything about

00:08:07,840 --> 00:08:11,919
stability

00:08:09,360 --> 00:08:14,319
and second i think the version number is

00:08:11,919 --> 00:08:16,960
the wrong place to communicate stability

00:08:14,319 --> 00:08:17,599
it should serve us to avoid dependency

00:08:16,960 --> 00:08:19,599
hell

00:08:17,599 --> 00:08:22,000
and stability has nothing to do with

00:08:19,599 --> 00:08:24,479
this because we're giving away

00:08:22,000 --> 00:08:26,879
the goodness of sambar for this so for

00:08:24,479 --> 00:08:28,160
example look at what iojs did when they

00:08:26,879 --> 00:08:32,399
first released

00:08:28,160 --> 00:08:34,159
um it so it was 1.0.0 but they stated on

00:08:32,399 --> 00:08:34,959
the website this is beta this is not

00:08:34,159 --> 00:08:37,120
stable

00:08:34,959 --> 00:08:38,880
which they used a different channel to

00:08:37,120 --> 00:08:42,000
communicate stability

00:08:38,880 --> 00:08:43,120
and they made the goodness of sambar

00:08:42,000 --> 00:08:46,560
available to all

00:08:43,120 --> 00:08:48,000
people consuming iojs or look at what

00:08:46,560 --> 00:08:51,519
npm itself does

00:08:48,000 --> 00:08:53,519
they have tags so whenever whenever you

00:08:51,519 --> 00:08:55,920
publish a version to npm

00:08:53,519 --> 00:08:57,440
it gets the latest tag so if you install

00:08:55,920 --> 00:08:58,959
a package you don't get the

00:08:57,440 --> 00:09:00,560
package with the highest version number

00:08:58,959 --> 00:09:01,279
but you get the package with the latest

00:09:00,560 --> 00:09:03,360
tag

00:09:01,279 --> 00:09:05,040
which means if you publish a new version

00:09:03,360 --> 00:09:08,160
without the latest tag but

00:09:05,040 --> 00:09:11,360
with something like next you can have

00:09:08,160 --> 00:09:13,519
real next versions in december sense but

00:09:11,360 --> 00:09:14,720
the majority of your users won't install

00:09:13,519 --> 00:09:17,360
it automatically

00:09:14,720 --> 00:09:19,440
only your early adopters can

00:09:17,360 --> 00:09:20,240
specifically install it test it and then

00:09:19,440 --> 00:09:22,720
if you have

00:09:20,240 --> 00:09:23,839
a bug you just publish the next version

00:09:22,720 --> 00:09:26,800
and you can

00:09:23,839 --> 00:09:28,000
still use semver and still communicate

00:09:26,800 --> 00:09:30,800
stability

00:09:28,000 --> 00:09:31,519
so this is welcome to stamford the good

00:09:30,800 --> 00:09:35,600
parts

00:09:31,519 --> 00:09:39,120
just do not use versions below 1.0.0

00:09:35,600 --> 00:09:41,760
next so we have

00:09:39,120 --> 00:09:42,640
a dependency and there's a breaking

00:09:41,760 --> 00:09:45,839
change

00:09:42,640 --> 00:09:47,360
and now we cannot automatically update

00:09:45,839 --> 00:09:49,360
that so we do that by hand and then we

00:09:47,360 --> 00:09:50,240
go on the github site and there's the

00:09:49,360 --> 00:09:52,480
text but

00:09:50,240 --> 00:09:53,440
there's no there's no indication of what

00:09:52,480 --> 00:09:55,839
changed

00:09:53,440 --> 00:09:57,120
and there's no blog post or nothing

00:09:55,839 --> 00:09:59,360
basically

00:09:57,120 --> 00:10:00,959
and what should we do should we read

00:09:59,360 --> 00:10:02,399
through the code should we

00:10:00,959 --> 00:10:05,040
read every line i mean that's why we're

00:10:02,399 --> 00:10:06,959
using libraries so that we don't have to

00:10:05,040 --> 00:10:08,959
so it's a huge problem that we don't

00:10:06,959 --> 00:10:11,279
have change logs because we cannot

00:10:08,959 --> 00:10:14,480
upgrade or migrate our software

00:10:11,279 --> 00:10:14,480
if you don't know what happened

00:10:14,880 --> 00:10:20,240
but there's hope this is an actual

00:10:17,680 --> 00:10:22,959
changelog from angularjs

00:10:20,240 --> 00:10:24,880
and this is generated from commit

00:10:22,959 --> 00:10:27,600
messages and there are people that argue

00:10:24,880 --> 00:10:29,600
that commit messages are super bad

00:10:27,600 --> 00:10:30,959
for change logs but that's only if you

00:10:29,600 --> 00:10:32,800
copy them in directly

00:10:30,959 --> 00:10:34,720
what angularjs did they came up with

00:10:32,800 --> 00:10:36,640
commit message conventions

00:10:34,720 --> 00:10:38,800
so you can see in the first section

00:10:36,640 --> 00:10:40,959
under bug fixes http they're

00:10:38,800 --> 00:10:42,800
grouped together by the affected module

00:10:40,959 --> 00:10:44,240
and also you have bug fixed feature

00:10:42,800 --> 00:10:45,600
performance improvement and braking

00:10:44,240 --> 00:10:47,760
changes sections

00:10:45,600 --> 00:10:49,760
you have links to the specific commit

00:10:47,760 --> 00:10:52,800
and also to the issues that are affected

00:10:49,760 --> 00:10:54,640
so this is basically like if you would

00:10:52,800 --> 00:10:58,720
have written it by hand

00:10:54,640 --> 00:10:58,720
and generating them is super useful

00:10:59,440 --> 00:11:03,279
but this leads us directly to the next

00:11:02,000 --> 00:11:06,320
problem

00:11:03,279 --> 00:11:07,519
you see the last version is not a zero

00:11:06,320 --> 00:11:10,720
so

00:11:07,519 --> 00:11:11,200
this is a patch release and then what's

00:11:10,720 --> 00:11:12,720
this

00:11:11,200 --> 00:11:16,160
features and breaking changes in the

00:11:12,720 --> 00:11:18,000
patch release that shouldn't happen

00:11:16,160 --> 00:11:19,760
i think that's kind of ironic they have

00:11:18,000 --> 00:11:21,200
a completely automated system to

00:11:19,760 --> 00:11:23,600
generate the change lock and still

00:11:21,200 --> 00:11:25,040
they're releasing a patch version

00:11:23,600 --> 00:11:27,600
even though they are clearly stating

00:11:25,040 --> 00:11:29,519
that this is a breaking version

00:11:27,600 --> 00:11:32,480
what's the point of this if they don't

00:11:29,519 --> 00:11:36,560
follow a specific scheme for their

00:11:32,480 --> 00:11:38,560
versions and in germany we have a word

00:11:36,560 --> 00:11:41,600
for this

00:11:38,560 --> 00:11:46,079
it's hop versions

00:11:41,600 --> 00:11:46,079
and that's that means

00:11:47,920 --> 00:11:50,320
thank you

00:11:52,240 --> 00:11:55,440
that means the fear of increasing the

00:11:54,160 --> 00:11:57,440
major version

00:11:55,440 --> 00:11:58,880
and that's what makes us fail at

00:11:57,440 --> 00:12:00,240
december the most

00:11:58,880 --> 00:12:01,760
they have clearly written down that they

00:12:00,240 --> 00:12:04,320
are breaking changes but they are not

00:12:01,760 --> 00:12:06,720
increasing the major version why is that

00:12:04,320 --> 00:12:07,920
what a breaking version sorry there's no

00:12:06,720 --> 00:12:10,320
reason except for

00:12:07,920 --> 00:12:13,600
maybe marketing reasons or emotional

00:12:10,320 --> 00:12:15,279
attachment to versions

00:12:13,600 --> 00:12:17,519
there is this concept in our mind that

00:12:15,279 --> 00:12:18,560
the version has something to say about

00:12:17,519 --> 00:12:21,760
the project like

00:12:18,560 --> 00:12:25,839
the progress or the stability and all of

00:12:21,760 --> 00:12:25,839
this is wrong

00:12:26,079 --> 00:12:29,440
people believe something incredibly

00:12:28,000 --> 00:12:30,160
exciting is happening if the major

00:12:29,440 --> 00:12:32,720
version

00:12:30,160 --> 00:12:34,160
is increased and just yesterday nolan

00:12:32,720 --> 00:12:36,959
lawson from pouchdb

00:12:34,160 --> 00:12:38,959
tweeted this they released the major

00:12:36,959 --> 00:12:42,160
version the braking version sorry

00:12:38,959 --> 00:12:44,000
3.0.0 of pouchdb

00:12:42,160 --> 00:12:45,519
where they only removed the feature

00:12:44,000 --> 00:12:47,279
which was of course

00:12:45,519 --> 00:12:49,440
a braking release and suddenly they got

00:12:47,279 --> 00:12:51,680
a lot of press coverage a lot of new

00:12:49,440 --> 00:12:53,600
stars the usage increased and all they

00:12:51,680 --> 00:12:56,720
did was remove a feature

00:12:53,600 --> 00:12:57,920
so there's clearly something wrong with

00:12:56,720 --> 00:13:01,519
that

00:12:57,920 --> 00:13:03,920
leave your emotions out of this

00:13:01,519 --> 00:13:06,639
so here's a quote from jeremy ashkenaz

00:13:03,920 --> 00:13:08,720
the author author of backbone

00:13:06,639 --> 00:13:10,639
underscore and coffeescript and he's

00:13:08,720 --> 00:13:12,240
particularly well known for not caring

00:13:10,639 --> 00:13:14,079
about sambar at all

00:13:12,240 --> 00:13:15,519
so he said if he strictly followed

00:13:14,079 --> 00:13:18,959
semantic versioning

00:13:15,519 --> 00:13:19,760
it would probably be backbone.js 43.0.0

00:13:18,959 --> 00:13:21,680
by now

00:13:19,760 --> 00:13:25,360
which doesn't help anyone evaluate the

00:13:21,680 --> 00:13:25,360
actual progress of the project

00:13:25,600 --> 00:13:29,440
evaluate the actual progress of the

00:13:28,320 --> 00:13:31,360
project

00:13:29,440 --> 00:13:32,720
he says he's not following a specific

00:13:31,360 --> 00:13:36,000
scheme and he just makes

00:13:32,720 --> 00:13:38,399
things up so how should this be

00:13:36,000 --> 00:13:40,160
possible like how should things be

00:13:38,399 --> 00:13:41,920
trackable or comparable if he's not

00:13:40,160 --> 00:13:45,760
following any standard

00:13:41,920 --> 00:13:49,040
so here's the thing we as humans

00:13:45,760 --> 00:13:50,240
sorry we as humans cannot track anything

00:13:49,040 --> 00:13:53,040
from version numbers

00:13:50,240 --> 00:13:53,760
we cannot get anything out of it this is

00:13:53,040 --> 00:13:56,959
the real

00:13:53,760 --> 00:14:00,560
illusion so

00:13:56,959 --> 00:14:03,279
they're even wilder sorry i forgot the

00:14:00,560 --> 00:14:05,760
amazing animation so there are even

00:14:03,279 --> 00:14:07,760
wilder concepts like odd or even version

00:14:05,760 --> 00:14:09,760
numbers for example in node.js

00:14:07,760 --> 00:14:12,800
where if it's odd version number it's

00:14:09,760 --> 00:14:15,760
unstable and if it's even it's stable

00:14:12,800 --> 00:14:16,560
or i came across something recently that

00:14:15,760 --> 00:14:19,680
says

00:14:16,560 --> 00:14:22,240
0.7 during initial development 0.8

00:14:19,680 --> 00:14:23,519
completed draft undergoing review 0.9

00:14:22,240 --> 00:14:26,959
final draft of review

00:14:23,519 --> 00:14:29,120
1.0 first release version so

00:14:26,959 --> 00:14:30,000
don't do this don't attach additional

00:14:29,120 --> 00:14:32,160
meaning to version

00:14:30,000 --> 00:14:33,760
numbers this is utter and complete

00:14:32,160 --> 00:14:36,959
nonsense

00:14:33,760 --> 00:14:38,959
so let me tell you something versions

00:14:36,959 --> 00:14:40,880
are not for humans or better nothing

00:14:38,959 --> 00:14:43,519
good will ever come from making version

00:14:40,880 --> 00:14:45,279
numbers for humans

00:14:43,519 --> 00:14:46,639
to illustrate this point i'd like to

00:14:45,279 --> 00:14:49,920
show you

00:14:46,639 --> 00:14:51,920
the earlier example from angular

00:14:49,920 --> 00:14:53,199
so you see two screenshots and there are

00:14:51,920 --> 00:14:54,880
two repositories

00:14:53,199 --> 00:14:56,480
and both of these repositories are

00:14:54,880 --> 00:14:57,760
angular so

00:14:56,480 --> 00:15:00,639
what's the difference or what's the

00:14:57,760 --> 00:15:02,480
point of this well once this angularjs

00:15:00,639 --> 00:15:05,600
once is angular

00:15:02,480 --> 00:15:07,199
whatever um

00:15:05,600 --> 00:15:09,760
actually they are for the different

00:15:07,199 --> 00:15:11,920
versions so one repository

00:15:09,760 --> 00:15:13,600
for one point x and the other repository

00:15:11,920 --> 00:15:15,600
for two point x

00:15:13,600 --> 00:15:18,000
i'm not sure if it's just me or is this

00:15:15,600 --> 00:15:20,000
completely ridiculous

00:15:18,000 --> 00:15:22,240
the angular team reserved the major

00:15:20,000 --> 00:15:24,480
version not for breaking changes

00:15:22,240 --> 00:15:26,079
but for changes that are so fundamental

00:15:24,480 --> 00:15:28,079
that they require

00:15:26,079 --> 00:15:29,680
an entirely different repo and also

00:15:28,079 --> 00:15:30,880
people are complaining that there is no

00:15:29,680 --> 00:15:35,519
upgrade path

00:15:30,880 --> 00:15:38,800
so isn't it something entirely different

00:15:35,519 --> 00:15:41,519
here's how they could fix it

00:15:38,800 --> 00:15:42,240
of course this is just a placeholder but

00:15:41,519 --> 00:15:44,399
you can't just

00:15:42,240 --> 00:15:46,959
use a new name if it's so fundamentally

00:15:44,399 --> 00:15:46,959
different

00:15:48,399 --> 00:15:52,160
versions are not for humans names are

00:15:51,199 --> 00:15:54,320
and this

00:15:52,160 --> 00:15:56,240
goes the same for packages that that are

00:15:54,320 --> 00:15:58,399
in early development a lot of people

00:15:56,240 --> 00:16:00,320
tell me they just want to play around

00:15:58,399 --> 00:16:02,079
and then they start with zero whatever

00:16:00,320 --> 00:16:04,240
because it gives them some kind of

00:16:02,079 --> 00:16:06,399
security or something

00:16:04,240 --> 00:16:08,320
the thing is the most of the time that

00:16:06,399 --> 00:16:09,519
get weight that gets wasted before we

00:16:08,320 --> 00:16:11,040
start developing is

00:16:09,519 --> 00:16:12,720
bike chatting around the name of the

00:16:11,040 --> 00:16:13,279
package so here's my proposal you just

00:16:12,720 --> 00:16:15,759
give it

00:16:13,279 --> 00:16:16,399
whatever package name and then you start

00:16:15,759 --> 00:16:19,959
and you

00:16:16,399 --> 00:16:22,639
might be at version 14.0.0 or

00:16:19,959 --> 00:16:24,240
35.0.0 and at the time you feel it

00:16:22,639 --> 00:16:26,160
stable and it's worthwhile

00:16:24,240 --> 00:16:29,839
you can just change the name and start

00:16:26,160 --> 00:16:32,079
over that's for human communication

00:16:29,839 --> 00:16:32,079
so

00:16:33,199 --> 00:16:36,560
here's a quote from my dear friend

00:16:34,880 --> 00:16:38,639
stefan side who's also watching hi

00:16:36,560 --> 00:16:40,480
stefan

00:16:38,639 --> 00:16:42,399
he's a huge source of inspiration for me

00:16:40,480 --> 00:16:44,800
and you should check out his talks and

00:16:42,399 --> 00:16:48,639
listen to what he says i'm serious

00:16:44,800 --> 00:16:49,360
so here's the quote our tools are so bad

00:16:48,639 --> 00:16:52,000
we value

00:16:49,360 --> 00:16:55,839
human readability in computer protocols

00:16:52,000 --> 00:16:55,839
when it really doesn't matter

00:16:56,240 --> 00:16:59,680
and whenever i have to waste time

00:16:58,240 --> 00:17:02,800
because someone doesn't follow

00:16:59,680 --> 00:17:04,319
samurai just depresses me and like how

00:17:02,800 --> 00:17:07,839
terrible is everything

00:17:04,319 --> 00:17:09,280
but the talk wasn't named before it

00:17:07,839 --> 00:17:11,039
failed to follow stammer and everything

00:17:09,280 --> 00:17:13,760
is terrible it's we failed to follow

00:17:11,039 --> 00:17:16,880
sambar and why it needn't matter

00:17:13,760 --> 00:17:17,600
so this is because it's possible to

00:17:16,880 --> 00:17:19,919
remove

00:17:17,600 --> 00:17:20,959
to remove humans entirely from this

00:17:19,919 --> 00:17:22,799
process

00:17:20,959 --> 00:17:24,720
humans are the ones who are messing this

00:17:22,799 --> 00:17:26,559
up with their emotions

00:17:24,720 --> 00:17:28,319
and this is why i built something to

00:17:26,559 --> 00:17:31,840
remove them from that process

00:17:28,319 --> 00:17:34,000
so it's not so live life coding because

00:17:31,840 --> 00:17:36,160
it relies a bit on the network

00:17:34,000 --> 00:17:38,480
so i have a video recording but let's

00:17:36,160 --> 00:17:43,120
see how that goes

00:17:38,480 --> 00:17:46,240
so we will develop a module together

00:17:43,120 --> 00:17:48,799
and what you see here is a new module a

00:17:46,240 --> 00:17:50,960
new repository i created

00:17:48,799 --> 00:17:53,520
it doesn't have any releases just some

00:17:50,960 --> 00:17:56,559
boilerplate code like the package.json

00:17:53,520 --> 00:17:58,000
or is it playing yeah just the package

00:17:56,559 --> 00:18:00,799
json travis

00:17:58,000 --> 00:18:03,360
when travis ci configuration so the

00:18:00,799 --> 00:18:06,400
tests are running and everything

00:18:03,360 --> 00:18:15,280
okay this is bad the video doesn't play

00:18:06,400 --> 00:18:16,799
on my screen okay whatever i'll just do

00:18:15,280 --> 00:18:20,080
it this way

00:18:16,799 --> 00:18:21,919
so i'm typing this right now

00:18:20,080 --> 00:18:23,919
um the thing is it's not that there are

00:18:21,919 --> 00:18:24,640
no releases on github yet and it's not

00:18:23,919 --> 00:18:28,000
on

00:18:24,640 --> 00:18:28,880
npm so here is my test file i've set it

00:18:28,000 --> 00:18:30,880
up already

00:18:28,880 --> 00:18:32,240
and the code doesn't really matter so

00:18:30,880 --> 00:18:34,640
i'm just testing a

00:18:32,240 --> 00:18:35,919
function that sums up numbers that you

00:18:34,640 --> 00:18:38,320
put into it

00:18:35,919 --> 00:18:39,039
and so we want to have to put in some

00:18:38,320 --> 00:18:42,080
numbers like

00:18:39,039 --> 00:18:46,320
1 and 4 and the expected result is

00:18:42,080 --> 00:18:49,840
5. and if we put just one number in we

00:18:46,320 --> 00:18:52,640
just want to have that number back

00:18:49,840 --> 00:18:53,360
so we're now trying to execute these

00:18:52,640 --> 00:18:56,240
tests

00:18:53,360 --> 00:18:58,880
and of course they are failing because

00:18:56,240 --> 00:19:02,080
there is no implementation

00:18:58,880 --> 00:19:11,520
yet so you see there's five expected but

00:19:02,080 --> 00:19:15,440
we just get undefined

00:19:11,520 --> 00:19:18,080
so let's implement this function

00:19:15,440 --> 00:19:20,799
we have this all set up so what i'm

00:19:18,080 --> 00:19:23,039
doing is i'm converting

00:19:20,799 --> 00:19:26,640
the arguments array to a proper array

00:19:23,039 --> 00:19:26,640
because a javascript

00:19:32,160 --> 00:19:38,720
and then i'm simply reducing the

00:19:35,360 --> 00:19:40,240
arguments down to a single digit by

00:19:38,720 --> 00:19:42,160
adding up the previous and the current

00:19:40,240 --> 00:19:45,360
simple reduce case

00:19:42,160 --> 00:19:47,600
and now the tests are passing or at

00:19:45,360 --> 00:19:49,280
least they should

00:19:47,600 --> 00:19:53,520
which of course they will because it's

00:19:49,280 --> 00:19:58,160
video yay

00:19:53,520 --> 00:20:00,320
so i now have these two changed files

00:19:58,160 --> 00:20:02,000
and i add them and i create a commit and

00:20:00,320 --> 00:20:02,720
now this is an important step because i

00:20:02,000 --> 00:20:07,840
talked about

00:20:02,720 --> 00:20:07,840
commit message conventions

00:20:10,080 --> 00:20:15,039
so this is a neat thing actually you can

00:20:13,360 --> 00:20:16,880
just type git commit and then your

00:20:15,039 --> 00:20:19,039
favorite editor opens and you can

00:20:16,880 --> 00:20:20,000
just write super verbose commit message

00:20:19,039 --> 00:20:21,600
if you like you just

00:20:20,000 --> 00:20:23,919
don't have you don't have to put them in

00:20:21,600 --> 00:20:24,720
this one line what we're doing is we're

00:20:23,919 --> 00:20:26,720
defining

00:20:24,720 --> 00:20:28,880
a type and this is a feature release

00:20:26,720 --> 00:20:30,640
because the function is a new feature

00:20:28,880 --> 00:20:32,240
and then we have a scope which is the

00:20:30,640 --> 00:20:33,840
sum function and then we describe what

00:20:32,240 --> 00:20:37,200
happens so we added the basic

00:20:33,840 --> 00:20:41,120
sum functionality and we save that

00:20:37,200 --> 00:20:41,120
commit message and push it up to github

00:20:45,039 --> 00:20:49,200
so yeah you can see i have created four

00:20:47,440 --> 00:20:51,600
commits before now i'm pushing that to

00:20:49,200 --> 00:20:51,600
github

00:20:51,760 --> 00:20:55,760
and now we are on travis and magically

00:20:53,919 --> 00:20:59,200
the build just started immediately

00:20:55,760 --> 00:21:02,400
i don't know what had happened and

00:20:59,200 --> 00:21:05,200
we see the tests are running

00:21:02,400 --> 00:21:06,960
and after the tests are running my

00:21:05,200 --> 00:21:10,080
module comes into play

00:21:06,960 --> 00:21:11,679
so what it's doing is it's analyzing all

00:21:10,080 --> 00:21:13,600
the commits that have happened

00:21:11,679 --> 00:21:16,080
since the last version or if there's no

00:21:13,600 --> 00:21:17,840
version yet all the versions and then it

00:21:16,080 --> 00:21:19,520
generates the change log from angular

00:21:17,840 --> 00:21:20,880
and then it sees okay there's a new

00:21:19,520 --> 00:21:24,000
feature version

00:21:20,880 --> 00:21:26,559
but in this case it's no version yet so

00:21:24,000 --> 00:21:28,240
it simply releases 1.0.0 exactly as i

00:21:26,559 --> 00:21:30,400
pointed out we just want to start with

00:21:28,240 --> 00:21:31,280
1.0.0 and you don't have to care about

00:21:30,400 --> 00:21:35,360
this

00:21:31,280 --> 00:21:39,520
so now it just published this to github

00:21:35,360 --> 00:21:42,640
including the changelog and also

00:21:39,520 --> 00:21:45,919
on npmjs.org

00:21:42,640 --> 00:21:48,480
we can see that there's the publish

00:21:45,919 --> 00:21:51,440
module and i guess you will all use it

00:21:48,480 --> 00:21:51,440
because it's so awesome

00:21:52,960 --> 00:21:56,480
let's get back to the tests now we want

00:21:55,440 --> 00:21:59,840
to add a feature

00:21:56,480 --> 00:22:02,240
so we just we don't just want to add up

00:21:59,840 --> 00:22:04,159
numbers but also numbers that are

00:22:02,240 --> 00:22:05,360
stringified so here's a test case for

00:22:04,159 --> 00:22:08,400
that we sum up

00:22:05,360 --> 00:22:13,840
one and a string four and that should

00:22:08,400 --> 00:22:13,840
give us five

00:22:16,080 --> 00:22:27,840
you know what i'll just switch to

00:22:19,840 --> 00:22:27,840
vlc player this is annoying

00:22:38,840 --> 00:22:41,840
so

00:22:53,280 --> 00:22:58,559
so tests are failing now we're going

00:22:56,720 --> 00:23:02,080
back to the implementation

00:22:58,559 --> 00:23:04,080
where we now add an initial sorry

00:23:02,080 --> 00:23:06,880
that should not happen you could have

00:23:04,080 --> 00:23:06,880
said that earlier

00:23:07,120 --> 00:23:11,120
so i've just added an initial value of

00:23:09,440 --> 00:23:14,080
zero to the reduced case

00:23:11,120 --> 00:23:14,640
and i'm converting the current number to

00:23:14,080 --> 00:23:17,360
a

00:23:14,640 --> 00:23:19,200
number now the tests are passing and

00:23:17,360 --> 00:23:23,760
just like before

00:23:19,200 --> 00:23:26,960
i'm committing this

00:23:23,760 --> 00:23:30,000
with the feature type and it's the sum

00:23:26,960 --> 00:23:32,240
scope and i say okay now stringify

00:23:30,000 --> 00:23:36,240
numbers are supported

00:23:32,240 --> 00:23:38,640
and now is the time where

00:23:36,240 --> 00:23:41,600
i remember that i actually have to add

00:23:38,640 --> 00:23:41,600
the files first

00:23:44,720 --> 00:23:51,840
and then i push it up ah this is bad

00:23:57,039 --> 00:24:04,960
and now i have version 1.0.0 on github

00:24:01,600 --> 00:24:08,799
and there's a change log again and

00:24:04,960 --> 00:24:11,279
on npm there's the new version 1.1.0

00:24:08,799 --> 00:24:13,440
just magically without me having to

00:24:11,279 --> 00:24:16,720
waste any resources on that

00:24:13,440 --> 00:24:20,400
or just to make a wrong decision so

00:24:16,720 --> 00:24:23,039
next up is a sum should have at least

00:24:20,400 --> 00:24:23,919
two arguments so i'm changing the tests

00:24:23,039 --> 00:24:26,159
here that

00:24:23,919 --> 00:24:28,400
if you just input one argument it

00:24:26,159 --> 00:24:32,400
shouldn't give you back the argument

00:24:28,400 --> 00:24:34,480
but it should throw an error

00:24:32,400 --> 00:24:35,760
so that the person who is using this

00:24:34,480 --> 00:24:37,360
module knows that they are probably

00:24:35,760 --> 00:24:38,400
doing something wrong because there's no

00:24:37,360 --> 00:24:41,520
point in

00:24:38,400 --> 00:24:42,320
summing up just one number and again the

00:24:41,520 --> 00:24:45,679
tests

00:24:42,320 --> 00:24:49,520
they're failing now let's implement this

00:24:45,679 --> 00:24:49,520
it's simple

00:24:52,080 --> 00:24:55,919
it's a simple if case so if

00:24:54,520 --> 00:24:59,360
arguments.length

00:24:55,919 --> 00:25:02,320
is smaller than 2 i just

00:24:59,360 --> 00:25:02,320
throw a new error

00:25:05,760 --> 00:25:10,480
again the tests are now passing and then

00:25:11,200 --> 00:25:17,200
i create my new commit message which

00:25:14,799 --> 00:25:20,240
again is a feature it's about the sum

00:25:17,200 --> 00:25:23,760
and it now throws an error messages for

00:25:20,240 --> 00:25:25,039
less than two arguments and now if you

00:25:23,760 --> 00:25:27,919
have

00:25:25,039 --> 00:25:28,320
looked closely this is a breaking change

00:25:27,919 --> 00:25:30,080
but

00:25:28,320 --> 00:25:31,360
because before if you were relying on

00:25:30,080 --> 00:25:34,640
the behavior of just

00:25:31,360 --> 00:25:36,080
giving back the one argument then

00:25:34,640 --> 00:25:38,159
you cannot use that anymore because

00:25:36,080 --> 00:25:40,480
suddenly it will throw an error

00:25:38,159 --> 00:25:41,919
and this is why i'll um declare this

00:25:40,480 --> 00:25:44,559
breaking change with the angular commit

00:25:41,919 --> 00:25:47,120
message conventions in this commit

00:25:44,559 --> 00:25:47,760
except for i'm doing not because this is

00:25:47,120 --> 00:25:49,919
boring

00:25:47,760 --> 00:25:52,080
like this is a breaking change and i'm

00:25:49,919 --> 00:25:54,480
not declaring it because i'm

00:25:52,080 --> 00:25:56,480
just like everyone else and now i'm

00:25:54,480 --> 00:25:59,120
going to publish this

00:25:56,480 --> 00:25:59,120
to github

00:26:04,480 --> 00:26:12,240
so yeah and again the travis built

00:26:09,600 --> 00:26:14,240
and we see that the actual tests of the

00:26:12,240 --> 00:26:17,760
module of course passed

00:26:14,240 --> 00:26:20,159
but the deploy script

00:26:17,760 --> 00:26:21,279
checks out the test folder of the latest

00:26:20,159 --> 00:26:22,880
release version

00:26:21,279 --> 00:26:24,720
so there's this breaking change

00:26:22,880 --> 00:26:26,720
detection and

00:26:24,720 --> 00:26:28,960
it checks out the old test folder the

00:26:26,720 --> 00:26:30,000
old package json installs the old dev

00:26:28,960 --> 00:26:31,919
dependencies

00:26:30,000 --> 00:26:33,600
and basically runs your old test suite

00:26:31,919 --> 00:26:35,440
against the current version and now

00:26:33,600 --> 00:26:37,600
suddenly the tests are failing

00:26:35,440 --> 00:26:38,480
which is a detected breaking change and

00:26:37,600 --> 00:26:41,039
that's what this

00:26:38,480 --> 00:26:42,080
the output isn't optimized yet but it's

00:26:41,039 --> 00:26:45,760
showing you that there's an

00:26:42,080 --> 00:26:47,120
error and that the verification failed

00:26:45,760 --> 00:26:48,799
so this time

00:26:47,120 --> 00:26:50,480
this feature wasn't published because

00:26:48,799 --> 00:26:52,159
there's an undeclared braking change and

00:26:50,480 --> 00:26:54,720
if you look at the github releases

00:26:52,159 --> 00:26:55,600
thing there's no new version even if i

00:26:54,720 --> 00:26:59,520
reload twice

00:26:55,600 --> 00:27:06,880
and also on npm there is no new version

00:26:59,520 --> 00:27:10,240
which is a good thing

00:27:06,880 --> 00:27:11,279
so it didn't just publish a major new

00:27:10,240 --> 00:27:14,400
version

00:27:11,279 --> 00:27:16,240
on its own because without

00:27:14,400 --> 00:27:18,320
the instructions on how to upgrade this

00:27:16,240 --> 00:27:20,080
would be useless like as i said

00:27:18,320 --> 00:27:21,440
a breaking change without migration

00:27:20,080 --> 00:27:24,000
instructions is worthless

00:27:21,440 --> 00:27:25,120
so i've just pasted in the breaking

00:27:24,000 --> 00:27:28,799
change declaration

00:27:25,120 --> 00:27:32,640
i pushed it back to github

00:27:28,799 --> 00:27:33,679
and now there's version 2.0.0 exactly as

00:27:32,640 --> 00:27:36,080
it should be

00:27:33,679 --> 00:27:37,600
and it doesn't matter it's 2.0.0 and it

00:27:36,080 --> 00:27:41,360
has five commits but

00:27:37,600 --> 00:27:44,480
this does not matter okay so

00:27:41,360 --> 00:27:47,200
here is the module it got published

00:27:44,480 --> 00:27:48,080
entirely without me caring about it so

00:27:47,200 --> 00:27:52,799
actually i cared about

00:27:48,080 --> 00:27:52,799
it but not in this precise

00:28:00,840 --> 00:28:05,120
moment

00:28:02,640 --> 00:28:05,760
so the module you just saw is semantic

00:28:05,120 --> 00:28:08,159
release

00:28:05,760 --> 00:28:09,840
you can find it on github and you can

00:28:08,159 --> 00:28:12,960
also find it on npm

00:28:09,840 --> 00:28:15,520
and it's published using itself

00:28:12,960 --> 00:28:16,000
so i hope there are no breaking changes

00:28:15,520 --> 00:28:19,279
biting your

00:28:16,000 --> 00:28:21,840
ass or something and

00:28:19,279 --> 00:28:22,320
i i really want to ask you to try this

00:28:21,840 --> 00:28:25,039
out

00:28:22,320 --> 00:28:26,559
and to use this for your own packages

00:28:25,039 --> 00:28:28,320
and also

00:28:26,559 --> 00:28:30,000
the commit message conventions are the

00:28:28,320 --> 00:28:32,240
angular commit message conventions and

00:28:30,000 --> 00:28:34,320
the changelog generation is the angular

00:28:32,240 --> 00:28:36,799
changelog but you can just plug in

00:28:34,320 --> 00:28:38,159
whatever you want so you can

00:28:36,799 --> 00:28:40,720
define your own commit message

00:28:38,159 --> 00:28:43,120
convention style and base it on

00:28:40,720 --> 00:28:44,080
that or you can modify the release the

00:28:43,120 --> 00:28:46,240
changelog before

00:28:44,080 --> 00:28:47,679
it's published so you can i don't know

00:28:46,240 --> 00:28:49,840
add a funny gif

00:28:47,679 --> 00:28:51,840
before it's published to github you can

00:28:49,840 --> 00:28:54,880
basically plug in whatever you want

00:28:51,840 --> 00:28:58,159
and this is

00:28:54,880 --> 00:28:58,720
ci server agnostic so you can use travis

00:28:58,159 --> 00:29:00,720
ci

00:28:58,720 --> 00:29:02,559
which you should because they're awesome

00:29:00,720 --> 00:29:05,120
but you can use other things and

00:29:02,559 --> 00:29:07,760
you can contribute configuration for

00:29:05,120 --> 00:29:10,399
other services and also you can just try

00:29:07,760 --> 00:29:11,360
uh try it out or see if you can find

00:29:10,399 --> 00:29:14,720
bugs in there

00:29:11,360 --> 00:29:15,840
so we really need to invest more in this

00:29:14,720 --> 00:29:18,720
topic because

00:29:15,840 --> 00:29:20,720
december is too powerful and important

00:29:18,720 --> 00:29:23,279
for humans to once more ruin

00:29:20,720 --> 00:29:23,279
everything

00:29:24,720 --> 00:29:27,840
thank you

00:29:38,799 --> 00:29:43,440
oh that was so good uh so now we're

00:29:41,520 --> 00:29:44,240
going to argue about software are we

00:29:43,440 --> 00:29:46,240
right

00:29:44,240 --> 00:29:48,159
i mean are there any questions i didn't

00:29:46,240 --> 00:29:49,440
see any on twitter so i'm assuming there

00:29:48,159 --> 00:29:52,880
are plenty

00:29:49,440 --> 00:29:52,880
right here second row

00:29:53,760 --> 00:29:57,200
hey thank you uh what do you think about

00:29:56,159 --> 00:30:00,000
shrink wrapping

00:29:57,200 --> 00:30:00,880
your npm depths yeah that's what you

00:30:00,000 --> 00:30:03,200
should do if you're

00:30:00,880 --> 00:30:05,120
developing an application so if you're

00:30:03,200 --> 00:30:06,240
shrink wrapping your modules that are

00:30:05,120 --> 00:30:08,960
supposed to be used by

00:30:06,240 --> 00:30:10,399
other modules then the version lock

00:30:08,960 --> 00:30:12,240
appears so if there are new bug fixes

00:30:10,399 --> 00:30:13,600
for security fixes they can trickle down

00:30:12,240 --> 00:30:16,080
the dependency tree but if you're

00:30:13,600 --> 00:30:18,320
building your own application you should

00:30:16,080 --> 00:30:19,840
of course use shrink wrap so i'll

00:30:18,320 --> 00:30:21,120
explain it for everyone shrink wrap

00:30:19,840 --> 00:30:23,440
basically

00:30:21,120 --> 00:30:25,279
looks at your repository and writes your

00:30:23,440 --> 00:30:27,520
current state of the dependency tree

00:30:25,279 --> 00:30:30,159
into a file and whenever you install it

00:30:27,520 --> 00:30:31,840
you just get that exact copy of the

00:30:30,159 --> 00:30:36,000
dependency tree so you can

00:30:31,840 --> 00:30:38,000
run into arbitrary december fails

00:30:36,000 --> 00:30:39,760
if you want to build an application or

00:30:38,000 --> 00:30:41,760
deploy a new application so

00:30:39,760 --> 00:30:44,880
yeah that's what you should use for your

00:30:41,760 --> 00:30:44,880
application thank you

00:30:45,200 --> 00:30:51,039
more questions there is one in the

00:30:48,840 --> 00:30:53,440
middle

00:30:51,039 --> 00:30:56,000
i think like the upper section is

00:30:53,440 --> 00:30:56,000
sleeping

00:30:58,000 --> 00:31:03,840
hi so in your presentation you've

00:31:00,640 --> 00:31:06,720
established a way to remove humans from

00:31:03,840 --> 00:31:08,640
uploading packages and versioning but

00:31:06,720 --> 00:31:10,240
what do you propose to do about people

00:31:08,640 --> 00:31:12,799
writing change logs and

00:31:10,240 --> 00:31:14,720
commit messages i mean forget changelogs

00:31:12,799 --> 00:31:16,559
commit messages

00:31:14,720 --> 00:31:18,080
yeah so that's an important part you

00:31:16,559 --> 00:31:22,559
need to make this a process

00:31:18,080 --> 00:31:23,840
of your reviewing pull requests all team

00:31:22,559 --> 00:31:24,799
members have to agree on these

00:31:23,840 --> 00:31:26,640
conventions

00:31:24,799 --> 00:31:28,240
that's true that they're an important

00:31:26,640 --> 00:31:30,960
and integral part of this

00:31:28,240 --> 00:31:32,240
that's also why i came up with the

00:31:30,960 --> 00:31:35,360
breaking change detection

00:31:32,240 --> 00:31:37,200
thing to kind of have a security net if

00:31:35,360 --> 00:31:38,720
people don't follow the commit message

00:31:37,200 --> 00:31:41,519
conventions but of course you need

00:31:38,720 --> 00:31:42,480
to have those correct but the thing is

00:31:41,519 --> 00:31:44,960
that

00:31:42,480 --> 00:31:46,240
you just have to argue about the one

00:31:44,960 --> 00:31:47,120
change in your code and you can't

00:31:46,240 --> 00:31:50,240
describe it

00:31:47,120 --> 00:31:51,279
so if you have like you have before

00:31:50,240 --> 00:31:53,519
you have a new version and you're

00:31:51,279 --> 00:31:54,960
breaking something and like the angular

00:31:53,519 --> 00:31:56,320
team you can just write it's a breaking

00:31:54,960 --> 00:31:57,120
change but you don't use the correct

00:31:56,320 --> 00:31:59,039
version then

00:31:57,120 --> 00:32:00,159
you can't pretend you're smart or

00:31:59,039 --> 00:32:02,320
something because

00:32:00,159 --> 00:32:03,760
we're doing versions differently but in

00:32:02,320 --> 00:32:05,519
this

00:32:03,760 --> 00:32:07,760
in this setup if you have a breaking

00:32:05,519 --> 00:32:09,760
change and you don't declare it that

00:32:07,760 --> 00:32:10,799
you cannot argue being smart or anything

00:32:09,760 --> 00:32:14,080
it's just

00:32:10,799 --> 00:32:16,159
not being nice to your users so yeah you

00:32:14,080 --> 00:32:20,320
should you should um

00:32:16,159 --> 00:32:22,559
really get the commit messages right but

00:32:20,320 --> 00:32:24,240
the thing is that's not a matter of

00:32:22,559 --> 00:32:26,960
using semantic release because

00:32:24,240 --> 00:32:28,640
you should do this anyway so writing

00:32:26,960 --> 00:32:30,159
precisely what you have done

00:32:28,640 --> 00:32:32,000
is really important and you shouldn't

00:32:30,159 --> 00:32:34,559
just write changed

00:32:32,000 --> 00:32:36,159
something or use law commits to just

00:32:34,559 --> 00:32:38,320
dump anything in

00:32:36,159 --> 00:32:40,640
um writing what you have changed is

00:32:38,320 --> 00:32:42,720
really important to communicate with the

00:32:40,640 --> 00:32:44,640
other team members and also open source

00:32:42,720 --> 00:32:49,279
compute contributors potential

00:32:44,640 --> 00:32:49,279
ones thank you

00:32:50,320 --> 00:32:55,600
so the the fact of the matter is that

00:32:53,200 --> 00:32:58,799
versioning is also important to humans

00:32:55,600 --> 00:33:02,000
like for example web 2.0 was a huge

00:32:58,799 --> 00:33:04,399
buzzword so if you propose that

00:33:02,000 --> 00:33:06,720
versioning should be only for robots

00:33:04,399 --> 00:33:09,679
what would you propose for humans

00:33:06,720 --> 00:33:11,279
so as i said we can't just use names and

00:33:09,679 --> 00:33:12,960
that's not only the package name for

00:33:11,279 --> 00:33:16,240
example there are things like

00:33:12,960 --> 00:33:19,600
release names which some people do

00:33:16,240 --> 00:33:22,960
so after the version was published

00:33:19,600 --> 00:33:24,559
and you see sorry that this was an

00:33:22,960 --> 00:33:25,519
important commit or a new feature you

00:33:24,559 --> 00:33:27,440
can just attach

00:33:25,519 --> 00:33:29,679
release names to your versions and then

00:33:27,440 --> 00:33:31,760
just write a blog post about

00:33:29,679 --> 00:33:33,519
module xy set and then give it an animal

00:33:31,760 --> 00:33:34,000
name so you have something to talk about

00:33:33,519 --> 00:33:36,399
that

00:33:34,000 --> 00:33:38,720
but that doesn't necessarily have to be

00:33:36,399 --> 00:33:40,720
the version number

00:33:38,720 --> 00:33:42,960
i think what we're getting at here is

00:33:40,720 --> 00:33:43,760
like we should use baluster galactica

00:33:42,960 --> 00:33:46,000
ship names

00:33:43,760 --> 00:33:47,440
for you know names of releases instead

00:33:46,000 --> 00:33:49,120
of numbers so like

00:33:47,440 --> 00:33:51,039
just go home and do that that's the

00:33:49,120 --> 00:33:54,080
thing that's what we did for

00:33:51,039 --> 00:33:56,640
for hoodie we just generated a

00:33:54,080 --> 00:33:58,240
random animal and then we put that

00:33:56,640 --> 00:33:59,919
animal against the giphy api

00:33:58,240 --> 00:34:02,200
and so we had the release notes with an

00:33:59,919 --> 00:34:03,600
animal name and also a matching

00:34:02,200 --> 00:34:06,960
[Music]

00:34:03,600 --> 00:34:09,119
animal gif which is awesome um

00:34:06,960 --> 00:34:11,040
any more questions i think i saw yeah

00:34:09,119 --> 00:34:13,520
there's a hand over there

00:34:11,040 --> 00:34:13,520
the middle

00:34:14,240 --> 00:34:21,839
and there's another hand at the very end

00:34:17,359 --> 00:34:21,839
i can totally see

00:34:29,839 --> 00:34:32,399
who's first

00:34:32,879 --> 00:34:35,040
where

00:34:36,159 --> 00:34:39,839
um how should we treat uh undocumented

00:34:39,200 --> 00:34:42,879
slash

00:34:39,839 --> 00:34:43,760
on tested features so for example in

00:34:42,879 --> 00:34:46,800
your

00:34:43,760 --> 00:34:48,639
quick sum module uh somebody might be

00:34:46,800 --> 00:34:51,679
using it to concat strings

00:34:48,639 --> 00:34:53,359
before you release the first feature and

00:34:51,679 --> 00:34:55,839
that would be a breaking change but

00:34:53,359 --> 00:34:57,200
you didn't account for that yeah that's

00:34:55,839 --> 00:35:00,160
the december

00:34:57,200 --> 00:35:01,440
spec is actually about the public api

00:35:00,160 --> 00:35:03,760
and that's a bit difficult because

00:35:01,440 --> 00:35:07,839
public api isn't very much

00:35:03,760 --> 00:35:11,440
a defined term so some people say it's

00:35:07,839 --> 00:35:12,000
um what's documented and other people

00:35:11,440 --> 00:35:14,240
say

00:35:12,000 --> 00:35:15,280
it's that what's covered by tests but

00:35:14,240 --> 00:35:17,200
i'd say

00:35:15,280 --> 00:35:20,160
if you're in doubt just increase the

00:35:17,200 --> 00:35:20,160
major version number

00:35:20,880 --> 00:35:25,359
because i if i can add to that what we

00:35:23,440 --> 00:35:27,119
are having now is that we simply cannot

00:35:25,359 --> 00:35:28,560
update modules we have to do everything

00:35:27,119 --> 00:35:30,800
manually and we have to

00:35:28,560 --> 00:35:32,079
check everything again and again and

00:35:30,800 --> 00:35:34,000
again so

00:35:32,079 --> 00:35:35,760
this is the current state having too

00:35:34,000 --> 00:35:36,480
many major versions isn't a thing

00:35:35,760 --> 00:35:38,800
because

00:35:36,480 --> 00:35:39,760
manually updating packages is what we

00:35:38,800 --> 00:35:43,280
are currently at

00:35:39,760 --> 00:35:44,000
so if you just use major versions a lot

00:35:43,280 --> 00:35:47,200
that's no

00:35:44,000 --> 00:35:47,200
problem or it shouldn't be

00:35:48,000 --> 00:35:51,520
uh hi thanks for the presentation one

00:35:50,800 --> 00:35:54,320
question

00:35:51,520 --> 00:35:55,119
uh if we would use this semantic version

00:35:54,320 --> 00:35:57,760
and

00:35:55,119 --> 00:35:59,119
we would increase the first number the

00:35:57,760 --> 00:36:01,200
mayor version every time

00:35:59,119 --> 00:36:03,200
we would have really huge numbers and

00:36:01,200 --> 00:36:04,480
you said that it's okay

00:36:03,200 --> 00:36:06,720
we don't want to do it because of the

00:36:04,480 --> 00:36:09,119
emotions and marketing but

00:36:06,720 --> 00:36:10,800
marketing is part of the packages you

00:36:09,119 --> 00:36:13,040
know when you

00:36:10,800 --> 00:36:14,640
you know try to search some markdown

00:36:13,040 --> 00:36:17,040
bouncer and you have

00:36:14,640 --> 00:36:18,400
i don't know 1000 results because we are

00:36:17,040 --> 00:36:20,079
javascript community so

00:36:18,400 --> 00:36:21,680
there's so many packages and libraries

00:36:20,079 --> 00:36:24,560
for everything

00:36:21,680 --> 00:36:25,280
you also check the number of you know

00:36:24,560 --> 00:36:28,880
comments

00:36:25,280 --> 00:36:30,800
and version and probably the date and

00:36:28,880 --> 00:36:32,160
release history and everything so

00:36:30,800 --> 00:36:32,640
because you want to be sure that it

00:36:32,160 --> 00:36:34,480
probably

00:36:32,640 --> 00:36:35,760
someone maintains it and it's you know

00:36:34,480 --> 00:36:38,800
it's up to date so

00:36:35,760 --> 00:36:40,000
it's just pardon you know part of the

00:36:38,800 --> 00:36:43,119
package is also marketing

00:36:40,000 --> 00:36:43,839
so yeah so what i said first you can use

00:36:43,119 --> 00:36:45,680
names for

00:36:43,839 --> 00:36:47,040
release names for marketing and also i

00:36:45,680 --> 00:36:49,359
guess it's just an

00:36:47,040 --> 00:36:50,640
arbitrary number so if people aren't

00:36:49,359 --> 00:36:52,480
following december or

00:36:50,640 --> 00:36:54,079
what precisely are you reading from it

00:36:52,480 --> 00:36:56,960
so it's just just a feeling

00:36:54,079 --> 00:36:58,400
so for example most excellent modules

00:36:56,960 --> 00:37:02,000
like browserify

00:36:58,400 --> 00:37:06,079
or harpy are at 8.0 or 9.0

00:37:02,000 --> 00:37:08,079
or iojs released the version 2.0 just

00:37:06,079 --> 00:37:10,320
i don't know not even half a year after

00:37:08,079 --> 00:37:12,079
the first release and

00:37:10,320 --> 00:37:13,920
this is an arbitrary feeling you're

00:37:12,079 --> 00:37:16,480
based on anyways

00:37:13,920 --> 00:37:19,200
and you think you can read something

00:37:16,480 --> 00:37:21,119
from it but you can't

00:37:19,200 --> 00:37:23,280
okay we have a last question from

00:37:21,119 --> 00:37:26,480
twitter not even from my phone

00:37:23,280 --> 00:37:29,760
um could we use test instead of version

00:37:26,480 --> 00:37:29,760
numbers hi stefan

00:37:29,839 --> 00:37:35,119
for example my dependencies say use

00:37:31,839 --> 00:37:36,960
latest code that passes these tests

00:37:35,119 --> 00:37:39,440
yeah that would be as i said you have to

00:37:36,960 --> 00:37:41,119
listen to stefan he's just

00:37:39,440 --> 00:37:43,280
if you think you're on to something he's

00:37:41,119 --> 00:37:46,320
always on the next step of things so

00:37:43,280 --> 00:37:47,200
yeah using tests for for versions that's

00:37:46,320 --> 00:37:51,200
also great

00:37:47,200 --> 00:37:53,599
yeah definitely okay um we have a

00:37:51,200 --> 00:37:56,000
coffee break upcoming so upstairs can

00:37:53,599 --> 00:37:58,320
wake up

00:37:56,000 --> 00:38:00,079
and um yeah i'm really happy that you

00:37:58,320 --> 00:38:02,480
embarked on a mission of like

00:38:00,079 --> 00:38:04,800
tackling this amazingly controversial

00:38:02,480 --> 00:38:05,520
topic of versioning and like semantics

00:38:04,800 --> 00:38:08,000
and software

00:38:05,520 --> 00:38:09,520
and you did it so well so i hope

00:38:08,000 --> 00:38:10,800
everyone is going to try that because

00:38:09,520 --> 00:38:13,280
i'm excited about trying it

00:38:10,800 --> 00:38:15,440
and i would try it right now if i could

00:38:13,280 --> 00:38:18,320
but i'm busy i'm saying

00:38:15,440 --> 00:38:18,960
uh so yeah thank you stefan so much and

00:38:18,320 --> 00:38:32,400
we all

00:38:18,960 --> 00:38:32,400

YouTube URL: https://www.youtube.com/watch?v=IUke0AcN_rY


