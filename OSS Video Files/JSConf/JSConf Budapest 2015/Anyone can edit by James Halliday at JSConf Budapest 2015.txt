Title: Anyone can edit by James Halliday at JSConf Budapest 2015
Publication date: 2020-09-23
Playlist: JSConf Budapest 2015
Description: 
	http://jsconfbp.com/#substack

Wikis are a powerful data structure for collaboratively editing documents, but the data structures and social dynamics of wikis can be applied to other kinds of applications outside the narrow domain of encylopedic content.
Captions: 
	00:00:13,040 --> 00:00:16,320
hello

00:00:13,840 --> 00:00:17,840
is the audio good great all right so

00:00:16,320 --> 00:00:19,760
hello i'm trying to

00:00:17,840 --> 00:00:21,439
try very hard not to fall asleep during

00:00:19,760 --> 00:00:25,119
my own presentation

00:00:21,439 --> 00:00:28,840
but no guarantees so

00:00:25,119 --> 00:00:31,679
this talk is called anyone can edit

00:00:28,840 --> 00:00:34,800
and so it's this

00:00:31,679 --> 00:00:35,600
simple ridiculous idea what if anyone

00:00:34,800 --> 00:00:39,040
could edit

00:00:35,600 --> 00:00:40,239
anything so what stops us from attaining

00:00:39,040 --> 00:00:43,440
that utopian

00:00:40,239 --> 00:00:44,320
vision of the future well access to

00:00:43,440 --> 00:00:47,840
technology

00:00:44,320 --> 00:00:50,480
copyright drm tech literacy

00:00:47,840 --> 00:00:52,160
free time resources these are all

00:00:50,480 --> 00:00:53,520
annoying problems that are getting in

00:00:52,160 --> 00:00:57,039
the way of our

00:00:53,520 --> 00:00:59,120
our hacker dream of being able to modify

00:00:57,039 --> 00:01:02,800
everything we see in in our environment

00:00:59,120 --> 00:01:05,519
to to our own fulfillment

00:01:02,800 --> 00:01:05,840
so there's this there's this kind of i

00:01:05,519 --> 00:01:10,400
mean

00:01:05,840 --> 00:01:12,799
it's it's a good attempt i think but

00:01:10,400 --> 00:01:14,799
there's this phrase you own your data

00:01:12,799 --> 00:01:16,240
that has come about lately but i think

00:01:14,799 --> 00:01:19,759
it doesn't really go far enough

00:01:16,240 --> 00:01:21,439
and but i'll get i'll get a little more

00:01:19,759 --> 00:01:22,080
into that later the problem is the own

00:01:21,439 --> 00:01:23,600
part

00:01:22,080 --> 00:01:25,680
i don't i don't really like that part as

00:01:23,600 --> 00:01:28,799
much so wikis are pretty cool

00:01:25,680 --> 00:01:29,920
i i quite like wikis um because it's

00:01:28,799 --> 00:01:31,759
just a website

00:01:29,920 --> 00:01:33,280
anyone can go to it pretty much who has

00:01:31,759 --> 00:01:36,079
a computer and

00:01:33,280 --> 00:01:37,200
also usually anyone can edit that wiki

00:01:36,079 --> 00:01:39,520
so

00:01:37,200 --> 00:01:40,400
often without even making an account and

00:01:39,520 --> 00:01:42,159
this works

00:01:40,400 --> 00:01:44,479
pretty well most of the time you just

00:01:42,159 --> 00:01:46,320
click edit everyone can participate

00:01:44,479 --> 00:01:48,320
it's a lot like npm there's very low

00:01:46,320 --> 00:01:51,840
friction to making content

00:01:48,320 --> 00:01:54,560
to storing that content and

00:01:51,840 --> 00:01:55,360
collecting that content so that everyone

00:01:54,560 --> 00:01:57,119
basically

00:01:55,360 --> 00:01:59,600
has it it doesn't really belong to any

00:01:57,119 --> 00:02:01,119
particular person

00:01:59,600 --> 00:02:03,280
i think wikis are also a really

00:02:01,119 --> 00:02:04,479
interesting data model for applications

00:02:03,280 --> 00:02:07,520
so i built a few things with

00:02:04,479 --> 00:02:10,560
with wikis as the basic approach

00:02:07,520 --> 00:02:11,039
and i think they actually work a lot

00:02:10,560 --> 00:02:14,160
better

00:02:11,039 --> 00:02:16,160
as a generic data model than like

00:02:14,160 --> 00:02:17,280
source of truth aloe wikipedia for

00:02:16,160 --> 00:02:19,360
example

00:02:17,280 --> 00:02:20,400
um so here's here's some nice things

00:02:19,360 --> 00:02:22,319
that wikis give you

00:02:20,400 --> 00:02:24,400
that are quite interesting so it's a

00:02:22,319 --> 00:02:27,520
historical database usually like git

00:02:24,400 --> 00:02:31,360
or couchdb and you get activity feeds

00:02:27,520 --> 00:02:33,680
usually for free so we have this thing

00:02:31,360 --> 00:02:35,760
oakland wiki in oakland where i live and

00:02:33,680 --> 00:02:37,840
it's fantastic it's just a wiki about a

00:02:35,760 --> 00:02:39,599
bunch of random stuff in oakland

00:02:37,840 --> 00:02:41,440
like some important stuff but a lot of

00:02:39,599 --> 00:02:44,720
just really silly stuff

00:02:41,440 --> 00:02:46,800
and that silliness kind of helps but

00:02:44,720 --> 00:02:48,480
what makes it work is the activity feed

00:02:46,800 --> 00:02:50,480
the activity feed is just a list of

00:02:48,480 --> 00:02:51,440
what's happened recently it's the recent

00:02:50,480 --> 00:02:54,000
changes

00:02:51,440 --> 00:02:55,920
section of the website and i really

00:02:54,000 --> 00:02:57,280
really like that data model because

00:02:55,920 --> 00:02:59,599
if you have a website like that it's

00:02:57,280 --> 00:03:02,560
very self-policing so

00:02:59,599 --> 00:03:03,280
the users sort of see what happens and

00:03:02,560 --> 00:03:06,720
everyone is

00:03:03,280 --> 00:03:09,360
kind of at the same level of empowerment

00:03:06,720 --> 00:03:11,120
so you know if someone put some spam

00:03:09,360 --> 00:03:12,080
someone else can just go in and clean it

00:03:11,120 --> 00:03:14,000
up and it

00:03:12,080 --> 00:03:15,680
it usually works if you have a enough

00:03:14,000 --> 00:03:19,200
people willing to

00:03:15,680 --> 00:03:22,080
to protect that community resource so

00:03:19,200 --> 00:03:23,840
i've got this module called wikidb that

00:03:22,080 --> 00:03:25,120
you can use for wikilike data so

00:03:23,840 --> 00:03:28,480
anything that you want to feed

00:03:25,120 --> 00:03:32,000
for or you need to do just

00:03:28,480 --> 00:03:32,959
basic append only kind of uh historical

00:03:32,000 --> 00:03:36,560
data sets

00:03:32,959 --> 00:03:39,200
so let's hop into an example

00:03:36,560 --> 00:03:39,680
so uh there's an api and a command line

00:03:39,200 --> 00:03:41,519
version

00:03:39,680 --> 00:03:44,080
it's all done with level db which is

00:03:41,519 --> 00:03:45,200
nice so you can just npm install dash g

00:03:44,080 --> 00:03:47,120
wikidb

00:03:45,200 --> 00:03:49,040
and here's here's an example of how you

00:03:47,120 --> 00:03:51,120
might use it so we'll give it a test

00:03:49,040 --> 00:03:52,799
directory to start with

00:03:51,120 --> 00:03:54,640
um let me just make sure that doesn't

00:03:52,799 --> 00:03:57,280
exist first

00:03:54,640 --> 00:03:59,200
okay so you do wikidb and give it a

00:03:57,280 --> 00:04:00,879
directory and then i can do create

00:03:59,200 --> 00:04:03,360
and give it a key name so the key name

00:04:00,879 --> 00:04:06,560
would be like the page

00:04:03,360 --> 00:04:07,040
so if i create a page called cats and i

00:04:06,560 --> 00:04:10,560
echo

00:04:07,040 --> 00:04:12,799
meow then i get back a hash

00:04:10,560 --> 00:04:14,959
so this hash is actually the hash of

00:04:12,799 --> 00:04:18,400
that content

00:04:14,959 --> 00:04:20,560
um well it's probably 256

00:04:18,400 --> 00:04:21,759
or 512. anyways just trust me that it's

00:04:20,560 --> 00:04:23,280
the hash of the content

00:04:21,759 --> 00:04:24,240
oh i think it includes the metadata

00:04:23,280 --> 00:04:25,840
that's why i can't do it on the command

00:04:24,240 --> 00:04:29,520
line anyways

00:04:25,840 --> 00:04:31,360
what we have with wikidb now is

00:04:29,520 --> 00:04:32,880
i can run the heads command which is

00:04:31,360 --> 00:04:36,880
like

00:04:32,880 --> 00:04:40,560
um well hang on heads of

00:04:36,880 --> 00:04:43,919
cats and i get back this hash

00:04:40,560 --> 00:04:45,680
and if i make a new update what i can do

00:04:43,919 --> 00:04:49,520
maybe i want to uppercase because the

00:04:45,680 --> 00:04:49,520
cat is getting quite angry now

00:04:49,680 --> 00:04:53,040
so hang on

00:04:54,240 --> 00:05:01,680
whoa i lost my cursor so i can do

00:04:57,759 --> 00:05:06,400
heads of garb hang on create

00:05:01,680 --> 00:05:08,320
cats and if i have the heads

00:05:06,400 --> 00:05:09,440
i can give it the previous document so i

00:05:08,320 --> 00:05:14,880
do dash dash

00:05:09,440 --> 00:05:14,880
equals and this hash and now if i run

00:05:16,400 --> 00:05:19,840
okay so now get a new hash and if i run

00:05:18,320 --> 00:05:22,080
the heads command again

00:05:19,840 --> 00:05:24,639
i get the updated hash what's cool

00:05:22,080 --> 00:05:26,720
though is that if i

00:05:24,639 --> 00:05:28,080
if i'm doing that concurrently across a

00:05:26,720 --> 00:05:31,199
lot of systems

00:05:28,080 --> 00:05:32,080
uh the the data model itself for this

00:05:31,199 --> 00:05:33,600
wiki database

00:05:32,080 --> 00:05:35,360
doesn't really care that there might be

00:05:33,600 --> 00:05:37,360
conflicting versions it really doesn't

00:05:35,360 --> 00:05:39,759
have a conception of that idea

00:05:37,360 --> 00:05:41,440
so how that might show up is if i create

00:05:39,759 --> 00:05:43,120
another document again that points back

00:05:41,440 --> 00:05:46,520
at the first document

00:05:43,120 --> 00:05:49,680
so echo

00:05:46,520 --> 00:05:51,199
conflicts even though those don't exist

00:05:49,680 --> 00:05:53,440
in this database

00:05:51,199 --> 00:05:55,039
then if i run the heads command again i

00:05:53,440 --> 00:05:56,639
get both documents

00:05:55,039 --> 00:05:58,880
and if i want to reconcile those

00:05:56,639 --> 00:06:02,080
documents all that i have to do

00:05:58,880 --> 00:06:06,800
is point back at both of them in time

00:06:02,080 --> 00:06:09,600
like this

00:06:06,800 --> 00:06:10,479
so now if i run heads uh there's just a

00:06:09,600 --> 00:06:13,600
single head

00:06:10,479 --> 00:06:16,080
which makes sense so um

00:06:13,600 --> 00:06:18,880
oh this is this is just a simple command

00:06:16,080 --> 00:06:20,880
line thing that you can use

00:06:18,880 --> 00:06:23,039
a cool thing about wiki db is that it

00:06:20,880 --> 00:06:24,800
works in the browser so

00:06:23,039 --> 00:06:26,319
i've prepared a little demo here to show

00:06:24,800 --> 00:06:29,440
that off

00:06:26,319 --> 00:06:32,720
or i could just write this as well so

00:06:29,440 --> 00:06:34,000
ah so the first thing you can do to make

00:06:32,720 --> 00:06:35,759
it work in the browser is you just

00:06:34,000 --> 00:06:37,039
require level because you can totally do

00:06:35,759 --> 00:06:40,319
that in the browser now

00:06:37,039 --> 00:06:44,319
um create a new database like

00:06:40,319 --> 00:06:48,160
whatever.db and then you do

00:06:44,319 --> 00:06:50,240
wiki equals require wikidb

00:06:48,160 --> 00:06:51,599
and you give it a db handle and then

00:06:50,240 --> 00:06:53,520
just to play with this stuff

00:06:51,599 --> 00:06:55,360
in the browser console we'll do

00:06:53,520 --> 00:06:57,759
window.wiki

00:06:55,360 --> 00:06:58,479
and we'll set up we'll also set up a

00:06:57,759 --> 00:07:01,599
websocket

00:06:58,479 --> 00:07:03,240
because we can do some replication

00:07:01,599 --> 00:07:04,560
across the websocket so require

00:07:03,240 --> 00:07:07,599
websocket

00:07:04,560 --> 00:07:08,240
stream like that great so all that you

00:07:07,599 --> 00:07:11,280
have to do

00:07:08,240 --> 00:07:12,240
is uh i've set up a little patch here

00:07:11,280 --> 00:07:14,240
that

00:07:12,240 --> 00:07:15,759
maps level to level browserify and then

00:07:14,240 --> 00:07:18,240
all that you have to do is run this

00:07:15,759 --> 00:07:19,199
simple shell script so i've already done

00:07:18,240 --> 00:07:24,960
that

00:07:19,199 --> 00:07:24,960
and it's running right here i think

00:07:25,440 --> 00:07:30,080
so we've got wiki db in the browser as

00:07:27,919 --> 00:07:32,240
well so we can do things like

00:07:30,080 --> 00:07:34,960
wiki dot create write stream to make

00:07:32,240 --> 00:07:38,240
some content so like robots

00:07:34,960 --> 00:07:41,520
dot and uh beep

00:07:38,240 --> 00:07:42,880
boop and that should create a new

00:07:41,520 --> 00:07:46,319
document

00:07:42,880 --> 00:07:48,160
um now so i also

00:07:46,319 --> 00:07:49,840
set up a websocket so you can do this

00:07:48,160 --> 00:07:54,000
really cool thing i made this little

00:07:49,840 --> 00:07:56,160
script recently oh hang on um

00:07:54,000 --> 00:07:57,520
so let me just pop over here i guess so

00:07:56,160 --> 00:07:58,000
i wrote this little script recently

00:07:57,520 --> 00:08:00,800
called

00:07:58,000 --> 00:08:01,680
uh wsnc which is short for websocket

00:08:00,800 --> 00:08:03,759
netcat

00:08:01,680 --> 00:08:04,879
it's just like netcat you can listen on

00:08:03,759 --> 00:08:07,280
a port

00:08:04,879 --> 00:08:08,639
just like netcat but it's listening on

00:08:07,280 --> 00:08:11,840
websockets so if i do

00:08:08,639 --> 00:08:13,599
wsnc and then i connect to localhost

00:08:11,840 --> 00:08:17,759
00:08:13,599 --> 00:08:20,560
i can say hello cool

00:08:17,759 --> 00:08:21,759
what's fun is now i can just connect

00:08:20,560 --> 00:08:26,560
from the browser so

00:08:21,759 --> 00:08:31,199
here i'll have the server set up and

00:08:26,560 --> 00:08:31,199
just scoot it over here so now

00:08:32,880 --> 00:08:44,080
whoops well i guess

00:08:40,560 --> 00:08:47,839
i'll do it over here so wsnc dash l5000

00:08:44,080 --> 00:08:51,200
um wsoc ws

00:08:47,839 --> 00:08:54,480
localhost 5000 dot ends

00:08:51,200 --> 00:08:56,800
wow so now oh

00:08:54,480 --> 00:08:56,800
whoops

00:08:58,320 --> 00:09:01,760
well i'll do it on another port because

00:09:00,240 --> 00:09:06,160
apparently i messed that up

00:09:01,760 --> 00:09:08,560
okay so 5001 we end the message with wow

00:09:06,160 --> 00:09:09,920
great we get the message um what's

00:09:08,560 --> 00:09:10,320
really cool is i've got this command

00:09:09,920 --> 00:09:14,399
line

00:09:10,320 --> 00:09:16,800
tool called dupe sh dpsh

00:09:14,399 --> 00:09:18,000
all that the dupe sh command does is you

00:09:16,800 --> 00:09:20,320
give it two commands

00:09:18,000 --> 00:09:21,040
as arguments and it takes the first

00:09:20,320 --> 00:09:22,640
command

00:09:21,040 --> 00:09:24,480
and it pipes the standard out of the

00:09:22,640 --> 00:09:25,440
first command to the standard in of the

00:09:24,480 --> 00:09:27,200
second command

00:09:25,440 --> 00:09:29,440
and the standard out of the second

00:09:27,200 --> 00:09:33,279
command back to the standard in

00:09:29,440 --> 00:09:35,440
of the first command that's like this

00:09:33,279 --> 00:09:36,800
so what that lets you do is if you have

00:09:35,440 --> 00:09:38,560
a replication protocol

00:09:36,800 --> 00:09:40,160
all that you have to do is have it speak

00:09:38,560 --> 00:09:41,839
standard in and standard out

00:09:40,160 --> 00:09:44,000
you don't have to set up any transports

00:09:41,839 --> 00:09:46,399
necessarily so that's how wikidb works

00:09:44,000 --> 00:09:48,839
so if i set up a wikidb

00:09:46,399 --> 00:09:51,040
replication scheme so i'll make a new

00:09:48,839 --> 00:09:53,920
database

00:09:51,040 --> 00:09:55,040
and i'll do the sync command and then in

00:09:53,920 --> 00:09:59,040
the other

00:09:55,040 --> 00:10:02,959
oops in the other commands i'll do wsnc

00:09:59,040 --> 00:10:05,200
dash l5002 so what this should do

00:10:02,959 --> 00:10:06,399
is once i get a websocket connection

00:10:05,200 --> 00:10:07,680
everything from that websocket

00:10:06,399 --> 00:10:09,920
connection will be hooked up

00:10:07,680 --> 00:10:11,600
as a duplex stream to the wikibeat

00:10:09,920 --> 00:10:12,560
command this is really useful technique

00:10:11,600 --> 00:10:14,800
i found for

00:10:12,560 --> 00:10:15,680
symmetric protocols so if i run this

00:10:14,800 --> 00:10:18,160
command

00:10:15,680 --> 00:10:20,320
now in the browser what i can do is

00:10:18,160 --> 00:10:23,360
wikidb has a replication method

00:10:20,320 --> 00:10:28,240
so you do wiki.replicate

00:10:23,360 --> 00:10:28,240
and that's a push-pull replication so

00:10:28,800 --> 00:10:35,920
the first thing i can do is i'll make a

00:10:31,920 --> 00:10:35,920
websocket connection to localhost

00:10:36,000 --> 00:10:44,000
5002 and then what i can do is s.pipe

00:10:39,920 --> 00:10:47,040
wiki dot replicate dot pipe

00:10:44,000 --> 00:10:49,839
s cool so

00:10:47,040 --> 00:10:51,279
if that worked now i should be able to

00:10:49,839 --> 00:10:54,880
do wikidb

00:10:51,279 --> 00:10:54,880
temp new data

00:10:55,120 --> 00:11:04,480
i think we made we made a robot

00:10:59,040 --> 00:11:04,480
document heads robot robots

00:11:05,279 --> 00:11:07,760
oh no

00:11:08,399 --> 00:11:12,000
i've gotten the heads

00:11:12,560 --> 00:11:18,640
just try keys yeah okay i guess it was

00:11:16,079 --> 00:11:18,640
just robot

00:11:20,640 --> 00:11:27,600
and we get this hash and lo and behold

00:11:24,240 --> 00:11:29,040
the hash should be what we expect it to

00:11:27,600 --> 00:11:31,760
be and it is hooray

00:11:29,040 --> 00:11:33,200
so just did data replication between

00:11:31,760 --> 00:11:37,360
node and the browser

00:11:33,200 --> 00:11:38,560
with like that three-line script and

00:11:37,360 --> 00:11:40,480
a couple of things in the ripple

00:11:38,560 --> 00:11:43,519
fantastic so

00:11:40,480 --> 00:11:47,360
what does this kind of thing mean

00:11:43,519 --> 00:11:49,680
um i think with that sort of technique

00:11:47,360 --> 00:11:50,800
of having really easy pervasive

00:11:49,680 --> 00:11:53,360
replication

00:11:50,800 --> 00:11:56,000
you can start to move your data around

00:11:53,360 --> 00:11:57,839
without necessarily involving servers or

00:11:56,000 --> 00:11:59,680
maybe with servers that other people

00:11:57,839 --> 00:12:00,959
control or maybe servers that users

00:11:59,680 --> 00:12:04,079
themselves run

00:12:00,959 --> 00:12:06,240
all of that stuff is really feasible if

00:12:04,079 --> 00:12:09,279
you have good data replication

00:12:06,240 --> 00:12:11,920
so i already looked at that

00:12:09,279 --> 00:12:12,880
also just for fun uh here are some fun

00:12:11,920 --> 00:12:14,560
other wikis

00:12:12,880 --> 00:12:16,399
that i've kind of experimented with i

00:12:14,560 --> 00:12:17,600
wonder if this audio cable well we don't

00:12:16,399 --> 00:12:19,800
have to necessarily

00:12:17,600 --> 00:12:21,120
so the first one is called

00:12:19,800 --> 00:12:23,760
studio.substack.net

00:12:21,120 --> 00:12:24,959
this is a so this is the changes log for

00:12:23,760 --> 00:12:29,760
this website

00:12:24,959 --> 00:12:29,760
all that this website is is uh

00:12:31,760 --> 00:12:35,279
it's an interface i don't know if you

00:12:33,120 --> 00:12:35,760
can hear that for doing live coding for

00:12:35,279 --> 00:12:39,839
songs

00:12:35,760 --> 00:12:39,839
so if you change the numbers

00:12:40,600 --> 00:12:45,839
[Music]

00:12:42,399 --> 00:12:45,839
and you can do all kinds of fun things

00:12:50,839 --> 00:12:53,839
or

00:12:54,490 --> 00:13:01,279
[Laughter]

00:12:58,240 --> 00:13:07,839
anyways it's fun uh here's

00:13:01,279 --> 00:13:07,839
here's some fun things that i've made

00:13:12,880 --> 00:13:16,639
this is all just javascript on the right

00:13:15,839 --> 00:13:19,760
it's just some

00:13:16,639 --> 00:13:21,279
sine waves and sawtooth waves

00:13:19,760 --> 00:13:23,920
but the fun thing about this kind of

00:13:21,279 --> 00:13:26,480
stuff is that it's in wiki format

00:13:23,920 --> 00:13:27,920
so there's no there's no user accounts

00:13:26,480 --> 00:13:30,399
everything is anonymous

00:13:27,920 --> 00:13:31,600
but people just show up and post all of

00:13:30,399 --> 00:13:34,880
these wonderful

00:13:31,600 --> 00:13:36,560
creations to the website some some

00:13:34,880 --> 00:13:38,800
people like to flood it which is funny

00:13:36,560 --> 00:13:41,279
i i think these are some of the high

00:13:38,800 --> 00:13:43,519
schoolers that uh i was

00:13:41,279 --> 00:13:46,480
i was showing my tool like i'm hacking

00:13:43,519 --> 00:13:48,800
your computer that's fantastic

00:13:46,480 --> 00:13:50,160
um but what's really fun about it is you

00:13:48,800 --> 00:13:52,000
see something in the feed

00:13:50,160 --> 00:13:53,760
and then you can just copy it really

00:13:52,000 --> 00:13:55,360
easily and you can make your own version

00:13:53,760 --> 00:13:57,040
and remix it and people have made some

00:13:55,360 --> 00:13:59,040
really fantastic things

00:13:57,040 --> 00:14:00,720
um and and it's always sort of like

00:13:59,040 --> 00:14:02,320
maybe it'll go silent for a few days and

00:14:00,720 --> 00:14:04,079
then there's just a flurry of activity

00:14:02,320 --> 00:14:07,440
it's really fun

00:14:04,079 --> 00:14:09,839
so another wiki that i've been

00:14:07,440 --> 00:14:11,199
messing with is called shipboard so this

00:14:09,839 --> 00:14:14,079
wiki

00:14:11,199 --> 00:14:15,680
this wiki actually uses wikidb so

00:14:14,079 --> 00:14:18,639
there's an activity feed

00:14:15,680 --> 00:14:20,079
and it's it's kind of like a really

00:14:18,639 --> 00:14:22,160
early prototype of how

00:14:20,079 --> 00:14:24,160
a project planning tool might work if

00:14:22,160 --> 00:14:26,000
it's based on

00:14:24,160 --> 00:14:27,440
really trivial data replication so we

00:14:26,000 --> 00:14:30,639
can make a task

00:14:27,440 --> 00:14:33,839
call it whatever test description

00:14:30,639 --> 00:14:36,560
who knows i'll call it uh

00:14:33,839 --> 00:14:39,199
10 weeks i don't know and to pass test

00:14:36,560 --> 00:14:39,199
dependencies

00:14:39,519 --> 00:14:46,240
tags cool and then create

00:14:43,760 --> 00:14:46,880
so now uh we get this tag there's a hash

00:14:46,240 --> 00:14:50,639
for it

00:14:46,880 --> 00:14:54,160
if you click on tags now i think cool

00:14:50,639 --> 00:14:56,240
um it builds a gantt chart for us so

00:14:54,160 --> 00:14:57,360
just something to maybe get you thinking

00:14:56,240 --> 00:15:00,959
that wikis aren't just

00:14:57,360 --> 00:15:02,399
for strictly text data like

00:15:00,959 --> 00:15:04,560
encyclopedia you can use it for all

00:15:02,399 --> 00:15:08,399
kinds of things it's a really

00:15:04,560 --> 00:15:08,399
really underused data model i think but

00:15:09,199 --> 00:15:15,440
also it syncs so there's a sync

00:15:12,560 --> 00:15:16,560
panel right here so whenever you want to

00:15:15,440 --> 00:15:18,880
get

00:15:16,560 --> 00:15:19,920
push your changes or receive new changes

00:15:18,880 --> 00:15:22,959
just like git

00:15:19,920 --> 00:15:26,320
you just do sync and then if

00:15:22,959 --> 00:15:27,760
another whoa if another browser

00:15:26,320 --> 00:15:29,680
like wants to get data they can just

00:15:27,760 --> 00:15:32,959
sync from any server it's fantastic

00:15:29,680 --> 00:15:34,720
okay so that's shipboard

00:15:32,959 --> 00:15:36,399
so some problems with wikis though are

00:15:34,720 --> 00:15:38,639
that they can be shut down

00:15:36,399 --> 00:15:40,480
if the site administrators get tired of

00:15:38,639 --> 00:15:41,680
them or they're just like filled with

00:15:40,480 --> 00:15:43,920
spam

00:15:41,680 --> 00:15:45,360
and you know the software is not

00:15:43,920 --> 00:15:47,360
necessarily going to stay

00:15:45,360 --> 00:15:48,880
the way that it stays but this isn't

00:15:47,360 --> 00:15:51,279
just a problem with wikis this is a

00:15:48,880 --> 00:15:53,040
problem with any service that you use

00:15:51,279 --> 00:15:54,399
like okay you're signing in with

00:15:53,040 --> 00:15:56,399
facebook today but

00:15:54,399 --> 00:15:58,079
how soon before they turn off that api

00:15:56,399 --> 00:15:59,360
and then you're super screwed and you

00:15:58,079 --> 00:16:02,399
have to rewrite everything

00:15:59,360 --> 00:16:04,399
it's um

00:16:02,399 --> 00:16:05,680
these these are not really great for us

00:16:04,399 --> 00:16:07,680
if we want to

00:16:05,680 --> 00:16:08,880
be editing everything all the time we

00:16:07,680 --> 00:16:13,040
have to spend all of this time

00:16:08,880 --> 00:16:15,120
reconciling third party changes

00:16:13,040 --> 00:16:16,320
but these are really problems that are

00:16:15,120 --> 00:16:18,880
go deeper than that they

00:16:16,320 --> 00:16:19,600
go kind of to the core of property and

00:16:18,880 --> 00:16:22,720
ownership

00:16:19,600 --> 00:16:24,079
to start with which usually just ends up

00:16:22,720 --> 00:16:26,880
with a lot of people

00:16:24,079 --> 00:16:29,519
owning all of the property so here here

00:16:26,880 --> 00:16:31,199
are some things that

00:16:29,519 --> 00:16:33,120
that we have in terms of digital

00:16:31,199 --> 00:16:36,000
property like you might

00:16:33,120 --> 00:16:37,759
you might know of like dns or like npm

00:16:36,000 --> 00:16:40,399
package names that kind of stuff

00:16:37,759 --> 00:16:41,680
these are scarce resources a little bit

00:16:40,399 --> 00:16:43,600
by design i mean names aren't

00:16:41,680 --> 00:16:46,880
necessarily terribly scarce

00:16:43,600 --> 00:16:47,600
but they they are all at the exclusion

00:16:46,880 --> 00:16:51,199
of other

00:16:47,600 --> 00:16:53,360
names so if i want the package name

00:16:51,199 --> 00:16:55,279
for tap for example i know isaac has

00:16:53,360 --> 00:16:56,160
that and so i can't just publish over

00:16:55,279 --> 00:16:58,079
his

00:16:56,160 --> 00:16:59,440
content although wouldn't it kind of be

00:16:58,079 --> 00:17:00,480
nice if anyone could

00:16:59,440 --> 00:17:02,480
i think that would be a really

00:17:00,480 --> 00:17:05,199
interesting research project

00:17:02,480 --> 00:17:07,039
to have anyone can edit any package at

00:17:05,199 --> 00:17:09,120
any time a registry like that would be

00:17:07,039 --> 00:17:10,640
just fantastic

00:17:09,120 --> 00:17:12,319
really interesting for a security

00:17:10,640 --> 00:17:15,439
researcher i'm sure as well

00:17:12,319 --> 00:17:17,520
um other things you know bitcoin and

00:17:15,439 --> 00:17:19,439
whatever and ssl cartels these are all

00:17:17,520 --> 00:17:20,880
forms of property in their own way

00:17:19,439 --> 00:17:23,839
that we have in the digital era but i

00:17:20,880 --> 00:17:26,640
think this quote from captain kirk

00:17:23,839 --> 00:17:27,039
in star trek iv which is the movie where

00:17:26,640 --> 00:17:29,120
they

00:17:27,039 --> 00:17:31,440
went back in time to san francisco in

00:17:29,120 --> 00:17:33,520
1986 to save some whales

00:17:31,440 --> 00:17:35,919
is relevant it's a miracle these people

00:17:33,520 --> 00:17:39,120
ever got out of the 20th century

00:17:35,919 --> 00:17:41,360
and so i think instead maybe

00:17:39,120 --> 00:17:42,240
owning data is maybe not the best idea

00:17:41,360 --> 00:17:44,559
but

00:17:42,240 --> 00:17:45,280
we can certainly own our identities like

00:17:44,559 --> 00:17:48,559
we have

00:17:45,280 --> 00:17:49,280
certain autonomy when we make statements

00:17:48,559 --> 00:17:53,039
when we

00:17:49,280 --> 00:17:53,039
like author things at least originally

00:17:53,200 --> 00:17:56,960
owning data is a little bit complicated

00:17:54,799 --> 00:17:58,559
because then like you can just copy it

00:17:56,960 --> 00:18:00,000
for free as much as you want so that

00:17:58,559 --> 00:18:01,039
doesn't really matter very well to the

00:18:00,000 --> 00:18:04,080
technology

00:18:01,039 --> 00:18:06,000
but i think this question has been

00:18:04,080 --> 00:18:08,240
fueling a lot of my research lately it's

00:18:06,000 --> 00:18:11,280
how can we build services that nobody

00:18:08,240 --> 00:18:14,640
owns because if nobody owns it

00:18:11,280 --> 00:18:17,600
then nobody can shut it down nobody

00:18:14,640 --> 00:18:18,240
can take it away it's just always going

00:18:17,600 --> 00:18:21,039
to be there

00:18:18,240 --> 00:18:22,799
just like open source is sort of once

00:18:21,039 --> 00:18:25,360
you release something with a

00:18:22,799 --> 00:18:25,840
open source license and then you can

00:18:25,360 --> 00:18:28,080
just

00:18:25,840 --> 00:18:29,360
save it and everyone has it like forever

00:18:28,080 --> 00:18:31,120
so long as

00:18:29,360 --> 00:18:33,679
a few people care enough about it to

00:18:31,120 --> 00:18:36,720
keep it around on some hard disks

00:18:33,679 --> 00:18:38,160
so in order to do

00:18:36,720 --> 00:18:40,160
all of these distributive things we kind

00:18:38,160 --> 00:18:40,960
of need some new techniques so one of

00:18:40,160 --> 00:18:45,120
the techniques

00:18:40,960 --> 00:18:46,400
is to kind of dismantle how we think

00:18:45,120 --> 00:18:48,480
about identity

00:18:46,400 --> 00:18:50,000
so identity is actually very simple all

00:18:48,480 --> 00:18:53,679
that you need to do

00:18:50,000 --> 00:18:57,200
is generate an asymmetric key pair

00:18:53,679 --> 00:18:59,520
which is fairly simple you just do ssh

00:18:57,200 --> 00:19:02,400
key agent some like commands you copy

00:18:59,520 --> 00:19:03,679
from stack overflow on the command line

00:19:02,400 --> 00:19:05,919
so let's sign some data with

00:19:03,679 --> 00:19:09,600
cryptography that'll be fun

00:19:05,919 --> 00:19:12,640
so let's see i wrote a backup in case i

00:19:09,600 --> 00:19:16,160
forget all the steps but we'll use

00:19:12,640 --> 00:19:19,360
just a simple elliptic curve module here

00:19:16,160 --> 00:19:22,080
and we can make a keep well make a new

00:19:19,360 --> 00:19:22,080
instance of that

00:19:22,320 --> 00:19:25,360
with this curve which i've heard from my

00:19:24,559 --> 00:19:29,120
crypto friends

00:19:25,360 --> 00:19:29,120
is pretty good um

00:19:29,679 --> 00:19:32,960
so all that you need to do is generate a

00:19:31,600 --> 00:19:38,559
key pair

00:19:32,960 --> 00:19:41,760
and then call sign on that key pair so

00:19:38,559 --> 00:19:44,640
if we consoled well hang on so

00:19:41,760 --> 00:19:45,600
if we take standard in and we pipe that

00:19:44,640 --> 00:19:48,480
to something like

00:19:45,600 --> 00:19:48,480
concat stream

00:19:48,960 --> 00:19:56,320
then we can sign the incoming blob so

00:19:52,720 --> 00:20:00,720
function body and we'll just

00:19:56,320 --> 00:20:00,720
assign that body and print it

00:20:03,440 --> 00:20:06,799
okay so once we have a program like this

00:20:05,360 --> 00:20:09,840
now we can

00:20:06,799 --> 00:20:10,799
have a message any arbitrary payload and

00:20:09,840 --> 00:20:15,120
we'll just pipe it

00:20:10,799 --> 00:20:18,480
into a signing program oh hang on

00:20:15,120 --> 00:20:22,320
line what line eight right

00:20:18,480 --> 00:20:22,320
that extra paren

00:20:22,720 --> 00:20:28,400
great and we get this hash it's actually

00:20:26,159 --> 00:20:31,919
an array but if you convert it to a

00:20:28,400 --> 00:20:31,919
buffer then it looks a little bit nicer

00:20:33,120 --> 00:20:40,159
actually to hex

00:20:37,120 --> 00:20:40,720
to hex there we go so anyways you have a

00:20:40,159 --> 00:20:42,559
message

00:20:40,720 --> 00:20:44,480
you can attach a signature to that

00:20:42,559 --> 00:20:47,919
message um

00:20:44,480 --> 00:20:49,919
all of a sudden that signature sort of

00:20:47,919 --> 00:20:51,200
proves that you wrote the message so you

00:20:49,919 --> 00:20:52,720
don't really need to send that to a

00:20:51,200 --> 00:20:53,840
server necessarily i mean you could for

00:20:52,720 --> 00:20:55,679
safe keeping

00:20:53,840 --> 00:20:56,960
but you can also just send that message

00:20:55,679 --> 00:20:59,600
directly to your peers

00:20:56,960 --> 00:21:00,559
like our floppy disk or whatever and you

00:20:59,600 --> 00:21:02,640
could also

00:21:00,559 --> 00:21:04,880
pass that floppy disk to the nsa first

00:21:02,640 --> 00:21:06,640
and the nsa could give it to your friend

00:21:04,880 --> 00:21:08,240
and it doesn't matter because your

00:21:06,640 --> 00:21:10,559
friend can just read the signature

00:21:08,240 --> 00:21:12,240
and that sort of proves something about

00:21:10,559 --> 00:21:14,480
the data integrity so

00:21:12,240 --> 00:21:15,600
it's it's resistant to a lot of

00:21:14,480 --> 00:21:18,880
different types of attacks

00:21:15,600 --> 00:21:20,799
there's also this really useful idea

00:21:18,880 --> 00:21:23,200
called content addressable data that's

00:21:20,799 --> 00:21:26,880
where if you have a key value store

00:21:23,200 --> 00:21:29,840
the key that you use is just the hash

00:21:26,880 --> 00:21:30,640
of the data so if you have a message

00:21:29,840 --> 00:21:33,760
hello

00:21:30,640 --> 00:21:33,760
then the key would be

00:21:36,559 --> 00:21:41,600
the key would be that hex value

00:21:39,679 --> 00:21:44,320
so one really nice thing about using

00:21:41,600 --> 00:21:49,120
content or decibel data is that the data

00:21:44,320 --> 00:21:50,880
is has to be what the hash is

00:21:49,120 --> 00:21:52,880
like otherwise it's been tampered with

00:21:50,880 --> 00:21:54,480
or the data has been corrupted in some

00:21:52,880 --> 00:21:55,440
fashion so you get kind of integrity

00:21:54,480 --> 00:21:58,240
checking for free

00:21:55,440 --> 00:21:59,760
which is why git uses it for example and

00:21:58,240 --> 00:22:00,400
also the links can't change which is

00:21:59,760 --> 00:22:02,320
really nice

00:22:00,400 --> 00:22:04,559
so if you point at something you know

00:22:02,320 --> 00:22:06,240
that that's never going to change so

00:22:04,559 --> 00:22:07,600
what that lets you do is you can create

00:22:06,240 --> 00:22:10,400
these these

00:22:07,600 --> 00:22:10,720
data structures called merkle dags where

00:22:10,400 --> 00:22:13,039
if

00:22:10,720 --> 00:22:14,240
in your document you include the hash of

00:22:13,039 --> 00:22:17,440
another document

00:22:14,240 --> 00:22:19,200
you can sort of have a chain of identity

00:22:17,440 --> 00:22:20,799
that goes all the way back to the root

00:22:19,200 --> 00:22:22,559
so if

00:22:20,799 --> 00:22:23,760
you know what the latest document is

00:22:22,559 --> 00:22:24,480
then you can create something like

00:22:23,760 --> 00:22:26,080
twitter

00:22:24,480 --> 00:22:28,000
and a completely decentralized fashion

00:22:26,080 --> 00:22:29,760
where you're getting nodes from

00:22:28,000 --> 00:22:31,760
all of your peers and you don't have to

00:22:29,760 --> 00:22:35,120
trust them like at all

00:22:31,760 --> 00:22:36,320
so one nice thing about

00:22:35,120 --> 00:22:38,159
these data structures is that

00:22:36,320 --> 00:22:39,200
replication is actually really trivial

00:22:38,159 --> 00:22:41,760
so like

00:22:39,200 --> 00:22:42,720
this is how wikidb works internally it

00:22:41,760 --> 00:22:44,480
uh

00:22:42,720 --> 00:22:46,480
all that happens is when you create new

00:22:44,480 --> 00:22:48,480
documents you append them

00:22:46,480 --> 00:22:49,760
to an append only log and that log just

00:22:48,480 --> 00:22:51,280
grows and grows and then there are

00:22:49,760 --> 00:22:52,880
indexes that are built on top of that

00:22:51,280 --> 00:22:55,600
those are the mutable part

00:22:52,880 --> 00:22:56,960
but all of the documents point back like

00:22:55,600 --> 00:22:59,280
i was doing at the beginning with like

00:22:56,960 --> 00:23:02,480
dash dash prev equals that's the

00:22:59,280 --> 00:23:04,960
same idea it's really trivial to

00:23:02,480 --> 00:23:06,480
to do replication and even to do

00:23:04,960 --> 00:23:07,280
multi-party replication and everything

00:23:06,480 --> 00:23:11,280
because

00:23:07,280 --> 00:23:14,480
the basic operation is just concat so

00:23:11,280 --> 00:23:16,000
um so to to do this kind of technique

00:23:14,480 --> 00:23:17,360
all that you need to do is if you have a

00:23:16,000 --> 00:23:19,200
message hello

00:23:17,360 --> 00:23:20,400
you put that in shaw some and then the

00:23:19,200 --> 00:23:24,000
next message is

00:23:20,400 --> 00:23:25,520
uh like maybe you include the previous

00:23:24,000 --> 00:23:28,320
one in the head whoa

00:23:25,520 --> 00:23:28,799
crap so you include the previous message

00:23:28,320 --> 00:23:31,679
and

00:23:28,799 --> 00:23:31,679
head like that

00:23:32,480 --> 00:23:36,000
new message and that's the hash of the

00:23:34,480 --> 00:23:38,559
next document and so on

00:23:36,000 --> 00:23:40,320
you just keep doing that and you have a

00:23:38,559 --> 00:23:43,279
nice

00:23:40,320 --> 00:23:44,559
chain of trust which is fantastic so

00:23:43,279 --> 00:23:45,600
there's some modules to help you out

00:23:44,559 --> 00:23:48,159
with these kinds of

00:23:45,600 --> 00:23:50,000
building these kinds of tools a really

00:23:48,159 --> 00:23:52,799
fantastic module called abstract

00:23:50,000 --> 00:23:54,320
blob store by max ogden that kind of put

00:23:52,799 --> 00:23:55,279
all of these ideas together in a really

00:23:54,320 --> 00:23:57,600
concrete form

00:23:55,279 --> 00:23:58,400
so you can use it for things like files

00:23:57,600 --> 00:24:01,440
on disk

00:23:58,400 --> 00:24:03,120
or s3 or indexeddb

00:24:01,440 --> 00:24:04,400
whatever you want but the one that i

00:24:03,120 --> 00:24:06,400
really like is called content

00:24:04,400 --> 00:24:07,600
addressable blob store because it lets

00:24:06,400 --> 00:24:11,360
you

00:24:07,600 --> 00:24:14,720
uh create documents like this so

00:24:11,360 --> 00:24:15,679
you just require it which is the longest

00:24:14,720 --> 00:24:18,799
thing to type

00:24:15,679 --> 00:24:22,960
and you have to spell required correctly

00:24:18,799 --> 00:24:25,840
content addressable blob store

00:24:22,960 --> 00:24:26,559
you create a new store like that and

00:24:25,840 --> 00:24:28,400
then you do

00:24:26,559 --> 00:24:30,840
store. like create write stream for

00:24:28,400 --> 00:24:33,840
example

00:24:30,840 --> 00:24:33,840
uh

00:24:34,159 --> 00:24:37,279
and once you've done that

00:24:37,520 --> 00:24:40,799
in the callback

00:24:43,919 --> 00:24:48,080
you get a key property so that's just

00:24:47,200 --> 00:24:50,080
going to be the hash

00:24:48,080 --> 00:24:51,440
of the data that you've sent so if we

00:24:50,080 --> 00:24:54,880
run this program

00:24:51,440 --> 00:24:55,919
we'll get this hash so now if we update

00:24:54,880 --> 00:24:58,960
the program

00:24:55,919 --> 00:25:00,159
hang on if we update this program to

00:24:58,960 --> 00:25:02,400
read back that data

00:25:00,159 --> 00:25:02,400
now

00:25:06,000 --> 00:25:12,000
dot pipe standard out

00:25:09,039 --> 00:25:12,840
we should get back a message and we do

00:25:12,000 --> 00:25:15,919
great

00:25:12,840 --> 00:25:17,840
so but the nice thing is uh all of these

00:25:15,919 --> 00:25:20,880
techniques also work in the browser so

00:25:17,840 --> 00:25:23,760
that that's all that i'm doing

00:25:20,880 --> 00:25:25,600
to make wikidb and it's it's based on

00:25:23,760 --> 00:25:27,760
another module called fork db work in

00:25:25,600 --> 00:25:30,000
the browser

00:25:27,760 --> 00:25:31,679
all they need to do is swap out content

00:25:30,000 --> 00:25:34,720
addressable blob store for idb

00:25:31,679 --> 00:25:38,480
content addressable blob store which

00:25:34,720 --> 00:25:41,679
is uh just uses indexeddb

00:25:38,480 --> 00:25:47,760
instead of files on disk

00:25:41,679 --> 00:25:47,760
so if you browserify blob.js

00:25:52,080 --> 00:25:59,600
and if we make an index.html

00:25:57,120 --> 00:25:59,600
like that

00:26:03,120 --> 00:26:05,840
so now

00:26:07,840 --> 00:26:14,080
if we fire up the console we'll get

00:26:11,039 --> 00:26:15,600
blo whoops store that's the one so now

00:26:14,080 --> 00:26:18,080
we've got the store we can create a

00:26:15,600 --> 00:26:20,400
right stream

00:26:18,080 --> 00:26:20,400
um

00:26:23,039 --> 00:26:29,760
dot key dot and whatever

00:26:27,360 --> 00:26:32,480
and that gives us a hash now that we can

00:26:29,760 --> 00:26:36,240
create a read stream for so store

00:26:32,480 --> 00:26:40,960
dot create read stream

00:26:36,240 --> 00:26:40,960
of whoa wrong paste buffer i guess

00:26:45,279 --> 00:26:53,840
dot on data

00:26:48,320 --> 00:26:53,840
and then i'll just

00:26:55,120 --> 00:27:00,400
whatever hooray so that worked um

00:26:58,480 --> 00:27:03,679
anyways that's just that's just a silly

00:27:00,400 --> 00:27:06,080
useful thing that maybe

00:27:03,679 --> 00:27:07,120
maybe you'll you'll find useful so one

00:27:06,080 --> 00:27:09,120
really nice thing though

00:27:07,120 --> 00:27:11,200
is if we want to make systems that no

00:27:09,120 --> 00:27:13,679
one can own now that we have this

00:27:11,200 --> 00:27:15,360
basic blob store interface what if we

00:27:13,679 --> 00:27:18,880
could do that for bittorrent

00:27:15,360 --> 00:27:20,240
so luckily for us most

00:27:18,880 --> 00:27:22,640
other people have done all of the hard

00:27:20,240 --> 00:27:23,840
work especially for us with webtorrent

00:27:22,640 --> 00:27:26,000
and macintosh with

00:27:23,840 --> 00:27:27,760
modules like torn stream these are

00:27:26,000 --> 00:27:30,000
fantastic by the way torrent mount

00:27:27,760 --> 00:27:31,200
it can seek into the middle of a file

00:27:30,000 --> 00:27:33,120
and start streaming it which is

00:27:31,200 --> 00:27:35,360
incidentally really useful for things

00:27:33,120 --> 00:27:37,520
other than movies

00:27:35,360 --> 00:27:39,200
like geospatial indexes or all kinds of

00:27:37,520 --> 00:27:41,919
stuff nobody's doing anything with that

00:27:39,200 --> 00:27:44,640
i don't understand it

00:27:41,919 --> 00:27:46,559
so i recently sent a pull request to

00:27:44,640 --> 00:27:47,039
this module called torrent blob store to

00:27:46,559 --> 00:27:50,080
implement

00:27:47,039 --> 00:27:50,880
right stream support so just like we've

00:27:50,080 --> 00:27:54,159
been doing

00:27:50,880 --> 00:27:56,159
with blob data

00:27:54,159 --> 00:27:57,360
all that you need to do to make this

00:27:56,159 --> 00:27:59,679
kind of thing

00:27:57,360 --> 00:28:01,600
work for bittorrent is you just swap out

00:27:59,679 --> 00:28:04,960
content addressable blob store

00:28:01,600 --> 00:28:06,000
for torrent blob store and when you run

00:28:04,960 --> 00:28:08,240
that program

00:28:06,000 --> 00:28:09,600
you get back a magnet link and you can

00:28:08,240 --> 00:28:12,080
just paste that into the

00:28:09,600 --> 00:28:13,360
create read stream implementation or a

00:28:12,080 --> 00:28:14,000
bittorrent client or whatever and you

00:28:13,360 --> 00:28:16,320
get a

00:28:14,000 --> 00:28:17,679
file with all of your content pretty

00:28:16,320 --> 00:28:21,360
pretty useful technique i think

00:28:17,679 --> 00:28:22,880
so um so what other things can we do to

00:28:21,360 --> 00:28:26,240
sort of

00:28:22,880 --> 00:28:30,720
build more peer-to-peer robust

00:28:26,240 --> 00:28:34,480
technologies so uh so

00:28:30,720 --> 00:28:36,320
webrtc is really cool but

00:28:34,480 --> 00:28:38,159
the peer introduction handshake is

00:28:36,320 --> 00:28:40,399
actually quite complicated and

00:28:38,159 --> 00:28:41,919
you mostly have to go to a server to

00:28:40,399 --> 00:28:44,159
store the initial

00:28:41,919 --> 00:28:44,960
metadata payload so again i can show how

00:28:44,159 --> 00:28:48,080
this works

00:28:44,960 --> 00:28:48,559
uh over here so here i've got an example

00:28:48,080 --> 00:28:51,840
of

00:28:48,559 --> 00:28:54,880
just a just a simple static file it uses

00:28:51,840 --> 00:28:56,480
simplepeer which is a pretty nice way of

00:28:54,880 --> 00:28:59,200
doing webrtc

00:28:56,480 --> 00:29:00,000
so the first thing that webrtc gives you

00:28:59,200 --> 00:29:03,120
is all of this

00:29:00,000 --> 00:29:06,240
spam about ip addresses and stuff

00:29:03,120 --> 00:29:09,760
so you take that data and you

00:29:06,240 --> 00:29:11,039
give it to another peer and this is the

00:29:09,760 --> 00:29:14,159
the signal data

00:29:11,039 --> 00:29:17,200
oh no all right

00:29:14,159 --> 00:29:20,000
that cable is flicky so

00:29:17,200 --> 00:29:22,480
then the other peer sends its signal

00:29:20,000 --> 00:29:25,679
data which is right here

00:29:22,480 --> 00:29:26,399
like so and i paste that in to the first

00:29:25,679 --> 00:29:29,440
one

00:29:26,399 --> 00:29:32,480
and now if i open up the debugger

00:29:29,440 --> 00:29:35,520
you can see it sent some data so

00:29:32,480 --> 00:29:38,640
that's not that great i mean

00:29:35,520 --> 00:29:40,159
you can talk to a websocket which maybe

00:29:38,640 --> 00:29:42,000
has a server that sets that up but the

00:29:40,159 --> 00:29:43,440
problem is that server is going to live

00:29:42,000 --> 00:29:45,039
in a specific place

00:29:43,440 --> 00:29:47,039
it's probably not going to be very

00:29:45,039 --> 00:29:49,200
dynamic if

00:29:47,039 --> 00:29:50,880
network changes and like servers can go

00:29:49,200 --> 00:29:52,159
offline you could you could do a ring of

00:29:50,880 --> 00:29:54,399
servers but then

00:29:52,159 --> 00:29:56,720
that's a little bit complicated too so

00:29:54,399 --> 00:30:00,559
one technique that i've been

00:29:56,720 --> 00:30:02,960
uh researching recently is this

00:30:00,559 --> 00:30:04,880
approach for doing gossip networks and

00:30:02,960 --> 00:30:06,399
using a gossip network

00:30:04,880 --> 00:30:09,679
gossip network is basically when you

00:30:06,399 --> 00:30:12,159
have a random assortment of peers

00:30:09,679 --> 00:30:13,840
and you just tell each other what

00:30:12,159 --> 00:30:15,760
addresses you know about

00:30:13,840 --> 00:30:18,240
and once you've done that then you can

00:30:15,760 --> 00:30:20,640
create ad ad hoc subnets

00:30:18,240 --> 00:30:21,679
so what if i could create an ad hoc

00:30:20,640 --> 00:30:25,520
subnet

00:30:21,679 --> 00:30:26,799
for for webrtc introductions that would

00:30:25,520 --> 00:30:29,120
be a much more fluid

00:30:26,799 --> 00:30:30,240
much more participate participatory

00:30:29,120 --> 00:30:32,720
architecture

00:30:30,240 --> 00:30:33,520
so here's here's it's very early stages

00:30:32,720 --> 00:30:37,039
but

00:30:33,520 --> 00:30:38,960
here i've got a server running

00:30:37,039 --> 00:30:40,640
on the right and i've got a client

00:30:38,960 --> 00:30:42,399
running on the left and they're

00:30:40,640 --> 00:30:44,159
exchanging addresses i mean there's only

00:30:42,399 --> 00:30:46,720
two nodes in the network right now

00:30:44,159 --> 00:30:47,760
but ideally they're speaking web sockets

00:30:46,720 --> 00:30:50,480
so a browser

00:30:47,760 --> 00:30:52,159
all that a browser needs to do is

00:30:50,480 --> 00:30:54,000
connect to this network

00:30:52,159 --> 00:30:56,080
and then it can use the network to do

00:30:54,000 --> 00:30:58,320
the signaling introductions

00:30:56,080 --> 00:30:59,519
but also you could use that for so many

00:30:58,320 --> 00:31:01,760
other things because

00:30:59,519 --> 00:31:03,600
if you have a subnetting scheme that

00:31:01,760 --> 00:31:05,760
works in a peer-to-peer fashion

00:31:03,600 --> 00:31:07,519
then what you can do is make little

00:31:05,760 --> 00:31:09,120
subnets for any kind of

00:31:07,519 --> 00:31:11,279
peer-to-peer architecture you want like

00:31:09,120 --> 00:31:12,799
if you want to run a dht like bittorrent

00:31:11,279 --> 00:31:14,320
you can put that in a subnet

00:31:12,799 --> 00:31:16,559
if you want to make a distributed chat

00:31:14,320 --> 00:31:18,000
protocol you can just fire up a subnet

00:31:16,559 --> 00:31:20,320
and i think this stuff will probably get

00:31:18,000 --> 00:31:22,320
to the point where all that it takes

00:31:20,320 --> 00:31:24,320
is like you know a three-line kind of

00:31:22,320 --> 00:31:27,360
sakadeo style example where

00:31:24,320 --> 00:31:28,720
you just paste some some little snippet

00:31:27,360 --> 00:31:29,519
into your page and all of a sudden

00:31:28,720 --> 00:31:33,039
you've got this

00:31:29,519 --> 00:31:36,559
amazing distributed robust architecture

00:31:33,039 --> 00:31:36,559
to start using so

00:31:37,360 --> 00:31:40,399
so that's mostly all that i've been

00:31:39,679 --> 00:31:47,840
working on

00:31:40,399 --> 00:31:47,840
lately so hack the planet thanks

00:31:52,240 --> 00:31:55,679
all right all right we'll take some

00:31:53,760 --> 00:31:58,000
questions

00:31:55,679 --> 00:32:00,080
there has to be something i didn't see

00:31:58,000 --> 00:32:03,440
anything on twitter so

00:32:00,080 --> 00:32:07,200
hence please

00:32:03,440 --> 00:32:10,159
no one are you kidding me i mean

00:32:07,200 --> 00:32:12,559
is it a joke is everyone joking here

00:32:10,159 --> 00:32:14,960
can't see any hands

00:32:12,559 --> 00:32:16,399
really okay there's someone over there i

00:32:14,960 --> 00:32:18,720
couldn't see you because the light is

00:32:16,399 --> 00:32:21,919
like right in my face

00:32:18,720 --> 00:32:24,159
it's like being on the beach basically

00:32:21,919 --> 00:32:25,519
could you talk a little bit about denial

00:32:24,159 --> 00:32:28,159
of service attacks

00:32:25,519 --> 00:32:29,519
and what that means with respect to a

00:32:28,159 --> 00:32:32,720
lot of peer-to-peer type

00:32:29,519 --> 00:32:35,760
databases and networks yeah

00:32:32,720 --> 00:32:38,000
so uh there's

00:32:35,760 --> 00:32:38,880
so the the kind of attacks that you can

00:32:38,000 --> 00:32:41,279
pull off against

00:32:38,880 --> 00:32:42,000
a peer-to-peer network are a little bit

00:32:41,279 --> 00:32:45,519
different

00:32:42,000 --> 00:32:46,399
so denial of service attacks mostly take

00:32:45,519 --> 00:32:49,519
the form

00:32:46,399 --> 00:32:51,440
of like civil attacks where you spin up

00:32:49,519 --> 00:32:54,000
a bunch of nodes that just spam the

00:32:51,440 --> 00:32:56,640
network with just garbage information

00:32:54,000 --> 00:32:57,840
so one of the techniques that i've seen

00:32:56,640 --> 00:33:01,200
for addressing that is

00:32:57,840 --> 00:33:02,000
to um when you when you get addresses

00:33:01,200 --> 00:33:04,480
from your peers

00:33:02,000 --> 00:33:05,919
in your gossip network what you can do

00:33:04,480 --> 00:33:08,240
is

00:33:05,919 --> 00:33:10,080
you make you keep track of where that

00:33:08,240 --> 00:33:13,279
information came from

00:33:10,080 --> 00:33:15,279
and then you throttle based on all of

00:33:13,279 --> 00:33:18,000
the nodes so you do like round robin

00:33:15,279 --> 00:33:18,880
kind of style balancing of the address

00:33:18,000 --> 00:33:20,559
scheme

00:33:18,880 --> 00:33:22,080
i haven't actually tried that yet though

00:33:20,559 --> 00:33:24,159
but i've

00:33:22,080 --> 00:33:25,600
read a little bit about that technique

00:33:24,159 --> 00:33:26,159
so that's that's something that i want

00:33:25,600 --> 00:33:27,760
to try

00:33:26,159 --> 00:33:30,000
but i'll have to see if it actually

00:33:27,760 --> 00:33:30,000
works

00:33:32,960 --> 00:33:39,840
anyone else upstairs still asleep for

00:33:36,159 --> 00:33:39,840
second in a row

00:33:40,399 --> 00:33:47,330
no one else okay

00:33:44,000 --> 00:33:49,200
going once going twice seriously

00:33:47,330 --> 00:33:51,519
[Music]

00:33:49,200 --> 00:33:52,240
they can just ask their questions out in

00:33:51,519 --> 00:33:55,440
the hall

00:33:52,240 --> 00:33:58,880
yeah that's true yes sir okay

00:33:55,440 --> 00:33:58,880
oh no there is a question

00:34:02,640 --> 00:34:08,000
um have you ever thought about

00:34:06,650 --> 00:34:11,280
[Music]

00:34:08,000 --> 00:34:14,720
like making git which is a distributed

00:34:11,280 --> 00:34:18,000
protocol like actually distributed

00:34:14,720 --> 00:34:18,000
like to propagate

00:34:18,399 --> 00:34:25,679
to multiple nodes automatically um

00:34:22,000 --> 00:34:28,079
maybe even with issues or pull requests

00:34:25,679 --> 00:34:29,520
um i thought a little bit about that i

00:34:28,079 --> 00:34:31,280
think some other folks

00:34:29,520 --> 00:34:33,200
are researching that a little more

00:34:31,280 --> 00:34:34,720
heavily but i mean

00:34:33,200 --> 00:34:36,480
so one problem with automatic

00:34:34,720 --> 00:34:36,960
propagation is that you have to sort of

00:34:36,480 --> 00:34:38,960
have a

00:34:36,960 --> 00:34:40,000
pre-existing arrangement with other

00:34:38,960 --> 00:34:42,399
peers

00:34:40,000 --> 00:34:44,560
so that because otherwise like why why

00:34:42,399 --> 00:34:46,560
should some random server accept

00:34:44,560 --> 00:34:48,879
random data from people that it doesn't

00:34:46,560 --> 00:34:50,320
know about right

00:34:48,879 --> 00:34:52,399
but i think it's possible to kind of

00:34:50,320 --> 00:34:54,639
establish trust relationships with nodes

00:34:52,399 --> 00:34:55,440
but it's a little bit tricky in terms of

00:34:54,639 --> 00:34:57,599
stuff like

00:34:55,440 --> 00:34:59,760
the metadata for like pull requests

00:34:57,599 --> 00:35:02,320
that's probably not that much data

00:34:59,760 --> 00:35:04,560
so that might be a little bit lighter

00:35:02,320 --> 00:35:04,560
weight

00:35:04,880 --> 00:35:09,200
so one thing you could do is basically

00:35:07,599 --> 00:35:11,040
build twitter

00:35:09,200 --> 00:35:12,400
over a peer-to-peer network because then

00:35:11,040 --> 00:35:14,480
you can just use that for

00:35:12,400 --> 00:35:17,280
a feed of data and if you have a feed of

00:35:14,480 --> 00:35:19,119
data you've got an append only log

00:35:17,280 --> 00:35:20,880
and you can create indexes and whatever

00:35:19,119 --> 00:35:21,839
other kinds of information you need on

00:35:20,880 --> 00:35:23,040
top of that log

00:35:21,839 --> 00:35:25,040
so once you have that basic

00:35:23,040 --> 00:35:26,800
infrastructure in place

00:35:25,040 --> 00:35:28,800
oh i didn't mention it in my talk but

00:35:26,800 --> 00:35:30,160
i've also got a pull request

00:35:28,800 --> 00:35:32,079
there's an extension to the bittorrent

00:35:30,160 --> 00:35:35,680
protocol called

00:35:32,079 --> 00:35:38,480
extension 44 that lets you treat the dht

00:35:35,680 --> 00:35:40,079
as a just like an arbitrary key value

00:35:38,480 --> 00:35:43,200
store pretty much so you could store

00:35:40,079 --> 00:35:45,119
like a pointer to a feed for example

00:35:43,200 --> 00:35:46,880
and that feed could be content addressed

00:35:45,119 --> 00:35:48,400
and it could just point backward

00:35:46,880 --> 00:35:50,000
um you could do that that kind of a

00:35:48,400 --> 00:35:52,480
trick for github but

00:35:50,000 --> 00:35:53,200
i think a lot of the value in something

00:35:52,480 --> 00:35:56,720
like

00:35:53,200 --> 00:35:59,680
like github hosting is just all of the

00:35:56,720 --> 00:36:01,599
ui stuff and like we can get the

00:35:59,680 --> 00:36:03,200
protocols down pretty well but we also

00:36:01,599 --> 00:36:06,240
need people to come in and

00:36:03,200 --> 00:36:08,480
like make a usable ui

00:36:06,240 --> 00:36:09,599
that's often the thing most lacking in

00:36:08,480 --> 00:36:12,800
open source projects

00:36:09,599 --> 00:36:16,240
i think

00:36:12,800 --> 00:36:19,520
uh all right let's take it

00:36:16,240 --> 00:36:20,640
uh i have a question it's nice to do

00:36:19,520 --> 00:36:22,560
some tricks like this

00:36:20,640 --> 00:36:24,560
in small sample but whatever you have

00:36:22,560 --> 00:36:26,480
like really huge systems

00:36:24,560 --> 00:36:28,000
and you do some checks of all content

00:36:26,480 --> 00:36:29,839
like every time and it's like

00:36:28,000 --> 00:36:32,240
you know millions of tweets as you say

00:36:29,839 --> 00:36:33,599
twitter but what if you had really

00:36:32,240 --> 00:36:35,680
twitter data and it would be

00:36:33,599 --> 00:36:36,480
peer-to-peer and it would be so long

00:36:35,680 --> 00:36:39,680
would it be

00:36:36,480 --> 00:36:42,800
just slower and slower um well

00:36:39,680 --> 00:36:44,960
so i've not done

00:36:42,800 --> 00:36:45,839
very many simulations with too many

00:36:44,960 --> 00:36:49,760
nodes yet

00:36:45,839 --> 00:36:51,440
um so you're just researching things so

00:36:49,760 --> 00:36:54,640
one of the techniques that you can use

00:36:51,440 --> 00:36:56,880
to achieve scale

00:36:54,640 --> 00:36:58,320
i mean if you think about a network like

00:36:56,880 --> 00:37:00,400
bittorrent i mean

00:36:58,320 --> 00:37:02,160
it has it has really interesting scaling

00:37:00,400 --> 00:37:03,599
properties because the more people use

00:37:02,160 --> 00:37:07,119
it the better it works

00:37:03,599 --> 00:37:09,599
for everyone because nodes are helping

00:37:07,119 --> 00:37:12,300
to distribute the address information

00:37:09,599 --> 00:37:14,000
they're helping to distribute files

00:37:12,300 --> 00:37:17,359
[Music]

00:37:14,000 --> 00:37:19,839
but i think ideally

00:37:17,359 --> 00:37:21,119
these kinds of networks especially

00:37:19,839 --> 00:37:22,880
purenet

00:37:21,119 --> 00:37:24,480
tend to work better the more nodes you

00:37:22,880 --> 00:37:26,000
have and actually they kind of don't

00:37:24,480 --> 00:37:28,320
work very well if you only have like a

00:37:26,000 --> 00:37:30,560
few hundred nodes for example

00:37:28,320 --> 00:37:30,560
so

00:37:31,920 --> 00:37:37,520
okay we have to be done right now so

00:37:35,040 --> 00:37:38,480
if someone has any further questions

00:37:37,520 --> 00:37:41,839
they will have to

00:37:38,480 --> 00:37:51,839
find you in the hall okay

00:37:41,839 --> 00:37:51,839
thank you

00:37:56,560 --> 00:37:58,640

YouTube URL: https://www.youtube.com/watch?v=4DC8yd37H6U


