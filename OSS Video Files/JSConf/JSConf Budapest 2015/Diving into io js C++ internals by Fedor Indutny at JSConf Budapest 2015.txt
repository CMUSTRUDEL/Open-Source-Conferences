Title: Diving into io js C++ internals by Fedor Indutny at JSConf Budapest 2015
Publication date: 2020-09-23
Playlist: JSConf Budapest 2015
Description: 
	Slides: http://jsconfbp.indutny.com/#/

http://jsconfbp.com/#indutny

Exploring the code and file structure of the internal C++ core bindings of io.js
Captions: 
	00:00:15,839 --> 00:00:19,760
uh

00:00:16,160 --> 00:00:22,000
hello today i'm going to talk about uh

00:00:19,760 --> 00:00:23,119
diving into c plus plus internal so fire

00:00:22,000 --> 00:00:25,359
address

00:00:23,119 --> 00:00:26,160
so as it has been already said my name

00:00:25,359 --> 00:00:27,920
is fedor and

00:00:26,160 --> 00:00:29,920
i'm working on my address and sometimes

00:00:27,920 --> 00:00:32,079
on node.js and eventually i think we're

00:00:29,920 --> 00:00:35,680
going to work on node.js again

00:00:32,079 --> 00:00:37,120
uh yeah so this is a qr code of this

00:00:35,680 --> 00:00:39,200
slideshow and the link

00:00:37,120 --> 00:00:40,879
so if you would like to follow it while

00:00:39,200 --> 00:00:44,079
i will be speaking you could

00:00:40,879 --> 00:00:47,039
feel free to open it and play with it

00:00:44,079 --> 00:00:49,520
a bit okay darwin intercepts plus

00:00:47,039 --> 00:00:51,680
internals of i or jess

00:00:49,520 --> 00:00:52,640
and also it has an alternative title

00:00:51,680 --> 00:00:55,600
that i would like to

00:00:52,640 --> 00:00:59,039
speak about too and this is a history of

00:00:55,600 --> 00:01:02,000
a git blame

00:00:59,039 --> 00:01:03,120
okay c plus plus talk on a javascript

00:01:02,000 --> 00:01:05,280
conference

00:01:03,120 --> 00:01:06,960
this guy must be mad why javascript

00:01:05,280 --> 00:01:08,159
developer would be interested in this

00:01:06,960 --> 00:01:10,479
but

00:01:08,159 --> 00:01:12,640
like anyone cares about it or writing

00:01:10,479 --> 00:01:15,119
simple plus a lot here

00:01:12,640 --> 00:01:17,200
but in fact if you ever tried to

00:01:15,119 --> 00:01:17,520
optimize your javascript code to squeeze

00:01:17,200 --> 00:01:19,360
out

00:01:17,520 --> 00:01:20,560
every possible performance improvement

00:01:19,360 --> 00:01:23,280
or memory stage improvement

00:01:20,560 --> 00:01:26,080
from it you are most likely already

00:01:23,280 --> 00:01:28,720
written some simple source code

00:01:26,080 --> 00:01:30,479
many blog posts workshops mention ways

00:01:28,720 --> 00:01:32,640
to optimize javascript and some of the

00:01:30,479 --> 00:01:33,280
suggestions are to avoid creating

00:01:32,640 --> 00:01:35,840
properties

00:01:33,280 --> 00:01:36,560
on the instances of objects in runtime

00:01:35,840 --> 00:01:39,680
it is

00:01:36,560 --> 00:01:41,280
also called avoid hidden classes when

00:01:39,680 --> 00:01:44,000
speaking about v8 at least

00:01:41,280 --> 00:01:45,280
and in case of following this suggestion

00:01:44,000 --> 00:01:47,200
you usually

00:01:45,280 --> 00:01:48,640
declare the properties in the

00:01:47,200 --> 00:01:50,640
constructor of the class

00:01:48,640 --> 00:01:52,320
and it looks really similar to the

00:01:50,640 --> 00:01:53,119
simples plus because in c plus plus you

00:01:52,320 --> 00:01:55,520
always

00:01:53,119 --> 00:01:58,880
put the properties in the declaration of

00:01:55,520 --> 00:02:00,719
the class or the structure

00:01:58,880 --> 00:02:02,159
second suggestion is to avoid

00:02:00,719 --> 00:02:05,920
polymorphism

00:02:02,159 --> 00:02:09,679
or in simpler words to

00:02:05,920 --> 00:02:10,879
have to avoid having different types of

00:02:09,679 --> 00:02:13,920
values as in

00:02:10,879 --> 00:02:15,520
variables or arguments as a function in

00:02:13,920 --> 00:02:18,560
this example i have a

00:02:15,520 --> 00:02:20,160
function called at and it just performs

00:02:18,560 --> 00:02:21,200
additional two numbers and if i will

00:02:20,160 --> 00:02:23,360
pass

00:02:21,200 --> 00:02:25,440
numbers to it like very often it will be

00:02:23,360 --> 00:02:28,640
optimized for the case of numbers

00:02:25,440 --> 00:02:29,360
but if i suddenly decide to once pass

00:02:28,640 --> 00:02:31,200
even once

00:02:29,360 --> 00:02:33,040
to pass the strings to it it will be

00:02:31,200 --> 00:02:34,879
optimized and the compiler will

00:02:33,040 --> 00:02:36,800
eventually generate the code that we

00:02:34,879 --> 00:02:38,879
that will support both cases for strings

00:02:36,800 --> 00:02:40,720
and numbers so in the general case that

00:02:38,879 --> 00:02:41,760
i'm using here is numbers it will be a

00:02:40,720 --> 00:02:43,280
bit slower

00:02:41,760 --> 00:02:45,280
so here is a suggestion a white

00:02:43,280 --> 00:02:46,319
polymorphism and it's really similar to

00:02:45,280 --> 00:02:48,640
c plus plus

00:02:46,319 --> 00:02:50,879
because you always declare types here

00:02:48,640 --> 00:02:54,080
well almost always

00:02:50,879 --> 00:02:56,800
and third suggestion is to cache

00:02:54,080 --> 00:02:57,760
and reuse objects that are expensive to

00:02:56,800 --> 00:03:00,000
create

00:02:57,760 --> 00:03:02,239
we do it in a node.jsi address we do it

00:03:00,000 --> 00:03:04,239
for parser for http parser because it's

00:03:02,239 --> 00:03:06,560
quite a bit expensive to create because

00:03:04,239 --> 00:03:09,120
it goes from javascript to c plus plus

00:03:06,560 --> 00:03:10,000
back to the javascript so we cache its

00:03:09,120 --> 00:03:12,000
instances

00:03:10,000 --> 00:03:13,120
and reuse them once they are needed

00:03:12,000 --> 00:03:16,480
again

00:03:13,120 --> 00:03:18,640
works like a charm and uh yeah of course

00:03:16,480 --> 00:03:19,840
it's oh of course it's the same in the c

00:03:18,640 --> 00:03:21,840
plus plus because you

00:03:19,840 --> 00:03:23,360
and allocate memory manually here in

00:03:21,840 --> 00:03:25,920
most of the cases

00:03:23,360 --> 00:03:28,879
so to conclude first javascript is

00:03:25,920 --> 00:03:31,440
practically very similar to c plus plus

00:03:28,879 --> 00:03:33,840
so i put here a double equals because of

00:03:31,440 --> 00:03:33,840
this

00:03:33,920 --> 00:03:41,200
io and node.js use cnc plus plus a lot

00:03:37,519 --> 00:03:43,120
internally if you didn't know about

00:03:41,200 --> 00:03:45,360
and then the reason for this is that v8

00:03:43,120 --> 00:03:46,000
is written in c plus it has c plus plus

00:03:45,360 --> 00:03:47,599
apis

00:03:46,000 --> 00:03:49,680
simple splash headers and stuff like

00:03:47,599 --> 00:03:51,519
that so if you will ever need to use it

00:03:49,680 --> 00:03:53,680
you will most likely need to

00:03:51,519 --> 00:03:55,439
use either some wrapper or write cpus

00:03:53,680 --> 00:03:57,280
plus code

00:03:55,439 --> 00:03:59,920
and the second reason is that it

00:03:57,280 --> 00:04:01,920
provides only ecmascript apis which are

00:03:59,920 --> 00:04:03,680
pretty limited

00:04:01,920 --> 00:04:05,920
because of sandboxing but it's kind of

00:04:03,680 --> 00:04:08,239
cool unless you need timers or file

00:04:05,920 --> 00:04:10,720
system api or networking

00:04:08,239 --> 00:04:12,879
yeah so this is why we have node.js

00:04:10,720 --> 00:04:14,720
sequels plus player

00:04:12,879 --> 00:04:16,479
and this simple splash layer lives on

00:04:14,720 --> 00:04:17,919
top of the event loop which is provided

00:04:16,479 --> 00:04:19,840
by libby

00:04:17,919 --> 00:04:21,759
and c plus plus layer provides net

00:04:19,840 --> 00:04:25,360
sockets dns queries

00:04:21,759 --> 00:04:29,199
apis from file system to zlip bindings

00:04:25,360 --> 00:04:32,240
and lots of other stuff coming back to

00:04:29,199 --> 00:04:34,000
alternative title history of get blame i

00:04:32,240 --> 00:04:37,360
would like to suggest

00:04:34,000 --> 00:04:40,400
learning subject by learning its history

00:04:37,360 --> 00:04:42,160
and luckily not just is using git

00:04:40,400 --> 00:04:43,759
science at the beginning so the history

00:04:42,160 --> 00:04:45,280
of everything that we have ever done

00:04:43,759 --> 00:04:47,759
with c plus plus in the

00:04:45,280 --> 00:04:48,960
is in the output of the git lock and git

00:04:47,759 --> 00:04:51,440
blame

00:04:48,960 --> 00:04:53,840
in particular if you look at the output

00:04:51,440 --> 00:04:56,240
of git log dip suite you will see

00:04:53,840 --> 00:04:57,919
the history of v8 fighting us and it

00:04:56,240 --> 00:05:00,160
looks received history of us fighting

00:04:57,919 --> 00:05:03,840
the v8

00:05:00,160 --> 00:05:04,560
okay node.js begins not exactly like

00:05:03,840 --> 00:05:07,919
this but

00:05:04,560 --> 00:05:10,479
with this commit and commit lock says

00:05:07,919 --> 00:05:12,160
add readme and initial code

00:05:10,479 --> 00:05:13,600
unfortunately i can't really elaborate

00:05:12,160 --> 00:05:17,600
much from this

00:05:13,600 --> 00:05:20,000
so i i did check out it

00:05:17,600 --> 00:05:21,600
not yesterday but close to it and figure

00:05:20,000 --> 00:05:23,600
out that they had two c plus plus

00:05:21,600 --> 00:05:27,440
dependencies except v8

00:05:23,600 --> 00:05:31,520
one was sleep ebb a weird name right

00:05:27,440 --> 00:05:33,199
uh and dbb was a http server on top of

00:05:31,520 --> 00:05:34,240
the event loop for robbies that ryan

00:05:33,199 --> 00:05:36,960
dahl has

00:05:34,240 --> 00:05:38,560
written before the node.js but now it

00:05:36,960 --> 00:05:40,000
was used that that commits only four

00:05:38,560 --> 00:05:42,320
parts since http

00:05:40,000 --> 00:05:44,320
so not much but i guess he wanted to

00:05:42,320 --> 00:05:46,400
stay in his comfort zone

00:05:44,320 --> 00:05:49,280
second dependency is leap or i which

00:05:46,400 --> 00:05:52,240
stands for library for output input

00:05:49,280 --> 00:05:52,960
and it was used to create tcp server and

00:05:52,240 --> 00:05:54,880
it was running

00:05:52,960 --> 00:05:57,039
on top of the lbv so it's kind of

00:05:54,880 --> 00:05:58,800
implicit dependency so i didn't mention

00:05:57,039 --> 00:06:01,440
it in this list

00:05:58,800 --> 00:06:02,319
here is how the first ever javascript

00:06:01,440 --> 00:06:04,960
user code

00:06:02,319 --> 00:06:06,000
looked like for node.js it was just a

00:06:04,960 --> 00:06:08,319
single global

00:06:06,000 --> 00:06:10,319
process function which accepted a

00:06:08,319 --> 00:06:12,800
request argument that it was performing

00:06:10,319 --> 00:06:12,800
some stuff

00:06:13,039 --> 00:06:17,520
but how was it organized internally

00:06:15,440 --> 00:06:20,400
there was a server.cc file

00:06:17,520 --> 00:06:21,039
cc is an extension for c plus sometimes

00:06:20,400 --> 00:06:24,639
it's

00:06:21,039 --> 00:06:27,759
cpp uh and this file was used for

00:06:24,639 --> 00:06:29,919
command line arguments parsing um for

00:06:27,759 --> 00:06:31,840
initializing javascript for initializing

00:06:29,919 --> 00:06:34,240
the v8 and loading euro code from the

00:06:31,840 --> 00:06:35,280
first argument executing it and then

00:06:34,240 --> 00:06:40,400
execution

00:06:35,280 --> 00:06:43,520
flown to the jshprequestprocessor.cc

00:06:40,400 --> 00:06:45,600
this file created http server and was

00:06:43,520 --> 00:06:48,400
invoking this process function for every

00:06:45,600 --> 00:06:49,919
incoming request

00:06:48,400 --> 00:06:52,240
almost nothing was working at this point

00:06:49,919 --> 00:06:53,840
so when i built it i tried to execute it

00:06:52,240 --> 00:06:57,599
it was

00:06:53,840 --> 00:07:00,639
throwing errors all over the way but i

00:06:57,599 --> 00:07:02,319
i after some tweaking i was able to run

00:07:00,639 --> 00:07:05,599
it and it was reported in the

00:07:02,319 --> 00:07:07,599
incoming uri so it was just a proof of

00:07:05,599 --> 00:07:10,000
the concept

00:07:07,599 --> 00:07:10,720
summary of what we could see in that

00:07:10,000 --> 00:07:12,560
version

00:07:10,720 --> 00:07:14,560
there was one file to set up create and

00:07:12,560 --> 00:07:17,680
call online arguments

00:07:14,560 --> 00:07:19,199
sheetp error was in c plus without

00:07:17,680 --> 00:07:21,440
any networking events emitted in

00:07:19,199 --> 00:07:23,039
javascript or any

00:07:21,440 --> 00:07:24,639
you know complex stuff that we have

00:07:23,039 --> 00:07:26,560
right now

00:07:24,639 --> 00:07:28,880
and there was one simple splash instance

00:07:26,560 --> 00:07:31,520
for every incoming http request

00:07:28,880 --> 00:07:33,440
this is a kind of important because this

00:07:31,520 --> 00:07:34,880
way it provided the mapping

00:07:33,440 --> 00:07:37,039
from the c plus plus instance to

00:07:34,880 --> 00:07:38,080
javascript object it was set in uri

00:07:37,039 --> 00:07:40,880
headers and methods

00:07:38,080 --> 00:07:42,880
on javascript object and it was kind of

00:07:40,880 --> 00:07:44,479
mapping to the c plus plus instance

00:07:42,880 --> 00:07:46,720
this is the pattern that we are going to

00:07:44,479 --> 00:07:49,120
use and we are using this right now too

00:07:46,720 --> 00:07:51,840
so this is important to note now we

00:07:49,120 --> 00:07:54,400
quickly jump to next commit

00:07:51,840 --> 00:07:56,639
commit lock says use object rep base

00:07:54,400 --> 00:08:00,000
class for file socket and server

00:07:56,639 --> 00:08:02,080
much better now so this means

00:08:00,000 --> 00:08:03,599
there is one api now to wrap all the

00:08:02,080 --> 00:08:07,599
objects

00:08:03,599 --> 00:08:10,560
and the nic in this api rows because

00:08:07,599 --> 00:08:12,639
there are now net server net socket file

00:08:10,560 --> 00:08:14,479
that are all uh

00:08:12,639 --> 00:08:16,080
the simplest classes that are mapped to

00:08:14,479 --> 00:08:19,039
the javascript objects so they

00:08:16,080 --> 00:08:20,720
need to be mapped in some way and to

00:08:19,039 --> 00:08:22,800
duplicate the code we created

00:08:20,720 --> 00:08:24,240
object trap well actually they created

00:08:22,800 --> 00:08:27,919
without me i wasn't

00:08:24,240 --> 00:08:29,919
doing any stuff at that point but anyway

00:08:27,919 --> 00:08:32,479
file structure that commit was following

00:08:29,919 --> 00:08:34,560
there was crc slash not dot cc file

00:08:32,479 --> 00:08:35,919
which initialized c plus plus libraries

00:08:34,560 --> 00:08:39,440
and then it invoked

00:08:35,919 --> 00:08:41,680
crc slash main.js you see uh

00:08:39,440 --> 00:08:43,200
here emerges important patterns that we

00:08:41,680 --> 00:08:45,680
are going to use even now

00:08:43,200 --> 00:08:46,480
we are separating the consorts so it's

00:08:45,680 --> 00:08:48,800
kind of

00:08:46,480 --> 00:08:51,200
usual scene we try to do as much as

00:08:48,800 --> 00:08:53,920
possible in javascript in a simpler

00:08:51,200 --> 00:08:55,040
scripting language that can't crash uh

00:08:53,920 --> 00:08:57,200
kill your program

00:08:55,040 --> 00:08:59,120
and it's only the rest and stuff that we

00:08:57,200 --> 00:09:01,839
can do in the javascript we do in c

00:08:59,120 --> 00:09:04,320
plus plus so it is now executing sir c

00:09:01,839 --> 00:09:05,440
slash my index.js and this file loads

00:09:04,320 --> 00:09:07,839
user code

00:09:05,440 --> 00:09:09,040
this file compiles it and executes it

00:09:07,839 --> 00:09:12,640
and calls

00:09:09,040 --> 00:09:15,240
everything that happens in user code

00:09:12,640 --> 00:09:16,800
another file in c plus plus is serious

00:09:15,240 --> 00:09:20,080
http.cc

00:09:16,800 --> 00:09:23,399
it provides http server api connection

00:09:20,080 --> 00:09:24,800
and http request classes crc slash

00:09:23,399 --> 00:09:28,160
file.ccsrc

00:09:24,800 --> 00:09:31,519
file.js is a future fs module

00:09:28,160 --> 00:09:32,880
crc slash process.cc has only exit

00:09:31,519 --> 00:09:34,959
method right now

00:09:32,880 --> 00:09:37,440
and it will eventually become a future

00:09:34,959 --> 00:09:40,399
process object that we have now

00:09:37,440 --> 00:09:41,279
crc timers.cc provides just set them out

00:09:40,399 --> 00:09:44,640
and set interval

00:09:41,279 --> 00:09:45,279
so nothing surprising here uh just a

00:09:44,640 --> 00:09:48,320
side note

00:09:45,279 --> 00:09:50,959
http server is still provided by leap oi

00:09:48,320 --> 00:09:53,440
and node.js is using libby for event

00:09:50,959 --> 00:09:56,000
loop and asynchronous networking

00:09:53,440 --> 00:09:58,080
quickly jump into version 0.2 we see

00:09:56,000 --> 00:10:02,079
that it has grown a lot

00:09:58,080 --> 00:10:04,000
uh measure it a bit and there was large

00:10:02,079 --> 00:10:05,040
movement in separating javascript from c

00:10:04,000 --> 00:10:06,640
plus plus here

00:10:05,040 --> 00:10:08,399
so in the previous version there was

00:10:06,640 --> 00:10:10,079
still some stuff in c-class part that

00:10:08,399 --> 00:10:13,200
could be done in javascript

00:10:10,079 --> 00:10:14,160
and now we separated this almost

00:10:13,200 --> 00:10:16,880
everywhere

00:10:14,160 --> 00:10:18,160
where we can now node.js is using

00:10:16,880 --> 00:10:20,959
command.js

00:10:18,160 --> 00:10:23,519
for both userland modules and for

00:10:20,959 --> 00:10:25,760
internal modules and core modules

00:10:23,519 --> 00:10:27,600
and we have introduced tons of new core

00:10:25,760 --> 00:10:30,720
modules in this version

00:10:27,600 --> 00:10:32,480
file structure is following we now

00:10:30,720 --> 00:10:34,560
separate this stuff in the

00:10:32,480 --> 00:10:36,880
leap folder for all javascript core

00:10:34,560 --> 00:10:39,200
modulus and crc folder for the

00:10:36,880 --> 00:10:40,240
c plus plus contour parts um just in

00:10:39,200 --> 00:10:43,279
case dependencies

00:10:40,240 --> 00:10:45,279
live in a depth folder and this folder

00:10:43,279 --> 00:10:49,120
has ever seen from v8

00:10:45,279 --> 00:10:51,519
parsers crs for dns leap eio for

00:10:49,120 --> 00:10:54,880
asynchronous file system and libv for

00:10:51,519 --> 00:10:56,480
networking and event loop object reps

00:10:54,880 --> 00:10:59,440
that we previously

00:10:56,480 --> 00:11:02,240
seen that it was only immersion and was

00:10:59,440 --> 00:11:05,120
just created now it is a public api

00:11:02,240 --> 00:11:07,279
and the community and the core team

00:11:05,120 --> 00:11:09,120
members has polished it out a lot and

00:11:07,279 --> 00:11:11,920
it became much greater because of the

00:11:09,120 --> 00:11:14,240
community too

00:11:11,920 --> 00:11:16,320
previously all siplesplus classes were

00:11:14,240 --> 00:11:17,440
exposed to the javascript user code as a

00:11:16,320 --> 00:11:20,000
global object

00:11:17,440 --> 00:11:22,000
so it was kind of messy internal stuff

00:11:20,000 --> 00:11:24,240
was visible everywhere but

00:11:22,000 --> 00:11:25,120
since we are now using command.js we

00:11:24,240 --> 00:11:28,160
decided to

00:11:25,120 --> 00:11:31,279
move them in a secret place

00:11:28,160 --> 00:11:33,839
uh which is process.building so

00:11:31,279 --> 00:11:34,320
when you call it with let's say a first

00:11:33,839 --> 00:11:36,000
string

00:11:34,320 --> 00:11:39,120
it will return binding with this name

00:11:36,000 --> 00:11:42,320
and this binding contains just

00:11:39,120 --> 00:11:44,720
several functions and several classes

00:11:42,320 --> 00:11:46,880
every class and every function is mapped

00:11:44,720 --> 00:11:50,160
to some simplesplus instance so it's

00:11:46,880 --> 00:11:51,760
one to one maybe yeah and

00:11:50,160 --> 00:11:55,040
it's pretty similar for other modulars

00:11:51,760 --> 00:11:57,920
too if you would try to call it

00:11:55,040 --> 00:11:59,519
uh okay quickly jump into version 0.6

00:11:57,920 --> 00:12:01,839
now

00:11:59,519 --> 00:12:04,240
and uh what happened here the most

00:12:01,839 --> 00:12:07,200
important thing is that libya was a libv

00:12:04,240 --> 00:12:08,880
and leap eio was replaced by libya this

00:12:07,200 --> 00:12:09,760
was possible only because of lots of

00:12:08,880 --> 00:12:12,399
work by ben

00:12:09,760 --> 00:12:13,680
north hughes bird builder ryan dahl and

00:12:12,399 --> 00:12:16,720
other people

00:12:13,680 --> 00:12:17,200
which i'm really thankful for and uh it

00:12:16,720 --> 00:12:19,120
is a

00:12:17,200 --> 00:12:21,440
major milestone for node.js because we

00:12:19,120 --> 00:12:25,839
now have a windows support in it

00:12:21,440 --> 00:12:28,480
all because of dbv quickly jump into

00:12:25,839 --> 00:12:29,440
0.10 we could say probably only one

00:12:28,480 --> 00:12:32,959
thing

00:12:29,440 --> 00:12:35,519
uh it was boring but a bit stable

00:12:32,959 --> 00:12:36,079
so we jumped to zero to 12 on io.js and

00:12:35,519 --> 00:12:39,279
there are

00:12:36,079 --> 00:12:41,839
lots of new stuff that we are interested

00:12:39,279 --> 00:12:44,480
in in c plus plus this stock

00:12:41,839 --> 00:12:46,880
important thing to say now we are no

00:12:44,480 --> 00:12:48,240
longer using object rep internally

00:12:46,880 --> 00:12:49,760
and this is why it's important to learn

00:12:48,240 --> 00:12:50,800
the history because if we take a look at

00:12:49,760 --> 00:12:53,760
it now it will be

00:12:50,800 --> 00:12:54,480
seem unreasonable to you we are using a

00:12:53,760 --> 00:12:57,040
syncrep

00:12:54,480 --> 00:12:58,480
class instead and the reason uh the

00:12:57,040 --> 00:13:01,920
difference between them is that

00:12:58,480 --> 00:13:02,959
a syncrep has two uh fields that object

00:13:01,920 --> 00:13:04,480
cloud didn't have

00:13:02,959 --> 00:13:06,800
one of them as parent and second is

00:13:04,480 --> 00:13:07,760
provider type a provider type is

00:13:06,800 --> 00:13:10,480
basically saying

00:13:07,760 --> 00:13:11,519
what this c plus plus class instance is

00:13:10,480 --> 00:13:14,720
used for

00:13:11,519 --> 00:13:17,920
for example it could be file system dns

00:13:14,720 --> 00:13:20,959
tcp or that leap and parent

00:13:17,920 --> 00:13:22,480
says a point could be another syncrep

00:13:20,959 --> 00:13:26,079
and says

00:13:22,480 --> 00:13:28,079
uh how this syncrop instance that you're

00:13:26,079 --> 00:13:30,560
looking at was created

00:13:28,079 --> 00:13:32,079
example if you have http server and in

00:13:30,560 --> 00:13:35,600
request handler you

00:13:32,079 --> 00:13:36,639
do a synchronous fs right it will create

00:13:35,600 --> 00:13:39,760
a new sync wrap

00:13:36,639 --> 00:13:41,600
and this async wrap for fs.write will

00:13:39,760 --> 00:13:43,600
have a parent

00:13:41,600 --> 00:13:45,519
uh will have http request as a parent of

00:13:43,600 --> 00:13:47,440
it so if you will walk

00:13:45,519 --> 00:13:49,120
from this assembly up to its parent you

00:13:47,440 --> 00:13:51,760
will see sort of

00:13:49,120 --> 00:13:53,120
you could build a waterfall like in a

00:13:51,760 --> 00:13:53,920
fire bug or something like this to

00:13:53,120 --> 00:13:56,320
figure out

00:13:53,920 --> 00:13:57,360
what happened why happened and what kind

00:13:56,320 --> 00:13:59,360
of stuff

00:13:57,360 --> 00:14:01,360
happens in your application this is a

00:13:59,360 --> 00:14:02,240
part of the tracing apis that is still

00:14:01,360 --> 00:14:04,800
and works

00:14:02,240 --> 00:14:05,680
but i think it will eventually be

00:14:04,800 --> 00:14:09,760
available

00:14:05,680 --> 00:14:12,560
in a simple way to the users

00:14:09,760 --> 00:14:14,240
okay we have arrived now at the point

00:14:12,560 --> 00:14:15,440
the present point of the node.js in io

00:14:14,240 --> 00:14:19,920
address so it's time

00:14:15,440 --> 00:14:21,760
to stop the software archaeology and

00:14:19,920 --> 00:14:23,600
learn some real stuff so it's time to

00:14:21,760 --> 00:14:25,920
get into simples plus internals

00:14:23,600 --> 00:14:26,720
and we'll talk about interoperation

00:14:25,920 --> 00:14:31,120
handles

00:14:26,720 --> 00:14:33,920
reps and maybe unicorns uh

00:14:31,120 --> 00:14:34,880
yeah so there are two folders now except

00:14:33,920 --> 00:14:37,360
dependencies

00:14:34,880 --> 00:14:39,440
leap and crc and there are two folders

00:14:37,360 --> 00:14:42,720
that we are interested in

00:14:39,440 --> 00:14:44,639
when you call require fs

00:14:42,720 --> 00:14:45,760
it does nothing but just loads leap

00:14:44,639 --> 00:14:48,560
slash dot fs

00:14:45,760 --> 00:14:50,880
uh leave slash fs.gs and executes it so

00:14:48,560 --> 00:14:53,360
there is no magic happening here

00:14:50,880 --> 00:14:55,120
but no magic means that there is no fs

00:14:53,360 --> 00:14:55,760
operations to write because js is not

00:14:55,120 --> 00:14:58,160
capable

00:14:55,760 --> 00:15:00,160
uh offer phase operations by itself so

00:14:58,160 --> 00:15:00,800
it isn't capable of networking either

00:15:00,160 --> 00:15:03,040
and

00:15:00,800 --> 00:15:04,639
it's for the best believe me because of

00:15:03,040 --> 00:15:05,680
sandboxing because you don't want the

00:15:04,639 --> 00:15:08,720
chromium to

00:15:05,680 --> 00:15:12,399
ruin your file system or crack

00:15:08,720 --> 00:15:16,160
ssh servers somewhere but if you need

00:15:12,399 --> 00:15:19,199
a fs write file sync http request

00:15:16,160 --> 00:15:21,199
you probably need lots of simple stuff

00:15:19,199 --> 00:15:23,760
outside of the js land

00:15:21,199 --> 00:15:24,800
to figure out how it all plays together

00:15:23,760 --> 00:15:26,240
and how

00:15:24,800 --> 00:15:28,639
things are calling each other i would

00:15:26,240 --> 00:15:30,720
like to suggest to learn by example

00:15:28,639 --> 00:15:32,320
though uh recur office is kind of boring

00:15:30,720 --> 00:15:34,160
because it works just with the

00:15:32,320 --> 00:15:35,680
numbers you know file descriptor is just

00:15:34,160 --> 00:15:37,519
a number when you open file

00:15:35,680 --> 00:15:39,519
kernel is returning number and you pass

00:15:37,519 --> 00:15:40,399
number again plus the number is kind of

00:15:39,519 --> 00:15:43,440
boring

00:15:40,399 --> 00:15:45,680
so let's move to recur net

00:15:43,440 --> 00:15:47,199
and it does follow in stuff it creates

00:15:45,680 --> 00:15:50,240
circuits obviously

00:15:47,199 --> 00:15:52,800
it needs connect events when you

00:15:50,240 --> 00:15:54,480
when a connection is established and it

00:15:52,800 --> 00:15:57,040
supports writes and supports

00:15:54,480 --> 00:15:59,199
meet and write callbacks and all of this

00:15:57,040 --> 00:16:02,720
is powered by c plus plus machinery so

00:15:59,199 --> 00:16:06,320
we are really interested in this

00:16:02,720 --> 00:16:09,680
so how does leap slash dot slash fs.js

00:16:06,320 --> 00:16:10,160
gets this c stuff by process.bini as we

00:16:09,680 --> 00:16:12,800
already

00:16:10,160 --> 00:16:13,759
talked about and the buildings that we

00:16:12,800 --> 00:16:16,320
are interested in

00:16:13,759 --> 00:16:17,440
are tcp underscore app which lives in

00:16:16,320 --> 00:16:22,800
crc slash

00:16:17,440 --> 00:16:24,240
tcp underscore web.cc and stream rep

00:16:22,800 --> 00:16:26,639
these buildings provide following

00:16:24,240 --> 00:16:29,040
javascript classes tcp

00:16:26,639 --> 00:16:29,920
tsp connect wrap write wrap and shutdown

00:16:29,040 --> 00:16:32,639
wrap

00:16:29,920 --> 00:16:33,279
purpose of this class is following tcp

00:16:32,639 --> 00:16:36,560
holds

00:16:33,279 --> 00:16:37,199
the socket itself and it has methods to

00:16:36,560 --> 00:16:40,320
perform

00:16:37,199 --> 00:16:43,680
reads and writes on it and the rep

00:16:40,320 --> 00:16:45,839
is something that you pass in

00:16:43,680 --> 00:16:47,519
to the tcp instance when you want to do

00:16:45,839 --> 00:16:51,759
some asynchronous stuff

00:16:47,519 --> 00:16:54,639
so it's kind of request i don't know

00:16:51,759 --> 00:16:55,839
so i promised you an example net connect

00:16:54,639 --> 00:16:58,880
works in the following way

00:16:55,839 --> 00:17:01,920
first a tcp instance is created

00:16:58,880 --> 00:17:03,680
remember tcp is actually a javascript

00:17:01,920 --> 00:17:05,760
class that is mapped to c plus plus

00:17:03,680 --> 00:17:07,120
class so it's invoking internals of

00:17:05,760 --> 00:17:09,839
node.js

00:17:07,120 --> 00:17:11,120
then it stores tcp in underscore handle

00:17:09,839 --> 00:17:13,280
of the net socket

00:17:11,120 --> 00:17:15,120
i think probably raise your hand if you

00:17:13,280 --> 00:17:16,319
know what's underscore handler if you've

00:17:15,120 --> 00:17:19,919
ever seen it

00:17:16,319 --> 00:17:20,559
no one's in okay yeah so uh if you ever

00:17:19,919 --> 00:17:24,079
used

00:17:20,559 --> 00:17:25,919
nets api directly net socket has

00:17:24,079 --> 00:17:28,000
underscore handle property and this one

00:17:25,919 --> 00:17:29,280
points to simple plus instance of tcp

00:17:28,000 --> 00:17:31,520
class

00:17:29,280 --> 00:17:32,880
then it is parsing arguments to the net

00:17:31,520 --> 00:17:35,280
connect

00:17:32,880 --> 00:17:36,080
as you probably remember net connect

00:17:35,280 --> 00:17:38,880
accepts

00:17:36,080 --> 00:17:39,760
port callback signature or support host

00:17:38,880 --> 00:17:42,240
callback

00:17:39,760 --> 00:17:44,240
and options callbacks so it's there are

00:17:42,240 --> 00:17:46,799
several ways to pass

00:17:44,240 --> 00:17:48,480
the options that you want to use for

00:17:46,799 --> 00:17:50,400
connection to it and it needs to put

00:17:48,480 --> 00:17:52,240
them in separate variables to simplify

00:17:50,400 --> 00:17:54,400
how it works with c plus plus

00:17:52,240 --> 00:17:56,240
then it creates the rep stuff that i was

00:17:54,400 --> 00:17:57,039
talking about so it creates tcp connect

00:17:56,240 --> 00:17:59,360
wrap

00:17:57,039 --> 00:18:00,799
and it's calling it's called tcp connect

00:17:59,360 --> 00:18:04,880
rec port

00:18:00,799 --> 00:18:08,480
host and then once c plus plus internals

00:18:04,880 --> 00:18:10,080
will connect to the host using the event

00:18:08,480 --> 00:18:13,120
loop and a kernel it will

00:18:10,080 --> 00:18:14,720
invoke request dot on complete so this

00:18:13,120 --> 00:18:16,960
is why we need the request because we

00:18:14,720 --> 00:18:19,520
would like to

00:18:16,960 --> 00:18:20,320
send a notification to the javascript

00:18:19,520 --> 00:18:22,400
code when the

00:18:20,320 --> 00:18:24,400
action is completed so tcp socket

00:18:22,400 --> 00:18:28,400
usually leaves more than

00:18:24,400 --> 00:18:30,400
the rep so the conclusion handles

00:18:28,400 --> 00:18:34,160
is like tcp there are two types of

00:18:30,400 --> 00:18:37,360
classes sorry handles it's like tcp udp

00:18:34,160 --> 00:18:38,000
even that leap is a handle reps are

00:18:37,360 --> 00:18:40,880
requests

00:18:38,000 --> 00:18:41,440
so it's a sync request verb and reps

00:18:40,880 --> 00:18:44,400
leave

00:18:41,440 --> 00:18:46,000
much shorter than the handle instances

00:18:44,400 --> 00:18:47,919
because you usually connect only once a

00:18:46,000 --> 00:18:48,559
circuit to perform right before closing

00:18:47,919 --> 00:18:51,919
the circuit

00:18:48,559 --> 00:18:55,039
and stuff like that file structure

00:18:51,919 --> 00:18:58,240
now looks like this crc slash

00:18:55,039 --> 00:18:59,360
tcp underscore wrap.cc has tcp rep jsp

00:18:58,240 --> 00:19:02,000
connect wrap

00:18:59,360 --> 00:19:03,840
and stream base and io.js and now it

00:19:02,000 --> 00:19:06,960
will be in node.js2 eventually

00:19:03,840 --> 00:19:10,000
has a right wrap and shutdown wrap and

00:19:06,960 --> 00:19:11,919
it's structured in the following way but

00:19:10,000 --> 00:19:15,200
to figure out how the structure is

00:19:11,919 --> 00:19:17,360
simple plus we need to ask ourselves

00:19:15,200 --> 00:19:19,440
we need to go from the point where

00:19:17,360 --> 00:19:20,880
javascript is starting to interact with

00:19:19,440 --> 00:19:22,320
the c-plus plus and it's starting to

00:19:20,880 --> 00:19:25,520
interact from process.bin

00:19:22,320 --> 00:19:26,960
so how does these siplus plus files that

00:19:25,520 --> 00:19:28,480
i was talking about

00:19:26,960 --> 00:19:30,240
tell javascript that they have some

00:19:28,480 --> 00:19:32,720
bindings to provide

00:19:30,240 --> 00:19:34,880
they use following a macro a

00:19:32,720 --> 00:19:35,440
construction in c plus plus code so if

00:19:34,880 --> 00:19:37,760
you will

00:19:35,440 --> 00:19:38,880
clone the io address or an address

00:19:37,760 --> 00:19:41,200
project and noble simplest

00:19:38,880 --> 00:19:43,120
file you will see node module contacts

00:19:41,200 --> 00:19:46,480
the wearable thing at the very bottom of

00:19:43,120 --> 00:19:48,960
it and it tells two things first

00:19:46,480 --> 00:19:50,320
is the name of the binding is it is the

00:19:48,960 --> 00:19:52,320
same string that you pass

00:19:50,320 --> 00:19:54,240
to the process.binion function and

00:19:52,320 --> 00:19:56,320
second is the function that this will be

00:19:54,240 --> 00:19:58,880
used for installation process

00:19:56,320 --> 00:20:00,640
and it has kind of the same effect as

00:19:58,880 --> 00:20:03,760
following javascript called snippet

00:20:00,640 --> 00:20:06,240
so just puts the binding onto some kind

00:20:03,760 --> 00:20:10,400
of internal hashmap in c plus plus

00:20:06,240 --> 00:20:12,400
and sets initialization function here

00:20:10,400 --> 00:20:13,679
so when you call process.binning it does

00:20:12,400 --> 00:20:16,159
nothing but just

00:20:13,679 --> 00:20:17,679
following javascript code it just gets

00:20:16,159 --> 00:20:20,159
the binding from the hashmap

00:20:17,679 --> 00:20:22,159
and initialized it if it wasn't

00:20:20,159 --> 00:20:24,720
initialized yet

00:20:22,159 --> 00:20:25,440
so what this installation function does

00:20:24,720 --> 00:20:28,400
it

00:20:25,440 --> 00:20:28,400
installates the model

00:20:28,640 --> 00:20:32,400
yeah so it does similar things that

00:20:30,880 --> 00:20:34,000
happen in common.js

00:20:32,400 --> 00:20:35,600
when you recur current model is actually

00:20:34,000 --> 00:20:36,320
executed only once and then the result

00:20:35,600 --> 00:20:38,559
is cached

00:20:36,320 --> 00:20:39,840
so this module module gets export

00:20:38,559 --> 00:20:41,760
subjects as an argument

00:20:39,840 --> 00:20:44,000
and simplest passcode is just putting

00:20:41,760 --> 00:20:45,039
various methods and simplesplus classes

00:20:44,000 --> 00:20:47,280
on this object

00:20:45,039 --> 00:20:48,480
so when process.binning is called and it

00:20:47,280 --> 00:20:51,600
returns with

00:20:48,480 --> 00:20:53,760
an object as we seen in uh very first

00:20:51,600 --> 00:20:56,000
slides about the fs module

00:20:53,760 --> 00:20:57,200
okay so with export function first yeah

00:20:56,000 --> 00:20:59,440
each exported

00:20:57,200 --> 00:21:02,080
javascript class has a c plus control

00:20:59,440 --> 00:21:02,880
part so it has some class declaration

00:21:02,080 --> 00:21:05,360
with um

00:21:02,880 --> 00:21:07,280
most likely similar name in c plus plus

00:21:05,360 --> 00:21:10,000
and you could always figure out

00:21:07,280 --> 00:21:11,120
which class it is related to by just

00:21:10,000 --> 00:21:13,360
looking at that name and

00:21:11,120 --> 00:21:15,039
figure out where the binding lives in a

00:21:13,360 --> 00:21:16,960
crc folder

00:21:15,039 --> 00:21:18,159
most of these c plus classes are

00:21:16,960 --> 00:21:21,200
actually

00:21:18,159 --> 00:21:23,120
inherited from the async wrap

00:21:21,200 --> 00:21:24,400
so they have kind of similar structure

00:21:23,120 --> 00:21:28,000
and similar apis

00:21:24,400 --> 00:21:29,360
internally okay uh before i go further

00:21:28,000 --> 00:21:31,520
just small reminders that there are two

00:21:29,360 --> 00:21:33,520
kind of classes handle and reps

00:21:31,520 --> 00:21:34,799
handlers like tsp reps it's stuff that

00:21:33,520 --> 00:21:36,400
you pass when you want to connect all

00:21:34,799 --> 00:21:39,760
right

00:21:36,400 --> 00:21:41,919
and certainly when you work with a

00:21:39,760 --> 00:21:44,159
javascript engine when you map c plus

00:21:41,919 --> 00:21:46,159
plus classes to javascript objects you

00:21:44,159 --> 00:21:48,960
should consider how this stuff will be

00:21:46,159 --> 00:21:50,159
interacting with a garbage collector in

00:21:48,960 --> 00:21:51,520
fact

00:21:50,159 --> 00:21:53,840
there are two different types of

00:21:51,520 --> 00:21:55,760
interactions that we have in node.js

00:21:53,840 --> 00:21:58,159
one is to let the garbage collector

00:21:55,760 --> 00:22:01,039
destroy stuff and this is what happens

00:21:58,159 --> 00:22:02,640
to handles when the they are closed when

00:22:01,039 --> 00:22:05,200
you close the tcp socket

00:22:02,640 --> 00:22:06,240
it will be destroyed only when the v8

00:22:05,200 --> 00:22:09,360
garbage collector would

00:22:06,240 --> 00:22:11,360
will decide to do this thing

00:22:09,360 --> 00:22:13,440
on other hand requests are manually

00:22:11,360 --> 00:22:17,200
destroyed by the c plus plus code so

00:22:13,440 --> 00:22:19,760
there is no need to wait for the jc

00:22:17,200 --> 00:22:21,120
to collect them and they are destroyed

00:22:19,760 --> 00:22:23,760
right after the

00:22:21,120 --> 00:22:26,000
sync action completion so once rick

00:22:23,760 --> 00:22:27,919
doton completes its called

00:22:26,000 --> 00:22:29,760
i think it's destroyed and it's not

00:22:27,919 --> 00:22:32,320
available anymore

00:22:29,760 --> 00:22:33,919
okay i guess you're pretty scared by now

00:22:32,320 --> 00:22:37,039
yeah

00:22:33,919 --> 00:22:37,039
time to test your skills

00:22:37,360 --> 00:22:45,039
situation let's say that you debug

00:22:41,200 --> 00:22:47,200
ios issue and uh for example io js is

00:22:45,039 --> 00:22:48,159
crashing on some code that you wrote or

00:22:47,200 --> 00:22:51,200
you see in kernel

00:22:48,159 --> 00:22:52,080
or in core modules and this code looks

00:22:51,200 --> 00:22:54,080
like this

00:22:52,080 --> 00:22:56,240
so it just gets the bindian with the

00:22:54,080 --> 00:22:56,960
name for bar gets a full bar class out

00:22:56,240 --> 00:23:00,159
of it

00:22:56,960 --> 00:23:00,960
and then uh it crashes when you try to

00:23:00,159 --> 00:23:04,080
instantiate the

00:23:00,960 --> 00:23:09,200
football class so the question is where

00:23:04,080 --> 00:23:10,960
will you search for a foobar

00:23:09,200 --> 00:23:12,720
okay uh you don't have a microphone

00:23:10,960 --> 00:23:13,600
anyway so i will answer the question

00:23:12,720 --> 00:23:15,840
myself

00:23:13,600 --> 00:23:17,679
you will try to search somewhere in crc

00:23:15,840 --> 00:23:19,440
folder because this is a folder where

00:23:17,679 --> 00:23:21,360
all the simplest plus stuff of node.js

00:23:19,440 --> 00:23:23,840
leaves and you will

00:23:21,360 --> 00:23:25,840
most likely will want to search for the

00:23:23,840 --> 00:23:27,200
node module context availability

00:23:25,840 --> 00:23:29,520
things that we were talking about

00:23:27,200 --> 00:23:32,720
because it's the way the binding tells

00:23:29,520 --> 00:23:35,679
about itself to the javascript and

00:23:32,720 --> 00:23:36,080
most likely this file will be named crc

00:23:35,679 --> 00:23:37,760
full

00:23:36,080 --> 00:23:39,600
underscore bar dot cc or something like

00:23:37,760 --> 00:23:41,840
this so it will most likely have a

00:23:39,600 --> 00:23:44,880
similar name to the meaning name

00:23:41,840 --> 00:23:45,919
okay i guess i have some time yeah i

00:23:44,880 --> 00:23:50,400
have one

00:23:45,919 --> 00:23:52,480
not much so i'd like to talk about

00:23:50,400 --> 00:23:54,240
my one of my recent obsessions and this

00:23:52,480 --> 00:23:57,039
is simple streams

00:23:54,240 --> 00:23:59,440
this is what we are trying to figure out

00:23:57,039 --> 00:24:00,799
and i address right now

00:23:59,440 --> 00:24:02,480
and would like to make it public

00:24:00,799 --> 00:24:03,600
eventually

00:24:02,480 --> 00:24:05,520
and the reason i would like to talk

00:24:03,600 --> 00:24:08,720
about it is because uh

00:24:05,520 --> 00:24:11,279
i want it to be public and

00:24:08,720 --> 00:24:13,360
when things become public they are

00:24:11,279 --> 00:24:14,799
usually polished out by community a lot

00:24:13,360 --> 00:24:17,120
and improved

00:24:14,799 --> 00:24:18,080
and the api got improved and stuff is

00:24:17,120 --> 00:24:20,000
getting better

00:24:18,080 --> 00:24:21,679
we did it for object wrap and the

00:24:20,000 --> 00:24:23,039
results was fantastic

00:24:21,679 --> 00:24:25,840
and i think we should do it for the

00:24:23,039 --> 00:24:27,840
streams in c plus plus

00:24:25,840 --> 00:24:30,000
and the streams the stream rep which is

00:24:27,840 --> 00:24:30,880
actually base class for the tcp udp and

00:24:30,000 --> 00:24:32,960
stuff like that

00:24:30,880 --> 00:24:34,480
it wasn't that bad in 0.10 not just

00:24:32,960 --> 00:24:37,600
actually

00:24:34,480 --> 00:24:41,120
but it was modified a lot for 0.12

00:24:37,600 --> 00:24:43,360
because we moved tls ssl implementation

00:24:41,120 --> 00:24:46,640
into c plus plus to make it faster

00:24:43,360 --> 00:24:48,720
so it now looks terrible in 0.12.

00:24:46,640 --> 00:24:50,240
and there are several several reasons

00:24:48,720 --> 00:24:53,360
why i think

00:24:50,240 --> 00:24:54,159
this is terrible first of all because we

00:24:53,360 --> 00:24:56,480
wanted to

00:24:54,159 --> 00:24:57,600
move tls to the simplest plus from the

00:24:56,480 --> 00:25:01,840
javascript we need

00:24:57,600 --> 00:25:03,840
some way to work with the data that's

00:25:01,840 --> 00:25:06,240
coming from circuit and the data to come

00:25:03,840 --> 00:25:07,919
as it comes to circuit in the simplest

00:25:06,240 --> 00:25:10,159
path without invoking any javascript

00:25:07,919 --> 00:25:12,720
events for performance reasons

00:25:10,159 --> 00:25:13,279
and um because we want this we did some

00:25:12,720 --> 00:25:15,520
sort of

00:25:13,279 --> 00:25:16,720
redirecting of the output input to the

00:25:15,520 --> 00:25:18,960
callbacks

00:25:16,720 --> 00:25:21,200
you see callback stuff so it supports

00:25:18,960 --> 00:25:22,320
only one depth nesting so it doesn't

00:25:21,200 --> 00:25:26,240
support redirecting

00:25:22,320 --> 00:25:29,520
two times or three times so it's kind of

00:25:26,240 --> 00:25:31,279
not good uh and it uh may skip

00:25:29,520 --> 00:25:34,400
javascript callbacks altogether

00:25:31,279 --> 00:25:36,480
for example if uh tls protocol is

00:25:34,400 --> 00:25:38,400
performing a handshake process where it

00:25:36,480 --> 00:25:39,679
sends certificate of the server and

00:25:38,400 --> 00:25:42,960
replies to this

00:25:39,679 --> 00:25:45,600
with some crypts crazy stuff

00:25:42,960 --> 00:25:46,960
it doesn't really invoke any javascript

00:25:45,600 --> 00:25:48,240
callbacks yet because there is no

00:25:46,960 --> 00:25:51,760
connection to talk about

00:25:48,240 --> 00:25:52,480
uh yet and it does some black magic

00:25:51,760 --> 00:25:54,159
inside

00:25:52,480 --> 00:25:55,760
which is not great too but performance

00:25:54,159 --> 00:25:58,960
is really fantastic

00:25:55,760 --> 00:26:01,039
source code is rigid

00:25:58,960 --> 00:26:02,320
but when i think about it when i thought

00:26:01,039 --> 00:26:03,679
about it i

00:26:02,320 --> 00:26:05,600
was keeping in mind that javascript

00:26:03,679 --> 00:26:06,720
streams that we have for quite a long

00:26:05,600 --> 00:26:10,320
time now

00:26:06,720 --> 00:26:12,720
and they work pretty well when

00:26:10,320 --> 00:26:15,200
except when they doesn't they support

00:26:12,720 --> 00:26:17,279
multi-level piping

00:26:15,200 --> 00:26:18,720
and this sort of piping is really

00:26:17,279 --> 00:26:19,440
transparent to the user so you could

00:26:18,720 --> 00:26:22,799
pipe

00:26:19,440 --> 00:26:25,360
let's say tcp socket to a tls protocol

00:26:22,799 --> 00:26:28,320
implementation and pipe this to

00:26:25,360 --> 00:26:29,840
maybe a speedy protocol implementation

00:26:28,320 --> 00:26:31,440
and then get the outputs in the right of

00:26:29,840 --> 00:26:34,000
that stream and everything will work

00:26:31,440 --> 00:26:34,640
by magic but it's easy to debug and

00:26:34,000 --> 00:26:37,039
figure out

00:26:34,640 --> 00:26:38,240
most of the cases so the questions that

00:26:37,039 --> 00:26:40,720
i asked myself

00:26:38,240 --> 00:26:41,679
myself what uh was what if we could do

00:26:40,720 --> 00:26:44,400
the same thing

00:26:41,679 --> 00:26:45,440
in io.js and this is what we did for the

00:26:44,400 --> 00:26:48,000
stream base

00:26:45,440 --> 00:26:50,400
uh for stream streams in c plus plus and

00:26:48,000 --> 00:26:54,000
we called it in stream base

00:26:50,400 --> 00:26:56,000
so it supports um

00:26:54,000 --> 00:26:57,600
no it doesn't have spooky callbacks

00:26:56,000 --> 00:27:00,559
instances so it's just

00:26:57,600 --> 00:27:01,200
one stream based class and you could uh

00:27:00,559 --> 00:27:02,799
pipe

00:27:01,200 --> 00:27:05,600
output or an input to another stream

00:27:02,799 --> 00:27:07,520
based class so it's really

00:27:05,600 --> 00:27:08,640
singular i don't know in some sense

00:27:07,520 --> 00:27:10,640
which is uh

00:27:08,640 --> 00:27:12,400
much better than previously so it

00:27:10,640 --> 00:27:14,240
supports multi-level consumption so we

00:27:12,400 --> 00:27:15,120
could implement multiple protocols in c

00:27:14,240 --> 00:27:18,159
plus plus and

00:27:15,120 --> 00:27:21,760
pipe them together or in terminology or

00:27:18,159 --> 00:27:24,640
stream based can consume them

00:27:21,760 --> 00:27:25,200
and um it has almost no black magic

00:27:24,640 --> 00:27:28,399
right now

00:27:25,200 --> 00:27:30,720
it's quite much simpler than it was

00:27:28,399 --> 00:27:31,919
and performance is the same so it's

00:27:30,720 --> 00:27:33,520
great

00:27:31,919 --> 00:27:35,440
still there is some stuff that needs to

00:27:33,520 --> 00:27:38,720
be done in order to make it public

00:27:35,440 --> 00:27:41,679
and this is uh following we need

00:27:38,720 --> 00:27:43,679
to implement a way to unconsume and pipe

00:27:41,679 --> 00:27:44,960
the stream base from another stream

00:27:43,679 --> 00:27:46,080
because we have similar stuff in

00:27:44,960 --> 00:27:47,520
javascript and i guess

00:27:46,080 --> 00:27:49,440
some people may want to do it in the

00:27:47,520 --> 00:27:53,200
cpus too and

00:27:49,440 --> 00:27:55,520
apis still needs to be cleaned up a bit

00:27:53,200 --> 00:27:57,440
so let's make it public that's what i

00:27:55,520 --> 00:27:59,760
want at least

00:27:57,440 --> 00:28:01,120
because it's cool because it has great

00:27:59,760 --> 00:28:03,520
performance

00:28:01,120 --> 00:28:05,120
balls in core and i guess it will have a

00:28:03,520 --> 00:28:05,679
same performance in user land because

00:28:05,120 --> 00:28:08,960
you could

00:28:05,679 --> 00:28:09,840
avoid javascript altogether and http 2

00:28:08,960 --> 00:28:12,480
could be implemented

00:28:09,840 --> 00:28:14,559
on top of it and would will have really

00:28:12,480 --> 00:28:16,640
amazing performance

00:28:14,559 --> 00:28:18,240
and the last reason that users know

00:28:16,640 --> 00:28:19,520
better how this code should look like

00:28:18,240 --> 00:28:22,559
because

00:28:19,520 --> 00:28:25,840
we did this for users and

00:28:22,559 --> 00:28:27,440
uh yeah they know better okay some

00:28:25,840 --> 00:28:29,039
stuff that i would like to suggest you

00:28:27,440 --> 00:28:31,679
to look take a look at

00:28:29,039 --> 00:28:33,440
if we will ever want to dig in the

00:28:31,679 --> 00:28:35,600
simplest plus internal so i suggest you

00:28:33,440 --> 00:28:39,440
to clone the io address or notice

00:28:35,600 --> 00:28:40,720
repo open crc folder go through files

00:28:39,440 --> 00:28:43,840
here

00:28:40,720 --> 00:28:45,039
check what you learned fix if we are run

00:28:43,840 --> 00:28:46,880
somewhere or

00:28:45,039 --> 00:28:48,720
perhaps if we wrote some code that

00:28:46,880 --> 00:28:51,840
doesn't look right to you

00:28:48,720 --> 00:28:59,840
send a pull request to us and have fun

00:28:51,840 --> 00:28:59,840
yeah that's it thank you

00:29:08,720 --> 00:29:13,840
all right so questions

00:29:14,080 --> 00:29:19,279
there's a question over here second word

00:29:24,720 --> 00:29:28,080
hello hi thank you for your presentation

00:29:27,520 --> 00:29:31,200
um

00:29:28,080 --> 00:29:35,440
i have a two questions uh first is about

00:29:31,200 --> 00:29:37,840
libya and javascript event loop

00:29:35,440 --> 00:29:40,080
if you refer to uh libya recommendation

00:29:37,840 --> 00:29:43,600
we can see it has a trade pool of fixed

00:29:40,080 --> 00:29:46,880
size by default s4 and

00:29:43,600 --> 00:29:49,919
it's for specific kind of

00:29:46,880 --> 00:29:52,960
workload is for file operations

00:29:49,919 --> 00:29:56,159
dns operations and documentation set

00:29:52,960 --> 00:29:59,600
a user code

00:29:56,159 --> 00:30:00,240
javascript event loop and we straight

00:29:59,600 --> 00:30:04,080
pull

00:30:00,240 --> 00:30:07,279
how we relate to each other does the

00:30:04,080 --> 00:30:11,120
code we write to your js

00:30:07,279 --> 00:30:14,080
run under whis to pull or not

00:30:11,120 --> 00:30:16,480
and the second question is about i think

00:30:14,080 --> 00:30:16,480
reps

00:30:17,919 --> 00:30:21,039
i know there are some undercommented

00:30:19,919 --> 00:30:23,360
features like

00:30:21,039 --> 00:30:25,039
process underscore get active handles

00:30:23,360 --> 00:30:27,200
and process underscore get active

00:30:25,039 --> 00:30:30,320
requests

00:30:27,200 --> 00:30:33,760
is it one one-to-one binding or

00:30:30,320 --> 00:30:36,000
it is another kind of things

00:30:33,760 --> 00:30:36,880
okay we'll answer the first question uh

00:30:36,000 --> 00:30:40,799
so there was

00:30:36,880 --> 00:30:42,960
indeed a threadball in dbv and uh

00:30:40,799 --> 00:30:45,279
this thread pull isn't actually used for

00:30:42,960 --> 00:30:47,679
anything except the

00:30:45,279 --> 00:30:48,960
file system stuff and networking stuff

00:30:47,679 --> 00:30:52,159
like that so it's just

00:30:48,960 --> 00:30:54,799
for this i guess eventually javascript

00:30:52,159 --> 00:30:57,600
will run on some sort of thread pool too

00:30:54,799 --> 00:30:59,919
and we did lots of work in uh node.js

00:30:57,600 --> 00:31:01,600
and io.js like preliminary work for this

00:30:59,919 --> 00:31:04,240
so there is support for running

00:31:01,600 --> 00:31:05,279
in threads but it's unfinished yet and i

00:31:04,240 --> 00:31:07,120
guess um

00:31:05,279 --> 00:31:10,559
as far as i remember there was a pull

00:31:07,120 --> 00:31:13,279
request or issue on ios repos that

00:31:10,559 --> 00:31:14,320
was mentioning uh creating some sort of

00:31:13,279 --> 00:31:16,559
lightweight

00:31:14,320 --> 00:31:18,320
threads that wasn't sort of like web

00:31:16,559 --> 00:31:21,440
workers and browsers right

00:31:18,320 --> 00:31:25,360
so when this will come out

00:31:21,440 --> 00:31:26,480
of the github it will be available for

00:31:25,360 --> 00:31:29,600
users but for now

00:31:26,480 --> 00:31:32,640
the threat will runs only for

00:31:29,600 --> 00:31:34,080
internal ebv stuff and for

00:31:32,640 --> 00:31:36,240
simplest loss bindings that the user

00:31:34,080 --> 00:31:36,640
sort so if they for example wrote the

00:31:36,240 --> 00:31:39,679
bin

00:31:36,640 --> 00:31:42,240
for the database like mysql

00:31:39,679 --> 00:31:43,200
or something like this the they could

00:31:42,240 --> 00:31:45,600
choose

00:31:43,200 --> 00:31:46,320
the simplest stuff to run on the thread

00:31:45,600 --> 00:31:47,840
pull

00:31:46,320 --> 00:31:51,440
this is possible and do it simple space

00:31:47,840 --> 00:31:51,440
but it's not possible in javascript yet

00:31:52,799 --> 00:31:55,840
could i please ask you about the second

00:31:54,720 --> 00:31:58,720
question because i don't think that i

00:31:55,840 --> 00:31:58,720
got it right sorry

00:31:59,440 --> 00:32:02,799
it's about uh i think wraps yeah yeah

00:32:02,000 --> 00:32:05,519
and uh

00:32:02,799 --> 00:32:07,600
undocumented features on process like

00:32:05,519 --> 00:32:08,559
underscore get active requests and get

00:32:07,600 --> 00:32:11,039
active handles

00:32:08,559 --> 00:32:12,840
do it relate to each other or not okay

00:32:11,039 --> 00:32:16,240
yeah uh

00:32:12,840 --> 00:32:18,000
it is related but not always

00:32:16,240 --> 00:32:20,320
it's probably the simplest uh answers

00:32:18,000 --> 00:32:21,519
that i can give you uh so not every

00:32:20,320 --> 00:32:25,039
async wrap

00:32:21,519 --> 00:32:27,679
object has a

00:32:25,039 --> 00:32:29,200
actual ep handle that performs some

00:32:27,679 --> 00:32:32,720
asynchronous stuff

00:32:29,200 --> 00:32:34,880
so for example that leap well not the

00:32:32,720 --> 00:32:36,960
uh it might be might be hard to get an

00:32:34,880 --> 00:32:40,000
example of top of my head

00:32:36,960 --> 00:32:42,080
okay so basically process.get dot

00:32:40,000 --> 00:32:45,279
underscore get active handles returns

00:32:42,080 --> 00:32:47,360
the active leap uv handles and not every

00:32:45,279 --> 00:32:49,360
sync wrap instance has a libya handle

00:32:47,360 --> 00:32:51,600
associated with it because it's

00:32:49,360 --> 00:32:53,039
very very generic and it does nothing

00:32:51,600 --> 00:32:55,039
but just mapping

00:32:53,039 --> 00:32:57,679
from the c plus plus to the javascript

00:32:55,039 --> 00:32:58,320
object so it doesn't necessarily need to

00:32:57,679 --> 00:33:02,080
have

00:32:58,320 --> 00:33:04,159
some libya stuff in it yeah so

00:33:02,080 --> 00:33:06,000
it's not necessarily not necessarily

00:33:04,159 --> 00:33:08,000
this and tracing apis that will be

00:33:06,000 --> 00:33:09,360
introduced will work probably in some

00:33:08,000 --> 00:33:11,600
another way

00:33:09,360 --> 00:33:13,919
it was actually uh probably one of the

00:33:11,600 --> 00:33:15,840
main reasons why 0.12 was delayed

00:33:13,919 --> 00:33:18,240
because we tried to figure out how this

00:33:15,840 --> 00:33:21,360
trace and api was working so

00:33:18,240 --> 00:33:24,480
we haven't we just removed it

00:33:21,360 --> 00:33:24,480
but yeah okay

00:33:24,640 --> 00:33:31,670
more questions can see anyone

00:33:28,530 --> 00:33:31,670
[Music]

00:33:32,559 --> 00:33:36,640
okay can we pass the mic over there

00:33:37,200 --> 00:33:42,240
oh yeah you were saying on twitter sorry

00:33:39,120 --> 00:33:42,240
i could not hear you

00:33:42,320 --> 00:33:45,600
okay let's see about that

00:33:46,480 --> 00:33:49,919
um what do you think about the new

00:33:48,799 --> 00:33:53,840
javascript engine

00:33:49,919 --> 00:33:53,840
microsoft called chakra

00:33:54,240 --> 00:33:58,159
nothing

00:33:54,810 --> 00:34:00,399
[Laughter]

00:33:58,159 --> 00:34:02,320
i seen a microsoft slash notes

00:34:00,399 --> 00:34:05,440
repository but

00:34:02,320 --> 00:34:08,320
it came out at the time when uh

00:34:05,440 --> 00:34:08,800
we was traveling so i didn't have a

00:34:08,320 --> 00:34:10,560
really

00:34:08,800 --> 00:34:12,399
good internet connection i was able to

00:34:10,560 --> 00:34:14,720
clone it and play with it

00:34:12,399 --> 00:34:16,000
in particular i know nothing about its

00:34:14,720 --> 00:34:19,359
implementation yet

00:34:16,000 --> 00:34:19,839
but i will definitely take a look so if

00:34:19,359 --> 00:34:21,839
you have

00:34:19,839 --> 00:34:24,079
if you want to hear something more than

00:34:21,839 --> 00:34:27,119
thoughts you could probably email me

00:34:24,079 --> 00:34:27,919
and uh yeah my email is kind of public

00:34:27,119 --> 00:34:29,440
sync and

00:34:27,919 --> 00:34:31,280
should be easy to figure out by just

00:34:29,440 --> 00:34:33,359
first and last name

00:34:31,280 --> 00:34:34,560
so i was wondering if we're going to get

00:34:33,359 --> 00:34:37,839
political here

00:34:34,560 --> 00:34:39,520
and we're totally going to uh are you

00:34:37,839 --> 00:34:41,919
glad you hit the fork button

00:34:39,520 --> 00:34:44,320
are you in favor of reconciliation with

00:34:41,919 --> 00:34:44,320
node

00:34:46,639 --> 00:34:52,800
my vote was zero on this

00:34:49,760 --> 00:34:54,879
the reason is uh that

00:34:52,800 --> 00:34:56,320
i probably don't have a special opinion

00:34:54,879 --> 00:34:58,320
as long as

00:34:56,320 --> 00:34:59,599
as long as we can shape the releases

00:34:58,320 --> 00:35:02,880
regularly

00:34:59,599 --> 00:35:03,520
so if we want there is no nothing to

00:35:02,880 --> 00:35:06,560
prevent us

00:35:03,520 --> 00:35:09,760
from forking it again but

00:35:06,560 --> 00:35:12,320
yeah i think it should be fine for now

00:35:09,760 --> 00:35:13,920
i'm pretty impressed with the activity

00:35:12,320 --> 00:35:14,320
that we have an old foundation and i'm

00:35:13,920 --> 00:35:17,040
pretty

00:35:14,320 --> 00:35:17,839
impressed with the stuff that guys

00:35:17,040 --> 00:35:20,000
prepared

00:35:17,839 --> 00:35:22,640
for us to reconcile so i'm very

00:35:20,000 --> 00:35:24,480
optimistic about it right now

00:35:22,640 --> 00:35:25,920
i think we've established a rally and

00:35:24,480 --> 00:35:27,280
where that it's going to be called

00:35:25,920 --> 00:35:30,880
whatever it's called today

00:35:27,280 --> 00:35:34,400
js um we'll see about that

00:35:30,880 --> 00:35:38,000
and another question political question

00:35:34,400 --> 00:35:40,640
if official iojs merges with node again

00:35:38,000 --> 00:35:42,880
what do you think it will mean for the

00:35:40,640 --> 00:35:45,359
governance model

00:35:42,880 --> 00:35:46,400
uh i don't think that anything is going

00:35:45,359 --> 00:35:49,599
to change

00:35:46,400 --> 00:35:52,880
i'm not really really like lawyer and

00:35:49,599 --> 00:35:56,079
political guy and i i wasn't

00:35:52,880 --> 00:35:57,680
one that like

00:35:56,079 --> 00:35:59,920
puts all this stuff together with

00:35:57,680 --> 00:36:03,440
governance it was the michael and

00:35:59,920 --> 00:36:05,440
probably other people um but

00:36:03,440 --> 00:36:07,359
i guess nothing should be changed

00:36:05,440 --> 00:36:11,119
otherwise i don't see why

00:36:07,359 --> 00:36:13,839
people was so happy about it

00:36:11,119 --> 00:36:15,440
okay any more questions from the

00:36:13,839 --> 00:36:15,920
audience since we are political right

00:36:15,440 --> 00:36:18,000
now

00:36:15,920 --> 00:36:20,800
so any uncomfortable oh there is an

00:36:18,000 --> 00:36:27,839
uncomfortable question right there

00:36:20,800 --> 00:36:27,839
thank you

00:36:28,079 --> 00:36:30,640
just shout

00:36:33,280 --> 00:36:39,119
um we switch the topics chakra

00:36:36,960 --> 00:36:40,079
and in the same direction what is your

00:36:39,119 --> 00:36:42,720
opinion about

00:36:40,079 --> 00:36:43,839
the javascript core or the nitro from

00:36:42,720 --> 00:36:45,680
apple

00:36:43,839 --> 00:36:46,880
because that's also implemented in cc

00:36:45,680 --> 00:36:50,160
plus plus and i

00:36:46,880 --> 00:36:53,200
play around with the optics c api

00:36:50,160 --> 00:36:54,480
and i have the problem that the same

00:36:53,200 --> 00:36:57,280
what you're talking about

00:36:54,480 --> 00:36:59,040
you don't have anything no no no network

00:36:57,280 --> 00:37:02,160
no timeout et cetera

00:36:59,040 --> 00:37:05,280
and for me uh it's interesting

00:37:02,160 --> 00:37:08,560
it's easy to port the node

00:37:05,280 --> 00:37:12,000
the plus plus code in this direction

00:37:08,560 --> 00:37:13,920
yeah it should be possible um well

00:37:12,000 --> 00:37:15,839
there are two at least two reasons for

00:37:13,920 --> 00:37:17,599
this first of all microsoft did this for

00:37:15,839 --> 00:37:21,359
chakra

00:37:17,599 --> 00:37:24,720
and second reason is some guy did it for

00:37:21,359 --> 00:37:25,839
spider monkey and as far as i remember

00:37:24,720 --> 00:37:28,880
he just

00:37:25,839 --> 00:37:32,640
provided a wrapper that looked like

00:37:28,880 --> 00:37:34,800
v8 api so he created a header

00:37:32,640 --> 00:37:37,440
for the spider monkeys that looked

00:37:34,800 --> 00:37:41,200
essential like va does so nodes just

00:37:37,440 --> 00:37:44,320
wasn't given anything about it so it

00:37:41,200 --> 00:37:46,480
just was using it uh generally i

00:37:44,320 --> 00:37:47,760
am really impressed by the javascript

00:37:46,480 --> 00:37:50,960
core because like i'm

00:37:47,760 --> 00:37:52,160
a bit of a compiler junkie too and they

00:37:50,960 --> 00:37:54,480
have

00:37:52,160 --> 00:37:55,280
as far as three compilers one is

00:37:54,480 --> 00:37:57,440
interpreter

00:37:55,280 --> 00:37:59,280
and the second is unoptimized and third

00:37:57,440 --> 00:38:02,240
is optimized code so it's

00:37:59,280 --> 00:38:03,280
kind of very it was always very

00:38:02,240 --> 00:38:06,720
interesting to me

00:38:03,280 --> 00:38:08,400
i guess it's it depends on your needs so

00:38:06,720 --> 00:38:10,960
that's probably the right answer if you

00:38:08,400 --> 00:38:14,240
need to have whole node.js api

00:38:10,960 --> 00:38:17,440
then i would suggest to try making the

00:38:14,240 --> 00:38:18,880
v8 headers and pretending that

00:38:17,440 --> 00:38:20,960
the javascript course that you have is

00:38:18,880 --> 00:38:25,119
actually v8 for an andreas

00:38:20,960 --> 00:38:26,640
and it should be possible but if you

00:38:25,119 --> 00:38:28,480
don't need all this stuff you could

00:38:26,640 --> 00:38:31,359
probably try to

00:38:28,480 --> 00:38:32,720
have some sort of minimal core with just

00:38:31,359 --> 00:38:34,560
libya v

00:38:32,720 --> 00:38:35,920
and it will probably serve you needs as

00:38:34,560 --> 00:38:39,680
well as

00:38:35,920 --> 00:38:42,240
yeah pretending yeah that's it thanks

00:38:39,680 --> 00:38:43,040
um so i think we're done with questions

00:38:42,240 --> 00:38:45,440
we're going to have

00:38:43,040 --> 00:38:46,079
lunch in a second i'm personally pretty

00:38:45,440 --> 00:38:49,200
excited

00:38:46,079 --> 00:38:50,960
about like the merging back of like iojs

00:38:49,200 --> 00:38:53,839
to note i feel like

00:38:50,960 --> 00:38:54,640
the breaking up kind of had to happen in

00:38:53,839 --> 00:38:56,960
a way so

00:38:54,640 --> 00:38:58,800
now we can collaborate better so i don't

00:38:56,960 --> 00:39:01,440
know there was a little bit of drama for

00:38:58,800 --> 00:39:02,400
a little bit but now i think we're

00:39:01,440 --> 00:39:04,320
better off

00:39:02,400 --> 00:39:06,560
uh with that and some better like

00:39:04,320 --> 00:39:08,480
collaboration tools in place like i'm

00:39:06,560 --> 00:39:10,480
really impressed with how like

00:39:08,480 --> 00:39:12,400
uh all the tc meetings are going for

00:39:10,480 --> 00:39:14,960
iojs and releases are

00:39:12,400 --> 00:39:16,560
great so i'm i'm excited i hope everyone

00:39:14,960 --> 00:39:18,800
else is excited as well um

00:39:16,560 --> 00:39:20,079
thank you for for this awesome deep dive

00:39:18,800 --> 00:39:21,920
talk and uh

00:39:20,079 --> 00:39:23,200
we will have lunch now for an hour and a

00:39:21,920 --> 00:39:29,839
half so uh

00:39:23,200 --> 00:39:29,839
everyone enjoy the food

00:39:37,520 --> 00:39:39,599

YouTube URL: https://www.youtube.com/watch?v=BPXeTOFduHM


