Title: Transform your codebase without breaking a sweat by Sufian Rhazi at JSConf Budapest 2015
Publication date: 2020-09-23
Playlist: JSConf Budapest 2015
Description: 
	Slides: http://abstract.properties/jsconfbp-2015/

http://jsconfbp.com/#sufianrhazi

Making sweeping changes across a codebase with confidence is difficult. How can you know what will go wrong? Etsy's Front End Infrastructure team recently converted their codebase from CSS to SCSS and is moving from inlined javascript to structured AMD modules. In this talk, Sufian will teach you the pitfalls, strategies, and tools you can use to ensure that large sweeping changes across your codebase will go smoothly.
Captions: 
	00:00:09,060 --> 00:00:14,000
[Applause]

00:00:13,200 --> 00:00:16,880
all right hello

00:00:14,000 --> 00:00:17,840
um as carolina said thank you my name is

00:00:16,880 --> 00:00:20,160
sufian

00:00:17,840 --> 00:00:21,039
and i'm here to talk about your code

00:00:20,160 --> 00:00:23,359
base

00:00:21,039 --> 00:00:24,640
and how you can kind of present a

00:00:23,359 --> 00:00:26,560
strategy to

00:00:24,640 --> 00:00:28,400
make broad sweeping changes across your

00:00:26,560 --> 00:00:29,760
code base with confidence that you're

00:00:28,400 --> 00:00:32,719
not going to break anything

00:00:29,760 --> 00:00:33,280
or cause any problems um and i've stuck

00:00:32,719 --> 00:00:34,960
these

00:00:33,280 --> 00:00:37,840
slides and there's some code that's in

00:00:34,960 --> 00:00:39,840
these slides you can get it at this url

00:00:37,840 --> 00:00:42,000
and this will also be at the end of the

00:00:39,840 --> 00:00:45,360
presentation

00:00:42,000 --> 00:00:48,399
and i work at etsy etsy

00:00:45,360 --> 00:00:48,800
is a marketplace where people around the

00:00:48,399 --> 00:00:51,840
world

00:00:48,800 --> 00:00:56,320
can connect to buy or sell

00:00:51,840 --> 00:00:58,399
or work on together unique goods and

00:00:56,320 --> 00:01:00,320
it's more than just a place that you can

00:00:58,399 --> 00:01:03,520
go on to buy beautiful things like this

00:01:00,320 --> 00:01:06,640
watercolor of the budapest skyline um

00:01:03,520 --> 00:01:07,200
it's also a place for sellers to come

00:01:06,640 --> 00:01:10,640
together

00:01:07,200 --> 00:01:13,119
and manage their inventory and

00:01:10,640 --> 00:01:15,680
deal with shipping and communicate with

00:01:13,119 --> 00:01:20,159
buyers and even have tax information

00:01:15,680 --> 00:01:21,759
help so it's a very very large company

00:01:20,159 --> 00:01:23,680
and in order to make sure that it's

00:01:21,759 --> 00:01:26,799
working all the time

00:01:23,680 --> 00:01:29,040
we have lots of charts and graphs and

00:01:26,799 --> 00:01:31,600
instrumented code sending beacons back

00:01:29,040 --> 00:01:33,520
to our servers collecting data

00:01:31,600 --> 00:01:34,640
and we have internal tools to help

00:01:33,520 --> 00:01:38,079
customer service

00:01:34,640 --> 00:01:39,759
requests and also just general

00:01:38,079 --> 00:01:42,640
graphs and things like this to make sure

00:01:39,759 --> 00:01:45,040
that our site is running very well

00:01:42,640 --> 00:01:45,759
and we've been around for about 10 years

00:01:45,040 --> 00:01:48,880
and

00:01:45,759 --> 00:01:52,479
we've learned that pretty much

00:01:48,880 --> 00:01:55,920
in every situation code grows over time

00:01:52,479 --> 00:01:58,719
features are added edge cases are fixed

00:01:55,920 --> 00:02:01,280
manual processes are automated and tools

00:01:58,719 --> 00:02:04,880
are improved

00:02:01,280 --> 00:02:07,520
and these two charts show the

00:02:04,880 --> 00:02:08,319
size of our css and javascript over one

00:02:07,520 --> 00:02:10,879
year

00:02:08,319 --> 00:02:11,520
so last year in may we had about 330 000

00:02:10,879 --> 00:02:15,360
lines

00:02:11,520 --> 00:02:16,160
of css and today we have about 440 000

00:02:15,360 --> 00:02:19,440
lines

00:02:16,160 --> 00:02:22,239
um and javascript went from 700 000

00:02:19,440 --> 00:02:24,800
to just over or just under 1 million

00:02:22,239 --> 00:02:24,800
lines of code

00:02:24,959 --> 00:02:29,040
now this might sound a little bit

00:02:26,480 --> 00:02:29,680
daunting but lots of code is not a bad

00:02:29,040 --> 00:02:31,440
thing

00:02:29,680 --> 00:02:33,840
every line was written with the intent

00:02:31,440 --> 00:02:36,080
of helping our customers and making sure

00:02:33,840 --> 00:02:36,959
that their lives and businesses can be

00:02:36,080 --> 00:02:40,400
better

00:02:36,959 --> 00:02:43,440
and so what we must ask ourselves is

00:02:40,400 --> 00:02:45,040
how we can help our code because our

00:02:43,440 --> 00:02:45,519
code is here to help our customers and

00:02:45,040 --> 00:02:48,000
so we

00:02:45,519 --> 00:02:49,760
as engineers are here to help our code

00:02:48,000 --> 00:02:50,959
and we've got to be realistic about it

00:02:49,760 --> 00:02:54,959
you know rewriting

00:02:50,959 --> 00:02:56,160
wholesale features is risky and costly

00:02:54,959 --> 00:02:58,319
and i think the best way to go about

00:02:56,160 --> 00:02:59,360
doing this is to constantly make small

00:02:58,319 --> 00:03:02,640
improvements

00:02:59,360 --> 00:03:04,239
to our code base over time and this is

00:03:02,640 --> 00:03:07,680
true of any code base whether it's

00:03:04,239 --> 00:03:09,760
small or large or absolutely massive

00:03:07,680 --> 00:03:10,959
and that's the role of the front-end

00:03:09,760 --> 00:03:14,400
infrastructure team

00:03:10,959 --> 00:03:17,040
at etsy it's uh our task

00:03:14,400 --> 00:03:18,800
our mission to apply constant pressure

00:03:17,040 --> 00:03:21,200
to make our code better

00:03:18,800 --> 00:03:22,239
and to write tools and add to our

00:03:21,200 --> 00:03:24,959
infrastructure

00:03:22,239 --> 00:03:25,760
and are ultimately the people that we're

00:03:24,959 --> 00:03:28,720
helping out

00:03:25,760 --> 00:03:29,440
are other engineers designers and at the

00:03:28,720 --> 00:03:34,159
end of the day

00:03:29,440 --> 00:03:34,159
the customers who shop and sell on etsy

00:03:34,400 --> 00:03:38,400
and primarily to do this we build the

00:03:36,959 --> 00:03:41,680
asset pipeline

00:03:38,400 --> 00:03:43,599
which is essentially the transformation

00:03:41,680 --> 00:03:45,360
system that takes our javascript css

00:03:43,599 --> 00:03:47,760
html

00:03:45,360 --> 00:03:48,720
massages them compresses them optimizes

00:03:47,760 --> 00:03:51,120
them bundles them

00:03:48,720 --> 00:03:54,239
into so that they're assets that can be

00:03:51,120 --> 00:03:56,720
delivered efficiently over the internet

00:03:54,239 --> 00:03:57,360
and so we take these thousands of files

00:03:56,720 --> 00:04:00,159
we

00:03:57,360 --> 00:04:01,280
we combine them and this process is an

00:04:00,159 --> 00:04:04,640
automated system

00:04:01,280 --> 00:04:06,239
which will bring these assets to our

00:04:04,640 --> 00:04:09,599
customers efficiently

00:04:06,239 --> 00:04:11,760
and in order to do this it's we must

00:04:09,599 --> 00:04:13,519
understand and transform our code

00:04:11,760 --> 00:04:14,959
it's a complex problem and it has lots

00:04:13,519 --> 00:04:17,040
of different approaches

00:04:14,959 --> 00:04:18,479
but at the end of the day it's a build

00:04:17,040 --> 00:04:20,959
system for the web

00:04:18,479 --> 00:04:21,680
and in order to have a build system you

00:04:20,959 --> 00:04:24,560
must

00:04:21,680 --> 00:04:26,479
make code that can transform into other

00:04:24,560 --> 00:04:28,800
forms

00:04:26,479 --> 00:04:30,639
and this isn't limited to just bundling

00:04:28,800 --> 00:04:31,840
assets for delivery but we can actually

00:04:30,639 --> 00:04:35,680
transform our code

00:04:31,840 --> 00:04:37,360
to make it better but the question is

00:04:35,680 --> 00:04:38,800
how do you make broad sweeping changes

00:04:37,360 --> 00:04:39,680
across thousands of different source

00:04:38,800 --> 00:04:40,960
files

00:04:39,680 --> 00:04:43,040
and how do you do it without causing

00:04:40,960 --> 00:04:45,120
breakage or having to manually modify

00:04:43,040 --> 00:04:47,840
every single file

00:04:45,120 --> 00:04:48,880
and most recently we did this to convert

00:04:47,840 --> 00:04:52,479
our code base from

00:04:48,880 --> 00:04:53,759
css to scss and

00:04:52,479 --> 00:04:55,759
we've done this several times in the

00:04:53,759 --> 00:04:57,199
past and found that there is a mental

00:04:55,759 --> 00:04:59,680
framework to help

00:04:57,199 --> 00:05:00,960
and it allows you to kind of remove fear

00:04:59,680 --> 00:05:03,360
and kind of guide you and

00:05:00,960 --> 00:05:04,160
allow you to make decisions that can

00:05:03,360 --> 00:05:05,919
have you

00:05:04,160 --> 00:05:07,840
cause huge transformations across your

00:05:05,919 --> 00:05:09,840
code base

00:05:07,840 --> 00:05:11,199
and these are the steps you must

00:05:09,840 --> 00:05:12,240
identify what it is that you actually

00:05:11,199 --> 00:05:14,080
want to do

00:05:12,240 --> 00:05:15,520
you must automate the transformation so

00:05:14,080 --> 00:05:16,880
that you essentially have a button that

00:05:15,520 --> 00:05:17,840
you can press

00:05:16,880 --> 00:05:20,320
that will cause all these

00:05:17,840 --> 00:05:22,000
transformations to happen and then

00:05:20,320 --> 00:05:24,000
after that's done you must verify that

00:05:22,000 --> 00:05:26,240
those changes actually have the correct

00:05:24,000 --> 00:05:28,080
intent and then at the end of the day

00:05:26,240 --> 00:05:29,520
you must clean up after yourselves and

00:05:28,080 --> 00:05:30,880
remove any instrumentation that you've

00:05:29,520 --> 00:05:32,720
added to your code base

00:05:30,880 --> 00:05:34,320
so that you can actually say yes i've

00:05:32,720 --> 00:05:36,800
done a good job and i can move on to the

00:05:34,320 --> 00:05:36,800
next thing

00:05:37,039 --> 00:05:41,759
so let's go through an example and

00:05:39,759 --> 00:05:43,199
because this is a relatively short talk

00:05:41,759 --> 00:05:44,960
i'm covering something that we haven't

00:05:43,199 --> 00:05:47,120
actually done at etsy but

00:05:44,960 --> 00:05:48,000
it uses the same strategies that we've

00:05:47,120 --> 00:05:50,160
done before

00:05:48,000 --> 00:05:51,840
and the code that is uh at the example

00:05:50,160 --> 00:05:54,720
here uh you could use yourselves if

00:05:51,840 --> 00:05:54,720
you're so inclined

00:05:55,280 --> 00:06:01,919
so let's see uh how we kind of identify

00:05:58,880 --> 00:06:01,919
a change that could be made

00:06:02,639 --> 00:06:06,080
i was walking through a code base and i

00:06:04,479 --> 00:06:08,720
found this hunk of code

00:06:06,080 --> 00:06:10,639
which has to do with verifying items in

00:06:08,720 --> 00:06:13,520
a cart i believe

00:06:10,639 --> 00:06:14,080
and it struck me that this was written

00:06:13,520 --> 00:06:16,800
by

00:06:14,080 --> 00:06:17,919
two different people probably working on

00:06:16,800 --> 00:06:19,600
two different areas

00:06:17,919 --> 00:06:21,600
and they were probably basing their

00:06:19,600 --> 00:06:24,479
changes off of work that they had

00:06:21,600 --> 00:06:25,520
done separately and the question is why

00:06:24,479 --> 00:06:27,800
why are these different

00:06:25,520 --> 00:06:30,000
why is underscore.bind used and

00:06:27,800 --> 00:06:30,880
jquery.proxy used right next to each

00:06:30,000 --> 00:06:33,600
other

00:06:30,880 --> 00:06:35,520
they do the exact same thing and if i

00:06:33,600 --> 00:06:37,600
wasn't familiar with one or the other i

00:06:35,520 --> 00:06:39,600
might have to look up the documentation

00:06:37,600 --> 00:06:41,039
or if i was familiar with both and knew

00:06:39,600 --> 00:06:42,479
that they did the exact same i might

00:06:41,039 --> 00:06:44,800
question my knowledge

00:06:42,479 --> 00:06:47,440
and it will slow me down because i have

00:06:44,800 --> 00:06:49,120
to stop and make sense of things

00:06:47,440 --> 00:06:51,280
and this is this is code friction

00:06:49,120 --> 00:06:52,720
something that isn't quite wrong but

00:06:51,280 --> 00:06:54,240
could be made much better

00:06:52,720 --> 00:06:56,960
for the next time someone comes around

00:06:54,240 --> 00:06:59,039
and needs to make a change in this area

00:06:56,960 --> 00:07:01,360
and since we want to help our code i

00:06:59,039 --> 00:07:04,639
want to remove this friction

00:07:01,360 --> 00:07:06,720
and so all of these this is uh

00:07:04,639 --> 00:07:08,160
three functions jquery.proxy

00:07:06,720 --> 00:07:10,199
underscore.bind

00:07:08,160 --> 00:07:11,440
and the standardized

00:07:10,199 --> 00:07:13,440
function.prototype.bind

00:07:11,440 --> 00:07:15,759
these functions do all the same thing

00:07:13,440 --> 00:07:17,360
but they came around at various times

00:07:15,759 --> 00:07:19,280
jquery was written back when we had to

00:07:17,360 --> 00:07:20,880
support internet explorer 5 and other

00:07:19,280 --> 00:07:23,520
very old browsers

00:07:20,880 --> 00:07:23,919
uh underscore.js was released the same

00:07:23,520 --> 00:07:28,199
year

00:07:23,919 --> 00:07:29,919
as ie8 and at that time

00:07:28,199 --> 00:07:31,520
function.prototype.bind wasn't a thing

00:07:29,919 --> 00:07:32,800
and so they had to have their own shims

00:07:31,520 --> 00:07:35,039
for this type of behavior

00:07:32,800 --> 00:07:36,479
of binding context to functions and

00:07:35,039 --> 00:07:37,919
since we passed functions all around

00:07:36,479 --> 00:07:40,720
when we're using callbacks

00:07:37,919 --> 00:07:42,080
this is a very handy thing to have so

00:07:40,720 --> 00:07:44,599
the question is

00:07:42,080 --> 00:07:47,360
why can't we just use es5

00:07:44,599 --> 00:07:50,400
function.prototype.bind today

00:07:47,360 --> 00:07:51,520
and this is because we need to have

00:07:50,400 --> 00:07:54,400
compatibility

00:07:51,520 --> 00:07:56,479
with all of our customers we still do

00:07:54,400 --> 00:07:57,360
have customers that use ie8 and we must

00:07:56,479 --> 00:08:00,080
support them

00:07:57,360 --> 00:08:01,759
and this table shows that you know not

00:08:00,080 --> 00:08:03,440
every browser that is out there

00:08:01,759 --> 00:08:06,080
supports even features that were

00:08:03,440 --> 00:08:08,639
released several years ago

00:08:06,080 --> 00:08:11,440
but i'm not satisfied with this i don't

00:08:08,639 --> 00:08:12,879
want to live in 2009 when ie8 was around

00:08:11,440 --> 00:08:14,560
i want to live this year i want to

00:08:12,879 --> 00:08:16,960
understand

00:08:14,560 --> 00:08:18,000
not the history of strange behaviors of

00:08:16,960 --> 00:08:20,240
old browsers

00:08:18,000 --> 00:08:21,840
but worry about the future and pay

00:08:20,240 --> 00:08:24,560
attention to the present

00:08:21,840 --> 00:08:26,479
and so we can add a polyfill and this is

00:08:24,560 --> 00:08:29,039
a polyfill from mdn

00:08:26,479 --> 00:08:30,960
copied wholesale mozilla has a fantastic

00:08:29,039 --> 00:08:32,479
set of resources for javascript and you

00:08:30,960 --> 00:08:32,959
can just drop this in your code base and

00:08:32,479 --> 00:08:35,080
then

00:08:32,959 --> 00:08:36,479
any browser that doesn't have

00:08:35,080 --> 00:08:39,519
function.prototype.bindbaked in

00:08:36,479 --> 00:08:42,560
will have it the same behavior

00:08:39,519 --> 00:08:45,519
and so if we want to get rid

00:08:42,560 --> 00:08:46,240
of these two functions and then move on

00:08:45,519 --> 00:08:48,800
to

00:08:46,240 --> 00:08:50,560
use function.prototype.bind we have a

00:08:48,800 --> 00:08:52,240
relatively straightforward task

00:08:50,560 --> 00:08:53,600
we just need to find all the existing

00:08:52,240 --> 00:08:54,320
places where they're called in our code

00:08:53,600 --> 00:08:57,279
base

00:08:54,320 --> 00:08:58,880
and then just change them over manually

00:08:57,279 --> 00:09:03,279
can't be that bad we can just open our

00:08:58,880 --> 00:09:03,279
text editors and see how it goes but

00:09:03,360 --> 00:09:08,640
yeah it's a lot of tedious work

00:09:06,800 --> 00:09:10,399
but we're engineers and we're supposed

00:09:08,640 --> 00:09:12,560
to automate things and so there has to

00:09:10,399 --> 00:09:16,800
be a better way

00:09:12,560 --> 00:09:18,240
and so how are we going to automate this

00:09:16,800 --> 00:09:20,080
and so if you're thinking about making

00:09:18,240 --> 00:09:22,480
transformations to text or

00:09:20,080 --> 00:09:23,519
code or whatever maybe the first idea

00:09:22,480 --> 00:09:25,600
that comes to mind is regular

00:09:23,519 --> 00:09:27,040
expressions

00:09:25,600 --> 00:09:30,800
and they're fantastic in matching and

00:09:27,040 --> 00:09:33,839
pulling out pieces of freeform text

00:09:30,800 --> 00:09:35,120
and so if we try this we can you know

00:09:33,839 --> 00:09:36,839
have a first attempt at a regular

00:09:35,120 --> 00:09:40,080
expression that'll match

00:09:36,839 --> 00:09:41,600
underscore.bind and then some stuff

00:09:40,080 --> 00:09:43,680
and then a comma and then some more

00:09:41,600 --> 00:09:45,200
stuff and

00:09:43,680 --> 00:09:48,000
yeah that that works for this simple

00:09:45,200 --> 00:09:48,959
call to underscore.bind of my function

00:09:48,000 --> 00:09:50,480
and this

00:09:48,959 --> 00:09:52,000
but it doesn't work in this in the

00:09:50,480 --> 00:09:54,480
second

00:09:52,000 --> 00:09:55,040
expression here because the comma is

00:09:54,480 --> 00:09:56,959
greedy

00:09:55,040 --> 00:09:59,440
it'll actually grab that second part and

00:09:56,959 --> 00:10:03,040
then you'll have a syntax error

00:09:59,440 --> 00:10:04,880
and it turns out that you need to if you

00:10:03,040 --> 00:10:08,560
need to have something like this

00:10:04,880 --> 00:10:12,160
where anything and anything need to be

00:10:08,560 --> 00:10:13,519
full javascript expressions then

00:10:12,160 --> 00:10:15,200
you won't be able to do this with

00:10:13,519 --> 00:10:17,600
regular expressions itself because

00:10:15,200 --> 00:10:19,600
javascript is not a regular

00:10:17,600 --> 00:10:21,440
language and that's a technical term a

00:10:19,600 --> 00:10:23,680
regular language regular expressions are

00:10:21,440 --> 00:10:26,640
used to match regular languages

00:10:23,680 --> 00:10:27,839
we need to have something better and

00:10:26,640 --> 00:10:29,519
it's impossible

00:10:27,839 --> 00:10:32,640
to do this with red x no matter how hard

00:10:29,519 --> 00:10:35,279
you try

00:10:32,640 --> 00:10:36,079
and so what we're going to do is

00:10:35,279 --> 00:10:39,279
introduce

00:10:36,079 --> 00:10:42,399
abstract abstract syntax trees uh

00:10:39,279 --> 00:10:44,320
to our lexicon which is

00:10:42,399 --> 00:10:47,200
uh what's provided when you use an

00:10:44,320 --> 00:10:51,279
actual javascript parser

00:10:47,200 --> 00:10:53,760
and this is a simple ast of a function

00:10:51,279 --> 00:10:55,120
that is the function declaration whose

00:10:53,760 --> 00:10:57,920
name is calculate

00:10:55,120 --> 00:11:00,000
it takes three parameters x y and z uh

00:10:57,920 --> 00:11:02,240
and its body is an if statement that

00:11:00,000 --> 00:11:03,920
has a test of equality and a sum and a

00:11:02,240 --> 00:11:06,240
lookup of a member

00:11:03,920 --> 00:11:07,920
and it either returns one thing or the

00:11:06,240 --> 00:11:10,399
other depending on what sides of the if

00:11:07,920 --> 00:11:12,160
statement it's on

00:11:10,399 --> 00:11:13,760
and so if we look back and think about

00:11:12,160 --> 00:11:15,040
how we're going to automate this

00:11:13,760 --> 00:11:18,240
transformation

00:11:15,040 --> 00:11:20,079
we could use abstract syntax trees

00:11:18,240 --> 00:11:22,000
uh we could parse our javascript

00:11:20,079 --> 00:11:23,200
transform them and then generate code

00:11:22,000 --> 00:11:26,880
from these trees

00:11:23,200 --> 00:11:28,000
back to its original form and we can use

00:11:26,880 --> 00:11:30,160
esprima there are many

00:11:28,000 --> 00:11:31,279
javascript libraries to do this but a

00:11:30,160 --> 00:11:33,360
stream is the one

00:11:31,279 --> 00:11:34,320
that i'm going to use in this talk and

00:11:33,360 --> 00:11:36,959
it is uh

00:11:34,320 --> 00:11:37,519
quite easy to use and on its website

00:11:36,959 --> 00:11:38,880
there is an

00:11:37,519 --> 00:11:40,560
interactive parser where you can

00:11:38,880 --> 00:11:43,360
actually type code in and it can

00:11:40,560 --> 00:11:44,959
show you the syntax tree as the

00:11:43,360 --> 00:11:47,279
underlying representation of what that

00:11:44,959 --> 00:11:49,200
code is

00:11:47,279 --> 00:11:50,639
and so after playing with this we can

00:11:49,200 --> 00:11:52,480
see that the transformation that we want

00:11:50,639 --> 00:11:55,920
to make is actually quite simple

00:11:52,480 --> 00:11:57,279
we want to take a call to jquery.proxy

00:11:55,920 --> 00:11:59,600
or underscore.bind

00:11:57,279 --> 00:12:00,959
that takes a function and its context

00:11:59,600 --> 00:12:01,920
and just switch that around so that

00:12:00,959 --> 00:12:04,320
you're calling

00:12:01,920 --> 00:12:06,959
on the function the property binds with

00:12:04,320 --> 00:12:06,959
the context

00:12:08,079 --> 00:12:14,720
and so how will this look in code

00:12:11,680 --> 00:12:16,720
it's surprisingly not that bad uh we

00:12:14,720 --> 00:12:17,839
have esprima which we can include as an

00:12:16,720 --> 00:12:19,600
npm module

00:12:17,839 --> 00:12:21,600
and because it's a very popular parser

00:12:19,600 --> 00:12:22,959
it has some extra libraries that can be

00:12:21,600 --> 00:12:25,279
used as utility

00:12:22,959 --> 00:12:27,200
libraries to help us out with this es

00:12:25,279 --> 00:12:29,600
traverse is one of them which helps us

00:12:27,200 --> 00:12:30,959
traverse and replace pieces of abstract

00:12:29,600 --> 00:12:34,000
syntax trees

00:12:30,959 --> 00:12:37,519
and s-code gen is one that generates

00:12:34,000 --> 00:12:41,200
code from the abstract syntax tree

00:12:37,519 --> 00:12:43,600
and so we can simply just read the file

00:12:41,200 --> 00:12:45,120
parse it in and we get an abstract

00:12:43,600 --> 00:12:48,959
syntax tree out of it

00:12:45,120 --> 00:12:51,600
now we get some of these extra location

00:12:48,959 --> 00:12:52,079
range tokens and comment flags added to

00:12:51,600 --> 00:12:54,720
make sure

00:12:52,079 --> 00:12:56,480
that we are preserving the contents of

00:12:54,720 --> 00:12:59,040
our source code including comments in

00:12:56,480 --> 00:13:01,760
white space

00:12:59,040 --> 00:13:02,320
and we have this check that we'll kind

00:13:01,760 --> 00:13:05,040
of use

00:13:02,320 --> 00:13:06,000
to identify whether or not we're having

00:13:05,040 --> 00:13:09,920
a simple call

00:13:06,000 --> 00:13:11,519
like jquery.proxy or underscore.bind

00:13:09,920 --> 00:13:12,959
and this might look pretty complicated

00:13:11,519 --> 00:13:16,320
but this was pretty much wholesale

00:13:12,959 --> 00:13:20,560
copied from this interactive

00:13:16,320 --> 00:13:24,240
parser and so once we have this

00:13:20,560 --> 00:13:25,839
we can use s traverse to replace our ast

00:13:24,240 --> 00:13:27,120
and if we happen to be matching one of

00:13:25,839 --> 00:13:29,440
these simple calls that's either to

00:13:27,120 --> 00:13:31,519
jquery.proxy or underscore.bind

00:13:29,440 --> 00:13:32,720
we can return the transformed tree and

00:13:31,519 --> 00:13:35,200
have a thing

00:13:32,720 --> 00:13:36,399
that we can then pass to the code

00:13:35,200 --> 00:13:38,959
generator

00:13:36,399 --> 00:13:39,600
and then write it out to an output file

00:13:38,959 --> 00:13:41,920
and that's it

00:13:39,600 --> 00:13:43,360
it's only about 100 lines it's not super

00:13:41,920 --> 00:13:45,120
bad

00:13:43,360 --> 00:13:47,199
and so we could just run this across our

00:13:45,120 --> 00:13:48,800
code base commit it and then deploy and

00:13:47,199 --> 00:13:52,720
hope for the best

00:13:48,800 --> 00:13:52,720
but what could go wrong

00:13:52,880 --> 00:13:56,399
now we've still got to verify that this

00:13:54,720 --> 00:13:58,079
actually does the intended thing that we

00:13:56,399 --> 00:13:59,839
want

00:13:58,079 --> 00:14:01,839
so we've made this transformation and

00:13:59,839 --> 00:14:02,800
because we've used abstract syntax trees

00:14:01,839 --> 00:14:04,320
and code generators

00:14:02,800 --> 00:14:06,720
we know that it will be syntactically

00:14:04,320 --> 00:14:09,839
valid but what we don't know

00:14:06,720 --> 00:14:11,199
is that these two functions jquery.proxy

00:14:09,839 --> 00:14:13,760
and underscore.bind

00:14:11,199 --> 00:14:14,480
are actually still used it could be

00:14:13,760 --> 00:14:16,560
because

00:14:14,480 --> 00:14:18,079
javascript is a very dynamic language

00:14:16,560 --> 00:14:20,959
you can do things like this

00:14:18,079 --> 00:14:22,560
where you just assign objects to other

00:14:20,959 --> 00:14:23,360
names and you can call functions

00:14:22,560 --> 00:14:25,199
indirectly

00:14:23,360 --> 00:14:28,560
that could even be user input that we

00:14:25,199 --> 00:14:31,040
have no idea where it comes from

00:14:28,560 --> 00:14:33,279
so we must ask how do we find the calls

00:14:31,040 --> 00:14:35,680
that we've missed

00:14:33,279 --> 00:14:36,639
and one thing that you could do is

00:14:35,680 --> 00:14:38,399
simply

00:14:36,639 --> 00:14:41,279
replace the definitions of these with

00:14:38,399 --> 00:14:42,880
errors and then run your suite of tests

00:14:41,279 --> 00:14:44,399
and that's the easy thing to do because

00:14:42,880 --> 00:14:45,760
you'll get stack traces and all of the

00:14:44,399 --> 00:14:46,320
code that you really care about that's

00:14:45,760 --> 00:14:49,760
tested

00:14:46,320 --> 00:14:52,240
will tell you exactly where it is but

00:14:49,760 --> 00:14:53,360
we don't have 100 test coverage i doubt

00:14:52,240 --> 00:14:55,839
any of you do either

00:14:53,360 --> 00:14:57,199
that we want to and love tests there are

00:14:55,839 --> 00:14:59,360
always going to be cases that are going

00:14:57,199 --> 00:15:01,360
to be missed

00:14:59,360 --> 00:15:02,639
and so how do we find these failures how

00:15:01,360 --> 00:15:06,240
do we find areas

00:15:02,639 --> 00:15:08,639
that our code just isn't well tested

00:15:06,240 --> 00:15:10,399
and if you think about it our users who

00:15:08,639 --> 00:15:11,279
are constantly using our code base are

00:15:10,399 --> 00:15:13,839
testing it

00:15:11,279 --> 00:15:15,680
much better than any of our tests are

00:15:13,839 --> 00:15:17,680
themselves

00:15:15,680 --> 00:15:18,959
and so if they are our test drivers they

00:15:17,680 --> 00:15:20,240
could hit edge cases

00:15:18,959 --> 00:15:22,480
that we wouldn't be able to find

00:15:20,240 --> 00:15:24,959
manually or automated

00:15:22,480 --> 00:15:28,639
and we could actually have them send

00:15:24,959 --> 00:15:28,639
beacons back to our servers

00:15:28,800 --> 00:15:32,240
we could capture a stack trace at the

00:15:30,959 --> 00:15:35,440
execution point

00:15:32,240 --> 00:15:36,720
and send an xhr request to our servers

00:15:35,440 --> 00:15:39,120
we could write a simple service that

00:15:36,720 --> 00:15:40,480
would accept these and log these

00:15:39,120 --> 00:15:42,800
and then we could instrument the two

00:15:40,480 --> 00:15:44,160
lines of code jquery.proxy and

00:15:42,800 --> 00:15:46,320
underscore.bind

00:15:44,160 --> 00:15:48,880
with this beaconing sending data back to

00:15:46,320 --> 00:15:48,880
our servers

00:15:49,279 --> 00:15:52,320
and so we kind of have two complementary

00:15:51,360 --> 00:15:56,160
steps

00:15:52,320 --> 00:15:58,160
on one hand we have tests which will

00:15:56,160 --> 00:16:00,000
uh cause intentional failure and that

00:15:58,160 --> 00:16:01,440
will smoke out most of the issues

00:16:00,000 --> 00:16:03,120
but to be very certain we actually need

00:16:01,440 --> 00:16:05,519
to monitor production and have

00:16:03,120 --> 00:16:09,839
production send beacons back to us so

00:16:05,519 --> 00:16:09,839
that we know how our code is being used

00:16:10,480 --> 00:16:14,959
and if we were to deploy this it would

00:16:13,120 --> 00:16:16,639
actually be pretty risky as well

00:16:14,959 --> 00:16:18,480
because we would have a large

00:16:16,639 --> 00:16:20,320
transformation lots of

00:16:18,480 --> 00:16:22,000
things going on we might want to

00:16:20,320 --> 00:16:24,800
actually reduce this

00:16:22,000 --> 00:16:27,920
risk in a way that makes it much more

00:16:24,800 --> 00:16:31,120
easy to digest i guess you can say

00:16:27,920 --> 00:16:32,720
and so we could deploy two different

00:16:31,120 --> 00:16:34,560
sets of code

00:16:32,720 --> 00:16:36,399
one with our transformations and one

00:16:34,560 --> 00:16:38,079
without our transformations and run an

00:16:36,399 --> 00:16:40,560
experiment between the two

00:16:38,079 --> 00:16:42,800
so we could slowly roll customers from

00:16:40,560 --> 00:16:44,000
code that we know works to code that

00:16:42,800 --> 00:16:45,920
might not work

00:16:44,000 --> 00:16:47,600
and because we have these instruments

00:16:45,920 --> 00:16:48,639
and function calls sending beacons back

00:16:47,600 --> 00:16:50,720
to production

00:16:48,639 --> 00:16:52,240
we can actually watch these and make

00:16:50,720 --> 00:16:53,360
sure that this slow rollout goes

00:16:52,240 --> 00:16:54,800
smoothly

00:16:53,360 --> 00:16:56,639
if we see that there are any issues that

00:16:54,800 --> 00:16:57,440
are going on if any of our key metrics

00:16:56,639 --> 00:16:59,839
drop

00:16:57,440 --> 00:17:02,720
we then can turn off the rollout and

00:16:59,839 --> 00:17:02,720
investigate further

00:17:02,959 --> 00:17:05,839
and in order to do this we'll want to

00:17:04,319 --> 00:17:06,880
automate this we'll essentially want a

00:17:05,839 --> 00:17:09,360
script that will

00:17:06,880 --> 00:17:11,520
run transform all of our code add the

00:17:09,360 --> 00:17:13,839
instrumentation to these two functions

00:17:11,520 --> 00:17:15,199
and then we can build and deploy these

00:17:13,839 --> 00:17:17,120
sets of code

00:17:15,199 --> 00:17:19,280
and then once we have that we can simply

00:17:17,120 --> 00:17:22,079
wait and watch for these beacons or

00:17:19,280 --> 00:17:22,079
errors to come up

00:17:23,760 --> 00:17:29,439
but what might happen is that errors are

00:17:29,679 --> 00:17:32,799
not so great so etsy has nothing to do

00:17:32,400 --> 00:17:36,480
with

00:17:32,799 --> 00:17:39,760
helping track two.com

00:17:36,480 --> 00:17:41,840
browsers have extensions installed

00:17:39,760 --> 00:17:43,520
users have malware on their system and

00:17:41,840 --> 00:17:45,520
sometimes you get errors or other

00:17:43,520 --> 00:17:46,480
behavior that is completely unrelated to

00:17:45,520 --> 00:17:48,480
your code

00:17:46,480 --> 00:17:50,799
so as you add instrumentation to your

00:17:48,480 --> 00:17:52,160
code base and watch through these logs

00:17:50,799 --> 00:17:55,280
you might want to filter out or at least

00:17:52,160 --> 00:17:57,360
be aware that a lot of the code that

00:17:55,280 --> 00:18:01,440
is clearly not yours is still running in

00:17:57,360 --> 00:18:03,280
your customers browsers

00:18:01,440 --> 00:18:04,480
and so what we have here now is the

00:18:03,280 --> 00:18:05,840
final step

00:18:04,480 --> 00:18:08,240
if we've rolled out completely to our

00:18:05,840 --> 00:18:11,679
customers we still have

00:18:08,240 --> 00:18:13,720
work to do our job is almost almost done

00:18:11,679 --> 00:18:16,720
if we've removed those calls to

00:18:13,720 --> 00:18:18,960
jquery.proxy and underscore.bind

00:18:16,720 --> 00:18:20,960
we still have two sets of code from that

00:18:18,960 --> 00:18:22,960
experiment that we need to clean up

00:18:20,960 --> 00:18:24,960
so we remove one and we close off the

00:18:22,960 --> 00:18:27,120
experiment and we make sure that that

00:18:24,960 --> 00:18:28,559
is a simpler system than how it was

00:18:27,120 --> 00:18:30,080
before

00:18:28,559 --> 00:18:32,400
and this is all because we want to leave

00:18:30,080 --> 00:18:34,240
our code base cleaner than we found

00:18:32,400 --> 00:18:36,720
and this is kind of critical when you're

00:18:34,240 --> 00:18:37,919
working with any code of any size

00:18:36,720 --> 00:18:40,880
is when you look at something and you

00:18:37,919 --> 00:18:42,640
think i could make this better

00:18:40,880 --> 00:18:44,799
you want to walk away feeling i did make

00:18:42,640 --> 00:18:47,200
that better

00:18:44,799 --> 00:18:49,760
and so we can remove our beacons and we

00:18:47,200 --> 00:18:52,000
can even remove the shims

00:18:49,760 --> 00:18:53,200
the jquery.proxy and underscore.buying

00:18:52,000 --> 00:18:54,240
function calls provided by these

00:18:53,200 --> 00:18:54,880
libraries because they're no longer

00:18:54,240 --> 00:18:56,160
needed

00:18:54,880 --> 00:18:59,200
and effectively they're only going to

00:18:56,160 --> 00:19:01,520
add confusion in the future

00:18:59,200 --> 00:19:02,559
but if we were to remove them a

00:19:01,520 --> 00:19:04,000
developer who

00:19:02,559 --> 00:19:06,000
could be reading through underscores

00:19:04,000 --> 00:19:08,400
documentation and realized oh

00:19:06,000 --> 00:19:09,679
i should use this in this situation they

00:19:08,400 --> 00:19:10,720
could use it and realize that it doesn't

00:19:09,679 --> 00:19:12,320
work

00:19:10,720 --> 00:19:14,080
so we might want to add a helpful

00:19:12,320 --> 00:19:14,880
replacement that's kind of a gentle

00:19:14,080 --> 00:19:17,120
nudge of

00:19:14,880 --> 00:19:18,919
oh by the way underscore.bind is

00:19:17,120 --> 00:19:21,360
deprecated you should use

00:19:18,919 --> 00:19:23,600
function.prototype.bind instead

00:19:21,360 --> 00:19:24,960
and in this way this actually helps us

00:19:23,600 --> 00:19:28,000
help our code

00:19:24,960 --> 00:19:29,760
constantly move into a better direction

00:19:28,000 --> 00:19:32,640
so it can help our customers and it can

00:19:29,760 --> 00:19:34,480
help us at the end of the day

00:19:32,640 --> 00:19:36,960
so we can run all this transformation

00:19:34,480 --> 00:19:39,440
and commit and clean up after ourselves

00:19:36,960 --> 00:19:40,000
and then we're done and that's how we

00:19:39,440 --> 00:19:43,280
make

00:19:40,000 --> 00:19:44,080
changes with confidence and so as i

00:19:43,280 --> 00:19:46,160
mentioned before

00:19:44,080 --> 00:19:47,840
we've used this strategy a couple of

00:19:46,160 --> 00:19:50,320
times we use it for

00:19:47,840 --> 00:19:51,679
translations we have strings and files

00:19:50,320 --> 00:19:53,760
that need to be translated

00:19:51,679 --> 00:19:55,200
and so we parse out these files using

00:19:53,760 --> 00:19:57,679
abstract syntax trees

00:19:55,200 --> 00:19:59,280
we beacon back if we ever have an

00:19:57,679 --> 00:20:02,799
untranslated string that needs to be

00:19:59,280 --> 00:20:06,240
translated by actual people and

00:20:02,799 --> 00:20:07,840
we clean up after ourselves by

00:20:06,240 --> 00:20:10,640
identifying things that aren't used at

00:20:07,840 --> 00:20:14,640
all and we also have moved from

00:20:10,640 --> 00:20:16,960
css to scss we automated our process

00:20:14,640 --> 00:20:17,679
by cleaning our css because it was

00:20:16,960 --> 00:20:20,080
written

00:20:17,679 --> 00:20:20,880
you know back 10 years ago even some of

00:20:20,080 --> 00:20:23,360
it

00:20:20,880 --> 00:20:24,880
there were ie hacks like stars that you

00:20:23,360 --> 00:20:26,320
would add to the beginning of properties

00:20:24,880 --> 00:20:26,960
or underscores and other things that

00:20:26,320 --> 00:20:29,200
would

00:20:26,960 --> 00:20:30,400
make styling look right in the right

00:20:29,200 --> 00:20:32,240
browsers

00:20:30,400 --> 00:20:34,480
but that's not valid scss and so we

00:20:32,240 --> 00:20:37,280
needed to get rid of that

00:20:34,480 --> 00:20:38,320
we used an abstract syntax tree to

00:20:37,280 --> 00:20:41,679
verify

00:20:38,320 --> 00:20:44,559
that the compilation of scss

00:20:41,679 --> 00:20:45,280
to css after our cleaning had the same

00:20:44,559 --> 00:20:48,480
structure

00:20:45,280 --> 00:20:50,480
as our original css code and then when

00:20:48,480 --> 00:20:53,200
we were done we renamed everything over

00:20:50,480 --> 00:20:56,480
and added to lint rules for scss to make

00:20:53,200 --> 00:20:56,480
sure that our code gets better

00:20:56,799 --> 00:21:02,480
so just to kind of wrap up and cover the

00:20:59,840 --> 00:21:04,159
things we've talked about javascript is

00:21:02,480 --> 00:21:06,559
is a constantly evolving target

00:21:04,159 --> 00:21:08,559
and i know earlier today and yesterday a

00:21:06,559 --> 00:21:10,320
lot of the examples were using es6 which

00:21:08,559 --> 00:21:12,960
is fantastic

00:21:10,320 --> 00:21:14,080
but many of us are still serving

00:21:12,960 --> 00:21:15,919
customers who have

00:21:14,080 --> 00:21:17,760
old browsers and we can't jump onto the

00:21:15,919 --> 00:21:19,919
new technologies as often as we can

00:21:17,760 --> 00:21:22,240
but we want to and so our code must

00:21:19,919 --> 00:21:27,280
constantly evolve and constantly

00:21:22,240 --> 00:21:30,320
follow the the present of javascript

00:21:27,280 --> 00:21:32,080
polyfills are fantastic and if you don't

00:21:30,320 --> 00:21:34,400
have polyfills included in your code

00:21:32,080 --> 00:21:36,159
base i would highly suggest it

00:21:34,400 --> 00:21:37,840
the financial times has a great polyfill

00:21:36,159 --> 00:21:40,000
service which you can just

00:21:37,840 --> 00:21:41,919
plug in and it will give you all of the

00:21:40,000 --> 00:21:43,760
functions that you might be using

00:21:41,919 --> 00:21:45,600
either underscore or lodash or other

00:21:43,760 --> 00:21:48,480
libraries as shims for

00:21:45,600 --> 00:21:49,840
and they're better because if you learn

00:21:48,480 --> 00:21:51,600
javascript the language

00:21:49,840 --> 00:21:53,600
you don't need to learn all of these

00:21:51,600 --> 00:21:53,919
other libraries which other people use

00:21:53,600 --> 00:21:57,280
that

00:21:53,919 --> 00:21:59,840
can be just confusing or get things

00:21:57,280 --> 00:22:02,159
wrong over time

00:21:59,840 --> 00:22:03,039
and parsing and transforming code is is

00:22:02,159 --> 00:22:05,520
easy

00:22:03,039 --> 00:22:06,880
and powerful and esprima is what we

00:22:05,520 --> 00:22:10,000
talked about today but

00:22:06,880 --> 00:22:12,480
uglify js2 is another parser acorn is

00:22:10,000 --> 00:22:15,520
another parser that uses the mozilla

00:22:12,480 --> 00:22:16,960
tree and shift is a relatively recent

00:22:15,520 --> 00:22:19,600
parser and i think that also supports

00:22:16,960 --> 00:22:19,600
es6

00:22:20,240 --> 00:22:24,000
and you always want to use tests to

00:22:22,159 --> 00:22:25,520
verify behavior before production

00:22:24,000 --> 00:22:27,840
but we also need to be realistic and

00:22:25,520 --> 00:22:30,000
acknowledge that tests aren't our savior

00:22:27,840 --> 00:22:31,280
we won't have 100 test coverage so we

00:22:30,000 --> 00:22:33,039
need to plan for this

00:22:31,280 --> 00:22:35,919
and we need to monitor production to

00:22:33,039 --> 00:22:38,000
catch unknown failures

00:22:35,919 --> 00:22:38,960
and finally if we leave our code cleaner

00:22:38,000 --> 00:22:40,960
than we found it

00:22:38,960 --> 00:22:44,080
we'll make sure that we'll put ourselves

00:22:40,960 --> 00:22:44,080
in a better place tomorrow

00:22:44,159 --> 00:22:48,960
so we identify automate verify and clean

00:22:47,280 --> 00:22:55,840
up

00:22:48,960 --> 00:22:55,840
and that's about it

00:23:06,159 --> 00:23:11,440
oh yeah this is cozy

00:23:14,799 --> 00:23:19,600
nap time okay

00:23:17,919 --> 00:23:21,440
oh there are a bunch of questions

00:23:19,600 --> 00:23:24,320
actually um

00:23:21,440 --> 00:23:27,280
first one how do you do the soft

00:23:24,320 --> 00:23:31,600
deploying practice

00:23:27,280 --> 00:23:34,240
so we have um a configuration flags

00:23:31,600 --> 00:23:34,720
that exist so we use a php on the back

00:23:34,240 --> 00:23:36,799
end

00:23:34,720 --> 00:23:38,960
for most of our services at rt and we

00:23:36,799 --> 00:23:42,159
have a set of configuration files

00:23:38,960 --> 00:23:42,720
that are essentially checks that you can

00:23:42,159 --> 00:23:44,880
say

00:23:42,720 --> 00:23:45,919
if you are in this experiment you can

00:23:44,880 --> 00:23:47,600
have this behavior

00:23:45,919 --> 00:23:49,039
and if you're not in this experiment you

00:23:47,600 --> 00:23:50,240
cannot have this behavior

00:23:49,039 --> 00:23:52,159
and so you can have a number between

00:23:50,240 --> 00:23:56,480
like 0 and 100 for

00:23:52,159 --> 00:24:00,159
a rollout and for this particular

00:23:56,480 --> 00:24:01,200
example you would want to serve the urls

00:24:00,159 --> 00:24:04,000
of

00:24:01,200 --> 00:24:04,880
set a or set b depending on where you

00:24:04,000 --> 00:24:08,000
are in this

00:24:04,880 --> 00:24:09,679
experiment and we bucket by

00:24:08,000 --> 00:24:11,120
session id and you want to make sure you

00:24:09,679 --> 00:24:14,080
don't you don't use a

00:24:11,120 --> 00:24:15,600
customer id if you have a login id for

00:24:14,080 --> 00:24:17,279
your customers because

00:24:15,600 --> 00:24:18,799
you'll bucket all of the logged out

00:24:17,279 --> 00:24:20,559
users into the same one

00:24:18,799 --> 00:24:24,640
and if you have lots of logged out users

00:24:20,559 --> 00:24:24,640
it'll be very disproportionate

00:24:25,840 --> 00:24:29,760
are there any existing generic

00:24:27,679 --> 00:24:33,039
javascript refactoring tools

00:24:29,760 --> 00:24:34,400
or you have to write always a specific

00:24:33,039 --> 00:24:36,720
transformation

00:24:34,400 --> 00:24:38,240
yeah this is um something that there are

00:24:36,720 --> 00:24:41,600
many tools out there for

00:24:38,240 --> 00:24:44,720
i think there's one called s transform

00:24:41,600 --> 00:24:46,480
um facebook has pfff and

00:24:44,720 --> 00:24:48,400
s patch and these work across many

00:24:46,480 --> 00:24:49,919
different languages

00:24:48,400 --> 00:24:52,000
the reason why i stepped through this is

00:24:49,919 --> 00:24:54,240
because i think that

00:24:52,000 --> 00:24:55,279
understanding how to parse and

00:24:54,240 --> 00:24:57,600
manipulate

00:24:55,279 --> 00:24:59,200
code is actually kind of enlightening

00:24:57,600 --> 00:24:59,760
and it allows you to think about code as

00:24:59,200 --> 00:25:03,600
data

00:24:59,760 --> 00:25:03,600
which is a very powerful concept

00:25:04,080 --> 00:25:09,760
would you write tests for the transforms

00:25:06,240 --> 00:25:09,760
on the code during the process

00:25:10,480 --> 00:25:16,960
who tests the tests

00:25:14,159 --> 00:25:17,600
that's a good question i probably

00:25:16,960 --> 00:25:22,720
wouldn't

00:25:17,600 --> 00:25:22,720
to be honest um and i say that because

00:25:23,360 --> 00:25:28,480
it's either going to spectacularly fail

00:25:26,480 --> 00:25:30,480
or it's going to work the chance that it

00:25:28,480 --> 00:25:32,720
will like subtly break would be

00:25:30,480 --> 00:25:34,000
pretty low um and because we're

00:25:32,720 --> 00:25:37,520
monitoring production we

00:25:34,000 --> 00:25:38,480
would have a higher confidence about

00:25:37,520 --> 00:25:41,200
that but

00:25:38,480 --> 00:25:42,880
you could write a test if you wanted so

00:25:41,200 --> 00:25:43,679
this one is pretty interesting i'm

00:25:42,880 --> 00:25:46,400
missing the

00:25:43,679 --> 00:25:48,480
from inline js to amd part of the

00:25:46,400 --> 00:25:49,760
presentation could you briefly go over

00:25:48,480 --> 00:25:54,000
it

00:25:49,760 --> 00:25:54,000
wow that's like another talk um

00:25:54,559 --> 00:25:58,159
well we have a little bit of time oh

00:25:57,039 --> 00:26:02,240
should i get short

00:25:58,159 --> 00:26:07,520
um so i think the question was

00:26:02,240 --> 00:26:07,520
essentially how does browserify work um

00:26:07,600 --> 00:26:10,720
how does browser firework i think we

00:26:09,440 --> 00:26:14,080
have something we have something

00:26:10,720 --> 00:26:17,200
the audience who can actually just

00:26:14,080 --> 00:26:18,159
say that yeah so you could use this

00:26:17,200 --> 00:26:20,240
technique to

00:26:18,159 --> 00:26:21,679
transform javascript modules that are

00:26:20,240 --> 00:26:24,640
written in amd

00:26:21,679 --> 00:26:26,159
style to common js style and or go the

00:26:24,640 --> 00:26:29,039
other way around

00:26:26,159 --> 00:26:29,600
you could do this to bundle your code

00:26:29,039 --> 00:26:31,440
into

00:26:29,600 --> 00:26:32,720
individual bundles so you kind of bring

00:26:31,440 --> 00:26:34,400
in all of your dependencies into a

00:26:32,720 --> 00:26:35,919
single asset

00:26:34,400 --> 00:26:38,080
you can do all sorts of things i hope

00:26:35,919 --> 00:26:40,960
that answers the question

00:26:38,080 --> 00:26:42,880
um how do you monitor client set errors

00:26:40,960 --> 00:26:44,400
external service or something that

00:26:42,880 --> 00:26:47,760
you've built

00:26:44,400 --> 00:26:50,960
yeah so um if you have a on

00:26:47,760 --> 00:26:54,080
error handler on

00:26:50,960 --> 00:26:56,480
window you can get some

00:26:54,080 --> 00:26:57,760
good information and it varies on

00:26:56,480 --> 00:27:00,559
browsers

00:26:57,760 --> 00:27:02,640
and also the error messages that you get

00:27:00,559 --> 00:27:04,799
are also localized so if you have your

00:27:02,640 --> 00:27:07,840
browser set to be

00:27:04,799 --> 00:27:08,960
italian for instance and you have an

00:27:07,840 --> 00:27:11,440
error that is

00:27:08,960 --> 00:27:12,080
something like uh like a null pointer

00:27:11,440 --> 00:27:14,480
exception

00:27:12,080 --> 00:27:15,840
it will have that sent back to you in

00:27:14,480 --> 00:27:18,320
italian which is

00:27:15,840 --> 00:27:20,159
not very useful uh but there are third

00:27:18,320 --> 00:27:23,360
party services there are tons of them

00:27:20,159 --> 00:27:25,919
that you can use to drop in a library

00:27:23,360 --> 00:27:27,440
and it kind of attaches to all of the

00:27:25,919 --> 00:27:28,000
exit points so you get better stack

00:27:27,440 --> 00:27:30,559
traces

00:27:28,000 --> 00:27:31,200
in browsers that necessarily have them

00:27:30,559 --> 00:27:33,120
and

00:27:31,200 --> 00:27:34,960
essentially just in that error handler

00:27:33,120 --> 00:27:35,840
you send as much information as you can

00:27:34,960 --> 00:27:38,159
to your servers

00:27:35,840 --> 00:27:41,520
and then you can search through them we

00:27:38,159 --> 00:27:44,080
use the elk stack elasticsearch

00:27:41,520 --> 00:27:44,640
to go search through our logs and find

00:27:44,080 --> 00:27:47,840
out how

00:27:44,640 --> 00:27:49,600
errors are popping up so i'm not sure if

00:27:47,840 --> 00:27:52,240
this question is going to be clear

00:27:49,600 --> 00:27:54,960
maybe it will be um how do you allow it

00:27:52,240 --> 00:27:56,960
partially that big of a change

00:27:54,960 --> 00:27:58,799
sorry um the question says how do you

00:27:56,960 --> 00:28:02,000
rule out partially that big

00:27:58,799 --> 00:28:03,679
change and i'm not sure

00:28:02,000 --> 00:28:06,480
what that means i'm not sure what that

00:28:03,679 --> 00:28:07,120
means is that person in the audience

00:28:06,480 --> 00:28:09,039
somewhere

00:28:07,120 --> 00:28:10,720
or is it from the story because i could

00:28:09,039 --> 00:28:12,720
not tell

00:28:10,720 --> 00:28:14,480
well if someone who asked that question

00:28:12,720 --> 00:28:17,679
wants to clarify

00:28:14,480 --> 00:28:20,720
that would be great if they don't we're

00:28:17,679 --> 00:28:23,760
taking questions from the audience

00:28:20,720 --> 00:28:28,559
yes no i see no hands

00:28:23,760 --> 00:28:28,559
there is a hand can we get a mic over

00:28:28,840 --> 00:28:31,840
there

00:28:38,960 --> 00:28:43,520
um thanks for talk it was very well

00:28:41,200 --> 00:28:46,000
explained

00:28:43,520 --> 00:28:47,120
you mentioned that you are using uh

00:28:46,000 --> 00:28:50,080
esprima

00:28:47,120 --> 00:28:51,200
for the transformations to asds uh my

00:28:50,080 --> 00:28:53,840
question would be

00:28:51,200 --> 00:28:54,320
did you run into any issues when you

00:28:53,840 --> 00:28:58,000
like

00:28:54,320 --> 00:29:00,720
transform this probably like a

00:28:58,000 --> 00:29:02,559
really large code base made those

00:29:00,720 --> 00:29:05,600
changes that were specific to just like

00:29:02,559 --> 00:29:06,559
the bindings and proxies and once you

00:29:05,600 --> 00:29:08,159
generate it back

00:29:06,559 --> 00:29:10,840
into the code i'm not sure if you use

00:29:08,159 --> 00:29:14,559
the score gain or something else

00:29:10,840 --> 00:29:16,240
like did the whole combat message or i

00:29:14,559 --> 00:29:18,799
mean like the whole combat

00:29:16,240 --> 00:29:20,000
became like too bloated with some minor

00:29:18,799 --> 00:29:22,640
changes that one

00:29:20,000 --> 00:29:23,760
weren't really related to the the

00:29:22,640 --> 00:29:26,559
proxies or binding

00:29:23,760 --> 00:29:28,559
maybe like different formatting of

00:29:26,559 --> 00:29:31,279
indentation or something like that

00:29:28,559 --> 00:29:31,919
yeah the formatting and indentation if

00:29:31,279 --> 00:29:33,679
you have

00:29:31,919 --> 00:29:35,679
lint rules already applied to your code

00:29:33,679 --> 00:29:38,799
base that makes it a lot easier because

00:29:35,679 --> 00:29:40,080
you can configure uh s code gen to use

00:29:38,799 --> 00:29:41,760
those same rules

00:29:40,080 --> 00:29:44,480
but if you have a code base that doesn't

00:29:41,760 --> 00:29:47,200
have a standardized style

00:29:44,480 --> 00:29:48,240
then the formatting will change and what

00:29:47,200 --> 00:29:51,279
you could do

00:29:48,240 --> 00:29:54,559
is use

00:29:51,279 --> 00:29:56,320
git or even diff to kind of

00:29:54,559 --> 00:29:57,520
remove the white space changes

00:29:56,320 --> 00:29:58,960
themselves and that will kind of

00:29:57,520 --> 00:30:00,320
minimize the number of formatting

00:29:58,960 --> 00:30:03,200
changes that you have there

00:30:00,320 --> 00:30:04,559
but that's probably the biggest thing

00:30:03,200 --> 00:30:06,880
that could come up

00:30:04,559 --> 00:30:08,480
with this is that by transfer parsing

00:30:06,880 --> 00:30:09,679
and generating your code you lose a

00:30:08,480 --> 00:30:11,440
little bit of information

00:30:09,679 --> 00:30:13,840
we do retain all of the comments which

00:30:11,440 --> 00:30:16,320
was what those extra options added were

00:30:13,840 --> 00:30:18,240
and even the comment like uh structure

00:30:16,320 --> 00:30:21,200
if it's all aligned for instance

00:30:18,240 --> 00:30:23,840
um but we do lose a little bit of

00:30:21,200 --> 00:30:26,880
formatting

00:30:23,840 --> 00:30:29,520
thanks oh there's another question

00:30:26,880 --> 00:30:29,520
to the left

00:30:30,960 --> 00:30:34,240
uh hello um well i have two questions

00:30:33,679 --> 00:30:37,120
actually

00:30:34,240 --> 00:30:37,600
and first one is um what's the lovely

00:30:37,120 --> 00:30:38,880
font

00:30:37,600 --> 00:30:41,039
typeface that you use for your

00:30:38,880 --> 00:30:44,240
presentation oh that's

00:30:41,039 --> 00:30:47,520
guardian it's the typeface we use

00:30:44,240 --> 00:30:50,799
for etsy's logo cool the other one is uh

00:30:47,520 --> 00:30:54,799
how do you deal with code

00:30:50,799 --> 00:30:57,840
legacy maintains of

00:30:54,799 --> 00:31:00,880
css across the whole site uh

00:30:57,840 --> 00:31:03,840
how do you deal with duplicated code or

00:31:00,880 --> 00:31:04,559
unused code or how do you refactor that

00:31:03,840 --> 00:31:06,720
i mean there are

00:31:04,559 --> 00:31:08,880
no quick ways to do so but you must

00:31:06,720 --> 00:31:12,399
apply some techniques anyway

00:31:08,880 --> 00:31:13,039
yeah css is um let's just say even more

00:31:12,399 --> 00:31:16,960
dynamic

00:31:13,039 --> 00:31:18,480
than javascript it is extremely hard to

00:31:16,960 --> 00:31:20,000
remove because you don't know it's where

00:31:18,480 --> 00:31:22,240
it's being used

00:31:20,000 --> 00:31:23,679
we've toyed around with the idea and

00:31:22,240 --> 00:31:26,080
used this in small

00:31:23,679 --> 00:31:26,720
cases not we haven't really built a

00:31:26,080 --> 00:31:30,960
large

00:31:26,720 --> 00:31:33,760
project around this yet but if you add

00:31:30,960 --> 00:31:36,080
a background image to css elements

00:31:33,760 --> 00:31:39,039
that's like a transparent one pixel

00:31:36,080 --> 00:31:39,600
beacon and then use that to send to your

00:31:39,039 --> 00:31:41,120
servers

00:31:39,600 --> 00:31:42,880
and you can search your access logs for

00:31:41,120 --> 00:31:44,960
these you can identify whether or not

00:31:42,880 --> 00:31:46,720
that selector is actually being used

00:31:44,960 --> 00:31:49,200
and you could across that code base kind

00:31:46,720 --> 00:31:50,880
of like decorate your css with these to

00:31:49,200 --> 00:31:52,559
kind of identify what is being used and

00:31:50,880 --> 00:31:53,279
what isn't being used which is a way of

00:31:52,559 --> 00:31:56,559
eliminating

00:31:53,279 --> 00:31:57,120
so much css that's something that we

00:31:56,559 --> 00:31:58,880
really

00:31:57,120 --> 00:32:00,559
are excited about doing but we haven't

00:31:58,880 --> 00:32:03,200
yet done um

00:32:00,559 --> 00:32:04,880
so yeah so it's like a google tracker

00:32:03,200 --> 00:32:07,600
for css

00:32:04,880 --> 00:32:09,120
yeah cool yeah thanks a lot there's

00:32:07,600 --> 00:32:10,640
another question over here just chiming

00:32:09,120 --> 00:32:13,200
in on the css topic

00:32:10,640 --> 00:32:14,799
uh there are tools like helium css that

00:32:13,200 --> 00:32:16,640
i don't know if you heard about it

00:32:14,799 --> 00:32:18,559
it like searches for selectors that are

00:32:16,640 --> 00:32:21,440
used per page and then

00:32:18,559 --> 00:32:22,000
remove the css that's unused but like it

00:32:21,440 --> 00:32:23,679
takes

00:32:22,000 --> 00:32:26,159
a certain amount of maintenance to

00:32:23,679 --> 00:32:28,159
actually be taking that out like it's

00:32:26,159 --> 00:32:30,320
not one of the cli tools that you just

00:32:28,159 --> 00:32:32,399
run it oh and it just does it on its own

00:32:30,320 --> 00:32:34,000
and like you can just sit and relax like

00:32:32,399 --> 00:32:35,279
it doesn't work that way so it takes a

00:32:34,000 --> 00:32:38,480
little bit of work it's a challenging

00:32:35,279 --> 00:32:41,440
topic yeah it's a really hard problem

00:32:38,480 --> 00:32:42,159
hello uh have you ever used asds and

00:32:41,440 --> 00:32:44,080
tests

00:32:42,159 --> 00:32:46,000
like sometimes like code changes that

00:32:44,080 --> 00:32:49,440
can't be done automatically like

00:32:46,000 --> 00:32:51,679
um non-localized strings for example

00:32:49,440 --> 00:32:54,240
oh yeah have you used ascs to detect

00:32:51,679 --> 00:32:57,279
those in tests or something

00:32:54,240 --> 00:33:00,640
yeah um the what you could do

00:32:57,279 --> 00:33:01,679
is so there are some tools that use asts

00:33:00,640 --> 00:33:03,600
to identify scope

00:33:01,679 --> 00:33:05,360
problems or variables that are

00:33:03,600 --> 00:33:07,840
undeclared or unused

00:33:05,360 --> 00:33:08,640
and um in the talk yesterday they

00:33:07,840 --> 00:33:10,799
mentioned

00:33:08,640 --> 00:33:11,840
eslint the newer version you can

00:33:10,799 --> 00:33:14,480
actually give it like

00:33:11,840 --> 00:33:16,080
custom rules that can identify your

00:33:14,480 --> 00:33:17,440
syntax trees and you can add these to

00:33:16,080 --> 00:33:18,000
your lint that you have on your code

00:33:17,440 --> 00:33:21,440
base

00:33:18,000 --> 00:33:25,840
to kind of enforce uh the good patterns

00:33:21,440 --> 00:33:25,840
that you want or remove the bad ones

00:33:28,480 --> 00:33:34,799
i can't see anyone raising their hands

00:33:32,159 --> 00:33:39,840
so i guess we're done thank you okay

00:33:34,799 --> 00:33:39,840
cool thank you

00:33:49,039 --> 00:33:51,120

YouTube URL: https://www.youtube.com/watch?v=U4vEKRffIFE


