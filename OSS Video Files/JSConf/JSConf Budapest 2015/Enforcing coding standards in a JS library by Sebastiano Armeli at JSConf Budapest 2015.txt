Title: Enforcing coding standards in a JS library by Sebastiano Armeli at JSConf Budapest 2015
Publication date: 2020-09-23
Playlist: JSConf Budapest 2015
Description: 
	Slides: https://speakerdeck.com/sebarmeli/enforcing-coding-standards-in-a-js-project

http://2015.jsconfbp.com/#sebarmeli

This talk is around enforcing coding standards in your JS project. Weâ€™ll discuss, as a use case, one of the libraries we use at Spotify in order to show the importance of keeping standards in your codebase. 

In this session weâ€™ll cover a few tools and practices you might want to follow when you build a JS library.
Captions: 
	00:00:10,880 --> 00:00:13,679
hey guys

00:00:11,840 --> 00:00:16,400
as carolina said my name is sebastian

00:00:13,679 --> 00:00:17,920
ormeli and i'm working the monetization

00:00:16,400 --> 00:00:20,640
team at spotify

00:00:17,920 --> 00:00:22,000
in new york and today i'm going to cover

00:00:20,640 --> 00:00:25,119
a few interesting things

00:00:22,000 --> 00:00:28,240
on how you can enforce coding standards

00:00:25,119 --> 00:00:29,119
in a js project so i'm going to start

00:00:28,240 --> 00:00:31,679
off

00:00:29,119 --> 00:00:33,120
looking at the meaning of the key of the

00:00:31,679 --> 00:00:36,719
two key words here

00:00:33,120 --> 00:00:39,440
which are enforcing and standards so

00:00:36,719 --> 00:00:40,559
the verb to enforce if you look at

00:00:39,440 --> 00:00:43,120
dictionary

00:00:40,559 --> 00:00:44,480
to inform to enforce means to put or

00:00:43,120 --> 00:00:47,920
keep in force

00:00:44,480 --> 00:00:50,480
to compel obedience to so an example if

00:00:47,920 --> 00:00:52,239
traffic laws will be strictly enforced

00:00:50,480 --> 00:00:54,480
so usually the connotation you give to

00:00:52,239 --> 00:00:57,600
this word is kind of a

00:00:54,480 --> 00:00:59,359
negative right you think about enforcing

00:00:57,600 --> 00:01:03,440
like

00:00:59,359 --> 00:01:06,000
stopping creativity um blocking you

00:01:03,440 --> 00:01:07,920
putting you kind of a jail but i'm

00:01:06,000 --> 00:01:11,360
trying to convince you in this talk

00:01:07,920 --> 00:01:13,200
that in some cases enforcing comes for a

00:01:11,360 --> 00:01:16,400
good reason

00:01:13,200 --> 00:01:16,880
so enforcing you can enforce something

00:01:16,400 --> 00:01:19,840
to

00:01:16,880 --> 00:01:20,640
enable creativity and to enable to focus

00:01:19,840 --> 00:01:23,439
your team

00:01:20,640 --> 00:01:24,799
on the right thing and the thing that we

00:01:23,439 --> 00:01:28,560
are trying to enforce here

00:01:24,799 --> 00:01:31,119
are standards standard is a noun that

00:01:28,560 --> 00:01:32,720
means a rule or principle that is used

00:01:31,119 --> 00:01:34,560
as a basis for judgment

00:01:32,720 --> 00:01:35,840
so it's pretty much like a rule or

00:01:34,560 --> 00:01:39,439
something that

00:01:35,840 --> 00:01:42,799
is defined by a community of people

00:01:39,439 --> 00:01:43,439
so how does this apply to a code to js

00:01:42,799 --> 00:01:47,360
code

00:01:43,439 --> 00:01:49,680
so let's have a look at some cases where

00:01:47,360 --> 00:01:50,640
we don't have standards so if you look

00:01:49,680 --> 00:01:54,159
at this code

00:01:50,640 --> 00:01:57,200
clearly i mean it works fine uh

00:01:54,159 --> 00:02:00,000
there are no errors but there are no

00:01:57,200 --> 00:02:01,280
there is no style here like no no

00:02:00,000 --> 00:02:02,960
conventions it's

00:02:01,280 --> 00:02:05,119
like if there is a new developer coming

00:02:02,960 --> 00:02:08,560
along you know you won't know

00:02:05,119 --> 00:02:11,840
how to write js code in this code base

00:02:08,560 --> 00:02:13,840
um if you just commit your code using

00:02:11,840 --> 00:02:16,239
like random coding messages like

00:02:13,840 --> 00:02:17,440
you know it will work trust me you know

00:02:16,239 --> 00:02:19,520
you don't know like what's going on

00:02:17,440 --> 00:02:22,640
behind this commit

00:02:19,520 --> 00:02:24,800
if you create like random names

00:02:22,640 --> 00:02:25,680
for your files and you put everything

00:02:24,800 --> 00:02:29,200
under

00:02:25,680 --> 00:02:31,280
like one root folder

00:02:29,200 --> 00:02:33,040
you pretty much like it's fairly

00:02:31,280 --> 00:02:36,480
confusing you don't know the meaning

00:02:33,040 --> 00:02:38,560
of the different uh different files i'm

00:02:36,480 --> 00:02:42,000
being very extreme here i guess no one

00:02:38,560 --> 00:02:43,760
does this but the concept is that if you

00:02:42,000 --> 00:02:47,920
don't have standards in a project

00:02:43,760 --> 00:02:47,920
you'll end up with a absolute chaos

00:02:48,239 --> 00:02:54,000
and it's not like vodka uh so

00:02:51,280 --> 00:02:55,840
what we're trying to get here is that we

00:02:54,000 --> 00:02:58,720
are trying to avoid the scales

00:02:55,840 --> 00:03:00,239
and we are enforcing uh through

00:02:58,720 --> 00:03:03,200
enforcing standards

00:03:00,239 --> 00:03:05,680
and the key concept here is automation

00:03:03,200 --> 00:03:08,239
so we are trying to say that

00:03:05,680 --> 00:03:09,519
if you enforce standards you should be

00:03:08,239 --> 00:03:13,360
able to automate

00:03:09,519 --> 00:03:17,360
through tools a few a few things

00:03:13,360 --> 00:03:21,040
and the rules that you come you decide

00:03:17,360 --> 00:03:22,720
they need to be defined by your team so

00:03:21,040 --> 00:03:24,799
there are no dictators there shouldn't

00:03:22,720 --> 00:03:25,680
be any dictators in a code base or in a

00:03:24,799 --> 00:03:28,480
project

00:03:25,680 --> 00:03:30,560
the team should come to a consensus so

00:03:28,480 --> 00:03:34,879
consensus may

00:03:30,560 --> 00:03:36,239
come to an agreement so maybe

00:03:34,879 --> 00:03:38,400
different developers have different

00:03:36,239 --> 00:03:39,360
opinions they prefer different things

00:03:38,400 --> 00:03:43,200
different

00:03:39,360 --> 00:03:45,440
coding style but the main thing for uh

00:03:43,200 --> 00:03:47,360
for a project is having agreement and

00:03:45,440 --> 00:03:50,080
people just being okay

00:03:47,360 --> 00:03:51,519
with a few rules and it's that's really

00:03:50,080 --> 00:03:53,040
important because

00:03:51,519 --> 00:03:56,799
you know when people come along they

00:03:53,040 --> 00:03:58,959
know the direction of the project

00:03:56,799 --> 00:04:00,560
as an example here i'm going through a

00:03:58,959 --> 00:04:03,599
few tools and

00:04:00,560 --> 00:04:06,720
principles that we use in our ad library

00:04:03,599 --> 00:04:08,879
at spotify i'm working on this library

00:04:06,720 --> 00:04:12,159
with a bunch of people at the moment

00:04:08,879 --> 00:04:15,360
it's a it's a js project

00:04:12,159 --> 00:04:18,160
that is used to render

00:04:15,360 --> 00:04:19,680
ads on spotify on the desktop client and

00:04:18,160 --> 00:04:22,880
on the web player

00:04:19,680 --> 00:04:26,639
um so yeah there is a web player spotify

00:04:22,880 --> 00:04:29,040
if you go to play.spotify.com and

00:04:26,639 --> 00:04:30,960
the type of ads that we are able to

00:04:29,040 --> 00:04:34,400
render through this library are like

00:04:30,960 --> 00:04:37,600
banner like this giant banner here

00:04:34,400 --> 00:04:38,400
or like audio ads or video ads so the

00:04:37,600 --> 00:04:42,080
summary of the

00:04:38,400 --> 00:04:45,840
things that we're gonna see are um

00:04:42,080 --> 00:04:48,400
something related to ids editor config

00:04:45,840 --> 00:04:49,440
quality and style tools git commit

00:04:48,400 --> 00:04:54,240
standards

00:04:49,440 --> 00:04:54,240
build tools transpiler complexity tools

00:04:54,840 --> 00:05:00,639
oops

00:04:57,520 --> 00:05:03,919
testing tools automated release flow

00:05:00,639 --> 00:05:04,720
setup script and documentation so a

00:05:03,919 --> 00:05:07,919
bunch of

00:05:04,720 --> 00:05:09,840
things that they should help you to set

00:05:07,919 --> 00:05:12,240
the standards in your project in your

00:05:09,840 --> 00:05:14,880
library in this case

00:05:12,240 --> 00:05:16,000
so let's start with the editor config

00:05:14,880 --> 00:05:19,919
the editor config

00:05:16,000 --> 00:05:23,039
project is basically a set of two things

00:05:19,919 --> 00:05:25,680
the plugin that you install on your ide

00:05:23,039 --> 00:05:27,440
there are plugins for pretty much all

00:05:25,680 --> 00:05:30,720
the ids available

00:05:27,440 --> 00:05:33,440
and a dot file called editor config

00:05:30,720 --> 00:05:34,000
the purpose of this this project is

00:05:33,440 --> 00:05:36,400
enable

00:05:34,000 --> 00:05:38,000
enabling to become to have a coding

00:05:36,400 --> 00:05:41,280
style consistent across

00:05:38,000 --> 00:05:44,320
editors so these are a

00:05:41,280 --> 00:05:46,080
dot editor config file and there are a

00:05:44,320 --> 00:05:49,280
bunch of rules here

00:05:46,080 --> 00:05:51,759
um you can go through them very quickly

00:05:49,280 --> 00:05:52,479
so the first one root equal true means

00:05:51,759 --> 00:05:55,039
tells the

00:05:52,479 --> 00:05:55,919
plugin to stop here and to consider this

00:05:55,039 --> 00:05:59,120
file

00:05:55,919 --> 00:06:00,560
then we set the indent style which in

00:05:59,120 --> 00:06:02,960
this case is space

00:06:00,560 --> 00:06:04,880
it's kind of standard space and two

00:06:02,960 --> 00:06:07,280
spaces as a kind of standard for

00:06:04,880 --> 00:06:08,400
most of the js projects but you can

00:06:07,280 --> 00:06:12,080
choose tab

00:06:08,400 --> 00:06:15,680
if your team agrees on that

00:06:12,080 --> 00:06:18,720
end of line lf

00:06:15,680 --> 00:06:20,160
so we use the unix standard lan feed but

00:06:18,720 --> 00:06:24,400
if you guys use windows

00:06:20,160 --> 00:06:28,240
you can use a carriage return line feed

00:06:24,400 --> 00:06:31,840
charset utf-8 pretty standard

00:06:28,240 --> 00:06:34,080
trim trailing white space true so we

00:06:31,840 --> 00:06:35,280
basically say to trim a white space at

00:06:34,080 --> 00:06:38,479
the end of the line

00:06:35,280 --> 00:06:39,759
and then we insert a new line at the end

00:06:38,479 --> 00:06:41,919
of the file

00:06:39,759 --> 00:06:44,639
pretty it's pretty standard kind of

00:06:41,919 --> 00:06:44,639
editor config

00:06:45,440 --> 00:06:48,639
second topic is coding style coding

00:06:47,919 --> 00:06:53,120
style and

00:06:48,639 --> 00:06:56,240
quality tools the purpose of those tools

00:06:53,120 --> 00:06:58,800
is basically to prevent bugs to improve

00:06:56,240 --> 00:07:01,599
code manageability and readability

00:06:58,800 --> 00:07:02,560
and have a set of rules that are easy to

00:07:01,599 --> 00:07:05,919
use

00:07:02,560 --> 00:07:09,039
understand so

00:07:05,919 --> 00:07:11,759
part of those tools are jsyn jslint

00:07:09,039 --> 00:07:14,639
eslint js check style probably you're

00:07:11,759 --> 00:07:17,680
already familiar with those tools

00:07:14,639 --> 00:07:21,520
the most popular probably is jsint

00:07:17,680 --> 00:07:23,199
um so for example what um

00:07:21,520 --> 00:07:25,039
one of the main things that jsint for

00:07:23,199 --> 00:07:27,440
example does is

00:07:25,039 --> 00:07:28,639
preventing bugs being able to identify

00:07:27,440 --> 00:07:30,800
bugs

00:07:28,639 --> 00:07:31,759
so for example if you've got the code

00:07:30,800 --> 00:07:33,520
like this

00:07:31,759 --> 00:07:34,880
you got an increment function with the

00:07:33,520 --> 00:07:37,440
return statement which is

00:07:34,880 --> 00:07:38,800
broken into lines using jsync you're

00:07:37,440 --> 00:07:42,000
able to identify

00:07:38,800 --> 00:07:42,960
this kind of bugs or if you have like a

00:07:42,000 --> 00:07:47,039
linking variable

00:07:42,960 --> 00:07:49,280
so if you got an assignment like this

00:07:47,039 --> 00:07:52,639
so you've got y and that which are

00:07:49,280 --> 00:07:52,639
leaking so they're global

00:07:52,800 --> 00:07:56,000
jsint is able to identify these this

00:07:54,639 --> 00:07:58,960
kind of problems

00:07:56,000 --> 00:07:59,840
but also you've got coding style uh

00:07:58,960 --> 00:08:01,759
tools

00:07:59,840 --> 00:08:03,759
those coding style tools are really

00:08:01,759 --> 00:08:07,599
great because they allow you

00:08:03,759 --> 00:08:10,160
to automate things that they don't read

00:08:07,599 --> 00:08:12,080
they don't need human interaction so for

00:08:10,160 --> 00:08:14,240
example when you submit a pr

00:08:12,080 --> 00:08:16,160
and you need a code review from someone

00:08:14,240 --> 00:08:18,319
most of the time what happens is that

00:08:16,160 --> 00:08:19,680
the first thing you look at is the

00:08:18,319 --> 00:08:22,720
coding style

00:08:19,680 --> 00:08:25,759
of the pr before looking at the content

00:08:22,720 --> 00:08:26,160
but if you automate if you use a tool if

00:08:25,759 --> 00:08:28,879
you

00:08:26,160 --> 00:08:30,000
use the right tool you're sure and

00:08:28,879 --> 00:08:32,399
you're able to automate

00:08:30,000 --> 00:08:34,000
the check you pretty much don't need to

00:08:32,399 --> 00:08:37,760
check the style of api

00:08:34,000 --> 00:08:39,680
you go straight into the content and

00:08:37,760 --> 00:08:41,200
you can focus on the on the things that

00:08:39,680 --> 00:08:42,080
really matter so business value and

00:08:41,200 --> 00:08:45,519
fixing bugs

00:08:42,080 --> 00:08:49,040
rather looking at style um

00:08:45,519 --> 00:08:51,279
in terms of tools as i said jsync is a

00:08:49,040 --> 00:08:52,320
most popular tool it was a fork from

00:08:51,279 --> 00:08:54,640
jslint

00:08:52,320 --> 00:08:55,760
which is the tool uh that crockford

00:08:54,640 --> 00:08:58,959
wrote

00:08:55,760 --> 00:09:02,000
um it's a static quality tool

00:08:58,959 --> 00:09:04,480
and um we used to use it and

00:09:02,000 --> 00:09:05,120
the way adjacent works is through a dot

00:09:04,480 --> 00:09:08,480
file

00:09:05,120 --> 00:09:09,680
called jsc and rc this was a kind of a

00:09:08,480 --> 00:09:12,800
subset of

00:09:09,680 --> 00:09:12,800
the rules that we had

00:09:13,200 --> 00:09:17,120
so example of our rules we've got in

00:09:15,120 --> 00:09:20,000
jail scene i like for example curly

00:09:17,120 --> 00:09:21,040
true which enforces people to have curly

00:09:20,000 --> 00:09:24,399
braces

00:09:21,040 --> 00:09:27,440
around blocks or late def equal true

00:09:24,399 --> 00:09:30,000
which basically enforces to have a

00:09:27,440 --> 00:09:32,399
definition to define a variable before

00:09:30,000 --> 00:09:34,959
using it and a bunch of other rules

00:09:32,399 --> 00:09:36,959
usually jsint is used more for quality

00:09:34,959 --> 00:09:38,080
rather than style even though there are

00:09:36,959 --> 00:09:41,519
some style

00:09:38,080 --> 00:09:44,240
kind of rules if you want to be specific

00:09:41,519 --> 00:09:45,680
on style instead probably the best tool

00:09:44,240 --> 00:09:49,760
is js

00:09:45,680 --> 00:09:52,080
cs js check style js track style

00:09:49,760 --> 00:09:52,800
comes also with a gold plugin and grunt

00:09:52,080 --> 00:09:56,080
plugin

00:09:52,800 --> 00:10:00,560
similar as a jsint and it's got the js

00:09:56,080 --> 00:10:02,720
csrc dot file which the set of rules

00:10:00,560 --> 00:10:04,320
um and as i said here they're all

00:10:02,720 --> 00:10:07,120
specific to style

00:10:04,320 --> 00:10:08,399
so for example you have a rule for

00:10:07,120 --> 00:10:11,680
disallow mix

00:10:08,399 --> 00:10:15,200
spaces and tabs or

00:10:11,680 --> 00:10:18,480
define the maximum line length

00:10:15,200 --> 00:10:21,600
which is for us was 80.

00:10:18,480 --> 00:10:24,720
but nowadays what we use and we find

00:10:21,600 --> 00:10:27,920
really really great is eslint

00:10:24,720 --> 00:10:29,279
yes lint is a tool that wrote by nikola

00:10:27,920 --> 00:10:31,839
zakas

00:10:29,279 --> 00:10:32,399
and the amazing thing about eslint is is

00:10:31,839 --> 00:10:35,519
that

00:10:32,399 --> 00:10:36,480
has got a huge set of rules more

00:10:35,519 --> 00:10:39,680
extensive than

00:10:36,480 --> 00:10:42,959
jsnt is able to incorporate

00:10:39,680 --> 00:10:46,720
quality and style rules and

00:10:42,959 --> 00:10:49,680
also is able to you can

00:10:46,720 --> 00:10:50,880
write rules so you can set up your

00:10:49,680 --> 00:10:52,959
custom rule

00:10:50,880 --> 00:10:54,160
because you can use s3 which is fork

00:10:52,959 --> 00:10:57,680
from extrema

00:10:54,160 --> 00:10:57,680
and you can set up a new rule

00:10:58,640 --> 00:11:02,160
similarly as the other tools works

00:11:00,560 --> 00:11:05,680
through a um

00:11:02,160 --> 00:11:08,000
dot file eslint rc file

00:11:05,680 --> 00:11:09,600
and there is also a gold plugin on the

00:11:08,000 --> 00:11:13,279
ground plugin

00:11:09,600 --> 00:11:16,000
available that's the first part of the

00:11:13,279 --> 00:11:17,200
of the dot file so you need to specify a

00:11:16,000 --> 00:11:19,920
parser

00:11:17,200 --> 00:11:21,120
in our case our parser is babel eslint

00:11:19,920 --> 00:11:24,079
because we use babel

00:11:21,120 --> 00:11:25,279
and es6 if you do that you need to

00:11:24,079 --> 00:11:27,279
install babel

00:11:25,279 --> 00:11:29,839
eslint as a package because it's an

00:11:27,279 --> 00:11:29,839
external package

00:11:31,120 --> 00:11:36,000
second section is environment so you can

00:11:32,959 --> 00:11:38,720
set a few environment variable global

00:11:36,000 --> 00:11:39,920
environment variables such as the

00:11:38,720 --> 00:11:43,519
standard for browser

00:11:39,920 --> 00:11:44,800
node moca and es6 and then you define

00:11:43,519 --> 00:11:46,800
the sections

00:11:44,800 --> 00:11:49,760
the section with the rules this is a

00:11:46,800 --> 00:11:53,839
subset of the rules we have

00:11:49,760 --> 00:11:55,279
so if you look at those rules

00:11:53,839 --> 00:11:57,760
one thing you can notice here

00:11:55,279 --> 00:12:00,079
differently from jsynt in jsc

00:11:57,760 --> 00:12:00,880
you got the rule and true and false to

00:12:00,079 --> 00:12:03,279
say

00:12:00,880 --> 00:12:04,880
you want to apply this rule or not with

00:12:03,279 --> 00:12:07,680
the eslint

00:12:04,880 --> 00:12:08,720
you have a number which is like 0 1 or

00:12:07,680 --> 00:12:12,079
2.

00:12:08,720 --> 00:12:14,800
2 means that you want that uh rule

00:12:12,079 --> 00:12:16,160
to throw an error if you say zero you

00:12:14,800 --> 00:12:19,920
disallow that rule

00:12:16,160 --> 00:12:23,120
if you say one you will throw a warning

00:12:19,920 --> 00:12:23,839
so you've got that nice feature of

00:12:23,120 --> 00:12:26,880
drawing

00:12:23,839 --> 00:12:30,720
warning which you don't have in jsent

00:12:26,880 --> 00:12:34,200
and also you have the option of passing

00:12:30,720 --> 00:12:37,360
arguments so for example in the rule

00:12:34,200 --> 00:12:40,399
eq you can pass smart

00:12:37,360 --> 00:12:42,880
as a as an argument and specifically

00:12:40,399 --> 00:12:45,279
this rule for example tells us that

00:12:42,880 --> 00:12:47,120
we want to throw an error if we don't

00:12:45,279 --> 00:12:50,320
use the triple equal

00:12:47,120 --> 00:12:53,279
except for some

00:12:50,320 --> 00:12:53,839
some situation like you're comparing

00:12:53,279 --> 00:12:56,720
against

00:12:53,839 --> 00:12:58,720
null or you're comparing literals or

00:12:56,720 --> 00:13:02,160
you're comparing

00:12:58,720 --> 00:13:04,079
against the value of a type of

00:13:02,160 --> 00:13:05,600
but you can see other examples where for

00:13:04,079 --> 00:13:07,600
example you say quotes

00:13:05,600 --> 00:13:11,360
and you pass single because you're

00:13:07,600 --> 00:13:13,680
enforcing uh the single quote

00:13:11,360 --> 00:13:15,600
um for example another rule is a no

00:13:13,680 --> 00:13:18,639
unused vars

00:13:15,600 --> 00:13:19,200
which is a so the number is true so we

00:13:18,639 --> 00:13:20,880
want us

00:13:19,200 --> 00:13:22,800
to draw an error if we don't respect

00:13:20,880 --> 00:13:26,320
this rule and also we pass

00:13:22,800 --> 00:13:27,760
argus none as an argument so that means

00:13:26,320 --> 00:13:29,680
that

00:13:27,760 --> 00:13:31,120
we throw an error if there are unused

00:13:29,680 --> 00:13:34,720
variables

00:13:31,120 --> 00:13:37,760
aside from the variables that come from

00:13:34,720 --> 00:13:40,240
an argument of a of a function

00:13:37,760 --> 00:13:41,279
so for example here we've got test1

00:13:40,240 --> 00:13:43,760
function

00:13:41,279 --> 00:13:45,360
which defines the variable c and d so

00:13:43,760 --> 00:13:48,240
they are unused

00:13:45,360 --> 00:13:50,320
so we draw an error instead the second

00:13:48,240 --> 00:13:53,680
the second function test2

00:13:50,320 --> 00:13:56,560
we've got c which is unused but

00:13:53,680 --> 00:13:57,839
is part of uh is one of the arguments

00:13:56,560 --> 00:14:00,839
one of the parameters

00:13:57,839 --> 00:14:02,639
of this function so um it won't draw an

00:14:00,839 --> 00:14:04,560
error

00:14:02,639 --> 00:14:06,320
so it's really as you can see it's

00:14:04,560 --> 00:14:09,839
really powerful

00:14:06,320 --> 00:14:13,600
uh tool to set uh um

00:14:09,839 --> 00:14:15,199
quality and and style and as i said

00:14:13,600 --> 00:14:17,040
the other nice thing is that you got

00:14:15,199 --> 00:14:18,399
quality and style so all the things you

00:14:17,040 --> 00:14:21,360
get you can get with js

00:14:18,399 --> 00:14:22,560
jscs you can get also dslint so for

00:14:21,360 --> 00:14:25,600
example those are

00:14:22,560 --> 00:14:27,839
rules specifically for style you can say

00:14:25,600 --> 00:14:29,519
enforcing the quotes to be single

00:14:27,839 --> 00:14:31,839
indentation to b2

00:14:29,519 --> 00:14:33,199
uh not trading spaces and no mixed

00:14:31,839 --> 00:14:37,120
spaces and tabs

00:14:33,199 --> 00:14:40,320
for example and other thing is that

00:14:37,120 --> 00:14:45,839
you can also set custom rules

00:14:40,320 --> 00:14:45,839
so let's say we are creating a rule that

00:14:46,079 --> 00:14:50,560
disallowed the use of the object

00:14:48,720 --> 00:14:53,680
constructor

00:14:50,560 --> 00:14:54,639
it's already existing this from the the

00:14:53,680 --> 00:14:58,959
code of uh

00:14:54,639 --> 00:15:01,360
yes lint which is called no new object

00:14:58,959 --> 00:15:03,199
this is the code that is able to make

00:15:01,360 --> 00:15:06,399
this rule

00:15:03,199 --> 00:15:07,360
so it's using esprima so you will pass a

00:15:06,399 --> 00:15:10,000
context

00:15:07,360 --> 00:15:11,360
which is an object that you can use to

00:15:10,000 --> 00:15:14,000
throw errors

00:15:11,360 --> 00:15:15,519
and also from the context you can pass

00:15:14,000 --> 00:15:16,880
you can get the arguments that you pass

00:15:15,519 --> 00:15:18,560
into rule

00:15:16,880 --> 00:15:21,680
and also you can deal with the node

00:15:18,560 --> 00:15:23,920
which is the ast node

00:15:21,680 --> 00:15:25,600
in this case the new expression because

00:15:23,920 --> 00:15:28,240
i'm looking at

00:15:25,600 --> 00:15:30,320
creating a new object so it's pretty

00:15:28,240 --> 00:15:32,240
this case is pretty straightforward but

00:15:30,320 --> 00:15:33,440
if you if you get familiar with the

00:15:32,240 --> 00:15:37,759
extrema

00:15:33,440 --> 00:15:37,759
it's really nice to build your own rule

00:15:38,399 --> 00:15:41,600
another tool that we use for uh coding

00:15:40,880 --> 00:15:45,120
quality

00:15:41,600 --> 00:15:46,720
is a js inspect uh it's a really tiny

00:15:45,120 --> 00:15:47,440
library but it's really nice because it

00:15:46,720 --> 00:15:49,839
allows you

00:15:47,440 --> 00:15:51,920
to identify really easily code

00:15:49,839 --> 00:15:55,279
duplications

00:15:51,920 --> 00:15:58,639
and we use it in our build um

00:15:55,279 --> 00:16:00,800
third thing is uh git commit standards

00:15:58,639 --> 00:16:02,000
as i'll show you before commits are

00:16:00,800 --> 00:16:04,320
important because

00:16:02,000 --> 00:16:05,360
you want to know what happens in in the

00:16:04,320 --> 00:16:08,560
history of your

00:16:05,360 --> 00:16:09,360
of your library of your project so what

00:16:08,560 --> 00:16:13,360
we do

00:16:09,360 --> 00:16:15,360
we use the standards from angularjs

00:16:13,360 --> 00:16:17,759
we are not i mean we don't use angular

00:16:15,360 --> 00:16:18,959
but we find those standards to be really

00:16:17,759 --> 00:16:20,560
nice

00:16:18,959 --> 00:16:22,000
because it allows you to define three

00:16:20,560 --> 00:16:25,360
things first of all the type

00:16:22,000 --> 00:16:28,399
of commit so you can save this commit

00:16:25,360 --> 00:16:29,360
is a feature it's a fix the style kind

00:16:28,399 --> 00:16:32,480
of commit

00:16:29,360 --> 00:16:34,959
related refactor or some

00:16:32,480 --> 00:16:36,000
something related test or just a choring

00:16:34,959 --> 00:16:37,839
thing

00:16:36,000 --> 00:16:39,440
then second thing you define the scope

00:16:37,839 --> 00:16:42,560
so like a component you're gonna

00:16:39,440 --> 00:16:45,680
you're touching and then you describe

00:16:42,560 --> 00:16:45,680
what the command does

00:16:46,320 --> 00:16:49,440
but also the other main reason why we do

00:16:48,320 --> 00:16:52,320
this is because

00:16:49,440 --> 00:16:53,600
we want to have a nice change log from

00:16:52,320 --> 00:16:56,079
our git commits because

00:16:53,600 --> 00:16:57,839
we we are using a library we are

00:16:56,079 --> 00:16:58,560
creating a library that is used across

00:16:57,839 --> 00:17:01,120
the company

00:16:58,560 --> 00:17:02,399
so we want people to have a clear

00:17:01,120 --> 00:17:04,959
understanding of what we're

00:17:02,399 --> 00:17:05,600
publishing in different versions so we

00:17:04,959 --> 00:17:08,000
use this

00:17:05,600 --> 00:17:09,439
package called conventional changelog

00:17:08,000 --> 00:17:12,720
which is able to

00:17:09,439 --> 00:17:15,600
based on the angularjs commit standards

00:17:12,720 --> 00:17:17,120
to generate a changelog md file and

00:17:15,600 --> 00:17:20,240
that's kind of

00:17:17,120 --> 00:17:21,919
how it looks the changelog generated

00:17:20,240 --> 00:17:24,880
from

00:17:21,919 --> 00:17:24,880
the coming messages

00:17:25,919 --> 00:17:31,120
other thing are build tools i guess

00:17:29,120 --> 00:17:32,720
everyone here uses build tools

00:17:31,120 --> 00:17:34,400
in general they're really nice which

00:17:32,720 --> 00:17:37,679
allows you to create to have

00:17:34,400 --> 00:17:40,559
multiple tasks and automate things

00:17:37,679 --> 00:17:42,799
we used to use grunt which is great but

00:17:40,559 --> 00:17:46,000
recently we switched to gulp

00:17:42,799 --> 00:17:47,919
because it's slightly faster and the

00:17:46,000 --> 00:17:51,039
classic task we use are gulp

00:17:47,919 --> 00:17:54,160
test for running tests and google dev

00:17:51,039 --> 00:17:59,120
just to transpile and to

00:17:54,160 --> 00:18:02,400
watch the source file the source folder

00:17:59,120 --> 00:18:04,400
an example of a subset of a gulp file js

00:18:02,400 --> 00:18:07,760
looks like this so this one is just a

00:18:04,400 --> 00:18:07,760
task for eslint

00:18:07,840 --> 00:18:11,360
i would recommend to use the gulp load

00:18:10,000 --> 00:18:14,320
plugins

00:18:11,360 --> 00:18:15,440
module which is a allows you to load all

00:18:14,320 --> 00:18:17,120
the plugins

00:18:15,440 --> 00:18:20,080
automatically as long as the plugin

00:18:17,120 --> 00:18:22,640
starts with gulp and dash

00:18:20,080 --> 00:18:24,320
um but it's a kind of pretty pretty

00:18:22,640 --> 00:18:27,679
standard but really nice to

00:18:24,320 --> 00:18:31,039
you know like being able to identify one

00:18:27,679 --> 00:18:35,280
build tool that works for your team

00:18:31,039 --> 00:18:38,480
and es6 i'm a big fan of as6

00:18:35,280 --> 00:18:40,000
in general we use it in our in our

00:18:38,480 --> 00:18:42,080
source code

00:18:40,000 --> 00:18:44,640
so we can use all the nice features such

00:18:42,080 --> 00:18:47,679
as you know using fat error functions

00:18:44,640 --> 00:18:51,120
latin const classes

00:18:47,679 --> 00:18:54,640
map set collections

00:18:51,120 --> 00:18:57,280
um and but

00:18:54,640 --> 00:18:59,360
since we are the only kind of librarian

00:18:57,280 --> 00:19:02,640
project using s6 spotify

00:18:59,360 --> 00:19:05,679
we use babel to compile to transpile

00:19:02,640 --> 00:19:08,559
es6 code into es5

00:19:05,679 --> 00:19:09,600
so we basically write our code in the

00:19:08,559 --> 00:19:12,799
source folder

00:19:09,600 --> 00:19:15,600
and then we run a task gulp es6

00:19:12,799 --> 00:19:16,960
which transpiles the code into es5 into

00:19:15,600 --> 00:19:18,960
the disk folder

00:19:16,960 --> 00:19:20,000
and then we publish into our private

00:19:18,960 --> 00:19:22,400
registry the

00:19:20,000 --> 00:19:24,000
this folder so other packages they

00:19:22,400 --> 00:19:25,280
basically read from the this folder from

00:19:24,000 --> 00:19:27,280
the es5 version

00:19:25,280 --> 00:19:28,400
but for us it's really nice to start

00:19:27,280 --> 00:19:31,120
writing

00:19:28,400 --> 00:19:32,400
the code that is future proof so using

00:19:31,120 --> 00:19:34,799
all the nice features

00:19:32,400 --> 00:19:35,520
from es6 of course we can't use all of

00:19:34,799 --> 00:19:38,960
them

00:19:35,520 --> 00:19:43,919
you know we can't use weak maps

00:19:38,960 --> 00:19:43,919
and proxy because they can be transpiled

00:19:45,600 --> 00:19:49,840
another nice tool we use is a plateau

00:19:48,000 --> 00:19:53,520
for complexity

00:19:49,840 --> 00:19:55,600
so plato allows you to identify a few

00:19:53,520 --> 00:19:57,200
values around the maintainability of

00:19:55,600 --> 00:19:59,919
your code

00:19:57,200 --> 00:20:01,280
we run this task on the jenkins field

00:19:59,919 --> 00:20:04,159
for each commit

00:20:01,280 --> 00:20:05,760
and plato generates a really nice report

00:20:04,159 --> 00:20:07,840
html report

00:20:05,760 --> 00:20:09,440
so for each commit we know exactly the

00:20:07,840 --> 00:20:10,320
complexity of our code and we can keep

00:20:09,440 --> 00:20:13,120
the history of it

00:20:10,320 --> 00:20:14,320
so we can notice if our code goes up or

00:20:13,120 --> 00:20:16,000
down

00:20:14,320 --> 00:20:17,919
one thing we haven't figured out is how

00:20:16,000 --> 00:20:18,840
we can put thresholds on this so for

00:20:17,919 --> 00:20:22,880
example

00:20:18,840 --> 00:20:25,440
if the build will break if for example

00:20:22,880 --> 00:20:27,120
the complexity of your code goes over

00:20:25,440 --> 00:20:28,320
like a certain level the maintainability

00:20:27,120 --> 00:20:31,520
of your code goes

00:20:28,320 --> 00:20:31,520
over a certain level

00:20:31,600 --> 00:20:36,159
testing of course because everyone

00:20:36,799 --> 00:20:40,080
writes tests here but we use a quick

00:20:39,520 --> 00:20:43,760
start

00:20:40,080 --> 00:20:44,960
to compile our js code quick start is a

00:20:43,760 --> 00:20:47,039
spotify

00:20:44,960 --> 00:20:48,480
we open source this tool is like kind of

00:20:47,039 --> 00:20:51,600
a browser if i

00:20:48,480 --> 00:20:53,520
tool we made this

00:20:51,600 --> 00:20:56,559
this package initially because we had

00:20:53,520 --> 00:21:00,400
some spotify specific things

00:20:56,559 --> 00:21:02,159
so that's why we're using extensively

00:21:00,400 --> 00:21:05,039
and we use that mocha as a test

00:21:02,159 --> 00:21:08,320
framework and karma is a test runner

00:21:05,039 --> 00:21:10,080
for unit and integration tests it's an

00:21:08,320 --> 00:21:12,960
example of a spec

00:21:10,080 --> 00:21:13,760
for our video ads for example uh as you

00:21:12,960 --> 00:21:16,880
can see

00:21:13,760 --> 00:21:19,200
uh describe either from uh moca we use

00:21:16,880 --> 00:21:21,679
cyano for stubbing and spying

00:21:19,200 --> 00:21:23,520
and we use a chai and specifically

00:21:21,679 --> 00:21:27,280
expect js for

00:21:23,520 --> 00:21:28,000
expectations um so yeah i mentioned this

00:21:27,280 --> 00:21:30,480
for a

00:21:28,000 --> 00:21:32,240
unit and integration for functional

00:21:30,480 --> 00:21:35,200
testing

00:21:32,240 --> 00:21:37,200
we use selenium but we don't run it on

00:21:35,200 --> 00:21:39,440
the same project because uh

00:21:37,200 --> 00:21:40,320
we need to run the old client and

00:21:39,440 --> 00:21:44,320
requires

00:21:40,320 --> 00:21:46,240
more effort there these are kind of a

00:21:44,320 --> 00:21:48,080
subset of our karma conf i don't know if

00:21:46,240 --> 00:21:49,360
you ever used karma before but camera is

00:21:48,080 --> 00:21:52,240
a is a

00:21:49,360 --> 00:21:53,360
is a tool allows you to run tests on in

00:21:52,240 --> 00:21:56,960
the browser

00:21:53,360 --> 00:21:58,559
um it's got a few uh a few different

00:21:56,960 --> 00:22:00,240
plugins for example there is a fixture

00:21:58,559 --> 00:22:03,280
plugin that we use

00:22:00,240 --> 00:22:06,240
and we run our tests locally on

00:22:03,280 --> 00:22:07,679
on chrome back around different browser

00:22:06,240 --> 00:22:10,960
on phantomjs

00:22:07,679 --> 00:22:13,039
for example one of the features i really

00:22:10,960 --> 00:22:15,840
like

00:22:13,039 --> 00:22:16,799
is automating the release flow or

00:22:15,840 --> 00:22:19,280
package

00:22:16,799 --> 00:22:20,400
so it's basically jenkins pipeline that

00:22:19,280 --> 00:22:22,880
we've got

00:22:20,400 --> 00:22:24,480
which is made of two different builds

00:22:22,880 --> 00:22:27,600
the first one is a commit build

00:22:24,480 --> 00:22:31,440
which runs for each commit so runs

00:22:27,600 --> 00:22:34,720
tests on source labs so sourcelabs is a

00:22:31,440 --> 00:22:38,000
service that allows you to have

00:22:34,720 --> 00:22:40,320
to just borrow virtual machines

00:22:38,000 --> 00:22:42,880
with different browsers so we can target

00:22:40,320 --> 00:22:44,880
a specific browser on a vm

00:22:42,880 --> 00:22:46,720
so we run those tests on the build

00:22:44,880 --> 00:22:47,760
commits and also we generate the plato

00:22:46,720 --> 00:22:50,400
reports

00:22:47,760 --> 00:22:51,760
on on the build commit and after this

00:22:50,400 --> 00:22:54,080
we've got a manual step

00:22:51,760 --> 00:22:56,240
so if the build is successful you can

00:22:54,080 --> 00:22:58,559
trigger a manual step

00:22:56,240 --> 00:22:59,440
in jenkins so you got the drop down

00:22:58,559 --> 00:23:01,600
where

00:22:59,440 --> 00:23:03,679
you can specify the type of release you

00:23:01,600 --> 00:23:06,159
want to do so you can specify a patch a

00:23:03,679 --> 00:23:09,679
minor a major release

00:23:06,159 --> 00:23:11,840
so at any time we can we know

00:23:09,679 --> 00:23:13,120
when we want to release like we all

00:23:11,840 --> 00:23:15,360
decide together

00:23:13,120 --> 00:23:17,200
uh you know meetings or slack we say

00:23:15,360 --> 00:23:19,600
okay let's release that's a minor vision

00:23:17,200 --> 00:23:22,559
it's a major version so we go on jenkins

00:23:19,600 --> 00:23:23,039
we choose the right option and then this

00:23:22,559 --> 00:23:25,600
um

00:23:23,039 --> 00:23:27,440
there is a gold task that basically what

00:23:25,600 --> 00:23:28,480
they do they just publish the package to

00:23:27,440 --> 00:23:30,880
the our private

00:23:28,480 --> 00:23:31,760
npm registry and also generate the

00:23:30,880 --> 00:23:34,000
change log

00:23:31,760 --> 00:23:35,679
so at the end of the uh for each release

00:23:34,000 --> 00:23:36,320
we got a nice change log we got a new

00:23:35,679 --> 00:23:38,960
version

00:23:36,320 --> 00:23:38,960
on npm

00:23:39,919 --> 00:23:44,159
another kind of nice thing is having a

00:23:42,880 --> 00:23:46,960
setup script

00:23:44,159 --> 00:23:48,080
which is a just a small script that each

00:23:46,960 --> 00:23:50,640
developer

00:23:48,080 --> 00:23:52,080
each new developer will run as soon as

00:23:50,640 --> 00:23:54,880
starts the project

00:23:52,080 --> 00:23:55,840
so will help us help you of the

00:23:54,880 --> 00:23:58,480
developer

00:23:55,840 --> 00:23:59,279
uh running tests setting up you know

00:23:58,480 --> 00:24:02,640
packages

00:23:59,279 --> 00:24:04,400
and installing git hooks

00:24:02,640 --> 00:24:07,679
so for example a pre-commit hook or a

00:24:04,400 --> 00:24:07,679
post merge hook

00:24:07,840 --> 00:24:12,080
i would recommend it to have it in your

00:24:09,520 --> 00:24:16,320
project it's just something very easy

00:24:12,080 --> 00:24:20,400
for everyone to have and another

00:24:16,320 --> 00:24:22,080
main point main focus is documentation

00:24:20,400 --> 00:24:23,679
so we really stress the right readme

00:24:22,080 --> 00:24:26,400
file uh

00:24:23,679 --> 00:24:27,679
one thing i do when there is a new uh

00:24:26,400 --> 00:24:31,120
starter in

00:24:27,679 --> 00:24:32,000
my team is that i i basically give him

00:24:31,120 --> 00:24:34,960
like readme file

00:24:32,000 --> 00:24:36,000
and contributing md and if he's able to

00:24:34,960 --> 00:24:37,840
as a test

00:24:36,000 --> 00:24:39,600
you should be able to start and start

00:24:37,840 --> 00:24:40,559
committing in our code base without

00:24:39,600 --> 00:24:43,600
asking us

00:24:40,559 --> 00:24:44,559
anything if we do this means that we are

00:24:43,600 --> 00:24:46,480
a good point

00:24:44,559 --> 00:24:48,320
in our documentation if we are not able

00:24:46,480 --> 00:24:50,640
to do this means that we are not

00:24:48,320 --> 00:24:52,559
uh so the readme file is basically for

00:24:50,640 --> 00:24:55,440
us just a way of explaining

00:24:52,559 --> 00:24:56,000
you know what your our project does

00:24:55,440 --> 00:24:58,559
different

00:24:56,000 --> 00:25:00,480
ad formats that we serve and the

00:24:58,559 --> 00:25:02,559
contributing instead is more about

00:25:00,480 --> 00:25:04,720
the set of tools and standards so pretty

00:25:02,559 --> 00:25:09,440
much what i've been going through

00:25:04,720 --> 00:25:12,799
just now um also we got a doc folder

00:25:09,440 --> 00:25:14,000
um which contains a few like kind of a

00:25:12,799 --> 00:25:17,120
style guide

00:25:14,000 --> 00:25:20,320
around the way we use the es6 so

00:25:17,120 --> 00:25:22,320
we basically use the air bnb kind of

00:25:20,320 --> 00:25:25,120
style guide for your es6

00:25:22,320 --> 00:25:26,559
so for example we've got an md file

00:25:25,120 --> 00:25:29,279
saying

00:25:26,559 --> 00:25:30,480
avoid using var and use latin const and

00:25:29,279 --> 00:25:32,960
we explain the different

00:25:30,480 --> 00:25:34,240
kind of examples or where to use light

00:25:32,960 --> 00:25:36,400
and const

00:25:34,240 --> 00:25:37,760
so again for new starters or for people

00:25:36,400 --> 00:25:39,360
that they want to

00:25:37,760 --> 00:25:41,679
collaborate to a project but they don't

00:25:39,360 --> 00:25:44,720
know much about es6

00:25:41,679 --> 00:25:48,000
and and also really tiny thing is uh

00:25:44,720 --> 00:25:50,320
we like keeping a mail map the file

00:25:48,000 --> 00:25:51,200
which is just uh comes from the git

00:25:50,320 --> 00:25:54,400
short log

00:25:51,200 --> 00:25:56,320
so you can summarize the authors of your

00:25:54,400 --> 00:25:59,440
project plus there's a bit of uh

00:25:56,320 --> 00:26:01,679
normalization around the emails that

00:25:59,440 --> 00:26:02,640
that you use because for example people

00:26:01,679 --> 00:26:05,039
commit

00:26:02,640 --> 00:26:06,400
work at home or work so sometimes there

00:26:05,039 --> 00:26:10,240
are different emails

00:26:06,400 --> 00:26:13,760
set for your their git account anyway

00:26:10,240 --> 00:26:17,120
so these are set of tools and kind of uh

00:26:13,760 --> 00:26:18,080
standards that we use and my main point

00:26:17,120 --> 00:26:19,840
here is that

00:26:18,080 --> 00:26:21,279
i'm not saying that those are the tools

00:26:19,840 --> 00:26:23,679
that

00:26:21,279 --> 00:26:25,440
all the community or you guys should use

00:26:23,679 --> 00:26:28,960
the main point here is that

00:26:25,440 --> 00:26:29,760
um i i think that if you have standards

00:26:28,960 --> 00:26:32,720
in your code

00:26:29,760 --> 00:26:33,679
you can really focus your energy and the

00:26:32,720 --> 00:26:37,440
energy of your team

00:26:33,679 --> 00:26:39,600
on business value without worrying about

00:26:37,440 --> 00:26:40,720
like small and tiny things plus setting

00:26:39,600 --> 00:26:43,200
a direction

00:26:40,720 --> 00:26:44,000
it's nice for the whole team and the

00:26:43,200 --> 00:26:46,320
other main thing

00:26:44,000 --> 00:26:47,919
having a consensus from the old team so

00:26:46,320 --> 00:26:49,840
everyone needs to agree on a rule

00:26:47,919 --> 00:26:51,600
so for example if there is a new team

00:26:49,840 --> 00:26:55,520
members really important that

00:26:51,600 --> 00:26:59,200
his opinion like it gets the consensus

00:26:55,520 --> 00:27:02,960
for uh those standards as well

00:26:59,200 --> 00:27:06,830
and um yeah so i published my slides

00:27:02,960 --> 00:27:17,339
on speaker deck and that's all for me

00:27:06,830 --> 00:27:17,339
[Applause]

00:27:18,840 --> 00:27:21,840
thanks

00:27:22,080 --> 00:27:25,520
okay so we have two questions from

00:27:24,240 --> 00:27:28,880
twitter

00:27:25,520 --> 00:27:31,200
first one being how do you introduce

00:27:28,880 --> 00:27:32,080
new style rules do you change old code

00:27:31,200 --> 00:27:35,520
immediately

00:27:32,080 --> 00:27:37,440
that does not apply yeah if we decide

00:27:35,520 --> 00:27:38,720
for a new rules for example it happened

00:27:37,440 --> 00:27:42,240
when we switched from

00:27:38,720 --> 00:27:45,360
js into eslint we had to

00:27:42,240 --> 00:27:46,399
fix a few things but if the team agrees

00:27:45,360 --> 00:27:49,840
on

00:27:46,399 --> 00:27:52,559
that those are the rules that are right

00:27:49,840 --> 00:27:54,080
i think that that works that's a that's

00:27:52,559 --> 00:27:56,399
a good thing

00:27:54,080 --> 00:27:58,080
um and the second question is how hard

00:27:56,399 --> 00:28:00,480
was it to change your workflow

00:27:58,080 --> 00:28:01,679
from grunt to gulp because we are using

00:28:00,480 --> 00:28:02,720
grunt right now and like they're

00:28:01,679 --> 00:28:06,080
wondering

00:28:02,720 --> 00:28:07,039
how hard it was so initially it started

00:28:06,080 --> 00:28:10,880
as a

00:28:07,039 --> 00:28:11,120
hack project so where we were trying out

00:28:10,880 --> 00:28:13,039
if

00:28:11,120 --> 00:28:14,159
really the performance of gold was

00:28:13,039 --> 00:28:17,279
better than grunt

00:28:14,159 --> 00:28:19,360
because we the unknown i mean we thought

00:28:17,279 --> 00:28:21,600
it was the case but we want to verify

00:28:19,360 --> 00:28:23,200
so in this hack project we create a pr

00:28:21,600 --> 00:28:26,720
and we add all the

00:28:23,200 --> 00:28:27,440
the same basically the same as a grand

00:28:26,720 --> 00:28:30,640
file a gold

00:28:27,440 --> 00:28:31,520
file same tasks we had to do a bit of

00:28:30,640 --> 00:28:34,399
research to

00:28:31,520 --> 00:28:35,919
searching for the plugins um and then

00:28:34,399 --> 00:28:37,200
after we had that we had then our

00:28:35,919 --> 00:28:39,840
evaluation

00:28:37,200 --> 00:28:40,480
uh we got all together and we said you

00:28:39,840 --> 00:28:42,960
guys

00:28:40,480 --> 00:28:45,919
you feel like we should move to gulp

00:28:42,960 --> 00:28:47,679
everyone agreed so

00:28:45,919 --> 00:28:49,679
so before i ask if there are any more

00:28:47,679 --> 00:28:53,679
questions i guess i have a question

00:28:49,679 --> 00:28:55,919
uh you mentioned that you ask everyone

00:28:53,679 --> 00:28:57,679
at the teams who like they feel included

00:28:55,919 --> 00:28:59,440
in all the decision making about

00:28:57,679 --> 00:29:00,720
processes and standards

00:28:59,440 --> 00:29:02,720
which is totally something that i

00:29:00,720 --> 00:29:04,880
understand as well but um

00:29:02,720 --> 00:29:07,120
how do you do it in a com you know

00:29:04,880 --> 00:29:08,880
company of a size like the spotify is

00:29:07,120 --> 00:29:12,320
because that's a pretty big company

00:29:08,880 --> 00:29:14,720
so like how do you make that behavior

00:29:12,320 --> 00:29:16,240
scale because i could imagine a lot of

00:29:14,720 --> 00:29:17,520
overhead and like conversations and

00:29:16,240 --> 00:29:21,760
going back and forth

00:29:17,520 --> 00:29:24,960
right uh the thing is the the developers

00:29:21,760 --> 00:29:28,159
people actively coding on this library

00:29:24,960 --> 00:29:28,799
are six people so which is a manageable

00:29:28,159 --> 00:29:32,000
number

00:29:28,799 --> 00:29:32,720
to get scheduled meetings once every two

00:29:32,000 --> 00:29:35,039
weeks

00:29:32,720 --> 00:29:36,159
or whenever we need to make those

00:29:35,039 --> 00:29:38,480
decisions

00:29:36,159 --> 00:29:39,200
um if there are like external which is

00:29:38,480 --> 00:29:42,399
we are kind of

00:29:39,200 --> 00:29:44,240
the core kind of group if there are

00:29:42,399 --> 00:29:45,679
external developers

00:29:44,240 --> 00:29:47,919
they commit i don't know they've got

00:29:45,679 --> 00:29:50,000
like three four commits in the code base

00:29:47,919 --> 00:29:51,360
i mean they just follow the the

00:29:50,000 --> 00:29:54,159
contributing md

00:29:51,360 --> 00:29:56,240
file which are the standards that we set

00:29:54,159 --> 00:29:58,480
but as long as the core developers

00:29:56,240 --> 00:29:59,520
which are like people on a daily basis

00:29:58,480 --> 00:30:03,279
work on it

00:29:59,520 --> 00:30:06,399
we all agree on something okay

00:30:03,279 --> 00:30:09,600
questions questions questions

00:30:06,399 --> 00:30:13,039
can't see any hands no

00:30:09,600 --> 00:30:16,720
okay there too he's going to be first

00:30:13,039 --> 00:30:16,720
because he's closer i'm sorry

00:30:16,799 --> 00:30:25,360
or maybe there are more so cool

00:30:21,200 --> 00:30:29,919
so i've got a question uh do you

00:30:25,360 --> 00:30:32,080
monitor and alert on plato reports

00:30:29,919 --> 00:30:33,679
yeah no unfortunately we don't but

00:30:32,080 --> 00:30:36,000
that's the thing that uh

00:30:33,679 --> 00:30:37,600
i'd like to do like what i was saying

00:30:36,000 --> 00:30:38,159
before yeah i'd like to have a threshold

00:30:37,600 --> 00:30:40,399
that

00:30:38,159 --> 00:30:41,600
will alert us or break the build if we

00:30:40,399 --> 00:30:44,159
go over it

00:30:41,600 --> 00:30:44,880
um but yeah now we don't do it yeah

00:30:44,159 --> 00:30:50,559
that's

00:30:44,880 --> 00:30:53,440
something to look into it

00:30:50,559 --> 00:30:54,320
so what do you think about static typing

00:30:53,440 --> 00:30:57,200
tools like

00:30:54,320 --> 00:30:58,320
typescript or flow they can also improve

00:30:57,200 --> 00:31:01,919
code quality and

00:30:58,320 --> 00:31:04,159
readability what do you think about it

00:31:01,919 --> 00:31:06,000
type tracking you're talking about type

00:31:04,159 --> 00:31:08,880
just like typescript or

00:31:06,000 --> 00:31:09,919
flow from facebook so static typing in

00:31:08,880 --> 00:31:12,559
javascript

00:31:09,919 --> 00:31:14,960
or something like that um if you're

00:31:12,559 --> 00:31:17,279
talking about typescript

00:31:14,960 --> 00:31:18,640
i mean i guess it's kind of different

00:31:17,279 --> 00:31:21,679
language i mean we

00:31:18,640 --> 00:31:23,840
we i mean we in general we believe

00:31:21,679 --> 00:31:25,120
that we use javascript which is not a

00:31:23,840 --> 00:31:27,679
type language

00:31:25,120 --> 00:31:28,880
so we should i mean we don't need type

00:31:27,679 --> 00:31:32,880
link type

00:31:28,880 --> 00:31:34,480
checks um but i looked into flow from

00:31:32,880 --> 00:31:36,960
facebook looks cool

00:31:34,480 --> 00:31:37,840
uh but we haven't we haven't checked it

00:31:36,960 --> 00:31:41,679
out but in general

00:31:37,840 --> 00:31:45,200
i mean i think that javascript is a

00:31:41,679 --> 00:31:47,120
dynamic language so

00:31:45,200 --> 00:31:48,559
it's nice to keep it dynamic if you know

00:31:47,120 --> 00:31:52,880
how to use it

00:31:48,559 --> 00:32:01,039
thanks who was in this row

00:31:52,880 --> 00:32:02,559
come on just please don't

00:32:01,039 --> 00:32:05,440
be throwing the mic because we don't

00:32:02,559 --> 00:32:08,480
want any casualties

00:32:05,440 --> 00:32:12,000
so first of all a nice presentation

00:32:08,480 --> 00:32:12,799
um setting up a build process like this

00:32:12,000 --> 00:32:16,320
obviously

00:32:12,799 --> 00:32:16,799
takes some time but do you have any idea

00:32:16,320 --> 00:32:20,000
or

00:32:16,799 --> 00:32:24,080
measurement on how long it took you to

00:32:20,000 --> 00:32:24,080
save that time due to better processes

00:32:24,159 --> 00:32:27,519
again i would recommend to use i don't

00:32:26,240 --> 00:32:29,600
know if your company allows you to do

00:32:27,519 --> 00:32:32,320
like hack project hack days

00:32:29,600 --> 00:32:33,360
i mean we are lucky because we are 20 20

00:32:32,320 --> 00:32:37,039
of our time

00:32:33,360 --> 00:32:40,640
is on you know system days and hack

00:32:37,039 --> 00:32:43,679
days so which means we can focus on

00:32:40,640 --> 00:32:44,640
doing refactoring or technical things or

00:32:43,679 --> 00:32:47,679
doing a project

00:32:44,640 --> 00:32:49,360
so often what i did with

00:32:47,679 --> 00:32:51,440
other team members did is like

00:32:49,360 --> 00:32:52,000
allocating time to experiment with those

00:32:51,440 --> 00:32:54,399
things

00:32:52,000 --> 00:32:55,279
and then we built up in a few months so

00:32:54,399 --> 00:32:58,559
for example

00:32:55,279 --> 00:33:00,960
one friday we got together and we tried

00:32:58,559 --> 00:33:02,480
converting all our code base to es6 just

00:33:00,960 --> 00:33:04,240
for one package and then

00:33:02,480 --> 00:33:07,519
we finished up converting everything

00:33:04,240 --> 00:33:11,679
into e6 or another time

00:33:07,519 --> 00:33:14,799
we spent even weekends like own time

00:33:11,679 --> 00:33:18,000
you know try out the jenkins pipeline

00:33:14,799 --> 00:33:20,559
um and then presenting it to a team

00:33:18,000 --> 00:33:22,720
and then getting an agreement so i guess

00:33:20,559 --> 00:33:25,519
most of the time works with

00:33:22,720 --> 00:33:26,799
having a you have to have a pitch if you

00:33:25,519 --> 00:33:29,120
believe in something

00:33:26,799 --> 00:33:30,240
and then maybe you know you have to

00:33:29,120 --> 00:33:33,360
spend your own time

00:33:30,240 --> 00:33:35,039
some cases or hack projects and then

00:33:33,360 --> 00:33:37,440
presenting to a team

00:33:35,039 --> 00:33:39,840
they've been cases where people have

00:33:37,440 --> 00:33:41,600
presented something that

00:33:39,840 --> 00:33:43,200
like for example two people didn't agree

00:33:41,600 --> 00:33:46,880
on and then

00:33:43,200 --> 00:33:50,000
things didn't go through um but

00:33:46,880 --> 00:33:52,880
let's just you know okay last question

00:33:50,000 --> 00:33:55,279
that was very sneaky

00:33:52,880 --> 00:33:57,519
um short question um what is the

00:33:55,279 --> 00:34:02,159
opposition to naming conventions

00:33:57,519 --> 00:34:05,440
is that enforceable via js check style

00:34:02,159 --> 00:34:08,800
naming conventions yeah with prefixes or

00:34:05,440 --> 00:34:11,919
suffixes for example or

00:34:08,800 --> 00:34:12,240
general meaningful names nothing else

00:34:11,919 --> 00:34:14,960
like

00:34:12,240 --> 00:34:16,560
item or element would mean nothing in

00:34:14,960 --> 00:34:19,040
most cases

00:34:16,560 --> 00:34:21,280
so you're asking if a js check style

00:34:19,040 --> 00:34:24,399
it's got like a prefix or

00:34:21,280 --> 00:34:26,399
checking for naming conventions

00:34:24,399 --> 00:34:28,240
um to be honest i don't know i don't

00:34:26,399 --> 00:34:28,800
know if js check style has got schools

00:34:28,240 --> 00:34:31,839
for

00:34:28,800 --> 00:34:32,399
checking that we were we weren't using

00:34:31,839 --> 00:34:35,040
it

00:34:32,399 --> 00:34:35,440
so i don't really know yeah but you just

00:34:35,040 --> 00:34:38,079
say

00:34:35,440 --> 00:34:39,440
you can write your own styles so it

00:34:38,079 --> 00:34:41,679
should be possible about

00:34:39,440 --> 00:34:42,639
but you don't know if you are using that

00:34:41,679 --> 00:34:44,480
well yeah

00:34:42,639 --> 00:34:46,240
you're talking about js check style or

00:34:44,480 --> 00:34:50,000
yes lint

00:34:46,240 --> 00:34:52,000
check slide um to be honest i don't know

00:34:50,000 --> 00:34:54,079
if there is there are rules around

00:34:52,000 --> 00:34:55,520
checking naming conventions i don't know

00:34:54,079 --> 00:34:59,280
we probably

00:34:55,520 --> 00:34:59,280
should check the documentation

00:34:59,680 --> 00:35:03,520
thanks i really like how this afternoon

00:35:02,480 --> 00:35:05,599
transformed to

00:35:03,520 --> 00:35:06,880
basically being a bunch of talks about

00:35:05,599 --> 00:35:09,119
um how to improve

00:35:06,880 --> 00:35:10,880
like standards within companies and

00:35:09,119 --> 00:35:13,359
startups and how to

00:35:10,880 --> 00:35:14,000
improve collaboration so um thank you

00:35:13,359 --> 00:35:16,480
for that

00:35:14,000 --> 00:35:18,160
that was amazing and we're going to have

00:35:16,480 --> 00:35:22,640
our last talk for

00:35:18,160 --> 00:35:24,720
the afternoon sorry what small break

00:35:22,640 --> 00:35:26,240
okay well we're going to have 10 minutes

00:35:24,720 --> 00:35:27,440
of break i know we're going to do i

00:35:26,240 --> 00:35:29,920
guess we're going to i don't know

00:35:27,440 --> 00:35:32,640
dance or like argue about technology

00:35:29,920 --> 00:35:45,839
what else can we do i don't know

00:35:32,640 --> 00:35:45,839
yeah thank you thank you so much

00:35:47,359 --> 00:35:49,440

YouTube URL: https://www.youtube.com/watch?v=SQ7xzpOjA6o


