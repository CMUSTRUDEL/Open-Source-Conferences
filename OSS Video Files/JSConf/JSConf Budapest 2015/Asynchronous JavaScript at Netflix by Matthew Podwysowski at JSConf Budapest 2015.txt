Title: Asynchronous JavaScript at Netflix by Matthew Podwysowski at JSConf Budapest 2015
Publication date: 2020-09-22
Playlist: JSConf Budapest 2015
Description: 
	Slides: https://github.com/mattpodwysocki/jsconfbp-2015

http://2015.jsconfbp.com/#mattpodwysocki

What’s does a mouse drag event have in common with an Array of numbers? 

The answer to this question may surprise you: they are both collections. 

This key insight holds the key to dramatically simplifying asynchronous programming in JavaScript. In this talk you will learn how you can use the familiar JavaScript Array methods to create surprisingly expressive asynchronous programs. 

Using just a few functions, you will learn how to do the following:

- Declaratively build complex events out of simple events (ex. drag n’ drop)
- Coordinate and sequence multiple Ajax requests
- Reactively update UI’s in response to data changes
- Eliminate memory leaks caused by neglecting to unsubscribe from events
- Gracefully propagate and handle asynchronous exception

In this talk we’ll be exploring the Reactive Extensions (RxJS) library (http://github.com/reactive-extensions/RxJS), which allows us to treat events as collections. You’ll learn about how Netflix uses Rx on the client and the server, allowing us to build end-to-end reactive systems. We’ll also contrast Rx with Promises, another popular approach to building asynchronous programs in JavaScript.
Captions: 
	00:00:09,280 --> 00:00:15,360
yay all right we have

00:00:12,080 --> 00:00:19,240
we have fixed our technical difficulties

00:00:15,360 --> 00:00:20,480
so uh check us out tallyproject.org and

00:00:19,240 --> 00:00:23,119
github.comtaliproject

00:00:20,480 --> 00:00:25,199
and you'll find all of our work there so

00:00:23,119 --> 00:00:27,199
like i said previous talk was awesome

00:00:25,199 --> 00:00:29,760
we're doing it in real life at microsoft

00:00:27,199 --> 00:00:32,800
it's all completely open source

00:00:29,760 --> 00:00:33,600
so today uh i'm going to digress just a

00:00:32,800 --> 00:00:34,960
little bit

00:00:33,600 --> 00:00:36,719
a little bit and we're going to talk

00:00:34,960 --> 00:00:39,760
about asynchronous javascript

00:00:36,719 --> 00:00:41,840
at netflix i of course am

00:00:39,760 --> 00:00:42,879
very unoriginal in my name matthew

00:00:41,840 --> 00:00:45,440
podvasutsuki

00:00:42,879 --> 00:00:45,920
and of course yes that is my twitter

00:00:45,440 --> 00:00:49,280
handle

00:00:45,920 --> 00:00:51,600
and yes also my github handle uh

00:00:49,280 --> 00:00:53,920
so really what what it was was async

00:00:51,600 --> 00:00:54,879
programming javascript but what really i

00:00:53,920 --> 00:00:56,800
like this

00:00:54,879 --> 00:00:58,000
to be is how i stopped to worrying about

00:00:56,800 --> 00:01:00,320
asynchronous programming

00:00:58,000 --> 00:01:01,840
and love to learn the observable so you

00:01:00,320 --> 00:01:03,359
know i could go like this and ride a

00:01:01,840 --> 00:01:08,240
bomb

00:01:03,359 --> 00:01:10,799
but i'm not going to next um

00:01:08,240 --> 00:01:12,640
anyways uh slides also started off with

00:01:10,799 --> 00:01:14,400
a little bit of levity i thought i had a

00:01:12,640 --> 00:01:16,400
problem so i thought to myself

00:01:14,400 --> 00:01:18,320
you know i'll solve my problem with

00:01:16,400 --> 00:01:22,640
promises and events

00:01:18,320 --> 00:01:22,640
have now two problems i oops

00:01:22,720 --> 00:01:26,159
so what this is not going to be it's not

00:01:25,119 --> 00:01:28,799
going to be a

00:01:26,159 --> 00:01:31,119
if you've seen my former boss eric meyer

00:01:28,799 --> 00:01:32,479
he usually talks about monad's category

00:01:31,119 --> 00:01:34,880
theory and so forth

00:01:32,479 --> 00:01:36,240
uh there will be none of that although

00:01:34,880 --> 00:01:39,439
if you're really interested

00:01:36,240 --> 00:01:40,159
i mean a monad really is just a monoid

00:01:39,439 --> 00:01:42,000
in the category

00:01:40,159 --> 00:01:43,680
of endo functors i mean really what's

00:01:42,000 --> 00:01:44,240
the problem what's the deal here it

00:01:43,680 --> 00:01:46,479
should be

00:01:44,240 --> 00:01:48,320
rather simple for you to understand that

00:01:46,479 --> 00:01:51,600
yes

00:01:48,320 --> 00:01:53,439
so here i am like i said i'm a principal

00:01:51,600 --> 00:01:56,479
sde at microsoft

00:01:53,439 --> 00:01:59,200
that small company and uh

00:01:56,479 --> 00:02:01,200
that everything that i do at the company

00:01:59,200 --> 00:02:01,840
is open source so whether it's the tally

00:02:01,200 --> 00:02:04,000
project

00:02:01,840 --> 00:02:04,880
or the reactive extensions which i'm

00:02:04,000 --> 00:02:07,680
talking about

00:02:04,880 --> 00:02:08,239
today you can find me here and

00:02:07,680 --> 00:02:10,800
everywhere

00:02:08,239 --> 00:02:12,400
pretty much using that same handle and

00:02:10,800 --> 00:02:14,480
yes i do work for this

00:02:12,400 --> 00:02:15,920
this small company called microsoft but

00:02:14,480 --> 00:02:18,080
i think just because

00:02:15,920 --> 00:02:21,040
i'm working with a lot of open source

00:02:18,080 --> 00:02:23,040
that i add a little bit of metal to it

00:02:21,040 --> 00:02:25,599
by adding um lots because that just kind

00:02:23,040 --> 00:02:25,599
of rocks

00:02:26,480 --> 00:02:31,040
anyways so uh you know we recently

00:02:29,280 --> 00:02:31,440
announced this browser called edge as

00:02:31,040 --> 00:02:32,959
well

00:02:31,440 --> 00:02:35,200
but you know some people thought it was

00:02:32,959 --> 00:02:38,879
the u2 guitarist but no

00:02:35,200 --> 00:02:42,080
it was based upon me so i'm just

00:02:38,879 --> 00:02:43,760
a little humble brag there

00:02:42,080 --> 00:02:45,120
but the problem is i could i found that

00:02:43,760 --> 00:02:48,959
i'm not as good of a

00:02:45,120 --> 00:02:51,200
of a songwriter because

00:02:48,959 --> 00:02:54,920
javascript has thoroughly corrupted my

00:02:51,200 --> 00:02:57,200
mind so if i said you and me makes

00:02:54,920 --> 00:03:00,480
2.0004 crap

00:02:57,200 --> 00:03:03,040
yes thanks javascript

00:03:00,480 --> 00:03:04,640
so i work on a project uh almost full

00:03:03,040 --> 00:03:05,599
time called the reactive extensions and

00:03:04,640 --> 00:03:07,519
this is a

00:03:05,599 --> 00:03:09,840
language neutral approach to

00:03:07,519 --> 00:03:12,000
asynchronous and event-based programming

00:03:09,840 --> 00:03:13,920
across a number of languages and if you

00:03:12,000 --> 00:03:14,319
go to that website if you have internet

00:03:13,920 --> 00:03:16,000
con

00:03:14,319 --> 00:03:17,599
internet connectivity uh you can go

00:03:16,000 --> 00:03:20,640
there check us out

00:03:17,599 --> 00:03:21,519
you'll have a lot of documentation and a

00:03:20,640 --> 00:03:24,720
lot of

00:03:21,519 --> 00:03:28,159
various cool things to check out so

00:03:24,720 --> 00:03:28,159
if we go here to

00:03:28,519 --> 00:03:32,159
reactivex.ios sure enough you can choose

00:03:30,799 --> 00:03:34,480
your platform

00:03:32,159 --> 00:03:36,480
but you can go down there and see all of

00:03:34,480 --> 00:03:38,720
the the things that andre was talking

00:03:36,480 --> 00:03:40,640
about in terms of these marble diagrams

00:03:38,720 --> 00:03:42,879
and you can basically see how you can

00:03:40,640 --> 00:03:46,080
get started with

00:03:42,879 --> 00:03:49,440
with the with rx

00:03:46,080 --> 00:03:51,120
so it's really kind of a cool project

00:03:49,440 --> 00:03:52,799
and we've really made sure that it's

00:03:51,120 --> 00:03:54,720
really cross-platform but what i'm

00:03:52,799 --> 00:03:58,159
really saying is i'm an rx pusher i

00:03:54,720 --> 00:04:00,080
like to say it belongs everywhere but so

00:03:58,159 --> 00:04:03,280
let's bring it back to actually the main

00:04:00,080 --> 00:04:05,760
topic here is netflix so

00:04:03,280 --> 00:04:08,560
netflix is a company that streams movies

00:04:05,760 --> 00:04:11,200
from and tv shows from any device

00:04:08,560 --> 00:04:13,120
and what it accounts for is one-third of

00:04:11,200 --> 00:04:17,280
all the us broadband traffic and that's

00:04:13,120 --> 00:04:19,919
just as of a year ago could be more now

00:04:17,280 --> 00:04:22,639
but they had some really really big

00:04:19,919 --> 00:04:24,880
problems that they had to solve

00:04:22,639 --> 00:04:25,919
in order to fix this because they had

00:04:24,880 --> 00:04:29,360
some really basic

00:04:25,919 --> 00:04:30,800
uh problems really basic problems

00:04:29,360 --> 00:04:32,560
and they had them across different

00:04:30,800 --> 00:04:35,120
languages but they thought differently

00:04:32,560 --> 00:04:37,919
about events in asynchronous programming

00:04:35,120 --> 00:04:38,800
so that they could create these very

00:04:37,919 --> 00:04:42,160
rich

00:04:38,800 --> 00:04:44,720
interactive user interfaces

00:04:42,160 --> 00:04:45,360
so if anyone has the netflix app on your

00:04:44,720 --> 00:04:48,000
phone

00:04:45,360 --> 00:04:50,240
chances are you're running our software

00:04:48,000 --> 00:04:50,880
everything about that application as

00:04:50,240 --> 00:04:53,360
andre

00:04:50,880 --> 00:04:55,280
uh so eloquently put everything about

00:04:53,360 --> 00:04:56,479
these applications is asynchronous

00:04:55,280 --> 00:04:59,120
whether it's

00:04:56,479 --> 00:05:01,199
your app startup the player the the data

00:04:59,120 --> 00:05:01,759
access the animations the view model

00:05:01,199 --> 00:05:07,039
bindings

00:05:01,759 --> 00:05:08,560
all of that is very very asynchronous

00:05:07,039 --> 00:05:10,639
but it also leads to a number of

00:05:08,560 --> 00:05:12,639
nightmares just because you're dealing

00:05:10,639 --> 00:05:14,560
with asynchronous programming

00:05:12,639 --> 00:05:17,840
you're dealing with possible memory

00:05:14,560 --> 00:05:20,080
leaks with event handlers

00:05:17,840 --> 00:05:21,120
leaking you have race conditions whether

00:05:20,080 --> 00:05:23,039
callbacks

00:05:21,120 --> 00:05:25,280
happen or events happen at a certain

00:05:23,039 --> 00:05:27,120
time you have this thing called callback

00:05:25,280 --> 00:05:29,039
hell which i'll get into

00:05:27,120 --> 00:05:30,320
but really you have these complex state

00:05:29,039 --> 00:05:32,000
machines where the state is just

00:05:30,320 --> 00:05:34,240
sprinkled throughout

00:05:32,000 --> 00:05:35,759
all of your code as well as the error

00:05:34,240 --> 00:05:38,800
handling itself

00:05:35,759 --> 00:05:40,479
is all is all just very disjointed and

00:05:38,800 --> 00:05:41,039
it's really hard to find out where the

00:05:40,479 --> 00:05:44,320
actual

00:05:41,039 --> 00:05:45,919
logic for your application is versus

00:05:44,320 --> 00:05:49,039
everything else

00:05:45,919 --> 00:05:52,880
so if we go back a couple of years

00:05:49,039 --> 00:05:54,639
they started with um with

00:05:52,880 --> 00:05:56,720
i would say about four or five different

00:05:54,639 --> 00:05:58,800
platforms and what was uh

00:05:56,720 --> 00:06:00,720
bad about this is because each and every

00:05:58,800 --> 00:06:02,960
language had its own real

00:06:00,720 --> 00:06:04,560
way of of talking about asynchronous uh

00:06:02,960 --> 00:06:07,520
stuff they had a back end

00:06:04,560 --> 00:06:08,160
uh using java they didn't know how to to

00:06:07,520 --> 00:06:10,319
really

00:06:08,160 --> 00:06:12,400
scale that out you had the the user

00:06:10,319 --> 00:06:12,880
interfaces very tightly coupled in terms

00:06:12,400 --> 00:06:15,039
of

00:06:12,880 --> 00:06:16,400
the the client and the server were very

00:06:15,039 --> 00:06:19,520
very connected

00:06:16,400 --> 00:06:22,000
there was no real clean abstraction

00:06:19,520 --> 00:06:24,639
for how they do that so what they

00:06:22,000 --> 00:06:27,840
decided to do

00:06:24,639 --> 00:06:31,680
is they decided to to adopt rx

00:06:27,840 --> 00:06:34,880
now we have a problem in today's

00:06:31,680 --> 00:06:36,639
in today's uh in today's world and that

00:06:34,880 --> 00:06:40,240
problem is that we are just

00:06:36,639 --> 00:06:41,120
inundated with data uh whether it's your

00:06:40,240 --> 00:06:43,919
phone whether

00:06:41,120 --> 00:06:45,520
when you have uh you know when you have

00:06:43,919 --> 00:06:47,360
your twitter app you have any number of

00:06:45,520 --> 00:06:48,400
apps you have at least six or seven

00:06:47,360 --> 00:06:51,680
different things whether it's your

00:06:48,400 --> 00:06:53,360
accelerometer your gps etc everything's

00:06:51,680 --> 00:06:53,840
firing at you none of it's really pool

00:06:53,360 --> 00:06:55,199
based

00:06:53,840 --> 00:06:57,360
so how do you manage it all without

00:06:55,199 --> 00:07:00,880
having to stuff it down your shirt

00:06:57,360 --> 00:07:02,960
is a really interesting problem

00:07:00,880 --> 00:07:04,720
but the problem has always been is that

00:07:02,960 --> 00:07:06,720
asynchronous programming is just plain

00:07:04,720 --> 00:07:09,199
awful

00:07:06,720 --> 00:07:10,960
uh you can i as you as you can see we're

00:07:09,199 --> 00:07:13,120
managing all sorts of states and then

00:07:10,960 --> 00:07:16,160
once we actually try to do an action

00:07:13,120 --> 00:07:19,680
i it just immediately falls over

00:07:16,160 --> 00:07:23,120
that's pretty much it so

00:07:19,680 --> 00:07:26,639
we had a a very progressive president

00:07:23,120 --> 00:07:29,360
back in the day and and he decided

00:07:26,639 --> 00:07:31,199
in 1962 he was going to say we choose to

00:07:29,360 --> 00:07:33,280
solve asynchronous programming and do

00:07:31,199 --> 00:07:35,919
other things not because they're easy

00:07:33,280 --> 00:07:37,440
but because they are hard now he later

00:07:35,919 --> 00:07:38,080
changed this to actually going to the

00:07:37,440 --> 00:07:40,319
moon

00:07:38,080 --> 00:07:42,840
and the reason why that is is because he

00:07:40,319 --> 00:07:45,440
actually thought going to the moon was

00:07:42,840 --> 00:07:48,000
possible

00:07:45,440 --> 00:07:50,240
not asynchronous of programming so it it

00:07:48,000 --> 00:07:50,879
that wasn't solved in the 1960s and

00:07:50,240 --> 00:07:54,240
apparently

00:07:50,879 --> 00:07:56,400
a citation needed oh well

00:07:54,240 --> 00:07:58,000
so callback hell really is a thing you

00:07:56,400 --> 00:08:01,039
know many people say oh no

00:07:58,000 --> 00:08:02,800
no no you've just uh uh you've just

00:08:01,039 --> 00:08:04,879
you know designed your application wrong

00:08:02,800 --> 00:08:06,479
well no that's not really true

00:08:04,879 --> 00:08:08,560
what it is is you're dealing with these

00:08:06,479 --> 00:08:09,199
various complex state machines whether

00:08:08,560 --> 00:08:11,759
you're

00:08:09,199 --> 00:08:14,000
uh there's a player error whether you've

00:08:11,759 --> 00:08:15,680
got a ticket

00:08:14,000 --> 00:08:17,919
and so it's really hard to kind of

00:08:15,680 --> 00:08:20,639
follow where your code is going

00:08:17,919 --> 00:08:22,879
in terms of what's the next step and

00:08:20,639 --> 00:08:25,199
with retries and everything else it's

00:08:22,879 --> 00:08:26,879
really really nasty stuff and most

00:08:25,199 --> 00:08:28,560
people you know call it the temple of

00:08:26,879 --> 00:08:31,520
doom or something like that but i

00:08:28,560 --> 00:08:33,519
i equate it to a cow's head because it

00:08:31,520 --> 00:08:36,399
just walks off the screen like that and

00:08:33,519 --> 00:08:36,399
walks right back

00:08:37,279 --> 00:08:40,880
and i don't know about you but usually

00:08:39,440 --> 00:08:42,240
you're playing with fire when you're

00:08:40,880 --> 00:08:46,560
dealing with uh with

00:08:42,240 --> 00:08:49,200
uh callback hell and so anyways

00:08:46,560 --> 00:08:50,959
uh and yes i do happen to jump out the

00:08:49,200 --> 00:08:52,080
window sometimes so when dealing with

00:08:50,959 --> 00:08:54,800
that

00:08:52,080 --> 00:08:57,600
but dealing with events is just as awful

00:08:54,800 --> 00:08:58,560
the idea of of having just a simple drag

00:08:57,600 --> 00:09:01,440
and drop has

00:08:58,560 --> 00:09:02,959
a lot of boilerplate code to it you know

00:09:01,440 --> 00:09:03,519
whether the mouse is down whether the

00:09:02,959 --> 00:09:06,000
mouse is

00:09:03,519 --> 00:09:06,880
up uh what sort of state you have in

00:09:06,000 --> 00:09:08,640
between there

00:09:06,880 --> 00:09:10,560
you have to add the event listeners and

00:09:08,640 --> 00:09:12,640
then you have to remove them

00:09:10,560 --> 00:09:14,080
and you just end up with just so much

00:09:12,640 --> 00:09:17,120
state

00:09:14,080 --> 00:09:19,360
passed throughout the application so

00:09:17,120 --> 00:09:21,120
like i said it's it gets very very

00:09:19,360 --> 00:09:22,240
complicated very quickly because you're

00:09:21,120 --> 00:09:24,560
trying to manage

00:09:22,240 --> 00:09:26,480
all of these different moving pieces at

00:09:24,560 --> 00:09:29,360
once and it never quite works out the

00:09:26,480 --> 00:09:29,360
way you think it should

00:09:30,080 --> 00:09:35,360
so everyone goes oh yes promises

00:09:32,480 --> 00:09:37,920
promises will solve all of our problems

00:09:35,360 --> 00:09:40,959
you know promises are coming in you know

00:09:37,920 --> 00:09:43,680
es6 es25 whatever you want to call it

00:09:40,959 --> 00:09:45,200
uh the idea that you could say player

00:09:43,680 --> 00:09:46,880
the initialize then

00:09:45,200 --> 00:09:48,959
authorize the movie else you've got to

00:09:46,880 --> 00:09:49,279
log in air and play the movie or else

00:09:48,959 --> 00:09:52,800
it's

00:09:49,279 --> 00:09:55,440
unauthorized that's just peachy uh

00:09:52,800 --> 00:09:58,080
the problem is is that we have several

00:09:55,440 --> 00:10:01,200
several problems with this very approach

00:09:58,080 --> 00:10:03,920
because promises lack a

00:10:01,200 --> 00:10:04,640
fundamental thing that's required for

00:10:03,920 --> 00:10:07,839
doing

00:10:04,640 --> 00:10:11,200
anything io related and that is cancel

00:10:07,839 --> 00:10:12,800
there is no such thing so if you are

00:10:11,200 --> 00:10:14,560
doing something like an autocomplete

00:10:12,800 --> 00:10:17,360
with a promise right

00:10:14,560 --> 00:10:18,000
i'm continuing to type and this promise

00:10:17,360 --> 00:10:19,680
is hanging out

00:10:18,000 --> 00:10:21,760
here and it's going to eventually return

00:10:19,680 --> 00:10:24,800
how do i tell it not to

00:10:21,760 --> 00:10:26,000
well i can't not the way that promises

00:10:24,800 --> 00:10:30,480
are currently designed

00:10:26,000 --> 00:10:32,399
in es6 slash es25 2015

00:10:30,480 --> 00:10:34,720
so that's a problem and in fact it

00:10:32,399 --> 00:10:38,240
became so much of a problem in that they

00:10:34,720 --> 00:10:42,000
they introduced this fetch api in uh for

00:10:38,240 --> 00:10:44,959
uh the next version of of of the browser

00:10:42,000 --> 00:10:45,600
so there and what it turned out to be is

00:10:44,959 --> 00:10:48,640
yes

00:10:45,600 --> 00:10:51,600
cancel became the number one issue

00:10:48,640 --> 00:10:52,480
and as you can see here there are 182

00:10:51,600 --> 00:10:54,640
comments on

00:10:52,480 --> 00:10:55,600
how people are trying to cancel a

00:10:54,640 --> 00:10:58,399
promise

00:10:55,600 --> 00:11:00,000
so i guess that answer answers the the

00:10:58,399 --> 00:11:03,279
question of how many engineers does it

00:11:00,000 --> 00:11:03,279
take to cancel a promise

00:11:04,079 --> 00:11:07,519
uh so as i said you know you can check

00:11:06,560 --> 00:11:10,959
it out yourself

00:11:07,519 --> 00:11:14,079
github whatwig issues27 i'm sure there's

00:11:10,959 --> 00:11:16,480
more ideas and more things there

00:11:14,079 --> 00:11:18,560
and like i said it's been an awkward

00:11:16,480 --> 00:11:19,519
issue for a number of promises libraries

00:11:18,560 --> 00:11:22,240
that they can't quite

00:11:19,519 --> 00:11:24,320
figure out how to do uh cancellation

00:11:22,240 --> 00:11:26,959
properly

00:11:24,320 --> 00:11:27,360
and once again you have the the issue as

00:11:26,959 --> 00:11:28,720
well

00:11:27,360 --> 00:11:30,480
is the fact that there's no such thing

00:11:28,720 --> 00:11:33,600
as finally either

00:11:30,480 --> 00:11:35,680
in promises oops

00:11:33,600 --> 00:11:36,640
so there's no way of of finally cleaning

00:11:35,680 --> 00:11:38,800
up after

00:11:36,640 --> 00:11:40,720
after you're done and disposing of your

00:11:38,800 --> 00:11:43,120
resources

00:11:40,720 --> 00:11:44,399
so as i said you've got a nice little uh

00:11:43,120 --> 00:11:46,240
you've got a nice car

00:11:44,399 --> 00:11:47,519
you've got a nice gas pedal you've got

00:11:46,240 --> 00:11:51,839
some nice cup holders

00:11:47,519 --> 00:11:54,959
but you forgot brakes it happens

00:11:51,839 --> 00:11:57,279
so unsafe at any speed

00:11:54,959 --> 00:11:59,279
so when people started to say well what

00:11:57,279 --> 00:12:01,120
about stream processing why couldn't we

00:11:59,279 --> 00:12:04,639
just use some of the ideas from

00:12:01,120 --> 00:12:07,040
say node streams for example well

00:12:04,639 --> 00:12:08,240
let's face it right now that if you used

00:12:07,040 --> 00:12:09,920
node

00:12:08,240 --> 00:12:11,440
way back when you'll realize that

00:12:09,920 --> 00:12:13,839
streams are really terrible

00:12:11,440 --> 00:12:15,200
i mean they the pause didn't data

00:12:13,839 --> 00:12:16,880
started immediately whether you were

00:12:15,200 --> 00:12:19,680
ready or not poor kid

00:12:16,880 --> 00:12:20,959
uh and pause and resume were really

00:12:19,680 --> 00:12:22,720
impossible to get right i mean there

00:12:20,959 --> 00:12:24,959
were geniuses out there such as sub

00:12:22,720 --> 00:12:26,800
stack and dominic tarr who did a lot of

00:12:24,959 --> 00:12:27,680
stuff but fundamentally the core was

00:12:26,800 --> 00:12:30,880
rotten

00:12:27,680 --> 00:12:32,160
and broken and then they've then they

00:12:30,880 --> 00:12:35,360
changed to streams 2

00:12:32,160 --> 00:12:37,360
and streams 3 but still it's not quite a

00:12:35,360 --> 00:12:39,200
perfect fit for doing a lot of this

00:12:37,360 --> 00:12:41,600
event-based processing that we're trying

00:12:39,200 --> 00:12:43,200
to talk about here

00:12:41,600 --> 00:12:45,680
so instead we took a different approach

00:12:43,200 --> 00:12:47,519
and went back to 1994

00:12:45,680 --> 00:12:48,800
and we went to this book called design

00:12:47,519 --> 00:12:50,320
patterns

00:12:48,800 --> 00:12:52,160
i don't know how many people still have

00:12:50,320 --> 00:12:53,279
it how many how many people were born

00:12:52,160 --> 00:12:55,760
before then you know

00:12:53,279 --> 00:12:57,519
whatever but we had a lot of patterns

00:12:55,760 --> 00:12:58,720
here but what you saw as you saw a lot

00:12:57,519 --> 00:13:00,720
of these different things are all

00:12:58,720 --> 00:13:02,800
connected to one another

00:13:00,720 --> 00:13:04,320
except these two which is kind of

00:13:02,800 --> 00:13:05,360
strange we're like iterator and

00:13:04,320 --> 00:13:08,240
observers should be

00:13:05,360 --> 00:13:10,560
kind of connected and the reason why is

00:13:08,240 --> 00:13:11,120
because we have the idea of a push-based

00:13:10,560 --> 00:13:13,560
collection

00:13:11,120 --> 00:13:15,920
and a pool based collection so with

00:13:13,560 --> 00:13:18,160
es2015 we have the idea of

00:13:15,920 --> 00:13:19,040
if first class iterators where we call

00:13:18,160 --> 00:13:21,200
next

00:13:19,040 --> 00:13:22,399
and then we can go through and get all

00:13:21,200 --> 00:13:25,680
the values as they come

00:13:22,399 --> 00:13:28,320
through and the same thing applies uh

00:13:25,680 --> 00:13:29,440
the subject observer pattern as strictly

00:13:28,320 --> 00:13:32,079
implemented

00:13:29,440 --> 00:13:33,200
in in javascript it happens all over the

00:13:32,079 --> 00:13:34,959
place with the dom

00:13:33,200 --> 00:13:36,800
you know anytime you add an event

00:13:34,959 --> 00:13:37,839
listener that's really just the subject

00:13:36,800 --> 00:13:40,880
observer pattern

00:13:37,839 --> 00:13:41,760
so anytime i move the mouse yay i get

00:13:40,880 --> 00:13:44,160
values

00:13:41,760 --> 00:13:46,399
pushed at me so it's a pull versus push

00:13:44,160 --> 00:13:48,720
kind of collection

00:13:46,399 --> 00:13:51,040
so let me ask you a question then what's

00:13:48,720 --> 00:13:53,839
the difference between an array

00:13:51,040 --> 00:13:55,120
and an event and they're both

00:13:53,839 --> 00:13:57,680
collections

00:13:55,120 --> 00:13:59,760
and that's the really the key part here

00:13:57,680 --> 00:14:02,720
and what we can do is we can write the

00:13:59,760 --> 00:14:06,000
majority of of netflix's

00:14:02,720 --> 00:14:09,279
code with just a few flexible functions

00:14:06,000 --> 00:14:11,920
so as as andre talked about before

00:14:09,279 --> 00:14:13,279
with map the idea of transforming each

00:14:11,920 --> 00:14:17,680
individual item

00:14:13,279 --> 00:14:20,079
to filter items emitted by a collection

00:14:17,680 --> 00:14:21,440
uh to kind of merging them all into a

00:14:20,079 --> 00:14:23,519
single one

00:14:21,440 --> 00:14:24,959
and then flat map which is basically

00:14:23,519 --> 00:14:27,680
that map and merge all

00:14:24,959 --> 00:14:29,040
into a single collection so now we can

00:14:27,680 --> 00:14:31,680
actually take a look

00:14:29,040 --> 00:14:33,600
and see inside of netflix how they would

00:14:31,680 --> 00:14:35,600
sit get your top rated movies

00:14:33,600 --> 00:14:37,680
well you would start with a given user

00:14:35,600 --> 00:14:39,519
and you would look over their video list

00:14:37,680 --> 00:14:41,040
and you would map with their video list

00:14:39,519 --> 00:14:44,160
and you would go through

00:14:41,040 --> 00:14:45,760
and filter where the rating is is

00:14:44,160 --> 00:14:47,920
the top five and you would merge them

00:14:45,760 --> 00:14:50,720
all or you could just go

00:14:47,920 --> 00:14:52,079
call flat map and be done with it now

00:14:50,720 --> 00:14:54,079
what if i told you

00:14:52,079 --> 00:14:57,360
that same code that we showed here you

00:14:54,079 --> 00:14:59,600
could create a drag event

00:14:57,360 --> 00:15:00,639
you know it it's really kind of that

00:14:59,600 --> 00:15:04,320
simple and the fact

00:15:00,639 --> 00:15:07,199
is instead of filter we have taken till

00:15:04,320 --> 00:15:07,920
so we have take until dom mouse move up

00:15:07,199 --> 00:15:10,839
or just

00:15:07,920 --> 00:15:12,560
flat map so let's take a look at this

00:15:10,839 --> 00:15:15,600
again

00:15:12,560 --> 00:15:15,600
flat map filter

00:15:15,920 --> 00:15:23,680
flat map flat map take until that's it

00:15:20,000 --> 00:15:28,160
you now suddenly are all

00:15:23,680 --> 00:15:28,160
reactive extensions programmers done

00:15:29,519 --> 00:15:33,600
and what you realize is that oh great

00:15:31,839 --> 00:15:34,560
everything's a stream my mouse is a

00:15:33,600 --> 00:15:36,720
stream

00:15:34,560 --> 00:15:38,560
my phone's input is a stream

00:15:36,720 --> 00:15:40,639
everything's a stream and it's kind of a

00:15:38,560 --> 00:15:42,480
zen-like moment when you kind of realize

00:15:40,639 --> 00:15:44,480
that

00:15:42,480 --> 00:15:46,079
because now instead of these callbacks

00:15:44,480 --> 00:15:47,920
that you had to deal with before with

00:15:46,079 --> 00:15:49,600
the subject observer pattern we now have

00:15:47,920 --> 00:15:51,279
a first-class object

00:15:49,600 --> 00:15:52,720
now first-class object that we were

00:15:51,279 --> 00:15:54,639
talking about are the things that we can

00:15:52,720 --> 00:15:58,160
filter and reduce etc

00:15:54,639 --> 00:15:59,600
but we can also inject in into methods

00:15:58,160 --> 00:16:01,279
and we can return them from methods

00:15:59,600 --> 00:16:02,000
which is great for testing and any

00:16:01,279 --> 00:16:04,880
number of

00:16:02,000 --> 00:16:05,680
of things now where does it fit in the

00:16:04,880 --> 00:16:08,959
world

00:16:05,680 --> 00:16:10,959
well with with uh with the world

00:16:08,959 --> 00:16:13,279
we have synchronous and asynchronous

00:16:10,959 --> 00:16:13,680
with multiple value and single values so

00:16:13,279 --> 00:16:16,000
for

00:16:13,680 --> 00:16:16,800
obviously for synchronous and single

00:16:16,000 --> 00:16:18,720
value we have

00:16:16,800 --> 00:16:21,040
object and then we have an array for

00:16:18,720 --> 00:16:24,160
multiple values

00:16:21,040 --> 00:16:27,440
then we have a promise which like i said

00:16:24,160 --> 00:16:30,000
you can do then and

00:16:27,440 --> 00:16:31,440
but here the observable you will see the

00:16:30,000 --> 00:16:34,639
exact same code

00:16:31,440 --> 00:16:37,120
applies from array to observable

00:16:34,639 --> 00:16:40,880
no changes other than the fact that it

00:16:37,120 --> 00:16:43,120
happens to be an observable source

00:16:40,880 --> 00:16:45,440
so people keep asking well what is this

00:16:43,120 --> 00:16:48,959
buzzword about reactive programming

00:16:45,440 --> 00:16:50,800
because everyone sees reacts whatever

00:16:48,959 --> 00:16:52,720
you know it's such an overloaded term

00:16:50,800 --> 00:16:53,600
now and so people are saying well what

00:16:52,720 --> 00:16:55,759
is react well

00:16:53,600 --> 00:16:57,839
the dictionary just says readily

00:16:55,759 --> 00:17:01,360
responds to a stimulus

00:16:57,839 --> 00:17:03,839
okay not really all that useful is it

00:17:01,360 --> 00:17:06,319
uh so basically active and ready to

00:17:03,839 --> 00:17:08,640
respond to events

00:17:06,319 --> 00:17:10,640
ah you know what's uh you know what just

00:17:08,640 --> 00:17:12,240
go to this paper and just read that

00:17:10,640 --> 00:17:15,360
instead bitly

00:17:12,240 --> 00:17:18,480
bitly slash reactive paper i know people

00:17:15,360 --> 00:17:20,559
are are are kind of averse to

00:17:18,480 --> 00:17:22,319
reading papers like this and this is

00:17:20,559 --> 00:17:24,559
their general reaction

00:17:22,319 --> 00:17:25,520
but i i guarantee you it's it's well

00:17:24,559 --> 00:17:28,319
worth your time

00:17:25,520 --> 00:17:28,319
if you do that

00:17:29,280 --> 00:17:32,720
now functional reactive programming is

00:17:31,039 --> 00:17:33,120
something that people talk about quite

00:17:32,720 --> 00:17:35,600
often

00:17:33,120 --> 00:17:36,320
and they're like frp frp and i was like

00:17:35,600 --> 00:17:39,360
well

00:17:36,320 --> 00:17:41,760
we're not frp because frp is a very

00:17:39,360 --> 00:17:44,720
specific term for continuous time

00:17:41,760 --> 00:17:47,120
behaviors over time the idea of

00:17:44,720 --> 00:17:48,880
basically having a continuous cycle

00:17:47,120 --> 00:17:50,880
javascript you can't really do that it's

00:17:48,880 --> 00:17:53,919
a single threaded environment you have

00:17:50,880 --> 00:17:56,960
callbacks etc so it's really not

00:17:53,919 --> 00:18:00,480
frp at all it's not just adding felt map

00:17:56,960 --> 00:18:02,160
filter reduce onto events so just

00:18:00,480 --> 00:18:04,000
call us whatever i mean call us

00:18:02,160 --> 00:18:04,880
compositional event processing if you're

00:18:04,000 --> 00:18:07,919
not into the whole

00:18:04,880 --> 00:18:10,160
brevity thing you know uh

00:18:07,919 --> 00:18:11,760
and and like i said between the push and

00:18:10,160 --> 00:18:14,720
the pool world

00:18:11,760 --> 00:18:15,120
there is no difference filter map for

00:18:14,720 --> 00:18:17,600
each

00:18:15,120 --> 00:18:20,160
filter map for each all of those are

00:18:17,600 --> 00:18:21,520
exactly the same

00:18:20,160 --> 00:18:23,200
so let's actually talk about the

00:18:21,520 --> 00:18:26,400
creation what exactly

00:18:23,200 --> 00:18:28,480
is an observable well let's actually

00:18:26,400 --> 00:18:30,720
talk about that real quickly because

00:18:28,480 --> 00:18:32,320
this is why it's very very interesting

00:18:30,720 --> 00:18:33,919
so for example if we wanted to create

00:18:32,320 --> 00:18:35,919
something like from event

00:18:33,919 --> 00:18:37,520
we would have some sort of element and

00:18:35,919 --> 00:18:39,440
events we would call the

00:18:37,520 --> 00:18:40,559
uh we would have some sort of handler

00:18:39,440 --> 00:18:43,120
which would call

00:18:40,559 --> 00:18:45,200
next with our given value then we would

00:18:43,120 --> 00:18:46,400
hook that up to add event listener with

00:18:45,200 --> 00:18:48,400
our handler

00:18:46,400 --> 00:18:50,160
and then afterwards we would create this

00:18:48,400 --> 00:18:51,760
little teardown function

00:18:50,160 --> 00:18:53,679
and that's really great when you're

00:18:51,760 --> 00:18:55,520
dealing with a lot of events as you're

00:18:53,679 --> 00:18:58,880
composing them together

00:18:55,520 --> 00:19:00,720
and if you want to to unsubscribe

00:18:58,880 --> 00:19:02,320
with take and tell or anything like that

00:19:00,720 --> 00:19:02,880
then that automatically removes the

00:19:02,320 --> 00:19:06,400
handler

00:19:02,880 --> 00:19:09,600
you don't have to to do that yourself

00:19:06,400 --> 00:19:12,160
so netflix search we could do uh

00:19:09,600 --> 00:19:12,799
autocompletes basically with uh with the

00:19:12,160 --> 00:19:14,799
same

00:19:12,799 --> 00:19:17,679
kind of code where you can take the key

00:19:14,799 --> 00:19:20,160
ups we can get the value

00:19:17,679 --> 00:19:21,840
we can debounce it so maybe we're typing

00:19:20,160 --> 00:19:24,320
too fast and we don't want to send all

00:19:21,840 --> 00:19:27,039
of that to the server at once

00:19:24,320 --> 00:19:28,240
we can get the latest term so uh when

00:19:27,039 --> 00:19:29,919
we're dealing with asynchronous

00:19:28,240 --> 00:19:31,840
programming there's the idea of you

00:19:29,919 --> 00:19:34,880
getting out of order responses

00:19:31,840 --> 00:19:37,919
with flatmap latest that's not possible

00:19:34,880 --> 00:19:38,880
we canceled the previous uh previous

00:19:37,919 --> 00:19:40,880
request

00:19:38,880 --> 00:19:42,880
and then only the current request is

00:19:40,880 --> 00:19:44,720
valid

00:19:42,880 --> 00:19:46,799
so that's pretty cool and the fact that

00:19:44,720 --> 00:19:48,240
then we can call for each and then bind

00:19:46,799 --> 00:19:51,360
it directly to the ui

00:19:48,240 --> 00:19:53,360
with our data so what rx is is just

00:19:51,360 --> 00:19:54,880
three basic concept the observer and the

00:19:53,360 --> 00:19:56,320
observable which we've kind of covered

00:19:54,880 --> 00:19:59,120
in a little bit

00:19:56,320 --> 00:20:00,480
we have the idea of on next on air and

00:19:59,120 --> 00:20:03,440
on completed

00:20:00,480 --> 00:20:05,280
where we can have an infinite value a

00:20:03,440 --> 00:20:07,919
couple values and an error

00:20:05,280 --> 00:20:10,159
a couple a couple values in an end but

00:20:07,919 --> 00:20:12,240
you can't have overlapped values

00:20:10,159 --> 00:20:13,919
and you can't have things that happen

00:20:12,240 --> 00:20:15,600
after the fact

00:20:13,919 --> 00:20:17,440
and so we have that map filter and

00:20:15,600 --> 00:20:20,080
reduce that we talked about earlier but

00:20:17,440 --> 00:20:23,280
how do we actually use it in something

00:20:20,080 --> 00:20:25,600
usable you know so

00:20:23,280 --> 00:20:27,679
what we could do is we could poll for

00:20:25,600 --> 00:20:30,240
client updates so that's a really kind

00:20:27,679 --> 00:20:33,440
of a cool problem to have

00:20:30,240 --> 00:20:33,440
don't you think is that

00:20:33,760 --> 00:20:39,440
what you can do is that you can

00:20:36,880 --> 00:20:41,200
make sure that what you're doing is is

00:20:39,440 --> 00:20:44,080
very responsive so here we're going to

00:20:41,200 --> 00:20:45,760
listen for the document scrolling so as

00:20:44,080 --> 00:20:47,280
as something is on your hardware

00:20:45,760 --> 00:20:49,280
constrained device and you want to make

00:20:47,280 --> 00:20:51,120
sure that you only keep in memory

00:20:49,280 --> 00:20:52,400
what's on the screen nothing more

00:20:51,120 --> 00:20:54,240
nothing less

00:20:52,400 --> 00:20:56,159
so in order to do that we have to first

00:20:54,240 --> 00:20:58,000
listen to the scroll event

00:20:56,159 --> 00:21:00,000
and then we have to start debouncing so

00:20:58,000 --> 00:21:00,720
allowing people to you know scroll up

00:21:00,000 --> 00:21:03,360
scroll down

00:21:00,720 --> 00:21:04,240
very nicely and then what we can do is

00:21:03,360 --> 00:21:06,960
we can then

00:21:04,240 --> 00:21:08,960
further divide that into whether it's

00:21:06,960 --> 00:21:10,240
visible or not

00:21:08,960 --> 00:21:12,799
and then we can combine this all

00:21:10,240 --> 00:21:15,200
together with a kind of an interval so

00:21:12,799 --> 00:21:16,000
so we're constantly listening and taking

00:21:15,200 --> 00:21:18,640
that row data

00:21:16,000 --> 00:21:20,720
until it's hidden and when it's hidden

00:21:18,640 --> 00:21:22,640
it's gone

00:21:20,720 --> 00:21:24,880
so this is kind of some netflix code

00:21:22,640 --> 00:21:25,919
that they actually use today in terms of

00:21:24,880 --> 00:21:28,400
how they

00:21:25,919 --> 00:21:31,679
uh how they handle a lot of this complex

00:21:28,400 --> 00:21:34,799
user interface design

00:21:31,679 --> 00:21:36,799
and the player itself like i said you

00:21:34,799 --> 00:21:39,120
could design it with callback hell which

00:21:36,799 --> 00:21:41,919
is what they originally had

00:21:39,120 --> 00:21:43,039
which you ended up with this cow head

00:21:41,919 --> 00:21:45,440
but instead with

00:21:43,039 --> 00:21:46,960
with observables we have a very very

00:21:45,440 --> 00:21:49,840
simple approach to that

00:21:46,960 --> 00:21:50,159
and that is uh we can initialize flat

00:21:49,840 --> 00:21:54,080
map

00:21:50,159 --> 00:21:58,320
play attempts uh then we can authorize

00:21:54,080 --> 00:21:59,919
retry three times and take until cancel

00:21:58,320 --> 00:22:01,840
something that we couldn't easily do

00:21:59,919 --> 00:22:04,080
with that callback held version which is

00:22:01,840 --> 00:22:05,760
that if someone hits that cancel button

00:22:04,080 --> 00:22:08,400
it will actually stop the whole

00:22:05,760 --> 00:22:11,120
transaction from going through

00:22:08,400 --> 00:22:12,480
that's cool because now we have the the

00:22:11,120 --> 00:22:14,640
ability to kind of

00:22:12,480 --> 00:22:17,679
merge together all of these different

00:22:14,640 --> 00:22:20,400
events into one

00:22:17,679 --> 00:22:21,520
and they have also had another uh set of

00:22:20,400 --> 00:22:23,760
problems is

00:22:21,520 --> 00:22:24,559
how do they deal with uh with errors and

00:22:23,760 --> 00:22:27,360
so forth

00:22:24,559 --> 00:22:27,600
with uh websockets well we have an idea

00:22:27,360 --> 00:22:30,480
of

00:22:27,600 --> 00:22:31,360
where uh they uh netflix has created web

00:22:30,480 --> 00:22:33,840
uh

00:22:31,360 --> 00:22:35,919
websocket subject where they can hand it

00:22:33,840 --> 00:22:38,320
multiple endpoints and it keeps failing

00:22:35,919 --> 00:22:40,000
over until it actually gets something

00:22:38,320 --> 00:22:42,000
but that's kind of cool too in the fact

00:22:40,000 --> 00:22:44,000
that you can uh you can listen

00:22:42,000 --> 00:22:45,919
and you can decide when to send data and

00:22:44,000 --> 00:22:48,480
so forth

00:22:45,919 --> 00:22:49,360
and yes you can do try catch finally so

00:22:48,480 --> 00:22:51,919
for example

00:22:49,360 --> 00:22:54,400
uh when person was asking about uh

00:22:51,919 --> 00:22:57,039
handling errors well here we can say

00:22:54,400 --> 00:22:58,000
dot catch and so for example if you're

00:22:57,039 --> 00:23:01,200
in in a

00:22:58,000 --> 00:23:03,919
uh in a constrained environment where uh

00:23:01,200 --> 00:23:06,000
things such as as offline matters you

00:23:03,919 --> 00:23:06,480
can get some default data and put it in

00:23:06,000 --> 00:23:08,320
there

00:23:06,480 --> 00:23:10,000
and then you can finally do some cleanup

00:23:08,320 --> 00:23:12,640
and then you can process each item as it

00:23:10,000 --> 00:23:14,240
comes through

00:23:12,640 --> 00:23:16,240
now the role of schedulers is kind of

00:23:14,240 --> 00:23:19,039
our secret sauce and what really

00:23:16,240 --> 00:23:19,280
kind of of puts us apart and it really

00:23:19,039 --> 00:23:22,640
is

00:23:19,280 --> 00:23:24,640
is where do i run these values and how

00:23:22,640 --> 00:23:27,280
so we have this idea of many different

00:23:24,640 --> 00:23:29,039
ways about handling

00:23:27,280 --> 00:23:30,559
handling schedulers in such a way that

00:23:29,039 --> 00:23:33,039
we can schedule some work

00:23:30,559 --> 00:23:34,400
and we can also cancel it at any time so

00:23:33,039 --> 00:23:35,200
all of that cancellation that i've

00:23:34,400 --> 00:23:37,280
talked about

00:23:35,200 --> 00:23:38,240
goes all the way to the very core of

00:23:37,280 --> 00:23:40,320
what we do

00:23:38,240 --> 00:23:42,159
and it provides some testing benefits

00:23:40,320 --> 00:23:42,720
for angular you could fit it into the

00:23:42,159 --> 00:23:45,200
digest

00:23:42,720 --> 00:23:46,000
cycle for any number of things you can

00:23:45,200 --> 00:23:50,480
also

00:23:46,000 --> 00:23:53,039
choose a very specific implementation

00:23:50,480 --> 00:23:56,080
and of course you can do some

00:23:53,039 --> 00:23:59,279
deterministic testing such as js conf bp

00:23:56,080 --> 00:24:02,559
2015 happens at this particular times

00:23:59,279 --> 00:24:05,200
and we can always determine always

00:24:02,559 --> 00:24:06,960
that it happened then so there's no

00:24:05,200 --> 00:24:08,480
callbacks there's nothing in terms of

00:24:06,960 --> 00:24:12,159
when you're testing observables

00:24:08,480 --> 00:24:13,600
it just works now schedulers do matter

00:24:12,159 --> 00:24:16,960
so for example

00:24:13,600 --> 00:24:19,279
if we are if we're taking something like

00:24:16,960 --> 00:24:20,000
we want to draw something on a screen

00:24:19,279 --> 00:24:22,080
well if we

00:24:20,000 --> 00:24:23,039
take the default scheduler the problem

00:24:22,080 --> 00:24:25,120
is going to be

00:24:23,039 --> 00:24:26,480
is it's going to eat up our cpu i mean

00:24:25,120 --> 00:24:27,919
it will if if

00:24:26,480 --> 00:24:29,840
if my fan weren't going it would

00:24:27,919 --> 00:24:31,360
probably levitate just because the fan

00:24:29,840 --> 00:24:33,840
was going so hard

00:24:31,360 --> 00:24:34,799
is because it's just drawing every

00:24:33,840 --> 00:24:38,080
single time as

00:24:34,799 --> 00:24:38,799
fast as it can through uh through the

00:24:38,080 --> 00:24:42,480
fastest

00:24:38,799 --> 00:24:44,400
available means on your on your platform

00:24:42,480 --> 00:24:46,080
but instead what we could do is we can

00:24:44,400 --> 00:24:48,080
swap that out and suddenly

00:24:46,080 --> 00:24:50,000
we can say request animation frame

00:24:48,080 --> 00:24:53,200
scheduler and now it looks

00:24:50,000 --> 00:24:55,039
actually sane and guess what your your

00:24:53,200 --> 00:24:56,159
computer is not going to levitate

00:24:55,039 --> 00:25:00,000
anymore because

00:24:56,159 --> 00:25:02,720
uh just because that it happens to

00:25:00,000 --> 00:25:04,640
to eat up a lot of resources we have

00:25:02,720 --> 00:25:05,919
back pressure as well that's not super

00:25:04,640 --> 00:25:07,120
super important but it

00:25:05,919 --> 00:25:09,360
but for a lot of people that are

00:25:07,120 --> 00:25:10,400
concerned about how much traffic they

00:25:09,360 --> 00:25:13,840
get

00:25:10,400 --> 00:25:14,960
we have pause and resume capabilities

00:25:13,840 --> 00:25:17,440
and async await

00:25:14,960 --> 00:25:18,240
given the fact that it's coming to to

00:25:17,440 --> 00:25:22,279
javascript

00:25:18,240 --> 00:25:24,320
v next whatever that is the es7

00:25:22,279 --> 00:25:26,799
es2016 whatever you want to call it the

00:25:24,320 --> 00:25:28,960
idea of async and await is coming

00:25:26,799 --> 00:25:30,720
in some form or fashion but you can

00:25:28,960 --> 00:25:34,080
already do that today

00:25:30,720 --> 00:25:35,520
with the spawn function uh inside of rx

00:25:34,080 --> 00:25:37,760
where you can do the retry

00:25:35,520 --> 00:25:39,840
catch and finally all of that and then

00:25:37,760 --> 00:25:42,000
log the result

00:25:39,840 --> 00:25:44,880
we have that today so you're living in

00:25:42,000 --> 00:25:48,159
the future already

00:25:44,880 --> 00:25:50,880
and then what we're working on uh now is

00:25:48,159 --> 00:25:52,240
uh we're working on the the idea of of

00:25:50,880 --> 00:25:56,559
taking observables and

00:25:52,240 --> 00:25:57,600
moving it into uh into es7 directly so

00:25:56,559 --> 00:25:59,600
the fact of

00:25:57,600 --> 00:26:00,720
now you can get your mouse drags and

00:25:59,600 --> 00:26:02,960
your mouse moves

00:26:00,720 --> 00:26:03,760
and take until mouse ups all completely

00:26:02,960 --> 00:26:06,960
native

00:26:03,760 --> 00:26:07,760
to your browser if you want to learn how

00:26:06,960 --> 00:26:10,520
to do this

00:26:07,760 --> 00:26:12,240
we have a great tutorial out there

00:26:10,520 --> 00:26:15,039
jayhusain.github.io

00:26:12,240 --> 00:26:16,400
learnrx all of this is on our site

00:26:15,039 --> 00:26:19,520
rxmarbles a great

00:26:16,400 --> 00:26:21,440
site by andre is

00:26:19,520 --> 00:26:24,400
also a great way to learn how each

00:26:21,440 --> 00:26:26,240
individual operator works and if you

00:26:24,400 --> 00:26:27,360
really want to see how something complex

00:26:26,240 --> 00:26:30,320
is designed

00:26:27,360 --> 00:26:30,720
there is uh there is a sweet js and it's

00:26:30,320 --> 00:26:33,600
a

00:26:30,720 --> 00:26:34,159
idea of a macro based language but all

00:26:33,600 --> 00:26:36,960
of the

00:26:34,159 --> 00:26:37,600
the bits and pieces of the editor itself

00:26:36,960 --> 00:26:40,480
is all in

00:26:37,600 --> 00:26:42,000
rx and that's handling all of the the

00:26:40,480 --> 00:26:46,400
state all of your initial

00:26:42,000 --> 00:26:48,320
uh uh settings and so forth

00:26:46,400 --> 00:26:50,320
so i'll i'll leave you with this before

00:26:48,320 --> 00:26:52,640
we dive into some demos but what i

00:26:50,320 --> 00:26:56,880
really want you to remember

00:26:52,640 --> 00:27:00,240
is push oh dear

00:26:56,880 --> 00:27:00,240
why are you oh okay

00:27:00,400 --> 00:27:04,559
are you not going to well let's see if

00:27:02,080 --> 00:27:04,559
it plays

00:27:05,360 --> 00:27:10,159
apparently uh apparently the uh the gods

00:27:07,919 --> 00:27:10,720
are not smiling upon me today in terms

00:27:10,159 --> 00:27:15,440
of

00:27:10,720 --> 00:27:17,200
actual audio so i will go directly to

00:27:15,440 --> 00:27:20,080
you come see me afterwards and we'll

00:27:17,200 --> 00:27:22,559
play it together

00:27:20,080 --> 00:27:24,640
it'll be great i i guarantee you uh so

00:27:22,559 --> 00:27:26,640
if you go to our our website like i said

00:27:24,640 --> 00:27:28,640
we have a lot of material here

00:27:26,640 --> 00:27:30,720
uh we have our design guidelines we have

00:27:28,640 --> 00:27:33,120
our recipes our unit tests

00:27:30,720 --> 00:27:35,679
uh we have all of these ways people are

00:27:33,120 --> 00:27:37,520
using it with react today

00:27:35,679 --> 00:27:41,200
using instead of flux i think my

00:27:37,520 --> 00:27:44,880
favorite one is thundercats.js

00:27:41,200 --> 00:27:46,240
just because of the name is kind of cool

00:27:44,880 --> 00:27:48,799
and you can do some really kind of cool

00:27:46,240 --> 00:27:54,000
things you like interactions here

00:27:48,799 --> 00:27:56,799
in using using rx and react together

00:27:54,000 --> 00:27:58,880
you can also do autocomplete obviously

00:27:56,799 --> 00:28:01,200
if you have great internet

00:27:58,880 --> 00:28:03,120
but you can also do things like game

00:28:01,200 --> 00:28:03,679
programming so for example all of this

00:28:03,120 --> 00:28:06,720
thing where

00:28:03,679 --> 00:28:07,600
mario is jumping and so forth and moving

00:28:06,720 --> 00:28:09,520
about

00:28:07,600 --> 00:28:11,440
all has to deal with keyboard events

00:28:09,520 --> 00:28:13,679
gravity and all of these other things

00:28:11,440 --> 00:28:16,080
that you can just kind of merge together

00:28:13,679 --> 00:28:17,919
and like i said since it is such such a

00:28:16,080 --> 00:28:18,799
thing with with game programming is the

00:28:17,919 --> 00:28:20,960
fact that

00:28:18,799 --> 00:28:22,240
you know you can play games to your

00:28:20,960 --> 00:28:23,600
heart's content because what you're

00:28:22,240 --> 00:28:25,200
dealing with is you're dealing with

00:28:23,600 --> 00:28:28,000
timers you're dealing with

00:28:25,200 --> 00:28:29,360
uh bounds checks you're dealing with uh

00:28:28,000 --> 00:28:33,120
keyboard events

00:28:29,360 --> 00:28:35,600
and so forth and so as as you can see we

00:28:33,120 --> 00:28:37,760
we lost it hit that bounce check and so

00:28:35,600 --> 00:28:39,840
forth

00:28:37,760 --> 00:28:41,039
and like i said great for animation

00:28:39,840 --> 00:28:44,960
great for for those

00:28:41,039 --> 00:28:48,240
sorts of things uh and let's see

00:28:44,960 --> 00:28:50,320
uh did i ah there we are

00:28:48,240 --> 00:28:52,720
uh we can also play pac-man uh so if

00:28:50,320 --> 00:28:55,840
you're so inclined to play pac-man

00:28:52,720 --> 00:28:58,399
uh in in javascript uh yay

00:28:55,840 --> 00:28:58,399
you can do it

00:28:59,840 --> 00:29:05,440
we can also do a very complex user user

00:29:03,120 --> 00:29:08,720
interfaces such as you know coordinating

00:29:05,440 --> 00:29:09,520
all of our event handlers together we

00:29:08,720 --> 00:29:11,520
can

00:29:09,520 --> 00:29:12,799
paint on a canvas so i can start taking

00:29:11,520 --> 00:29:14,720
different colors

00:29:12,799 --> 00:29:15,919
all of these are in our samples today

00:29:14,720 --> 00:29:18,080
you can take a look at them

00:29:15,919 --> 00:29:20,080
they're all there and this is the like i

00:29:18,080 --> 00:29:20,960
said the the request animation frame

00:29:20,080 --> 00:29:23,279
scheduler

00:29:20,960 --> 00:29:25,120
uh and as you can see my my machine is

00:29:23,279 --> 00:29:26,880
not lifting off of its off of its

00:29:25,120 --> 00:29:29,919
moorings here

00:29:26,880 --> 00:29:31,360
uh now one other cool project is how do

00:29:29,919 --> 00:29:33,360
i actually visualize

00:29:31,360 --> 00:29:35,120
what i'm what i'm doing here so for

00:29:33,360 --> 00:29:37,840
example if we had some

00:29:35,120 --> 00:29:39,520
uh some code here where we we take and

00:29:37,840 --> 00:29:40,320
we take from event and we do some

00:29:39,520 --> 00:29:42,159
mapping

00:29:40,320 --> 00:29:44,320
and subscribe to it what does it look

00:29:42,159 --> 00:29:46,880
like yes we've got some output here

00:29:44,320 --> 00:29:47,919
but down below physically tells us

00:29:46,880 --> 00:29:51,120
exactly what

00:29:47,919 --> 00:29:54,159
happened in terms of of creation

00:29:51,120 --> 00:29:56,399
of events mapping and subscription of

00:29:54,159 --> 00:30:00,080
each one and when it happened

00:29:56,399 --> 00:30:02,320
really really kind of cool stuff uh

00:30:00,080 --> 00:30:05,279
in addition to the work that andres did

00:30:02,320 --> 00:30:08,559
with cycle there's also webrx there's a

00:30:05,279 --> 00:30:11,760
great stuff and as well as cycle which

00:30:08,559 --> 00:30:13,760
andre has so done so i will wrap things

00:30:11,760 --> 00:30:23,840
up here with that

00:30:13,760 --> 00:30:23,840
and so thank you very much

00:30:34,480 --> 00:30:37,679
i think we could like get a tan in this

00:30:36,720 --> 00:30:42,000
light at least

00:30:37,679 --> 00:30:42,640
i could um i i have one question from

00:30:42,000 --> 00:30:45,520
twitter

00:30:42,640 --> 00:30:47,039
and i just love this question i don't

00:30:45,520 --> 00:30:47,760
know how to even read it without

00:30:47,039 --> 00:30:51,440
laughing

00:30:47,760 --> 00:30:54,320
um the star color on your hat

00:30:51,440 --> 00:30:56,880
gold or blue hashtag dress gate oh good

00:30:54,320 --> 00:30:56,880
glory

00:30:59,039 --> 00:31:04,960
so they are the yes the uh some are blue

00:31:02,799 --> 00:31:06,480
some are gold and some are silver so

00:31:04,960 --> 00:31:09,360
yeah problem solved

00:31:06,480 --> 00:31:10,640
ever asked that question um i didn't see

00:31:09,360 --> 00:31:12,480
anything else on twitter

00:31:10,640 --> 00:31:14,559
uh so i thought it must have been boring

00:31:12,480 --> 00:31:16,480
or something i don't know

00:31:14,559 --> 00:31:18,159
or the hat was just so amazing that

00:31:16,480 --> 00:31:18,960
everyone was so distracted they weren't

00:31:18,159 --> 00:31:21,919
even listening

00:31:18,960 --> 00:31:23,279
this is very very possible so i mean

00:31:21,919 --> 00:31:24,960
like i said

00:31:23,279 --> 00:31:27,200
it's funny because you know i've been

00:31:24,960 --> 00:31:29,120
working on this particular project for

00:31:27,200 --> 00:31:30,880
for five years now and what we're seeing

00:31:29,120 --> 00:31:33,840
is is kind of mass adoption

00:31:30,880 --> 00:31:35,679
through through github through slack

00:31:33,840 --> 00:31:38,559
through

00:31:35,679 --> 00:31:40,480
through netflix and even microsoft so if

00:31:38,559 --> 00:31:41,279
you're using like microsoft online all

00:31:40,480 --> 00:31:44,240
of that

00:31:41,279 --> 00:31:45,679
uses uses rx so it's kind of interesting

00:31:44,240 --> 00:31:48,559
just to see

00:31:45,679 --> 00:31:48,960
over time how how kind of things have

00:31:48,559 --> 00:31:51,200
just

00:31:48,960 --> 00:31:53,039
radically changed and people are finally

00:31:51,200 --> 00:31:56,480
accepting the idea

00:31:53,039 --> 00:31:58,480
uh five years after the fact because we

00:31:56,480 --> 00:32:02,240
presented this back at jscom 2010

00:31:58,480 --> 00:32:05,679
2010 and went over most people's heads

00:32:02,240 --> 00:32:05,679
pardon me questions

00:32:06,240 --> 00:32:09,679
didn't see anyone oh there's a question

00:32:08,720 --> 00:32:12,080
over there two

00:32:09,679 --> 00:32:12,080
questions

00:32:13,360 --> 00:32:16,320
raise your hands

00:32:16,640 --> 00:32:20,399
i need your questions they were just

00:32:18,000 --> 00:32:22,000
hiding or they were just like so in a or

00:32:20,399 --> 00:32:24,080
like you know i'm so impressed by your

00:32:22,000 --> 00:32:26,559
hat that just couldn't

00:32:24,080 --> 00:32:27,679
i could have worn my robots cough hats i

00:32:26,559 --> 00:32:28,960
don't know if that would have been less

00:32:27,679 --> 00:32:31,840
distracting

00:32:28,960 --> 00:32:32,080
um kind of a general question first of

00:32:31,840 --> 00:32:34,720
all

00:32:32,080 --> 00:32:35,200
uh does rx play well with angular or is

00:32:34,720 --> 00:32:37,440
it

00:32:35,200 --> 00:32:39,120
a lot more focused uh or works a lot

00:32:37,440 --> 00:32:41,360
better with the react

00:32:39,120 --> 00:32:42,640
um well that's a that's a good question

00:32:41,360 --> 00:32:45,039
so uh

00:32:42,640 --> 00:32:47,039
one one slide i kind of cut at the last

00:32:45,039 --> 00:32:48,559
moment but it really does play well with

00:32:47,039 --> 00:32:51,279
the libraries that you use so for

00:32:48,559 --> 00:32:52,720
example we have rx.angular.js

00:32:51,279 --> 00:32:55,039
which basically does a lot of the

00:32:52,720 --> 00:32:57,600
bridging to and from

00:32:55,039 --> 00:32:59,039
angular directly so for example if

00:32:57,600 --> 00:33:00,080
you're if you want to do certain things

00:32:59,039 --> 00:33:02,000
within the

00:33:00,080 --> 00:33:03,919
digest cycle we have kind of helper

00:33:02,000 --> 00:33:06,880
methods to do all that

00:33:03,919 --> 00:33:07,840
uh react everyone is doing stuff with it

00:33:06,880 --> 00:33:09,519
but there's

00:33:07,840 --> 00:33:11,120
there are a lot of projects like rx

00:33:09,519 --> 00:33:14,960
react and so forth

00:33:11,120 --> 00:33:17,120
as well as rxember and you know rxjquery

00:33:14,960 --> 00:33:18,880
all of those sorts of things so it

00:33:17,120 --> 00:33:20,480
blends very very well you don't have to

00:33:18,880 --> 00:33:21,519
throw out everything that you've ever

00:33:20,480 --> 00:33:23,679
done

00:33:21,519 --> 00:33:24,720
you can you continue to use it just the

00:33:23,679 --> 00:33:27,360
way that's

00:33:24,720 --> 00:33:30,080
you know kind of mixing it in and and

00:33:27,360 --> 00:33:31,919
into your current project

00:33:30,080 --> 00:33:33,919
one other thing um i didn't quite

00:33:31,919 --> 00:33:37,120
understand regarding the promises

00:33:33,919 --> 00:33:39,039
does does it somehow play in with it or

00:33:37,120 --> 00:33:40,399
they completely separate concepts that

00:33:39,039 --> 00:33:40,720
don't work together well they are they

00:33:40,399 --> 00:33:43,039
are

00:33:40,720 --> 00:33:45,120
they are separate concepts but no we we

00:33:43,039 --> 00:33:45,760
do play very well with promises in the

00:33:45,120 --> 00:33:47,679
fact that

00:33:45,760 --> 00:33:49,120
things like the flat map operator that

00:33:47,679 --> 00:33:52,399
we showed up there

00:33:49,120 --> 00:33:54,399
uh merge and many others actually accept

00:33:52,399 --> 00:33:56,640
promises and will convert them

00:33:54,399 --> 00:33:59,679
automatically to observables for you

00:33:56,640 --> 00:34:03,360
so just because you can you know

00:33:59,679 --> 00:34:06,720
call jquery or or angular

00:34:03,360 --> 00:34:08,560
and get back a promise you it binds

00:34:06,720 --> 00:34:09,119
directly you don't have to do any uh

00:34:08,560 --> 00:34:11,919
special

00:34:09,119 --> 00:34:12,720
magic or voodoo yourself what's kind of

00:34:11,919 --> 00:34:15,440
interesting

00:34:12,720 --> 00:34:16,399
you you mentioned angular earlier uh

00:34:15,440 --> 00:34:20,159
what they're doing

00:34:16,399 --> 00:34:22,639
for for uh for for uh for all of their i

00:34:20,159 --> 00:34:23,119
o going forward in angular 2 uh they

00:34:22,639 --> 00:34:25,520
have

00:34:23,119 --> 00:34:26,480
adopted observables as part of what

00:34:25,520 --> 00:34:28,240
they're doing

00:34:26,480 --> 00:34:30,399
uh so that you'll be able to use dot

00:34:28,240 --> 00:34:32,800
subscribe and and all of the other

00:34:30,399 --> 00:34:33,679
you know filters and maps and so forth

00:34:32,800 --> 00:34:38,159
uh that's

00:34:33,679 --> 00:34:38,159
that i showed you here okay thanks a lot

00:34:41,119 --> 00:34:45,679
there was another question over there

00:34:43,280 --> 00:34:45,679
over there

00:34:46,800 --> 00:34:50,560
now we need to go all the way around

00:34:49,040 --> 00:34:54,240
exactly just jump

00:34:50,560 --> 00:34:54,720
like true people i just crawl over

00:34:54,240 --> 00:34:58,000
people

00:34:54,720 --> 00:34:58,000
but it doesn't matter right

00:34:58,480 --> 00:35:02,400
oh yeah so i've been i've been playing

00:35:01,200 --> 00:35:04,160
with it a bit

00:35:02,400 --> 00:35:06,560
okay what's the best way so when you've

00:35:04,160 --> 00:35:09,040
got an observable and a stream of

00:35:06,560 --> 00:35:10,079
functions what's the best way to debug

00:35:09,040 --> 00:35:13,200
it

00:35:10,079 --> 00:35:14,640
uh debugging well i there are many ways

00:35:13,200 --> 00:35:16,800
about doing that we actually have that

00:35:14,640 --> 00:35:19,359
in our documentation

00:35:16,800 --> 00:35:20,480
but debugging you can you can either put

00:35:19,359 --> 00:35:23,040
breakpoints in

00:35:20,480 --> 00:35:24,960
in each of your your function callbacks

00:35:23,040 --> 00:35:27,200
for map filter and so on

00:35:24,960 --> 00:35:29,520
but we also have this notion of do or

00:35:27,200 --> 00:35:30,720
tap where it captures each individual

00:35:29,520 --> 00:35:32,880
value

00:35:30,720 --> 00:35:34,560
as it comes through so here it's this

00:35:32,880 --> 00:35:35,440
here it's that and then you can do a lot

00:35:34,560 --> 00:35:38,079
of

00:35:35,440 --> 00:35:39,760
what i call caveman debugging where

00:35:38,079 --> 00:35:40,400
you're just calling console.log

00:35:39,760 --> 00:35:42,640
everywhere

00:35:40,400 --> 00:35:44,000
but that's not really scalable in terms

00:35:42,640 --> 00:35:46,320
of getting the right answer

00:35:44,000 --> 00:35:48,720
in terms of where your your program

00:35:46,320 --> 00:35:51,119
failed so we have this this notion of

00:35:48,720 --> 00:35:51,520
long stack traces and the idea behind

00:35:51,119 --> 00:35:53,680
that

00:35:51,520 --> 00:35:55,520
is we eliminate all of the rx code and

00:35:53,680 --> 00:35:58,320
all of the the the browser

00:35:55,520 --> 00:35:59,280
code and only keep it down to your code

00:35:58,320 --> 00:36:02,400
as to

00:35:59,280 --> 00:36:05,359
keeping the stack from that so if you're

00:36:02,400 --> 00:36:06,079
if it fails during a map or a filter or

00:36:05,359 --> 00:36:08,400
something

00:36:06,079 --> 00:36:09,119
i will immediately have that in the air

00:36:08,400 --> 00:36:12,079
stack and

00:36:09,119 --> 00:36:14,079
we won't report anything that rx did

00:36:12,079 --> 00:36:16,320
okay so that's really kind of good for

00:36:14,079 --> 00:36:19,680
for debugging purposes as well

00:36:16,320 --> 00:36:20,880
cool thanks i think the caveman

00:36:19,680 --> 00:36:22,720
debugging is going

00:36:20,880 --> 00:36:24,400
in history now you know like people are

00:36:22,720 --> 00:36:26,079
going yeah yeah exactly

00:36:24,400 --> 00:36:27,599
can you like use this special technique

00:36:26,079 --> 00:36:29,119
you know okay when debugging like that's

00:36:27,599 --> 00:36:31,359
what we're rolling with right now

00:36:29,119 --> 00:36:32,160
exactly caveman debugging let's let's go

00:36:31,359 --> 00:36:34,800
old school like

00:36:32,160 --> 00:36:36,160
yeah like that's very agile absolutely

00:36:34,800 --> 00:36:38,880
uh all you have to do is just

00:36:36,160 --> 00:36:40,720
uh do uh uh control replace and you know

00:36:38,880 --> 00:36:41,359
get rid of all your console.logs

00:36:40,720 --> 00:36:44,880
afterwards

00:36:41,359 --> 00:36:48,079
oh my god okay one more question

00:36:44,880 --> 00:36:51,599
yeah hello uh is these ideas

00:36:48,079 --> 00:36:54,000
uh good to implement also in node.js on

00:36:51,599 --> 00:36:57,119
server side you know handling requests

00:36:54,000 --> 00:36:59,119
well absolutely uh in fact um

00:36:57,119 --> 00:37:00,160
one of the the examples that we have we

00:36:59,119 --> 00:37:02,400
have a couple of

00:37:00,160 --> 00:37:04,480
examples using it on a tesla but we also

00:37:02,400 --> 00:37:05,440
have it using uh working on nodes so for

00:37:04,480 --> 00:37:07,920
example

00:37:05,440 --> 00:37:08,640
uh you know at netflix they use rx in

00:37:07,920 --> 00:37:10,640
node

00:37:08,640 --> 00:37:12,079
we have a little stocked uh stock

00:37:10,640 --> 00:37:14,880
example where we uh we

00:37:12,079 --> 00:37:16,640
where we take a stock feed and start

00:37:14,880 --> 00:37:19,680
doing analysis such as you know

00:37:16,640 --> 00:37:22,480
grouping them by the stock

00:37:19,680 --> 00:37:23,040
the stock number uh the stock ticker

00:37:22,480 --> 00:37:25,680
rather

00:37:23,040 --> 00:37:26,079
and then you can do analysis such as

00:37:25,680 --> 00:37:29,200
whether

00:37:26,079 --> 00:37:30,960
there have been price spikes in the past

00:37:29,200 --> 00:37:33,040
hour or something like that based upon

00:37:30,960 --> 00:37:34,640
our buffering so absolutely

00:37:33,040 --> 00:37:36,800
uh it's something something that i'm

00:37:34,640 --> 00:37:40,640
using also on the thali project as well

00:37:36,800 --> 00:37:46,000
server side okay we can get

00:37:40,640 --> 00:37:46,000
one more and there too okay

00:37:47,040 --> 00:37:50,960
where's the mic okay we have two

00:37:49,839 --> 00:37:54,240
questions

00:37:50,960 --> 00:37:54,800
is everyone starving yeah what does

00:37:54,240 --> 00:37:56,480
lunch is

00:37:54,800 --> 00:37:57,920
is that a is that a question yeah

00:37:56,480 --> 00:38:00,800
lunches

00:37:57,920 --> 00:38:01,520
after we finish talking uh thanks for

00:38:00,800 --> 00:38:05,359
the kittens

00:38:01,520 --> 00:38:07,920
um i'm very curious about how you handle

00:38:05,359 --> 00:38:08,960
um event streams when they come in i

00:38:07,920 --> 00:38:11,200
mean um

00:38:08,960 --> 00:38:13,119
you mentioned the callback hell and like

00:38:11,200 --> 00:38:15,680
events in interrupting each other

00:38:13,119 --> 00:38:17,520
but how do you keep track of events uh

00:38:15,680 --> 00:38:19,280
well what we have is we have like i said

00:38:17,520 --> 00:38:20,400
the end the internal scheduler which

00:38:19,280 --> 00:38:23,599
basically

00:38:20,400 --> 00:38:24,800
allows for uh fifo uh to happen first in

00:38:23,599 --> 00:38:27,440
first out so

00:38:24,800 --> 00:38:29,280
so basically you cannot have things that

00:38:27,440 --> 00:38:31,680
kind of overlap you have

00:38:29,280 --> 00:38:33,280
you have them all in a queue basically

00:38:31,680 --> 00:38:35,760
and so as one comes in

00:38:33,280 --> 00:38:37,520
the other one comes in we can't guaran

00:38:35,760 --> 00:38:40,079
necessarily guarantee order

00:38:37,520 --> 00:38:42,160
uh you know when certain events happen

00:38:40,079 --> 00:38:45,520
unless you use the right operator

00:38:42,160 --> 00:38:47,200
to do that but but like i said is is

00:38:45,520 --> 00:38:47,599
yeah there is no chance for an overlap

00:38:47,200 --> 00:38:48,880
since

00:38:47,599 --> 00:38:50,160
javascript's a single threaded

00:38:48,880 --> 00:38:51,520
environment you're not going to run into

00:38:50,160 --> 00:38:54,800
that anyways

00:38:51,520 --> 00:38:57,920
uh but uh but the idea

00:38:54,800 --> 00:39:00,000
is is is that yeah it will just start

00:38:57,920 --> 00:39:03,040
merging all of these together as as

00:39:00,000 --> 00:39:06,480
the as they happen thanks

00:39:03,040 --> 00:39:08,079
okay one more question or we'll just

00:39:06,480 --> 00:39:09,680
keep sitting here and talking about

00:39:08,079 --> 00:39:11,520
javascript because obviously no one is

00:39:09,680 --> 00:39:15,119
hungry

00:39:11,520 --> 00:39:18,000
and javascript is just that awesome

00:39:15,119 --> 00:39:18,880
hi uh i just want to ask that how would

00:39:18,000 --> 00:39:22,320
you compare

00:39:18,880 --> 00:39:24,320
observables to csp and like go or

00:39:22,320 --> 00:39:27,440
choreosync and clojure script

00:39:24,320 --> 00:39:30,240
okay so uh so how does observables

00:39:27,440 --> 00:39:31,680
compare to csp or communicating

00:39:30,240 --> 00:39:35,520
sequential processes

00:39:31,680 --> 00:39:37,920
well csp is a very very low level

00:39:35,520 --> 00:39:39,200
way of dealing with io for example is

00:39:37,920 --> 00:39:41,040
the fact that you have this channel

00:39:39,200 --> 00:39:42,800
where you can start sending out values

00:39:41,040 --> 00:39:44,640
on

00:39:42,800 --> 00:39:46,400
the problem with with that approach

00:39:44,640 --> 00:39:47,599
especially for asynchronous programming

00:39:46,400 --> 00:39:50,320
is there is no

00:39:47,599 --> 00:39:51,440
dedicated error handling uh technique

00:39:50,320 --> 00:39:54,400
there is no

00:39:51,440 --> 00:39:57,040
uh there are no ways of automatically

00:39:54,400 --> 00:40:00,079
cleaning up resources and all of that so

00:39:57,040 --> 00:40:02,079
it it's fine for certain aspects but in

00:40:00,079 --> 00:40:05,119
terms of building really complex stuff

00:40:02,079 --> 00:40:07,359
it falls down really quickly because csp

00:40:05,119 --> 00:40:09,520
does is because it

00:40:07,359 --> 00:40:10,720
it misses the the deterministic

00:40:09,520 --> 00:40:13,280
finalization

00:40:10,720 --> 00:40:14,319
and it misses the error handling uh

00:40:13,280 --> 00:40:16,319
components but

00:40:14,319 --> 00:40:18,160
if you're willing to do very low level

00:40:16,319 --> 00:40:21,119
stuff of just emitting values

00:40:18,160 --> 00:40:21,119
csp is fine

00:40:21,760 --> 00:40:27,520
okay well that was really awesome qa and

00:40:25,440 --> 00:40:28,720
i would assume that everyone is hungry

00:40:27,520 --> 00:40:32,000
and if not

00:40:28,720 --> 00:40:32,000
it's lunchtime anyway

00:40:32,079 --> 00:40:35,599
we'll have i think an hour and a half

00:40:33,920 --> 00:40:38,880
for lunch right now

00:40:35,599 --> 00:40:41,920
so take it slowly outside and get your

00:40:38,880 --> 00:40:45,040
food and be mindful of your

00:40:41,920 --> 00:40:53,839
colleagues that are hungry as well

00:40:45,040 --> 00:40:53,839
yep thank you matthew

00:40:58,160 --> 00:41:00,240

YouTube URL: https://www.youtube.com/watch?v=QCBXt6ixnLE


