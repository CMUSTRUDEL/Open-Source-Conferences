Title: Why I Chose to Modularize the Ducks in My React App    Lauren Lee    CascadiaJS 2018
Publication date: 2018-12-01
Playlist: CascadiaJS 2018
Description: 
	React and Redux are awesome but the state management can be overwhelming for beginners. This talk is all about how to keep your code DRY, scalable, and maintainable- the dream trifecta!- regardless of its size and scope. Creating “ducks”, or modularized components, allows you to keep all of your state in one place and avoid creating a new file for every single action and reducer. This talk will cover how to create those ducks!

https://2018.cascadiajs.com/
Captions: 
	00:00:00,840 --> 00:00:09,290
Hello, everyone.

00:00:09,290 --> 00:00:14,610
My name is Lauren Lee and my pronouns are she and her.

00:00:14,610 --> 00:00:25,380
My talk is called why I decided to modularize my ducks in the React app.

00:00:25,380 --> 00:00:33,079
We will talk about good and bad of React, explore some of the problems within Redux

00:00:33,079 --> 00:00:37,800
and I will introduce and propose one possible solution.

00:00:37,800 --> 00:00:41,980
That solution is called ducks.

00:00:41,980 --> 00:00:46,920
My journey to tech was rather unconventional or non-traditional, if you will.

00:00:46,920 --> 00:00:52,700
I didn't study CS in college but instead was an English teacher for seven years before

00:00:52,700 --> 00:00:54,989
embarking on my journey learning to code.

00:00:54,989 --> 00:01:03,360
I spent a lot of time in the classroom lecturing on structure and I mean the five paragraph

00:01:03,360 --> 00:01:10,250
essay, the art of writing an outline, rules of grammar and proper sentence construction.

00:01:10,250 --> 00:01:15,380
Essentially, all things structure when it comes to a high school lit class.

00:01:15,380 --> 00:01:22,560
This combined with the fact I am a Virgo means I really like structure, specifically organized

00:01:22,560 --> 00:01:24,850
structure.

00:01:24,850 --> 00:01:32,049
At Ada developer's academy, a program that trains folks to learn to code here in Seattle

00:01:32,049 --> 00:01:36,139
my peers were giving me a hard time over my color-coded notes.

00:01:36,139 --> 00:01:40,140
In my defense, I just quit my job.

00:01:40,140 --> 00:01:45,239
I had taken this massive risk of learning to code and this sort of stuff stock markets

00:01:45,239 --> 00:01:49,909
me and brings me peace, joy and sanity.

00:01:49,909 --> 00:01:55,509
While learning to code, just like my old classroom, I loved when everything had its place.

00:01:55,509 --> 00:01:57,840
I love a thoughtful organized codebase.

00:01:57,840 --> 00:02:03,079
It genuinely makes me smile.

00:02:03,079 --> 00:02:08,670
Later on down the road when I became a software engineer at Amazon I fell really hard for

00:02:08,670 --> 00:02:09,670
React.

00:02:09,670 --> 00:02:18,370
As I am sure many of us know it has powerful features including the virtual DOM, relative

00:02:18,370 --> 00:02:26,189
quick learning curve, helper developer tools and the reusability of modularized components.

00:02:26,189 --> 00:02:32,700
I have been drawn to the components of the architecture that is the foundation of React.

00:02:32,700 --> 00:02:39,319
I am sure a lot of us are familiar with React so I won't bore by you explaining the intrinsic

00:02:39,319 --> 00:02:40,319
characteristics.

00:02:40,319 --> 00:02:47,219
But I will pause for the moment.

00:02:47,219 --> 00:02:53,519
When you build with React, you create independent and isolated reusable components and compose

00:02:53,519 --> 00:02:57,620
them together to build complex interfaces.

00:02:57,620 --> 00:03:04,370
The former grammar obsessed rule following teachers I am loves the encouraged organization

00:03:04,370 --> 00:03:07,359
and division of components this implies.

00:03:07,359 --> 00:03:14,870
Finding the reusability of -- I find the reusability of the components to be so helpful for engineers

00:03:14,870 --> 00:03:18,739
plus it always makes it easy to find everything within your code.

00:03:18,739 --> 00:03:24,450
Today, I am going to be using a React app that aggregates viewing data to create a most

00:03:24,450 --> 00:03:26,950
binged TV show app.

00:03:26,950 --> 00:03:35,290
This app can be divided the nav, the individual show, and the list view.

00:03:35,290 --> 00:03:41,760
Now, the architecture of this app is relatively straightforward, but we all know that things

00:03:41,760 --> 00:03:45,129
can get complicated really quick.

00:03:45,129 --> 00:03:52,069
Thus developers at this points are often forced to discover the not-so-glamorous parts of

00:03:52,069 --> 00:03:53,890
React.

00:03:53,890 --> 00:03:58,950
Oftentimes we will want to pass data as props around the app quite a bit and React advocates

00:03:58,950 --> 00:04:05,409
for a single directional flow and things get messy when we want data in sync when two or

00:04:05,409 --> 00:04:08,249
more components share that data.

00:04:08,249 --> 00:04:11,790
The source of truth is only in one place.

00:04:11,790 --> 00:04:15,349
React docs encourages us to lift state up.

00:04:15,349 --> 00:04:21,040
If you have two children that need to access the same data and this means putting the data

00:04:21,040 --> 00:04:24,210
in the nearest ancestor of the two components.

00:04:24,210 --> 00:04:29,430
If these two components are very far apart in the tree, the nearest ancestor could be

00:04:29,430 --> 00:04:32,720
at the top level of the component tree.

00:04:32,720 --> 00:04:39,250
To complicate things even more, the immediate components, have absolutely -- may have absolutely

00:04:39,250 --> 00:04:42,500
no use for the props it is being passed.

00:04:42,500 --> 00:04:46,099
They just happen to be stuck in the middle and have to pass it along.

00:04:46,099 --> 00:04:47,750
No, thank you.

00:04:47,750 --> 00:04:53,710
My favorite analogy for this is the idea of me wanting to tell, say, my cousin, a story

00:04:53,710 --> 00:04:58,970
but instead of being able to tell her directly that story I need to tell my aunt.

00:04:58,970 --> 00:05:04,790
That is fine if it is, you know, a little non embarrassing story but say it is about

00:05:04,790 --> 00:05:09,660
something I don't necessarily want to tell my aunt about bummer.

00:05:09,660 --> 00:05:13,240
I still have to pass it through her regardless.

00:05:13,240 --> 00:05:18,080
The top ancestor has to pass data down to several intermediary components along the

00:05:18,080 --> 00:05:25,199
way to get to the property component and just like the game telephone this creates opportunities

00:05:25,199 --> 00:05:29,160
for errors.

00:05:29,160 --> 00:05:35,370
The original story can be muddled and some can get confused as they try to trace the

00:05:35,370 --> 00:05:40,680
props that get passed between the many components.

00:05:40,680 --> 00:05:46,870
To view it another way, one state is being passed up and down and in between the component

00:05:46,870 --> 00:05:51,710
tree, and it is easy to imagine how things could get complicated and to add insult to

00:05:51,710 --> 00:05:58,210
injury, my girl Sandy Mets taught me to fear coupling and that is happening big time between

00:05:58,210 --> 00:06:05,430
components and parents to try to move a parent around would be complicated.

00:06:05,430 --> 00:06:10,830
There is coupling between the components and its parents and between the component's children

00:06:10,830 --> 00:06:13,190
that it is passing props to.

00:06:13,190 --> 00:06:18,449
Thus, to no one surprise, this impacts performance as every update made to the data causes all

00:06:18,449 --> 00:06:23,169
of the children to rerender which causes massive performance and speed issues.

00:06:23,169 --> 00:06:26,230
It is really a balancing act.

00:06:26,230 --> 00:06:30,750
There are many great things React drink brings to the table.

00:06:30,750 --> 00:06:35,759
It is important to find a solution for managing an application state if you are looking to

00:06:35,759 --> 00:06:41,509
build something more complex than a to-do list.

00:06:41,509 --> 00:06:51,310
When we are in the designing phrase of a project, we often, more often than not we want an app

00:06:51,310 --> 00:06:53,569
to be able to scale.

00:06:53,569 --> 00:06:58,860
We want to be able to create something maintainable for many months or years into the future and

00:06:58,860 --> 00:07:04,599
dare I say it be nice to maintain our sanity when it comes to state management which brings

00:07:04,599 --> 00:07:06,750
me to Redux.

00:07:06,750 --> 00:07:11,210
The state container superhero that saves our day.

00:07:11,210 --> 00:07:15,310
Remember the chaos that was the mess of passing data around our components?

00:07:15,310 --> 00:07:18,960
That is what Redux successfully helps you make sense of.

00:07:18,960 --> 00:07:24,830
Redux is a state management tool for JavaScript applications meaning I can pass data, or say

00:07:24,830 --> 00:07:32,009
the embarrassing story about my most recent Bumble escapades to my cousin without telling

00:07:32,009 --> 00:07:33,669
my aunt about it.

00:07:33,669 --> 00:07:40,100
AKA I get to avoid the chaos of that story being bounced around all the components or

00:07:40,100 --> 00:07:46,330
my many crazy uncles just to update or change one of them and this is important because

00:07:46,330 --> 00:07:52,860
of Redux's most important principle: The global store.

00:07:52,860 --> 00:07:53,860
Let's talk about that.

00:07:53,860 --> 00:07:59,280
The big thing to remember is that the entire state of the application is stored in one

00:07:59,280 --> 00:08:06,300
central location called the store meaning that each component of your React app gets

00:08:06,300 --> 00:08:11,389
to have direct access to the state of the application without having to send props down

00:08:11,389 --> 00:08:17,040
to child components or using callback functions to send data back up to a parent.

00:08:17,040 --> 00:08:19,199
That is pretty dreamy.

00:08:19,199 --> 00:08:22,919
Redux provides essential storage that can hold data from anywhere in the application.

00:08:22,919 --> 00:08:29,819
To put it differently, Redux completely eliminates the messy tunneling when you are passing data

00:08:29,819 --> 00:08:36,010
down from a parent to subcomponents and manipulating that.

00:08:36,010 --> 00:08:43,700
Today I am going to add each piece of Redux to my React app to show how that all works

00:08:43,700 --> 00:08:44,700
together.

00:08:44,700 --> 00:08:50,250
So for the app I showed you earlier, you can imagine that each color is a different React

00:08:50,250 --> 00:08:51,280
component.

00:08:51,280 --> 00:08:57,020
Currently, with just React the data in this app flows directionally as so.

00:08:57,020 --> 00:09:04,510
I want to add Redux so that the data transfer and state look more like this referring back

00:09:04,510 --> 00:09:10,270
to the Redux diagram had first thing we have to build is our store.

00:09:10,270 --> 00:09:17,940
It is crucial to remember the store in Redux is like the human brain and absolutely fundamental.

00:09:17,940 --> 00:09:20,810
The state of the whole app lives inside the store.

00:09:20,810 --> 00:09:25,840
To start playing with Redux we should create a store for wrapping up the state.

00:09:25,840 --> 00:09:28,840
Shall we all together?

00:09:28,840 --> 00:09:29,840
OK.

00:09:29,840 --> 00:09:34,600
To get started, we will create a folder and call it Redux.

00:09:34,600 --> 00:09:39,270
Within Redux we will then create a folder for the store.

00:09:39,270 --> 00:09:43,370
Within the store, we will create a file and call it index.js.

00:09:43,370 --> 00:09:50,340
Copy some code and put in there.

00:09:50,340 --> 00:09:55,960
The create store function I have here is the function for creating the Redux store.

00:09:55,960 --> 00:10:02,170
You may pass initial state to create store you don't have to most of the time although

00:10:02,170 --> 00:10:08,380
it can be useful for service side rendering, traditionally the state comes from the reducers

00:10:08,380 --> 00:10:13,851
which is what I will do here as it takes the reducer as the first argument, root reducer

00:10:13,851 --> 00:10:15,990
in our case.

00:10:15,990 --> 00:10:16,990
Wait.

00:10:16,990 --> 00:10:20,390
I haven't explained what reducers do yet.

00:10:20,390 --> 00:10:26,950
I said before that state comes from the reducer what matters now is understanding what reducers

00:10:26,950 --> 00:10:28,820
do.

00:10:28,820 --> 00:10:31,790
Let's go back to our diagram.

00:10:31,790 --> 00:10:37,910
In Redux, the reducers produce the state and the state is not something you create by hand.

00:10:37,910 --> 00:10:41,470
Reducers specify how the application state changes.

00:10:41,470 --> 00:10:46,000
One of the principles of Redux is that the state is immutable and cannot change in place.

00:10:46,000 --> 00:10:51,320
In play and React the local state changes in place with function setstate.

00:10:51,320 --> 00:10:54,760
In Redux, you can't do that.

00:10:54,760 --> 00:10:57,490
A reducer is just a JavaScript function.

00:10:57,490 --> 00:11:03,270
It takes two parameters, the current state and an action, which is why the reducer must

00:11:03,270 --> 00:11:08,490
be pure meaning that it returns the exact same output for the given input.

00:11:08,490 --> 00:11:11,460
Creating a reducer is actually pretty simple.

00:11:11,460 --> 00:11:14,000
So let's do that all together.

00:11:14,000 --> 00:11:20,340
I will pick up where I left off and create another folder and call it reducers.

00:11:20,340 --> 00:11:24,110
Within reducers a file index.js.

00:11:24,110 --> 00:11:32,380
Pop in this code.

00:11:32,380 --> 00:11:34,440
Great.

00:11:34,440 --> 00:11:37,520
The reducer here is sort of a silly one.

00:11:37,520 --> 00:11:40,180
Oh, I am not on the slide.

00:11:40,180 --> 00:11:44,130
This reducer here is sort of a silly one in that it returns the initial state without

00:11:44,130 --> 00:11:49,410
doing anything else but definitely notice how the initial state is passed as the default

00:11:49,410 --> 00:11:50,410
parameter.

00:11:50,410 --> 00:11:51,410
OK.

00:11:51,410 --> 00:11:52,610
We have seen that?

00:11:52,610 --> 00:11:53,610
Good.

00:11:53,610 --> 00:11:57,140
Now, reducers are without a doubt the most important concept in Redux.

00:11:57,140 --> 00:11:58,850
Let me say it again.

00:11:58,850 --> 00:12:04,300
Reducers produce the state of the application but this should then beg the question how

00:12:04,300 --> 00:12:08,410
does a reducer know when to produce the next state?

00:12:08,410 --> 00:12:11,240
Well, that is where actions come in.

00:12:11,240 --> 00:12:16,400
One of the principles of Redux is that the only way you can change the state is by sending

00:12:16,400 --> 00:12:26,430
a signal to the store, the signal is an action and how do you change immutable state?

00:12:26,430 --> 00:12:27,730
You don't.

00:12:27,730 --> 00:12:31,240
Resulting state is a copy of the current state plus the new data.

00:12:31,240 --> 00:12:37,710
You may be thinking whoa, Lauren, that is a lot of data to know, but the reassuring

00:12:37,710 --> 00:12:43,040
thing is that Redux actions are nothing more than just JavaScript objects.

00:12:43,040 --> 00:12:46,000
This is an example of what one might even look like.

00:12:46,000 --> 00:12:47,000
OK.

00:12:47,000 --> 00:12:48,000
You know the drill.

00:12:48,000 --> 00:12:49,460
Let's create a simple action all together.

00:12:49,460 --> 00:12:53,620
Again, we will create a folder.

00:12:53,620 --> 00:12:56,370
Actions.

00:12:56,370 --> 00:13:08,270
File index.js and prop -- plop in it add show here.

00:13:08,270 --> 00:13:12,500
Today I think it will be fun to add the functionality of adding a show.

00:13:12,500 --> 00:13:17,120
Every action requires a type property for describing how the state should change and

00:13:17,120 --> 00:13:20,420
it is really just a string.

00:13:20,420 --> 00:13:25,041
The reducer uses that string to determine how to calculate the next state and you can

00:13:25,041 --> 00:13:29,290
specify a payload, just as I did, if you would like.

00:13:29,290 --> 00:13:33,030
In my example, the payload is a new show.

00:13:33,030 --> 00:13:34,030
OK.

00:13:34,030 --> 00:13:35,030
Back to the diagram.

00:13:35,030 --> 00:13:40,060
Since types are just strings and strings are as we know prone to typos and duplicates it

00:13:40,060 --> 00:13:43,610
is better to have action types declared as constants.

00:13:43,610 --> 00:13:51,080
It is best practice to wrap every action within a function which helps to avoid errors.

00:13:51,080 --> 00:13:57,600
Let's also do that quickly and create a simple action creator all together.

00:13:57,600 --> 00:14:14,160
Again, constants within constants, a file, and quite simple there.

00:14:14,160 --> 00:14:21,000
Next up, I want to open up my actions folder and I am going to now use what we just created.

00:14:21,000 --> 00:14:27,860
I will remove the quotes and of course I will have to import it from a local directory.

00:14:27,860 --> 00:14:34,900
From, I think, I called it constants/action-types.

00:14:34,900 --> 00:14:36,160
Great.

00:14:36,160 --> 00:14:41,000
Now we are using that.

00:14:41,000 --> 00:14:44,930
You all still with me?

00:14:44,930 --> 00:14:45,930
No?

00:14:45,930 --> 00:14:46,930
OK.

00:14:46,930 --> 00:14:52,980
If not, I think it would be important to take the time before we go any further to just

00:14:52,980 --> 00:14:57,500
quickly recap the main Redux concepts we just implemented.

00:14:57,500 --> 00:15:01,600
The Redux store is in charge of orchestrating all of the moving parts.

00:15:01,600 --> 00:15:06,650
All of the state lives in a single immutable object and as soon as the store receives an

00:15:06,650 --> 00:15:12,240
action it triggers as a reducer and the reducer then returns to next state.

00:15:12,240 --> 00:15:18,490
The order sort of goes like this, an action first occurs within a component, say someone

00:15:18,490 --> 00:15:24,040
trying to add a show, or maybe filter the view, see the details or delete a component

00:15:24,040 --> 00:15:30,420
even, then that calls the action into action type which grabs the particular reducer that

00:15:30,420 --> 00:15:35,370
will update and modify the state, and once that state is changed, the view is rerendered

00:15:35,370 --> 00:15:39,010
and that is how Redux works.

00:15:39,010 --> 00:15:40,300
Congrats.

00:15:40,300 --> 00:15:45,970
You now know everything there is to know about how to add Redux to a React app.

00:15:45,970 --> 00:15:53,140
You should feel ready to scale it to an app on your own except... you may have noticed

00:15:53,140 --> 00:16:00,750
that while we were setting up our basic, very simple beginning other Redux app, we had to

00:16:00,750 --> 00:16:04,380
create a bunch of folders and files.

00:16:04,380 --> 00:16:05,720
OK.

00:16:05,720 --> 00:16:06,720
Imagine this.

00:16:06,720 --> 00:16:11,740
You decide to add all of the functionality a traditional app has beyond just adding a

00:16:11,740 --> 00:16:16,520
show maybe you want to filter and edit and delete it.

00:16:16,520 --> 00:16:17,980
Whatever it is.

00:16:17,980 --> 00:16:22,810
If we continue down this path, it would be easy to imagine how things could be messy

00:16:22,810 --> 00:16:28,940
or complicated or confusing quickly because you will then have to edit the constants in

00:16:28,940 --> 00:16:35,530
one file, the reducers in another, the action creators in another, and yet again go back

00:16:35,530 --> 00:16:42,520
and edit the actions so you are pretty much playing tennis, emotionally, physically, everything,

00:16:42,520 --> 00:16:50,760
match over here because just to add one single, small piece of feature functionality equates

00:16:50,760 --> 00:16:54,480
to editing and adding several different files.

00:16:54,480 --> 00:16:57,570
This kind of just gives me a headache.

00:16:57,570 --> 00:17:05,039
This is a way of organizing your Redux by type and that is essentially the most common

00:17:05,039 --> 00:17:11,589
but you end up jumping back and forth for files related to a single piece of functionality

00:17:11,589 --> 00:17:17,699
because the constants action creators are imported to the reducer file and the action

00:17:17,699 --> 00:17:23,100
creator are imported into the container to be dispatched and all that becomes a little

00:17:23,100 --> 00:17:25,529
annoying, wouldn't you agree?

00:17:25,529 --> 00:17:32,610
What I found to be really wild was that there is actually no prescribed one way of organizing

00:17:32,610 --> 00:17:34,270
our Redux files.

00:17:34,270 --> 00:17:40,559
This by-type method, yes, is super common, and it is taught in a ton of tutorials but

00:17:40,559 --> 00:17:42,700
it is obviously sort of flawed.

00:17:42,700 --> 00:17:48,470
My theory is oftentimes when you are first learning about Redux and the roles of actions

00:17:48,470 --> 00:17:52,830
and reducers you start off with a really simple example.

00:17:52,830 --> 00:17:57,090
Most tutorials don't take you to the next level but if you are building something with

00:17:57,090 --> 00:18:02,800
React and Redux that is more complicated than a to-do list you realize quickly you may need

00:18:02,800 --> 00:18:06,399
a smarter way of scaling your codebase over time.

00:18:06,399 --> 00:18:10,490
These actions, constants and reducer are all related but exist in the fractured state and

00:18:10,490 --> 00:18:16,440
switching back and forth from file to file only takes a few seconds.

00:18:16,440 --> 00:18:22,350
I am going to give you that but it can make my head fuzzy and simply put I find it hard

00:18:22,350 --> 00:18:23,350
to maintain.

00:18:23,350 --> 00:18:30,309
Thus, yet again, all my English teacher organizational habits came rushing back to me and I knew

00:18:30,309 --> 00:18:35,559
there had to be a way to be strategic and thoughtful with the organization of my codebases

00:18:35,559 --> 00:18:36,720
architecture.

00:18:36,720 --> 00:18:40,919
I dug into the research on Medium articles knowing there must be something out there

00:18:40,919 --> 00:18:44,540
that would offer peace of mind and I was right.

00:18:44,540 --> 00:18:48,750
There are a lot of ideas out there about it.

00:18:48,750 --> 00:18:53,679
Some people suggested online a solution to the frustration might be to organize your

00:18:53,679 --> 00:19:05,529
code by feature as encapsulating the component and store into a single folder following the

00:19:05,529 --> 00:19:07,620
React component concept.

00:19:07,620 --> 00:19:13,320
This means you would have to tie a slice of the Redux store to a container and that is

00:19:13,320 --> 00:19:19,759
counterintuitive to the core of what Redux promotes.

00:19:19,759 --> 00:19:25,159
Bangladesh to the drawing board I went and further research led me to discover the moment

00:19:25,159 --> 00:19:31,970
you have been waiting for based on the title of this talk ducks to the rescue.

00:19:31,970 --> 00:19:36,289
What are ducks?

00:19:36,289 --> 00:19:48,960
Erik Rasmussen kept needing to add tuples and such for each use case and was keeping

00:19:48,960 --> 00:19:55,269
them in separate files and folders, however, 95% of the time, it is only one reducer and

00:19:55,269 --> 00:20:01,270
action pair that ever needs their associated action thus it makes more sense for all the

00:20:01,270 --> 00:20:08,340
pieces to be bundled into isolated modules that can self-contained and packaged easily

00:20:08,340 --> 00:20:09,590
into a library.

00:20:09,590 --> 00:20:17,960
Ducks is a proposal for bundling reducers, action types and actions into the same file.

00:20:17,960 --> 00:20:26,110
Why would this be the solution to our problem or why get excited about ducks?

00:20:26,110 --> 00:20:29,340
Beyond their adorableness factor.

00:20:29,340 --> 00:20:38,240
Ducks seek to solve the issue of the toggled back and forth repeated feature of splitting

00:20:38,240 --> 00:20:39,240
up.

00:20:39,240 --> 00:20:44,570
We can repackage it into the Redux modules.

00:20:44,570 --> 00:20:49,309
Let's get to the fun part and convert or Redux to ducks, shall we?

00:20:49,309 --> 00:20:50,419
Great.

00:20:50,419 --> 00:20:53,419
Rhetorical, yes, I suppose.

00:20:53,419 --> 00:20:59,399
Remember, our example was trying to create the functionality of adding a show and together

00:20:59,399 --> 00:21:05,340
right now we are going to move the action types, actions and reducers all into one file.

00:21:05,340 --> 00:21:09,840
We will make a folder call it ducks.

00:21:09,840 --> 00:21:18,019
You can call it module but for the fun of it today it will be ducks in a file.

00:21:18,019 --> 00:21:24,740
Let's first grab from the action type -- the constants.

00:21:24,740 --> 00:21:33,700
Let's delete and pull it into our new file and we will add export const and we will have

00:21:33,700 --> 00:21:43,350
to add action types here and add show.

00:21:43,350 --> 00:21:46,059
Great.

00:21:46,059 --> 00:21:51,480
Oh, hello.

00:21:51,480 --> 00:21:54,200
OK.

00:21:54,200 --> 00:21:55,309
And let the deleting begin.

00:21:55,309 --> 00:21:59,570
We get to now delete the constants folder.

00:21:59,570 --> 00:22:01,419
Fantastic.

00:22:01,419 --> 00:22:02,559
Next up is actions.

00:22:02,559 --> 00:22:12,820
We will grab from the actions and bring it into our new file.

00:22:12,820 --> 00:22:26,240
Here we will add actions= this and don't forget you now get to delete the actions folder.

00:22:26,240 --> 00:22:29,460
Bye, actions.

00:22:29,460 --> 00:22:32,960
And last we get to merge in and handle the reducer.

00:22:32,960 --> 00:22:40,799
We will grab all this code and bring it over to the ducks.

00:22:40,799 --> 00:22:47,279
This part is the code that loads the initial state and that will stay as it is.

00:22:47,279 --> 00:22:55,380
I think I want to change this reducer here because currently it does nothing, as I said,

00:22:55,380 --> 00:22:59,419
other than returning the initial state and we can fix that actually, pretty easily, by

00:22:59,419 --> 00:23:10,330
turning it into a switch statement which I have right here.

00:23:10,330 --> 00:23:16,879
Last but not least, let us delete the reducer's folder.

00:23:16,879 --> 00:23:18,240
OK.

00:23:18,240 --> 00:23:26,270
Everyone, right here, in 21 lines of code officially contains all the functionality

00:23:26,270 --> 00:23:28,470
we built up before.

00:23:28,470 --> 00:23:37,779
It runs exactly the same way but it is modularized into a clean doc or ducks for optimized state

00:23:37,779 --> 00:23:40,850
management.

00:23:40,850 --> 00:23:45,240
Remember when we created all of those folders and all these files and it looked something

00:23:45,240 --> 00:23:48,840
like this, messy, messy, messy.

00:23:48,840 --> 00:23:52,360
They were fragmented and separated from one another.

00:23:52,360 --> 00:23:59,450
Compare that mess that that was to this new file which contains all of the same capability

00:23:59,450 --> 00:24:03,420
in a legible fashion and I will call that a win.

00:24:03,420 --> 00:24:06,159
Hopefully, you do too!

00:24:06,159 --> 00:24:14,139
In fact, such a little amount of code that it is able to fit into a single-slide right

00:24:14,139 --> 00:24:15,139
here.

00:24:15,139 --> 00:24:21,049
I have to say it was pretty easy and painless to create even in front of a nerve-wracking

00:24:21,049 --> 00:24:22,049
environment.

00:24:22,049 --> 00:24:25,710
That is the art of duck.

00:24:25,710 --> 00:24:37,419
The art of ducking is structure an app to become more modular.

00:24:37,419 --> 00:24:40,500
It is a sexy buzzword in this community but think about it.

00:24:40,500 --> 00:24:46,809
It is great thing because it is obvious which piece of Redux is handling rich functionality

00:24:46,809 --> 00:24:55,019
and you no longer have to scroll through masses of files before finding the one you are needing

00:24:55,019 --> 00:24:59,360
to work on but this is only one way of structuring your Redux.

00:24:59,360 --> 00:25:00,850
There are plenty of other options.

00:25:00,850 --> 00:25:06,450
The simple fact I am encouraging you to explore the ways to creatively define what structures

00:25:06,450 --> 00:25:18,840
means for you means the structure loving person I once was is leveling up to embrace ambiguity

00:25:18,840 --> 00:25:24,279
and doing whatever is best for your code is the right way.

00:25:24,279 --> 00:25:35,529
Ducks remove boilerplate and can remove a function's functionality to a reducer.

00:25:35,529 --> 00:25:40,869
I have been on dev teams who adopted this structure and we were really happy with it.

00:25:40,869 --> 00:25:41,869
Maybe you will be too.

00:25:41,869 --> 00:25:47,269
In conclusion, I hope you are walking away from this talk feeling React and Redux is

00:25:47,269 --> 00:25:50,610
not so confusing and maybe you were convinced by this duck's organization.

00:25:50,610 --> 00:25:52,899
Thank you for listening.

00:25:52,899 --> 00:25:57,649
My name is Lauren Lee and I would love to hear about your favorite organizational procedures

00:25:57,649 --> 00:26:02,960
or chat further if you have quacky proposals.

00:26:02,960 --> 00:26:06,490
Here is the original GitHub, arrest me to learn more, if you would like it.

00:26:06,490 --> 00:26:06,909

YouTube URL: https://www.youtube.com/watch?v=jr7D4VAzNig


