Title: Conversational Semantics for the Web    Aaron Gustafson    CascadiaJS 2018
Publication date: 2018-12-10
Playlist: CascadiaJS 2018
Description: 
	Over time, your users will become more accustomed to and reliant on voice-based interactions with their computers and, thereby, the web. Enabling them to complete critical tasks without a visual user interface will be crucial for the long-term success of your website. In this session, Aaron Gustafson will discuss how smart markup choices can improve the overall usability and accessibility of your projects without disrupting your current workflow.

https://2018.cascadiajs.com/
Captions: 
	00:00:00,060 --> 00:00:05,339
thank you very much so as Marcy said I'm

00:00:03,330 --> 00:00:08,639
Erin and I'm a web standards and

00:00:05,339 --> 00:00:11,130
accessibility advocate at Microsoft some

00:00:08,639 --> 00:00:13,049
of you who've been around for a bit

00:00:11,130 --> 00:00:15,089
probably know me from my work at a list

00:00:13,049 --> 00:00:17,940
apart I'm currently editor-in-chief

00:00:15,089 --> 00:00:21,210
there I also was a manager of the web

00:00:17,940 --> 00:00:22,199
standards project back in the day but

00:00:21,210 --> 00:00:23,730
today I want to talk about something

00:00:22,199 --> 00:00:25,019
that's kind of near and dear to my heart

00:00:23,730 --> 00:00:28,920
that I'm getting more and more excited

00:00:25,019 --> 00:00:30,449
about so chat BOTS and digital

00:00:28,920 --> 00:00:33,390
assistants are kind of becoming all the

00:00:30,449 --> 00:00:35,700
rage now and most of these if you aren't

00:00:33,390 --> 00:00:38,190
aware work from specially coded data

00:00:35,700 --> 00:00:40,770
sets and models but there's more than

00:00:38,190 --> 00:00:43,200
four and a half billion pages of content

00:00:40,770 --> 00:00:46,850
stored online trapped in many cases

00:00:43,200 --> 00:00:50,489
within our websites articles stories

00:00:46,850 --> 00:00:52,890
blog posts educational materials books

00:00:50,489 --> 00:00:55,649
and marketing messages all on the web

00:00:52,890 --> 00:00:57,480
but for the most part an untapped

00:00:55,649 --> 00:01:01,649
treasure trove of content that could be

00:00:57,480 --> 00:01:03,300
useful in a non-visual context now there

00:01:01,649 --> 00:01:05,369
have been a few projects search engine

00:01:03,300 --> 00:01:07,020
spiders probably most notably that are

00:01:05,369 --> 00:01:10,650
working to turn that often unstructured

00:01:07,020 --> 00:01:12,930
mess into something usable right but we

00:01:10,650 --> 00:01:15,450
can do more a lot more to enable our

00:01:12,930 --> 00:01:18,360
pages to be usable both by real people

00:01:15,450 --> 00:01:21,479
and the computers that power voice based

00:01:18,360 --> 00:01:23,549
user experiences and that's what I'm

00:01:21,479 --> 00:01:26,400
here to talk about I want to release

00:01:23,549 --> 00:01:28,409
that content from the screen and empower

00:01:26,400 --> 00:01:29,579
it to go anywhere and everywhere I want

00:01:28,409 --> 00:01:31,049
it to find its way into virtual

00:01:29,579 --> 00:01:33,090
assistants and other voice response

00:01:31,049 --> 00:01:36,299
technologies and even into voiceless

00:01:33,090 --> 00:01:39,240
chat BOTS without requiring us to code

00:01:36,299 --> 00:01:42,570
and recode over and over again into

00:01:39,240 --> 00:01:44,460
multiple redundant formats I also have a

00:01:42,570 --> 00:01:46,890
dream of enabling our users to actively

00:01:44,460 --> 00:01:49,439
engage with our content by filling in

00:01:46,890 --> 00:01:51,630
forms or manipulating widgets just with

00:01:49,439 --> 00:01:55,380
their voice and this sort of stuff is

00:01:51,630 --> 00:01:58,110
becoming possible specifically I'm here

00:01:55,380 --> 00:02:00,810
to talk to you about how we can use HTML

00:01:58,110 --> 00:02:03,180
and Aria to make our content structured

00:02:00,810 --> 00:02:05,310
sensible and most importantly meaningful

00:02:03,180 --> 00:02:09,479
and it all begins with the humble

00:02:05,310 --> 00:02:12,480
element so consider this M element sure

00:02:09,479 --> 00:02:13,680
it's visibly rendered as italics but it

00:02:12,480 --> 00:02:16,200
also adds emphasis

00:02:13,680 --> 00:02:18,659
to the content within hTML is just

00:02:16,200 --> 00:02:21,510
chock-full of elements like this that

00:02:18,659 --> 00:02:23,670
convey meaning nuance and relationships

00:02:21,510 --> 00:02:25,950
and being aware of these enables us to

00:02:23,670 --> 00:02:28,140
author more expressive documents and

00:02:25,950 --> 00:02:29,640
ignoring them can actually undermine the

00:02:28,140 --> 00:02:32,430
usability of the content that we're

00:02:29,640 --> 00:02:34,170
marking up when we create a webpage we

00:02:32,430 --> 00:02:36,030
need to be mindful of the conversation

00:02:34,170 --> 00:02:38,909
that we're creating with our customers

00:02:36,030 --> 00:02:41,459
in that process and we need to choose

00:02:38,909 --> 00:02:45,810
the elements that we use with intent and

00:02:41,459 --> 00:02:47,340
care one of the best indicators of how

00:02:45,810 --> 00:02:49,049
HTML will make it into our Virtual

00:02:47,340 --> 00:02:51,629
Assistants is another assistive

00:02:49,049 --> 00:02:52,859
technology screen readers write not only

00:02:51,629 --> 00:02:55,049
do screen readers do as their name

00:02:52,859 --> 00:02:57,650
implies but they also enable users to

00:02:55,049 --> 00:03:00,329
rapidly navigate a page in various ways

00:02:57,650 --> 00:03:01,859
and they provide means to translate

00:03:00,329 --> 00:03:04,650
visual design constructs such as

00:03:01,859 --> 00:03:07,829
proximity proportion and so on into

00:03:04,650 --> 00:03:11,400
audible cues at least they do so when we

00:03:07,829 --> 00:03:13,349
author our pages thoughtfully so that

00:03:11,400 --> 00:03:15,180
further ado let's jump into some solid

00:03:13,349 --> 00:03:17,129
examples of how we can create more

00:03:15,180 --> 00:03:20,209
meaningful documents and empower them to

00:03:17,129 --> 00:03:22,199
be more usable in a headless UI context

00:03:20,209 --> 00:03:24,629
we'll start by looking at what are

00:03:22,199 --> 00:03:26,370
called phrasing elements the emphasis

00:03:24,629 --> 00:03:29,220
you saw earlier was an example of this

00:03:26,370 --> 00:03:31,229
and we used to call them inline elements

00:03:29,220 --> 00:03:34,019
because by default they're visibly

00:03:31,229 --> 00:03:35,909
inline text but phrasing is more

00:03:34,019 --> 00:03:39,930
accurate as a description because well

00:03:35,909 --> 00:03:41,909
they mark up phrases right so we saw

00:03:39,930 --> 00:03:44,939
this example earlier here the word

00:03:41,909 --> 00:03:47,819
really is marked up as emphasized now

00:03:44,939 --> 00:03:49,560
when spoken by a virtual assistant heads

00:03:47,819 --> 00:03:51,060
up none of them quite do this yet but

00:03:49,560 --> 00:03:53,040
I've mocked it up with the speech

00:03:51,060 --> 00:03:54,269
synthesis API in JavaScript it could

00:03:53,040 --> 00:03:58,259
sound something like this

00:03:54,269 --> 00:03:59,419
I'm really happy to see you which is

00:03:58,259 --> 00:04:02,040
kind of cool

00:03:59,419 --> 00:04:04,319
now sometimes emphasis is not enough

00:04:02,040 --> 00:04:06,090
when we want to indicate that content is

00:04:04,319 --> 00:04:08,040
very important for our customers to pay

00:04:06,090 --> 00:04:09,720
attention to the strong element is the

00:04:08,040 --> 00:04:12,500
right way to go because strong means

00:04:09,720 --> 00:04:15,810
that something is of strong importance

00:04:12,500 --> 00:04:18,780
now visibly M and strong are displayed

00:04:15,810 --> 00:04:20,370
as italics and bold respectively and in

00:04:18,780 --> 00:04:23,219
the early days of the web when I first

00:04:20,370 --> 00:04:25,200
started out we had the I and B element

00:04:23,219 --> 00:04:26,880
which were rendered exactly the same and

00:04:25,200 --> 00:04:27,480
so many of us just thought they were

00:04:26,880 --> 00:04:30,090
interchange

00:04:27,480 --> 00:04:32,270
Abell and with B&I being shorted or

00:04:30,090 --> 00:04:34,440
right they proliferated on the web

00:04:32,270 --> 00:04:36,170
semantically however these elements are

00:04:34,440 --> 00:04:38,730
quite different from their doppelgangers

00:04:36,170 --> 00:04:40,170
the AI element is similar to the

00:04:38,730 --> 00:04:42,330
emphasis element but it's a bit more

00:04:40,170 --> 00:04:44,700
generic it's used to indicate an

00:04:42,330 --> 00:04:47,160
alternate voice or mood it could be used

00:04:44,700 --> 00:04:49,740
to indicate sarcasm or idiomatic remarks

00:04:47,160 --> 00:04:51,720
or shifts in language so it's a terrible

00:04:49,740 --> 00:04:56,730
movie and it made 200 million go figure

00:04:51,720 --> 00:04:57,870
right now in the second example here you

00:04:56,730 --> 00:04:59,730
might notice that I've indicated a

00:04:57,870 --> 00:05:01,800
language being shifted too from the

00:04:59,730 --> 00:05:03,630
natural language of the document this

00:05:01,800 --> 00:05:05,640
indicator is a simple mechanism that

00:05:03,630 --> 00:05:08,340
could inform a voice synthesizer to

00:05:05,640 --> 00:05:09,330
shift pronunciation here's an example of

00:05:08,340 --> 00:05:11,550
how that might work

00:05:09,330 --> 00:05:15,600
she has admired for her energy and is

00:05:11,550 --> 00:05:17,340
whether the Yvonne not perfect but we

00:05:15,600 --> 00:05:18,840
only have a couple of things that we can

00:05:17,340 --> 00:05:20,160
work with a couple different voices we

00:05:18,840 --> 00:05:22,230
can work with in speech synthesis right

00:05:20,160 --> 00:05:26,520
now but it kind of points at what's

00:05:22,230 --> 00:05:28,830
possible the B element is used for

00:05:26,520 --> 00:05:30,660
content that should be set apart or in

00:05:28,830 --> 00:05:33,180
the parlance of the spec stylistically

00:05:30,660 --> 00:05:35,610
off set but it's of no greater

00:05:33,180 --> 00:05:37,080
importance than the surrounding text so

00:05:35,610 --> 00:05:39,120
I like to use it for the names of people

00:05:37,080 --> 00:05:40,680
or the names of products things that

00:05:39,120 --> 00:05:42,780
would be like keywords within the

00:05:40,680 --> 00:05:44,820
content that I might want to mark up in

00:05:42,780 --> 00:05:47,120
some certain way or might want to

00:05:44,820 --> 00:05:49,620
visually call out in some certain way

00:05:47,120 --> 00:05:51,390
books films and and things like that

00:05:49,620 --> 00:05:53,460
have their own element the site element

00:05:51,390 --> 00:05:55,920
which will see an example of shortly and

00:05:53,460 --> 00:05:58,140
functionally the B element is a lot like

00:05:55,920 --> 00:06:03,270
a span which is for generic phrasing

00:05:58,140 --> 00:06:04,650
content but with a shorter tag now HTML

00:06:03,270 --> 00:06:06,960
has other specialized phrasing

00:06:04,650 --> 00:06:08,850
constructs - such as a abbr for

00:06:06,960 --> 00:06:11,040
abbreviations and acronyms so in this

00:06:08,850 --> 00:06:12,510
case hTML is the standard markup

00:06:11,040 --> 00:06:15,680
language for creating web pages and web

00:06:12,510 --> 00:06:18,210
applications and here I've given a title

00:06:15,680 --> 00:06:20,250
for hypertext markup language which is

00:06:18,210 --> 00:06:23,190
what HTML is an abbreviation for or an

00:06:20,250 --> 00:06:24,690
acronym for rather now sadly as with

00:06:23,190 --> 00:06:28,020
many things on the web

00:06:24,690 --> 00:06:30,480
black hat SEO folks used the title

00:06:28,020 --> 00:06:32,610
element - or the title attribute to put

00:06:30,480 --> 00:06:34,890
all kinds of awful stuff into pages in

00:06:32,610 --> 00:06:36,660
order to boost search engine ranking so

00:06:34,890 --> 00:06:38,580
that basically spurned screen readers to

00:06:36,660 --> 00:06:40,410
stop reading it because this will give

00:06:38,580 --> 00:06:41,200
you a sense of the time people just kept

00:06:40,410 --> 00:06:44,560
putting panel and

00:06:41,200 --> 00:06:46,870
name in there over and over again visual

00:06:44,560 --> 00:06:49,000
browsers still do provide tooltips so

00:06:46,870 --> 00:06:50,370
there is some utility to the title

00:06:49,000 --> 00:06:52,690
attribute they're not completely useless

00:06:50,370 --> 00:06:55,480
but screen readers don't pay attention

00:06:52,690 --> 00:06:57,780
to it and it's pretty unlikely that they

00:06:55,480 --> 00:07:00,730
will be surfaced by a virtual assistant

00:06:57,780 --> 00:07:02,170
to be honest it's probably best unless

00:07:00,730 --> 00:07:05,890
you want that tooltip to just avoid

00:07:02,170 --> 00:07:07,780
using title altogether for the purposes

00:07:05,890 --> 00:07:09,610
of absolute clarity in our content you

00:07:07,780 --> 00:07:11,170
should introduce and explain important

00:07:09,610 --> 00:07:13,150
abbreviations and acronyms the first

00:07:11,170 --> 00:07:14,440
time they're used and there isn't

00:07:13,150 --> 00:07:16,660
there's even an element that actually

00:07:14,440 --> 00:07:18,880
signals that defining context the dfn

00:07:16,660 --> 00:07:21,220
element so in this case hypertext markup

00:07:18,880 --> 00:07:22,840
language and then in parentheses hTML is

00:07:21,220 --> 00:07:26,490
the standard markup language for

00:07:22,840 --> 00:07:28,900
creating web pages and web applications

00:07:26,490 --> 00:07:30,580
finally there's the span element which

00:07:28,900 --> 00:07:31,990
is used for generic phrases it's a

00:07:30,580 --> 00:07:34,240
meaningless element so it wouldn't be

00:07:31,990 --> 00:07:35,530
spoken in any other way differently by

00:07:34,240 --> 00:07:37,120
default there are a bunch of other ones

00:07:35,530 --> 00:07:39,220
but I only have so much time that I can

00:07:37,120 --> 00:07:42,970
talk to y'all so I'm gonna try and keep

00:07:39,220 --> 00:07:44,620
it a keep it brief here links are also

00:07:42,970 --> 00:07:46,420
phrasing elements but I want to call

00:07:44,620 --> 00:07:48,370
them out specifically because they're a

00:07:46,420 --> 00:07:50,710
much richer interface and provide a lot

00:07:48,370 --> 00:07:53,620
more opportunity for fine-tuning how our

00:07:50,710 --> 00:07:55,810
users interact with them the primary way

00:07:53,620 --> 00:07:58,390
we use links of course is to link to

00:07:55,810 --> 00:07:59,590
related content right and it's important

00:07:58,390 --> 00:08:01,690
when we do this to actually choose

00:07:59,590 --> 00:08:04,720
meaningful words and phrases as our link

00:08:01,690 --> 00:08:08,080
text because when assistive technologies

00:08:04,720 --> 00:08:09,250
hit click here or read more that doesn't

00:08:08,080 --> 00:08:12,010
tell them anything about what it is that

00:08:09,250 --> 00:08:13,210
they're actually accessing all right

00:08:12,010 --> 00:08:15,430
those are not useful especially if

00:08:13,210 --> 00:08:17,770
there's several on the page and when

00:08:15,430 --> 00:08:20,050
people skim via those links which I'll

00:08:17,770 --> 00:08:22,510
talk a little bit about shortly that

00:08:20,050 --> 00:08:24,370
gets really painful so in this case I

00:08:22,510 --> 00:08:26,440
wrote the book adaptive web design and

00:08:24,370 --> 00:08:29,350
I've got it in a site element as well as

00:08:26,440 --> 00:08:32,410
an anchor so that's a pretty good

00:08:29,350 --> 00:08:34,240
example of that instead of saying I

00:08:32,410 --> 00:08:37,930
wrote the book adaptive web design click

00:08:34,240 --> 00:08:39,760
here to learn more about it right we can

00:08:37,930 --> 00:08:41,140
also use links and I think that we

00:08:39,760 --> 00:08:42,760
should do this more frequently to

00:08:41,140 --> 00:08:45,070
reference content within the current

00:08:42,760 --> 00:08:47,110
document or even it specifically

00:08:45,070 --> 00:08:49,480
identified places within the document so

00:08:47,110 --> 00:08:50,800
if you if you are referencing a table or

00:08:49,480 --> 00:08:53,380
a figure of some sort

00:08:50,800 --> 00:08:54,950
give that figure an ID so that it can

00:08:53,380 --> 00:08:56,960
actually be linked to from

00:08:54,950 --> 00:08:58,940
than the content of your pages same

00:08:56,960 --> 00:09:00,800
thing for headings please God if you're

00:08:58,940 --> 00:09:02,150
writing something on the web put IDs on

00:09:00,800 --> 00:09:03,770
your headings so that if I want to

00:09:02,150 --> 00:09:05,660
reference something that you've written

00:09:03,770 --> 00:09:07,640
I can actually point to at least the

00:09:05,660 --> 00:09:08,930
section that it's in don't make me just

00:09:07,640 --> 00:09:12,350
go to the generic page and have somebody

00:09:08,930 --> 00:09:15,050
have to hunt for where that quote is you

00:09:12,350 --> 00:09:18,140
can even use them to inform users about

00:09:15,050 --> 00:09:21,560
the language that's in use on a linked

00:09:18,140 --> 00:09:24,080
page using the href Lang attribute so in

00:09:21,560 --> 00:09:27,230
this case it's switching to a Spanish

00:09:24,080 --> 00:09:28,730
version of this page and you can

00:09:27,230 --> 00:09:30,740
indicate the kind of content being

00:09:28,730 --> 00:09:34,520
linked to using the type attribute use

00:09:30,740 --> 00:09:36,680
mime types for that and in a relatively

00:09:34,520 --> 00:09:38,600
new addition to the HTML spec you

00:09:36,680 --> 00:09:40,280
actually have the download keyword which

00:09:38,600 --> 00:09:41,660
can inform the browser that the file in

00:09:40,280 --> 00:09:43,850
question should be downloaded rather

00:09:41,660 --> 00:09:45,650
than presented again it's a simple

00:09:43,850 --> 00:09:48,620
attribute that makes an HTML document

00:09:45,650 --> 00:09:50,210
capable of so much more it's worth

00:09:48,620 --> 00:09:51,680
noting though for the download attribute

00:09:50,210 --> 00:09:54,170
that would be ignored on any

00:09:51,680 --> 00:09:57,680
cross-origin you are eyes so it has to

00:09:54,170 --> 00:10:01,010
be same domain anchor elements also

00:09:57,680 --> 00:10:04,820
support non web pseudo protocols to the

00:10:01,010 --> 00:10:07,220
most common or mailto and tell so email

00:10:04,820 --> 00:10:09,950
and phone numbers but SMS and web quel

00:10:07,220 --> 00:10:11,690
are also quite quite common and some

00:10:09,950 --> 00:10:14,450
operating systems and browsers allow

00:10:11,690 --> 00:10:17,000
installed apps to also register custom

00:10:14,450 --> 00:10:18,980
protocols that serve to access in-app

00:10:17,000 --> 00:10:20,090
functionality but I want to just throw

00:10:18,980 --> 00:10:22,280
it out there that you should be cautious

00:10:20,090 --> 00:10:24,980
about using that approach because if the

00:10:22,280 --> 00:10:26,720
protocol is not recognized then the

00:10:24,980 --> 00:10:28,670
operating system will often prompt the

00:10:26,720 --> 00:10:31,010
user to try and find an app that can

00:10:28,670 --> 00:10:33,530
actually use that which just adds

00:10:31,010 --> 00:10:35,870
friction to the experience there are

00:10:33,530 --> 00:10:38,060
other ways to direct URLs into

00:10:35,870 --> 00:10:41,600
applications so I recommend looking into

00:10:38,060 --> 00:10:43,250
those now all this phrasing contents

00:10:41,600 --> 00:10:45,740
great but I've spent a little while in

00:10:43,250 --> 00:10:47,690
the weeds the minutia and I want to kind

00:10:45,740 --> 00:10:49,490
of pull back and look at documents

00:10:47,690 --> 00:10:51,110
themselves because I need to I think we

00:10:49,490 --> 00:10:53,030
need to think about how we author are

00:10:51,110 --> 00:10:56,330
our documents and our web pages on the

00:10:53,030 --> 00:10:58,310
whole now as you're probably aware

00:10:56,330 --> 00:11:00,980
headless you eyes place a greater

00:10:58,310 --> 00:11:02,210
cognitive load on our users it's hard to

00:11:00,980 --> 00:11:03,920
keep track of where you are in an

00:11:02,210 --> 00:11:05,510
interface and it can be even more

00:11:03,920 --> 00:11:07,340
challenging to move around when you

00:11:05,510 --> 00:11:09,520
can't gather information about the

00:11:07,340 --> 00:11:12,950
interface from visual

00:11:09,520 --> 00:11:15,020
and the more complex and interfaces the

00:11:12,950 --> 00:11:16,880
more challenging this becomes now the

00:11:15,020 --> 00:11:18,440
same is true in visual interfaces too

00:11:16,880 --> 00:11:20,960
which is why mobile first was such a

00:11:18,440 --> 00:11:22,940
great boon for us because it told us we

00:11:20,960 --> 00:11:24,680
needed to focus our pages on on single

00:11:22,940 --> 00:11:27,470
tasks and helping users to accomplish

00:11:24,680 --> 00:11:30,080
those things it reduced the noise and

00:11:27,470 --> 00:11:31,670
raised the signal but most webpages I

00:11:30,080 --> 00:11:33,560
think you'd probably agree are the

00:11:31,670 --> 00:11:36,500
antithesis of clear and straightforward

00:11:33,560 --> 00:11:40,100
as our screen sizes enlarge we just keep

00:11:36,500 --> 00:11:42,950
shoving stuff into that space sharing

00:11:40,100 --> 00:11:44,990
links related content cross promotions

00:11:42,950 --> 00:11:47,270
and so on sometimes it's easy to lose

00:11:44,990 --> 00:11:51,050
sight of what is actually the content of

00:11:47,270 --> 00:11:52,820
the page to combat this screen readers

00:11:51,050 --> 00:11:54,320
provide numerous mechanisms that enable

00:11:52,820 --> 00:11:55,790
users to gather information about the

00:11:54,320 --> 00:11:58,520
current interface and then move

00:11:55,790 --> 00:11:59,780
efficiently through it to find the bit

00:11:58,520 --> 00:12:01,550
that's most relevant to them in the

00:11:59,780 --> 00:12:03,440
current moment so one mechanism

00:12:01,550 --> 00:12:05,750
available for skimming a document

00:12:03,440 --> 00:12:07,850
involves moving the focus caret from one

00:12:05,750 --> 00:12:09,530
interactive element to another now

00:12:07,850 --> 00:12:11,750
traditionally that movements done via

00:12:09,530 --> 00:12:14,000
the keyboard via the tab key but it can

00:12:11,750 --> 00:12:17,960
also be done via voice by saying next or

00:12:14,000 --> 00:12:19,700
previous or similar commands now in most

00:12:17,960 --> 00:12:21,710
documents this means moving from link to

00:12:19,700 --> 00:12:23,630
link which are shown here in green and

00:12:21,710 --> 00:12:25,490
supporting skimming in this way makes

00:12:23,630 --> 00:12:27,680
the the text that we choose for links

00:12:25,490 --> 00:12:30,410
even more critical in ensuring that our

00:12:27,680 --> 00:12:32,810
users get a good experience for Mela

00:12:30,410 --> 00:12:34,100
mints and buttons are also focusable and

00:12:32,810 --> 00:12:37,070
I'll talk a little bit more about forms

00:12:34,100 --> 00:12:39,020
towards the end of the session now you

00:12:37,070 --> 00:12:41,150
can add elements that would not

00:12:39,020 --> 00:12:43,330
traditionally be focusable into the tab

00:12:41,150 --> 00:12:46,580
order by adding a tabindex attribute

00:12:43,330 --> 00:12:48,200
with a value of zero that's very

00:12:46,580 --> 00:12:51,440
important to only do zero or negative

00:12:48,200 --> 00:12:53,330
one never go over zero but this ensures

00:12:51,440 --> 00:12:55,550
that critical interface components are

00:12:53,330 --> 00:12:58,400
not accidentally bypassed by users who

00:12:55,550 --> 00:13:00,589
are using tabbing to move through an

00:12:58,400 --> 00:13:03,020
interface and incidentally it also

00:13:00,589 --> 00:13:06,170
enables sighted users to interact and

00:13:03,020 --> 00:13:08,360
scroll elements via the keyboard so if

00:13:06,170 --> 00:13:09,830
you have a scrollable div or something

00:13:08,360 --> 00:13:11,420
like that somebody who's using a

00:13:09,830 --> 00:13:14,900
keyboard can actually scroll that even

00:13:11,420 --> 00:13:16,760
if they're sighted now another

00:13:14,900 --> 00:13:18,680
navigational mechanism is browsing by

00:13:16,760 --> 00:13:20,839
heading the various heading levels in

00:13:18,680 --> 00:13:22,880
HTML create a natural document outline

00:13:20,839 --> 00:13:24,740
and assistive technologies can enable

00:13:22,880 --> 00:13:27,230
users to skim content using these

00:13:24,740 --> 00:13:28,880
headings since only the contents of the

00:13:27,230 --> 00:13:30,920
heading elements are read out loud in

00:13:28,880 --> 00:13:33,290
this mode I highly recommend that you

00:13:30,920 --> 00:13:34,670
avoid using cutesy marketing phrases and

00:13:33,290 --> 00:13:38,240
stick to just summarizing what the

00:13:34,670 --> 00:13:39,440
contents are of each section and then

00:13:38,240 --> 00:13:41,000
the final way users can traverse

00:13:39,440 --> 00:13:43,610
documents is via what are called

00:13:41,000 --> 00:13:45,410
landmarks so the concept of landmarks

00:13:43,610 --> 00:13:47,750
surfaced in the development of the Aria

00:13:45,410 --> 00:13:49,910
spec and the idea is that you could use

00:13:47,750 --> 00:13:51,800
the the role attribute to define

00:13:49,910 --> 00:13:55,280
specific regions of the page based on

00:13:51,800 --> 00:13:56,720
their function now in the example I have

00:13:55,280 --> 00:13:58,310
up on the screen here the author is

00:13:56,720 --> 00:14:01,459
isolating their navigation in a div

00:13:58,310 --> 00:14:03,709
element with our ID of nav now that

00:14:01,459 --> 00:14:05,959
might be meaningful to us as front end

00:14:03,709 --> 00:14:08,330
designers and developers because we we

00:14:05,959 --> 00:14:10,310
know that nav means navigation but it's

00:14:08,330 --> 00:14:13,610
not exposed to assistive technology as

00:14:10,310 --> 00:14:17,150
navigation when we explicitly add a roll

00:14:13,610 --> 00:14:19,339
of navigation to that div however that

00:14:17,150 --> 00:14:22,250
function gets made explicit to assistive

00:14:19,339 --> 00:14:23,540
technology and there are a ton of roles

00:14:22,250 --> 00:14:25,700
one out of time there's a there's a

00:14:23,540 --> 00:14:27,650
handful of roles that are landmarks and

00:14:25,700 --> 00:14:30,650
I'm going to show you a couple of these

00:14:27,650 --> 00:14:32,780
in action if you have not checked it out

00:14:30,650 --> 00:14:33,350
24 ways I think it's twenty four ways

00:14:32,780 --> 00:14:35,060
org

00:14:33,350 --> 00:14:36,680
twenty four ways to impress your friends

00:14:35,060 --> 00:14:38,810
it's an advent calendar for web

00:14:36,680 --> 00:14:40,970
professionals and it's a magazine but

00:14:38,810 --> 00:14:42,860
it's highly interactive and it's very

00:14:40,970 --> 00:14:44,630
accessible and they actually use

00:14:42,860 --> 00:14:48,380
landmarks to identify all of the key

00:14:44,630 --> 00:14:52,010
areas of a page such as the primary

00:14:48,380 --> 00:14:55,400
header or the banner of a site the main

00:14:52,010 --> 00:14:58,160
content of their site the content

00:14:55,400 --> 00:15:00,200
concerned with easing navigation through

00:14:58,160 --> 00:15:02,030
the site and information about the

00:15:00,200 --> 00:15:06,140
content such as copyright designations

00:15:02,030 --> 00:15:08,630
and here's how users in a non visual

00:15:06,140 --> 00:15:11,380
context can actually experience that may

00:15:08,630 --> 00:15:13,790
unlock 2015 heading level long

00:15:11,380 --> 00:15:16,810
navigation I'm not browse 24 based

00:15:13,790 --> 00:15:21,339
heading level 1 Sun factor 24 ways

00:15:16,810 --> 00:15:23,810
content info not copyright 2005 2006 T

00:15:21,339 --> 00:15:25,490
so landmarks also give users the

00:15:23,810 --> 00:15:27,079
opportunity to jump directly to a

00:15:25,490 --> 00:15:30,110
location with an interface which is

00:15:27,079 --> 00:15:31,940
incredibly helpful in a voice context a

00:15:30,110 --> 00:15:34,339
user might be able to ask the assistant

00:15:31,940 --> 00:15:37,370
to read me the navigation for this pay

00:15:34,339 --> 00:15:39,110
or search for way baby wooden baby toys

00:15:37,370 --> 00:15:41,360
and the assistant could use these

00:15:39,110 --> 00:15:43,759
landmarks to quickly respond to those

00:15:41,360 --> 00:15:46,610
commands all without any additional

00:15:43,759 --> 00:15:49,430
programming now it's worth noting that

00:15:46,610 --> 00:15:51,139
many of these roles these landmark roles

00:15:49,430 --> 00:15:53,269
have equivalent HTML tags and that's

00:15:51,139 --> 00:15:55,160
because html5 and Aria were being

00:15:53,269 --> 00:15:57,230
developed at the same time and sought to

00:15:55,160 --> 00:16:00,740
to solve some of the same issues and

00:15:57,230 --> 00:16:02,930
limitations of the web at the time so

00:16:00,740 --> 00:16:04,699
banner is automatically assigned to the

00:16:02,930 --> 00:16:06,889
first header element that you use that's

00:16:04,699 --> 00:16:09,350
not contained inside of a sectioning

00:16:06,889 --> 00:16:11,930
element navigation is automatically

00:16:09,350 --> 00:16:13,880
assigned to nav main is automatically

00:16:11,930 --> 00:16:16,730
assigned to main complementary is

00:16:13,880 --> 00:16:18,380
assigned to aside elements and content

00:16:16,730 --> 00:16:20,240
info is assigned to the first footer

00:16:18,380 --> 00:16:24,680
that is not inside of a sectioning

00:16:20,240 --> 00:16:26,750
element one last bit I want to touch on

00:16:24,680 --> 00:16:30,079
before I discussed forums is the div

00:16:26,750 --> 00:16:32,269
element we often see divs employed in

00:16:30,079 --> 00:16:34,670
web pages when designers want to group

00:16:32,269 --> 00:16:36,440
related elements together or they just

00:16:34,670 --> 00:16:38,329
don't like the natives excuse me the

00:16:36,440 --> 00:16:42,350
native styling of a particular control

00:16:38,329 --> 00:16:45,019
like a button now organizing content

00:16:42,350 --> 00:16:46,579
using divs is okay but divs are

00:16:45,019 --> 00:16:48,410
meaningless elements and they add

00:16:46,579 --> 00:16:51,439
nothing to the interface in terms of

00:16:48,410 --> 00:16:53,360
context by contrast there are many

00:16:51,439 --> 00:16:57,110
organizational elements that do add a

00:16:53,360 --> 00:17:00,079
ton of context for our users things like

00:16:57,110 --> 00:17:02,810
paragraphs things like lists description

00:17:00,079 --> 00:17:04,909
lists which are vastly underused figures

00:17:02,810 --> 00:17:06,709
Figg captions and then in terms of

00:17:04,909 --> 00:17:08,510
grander stuff we've got articles

00:17:06,709 --> 00:17:12,380
sections headers and footers which I've

00:17:08,510 --> 00:17:13,970
mentioned nav and aside there are a ton

00:17:12,380 --> 00:17:16,100
of meaningful elements out there that

00:17:13,970 --> 00:17:19,130
can enable our assistants to do more for

00:17:16,100 --> 00:17:21,380
our customers and the more we use them

00:17:19,130 --> 00:17:24,500
the more useful our assistants become

00:17:21,380 --> 00:17:26,120
and the more powerful our users feel for

00:17:24,500 --> 00:17:27,860
instance using article and heading

00:17:26,120 --> 00:17:29,720
elements can actually enable voice

00:17:27,860 --> 00:17:31,220
commands like readme all the news

00:17:29,720 --> 00:17:33,230
headlines on the front page of the New

00:17:31,220 --> 00:17:35,990
York Times without involving any sort of

00:17:33,230 --> 00:17:39,650
specialized data feed the generic div

00:17:35,990 --> 00:17:42,799
gets you none of these benefits as you

00:17:39,650 --> 00:17:44,540
see HTML has a lot to offer in terms of

00:17:42,799 --> 00:17:46,190
enabling our interfaces to operate

00:17:44,540 --> 00:17:48,350
effectively in the world of headless

00:17:46,190 --> 00:17:50,390
UI's beyond just content

00:17:48,350 --> 00:17:52,190
though it has the capacity to streamline

00:17:50,390 --> 00:17:54,530
interactivity such as the kind we see in

00:17:52,190 --> 00:17:56,600
forms now forms can be a bit of a

00:17:54,530 --> 00:17:58,160
necessary evil we need them in order to

00:17:56,600 --> 00:18:00,260
gather information in the service of our

00:17:58,160 --> 00:18:03,049
users but often they're poorly planned

00:18:00,260 --> 00:18:04,880
and even more poorly executed which

00:18:03,049 --> 00:18:06,799
leads to poor user experience for all of

00:18:04,880 --> 00:18:09,410
our users regardless of how they're

00:18:06,799 --> 00:18:11,990
interacting with that form thankfully

00:18:09,410 --> 00:18:14,660
HTML has our backs thereto enabling us

00:18:11,990 --> 00:18:16,100
to make necessary Corrections or

00:18:14,660 --> 00:18:18,500
necessary connections in order to

00:18:16,100 --> 00:18:20,570
clarify the purpose of a forum and

00:18:18,500 --> 00:18:21,830
expedite the completion process but

00:18:20,570 --> 00:18:24,710
let's start with something simple field

00:18:21,830 --> 00:18:26,780
labels so while it can be seemed

00:18:24,710 --> 00:18:28,640
perfectly reasonable to mark up form

00:18:26,780 --> 00:18:31,010
fields like this with text and then an

00:18:28,640 --> 00:18:33,080
input below it there's no Association of

00:18:31,010 --> 00:18:35,870
the question what's your first name with

00:18:33,080 --> 00:18:38,000
the text field that follows to create

00:18:35,870 --> 00:18:40,039
that Association you need to use a label

00:18:38,000 --> 00:18:42,080
element that will ensure the label can

00:18:40,039 --> 00:18:44,030
be read by assistive technology when the

00:18:42,080 --> 00:18:46,130
field is focused and labels can be

00:18:44,030 --> 00:18:49,809
associated in one of two ways either

00:18:46,130 --> 00:18:52,700
explicitly or implicitly so explicit

00:18:49,809 --> 00:18:54,919
relies on using the for attribute which

00:18:52,700 --> 00:18:57,590
is an ID reference to the field that's

00:18:54,919 --> 00:19:00,500
associated with it with it so you see

00:18:57,590 --> 00:19:03,020
the foreign ID there in teal and they

00:19:00,500 --> 00:19:04,460
need to match implicit Association

00:19:03,020 --> 00:19:07,700
relies on the label element actually

00:19:04,460 --> 00:19:11,539
containing both the label text and the

00:19:07,700 --> 00:19:14,330
field itself you can combine these two

00:19:11,539 --> 00:19:15,890
approaches but generally explicit

00:19:14,330 --> 00:19:20,510
Association is the simplest and clearest

00:19:15,890 --> 00:19:22,460
choice for most interfaces now once you

00:19:20,510 --> 00:19:24,830
have a good label it's time to turn your

00:19:22,460 --> 00:19:27,020
attention to the field itself and the

00:19:24,830 --> 00:19:28,940
type of field that we're using there are

00:19:27,020 --> 00:19:30,230
a bunch of options available in HTML now

00:19:28,940 --> 00:19:32,870
and it's important to choose the right

00:19:30,230 --> 00:19:34,520
one for each job so if you're just

00:19:32,870 --> 00:19:36,650
looking for a simple response from a

00:19:34,520 --> 00:19:38,539
user the text field or you could even

00:19:36,650 --> 00:19:40,600
leave off the type if you want to

00:19:38,539 --> 00:19:43,940
because text is the default input type

00:19:40,600 --> 00:19:45,500
that's gonna be your go-to but if you're

00:19:43,940 --> 00:19:47,510
asking for somebody's email address

00:19:45,500 --> 00:19:49,640
there's a specific field type for that

00:19:47,510 --> 00:19:51,860
it looks like a text field in terms of

00:19:49,640 --> 00:19:54,289
its visual display but browsers that

00:19:51,860 --> 00:19:56,210
understand type equals email can also

00:19:54,289 --> 00:19:57,799
validate that field for you

00:19:56,210 --> 00:20:01,309
automatically without involving any

00:19:57,799 --> 00:20:02,200
JavaScript but if a browser doesn't

00:20:01,309 --> 00:20:05,680
understand the age

00:20:02,200 --> 00:20:07,480
Millfield type of email that's okay the

00:20:05,680 --> 00:20:10,150
field will simply revert to being a text

00:20:07,480 --> 00:20:11,740
field and you can and and should still

00:20:10,150 --> 00:20:13,120
be validating to see if it's a valid

00:20:11,740 --> 00:20:15,310
email address either on the client side

00:20:13,120 --> 00:20:17,890
or the server side we'll discuss that

00:20:15,310 --> 00:20:19,090
stephannie in a moment but this is a

00:20:17,890 --> 00:20:20,200
perfect example of progressive

00:20:19,090 --> 00:20:22,120
enhancement which is a topic that's

00:20:20,200 --> 00:20:24,430
quite near and dear to my heart so much

00:20:22,120 --> 00:20:26,530
so that I've I've written two books now

00:20:24,430 --> 00:20:28,780
on progressive enhancement both called

00:20:26,530 --> 00:20:30,850
adaptive web design the first edition is

00:20:28,780 --> 00:20:32,380
actually free to read online it is

00:20:30,850 --> 00:20:33,400
available as a progressive web app so

00:20:32,380 --> 00:20:35,050
you can even install it to your home

00:20:33,400 --> 00:20:36,760
screen if you want to read it over time

00:20:35,050 --> 00:20:40,180
and then the second edition just came

00:20:36,760 --> 00:20:43,390
out relatively recently but back to

00:20:40,180 --> 00:20:45,040
inputs so we have the email we also have

00:20:43,390 --> 00:20:46,690
the input type URL this is another

00:20:45,040 --> 00:20:49,900
common one that we often have to do

00:20:46,690 --> 00:20:52,300
especially in social contexts and as

00:20:49,900 --> 00:20:53,740
with the email field type browsers can

00:20:52,300 --> 00:20:56,080
handle validation for you on this

00:20:53,740 --> 00:20:58,650
automatically which is pretty cool and

00:20:56,080 --> 00:21:00,910
in both cases in both of those instances

00:20:58,650 --> 00:21:02,920
visual browsers that have a virtual

00:21:00,910 --> 00:21:04,870
keyboard can actually provide a

00:21:02,920 --> 00:21:07,540
specialized keyboard that can enable

00:21:04,870 --> 00:21:09,550
sighted users to more quickly enter that

00:21:07,540 --> 00:21:10,750
information there are a ton of other

00:21:09,550 --> 00:21:12,070
field types I could talk about but

00:21:10,750 --> 00:21:13,750
there's again there's only so much time

00:21:12,070 --> 00:21:17,620
here and there's a lot more I want to

00:21:13,750 --> 00:21:19,870
cover so UX design is concerned with

00:21:17,620 --> 00:21:22,150
reducing friction of accomplishing tasks

00:21:19,870 --> 00:21:23,830
right so as such we should look for

00:21:22,150 --> 00:21:26,920
every opportunity to do that in our

00:21:23,830 --> 00:21:28,600
forms so consider this form construct

00:21:26,920 --> 00:21:31,120
which is asking for a u.s. phone number

00:21:28,600 --> 00:21:33,190
if this is a fairly common thing instead

00:21:31,120 --> 00:21:34,930
of a single field enabling a user to

00:21:33,190 --> 00:21:36,460
continuously type their phone number the

00:21:34,930 --> 00:21:39,580
designers chose to break it apart into

00:21:36,460 --> 00:21:41,620
three separate fields they probably did

00:21:39,580 --> 00:21:43,690
this to ensure consistent number

00:21:41,620 --> 00:21:45,430
formatting right to make sure that every

00:21:43,690 --> 00:21:48,910
number came back in the same format but

00:21:45,430 --> 00:21:50,440
really that's a back-end problem right

00:21:48,910 --> 00:21:52,590
you want to sanitize that information

00:21:50,440 --> 00:21:55,180
when you receive it from the customer

00:21:52,590 --> 00:21:56,560
because going down this path the

00:21:55,180 --> 00:21:58,510
designers have placed the burden on the

00:21:56,560 --> 00:22:00,970
users rather than the developers and the

00:21:58,510 --> 00:22:02,440
experience actually suffers for it sure

00:22:00,970 --> 00:22:04,300
you can write some JavaScript that will

00:22:02,440 --> 00:22:04,840
auto auto advance you from field to

00:22:04,300 --> 00:22:06,610
field

00:22:04,840 --> 00:22:08,650
but without JavaScript users have to do

00:22:06,610 --> 00:22:10,660
it manually and even if there is

00:22:08,650 --> 00:22:12,340
JavaScript available and they get that

00:22:10,660 --> 00:22:14,080
enhancement it can limit the ability the

00:22:12,340 --> 00:22:16,650
user's ability to edit one of these

00:22:14,080 --> 00:22:18,730
fields if they make a mistake

00:22:16,650 --> 00:22:21,340
furthermore when it comes to using this

00:22:18,730 --> 00:22:24,580
interface via voice users are required

00:22:21,340 --> 00:22:26,910
to supply three separate values not only

00:22:24,580 --> 00:22:29,140
that each field then requires a label

00:22:26,910 --> 00:22:31,540
most developers are only going to know

00:22:29,140 --> 00:22:33,640
how to label one of those three the area

00:22:31,540 --> 00:22:35,470
code and actual users would probably be

00:22:33,640 --> 00:22:39,820
baffled if you ask them for their

00:22:35,470 --> 00:22:41,290
central office code or line number for

00:22:39,820 --> 00:22:42,940
all these reasons it just makes sense to

00:22:41,290 --> 00:22:44,920
work with eight what HTML gives us

00:22:42,940 --> 00:22:47,110
there's a field for telephone numbers

00:22:44,920 --> 00:22:48,940
input type equals tell it doesn't

00:22:47,110 --> 00:22:51,940
validate because there are too many

00:22:48,940 --> 00:22:55,630
international phone number formats but

00:22:51,940 --> 00:22:57,970
that's okay it's inconsequential for us

00:22:55,630 --> 00:22:59,650
to actually write the code to sanitize

00:22:57,970 --> 00:23:01,330
and homogenized structured information

00:22:59,650 --> 00:23:03,070
like phone numbers and Social Security

00:23:01,330 --> 00:23:04,540
numbers and the like and honestly we

00:23:03,070 --> 00:23:07,990
should be writing that code anyway

00:23:04,540 --> 00:23:09,690
because you can't trust the client even

00:23:07,990 --> 00:23:12,040
if you enforce the structure and

00:23:09,690 --> 00:23:14,020
inconsistent consistency with JavaScript

00:23:12,040 --> 00:23:15,700
on the front end we can still end up

00:23:14,020 --> 00:23:17,700
with bad data coming in to the back end

00:23:15,700 --> 00:23:19,930
we'll come back to that idea in a moment

00:23:17,700 --> 00:23:21,400
now forms can be incredibly frustrating

00:23:19,930 --> 00:23:23,620
to fill out especially if they're

00:23:21,400 --> 00:23:25,690
particularly long as designers were

00:23:23,620 --> 00:23:28,270
tasked with reducing user frustration

00:23:25,690 --> 00:23:29,890
and errors happen right it's a fact of

00:23:28,270 --> 00:23:32,670
life but we can help our users avoid

00:23:29,890 --> 00:23:35,980
errors by taking a few simple steps

00:23:32,670 --> 00:23:37,810
first of all most browsers allow users

00:23:35,980 --> 00:23:40,690
to store information to be auto filled

00:23:37,810 --> 00:23:42,070
into forms some watch for common data to

00:23:40,690 --> 00:23:44,590
be filled in and then prompt the user to

00:23:42,070 --> 00:23:46,450
save it to be auto filled later some

00:23:44,590 --> 00:23:48,310
even goes so far as to take the values

00:23:46,450 --> 00:23:51,070
you enter along with the corresponding

00:23:48,310 --> 00:23:52,960
name or ID attributes that are on that

00:23:51,070 --> 00:23:55,300
field and they'll prompt you to fill in

00:23:52,960 --> 00:23:58,150
that same information later on when they

00:23:55,300 --> 00:23:59,440
encounter that same name or ID for this

00:23:58,150 --> 00:24:01,840
reason it makes sense to turn

00:23:59,440 --> 00:24:03,220
autocomplete off for any fields that

00:24:01,840 --> 00:24:04,930
deal with sensitive information like

00:24:03,220 --> 00:24:08,530
passport numbers credit cards and the

00:24:04,930 --> 00:24:11,230
like it used to be that all we had was

00:24:08,530 --> 00:24:13,390
on and off though and we've actually

00:24:11,230 --> 00:24:15,190
been granted a bunch of new values that

00:24:13,390 --> 00:24:17,020
allow us to get very granular about the

00:24:15,190 --> 00:24:19,660
sort of information we're expecting to

00:24:17,020 --> 00:24:22,360
be auto-completed into these fields and

00:24:19,660 --> 00:24:23,560
there are a ton of tokens for doing this

00:24:22,360 --> 00:24:25,500
I'm not going to get into all of these

00:24:23,560 --> 00:24:28,210
but I will walk you through an example

00:24:25,500 --> 00:24:28,700
here I've got a question is there a

00:24:28,210 --> 00:24:30,350
mobile

00:24:28,700 --> 00:24:33,139
we can reach you on regarding delivery

00:24:30,350 --> 00:24:35,989
so in this case we're doing an

00:24:33,139 --> 00:24:37,279
autocomplete of shipping mobile tell so

00:24:35,989 --> 00:24:38,690
we've got three modifiers they were

00:24:37,279 --> 00:24:40,519
asking for a telephone number that's

00:24:38,690 --> 00:24:41,659
associated with shipping right a mobile

00:24:40,519 --> 00:24:44,059
telephone number thus associated with

00:24:41,659 --> 00:24:47,269
shipping so we've actually got some

00:24:44,059 --> 00:24:51,769
direct connections between the label and

00:24:47,269 --> 00:24:53,840
the autocomplete tokens we're using as

00:24:51,769 --> 00:24:55,639
I'm sure you can imagine the sort of

00:24:53,840 --> 00:24:57,320
affordance can do a ton to reduce the

00:24:55,639 --> 00:24:58,279
friction of filling in forms and if

00:24:57,320 --> 00:25:01,009
you're keen to learn more about these

00:24:58,279 --> 00:25:03,679
autofill tokens Jason Grigsby who works

00:25:01,009 --> 00:25:06,619
at cloud four down in Portland he wrote

00:25:03,679 --> 00:25:07,999
a very lengthy piece about these on the

00:25:06,619 --> 00:25:12,289
cloud floor blog so I highly recommend

00:25:07,999 --> 00:25:14,299
checking that out so we can help users

00:25:12,289 --> 00:25:16,730
fill out form fields more quickly but

00:25:14,299 --> 00:25:18,769
what about everything else well first of

00:25:16,730 --> 00:25:21,080
all we should always let users know when

00:25:18,769 --> 00:25:23,389
a field is required a common approach is

00:25:21,080 --> 00:25:24,950
to provide a visual indicator if not all

00:25:23,389 --> 00:25:27,409
of the fields on the form are required

00:25:24,950 --> 00:25:29,809
and obviously it would be best to avoid

00:25:27,409 --> 00:25:31,580
the situation altogether and only have

00:25:29,809 --> 00:25:32,899
required fields in the form then you

00:25:31,580 --> 00:25:35,929
could simply introduce it saying all

00:25:32,899 --> 00:25:38,389
fields are required regardless of the

00:25:35,929 --> 00:25:40,190
way you go however the required

00:25:38,389 --> 00:25:42,080
attribute should be used in order to

00:25:40,190 --> 00:25:43,970
ensure modern browsers can't allow a

00:25:42,080 --> 00:25:46,460
user to submit a form when the field is

00:25:43,970 --> 00:25:48,230
empty and then you use the Aria required

00:25:46,460 --> 00:25:50,590
attribute to actually inform assistive

00:25:48,230 --> 00:25:52,460
technology that the field is required

00:25:50,590 --> 00:25:54,529
unfortunately browsers don't map them

00:25:52,460 --> 00:25:57,200
automatically you should also provide

00:25:54,529 --> 00:25:59,809
helpful hints to users in order to help

00:25:57,200 --> 00:26:01,970
them avoid issues before they encounter

00:25:59,809 --> 00:26:04,159
them so here we're asking for a complex

00:26:01,970 --> 00:26:06,340
pattern for a delta flight number with

00:26:04,159 --> 00:26:09,769
DL followed by two or more numbers and

00:26:06,340 --> 00:26:11,600
so I am giving a placeholder to indicate

00:26:09,769 --> 00:26:13,100
the sort of content that I want and then

00:26:11,600 --> 00:26:15,109
I have the pattern attribute which is

00:26:13,100 --> 00:26:19,690
actually creating the regular expression

00:26:15,109 --> 00:26:19,690
to validate against for the browser

00:26:20,019 --> 00:26:24,769
round trips to the server expensive so

00:26:22,789 --> 00:26:26,570
especially on flaky networks so we want

00:26:24,769 --> 00:26:28,309
to help our users avoid these things by

00:26:26,570 --> 00:26:30,499
doing validation in the browser as much

00:26:28,309 --> 00:26:33,409
as we can and we can rely on these tools

00:26:30,499 --> 00:26:35,570
in order to do that so it starts with

00:26:33,409 --> 00:26:37,249
the required attribute so that we don't

00:26:35,570 --> 00:26:39,499
have empty fields being submitted if we

00:26:37,249 --> 00:26:41,389
need them and then it comes to choosing

00:26:39,499 --> 00:26:42,440
the right field type as I mentioned so

00:26:41,389 --> 00:26:45,019
that we get native valid

00:26:42,440 --> 00:26:46,519
if we can and then we can fall back to

00:26:45,019 --> 00:26:50,360
the pattern attribute if there's not an

00:26:46,519 --> 00:26:52,279
native validation scheme and then

00:26:50,360 --> 00:26:54,950
browsers that actually implement the

00:26:52,279 --> 00:26:57,289
html5 validation algorithm will notify

00:26:54,950 --> 00:26:59,899
users in line of fields that have errors

00:26:57,289 --> 00:27:02,539
and so often they will highlight the

00:26:59,899 --> 00:27:03,889
first error and then have the user work

00:27:02,539 --> 00:27:06,679
on fixing that before it can be

00:27:03,889 --> 00:27:08,600
submitted there is also the html5

00:27:06,679 --> 00:27:10,190
validation algorithm on the JavaScript

00:27:08,600 --> 00:27:12,590
end and you can take this stuff over on

00:27:10,190 --> 00:27:15,169
your own and and manage that experience

00:27:12,590 --> 00:27:18,049
for your users all by paying attention

00:27:15,169 --> 00:27:19,490
to those attributes that have been

00:27:18,049 --> 00:27:22,159
assigned even if the browser doesn't

00:27:19,490 --> 00:27:23,870
understand html5 validation you can roll

00:27:22,159 --> 00:27:26,240
your own JavaScript library to do it in

00:27:23,870 --> 00:27:28,370
I don't know I did it in like a hundred

00:27:26,240 --> 00:27:33,110
lines of code very very spaced out and

00:27:28,370 --> 00:27:34,970
commented it's really simple and then

00:27:33,110 --> 00:27:35,899
once you've got inline errors when

00:27:34,970 --> 00:27:38,120
you're wanting to highlight those

00:27:35,899 --> 00:27:39,950
yourself you want to mark them invalid

00:27:38,120 --> 00:27:41,269
using the Aria invalid attributes so

00:27:39,950 --> 00:27:43,279
assistive technology knows there's an

00:27:41,269 --> 00:27:45,320
issue here and then the error message

00:27:43,279 --> 00:27:47,750
can be associated using Aria described

00:27:45,320 --> 00:27:51,080
by which is an ID reference much like

00:27:47,750 --> 00:27:54,379
the four attribute and so you can see

00:27:51,080 --> 00:27:56,179
that here in orange your email star

00:27:54,379 --> 00:27:58,909
edits required invalid entry your email

00:27:56,179 --> 00:28:02,389
address is required blank so that's

00:27:58,909 --> 00:28:04,070
pretty helpful right eventually I

00:28:02,389 --> 00:28:06,710
already described by will be replaced by

00:28:04,070 --> 00:28:08,480
Aria error message in this context but

00:28:06,710 --> 00:28:10,789
the supports not there yet so that's

00:28:08,480 --> 00:28:12,590
something down the road now client-side

00:28:10,789 --> 00:28:14,600
validation is great but there's no

00:28:12,590 --> 00:28:16,610
substitute for doing some form of

00:28:14,600 --> 00:28:17,570
server-side validation and there's a

00:28:16,610 --> 00:28:19,279
good reason I'm going to tell you a

00:28:17,570 --> 00:28:21,799
quick story because I know we're at time

00:28:19,279 --> 00:28:23,480
here but back in 2001 when the original

00:28:21,799 --> 00:28:25,490
Xbox was the game system to drool over

00:28:23,480 --> 00:28:27,080
we as an industry put a lot of faith in

00:28:25,490 --> 00:28:29,389
the browser and didn't realize how our

00:28:27,080 --> 00:28:31,159
sites could be manipulated or hacked and

00:28:29,389 --> 00:28:32,929
I remember an instance where a major

00:28:31,159 --> 00:28:34,820
vulnerability was discovered in an

00:28:32,929 --> 00:28:37,129
e-commerce site and involved this gaming

00:28:34,820 --> 00:28:39,289
system and the infinite wisdom the

00:28:37,129 --> 00:28:41,870
developer had actually put the price of

00:28:39,289 --> 00:28:43,669
the Xbox in a hidden input and since it

00:28:41,870 --> 00:28:45,919
was hidden no one could see it an

00:28:43,669 --> 00:28:48,080
enterprising web designer could view

00:28:45,919 --> 00:28:50,000
source and see it but these were the

00:28:48,080 --> 00:28:51,679
days before browsers actually had tools

00:28:50,000 --> 00:28:55,369
for web developers to manipulate

00:28:51,679 --> 00:28:56,179
documents in in real time but they did

00:28:55,369 --> 00:28:59,090
have this thing called

00:28:56,179 --> 00:28:59,929
save so you could save a web page for

00:28:59,090 --> 00:29:02,240
offline viewing

00:28:59,929 --> 00:29:04,940
so one enterprising person did that very

00:29:02,240 --> 00:29:08,299
thing edited the file and change that

00:29:04,940 --> 00:29:09,559
value to a dollar and then they loaded

00:29:08,299 --> 00:29:11,809
the HTML document in their browser

00:29:09,559 --> 00:29:14,230
submitted the form and they got their

00:29:11,809 --> 00:29:16,700
xbox about two weeks later for a buck

00:29:14,230 --> 00:29:18,649
the developer didn't have any checks in

00:29:16,700 --> 00:29:19,970
place to make sure that products

00:29:18,649 --> 00:29:23,600
couldn't be sold for less than the e

00:29:19,970 --> 00:29:24,889
value that they listed as the price they

00:29:23,600 --> 00:29:27,409
didn't realize you can't trust the

00:29:24,889 --> 00:29:29,809
client you should always validate on the

00:29:27,409 --> 00:29:31,399
server side because even if a user has

00:29:29,809 --> 00:29:34,100
JavaScript turned on has a browser

00:29:31,399 --> 00:29:35,720
capable of doing html5 validation you

00:29:34,100 --> 00:29:37,610
can't assume that the validation

00:29:35,720 --> 00:29:39,679
criteria was actually met it's totally

00:29:37,610 --> 00:29:42,080
inconsequential to change a web pages

00:29:39,679 --> 00:29:44,299
markup to adjust scripts to adjust forms

00:29:42,080 --> 00:29:46,159
or otherwise compromise a web page using

00:29:44,299 --> 00:29:47,809
only only the tools that are built into

00:29:46,159 --> 00:29:49,159
virtually every browser out there how

00:29:47,809 --> 00:29:51,519
many of you have changed a form in order

00:29:49,159 --> 00:29:55,159
to actually be able to submit it yeah

00:29:51,519 --> 00:29:57,110
this happens all the time right we need

00:29:55,159 --> 00:29:58,009
to actually never trust the client we

00:29:57,110 --> 00:29:59,720
need to always make sure we're getting

00:29:58,009 --> 00:30:01,220
what we're expecting and since the

00:29:59,720 --> 00:30:04,100
server side is your last line of defense

00:30:01,220 --> 00:30:05,419
we need to be ready to to go back to

00:30:04,100 --> 00:30:07,100
that form again and provide information

00:30:05,419 --> 00:30:09,080
about what the errors are that we

00:30:07,100 --> 00:30:10,999
encountered so we want to server

00:30:09,080 --> 00:30:14,090
summarize those server-side errors in

00:30:10,999 --> 00:30:15,409
some sort of message at the top put it

00:30:14,090 --> 00:30:17,090
at the top of the form start with a

00:30:15,409 --> 00:30:19,490
helpful introduction there were some

00:30:17,090 --> 00:30:20,929
errors with your form submission list

00:30:19,490 --> 00:30:23,389
the errors and the orders they're that

00:30:20,929 --> 00:30:25,369
they're presented in the form and link

00:30:23,389 --> 00:30:27,080
to each of those fields that have an

00:30:25,369 --> 00:30:29,360
error the nice thing is we've got anchor

00:30:27,080 --> 00:30:30,879
references directly to those fields

00:30:29,360 --> 00:30:32,960
because they all have IDs on them right

00:30:30,879 --> 00:30:35,659
so that makes it really simple to do so

00:30:32,960 --> 00:30:37,940
and if you add a roll of alert in some

00:30:35,659 --> 00:30:39,590
browsers although the this is kind of

00:30:37,940 --> 00:30:40,789
abdomen and changed over the time but

00:30:39,590 --> 00:30:42,710
some of them do something cool like this

00:30:40,789 --> 00:30:44,269
when the page loads contact retreats for

00:30:42,710 --> 00:30:45,919
geeks there were errors with your form

00:30:44,269 --> 00:30:47,629
submission one message is a required

00:30:45,919 --> 00:30:50,450
field two name is a required field three

00:30:47,629 --> 00:30:52,850
email is a required field how friggin

00:30:50,450 --> 00:30:55,629
awesome is that that's so helpful when

00:30:52,850 --> 00:30:58,190
you can't visually see the form right

00:30:55,629 --> 00:30:59,659
then use the pattern I showed earlier to

00:30:58,190 --> 00:31:01,759
make sure that you indicate in line with

00:30:59,659 --> 00:31:04,580
the actual problem with is and help

00:31:01,759 --> 00:31:05,929
people to solve that and of course make

00:31:04,580 --> 00:31:07,220
sure that you bring back the value that

00:31:05,929 --> 00:31:09,710
they entered in case they just have to

00:31:07,220 --> 00:31:12,500
make a slight change to it

00:31:09,710 --> 00:31:14,330
so hTML is a truly robust and expressive

00:31:12,500 --> 00:31:16,010
language but it's often overlooked and

00:31:14,330 --> 00:31:17,690
undervalued but it has the incredible

00:31:16,010 --> 00:31:19,610
potential to nurture conversations with

00:31:17,690 --> 00:31:21,770
our users without requiring a whole lot

00:31:19,610 --> 00:31:23,840
of effort on our part simply taking the

00:31:21,770 --> 00:31:25,490
time to code web page as well will

00:31:23,840 --> 00:31:28,790
enable our sites to do more thereby

00:31:25,490 --> 00:31:30,590
enabling our users to do more hopefully

00:31:28,790 --> 00:31:32,240
this rather brief overview has opened up

00:31:30,590 --> 00:31:33,830
your eyes to the wonderful world of HTML

00:31:32,240 --> 00:31:36,800
and how semantic markup can make our

00:31:33,830 --> 00:31:38,870
content structured sensible and most

00:31:36,800 --> 00:31:40,550
importantly meaningful and if you are

00:31:38,870 --> 00:31:41,720
already a true believer I hope you walk

00:31:40,550 --> 00:31:43,040
away from this session with a few new

00:31:41,720 --> 00:31:45,270
techniques that you can put to use in

00:31:43,040 --> 00:31:51,220
your own work thank you all very much

00:31:45,270 --> 00:31:51,220

YouTube URL: https://www.youtube.com/watch?v=gZiysmuwwMA


