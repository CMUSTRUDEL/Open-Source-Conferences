Title: SPA at Scale    Patrick Woo    CascadiaJS 2018
Publication date: 2018-12-04
Playlist: CascadiaJS 2018
Description: 
	Many modern web applications are built as single page apps (SPA), with the goals to scale the application for customers, increase developer velocity for feature development, and speed up new team member ramp up time. In this talk we will share top 5 lessons learn - in hindsight, what would we do/donâ€™t do when building a large scale SPA.

https://2018.cascadiajs.com/
Captions: 
	00:00:00,550 --> 00:00:01,550
All right.

00:00:01,550 --> 00:00:02,550
Hello, everyone.

00:00:02,550 --> 00:00:06,420
My name is Patrick Woo and I am going to be talking about single page applications at

00:00:06,420 --> 00:00:08,470
scale.

00:00:08,470 --> 00:00:15,250
Going to turn up at Flux capacitor and with 1.21 gigawatts we can get started.

00:00:15,250 --> 00:00:24,839
I am a software manager at AWS and we are building super private stuff for a project

00:00:24,839 --> 00:00:26,740
called Beehive.

00:00:26,740 --> 00:00:32,060
I love basketball and movies from the '80s.

00:00:32,060 --> 00:00:36,969
We have a sponsor also here.

00:00:36,969 --> 00:00:45,219
What do I mean by spa at scale?

00:00:45,219 --> 00:00:48,359
Single page applications at scale?

00:00:48,359 --> 00:00:54,559
Our project is about 200,000 lines of code.

00:00:54,559 --> 00:01:00,949
This is pre-transpiled versions of our actual application with over 50 front end engineers

00:01:00,949 --> 00:01:07,730
working on the project across Seattle, San Francisco, Cupertino and Vancouver.

00:01:07,730 --> 00:01:09,360
We have a distributed team.

00:01:09,360 --> 00:01:15,220
We are all excited about our launch.

00:01:15,220 --> 00:01:18,860
We had a few bumps along the way.

00:01:18,860 --> 00:01:23,320
Let's go back in time and I want to talk to you about our top 5 lessons learned.

00:01:23,320 --> 00:01:27,250
First lesson is getting to know our customers.

00:01:27,250 --> 00:01:35,780
As engineers, a lot of time we are working and we are like this works, it works on my

00:01:35,780 --> 00:01:39,130
machine, it works on Chrome, I am good, right?

00:01:39,130 --> 00:01:46,780
Actually, our customers are also on Edge, Firefox, Safari and maybe some are on Beaker

00:01:46,780 --> 00:01:47,850
I found out.

00:01:47,850 --> 00:01:51,290
Cross-browser compatibility is an actual thing.

00:01:51,290 --> 00:02:01,170
You might say Patrick, these are Evergreen browsers and all compliant.

00:02:01,170 --> 00:02:09,300
We were trying to get performance measures working and on Firefox observe without observing

00:02:09,300 --> 00:02:20,010
was throwing an error addressed in version 63 but 60 is long-term support.

00:02:20,010 --> 00:02:26,890
You say they solved it in version 63 so that should do the job but actually, on some corporate

00:02:26,890 --> 00:02:31,140
environments, not everyone has the latest version of that particular browser.

00:02:31,140 --> 00:02:35,940
We have to think about those users as well.

00:02:35,940 --> 00:02:39,390
The other thing is operating system issues.

00:02:39,390 --> 00:02:50,130
We use frameworks like React, Vue, Angular, Babel.

00:02:50,130 --> 00:02:55,380
Don't thinks things will just work.

00:02:55,380 --> 00:03:15,190
We didn't know scrollbars display on PC.

00:03:15,190 --> 00:03:22,970
That one pixel deviation was causing performance issues and the virtual list kept moving up

00:03:22,970 --> 00:03:24,720
and down.

00:03:24,720 --> 00:03:33,550
All the people on the business side who had PCs were complaining so we had to consider

00:03:33,550 --> 00:03:35,920
operating systems.

00:03:35,920 --> 00:03:40,170
The other thing is testing for great experiences includes slow connections.

00:03:40,170 --> 00:03:44,041
What is awesome with the Chrome dev tools and I don't know if you are familiar but this

00:03:44,041 --> 00:03:46,500
was revealing for us.

00:03:46,500 --> 00:03:58,950
People are on slower connections that are not Wi-Fi and high-speed.

00:03:58,950 --> 00:04:01,930
The other thing is thinking about the machines.

00:04:01,930 --> 00:04:14,660
We have high powered MacBook pros and that is awesome but we had to test the CPUs.

00:04:14,660 --> 00:04:23,580
There are great tools and some of these are Open Source projects and one is called web

00:04:23,580 --> 00:04:24,580
page test.

00:04:24,580 --> 00:04:34,169
We simulate a cable or 3G connection with this.

00:04:34,169 --> 00:04:42,789
Another cool tool we learned was Lighthouse which was allowing us to see simulated experiences

00:04:42,789 --> 00:04:43,789
as well.

00:04:43,789 --> 00:04:48,620
It has a really great accessibility score which is awesome as well.

00:04:48,620 --> 00:04:53,749
The second lesson was about documenting our code.

00:04:53,749 --> 00:05:00,409
We got new engineers, 50 engineers, and we keep growing, and we had to keep shoulder

00:05:00,409 --> 00:05:05,100
tapping people like what does this component do?

00:05:05,100 --> 00:05:08,819
Documentation is absolutely pivotal to the project but it is really hard.

00:05:08,819 --> 00:05:13,770
It is hard to main tape, hard to understand -- maintain -- and difficult to scale.

00:05:13,770 --> 00:05:17,629
You would change a particular function and you wouldn't go back to the documentation

00:05:17,629 --> 00:05:19,360
to update it.

00:05:19,360 --> 00:05:21,539
That happened way too frequently.

00:05:21,539 --> 00:05:24,330
We thought how can we solve this problem?

00:05:24,330 --> 00:05:29,879
One thing we introduced was and I know people might not like this but we actually, you know,

00:05:29,879 --> 00:05:37,189
ended up using TypeScript and TypeScript helped us having documentation in code.

00:05:37,189 --> 00:05:44,050
It allows for self-documenting code by providing great ID support like the auto complete for

00:05:44,050 --> 00:05:45,430
props were amazing.

00:05:45,430 --> 00:05:46,430
Type checking.

00:05:46,430 --> 00:05:51,270
Misspelling a component name helped surface those.

00:05:51,270 --> 00:05:54,979
Require props provided a nice error message.

00:05:54,979 --> 00:05:58,729
Helps us re-factor by naming places.

00:05:58,729 --> 00:06:03,550
It will help us rename components for the ones we are working on.

00:06:03,550 --> 00:06:13,400
The other thing is TypeScript interface allows us to be explicit about component props.

00:06:13,400 --> 00:06:17,800
We have distributed teams and when we talk about the components we will builds, we talk

00:06:17,800 --> 00:06:24,080
about it through our interfaces we first build and that was a helpful thing for us to document.

00:06:24,080 --> 00:06:30,789
This all goes back to, you know, that awesome book we might have read, clean code, but the

00:06:30,789 --> 00:06:38,180
author of this quote is Gary Booch, not uncle bob, clean code is simple and direct and clean

00:06:38,180 --> 00:06:41,909
code should read like well-written prose and that is what we are hoping to adopt.

00:06:41,909 --> 00:06:49,210
That is great for engineers but doesn't work for the business stakeholders and designers

00:06:49,210 --> 00:06:52,069
we interact with.

00:06:52,069 --> 00:06:55,349
The thing we adopted was Storybook.

00:06:55,349 --> 00:06:59,909
Storybook for React components rocks.

00:06:59,909 --> 00:07:05,249
It allows us to host documentation about our components, provides a single source of truth

00:07:05,249 --> 00:07:09,279
for designers, product owners and our engineers.

00:07:09,279 --> 00:07:14,949
One of the problems and why this was pivotal for us was we would get a spec, continuously

00:07:14,949 --> 00:07:20,939
iterating, and I would talk to the designer and say what is the file?

00:07:20,939 --> 00:07:22,460
Is this the actual file?

00:07:22,460 --> 00:07:24,740
They are like, yeah, that is the final file.

00:07:24,740 --> 00:07:26,849
Are you sure?

00:07:26,849 --> 00:07:33,430
Let me reach out to Sandra and she is like no, this is the ultimate file.

00:07:33,430 --> 00:07:38,839
I don't why they don't have code versioning, maybe they do, but no git for designers and

00:07:38,839 --> 00:07:43,120
hard to find the source of truth.

00:07:43,120 --> 00:07:48,439
What we ended up doing is Storybook allowed for a great workflow with design systems and

00:07:48,439 --> 00:07:51,409
single source of truth.

00:07:51,409 --> 00:08:00,149
We incorporated Airbnb's React sketch app.

00:08:00,149 --> 00:08:05,900
Engineer would build a React component, generate a sketch simple symbol and design team works

00:08:05,900 --> 00:08:14,659
on that, and they hand it to us and we employ it.

00:08:14,659 --> 00:08:20,689
It is version controlled by git as well.

00:08:20,689 --> 00:08:22,400
Lesson three is tests.

00:08:22,400 --> 00:08:29,819
I know this might be obvious but it actually is one of the most, like, foundational pieces

00:08:29,819 --> 00:08:30,979
for us.

00:08:30,979 --> 00:08:35,940
Testing might seem obvious, easy, but I emphasize this as a lesson learned because it helped

00:08:35,940 --> 00:08:38,470
us gain confidence in our code.

00:08:38,470 --> 00:08:43,620
A lot of times we deployed to prod and we would not have too much confidence.

00:08:43,620 --> 00:08:49,130
We thought it worked on the machines like the cross-browser compatibility issues and

00:08:49,130 --> 00:08:57,210
we reduced a lot of regressions and also reduced the time to first commit for new hires.

00:08:57,210 --> 00:09:05,149
We would get new hires and the code was fairly well tested it was easy for them to onboard

00:09:05,149 --> 00:09:10,300
and within the first one or two days they were able to commit.

00:09:10,300 --> 00:09:16,459
We have a foundational basis and reduces having to ping additional engineers to figure out

00:09:16,459 --> 00:09:18,740
what is going on.

00:09:18,740 --> 00:09:25,050
The testing framework we ended up using is Jest.

00:09:25,050 --> 00:09:35,130
It allows us to write tests with enzyme, integration tests, and allows us to have component snapshot

00:09:35,130 --> 00:09:41,540
tests and get visibility into rather than particular component has changed.

00:09:41,540 --> 00:09:44,730
This is from testJavaScript.com which is an amazing resource.

00:09:44,730 --> 00:09:47,860
It goes over the different pieces.

00:09:47,860 --> 00:09:53,329
With static tests, you know, to catch typos and errors, we would use TypeScript for that.

00:09:53,329 --> 00:09:59,110
Unit we use Jest and integration Jest end and end to end, we are experimenting with

00:09:59,110 --> 00:10:04,800
using Jest with puppeteer but puppeteer is only supported on Chrome so that is an issue

00:10:04,800 --> 00:10:07,649
we are looking into.

00:10:07,649 --> 00:10:15,680
Again, I just really want to highlight how awesome testingJavascript.com is.

00:10:15,680 --> 00:10:21,170
Definitely worth checking out but things still break in production.

00:10:21,170 --> 00:10:23,839
We have the pipeline test.

00:10:23,839 --> 00:10:28,899
You know, from this particular environment to this particular environment, to prod, it

00:10:28,899 --> 00:10:30,000
went through code coverage.

00:10:30,000 --> 00:10:32,270
I got 80%, I am good.

00:10:32,270 --> 00:10:34,269
Integration tests are passing.

00:10:34,269 --> 00:10:37,959
And my end to end tests are passing so I should be good.

00:10:37,959 --> 00:10:42,500
I don't have to worry about prod and actually as an engineering manager, this is my interview

00:10:42,500 --> 00:10:43,910
question.

00:10:43,910 --> 00:10:45,230
Protip here.

00:10:45,230 --> 00:10:51,889
Things can break in production and we need to think about customers while in production.

00:10:51,889 --> 00:10:57,130
We have monitors and alarms to provide visibility into our production health for applications

00:10:57,130 --> 00:11:00,509
to ensure the deployments and dependencies are there.

00:11:00,509 --> 00:11:07,810
Your CDN might go down and don't you want visibility into what happened?

00:11:07,810 --> 00:11:15,930
We are focused on the customer and don't want them being the manual QA team.

00:11:15,930 --> 00:11:19,930
That is why we are focused on monitoring.

00:11:19,930 --> 00:11:23,550
We use specifically Cloud Watch and in our case AWS.

00:11:23,550 --> 00:11:31,139
It helps us collect, monitor, act and analyze on our actual metrics because as Kyle Stenson

00:11:31,139 --> 00:11:37,290
of functional light JavaScript mentions, code you can't trust is code you don't understand.

00:11:37,290 --> 00:11:43,970
I would say code you don't test, or haven't tested, is really code you don't understand

00:11:43,970 --> 00:11:45,350
as well.

00:11:45,350 --> 00:11:51,970
That is one of the things we learned.

00:11:51,970 --> 00:11:52,970
All right.

00:11:52,970 --> 00:11:53,970
Lesson four.

00:11:53,970 --> 00:11:54,970
YAGNI.

00:11:54,970 --> 00:12:01,709
It is a popular term meaning you ain't going to need it.

00:12:01,709 --> 00:12:08,389
As engineers, we find of have a tendency to fall into tunnel vision.

00:12:08,389 --> 00:12:12,610
We tend to get stuck in tunnel vision over optimizing.

00:12:12,610 --> 00:12:17,050
I am trying to reduce time to interact.

00:12:17,050 --> 00:12:19,510
I am trying to get the first meaningful paint time down.

00:12:19,510 --> 00:12:23,269
I am trying to reduce the memory heap.

00:12:23,269 --> 00:12:24,279
This is ridiculous.

00:12:24,279 --> 00:12:26,960
We need to reduce this, Patrick.

00:12:26,960 --> 00:12:30,649
We just kind of rat hole into this particular perspective.

00:12:30,649 --> 00:12:34,690
Instead of seeking feedback early and often in atomic pieces.

00:12:34,690 --> 00:12:42,740
When you have an atomic commit and send out a review and it is an atomic bite size piece

00:12:42,740 --> 00:12:50,449
and you want feedback often so you don't create a massive 20-page code review or pull request

00:12:50,449 --> 00:12:53,350
so it helps provide context.

00:12:53,350 --> 00:12:58,150
In terms of deployments, we want to think about the features we are building.

00:12:58,150 --> 00:13:03,939
I believe performance is important but first you need metrics on that and two you want

00:13:03,939 --> 00:13:11,180
it in tiny atomic pieces so you can get feedback early from the customers.

00:13:11,180 --> 00:13:17,529
Your customer and business are eager to help avoid wasting dev cycles.

00:13:17,529 --> 00:13:24,079
All we need to do is stop and listen because who knows.

00:13:24,079 --> 00:13:27,579
You might have already built something really cool, right?

00:13:27,579 --> 00:13:34,760
One note about this slide is I also wondered is this kid really happy he broke the scooter?

00:13:34,760 --> 00:13:41,080
He looks kind of happy about getting a skateboard but, again, anyway.

00:13:41,080 --> 00:13:44,019
All right.

00:13:44,019 --> 00:13:49,910
The biggest lesson and, you know, I think if you takeaway anything of the four lessons

00:13:49,910 --> 00:13:56,630
we learned, that what I really want to share with this group is this one.

00:13:56,630 --> 00:14:01,689
This biggest takeaway lesson and that is to be kind, rewind.

00:14:01,689 --> 00:14:10,189
Earlier in the day, there used to be a place we would go and you would just go through

00:14:10,189 --> 00:14:16,829
the aisles and pick out a nice movie and then you go to the checkout and grab a sour patch

00:14:16,829 --> 00:14:26,759
kid, a pop, and go home and enter this block thing into this other device and hit play

00:14:26,759 --> 00:14:27,759
and boom!

00:14:27,759 --> 00:14:29,759
You are able to watch an amazing movie.

00:14:29,759 --> 00:14:31,230
It was awesome.

00:14:31,230 --> 00:14:38,160
At the end of it, always on this particular thing you would see be kind, rewind and because

00:14:38,160 --> 00:14:43,269
you want to be thoughtful about the next person who is going to enjoy this movie you would

00:14:43,269 --> 00:14:48,540
be kind and rewind -- most of the time up less you are super lazy.

00:14:48,540 --> 00:14:54,300
The reason I harp on this is because a lot of us as engineers, at least in my case, I

00:14:54,300 --> 00:15:00,920
have met amazing engineer managers, technical leads and software engineers who showed empathy

00:15:00,920 --> 00:15:04,509
and worked with me.

00:15:04,509 --> 00:15:10,149
They showed empathy when they reviewed my code, when I was trying to learn something

00:15:10,149 --> 00:15:15,160
complex like maybe even WebAssembly, and they showed empathy and compassion.

00:15:15,160 --> 00:15:20,829
I think a lot of times as these things are evolving we might lose out on that.

00:15:20,829 --> 00:15:25,689
One thing I like to remind our engineering teams is to continue to show that empathy.

00:15:25,689 --> 00:15:33,040
We work with a diverse group of 50 engineers and one thing we like to do is make sure we

00:15:33,040 --> 00:15:36,270
are not too emotional about our code review process.

00:15:36,270 --> 00:15:47,870
You get a 20PCR and might want to be empathetic but when it comes to pair programming and

00:15:47,870 --> 00:15:51,620
helping engineers understand a particular function also.

00:15:51,620 --> 00:15:59,420
That is the biggest lesson I hope everyone takes away from what I am presenting on.

00:15:59,420 --> 00:16:00,629
That is actually it.

00:16:00,629 --> 00:16:12,009
That 

00:16:12,009 --> 00:16:13,009
is my presentation.

00:16:13,009 --> 00:16:14,009
Thank you, everyone.

00:16:14,009 --> 00:16:18,899

YouTube URL: https://www.youtube.com/watch?v=Zr51LyznkZI


