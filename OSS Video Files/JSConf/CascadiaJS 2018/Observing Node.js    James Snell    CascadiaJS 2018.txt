Title: Observing Node.js    James Snell    CascadiaJS 2018
Publication date: 2018-12-10
Playlist: CascadiaJS 2018
Description: 
	Understanding what is really happening within your Node.js processes can be... Difficult. I'll pull back the curtain and demonstrate tools and techniques for observing Node.js.

https://2018.cascadiajs.com/
Captions: 
	00:00:00,030 --> 00:00:06,870
hello how y'all doing ready the clouds

00:00:05,160 --> 00:00:07,830
have been fantastic I'm super happy that

00:00:06,870 --> 00:00:09,990
I was actually able to get here as my

00:00:07,830 --> 00:00:11,490
first Cascadia J s been meaning to come

00:00:09,990 --> 00:00:13,860
for a couple of years it's been

00:00:11,490 --> 00:00:15,089
absolutely phenomenal unfortunately

00:00:13,860 --> 00:00:16,440
after the talk I'm gonna have to walk

00:00:15,089 --> 00:00:17,789
off the stage and right out to the lift

00:00:16,440 --> 00:00:19,140
the airport I'm gonna miss the party

00:00:17,789 --> 00:00:21,510
tonight I hope y'all have fun it's

00:00:19,140 --> 00:00:25,230
something an absolute blast

00:00:21,510 --> 00:00:27,029
so I'm James J a snow online pretty much

00:00:25,230 --> 00:00:30,420
everywhere it's whitter github

00:00:27,029 --> 00:00:31,769
you've gmail you know feel free to reach

00:00:30,420 --> 00:00:35,630
out anytime if you want to talk about

00:00:31,769 --> 00:00:39,530
node we're contributing to open source I

00:00:35,630 --> 00:00:41,460
work for these folks are a company

00:00:39,530 --> 00:00:43,350
headquartered on the southern coast of

00:00:41,460 --> 00:00:44,820
Ireland a tiny little village you would

00:00:43,350 --> 00:00:46,219
have no idea that there was an

00:00:44,820 --> 00:00:48,180
international software company there

00:00:46,219 --> 00:00:52,620
there's about a hundred and thirty of us

00:00:48,180 --> 00:00:54,989
spread about over 24 countries they pay

00:00:52,620 --> 00:00:57,180
me to work on node full-time my

00:00:54,989 --> 00:01:00,840
literally on the platform itself and I

00:00:57,180 --> 00:01:04,409
also manage the consulting team there so

00:01:00,840 --> 00:01:06,330
not only do I get to build node I get to

00:01:04,409 --> 00:01:10,799
help go out and teach people how to use

00:01:06,330 --> 00:01:12,390
it and how to use it better so it you

00:01:10,799 --> 00:01:14,130
know it's really exciting for me because

00:01:12,390 --> 00:01:16,140
you know I get to see every day they do

00:01:14,130 --> 00:01:19,110
the really amazing things that people

00:01:16,140 --> 00:01:22,080
are using node for but they also get to

00:01:19,110 --> 00:01:25,140
see the kind of the misconceptions or

00:01:22,080 --> 00:01:27,090
the mistakes that are made not from the

00:01:25,140 --> 00:01:29,250
fault you know from the engineering

00:01:27,090 --> 00:01:30,360
teams faults but largely due to

00:01:29,250 --> 00:01:31,860
misconceptions of the programming

00:01:30,360 --> 00:01:33,930
language things that we did not

00:01:31,860 --> 00:01:37,340
communicate properly about the platform

00:01:33,930 --> 00:01:39,270
how it works and there's a lot of

00:01:37,340 --> 00:01:44,759
misconception out there about how the

00:01:39,270 --> 00:01:47,729
node internals actually function for the

00:01:44,759 --> 00:01:49,409
past probably a year whenever a customer

00:01:47,729 --> 00:01:51,899
comes to our team and they're saying

00:01:49,409 --> 00:01:54,540
well our node app is kind of slow we

00:01:51,899 --> 00:01:58,290
need to figure out why my first question

00:01:54,540 --> 00:02:01,469
is are you using promises and if they

00:01:58,290 --> 00:02:05,070
say yeah my first response is you're

00:02:01,469 --> 00:02:07,259
using them wrong because typically folks

00:02:05,070 --> 00:02:09,149
are actually using them wrong and it's

00:02:07,259 --> 00:02:11,790
and it's not their fault it's just the

00:02:09,149 --> 00:02:13,410
promise abstraction there are some

00:02:11,790 --> 00:02:15,390
nuances about it and

00:02:13,410 --> 00:02:17,520
how it interacts with node and the event

00:02:15,390 --> 00:02:19,710
loop and things like next tick and

00:02:17,520 --> 00:02:22,200
timers and you know all these you know

00:02:19,710 --> 00:02:24,900
different things that can really trip

00:02:22,200 --> 00:02:26,490
some folks up so I'm here to talk a

00:02:24,900 --> 00:02:28,980
little bit about you know how all this

00:02:26,490 --> 00:02:32,220
stuff comes together so a lot of people

00:02:28,980 --> 00:02:36,360
see node kinda like this some people

00:02:32,220 --> 00:02:39,450
think it's a toy right I can just look

00:02:36,360 --> 00:02:42,810
at this for four hours I have like three

00:02:39,450 --> 00:02:44,040
of these at home you know but you know

00:02:42,810 --> 00:02:45,600
it's like you look at it it's like okay

00:02:44,040 --> 00:02:47,460
what's happening inside I'm flipping a

00:02:45,600 --> 00:02:49,170
switch something's happening but I don't

00:02:47,460 --> 00:02:51,510
quite know what's there so we're gonna

00:02:49,170 --> 00:02:53,220
my talk about how we can peer in what's

00:02:51,510 --> 00:02:55,710
going on and I'm going to talk about how

00:02:53,220 --> 00:02:57,780
note itself functions under the covers

00:02:55,710 --> 00:02:59,820
with regards to the event loop so what's

00:02:57,780 --> 00:03:04,620
happening inside this may be a little

00:02:59,820 --> 00:03:09,690
bit hard to read but this code prints a

00:03:04,620 --> 00:03:12,570
series of console statements to the

00:03:09,690 --> 00:03:15,090
console right your challenge is to

00:03:12,570 --> 00:03:17,790
figure out without running the code

00:03:15,090 --> 00:03:20,340
right now have a link where you can go

00:03:17,790 --> 00:03:22,530
out and running it try to figure out the

00:03:20,340 --> 00:03:26,490
order in which these statements are

00:03:22,530 --> 00:03:28,830
printed there are a couple promises in

00:03:26,490 --> 00:03:31,380
here there is a set immediate there's a

00:03:28,830 --> 00:03:32,670
next tick this new thing called cue

00:03:31,380 --> 00:03:36,750
micro test because we didn't have things

00:03:32,670 --> 00:03:38,820
confusing enough set timeouts does it

00:03:36,750 --> 00:03:41,520
promise all it's a lot going on in this

00:03:38,820 --> 00:03:44,820
thing so it can be rather difficult to

00:03:41,520 --> 00:03:46,560
see what is happening these are pretty

00:03:44,820 --> 00:03:49,440
much all the ways of scheduling a

00:03:46,560 --> 00:03:51,600
synchronous activity within node right

00:03:49,440 --> 00:03:53,220
so we have promise we have event emitter

00:03:51,600 --> 00:03:55,770
many meters been in there from you know

00:03:53,220 --> 00:03:58,350
almost the beginning async/await which

00:03:55,770 --> 00:04:01,290
is absolutely love next tick and set

00:03:58,350 --> 00:04:02,720
immediate which you know they actually

00:04:01,290 --> 00:04:04,980
should have been reversed in the names

00:04:02,720 --> 00:04:07,739
the one missing from here is like set

00:04:04,980 --> 00:04:12,060
interval and cue micro tasks is this one

00:04:07,739 --> 00:04:14,910
we just added a couple of weeks ago it

00:04:12,060 --> 00:04:17,609
is similar to promises among you know

00:04:14,910 --> 00:04:19,799
when you do a problem of promise then

00:04:17,609 --> 00:04:22,680
right it does the same kind of task

00:04:19,799 --> 00:04:25,470
where you can kind of manually add a and

00:04:22,680 --> 00:04:29,370
an item there that only works right now

00:04:25,470 --> 00:04:33,480
in node in master right so if you're

00:04:29,370 --> 00:04:35,520
building from the master or node 11 so

00:04:33,480 --> 00:04:37,890
if you you know if you try out this code

00:04:35,520 --> 00:04:39,660
in no date or no ten you just have two

00:04:37,890 --> 00:04:42,480
comments out that Q micro test line

00:04:39,660 --> 00:04:45,000
they're right in the middle but like I

00:04:42,480 --> 00:04:46,620
said you challenge you just you can grow

00:04:45,000 --> 00:04:48,510
it and grab this if you want to write

00:04:46,620 --> 00:04:51,600
that down so I look at the code see if

00:04:48,510 --> 00:04:52,890
we can figure it out if any of you

00:04:51,600 --> 00:04:55,140
figure out the order

00:04:52,890 --> 00:04:57,810
you know without actually running the

00:04:55,140 --> 00:04:59,760
codes let me know because I only know of

00:04:57,810 --> 00:05:01,290
a couple of people within note and

00:04:59,760 --> 00:05:05,280
within another project itself they could

00:05:01,290 --> 00:05:07,110
figure it out on the first try huh but

00:05:05,280 --> 00:05:08,730
in order to figure out that you know to

00:05:07,110 --> 00:05:09,870
see what this code is doing in order to

00:05:08,730 --> 00:05:12,470
be able to reason about it there are

00:05:09,870 --> 00:05:15,900
four critical concepts we need to know

00:05:12,470 --> 00:05:18,020
the first one is the event loop what it

00:05:15,900 --> 00:05:22,050
is basically how it works

00:05:18,020 --> 00:05:24,300
the next one is the next tick Q alright

00:05:22,050 --> 00:05:27,360
this is the thing that the process next

00:05:24,300 --> 00:05:30,150
ticket function interacts with the third

00:05:27,360 --> 00:05:32,430
one is two micro tasks you alright this

00:05:30,150 --> 00:05:36,300
is the thing that promises interact with

00:05:32,430 --> 00:05:38,570
and the fourth is this concept there's

00:05:36,300 --> 00:05:42,210
no such thing as asynchronous JavaScript

00:05:38,570 --> 00:05:44,820
it does not exist all right you can

00:05:42,210 --> 00:05:47,430
schedule the execution of eight of

00:05:44,820 --> 00:05:50,310
JavaScript asynchronously but you cannot

00:05:47,430 --> 00:05:53,220
run JavaScript asynchronously all right

00:05:50,310 --> 00:05:54,480
very very important concept when it

00:05:53,220 --> 00:05:58,370
comes to understanding what's happening

00:05:54,480 --> 00:06:01,740
within a node process and how that is

00:05:58,370 --> 00:06:03,450
performing so this might be a picture

00:06:01,740 --> 00:06:06,660
you've seen before it's a very abstract

00:06:03,450 --> 00:06:08,580
view of the event loop all right it's

00:06:06,660 --> 00:06:10,830
this thing you know it turns around and

00:06:08,580 --> 00:06:14,310
around and does stuff right but what

00:06:10,830 --> 00:06:17,370
exactly is it doing this is you know

00:06:14,310 --> 00:06:19,290
this is a better view in my opinion what

00:06:17,370 --> 00:06:21,900
the event loop does is essentially

00:06:19,290 --> 00:06:23,880
delivering messages right so you can

00:06:21,900 --> 00:06:26,220
imagine you know I'm a letter carrier

00:06:23,880 --> 00:06:28,230
right and I have a stack of letters

00:06:26,220 --> 00:06:30,120
right but I need to deliver so I have

00:06:28,230 --> 00:06:33,270
one right now I'm gonna give it to

00:06:30,120 --> 00:06:35,669
somebody and I can't just go and to the

00:06:33,270 --> 00:06:37,260
next person in Port handing letters out

00:06:35,669 --> 00:06:38,830
what I have to do is when I give it to

00:06:37,260 --> 00:06:41,410
somebody I

00:06:38,830 --> 00:06:44,020
to wait until they do whatever they're

00:06:41,410 --> 00:06:46,180
gonna do with it right they read it they

00:06:44,020 --> 00:06:47,500
figure out you know what what response

00:06:46,180 --> 00:06:49,570
they're gonna give they write out a

00:06:47,500 --> 00:06:51,430
response right and then and then they

00:06:49,570 --> 00:06:54,190
tell me that they're done okay

00:06:51,430 --> 00:06:55,660
so then I go to the next person and I

00:06:54,190 --> 00:06:57,820
can hand them their letter and then I

00:06:55,660 --> 00:07:00,120
have to wait all right and then I go to

00:06:57,820 --> 00:07:03,820
the next person and hand them theirs

00:07:00,120 --> 00:07:06,850
that is what the event loop does it

00:07:03,820 --> 00:07:09,850
takes a queue of messages so cute you

00:07:06,850 --> 00:07:12,130
know we're callbacks right events that

00:07:09,850 --> 00:07:14,920
have occurred and it goes through and

00:07:12,130 --> 00:07:17,980
hands those off to JavaScript functions

00:07:14,920 --> 00:07:19,420
to execute all right it can only do one

00:07:17,980 --> 00:07:23,380
of these at a time

00:07:19,420 --> 00:07:28,170
all right one of the really important

00:07:23,380 --> 00:07:31,660
concepts to understand is that in node

00:07:28,170 --> 00:07:35,260
you have a call stack so you have the

00:07:31,660 --> 00:07:37,960
event loop running down here you have

00:07:35,260 --> 00:07:40,870
some C++ code and then you have some

00:07:37,960 --> 00:07:42,880
JavaScript code all right every time the

00:07:40,870 --> 00:07:45,070
event loop gets a notification it's

00:07:42,880 --> 00:07:48,280
gonna call through C++ up to the

00:07:45,070 --> 00:07:50,770
JavaScript all right and then when that

00:07:48,280 --> 00:07:52,780
JavaScript returns back all the way down

00:07:50,770 --> 00:07:54,790
to the event loop you can move on to the

00:07:52,780 --> 00:07:58,210
next task and run the next stack of

00:07:54,790 --> 00:07:59,920
JavaScript code okay now this is

00:07:58,210 --> 00:08:02,650
critically important because over here

00:07:59,920 --> 00:08:06,640
on the side are these two little things

00:08:02,650 --> 00:08:10,780
here one is the next tick queue and the

00:08:06,640 --> 00:08:12,730
other is the micro task you when code is

00:08:10,780 --> 00:08:15,190
running in JavaScript and you call

00:08:12,730 --> 00:08:17,590
process next tick it's just going to

00:08:15,190 --> 00:08:20,110
drop a function into that X to Q and

00:08:17,590 --> 00:08:21,460
leave it there when you schedule a

00:08:20,110 --> 00:08:24,880
problem when you call a promise and

00:08:21,460 --> 00:08:27,910
interview in resolves to the dot dot Ben

00:08:24,880 --> 00:08:29,770
or dot catch or dot finally what's gonna

00:08:27,910 --> 00:08:31,480
happen is that function handler is gonna

00:08:29,770 --> 00:08:34,240
be dropped into micro test queue and

00:08:31,480 --> 00:08:36,490
it's lefted there okay it's not until

00:08:34,240 --> 00:08:38,560
the threat of execution we you know that

00:08:36,490 --> 00:08:41,590
stack unwinds back to that javascript

00:08:38,560 --> 00:08:44,440
c++ layer that that next to queue and

00:08:41,590 --> 00:08:46,390
the micro task queue is drained so all

00:08:44,440 --> 00:08:49,570
of those functions will not be called

00:08:46,390 --> 00:08:51,130
until control returns back to the c++

00:08:49,570 --> 00:08:54,269
layer

00:08:51,130 --> 00:08:57,910
you know from that from that call okay

00:08:54,269 --> 00:08:59,529
so we can only execute one task at a

00:08:57,910 --> 00:09:00,790
time all of these tab

00:08:59,529 --> 00:09:02,320
you know these asynchronous tasks that

00:09:00,790 --> 00:09:05,290
are scheduled getting an end up getting

00:09:02,320 --> 00:09:06,970
queued in the micro task queue or the or

00:09:05,290 --> 00:09:08,740
the next tick queue unless they're a

00:09:06,970 --> 00:09:12,759
timer which works entirely different

00:09:08,740 --> 00:09:15,040
timer will run on the event loop either

00:09:12,759 --> 00:09:16,480
on the next turn or some you know set of

00:09:15,040 --> 00:09:20,230
milliseconds or seconds Africa okay you

00:09:16,480 --> 00:09:21,910
know as the event loop turns but still

00:09:20,230 --> 00:09:23,440
if you're going through and doing all

00:09:21,910 --> 00:09:24,480
the scheduling it still only runs one

00:09:23,440 --> 00:09:26,889
thing at a time

00:09:24,480 --> 00:09:29,949
so when javascript is running the event

00:09:26,889 --> 00:09:32,560
loop is not the event loop past the

00:09:29,949 --> 00:09:33,790
pause whenever you are whatever it's

00:09:32,560 --> 00:09:36,880
executing this code which means you

00:09:33,790 --> 00:09:38,889
can't collect i/o events no network

00:09:36,880 --> 00:09:41,230
traffic is being okay no network

00:09:38,889 --> 00:09:41,829
connections are being are being

00:09:41,230 --> 00:09:46,000
processed

00:09:41,829 --> 00:09:47,769
it's just executing that code we call

00:09:46,000 --> 00:09:49,959
this event loop delay and it's the

00:09:47,769 --> 00:09:51,970
single most important concept for node

00:09:49,959 --> 00:09:53,980
performance all right this is the thing

00:09:51,970 --> 00:09:57,430
that will kill your note note

00:09:53,980 --> 00:09:59,620
applications from from running so this

00:09:57,430 --> 00:10:01,449
is an example you know whenever you're

00:09:59,620 --> 00:10:04,029
doing any kind of large synchronous

00:10:01,449 --> 00:10:05,560
activity right you're just killing

00:10:04,029 --> 00:10:07,990
everything you're killing performance

00:10:05,560 --> 00:10:11,319
they're not letting no do it do what it

00:10:07,990 --> 00:10:14,680
does which is a synchronous i/o okay so

00:10:11,319 --> 00:10:15,459
again javascript is not synchronous but

00:10:14,680 --> 00:10:17,410
here's a trick question

00:10:15,459 --> 00:10:19,300
had to leave it'll you know a trick

00:10:17,410 --> 00:10:21,819
question because the answer should be

00:10:19,300 --> 00:10:24,130
obvious it's very the fact that I'm

00:10:21,819 --> 00:10:26,350
asking it the answer is no not all

00:10:24,130 --> 00:10:28,180
javascript in note runs within the event

00:10:26,350 --> 00:10:30,790
loop and this comes is a big surprise

00:10:28,180 --> 00:10:32,709
for a lot of people now here's another

00:10:30,790 --> 00:10:36,220
question does it all run within the same

00:10:32,709 --> 00:10:38,980
event loop as of no ten no it does not

00:10:36,220 --> 00:10:40,810
we now have proper worker threads every

00:10:38,980 --> 00:10:42,579
worker thread has its own event loop and

00:10:40,810 --> 00:10:44,649
node instance running this is all

00:10:42,579 --> 00:10:45,970
running within a single process I'm not

00:10:44,649 --> 00:10:47,380
gonna get into that now but it makes

00:10:45,970 --> 00:10:51,069
things significantly more complicated

00:10:47,380 --> 00:10:52,990
but a hell of a lot more fun so this is

00:10:51,069 --> 00:10:54,399
gonna be a blast working with with this

00:10:52,990 --> 00:10:55,839
hopefully workers will come out of

00:10:54,399 --> 00:11:01,750
experimental by no.12

00:10:55,839 --> 00:11:04,270
and you know yeah I can't wait but there

00:11:01,750 --> 00:11:07,240
are three main phases two nodes startup

00:11:04,270 --> 00:11:09,010
there's the bootstrap there's main and

00:11:07,240 --> 00:11:12,640
event loop you know folks have some

00:11:09,010 --> 00:11:14,740
different names for these things what

00:11:12,640 --> 00:11:18,459
happens during boot strap is nodes

00:11:14,740 --> 00:11:22,270
loading its own JavaScript right who's

00:11:18,459 --> 00:11:23,800
doing serverless stuff all right all

00:11:22,270 --> 00:11:25,020
right who have had problems with cold

00:11:23,800 --> 00:11:27,760
start times

00:11:25,020 --> 00:11:29,860
that's because node is damn slow loading

00:11:27,760 --> 00:11:32,170
itself it has a whole bunch of

00:11:29,860 --> 00:11:33,910
JavaScript that it needs to load and

00:11:32,170 --> 00:11:35,890
then it needs to load the user code on

00:11:33,910 --> 00:11:38,740
top of that right which is which happens

00:11:35,890 --> 00:11:41,020
during main during this time it's

00:11:38,740 --> 00:11:42,970
loading it off it's compar Singh the the

00:11:41,020 --> 00:11:45,279
JavaScript it's compiling it and then

00:11:42,970 --> 00:11:47,529
executing it and there's a lot of boot

00:11:45,279 --> 00:11:49,990
up that needs to happen within node

00:11:47,529 --> 00:11:52,870
itself to to make sure that it's that

00:11:49,990 --> 00:11:55,450
it's able to run the event loop has

00:11:52,870 --> 00:11:57,670
started after main scope exits all right

00:11:55,450 --> 00:12:00,550
and only if asynchronous tasks were

00:11:57,670 --> 00:12:04,630
scheduled so this is an example so we

00:12:00,550 --> 00:12:07,720
have this bootstrap by JS file excuse me

00:12:04,630 --> 00:12:10,180
and one of the statements here is this

00:12:07,720 --> 00:12:12,520
console log right we have the

00:12:10,180 --> 00:12:14,260
performance API this no timing object

00:12:12,520 --> 00:12:17,709
gives you some timestamp of when things

00:12:14,260 --> 00:12:19,180
within node kicked off or when they when

00:12:17,709 --> 00:12:21,370
they completed this loop start tells you

00:12:19,180 --> 00:12:24,459
when the event loops was actually

00:12:21,370 --> 00:12:26,620
started after that yeah after your code

00:12:24,459 --> 00:12:28,810
it started running so in bootstrap Jas

00:12:26,620 --> 00:12:30,579
here this first console log statement

00:12:28,810 --> 00:12:32,320
loop start is gonna be minus one which

00:12:30,579 --> 00:12:34,690
indicates that the loop has not actually

00:12:32,320 --> 00:12:36,550
started you schedule some asynchronous

00:12:34,690 --> 00:12:38,829
activities set immediate when that runs

00:12:36,550 --> 00:12:41,470
you check loop start again and you'll

00:12:38,829 --> 00:12:43,899
see an actual timestamp there so this

00:12:41,470 --> 00:12:45,760
initial code this top scope right

00:12:43,899 --> 00:12:47,260
top-level scope this is running within

00:12:45,760 --> 00:12:49,420
that main scope right

00:12:47,260 --> 00:12:52,959
at this point the event loop is not

00:12:49,420 --> 00:12:55,060
running why is this important in this

00:12:52,959 --> 00:12:57,279
code if you want to start reasoning

00:12:55,060 --> 00:12:59,589
about what this is doing and the order

00:12:57,279 --> 00:13:01,300
of execution you have to start thinking

00:12:59,589 --> 00:13:03,160
about what is running within the event

00:13:01,300 --> 00:13:04,510
loop and what is not running within the

00:13:03,160 --> 00:13:06,100
event loop you also have to start

00:13:04,510 --> 00:13:08,050
thinking about what is running within

00:13:06,100 --> 00:13:09,910
the the micro task queue what is running

00:13:08,050 --> 00:13:12,310
within the process next to what is a

00:13:09,910 --> 00:13:13,300
timer and how all of these things and

00:13:12,310 --> 00:13:17,240
relates from one another

00:13:13,300 --> 00:13:18,890
it is extremely complicated to visual

00:13:17,240 --> 00:13:20,210
even conceptually how these things

00:13:18,890 --> 00:13:22,130
interact with one another

00:13:20,210 --> 00:13:24,280
we've fortunately we built some tools to

00:13:22,130 --> 00:13:26,900
figure that to start to visualize this

00:13:24,280 --> 00:13:29,300
so the first rule of nodejs performance

00:13:26,900 --> 00:13:33,680
know when your code is running know ya

00:13:29,300 --> 00:13:35,330
know each individual function so the

00:13:33,680 --> 00:13:38,900
first tool that we've that we have

00:13:35,330 --> 00:13:42,200
within those are trace events trace

00:13:38,900 --> 00:13:46,130
events are a file format that that came

00:13:42,200 --> 00:13:48,290
out of v8 and chrome it's a right now

00:13:46,130 --> 00:13:51,860
it's a JSON format that gets outputted

00:13:48,290 --> 00:13:54,020
by the engine and by node whenever

00:13:51,860 --> 00:13:55,420
significant events happen with the core

00:13:54,020 --> 00:13:58,010
we have to go through and actually

00:13:55,420 --> 00:14:01,130
implement the code to emit these we are

00:13:58,010 --> 00:14:03,290
in the process now of expanding the type

00:14:01,130 --> 00:14:06,080
of information that can come out of node

00:14:03,290 --> 00:14:07,820
through trace events one of the key bits

00:14:06,080 --> 00:14:10,310
of information we can get right now is

00:14:07,820 --> 00:14:12,710
what a synchronous activity is happening

00:14:10,310 --> 00:14:15,620
over the lifetime of that of that

00:14:12,710 --> 00:14:17,420
application we can use this I will show

00:14:15,620 --> 00:14:19,010
in just a minute to visualize the

00:14:17,420 --> 00:14:22,760
activity happening within that

00:14:19,010 --> 00:14:24,770
application the next important tool is

00:14:22,760 --> 00:14:27,530
async Kooks this is the low-level API

00:14:24,770 --> 00:14:30,230
which is what we use to actually emit

00:14:27,530 --> 00:14:31,880
the trace events to see what is

00:14:30,230 --> 00:14:34,970
happening so whenever a new object is

00:14:31,880 --> 00:14:39,350
created whenever a callback is invoked

00:14:34,970 --> 00:14:41,450
the async hooks API is called this third

00:14:39,350 --> 00:14:43,520
one it's not actually in core it's

00:14:41,450 --> 00:14:45,110
another tool it's a it's an external

00:14:43,520 --> 00:14:46,480
tool they by team in uniform and near

00:14:45,110 --> 00:14:49,490
foreign-built it's all open source

00:14:46,480 --> 00:14:52,820
called bubble bubble bubble problem

00:14:49,490 --> 00:14:54,500
profiling I'll show you how this works

00:14:52,820 --> 00:14:57,620
and how it relates to all this but it's

00:14:54,500 --> 00:14:59,300
built on top of of trace events so the

00:14:57,620 --> 00:15:01,640
first thing I pick until we have is

00:14:59,300 --> 00:15:04,280
built into chrome itself this is the

00:15:01,640 --> 00:15:07,820
chrome trace viewer it's a very

00:15:04,280 --> 00:15:09,830
unassuming simple UI may be a little bit

00:15:07,820 --> 00:15:13,580
hard to read because of the colors that

00:15:09,830 --> 00:15:16,940
are there but it can read this JSON file

00:15:13,580 --> 00:15:19,490
that is emitted by the node process and

00:15:16,940 --> 00:15:22,040
by v8 and depending on what categories

00:15:19,490 --> 00:15:24,200
of trace events you've you've asked it

00:15:22,040 --> 00:15:27,140
to emit you pull this in and it gives

00:15:24,200 --> 00:15:28,520
you a timeline of when those things were

00:15:27,140 --> 00:15:29,310
occurring so this is looking at that

00:15:28,520 --> 00:15:31,199
timing file

00:15:29,310 --> 00:15:33,240
and we see that there was an immediate

00:15:31,199 --> 00:15:35,519
scheduled right that was the said

00:15:33,240 --> 00:15:37,470
immediate that we had and that is a

00:15:35,519 --> 00:15:40,860
persistent object to exist over time

00:15:37,470 --> 00:15:43,050
right and then at some point that gets

00:15:40,860 --> 00:15:44,790
executed we have two of those that are

00:15:43,050 --> 00:15:46,740
happening here we have multiple promises

00:15:44,790 --> 00:15:50,970
and this will show you the entire

00:15:46,740 --> 00:15:52,769
lifecycle of these of these things we

00:15:50,970 --> 00:15:54,660
have within nodes these things called

00:15:52,769 --> 00:15:57,139
tick objects those are the next tick

00:15:54,660 --> 00:16:00,360
things that are scheduled on that queue

00:15:57,139 --> 00:16:03,329
we can also see when v8 was actually

00:16:00,360 --> 00:16:05,519
executing code and the interesting thing

00:16:03,329 --> 00:16:09,480
about this is we can actually if we

00:16:05,519 --> 00:16:11,459
drill in and see zoom in on this you see

00:16:09,480 --> 00:16:13,439
it actually gets fairly complicated we

00:16:11,459 --> 00:16:15,720
can see the exact transition points when

00:16:13,439 --> 00:16:18,329
v8 to go you know when v8 is done

00:16:15,720 --> 00:16:20,759
executing the JavaScript code and when

00:16:18,329 --> 00:16:22,620
control returns back to that c++ layer

00:16:20,759 --> 00:16:25,529
and things like the next tick queue and

00:16:22,620 --> 00:16:27,809
the micro task queue get executed this

00:16:25,529 --> 00:16:29,790
is extremely helpful if you know what a

00:16:27,809 --> 00:16:31,350
synchronous activity your application is

00:16:29,790 --> 00:16:33,449
scheduling for you to know what the

00:16:31,350 --> 00:16:36,120
actual performance impact of that code

00:16:33,449 --> 00:16:38,639
is you can see those transition points

00:16:36,120 --> 00:16:40,680
you can see when this you know this big

00:16:38,639 --> 00:16:42,870
json.parse thing you might have in there

00:16:40,680 --> 00:16:44,309
you know how long how much time that's

00:16:42,870 --> 00:16:46,170
taking up and what else

00:16:44,309 --> 00:16:48,180
it is delaying now it takes a bit of

00:16:46,170 --> 00:16:50,339
practice to figure out what you know

00:16:48,180 --> 00:16:54,029
what's going on in here and it's not the

00:16:50,339 --> 00:16:56,399
best use of our interface it is evolving

00:16:54,029 --> 00:16:59,759
over time but it's extremely useful to

00:16:56,399 --> 00:17:03,540
see see these transition points all

00:16:59,759 --> 00:17:05,459
right so let's go back here bootstrap

00:17:03,540 --> 00:17:08,490
trace events something we enabled in in

00:17:05,459 --> 00:17:13,020
core if you use this command line you

00:17:08,490 --> 00:17:17,130
can see let's see here you can see

00:17:13,020 --> 00:17:20,490
exactly when node itself executes its

00:17:17,130 --> 00:17:22,559
various bootstrap phases so when it when

00:17:20,490 --> 00:17:24,809
does it start the event loop when is it

00:17:22,559 --> 00:17:26,549
compiling its own code those kind of

00:17:24,809 --> 00:17:28,890
things so we're going to set up some

00:17:26,549 --> 00:17:32,510
categories we're gonna do v8 we're gonna

00:17:28,890 --> 00:17:37,710
go node VM and we're gonna say node

00:17:32,510 --> 00:17:42,080
bootstrap and I mean look at that

00:17:37,710 --> 00:17:46,740
the but I don't want to give away the

00:17:42,080 --> 00:17:50,180
order of it alright so there we have it

00:17:46,740 --> 00:17:54,330
we can come back in here look at our

00:17:50,180 --> 00:17:55,740
node trace file and we can see in here

00:17:54,330 --> 00:17:57,060
there's a bug in Windows it's not

00:17:55,740 --> 00:17:59,120
actually telling me what it should say

00:17:57,060 --> 00:18:01,560
under this context context apply script

00:17:59,120 --> 00:18:04,470
it should tell me the exact file names

00:18:01,560 --> 00:18:08,190
that I was requiring and that's nodes

00:18:04,470 --> 00:18:09,960
own library and your code that's running

00:18:08,190 --> 00:18:11,670
in here it'll tell you when it was

00:18:09,960 --> 00:18:13,080
required it will tell you exactly how

00:18:11,670 --> 00:18:15,000
long it take to load it how long it took

00:18:13,080 --> 00:18:17,070
to compile it and how long it took to

00:18:15,000 --> 00:18:19,830
execute it and then show you the exact

00:18:17,070 --> 00:18:22,230
ordering of the loading of your

00:18:19,830 --> 00:18:24,000
dependencies over time and you can you

00:18:22,230 --> 00:18:26,370
know if you look at that with the async

00:18:24,000 --> 00:18:28,980
activity information turned on you can

00:18:26,370 --> 00:18:31,860
also see that activity occurring

00:18:28,980 --> 00:18:33,900
relative to turns of the event loop so

00:18:31,860 --> 00:18:36,300
you can see exactly when all of your

00:18:33,900 --> 00:18:40,230
your code is being run and exactly how

00:18:36,300 --> 00:18:42,810
long it's it took dacing traced events

00:18:40,230 --> 00:18:44,670
this is the thing that takes the async

00:18:42,810 --> 00:18:48,180
hooks information and exports it out to

00:18:44,670 --> 00:18:50,880
the to that trace event log and this

00:18:48,180 --> 00:18:54,840
gets quite a bit more complicated so if

00:18:50,880 --> 00:18:58,230
we want to take the same one and we're

00:18:54,840 --> 00:19:00,210
gonna say node base and cooks this is

00:18:58,230 --> 00:19:02,370
this all of this is just built into the

00:19:00,210 --> 00:19:04,460
node binary right now works for 10 and

00:19:02,370 --> 00:19:07,530
11 there's some support in it for 8

00:19:04,460 --> 00:19:09,740
there are some bugs in it so everybody

00:19:07,530 --> 00:19:12,830
should be on 10 anyway so upgrade

00:19:09,740 --> 00:19:15,900
alright so we're gonna run this again

00:19:12,830 --> 00:19:20,970
we're gonna come back here load this

00:19:15,900 --> 00:19:22,110
back up and in here we see there's you

00:19:20,970 --> 00:19:23,340
know quite a bit more detail this is

00:19:22,110 --> 00:19:25,260
where we're seeing all of those promise

00:19:23,340 --> 00:19:27,450
objects the immediate stew timer is the

00:19:25,260 --> 00:19:29,070
next kicks and and we can see the

00:19:27,450 --> 00:19:30,830
execution of these things relative to

00:19:29,070 --> 00:19:37,590
one another

00:19:30,830 --> 00:19:40,530
all right the the Therese Event Viewer

00:19:37,590 --> 00:19:42,330
is good it provides a lot of detail it's

00:19:40,530 --> 00:19:45,600
really hard to process if you have an

00:19:42,330 --> 00:19:47,100
extremely complicated application just

00:19:45,600 --> 00:19:49,020
this last week I was you know at a

00:19:47,100 --> 00:19:51,840
customer we you know in a

00:19:49,020 --> 00:19:54,450
20 and I think was a 20 second benchmark

00:19:51,840 --> 00:19:56,310
of their code we ran through and they

00:19:54,450 --> 00:19:58,140
ended up just in that 20 seconds they

00:19:56,310 --> 00:20:03,840
had created something like 15,000

00:19:58,140 --> 00:20:05,940
promises about 10,000 next ticks and a

00:20:03,840 --> 00:20:07,710
whole bunch else the the the trace event

00:20:05,940 --> 00:20:09,960
file was massive and it just killed

00:20:07,710 --> 00:20:14,270
chrome when I tried to load the you know

00:20:09,960 --> 00:20:16,230
loaded in the viewer it's extremely

00:20:14,270 --> 00:20:17,730
complicated and there's a lot of data

00:20:16,230 --> 00:20:20,280
that's there so we needed a different

00:20:17,730 --> 00:20:22,230
way of viewing it so we created a tool

00:20:20,280 --> 00:20:25,610
called clinic this is all open source

00:20:22,230 --> 00:20:29,400
you can get it from you know yeah NPM

00:20:25,610 --> 00:20:31,350
from clinic use yarn whatever and what

00:20:29,400 --> 00:20:32,910
it is designed to do is help you

00:20:31,350 --> 00:20:37,920
diagnose performance problems within

00:20:32,910 --> 00:20:40,190
your application bubble props is one of

00:20:37,920 --> 00:20:47,190
the tools here and it's very simple

00:20:40,190 --> 00:20:51,450
clinic bubble node again I don't wanna

00:20:47,190 --> 00:20:52,890
give away the result we're gonna let it

00:20:51,450 --> 00:20:54,810
do its thing for a few minutes what it's

00:20:52,890 --> 00:20:57,030
doing right now is it's exporting that

00:20:54,810 --> 00:21:01,650
vet file and then it's going to go

00:20:57,030 --> 00:21:03,600
through and actually analyze the all of

00:21:01,650 --> 00:21:06,690
that async activity and then it's going

00:21:03,600 --> 00:21:09,120
to give you a display of that

00:21:06,690 --> 00:21:11,820
asynchronous activity what this is

00:21:09,120 --> 00:21:14,550
showing you is the aggregate latency

00:21:11,820 --> 00:21:16,290
caused by a synchronous activity within

00:21:14,550 --> 00:21:17,850
Europe and within your application you

00:21:16,290 --> 00:21:19,560
can explore this you can kind of drill

00:21:17,850 --> 00:21:21,450
down into it you can see exactly what

00:21:19,560 --> 00:21:21,960
promise has happened the UI we're still

00:21:21,450 --> 00:21:24,390
working on it

00:21:21,960 --> 00:21:25,680
some application you know some of them

00:21:24,390 --> 00:21:28,800
turn out we have a whole gallery of a

00:21:25,680 --> 00:21:30,150
really crazy artwork from this thing but

00:21:28,800 --> 00:21:32,190
what it's basically showing you is how

00:21:30,150 --> 00:21:34,140
long it took to transition from one

00:21:32,190 --> 00:21:36,090
asynchronous activity within your code

00:21:34,140 --> 00:21:38,910
to another so where's the trace event

00:21:36,090 --> 00:21:40,740
you can see or see it over a time line

00:21:38,910 --> 00:21:42,060
right you can see - the transition

00:21:40,740 --> 00:21:44,880
points what this is going to do is

00:21:42,060 --> 00:21:46,770
aggregate those and show you exactly how

00:21:44,880 --> 00:21:50,370
much time in each part of your

00:21:46,770 --> 00:21:52,500
application node was spending and notice

00:21:50,370 --> 00:21:54,680
doing work right or how much time it was

00:21:52,500 --> 00:21:59,490
spending waiting for work to be done

00:21:54,680 --> 00:22:02,419
okay so let me show you let me ask you

00:21:59,490 --> 00:22:05,610
this one I promise is asynchronous

00:22:02,419 --> 00:22:08,820
it is a trick question do promises

00:22:05,610 --> 00:22:10,260
execute concurrently there's a lot of

00:22:08,820 --> 00:22:12,210
confusion about this I had an argument

00:22:10,260 --> 00:22:14,640
with a guy a couple months ago who is

00:22:12,210 --> 00:22:16,820
just absolutely adamant that promise all

00:22:14,640 --> 00:22:20,130
executed everything concurrently the

00:22:16,820 --> 00:22:22,110
challenge is a does it all right when

00:22:20,130 --> 00:22:24,540
you have an async function right and

00:22:22,110 --> 00:22:28,770
that async function wraps purely

00:22:24,540 --> 00:22:30,750
synchronous code right then it's then

00:22:28,770 --> 00:22:33,150
it's just gonna execute synchronously so

00:22:30,750 --> 00:22:35,190
when you have this promise that all food

00:22:33,150 --> 00:22:36,960
and bar who's gonna run completely bars

00:22:35,190 --> 00:22:40,200
gonna run completely after it all right

00:22:36,960 --> 00:22:41,700
what about promise race same thing races

00:22:40,200 --> 00:22:44,820
that race says whichever one finishes

00:22:41,700 --> 00:22:47,190
first give me that right well if if the

00:22:44,820 --> 00:22:49,200
async functions here are all purely

00:22:47,190 --> 00:22:51,690
synchronous you're gonna have the exact

00:22:49,200 --> 00:22:52,799
same effect foo which is a much longer

00:22:51,690 --> 00:22:55,049
loop it's gonna block the event loop

00:22:52,799 --> 00:22:56,610
that's gonna finish first and so in this

00:22:55,049 --> 00:22:59,400
particular case race is not doing you

00:22:56,610 --> 00:23:01,410
any good now if those functions actually

00:22:59,400 --> 00:23:04,020
have a synchronous activity like this a

00:23:01,410 --> 00:23:06,750
wait time out then yes bar will finish

00:23:04,020 --> 00:23:10,320
first and you know in the promise race

00:23:06,750 --> 00:23:12,210
will do what you expect it to do all

00:23:10,320 --> 00:23:13,470
right running out of time some to skip

00:23:12,210 --> 00:23:14,700
ahead I want to show you this example

00:23:13,470 --> 00:23:16,740
we're a quick so this is a real-world

00:23:14,700 --> 00:23:18,660
example from an application we profile

00:23:16,740 --> 00:23:23,299
just about a week ago all right using

00:23:18,660 --> 00:23:25,080
bubble cross this is the high level

00:23:23,299 --> 00:23:27,780
asynchronous activity happening in this

00:23:25,080 --> 00:23:31,200
application it's a mess because this was

00:23:27,780 --> 00:23:33,870
very poorly written code and we can

00:23:31,200 --> 00:23:39,330
drill down in here and we can see now

00:23:33,870 --> 00:23:41,970
yep there's more activity here let's see

00:23:39,330 --> 00:23:46,049
we can find there's some promise changed

00:23:41,970 --> 00:23:47,730
in here like deep promise chains this

00:23:46,049 --> 00:23:52,049
this is the code that was creating about

00:23:47,730 --> 00:23:53,790
ten thousand promises within a twenty

00:23:52,049 --> 00:23:57,030
second run this is the one I was looking

00:23:53,790 --> 00:23:59,130
for this is extremely poorly written

00:23:57,030 --> 00:24:01,260
scheduling code all this is doing is

00:23:59,130 --> 00:24:03,980
scheduling that this was about a

00:24:01,260 --> 00:24:06,330
thousand promises in a single

00:24:03,980 --> 00:24:08,010
synchronous loop and then they weren't

00:24:06,330 --> 00:24:10,799
allowed to execute and then as soon as

00:24:08,010 --> 00:24:12,750
the the control returned all that

00:24:10,799 --> 00:24:14,850
executed all at once you know one after

00:24:12,750 --> 00:24:16,800
the other and then each of those were

00:24:14,850 --> 00:24:20,550
also scheduling promises I could drill

00:24:16,800 --> 00:24:24,450
down here many more levels I'm have time

00:24:20,550 --> 00:24:25,710
to do that but the point is you know in

00:24:24,450 --> 00:24:26,940
order to be able to visualize and reason

00:24:25,710 --> 00:24:28,560
about this stuff I mean you know the

00:24:26,940 --> 00:24:31,320
whole reason this is such a mess is the

00:24:28,560 --> 00:24:33,990
team forgot to think about when their

00:24:31,320 --> 00:24:36,540
code is being executed they were

00:24:33,990 --> 00:24:38,610
wrapping synchronous code with promises

00:24:36,540 --> 00:24:40,020
thinking that that you know by

00:24:38,610 --> 00:24:41,070
sprinkling a little you know promise

00:24:40,020 --> 00:24:43,020
magic everything was going to be

00:24:41,070 --> 00:24:45,030
asynchronous or they're using it for

00:24:43,020 --> 00:24:46,440
convenience right you know hey if we're

00:24:45,030 --> 00:24:48,990
using promises one place we have to use

00:24:46,440 --> 00:24:50,880
promises everywhere that is a

00:24:48,990 --> 00:24:54,030
misconception about promises and if you

00:24:50,880 --> 00:24:55,710
continually abuse promises that way then

00:24:54,030 --> 00:24:58,740
your code is just gonna get slower and

00:24:55,710 --> 00:25:01,260
slower and slower because of the

00:24:58,740 --> 00:25:03,240
additional allocations of promise these

00:25:01,260 --> 00:25:06,030
objects and all these async up resources

00:25:03,240 --> 00:25:07,980
and all the scheduling overhead doesn't

00:25:06,030 --> 00:25:13,220
mean that your synchronous code is gonna

00:25:07,980 --> 00:25:15,570
run any faster okay so that's that's it

00:25:13,220 --> 00:25:16,710
because I just wanted to kind of peel

00:25:15,570 --> 00:25:18,870
and I'll peel back the curtain little

00:25:16,710 --> 00:25:20,550
bit how the event loop runs how these

00:25:18,870 --> 00:25:21,870
things work together and some of the

00:25:20,550 --> 00:25:24,030
tools you can use to start visualizing

00:25:21,870 --> 00:25:26,850
this stuff feel free

00:25:24,030 --> 00:25:27,840
reach out set up je a snow anywhere if

00:25:26,850 --> 00:25:30,810
you want to talk about some of this

00:25:27,840 --> 00:25:32,580
stuff need some more pointers on kind of

00:25:30,810 --> 00:25:34,320
how these things are going or you know

00:25:32,580 --> 00:25:35,760
how to make your node applications

00:25:34,320 --> 00:25:38,600
faster just reach out and let me know

00:25:35,760 --> 00:25:38,600
Thanks

00:25:39,650 --> 00:25:42,749

YouTube URL: https://www.youtube.com/watch?v=C8dwQw7M8Pk


