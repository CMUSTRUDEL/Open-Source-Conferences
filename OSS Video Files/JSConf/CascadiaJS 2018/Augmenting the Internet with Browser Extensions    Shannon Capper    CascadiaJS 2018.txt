Title: Augmenting the Internet with Browser Extensions    Shannon Capper    CascadiaJS 2018
Publication date: 2018-11-29
Playlist: CascadiaJS 2018
Description: 
	A browser extension can give you the power to add a whole new user experience to any page on the Internet, but it also introduces some unique problems. In this talk, weâ€™ll discuss some of the challenges my team at Textio faced when we built an extension to augment the writing experience on pages across the web, as well as the solutions we discovered for making our plugin low-profile and extensible.

https://2018.cascadiajs.com/
Captions: 
	00:00:00,599 --> 00:00:03,189
Hi, everyone.

00:00:03,189 --> 00:00:07,529
I am really excited to be up here talk to you about browser extensions.

00:00:07,529 --> 00:00:12,910
We are going to talk about what they can do, challenges my team faced when we built ours,

00:00:12,910 --> 00:00:19,530
and most importantly what all this has to do with sandwiches.

00:00:19,530 --> 00:00:24,619
My name is Shannon Capper and I am a front-end developer here in Seattle as a starting company

00:00:24,619 --> 00:00:25,619
called Textio.

00:00:25,619 --> 00:00:32,349
I should tell you a little bit about what I do.

00:00:32,349 --> 00:00:33,349
This is Textio.

00:00:33,349 --> 00:00:37,030
We are an augmented writing platform that lets you know how your language is going to

00:00:37,030 --> 00:00:39,069
perform as you write it.

00:00:39,069 --> 00:00:44,870
We document a score, we use highlights to draw your attention to key phrases and suggest

00:00:44,870 --> 00:00:46,920
replacements for troublesome language.

00:00:46,920 --> 00:00:53,559
We are writing a recruiting aid here and as you can imagine this isn't the ideal user

00:00:53,559 --> 00:00:55,289
experience to write e-mail.

00:00:55,289 --> 00:01:01,999
It is disruptive to come over to our website to write the e-mail and copy and paste it

00:01:01,999 --> 00:01:03,409
to send it.

00:01:03,409 --> 00:01:09,630
Ideally we would want to bring the platform to you.

00:01:09,630 --> 00:01:15,600
We wanted to build something that looks like this.

00:01:15,600 --> 00:01:20,810
This is someone else's page and someone else's e-mail editor but with all the text in U OOSHGS

00:01:20,810 --> 00:01:29,409
that our users know and love -- UI.

00:01:29,409 --> 00:01:31,530
What actually is a browser extension?

00:01:31,530 --> 00:01:37,180
Out of curiosity, how many of you use browser extensions on a regular basis?

00:01:37,180 --> 00:01:39,570
Basically everyone.

00:01:39,570 --> 00:01:42,140
Now how many of you know how to actually build one?

00:01:42,140 --> 00:01:46,189
That is actually a pretty good number.

00:01:46,189 --> 00:01:50,409
You may be smarter than me but I use browser extensions all the time and had no idea how

00:01:50,409 --> 00:01:52,999
they worked until I started building one.

00:01:52,999 --> 00:01:55,479
It turns out they are pretty straightforward.

00:01:55,479 --> 00:01:58,999
A browser extension or a plugin is just a small piece of software that runs inside the

00:01:58,999 --> 00:01:59,999
browser.

00:01:59,999 --> 00:02:08,160
My extensions are built with JavaScript, HTML and CSS.

00:02:08,160 --> 00:02:15,840
There is a standardized web extension backed by the W3C.

00:02:15,840 --> 00:02:34,200
Safari and Internet Explorer use different extensions so it 

00:02:34,200 --> 00:02:35,580
is difficult with them.

00:02:35,580 --> 00:02:39,830
The question you should be asking here is what can't a browser extension do because

00:02:39,830 --> 00:02:42,050
these things are crazy powerful.

00:02:42,050 --> 00:02:46,040
Frankly, it is kind of terrifying knowing all things we are capable of.

00:02:46,040 --> 00:02:49,750
For example, you can get lots of controls over your tabs.

00:02:49,750 --> 00:02:56,010
It can open new ones, read the ones open currently, and close them.

00:02:56,010 --> 00:02:58,040
Pop-up blocks for a good example of this.

00:02:58,040 --> 00:03:02,910
They monitor open tabs and monitor those that detect problems.

00:03:02,910 --> 00:03:08,450
And we can make network requests.

00:03:08,450 --> 00:03:12,680
Mail checker will ping the server regularly to see if you have new mail and if it detects

00:03:12,680 --> 00:03:15,780
new ones it shows you how many.

00:03:15,780 --> 00:03:21,630
We can read, modify and add to the DOM of any web page and this could be used in a creative

00:03:21,630 --> 00:03:22,650
way.

00:03:22,650 --> 00:03:29,110
This is a video of Google's translate which reads the selected text from the DOM and adds

00:03:29,110 --> 00:03:33,530
a tool set to the page to show you the translation.

00:03:33,530 --> 00:03:42,530
Another example is my personal favorite called millennials to snake people and it is awesome.

00:03:42,530 --> 00:03:46,880
What it does is finds any instance of the word millennials on the page and replaces

00:03:46,880 --> 00:03:53,960
it with the word snake people to write results like this.

00:03:53,960 --> 00:03:59,230
Here the plugin is actively modifying text nodes put into the DOM by the house page and

00:03:59,230 --> 00:04:02,670
that could be dangerous but we will get to that later.

00:04:02,670 --> 00:04:08,520
To go back to the earlier question, if browser extensions can do all those amazing and powerful

00:04:08,520 --> 00:04:11,360
things then what can't they do?

00:04:11,360 --> 00:04:12,670
The list is pretty small.

00:04:12,670 --> 00:04:18,000
First, they are tied to the browser so if the browser isn't open, the extension can't

00:04:18,000 --> 00:04:19,000
run.

00:04:19,000 --> 00:04:20,799
Pretty obvious but worth calling out.

00:04:20,799 --> 00:04:24,690
Next, you can't go changing your permissions willy-nilly.

00:04:24,690 --> 00:04:28,320
You have to declare which pages you want to run on and which parts of the web extension

00:04:28,320 --> 00:04:35,150
API you want to access.

00:04:35,150 --> 00:04:40,150
If you want to go change those permissions later on, the extension is temporarily disabled

00:04:40,150 --> 00:04:47,280
until the user agrees to the user's new one.

00:04:47,280 --> 00:05:06,550
Probably the most important thing it can't do is directly interact with the 

00:05:06,550 --> 00:05:08,540
host page's JavaScript.

00:05:08,540 --> 00:05:11,240
They don't even share the same Window object.

00:05:11,240 --> 00:05:16,100
While this is sometimes a problem, for the most part, it is a good thing.

00:05:16,100 --> 00:05:26,430
At CascadiaJS two years ago, it was called out the dealing with the polluted objects.

00:05:26,430 --> 00:05:36,770
The host page might do bad monkey patching and the good news is we don't have to deal

00:05:36,770 --> 00:05:39,370
with any of that because we are in an isolated environment.

00:05:39,370 --> 00:05:44,350
Under the hood, a browser extension is made up of four parts.

00:05:44,350 --> 00:05:51,490
A manifest file containing metadata and specifies permission, there is a pop-up which can be

00:05:51,490 --> 00:05:59,180
invoked by clicking on the extensions icon in the browser's toolbar, there is a background

00:05:59,180 --> 00:06:04,930
script running behind the scenes whenever the browser is open and isn't tied to any

00:06:04,930 --> 00:06:13,990
one tab and has access to the full web extension API, then there is the context scripts and

00:06:13,990 --> 00:06:16,950
they can talk back and forth with the background script.

00:06:16,950 --> 00:06:22,820
If you are used to seeing server-client architecture diagrams you will notice this is looking similar.

00:06:22,820 --> 00:06:26,830
These are the ones that can interact with the DOM and what we will focus on for the

00:06:26,830 --> 00:06:29,310
rest of the talk.

00:06:29,310 --> 00:06:30,780
Let's get back to our story.

00:06:30,780 --> 00:06:36,740
My team decided we wanted to build a com extension.

00:06:36,740 --> 00:06:41,020
We decided to start with Chrome since that is what most users use and we knew we could

00:06:41,020 --> 00:06:42,389
extend to other browsers.

00:06:42,389 --> 00:06:49,460
We wanted to bring Textio to e-mail and supported clients.

00:06:49,460 --> 00:06:52,660
Namely LinkedIn recruiters and Gmail.

00:06:52,660 --> 00:07:04,240
Now that we know the powerful things an extension can do, it should be straightforward to make

00:07:04,240 --> 00:07:08,650
this picture a reality, right?

00:07:08,650 --> 00:07:11,740
No, it wasn't straightforward at all.

00:07:11,740 --> 00:07:17,370
Turns out writing JavaScript that runs on someone else's page is way harder than writing

00:07:17,370 --> 00:07:19,780
JavaScript that runs on your page.

00:07:19,780 --> 00:07:23,270
As a browser extension, you have no control over the page.

00:07:23,270 --> 00:07:30,370
You can't control how its laid out, you can't control the code or the user action and every

00:07:30,370 --> 00:07:32,840
single page is different.

00:07:32,840 --> 00:07:37,260
Not only that, but it is also super easy to abuse your power and change things in a way

00:07:37,260 --> 00:07:45,930
that brick -- breaking news -- breaks the host site.

00:07:45,930 --> 00:07:52,800
We laid down a set of principles and principle one is don't write site specific conditionals

00:07:52,800 --> 00:07:56,669
and number two is don't break the host page.

00:07:56,669 --> 00:07:58,500
Let's start with the first one.

00:07:58,500 --> 00:08:04,960
One problem writing an ex tension that works across multiple hosts is each one is different.

00:08:04,960 --> 00:08:09,300
What if you need to tweak the layout based on the site?

00:08:09,300 --> 00:08:13,770
What if you need the selectors to be different on different pages?

00:08:13,770 --> 00:08:18,979
In the early days of the extension, especially if you start out with a small subset of sites,

00:08:18,979 --> 00:08:25,040
it can be tempting to let site-specific conditionals creep in the database.

00:08:25,040 --> 00:08:28,770
If I am on Gmail do A and if I am on LinkedIn do B.

00:08:28,770 --> 00:08:32,969
This is the path to madness.

00:08:32,969 --> 00:08:39,779
It will be an absolute nightmare to contain.

00:08:39,779 --> 00:08:44,380
Every time you want to support a new site, you have to track down every place scattered

00:08:44,380 --> 00:08:51,880
in the codebase where you have site-specific logic and that will be no fun.

00:08:51,880 --> 00:08:56,259
You might try building solutions in a generic way so they work on every page.

00:08:56,259 --> 00:08:58,379
The key thing here is code reviews.

00:08:58,379 --> 00:09:03,259
The more code that is reusable against all sites, the better.

00:09:03,259 --> 00:09:08,990
Where that isn't possible you can try limiting site specific code to a single configuration

00:09:08,990 --> 00:09:09,990
site.

00:09:09,990 --> 00:09:17,029
One config per site and all the rest of the code can generically consume the site config

00:09:17,029 --> 00:09:20,480
without worry about the host site.

00:09:20,480 --> 00:09:24,699
If you want to add support for a new site all you have to do is build a single new site

00:09:24,699 --> 00:09:28,300
config and you will be good to go.

00:09:28,300 --> 00:09:30,809
Let's see this in action, shall we?

00:09:30,809 --> 00:09:38,149
I am going to exit out of here and let's mirror our screen.

00:09:38,149 --> 00:09:40,110
OK.

00:09:40,110 --> 00:09:41,480
Here we are in Gmail.

00:09:41,480 --> 00:09:48,839
I don't know about you guys but there is something I really miss about writing on my computer.

00:09:48,839 --> 00:09:50,940
Something that feels missing.

00:09:50,940 --> 00:09:54,440
You know what I miss?

00:09:54,440 --> 00:09:56,540
I miss clippy.

00:09:56,540 --> 00:10:01,790
I want to build an extension that brings Clippy back.

00:10:01,790 --> 00:10:13,040
We have a content script running in Gmail and let's see if we can get him into Yahoo.

00:10:13,040 --> 00:10:15,679
Let's look at some code.

00:10:15,679 --> 00:10:19,679
Here we are on in our code editor.

00:10:19,679 --> 00:10:21,579
This is the content script running on Gmail.

00:10:21,579 --> 00:10:25,029
It is really simple and just has three parts.

00:10:25,029 --> 00:10:30,550
First we will get the site config, next pull from mail Windows and if we find a new mail

00:10:30,550 --> 00:10:33,119
Window, we will append to clippy.

00:10:33,119 --> 00:10:35,889
Let's break each one down.

00:10:35,889 --> 00:10:38,990
We only support Gmail right now.

00:10:38,990 --> 00:10:45,740
This has a single item in it which is our mail limit selector.

00:10:45,740 --> 00:10:50,189
This selector is going to be different on every site and this gives us the chance to

00:10:50,189 --> 00:10:52,970
do the right selector.

00:10:52,970 --> 00:10:56,390
Here on guest site config it is simple.

00:10:56,390 --> 00:11:02,800
We will get the domain name off the URL, if it is a supported domain we will return the

00:11:02,800 --> 00:11:06,860
equivalent config.

00:11:06,860 --> 00:11:09,179
We have a set interval here that is simple.

00:11:09,179 --> 00:11:14,519
We will consume that site config and pull the selector off to hold the DOM to see if

00:11:14,519 --> 00:11:16,540
we have new mail Windows.

00:11:16,540 --> 00:11:21,009
New one is marked as found and append clippy.

00:11:21,009 --> 00:11:30,629
Here in append clip', y we will create image-only, show the dif, give styling and size and append

00:11:30,629 --> 00:11:33,050
him to the mail Window.

00:11:33,050 --> 00:11:38,339
I think we will get him working in Yahoo without too many changes and let's see if we can get

00:11:38,339 --> 00:11:39,350
that happening.

00:11:39,350 --> 00:11:46,829
Here, let's add Yahoo has a supported domain.

00:11:46,829 --> 00:11:52,350
We are going to return a Yahoo config.

00:11:52,350 --> 00:11:54,110
Let's define that.

00:11:54,110 --> 00:12:01,379
Here we are going to mirror our config from Gmail.

00:12:01,379 --> 00:12:08,399
Then I cheated and looked up what the selector is so it is going to be editor-container.

00:12:08,399 --> 00:12:09,679
That was it.

00:12:09,679 --> 00:12:11,490
Let's see if this worked.

00:12:11,490 --> 00:12:17,180
I am going to refresh our extension, refresh the page and I don't have any internet.

00:12:17,180 --> 00:12:18,980
That is unfortunate.

00:12:18,980 --> 00:12:23,209
Let's connect and try again.

00:12:23,209 --> 00:12:24,560
There we go!

00:12:24,560 --> 00:12:27,129
We have got Clippy!

00:12:27,129 --> 00:12:31,170
[Applause] >> We kind of have a problem.

00:12:31,170 --> 00:12:34,680
He is a little small?

00:12:34,680 --> 00:12:39,989
Like in Gmail the mail Window is smaller so he seems like a good size but here he kind

00:12:39,989 --> 00:12:41,940
of gets drowned out.

00:12:41,940 --> 00:12:45,279
Let's see if we can use our site config to fix that.

00:12:45,279 --> 00:12:47,449
Let's add site-specific styling.

00:12:47,449 --> 00:12:54,360
Down here in append clippy instead of using the hardcoded value let's assume our site

00:12:54,360 --> 00:12:59,589
config and design a clippysizevalue there.

00:12:59,589 --> 00:13:09,689
Up here in Gmail let's do clippy size is 85 pixels and over in Yahoo let's make him 120.

00:13:09,689 --> 00:13:15,819
Now if everything worked according to plan it should be a little bit bigger.

00:13:15,819 --> 00:13:17,329
Beautiful.

00:13:17,329 --> 00:13:19,660
I think we can do one better.

00:13:19,660 --> 00:13:24,350
Remember principle number one if we can avoid site-specific code, we should, because that

00:13:24,350 --> 00:13:29,029
way we can keep site configs as small as possible and make it super easy to add new sites in

00:13:29,029 --> 00:13:30,029
the feature.

00:13:30,029 --> 00:13:35,910
I think all we want is for clippy to be a certain percentage of the mail Window size.

00:13:35,910 --> 00:13:36,910
Let's do that.

00:13:36,910 --> 00:13:43,389
Go back to the Code Editor and remove the value off site config and down here in append

00:13:43,389 --> 00:13:51,129
clippy let's use the mail height dynamic to determine how big clippy should be.

00:13:51,129 --> 00:14:02,779
I will put the height property off there and that is going to be a string so let's parse

00:14:02,779 --> 00:14:06,509
it into a float.

00:14:06,509 --> 00:14:12,420
Then let's make clippy three tenths the height of the mail Window.

00:14:12,420 --> 00:14:19,189
If everything went according to plan, he should be the same size exactly as he was before

00:14:19,189 --> 00:14:25,139
but now we are doing it in a dynamic way that will work on any host site.

00:14:25,139 --> 00:14:27,839
Awesome.

00:14:27,839 --> 00:14:34,369
[Applause] >> Let's go back to the slides.

00:14:34,369 --> 00:14:37,369
Now we have talked about how to fulfill principle number one.

00:14:37,369 --> 00:14:39,559
Let's talk about principle number two.

00:14:39,559 --> 00:14:41,350
Don't break the host page.

00:14:41,350 --> 00:14:45,230
This one seems obvious but it is a little tricky to follow if you are doing anything

00:14:45,230 --> 00:14:46,879
adding UI to the page.

00:14:46,879 --> 00:14:52,939
Perhaps avoiding the host pages markup might be a better way to identify it.

00:14:52,939 --> 00:14:58,800
Remember we talked about the extension living in an isolate world, remember the one thing

00:14:58,800 --> 00:15:03,579
we share is the DOM.

00:15:03,579 --> 00:15:09,679
If we go making changes to the DOM, especially mutating or deleting stuff that is there,

00:15:09,679 --> 00:15:14,079
the host page won't be expecting it because they don't even know we exist.

00:15:14,079 --> 00:15:15,389
Let's use a simple example.

00:15:15,389 --> 00:15:18,320
Here is a paragraph rendered by a page.

00:15:18,320 --> 00:15:19,890
A paragraph with a little text.

00:15:19,890 --> 00:15:24,779
Let's say we as the extension want the highlight the word hello.

00:15:24,779 --> 00:15:31,369
The main think you could try is delete the text notes in the paragraph and insert a highlight

00:15:31,369 --> 00:15:37,920
span containing the word hello and a new text Node containing the word world but we have

00:15:37,920 --> 00:15:38,920
a problem.

00:15:38,920 --> 00:15:43,859
It turns out this page was rendered using React and frameworks like React really don't

00:15:43,859 --> 00:15:47,040
like it when you go working with the DOM behind their back.

00:15:47,040 --> 00:15:51,689
It is keeping a virtual representation of the DOM in memory and still thinks that text

00:15:51,689 --> 00:15:53,949
Node is there.

00:15:53,949 --> 00:15:58,720
Let's say it goes through another vendor pass and wants to change the paragraph to say hello,

00:15:58,720 --> 00:15:59,839
Seattle.

00:15:59,839 --> 00:16:06,410
Best case scenario is that React blows away the whole paragraph element and replaces it

00:16:06,410 --> 00:16:07,410
with a new one.

00:16:07,410 --> 00:16:13,609
That is kind of a bummer for us because now our highlight is gone but worst case scenario

00:16:13,609 --> 00:16:19,689
is React just tries to replace that one text Node, which is no longer there, and it blows

00:16:19,689 --> 00:16:21,980
up with a non-failure.

00:16:21,980 --> 00:16:27,470
Now we have broken the page and thrown principle number two out the Window.

00:16:27,470 --> 00:16:29,509
This seems bad.

00:16:29,509 --> 00:16:34,519
Highlighting text is kind of a core experience of our product at Textio.

00:16:34,519 --> 00:16:39,500
If your Chrome extension can't add inline spans around the host markup then what are

00:16:39,500 --> 00:16:43,239
we supposed to do?

00:16:43,239 --> 00:16:50,410
We did like many engineers before us and we drew notes and eventually we came up with

00:16:50,410 --> 00:16:56,329
a different highlight solutions entirely and that is how the sandwich was born.

00:16:56,329 --> 00:17:02,359
Despite it having the stupidest code name every it is the highlight of the Chrome extension.

00:17:02,359 --> 00:17:09,689
It is called the sandwich because it is made up of layers that are positioned one on top

00:17:09,689 --> 00:17:15,929
of each other and gave us fine grain control of how we edit the page and don't touch the

00:17:15,929 --> 00:17:17,240
native editor.

00:17:17,240 --> 00:17:23,049
Let's say the text from the native editor look like this but because this is a rich

00:17:23,049 --> 00:17:31,210
text editor users could change the text color or add background color or maybe change font

00:17:31,210 --> 00:17:32,880
sizes.

00:17:32,880 --> 00:17:36,789
Let's say we as the extension want to add highlights to the page.

00:17:36,789 --> 00:17:43,850
A green highlight around our team and orange highlight around connect with you.

00:17:43,850 --> 00:17:48,640
For added fun, when you hover over a highlight, we want to turn the text white.

00:17:48,640 --> 00:17:53,330
In the sandwich, the top layer our native editor.

00:17:53,330 --> 00:17:58,620
We want it on top so it picks up all the mouse and keyboard events like normal and we will

00:17:58,620 --> 00:17:59,830
not touch the markup.

00:17:59,830 --> 00:18:08,559
We will only make it transparent except for the cursor.

00:18:08,559 --> 00:18:11,309
Directly behind the vendor is our text copy.

00:18:11,309 --> 00:18:16,220
This is the exact duplicate of the native editor with all the background colors hitter.

00:18:16,220 --> 00:18:21,440
When you type in editor with the sandwich mode on it this is the text you will see.

00:18:21,440 --> 00:18:26,679
Because we only the copy it is save to modify and turn hovered text white.

00:18:26,679 --> 00:18:37,220
Below that we have colored divs positioned to sit behind the text they highlight.

00:18:37,220 --> 00:18:43,190
The phrases we want to highlight can be calculated where we want to position these in the DOM.

00:18:43,190 --> 00:18:46,139
Last but not least we have the background color copy.

00:18:46,139 --> 00:18:51,890
This is the same as the text copy with the text colors hidden and background colors visible.

00:18:51,890 --> 00:18:56,960
This allows us to draw highlights so they don't get obscured.

00:18:56,960 --> 00:19:05,549
Put it together and you get beautifully highlighted text in someone else's rich text editor.

00:19:05,549 --> 00:19:11,159
We don't have the touch the native markup and are much less likely to break the page.

00:19:11,159 --> 00:19:17,330
Like with most things, our sandwich highlighter came at a price.

00:19:17,330 --> 00:19:20,700
It solved a lot of problems but made new ones.

00:19:20,700 --> 00:19:29,340
When I say we made duplicates it turned out harder to be than I thought.

00:19:29,340 --> 00:19:35,680
Making the contents is easy but making the copy look the same is not.

00:19:35,680 --> 00:19:45,790
We used a combination of still overrides to get them to look right but oh, man, we would

00:19:45,790 --> 00:19:54,019
get one pixel differences throwing off the layout and causing heuristics all in one spot.

00:19:54,019 --> 00:20:02,640
Next, we had a problem picking up mouse events properly.

00:20:02,640 --> 00:20:09,389
They don't propagate down to the other layers.

00:20:09,389 --> 00:20:16,320
We want you to hover over a phrase and change the styling.

00:20:16,320 --> 00:20:24,750
We implemented our own mouse dropping and put a listening on the top most element and

00:20:24,750 --> 00:20:28,510
from there we can calculate if the mouse is within the bounds of highlights.

00:20:28,510 --> 00:20:34,190
If the mouse moves into a highlight, we can take it down to the lower layers as if it

00:20:34,190 --> 00:20:35,870
happened natively.

00:20:35,870 --> 00:20:40,260
This felt like a total hack but we could not find a better way of getting the mouse events

00:20:40,260 --> 00:20:42,220
to hit both layers at once.

00:20:42,220 --> 00:20:48,440
We hit snags also getting the layers to be positioned on top of another.

00:20:48,440 --> 00:20:57,000
In order for this to work, we need a parrot Node positioned as well and remember principle

00:20:57,000 --> 00:21:02,330
two we don't want to break the host page and if we slap a position relative on a parent

00:21:02,330 --> 00:21:03,960
Node we risk doing that.

00:21:03,960 --> 00:21:12,010
To solve the technology, we pulled in an intelligent called the shadow dom.

00:21:12,010 --> 00:21:19,000
I will be brief about why this helped us.

00:21:19,000 --> 00:21:22,640
Let's say this is a piece of the DOM we got from our host page and this is called the

00:21:22,640 --> 00:21:27,410
light DOM as opposed to shadow DOM.

00:21:27,410 --> 00:21:33,769
We made a parent Node with a child note.

00:21:33,769 --> 00:21:42,880
The shadow DOM lets us attach a subtree that is hidden from the main application.

00:21:42,880 --> 00:21:48,080
Within that subtree we can render a div with position relative and from there we can drop

00:21:48,080 --> 00:21:50,070
in our original child Node.

00:21:50,070 --> 00:21:57,360
This is using the slot API which lets you insert like-DOM shadow hosts into the shadow

00:21:57,360 --> 00:21:58,860
tree.

00:21:58,860 --> 00:22:04,259
Now we can add the sandwich layers as siblings.

00:22:04,259 --> 00:22:05,320
This is great.

00:22:05,320 --> 00:22:11,809
To the application, the DOM tree thinks the native editor is a direct child of the shadow

00:22:11,809 --> 00:22:16,850
host but what is rendered to the passenger is -- page is that and we can render till

00:22:16,850 --> 00:22:19,059
our hearts desire.

00:22:19,059 --> 00:22:25,019
How did it work out?

00:22:25,019 --> 00:22:27,070
Was our Chrome extension a success?

00:22:27,070 --> 00:22:34,350
I probably wouldn't be here talking to you if it wasn't so let me show you.

00:22:34,350 --> 00:22:39,570
I am going to mirror my screen again and let's come over here.

00:22:39,570 --> 00:22:41,530
So, here we are in Gmail again.

00:22:41,530 --> 00:22:44,059
Now we are writing a recruiting mail.

00:22:44,059 --> 00:22:48,039
Let's turn on Textio for Chrome.

00:22:48,039 --> 00:22:50,570
Boom!

00:22:50,570 --> 00:22:53,139
Beautifully highlighted text in someone's editor.

00:22:53,139 --> 00:23:01,139
We have highlights in the subject line and body and we have a score.

00:23:01,139 --> 00:23:05,700
An orange phrase means this is causing less people to respond to my recruiting mail.

00:23:05,700 --> 00:23:13,100
Let's replace that and now it is green meaning it will attract people and the score updated.

00:23:13,100 --> 00:23:15,649
We can type in real-time and update.

00:23:15,649 --> 00:23:20,080
If I say wow, this is great.

00:23:20,080 --> 00:23:25,260
Not only do highlights show up in the text I just typed but the ones there move over.

00:23:25,260 --> 00:23:31,539
Then, because this is a rich text editor, let's do terrible things like making the font

00:23:31,539 --> 00:23:35,539
big and adding some text color.

00:23:35,539 --> 00:23:38,380
All of it just kind of works.

00:23:38,380 --> 00:23:45,919
Because we wrote this not as a Gmail editor but a highlight editor it also works in LinkedIn.

00:23:45,919 --> 00:23:52,150
Here we are recruiting our fantastic host and you will notice it is the same experience

00:23:52,150 --> 00:23:53,460
here as it was in Gmail.

00:23:53,460 --> 00:24:00,059
We are happy because we are not texting the native editor's markup' and less likely to

00:24:00,059 --> 00:24:07,059
break a page and this is extensible and we can drop it into any editor and it will work.

00:24:07,059 --> 00:24:15,420
We are using the site configs and it is easy to expand out as Textio grows into other domains.

00:24:15,420 --> 00:24:17,950
Let's wrap this up.

00:24:17,950 --> 00:24:19,220
OK.

00:24:19,220 --> 00:24:27,990
If there is anything I want you guys to get out of this talk it is these three things.

00:24:27,990 --> 00:24:32,830
Besides sick memes, obviously.

00:24:32,830 --> 00:24:37,080
A browser extension is an incredibly powerful tool and really the only limit to what you

00:24:37,080 --> 00:24:39,029
can accomplish with them is your imagination.

00:24:39,029 --> 00:24:44,010
Two, writing code that runs on someone else's site is an adjustment.

00:24:44,010 --> 00:24:51,519
It is a mental shift in show you approach problems and there is going to be a mess of

00:24:51,519 --> 00:24:52,629
challenges.

00:24:52,629 --> 00:24:57,450
Keep the principles in mind and avoid site specific code and don't break someone else's

00:24:57,450 --> 00:24:59,240
page.

00:24:59,240 --> 00:25:02,480
Trust me you will thank yourself later.

00:25:02,480 --> 00:25:03,509
That is it for me.

00:25:03,509 --> 00:25:08,740
I hope you are all inspired to build extensions after today.

00:25:08,740 --> 00:25:12,289
There is good information and the slides from today.

00:25:12,289 --> 00:25:14,463
If you have questions, find me here, or online.

00:25:14,463 --> 00:25:19,360
I would tell you you could find me on Twitter but that would be a lie because I don't have

00:25:19,360 --> 00:25:22,669
one so e-mail or GitHub works great.

00:25:22,669 --> 00:25:24,250

YouTube URL: https://www.youtube.com/watch?v=OguVJXIbHdU


