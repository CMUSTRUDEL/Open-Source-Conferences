Title: Reclaiming the Web with peer-to-peer protocols    Tara Vancil    CascadiaJS 2018
Publication date: 2018-11-29
Playlist: CascadiaJS 2018
Description: 
	Tara is the co-creator of the Beaker Browser, a browser for exploring and building the peer-to-peer Web. She's part of Blue Link Labs, a team of Web enthusiasts behind the Beaker Browser, the Dat protocol, and hashbase.io. She's dedicated to building the Web of tomorrow as a Web for all.

https://2018.cascadiajs.com/
Captions: 
	00:00:00,880 --> 00:00:02,880
Hi, everyone.

00:00:02,880 --> 00:00:08,420
I am excited to be here and really, really excited we get to start the day off and the

00:00:08,420 --> 00:00:13,990
conference talking about peer-to-peer protocols because it is something I think is super fascinating

00:00:13,990 --> 00:00:20,150
and I have interesting stuff to show off later in my talk.

00:00:20,150 --> 00:00:24,800
This talk is called reclaiming the web with peer-to-peer protocols but before I dive in

00:00:24,800 --> 00:00:29,289
and tell you what in the world that is all about, I want to introduce myself.

00:00:29,289 --> 00:00:33,660
I am Tara Vancil and I am a web developer.

00:00:33,660 --> 00:00:39,400
I'm also really, really into anything to do with nails and nail art and I love music,

00:00:39,400 --> 00:00:41,750
especially if it is from Beyonce.

00:00:41,750 --> 00:00:45,351
If you like nails or Beyonce or both we should definitely talk later on.

00:00:45,351 --> 00:00:54,050
I am a web developer but I have spent the last year and a half in a strange role.

00:00:54,050 --> 00:00:59,100
Instead of working on a team where my job is to build websites, I have been building

00:00:59,100 --> 00:01:01,890
a browser with these two guys.

00:01:01,890 --> 00:01:05,940
Pfrazza and mafintosh.

00:01:05,940 --> 00:01:13,369
We have experiments we want to run and figure the browser is the best place to do that.

00:01:13,369 --> 00:01:19,850
The browser is called Beaker and it is experimental way meaning we are doing experiments in the

00:01:19,850 --> 00:01:22,350
science way not that it is buggy.

00:01:22,350 --> 00:01:25,200
It actually works.

00:01:25,200 --> 00:01:26,780
You can download it.

00:01:26,780 --> 00:01:31,780
The cool experience we are running in Beaker is what happens when you put a peer-to-peer

00:01:31,780 --> 00:01:34,859
protocol in the browser.

00:01:34,859 --> 00:01:40,200
Pretty interesting things happen like being able to publish a website from the browser

00:01:40,200 --> 00:01:45,880
and being able to offer experimental peer-to-peer APIs to developers.

00:01:45,880 --> 00:01:50,179
I will tell you a lot more about Beaker and show you Beaker later.

00:01:50,179 --> 00:01:57,479
Before I do that, I want to spend some time to reflect on what even is the web because

00:01:57,479 --> 00:02:01,249
I think it is relevant to your conversation.

00:02:01,249 --> 00:02:02,249
-- our.

00:02:02,249 --> 00:02:08,190
So, I am asking this to reclaim the web and we should probably talk about who took it

00:02:08,190 --> 00:02:11,490
in the first place and what have they done with it.

00:02:11,490 --> 00:02:17,420
We are all here in this room at a conference dedicated to the web so surely the web can't

00:02:17,420 --> 00:02:20,120
be in too much trouble; right?

00:02:20,120 --> 00:02:21,590
I have to agree.

00:02:21,590 --> 00:02:24,790
I am extremely optimistic about the future of the web.

00:02:24,790 --> 00:02:28,530
I am really pleased with where the web is at right now.

00:02:28,530 --> 00:02:33,900
I am really happy to see so many new people still coming to the web every day to learn

00:02:33,900 --> 00:02:37,310
how to build things with HTML, and JavaScript, and CSS.

00:02:37,310 --> 00:02:44,430
I am pleased to see that the tools we depend on like NPM and WebPack and Babel are improving

00:02:44,430 --> 00:02:48,260
to make workflows seamless.

00:02:48,260 --> 00:02:56,450
And I am thrilled browsers are working hard to improve the web and compatibility across

00:02:56,450 --> 00:02:57,450
browsers.

00:02:57,450 --> 00:03:05,180
If you are not optimistic about the web, I might highlight the Chrome Developer summit

00:03:05,180 --> 00:03:06,490
happened this weekend.

00:03:06,490 --> 00:03:13,070
This is an opportunity for Chrome developers to share ideas and prototypes about how the

00:03:13,070 --> 00:03:14,650
web is going to move forward.

00:03:14,650 --> 00:03:21,120
They announced cool proposals like virtual scrolling which should help you improve loading

00:03:21,120 --> 00:03:28,070
as you scroll down a page and other neat stuff was demoed like Houdini which is an improvement

00:03:28,070 --> 00:03:30,180
on how CSS works.

00:03:30,180 --> 00:03:36,560
Seeing the neat announcements earlier this week gave me time to reflect on the wins of

00:03:36,560 --> 00:03:45,650
the web like CSS grid which if I dare say makes com posing layouts kind of fun or the

00:03:45,650 --> 00:03:52,350
fact that Boku has been working hard with the W3C and other browser vendors to build

00:03:52,350 --> 00:03:56,940
a huge test sweep for compatibility across the web.

00:03:56,940 --> 00:04:02,350
The web is making progress and I think it is important to recognize that and the people

00:04:02,350 --> 00:04:08,810
that make it happen because their jobs are not easy.

00:04:08,810 --> 00:04:12,730
Also because the web is a miracle of human cooperation if you think about it.

00:04:12,730 --> 00:04:17,870
When you take a second to think about what the web is it is a miracle it exists and let

00:04:17,870 --> 00:04:20,630
alone that it is improving.

00:04:20,630 --> 00:04:27,220
The web is this strange thing where 7 billion people on earth have come together and decided

00:04:27,220 --> 00:04:32,920
on a language for how we build digital stuff and get it from one computer to another.

00:04:32,920 --> 00:04:42,760
Like, that is absolutely miraculous we pulled that off.

00:04:42,760 --> 00:04:48,860
You have a web page and no matter what context you are browsing in, you have a reasonable

00:04:48,860 --> 00:04:51,020
expectation it will work consistently.

00:04:51,020 --> 00:05:00,270
If you will allow me a moment to be sentimental I just want to say I think that is bad ass.

00:05:00,270 --> 00:05:03,570
This is a talk about reclaiming the web, though.

00:05:03,570 --> 00:05:07,650
Even though I am really optimistic about the web, I am a little bit worried too.

00:05:07,650 --> 00:05:14,970
I am worried about the web isn't perfect and honestly that is OK especially when you think

00:05:14,970 --> 00:05:21,560
about how this web is a weird amorphous set of technologies that we have all agreed to

00:05:21,560 --> 00:05:25,440
use and that is pretty much the only thing binding it together; our shared agreedness

00:05:25,440 --> 00:05:29,310
to use it.

00:05:29,310 --> 00:05:31,600
The web is only 28 years old.

00:05:31,600 --> 00:05:39,880
The first was built in 1990 by Tim Burners-Lee.

00:05:39,880 --> 00:05:45,720
It was only 25 years ago the first mainstream browser was released.

00:05:45,720 --> 00:05:49,300
We are operating on a small time scale here.

00:05:49,300 --> 00:05:52,520
The web is a baby so you would expect it to have some problems.

00:05:52,520 --> 00:05:57,770
The web isn't perfect.

00:05:57,770 --> 00:06:02,910
We can accept that but I think the next step is to ask ourselves how are we going to shape

00:06:02,910 --> 00:06:08,990
the next 30 years and I mean, we, the people in the room who are web developers and people

00:06:08,990 --> 00:06:16,990
who influence standards, we do have say over how the web works.

00:06:16,990 --> 00:06:20,030
We know that the web is going to change because there are standards of bodies and browser

00:06:20,030 --> 00:06:26,419
vendors and other interested parties who want to shake the web but the question is what

00:06:26,419 --> 00:06:30,340
values are why going to choose to uphold in the next 30 years?

00:06:30,340 --> 00:06:32,419
What new features are we going to enable?

00:06:32,419 --> 00:06:34,330
How do we decide those things?

00:06:34,330 --> 00:06:46,949
Oftentimes, I think they are decided by personal experience.

00:06:46,949 --> 00:06:50,940
Some of you probably work with e-commerce and you might be paying more attention to

00:06:50,940 --> 00:06:53,229
the web payments API.

00:06:53,229 --> 00:06:58,060
Or maybe some of you in this room have been the target of a focused-harassment campaign

00:06:58,060 --> 00:07:04,370
on social media and you might have an interest in seeing how the web learns from what we

00:07:04,370 --> 00:07:08,960
have seen about how humans engage online in the last 28 years.

00:07:08,960 --> 00:07:13,990
The web is very, very new and we are still learning so much about how communities work

00:07:13,990 --> 00:07:17,270
online and how humans behave.

00:07:17,270 --> 00:07:21,430
When I think about what I want to web to look like in 30 years, honestly the community bit

00:07:21,430 --> 00:07:24,130
of it is what interests me the most.

00:07:24,130 --> 00:07:29,121
Yeah, the graphics and all the cool technical stuff about the web is amazing and it is what

00:07:29,121 --> 00:07:33,729
makes the web the web but we come to the web because we want to talk to me.

00:07:33,729 --> 00:07:38,860
We want to share interests, make friendships and form communities.

00:07:38,860 --> 00:07:46,169
I am extremely interested to ask how can the web platform itself change, however subtly,

00:07:46,169 --> 00:07:50,550
the ways we interact with each or online.

00:07:50,550 --> 00:07:57,020
Whether you like it or not, this guy right now has a lot of say over how online communities

00:07:57,020 --> 00:07:58,020
work.

00:07:58,020 --> 00:08:02,919
And I am not sure he knew what he was getting into when he started Facebook but the point

00:08:02,919 --> 00:08:08,919
is Facebook is a massive, global online community and we have learned some kind of terrifying

00:08:08,919 --> 00:08:11,110
things about humans interacting with each other online.

00:08:11,110 --> 00:08:16,470
We are mean, we are nasty, we are reactive, we are just not very good at talking to each

00:08:16,470 --> 00:08:19,110
other, are we?

00:08:19,110 --> 00:08:24,970
This guy and other folks are in charge of helping us move forward.

00:08:24,970 --> 00:08:30,540
I frankly don't think they have stepped up to that responsibility very well.

00:08:30,540 --> 00:08:37,750
I want us, as web developers and a web community, to think about what can we do to adjust how

00:08:37,750 --> 00:08:39,330
people talk to each other online?

00:08:39,330 --> 00:08:44,790
Are there some nobs we can turn in terms of the technical architecture of the web that

00:08:44,790 --> 00:08:46,540
can improve the situation?

00:08:46,540 --> 00:08:55,200
I don't know but this question motivated me to work on Beaker and it has been the guiding

00:08:55,200 --> 00:09:01,670
star in my exploration and the experiments we have been running at Beaker.

00:09:01,670 --> 00:09:06,550
So to go back to the question I mentioned earlier, what happens when you put a peer-to-peer

00:09:06,550 --> 00:09:07,550
protocol in the browser?

00:09:07,550 --> 00:09:13,360
Would that be the right knob to turn to maybe make it a little nicer to communicate with

00:09:13,360 --> 00:09:14,990
people online?

00:09:14,990 --> 00:09:16,750
I don't know.

00:09:16,750 --> 00:09:20,940
I can show you some of the experiments we have done and share some of the things we

00:09:20,940 --> 00:09:22,210
have learned in the process.

00:09:22,210 --> 00:09:29,480
Before where do that, let's just take a look at HTTP because this is the knob we turn in

00:09:29,480 --> 00:09:30,480
Beaker.

00:09:30,480 --> 00:09:31,950
The protocol knob.

00:09:31,950 --> 00:09:35,580
This is the distillation of how HTTP works.

00:09:35,580 --> 00:09:46,310
It is a client server model where one person can upload data to let's say Facebook, Twitter,

00:09:46,310 --> 00:09:47,310
WhatsApp.

00:09:47,310 --> 00:09:55,830
A person gets the data from the service and there is nothing wrong with that architecture,

00:09:55,830 --> 00:10:02,820
but I would like to propose HTP and this client server architecture is a big part of why we

00:10:02,820 --> 00:10:10,890
have gotten the way -- a big part of why online communities, massive online communities, have

00:10:10,890 --> 00:10:14,470
turned out to be so problematic.

00:10:14,470 --> 00:10:19,709
In contrast, this is what a web base on a peer-to-peer protocol looks like.

00:10:19,709 --> 00:10:26,610
This is a contrived example but it is a network wherein one individual can connect directly

00:10:26,610 --> 00:10:30,020
to another individual.

00:10:30,020 --> 00:10:34,520
In this case, we are looking at someone sending a message but we can also think of websites

00:10:34,520 --> 00:10:39,610
being transmitted from computer-to-computer and cutting out servers.

00:10:39,610 --> 00:10:44,730
Why don't I just show you Beaker because I think it is a lot more exciting to see this

00:10:44,730 --> 00:10:52,000
stuff in action.

00:10:52,000 --> 00:10:53,000
This is Beaker.

00:10:53,000 --> 00:10:54,910
It is a browser.

00:10:54,910 --> 00:10:59,750
It is not terribly exciting to look at when you are just looking at the start page but

00:10:59,750 --> 00:11:02,839
it works like you would expect a browser to work.

00:11:02,839 --> 00:11:06,770
You can browse HTTP websites.

00:11:06,770 --> 00:11:11,740
This is the Beaker website and nothing remarkable here.

00:11:11,740 --> 00:11:18,110
But if you can see in the top corner there is a tab that says P2P version.

00:11:18,110 --> 00:11:25,800
When I like that it will take me to the peer-to-peer version of this website.

00:11:25,800 --> 00:11:26,800
There is.

00:11:26,800 --> 00:11:28,779
You probably didn't even see that.

00:11:28,779 --> 00:11:31,839
The only thing that's different is the protocol.

00:11:31,839 --> 00:11:37,370
It says dat and that is the protocol we use in Beaker.

00:11:37,370 --> 00:11:39,240
This website doesn't look like anything special.

00:11:39,240 --> 00:11:44,740
It is just a bunch of files, CSS, HTML images, links, everything.

00:11:44,740 --> 00:11:50,740
It works just the way you would expect a browser to work.

00:11:50,740 --> 00:11:56,920
I mentioned that by putting a P2P protocol in the browser we enabled things like publishing

00:11:56,920 --> 00:11:59,290
a website from the browser.

00:11:59,290 --> 00:12:00,290
I am show that off.

00:12:00,290 --> 00:12:07,000
I will go to the top-right menu and click create view and I will create a website using

00:12:07,000 --> 00:12:11,420
a pasted template Beaker provides.

00:12:11,420 --> 00:12:18,340
Beaker will literally create a new URL for me and populate the website with basic template

00:12:18,340 --> 00:12:19,340
files.

00:12:19,340 --> 00:12:22,640
I will click it and it will happen fast.

00:12:22,640 --> 00:12:23,640
Boom.

00:12:23,640 --> 00:12:27,029
We are looking at Beaker's view source tool here.

00:12:27,029 --> 00:12:32,870
I will show you more but let me set the title of the website for now.

00:12:32,870 --> 00:12:36,899
Then I will open it up.

00:12:36,899 --> 00:12:37,899
Here it is.

00:12:37,899 --> 00:12:38,899
It is just a website.

00:12:38,899 --> 00:12:42,529
It doesn't do anything except let you change the background color.

00:12:42,529 --> 00:12:49,250
What is interesting about this is this is a website and I can share the URL with any

00:12:49,250 --> 00:12:55,420
of you and you can download the website and files directly from me.

00:12:55,420 --> 00:12:57,750
I didn't publish the files on a server anywhere.

00:12:57,750 --> 00:13:02,300
I did it all inside the browser.

00:13:02,300 --> 00:13:03,790
How do you edit websites?

00:13:03,790 --> 00:13:11,830
If we jump back to the view source tool we can look at all the files that compose a website.

00:13:11,830 --> 00:13:17,190
Why don't we open index.html and actually edit it.

00:13:17,190 --> 00:13:20,300
I will change this to say hello, Seattle.

00:13:20,300 --> 00:13:22,930
Hit the save button.

00:13:22,930 --> 00:13:26,930
When I refresh I will see the change.

00:13:26,930 --> 00:13:27,930
Cool.

00:13:27,930 --> 00:13:32,630
I want to show off this neat feature we have which is live view loading.

00:13:32,630 --> 00:13:39,590
We put that right into the browser because it is so convenient.

00:13:39,590 --> 00:13:44,750
Like a lot of us in this room who are developers, we probably have a preference about writing

00:13:44,750 --> 00:13:53,650
code like Sublime or VS code.

00:13:53,650 --> 00:13:58,320
This syncs the files to a directory on my computer.

00:13:58,320 --> 00:13:59,320
OK.

00:13:59,320 --> 00:14:13,290
I am going to open this up in Sublime and open the index.html in Sublime and go back

00:14:13,290 --> 00:14:14,290
to this website.

00:14:14,290 --> 00:14:20,459
We have live view loading on and I will edit the H1 tag to say hello from Sublime and when

00:14:20,459 --> 00:14:25,240
I hit save you will see the updates.

00:14:25,240 --> 00:14:26,240
Boom.

00:14:26,240 --> 00:14:29,940
There we go.

00:14:29,940 --> 00:14:34,760
This is neat but I mentioned earlier that Beaker also has peer-to-peer APIs.

00:14:34,760 --> 00:14:38,910
This is really where it gets exciting because static websites are cool and make up a lot

00:14:38,910 --> 00:14:39,910
of the web.

00:14:39,910 --> 00:14:41,940
They are not every part of the web.

00:14:41,940 --> 00:14:47,760
We still need applications where people can have profiles and data linked to their profiles.

00:14:47,760 --> 00:14:50,470
Beaker's APIs are the key to making that possible.

00:14:50,470 --> 00:15:00,160
I am going to open the dev tools and show you a little bit of how this works.

00:15:00,160 --> 00:15:05,329
To start off, we need to get access to the files that compose this website.

00:15:05,329 --> 00:15:21,790
I am going to do that using Beaker's datarchive constructor which basically gives you 

00:15:21,790 --> 00:15:28,740
access to the functions that help you connect to the peer-to-peer network.

00:15:28,740 --> 00:15:32,970
We have a variable that we will be able to work with here.

00:15:32,970 --> 00:15:36,880
Let's start off with just listing all the files in this website.

00:15:36,880 --> 00:15:42,870
You might notice this looks a lot like the Node files API and that was on purpose.

00:15:42,870 --> 00:15:47,470
Let's do files.readdir and we will read the top level directory.

00:15:47,470 --> 00:15:53,230
Then we will console.log the output.

00:15:53,230 --> 00:16:02,970
We are seeing a listing of all files that compose this website.

00:16:02,970 --> 00:16:05,920
There is only 65 of them right now.

00:16:05,920 --> 00:16:09,670
Let's see if we can read an individual file, the content file.

00:16:09,670 --> 00:16:16,209
So files.readFile and let's do index.html file.

00:16:16,209 --> 00:16:23,730
We are looking at the actual content of this page now.

00:16:23,730 --> 00:16:30,040
We can do all sorts of things like readfiles, readfile listing, and we can write two files

00:16:30,040 --> 00:16:31,040
also.

00:16:31,040 --> 00:16:38,690
This gets interesting when you think about storing data in websites.

00:16:38,690 --> 00:16:44,240
I am actually going to overwrite the HTML file for this website.

00:16:44,240 --> 00:16:56,190
Files.writeFile and I am going to replace it with a new h1 tag.

00:16:56,190 --> 00:16:57,190
OK.

00:16:57,190 --> 00:17:02,290
Now when I refresh I get a totally new index with HTML.

00:17:02,290 --> 00:17:06,400
Again, this is sort of a contrived example but I want to take it back to a real world

00:17:06,400 --> 00:17:07,400
example.

00:17:07,400 --> 00:17:13,600
I said I am interested in thinking about how online communities can be shaped by the intelligent

00:17:13,600 --> 00:17:15,470
that underpins them.

00:17:15,470 --> 00:17:23,810
I want to show you an application that we built called Fritter.

00:17:23,810 --> 00:17:25,740
This is Fritter.

00:17:25,740 --> 00:17:31,100
As you can probably guess by the name and appearance, it is inspired by Twitter.

00:17:31,100 --> 00:17:33,059
That was on purpose.

00:17:33,059 --> 00:17:34,059
I really like Twitter.

00:17:34,059 --> 00:17:35,340
I like a lot of things about Twitter.

00:17:35,340 --> 00:17:41,790
I dislike some things about Twitter but I like that it gives me a nice feed, I can follow

00:17:41,790 --> 00:17:47,290
my friends on, and I like that the content is short, sweet, and enjoyable most of the

00:17:47,290 --> 00:17:48,290
time.

00:17:48,290 --> 00:17:53,640
So, we said how far can we get with building something like Twitter using peer-to-peer

00:17:53,640 --> 00:17:55,400
protocols and we got pretty far actually.

00:17:55,400 --> 00:17:57,860
It is pretty cool.

00:17:57,860 --> 00:18:03,380
This doesn't look like much but I will break down the architecture.

00:18:03,380 --> 00:18:05,480
Fritter works in two pieces.

00:18:05,480 --> 00:18:08,900
There is the application itself which is what we are looking at.

00:18:08,900 --> 00:18:17,000
It is a JavaScript application that uses Beaker's APIs to consume a profile and fetch data from

00:18:17,000 --> 00:18:20,870
the peer-to-peer network and render it into a nice feed.

00:18:20,870 --> 00:18:30,800
When I write a post, Beaker uses the writefile API to write a post to my profile.

00:18:30,800 --> 00:18:32,710
Works like you would expect.

00:18:32,710 --> 00:18:36,540
But what does a profile actually look like?

00:18:36,540 --> 00:18:37,540
What is a profile?

00:18:37,540 --> 00:18:41,290
Well, it is not a row and database that lives up in a server somewhere.

00:18:41,290 --> 00:18:44,390
It is just a website.

00:18:44,390 --> 00:18:46,390
This is it.

00:18:46,390 --> 00:18:48,300
It has some metadata.

00:18:48,300 --> 00:18:57,850
My name, my bio, well this is a fake profile, it has information about the people I follow,

00:18:57,850 --> 00:19:02,690
and it contains my posts in JSON.

00:19:02,690 --> 00:19:08,340
This is interesting because we separated the data from the application which is not news.

00:19:08,340 --> 00:19:13,710
We are used to doing that as developers but what is different is your profile on Fritter

00:19:13,710 --> 00:19:15,280
is just a website.

00:19:15,280 --> 00:19:17,799
It is not tied to Fritter.

00:19:17,799 --> 00:19:26,590
If you wanted to customize your own version of Fritter you could do that and you wouldn't

00:19:26,590 --> 00:19:29,670
need to give up your circle of friends or content.

00:19:29,670 --> 00:19:34,140
You could carry on like normal.

00:19:34,140 --> 00:19:38,350
I think this demonstrates a lot of potential for building meaningful applications with

00:19:38,350 --> 00:19:41,770
peer-to-peer protocols.

00:19:41,770 --> 00:19:45,150
This is my demo profile.

00:19:45,150 --> 00:19:48,110
There are posts from my friends, like two friends.

00:19:48,110 --> 00:19:50,090
And people talk to each other.

00:19:50,090 --> 00:19:54,640
I am not going to say this is the ideal architecture for moving forward on the peer-to-peer web

00:19:54,640 --> 00:19:59,080
or it won't have its own kind of problems.

00:19:59,080 --> 00:20:05,890
But it is a kind of community controlled social media and that's really, really exciting to

00:20:05,890 --> 00:20:11,630
me because if there is anything I have learned about being a woman online in the last year

00:20:11,630 --> 00:20:17,250
and a half is that sometimes you really do want to take control over who you do and don't

00:20:17,250 --> 00:20:23,140
talk to because otherwise it gets a little bit noisy.

00:20:23,140 --> 00:20:25,900
So that is a quick and dirty tour of Beaker.

00:20:25,900 --> 00:20:27,850
We are experimenting.

00:20:27,850 --> 00:20:33,490
We are doing a lot of things that are strange and most certainly don't adhere to what is

00:20:33,490 --> 00:20:40,790
standard but we think it is worthwhile to be a little messy and see what happens.

00:20:40,790 --> 00:20:50,100
We don't have the kind of reputation like Apple or Mozilla or Google does to influence

00:20:50,100 --> 00:20:51,100
standards bodies.

00:20:51,100 --> 00:20:55,549
We are just random people who had an idea and we built it.

00:20:55,549 --> 00:20:58,080
We hope you will find it interesting.

00:20:58,080 --> 00:21:02,230
If you want to try out Beaker and see what other people have built I recommend checking

00:21:02,230 --> 00:21:03,240
out my website.

00:21:03,240 --> 00:21:06,650
I have the P2P subdomain on my website.

00:21:06,650 --> 00:21:15,650
I have a huge selection of apps, games, and other things people have built on the peer-to-peer

00:21:15,650 --> 00:21:17,770
web.

00:21:17,770 --> 00:21:23,660
Thank you for coming to learn about Beaker and the peer-to-peer web.

00:21:23,660 --> 00:21:30,220
Come talk to me later and you can check out the slides on my website.

00:21:30,220 --> 00:21:31,220
Thank you so much.

00:21:31,220 --> 00:21:31,221

YouTube URL: https://www.youtube.com/watch?v=2Q9TlvqE9_Y


