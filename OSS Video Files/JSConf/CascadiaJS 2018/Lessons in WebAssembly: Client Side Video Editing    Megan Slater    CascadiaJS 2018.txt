Title: Lessons in WebAssembly: Client Side Video Editing    Megan Slater    CascadiaJS 2018
Publication date: 2018-12-04
Playlist: CascadiaJS 2018
Description: 
	WebAssembly elicits hopes about everything from importing new functionalities into browser based applications, to the potential (and in some circles hoped for) death of JavaScript. This talk is for folks who are curious about the real world applications and limitations of WebAssembly as it exists today. We'll follow along the journey of some intrepid developers as they integrate the popular FFmpeg multimedia framework into a React application for the purposes of editing video client side.

https://2018.cascadiajs.com/
Captions: 
	00:00:02,500 --> 00:00:03,990
Just to get started.

00:00:03,990 --> 00:00:07,710
Anyone who hasn't heard of WebAssembly?

00:00:07,710 --> 00:00:09,790
Great.

00:00:09,790 --> 00:00:15,530
Anyone here who has had a reason to use WebAssembly in a production app?

00:00:15,530 --> 00:00:17,140
All right.

00:00:17,140 --> 00:00:19,520
So we are all about on the same page.

00:00:19,520 --> 00:00:24,279
I would like to invite you back into journey of time to the year 2017.

00:00:24,279 --> 00:00:30,510
Like most of you, I heard about WebAssembly but beyond surface level stuff I didn't know

00:00:30,510 --> 00:00:31,670
much about it.

00:00:31,670 --> 00:00:39,140
I read this headline and thought huh, I guess if WebAssembly really does kill JavaScript

00:00:39,140 --> 00:00:43,170
I will figure that stuff out but it seems like people have wanted JavaScript to die

00:00:43,170 --> 00:00:48,559
for a while and we are still here.

00:00:48,559 --> 00:00:52,470
What does a typical web dev need Wasm for?

00:00:52,470 --> 00:01:01,020
I work for a consulting firm based in Seattle called GEN/UI.

00:01:01,020 --> 00:01:11,070
I think our dev manager described it best when he said our web expertise is in doing

00:01:11,070 --> 00:01:14,790
something weird.

00:01:14,790 --> 00:01:27,020
We built a screen recording and editing app for Chrome OS that runs entirely client-side.

00:01:27,020 --> 00:01:31,700
Our requirements were as follows: The app was meant to look and feel like it was native

00:01:31,700 --> 00:01:37,570
to Chrome OS and act as a competitor to others out there.

00:01:37,570 --> 00:01:43,850
The client requested the video provided video editing capability and needed to run locally

00:01:43,850 --> 00:01:46,180
offline.

00:01:46,180 --> 00:01:56,360
There are a couple ways to develop for Chrome OS and we decided to use Chrome package OS

00:01:56,360 --> 00:02:04,899
and they are essentially web apps given additional hardware APIs.

00:02:04,899 --> 00:02:09,390
As we started to investigate how we wanted to implement the project, it was a surprise

00:02:09,390 --> 00:02:13,599
to discover how much it is possible to do with media in native JavaScript.

00:02:13,599 --> 00:02:19,950
For instance, if the user consents, you can capture their whole screen or Webcam and use

00:02:19,950 --> 00:02:25,880
the native recorder API to record the screen, create a video and allow the user to download

00:02:25,880 --> 00:02:27,920
it to their machine.

00:02:27,920 --> 00:02:31,020
That is possible in any modern web browser.

00:02:31,020 --> 00:02:35,760
There is nothing special about Chromebook that lets you do it.

00:02:35,760 --> 00:02:40,480
If all we needed was a screen recording app we would be set with those tools but the client

00:02:40,480 --> 00:02:44,349
had requested some video editing capabilities.

00:02:44,349 --> 00:02:49,349
As a result, we started to get into a realm of things that are technically possible in

00:02:49,349 --> 00:02:53,480
JavaScript that is just not a great idea for a variety of reasons.

00:02:53,480 --> 00:03:00,180
For instance, if you wanted to create a water mark you can create a media stream that collects

00:03:00,180 --> 00:03:02,519
data from a canvas element.

00:03:02,519 --> 00:03:07,920
You can then draw your watermark on to every frame of that canvas element and merge it

00:03:07,920 --> 00:03:14,300
into the stream from your screen recording but unsurprisingly it is too memory intensive.

00:03:14,300 --> 00:03:18,540
The resulting videos were kind of like watching a very badly dubbed foreign film.

00:03:18,540 --> 00:03:24,180
You have got all the pieces there but they don't line up.

00:03:24,180 --> 00:03:29,129
Another video editing feature we wanted to implement was trimming or shortening the video.

00:03:29,129 --> 00:03:34,379
It turns out you can actually do that in plain JavaScript so long as you only want to trim

00:03:34,379 --> 00:03:35,720
the end of the video.

00:03:35,720 --> 00:03:40,980
If you want to trim the beginning, you are out of luck, at least in Chrome.

00:03:40,980 --> 00:03:46,690
That brings us to functionality that simply isn't possible in native JavaScript.

00:03:46,690 --> 00:03:51,239
Once you create that WebM file you are done.

00:03:51,239 --> 00:03:57,520
There is no way to add a watermark or filter after the fact and it isn't possible to re-encode

00:03:57,520 --> 00:03:58,520
the video.

00:03:58,520 --> 00:04:06,720
The media recorder API gives you a WebM so if you want a gif or MP4 you can't do that

00:04:06,720 --> 00:04:07,910
with native functionality.

00:04:07,910 --> 00:04:14,379
At this point, we went back to the client and recommended a server-side only solution.

00:04:14,379 --> 00:04:19,220
There are two big reasons for this.

00:04:19,220 --> 00:04:26,040
Video editing is a memory intensive process and Chromebooks are meant to do most work

00:04:26,040 --> 00:04:28,810
from the Cloud by design.

00:04:28,810 --> 00:04:33,270
And client side video editing pushes the limits on what is possible today.

00:04:33,270 --> 00:04:42,270
We had two people working on this without an infinite budget.

00:04:42,270 --> 00:04:51,250
The client asked us to move ahead with a client-side only implementation eventually.

00:04:51,250 --> 00:04:56,750
This set us off on the journey of determining what is possibly limiting.

00:04:56,750 --> 00:05:02,530
We determined video editing isn't possible in native JavaScript we needed to find a way

00:05:02,530 --> 00:05:11,250
to run a code that is not native JavaScript.

00:05:11,250 --> 00:05:14,550
Running non-JS code in a browser has a long history.

00:05:14,550 --> 00:05:20,530
Anyone remember this thing called Flash?

00:05:20,530 --> 00:05:21,530
Anyone?

00:05:21,530 --> 00:05:23,370
It is kind of obscure.

00:05:23,370 --> 00:05:25,070
Any ActionScript devs out there?

00:05:25,070 --> 00:05:29,190
Any OUBT about Silver Light?

00:05:29,190 --> 00:05:38,400
You may have heard WebAssembly isn't just another way to write plugins and that is true

00:05:38,400 --> 00:05:44,130
but without understanding more about plugins in general it is hard to know why the comparison

00:05:44,130 --> 00:05:45,130
is made.

00:05:45,130 --> 00:05:48,120
The '90s are in again.

00:05:48,120 --> 00:05:49,860
Let's go back to 1995.

00:05:49,860 --> 00:06:00,069
We are all wearing JNCOs and the Slater guy is this guy.

00:06:00,069 --> 00:06:06,639
Your browser of choice is Netscape and they just released the Netscape plugin API or NP

00:06:06,639 --> 00:06:13,340
API which was the first way to develop plugins or browser extension and handle media from

00:06:13,340 --> 00:06:15,060
within the browser.

00:06:15,060 --> 00:06:19,760
What happened was the browser would come across content it couldn't handle and detect the

00:06:19,760 --> 00:06:27,030
file type and load the appropriate plugins that will run in place on your web page.

00:06:27,030 --> 00:06:31,750
As of today, NP API is deprecated in every browser.

00:06:31,750 --> 00:06:43,410
That is because the Advent of HTML5 means the browser can handle a lot of things natively

00:06:43,410 --> 00:06:47,509
that would otherwise have been handled by plugins.

00:06:47,509 --> 00:06:51,419
Plugins didn't actually fully die with NP API.

00:06:51,419 --> 00:06:59,349
Google released the pepper API which is a build chain that produces binary file types

00:06:59,349 --> 00:07:07,740
native client or pepper native.

00:07:07,740 --> 00:07:14,200
It was meant to provide a more secure, less complex alternative to NP API.

00:07:14,200 --> 00:07:22,740
You can recompile libraries written in C or C++ and that could be run within the browser

00:07:22,740 --> 00:07:24,080
and accessed in JavaScript.

00:07:24,080 --> 00:07:28,810
For the WebAssembly fans in the crowd this may sound familiar.

00:07:28,810 --> 00:07:34,740
Why aren't we talking about pepper and how it harkens the death of the most widely used

00:07:34,740 --> 00:07:37,889
program language?

00:07:37,889 --> 00:07:45,470
An open standard for pepper was not created and they were only supported on Chrome, Chromium

00:07:45,470 --> 00:07:48,540
and blink-base browsers.

00:07:48,540 --> 00:07:54,199
Portable native client is deprecated for every platform except Chromebook but we were building

00:07:54,199 --> 00:07:58,819
for Chromebooks so let's put a pen in that.

00:07:58,819 --> 00:08:04,770
WebAssembly, like portable native client, takes advantage of common hardware capabilities

00:08:04,770 --> 00:08:13,919
to deliver native or near native performance and allows libraries written in C, C++ and

00:08:13,919 --> 00:08:18,240
rest into a Wasm format.

00:08:18,240 --> 00:08:25,669
Developers can write directly in WebAssembly for the super nerds out there.

00:08:25,669 --> 00:08:31,020
Unlike pepper WebAssembly is an open standard and has been adopted by every modern browser.

00:08:31,020 --> 00:08:35,970
It is really something that you can use and deliver to the vast majority of the web.

00:08:35,970 --> 00:08:41,240
That doesn't actually say so much about what is great about WebAssembly in the first place,

00:08:41,240 --> 00:08:43,330
or why we would want to use C or C++.

00:08:43,330 --> 00:08:49,980
There are a couple reasons why you might use WebAssembly in your application.

00:08:49,980 --> 00:08:52,310
The first of these is performance.

00:08:52,310 --> 00:08:57,020
Performance on WebAssembly is faster than native JavaScript and that is mostly due to

00:08:57,020 --> 00:09:13,440
a lack of dynamic typing in WebAssembly.

00:09:13,440 --> 00:09:17,880
You might look into WebAssembly if you have a particularly heavy operation you could perform

00:09:17,880 --> 00:09:21,990
in JavaScript but prefer not to.

00:09:21,990 --> 00:09:28,910
Every single page web application framework has a DOM diffing operation.

00:09:28,910 --> 00:09:34,870
It is a heavy thing to do and it can have negative performance implications for updating

00:09:34,870 --> 00:09:38,160
your page particularly in component-heavy scenario.

00:09:38,160 --> 00:09:43,060
Glimmer, which is the DOM rendering engine by the Ember team has an existing build that

00:09:43,060 --> 00:09:48,941
leverages WebAssembly for this purpose and that is a methodology that should result in

00:09:48,941 --> 00:09:50,950
a much faster rendering engine.

00:09:50,950 --> 00:09:56,010
I am definitely not saying that because of the primary architecture of Glimmer is speaking

00:09:56,010 --> 00:09:57,870
later today.

00:09:57,870 --> 00:10:02,450
There are folks looking into this as well for React.

00:10:02,450 --> 00:10:09,600
Performance aside, the second reason you may want to use Wasm speaks to video editing.

00:10:09,600 --> 00:10:15,990
You cannot edit video in JavaScript but you can edit video in C++.

00:10:15,990 --> 00:10:27,540
You can do several things in C++ or Rest like video editing, platform immolation and games.

00:10:27,540 --> 00:10:35,940
Wasm was built for our use case and we needed to choose a video editing library we can use.

00:10:35,940 --> 00:10:41,450
It was important to find a library because there were only two of us and we had neither

00:10:41,450 --> 00:10:47,019
the budget or expertise to build something from scratch.

00:10:47,019 --> 00:10:53,390
It turns out there are not tons of video editing options in C++ or Rust and that may be due

00:10:53,390 --> 00:11:04,709
to FFmpeg which is a command line tool that supports adding watermark or tripping or cropping

00:11:04,709 --> 00:11:10,610
video or anything you might want to do with it.

00:11:10,610 --> 00:11:16,160
FFmpeg could be used through portable native client or WebAssembly and we were unable to

00:11:16,160 --> 00:11:20,930
find another good candidate.

00:11:20,930 --> 00:11:32,540
The first thing we did was go to the mpm registry and there is an FFmpeg.

00:11:32,540 --> 00:11:39,490
I am grateful to the author of this package and the person who forked it and added extra

00:11:39,490 --> 00:11:40,490
documentation.

00:11:40,490 --> 00:11:44,899
Without these folks, we would have been lost but these were enough bread crumbs for us

00:11:44,899 --> 00:11:48,519
to figure out how to do this.

00:11:48,519 --> 00:11:49,800
Getting back to my MPM install.

00:11:49,800 --> 00:11:53,660
I saw a couple concerning things off the bat.

00:11:53,660 --> 00:11:54,850
First is the size.

00:11:54,850 --> 00:12:04,280
The entirety of FFmpeg is about 15 bytes and that is a lot to load and a lot to ask of

00:12:04,280 --> 00:12:07,060
users to download.

00:12:07,060 --> 00:12:11,880
The default build includes tons of functionality we didn't plan on using.

00:12:11,880 --> 00:12:22,190
It also includes the H2-64 kodak which was still pat patented.

00:12:22,190 --> 00:12:26,100
This is an old version, also.

00:12:26,100 --> 00:12:31,880
We came to the conclusion there is an existing MPM install for this library, but we needed

00:12:31,880 --> 00:12:35,389
to compile our own Wasm file.

00:12:35,389 --> 00:12:39,389
This is the point at which we started to get into technologies that JS devs don't tend

00:12:39,389 --> 00:12:47,779
to use on a day to day basis and the first is called Emscripten.

00:12:47,779 --> 00:12:52,260
For those that haven't done a lot of this thing it is vaguely analogous to a tool like

00:12:52,260 --> 00:12:53,890
Babel.

00:12:53,890 --> 00:13:00,510
It takes uncompiled C++ library and builds it in a way that a Wasm is produced.

00:13:00,510 --> 00:13:02,510
You can pass in various build options.

00:13:02,510 --> 00:13:09,040
If you want to build your Wasm binary in a way it is compatible with web workers you

00:13:09,040 --> 00:13:13,920
will do that as part of the overall Emscripten and build command.

00:13:13,920 --> 00:13:15,810
That is a lot of high level information.

00:13:15,810 --> 00:13:18,900
Let's bring it down.

00:13:18,900 --> 00:13:24,920
The following example is a little hello, world written in C. Like most of you I don't program

00:13:24,920 --> 00:13:34,750
in C# but the main method is what runs when the app loads.

00:13:34,750 --> 00:13:40,480
We imported the standard input and output library.

00:13:40,480 --> 00:13:46,110
In a C# application this prints to the console and in our app prints to the JavaScript console

00:13:46,110 --> 00:13:49,470
but we will display it in the DOM also.

00:13:49,470 --> 00:13:54,090
Now we need to compile our hello world to a Wasm file.

00:13:54,090 --> 00:13:57,810
You can do that in Emscripten with the following command.

00:13:57,810 --> 00:14:02,880
You can see we do need to specify Wasm and that is because Emscripten can compile to

00:14:02,880 --> 00:14:04,670
other formats too.

00:14:04,670 --> 00:14:14,620
And dash 0 output to HTML lets us know I want Emscripten to build the page rather than just

00:14:14,620 --> 00:14:17,010
compile a binary.

00:14:17,010 --> 00:14:19,610
Let's look at the web page.

00:14:19,610 --> 00:14:23,750
There is a lot more going on than just LEL hello world.

00:14:23,750 --> 00:14:31,430
The default gives you a page with a console you can use to see the Wasm output and it

00:14:31,430 --> 00:14:35,130
has JavaScript glue code.

00:14:35,130 --> 00:14:46,690
If this was a Thanksgiving turkey drawing tutorial we are at this strep drawing an outline

00:14:46,690 --> 00:14:47,690
of the hand.

00:14:47,690 --> 00:14:53,620
You know what comes next?

00:14:53,620 --> 00:14:55,269
We don't need hello, world.

00:14:55,269 --> 00:14:59,760
We need FFmpeg and there are a few steps in between.

00:14:59,760 --> 00:15:13,950
It is worth just trying here to convert FFmpeg and see what happens next.

00:15:13,950 --> 00:15:18,329
Make is a Unix tool.

00:15:18,329 --> 00:15:31,330
And clang is a front end compilation for interface and gcc is the GNU/Unix.

00:15:31,330 --> 00:15:42,130
This is the root folder of the FFmpeg library.

00:15:42,130 --> 00:15:51,620
We need to use the project's make file and substitute cling and gcc with the own Emscripten

00:15:51,620 --> 00:15:52,810
build tool.

00:15:52,810 --> 00:15:54,980
Piece of cake.

00:15:54,980 --> 00:16:00,870
In case you thought it was cake, let me assure you it isn't.

00:16:00,870 --> 00:16:09,130
Emscripten built their own tool to help you substitute for clang and gcc.

00:16:09,130 --> 00:16:12,529
It is called M con emconfigure.

00:16:12,529 --> 00:16:28,230
We will run emmake make and that should build the library into the format and bit code.

00:16:28,230 --> 00:16:34,040
Assuming everything is well, we can run a command similar to the hello, world command

00:16:34,040 --> 00:16:37,560
from earlier but of course, everything hasn't gone well.

00:16:37,560 --> 00:16:43,920
After about 20 minutes of compilation, emmake make has an error generating deep from within

00:16:43,920 --> 00:16:46,300
the heart of this massive library.

00:16:46,300 --> 00:16:53,829
Anyone who has struggled to get builds to translate knows the pain that can accompany

00:16:53,829 --> 00:16:58,029
production builds particularly as they become more complex.

00:16:58,029 --> 00:17:03,490
Building a project in C# isn't different and compiling tat project into a format it was

00:17:03,490 --> 00:17:06,220
never intended for adds a greater degree of complexity.

00:17:06,220 --> 00:17:10,300
Looking at the hello, world.

00:17:10,300 --> 00:17:17,449
C from earlier it seems reasonable to debug the process even though we are not C# developers.

00:17:17,449 --> 00:17:22,900
It didn't see reasonable to debug this giant make file and dive in the heart of this legacy

00:17:22,900 --> 00:17:27,010
framework.

00:17:27,010 --> 00:17:33,790
Emconfigure makes assumptions about your C# base build environment that may not be true.

00:17:33,790 --> 00:17:37,880
It was necessary to go in and replace every reference to the existing build change.

00:17:37,880 --> 00:17:48,690
Emscripten can't use anything using ASM and that is used in any C# libraries to provide

00:17:48,690 --> 00:17:51,260
compiler instructions to gcc.

00:17:51,260 --> 00:17:58,960
Since we are not building with gcc we need to pass the option to build without this.

00:17:58,960 --> 00:18:03,669
And finally, Emscripten will not convert every possible application.

00:18:03,669 --> 00:18:10,380
In the end we prevailed.

00:18:10,380 --> 00:18:20,530
Here we are looking at a video that has been created in native JavaScript through a screen

00:18:20,530 --> 00:18:22,230
recording of a YouTube clip.

00:18:22,230 --> 00:18:27,310
Our media recorder returned a blob we can convert to a file and save to the user's local

00:18:27,310 --> 00:18:28,310
machine.

00:18:28,310 --> 00:18:35,039
You will notice we cannot seek through the video and this is due to a Chrome-specific

00:18:35,039 --> 00:18:39,940
bug where their mediator recorder doesn't create key frames as it reports therefore

00:18:39,940 --> 00:18:46,380
the find of file created doesn't know important things.

00:18:46,380 --> 00:18:51,360
The client wanted to add trim functionality to the app and that makes total sense.

00:18:51,360 --> 00:18:57,320
We have started screen recordings for getting to set-up our screen and needing to trim out

00:18:57,320 --> 00:18:59,710
the first bit.

00:18:59,710 --> 00:19:01,669
This is where FFmpeg comes in handy.

00:19:01,669 --> 00:19:14,970
If we run our FFmpeg we will ask it to trim to the desired length.

00:19:14,970 --> 00:19:23,000
I compiled my FFmpeg build, create a new web worker and listen to make sure that worker

00:19:23,000 --> 00:19:28,760
is ready, once everything is loaded I will post a message containing all the information

00:19:28,760 --> 00:19:32,760
that FFmpeg needs to kick off a trim operation.

00:19:32,760 --> 00:19:39,559
We can see the type of thing I want to run is called run and that is the default or main

00:19:39,559 --> 00:19:49,039
method in FFmpeg and I have passed in data which is actually an array buffer.

00:19:49,039 --> 00:19:55,200
Finally, I pass in the same arguments I would pass in if I were using FFmpeg from the command

00:19:55,200 --> 00:19:56,200
line.

00:19:56,200 --> 00:20:00,030
We have got a dash-SS where you start the video.

00:20:00,030 --> 00:20:03,530
Dash T is how long the video is.

00:20:03,530 --> 00:20:06,960
Dash c copy means to use the existing kodak.

00:20:06,960 --> 00:20:13,210
Let's see what that looks like.

00:20:13,210 --> 00:20:19,200
I kicked off the FFmpeg by default in the background and we can see before too long

00:20:19,200 --> 00:20:20,490
we get a little video.

00:20:20,490 --> 00:20:22,169
It is different than it was before.

00:20:22,169 --> 00:20:26,160
It is only two seconds long.

00:20:26,160 --> 00:20:30,480
That being said, there are some important caveats for using this technology.

00:20:30,480 --> 00:20:36,780
The last video editing feature was to provide crop and that is in case the user wants to

00:20:36,780 --> 00:20:40,520
only display a portion of what they have created in their video.

00:20:40,520 --> 00:20:44,930
You can see we have kicked off our operation, we are getting lots of logging output from

00:20:44,930 --> 00:20:46,580
FFmpeg and that is great.

00:20:46,580 --> 00:20:55,580
We know something is happening but that video is only a minute long and we are still watching

00:20:55,580 --> 00:21:01,280
it convert so we can't put that in front of the user, obviously.

00:21:01,280 --> 00:21:02,950
The other options were really fast?

00:21:02,950 --> 00:21:03,950
What is up?

00:21:03,950 --> 00:21:08,909
I told you performance in WebAssembly is supposed to be much better, right?

00:21:08,909 --> 00:21:13,360
There are two things happening here that cause performance issues.

00:21:13,360 --> 00:21:18,710
One is just that re-encoding takes a little more time than copying the exist code act.

00:21:18,710 --> 00:21:23,100
This operation would be a little slower from the command line but not by a factor of about

00:21:23,100 --> 00:21:25,679
a 1,000 which is what we have here.

00:21:25,679 --> 00:21:30,760
It turns out when Emscripten provides the conversion there are a few patterns in C++

00:21:30,760 --> 00:21:35,870
that convert but have implications.

00:21:35,870 --> 00:21:40,040
Code that relies on X86 behavior.

00:21:40,040 --> 00:21:45,920
And yes, I had to look at stuff up there.

00:21:45,920 --> 00:21:50,000
In theory, could we address these performance issues and patch them in the same way we watch

00:21:50,000 --> 00:21:52,420
the code causing conversion problems?

00:21:52,420 --> 00:21:58,860
Or add in WebAssembly specific composition applications to compensate?

00:21:58,860 --> 00:22:02,840
The truth is I don't know.

00:22:02,840 --> 00:22:09,600
We did haven't the budget to become all-knowing video Wasm encoding masters and who does,

00:22:09,600 --> 00:22:10,730
really?

00:22:10,730 --> 00:22:16,270
It is worth mentioning when WebAssembly shipped to all browsers it shipped as an MVP.

00:22:16,270 --> 00:22:20,560
A ton of functionality is coming down the pipeline that might help support the issues

00:22:20,560 --> 00:22:27,420
we had with FFmpeg and one is multi-threaded support.

00:22:27,420 --> 00:22:36,540
Wasm is looking to support garbage collection will opens the doors beyond C++ and Rust.

00:22:36,540 --> 00:22:40,600
Since we were on the Chromebook platform we looked at using the pepper build change and

00:22:40,600 --> 00:22:47,690
an FFmpeg process is defined there and the result is quite a bit faster than our WebAssembly

00:22:47,690 --> 00:22:48,690
binary.

00:22:48,690 --> 00:22:55,260
Perhaps, unsurprisingly, the performance heavy conversions take time and produce an unacceptable

00:22:55,260 --> 00:23:00,550
user experience on the Chromebooks due to their lightweight processor.

00:23:00,550 --> 00:23:02,720
Is this a story on why you should not use WebAssembly?

00:23:02,720 --> 00:23:04,280
Not at all.

00:23:04,280 --> 00:23:07,110
We learned a lot and I want to share those takeaways.

00:23:07,110 --> 00:23:18,220
First, FFmpeg was the wrong library to learn about WebAssembly and C++ in the first place.

00:23:18,220 --> 00:23:29,200
If you are evaluating a new C++ library you think you mind like to use there are well-known

00:23:29,200 --> 00:23:34,429
patterns you can check for to give you a good idea about whether you should proceed.

00:23:34,429 --> 00:23:39,020
Portability guidelines can be found on the Emscripten website.

00:23:39,020 --> 00:23:45,990
This is where it is good idea to have someone with C++ expertise to determine if your library

00:23:45,990 --> 00:23:50,660
contains these and how difficult it is to patch them.

00:23:50,660 --> 00:23:55,669
The Rust language was designed with the web in mind and looks to support Wasm.

00:23:55,669 --> 00:24:03,530
If the functionality you are looking in exists in C++ and Rust it is probably a good idea

00:24:03,530 --> 00:24:05,150
to use Rust.

00:24:05,150 --> 00:24:14,220
WebAssembly is helping pave the way to use the browser as a true application platform.

00:24:14,220 --> 00:24:27,710
For the average JavaScript converting into Wasm is still a problem.

00:24:27,710 --> 00:24:32,010
As Wasm becomes more mainstream, I expect to see better tooling, more libraries and

00:24:32,010 --> 00:24:34,529
simpler processes become more prevalent.

00:24:34,529 --> 00:24:39,100
In the mean time we may all be consuming WebAssembly in frameworks long before we ever have a reason

00:24:39,100 --> 00:24:41,240
to create things ourselves.

00:24:41,240 --> 00:24:42,790

YouTube URL: https://www.youtube.com/watch?v=ziXYqUZqaEk


