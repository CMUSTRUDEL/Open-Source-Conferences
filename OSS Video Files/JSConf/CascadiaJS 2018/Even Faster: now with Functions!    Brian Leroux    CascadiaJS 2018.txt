Title: Even Faster: now with Functions!    Brian Leroux    CascadiaJS 2018
Publication date: 2018-12-10
Playlist: CascadiaJS 2018
Description: 
	The secret weapon of serverless architectures is extremely fast deployments with zero downtime. Surgical deploys allow for updating a single function in place within 1 second. All this adds up to faster iterations, which means quicker turnaround and that equals: super stoked devs!

https://2018.cascadiajs.com/
Captions: 
	00:00:00,020 --> 00:00:05,220
everyone super stoked to be here I am

00:00:03,510 --> 00:00:08,700
very happy to be back in the Pacific

00:00:05,220 --> 00:00:09,960
Northwest I'm from Vancouver and I've

00:00:08,700 --> 00:00:13,170
been in San Francisco and it's been

00:00:09,960 --> 00:00:15,750
pretty smoky lately so we're going to

00:00:13,170 --> 00:00:17,810
basically write a bunch of code day it

00:00:15,750 --> 00:00:19,710
whoops I might just do that in node

00:00:17,810 --> 00:00:23,519
anybody know what happens when you do

00:00:19,710 --> 00:00:26,849
this it's pretty funny well let's say I

00:00:23,519 --> 00:00:30,359
just want to see it's like it's a

00:00:26,849 --> 00:00:35,160
terrible type of whoops I wanted to see

00:00:30,359 --> 00:00:38,820
if my screens readable it seems to be so

00:00:35,160 --> 00:00:39,930
Java scripts not so great at math we're

00:00:38,820 --> 00:00:42,090
not gonna talk about that say we're

00:00:39,930 --> 00:00:45,210
gonna talk about functions is anyone in

00:00:42,090 --> 00:00:48,420
here deploying AWS lambda into

00:00:45,210 --> 00:00:53,660
production today okay

00:00:48,420 --> 00:00:55,710
quite a few right on so I'm down with

00:00:53,660 --> 00:00:58,170
making this little interactive so you

00:00:55,710 --> 00:01:03,059
can yell at me what's the number one

00:00:58,170 --> 00:01:08,340
problem right now is serverless cold

00:01:03,059 --> 00:01:11,580
start cold starts one anything else any

00:01:08,340 --> 00:01:13,320
code okay all right those are those are

00:01:11,580 --> 00:01:15,990
pretty good I we're gonna touch on both

00:01:13,320 --> 00:01:17,400
those I I would postulate the actual

00:01:15,990 --> 00:01:22,080
problem with services nobody cares

00:01:17,400 --> 00:01:24,659
nobody cares so you can deploy a static

00:01:22,080 --> 00:01:26,670
website today to just about you know the

00:01:24,659 --> 00:01:28,680
entire Internet in a few seconds it'll

00:01:26,670 --> 00:01:30,810
be available to just about anybody in

00:01:28,680 --> 00:01:32,400
about 10 milliseconds you just github

00:01:30,810 --> 00:01:38,579
pages you could use an epiphyte could

00:01:32,400 --> 00:01:42,240
use surge and then the backend you know

00:01:38,579 --> 00:01:44,850
nobody cares we we do these things and

00:01:42,240 --> 00:01:46,649
and you know there's just there's

00:01:44,850 --> 00:01:48,210
there's no real motivation for this and

00:01:46,649 --> 00:01:50,250
I think a lot of people are getting into

00:01:48,210 --> 00:01:54,090
the service world but they're wondering

00:01:50,250 --> 00:01:56,369
why they're supposed to care and so my

00:01:54,090 --> 00:01:57,979
job today is gonna be to try and

00:01:56,369 --> 00:02:01,740
demonstrate to you why you might care

00:01:57,979 --> 00:02:04,020
and I'm gonna do this in probably the

00:02:01,740 --> 00:02:08,190
most in advisable way possible in a live

00:02:04,020 --> 00:02:11,489
code everything so this might go really

00:02:08,190 --> 00:02:12,110
wrong let's just hope the demo gremlins

00:02:11,489 --> 00:02:18,290
are on mice

00:02:12,110 --> 00:02:20,380
so guess kaj yes I can't see that and

00:02:18,290 --> 00:02:23,000
not think commonjs

00:02:20,380 --> 00:02:25,820
I'm gonna touch what's called a dark

00:02:23,000 --> 00:02:29,000
file so this is how I'm building

00:02:25,820 --> 00:02:30,650
serverless apps and the idea of an arc

00:02:29,000 --> 00:02:31,940
file is that it's a manifest format a

00:02:30,650 --> 00:02:36,220
lot of these service frameworks are

00:02:31,940 --> 00:02:40,130
using Y amel and I'm not down with that

00:02:36,220 --> 00:02:41,470
so we're just gonna do something else so

00:02:40,130 --> 00:02:43,550
I'm using this project architect

00:02:41,470 --> 00:02:45,440
architect which is this rock

00:02:43,550 --> 00:02:47,830
I've been polishing for about two years

00:02:45,440 --> 00:02:47,830
now

00:02:48,070 --> 00:02:54,740
we're reaching into the Internet to grab

00:02:51,350 --> 00:02:57,620
it from NPM and I know one of you right

00:02:54,740 --> 00:03:01,550
now thinks I should be using yarn I know

00:02:57,620 --> 00:03:05,959
it's okay if we over soon

00:03:01,550 --> 00:03:07,970
I almost installed this great not bad

00:03:05,959 --> 00:03:10,940
tuner eleven packages I love to reuse of

00:03:07,970 --> 00:03:13,120
that so we've got this you know empty

00:03:10,940 --> 00:03:16,120
node project without too much going on

00:03:13,120 --> 00:03:16,120
oops

00:03:16,180 --> 00:03:21,019
there's my arc file and there's nothing

00:03:19,790 --> 00:03:23,900
in here because I've been dying yet so

00:03:21,019 --> 00:03:25,730
the syntax arc is pretty simple you

00:03:23,900 --> 00:03:29,360
define an app which would be a namespace

00:03:25,730 --> 00:03:31,550
so I'm just gonna do CJ s and then you

00:03:29,360 --> 00:03:34,790
can define routes and these are gonna

00:03:31,550 --> 00:03:37,010
turn into individual lambda functions so

00:03:34,790 --> 00:03:39,410
let's do that we'll just do one route

00:03:37,010 --> 00:03:44,780
for now and I'm just gonna create this

00:03:39,410 --> 00:03:47,780
locally so node six I believe shipped

00:03:44,780 --> 00:03:49,130
this tool called NP x and NP x is pretty

00:03:47,780 --> 00:03:51,080
wonderful because it lets you run

00:03:49,130 --> 00:03:52,640
binaries local to your projects so

00:03:51,080 --> 00:03:53,959
instead of installing like a global

00:03:52,640 --> 00:03:56,150
binary and having it all over your

00:03:53,959 --> 00:04:00,110
system and not being able to deal with

00:03:56,150 --> 00:04:04,310
it you you you can just use MPX and run

00:04:00,110 --> 00:04:07,100
these these local binaries whoa so I'm

00:04:04,310 --> 00:04:10,480
just gonna not open my node modules it's

00:04:07,100 --> 00:04:13,269
a bad idea so when I ran that generate

00:04:10,480 --> 00:04:16,010
that create local command on this file

00:04:13,269 --> 00:04:18,410
it kind of mirrors the file system where

00:04:16,010 --> 00:04:20,690
I've get this HTTP thing and I've got

00:04:18,410 --> 00:04:21,570
this function right here I'm sorry this

00:04:20,690 --> 00:04:26,000
is

00:04:21,570 --> 00:04:26,000
so let's just think this a bit smaller

00:04:26,210 --> 00:04:37,560
okay so this function just says hello

00:04:31,730 --> 00:04:41,510
Cascadia and I'm gonna start a local

00:04:37,560 --> 00:04:43,260
sandbox and we'll take a look at that

00:04:41,510 --> 00:04:45,360
great okay

00:04:43,260 --> 00:04:48,180
so we're running one function locally no

00:04:45,360 --> 00:04:50,360
big deal let's add another function just

00:04:48,180 --> 00:04:57,630
to make this a little more interesting

00:04:50,360 --> 00:05:00,350
so we'll go into the arc file and we'll

00:04:57,630 --> 00:05:07,800
just do a get food

00:05:00,350 --> 00:05:10,080
px great local my terminal is not super

00:05:07,800 --> 00:05:13,770
stoked on this resolution so it looks a

00:05:10,080 --> 00:05:18,810
bit funky that's okay

00:05:13,770 --> 00:05:21,680
and we'll run the sandbox again great

00:05:18,810 --> 00:05:21,680
oops

00:05:22,940 --> 00:05:28,110
foo see hello world it's kind of what

00:05:25,770 --> 00:05:33,540
you would expect okay so working locally

00:05:28,110 --> 00:05:36,570
is a thing but really we want to work in

00:05:33,540 --> 00:05:40,200
the cloud so npx create local tells

00:05:36,570 --> 00:05:41,970
architect to build that thing to your

00:05:40,200 --> 00:05:44,490
local machine with an in-memory database

00:05:41,970 --> 00:05:47,160
so you don't have to have an internet

00:05:44,490 --> 00:05:50,760
connection or an Amazon account to to

00:05:47,160 --> 00:05:55,169
prototype npx create by itself will

00:05:50,760 --> 00:05:58,919
generate two API gateway instances two

00:05:55,169 --> 00:06:01,650
DynamoDB tables in this case for lambda

00:05:58,919 --> 00:06:03,090
functions and it will deploy the whole

00:06:01,650 --> 00:06:06,000
thing and then wire it up with an IM

00:06:03,090 --> 00:06:07,260
role the reason we do two of everything

00:06:06,000 --> 00:06:08,550
is because we want to have staging and

00:06:07,260 --> 00:06:11,789
production environments out of the box

00:06:08,550 --> 00:06:15,930
so this isn't something that you can

00:06:11,789 --> 00:06:18,180
really opt out of if we're building

00:06:15,930 --> 00:06:20,669
software today we want these isolated

00:06:18,180 --> 00:06:23,880
spots where we can stage our deployments

00:06:20,669 --> 00:06:25,590
through a development process a lot of

00:06:23,880 --> 00:06:29,099
other systems that are out there kind of

00:06:25,590 --> 00:06:30,690
make you do this yourself you inevitably

00:06:29,099 --> 00:06:33,030
don't quite do a great job of it

00:06:30,690 --> 00:06:34,680
it means systems are not quite the same

00:06:33,030 --> 00:06:36,120
you end up having it

00:06:34,680 --> 00:06:37,380
list when you're deploying to anything

00:06:36,120 --> 00:06:39,539
because you might have to do something

00:06:37,380 --> 00:06:41,130
manually and your environments not being

00:06:39,539 --> 00:06:42,600
the same means that you have tough time

00:06:41,130 --> 00:06:44,250
reproducing bugs if you have a hard time

00:06:42,600 --> 00:06:47,639
reproducing bugs and you definitely have

00:06:44,250 --> 00:06:50,389
a hard time resolving them so this part

00:06:47,639 --> 00:06:53,580
takes like a minute

00:06:50,389 --> 00:06:57,419
but there we go we're live and this is a

00:06:53,580 --> 00:07:02,970
lambda function deployed at this pretty

00:06:57,419 --> 00:07:05,460
URL ooh and if we look fou should be

00:07:02,970 --> 00:07:07,580
live with that hello world so not too

00:07:05,460 --> 00:07:10,650
bad that took about two minutes

00:07:07,580 --> 00:07:13,050
let's get iterating on this because

00:07:10,650 --> 00:07:16,410
we're running out of time so maybe I

00:07:13,050 --> 00:07:20,310
want to you know play with the session

00:07:16,410 --> 00:07:24,020
let's say so we're gonna add a route

00:07:20,310 --> 00:07:29,520
called post count and I'm gonna go into

00:07:24,020 --> 00:07:32,750
my index module I'm gonna add a form

00:07:29,520 --> 00:07:32,750
I'll leave this here

00:07:36,050 --> 00:07:43,789
I'm just gonna be that guy and totally

00:07:39,440 --> 00:07:46,819
make a messy thing here so we'll post a

00:07:43,789 --> 00:07:50,270
count yeah

00:07:46,819 --> 00:07:54,440
totally that guy it's okay

00:07:50,270 --> 00:08:01,370
it's a demo a lot of button type equals

00:07:54,440 --> 00:08:07,520
submit and we're gonna add a method to

00:08:01,370 --> 00:08:11,330
that great so that will post to a route

00:08:07,520 --> 00:08:15,400
called count and we added count here but

00:08:11,330 --> 00:08:17,810
we have a generator yet so I could

00:08:15,400 --> 00:08:20,120
generate this live right now into the

00:08:17,810 --> 00:08:21,560
actual lambda functions server thing

00:08:20,120 --> 00:08:23,750
that we've deployed the API gateway

00:08:21,560 --> 00:08:25,430
thing but we'll just do this locally for

00:08:23,750 --> 00:08:27,199
now so the create functions in dem if it

00:08:25,430 --> 00:08:28,909
is a fancy way of saying it can be run

00:08:27,199 --> 00:08:30,289
and rerun over and over again it's not

00:08:28,909 --> 00:08:33,229
gonna clobber anything it only creates

00:08:30,289 --> 00:08:35,719
stuff if it doesn't already exist so

00:08:33,229 --> 00:08:39,079
that's pretty quick we got that actually

00:08:35,719 --> 00:08:41,209
let's take a look boot up our sandbox

00:08:39,079 --> 00:08:45,589
again you notice that sandbox starts

00:08:41,209 --> 00:08:48,260
super fast that's what you want no

00:08:45,589 --> 00:08:51,740
waiting for builds great we have a

00:08:48,260 --> 00:08:54,079
button if we click it we go to this

00:08:51,740 --> 00:08:57,800
place called count Jesus not so

00:08:54,079 --> 00:09:01,850
interesting so let's go take a look at

00:08:57,800 --> 00:09:04,370
that count function you'll notice these

00:09:01,850 --> 00:09:09,700
functions so far don't have any

00:09:04,370 --> 00:09:14,240
dependencies they're just functions

00:09:09,700 --> 00:09:18,170
which is kind of nice so what we want to

00:09:14,240 --> 00:09:21,649
do here is actually redirect so that's a

00:09:18,170 --> 00:09:26,779
status code of 302 and for a location

00:09:21,649 --> 00:09:30,850
we'll just go home oh god I love the new

00:09:26,779 --> 00:09:30,850
keyboard these Macs

00:09:34,279 --> 00:09:43,620
we'll pop back over here oh my god this

00:09:38,399 --> 00:09:46,290
keyboard okay

00:09:43,620 --> 00:09:50,779
and that probably redirected but I

00:09:46,290 --> 00:09:55,529
didn't see it because I'm old

00:09:50,779 --> 00:09:57,810
let's see it'll pop up the network yay

00:09:55,529 --> 00:09:59,760
so we're getting a 302 redirect and then

00:09:57,810 --> 00:10:01,980
we're coming back home that itself is

00:09:59,760 --> 00:10:04,080
not so exciting let's let's start

00:10:01,980 --> 00:10:05,480
playing with State so one of the

00:10:04,080 --> 00:10:07,890
problems of lambda functions is that

00:10:05,480 --> 00:10:09,209
they're totally stateless by nature it's

00:10:07,890 --> 00:10:11,760
not really so much a problem as it's a

00:10:09,209 --> 00:10:12,870
feature but at some point when you're

00:10:11,760 --> 00:10:14,430
building an application you're gonna

00:10:12,870 --> 00:10:17,399
need a session state so we're gonna want

00:10:14,430 --> 00:10:20,779
to get one of those we bundle a couple

00:10:17,399 --> 00:10:24,540
of helper functions for this purpose

00:10:20,779 --> 00:10:27,270
their architect functions payload is

00:10:24,540 --> 00:10:30,589
small for this by the way so if I wanted

00:10:27,270 --> 00:10:37,250
to get some state here I could do like

00:10:30,589 --> 00:10:40,080
it's a weight arc that HTTP session read

00:10:37,250 --> 00:10:45,779
we can log it here just to take a look

00:10:40,080 --> 00:10:54,029
at it and I'm gonna say session duck

00:10:45,779 --> 00:10:57,959
count equals count or zero plus 1 and

00:10:54,029 --> 00:11:05,220
then we redirect back home and then back

00:10:57,959 --> 00:11:08,209
on that home Handler and get index oh my

00:11:05,220 --> 00:11:10,879
god it's keyboard

00:11:08,209 --> 00:11:16,730
how many times a day do I have to say

00:11:10,879 --> 00:11:22,160
that before I buy the surface book it's

00:11:16,730 --> 00:11:24,920
getting closer every day okay I'm

00:11:22,160 --> 00:11:28,399
digging this new Microsoft so same

00:11:24,920 --> 00:11:31,129
pattern gonna pop open post count just

00:11:28,399 --> 00:11:35,480
steal that line a code I know this is

00:11:31,129 --> 00:11:37,699
pretty messy so close you so this is

00:11:35,480 --> 00:11:39,019
gonna read that session and it's gonna

00:11:37,699 --> 00:11:42,769
look for well actually you know what

00:11:39,019 --> 00:11:47,569
let's just be super weirdos and let's

00:11:42,769 --> 00:11:48,980
just dump the whole thing out and this

00:11:47,569 --> 00:11:52,309
is like one of my favorite debugging

00:11:48,980 --> 00:11:55,759
techniques let's just dump the whole

00:11:52,309 --> 00:12:01,749
request now we'll dump the session let's

00:11:55,759 --> 00:12:01,749
do both we can do both okay

00:12:06,529 --> 00:12:11,779
I got a typo in here somewhere no

00:12:09,499 --> 00:12:14,389
actually I just have bad syntax

00:12:11,779 --> 00:12:16,850
highlighting good

00:12:14,389 --> 00:12:17,809
okay so when we redirect it's gonna come

00:12:16,850 --> 00:12:19,999
back and it's just going to dump a

00:12:17,809 --> 00:12:24,799
session it's not gonna do anything else

00:12:19,999 --> 00:12:27,290
whoops so let's sandbox this so we can

00:12:24,799 --> 00:12:30,009
see the login a little cleaner great

00:12:27,290 --> 00:12:30,009
oops

00:12:32,060 --> 00:12:42,000
and session doesn't have anyone yet oh I

00:12:38,850 --> 00:12:43,860
did something wrong you can see my

00:12:42,000 --> 00:12:46,649
session state is not persisting cuz my

00:12:43,860 --> 00:12:48,420
ID is changing sweet you gotta love it

00:12:46,649 --> 00:12:51,800
when the demo gods come and get you

00:12:48,420 --> 00:12:55,380
this totally worked like an hour ago

00:12:51,800 --> 00:12:59,850
okay we're gonna do some live debugging

00:12:55,380 --> 00:13:02,100
here I know what it is some this is like

00:12:59,850 --> 00:13:04,740
when I lose my keys the only way I can

00:13:02,100 --> 00:13:08,100
find them is if I tell my wife I lost my

00:13:04,740 --> 00:13:13,529
keys and then I'm like oh yeah I know

00:13:08,100 --> 00:13:17,459
where it is so I assigned this session

00:13:13,529 --> 00:13:20,360
here but I didn't save it alright so I

00:13:17,459 --> 00:13:24,360
what I want to do here is get a cookie

00:13:20,360 --> 00:13:28,170
and I'm gonna say wait are HTTP that

00:13:24,360 --> 00:13:30,209
session got right session and then I'm

00:13:28,170 --> 00:13:33,810
gonna write that cookie onto the request

00:13:30,209 --> 00:13:35,970
that was the missing piece helps to

00:13:33,810 --> 00:13:41,060
persist things if you want to see things

00:13:35,970 --> 00:13:41,060
persisted okay

00:13:42,910 --> 00:13:51,820
and there we go you can see down there

00:13:46,150 --> 00:13:53,320
our count is incremented Hey so that's

00:13:51,820 --> 00:13:55,750
local though that's not very exciting

00:13:53,320 --> 00:13:57,640
like let's let's deploy this thing so I

00:13:55,750 --> 00:13:59,380
didn't create all these routes yet so

00:13:57,640 --> 00:14:01,120
we're gonna run this again without the

00:13:59,380 --> 00:14:04,360
local flag and it's gonna deploy it to

00:14:01,120 --> 00:14:09,120
Amazon and we can we can check it out

00:14:04,360 --> 00:14:09,120
there to see see how we feel about that

00:14:09,720 --> 00:14:19,600
you'd think Amazon would be fast at

00:14:12,130 --> 00:14:21,910
Amazon kidding yeah Amazon's actually

00:14:19,600 --> 00:14:23,350
shockingly fast all the time what what

00:14:21,910 --> 00:14:24,850
it's doing right now is it's walking

00:14:23,350 --> 00:14:26,830
through that arc file and it's making

00:14:24,850 --> 00:14:28,270
sure everything's in sync and it's

00:14:26,830 --> 00:14:31,000
creating assets if they don't already

00:14:28,270 --> 00:14:32,230
exist and so you know it takes a moment

00:14:31,000 --> 00:14:34,030
because of looking at every single

00:14:32,230 --> 00:14:37,420
resource in that arc phone and

00:14:34,030 --> 00:14:39,220
generating those things twice once we're

00:14:37,420 --> 00:14:41,620
staging once for production once you've

00:14:39,220 --> 00:14:45,190
done that the deployments are actually

00:14:41,620 --> 00:14:47,440
shockingly fast they these functions

00:14:45,190 --> 00:14:49,570
because they're tiny little bits they

00:14:47,440 --> 00:14:51,010
can be deployed in parallel which means

00:14:49,570 --> 00:14:52,570
that if you have a whole bunch of

00:14:51,010 --> 00:14:55,200
functions you're basically only rate

00:14:52,570 --> 00:15:01,810
limited by whatever you're paying Amazon

00:14:55,200 --> 00:15:03,910
so in theory it's infinite but you're

00:15:01,810 --> 00:15:08,920
actually bound by how much room you have

00:15:03,910 --> 00:15:14,000
on your credit card okay so that

00:15:08,920 --> 00:15:18,810
deployed I Michael

00:15:14,000 --> 00:15:20,610
oh that didn't deploy that generated so

00:15:18,810 --> 00:15:21,810
we already generated that home rep but

00:15:20,610 --> 00:15:27,300
we actually didn't deploy our local

00:15:21,810 --> 00:15:28,769
changes yet so we'll run that and this

00:15:27,300 --> 00:15:31,260
is a resolution thing usually that

00:15:28,769 --> 00:15:35,100
progress bar looks actually that looked

00:15:31,260 --> 00:15:37,230
kind of cool I'm here for it so if we

00:15:35,100 --> 00:15:39,920
reload that exact same thing that we had

00:15:37,230 --> 00:15:42,510
working locally is now running remotely

00:15:39,920 --> 00:15:46,050
you can see what we get this whole big

00:15:42,510 --> 00:15:48,209
whole request object and oh no it blew

00:15:46,050 --> 00:15:52,220
up and I actually expected that to

00:15:48,209 --> 00:15:55,529
happen so Amazon for whatever reason

00:15:52,220 --> 00:15:59,010
when you deploy API gateway it appends

00:15:55,529 --> 00:16:01,260
these these sort of funky URLs which is

00:15:59,010 --> 00:16:03,720
annoying is you know you want to work at

00:16:01,260 --> 00:16:07,200
the apex of your domain so the way to

00:16:03,720 --> 00:16:09,779
fix that is to set up DNS another way to

00:16:07,200 --> 00:16:21,510
fix that is to hack the URL so I'm just

00:16:09,779 --> 00:16:24,420
going to do that real quick so you don't

00:16:21,510 --> 00:16:25,950
need this function once you set up DNS

00:16:24,420 --> 00:16:30,750
and setting up DNS honestly it just

00:16:25,950 --> 00:16:32,490
takes like not long so I deployed three

00:16:30,750 --> 00:16:34,410
functions there in four seconds which

00:16:32,490 --> 00:16:36,000
was pretty okay you can you can

00:16:34,410 --> 00:16:38,820
surgically deploy one function if you

00:16:36,000 --> 00:16:42,500
want to and that was the post function I

00:16:38,820 --> 00:16:43,770
think so we'll just deploy that one

00:16:42,500 --> 00:16:45,930
great

00:16:43,770 --> 00:16:53,510
we've overwritten that function so we

00:16:45,930 --> 00:16:57,800
should oh I know I

00:16:53,510 --> 00:17:00,350
I have to fix that form as well it's the

00:16:57,800 --> 00:17:02,030
fun of live coding you get to you get to

00:17:00,350 --> 00:17:07,030
be along for the ride and watching me

00:17:02,030 --> 00:17:12,339
flail this that's how you know it's real

00:17:07,030 --> 00:17:19,940
all the mistakes okay so this URL is

00:17:12,339 --> 00:17:24,160
ostensibly the problem is this reading

00:17:19,940 --> 00:17:27,320
okay for you back there okay cool

00:17:24,160 --> 00:17:37,220
your JavaScript devs where we're used to

00:17:27,320 --> 00:17:39,860
a little bit messy syntax I love it well

00:17:37,220 --> 00:17:42,490
just deploy the whole thing because who

00:17:39,860 --> 00:17:45,460
cares it's like two seconds difference

00:17:42,490 --> 00:17:49,330
great let's test that

00:17:45,460 --> 00:17:49,330
well not -

00:17:51,340 --> 00:18:04,210
okay state yay

00:17:55,720 --> 00:18:08,860
and oh count of one Kenneth to sweet

00:18:04,210 --> 00:18:15,130
nut that's cool let's deploy that to

00:18:08,860 --> 00:18:17,410
production and this will just take that

00:18:15,130 --> 00:18:19,360
same code and basically just pump it

00:18:17,410 --> 00:18:22,330
straight into a fresh set of lambdas in

00:18:19,360 --> 00:18:23,800
a fresh API gateway and these things are

00:18:22,330 --> 00:18:25,090
entirely isolated from each other

00:18:23,800 --> 00:18:27,190
they're not touching each other in any

00:18:25,090 --> 00:18:30,070
way you'll notice that cold start was

00:18:27,190 --> 00:18:31,540
non-existent so something that people

00:18:30,070 --> 00:18:33,160
brought up earlier one of the problems

00:18:31,540 --> 00:18:34,390
of these things the cold start cold

00:18:33,160 --> 00:18:35,920
starts not a problem if you have lots of

00:18:34,390 --> 00:18:38,440
small functions the key is to be under

00:18:35,920 --> 00:18:39,610
five megabytes is this pretty common

00:18:38,440 --> 00:18:48,790
knowledge now because I've been saying

00:18:39,610 --> 00:18:50,020
it for four years okay so well we got a

00:18:48,790 --> 00:18:52,540
few minutes I'm gonna cruise through

00:18:50,020 --> 00:18:55,750
these last few slides I think you can

00:18:52,540 --> 00:18:58,720
now maybe see that there are reasons to

00:18:55,750 --> 00:19:00,640
possibly care about service the the

00:18:58,720 --> 00:19:02,350
function is the key here and there's a

00:19:00,640 --> 00:19:05,860
lot of things calling themselves service

00:19:02,350 --> 00:19:08,500
today and that's fine they can do that

00:19:05,860 --> 00:19:09,610
but if you really want to like see the

00:19:08,500 --> 00:19:11,650
benefits of this type of architecture

00:19:09,610 --> 00:19:14,410
lots of small functions is definitely

00:19:11,650 --> 00:19:15,880
the way to go and one of the things sort

00:19:14,410 --> 00:19:17,860
of big anti-patterns a lot of people

00:19:15,880 --> 00:19:20,290
have been doing is it'll take a function

00:19:17,860 --> 00:19:22,620
and they'll put an express webserver in

00:19:20,290 --> 00:19:24,790
it and I'll deploy that one function and

00:19:22,620 --> 00:19:27,460
it's a really bad idea

00:19:24,790 --> 00:19:30,310
and I know because that's the first

00:19:27,460 --> 00:19:32,740
thing I did with our startup and it

00:19:30,310 --> 00:19:35,440
worked for quite a while but the moment

00:19:32,740 --> 00:19:37,870
that you deploy an express webserver in

00:19:35,440 --> 00:19:40,150
one function the very first moment is

00:19:37,870 --> 00:19:41,500
the very fastest that thing will ever be

00:19:40,150 --> 00:19:42,730
because you're just gonna keep adding

00:19:41,500 --> 00:19:44,800
code to that thing it's gonna get bigger

00:19:42,730 --> 00:19:46,930
and bigger and slower and slower so the

00:19:44,800 --> 00:19:50,050
key here is to break it up in lots of

00:19:46,930 --> 00:19:52,480
small functions which I think you get so

00:19:50,050 --> 00:19:55,390
it's cool LEM does have a lot of nice

00:19:52,480 --> 00:19:57,040
characteristics people call this only

00:19:55,390 --> 00:20:00,220
pay for what you use a hundred percent

00:19:57,040 --> 00:20:02,560
utilization I don't know why we call it

00:20:00,220 --> 00:20:05,280
that just call it the only paper we use

00:20:02,560 --> 00:20:09,260
and and by the way what do you pay

00:20:05,280 --> 00:20:11,730
well 1 million executions is free and

00:20:09,260 --> 00:20:15,360
then it's like a penny for every million

00:20:11,730 --> 00:20:20,370
executions after that and so it's not

00:20:15,360 --> 00:20:22,710
free but it's very affordable lambdas

00:20:20,370 --> 00:20:24,540
have a way better security model they're

00:20:22,710 --> 00:20:25,980
locked down by nature they only execute

00:20:24,540 --> 00:20:27,510
for a hundred millisecond increments

00:20:25,980 --> 00:20:30,420
when they go away there's no ports to

00:20:27,510 --> 00:20:31,530
scan you control the dependency packages

00:20:30,420 --> 00:20:35,010
that they go and then they go away

00:20:31,530 --> 00:20:37,020
they're stateless so each function can

00:20:35,010 --> 00:20:38,430
also be independently configured so with

00:20:37,020 --> 00:20:41,340
a monolith if you're setting it up

00:20:38,430 --> 00:20:43,170
properly with i.m rules you're gonna try

00:20:41,340 --> 00:20:45,600
and have lease privilege which if it's a

00:20:43,170 --> 00:20:47,910
model at least privilege will be you can

00:20:45,600 --> 00:20:49,770
do everything with a lambda function you

00:20:47,910 --> 00:20:51,870
can lock that thing down very discreetly

00:20:49,770 --> 00:20:55,500
so get request can only read that kind

00:20:51,870 --> 00:20:57,690
of thing the big thing is that we're

00:20:55,500 --> 00:20:59,430
only focusing on business value so a lot

00:20:57,690 --> 00:21:01,080
of time gets spent on infrastructure

00:20:59,430 --> 00:21:02,370
I don't know that this crowd cares about

00:21:01,080 --> 00:21:06,030
that as much but I know the big

00:21:02,370 --> 00:21:07,860
enterprises do so to me fast our

00:21:06,030 --> 00:21:08,550
functions are lambdas or whatever we

00:21:07,860 --> 00:21:09,180
want to call them these are

00:21:08,550 --> 00:21:10,620
best-in-class

00:21:09,180 --> 00:21:11,970
they've got fixed costs have got better

00:21:10,620 --> 00:21:13,530
security and you just get faster

00:21:11,970 --> 00:21:17,790
iterations as you can you could see

00:21:13,530 --> 00:21:21,990
these things are so fast to deploy so we

00:21:17,790 --> 00:21:25,160
have a roughly 150 lambda web app and

00:21:21,990 --> 00:21:27,210
our deployment time is about 40 seconds

00:21:25,160 --> 00:21:29,250
which is pretty amazing

00:21:27,210 --> 00:21:30,780
so you can deploy these things in a few

00:21:29,250 --> 00:21:32,640
seconds but you can also deploy them all

00:21:30,780 --> 00:21:34,590
in parallel you can deploy them

00:21:32,640 --> 00:21:36,330
surgically and this means that you get

00:21:34,590 --> 00:21:37,590
more iterations and if you get more

00:21:36,330 --> 00:21:39,950
iterations and you probably have a

00:21:37,590 --> 00:21:43,980
better chance of fixing that bug or

00:21:39,950 --> 00:21:46,770
finding product market fit or you know

00:21:43,980 --> 00:21:48,480
building that next feature and speed is

00:21:46,770 --> 00:21:50,640
kind of the key so you're your author

00:21:48,480 --> 00:21:54,030
time is faster your run time is faster

00:21:50,640 --> 00:21:55,850
you're your bug resolution is better it

00:21:54,030 --> 00:21:57,780
seems like it's pretty worth exploring I

00:21:55,850 --> 00:21:58,950
also want to put out there that we

00:21:57,780 --> 00:22:00,510
should be a little more excellent to

00:21:58,950 --> 00:22:01,710
each other there's a lot of people

00:22:00,510 --> 00:22:04,260
saying that they have the right way to

00:22:01,710 --> 00:22:07,620
do this and I don't know that that is

00:22:04,260 --> 00:22:08,330
true but what I do know is the back end

00:22:07,620 --> 00:22:10,740
is now yours

00:22:08,330 --> 00:22:12,210
you can build all that stuff and you

00:22:10,740 --> 00:22:14,790
really don't need these servers or

00:22:12,210 --> 00:22:16,320
communities or any of it which is a

00:22:14,790 --> 00:22:17,370
pretty big deal so if you want to get

00:22:16,320 --> 00:22:18,900
involved in this

00:22:17,370 --> 00:22:21,180
we'd like pull requests that is

00:22:18,900 --> 00:22:23,790
definitely contributing but bug reports

00:22:21,180 --> 00:22:25,470
are actually like please please report

00:22:23,790 --> 00:22:27,480
bugs I had someone that met just a week

00:22:25,470 --> 00:22:29,400
ago and they were like oh I had a bug

00:22:27,480 --> 00:22:32,640
but I didn't want to say anything I was

00:22:29,400 --> 00:22:35,130
like no it's like the worst like please

00:22:32,640 --> 00:22:36,840
tell me feature requests are also

00:22:35,130 --> 00:22:38,910
appreciated I don't have all the same

00:22:36,840 --> 00:22:41,810
use cases as you so please let me know

00:22:38,910 --> 00:22:44,060
and share what you're learning and

00:22:41,810 --> 00:22:51,480
thanks very much

00:22:44,060 --> 00:22:51,480

YouTube URL: https://www.youtube.com/watch?v=KkJ3DLDUfUY


