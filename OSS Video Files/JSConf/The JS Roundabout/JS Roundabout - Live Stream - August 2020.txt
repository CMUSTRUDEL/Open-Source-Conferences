Title: JS Roundabout - Live Stream - August 2020
Publication date: 2020-08-06
Playlist: The JS Roundabout
Description: 
	Intro: 5:00
Talk 1: Build the thing - 6:50
Talk 2: Intro to GitHub Actions - 34:20
Talk 3: Web development and the war of frameworks - 53:00

Hello community - it's been a while!

We are missing you all and are delighted to announce that the JS Roundabout is returning this August!

The format will be slightly different for this months event and will be a webinar! So unfortunately no networking with beer and pizza - but there will still be plenty of opportunities for you to put your questions to the speakers!

Firstly, we will hear from Dave Cooper, Software Engineer for OVO Energy. Dave will be giving a talk titled 'Build the thing'.
Info: Everyone is always talking about things they want to make, but always put off. I want to tell you a story about a thing I made and the tooling behind modern static site generators that make me now want to build all of the things. This talk is aimed at beginners and people who enjoy a good story and things.

Next, we'll hear from Kieran Allen - Software Engineer for OVO Energy. Kieran will be giving a talk on 'Intro to GitHub actions'.
Info: How you're a fool for not using it!

And finally, Kostas Kapetanakis - A Senior JavaScript Developer who is currently contracting. Kostas will be talking about the workflow he us using starting from how the teams (small or large) can work to stay safe from any framework/tool dependency and explain a basic structure of prioritising a useful development process.
Starting from the API definition, split services based on each important task, storage, Authentication, eventsâ€™ flow etc
A client reference that validates the API contract and operates as a library/SDK consuming it.
The end client focusing on presentation and consuming the SDK API
Then he will explain how a medium sized team can use Agile related tools to organise and be future-proof

Agenda

5.30pm - Quick Introduction (Ben Solomons - JS Roundabout)
5.35pm - Dave Cooper (OVO Energy) - Build the thing
6.00pm - Kieran Allen (OVO Energy) - Intro to GitHub actions
6.30pm - Kostas Kapetanakis (Contractor) - Web development and the war of frameworks, a development process to stay safely away from that war
7.00pm - Finish

Thanks all! Please feel free to spread the word about this meetup on LinkedIn and Twitter! Our handle for both is @jsroundabout
Captions: 
	00:00:01,530 --> 00:00:07,340
[Music]

00:00:09,990 --> 00:00:13,919
[Music]

00:00:17,880 --> 00:00:54,569
[Music]

00:00:58,120 --> 00:01:28,049
[Music]

00:01:34,490 --> 00:01:55,639
[Music]

00:01:58,290 --> 00:02:22,169
[Music]

00:02:24,450 --> 00:02:37,160
[Music]

00:02:35,840 --> 00:03:03,749
you

00:02:37,160 --> 00:03:03,749
[Music]

00:03:08,040 --> 00:03:38,970
[Music]

00:03:41,250 --> 00:03:59,529
[Music]

00:03:59,840 --> 00:04:35,410
you

00:04:00,990 --> 00:04:35,410
[Music]

00:04:45,060 --> 00:04:46,990
[Music]

00:04:46,370 --> 00:04:49,970
[Applause]

00:04:46,990 --> 00:04:51,450
[Music]

00:04:49,970 --> 00:04:57,799
[Applause]

00:04:51,450 --> 00:04:57,799
[Music]

00:04:58,880 --> 00:05:02,960
of this meter obviously it's our first

00:05:01,120 --> 00:05:05,120
ever virtual one

00:05:02,960 --> 00:05:06,320
um and we're running tonight in

00:05:05,120 --> 00:05:09,680
partnership with

00:05:06,320 --> 00:05:11,840
ovo um ovo energy

00:05:09,680 --> 00:05:14,000
so first i just want to thank the guys

00:05:11,840 --> 00:05:16,720
there for working with us on this

00:05:14,000 --> 00:05:17,440
um a particular mention goes out to

00:05:16,720 --> 00:05:19,360
darcy

00:05:17,440 --> 00:05:21,120
uh who's worked really hard with me to

00:05:19,360 --> 00:05:24,320
get this this meetup

00:05:21,120 --> 00:05:26,720
um sorted and um so

00:05:24,320 --> 00:05:27,680
obviously with that in mind we have uh

00:05:26,720 --> 00:05:29,759
dave cooper

00:05:27,680 --> 00:05:32,240
and kieran allen as our first two

00:05:29,759 --> 00:05:35,360
speakers they're both software engineers

00:05:32,240 --> 00:05:38,080
um ovo um

00:05:35,360 --> 00:05:38,639
and then our third speaker is uh someone

00:05:38,080 --> 00:05:42,560
i know

00:05:38,639 --> 00:05:45,360
uh well called costas um

00:05:42,560 --> 00:05:45,919
who is a senior software engineer at the

00:05:45,360 --> 00:05:49,440
moment

00:05:45,919 --> 00:05:52,560
working as a contractor in the telecoms

00:05:49,440 --> 00:05:54,560
industry so i'm gonna pass you over to

00:05:52,560 --> 00:05:57,680
dave in a minute i just want to

00:05:54,560 --> 00:05:59,919
say that if um if you are doing anything

00:05:57,680 --> 00:06:02,520
on social media tonight whilst watching

00:05:59,919 --> 00:06:03,840
the event please remember to hashtag

00:06:02,520 --> 00:06:06,479
jsroundabout

00:06:03,840 --> 00:06:08,240
um we're looking to obviously expand the

00:06:06,479 --> 00:06:10,800
meetup get more followers

00:06:08,240 --> 00:06:12,800
um more great content for you guys so

00:06:10,800 --> 00:06:16,160
twitter instagram whatever you're on

00:06:12,800 --> 00:06:18,240
just hashtag jsroundabout um

00:06:16,160 --> 00:06:20,240
obviously at the end i'll tell you about

00:06:18,240 --> 00:06:22,319
the other meetups we do and what we've

00:06:20,240 --> 00:06:24,800
got coming up for you but

00:06:22,319 --> 00:06:25,600
for now um i'm gonna pass you all over

00:06:24,800 --> 00:06:28,800
to dave

00:06:25,600 --> 00:06:29,919
um our first speaker from ovo he's gonna

00:06:28,800 --> 00:06:33,120
begin

00:06:29,919 --> 00:06:33,120
now thanks very much

00:06:33,520 --> 00:06:37,280
hello everyone this is really cool doing

00:06:35,440 --> 00:06:39,199
an online meetup um i don't think that

00:06:37,280 --> 00:06:40,400
i've done an online meetup before so

00:06:39,199 --> 00:06:41,759
it's actually making me feel a little

00:06:40,400 --> 00:06:42,800
bit more nervous and doing something in

00:06:41,759 --> 00:06:45,039
person

00:06:42,800 --> 00:06:46,800
uh but let's get stuck into it i'll just

00:06:45,039 --> 00:06:49,759
share my screen so we can

00:06:46,800 --> 00:06:51,199
see some slides uh and just minimize

00:06:49,759 --> 00:06:53,840
that

00:06:51,199 --> 00:06:54,720
um so yeah this is this is my

00:06:53,840 --> 00:06:57,039
presentation

00:06:54,720 --> 00:06:58,479
uh called build the thing which is super

00:06:57,039 --> 00:06:59,680
vague but we're gonna build some things

00:06:58,479 --> 00:07:01,039
and hopefully uh

00:06:59,680 --> 00:07:03,199
hopefully we'll learn some stuff along

00:07:01,039 --> 00:07:05,680
the way and anyway

00:07:03,199 --> 00:07:07,520
i'm i'm dave uh i'm i'm a front-end

00:07:05,680 --> 00:07:09,599
engineer at ovo energy living in the

00:07:07,520 --> 00:07:12,080
absolute middle of nowhere at the moment

00:07:09,599 --> 00:07:13,919
with my in-laws and partner which is

00:07:12,080 --> 00:07:16,319
really really nice to avoid things like

00:07:13,919 --> 00:07:17,840
global pandemic diseases

00:07:16,319 --> 00:07:20,319
uh and if you ever want to get hold of

00:07:17,840 --> 00:07:20,880
me um you can hit me up on twitter or

00:07:20,319 --> 00:07:22,560
email

00:07:20,880 --> 00:07:24,560
um or whatever i'm always available for

00:07:22,560 --> 00:07:27,440
a chat about anything

00:07:24,560 --> 00:07:28,960
um but yeah we're also hiring it's a

00:07:27,440 --> 00:07:31,280
really great place to work

00:07:28,960 --> 00:07:32,880
uh if you if you're sort of interested

00:07:31,280 --> 00:07:36,080
in you know green energy

00:07:32,880 --> 00:07:38,880
or really cool tech or both um just give

00:07:36,080 --> 00:07:41,919
me a shout and i'll hook you up

00:07:38,880 --> 00:07:42,800
um so anyway let's do some things so i'm

00:07:41,919 --> 00:07:44,479
gonna start off

00:07:42,800 --> 00:07:46,720
telling a really quick story hopefully

00:07:44,479 --> 00:07:49,039
only take about five minutes or so

00:07:46,720 --> 00:07:50,400
uh and if you're still here we'll uh

00:07:49,039 --> 00:07:50,960
we'll write some code and build some

00:07:50,400 --> 00:07:54,160
things

00:07:50,960 --> 00:07:57,120
uh and hopefully uh we'll

00:07:54,160 --> 00:07:58,240
we'll uh we'll have some fun there so

00:07:57,120 --> 00:07:59,919
you're probably going to learn

00:07:58,240 --> 00:08:01,520
in about 30 seconds i'm not a very good

00:07:59,919 --> 00:08:04,080
story writer so

00:08:01,520 --> 00:08:06,080
i'm just going to um hopefully go

00:08:04,080 --> 00:08:09,199
through this as fast as i can

00:08:06,080 --> 00:08:11,120
um but anyway here's a story um once

00:08:09,199 --> 00:08:14,160
upon a time in the middle of nowhere

00:08:11,120 --> 00:08:16,400
um which is where we're staying uh my

00:08:14,160 --> 00:08:18,720
father-in-law decided that he'd build

00:08:16,400 --> 00:08:20,400
this uh really large really amazing

00:08:18,720 --> 00:08:22,800
natural swimming pond out and

00:08:20,400 --> 00:08:24,000
out in their field and it's really cool

00:08:22,800 --> 00:08:25,759
like it's sort of one of those things

00:08:24,000 --> 00:08:26,319
where the plant life in in the water

00:08:25,759 --> 00:08:28,319
helps

00:08:26,319 --> 00:08:30,160
you know pull all the nutrients out of

00:08:28,319 --> 00:08:31,759
the water and the sunlight hits the

00:08:30,160 --> 00:08:34,000
water and creates more

00:08:31,759 --> 00:08:36,399
food for the plants and there's some air

00:08:34,000 --> 00:08:39,120
pumping around for water circulation

00:08:36,399 --> 00:08:41,039
uh and also to oxygenate the water and

00:08:39,120 --> 00:08:42,479
there's no chemicals or filters or

00:08:41,039 --> 00:08:45,120
anything like that it sort of just

00:08:42,479 --> 00:08:46,560
sustains life quite nicely and it was

00:08:45,120 --> 00:08:49,519
really cool it's really nice to swim in

00:08:46,560 --> 00:08:52,800
it's got a shallow area and a deep area

00:08:49,519 --> 00:08:56,160
and yeah something was a little bit

00:08:52,800 --> 00:08:58,080
uh because i sort of watched my my

00:08:56,160 --> 00:08:59,440
father-in-law build this with his with

00:08:58,080 --> 00:08:59,839
his bare hands you know he shoveled

00:08:59,440 --> 00:09:02,560
about

00:08:59,839 --> 00:09:04,320
20 20 tons or something of gravel and

00:09:02,560 --> 00:09:04,959
and worked it all out how to build this

00:09:04,320 --> 00:09:06,640
thing

00:09:04,959 --> 00:09:08,160
uh and i hadn't really contributed much

00:09:06,640 --> 00:09:08,800
to it other than the odd bit here and

00:09:08,160 --> 00:09:11,120
there and

00:09:08,800 --> 00:09:11,920
i sort of wanted to to leave my mark on

00:09:11,120 --> 00:09:14,240
it and so

00:09:11,920 --> 00:09:16,160
i've had a bit of a think about this and

00:09:14,240 --> 00:09:18,640
one day while we were swimming in there

00:09:16,160 --> 00:09:19,920
um my partner for about the millionth

00:09:18,640 --> 00:09:22,880
time claimed that

00:09:19,920 --> 00:09:24,320
the pond was as warm as a bath which

00:09:22,880 --> 00:09:26,240
really winds me up

00:09:24,320 --> 00:09:28,800
because nothing is as warm as a bath in

00:09:26,240 --> 00:09:31,519
this country except for a warm bath

00:09:28,800 --> 00:09:33,360
uh so but it sort of triggered something

00:09:31,519 --> 00:09:34,640
in in my mind and i thought you know

00:09:33,360 --> 00:09:36,399
what

00:09:34,640 --> 00:09:37,920
um i could probably build something that

00:09:36,399 --> 00:09:39,839
we can throw into the pond that will let

00:09:37,920 --> 00:09:41,839
us know what the temperature is

00:09:39,839 --> 00:09:44,640
uh all the time uh which would be really

00:09:41,839 --> 00:09:47,680
cool um so i sort of thought about

00:09:44,640 --> 00:09:50,320
how i'd go about doing that

00:09:47,680 --> 00:09:51,519
and i gathered some things that i wanted

00:09:50,320 --> 00:09:52,640
i knew i'd need something like a

00:09:51,519 --> 00:09:55,680
raspberry pi

00:09:52,640 --> 00:09:57,120
uh and you know some temperature sensors

00:09:55,680 --> 00:09:58,640
and stuff to hook it all up

00:09:57,120 --> 00:10:01,040
and stuff to weatherproof it and i

00:09:58,640 --> 00:10:04,399
needed like a 4g modem for it

00:10:01,040 --> 00:10:05,680
because it was out of wi-fi um reception

00:10:04,399 --> 00:10:07,279
and i sort of looked at a load of

00:10:05,680 --> 00:10:08,079
youtube tutorials and i could give a

00:10:07,279 --> 00:10:09,760
talk on

00:10:08,079 --> 00:10:11,360
just building this alone but that's not

00:10:09,760 --> 00:10:14,480
what this talk is about

00:10:11,360 --> 00:10:16,000
um i i sort of mash it all together and

00:10:14,480 --> 00:10:18,079
this is kind of what i got

00:10:16,000 --> 00:10:19,440
um it's sort of been a bit updated since

00:10:18,079 --> 00:10:21,600
then i've soldered

00:10:19,440 --> 00:10:23,200
all of the um all of the components onto

00:10:21,600 --> 00:10:26,240
an actual uh pcb

00:10:23,200 --> 00:10:28,240
so uh things don't come apart uh as easy

00:10:26,240 --> 00:10:29,680
as they do is the setup in that picture

00:10:28,240 --> 00:10:31,680
but it's pretty good and it works i'm

00:10:29,680 --> 00:10:33,279
really happy with it

00:10:31,680 --> 00:10:35,040
so i built that thing and then i needed

00:10:33,279 --> 00:10:36,160
to build another thing where i could

00:10:35,040 --> 00:10:38,720
actually visualize

00:10:36,160 --> 00:10:40,640
uh all of the temperature data um that i

00:10:38,720 --> 00:10:41,760
was that i was pulling in from these

00:10:40,640 --> 00:10:43,920
on these temperature sensors and

00:10:41,760 --> 00:10:45,120
hilariously enough on temperature.com

00:10:43,920 --> 00:10:47,160
was available

00:10:45,120 --> 00:10:48,399
um so you know this is

00:10:47,160 --> 00:10:50,000
pondtemperature.com

00:10:48,399 --> 00:10:51,760
uh i still find it hilarious that i was

00:10:50,000 --> 00:10:54,160
able to get that domain

00:10:51,760 --> 00:10:55,680
and you can see it's pretty simple it

00:10:54,160 --> 00:10:57,360
don't look at this on mobile or tablet

00:10:55,680 --> 00:10:58,640
because it looks like absolute garbage i

00:10:57,360 --> 00:11:00,880
haven't been bothered to um

00:10:58,640 --> 00:11:01,680
to write the mobile or tablet stylings

00:11:00,880 --> 00:11:04,800
for this yet

00:11:01,680 --> 00:11:06,079
mostly because um having a baby takes up

00:11:04,800 --> 00:11:08,079
a lot of your time

00:11:06,079 --> 00:11:09,600
um you know this works i'm really happy

00:11:08,079 --> 00:11:12,720
with it all

00:11:09,600 --> 00:11:14,399
uh and yeah that works really nicely and

00:11:12,720 --> 00:11:15,519
that's sort of the segway that i want to

00:11:14,399 --> 00:11:18,320
use into

00:11:15,519 --> 00:11:20,240
building things um that was one thing

00:11:18,320 --> 00:11:22,079
that i was able to work out how to build

00:11:20,240 --> 00:11:24,959
just through youtube tutorials and

00:11:22,079 --> 00:11:27,839
asking friends really silly questions

00:11:24,959 --> 00:11:28,800
but it leads me nicely into static site

00:11:27,839 --> 00:11:30,320
generators

00:11:28,800 --> 00:11:31,519
uh you know there's a bit flavor of the

00:11:30,320 --> 00:11:32,399
month but they have been around for a

00:11:31,519 --> 00:11:34,640
long time

00:11:32,399 --> 00:11:36,399
and they're very cool so some of you

00:11:34,640 --> 00:11:37,760
have heard of them and some of you

00:11:36,399 --> 00:11:40,320
might not have heard of them or not

00:11:37,760 --> 00:11:42,560
quite know not know what they are

00:11:40,320 --> 00:11:43,760
so breaking it down you know html

00:11:42,560 --> 00:11:45,839
javascript css

00:11:43,760 --> 00:11:48,240
comprises the static site part of the

00:11:45,839 --> 00:11:50,240
term uh and a generator is a thing that

00:11:48,240 --> 00:11:52,079
creates a thing so obviously when

00:11:50,240 --> 00:11:54,639
you combine those terms together you've

00:11:52,079 --> 00:11:56,399
got a thing that creates static sites

00:11:54,639 --> 00:11:58,240
um which is probably trivializing a

00:11:56,399 --> 00:11:59,920
little bit um the tooling behind these

00:11:58,240 --> 00:12:00,720
static site generators does a lot more

00:11:59,920 --> 00:12:02,959
than that

00:12:00,720 --> 00:12:04,560
so it'll do a lot of them handle things

00:12:02,959 --> 00:12:05,200
these days like deployments and adding

00:12:04,560 --> 00:12:06,880
an api

00:12:05,200 --> 00:12:08,959
layer adding routing into your

00:12:06,880 --> 00:12:10,480
application and loads more stuff

00:12:08,959 --> 00:12:12,399
so it's a little bit richer than that

00:12:10,480 --> 00:12:14,480
and there is a million of them

00:12:12,399 --> 00:12:16,399
millions static site generators out

00:12:14,480 --> 00:12:17,440
there uh and they're all pretty awesome

00:12:16,399 --> 00:12:18,560
tonight we're going to talk about

00:12:17,440 --> 00:12:20,000
next.js

00:12:18,560 --> 00:12:21,760
uh which you know a lot of you have

00:12:20,000 --> 00:12:23,519
probably heard of or used um

00:12:21,760 --> 00:12:25,600
or even more familiar with than i am i'm

00:12:23,519 --> 00:12:27,839
not i'm not a super expert on

00:12:25,600 --> 00:12:29,279
on these things um but the main thing to

00:12:27,839 --> 00:12:30,800
take away from this is that you can

00:12:29,279 --> 00:12:32,560
apply a lot of the principles that we're

00:12:30,800 --> 00:12:35,760
talking about at the moment to other

00:12:32,560 --> 00:12:36,720
other static site generators so you know

00:12:35,760 --> 00:12:38,399
we've got next

00:12:36,720 --> 00:12:40,240
which is static site generator which

00:12:38,399 --> 00:12:41,839
will spit out a react application for

00:12:40,240 --> 00:12:43,360
you but other static site generators

00:12:41,839 --> 00:12:46,880
might spit out things like vue

00:12:43,360 --> 00:12:49,120
or angular or vanilla javascript

00:12:46,880 --> 00:12:50,480
sites it really just depends and then

00:12:49,120 --> 00:12:52,880
we've got

00:12:50,480 --> 00:12:54,480
you know the company behind uh next

00:12:52,880 --> 00:12:55,120
called burcell they used to be called

00:12:54,480 --> 00:12:56,639
now

00:12:55,120 --> 00:12:58,959
uh the other really big thing that

00:12:56,639 --> 00:13:01,040
they've done is uh creating a react

00:12:58,959 --> 00:13:02,959
data fetching hook called swr which

00:13:01,040 --> 00:13:04,480
we'll also look at tonight

00:13:02,959 --> 00:13:06,399
uh and they've they have done a lot of

00:13:04,480 --> 00:13:08,079
other um open source stuff and the

00:13:06,399 --> 00:13:09,360
community is really really great so

00:13:08,079 --> 00:13:11,680
definitely go check them out if you're

00:13:09,360 --> 00:13:14,399
not too familiar with them already

00:13:11,680 --> 00:13:15,440
um so anyway things that next can do out

00:13:14,399 --> 00:13:17,519
of the box

00:13:15,440 --> 00:13:18,880
uh starting from the top you know it

00:13:17,519 --> 00:13:20,079
gives you typescript support out of the

00:13:18,880 --> 00:13:22,480
box which is fantastic

00:13:20,079 --> 00:13:23,519
you know we love typescript uh handles

00:13:22,480 --> 00:13:25,440
rooting for you

00:13:23,519 --> 00:13:27,040
it uses react router under the hood and

00:13:25,440 --> 00:13:29,839
it sort of handles that layer

00:13:27,040 --> 00:13:31,519
really nicely for you it'll add an api

00:13:29,839 --> 00:13:33,200
layer into your application for you for

00:13:31,519 --> 00:13:34,880
free if you want it

00:13:33,200 --> 00:13:36,800
mechanisms for getting static and

00:13:34,880 --> 00:13:39,440
dynamic data into your application

00:13:36,800 --> 00:13:40,800
a really good local development uh setup

00:13:39,440 --> 00:13:41,760
and then you get some bells and whistles

00:13:40,800 --> 00:13:43,199
as well so you get things like

00:13:41,760 --> 00:13:45,600
performance monitoring

00:13:43,199 --> 00:13:47,519
metrics straight out of the box so it

00:13:45,600 --> 00:13:49,440
gives you a really easy way of feeding

00:13:47,519 --> 00:13:51,760
that sort of data like page load times

00:13:49,440 --> 00:13:53,360
and error rates and all of that into

00:13:51,760 --> 00:13:55,360
into third-party applications or you

00:13:53,360 --> 00:13:56,880
might want to process it yourself

00:13:55,360 --> 00:13:58,800
uh and then other things you know it's

00:13:56,880 --> 00:13:59,440
got really cool stuff built into it

00:13:58,800 --> 00:14:01,680
where

00:13:59,440 --> 00:14:03,360
it allows you to have a web application

00:14:01,680 --> 00:14:04,959
that has client side and server side

00:14:03,360 --> 00:14:06,160
rendering out the box without having to

00:14:04,959 --> 00:14:07,920
configure anything

00:14:06,160 --> 00:14:09,199
so that's really cool and as i mentioned

00:14:07,920 --> 00:14:11,600
on the slide here as well

00:14:09,199 --> 00:14:13,360
again the the documentation online

00:14:11,600 --> 00:14:16,639
community are really fantastic

00:14:13,360 --> 00:14:18,160
from my experience but we've sort of

00:14:16,639 --> 00:14:20,000
been talking about these things

00:14:18,160 --> 00:14:21,360
uh and i think it's time to build some

00:14:20,000 --> 00:14:22,560
things so

00:14:21,360 --> 00:14:24,560
what we're going to do and i know there

00:14:22,560 --> 00:14:25,680
was an npm outage earlier today so i'm

00:14:24,560 --> 00:14:27,519
really hoping that

00:14:25,680 --> 00:14:29,440
we're good at the moment but i'm going

00:14:27,519 --> 00:14:32,560
to assume that you've got npm or yarn

00:14:29,440 --> 00:14:36,320
installed and so

00:14:32,560 --> 00:14:38,880
if we call uh mpx create next app

00:14:36,320 --> 00:14:40,480
and we'll call it in this directory um

00:14:38,880 --> 00:14:44,160
create next app

00:14:40,480 --> 00:14:46,800
oh excellent uh

00:14:44,160 --> 00:14:47,839
this is this is lovely that we're

00:14:46,800 --> 00:14:51,360
getting some nice

00:14:47,839 --> 00:14:55,279
uh nice npm errors

00:14:51,360 --> 00:14:55,279
uh okay uh oh

00:14:56,639 --> 00:14:59,279
let's do that that's probably a little

00:14:58,000 --> 00:15:01,760
bit of nerves i had a spelling mistake

00:14:59,279 --> 00:15:05,519
cool that should probably work now

00:15:01,760 --> 00:15:07,440
yeah so create next app is a uh

00:15:05,519 --> 00:15:09,040
a scaffolding tool uh like a

00:15:07,440 --> 00:15:12,399
bootstrapping tool similar to

00:15:09,040 --> 00:15:13,839
create react app and similar to you know

00:15:12,399 --> 00:15:15,760
the angular cli

00:15:13,839 --> 00:15:17,440
and all of the equivalence and all of

00:15:15,760 --> 00:15:19,600
your your frameworks and all of that

00:15:17,440 --> 00:15:21,600
and that's just going to create us a

00:15:19,600 --> 00:15:23,600
really nice base application

00:15:21,600 --> 00:15:25,600
uh that we can use you'll see it gives

00:15:23,600 --> 00:15:26,880
us three scripts so we've got dev build

00:15:25,600 --> 00:15:30,000
and start

00:15:26,880 --> 00:15:31,120
which is pretty common so if we run the

00:15:30,000 --> 00:15:34,560
dev command

00:15:31,120 --> 00:15:36,800
that'll spin up a local dev server on

00:15:34,560 --> 00:15:38,880
port 3000

00:15:36,800 --> 00:15:40,560
if we wait for that i'm sure that my

00:15:38,880 --> 00:15:41,279
computer is struggling a little bit at

00:15:40,560 --> 00:15:43,440
the moment

00:15:41,279 --> 00:15:44,959
because it's screen sharing and and all

00:15:43,440 --> 00:15:48,320
of that at the same time

00:15:44,959 --> 00:15:50,240
webpack is not always the fastest

00:15:48,320 --> 00:15:52,079
um but we've got sort of like a standard

00:15:50,240 --> 00:15:53,600
boilerplate application here

00:15:52,079 --> 00:15:55,600
you know welcome next guest and it's got

00:15:53,600 --> 00:15:58,320
some stuff that leads up to the

00:15:55,600 --> 00:15:58,639
documentation so let's take this thing

00:15:58,320 --> 00:16:00,800
um

00:15:58,639 --> 00:16:02,720
and we're in our pages directory here in

00:16:00,800 --> 00:16:05,680
the root of that which is

00:16:02,720 --> 00:16:07,440
where um our pages are stored um let's

00:16:05,680 --> 00:16:09,440
just strip out most of this stuff so

00:16:07,440 --> 00:16:11,279
let's get rid of this

00:16:09,440 --> 00:16:13,279
and let's get rid of this and now we're

00:16:11,279 --> 00:16:14,720
just left with a div that has some

00:16:13,279 --> 00:16:16,720
container styles and you'll notice that

00:16:14,720 --> 00:16:19,360
we're importing from a style sheet so

00:16:16,720 --> 00:16:23,839
we already know that we get uh css

00:16:19,360 --> 00:16:25,519
modules out of the box for um for free

00:16:23,839 --> 00:16:26,959
so let's just you know create put a

00:16:25,519 --> 00:16:28,000
header in here called my things and we

00:16:26,959 --> 00:16:31,199
can see that you know

00:16:28,000 --> 00:16:33,440
we now have my things uh and

00:16:31,199 --> 00:16:34,639
just really quickly what we'll do i

00:16:33,440 --> 00:16:36,480
don't need that

00:16:34,639 --> 00:16:38,560
let's just create a new file in here as

00:16:36,480 --> 00:16:39,680
well um to just see what other cool

00:16:38,560 --> 00:16:41,639
stuff we've got

00:16:39,680 --> 00:16:44,079
um if we create a file called other

00:16:41,639 --> 00:16:46,560
things.js

00:16:44,079 --> 00:16:47,839
and we'll export the default function

00:16:46,560 --> 00:16:50,880
and we'll return

00:16:47,839 --> 00:16:52,880
h1 saying other things

00:16:50,880 --> 00:16:55,279
uh if we save that and go back into our

00:16:52,880 --> 00:16:58,480
browser and if we now go to

00:16:55,279 --> 00:17:00,880
localhost other things

00:16:58,480 --> 00:17:02,160
we we've now got the routing for

00:17:00,880 --> 00:17:04,000
straight out of the box didn't need to

00:17:02,160 --> 00:17:07,199
do much other than create the file

00:17:04,000 --> 00:17:07,919
and based on this um directory and file

00:17:07,199 --> 00:17:10,160
structure

00:17:07,919 --> 00:17:12,079
that's how we can do the the paths to

00:17:10,160 --> 00:17:13,360
different pages in our application so

00:17:12,079 --> 00:17:14,559
that's just one cool thing that i

00:17:13,360 --> 00:17:16,000
thought i'd show

00:17:14,559 --> 00:17:18,000
but we probably won't touch on that for

00:17:16,000 --> 00:17:18,880
the rest of this demo um but what we're

00:17:18,000 --> 00:17:22,559
going to do now

00:17:18,880 --> 00:17:24,799
is we're going to kill our dev server

00:17:22,559 --> 00:17:26,480
and we're going to we're so we're done

00:17:24,799 --> 00:17:27,280
writing javascript we now want to write

00:17:26,480 --> 00:17:31,200
typescript

00:17:27,280 --> 00:17:32,799
so we'll switch this file name to dot ts

00:17:31,200 --> 00:17:35,120
which is you know what we sort of want

00:17:32,799 --> 00:17:36,640
to do and we'll spin up the dev server

00:17:35,120 --> 00:17:38,080
again and see what happens now this time

00:17:36,640 --> 00:17:41,520
we are expecting

00:17:38,080 --> 00:17:43,039
uh some sort of error yep because

00:17:41,520 --> 00:17:43,840
you know next is nice and it says it

00:17:43,039 --> 00:17:45,280
looks like you're trying to use

00:17:43,840 --> 00:17:45,679
typescript but you don't have the right

00:17:45,280 --> 00:17:47,840
things

00:17:45,679 --> 00:17:48,720
installed so let's let's install those

00:17:47,840 --> 00:17:50,480
things so

00:17:48,720 --> 00:17:52,559
you know we want typescript itself and

00:17:50,480 --> 00:17:54,799
the typings for react and node

00:17:52,559 --> 00:17:57,440
so we can do that hit enter that should

00:17:54,799 --> 00:17:57,440
only take a sec

00:17:58,480 --> 00:18:02,880
and now if i run the dev server again

00:18:01,120 --> 00:18:04,480
hopefully

00:18:02,880 --> 00:18:06,400
you know we've detected typescript in

00:18:04,480 --> 00:18:08,000
your project and created a ts config for

00:18:06,400 --> 00:18:09,440
you that's pretty cool to be next to do

00:18:08,000 --> 00:18:10,960
that for us

00:18:09,440 --> 00:18:12,880
uh and it looks like that that's

00:18:10,960 --> 00:18:17,039
compiled successfully so if we go back

00:18:12,880 --> 00:18:17,039
to our uh our home page

00:18:17,600 --> 00:18:23,280
oh cool getting all sorts of errors

00:18:21,520 --> 00:18:25,440
today

00:18:23,280 --> 00:18:28,000
let's uh let's try and spin up the dev

00:18:25,440 --> 00:18:32,240
server again

00:18:28,000 --> 00:18:32,240
going to blame this on the uh the mpx

00:18:32,640 --> 00:18:38,320
this is this is lovely to go in a

00:18:39,120 --> 00:18:43,840
what is oh i'm an idiot i'm sure you're

00:18:41,360 --> 00:18:44,880
all thinking dave you're an idiot uh

00:18:43,840 --> 00:18:49,039
i don't know what's going wrong with me

00:18:44,880 --> 00:18:51,360
today it's the tsx file lovely

00:18:49,039 --> 00:18:52,640
cool so we've got sorry about that um i

00:18:51,360 --> 00:18:54,240
have run through this a million times as

00:18:52,640 --> 00:18:55,919
well this is very silly of me

00:18:54,240 --> 00:18:57,520
um anyway so we've now got typescript

00:18:55,919 --> 00:18:58,559
out the box which is really cool and we

00:18:57,520 --> 00:19:00,320
didn't really have to do anything other

00:18:58,559 --> 00:19:02,320
than install typescript

00:19:00,320 --> 00:19:03,360
um so let's just make start to make this

00:19:02,320 --> 00:19:05,440
a little bit more

00:19:03,360 --> 00:19:07,440
uh complex actually let's make this a

00:19:05,440 --> 00:19:10,559
div

00:19:07,440 --> 00:19:11,280
uh and we'll add a random thing uh and

00:19:10,559 --> 00:19:14,160
let's just

00:19:11,280 --> 00:19:17,200
um let's add a random number in here so

00:19:14,160 --> 00:19:17,200
now start random

00:19:17,600 --> 00:19:24,000
uh times 100 so we're generating around

00:19:21,280 --> 00:19:25,600
a number between one and a hundred

00:19:24,000 --> 00:19:27,120
and and now you can see when we reload

00:19:25,600 --> 00:19:28,559
the page we're getting a new random

00:19:27,120 --> 00:19:30,720
number

00:19:28,559 --> 00:19:32,480
um and then extending from this let's

00:19:30,720 --> 00:19:33,679
just say that we wanted to get a random

00:19:32,480 --> 00:19:35,120
number between

00:19:33,679 --> 00:19:36,880
one and a hundred but we wanted to fetch

00:19:35,120 --> 00:19:38,400
that server side before feeding it into

00:19:36,880 --> 00:19:39,919
our into our component

00:19:38,400 --> 00:19:41,919
you know a more real world example would

00:19:39,919 --> 00:19:44,000
be fetching a user and then passing

00:19:41,919 --> 00:19:46,000
user details into the component from

00:19:44,000 --> 00:19:48,160
from the server before rendering

00:19:46,000 --> 00:19:49,520
but we'll just keep it simple so next

00:19:48,160 --> 00:19:53,039
actually gives us this uh

00:19:49,520 --> 00:19:53,520
ability so let's say get server side

00:19:53,039 --> 00:19:55,280
props

00:19:53,520 --> 00:19:59,440
and i think there's typescript typings

00:19:55,280 --> 00:20:03,440
for that it's an async function

00:19:59,440 --> 00:20:06,720
and if we return uh props object

00:20:03,440 --> 00:20:10,720
in here of course random thing

00:20:06,720 --> 00:20:10,720
uh and we can take this

00:20:10,960 --> 00:20:16,400
this uh and then i think

00:20:14,000 --> 00:20:17,440
we should just be able to pass it into

00:20:16,400 --> 00:20:21,840
home

00:20:17,440 --> 00:20:21,840
so let's call this random thing

00:20:23,760 --> 00:20:27,919
or even type this since we've got

00:20:25,280 --> 00:20:27,919
typescript

00:20:28,080 --> 00:20:35,520
equals random thing and that's a number

00:20:33,520 --> 00:20:37,280
and then let's just render that there

00:20:35,520 --> 00:20:40,400
and now if we save this

00:20:37,280 --> 00:20:43,440
oh we need to export this as well

00:20:40,400 --> 00:20:45,039
um so now when we go back into our page

00:20:43,440 --> 00:20:47,120
we're still getting the same result but

00:20:45,039 --> 00:20:48,000
this is actually this random thing is

00:20:47,120 --> 00:20:49,679
now coming from

00:20:48,000 --> 00:20:50,880
the server and that's quite handy as i

00:20:49,679 --> 00:20:52,400
said you know for doing things like

00:20:50,880 --> 00:20:55,280
loading up user data

00:20:52,400 --> 00:20:57,280
um and and loads of other stuff but uh

00:20:55,280 --> 00:20:59,039
this is the really cool part though

00:20:57,280 --> 00:21:00,400
is that let's just say instead of just

00:20:59,039 --> 00:21:02,159
this page needing this bit of

00:21:00,400 --> 00:21:03,520
functionality let's say that multiple

00:21:02,159 --> 00:21:06,080
pages need it

00:21:03,520 --> 00:21:07,760
and we want to make it an api endpoint

00:21:06,080 --> 00:21:09,440
instead according to that so what i'll

00:21:07,760 --> 00:21:11,360
do is i'll delete all of this because we

00:21:09,440 --> 00:21:13,679
don't need it

00:21:11,360 --> 00:21:15,120
uh and we'll get rid of our all of our

00:21:13,679 --> 00:21:18,480
props being passed through

00:21:15,120 --> 00:21:20,640
and get rid of all of this and what next

00:21:18,480 --> 00:21:22,159
does is in the api directory which is a

00:21:20,640 --> 00:21:25,120
special directory

00:21:22,159 --> 00:21:26,799
um we can actually create a file in here

00:21:25,120 --> 00:21:29,919
we'll call it random

00:21:26,799 --> 00:21:31,840
thing if we export a default function

00:21:29,919 --> 00:21:33,919
from it

00:21:31,840 --> 00:21:34,960
the function will take a request object

00:21:33,919 --> 00:21:38,080
which would be a next

00:21:34,960 --> 00:21:39,360
api request and a response object which

00:21:38,080 --> 00:21:42,840
is the next api

00:21:39,360 --> 00:21:45,200
response if we

00:21:42,840 --> 00:21:47,039
return actually we don't need to do that

00:21:45,200 --> 00:21:50,559
we could say

00:21:47,039 --> 00:21:53,120
the response that status is 200.

00:21:50,559 --> 00:21:54,720
say restore an adjacent object now you

00:21:53,120 --> 00:21:56,400
can see that we're importing

00:21:54,720 --> 00:21:59,360
those those types up there sorry about

00:21:56,400 --> 00:22:02,480
that um let's do that same logic again

00:21:59,360 --> 00:22:02,480
where we've got random thing

00:22:05,360 --> 00:22:10,559
times 100 one

00:22:08,960 --> 00:22:14,720
so now believe it or not we actually now

00:22:10,559 --> 00:22:16,559
have an api endpoint that we can consume

00:22:14,720 --> 00:22:19,120
uh and let's have a look at how we might

00:22:16,559 --> 00:22:22,320
do that oh let's

00:22:19,120 --> 00:22:25,039
okay i'm full of mistakes today

00:22:22,320 --> 00:22:26,400
do bear with me um okay so we've got

00:22:25,039 --> 00:22:27,679
this api endpoint that we want to

00:22:26,400 --> 00:22:30,480
consume from so

00:22:27,679 --> 00:22:31,280
this would be a good point to introduce

00:22:30,480 --> 00:22:34,159
um

00:22:31,280 --> 00:22:36,080
a hook uh called swr which say it stands

00:22:34,159 --> 00:22:37,679
for stale while revalidate

00:22:36,080 --> 00:22:41,440
and basically what the silk does it's

00:22:37,679 --> 00:22:44,799
got some interesting behavior

00:22:41,440 --> 00:22:47,440
or use swr from swr

00:22:44,799 --> 00:22:49,280
this hook allows us to call you know

00:22:47,440 --> 00:22:53,200
whatever endpoint we we want to

00:22:49,280 --> 00:22:55,159
and it will always be revalidating data

00:22:53,200 --> 00:22:57,520
but displaying the stale data while it's

00:22:55,159 --> 00:22:58,159
revalidating so and it will update the

00:22:57,520 --> 00:23:00,240
the ui

00:22:58,159 --> 00:23:02,159
once it gets anything new through so it

00:23:00,240 --> 00:23:04,720
sort of lends itself quite well to

00:23:02,159 --> 00:23:06,400
reactive architecture

00:23:04,720 --> 00:23:08,000
but it's probably easier to just see the

00:23:06,400 --> 00:23:11,919
thing in action so let's make this

00:23:08,000 --> 00:23:14,159
a component now let's make this a random

00:23:11,919 --> 00:23:14,159
thing

00:23:14,559 --> 00:23:20,640
a random thing

00:23:18,080 --> 00:23:21,440
and let's uh let's call out to our

00:23:20,640 --> 00:23:22,799
endpoint

00:23:21,440 --> 00:23:25,039
so i'll write out this line and then

00:23:22,799 --> 00:23:28,960
i'll explain what's going on

00:23:25,039 --> 00:23:32,960
equals use swr api slash

00:23:28,960 --> 00:23:34,400
random thing uh we'll pass it a fetcher

00:23:32,960 --> 00:23:35,679
function which we'll write in a second

00:23:34,400 --> 00:23:37,840
i'll explain that and we've got we've

00:23:35,679 --> 00:23:40,000
got a little bit of uh

00:23:37,840 --> 00:23:42,240
config to give to it uh rebar there on

00:23:40,000 --> 00:23:44,159
focus

00:23:42,240 --> 00:23:45,840
uh okay so let's talk let's talk about

00:23:44,159 --> 00:23:47,200
this line here

00:23:45,840 --> 00:23:48,720
uh we can even tell what we're gonna

00:23:47,200 --> 00:23:51,840
we're expecting that so let's just do

00:23:48,720 --> 00:23:51,840
that now as well

00:23:52,400 --> 00:23:56,720
um so what we're saying is we're using

00:23:54,400 --> 00:23:58,559
our hook uh we're giving it a type into

00:23:56,720 --> 00:24:00,720
its uh saying that we're going to get

00:23:58,559 --> 00:24:02,480
back a random thing which is a number

00:24:00,720 --> 00:24:04,400
and then we're passing through the uh

00:24:02,480 --> 00:24:04,960
the end point that we want to call which

00:24:04,400 --> 00:24:08,159
is also

00:24:04,960 --> 00:24:08,799
the key that uh the hook caches on um

00:24:08,159 --> 00:24:10,240
and then

00:24:08,799 --> 00:24:12,559
we've got this fetcher function all a

00:24:10,240 --> 00:24:15,360
fetcher function is in the context of

00:24:12,559 --> 00:24:17,200
swr is a function that goes and is

00:24:15,360 --> 00:24:19,520
responsible for getting your data so

00:24:17,200 --> 00:24:20,240
we'll use a really basic one so we'll

00:24:19,520 --> 00:24:24,080
say

00:24:20,240 --> 00:24:26,880
fetcher is a function and we'll take a

00:24:24,080 --> 00:24:30,240
url which is a string

00:24:26,880 --> 00:24:32,640
and it'll fetch that url and then

00:24:30,240 --> 00:24:34,799
we'll take the response and we'll

00:24:32,640 --> 00:24:37,039
convert it to json

00:24:34,799 --> 00:24:38,320
um and that's all our fetcher function

00:24:37,039 --> 00:24:39,679
is obviously you know

00:24:38,320 --> 00:24:41,440
in a real world you know you might be

00:24:39,679 --> 00:24:42,799
adding you know request headers and

00:24:41,440 --> 00:24:44,880
stuff like that you or you might be

00:24:42,799 --> 00:24:47,279
using api service to make that call but

00:24:44,880 --> 00:24:49,200
we're just going to keep it basic

00:24:47,279 --> 00:24:51,039
and then this revalidate on focus

00:24:49,200 --> 00:24:53,600
basically anytime

00:24:51,039 --> 00:24:55,200
the window gets focused or the the the

00:24:53,600 --> 00:24:56,960
component gets focused that we're

00:24:55,200 --> 00:24:59,200
talking about

00:24:56,960 --> 00:25:01,120
swr by default will try and revalidate

00:24:59,200 --> 00:25:01,360
that data by calling out to the endpoint

00:25:01,120 --> 00:25:02,960
and

00:25:01,360 --> 00:25:04,640
updating the ui if it needs to and

00:25:02,960 --> 00:25:06,799
because we know this uh

00:25:04,640 --> 00:25:07,919
endpoint is returning random data we

00:25:06,799 --> 00:25:08,960
don't really want that to happen

00:25:07,919 --> 00:25:10,960
otherwise it's always going to be

00:25:08,960 --> 00:25:12,640
displaying new data

00:25:10,960 --> 00:25:14,000
but anyway and then we have the data

00:25:12,640 --> 00:25:17,360
object itself that comes back

00:25:14,000 --> 00:25:21,120
so what we can say is if there's no data

00:25:17,360 --> 00:25:24,240
let's return a div

00:25:21,120 --> 00:25:26,480
let's say loading

00:25:24,240 --> 00:25:28,960
and then if we have our data by this

00:25:26,480 --> 00:25:32,320
point we can just say random

00:25:28,960 --> 00:25:33,279
thing data dot and because we gave it

00:25:32,320 --> 00:25:34,960
that type hint

00:25:33,279 --> 00:25:37,039
uh when we called the hook we've got

00:25:34,960 --> 00:25:39,600
autocomplete on that

00:25:37,039 --> 00:25:42,640
and now we've actually got an endpoint

00:25:39,600 --> 00:25:44,400
that we can call so if we spin up the

00:25:42,640 --> 00:25:46,400
or that sorry that's we are now calling

00:25:44,400 --> 00:25:46,880
that endpoints now if we we come back in

00:25:46,400 --> 00:25:48,240
here

00:25:46,880 --> 00:25:50,400
we can see once again it's the same

00:25:48,240 --> 00:25:53,760
functionality but if i pop open

00:25:50,400 --> 00:25:56,000
uh our network tab and reload

00:25:53,760 --> 00:25:57,440
you'll see that we've actually called an

00:25:56,000 --> 00:25:59,360
endpoint we've got that for free and

00:25:57,440 --> 00:26:00,880
that's really really cool

00:25:59,360 --> 00:26:02,159
so that was pretty quick to build up

00:26:00,880 --> 00:26:04,000
something that you know fetches stuff

00:26:02,159 --> 00:26:04,799
from a back end and displays on a front

00:26:04,000 --> 00:26:08,240
end

00:26:04,799 --> 00:26:10,240
um that's really cool but

00:26:08,240 --> 00:26:12,000
it won't go back to full screen here we

00:26:10,240 --> 00:26:14,159
need to get this on the internet

00:26:12,000 --> 00:26:15,440
um because it's not very fun if we if

00:26:14,159 --> 00:26:16,400
we're not sharing it with all of our

00:26:15,440 --> 00:26:18,159
friends

00:26:16,400 --> 00:26:20,320
so what we're going to do is we'll kill

00:26:18,159 --> 00:26:25,039
the dev server

00:26:20,320 --> 00:26:26,960
and build the thing

00:26:25,039 --> 00:26:28,640
and we'll push that up stream so hit my

00:26:26,960 --> 00:26:31,600
github repository

00:26:28,640 --> 00:26:34,000
uh and then i'm logged into the cells uh

00:26:31,600 --> 00:26:35,520
you know interface online so vasel.com

00:26:34,000 --> 00:26:36,960
i've created an account and integrated

00:26:35,520 --> 00:26:38,559
it with my github account that takes

00:26:36,960 --> 00:26:41,120
five seconds

00:26:38,559 --> 00:26:44,559
so yeah that's that's pretty easy to do

00:26:41,120 --> 00:26:44,559
but we'll hit import project

00:26:48,880 --> 00:26:52,240
and hopefully this loads let's try

00:26:51,279 --> 00:26:54,960
another tab

00:26:52,240 --> 00:26:59,279
okay apparently works in another tab um

00:26:54,960 --> 00:27:01,200
so we'll go to github.com

00:26:59,279 --> 00:27:03,440
uh what i call let's build the thing

00:27:01,200 --> 00:27:06,400
i'll make this repository public as well

00:27:03,440 --> 00:27:07,760
if it's not already um so that you can

00:27:06,400 --> 00:27:09,600
all sort of have a look at this

00:27:07,760 --> 00:27:10,799
but anyway the cell's already worked out

00:27:09,600 --> 00:27:13,039
that we've got a next

00:27:10,799 --> 00:27:14,080
application um and there's a load of

00:27:13,039 --> 00:27:17,200
presets but

00:27:14,080 --> 00:27:18,399
loads and loads of things um so feel

00:27:17,200 --> 00:27:20,480
free to have a look at

00:27:18,399 --> 00:27:21,600
look at that and we'll leave all of the

00:27:20,480 --> 00:27:23,440
defaults you know we don't want to

00:27:21,600 --> 00:27:29,039
inject any environment variables

00:27:23,440 --> 00:27:32,840
um okay thanks for sell

00:27:29,039 --> 00:27:34,320
if we actually push that upstream to

00:27:32,840 --> 00:27:38,240
master

00:27:34,320 --> 00:27:38,240
build the thing let's try one more time

00:27:38,320 --> 00:27:46,080
okay um one

00:27:43,039 --> 00:27:50,320
don't do me like this the cell

00:27:46,080 --> 00:27:50,320
i'm not really getting much luck here um

00:27:51,600 --> 00:27:59,120
let's let's try that again

00:27:54,960 --> 00:28:03,840
um get out of.com

00:27:59,120 --> 00:28:03,840
slash build the thing

00:28:05,360 --> 00:28:12,159
all right let's try that please work

00:28:08,880 --> 00:28:14,159
this is so silly cool

00:28:12,159 --> 00:28:15,200
okay so this is that yeah you shouldn't

00:28:14,159 --> 00:28:16,559
really run into those problems i don't

00:28:15,200 --> 00:28:18,240
know what's going on now i do blame the

00:28:16,559 --> 00:28:18,799
npm outage from earlier today it's

00:28:18,240 --> 00:28:21,200
probably

00:28:18,799 --> 00:28:21,840
caused some problems in a lot of places

00:28:21,200 --> 00:28:24,000
but anyway

00:28:21,840 --> 00:28:25,360
so the cell's building my project for me

00:28:24,000 --> 00:28:26,240
uh and you know this looks pretty

00:28:25,360 --> 00:28:30,399
similar to

00:28:26,240 --> 00:28:32,799
standard build output um and

00:28:30,399 --> 00:28:35,679
hopefully uh it will create and upload

00:28:32,799 --> 00:28:35,679
my project for me

00:28:38,799 --> 00:28:43,039
cool so congrats your project's been

00:28:40,559 --> 00:28:45,120
deployed really nice confetti

00:28:43,039 --> 00:28:46,159
lovely and what we can do is we can

00:28:45,120 --> 00:28:47,760
visit that

00:28:46,159 --> 00:28:49,039
and you'll see that if you now go to and

00:28:47,760 --> 00:28:49,919
you can do this in your browser as well

00:28:49,039 --> 00:28:52,080
if you go to build

00:28:49,919 --> 00:28:53,279
the thing.the cell.app you'll actually

00:28:52,080 --> 00:28:55,440
see that my thing's there

00:28:53,279 --> 00:28:56,399
you know that that didn't take too long

00:28:55,440 --> 00:28:58,880
and you know

00:28:56,399 --> 00:29:00,480
if we go into the the network tab you

00:28:58,880 --> 00:29:01,600
can see that that actually is calling

00:29:00,480 --> 00:29:04,320
out to my api

00:29:01,600 --> 00:29:05,600
that i've written um and you know we got

00:29:04,320 --> 00:29:06,320
that all that for free and didn't have

00:29:05,600 --> 00:29:07,679
to worry about

00:29:06,320 --> 00:29:09,919
you know creating the infrastructure

00:29:07,679 --> 00:29:12,240
behind that um

00:29:09,919 --> 00:29:13,679
and then lastly in terms of building

00:29:12,240 --> 00:29:16,480
these cool things

00:29:13,679 --> 00:29:18,080
i just want to show you one last thing

00:29:16,480 --> 00:29:21,600
if we create a new branch

00:29:18,080 --> 00:29:23,279
uh build another thing

00:29:21,600 --> 00:29:24,960
and let's build another thing real

00:29:23,279 --> 00:29:29,279
quickly so

00:29:24,960 --> 00:29:29,279
i know let's call this another thing

00:29:30,960 --> 00:29:35,679
and we go another thing

00:29:36,799 --> 00:29:40,720
let's just return i don't know h1 my

00:29:39,600 --> 00:29:46,080
name

00:29:40,720 --> 00:29:47,520
is dave we save that

00:29:46,080 --> 00:29:48,799
and because we're naughty we're not

00:29:47,520 --> 00:29:50,480
going to test that locally we'll just

00:29:48,799 --> 00:29:54,240
assume that works

00:29:50,480 --> 00:29:57,520
built another thing

00:29:54,240 --> 00:29:57,520
i'll push that up stream

00:30:00,399 --> 00:30:04,559
cool and if we go into github

00:30:05,520 --> 00:30:09,840
and we create a pull request for this

00:30:12,080 --> 00:30:16,399
you'll see that the cell's already got

00:30:13,760 --> 00:30:17,919
some hooks into our into our pr stuff

00:30:16,399 --> 00:30:19,679
you can see it's the bot has already

00:30:17,919 --> 00:30:20,880
added a comment into this

00:30:19,679 --> 00:30:22,880
being like you know you can go and

00:30:20,880 --> 00:30:24,159
inspect the build for this

00:30:22,880 --> 00:30:26,240
that's quite nice you'll be very

00:30:24,159 --> 00:30:30,080
familiar with this for things you know

00:30:26,240 --> 00:30:31,440
with your your ci cd pipelines

00:30:30,080 --> 00:30:33,279
and you'll see that that's running the

00:30:31,440 --> 00:30:34,799
same build that it did before

00:30:33,279 --> 00:30:37,520
it's doing all the things it needs to do

00:30:34,799 --> 00:30:40,240
and uploading it

00:30:37,520 --> 00:30:42,960
and then hopefully in just a second i

00:30:40,240 --> 00:30:46,240
don't need to keep stalling for time

00:30:42,960 --> 00:30:47,919
build complete and if you come in here

00:30:46,240 --> 00:30:49,520
uh any second now this should probably

00:30:47,919 --> 00:30:51,200
update you'll see that it's updated

00:30:49,520 --> 00:30:54,159
and we now have a link that's straight

00:30:51,200 --> 00:30:55,120
out to a build environment for this

00:30:54,159 --> 00:30:58,080
branch

00:30:55,120 --> 00:31:00,080
um with my changes but it's it's not on

00:30:58,080 --> 00:31:01,519
the it's not on master yet but

00:31:00,080 --> 00:31:03,600
this makes it really handy for when

00:31:01,519 --> 00:31:05,200
you're you know you're viewing people's

00:31:03,600 --> 00:31:05,840
pr's and you don't need to spin up your

00:31:05,200 --> 00:31:08,640
own

00:31:05,840 --> 00:31:10,000
um your own environ you know you don't

00:31:08,640 --> 00:31:11,360
spin up locally and test it you can

00:31:10,000 --> 00:31:13,600
actually see it running

00:31:11,360 --> 00:31:14,960
in your browser straight away uh and

00:31:13,600 --> 00:31:16,559
kieran's actually going to be talking to

00:31:14,960 --> 00:31:18,159
you about some similar-ish stuff that

00:31:16,559 --> 00:31:20,960
you can achieve with with

00:31:18,159 --> 00:31:23,840
uh github actions in a little bit um so

00:31:20,960 --> 00:31:25,600
that should be a nice little segue there

00:31:23,840 --> 00:31:26,960
um but that's all i wanted to show you

00:31:25,600 --> 00:31:30,159
from i guess the next

00:31:26,960 --> 00:31:31,600
side of things um and which you know i

00:31:30,159 --> 00:31:33,120
think it's pretty cool to

00:31:31,600 --> 00:31:34,880
see you know we haven't even been doing

00:31:33,120 --> 00:31:36,559
this for half an hour and we've got

00:31:34,880 --> 00:31:39,200
you know a typescript application that

00:31:36,559 --> 00:31:43,039
uses css modules that calls an api

00:31:39,200 --> 00:31:44,399
endpoint uh it's it has automatic build

00:31:43,039 --> 00:31:46,960
pipelines

00:31:44,399 --> 00:31:48,720
it has per branch environments it

00:31:46,960 --> 00:31:50,720
deploys to the internet it gives you

00:31:48,720 --> 00:31:52,000
nice urls if you wanted to use a custom

00:31:50,720 --> 00:31:54,080
url as well

00:31:52,000 --> 00:31:55,919
uh basel lets you do that really easy as

00:31:54,080 --> 00:31:57,519
well you know it's doing all of these

00:31:55,919 --> 00:31:59,360
things and we didn't need to worry about

00:31:57,519 --> 00:32:01,039
like

00:31:59,360 --> 00:32:02,880
all of the the the devops the

00:32:01,039 --> 00:32:03,679
infrastructure side of things we didn't

00:32:02,880 --> 00:32:05,840
have to waste time

00:32:03,679 --> 00:32:07,200
setting it up and swearing too much of

00:32:05,840 --> 00:32:09,279
our computers because

00:32:07,200 --> 00:32:11,120
nothing's working and all of that and i

00:32:09,279 --> 00:32:12,799
guess the point that i want to make

00:32:11,120 --> 00:32:14,480
about all of this is that if you've if

00:32:12,799 --> 00:32:16,159
you've got a project

00:32:14,480 --> 00:32:17,919
that you know you want you really want

00:32:16,159 --> 00:32:18,559
to build but you've been procrastinating

00:32:17,919 --> 00:32:20,399
about

00:32:18,559 --> 00:32:21,600
you know whether it's a blog site or

00:32:20,399 --> 00:32:23,519
it's something like what i've done where

00:32:21,600 --> 00:32:25,279
i just want to display some data for

00:32:23,519 --> 00:32:28,080
a personal house project that i've been

00:32:25,279 --> 00:32:30,799
working on or anything like that

00:32:28,080 --> 00:32:32,000
um just just build it and and you

00:32:30,799 --> 00:32:34,480
leverage the tooling

00:32:32,000 --> 00:32:35,919
that is available by these things to to

00:32:34,480 --> 00:32:37,279
to get this thing on the internet show

00:32:35,919 --> 00:32:37,760
your friends show your family show how

00:32:37,279 --> 00:32:40,640
can you

00:32:37,760 --> 00:32:42,640
show show strangers on the internet um i

00:32:40,640 --> 00:32:43,360
just really want to i hope that some

00:32:42,640 --> 00:32:45,679
people

00:32:43,360 --> 00:32:46,799
will see things presentations like this

00:32:45,679 --> 00:32:49,600
and be inspired to

00:32:46,799 --> 00:32:50,480
to go and actually do those things and

00:32:49,600 --> 00:32:52,000
and yeah

00:32:50,480 --> 00:32:53,760
that's that's basically what i want to

00:32:52,000 --> 00:32:55,120
talk to you about um the

00:32:53,760 --> 00:32:57,600
the code for tonight's up on that

00:32:55,120 --> 00:32:59,919
repository and there's some links to

00:32:57,600 --> 00:33:00,720
to next js and but so definitely go

00:32:59,919 --> 00:33:02,240
check it out

00:33:00,720 --> 00:33:03,440
um as i said at the beginning of the

00:33:02,240 --> 00:33:05,039
talk if you ever want to talk to me

00:33:03,440 --> 00:33:07,519
about these sorts of things

00:33:05,039 --> 00:33:08,720
i'm i'm always up for always up for a

00:33:07,519 --> 00:33:12,080
chat about that stuff

00:33:08,720 --> 00:33:13,760
um so yeah that's basically it um i

00:33:12,080 --> 00:33:17,200
really appreciate you know having your

00:33:13,760 --> 00:33:17,200
time and uh thank you very much for

00:33:22,840 --> 00:33:26,799
listening

00:33:24,399 --> 00:33:29,120
thanks very much dave really appreciate

00:33:26,799 --> 00:33:33,679
it um

00:33:29,120 --> 00:33:35,360
yeah great talk um thanks a lot and uh

00:33:33,679 --> 00:33:37,039
yeah the comments are coming through so

00:33:35,360 --> 00:33:40,240
it's definitely appreciated

00:33:37,039 --> 00:33:43,600
um for everyone um we'll um okay

00:33:40,240 --> 00:33:46,159
so kieran we we can

00:33:43,600 --> 00:33:47,440
we can get started with kieran also a

00:33:46,159 --> 00:33:52,240
software engineer at

00:33:47,440 --> 00:33:54,960
ovo um so take it away

00:33:52,240 --> 00:33:54,960
thank you very much

00:34:00,480 --> 00:34:04,640
so today i am here to talk to you about

00:34:03,200 --> 00:34:06,720
github actions

00:34:04,640 --> 00:34:08,079
um specifically just an introduction to

00:34:06,720 --> 00:34:11,359
github actions maybe

00:34:08,079 --> 00:34:13,679
if you're not um familiar with it before

00:34:11,359 --> 00:34:15,760
it's um i hope you come away from this

00:34:13,679 --> 00:34:17,520
talk with an idea of what's possible

00:34:15,760 --> 00:34:19,760
wicked of actions

00:34:17,520 --> 00:34:20,879
um especially if you're hosting your

00:34:19,760 --> 00:34:23,200
code on github

00:34:20,879 --> 00:34:24,320
i think it makes a lot of sense to as

00:34:23,200 --> 00:34:25,760
dave said in his previous

00:34:24,320 --> 00:34:27,599
talk you know leverage the tools that

00:34:25,760 --> 00:34:31,760
are there to get stuff done

00:34:27,599 --> 00:34:34,879
um quicker so

00:34:31,760 --> 00:34:38,159
um a bit about myself um

00:34:34,879 --> 00:34:38,639
i am a front-end dev at ovo been here

00:34:38,159 --> 00:34:42,000
now for

00:34:38,639 --> 00:34:43,760
about two and a half years um

00:34:42,000 --> 00:34:45,599
really enjoy the work i'm doing there

00:34:43,760 --> 00:34:46,879
worked on a bunch of very interesting

00:34:45,599 --> 00:34:49,280
projects

00:34:46,879 --> 00:34:50,079
and uh yeah mainly react react native

00:34:49,280 --> 00:34:51,359
things like that

00:34:50,079 --> 00:34:53,440
and before that i was at a company

00:34:51,359 --> 00:34:55,599
called playtek bgt sports

00:34:53,440 --> 00:34:57,599
and uh yeah really enjoying the

00:34:55,599 --> 00:35:01,839
front-end world so far

00:34:57,599 --> 00:35:02,240
um so uh what am i actually going to be

00:35:01,839 --> 00:35:04,079
doing

00:35:02,240 --> 00:35:06,160
on this talk um there's going to be very

00:35:04,079 --> 00:35:08,880
few slides it's primarily

00:35:06,160 --> 00:35:09,920
going to be live coding so what are we

00:35:08,880 --> 00:35:13,119
going to be doing

00:35:09,920 --> 00:35:13,680
um i'm going to be setting up a very

00:35:13,119 --> 00:35:16,079
simple

00:35:13,680 --> 00:35:17,359
workflow that will we're going to unit

00:35:16,079 --> 00:35:19,760
test our code

00:35:17,359 --> 00:35:20,560
and we are going to build a pierre

00:35:19,760 --> 00:35:23,520
specific

00:35:20,560 --> 00:35:25,440
environment and we'll be creating an s3

00:35:23,520 --> 00:35:26,000
bucket that will host our pr code on

00:35:25,440 --> 00:35:28,960
that

00:35:26,000 --> 00:35:30,800
and then we'll also be leveraging um

00:35:28,960 --> 00:35:33,520
community github actions to then

00:35:30,800 --> 00:35:34,560
comment drill of that s3 bucket on our

00:35:33,520 --> 00:35:37,200
pierre

00:35:34,560 --> 00:35:38,960
um this is something we've done our i

00:35:37,200 --> 00:35:41,520
guess this is something i've implemented

00:35:38,960 --> 00:35:42,880
on projects that i have worked at on ovo

00:35:41,520 --> 00:35:44,320
and i find it's very useful

00:35:42,880 --> 00:35:46,160
especially like if you want to share

00:35:44,320 --> 00:35:48,400
designs or something with your

00:35:46,160 --> 00:35:49,520
ux designer or your product manager

00:35:48,400 --> 00:35:51,119
things like that

00:35:49,520 --> 00:35:53,280
it's very useful because they don't have

00:35:51,119 --> 00:35:55,520
to then check out the code you just

00:35:53,280 --> 00:35:56,880
point them to appear and there's a link

00:35:55,520 --> 00:35:58,320
there already they can check it out

00:35:56,880 --> 00:35:59,920
they'll see exactly

00:35:58,320 --> 00:36:02,000
what's changed versus let's say you're

00:35:59,920 --> 00:36:03,280
testing your uat test environment or

00:36:02,000 --> 00:36:06,640
something like that

00:36:03,280 --> 00:36:12,480
um so yeah without further ado i think

00:36:06,640 --> 00:36:16,560
it's probably best just to jump right in

00:36:12,480 --> 00:36:19,599
so to get started

00:36:16,560 --> 00:36:21,040
um i've just set up a very simple create

00:36:19,599 --> 00:36:23,440
react app

00:36:21,040 --> 00:36:25,200
um and to get started with github

00:36:23,440 --> 00:36:28,000
actions within your repository it's

00:36:25,200 --> 00:36:28,880
as simple as just having a docket of

00:36:28,000 --> 00:36:30,640
directory

00:36:28,880 --> 00:36:32,560
and inside that then we're going to have

00:36:30,640 --> 00:36:35,040
our workflows file

00:36:32,560 --> 00:36:36,560
so i've created one already it's just pr

00:36:35,040 --> 00:36:38,240
open update

00:36:36,560 --> 00:36:40,800
and just some comments that i'm going to

00:36:38,240 --> 00:36:43,359
use later out of fear of just completely

00:36:40,800 --> 00:36:46,640
messing up urls

00:36:43,359 --> 00:36:48,560
so we're going to start off with a name

00:36:46,640 --> 00:36:50,160
and we're just going to call it what the

00:36:48,560 --> 00:36:52,800
file is named but you can call this

00:36:50,160 --> 00:36:56,400
whatever you want

00:36:52,800 --> 00:36:58,960
and next we're going to want to define

00:36:56,400 --> 00:36:59,599
when our um when a workflow is going to

00:36:58,960 --> 00:37:00,960
run

00:36:59,599 --> 00:37:03,680
so we're going to say that this is going

00:37:00,960 --> 00:37:05,839
to run on pull requests

00:37:03,680 --> 00:37:08,000
and what's quite cool about github

00:37:05,839 --> 00:37:11,040
actions is that you can leverage

00:37:08,000 --> 00:37:14,480
um events within like pull requests so

00:37:11,040 --> 00:37:17,200
for example here we're going to run

00:37:14,480 --> 00:37:18,400
pull requests when they are opened for

00:37:17,200 --> 00:37:21,599
the first time

00:37:18,400 --> 00:37:23,359
we're going to run it when they are

00:37:21,599 --> 00:37:24,560
synchronized are when they're updated

00:37:23,359 --> 00:37:26,400
and we're going to run

00:37:24,560 --> 00:37:27,760
when they are reopened so let's say we

00:37:26,400 --> 00:37:30,400
close it we

00:37:27,760 --> 00:37:32,320
tear down an environment but we decide

00:37:30,400 --> 00:37:33,920
later to reopen it

00:37:32,320 --> 00:37:35,680
then we're going to run it here as well

00:37:33,920 --> 00:37:36,880
um so yeah you can really kind of i

00:37:35,680 --> 00:37:39,280
guess

00:37:36,880 --> 00:37:42,480
tweak exactly when you want to run these

00:37:39,280 --> 00:37:42,480
pipelines and things like that

00:37:42,800 --> 00:37:49,119
so first we're going to define our first

00:37:46,079 --> 00:37:52,320
job um workflows are defined our

00:37:49,119 --> 00:37:54,560
consists of jobs um you can have

00:37:52,320 --> 00:37:55,920
multiple jobs you can set them up to be

00:37:54,560 --> 00:37:59,119
dependent on one another

00:37:55,920 --> 00:38:00,320
so let's say you have a um a terraform

00:37:59,119 --> 00:38:02,480
build or something like that

00:38:00,320 --> 00:38:03,920
and you have unit tests first so you

00:38:02,480 --> 00:38:06,160
only want to run terraform if your unit

00:38:03,920 --> 00:38:09,280
test pass or something like that

00:38:06,160 --> 00:38:10,640
yeah you can set jobs up to be dependent

00:38:09,280 --> 00:38:12,560
so we're just going to create our first

00:38:10,640 --> 00:38:15,839
one now

00:38:12,560 --> 00:38:16,800
pr open up days and now we're going to

00:38:15,839 --> 00:38:19,359
set up just some

00:38:16,800 --> 00:38:23,280
environmental variables that we need for

00:38:19,359 --> 00:38:23,280
our aws cli later on

00:38:24,400 --> 00:38:30,839
aws access pid

00:38:28,320 --> 00:38:33,839
and here we're going to be using the

00:38:30,839 --> 00:38:33,839
secrets

00:38:35,920 --> 00:38:42,400
fs key id and we'll also be grabbing our

00:38:40,000 --> 00:38:42,400
secret

00:38:44,839 --> 00:38:49,599
key

00:38:46,079 --> 00:38:49,599
secret access key

00:38:54,880 --> 00:38:57,280
access

00:38:59,040 --> 00:39:02,320
and just to let you know exactly where

00:39:01,119 --> 00:39:04,960
these are

00:39:02,320 --> 00:39:06,720
so if we go to our repository and then

00:39:04,960 --> 00:39:08,400
we go into settings

00:39:06,720 --> 00:39:09,760
um to add secrets it's really just a

00:39:08,400 --> 00:39:11,839
simple settings

00:39:09,760 --> 00:39:12,800
and we have our secrets to find in here

00:39:11,839 --> 00:39:14,240
then

00:39:12,800 --> 00:39:16,000
once you have them defined in here we

00:39:14,240 --> 00:39:17,280
have access to them within our workflow

00:39:16,000 --> 00:39:20,560
and you can just

00:39:17,280 --> 00:39:20,560
work away with them as you need

00:39:20,800 --> 00:39:30,160
so we're also just going to define our

00:39:24,400 --> 00:39:30,160
default region for database cli later

00:39:33,119 --> 00:39:39,760
and finally we just need to

00:39:36,400 --> 00:39:41,040
use our github token because one of the

00:39:39,760 --> 00:39:45,040
community actions that we'll be

00:39:41,040 --> 00:39:45,040
leveraging later will require this

00:39:49,280 --> 00:39:56,320
cool so named our first job we've

00:39:52,560 --> 00:39:59,440
set up some environmental variables

00:39:56,320 --> 00:40:01,839
so what we want to do now is define

00:39:59,440 --> 00:40:04,319
what machine this runs on um wicked of

00:40:01,839 --> 00:40:06,319
actions you can run it on

00:40:04,319 --> 00:40:08,480
a bunch of different linux distros you

00:40:06,319 --> 00:40:09,520
have mac os i believe you can run it on

00:40:08,480 --> 00:40:12,160
some windows machines

00:40:09,520 --> 00:40:13,440
if you so wish but for this one we're

00:40:12,160 --> 00:40:15,440
just going to throw it on to ubuntu

00:40:13,440 --> 00:40:17,920
latest

00:40:15,440 --> 00:40:18,560
and then inside this we have our steps

00:40:17,920 --> 00:40:21,839
where

00:40:18,560 --> 00:40:21,839
the automation takes place

00:40:22,319 --> 00:40:27,839
so first off we are going to

00:40:25,440 --> 00:40:29,760
check out our code and to do this we're

00:40:27,839 --> 00:40:31,280
going to be using one of the predefined

00:40:29,760 --> 00:40:34,240
actions that um

00:40:31,280 --> 00:40:35,280
github supplies us so actions slash

00:40:34,240 --> 00:40:38,079
checkout

00:40:35,280 --> 00:40:38,800
at v2 and the cool thing about get of

00:40:38,079 --> 00:40:43,760
actions

00:40:38,800 --> 00:40:43,760
is that you can take this and

00:40:44,160 --> 00:40:51,200
go to github.com action actions

00:40:47,680 --> 00:40:53,359
slash checkout that'll

00:40:51,200 --> 00:40:55,359
lead directly to a github repository

00:40:53,359 --> 00:40:58,880
where all this code is defined

00:40:55,359 --> 00:40:59,920
and the at v2 specifies our points to a

00:40:58,880 --> 00:41:01,760
release

00:40:59,920 --> 00:41:03,200
so if you want to be more specific we

00:41:01,760 --> 00:41:05,760
could say at

00:41:03,200 --> 00:41:07,520
version 2.3.1 and we're just going to

00:41:05,760 --> 00:41:11,359
leave that at version 2

00:41:07,520 --> 00:41:11,359
and just grab the latest version of that

00:41:11,839 --> 00:41:18,240
so we've checked our code and

00:41:15,359 --> 00:41:18,880
now we're just going to install note and

00:41:18,240 --> 00:41:22,319
again

00:41:18,880 --> 00:41:26,720
um it's really as easy

00:41:22,319 --> 00:41:30,560
as using just another predefined action

00:41:26,720 --> 00:41:32,839
which is great less writing for us

00:41:30,560 --> 00:41:34,000
and keeps the workflows a bit cleaner i

00:41:32,839 --> 00:41:35,680
think

00:41:34,000 --> 00:41:37,440
so we're just going to call this action

00:41:35,680 --> 00:41:38,720
and then we're going to define what

00:41:37,440 --> 00:41:40,319
version we're going to run

00:41:38,720 --> 00:41:43,200
so we're just going to use the long term

00:41:40,319 --> 00:41:46,079
support at the moment which is 12.

00:41:43,200 --> 00:41:46,960
so we've installed node we're going to

00:41:46,079 --> 00:41:49,760
run

00:41:46,960 --> 00:41:51,599
and we're gonna do an npn install

00:41:49,760 --> 00:41:53,359
hopefully npm still works by the time

00:41:51,599 --> 00:41:58,319
this needs to be done

00:41:53,359 --> 00:42:01,920
um i'm going to run an npm test

00:41:58,319 --> 00:42:04,880
unit test passes and we are going to do

00:42:01,920 --> 00:42:04,880
an npm build

00:42:05,760 --> 00:42:10,560
um under normal circumstances i guess

00:42:08,000 --> 00:42:13,119
your mpm test would be a separate job

00:42:10,560 --> 00:42:13,680
where this job then depends on your

00:42:13,119 --> 00:42:16,880
tests

00:42:13,680 --> 00:42:18,720
and limiting passing but um okay so

00:42:16,880 --> 00:42:20,880
we've generated some build files

00:42:18,720 --> 00:42:24,079
now what we need to do is install our

00:42:20,880 --> 00:42:24,079
aws cli

00:42:25,280 --> 00:42:29,119
so aws cli

00:42:29,440 --> 00:42:34,400
and once again there is an action for

00:42:31,599 --> 00:42:36,640
that um

00:42:34,400 --> 00:42:38,160
the community actions in github actions

00:42:36,640 --> 00:42:38,720
i think are probably the best thing

00:42:38,160 --> 00:42:41,760
about it

00:42:38,720 --> 00:42:44,400
um just means you don't have to write a

00:42:41,760 --> 00:42:47,920
lot of code yourself

00:42:44,400 --> 00:42:47,920
actually aws

00:42:50,800 --> 00:42:56,400
1.1 so yeah this is

00:42:54,240 --> 00:42:57,680
going to do all the work for us um it'll

00:42:56,400 --> 00:43:00,960
install aws cli

00:42:57,680 --> 00:43:01,440
on this ubuntu latest and now we are

00:43:00,960 --> 00:43:03,280
ready

00:43:01,440 --> 00:43:04,880
to actually create that s3 bucket that

00:43:03,280 --> 00:43:08,480
we're going to host our

00:43:04,880 --> 00:43:09,839
pr environment on so now we're going to

00:43:08,480 --> 00:43:13,119
use if statements

00:43:09,839 --> 00:43:16,800
so we only want to create this s3 bucket

00:43:13,119 --> 00:43:18,480
when we open our pr for the first time

00:43:16,800 --> 00:43:21,359
in which case the button the bucket

00:43:18,480 --> 00:43:23,839
doesn't exist or we reopen a closed

00:43:21,359 --> 00:43:26,319
um pier in which case we've torn down

00:43:23,839 --> 00:43:30,319
that bucket after a closure

00:43:26,319 --> 00:43:35,040
so here we can say if github

00:43:30,319 --> 00:43:38,839
event dot action is equal to opened

00:43:35,040 --> 00:43:41,440
or if github event direction is equal to

00:43:38,839 --> 00:43:44,800
reopened

00:43:41,440 --> 00:43:44,800
we're going to run the following code

00:43:46,160 --> 00:43:50,240
name obviously the name field here is

00:43:48,319 --> 00:43:52,400
completely optional i'm just

00:43:50,240 --> 00:43:53,280
throwing it in to make it i think easier

00:43:52,400 --> 00:43:58,640
to read and

00:43:53,280 --> 00:44:00,480
work with so create an s3 bucket

00:43:58,640 --> 00:44:02,400
and we're going to run some commands

00:44:00,480 --> 00:44:03,920
here

00:44:02,400 --> 00:44:06,079
multi-line commands and i'm just going

00:44:03,920 --> 00:44:09,040
to shoot a wee bit

00:44:06,079 --> 00:44:10,960
and copy this stuff it's quite aws

00:44:09,040 --> 00:44:12,240
specific so it's not really anything

00:44:10,960 --> 00:44:15,040
in particular to do with the other

00:44:12,240 --> 00:44:16,640
actions um the only thing i would

00:44:15,040 --> 00:44:19,680
mention here is that we also have

00:44:16,640 --> 00:44:22,480
access to our pull request number

00:44:19,680 --> 00:44:24,400
so if you have multiple pr's going in a

00:44:22,480 --> 00:44:26,800
repository which i'm sure you do

00:44:24,400 --> 00:44:28,000
um it just stops name clashes and things

00:44:26,800 --> 00:44:29,520
like that so it's like

00:44:28,000 --> 00:44:31,359
you're always left with a unique package

00:44:29,520 --> 00:44:36,240
basically um

00:44:31,359 --> 00:44:38,800
so we've created our bucket we're gonna

00:44:36,240 --> 00:44:41,839
make it into a website bucket so we can

00:44:38,800 --> 00:44:41,839
access it off the internet

00:44:43,119 --> 00:44:51,839
and now what we want to do is

00:44:46,640 --> 00:44:51,839
copy your files over to networks

00:44:56,000 --> 00:45:01,599
i'm just going to jump up here copy this

00:44:58,880 --> 00:45:01,599
with the code

00:45:03,119 --> 00:45:07,040
so yeah popping all our build files over

00:45:05,359 --> 00:45:08,240
to the bucket that we've created above

00:45:07,040 --> 00:45:11,040
here

00:45:08,240 --> 00:45:19,599
as part of our opened and just set it to

00:45:11,040 --> 00:45:23,440
public read so we can actually access it

00:45:19,599 --> 00:45:25,760
so let's recap now we've installed node

00:45:23,440 --> 00:45:28,000
we've checked out the code install node

00:45:25,760 --> 00:45:30,160
um installed our aws cli

00:45:28,000 --> 00:45:32,319
we've created a bucking bucket when we

00:45:30,160 --> 00:45:34,720
open this pr for the first time

00:45:32,319 --> 00:45:35,440
we've copied the files s3 and now what

00:45:34,720 --> 00:45:40,160
we want to do

00:45:35,440 --> 00:45:40,160
is comment on rpm

00:45:42,079 --> 00:45:48,079
event start action we're just going to

00:45:45,200 --> 00:45:51,200
say we only want to run this

00:45:48,079 --> 00:45:51,200
if my eq works

00:45:52,640 --> 00:45:57,760
only not opened so name

00:45:58,000 --> 00:46:04,079
comment s3 url on pierre

00:46:01,200 --> 00:46:05,680
we're going to tap into another great

00:46:04,079 --> 00:46:10,079
community

00:46:05,680 --> 00:46:12,880
action so unscratch

00:46:10,079 --> 00:46:12,880
come down here

00:46:13,599 --> 00:46:17,760
and here we're going to reference a

00:46:15,760 --> 00:46:18,400
branch as opposed to a release which you

00:46:17,760 --> 00:46:22,560
can do

00:46:18,400 --> 00:46:25,520
if you want um generally it's better to

00:46:22,560 --> 00:46:27,040
point to an actual release but if you

00:46:25,520 --> 00:46:28,960
want you can point to a branch and i

00:46:27,040 --> 00:46:31,680
believe you can even point to a checksum

00:46:28,960 --> 00:46:31,680
if you so wish

00:46:36,160 --> 00:46:39,520
and we're just going to provide the

00:46:37,920 --> 00:46:43,839
message that will send back

00:46:39,520 --> 00:46:43,839
our post on our pierre

00:46:47,040 --> 00:46:51,599
so this is what's going to show up when

00:46:49,359 --> 00:46:54,480
this is sent to s3

00:46:51,599 --> 00:46:54,480
cool so

00:46:55,040 --> 00:47:01,119
fingers crossed there's no um

00:46:58,240 --> 00:47:01,119
syntax errors

00:47:04,640 --> 00:47:11,839
commit this to a repository

00:47:15,200 --> 00:47:20,400
awesome stuff so we've added that

00:47:18,400 --> 00:47:21,040
workflow to our repository now what we

00:47:20,400 --> 00:47:25,839
need to do

00:47:21,040 --> 00:47:25,839
is we're going to create a new branch

00:47:31,440 --> 00:47:35,359
and let's just make a tiny little change

00:47:36,720 --> 00:47:42,240
enter the thumb zone

00:47:39,920 --> 00:47:43,119
and we're just going to push this up and

00:47:42,240 --> 00:47:45,440
we'll make a pr

00:47:43,119 --> 00:47:45,440
minus

00:47:47,839 --> 00:47:56,800
push yes

00:47:52,319 --> 00:47:58,319
so if we go back to our repository

00:47:56,800 --> 00:48:01,359
this will be all good we're just going

00:47:58,319 --> 00:48:03,920
to create this awesome stuff

00:48:01,359 --> 00:48:05,280
and we should see here in a moment that

00:48:03,920 --> 00:48:06,640
um

00:48:05,280 --> 00:48:08,720
that our git of action should start

00:48:06,640 --> 00:48:10,480
working awesome

00:48:08,720 --> 00:48:12,559
so if you go over to details we'll see

00:48:10,480 --> 00:48:16,480
this working

00:48:12,559 --> 00:48:18,720
uh start up your workflow and

00:48:16,480 --> 00:48:19,599
just keep an example of what we like

00:48:18,720 --> 00:48:24,079
when it's

00:48:19,599 --> 00:48:24,079
done go over to update

00:48:24,319 --> 00:48:28,079
so basically it should be something like

00:48:26,079 --> 00:48:30,640
this where

00:48:28,079 --> 00:48:31,680
again we've changed the fun and if we go

00:48:30,640 --> 00:48:33,599
to

00:48:31,680 --> 00:48:36,640
this website we should see that it's

00:48:33,599 --> 00:48:37,839
updated and this is like pr-specific so

00:48:36,640 --> 00:48:39,839
you can point someone who doesn't want

00:48:37,839 --> 00:48:42,079
to run your code at this and they should

00:48:39,839 --> 00:48:44,960
be able to check out the changes

00:48:42,079 --> 00:48:45,680
so we're just going to let this run now

00:48:44,960 --> 00:48:47,599
and

00:48:45,680 --> 00:48:49,839
hopefully it doesn't take too terribly

00:48:47,599 --> 00:48:49,839
long

00:49:04,800 --> 00:49:07,680
yeah this this stuff is actually

00:49:06,160 --> 00:49:08,559
surprisingly similar i think to what

00:49:07,680 --> 00:49:11,119
dave covered

00:49:08,559 --> 00:49:12,960
um just having those like pier specific

00:49:11,119 --> 00:49:15,920
environments and things like that

00:49:12,960 --> 00:49:16,720
um obviously you do need to set up your

00:49:15,920 --> 00:49:21,280
own

00:49:16,720 --> 00:49:25,200
um infrastructure and stuff in this case

00:49:21,280 --> 00:49:27,440
so it's not quite out of the box but um

00:49:25,200 --> 00:49:29,040
yeah i think it's i mean we've set up

00:49:27,440 --> 00:49:32,640
now all this stuff

00:49:29,040 --> 00:49:34,640
in less than 20 minutes so it shows kind

00:49:32,640 --> 00:49:38,240
of how easy it is to get set up

00:49:34,640 --> 00:49:44,940
and um think how functional it is

00:49:38,240 --> 00:49:47,119
let's just install the aws cli

00:49:44,940 --> 00:49:50,160
[Music]

00:49:47,119 --> 00:49:51,280
bring that s3 buckets squeeze coffin

00:49:50,160 --> 00:49:54,400
files over

00:49:51,280 --> 00:49:54,400
comedy man up here

00:49:54,559 --> 00:49:58,079
awesome so looks like it all went out

00:49:57,280 --> 00:50:00,640
off with a

00:49:58,079 --> 00:50:02,800
hitch go over to our pier now we'll see

00:50:00,640 --> 00:50:05,200
that this number is bumped up to 16

00:50:02,800 --> 00:50:06,400
and go to it awesome it's changed in

00:50:05,200 --> 00:50:09,520
front

00:50:06,400 --> 00:50:12,960
uh very cool

00:50:09,520 --> 00:50:13,839
so um that was cool but what should i

00:50:12,960 --> 00:50:17,520
look into

00:50:13,839 --> 00:50:19,119
next um yeah i mean i'm hoping this talk

00:50:17,520 --> 00:50:20,800
it's very much aimed towards beginners

00:50:19,119 --> 00:50:22,960
but i'm hoping it did kind of like

00:50:20,800 --> 00:50:24,800
wet your appetite as to what's possible

00:50:22,960 --> 00:50:26,880
with github actions

00:50:24,800 --> 00:50:27,920
um what i'd recommend doing is taking a

00:50:26,880 --> 00:50:29,520
look at

00:50:27,920 --> 00:50:31,359
more community defined actions there

00:50:29,520 --> 00:50:35,440
really is an absolute

00:50:31,359 --> 00:50:38,640
massive list of um of actions available

00:50:35,440 --> 00:50:40,319
um everything from terraform to posting

00:50:38,640 --> 00:50:43,599
messages to slack or

00:50:40,319 --> 00:50:45,440
telegram or a bunch of different um

00:50:43,599 --> 00:50:47,280
messaging apps there's probably an

00:50:45,440 --> 00:50:49,280
action that already exists for us

00:50:47,280 --> 00:50:50,559
um if you want to go a bit deeper i'd

00:50:49,280 --> 00:50:52,079
recommend looking

00:50:50,559 --> 00:50:53,680
and trying to build your own reusable

00:50:52,079 --> 00:50:55,040
actions that's always a fun little

00:50:53,680 --> 00:50:57,760
exercise to do

00:50:55,040 --> 00:50:58,240
and there's also a bunch of interesting

00:50:57,760 --> 00:50:59,920
stuff

00:50:58,240 --> 00:51:01,440
around running multiple different

00:50:59,920 --> 00:51:03,280
versions of

00:51:01,440 --> 00:51:04,880
the operating system or let's say you

00:51:03,280 --> 00:51:06,559
want to run your code on multiple

00:51:04,880 --> 00:51:08,400
different versions of node

00:51:06,559 --> 00:51:10,000
you can look into running these

00:51:08,400 --> 00:51:11,040
pipelines kind of on a matrix where you

00:51:10,000 --> 00:51:12,880
define

00:51:11,040 --> 00:51:15,040
what versions or what operating systems

00:51:12,880 --> 00:51:17,040
you want to run on and

00:51:15,040 --> 00:51:18,880
your um the build pipeline then will

00:51:17,040 --> 00:51:21,599
automatically do that

00:51:18,880 --> 00:51:22,319
we can also run github actions on a

00:51:21,599 --> 00:51:24,000
schedule

00:51:22,319 --> 00:51:26,000
so we can show our end-to-end tests in

00:51:24,000 --> 00:51:27,520
there let's say we're running some

00:51:26,000 --> 00:51:29,520
cypress end-to-end tests we can have

00:51:27,520 --> 00:51:31,760
those running on schedule

00:51:29,520 --> 00:51:33,359
if something was to go wrong we could

00:51:31,760 --> 00:51:35,280
let's say automatically then

00:51:33,359 --> 00:51:37,440
create an issue within github we could

00:51:35,280 --> 00:51:39,599
maybe tag a member of the team who would

00:51:37,440 --> 00:51:42,079
then get notified automatically so

00:51:39,599 --> 00:51:42,960
there's a lot you can do and um

00:51:42,079 --> 00:51:44,800
obviously yeah

00:51:42,960 --> 00:51:46,079
if you're interested just give it a go

00:51:44,800 --> 00:51:48,480
in some personal projects

00:51:46,079 --> 00:51:49,440
and hopefully you enjoy it as much as i

00:51:48,480 --> 00:51:52,319
do

00:51:49,440 --> 00:51:53,280
and if there's any questions please do

00:51:52,319 --> 00:51:54,640
ask

00:51:53,280 --> 00:51:56,559
also if you want to check out the code

00:51:54,640 --> 00:52:00,480
please do go first

00:51:56,559 --> 00:52:05,839
um but yeah that that's it really

00:52:00,480 --> 00:52:05,839
unless there's anything else

00:52:12,180 --> 00:52:16,839
[Music]

00:52:13,760 --> 00:52:20,160
another great talk thanks a lot kieran

00:52:16,839 --> 00:52:24,400
um really appreciate it

00:52:20,160 --> 00:52:27,359
and um yeah as kieran said any questions

00:52:24,400 --> 00:52:28,880
um guys put it put it in the in the chat

00:52:27,359 --> 00:52:33,200
but otherwise

00:52:28,880 --> 00:52:36,800
um we'll we'll move on um

00:52:33,200 --> 00:52:40,800
so costas our first our first talker

00:52:36,800 --> 00:52:43,920
speaker tonight who's not a ovo so

00:52:40,800 --> 00:52:45,960
costa's a senior javascript engineer

00:52:43,920 --> 00:52:48,400
currently contracting in the

00:52:45,960 --> 00:52:50,880
telecommunications industry

00:52:48,400 --> 00:52:53,359
um i'll pass over to you costas when

00:52:50,880 --> 00:52:53,359
you're ready

00:52:54,079 --> 00:52:58,559
uh thanks ben uh really nice talks

00:52:56,880 --> 00:53:00,319
actually and

00:52:58,559 --> 00:53:02,800
really interesting parts to start

00:53:00,319 --> 00:53:05,839
exploring pretty soon

00:53:02,800 --> 00:53:06,960
um so yeah i'm kostas uh i've been

00:53:05,839 --> 00:53:08,720
working uh

00:53:06,960 --> 00:53:11,119
initially i started doing the research

00:53:08,720 --> 00:53:13,359
for like around multimedia technology

00:53:11,119 --> 00:53:16,480
and

00:53:13,359 --> 00:53:18,319
mostly web related and video streaming

00:53:16,480 --> 00:53:20,160
real-time communication and 3d

00:53:18,319 --> 00:53:22,559
animations

00:53:20,160 --> 00:53:23,839
later on i started moving to more

00:53:22,559 --> 00:53:27,680
towards

00:53:23,839 --> 00:53:30,160
web sdk site for the browsers and

00:53:27,680 --> 00:53:33,359
getting a bit more expertise on

00:53:30,160 --> 00:53:36,960
how the browsers work with javascript

00:53:33,359 --> 00:53:39,040
and node.js besides of that

00:53:36,960 --> 00:53:40,079
a little bit i've been working with

00:53:39,040 --> 00:53:43,119
automation

00:53:40,079 --> 00:53:46,240
continuous delivery and managing teams

00:53:43,119 --> 00:53:48,800
uh on how the workflow and

00:53:46,240 --> 00:53:49,680
yeah how we build team things and how we

00:53:48,800 --> 00:53:52,880
arrange

00:53:49,680 --> 00:53:54,319
the workflow in a smooth way and this

00:53:52,880 --> 00:53:57,119
time

00:53:54,319 --> 00:53:57,599
the presentation would be mostly about

00:53:57,119 --> 00:53:59,839
some

00:53:57,599 --> 00:54:01,440
kind of decision making about frameworks

00:53:59,839 --> 00:54:04,000
about how we

00:54:01,440 --> 00:54:05,200
how we use those tools and how i saw

00:54:04,000 --> 00:54:08,240
over time

00:54:05,200 --> 00:54:11,839
um some pain points and what

00:54:08,240 --> 00:54:16,079
can be a little bit difficult to manage

00:54:11,839 --> 00:54:21,040
um so yeah let me share the screen

00:54:16,079 --> 00:54:24,079
um there you are

00:54:21,040 --> 00:54:26,800
so yeah as i mentioned earlier

00:54:24,079 --> 00:54:28,960
it would be mostly about decisions we

00:54:26,800 --> 00:54:30,240
make when we start a new project or when

00:54:28,960 --> 00:54:33,680
we want to migrate

00:54:30,240 --> 00:54:36,799
or we want to refactor and

00:54:33,680 --> 00:54:38,480
maybe sometimes you take a decision to

00:54:36,799 --> 00:54:40,640
onboard new people in that team and you

00:54:38,480 --> 00:54:43,760
want to get a fresh

00:54:40,640 --> 00:54:45,920
fresh start of the product

00:54:43,760 --> 00:54:47,520
but also it helps a lot when you when

00:54:45,920 --> 00:54:51,280
you start a new

00:54:47,520 --> 00:54:54,240
from scratch one of the main

00:54:51,280 --> 00:54:54,960
problems or the main the first questions

00:54:54,240 --> 00:54:58,400
to ask

00:54:54,960 --> 00:55:00,960
is what you're gonna build and

00:54:58,400 --> 00:55:02,559
and also how that is gonna be deployed

00:55:00,960 --> 00:55:05,359
distributed

00:55:02,559 --> 00:55:06,880
um and there are there are a few things

00:55:05,359 --> 00:55:07,520
that you would be doing over and over

00:55:06,880 --> 00:55:11,599
again

00:55:07,520 --> 00:55:14,799
um not only in one project but

00:55:11,599 --> 00:55:16,880
even if it's um in different

00:55:14,799 --> 00:55:18,640
frameworks in different like even if

00:55:16,880 --> 00:55:20,160
it's uh from a needle javascript you

00:55:18,640 --> 00:55:20,960
need to take care of a few bits and

00:55:20,160 --> 00:55:24,240
pieces

00:55:20,960 --> 00:55:26,720
over and over again uh the one would be

00:55:24,240 --> 00:55:27,359
like if you create a rest api if you

00:55:26,720 --> 00:55:29,520
create

00:55:27,359 --> 00:55:31,040
what what's going to be the project's

00:55:29,520 --> 00:55:34,400
file structure

00:55:31,040 --> 00:55:36,160
uh taking care of caching assets you're

00:55:34,400 --> 00:55:39,200
going to use if it's the client-side

00:55:36,160 --> 00:55:40,079
application um that you want to bundle

00:55:39,200 --> 00:55:41,520
it

00:55:40,079 --> 00:55:44,079
how you set up your debugging

00:55:41,520 --> 00:55:44,640
environment styles and css in that like

00:55:44,079 --> 00:55:46,880
how they

00:55:44,640 --> 00:55:48,559
how they're going to be mixed and

00:55:46,880 --> 00:55:50,240
matched

00:55:48,559 --> 00:55:52,400
and you want to keep everything

00:55:50,240 --> 00:55:55,359
consistent in a way

00:55:52,400 --> 00:55:55,760
even if you plea one project can be part

00:55:55,359 --> 00:55:58,880
actually

00:55:55,760 --> 00:56:02,000
one product will be

00:55:58,880 --> 00:56:05,119
many projects from git uh

00:56:02,000 --> 00:56:05,680
coming together so you should try to get

00:56:05,119 --> 00:56:08,000
as much

00:56:05,680 --> 00:56:10,079
consistency as possible even though that

00:56:08,000 --> 00:56:12,640
can that could come from different teams

00:56:10,079 --> 00:56:13,839
sometimes still it's good to have some

00:56:12,640 --> 00:56:16,559
sort of

00:56:13,839 --> 00:56:18,559
a common way of thinking and that will

00:56:16,559 --> 00:56:22,720
help the collaboration and also

00:56:18,559 --> 00:56:26,160
like between teams communication

00:56:22,720 --> 00:56:29,680
one of the one of the

00:56:26,160 --> 00:56:32,000
first questions would be how

00:56:29,680 --> 00:56:33,280
you pick what tool you're gonna use and

00:56:32,000 --> 00:56:36,160
frameworks

00:56:33,280 --> 00:56:37,839
and initially what comes to mind usually

00:56:36,160 --> 00:56:40,960
would be the popularity

00:56:37,839 --> 00:56:43,440
but we have seen that changing over like

00:56:40,960 --> 00:56:45,280
within a few years or a few months

00:56:43,440 --> 00:56:46,480
you can see some coming up and some

00:56:45,280 --> 00:56:50,000
others vanishing

00:56:46,480 --> 00:56:53,280
or or changing a lot uh like uh

00:56:50,000 --> 00:56:55,040
with massive breaking changes um let's

00:56:53,280 --> 00:56:57,200
like jump into the next version would be

00:56:55,040 --> 00:57:00,960
a whole new

00:56:57,200 --> 00:57:03,440
pile of work um so

00:57:00,960 --> 00:57:04,319
also we see the support communities

00:57:03,440 --> 00:57:06,960
around these

00:57:04,319 --> 00:57:08,559
um like if they're quite popular usually

00:57:06,960 --> 00:57:11,280
they have a lot of support

00:57:08,559 --> 00:57:11,680
the documentation how much effort you

00:57:11,280 --> 00:57:13,839
need

00:57:11,680 --> 00:57:16,559
as a new joiner in that community in

00:57:13,839 --> 00:57:19,440
that framework

00:57:16,559 --> 00:57:21,200
to go from zero to 100 like how fast can

00:57:19,440 --> 00:57:24,160
you do that

00:57:21,200 --> 00:57:26,079
and how efficient that can be and also

00:57:24,160 --> 00:57:27,680
how understandable that is

00:57:26,079 --> 00:57:29,680
i mean most of the times you just run

00:57:27,680 --> 00:57:31,680
one command and you can see everything

00:57:29,680 --> 00:57:32,960
running behind the scenes or with some

00:57:31,680 --> 00:57:35,520
output on the terminal

00:57:32,960 --> 00:57:36,240
and you get a massive huge load of files

00:57:35,520 --> 00:57:38,880
and everything

00:57:36,240 --> 00:57:40,240
then it's it's really meaningful if you

00:57:38,880 --> 00:57:41,359
do understand what happens behind the

00:57:40,240 --> 00:57:43,359
scenes

00:57:41,359 --> 00:57:45,040
um because the more automation the more

00:57:43,359 --> 00:57:47,839
of the previous tasks that we mentioned

00:57:45,040 --> 00:57:49,119
are getting automatically done for you

00:57:47,839 --> 00:57:51,280
wrapped in a wrapper

00:57:49,119 --> 00:57:52,720
under a wrapped environment then at

00:57:51,280 --> 00:57:53,520
least you understand and then if you

00:57:52,720 --> 00:57:57,040
need something more

00:57:53,520 --> 00:57:59,280
specifically like more explicitly to do

00:57:57,040 --> 00:58:00,160
it gets really really hard uh at least

00:57:59,280 --> 00:58:01,599
if you understand

00:58:00,160 --> 00:58:04,160
what happens behind the scene that makes

00:58:01,599 --> 00:58:08,000
it faster to get the context and

00:58:04,160 --> 00:58:10,319
change do the changes you like um and

00:58:08,000 --> 00:58:12,640
also another important thing would be

00:58:10,319 --> 00:58:13,680
uh after this yeah those were the design

00:58:12,640 --> 00:58:15,920
partners

00:58:13,680 --> 00:58:17,119
patterns that you need to understand and

00:58:15,920 --> 00:58:19,440
the other important thing would be the

00:58:17,119 --> 00:58:21,760
integrations with other tools

00:58:19,440 --> 00:58:23,440
because as i mentioned earlier each one

00:58:21,760 --> 00:58:24,720
of those frameworks or tools that you're

00:58:23,440 --> 00:58:27,760
going to be using

00:58:24,720 --> 00:58:29,359
need to interact with other parts of

00:58:27,760 --> 00:58:31,359
your deployment process that would be

00:58:29,359 --> 00:58:32,400
either the github actions that we saw

00:58:31,359 --> 00:58:34,960
earlier

00:58:32,400 --> 00:58:35,599
uh other second third-party tools or

00:58:34,960 --> 00:58:38,640
even

00:58:35,599 --> 00:58:41,280
xera and other like tracking

00:58:38,640 --> 00:58:42,480
tools that you can that can help you

00:58:41,280 --> 00:58:45,839
with your

00:58:42,480 --> 00:58:48,400
processes but no matter what you

00:58:45,839 --> 00:58:51,040
pick i would say if you build it in a

00:58:48,400 --> 00:58:53,839
very nice way that can be modular

00:58:51,040 --> 00:58:56,079
and also each part of the project be

00:58:53,839 --> 00:58:59,440
more independent

00:58:56,079 --> 00:59:02,240
that can help a lot

00:58:59,440 --> 00:59:04,000
so i would say to pick whatever helps

00:59:02,240 --> 00:59:06,480
the developer build it faster

00:59:04,000 --> 00:59:08,480
that would be the number one and build

00:59:06,480 --> 00:59:11,520
the

00:59:08,480 --> 00:59:14,960
build around some basic principles

00:59:11,520 --> 00:59:15,760
um let's get a little bit deeper but not

00:59:14,960 --> 00:59:17,359
too much

00:59:15,760 --> 00:59:20,160
about the frameworks and tools that we

00:59:17,359 --> 00:59:22,160
usually see around so

00:59:20,160 --> 00:59:24,000
in a recent experience i wanted to start

00:59:22,160 --> 00:59:24,880
a new project and i didn't want to go

00:59:24,000 --> 00:59:26,880
through

00:59:24,880 --> 00:59:28,000
what i already knew but i wanted to take

00:59:26,880 --> 00:59:30,559
that as a

00:59:28,000 --> 00:59:33,119
in this new role that i have i wanted to

00:59:30,559 --> 00:59:36,240
get something new um

00:59:33,119 --> 00:59:38,000
to learn as well um so i decided to have

00:59:36,240 --> 00:59:40,240
a quick look and i saw that

00:59:38,000 --> 00:59:42,720
it's even worse than it was before on

00:59:40,240 --> 00:59:44,720
the this kind of

00:59:42,720 --> 00:59:46,960
tools that you have available and also

00:59:44,720 --> 00:59:48,480
the comparisons and blog posts and

00:59:46,960 --> 00:59:49,280
everything around which one i should

00:59:48,480 --> 00:59:50,960
pick

00:59:49,280 --> 00:59:52,799
and it's a matter of presentation i

00:59:50,960 --> 00:59:53,280
would say like whatever was presented

00:59:52,799 --> 00:59:55,920
better

00:59:53,280 --> 00:59:57,359
i was about to pick that one and yes of

00:59:55,920 --> 01:00:00,480
course i picked

00:59:57,359 --> 01:00:01,119
the one that you can see on the top but

01:00:00,480 --> 01:00:03,040
that

01:00:01,119 --> 01:00:04,640
still doesn't change the way that i was

01:00:03,040 --> 01:00:08,240
working before that

01:00:04,640 --> 01:00:10,079
i would like to see a structure

01:00:08,240 --> 01:00:11,520
of the projects that keeps everything

01:00:10,079 --> 01:00:14,240
independent

01:00:11,520 --> 01:00:14,960
so in the future you can actually detach

01:00:14,240 --> 01:00:16,720
not being

01:00:14,960 --> 01:00:18,799
highly coupled with one of the

01:00:16,720 --> 01:00:21,839
frameworks or a specific tool

01:00:18,799 --> 01:00:23,920
um so if you see all the

01:00:21,839 --> 01:00:25,520
available out there frameworks react

01:00:23,920 --> 01:00:28,000
view angular amber

01:00:25,520 --> 01:00:28,960
i just randomly really randomly picked a

01:00:28,000 --> 01:00:32,079
few of them there

01:00:28,960 --> 01:00:32,640
i haven't even seen some of them all of

01:00:32,079 --> 01:00:35,520
them

01:00:32,640 --> 01:00:35,920
they have the good and bad parts that

01:00:35,520 --> 01:00:38,960
are

01:00:35,920 --> 01:00:40,880
the same the same pros and cons

01:00:38,960 --> 01:00:42,240
about the community the learning curve

01:00:40,880 --> 01:00:44,720
the full stack support

01:00:42,240 --> 01:00:45,599
every one of them is trying to get that

01:00:44,720 --> 01:00:47,280
there are a few small

01:00:45,599 --> 01:00:48,720
differences and some architectural

01:00:47,280 --> 01:00:50,400
differences that will make the

01:00:48,720 --> 01:00:52,160
difference for you

01:00:50,400 --> 01:00:53,760
some might be more convenient some

01:00:52,160 --> 01:00:56,799
others not

01:00:53,760 --> 01:01:00,160
but the main problem is

01:00:56,799 --> 01:01:02,079
when you decide to start if you

01:01:00,160 --> 01:01:04,079
if you go with the popularity and all

01:01:02,079 --> 01:01:06,720
that it might lead you into

01:01:04,079 --> 01:01:07,599
using a framework or some tools that are

01:01:06,720 --> 01:01:09,839
massive

01:01:07,599 --> 01:01:11,599
and you might not even need it so that's

01:01:09,839 --> 01:01:13,599
why the most important part would be to

01:01:11,599 --> 01:01:15,920
get something that you understand

01:01:13,599 --> 01:01:17,520
and then build from there in a way that

01:01:15,920 --> 01:01:20,000
you can easily

01:01:17,520 --> 01:01:21,440
change in the future uh here's a graph

01:01:20,000 --> 01:01:23,119
actually that i found really

01:01:21,440 --> 01:01:25,599
really interesting that you can get from

01:01:23,119 --> 01:01:27,760
npm npmtrends.com

01:01:25,599 --> 01:01:29,920
and it shows you the downloads that are

01:01:27,760 --> 01:01:32,319
happening when it was updated because

01:01:29,920 --> 01:01:34,480
you do need to make sure that it's a

01:01:32,319 --> 01:01:35,280
ongoing project once you adopt one of

01:01:34,480 --> 01:01:38,640
the frameworks

01:01:35,280 --> 01:01:42,160
and tools that we have available um

01:01:38,640 --> 01:01:45,359
and so it also gives a mini

01:01:42,160 --> 01:01:48,000
zipped file uh the size

01:01:45,359 --> 01:01:48,960
um it's a it's a really good comparison

01:01:48,000 --> 01:01:52,079
tool but still

01:01:48,960 --> 01:01:53,520
it will not be a direct answer for you

01:01:52,079 --> 01:01:55,359
that this is the one that you should go

01:01:53,520 --> 01:01:56,880
for because it highly depends on the

01:01:55,359 --> 01:01:58,559
project that you want to build you want

01:01:56,880 --> 01:02:01,920
you don't want to get a massive tool for

01:01:58,559 --> 01:02:01,920
a tiny project

01:02:02,799 --> 01:02:09,119
so yeah so that's the main thing

01:02:06,000 --> 01:02:11,359
how can i know that

01:02:09,119 --> 01:02:12,319
from whatever side i compare something

01:02:11,359 --> 01:02:14,880
uh or

01:02:12,319 --> 01:02:16,000
what kind of comparison do i do for the

01:02:14,880 --> 01:02:18,480
project that i want to do

01:02:16,000 --> 01:02:20,160
where i want to build which one should i

01:02:18,480 --> 01:02:23,200
be what is the best

01:02:20,160 --> 01:02:25,760
way to compare all these things

01:02:23,200 --> 01:02:26,240
from which aspect none of them is full

01:02:25,760 --> 01:02:29,520
on

01:02:26,240 --> 01:02:31,520
one feature um but

01:02:29,520 --> 01:02:32,960
all of them seem really ideal for what i

01:02:31,520 --> 01:02:34,720
want to do like what is happening how

01:02:32,960 --> 01:02:37,680
how i make the perfect

01:02:34,720 --> 01:02:38,880
comparison um so it's not about which

01:02:37,680 --> 01:02:40,960
one you will use so

01:02:38,880 --> 01:02:42,480
don't worry about that i would suggest

01:02:40,960 --> 01:02:43,599
and that's what the experience so far

01:02:42,480 --> 01:02:45,359
has shown

01:02:43,599 --> 01:02:48,160
it's about how you use what you're gonna

01:02:45,359 --> 01:02:51,599
do the more you identify that you'll

01:02:48,160 --> 01:02:54,880
be doing some uh changes

01:02:51,599 --> 01:02:56,559
during the product development um

01:02:54,880 --> 01:02:58,799
how easy will it be for you to make

01:02:56,559 --> 01:03:01,119
those changes how easy will it be

01:02:58,799 --> 01:03:02,559
if you start alone in the project and

01:03:01,119 --> 01:03:04,240
then later on you build the

01:03:02,559 --> 01:03:05,839
proof of concept and then later on you

01:03:04,240 --> 01:03:08,160
build a team around that

01:03:05,839 --> 01:03:09,359
how painful will it be for someone else

01:03:08,160 --> 01:03:12,079
to join your project how

01:03:09,359 --> 01:03:12,480
how how easy would it be for them to

01:03:12,079 --> 01:03:15,920
just

01:03:12,480 --> 01:03:17,200
start being productive right away um

01:03:15,920 --> 01:03:19,119
what happens with the visual

01:03:17,200 --> 01:03:20,960
representation like is it heavily

01:03:19,119 --> 01:03:23,200
like the thing that you're building do

01:03:20,960 --> 01:03:24,400
you really need uh some eye candies like

01:03:23,200 --> 01:03:27,760
uh

01:03:24,400 --> 01:03:31,280
i have some nice animations and stuff uh

01:03:27,760 --> 01:03:31,680
so if you can combine all these things

01:03:31,280 --> 01:03:33,760
with

01:03:31,680 --> 01:03:34,960
whichever you pick that you can make it

01:03:33,760 --> 01:03:37,119
in a way

01:03:34,960 --> 01:03:39,520
that you can onboard people you can make

01:03:37,119 --> 01:03:41,839
it production ready really really fast

01:03:39,520 --> 01:03:43,359
that would be the one to go and of

01:03:41,839 --> 01:03:46,480
course if you want to learn

01:03:43,359 --> 01:03:46,960
something new it's good to get a tool

01:03:46,480 --> 01:03:50,559
that

01:03:46,960 --> 01:03:53,119
seems to support all these quite easily

01:03:50,559 --> 01:03:54,079
and gives you that kind of new

01:03:53,119 --> 01:03:55,599
experience

01:03:54,079 --> 01:03:57,599
but still you need to make sure the way

01:03:55,599 --> 01:04:00,720
that you're going to be using that

01:03:57,599 --> 01:04:03,119
it's not just going to be a boiler plate

01:04:00,720 --> 01:04:04,319
something up and running a few tweaks or

01:04:03,119 --> 01:04:07,119
maybe

01:04:04,319 --> 01:04:08,240
heavy workarounds because don't forget

01:04:07,119 --> 01:04:10,240
not only for you

01:04:08,240 --> 01:04:11,359
specifically but anyone on boarding in

01:04:10,240 --> 01:04:14,880
your into

01:04:11,359 --> 01:04:18,319
onto a new framework they don't know yet

01:04:14,880 --> 01:04:21,760
the best practices so that's up to

01:04:18,319 --> 01:04:23,920
how we can split that coupled

01:04:21,760 --> 01:04:25,520
or like dependency between those

01:04:23,920 --> 01:04:27,200
projects that will build the main

01:04:25,520 --> 01:04:30,319
product

01:04:27,200 --> 01:04:31,839
we do have a few basic layers like the

01:04:30,319 --> 01:04:35,359
back-end api

01:04:31,839 --> 01:04:38,319
have a nice api a few calls that you can

01:04:35,359 --> 01:04:38,799
create and then make things work in a

01:04:38,319 --> 01:04:41,599
way

01:04:38,799 --> 01:04:43,200
nice naming way and a few bunch of uh

01:04:41,599 --> 01:04:44,720
common practices and

01:04:43,200 --> 01:04:46,720
best practices that you can find out

01:04:44,720 --> 01:04:48,799
there then

01:04:46,720 --> 01:04:51,039
what i usually do actually what i always

01:04:48,799 --> 01:04:54,079
do from a few years back

01:04:51,039 --> 01:04:56,720
is to build an sdk that will communicate

01:04:54,079 --> 01:04:57,440
with that api and that doesn't need to

01:04:56,720 --> 01:05:00,319
be around

01:04:57,440 --> 01:05:01,520
any frameworks and like the least tools

01:05:00,319 --> 01:05:03,920
you can use and for

01:05:01,520 --> 01:05:04,640
like no framework like even for tools

01:05:03,920 --> 01:05:07,359
the list

01:05:04,640 --> 01:05:09,280
you can use to build a library like an

01:05:07,359 --> 01:05:11,039
sdk that you have a new api

01:05:09,280 --> 01:05:12,480
for what the framework the

01:05:11,039 --> 01:05:14,720
representation layer will

01:05:12,480 --> 01:05:15,680
use some of the things will be

01:05:14,720 --> 01:05:18,000
duplicated

01:05:15,680 --> 01:05:19,359
but again it's about reusing what you

01:05:18,000 --> 01:05:22,400
commonly do

01:05:19,359 --> 01:05:24,960
bundling in one place i will get

01:05:22,400 --> 01:05:27,039
into more details later on but it's like

01:05:24,960 --> 01:05:28,240
another layer before the framework that

01:05:27,039 --> 01:05:29,760
you will choose

01:05:28,240 --> 01:05:31,599
and probably you will need to make a

01:05:29,760 --> 01:05:33,839
smooth plug-in right there

01:05:31,599 --> 01:05:34,880
which will accommodate like we'll go

01:05:33,839 --> 01:05:37,839
along with

01:05:34,880 --> 01:05:40,720
the framework you get a little bit more

01:05:37,839 --> 01:05:43,839
visual of what i'm trying to explain

01:05:40,720 --> 01:05:45,839
we have here um it's like a puzzle but a

01:05:43,839 --> 01:05:48,480
little bit more complex than a puzzle

01:05:45,839 --> 01:05:50,079
so the first layer with the services api

01:05:48,480 --> 01:05:51,520
on the top

01:05:50,079 --> 01:05:53,280
we need to make sure that the api is

01:05:51,520 --> 01:05:56,319
flexible enough and supports

01:05:53,280 --> 01:06:00,079
as many use cases as possible so

01:05:56,319 --> 01:06:03,280
usually we try to leave as little as um

01:06:00,079 --> 01:06:04,880
as possible restrictions like

01:06:03,280 --> 01:06:06,720
we should allow most of the things to

01:06:04,880 --> 01:06:08,559
happen

01:06:06,720 --> 01:06:10,319
i will take as an example one of the

01:06:08,559 --> 01:06:11,680
projects that i was working on recently

01:06:10,319 --> 01:06:14,720
was

01:06:11,680 --> 01:06:17,680
a group of communication

01:06:14,720 --> 01:06:19,920
where you have users joining the group

01:06:17,680 --> 01:06:21,039
and then establishing audio connections

01:06:19,920 --> 01:06:24,960
within there

01:06:21,039 --> 01:06:28,240
sending text events and images um

01:06:24,960 --> 01:06:30,000
i didn't need to what actually what we

01:06:28,240 --> 01:06:32,079
never did was to restrict

01:06:30,000 --> 01:06:34,000
a lot what a user can do within the

01:06:32,079 --> 01:06:36,960
group joining living

01:06:34,000 --> 01:06:37,860
we had only basic ones to restructure

01:06:36,960 --> 01:06:39,520
those

01:06:37,860 --> 01:06:42,079
[Music]

01:06:39,520 --> 01:06:44,640
with events to restructure the data sets

01:06:42,079 --> 01:06:44,640
that we had

01:06:44,839 --> 01:06:50,960
stateless and

01:06:47,359 --> 01:06:53,920
it's the api was quite um

01:06:50,960 --> 01:06:55,119
let's say easy to read easy to trigger

01:06:53,920 --> 01:06:57,280
actions

01:06:55,119 --> 01:06:58,480
but you could cause inconsistencies

01:06:57,280 --> 01:07:00,799
really really easily

01:06:58,480 --> 01:07:02,640
because you need to know for example

01:07:00,799 --> 01:07:06,160
when you join a conversation

01:07:02,640 --> 01:07:08,799
a group you need to use um

01:07:06,160 --> 01:07:10,240
a member id let's say it's an example

01:07:08,799 --> 01:07:11,200
that you might need a payload from

01:07:10,240 --> 01:07:14,319
another call

01:07:11,200 --> 01:07:17,920
you just did before

01:07:14,319 --> 01:07:20,799
it sounds tough to explain that

01:07:17,920 --> 01:07:22,000
and it can cause a lot of headaches so

01:07:20,799 --> 01:07:22,880
it's very important to have good

01:07:22,000 --> 01:07:25,920
documentation

01:07:22,880 --> 01:07:27,200
at every layer but still we wouldn't

01:07:25,920 --> 01:07:30,559
like to restrict

01:07:27,200 --> 01:07:32,640
those calls

01:07:30,559 --> 01:07:35,280
because if you start restricting what

01:07:32,640 --> 01:07:38,559
you can do you lose the use cases for

01:07:35,280 --> 01:07:41,599
later on so you leave it as wide as open

01:07:38,559 --> 01:07:42,720
as possible as flexible and then you

01:07:41,599 --> 01:07:46,640
have a

01:07:42,720 --> 01:07:48,480
client sdk which is driving that api

01:07:46,640 --> 01:07:50,720
so anybody in the future that would like

01:07:48,480 --> 01:07:52,559
to build another client to talk to your

01:07:50,720 --> 01:07:54,839
service

01:07:52,559 --> 01:07:55,839
they can copy these actions from this

01:07:54,839 --> 01:07:58,720
sdk the

01:07:55,839 --> 01:07:59,440
web for instance we did it for web sdk

01:07:58,720 --> 01:08:01,520
and then

01:07:59,440 --> 01:08:02,880
we were driving the teams for ios and

01:08:01,520 --> 01:08:06,319
android

01:08:02,880 --> 01:08:07,200
so this is a way to make a client-side

01:08:06,319 --> 01:08:09,280
library

01:08:07,200 --> 01:08:10,799
that you can do more things you can take

01:08:09,280 --> 01:08:14,400
care of caching

01:08:10,799 --> 01:08:17,279
map data that might be a little bit

01:08:14,400 --> 01:08:20,319
harder it was harder doing it by

01:08:17,279 --> 01:08:23,120
yourself from the api with uh

01:08:20,319 --> 01:08:24,080
simple calls but this is the case a

01:08:23,120 --> 01:08:25,920
little bit smarter

01:08:24,080 --> 01:08:27,120
for those use cases that your product

01:08:25,920 --> 01:08:29,040
needs

01:08:27,120 --> 01:08:30,560
of course it will start restricting a

01:08:29,040 --> 01:08:31,279
little bit of use cases or what you can

01:08:30,560 --> 01:08:33,759
do with

01:08:31,279 --> 01:08:35,679
direct calls to your rest api but it's

01:08:33,759 --> 01:08:38,799
still like another entry point you might

01:08:35,679 --> 01:08:40,640
control the rest api by

01:08:38,799 --> 01:08:42,480
arrest calls you might need that you

01:08:40,640 --> 01:08:43,920
might want your clients to build up

01:08:42,480 --> 01:08:46,640
their own tool

01:08:43,920 --> 01:08:48,480
to tweak or do things around so the

01:08:46,640 --> 01:08:52,000
client is decay we'll have

01:08:48,480 --> 01:08:55,440
a few more use like a few use cases

01:08:52,000 --> 01:08:59,440
a little bit less than before it will be

01:08:55,440 --> 01:09:01,279
more um simple for someone to use

01:08:59,440 --> 01:09:03,920
so with two calls probably you will be

01:09:01,279 --> 01:09:06,480
able to initiate the flow

01:09:03,920 --> 01:09:07,040
that's in the director rest api calls

01:09:06,480 --> 01:09:09,359
would take

01:09:07,040 --> 01:09:11,120
five calls to get the payloads and then

01:09:09,359 --> 01:09:12,960
use them somehow

01:09:11,120 --> 01:09:14,400
um and another common thing would be

01:09:12,960 --> 01:09:17,120
caching monitoring and

01:09:14,400 --> 01:09:18,560
reporting everybody is doing that in

01:09:17,120 --> 01:09:21,359
every project or in every

01:09:18,560 --> 01:09:24,159
client that wouldn't be needed so you

01:09:21,359 --> 01:09:27,839
detach that logic and you have an sdk

01:09:24,159 --> 01:09:30,319
where you can use in many many cases and

01:09:27,839 --> 01:09:31,920
still back to our main goal which was to

01:09:30,319 --> 01:09:34,319
build a web client

01:09:31,920 --> 01:09:36,480
we use that sdk with the framework that

01:09:34,319 --> 01:09:39,679
we picked earlier

01:09:36,480 --> 01:09:42,159
um they're going to be

01:09:39,679 --> 01:09:43,600
a few more limitations there to be

01:09:42,159 --> 01:09:46,080
introduced

01:09:43,600 --> 01:09:47,679
so the framework will need a specific

01:09:46,080 --> 01:09:49,679
way of some data to be

01:09:47,679 --> 01:09:51,359
presented you don't want that logic in

01:09:49,679 --> 01:09:52,480
the sdk you don't want to make it

01:09:51,359 --> 01:09:55,679
specific

01:09:52,480 --> 01:09:58,159
for a framework so therefore

01:09:55,679 --> 01:09:58,719
you build a plugin a small tiny little

01:09:58,159 --> 01:10:02,000
project

01:09:58,719 --> 01:10:05,600
that will take care of making more

01:10:02,000 --> 01:10:07,120
friendly your sdk to the framework that

01:10:05,600 --> 01:10:10,560
you want to pick

01:10:07,120 --> 01:10:14,400
so in this case let's say we picked

01:10:10,560 --> 01:10:17,360
angular or react

01:10:14,400 --> 01:10:17,840
the most popular ones at the moment i

01:10:17,360 --> 01:10:21,280
think

01:10:17,840 --> 01:10:23,360
um you can get um

01:10:21,280 --> 01:10:25,120
some kind of inconsistencies between

01:10:23,360 --> 01:10:27,440
some objects if you

01:10:25,120 --> 01:10:28,480
if in javascript you are using

01:10:27,440 --> 01:10:31,280
references

01:10:28,480 --> 01:10:31,679
or you copy and clone some objects you

01:10:31,280 --> 01:10:33,199
can

01:10:31,679 --> 01:10:35,199
take care of all these things that might

01:10:33,199 --> 01:10:38,800
cause troubles to your framework

01:10:35,199 --> 01:10:41,120
within that plugin and then

01:10:38,800 --> 01:10:43,360
you use the framework to do what it's

01:10:41,120 --> 01:10:44,560
meant to do to display the data that you

01:10:43,360 --> 01:10:47,600
will provide

01:10:44,560 --> 01:10:51,120
it will have some smart logic about

01:10:47,600 --> 01:10:53,199
caching some bit more the states and

01:10:51,120 --> 01:10:55,920
holding states for pages that you're

01:10:53,199 --> 01:10:58,159
using it will have amazing optimizations

01:10:55,920 --> 01:10:58,960
it will have alerts and warnings if you

01:10:58,159 --> 01:11:02,239
forget

01:10:58,960 --> 01:11:03,360
area tags or whatever you're not doing

01:11:02,239 --> 01:11:07,760
well

01:11:03,360 --> 01:11:11,760
um this way you rely

01:11:07,760 --> 01:11:13,679
for what is meant to be the front side

01:11:11,760 --> 01:11:15,760
to make it more optimal and great

01:11:13,679 --> 01:11:17,440
without worrying what just happened

01:11:15,760 --> 01:11:19,120
before getting that kind of data

01:11:17,440 --> 01:11:22,080
structure that you want to present

01:11:19,120 --> 01:11:22,640
and how that will interact with the user

01:11:22,080 --> 01:11:24,239
um

01:11:22,640 --> 01:11:26,400
all that interaction with the user of

01:11:24,239 --> 01:11:28,320
course is getting filtered again

01:11:26,400 --> 01:11:29,600
and it's getting all the way up the rest

01:11:28,320 --> 01:11:31,600
api

01:11:29,600 --> 01:11:33,280
or any api that you have on the set

01:11:31,600 --> 01:11:35,600
aside

01:11:33,280 --> 01:11:37,199
um in a way that later in the future you

01:11:35,600 --> 01:11:39,440
can either either split

01:11:37,199 --> 01:11:41,120
teams and have a team working on the

01:11:39,440 --> 01:11:43,120
framework if you can get experts that

01:11:41,120 --> 01:11:43,760
they can do best practices in react or

01:11:43,120 --> 01:11:46,880
angular on

01:11:43,760 --> 01:11:50,560
any framework and they will be

01:11:46,880 --> 01:11:52,480
good to to go like they will have this

01:11:50,560 --> 01:11:54,000
framework plug-in again javascript

01:11:52,480 --> 01:11:57,280
everything is javascript the themes

01:11:54,000 --> 01:11:59,440
usually work all the stack

01:11:57,280 --> 01:12:01,120
so they can jump in you can do code

01:11:59,440 --> 01:12:03,440
reviews and pull requests between

01:12:01,120 --> 01:12:04,880
each individual project and you can get

01:12:03,440 --> 01:12:06,719
this kind of consistency

01:12:04,880 --> 01:12:08,560
and expertise in each layer so if

01:12:06,719 --> 01:12:10,719
somebody is more expert

01:12:08,560 --> 01:12:12,000
on getting how the browser is doing some

01:12:10,719 --> 01:12:15,040
stuff and how

01:12:12,000 --> 01:12:17,440
something is optimal for the browser

01:12:15,040 --> 01:12:18,960
they can focus on that client sdk to do

01:12:17,440 --> 01:12:20,960
a proper

01:12:18,960 --> 01:12:22,159
memory management and everything that is

01:12:20,960 --> 01:12:24,480
needed

01:12:22,159 --> 01:12:25,199
and that is slightly duplicated under

01:12:24,480 --> 01:12:27,840
the hood

01:12:25,199 --> 01:12:29,280
in the framework layer but the only

01:12:27,840 --> 01:12:29,840
thing you need to do is to make sure

01:12:29,280 --> 01:12:32,880
that

01:12:29,840 --> 01:12:33,679
you keep it updated um and then you

01:12:32,880 --> 01:12:37,280
wouldn't worry

01:12:33,679 --> 01:12:38,960
too much about those things so to get an

01:12:37,280 --> 01:12:41,679
example of a flow

01:12:38,960 --> 01:12:43,120
let's say we want to display some users

01:12:41,679 --> 01:12:46,320
from the api

01:12:43,120 --> 01:12:48,180
then you're fetching the data but

01:12:46,320 --> 01:12:49,520
in some cases you might need to

01:12:48,180 --> 01:12:52,560
[Music]

01:12:49,520 --> 01:12:54,000
do a second call let's say

01:12:52,560 --> 01:12:56,159
you face a conversation and then you

01:12:54,000 --> 01:12:58,239
want a group a group name and then you

01:12:56,159 --> 01:13:02,000
want to bring the members of the group

01:12:58,239 --> 01:13:02,560
or the details of each member so the sdk

01:13:02,000 --> 01:13:04,640
layer

01:13:02,560 --> 01:13:06,640
is the one that knows these things they

01:13:04,640 --> 01:13:07,600
know the sdk knows that you need three

01:13:06,640 --> 01:13:11,600
calls

01:13:07,600 --> 01:13:13,440
or how to attach a token access token

01:13:11,600 --> 01:13:15,280
and all these things and then you can

01:13:13,440 --> 01:13:16,800
also provide that cache here

01:13:15,280 --> 01:13:18,320
that you can actually intercept the

01:13:16,800 --> 01:13:21,600
calls to the network

01:13:18,320 --> 01:13:23,440
and you can get some faster results then

01:13:21,600 --> 01:13:25,040
what happens in the next layer would be

01:13:23,440 --> 01:13:27,120
the data structure

01:13:25,040 --> 01:13:28,159
is everything okay the way that the sdk

01:13:27,120 --> 01:13:30,800
presented like

01:13:28,159 --> 01:13:32,880
is everything working i mean is it

01:13:30,800 --> 01:13:33,840
convenient for the framework to present

01:13:32,880 --> 01:13:38,640
it

01:13:33,840 --> 01:13:41,440
if it is or if it's not

01:13:38,640 --> 01:13:42,960
we want to change that or we want to

01:13:41,440 --> 01:13:44,840
create a plugin

01:13:42,960 --> 01:13:47,440
that will change that structure of the

01:13:44,840 --> 01:13:49,600
data if they need change

01:13:47,440 --> 01:13:50,800
then we want to do something specific

01:13:49,600 --> 01:13:54,239
for the framework

01:13:50,800 --> 01:13:55,679
we put it in this plugin if it's not

01:13:54,239 --> 01:13:58,560
needing any change

01:13:55,679 --> 01:14:00,880
so we just fetch the groups and the

01:13:58,560 --> 01:14:01,360
listing is enough then we just pass it

01:14:00,880 --> 01:14:04,320
on

01:14:01,360 --> 01:14:06,000
to the framework and then we have this

01:14:04,320 --> 01:14:08,880
logic in the framework that we

01:14:06,000 --> 01:14:10,719
have an array or we just display if we

01:14:08,880 --> 01:14:12,719
don't need an array and we would prefer

01:14:10,719 --> 01:14:15,760
to have

01:14:12,719 --> 01:14:16,800
a set we communicate with a team that

01:14:15,760 --> 01:14:19,920
works in the sdk

01:14:16,800 --> 01:14:21,199
is it something that would refrain or is

01:14:19,920 --> 01:14:23,199
it something that is not good with the

01:14:21,199 --> 01:14:24,719
best practices that we're thinking or

01:14:23,199 --> 01:14:26,320
some other reason that it shouldn't be

01:14:24,719 --> 01:14:28,159
at set

01:14:26,320 --> 01:14:30,000
and they can do it there and then pass

01:14:28,159 --> 01:14:31,280
it on as what we need for the framework

01:14:30,000 --> 01:14:32,320
because more likely it will be a

01:14:31,280 --> 01:14:35,470
decision that

01:14:32,320 --> 01:14:36,640
can be applied for any kind of front and

01:14:35,470 --> 01:14:40,480
[Music]

01:14:36,640 --> 01:14:42,719
tool or yeah um

01:14:40,480 --> 01:14:45,120
or if it's something that it would be

01:14:42,719 --> 01:14:47,600
too much work to do in the sdk side

01:14:45,120 --> 01:14:48,320
then the team can take that into the

01:14:47,600 --> 01:14:51,360
plugin

01:14:48,320 --> 01:14:54,080
for this framework if we see that we

01:14:51,360 --> 01:14:55,520
in the future we want more front side of

01:14:54,080 --> 01:14:58,640
facing

01:14:55,520 --> 01:15:00,400
project need that change eventually you

01:14:58,640 --> 01:15:01,679
don't duplicate that you just move it on

01:15:00,400 --> 01:15:04,159
the sdk side

01:15:01,679 --> 01:15:05,199
so it's like decisions made if you think

01:15:04,159 --> 01:15:07,199
about it in

01:15:05,199 --> 01:15:08,719
code wise you create a function to not

01:15:07,199 --> 01:15:10,719
duplicate your code

01:15:08,719 --> 01:15:12,560
it's similar here that you create these

01:15:10,719 --> 01:15:13,679
kind of layers that you don't duplicate

01:15:12,560 --> 01:15:17,280
the logic

01:15:13,679 --> 01:15:20,560
so you can plug you can get a client or

01:15:17,280 --> 01:15:22,000
another app from someone else then you

01:15:20,560 --> 01:15:25,360
just expose the sdk

01:15:22,000 --> 01:15:26,239
api and they can do the work to present

01:15:25,360 --> 01:15:29,280
in another way

01:15:26,239 --> 01:15:30,960
the data and and if any time that you

01:15:29,280 --> 01:15:32,800
identify that they will need to do the

01:15:30,960 --> 01:15:37,199
same thing over and over again

01:15:32,800 --> 01:15:37,199
you take over that in this decay layer

01:15:37,280 --> 01:15:41,199
so each layer as i described earlier it

01:15:39,600 --> 01:15:44,239
has all this kind of

01:15:41,199 --> 01:15:47,840
um structure that shows

01:15:44,239 --> 01:15:49,920
up here that we have like

01:15:47,840 --> 01:15:51,440
[Music]

01:15:49,920 --> 01:15:54,400
less conflict because everything is

01:15:51,440 --> 01:15:57,679
split into different projects

01:15:54,400 --> 01:15:57,679
so we don't get a lot of

01:15:57,840 --> 01:16:03,199
changes within the same file

01:16:01,360 --> 01:16:05,040
it's easier to test because you can test

01:16:03,199 --> 01:16:08,159
each one of those individually

01:16:05,040 --> 01:16:08,159
each one of them

01:16:08,560 --> 01:16:11,679
of the layers and you can build

01:16:10,080 --> 01:16:13,120
automating tests you can build

01:16:11,679 --> 01:16:15,120
deployments

01:16:13,120 --> 01:16:16,800
uh integrations and everything you need

01:16:15,120 --> 01:16:19,360
per project

01:16:16,800 --> 01:16:20,000
um and then you get to reuse that kind

01:16:19,360 --> 01:16:22,000
of thing for

01:16:20,000 --> 01:16:23,920
every new client that you want to create

01:16:22,000 --> 01:16:24,960
a new client application i think i can

01:16:23,920 --> 01:16:28,080
use that

01:16:24,960 --> 01:16:28,480
term a few times um and of course it

01:16:28,080 --> 01:16:30,480
will

01:16:28,480 --> 01:16:32,480
make it faster and it will make it

01:16:30,480 --> 01:16:34,239
easier to switch to another framework or

01:16:32,480 --> 01:16:35,360
another type like if you want to use

01:16:34,239 --> 01:16:37,040
electron later on

01:16:35,360 --> 01:16:38,400
and especially for javascript we have so

01:16:37,040 --> 01:16:41,440
many choices

01:16:38,400 --> 01:16:41,440
and then if you want to create

01:16:41,920 --> 01:16:48,159
a native project or anything you just

01:16:45,040 --> 01:16:51,120
mimic the behavior of the sdk layer

01:16:48,159 --> 01:16:53,120
to provide that to others um and of

01:16:51,120 --> 01:16:54,159
course you can open source.sdk and you

01:16:53,120 --> 01:16:55,760
get more

01:16:54,159 --> 01:16:58,800
uh people working on that and building

01:16:55,760 --> 01:17:01,440
more and then the last bit

01:16:58,800 --> 01:17:02,410
is about the agile processes and how you

01:17:01,440 --> 01:17:03,520
get

01:17:02,410 --> 01:17:06,080
[Music]

01:17:03,520 --> 01:17:06,800
how you get that into teams and how that

01:17:06,080 --> 01:17:08,400
is helpful

01:17:06,800 --> 01:17:10,239
if it's split per project it's more

01:17:08,400 --> 01:17:12,640
transparent it's very easy

01:17:10,239 --> 01:17:14,159
for everybody to jump in the planning

01:17:12,640 --> 01:17:15,760
session from the product

01:17:14,159 --> 01:17:17,199
into your conference you create a

01:17:15,760 --> 01:17:19,600
featured description

01:17:17,199 --> 01:17:20,560
and then within that description you can

01:17:19,600 --> 01:17:23,840
start creating

01:17:20,560 --> 01:17:26,640
technical pages that's how we we

01:17:23,840 --> 01:17:27,360
narrowed down the scope of the meetings

01:17:26,640 --> 01:17:29,440
actually

01:17:27,360 --> 01:17:30,480
it was really really helpful you can

01:17:29,440 --> 01:17:34,159
identify there with

01:17:30,480 --> 01:17:36,000
developers i think

01:17:34,159 --> 01:17:37,460
you can identify there with developers

01:17:36,000 --> 01:17:40,749
how to get

01:17:37,460 --> 01:17:40,749
[Music]

01:17:41,040 --> 01:17:48,000
you can get a lot of

01:17:45,360 --> 01:17:48,960
technical details identify some risks

01:17:48,000 --> 01:17:52,320
identify

01:17:48,960 --> 01:17:55,040
some kind of uh chunk

01:17:52,320 --> 01:17:56,560
work that can be made a ticket later on

01:17:55,040 --> 01:17:59,360
and then of course we move to the

01:17:56,560 --> 01:18:01,280
jira board where you can attach from the

01:17:59,360 --> 01:18:04,400
description or the technical specs

01:18:01,280 --> 01:18:05,040
you can attach everything um to create a

01:18:04,400 --> 01:18:08,719
ticket

01:18:05,040 --> 01:18:08,719
link to that and also link to the

01:18:09,120 --> 01:18:12,239
github repos and all those integrations

01:18:11,120 --> 01:18:16,159
that are there

01:18:12,239 --> 01:18:18,560
for very very smooth prs um

01:18:16,159 --> 01:18:20,960
version control was the best part

01:18:18,560 --> 01:18:22,719
because you can create between those

01:18:20,960 --> 01:18:25,840
projects you can create a semantic

01:18:22,719 --> 01:18:27,199
versioning and that will help you

01:18:25,840 --> 01:18:28,880
for compatibility backwards

01:18:27,199 --> 01:18:30,000
compatibility everything going back to

01:18:28,880 --> 01:18:32,640
the api

01:18:30,000 --> 01:18:33,280
what version is your sdk the plugin and

01:18:32,640 --> 01:18:36,159
the

01:18:33,280 --> 01:18:37,280
framework that is using all this kind of

01:18:36,159 --> 01:18:40,719
structure

01:18:37,280 --> 01:18:41,440
and this way you can keep this like neat

01:18:40,719 --> 01:18:45,679
and

01:18:41,440 --> 01:18:48,800
very healthy way of providing a product

01:18:45,679 --> 01:18:50,719
and then it's not going to be

01:18:48,800 --> 01:18:52,840
a massive change from one side to the

01:18:50,719 --> 01:18:55,920
other like a breaking change to the

01:18:52,840 --> 01:18:57,040
um braking chains in the framework can

01:18:55,920 --> 01:18:59,600
be

01:18:57,040 --> 01:19:00,960
absorbed in the plug-in layer so we

01:18:59,600 --> 01:19:02,560
don't affect

01:19:00,960 --> 01:19:06,480
the way that you communicate the back

01:19:02,560 --> 01:19:09,440
end or and also the other way around

01:19:06,480 --> 01:19:11,440
so the main key point of that workflow

01:19:09,440 --> 01:19:14,480
was to set the acceptance criteria

01:19:11,440 --> 01:19:16,239
for each project specifically and

01:19:14,480 --> 01:19:18,239
make the basic test for continuous

01:19:16,239 --> 01:19:21,520
delivery

01:19:18,239 --> 01:19:22,480
so it's up to the team to define in each

01:19:21,520 --> 01:19:25,280
layer

01:19:22,480 --> 01:19:26,560
if you're going to provide at least one

01:19:25,280 --> 01:19:29,199
um

01:19:26,560 --> 01:19:31,199
at least one test or the best case test

01:19:29,199 --> 01:19:34,480
so you move on with the prs

01:19:31,199 --> 01:19:37,840
pretty much that's what covers

01:19:34,480 --> 01:19:40,400
all my

01:19:37,840 --> 01:19:42,080
the way that we were planning things and

01:19:40,400 --> 01:19:44,320
lastly

01:19:42,080 --> 01:19:45,920
the kanban which i mentioned earlier

01:19:44,320 --> 01:19:46,960
after you set up everything and you have

01:19:45,920 --> 01:19:49,360
the tickets

01:19:46,960 --> 01:19:50,880
uh the best structure so far that worked

01:19:49,360 --> 01:19:53,840
for most of the teams

01:19:50,880 --> 01:19:54,360
was to have the columns to be some of

01:19:53,840 --> 01:19:55,840
them

01:19:54,360 --> 01:19:58,560
[Music]

01:19:55,840 --> 01:20:00,000
active and some of them inactive each

01:19:58,560 --> 01:20:02,000
ticket of course has the best

01:20:00,000 --> 01:20:03,760
description for everybody to work

01:20:02,000 --> 01:20:05,440
even if you go on holiday someone else

01:20:03,760 --> 01:20:07,360
can pick the ticket and they should find

01:20:05,440 --> 01:20:11,199
a link on what you were intending to do

01:20:07,360 --> 01:20:12,880
within the conference pages and

01:20:11,199 --> 01:20:14,800
the first column would be the backlog

01:20:12,880 --> 01:20:16,880
having a few tickets just those that are

01:20:14,800 --> 01:20:19,360
needed for the next few weeks

01:20:16,880 --> 01:20:21,199
we shouldn't put tickets in there just

01:20:19,360 --> 01:20:24,239
to have them or just organize

01:20:21,199 --> 01:20:27,040
we have the conflict space for that um

01:20:24,239 --> 01:20:28,480
so everybody could pick from the backlog

01:20:27,040 --> 01:20:30,400
whatever seems more relevant

01:20:28,480 --> 01:20:32,800
depends on the team and the product if

01:20:30,400 --> 01:20:33,679
you want to have a specific and street

01:20:32,800 --> 01:20:36,480
order

01:20:33,679 --> 01:20:37,120
i prefer not to uh and just keep the

01:20:36,480 --> 01:20:38,639
momentum

01:20:37,120 --> 01:20:40,239
of each developer when they want to pick

01:20:38,639 --> 01:20:42,400
something that seems more related

01:20:40,239 --> 01:20:44,719
than what they thought before and then

01:20:42,400 --> 01:20:47,600
later on and the next column

01:20:44,719 --> 01:20:49,520
the backlog is inactive then it's active

01:20:47,600 --> 01:20:51,520
if you move the ticket in verification

01:20:49,520 --> 01:20:53,280
which means that you pick a topic and

01:20:51,520 --> 01:20:55,920
you investigate what else you need

01:20:53,280 --> 01:20:58,000
to build that to meet the acceptance

01:20:55,920 --> 01:20:59,600
criteria to say it's done

01:20:58,000 --> 01:21:01,760
so you need to have all the information

01:20:59,600 --> 01:21:04,560
that you can say it's done

01:21:01,760 --> 01:21:06,239
to work on to make it done so you gather

01:21:04,560 --> 01:21:07,600
all the information in that stage

01:21:06,239 --> 01:21:09,040
you don't have to immediately start

01:21:07,600 --> 01:21:10,639
working on that but you can just then

01:21:09,040 --> 01:21:12,000
move it ready for development and

01:21:10,639 --> 01:21:15,360
anybody can move it

01:21:12,000 --> 01:21:16,800
anybody can pick it up and that means

01:21:15,360 --> 01:21:19,199
that you gathered everything that is

01:21:16,800 --> 01:21:20,000
needed and it's accepted you have the

01:21:19,199 --> 01:21:22,159
discussions

01:21:20,000 --> 01:21:23,440
and the conversation with other teams

01:21:22,159 --> 01:21:25,120
and then you move it for ready for

01:21:23,440 --> 01:21:27,520
development

01:21:25,120 --> 01:21:29,199
then another task is from the ready for

01:21:27,520 --> 01:21:31,440
development to put it in progress

01:21:29,199 --> 01:21:33,520
means that somebody's working on that

01:21:31,440 --> 01:21:34,960
code pairing whatever you want to do and

01:21:33,520 --> 01:21:36,960
however it works for you and for this

01:21:34,960 --> 01:21:38,960
ticket specifically

01:21:36,960 --> 01:21:40,960
and then you move it to code review

01:21:38,960 --> 01:21:43,280
ideally you want each ticket to

01:21:40,960 --> 01:21:45,120
last for a day which means that even the

01:21:43,280 --> 01:21:48,000
code review could happen within the day

01:21:45,120 --> 01:21:49,760
if not you have to chase it up it's your

01:21:48,000 --> 01:21:51,440
ticket and your responsibility mainly

01:21:49,760 --> 01:21:53,040
and you have the standards and the

01:21:51,440 --> 01:21:56,080
casual meetings

01:21:53,040 --> 01:21:57,440
to chase for that and within the code

01:21:56,080 --> 01:22:00,560
review of course

01:21:57,440 --> 01:22:01,360
it's up to the team to define the

01:22:00,560 --> 01:22:04,320
acceptance

01:22:01,360 --> 01:22:04,880
and the comments when you create a

01:22:04,320 --> 01:22:06,320
comment

01:22:04,880 --> 01:22:07,840
and you want actually the ticket to be

01:22:06,320 --> 01:22:08,400
merged but you just don't want to miss

01:22:07,840 --> 01:22:10,080
something

01:22:08,400 --> 01:22:11,920
then you just create another ticket and

01:22:10,080 --> 01:22:13,280
link it to that

01:22:11,920 --> 01:22:16,159
or if it's something that's going to

01:22:13,280 --> 01:22:16,719
break or you worry that's going to break

01:22:16,159 --> 01:22:19,520
something

01:22:16,719 --> 01:22:21,120
then you do a suggestion and not accept

01:22:19,520 --> 01:22:24,400
so it shouldn't be merged

01:22:21,120 --> 01:22:26,320
of course if there's a qa it's involved

01:22:24,400 --> 01:22:27,840
in that stage either before the merge or

01:22:26,320 --> 01:22:29,120
after depends on the workflow that you

01:22:27,840 --> 01:22:31,120
have set up

01:22:29,120 --> 01:22:32,239
and after that you push the ticket to

01:22:31,120 --> 01:22:34,400
ready for release

01:22:32,239 --> 01:22:36,080
everything is passing and is ready to

01:22:34,400 --> 01:22:38,560
make a release

01:22:36,080 --> 01:22:39,440
some some projects are easy to automate

01:22:38,560 --> 01:22:40,960
that part as well

01:22:39,440 --> 01:22:42,800
when it's ready for release to actually

01:22:40,960 --> 01:22:44,800
do the release automatically

01:22:42,800 --> 01:22:45,840
some other needs a holding area where

01:22:44,800 --> 01:22:47,840
you hold

01:22:45,840 --> 01:22:49,040
and pile up the tickets for that

01:22:47,840 --> 01:22:50,880
specific version

01:22:49,040 --> 01:22:52,960
and the 0 version is actually a really

01:22:50,880 --> 01:22:56,000
really uh good thing because

01:22:52,960 --> 01:22:58,880
if you keep a nice title on the ticket

01:22:56,000 --> 01:23:00,639
then gives you directly a change look so

01:22:58,880 --> 01:23:02,080
imagine if you have four projects just

01:23:00,639 --> 01:23:05,440
for the front that sometimes

01:23:02,080 --> 01:23:06,000
in in all projects that i saw or before

01:23:05,440 --> 01:23:08,080
joining

01:23:06,000 --> 01:23:09,360
teams it was one project for all this

01:23:08,080 --> 01:23:11,440
front side

01:23:09,360 --> 01:23:12,800
it was very hard to say what changed and

01:23:11,440 --> 01:23:13,520
how it changed and how this is being

01:23:12,800 --> 01:23:15,760
used

01:23:13,520 --> 01:23:16,960
so you can get that from zero and the

01:23:15,760 --> 01:23:19,600
version number

01:23:16,960 --> 01:23:20,880
all needs per layer of each project that

01:23:19,600 --> 01:23:24,719
you build

01:23:20,880 --> 01:23:27,199
um this is pretty much it and thank you

01:23:24,719 --> 01:23:28,320
and yeah we'll look for the questions

01:23:27,199 --> 01:23:30,880
and everything you need

01:23:28,320 --> 01:23:32,400
you can find me with this handler

01:23:30,880 --> 01:23:36,480
everywhere

01:23:32,400 --> 01:23:36,480
anywhere yeah that's good

01:23:38,400 --> 01:23:42,000
thanks costas um yeah there there is a

01:23:41,199 --> 01:23:46,239
question

01:23:42,000 --> 01:23:49,360
um from from deborah tarenska

01:23:46,239 --> 01:23:50,480
uh deborah has a question that um she'll

01:23:49,360 --> 01:23:52,719
find really useful

01:23:50,480 --> 01:23:54,880
for the work she's doing on her code

01:23:52,719 --> 01:23:58,480
base um

01:23:54,880 --> 01:23:58,719
so uh the the question is how to build

01:23:58,480 --> 01:24:02,320
an

01:23:58,719 --> 01:24:05,440
sdk and what are the best practices

01:24:02,320 --> 01:24:07,199
whilst doing so um yeah

01:24:05,440 --> 01:24:09,120
um actually that's a really good

01:24:07,199 --> 01:24:09,600
question i didn't go too deep into that

01:24:09,120 --> 01:24:13,199
um

01:24:09,600 --> 01:24:16,560
i had in my mind as uh on the video

01:24:13,199 --> 01:24:19,120
so yeah um sdk is actually

01:24:16,560 --> 01:24:19,679
um imagine it does the way that you want

01:24:19,120 --> 01:24:22,480
your

01:24:19,679 --> 01:24:22,719
service to be approached like what use k

01:24:22,480 --> 01:24:25,760
is

01:24:22,719 --> 01:24:26,960
what use cases you want to create the

01:24:25,760 --> 01:24:30,080
sdk layer is

01:24:26,960 --> 01:24:30,639
just pure javascript some examples i can

01:24:30,080 --> 01:24:34,639
give you

01:24:30,639 --> 01:24:36,880
is let's say the websocket communication

01:24:34,639 --> 01:24:38,320
you will pick a tool to connect to your

01:24:36,880 --> 01:24:41,120
back end

01:24:38,320 --> 01:24:42,800
so probably socket io let's say so you

01:24:41,120 --> 01:24:44,880
try to pick as little as possible of

01:24:42,800 --> 01:24:47,040
those libraries or tools

01:24:44,880 --> 01:24:49,199
but definitely not a big framework

01:24:47,040 --> 01:24:52,320
nothing that touches your screen

01:24:49,199 --> 01:24:54,719
the sdk ideally is only javascript

01:24:52,320 --> 01:24:56,639
running some functions and logic the

01:24:54,719 --> 01:24:59,920
functions that are running would be

01:24:56,639 --> 01:25:03,440
contacting your api getting the token

01:24:59,920 --> 01:25:05,100
the access token um like i can give you

01:25:03,440 --> 01:25:07,040
examples of the interface would be

01:25:05,100 --> 01:25:11,120
[Music]

01:25:07,040 --> 01:25:14,480
like login get get users

01:25:11,120 --> 01:25:16,080
create create groups join groups um and

01:25:14,480 --> 01:25:17,280
then you build it in a way that makes

01:25:16,080 --> 01:25:19,600
sense like

01:25:17,280 --> 01:25:20,560
you have a group you you create the file

01:25:19,600 --> 01:25:24,000
structure as well

01:25:20,560 --> 01:25:26,560
um the models so once you do get groups

01:25:24,000 --> 01:25:28,560
you create a group class and then in

01:25:26,560 --> 01:25:31,199
that group class you have dot

01:25:28,560 --> 01:25:31,679
users or dot members and then you can

01:25:31,199 --> 01:25:35,840
say

01:25:31,679 --> 01:25:38,239
pla and group dot member

01:25:35,840 --> 01:25:39,440
members first and then kick so you

01:25:38,239 --> 01:25:41,679
remove

01:25:39,440 --> 01:25:43,520
a member from the group all this kind of

01:25:41,679 --> 01:25:44,239
logic that's how you manage the groups

01:25:43,520 --> 01:25:47,360
or

01:25:44,239 --> 01:25:50,560
member thief member whatever

01:25:47,360 --> 01:25:53,679
dot enable audio that will kick in the

01:25:50,560 --> 01:25:54,800
audio api for the browser both things

01:25:53,679 --> 01:25:57,360
the models

01:25:54,800 --> 01:25:59,679
and the library specifically for the

01:25:57,360 --> 01:26:02,800
browser like how to create

01:25:59,679 --> 01:26:05,040
audio streams how to

01:26:02,800 --> 01:26:08,159
connect to a websocket all those things

01:26:05,040 --> 01:26:11,440
are going to be happening everywhere

01:26:08,159 --> 01:26:13,280
so you can yes i see also another

01:26:11,440 --> 01:26:16,400
question from the graphql

01:26:13,280 --> 01:26:18,159
yes also graphql can take make it even

01:26:16,400 --> 01:26:19,760
simpler instead of having to do three

01:26:18,159 --> 01:26:22,480
calls to get and shape

01:26:19,760 --> 01:26:23,920
that class you can use graphql to make

01:26:22,480 --> 01:26:26,239
it simpler and have one

01:26:23,920 --> 01:26:27,280
but still you need that kind of logic

01:26:26,239 --> 01:26:30,880
like

01:26:27,280 --> 01:26:32,159
how you initiate um the websocket

01:26:30,880 --> 01:26:34,560
what you need to link from that

01:26:32,159 --> 01:26:36,560
websocket still you can use

01:26:34,560 --> 01:26:38,400
graphql to minimize the things that you

01:26:36,560 --> 01:26:40,560
want to display

01:26:38,400 --> 01:26:41,760
but again if you do it too much with

01:26:40,560 --> 01:26:45,199
graphql you will go

01:26:41,760 --> 01:26:47,040
so so narrow that that

01:26:45,199 --> 01:26:48,960
you will make a client that is specific

01:26:47,040 --> 01:26:51,040
like you limit the use cases

01:26:48,960 --> 01:26:52,000
so again with graphql you will keep it

01:26:51,040 --> 01:26:53,360
quite wide

01:26:52,000 --> 01:26:56,400
and maybe you will need to store

01:26:53,360 --> 01:26:58,480
something in cache intercept the cache

01:26:56,400 --> 01:27:01,280
but again use some tools like how to

01:26:58,480 --> 01:27:03,360
enable audio how to

01:27:01,280 --> 01:27:04,880
cross browser compatibility take care of

01:27:03,360 --> 01:27:06,719
these things so everything that will be

01:27:04,880 --> 01:27:08,560
happening for every framework that you

01:27:06,719 --> 01:27:10,800
can imagine

01:27:08,560 --> 01:27:12,320
a developer client will use you put it

01:27:10,800 --> 01:27:14,960
in that sdk

01:27:12,320 --> 01:27:15,440
and then the second bit of the question

01:27:14,960 --> 01:27:18,880
is

01:27:15,440 --> 01:27:19,520
how you get that out that's an npm

01:27:18,880 --> 01:27:21,600
module

01:27:19,520 --> 01:27:23,679
and you can find best practices and also

01:27:21,600 --> 01:27:25,520
how to best practices

01:27:23,679 --> 01:27:27,360
it's also how you make modules within

01:27:25,520 --> 01:27:29,120
your sdk

01:27:27,360 --> 01:27:31,360
um so you can read up on that really

01:27:29,120 --> 01:27:33,120
really to pick your own

01:27:31,360 --> 01:27:34,560
group of best practices but make sure

01:27:33,120 --> 01:27:36,480
you put that in conference and

01:27:34,560 --> 01:27:38,159
and try to communicate that in code

01:27:36,480 --> 01:27:40,000
reviews

01:27:38,159 --> 01:27:42,480
and then you create that npm module that

01:27:40,000 --> 01:27:44,239
can be accessed by different ways

01:27:42,480 --> 01:27:47,040
one of the great challenges is how you

01:27:44,239 --> 01:27:47,360
bundle that to provide an entry point

01:27:47,040 --> 01:27:50,159
for

01:27:47,360 --> 01:27:50,719
node so i could use my sdk for the

01:27:50,159 --> 01:27:53,040
browser

01:27:50,719 --> 01:27:55,120
on node server and i could trigger calls

01:27:53,040 --> 01:27:57,280
that's the ideal because it means that

01:27:55,120 --> 01:27:59,280
it's not touching the browser so it's

01:27:57,280 --> 01:28:02,080
not mixing at any level

01:27:59,280 --> 01:28:04,000
with the framework or the display layer

01:28:02,080 --> 01:28:05,360
so you have an sdk you can run even on

01:28:04,000 --> 01:28:08,320
the back end and say

01:28:05,360 --> 01:28:09,840
login create group add users and

01:28:08,320 --> 01:28:12,880
everything else

01:28:09,840 --> 01:28:15,360
and then after that

01:28:12,880 --> 01:28:17,199
you bundle it uh yeah the way you bundle

01:28:15,360 --> 01:28:20,320
it you can also have

01:28:17,199 --> 01:28:22,880
just to finish with answer switches

01:28:20,320 --> 01:28:24,320
so you can bundle some light version or

01:28:22,880 --> 01:28:26,560
some version with audio

01:28:24,320 --> 01:28:27,600
features so you can exclude and include

01:28:26,560 --> 01:28:30,320
those tools

01:28:27,600 --> 01:28:31,440
or you can export a version just for

01:28:30,320 --> 01:28:33,760
frameworks

01:28:31,440 --> 01:28:35,280
for the browser if they need to attach

01:28:33,760 --> 01:28:36,000
something on the browser like sometimes

01:28:35,280 --> 01:28:38,800
you need to

01:28:36,000 --> 01:28:39,920
attach the audio so you can put flags

01:28:38,800 --> 01:28:41,679
there

01:28:39,920 --> 01:28:43,520
and make sure that if you don't need

01:28:41,679 --> 01:28:46,400
audio or you will never try to do that

01:28:43,520 --> 01:28:48,800
and stuff like that i hope that asked

01:28:46,400 --> 01:28:51,440
that question

01:28:48,800 --> 01:28:52,080
um and then i see another one i will

01:28:51,440 --> 01:28:54,880
pick it up

01:28:52,080 --> 01:28:56,239
then uh it says about microservices

01:28:54,880 --> 01:28:59,360
would be better than with

01:28:56,239 --> 01:29:00,239
rest it's not it's not a decision to

01:28:59,360 --> 01:29:02,400
make between

01:29:00,239 --> 01:29:04,159
rest services or the graphql i do

01:29:02,400 --> 01:29:06,159
believe graphql is really good

01:29:04,159 --> 01:29:09,040
um and really efficient for that it

01:29:06,159 --> 01:29:11,360
depends on the project and the layer of

01:29:09,040 --> 01:29:12,880
the api that might the use case is how

01:29:11,360 --> 01:29:15,679
many use cases you want to support and

01:29:12,880 --> 01:29:18,320
how diverse those are

01:29:15,679 --> 01:29:19,679
so if you have the graphql there it's

01:29:18,320 --> 01:29:21,920
good because you can

01:29:19,679 --> 01:29:24,560
create a another layer of that interface

01:29:21,920 --> 01:29:25,679
a little bit more specific for some use

01:29:24,560 --> 01:29:27,679
cases

01:29:25,679 --> 01:29:29,040
if you if you decide to go with rest it

01:29:27,679 --> 01:29:30,159
means that you don't have too many

01:29:29,040 --> 01:29:33,120
consequence

01:29:30,159 --> 01:29:34,719
consequent calls so for instance in this

01:29:33,120 --> 01:29:36,800
example that i was doing before

01:29:34,719 --> 01:29:38,480
with graphql it would be easier for you

01:29:36,800 --> 01:29:41,199
to get a group the members of the group

01:29:38,480 --> 01:29:43,520
which ones are active depends on the

01:29:41,199 --> 01:29:46,000
structure that you have at the back end

01:29:43,520 --> 01:29:47,600
i already had three calls that could be

01:29:46,000 --> 01:29:48,960
one in graphql

01:29:47,600 --> 01:29:51,040
i didn't worry too much and it wasn't

01:29:48,960 --> 01:29:54,800
high priority to move from microservices

01:29:51,040 --> 01:29:56,400
with rest to a graphql service because

01:29:54,800 --> 01:29:57,920
it was very cheap to do those three

01:29:56,400 --> 01:29:59,600
calls at the time

01:29:57,920 --> 01:30:01,360
but if you see that that's expanding it

01:29:59,600 --> 01:30:04,639
should definitely be something that

01:30:01,360 --> 01:30:06,560
you can eventually support but also

01:30:04,639 --> 01:30:07,920
bear in mind that if you do these three

01:30:06,560 --> 01:30:09,280
calls it's only

01:30:07,920 --> 01:30:11,040
like how often those are going to be

01:30:09,280 --> 01:30:12,400
happening because if you have a

01:30:11,040 --> 01:30:14,239
websocket connection

01:30:12,400 --> 01:30:16,320
you can manage to listen to new events

01:30:14,239 --> 01:30:17,840
and update your local one

01:30:16,320 --> 01:30:20,480
data set so you don't have to fetch

01:30:17,840 --> 01:30:22,239
every time when something is happening

01:30:20,480 --> 01:30:24,159
so if you manage well your client you

01:30:22,239 --> 01:30:26,480
can cache these things and you can just

01:30:24,159 --> 01:30:28,719
fetch only the updates

01:30:26,480 --> 01:30:30,000
so it might not be that critical to move

01:30:28,719 --> 01:30:32,480
something like graphql

01:30:30,000 --> 01:30:33,360
if you don't really have all these

01:30:32,480 --> 01:30:35,679
consequent

01:30:33,360 --> 01:30:37,120
calls i hope this answered all the

01:30:35,679 --> 01:30:40,000
questions

01:30:37,120 --> 01:30:40,000
um let me know

01:30:41,679 --> 01:30:45,760
i think there's a there's another

01:30:43,360 --> 01:30:45,760
question

01:30:47,280 --> 01:30:52,320
how about enzymes i i'm not sure how

01:30:49,920 --> 01:30:52,320
about that

01:30:52,960 --> 01:30:56,800
make as many questions as you want um

01:30:55,199 --> 01:30:57,679
what about enzymes i don't get the

01:30:56,800 --> 01:31:00,320
context for that

01:30:57,679 --> 01:31:01,199
it's not um it's not a problem how you

01:31:00,320 --> 01:31:05,040
scale that

01:31:01,199 --> 01:31:06,560
actually the opposite it helps um

01:31:05,040 --> 01:31:08,400
yeah if you can continue the question or

01:31:06,560 --> 01:31:10,880
we can catch up after

01:31:08,400 --> 01:31:12,080
uh to tell me what you mean about

01:31:10,880 --> 01:31:14,960
endings and how

01:31:12,080 --> 01:31:16,800
how to like how you have it in your head

01:31:14,960 --> 01:31:20,159
what is the question

01:31:16,800 --> 01:31:22,239
okay okay we can catch up cool

01:31:20,159 --> 01:31:23,199
cool thanks thanks costas really

01:31:22,239 --> 01:31:26,400
appreciate it

01:31:23,199 --> 01:31:28,719
great great talk again um yeah

01:31:26,400 --> 01:31:30,800
no thanks everyone who who has attended

01:31:28,719 --> 01:31:33,600
tonight obviously

01:31:30,800 --> 01:31:34,560
the three speakers firstly um really

01:31:33,600 --> 01:31:37,520
appreciate

01:31:34,560 --> 01:31:38,560
your time all three of you uh three

01:31:37,520 --> 01:31:40,719
brilliant talks

01:31:38,560 --> 01:31:42,639
and that will be up on our youtube

01:31:40,719 --> 01:31:43,120
channel the js roundabout youtube

01:31:42,639 --> 01:31:47,679
channel

01:31:43,120 --> 01:31:50,239
soon um and darcy in particular

01:31:47,679 --> 01:31:51,040
for helping to put tonight on and

01:31:50,239 --> 01:31:54,639
providing

01:31:51,040 --> 01:31:56,719
great speakers um guys like i said if

01:31:54,639 --> 01:32:00,320
you do put anything online

01:31:56,719 --> 01:32:03,520
please hashtag us jsroundabout um

01:32:00,320 --> 01:32:04,560
i'm gonna put the uh we run seven

01:32:03,520 --> 01:32:08,560
meetups

01:32:04,560 --> 01:32:12,080
um so i'm just putting the

01:32:08,560 --> 01:32:14,000
link to our website in the chat uh you

01:32:12,080 --> 01:32:17,280
can keep up to date there

01:32:14,000 --> 01:32:19,040
um if if you wanna because

01:32:17,280 --> 01:32:21,920
you know if you're interested in other

01:32:19,040 --> 01:32:24,400
uh technology technology

01:32:21,920 --> 01:32:25,440
such as java we've got an agile one

01:32:24,400 --> 01:32:28,480
devops

01:32:25,440 --> 01:32:31,199
ux and and more um

01:32:28,480 --> 01:32:32,880
so i hope to see some of you at those as

01:32:31,199 --> 01:32:35,920
well we're looking to

01:32:32,880 --> 01:32:37,600
get more meetups moving even through

01:32:35,920 --> 01:32:38,880
this period where we obviously have to

01:32:37,600 --> 01:32:42,639
do them

01:32:38,880 --> 01:32:44,480
uh on video um i

01:32:42,639 --> 01:32:46,480
as most of you know by now my name is

01:32:44,480 --> 01:32:48,480
ben solomons um

01:32:46,480 --> 01:32:50,639
please connect with me i recruit for

01:32:48,480 --> 01:32:53,679
software engineering positions

01:32:50,639 --> 01:32:54,400
um whether you're looking now it doesn't

01:32:53,679 --> 01:32:57,280
matter

01:32:54,400 --> 01:32:59,120
um we can still be good to connect for

01:32:57,280 --> 01:33:00,960
the future obviously

01:32:59,120 --> 01:33:03,040
on the flip side if you're hiring

01:33:00,960 --> 01:33:06,080
engineers as well please connect

01:33:03,040 --> 01:33:08,320
and um yeah i i

01:33:06,080 --> 01:33:09,600
i look forward to uh to seeing you all

01:33:08,320 --> 01:33:12,320
at future meetups

01:33:09,600 --> 01:33:14,000
thanks very much it was uh it was it was

01:33:12,320 --> 01:33:23,840
a lot of fun

01:33:14,000 --> 01:33:23,840
uh tonight

01:33:23,940 --> 01:33:51,840
[Music]

01:33:48,840 --> 01:33:51,840
so

01:33:57,300 --> 01:35:35,550
[Music]

01:35:40,890 --> 01:35:43,929
[Music]

01:35:48,890 --> 01:36:11,089
[Music]

01:36:15,720 --> 01:36:18,779
[Music]

01:36:21,920 --> 01:36:24,000

YouTube URL: https://www.youtube.com/watch?v=gp-AK5nzJyw


