Title: GraphQL Auth - Schema Directives Strategy Pattern - JS Roundabout - November 2018
Publication date: 2018-11-13
Playlist: The JS Roundabout
Description: 
	Presented by James Henshaw.

This talk will be a brief guide to how the team at Trint went about securing their GraphQL endpoints through the use of GraphQL directives and an authorisation strategy pattern for adding granularity and modelling access control levels.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:03,929
can you everyone yes I'm James I'm a

00:00:01,860 --> 00:00:05,040
full-stack developer here at Trent I've

00:00:03,929 --> 00:00:07,980
been working here for about a year and a

00:00:05,040 --> 00:00:10,170
half initially we started with a REST

00:00:07,980 --> 00:00:12,030
API then we moved to our custom build

00:00:10,170 --> 00:00:13,710
graphical server which was an

00:00:12,030 --> 00:00:15,929
interesting choice when there was pretty

00:00:13,710 --> 00:00:17,850
much no documentation and now we're

00:00:15,929 --> 00:00:19,529
moving or we have moved to an Apollo

00:00:17,850 --> 00:00:21,689
server so today I'm going to talk

00:00:19,529 --> 00:00:23,699
through how we went about implementing

00:00:21,689 --> 00:00:25,109
our auth using schema directives and the

00:00:23,699 --> 00:00:27,930
strategy blur pattern

00:00:25,109 --> 00:00:32,430
excuse me so first things first whose

00:00:27,930 --> 00:00:35,520
use graph QL good and who knows what

00:00:32,430 --> 00:00:40,290
schema directives are a couple of people

00:00:35,520 --> 00:00:41,309
strategy pattern cool okay so hopefully

00:00:40,290 --> 00:00:42,870
by the end this you know what all of

00:00:41,309 --> 00:00:45,570
those are and you'll see how they fit

00:00:42,870 --> 00:00:51,570
together if not ask questions at the end

00:00:45,570 --> 00:00:52,920
so why do this so originally you want a

00:00:51,570 --> 00:00:53,820
single source for your auth you don't

00:00:52,920 --> 00:00:55,140
want it to be wrapped in lots of

00:00:53,820 --> 00:00:57,329
different functions and resolvers

00:00:55,140 --> 00:00:58,710
because it's gonna get hard later on

00:00:57,329 --> 00:01:00,690
another line cutting a lot of resolvers

00:00:58,710 --> 00:01:01,770
so you don't edit those you want to have

00:01:00,690 --> 00:01:03,690
a single place where your auth is

00:01:01,770 --> 00:01:06,510
handled and so everything's decoupled

00:01:03,690 --> 00:01:08,070
and trust me this is what we did the

00:01:06,510 --> 00:01:10,140
first time around it was a bad idea so

00:01:08,070 --> 00:01:11,460
now we've got the right way around so it

00:01:10,140 --> 00:01:13,380
looks a little bit like this when you've

00:01:11,460 --> 00:01:15,030
sort of done it wrong so you have an API

00:01:13,380 --> 00:01:17,430
request come in this talk how graph QL

00:01:15,030 --> 00:01:19,110
works it comes in it hits your schema

00:01:17,430 --> 00:01:21,799
the schema says okay I need to resolve

00:01:19,110 --> 00:01:26,070
to these this date or these fields and

00:01:21,799 --> 00:01:28,409
it will hit your resolvers now one way

00:01:26,070 --> 00:01:29,520
is to sort of use something like a high

00:01:28,409 --> 00:01:31,680
order component if you're familiar with

00:01:29,520 --> 00:01:33,780
like react and stuff and you can wrap or

00:01:31,680 --> 00:01:35,610
curry a function and you can wrap a

00:01:33,780 --> 00:01:38,100
resolver with an auth method which works

00:01:35,610 --> 00:01:40,079
really well when you have like five or

00:01:38,100 --> 00:01:41,909
so resolvers and then you get 250 a

00:01:40,079 --> 00:01:43,710
hundred or God knows how when your

00:01:41,909 --> 00:01:45,840
Facebook have but when you get to that

00:01:43,710 --> 00:01:47,310
number all of a sudden if you need to

00:01:45,840 --> 00:01:50,159
change an argument that goes into that

00:01:47,310 --> 00:01:53,220
it's going to be a real pain so we moved

00:01:50,159 --> 00:01:58,229
to schema directives and what that looks

00:01:53,220 --> 00:02:00,420
like is a bit like this so we moved our

00:01:58,229 --> 00:02:02,130
auth away from our resolvers so they're

00:02:00,420 --> 00:02:03,479
concerned with just getting data I'll

00:02:02,130 --> 00:02:04,290
explain what resolver is in a second as

00:02:03,479 --> 00:02:08,489
well I'll give an example

00:02:04,290 --> 00:02:11,400
and we moved it into a directive so all

00:02:08,489 --> 00:02:13,080
of our auth is concerned inside this

00:02:11,400 --> 00:02:13,920
directive in one place so when you want

00:02:13,080 --> 00:02:15,300
to work on that or

00:02:13,920 --> 00:02:16,980
you know if you need to change that bit

00:02:15,300 --> 00:02:18,900
of code you work in that single place

00:02:16,980 --> 00:02:19,950
you don't conflict with any resolvers

00:02:18,900 --> 00:02:21,810
because if someone's creating a new

00:02:19,950 --> 00:02:23,489
resolver and you change the earth

00:02:21,810 --> 00:02:24,989
you know whilst I create my new resolver

00:02:23,489 --> 00:02:26,370
they would then have it wrong

00:02:24,989 --> 00:02:29,550
but they they weren't in this case

00:02:26,370 --> 00:02:32,310
because it's decoupled so a little

00:02:29,550 --> 00:02:37,069
example of graph QL and what this

00:02:32,310 --> 00:02:37,069
actually results in will look a bit long

00:02:41,709 --> 00:02:47,660
Liz okay so on the left my left your

00:02:47,090 --> 00:02:50,330
left yeah

00:02:47,660 --> 00:02:52,400
is a query and we have users with

00:02:50,330 --> 00:02:54,080
affected users and for each user we're

00:02:52,400 --> 00:02:55,700
saying please give us a name and whether

00:02:54,080 --> 00:02:58,130
or not they're banned on the right is

00:02:55,700 --> 00:03:01,310
the data that comes back dummy user and

00:02:58,130 --> 00:03:09,739
this person is not banned now basically

00:03:01,310 --> 00:03:12,050
I'm gonna change this value down here we

00:03:09,739 --> 00:03:14,239
run it and all of a sudden band has just

00:03:12,050 --> 00:03:16,640
become null because I'm not authorized

00:03:14,239 --> 00:03:20,480
because I don't have the permissions

00:03:16,640 --> 00:03:21,620
required to access that data now just to

00:03:20,480 --> 00:03:25,370
prove that it's not all happening in the

00:03:21,620 --> 00:03:26,690
resolvers I'm gonna quickly flip over to

00:03:25,370 --> 00:03:30,170
our resolvers which are very complicated

00:03:26,690 --> 00:03:30,620
and every time it returns band so this

00:03:30,170 --> 00:03:32,959
breathing

00:03:30,620 --> 00:03:34,160
there's no warth in there it's this

00:03:32,959 --> 00:03:37,910
resolve is only concerned with getting

00:03:34,160 --> 00:03:38,900
data and returning it so how does that

00:03:37,910 --> 00:03:45,680
work that's why I'm going to talk to you

00:03:38,900 --> 00:03:47,209
now so okay a quick note so as I

00:03:45,680 --> 00:03:50,209
mentioned is authorization or

00:03:47,209 --> 00:03:52,100
authentication authentication is just

00:03:50,209 --> 00:03:53,720
for those you don't know is sort of

00:03:52,100 --> 00:03:55,100
let's say you have an ID card it has a

00:03:53,720 --> 00:03:57,350
picture of your face on your name and

00:03:55,100 --> 00:03:58,850
that proves who you are authorization is

00:03:57,350 --> 00:04:01,130
the fact that that card can get you into

00:03:58,850 --> 00:04:03,350
a building into a room or let you access

00:04:01,130 --> 00:04:04,310
certain information so that's the

00:04:03,350 --> 00:04:05,480
difference so today we're gonna be

00:04:04,310 --> 00:04:10,430
talking about authorization or

00:04:05,480 --> 00:04:12,230
authentication so what to do so with

00:04:10,430 --> 00:04:14,989
regards to this we're going to be

00:04:12,230 --> 00:04:16,850
introducing these three parts here so we

00:04:14,989 --> 00:04:18,530
induce the directive so when an API

00:04:16,850 --> 00:04:20,539
request comes in and it resolves to a

00:04:18,530 --> 00:04:21,919
schema field or an object we're gonna

00:04:20,539 --> 00:04:23,720
say is there a directive present if it

00:04:21,919 --> 00:04:24,740
is handle it in this special way which

00:04:23,720 --> 00:04:28,130
is then going to do our authorization

00:04:24,740 --> 00:04:29,810
using a strategy pattern and then if

00:04:28,130 --> 00:04:31,310
it's allowed resolve as usual and give

00:04:29,810 --> 00:04:34,460
them the data they want so this

00:04:31,310 --> 00:04:37,490
hopefully is what you'll end up with so

00:04:34,460 --> 00:04:38,690
what is a schema directive this is what

00:04:37,490 --> 00:04:44,270
it looks like I stole this from the

00:04:38,690 --> 00:04:46,419
graph Docs and this looks like so the

00:04:44,270 --> 00:04:50,030
key parts are a directive has a name

00:04:46,419 --> 00:04:53,150
maybe some arguments and what it can be

00:04:50,030 --> 00:04:55,220
applied on so and basically if you put

00:04:53,150 --> 00:04:57,950
directive on to an object or a field it

00:04:55,220 --> 00:04:59,750
says this needs to be handled in a

00:04:57,950 --> 00:05:02,620
special manner so what it looks like

00:04:59,750 --> 00:05:06,260
much simpler ways like this so I've said

00:05:02,620 --> 00:05:07,850
the directive called orth is going to be

00:05:06,260 --> 00:05:09,560
applied on objects or on field

00:05:07,850 --> 00:05:13,690
definitions so an object is the type

00:05:09,560 --> 00:05:18,110
user but a field is name band or compost

00:05:13,690 --> 00:05:19,700
so and that's a very simple directive

00:05:18,110 --> 00:05:21,740
but it doesn't really give us too much

00:05:19,700 --> 00:05:24,470
more because there's no way of saying

00:05:21,740 --> 00:05:26,210
what code does that relate to so what we

00:05:24,470 --> 00:05:27,800
do is when we build our schema we're

00:05:26,210 --> 00:05:29,630
going to say okay when you come across

00:05:27,800 --> 00:05:31,340
so this is making use aquire for your

00:05:29,630 --> 00:05:32,780
tools and we're gonna say for our schema

00:05:31,340 --> 00:05:35,270
directives when you come across the

00:05:32,780 --> 00:05:37,040
earth directed link it to our class

00:05:35,270 --> 00:05:38,960
orthe directive which can make use of

00:05:37,040 --> 00:05:40,490
some more graphical tools to allow us to

00:05:38,960 --> 00:05:42,740
implement a strategy pattern every time

00:05:40,490 --> 00:05:47,060
someone tries to access an object or a

00:05:42,740 --> 00:05:50,120
field that has that directive on it so

00:05:47,060 --> 00:05:53,150
these are the two key methods that are

00:05:50,120 --> 00:05:54,260
inside orthe directive not too much now

00:05:53,150 --> 00:05:55,310
I'm going to go through a code example

00:05:54,260 --> 00:05:57,050
later and show you how they actually

00:05:55,310 --> 00:05:58,910
work but these are two things to

00:05:57,050 --> 00:06:00,169
remember so when we're building our

00:05:58,910 --> 00:06:02,780
scheme of the very first time when you

00:06:00,169 --> 00:06:04,790
create that server when we visit user

00:06:02,780 --> 00:06:06,530
we're going to use this visit object and

00:06:04,790 --> 00:06:08,390
when we visit these fields we're gonna

00:06:06,530 --> 00:06:11,720
use the visit field definitions and that

00:06:08,390 --> 00:06:15,350
will allow us to basically implement our

00:06:11,720 --> 00:06:17,060
strategy but what about access levels so

00:06:15,350 --> 00:06:18,590
I mentioned we have different roles and

00:06:17,060 --> 00:06:21,050
you're almost certainly going to need

00:06:18,590 --> 00:06:22,820
this at some point because you will have

00:06:21,050 --> 00:06:24,770
admins you will have users you have

00:06:22,820 --> 00:06:26,780
super users and all sort of things like

00:06:24,770 --> 00:06:28,370
that so you need to make sure that only

00:06:26,780 --> 00:06:31,010
certain people can access certain data

00:06:28,370 --> 00:06:35,240
so that's where we use the strategy

00:06:31,010 --> 00:06:38,180
pattern and that is this so given some

00:06:35,240 --> 00:06:40,580
context you pass that context to an

00:06:38,180 --> 00:06:41,360
abstraction the abstraction is you kind

00:06:40,580 --> 00:06:44,120
of think of it like a switch statement

00:06:41,360 --> 00:06:46,130
and you can say okay give them the

00:06:44,120 --> 00:06:48,320
context or an access level of admin I'm

00:06:46,130 --> 00:06:50,419
going to choose implementation a to

00:06:48,320 --> 00:06:52,729
determine if you're authorized given the

00:06:50,419 --> 00:06:54,770
context or the access level user I'm

00:06:52,729 --> 00:06:55,790
going to choose implementation B and

00:06:54,770 --> 00:06:57,590
well that means again everything is

00:06:55,790 --> 00:07:00,590
nicely decoupled because information

00:06:57,590 --> 00:07:02,660
implementation a b c and whatever else

00:07:00,590 --> 00:07:06,620
you want they all do a very specific job

00:07:02,660 --> 00:07:08,720
but the abstraction that can grow as you

00:07:06,620 --> 00:07:08,930
scale most people can add to it so long

00:07:08,720 --> 00:07:09,949
as

00:07:08,930 --> 00:07:11,630
it knows about your specific

00:07:09,949 --> 00:07:16,009
implementation all this good it's going

00:07:11,630 --> 00:07:17,990
to keep working but how do we get the

00:07:16,009 --> 00:07:21,320
context into that strategy from a

00:07:17,990 --> 00:07:23,270
directive we make use of directive

00:07:21,320 --> 00:07:24,800
arguments so very similar to before but

00:07:23,270 --> 00:07:26,600
I've added a new line on the Left which

00:07:24,800 --> 00:07:28,699
is requires I'm going to say it's of

00:07:26,600 --> 00:07:31,160
type role it has to be of a type role

00:07:28,699 --> 00:07:32,810
which in the enum which is admin user

00:07:31,160 --> 00:07:34,639
can be super user can add all kinds of

00:07:32,810 --> 00:07:36,139
things you want in there and then

00:07:34,639 --> 00:07:38,389
basically I'm going to say for the

00:07:36,139 --> 00:07:41,389
object user if you want to access this

00:07:38,389 --> 00:07:44,030
you have to have been authorized or

00:07:41,389 --> 00:07:45,680
required the role user and then for

00:07:44,030 --> 00:07:46,910
fields for the band field I'm going to

00:07:45,680 --> 00:07:49,520
say you have to be an admin to see

00:07:46,910 --> 00:07:52,849
whether a user has been banned or not so

00:07:49,520 --> 00:07:55,330
this is how it's going to go through so

00:07:52,849 --> 00:07:57,199
what it actually looks like in practice

00:07:55,330 --> 00:07:58,849
so I'm gonna pull up this is a github

00:07:57,199 --> 00:08:00,919
repo I'll post the link I think it's on

00:07:58,849 --> 00:08:03,229
the end of this but I'll also post it in

00:08:00,919 --> 00:08:09,830
whatever is circulating after this and

00:08:03,229 --> 00:08:13,060
we can see here it is in action so these

00:08:09,830 --> 00:08:17,539
shout if you can't see this by the way

00:08:13,060 --> 00:08:20,300
okay so this would be just got defining

00:08:17,539 --> 00:08:22,070
my very basic types of my schema we have

00:08:20,300 --> 00:08:23,360
our directive we're saying there's a

00:08:22,070 --> 00:08:25,520
North directive has have gone through

00:08:23,360 --> 00:08:27,199
before I've simplified the user a little

00:08:25,520 --> 00:08:28,669
bit to say it has name and band and if

00:08:27,199 --> 00:08:31,190
you want to access band you still have

00:08:28,669 --> 00:08:34,070
to have the admin role and then I've got

00:08:31,190 --> 00:08:35,330
a query users so which you saw this is

00:08:34,070 --> 00:08:39,919
the same thing you mate saw me make

00:08:35,330 --> 00:08:42,169
earlier so when we go down to here so

00:08:39,919 --> 00:08:43,370
these roles are resolvers these are this

00:08:42,169 --> 00:08:44,779
existing you saw earlier so nothing

00:08:43,370 --> 00:08:46,940
special going on here and they sort of

00:08:44,779 --> 00:08:49,100
author or anything like that but this is

00:08:46,940 --> 00:08:52,010
the important part where we say when you

00:08:49,100 --> 00:08:54,860
come across this directive called auth

00:08:52,010 --> 00:08:57,020
make use of our class earth directive so

00:08:54,860 --> 00:09:01,160
this is where the functions I showed

00:08:57,020 --> 00:09:03,560
earlier come about so when we visit that

00:09:01,160 --> 00:09:04,850
type user it's going to say okay I want

00:09:03,560 --> 00:09:06,470
you to make sure that this has been

00:09:04,850 --> 00:09:07,820
wrapped and if you visit any fields

00:09:06,470 --> 00:09:09,920
within that I want you to make sure that

00:09:07,820 --> 00:09:11,810
that field has also wrapped so we grab

00:09:09,920 --> 00:09:13,940
the argument requires and say this is

00:09:11,810 --> 00:09:16,760
the role or the context for the strategy

00:09:13,940 --> 00:09:19,750
that this is going to require so for

00:09:16,760 --> 00:09:22,819
example this would be user or admin and

00:09:19,750 --> 00:09:26,839
then the ensures field

00:09:22,819 --> 00:09:29,269
is wrapped go down here we say for each

00:09:26,839 --> 00:09:31,189
of the fields in this type say for

00:09:29,269 --> 00:09:32,809
example the object field it's just going

00:09:31,189 --> 00:09:33,859
to be object but for the multiple fields

00:09:32,809 --> 00:09:35,479
inside it's going to go through all of

00:09:33,859 --> 00:09:37,579
those and it's going to say right what

00:09:35,479 --> 00:09:39,919
role does someone require to actually

00:09:37,579 --> 00:09:42,049
access this information just going to

00:09:39,919 --> 00:09:43,399
grab that and then based on that may be

00:09:42,049 --> 00:09:45,470
given some request data as well so you

00:09:43,399 --> 00:09:47,209
can make use of headers in your API

00:09:45,470 --> 00:09:49,100
requests and stuff like that you're

00:09:47,209 --> 00:09:52,089
going to execute this chess strategy and

00:09:49,100 --> 00:09:54,559
that takes us down here where we can say

00:09:52,089 --> 00:09:56,329
based on the role given in execute the

00:09:54,559 --> 00:09:59,569
strategy for that role give it this data

00:09:56,329 --> 00:10:03,439
and a small example is for the admin

00:09:59,569 --> 00:10:06,259
role with a very secret secret and you

00:10:03,439 --> 00:10:10,399
can see so what it does if I pass in the

00:10:06,259 --> 00:10:12,410
admin so if we go back to here so if

00:10:10,399 --> 00:10:15,379
this role is admin it's going to make

00:10:12,410 --> 00:10:17,109
use of this admin method it's going to

00:10:15,379 --> 00:10:19,489
say right grab the authorization header

00:10:17,109 --> 00:10:22,100
does it match our secret if it does

00:10:19,489 --> 00:10:24,319
return true all is good if it doesn't

00:10:22,100 --> 00:10:25,879
return false and then if it doesn't

00:10:24,319 --> 00:10:30,379
match throw an error show you not

00:10:25,879 --> 00:10:32,329
authorized which is what we saw on one

00:10:30,379 --> 00:10:36,769
of these desktops over here so you saw

00:10:32,329 --> 00:10:39,470
that not authorized message so that is

00:10:36,769 --> 00:10:40,699
effectively it all together cool okay

00:10:39,470 --> 00:10:41,970
well thanks very much for listening and

00:10:40,699 --> 00:10:48,109
hope it helps

00:10:41,970 --> 00:10:48,109

YouTube URL: https://www.youtube.com/watch?v=Uxq70rB94gg


