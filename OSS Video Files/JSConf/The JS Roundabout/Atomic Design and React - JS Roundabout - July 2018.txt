Title: Atomic Design and React - JS Roundabout - July 2018
Publication date: 2018-07-24
Playlist: The JS Roundabout
Description: 
	Presented by Jason Hung and Fabio Tamagno from EDITED.

Jason and Fabio will walk you through the reasons for, why, and how; EDITED have adapted Atomic Design to their engineering process to speed up efficiency. They’ll be sharing some examples of how Atomic Design has improved EDITED’s coding practices, and how it has enabled the frontend team to deliver faster, more frequent results.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,380
so first of all I would have to say I

00:00:02,190 --> 00:00:08,099
would like to say that this is the first

00:00:04,380 --> 00:00:10,830
public talk for me so please bear with

00:00:08,099 --> 00:00:14,400
me I would try to say things very slow

00:00:10,830 --> 00:00:17,190
and clean so our topic is atomic design

00:00:14,400 --> 00:00:20,279
in Viet so who we are

00:00:17,190 --> 00:00:24,410
I'm Jason I'm the design Nate of

00:00:20,279 --> 00:00:27,330
attitude and then Fabio is also Italian

00:00:24,410 --> 00:00:31,109
developer who is our senior software

00:00:27,330 --> 00:00:33,180
engineer so one of the reason that we

00:00:31,109 --> 00:00:35,730
would like to share you our experience

00:00:33,180 --> 00:00:39,210
is because we just we have very fresh

00:00:35,730 --> 00:00:41,579
experience of applying atomic design we

00:00:39,210 --> 00:00:43,829
react component in last year who spent

00:00:41,579 --> 00:00:46,230
like nine months to work on squad to

00:00:43,829 --> 00:00:47,910
basically refactoring all the UI

00:00:46,230 --> 00:00:52,879
components from the existing

00:00:47,910 --> 00:00:57,660
applications so I hope you enjoyed our

00:00:52,879 --> 00:00:59,820
sharing so just to give you a little bit

00:00:57,660 --> 00:01:02,910
more information about attitude attitude

00:00:59,820 --> 00:01:05,489
since of retail analysis platform I'm a

00:01:02,910 --> 00:01:09,510
software gather information to billion

00:01:05,489 --> 00:01:10,799
spotted worldwide it reads and collect

00:01:09,510 --> 00:01:14,670
every single bits of information

00:01:10,799 --> 00:01:16,650
available from the product when we then

00:01:14,670 --> 00:01:19,590
use machine learning technology to

00:01:16,650 --> 00:01:22,799
analysis the information and structure

00:01:19,590 --> 00:01:25,500
it into categories colors price and

00:01:22,799 --> 00:01:27,509
performance related activities by

00:01:25,500 --> 00:01:32,189
teaching software how to recognize

00:01:27,509 --> 00:01:35,549
product and interpret the data so we

00:01:32,189 --> 00:01:38,520
have over weight over 800 billion data

00:01:35,549 --> 00:01:45,840
point of the world we have monitored

00:01:38,520 --> 00:01:49,710
nine ninety thousand brands and then so

00:01:45,840 --> 00:01:53,070
what we do is we have a huge data base

00:01:49,710 --> 00:01:55,409
of all politicians for the information

00:01:53,070 --> 00:01:57,270
and we would like to help you use it to

00:01:55,409 --> 00:02:00,509
make a better decisions based on data

00:01:57,270 --> 00:02:04,229
that we collect so this is overview of

00:02:00,509 --> 00:02:06,630
edited and so what we are going to cover

00:02:04,229 --> 00:02:09,060
today is like first I would talk about

00:02:06,630 --> 00:02:12,569
the reason that we applied atomic design

00:02:09,060 --> 00:02:14,879
and then o talks like

00:02:12,569 --> 00:02:17,579
atomic design in practice so how do we

00:02:14,879 --> 00:02:21,120
apply atomic design interviewing a

00:02:17,579 --> 00:02:24,150
design system for everyone in tinto to

00:02:21,120 --> 00:02:27,739
used and then Fabio is going to talk

00:02:24,150 --> 00:02:30,750
about in a technical side how do we

00:02:27,739 --> 00:02:34,799
based on the component that we create we

00:02:30,750 --> 00:02:36,959
then then make it in happening into yet

00:02:34,799 --> 00:02:39,829
and finally we will talk about a

00:02:36,959 --> 00:02:46,319
successful story and lessons we learned

00:02:39,829 --> 00:02:51,989
yes so first of all why do we choose

00:02:46,319 --> 00:02:54,810
atomic design so well like there's

00:02:51,989 --> 00:02:56,849
multiple reasons one of the reason is we

00:02:54,810 --> 00:02:59,579
would like to break the waterfall

00:02:56,849 --> 00:03:03,030
process so what it mean is like the

00:02:59,579 --> 00:03:06,299
traditional product cycle is we first

00:03:03,030 --> 00:03:08,730
have a pot owner to do the research then

00:03:06,299 --> 00:03:10,290
they will do analysis and then the

00:03:08,730 --> 00:03:12,239
designer we do that you are designed

00:03:10,290 --> 00:03:14,730
they would think about the UX they would

00:03:12,239 --> 00:03:17,849
do prototype and then the engineer we

00:03:14,730 --> 00:03:20,760
then built it and then the validation do

00:03:17,849 --> 00:03:24,419
testing and release it the problem of it

00:03:20,760 --> 00:03:28,620
is like the fact that most of the fun

00:03:24,419 --> 00:03:31,530
and developer have strong opinion and it

00:03:28,620 --> 00:03:35,970
just it just killed them that they have

00:03:31,530 --> 00:03:39,150
little impact interactions on the design

00:03:35,970 --> 00:03:41,340
and basically by working as a waterfall

00:03:39,150 --> 00:03:43,079
process it's very difficult to iterate

00:03:41,340 --> 00:03:48,569
any design changes at the later stage

00:03:43,079 --> 00:03:51,030
which we would like to avoid so instead

00:03:48,569 --> 00:03:54,209
of the water for process we would like

00:03:51,030 --> 00:03:57,269
to have a iterative design cycle so what

00:03:54,209 --> 00:03:58,829
I mean it's like so it's similar at the

00:03:57,269 --> 00:04:02,310
beginning we have followed only to do

00:03:58,829 --> 00:04:05,939
research but slightly differently we

00:04:02,310 --> 00:04:09,090
will have a psycho loop in the middle so

00:04:05,939 --> 00:04:11,879
what I mean is like we we will do

00:04:09,090 --> 00:04:14,549
analysis we'll do design we will have

00:04:11,879 --> 00:04:16,409
developer build it we will validate it

00:04:14,549 --> 00:04:18,900
the same but then we'll iterate the

00:04:16,409 --> 00:04:21,570
process and here we are happy with the

00:04:18,900 --> 00:04:24,630
design because a lot of the time is like

00:04:21,570 --> 00:04:25,290
if we do design in a very top level and

00:04:24,630 --> 00:04:28,590
then we don't

00:04:25,290 --> 00:04:30,830
iterated like one North audience at

00:04:28,590 --> 00:04:33,780
before like it's so difficult to

00:04:30,830 --> 00:04:39,330
consider order situations and how it

00:04:33,780 --> 00:04:42,240
looks like from bottom to top also we we

00:04:39,330 --> 00:04:44,400
then have we don't have more perspective

00:04:42,240 --> 00:04:47,190
from different people from the team like

00:04:44,400 --> 00:04:49,290
everyone could join the idea generations

00:04:47,190 --> 00:04:52,260
sections everyone can give their

00:04:49,290 --> 00:04:58,770
opinions and that makes everyone in team

00:04:52,260 --> 00:05:02,570
much more happier so in order to create

00:04:58,770 --> 00:05:06,960
a future-proof designed so this is the

00:05:02,570 --> 00:05:09,330
history of edited app so so editor is

00:05:06,960 --> 00:05:11,310
being a teacher app is being beautiful

00:05:09,330 --> 00:05:14,520
like nine years and then on the

00:05:11,310 --> 00:05:16,470
left-hand sides to design eight to nine

00:05:14,520 --> 00:05:18,750
years ago and the middle in the middle

00:05:16,470 --> 00:05:20,550
is like a three years ago and then on

00:05:18,750 --> 00:05:25,620
the right hand side is what we just

00:05:20,550 --> 00:05:27,330
built from last year so as you can see

00:05:25,620 --> 00:05:29,910
the digital product is getting more

00:05:27,330 --> 00:05:31,650
complicated from years to years it

00:05:29,910 --> 00:05:34,410
really looks more complicated because

00:05:31,650 --> 00:05:36,390
user always have new features that they

00:05:34,410 --> 00:05:38,570
want to add we want to add more value to

00:05:36,390 --> 00:05:44,490
the user we want to add more value to

00:05:38,570 --> 00:05:46,590
everyone so you can okay so instead of

00:05:44,490 --> 00:05:49,290
remembering the application every few

00:05:46,590 --> 00:05:50,850
years because I revamping the

00:05:49,290 --> 00:05:53,120
application it's like it takes a lot of

00:05:50,850 --> 00:05:55,320
energy from everyone from the team

00:05:53,120 --> 00:05:56,970
basically you take at least at the year

00:05:55,320 --> 00:05:58,770
to be REM everything so it doesn't make

00:05:56,970 --> 00:06:00,900
sense you do it a few years it's just a

00:05:58,770 --> 00:06:02,970
waste of time so therefore we are

00:06:00,900 --> 00:06:06,750
looking for sustainable design systems

00:06:02,970 --> 00:06:09,780
that could be a base and for now and

00:06:06,750 --> 00:06:16,200
also for future for any other like

00:06:09,780 --> 00:06:18,930
future iterative design changes so one

00:06:16,200 --> 00:06:20,670
of the issue that we have is the app

00:06:18,930 --> 00:06:23,970
itself it's very complicated that we

00:06:20,670 --> 00:06:27,360
have over 20 30 different templates

00:06:23,970 --> 00:06:32,700
across different sessions they are chart

00:06:27,360 --> 00:06:35,520
report task descriptions product product

00:06:32,700 --> 00:06:38,050
image for a cup everything that you

00:06:35,520 --> 00:06:40,600
could think of but the problem is

00:06:38,050 --> 00:06:43,389
it's very difficult to make all the

00:06:40,600 --> 00:06:45,340
design consistent because the more

00:06:43,389 --> 00:06:47,949
people work in a team the more engine

00:06:45,340 --> 00:06:50,500
join the team the different slightly

00:06:47,949 --> 00:06:54,099
different energy they using or the way

00:06:50,500 --> 00:06:57,720
they cook it we just make it more more

00:06:54,099 --> 00:07:01,389
complicated after a few months so on and

00:06:57,720 --> 00:07:03,400
so in the current application problem

00:07:01,389 --> 00:07:05,949
that we're facing is that it's very

00:07:03,400 --> 00:07:09,789
difficult to reuse any element and no

00:07:05,949 --> 00:07:12,729
one really know what is the final result

00:07:09,789 --> 00:07:15,310
or like what to be expect and don't even

00:07:12,729 --> 00:07:17,199
know like who to talk to because one

00:07:15,310 --> 00:07:19,509
element could be done by one of the

00:07:17,199 --> 00:07:21,520
developer but none of the other from

00:07:19,509 --> 00:07:24,940
know where to find the code how to

00:07:21,520 --> 00:07:28,380
implement it and all like how many over

00:07:24,940 --> 00:07:28,380
white Starwood happened

00:07:28,440 --> 00:07:35,400
so the last reason is that we want to be

00:07:32,710 --> 00:07:38,740
able to reusable component library that

00:07:35,400 --> 00:07:41,530
basically as a common language for both

00:07:38,740 --> 00:07:43,690
designer developer for people who have

00:07:41,530 --> 00:07:45,699
no design background but still easy

00:07:43,690 --> 00:07:47,759
enough to understand the design system

00:07:45,699 --> 00:07:50,259
that we have been building because

00:07:47,759 --> 00:07:53,949
basically it's impossible for only

00:07:50,259 --> 00:07:56,680
designer to to make sure design is

00:07:53,949 --> 00:07:58,210
consistent across web we need everyone

00:07:56,680 --> 00:08:00,250
to understand the design system

00:07:58,210 --> 00:08:04,240
including developer including port

00:08:00,250 --> 00:08:08,710
manager including everyone by having by

00:08:04,240 --> 00:08:13,710
having online okay yes sir

00:08:08,710 --> 00:08:16,650
so how could we approach atomic design

00:08:13,710 --> 00:08:18,909
so this slide is basically the same as

00:08:16,650 --> 00:08:22,030
before so I'm not going to talk over

00:08:18,909 --> 00:08:25,599
again but then what is interesting is

00:08:22,030 --> 00:08:28,750
that this is an example of our retail

00:08:25,599 --> 00:08:30,909
reports so yes as you can see in the

00:08:28,750 --> 00:08:35,349
pages it's in the top level design you

00:08:30,909 --> 00:08:36,700
see all elements for report card and one

00:08:35,349 --> 00:08:38,560
of the very interesting things like one

00:08:36,700 --> 00:08:41,950
of the audience's asked like how do we

00:08:38,560 --> 00:08:44,200
make design properly because like if you

00:08:41,950 --> 00:08:47,520
design it from bottom to top is so easy

00:08:44,200 --> 00:08:50,529
to make design no in top-level

00:08:47,520 --> 00:08:51,460
because because when think about it when

00:08:50,529 --> 00:08:53,980
you're looking at

00:08:51,460 --> 00:08:55,840
to mindful that both the most basic

00:08:53,980 --> 00:08:58,060
element if you're just looking at it is

00:08:55,840 --> 00:08:59,170
so easy to make a design decision over

00:08:58,060 --> 00:09:03,130
it but then you don't know the

00:08:59,170 --> 00:09:06,220
relationship between this component to

00:09:03,130 --> 00:09:09,790
other component and it's make it

00:09:06,220 --> 00:09:13,450
difficult to imagine the overall outcome

00:09:09,790 --> 00:09:15,670
so that's why some of the design could

00:09:13,450 --> 00:09:17,770
look pretty but I do have to say

00:09:15,670 --> 00:09:20,920
like the way we do these is not just

00:09:17,770 --> 00:09:23,350
from bottom to top in the beginning we

00:09:20,920 --> 00:09:27,100
spend like one month of time each design

00:09:23,350 --> 00:09:30,190
I just try to revamp the existing page

00:09:27,100 --> 00:09:32,980
with everything on the design and try to

00:09:30,190 --> 00:09:35,080
we when try to redesign every component

00:09:32,980 --> 00:09:36,910
and then we just literally just talk

00:09:35,080 --> 00:09:39,790
together and like change these design

00:09:36,910 --> 00:09:42,010
changes design change everything until a

00:09:39,790 --> 00:09:44,860
stage that we are quite happy of what we

00:09:42,010 --> 00:09:47,770
have then we start build atomic

00:09:44,860 --> 00:09:51,100
component the molecule component and

00:09:47,770 --> 00:09:54,610
organism component because that at least

00:09:51,100 --> 00:10:00,340
we try to figure out how it looks like

00:09:54,610 --> 00:10:03,340
in top level and then so I'm not going

00:10:00,340 --> 00:10:07,120
to go through the eternal design element

00:10:03,340 --> 00:10:09,070
to details the one thing that we apply

00:10:07,120 --> 00:10:12,760
in ultimate design not just component

00:10:09,070 --> 00:10:16,210
not just test Falls it could also about

00:10:12,760 --> 00:10:19,900
the color of the font size of the font

00:10:16,210 --> 00:10:21,970
to be about font size to scales and also

00:10:19,900 --> 00:10:23,650
could be a system like for example we

00:10:21,970 --> 00:10:27,160
are using a Phoenix operating system

00:10:23,650 --> 00:10:30,790
what it mean is like every margin

00:10:27,160 --> 00:10:35,860
padding in order component should be a

00:10:30,790 --> 00:10:37,900
number of multiple by three and like

00:10:35,860 --> 00:10:42,610
those rules is just helping to make a

00:10:37,900 --> 00:10:44,920
more consistent UI so if you combine a

00:10:42,610 --> 00:10:47,860
fewer to attend component together it

00:10:44,920 --> 00:10:49,600
would be molecule and then you come back

00:10:47,860 --> 00:10:52,960
a few molecule and add them together you

00:10:49,600 --> 00:10:55,780
get a self-contained organisms which is

00:10:52,960 --> 00:10:58,080
a Porter cut and on the left is a

00:10:55,780 --> 00:11:01,380
feature monocoque meter

00:10:58,080 --> 00:11:05,040
is default and alright it's like when

00:11:01,380 --> 00:11:07,260
you hover it you see more information so

00:11:05,040 --> 00:11:10,950
eventually we build a page with the

00:11:07,260 --> 00:11:18,210
header with a Google search with with

00:11:10,950 --> 00:11:20,850
everything so one of the reason that we

00:11:18,210 --> 00:11:23,910
applied atomic design is because by

00:11:20,850 --> 00:11:24,480
creating the structure from bottom to

00:11:23,910 --> 00:11:26,730
top

00:11:24,480 --> 00:11:29,370
it's basically the same rebuilding the

00:11:26,730 --> 00:11:32,730
same vocabulary for developer developer

00:11:29,370 --> 00:11:35,760
can also build other component as in the

00:11:32,730 --> 00:11:38,190
same structure so it's so easy for

00:11:35,760 --> 00:11:41,490
design and developer to understand each

00:11:38,190 --> 00:11:43,260
other and it's also easier to I make

00:11:41,490 --> 00:11:47,070
component more consistent throughout

00:11:43,260 --> 00:11:50,190
application so but then so far what I'm

00:11:47,070 --> 00:11:55,320
showing you is just a style guide for

00:11:50,190 --> 00:11:57,600
designer so what's next so how could we

00:11:55,320 --> 00:11:59,700
make it available for everyone because

00:11:57,600 --> 00:12:02,910
what we're looking at is more like a

00:11:59,700 --> 00:12:05,970
designer perspective so we need a single

00:12:02,910 --> 00:12:09,330
source of truth like a pattern library

00:12:05,970 --> 00:12:13,020
or some people call nice tile guide so

00:12:09,330 --> 00:12:15,450
basically is sour guide that unified

00:12:13,020 --> 00:12:17,430
experience for designing developer is

00:12:15,450 --> 00:12:19,830
not just for designer to follow but also

00:12:17,430 --> 00:12:22,560
for developer port management data

00:12:19,830 --> 00:12:24,990
scientist to understand it so for us to

00:12:22,560 --> 00:12:26,940
build on a style guide the most

00:12:24,990 --> 00:12:29,490
important thing is to make sure the

00:12:26,940 --> 00:12:36,480
developer happy with it and they can use

00:12:29,490 --> 00:12:40,110
it so this is the living design system

00:12:36,480 --> 00:12:42,120
that we have currently as you can see on

00:12:40,110 --> 00:12:44,190
the left hand side there's getting

00:12:42,120 --> 00:12:46,890
started so basically it's the page to

00:12:44,190 --> 00:12:50,030
talk about how do you start using this

00:12:46,890 --> 00:12:52,740
our guide as a designer and a developer

00:12:50,030 --> 00:12:55,110
you can see what library we're using

00:12:52,740 --> 00:12:58,550
like how to build it from github

00:12:55,110 --> 00:13:01,020
and then you'll see there's a star on

00:12:58,550 --> 00:13:04,740
slightly below to getting started so

00:13:01,020 --> 00:13:07,710
basically style is like the basic rules

00:13:04,740 --> 00:13:11,030
for everything like the color that we

00:13:07,710 --> 00:13:14,580
are using the grid system the typography

00:13:11,030 --> 00:13:16,680
the test scale that could apply to all

00:13:14,580 --> 00:13:19,620
the component the basically like a

00:13:16,680 --> 00:13:23,130
nature rules and then we have components

00:13:19,620 --> 00:13:26,190
which is we don't we don't define it

00:13:23,130 --> 00:13:27,900
into a term component molecule component

00:13:26,190 --> 00:13:30,600
organism come from we just make a

00:13:27,900 --> 00:13:33,510
component very simple reusable component

00:13:30,600 --> 00:13:35,910
like input balls like button like track

00:13:33,510 --> 00:13:37,950
bars radio button we do have something

00:13:35,910 --> 00:13:40,680
called rigid which is slightly more

00:13:37,950 --> 00:13:44,580
complicated like a pod cut with a few of

00:13:40,680 --> 00:13:45,930
em element combined together and on the

00:13:44,580 --> 00:13:49,320
right-hand side you see the

00:13:45,930 --> 00:13:53,070
specifications of that element you also

00:13:49,320 --> 00:13:56,130
see the code example and how it really

00:13:53,070 --> 00:14:01,740
looks like as in a button and you can

00:13:56,130 --> 00:14:06,270
hover it and play with it and one thing

00:14:01,740 --> 00:14:09,330
that we are quite one thing that we are

00:14:06,270 --> 00:14:11,220
quite interesting is that we use a free

00:14:09,330 --> 00:14:12,960
background we basically create order

00:14:11,220 --> 00:14:15,000
component based on free background color

00:14:12,960 --> 00:14:17,250
which is white background white

00:14:15,000 --> 00:14:21,270
background and dark background basically

00:14:17,250 --> 00:14:23,370
for trying to cater the future use this

00:14:21,270 --> 00:14:25,730
district color is the main it's the only

00:14:23,370 --> 00:14:28,500
background color that really using and

00:14:25,730 --> 00:14:30,570
as you can see the but the button and

00:14:28,500 --> 00:14:32,880
the component region will be very space

00:14:30,570 --> 00:14:35,400
for different background colors and we

00:14:32,880 --> 00:14:37,470
also have icon library that anyone can

00:14:35,400 --> 00:14:41,400
go and just explode

00:14:37,470 --> 00:14:44,010
SVG MPV PNG we have a motion going to

00:14:41,400 --> 00:14:48,030
talk about the motion behavior across

00:14:44,010 --> 00:14:50,850
all the components this is interesting

00:14:48,030 --> 00:14:53,220
so imagine another guy have more and

00:14:50,850 --> 00:14:55,920
more engineer working on the problem is

00:14:53,220 --> 00:14:58,610
very difficult to maintain the version

00:14:55,920 --> 00:15:01,860
of each component so we will have

00:14:58,610 --> 00:15:04,500
component status to talk about like each

00:15:01,860 --> 00:15:07,920
component are the most updated

00:15:04,500 --> 00:15:13,020
are they being like rate everything for

00:15:07,920 --> 00:15:17,199
review and yes of course we have to make

00:15:13,020 --> 00:15:22,239
a developer fan-friendly so

00:15:17,199 --> 00:15:25,269
so that I can easily use it and I think

00:15:22,239 --> 00:15:28,720
that's so funny I should pass it to

00:15:25,269 --> 00:15:30,999
Fabio to talk about how do we apply it

00:15:28,720 --> 00:15:34,749
in ya component I'm fabulous

00:15:30,999 --> 00:15:38,889
JavaScript developer so how do we use

00:15:34,749 --> 00:15:41,259
the content at JSON and China team gave

00:15:38,889 --> 00:15:47,290
us to create some new components that we

00:15:41,259 --> 00:15:50,470
didn't use and reuse into our app when

00:15:47,290 --> 00:15:52,629
the design team gives us some new

00:15:50,470 --> 00:15:55,269
content it comes into the format of a

00:15:52,629 --> 00:15:59,290
figma file we can access this through

00:15:55,269 --> 00:16:03,699
the browser and we get to see this

00:15:59,290 --> 00:16:06,009
example we get an example where you you

00:16:03,699 --> 00:16:07,839
can see every single state in which a

00:16:06,009 --> 00:16:10,660
component is gonna find itself in - and

00:16:07,839 --> 00:16:13,600
all the inputs that this component will

00:16:10,660 --> 00:16:15,609
have will accept so in this case I use

00:16:13,600 --> 00:16:17,470
the example of a check box because it's

00:16:15,609 --> 00:16:19,689
quite a functional element it takes a

00:16:17,470 --> 00:16:23,379
function as some input has a lot of

00:16:19,689 --> 00:16:25,449
states actually so I want to develop

00:16:23,379 --> 00:16:30,399
this what do i do first the first thing

00:16:25,449 --> 00:16:32,559
I will always do is decide on an API so

00:16:30,399 --> 00:16:35,529
let's make a very simple API we call

00:16:32,559 --> 00:16:38,290
this design driven API we decided that

00:16:35,529 --> 00:16:40,899
the best way to make generic components

00:16:38,290 --> 00:16:43,779
that are as similar as the designers

00:16:40,899 --> 00:16:46,509
want is to make sure our API only does

00:16:43,779 --> 00:16:51,100
what designers want the component to do

00:16:46,509 --> 00:16:54,579
this means we get a 1:1 situation

00:16:51,100 --> 00:16:56,439
between our code and the design as you

00:16:54,579 --> 00:16:58,239
can see here you got a theme which is

00:16:56,439 --> 00:17:00,309
what Jason was talking about the idea

00:16:58,239 --> 00:17:03,160
that we we have components that are

00:17:00,309 --> 00:17:05,620
available on different backgrounds you

00:17:03,160 --> 00:17:07,949
get a check see we got a check prod you

00:17:05,620 --> 00:17:12,189
get indeterminate which is that -

00:17:07,949 --> 00:17:14,319
version of the check box you will know

00:17:12,189 --> 00:17:17,079
all the others disabled over focuses for

00:17:14,319 --> 00:17:18,519
accessibility and the function unchanged

00:17:17,079 --> 00:17:20,949
when you click the button with the check

00:17:18,519 --> 00:17:22,779
box and a label which is the only input

00:17:20,949 --> 00:17:29,049
in this case that is displayed to the

00:17:22,779 --> 00:17:30,740
user so let's make this example I have

00:17:29,049 --> 00:17:33,110
to create a check box there

00:17:30,740 --> 00:17:36,110
has to be displayed with a check with a

00:17:33,110 --> 00:17:38,390
tick and label which is that being

00:17:36,110 --> 00:17:41,960
checked we will straightaway find that

00:17:38,390 --> 00:17:46,790
we have in our props all the item which

00:17:41,960 --> 00:17:48,380
we need to fill in so as I said it's

00:17:46,790 --> 00:17:50,360
very very important that we keep this

00:17:48,380 --> 00:17:54,700
API as simple as possible syndrome Erika

00:17:50,360 --> 00:17:57,800
is possible you can see that this API is

00:17:54,700 --> 00:18:01,490
doesn't it gives out that this component

00:17:57,800 --> 00:18:04,400
is stateless in fact we have hovered and

00:18:01,490 --> 00:18:05,570
focused external drop rope it's the

00:18:04,400 --> 00:18:07,490
parent that decides whether a check

00:18:05,570 --> 00:18:11,420
boxes is clicked which is checked

00:18:07,490 --> 00:18:13,690
whether it's focused and for us it's

00:18:11,420 --> 00:18:17,179
very important that these props are

00:18:13,690 --> 00:18:21,140
extremely are extremely strict we want

00:18:17,179 --> 00:18:24,890
the props to be as few as possible try

00:18:21,140 --> 00:18:27,710
to use primitive variables and if you

00:18:24,890 --> 00:18:31,640
really really have to pass an object to

00:18:27,710 --> 00:18:34,190
use the shape check so we only want to

00:18:31,640 --> 00:18:35,929
allow keys that are allowed into this

00:18:34,190 --> 00:18:38,179
component this is because we don't want

00:18:35,929 --> 00:18:40,429
the component to change in unexpected

00:18:38,179 --> 00:18:43,730
unexpected ways especially when you use

00:18:40,429 --> 00:18:45,710
style I know many will pass a style down

00:18:43,730 --> 00:18:47,570
to a component and this is actually

00:18:45,710 --> 00:18:50,230
quite common and we don't really like to

00:18:47,570 --> 00:18:53,240
do that because that means that a parent

00:18:50,230 --> 00:18:55,610
that uses this component may decide to

00:18:53,240 --> 00:18:59,720
do absolutely anything with a design of

00:18:55,610 --> 00:19:01,340
this checkbox in fact while I make this

00:18:59,720 --> 00:19:03,559
example this is also an example to say

00:19:01,340 --> 00:19:04,940
don't you start with the atomic design

00:19:03,559 --> 00:19:06,800
the parent doesn't know what is using

00:19:04,940 --> 00:19:11,809
and the design of this component

00:19:06,800 --> 00:19:17,600
shouldn't be attacked by anybody so you

00:19:11,809 --> 00:19:19,100
have to use these this design as the

00:19:17,600 --> 00:19:21,170
only source of truth and make your

00:19:19,100 --> 00:19:22,790
opponent you shouldn't look where these

00:19:21,170 --> 00:19:25,160
components use this is not your business

00:19:22,790 --> 00:19:29,570
your business is making this component

00:19:25,160 --> 00:19:32,660
and make so there is no unexpected

00:19:29,570 --> 00:19:35,990
situation that may come from using the

00:19:32,660 --> 00:19:38,300
API and to make a very sure that this

00:19:35,990 --> 00:19:44,570
happens is you always want to write some

00:19:38,300 --> 00:19:47,390
tests we use just how we use the enzyme

00:19:44,570 --> 00:19:48,770
it's very easy to write meaningful tests

00:19:47,390 --> 00:19:50,870
with the atomic design components

00:19:48,770 --> 00:19:52,520
because since you already know what's

00:19:50,870 --> 00:19:54,230
the parent you will write some

00:19:52,520 --> 00:19:57,740
components which don't have any

00:19:54,230 --> 00:19:59,570
dependency across and the upper side and

00:19:57,740 --> 00:20:02,840
that's very important because that means

00:19:59,570 --> 00:20:05,300
that API the component are the

00:20:02,840 --> 00:20:07,640
components I'm gonna respond in a single

00:20:05,300 --> 00:20:13,460
way to the props you're gonna pass into

00:20:07,640 --> 00:20:18,350
them as you can see here we have this

00:20:13,460 --> 00:20:20,660
line where we talk about snapshots in

00:20:18,350 --> 00:20:24,950
fact we do we do snapshots on our

00:20:20,660 --> 00:20:26,990
components we use no shallow snapshots

00:20:24,950 --> 00:20:28,640
on our components a snapshot is kind of

00:20:26,990 --> 00:20:32,600
a carbon copy and output that you can

00:20:28,640 --> 00:20:34,670
get from the component and we store

00:20:32,600 --> 00:20:36,860
these in our repository because that's

00:20:34,670 --> 00:20:39,890
what we expect the component to print

00:20:36,860 --> 00:20:42,080
into our webpage whenever you run tests

00:20:39,890 --> 00:20:43,550
we check against this to make sure that

00:20:42,080 --> 00:20:46,040
component didn't change and expectedly

00:20:43,550 --> 00:20:48,470
and this is just one extra way to check

00:20:46,040 --> 00:20:51,710
whether our component behaves as we want

00:20:48,470 --> 00:20:54,530
in a single way so whenever you run the

00:20:51,710 --> 00:20:56,900
test if you change the component the

00:20:54,530 --> 00:20:59,060
test is going to decide given an error

00:20:56,900 --> 00:21:01,040
it's going to display which line changed

00:20:59,060 --> 00:21:03,470
and that's extremely important for us to

00:21:01,040 --> 00:21:08,500
understand an example how the CSS has

00:21:03,470 --> 00:21:10,700
changed across versions it's very good

00:21:08,500 --> 00:21:12,650
to have atomic design in this case

00:21:10,700 --> 00:21:15,140
because you can do very reliable shallow

00:21:12,650 --> 00:21:18,890
testing which many disagree with but

00:21:15,140 --> 00:21:21,740
this is because usually it's much better

00:21:18,890 --> 00:21:23,540
to have deep snapshots that snapshot the

00:21:21,740 --> 00:21:26,000
entire tree of HTML but is extremely

00:21:23,540 --> 00:21:27,320
expensive in time and it's very slow for

00:21:26,000 --> 00:21:30,320
developers when they are developing

00:21:27,320 --> 00:21:32,630
something new so atomic design loves to

00:21:30,320 --> 00:21:34,190
snapshot a single component a very thin

00:21:32,630 --> 00:21:42,110
layer and you are sure you're only

00:21:34,190 --> 00:21:44,330
working on that a very good after effect

00:21:42,110 --> 00:21:46,310
of using atomic design was there since

00:21:44,330 --> 00:21:48,530
the designers are maintaining the

00:21:46,310 --> 00:21:51,170
components with the same name and same

00:21:48,530 --> 00:21:53,090
scope as developers you will find

00:21:51,170 --> 00:21:55,460
yourself that designers won't really

00:21:53,090 --> 00:21:56,960
drop their components they won't change

00:21:55,460 --> 00:21:57,420
the scope of their components which

00:21:56,960 --> 00:21:59,550
means

00:21:57,420 --> 00:22:01,290
there's gonna be less testable holes you

00:21:59,550 --> 00:22:03,030
will not throw your tests away you will

00:22:01,290 --> 00:22:05,130
keep them for pretty much as long as

00:22:03,030 --> 00:22:10,950
it's gonna have your component until it

00:22:05,130 --> 00:22:14,540
gets deprecated so we got some new

00:22:10,950 --> 00:22:17,480
components now let's use them in action

00:22:14,540 --> 00:22:21,420
we organize our components in this way

00:22:17,480 --> 00:22:23,160
we create a component library we put

00:22:21,420 --> 00:22:25,230
into the component library components

00:22:23,160 --> 00:22:27,330
which are extremely generic your usable

00:22:25,230 --> 00:22:29,430
and we put them into three directories

00:22:27,330 --> 00:22:31,380
mainly one is items from these molecules

00:22:29,430 --> 00:22:33,180
and when an organism we talk about it

00:22:31,380 --> 00:22:35,850
yeah these are components which have

00:22:33,180 --> 00:22:37,470
very simple ApS again they don't take

00:22:35,850 --> 00:22:40,860
any complex data structure they don't

00:22:37,470 --> 00:22:42,300
get any Redux in them they don't you can

00:22:40,860 --> 00:22:46,830
do use them with any framework

00:22:42,300 --> 00:22:48,510
whatsoever you wanted and you could all

00:22:46,830 --> 00:22:54,210
see them without any framework basically

00:22:48,510 --> 00:22:56,070
and then we speak these components

00:22:54,210 --> 00:22:58,200
between company library and application

00:22:56,070 --> 00:23:00,870
in the application you put the more

00:22:58,200 --> 00:23:03,600
specific stuff there you will put the

00:23:00,870 --> 00:23:04,800
organisms that take much more data it's

00:23:03,600 --> 00:23:07,500
very likely that you would have some

00:23:04,800 --> 00:23:10,170
organisms that just take the world state

00:23:07,500 --> 00:23:13,770
from redux or whatever whatever library

00:23:10,170 --> 00:23:16,560
use for storage and use you will have

00:23:13,770 --> 00:23:18,210
some pages and we use these pages that

00:23:16,560 --> 00:23:21,180
we talked about earlier kind of like

00:23:18,210 --> 00:23:23,640
modules we put into the pages let's

00:23:21,180 --> 00:23:25,680
let's say we make a dashboard page which

00:23:23,640 --> 00:23:27,870
is like the first paper where the app

00:23:25,680 --> 00:23:29,760
enter when you open the app you reach

00:23:27,870 --> 00:23:31,230
the dashboard and this is kind of like a

00:23:29,760 --> 00:23:35,910
module inside and inside you wanna fall

00:23:31,230 --> 00:23:37,440
so find your Redux reducers and then you

00:23:35,910 --> 00:23:44,430
will have charts and there's gonna be

00:23:37,440 --> 00:23:46,290
much more pages in this area one more

00:23:44,430 --> 00:23:49,620
thing that happens after you design a

00:23:46,290 --> 00:23:51,690
company component library is how the

00:23:49,620 --> 00:23:54,600
designers are going to be willing to

00:23:51,690 --> 00:23:57,570
create even more components it is very

00:23:54,600 --> 00:23:59,730
likely that you and the designers are

00:23:57,570 --> 00:24:01,230
gonna start bickering about the

00:23:59,730 --> 00:24:03,510
components because the developers don't

00:24:01,230 --> 00:24:05,820
want to write more components we are

00:24:03,510 --> 00:24:08,160
lazy and the designers have a coin cut

00:24:05,820 --> 00:24:09,870
an easier time creating more components

00:24:08,160 --> 00:24:11,400
so you'll have end up in these

00:24:09,870 --> 00:24:14,280
of passive-aggressive situation where

00:24:11,400 --> 00:24:17,580
you want the designers to do more work

00:24:14,280 --> 00:24:19,680
and you want to do less work and what

00:24:17,580 --> 00:24:21,780
what happens is that we are very

00:24:19,680 --> 00:24:26,910
friendly in edited so nothing like that

00:24:21,780 --> 00:24:29,220
really happens and so what happens is

00:24:26,910 --> 00:24:30,840
that very often we go to the design team

00:24:29,220 --> 00:24:32,760
and we tell them look these two

00:24:30,840 --> 00:24:34,650
components do it the exact same thing

00:24:32,760 --> 00:24:36,540
why do you make a new one and they

00:24:34,650 --> 00:24:39,540
realize they actually made a new one for

00:24:36,540 --> 00:24:41,400
no reason so we go back and use the same

00:24:39,540 --> 00:24:42,960
component where you had in our component

00:24:41,400 --> 00:24:44,940
library and very often it's just like a

00:24:42,960 --> 00:24:47,130
trade off you just prefer using a signal

00:24:44,940 --> 00:24:49,230
an old component that we already have is

00:24:47,130 --> 00:24:50,970
not like 100% perfect for our interface

00:24:49,230 --> 00:24:53,130
but it's much cheaper to just implement

00:24:50,970 --> 00:24:55,470
without recreating a new one which is

00:24:53,130 --> 00:24:58,250
like perfection perfection is not a

00:24:55,470 --> 00:24:58,250
thing anyway

00:25:00,260 --> 00:25:09,290
another good way to use our atomic

00:25:03,390 --> 00:25:13,320
design component library is with MVPs

00:25:09,290 --> 00:25:14,880
MVPs are a major thing for us we make a

00:25:13,320 --> 00:25:17,760
lot of features and they are very very

00:25:14,880 --> 00:25:19,170
complex and you want to make sure we

00:25:17,760 --> 00:25:21,720
don't create features that are not

00:25:19,170 --> 00:25:23,250
useful for our customers it's very

00:25:21,720 --> 00:25:27,630
expensive to make a feature it can take

00:25:23,250 --> 00:25:28,830
months so what we do is making sure the

00:25:27,630 --> 00:25:31,080
designers don't do more work than they

00:25:28,830 --> 00:25:33,360
need to do and what happens is as you

00:25:31,080 --> 00:25:36,210
can see on the left side we have a

00:25:33,360 --> 00:25:40,080
design probably for you guys it isn't me

00:25:36,210 --> 00:25:42,330
much the design but for us we have the

00:25:40,080 --> 00:25:45,540
component the library we can recognize

00:25:42,330 --> 00:25:46,110
each part of that design and make it

00:25:45,540 --> 00:25:48,059
real

00:25:46,110 --> 00:25:51,330
without a full high-quality design from

00:25:48,059 --> 00:25:53,730
the designers so as you can see the this

00:25:51,330 --> 00:25:56,490
part on the right has been made from the

00:25:53,730 --> 00:25:59,190
part of the left there was never fully

00:25:56,490 --> 00:26:01,890
done of this is all made by front-end

00:25:59,190 --> 00:26:03,929
developers on a component library we

00:26:01,890 --> 00:26:06,030
said so much time on that we managed to

00:26:03,929 --> 00:26:09,780
bring on photo of the customer success

00:26:06,030 --> 00:26:12,150
team a full product in a matter of days

00:26:09,780 --> 00:26:14,340
and they were able to just use it and

00:26:12,150 --> 00:26:16,170
say well this is great let's go with it

00:26:14,340 --> 00:26:20,130
and now we're making a full design for

00:26:16,170 --> 00:26:22,580
this so how is the atomic design working

00:26:20,130 --> 00:26:22,580
for us

00:26:25,009 --> 00:26:34,769
okay Muslim so we now are able to do

00:26:32,639 --> 00:26:41,730
quicker incorrect iterations we are able

00:26:34,769 --> 00:26:44,460
to the designers just ask for changes

00:26:41,730 --> 00:26:46,049
they just go in or github but they make

00:26:44,460 --> 00:26:50,519
a new issue they make some screenshots

00:26:46,049 --> 00:26:52,499
and that way we are able to make up

00:26:50,519 --> 00:26:54,840
updates the designs without an issue

00:26:52,499 --> 00:26:57,539
it's everything is a very independent

00:26:54,840 --> 00:27:00,149
it's its own things so we can release it

00:26:57,539 --> 00:27:03,409
separately and this changes across I've

00:27:00,149 --> 00:27:07,739
been way across all the interfaces and

00:27:03,409 --> 00:27:09,659
all the tests and snapshots are unique

00:27:07,739 --> 00:27:10,950
for the test and only these changes and

00:27:09,659 --> 00:27:13,080
whenever you make a release so you don't

00:27:10,950 --> 00:27:15,690
really need me to go and change tests

00:27:13,080 --> 00:27:18,239
across all the codebase and finally we

00:27:15,690 --> 00:27:21,359
have this ability to just create the

00:27:18,239 --> 00:27:23,489
component we created or change it and

00:27:21,359 --> 00:27:25,139
instead of testing the world page an

00:27:23,489 --> 00:27:27,769
example which will happen before because

00:27:25,139 --> 00:27:30,119
we wouldn't trust our components

00:27:27,769 --> 00:27:31,919
this made the unborn image easier that's

00:27:30,119 --> 00:27:35,570
a boat that's me on the boat and it's

00:27:31,919 --> 00:27:35,570
editing on the boat so it's a boarding

00:27:37,429 --> 00:27:44,489
onboarding has been made extremely easy

00:27:39,960 --> 00:27:45,929
because these components are they not

00:27:44,489 --> 00:27:48,179
really have a context you need context

00:27:45,929 --> 00:27:49,470
to use these components you just take

00:27:48,179 --> 00:27:51,330
them from the component laboratory

00:27:49,470 --> 00:27:52,739
independent they don't have any side

00:27:51,330 --> 00:27:54,869
effects you just drop them into an

00:27:52,739 --> 00:27:56,999
interface and it work as long as nothing

00:27:54,869 --> 00:27:59,820
really tries to change their style just

00:27:56,999 --> 00:28:02,070
works and we had this is a new developer

00:27:59,820 --> 00:28:04,169
called yan he joined the day of a hack

00:28:02,070 --> 00:28:06,509
day and by the end of the hack day he

00:28:04,169 --> 00:28:08,220
was able to make a full interface so

00:28:06,509 --> 00:28:12,929
this in less than eight hours he was

00:28:08,220 --> 00:28:14,309
able to master our component library and

00:28:12,929 --> 00:28:17,220
we have a consistent experience and

00:28:14,309 --> 00:28:19,859
everywhere this image is from a back-end

00:28:17,220 --> 00:28:21,480
developer a back-end developers and

00:28:19,859 --> 00:28:23,700
edited some have some experience with

00:28:21,480 --> 00:28:26,730
react very minimal but they were able to

00:28:23,700 --> 00:28:29,399
create a very complex interface made for

00:28:26,730 --> 00:28:32,639
monitoring go or back-end with our

00:28:29,399 --> 00:28:35,190
components library and it's slick it's

00:28:32,639 --> 00:28:36,900
very good to use and it's very fast

00:28:35,190 --> 00:28:39,920
and there was no designer involved it

00:28:36,900 --> 00:28:44,880
just made it which was a huge time-saver

00:28:39,920 --> 00:28:46,650
so lessons we learned finally we learned

00:28:44,880 --> 00:28:48,450
that you should before you start doing

00:28:46,650 --> 00:28:51,270
this kind of migration and like refactor

00:28:48,450 --> 00:28:53,160
all your code base do upgrade your

00:28:51,270 --> 00:28:58,860
libraries because it's much harder to do

00:28:53,160 --> 00:29:01,170
it later yeah and got that first start

00:28:58,860 --> 00:29:02,820
from my page create on components for

00:29:01,170 --> 00:29:06,600
that page then move on to the next one

00:29:02,820 --> 00:29:08,760
don't try to make ten pages at the same

00:29:06,600 --> 00:29:11,340
time and all the atoms for it you're

00:29:08,760 --> 00:29:13,560
gonna lose yourself just may just start

00:29:11,340 --> 00:29:15,150
simple and make some atoms in the second

00:29:13,560 --> 00:29:17,070
page you make you will have already some

00:29:15,150 --> 00:29:18,780
atoms done and some experiences using

00:29:17,070 --> 00:29:19,920
atomic design it's gonna be so much

00:29:18,780 --> 00:29:22,440
easier

00:29:19,920 --> 00:29:24,360
don't again for the tenth time maybe

00:29:22,440 --> 00:29:27,390
don't handle too complex data in the

00:29:24,360 --> 00:29:29,130
library components and develop

00:29:27,390 --> 00:29:30,810
components even if the level of

00:29:29,130 --> 00:29:32,970
confidence is low it's an iterative

00:29:30,810 --> 00:29:35,550
process you should already worry too

00:29:32,970 --> 00:29:37,610
much about how perfect is the component

00:29:35,550 --> 00:29:40,080
as soon as you create it just create it

00:29:37,610 --> 00:29:42,750
even if the design changes after the

00:29:40,080 --> 00:29:45,540
first iteration it just CSS most likely

00:29:42,750 --> 00:29:47,340
if you did some accessibility work if

00:29:45,540 --> 00:29:49,650
you did some logic work it's gonna stick

00:29:47,340 --> 00:29:53,270
this isn't usually not the case that it

00:29:49,650 --> 00:29:58,170
would change massively on the logic side

00:29:53,270 --> 00:30:01,740
so here we are this is almost over we

00:29:58,170 --> 00:30:04,130
will put our slides on a website most

00:30:01,740 --> 00:30:08,190
likely eddie latekka and on the page of

00:30:04,130 --> 00:30:09,960
the meetup I detect added dot tag

00:30:08,190 --> 00:30:12,740
contains some information about our

00:30:09,960 --> 00:30:15,420
company what we do with our data and

00:30:12,740 --> 00:30:17,670
thank you very much I'll just remind you

00:30:15,420 --> 00:30:19,590
that we are hiring across a lower stack

00:30:17,670 --> 00:30:22,770
and you can find some leaflets over

00:30:19,590 --> 00:30:28,109
there and that's it

00:30:22,770 --> 00:30:28,109

YouTube URL: https://www.youtube.com/watch?v=FUNsWjGrhZo


