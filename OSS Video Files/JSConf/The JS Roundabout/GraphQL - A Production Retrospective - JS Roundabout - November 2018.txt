Title: GraphQL - A Production Retrospective - JS Roundabout - November 2018
Publication date: 2018-11-13
Playlist: The JS Roundabout
Description: 
	Presented by John Maxwell.

Three years ago John gave a talk about how Music Glue were embracing GraphQL across their entire estate. After 3 years and countless requests later, what have they learned, what are they still doing and where are they going from here?
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:06,540
so graph QL we've had a couple of great

00:00:03,149 --> 00:00:08,730
talks about stuff which I personally am

00:00:06,540 --> 00:00:11,519
either very interested in like graph QL

00:00:08,730 --> 00:00:15,210
or absolutely hopeless at like building

00:00:11,519 --> 00:00:17,190
forms on the client-side and this is a

00:00:15,210 --> 00:00:22,789
little chat about what we do at

00:00:17,190 --> 00:00:22,789
musically in the graph QL kind of space

00:00:25,189 --> 00:00:32,250
turn-on helps so I'm a I'm John Maxwell

00:00:29,580 --> 00:00:34,860
I'm the CTO you can tell by my extreme

00:00:32,250 --> 00:00:37,950
technology skills you can find me on

00:00:34,860 --> 00:00:41,100
most of the Internet at jgw Maxwell I've

00:00:37,950 --> 00:00:43,710
been at music Leonel for six years of

00:00:41,100 --> 00:00:46,680
the eleven and a half we've been

00:00:43,710 --> 00:00:48,539
claiming we're a start-up in London at

00:00:46,680 --> 00:00:50,910
some point apparently we have to stop

00:00:48,539 --> 00:00:54,030
saying that but I'm under absolutely no

00:00:50,910 --> 00:00:56,489
rush to do so in terms of who we are if

00:00:54,030 --> 00:00:59,250
you haven't heard of us we're a global

00:00:56,489 --> 00:01:01,890
e-commerce platform serving the music

00:00:59,250 --> 00:01:04,799
industry specifically we've got a number

00:01:01,890 --> 00:01:06,979
of bespoke solutions some of which are

00:01:04,799 --> 00:01:10,409
quite interesting some of which are

00:01:06,979 --> 00:01:12,360
absolute maintenance nightmares but the

00:01:10,409 --> 00:01:14,760
key thing that we do is we are

00:01:12,360 --> 00:01:17,700
essentially building marketplaces for

00:01:14,760 --> 00:01:21,770
bands so if you think cameras in but

00:01:17,700 --> 00:01:24,360
swap a band name in instead of Amazon

00:01:21,770 --> 00:01:25,409
that's kind of what we what we offer and

00:01:24,360 --> 00:01:28,110
there's a really good reason for that

00:01:25,409 --> 00:01:31,439
which is that within our sector almost

00:01:28,110 --> 00:01:33,780
the entirety of the marketing reach of

00:01:31,439 --> 00:01:35,610
the influence comes from the band

00:01:33,780 --> 00:01:37,049
themselves but at the moment they're

00:01:35,610 --> 00:01:39,509
totally bypassed in terms of everything

00:01:37,049 --> 00:01:42,000
that they do in favour of record labels

00:01:39,509 --> 00:01:44,159
in favor of the concert promoters and in

00:01:42,000 --> 00:01:45,899
2018 people are realizing that without

00:01:44,159 --> 00:01:48,210
the band's marketing reach they can't do

00:01:45,899 --> 00:01:50,790
anything so you're getting Ticketmaster

00:01:48,210 --> 00:01:52,619
trying to press gang bands into tweeting

00:01:50,790 --> 00:01:55,110
the shows that has actually no benefit

00:01:52,619 --> 00:01:56,490
for the band whatsoever so essentially

00:01:55,110 --> 00:01:57,899
our proposition is that we just unite

00:01:56,490 --> 00:01:59,820
all of those flows together through the

00:01:57,899 --> 00:02:01,229
band's own store and allow the rights

00:01:59,820 --> 00:02:03,899
holders wherever they are around the

00:02:01,229 --> 00:02:05,460
world to get paid correctly and to get

00:02:03,899 --> 00:02:08,729
the fans served the right products for

00:02:05,460 --> 00:02:11,310
the part of the world that they're in we

00:02:08,729 --> 00:02:13,200
operate in a hype industry as I don't

00:02:11,310 --> 00:02:14,250
know if anyone else does we have some

00:02:13,200 --> 00:02:16,290
interesting traffic

00:02:14,250 --> 00:02:18,030
characteristics and this talk

00:02:16,290 --> 00:02:20,880
essentially is the story of how we've

00:02:18,030 --> 00:02:22,860
tried to leverage graph QL to solve some

00:02:20,880 --> 00:02:24,870
of our internal problems and also some

00:02:22,860 --> 00:02:26,910
of our scalability issues now it hasn't

00:02:24,870 --> 00:02:28,770
all been plain sailing I am happy to

00:02:26,910 --> 00:02:29,940
admit that but hopefully there'll be a

00:02:28,770 --> 00:02:32,780
couple of lessons which you can take

00:02:29,940 --> 00:02:32,780
away from this today

00:02:33,050 --> 00:02:38,910
we work with again little people we work

00:02:36,720 --> 00:02:42,240
some big with some big bands and what

00:02:38,910 --> 00:02:45,650
happens with the biggest names is that

00:02:42,240 --> 00:02:48,780
they have very very specific challenges

00:02:45,650 --> 00:02:51,360
will come to those in a second our story

00:02:48,780 --> 00:02:54,930
of graph QL starts which is that's gonna

00:02:51,360 --> 00:02:57,780
be hard to read in September 2015 when I

00:02:54,930 --> 00:02:59,940
pushed the initial commit to one of our

00:02:57,780 --> 00:03:01,800
five main projects we have five

00:02:59,940 --> 00:03:04,500
different graphs servicing different

00:03:01,800 --> 00:03:06,410
things from admin interfaces all the way

00:03:04,500 --> 00:03:10,380
through to our actual main production

00:03:06,410 --> 00:03:15,000
customer facing stack shortly thereafter

00:03:10,380 --> 00:03:17,489
I pushed another commit if do you know

00:03:15,000 --> 00:03:18,840
me this will be no surprise the only

00:03:17,489 --> 00:03:20,850
surprise will be that there wasn't a

00:03:18,840 --> 00:03:23,310
series of exploitive after it in the

00:03:20,850 --> 00:03:25,769
third commit message as I tried to

00:03:23,310 --> 00:03:28,290
pretend that I know what I'm doing these

00:03:25,769 --> 00:03:28,739
days we have maybe got a bit of a better

00:03:28,290 --> 00:03:31,110
grip

00:03:28,739 --> 00:03:33,230
we carry the average about 200 requests

00:03:31,110 --> 00:03:37,739
a second through our primary graph

00:03:33,230 --> 00:03:41,400
however that has a slightly funny kind

00:03:37,739 --> 00:03:43,500
of profile because we love graphs graph

00:03:41,400 --> 00:03:46,400
queue our little joke they're lovely

00:03:43,500 --> 00:03:50,250
this is roughly what traffic looks like

00:03:46,400 --> 00:03:52,290
for a single one of our clients I mean

00:03:50,250 --> 00:03:53,910
this isn't anyone in particular but this

00:03:52,290 --> 00:03:55,890
is the kind of traffic flow that we deal

00:03:53,910 --> 00:03:58,350
with so it goes from essentially totally

00:03:55,890 --> 00:04:02,190
idle to not very idle and then back down

00:03:58,350 --> 00:04:04,200
again very very quickly we work within

00:04:02,190 --> 00:04:07,140
the region of fifty to sixty thousand

00:04:04,200 --> 00:04:08,610
different acts and as you can guess that

00:04:07,140 --> 00:04:11,390
becomes quite interesting in terms of

00:04:08,610 --> 00:04:15,360
the challenges that we deal with in

00:04:11,390 --> 00:04:16,859
managing this kind of behavior across so

00:04:15,360 --> 00:04:18,470
many different people all you need is

00:04:16,859 --> 00:04:20,489
five or six of the biggest clients to

00:04:18,470 --> 00:04:22,289
independently decide that Friday looks

00:04:20,489 --> 00:04:25,680
great and then suddenly you've cut a

00:04:22,289 --> 00:04:27,810
nightmare situation on your hands it's

00:04:25,680 --> 00:04:29,190
also interesting that we

00:04:27,810 --> 00:04:32,910
and we'll talk about this a little bit

00:04:29,190 --> 00:04:35,610
in a second have us put a microservice e

00:04:32,910 --> 00:04:36,930
based architecture and each request is

00:04:35,610 --> 00:04:39,419
likely to pass through graf girl on a

00:04:36,930 --> 00:04:41,090
number of times at least once on the

00:04:39,419 --> 00:04:43,320
server side and then on the client side

00:04:41,090 --> 00:04:46,020
anywhere up to five times depending on

00:04:43,320 --> 00:04:47,520
what page is being rendered we'll talk

00:04:46,020 --> 00:04:50,340
about some of the decisions why we ended

00:04:47,520 --> 00:04:52,650
up with that point this means that our

00:04:50,340 --> 00:04:56,790
traffic profile has roughly eight ten

00:04:52,650 --> 00:05:00,270
thousand factor or range of fluctuation

00:04:56,790 --> 00:05:01,200
between like right now and what might be

00:05:00,270 --> 00:05:03,330
happening at nine o'clock tomorrow

00:05:01,200 --> 00:05:05,750
morning and I have absolutely no idea

00:05:03,330 --> 00:05:08,810
what will happen in that period of time

00:05:05,750 --> 00:05:11,310
we'll talk about how we fix that as well

00:05:08,810 --> 00:05:12,810
one of the things that we've worked out

00:05:11,310 --> 00:05:17,250
quite quickly is that graph girl is not

00:05:12,810 --> 00:05:19,530
exactly a a transit efficient way of

00:05:17,250 --> 00:05:23,310
doing business a lot of data tends to

00:05:19,530 --> 00:05:27,030
flow around the world and in our case it

00:05:23,310 --> 00:05:28,680
tends to be quite chunky our smallest

00:05:27,030 --> 00:05:30,750
responses are at least fifteen kilobytes

00:05:28,680 --> 00:05:33,810
our largest responses are significantly

00:05:30,750 --> 00:05:38,400
larger than 128 but depending on what is

00:05:33,810 --> 00:05:40,050
being rendered we have to provide a

00:05:38,400 --> 00:05:42,660
superset of all the data that might be

00:05:40,050 --> 00:05:44,550
required people are free to build their

00:05:42,660 --> 00:05:45,870
sites however they wish and we

00:05:44,550 --> 00:05:47,550
essentially have to guesstimate what

00:05:45,870 --> 00:05:51,000
data could be on the page there are two

00:05:47,550 --> 00:05:52,650
avenues about why that's done or why

00:05:51,000 --> 00:05:55,650
that's necessary we'll talk about those

00:05:52,650 --> 00:05:58,229
a little bit later on but there are

00:05:55,650 --> 00:06:00,270
interesting challenges and just pushing

00:05:58,229 --> 00:06:01,550
that much data down a wire for a single

00:06:00,270 --> 00:06:03,750
request

00:06:01,550 --> 00:06:05,430
obviously it's ecommerce and latency is

00:06:03,750 --> 00:06:07,860
a huge issue as well

00:06:05,430 --> 00:06:10,690
we set an internal target of shutting

00:06:07,860 --> 00:06:12,520
down the television in 50 milliseconds

00:06:10,690 --> 00:06:13,930
so what that kind of means is that

00:06:12,520 --> 00:06:14,860
during an average kind of peak period

00:06:13,930 --> 00:06:17,590
then we're dealing with about 10

00:06:14,860 --> 00:06:20,110
gigabits of actual graph QL traffic

00:06:17,590 --> 00:06:24,330
through our internal interfaces

00:06:20,110 --> 00:06:27,730
that's is an awful lot of curly braces

00:06:24,330 --> 00:06:29,800
it's an awful lot of out directives and

00:06:27,730 --> 00:06:32,320
also it some of it we'll talk about in a

00:06:29,800 --> 00:06:33,460
bit it's probably unnecessary so how did

00:06:32,320 --> 00:06:35,350
we end up where we are and this is maybe

00:06:33,460 --> 00:06:38,080
some of the interesting stuff I said

00:06:35,350 --> 00:06:39,940
we've been here for 11 of 8 years we've

00:06:38,080 --> 00:06:41,260
been through five major generations of

00:06:39,940 --> 00:06:44,530
our e-commerce stack in that period of

00:06:41,260 --> 00:06:46,810
time fortunately I haven't been involved

00:06:44,530 --> 00:06:49,930
in all of them otherwise the beard would

00:06:46,810 --> 00:06:54,040
be gray but we started out as a dotnet

00:06:49,930 --> 00:06:55,870
shop and that was great we didn't really

00:06:54,040 --> 00:06:57,280
do distributed at that period of time so

00:06:55,870 --> 00:06:59,260
that meant that whenever that server got

00:06:57,280 --> 00:06:59,950
a bit busy we put up a great they come

00:06:59,260 --> 00:07:02,680
back soon

00:06:59,950 --> 00:07:04,690
kind of page and ask people to just

00:07:02,680 --> 00:07:07,600
reconsider how urgently they wanted

00:07:04,690 --> 00:07:08,800
those tickets from there we heard about

00:07:07,600 --> 00:07:10,180
something called WordPress which I'm

00:07:08,800 --> 00:07:15,040
sure some of you have heard of as well

00:07:10,180 --> 00:07:16,930
it's great to have anyone knock it but

00:07:15,040 --> 00:07:18,190
it is it an expedient way of building

00:07:16,930 --> 00:07:19,870
applications and we might just talk a

00:07:18,190 --> 00:07:21,040
bit about why that is may be relevant

00:07:19,870 --> 00:07:23,380
again in 2018

00:07:21,040 --> 00:07:25,840
shortly we moved from there into being a

00:07:23,380 --> 00:07:28,590
pure PHP stack which we pushed and

00:07:25,840 --> 00:07:30,880
pushed and pushed until we detonated

00:07:28,590 --> 00:07:33,070
several times we actually took Heroku

00:07:30,880 --> 00:07:35,440
offline in Europe twice if you were

00:07:33,070 --> 00:07:37,480
involved in that I apologize entirely it

00:07:35,440 --> 00:07:39,160
turns out that they do have the hundred

00:07:37,480 --> 00:07:41,230
limit on the slider for a really good

00:07:39,160 --> 00:07:46,510
reason and if you ask them to lift it

00:07:41,230 --> 00:07:47,919
and bad things happen um look where we

00:07:46,510 --> 00:07:50,680
went after that essentially used to

00:07:47,919 --> 00:07:52,510
graph QL so we've done kind of two one

00:07:50,680 --> 00:07:55,150
major rebuild which is to drag

00:07:52,510 --> 00:07:56,890
everything into a graph QL that happened

00:07:55,150 --> 00:07:58,120
three years ago and then two years ago

00:07:56,890 --> 00:08:00,730
we realized that we made some terrible

00:07:58,120 --> 00:08:04,390
decisions and started again slightly and

00:08:00,730 --> 00:08:06,550
how we envisage that I said before

00:08:04,390 --> 00:08:07,870
people can kind of theme their sites and

00:08:06,550 --> 00:08:09,669
their stores and work out how they want

00:08:07,870 --> 00:08:11,710
to do that themselves so we thought to

00:08:09,669 --> 00:08:14,890
begin with well react is the hotness so

00:08:11,710 --> 00:08:17,380
everything must be react so we built a a

00:08:14,890 --> 00:08:18,760
rendering framework in react we use

00:08:17,380 --> 00:08:21,820
graph girl to power and that worked

00:08:18,760 --> 00:08:23,610
absolutely fine until we tried to load

00:08:21,820 --> 00:08:25,289
it on a mobile phone

00:08:23,610 --> 00:08:26,789
this is what happens when you have

00:08:25,289 --> 00:08:30,500
front-end specialists no one tells you

00:08:26,789 --> 00:08:30,500
that like check Android as well as iOS

00:08:31,279 --> 00:08:36,300
so we rethought at that point in time

00:08:33,479 --> 00:08:37,649
and we retreated slightly so we kept the

00:08:36,300 --> 00:08:39,779
graph QL part of it but then we

00:08:37,649 --> 00:08:42,269
server-side rendering with liquid in

00:08:39,779 --> 00:08:44,219
Ruby we do have quite a large Ruby

00:08:42,269 --> 00:08:47,190
presence in the backend and then we

00:08:44,219 --> 00:08:48,899
built a react framework which

00:08:47,190 --> 00:08:51,120
essentially is like a micro framework so

00:08:48,899 --> 00:08:54,540
a pile of tiny little widgets in react

00:08:51,120 --> 00:08:57,690
that correspond to a shopping cart icon

00:08:54,540 --> 00:08:59,940
or an Add to Cart button or a download

00:08:57,690 --> 00:09:03,120
my calendar link and then they all

00:08:59,940 --> 00:09:05,519
communicate every red X which is still

00:09:03,120 --> 00:09:07,079
the live stack right now if you go to

00:09:05,519 --> 00:09:10,800
iron maiden store that's exactly what

00:09:07,079 --> 00:09:12,630
you're looking at as part of that we

00:09:10,800 --> 00:09:14,459
also thought well why would we want one

00:09:12,630 --> 00:09:18,740
giant PHP application when we can write

00:09:14,459 --> 00:09:21,060
19 giant JavaScript applications instead

00:09:18,740 --> 00:09:23,130
honestly it doesn't actually matter how

00:09:21,060 --> 00:09:26,880
micro your services start they never end

00:09:23,130 --> 00:09:30,300
up there and I think all that really

00:09:26,880 --> 00:09:32,010
micro services is is a way of increasing

00:09:30,300 --> 00:09:36,470
the number of lines of code that can be

00:09:32,010 --> 00:09:38,399
deployed without anyone noticing and

00:09:36,470 --> 00:09:40,199
ultimately though at the start at the

00:09:38,399 --> 00:09:43,050
center of this kind of network of like

00:09:40,199 --> 00:09:44,490
we responsibility circles so kind of

00:09:43,050 --> 00:09:46,290
like events are managed by one thing

00:09:44,490 --> 00:09:48,600
products about managed by another we got

00:09:46,290 --> 00:09:50,640
a tier of three different graph QL

00:09:48,600 --> 00:09:52,350
services one of which is the public one

00:09:50,640 --> 00:09:53,820
we've got an administrative one that

00:09:52,350 --> 00:09:55,050
enables us to do our jobs and then

00:09:53,820 --> 00:09:57,300
there's like a private one that deals

00:09:55,050 --> 00:10:00,510
with that offline warehouse integrations

00:09:57,300 --> 00:10:05,399
and stuff like that um that has been

00:10:00,510 --> 00:10:07,170
actually a joy and whilst I am skeptical

00:10:05,399 --> 00:10:10,470
about some parts of it and will always

00:10:07,170 --> 00:10:12,240
remain skeptical we have a weekly meet

00:10:10,470 --> 00:10:17,190
up called the refactor tractor for a

00:10:12,240 --> 00:10:18,570
reason and even though I'd love to

00:10:17,190 --> 00:10:20,339
change a lot about it the graph gal

00:10:18,570 --> 00:10:21,870
stuff has been a rock in that period of

00:10:20,339 --> 00:10:23,190
time and I think it's been a rock for

00:10:21,870 --> 00:10:24,510
some reasons we'll talk about shortly

00:10:23,190 --> 00:10:26,070
this is the talk where I say we'll talk

00:10:24,510 --> 00:10:27,600
about it soon at the end there's gonna

00:10:26,070 --> 00:10:29,160
be like one slide with a million points

00:10:27,600 --> 00:10:33,300
on you can read it in three seconds and

00:10:29,160 --> 00:10:35,190
then go home and we've also kind of then

00:10:33,300 --> 00:10:36,420
developed the lot as engineers over that

00:10:35,190 --> 00:10:37,080
period of time and I think the moment

00:10:36,420 --> 00:10:38,340
you start doing

00:10:37,080 --> 00:10:39,570
functional programming is the moment you

00:10:38,340 --> 00:10:42,000
start really thinking about what you're

00:10:39,570 --> 00:10:44,670
writing a bit more we've moved to

00:10:42,000 --> 00:10:47,580
typescript wholeheartedly

00:10:44,670 --> 00:10:49,830
we've also embraced a more functional

00:10:47,580 --> 00:10:52,530
way of doing that as well there's a cool

00:10:49,830 --> 00:10:54,780
set of projects PG TS which is ours

00:10:52,530 --> 00:10:57,240
which the database library didn't mean

00:10:54,780 --> 00:10:59,580
to plug that first but anyway there's

00:10:57,240 --> 00:11:02,580
IITs and also FP TS which are kind of

00:10:59,580 --> 00:11:04,290
functional and run time typing libraries

00:11:02,580 --> 00:11:05,670
from a guy called G County and github

00:11:04,290 --> 00:11:10,140
they're awesome

00:11:05,670 --> 00:11:12,240
I would check those out and we really

00:11:10,140 --> 00:11:14,430
went deep with the typing of things so

00:11:12,240 --> 00:11:16,140
we found a project called Hrothgar

00:11:14,430 --> 00:11:18,210
strong which enables us to not write

00:11:16,140 --> 00:11:20,190
graft you out at all in the Apollo kind

00:11:18,210 --> 00:11:22,560
of way of doing it but just everything

00:11:20,190 --> 00:11:24,000
is typescript like all the way through

00:11:22,560 --> 00:11:26,310
your resolvers our typescript your

00:11:24,000 --> 00:11:29,160
context is typescript the args that come

00:11:26,310 --> 00:11:32,190
in our typescript and that has been

00:11:29,160 --> 00:11:34,860
really good it's enabled us to have a

00:11:32,190 --> 00:11:39,870
much better foundation of where we

00:11:34,860 --> 00:11:41,160
reason about project but we're also one

00:11:39,870 --> 00:11:44,190
of five maintainer z' of that project

00:11:41,160 --> 00:11:50,340
and the other forum committed in two

00:11:44,190 --> 00:11:51,570
years including us so like there are

00:11:50,340 --> 00:11:52,860
some interesting challenges ahead on

00:11:51,570 --> 00:11:55,230
that front and I think that's one of the

00:11:52,860 --> 00:11:56,940
interesting and one of the difficult

00:11:55,230 --> 00:11:57,960
things for us as a community as a jest

00:11:56,940 --> 00:12:00,360
community at the moment is the

00:11:57,960 --> 00:12:03,540
fragmentation of all of the things is

00:12:00,360 --> 00:12:05,070
accelerating and I really enjoyed your

00:12:03,540 --> 00:12:08,460
talk about form libraries we've written

00:12:05,070 --> 00:12:10,620
three we don't use any of them yours

00:12:08,460 --> 00:12:12,780
though is the first time that I actually

00:12:10,620 --> 00:12:15,720
believe there is a good reason to write

00:12:12,780 --> 00:12:16,800
one which was the map all of ours were

00:12:15,720 --> 00:12:19,710
written because we thought we could do

00:12:16,800 --> 00:12:26,100
better which has been proven to us that

00:12:19,710 --> 00:12:27,540
we can't and I think that's kind of like

00:12:26,100 --> 00:12:28,500
one of our can I take away points we're

00:12:27,540 --> 00:12:31,440
about where we're going to try and go

00:12:28,500 --> 00:12:33,270
from here is to say actually when we

00:12:31,440 --> 00:12:35,550
look at it deep down what are we trying

00:12:33,270 --> 00:12:37,320
to achieve by doing this stuff and okay

00:12:35,550 --> 00:12:38,850
we can lock in the behavior of where we

00:12:37,320 --> 00:12:40,940
are this week and we can reason about

00:12:38,850 --> 00:12:43,320
everything that we're doing right now

00:12:40,940 --> 00:12:44,760
but what does that mean for a year's

00:12:43,320 --> 00:12:46,470
time what does it mean for the next time

00:12:44,760 --> 00:12:48,120
there's a major breaking change in graph

00:12:46,470 --> 00:12:49,260
car for a security reason and stuff and

00:12:48,120 --> 00:12:50,370
there's definitely risk factors there

00:12:49,260 --> 00:12:53,670
which we haven't

00:12:50,370 --> 00:12:55,110
to explore fully ourselves so this is

00:12:53,670 --> 00:12:57,930
kind of a story about where we went we

00:12:55,110 --> 00:13:00,330
had our young love faith which is a lot

00:12:57,930 --> 00:13:01,860
of the reasons we kind of talked touched

00:13:00,330 --> 00:13:03,360
on there which is that everything is

00:13:01,860 --> 00:13:05,700
wonderful when you pick up graph girl

00:13:03,360 --> 00:13:08,100
the first time like absolutely brilliant

00:13:05,700 --> 00:13:10,890
you know it's like pigeons in the Eiffel

00:13:08,100 --> 00:13:12,720
Tower it's it's finally being able to

00:13:10,890 --> 00:13:14,839
just sit down as a team and say you know

00:13:12,720 --> 00:13:17,930
what actually everyone understands

00:13:14,839 --> 00:13:20,310
what's going on well that's hard to read

00:13:17,930 --> 00:13:21,990
everyone understands what's going on is

00:13:20,310 --> 00:13:23,790
a common language there's a common way

00:13:21,990 --> 00:13:26,100
to reason about applications that you're

00:13:23,790 --> 00:13:27,480
building because a lot of the Plumbing's

00:13:26,100 --> 00:13:30,240
being taken away from you there's not

00:13:27,480 --> 00:13:34,170
very much that you can disagree on

00:13:30,240 --> 00:13:36,029
because the spec is so comprehensive in

00:13:34,170 --> 00:13:38,010
its nature compared to arguing about is

00:13:36,029 --> 00:13:39,690
this actually okay to have another rest

00:13:38,010 --> 00:13:41,520
action here or should we nest this under

00:13:39,690 --> 00:13:43,290
that controller and like what happens if

00:13:41,520 --> 00:13:45,330
you publish a product are you creating a

00:13:43,290 --> 00:13:46,830
publishing there were you I'm amending

00:13:45,330 --> 00:13:51,000
this day and all of these conversations

00:13:46,830 --> 00:13:52,920
just disappear from now we decided well

00:13:51,000 --> 00:13:54,690
okay we've now got a really good common

00:13:52,920 --> 00:13:57,900
parlance we can use this to communicate

00:13:54,690 --> 00:13:59,300
effectively as a team so we can use it

00:13:57,900 --> 00:14:05,060
for everything

00:13:59,300 --> 00:14:08,220
rapid growth ensued and that led to us

00:14:05,060 --> 00:14:10,380
really buying into it we had scalars for

00:14:08,220 --> 00:14:11,760
absolutely everything so are scalars a

00:14:10,380 --> 00:14:13,890
graph called term if you're not familiar

00:14:11,760 --> 00:14:16,080
with it for wrapping a specific type of

00:14:13,890 --> 00:14:18,209
value in a predictable way so you can

00:14:16,080 --> 00:14:20,160
pass it over the wire and be able to

00:14:18,209 --> 00:14:21,839
interact with it in the way you expect

00:14:20,160 --> 00:14:23,760
at the other side and it offers you

00:14:21,839 --> 00:14:24,510
validation and kind of runtime things

00:14:23,760 --> 00:14:26,130
like that as well

00:14:24,510 --> 00:14:27,630
they're really good I mean I think at

00:14:26,130 --> 00:14:31,170
one point we actually add a coffee pot

00:14:27,630 --> 00:14:34,709
fill level scaler which is the the first

00:14:31,170 --> 00:14:38,550
hint the first part of a realization the

00:14:34,709 --> 00:14:39,990
host-only might have a problem here it

00:14:38,550 --> 00:14:41,610
turns out the graph girl actually has an

00:14:39,990 --> 00:14:43,350
upper limit in terms of what you can do

00:14:41,610 --> 00:14:45,330
with it which is partly why we've ended

00:14:43,350 --> 00:14:47,490
up with multiple graphs but there's a

00:14:45,330 --> 00:14:50,430
scale factor where you can't push it

00:14:47,490 --> 00:14:52,260
beyond and it's not at 50 resolvers it's

00:14:50,430 --> 00:14:53,670
not at 50 types but with the time you

00:14:52,260 --> 00:14:55,140
get to a thousand of them then you

00:14:53,670 --> 00:14:56,940
really start to have issues literally

00:14:55,140 --> 00:15:00,030
just booting JavaScript there's nothing

00:14:56,940 --> 00:15:02,310
else but all of the things that made it

00:15:00,030 --> 00:15:03,329
really good like we've got a single

00:15:02,310 --> 00:15:04,889
platform

00:15:03,329 --> 00:15:07,290
can interact with we've got a single

00:15:04,889 --> 00:15:09,319
language actually becomes a really big

00:15:07,290 --> 00:15:11,249
hindrance because there's no way of

00:15:09,319 --> 00:15:13,170
stepping back and asking yourself

00:15:11,249 --> 00:15:17,790
actually it what are we doing at the

00:15:13,170 --> 00:15:23,850
moment what happens when you realize

00:15:17,790 --> 00:15:26,309
that you can also do bad graph QL so for

00:15:23,850 --> 00:15:28,470
us the moment that we were doing bad

00:15:26,309 --> 00:15:31,079
graph QL was when we realized that our

00:15:28,470 --> 00:15:32,429
small queries were really good like you

00:15:31,079 --> 00:15:33,600
asked for a little bit of data and it

00:15:32,429 --> 00:15:36,239
gives you back a little bit of data and

00:15:33,600 --> 00:15:37,829
everything works really really well but

00:15:36,239 --> 00:15:39,389
I said earlier on that we were kind of

00:15:37,829 --> 00:15:40,949
passing a couple of hundred kilobytes of

00:15:39,389 --> 00:15:42,509
data across the wire on a single request

00:15:40,949 --> 00:15:44,489
and we were wondering why it was quite

00:15:42,509 --> 00:15:48,899
hard to actually push things and to

00:15:44,489 --> 00:15:50,939
scale things and to go forwards once

00:15:48,899 --> 00:15:52,319
you've started modeling bigger and

00:15:50,939 --> 00:15:53,459
bigger parts of your ecosystem and you

00:15:52,319 --> 00:15:54,869
start saying okay you know what I'm

00:15:53,459 --> 00:15:56,670
gonna build this page and I'm gonna pay

00:15:54,869 --> 00:15:58,980
for all the data on the page at once in

00:15:56,670 --> 00:16:00,360
a way that say relay wants you to like

00:15:58,980 --> 00:16:02,369
if you don't know how to put a catalogue

00:16:00,360 --> 00:16:04,619
with endless variants and stock levels

00:16:02,369 --> 00:16:06,839
and prices and availability restrictions

00:16:04,619 --> 00:16:08,220
and because product want to have some

00:16:06,839 --> 00:16:09,989
really nice features on there like okay

00:16:08,220 --> 00:16:11,639
we'll show this icon if this is the case

00:16:09,989 --> 00:16:13,139
and it wouldn't be that hard to add this

00:16:11,639 --> 00:16:15,360
in then you can easily end up in a

00:16:13,139 --> 00:16:17,850
situation where actually the scale of it

00:16:15,360 --> 00:16:19,410
is huge and I think anyone doing graph

00:16:17,850 --> 00:16:21,209
girl should ask themselves how can we

00:16:19,410 --> 00:16:22,499
keep it as small as possible like it's

00:16:21,209 --> 00:16:25,319
okay to make multiple trips to the

00:16:22,499 --> 00:16:28,019
server in a world where HTTP 2 exists so

00:16:25,319 --> 00:16:29,669
make little queries think about little

00:16:28,019 --> 00:16:31,470
panels of pages where other than trying

00:16:29,669 --> 00:16:33,299
to just satisfy everything and I think

00:16:31,470 --> 00:16:34,769
relays are really unhelpful packing for

00:16:33,299 --> 00:16:37,559
this to Paulo is maybe a little bit

00:16:34,769 --> 00:16:39,360
easier our realization was maybe a

00:16:37,559 --> 00:16:40,739
little bit deeper than that though and I

00:16:39,360 --> 00:16:42,809
talked earlier that we had like a a

00:16:40,739 --> 00:16:45,660
reactive client customer facing front

00:16:42,809 --> 00:16:47,699
end and a graph providing with data if I

00:16:45,660 --> 00:16:51,389
can tell you one thing today it's this

00:16:47,699 --> 00:16:53,939
next slide for the love of whatever is

00:16:51,389 --> 00:16:56,369
out there do not model an entire HTML

00:16:53,939 --> 00:16:57,989
Dom in graph QL pass it over the wire in

00:16:56,369 --> 00:17:02,489
JSON and then also react to render it on

00:16:57,989 --> 00:17:06,659
the other side honestly it doesn't work

00:17:02,489 --> 00:17:08,069
well but if you're in a situation where

00:17:06,659 --> 00:17:09,360
you're not analyzing the tools and we

00:17:08,069 --> 00:17:13,740
weren't at this point we had a fantastic

00:17:09,360 --> 00:17:16,079
solution to this we worked out that the

00:17:13,740 --> 00:17:16,940
slowdown here was because graph QL has

00:17:16,079 --> 00:17:19,640
to wrap every

00:17:16,940 --> 00:17:24,590
single node on that graph as a scalar so

00:17:19,640 --> 00:17:26,150
we fixed it we make Jason scaler so okay

00:17:24,590 --> 00:17:27,560
what we do is we assert that this is

00:17:26,150 --> 00:17:29,630
Jason and we pass it over the wire and

00:17:27,560 --> 00:17:30,140
then we still render it and react it was

00:17:29,630 --> 00:17:32,710
genius

00:17:30,140 --> 00:17:35,270
like absolute Friday night pub genius

00:17:32,710 --> 00:17:37,850
also if you do have a way of revoking

00:17:35,270 --> 00:17:40,280
commit privileges or after like 6:30 on

00:17:37,850 --> 00:17:41,630
a Friday I strongly recommend it also

00:17:40,280 --> 00:17:42,620
can you tell me how I can do that for

00:17:41,630 --> 00:17:46,970
myself that'd be great

00:17:42,620 --> 00:17:48,230
I think it's really important with any

00:17:46,970 --> 00:17:49,610
of these things especially where there's

00:17:48,230 --> 00:17:51,020
such a big framework and look we have

00:17:49,610 --> 00:17:52,550
this as well with our rails platforms

00:17:51,020 --> 00:17:54,680
where you get so engrossed with what

00:17:52,550 --> 00:17:57,110
you're doing and so enabled by the

00:17:54,680 --> 00:17:58,340
framework that you have to be able to

00:17:57,110 --> 00:18:00,590
just to take a step back and think you

00:17:58,340 --> 00:18:05,540
know what that might be a solution but

00:18:00,590 --> 00:18:08,900
is it the right solution it might be but

00:18:05,540 --> 00:18:11,840
it probably isn't and having the

00:18:08,900 --> 00:18:13,340
discipline to do that in any programming

00:18:11,840 --> 00:18:15,220
setup at all I think it's one of the

00:18:13,340 --> 00:18:17,630
most important things that you can find

00:18:15,220 --> 00:18:19,670
as a team and one of the areas where

00:18:17,630 --> 00:18:21,620
great teams support themselves in just

00:18:19,670 --> 00:18:24,740
asking the difficult question which is

00:18:21,620 --> 00:18:26,540
why not in a horrible and

00:18:24,740 --> 00:18:28,610
confrontational way but just in a really

00:18:26,540 --> 00:18:35,000
genuinely honestly like are we missing

00:18:28,610 --> 00:18:36,380
the point here kind of way so we talked

00:18:35,000 --> 00:18:37,850
about this a little bit I talked about

00:18:36,380 --> 00:18:39,980
this a little bit before which is in

00:18:37,850 --> 00:18:41,510
terms of how we do business so we took a

00:18:39,980 --> 00:18:43,760
step back from that reactive thing and

00:18:41,510 --> 00:18:46,280
we went okay what we'll do liquid but

00:18:43,760 --> 00:18:47,270
because we burnt microservices then

00:18:46,280 --> 00:18:48,800
we've got a situation where our

00:18:47,270 --> 00:18:51,140
rendering service needs lots lots of

00:18:48,800 --> 00:18:52,700
data so graph curl is great for this

00:18:51,140 --> 00:18:54,620
like you can just request everything and

00:18:52,700 --> 00:18:56,150
if the data structures in the database

00:18:54,620 --> 00:18:57,560
have got the data in it we'll return it

00:18:56,150 --> 00:18:59,240
and if it doesn't and you won't get that

00:18:57,560 --> 00:19:00,950
data and it means that we can basically

00:18:59,240 --> 00:19:02,150
query with a path and just get back a

00:19:00,950 --> 00:19:03,740
representation of everything that should

00:19:02,150 --> 00:19:06,440
be on the page and then turn it into

00:19:03,740 --> 00:19:08,990
HTML the problem with this though is

00:19:06,440 --> 00:19:11,240
that 73 kilobytes worth of text we're

00:19:08,990 --> 00:19:14,690
sending over the wire even compressed

00:19:11,240 --> 00:19:16,100
that is still way way too much and we'll

00:19:14,690 --> 00:19:19,580
talk about the scalability implications

00:19:16,100 --> 00:19:21,020
of that race shortly maybe that isn't

00:19:19,580 --> 00:19:22,400
the right approach one of the things we

00:19:21,020 --> 00:19:23,900
turn around with it is it better to just

00:19:22,400 --> 00:19:25,850
hold up a process in the middle of

00:19:23,900 --> 00:19:28,220
render and say ah we need some more data

00:19:25,850 --> 00:19:29,620
now we benchmark the two and they're

00:19:28,220 --> 00:19:31,190
basically as rubbish as each other

00:19:29,620 --> 00:19:33,170
also if anyone

00:19:31,190 --> 00:19:35,780
a magically teleport data I'm looking at

00:19:33,170 --> 00:19:39,650
you over there then that would be great

00:19:35,780 --> 00:19:41,210
you know I want more magic data so let's

00:19:39,650 --> 00:19:42,140
talk about the good things and there are

00:19:41,210 --> 00:19:44,360
many many good things

00:19:42,140 --> 00:19:49,160
we'll cover the most important of them

00:19:44,360 --> 00:19:50,690
in my opinion documentation graph kill

00:19:49,160 --> 00:19:52,700
hazard there may be the most simple way

00:19:50,690 --> 00:19:55,040
of generating documentation ever which

00:19:52,700 --> 00:19:56,480
is that every single thing you define

00:19:55,040 --> 00:19:58,910
and I totally have forgotten to put the

00:19:56,480 --> 00:20:00,500
code slide in here so so by that every

00:19:58,910 --> 00:20:02,270
single thing you define has got a hook

00:20:00,500 --> 00:20:04,010
for documentation and the interactive

00:20:02,270 --> 00:20:06,920
Explorer displays it on every single

00:20:04,010 --> 00:20:08,660
field every single type and there is no

00:20:06,920 --> 00:20:10,430
excuse not to do it I actually think

00:20:08,660 --> 00:20:12,470
that it may be the single greatest

00:20:10,430 --> 00:20:13,430
failing of the spec is the documentation

00:20:12,470 --> 00:20:15,860
is optional on it

00:20:13,430 --> 00:20:19,460
I think carrying types is an interesting

00:20:15,860 --> 00:20:21,350
discussion lots of people I do like type

00:20:19,460 --> 00:20:23,000
it's not typing test is an interesting

00:20:21,350 --> 00:20:24,920
discussion like I think a lot of people

00:20:23,000 --> 00:20:26,930
including myself do like them but at the

00:20:24,920 --> 00:20:28,430
same time I think documentation beats

00:20:26,930 --> 00:20:30,110
tests if you had to pick one of the two

00:20:28,430 --> 00:20:31,880
of them because I don't know what I

00:20:30,110 --> 00:20:34,370
wrote last week I can't expect other

00:20:31,880 --> 00:20:37,640
people who worked with us for years ago

00:20:34,370 --> 00:20:39,560
to have somehow mythically conveyed

00:20:37,640 --> 00:20:41,240
their intent through the ether that a

00:20:39,560 --> 00:20:45,800
new hire next year is going to pick up

00:20:41,240 --> 00:20:47,150
at a sensible and coherent way the next

00:20:45,800 --> 00:20:49,670
amazing thing about it and I'm aware

00:20:47,150 --> 00:20:52,910
this is a Jas meetup is language

00:20:49,670 --> 00:20:54,680
agnosticism and I think this is maybe

00:20:52,910 --> 00:20:55,760
the single most important thing and

00:20:54,680 --> 00:20:57,980
where we've maybe had some of the

00:20:55,760 --> 00:21:01,610
biggest benefits is the fact that by

00:20:57,980 --> 00:21:03,980
defining a lot of the way you see your

00:21:01,610 --> 00:21:06,500
world in terms of the interactions and

00:21:03,980 --> 00:21:08,630
mutations in terms of the way the data

00:21:06,500 --> 00:21:13,880
is modeled and interacts with itself in

00:21:08,630 --> 00:21:15,980
a spec rather than in code you've got

00:21:13,880 --> 00:21:17,420
the opportunity to do the right thing at

00:21:15,980 --> 00:21:18,830
any moment and if parts of it aren't

00:21:17,420 --> 00:21:20,570
going fast nothing you can do it in a

00:21:18,830 --> 00:21:22,750
faster language if parts of it are

00:21:20,570 --> 00:21:25,520
confusing then you've got an actual

00:21:22,750 --> 00:21:28,580
coherent document to discuss and to

00:21:25,520 --> 00:21:30,620
argue about order to iterate on to make

00:21:28,580 --> 00:21:32,260
it better and I think that's definitely

00:21:30,620 --> 00:21:35,870
improved the quality of our engineering

00:21:32,260 --> 00:21:37,490
massively is taking it away from code

00:21:35,870 --> 00:21:41,380
and making it actually about our

00:21:37,490 --> 00:21:41,380
business ideas and our business concepts

00:21:42,840 --> 00:21:47,770
visibility is maybe the next single

00:21:44,920 --> 00:21:49,270
biggest area where it is and the first

00:21:47,770 --> 00:21:51,850
thought this evening about resolvers is

00:21:49,270 --> 00:21:53,470
a great example here because everything

00:21:51,850 --> 00:21:55,870
has a really well-defined way of being

00:21:53,470 --> 00:21:57,900
accessed you also have great great

00:21:55,870 --> 00:22:00,100
primitives to be able to actually

00:21:57,900 --> 00:22:01,630
interact with what's happening on a day

00:22:00,100 --> 00:22:04,120
to day basis like when was the last time

00:22:01,630 --> 00:22:05,740
that field was used and you know a

00:22:04,120 --> 00:22:07,630
simple stats the implementation or

00:22:05,740 --> 00:22:10,330
something just allows you to see how

00:22:07,630 --> 00:22:12,250
that's been used in the year so you can

00:22:10,330 --> 00:22:14,860
just delete it and then regret it a year

00:22:12,250 --> 00:22:18,580
later because it's the biannual field or

00:22:14,860 --> 00:22:19,960
something but no other solution that I'm

00:22:18,580 --> 00:22:22,480
aware of gives you quite the same

00:22:19,960 --> 00:22:23,650
ability to just drop in and say you know

00:22:22,480 --> 00:22:25,900
what what's the state of the world at

00:22:23,650 --> 00:22:31,630
the moment and how do we how do we work

00:22:25,900 --> 00:22:34,660
with that standardization I think is the

00:22:31,630 --> 00:22:36,850
other great thing here and I touched on

00:22:34,660 --> 00:22:39,520
this slightly beforehand which is it's

00:22:36,850 --> 00:22:43,330
just far too much kind of like ego in

00:22:39,520 --> 00:22:46,210
our industry we all want to be that like

00:22:43,330 --> 00:22:49,000
10x or 100x engineer where you know we

00:22:46,210 --> 00:22:50,830
deliver so much value to the to the team

00:22:49,000 --> 00:22:52,540
to the company you know to the pub on

00:22:50,830 --> 00:22:54,640
Friday night or not as the case may be

00:22:52,540 --> 00:22:56,910
and and just feel great about where you

00:22:54,640 --> 00:22:59,740
are but I think in order for us to

00:22:56,910 --> 00:23:01,570
improve working practices generally in

00:22:59,740 --> 00:23:03,130
this industry in London we need to be

00:23:01,570 --> 00:23:04,570
able to take a step away from that and

00:23:03,130 --> 00:23:08,170
actually just talk a little bit more as

00:23:04,570 --> 00:23:10,630
humans about what's going on the value

00:23:08,170 --> 00:23:12,760
we deliver is in our experience and how

00:23:10,630 --> 00:23:16,240
that interacts with the things we do and

00:23:12,760 --> 00:23:17,830
in any situation where we're measuring

00:23:16,240 --> 00:23:19,630
our output based on the difficulty of

00:23:17,830 --> 00:23:23,410
the solutions that we're building or the

00:23:19,630 --> 00:23:26,020
incredible engineering that's gone into

00:23:23,410 --> 00:23:27,640
this one thing I think we've kind of

00:23:26,020 --> 00:23:29,560
missed the point slightly in 2018

00:23:27,640 --> 00:23:32,260
like solutions like graph QL actually

00:23:29,560 --> 00:23:35,070
provide a framework for enabling kind of

00:23:32,260 --> 00:23:39,160
like a dmoz knowing of the industry and

00:23:35,070 --> 00:23:41,830
the possibility that we can have solid

00:23:39,160 --> 00:23:45,130
conversations about business ideas aside

00:23:41,830 --> 00:23:48,490
from like well that's an O n plus one

00:23:45,130 --> 00:23:51,010
log N squared loop and like who cares

00:23:48,490 --> 00:23:52,900
like it doesn't matter like let's talk

00:23:51,010 --> 00:23:54,040
about the underlying concepts and let

00:23:52,900 --> 00:23:54,669
the framework guide us towards the

00:23:54,040 --> 00:23:56,259
finishing line

00:23:54,669 --> 00:23:58,989
this that might be a controversial point

00:23:56,259 --> 00:24:00,429
but I think that by buying into it

00:23:58,989 --> 00:24:02,080
there's an interesting thing you can ask

00:24:00,429 --> 00:24:05,769
yourself about actually what is it that

00:24:02,080 --> 00:24:06,850
we are doing on a daily basis and the

00:24:05,769 --> 00:24:08,739
great thing about that is that makes

00:24:06,850 --> 00:24:10,179
hiring easier because you don't need

00:24:08,739 --> 00:24:11,950
unicorns anymore you know these these

00:24:10,179 --> 00:24:13,690
stand out developers are only this

00:24:11,950 --> 00:24:16,749
person can deliver the feature that we

00:24:13,690 --> 00:24:18,970
that we require and like we were in a

00:24:16,749 --> 00:24:20,440
situation like that significantly

00:24:18,970 --> 00:24:22,330
previously where you've got some

00:24:20,440 --> 00:24:23,409
features where you know what oh it's

00:24:22,330 --> 00:24:24,759
going to have to be that person's

00:24:23,409 --> 00:24:26,289
feature because they're the expert in

00:24:24,759 --> 00:24:27,369
this area you just make a team of

00:24:26,289 --> 00:24:28,509
experts and everything because

00:24:27,369 --> 00:24:30,100
everyone's got the same share

00:24:28,509 --> 00:24:33,759
understanding about how you actually

00:24:30,100 --> 00:24:36,759
implement and deliver stuff and then

00:24:33,759 --> 00:24:37,929
just from a business point of view and I

00:24:36,759 --> 00:24:40,509
think it said maybe one of our single

00:24:37,929 --> 00:24:43,359
biggest functions that we can serve

00:24:40,509 --> 00:24:46,149
outwards is that we can de-escalate the

00:24:43,359 --> 00:24:48,340
risk in projects which we deliver now no

00:24:46,149 --> 00:24:50,320
one really cares about that stuff like I

00:24:48,340 --> 00:24:51,850
hate that kind of things but at the same

00:24:50,320 --> 00:24:53,619
time I need to be able to turn around to

00:24:51,850 --> 00:24:55,359
the people I report into and say you

00:24:53,619 --> 00:24:57,489
know what actually we can do this and it

00:24:55,359 --> 00:24:58,779
can happen on time and it can happen on

00:24:57,489 --> 00:25:01,989
budget and we can deliver value for

00:24:58,779 --> 00:25:04,480
money and in the old world we you know

00:25:01,989 --> 00:25:06,789
go and build out some super awesome

00:25:04,480 --> 00:25:12,309
system that used like message passing

00:25:06,789 --> 00:25:14,889
between lure and like a goat and then

00:25:12,309 --> 00:25:15,879
the goat doesn't speak like Jason or

00:25:14,889 --> 00:25:17,919
something and then you've got to

00:25:15,879 --> 00:25:19,929
reinvent it again and use go you know

00:25:17,919 --> 00:25:24,129
what Groff girl actually is good enough

00:25:19,929 --> 00:25:28,210
and we can run with that so what's the

00:25:24,129 --> 00:25:30,070
bad and there definitely is bad the one

00:25:28,210 --> 00:25:32,200
of them is that text is a lousy API and

00:25:30,070 --> 00:25:34,690
in our experience anything you transfer

00:25:32,200 --> 00:25:36,129
over the wire probably is going to get

00:25:34,690 --> 00:25:37,749
corrupted and anything that you accept

00:25:36,129 --> 00:25:40,480
from a client is almost certainly going

00:25:37,749 --> 00:25:42,190
to get corrupted I have no idea what

00:25:40,480 --> 00:25:43,869
happens in Sweden but we have the Inc

00:25:42,190 --> 00:25:45,580
remote incredible amount of encoding

00:25:43,869 --> 00:25:49,929
errors coming out of like the Stockholm

00:25:45,580 --> 00:25:54,730
area apparently a curly brace is not a

00:25:49,929 --> 00:25:57,129
curly brace like and I love it if graph

00:25:54,730 --> 00:25:58,869
keel had a maybe a binary API that you

00:25:57,129 --> 00:26:00,730
could just flick to a compile-time like

00:25:58,869 --> 00:26:01,869
literally nobody in the world once

00:26:00,730 --> 00:26:03,879
you're at a development needs to open

00:26:01,869 --> 00:26:06,309
chrome dev tools and read out the

00:26:03,879 --> 00:26:07,450
response or request body to you I think

00:26:06,309 --> 00:26:08,410
that would be a really nice improvement

00:26:07,450 --> 00:26:10,390
to where it goes

00:26:08,410 --> 00:26:13,570
I think it's single biggest issue for us

00:26:10,390 --> 00:26:15,220
though is this which is that it is not a

00:26:13,570 --> 00:26:17,110
Ferrari and we touched on this before

00:26:15,220 --> 00:26:19,990
about the overheads involved in a

00:26:17,110 --> 00:26:21,910
wrapping field and in actually

00:26:19,990 --> 00:26:26,530
processing any kind of great size graph

00:26:21,910 --> 00:26:28,840
QL response there is an underlying issue

00:26:26,530 --> 00:26:33,070
with Jay s and graph QL which is that

00:26:28,840 --> 00:26:35,740
they are not fantastic soulmates

00:26:33,070 --> 00:26:38,289
they great solution for building early

00:26:35,740 --> 00:26:40,059
stage implementations of this but at the

00:26:38,289 --> 00:26:41,860
kind of scale we've got to there are

00:26:40,059 --> 00:26:44,289
issues caused by literally the choice of

00:26:41,860 --> 00:26:48,909
runtime and the event loop causes us

00:26:44,289 --> 00:26:50,140
endless issues we've experimented but

00:26:48,909 --> 00:26:51,190
admittedly we're still tight script to

00:26:50,140 --> 00:26:52,720
the moment like we still run on

00:26:51,190 --> 00:26:55,030
JavaScript and I'm not saying that we're

00:26:52,720 --> 00:26:56,409
even having any plans on moving away

00:26:55,030 --> 00:26:57,970
from that but we're definitely starting

00:26:56,409 --> 00:26:59,799
to think about how else can we pick up

00:26:57,970 --> 00:27:01,750
the graphical stuff and run it on other

00:26:59,799 --> 00:27:03,100
runtimes elixir has got some great

00:27:01,750 --> 00:27:05,530
traction we've had a couple of projects

00:27:03,100 --> 00:27:07,630
in that absinthe is a lovely lovely

00:27:05,530 --> 00:27:09,850
framework that does concurrency really

00:27:07,630 --> 00:27:12,190
well in Scala sangria is another

00:27:09,850 --> 00:27:14,559
fantastic implementation of graph QL and

00:27:12,190 --> 00:27:16,750
both of them just offer you a little bit

00:27:14,559 --> 00:27:17,950
more rock solidity in the runtime level

00:27:16,750 --> 00:27:19,090
and I think if you're getting two or

00:27:17,950 --> 00:27:20,950
three years into a project that I think

00:27:19,090 --> 00:27:23,950
you should be asking yourselves you know

00:27:20,950 --> 00:27:25,600
what are we still in that rapid phase or

00:27:23,950 --> 00:27:27,220
actually do we have some concepts now

00:27:25,600 --> 00:27:28,990
which have been lifted out of that or a

00:27:27,220 --> 00:27:31,179
bit more solid Paolo makes some

00:27:28,990 --> 00:27:32,799
fantastic stuff be able to split schemas

00:27:31,179 --> 00:27:35,230
and send some to some backends you know

00:27:32,799 --> 00:27:36,700
you can have your scratch pad graph gel

00:27:35,230 --> 00:27:38,710
one in JavaScript where you can iterate

00:27:36,700 --> 00:27:40,600
really quickly and then this concepts

00:27:38,710 --> 00:27:42,549
become more hardwired into the business

00:27:40,600 --> 00:27:44,650
and more well-defined then maybe you

00:27:42,549 --> 00:27:46,059
migrate that to something else it also

00:27:44,650 --> 00:27:48,480
pays a question why the really good

00:27:46,059 --> 00:27:52,419
implementation is named after alcohol

00:27:48,480 --> 00:27:54,820
I've got no idea on that one having said

00:27:52,419 --> 00:27:57,159
that though the Jeff ocean is okay and I

00:27:54,820 --> 00:28:00,520
mean okay in the best possible sense of

00:27:57,159 --> 00:28:02,890
the word it's fantastically easy to get

00:28:00,520 --> 00:28:04,419
started with like that the well

00:28:02,890 --> 00:28:06,280
admittedly the graph gal spec Docs are a

00:28:04,419 --> 00:28:07,900
little bit interesting but the actual

00:28:06,280 --> 00:28:10,419
community around the graph girl jeaious

00:28:07,900 --> 00:28:11,890
implementation is fantastic it's got so

00:28:10,419 --> 00:28:14,289
much in the way of libraries around it

00:28:11,890 --> 00:28:15,909
it's got great tooling there is

00:28:14,289 --> 00:28:17,620
absolutely nothing that can compete with

00:28:15,909 --> 00:28:19,419
firing out graphic or for the first time

00:28:17,620 --> 00:28:19,940
and just seeing the light about your

00:28:19,419 --> 00:28:25,580
date

00:28:19,940 --> 00:28:28,070
on the page and okay is probably where

00:28:25,580 --> 00:28:29,990
we want to be as engineers like if it's

00:28:28,070 --> 00:28:32,050
good enough why are we in why are we

00:28:29,990 --> 00:28:34,520
trying to iterate further than that

00:28:32,050 --> 00:28:35,930
to push okay a bit further these are the

00:28:34,520 --> 00:28:38,080
things we've kind of dealt with in terms

00:28:35,930 --> 00:28:41,090
of scaling tactics

00:28:38,080 --> 00:28:43,130
first of all speculative querying cost

00:28:41,090 --> 00:28:45,200
money like real terms money the way we

00:28:43,130 --> 00:28:46,340
do it is needs to be improved I don't

00:28:45,200 --> 00:28:49,700
have a solution for that yet

00:28:46,340 --> 00:28:52,940
anyone wants to suggest something I'm

00:28:49,700 --> 00:28:54,790
always always but try to keep your

00:28:52,940 --> 00:28:58,070
footprint to the smaller size possible

00:28:54,790 --> 00:29:01,550
cash absolutely everything that moves

00:28:58,070 --> 00:29:03,860
and caching and cache invalidation get a

00:29:01,550 --> 00:29:05,300
really bad rap but clashing doesn't mean

00:29:03,860 --> 00:29:08,360
it has to be locked down for half an

00:29:05,300 --> 00:29:10,160
hour like we have a maximum staleness

00:29:08,360 --> 00:29:11,300
factor of seven seconds from the very

00:29:10,160 --> 00:29:14,090
front to the very back of our

00:29:11,300 --> 00:29:16,550
application in a series of one-second

00:29:14,090 --> 00:29:18,170
caches we just like having little micro

00:29:16,550 --> 00:29:19,670
caches all the way along and it's

00:29:18,170 --> 00:29:21,980
incredible the amount of load that that

00:29:19,670 --> 00:29:24,020
can absorb over time without actually

00:29:21,980 --> 00:29:26,210
really worrying about stuff you hit save

00:29:24,020 --> 00:29:28,490
if you change tabs you hit refresh and

00:29:26,210 --> 00:29:29,810
it's there like every time but what it

00:29:28,490 --> 00:29:31,070
means is that we can take all the

00:29:29,810 --> 00:29:33,680
pressure off the hardest parts of the

00:29:31,070 --> 00:29:34,940
system caching resolvers is a tactic

00:29:33,680 --> 00:29:36,980
which we've kind of played around with

00:29:34,940 --> 00:29:38,480
haven't really managed to make work yet

00:29:36,980 --> 00:29:40,480
but I think there's a lot of mileage to

00:29:38,480 --> 00:29:43,400
go in there as well

00:29:40,480 --> 00:29:45,140
data loader is the absolute answer to

00:29:43,400 --> 00:29:47,270
everything if you're not using it you

00:29:45,140 --> 00:29:49,820
should be using it like data load your

00:29:47,270 --> 00:29:52,700
commute data load like your dinner

00:29:49,820 --> 00:29:54,950
like it's a facebook project it's like

00:29:52,700 --> 00:29:57,680
one file it's even smaller than medic

00:29:54,950 --> 00:29:59,750
says and it just batches queries like

00:29:57,680 --> 00:30:00,920
it's as simple as that gather up

00:29:59,750 --> 00:30:02,180
everything that happened in that taking

00:30:00,920 --> 00:30:05,300
the event loop and send it and one go

00:30:02,180 --> 00:30:07,130
boom all my data back and then it deals

00:30:05,300 --> 00:30:10,940
with DDP and all that kind of stuff it's

00:30:07,130 --> 00:30:12,470
just incredible query parsing is your

00:30:10,940 --> 00:30:15,140
worst enemy is another thing we found

00:30:12,470 --> 00:30:16,820
which is we cache all of the queries as

00:30:15,140 --> 00:30:18,440
they come in so we our middleware will

00:30:16,820 --> 00:30:21,170
do preemptive caching of the graph Cal

00:30:18,440 --> 00:30:22,910
query and then allow that to slip out

00:30:21,170 --> 00:30:25,790
you know like an least recently used

00:30:22,910 --> 00:30:29,000
kind of basis that's pretty much the way

00:30:25,790 --> 00:30:30,890
forwards but again has some issues with

00:30:29,000 --> 00:30:33,510
it and then if you are going to do water

00:30:30,890 --> 00:30:35,970
scaling then make sure you Auto scale

00:30:33,510 --> 00:30:39,090
the event loop of JavaScript JavaScript

00:30:35,970 --> 00:30:42,600
itself exposes really good metrics about

00:30:39,090 --> 00:30:45,450
how much time it's blocked it's actually

00:30:42,600 --> 00:30:47,730
running for and as soon as you've got a

00:30:45,450 --> 00:30:49,140
contention like as in then when I

00:30:47,730 --> 00:30:51,900
promise resolves it it's gonna wait

00:30:49,140 --> 00:30:53,850
before it can actually kick into action

00:30:51,900 --> 00:30:55,770
and do something then you've got people

00:30:53,850 --> 00:30:57,930
waiting and you've got latency stats

00:30:55,770 --> 00:30:59,370
increasing all the time you can just

00:30:57,930 --> 00:31:00,870
hook that straight to kubernetes or

00:30:59,370 --> 00:31:02,970
whatever other platform you're using and

00:31:00,870 --> 00:31:04,680
say look at the moment I've got like 40

00:31:02,970 --> 00:31:06,540
percent free in the event loop in terms

00:31:04,680 --> 00:31:09,120
of where we're doing wait times just

00:31:06,540 --> 00:31:10,770
give me another node like split tear it

00:31:09,120 --> 00:31:12,900
down again the moment the numbers drop

00:31:10,770 --> 00:31:14,640
but I think if you use CPU as your

00:31:12,900 --> 00:31:16,860
metric you end up really really badly

00:31:14,640 --> 00:31:18,960
placed in terms of doing it we found

00:31:16,860 --> 00:31:21,870
that like auto scaling off the event

00:31:18,960 --> 00:31:24,750
loop idle factor is by far the best way

00:31:21,870 --> 00:31:28,050
and then just to end up I think the

00:31:24,750 --> 00:31:29,550
other thing we've realized is what is it

00:31:28,050 --> 00:31:31,020
powering like it doesn't matter having

00:31:29,550 --> 00:31:33,510
this incredible data layer if you're

00:31:31,020 --> 00:31:35,850
actually just doing it for no reason I

00:31:33,510 --> 00:31:37,200
and this is maybe slightly heretical but

00:31:35,850 --> 00:31:40,740
I actually wrote some jQuery the other

00:31:37,200 --> 00:31:43,830
day it was amazing like just you know

00:31:40,740 --> 00:31:47,670
three lines of code no web pack drop a

00:31:43,830 --> 00:31:55,110
script tag onto a page wow this is the

00:31:47,670 --> 00:31:56,700
future or something but for so many of

00:31:55,110 --> 00:31:58,290
the tasks that we immediately now turn

00:31:56,700 --> 00:32:00,090
to react and turn to graph gain and all

00:31:58,290 --> 00:32:02,730
this stuff for like you just don't need

00:32:00,090 --> 00:32:04,800
an HTML form tag jQuery all of these

00:32:02,730 --> 00:32:07,020
things are still perfectly valid ways of

00:32:04,800 --> 00:32:08,460
building solutions in 2018 and I think a

00:32:07,020 --> 00:32:10,200
lot of the problems that projects get

00:32:08,460 --> 00:32:11,760
into is by trying to bite off far too

00:32:10,200 --> 00:32:13,260
much and use the wrong technology

00:32:11,760 --> 00:32:14,370
choices right from the beginning of

00:32:13,260 --> 00:32:15,540
things rather than going you know what

00:32:14,370 --> 00:32:16,950
we're gonna build a proof of concept

00:32:15,540 --> 00:32:18,840
let's just do it in something really

00:32:16,950 --> 00:32:21,330
fast and scaffolding and seed then if we

00:32:18,840 --> 00:32:23,640
actually need to be generate enough pain

00:32:21,330 --> 00:32:26,940
to just hide that we'll go further than

00:32:23,640 --> 00:32:28,290
that over time systems also stabilize

00:32:26,940 --> 00:32:30,540
you know you might start out with that

00:32:28,290 --> 00:32:32,250
kind of really loose and fluid world

00:32:30,540 --> 00:32:34,980
where we're moving fields around but

00:32:32,250 --> 00:32:36,990
then actually does it stay that way you

00:32:34,980 --> 00:32:38,550
know are we changing our queries ever do

00:32:36,990 --> 00:32:39,750
I don't we just change the G RPC or

00:32:38,550 --> 00:32:41,310
something different in terms of getting

00:32:39,750 --> 00:32:44,130
our data like there's so much out there

00:32:41,310 --> 00:32:45,390
that you can just switch to later and

00:32:44,130 --> 00:32:47,190
graph Gale does make that really

00:32:45,390 --> 00:32:49,320
possible because you specified it

00:32:47,190 --> 00:32:50,760
does for your flexibility matter more

00:32:49,320 --> 00:32:53,100
than your latency these some of these

00:32:50,760 --> 00:32:55,230
are questions so to sum up we're next

00:32:53,100 --> 00:32:57,030
first graph girl has got us to point we

00:32:55,230 --> 00:32:59,220
are at the moment and I'm super grateful

00:32:57,030 --> 00:33:00,990
to it we will be using it certainly for

00:32:59,220 --> 00:33:02,340
the next three years although I'm

00:33:00,990 --> 00:33:04,410
concerned that our usage of it is

00:33:02,340 --> 00:33:06,030
becoming less and less idiomatic we're

00:33:04,410 --> 00:33:07,920
doing bigger and bigger speculative

00:33:06,030 --> 00:33:11,100
queries and not necessarily doing like

00:33:07,920 --> 00:33:14,390
the very small nimble I just need this

00:33:11,100 --> 00:33:16,260
bit things that it's really designed for

00:33:14,390 --> 00:33:17,580
one of the things we're wondering is can

00:33:16,260 --> 00:33:19,680
we just do it without the network like

00:33:17,580 --> 00:33:22,200
you know build a schema then use some

00:33:19,680 --> 00:33:23,640
rendering and just render out at that

00:33:22,200 --> 00:33:26,160
point and maybe see if that actually

00:33:23,640 --> 00:33:28,410
does a good job for us and then also

00:33:26,160 --> 00:33:30,090
we're kind of wondering about why we

00:33:28,410 --> 00:33:32,790
stand with monoliths and graph QL

00:33:30,090 --> 00:33:33,240
because our main graph is absolutely

00:33:32,790 --> 00:33:39,630
massive

00:33:33,240 --> 00:33:46,560
it is a 3.2 gigabyte long time jas v8

00:33:39,630 --> 00:33:48,030
and that now needs to be addressed but

00:33:46,560 --> 00:33:49,740
it's be great and I recommend it to

00:33:48,030 --> 00:33:51,750
absolutely anyone as the way forwards

00:33:49,740 --> 00:33:54,210
for building data-driven applications in

00:33:51,750 --> 00:33:56,010
2018 so much so that if this hasn't made

00:33:54,210 --> 00:33:57,150
any sense I do actually apparently know

00:33:56,010 --> 00:33:58,650
what I'm talking about on the world

00:33:57,150 --> 00:34:00,000
would be very happy to help anyone that

00:33:58,650 --> 00:34:03,120
was got any questions about it feel free

00:34:00,000 --> 00:34:06,570
to drop me a line I'm JW Maxwell on

00:34:03,120 --> 00:34:09,180
Twitter or just come and see me we would

00:34:06,570 --> 00:34:10,410
love to see this community do more and

00:34:09,180 --> 00:34:13,110
you know it's one of the great things

00:34:10,410 --> 00:34:14,340
about you guys at opening up your space

00:34:13,110 --> 00:34:15,750
to us this evening is if we actually

00:34:14,340 --> 00:34:17,700
collaborate them where there's a chance

00:34:15,750 --> 00:34:20,520
that London can maybe take a step

00:34:17,700 --> 00:34:22,480
forward in the overall tech scene which

00:34:20,520 --> 00:34:27,590
would be awesome just

00:34:22,480 --> 00:34:27,590

YouTube URL: https://www.youtube.com/watch?v=HVuSi5pVC1U


