Title: JS Roundabout, Reactivity in React and Vue, February 2018
Publication date: 2018-02-10
Playlist: The JS Roundabout
Description: 
	Edd Yerburgh of the BBC, delivering a talk on the different reactivity systems of React and Vue, and discussing the key differences between the two frameworks.

More about The JS Roundabout: https://www.meetup.com/The-JS-Roundabout/
Captions: 
	00:00:00,000 --> 00:00:04,319
hi guys so tonight I'm going to be

00:00:01,740 --> 00:00:06,330
talking about reactivity in reactive

00:00:04,319 --> 00:00:07,560
view so we're gonna do a sort of

00:00:06,330 --> 00:00:09,870
high-level overview of how the

00:00:07,560 --> 00:00:12,210
frameworks work and how they both

00:00:09,870 --> 00:00:16,139
implement reactivity which is sort of

00:00:12,210 --> 00:00:18,240
the core of the frameworks so my name's

00:00:16,139 --> 00:00:20,910
ed Yarbrough I'm a software engineer at

00:00:18,240 --> 00:00:26,460
the BBC and I've also part of the view

00:00:20,910 --> 00:00:30,570
core team so out of interest who has

00:00:26,460 --> 00:00:32,520
used react before okay yeah okay quite a

00:00:30,570 --> 00:00:35,910
lot of you and who here's use view

00:00:32,520 --> 00:00:38,040
before a not so many of you but still a

00:00:35,910 --> 00:00:39,840
few of you so we're not gonna go over

00:00:38,040 --> 00:00:41,129
like the details of how to use them but

00:00:39,840 --> 00:00:43,860
I'm just going to try and give you a

00:00:41,129 --> 00:00:46,020
high-level overview of how how the

00:00:43,860 --> 00:00:48,510
framework works so from writing your

00:00:46,020 --> 00:00:51,440
component to what happens when a user

00:00:48,510 --> 00:00:54,149
clicks on or interacts with your

00:00:51,440 --> 00:00:58,530
component and how that triggers an

00:00:54,149 --> 00:01:00,420
update in the Dom so viewing reactor

00:00:58,530 --> 00:01:02,579
really similar frameworks they're both

00:01:00,420 --> 00:01:06,830
the view lever the book both the view

00:01:02,579 --> 00:01:08,939
layer so they're sort of the V in MVC

00:01:06,830 --> 00:01:12,390
they both use component based

00:01:08,939 --> 00:01:13,650
architectures so the the sort of

00:01:12,390 --> 00:01:15,960
philosophy is that you use these

00:01:13,650 --> 00:01:18,390
composable components to build up your

00:01:15,960 --> 00:01:21,210
application and they both use the

00:01:18,390 --> 00:01:22,950
virtual Dom which is like a slight

00:01:21,210 --> 00:01:24,479
oversimplification but but basically

00:01:22,950 --> 00:01:27,560
they're both use this thing called

00:01:24,479 --> 00:01:29,909
virtual Dom which we'll talk about later

00:01:27,560 --> 00:01:35,909
the biggest difference between them is

00:01:29,909 --> 00:01:38,549
how they implement reactivity so first

00:01:35,909 --> 00:01:41,880
thing is components so this is a this is

00:01:38,549 --> 00:01:43,530
a view component right it's it's just a

00:01:41,880 --> 00:01:46,970
template and it's going to render a div

00:01:43,530 --> 00:01:51,840
with an h1 tag with the value of zero

00:01:46,970 --> 00:01:54,869
and we can use this component once we've

00:01:51,840 --> 00:01:56,850
registered it in a view app just by if

00:01:54,869 --> 00:02:00,960
you look at the template we can just use

00:01:56,850 --> 00:02:02,640
it like an HTML HTML element so this is

00:02:00,960 --> 00:02:09,959
the sort of the composability

00:02:02,640 --> 00:02:13,530
view under the hood view compiles that

00:02:09,959 --> 00:02:15,480
template string into a render function

00:02:13,530 --> 00:02:17,250
so if you look at that function it's

00:02:15,480 --> 00:02:19,470
quite confusing at first but basically

00:02:17,250 --> 00:02:21,420
we're calling this function called

00:02:19,470 --> 00:02:24,390
creator element and then we're calling

00:02:21,420 --> 00:02:26,580
it with a div and an h1 and the value

00:02:24,390 --> 00:02:29,400
and you can sort of imagine that this is

00:02:26,580 --> 00:02:31,170
like telling the Dom what it should do

00:02:29,400 --> 00:02:33,780
and it's creating these elements and

00:02:31,170 --> 00:02:35,880
then putting them into the document sort

00:02:33,780 --> 00:02:40,470
of like document create element but a

00:02:35,880 --> 00:02:42,090
bit more complex so yeah we need to talk

00:02:40,470 --> 00:02:44,670
about the Dom to talk about these

00:02:42,090 --> 00:02:47,520
frameworks the DOM is a document object

00:02:44,670 --> 00:02:50,220
model so once your HTML is rendered in a

00:02:47,520 --> 00:02:53,040
browser it gets added to the Dom which

00:02:50,220 --> 00:02:55,200
is sort of a list of the interface for

00:02:53,040 --> 00:03:00,750
reacting with a document it's how you

00:02:55,200 --> 00:03:03,120
have reactive web pages so if this is

00:03:00,750 --> 00:03:08,430
the HTML that our component earlier

00:03:03,120 --> 00:03:10,320
would generate the the Dom uses a tree

00:03:08,430 --> 00:03:12,720
data structure so it would take that

00:03:10,320 --> 00:03:15,390
HTML and then render this this tree of

00:03:12,720 --> 00:03:19,410
data where you have the the parent div

00:03:15,390 --> 00:03:22,290
node and then a child h1 node and in the

00:03:19,410 --> 00:03:24,750
Dom a text node is also a node so we

00:03:22,290 --> 00:03:30,030
have that's 0 being the child of the h1

00:03:24,750 --> 00:03:31,950
node so earlier I was saying that you

00:03:30,030 --> 00:03:34,950
could imagine the the render function

00:03:31,950 --> 00:03:37,620
basically just calling document create

00:03:34,950 --> 00:03:39,360
and creating these divs in the Dom but

00:03:37,620 --> 00:03:41,790
the problem with that is it's really

00:03:39,360 --> 00:03:45,690
expensive to update the Dom so if your

00:03:41,790 --> 00:03:47,760
composer application was updating the

00:03:45,690 --> 00:03:49,920
Dom every time some state changed in it

00:03:47,760 --> 00:03:52,320
your your application would seem really

00:03:49,920 --> 00:03:55,680
sluggish to users so we need to be a bit

00:03:52,320 --> 00:03:58,829
smarter about it and that's why this

00:03:55,680 --> 00:04:03,329
thing called the virtual Dom comes in so

00:03:58,829 --> 00:04:04,760
the virtual Dom is exactly the same as

00:04:03,329 --> 00:04:09,390
the Dom it's it's a JavaScript

00:04:04,760 --> 00:04:12,720
representation of the DOM and that might

00:04:09,390 --> 00:04:14,940
not make sense to you it's easier to

00:04:12,720 --> 00:04:17,459
sort of understand it if you think of it

00:04:14,940 --> 00:04:19,709
as literally just an object so this is a

00:04:17,459 --> 00:04:22,890
really simple example of a virtual Dom

00:04:19,709 --> 00:04:25,169
where we're describing the same same

00:04:22,890 --> 00:04:27,120
HTML structure as we were creating

00:04:25,169 --> 00:04:29,850
earlier in our component

00:04:27,120 --> 00:04:34,320
so you have this object we've called it

00:04:29,850 --> 00:04:36,510
Vinodh and each object has a type and a

00:04:34,320 --> 00:04:38,280
children array and inside that children

00:04:36,510 --> 00:04:40,710
array it can have more of the same kind

00:04:38,280 --> 00:04:43,229
of object so that's a really simple

00:04:40,710 --> 00:04:49,919
example with virtual Dom it's just a

00:04:43,229 --> 00:04:51,930
JavaScript object so our template from

00:04:49,919 --> 00:04:54,210
earlier had this render function and I

00:04:51,930 --> 00:04:56,010
said that create element could be almost

00:04:54,210 --> 00:04:58,260
thought of as creating an element in the

00:04:56,010 --> 00:05:05,070
document but what it actually does is it

00:04:58,260 --> 00:05:08,460
generates the virtual Dom so the sort of

00:05:05,070 --> 00:05:10,830
process of application that uses react

00:05:08,460 --> 00:05:14,729
or view is to generate this virtual Dom

00:05:10,830 --> 00:05:19,410
from the components and then update the

00:05:14,729 --> 00:05:22,410
Dom using the virtual Dom so instead of

00:05:19,410 --> 00:05:24,870
just creating a new Dom structure each

00:05:22,410 --> 00:05:27,449
time the each time the applications

00:05:24,870 --> 00:05:31,650
re-rendered it'll at some point call the

00:05:27,449 --> 00:05:34,830
function that sort of diff the virtual

00:05:31,650 --> 00:05:36,180
Dom against the real Dom and only makes

00:05:34,830 --> 00:05:38,280
changes where there's a difference

00:05:36,180 --> 00:05:41,039
between the virtual Dom and the real Dom

00:05:38,280 --> 00:05:43,200
and this way we minimize the amount of

00:05:41,039 --> 00:05:45,599
changes we have to make to the actual

00:05:43,200 --> 00:05:51,419
document which makes our applications a

00:05:45,599 --> 00:05:53,789
lot faster so when you create your your

00:05:51,419 --> 00:05:56,430
application using a component you have

00:05:53,789 --> 00:05:59,820
this initial render where you render the

00:05:56,430 --> 00:06:03,599
virtual Dom and then the applica be the

00:05:59,820 --> 00:06:05,849
reacts or view framework compares your

00:06:03,599 --> 00:06:08,610
virtual Dom to the real Dom and updates

00:06:05,849 --> 00:06:15,479
the real Dom to make it in sync and to

00:06:08,610 --> 00:06:17,780
reflect the virtual Dom so hopefully you

00:06:15,479 --> 00:06:20,460
hit you guys are still following me so

00:06:17,780 --> 00:06:23,630
the virtual Dom is great and we had that

00:06:20,460 --> 00:06:26,490
component that rendered the h1 tag with

00:06:23,630 --> 00:06:28,650
with the zero value inside it but that's

00:06:26,490 --> 00:06:29,760
not really much use alone we want to add

00:06:28,650 --> 00:06:31,860
something we want to add a bit of

00:06:29,760 --> 00:06:36,990
complexity we want to add this thing

00:06:31,860 --> 00:06:39,950
called state so space is a way of

00:06:36,990 --> 00:06:42,650
storing data inside a component

00:06:39,950 --> 00:06:44,900
this is our component from earlier I've

00:06:42,650 --> 00:06:48,830
moved into a view single file component

00:06:44,900 --> 00:06:50,930
format so we have a script block and we

00:06:48,830 --> 00:06:53,600
can extract the template into this

00:06:50,930 --> 00:06:55,640
template block so this is the same

00:06:53,600 --> 00:07:01,970
component and it would render the same

00:06:55,640 --> 00:07:04,100
HTML and now we can add this state so if

00:07:01,970 --> 00:07:06,080
you see in the the object we've added a

00:07:04,100 --> 00:07:08,480
data function and that returns the

00:07:06,080 --> 00:07:11,090
initial state of our component so here

00:07:08,480 --> 00:07:13,460
it's count and count set to zero and

00:07:11,090 --> 00:07:16,250
then inside the template we're going to

00:07:13,460 --> 00:07:18,440
render the count value so at the moment

00:07:16,250 --> 00:07:20,630
this does exactly what our component

00:07:18,440 --> 00:07:23,620
from earlier was doing but it set us up

00:07:20,630 --> 00:07:25,850
to be able to add in some interactivity

00:07:23,620 --> 00:07:27,740
so the next thing to do this is a

00:07:25,850 --> 00:07:30,470
counter component we're going to add in

00:07:27,740 --> 00:07:32,920
a button if you look at that button tag

00:07:30,470 --> 00:07:35,720
you can see that there's a an act click

00:07:32,920 --> 00:07:39,140
property this is basically an on click

00:07:35,720 --> 00:07:41,780
event and it says that when you click on

00:07:39,140 --> 00:07:45,710
the button update the component state

00:07:41,780 --> 00:07:48,500
the components count state by one and by

00:07:45,710 --> 00:07:50,210
doing that because view picks up that

00:07:48,500 --> 00:07:52,790
the state has changed it's going to

00:07:50,210 --> 00:07:55,250
re-render the component rear-ends of the

00:07:52,790 --> 00:08:00,890
virtual dom diff the virtual Dom against

00:07:55,250 --> 00:08:02,810
the real Dom and re-render so this is

00:08:00,890 --> 00:08:07,460
this is an example of the component that

00:08:02,810 --> 00:08:08,780
we've got so far you can see that by

00:08:07,460 --> 00:08:15,710
clicking increment we're incrementing

00:08:08,780 --> 00:08:18,800
this this state so Dom looks a bit more

00:08:15,710 --> 00:08:24,970
complex now we have a button and and an

00:08:18,800 --> 00:08:27,710
h1 tag and they both have text values so

00:08:24,970 --> 00:08:30,170
if we just go back we see that we

00:08:27,710 --> 00:08:34,250
initiate with this this zero value in

00:08:30,170 --> 00:08:37,280
the h1 and then if a user triggers a

00:08:34,250 --> 00:08:40,099
click on the button it's going to update

00:08:37,280 --> 00:08:45,220
the count value which is going to

00:08:40,099 --> 00:08:48,140
trigger a re-render the virtual Dom and

00:08:45,220 --> 00:08:49,820
the virtual Dom is going to update so

00:08:48,140 --> 00:08:53,180
the only difference here is that the h1

00:08:49,820 --> 00:08:53,390
node now has a child node with the value

00:08:53,180 --> 00:08:57,980
of

00:08:53,390 --> 00:09:00,380
one so we have a virtual DOM and a real

00:08:57,980 --> 00:09:04,730
Dom that's out of sync inside this

00:09:00,380 --> 00:09:07,820
update process and what view or all

00:09:04,730 --> 00:09:11,060
react is going to do in simple terms is

00:09:07,820 --> 00:09:13,670
compare each of the nodes it's going to

00:09:11,060 --> 00:09:16,640
loop through this tree structure and

00:09:13,670 --> 00:09:17,930
compare the nodes to each other and when

00:09:16,640 --> 00:09:20,690
there's a difference between the nodes

00:09:17,930 --> 00:09:23,240
so here we've got we're comparing one to

00:09:20,690 --> 00:09:28,670
zero the framework will pick up the

00:09:23,240 --> 00:09:33,200
difference and update the Dom to match

00:09:28,670 --> 00:09:35,480
the virtual Dom's node so that values

00:09:33,200 --> 00:09:38,060
been updated to one and then we'll carry

00:09:35,480 --> 00:09:40,190
on dipping and in this way instead of

00:09:38,060 --> 00:09:43,520
updating the entire tree we've just

00:09:40,190 --> 00:09:46,550
updated one node so that's a factor of

00:09:43,520 --> 00:09:48,020
six times less work already you can

00:09:46,550 --> 00:09:50,240
imagine it in an application that has

00:09:48,020 --> 00:09:57,470
thousands of nodes it makes a real big

00:09:50,240 --> 00:09:59,270
difference so what we were doing we we

00:09:57,470 --> 00:10:02,690
updated the state by clicking on a

00:09:59,270 --> 00:10:05,300
button and then somehow updating that

00:10:02,690 --> 00:10:07,700
state triggered the virtual Dom to be

00:10:05,300 --> 00:10:10,910
rear-ended and then after the virtual

00:10:07,700 --> 00:10:12,710
Dom was rear-ended we updated the Dom by

00:10:10,910 --> 00:10:18,230
comparing the virtual Dom to the real

00:10:12,710 --> 00:10:21,020
Dom so we were looking at view so far

00:10:18,230 --> 00:10:23,900
and we've sort of got all the

00:10:21,020 --> 00:10:26,240
prerequisite knowledge in place let's

00:10:23,900 --> 00:10:28,940
just go through like reacts reactivity

00:10:26,240 --> 00:10:32,810
system because it's a bit simpler to to

00:10:28,940 --> 00:10:35,780
understand and then views so here's the

00:10:32,810 --> 00:10:37,640
same component rewritten with react our

00:10:35,780 --> 00:10:40,340
sort of comment I've commented out the

00:10:37,640 --> 00:10:42,620
constructor and the increment method if

00:10:40,340 --> 00:10:44,780
you look inside the render function we

00:10:42,620 --> 00:10:47,870
have a very similar looking function to

00:10:44,780 --> 00:10:50,840
what we had in view we've got a div we

00:10:47,870 --> 00:10:53,930
have an h1 we're using the state value

00:10:50,840 --> 00:10:56,090
of count inside the h1 and then we have

00:10:53,930 --> 00:10:58,310
a non-quick method on the button that's

00:10:56,090 --> 00:11:00,050
going to call this increment and you can

00:10:58,310 --> 00:11:03,550
imagine that that updates the state and

00:11:00,050 --> 00:11:03,550
then triggers re-render

00:11:05,150 --> 00:11:10,340
so it's worth noting that inside this

00:11:07,820 --> 00:11:12,920
render function you have this stuff that

00:11:10,340 --> 00:11:15,170
looks a bit like HTML this isn't

00:11:12,920 --> 00:11:17,090
actually HTML it's something called JSX

00:11:15,170 --> 00:11:19,070
which needs to be compiled into

00:11:17,090 --> 00:11:22,850
JavaScript before it's run in a browser

00:11:19,070 --> 00:11:23,300
and when you compile it it looks like

00:11:22,850 --> 00:11:25,910
this

00:11:23,300 --> 00:11:28,310
so really similar to our render function

00:11:25,910 --> 00:11:31,460
that we had earlier we have create

00:11:28,310 --> 00:11:34,220
element function calls with the load of

00:11:31,460 --> 00:11:40,460
arguments that's ultimately describing

00:11:34,220 --> 00:11:42,620
how to create the virtual Dom so this is

00:11:40,460 --> 00:11:44,360
the you can see here the constructor

00:11:42,620 --> 00:11:46,490
where we set our initial States for the

00:11:44,360 --> 00:11:50,510
component and then we have the increment

00:11:46,490 --> 00:11:54,350
method where we call this set state so

00:11:50,510 --> 00:12:00,290
this set state is the key to reactivity

00:11:54,350 --> 00:12:03,080
in react once we call this set state it

00:12:00,290 --> 00:12:04,880
tells react that the state is updated

00:12:03,080 --> 00:12:06,500
and reacts going to go through the

00:12:04,880 --> 00:12:08,900
entire render process it's going to

00:12:06,500 --> 00:12:10,730
update the Dom the virtual Dom by

00:12:08,900 --> 00:12:15,200
calling render then it's going to diff

00:12:10,730 --> 00:12:16,960
against the real Dom and update yet and

00:12:15,200 --> 00:12:24,230
update the Dom so that we have a

00:12:16,960 --> 00:12:26,750
reactive application so that's react I

00:12:24,230 --> 00:12:29,120
think the main takeaway is that reacts

00:12:26,750 --> 00:12:31,220
reactivity system is more of it's a pool

00:12:29,120 --> 00:12:34,040
reactivity system so you need to give it

00:12:31,220 --> 00:12:35,570
an explicit signal to update otherwise

00:12:34,040 --> 00:12:37,640
your component isn't going to do

00:12:35,570 --> 00:12:40,070
anything so changing the state without

00:12:37,640 --> 00:12:42,530
calling this set of states or another

00:12:40,070 --> 00:12:44,780
method that tells react explicitly that

00:12:42,530 --> 00:12:47,570
needs to re-render and go through the

00:12:44,780 --> 00:12:52,750
rendering process again if you don't do

00:12:47,570 --> 00:12:55,400
that react isn't going to be reactive so

00:12:52,750 --> 00:12:58,280
if we look at view views a little bit

00:12:55,400 --> 00:13:00,650
simpler to look at so in our in our

00:12:58,280 --> 00:13:02,360
component earlier when we were updating

00:13:00,650 --> 00:13:07,250
the count we literally just had this

00:13:02,360 --> 00:13:09,260
count increment value which seemed

00:13:07,250 --> 00:13:11,950
really simple on the surface until you

00:13:09,260 --> 00:13:14,360
start think about how calling

00:13:11,950 --> 00:13:17,410
incrementing count triggers the whole

00:13:14,360 --> 00:13:17,410
rerender process

00:13:17,779 --> 00:13:25,649
so to explain how view knows that

00:13:22,220 --> 00:13:27,299
updating a property is going to need to

00:13:25,649 --> 00:13:30,019
trigger a rerender of the component you

00:13:27,299 --> 00:13:32,819
need to understand setters and getters

00:13:30,019 --> 00:13:35,040
just hands up who's heard of setters and

00:13:32,819 --> 00:13:37,489
getters before ok cool pretty much

00:13:35,040 --> 00:13:40,109
everyone that makes it a lot easier so

00:13:37,489 --> 00:13:43,319
so basically setters and getters are a

00:13:40,109 --> 00:13:46,160
way for us to proxy functions to be

00:13:43,319 --> 00:13:48,540
cooled instead of the default behavior

00:13:46,160 --> 00:13:50,730
so if you look in this example we've

00:13:48,540 --> 00:13:54,779
we've got this state object and we've

00:13:50,730 --> 00:13:58,709
added a setter for a so when we call a

00:13:54,779 --> 00:14:01,109
with a new value it's going to set the a

00:13:58,709 --> 00:14:02,939
that we have outside of the state it's

00:14:01,109 --> 00:14:04,980
going to update that and then it will

00:14:02,939 --> 00:14:10,049
console.log that we set a with the new

00:14:04,980 --> 00:14:13,919
value and then we can add a getter as

00:14:10,049 --> 00:14:17,009
well that's just going to log that you

00:14:13,919 --> 00:14:28,290
called get a when the component chose to

00:14:17,009 --> 00:14:31,379
get that value so so basically what view

00:14:28,290 --> 00:14:33,720
does to add reactivity is it steps

00:14:31,379 --> 00:14:36,029
through a component and it finds every

00:14:33,720 --> 00:14:38,309
single reactive property and adds it as

00:14:36,029 --> 00:14:42,600
a getter and a setter to the component

00:14:38,309 --> 00:14:45,119
and then it keeps track of so doing this

00:14:42,600 --> 00:14:47,850
it keeps track of what properties are

00:14:45,119 --> 00:14:50,399
reactive and what property is changing

00:14:47,850 --> 00:14:52,709
and being set need to trigger the

00:14:50,399 --> 00:14:56,459
component to re-render so earlier we had

00:14:52,709 --> 00:14:58,589
our counter account property when we

00:14:56,459 --> 00:15:00,419
originally instantiated the component

00:14:58,589 --> 00:15:01,949
for you we'll have made a setter and a

00:15:00,419 --> 00:15:04,799
getter for that count property and

00:15:01,949 --> 00:15:06,809
therefore triggering it updating the

00:15:04,799 --> 00:15:09,749
value changing the value later will

00:15:06,809 --> 00:15:13,679
cause a the whole component to go

00:15:09,749 --> 00:15:15,209
through the rerender process so actually

00:15:13,679 --> 00:15:18,629
I've just realized that I deleted a

00:15:15,209 --> 00:15:23,489
slide that explains the process a bit

00:15:18,629 --> 00:15:28,889
better but this is this is the last

00:15:23,489 --> 00:15:29,999
slide that sort of shows how I don't

00:15:28,889 --> 00:15:30,720
know if this makes much sense if you

00:15:29,999 --> 00:15:36,540
haven't seen the

00:15:30,720 --> 00:15:37,529
previous example but basically that's

00:15:36,540 --> 00:15:40,050
the in and out of it

00:15:37,529 --> 00:15:42,000
view walks through a component crate

00:15:40,050 --> 00:15:44,519
setters and getters and then by doing

00:15:42,000 --> 00:15:46,769
this can track what components need to

00:15:44,519 --> 00:15:51,600
re-render depending on what value has

00:15:46,769 --> 00:15:53,579
been updated so yeah thanks guys that

00:15:51,600 --> 00:15:57,209
was like a really high level overview so

00:15:53,579 --> 00:15:58,800
the question was in the dipping process

00:15:57,209 --> 00:16:00,389
do we actually go through every single

00:15:58,800 --> 00:16:02,910
node and compare it to the node in the

00:16:00,389 --> 00:16:04,889
DOM and yeah like you suggested that

00:16:02,910 --> 00:16:06,810
would be monstrously inefficient so

00:16:04,889 --> 00:16:08,850
that's not how it works it's actually a

00:16:06,810 --> 00:16:12,000
lot more complex and I don't think I

00:16:08,850 --> 00:16:13,470
have the explanatory powers to to give

00:16:12,000 --> 00:16:15,839
you a good explanation of how that

00:16:13,470 --> 00:16:18,329
happens it's very different in reactive

00:16:15,839 --> 00:16:21,240
view they both have different patching

00:16:18,329 --> 00:16:24,329
algorithms which diff at the virtual Dom

00:16:21,240 --> 00:16:25,889
and the real Dom but yeah there there is

00:16:24,329 --> 00:16:27,629
some trade-offs and some assumptions

00:16:25,889 --> 00:16:31,930
that both the make that make it a more

00:16:27,629 --> 00:16:38,940
efficient process cool thanks guys

00:16:31,930 --> 00:16:38,940

YouTube URL: https://www.youtube.com/watch?v=HWZq_rlJU4o


