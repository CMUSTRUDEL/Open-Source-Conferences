Title: Let's  Get Thunk-y - JS Roundabout - May 2018
Publication date: 2018-05-11
Playlist: The JS Roundabout
Description: 
	Phoebe Greig discusses the benefits of using Redux to manage API calls, with a practical walkthrough of managing API calls with Redux, using thunk middleware.
Captions: 
	00:00:00,000 --> 00:00:06,150
hi yes I'm Phoebe I'm from the BBC and

00:00:03,380 --> 00:00:10,320
software engineer there a bit about me

00:00:06,150 --> 00:00:13,920
the team I work in we build the tools

00:00:10,320 --> 00:00:16,379
for BBC journalists across the world so

00:00:13,920 --> 00:00:18,449
their content sort of management as well

00:00:16,379 --> 00:00:20,460
as I'm building the actual api's that

00:00:18,449 --> 00:00:24,630
serve the websites and the apps that are

00:00:20,460 --> 00:00:26,970
see or accustomed with with the BBC I'm

00:00:24,630 --> 00:00:30,929
also a director of lesbians who tech

00:00:26,970 --> 00:00:34,320
London which is a organisation for LGBTQ

00:00:30,929 --> 00:00:36,660
plus women and non-binary people as well

00:00:34,320 --> 00:00:37,950
as allies so if anyone's interested at

00:00:36,660 --> 00:00:40,530
all or want to know more about that

00:00:37,950 --> 00:00:43,920
coming over and there ask me a bit about

00:00:40,530 --> 00:00:47,129
that later so it's called let's get

00:00:43,920 --> 00:00:50,280
funky I just couldn't resist it's not

00:00:47,129 --> 00:00:52,620
really that much about thunk I just

00:00:50,280 --> 00:00:54,899
thought it was a fabulous name so what

00:00:52,620 --> 00:00:58,649
is it going to be about them so we will

00:00:54,899 --> 00:01:01,680
be covering bunk what it's about is I

00:00:58,649 --> 00:01:05,630
want to get people beyond the step of

00:01:01,680 --> 00:01:08,310
just hello world applications nowadays

00:01:05,630 --> 00:01:11,270
they're getting much more complicated

00:01:08,310 --> 00:01:13,170
you're dealing with more and more data

00:01:11,270 --> 00:01:17,250
it's becoming an issue for some

00:01:13,170 --> 00:01:18,689
companies so I thought I'll give a brief

00:01:17,250 --> 00:01:24,119
overview for the people who aren't

00:01:18,689 --> 00:01:27,299
familiar with redux so what is redux it

00:01:24,119 --> 00:01:29,220
manages the application states and why

00:01:27,299 --> 00:01:32,759
is this becoming more and more important

00:01:29,220 --> 00:01:35,490
so as single page applications sort of

00:01:32,759 --> 00:01:38,670
on the whys more and more companies are

00:01:35,490 --> 00:01:42,060
using them the code must manage its own

00:01:38,670 --> 00:01:43,590
state and you know you have so many

00:01:42,060 --> 00:01:47,490
different things going on you've got

00:01:43,590 --> 00:01:49,619
maybe pagination you have the sort of

00:01:47,490 --> 00:01:51,720
app updating itself and you've got this

00:01:49,619 --> 00:01:53,549
you know local data maybe you have them

00:01:51,720 --> 00:01:55,590
spinners there's all these different

00:01:53,549 --> 00:01:58,409
things going on in your single page app

00:01:55,590 --> 00:02:00,240
and how can you manage all of them how

00:01:58,409 --> 00:02:03,090
can you keep track of all of them

00:02:00,240 --> 00:02:05,520
especially if one sort of action leads

00:02:03,090 --> 00:02:10,580
on to another and that's what Redux

00:02:05,520 --> 00:02:14,920
ultimately solves so

00:02:10,580 --> 00:02:19,630
I have for today created a very simple

00:02:14,920 --> 00:02:24,590
app and of course it is called

00:02:19,630 --> 00:02:26,690
let's get to it let's get funky so let's

00:02:24,590 --> 00:02:28,850
get funky so I thought this would be a

00:02:26,690 --> 00:02:30,830
good basic introduction for people who

00:02:28,850 --> 00:02:34,310
aren't familiar with redux for the next

00:02:30,830 --> 00:02:37,700
talk so what do we have here we have a

00:02:34,310 --> 00:02:42,080
basic input and what this is doing I've

00:02:37,700 --> 00:02:44,600
hooked up to an API endpoint an external

00:02:42,080 --> 00:02:47,300
API service called musiXmatch

00:02:44,600 --> 00:02:50,510
where you can search by artists name or

00:02:47,300 --> 00:02:52,130
lyrics or anything like that and what

00:02:50,510 --> 00:02:54,709
this is going to be doing is every time

00:02:52,130 --> 00:02:57,350
I type a letter in that box in that

00:02:54,709 --> 00:03:00,110
input it's going to make a request to

00:02:57,350 --> 00:03:01,820
that API endpoint and hopefully if all

00:03:00,110 --> 00:03:04,130
things work out well you'll then get a

00:03:01,820 --> 00:03:07,760
list of those results so if I type in

00:03:04,130 --> 00:03:10,880
hey and you can see though we've got the

00:03:07,760 --> 00:03:15,800
loader and now we've got our results and

00:03:10,880 --> 00:03:17,360
all of this is being managed by redux so

00:03:15,800 --> 00:03:23,570
this is the example that I'm going to be

00:03:17,360 --> 00:03:26,660
going through today with you all so what

00:03:23,570 --> 00:03:29,870
did we just see we saw the fetching and

00:03:26,660 --> 00:03:33,070
that was the loader we saw the success

00:03:29,870 --> 00:03:35,750
which was the lovely list of results and

00:03:33,070 --> 00:03:37,760
luckily for me no failure so we didn't

00:03:35,750 --> 00:03:39,980
get an error message but these are all

00:03:37,760 --> 00:03:42,920
the things that you would want to either

00:03:39,980 --> 00:03:45,800
show to the user or maybe especially

00:03:42,920 --> 00:03:48,890
with failures you'll mainly want to log

00:03:45,800 --> 00:03:52,160
it for yourself as a software engineer

00:03:48,890 --> 00:03:56,540
to track why has it failed or maybe you

00:03:52,160 --> 00:03:58,519
have a requirement for audits and again

00:03:56,540 --> 00:04:00,410
you want to log all of these different

00:03:58,519 --> 00:04:03,320
states all of these different actions to

00:04:00,410 --> 00:04:08,750
check the process so all of this we're

00:04:03,320 --> 00:04:10,760
going to be going through so a basic

00:04:08,750 --> 00:04:13,430
overflow of Redux Before we jump in with

00:04:10,760 --> 00:04:17,030
the different sort of areas of sort of

00:04:13,430 --> 00:04:20,299
what makes up the uggs so Redux is a

00:04:17,030 --> 00:04:22,700
state management and thus you store the

00:04:20,299 --> 00:04:24,890
state in the store

00:04:22,700 --> 00:04:28,370
you have the store you're Holtz estate

00:04:24,890 --> 00:04:31,280
I'm my app I've chosen react you don't

00:04:28,370 --> 00:04:33,230
have to do it with react but in this

00:04:31,280 --> 00:04:35,870
scenario how it works is you have your

00:04:33,230 --> 00:04:38,690
react components you have your state in

00:04:35,870 --> 00:04:42,340
the store the state then you pass it

00:04:38,690 --> 00:04:45,740
down to the components as props and then

00:04:42,340 --> 00:04:48,320
there are two ways there are two ways

00:04:45,740 --> 00:04:50,480
that you can interact with the store one

00:04:48,320 --> 00:04:51,920
is just weeding the state so that's

00:04:50,480 --> 00:04:54,710
passing it in as props

00:04:51,920 --> 00:04:56,540
the other one is dispatching actions and

00:04:54,710 --> 00:04:58,610
all these terms are coming to you later

00:04:56,540 --> 00:05:02,000
if you're not familiar with them so

00:04:58,610 --> 00:05:04,610
components can dispatch action creators

00:05:02,000 --> 00:05:06,440
ultimately actions and then these

00:05:04,610 --> 00:05:09,650
actions which are playing JavaScript

00:05:06,440 --> 00:05:13,310
objects are passed into reduces which in

00:05:09,650 --> 00:05:16,040
turn updates the state which will then

00:05:13,310 --> 00:05:17,990
make the component we render as that may

00:05:16,040 --> 00:05:20,300
be bitter the state has passed to that

00:05:17,990 --> 00:05:22,220
component so if that doesn't all make

00:05:20,300 --> 00:05:23,990
quite you know clear sense to you we're

00:05:22,220 --> 00:05:29,060
gonna be working through all the

00:05:23,990 --> 00:05:31,490
different stages now so synchronous

00:05:29,060 --> 00:05:33,260
action craters most people if you had

00:05:31,490 --> 00:05:37,670
maybe a little glimpse into the redux

00:05:33,260 --> 00:05:39,770
world you'll be familiar with actions so

00:05:37,670 --> 00:05:42,650
that's in the white there that plain

00:05:39,770 --> 00:05:45,890
JavaScript object and you can see here

00:05:42,650 --> 00:05:48,620
the action type is add track if you're

00:05:45,890 --> 00:05:50,990
not familiar with es6 notation that's

00:05:48,620 --> 00:05:53,630
just saying for track the key is track

00:05:50,990 --> 00:05:55,880
and the value is also track which is the

00:05:53,630 --> 00:05:59,120
parameter that's being passed in so all

00:05:55,880 --> 00:06:01,250
it is an action creator wraps an action

00:05:59,120 --> 00:06:05,680
it's just a function that returns in

00:06:01,250 --> 00:06:10,070
action and this is a pure function so

00:06:05,680 --> 00:06:12,560
you can pass in any string in there so

00:06:10,070 --> 00:06:16,430
that this would be an example of typing

00:06:12,560 --> 00:06:19,250
in hey there as a song maybe and you're

00:06:16,430 --> 00:06:23,450
always going to get the same output so

00:06:19,250 --> 00:06:26,870
in the example that we looked at that I

00:06:23,450 --> 00:06:28,490
showed you let's get funky there was a

00:06:26,870 --> 00:06:32,900
couple of things that was going on there

00:06:28,490 --> 00:06:34,010
we had fetching so as an action what

00:06:32,900 --> 00:06:36,440
would you want to know you'd want to

00:06:34,010 --> 00:06:39,080
know okay we're about to you know

00:06:36,440 --> 00:06:41,450
get those tracks you then want to know

00:06:39,080 --> 00:06:44,930
when you've got the track so get track

00:06:41,450 --> 00:06:47,030
success and then sadly you also want to

00:06:44,930 --> 00:06:51,050
know when there's been a failure so

00:06:47,030 --> 00:06:54,560
let's have a quick look at that code so

00:06:51,050 --> 00:06:57,650
you can see here in my file structure I

00:06:54,560 --> 00:06:59,660
have a folder called actions and we have

00:06:57,650 --> 00:07:03,890
I've created a file called fetch tracked

00:06:59,660 --> 00:07:06,260
status so these are all synchronous

00:07:03,890 --> 00:07:08,930
action creators so you can see I'll

00:07:06,260 --> 00:07:10,820
start get tracks and that very simply

00:07:08,930 --> 00:07:13,550
it's just we don't need to know anything

00:07:10,820 --> 00:07:17,000
other than this action has occurred and

00:07:13,550 --> 00:07:20,150
that action is type get tracks we then

00:07:17,000 --> 00:07:23,720
have get track success again returning

00:07:20,150 --> 00:07:26,840
that object with the tracks as an

00:07:23,720 --> 00:07:29,630
additional key to the type which is get

00:07:26,840 --> 00:07:32,210
track success and then finally get

00:07:29,630 --> 00:07:34,880
tracks failure again just to highlight

00:07:32,210 --> 00:07:36,860
the es6 their notation difference you

00:07:34,880 --> 00:07:41,930
could rewrite error like you did tracks

00:07:36,860 --> 00:07:47,360
and vice versa so that's our synchronous

00:07:41,930 --> 00:07:50,570
action creators and now it's time for

00:07:47,360 --> 00:07:52,310
the asynchronous action creators so this

00:07:50,570 --> 00:07:55,460
is when you're you know making those

00:07:52,310 --> 00:07:58,010
calls to external services or maybe

00:07:55,460 --> 00:08:00,260
you've got a node back-end hooked up to

00:07:58,010 --> 00:08:03,410
a database this is when this is going to

00:08:00,260 --> 00:08:05,660
come into play so I typically like to

00:08:03,410 --> 00:08:08,090
define the actual call that I'm going to

00:08:05,660 --> 00:08:10,520
make the request I'm going to make in a

00:08:08,090 --> 00:08:12,950
separate file in a separate folder we

00:08:10,520 --> 00:08:13,900
even fetch tracks by so let's have a

00:08:12,950 --> 00:08:17,780
look at that

00:08:13,900 --> 00:08:22,240
so we scroll down to services fetch

00:08:17,780 --> 00:08:26,600
tracks here we go so you can see here

00:08:22,240 --> 00:08:29,030
we're just making a simple request to

00:08:26,600 --> 00:08:31,850
that endpoint musiXmatch and then if

00:08:29,030 --> 00:08:33,710
it's all good hunky-dory we just grab

00:08:31,850 --> 00:08:37,370
that tracks list which is the array of

00:08:33,710 --> 00:08:39,650
all the songs artists and we return it

00:08:37,370 --> 00:08:41,330
and the reason why it's good to extract

00:08:39,650 --> 00:08:43,789
it into sort of a separate file into a

00:08:41,330 --> 00:08:46,339
separate function is if you do want to

00:08:43,789 --> 00:08:49,790
do say server-side rendering and you

00:08:46,339 --> 00:08:50,209
want to create your store so on that

00:08:49,790 --> 00:08:52,519
initial

00:08:50,209 --> 00:08:55,160
you want it to have this initial data

00:08:52,519 --> 00:08:57,350
from this API endpoint you can just

00:08:55,160 --> 00:08:58,939
reuse this function rather than having

00:08:57,350 --> 00:09:01,790
to rewrite it all over again

00:08:58,939 --> 00:09:04,999
so I find it quite more efficient to

00:09:01,790 --> 00:09:07,309
extract it into a separator function so

00:09:04,999 --> 00:09:10,100
we have now I defined cool that we're

00:09:07,309 --> 00:09:13,240
going to make now it's time to actually

00:09:10,100 --> 00:09:20,089
create our asynchronous action creator

00:09:13,240 --> 00:09:22,339
so it is going to be this the job of

00:09:20,089 --> 00:09:24,350
this asynchronous action creator to

00:09:22,339 --> 00:09:27,499
actually call those actions those

00:09:24,350 --> 00:09:30,230
synchronous actions action creators that

00:09:27,499 --> 00:09:32,689
we saw earlier so what is happening here

00:09:30,230 --> 00:09:35,689
so you can see the other ones returned

00:09:32,689 --> 00:09:37,490
playing JavaScript objects whereas here

00:09:35,689 --> 00:09:39,619
you're returning in fact another

00:09:37,490 --> 00:09:42,499
function which you're passing the

00:09:39,619 --> 00:09:46,009
dispatch method so just to quickly walk

00:09:42,499 --> 00:09:48,980
you through it you have the fetch Trax

00:09:46,009 --> 00:09:52,100
method and this is the fetch Trax

00:09:48,980 --> 00:09:53,720
asynchronous action creator you then

00:09:52,100 --> 00:09:56,269
inside it what's actually being turned

00:09:53,720 --> 00:09:58,720
now is a function and when this function

00:09:56,269 --> 00:10:01,879
is called we're first going to dispatch

00:09:58,720 --> 00:10:04,160
start get Trax make sense we're just

00:10:01,879 --> 00:10:05,299
about to make this call and now we're

00:10:04,160 --> 00:10:08,480
going to make that call with the

00:10:05,299 --> 00:10:11,240
function we just created if it's so

00:10:08,480 --> 00:10:14,600
great then we can return it and we're

00:10:11,240 --> 00:10:17,389
going to dispatch get track success if

00:10:14,600 --> 00:10:19,839
it's been a little bit less so we're

00:10:17,389 --> 00:10:22,459
going to the catch and we'll want to

00:10:19,839 --> 00:10:24,949
dispatch get Trax failure with that

00:10:22,459 --> 00:10:26,240
error message and again thinking about

00:10:24,949 --> 00:10:28,519
maybe what would you want to do with

00:10:26,240 --> 00:10:34,549
that would you want to log it to look

00:10:28,519 --> 00:10:37,579
into it later so we've got now our

00:10:34,549 --> 00:10:39,529
asynchronous action crater so just to

00:10:37,579 --> 00:10:40,809
hammer home the difference between the

00:10:39,529 --> 00:10:44,029
two

00:10:40,809 --> 00:10:47,240
synchronous action creators return plain

00:10:44,029 --> 00:10:49,040
JavaScript objects they're pure

00:10:47,240 --> 00:10:51,920
functions and though what they're

00:10:49,040 --> 00:10:54,350
returning are actions whereas

00:10:51,920 --> 00:10:56,299
asynchronous action creators can return

00:10:54,350 --> 00:10:59,240
more complicated things such as

00:10:56,299 --> 00:11:03,720
functions and promises and it's right

00:10:59,240 --> 00:11:07,139
here where you have your problem so what

00:11:03,720 --> 00:11:09,990
that problem the problem is the stores

00:11:07,139 --> 00:11:12,120
dispatch method only knows how to

00:11:09,990 --> 00:11:14,970
dispatch actions so only knows how to

00:11:12,120 --> 00:11:21,089
handle how to process vanilla JavaScript

00:11:14,970 --> 00:11:22,500
objects so finally we can get a little

00:11:21,089 --> 00:11:26,310
bit funky oh yeah

00:11:22,500 --> 00:11:31,350
so we dog spunk to the rescue comes in

00:11:26,310 --> 00:11:32,610
and let's have a look at that so what is

00:11:31,350 --> 00:11:37,889
redux monk

00:11:32,610 --> 00:11:41,279
it is a middleware it's a middleware for

00:11:37,889 --> 00:11:43,500
redux it's an NPM package so how this

00:11:41,279 --> 00:11:45,569
middleware works compared to maybe what

00:11:43,500 --> 00:11:51,230
you're accustomed to in sort of Express

00:11:45,569 --> 00:11:55,860
or libraries like that is this function

00:11:51,230 --> 00:11:58,319
is when it's invoked after an action has

00:11:55,860 --> 00:11:59,850
been dispatched but before the reducer

00:11:58,319 --> 00:12:03,209
is caught so if you remember that first

00:11:59,850 --> 00:12:06,870
diagram that we saw when an action is

00:12:03,209 --> 00:12:09,689
dispatched the return it returns well it

00:12:06,870 --> 00:12:11,459
returns the action and then that action

00:12:09,689 --> 00:12:15,600
is passed into the reducer which is

00:12:11,459 --> 00:12:17,670
called and what this does it intervenes

00:12:15,600 --> 00:12:21,329
just at that point just before you call

00:12:17,670 --> 00:12:25,980
the reducer to handle well the

00:12:21,329 --> 00:12:29,910
functional promise so let's have a look

00:12:25,980 --> 00:12:31,559
at redux thunk so I often got quite

00:12:29,910 --> 00:12:33,540
intimidated when I first started out

00:12:31,559 --> 00:12:37,709
looking at middleware it seemed quite

00:12:33,540 --> 00:12:39,600
scary but actually what we dog hunk is

00:12:37,709 --> 00:12:42,079
doing this is just this is pretty much

00:12:39,600 --> 00:12:46,860
it it's not more complicated than this

00:12:42,079 --> 00:12:48,569
so what is happening here so we rocks

00:12:46,860 --> 00:12:50,699
thunk the middleware it gets past the

00:12:48,569 --> 00:12:53,129
store and it gets past the store because

00:12:50,699 --> 00:12:57,059
it needs the dispatch method and it

00:12:53,129 --> 00:12:59,490
needs to get state method and then it

00:12:57,059 --> 00:13:03,089
calls the function and passes in next

00:12:59,490 --> 00:13:07,379
and then it cool passes in action to the

00:13:03,089 --> 00:13:09,209
last function and this action in the

00:13:07,379 --> 00:13:13,319
synchronous world are just JavaScript

00:13:09,209 --> 00:13:16,620
objects but in our asynchronous action

00:13:13,319 --> 00:13:17,370
creator it is now a function so we'll go

00:13:16,620 --> 00:13:19,920
into the

00:13:17,370 --> 00:13:23,339
it'll return true and then it'll be

00:13:19,920 --> 00:13:26,900
action store dispatch store get States

00:13:23,339 --> 00:13:31,850
so if we have another look at our code

00:13:26,900 --> 00:13:36,510
this is the action that's being returned

00:13:31,850 --> 00:13:40,260
so then it is this action where we've

00:13:36,510 --> 00:13:44,640
passed in The Dispatch as you can see

00:13:40,260 --> 00:13:46,440
here store dispatch and if not if it's

00:13:44,640 --> 00:13:47,010
not a function it's just your Bob's your

00:13:46,440 --> 00:13:50,339
uncle

00:13:47,010 --> 00:13:52,380
action javascript object you call next

00:13:50,339 --> 00:13:56,490
action it continues on its merry little

00:13:52,380 --> 00:14:02,339
way so that is really all we duck trunk

00:13:56,490 --> 00:14:04,170
is doing so again just to sort of

00:14:02,339 --> 00:14:05,690
visualize where it's coming in where

00:14:04,170 --> 00:14:09,050
it's coming into play

00:14:05,690 --> 00:14:11,339
you have your components which dispatch

00:14:09,050 --> 00:14:13,890
action creatives for typically action

00:14:11,339 --> 00:14:16,320
creators they end up returning actions

00:14:13,890 --> 00:14:17,400
so dispatch actions and it's right there

00:14:16,320 --> 00:14:19,890
that thunk intervenes

00:14:17,400 --> 00:14:23,550
it says hang on what are we returning

00:14:19,890 --> 00:14:27,330
and it knows how to handle functions and

00:14:23,550 --> 00:14:29,190
promises so we look to actions I'm going

00:14:27,330 --> 00:14:32,430
to get to how we bring this into the app

00:14:29,190 --> 00:14:34,500
a little bit later on so don't worry so

00:14:32,430 --> 00:14:36,810
yeah we've looked at actions I think

00:14:34,500 --> 00:14:42,600
it's time now to look at the next step

00:14:36,810 --> 00:14:45,029
in our journey the reducers so they'll

00:14:42,600 --> 00:14:47,520
probably be familiar with route reducers

00:14:45,029 --> 00:14:49,589
or just having one large reducer I'm

00:14:47,520 --> 00:14:53,550
typically more of a fan of creating a

00:14:49,589 --> 00:14:55,680
slice reducer functions and each slice

00:14:53,550 --> 00:14:59,250
is responsible for updating just its own

00:14:55,680 --> 00:15:02,339
little part of the state and what I like

00:14:59,250 --> 00:15:04,560
about this is you can often extract them

00:15:02,339 --> 00:15:07,110
out into maybe different files or

00:15:04,560 --> 00:15:08,640
clearly different functions so when

00:15:07,110 --> 00:15:10,500
working in large teams you're less

00:15:08,640 --> 00:15:13,170
likely to sort of be treading on each

00:15:10,500 --> 00:15:16,279
other's toes which I find quite useful

00:15:13,170 --> 00:15:18,870
as well as it's for me I find it quite

00:15:16,279 --> 00:15:22,980
it's quite more readable and easier to

00:15:18,870 --> 00:15:27,600
follow so in the context of this app

00:15:22,980 --> 00:15:30,960
that we've got what are the reducers so

00:15:27,600 --> 00:15:34,380
the reducers job is to update the state

00:15:30,960 --> 00:15:39,210
so a slice reducer is to update just a

00:15:34,380 --> 00:15:42,330
little bit of the state so thinking

00:15:39,210 --> 00:15:44,520
about our app we have is fetching tracks

00:15:42,330 --> 00:15:47,550
that that makes sense if it is fetching

00:15:44,520 --> 00:15:49,440
tracks show this loader we also have

00:15:47,550 --> 00:15:51,720
tracks yeah we've got some tracks

00:15:49,440 --> 00:15:55,529
display it and again that I'm not going

00:15:51,720 --> 00:15:57,779
to swerve extracts failure show the

00:15:55,529 --> 00:16:00,540
error or maybe log the error whatever

00:15:57,779 --> 00:16:03,380
you want to do so let's have a look at

00:16:00,540 --> 00:16:03,380
that code

00:16:04,580 --> 00:16:15,420
so in our reducers folder let's first

00:16:10,380 --> 00:16:16,980
look at is fetching tracks so we have is

00:16:15,420 --> 00:16:20,399
fetching track so this is our first

00:16:16,980 --> 00:16:22,649
slice producer and I want to point out

00:16:20,399 --> 00:16:25,230
that you don't need to have a default

00:16:22,649 --> 00:16:26,450
here so you can see if state is

00:16:25,230 --> 00:16:29,760
undefined

00:16:26,450 --> 00:16:32,040
the default for is fetching tracks will

00:16:29,760 --> 00:16:33,870
be false there is another way to do it

00:16:32,040 --> 00:16:36,720
where you can when you create the store

00:16:33,870 --> 00:16:39,900
just pass in the initial state but I've

00:16:36,720 --> 00:16:41,640
chosen to do it this way so inspecting

00:16:39,900 --> 00:16:43,890
tracks what's happening here so an

00:16:41,640 --> 00:16:47,520
action has been dispatched it's returned

00:16:43,890 --> 00:16:49,230
this action which triggers the route

00:16:47,520 --> 00:16:51,360
would do so which will contain all of

00:16:49,230 --> 00:16:53,100
these sliced reducers and each one of

00:16:51,360 --> 00:16:56,730
these slicer juicers are going to be

00:16:53,100 --> 00:17:00,270
cooled so this is called we have the

00:16:56,730 --> 00:17:04,740
state and we have our action so let's

00:17:00,270 --> 00:17:06,839
say the action was get tracks well we

00:17:04,740 --> 00:17:10,050
want to turn changes vetting tracks to

00:17:06,839 --> 00:17:11,490
true and if it's get tracks success or

00:17:10,050 --> 00:17:13,530
guess tracks failure well we've got our

00:17:11,490 --> 00:17:15,990
tracks that stop it it's so good

00:17:13,530 --> 00:17:18,120
inspecting tracks is now false and if

00:17:15,990 --> 00:17:20,670
it's none of those actions because you

00:17:18,120 --> 00:17:22,140
could have hundreds of actions just

00:17:20,670 --> 00:17:23,390
returned the state don't do anything

00:17:22,140 --> 00:17:29,250
this is none of your business

00:17:23,390 --> 00:17:33,480
so that's inspecting tracks then we have

00:17:29,250 --> 00:17:37,320
our tracks and again on the initial load

00:17:33,480 --> 00:17:40,350
we don't have any tracks but let's have

00:17:37,320 --> 00:17:42,750
an empty away as our initial State so

00:17:40,350 --> 00:17:44,970
that's our initial State for tracks and

00:17:42,750 --> 00:17:47,100
again all we care about is

00:17:44,970 --> 00:17:49,590
if it's been successful only then will

00:17:47,100 --> 00:17:56,010
we get our tracks yeah oh I've just

00:17:49,590 --> 00:18:00,539
returned the state and finally we have

00:17:56,010 --> 00:18:02,130
fetch tracks failure so again only time

00:18:00,539 --> 00:18:03,659
this is going to be called or the only

00:18:02,130 --> 00:18:05,159
time that we actually want to update it

00:18:03,659 --> 00:18:07,940
is when the action that's been

00:18:05,159 --> 00:18:12,200
dispatched is get tracks failure

00:18:07,940 --> 00:18:14,760
otherwise just return the state I

00:18:12,200 --> 00:18:16,350
probably got a bit extreme with the

00:18:14,760 --> 00:18:18,270
extracting of all these functions into

00:18:16,350 --> 00:18:22,010
different files but it's just to give

00:18:18,270 --> 00:18:27,780
you an idea of you power how it works

00:18:22,010 --> 00:18:30,720
so just to reiterate that so you

00:18:27,780 --> 00:18:33,330
dispatch the action which calls the

00:18:30,720 --> 00:18:35,789
route reducer and then underneath what's

00:18:33,330 --> 00:18:37,710
going on is each of these reducer

00:18:35,789 --> 00:18:41,070
functions slice producer functions that

00:18:37,710 --> 00:18:42,960
you've seen gets cooled and then the

00:18:41,070 --> 00:18:45,510
outcome what's returned by all of them

00:18:42,960 --> 00:18:49,110
is then we joined into a single state

00:18:45,510 --> 00:18:54,950
and ultimately the state is updated in

00:18:49,110 --> 00:18:58,110
the store so we've got all these

00:18:54,950 --> 00:19:01,799
individual slice reducers but we need to

00:18:58,110 --> 00:19:05,549
create this one large gangster reducer

00:19:01,799 --> 00:19:07,650
so one way of doing it is using this

00:19:05,549 --> 00:19:11,880
handy Redux method called combined

00:19:07,650 --> 00:19:13,620
reducers and yep it does just that and

00:19:11,880 --> 00:19:17,730
it creates this new higher order of

00:19:13,620 --> 00:19:19,980
reducer function so it returns the state

00:19:17,730 --> 00:19:24,270
of each reducer to form the single state

00:19:19,980 --> 00:19:25,830
objects good to note if you're using

00:19:24,270 --> 00:19:28,980
immutable jeaious at the very top level

00:19:25,830 --> 00:19:31,650
of your state this function isn't your

00:19:28,980 --> 00:19:35,100
friend however it is actually quite a

00:19:31,650 --> 00:19:37,770
simple function what it's doing so if we

00:19:35,100 --> 00:19:43,559
have a look back in our reducers i've

00:19:37,770 --> 00:19:48,510
created an index j s file which brings

00:19:43,559 --> 00:19:50,760
in all of these slice reducers and again

00:19:48,510 --> 00:19:53,460
es6 notation we're just passing it in

00:19:50,760 --> 00:19:55,710
we're passing an object in to combine

00:19:53,460 --> 00:19:56,620
reducers and what i want to highlight

00:19:55,710 --> 00:20:02,890
here

00:19:56,620 --> 00:20:06,630
is so the key is the same word as the

00:20:02,890 --> 00:20:09,040
reducer so here the key tracks is

00:20:06,630 --> 00:20:12,190
associated to the tracks reducer and

00:20:09,040 --> 00:20:15,490
those keys are going to be the keys that

00:20:12,190 --> 00:20:20,850
are in your state or in your store so if

00:20:15,490 --> 00:20:25,270
I change tracks to music time in my

00:20:20,850 --> 00:20:28,660
components in my store I would see music

00:20:25,270 --> 00:20:32,290
time and there would be my empty array

00:20:28,660 --> 00:20:37,330
on the initial load so those are the

00:20:32,290 --> 00:20:39,520
combined reducers so now we have got

00:20:37,330 --> 00:20:41,410
we've got we've done our action creators

00:20:39,520 --> 00:20:45,100
we've got our actions we've got our

00:20:41,410 --> 00:20:47,980
reducers now we want to create store

00:20:45,100 --> 00:20:50,020
so again Redux obviously gives us a

00:20:47,980 --> 00:20:53,410
wonderful create store method where you

00:20:50,020 --> 00:20:55,030
pass in this route producer and then you

00:20:53,410 --> 00:20:57,340
can also you have the option to pass in

00:20:55,030 --> 00:20:59,679
other parameters the first one is

00:20:57,340 --> 00:21:02,080
initial state which I mentioned earlier

00:20:59,679 --> 00:21:04,030
I'm not going to do because I defined it

00:21:02,080 --> 00:21:07,300
as a default in each of the route with

00:21:04,030 --> 00:21:09,190
juices and then the enhancer and this is

00:21:07,300 --> 00:21:13,630
where the middleware comes in so this is

00:21:09,190 --> 00:21:18,100
where it starts to get funky again so

00:21:13,630 --> 00:21:20,500
let's have a look at that so where it's

00:21:18,100 --> 00:21:23,080
going to get funky we're going to use a

00:21:20,500 --> 00:21:29,860
wee Lux method called apply middleware

00:21:23,080 --> 00:21:35,050
and let's have a look so if we go to the

00:21:29,860 --> 00:21:37,720
root of our app so index Jas so you can

00:21:35,050 --> 00:21:43,540
see here this is the root of our react

00:21:37,720 --> 00:21:44,860
app and we have our create store and

00:21:43,540 --> 00:21:48,640
apply middleware that we've imported

00:21:44,860 --> 00:21:50,760
from redux and what are we doing we pass

00:21:48,640 --> 00:21:55,000
in the reducers which is the combined

00:21:50,760 --> 00:21:57,400
one of all of our slice reduces compose

00:21:55,000 --> 00:21:59,620
enhancers I'll come back to that I

00:21:57,400 --> 00:22:01,650
wanted to talk a bit about logging later

00:21:59,620 --> 00:22:05,140
one of the benefits of using redux and

00:22:01,650 --> 00:22:08,440
specifically using redux dev tools and

00:22:05,140 --> 00:22:10,030
then we pass in apply middleware with

00:22:08,440 --> 00:22:12,370
our redux thunk and it's

00:22:10,030 --> 00:22:14,350
in that apply middleware that you could

00:22:12,370 --> 00:22:19,000
pass in other Middle West so I've

00:22:14,350 --> 00:22:21,190
mentioned logging if you need to keep

00:22:19,000 --> 00:22:23,950
track of everything for maybe orders or

00:22:21,190 --> 00:22:25,720
maybe you want to have crash reports

00:22:23,950 --> 00:22:28,330
because this is the perfect time an

00:22:25,720 --> 00:22:31,030
action has happened you've got an

00:22:28,330 --> 00:22:32,770
outcome whatever that may be what you

00:22:31,030 --> 00:22:38,020
want to do with it so it's the perfect

00:22:32,770 --> 00:22:42,100
time to apply middleware weather so

00:22:38,020 --> 00:22:44,350
that's our store and using the provider

00:22:42,100 --> 00:22:45,660
component which is a specific react

00:22:44,350 --> 00:22:51,280
Redux

00:22:45,660 --> 00:22:55,390
method we then pass in the store so now

00:22:51,280 --> 00:22:58,450
our app has a store which contains the

00:22:55,390 --> 00:23:00,700
state which has an initial load which we

00:22:58,450 --> 00:23:06,400
defined in the default of all of our

00:23:00,700 --> 00:23:11,530
slice reducers so this is where we're

00:23:06,400 --> 00:23:13,030
we've nearly come full circle so we've

00:23:11,530 --> 00:23:16,210
now got a store

00:23:13,030 --> 00:23:18,670
whoop-dee-doo but our components need to

00:23:16,210 --> 00:23:20,590
be able to connect to that store it

00:23:18,670 --> 00:23:24,910
needs to be able to access the values

00:23:20,590 --> 00:23:28,300
crucially it also needs to be able to

00:23:24,910 --> 00:23:35,620
cool those methods those dispatch those

00:23:28,300 --> 00:23:38,050
actions so let's have a look at that so

00:23:35,620 --> 00:23:40,960
again Redux has the connect method you

00:23:38,050 --> 00:23:43,840
can probably guess what it does it also

00:23:40,960 --> 00:23:46,840
has map state to it well you create a

00:23:43,840 --> 00:23:50,260
map state to props function as well as a

00:23:46,840 --> 00:23:52,720
map dispatch to props again it's pretty

00:23:50,260 --> 00:23:59,140
much in the name but let's have a look

00:23:52,720 --> 00:24:00,820
so I have my app component which is the

00:23:59,140 --> 00:24:02,770
highest level doesn't need to be at the

00:24:00,820 --> 00:24:06,040
highest level and it's just the

00:24:02,770 --> 00:24:09,870
component which you want to be connected

00:24:06,040 --> 00:24:12,970
to the store so I've created a container

00:24:09,870 --> 00:24:17,230
folder and I'm going to create an app

00:24:12,970 --> 00:24:19,090
container so your your component app is

00:24:17,230 --> 00:24:20,830
just supposed to be this dumb component

00:24:19,090 --> 00:24:22,420
it doesn't know anything about the store

00:24:20,830 --> 00:24:23,800
it doesn't need to know anything about

00:24:22,420 --> 00:24:27,520
with Dax disp

00:24:23,800 --> 00:24:30,460
none of that all it needs to know is it

00:24:27,520 --> 00:24:32,170
needs to take these props and it's here

00:24:30,460 --> 00:24:35,170
in the container that you extract all

00:24:32,170 --> 00:24:37,570
that logic and you essentially hook it

00:24:35,170 --> 00:24:40,270
up to the store and pass down those

00:24:37,570 --> 00:24:44,310
props to that component so what's going

00:24:40,270 --> 00:24:48,970
on here so map state 2 props

00:24:44,310 --> 00:24:52,090
so again es6 we've got tracks inspection

00:24:48,970 --> 00:24:53,650
tracks extracts failure so if we change

00:24:52,090 --> 00:24:55,560
the keys to I come and what I said

00:24:53,650 --> 00:24:58,390
earlier but hey these are my tracks

00:24:55,560 --> 00:25:01,390
tracks here would be changed to hey

00:24:58,390 --> 00:25:02,620
these are my tracks and then you pass

00:25:01,390 --> 00:25:05,830
them down you're returning it as an

00:25:02,620 --> 00:25:09,070
object inspecting tracks tracks fetch

00:25:05,830 --> 00:25:11,050
tracks failure and then we have our map

00:25:09,070 --> 00:25:13,690
dispatch to props so we've kind of

00:25:11,050 --> 00:25:17,230
forgotten about our asynchronous action

00:25:13,690 --> 00:25:21,190
creator and it's here that we grab that

00:25:17,230 --> 00:25:24,370
bad boy so map dispatch to props we pass

00:25:21,190 --> 00:25:27,880
in The Dispatch the dispatch method that

00:25:24,370 --> 00:25:30,340
belongs to the store and then I've used

00:25:27,880 --> 00:25:32,830
bind actions creators here which is just

00:25:30,340 --> 00:25:34,570
another helpful redux method however you

00:25:32,830 --> 00:25:38,800
don't need to you could just do what

00:25:34,570 --> 00:25:40,450
I've done underneath and essentially

00:25:38,800 --> 00:25:41,980
yeah you'll just what it says on the tin

00:25:40,450 --> 00:25:45,520
your mapping the dispatch this

00:25:41,980 --> 00:25:49,930
particular asynchronous action creator

00:25:45,520 --> 00:25:52,540
to props under the name fetch tracks

00:25:49,930 --> 00:25:55,600
so that would be the crop name and then

00:25:52,540 --> 00:25:58,150
you pass in those two functions to

00:25:55,600 --> 00:26:00,310
connect and then whatever component that

00:25:58,150 --> 00:26:02,740
you're wanting to connect to the store

00:26:00,310 --> 00:26:08,580
you pass it in at the end so that's your

00:26:02,740 --> 00:26:12,010
app so that's we're all connected now

00:26:08,580 --> 00:26:15,820
we're good to go so whatever sort of

00:26:12,010 --> 00:26:17,320
benefits of Redux I've done a question

00:26:15,820 --> 00:26:19,660
mark because a lot of people aren't that

00:26:17,320 --> 00:26:23,770
big a fan of the strict struck strict

00:26:19,660 --> 00:26:26,440
structure of it so I find that there's

00:26:23,770 --> 00:26:28,480
increased consistency in code I'm it's

00:26:26,440 --> 00:26:30,580
sort of it forces you to write in a

00:26:28,480 --> 00:26:32,830
certain way and to UM layout your code

00:26:30,580 --> 00:26:35,310
in a certain way that also can lead to

00:26:32,830 --> 00:26:37,750
you know it's easier to maintain and

00:26:35,310 --> 00:26:40,090
crucially it's one source of truth

00:26:37,750 --> 00:26:42,370
the store I mentioned at the very

00:26:40,090 --> 00:26:43,990
beginning how you know there are so many

00:26:42,370 --> 00:26:46,030
things now going on in your sort of

00:26:43,990 --> 00:26:48,550
single page app it's really hard to keep

00:26:46,030 --> 00:26:51,130
track of everything whereas now you just

00:26:48,550 --> 00:26:53,560
have that one source of truth and then

00:26:51,130 --> 00:26:58,360
finally in one of my sort of favorite

00:26:53,560 --> 00:27:01,570
reasons for using redux is debugging and

00:26:58,360 --> 00:27:03,670
I guess in some way is linked to sort of

00:27:01,570 --> 00:27:05,860
the strict structure nature and how you

00:27:03,670 --> 00:27:09,820
know everything's going in a you know

00:27:05,860 --> 00:27:12,910
this systematic order and so for

00:27:09,820 --> 00:27:16,420
debugging I often use redux dev tools so

00:27:12,910 --> 00:27:19,000
I thought I would maybe dive into the

00:27:16,420 --> 00:27:21,040
actual app that I created and give you a

00:27:19,000 --> 00:27:26,380
cheeky flash of redux dev tools so you

00:27:21,040 --> 00:27:32,770
can see what's going on so let's refresh

00:27:26,380 --> 00:27:38,050
that let's inspect you can see there's a

00:27:32,770 --> 00:27:39,310
little we Docs tab there so what's going

00:27:38,050 --> 00:27:43,240
on I haven't done anything it's just

00:27:39,310 --> 00:27:46,180
loaded and we've got the initial state

00:27:43,240 --> 00:27:48,520
there I remember we didn't pass in an

00:27:46,180 --> 00:27:51,490
initial state this was just the default

00:27:48,520 --> 00:27:54,360
values in the reducers so there you can

00:27:51,490 --> 00:27:58,300
see fresh tracks failure empty string

00:27:54,360 --> 00:28:01,090
inspection tracks force and tracks the

00:27:58,300 --> 00:28:04,750
empty array so now what's going to

00:28:01,090 --> 00:28:06,280
happen when I type in I don't know what

00:28:04,750 --> 00:28:11,260
should we say let's start typing in

00:28:06,280 --> 00:28:13,090
thunking so again just a hat it's a very

00:28:11,260 --> 00:28:16,600
simplified version I'm not taking into

00:28:13,090 --> 00:28:18,160
account sort of the the ordering that

00:28:16,600 --> 00:28:20,620
these events happen that these actions

00:28:18,160 --> 00:28:22,930
happen but just to give you an idea so

00:28:20,620 --> 00:28:26,380
we have typed in th and we've got these

00:28:22,930 --> 00:28:28,210
wonderful results so now let's have a

00:28:26,380 --> 00:28:31,240
look at all these actions that have been

00:28:28,210 --> 00:28:34,020
dispatched so first of all when I first

00:28:31,240 --> 00:28:38,170
typed in that first letter which was T

00:28:34,020 --> 00:28:40,210
this action was dispatched get tracks so

00:28:38,170 --> 00:28:44,560
you can see we've got a lovely diff

00:28:40,210 --> 00:28:48,040
section here you can see that change the

00:28:44,560 --> 00:28:49,870
state now has it then we've got get

00:28:48,040 --> 00:28:54,230
track success

00:28:49,870 --> 00:28:56,510
again you can see that diff inspecting

00:28:54,230 --> 00:28:59,750
tracks is now false and we've got our

00:28:56,510 --> 00:29:04,610
lovely list of tracks and what's also

00:28:59,750 --> 00:29:07,280
great about this is you can remove

00:29:04,610 --> 00:29:09,799
actions to see sort of where it's

00:29:07,280 --> 00:29:13,760
falling down if you are trying to debug

00:29:09,799 --> 00:29:15,440
so lovely example here is so you can see

00:29:13,760 --> 00:29:18,710
it says jump or skip so I'm going to

00:29:15,440 --> 00:29:20,480
skip the success I'm also going to skip

00:29:18,710 --> 00:29:22,640
this success which was for the letter H

00:29:20,480 --> 00:29:25,400
and there we go

00:29:22,640 --> 00:29:28,570
you've just managed to change the state

00:29:25,400 --> 00:29:31,630
and so you can really drill down and see

00:29:28,570 --> 00:29:38,750
sort of you know get into the debugging

00:29:31,630 --> 00:29:41,240
mindset and I believe that is everything

00:29:38,750 --> 00:29:45,910
let's get thank you

00:29:41,240 --> 00:29:45,910

YouTube URL: https://www.youtube.com/watch?v=_7NnKoeUmwI


