Title: Moving Fast and Slow - JS Roundabout - October 2017
Publication date: 2018-02-02
Playlist: The JS Roundabout
Description: 
	Matthew Williams (Skyscanner) - Moving Fast and Slow

________________________________________________________________

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:06,089
I'm Matt I'm senior engineer here at

00:00:02,939 --> 00:00:08,940
Skyscanner I'm a member of potato tribe

00:00:06,089 --> 00:00:11,550
so we look after all things data and

00:00:08,940 --> 00:00:14,130
specifically I'm in the theft squad who

00:00:11,550 --> 00:00:16,410
look after the financial data and then

00:00:14,130 --> 00:00:19,020
prior to our I was of a BBC where as a

00:00:16,410 --> 00:00:21,630
lead engineer on the iPlayer back-end

00:00:19,020 --> 00:00:23,580
team and if you wind the clocks back far

00:00:21,630 --> 00:00:26,550
enough through time where I have more

00:00:23,580 --> 00:00:29,550
hair and no idea what I wanted to do in

00:00:26,550 --> 00:00:31,800
my life I was doing a PhD but anyway

00:00:29,550 --> 00:00:35,040
I've traded my hair for a sense of

00:00:31,800 --> 00:00:37,320
direction and Here I am so I'll be

00:00:35,040 --> 00:00:39,840
talking about moving fast and slow like

00:00:37,320 --> 00:00:41,309
it's a slight change to the title I'm on

00:00:39,840 --> 00:00:43,590
published but if the contents pretty

00:00:41,309 --> 00:00:44,879
much the same I'll be talking about what

00:00:43,590 --> 00:00:46,350
it means to move fast some of the

00:00:44,879 --> 00:00:48,350
techniques we can use to help us move

00:00:46,350 --> 00:00:51,270
fast and what happens if we move slow

00:00:48,350 --> 00:00:54,090
I'll be touching on example from my

00:00:51,270 --> 00:00:55,739
experience and hopefully there'll be

00:00:54,090 --> 00:01:01,620
something of interest for you guys you

00:00:55,739 --> 00:01:03,000
can take home later but first you know

00:01:01,620 --> 00:01:05,460
it's going to be a good talk when it

00:01:03,000 --> 00:01:06,990
starts with an apology and I've been

00:01:05,460 --> 00:01:09,180
fighting this presentation for about two

00:01:06,990 --> 00:01:11,640
weeks and I got to a point where I was

00:01:09,180 --> 00:01:12,180
happy with it and then I checked what

00:01:11,640 --> 00:01:13,830
the topic was

00:01:12,180 --> 00:01:15,659
and it was performance and for some

00:01:13,830 --> 00:01:18,450
reason I didn't know that which is

00:01:15,659 --> 00:01:19,950
really frustrating because I have got so

00:01:18,450 --> 00:01:20,670
much to say about performance especially

00:01:19,950 --> 00:01:24,540
around nodejs

00:01:20,670 --> 00:01:27,689
and having built I play a back-end using

00:01:24,540 --> 00:01:28,920
nodes so a bit gutted there I'm hoping

00:01:27,689 --> 00:01:30,270
that there's some stuff interested I

00:01:28,920 --> 00:01:32,280
tried to shoehorn some performance

00:01:30,270 --> 00:01:33,299
related stuff in here I hope you haven't

00:01:32,280 --> 00:01:37,619
made it too

00:01:33,299 --> 00:01:40,229
incoherent so anyway so moving fast so

00:01:37,619 --> 00:01:42,210
what we mean by moving fast I think

00:01:40,229 --> 00:01:44,700
moving fast is the ability to develop

00:01:42,210 --> 00:01:46,979
features and deliver them to customers

00:01:44,700 --> 00:01:50,490
in a short period of time it's pretty

00:01:46,979 --> 00:01:52,110
obvious really but why why do people why

00:01:50,490 --> 00:01:54,570
do people strive to move faster all the

00:01:52,110 --> 00:01:57,479
benefits I think for the business for

00:01:54,570 --> 00:02:00,149
you can realize potential revenue

00:01:57,479 --> 00:02:01,530
streams quickly you can maintain a

00:02:00,149 --> 00:02:03,000
competitive edge like if you're moving

00:02:01,530 --> 00:02:05,280
quickly you keep your competitors at

00:02:03,000 --> 00:02:06,930
arm's length and you learn faster like

00:02:05,280 --> 00:02:08,700
you you get your feature out you can

00:02:06,930 --> 00:02:10,080
measure the impact to that feature and

00:02:08,700 --> 00:02:13,130
you can evolve an innovate

00:02:10,080 --> 00:02:15,240
but also for developers and moving fast

00:02:13,130 --> 00:02:16,710
you get feedback quicker that might be

00:02:15,240 --> 00:02:19,140
from product owners it might be from

00:02:16,710 --> 00:02:20,580
customers directly there's a sense of

00:02:19,140 --> 00:02:21,960
achievement you know you're building

00:02:20,580 --> 00:02:23,790
something and you're releasing it if you

00:02:21,960 --> 00:02:25,530
work on the same thing for a long period

00:02:23,790 --> 00:02:28,140
of time I'm very sure a lot of you here

00:02:25,530 --> 00:02:31,140
would have experienced that it gets

00:02:28,140 --> 00:02:32,970
quite frustrating and also there's less

00:02:31,140 --> 00:02:34,800
downtime if you if you're building and

00:02:32,970 --> 00:02:37,410
releasing stuff quickly and iterating

00:02:34,800 --> 00:02:40,380
and you're not sort of wasting time on

00:02:37,410 --> 00:02:42,990
legacy systems and things like that a

00:02:40,380 --> 00:02:45,360
couple of examples of how moving fast

00:02:42,990 --> 00:02:47,250
might impact a business I think reacting

00:02:45,360 --> 00:02:48,900
to major events is one of them I think

00:02:47,250 --> 00:02:51,120
here at Skyscanner is a really good

00:02:48,900 --> 00:02:53,700
example which is if there's any major

00:02:51,120 --> 00:02:55,709
events in a city somewhere they will

00:02:53,700 --> 00:02:57,480
very quickly shut down advertising on

00:02:55,709 --> 00:02:59,040
that city because we don't want to be

00:02:57,480 --> 00:03:01,770
associated with appetizing cheap flights

00:02:59,040 --> 00:03:05,190
to a place which might have just

00:03:01,770 --> 00:03:06,810
witnessed a tragic event and also being

00:03:05,190 --> 00:03:09,110
first to market on new technologies is

00:03:06,810 --> 00:03:12,510
constant innovation in the tech industry

00:03:09,110 --> 00:03:14,910
things like a lexer Google home AR kit

00:03:12,510 --> 00:03:17,850
which is one of them and if you can get

00:03:14,910 --> 00:03:19,800
there first with a kind of a there's a

00:03:17,850 --> 00:03:21,030
hype train you can sort of ride in like

00:03:19,800 --> 00:03:22,650
if you're one of the first adopters of

00:03:21,030 --> 00:03:25,530
these technologies you can gain a bit of

00:03:22,650 --> 00:03:26,580
free marketing on the back of it and a

00:03:25,530 --> 00:03:30,450
our kids work something that we're

00:03:26,580 --> 00:03:33,330
looking at so watch this space and then

00:03:30,450 --> 00:03:34,860
moving slow like if you're not moving

00:03:33,330 --> 00:03:37,110
quickly then what the implications are

00:03:34,860 --> 00:03:39,680
moving slowly you know you can you can

00:03:37,110 --> 00:03:41,790
lose out on revenue I think if you're

00:03:39,680 --> 00:03:43,410
taking a longer period of time to

00:03:41,790 --> 00:03:44,940
develop a feature and you're not getting

00:03:43,410 --> 00:03:46,620
it out to market you're not making

00:03:44,940 --> 00:03:49,769
revenue you don't make it money so

00:03:46,620 --> 00:03:52,560
you're missing out there it can be brand

00:03:49,769 --> 00:03:55,170
damaging I've got some examples later

00:03:52,560 --> 00:03:57,840
we're not being able to react to

00:03:55,170 --> 00:03:59,310
incidents quickly it can be brand

00:03:57,840 --> 00:04:01,980
damaging and obviously that costs you

00:03:59,310 --> 00:04:03,780
money and for the developers it can be

00:04:01,980 --> 00:04:08,489
frustrating like I said before like if

00:04:03,780 --> 00:04:09,959
you are working on the same feature for

00:04:08,489 --> 00:04:11,970
a long time and you're not making

00:04:09,959 --> 00:04:14,280
progress it's frustrating people tend to

00:04:11,970 --> 00:04:17,190
complain about you know legacy systems

00:04:14,280 --> 00:04:18,570
or things I missed with like basically

00:04:17,190 --> 00:04:20,310
it's a symptom of not being able to

00:04:18,570 --> 00:04:24,360
iterate quickly on a piece of software

00:04:20,310 --> 00:04:27,210
and release it so some examples

00:04:24,360 --> 00:04:28,650
examples what one one example would be

00:04:27,210 --> 00:04:30,060
lacking confidence to change a service

00:04:28,650 --> 00:04:33,900
I'm fairly sure a lot of you would have

00:04:30,060 --> 00:04:35,669
worked on a service where but maybe

00:04:33,900 --> 00:04:37,020
there aren't tests maybe were some tests

00:04:35,669 --> 00:04:39,270
but you have no confidence in it maybe

00:04:37,020 --> 00:04:40,139
the release process is long winded and

00:04:39,270 --> 00:04:42,419
it's not automated

00:04:40,139 --> 00:04:44,520
and people can't get a bit edgy about

00:04:42,419 --> 00:04:45,479
releasing it so like people don't want

00:04:44,520 --> 00:04:46,650
to change it people don't want to

00:04:45,479 --> 00:04:48,629
release it and like or we shouldn't

00:04:46,650 --> 00:04:50,909
release it on a Friday or along these

00:04:48,629 --> 00:04:54,030
lines and that can I can really impact

00:04:50,909 --> 00:04:57,900
you and the BBC though as a service an

00:04:54,030 --> 00:04:59,610
api vert got to such a state but no one

00:04:57,900 --> 00:05:01,710
dare change it they've been everyone in

00:04:59,610 --> 00:05:03,300
the BBC was using it no one dared change

00:05:01,710 --> 00:05:07,139
it no one to release it and in the end

00:05:03,300 --> 00:05:09,120
it blew up and I think it was a period

00:05:07,139 --> 00:05:12,319
of downtime for two days like the whole

00:05:09,120 --> 00:05:14,039
weekend BBC was down which is terrible

00:05:12,319 --> 00:05:17,759
ironically that service was called

00:05:14,039 --> 00:05:19,560
dynamite it's now gone and also

00:05:17,759 --> 00:05:21,569
infrastructure isn't able to scale like

00:05:19,560 --> 00:05:23,939
nowadays with a cloud you might think

00:05:21,569 --> 00:05:25,710
that's that doesn't happen anymore but

00:05:23,939 --> 00:05:27,659
last year I was working a company and

00:05:25,710 --> 00:05:31,710
every weekend they would have a major

00:05:27,659 --> 00:05:34,080
event and one weekend they fell over

00:05:31,710 --> 00:05:35,759
because performance issues and the next

00:05:34,080 --> 00:05:38,580
weekend they were unable to scale their

00:05:35,759 --> 00:05:41,940
infrastructure because and misses deadly

00:05:38,580 --> 00:05:44,819
serious a server was stuck in customs at

00:05:41,940 --> 00:05:47,370
Heathrow so I had a genuine impact on

00:05:44,819 --> 00:05:51,089
that company because they were unable to

00:05:47,370 --> 00:05:52,259
move quickly and resolve problems but

00:05:51,089 --> 00:05:54,479
don't just take my word for it I think

00:05:52,259 --> 00:05:56,699
Mark Zuckerberg once said move fast and

00:05:54,479 --> 00:05:58,729
break things unless you were breaking

00:05:56,699 --> 00:06:00,629
stuff you're moving fast enough and

00:05:58,729 --> 00:06:02,159
great advice something that really

00:06:00,629 --> 00:06:07,050
struck a chord to me and I tried to live

00:06:02,159 --> 00:06:09,089
by it until yeah so we had an incident i

00:06:07,050 --> 00:06:11,490
player misses at the time when I was

00:06:09,089 --> 00:06:14,400
involved I was the lead for the back end

00:06:11,490 --> 00:06:17,250
team and this was solely my team's

00:06:14,400 --> 00:06:18,569
responsibility so I'm not sure Facebook

00:06:17,250 --> 00:06:19,979
had the revenue stream when Mark was

00:06:18,569 --> 00:06:21,779
saying yeah let's break things I think

00:06:19,979 --> 00:06:24,680
it might be slightly different now I

00:06:21,779 --> 00:06:27,509
think he's probably chilled out a bit

00:06:24,680 --> 00:06:29,430
but yeah dealing with this level of

00:06:27,509 --> 00:06:32,759
fallout it's not fun so I wouldn't

00:06:29,430 --> 00:06:33,779
really recommend that so yeah I have to

00:06:32,759 --> 00:06:35,699
say that was probably one of the worst

00:06:33,779 --> 00:06:37,529
weeks of my life and trying to deal with

00:06:35,699 --> 00:06:37,940
our issue because think about iPlayer is

00:06:37,529 --> 00:06:39,110
pee

00:06:37,940 --> 00:06:40,520
I'm gonna go away we're going to keep

00:06:39,110 --> 00:06:42,380
coming back and coming back and every

00:06:40,520 --> 00:06:43,520
evening you're going to hit a peak of

00:06:42,380 --> 00:06:44,930
traffic and it's going to be very

00:06:43,520 --> 00:06:50,420
difficult if you haven't fixed a problem

00:06:44,930 --> 00:06:52,400
and the last one night so I mean

00:06:50,420 --> 00:06:56,450
particularly incident was performance

00:06:52,400 --> 00:06:58,070
related and as I said before if I know

00:06:56,450 --> 00:06:59,180
missus meant to be about performance I

00:06:58,070 --> 00:07:00,620
would have told you about everything you

00:06:59,180 --> 00:07:05,810
need to know but unfortunately that's

00:07:00,620 --> 00:07:09,110
not the case now moving fast is easy I

00:07:05,810 --> 00:07:10,670
could stop acting on an Express API now

00:07:09,110 --> 00:07:13,400
and probably knock something out and

00:07:10,670 --> 00:07:14,960
your bet a developed an API but

00:07:13,400 --> 00:07:18,500
obviously what happens is if you don't

00:07:14,960 --> 00:07:20,120
invest time and effort into things over

00:07:18,500 --> 00:07:23,060
time you'll start to slow down and

00:07:20,120 --> 00:07:25,370
eventually grind to a halt so what can

00:07:23,060 --> 00:07:27,470
we do so we want to aim for something

00:07:25,370 --> 00:07:28,820
like this I think we're like you put a

00:07:27,470 --> 00:07:31,310
lot more effort upfront

00:07:28,820 --> 00:07:32,720
and you're releasing slower but

00:07:31,310 --> 00:07:34,850
eventually you're building a framework

00:07:32,720 --> 00:07:37,220
or a foundation to enable you to iterate

00:07:34,850 --> 00:07:41,030
on features really quickly and I've seen

00:07:37,220 --> 00:07:43,360
this firsthand several times so I'm

00:07:41,030 --> 00:07:46,910
going to go into some specific examples

00:07:43,360 --> 00:07:49,220
so after the bake-off incidents the

00:07:46,910 --> 00:07:52,070
director of tech at the BBC made it very

00:07:49,220 --> 00:07:53,810
clear he said the iPlayer homepage never

00:07:52,070 --> 00:07:58,130
goes down like I don't care what you do

00:07:53,810 --> 00:08:00,710
but the homepage has to be up so I was

00:07:58,130 --> 00:08:01,970
like okay so how do we how do we do that

00:08:00,710 --> 00:08:03,919
how do we ensure that without

00:08:01,970 --> 00:08:05,840
compromising our speed I don't want to

00:08:03,919 --> 00:08:07,130
give up the benefits of moving quickly

00:08:05,840 --> 00:08:08,120
and iterating quickly and continuous

00:08:07,130 --> 00:08:11,810
delivery all these things that we were

00:08:08,120 --> 00:08:14,450
doing I didn't want to sacrifice fat for

00:08:11,810 --> 00:08:16,490
stability so what we came up with is and

00:08:14,450 --> 00:08:19,100
then it's not it's not rocket science

00:08:16,490 --> 00:08:22,610
but we had to varnish in front but we

00:08:19,100 --> 00:08:25,280
enabled a stale while revalidate mode

00:08:22,610 --> 00:08:27,650
which is basically we would keep a stale

00:08:25,280 --> 00:08:29,990
copy of the home page and any page for a

00:08:27,650 --> 00:08:32,419
period of time I don't know if anyone's

00:08:29,990 --> 00:08:34,640
used varnish but we created a varnish

00:08:32,419 --> 00:08:36,260
mod that would enable you to customize

00:08:34,640 --> 00:08:38,060
how long it would be kept so you could

00:08:36,260 --> 00:08:40,310
send back a response header and the

00:08:38,060 --> 00:08:42,650
volunteer would store its tail for that

00:08:40,310 --> 00:08:45,589
period of time and what that meant was

00:08:42,650 --> 00:08:47,120
that we could deploy all different node

00:08:45,589 --> 00:08:49,430
micro services in the background and

00:08:47,120 --> 00:08:51,500
break things

00:08:49,430 --> 00:08:52,790
but varnish would have a stale copy and

00:08:51,500 --> 00:08:55,190
the iPlayer homepage would be up and

00:08:52,790 --> 00:08:56,960
everyone everybody would be happy we

00:08:55,190 --> 00:08:58,850
were obviously would be reacting and

00:08:56,960 --> 00:09:00,230
fixing these problems but at least we're

00:08:58,850 --> 00:09:01,250
customers weren't impacted so I think

00:09:00,230 --> 00:09:03,470
that was probably the single most

00:09:01,250 --> 00:09:06,590
important thing that we did offer back

00:09:03,470 --> 00:09:08,600
about incident another thing we learned

00:09:06,590 --> 00:09:10,220
about which is I think it's common

00:09:08,600 --> 00:09:12,200
knowledge now but at the time I don't

00:09:10,220 --> 00:09:14,360
think there's only Netflix really who

00:09:12,200 --> 00:09:16,250
were sort of banging the drum of circuit

00:09:14,360 --> 00:09:17,420
breakers for those who don't know

00:09:16,250 --> 00:09:18,830
circuit breakers the things that are

00:09:17,420 --> 00:09:20,720
trying to protect services so once you

00:09:18,830 --> 00:09:24,380
start developing micro services there's

00:09:20,720 --> 00:09:26,840
lots of HTTP requests going back and

00:09:24,380 --> 00:09:28,430
forth and if one service breaks what you

00:09:26,840 --> 00:09:30,530
don't want to do is have another service

00:09:28,430 --> 00:09:32,390
hammer it with more requests because

00:09:30,530 --> 00:09:34,970
typically if it's totally broken below

00:09:32,390 --> 00:09:37,970
balance it will return a response very

00:09:34,970 --> 00:09:39,740
quickly and then this the micro service

00:09:37,970 --> 00:09:41,810
will retry or a user will get an error

00:09:39,740 --> 00:09:44,210
in their refresh so very quickly you get

00:09:41,810 --> 00:09:45,890
this huge cascading failure where one

00:09:44,210 --> 00:09:48,410
white mic one micro service will go down

00:09:45,890 --> 00:09:49,960
and then the rest will tumble so circuit

00:09:48,410 --> 00:09:52,640
breakers are a way of controlling that

00:09:49,960 --> 00:09:55,040
where if you get a certain number of

00:09:52,640 --> 00:09:57,440
errors in a certain time period it will

00:09:55,040 --> 00:09:58,760
trip the circuit and then any requests

00:09:57,440 --> 00:10:00,920
after that will just fail they weren't

00:09:58,760 --> 00:10:02,360
even talk to a downstream service it

00:10:00,920 --> 00:10:04,730
will just fail and after a certain

00:10:02,360 --> 00:10:06,620
period of time it will go into a

00:10:04,730 --> 00:10:06,950
half-open state where it will try one or

00:10:06,620 --> 00:10:09,080
two

00:10:06,950 --> 00:10:11,090
tentative requests and if they're

00:10:09,080 --> 00:10:13,310
successful we assume a service is back

00:10:11,090 --> 00:10:14,870
it will close the circuit happy days and

00:10:13,310 --> 00:10:18,590
if they fail we'll assume it's still

00:10:14,870 --> 00:10:21,010
down and we go back to an open state

00:10:18,590 --> 00:10:24,020
like I said these are well understood

00:10:21,010 --> 00:10:27,620
concepts now however if you've not read

00:10:24,020 --> 00:10:28,760
this book I would recommend it it's got

00:10:27,620 --> 00:10:30,380
everything about circuit breakers

00:10:28,760 --> 00:10:32,020
bulkheads or both techniques you can use

00:10:30,380 --> 00:10:34,820
if you're building a performance system

00:10:32,020 --> 00:10:37,310
there is a second edition which looks

00:10:34,820 --> 00:10:39,590
slightly more HD but I think it's coming

00:10:37,310 --> 00:10:42,130
out at the end of the year so if you've

00:10:39,590 --> 00:10:45,290
not read it definitely go and read it

00:10:42,130 --> 00:10:49,220
and now I've got some hopefully useful

00:10:45,290 --> 00:10:53,930
bits of tech that you can take away so

00:10:49,220 --> 00:10:55,550
we found the nodes sort of tooling for

00:10:53,930 --> 00:10:57,500
the things I've just spoken about kind

00:10:55,550 --> 00:11:00,320
of lacking we wanted to use circuit

00:10:57,500 --> 00:11:01,730
breakers we wanted caching like we don't

00:11:00,320 --> 00:11:02,960
want to make the same request if we've

00:11:01,730 --> 00:11:05,690
just made it

00:11:02,960 --> 00:11:07,930
retries things like so we ever be

00:11:05,690 --> 00:11:11,060
viously made a library called flush art

00:11:07,930 --> 00:11:14,180
which is I think it's described as

00:11:11,060 --> 00:11:17,840
requests with batteries included so it's

00:11:14,180 --> 00:11:19,730
like a standard node request module but

00:11:17,840 --> 00:11:22,990
we add caching circuit breakers retries

00:11:19,730 --> 00:11:27,110
logging and monitoring using stats D

00:11:22,990 --> 00:11:29,480
it's all optional and you would use it

00:11:27,110 --> 00:11:33,170
like this we tried to use things that

00:11:29,480 --> 00:11:36,110
were standard so we use cat box for

00:11:33,170 --> 00:11:38,870
caching we use stats d for monitoring

00:11:36,110 --> 00:11:40,130
and things I might it's all optional so

00:11:38,870 --> 00:11:42,140
you know this this example here would

00:11:40,130 --> 00:11:45,200
retry 10 times waiting half a second

00:11:42,140 --> 00:11:47,480
between attempts and then if you've got

00:11:45,200 --> 00:11:50,150
200 errors it would trip the circuit and

00:11:47,480 --> 00:11:52,100
then it would yeah it would retry after

00:11:50,150 --> 00:11:53,630
a certain amount of time there's a very

00:11:52,100 --> 00:11:57,230
useful module if you're not seeing it

00:11:53,630 --> 00:12:00,080
you should check it out another problem

00:11:57,230 --> 00:12:03,350
we faced is if you build an API if you

00:12:00,080 --> 00:12:06,080
build a good API and people will use it

00:12:03,350 --> 00:12:07,550
so I've given an example here a

00:12:06,080 --> 00:12:09,680
hypothetical example which is if you

00:12:07,550 --> 00:12:11,630
build an API at sky scanner for flights

00:12:09,680 --> 00:12:13,730
maybe if a website will use it if they

00:12:11,630 --> 00:12:15,140
want to display flights make sense maybe

00:12:13,730 --> 00:12:17,450
if a mobile app will use it in a

00:12:15,140 --> 00:12:18,980
different way maybe you want to do

00:12:17,450 --> 00:12:21,170
reporting like how many flights do we

00:12:18,980 --> 00:12:22,670
have on your time that will call into

00:12:21,170 --> 00:12:24,800
the API maybe you want to do

00:12:22,670 --> 00:12:26,480
recommendations personalized

00:12:24,800 --> 00:12:28,250
recommendations to the user so that will

00:12:26,480 --> 00:12:29,750
start calling it and then maybe you've

00:12:28,250 --> 00:12:31,670
got even companies external to

00:12:29,750 --> 00:12:34,100
Skyscanner who start wanting to display

00:12:31,670 --> 00:12:36,800
flights on their site so the problem is

00:12:34,100 --> 00:12:40,210
how do you as the owner of a flight say

00:12:36,800 --> 00:12:43,310
Pio how do you deliver that API quickly

00:12:40,210 --> 00:12:46,250
without fear of breaking these clients

00:12:43,310 --> 00:12:48,500
which is what caused the dynamite to

00:12:46,250 --> 00:12:50,780
break of a BBC was for everyone was

00:12:48,500 --> 00:12:52,850
using it no one knew how it's being used

00:12:50,780 --> 00:12:54,590
so they big eventually just got scared

00:12:52,850 --> 00:12:58,280
of changing it so we did we don't want

00:12:54,590 --> 00:13:00,530
that one technique we found useful with

00:12:58,280 --> 00:13:04,070
something called consumer contracts it's

00:13:00,530 --> 00:13:06,110
a form of testing so there is an upfront

00:13:04,070 --> 00:13:08,180
cost so you're gonna go slower initially

00:13:06,110 --> 00:13:10,330
the difference between these tests and

00:13:08,180 --> 00:13:13,190
other like integration tests and

00:13:10,330 --> 00:13:15,170
acceptance tests is a consumers

00:13:13,190 --> 00:13:16,670
implement these tests so maybe as part

00:13:15,170 --> 00:13:19,220
of your onboarding process of a new

00:13:16,670 --> 00:13:21,920
you API consumer you have a stage where

00:13:19,220 --> 00:13:23,480
you say you have to provide us with a

00:13:21,920 --> 00:13:25,850
consumer contract so how are you going

00:13:23,480 --> 00:13:28,670
to use our API what endpoints will you

00:13:25,850 --> 00:13:30,530
call what will you expect in return and

00:13:28,670 --> 00:13:35,030
these contracts are loose in that they

00:13:30,530 --> 00:13:36,410
won't be un explicitly state what you

00:13:35,030 --> 00:13:39,530
expect just like I expect certain

00:13:36,410 --> 00:13:41,300
properties and I need a certain value to

00:13:39,530 --> 00:13:44,750
be in my property so as loose as

00:13:41,300 --> 00:13:46,490
possible and no more but then the

00:13:44,750 --> 00:13:48,560
producer of the API will execute these

00:13:46,490 --> 00:13:50,270
tests so the producer guarantees for if

00:13:48,560 --> 00:13:52,460
you provide me with these contracts I

00:13:50,270 --> 00:13:54,080
will run them and I will not deploy a

00:13:52,460 --> 00:13:58,640
broken version or a version will break

00:13:54,080 --> 00:14:00,230
your client application and typically

00:13:58,640 --> 00:14:02,150
you do something like this so you would

00:14:00,230 --> 00:14:03,440
build run your normal tests deploy to

00:14:02,150 --> 00:14:06,890
some sort of staging environment maybe

00:14:03,440 --> 00:14:08,780
and then you drum the contracts and if

00:14:06,890 --> 00:14:12,680
they fail you can go back and fix them

00:14:08,780 --> 00:14:15,550
and if not you can deploy safely there's

00:14:12,680 --> 00:14:18,200
also a no module for that which we made

00:14:15,550 --> 00:14:21,650
it's open-source and it looks something

00:14:18,200 --> 00:14:25,120
like this again it builds on other

00:14:21,650 --> 00:14:29,060
open-source projects so you would say

00:14:25,120 --> 00:14:31,460
here's a user API test I am a github

00:14:29,060 --> 00:14:34,070
service that could be mobile app website

00:14:31,460 --> 00:14:36,230
whatever I expect to be able to make a

00:14:34,070 --> 00:14:39,380
get request to this URL and in response

00:14:36,230 --> 00:14:42,290
I expect to 200 with login name and

00:14:39,380 --> 00:14:45,050
public repos two strings and integer and

00:14:42,290 --> 00:14:47,480
that's it it also comes with a binary

00:14:45,050 --> 00:14:49,790
you can run but we'll execute all the

00:14:47,480 --> 00:14:51,020
tests in a contracts folder which you

00:14:49,790 --> 00:14:53,960
can integrate into your continuous

00:14:51,020 --> 00:14:55,340
delivery pipeline I say again if you've

00:14:53,960 --> 00:14:57,020
not seen my I'll go and check it out

00:14:55,340 --> 00:14:58,850
it's not for everyone but we found it

00:14:57,020 --> 00:15:00,410
really useful and we used it internally

00:14:58,850 --> 00:15:02,840
with communication between our micro

00:15:00,410 --> 00:15:06,580
services as well so that we knew we

00:15:02,840 --> 00:15:06,580
weren't breaking anyone when we deployed

00:15:07,390 --> 00:15:10,880
so I'm more of a back-end developer than

00:15:09,500 --> 00:15:13,040
a front-end developer and you started

00:15:10,880 --> 00:15:15,410
dabbling but I think react kind of

00:15:13,040 --> 00:15:21,380
echoes the same thing which is like you

00:15:15,410 --> 00:15:23,840
hey so react is kind of similar where

00:15:21,380 --> 00:15:25,790
you asks you to think about things up

00:15:23,840 --> 00:15:26,990
front so you have to think about the

00:15:25,790 --> 00:15:28,700
components in your system you have to

00:15:26,990 --> 00:15:29,480
think about how they interact with each

00:15:28,700 --> 00:15:30,950
other and you have to think about

00:15:29,480 --> 00:15:33,110
whether States should live

00:15:30,950 --> 00:15:34,430
which if you're hacking on jQuery you

00:15:33,110 --> 00:15:35,930
don't have to think about you can just

00:15:34,430 --> 00:15:37,850
start hacking and it's much quicker to

00:15:35,930 --> 00:15:39,590
get going but the benefits of reactor

00:15:37,850 --> 00:15:40,790
that once you've got these reusable

00:15:39,590 --> 00:15:43,940
components you can build something

00:15:40,790 --> 00:15:45,680
totally new very quickly we have

00:15:43,940 --> 00:15:49,160
something at sky scanner called backpack

00:15:45,680 --> 00:15:51,380
which is a series of react components

00:15:49,160 --> 00:15:53,420
it's kind of like bootstrap I guess in

00:15:51,380 --> 00:15:55,670
that respect based on atomic design

00:15:53,420 --> 00:15:59,090
principles I don't know what that is but

00:15:55,670 --> 00:16:00,770
go and check it out I'm more back in

00:15:59,090 --> 00:16:04,490
than fronting so yeah I blew me off and

00:16:00,770 --> 00:16:06,320
finally we have something called M shell

00:16:04,490 --> 00:16:07,760
which is an automation tool kit and I

00:16:06,320 --> 00:16:09,530
think the M shell is like it's basically

00:16:07,760 --> 00:16:11,780
codifying my lessons over the last five

00:16:09,530 --> 00:16:14,840
years from that moment where I broke a

00:16:11,780 --> 00:16:17,990
lie player and I was crying because it

00:16:14,840 --> 00:16:20,000
was down for a week to now all these

00:16:17,990 --> 00:16:21,500
things I have spoken about M shell just

00:16:20,000 --> 00:16:22,970
just for you like if you want to create

00:16:21,500 --> 00:16:25,160
a new micro service you type with like a

00:16:22,970 --> 00:16:27,500
nice command line it creates a node

00:16:25,160 --> 00:16:30,470
micro service will have monitoring it

00:16:27,500 --> 00:16:35,300
has tracing using x-ray it will have

00:16:30,470 --> 00:16:36,710
docker eyes builds and yeah so the idea

00:16:35,300 --> 00:16:38,900
is that you can take an idea to

00:16:36,710 --> 00:16:41,750
production in in an afternoon and I

00:16:38,900 --> 00:16:45,200
think every company should strive to

00:16:41,750 --> 00:16:46,030
build something like this and that was

00:16:45,200 --> 00:16:49,110
it

00:16:46,030 --> 00:16:54,720
any questions

00:16:49,110 --> 00:16:54,720

YouTube URL: https://www.youtube.com/watch?v=oy6J4Uh-_nk


