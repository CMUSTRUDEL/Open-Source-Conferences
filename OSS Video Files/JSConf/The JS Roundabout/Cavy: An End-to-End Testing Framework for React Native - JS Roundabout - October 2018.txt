Title: Cavy: An End-to-End Testing Framework for React Native - JS Roundabout - October 2018
Publication date: 2018-10-17
Playlist: The JS Roundabout
Description: 
	Presented by David Somers and Abigail McPhillips from Pixie Labs.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,089 --> 00:00:02,850
okay well we're here to tell you about a

00:00:01,530 --> 00:00:06,810
tool that we built for end-to-end

00:00:02,850 --> 00:00:09,179
testing in react native called Cavey we

00:00:06,810 --> 00:00:12,240
think it's kind of cool hopefully you

00:00:09,179 --> 00:00:16,949
will as well by the end of this but

00:00:12,240 --> 00:00:19,949
first just a little bit about us my name

00:00:16,949 --> 00:00:23,100
is David I'm the head of engineering at

00:00:19,949 --> 00:00:24,660
a company called pixie labs we're a

00:00:23,100 --> 00:00:27,060
software development software

00:00:24,660 --> 00:00:29,099
development agency base just down the

00:00:27,060 --> 00:00:32,460
road actually it was a very easy walk

00:00:29,099 --> 00:00:34,410
here today and my name is Abigail and

00:00:32,460 --> 00:00:38,489
I'm also a software developer at Pixy

00:00:34,410 --> 00:00:39,930
Labs working a deal is cool that was

00:00:38,489 --> 00:00:41,640
easy

00:00:39,930 --> 00:00:46,050
so we're gonna tell you a little bit

00:00:41,640 --> 00:00:49,920
about what kV is and why we think that

00:00:46,050 --> 00:00:51,420
you need it and we'll tell you a little

00:00:49,920 --> 00:00:53,879
bit about how we built it and kind of

00:00:51,420 --> 00:00:56,399
how it works and then if the demo gods

00:00:53,879 --> 00:00:59,219
are on our side then we're gonna do a

00:00:56,399 --> 00:01:00,180
little bit of live coding which should

00:00:59,219 --> 00:01:02,850
be fun

00:01:00,180 --> 00:01:04,619
and then we'll talk a little bit about

00:01:02,850 --> 00:01:06,210
sort of plans we've got for the future

00:01:04,619 --> 00:01:08,850
as well and sort of where we're kind of

00:01:06,210 --> 00:01:11,880
going with it I drew the short straw for

00:01:08,850 --> 00:01:17,220
the live demo this time so Abigail gets

00:01:11,880 --> 00:01:21,000
to talk to you about kayvyun said cool

00:01:17,220 --> 00:01:24,420
so first off what is Katie this guy is

00:01:21,000 --> 00:01:26,070
kV and before anybody asked he's not

00:01:24,420 --> 00:01:29,880
supposed to be a bear he's supposed to

00:01:26,070 --> 00:01:31,560
be some kind of capybara s creature I am

00:01:29,880 --> 00:01:34,079
NOT designer and I got task of making a

00:01:31,560 --> 00:01:35,689
snowgo so we're stuck with this slightly

00:01:34,079 --> 00:01:38,400
creepy Deaf's

00:01:35,689 --> 00:01:42,799
capybara thing anyway we're going with

00:01:38,400 --> 00:01:45,479
it and we've got badges so anyway Devi

00:01:42,799 --> 00:01:47,880
was Ana born out of our belief that

00:01:45,479 --> 00:01:50,159
there must be some kind of simple and

00:01:47,880 --> 00:01:53,100
clean solution to testing multiple react

00:01:50,159 --> 00:01:56,159
native components and that's what kV is

00:01:53,100 --> 00:01:59,040
so it's end-to-end it's open sourced and

00:01:56,159 --> 00:02:01,520
it doesn't touch any native code so

00:01:59,040 --> 00:02:04,530
because it doesn't touch any native code

00:02:01,520 --> 00:02:07,469
it's exactly the same on Android and iOS

00:02:04,530 --> 00:02:11,220
so you set up your tests once you write

00:02:07,469 --> 00:02:12,250
one set of tests and it works exactly

00:02:11,220 --> 00:02:14,950
the same cost

00:02:12,250 --> 00:02:17,590
form you can also run your test in a

00:02:14,950 --> 00:02:19,720
simulator on a real device and quickly

00:02:17,590 --> 00:02:23,860
in a CI environment which is something

00:02:19,720 --> 00:02:27,250
that we're really after so why do we

00:02:23,860 --> 00:02:28,720
need kV I might not convince those who

00:02:27,250 --> 00:02:31,960
think testing is just a waste of time

00:02:28,720 --> 00:02:33,430
anyway but yeah aren't there already

00:02:31,960 --> 00:02:39,640
enough testing frameworks out there

00:02:33,430 --> 00:02:41,950
already so let's start with what is what

00:02:39,640 --> 00:02:44,950
is it out there so for unit testing at

00:02:41,950 --> 00:02:47,650
Pixy Labs we use just so how many of you

00:02:44,950 --> 00:02:50,950
have used just before yeah looks like

00:02:47,650 --> 00:02:53,200
it's the one right so dust is like the

00:02:50,950 --> 00:02:56,860
recommended testing framework for react

00:02:53,200 --> 00:02:59,200
native so it comes with a full like

00:02:56,860 --> 00:03:01,780
mocking support assertion library

00:02:59,200 --> 00:03:03,610
everything a test runner and it also

00:03:01,780 --> 00:03:06,280
allows you to do snapshot testing which

00:03:03,610 --> 00:03:09,100
is really cool for react native and

00:03:06,280 --> 00:03:11,770
snapshot testing is where you it takes

00:03:09,100 --> 00:03:14,920
like a caches a JSON representation of

00:03:11,770 --> 00:03:16,060
your app in a specified state and then

00:03:14,920 --> 00:03:18,330
you compare it to one that you've taken

00:03:16,060 --> 00:03:20,739
earlier and if there's any differences

00:03:18,330 --> 00:03:22,690
then you decide whether that is an

00:03:20,739 --> 00:03:24,370
actual regression error or whether that

00:03:22,690 --> 00:03:27,489
was a actual change that you made to

00:03:24,370 --> 00:03:29,380
your app we also use enzyme at Pixy Labs

00:03:27,489 --> 00:03:33,010
which is another JavaScript testing

00:03:29,380 --> 00:03:34,690
framework and it can be used with just

00:03:33,010 --> 00:03:37,630
and it gives you the ability to shall i

00:03:34,690 --> 00:03:40,269
render components so again it's unit

00:03:37,630 --> 00:03:41,650
testing it kind of just allows you to

00:03:40,269 --> 00:03:44,500
test that the correct components are

00:03:41,650 --> 00:03:47,890
being rendered at that time so these are

00:03:44,500 --> 00:03:50,709
all great tools for unit testing or can

00:03:47,890 --> 00:03:55,330
be used in CI but again or just like

00:03:50,709 --> 00:03:57,959
unit testing components of your app so

00:03:55,330 --> 00:04:00,549
what about end-to-end testing

00:03:57,959 --> 00:04:02,590
unlike unit testing when we were

00:04:00,549 --> 00:04:05,260
developing with react native it was a

00:04:02,590 --> 00:04:07,799
lot harder to decide what kind of and

00:04:05,260 --> 00:04:09,760
and testing framework we should go with

00:04:07,799 --> 00:04:12,730
there are a couple of things out there

00:04:09,760 --> 00:04:16,269
and the first one that we looked into is

00:04:12,730 --> 00:04:19,930
appium we found that overhead for

00:04:16,269 --> 00:04:22,270
setting up a p.m. to be quite large it

00:04:19,930 --> 00:04:23,350
also uses native hooks to access the

00:04:22,270 --> 00:04:25,690
components in your

00:04:23,350 --> 00:04:27,100
so it doesn't work identically

00:04:25,690 --> 00:04:30,880
cross-platform you have to set it up

00:04:27,100 --> 00:04:32,860
twice once for iOS once for Android and

00:04:30,880 --> 00:04:34,630
it needs some knowledge of native code

00:04:32,860 --> 00:04:38,560
and as JavaScript developers who are

00:04:34,630 --> 00:04:41,770
like now so the same food calabash and

00:04:38,560 --> 00:04:43,830
cucumber like they actually allow you to

00:04:41,770 --> 00:04:47,680
write really nice human readable specs

00:04:43,830 --> 00:04:49,840
but again it does use native hooks to

00:04:47,680 --> 00:04:53,290
access your components so it's calabash

00:04:49,840 --> 00:04:54,960
iOS calabash androids different setups

00:04:53,290 --> 00:04:58,360
for each platform

00:04:54,960 --> 00:05:01,270
so whereas appium and calabash they were

00:04:58,360 --> 00:05:03,190
designed to test native apps the last

00:05:01,270 --> 00:05:05,200
one we looked at was detox and that was

00:05:03,190 --> 00:05:09,010
actually specifically or more designed

00:05:05,200 --> 00:05:10,840
to be used with react native but detox

00:05:09,010 --> 00:05:14,350
doesn't actually support Android yet

00:05:10,840 --> 00:05:17,830
which is bit of a blue and you can't

00:05:14,350 --> 00:05:20,470
mine it on devices so it also still uses

00:05:17,830 --> 00:05:23,830
a native component and so there's two

00:05:20,470 --> 00:05:25,060
setups for that as well so I'm not

00:05:23,830 --> 00:05:27,220
finding anything that we were

00:05:25,060 --> 00:05:28,900
particularly happy with we felt that

00:05:27,220 --> 00:05:31,750
there was a gap in the react native

00:05:28,900 --> 00:05:34,030
testing ecosystem and we gave ourselves

00:05:31,750 --> 00:05:34,690
one week of deaf time to come up with

00:05:34,030 --> 00:05:39,670
something better

00:05:34,690 --> 00:05:42,640
and hence kV was born so yeah we think

00:05:39,670 --> 00:05:45,820
AV is pretty cool and say do a couple of

00:05:42,640 --> 00:05:46,900
other people to you and actually we

00:05:45,820 --> 00:05:49,540
already know of companies that are using

00:05:46,900 --> 00:05:54,400
it in their production codes like not

00:05:49,540 --> 00:05:55,900
including ourselves which is cool so

00:05:54,400 --> 00:05:57,250
just before you get on to the demo I

00:05:55,900 --> 00:06:00,940
want to go through a little bit of how

00:05:57,250 --> 00:06:03,160
kV works behind the scenes and actually

00:06:00,940 --> 00:06:04,720
it's quite simple so there's just like

00:06:03,160 --> 00:06:10,720
three main components that you need to

00:06:04,720 --> 00:06:12,130
setup so first of all they are these

00:06:10,720 --> 00:06:15,460
things that we're going to refer to as

00:06:12,130 --> 00:06:17,080
the test hooks and you attach these

00:06:15,460 --> 00:06:19,320
through your components that you want to

00:06:17,080 --> 00:06:23,710
access and manipulate in your test and

00:06:19,320 --> 00:06:26,010
to do this kV provides you with this ref

00:06:23,710 --> 00:06:28,510
generating function generate tastic and

00:06:26,010 --> 00:06:31,360
to hook up your components you just pass

00:06:28,510 --> 00:06:33,430
this in to the ref and it takes the

00:06:31,360 --> 00:06:34,070
string identifier so anything you want

00:06:33,430 --> 00:06:36,700
to

00:06:34,070 --> 00:06:39,200
be able to refer to you in your tests

00:06:36,700 --> 00:06:44,060
they say we'll be able to call senior

00:06:39,200 --> 00:06:45,200
input so Kaylee adds this reference that

00:06:44,060 --> 00:06:47,750
you've given it together with the

00:06:45,200 --> 00:06:50,240
component itself into what we call the

00:06:47,750 --> 00:06:52,220
test hooks store and that's basically

00:06:50,240 --> 00:06:56,900
where all the components are stored for

00:06:52,220 --> 00:06:58,660
access later on in your tests so second

00:06:56,900 --> 00:07:01,220
of all you get some helper functions and

00:06:58,660 --> 00:07:03,260
if any of you are familiar with like

00:07:01,220 --> 00:07:06,740
jasmine or walk or r-spec these gonna

00:07:03,260 --> 00:07:08,690
look super similar to that and so at the

00:07:06,740 --> 00:07:10,250
moment we've kind of focused on ones

00:07:08,690 --> 00:07:11,720
that we thought were most useful and

00:07:10,250 --> 00:07:14,750
they're ones that we come across most

00:07:11,720 --> 00:07:16,820
often when we testing our app so for

00:07:14,750 --> 00:07:19,910
example like this is would be your spec

00:07:16,820 --> 00:07:23,060
file so you're describing my feature

00:07:19,910 --> 00:07:26,390
you're testing that it works by filling

00:07:23,060 --> 00:07:29,120
in a text input with hello pressing a C

00:07:26,390 --> 00:07:31,070
button and expecting some kind of next

00:07:29,120 --> 00:07:33,230
scene to exist so they're all the

00:07:31,070 --> 00:07:36,530
references that we've previously hooked

00:07:33,230 --> 00:07:40,310
up our components with so yeah it's

00:07:36,530 --> 00:07:42,140
actually quite simple to also create

00:07:40,310 --> 00:07:43,700
your own helper functions if you needed

00:07:42,140 --> 00:07:44,300
them say we needed like a swipe or

00:07:43,700 --> 00:07:47,210
something

00:07:44,300 --> 00:07:52,010
and KB allows you to create those

00:07:47,210 --> 00:07:54,170
yourselves custom functions so the third

00:07:52,010 --> 00:07:56,660
thing that you need to be aware of is

00:07:54,170 --> 00:07:58,220
the wrapper component and this is

00:07:56,660 --> 00:08:02,900
probably the most kind of abstract part

00:07:58,220 --> 00:08:03,980
of KD but really all it does is well it

00:08:02,900 --> 00:08:06,800
kind of just brings everything together

00:08:03,980 --> 00:08:09,470
so you can see here it's imported as

00:08:06,800 --> 00:08:11,150
test at the top from kV and you

00:08:09,470 --> 00:08:13,100
basically wrap your entire app in this

00:08:11,150 --> 00:08:15,790
test a component at the highest level so

00:08:13,100 --> 00:08:18,770
you see here tester is wrapping my app

00:08:15,790 --> 00:08:20,150
which is at the highest level and the

00:08:18,770 --> 00:08:21,620
most important thing that the tester

00:08:20,150 --> 00:08:24,380
does really does a couple of things is

00:08:21,620 --> 00:08:26,090
it automatically runs your tests so here

00:08:24,380 --> 00:08:28,670
it's pasty and there's an array your app

00:08:26,090 --> 00:08:31,190
spec you've got info app app speck from

00:08:28,670 --> 00:08:34,310
your specs folder passed into the tester

00:08:31,190 --> 00:08:37,490
component as an array of specs and

00:08:34,310 --> 00:08:41,180
tester will allow this to be run and the

00:08:37,490 --> 00:08:43,280
tester also makes the test X store so

00:08:41,180 --> 00:08:45,860
that was the the store of components

00:08:43,280 --> 00:08:47,700
along with side there reps available to

00:08:45,860 --> 00:08:49,680
your app so here you can see

00:08:47,700 --> 00:08:51,660
test text or being imported from kV and

00:08:49,680 --> 00:08:57,860
passed into the tester component as a

00:08:51,660 --> 00:09:01,380
prop so lastly how do we run the thing

00:08:57,860 --> 00:09:05,520
so as I just said the tester component

00:09:01,380 --> 00:09:07,470
means that your tests are run by default

00:09:05,520 --> 00:09:10,500
when your app boots but there's also

00:09:07,470 --> 00:09:12,690
something we've made called KD CLI so

00:09:10,500 --> 00:09:15,030
come on light interface which you can

00:09:12,690 --> 00:09:17,010
also use to run your test locally but

00:09:15,030 --> 00:09:19,710
crucially you can also run it in your CI

00:09:17,010 --> 00:09:21,840
environment so you can use kV CLI in

00:09:19,710 --> 00:09:27,120
your test script for succour CI for

00:09:21,840 --> 00:09:29,240
example so without further ado I will

00:09:27,120 --> 00:09:32,640
hand over for David

00:09:29,240 --> 00:09:34,170
you get to hold my mic though we didn't

00:09:32,640 --> 00:09:36,690
plan for having like a handheld mic

00:09:34,170 --> 00:09:39,260
rather than a lapel mic so this this

00:09:36,690 --> 00:09:39,260
could be awkward

00:09:39,650 --> 00:09:44,780
well one-handed coding good show oh yeah

00:09:43,440 --> 00:09:48,990
I could try okay

00:09:44,780 --> 00:09:50,550
so can everyone see that okay I know

00:09:48,990 --> 00:09:52,710
that the the simulator is a little bit

00:09:50,550 --> 00:09:56,340
small but I can't remember how to make

00:09:52,710 --> 00:09:59,630
the simulator bigger so we've got this

00:09:56,340 --> 00:10:02,550
tiny little app which is kind of like a

00:09:59,630 --> 00:10:04,710
mat like a sample app that we use for K

00:10:02,550 --> 00:10:06,630
V and imagine this is kind of like an

00:10:04,710 --> 00:10:11,220
employee list but actually all my

00:10:06,630 --> 00:10:12,890
employees are cavies and I can I can

00:10:11,220 --> 00:10:17,070
filter this list so I can search for

00:10:12,890 --> 00:10:19,410
someone I can tap on an employee and

00:10:17,070 --> 00:10:22,560
then when I do I can see some actions to

00:10:19,410 --> 00:10:25,050
go and email that that kV or and see

00:10:22,560 --> 00:10:27,120
also the people that report to them so

00:10:25,050 --> 00:10:29,970
just kind of like a little sample app

00:10:27,120 --> 00:10:31,650
essentially and this is cool but now we

00:10:29,970 --> 00:10:34,080
want to test this right we want to see

00:10:31,650 --> 00:10:35,400
if this you know we want to have some

00:10:34,080 --> 00:10:36,540
test to make sure that this app works I

00:10:35,400 --> 00:10:42,060
mean it's fairly obvious it works but

00:10:36,540 --> 00:10:44,670
let's just go with it here so the first

00:10:42,060 --> 00:10:50,640
thing we need to do is just go ahead and

00:10:44,670 --> 00:10:54,750
add kV as a dependency and there's no

00:10:50,640 --> 00:10:56,730
need to do any kind of like thanks Babel

00:10:54,750 --> 00:10:58,740
there's no need to do any kind of react

00:10:56,730 --> 00:11:01,410
native link it's just JavaScript there's

00:10:58,740 --> 00:11:04,740
no native components of this at all

00:11:01,410 --> 00:11:06,389
so now we need to the first thing we

00:11:04,740 --> 00:11:10,350
need to do is we need to wrap our app in

00:11:06,389 --> 00:11:12,449
that tester component so just for those

00:11:10,350 --> 00:11:14,639
that aren't super familiar with sort of

00:11:12,449 --> 00:11:15,959
react native file structure is that is

00:11:14,639 --> 00:11:18,119
that visible up there can everyone see

00:11:15,959 --> 00:11:21,959
is it yeah all good all good at the back

00:11:18,119 --> 00:11:24,269
great so we've got a couple of folders

00:11:21,959 --> 00:11:25,889
that for the native code in a react

00:11:24,269 --> 00:11:27,480
native apps so that Android folder and

00:11:25,889 --> 00:11:31,079
the iOS folder we won't be doing

00:11:27,480 --> 00:11:33,749
anything with those then we've got an

00:11:31,079 --> 00:11:36,600
app folder which is where our actual

00:11:33,749 --> 00:11:40,709
apps Java Script is so things like are

00:11:36,600 --> 00:11:44,459
our actual react components then we've

00:11:40,709 --> 00:11:46,379
got the index J s and that's the entry

00:11:44,459 --> 00:11:48,360
point right for our app and this is the

00:11:46,379 --> 00:11:50,009
first javascript file that react native

00:11:48,360 --> 00:11:52,079
is going to load when the app boots and

00:11:50,009 --> 00:11:56,730
so this is where we need to wrap our app

00:11:52,079 --> 00:11:58,290
in the tester component from Katie I've

00:11:56,730 --> 00:12:01,079
got notes so that I try not so screw

00:11:58,290 --> 00:12:03,679
this up so first of all we need to

00:12:01,079 --> 00:12:06,959
import that tester and test hooks store

00:12:03,679 --> 00:12:09,749
if I make any typos then just like

00:12:06,959 --> 00:12:13,199
heckle me so that I know that I've done

00:12:09,749 --> 00:12:16,110
something wrong so I'm gonna import the

00:12:13,199 --> 00:12:22,559
tester and test extort from KB I'm gonna

00:12:16,110 --> 00:12:24,120
make a new test hooks tour and then I

00:12:22,559 --> 00:12:25,439
also need to import reacts because we

00:12:24,120 --> 00:12:28,970
don't actually have a react component in

00:12:25,439 --> 00:12:28,970
here yeah nearly

00:12:30,709 --> 00:12:34,740
all right and now we need to basically

00:12:33,240 --> 00:12:36,929
we need to make a small little apt

00:12:34,740 --> 00:12:42,889
wrapper here where's my escape of there

00:12:36,929 --> 00:12:42,889
it is so I'm gonna make an app wrapper

00:12:43,970 --> 00:12:50,999
and yet this is gonna wrap my app in the

00:12:48,929 --> 00:12:53,040
tester component so I'm for now because

00:12:50,999 --> 00:12:56,339
we haven't got any specs yeah I'm just

00:12:53,040 --> 00:12:59,790
gonna pass in an empty array and then

00:12:56,339 --> 00:13:03,049
I'm gonna oh so did someone was that a

00:12:59,790 --> 00:13:03,049
typo heckle

00:13:04,990 --> 00:13:09,060
oh yeah no no no you're right yep

00:13:09,420 --> 00:13:14,770
excellent thank you

00:13:11,080 --> 00:13:18,250
perfect and then I need to pass in my

00:13:14,770 --> 00:13:19,630
instance of the attest extort and for

00:13:18,250 --> 00:13:22,120
dem there's a bunch of other props that

00:13:19,630 --> 00:13:24,010
kV gives you I'm gonna use the wait time

00:13:22,120 --> 00:13:25,990
one here which just pauses between each

00:13:24,010 --> 00:13:28,350
test run just kind of for demo purposes

00:13:25,990 --> 00:13:31,930
because otherwise it goes a little quick

00:13:28,350 --> 00:13:35,470
and then I'm gonna render that my actual

00:13:31,930 --> 00:13:38,770
app the employee directory app great and

00:13:35,470 --> 00:13:40,240
then I just need to change the that this

00:13:38,770 --> 00:13:42,430
app registry line I don't know if you've

00:13:40,240 --> 00:13:44,620
used them if you only use like create

00:13:42,430 --> 00:13:47,050
react native app or Expo you may not

00:13:44,620 --> 00:13:48,370
have done stuff with that registry kind

00:13:47,050 --> 00:13:50,649
of thing it's basically just the way of

00:13:48,370 --> 00:13:52,660
registering the app and indicating to

00:13:50,649 --> 00:13:55,690
the native layer that it's that this is

00:13:52,660 --> 00:13:57,040
your kind of entry point for that app so

00:13:55,690 --> 00:13:59,370
I just need to change that to instead of

00:13:57,040 --> 00:14:02,910
being our app it's now this wrapper and

00:13:59,370 --> 00:14:06,250
then in theory nothing should change and

00:14:02,910 --> 00:14:09,550
that app will still work great so

00:14:06,250 --> 00:14:12,339
everything is still exactly the same and

00:14:09,550 --> 00:14:16,899
so now we need to decide like what what

00:14:12,339 --> 00:14:18,100
do we want to test so let's say that we

00:14:16,899 --> 00:14:19,660
want to test that filtering this

00:14:18,100 --> 00:14:21,940
Employee List works like I can type

00:14:19,660 --> 00:14:24,010
something into the search bar and it

00:14:21,940 --> 00:14:26,230
changes what what is listed and then I

00:14:24,010 --> 00:14:30,520
can test that tapping on an employee

00:14:26,230 --> 00:14:31,750
shows a shows the email button so what I

00:14:30,520 --> 00:14:33,670
need to do is I need to go and find

00:14:31,750 --> 00:14:36,130
those components and I need to add them

00:14:33,670 --> 00:14:37,660
as a as a hook like I need to hook them

00:14:36,130 --> 00:14:39,339
in so that they're available in that

00:14:37,660 --> 00:14:42,880
test book store and available in my

00:14:39,339 --> 00:14:44,709
specs so I'll go and do the the search

00:14:42,880 --> 00:14:48,520
bar so if we go and find the search bar

00:14:44,709 --> 00:14:51,610
here and the first thing I need to do is

00:14:48,520 --> 00:14:53,260
I need to import hook from KB and that's

00:14:51,610 --> 00:14:55,360
the that's Kaylee's kind of higher-order

00:14:53,260 --> 00:14:57,209
component that makes the testator and

00:14:55,360 --> 00:15:01,570
gives you that generate test hook

00:14:57,209 --> 00:15:04,180
function and then we want to interact

00:15:01,570 --> 00:15:10,029
with the text input down here so I'm

00:15:04,180 --> 00:15:11,320
gonna add I'm going to add a ref and I'm

00:15:10,029 --> 00:15:13,390
going to pass in our ref generating

00:15:11,320 --> 00:15:15,560
function and then I can give it an

00:15:13,390 --> 00:15:17,600
identifier that I'm going to use in

00:15:15,560 --> 00:15:19,190
test and that can be anything it's just

00:15:17,600 --> 00:15:20,990
a string you can use any kind of

00:15:19,190 --> 00:15:26,360
convention you want i'm in this case i'm

00:15:20,990 --> 00:15:29,390
gonna say search bar text input and then

00:15:26,360 --> 00:15:31,910
at the end of my components i just need

00:15:29,390 --> 00:15:36,890
to export the wrapped version of search

00:15:31,910 --> 00:15:38,750
bar instead of the original component so

00:15:36,890 --> 00:15:41,990
that's one i would also need to do the

00:15:38,750 --> 00:15:44,330
employee list item so that i can tap on

00:15:41,990 --> 00:15:46,910
an employee and an employee get kv in

00:15:44,330 --> 00:15:48,800
the list and i also need to hook up that

00:15:46,910 --> 00:15:50,779
email button so that i can see that it's

00:15:48,800 --> 00:15:52,220
there i'm going to kind of cheat a

00:15:50,779 --> 00:16:00,710
little bit here and not type all of that

00:15:52,220 --> 00:16:01,880
out great done so now if we go if we go

00:16:00,710 --> 00:16:03,710
and have a look in this employee list

00:16:01,880 --> 00:16:06,170
item for example you can now see we've

00:16:03,710 --> 00:16:08,779
got this props generate test hook i'm

00:16:06,170 --> 00:16:11,779
doing kind of a weird thing here to keep

00:16:08,779 --> 00:16:14,750
things simple I'm making a synthetic

00:16:11,779 --> 00:16:17,270
like test ID from the first name and

00:16:14,750 --> 00:16:19,430
last name of the kV so that I can

00:16:17,270 --> 00:16:21,370
identify a particular one on the screen

00:16:19,430 --> 00:16:23,330
and interact with that specific one you

00:16:21,370 --> 00:16:27,589
could really do whatever you wanted

00:16:23,330 --> 00:16:30,230
there and then I've also there's also

00:16:27,589 --> 00:16:32,510
the same in the action bar so where's

00:16:30,230 --> 00:16:34,010
that email button here it is so we've

00:16:32,510 --> 00:16:36,200
got the email button here little image

00:16:34,010 --> 00:16:38,480
and a piece of text and that's also got

00:16:36,200 --> 00:16:45,370
a generate test hook here action bar

00:16:38,480 --> 00:16:45,370
email button alright where are we up to

00:16:46,510 --> 00:16:53,690
okay so now we've wrapped our app in the

00:16:50,540 --> 00:16:55,820
tester kind of abstract component we've

00:16:53,690 --> 00:16:58,520
hooked up there the components that we

00:16:55,820 --> 00:17:02,000
want to interact with in our tests so

00:16:58,520 --> 00:17:04,699
the next step is to write our tests so

00:17:02,000 --> 00:17:05,959
I'm going to make a specs folder and

00:17:04,699 --> 00:17:08,870
then in there I'm going to add an

00:17:05,959 --> 00:17:11,600
employee list spec and this is going to

00:17:08,870 --> 00:17:14,780
look quite a lot like Abigail's example

00:17:11,600 --> 00:17:17,329
not a capital e so these are just

00:17:14,780 --> 00:17:21,709
functions that cavies going to run for

00:17:17,329 --> 00:17:24,670
us and I'm gonna say that when I list

00:17:21,709 --> 00:17:24,670
the employees

00:17:26,130 --> 00:17:35,540
it filters the list by search input so

00:17:33,060 --> 00:17:38,250
all of these are all of your specs are

00:17:35,540 --> 00:17:41,310
like a sink you can use async and await

00:17:38,250 --> 00:17:42,870
and the reason for that is obviously to

00:17:41,310 --> 00:17:44,610
avoid some of the cool back soup and

00:17:42,870 --> 00:17:46,320
because cavies going to wait for each

00:17:44,610 --> 00:17:48,120
it's gonna give a little bit of time for

00:17:46,320 --> 00:17:49,440
your app to render or for you know

00:17:48,120 --> 00:17:52,110
elements to appear and stuff like that

00:17:49,440 --> 00:17:55,230
if you've ever done any kind of like you

00:17:52,110 --> 00:17:56,640
know like feature tests where you've

00:17:55,230 --> 00:17:58,230
been interacting with a website you know

00:17:56,640 --> 00:17:59,430
it's fairly standard that a test

00:17:58,230 --> 00:18:01,290
framework is going to wait a little bit

00:17:59,430 --> 00:18:03,780
for something to happen before it gives

00:18:01,290 --> 00:18:06,690
up looking for a component or pressing a

00:18:03,780 --> 00:18:08,910
button or whatever so all of these all

00:18:06,690 --> 00:18:11,940
of these calls are pre first prefaced

00:18:08,910 --> 00:18:15,630
with await so I'm going to check first

00:18:11,940 --> 00:18:17,280
of all that where are we employee list

00:18:15,630 --> 00:18:20,670
I'm going to check first that Jim Cavey

00:18:17,280 --> 00:18:30,090
is on the screen and then I'm gonna fill

00:18:20,670 --> 00:18:35,460
in my text input with Amy and then I'm

00:18:30,090 --> 00:18:39,720
gonna check that that Jim Cavey is now

00:18:35,460 --> 00:18:43,110
no longer on the e on the PIP on the

00:18:39,720 --> 00:18:49,010
screen and then I'm gonna check that Amy

00:18:43,110 --> 00:18:52,470
still is okay

00:18:49,010 --> 00:18:56,820
so I've written my first little test and

00:18:52,470 --> 00:18:58,740
now I need to go back to my to my tester

00:18:56,820 --> 00:19:01,980
and add that as one of the specs to run

00:18:58,740 --> 00:19:04,200
to the to the tester component so I'm

00:19:01,980 --> 00:19:06,000
going to implore import Simplot I'm

00:19:04,200 --> 00:19:12,420
going to import my importing employee

00:19:06,000 --> 00:19:17,000
list spec try saying that fast and then

00:19:12,420 --> 00:19:17,000
I'm going to add that as one of my specs

00:19:18,330 --> 00:19:22,860
okay and then in theory if I've not made

00:19:21,120 --> 00:19:25,940
any mistakes and no one's no one said

00:19:22,860 --> 00:19:28,680
anything then when I reload the app

00:19:25,940 --> 00:19:30,600
cavies going to boot up and then it's

00:19:28,680 --> 00:19:32,100
gonna run that test and you can kind of

00:19:30,600 --> 00:19:34,200
its kind of quick there so I'm just

00:19:32,100 --> 00:19:35,910
gonna do that again you can see it's

00:19:34,200 --> 00:19:37,620
typing in Amy into the search bar and

00:19:35,910 --> 00:19:39,150
then checking that checking that the

00:19:37,620 --> 00:19:42,330
elements have appeared or disappeared

00:19:39,150 --> 00:19:43,530
and then in the console we can see that

00:19:42,330 --> 00:19:47,250
it's reporting yep

00:19:43,530 --> 00:19:48,870
everything's cool and just to show that

00:19:47,250 --> 00:19:51,120
this isn't complete smoke and mirrors

00:19:48,870 --> 00:19:54,510
and it doesn't always pass I'm going to

00:19:51,120 --> 00:19:57,780
write another test and I'm gonna do that

00:19:54,510 --> 00:19:59,280
not in describe actually yeah I'm going

00:19:57,780 --> 00:20:01,850
to test that email button appears when

00:19:59,280 --> 00:20:08,720
you transition from one view to the next

00:20:01,850 --> 00:20:16,560
so let's say tapping on an employee it

00:20:08,720 --> 00:20:19,980
shows their email button so I'm gonna

00:20:16,560 --> 00:20:23,330
say what was it does it press this is

00:20:19,980 --> 00:20:23,330
why I didn't this is why I wrote it down

00:20:23,870 --> 00:20:28,290
so I'm going to I'm going to press on

00:20:26,460 --> 00:20:32,010
that Amy Taylor entry in the employee

00:20:28,290 --> 00:20:36,920
list and then I'm gonna pause for a

00:20:32,010 --> 00:20:36,920
moment and then I'm gonna check that

00:20:37,130 --> 00:20:42,480
about that action bar email button but

00:20:40,500 --> 00:20:47,330
I'm gonna make a typo so I'm gonna I'm

00:20:42,480 --> 00:20:50,910
gonna accidentally put email but oh and

00:20:47,330 --> 00:20:52,530
then if we run this again does that look

00:20:50,910 --> 00:20:54,660
right but does anyone think I've made a

00:20:52,530 --> 00:20:58,770
mistake apart from the part from the

00:20:54,660 --> 00:21:00,720
typo okay no one's saying anything so if

00:20:58,770 --> 00:21:02,700
I run this again then we can see that it

00:21:00,720 --> 00:21:05,040
runs that first test it resets the app

00:21:02,700 --> 00:21:06,570
it runs the second test but then now we

00:21:05,040 --> 00:21:08,310
get an error and it says that it

00:21:06,570 --> 00:21:10,800
couldn't find a component on the stream

00:21:08,310 --> 00:21:15,810
with that identifier action by email but

00:21:10,800 --> 00:21:18,110
oh so I can go and fix that and run it

00:21:15,810 --> 00:21:18,110
again

00:21:20,090 --> 00:21:27,869
and raah whoop I have successfully

00:21:25,710 --> 00:21:33,570
tested my app and I'm a successful

00:21:27,869 --> 00:21:37,350
developer so it's kind of like a quick

00:21:33,570 --> 00:21:39,149
whistle stop demo of kV I don't this

00:21:37,350 --> 00:21:41,340
would have also works on Android as well

00:21:39,149 --> 00:21:42,659
because it's just JavaScript right

00:21:41,340 --> 00:21:44,490
there's no native component there's

00:21:42,659 --> 00:21:45,570
nothing kind of weird going on so

00:21:44,490 --> 00:21:50,369
everything would have worked in Android

00:21:45,570 --> 00:21:53,669
as well and also again don't have time

00:21:50,369 --> 00:21:55,860
to demo it but it does also work in in a

00:21:53,669 --> 00:21:58,139
continuous integration environment we've

00:21:55,860 --> 00:21:59,999
got we've actually got connect is that

00:21:58,139 --> 00:22:01,440
visible I don't know it's you can

00:21:59,999 --> 00:22:02,879
imagine if you've used circle CI you

00:22:01,440 --> 00:22:06,240
know what this looks like it's a passing

00:22:02,879 --> 00:22:08,759
circle CI built where this is actually

00:22:06,240 --> 00:22:10,619
testing kV itself so this is using a

00:22:08,759 --> 00:22:12,749
sample app to make sure that any changes

00:22:10,619 --> 00:22:14,600
that we make to kV everything still

00:22:12,749 --> 00:22:17,039
works okay and all the tests still pass

00:22:14,600 --> 00:22:18,570
so you can see this is actually a very

00:22:17,039 --> 00:22:21,360
simple config if I just swap to the

00:22:18,570 --> 00:22:23,970
config a second it's like it's a little

00:22:21,360 --> 00:22:25,769
bit smaller you make that bigger there's

00:22:23,970 --> 00:22:28,019
this configure is actually a little bit

00:22:25,769 --> 00:22:29,850
more comp complex than it needs to be

00:22:28,019 --> 00:22:32,159
because it's testing a local version of

00:22:29,850 --> 00:22:33,899
kV within the repository but you can see

00:22:32,159 --> 00:22:36,869
all it's doing is just installing the

00:22:33,899 --> 00:22:38,850
dependencies it's installing the sample

00:22:36,869 --> 00:22:41,159
app dependencies and then it's just

00:22:38,850 --> 00:22:44,009
running at the bottom here kV run iOS

00:22:41,159 --> 00:22:45,869
and then if we go back to the test

00:22:44,009 --> 00:22:48,480
summary and we look at that final

00:22:45,869 --> 00:22:50,519
command then we can see that right at

00:22:48,480 --> 00:22:53,700
the bottom here after compiling their

00:22:50,519 --> 00:22:55,379
app it's then launching it and then it

00:22:53,700 --> 00:22:57,450
basically listens for the test results

00:22:55,379 --> 00:22:59,460
so kV kind of expects there to be a sort

00:22:57,450 --> 00:23:01,289
of test server waiting for the responses

00:22:59,460 --> 00:23:04,710
and then when it receives it it then

00:23:01,289 --> 00:23:07,259
outputs it for the test log and also if

00:23:04,710 --> 00:23:09,149
it was successful or not successful then

00:23:07,259 --> 00:23:13,230
it would output with the correct error

00:23:09,149 --> 00:23:17,100
code so yes so that's that's kV that's

00:23:13,230 --> 00:23:18,960
what it looks like and so now back to

00:23:17,100 --> 00:23:22,399
Abigail to talk a little bit about the

00:23:18,960 --> 00:23:22,399
sort of future plans for kV

00:23:26,310 --> 00:23:32,500
all right so where is KB going next so

00:23:30,840 --> 00:23:35,170
first of all I'm going to talk about

00:23:32,500 --> 00:23:37,870
report generation and so as you saw in

00:23:35,170 --> 00:23:40,180
the demo KT kind of simply outputs the

00:23:37,870 --> 00:23:43,450
results to the console and when running

00:23:40,180 --> 00:23:44,830
kV CLI it just uses the exit code

00:23:43,450 --> 00:23:46,990
whether all the tests failed or passed

00:23:44,830 --> 00:23:49,120
and you see the kind of same console log

00:23:46,990 --> 00:23:52,240
at the end so what we'd really love to

00:23:49,120 --> 00:23:55,750
do is to add proper test reporting

00:23:52,240 --> 00:23:57,400
output so that your CI environment has

00:23:55,750 --> 00:24:00,460
kind of a richer view of which tests

00:23:57,400 --> 00:24:02,430
failed and passed so that's that and the

00:24:00,460 --> 00:24:05,230
second thing is conditional test running

00:24:02,430 --> 00:24:07,540
so obviously you saw when you boot your

00:24:05,230 --> 00:24:10,750
app the tests run by default which is

00:24:07,540 --> 00:24:12,490
not ideal for production and there are

00:24:10,750 --> 00:24:13,690
like a multi of different ways that you

00:24:12,490 --> 00:24:16,180
could handle that yourself

00:24:13,690 --> 00:24:17,500
by running configuring it to run

00:24:16,180 --> 00:24:19,510
differently in different environments

00:24:17,500 --> 00:24:21,610
but we really wanted that to be part of

00:24:19,510 --> 00:24:23,160
kV itself so you don't have to do that

00:24:21,610 --> 00:24:26,350
manually

00:24:23,160 --> 00:24:28,540
next up accessibility IDs so what makes

00:24:26,350 --> 00:24:30,070
the kind of native testing frameworks

00:24:28,540 --> 00:24:32,080
really good is that they can use

00:24:30,070 --> 00:24:34,690
accessibility IDs to access the

00:24:32,080 --> 00:24:36,610
components so that means you can just

00:24:34,690 --> 00:24:39,640
drop test IDs into your code rather than

00:24:36,610 --> 00:24:42,550
putting in like generate tests hook and

00:24:39,640 --> 00:24:45,550
passing in strings whatever there's a

00:24:42,550 --> 00:24:47,890
lot less intrusive than that so

00:24:45,550 --> 00:24:50,440
unfortunately we can't use these as a

00:24:47,890 --> 00:24:53,740
react native doesn't make accessibility

00:24:50,440 --> 00:24:55,180
IDs available to the JavaScript but

00:24:53,740 --> 00:24:57,370
there is I can open issue on react

00:24:55,180 --> 00:24:58,780
native to make that actually a thing so

00:24:57,370 --> 00:25:01,440
we're hopeful that in the future we

00:24:58,780 --> 00:25:04,630
would be able to use these as well

00:25:01,440 --> 00:25:06,160
lastly other platforms to react native

00:25:04,630 --> 00:25:07,960
is gaining support in other environments

00:25:06,160 --> 00:25:10,570
as well with things like we are native

00:25:07,960 --> 00:25:12,280
where the react native windows and in

00:25:10,570 --> 00:25:14,140
theory like you can use kV with any of

00:25:12,280 --> 00:25:16,780
these things but we don't like

00:25:14,140 --> 00:25:19,540
specifically support that yet Kate being

00:25:16,780 --> 00:25:22,660
kV CLI that's just another thing sort of

00:25:19,540 --> 00:25:25,300
on our roadmap to look at and see you

00:25:22,660 --> 00:25:27,970
lastly like we do have like a little

00:25:25,300 --> 00:25:30,140
road map on our github so any of you

00:25:27,970 --> 00:25:33,410
lovely guys would like to you know

00:25:30,140 --> 00:25:34,520
honda-san open-source software we we had

00:25:33,410 --> 00:25:37,580
media appreciate some help

00:25:34,520 --> 00:25:39,560
oh yeah we're like a friendly open

00:25:37,580 --> 00:25:42,320
source team so yeah every great so like

00:25:39,560 --> 00:25:43,210
work as any one of you Matt right thanks

00:25:42,320 --> 00:25:48,599
everyone

00:25:43,210 --> 00:25:48,599

YouTube URL: https://www.youtube.com/watch?v=VG6Jbe5M1XQ


