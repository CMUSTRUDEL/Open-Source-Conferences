Title: Microservices at Beamery - on the Front End - JS Roundabout - March 2019
Publication date: 2019-03-12
Playlist: The JS Roundabout
Description: 
	Jason Felix & Nick Johnson of Beamery

"At Beamery we had a large, AngularJS app, built over several years. Our clients were happy, but we were not. We had several problems:

Building new features was slow. AngularJS doesn’t scale nicely. Features clash with each other. Isolation doesn’t come as standard, you have to work hard to keep features separate. It takes time to get it right. Hiring was hard, for all the reasons listed above. The app was slower than it needed to be because AngularJS was never built for speed. We wanted to render half a million contacts, and Angular was fighting us all the way.

As time went by it become harder to find developers who would willingly choose AngularJS over React, Angular5, Vue, Aurelia or Polymer.

So we faced a choice. We could throw it all away and start again, we could upgrade to Angular 5, or the awesome option - we could use micro frontends. We chose the awesome option."

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:04,080
hey guys starts to come in my name is

00:00:02,280 --> 00:00:06,299
Jason Felix I'm a software engineer at B

00:00:04,080 --> 00:00:08,099
Murray and this is Nick Johnson he's the

00:00:06,299 --> 00:00:10,830
front end he needed to be Murray and

00:00:08,099 --> 00:00:16,049
he's gonna start you off hi folks how

00:00:10,830 --> 00:00:18,960
you doing you can keep that I've got one

00:00:16,049 --> 00:00:19,949
here so this is this is a slightly

00:00:18,960 --> 00:00:23,820
different talk we're going to be talking

00:00:19,949 --> 00:00:25,650
today about microbe front-ends so these

00:00:23,820 --> 00:00:29,519
are these are micro services but running

00:00:25,650 --> 00:00:30,840
in the browser which is a technology

00:00:29,519 --> 00:00:32,820
which we're using here and will explain

00:00:30,840 --> 00:00:34,230
to you of the course of this talk why

00:00:32,820 --> 00:00:37,110
we're using it and why we think it's the

00:00:34,230 --> 00:00:38,879
right thing to do this is a talking to

00:00:37,110 --> 00:00:41,040
parts so in minute I'm going to hand

00:00:38,879 --> 00:00:42,570
over to Jason he's going to talk about B

00:00:41,040 --> 00:00:44,579
Murray and the monolithic architecture

00:00:42,570 --> 00:00:47,820
that we started with effectively in one

00:00:44,579 --> 00:00:49,559
big app and then I'm gonna take over and

00:00:47,820 --> 00:00:51,120
I'm gonna take you through the the tech

00:00:49,559 --> 00:00:52,649
so we're gonna look at the architecture

00:00:51,120 --> 00:00:55,670
of the thing and then we're going to go

00:00:52,649 --> 00:00:56,879
down into the code does that sound okay

00:00:55,670 --> 00:00:59,219
brilliant

00:00:56,879 --> 00:01:03,210
alright so I'll hand over to Jason here

00:00:59,219 --> 00:01:05,460
we go hey guys also be emery be Murray's

00:01:03,210 --> 00:01:08,729
Italian engagement platform so it allows

00:01:05,460 --> 00:01:11,369
you to connect to your candidates and

00:01:08,729 --> 00:01:14,400
helps you keep track of their

00:01:11,369 --> 00:01:15,689
performance take those and basically

00:01:14,400 --> 00:01:22,020
just maintain a healthy relationship

00:01:15,689 --> 00:01:24,030
with them so the monolith so be memory

00:01:22,020 --> 00:01:25,740
one is bill in angular and it's a

00:01:24,030 --> 00:01:28,680
monolithic application so it's a single

00:01:25,740 --> 00:01:30,240
tier application this means that all of

00:01:28,680 --> 00:01:33,240
the components in this single

00:01:30,240 --> 00:01:36,030
application here is all in angular so if

00:01:33,240 --> 00:01:38,729
we wanted to migrate to a new framework

00:01:36,030 --> 00:01:41,189
or something it's kind of impossible to

00:01:38,729 --> 00:01:45,420
do with just one like just a single

00:01:41,189 --> 00:01:47,759
application after series a when we moved

00:01:45,420 --> 00:01:50,670
on to like when we went whilst moving

00:01:47,759 --> 00:01:53,820
forward the aim going forward to be

00:01:50,670 --> 00:01:54,420
Murray to was to move towards a new

00:01:53,820 --> 00:01:57,979
framework

00:01:54,420 --> 00:02:01,380
either that or upgrade to something like

00:01:57,979 --> 00:02:03,030
angular five the reason we don't we're

00:02:01,380 --> 00:02:05,280
not too sure about doing that is because

00:02:03,030 --> 00:02:10,229
the path to migrate into angular 5 is

00:02:05,280 --> 00:02:12,350
not as easy as migrating just to a new

00:02:10,229 --> 00:02:15,840
framework so

00:02:12,350 --> 00:02:17,160
ownership ownership is extremely hard

00:02:15,840 --> 00:02:20,910
when you've got one single application

00:02:17,160 --> 00:02:23,700
so if you've got a team working on the

00:02:20,910 --> 00:02:27,930
title bar the mid the main grid the

00:02:23,700 --> 00:02:30,990
sidebar or the nav bar it means there's

00:02:27,930 --> 00:02:32,880
there's a high chance that the team's

00:02:30,990 --> 00:02:34,740
will cross CRO like step on each other's

00:02:32,880 --> 00:02:39,090
feet when they push into a single repo

00:02:34,740 --> 00:02:42,420
so say for example you've got somebody

00:02:39,090 --> 00:02:44,370
working on the the grid and you've got

00:02:42,420 --> 00:02:46,100
somebody working on within that wall and

00:02:44,370 --> 00:02:48,750
they using their they use the same store

00:02:46,100 --> 00:02:51,510
if they're pushing code they mode they

00:02:48,750 --> 00:02:54,600
may both change similar parts of it and

00:02:51,510 --> 00:02:56,340
it will make it awkward to like have to

00:02:54,600 --> 00:02:58,980
merge them together and things instead

00:02:56,340 --> 00:03:01,110
of doing that if you could somehow build

00:02:58,980 --> 00:03:03,150
an interface and let them communicate

00:03:01,110 --> 00:03:08,130
with each other separately that would be

00:03:03,150 --> 00:03:11,400
a lot more efficient also angular 1 is a

00:03:08,130 --> 00:03:14,400
very old framework and developers hey

00:03:11,400 --> 00:03:16,590
old frameworks I know I definitely would

00:03:14,400 --> 00:03:18,990
not want to be working with exclusively

00:03:16,590 --> 00:03:21,960
with angular 1 now I always want to try

00:03:18,990 --> 00:03:24,810
out the new the newest things and also

00:03:21,960 --> 00:03:27,330
horizontal scaling is very it's

00:03:24,810 --> 00:03:29,610
difficult so when you've got a single

00:03:27,330 --> 00:03:31,740
single T application it's much easier to

00:03:29,610 --> 00:03:33,840
just scale upwards instead of scaling

00:03:31,740 --> 00:03:34,650
horizontally this isn't necessarily a

00:03:33,840 --> 00:03:39,780
good thing at all

00:03:34,650 --> 00:03:42,000
and it's something we wanted to avoid so

00:03:39,780 --> 00:03:46,260
what were options the first one was to

00:03:42,000 --> 00:03:48,750
throw away our our first up our first

00:03:46,260 --> 00:03:50,340
application the problem with this is

00:03:48,750 --> 00:03:52,650
that we'd be wasting a lot of working

00:03:50,340 --> 00:03:55,140
code which is something we did not want

00:03:52,650 --> 00:03:59,760
to do the second option like I said

00:03:55,140 --> 00:04:01,620
before was to upgrade to angular 5 this

00:03:59,760 --> 00:04:03,540
is also not something we wanted to do

00:04:01,620 --> 00:04:05,550
because not a lot of people want not a

00:04:03,540 --> 00:04:08,570
lot of Engineers want to work with

00:04:05,550 --> 00:04:12,450
angular 5 we much rather work with

00:04:08,570 --> 00:04:15,120
reiax I think a lot of us it's also too

00:04:12,450 --> 00:04:17,880
cumbersome to migrate so migrating I

00:04:15,120 --> 00:04:19,620
think Google would be very easy to

00:04:17,880 --> 00:04:22,470
migrate and that's what they they were

00:04:19,620 --> 00:04:25,700
kind of saying it was but it's a lot lot

00:04:22,470 --> 00:04:25,700
harder than they they said

00:04:25,740 --> 00:04:29,789
the third option is micro front-ends is

00:04:28,139 --> 00:04:33,000
what which is what we use at B Murray

00:04:29,789 --> 00:04:35,669
and it's awesome so what's a micro frame

00:04:33,000 --> 00:04:38,400
front-ends so basically they're micro

00:04:35,669 --> 00:04:41,160
services for the front end this means

00:04:38,400 --> 00:04:43,020
that this component this component this

00:04:41,160 --> 00:04:44,970
component and this component are all

00:04:43,020 --> 00:04:48,389
different applications and teams can

00:04:44,970 --> 00:04:49,850
work on them completely separate to like

00:04:48,389 --> 00:04:53,550
independently of each other

00:04:49,850 --> 00:04:55,199
this means a team working on this and

00:04:53,550 --> 00:04:57,360
the team working on this can happen me

00:04:55,199 --> 00:04:59,430
in and say okay we want this to

00:04:57,360 --> 00:05:01,259
communicate via an interface and these

00:04:59,430 --> 00:05:03,900
are the props that you need to pass down

00:05:01,259 --> 00:05:05,880
to it we can deploy this separately you

00:05:03,900 --> 00:05:08,250
can build and run this locally

00:05:05,880 --> 00:05:12,300
independently instead of having to have

00:05:08,250 --> 00:05:14,160
everything in the same application this

00:05:12,300 --> 00:05:16,699
allows you to model or modularize your

00:05:14,160 --> 00:05:22,590
code and run the applications

00:05:16,699 --> 00:05:24,060
independently as well so again this

00:05:22,590 --> 00:05:28,139
allows you to future-proof your code

00:05:24,060 --> 00:05:30,180
which means you can build any part of it

00:05:28,139 --> 00:05:32,699
in whichever framework you want if a new

00:05:30,180 --> 00:05:36,630
framework came out next week you

00:05:32,699 --> 00:05:43,199
wouldn't have to use angular you could

00:05:36,630 --> 00:05:46,409
use I don't know react 5.0 and also it

00:05:43,199 --> 00:05:49,680
stops cold conflicts and keeps new

00:05:46,409 --> 00:05:52,650
developers interested so doesn't work

00:05:49,680 --> 00:05:54,509
the parts are over to Nick cool so as

00:05:52,650 --> 00:05:56,190
Jason says we started out with a

00:05:54,509 --> 00:05:57,690
monolith single large application as

00:05:56,190 --> 00:06:00,360
most people have you have where you

00:05:57,690 --> 00:06:02,099
build your application as a single

00:06:00,360 --> 00:06:03,630
application you pick a framework in our

00:06:02,099 --> 00:06:07,530
case angularjs which was cool at the

00:06:03,630 --> 00:06:10,229
time and I was not cool and then you

00:06:07,530 --> 00:06:12,240
build it and of course what you do then

00:06:10,229 --> 00:06:15,240
is gradually over time that application

00:06:12,240 --> 00:06:17,039
becomes old so the whole lot away right

00:06:15,240 --> 00:06:20,669
which sucks is stupid because you're

00:06:17,039 --> 00:06:22,949
throwing away a bunch of working code so

00:06:20,669 --> 00:06:24,720
what we've done instead as jason says

00:06:22,949 --> 00:06:26,159
we've other than building rather than

00:06:24,720 --> 00:06:27,180
extending this old application or

00:06:26,159 --> 00:06:28,380
throwing it away and building another

00:06:27,180 --> 00:06:30,000
one we've just built a second

00:06:28,380 --> 00:06:32,849
application next to it and another one

00:06:30,000 --> 00:06:34,229
next to it so this is this is how this

00:06:32,849 --> 00:06:35,880
is how a typical web application works

00:06:34,229 --> 00:06:37,550
right you have a Dom this is a

00:06:35,880 --> 00:06:38,930
simplified Dom here with

00:06:37,550 --> 00:06:40,790
to mother and body element and then

00:06:38,930 --> 00:06:42,170
we've got a div so you get your deer

00:06:40,790 --> 00:06:43,250
when you give it an idea of app or

00:06:42,170 --> 00:06:44,960
something like that and then you say

00:06:43,250 --> 00:06:47,120
JavaScript could you take this div and

00:06:44,960 --> 00:06:51,470
could you start managing it and this is

00:06:47,120 --> 00:06:53,630
this is a application but of course

00:06:51,470 --> 00:06:55,850
there's no reason at all where you have

00:06:53,630 --> 00:06:57,860
to do this only once you can do this as

00:06:55,850 --> 00:06:59,930
many times as you like in the front end

00:06:57,860 --> 00:07:01,550
and this is what we've actually done so

00:06:59,930 --> 00:07:03,020
we've got our original application which

00:07:01,550 --> 00:07:04,190
was written in angularjs still alive

00:07:03,020 --> 00:07:05,630
it's still running it's serving

00:07:04,190 --> 00:07:07,340
customers it's got loads of stuff that

00:07:05,630 --> 00:07:08,540
means it's like half a million lines of

00:07:07,340 --> 00:07:10,940
code or something throwing it away would

00:07:08,540 --> 00:07:13,100
be a would be a shame so that that still

00:07:10,940 --> 00:07:15,590
exists but next to it we've built other

00:07:13,100 --> 00:07:17,900
applications and we've attached those to

00:07:15,590 --> 00:07:18,800
other portions of the dom then they're

00:07:17,900 --> 00:07:19,850
now always loaded

00:07:18,800 --> 00:07:21,140
you don't just load a bunch of

00:07:19,850 --> 00:07:22,880
applications and have them running all

00:07:21,140 --> 00:07:24,380
the time you you you orchestrate it so

00:07:22,880 --> 00:07:26,510
you have a single central orchestration

00:07:24,380 --> 00:07:28,880
tool which chooses which applications to

00:07:26,510 --> 00:07:30,770
lower them which to render so you don't

00:07:28,880 --> 00:07:32,870
have to you pile a bunch of JavaScript

00:07:30,770 --> 00:07:34,310
in you pile in the correct amount of

00:07:32,870 --> 00:07:37,070
JavaScript to make the app that you need

00:07:34,310 --> 00:07:38,540
and this means of course that each of

00:07:37,070 --> 00:07:41,240
these applications can be built in

00:07:38,540 --> 00:07:43,190
whatever we like so we're not tied to

00:07:41,240 --> 00:07:45,050
the technology of two years ago or three

00:07:43,190 --> 00:07:46,340
years ago we're tied to the technology

00:07:45,050 --> 00:07:48,320
of right now we build a new application

00:07:46,340 --> 00:07:55,460
we just pick the latest thing which at

00:07:48,320 --> 00:07:59,360
the moment is react with with I remember

00:07:55,460 --> 00:08:04,250
the things I think for styling it'll

00:07:59,360 --> 00:08:07,040
come back to me anyway this is this is

00:08:04,250 --> 00:08:12,530
the bathtub so we call it the bathtub

00:08:07,040 --> 00:08:14,630
because it's a spa yeah I like that it's

00:08:12,530 --> 00:08:16,760
one of our old developers came up with

00:08:14,630 --> 00:08:18,020
this and this is our orchestration tool

00:08:16,760 --> 00:08:19,220
here so I'm going to show you inside

00:08:18,020 --> 00:08:20,990
this in a minute I'll show the actual

00:08:19,220 --> 00:08:23,180
power moan and how this thing works it's

00:08:20,990 --> 00:08:24,620
really really simple so we have our

00:08:23,180 --> 00:08:26,150
different output applications these are

00:08:24,620 --> 00:08:28,220
down the bottom here application one

00:08:26,150 --> 00:08:29,750
application to an application 3 and in

00:08:28,220 --> 00:08:32,360
practice these correspond to things like

00:08:29,750 --> 00:08:34,760
the grid or the top navigation bar these

00:08:32,360 --> 00:08:36,170
is a separate application or the the

00:08:34,760 --> 00:08:37,310
profile which is the thing that slides

00:08:36,170 --> 00:08:39,560
in from the site and it shows you a

00:08:37,310 --> 00:08:41,150
profile for a single candidate or like

00:08:39,560 --> 00:08:42,620
the Settings app this is separate

00:08:41,150 --> 00:08:45,800
because settings that you never load it

00:08:42,620 --> 00:08:47,390
you don't need to most of the time so we

00:08:45,800 --> 00:08:49,910
build these and these are basic generic

00:08:47,390 --> 00:08:51,200
apps most of them are react but some of

00:08:49,910 --> 00:08:54,020
them are called JavaScript

00:08:51,200 --> 00:08:57,500
one of them is angularjs and the react

00:08:54,020 --> 00:08:59,510
apps range in the tech level from you

00:08:57,500 --> 00:09:01,760
reactive two years ago to react right

00:08:59,510 --> 00:09:04,550
now and that's actually fine it doesn't

00:09:01,760 --> 00:09:05,870
matter it doesn't as long as the code is

00:09:04,550 --> 00:09:08,780
working we can live with it being a

00:09:05,870 --> 00:09:11,150
little bit older so for each of these

00:09:08,780 --> 00:09:13,430
apps to get this into the bathtub we

00:09:11,150 --> 00:09:15,110
have to build an adapter down here so we

00:09:13,430 --> 00:09:20,750
build an adapter here that we export

00:09:15,110 --> 00:09:22,220
just using es6 modules and the adapter

00:09:20,750 --> 00:09:23,930
has three functions it has a bootstrap

00:09:22,220 --> 00:09:25,970
function it has a malfunction that it

00:09:23,930 --> 00:09:27,230
has an unmount function the job of the

00:09:25,970 --> 00:09:28,850
bootstrap function is to bring it into

00:09:27,230 --> 00:09:30,800
existence so the first time it might

00:09:28,850 --> 00:09:34,310
want to run some things and bring itself

00:09:30,800 --> 00:09:35,660
up then we have the mount function and

00:09:34,310 --> 00:09:39,080
the mount function sticks it in the Dom

00:09:35,660 --> 00:09:40,400
and makes it start rendering don't then

00:09:39,080 --> 00:09:41,720
the unmount function here does the

00:09:40,400 --> 00:09:42,980
opposite it takes it out of the door

00:09:41,720 --> 00:09:45,410
makes it disappear and makes it stop

00:09:42,980 --> 00:09:47,120
listening then for each of these in the

00:09:45,410 --> 00:09:48,590
bathtub we have a little adapter which

00:09:47,120 --> 00:09:49,880
is a tiny piece of code really the

00:09:48,590 --> 00:09:52,070
smallest piece of code you can imagine

00:09:49,880 --> 00:09:54,320
it has two functions inside of it the

00:09:52,070 --> 00:09:56,360
first is a loader and this knows how to

00:09:54,320 --> 00:09:58,880
load the codes on the internet so it

00:09:56,360 --> 00:10:00,920
says okay well go and get that code from

00:09:58,880 --> 00:10:03,590
the network and make it available in the

00:10:00,920 --> 00:10:04,580
front-end and then it has a Rooter so

00:10:03,590 --> 00:10:06,170
you might think this is some sort of

00:10:04,580 --> 00:10:07,790
clever route or it's not this Rooter is

00:10:06,170 --> 00:10:09,380
just a function it's a function that

00:10:07,790 --> 00:10:12,980
returns true or returns false

00:10:09,380 --> 00:10:14,780
and if it returns true the bathtub is

00:10:12,980 --> 00:10:15,980
going to check this see if it's loaded

00:10:14,780 --> 00:10:17,990
if it's not loaded that will go and load

00:10:15,980 --> 00:10:20,030
it this is all done with promises loads

00:10:17,990 --> 00:10:21,590
it makes it available as soon as it's

00:10:20,030 --> 00:10:23,240
loaded it's going to bootstrap it if

00:10:21,590 --> 00:10:26,210
it's not already bootstrapped then it'll

00:10:23,240 --> 00:10:27,800
mount it in the Dom if if the Rueter

00:10:26,210 --> 00:10:29,750
returns false it does the opposite it

00:10:27,800 --> 00:10:31,160
unannounced it and then from then on you

00:10:29,750 --> 00:10:33,260
can just mount and unmount and Mountain

00:10:31,160 --> 00:10:38,270
unmount as you never go to run around

00:10:33,260 --> 00:10:40,070
the application so make sense so I'm

00:10:38,270 --> 00:10:42,110
going to dive into some code now so this

00:10:40,070 --> 00:10:43,970
is the actual code of our actual

00:10:42,110 --> 00:10:48,470
application just here running in Visual

00:10:43,970 --> 00:10:50,840
Studio code as you can see so this this

00:10:48,470 --> 00:10:53,650
is a bathtub adaptor just here you see

00:10:50,840 --> 00:10:55,910
it's got a loader and it's got a Rooter

00:10:53,650 --> 00:10:58,340
this is the code of this and this is the

00:10:55,910 --> 00:11:04,040
code that sits just here inside the

00:10:58,340 --> 00:11:04,820
bathtub so the loader is this function

00:11:04,040 --> 00:11:07,160
just here

00:11:04,820 --> 00:11:08,690
as you can see this is just the it's a

00:11:07,160 --> 00:11:10,760
short promise chain does this make sense

00:11:08,690 --> 00:11:13,010
if you look at this guy can you can you

00:11:10,760 --> 00:11:15,650
can you more or less understand it you

00:11:13,010 --> 00:11:18,260
can see it exports this es6 function

00:11:15,650 --> 00:11:20,480
just here that does five things first of

00:11:18,260 --> 00:11:23,120
all it shows the spinner so it starts

00:11:20,480 --> 00:11:25,250
the spinner going on the page then it

00:11:23,120 --> 00:11:27,530
lazy loads an application from the

00:11:25,250 --> 00:11:28,880
internet so this is lazy load this is a

00:11:27,530 --> 00:11:30,380
piece of code which we've written this

00:11:28,880 --> 00:11:32,930
it's really simple it just goes and gets

00:11:30,380 --> 00:11:34,310
the codon makes it available then it

00:11:32,930 --> 00:11:35,540
checks this thing called the ACL so the

00:11:34,310 --> 00:11:36,770
ACL just checks that that user is

00:11:35,540 --> 00:11:41,120
actually allowed to read to see this app

00:11:36,770 --> 00:11:42,200
just here and then once it's loaded the

00:11:41,120 --> 00:11:44,420
code and made sure the user is allowed

00:11:42,200 --> 00:11:46,850
to see the app it shows the spinner and

00:11:44,420 --> 00:11:50,140
then it makes this this code available

00:11:46,850 --> 00:11:52,130
and this is one of the dark secrets of

00:11:50,140 --> 00:11:53,750
passing data back and forth between

00:11:52,130 --> 00:11:55,430
different JavaScript files in the front

00:11:53,750 --> 00:11:57,680
end you need Global's so this is

00:11:55,430 --> 00:12:00,890
actually exposing a global here on

00:11:57,680 --> 00:12:03,520
window b memory you can forget you saw

00:12:00,890 --> 00:12:06,290
that a few like how them with yeah I

00:12:03,520 --> 00:12:09,020
honestly I tried for a week to avoid

00:12:06,290 --> 00:12:10,880
that but that was the only one and then

00:12:09,020 --> 00:12:13,730
this is the Rooter so look at this this

00:12:10,880 --> 00:12:15,530
is so simple so this this Rooter it's

00:12:13,730 --> 00:12:17,240
just a function it receives location

00:12:15,530 --> 00:12:20,000
which is just window dot location and

00:12:17,240 --> 00:12:22,340
then it returns true or false so first

00:12:20,000 --> 00:12:24,050
of all it's making sure that the that

00:12:22,340 --> 00:12:26,600
this application is actually allowed so

00:12:24,050 --> 00:12:28,490
it's checking the ACL memory five is

00:12:26,600 --> 00:12:30,470
enabled or not enabled so we can turn it

00:12:28,490 --> 00:12:31,520
on and off for different customers and

00:12:30,470 --> 00:12:34,340
then it checks to see if the location

00:12:31,520 --> 00:12:37,850
here starts with this location we're

00:12:34,340 --> 00:12:40,340
using a special routine yes yo yes yes

00:12:37,850 --> 00:12:46,610
yes of course thank you for saying how's

00:12:40,340 --> 00:12:48,890
that cool so this is this is our adapter

00:12:46,610 --> 00:12:51,380
this is this portion of the application

00:12:48,890 --> 00:12:52,940
here so now these these applications

00:12:51,380 --> 00:12:55,250
down here these are these are simple

00:12:52,940 --> 00:12:57,170
apps these are these are JavaScript

00:12:55,250 --> 00:12:58,820
applications or their react applications

00:12:57,170 --> 00:13:02,740
I'll show you a a plain JavaScript

00:12:58,820 --> 00:13:05,660
adapter down here first of all so this

00:13:02,740 --> 00:13:10,220
this is this is a bathtub adapter for a

00:13:05,660 --> 00:13:11,990
thing called the the the the toaster the

00:13:10,220 --> 00:13:13,490
toaster wrap is a app that shows little

00:13:11,990 --> 00:13:15,380
toasts at the bottom of the page and

00:13:13,490 --> 00:13:17,750
it's shared by all the other apps

00:13:15,380 --> 00:13:19,550
lay over the top of things so it's got

00:13:17,750 --> 00:13:21,260
three functions in here you can see it's

00:13:19,550 --> 00:13:22,880
got the bootstrap function the mount

00:13:21,260 --> 00:13:24,050
function and the unmount function and

00:13:22,880 --> 00:13:25,970
look how simple these are this just

00:13:24,050 --> 00:13:27,620
shells out to the app and tells the app

00:13:25,970 --> 00:13:29,540
to bootstrap itself bring yourself into

00:13:27,620 --> 00:13:32,630
existence and in fact in the toaster app

00:13:29,540 --> 00:13:37,190
all this does is it sets bootstrapped

00:13:32,630 --> 00:13:39,830
equals true as simple as that

00:13:37,190 --> 00:13:42,620
then we have this mount which just gets

00:13:39,830 --> 00:13:46,120
a Dom node here using this function and

00:13:42,620 --> 00:13:49,250
then and then renders the app here it is

00:13:46,120 --> 00:13:50,660
app top mount and then we unmount is the

00:13:49,250 --> 00:13:52,880
opposite so it just unannounced the

00:13:50,660 --> 00:13:54,950
application so this is this is a simple

00:13:52,880 --> 00:13:58,310
JavaScript example for a simple little

00:13:54,950 --> 00:14:01,100
JavaScript app which we run but we have

00:13:58,310 --> 00:14:02,300
more complicated ones here and actually

00:14:01,100 --> 00:14:04,010
we didn't want to write these more

00:14:02,300 --> 00:14:07,720
complicated ones here ourselves so we

00:14:04,010 --> 00:14:09,950
used a framework this is one for react

00:14:07,720 --> 00:14:11,210
and when actually the first people to

00:14:09,950 --> 00:14:13,040
come up with this this has come up this

00:14:11,210 --> 00:14:16,430
was this was invented by a company

00:14:13,040 --> 00:14:17,930
called Kennedy tax in America who will

00:14:16,430 --> 00:14:20,750
we are friends with and they have this

00:14:17,930 --> 00:14:24,800
thing called single spa so we're using

00:14:20,750 --> 00:14:28,940
his single spa react and again this is

00:14:24,800 --> 00:14:30,860
just a this is just a react application

00:14:28,940 --> 00:14:32,150
it has a component which we call the

00:14:30,860 --> 00:14:34,370
bridge just here which is the root

00:14:32,150 --> 00:14:39,470
application and he called it the bridge

00:14:34,370 --> 00:14:41,900
I have no idea why and it has a

00:14:39,470 --> 00:14:43,850
bootstrap function which bootstraps it

00:14:41,900 --> 00:14:45,170
amount function and an unlit function

00:14:43,850 --> 00:14:48,470
and then at the end of it it just

00:14:45,170 --> 00:14:51,290
exposes this thing globally and you can

00:14:48,470 --> 00:14:54,410
see just given these little tiny pieces

00:14:51,290 --> 00:14:58,760
of wire we can wire together completely

00:14:54,410 --> 00:15:00,320
separate apps we're not stuck to to

00:14:58,760 --> 00:15:01,940
react you know in two years time

00:15:00,320 --> 00:15:03,920
reactors going to be legacy right nobody

00:15:01,940 --> 00:15:05,270
will like flux anymore we'll look at

00:15:03,920 --> 00:15:05,510
Redux and say why the heck did we do

00:15:05,270 --> 00:15:07,370
that

00:15:05,510 --> 00:15:10,790
just as we did with everything that's

00:15:07,370 --> 00:15:12,830
come before but when that day comes

00:15:10,790 --> 00:15:14,750
we'll be able to use whatever is new

00:15:12,830 --> 00:15:15,860
would love to use the new framework and

00:15:14,750 --> 00:15:17,360
that will be fine and we'll just run

00:15:15,860 --> 00:15:19,630
them side by side we weren't throw away

00:15:17,360 --> 00:15:25,160
any of the work which we've done and

00:15:19,630 --> 00:15:26,690
everyone will be happy yeah so I want to

00:15:25,160 --> 00:15:27,900
talk a little bit about communicating

00:15:26,690 --> 00:15:29,040
between apps

00:15:27,900 --> 00:15:31,200
because this is the thing that everyone

00:15:29,040 --> 00:15:32,700
always asks this is the question

00:15:31,200 --> 00:15:34,650
everyone always asks so how do these

00:15:32,700 --> 00:15:36,210
apps actually talk to each other because

00:15:34,650 --> 00:15:38,820
apps you've got all these apps running

00:15:36,210 --> 00:15:40,230
side by side in the DOM and you actually

00:15:38,820 --> 00:15:42,330
sometimes they do need to share data

00:15:40,230 --> 00:15:43,890
right you you need to know you know

00:15:42,330 --> 00:15:45,870
which thing to highlight or you know you

00:15:43,890 --> 00:15:48,029
need to pass some object from one thing

00:15:45,870 --> 00:15:50,700
to another so the first thing that we

00:15:48,029 --> 00:15:53,370
wanted to avoid was direct communication

00:15:50,700 --> 00:15:55,140
between apps so we've got these four

00:15:53,370 --> 00:15:56,760
apps here and you can imagine we could

00:15:55,140 --> 00:15:58,560
actually just have these apps cool

00:15:56,760 --> 00:15:59,790
methods on each other it's possible

00:15:58,560 --> 00:16:01,560
because they're all in the Dom and

00:15:59,790 --> 00:16:03,120
they're all in the global namespace so

00:16:01,560 --> 00:16:06,060
you could actually just call methods on

00:16:03,120 --> 00:16:07,800
other apps and this works you can do

00:16:06,060 --> 00:16:09,690
that if you want but the problem with

00:16:07,800 --> 00:16:12,839
that is that you start to create things

00:16:09,690 --> 00:16:14,850
like this and this and pretty soon you

00:16:12,839 --> 00:16:20,310
have a knot you have a spider's web

00:16:14,850 --> 00:16:22,080
which is a bad structure so there's a

00:16:20,310 --> 00:16:26,430
there's a second option can anyone think

00:16:22,080 --> 00:16:28,200
of what that second option might be use

00:16:26,430 --> 00:16:31,130
this service yes service or there's

00:16:28,200 --> 00:16:33,990
another name for a service anyone a

00:16:31,130 --> 00:16:36,900
single turn yes single turn you could

00:16:33,990 --> 00:16:38,160
use all these things are basically what

00:16:36,900 --> 00:16:40,770
I'm going to say next which is a global

00:16:38,160 --> 00:16:44,160
flux store a single central object like

00:16:40,770 --> 00:16:45,180
this you could use read up to you use

00:16:44,160 --> 00:16:48,089
whatever you liked and you could have

00:16:45,180 --> 00:16:49,470
all of these apps talking to this

00:16:48,089 --> 00:16:51,180
store so you push data and they

00:16:49,470 --> 00:16:52,589
subscribe to it so you push data to this

00:16:51,180 --> 00:16:54,720
and this app subscribes to it and gets

00:16:52,589 --> 00:16:57,839
to change this works you can actually do

00:16:54,720 --> 00:16:59,490
this we originally actually did this but

00:16:57,839 --> 00:17:01,260
again if you do this you have

00:16:59,490 --> 00:17:03,959
dependencies between these applications

00:17:01,260 --> 00:17:05,220
and if you've got the penalties it makes

00:17:03,959 --> 00:17:07,890
it difficult to deploy one app without

00:17:05,220 --> 00:17:09,689
deploying another so so so I'm working

00:17:07,890 --> 00:17:11,880
on app one I want to push app one well

00:17:09,689 --> 00:17:13,199
if I push up one I have to bought so

00:17:11,880 --> 00:17:14,640
push the flux tour and maybe the flux

00:17:13,199 --> 00:17:15,750
tour has dependencies and other things

00:17:14,640 --> 00:17:18,089
so I under then I have to push up to

00:17:15,750 --> 00:17:19,470
when you end up having to push more than

00:17:18,089 --> 00:17:23,490
one piece of code at the same time you

00:17:19,470 --> 00:17:26,490
can't just you can't have independent

00:17:23,490 --> 00:17:29,910
teams working on their own stuff I think

00:17:26,490 --> 00:17:32,400
of yes that's better

00:17:29,910 --> 00:17:34,050
so we didn't go down this route it was a

00:17:32,400 --> 00:17:35,820
route we explored but we didn't do it we

00:17:34,050 --> 00:17:38,540
actually ended up doing something much

00:17:35,820 --> 00:17:41,160
simpler so we just used the address bar

00:17:38,540 --> 00:17:41,460
the address bar is effectively a global

00:17:41,160 --> 00:17:42,899
object

00:17:41,460 --> 00:17:45,240
right it's accessible from everything

00:17:42,899 --> 00:17:46,919
it's a single central rotor so for

00:17:45,240 --> 00:17:49,320
example if the grid wants to show a

00:17:46,919 --> 00:17:52,289
profile we just use a query string we

00:17:49,320 --> 00:17:55,049
say query string profile ID equals and

00:17:52,289 --> 00:17:56,250
then the bathtub says okay well there's

00:17:55,049 --> 00:17:58,950
a query string there so I'm going to

00:17:56,250 --> 00:18:00,510
turn the profile app on the profile that

00:17:58,950 --> 00:18:02,039
comes into existence and it says R yeah

00:18:00,510 --> 00:18:03,659
there's there's a query string there I'm

00:18:02,039 --> 00:18:05,580
going to take that as an ID and it

00:18:03,659 --> 00:18:08,520
downloads the data to render a profile

00:18:05,580 --> 00:18:10,710
on the sidebar now this works for small

00:18:08,520 --> 00:18:13,289
things like strings or IDs and actually

00:18:10,710 --> 00:18:15,510
this is 90 percent of the cases this

00:18:13,289 --> 00:18:18,029
works just fine but ten percent it

00:18:15,510 --> 00:18:19,649
doesn't so for the ten percent and this

00:18:18,029 --> 00:18:22,500
is actually something that we're still

00:18:19,649 --> 00:18:24,809
working on we use sockets so you can

00:18:22,500 --> 00:18:26,700
push data up you can push an object up

00:18:24,809 --> 00:18:28,890
and then you can subscribe to that

00:18:26,700 --> 00:18:30,090
socket somewhere else and this is

00:18:28,890 --> 00:18:31,140
something that we're actively building

00:18:30,090 --> 00:18:32,940
at this point in time

00:18:31,140 --> 00:18:34,980
and because we're actively building it

00:18:32,940 --> 00:18:37,080
we also actually have a temporary thing

00:18:34,980 --> 00:18:40,260
in place I don't know if you can see

00:18:37,080 --> 00:18:42,270
that which we call markets it's down the

00:18:40,260 --> 00:18:44,130
bottom there sorry which is just like a

00:18:42,270 --> 00:18:46,799
pretend sockets in the browser is but

00:18:44,130 --> 00:18:48,210
it's effectively like as a micro

00:18:46,799 --> 00:18:50,429
implementation of sockets which we're

00:18:48,210 --> 00:18:55,409
pretending is sockets for now until we

00:18:50,429 --> 00:18:57,929
can get the sockets up there and that's

00:18:55,409 --> 00:18:59,399
it thank you for listening I'm gonna

00:18:57,929 --> 00:19:00,840
bring Jason back up and we've got a bit

00:18:59,399 --> 00:19:04,220
of time for questions do we have time

00:19:00,840 --> 00:19:04,220
for questions how long do we have

00:19:10,010 --> 00:19:24,690
okay so we've got ten minutes for

00:19:11,880 --> 00:19:26,130
questions apparently some sort of

00:19:24,690 --> 00:19:28,049
hierarchy well I mean you can have

00:19:26,130 --> 00:19:30,179
whatever hierarchy you like we like

00:19:28,049 --> 00:19:31,679
things inside other things well I mean

00:19:30,179 --> 00:19:33,570
if you're having things inside other

00:19:31,679 --> 00:19:38,039
things probably that's an app with

00:19:33,570 --> 00:19:39,659
components so you'll make a single app

00:19:38,039 --> 00:19:42,840
and it will have components inside of it

00:19:39,659 --> 00:19:44,159
we don't nest apps inside other apps we

00:19:42,840 --> 00:19:46,470
could there's actually there's actually

00:19:44,159 --> 00:19:48,120
no reason why you couldn't mount an app

00:19:46,470 --> 00:19:49,889
inside a div that's supplied by another

00:19:48,120 --> 00:19:52,590
app is practical

00:19:49,889 --> 00:19:55,920
but you I think we'd end up not

00:19:52,590 --> 00:19:58,200
so in terms of design they do sit next

00:19:55,920 --> 00:19:59,940
to each other I've got this sort of

00:19:58,200 --> 00:20:02,810
that's sort of a picture can you see

00:19:59,940 --> 00:20:06,180
that it's a bit small but we've got

00:20:02,810 --> 00:20:08,490
we've got a div here which is a grid and

00:20:06,180 --> 00:20:10,980
this renders the grid we've got a div at

00:20:08,490 --> 00:20:12,330
the top here which is a top bar went

00:20:10,980 --> 00:20:14,190
down the side these are separate apps

00:20:12,330 --> 00:20:16,050
and then this thing here is actually a

00:20:14,190 --> 00:20:17,550
separate app so they do we've

00:20:16,050 --> 00:20:20,700
architected it such that they sit side

00:20:17,550 --> 00:20:21,990
by side I take your point I mean you can

00:20:20,700 --> 00:20:24,840
of course nest things inside each other

00:20:21,990 --> 00:20:25,890
but typically to do that you would you

00:20:24,840 --> 00:20:29,450
would just set it up so they were

00:20:25,890 --> 00:20:29,450
actually in the Dom next to each other

00:20:33,560 --> 00:20:40,890
yeah so the performance it does suffer

00:20:38,180 --> 00:20:45,110
so for example when you do load up the

00:20:40,890 --> 00:20:48,150
page yes

00:20:45,110 --> 00:20:51,660
javascript is pretty fast so it doesn't

00:20:48,150 --> 00:20:54,870
suffer that badly but it does like raise

00:20:51,660 --> 00:20:57,090
the low the performance by a bit

00:20:54,870 --> 00:21:03,570
compared to if there was one single

00:20:57,090 --> 00:21:06,690
application yeah yeah I mean in practice

00:21:03,570 --> 00:21:08,400
not not noticeably you obviously have

00:21:06,690 --> 00:21:10,200
more code loaded and more code gets

00:21:08,400 --> 00:21:11,250
loaded over time so in terms of memory

00:21:10,200 --> 00:21:12,870
you are actually using more memory

00:21:11,250 --> 00:21:15,540
probably and if you just had one

00:21:12,870 --> 00:21:17,790
application but you know if you're using

00:21:15,540 --> 00:21:19,170
react you've got the the virtual Dom the

00:21:17,790 --> 00:21:20,490
virtual Dom is only monitoring the

00:21:19,170 --> 00:21:22,200
portion the Dom which it's assigned to

00:21:20,490 --> 00:21:23,640
it doesn't monitor the whole Dom so if

00:21:22,200 --> 00:21:24,930
they're sitting side by side you only

00:21:23,640 --> 00:21:30,210
have a virtual Dom for this bit that

00:21:24,930 --> 00:21:32,190
virtual Dom for this bit yeah

00:21:30,210 --> 00:21:34,170
and also you get the performance benefit

00:21:32,190 --> 00:21:35,370
only downloading the code you need so

00:21:34,170 --> 00:21:36,630
you have this Apple you have this app

00:21:35,370 --> 00:21:38,730
you have the suite of apps which you

00:21:36,630 --> 00:21:40,020
actually want yes so there are some

00:21:38,730 --> 00:21:41,910
things you can do so say for example

00:21:40,020 --> 00:21:43,710
you've got react you can have lazy

00:21:41,910 --> 00:21:46,500
loading inside your X application as

00:21:43,710 --> 00:21:49,620
well so for the different components for

00:21:46,500 --> 00:21:51,330
example we will create a profile page we

00:21:49,620 --> 00:21:53,400
only downloaded the first page of the

00:21:51,330 --> 00:21:55,500
profile and then if you click on the

00:21:53,400 --> 00:21:59,160
different tabs you'll download different

00:21:55,500 --> 00:22:00,960
parts of that so you can optimize the

00:21:59,160 --> 00:22:03,090
inside of the applications as well as

00:22:00,960 --> 00:22:04,580
the loathed lazy loading on the top so

00:22:03,090 --> 00:22:11,440
you can add lazy loading

00:22:04,580 --> 00:22:11,440
the two layers that make sense yes a

00:22:15,130 --> 00:22:24,200
single flexed or this this architecture

00:22:18,290 --> 00:22:26,510
just here so a design principle here was

00:22:24,200 --> 00:22:28,640
that we wanted different teams we

00:22:26,510 --> 00:22:30,050
originally just had one big team and

00:22:28,640 --> 00:22:31,850
everybody working on the same codebase

00:22:30,050 --> 00:22:34,010
all the time and actually that becomes

00:22:31,850 --> 00:22:35,840
really difficult as you scale so we

00:22:34,010 --> 00:22:37,100
wanted different teams to own different

00:22:35,840 --> 00:22:40,180
bits of the code base and have those

00:22:37,100 --> 00:22:43,130
code bases completely isolated such that

00:22:40,180 --> 00:22:45,980
one team like Team Rocket for example

00:22:43,130 --> 00:22:47,420
can deliver code at one stage and team I

00:22:45,980 --> 00:22:48,620
spoke and deliver code in another stage

00:22:47,420 --> 00:22:50,630
and all they have to do to deliver code

00:22:48,620 --> 00:22:51,950
is just push it to a CDN and now

00:22:50,630 --> 00:22:53,300
essentially what we have now you just if

00:22:51,950 --> 00:22:55,670
it's front-end code you just put it on

00:22:53,300 --> 00:22:58,520
the CDN and that's fine if we have this

00:22:55,670 --> 00:23:00,080
connection just here and this

00:22:58,520 --> 00:23:01,970
application suddenly starts sort of

00:23:00,080 --> 00:23:05,380
storing a different sort of data here or

00:23:01,970 --> 00:23:05,380
it changes the shape of the data

00:23:06,040 --> 00:23:13,280
yes exactly

00:23:08,480 --> 00:23:15,890
oh yeah yeah no I mean in terms of code

00:23:13,280 --> 00:23:16,340
delivery yes rather than passing data

00:23:15,890 --> 00:23:20,020
round

00:23:16,340 --> 00:23:20,020
yes any other questions

00:23:27,960 --> 00:23:43,260
of a custom event like events inside the

00:23:34,440 --> 00:23:44,430
browser itself yeah and this is this is

00:23:43,260 --> 00:23:46,410
effectively actually one of these

00:23:44,430 --> 00:23:48,660
markets is which is actually is a bit

00:23:46,410 --> 00:23:50,070
far down for you to see would you

00:23:48,660 --> 00:23:51,810
actually communicate between them using

00:23:50,070 --> 00:23:53,400
a sort of a pub/sub architecture where

00:23:51,810 --> 00:23:55,710
you can push objects and then other

00:23:53,400 --> 00:23:58,650
things subscribe to that which which is

00:23:55,710 --> 00:23:59,820
similar to global events the the top of

00:23:58,650 --> 00:24:01,860
the global events is you tend to get a

00:23:59,820 --> 00:24:03,780
bit of a disconnect between different

00:24:01,860 --> 00:24:05,310
portions so something is emitting an

00:24:03,780 --> 00:24:06,810
event and then something else is

00:24:05,310 --> 00:24:09,240
receiving it and it's like well actually

00:24:06,810 --> 00:24:10,590
I sort of don't know what's emitting it

00:24:09,240 --> 00:24:13,170
and what's receiving it and you can't

00:24:10,590 --> 00:24:16,260
sort of see very easily what's where how

00:24:13,170 --> 00:24:17,880
the data is flowing around is sort of it

00:24:16,260 --> 00:24:20,190
goes off into the ether and it comes

00:24:17,880 --> 00:24:21,870
back down from the ether somewhere else

00:24:20,190 --> 00:24:24,060
which I suppose you also have to an

00:24:21,870 --> 00:24:25,680
extent with WebSockets one of the bunch

00:24:24,060 --> 00:24:27,470
is that with WebSockets is you can have

00:24:25,680 --> 00:24:30,000
multiple people working on the same

00:24:27,470 --> 00:24:32,430
information at the same time so if you

00:24:30,000 --> 00:24:35,700
have I mean we have thousands of users

00:24:32,430 --> 00:24:36,960
all editing candidates and if two people

00:24:35,700 --> 00:24:39,900
two people edit the same cannons at at

00:24:36,960 --> 00:24:43,170
the same time with WebSockets we can we

00:24:39,900 --> 00:24:45,810
can merge that data like Google Apps so

00:24:43,170 --> 00:24:48,090
two people can it can do the same thing

00:24:45,810 --> 00:24:50,040
which is why we're sort of aiming to do

00:24:48,090 --> 00:24:51,660
this and also it adds another layer of

00:24:50,040 --> 00:24:54,630
abstraction between the two it

00:24:51,660 --> 00:24:56,490
discourages people from making apps talk

00:24:54,630 --> 00:24:58,350
to one another which is another sort of

00:24:56,490 --> 00:25:00,830
I don't know it's a social engineering

00:24:58,350 --> 00:25:00,830
principle

00:25:07,180 --> 00:25:12,570
does it down just little yeah I get your

00:25:10,300 --> 00:25:15,310
point it's something we've agonized over

00:25:12,570 --> 00:25:17,290
we may not keep it but it's what we've

00:25:15,310 --> 00:25:21,150
got at the moment it's a good point

00:25:17,290 --> 00:25:21,150
though you had a question

00:25:31,650 --> 00:25:36,700
I think web web sockets are good for

00:25:34,780 --> 00:25:38,550
example if we had a phone application or

00:25:36,700 --> 00:25:41,650
something in the future it's kind of

00:25:38,550 --> 00:25:43,810
agnostic so if we had PubNub or

00:25:41,650 --> 00:25:46,810
something similar to that we could just

00:25:43,810 --> 00:25:49,360
integrate an application if we had a

00:25:46,810 --> 00:25:51,970
entry to an iOS application we could

00:25:49,360 --> 00:25:53,290
just send a message via PubNub instead

00:25:51,970 --> 00:25:54,580
of just communicate if we will

00:25:53,290 --> 00:25:58,380
communicate and fire the browser we

00:25:54,580 --> 00:25:58,380
would be able to do that that make sense

00:26:05,190 --> 00:26:10,870
good question that's a difficult one yes

00:26:08,560 --> 00:26:13,570
so yeah independent we have unit tests

00:26:10,870 --> 00:26:16,540
so which each app is independent the

00:26:13,570 --> 00:26:18,700
unit test that we also have story book

00:26:16,540 --> 00:26:20,550
which just introduced it really works

00:26:18,700 --> 00:26:23,560
really well so the way we normally

00:26:20,550 --> 00:26:25,240
approach creating an application reacts

00:26:23,560 --> 00:26:27,700
is we start with Krane all of the

00:26:25,240 --> 00:26:31,330
components in story book so we create

00:26:27,700 --> 00:26:33,990
these modular stainless components and

00:26:31,330 --> 00:26:36,610
then we test all of those individually

00:26:33,990 --> 00:26:38,800
and also storybook can show you the

00:26:36,610 --> 00:26:40,480
tests for each component so we do that

00:26:38,800 --> 00:26:42,910
for all of for most of our react

00:26:40,480 --> 00:26:44,290
applications and then on top of that

00:26:42,910 --> 00:26:46,330
we've got other layers of testing as

00:26:44,290 --> 00:26:47,680
well yeah so then we have enter end

00:26:46,330 --> 00:26:51,820
testing as well there and the end

00:26:47,680 --> 00:26:56,140
testing is is work in progress and then

00:26:51,820 --> 00:26:57,370
if anyone's has that yeah we have quite

00:26:56,140 --> 00:26:58,690
a few end-to-end tests but this it's not

00:26:57,370 --> 00:27:01,500
finished by any means so that's written

00:26:58,690 --> 00:27:04,420
in Java just using regular old selenium

00:27:01,500 --> 00:27:06,930
so it just yeah prints brings up an app

00:27:04,420 --> 00:27:06,930
and kicks around

00:27:13,830 --> 00:27:19,750
so when you put the component into the

00:27:16,570 --> 00:27:21,190
context of the whole application I mean

00:27:19,750 --> 00:27:22,600
that's that's there ethically possible

00:27:21,190 --> 00:27:23,350
although in theory each component is

00:27:22,600 --> 00:27:25,630
isolated

00:27:23,350 --> 00:27:27,400
yeah we don't yeah apart from those

00:27:25,630 --> 00:27:28,300
Global's I saw you said you before we

00:27:27,400 --> 00:27:30,550
don't use Global's

00:27:28,300 --> 00:27:32,560
so each one is an object and they have

00:27:30,550 --> 00:27:34,510
object and they have objects so they

00:27:32,560 --> 00:27:36,370
don't they shouldn't in theory interact

00:27:34,510 --> 00:27:38,710
and we haven't so far noticed them doing

00:27:36,370 --> 00:27:40,510
so but there are sometimes interactions

00:27:38,710 --> 00:27:42,520
like SAS for example we have some global

00:27:40,510 --> 00:27:46,060
SAS from the legacy app as sometimes

00:27:42,520 --> 00:27:49,560
biases is a problem if we wanted to test

00:27:46,060 --> 00:27:51,610
um something like a grid where it needs

00:27:49,560 --> 00:27:52,990
information from another application we

00:27:51,610 --> 00:27:54,850
would just mock that data instead of

00:27:52,990 --> 00:28:15,250
required the other one so I shouldn't

00:27:54,850 --> 00:28:18,250
interfere yeah yeah should do that we

00:28:15,250 --> 00:28:24,670
use Husky so we use on pre-commit pre

00:28:18,250 --> 00:28:27,690
push we try not to know verify and we do

00:28:24,670 --> 00:28:34,630
it by get lab as well so that is also we

00:28:27,690 --> 00:28:37,270
try to do it as much as possible yeah

00:28:34,630 --> 00:28:39,880
that's run before we deploy to live then

00:28:37,270 --> 00:28:42,340
Tesco because they took a long time but

00:28:39,880 --> 00:28:44,370
the unit tests in theory ideally we're

00:28:42,340 --> 00:28:48,660
running the in tests as we're developing

00:28:44,370 --> 00:28:48,660
sometimes we do that sometimes northern

00:28:50,970 --> 00:28:56,050
yeah so the end-to-end tests instantiate

00:28:53,590 --> 00:28:57,460
an entire Dom so you're not testing

00:28:56,050 --> 00:28:58,690
individual applications you in

00:28:57,460 --> 00:29:01,150
essentially you are testing a browser

00:28:58,690 --> 00:29:02,440
that loads applications yeah they're all

00:29:01,150 --> 00:29:05,500
different repos but they're all built

00:29:02,440 --> 00:29:07,150
and deployed to a CDN so it just pulls

00:29:05,500 --> 00:29:09,810
from the CDN pulls pulls the bill code

00:29:07,150 --> 00:29:09,810
and we test that

00:29:11,230 --> 00:29:19,070
yes yeah so we have a shared library and

00:29:15,920 --> 00:29:23,950
we just in we just import that and if we

00:29:19,070 --> 00:29:27,350
need any components we just use those oh

00:29:23,950 --> 00:29:29,920
sorry sorry no no in theory you can do

00:29:27,350 --> 00:29:32,150
that we actually ended to start with

00:29:29,920 --> 00:29:34,820
checked out whether or not we could use

00:29:32,150 --> 00:29:36,680
what's his name web components thank you

00:29:34,820 --> 00:29:37,910
yes we looked at web components but we

00:29:36,680 --> 00:29:41,540
found them a little flaky or not quite

00:29:37,910 --> 00:29:43,520
ready but we could at some point in the

00:29:41,540 --> 00:29:44,900
future but we have a react library that

00:29:43,520 --> 00:29:46,750
has react components we have an angular

00:29:44,900 --> 00:29:48,740
one that's separate that looks similar

00:29:46,750 --> 00:29:51,410
so we have two separate ones at this

00:29:48,740 --> 00:29:53,090
point and we also have a shared SAS

00:29:51,410 --> 00:29:55,070
library as well called runic that has

00:29:53,090 --> 00:29:56,390
all the all that the borders and the

00:29:55,070 --> 00:29:59,390
colors and the widths and the Heights

00:29:56,390 --> 00:30:01,520
and things that we can reuse in other

00:29:59,390 --> 00:30:02,120
apps it's a good question there was a

00:30:01,520 --> 00:30:10,310
question over here

00:30:02,120 --> 00:30:13,570
yes no we don't we don't do worry about

00:30:10,310 --> 00:30:15,590
it what's the Curtis it's like teeth

00:30:13,570 --> 00:30:17,480
yeah but that's one that's something ie

00:30:15,590 --> 00:30:21,440
I mean I think it's a lot larger than

00:30:17,480 --> 00:30:26,960
that on in in Chrome we don't really

00:30:21,440 --> 00:30:28,730
support ie we're lucky yeah yeah we've

00:30:26,960 --> 00:30:30,260
never we'd never get close to that we're

00:30:28,730 --> 00:30:31,400
just storing strange it's not objects we

00:30:30,260 --> 00:30:34,900
don't Sarah lies objects into the

00:30:31,400 --> 00:30:37,400
address bar just just strings and IDs

00:30:34,900 --> 00:30:38,840
yeah luckily because we're making an app

00:30:37,400 --> 00:30:43,220
we just get to tell people they're not

00:30:38,840 --> 00:30:44,360
allowed which is naughty I know but yeah

00:30:43,220 --> 00:30:46,790
we wouldn't really hit the limit because

00:30:44,360 --> 00:30:49,370
we would do things like if we have a

00:30:46,790 --> 00:30:51,950
profile component it would we were just

00:30:49,370 --> 00:30:54,230
passing the ID for the profile not all

00:30:51,950 --> 00:30:56,600
the profile all the information that the

00:30:54,230 --> 00:31:00,670
profile needs so with the idea will just

00:30:56,600 --> 00:31:00,670
download all the profiles information

00:31:02,220 --> 00:31:08,590
we do use local storage in some places

00:31:06,070 --> 00:31:13,060
yeah we use a mixture of different paths

00:31:08,590 --> 00:31:15,610
but I don't I don't think you can use

00:31:13,060 --> 00:31:19,750
that between the different applications

00:31:15,610 --> 00:31:21,580
you may be able to you can so we do use

00:31:19,750 --> 00:31:23,740
in some places yeah that's a bit naughty

00:31:21,580 --> 00:31:27,520
and probably not right but yeah we do

00:31:23,740 --> 00:31:29,560
actually sometimes yeah I actually

00:31:27,520 --> 00:31:31,980
disagree with that so the idea is to

00:31:29,560 --> 00:31:34,240
keep things as modular as possible

00:31:31,980 --> 00:31:37,250
that's what we're trying to we're doing

00:31:34,240 --> 00:31:41,180
that cool thank you all very much

00:31:37,250 --> 00:31:41,180

YouTube URL: https://www.youtube.com/watch?v=oGZufObdkxc


