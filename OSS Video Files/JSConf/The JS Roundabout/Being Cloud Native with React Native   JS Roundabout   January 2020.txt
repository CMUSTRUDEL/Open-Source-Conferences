Title: Being Cloud Native with React Native   JS Roundabout   January 2020
Publication date: 2020-02-08
Playlist: The JS Roundabout
Description: 
	Ben Ellerby, from Theodo. Ben will be giving a talk titled 'Being cloud-native with react-native, build faster with AWS Amplify'. The talk will show hands-on how Amplify can be used with React-Native, and discuss the advantages of a Serverless backend to a React-Native mobile application.
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,089 --> 00:00:03,659
so today we're going to talk about being

00:00:01,800 --> 00:00:05,190
cloud nature with react native and using

00:00:03,659 --> 00:00:07,649
a DeBeers amplifier to leverage

00:00:05,190 --> 00:00:09,809
serverless services with react native to

00:00:07,649 --> 00:00:11,309
build faster before I jump in a few

00:00:09,809 --> 00:00:13,019
words on myself my name is Ben ellaby

00:00:11,309 --> 00:00:15,269
I'm the VP of engineering for Theo which

00:00:13,019 --> 00:00:17,130
is a startup that helps other startups

00:00:15,269 --> 00:00:18,390
launch digital products and larger

00:00:17,130 --> 00:00:20,699
companies work at more of a start-up

00:00:18,390 --> 00:00:22,199
speed this is an example of a project I

00:00:20,699 --> 00:00:24,689
architected last year rebuilding the

00:00:22,199 --> 00:00:26,519
mate comm websites mobile app in react

00:00:24,689 --> 00:00:28,470
native the website reacts and an

00:00:26,519 --> 00:00:29,970
interactive touchscreen experience just

00:00:28,470 --> 00:00:32,480
given an idea of the sort of projects we

00:00:29,970 --> 00:00:35,280
do in the sort of technology we leverage

00:00:32,480 --> 00:00:37,950
so Before we jump into how we use AWS

00:00:35,280 --> 00:00:39,510
amplify a few words on serverless which

00:00:37,950 --> 00:00:42,210
is a huge part of how amplifier can be

00:00:39,510 --> 00:00:44,149
powerful who hears used is familiar with

00:00:42,210 --> 00:00:47,219
the term service just raise your hand

00:00:44,149 --> 00:00:48,899
awesome I'll go read quite quickly so to

00:00:47,219 --> 00:00:50,820
me service is two things there are a few

00:00:48,899 --> 00:00:52,079
more things than that but it's the name

00:00:50,820 --> 00:00:53,969
of a framework the service framework

00:00:52,079 --> 00:00:55,860
which is quite confusing and it's often

00:00:53,969 --> 00:00:57,809
confused with just being a WS lambda or

00:00:55,860 --> 00:00:58,770
as your functions but it's an

00:00:57,809 --> 00:01:01,260
architectural movement that allows

00:00:58,770 --> 00:01:03,149
developers to send application code that

00:01:01,260 --> 00:01:05,100
is run in isolated environments by the

00:01:03,149 --> 00:01:06,890
cloud provider with all the complexity

00:01:05,100 --> 00:01:09,420
of the server extracted away from the

00:01:06,890 --> 00:01:11,790
developer it's also the use of

00:01:09,420 --> 00:01:13,200
third-party services so being more cloud

00:01:11,790 --> 00:01:14,490
native using cognitive for your

00:01:13,200 --> 00:01:16,110
authentication set of rolling it for

00:01:14,490 --> 00:01:17,640
yourself using different third-party

00:01:16,110 --> 00:01:20,040
services to really focus your

00:01:17,640 --> 00:01:22,049
development teams or your developers on

00:01:20,040 --> 00:01:24,180
writing the business logic that's key to

00:01:22,049 --> 00:01:25,860
your company why do people adopt a

00:01:24,180 --> 00:01:26,820
service approach well it's cheaper if

00:01:25,860 --> 00:01:28,200
you're only paying for the run something

00:01:26,820 --> 00:01:29,640
you use it's a huge cost reduction

00:01:28,200 --> 00:01:31,590
obviously it has to be used in the right

00:01:29,640 --> 00:01:33,479
way and you have to configure things in

00:01:31,590 --> 00:01:34,979
the right way there's less operations

00:01:33,479 --> 00:01:36,630
requirement it's not no ups but it's a

00:01:34,979 --> 00:01:38,640
big reduction in the amount of

00:01:36,630 --> 00:01:40,470
operations that's needed which allows

00:01:38,640 --> 00:01:41,790
developers to be more autonomous it

00:01:40,470 --> 00:01:43,259
allows developers to focus more on

00:01:41,790 --> 00:01:45,420
business value your developers are

00:01:43,259 --> 00:01:47,729
focusing on the actual business logic of

00:01:45,420 --> 00:01:49,950
your application or your company not on

00:01:47,729 --> 00:01:51,750
configuration server management's it's

00:01:49,950 --> 00:01:53,430
more scalable so it's instantly scalable

00:01:51,750 --> 00:01:55,170
from day one and finally a point that

00:01:53,430 --> 00:01:57,600
resonates with me is it's greener so as

00:01:55,170 --> 00:01:59,310
we are sharing resources and data

00:01:57,600 --> 00:02:01,380
centers more efficiently so the cloud

00:01:59,310 --> 00:02:03,390
providers managing an efficient sharing

00:02:01,380 --> 00:02:04,979
of how code is run we can make use of

00:02:03,390 --> 00:02:07,200
less servers and at the moment the

00:02:04,979 --> 00:02:09,119
Internet has the same co2 footprint as

00:02:07,200 --> 00:02:11,310
the aviation industry and is growing

00:02:09,119 --> 00:02:12,629
much faster so making better use of a

00:02:11,310 --> 00:02:13,920
date sentence we have will help us

00:02:12,629 --> 00:02:15,959
reduce the energy can

00:02:13,920 --> 00:02:18,239
sumption across different applications

00:02:15,959 --> 00:02:20,430
as I mentioned before it's often

00:02:18,239 --> 00:02:22,410
confused with being a dubious lambda

00:02:20,430 --> 00:02:24,000
which is just a way to run computes but

00:02:22,410 --> 00:02:26,790
it's also things like s3 for storage

00:02:24,000 --> 00:02:28,640
DynamoDB for databases API gateway

00:02:26,790 --> 00:02:31,620
acting is your API management layer

00:02:28,640 --> 00:02:34,170
Cognito for user sign up password reset

00:02:31,620 --> 00:02:36,150
multi-factor authentication sqs for

00:02:34,170 --> 00:02:37,770
queuing an event bridge acting as a

00:02:36,150 --> 00:02:39,810
centralized event bus for your system

00:02:37,770 --> 00:02:43,950
these examples are in AWS with the same

00:02:39,810 --> 00:02:45,300
applying GCP in azile so this gives us a

00:02:43,950 --> 00:02:46,980
lot of power and flexibility for

00:02:45,300 --> 00:02:49,140
building these servlets event-driven

00:02:46,980 --> 00:02:50,519
architectures but we need some way of

00:02:49,140 --> 00:02:52,049
managing this on some sort of

00:02:50,519 --> 00:02:54,930
infrastructure as code there's things

00:02:52,049 --> 00:02:56,340
like terraform cloud formation cdk which

00:02:54,930 --> 00:02:57,750
is the new thing from AWS we can

00:02:56,340 --> 00:03:00,209
actually write typescript so java

00:02:57,750 --> 00:03:01,890
scripts that can do a for loop to create

00:03:00,209 --> 00:03:04,170
servers or create lambda functions and

00:03:01,890 --> 00:03:06,540
there's AWS sandwiches a devices answer

00:03:04,170 --> 00:03:09,209
to the service framework and it's rising

00:03:06,540 --> 00:03:12,510
popularity this talk though obviously is

00:03:09,209 --> 00:03:15,030
about amplify which is a double uses way

00:03:12,510 --> 00:03:17,130
of sort of declaratively using a TBS

00:03:15,030 --> 00:03:19,769
resources from a javascript and really

00:03:17,130 --> 00:03:21,450
from a front-end perspective so as I

00:03:19,769 --> 00:03:23,070
mentioned it's a declarative way of

00:03:21,450 --> 00:03:24,959
working it's a declarative abstraction

00:03:23,070 --> 00:03:26,940
this means that we say what we want to

00:03:24,959 --> 00:03:28,290
do rather than how we want to do it with

00:03:26,940 --> 00:03:30,329
things like the service framework you're

00:03:28,290 --> 00:03:32,010
specifying how cognitive groups are

00:03:30,329 --> 00:03:33,840
linking together how sqs queues have

00:03:32,010 --> 00:03:36,060
visibility timeouts and all that

00:03:33,840 --> 00:03:37,980
complexity but really amplify allows

00:03:36,060 --> 00:03:40,140
JavaScript and maybe more front-end web

00:03:37,980 --> 00:03:41,430
developers to have a declarative way to

00:03:40,140 --> 00:03:43,140
specify the instructor they want a

00:03:41,430 --> 00:03:46,260
little bit like firebase but with more

00:03:43,140 --> 00:03:48,090
flexibility it has a few different

00:03:46,260 --> 00:03:49,620
components so amplify has a CLI which

00:03:48,090 --> 00:03:51,570
allows us to declaratively say what we

00:03:49,620 --> 00:03:54,510
want to add to our application it has an

00:03:51,570 --> 00:03:56,850
SDK which allows us to use AWS api's

00:03:54,510 --> 00:03:58,709
easily from a JavaScript front-end has

00:03:56,850 --> 00:04:00,750
cross-platform components these are UI

00:03:58,709 --> 00:04:02,970
components that work in Android they

00:04:00,750 --> 00:04:05,130
work in eyewear cently a working cloud

00:04:02,970 --> 00:04:07,200
neap in a react native very easily and

00:04:05,130 --> 00:04:08,910
it also manages hosting and deployments

00:04:07,200 --> 00:04:10,319
that's more for react applications and

00:04:08,910 --> 00:04:11,579
today I'm going to focus on the react

00:04:10,319 --> 00:04:14,160
native so I'm not going to talk about

00:04:11,579 --> 00:04:15,600
that part how'd you get started with a

00:04:14,160 --> 00:04:18,120
device amplify well like most things

00:04:15,600 --> 00:04:20,489
certain yarn add or an NPM install so we

00:04:18,120 --> 00:04:22,260
yon add a two Bs amplify and we can also

00:04:20,489 --> 00:04:23,909
install the a double simplify react

00:04:22,260 --> 00:04:25,530
native which is set of higher-order

00:04:23,909 --> 00:04:27,810
components not hooks but high order

00:04:25,530 --> 00:04:29,639
components that help us use the API

00:04:27,810 --> 00:04:31,080
away and finally with older versions of

00:04:29,639 --> 00:04:34,620
react native we have chefs to our react

00:04:31,080 --> 00:04:36,750
native link once we set up an amplifier

00:04:34,620 --> 00:04:38,130
we can run amplifying it from the CLI

00:04:36,750 --> 00:04:40,320
and what's it's going to do is allow us

00:04:38,130 --> 00:04:42,510
to specify some configuration so give a

00:04:40,320 --> 00:04:44,130
project name and environments the editor

00:04:42,510 --> 00:04:46,590
we're using so even go to the level of

00:04:44,130 --> 00:04:49,169
generating the correct ID settings for

00:04:46,590 --> 00:04:51,200
you tell it what language using so Java

00:04:49,169 --> 00:04:53,669
scripts what framework create native

00:04:51,200 --> 00:04:56,190
some directory paths and start commands

00:04:53,669 --> 00:04:57,870
it will also create an ion policy so an

00:04:56,190 --> 00:04:59,700
AWS AIIMS awaits out of control

00:04:57,870 --> 00:05:01,290
permissions about what can be called

00:04:59,700 --> 00:05:03,389
what can be created in what can be

00:05:01,290 --> 00:05:05,820
accessed we can choose an existing

00:05:03,389 --> 00:05:07,260
profile I've used amplify as a side

00:05:05,820 --> 00:05:09,840
project and also my job at the side

00:05:07,260 --> 00:05:11,250
project to create a an application that

00:05:09,840 --> 00:05:12,870
helps you find coffee shops a coffee

00:05:11,250 --> 00:05:14,910
comes up a few times that not cleaned up

00:05:12,870 --> 00:05:16,889
the screenshots so give forgive that

00:05:14,910 --> 00:05:20,669
then it initializes that project in the

00:05:16,889 --> 00:05:22,919
cloud and we're good to go in the react

00:05:20,669 --> 00:05:25,680
native application in our app JSO app

00:05:22,919 --> 00:05:28,080
TSX we can import amplify from A to B s

00:05:25,680 --> 00:05:30,810
amplify and then we imports lowercase

00:05:28,080 --> 00:05:32,760
amplify from A to B s exports so oedipus

00:05:30,810 --> 00:05:34,830
exports was automatically generated by

00:05:32,760 --> 00:05:36,450
the amplify CLI includes all the

00:05:34,830 --> 00:05:38,430
configuration the names of the iron

00:05:36,450 --> 00:05:39,660
policies the cloud formation stack

00:05:38,430 --> 00:05:41,700
information that could be imported

00:05:39,660 --> 00:05:43,410
directly into the amplify library to

00:05:41,700 --> 00:05:44,669
help us start moving quickly and you

00:05:43,410 --> 00:05:46,020
notice it has not opened there to be s

00:05:44,669 --> 00:05:47,820
console we don't to think about that

00:05:46,020 --> 00:05:51,240
what we've done is say give me a new

00:05:47,820 --> 00:05:52,140
application let's think about the first

00:05:51,240 --> 00:05:54,090
thing I want to add to this application

00:05:52,140 --> 00:05:54,690
so authentication is a pretty common

00:05:54,090 --> 00:05:57,720
thing we want to have in our

00:05:54,690 --> 00:05:58,350
applications so it's as simple as using

00:05:57,720 --> 00:06:00,900
Cognito

00:05:58,350 --> 00:06:02,669
so kognito is simple and secure user

00:06:00,900 --> 00:06:04,410
signup to sign in and access control

00:06:02,669 --> 00:06:05,760
completely as a service it's a

00:06:04,410 --> 00:06:07,500
completely serverless service we're not

00:06:05,760 --> 00:06:10,050
provisioning anything it's all paper use

00:06:07,500 --> 00:06:11,100
and it works really nicely in AWS to do

00:06:10,050 --> 00:06:13,860
things like multi-factor authentication

00:06:11,100 --> 00:06:15,060
password resets all the boring stuff i

00:06:13,860 --> 00:06:18,960
as a developer really don't want to

00:06:15,060 --> 00:06:21,389
build so amplify ad auth and amplify

00:06:18,960 --> 00:06:23,160
push amplify add all changes that a

00:06:21,389 --> 00:06:24,750
double US exports file and generate so

00:06:23,160 --> 00:06:26,970
the cloud formation changes needed and

00:06:24,750 --> 00:06:30,270
then amplified push pushes those changes

00:06:26,970 --> 00:06:31,979
and updates our stack we can then import

00:06:30,270 --> 00:06:33,870
the with Authenticator higher order

00:06:31,979 --> 00:06:35,700
components from a to s amplify rap

00:06:33,870 --> 00:06:37,530
native and if we don't have a particular

00:06:35,700 --> 00:06:40,560
UI we just wanna have a basic login

00:06:37,530 --> 00:06:41,620
screen we can wrap up directly and that

00:06:40,560 --> 00:06:43,270
will result in a user

00:06:41,620 --> 00:06:45,520
a penny is a sign-in screen with email

00:06:43,270 --> 00:06:46,750
verification phone verification and any

00:06:45,520 --> 00:06:48,669
number of custom attributes you want to

00:06:46,750 --> 00:06:50,919
add to it so you've added complete user

00:06:48,669 --> 00:06:52,090
signup site with probably more advanced

00:06:50,919 --> 00:06:53,710
- authentication than you'd be able to

00:06:52,090 --> 00:06:56,949
do yourself in the space of about three

00:06:53,710 --> 00:06:58,270
minutes moving past that we've got

00:06:56,949 --> 00:07:00,100
authentication we have to need

00:06:58,270 --> 00:07:03,820
authentication for something in this

00:07:00,100 --> 00:07:05,620
case an API with API is innate of us as

00:07:03,820 --> 00:07:07,300
many options but Apps Inc is a really

00:07:05,620 --> 00:07:09,070
cool approach we can use graphic UL to

00:07:07,300 --> 00:07:10,360
aggregate data across a number of

00:07:09,070 --> 00:07:12,220
different services in a very declarative

00:07:10,360 --> 00:07:13,630
way but we're going to go down there

00:07:12,220 --> 00:07:15,490
more traditional rest approach is going

00:07:13,630 --> 00:07:17,590
to combine a to be s lambda which is the

00:07:15,490 --> 00:07:19,030
functions of service from AWS where you

00:07:17,590 --> 00:07:20,800
can write JavaScript Python or many

00:07:19,030 --> 00:07:23,139
other run tones and just write pure

00:07:20,800 --> 00:07:24,400
application code and then API gateway

00:07:23,139 --> 00:07:27,100
which allows us to have that sort of

00:07:24,400 --> 00:07:29,380
front door to our ATS architecture it

00:07:27,100 --> 00:07:31,449
allows us to route our HTTP request to

00:07:29,380 --> 00:07:34,180
our web sockets to trigger lambdas or

00:07:31,449 --> 00:07:36,130
different eight of your services much

00:07:34,180 --> 00:07:39,250
like authentication we're gonna use the

00:07:36,130 --> 00:07:41,110
amplifi CLI to do amplify add API and

00:07:39,250 --> 00:07:44,110
very simply we choose rest between graph

00:07:41,110 --> 00:07:46,360
QL and rest we then have specifies some

00:07:44,110 --> 00:07:48,160
more configuration so we need to give it

00:07:46,360 --> 00:07:51,250
a name we need to give a path for the

00:07:48,160 --> 00:07:52,990
API route that we're creating some more

00:07:51,250 --> 00:07:55,090
namings to our lambda functions that's a

00:07:52,990 --> 00:07:56,680
function of service we can G's use as

00:07:55,090 --> 00:07:58,960
template so that's using the service

00:07:56,680 --> 00:08:00,550
Express framework go through some more

00:07:58,960 --> 00:08:02,680
stuff about any other resources who want

00:08:00,550 --> 00:08:04,570
to create we can edit that which would

00:08:02,680 --> 00:08:06,669
be project index dot chess we can move

00:08:04,570 --> 00:08:08,889
it around later do we want to restrict

00:08:06,669 --> 00:08:10,900
access to the API so this is linking

00:08:08,889 --> 00:08:12,190
directly to authentication we can just

00:08:10,900 --> 00:08:14,110
choose that anyone who is an

00:08:12,190 --> 00:08:16,139
authenticated user can access this and

00:08:14,110 --> 00:08:18,220
anyone who's not does not have access

00:08:16,139 --> 00:08:19,479
this firma specification we can go

00:08:18,220 --> 00:08:20,110
through but right now we want to see

00:08:19,479 --> 00:08:22,180
what that looks like

00:08:20,110 --> 00:08:24,910
so it's automatically generated a file

00:08:22,180 --> 00:08:27,639
for us using the AWS service Express

00:08:24,910 --> 00:08:29,860
library expresses a node library for

00:08:27,639 --> 00:08:31,720
doing very simple servers obviously it's

00:08:29,860 --> 00:08:33,459
service so we don't we have a server but

00:08:31,720 --> 00:08:36,370
it has a very sort of simple get and

00:08:33,459 --> 00:08:38,740
response API that we can use so we got

00:08:36,370 --> 00:08:40,180
app gets fresh items and then we pass a

00:08:38,740 --> 00:08:41,919
simple function and send back the

00:08:40,180 --> 00:08:43,810
results here we're just encoding the

00:08:41,919 --> 00:08:45,459
event that came through we then

00:08:43,810 --> 00:08:48,220
construct our server which is just an

00:08:45,459 --> 00:08:50,079
express term and we export a handler the

00:08:48,220 --> 00:08:51,550
handlers have part of their is the code

00:08:50,079 --> 00:08:53,560
that's run by the functions our service

00:08:51,550 --> 00:08:55,360
so every time that API endpoint is

00:08:53,560 --> 00:08:57,370
triggered API gateway is going to call

00:08:55,360 --> 00:08:58,810
aw lamda Adria's lamda will know that

00:08:57,370 --> 00:09:01,899
this handler function needs to be run

00:08:58,810 --> 00:09:03,610
and it will run it then we were an

00:09:01,899 --> 00:09:05,230
amplified push that pushes those change

00:09:03,610 --> 00:09:06,850
to the cloud it's automatically update

00:09:05,230 --> 00:09:07,930
our cloud formation the cloud formation

00:09:06,850 --> 00:09:10,060
will then make the changes to API

00:09:07,930 --> 00:09:12,070
gateway lamda cloud watch and all the

00:09:10,060 --> 00:09:15,760
different services to make that work for

00:09:12,070 --> 00:09:18,190
us in our front-end we can then use API

00:09:15,760 --> 00:09:20,350
from a base amplify we have our

00:09:18,190 --> 00:09:23,350
configure that we saw before and we have

00:09:20,350 --> 00:09:24,779
a very ugly component here if not

00:09:23,350 --> 00:09:28,149
functional at all not using hooks at all

00:09:24,779 --> 00:09:29,920
with a simple States get sample which is

00:09:28,149 --> 00:09:32,860
an async function which is doing in

00:09:29,920 --> 00:09:34,570
awaits on API dot gets this is a name of

00:09:32,860 --> 00:09:36,459
the API this is the path that we

00:09:34,570 --> 00:09:38,260
specified earlier notice did not talk

00:09:36,459 --> 00:09:39,880
about JW TS or not to it about access

00:09:38,260 --> 00:09:41,740
tokens that's done completely

00:09:39,880 --> 00:09:44,320
automatically and then we can call set

00:09:41,740 --> 00:09:47,110
States then we can have a button with a

00:09:44,320 --> 00:09:48,579
simple very ugly bind which is linking

00:09:47,110 --> 00:09:49,720
to that function and then when we click

00:09:48,579 --> 00:09:51,339
it we're going to call our API

00:09:49,720 --> 00:09:54,779
completely authenticated with logging

00:09:51,339 --> 00:09:57,010
rate-limiting and everything out the box

00:09:54,779 --> 00:09:58,300
amplify mock is a newer addition to the

00:09:57,010 --> 00:09:59,620
amplify framework so this came at

00:09:58,300 --> 00:10:01,390
reinvent which is A to B esters big

00:09:59,620 --> 00:10:02,829
conference and this provides a local

00:10:01,390 --> 00:10:04,720
mock for our API calls completely

00:10:02,829 --> 00:10:07,570
automatically as well as a local

00:10:04,720 --> 00:10:09,640
dynamodb mock dynamodb mock dynamodb is

00:10:07,570 --> 00:10:11,800
a non relational database provided by

00:10:09,640 --> 00:10:14,110
AWS and having that lock locally can

00:10:11,800 --> 00:10:15,399
that mark locally can speed up your CI

00:10:14,110 --> 00:10:16,449
or make it easier to develop for

00:10:15,399 --> 00:10:18,279
instance when you're traveling I

00:10:16,449 --> 00:10:19,660
personally find that with service

00:10:18,279 --> 00:10:21,699
infrastructures it's not actually that

00:10:19,660 --> 00:10:22,899
useful to mock the resource is so cheap

00:10:21,699 --> 00:10:24,519
that you can just spin up a stack your

00:10:22,899 --> 00:10:25,750
test environments that some people find

00:10:24,519 --> 00:10:28,680
it quite useful to have the mocks and

00:10:25,750 --> 00:10:30,459
it's extremely quick to get them set up

00:10:28,680 --> 00:10:32,079
moving pass out so we've got

00:10:30,459 --> 00:10:33,940
authentication we've got an API we're

00:10:32,079 --> 00:10:35,890
going to want to see how users users so

00:10:33,940 --> 00:10:37,480
amplify add analytics and amplify push

00:10:35,890 --> 00:10:39,010
this will make changes to several

00:10:37,480 --> 00:10:41,529
different services but most notably

00:10:39,010 --> 00:10:43,390
pinpoints which is AWS as analytics

00:10:41,529 --> 00:10:45,459
service which is really maturing and

00:10:43,390 --> 00:10:46,870
spreading to more regions currently we

00:10:45,459 --> 00:10:48,790
can import analytics from A to B us

00:10:46,870 --> 00:10:50,470
amplify and then let's say on component

00:10:48,790 --> 00:10:52,920
in man of our homepage we can do

00:10:50,470 --> 00:10:54,820
analytics that record first event name

00:10:52,920 --> 00:10:56,800
this is then going to give us full

00:10:54,820 --> 00:10:58,660
access to a console in AWS where we can

00:10:56,800 --> 00:11:00,850
see all the different sessions are daily

00:10:58,660 --> 00:11:03,130
active users we can filter by things

00:11:00,850 --> 00:11:04,360
like countries regions etc and have that

00:11:03,130 --> 00:11:06,399
coming completely out the box of any

00:11:04,360 --> 00:11:07,720
configuration now note this is in

00:11:06,399 --> 00:11:08,950
restricted number of regions it's grown

00:11:07,720 --> 00:11:10,570
since we invent 29

00:11:08,950 --> 00:11:12,399
so most of Europe and America has it now

00:11:10,570 --> 00:11:15,490
but I don't think it's expanded yet to

00:11:12,399 --> 00:11:17,139
Asian AWS regions the other cool

00:11:15,490 --> 00:11:19,360
analytics things you can do is Kinesis

00:11:17,139 --> 00:11:22,060
so Kinesis is a stream management system

00:11:19,360 --> 00:11:23,740
by AWS which can handle huge gigabytes

00:11:22,060 --> 00:11:25,690
of data in real time to trigger other

00:11:23,740 --> 00:11:29,470
services like lambda or go directly into

00:11:25,690 --> 00:11:31,810
s3 we can import the alias Kinesis

00:11:29,470 --> 00:11:34,180
provider from a TBS amplify in our front

00:11:31,810 --> 00:11:37,180
end just do an amplifier add pluggable a

00:11:34,180 --> 00:11:39,040
new Kinesis provider we do analytics

00:11:37,180 --> 00:11:40,209
that record passing our data some

00:11:39,040 --> 00:11:42,639
partition and stream names that's

00:11:40,209 --> 00:11:44,199
Kinesis thing and then we can instantly

00:11:42,639 --> 00:11:45,910
just record a data event which are going

00:11:44,199 --> 00:11:47,199
to Kinesis and other teams in the

00:11:45,910 --> 00:11:49,420
organization could be consuming that

00:11:47,199 --> 00:11:50,589
stream without as managing or paying for

00:11:49,420 --> 00:11:53,980
provision service to manage that

00:11:50,589 --> 00:11:55,870
streaming system what else can it do

00:11:53,980 --> 00:11:57,519
well we covered analytics it can do

00:11:55,870 --> 00:11:59,320
graphic UL which is through app sync an

00:11:57,519 --> 00:12:02,320
extremely powerful way of having a

00:11:59,320 --> 00:12:03,880
massively extensible API storage so if

00:12:02,320 --> 00:12:05,920
you use uploads to s3 and also local

00:12:03,880 --> 00:12:08,769
device storage push notifications

00:12:05,920 --> 00:12:10,329
chatbots pub sub so pub sub

00:12:08,769 --> 00:12:12,010
architectures very lightweight

00:12:10,329 --> 00:12:14,199
internationalization the translation

00:12:12,010 --> 00:12:14,920
sports a little bit lacking caching

00:12:14,199 --> 00:12:17,199
predictions

00:12:14,920 --> 00:12:18,820
so using recognition which is being able

00:12:17,199 --> 00:12:22,899
to detect objects and text instead of

00:12:18,820 --> 00:12:25,149
images using AI poly which is text

00:12:22,899 --> 00:12:27,250
feature I think translate which is a

00:12:25,149 --> 00:12:29,709
translation system and then natural

00:12:27,250 --> 00:12:32,170
language processing for user contents

00:12:29,709 --> 00:12:33,880
there's also XR which is VR and AR but

00:12:32,170 --> 00:12:34,959
that's sort of lacking at the moment and

00:12:33,880 --> 00:12:37,660
probably it's going to progress in the

00:12:34,959 --> 00:12:39,670
future why would you not just use a more

00:12:37,660 --> 00:12:41,380
traditional way to manage your cloud

00:12:39,670 --> 00:12:42,579
infrastructure things like terraform for

00:12:41,380 --> 00:12:44,500
serverless things like the service

00:12:42,579 --> 00:12:46,420
framework or sam well the common

00:12:44,500 --> 00:12:48,910
passages the common patterns for usage

00:12:46,420 --> 00:12:50,589
are built into the CLI your declaratory

00:12:48,910 --> 00:12:52,209
saying I want an API you're not thinking

00:12:50,589 --> 00:12:54,370
about how it's working which you could

00:12:52,209 --> 00:12:55,600
argue is a bit of a not good thing but

00:12:54,370 --> 00:12:56,740
the same time it's a mass amount of

00:12:55,600 --> 00:12:58,779
speed and a massive reduction in

00:12:56,740 --> 00:13:00,339
complexity I'd say it's probably still

00:12:58,779 --> 00:13:01,569
more for MVPs you want to get something

00:13:00,339 --> 00:13:03,640
out to the market quickly or you have a

00:13:01,569 --> 00:13:05,170
side project but it's maturing more and

00:13:03,640 --> 00:13:07,089
more as a tool chain and as we're now

00:13:05,170 --> 00:13:08,920
able to import resources directly into

00:13:07,089 --> 00:13:11,050
cloud formation after they're generated

00:13:08,920 --> 00:13:12,370
from it amplify I can see there's a good

00:13:11,050 --> 00:13:14,970
way to sort of eject from the amplifying

00:13:12,370 --> 00:13:17,649
ecosystem if you need to

00:13:14,970 --> 00:13:19,149
in conclusion service in my opinion

00:13:17,649 --> 00:13:20,829
allows us to write more business value

00:13:19,149 --> 00:13:22,310
allows us to value our customers more

00:13:20,829 --> 00:13:24,170
per line of code and

00:13:22,310 --> 00:13:26,329
loads a clear restriction across many

00:13:24,170 --> 00:13:27,529
AWS services there are more a DBS

00:13:26,329 --> 00:13:29,089
services and I can remember so

00:13:27,529 --> 00:13:31,790
understanding deeply all of them can be

00:13:29,089 --> 00:13:33,050
quite a challenge and combined you can

00:13:31,790 --> 00:13:35,209
build quite complex cloud enabled

00:13:33,050 --> 00:13:37,069
applications in a few lines of code

00:13:35,209 --> 00:13:38,899
it is very faster you can get stuff to

00:13:37,069 --> 00:13:40,040
market very quickly it's probably a bit

00:13:38,899 --> 00:13:41,930
less flexible and things like the

00:13:40,040 --> 00:13:43,759
service framework but as a way to start

00:13:41,930 --> 00:13:45,379
with service applications is definitely

00:13:43,759 --> 00:13:47,480
there and for a way to build initial

00:13:45,379 --> 00:13:50,389
MVPs and test ideas I don't think it's

00:13:47,480 --> 00:13:51,980
there's anything as good as it a few

00:13:50,389 --> 00:13:56,569
more words about myself so I work for

00:13:51,980 --> 00:13:57,800
theöto we're a software development team

00:13:56,569 --> 00:13:58,939
to learn more about react native I

00:13:57,800 --> 00:14:01,220
imagine it's the right crowd so you're

00:13:58,939 --> 00:14:03,079
very welcome to join I also do a couple

00:14:01,220 --> 00:14:04,730
of initiatives around service so I run a

00:14:03,079 --> 00:14:06,829
service transformation blog on medium

00:14:04,730 --> 00:14:08,959
you're very welcome to check that out I

00:14:06,829 --> 00:14:12,050
run a service newsletter with the latest

00:14:08,959 --> 00:14:13,610
articles for the past month and it's not

00:14:12,050 --> 00:14:15,559
actually registering now but I have a

00:14:13,610 --> 00:14:16,939
podcast on Spotify about serverless

00:14:15,559 --> 00:14:19,220
that you can tell them a bit crazy for

00:14:16,939 --> 00:14:21,290
service and finally I've got an open

00:14:19,220 --> 00:14:23,269
source project service dev tools which

00:14:21,290 --> 00:14:25,459
allows you to have internal feedback and

00:14:23,269 --> 00:14:27,259
visibility with targeted metrics in your

00:14:25,459 --> 00:14:28,819
terminal so it looks quite cool but it's

00:14:27,259 --> 00:14:30,290
actually quite useful so you can see the

00:14:28,819 --> 00:14:31,850
different functions you have you can see

00:14:30,290 --> 00:14:34,610
the invocations the duration of those

00:14:31,850 --> 00:14:36,230
invocations logging in more metrics and

00:14:34,610 --> 00:14:37,730
looking for contributors if anyone's to

00:14:36,230 --> 00:14:38,899
open a pull request but if you want to

00:14:37,730 --> 00:14:40,399
check it out it works complete with

00:14:38,899 --> 00:14:42,170
amplify completely with the service

00:14:40,399 --> 00:14:45,139
framework I'm really with any eight of

00:14:42,170 --> 00:14:46,370
your service service I went through

00:14:45,139 --> 00:14:48,470
quite quickly there if you want to

00:14:46,370 --> 00:14:49,730
subscribe to newsletter I think it's one

00:14:48,470 --> 00:14:51,920
of those the other one is the podcast

00:14:49,730 --> 00:14:53,750
scam bow for them if you want to and

00:14:51,920 --> 00:14:56,010
feel free to follow me on Twitter any

00:14:53,750 --> 00:15:01,049
questions

00:14:56,010 --> 00:15:01,049
[Applause]

00:15:01,490 --> 00:15:07,100
I say of you before the sort of a bit

00:15:04,910 --> 00:15:14,420
more about and you did say amplify the

00:15:07,100 --> 00:15:17,080
thing maybe still just 480p but in terms

00:15:14,420 --> 00:15:19,640
of syllabus I'm kind of curious there is

00:15:17,080 --> 00:15:20,930
still a lot of discussion and any time I

00:15:19,640 --> 00:15:22,670
talk about service of people about

00:15:20,930 --> 00:15:27,350
whether you have even want to use that

00:15:22,670 --> 00:15:29,060
for say a highly important API so I'm

00:15:27,350 --> 00:15:33,459
just curious what your thoughts are in

00:15:29,060 --> 00:15:36,920
terms of ensuring that that's really

00:15:33,459 --> 00:15:39,020
yeah so the specific thing is about cold

00:15:36,920 --> 00:15:40,580
start times right so when somebody

00:15:39,020 --> 00:15:42,110
requests a service endpoint there's a

00:15:40,580 --> 00:15:43,279
cold start time with the cloud providers

00:15:42,110 --> 00:15:45,290
putting that code into a runnable

00:15:43,279 --> 00:15:48,380
container linking up all the network

00:15:45,290 --> 00:15:49,940
address translation that has a cost this

00:15:48,380 --> 00:15:51,529
has got a lot better recently so there's

00:15:49,940 --> 00:15:53,390
always been improvements to lambda which

00:15:51,529 --> 00:15:55,160
is ad versus function as a service if

00:15:53,390 --> 00:15:57,529
you deploy a small difference mall

00:15:55,160 --> 00:15:59,450
handler functions you can really reduce

00:15:57,529 --> 00:16:00,709
that cold start time but ads of reinvent

00:15:59,450 --> 00:16:02,990
at the end of last year they released

00:16:00,709 --> 00:16:05,779
provisioned concurrency which is sort of

00:16:02,990 --> 00:16:07,279
the opposites to serverless but you can

00:16:05,779 --> 00:16:09,740
basically ask the cloud rider to keep

00:16:07,279 --> 00:16:11,540
your lambda functions warm so for use

00:16:09,740 --> 00:16:13,070
cases we have that huge user throughput

00:16:11,540 --> 00:16:15,050
and like a millisecond delay could be an

00:16:13,070 --> 00:16:16,760
issue provision concurrency solves that

00:16:15,050 --> 00:16:18,470
problem but to be honest in the

00:16:16,760 --> 00:16:19,839
production service applications I ran I

00:16:18,470 --> 00:16:22,640
found that the cold start problem

00:16:19,839 --> 00:16:23,810
generally isn't as big as problem as I

00:16:22,640 --> 00:16:25,370
was worried about and other people have

00:16:23,810 --> 00:16:26,779
been worried about really when you have

00:16:25,370 --> 00:16:28,490
a high number of users those lounder

00:16:26,779 --> 00:16:29,930
functions are quite warm and if you get

00:16:28,490 --> 00:16:32,630
a couple of seconds of delay now and

00:16:29,930 --> 00:16:34,399
again users normally quite forgiving

00:16:32,630 --> 00:16:36,200
because it's not all the time it's that

00:16:34,399 --> 00:16:37,310
odd user and there's other issues in the

00:16:36,200 --> 00:16:39,260
network that can cause that sort of

00:16:37,310 --> 00:16:42,730
delay but provision concurrency is the

00:16:39,260 --> 00:16:42,730
answer just cost money

00:16:46,170 --> 00:16:51,640
Pradesh yes it's much cheaper but

00:16:49,240 --> 00:16:53,080
there's a new sort of it's people refer

00:16:51,640 --> 00:16:54,970
to its denial of wallet instead of

00:16:53,080 --> 00:16:56,680
denial of service so you have this API

00:16:54,970 --> 00:16:58,840
endpoint that can scale infinitely and

00:16:56,680 --> 00:17:00,310
people can hit you can't get a denial of

00:16:58,840 --> 00:17:02,800
service attack because you can scale

00:17:00,310 --> 00:17:04,480
infinitely but it will cost money so

00:17:02,800 --> 00:17:06,100
putting API gateways a good way to have

00:17:04,480 --> 00:17:08,020
that sort of one layer of protection you

00:17:06,100 --> 00:17:10,300
can integrate a wife in there as well

00:17:08,020 --> 00:17:12,220
which will rate limit particular IPS and

00:17:10,300 --> 00:17:14,140
blacklist them but you have to put in

00:17:12,220 --> 00:17:15,699
place some security guidelines some

00:17:14,140 --> 00:17:17,230
usage limits to make sure you don't have

00:17:15,699 --> 00:17:18,760
that and there's things like billing

00:17:17,230 --> 00:17:20,470
alerts which can help you react when

00:17:18,760 --> 00:17:21,970
there are problems but yeah there is a

00:17:20,470 --> 00:17:23,680
risk with having infinite scalability

00:17:21,970 --> 00:17:25,860
and you have to put some safeguards in

00:17:23,680 --> 00:17:25,860

YouTube URL: https://www.youtube.com/watch?v=MfUh0Su9ms4


