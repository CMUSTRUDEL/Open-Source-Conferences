Title: The Art of Giving and Receiving Code Reviews - JS Roundabout - March 2018
Publication date: 2018-03-12
Playlist: The JS Roundabout
Description: 
	Alexandra Hill of Imperial College London, giving a talk on Code Reviews.

Code reviews are one of the most effective tools we have, if we use them right. This talk will discuss the technical, cultural and psychological factors that make for better code reviews, better code, and happier coworkers.
Captions: 
	00:00:00,000 --> 00:00:03,419
hi okay so a brief introduction my name

00:00:01,979 --> 00:00:06,120
is Alex and I'm a senior software

00:00:03,419 --> 00:00:07,140
engineer at Imperial College I've worked

00:00:06,120 --> 00:00:09,480
in a number of different organizations

00:00:07,140 --> 00:00:11,490
of various sizes actually and I've seen

00:00:09,480 --> 00:00:13,710
really variable code review practices

00:00:11,490 --> 00:00:15,480
which I think vary a lot according

00:00:13,710 --> 00:00:17,010
mostly to the attitudes and

00:00:15,480 --> 00:00:19,350
personalities of the people within the

00:00:17,010 --> 00:00:21,210
teams but also broader organizational

00:00:19,350 --> 00:00:23,220
and cultural practices so I want to

00:00:21,210 --> 00:00:24,600
offer up some motivation for doing code

00:00:23,220 --> 00:00:27,510
reviews as well as some tips for doing

00:00:24,600 --> 00:00:31,289
them well out of interest who here has a

00:00:27,510 --> 00:00:32,790
regular code review practice okay

00:00:31,289 --> 00:00:34,200
good so about half of you but a lot of

00:00:32,790 --> 00:00:37,200
people a lot of people are not doing

00:00:34,200 --> 00:00:38,910
code reviews so a brief introduction to

00:00:37,200 --> 00:00:40,350
why you want to do them so what is the

00:00:38,910 --> 00:00:42,510
motivation for doing code reviews well

00:00:40,350 --> 00:00:44,579
the first thing is that they're

00:00:42,510 --> 00:00:46,829
extremely effective at finding defects

00:00:44,579 --> 00:00:48,360
in your code it's really simple but it's

00:00:46,829 --> 00:00:50,129
incredibly true so these are some

00:00:48,360 --> 00:00:54,059
examples from a book called code

00:00:50,129 --> 00:00:55,829
complete by Steve McConnell so in one

00:00:54,059 --> 00:00:58,590
software maintenance organization about

00:00:55,829 --> 00:01:00,719
half of one line changes where an error

00:00:58,590 --> 00:01:02,940
before they introduce code reviews when

00:01:00,719 --> 00:01:04,379
they introduce code reviews only 2% of

00:01:02,940 --> 00:01:06,510
those changes were an error so that's a

00:01:04,379 --> 00:01:07,950
massive reduction in defects just by

00:01:06,510 --> 00:01:08,869
introducing code reviews into your

00:01:07,950 --> 00:01:11,490
organization

00:01:08,869 --> 00:01:13,650
similarly okay this one is a comparative

00:01:11,490 --> 00:01:15,900
study so 11 programs developed by the

00:01:13,650 --> 00:01:17,700
same set of developers about half of

00:01:15,900 --> 00:01:19,740
them about five were developed without

00:01:17,700 --> 00:01:21,689
reviews the other six were developed

00:01:19,740 --> 00:01:23,310
with reviews when you compare the

00:01:21,689 --> 00:01:25,590
programs at the end the first five have

00:01:23,310 --> 00:01:27,450
an average of 4.5 errors per hundred

00:01:25,590 --> 00:01:30,240
lines and the six that have been under

00:01:27,450 --> 00:01:32,130
review have only 0.82 errors per hundred

00:01:30,240 --> 00:01:34,189
lines so again a massive reduction in

00:01:32,130 --> 00:01:37,500
defects when you introduce code reviews

00:01:34,189 --> 00:01:40,079
and finally another organization large

00:01:37,500 --> 00:01:42,000
organization 200 people reporting a 90

00:01:40,079 --> 00:01:43,710
percent decrease in defects after

00:01:42,000 --> 00:01:45,329
introducing reviews so it's pretty

00:01:43,710 --> 00:01:48,030
consistent we're seeing like an 80 to

00:01:45,329 --> 00:01:49,290
90% reduction in defects just by

00:01:48,030 --> 00:01:52,350
introducing code reviews which is

00:01:49,290 --> 00:01:54,329
amazing and so that's a really

00:01:52,350 --> 00:01:56,490
measurable kind of motivation for doing

00:01:54,329 --> 00:01:58,049
code reviews there's other things which

00:01:56,490 --> 00:01:59,610
are a little more amorphous a little

00:01:58,049 --> 00:02:01,799
harder to measure but I think still

00:01:59,610 --> 00:02:04,530
really really important ok so the first

00:02:01,799 --> 00:02:06,659
one is learning opportunities and this

00:02:04,530 --> 00:02:09,599
goes this goes two ways so on the one

00:02:06,659 --> 00:02:11,129
hand if you submit your code for review

00:02:09,599 --> 00:02:13,870
you're likely to get a lot of really

00:02:11,129 --> 00:02:15,730
helpful comments back from your peers so

00:02:13,870 --> 00:02:17,920
I'm right now coding in Python which is

00:02:15,730 --> 00:02:20,110
a new language for me and every time

00:02:17,920 --> 00:02:22,540
pretty much I submit a code review I get

00:02:20,110 --> 00:02:23,500
a bunch of helpful helpful suggestions

00:02:22,540 --> 00:02:25,900
from my colleagues were more familiar

00:02:23,500 --> 00:02:27,459
with it things like libraries that I

00:02:25,900 --> 00:02:28,840
wasn't aware of helpful utility

00:02:27,459 --> 00:02:31,000
functions I didn't know of maybe just

00:02:28,840 --> 00:02:32,950
alternative syntax options or terse or

00:02:31,000 --> 00:02:34,510
syntax that they're throwing out there

00:02:32,950 --> 00:02:36,909
so I know that I learn a lot from those

00:02:34,510 --> 00:02:39,159
code reviews and it also goes both ways

00:02:36,909 --> 00:02:41,379
so you learn from reading other people's

00:02:39,159 --> 00:02:43,120
code I'm a self-taught developer I

00:02:41,379 --> 00:02:45,129
imagine probably many people in this

00:02:43,120 --> 00:02:46,720
room are and we will have learned a

00:02:45,129 --> 00:02:48,790
great deal from reading other people's

00:02:46,720 --> 00:02:50,530
code well reviewing your peers is a

00:02:48,790 --> 00:02:52,359
great way to just spend some time

00:02:50,530 --> 00:02:54,190
reading other people's code you might

00:02:52,359 --> 00:02:55,329
see a neat way of doing something that

00:02:54,190 --> 00:02:57,940
you hadn't done before you might

00:02:55,329 --> 00:03:00,069
discover a new function a new style you

00:02:57,940 --> 00:03:01,599
might be you'll just develop your coding

00:03:00,069 --> 00:03:03,700
skills in general and this applies not

00:03:01,599 --> 00:03:07,030
only to junior developers but actually I

00:03:03,700 --> 00:03:10,390
think to developers at all levels future

00:03:07,030 --> 00:03:12,040
proofing your codebase so again this is

00:03:10,390 --> 00:03:13,840
a little bit hard to measure because by

00:03:12,040 --> 00:03:16,120
definition if the payoff is in the

00:03:13,840 --> 00:03:18,099
future it's really hard to measure it at

00:03:16,120 --> 00:03:20,799
the time of implementation but what do I

00:03:18,099 --> 00:03:23,049
mean by future proofing on the one hand

00:03:20,799 --> 00:03:25,329
you can increase your bus factor by

00:03:23,049 --> 00:03:27,519
having other people multiple people look

00:03:25,329 --> 00:03:29,349
at code the bus factor for those of you

00:03:27,519 --> 00:03:31,269
who aren't familiar is the number of

00:03:29,349 --> 00:03:33,190
people in your organization who would

00:03:31,269 --> 00:03:35,500
have to get hit by a bus in order for

00:03:33,190 --> 00:03:38,579
your project to fall apart and actually

00:03:35,500 --> 00:03:41,019
I really really hate this terminology

00:03:38,579 --> 00:03:42,549
because if one of my colleagues was hit

00:03:41,019 --> 00:03:44,379
by a bus I don't know about you but the

00:03:42,549 --> 00:03:46,090
last thing I would be thinking is oh

00:03:44,379 --> 00:03:49,840
thank god someone else knows the code

00:03:46,090 --> 00:03:51,970
base right so I prefer to think of this

00:03:49,840 --> 00:03:53,560
as your Hawaii factor so this is you

00:03:51,970 --> 00:03:55,120
know if one of my colleagues or how many

00:03:53,560 --> 00:03:56,650
of my colleagues would have to win the

00:03:55,120 --> 00:03:58,750
lottery and take a wonderful early

00:03:56,650 --> 00:04:00,970
retirement in Hawaii for my project to

00:03:58,750 --> 00:04:03,549
fall apart okay so you could increase

00:04:00,970 --> 00:04:05,169
your Hawaii factor you ensure that code

00:04:03,549 --> 00:04:07,090
is readable this is obviously super

00:04:05,169 --> 00:04:08,889
important for future proofing again

00:04:07,090 --> 00:04:10,449
because the developers working on a

00:04:08,889 --> 00:04:12,160
project are going to change over time

00:04:10,449 --> 00:04:14,169
and you want to make sure that anyone

00:04:12,160 --> 00:04:16,570
can step into this project and get up to

00:04:14,169 --> 00:04:19,299
speed and dive into that code without

00:04:16,570 --> 00:04:21,220
massive overheads and maintaining code

00:04:19,299 --> 00:04:23,469
standards again an incredibly amorphous

00:04:21,220 --> 00:04:25,300
aim but but there's something that's

00:04:23,469 --> 00:04:26,830
incredibly important as well so whatever

00:04:25,300 --> 00:04:28,240
the best practice that

00:04:26,830 --> 00:04:30,009
you bring into your what you know

00:04:28,240 --> 00:04:31,629
there's as we have seen in the previous

00:04:30,009 --> 00:04:33,370
talk that's obviously many debates over

00:04:31,629 --> 00:04:34,720
best practice in code standards but

00:04:33,370 --> 00:04:36,789
whatever those standards are that you

00:04:34,720 --> 00:04:38,620
adhere to as an organization a great way

00:04:36,789 --> 00:04:40,240
an important way of enforcing them is

00:04:38,620 --> 00:04:42,479
through code review and you can also

00:04:40,240 --> 00:04:44,830
through the through code review also

00:04:42,479 --> 00:04:48,610
explore and develop those code standards

00:04:44,830 --> 00:04:50,590
as they change over time okay so back to

00:04:48,610 --> 00:04:52,930
that really measurable thing defect

00:04:50,590 --> 00:04:54,580
finding there's a few simple things that

00:04:52,930 --> 00:04:56,620
you can do to make your code reviews

00:04:54,580 --> 00:04:59,199
more effective according to that metric

00:04:56,620 --> 00:05:01,509
and this graph comes from a study that

00:04:59,199 --> 00:05:03,759
was done by Cisco Systems in conjunction

00:05:01,509 --> 00:05:05,650
with IBM I've taken this from a blog

00:05:03,759 --> 00:05:07,810
post they wrote sway I don't have access

00:05:05,650 --> 00:05:09,060
to the underlying underlying data but

00:05:07,810 --> 00:05:10,810
they have some nice illustrative

00:05:09,060 --> 00:05:13,000
principles that they they themselves

00:05:10,810 --> 00:05:15,280
threw out of the data and the first one

00:05:13,000 --> 00:05:17,020
is is really intuitive I think you're

00:05:15,280 --> 00:05:19,810
probably all recognized as soon as you

00:05:17,020 --> 00:05:22,000
see it that fewer lines of code are

00:05:19,810 --> 00:05:24,490
easier to review and in fact what they

00:05:22,000 --> 00:05:27,090
found is that under 400 lines of codes

00:05:24,490 --> 00:05:30,729
you find a lot more defect so this

00:05:27,090 --> 00:05:32,409
y-axis up here is defect density so it's

00:05:30,729 --> 00:05:34,360
not the total number of defects but it's

00:05:32,409 --> 00:05:36,430
the number per thousand lines of code

00:05:34,360 --> 00:05:38,259
okay so this is a sort of standardized

00:05:36,430 --> 00:05:39,699
measure regardless of the size of your

00:05:38,259 --> 00:05:41,770
pool request the size of your code

00:05:39,699 --> 00:05:43,810
review and basically what you can see is

00:05:41,770 --> 00:05:45,129
that as these get I mean the important

00:05:43,810 --> 00:05:46,779
thing to note is just that as these

00:05:45,129 --> 00:05:48,279
reviews get longer and longer but

00:05:46,779 --> 00:05:50,650
especially after four hundred lines of

00:05:48,279 --> 00:05:52,900
code the number of defects found

00:05:50,650 --> 00:05:55,330
massively drops off so why is that

00:05:52,900 --> 00:05:56,860
because the reviewer simply can't digest

00:05:55,330 --> 00:05:59,379
and is probably overwhelmed by that

00:05:56,860 --> 00:06:00,789
amount of information and I think it

00:05:59,379 --> 00:06:02,889
looks like from this from this

00:06:00,789 --> 00:06:04,779
particular study it looks like 400 is a

00:06:02,889 --> 00:06:06,789
reasonable cutoff there's other proxies

00:06:04,779 --> 00:06:08,199
that you could use for this it's not

00:06:06,789 --> 00:06:10,360
always obvious how many lines of code

00:06:08,199 --> 00:06:12,400
are in a code review so maybe number of

00:06:10,360 --> 00:06:14,169
files changed as a sort of heuristic

00:06:12,400 --> 00:06:16,270
that that sometimes works you could say

00:06:14,169 --> 00:06:17,770
I'll have 10 have 10 or more files

00:06:16,270 --> 00:06:19,000
change in this code review maybe that's

00:06:17,770 --> 00:06:22,210
getting a little big maybe I'm gonna

00:06:19,000 --> 00:06:24,699
find that hard to review making sure

00:06:22,210 --> 00:06:26,860
that code reviews are single features or

00:06:24,699 --> 00:06:29,500
single units of work they don't comprise

00:06:26,860 --> 00:06:31,810
multiple unrelated changes in one code

00:06:29,500 --> 00:06:33,930
review that's also very much related to

00:06:31,810 --> 00:06:35,800
this this this idea of pull request size

00:06:33,930 --> 00:06:39,069
but size is a really critical

00:06:35,800 --> 00:06:40,169
consideration this is quite quite

00:06:39,069 --> 00:06:42,539
related and from the same

00:06:40,169 --> 00:06:44,449
study and this is the speed at which you

00:06:42,539 --> 00:06:47,819
review those owns of lines of code so

00:06:44,449 --> 00:06:49,020
again if you review things too fast you

00:06:47,819 --> 00:06:50,879
can see that there's quite a steep

00:06:49,020 --> 00:06:52,499
drop-off in the amount of defects that

00:06:50,879 --> 00:06:55,259
you actually come back as finding after

00:06:52,499 --> 00:06:57,599
around the five hundred lines of code

00:06:55,259 --> 00:06:59,789
per hour mark so if you have one of

00:06:57,599 --> 00:07:01,800
those four hundred line code reviews you

00:06:59,789 --> 00:07:03,449
want to be giving that about an hour if

00:07:01,800 --> 00:07:04,949
you're doing it faster you're probably

00:07:03,449 --> 00:07:08,210
not reading it thoroughly you're

00:07:04,949 --> 00:07:12,839
probably not going to find the defects

00:07:08,210 --> 00:07:15,449
this one is yeah so so another tip is to

00:07:12,839 --> 00:07:18,180
use checklists in your reviews this is a

00:07:15,449 --> 00:07:19,740
really simple idea but I know that I

00:07:18,180 --> 00:07:21,029
only started doing this really recently

00:07:19,740 --> 00:07:23,639
and it's made a big difference in my

00:07:21,029 --> 00:07:25,379
organization so this these could be at

00:07:23,639 --> 00:07:27,270
an organizational level perhaps you have

00:07:25,379 --> 00:07:28,800
some standard checklist of things that

00:07:27,270 --> 00:07:30,509
you want reviewers to look out for when

00:07:28,800 --> 00:07:31,830
they're reviewing code they could also

00:07:30,509 --> 00:07:33,779
be something you could implement on a

00:07:31,830 --> 00:07:35,400
personal level so if you know that there

00:07:33,779 --> 00:07:38,279
are certain things maybe that you are

00:07:35,400 --> 00:07:41,099
prone to forgetting or overlooking maybe

00:07:38,279 --> 00:07:42,839
you want to just enforce this create a

00:07:41,099 --> 00:07:45,300
checklist of your own for people who are

00:07:42,839 --> 00:07:47,159
reviewing your code these are some super

00:07:45,300 --> 00:07:48,930
generic ones that probably work for a

00:07:47,159 --> 00:07:52,020
lot of people things like are they unit

00:07:48,930 --> 00:07:53,699
tests did you understand this does it

00:07:52,020 --> 00:07:55,649
follow solid principles if those are the

00:07:53,699 --> 00:07:56,460
principles that you adhere to but

00:07:55,649 --> 00:07:58,560
obviously these are going to vary

00:07:56,460 --> 00:08:01,080
according to organization I wanted to

00:07:58,560 --> 00:08:02,159
give you an example because as I say

00:08:01,080 --> 00:08:05,189
we're actually doing this

00:08:02,159 --> 00:08:07,949
at Imperial so this is an example of a

00:08:05,189 --> 00:08:10,199
poor request we are using github for

00:08:07,949 --> 00:08:12,240
version control we do all our code

00:08:10,199 --> 00:08:13,740
reviews by the github pull request

00:08:12,240 --> 00:08:16,849
mechanism which is which is a great

00:08:13,740 --> 00:08:19,710
interface and this is a repository for

00:08:16,849 --> 00:08:21,240
so I work with I'm an engineer but I

00:08:19,710 --> 00:08:23,189
actually work with research scientists

00:08:21,240 --> 00:08:25,349
and those scientists are writing code

00:08:23,189 --> 00:08:27,719
but they're not very familiar with agile

00:08:25,349 --> 00:08:30,930
processes with version control with any

00:08:27,719 --> 00:08:33,180
of these workflows so we we got them to

00:08:30,930 --> 00:08:35,190
sort start storing some of their codes

00:08:33,180 --> 00:08:36,569
reports they were writing in a method

00:08:35,190 --> 00:08:39,060
mathematical programming language called

00:08:36,569 --> 00:08:41,159
are inside a git repository and we

00:08:39,060 --> 00:08:42,659
wanted reports to be reviewed as they

00:08:41,159 --> 00:08:44,670
were checked into this repository and

00:08:42,659 --> 00:08:46,889
initially when we introduced this it

00:08:44,670 --> 00:08:48,240
seemed like it was mostly a formality so

00:08:46,889 --> 00:08:50,459
these things were just getting approved

00:08:48,240 --> 00:08:52,400
checked in and we were having problems

00:08:50,459 --> 00:08:54,200
like weird name

00:08:52,400 --> 00:08:55,970
that didn't make sense or code that

00:08:54,200 --> 00:08:58,430
doesn't compile even or code that

00:08:55,970 --> 00:09:00,590
doesn't run so this is a super super

00:08:58,430 --> 00:09:02,660
simple checklist that we use in

00:09:00,590 --> 00:09:06,110
conjunction with a very structured pour

00:09:02,660 --> 00:09:07,460
request so we have report name linked to

00:09:06,110 --> 00:09:09,010
our issue tracking software where you

00:09:07,460 --> 00:09:11,210
have a description of what the issue was

00:09:09,010 --> 00:09:12,980
instructions for running the report

00:09:11,210 --> 00:09:14,510
things you want the reviewer to look out

00:09:12,980 --> 00:09:17,240
for and then this really basic check

00:09:14,510 --> 00:09:19,220
list is the name sensible is there only

00:09:17,240 --> 00:09:20,870
one report in this pull request so

00:09:19,220 --> 00:09:23,060
relating back to is there only one issue

00:09:20,870 --> 00:09:24,230
in this pull request does it run locally

00:09:23,060 --> 00:09:25,670
on your machine so you think these

00:09:24,230 --> 00:09:27,320
things are really obvious but as soon as

00:09:25,670 --> 00:09:28,820
we introduced this suddenly the review

00:09:27,320 --> 00:09:31,460
process started making sense and we

00:09:28,820 --> 00:09:35,660
started catching these things and saving

00:09:31,460 --> 00:09:38,180
everyone a great deal of time okay so

00:09:35,660 --> 00:09:40,520
all of those things are really practical

00:09:38,180 --> 00:09:42,530
suggestions thinking of code reviews as

00:09:40,520 --> 00:09:44,810
basically a task that one person

00:09:42,530 --> 00:09:47,270
undertakes one person sits down and

00:09:44,810 --> 00:09:49,400
reviews code but what code reviews

00:09:47,270 --> 00:09:51,410
really are is a dialogue between two

00:09:49,400 --> 00:09:54,740
people between an author and between a

00:09:51,410 --> 00:09:56,780
reviewer more than that what code

00:09:54,740 --> 00:09:58,880
reviews really are is a critique of one

00:09:56,780 --> 00:10:02,480
person's work right so the author

00:09:58,880 --> 00:10:04,100
submits their work for critique now if

00:10:02,480 --> 00:10:06,290
someone is invested in their work which

00:10:04,100 --> 00:10:07,940
I assume that most of us are and you

00:10:06,290 --> 00:10:10,310
know we hope that everyone in our teams

00:10:07,940 --> 00:10:12,650
are then that critique is going to feel

00:10:10,310 --> 00:10:15,560
personal because it is personal it's a

00:10:12,650 --> 00:10:18,140
critique of someone's work and I I think

00:10:15,560 --> 00:10:19,580
that bearing this in mind I can

00:10:18,140 --> 00:10:22,510
massively improve your code review

00:10:19,580 --> 00:10:27,140
process and it's very easy to forget

00:10:22,510 --> 00:10:28,400
here's a highly unscientific sample from

00:10:27,140 --> 00:10:29,720
my Twitter followers where I asked

00:10:28,400 --> 00:10:32,260
people how often that they feel

00:10:29,720 --> 00:10:34,100
defensive when receiving a code review

00:10:32,260 --> 00:10:35,150
you can see they're a couple of people

00:10:34,100 --> 00:10:37,550
actually said that they never feel

00:10:35,150 --> 00:10:39,560
defensive and I think that's remarkable

00:10:37,550 --> 00:10:40,820
personally and I'd love to know more

00:10:39,560 --> 00:10:42,620
about the factors that mediate how

00:10:40,820 --> 00:10:45,890
people feel about code reviews I suspect

00:10:42,620 --> 00:10:47,840
you know personality how well you get on

00:10:45,890 --> 00:10:49,370
with your co-workers how long you've

00:10:47,840 --> 00:10:50,660
been doing it how well you're invested

00:10:49,370 --> 00:10:53,030
there might be so many reasons that

00:10:50,660 --> 00:10:55,910
mediate this but basically the takeaway

00:10:53,030 --> 00:10:58,430
message is that pretty much everyone has

00:10:55,910 --> 00:11:01,310
experienced feeling defensive during a

00:10:58,430 --> 00:11:02,900
code review I imagine that's very common

00:11:01,310 --> 00:11:04,250
I imagine everyone can relate to that

00:11:02,900 --> 00:11:05,840
whether it's because they've had an

00:11:04,250 --> 00:11:07,400
abrasive reviewer or

00:11:05,840 --> 00:11:08,510
or someone they just didn't get on with

00:11:07,400 --> 00:11:10,760
or whether it's something that they feel

00:11:08,510 --> 00:11:12,590
very regularly maybe it's something they

00:11:10,760 --> 00:11:13,160
feel in a new job particularly or

00:11:12,590 --> 00:11:14,750
what-have-you

00:11:13,160 --> 00:11:17,420
I think this is an extremely relatable

00:11:14,750 --> 00:11:22,160
experience I want to offer some

00:11:17,420 --> 00:11:24,500
explanation of why so the endowment

00:11:22,160 --> 00:11:26,180
effect is I don't know if anyone's

00:11:24,500 --> 00:11:28,580
familiar much with behavioral economics

00:11:26,180 --> 00:11:30,500
so in the endowment effect is a

00:11:28,580 --> 00:11:31,850
phenomenon that's been observed time and

00:11:30,500 --> 00:11:33,590
time again in psychology and behavioral

00:11:31,850 --> 00:11:36,110
economics where people actually value

00:11:33,590 --> 00:11:38,450
something that they own more than

00:11:36,110 --> 00:11:40,690
something that they don't own it was

00:11:38,450 --> 00:11:43,040
coined in this paper where basically

00:11:40,690 --> 00:11:45,380
half the participants were given a mug

00:11:43,040 --> 00:11:48,020
and half of the participants don't have

00:11:45,380 --> 00:11:50,540
a mug and then the experiment has wanted

00:11:48,020 --> 00:11:53,090
to see how highly in monetary terms

00:11:50,540 --> 00:11:55,310
people valued this mug and it turns out

00:11:53,090 --> 00:11:56,810
that when you own a thing you value it a

00:11:55,310 --> 00:11:58,220
lot higher than when you don't own it so

00:11:56,810 --> 00:11:59,810
you can see nearly double in this

00:11:58,220 --> 00:12:02,240
experiment this is the price and dollars

00:11:59,810 --> 00:12:04,220
up here so people who own the mug were

00:12:02,240 --> 00:12:06,190
seen to value it at nearly twice the

00:12:04,220 --> 00:12:08,540
price of people who didn't own the mug

00:12:06,190 --> 00:12:10,910
obviously there's not a direct analogy

00:12:08,540 --> 00:12:13,100
between ownership ism in the sense of

00:12:10,910 --> 00:12:15,050
owning material things and ownership in

00:12:13,100 --> 00:12:16,190
the sense of authorship which is kind of

00:12:15,050 --> 00:12:18,530
the relevant sense that we're thinking

00:12:16,190 --> 00:12:20,660
about code in but really I just want to

00:12:18,530 --> 00:12:22,370
illustrate that you know if we can't

00:12:20,660 --> 00:12:24,500
even come up with an objective value

00:12:22,370 --> 00:12:26,960
system for something as trivial as a mug

00:12:24,500 --> 00:12:28,730
the idea that we could objectively value

00:12:26,960 --> 00:12:30,320
code and that whether we had written it

00:12:28,730 --> 00:12:31,940
and whether we owned it in some sense

00:12:30,320 --> 00:12:33,890
didn't come into the equation doesn't

00:12:31,940 --> 00:12:35,930
seem likely I'd say it seems likely that

00:12:33,890 --> 00:12:38,930
ownership in the sense of authorship is

00:12:35,930 --> 00:12:40,670
an even more profound effect on on how

00:12:38,930 --> 00:12:43,870
much we value that item and how

00:12:40,670 --> 00:12:46,100
defensive we might be of that item so

00:12:43,870 --> 00:12:48,440
there's another reason that people might

00:12:46,100 --> 00:12:50,270
feel defensive in code reviews and this

00:12:48,440 --> 00:12:51,860
is that they might worry that they're

00:12:50,270 --> 00:12:54,830
actually being evaluated on the basis of

00:12:51,860 --> 00:12:56,690
the comments they receive so you you

00:12:54,830 --> 00:12:58,670
know developers might think for whatever

00:12:56,690 --> 00:13:00,140
reason that a lot of comments on their

00:12:58,670 --> 00:13:03,140
pull requests is a comment on them as a

00:13:00,140 --> 00:13:04,490
developer or is even going to affect

00:13:03,140 --> 00:13:06,500
their standing in their job is even

00:13:04,490 --> 00:13:08,090
going to be like a formal evaluation of

00:13:06,500 --> 00:13:14,420
their performance in the eyes of their

00:13:08,090 --> 00:13:16,580
employer moving on to the sorts of

00:13:14,420 --> 00:13:18,230
things that I think can generate

00:13:16,580 --> 00:13:19,230
conflict in a code review and why the

00:13:18,230 --> 00:13:21,000
sorts of

00:13:19,230 --> 00:13:24,180
why I think code reviews can be a source

00:13:21,000 --> 00:13:26,160
of conflict I've sort of developed this

00:13:24,180 --> 00:13:29,790
thinking where I categorize things along

00:13:26,160 --> 00:13:31,770
two axes so on the one hand comments can

00:13:29,790 --> 00:13:34,530
have high reward on the other things

00:13:31,770 --> 00:13:36,780
comments can have quite low reward and

00:13:34,530 --> 00:13:38,520
on the vertical axis things that have a

00:13:36,780 --> 00:13:43,170
low potential for conflict and a high

00:13:38,520 --> 00:13:45,080
potential for conflict so I'll talk

00:13:43,170 --> 00:13:47,910
first about this upper left quadrant

00:13:45,080 --> 00:13:48,630
I've called this I've categorized this

00:13:47,910 --> 00:13:50,640
as petachi

00:13:48,630 --> 00:13:52,920
because that's I think how it can

00:13:50,640 --> 00:13:54,900
sometimes feel to an author when they

00:13:52,920 --> 00:13:57,060
receive ten comments pointing out that

00:13:54,900 --> 00:13:59,580
their indentation was with two spaces

00:13:57,060 --> 00:14:01,770
instead of four or whatever so things

00:13:59,580 --> 00:14:04,980
like minor typos whitespace indentations

00:14:01,770 --> 00:14:06,840
or also arbitrary preferences which

00:14:04,980 --> 00:14:10,170
leads me to the most relatable slide I

00:14:06,840 --> 00:14:12,690
think for me which is there's always

00:14:10,170 --> 00:14:14,120
going to be you know multiple equivalent

00:14:12,690 --> 00:14:16,200
ways of doing things that don't

00:14:14,120 --> 00:14:19,020
particularly matter don't particularly

00:14:16,200 --> 00:14:20,400
affect the performance or the logic they

00:14:19,020 --> 00:14:21,780
don't reflect some like higher design

00:14:20,400 --> 00:14:23,700
principle but people have these

00:14:21,780 --> 00:14:25,110
arbitrary preferences and it can be very

00:14:23,700 --> 00:14:26,670
frustrating when you've submitted what

00:14:25,110 --> 00:14:29,520
you think is great code and someone

00:14:26,670 --> 00:14:35,430
picks apart these these apparently

00:14:29,520 --> 00:14:38,100
pedantic complaints only on the opposite

00:14:35,430 --> 00:14:40,200
quadrant down in the low conflict but

00:14:38,100 --> 00:14:41,910
high reward category this is kind of

00:14:40,200 --> 00:14:43,110
coming back to those those defects we

00:14:41,910 --> 00:14:44,460
were talking about earlier so I

00:14:43,110 --> 00:14:46,710
characterize these these things as

00:14:44,460 --> 00:14:49,170
factual like oh you're missing a test

00:14:46,710 --> 00:14:50,760
for this functionality or you've

00:14:49,170 --> 00:14:52,530
implemented the wrong behavior through

00:14:50,760 --> 00:14:55,290
some misunderstanding or there's a bug

00:14:52,530 --> 00:14:57,270
in this code I think these have quite

00:14:55,290 --> 00:14:58,980
low potential for conflict because

00:14:57,270 --> 00:15:00,630
precisely because the ownership there is

00:14:58,980 --> 00:15:03,240
low right so someone hasn't made an

00:15:00,630 --> 00:15:04,830
active choice to introduce a bug or an

00:15:03,240 --> 00:15:06,570
active choice to implement the wrong

00:15:04,830 --> 00:15:07,830
behavior so they don't feel like I said

00:15:06,570 --> 00:15:09,090
some ownership over that code that's

00:15:07,830 --> 00:15:10,680
just a mistake and they're probably

00:15:09,090 --> 00:15:12,510
quite grateful for you to point it out

00:15:10,680 --> 00:15:13,920
that they've forgotten to write a test

00:15:12,510 --> 00:15:15,330
or whatever and they're high reward

00:15:13,920 --> 00:15:18,210
obviously you're finding defects in the

00:15:15,330 --> 00:15:20,160
code and finally the most interesting

00:15:18,210 --> 00:15:22,170
category these are the things that are

00:15:20,160 --> 00:15:24,810
both high reward and have high potential

00:15:22,170 --> 00:15:26,640
for conflict so these relate back to

00:15:24,810 --> 00:15:28,550
that more and more firs category that we

00:15:26,640 --> 00:15:31,580
talked about at the beginning of

00:15:28,550 --> 00:15:33,030
benefits so code standards and

00:15:31,580 --> 00:15:35,040
maintainability

00:15:33,030 --> 00:15:36,660
and scalability and future proofing so

00:15:35,040 --> 00:15:39,960
these are things like is this code

00:15:36,660 --> 00:15:42,770
readable what-what-what design pattered

00:15:39,960 --> 00:15:45,240
it'd you choose is it over-engineered

00:15:42,770 --> 00:15:47,850
what what were your naming choices and I

00:15:45,240 --> 00:15:51,450
think these these are categorized as

00:15:47,850 --> 00:15:53,880
opinion because basically two competent

00:15:51,450 --> 00:15:55,320
reasonable developers can have a

00:15:53,880 --> 00:15:57,210
legitimate disagreement over these

00:15:55,320 --> 00:15:58,920
things and because these are active

00:15:57,210 --> 00:16:00,600
choices that people have made these are

00:15:58,920 --> 00:16:02,490
also things that people feel quite a

00:16:00,600 --> 00:16:03,930
high degree of ownership over and they

00:16:02,490 --> 00:16:05,700
probably just by virtue of the fact that

00:16:03,930 --> 00:16:06,990
they've done it a certain way they're

00:16:05,700 --> 00:16:10,350
probably going to be quite defensive of

00:16:06,990 --> 00:16:11,760
that way and yeah there's sort of you

00:16:10,350 --> 00:16:13,950
can see that there's a lot of debate in

00:16:11,760 --> 00:16:15,450
scope for this so you know even

00:16:13,950 --> 00:16:17,010
something like duplicated logic well

00:16:15,450 --> 00:16:19,410
there's always a trade-off maybe between

00:16:17,010 --> 00:16:21,060
never duplicating logic and keeping code

00:16:19,410 --> 00:16:22,800
readable or keeping logic close to where

00:16:21,060 --> 00:16:24,360
it's used so so these are things that I

00:16:22,800 --> 00:16:26,160
think are really reasonably up for

00:16:24,360 --> 00:16:29,330
debate and really worth debating and

00:16:26,160 --> 00:16:31,350
worth ironing out through code reviews

00:16:29,330 --> 00:16:33,270
there's one more thing I want to point

00:16:31,350 --> 00:16:36,030
out here which is something that can

00:16:33,270 --> 00:16:37,970
elevate conflict is just volume so even

00:16:36,030 --> 00:16:41,030
though maybe one or two of these

00:16:37,970 --> 00:16:43,650
pedantic or one or two of these

00:16:41,030 --> 00:16:45,300
obviously factual comments might be

00:16:43,650 --> 00:16:47,460
well-received I think when there's a

00:16:45,300 --> 00:16:49,580
deluge of comments it can generally

00:16:47,460 --> 00:16:51,870
raise people's defensive noise levels so

00:16:49,580 --> 00:16:53,820
it'd be one way of one way of reducing

00:16:51,870 --> 00:16:56,070
that is back to the the first slide

00:16:53,820 --> 00:16:59,970
which is keep your code very small and

00:16:56,070 --> 00:17:01,890
manageable and I have a few more

00:16:59,970 --> 00:17:03,150
suggestions for minimizing basically

00:17:01,890 --> 00:17:05,160
unnecessary conflict because you don't

00:17:03,150 --> 00:17:07,650
want to waste your conflict points on

00:17:05,160 --> 00:17:10,560
things like typos when really the

00:17:07,650 --> 00:17:11,700
interesting conflict that can conflicts

00:17:10,560 --> 00:17:13,200
got a loaded word but let's say the

00:17:11,700 --> 00:17:15,120
interesting disagreements can happen up

00:17:13,200 --> 00:17:17,700
in this quadrant so kind of we want to

00:17:15,120 --> 00:17:19,470
save all our conflict resolution energy

00:17:17,700 --> 00:17:21,350
for the things like readability and

00:17:19,470 --> 00:17:24,830
design choice and engineering choice

00:17:21,350 --> 00:17:27,900
okay so minimizing unnecessary conflict

00:17:24,830 --> 00:17:31,140
have clear code conventions so if you

00:17:27,900 --> 00:17:32,670
come up together with a set of coherent

00:17:31,140 --> 00:17:34,290
code conventions that you want to adhere

00:17:32,670 --> 00:17:36,330
to as an organization and you can

00:17:34,290 --> 00:17:37,410
implement those right off the bat you're

00:17:36,330 --> 00:17:39,120
going to minimize the number of

00:17:37,410 --> 00:17:42,450
disagreements that arise at the code

00:17:39,120 --> 00:17:44,730
review level or to make things that can

00:17:42,450 --> 00:17:46,320
be automated so not everything can be

00:17:44,730 --> 00:17:46,800
automated away I think some of those

00:17:46,320 --> 00:17:49,290
more

00:17:46,800 --> 00:17:51,240
questions need human input but things

00:17:49,290 --> 00:17:53,460
like whitespace absolutely can so I

00:17:51,240 --> 00:17:55,230
think earlier prettify was mentioned and

00:17:53,460 --> 00:17:57,000
there's a pretty always mentioned and

00:17:55,230 --> 00:17:59,040
there's many linting tools and automated

00:17:57,000 --> 00:18:02,220
formatting tools that we can employ that

00:17:59,040 --> 00:18:04,050
are just going to take that pedantic set

00:18:02,220 --> 00:18:07,350
of comments sort of out of the picture

00:18:04,050 --> 00:18:09,660
basically unit test can obviously catch

00:18:07,350 --> 00:18:12,060
bugs and Latin and wrong functionality

00:18:09,660 --> 00:18:13,320
so you know a strong tradition of always

00:18:12,060 --> 00:18:16,050
using unit tests can catch a lot of

00:18:13,320 --> 00:18:17,700
defects continuously integrates in your

00:18:16,050 --> 00:18:19,590
code and a build server that maybe run

00:18:17,700 --> 00:18:21,690
some of these things as automatic build

00:18:19,590 --> 00:18:23,100
steps again meat just means that the

00:18:21,690 --> 00:18:24,690
code that actually reaches code review

00:18:23,100 --> 00:18:27,630
is just going to have less of these

00:18:24,690 --> 00:18:30,960
minor defects or minor issues that that

00:18:27,630 --> 00:18:35,220
a reviewer might pick up on and all the

00:18:30,960 --> 00:18:36,870
reviews first so this is I'm surprised

00:18:35,220 --> 00:18:38,340
by it by the fact that some people don't

00:18:36,870 --> 00:18:40,500
actually do this so if you review your

00:18:38,340 --> 00:18:41,730
own code the surprising thing is you can

00:18:40,500 --> 00:18:44,160
actually be quite a good review of your

00:18:41,730 --> 00:18:46,410
own code I can't sort of count how many

00:18:44,160 --> 00:18:47,520
times I've created a poor request gotten

00:18:46,410 --> 00:18:49,770
through to annotate it found like a

00:18:47,520 --> 00:18:51,990
rogue console.log or or found that I've

00:18:49,770 --> 00:18:53,940
checked in an erroneous file that's not

00:18:51,990 --> 00:18:55,830
even meant to be there or yeah I've

00:18:53,940 --> 00:18:58,050
reverted so I'm setting that needs needs

00:18:55,830 --> 00:19:00,360
switching back or whatever so the

00:18:58,050 --> 00:19:02,340
process of writing some comments on your

00:19:00,360 --> 00:19:04,350
own code actually going through and

00:19:02,340 --> 00:19:05,310
annotating it and pointing the reviewer

00:19:04,350 --> 00:19:06,510
in the direction of the bits that you

00:19:05,310 --> 00:19:07,950
think are new that you think are

00:19:06,510 --> 00:19:11,250
interesting that you think merit debate

00:19:07,950 --> 00:19:12,780
can be a really effective process at

00:19:11,250 --> 00:19:14,460
weeding out some of those defects that

00:19:12,780 --> 00:19:15,870
are just going to be annoying just going

00:19:14,460 --> 00:19:18,500
to add to your annoyance level when you

00:19:15,870 --> 00:19:21,930
get this deluge of comments back so

00:19:18,500 --> 00:19:23,670
thinking back to the so hopefully we've

00:19:21,930 --> 00:19:24,870
minimized the amount of conflict that

00:19:23,670 --> 00:19:25,860
that's going to arise in this pull

00:19:24,870 --> 00:19:28,080
request but there's going to be things

00:19:25,860 --> 00:19:29,160
we're going to disagree about how do we

00:19:28,080 --> 00:19:31,680
manage these disagreements in a

00:19:29,160 --> 00:19:33,120
productive way so one thing that I found

00:19:31,680 --> 00:19:34,710
really helpful is thinking about the

00:19:33,120 --> 00:19:37,290
different styles people actually have

00:19:34,710 --> 00:19:39,720
for resolving conflicts and this is this

00:19:37,290 --> 00:19:41,250
is these are sort of five archetypes and

00:19:39,720 --> 00:19:42,690
traditional conflict resolution theory

00:19:41,250 --> 00:19:44,730
obviously it's not to say that everyone

00:19:42,690 --> 00:19:46,110
fits into these exactly or at different

00:19:44,730 --> 00:19:47,520
so that these aren't malleable or at

00:19:46,110 --> 00:19:49,230
different times or different contexts

00:19:47,520 --> 00:19:51,510
people don't move between these but

00:19:49,230 --> 00:19:53,640
broadly speaking we have avoidant of

00:19:51,510 --> 00:19:55,680
conflict altogether so I definitely know

00:19:53,640 --> 00:19:57,900
people who either don't like to submit

00:19:55,680 --> 00:19:59,879
their code for review or when you ask

00:19:57,900 --> 00:20:00,869
them for a review they they just okay it

00:19:59,879 --> 00:20:02,879
straight off the bat and they don't

00:20:00,869 --> 00:20:04,739
provide any comments I think one

00:20:02,879 --> 00:20:06,479
possible explanation of that could be

00:20:04,739 --> 00:20:08,149
that they don't like conflict and

00:20:06,479 --> 00:20:11,699
they're avoiding it

00:20:08,149 --> 00:20:13,709
yielding on the other hand you might

00:20:11,699 --> 00:20:16,169
yeah you might have someone who

00:20:13,709 --> 00:20:17,459
basically never pushes back and just

00:20:16,169 --> 00:20:18,569
implements anything off the bat that

00:20:17,459 --> 00:20:20,729
suggested by someone else and that's

00:20:18,569 --> 00:20:23,969
also not super helpful if you want a

00:20:20,729 --> 00:20:25,289
collaborative process competing I'm I've

00:20:23,969 --> 00:20:27,209
also witnessed this and I'm sure many

00:20:25,289 --> 00:20:28,919
people have witnessed this where people

00:20:27,209 --> 00:20:30,299
see the code review is actually a

00:20:28,919 --> 00:20:32,699
battleground where they have to defend

00:20:30,299 --> 00:20:34,109
their initial instincts or ideas and

00:20:32,699 --> 00:20:36,809
it's a bit of a it's a bit of a

00:20:34,109 --> 00:20:38,599
playground fit for people's egos and I

00:20:36,809 --> 00:20:41,159
think that can be a big problem

00:20:38,599 --> 00:20:42,779
compromising is is kind of like a sort

00:20:41,159 --> 00:20:45,329
of middle ground that people go down and

00:20:42,779 --> 00:20:48,059
then the optimal solution that we want

00:20:45,329 --> 00:20:49,289
is a collaborative attitude so we want

00:20:48,059 --> 00:20:51,059
people to participate in active

00:20:49,289 --> 00:20:52,919
discussion we don't want them to shy

00:20:51,059 --> 00:20:55,559
away from it but we also want them to

00:20:52,919 --> 00:20:56,609
understand when they might be wrong see

00:20:55,559 --> 00:20:59,009
things from another person's perspective

00:20:56,609 --> 00:21:01,199
and really be interested in the end

00:20:59,009 --> 00:21:05,759
result as opposed to any kind of sort of

00:21:01,199 --> 00:21:07,229
engine individualistic ideas so there's

00:21:05,759 --> 00:21:08,940
I mean as well as making your code

00:21:07,229 --> 00:21:11,069
reviews more effective of course and

00:21:08,940 --> 00:21:12,479
making your the outcome of those

00:21:11,069 --> 00:21:14,339
questions about code standards more

00:21:12,479 --> 00:21:15,449
productive there's of course another

00:21:14,339 --> 00:21:17,609
reason that you might be interested in

00:21:15,449 --> 00:21:19,799
these conflict resolution ideas which is

00:21:17,609 --> 00:21:21,479
just that you want your workplace or

00:21:19,799 --> 00:21:23,999
your team or your open-source team or

00:21:21,479 --> 00:21:26,039
whatever context it is your community to

00:21:23,999 --> 00:21:27,899
be like a nice place for people right

00:21:26,039 --> 00:21:28,829
like for people to be generally happy

00:21:27,899 --> 00:21:30,989
and it for it to be a welcoming

00:21:28,829 --> 00:21:32,940
environment so of course there's there's

00:21:30,989 --> 00:21:35,369
you know putting efficacy in the bottom

00:21:32,940 --> 00:21:37,949
line aside there's also just this just a

00:21:35,369 --> 00:21:40,859
good human incentive I think to try and

00:21:37,949 --> 00:21:42,349
think about these things how do we move

00:21:40,859 --> 00:21:46,889
people towards a more collaborative

00:21:42,349 --> 00:21:48,809
style basically there are two main

00:21:46,889 --> 00:21:51,419
strategies so one is that we want to

00:21:48,809 --> 00:21:53,339
lower defensiveness another way you

00:21:51,419 --> 00:21:55,139
could think of this as lower proprietary

00:21:53,339 --> 00:21:57,149
nurse a little bit so I talked about how

00:21:55,139 --> 00:21:58,949
people feel a lot of ownership and that

00:21:57,149 --> 00:22:00,239
can lead them to be to value things a

00:21:58,949 --> 00:22:02,879
little in a little bit of a distorted

00:22:00,239 --> 00:22:05,969
way so lowering proprietary nurse a bit

00:22:02,879 --> 00:22:08,969
lowering defensiveness on the one hand

00:22:05,969 --> 00:22:10,979
and raising ego if someone is always

00:22:08,969 --> 00:22:12,809
yielding or is very avoidant of conflict

00:22:10,979 --> 00:22:13,570
so giving people a little more

00:22:12,809 --> 00:22:15,970
confidence give

00:22:13,570 --> 00:22:17,590
people a little more assertiveness what

00:22:15,970 --> 00:22:22,360
are the things that we could do to get

00:22:17,590 --> 00:22:24,280
there so on an organizational level pair

00:22:22,360 --> 00:22:27,310
programming is a great strategy

00:22:24,280 --> 00:22:29,980
does anyone here pair program cool so

00:22:27,310 --> 00:22:31,180
that's one thing that can be used you

00:22:29,980 --> 00:22:32,680
use the foster a sense of collective

00:22:31,180 --> 00:22:33,970
ownership basically at the end of the

00:22:32,680 --> 00:22:35,740
day it's not just one person who's

00:22:33,970 --> 00:22:37,660
written that code so that the authorship

00:22:35,740 --> 00:22:40,750
is shared and the ownership is very

00:22:37,660 --> 00:22:42,220
explicitly shared this it seems really

00:22:40,750 --> 00:22:43,960
basic but discussing things prior to

00:22:42,220 --> 00:22:45,310
implementation so if you are going to

00:22:43,960 --> 00:22:46,960
embark on something that's going to be a

00:22:45,310 --> 00:22:49,120
novel way of doing things or maybe

00:22:46,960 --> 00:22:50,590
you're introducing yet some logic that's

00:22:49,120 --> 00:22:51,970
never been seen before in your code base

00:22:50,590 --> 00:22:54,070
that you might be implementing new

00:22:51,970 --> 00:22:55,870
coding standards just discuss that

00:22:54,070 --> 00:22:57,610
collectively before you implement it so

00:22:55,870 --> 00:22:58,890
that these decisions are taken forward

00:22:57,610 --> 00:23:02,590
as a team

00:22:58,890 --> 00:23:04,480
never silo code bases so don't have one

00:23:02,590 --> 00:23:06,490
developer working one projects another

00:23:04,480 --> 00:23:08,200
developer working on other projects mix

00:23:06,490 --> 00:23:10,480
and match keep your developers moving

00:23:08,200 --> 00:23:13,810
between the projects work in small small

00:23:10,480 --> 00:23:16,030
units yeah base basically again this is

00:23:13,810 --> 00:23:17,470
a way of reducing a sort of unhealthy

00:23:16,030 --> 00:23:20,920
level of ownership over a particular

00:23:17,470 --> 00:23:22,540
codebase this is kind of abstract but

00:23:20,920 --> 00:23:23,470
the more you feel like a team and the

00:23:22,540 --> 00:23:25,780
more you've built those team

00:23:23,470 --> 00:23:27,730
relationships the more receptive you're

00:23:25,780 --> 00:23:29,440
going to be to your teammates feedback

00:23:27,730 --> 00:23:32,980
basically and the less defensive you're

00:23:29,440 --> 00:23:34,840
going to be and finally back to that

00:23:32,980 --> 00:23:37,030
idea of being evaluated make sure that

00:23:34,840 --> 00:23:38,980
you do decouple any individual

00:23:37,030 --> 00:23:40,690
performance metrics from the code review

00:23:38,980 --> 00:23:42,640
process so you don't ever want your

00:23:40,690 --> 00:23:44,350
developers to think that they are their

00:23:42,640 --> 00:23:45,730
performance within the team and as a

00:23:44,350 --> 00:23:46,900
developer is being assessed on the

00:23:45,730 --> 00:23:48,460
number of comments they get back on

00:23:46,900 --> 00:23:49,990
their code because then you'll end up

00:23:48,460 --> 00:23:54,250
just with a dysfunctional process that

00:23:49,990 --> 00:23:57,550
people don't want to participate in okay

00:23:54,250 --> 00:23:59,800
what can you do as a reviewer one really

00:23:57,550 --> 00:24:01,210
basic thing say thank you so the person

00:23:59,800 --> 00:24:02,890
who submitted the code it really goes a

00:24:01,210 --> 00:24:04,660
long way for people to feel that their

00:24:02,890 --> 00:24:05,860
efforts were appreciated even if you

00:24:04,660 --> 00:24:07,960
have a lot of comments about the code

00:24:05,860 --> 00:24:09,100
itself their effort has not going to

00:24:07,960 --> 00:24:13,960
notice and you're appreciative of the

00:24:09,100 --> 00:24:16,030
effort another principle that I think is

00:24:13,960 --> 00:24:18,400
I think is right is is to aim to raise

00:24:16,030 --> 00:24:20,830
code only by a grade or two don't

00:24:18,400 --> 00:24:23,440
overreach so if you do have a junior

00:24:20,830 --> 00:24:25,360
developer or someone whose codes is a

00:24:23,440 --> 00:24:26,020
little bit below below what you were

00:24:25,360 --> 00:24:28,210
what you are

00:24:26,020 --> 00:24:29,350
when it gets the code review try and

00:24:28,210 --> 00:24:31,540
nagy that grade up

00:24:29,350 --> 00:24:33,610
so if it's a c-grade code try and bring

00:24:31,540 --> 00:24:35,620
that up to a B or maybe a B+ if you're

00:24:33,610 --> 00:24:38,080
getting B code try and raise that up to

00:24:35,620 --> 00:24:40,840
an A if you try and drag someone from a

00:24:38,080 --> 00:24:42,460
C to an A+ or deeds to an A+ in a code

00:24:40,840 --> 00:24:44,860
review that's going to be a really

00:24:42,460 --> 00:24:46,450
painful process for everyone so training

00:24:44,860 --> 00:24:49,120
although code reviews are a great

00:24:46,450 --> 00:24:50,860
platform for learning training is

00:24:49,120 --> 00:24:53,110
something that should happen aside from

00:24:50,860 --> 00:24:54,490
code reviews and the code review process

00:24:53,110 --> 00:24:55,510
has to be kind and it has to be

00:24:54,490 --> 00:24:57,450
something that people want to engage in

00:24:55,510 --> 00:24:59,410
and that's not going to be the case if

00:24:57,450 --> 00:25:03,700
if they feel that they've basically

00:24:59,410 --> 00:25:08,320
scored in e ask questions so this is a

00:25:03,700 --> 00:25:10,600
simple language thing I think I missed

00:25:08,320 --> 00:25:11,710
one thing okay so the first thing I

00:25:10,600 --> 00:25:13,360
thought you the first thing I wanted to

00:25:11,710 --> 00:25:16,060
say which has disappeared from this

00:25:13,360 --> 00:25:18,190
slide is changing you to Wii

00:25:16,060 --> 00:25:20,620
so I'm already doing that here so you

00:25:18,190 --> 00:25:22,270
know you could say you could reuse this

00:25:20,620 --> 00:25:25,000
function or you should reuse this

00:25:22,270 --> 00:25:27,100
function even worse and in much much

00:25:25,000 --> 00:25:29,200
nicer way of conveying the same messages

00:25:27,100 --> 00:25:31,540
we could reuse this function even if the

00:25:29,200 --> 00:25:33,070
person even even if you'll talk about

00:25:31,540 --> 00:25:34,660
something that that person the author is

00:25:33,070 --> 00:25:36,100
going to implement themselves just say

00:25:34,660 --> 00:25:38,980
we it's really simple

00:25:36,100 --> 00:25:41,140
every place you say you say we phrase

00:25:38,980 --> 00:25:41,770
things as a question could we reuse this

00:25:41,140 --> 00:25:43,750
function

00:25:41,770 --> 00:25:45,430
I mean firstly it sounds friendlier and

00:25:43,750 --> 00:25:47,230
secondly you might actually be wrong you

00:25:45,430 --> 00:25:48,760
know maybe you've overlooked something

00:25:47,230 --> 00:25:50,260
that author has been looking at that

00:25:48,760 --> 00:25:51,550
logic a lot more intently perhaps

00:25:50,260 --> 00:25:52,780
there's some subtlety in those functions

00:25:51,550 --> 00:25:54,520
that you haven't realized and it can

00:25:52,780 --> 00:25:56,200
actually be reused or they have a good

00:25:54,520 --> 00:25:59,980
reason for not reusing it so phrase

00:25:56,200 --> 00:26:02,260
things as a question justify requests so

00:25:59,980 --> 00:26:04,870
again this is making a request rather

00:26:02,260 --> 00:26:07,180
than a demand so instead of saying

00:26:04,870 --> 00:26:09,310
rename this function to get reports with

00:26:07,180 --> 00:26:11,110
formatted date something like could we

00:26:09,310 --> 00:26:12,910
rename this to get reports of format a

00:26:11,110 --> 00:26:14,890
date to make it clear that the date will

00:26:12,910 --> 00:26:16,840
already be formatted so I'm justifying

00:26:14,890 --> 00:26:18,850
it I'm phrasing it as a question I'm

00:26:16,840 --> 00:26:20,050
inviting the author to respond I'm

00:26:18,850 --> 00:26:22,420
inviting the author's opinion

00:26:20,050 --> 00:26:24,820
effectively so these are some strategies

00:26:22,420 --> 00:26:30,520
that we can do use just through our

00:26:24,820 --> 00:26:31,750
language as a reviewer there you go the

00:26:30,520 --> 00:26:33,160
other thing you can do as a review it is

00:26:31,750 --> 00:26:35,290
b-positive so give some positive

00:26:33,160 --> 00:26:38,470
feedback even if it's just a one-line

00:26:35,290 --> 00:26:39,910
comment which is which is thanks for

00:26:38,470 --> 00:26:41,830
writing this or this works

00:26:39,910 --> 00:26:44,620
really well this works perfectly this is

00:26:41,830 --> 00:26:46,240
just what we wanted or whatever but but

00:26:44,620 --> 00:26:49,000
I usually find there's there's maybe

00:26:46,240 --> 00:26:50,170
like a yes something's something

00:26:49,000 --> 00:26:51,430
positive to comment on on the code

00:26:50,170 --> 00:26:53,020
basically even if it's like this is

00:26:51,430 --> 00:26:54,490
really easy to read well that's that's a

00:26:53,020 --> 00:26:55,660
plus that's great comment on that you

00:26:54,490 --> 00:26:57,010
know readability is one of the things

00:26:55,660 --> 00:26:57,640
we're looking for don't take it for

00:26:57,010 --> 00:26:59,170
granted

00:26:57,640 --> 00:27:01,660
say thanks say it say that it was good

00:26:59,170 --> 00:27:03,160
it seen it sounds really simple but at

00:27:01,660 --> 00:27:05,050
the end of the day we're all quite basic

00:27:03,160 --> 00:27:06,820
creatures and we all have these egos and

00:27:05,050 --> 00:27:08,230
telling people that they've done a good

00:27:06,820 --> 00:27:12,820
job when they've done a good job really

00:27:08,230 --> 00:27:14,680
goes a surprisingly long way okay again

00:27:12,820 --> 00:27:18,430
my slide is messed up I'm obviously not

00:27:14,680 --> 00:27:20,440
very good okay so as an author what can

00:27:18,430 --> 00:27:22,060
we do as an author because it's all very

00:27:20,440 --> 00:27:23,560
well giving all this advice to reviewers

00:27:22,060 --> 00:27:25,390
but at the end of the day sometimes you

00:27:23,560 --> 00:27:27,550
will receive reviews from people who are

00:27:25,390 --> 00:27:29,470
difficult or phrasings an abrasive way

00:27:27,550 --> 00:27:31,030
or say things that are hurtful or just

00:27:29,470 --> 00:27:33,130
for whatever reason it rubs you the

00:27:31,030 --> 00:27:34,780
wrong way so some strategies that you as

00:27:33,130 --> 00:27:37,480
the author as the recipient of the code

00:27:34,780 --> 00:27:39,580
review can employ the as if technique

00:27:37,480 --> 00:27:42,340
which is a little challenging but very

00:27:39,580 --> 00:27:44,260
effective you just imagined that you was

00:27:42,340 --> 00:27:46,330
something else so you could imagine that

00:27:44,260 --> 00:27:49,090
you were in a different state of mind

00:27:46,330 --> 00:27:50,410
like how would I respond to this if I

00:27:49,090 --> 00:27:53,590
were actually grateful for this feedback

00:27:50,410 --> 00:27:56,050
instead of wanting to flip the table how

00:27:53,590 --> 00:27:58,930
would I respond to this if I were Mary

00:27:56,050 --> 00:28:00,430
she's always so calm and magnanimous

00:27:58,930 --> 00:28:03,700
when she receives critical feedback I

00:28:00,430 --> 00:28:05,200
really what would Mary say how would I

00:28:03,700 --> 00:28:06,280
respond if this code wasn't mine if I

00:28:05,200 --> 00:28:08,530
was reading these comments about

00:28:06,280 --> 00:28:10,210
something a third party had written how

00:28:08,530 --> 00:28:12,370
would I assess the validity of the

00:28:10,210 --> 00:28:14,260
suggestions that are being made so it it

00:28:12,370 --> 00:28:16,990
sounds kind of simple but it's it's such

00:28:14,260 --> 00:28:18,880
a very effective technique say thank you

00:28:16,990 --> 00:28:20,710
to the reviewer so it goes both ways the

00:28:18,880 --> 00:28:22,690
reviewer has spent hopefully as we saw

00:28:20,710 --> 00:28:24,880
at least an hour reviewing your 400

00:28:22,690 --> 00:28:27,640
lines of code so say thank you to them

00:28:24,880 --> 00:28:29,230
for your for their time that can be

00:28:27,640 --> 00:28:31,030
disarming to them it can make them feel

00:28:29,230 --> 00:28:34,450
appreciated it can make them engage in a

00:28:31,030 --> 00:28:35,950
more good faith with you and it can also

00:28:34,450 --> 00:28:37,990
be a way of practicing this first one

00:28:35,950 --> 00:28:39,040
right so the second you say thank you

00:28:37,990 --> 00:28:40,980
even if you weren't feeling grateful

00:28:39,040 --> 00:28:43,990
maybe you feel a little more grateful

00:28:40,980 --> 00:28:46,300
annotate your review first again this

00:28:43,990 --> 00:28:48,850
mentioned this before review your own

00:28:46,300 --> 00:28:50,950
review basically first this can be a way

00:28:48,850 --> 00:28:53,740
of making sure that the reviewer

00:28:50,950 --> 00:28:55,450
understands your intentions in gay

00:28:53,740 --> 00:28:56,679
gage them get in there with the

00:28:55,450 --> 00:28:59,110
collaborative engagement first

00:28:56,679 --> 00:29:01,150
effectively or if someone is not really

00:28:59,110 --> 00:29:02,500
this is also a way of if someone is

00:29:01,150 --> 00:29:04,750
reluctant to participate in the process

00:29:02,500 --> 00:29:06,250
someone has that more avoidant style you

00:29:04,750 --> 00:29:07,690
can sort of solicit their feedback and

00:29:06,250 --> 00:29:12,370
show them that you really value and you

00:29:07,690 --> 00:29:15,160
you want their collaboration okay so

00:29:12,370 --> 00:29:16,720
summary optimized review reviewer

00:29:15,160 --> 00:29:19,270
effectiveness with the few simple tricks

00:29:16,720 --> 00:29:22,030
like checklists and like small

00:29:19,270 --> 00:29:23,980
self-contained pull requests minimize

00:29:22,030 --> 00:29:26,230
unnecessary conflict automate away

00:29:23,980 --> 00:29:28,840
things like white space white space

00:29:26,230 --> 00:29:30,610
arguments understand feelings of

00:29:28,840 --> 00:29:32,380
ownership and don't really expect people

00:29:30,610 --> 00:29:33,880
not to feel feelings of ownership that's

00:29:32,380 --> 00:29:35,710
just human that's just natural and

00:29:33,880 --> 00:29:37,390
furthermore it's probably not desirable

00:29:35,710 --> 00:29:39,880
to get rid of feelings of ownership

00:29:37,390 --> 00:29:41,620
people who value something highly also

00:29:39,880 --> 00:29:43,420
take pride in it also put a lot of

00:29:41,620 --> 00:29:46,660
effort into it also care a lot about

00:29:43,420 --> 00:29:49,510
about the about the merit of the outcome

00:29:46,660 --> 00:29:51,400
and nudge people towards collaboration

00:29:49,510 --> 00:29:53,050
whether you're the organization at an

00:29:51,400 --> 00:29:55,600
organizational level whether you're a

00:29:53,050 --> 00:29:57,850
reviewer or even if you're an author you

00:29:55,600 --> 00:30:00,400
can try and nudge your reviewers towards

00:29:57,850 --> 00:30:01,929
collaborating with you so that was

00:30:00,400 --> 00:30:04,690
really dense thanks for sitting through

00:30:01,929 --> 00:30:06,460
it and hopefully you can all take away

00:30:04,690 --> 00:30:08,110
some of those tips to implement in your

00:30:06,460 --> 00:30:13,740
own code review practice

00:30:08,110 --> 00:30:13,740

YouTube URL: https://www.youtube.com/watch?v=Ua4cT-sVI7A


