Title: The JS Roundabout, Testing Node.js Applications, January 2018
Publication date: 2018-01-31
Playlist: The JS Roundabout
Description: 
	Talk presented by Thanasis Polychronakis (Netscan).

More about The JS Roundabout: https://www.meetup.com/The-JS-Roundabout
Captions: 
	00:00:00,030 --> 00:00:04,620
so I just recently arrived in London so

00:00:02,429 --> 00:00:08,990
some sort introduction I think is in

00:00:04,620 --> 00:00:11,010
place I just came to London from Greece

00:00:08,990 --> 00:00:12,870
I've been very involved in the local

00:00:11,010 --> 00:00:16,800
community they're doing the local nodejs

00:00:12,870 --> 00:00:19,199
meetups organising the David conference

00:00:16,800 --> 00:00:23,250
which I definitely suggest you check out

00:00:19,199 --> 00:00:26,880
for a very nice warm trip on June 2

00:00:23,250 --> 00:00:28,890
Thessalonians to meet the best web

00:00:26,880 --> 00:00:32,610
developers and trends out there going on

00:00:28,890 --> 00:00:36,899
I'm very active on open source 14 p.m.

00:00:32,610 --> 00:00:39,809
packages published on NPM and I've

00:00:36,899 --> 00:00:43,670
contributed to most major node.js

00:00:39,809 --> 00:00:47,039
packages as well professionally my

00:00:43,670 --> 00:00:50,280
previous roles were mostly managing and

00:00:47,039 --> 00:00:52,860
growing teams and varies the type of

00:00:50,280 --> 00:00:55,079
role I'm looking for here although I

00:00:52,860 --> 00:00:57,360
know it's going to take long so if you

00:00:55,079 --> 00:01:01,109
got any contracted jobs for me I'm here

00:00:57,360 --> 00:01:03,920
to take them so we're going to talk

00:01:01,109 --> 00:01:07,500
about setting up your testing

00:01:03,920 --> 00:01:10,260
infrastructure how you what you need to

00:01:07,500 --> 00:01:11,400
invest in so that you have a robust test

00:01:10,260 --> 00:01:14,189
infrastructure for your node.js

00:01:11,400 --> 00:01:17,330
application and this is specifically

00:01:14,189 --> 00:01:20,009
referred to early stage startups so

00:01:17,330 --> 00:01:22,409
going through this commotion time and

00:01:20,009 --> 00:01:24,990
time again gears over the gears we have

00:01:22,409 --> 00:01:27,119
observed certain patterns and practices

00:01:24,990 --> 00:01:29,700
that work best and accelerate your

00:01:27,119 --> 00:01:31,970
testing and make it even more robust and

00:01:29,700 --> 00:01:36,840
widget and this is what we're going to

00:01:31,970 --> 00:01:40,380
talk about today so if you are a major

00:01:36,840 --> 00:01:43,020
corporation with 200 plus engineers some

00:01:40,380 --> 00:01:46,560
things may apply some things may not so

00:01:43,020 --> 00:01:48,960
today we're going to talk about the

00:01:46,560 --> 00:01:51,170
tools and the libraries used and most

00:01:48,960 --> 00:01:53,670
importantly how to set up your node.js

00:01:51,170 --> 00:01:56,130
application so it's more testable and

00:01:53,670 --> 00:01:59,869
how to create your testing

00:01:56,130 --> 00:02:04,079
infrastructure that is the point of this

00:01:59,869 --> 00:02:08,340
presentation so these are just the tools

00:02:04,079 --> 00:02:09,750
that I use I'm just showing them because

00:02:08,340 --> 00:02:12,690
these are the tools that we are going to

00:02:09,750 --> 00:02:13,850
be using those differ but what I want

00:02:12,690 --> 00:02:16,220
you to keep from today

00:02:13,850 --> 00:02:19,790
presentation is the practices and the

00:02:16,220 --> 00:02:24,380
patterns which we are going to be

00:02:19,790 --> 00:02:27,050
checking out right now so when you are

00:02:24,380 --> 00:02:32,140
creating a node.js application what you

00:02:27,050 --> 00:02:35,960
need to be careful of is to initialize

00:02:32,140 --> 00:02:39,170
everything within functions so you don't

00:02:35,960 --> 00:02:42,260
have anything defined outside of

00:02:39,170 --> 00:02:46,250
functions that would be executed by the

00:02:42,260 --> 00:02:48,440
moment your module is required let's see

00:02:46,250 --> 00:02:51,380
what this means in code basically so

00:02:48,440 --> 00:02:53,270
this is our index.js file this is

00:02:51,380 --> 00:02:56,510
basically your bootstrap file the very

00:02:53,270 --> 00:02:59,390
first file that nodejs will load to boot

00:02:56,510 --> 00:03:02,120
up your application at the top we got

00:02:59,390 --> 00:03:04,490
our libraries that we require and this

00:03:02,120 --> 00:03:09,320
right here with the application boot

00:03:04,490 --> 00:03:13,160
function we start by we start by booting

00:03:09,320 --> 00:03:16,490
our services our database connections

00:03:13,160 --> 00:03:18,230
our s3 whatever our queues so everything

00:03:16,490 --> 00:03:20,870
is ready for the application to start

00:03:18,230 --> 00:03:24,110
when everything is ready within proceed

00:03:20,870 --> 00:03:25,000
to start our web server or whatever the

00:03:24,110 --> 00:03:29,990
service please

00:03:25,000 --> 00:03:32,990
and after that at the end of the file we

00:03:29,990 --> 00:03:36,050
have two very important parts we have

00:03:32,990 --> 00:03:41,800
the standalone test so this basically is

00:03:36,050 --> 00:03:45,260
a hack that stores in the this boolean

00:03:41,800 --> 00:03:48,560
variable whether this module has been

00:03:45,260 --> 00:03:51,560
run directly from node or has been

00:03:48,560 --> 00:03:54,200
required by another module which would

00:03:51,560 --> 00:03:59,510
mean that we are actually in test mode

00:03:54,200 --> 00:04:01,430
and if we have been launched by not the

00:03:59,510 --> 00:04:03,320
node process directly if we are a

00:04:01,430 --> 00:04:06,650
standalone right now in standalone mode

00:04:03,320 --> 00:04:10,310
that is the moment when we start our

00:04:06,650 --> 00:04:13,340
application and everything starts

00:04:10,310 --> 00:04:15,220
booting up this is a very important step

00:04:13,340 --> 00:04:19,640
so I always to have complete control

00:04:15,220 --> 00:04:21,620
over how our application boots and it's

00:04:19,640 --> 00:04:23,900
basically to treat our application as if

00:04:21,620 --> 00:04:27,710
it was a library that can be required

00:04:23,900 --> 00:04:32,090
and initialized both

00:04:27,710 --> 00:04:34,820
not automatically so this is your test

00:04:32,090 --> 00:04:36,440
directory structure again let's not

00:04:34,820 --> 00:04:40,190
stick to the names let's focus on the

00:04:36,440 --> 00:04:43,070
essence here we have an assert folder we

00:04:40,190 --> 00:04:45,920
are going to talk about it in extent it

00:04:43,070 --> 00:04:47,780
we your end-to-end tests your fixtures

00:04:45,920 --> 00:04:51,170
we're going to talked about them to

00:04:47,780 --> 00:04:54,130
library Ruiz again we're going to talk

00:04:51,170 --> 00:04:56,900
about them and your new unit tests I

00:04:54,130 --> 00:05:01,960
separate in 20 unit tests and you will

00:04:56,900 --> 00:05:05,150
see why they have a different boot path

00:05:01,960 --> 00:05:09,560
so what do we do what do we use the

00:05:05,150 --> 00:05:12,320
asserts for therefore I found over time

00:05:09,560 --> 00:05:14,240
as we are building crud applications

00:05:12,320 --> 00:05:15,530
create read update delete that I've been

00:05:14,240 --> 00:05:17,360
doing the same things over and over

00:05:15,530 --> 00:05:18,890
again so I'm sending a request I'm

00:05:17,360 --> 00:05:22,850
getting a response the response object

00:05:18,890 --> 00:05:25,340
of that particular resource and I want

00:05:22,850 --> 00:05:27,680
to test that object for its correctness

00:05:25,340 --> 00:05:29,660
I want to assert that the object that I

00:05:27,680 --> 00:05:32,570
have received a user object let's say

00:05:29,660 --> 00:05:35,180
has the expected properties with the

00:05:32,570 --> 00:05:37,520
expected types and the expected values

00:05:35,180 --> 00:05:39,590
so basically that's what I'm checking

00:05:37,520 --> 00:05:41,900
I'm checking all the properties there

00:05:39,590 --> 00:05:47,270
the user object should have 14

00:05:41,900 --> 00:05:50,180
properties username email below are the

00:05:47,270 --> 00:05:52,040
types of the properties correct

00:05:50,180 --> 00:05:56,780
I'm expecting a boolean here I'm

00:05:52,040 --> 00:05:58,970
expecting a number and finally are the

00:05:56,780 --> 00:06:01,340
values themselves correct so I have the

00:05:58,970 --> 00:06:03,230
date field is the value of the date

00:06:01,340 --> 00:06:08,600
field actually if a date or is it

00:06:03,230 --> 00:06:12,220
scrambled so I've carried in two parts

00:06:08,600 --> 00:06:16,940
so I can explain it better how an assert

00:06:12,220 --> 00:06:19,460
module looks like the idea is that you

00:06:16,940 --> 00:06:22,400
have a run all method that basically

00:06:19,460 --> 00:06:25,550
takes the item the object the user data

00:06:22,400 --> 00:06:27,970
object and passes it through the three

00:06:25,550 --> 00:06:30,290
consecutive tests that we talked about

00:06:27,970 --> 00:06:34,460
testing the properties testing the types

00:06:30,290 --> 00:06:35,980
and testing the values testing the

00:06:34,460 --> 00:06:39,770
properties is pretty straightforward

00:06:35,980 --> 00:06:41,150
item on itself should be an object then

00:06:39,770 --> 00:06:43,400
we test for the

00:06:41,150 --> 00:06:45,890
this would be two and only two

00:06:43,400 --> 00:06:50,390
properties and those should be them

00:06:45,890 --> 00:06:54,530
that's what we are certain here and here

00:06:50,390 --> 00:06:56,900
we are setting the types and finally the

00:06:54,530 --> 00:06:59,780
values the reason we are creating

00:06:56,900 --> 00:07:01,940
assertion files is because a specific

00:06:59,780 --> 00:07:04,040
resource a specific end point the users

00:07:01,940 --> 00:07:06,140
end point and I'm talking about all the

00:07:04,040 --> 00:07:08,600
end points of the users are returning

00:07:06,140 --> 00:07:11,240
the same user data object for its

00:07:08,600 --> 00:07:13,820
request we make all right update a user

00:07:11,240 --> 00:07:15,800
in updater in mail create a user login a

00:07:13,820 --> 00:07:18,440
user we are always retaining the user

00:07:15,800 --> 00:07:22,120
data object apply that to every resource

00:07:18,440 --> 00:07:24,290
that we are testing so instead of

00:07:22,120 --> 00:07:26,330
checking every time on every test

00:07:24,290 --> 00:07:28,970
separately other properties there is

00:07:26,330 --> 00:07:31,970
other types correct you have it as a

00:07:28,970 --> 00:07:36,550
module and you decouple that type of

00:07:31,970 --> 00:07:41,420
testing so that you can accelerate

00:07:36,550 --> 00:07:45,170
testing of your endpoints fixtures

00:07:41,420 --> 00:07:48,410
so in fixtures you have the modules that

00:07:45,170 --> 00:07:51,320
will generate the data required for your

00:07:48,410 --> 00:07:54,110
tests to run so I want to create a user

00:07:51,320 --> 00:07:56,840
I need the username and a password to

00:07:54,110 --> 00:08:02,600
create a user that what that is what

00:07:56,840 --> 00:08:05,780
fixtures are for I've taken a liking on

00:08:02,600 --> 00:08:10,130
using randomizers so as to not make the

00:08:05,780 --> 00:08:12,310
fixture methods I dependent that is they

00:08:10,130 --> 00:08:17,780
always read then return a different

00:08:12,310 --> 00:08:20,870
result so for instance I want to get an

00:08:17,780 --> 00:08:23,690
account object to create a user I need

00:08:20,870 --> 00:08:26,600
the name and the phone number I'm using

00:08:23,690 --> 00:08:29,120
faker to generate a random name for me

00:08:26,600 --> 00:08:31,730
and the reason I'm doing that is to

00:08:29,120 --> 00:08:34,880
provoke the system to produce an error

00:08:31,730 --> 00:08:37,280
and here somebody would come and say why

00:08:34,880 --> 00:08:39,950
wouldn't you do that you know brute

00:08:37,280 --> 00:08:42,890
force all the names and again this is

00:08:39,950 --> 00:08:44,510
these are techniques for a startup that

00:08:42,890 --> 00:08:47,360
is starting out on the early stages or

00:08:44,510 --> 00:08:49,760
the mid stages where product screens

00:08:47,360 --> 00:08:52,160
over your ear and you only have a very

00:08:49,760 --> 00:08:53,790
limited time to get it done and you need

00:08:52,160 --> 00:08:57,930
to have it tested

00:08:53,790 --> 00:09:02,160
that is the practicality and the reality

00:08:57,930 --> 00:09:03,720
of what we are facing we are moving now

00:09:02,160 --> 00:09:06,960
into the library's directory the

00:09:03,720 --> 00:09:11,670
library's directory contains the test

00:09:06,960 --> 00:09:14,010
library jes file that file is the common

00:09:11,670 --> 00:09:16,250
library file for every test that we are

00:09:14,010 --> 00:09:19,020
creating every test that we are creating

00:09:16,250 --> 00:09:22,650
requires this file in this file

00:09:19,020 --> 00:09:25,790
these modules purpose is to prepare the

00:09:22,650 --> 00:09:27,930
environment for us which is basically

00:09:25,790 --> 00:09:30,830
start up the application make sure

00:09:27,930 --> 00:09:35,030
everything is up and running and then

00:09:30,830 --> 00:09:37,350
pass back control to the test runners

00:09:35,030 --> 00:09:39,870
additionally in that directory we are

00:09:37,350 --> 00:09:45,180
going to create modules that will help

00:09:39,870 --> 00:09:47,700
us perform certain tasks faster so after

00:09:45,180 --> 00:09:50,810
we've tested user creation on the next

00:09:47,700 --> 00:09:53,550
test when we want to test the user login

00:09:50,810 --> 00:09:55,230
we will create a module in the libraries

00:09:53,550 --> 00:09:58,650
folder to automatically create a user

00:09:55,230 --> 00:10:06,150
for us by just calling a method instead

00:09:58,650 --> 00:10:07,710
of creating a user on its test so I've

00:10:06,150 --> 00:10:12,300
gone through this I explain to you what

00:10:07,710 --> 00:10:16,770
tests Lib Jes is so we are moving now to

00:10:12,300 --> 00:10:18,810
the account Lib so account is the user

00:10:16,770 --> 00:10:21,420
and basically we want to provide methods

00:10:18,810 --> 00:10:23,250
to create users to delete to alter

00:10:21,420 --> 00:10:26,520
whatever operation we are doing

00:10:23,250 --> 00:10:28,710
repeatedly and require to be done to

00:10:26,520 --> 00:10:31,830
bring the system in a state where we can

00:10:28,710 --> 00:10:35,280
test it we decouple all of that logic

00:10:31,830 --> 00:10:39,360
inside the library folder so it can be

00:10:35,280 --> 00:10:43,310
reusable that's the idea and here you

00:10:39,360 --> 00:10:46,770
can see a break out of such such module

00:10:43,310 --> 00:10:51,570
we have a create user which basically

00:10:46,770 --> 00:10:54,660
performs an xhr call to our API with the

00:10:51,570 --> 00:10:57,210
account data the account data that we

00:10:54,660 --> 00:11:00,690
are getting from arguments and then

00:10:57,210 --> 00:11:03,450
after the user is created we return the

00:11:00,690 --> 00:11:05,480
user data object as it has been returned

00:11:03,450 --> 00:11:09,710
by

00:11:05,480 --> 00:11:11,780
by our service to further automation on

00:11:09,710 --> 00:11:13,970
that and now we're going into specifics

00:11:11,780 --> 00:11:19,130
of mocha mocha like every other test

00:11:13,970 --> 00:11:22,750
runner has set up cases which is which

00:11:19,130 --> 00:11:22,750
are run before every test and

00:11:22,870 --> 00:11:28,040
deconstruction cases which are run after

00:11:25,160 --> 00:11:30,620
every test so we can automate that as

00:11:28,040 --> 00:11:33,530
well and we can create in line before

00:11:30,620 --> 00:11:36,770
weeds which is a special keyword method

00:11:33,530 --> 00:11:39,080
of mocha that instructs mocha to run

00:11:36,770 --> 00:11:42,110
before every test basically create the

00:11:39,080 --> 00:11:45,140
account and as you can see the account

00:11:42,110 --> 00:11:48,440
data is provided through the fixture

00:11:45,140 --> 00:11:49,850
module which we saw previously so we are

00:11:48,440 --> 00:11:53,120
now starting to tie everything together

00:11:49,850 --> 00:11:55,520
we are requiring the fixtures module we

00:11:53,120 --> 00:11:59,030
are getting a new user data object to

00:11:55,520 --> 00:12:03,830
test we are proceeding to create a user

00:11:59,030 --> 00:12:07,280
and then this is very specific to mocha

00:12:03,830 --> 00:12:10,130
mocha has a context then we store the

00:12:07,280 --> 00:12:13,450
created account into the mochas context

00:12:10,130 --> 00:12:16,970
that is what this account one does and

00:12:13,450 --> 00:12:19,130
this dot account one is available in all

00:12:16,970 --> 00:12:22,760
of our tests so we can say you know

00:12:19,130 --> 00:12:25,870
through our testing this dot account one

00:12:22,760 --> 00:12:33,290
dot ID do whatever you want with that ID

00:12:25,870 --> 00:12:35,930
that's the idea so this is a test file

00:12:33,290 --> 00:12:39,560
and as you can see in our test file what

00:12:35,930 --> 00:12:42,320
happens first is that we call our

00:12:39,560 --> 00:12:46,600
initializer from the test library this

00:12:42,320 --> 00:12:50,720
will ensure this basically invokes

00:12:46,600 --> 00:12:52,400
before reads that will boot up our

00:12:50,720 --> 00:12:55,940
application in the form that we saw

00:12:52,400 --> 00:12:57,650
before and we until the application has

00:12:55,940 --> 00:13:00,200
booted correctly and is ready to get

00:12:57,650 --> 00:13:03,620
tested it will not allow anything else

00:13:00,200 --> 00:13:06,380
to be executed so basically this line is

00:13:03,620 --> 00:13:08,330
everywhere the other part that I want

00:13:06,380 --> 00:13:10,460
you to take note of is that everything

00:13:08,330 --> 00:13:15,080
is within a single describe we will talk

00:13:10,460 --> 00:13:18,050
about this a little bit later and as you

00:13:15,080 --> 00:13:19,040
can see what's going on here is that I

00:13:18,050 --> 00:13:23,810
am testing

00:13:19,040 --> 00:13:28,930
user creation I've taken extra care so

00:13:23,810 --> 00:13:32,900
as to not include actual xhr calls

00:13:28,930 --> 00:13:37,340
within the test instead I have decoupled

00:13:32,900 --> 00:13:41,780
that logic into my library so I can

00:13:37,340 --> 00:13:44,870
reuse it it's all the same so what if I

00:13:41,780 --> 00:13:48,020
put the code here what if I put the code

00:13:44,870 --> 00:13:52,100
here well if I have it in my library it

00:13:48,020 --> 00:13:54,050
is reusable and I can reuse it to test a

00:13:52,100 --> 00:14:01,370
hundred different scenarios for

00:13:54,050 --> 00:14:03,200
registering a user so we want it we want

00:14:01,370 --> 00:14:06,290
to wrap all our test cases in a single

00:14:03,200 --> 00:14:10,010
scribe that's regardless of your tester

00:14:06,290 --> 00:14:14,200
that is going to provide you a very easy

00:14:10,010 --> 00:14:19,750
way to run only a specific shoot or skip

00:14:14,200 --> 00:14:23,780
specific shoot entirely and then write

00:14:19,750 --> 00:14:28,280
create a second describe so you can see

00:14:23,780 --> 00:14:30,800
here we have one two describes to

00:14:28,280 --> 00:14:34,490
describe the more specific area of

00:14:30,800 --> 00:14:37,160
testing as you test even if that seems

00:14:34,490 --> 00:14:40,850
redundant if you only have one test it's

00:14:37,160 --> 00:14:43,700
a good practice to follow as the code

00:14:40,850 --> 00:14:45,590
base is a living organism and setting

00:14:43,700 --> 00:14:49,580
patterns and things right in place is

00:14:45,590 --> 00:14:55,820
what matters the most and good coding

00:14:49,580 --> 00:14:58,400
product practices is all about so we're

00:14:55,820 --> 00:15:05,330
moving in a little step further now we

00:14:58,400 --> 00:15:13,070
want to test specifically for account

00:15:05,330 --> 00:15:15,710
creation and this is how this is

00:15:13,070 --> 00:15:17,330
basically how we sorry create an account

00:15:15,710 --> 00:15:19,220
again all right

00:15:17,330 --> 00:15:21,370
this is the wrong description what I

00:15:19,220 --> 00:15:24,220
want to create now that I have created

00:15:21,370 --> 00:15:26,270
an account I want to create an event

00:15:24,220 --> 00:15:29,300
suppose that events are core to your

00:15:26,270 --> 00:15:30,990
product and in order to test event

00:15:29,300 --> 00:15:33,180
creation I need a user

00:15:30,990 --> 00:15:36,089
and this is where the setup cases come

00:15:33,180 --> 00:15:38,339
into place here so I again I'm starting

00:15:36,089 --> 00:15:40,649
with my initialization so I ensure that

00:15:38,339 --> 00:15:44,190
my application is that has started up

00:15:40,649 --> 00:15:47,100
before testing and then right here I can

00:15:44,190 --> 00:15:48,990
leap set up one this is the example that

00:15:47,100 --> 00:15:51,060
I showed you before that's going to

00:15:48,990 --> 00:15:56,310
automatically create the account and

00:15:51,060 --> 00:16:00,360
store the account into this account one

00:15:56,310 --> 00:16:02,910
and then I can use the user ID to create

00:16:00,360 --> 00:16:05,010
the event data and so on and so forth

00:16:02,910 --> 00:16:07,560
and this can go down the rabbit hole for

00:16:05,010 --> 00:16:13,320
as many set up cases that you like to

00:16:07,560 --> 00:16:14,730
bring to bring the testing into the to

00:16:13,320 --> 00:16:20,130
bring your application to a correct

00:16:14,730 --> 00:16:22,500
State to test like I said never do exits

00:16:20,130 --> 00:16:24,149
are calls within your tests as much as

00:16:22,500 --> 00:16:28,740
you can try to decouple them into their

00:16:24,149 --> 00:16:30,630
own libraries for reusability and beware

00:16:28,740 --> 00:16:34,440
of contexts if you're working with mocha

00:16:30,630 --> 00:16:37,050
there are certain problems so again to

00:16:34,440 --> 00:16:39,870
summarize focus on the patterns here and

00:16:37,050 --> 00:16:43,800
not the specific methods focus on the

00:16:39,870 --> 00:16:46,709
techniques the idea is that you have a

00:16:43,800 --> 00:16:48,570
tester library that will whose

00:16:46,709 --> 00:16:55,470
responsibility is to boot up your

00:16:48,570 --> 00:16:57,120
application and the next idea is that

00:16:55,470 --> 00:16:59,910
you have decoupled all the business

00:16:57,120 --> 00:17:02,880
logic that needs to be in place before

00:16:59,910 --> 00:17:04,410
you can run your tests so as again to

00:17:02,880 --> 00:17:09,329
bring the service in a state that you

00:17:04,410 --> 00:17:14,490
can perform your tests next run your

00:17:09,329 --> 00:17:19,679
tests and then optionally run the

00:17:14,490 --> 00:17:22,770
outcome on the automated Surtur's that

00:17:19,679 --> 00:17:24,650
we discussed about I think I was very

00:17:22,770 --> 00:17:30,169
fast what was it thank you

00:17:24,650 --> 00:17:30,169

YouTube URL: https://www.youtube.com/watch?v=YbgOqVaGPWg


