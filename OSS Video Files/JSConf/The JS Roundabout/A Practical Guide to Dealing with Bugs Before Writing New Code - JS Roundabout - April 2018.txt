Title: A Practical Guide to Dealing with Bugs Before Writing New Code - JS Roundabout - April 2018
Publication date: 2018-04-11
Playlist: The JS Roundabout
Description: 
	Deividas Karžinauskas of Nested.com
“Squash those bugs - a practical guide to dealing with bugs before writing new code”

Bugs are a given. If you have written some code, chances are that you have created a bug somewhere. The longer you live with your bugs, the harder it becomes to fix them. You 100% want to fix bugs before writing new code. When you fix bugs early on it takes less time to fix them and you also become more accurate in your estimations. I’ll talk about how to achieve and maintain a “bug-free” codebase in practice.
Captions: 
	00:00:00,030 --> 00:00:05,790
so today I'll talk about squashing those

00:00:02,820 --> 00:00:08,400
bugs and how do we actually do that at

00:00:05,790 --> 00:00:11,670
nested how do we deal with those bugs

00:00:08,400 --> 00:00:14,610
and practice so a little bit about me

00:00:11,670 --> 00:00:18,270
some developer facts I do not use vs

00:00:14,610 --> 00:00:21,720
code yet I will use at some point but

00:00:18,270 --> 00:00:23,970
not yet and I like types with single

00:00:21,720 --> 00:00:26,900
quotes hope not too many people are

00:00:23,970 --> 00:00:30,269
living cool some fun facts about me and

00:00:26,900 --> 00:00:32,850
I'm called mister have a nice day at

00:00:30,269 --> 00:00:34,160
mustard because I do like to tell people

00:00:32,850 --> 00:00:39,210
to have a nice day

00:00:34,160 --> 00:00:41,969
so what will I talk about before that

00:00:39,210 --> 00:00:43,829
like as a small thing I will talk about

00:00:41,969 --> 00:00:45,510
four things I know that breaks all the

00:00:43,829 --> 00:00:48,270
rules about like one two three money and

00:00:45,510 --> 00:00:52,199
so on but we are developers right so we

00:00:48,270 --> 00:00:56,760
can talk complex things so first thing

00:00:52,199 --> 00:00:59,399
what is a bug and you shall create bugs

00:00:56,760 --> 00:01:01,829
right everybody Chris BOTS and tracking

00:00:59,399 --> 00:01:04,010
bugs and dealing with bugs these are the

00:01:01,829 --> 00:01:07,200
four things that I will talk about today

00:01:04,010 --> 00:01:09,299
so what is a bug I'll try to make this

00:01:07,200 --> 00:01:12,540
talk a little bit interactive so I'll

00:01:09,299 --> 00:01:15,060
ask you all to raise your hand up yes

00:01:12,540 --> 00:01:18,210
people please raise your hand up cool

00:01:15,060 --> 00:01:19,530
now those people have a definition of a

00:01:18,210 --> 00:01:21,210
bug in your head please leave your hand

00:01:19,530 --> 00:01:23,630
up those people who don't know what a

00:01:21,210 --> 00:01:26,369
bug is you can put your hand down

00:01:23,630 --> 00:01:29,040
because some of the people know what the

00:01:26,369 --> 00:01:31,140
bug is some people don't I won't touch

00:01:29,040 --> 00:01:31,680
actually ask you to it's like give me a

00:01:31,140 --> 00:01:34,320
definition

00:01:31,680 --> 00:01:37,680
I took one from Wikipedia and you can

00:01:34,320 --> 00:01:41,700
read it here the three key words here

00:01:37,680 --> 00:01:46,229
are unexpected unintended or incorrect

00:01:41,700 --> 00:01:47,820
so something that you don't expect that

00:01:46,229 --> 00:01:50,399
behaves the way you don't expect it to

00:01:47,820 --> 00:01:51,780
it's categorized as a bug so I know

00:01:50,399 --> 00:01:54,329
there has been best-paying filtering

00:01:51,780 --> 00:01:55,799
around the way this is a bug or this is

00:01:54,329 --> 00:01:59,009
a feature like some developers like to

00:01:55,799 --> 00:02:00,630
call box features right so usually

00:01:59,009 --> 00:02:02,700
that's because developers make

00:02:00,630 --> 00:02:05,579
assumptions about how things should rug

00:02:02,700 --> 00:02:10,020
work in a way that's different to how

00:02:05,579 --> 00:02:11,640
normal people think so by now we have

00:02:10,020 --> 00:02:13,470
like a good definition of for the bug

00:02:11,640 --> 00:02:14,940
eyes it's something that

00:02:13,470 --> 00:02:21,030
behaves in a different way than you'd

00:02:14,940 --> 00:02:23,160
expect it so you shall have butts same

00:02:21,030 --> 00:02:26,520
stuff like everybody raise your hands

00:02:23,160 --> 00:02:29,190
those people who think that they write

00:02:26,520 --> 00:02:31,110
both free coats can leave a hand up and

00:02:29,190 --> 00:02:32,070
those people who don't think that can

00:02:31,110 --> 00:02:34,950
prevent a lot

00:02:32,070 --> 00:02:37,760
cool every would put your hands down so

00:02:34,950 --> 00:02:41,190
how I have to skip this

00:02:37,760 --> 00:02:44,700
so reasons why bugs are created like

00:02:41,190 --> 00:02:46,920
it's inevitable bugs will happen human

00:02:44,700 --> 00:02:48,660
errors is in my head the most common

00:02:46,920 --> 00:02:51,150
reasons like computers don't make

00:02:48,660 --> 00:02:53,190
mistakes people do and be right coach

00:02:51,150 --> 00:02:56,460
stands to reason that feel introduced

00:02:53,190 --> 00:02:58,290
but changing requirements is one of

00:02:56,460 --> 00:03:00,480
things but I just had shout chat with a

00:02:58,290 --> 00:03:02,880
guy here and it's like especially if you

00:03:00,480 --> 00:03:05,730
work in a start-up things change daily

00:03:02,880 --> 00:03:08,280
weekly and as soon as you start working

00:03:05,730 --> 00:03:10,200
on something this like Fame come what

00:03:08,280 --> 00:03:13,080
comes up and like you'll need to rework

00:03:10,200 --> 00:03:14,460
everything in a different way now which

00:03:13,080 --> 00:03:17,100
means that you have to like rethink

00:03:14,460 --> 00:03:19,770
everything so again by doing all that

00:03:17,100 --> 00:03:22,230
computation and logic you are bound to

00:03:19,770 --> 00:03:24,690
make mistakes time pressures are not

00:03:22,230 --> 00:03:26,550
saying miscommunication or no

00:03:24,690 --> 00:03:28,440
communication so like there is a lot of

00:03:26,550 --> 00:03:30,990
communication that has to happen between

00:03:28,440 --> 00:03:34,170
you and your p.m. to like get the fame

00:03:30,990 --> 00:03:36,959
in a state that people actually intend

00:03:34,170 --> 00:03:39,510
to use it so again this like expected

00:03:36,959 --> 00:03:42,060
behavior I have to like communicate that

00:03:39,510 --> 00:03:43,730
very properly and software complexes

00:03:42,060 --> 00:03:47,520
like software is a complex thing

00:03:43,730 --> 00:03:49,770
inherently so bugs are bound to happen

00:03:47,520 --> 00:03:52,170
so now that you're on the same page you

00:03:49,770 --> 00:03:55,530
know what buggers and you know that

00:03:52,170 --> 00:03:59,820
everyone introduces bugs how do we track

00:03:55,530 --> 00:04:04,650
those little things raise your hand up

00:03:59,820 --> 00:04:07,050
if you know Joel Spolsky oh no not many

00:04:04,650 --> 00:04:08,550
people know about your spa ski so how

00:04:07,050 --> 00:04:10,500
many people know about staggering for

00:04:08,550 --> 00:04:12,450
how many people have used a gramophone

00:04:10,500 --> 00:04:13,800
yeah so Joe's post key is one of the

00:04:12,450 --> 00:04:18,209
guys who create a stack overflow so you

00:04:13,800 --> 00:04:21,840
should know about that guy and he

00:04:18,209 --> 00:04:24,390
invented Joel test so that's a 12-step

00:04:21,840 --> 00:04:25,919
thing that tells you like how to write

00:04:24,390 --> 00:04:27,930
better software or better code

00:04:25,919 --> 00:04:31,620
and in this particular case I'll talk

00:04:27,930 --> 00:04:33,659
about bug database so yes I have a

00:04:31,620 --> 00:04:37,979
question how many people have a bug

00:04:33,659 --> 00:04:42,419
database at work okay at Fairview that's

00:04:37,979 --> 00:04:44,580
cool so painless but fracking is part of

00:04:42,419 --> 00:04:47,189
like having a bug database so what do

00:04:44,580 --> 00:04:50,400
you actually need to have a proper bug

00:04:47,189 --> 00:04:52,199
report like what comes in there and Joe

00:04:50,400 --> 00:04:54,779
says that you need only three things so

00:04:52,199 --> 00:04:58,199
we need steps to reduce bed bug we need

00:04:54,779 --> 00:05:01,110
an expectation what what did we expect

00:04:58,199 --> 00:05:03,270
to happen once we deliver steps and what

00:05:01,110 --> 00:05:05,250
actually happened by having those things

00:05:03,270 --> 00:05:11,340
we can actually rip to reproduce bed bug

00:05:05,250 --> 00:05:14,370
and hence sort or fix it so how do you

00:05:11,340 --> 00:05:17,339
report bugs first thing is automated

00:05:14,370 --> 00:05:19,289
reporting this is like a large chunk of

00:05:17,339 --> 00:05:23,310
your bugs will come through this at

00:05:19,289 --> 00:05:25,849
least that's true for SMS Ted so there's

00:05:23,310 --> 00:05:28,349
a bunch of like monitoring tools and

00:05:25,849 --> 00:05:32,009
Aubrey and Tom talked about New Relic

00:05:28,349 --> 00:05:34,949
and how these New Relic we actually

00:05:32,009 --> 00:05:38,339
started rhobar and in Vandy ended up

00:05:34,949 --> 00:05:40,349
fifth century granted they are slightly

00:05:38,339 --> 00:05:43,589
different tools to what New Relic does

00:05:40,349 --> 00:05:48,089
or what some other tools do they're

00:05:43,589 --> 00:05:50,580
purely error reporting so the end of the

00:05:48,089 --> 00:05:52,349
fifth century and this is how a bug

00:05:50,580 --> 00:05:55,919
report actually looks like for us in

00:05:52,349 --> 00:05:58,050
practice so we got this bug report we

00:05:55,919 --> 00:06:00,899
sent some additional data and the key

00:05:58,050 --> 00:06:03,629
bit here is the full full story current

00:06:00,899 --> 00:06:06,779
session URL so it's a nice nice URL code

00:06:03,629 --> 00:06:09,300
that actually gives us this you can go

00:06:06,779 --> 00:06:11,430
in and watch actual user stories so like

00:06:09,300 --> 00:06:13,080
we get a bug report and we get a video

00:06:11,430 --> 00:06:15,360
of what the user was actually doing on

00:06:13,080 --> 00:06:16,919
our site and trying to debug it so it's

00:06:15,360 --> 00:06:19,710
incredibly helpful than like trying to

00:06:16,919 --> 00:06:21,689
figure out what what happened so logging

00:06:19,710 --> 00:06:23,909
is one way to like get insight into what

00:06:21,689 --> 00:06:25,919
happened or seeing bad thing is another

00:06:23,909 --> 00:06:28,169
way how we can like see what user did

00:06:25,919 --> 00:06:32,899
design your site this is not always

00:06:28,169 --> 00:06:35,190
possible Possible's like this adds size

00:06:32,899 --> 00:06:36,959
to the thing that's running a browser

00:06:35,190 --> 00:06:39,550
like you have to get that script you

00:06:36,959 --> 00:06:42,220
have to actually track that so it

00:06:39,550 --> 00:06:44,320
at size but on most marketing sites like

00:06:42,220 --> 00:06:46,930
we have invested it's totally possible

00:06:44,320 --> 00:06:50,230
and in my head it's quite a recommended

00:06:46,930 --> 00:06:52,570
way of doing bad so full stories about

00:06:50,230 --> 00:06:54,790
tool that you're using there are more

00:06:52,570 --> 00:06:58,240
tools these are before tools about were

00:06:54,790 --> 00:07:00,580
listed on stack share you can find more

00:06:58,240 --> 00:07:02,800
about them on stack share like if you

00:07:00,580 --> 00:07:05,980
don't know stack share go to sexy all

00:07:02,800 --> 00:07:08,230
right go site so automated reporting

00:07:05,980 --> 00:07:11,740
tools is one way you'll get bugs on our

00:07:08,230 --> 00:07:14,590
ways by good old user reports so this is

00:07:11,740 --> 00:07:17,740
like the actual user report files we've

00:07:14,590 --> 00:07:19,480
got that nested at March on a second and

00:07:17,740 --> 00:07:21,430
this is how it will look like so this is

00:07:19,480 --> 00:07:23,650
actually quite a good report and but we

00:07:21,430 --> 00:07:27,040
did get the steps to reproduce for bug

00:07:23,650 --> 00:07:29,440
me that they did get what actually

00:07:27,040 --> 00:07:31,390
happened and that what should have

00:07:29,440 --> 00:07:33,010
happened is implicit in that we should

00:07:31,390 --> 00:07:34,720
know what should actually happen once

00:07:33,010 --> 00:07:37,840
once you do those steps cuz we built a

00:07:34,720 --> 00:07:39,790
software so this is quite a good report

00:07:37,840 --> 00:07:42,730
in reality you're gonna have to do a lot

00:07:39,790 --> 00:07:44,080
of face-to-face talking to people and

00:07:42,730 --> 00:07:47,680
trying to figure out what actually

00:07:44,080 --> 00:07:49,900
happened so like user reports can be

00:07:47,680 --> 00:07:52,900
helpful but sometimes it's like a

00:07:49,900 --> 00:07:55,830
double-edged sword and but it's more

00:07:52,900 --> 00:07:57,700
work to get the data that you need

00:07:55,830 --> 00:08:02,680
there's another way of like getting

00:07:57,700 --> 00:08:05,320
those user reports and but we get slack

00:08:02,680 --> 00:08:07,960
messages saying that she's broken so fix

00:08:05,320 --> 00:08:09,670
it so this this is another one a real

00:08:07,960 --> 00:08:14,170
example of like our site being broken

00:08:09,670 --> 00:08:17,170
and I was very culprits so bug database

00:08:14,170 --> 00:08:19,420
so now now that you know how to get

00:08:17,170 --> 00:08:21,880
those bugs in let's talk about do you

00:08:19,420 --> 00:08:24,460
actually like keep them so ideally your

00:08:21,880 --> 00:08:27,100
bug database would be a single source of

00:08:24,460 --> 00:08:29,560
truth for all the bugs so you know

00:08:27,100 --> 00:08:31,720
they're to look for any possible bug

00:08:29,560 --> 00:08:35,770
that ever happened to you or that you

00:08:31,720 --> 00:08:37,630
have that you are tracking so clubhouses

00:08:35,770 --> 00:08:40,750
our tool of choice is like a project

00:08:37,630 --> 00:08:42,220
management build for software teams this

00:08:40,750 --> 00:08:43,570
is how it looks like in practice and

00:08:42,220 --> 00:08:45,550
these are the bugs so you can actually

00:08:43,570 --> 00:08:46,870
see bugs looming among among the

00:08:45,550 --> 00:08:51,160
features and shorts that we actually

00:08:46,870 --> 00:08:53,560
deal with fun fact you'll notice that

00:08:51,160 --> 00:08:53,860
there are points on most of the cards

00:08:53,560 --> 00:08:55,360
but

00:08:53,860 --> 00:08:58,180
I've been estimated but we don't

00:08:55,360 --> 00:08:59,980
estimate bugs that's intentional we

00:08:58,180 --> 00:09:02,890
don't really know how long it will take

00:08:59,980 --> 00:09:03,880
us to fix it because well we didn't

00:09:02,890 --> 00:09:05,529
introduce and intentionally

00:09:03,880 --> 00:09:07,300
hence we don't really know what's

00:09:05,529 --> 00:09:11,529
happening so how can we know how to fix

00:09:07,300 --> 00:09:15,100
it we need to figure out there's a bunch

00:09:11,529 --> 00:09:18,220
of tools that allow you to track or like

00:09:15,100 --> 00:09:21,279
project manage give you Strela initially

00:09:18,220 --> 00:09:23,230
it was too general for us so hence we've

00:09:21,279 --> 00:09:23,620
tried out Clubhouse and we quite liked

00:09:23,230 --> 00:09:26,350
it

00:09:23,620 --> 00:09:30,279
I know breadboard was floated around and

00:09:26,350 --> 00:09:33,430
it sent away I don't know why manuscript

00:09:30,279 --> 00:09:36,430
is worth mentioning because it's

00:09:33,430 --> 00:09:39,519
co-founded by Jose post key himself so

00:09:36,430 --> 00:09:42,880
that stuff must be good right like it's

00:09:39,519 --> 00:09:45,149
my guy who writes software and the

00:09:42,880 --> 00:09:47,860
second bit about bug database is

00:09:45,149 --> 00:09:49,870
integrations are important you want to

00:09:47,860 --> 00:09:52,029
get your integrations right and but bugs

00:09:49,870 --> 00:09:54,130
should be flowing to that database

00:09:52,029 --> 00:09:56,649
easily you shouldn't need to have to my

00:09:54,130 --> 00:09:58,540
life a man or like gather those reports

00:09:56,649 --> 00:10:00,310
because like that means that this will

00:09:58,540 --> 00:10:03,820
never happen and you'll just have stuff

00:10:00,310 --> 00:10:06,670
lying around so clubhouse has an

00:10:03,820 --> 00:10:08,470
integration with century it's not that

00:10:06,670 --> 00:10:12,209
good we had to actually roll our own

00:10:08,470 --> 00:10:15,760
thing there every century era crates a

00:10:12,209 --> 00:10:18,730
clubhouse cards so we actually like see

00:10:15,760 --> 00:10:21,040
those cards piling up and it's part of

00:10:18,730 --> 00:10:23,350
our flow so those bugs are never out of

00:10:21,040 --> 00:10:26,440
sight we always think about them when we

00:10:23,350 --> 00:10:30,130
are estimating and playing our things we

00:10:26,440 --> 00:10:33,250
have slight integrations so yeah now

00:10:30,130 --> 00:10:35,140
that you have this bug database you get

00:10:33,250 --> 00:10:39,100
all this bugs in you have to like deal

00:10:35,140 --> 00:10:41,110
the fun so the fifth thing that joel

00:10:39,100 --> 00:10:44,320
tells us to do this fixed bugs before

00:10:41,110 --> 00:10:46,089
writing new code who actually here fixes

00:10:44,320 --> 00:10:49,570
bugs before writing new code raise your

00:10:46,089 --> 00:10:51,880
hand three people four people five

00:10:49,570 --> 00:10:53,890
people died add more no okay cool so

00:10:51,880 --> 00:10:56,890
five people that's not too much

00:10:53,890 --> 00:11:00,190
according to Joel that should be and a

00:10:56,890 --> 00:11:02,020
day-to-day thing and I understand that

00:11:00,190 --> 00:11:04,839
why there's not too many people actually

00:11:02,020 --> 00:11:08,080
do this because it's it's freaking

00:11:04,839 --> 00:11:09,850
difficult but before

00:11:08,080 --> 00:11:12,580
are going into why this is difficult and

00:11:09,850 --> 00:11:13,930
how to get around this let's think a

00:11:12,580 --> 00:11:16,750
little bit about why would you actually

00:11:13,930 --> 00:11:19,990
want to fix bugs before writing in code

00:11:16,750 --> 00:11:25,380
so there's a great job post about this

00:11:19,990 --> 00:11:28,600
again sure takes less time to fix bugs

00:11:25,380 --> 00:11:30,370
that sooner you find them so once you

00:11:28,600 --> 00:11:32,080
introduce something if you are told

00:11:30,370 --> 00:11:34,510
immediately that the thing that you've

00:11:32,080 --> 00:11:36,910
introduced cost a bug it's much easier

00:11:34,510 --> 00:11:38,880
for you to think around it and try and

00:11:36,910 --> 00:11:41,500
figure out why this actually happened

00:11:38,880 --> 00:11:43,570
the longer it actually takes for you to

00:11:41,500 --> 00:11:46,930
like spot a bug and get around to fixing

00:11:43,570 --> 00:11:48,880
it the longer you'll actually need to

00:11:46,930 --> 00:11:51,100
like spend on that bug you'll actually

00:11:48,880 --> 00:11:52,960
need to get that same context get into

00:11:51,100 --> 00:11:54,610
the environment like if if it if it's a

00:11:52,960 --> 00:11:57,250
separate project means like pull

00:11:54,610 --> 00:11:58,660
everything and better stuff so it's is

00:11:57,250 --> 00:12:01,240
becoming more and more difficult forever

00:11:58,660 --> 00:12:03,430
long it takes for you to find it better

00:12:01,240 --> 00:12:06,640
estimates but that's not an obvious one

00:12:03,430 --> 00:12:08,590
so why do we get better estimates by

00:12:06,640 --> 00:12:10,210
having all of those like bugs

00:12:08,590 --> 00:12:12,910
solved immediately and the reason for

00:12:10,210 --> 00:12:15,280
that is that again we don't estimate

00:12:12,910 --> 00:12:17,710
bugs because we don't know how long it

00:12:15,280 --> 00:12:20,380
will take us to fix those bugs right if

00:12:17,710 --> 00:12:21,580
you know if you knew why the bug was in

00:12:20,380 --> 00:12:23,260
there and how long it would take you to

00:12:21,580 --> 00:12:26,920
fix it you would have fixed it in the

00:12:23,260 --> 00:12:29,470
first place so by having those bugs

00:12:26,920 --> 00:12:31,750
fixed you'll have a backlog that's only

00:12:29,470 --> 00:12:34,510
features or things that you are planning

00:12:31,750 --> 00:12:35,770
to do which means that it will be easier

00:12:34,510 --> 00:12:38,500
for you to tell how long it will take

00:12:35,770 --> 00:12:39,700
you to build something cuz explaining

00:12:38,500 --> 00:12:41,410
how long it will take you to build

00:12:39,700 --> 00:12:43,360
something compared to like explaining

00:12:41,410 --> 00:12:45,670
how long it will take you to fix

00:12:43,360 --> 00:12:47,650
something that you don't know why it was

00:12:45,670 --> 00:12:50,500
introduced there in the first place is a

00:12:47,650 --> 00:12:52,560
different thing so having no bugs makes

00:12:50,500 --> 00:12:55,030
your estimates easier but you can tell

00:12:52,560 --> 00:12:57,880
these are the things that I'll need to

00:12:55,030 --> 00:13:00,340
build I can thoroughly estimate them

00:12:57,880 --> 00:13:05,320
fairly well and I can give you a better

00:13:00,340 --> 00:13:07,480
timeline and the final next before final

00:13:05,320 --> 00:13:09,160
bit is coated ready to ship at all time

00:13:07,480 --> 00:13:11,500
so yeah you have that confidence but

00:13:09,160 --> 00:13:13,090
things are working if you introduce a

00:13:11,500 --> 00:13:14,680
bug you know you'll immediately see that

00:13:13,090 --> 00:13:17,800
something is not working so again it's

00:13:14,680 --> 00:13:19,960
like a better feedback loop and the bit

00:13:17,800 --> 00:13:21,459
is the final bit is it reduces

00:13:19,960 --> 00:13:24,459
distractions

00:13:21,459 --> 00:13:26,679
Dalia's it's best that I've added and

00:13:24,459 --> 00:13:28,269
don't tell mr. Joe so it actually like

00:13:26,679 --> 00:13:29,949
makes your life easier but you get less

00:13:28,269 --> 00:13:31,720
distraction so you can focus on the

00:13:29,949 --> 00:13:33,279
features that need shipping as opposed

00:13:31,720 --> 00:13:35,559
to like having those bugs lying around

00:13:33,279 --> 00:13:37,119
and like bugging in your eyes unless you

00:13:35,559 --> 00:13:38,699
actually don't watch out those bugs in

00:13:37,119 --> 00:13:41,709
which case shame on you

00:13:38,699 --> 00:13:43,509
so this is the main bit this is the bit

00:13:41,709 --> 00:13:45,819
that I'd like you to take away which is

00:13:43,509 --> 00:13:49,209
sword bugs before fixing them

00:13:45,819 --> 00:13:51,279
so Joel tells you to fix bugs before

00:13:49,209 --> 00:13:53,559
writing new code and I'll tell you to

00:13:51,279 --> 00:13:56,050
sort them before trying to fix them so

00:13:53,559 --> 00:13:58,869
what do I mean by sorting them there's

00:13:56,050 --> 00:14:01,029
one disclaimer here

00:13:58,869 --> 00:14:03,879
sorting rules are unique to every

00:14:01,029 --> 00:14:06,730
company I'll tell you about sorting

00:14:03,879 --> 00:14:08,619
rules at nested for different companies

00:14:06,730 --> 00:14:10,959
of different sizes which will be

00:14:08,619 --> 00:14:14,199
different and I'm sure that visuals will

00:14:10,959 --> 00:14:16,149
change for us at nested as well so first

00:14:14,199 --> 00:14:17,860
rule ignore all bugs that don't affect

00:14:16,149 --> 00:14:19,929
real users we don't really care about

00:14:17,860 --> 00:14:22,300
spiders or web crawlers if you're an

00:14:19,929 --> 00:14:24,490
e-commerce site that may be different

00:14:22,300 --> 00:14:25,600
and you may really care about this so

00:14:24,490 --> 00:14:27,459
don't do that

00:14:25,600 --> 00:14:29,410
but if you're at Nesta and you're a

00:14:27,459 --> 00:14:33,309
marketing site you don't care about you

00:14:29,410 --> 00:14:34,720
crawlers this is a real thing like I'll

00:14:33,309 --> 00:14:37,629
give you examples of like real things

00:14:34,720 --> 00:14:39,699
that happens and I had to fix so there

00:14:37,629 --> 00:14:42,040
was this like pulse point XD free web

00:14:39,699 --> 00:14:45,970
scraper whoever you are I don't care

00:14:42,040 --> 00:14:50,679
about you ignore bugs that effect a very

00:14:45,970 --> 00:14:52,540
small amount of users so javascript is

00:14:50,679 --> 00:14:55,389
unique it's especially if you're

00:14:52,540 --> 00:14:57,129
developing from front-end and that we

00:14:55,389 --> 00:14:58,629
have a bunch of different environments

00:14:57,129 --> 00:15:00,759
like if you're working on the back end

00:14:58,629 --> 00:15:02,769
you have like a nice environment you

00:15:00,759 --> 00:15:04,899
have all depends you have like your

00:15:02,769 --> 00:15:06,790
environment like your cool like for

00:15:04,899 --> 00:15:09,029
JavaScript you have like hundreds and

00:15:06,790 --> 00:15:11,379
thousands of browsers I probably

00:15:09,029 --> 00:15:15,389
surrounds rights difference of versions

00:15:11,379 --> 00:15:18,610
and like users running ie nine seven and

00:15:15,389 --> 00:15:23,499
whatever is like it's gonna be difficult

00:15:18,610 --> 00:15:25,629
so we had like one user one event we

00:15:23,499 --> 00:15:29,949
don't really care about users so we just

00:15:25,629 --> 00:15:32,169
ignore them ignore bugs caused by

00:15:29,949 --> 00:15:33,910
third-party scripts again this is very

00:15:32,169 --> 00:15:35,329
unique to nested if you are like an

00:15:33,910 --> 00:15:38,629
e-commerce site have

00:15:35,329 --> 00:15:40,759
relying on your I don't know gdm or

00:15:38,629 --> 00:15:42,889
something you're like one user is like

00:15:40,759 --> 00:15:44,720
getting moszer it's likely that more

00:15:42,889 --> 00:15:46,519
users are getting this so for you is

00:15:44,720 --> 00:15:51,860
maybe different but for us at nested

00:15:46,519 --> 00:15:55,279
like we had this problem with the fad

00:15:51,860 --> 00:15:58,189
Chad Chad digit but we had and that

00:15:55,279 --> 00:15:59,929
fidget was like causing errors we didn't

00:15:58,189 --> 00:16:02,290
really notice and things like we don't

00:15:59,929 --> 00:16:04,939
really have time as a start-up to spend

00:16:02,290 --> 00:16:08,540
our time on fixing bugs in chat widget

00:16:04,939 --> 00:16:10,759
so you don't care about them there's

00:16:08,540 --> 00:16:14,239
like a good things like a thing Tom

00:16:10,759 --> 00:16:18,019
mentioned about getting noise from

00:16:14,239 --> 00:16:20,540
third-party libraries you can silence

00:16:18,019 --> 00:16:22,279
that noise really easily by whitelisting

00:16:20,540 --> 00:16:24,410
your own URLs so something has a good

00:16:22,279 --> 00:16:27,649
blog post about this but effectively

00:16:24,410 --> 00:16:30,649
what you do is you whitelist your own

00:16:27,649 --> 00:16:33,559
files and if errors are originally from

00:16:30,649 --> 00:16:36,199
other files but are not from your domain

00:16:33,559 --> 00:16:40,429
I just ignore them so this is like an

00:16:36,199 --> 00:16:43,249
easy way to only get your own earth but

00:16:40,429 --> 00:16:45,769
there's another option which is ignoring

00:16:43,249 --> 00:16:48,769
those errors manually so again this is

00:16:45,769 --> 00:16:50,989
that error that I was talking about text

00:16:48,769 --> 00:16:54,919
text widget coming from frame dot

00:16:50,989 --> 00:16:56,779
something yes not our problem you don't

00:16:54,919 --> 00:16:58,790
really care about it so we we want to

00:16:56,779 --> 00:17:01,629
silence it there's like this trade-off

00:16:58,790 --> 00:17:03,949
between whitelisting your own stuff and

00:17:01,629 --> 00:17:06,500
manually ignoring all the third-party

00:17:03,949 --> 00:17:08,449
things so right now since we are still

00:17:06,500 --> 00:17:10,130
small at nested I can actually manually

00:17:08,449 --> 00:17:12,139
you can warp errors but I don't care

00:17:10,130 --> 00:17:13,579
about but I'm actually aware of like

00:17:12,139 --> 00:17:15,889
best scripts that are causing those

00:17:13,579 --> 00:17:17,659
errors so if something like a chat

00:17:15,889 --> 00:17:19,399
widget is causing too many problems I

00:17:17,659 --> 00:17:21,620
can just replace that fidget with

00:17:19,399 --> 00:17:25,610
another widget and I'm aware of what's

00:17:21,620 --> 00:17:27,500
happening so the fourth bit ignore bugs

00:17:25,610 --> 00:17:29,419
which are too expensive to fix duty

00:17:27,500 --> 00:17:31,840
opportunity costs this is especially

00:17:29,419 --> 00:17:34,610
true if you're really small like

00:17:31,840 --> 00:17:38,149
relatively small so at nested we are

00:17:34,610 --> 00:17:40,700
like 70 people we have 20 people in our

00:17:38,149 --> 00:17:43,000
engineering team or lives you don't have

00:17:40,700 --> 00:17:45,470
time to fix all the possible bugs

00:17:43,000 --> 00:17:48,320
compared to like the features vertical

00:17:45,470 --> 00:17:50,509
chip and provide value so I

00:17:48,320 --> 00:17:53,179
Jose Bosque writes a very good blog post

00:17:50,509 --> 00:17:57,049
about this one it's called hardest about

00:17:53,179 --> 00:17:59,659
fixing and this is the bug that we

00:17:57,049 --> 00:18:01,940
consciously decided not to fix so it

00:17:59,659 --> 00:18:06,049
affected 50 users so it's like a fair

00:18:01,940 --> 00:18:08,600
number of users over 5 months and we

00:18:06,049 --> 00:18:11,840
know why this bug is sort of known by

00:18:08,600 --> 00:18:13,370
bees this bug is happening it's it's

00:18:11,840 --> 00:18:14,929
when you do code splitting so I'll try

00:18:13,370 --> 00:18:17,120
to explain this when you do code

00:18:14,929 --> 00:18:19,940
splitting you create a bunch of files

00:18:17,120 --> 00:18:24,289
which have hash names then you make a

00:18:19,940 --> 00:18:25,789
deploy those file names change so then

00:18:24,289 --> 00:18:28,340
you deploy something use the lines on

00:18:25,789 --> 00:18:31,490
your page then you do another deploy and

00:18:28,340 --> 00:18:33,590
that's use it by having downloaded a

00:18:31,490 --> 00:18:35,330
couple of files try stacks has those

00:18:33,590 --> 00:18:37,639
same files from previous deploy and

00:18:35,330 --> 00:18:39,649
those files no longer exist so we

00:18:37,639 --> 00:18:41,960
actually do get 404 which is an

00:18:39,649 --> 00:18:44,330
index.html file and we try to parse it

00:18:41,960 --> 00:18:46,850
as JSON which obviously it's not Jason

00:18:44,330 --> 00:18:49,639
and that complains so this happens

00:18:46,850 --> 00:18:51,470
fairly small amount of people I have no

00:18:49,639 --> 00:18:52,820
idea how to fix this bug if somebody

00:18:51,470 --> 00:18:55,429
hasn't like you how to fix it please

00:18:52,820 --> 00:18:56,480
come try to me later on I'd be very

00:18:55,429 --> 00:18:58,340
grateful

00:18:56,480 --> 00:19:00,759
but yeah you consciously decided not to

00:18:58,340 --> 00:19:03,500
fix it and basically we just leave it

00:19:00,759 --> 00:19:05,450
there in the background I am aware of it

00:19:03,500 --> 00:19:07,309
if somebody comes around and tells me

00:19:05,450 --> 00:19:09,049
how to fix it problem solved and I don't

00:19:07,309 --> 00:19:13,610
have to actually like do too much work

00:19:09,049 --> 00:19:16,490
so the fifth bit is report and the

00:19:13,610 --> 00:19:18,980
possible fix bugs out of course by

00:19:16,490 --> 00:19:22,129
third-party libraries so recently we are

00:19:18,980 --> 00:19:24,350
using this CSS and J's library called

00:19:22,129 --> 00:19:26,450
style components and we recently had an

00:19:24,350 --> 00:19:28,759
issue there server-side rendering Styles

00:19:26,450 --> 00:19:31,309
have been accumulated necessarily and it

00:19:28,759 --> 00:19:36,830
costs our app to be really slow don't

00:19:31,309 --> 00:19:40,009
you CSS and J's yeah so he had this bug

00:19:36,830 --> 00:19:42,590
you reported this bug me help debug this

00:19:40,009 --> 00:19:44,539
bug and the fix was released so we had

00:19:42,590 --> 00:19:46,340
to update it like be a good citizen

00:19:44,539 --> 00:19:49,730
contribute to open source help out

00:19:46,340 --> 00:19:51,230
whenever can and the final bit once

00:19:49,730 --> 00:19:52,549
you've like discarded all the bugs that

00:19:51,230 --> 00:19:55,070
you don't need fixing

00:19:52,549 --> 00:19:57,590
you've sorted them now we can fix the

00:19:55,070 --> 00:19:59,179
rest of a bug so the bugs that are left

00:19:57,590 --> 00:20:01,260
are actually important so you should be

00:19:59,179 --> 00:20:04,200
able to fix them

00:20:01,260 --> 00:20:06,360
last two bits ignoring bugs configure

00:20:04,200 --> 00:20:08,430
zzi you can ignore bugs in your

00:20:06,360 --> 00:20:11,040
configuration files that means that

00:20:08,430 --> 00:20:12,510
you'll need to ship coats like masters

00:20:11,040 --> 00:20:14,070
so that would go through that whole

00:20:12,510 --> 00:20:16,290
procedure of like opener opening a

00:20:14,070 --> 00:20:18,690
pudding first getting some people to

00:20:16,290 --> 00:20:21,420
sign off as her stuff versus di which

00:20:18,690 --> 00:20:23,730
allows you to like ignore bugs in a more

00:20:21,420 --> 00:20:25,440
powerful manner so getting more bugs for

00:20:23,730 --> 00:20:27,930
some users so like for seven amount of

00:20:25,440 --> 00:20:30,930
time my preference is to ignore bugs in

00:20:27,930 --> 00:20:34,880
the UI it's more powerful it's faster

00:20:30,930 --> 00:20:37,740
and I can actually keep track of those

00:20:34,880 --> 00:20:39,780
ignore rules in one place across

00:20:37,740 --> 00:20:45,750
multiple apps so it's much more powerful

00:20:39,780 --> 00:20:47,790
useful and yeah you can see that they

00:20:45,750 --> 00:20:50,070
ignore there and it actually like tells

00:20:47,790 --> 00:20:51,630
you for how long it is it has been

00:20:50,070 --> 00:20:54,720
ignored and how long it will stay that

00:20:51,630 --> 00:20:57,140
way and the second bit is separate from

00:20:54,720 --> 00:20:59,550
our metal variable for bug reports so

00:20:57,140 --> 00:21:02,100
the the bit that we did in the beginning

00:20:59,550 --> 00:21:04,920
was like report bugs if it's production

00:21:02,100 --> 00:21:07,920
yeah that sounded cool but then we

00:21:04,920 --> 00:21:11,220
started to wanting to test production

00:21:07,920 --> 00:21:12,720
environments locally or NCI and turns

00:21:11,220 --> 00:21:13,490
out that we've got a bunch of bug

00:21:12,720 --> 00:21:15,240
reports but

00:21:13,490 --> 00:21:17,310
frankly we didn't really care about

00:21:15,240 --> 00:21:18,660
because we knew about them because we

00:21:17,310 --> 00:21:21,510
are actually testing about things right

00:21:18,660 --> 00:21:24,210
now so by having a separate

00:21:21,510 --> 00:21:25,740
environmental variable for bug reporting

00:21:24,210 --> 00:21:27,920
we actually save yourself a hassle of

00:21:25,740 --> 00:21:30,300
having to like sort those bugs that

00:21:27,920 --> 00:21:33,170
shouldn't be there in the first place so

00:21:30,300 --> 00:21:36,470
the thing that we ended up having is

00:21:33,170 --> 00:21:39,720
fully qualified domain name as the

00:21:36,470 --> 00:21:41,220
differentiating factor so if the URL

00:21:39,720 --> 00:21:44,220
that you get this bug on is actually

00:21:41,220 --> 00:21:46,350
nested comm then they report that bug if

00:21:44,220 --> 00:21:48,270
it's localhost if it's AB that nest of

00:21:46,350 --> 00:21:51,720
the test or whatever if you don't really

00:21:48,270 --> 00:21:54,240
care about it so it's a useful tip so

00:21:51,720 --> 00:21:55,800
things I've covered what is a bug you

00:21:54,240 --> 00:21:58,200
will create bugs if you haven't known

00:21:55,800 --> 00:21:59,970
that tracking bugs reporting bugs and

00:21:58,200 --> 00:22:02,370
black databases how would you go about

00:21:59,970 --> 00:22:06,120
dealing with bugs fixed bug before

00:22:02,370 --> 00:22:09,450
writing new code they the key bit sort

00:22:06,120 --> 00:22:11,120
bugs before fixing them and yet ignoring

00:22:09,450 --> 00:22:13,370
bugs and separating Marvel there

00:22:11,120 --> 00:22:19,230
thank you very much

00:22:13,370 --> 00:22:19,230

YouTube URL: https://www.youtube.com/watch?v=QXa0bfxcmjU


