Title: Web Performance: An Introduction - JS Roundabout - June 2019
Publication date: 2019-06-08
Playlist: The JS Roundabout
Description: 
	Presented by Frontend Developer at Vodafone, Alessandro Giordo.
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:07,649
hello everyone can hear me yes

00:00:03,750 --> 00:00:14,549
cool so show of hands who likes react

00:00:07,649 --> 00:00:15,870
yeah okay so I had a second talk about

00:00:14,549 --> 00:00:18,240
next and view

00:00:15,870 --> 00:00:22,830
hopefully it's not too boring I can kind

00:00:18,240 --> 00:00:25,519
of make it a bit more universal who's

00:00:22,830 --> 00:00:29,160
junior here

00:00:25,519 --> 00:00:31,590
well junior or you know don't have you

00:00:29,160 --> 00:00:34,649
know you know enough experience we react

00:00:31,590 --> 00:00:39,540
or view or javascript in general kind of

00:00:34,649 --> 00:00:48,000
same cool quite expert that are gonna

00:00:39,540 --> 00:00:51,629
shave me during my talk right and my

00:00:48,000 --> 00:00:56,809
screen just went black so we are doing

00:00:51,629 --> 00:00:59,760
we're talking about performance here and

00:00:56,809 --> 00:01:03,780
who now is a pair about performance and

00:00:59,760 --> 00:01:05,990
why it's important kind of what what

00:01:03,780 --> 00:01:08,400
what kind of metrics do you know about

00:01:05,990 --> 00:01:10,130
do you know about time to interactive

00:01:08,400 --> 00:01:17,299
time to be first paint

00:01:10,130 --> 00:01:19,770
yes um some hands are yeah so basically

00:01:17,299 --> 00:01:22,380
who's who's a business owner here

00:01:19,770 --> 00:01:26,130
someone owns a business or just

00:01:22,380 --> 00:01:28,860
developers here Wow okay well I'm not

00:01:26,130 --> 00:01:32,880
going to talk about money then cool

00:01:28,860 --> 00:01:35,580
that's better but if they ask you in

00:01:32,880 --> 00:01:36,680
your business you can say that

00:01:35,580 --> 00:01:40,700
[Music]

00:01:36,680 --> 00:01:42,420
performance is good for money I'm gonna

00:01:40,700 --> 00:01:45,840
introduce myself

00:01:42,420 --> 00:01:49,250
Who am I just a front-end developer are

00:01:45,840 --> 00:01:54,060
not senior but I work with Vodafone UK

00:01:49,250 --> 00:01:59,299
it's been great for so far and we kind

00:01:54,060 --> 00:02:05,610
of let me touch this because oh yeah

00:01:59,299 --> 00:02:08,489
take so I previously worked a I company

00:02:05,610 --> 00:02:11,730
and design agency doing very different

00:02:08,489 --> 00:02:12,319
stuff in each company and I also known

00:02:11,730 --> 00:02:15,950
as more

00:02:12,319 --> 00:02:20,810
agency of / freelance business

00:02:15,950 --> 00:02:23,540
I do love pizza I'm Italian I know but

00:02:20,810 --> 00:02:24,799
you can tweet me at that address

00:02:23,540 --> 00:02:29,500
mustache design

00:02:24,799 --> 00:02:33,769
it's a D and is because the French

00:02:29,500 --> 00:02:39,799
account stole my my handle so you know

00:02:33,769 --> 00:02:43,219
if you know them just so I can get my

00:02:39,799 --> 00:02:46,159
handle back and I got some article I'll

00:02:43,219 --> 00:02:50,419
share these slides after the talk

00:02:46,159 --> 00:02:53,769
so why performance matters I said that

00:02:50,419 --> 00:02:56,989
to you know the business owners and my

00:02:53,769 --> 00:02:59,569
managers that these are probably some

00:02:56,989 --> 00:03:02,209
cities statistics that everyone says but

00:02:59,569 --> 00:03:04,209
they're quite important like 100

00:03:02,209 --> 00:03:06,949
millisecond improvement in performance

00:03:04,209 --> 00:03:11,239
results in 1% increase in overall

00:03:06,949 --> 00:03:12,590
revenue 1% for Amazon is a trillion 1%

00:03:11,239 --> 00:03:17,540
of a trillion I don't know

00:03:12,590 --> 00:03:19,340
but is a lot of money and then 53% of

00:03:17,540 --> 00:03:23,540
users will leave a mobile site if it

00:03:19,340 --> 00:03:26,750
takes more than 3 seconds to load so

00:03:23,540 --> 00:03:30,310
that's quite a big problem considering

00:03:26,750 --> 00:03:33,709
most of websites that statistically are

00:03:30,310 --> 00:03:37,250
recorded sometimes they take more than 5

00:03:33,709 --> 00:03:39,229
seconds or even 10 seconds sometimes in

00:03:37,250 --> 00:03:45,349
that case we need to talk is what's

00:03:39,229 --> 00:03:48,019
going on so why matters this guy Jacoby

00:03:45,349 --> 00:03:50,959
Nielsen kind of says that in one second

00:03:48,019 --> 00:03:53,840
is about the limit of the user in focus

00:03:50,959 --> 00:03:55,759
on your page so if they lose focus for

00:03:53,840 --> 00:03:58,069
more than one second they start to you

00:03:55,759 --> 00:04:00,829
know watch at Twitter or someone tweeted

00:03:58,069 --> 00:04:03,019
me not go name you know I'm just gonna

00:04:00,829 --> 00:04:06,949
close this page or I'm just gonna go to

00:04:03,019 --> 00:04:09,609
another tab that is a problem because

00:04:06,949 --> 00:04:12,680
you know one secondly is easily

00:04:09,609 --> 00:04:16,880
achievable in performance so if you're

00:04:12,680 --> 00:04:20,930
trying to get around you know improving

00:04:16,880 --> 00:04:22,729
this site speed for a second then you

00:04:20,930 --> 00:04:23,810
know you can do some easy things to fix

00:04:22,729 --> 00:04:28,880
that

00:04:23,810 --> 00:04:31,040
and again you know it says that users

00:04:28,880 --> 00:04:33,590
lose the feeling of operating directly

00:04:31,040 --> 00:04:38,920
on the on the data if it's not

00:04:33,590 --> 00:04:38,920
interactive within that kind of time so

00:04:39,340 --> 00:04:46,070
again I ask that before you kind of like

00:04:43,160 --> 00:04:48,980
react more I prepared two slides one for

00:04:46,070 --> 00:04:50,690
you one for react I wanted to do is felt

00:04:48,980 --> 00:04:54,980
as well because it's gaining traction

00:04:50,690 --> 00:04:59,630
but maybe we can you know discuss in the

00:04:54,980 --> 00:05:02,660
Q&A so I'm good oh yeah there you go

00:04:59,630 --> 00:05:04,850
so react performance

00:05:02,660 --> 00:05:06,980
react is more like a JavaScript and

00:05:04,850 --> 00:05:09,650
Ginny doesn't really opinion I anything

00:05:06,980 --> 00:05:12,590
it's more like it's just JavaScript and

00:05:09,650 --> 00:05:17,330
it gives you an abstraction on the UI

00:05:12,590 --> 00:05:19,490
layer to show your pages and make it

00:05:17,330 --> 00:05:22,310
easier to work with a dumb and events

00:05:19,490 --> 00:05:24,470
and it's definitely defined by Dan

00:05:22,310 --> 00:05:29,440
Abramov as our UI library there is a

00:05:24,470 --> 00:05:34,520
good article that I can share later he

00:05:29,440 --> 00:05:39,440
he also said you know with the direction

00:05:34,520 --> 00:05:43,190
going forward hooks are you know what's

00:05:39,440 --> 00:05:45,740
going to improve the performance overall

00:05:43,190 --> 00:05:48,620
and the refactoring of the application

00:05:45,740 --> 00:05:51,229
just because it makes everything

00:05:48,620 --> 00:05:53,930
reusable and makes everything composable

00:05:51,229 --> 00:05:59,690
which is quite important for performance

00:05:53,930 --> 00:06:02,390
as well so some takeaways before I show

00:05:59,690 --> 00:06:05,300
the takeaways is that you should be able

00:06:02,390 --> 00:06:07,640
to improve the performance just by

00:06:05,300 --> 00:06:10,640
following what the default Doc's

00:06:07,640 --> 00:06:13,040
say about you know react in general but

00:06:10,640 --> 00:06:16,610
sometimes it's easy to just go down that

00:06:13,040 --> 00:06:19,490
slope and you know write everything as a

00:06:16,610 --> 00:06:22,990
class buy everything as you know a big

00:06:19,490 --> 00:06:26,270
chunk of components a large component so

00:06:22,990 --> 00:06:29,150
just by following the best guidelines

00:06:26,270 --> 00:06:31,580
that they say in the docs you can get a

00:06:29,150 --> 00:06:34,010
lot of performance there but if that

00:06:31,580 --> 00:06:36,350
wasn't enough

00:06:34,010 --> 00:06:38,030
I'm gonna share some takeaways so we're

00:06:36,350 --> 00:06:43,550
going to analyze these these ten

00:06:38,030 --> 00:06:48,050
takeaways briefly but I've highlighted

00:06:43,550 --> 00:06:52,210
some kind of in bold some you know some

00:06:48,050 --> 00:06:56,900
words here who knows how to measure like

00:06:52,210 --> 00:06:58,940
what's going on there yeah okay so who

00:06:56,900 --> 00:07:01,310
knows how to measure JavaScript

00:06:58,940 --> 00:07:06,830
performance here do you know what dev

00:07:01,310 --> 00:07:10,910
tools performance tab is yeah yeah cool

00:07:06,830 --> 00:07:14,390
so one thing to note is that measuring

00:07:10,910 --> 00:07:17,090
early is good but I would I would say

00:07:14,390 --> 00:07:20,080
don't measure too early because first of

00:07:17,090 --> 00:07:24,230
all you need to have a performance

00:07:20,080 --> 00:07:27,080
budget so once you wants to decide with

00:07:24,230 --> 00:07:30,160
your team how to kind of work with your

00:07:27,080 --> 00:07:33,260
application you're gonna have to analyze

00:07:30,160 --> 00:07:35,600
whether you have data from your users or

00:07:33,260 --> 00:07:40,660
your starting new so who is gonna start

00:07:35,600 --> 00:07:45,080
up here startups come on just one person

00:07:40,660 --> 00:07:47,390
to party two people that's it Wow okay

00:07:45,080 --> 00:07:49,220
so you're you're lucky then because

00:07:47,390 --> 00:07:51,620
usually if you're nine a startup you

00:07:49,220 --> 00:07:54,290
have data for your business your data

00:07:51,620 --> 00:07:57,560
from your users and you're gonna be able

00:07:54,290 --> 00:07:59,720
to kind of measure a bit better how you

00:07:57,560 --> 00:08:04,880
know how to tailor your performance

00:07:59,720 --> 00:08:07,940
measurement and budget so first thing I

00:08:04,880 --> 00:08:10,070
would say if you're in a company analyze

00:08:07,940 --> 00:08:13,040
your data and as you users what their

00:08:10,070 --> 00:08:15,770
behavior is you know how many are living

00:08:13,040 --> 00:08:18,620
on a specific page and why they're

00:08:15,770 --> 00:08:23,840
living if you see that that page is

00:08:18,620 --> 00:08:27,260
particularly slow or maybe has some you

00:08:23,840 --> 00:08:29,780
know loading UI issues or UX issues then

00:08:27,260 --> 00:08:33,110
you can find that out but at the same

00:08:29,780 --> 00:08:36,320
time you want up truck kind of a

00:08:33,110 --> 00:08:38,540
baseline where your users are kind of

00:08:36,320 --> 00:08:41,510
staying on that page so once you have

00:08:38,540 --> 00:08:44,090
that baseline you can set some

00:08:41,510 --> 00:08:46,610
boundaries that some budgets on that

00:08:44,090 --> 00:08:50,040
performance

00:08:46,610 --> 00:08:52,519
in terms of budgets we're talking about

00:08:50,040 --> 00:08:55,649
you know time to interactive which is

00:08:52,519 --> 00:08:57,750
how long the page takes before the user

00:08:55,649 --> 00:09:00,899
can click on stuff and you know start

00:08:57,750 --> 00:09:04,290
interacting with the page how long it

00:09:00,899 --> 00:09:06,660
takes to paint the page so paint in

00:09:04,290 --> 00:09:09,509
terms of you know how long it takes to

00:09:06,660 --> 00:09:13,800
make something visible on the page and

00:09:09,509 --> 00:09:16,170
kind of working and then you've got some

00:09:13,800 --> 00:09:18,689
other budgets like you know the bundle

00:09:16,170 --> 00:09:21,180
size are big javascript files that

00:09:18,689 --> 00:09:23,819
you're gonna have the user loads are

00:09:21,180 --> 00:09:26,550
gonna be and once you have those you can

00:09:23,819 --> 00:09:29,339
set the budgets on you know with some

00:09:26,550 --> 00:09:32,009
tools either from directly from web pack

00:09:29,339 --> 00:09:34,199
or if you don't use webpack even you

00:09:32,009 --> 00:09:37,019
know roll-up or a parcel they have

00:09:34,199 --> 00:09:40,980
budgets on there so once you have those

00:09:37,019 --> 00:09:47,639
you can start kind of working to keep

00:09:40,980 --> 00:09:50,309
that budget below the threshold so in a

00:09:47,639 --> 00:09:52,139
way that's gonna do a lot for you but I

00:09:50,309 --> 00:09:55,259
would say don't start early as I

00:09:52,139 --> 00:09:57,149
mentioned here because if you start too

00:09:55,259 --> 00:09:59,879
early you're going to lose too much time

00:09:57,149 --> 00:10:04,290
on the performance where it might not be

00:09:59,879 --> 00:10:07,319
the best thing to do so I would say

00:10:04,290 --> 00:10:09,420
start early as thinking about the

00:10:07,319 --> 00:10:12,600
process to thinking about the budget but

00:10:09,420 --> 00:10:14,279
don't you know start perform improving

00:10:12,600 --> 00:10:16,740
performance or refactoring too early

00:10:14,279 --> 00:10:19,529
because that's going to cause delays in

00:10:16,740 --> 00:10:22,079
your development time and problem with

00:10:19,529 --> 00:10:23,579
with the team and things like that are

00:10:22,079 --> 00:10:26,970
not that's great

00:10:23,579 --> 00:10:30,899
incorporation especially another thing

00:10:26,970 --> 00:10:32,670
to note is the measuring needs to be

00:10:30,899 --> 00:10:36,329
done in a production build of course it

00:10:32,670 --> 00:10:39,089
might sound very you know granted but

00:10:36,329 --> 00:10:42,240
some sometimes you forget and you're in

00:10:39,089 --> 00:10:44,730
the development environment and you're

00:10:42,240 --> 00:10:48,149
trying to measure stuff and it looks

00:10:44,730 --> 00:10:50,040
very slow and you don't know why that's

00:10:48,149 --> 00:10:52,649
probably because the production build is

00:10:50,040 --> 00:10:56,000
not turned on so I react and view and

00:10:52,649 --> 00:10:59,640
other frameworks they do lots of

00:10:56,000 --> 00:11:02,010
optimization on the production be

00:10:59,640 --> 00:11:03,990
that they don't do in the development to

00:11:02,010 --> 00:11:06,209
speed up performance and you know

00:11:03,990 --> 00:11:08,610
development time so just make sure that

00:11:06,209 --> 00:11:11,459
you're in production another thing that

00:11:08,610 --> 00:11:15,450
I didn't mention here is that if you're

00:11:11,459 --> 00:11:17,130
in iid if you're in incognito is much

00:11:15,450 --> 00:11:21,019
better mostly because you don't have all

00:11:17,130 --> 00:11:25,290
this long list of extensions that I have

00:11:21,019 --> 00:11:27,390
extensions also work in during the

00:11:25,290 --> 00:11:30,959
performance analysis and the audit so

00:11:27,390 --> 00:11:34,860
make sure you are in a you know clean

00:11:30,959 --> 00:11:37,610
environment to have a better idea of

00:11:34,860 --> 00:11:40,709
what the performance is

00:11:37,610 --> 00:11:43,920
number three I would say know in terms

00:11:40,709 --> 00:11:46,529
of importance is just code split a lot

00:11:43,920 --> 00:11:50,700
who knows about consecrating you nice

00:11:46,529 --> 00:11:52,350
awesome so I skipped that now number of

00:11:50,700 --> 00:11:54,660
free code splitting

00:11:52,350 --> 00:11:58,740
especially for routes but also

00:11:54,660 --> 00:12:02,519
components is I think is fundamental is

00:11:58,740 --> 00:12:07,110
a key to lots of patterns google says

00:12:02,519 --> 00:12:09,510
purple pattern you know the least you

00:12:07,110 --> 00:12:13,579
can load at the initial load of the page

00:12:09,510 --> 00:12:16,740
the better so think about Twitter if you

00:12:13,579 --> 00:12:18,269
open Twitter initially you're gonna see

00:12:16,740 --> 00:12:21,449
on a slow connection you're gonna see

00:12:18,269 --> 00:12:23,490
the feed first that's because of course

00:12:21,449 --> 00:12:25,470
the feed is the most important thing for

00:12:23,490 --> 00:12:26,940
the user so user is going to start

00:12:25,470 --> 00:12:30,600
scrolling they're going to start

00:12:26,940 --> 00:12:32,459
interacting and that's the key element

00:12:30,600 --> 00:12:36,060
for the user to not leave the page I'm

00:12:32,459 --> 00:12:39,029
not lose attention so splitting cold

00:12:36,060 --> 00:12:41,880
components and bundles and routes is

00:12:39,029 --> 00:12:46,890
going to speed up a lot your performance

00:12:41,880 --> 00:12:49,649
budget for react specifically but also

00:12:46,890 --> 00:12:51,769
view use functional components when

00:12:49,649 --> 00:12:54,990
rendering only the view layer so

00:12:51,769 --> 00:12:59,610
especially we look we've seen that's

00:12:54,990 --> 00:13:01,820
coming more often now before I think

00:12:59,610 --> 00:13:03,870
correct me if I'm wrong but the class

00:13:01,820 --> 00:13:06,060
sorry the functional component was

00:13:03,870 --> 00:13:09,600
converted to a class again so there

00:13:06,060 --> 00:13:12,150
wasn't any performance gain but now with

00:13:09,600 --> 00:13:14,730
the hook the hooks especially

00:13:12,150 --> 00:13:17,100
we're seeing more performance gains in

00:13:14,730 --> 00:13:19,760
things like you know form validation and

00:13:17,100 --> 00:13:22,650
user input and things like that are

00:13:19,760 --> 00:13:25,020
there are some metrics in place already

00:13:22,650 --> 00:13:29,160
that noticing of quite a big difference

00:13:25,020 --> 00:13:33,180
in speed once you factor in functional

00:13:29,160 --> 00:13:36,480
components to do that is fairly easy now

00:13:33,180 --> 00:13:39,480
with hooks you can still have state by

00:13:36,480 --> 00:13:42,690
even if you don't you can use functional

00:13:39,480 --> 00:13:45,180
components and use my mod for kind of

00:13:42,690 --> 00:13:49,280
keeping the state and avoid entry

00:13:45,180 --> 00:13:55,050
rendering on the page for that component

00:13:49,280 --> 00:13:56,040
it's just an view oh sorry yeah that's

00:13:55,050 --> 00:14:00,150
the one

00:13:56,040 --> 00:14:03,120
but again it was the same slide so react

00:14:00,150 --> 00:14:04,830
talks again as I mentioned it's not just

00:14:03,120 --> 00:14:07,680
for performance it's also for

00:14:04,830 --> 00:14:10,380
reusability so the more you reuse your

00:14:07,680 --> 00:14:13,440
code the more efficient is them the less

00:14:10,380 --> 00:14:17,250
the browser and the client takes to

00:14:13,440 --> 00:14:20,400
parse it so once you I'm going to kind

00:14:17,250 --> 00:14:23,450
of say that the least you do the better

00:14:20,400 --> 00:14:25,770
and the least you load the better so

00:14:23,450 --> 00:14:29,280
reusing the code makes your bundle

00:14:25,770 --> 00:14:33,510
smaller the splitting it makes it even

00:14:29,280 --> 00:14:36,530
smaller so again the less you load

00:14:33,510 --> 00:14:39,240
initially that better for performance

00:14:36,530 --> 00:14:43,500
again optimizing your bundles there are

00:14:39,240 --> 00:14:45,300
lots of plugins in web pack specifically

00:14:43,500 --> 00:14:47,790
I don't have much experience with parcel

00:14:45,300 --> 00:14:52,860
but I think they have quite a good base

00:14:47,790 --> 00:14:56,820
as well but mostly with web pack as far

00:14:52,860 --> 00:15:01,110
as I know you got lots of plugins and

00:14:56,820 --> 00:15:04,380
even Babel plugins that really make your

00:15:01,110 --> 00:15:07,440
bundle more optimized imagine prop types

00:15:04,380 --> 00:15:09,060
if you don't use typescript they are

00:15:07,440 --> 00:15:12,690
quite useful for you know type checking

00:15:09,060 --> 00:15:16,590
and showing what what's wrong with your

00:15:12,690 --> 00:15:19,350
types in the props that you pass but

00:15:16,590 --> 00:15:21,210
sometimes when you optimize to the

00:15:19,350 --> 00:15:24,120
production build prop types are still in

00:15:21,210 --> 00:15:25,580
the code so you can remove them with

00:15:24,120 --> 00:15:28,740
plug-in

00:15:25,580 --> 00:15:30,300
with Babel plugins so that was three

00:15:28,740 --> 00:15:32,160
part of the prop types from the

00:15:30,300 --> 00:15:36,060
production build which is quite useful

00:15:32,160 --> 00:15:41,390
it's a not big save but it will decrease

00:15:36,060 --> 00:15:47,310
the bundle size when we're talking about

00:15:41,390 --> 00:15:49,650
bundled also we we're splitting so

00:15:47,310 --> 00:15:52,440
imagine you have a component that is in

00:15:49,650 --> 00:15:55,980
separate pages you want to decide to

00:15:52,440 --> 00:15:58,200
load that component globally so that is

00:15:55,980 --> 00:16:01,410
available everywhere but sometimes that

00:15:58,200 --> 00:16:03,390
is convenient for you in development but

00:16:01,410 --> 00:16:06,870
it might not be the best choice once you

00:16:03,390 --> 00:16:08,370
are in production because if you just

00:16:06,870 --> 00:16:11,940
need that component in two or three

00:16:08,370 --> 00:16:15,090
pages out of five or six or you know

00:16:11,940 --> 00:16:18,210
inside other components then he's gonna

00:16:15,090 --> 00:16:20,100
pull you the global bundle and it's

00:16:18,210 --> 00:16:22,560
going to be loaded initially with every

00:16:20,100 --> 00:16:26,010
every other vendor bundle so every other

00:16:22,560 --> 00:16:33,090
vendor script so that could be a problem

00:16:26,010 --> 00:16:36,210
for you down the line so Babel per set M

00:16:33,090 --> 00:16:38,870
is really I cannot stress this enough

00:16:36,210 --> 00:16:44,220
especially with what Microsoft said

00:16:38,870 --> 00:16:46,530
recently that ie is now browser other

00:16:44,220 --> 00:16:49,200
than I've heard of that I they said that

00:16:46,530 --> 00:16:53,390
not me

00:16:49,200 --> 00:16:56,520
but ie sometimes you go down to

00:16:53,390 --> 00:16:59,610
eventually ie9 even and if you're

00:16:56,520 --> 00:17:03,950
working with banks or like you're not

00:16:59,610 --> 00:17:08,750
gonna escape that at least for now but I

00:17:03,950 --> 00:17:11,790
11 is usually kind of the accepted

00:17:08,750 --> 00:17:15,810
browser from Microsoft and edge of

00:17:11,790 --> 00:17:17,790
course but they will present em by

00:17:15,810 --> 00:17:19,620
specifying how many browser you want to

00:17:17,790 --> 00:17:22,650
support you're gonna cut a lot of

00:17:19,620 --> 00:17:24,780
polyfills and if you are loading

00:17:22,650 --> 00:17:28,580
polyfills of course that is going to

00:17:24,780 --> 00:17:30,750
reduce the bundle again and also

00:17:28,580 --> 00:17:33,750
optimized for the browsers that support

00:17:30,750 --> 00:17:35,679
year six and other features that are not

00:17:33,750 --> 00:17:38,860
in the

00:17:35,679 --> 00:17:41,799
eventually in knowing the older browsers

00:17:38,860 --> 00:17:45,799
so let's say if you have ie9 support

00:17:41,799 --> 00:17:48,590
then they will preset M is going to load

00:17:45,799 --> 00:17:51,710
the polyfills for your kind of browsers

00:17:48,590 --> 00:17:54,980
that you support by again coming back to

00:17:51,710 --> 00:17:58,399
the user data that you have look at what

00:17:54,980 --> 00:18:01,789
the accepted percentage of users you

00:17:58,399 --> 00:18:06,019
want to support let's say II's 2% and

00:18:01,789 --> 00:18:08,149
you got a client size of 1 million then

00:18:06,019 --> 00:18:11,090
2 percent of 1 million you have to

00:18:08,149 --> 00:18:14,480
decide whether that's useful or you can

00:18:11,090 --> 00:18:17,690
lose that eventually they can switch to

00:18:14,480 --> 00:18:19,429
another browser or you can show a

00:18:17,690 --> 00:18:22,909
message was saying that your browser is

00:18:19,429 --> 00:18:26,389
not supported but with that comes you

00:18:22,909 --> 00:18:28,399
know also progressive enhancement so

00:18:26,389 --> 00:18:30,639
even if you support the feature if you

00:18:28,399 --> 00:18:32,989
even if it doesn't break maybe it's not

00:18:30,639 --> 00:18:34,669
going to show the best experience to

00:18:32,989 --> 00:18:37,340
that browser and that's fine

00:18:34,669 --> 00:18:43,609
especially with CSS and features like

00:18:37,340 --> 00:18:47,720
CSS grid and you know flex box I even so

00:18:43,609 --> 00:18:52,070
coming back to the JavaScript of lazy

00:18:47,720 --> 00:18:55,129
loading that's coming similarly to code

00:18:52,070 --> 00:18:58,570
splitting so lazy loading means not just

00:18:55,129 --> 00:19:02,059
code splitting but also if you have

00:18:58,570 --> 00:19:05,090
images or other content or components or

00:19:02,059 --> 00:19:07,129
you know features or functions that you

00:19:05,090 --> 00:19:11,929
want to load but not necessarily at the

00:19:07,129 --> 00:19:14,059
first page load then that's a good

00:19:11,929 --> 00:19:18,679
opportunity to split them and lazy load

00:19:14,059 --> 00:19:20,600
them I would say again doing the example

00:19:18,679 --> 00:19:23,359
of Twitter by even Facebook and you know

00:19:20,600 --> 00:19:26,109
many other websites they don't

00:19:23,359 --> 00:19:29,330
necessarily load everything at once and

00:19:26,109 --> 00:19:31,129
the website is responsive although I

00:19:29,330 --> 00:19:33,379
don't like particularly like performance

00:19:31,129 --> 00:19:35,269
in facebook because it's quite slow

00:19:33,379 --> 00:19:39,080
sometimes but Twitter is a good example

00:19:35,269 --> 00:19:42,590
especially the PWA they have they load

00:19:39,080 --> 00:19:46,150
just a feed and that's lazy loaded the

00:19:42,590 --> 00:19:49,870
rest of the features like log in the

00:19:46,150 --> 00:19:52,900
you know the the most famous tweets and

00:19:49,870 --> 00:19:54,940
whatnot the hashtags and stuff so that

00:19:52,900 --> 00:19:57,750
he's lazy loading and it's going to

00:19:54,940 --> 00:20:02,920
increase the time to interactive budget

00:19:57,750 --> 00:20:05,920
and then again this is more technical

00:20:02,920 --> 00:20:12,480
and probably who knows about terrible

00:20:05,920 --> 00:20:16,500
fun okay so the way JavaScript works is

00:20:12,480 --> 00:20:20,250
they passed through a compiler because

00:20:16,500 --> 00:20:22,420
javascript is parsed you done actually

00:20:20,250 --> 00:20:26,970
the machine doesn't understand that

00:20:22,420 --> 00:20:31,330
language until is compiled in regards to

00:20:26,970 --> 00:20:33,700
languages like C or you know Java these

00:20:31,330 --> 00:20:37,360
are type languages and they go through a

00:20:33,700 --> 00:20:39,640
build process beforehand that allows

00:20:37,360 --> 00:20:42,460
them to be more performant usually and

00:20:39,640 --> 00:20:45,520
allows them to spend less time on the

00:20:42,460 --> 00:20:50,350
client side to parse the JavaScript part

00:20:45,520 --> 00:20:52,330
of the code one way that is optimized

00:20:50,350 --> 00:20:57,820
for JavaScript is that if you have

00:20:52,330 --> 00:21:00,280
proper code practices aka typescript or

00:20:57,820 --> 00:21:03,720
flow or you know you're really good at

00:21:00,280 --> 00:21:07,600
just writing JavaScript for some reason

00:21:03,720 --> 00:21:09,460
you you manage to get to that kind of

00:21:07,600 --> 00:21:12,130
preferential it's like the fast track

00:21:09,460 --> 00:21:14,620
indie in the airport you you got through

00:21:12,130 --> 00:21:16,540
that fast track you're fine your

00:21:14,620 --> 00:21:20,080
javascript is compiled down to machine

00:21:16,540 --> 00:21:22,180
code and kind of goes very quickly the

00:21:20,080 --> 00:21:24,760
other problem is when you find a

00:21:22,180 --> 00:21:26,440
function that asks you arguments and one

00:21:24,760 --> 00:21:29,770
of the arguments is our number and one

00:21:26,440 --> 00:21:32,160
is a string what happens then anyone

00:21:29,770 --> 00:21:36,460
wants to guess our number plus string

00:21:32,160 --> 00:21:38,560
it's very easy coming it's a string so

00:21:36,460 --> 00:21:40,870
the problem with that is that the

00:21:38,560 --> 00:21:43,450
compiler doesn't know that it doesn't

00:21:40,870 --> 00:21:46,600
know what a is and what B is so if a is

00:21:43,450 --> 00:21:48,100
a string at a busy number there is going

00:21:46,600 --> 00:21:50,320
to be a problem because the compiler

00:21:48,100 --> 00:21:52,660
needs to go back and say okay I need to

00:21:50,320 --> 00:21:55,480
check you know what happens when a plus

00:21:52,660 --> 00:21:59,080
B is not number and sometimes it's a

00:21:55,480 --> 00:22:02,289
string or sometimes array plus object is

00:21:59,080 --> 00:22:06,190
or something interesting

00:22:02,289 --> 00:22:08,919
javascript is quite complicated so once

00:22:06,190 --> 00:22:11,470
you have that problem turbofan doesn't

00:22:08,919 --> 00:22:13,750
kick in which is the first compiler the

00:22:11,470 --> 00:22:18,220
first rack so you go to byte code which

00:22:13,750 --> 00:22:21,700
is they say the long queue in Luton

00:22:18,220 --> 00:22:28,140
Airport where you usually go I'm joking

00:22:21,700 --> 00:22:33,340
you obviously pay for FasTrak like me no

00:22:28,140 --> 00:22:36,669
I've never been but so turbofan a is the

00:22:33,340 --> 00:22:38,889
preferential way of doing that but

00:22:36,669 --> 00:22:41,830
unfortunately most of the time if you

00:22:38,889 --> 00:22:44,289
write just normal JavaScript you can mix

00:22:41,830 --> 00:22:48,039
arguments you can expect things to be

00:22:44,289 --> 00:22:50,289
string but sometimes they're not and you

00:22:48,039 --> 00:22:53,289
eventually go into byte code which is

00:22:50,289 --> 00:22:55,630
very slow and that's what kind of gets

00:22:53,289 --> 00:22:59,380
flagged in the performance tab when you

00:22:55,630 --> 00:23:01,570
see red flags here and there it's either

00:22:59,380 --> 00:23:03,610
you know it takes too long to parse a or

00:23:01,570 --> 00:23:07,029
something is wrong and you have to fix

00:23:03,610 --> 00:23:10,299
it so writing typescript flow really

00:23:07,029 --> 00:23:12,850
helps with that because you're writing

00:23:10,299 --> 00:23:16,120
code is never going to have these

00:23:12,850 --> 00:23:19,059
decisions is usually more performant for

00:23:16,120 --> 00:23:22,210
that sense of course you also have you

00:23:19,059 --> 00:23:25,779
know other neat features so like you

00:23:22,210 --> 00:23:27,730
know intelligent intellisense and things

00:23:25,779 --> 00:23:30,519
that are doing development rather than

00:23:27,730 --> 00:23:32,919
doing client-side so they're gonna say

00:23:30,519 --> 00:23:36,820
oh this is not string what are you doing

00:23:32,919 --> 00:23:39,130
go back and fix it that's really useful

00:23:36,820 --> 00:23:40,899
so it doesn't say that but because I

00:23:39,130 --> 00:23:42,490
didn't want to opinionate what you can

00:23:40,899 --> 00:23:46,019
use you can use JavaScript you can

00:23:42,490 --> 00:23:51,070
typescript flow or other kind of type

00:23:46,019 --> 00:23:55,899
typed languages even CoffeeScript but

00:23:51,070 --> 00:23:58,480
Dom that's bad so yeah

00:23:55,899 --> 00:24:00,130
types creed really helps with that so

00:23:58,480 --> 00:24:02,139
eventually this is the number ten but

00:24:00,130 --> 00:24:05,230
actually it is one of the most important

00:24:02,139 --> 00:24:07,740
because the the more turbofan kicks in

00:24:05,230 --> 00:24:10,240
the faster the parsing is going to be so

00:24:07,740 --> 00:24:12,170
really pay attention to that if you can

00:24:10,240 --> 00:24:14,750
you know have time to learn

00:24:12,170 --> 00:24:16,670
scriptor flow is it's gonna be really

00:24:14,750 --> 00:24:18,620
useful you probably not going to notice

00:24:16,670 --> 00:24:20,150
that first but when you see about

00:24:18,620 --> 00:24:24,380
performance and when you start actually

00:24:20,150 --> 00:24:27,340
optimizing the page is really gonna kind

00:24:24,380 --> 00:24:29,690
of change your idea of performance and

00:24:27,340 --> 00:24:32,420
JavaScript in general if you want to do

00:24:29,690 --> 00:24:35,750
view stuff I can also show what

00:24:32,420 --> 00:24:40,610
takeaways in view you have otherwise I'm

00:24:35,750 --> 00:24:44,960
gonna just show a quick cheat on our

00:24:40,610 --> 00:24:47,750
cheat but this is obviously obviously

00:24:44,960 --> 00:24:52,790
view specific and I'm sorry if it's a

00:24:47,750 --> 00:24:57,110
bit small and try and zoom in so in here

00:24:52,790 --> 00:24:59,000
you've got imagine you have a page where

00:24:57,110 --> 00:25:04,040
you're loading again lazy loading stuff

00:24:59,000 --> 00:25:06,070
and some functions here are fairly heavy

00:25:04,040 --> 00:25:10,070
in terms of you know performance and

00:25:06,070 --> 00:25:13,010
heavy in terms of parsing and even kind

00:25:10,070 --> 00:25:15,200
of running the function so imagine you

00:25:13,010 --> 00:25:18,830
have an animation that kicks in and then

00:25:15,200 --> 00:25:20,660
another one that is really heavy if you

00:25:18,830 --> 00:25:22,670
load that page straight away and you're

00:25:20,660 --> 00:25:24,620
not lazy loading these things that's

00:25:22,670 --> 00:25:27,080
gonna kick in at the same time and

00:25:24,620 --> 00:25:29,300
obviously the performance and the you

00:25:27,080 --> 00:25:31,940
know the frames of that browser are

00:25:29,300 --> 00:25:37,100
going to suffer so this is a neat

00:25:31,940 --> 00:25:39,320
feature that William is next sorry I'm

00:25:37,100 --> 00:25:41,180
view core team member but this is

00:25:39,320 --> 00:25:41,990
applicable to any language really

00:25:41,180 --> 00:25:43,150
because it's just a

00:25:41,990 --> 00:25:46,210
requestanimationframe

00:25:43,150 --> 00:25:49,610
what he's doing here is setting a

00:25:46,210 --> 00:25:52,420
priority and a counter and then on each

00:25:49,610 --> 00:25:56,810
frame is going to increase that counter

00:25:52,420 --> 00:26:00,350
then he gets the counter value from this

00:25:56,810 --> 00:26:02,330
deferred function that method is going

00:26:00,350 --> 00:26:05,030
to return one two three four five until

00:26:02,330 --> 00:26:08,090
the end of the counter here which is

00:26:05,030 --> 00:26:10,330
really simple function but what this

00:26:08,090 --> 00:26:12,830
does is basically creates a lazy loading

00:26:10,330 --> 00:26:16,040
in couple of lines of code because

00:26:12,830 --> 00:26:18,880
you're gonna load page and then you're

00:26:16,040 --> 00:26:22,160
going to lazy load all these components

00:26:18,880 --> 00:26:24,350
this is assuming you have some kind of

00:26:22,160 --> 00:26:25,730
framework on top so it could be react

00:26:24,350 --> 00:26:28,280
could be view with the

00:26:25,730 --> 00:26:30,950
you got vf2 kind of render or not the

00:26:28,280 --> 00:26:34,910
component and we'd react to God just

00:26:30,950 --> 00:26:37,490
simple if turn marries and even JSX

00:26:34,910 --> 00:26:40,520
control statements but with that you can

00:26:37,490 --> 00:26:42,560
render or not something and that is

00:26:40,520 --> 00:26:46,040
mostly for the browser performance is

00:26:42,560 --> 00:26:50,140
now for the parsing this is more a way

00:26:46,040 --> 00:26:53,540
to defer as I said differs some kind of

00:26:50,140 --> 00:26:56,960
logic and heavy instructions for the

00:26:53,540 --> 00:26:59,360
browser so and this of course uses

00:26:56,960 --> 00:27:02,660
requestanimationframe which is going to

00:26:59,360 --> 00:27:10,130
allow the browser to render and paint

00:27:02,660 --> 00:27:13,880
before blocking the rendering here and

00:27:10,130 --> 00:27:18,380
of course that's the view kind of syntax

00:27:13,880 --> 00:27:20,900
you load V if defer point four so it

00:27:18,380 --> 00:27:23,210
could be five hundred or whether it's

00:27:20,900 --> 00:27:25,160
going to be frames per second so four is

00:27:23,210 --> 00:27:27,590
quite a small number but it could be

00:27:25,160 --> 00:27:30,020
five hundred could be one thousand and

00:27:27,590 --> 00:27:33,280
this is effectively going to load this

00:27:30,020 --> 00:27:35,840
component only after that kind of frame

00:27:33,280 --> 00:27:38,420
counts passed which is quite cool I

00:27:35,840 --> 00:27:40,640
thought it was a very small chunk of

00:27:38,420 --> 00:27:42,170
code that's going to improve the

00:27:40,640 --> 00:27:47,720
performance a lot especially for

00:27:42,170 --> 00:27:53,510
animation again this is view specific I

00:27:47,720 --> 00:27:56,990
had 5855 sorry 286 kind of best

00:27:53,510 --> 00:27:59,030
practices on this repo in view Knox

00:27:56,990 --> 00:28:02,240
specifically we're gonna see it later

00:27:59,030 --> 00:28:04,400
but after the performance it kind of got

00:28:02,240 --> 00:28:07,720
much better with just a few tweaks and

00:28:04,400 --> 00:28:10,700
lazy loading some components so it's not

00:28:07,720 --> 00:28:13,670
perfect but sometimes perfect is not

00:28:10,700 --> 00:28:17,120
what you need you just need to get down

00:28:13,670 --> 00:28:20,270
to us some kind of budget that you set

00:28:17,120 --> 00:28:22,700
for yourself so in this case this is on

00:28:20,270 --> 00:28:27,590
our Nexus mobile phone with free time

00:28:22,700 --> 00:28:30,680
slow down and I think for time the speed

00:28:27,590 --> 00:28:33,140
of the broadband anyway it's basically

00:28:30,680 --> 00:28:36,620
what you get in the audit if you search

00:28:33,140 --> 00:28:37,940
for mobile in chrome dev tools so it's

00:28:36,620 --> 00:28:41,480
not by no me

00:28:37,940 --> 00:28:43,519
the best performance but the gain that I

00:28:41,480 --> 00:28:47,870
got from just following these few tweaks

00:28:43,519 --> 00:28:51,769
is about 30 45 percent so it's quite

00:28:47,870 --> 00:28:54,240
it's quite powerful that's it let's go

00:28:51,769 --> 00:29:01,450
to for Q&A

00:28:54,240 --> 00:29:01,450

YouTube URL: https://www.youtube.com/watch?v=ARXzMMW4eD0


