Title: Going Native - JS Roundabout - October 2018
Publication date: 2018-10-17
Playlist: The JS Roundabout
Description: 
	Presented by Anna Doubkova.

React Native allows you to re-use your web code to build native applications. What’s not to like? This approach is simple in theory but challenging in practice. In this talk, you’ll learn what is re-usable and what isn’t, the intricacies of shared code bases, and cross-team communication when building React and React Native apps at the same time. With real-life examples, code snippets, and memes, you will learn everything you need to know to get started on your native journey.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,709 --> 00:00:07,259
my name is Anna I work as a developer at

00:00:04,290 --> 00:00:09,090
hive I used to be a web developer now we

00:00:07,259 --> 00:00:12,450
call ourselves JavaScript developers

00:00:09,090 --> 00:00:14,730
because we have gone native and I am

00:00:12,450 --> 00:00:18,020
here to tell you a bit about our journey

00:00:14,730 --> 00:00:21,420
about why we decided to use react native

00:00:18,020 --> 00:00:25,529
what kind of code we can share between

00:00:21,420 --> 00:00:27,990
web and mobile and in the end a little

00:00:25,529 --> 00:00:32,700
bit about how we actually go about the

00:00:27,990 --> 00:00:34,860
sharing and say a little bit about us so

00:00:32,700 --> 00:00:37,770
that I can explain to you why I decided

00:00:34,860 --> 00:00:40,829
to or why we decided to teach that using

00:00:37,770 --> 00:00:43,680
react native and we're hive also

00:00:40,829 --> 00:00:46,050
connected homes we do small devices and

00:00:43,680 --> 00:00:48,090
we've got a huge range of devices our

00:00:46,050 --> 00:00:50,010
main product is a thermostat but we also

00:00:48,090 --> 00:00:54,239
have light bulbs and all kinds of

00:00:50,010 --> 00:00:56,579
sensors and plugs and cameras and just

00:00:54,239 --> 00:01:00,000
controlling the devices is quite a

00:00:56,579 --> 00:01:02,879
complex work but we also have schedules

00:01:00,000 --> 00:01:06,960
and actions so like if you open a door a

00:01:02,879 --> 00:01:10,560
light bulb gets turned on so we end up

00:01:06,960 --> 00:01:13,380
having a lot of logic and at the moment

00:01:10,560 --> 00:01:16,170
we have three apps that allow the user

00:01:13,380 --> 00:01:18,119
to control all of this we've got the web

00:01:16,170 --> 00:01:20,400
app the Android app and the iOS app and

00:01:18,119 --> 00:01:22,860
that means that essentially we need to

00:01:20,400 --> 00:01:24,720
develop all these things at least three

00:01:22,860 --> 00:01:27,240
times and that's not mentioning the

00:01:24,720 --> 00:01:29,850
actual devices the hardware controlling

00:01:27,240 --> 00:01:31,590
bit and the platform that controls it so

00:01:29,850 --> 00:01:34,500
essentially to develop a new feature

00:01:31,590 --> 00:01:37,229
right now we have to involve about five

00:01:34,500 --> 00:01:40,020
or six teams to get one thing done and

00:01:37,229 --> 00:01:42,659
so we decided to speed up the process

00:01:40,020 --> 00:01:45,869
that we will unite at least everything

00:01:42,659 --> 00:01:48,390
on the front end under react we already

00:01:45,869 --> 00:01:50,670
had our applied in react we did some

00:01:48,390 --> 00:01:52,680
preliminary tests with react native and

00:01:50,670 --> 00:01:55,829
it seemed like a good move for us in

00:01:52,680 --> 00:01:57,840
that respect and when you say that we

00:01:55,829 --> 00:01:59,100
will do everything in JavaScript used

00:01:57,840 --> 00:02:00,930
all this sounds really good to all

00:01:59,100 --> 00:02:03,570
JavaScript developers and extremely

00:02:00,930 --> 00:02:05,219
frightening to anybody else especially

00:02:03,570 --> 00:02:08,160
to the native developers who we are

00:02:05,219 --> 00:02:10,229
practically replacing so that we have to

00:02:08,160 --> 00:02:11,510
like drive a hard sell at our office

00:02:10,229 --> 00:02:13,250
obviously

00:02:11,510 --> 00:02:15,829
to sort of get people on board with it

00:02:13,250 --> 00:02:19,579
and our main selling point especially

00:02:15,829 --> 00:02:21,439
for the business was code sharing we

00:02:19,579 --> 00:02:24,680
said we don't have to develop three apps

00:02:21,439 --> 00:02:26,209
anymore we will develop 1/2 but they

00:02:24,680 --> 00:02:28,670
will be certain amount of code Riis

00:02:26,209 --> 00:02:31,909
between the two which will allow us to

00:02:28,670 --> 00:02:33,620
do much faster delivery and then we can

00:02:31,909 --> 00:02:35,120
also lower the costs because we don't

00:02:33,620 --> 00:02:38,000
actually have to have that many

00:02:35,120 --> 00:02:40,970
developers it's easier to hire because

00:02:38,000 --> 00:02:42,709
we don't need to hire a web developer I

00:02:40,970 --> 00:02:45,980
also developed an Android developer we

00:02:42,709 --> 00:02:47,629
just hire a react developer and I've

00:02:45,980 --> 00:02:49,629
heard from people that they found it

00:02:47,629 --> 00:02:52,040
actually very difficult to hire people

00:02:49,629 --> 00:02:54,650
because obviously react native is a new

00:02:52,040 --> 00:02:57,230
technology and hiring experienced react

00:02:54,650 --> 00:03:00,290
developers is next to impossible but

00:02:57,230 --> 00:03:01,639
actually we found that if you're a react

00:03:00,290 --> 00:03:03,530
developer you can pick up react native

00:03:01,639 --> 00:03:05,090
very quickly and there are quite a few

00:03:03,530 --> 00:03:06,470
native developers at least in our

00:03:05,090 --> 00:03:08,989
companies are quite a few react knee

00:03:06,470 --> 00:03:11,480
every sorry native developers who are

00:03:08,989 --> 00:03:13,099
interested in learning react native so

00:03:11,480 --> 00:03:16,400
we sort of got the expertise of both

00:03:13,099 --> 00:03:19,190
mobile and react and and just sort of

00:03:16,400 --> 00:03:20,810
let people learn react native and last

00:03:19,190 --> 00:03:23,180
but not least it's kind of a cool

00:03:20,810 --> 00:03:25,639
technology to try out at least for the

00:03:23,180 --> 00:03:30,650
developers it's kind of a cool thing to

00:03:25,639 --> 00:03:33,260
do and so we decided them to do this

00:03:30,650 --> 00:03:36,109
whole thing of rebuilding our native

00:03:33,260 --> 00:03:38,540
applications with react native and

00:03:36,109 --> 00:03:42,049
that's obviously a huge amount of work

00:03:38,540 --> 00:03:45,319
and so we decided that our main

00:03:42,049 --> 00:03:47,060
strengths would be sharing of the code

00:03:45,319 --> 00:03:50,299
that we have already written on web and

00:03:47,060 --> 00:03:52,549
we had this idea of maybe being able to

00:03:50,299 --> 00:03:54,919
share your components a styling and

00:03:52,549 --> 00:03:57,349
business logic and from what I kind of

00:03:54,919 --> 00:03:59,329
knew about react native back then I

00:03:57,349 --> 00:04:02,150
assumed that we will be able to share

00:03:59,329 --> 00:04:04,730
your components that styling probably

00:04:02,150 --> 00:04:06,530
will be difficult to share and the

00:04:04,730 --> 00:04:09,019
business logic will be practically

00:04:06,530 --> 00:04:11,000
impossible because on a mobile you have

00:04:09,019 --> 00:04:13,129
like so many different hardware

00:04:11,000 --> 00:04:15,549
integration set cetera that probably

00:04:13,129 --> 00:04:18,320
would not be the case but I was

00:04:15,549 --> 00:04:22,310
absolutely wrong it was kind of the

00:04:18,320 --> 00:04:23,810
opposite and I will sort of explain to

00:04:22,310 --> 00:04:24,710
you how react native works really

00:04:23,810 --> 00:04:26,690
quickly

00:04:24,710 --> 00:04:29,210
because that's where I made like my

00:04:26,690 --> 00:04:32,770
assumption mistakes because I didn't

00:04:29,210 --> 00:04:35,270
realize what react native actually did

00:04:32,770 --> 00:04:36,740
so you've got your app that's your react

00:04:35,270 --> 00:04:38,539
app it looks pretty much like any other

00:04:36,740 --> 00:04:41,120
react code that you have ever seen and

00:04:38,539 --> 00:04:43,699
that sits in a JavaScript runtime it

00:04:41,120 --> 00:04:46,130
actually works in JavaScript it does not

00:04:43,699 --> 00:04:48,380
go compiled into native code it doesn't

00:04:46,130 --> 00:04:51,860
sit in the webview it actually is

00:04:48,380 --> 00:04:54,020
running in JavaScript and that sits in

00:04:51,860 --> 00:04:56,419
the native environment on the device and

00:04:54,020 --> 00:04:58,910
in order for the JavaScript read and the

00:04:56,419 --> 00:05:00,680
UI or native thread to be able to

00:04:58,910 --> 00:05:03,139
communicate there is a react native

00:05:00,680 --> 00:05:05,240
bridge which is essentially relatively

00:05:03,139 --> 00:05:07,430
thin layer that gets all your

00:05:05,240 --> 00:05:11,330
information from JavaScript threats to

00:05:07,430 --> 00:05:13,820
native and by the vice versa and so

00:05:11,330 --> 00:05:15,289
that's kind of where I made the

00:05:13,820 --> 00:05:16,820
assumption mistake I thought it would be

00:05:15,289 --> 00:05:18,830
compiled I thought it would sit in a

00:05:16,820 --> 00:05:23,479
webview but actually it's quite a

00:05:18,830 --> 00:05:25,490
strange hybrid system so what happens to

00:05:23,479 --> 00:05:28,430
our components when we try to render

00:05:25,490 --> 00:05:31,580
them how do I get from a normal react

00:05:28,430 --> 00:05:33,740
code like you're gonna see here see this

00:05:31,580 --> 00:05:37,400
they actually have seeing something on a

00:05:33,740 --> 00:05:39,800
mobile device well there's a little bit

00:05:37,400 --> 00:05:41,419
of a theory behind react that is quite

00:05:39,800 --> 00:05:44,360
simple you've got your app which is

00:05:41,419 --> 00:05:46,520
written in JSX and I get somehow

00:05:44,360 --> 00:05:48,830
transformed into a virtual tree during

00:05:46,520 --> 00:05:50,690
runtime which basically tells the

00:05:48,830 --> 00:05:52,370
application this is what it looks like

00:05:50,690 --> 00:05:53,780
this these are the components I want to

00:05:52,370 --> 00:05:56,630
render this is the state that they are

00:05:53,780 --> 00:06:00,080
in at the moment and then we take this

00:05:56,630 --> 00:06:02,120
blob of data essentially and can render

00:06:00,080 --> 00:06:04,159
it differently on different platforms we

00:06:02,120 --> 00:06:06,469
can render it in web we can render it on

00:06:04,159 --> 00:06:08,539
mobile platform so we can even control

00:06:06,469 --> 00:06:10,370
hardware with react if for some strange

00:06:08,539 --> 00:06:13,340
reason we decide that's a thing we want

00:06:10,370 --> 00:06:15,050
to do say I kind of thought well you

00:06:13,340 --> 00:06:16,729
know I can just write one thing and that

00:06:15,050 --> 00:06:20,419
will sort of somehow magically get

00:06:16,729 --> 00:06:22,940
transformed into the platforms and to

00:06:20,419 --> 00:06:24,380
link these two theories together you've

00:06:22,940 --> 00:06:26,810
got the app and JSX

00:06:24,380 --> 00:06:30,229
in the JavaScript runtime that gets

00:06:26,810 --> 00:06:32,779
translated and to treat this data set

00:06:30,229 --> 00:06:34,969
the react native bridge takes this data

00:06:32,779 --> 00:06:36,860
entrance transfers it into the native

00:06:34,969 --> 00:06:37,590
and the native bit decides how to render

00:06:36,860 --> 00:06:39,480
it

00:06:37,590 --> 00:06:41,130
and so I thought well we'll just write

00:06:39,480 --> 00:06:45,240
one thing and that all sort of magically

00:06:41,130 --> 00:06:47,310
gets transformed into the UI but it

00:06:45,240 --> 00:06:50,820
turns out that it's not that simple when

00:06:47,310 --> 00:06:52,889
it comes to composing UI when we think

00:06:50,820 --> 00:06:55,680
about normal web components we've got

00:06:52,889 --> 00:06:57,780
our spans and H ones and headers etc and

00:06:55,680 --> 00:07:00,120
all of these are basically based on the

00:06:57,780 --> 00:07:02,160
fact that web was originally designed as

00:07:00,120 --> 00:07:03,810
a document it was a page and the

00:07:02,160 --> 00:07:06,150
semantics were important

00:07:03,810 --> 00:07:07,919
it wasn't the interaction we original

00:07:06,150 --> 00:07:10,110
didn't have apps we just had simple

00:07:07,919 --> 00:07:14,370
pages that were built to transform

00:07:10,110 --> 00:07:17,370
transfer information whereas mobile

00:07:14,370 --> 00:07:19,830
applications who are designed to be

00:07:17,370 --> 00:07:22,800
interacted with so for example on the

00:07:19,830 --> 00:07:26,270
eius you can see that we've got UI views

00:07:22,800 --> 00:07:28,470
and buttons and sliders and labels and

00:07:26,270 --> 00:07:30,960
similarly on Android you've got a very

00:07:28,470 --> 00:07:32,520
similar set yet because those are two

00:07:30,960 --> 00:07:34,680
different platforms developed by two

00:07:32,520 --> 00:07:36,600
different companies they made different

00:07:34,680 --> 00:07:39,960
decisions when it came to implementing

00:07:36,600 --> 00:07:41,760
seasoned UX elements so for example on

00:07:39,960 --> 00:07:44,190
an iOS you have date picker that

00:07:41,760 --> 00:07:46,050
controls both date and time on Android

00:07:44,190 --> 00:07:49,020
you've got date and time picker

00:07:46,050 --> 00:07:50,370
separately and this introduces this like

00:07:49,020 --> 00:07:52,289
differences in platforms especially

00:07:50,370 --> 00:07:55,470
between web and mobile but also

00:07:52,289 --> 00:07:58,110
different mobile platforms it introduces

00:07:55,470 --> 00:08:00,660
this like weird bubble game of like how

00:07:58,110 --> 00:08:04,830
do I actually map one to the other

00:08:00,660 --> 00:08:07,260
what does let's say a div mean in mobile

00:08:04,830 --> 00:08:09,600
it's probably a view and the text would

00:08:07,260 --> 00:08:11,610
be a paragraph on web but there are a

00:08:09,600 --> 00:08:13,919
lot of components are just not easily

00:08:11,610 --> 00:08:15,780
transferable from one to the other for

00:08:13,919 --> 00:08:18,240
example if I have a chat one how do I

00:08:15,780 --> 00:08:20,639
decide how I should render it in react

00:08:18,240 --> 00:08:23,370
native is it some kind of text with

00:08:20,639 --> 00:08:25,530
extra styling am i losing some semantics

00:08:23,370 --> 00:08:27,419
of meaning here how do I work with

00:08:25,530 --> 00:08:29,940
accessibility there are a lot of

00:08:27,419 --> 00:08:32,250
questions that suddenly arise and so

00:08:29,940 --> 00:08:35,490
it's not impossible to figure out how to

00:08:32,250 --> 00:08:38,669
transfer one from one from web to mobile

00:08:35,490 --> 00:08:40,320
and vice versa but it is a decision you

00:08:38,669 --> 00:08:41,880
as a company need to make what do I

00:08:40,320 --> 00:08:44,339
actually want this to mean on the other

00:08:41,880 --> 00:08:46,170
platform and so it makes sense that

00:08:44,339 --> 00:08:49,649
react native actually could not decide

00:08:46,170 --> 00:08:51,269
that for us I said it's kind of us

00:08:49,649 --> 00:08:52,589
that causes a lot of headaches we

00:08:51,269 --> 00:08:54,660
originally thought it will just write

00:08:52,589 --> 00:08:56,369
everything once and then we somehow

00:08:54,660 --> 00:08:58,069
transfer it to the other platform and

00:08:56,369 --> 00:09:00,689
that just did not happen

00:08:58,069 --> 00:09:04,259
there are obviously solutions that try

00:09:00,689 --> 00:09:06,360
to achieve this the most prominent one

00:09:04,259 --> 00:09:08,519
is react native web which is a library

00:09:06,360 --> 00:09:11,009
that is by the way used by Twitter and

00:09:08,519 --> 00:09:14,100
quite a few you know like large projects

00:09:11,009 --> 00:09:16,709
but they only cover about 70% of

00:09:14,100 --> 00:09:17,790
components at the moment so you'd kind

00:09:16,709 --> 00:09:19,439
of need to pick and choose what you

00:09:17,790 --> 00:09:20,249
actually want to write in order for it

00:09:19,439 --> 00:09:22,199
to work

00:09:20,249 --> 00:09:25,800
to be able to transfer your react native

00:09:22,199 --> 00:09:28,199
code into web but also we felt like this

00:09:25,800 --> 00:09:30,449
may be as I mentioned you know like it's

00:09:28,199 --> 00:09:33,779
it's difficult to know how to transfer

00:09:30,449 --> 00:09:35,699
one from from web to react native and

00:09:33,779 --> 00:09:37,379
vice versa and we didn't want a

00:09:35,699 --> 00:09:39,660
different company to make the decision

00:09:37,379 --> 00:09:41,959
for us we wanted to have the freedom to

00:09:39,660 --> 00:09:45,290
make our own choices

00:09:41,959 --> 00:09:47,040
there's also react XP which is done by

00:09:45,290 --> 00:09:48,929
by Microsoft

00:09:47,040 --> 00:09:50,429
but since Microsoft is kind of pushing

00:09:48,929 --> 00:09:53,220
for samurai and we were quite unsure

00:09:50,429 --> 00:09:55,110
about where that project is heading so

00:09:53,220 --> 00:09:57,600
we kind of decided to take it away from

00:09:55,110 --> 00:10:00,839
that and simply rewrite all our

00:09:57,600 --> 00:10:02,509
components ourselves so there is not

00:10:00,839 --> 00:10:04,889
much coaching going on there for sure

00:10:02,509 --> 00:10:07,709
but there are some edge cases which

00:10:04,889 --> 00:10:11,459
allowed us to share code between the two

00:10:07,709 --> 00:10:14,639
platforms and one would be like logical

00:10:11,459 --> 00:10:16,649
components where you basically are not

00:10:14,639 --> 00:10:19,290
rendering any sort of end components

00:10:16,649 --> 00:10:21,839
you're just sort of deciding some sort

00:10:19,290 --> 00:10:23,639
of minor logic around your components so

00:10:21,839 --> 00:10:25,499
in our particular case we have a

00:10:23,639 --> 00:10:27,120
conditional feature component which

00:10:25,499 --> 00:10:29,579
essentially just renders things based on

00:10:27,120 --> 00:10:31,199
feature flags and here you can see that

00:10:29,579 --> 00:10:33,600
it just checks whether it should render

00:10:31,199 --> 00:10:35,639
something and if if it should it just

00:10:33,600 --> 00:10:37,410
takes the children components and

00:10:35,639 --> 00:10:39,749
renders them otherwise it doesn't render

00:10:37,410 --> 00:10:41,939
anything in this case it doesn't matter

00:10:39,749 --> 00:10:43,920
if it's web or react native components

00:10:41,939 --> 00:10:48,269
because it does not actually care about

00:10:43,920 --> 00:10:50,189
it similarly there is a bit of a hack

00:10:48,269 --> 00:10:53,249
that you can use in order to render

00:10:50,189 --> 00:10:56,279
components correctly and that is passive

00:10:53,249 --> 00:10:58,799
and components as props so you can have

00:10:56,279 --> 00:11:00,749
a sort of higher-level component that

00:10:58,799 --> 00:11:03,240
just says I will render something out

00:11:00,749 --> 00:11:06,149
and in props they will tell me what

00:11:03,240 --> 00:11:08,459
ponens these children will be we

00:11:06,149 --> 00:11:10,290
wouldn't actually use them like widely

00:11:08,459 --> 00:11:13,830
because it's a bit of a weird approach

00:11:10,290 --> 00:11:15,540
but it works so well for SVG's scg's are

00:11:13,830 --> 00:11:17,880
amazing they're the I think they are the

00:11:15,540 --> 00:11:21,720
best way of doing assets especially on

00:11:17,880 --> 00:11:24,270
web but SVG's are essentially XML they

00:11:21,720 --> 00:11:26,760
are some kind of HTML code at the end of

00:11:24,270 --> 00:11:28,649
the day and there are libraries and

00:11:26,760 --> 00:11:32,130
react native to work with them but you

00:11:28,649 --> 00:11:34,709
need to tell react native how to

00:11:32,130 --> 00:11:37,470
actually render SVG so we took all our

00:11:34,709 --> 00:11:41,010
icons we transform them into super

00:11:37,470 --> 00:11:42,899
simple components and transformed all of

00:11:41,010 --> 00:11:45,240
the tags until I capital letters and

00:11:42,899 --> 00:11:49,320
then we just inject the right components

00:11:45,240 --> 00:11:51,630
into all our SVG's and then we have a

00:11:49,320 --> 00:11:54,510
map like this this is our web map where

00:11:51,630 --> 00:11:57,450
it says when you see an SVG or a G or a

00:11:54,510 --> 00:12:00,540
path rendered this component instead of

00:11:57,450 --> 00:12:03,000
it say there is kind of a way of

00:12:00,540 --> 00:12:05,430
injecting things so that you can reuse

00:12:03,000 --> 00:12:07,350
components but we decided to use a

00:12:05,430 --> 00:12:08,760
minimally at least for the moment

00:12:07,350 --> 00:12:11,940
because we weren't quite sure what it

00:12:08,760 --> 00:12:17,760
will do on a larger scale and so the

00:12:11,940 --> 00:12:20,540
TLDR of the solution is and then the

00:12:17,760 --> 00:12:22,620
next section would be styling and

00:12:20,540 --> 00:12:24,810
styling is a bit of a weird one because

00:12:22,620 --> 00:12:27,300
if you ever worked with Android or Swift

00:12:24,810 --> 00:12:30,510
you would know that styling and mobile

00:12:27,300 --> 00:12:32,520
is so different from web because they

00:12:30,510 --> 00:12:33,990
fortunately don't have CSS they don't

00:12:32,520 --> 00:12:35,310
have to actually face that actual then

00:12:33,990 --> 00:12:38,370
there is one person in the audience who

00:12:35,310 --> 00:12:41,790
does like CS all there are quite a few

00:12:38,370 --> 00:12:43,770
there you go three oh wow

00:12:41,790 --> 00:12:46,560
Bella's faces vast majority of people

00:12:43,770 --> 00:12:49,920
just doesn't want to deal with CSS yet

00:12:46,560 --> 00:12:52,529
react native is using CSS in order to

00:12:49,920 --> 00:12:54,930
style things which in a way is bad

00:12:52,529 --> 00:12:58,589
because I personally would not want to

00:12:54,930 --> 00:13:00,180
deal with CSS but it allows us to reuse

00:12:58,589 --> 00:13:03,510
code and we don't actually need to learn

00:13:00,180 --> 00:13:06,000
your kind of styling and say the

00:13:03,510 --> 00:13:09,149
original react negative way of going

00:13:06,000 --> 00:13:11,160
around this is simply using CSS and J's

00:13:09,149 --> 00:13:15,330
so you can see that the CSS at the

00:13:11,160 --> 00:13:18,330
bottom is an object it is all

00:13:15,330 --> 00:13:20,490
camelcase it's not kebab case there are

00:13:18,330 --> 00:13:23,730
some witnesses and Rijeka negatives such

00:13:20,490 --> 00:13:25,980
as they didn't use units everything is

00:13:23,730 --> 00:13:28,080
flexed by default and everything is

00:13:25,980 --> 00:13:30,930
flexing to a colon behind it it's a bit

00:13:28,080 --> 00:13:33,390
weird but at the end of the day it is

00:13:30,930 --> 00:13:37,850
kind of like CSS but not quite like CSS

00:13:33,390 --> 00:13:40,620
and that kind of posed a problem for us

00:13:37,850 --> 00:13:42,839
fortunately we were using start

00:13:40,620 --> 00:13:45,149
components on web already and they also

00:13:42,839 --> 00:13:48,060
have a react native version so you can

00:13:45,149 --> 00:13:50,430
just take whatever steps you have in web

00:13:48,060 --> 00:13:52,680
and kind of just use them in react

00:13:50,430 --> 00:13:54,990
native stuff components are quite clever

00:13:52,680 --> 00:13:56,760
they can strip out all the units from

00:13:54,990 --> 00:13:58,860
all your you know all the pixels and

00:13:56,760 --> 00:14:01,020
points that you might have it's all

00:13:58,860 --> 00:14:04,020
stripped out and just uses the number

00:14:01,020 --> 00:14:08,850
value and it allows you to just write

00:14:04,020 --> 00:14:11,880
normal CSS as a text and but there are

00:14:08,850 --> 00:14:13,950
still some edge cases such as you still

00:14:11,880 --> 00:14:15,959
need to use elevation on Android instead

00:14:13,950 --> 00:14:18,360
of that index etc so there are certain

00:14:15,959 --> 00:14:22,620
amount of things we still have to

00:14:18,360 --> 00:14:27,270
specify for for react native the huge

00:14:22,620 --> 00:14:29,430
amount of cells can be reused and our

00:14:27,270 --> 00:14:31,770
design team was absolutely amazing when

00:14:29,430 --> 00:14:34,500
we started developing react native they

00:14:31,770 --> 00:14:38,010
developed a whole design system to help

00:14:34,500 --> 00:14:40,529
us with this transformation and it's

00:14:38,010 --> 00:14:42,510
like a know this Alstyne style guide in

00:14:40,529 --> 00:14:44,790
many ways you've got your colors defined

00:14:42,510 --> 00:14:48,720
and all your space is defined and font

00:14:44,790 --> 00:14:52,760
sizes stuff but they also defined every

00:14:48,720 --> 00:14:55,649
single screen basically as like a Lego

00:14:52,760 --> 00:14:58,230
screen you can just take building blocks

00:14:55,649 --> 00:15:01,620
of these blocks are defined on some sort

00:14:58,230 --> 00:15:03,899
of minor level and then we can just use

00:15:01,620 --> 00:15:07,200
them sort of drop them into screens

00:15:03,899 --> 00:15:09,839
which makes it so easy for us to work

00:15:07,200 --> 00:15:13,910
with it and we all absurdly love it and

00:15:09,839 --> 00:15:16,440
it allows us to just take I don't know

00:15:13,910 --> 00:15:18,089
variables and and all kinds of things

00:15:16,440 --> 00:15:20,760
and just sort of like drop them into you

00:15:18,089 --> 00:15:24,690
into react native and it just works and

00:15:20,760 --> 00:15:26,900
it's so nice to work with so the answer

00:15:24,690 --> 00:15:28,910
for styling is we can kind of reuse it

00:15:26,900 --> 00:15:30,440
we can reuse it to a huge degree but

00:15:28,910 --> 00:15:32,900
there are things that we still need to

00:15:30,440 --> 00:15:37,040
extend start components helped a lot

00:15:32,900 --> 00:15:39,080
with this and then last but not least

00:15:37,040 --> 00:15:41,029
there is business logic as I said I

00:15:39,080 --> 00:15:44,510
originally thought that would not be

00:15:41,029 --> 00:15:47,330
reusable at all because simply native is

00:15:44,510 --> 00:15:50,690
quite different from web but it turns

00:15:47,330 --> 00:15:52,250
out that we still have the native and

00:15:50,690 --> 00:15:55,040
the JavaScript bit when it comes to

00:15:52,250 --> 00:15:56,540
react native and in terms of native you

00:15:55,040 --> 00:16:00,020
still have to do your hardware

00:15:56,540 --> 00:16:01,880
integrations and use the native SDKs but

00:16:00,020 --> 00:16:03,740
then you can reuse all of your

00:16:01,880 --> 00:16:05,779
JavaScript bits because it just sits in

00:16:03,740 --> 00:16:07,610
a JavaScript runtime you can use

00:16:05,779 --> 00:16:12,040
whatever is written in JavaScript for

00:16:07,610 --> 00:16:15,560
your application and just use it so we

00:16:12,040 --> 00:16:19,250
take our reader we are using sagas or

00:16:15,560 --> 00:16:21,140
saga actions reduces selectors that we

00:16:19,250 --> 00:16:22,760
can reuse and it's a huge help because

00:16:21,140 --> 00:16:25,540
we don't have to define business logic

00:16:22,760 --> 00:16:28,339
again everything is already there

00:16:25,540 --> 00:16:30,560
similarly we can use translations so all

00:16:28,339 --> 00:16:32,630
our translations set up and store and

00:16:30,560 --> 00:16:34,820
and everything we've got offing six or

00:16:32,630 --> 00:16:37,670
seven different localizations all of

00:16:34,820 --> 00:16:39,770
that is pretty much just minimal set up

00:16:37,670 --> 00:16:42,110
and everything just works which is so

00:16:39,770 --> 00:16:44,390
nice and when it comes to hardware

00:16:42,110 --> 00:16:46,310
integrations and native SDKs it turns

00:16:44,390 --> 00:16:48,770
out that although react native is quite

00:16:46,310 --> 00:16:51,980
young it already has all these bridges

00:16:48,770 --> 00:16:54,740
built so I don't think that we actually

00:16:51,980 --> 00:16:56,779
had to do anything at all maybe like a

00:16:54,740 --> 00:16:59,060
little bit of integration for camera but

00:16:56,779 --> 00:17:01,339
we did very little work on the actual

00:16:59,060 --> 00:17:04,939
native side because it's already build

00:17:01,339 --> 00:17:07,579
by other people and so when it comes to

00:17:04,939 --> 00:17:09,260
actually writing code for our react

00:17:07,579 --> 00:17:11,600
native application we spent a vast

00:17:09,260 --> 00:17:13,370
majority of time on components and

00:17:11,600 --> 00:17:14,959
styles especially on components because

00:17:13,370 --> 00:17:17,750
we essentially have to rebuild the whole

00:17:14,959 --> 00:17:19,370
UI but we can reuse styles to a certain

00:17:17,750 --> 00:17:22,160
degree which is already quite helpful

00:17:19,370 --> 00:17:23,780
and it helps us to keep the the apps

00:17:22,160 --> 00:17:26,390
consistent because since we're reusing

00:17:23,780 --> 00:17:28,520
Styles it helps you although we are

00:17:26,390 --> 00:17:32,210
building different UI it helps you keep

00:17:28,520 --> 00:17:33,860
it the look and feel the same when it

00:17:32,210 --> 00:17:36,070
comes to business logic we write very

00:17:33,860 --> 00:17:38,480
small amount as I mentioned already

00:17:36,070 --> 00:17:39,950
essentially it's all just moving our

00:17:38,480 --> 00:17:41,870
existing business logic

00:17:39,950 --> 00:17:44,240
into like a shed folder and that's

00:17:41,870 --> 00:17:46,310
pretty much it and that's a tiny tiny

00:17:44,240 --> 00:17:47,840
amount of native work which is usually

00:17:46,310 --> 00:17:50,360
done by those two or three people on our

00:17:47,840 --> 00:17:52,130
team can actually code native and the

00:17:50,360 --> 00:17:56,540
rest of us can like safely stay in the

00:17:52,130 --> 00:17:58,640
JavaScript world and just to sum up we

00:17:56,540 --> 00:18:00,590
can't reuse UI components kind of

00:17:58,640 --> 00:18:02,120
styling but we can reuse business logic

00:18:00,590 --> 00:18:06,710
and that is the biggest strength of

00:18:02,120 --> 00:18:11,210
react native for us so it's all good and

00:18:06,710 --> 00:18:13,730
we're all very happy kind of and just a

00:18:11,210 --> 00:18:15,710
tiny tiny bit on sharing the code like I

00:18:13,730 --> 00:18:17,300
talked about what we can share but I

00:18:15,710 --> 00:18:20,180
didn't really say how do we actually do

00:18:17,300 --> 00:18:22,490
it so there are several approaches that

00:18:20,180 --> 00:18:24,110
we all considered the most

00:18:22,490 --> 00:18:26,000
straightforward one would be a mono repo

00:18:24,110 --> 00:18:29,540
where you just pop everything into the

00:18:26,000 --> 00:18:33,230
same rip as a tree and then just require

00:18:29,540 --> 00:18:35,360
things from different folders and then

00:18:33,230 --> 00:18:36,920
we would have like multiple reposes the

00:18:35,360 --> 00:18:38,750
different there's the other approach and

00:18:36,920 --> 00:18:40,400
then share them either using node

00:18:38,750 --> 00:18:43,280
modules or some kind of similar

00:18:40,400 --> 00:18:45,710
repository sharing or a custom solution

00:18:43,280 --> 00:18:48,260
and we actually want for the custom

00:18:45,710 --> 00:18:50,930
solution for very strange reasons around

00:18:48,260 --> 00:18:53,540
we have to use this CI not that CI at

00:18:50,930 --> 00:18:55,520
the moment but we're very desperately

00:18:53,540 --> 00:18:57,530
trying to move to mono repo so maybe

00:18:55,520 --> 00:18:59,900
ignore what we did and just use mono

00:18:57,530 --> 00:19:04,730
repos the only problem with a mono repo

00:18:59,900 --> 00:19:08,000
is that there is no existing good CI

00:19:04,730 --> 00:19:10,040
solution for them actually read today

00:19:08,000 --> 00:19:12,770
that sale ci launched like a nice mono

00:19:10,040 --> 00:19:14,960
repo support but apart from that like

00:19:12,770 --> 00:19:16,490
the psycho CI and Robert Jenkins they

00:19:14,960 --> 00:19:18,230
just don't have this out of the box and

00:19:16,490 --> 00:19:20,840
you would essentially need to write your

00:19:18,230 --> 00:19:22,430
own CI implementation and we just did

00:19:20,840 --> 00:19:23,900
not have the resources at the time but

00:19:22,430 --> 00:19:28,370
it's definitely something that we want

00:19:23,900 --> 00:19:30,320
to invest in t say we are in a good

00:19:28,370 --> 00:19:32,450
place with our react native application

00:19:30,320 --> 00:19:35,510
we have just launched it to the first

00:19:32,450 --> 00:19:37,430
15,000 customers and it looks quite good

00:19:35,510 --> 00:19:39,080
that's a screenshot from Android phone

00:19:37,430 --> 00:19:41,750
and it actually looks like a decent

00:19:39,080 --> 00:19:44,360
application and we've had some order

00:19:41,750 --> 00:19:46,400
like first feedback my favorite is this

00:19:44,360 --> 00:19:48,080
is a very easy note to navigate app I

00:19:46,400 --> 00:19:50,630
have found it much clearer than the old

00:19:48,080 --> 00:19:51,980
app and there's a great con for us

00:19:50,630 --> 00:19:53,750
because we were literally half we're

00:19:51,980 --> 00:19:55,880
developing this and being already

00:19:53,750 --> 00:19:57,860
but it will all blow up and then someone

00:19:55,880 --> 00:19:59,540
actually really liked it and then we had

00:19:57,860 --> 00:20:02,510
another comment just this morning saying

00:19:59,540 --> 00:20:04,190
I don't see the difference and I was

00:20:02,510 --> 00:20:06,260
like that's brilliant we actually built

00:20:04,190 --> 00:20:07,910
something in JavaScript and you just

00:20:06,260 --> 00:20:11,180
can't tell the difference between native

00:20:07,910 --> 00:20:12,230
apps and this JavaScript app so from

00:20:11,180 --> 00:20:13,880
that respect I think that was our

00:20:12,230 --> 00:20:16,700
biggest fear it was like how will this

00:20:13,880 --> 00:20:18,590
actually work in the end and it turns

00:20:16,700 --> 00:20:22,730
out that the users really liked it and

00:20:18,590 --> 00:20:24,350
that's that's the best see yeah we're

00:20:22,730 --> 00:20:26,750
very happy we're launching to our

00:20:24,350 --> 00:20:30,590
million customers sometime this month

00:20:26,750 --> 00:20:32,070
and things are going really well thank

00:20:30,590 --> 00:20:38,060
you very much

00:20:32,070 --> 00:20:38,060

YouTube URL: https://www.youtube.com/watch?v=uTG267EqL48


