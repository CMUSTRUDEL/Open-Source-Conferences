Title: Serverless Payments in JS at MADE.com and Veygo - JS Roundabout - March 2019
Publication date: 2019-03-12
Playlist: The JS Roundabout
Description: 
	Serverless Payments in JS at MADE.com and Veygo - Quick deployment of payment microservices using AWS Lambdas and Lambda Layers

Rob Cronin of Theodo

A brief introduction to the Serverless framework and will demo creating a brand new JS lambda running on AWS in 3 commands.

It will cover the new AWS Lambda Layer feature to show how to share commonly used code across your different lambdas.

Finally, it will discuss some real examples of how lambdas is used to create payment microservices with Stripe in node.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,130
so my name is Rob I'm gonna be talking

00:00:02,250 --> 00:00:07,470
about service payments in JavaScript at

00:00:05,130 --> 00:00:09,870
a made dark home in Vega it's there to

00:00:07,470 --> 00:00:11,580
two companies of work where recently I'm

00:00:09,870 --> 00:00:12,840
gonna kind of build up to that so

00:00:11,580 --> 00:00:14,400
initially I'm going to talk about ad bus

00:00:12,840 --> 00:00:17,420
lambdas and how you can use lambda

00:00:14,400 --> 00:00:20,070
layers to create your own micro services

00:00:17,420 --> 00:00:22,529
so I work for a Theo de which is a kind

00:00:20,070 --> 00:00:23,760
of software consultancy firm working

00:00:22,529 --> 00:00:25,949
with clients to try and solve their

00:00:23,760 --> 00:00:28,500
problems solve their business problems

00:00:25,949 --> 00:00:30,689
and JavaScript up my main building react

00:00:28,500 --> 00:00:33,960
web apps react native ups or in more

00:00:30,689 --> 00:00:35,010
recent times and nodejs lambdas and so

00:00:33,960 --> 00:00:38,910
I'm going to show a few links thread

00:00:35,010 --> 00:00:40,320
slides links to repos articles with

00:00:38,910 --> 00:00:42,210
slides when we found out slides comm

00:00:40,320 --> 00:00:44,700
slash Rob Cronin if you want to see the

00:00:42,210 --> 00:00:45,899
links at the end so quick summary what

00:00:44,700 --> 00:00:48,360
I'm gonna be talking about I'll give a

00:00:45,899 --> 00:00:51,059
quick intro into lambdas and service and

00:00:48,360 --> 00:00:53,520
how we deploy them and give a quick demo

00:00:51,059 --> 00:00:56,520
just to show how quick and easy it is to

00:00:53,520 --> 00:00:58,199
deploy the local development experience

00:00:56,520 --> 00:00:59,910
it's quite nice then I'm gonna talk

00:00:58,199 --> 00:01:02,250
about a few years use cases we've had on

00:00:59,910 --> 00:01:05,220
theater projects and show how we've used

00:01:02,250 --> 00:01:06,570
lambdas to solve different issues that's

00:01:05,220 --> 00:01:07,920
going to build into lambda layers which

00:01:06,570 --> 00:01:11,430
is something that was released by DBS

00:01:07,920 --> 00:01:13,200
kind of November 2018 so that solves

00:01:11,430 --> 00:01:14,520
that gives you three different ways of

00:01:13,200 --> 00:01:16,320
using layers I'm going to talk about one

00:01:14,520 --> 00:01:17,909
of them in particular and then I'm going

00:01:16,320 --> 00:01:19,229
to build into the payment services and

00:01:17,909 --> 00:01:22,049
then finish up maybe talking about the

00:01:19,229 --> 00:01:23,729
pros and cons of using Alumnus so first

00:01:22,049 --> 00:01:25,710
of all just if you're not familiar if

00:01:23,729 --> 00:01:27,930
you want a quick refresher an IDs

00:01:25,710 --> 00:01:29,670
alarmed allergy to not think about

00:01:27,930 --> 00:01:31,740
servers and only pay for the compute

00:01:29,670 --> 00:01:33,869
time that you use so you don't have a

00:01:31,740 --> 00:01:35,100
server running 24 hours you just paid

00:01:33,869 --> 00:01:38,070
for the code that you want to use when

00:01:35,100 --> 00:01:39,210
the customer calls it anywhere deals

00:01:38,070 --> 00:01:40,970
with all the scaling issues you don't

00:01:39,210 --> 00:01:43,079
have to worry about load balancers

00:01:40,970 --> 00:01:44,970
creates new instances of your function

00:01:43,079 --> 00:01:47,250
as and when you need them and compared

00:01:44,970 --> 00:01:50,490
to service it's quite cheap so if you

00:01:47,250 --> 00:01:51,960
look at the pricing even after first 12

00:01:50,490 --> 00:01:53,970
months you're still you can still use

00:01:51,960 --> 00:01:55,409
the free tier got a million quest for

00:01:53,970 --> 00:01:57,810
free he got a certain amount of memory

00:01:55,409 --> 00:02:01,590
for free paid services it's a lot

00:01:57,810 --> 00:02:03,450
cheaper so basically the benefits of its

00:02:01,590 --> 00:02:04,860
ready to run launches new copies as you

00:02:03,450 --> 00:02:06,570
need it and something I'll talk about

00:02:04,860 --> 00:02:08,729
the end is kind of how you get logging

00:02:06,570 --> 00:02:10,770
kind of for free you just do console log

00:02:08,729 --> 00:02:13,480
and JavaScript and it streams them to a

00:02:10,770 --> 00:02:17,290
log log stream for you

00:02:13,480 --> 00:02:19,300
so the way we have used to deploy them

00:02:17,290 --> 00:02:22,570
is using the service framework so this

00:02:19,300 --> 00:02:25,630
is a command-line interface allowing you

00:02:22,570 --> 00:02:27,460
to well this is a NPM library but allows

00:02:25,630 --> 00:02:28,810
you to build deploy update and delete

00:02:27,460 --> 00:02:30,700
your lambdas from the command line or

00:02:28,810 --> 00:02:33,850
even on your CI so if you're using

00:02:30,700 --> 00:02:36,130
circle Travis Jenkins it can just deploy

00:02:33,850 --> 00:02:40,540
in one command so service deploy server

00:02:36,130 --> 00:02:42,520
let's remove etc it gives you the option

00:02:40,540 --> 00:02:45,310
to deploy straight away with a minimal

00:02:42,520 --> 00:02:47,470
configuration or go to the extent of

00:02:45,310 --> 00:02:49,420
tweaking everything in the address

00:02:47,470 --> 00:02:51,550
console if you want to which is nice you

00:02:49,420 --> 00:02:53,320
don't have to worry about developers

00:02:51,550 --> 00:02:56,230
changing things in the console it's all

00:02:53,320 --> 00:02:57,940
on the code um so quickly I'm going to

00:02:56,230 --> 00:03:00,730
show a quick deployment of a HelloWorld

00:02:57,940 --> 00:03:04,209
lamina so server lists the library gives

00:03:00,730 --> 00:03:07,060
you a few templates so for node eight it

00:03:04,209 --> 00:03:09,100
gives you a template for that but then

00:03:07,060 --> 00:03:11,350
there's also some github repos that give

00:03:09,100 --> 00:03:12,820
a nice kind of more extended template

00:03:11,350 --> 00:03:15,160
that could be a few things out of the

00:03:12,820 --> 00:03:17,769
box I was using one for a while that

00:03:15,160 --> 00:03:19,989
gave you web pick web config so you can

00:03:17,769 --> 00:03:21,430
use the more modern syntax and then I

00:03:19,989 --> 00:03:22,660
just kind of built one on top of that to

00:03:21,430 --> 00:03:25,090
add a few things that I was always

00:03:22,660 --> 00:03:26,980
adding giving a Babel seven support

00:03:25,090 --> 00:03:29,080
adding like a linter and prettier and

00:03:26,980 --> 00:03:31,440
but basically you can use any of the

00:03:29,080 --> 00:03:34,090
templates or other people's github repos

00:03:31,440 --> 00:03:36,430
so this SLS is short for server lists

00:03:34,090 --> 00:03:37,900
you can store with a URL the points then

00:03:36,430 --> 00:03:40,140
you get a repo or you can give it a

00:03:37,900 --> 00:03:43,989
template name that server just give you

00:03:40,140 --> 00:03:44,940
so quickly we can deploy this come on go

00:03:43,989 --> 00:03:47,350
to terminal

00:03:44,940 --> 00:03:49,330
we can run this and basically what it

00:03:47,350 --> 00:03:51,610
does is a git clone it pulls the the

00:03:49,330 --> 00:03:54,459
gate of repo and just create your folder

00:03:51,610 --> 00:03:56,560
for you if we go to hello world we can

00:03:54,459 --> 00:03:57,910
use yarn to install it penalty's from

00:03:56,560 --> 00:04:00,160
the template there's actually only two

00:03:57,910 --> 00:04:02,799
non dev dependencies which are to do it

00:04:00,160 --> 00:04:05,680
be able to allow you to run too late to

00:04:02,799 --> 00:04:07,959
use them more on in syntax and after

00:04:05,680 --> 00:04:10,510
that I can deploy straight away I can

00:04:07,959 --> 00:04:13,000
run yarn deploy which is an alias for

00:04:10,510 --> 00:04:14,500
server list deploy and that's all that's

00:04:13,000 --> 00:04:15,250
needed to deploy this template which is

00:04:14,500 --> 00:04:17,620
a hello world

00:04:15,250 --> 00:04:18,910
the first deploy takes about 90 seconds

00:04:17,620 --> 00:04:21,520
and all the subsequent deploys take

00:04:18,910 --> 00:04:22,510
about 30 seconds after that that's what

00:04:21,520 --> 00:04:25,750
it's running I'm just going to quickly

00:04:22,510 --> 00:04:26,680
talk about what's happening so first of

00:04:25,750 --> 00:04:28,630
all I've had to link

00:04:26,680 --> 00:04:31,240
to an 80s account of course it's not

00:04:28,630 --> 00:04:33,100
just going to deploy anywhere so if

00:04:31,240 --> 00:04:35,650
you're used to a West you can get these

00:04:33,100 --> 00:04:36,789
access keys and secret access keys if

00:04:35,650 --> 00:04:38,860
you're just playing around with it you

00:04:36,789 --> 00:04:39,580
can use your root account and then

00:04:38,860 --> 00:04:42,039
obviously when you go into production

00:04:39,580 --> 00:04:43,330
you can create an RM roll what you're

00:04:42,039 --> 00:04:45,370
going for not you say yes it's just a

00:04:43,330 --> 00:04:47,650
way of creating user giving it specific

00:04:45,370 --> 00:04:50,050
permissions this allows you to just this

00:04:47,650 --> 00:04:51,970
is kind of a minimal set up I just put

00:04:50,050 --> 00:04:53,800
it there for the sake of filling the

00:04:51,970 --> 00:04:56,370
screen but it's the minimum set up that

00:04:53,800 --> 00:04:58,960
will get you a HelloWorld deployment and

00:04:56,370 --> 00:05:01,030
so that goes at the home directory of

00:04:58,960 --> 00:05:02,710
your system or if you're using say

00:05:01,030 --> 00:05:07,000
circle you can add the credentials

00:05:02,710 --> 00:05:09,940
directly in the settings there so that

00:05:07,000 --> 00:05:11,440
that's pointing to my ad bootcamp so

00:05:09,940 --> 00:05:13,240
when I run service deploy I'll pick up

00:05:11,440 --> 00:05:17,289
those credentials and deploy to that

00:05:13,240 --> 00:05:19,509
account the actual configuration so tell

00:05:17,289 --> 00:05:21,820
making it actually deploy in the way

00:05:19,509 --> 00:05:24,580
that I wanted to do is use several

00:05:21,820 --> 00:05:26,110
estamos so this is your config file this

00:05:24,580 --> 00:05:28,150
is a very minimal setup that will get us

00:05:26,110 --> 00:05:30,190
the HelloWorld one at the bottom I have

00:05:28,150 --> 00:05:31,690
a link to the service Docs where you can

00:05:30,190 --> 00:05:34,510
tweak basically all the settings in

00:05:31,690 --> 00:05:36,490
nativist console that you'd need to and

00:05:34,510 --> 00:05:38,710
so running through this I'm saying the

00:05:36,490 --> 00:05:40,419
service name is hello world I'm using a

00:05:38,710 --> 00:05:42,550
plug-in to allow me to use web bar and

00:05:40,419 --> 00:05:45,220
I've specified a web pack config which

00:05:42,550 --> 00:05:46,479
came from the template in the provider

00:05:45,220 --> 00:05:48,760
you can give it a name of her provider

00:05:46,479 --> 00:05:51,130
I've mostly always used address but it

00:05:48,760 --> 00:05:55,360
gives support for for all the other

00:05:51,130 --> 00:05:57,669
providers I'm using the node 8 runtime

00:05:55,360 --> 00:05:59,830
and this is my development stage we can

00:05:57,669 --> 00:06:02,050
give it a staging or production and then

00:05:59,830 --> 00:06:04,870
you can specify your region so the

00:06:02,050 --> 00:06:06,520
actual lambdas go under the functions so

00:06:04,870 --> 00:06:07,030
you can declare as many function as you

00:06:06,520 --> 00:06:09,639
want here

00:06:07,030 --> 00:06:11,320
I'm just declaring one for hello the

00:06:09,639 --> 00:06:13,810
handler is where the code lives which is

00:06:11,320 --> 00:06:15,520
an inert file hello function and then

00:06:13,810 --> 00:06:17,889
the event is what actually triggers the

00:06:15,520 --> 00:06:19,389
lambda so in this case I want it to be

00:06:17,889 --> 00:06:22,960
able to trigger it from an HP request

00:06:19,389 --> 00:06:25,000
get request to slash hello so that's the

00:06:22,960 --> 00:06:26,710
minimal configuration if we go back to

00:06:25,000 --> 00:06:28,030
the terminal it should have deployed so

00:06:26,710 --> 00:06:30,849
you can see here it took about 85

00:06:28,030 --> 00:06:32,949
seconds for the initial deploy if we run

00:06:30,849 --> 00:06:35,469
through what that's done for us it's

00:06:32,949 --> 00:06:39,520
bundled my code where webpack it's then

00:06:35,469 --> 00:06:40,540
created a stack on a dress which is an

00:06:39,520 --> 00:06:43,600
ad where service it's

00:06:40,540 --> 00:06:46,410
called cloud formation service creates

00:06:43,600 --> 00:06:49,870
the here the cloud formation file

00:06:46,410 --> 00:06:52,150
uploads at s3 and cloud formation is an

00:06:49,870 --> 00:06:54,370
infrastructure as a service you can just

00:06:52,150 --> 00:06:57,280
you can declare what you want in a text

00:06:54,370 --> 00:06:58,870
file for the sake of a lambda it creates

00:06:57,280 --> 00:07:01,870
five things where you creates the actual

00:06:58,870 --> 00:07:03,820
lambda the s3 bucket store the code and

00:07:01,870 --> 00:07:06,960
I am role to give permissions to your

00:07:03,820 --> 00:07:16,180
laminate one mic just go it's still good

00:07:06,960 --> 00:07:18,400
can you guys still hear me I'm not sure

00:07:16,180 --> 00:07:21,490
what's gone I can speak lab I don't know

00:07:18,400 --> 00:07:23,020
if people can hear me at the back so

00:07:21,490 --> 00:07:24,670
yeah the CloudFormation far is going to

00:07:23,020 --> 00:07:26,350
create the lambda for you it's going to

00:07:24,670 --> 00:07:27,850
create an s3 bucket it's going to create

00:07:26,350 --> 00:07:30,340
the I am role to declare the permissions

00:07:27,850 --> 00:07:32,770
for the lambda it's going to create a

00:07:30,340 --> 00:07:34,540
logging service for you and it's also

00:07:32,770 --> 00:07:37,360
going to create a it's going to set up

00:07:34,540 --> 00:07:40,060
the API gateway for you which is another

00:07:37,360 --> 00:07:42,160
service on iOS where you can which deals

00:07:40,060 --> 00:07:43,990
with API requests so it will provision

00:07:42,160 --> 00:07:46,120
your lambda when and as it's needed

00:07:43,990 --> 00:07:48,220
create new instances of it if you're

00:07:46,120 --> 00:07:49,660
getting concurrent requests just can

00:07:48,220 --> 00:07:54,130
ever still hear me or am I not sharing

00:07:49,660 --> 00:07:56,140
enough cool so after it's updated here

00:07:54,130 --> 00:07:58,060
it just gives you some information at

00:07:56,140 --> 00:07:59,470
the end including the actual end point

00:07:58,060 --> 00:08:01,780
which will allow us to hit the new alarm

00:07:59,470 --> 00:08:04,110
that all we've deployed so if I go to

00:08:01,780 --> 00:08:06,790
that endpoint and zoom in a bit just

00:08:04,110 --> 00:08:08,830
returns a simple object which is default

00:08:06,790 --> 00:08:11,200
that comes with service saying your

00:08:08,830 --> 00:08:12,430
function executed successfully if you

00:08:11,200 --> 00:08:15,040
want to see what the actual code is that

00:08:12,430 --> 00:08:17,500
created this if we go into the handler

00:08:15,040 --> 00:08:19,420
file it's a very simple function just

00:08:17,500 --> 00:08:23,230
returns an object for the status code on

00:08:19,420 --> 00:08:24,190
a body if we wanted to turn edit that so

00:08:23,230 --> 00:08:27,160
if you were tweaking this to do

00:08:24,190 --> 00:08:29,350
something else so just a simple hello

00:08:27,160 --> 00:08:30,970
string we could then deploy that as well

00:08:29,350 --> 00:08:33,160
and would take about 30 seconds

00:08:30,970 --> 00:08:34,930
obviously you want to be able to check

00:08:33,160 --> 00:08:38,169
that something works locally before you

00:08:34,930 --> 00:08:40,000
actually deploy it so there's another

00:08:38,169 --> 00:08:42,190
package called service offline which

00:08:40,000 --> 00:08:45,340
simulates what the API gateway does for

00:08:42,190 --> 00:08:46,960
you which is very handy package if you

00:08:45,340 --> 00:08:48,820
have a number of lambdas running you can

00:08:46,960 --> 00:08:50,320
have them all run and your your actual

00:08:48,820 --> 00:08:53,770
app will point to them and use your

00:08:50,320 --> 00:08:54,490
local versions if you need them so what

00:08:53,770 --> 00:08:56,380
this does is

00:08:54,490 --> 00:08:57,670
she creates a server for you which kind

00:08:56,380 --> 00:09:01,600
of goes against Iblis but it works

00:08:57,670 --> 00:09:04,300
locally so if we go into hello world

00:09:01,600 --> 00:09:07,060
if I run yarn start it's going to pick

00:09:04,300 --> 00:09:10,660
up my service offline start and run my

00:09:07,060 --> 00:09:14,260
lambda on a local host 3000 so now if I

00:09:10,660 --> 00:09:18,010
go to hit if I use postman to hit this

00:09:14,260 --> 00:09:19,540
guy if I go to localhost 3000 it's going

00:09:18,010 --> 00:09:22,080
to give me a 404 because I've only

00:09:19,540 --> 00:09:25,690
specified to consuming a bit

00:09:22,080 --> 00:09:27,339
I've only specified the hello path so

00:09:25,690 --> 00:09:30,070
this low close to thousand doesn't exist

00:09:27,339 --> 00:09:32,290
if I go to localhost 3000 slash hello I

00:09:30,070 --> 00:09:34,570
got my new message which is just hello

00:09:32,290 --> 00:09:36,370
so the local development experience is

00:09:34,570 --> 00:09:38,589
really nice you can tweak things as you

00:09:36,370 --> 00:09:41,260
go and then deploy them when you're

00:09:38,589 --> 00:09:44,110
happy it's going to work so that's the

00:09:41,260 --> 00:09:46,630
hello world I want to look at use cases

00:09:44,110 --> 00:09:48,190
for actual times we found these useful

00:09:46,630 --> 00:09:50,350
working with different clients at Theo

00:09:48,190 --> 00:09:51,760
doe as this is five ones I'm going to

00:09:50,350 --> 00:09:53,649
run through and end on the payment

00:09:51,760 --> 00:09:55,080
services so I want something now but

00:09:53,649 --> 00:09:57,459
I'll just go one by one

00:09:55,080 --> 00:10:00,070
so my first time looking at lambdas was

00:09:57,459 --> 00:10:02,140
when we were building github pull

00:10:00,070 --> 00:10:04,000
request status checks so I was working

00:10:02,140 --> 00:10:05,680
at a client that used the pull request

00:10:04,000 --> 00:10:07,750
names to generate release notes and

00:10:05,680 --> 00:10:09,430
spread them amongst the business as I'm

00:10:07,750 --> 00:10:11,230
sure you're aware many developers don't

00:10:09,430 --> 00:10:13,930
really nice make nice pull request

00:10:11,230 --> 00:10:18,010
titles at times swear to enforce the the

00:10:13,930 --> 00:10:20,170
rule so this is checks you've probably

00:10:18,010 --> 00:10:21,850
all seen the test CI would be like

00:10:20,170 --> 00:10:24,520
circle CI but then we've added two extra

00:10:21,850 --> 00:10:26,380
checks on our repo so I name checker

00:10:24,520 --> 00:10:29,020
which in this case is failed because

00:10:26,380 --> 00:10:30,579
it's it's not of the right format and at

00:10:29,020 --> 00:10:32,350
time of day check which is just kind of

00:10:30,579 --> 00:10:34,149
like a sanity check to make sure you

00:10:32,350 --> 00:10:37,300
don't accidentally merge to the

00:10:34,149 --> 00:10:40,089
production branch add a virus um so if

00:10:37,300 --> 00:10:44,200
we see that in action I have a repo here

00:10:40,089 --> 00:10:46,660
that's got this set up running and maybe

00:10:44,200 --> 00:10:48,070
zoom in a bit you can see the check is

00:10:46,660 --> 00:10:50,740
failing here because it's not of the

00:10:48,070 --> 00:10:52,209
right format it needs a ticket number so

00:10:50,740 --> 00:10:55,120
this would be like a team name a ticket

00:10:52,209 --> 00:10:57,610
number and user story in my case I'm

00:10:55,120 --> 00:10:59,440
missing a ticket number and if I add a

00:10:57,610 --> 00:11:00,700
ticket number it's not going to check

00:10:59,440 --> 00:11:03,520
it's a real ticket number but it's going

00:11:00,700 --> 00:11:07,389
to check that it exists you should see

00:11:03,520 --> 00:11:10,139
this turn to green if it's working

00:11:07,389 --> 00:11:12,220
which probably won't on a live demo

00:11:10,139 --> 00:11:13,689
refresh you can see now it's gone to

00:11:12,220 --> 00:11:17,049
green because it's of the right format

00:11:13,689 --> 00:11:18,129
so way this worked if you're a an admin

00:11:17,049 --> 00:11:22,119
of your repo you can go into the

00:11:18,129 --> 00:11:23,860
settings tab and go to web hooks and you

00:11:22,119 --> 00:11:25,899
can see here I've created a web hook for

00:11:23,860 --> 00:11:27,489
pull request events so every time you

00:11:25,899 --> 00:11:30,100
create a pull request editor pull

00:11:27,489 --> 00:11:32,259
request add more commits to it it'll

00:11:30,100 --> 00:11:33,730
create a web a pull request event and

00:11:32,259 --> 00:11:35,769
send it to a web hook of your choosing

00:11:33,730 --> 00:11:38,110
so I've specified it to hit a lambda

00:11:35,769 --> 00:11:39,309
that I've previously deployed every time

00:11:38,110 --> 00:11:40,779
something happens it will send that

00:11:39,309 --> 00:11:42,699
event to the lambda at the lambda I'll

00:11:40,779 --> 00:11:44,589
run some checks and then it will use the

00:11:42,699 --> 00:11:47,949
github API to actually update the status

00:11:44,589 --> 00:11:49,389
check on the on the pull request so we

00:11:47,949 --> 00:11:51,189
use that to check that the name was

00:11:49,389 --> 00:11:55,749
right and we also use it to check if the

00:11:51,189 --> 00:11:58,329
time of day was right um so I was one

00:11:55,749 --> 00:11:59,499
use case written an article on it and a

00:11:58,329 --> 00:12:01,089
repo that you can use if you're

00:11:59,499 --> 00:12:03,429
interested on using it on your own

00:12:01,089 --> 00:12:06,790
project again the links are available on

00:12:03,429 --> 00:12:09,399
slides comm slash Rob Cronin the other

00:12:06,790 --> 00:12:10,959
one we did was for using cron jobs so

00:12:09,399 --> 00:12:15,459
the first lamb that we deployed was

00:12:10,959 --> 00:12:17,139
activated using a HTTP request you can

00:12:15,459 --> 00:12:20,110
also schedule them to run at certain

00:12:17,139 --> 00:12:21,579
times a day so here to compare them this

00:12:20,110 --> 00:12:23,949
is the hello function we deployed before

00:12:21,579 --> 00:12:26,919
it's triggered on this event which is a

00:12:23,949 --> 00:12:27,970
get request to slash hello the one on

00:12:26,919 --> 00:12:30,669
the bottom we're triggering on a

00:12:27,970 --> 00:12:33,459
schedule so it's using this cron syntax

00:12:30,669 --> 00:12:35,860
which if you're not familiar is zero

00:12:33,459 --> 00:12:37,720
minutes past the third hour or every day

00:12:35,860 --> 00:12:39,610
the month every month Monday to Friday

00:12:37,720 --> 00:12:41,439
every year so basically it's going to

00:12:39,610 --> 00:12:42,819
trigger at 3:00 a.m. every day which is

00:12:41,439 --> 00:12:44,769
when you typically expect your server's

00:12:42,819 --> 00:12:47,079
not to have a large load and we use it

00:12:44,769 --> 00:12:49,389
to run a Analects

00:12:47,079 --> 00:12:50,949
so you gave the the lambda permission to

00:12:49,389 --> 00:12:53,350
run whatever you want generate some

00:12:50,949 --> 00:12:54,699
reports and of course other ways of

00:12:53,350 --> 00:12:57,639
doing this lambdas are just kind of a

00:12:54,699 --> 00:12:59,759
cool way of doing it we also use the

00:12:57,639 --> 00:13:02,259
cron jobs for the get up status checks

00:12:59,759 --> 00:13:04,029
so if you just run the pull requests

00:13:02,259 --> 00:13:06,610
name when you created the pull request

00:13:04,029 --> 00:13:08,019
if you created at 3:00 p.m. it would go

00:13:06,610 --> 00:13:10,480
green for time of day and always be

00:13:08,019 --> 00:13:12,279
green so instead be scheduled at 4:00

00:13:10,480 --> 00:13:13,839
o'clock to go through every pull request

00:13:12,279 --> 00:13:16,899
that's currently open and make them all

00:13:13,839 --> 00:13:20,559
status pending and again at 8:00 a.m. in

00:13:16,899 --> 00:13:21,040
the morning to make them green so the

00:13:20,559 --> 00:13:22,120
third one

00:13:21,040 --> 00:13:24,070
there's kind of an interesting case

00:13:22,120 --> 00:13:25,360
where because we were using laminas we

00:13:24,070 --> 00:13:28,270
just kind of thought of using a lambda

00:13:25,360 --> 00:13:31,090
to solve an interesting problem we had a

00:13:28,270 --> 00:13:32,290
Jango Birkin and we had a third party

00:13:31,090 --> 00:13:34,810
that would send us requests that we

00:13:32,290 --> 00:13:36,070
wanted to deal with and when the third

00:13:34,810 --> 00:13:38,140
party sent us the request they were

00:13:36,070 --> 00:13:39,910
coming in chunks so they were coming bit

00:13:38,140 --> 00:13:42,460
by bit and this meant that there wasn't

00:13:39,910 --> 00:13:46,180
a content length in the request which

00:13:42,460 --> 00:13:47,140
our back-end rejected with a 411 we

00:13:46,180 --> 00:13:48,640
asked a third party if they could

00:13:47,140 --> 00:13:50,290
tweaked up but they weren't able to just

00:13:48,640 --> 00:13:52,990
for us and it wouldn't be good practice

00:13:50,290 --> 00:13:55,360
if we allowed infinite requests to our

00:13:52,990 --> 00:13:57,100
server so what we did to just try it out

00:13:55,360 --> 00:13:58,810
was we deployed a simple lambda which

00:13:57,100 --> 00:14:01,300
basically looked like this with a little

00:13:58,810 --> 00:14:02,620
bit of authentication added on they took

00:14:01,300 --> 00:14:04,810
in the event and just forward the

00:14:02,620 --> 00:14:08,260
request to in this case our back-end

00:14:04,810 --> 00:14:09,910
with the exact same event our body very

00:14:08,260 --> 00:14:11,140
simple lambda but the way the reason it

00:14:09,910 --> 00:14:12,460
worked was because when you send a

00:14:11,140 --> 00:14:14,260
request to a lambda it goes through the

00:14:12,460 --> 00:14:15,640
API gateway Chucky's buffered our

00:14:14,260 --> 00:14:17,820
requests and added a content length

00:14:15,640 --> 00:14:20,760
which then allowed our back-end to

00:14:17,820 --> 00:14:23,470
accept it which is kind of a bit lucky

00:14:20,760 --> 00:14:26,470
but it was kind of interesting way to

00:14:23,470 --> 00:14:28,900
solve the problem so to show you how we

00:14:26,470 --> 00:14:30,850
might do that so for these three

00:14:28,900 --> 00:14:32,620
examples I pulled the same template that

00:14:30,850 --> 00:14:35,260
I did for hello world and I'm just going

00:14:32,620 --> 00:14:38,320
to show you what I've changed so the

00:14:35,260 --> 00:14:40,480
handler function is what I just showed

00:14:38,320 --> 00:14:43,210
you in the slide with a with a return

00:14:40,480 --> 00:14:45,040
buddy and in the hunt in the server list

00:14:43,210 --> 00:14:47,050
llamo all I've changed is the function

00:14:45,040 --> 00:14:50,410
name and now it's a post request instead

00:14:47,050 --> 00:14:52,180
of a get request and if I was to run

00:14:50,410 --> 00:14:55,630
that again locally so I'd kill the hello

00:14:52,180 --> 00:14:58,300
world and go to middleman and start up

00:14:55,630 --> 00:15:03,070
that server on the left-hand side I kind

00:14:58,300 --> 00:15:04,540
of simulate a back-end server so on the

00:15:03,070 --> 00:15:06,520
left-hand side I'm simulated to by the

00:15:04,540 --> 00:15:08,170
Django back-end I would normally reject

00:15:06,520 --> 00:15:10,300
this request here on the right I'm

00:15:08,170 --> 00:15:12,820
simulating the lambda and I can simulate

00:15:10,300 --> 00:15:15,280
what the third party would do so again

00:15:12,820 --> 00:15:18,210
using postman I can hit my middleman

00:15:15,280 --> 00:15:21,220
request with a body of say via lambda I

00:15:18,210 --> 00:15:22,840
send that request I get a success and

00:15:21,220 --> 00:15:25,000
you see here that my back-end has

00:15:22,840 --> 00:15:27,610
received it and the the lambda has

00:15:25,000 --> 00:15:29,380
forwarded on so then a quick and easy

00:15:27,610 --> 00:15:33,010
example that we used alumnus to solve

00:15:29,380 --> 00:15:34,480
the problem it's another one it's

00:15:33,010 --> 00:15:37,899
actually quite useful for

00:15:34,480 --> 00:15:38,800
everybody's not just for male clients so

00:15:37,899 --> 00:15:40,839
often when you're dealing with tear

00:15:38,800 --> 00:15:42,160
parties if you for example only have a

00:15:40,839 --> 00:15:43,660
front-end only up or you don't have

00:15:42,160 --> 00:15:45,670
access to the backend or the back-end

00:15:43,660 --> 00:15:47,500
team is busy and you want to be able to

00:15:45,670 --> 00:15:47,980
send or tend to get requests to third

00:15:47,500 --> 00:15:50,230
parties

00:15:47,980 --> 00:15:51,070
you don't expose your API keys on the

00:15:50,230 --> 00:15:52,660
front end of course

00:15:51,070 --> 00:15:54,730
so for example if you had a mail client

00:15:52,660 --> 00:15:57,430
if you expose the API key someone could

00:15:54,730 --> 00:15:59,410
then send infinite mails on your behalf

00:15:57,430 --> 00:16:01,329
if you put it in the backend or on a

00:15:59,410 --> 00:16:03,070
lambda you can specify that only sends

00:16:01,329 --> 00:16:06,100
certain templates which is a little bit

00:16:03,070 --> 00:16:08,589
better so here we're saying we use a two

00:16:06,100 --> 00:16:10,750
S's SSM which is the parameter store to

00:16:08,589 --> 00:16:13,269
store secrets so here I've stored a

00:16:10,750 --> 00:16:16,000
secret API key and I'm going to access

00:16:13,269 --> 00:16:17,380
that from the lambda so there's this

00:16:16,000 --> 00:16:18,910
code here we don't have to worry about

00:16:17,380 --> 00:16:22,180
too much about this code you can find it

00:16:18,910 --> 00:16:25,180
online it uses a dress SDK and allows

00:16:22,180 --> 00:16:27,040
you to access various SSM parameters so

00:16:25,180 --> 00:16:28,480
you give it an array of the parameters

00:16:27,040 --> 00:16:30,579
you want and they will return array of

00:16:28,480 --> 00:16:31,750
the secrets but this is something we

00:16:30,579 --> 00:16:33,760
found ourselves doing quite a lot on

00:16:31,750 --> 00:16:35,230
different lambdas so it's a sort of code

00:16:33,760 --> 00:16:36,519
that you'd want to put into the new

00:16:35,230 --> 00:16:38,320
feature they've released which is lambda

00:16:36,519 --> 00:16:40,089
layers which allows you to share code

00:16:38,320 --> 00:16:41,620
across your lung this instead of

00:16:40,089 --> 00:16:43,839
deploying your lambdas individually you

00:16:41,620 --> 00:16:46,019
can ploy layer and then use those layers

00:16:43,839 --> 00:16:48,819
on each of your alarms

00:16:46,019 --> 00:16:50,410
so in this service damo instead of

00:16:48,819 --> 00:16:54,069
declaring a functions we're declaring

00:16:50,410 --> 00:16:56,589
layers here and giving a path to whether

00:16:54,069 --> 00:16:59,769
where the code lies so when you deploy

00:16:56,589 --> 00:17:02,350
that we get a similar stream of messages

00:16:59,769 --> 00:17:03,250
again uploading the zip of the fog doing

00:17:02,350 --> 00:17:05,439
the cloud formation

00:17:03,250 --> 00:17:08,140
instead of giving an endpoint back it

00:17:05,439 --> 00:17:10,360
gives a Amazon resource name and a RN

00:17:08,140 --> 00:17:12,280
here which you can use on any of your

00:17:10,360 --> 00:17:14,169
lambdas and when you do that at runtime

00:17:12,280 --> 00:17:15,189
of your lambda it puts the layer code in

00:17:14,169 --> 00:17:17,290
the /opt

00:17:15,189 --> 00:17:19,600
of your directory and then you can

00:17:17,290 --> 00:17:24,010
import the code directly from there and

00:17:19,600 --> 00:17:26,020
use them so if we if I show you an

00:17:24,010 --> 00:17:28,990
example of this so the third-party

00:17:26,020 --> 00:17:33,010
example first I'll show you the

00:17:28,990 --> 00:17:35,380
difference in the service demo so here

00:17:33,010 --> 00:17:37,419
in the provider on top of a US and the

00:17:35,380 --> 00:17:39,340
four things we had before I've given my

00:17:37,419 --> 00:17:41,380
lambda permission so obviously don't any

00:17:39,340 --> 00:17:45,340
lamins be able to access your SSM store

00:17:41,380 --> 00:17:48,040
so this is giving it get permission on

00:17:45,340 --> 00:17:49,540
your SSM parameters

00:17:48,040 --> 00:17:51,610
specified explicitly you can only get

00:17:49,540 --> 00:17:52,930
the secret API key so the llamas are

00:17:51,610 --> 00:17:54,310
quite nice and fun graining the

00:17:52,930 --> 00:17:58,510
permissions and making sure that it's

00:17:54,310 --> 00:18:00,550
secure again I've changed the hunger to

00:17:58,510 --> 00:18:03,430
be third-party and at the bottom here

00:18:00,550 --> 00:18:05,380
I've added a layer which is referencing

00:18:03,430 --> 00:18:10,480
the error in that I was turned before

00:18:05,380 --> 00:18:12,070
which is the access SSM and so now I was

00:18:10,480 --> 00:18:13,990
there's a little script I have that runs

00:18:12,070 --> 00:18:15,280
that sets up the webpack config tool a

00:18:13,990 --> 00:18:18,100
to access that code when you're running

00:18:15,280 --> 00:18:22,570
locally but I've got something in a few

00:18:18,100 --> 00:18:25,630
minutes to show you how that works so if

00:18:22,570 --> 00:18:28,300
we look at the actual code I've imported

00:18:25,630 --> 00:18:30,610
to get SM from the /opt so when this

00:18:28,300 --> 00:18:32,440
runs on when the actual lambda runs it

00:18:30,610 --> 00:18:34,360
will have access to all that code in

00:18:32,440 --> 00:18:37,120
that directory and then I can use it

00:18:34,360 --> 00:18:39,460
straight out of the box in my lambda so

00:18:37,120 --> 00:18:41,830
here I wait the guide SSM of my secret

00:18:39,460 --> 00:18:44,860
API key and reality I would then use our

00:18:41,830 --> 00:18:46,780
key to contact my my third party here

00:18:44,860 --> 00:18:49,330
I'm just returning it in my body to show

00:18:46,780 --> 00:18:52,720
that it works so a previously deployed

00:18:49,330 --> 00:18:54,430
this alumna we can look at it here so

00:18:52,720 --> 00:18:59,680
it's just going to return a body with

00:18:54,430 --> 00:19:01,900
the space secret API key here so that's

00:18:59,680 --> 00:19:03,580
showing how so this is a very small

00:19:01,900 --> 00:19:05,200
example the SSM code is not that long

00:19:03,580 --> 00:19:07,360
but you can probably find use cases

00:19:05,200 --> 00:19:10,690
where you might want to use layers

00:19:07,360 --> 00:19:12,490
across Oyler lambdas this is the repo I

00:19:10,690 --> 00:19:14,890
mentioned where you can set this up

00:19:12,490 --> 00:19:16,300
yourself so I've got two repos with the

00:19:14,890 --> 00:19:19,180
actual lambda code and the Alera code

00:19:16,300 --> 00:19:21,460
allow you to deploy a layer and and use

00:19:19,180 --> 00:19:24,160
it on your lambda there is three there's

00:19:21,460 --> 00:19:26,860
three cases that AWS mentioned could be

00:19:24,160 --> 00:19:28,780
used when you use lambda layers the

00:19:26,860 --> 00:19:30,250
first one I've just mentioned where you

00:19:28,780 --> 00:19:32,050
can you reuse your code across the

00:19:30,250 --> 00:19:34,570
lambdas the second one is quite similar

00:19:32,050 --> 00:19:35,950
for library dependencies so in case of

00:19:34,570 --> 00:19:37,630
JavaScript this could be your node

00:19:35,950 --> 00:19:39,100
modules could be living on a layer and

00:19:37,630 --> 00:19:40,600
every time you deploy you don't actually

00:19:39,100 --> 00:19:42,370
have to deploy your node modules as well

00:19:40,600 --> 00:19:44,560
which makes the deployment a little bit

00:19:42,370 --> 00:19:46,960
quicker and then the third one is for

00:19:44,560 --> 00:19:50,110
custom runtimes so out of the box 80s

00:19:46,960 --> 00:19:52,090
supports Java scripts Python Java a few

00:19:50,110 --> 00:19:53,800
of the ones there's other languages that

00:19:52,090 --> 00:19:58,450
you might want to write earlier for

00:19:53,800 --> 00:20:00,250
example in PHP so my colleague Ben a

00:19:58,450 --> 00:20:01,250
Theo de wrote an article when he had to

00:20:00,250 --> 00:20:03,800
use here

00:20:01,250 --> 00:20:04,550
to write some PHP laminas so he the one

00:20:03,800 --> 00:20:06,350
at the bottom here

00:20:04,550 --> 00:20:08,690
he wrote a custom runtime to allow you

00:20:06,350 --> 00:20:10,610
to run PHP on your llamas which is kind

00:20:08,690 --> 00:20:13,210
of cool and then the top one is how I

00:20:10,610 --> 00:20:15,560
integrated the layers into the llamas

00:20:13,210 --> 00:20:17,210
it's one two the main one the payment

00:20:15,560 --> 00:20:19,580
services so over the last year or so

00:20:17,210 --> 00:20:22,610
I've worked about these clients with

00:20:19,580 --> 00:20:24,230
Giotto so made comm an online furniture

00:20:22,610 --> 00:20:26,810
store might have seen their ads on the

00:20:24,230 --> 00:20:28,910
tube and vago an insurance company part

00:20:26,810 --> 00:20:32,000
of admin insurance to provide short term

00:20:28,910 --> 00:20:35,510
insurance to young drivers some both

00:20:32,000 --> 00:20:37,430
cases on these on these projects of find

00:20:35,510 --> 00:20:39,320
myself needing are the team found

00:20:37,430 --> 00:20:42,530
themselves needing to create a payment

00:20:39,320 --> 00:20:44,360
lambda so for my comm we were building a

00:20:42,530 --> 00:20:46,070
react native up with them and we were

00:20:44,360 --> 00:20:47,450
integrating Apple pay with it and due to

00:20:46,070 --> 00:20:49,820
some constraints we couldn't use the

00:20:47,450 --> 00:20:52,700
back end version of their payment system

00:20:49,820 --> 00:20:54,260
so we had to create ourselves so we used

00:20:52,700 --> 00:20:56,630
stripe as the payment service which you

00:20:54,260 --> 00:20:58,340
might have heard of before and on the

00:20:56,630 --> 00:21:00,290
front end with the app using Apple pay

00:20:58,340 --> 00:21:03,110
we could generate a stripe token and we

00:21:00,290 --> 00:21:05,750
just deployed a simple lambda that would

00:21:03,110 --> 00:21:07,630
take the stripe token take the payment

00:21:05,750 --> 00:21:09,920
amount and take a reference to the order

00:21:07,630 --> 00:21:11,240
the lambda received that it could do

00:21:09,920 --> 00:21:12,890
some checks at the back end to see that

00:21:11,240 --> 00:21:15,560
the order was a legit see that the

00:21:12,890 --> 00:21:17,330
amount was right and then actually make

00:21:15,560 --> 00:21:19,910
the payment with stripe and return to

00:21:17,330 --> 00:21:21,950
the backend that that the order was

00:21:19,910 --> 00:21:24,170
either charges either successful or not

00:21:21,950 --> 00:21:25,580
this was quite simple code and it kind

00:21:24,170 --> 00:21:28,070
of eliminated our dependency on having

00:21:25,580 --> 00:21:30,050
to rely on the back end for vago

00:21:28,070 --> 00:21:31,430
slightly different so we were doing we

00:21:30,050 --> 00:21:33,050
had access we were writing the backend

00:21:31,430 --> 00:21:34,970
code as well what we were building a

00:21:33,050 --> 00:21:36,380
number of different products so the time

00:21:34,970 --> 00:21:38,690
is there we had three different products

00:21:36,380 --> 00:21:40,610
they all had to deal with payment at

00:21:38,690 --> 00:21:41,780
some point in their flow and we didn't

00:21:40,610 --> 00:21:43,460
want to rewrite the same payment code

00:21:41,780 --> 00:21:45,350
every time so whether that was stripe or

00:21:43,460 --> 00:21:46,970
PayPal which we were supporting I wants

00:21:45,350 --> 00:21:49,220
to be able to genera fie and refactor it

00:21:46,970 --> 00:21:51,650
into a micro service so again we wrote a

00:21:49,220 --> 00:21:54,860
lambda which you could give it a stripe

00:21:51,650 --> 00:21:56,840
token or and specify the payment method

00:21:54,860 --> 00:21:58,070
to your own checks on the back end but

00:21:56,840 --> 00:22:03,050
then have the Lum deal with everything

00:21:58,070 --> 00:22:05,000
else so to show you how quickly you can

00:22:03,050 --> 00:22:07,250
actually set up a payment service in

00:22:05,000 --> 00:22:09,500
alumna it's about 40 lines of code which

00:22:07,250 --> 00:22:13,340
would give you a very simple version

00:22:09,500 --> 00:22:14,590
that would work so we use the stripe

00:22:13,340 --> 00:22:15,820
library

00:22:14,590 --> 00:22:18,120
again I'm using my lair cuz I'm gonna

00:22:15,820 --> 00:22:21,419
have to access some secrets from SSM

00:22:18,120 --> 00:22:24,450
this is a bit small maybe I'll go to the

00:22:21,419 --> 00:22:28,900
can you guys see it at the back or I

00:22:24,450 --> 00:22:31,299
okay so the actual events it gets this

00:22:28,900 --> 00:22:32,830
stripe sticker from SSM and then

00:22:31,299 --> 00:22:35,260
configures the stripe library using the

00:22:32,830 --> 00:22:37,059
secret parses the body that it's

00:22:35,260 --> 00:22:38,620
received and then here I mentioned

00:22:37,059 --> 00:22:40,029
before you can just use console.log and

00:22:38,620 --> 00:22:44,350
it will give you logging out of the box

00:22:40,029 --> 00:22:46,299
if using python even if she's print here

00:22:44,350 --> 00:22:48,610
i'm saying log they about to charge for

00:22:46,299 --> 00:22:50,260
the amount and then try caps the the

00:22:48,610 --> 00:22:52,450
request so create the charge using the

00:22:50,260 --> 00:22:55,299
amount you've sent and using the source

00:22:52,450 --> 00:22:57,419
token you've generated we can catch the

00:22:55,299 --> 00:23:00,220
error log the error return an area so

00:22:57,419 --> 00:23:03,100
straightforward code and then eventually

00:23:00,220 --> 00:23:05,140
with a log of success and return it so

00:23:03,100 --> 00:23:07,450
that's roughly forty lines of code that

00:23:05,140 --> 00:23:08,549
gives you a very simple payment service

00:23:07,450 --> 00:23:11,289
of the books

00:23:08,549 --> 00:23:14,049
it's a look at that here so again the

00:23:11,289 --> 00:23:17,409
handler code you just saw package.json a

00:23:14,049 --> 00:23:18,840
padded stripe as a dependency service

00:23:17,409 --> 00:23:22,179
Damo

00:23:18,840 --> 00:23:25,270
again i have given it the permissions in

00:23:22,179 --> 00:23:26,440
this case just for the striped s key and

00:23:25,270 --> 00:23:29,890
at the bottom i appearing at the layer

00:23:26,440 --> 00:23:32,200
again and it's a post payment so again

00:23:29,890 --> 00:23:35,230
I've deployed these so if we give it a

00:23:32,200 --> 00:23:37,390
body so I'm set up a stripe test a test

00:23:35,230 --> 00:23:38,950
stripe account and I'm with the test

00:23:37,390 --> 00:23:41,890
again you can use token or score visa

00:23:38,950 --> 00:23:43,690
which will always be successful I've

00:23:41,890 --> 00:23:46,330
given it a source on the amount and if

00:23:43,690 --> 00:23:48,159
we send it to this lambda we should see

00:23:46,330 --> 00:23:51,340
it should make the request to the stripe

00:23:48,159 --> 00:23:53,980
and give me the charge ID from stripe if

00:23:51,340 --> 00:23:56,799
I was to do a failure which is a Tok

00:23:53,980 --> 00:23:58,390
underscore charge decline we should see

00:23:56,799 --> 00:24:00,130
the error message the stripe gave us

00:23:58,390 --> 00:24:02,799
which was you try your card was the

00:24:00,130 --> 00:24:05,770
client so to show you how the login

00:24:02,799 --> 00:24:10,299
comes out of the box from the console we

00:24:05,770 --> 00:24:13,600
can go to lambda we can find our lambda

00:24:10,299 --> 00:24:14,770
which here is stripe example and this is

00:24:13,600 --> 00:24:17,320
the dashboard which I haven't have to

00:24:14,770 --> 00:24:19,390
touch using serverless anything I'd want

00:24:17,320 --> 00:24:22,120
to change here I could theoretically do

00:24:19,390 --> 00:24:24,580
it the server this demo so you can see

00:24:22,120 --> 00:24:26,590
it's got my code it's got a few tweaks

00:24:24,580 --> 00:24:27,850
you can do in terms of the amount of

00:24:26,590 --> 00:24:31,870
memory it's allowed to use

00:24:27,850 --> 00:24:33,190
concurrent requests etc you can see the

00:24:31,870 --> 00:24:34,780
other things that set up for me it's set

00:24:33,190 --> 00:24:37,419
up the API gateway so that I can hit

00:24:34,780 --> 00:24:39,610
slash payment it's setup logging which

00:24:37,419 --> 00:24:42,520
we'll look at now it's allowed to create

00:24:39,610 --> 00:24:44,410
logs and put to them it's given a

00:24:42,520 --> 00:24:47,230
permission to access my stripe test key

00:24:44,410 --> 00:24:49,900
it's said to use the layer the accesses

00:24:47,230 --> 00:24:51,190
to some layer and then we can actually

00:24:49,900 --> 00:24:53,470
look at the logs so if you go to the

00:24:51,190 --> 00:24:57,520
modern atop give you some very simple

00:24:53,470 --> 00:24:59,890
metrics etc how many times has been it

00:24:57,520 --> 00:25:02,200
invoked and then we can actually view

00:24:59,890 --> 00:25:04,690
the logs and Claire watch so this is

00:25:02,200 --> 00:25:06,730
kind of the logs are not the nicest of

00:25:04,690 --> 00:25:09,309
the box but the head they're there for

00:25:06,730 --> 00:25:11,020
you so we look here we can see the the

00:25:09,309 --> 00:25:15,090
requests I made over the last few

00:25:11,020 --> 00:25:18,669
minutes with the logs here my name in it

00:25:15,090 --> 00:25:20,350
gives a unique ID to the request I was

00:25:18,669 --> 00:25:22,330
about to charge and the first one I did

00:25:20,350 --> 00:25:24,730
it was successful it gives you some

00:25:22,330 --> 00:25:26,440
billing information about it so you can

00:25:24,730 --> 00:25:28,539
see that I only use this amount of

00:25:26,440 --> 00:25:30,520
memory when I am actually billed for

00:25:28,539 --> 00:25:31,960
this amount so you can tweak it as you

00:25:30,520 --> 00:25:34,510
need to make sure you're not over built

00:25:31,960 --> 00:25:37,799
the second one I got the client so you

00:25:34,510 --> 00:25:40,030
can see that the error was here

00:25:37,799 --> 00:25:41,320
so you're thinking made him noticed and

00:25:40,030 --> 00:25:43,510
you've probably heard about lamb noises

00:25:41,320 --> 00:25:45,580
to do at the cold start time so the

00:25:43,510 --> 00:25:47,020
first one I made you can see you might

00:25:45,580 --> 00:25:49,780
not be able to see it took about two

00:25:47,020 --> 00:25:50,679
seconds the second one I made took just

00:25:49,780 --> 00:25:52,270
under one second

00:25:50,679 --> 00:25:53,830
so the first request you make to a

00:25:52,270 --> 00:25:56,289
lambda is going to be a bit slower

00:25:53,830 --> 00:25:57,370
because the API gateway provisions your

00:25:56,289 --> 00:25:59,559
lambda and sets it up

00:25:57,370 --> 00:26:00,970
every request after that will then be

00:25:59,559 --> 00:26:01,419
able to use the same instance if it's

00:26:00,970 --> 00:26:03,429
still alive

00:26:01,419 --> 00:26:04,690
and will be a bit quicker so some

00:26:03,429 --> 00:26:06,490
articles I read they think they will

00:26:04,690 --> 00:26:08,020
last about 40 minutes if you use a lot

00:26:06,490 --> 00:26:10,480
of memory it will get shut down a lot

00:26:08,020 --> 00:26:13,059
quicker Aida West deals with that sort

00:26:10,480 --> 00:26:14,470
of thing so I haven't hit this lament in

00:26:13,059 --> 00:26:16,659
a while but if you're in production it

00:26:14,470 --> 00:26:18,669
expected to be hit quite often and

00:26:16,659 --> 00:26:20,559
headwear said only about 0.2% of

00:26:18,669 --> 00:26:22,480
requests actually experience a cold

00:26:20,559 --> 00:26:24,850
start that might be because people are

00:26:22,480 --> 00:26:28,000
being smart and scheduling requests to

00:26:24,850 --> 00:26:30,250
keep their lambdas warm but the other

00:26:28,000 --> 00:26:31,630
thing if I send ten concurrent requests

00:26:30,250 --> 00:26:34,150
to my lambda it would have to

00:26:31,630 --> 00:26:35,409
instantiate ten instances orbit so even

00:26:34,150 --> 00:26:37,630
if you're if you're keeping the lambda

00:26:35,409 --> 00:26:40,540
warm if you experienced a busy period

00:26:37,630 --> 00:26:41,680
it's going to like fifty percent of

00:26:40,540 --> 00:26:43,660
those might actually still

00:26:41,680 --> 00:26:45,520
so cold start so that's something you

00:26:43,660 --> 00:26:47,170
have to think about in the case of

00:26:45,520 --> 00:26:49,210
payment service maybe an extra second is

00:26:47,170 --> 00:26:50,410
not so bad but if you're using it for

00:26:49,210 --> 00:26:56,530
other things you might have to think

00:26:50,410 --> 00:26:58,300
about that so there's a quick overview

00:26:56,530 --> 00:26:59,680
of the pros and cons of using them the

00:26:58,300 --> 00:27:01,810
deployment is really quick the dev

00:26:59,680 --> 00:27:03,490
experience is really nice you can deploy

00:27:01,810 --> 00:27:06,070
in 30 to 60 seconds after the first

00:27:03,490 --> 00:27:07,840
deploy in issue one takes about 90 but

00:27:06,070 --> 00:27:09,220
that's still quick if you want to kind

00:27:07,840 --> 00:27:11,290
of do a proof of concept and see if

00:27:09,220 --> 00:27:13,150
something works you can log out of the

00:27:11,290 --> 00:27:15,190
box or console.log it's a lot cheaper

00:27:13,150 --> 00:27:17,740
compared to the server's I didn't go too

00:27:15,190 --> 00:27:19,750
much into the pricing but you can get

00:27:17,740 --> 00:27:20,920
over them if you go if you go over the

00:27:19,750 --> 00:27:22,780
million requests I think it's about

00:27:20,920 --> 00:27:24,340
seven dollars to get another million

00:27:22,780 --> 00:27:25,740
which is not too bad if you're getting a

00:27:24,340 --> 00:27:28,900
million requests to your payment service

00:27:25,740 --> 00:27:31,210
you can check codes with layers it deals

00:27:28,900 --> 00:27:32,380
with all the scaling for you and then

00:27:31,210 --> 00:27:34,060
the two negatives I mentioned the

00:27:32,380 --> 00:27:35,770
logging is not that nice you might set

00:27:34,060 --> 00:27:38,170
up your own logging anyway or you might

00:27:35,770 --> 00:27:40,150
pull the logs from clared watch and deal

00:27:38,170 --> 00:27:43,270
with it the way you want and then as I

00:27:40,150 --> 00:27:45,130
mentioned the cold start time so it's

00:27:43,270 --> 00:27:47,710
basically it as I mentioned slides are

00:27:45,130 --> 00:27:49,810
on available if you want to see any

00:27:47,710 --> 00:27:51,630
links the the repos are there and the

00:27:49,810 --> 00:27:54,040
three articles I mentioned you can find

00:27:51,630 --> 00:27:55,410
so thanks very much for listening and if

00:27:54,040 --> 00:28:00,509
you have any questions

00:27:55,410 --> 00:28:00,509

YouTube URL: https://www.youtube.com/watch?v=bzBzz1CtePw


