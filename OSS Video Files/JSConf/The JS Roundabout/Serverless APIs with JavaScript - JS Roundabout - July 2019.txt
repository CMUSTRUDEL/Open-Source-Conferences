Title: Serverless APIs with JavaScript - JS Roundabout - July 2019
Publication date: 2019-07-12
Playlist: The JS Roundabout
Description: 
	Presented by Senior Developer at Scott Logic, Matt Searle.

Matt Searle introduces us to building serverless APIâ€™s in JavaScript with some tools, tips and best practices for getting started in this new environment.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:06,890
I work for Scott logic we are a

00:00:02,370 --> 00:00:08,970
technical consultancy specializing in

00:00:06,890 --> 00:00:11,160
everything all kinds of different cloud

00:00:08,970 --> 00:00:13,650
technologies we work in the finance

00:00:11,160 --> 00:00:16,650
industry as well as in the public sector

00:00:13,650 --> 00:00:18,439
and we do a huge amount of work we've

00:00:16,650 --> 00:00:20,970
got some great JavaScript developers I

00:00:18,439 --> 00:00:23,400
myself from a recent joiner to the

00:00:20,970 --> 00:00:27,810
JavaScript community so I hope you'll be

00:00:23,400 --> 00:00:30,900
kind to me but today I'm going to talk

00:00:27,810 --> 00:00:32,910
about serverless api's with javascript

00:00:30,900 --> 00:00:35,670
so focusing a little bit more on the

00:00:32,910 --> 00:00:37,440
backend rather than some rather than the

00:00:35,670 --> 00:00:41,489
front end where I think javascript has

00:00:37,440 --> 00:00:45,329
really made its name and yeah have the

00:00:41,489 --> 00:00:46,739
biggest impact on technology so just a

00:00:45,329 --> 00:00:47,879
brief thing as what some what I'm going

00:00:46,739 --> 00:00:50,820
to talk about I'm going to do a brief

00:00:47,879 --> 00:00:53,129
intro into service what it means when I

00:00:50,820 --> 00:00:56,280
say I'm going to be talking about

00:00:53,129 --> 00:01:00,449
service technologies and that sort of

00:00:56,280 --> 00:01:03,270
thing I myself am an AWS Solutions

00:01:00,449 --> 00:01:05,189
Architect so I apologize if this feels

00:01:03,270 --> 00:01:06,420
like I'm pushing AWS on you I'm

00:01:05,189 --> 00:01:08,340
definitely not and there's some great

00:01:06,420 --> 00:01:12,090
options out there and everything I talk

00:01:08,340 --> 00:01:14,760
about is applicable to IBM to Google

00:01:12,090 --> 00:01:17,360
Cloud to edge or whatever it is you're

00:01:14,760 --> 00:01:22,110
using I'm going to do a little bit on

00:01:17,360 --> 00:01:23,670
AWS API gateway and AWS lambda just so

00:01:22,110 --> 00:01:26,100
that you know we're we know we're

00:01:23,670 --> 00:01:28,409
talking about the same thing some best

00:01:26,100 --> 00:01:32,610
practices and a small library that I've

00:01:28,409 --> 00:01:36,509
put together on github called Mandor

00:01:32,610 --> 00:01:37,799
which will help you get started and get

00:01:36,509 --> 00:01:40,860
going with some of those best practices

00:01:37,799 --> 00:01:44,369
that I'm talking about to create some

00:01:40,860 --> 00:01:49,049
great function some great service api

00:01:44,369 --> 00:01:51,570
s-- cool so what is service what does it

00:01:49,049 --> 00:01:53,310
mean when I use this buzzword well the

00:01:51,570 --> 00:01:56,360
first thing is that there is definitely

00:01:53,310 --> 00:01:58,500
a server so it is a bit of an oxymoron

00:01:56,360 --> 00:02:00,630
when I'm talking about service

00:01:58,500 --> 00:02:03,210
technologies would what I'm really

00:02:00,630 --> 00:02:05,939
talking about is pushing the

00:02:03,210 --> 00:02:08,220
responsibility of some of what we do in

00:02:05,939 --> 00:02:11,370
the backend in terms of maintaining our

00:02:08,220 --> 00:02:12,490
servers maintaining the operating

00:02:11,370 --> 00:02:14,470
systems our

00:02:12,490 --> 00:02:16,900
on which our servers are running the

00:02:14,470 --> 00:02:19,180
hardware the load balancing and that

00:02:16,900 --> 00:02:21,730
sort of thing giving some of that

00:02:19,180 --> 00:02:23,290
responsibility back to the cloud

00:02:21,730 --> 00:02:25,120
providers if they're going to provide

00:02:23,290 --> 00:02:27,040
the hardware why not let them provide

00:02:25,120 --> 00:02:29,320
the operating system as well I mean if

00:02:27,040 --> 00:02:32,470
you're using dotnet core or you're using

00:02:29,320 --> 00:02:34,330
Java the operating system is kind of

00:02:32,470 --> 00:02:36,730
secondary anyway and so it lets

00:02:34,330 --> 00:02:38,890
developers really focus on what they

00:02:36,730 --> 00:02:40,360
know what they know and what they do

00:02:38,890 --> 00:02:44,860
best and that's delivering business

00:02:40,360 --> 00:02:46,510
value and doing cool stuff really so

00:02:44,860 --> 00:02:47,590
yeah here's a few of the things so if

00:02:46,510 --> 00:02:49,090
you're talking about service

00:02:47,590 --> 00:02:50,320
technologies quite often you're talking

00:02:49,090 --> 00:02:52,530
about giving away things like

00:02:50,320 --> 00:02:54,640
responsibilities like load balancing

00:02:52,530 --> 00:02:56,980
configuring high availability and other

00:02:54,640 --> 00:02:59,110
such things and giving that

00:02:56,980 --> 00:03:02,200
responsibility over to your cloud

00:02:59,110 --> 00:03:04,270
provider so what can you do what

00:03:02,200 --> 00:03:07,390
serverless technologies are available if

00:03:04,270 --> 00:03:10,270
you're not if you're not familiar and

00:03:07,390 --> 00:03:15,070
the answer on AWS is absolutely loads

00:03:10,270 --> 00:03:16,450
this is a tiny fraction of the names of

00:03:15,070 --> 00:03:19,420
some of the service technologies that

00:03:16,450 --> 00:03:22,980
AWS offer they were largely chosen

00:03:19,420 --> 00:03:25,330
because they had different colored logos

00:03:22,980 --> 00:03:27,480
but do take them down since some great

00:03:25,330 --> 00:03:31,210
technologies up there Aurora is

00:03:27,480 --> 00:03:32,650
blisteringly fast and that is a database

00:03:31,210 --> 00:03:34,420
up in the cloud it's a database where

00:03:32,650 --> 00:03:36,010
you don't have to deal with high

00:03:34,420 --> 00:03:38,140
availability of your database you're not

00:03:36,010 --> 00:03:39,760
dealing with storage you basically just

00:03:38,140 --> 00:03:43,510
say I want to use

00:03:39,760 --> 00:03:45,880
Postgres as my sort of query language

00:03:43,510 --> 00:03:48,370
and then you get this database that just

00:03:45,880 --> 00:03:49,480
scales with your application and one of

00:03:48,370 --> 00:03:51,460
the brilliant things about surf

00:03:49,480 --> 00:03:52,630
serverless technology's pretty much

00:03:51,460 --> 00:03:54,430
everything that you see on here

00:03:52,630 --> 00:03:56,770
particularly like lambdas which we're

00:03:54,430 --> 00:03:59,560
going to get into in a bit is that you

00:03:56,770 --> 00:04:01,330
really pay for what you use so if your

00:03:59,560 --> 00:04:03,940
lambda is getting called once a month

00:04:01,330 --> 00:04:06,970
you only pay for that one in vacation

00:04:03,940 --> 00:04:09,790
it's not like you're kind of old school

00:04:06,970 --> 00:04:12,610
cloud model where you configure an ec2

00:04:09,790 --> 00:04:15,070
instance and you are paying to have that

00:04:12,610 --> 00:04:17,290
instance running in your server ready to

00:04:15,070 --> 00:04:19,450
receive those requests if you're not

00:04:17,290 --> 00:04:22,060
using that API or you're using that

00:04:19,450 --> 00:04:24,940
resource you don't pay for it which is

00:04:22,060 --> 00:04:26,890
an easy thing to sell to your

00:04:24,940 --> 00:04:29,230
nice friends and as a consultant it's

00:04:26,890 --> 00:04:32,440
really great to sell to her businesses

00:04:29,230 --> 00:04:35,020
as well so when we're talking about

00:04:32,440 --> 00:04:38,860
serverless api's as was the title of my

00:04:35,020 --> 00:04:41,470
talk key component inside AWS is known

00:04:38,860 --> 00:04:44,620
as the api gateway that is either a

00:04:41,470 --> 00:04:47,200
restful or WebSockets api that you can

00:04:44,620 --> 00:04:49,210
configure you can configure it using

00:04:47,200 --> 00:04:51,880
swagger I'm not going to go into that as

00:04:49,210 --> 00:04:54,670
much today but it there is some great

00:04:51,880 --> 00:04:57,190
tooling that my friend Matt over there

00:04:54,670 --> 00:05:01,210
in the mustard yellow shirt has written

00:04:57,190 --> 00:05:04,390
and you can by adding swagger

00:05:01,210 --> 00:05:07,330
annotations to your JavaScript code you

00:05:04,390 --> 00:05:10,660
can effectively have your API gateway

00:05:07,330 --> 00:05:13,240
and your API version controlled and move

00:05:10,660 --> 00:05:15,070
forwards with your lander you can have

00:05:13,240 --> 00:05:17,680
things like your course configuration

00:05:15,070 --> 00:05:20,410
and validation all done inside API

00:05:17,680 --> 00:05:22,750
gateway configured in swagger right next

00:05:20,410 --> 00:05:26,610
to the business logic of your functions

00:05:22,750 --> 00:05:30,340
it makes for hugely maintainable code

00:05:26,610 --> 00:05:32,380
which is really really helpful when

00:05:30,340 --> 00:05:35,260
you're talking about serverless

00:05:32,380 --> 00:05:36,580
applications as you'll see in a bit the

00:05:35,260 --> 00:05:39,600
next thing I'm going to talk about and

00:05:36,580 --> 00:05:42,460
talk about this quite a lot are lambdas

00:05:39,600 --> 00:05:46,750
lambdas if you are lambda if you're not

00:05:42,460 --> 00:05:48,310
familiar is the is a function as a

00:05:46,750 --> 00:05:51,580
service

00:05:48,310 --> 00:05:54,660
AWS service that is provided to you they

00:05:51,580 --> 00:05:58,990
are small independent units of code

00:05:54,660 --> 00:06:02,740
which can be executed as a result of any

00:05:58,990 --> 00:06:05,620
kind of as a result of an event so that

00:06:02,740 --> 00:06:07,390
could be someone uploading a picture to

00:06:05,620 --> 00:06:10,000
an s3 bucket that you've configured a

00:06:07,390 --> 00:06:11,380
database someone adding something or

00:06:10,000 --> 00:06:13,840
doing something in a database in your

00:06:11,380 --> 00:06:15,850
back-end or it could be someone hitting

00:06:13,840 --> 00:06:18,250
your API gateway and you put that

00:06:15,850 --> 00:06:23,080
function to provide whatever it is you

00:06:18,250 --> 00:06:24,750
that your API does so as you can kind of

00:06:23,080 --> 00:06:28,360
see where I'm going it's micro-services

00:06:24,750 --> 00:06:31,390
everywhere and they really are super

00:06:28,360 --> 00:06:33,520
tiny as an example here this was taken

00:06:31,390 --> 00:06:35,050
straight off the AWS website and I

00:06:33,520 --> 00:06:36,080
promise we'll move on from them in a

00:06:35,050 --> 00:06:38,180
minute

00:06:36,080 --> 00:06:41,240
you've got here the idea of just a

00:06:38,180 --> 00:06:43,940
photos taken users using an app uploads

00:06:41,240 --> 00:06:46,910
it into an s3 bucket and you've got an

00:06:43,940 --> 00:06:49,160
AWS lambda there that would then resize

00:06:46,910 --> 00:06:51,710
that image so it's optimized for the

00:06:49,160 --> 00:06:54,550
different devices on which the Seattle

00:06:51,710 --> 00:06:56,780
Times can be viewed and downloaded

00:06:54,550 --> 00:06:58,280
that's just one kind of really simple

00:06:56,780 --> 00:07:00,650
use case that you can see here the

00:06:58,280 --> 00:07:03,890
lambda would be triggered from the

00:07:00,650 --> 00:07:05,510
upload of the picture another example

00:07:03,890 --> 00:07:07,940
would be if you're running a social

00:07:05,510 --> 00:07:08,540
network and someone sends out a status

00:07:07,940 --> 00:07:09,830
update

00:07:08,540 --> 00:07:12,140
you know maybe they take a picture of

00:07:09,830 --> 00:07:15,590
their food or whatever it is people do

00:07:12,140 --> 00:07:18,260
on social media you know you have a

00:07:15,590 --> 00:07:20,930
lambda that is triggered by that and

00:07:18,260 --> 00:07:24,680
that would then send an SMS notification

00:07:20,930 --> 00:07:27,320
another service service by a AWS and

00:07:24,680 --> 00:07:30,380
that can then send a notification to all

00:07:27,320 --> 00:07:33,440
of the users friends to say hey check

00:07:30,380 --> 00:07:33,950
out this salad that I just got from this

00:07:33,440 --> 00:07:39,200
Kokua

00:07:33,950 --> 00:07:42,520
robot it's great yeah cool so some best

00:07:39,200 --> 00:07:45,200
practices when writing code for lambda

00:07:42,520 --> 00:07:46,580
so on the left here we have a few that

00:07:45,200 --> 00:07:48,470
I'm really gonna I'm going to talk about

00:07:46,580 --> 00:07:51,230
so one of the biggest things when

00:07:48,470 --> 00:07:52,940
writing lambdas is to really separate

00:07:51,230 --> 00:07:54,500
your business logic because one of the

00:07:52,940 --> 00:07:57,710
key things that lambdas are trying to do

00:07:54,500 --> 00:07:59,780
is create these tiny little bits of

00:07:57,710 --> 00:08:01,910
business functionality that you drop

00:07:59,780 --> 00:08:03,530
into your application in different

00:08:01,910 --> 00:08:06,230
places like I said whether it's the ones

00:08:03,530 --> 00:08:07,970
uploaded a picture to a data store

00:08:06,230 --> 00:08:10,910
someone's done something a database

00:08:07,970 --> 00:08:13,700
whatever it is and so you just want to

00:08:10,910 --> 00:08:15,320
really distill that down and that has

00:08:13,700 --> 00:08:16,760
performance benefits as well which is

00:08:15,320 --> 00:08:18,650
super important something I haven't

00:08:16,760 --> 00:08:20,690
measured mentioned is that lambdas are

00:08:18,650 --> 00:08:22,610
charged based on every hundred

00:08:20,690 --> 00:08:26,030
milliseconds of processing time that you

00:08:22,610 --> 00:08:28,490
use so if you can simplify your logic

00:08:26,030 --> 00:08:31,670
and you can take it down from 250

00:08:28,490 --> 00:08:33,890
milliseconds to 190 that actually has an

00:08:31,670 --> 00:08:37,460
impact on your bottom line and it's way

00:08:33,890 --> 00:08:39,950
easier to sell that sort of thing to the

00:08:37,460 --> 00:08:43,490
product owners of the world and these

00:08:39,950 --> 00:08:45,980
other people the next thing I'm going to

00:08:43,490 --> 00:08:47,660
talk about is around execution context

00:08:45,980 --> 00:08:49,140
reuse and again this is a performance

00:08:47,660 --> 00:08:51,390
optimization

00:08:49,140 --> 00:08:53,670
land is under the hood are effectively

00:08:51,390 --> 00:08:55,680
tiny little containers that get spun up

00:08:53,670 --> 00:08:58,140
and there's another slider I'm gonna go

00:08:55,680 --> 00:09:00,930
a little bit deeper into this but what

00:08:58,140 --> 00:09:02,970
you want to do is you have a cold start

00:09:00,930 --> 00:09:04,830
and a warm start and that is when you

00:09:02,970 --> 00:09:06,810
are spinning up a new container that's

00:09:04,830 --> 00:09:08,010
going to take you some time and you're

00:09:06,810 --> 00:09:10,590
also going to do some initialization

00:09:08,010 --> 00:09:13,260
ready for your business logic if we can

00:09:10,590 --> 00:09:15,960
make sure that we are reusing as much of

00:09:13,260 --> 00:09:17,700
that container as possible then when

00:09:15,960 --> 00:09:19,170
you're when that second invocation of

00:09:17,700 --> 00:09:20,940
that lambda comes and you've got a warm

00:09:19,170 --> 00:09:24,110
container doesn't need to be respawn up

00:09:20,940 --> 00:09:26,610
you are again you're saving money and

00:09:24,110 --> 00:09:29,040
you know who doesn't like money I don't

00:09:26,610 --> 00:09:30,180
know where else to take that and the

00:09:29,040 --> 00:09:31,680
other thing that I really advise you to

00:09:30,180 --> 00:09:34,650
do is you minimize your package size and

00:09:31,680 --> 00:09:36,420
this is where JavaScript has a huge

00:09:34,650 --> 00:09:39,360
amount of headway over some of your more

00:09:36,420 --> 00:09:41,910
traditional languages you know if you're

00:09:39,360 --> 00:09:45,270
talking about putting class files and

00:09:41,910 --> 00:09:46,890
jars up in your AWS Lander and you can

00:09:45,270 --> 00:09:51,600
and if that's the language you like

00:09:46,890 --> 00:09:53,190
great but when we can with JavaScript

00:09:51,600 --> 00:09:55,410
you can create these really really

00:09:53,190 --> 00:09:57,090
little tiny text files as I'm sure you

00:09:55,410 --> 00:09:58,770
all know where you minify your code and

00:09:57,090 --> 00:10:00,810
you uglify your code and all that sort

00:09:58,770 --> 00:10:03,750
of thing I can you get it down to a few

00:10:00,810 --> 00:10:06,030
you know kilobytes that you have in your

00:10:03,750 --> 00:10:07,950
lambda that's going to really improve

00:10:06,030 --> 00:10:10,350
your cold start times you have way less

00:10:07,950 --> 00:10:11,910
to load and way less to get running and

00:10:10,350 --> 00:10:14,310
that's where javascript is going to

00:10:11,910 --> 00:10:16,530
start invading people's backends and you

00:10:14,310 --> 00:10:17,970
know the likes of Java and c-sharp

00:10:16,530 --> 00:10:20,820
already and the need to be worried about

00:10:17,970 --> 00:10:21,870
that in terms of the points on the right

00:10:20,820 --> 00:10:23,670
which hopefully you're going to read

00:10:21,870 --> 00:10:26,400
there's some great articles online I

00:10:23,670 --> 00:10:29,490
mean lambda is it was the one of the

00:10:26,400 --> 00:10:30,600
first kind of service services that AWS

00:10:29,490 --> 00:10:32,670
provides there's loads of information

00:10:30,600 --> 00:10:36,300
including a great white paper there if

00:10:32,670 --> 00:10:40,920
you want to get into the details of this

00:10:36,300 --> 00:10:43,440
so just was talking about with execution

00:10:40,920 --> 00:10:46,920
contexts and execution context reuse

00:10:43,440 --> 00:10:49,740
this is kind of the lifecycle of an AWS

00:10:46,920 --> 00:10:50,790
Lander so what you have is this thing

00:10:49,740 --> 00:10:52,920
where you're going to need to download

00:10:50,790 --> 00:10:55,620
your code and any dependencies of your

00:10:52,920 --> 00:10:57,120
code and that's going to be the zip file

00:10:55,620 --> 00:10:58,920
that you upload that actually gets

00:10:57,120 --> 00:11:02,040
stored in an s3 bucket somewhere and

00:10:58,920 --> 00:11:02,910
then AWS have to start up these tiny

00:11:02,040 --> 00:11:04,950
containers that

00:11:02,910 --> 00:11:06,540
it's not as expensive as it might sound

00:11:04,950 --> 00:11:08,850
they've done a lot of work into that

00:11:06,540 --> 00:11:11,490
then you've got to initialize and start

00:11:08,850 --> 00:11:13,500
your code and that initializations there

00:11:11,490 --> 00:11:14,370
could be opening up a connection to a

00:11:13,500 --> 00:11:17,070
database

00:11:14,370 --> 00:11:20,430
it could be opening a connection to an

00:11:17,070 --> 00:11:22,470
s3 bucket whatever it is that's then the

00:11:20,430 --> 00:11:24,870
next step and then finally we get on to

00:11:22,470 --> 00:11:27,690
your the execution of your business

00:11:24,870 --> 00:11:29,010
logic and this is where for now I'm

00:11:27,690 --> 00:11:31,020
going to focus for the purpose of this

00:11:29,010 --> 00:11:33,870
talks we don't have too long to talk

00:11:31,020 --> 00:11:38,040
about kind of low-level optimizations of

00:11:33,870 --> 00:11:39,900
cold starts but like I said that AWS

00:11:38,040 --> 00:11:41,220
white paper in the previous slide has

00:11:39,900 --> 00:11:43,500
some really awesome stuff and there's

00:11:41,220 --> 00:11:44,640
some great stuff on the AWS labs if you

00:11:43,500 --> 00:11:48,030
want to start designing your own

00:11:44,640 --> 00:11:50,130
runtimes and things like that to get in

00:11:48,030 --> 00:11:52,680
there so I'm going to talk about my

00:11:50,130 --> 00:11:55,440
library I said it's called Mandor you

00:11:52,680 --> 00:11:57,390
can find me on github and I have this

00:11:55,440 --> 00:11:59,010
library there so there's my github tag

00:11:57,390 --> 00:12:02,730
if you feel like following me or

00:11:59,010 --> 00:12:04,200
whatever I'm looking for more friends so

00:12:02,730 --> 00:12:06,440
a little bit of shameless self-promotion

00:12:04,200 --> 00:12:08,640
but this library was actually X but

00:12:06,440 --> 00:12:11,430
inspired by another library called MIDI

00:12:08,640 --> 00:12:14,640
J MIDI Jas I just have a bit of a an

00:12:11,430 --> 00:12:16,560
obsession with some with functional

00:12:14,640 --> 00:12:19,620
programming and so I wanted to try and

00:12:16,560 --> 00:12:22,230
create a pure more immutable version of

00:12:19,620 --> 00:12:24,480
MIDI Jas and I just found that I've

00:12:22,230 --> 00:12:25,920
added a few extra features that they

00:12:24,480 --> 00:12:28,560
didn't have and I'm really really happy

00:12:25,920 --> 00:12:30,060
with it so here I am to tell you all

00:12:28,560 --> 00:12:31,590
about it

00:12:30,060 --> 00:12:38,160
so let's finally take a look at some

00:12:31,590 --> 00:12:39,810
code why not so this is what I'm going

00:12:38,160 --> 00:12:42,510
to talk about the evolution of kind of a

00:12:39,810 --> 00:12:46,020
little pet project that I was working on

00:12:42,510 --> 00:12:47,880
while I wasn't consulting with Scott

00:12:46,020 --> 00:12:50,610
logic and this is kind of where you

00:12:47,880 --> 00:12:53,610
might start if you were writing a an AWS

00:12:50,610 --> 00:12:55,200
lambda that was behind say an API

00:12:53,610 --> 00:12:56,280
gateway so if you're writing an API

00:12:55,200 --> 00:12:59,400
you're going to need to do something

00:12:56,280 --> 00:13:00,360
really basic like so you've got a JSON

00:12:59,400 --> 00:13:02,400
body in your request

00:13:00,360 --> 00:13:04,350
you're gonna want to deserialize the

00:13:02,400 --> 00:13:05,700
JSON from that body check that it's

00:13:04,350 --> 00:13:07,500
valid JSON you might have some

00:13:05,700 --> 00:13:10,650
validation in there you're going to want

00:13:07,500 --> 00:13:11,880
to and deal with the any errors in that

00:13:10,650 --> 00:13:13,830
jason and that sort of thing and that's

00:13:11,880 --> 00:13:15,170
going to add a lot of boilerplate to

00:13:13,830 --> 00:13:17,720
your

00:13:15,170 --> 00:13:19,779
lambda functions and it's not talking

00:13:17,720 --> 00:13:22,399
about your core logic so Mandor

00:13:19,779 --> 00:13:25,069
leverages this idea of a middleware

00:13:22,399 --> 00:13:26,629
pattern where instead i've commented out

00:13:25,069 --> 00:13:28,970
all of that boilerplate and obviously we

00:13:26,629 --> 00:13:32,149
can delete commented code because who

00:13:28,970 --> 00:13:34,549
likes that and instead we just say right

00:13:32,149 --> 00:13:36,470
I've got my async function up I'm using

00:13:34,549 --> 00:13:38,329
the event body I'm going to do some work

00:13:36,470 --> 00:13:39,889
you know I've just got on a wait for the

00:13:38,329 --> 00:13:42,069
function bar in there but that would be

00:13:39,889 --> 00:13:45,350
your real business logic of course and

00:13:42,069 --> 00:13:47,290
return the result and you know I want my

00:13:45,350 --> 00:13:50,809
JSON body parser and that's going to

00:13:47,290 --> 00:13:52,910
deal with any kind of deserializing you

00:13:50,809 --> 00:13:55,999
jason you can write middlewares to do

00:13:52,910 --> 00:13:57,499
your validation as well api gateway has

00:13:55,999 --> 00:13:58,790
some integrations for that but if you're

00:13:57,499 --> 00:14:00,679
doing it in the lambda because you've

00:13:58,790 --> 00:14:02,720
got a cool javascript library or

00:14:00,679 --> 00:14:04,730
whatever you want to make use of the mam

00:14:02,720 --> 00:14:06,350
just totally extensible to write your

00:14:04,730 --> 00:14:09,169
own middlewares and do all of that for

00:14:06,350 --> 00:14:11,540
you and I have this HTTP error handler

00:14:09,169 --> 00:14:14,569
which is also part of the lifecycle of

00:14:11,540 --> 00:14:16,819
Amanda and it allows you to throw these

00:14:14,569 --> 00:14:18,439
errors it will normalize your response

00:14:16,819 --> 00:14:19,910
into something that API gateway can

00:14:18,439 --> 00:14:24,169
understand and it will allow you to

00:14:19,910 --> 00:14:25,910
create a nice consistent API cool so

00:14:24,169 --> 00:14:28,970
like I said I'm talking about the life

00:14:25,910 --> 00:14:31,639
of Amanda my idea for lambda was very

00:14:28,970 --> 00:14:33,559
much that I wanted to use function

00:14:31,639 --> 00:14:37,040
compositions so what I have a kind of

00:14:33,559 --> 00:14:40,429
like four functions that I compose

00:14:37,040 --> 00:14:42,139
together to create your final lambda so

00:14:40,429 --> 00:14:45,649
we start off with initialization and

00:14:42,139 --> 00:14:47,389
this is where you run your the initial

00:14:45,649 --> 00:14:50,509
that initialization stuff so you any

00:14:47,389 --> 00:14:52,939
kind of reusable resources that you want

00:14:50,509 --> 00:14:55,249
to create for your lambda you put them

00:14:52,939 --> 00:14:58,160
in that initialization step which I will

00:14:55,249 --> 00:15:00,619
show you in the next slide and they will

00:14:58,160 --> 00:15:02,689
get reused on any warm start so you

00:15:00,619 --> 00:15:04,039
don't need to worry about that kind of

00:15:02,689 --> 00:15:06,499
thing you don't need to be thinking how

00:15:04,039 --> 00:15:08,660
can i optimize this if it can be reused

00:15:06,499 --> 00:15:11,059
you pop it in there and it will be

00:15:08,660 --> 00:15:13,579
reused for you and you don't have to pay

00:15:11,059 --> 00:15:17,299
that extra cost then we have these

00:15:13,579 --> 00:15:19,399
before Matt before middlewares or pre

00:15:17,299 --> 00:15:21,949
execution middlewares whichever way you

00:15:19,399 --> 00:15:24,259
like and they are going to do things

00:15:21,949 --> 00:15:25,999
like validate the request or the event

00:15:24,259 --> 00:15:27,750
that's triggering your lambda they're

00:15:25,999 --> 00:15:30,840
going to normalize that request

00:15:27,750 --> 00:15:32,400
maybe you want to change the case of

00:15:30,840 --> 00:15:34,110
your headers or I don't know what you

00:15:32,400 --> 00:15:35,640
want to do whatever whatever it is you

00:15:34,110 --> 00:15:37,650
want to do before the execution of your

00:15:35,640 --> 00:15:39,450
business logic it's handled in there

00:15:37,650 --> 00:15:41,850
then of course we have your business

00:15:39,450 --> 00:15:42,390
logic and then your post execution

00:15:41,850 --> 00:15:44,930
middlewares

00:15:42,390 --> 00:15:47,310
and in there you've kind of got the two

00:15:44,930 --> 00:15:49,890
paths so you can have some error

00:15:47,310 --> 00:15:51,390
handling if you are I don't know if

00:15:49,890 --> 00:15:54,090
something's gone wrong or you want to

00:15:51,390 --> 00:15:56,040
respond to say this is bad and you can

00:15:54,090 --> 00:15:58,290
also have normalization of your response

00:15:56,040 --> 00:16:02,610
and in there I do a little bit of work

00:15:58,290 --> 00:16:07,890
to hide some of the nuances of the AWS

00:16:02,610 --> 00:16:10,170
API lambda API and so here what what we

00:16:07,890 --> 00:16:14,000
have is a pretty simple lambda which is

00:16:10,170 --> 00:16:16,740
going to take some JSON in the body and

00:16:14,000 --> 00:16:18,750
it's going to pop it in an s3 bucket for

00:16:16,740 --> 00:16:20,490
me and so what I've done is in my

00:16:18,750 --> 00:16:23,070
initialization step down there I've

00:16:20,490 --> 00:16:24,480
initialized my connection to s3 and like

00:16:23,070 --> 00:16:25,950
I said that's going to get reused that's

00:16:24,480 --> 00:16:28,800
going to get cached them so what that

00:16:25,950 --> 00:16:30,900
means is the more people upload on to

00:16:28,800 --> 00:16:32,370
this app the faster my performance is

00:16:30,900 --> 00:16:34,470
going to be and the faster my

00:16:32,370 --> 00:16:39,540
performance is the less this is going to

00:16:34,470 --> 00:16:42,750
cost me to do which is you know again

00:16:39,540 --> 00:16:45,510
it's it's all money isn't it

00:16:42,750 --> 00:16:47,040
so here's a simple here's a kind of

00:16:45,510 --> 00:16:49,020
architecture for a small application

00:16:47,040 --> 00:16:51,390
that I was working on not gonna go too

00:16:49,020 --> 00:16:53,550
deep into this because I got to watch

00:16:51,390 --> 00:16:56,100
the clock but what we have is a couple

00:16:53,550 --> 00:16:58,710
of serverless front-end web sites

00:16:56,100 --> 00:17:00,810
sitting inside an s3 bucket then we have

00:16:58,710 --> 00:17:03,210
the lambda very similar to the one that

00:17:00,810 --> 00:17:04,949
I just showed you whereby this is

00:17:03,210 --> 00:17:07,410
actually for a recruitment app so I've

00:17:04,949 --> 00:17:09,449
got applicants that are chatting to TRG

00:17:07,410 --> 00:17:12,510
they upload their details through that

00:17:09,449 --> 00:17:14,069
through the front end that is going to

00:17:12,510 --> 00:17:15,990
talk to a lambda which allows them to

00:17:14,069 --> 00:17:18,480
put all their information safely in an

00:17:15,990 --> 00:17:21,750
s3 bucket and some other data that goes

00:17:18,480 --> 00:17:23,819
into a dynamo DB database and we've got

00:17:21,750 --> 00:17:25,530
some other stuff to let tlg and the

00:17:23,819 --> 00:17:29,340
recruitment managers know how much

00:17:25,530 --> 00:17:32,410
you'll want to work with them should

00:17:29,340 --> 00:17:36,230
mention scott logical also hiring

00:17:32,410 --> 00:17:38,300
cool as the best practice I quite like

00:17:36,230 --> 00:17:39,620
in this application we pre-configured

00:17:38,300 --> 00:17:41,120
all of my middleware so I just saw

00:17:39,620 --> 00:17:43,820
wrapped up and I said well I'm gonna

00:17:41,120 --> 00:17:47,150
have this header normalizer so that my

00:17:43,820 --> 00:17:48,260
headers will look look quite good sorry

00:17:47,150 --> 00:17:51,650
this dangling things a little

00:17:48,260 --> 00:17:54,260
distracting I've got my Jason body Pazza

00:17:51,650 --> 00:17:57,260
I've also created this options request

00:17:54,260 --> 00:17:59,300
interceptor to handle the to handle the

00:17:57,260 --> 00:18:01,430
cause because like I said man is totally

00:17:59,300 --> 00:18:03,530
extensible if you've got some bit of

00:18:01,430 --> 00:18:05,660
functionality you want to add as your

00:18:03,530 --> 00:18:07,310
boilerplate or whatever perhaps an

00:18:05,660 --> 00:18:09,680
integration or something like that you

00:18:07,310 --> 00:18:11,960
can write and there is great

00:18:09,680 --> 00:18:14,420
documentation you can write your own

00:18:11,960 --> 00:18:18,320
little piece of middleware and that will

00:18:14,420 --> 00:18:21,320
be incorporated into the workflow and

00:18:18,320 --> 00:18:24,200
then this is what the land this is what

00:18:21,320 --> 00:18:25,880
the lambda for the application we saw

00:18:24,200 --> 00:18:28,360
earlier would end up like it's very

00:18:25,880 --> 00:18:31,610
similar to one I showed you before

00:18:28,360 --> 00:18:33,980
whereby in my initialization step I'm

00:18:31,610 --> 00:18:35,930
going to set up my connection to s3 and

00:18:33,980 --> 00:18:37,700
that's going to get reused and be saving

00:18:35,930 --> 00:18:39,440
me money and then I've got a

00:18:37,700 --> 00:18:42,650
higher-order function where I'm

00:18:39,440 --> 00:18:45,140
generating you signed URLs to allow the

00:18:42,650 --> 00:18:48,650
user to upload their CV securely to the

00:18:45,140 --> 00:18:51,200
s3 bucket so that that can be hidden

00:18:48,650 --> 00:18:55,430
away and there isn't an API exposing any

00:18:51,200 --> 00:18:57,470
of that any of that data the body up

00:18:55,430 --> 00:18:58,940
there because I had I set up that JSON

00:18:57,470 --> 00:19:00,980
body parser that's deserialized that's

00:18:58,940 --> 00:19:02,900
just a normal JSON object it's been

00:19:00,980 --> 00:19:06,440
validated and all of that sort of thing

00:19:02,900 --> 00:19:08,300
you don't have to let it confuse or get

00:19:06,440 --> 00:19:09,950
involved with any of your business logic

00:19:08,300 --> 00:19:12,440
so what we can see here just clearly is

00:19:09,950 --> 00:19:15,800
I'm just going to reduce over the list

00:19:12,440 --> 00:19:20,150
of files or CVS that were going to be

00:19:15,800 --> 00:19:21,500
uploaded and give back the URLs so here

00:19:20,150 --> 00:19:23,540
some things have not talked about which

00:19:21,500 --> 00:19:25,820
I would have loved to chatted about and

00:19:23,540 --> 00:19:26,900
as loads of Scot logic guys over there

00:19:25,820 --> 00:19:28,700
they would love to tell you all about

00:19:26,900 --> 00:19:31,940
them I'm sure as well as some of the

00:19:28,700 --> 00:19:33,410
other things you can be doing so I

00:19:31,940 --> 00:19:36,740
mentioned earlier that you can use

00:19:33,410 --> 00:19:39,440
swagger annotations on your Landers and

00:19:36,740 --> 00:19:41,660
you can use those annotations both to

00:19:39,440 --> 00:19:43,540
test your Landers because Mandurah

00:19:41,660 --> 00:19:46,400
introduces some really great test tools

00:19:43,540 --> 00:19:48,050
as well as to configure your API gateway

00:19:46,400 --> 00:19:51,140
which gives you version controlling and

00:19:48,050 --> 00:19:56,210
links that altogether blue/green

00:19:51,140 --> 00:19:57,860
deployments and just general kind of

00:19:56,210 --> 00:20:01,130
infrastructure as code so the

00:19:57,860 --> 00:20:02,210
integrations with this and say terraform

00:20:01,130 --> 00:20:05,030
and that sort of thing there's some

00:20:02,210 --> 00:20:07,370
really great tooling out there which

00:20:05,030 --> 00:20:09,790
perhaps you can ask questions about if

00:20:07,370 --> 00:20:15,569
you have any thank you

00:20:09,790 --> 00:20:15,569

YouTube URL: https://www.youtube.com/watch?v=JH0-KRBVVTk


