Title: Don't Ask 'Why' In Code Review - JS Roundabout - February 2020
Publication date: 2020-03-11
Playlist: The JS Roundabout
Description: 
	Presented by Minna Niemi, a Senior Software Engineer.

Minna will be giving a talk titled 'Don't ask why in code review' - Code doesnâ€™t have feelings, but humans do.
_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:06,509
hi everyone this talk is titled

00:00:03,389 --> 00:00:08,280
don't ask why in code review and it's

00:00:06,509 --> 00:00:11,010
not going to be a technical deep dive

00:00:08,280 --> 00:00:12,450
into anything really good thing because

00:00:11,010 --> 00:00:14,070
it's the last talk of the evening and

00:00:12,450 --> 00:00:15,000
I'm sure you're all very tired so it's

00:00:14,070 --> 00:00:20,400
going to be just sort of light

00:00:15,000 --> 00:00:23,369
entertainment my name is Mina and I'm a

00:00:20,400 --> 00:00:25,109
developer I've given this talk before at

00:00:23,369 --> 00:00:26,820
a meet-up called set state back in

00:00:25,109 --> 00:00:28,560
October last year some of you may have

00:00:26,820 --> 00:00:30,599
been there so if you've seen this

00:00:28,560 --> 00:00:32,070
already I don't mind if you want to head

00:00:30,599 --> 00:00:34,610
to the pub all right that's fine because

00:00:32,070 --> 00:00:36,329
it's roughly the same thing as before I

00:00:34,610 --> 00:00:38,700
used to work at a company called

00:00:36,329 --> 00:00:40,680
futurists they're hiring full stack

00:00:38,700 --> 00:00:42,719
developers right now anyone looking for

00:00:40,680 --> 00:00:45,239
new opportunities I can tell you it's a

00:00:42,719 --> 00:00:47,250
great place to work and I'll be helping

00:00:45,239 --> 00:00:48,989
out a company called Canton built in

00:00:47,250 --> 00:00:50,610
react native stuff starting next week

00:00:48,989 --> 00:00:53,670
they're also hiring react native

00:00:50,610 --> 00:00:56,329
developers specifically so you know come

00:00:53,670 --> 00:01:00,329
and talk to me if anyone is interested

00:00:56,329 --> 00:01:02,070
this talk is going to be structured like

00:01:00,329 --> 00:01:03,930
this first we're just going to get on

00:01:02,070 --> 00:01:06,659
the same page of what do we mean when we

00:01:03,930 --> 00:01:09,030
talk about code review we're gonna then

00:01:06,659 --> 00:01:11,540
dive into the title of the talk which is

00:01:09,030 --> 00:01:13,680
don't ask why why you shouldn't ask why

00:01:11,540 --> 00:01:16,170
then I'm going to give you some further

00:01:13,680 --> 00:01:17,729
practical advice on how you can start

00:01:16,170 --> 00:01:20,400
improving the way that you do code

00:01:17,729 --> 00:01:23,790
reviews starting tomorrow and then I'll

00:01:20,400 --> 00:01:26,820
give you some concluding commentary now

00:01:23,790 --> 00:01:28,590
what is code review most of us probably

00:01:26,820 --> 00:01:31,229
have gone through this process before

00:01:28,590 --> 00:01:33,360
you write some code then you push your

00:01:31,229 --> 00:01:35,130
changes to somewhere like github or get

00:01:33,360 --> 00:01:37,799
lab where other people can see your

00:01:35,130 --> 00:01:39,570
changes you make a pull request your

00:01:37,799 --> 00:01:41,490
code is reviewed by your colleagues on

00:01:39,570 --> 00:01:43,829
your team usually they'll probably

00:01:41,490 --> 00:01:46,020
request some changes then you can amend

00:01:43,829 --> 00:01:48,119
your code and eventually your code is

00:01:46,020 --> 00:01:51,840
approved and can be merged into whatever

00:01:48,119 --> 00:01:54,630
master or equivalent French and the

00:01:51,840 --> 00:01:58,049
purpose of code of view of course is to

00:01:54,630 --> 00:02:00,479
improve the quality of code so it goes

00:01:58,049 --> 00:02:04,380
from good quality through really good

00:02:00,479 --> 00:02:07,740
quality code review is all about

00:02:04,380 --> 00:02:10,200
Quality Assurance it's making the code

00:02:07,740 --> 00:02:13,440
and the product better now code review

00:02:10,200 --> 00:02:13,890
we have to remember is a small part of

00:02:13,440 --> 00:02:15,390
call

00:02:13,890 --> 00:02:18,870
there's more to Quality Assurance

00:02:15,390 --> 00:02:20,880
there's automated tests manual tests you

00:02:18,870 --> 00:02:23,010
know design reviews and all this stuff

00:02:20,880 --> 00:02:26,490
but code review definitely is about

00:02:23,010 --> 00:02:28,230
making things better and the kind of

00:02:26,490 --> 00:02:30,420
fundamental question we're trying to

00:02:28,230 --> 00:02:34,650
answer when we do code review is of

00:02:30,420 --> 00:02:37,200
course is the code good when you are

00:02:34,650 --> 00:02:39,720
someone who's written code and it's

00:02:37,200 --> 00:02:42,960
being reviewed this question however can

00:02:39,720 --> 00:02:45,690
really morph in your head easily into

00:02:42,960 --> 00:02:49,140
another question which is is my code

00:02:45,690 --> 00:02:53,940
good and then this in turn can easily

00:02:49,140 --> 00:02:57,440
morph into my good code now we all know

00:02:53,940 --> 00:03:00,840
that code itself doesn't have feelings

00:02:57,440 --> 00:03:04,590
however humans have feelings this is not

00:03:00,840 --> 00:03:08,040
a human by the way this is a dog now

00:03:04,590 --> 00:03:10,560
this talk was inspired by a quote I read

00:03:08,040 --> 00:03:13,500
from a very very excellent book it goes

00:03:10,560 --> 00:03:16,860
like this regardless of what language Y

00:03:13,500 --> 00:03:18,750
is translated into it's accusatory now

00:03:16,860 --> 00:03:20,790
this may strike us as surprising because

00:03:18,750 --> 00:03:23,760
when we use the word Y in casual

00:03:20,790 --> 00:03:28,170
conversation we use it sort of like huh

00:03:23,760 --> 00:03:32,820
why is that but when in code review we

00:03:28,170 --> 00:03:36,239
write Y it's on the receivers end to

00:03:32,820 --> 00:03:37,950
interpret how the Y is said it's a very

00:03:36,239 --> 00:03:43,470
powerful word and can be interpreted

00:03:37,950 --> 00:03:45,570
wrong very easily so you're like oh why

00:03:43,470 --> 00:03:48,930
did you do this but the other person

00:03:45,570 --> 00:03:51,450
interprets it as why did you do this why

00:03:48,930 --> 00:03:54,840
did you write code like that why is this

00:03:51,450 --> 00:03:58,500
here and not there right let's take an

00:03:54,840 --> 00:04:01,440
example two programmers football and

00:03:58,500 --> 00:04:04,320
balloon now balloon has written some

00:04:01,440 --> 00:04:07,350
code and football has kindly reviewed

00:04:04,320 --> 00:04:09,600
the code that balloon has written but

00:04:07,350 --> 00:04:11,640
while comments on this code and says why

00:04:09,600 --> 00:04:14,100
multi-line comment syntax here and not

00:04:11,640 --> 00:04:16,950
the same as four lines before innocent

00:04:14,100 --> 00:04:19,739
enough question but for balloon this

00:04:16,950 --> 00:04:21,180
might easily feel like what like are you

00:04:19,739 --> 00:04:24,000
stupid or something how could you miss

00:04:21,180 --> 00:04:26,980
that it's obvious and I feel like oh

00:04:24,000 --> 00:04:30,760
sorry didn't mean it

00:04:26,980 --> 00:04:34,060
now please don't misunderstand giving up

00:04:30,760 --> 00:04:37,660
on the word why isn't about giving up on

00:04:34,060 --> 00:04:40,060
quality not at all I'll try and explain

00:04:37,660 --> 00:04:43,690
this a little bit using a thing called

00:04:40,060 --> 00:04:45,130
radical candor framework and you can

00:04:43,690 --> 00:04:48,490
read more about it from King Scott's

00:04:45,130 --> 00:04:51,370
excellent book now when we do code

00:04:48,490 --> 00:04:53,920
review the whole point of code review is

00:04:51,370 --> 00:04:56,290
to challenge your colleagues it's about

00:04:53,920 --> 00:04:59,530
making the code better and you need that

00:04:56,290 --> 00:05:03,280
challenge there but in order to really

00:04:59,530 --> 00:05:06,430
make good feedback work you have to also

00:05:03,280 --> 00:05:08,950
show empathy otherwise things may come

00:05:06,430 --> 00:05:12,070
across as obnoxiously aggressive by

00:05:08,950 --> 00:05:14,950
accident now we don't want to

00:05:12,070 --> 00:05:17,400
accidentally not challenge people but we

00:05:14,950 --> 00:05:21,610
also don't want to be too aggressive

00:05:17,400 --> 00:05:24,760
ideally we could challenge and empathize

00:05:21,610 --> 00:05:26,920
at the same time and I think this is

00:05:24,760 --> 00:05:28,960
important because code review is all

00:05:26,920 --> 00:05:31,000
about feedback it is a feedback

00:05:28,960 --> 00:05:35,530
situation where we are giving feedback

00:05:31,000 --> 00:05:38,020
to each other in a team now the word why

00:05:35,530 --> 00:05:40,150
may not be the best choice of word when

00:05:38,020 --> 00:05:42,310
you're doing code review but luckily

00:05:40,150 --> 00:05:45,280
there are other words you could say

00:05:42,310 --> 00:05:48,040
perhaps this could be changed too or it

00:05:45,280 --> 00:05:50,650
looks like this is or can this be made

00:05:48,040 --> 00:05:55,390
more like or I'm not I'm not sure I

00:05:50,650 --> 00:05:58,210
understand yet could you clarify and the

00:05:55,390 --> 00:06:01,180
reason why we want to avoid the word why

00:05:58,210 --> 00:06:03,850
is we want to avoid those negative

00:06:01,180 --> 00:06:06,340
feelings because when we go through this

00:06:03,850 --> 00:06:08,110
loop and then we feel bad after we

00:06:06,340 --> 00:06:10,180
accidentally think that our colleague

00:06:08,110 --> 00:06:13,330
who wasn't actually angry but we

00:06:10,180 --> 00:06:15,250
perceived them as being angry then we'll

00:06:13,330 --> 00:06:17,020
remember this feedback loop with

00:06:15,250 --> 00:06:20,980
negative feelings and we'll find it more

00:06:17,020 --> 00:06:23,260
difficult to learn so to get to good

00:06:20,980 --> 00:06:26,290
quality if we could make the whole code

00:06:23,260 --> 00:06:28,660
review process a happy one a one where

00:06:26,290 --> 00:06:31,690
we can all feel good about receiving and

00:06:28,660 --> 00:06:33,970
giving feedback then we'll also more

00:06:31,690 --> 00:06:36,040
readily learn and we'll write better

00:06:33,970 --> 00:06:40,270
code because happy teams are productive

00:06:36,040 --> 00:06:43,120
teams so I would argue strongly that

00:06:40,270 --> 00:06:46,690
secret to good quality software is good

00:06:43,120 --> 00:06:49,980
code review culture so the first piece

00:06:46,690 --> 00:06:53,350
of advice in this talk is don't ask my

00:06:49,980 --> 00:06:56,160
now I will go on to giving seven more

00:06:53,350 --> 00:06:59,560
pieces of advice but much more quickly

00:06:56,160 --> 00:07:04,000
tip number two format your comments as

00:06:59,560 --> 00:07:06,070
an observation here's the same example

00:07:04,000 --> 00:07:09,910
as before but in a slightly different

00:07:06,070 --> 00:07:11,890
way football instead says it looks like

00:07:09,910 --> 00:07:15,760
there's an inconsistency in the comment

00:07:11,890 --> 00:07:18,430
syntax what this does is it allows

00:07:15,760 --> 00:07:21,070
balloon to reactors oh yeah I see that

00:07:18,430 --> 00:07:24,430
too it's not about you and me anymore

00:07:21,070 --> 00:07:27,550
it's about the code it takes the human

00:07:24,430 --> 00:07:29,920
out of the equation so instead of anyone

00:07:27,550 --> 00:07:31,810
feeling like I suck at coding because

00:07:29,920 --> 00:07:34,090
they received a comment like why did you

00:07:31,810 --> 00:07:38,860
write that code they'll feel more like

00:07:34,090 --> 00:07:41,350
oh yeah whatever hello and then that

00:07:38,860 --> 00:07:45,580
enforces a feeling of sort of trust in

00:07:41,350 --> 00:07:48,850
YouTube now tip number three much in the

00:07:45,580 --> 00:07:51,940
same vein is use emojis it turns out

00:07:48,850 --> 00:07:53,770
that even neutral emojis are really good

00:07:51,940 --> 00:07:55,510
at just slightly lifting the mood and

00:07:53,770 --> 00:07:57,450
they make you feel like oh yeah that

00:07:55,510 --> 00:08:00,400
person doesn't hate me they use the

00:07:57,450 --> 00:08:04,600
hamburger emoji they're not angry right

00:08:00,400 --> 00:08:07,570
and here's an example my favorite one is

00:08:04,600 --> 00:08:09,430
when I see a typo somewhere usually it's

00:08:07,570 --> 00:08:11,500
in a comment or something and I'll just

00:08:09,430 --> 00:08:13,000
put like a articulated lawyer or

00:08:11,500 --> 00:08:17,620
something here's a type of observation

00:08:13,000 --> 00:08:19,660
emoji tip number four when giving

00:08:17,620 --> 00:08:23,520
feedback suggests actionable

00:08:19,660 --> 00:08:26,530
alternatives let's take another example

00:08:23,520 --> 00:08:29,680
here telephone is making comment on

00:08:26,530 --> 00:08:31,870
these three lines they're saying the

00:08:29,680 --> 00:08:33,670
code could be more concise if we omit

00:08:31,870 --> 00:08:36,640
the Declaration of the spinner value

00:08:33,670 --> 00:08:39,250
variable like and then there's a clear

00:08:36,640 --> 00:08:41,410
example in code now it turns out that

00:08:39,250 --> 00:08:43,450
actually people don't hate it if you

00:08:41,410 --> 00:08:45,190
just write an example piece of code for

00:08:43,450 --> 00:08:47,050
them you might think oh people don't

00:08:45,190 --> 00:08:49,300
want me to write their code for them but

00:08:47,050 --> 00:08:51,880
it does clarify exactly what you mean

00:08:49,300 --> 00:08:54,040
and it's very useful in particular if

00:08:51,880 --> 00:08:54,620
you're commenting on like multiple lines

00:08:54,040 --> 00:08:56,990
of

00:08:54,620 --> 00:08:59,630
hey what if we could make this like this

00:08:56,990 --> 00:09:02,510
instead because we're programmers we

00:08:59,630 --> 00:09:04,910
talk in code so think of it as using the

00:09:02,510 --> 00:09:08,600
language that we all know how to read

00:09:04,910 --> 00:09:11,750
and know how to communicate with tip

00:09:08,600 --> 00:09:15,590
number five find something nice to say

00:09:11,750 --> 00:09:18,260
now this one is kind of obvious but in a

00:09:15,590 --> 00:09:20,150
way this has been misunderstood I've

00:09:18,260 --> 00:09:25,670
received some feedback from this talk

00:09:20,150 --> 00:09:28,460
last time I did it that being nice isn't

00:09:25,670 --> 00:09:31,520
really what code review is about and I

00:09:28,460 --> 00:09:34,070
agree kind of but there's this kind of

00:09:31,520 --> 00:09:36,740
common misconception about how one

00:09:34,070 --> 00:09:41,330
should give feedback which is the

00:09:36,740 --> 00:09:44,060
sandwich which is you begin your code

00:09:41,330 --> 00:09:45,890
review with something nice then you just

00:09:44,060 --> 00:09:47,720
kind of dish out the awful stuff and

00:09:45,890 --> 00:09:49,550
then as long as you round it up nicely

00:09:47,720 --> 00:09:51,470
and everything will be okay right

00:09:49,550 --> 00:09:53,510
because you said something nice but

00:09:51,470 --> 00:09:56,780
that's not the point of saying something

00:09:53,510 --> 00:09:59,360
nice so let's go back to the radical

00:09:56,780 --> 00:10:01,280
candor framework again when we're doing

00:09:59,360 --> 00:10:06,650
that then we're kind of falling into

00:10:01,280 --> 00:10:08,300
these weird zones because sort of saying

00:10:06,650 --> 00:10:10,940
something nice isn't about not

00:10:08,300 --> 00:10:13,940
challenging directly we don't need to go

00:10:10,940 --> 00:10:16,340
there the only thing we want to avoid is

00:10:13,940 --> 00:10:18,800
accidentally falling into obnoxious

00:10:16,340 --> 00:10:22,610
aggression now the way that we can give

00:10:18,800 --> 00:10:25,820
positive feedback in radical candor is

00:10:22,610 --> 00:10:28,090
by meaning what you say and by being

00:10:25,820 --> 00:10:31,160
quite specific about the things that

00:10:28,090 --> 00:10:33,620
you're commenting on specific feedback

00:10:31,160 --> 00:10:37,070
is always better than vague feedback

00:10:33,620 --> 00:10:38,870
saying oh good job isn't as good as that

00:10:37,070 --> 00:10:42,910
particular thing that you did was good

00:10:38,870 --> 00:10:44,060
and it surprised me here's an example

00:10:42,910 --> 00:10:46,430
pancakes

00:10:44,060 --> 00:10:48,410
says I like how you've written this Otto

00:10:46,430 --> 00:10:49,100
collapsing functionality referring to

00:10:48,410 --> 00:10:52,340
four lines

00:10:49,100 --> 00:10:56,900
it's rather elegant specific much better

00:10:52,340 --> 00:10:58,700
than good job now we're going to go a

00:10:56,900 --> 00:11:02,450
little bit into some more advanced

00:10:58,700 --> 00:11:04,340
topics of code review so the other

00:11:02,450 --> 00:11:06,110
person just doesn't agree and I've been

00:11:04,340 --> 00:11:08,500
arguing in this poll request for a long

00:11:06,110 --> 00:11:11,230
time should I keep arguing

00:11:08,500 --> 00:11:14,690
how many people have had this experience

00:11:11,230 --> 00:11:15,980
at least a couple maybe about 30 percent

00:11:14,690 --> 00:11:19,640
well I'll tell you it happens quite

00:11:15,980 --> 00:11:22,250
often anyway the answer is maybe you

00:11:19,640 --> 00:11:24,800
should keep arguing sometimes it's

00:11:22,250 --> 00:11:26,570
really good to keep arguing especially

00:11:24,800 --> 00:11:28,700
if there are obvious errors in the code

00:11:26,570 --> 00:11:30,590
right that's the whole point

00:11:28,700 --> 00:11:33,230
of quality assurance the whole point of

00:11:30,590 --> 00:11:37,520
code review to make it better now I'm

00:11:33,230 --> 00:11:39,800
talking about errors not like issues so

00:11:37,520 --> 00:11:42,470
the other thing is when code does not

00:11:39,800 --> 00:11:44,570
comply with the agreed standards and by

00:11:42,470 --> 00:11:48,800
agreed standards I mean whatever your

00:11:44,570 --> 00:11:50,690
team has agreed to together obviously if

00:11:48,800 --> 00:11:52,760
you've made a commitment as a team to

00:11:50,690 --> 00:11:55,220
comply to certain standards then yeah

00:11:52,760 --> 00:11:56,330
then you comply to them otherwise you

00:11:55,220 --> 00:12:00,530
have to have a whole meeting with your

00:11:56,330 --> 00:12:03,260
team again however you may not want to

00:12:00,530 --> 00:12:05,480
argue so much if it's about quotes

00:12:03,260 --> 00:12:09,320
though this one may strike some people

00:12:05,480 --> 00:12:10,730
as obvious but using something like a

00:12:09,320 --> 00:12:12,620
tool like prettier which is a Auto

00:12:10,730 --> 00:12:14,870
formatting tool which takes your linting

00:12:12,620 --> 00:12:16,640
rules and when you're writing code it

00:12:14,870 --> 00:12:18,260
will format your code for you so you

00:12:16,640 --> 00:12:20,090
never even have to think about complying

00:12:18,260 --> 00:12:23,000
with the linting rules these are great

00:12:20,090 --> 00:12:25,790
for reducing the overhead of code review

00:12:23,000 --> 00:12:27,680
the sort of mental overhead of having to

00:12:25,790 --> 00:12:30,980
keep everything in line thoroughly

00:12:27,680 --> 00:12:32,990
recommend another time when arguing may

00:12:30,980 --> 00:12:35,510
not be such a good idea is when you have

00:12:32,990 --> 00:12:37,040
concerns about someone's code but you

00:12:35,510 --> 00:12:40,010
can't really suggest something

00:12:37,040 --> 00:12:42,380
actionable for example I'm not sure how

00:12:40,010 --> 00:12:45,500
this function will perform under all

00:12:42,380 --> 00:12:47,660
circumstances that's fair if you can

00:12:45,500 --> 00:12:50,450
give an example under which circumstance

00:12:47,660 --> 00:12:53,030
you would like the author to test or how

00:12:50,450 --> 00:12:55,430
you would recommend it's changed but

00:12:53,030 --> 00:12:58,430
just rejecting a PR because pull

00:12:55,430 --> 00:13:00,680
requests because you have concerns but

00:12:58,430 --> 00:13:03,140
you're not sure what we should do is a

00:13:00,680 --> 00:13:05,210
bit it's not such a great idea

00:13:03,140 --> 00:13:06,890
and this usually happens when someone's

00:13:05,210 --> 00:13:08,000
written a very large pull request and

00:13:06,890 --> 00:13:10,940
you're kind of like if something if he

00:13:08,000 --> 00:13:13,040
about this but I don't know what so one

00:13:10,940 --> 00:13:16,220
tip is also just make small pull

00:13:13,040 --> 00:13:19,010
requests by the way and another time is

00:13:16,220 --> 00:13:20,990
when it's about the future now when we

00:13:19,010 --> 00:13:22,210
talk about the future in pull requests

00:13:20,990 --> 00:13:25,580
in code review

00:13:22,210 --> 00:13:29,090
we might reach a thing called deadlock

00:13:25,580 --> 00:13:32,510
where we just cannot find any resolution

00:13:29,090 --> 00:13:34,640
to which way we should do things for

00:13:32,510 --> 00:13:36,560
example balloon says is the code

00:13:34,640 --> 00:13:38,510
future-proof think about the potential

00:13:36,560 --> 00:13:41,270
use cases about the features we will

00:13:38,510 --> 00:13:42,920
build next month can this code be reused

00:13:41,270 --> 00:13:44,690
and I liked how Michelle was talking

00:13:42,920 --> 00:13:47,030
about this whole same thing sometimes

00:13:44,690 --> 00:13:49,220
duplication is better than making the

00:13:47,030 --> 00:13:52,130
wrong obstruction and we shouldn't kind

00:13:49,220 --> 00:13:55,370
of think too far into the future because

00:13:52,130 --> 00:13:57,080
we don't know the future but football

00:13:55,370 --> 00:13:58,580
then retorts with we may not even build

00:13:57,080 --> 00:14:00,590
those features let's not waste time

00:13:58,580 --> 00:14:02,030
future proofing code when we don't know

00:14:00,590 --> 00:14:05,180
what the future holds

00:14:02,030 --> 00:14:07,520
I wouldn't say balloon or football are

00:14:05,180 --> 00:14:10,640
necessarily either one of them is right

00:14:07,520 --> 00:14:11,930
or wrong because software development at

00:14:10,640 --> 00:14:14,840
the end of the day is all about

00:14:11,930 --> 00:14:19,030
trade-offs I mean it might be situation

00:14:14,840 --> 00:14:22,340
specific weather what you should do but

00:14:19,030 --> 00:14:25,040
the future is something that causes code

00:14:22,340 --> 00:14:27,710
review deadlock very easily now the

00:14:25,040 --> 00:14:30,200
easiest way to resolve this situation is

00:14:27,710 --> 00:14:33,260
always just to go to your colleagues

00:14:30,200 --> 00:14:35,900
desk hash it out any person right if

00:14:33,260 --> 00:14:38,000
your remote then maybe instead do a

00:14:35,900 --> 00:14:40,970
one-to-one and your chats or something

00:14:38,000 --> 00:14:44,300
but it's good if it's one-to-one because

00:14:40,970 --> 00:14:46,760
then it's faster because when you're

00:14:44,300 --> 00:14:48,080
commenting on a polar request the speed

00:14:46,760 --> 00:14:50,830
you're going at is pretty much like a

00:14:48,080 --> 00:14:53,330
old-school messaging forum it's not

00:14:50,830 --> 00:14:55,430
it'll take time and we don't want to

00:14:53,330 --> 00:14:59,360
waste time when we're building you know

00:14:55,430 --> 00:15:03,230
business applications tip number seven

00:14:59,360 --> 00:15:05,690
kind of follows you can defer to a third

00:15:03,230 --> 00:15:09,680
person as well so let's take an example

00:15:05,690 --> 00:15:11,600
here pancakes is reviewing telephones

00:15:09,680 --> 00:15:13,220
code they're doing a lot of things right

00:15:11,600 --> 00:15:15,380
they're observing this line gets

00:15:13,220 --> 00:15:18,260
highlighted as unreachable code in my

00:15:15,380 --> 00:15:21,020
IDE they're putting an emoji in then

00:15:18,260 --> 00:15:23,510
telephone kind of retorts with your idea

00:15:21,020 --> 00:15:28,840
is correct but I'm not convinced this is

00:15:23,510 --> 00:15:33,770
a good idea pancakes then says okay well

00:15:28,840 --> 00:15:35,600
telephones response in person was no so

00:15:33,770 --> 00:15:38,540
they tried to resolve at the desk

00:15:35,600 --> 00:15:41,029
but still deadlock remains because they

00:15:38,540 --> 00:15:43,730
cannot resolve this together then

00:15:41,029 --> 00:15:45,410
football comes in just a third person it

00:15:43,730 --> 00:15:47,000
doesn't have to be a senior person or

00:15:45,410 --> 00:15:48,709
the tech lead or anything but sometimes

00:15:47,000 --> 00:15:51,829
just introducing another person's

00:15:48,709 --> 00:15:55,100
opinion can really smooth it all out and

00:15:51,829 --> 00:15:57,019
then the participants are much more

00:15:55,100 --> 00:16:01,399
willing to commit because now there can

00:15:57,019 --> 00:16:03,920
be a consensus of some kind this idea is

00:16:01,399 --> 00:16:07,519
called disagree and commit you can't

00:16:03,920 --> 00:16:09,230
necessarily agree on everything but when

00:16:07,519 --> 00:16:10,699
the time comes that you have to choose

00:16:09,230 --> 00:16:13,639
something then you're not going to

00:16:10,699 --> 00:16:16,100
complain forever about it not being your

00:16:13,639 --> 00:16:18,319
preferred solution described excellently

00:16:16,100 --> 00:16:21,610
in Patrick Lencioni is the advantage

00:16:18,319 --> 00:16:23,959
which I also recommend now the final

00:16:21,610 --> 00:16:27,560
piece of advice that I would give is

00:16:23,959 --> 00:16:30,470
that sometimes in code review you just

00:16:27,560 --> 00:16:31,339
have to let it go right it's not really

00:16:30,470 --> 00:16:35,050
that big a deal

00:16:31,339 --> 00:16:39,079
I mean you probably have tests right

00:16:35,050 --> 00:16:42,230
because the thing is code review is just

00:16:39,079 --> 00:16:43,540
a portion of quality assurance it's not

00:16:42,230 --> 00:16:46,550
the whole thing

00:16:43,540 --> 00:16:49,100
there's gonna be those tests there's

00:16:46,550 --> 00:16:50,779
also going to be your users at the end

00:16:49,100 --> 00:16:52,279
of the day from whom you'll receive

00:16:50,779 --> 00:16:56,720
feedback if things are broken as hell

00:16:52,279 --> 00:16:58,670
like obviously try not to break you know

00:16:56,720 --> 00:17:01,069
everything try not to drop the

00:16:58,670 --> 00:17:02,660
production database table but even if

00:17:01,069 --> 00:17:04,640
you do hopefully you have backups

00:17:02,660 --> 00:17:07,579
remember that code review is just one

00:17:04,640 --> 00:17:11,470
called one gate in the process sometimes

00:17:07,579 --> 00:17:13,520
it's okay if bad code enters master and

00:17:11,470 --> 00:17:17,480
I just want to leave you with one final

00:17:13,520 --> 00:17:20,000
thought a concluding thought I have been

00:17:17,480 --> 00:17:22,970
talking all about how you as individuals

00:17:20,000 --> 00:17:26,179
can give good feedback to your

00:17:22,970 --> 00:17:29,270
colleagues but I want you to remember as

00:17:26,179 --> 00:17:33,770
well that equally important is receiving

00:17:29,270 --> 00:17:36,140
feedback the key player in a feedback

00:17:33,770 --> 00:17:40,159
situation is not the giver but the

00:17:36,140 --> 00:17:44,090
receiver what we mean by this is we can

00:17:40,159 --> 00:17:46,010
only control how we receive feedback we

00:17:44,090 --> 00:17:48,320
receive feedback from all over from

00:17:46,010 --> 00:17:49,559
everyone who hasn't seen this talk from

00:17:48,320 --> 00:17:52,049
everyone like

00:17:49,559 --> 00:17:55,169
our parents right we receive feedback

00:17:52,049 --> 00:17:57,809
from our dog who's angry you know that

00:17:55,169 --> 00:17:59,279
kind of thing so all we can do is try

00:17:57,809 --> 00:18:01,110
and understand where people are coming

00:17:59,279 --> 00:18:03,210
from and understand that giving feedback

00:18:01,110 --> 00:18:05,460
is also a skill and not everyone has

00:18:03,210 --> 00:18:07,679
developed those skills so when next time

00:18:05,460 --> 00:18:10,200
encoded you someone asks why did you do

00:18:07,679 --> 00:18:11,639
that just remember it's not because

00:18:10,200 --> 00:18:13,049
they're angry it's probably just because

00:18:11,639 --> 00:18:17,820
they don't realize how it's coming

00:18:13,049 --> 00:18:23,510
across so that's all thanks

00:18:17,820 --> 00:18:23,510

YouTube URL: https://www.youtube.com/watch?v=JF6xHPGOTII


