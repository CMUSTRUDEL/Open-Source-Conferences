Title: React Native in Production at OVO Energy - JS Roundabout - January 2020
Publication date: 2020-02-08
Playlist: The JS Roundabout
Description: 
	Henry Moulton (OVO Energy) - React Native in Production at OVO

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,359 --> 00:00:04,110
this is structured into five parts a bit

00:00:02,850 --> 00:00:05,549
about how the energy market is

00:00:04,110 --> 00:00:07,410
structured and how it's changing its to

00:00:05,549 --> 00:00:09,960
be a bit of context as to how the app

00:00:07,410 --> 00:00:11,969
structured and the team structured and

00:00:09,960 --> 00:00:13,950
then it's well going into how we do app

00:00:11,969 --> 00:00:15,870
feature development how it plans to

00:00:13,950 --> 00:00:19,650
improve that in 2020 and a bit about

00:00:15,870 --> 00:00:22,050
react native itself in 2020 so starting

00:00:19,650 --> 00:00:22,920
with the retail market energy starts at

00:00:22,050 --> 00:00:25,140
production and flows through

00:00:22,920 --> 00:00:27,230
transmission via the National Grid then

00:00:25,140 --> 00:00:29,849
into local distributors and then finally

00:00:27,230 --> 00:00:34,170
customers interact with a retail company

00:00:29,849 --> 00:00:37,410
such as over it's a pretty big market on

00:00:34,170 --> 00:00:39,989
average every home spending 4650 pounds

00:00:37,410 --> 00:00:44,120
on energy a year resulting in a pretty

00:00:39,989 --> 00:00:46,530
big market of total revenue 125 billion

00:00:44,120 --> 00:00:48,539
and as you used to be pretty boring at

00:00:46,530 --> 00:00:51,180
least in my opinion six big companies

00:00:48,539 --> 00:00:54,000
like British Gas holding a hundred cent

00:00:51,180 --> 00:00:56,059
market share until 2004 that's recently

00:00:54,000 --> 00:00:58,770
been changing over with its partnership

00:00:56,059 --> 00:01:00,780
purchase of SSC scholars and power is

00:00:58,770 --> 00:01:02,219
now number two and then you can see at

00:01:00,780 --> 00:01:05,670
the bottom there are companies that are

00:01:02,219 --> 00:01:07,260
quite renewable focused such as bulb um

00:01:05,670 --> 00:01:09,360
why might this be happening well we're

00:01:07,260 --> 00:01:11,310
seeing every everyday people are

00:01:09,360 --> 00:01:12,750
becoming climate activists and we're

00:01:11,310 --> 00:01:14,970
seeing a lot of sort of like strange

00:01:12,750 --> 00:01:17,790
climate change happening this year and

00:01:14,970 --> 00:01:19,860
no doubt going forward but I think at

00:01:17,790 --> 00:01:22,380
least what I've seen her ovo is people

00:01:19,860 --> 00:01:24,479
here pretty optimistic in the book more

00:01:22,380 --> 00:01:27,360
from more from less there's four sort of

00:01:24,479 --> 00:01:29,670
tenants of optimism capitalism

00:01:27,360 --> 00:01:32,189
responsive government regulation public

00:01:29,670 --> 00:01:34,049
awareness and tech progress and there's

00:01:32,189 --> 00:01:37,290
a few reasons to be optimistic renewable

00:01:34,049 --> 00:01:38,520
energy electricity usage overtook fossil

00:01:37,290 --> 00:01:40,829
fuels in the UK for the first time

00:01:38,520 --> 00:01:42,210
between nineteen not so relevant in

00:01:40,829 --> 00:01:43,649
January but solar module costs have

00:01:42,210 --> 00:01:44,159
dropped by one ninety nine percent in

00:01:43,649 --> 00:01:47,250
forty years

00:01:44,159 --> 00:01:49,649
and sort of speaking of that sort of

00:01:47,250 --> 00:01:52,409
like progressive government regulation

00:01:49,649 --> 00:01:54,899
in the UK every energy retail company

00:01:52,409 --> 00:01:57,180
has to offer customers smart meters and

00:01:54,899 --> 00:01:59,479
what a smart meters offer they offer the

00:01:57,180 --> 00:02:01,890
ability for you to easily switch your

00:01:59,479 --> 00:02:03,479
retail energy provider they give you

00:02:01,890 --> 00:02:05,130
estimate to billing which is also an

00:02:03,479 --> 00:02:06,869
easier budgeting and they give you more

00:02:05,130 --> 00:02:09,599
real-time data which gives you more

00:02:06,869 --> 00:02:11,910
knowledge about your energy usage what

00:02:09,599 --> 00:02:13,800
does that result in well energy retail

00:02:11,910 --> 00:02:15,630
companies basically turn into

00:02:13,800 --> 00:02:17,220
real-time analytics technology companies

00:02:15,630 --> 00:02:19,080
so you have sort of the incumbent

00:02:17,220 --> 00:02:21,950
struggling to provide good customer

00:02:19,080 --> 00:02:24,960
experiences in the app market

00:02:21,950 --> 00:02:26,610
what's ovo's sort of mission therefore

00:02:24,960 --> 00:02:29,760
it's to make it easy for anyone to get

00:02:26,610 --> 00:02:32,850
to carbon 0 and the approach really is

00:02:29,760 --> 00:02:35,430
take smart hardware like the smart meter

00:02:32,850 --> 00:02:36,750
which generates data such as usage which

00:02:35,430 --> 00:02:38,480
makes it easy for you to understand your

00:02:36,750 --> 00:02:40,920
usage as an insight and then you can

00:02:38,480 --> 00:02:43,890
evoke and provide you actions on how you

00:02:40,920 --> 00:02:45,420
can increase that and then sort of

00:02:43,890 --> 00:02:47,790
taking those insights and putting them

00:02:45,420 --> 00:02:50,700
in a nice easy to use app which leads on

00:02:47,790 --> 00:02:53,130
nicely to the over app itself so the

00:02:50,700 --> 00:02:54,420
over app was released in 2017 purely as

00:02:53,130 --> 00:02:55,560
just sort of web views before that there

00:02:54,420 --> 00:02:58,350
wasn't native app but there was a sort

00:02:55,560 --> 00:03:00,660
of we are connection 2017 we as a sort

00:02:58,350 --> 00:03:03,050
of react native shell pushing forward

00:03:00,660 --> 00:03:05,250
with web views starred as JavaScript

00:03:03,050 --> 00:03:07,470
then adopted flow and now currently

00:03:05,250 --> 00:03:09,390
typescript still fully sort of like

00:03:07,470 --> 00:03:10,860
Redux using observables and selectors

00:03:09,390 --> 00:03:12,780
and quite interesting lis most

00:03:10,860 --> 00:03:14,970
contradictory out our web engineers so

00:03:12,780 --> 00:03:17,130
if you've most people have just some

00:03:14,970 --> 00:03:19,740
react.js experience and then they're

00:03:17,130 --> 00:03:20,880
very very quickly contouring to the app

00:03:19,740 --> 00:03:23,970
the virus sort of like feature

00:03:20,880 --> 00:03:25,830
development process how's the app sort

00:03:23,970 --> 00:03:27,510
of structured well they've got the sort

00:03:25,830 --> 00:03:29,220
of like login which then reroutes you to

00:03:27,510 --> 00:03:32,250
either the Apollo or the Orion app

00:03:29,220 --> 00:03:33,570
remember that smart meter thing if you

00:03:32,250 --> 00:03:34,860
don't have one you're gonna be in the

00:03:33,570 --> 00:03:36,000
Apollo app which is sort of like older

00:03:34,860 --> 00:03:38,760
we have to put in your meter readings

00:03:36,000 --> 00:03:40,200
manually but then if you do have if you

00:03:38,760 --> 00:03:42,030
are a customer with a smart meter you're

00:03:40,200 --> 00:03:43,050
then routed to the Orion app where all

00:03:42,030 --> 00:03:44,790
of that sort of automatic and your

00:03:43,050 --> 00:03:47,340
payments are taken automatically how do

00:03:44,790 --> 00:03:48,870
we do that in practice so we basically

00:03:47,340 --> 00:03:50,400
have three separate redux tours and

00:03:48,870 --> 00:03:53,130
three separate instances reactive react

00:03:50,400 --> 00:03:55,410
navigation and another thing that we're

00:03:53,130 --> 00:03:56,490
very sort of like across both the Apollo

00:03:55,410 --> 00:03:58,440
and a Ryan app we're very open to

00:03:56,490 --> 00:04:00,420
feedback which actually results in quite

00:03:58,440 --> 00:04:02,010
a lot of interesting feedback from the

00:04:00,420 --> 00:04:03,600
older generations it was very nice to

00:04:02,010 --> 00:04:05,430
see it's also a reminder for us to

00:04:03,600 --> 00:04:07,860
continually continue to make the app

00:04:05,430 --> 00:04:10,410
very accessible with a nice font size

00:04:07,860 --> 00:04:11,760
color contrast and usable by the screen

00:04:10,410 --> 00:04:13,920
reader all of which react native

00:04:11,760 --> 00:04:15,930
provides and hopefully we can keep

00:04:13,920 --> 00:04:17,580
improving you can see a big increase in

00:04:15,930 --> 00:04:19,140
the sort of 5-star reviews around the

00:04:17,580 --> 00:04:21,870
time we drop the web views and adopted

00:04:19,140 --> 00:04:23,669
react native fully with the red dark red

00:04:21,870 --> 00:04:27,030
being one-star reviews and the stacks

00:04:23,669 --> 00:04:31,530
were monthly reviews being

00:04:27,030 --> 00:04:32,940
dark green so regarding out future

00:04:31,530 --> 00:04:36,710
development its structured into seven

00:04:32,940 --> 00:04:39,360
steps so firstly get the teams talking

00:04:36,710 --> 00:04:41,430
so remember how earlier I said it's

00:04:39,360 --> 00:04:43,560
bitten to Technol two main teams are

00:04:41,430 --> 00:04:45,330
oboe are either industry facing or their

00:04:43,560 --> 00:04:47,940
customer facing and those teams are

00:04:45,330 --> 00:04:49,860
communicating via Kafka streams that

00:04:47,940 --> 00:04:53,430
results in the app ask consuming api's

00:04:49,860 --> 00:04:56,880
from those teams sort of separately but

00:04:53,430 --> 00:04:58,169
via one sort of API gateway so you know

00:04:56,880 --> 00:05:01,350
at the bottom you've got Kafka topics

00:04:58,169 --> 00:05:03,570
generated by industry teams that turn

00:05:01,350 --> 00:05:07,230
into a sort of like AP is structured by

00:05:03,570 --> 00:05:09,930
customer facing teams we don't want

00:05:07,230 --> 00:05:11,940
features contributed to result in very

00:05:09,930 --> 00:05:14,790
very large PRS so we set up sort of

00:05:11,940 --> 00:05:18,990
feature Flags using firebase remote

00:05:14,790 --> 00:05:21,840
config using and then feature developers

00:05:18,990 --> 00:05:23,400
or out developer so our app contributors

00:05:21,840 --> 00:05:25,880
will hide those features behind feature

00:05:23,400 --> 00:05:28,470
flags using our feature flag component

00:05:25,880 --> 00:05:30,169
we then start creating a mock for those

00:05:28,470 --> 00:05:32,640
sort of like API requests and responses

00:05:30,169 --> 00:05:34,620
although yeah the API responses

00:05:32,640 --> 00:05:37,410
themselves inside the app on the staging

00:05:34,620 --> 00:05:39,479
app and the local app we have a sort of

00:05:37,410 --> 00:05:41,100
secret place hidden away that you can

00:05:39,479 --> 00:05:42,990
tap on called environments and then you

00:05:41,100 --> 00:05:45,300
can select the local Orion or local

00:05:42,990 --> 00:05:48,150
Apollo or u ATL production environment

00:05:45,300 --> 00:05:50,669
if you want that means that you can set

00:05:48,150 --> 00:05:52,770
up a mock file a sword JSON response of

00:05:50,669 --> 00:05:54,960
what the 200 spawns looks like via HTTP

00:05:52,770 --> 00:05:57,060
as well as you're also being to provide

00:05:54,960 --> 00:05:59,850
if you select mass failure see the UI

00:05:57,060 --> 00:06:03,390
and what happens when you have a 500 or

00:05:59,850 --> 00:06:05,370
400 error response what does that how do

00:06:03,390 --> 00:06:10,020
we actually go about doing that we

00:06:05,370 --> 00:06:14,460
inject a sort of mock fetch client into

00:06:10,020 --> 00:06:16,320
our Redux observable middleware and we

00:06:14,460 --> 00:06:18,690
then set up sort of mock JSON files that

00:06:16,320 --> 00:06:21,860
have a URL which has a regex

00:06:18,690 --> 00:06:24,419
which will pick up that URL and response

00:06:21,860 --> 00:06:26,910
and that results in very clean sort of

00:06:24,419 --> 00:06:30,419
state management in readable they call

00:06:26,910 --> 00:06:34,770
the epics which enables you to get data

00:06:30,419 --> 00:06:36,120
from that mocked HTTP client so now it's

00:06:34,770 --> 00:06:37,740
time to actually develop that feature so

00:06:36,120 --> 00:06:39,720
you've done your data fetching using a

00:06:37,740 --> 00:06:41,030
mock so now you're adding your actions

00:06:39,720 --> 00:06:42,980
reducer

00:06:41,030 --> 00:06:45,320
electors and then developing that UI

00:06:42,980 --> 00:06:51,290
using sort of our component library and

00:06:45,320 --> 00:06:53,060
storybooks now it's time to test so very

00:06:51,290 --> 00:06:55,820
sorta like native JavaScript typescript

00:06:53,060 --> 00:06:57,440
II sort of a testing stack making full

00:06:55,820 --> 00:06:58,700
use of sort of a react native specific

00:06:57,440 --> 00:07:00,140
components where necessary

00:06:58,700 --> 00:07:02,930
in particular the react native testing

00:07:00,140 --> 00:07:04,430
library and detox do you talk this are

00:07:02,930 --> 00:07:06,650
sort of an end-to-end testing framework

00:07:04,430 --> 00:07:09,260
we heavily rely on detox tests because

00:07:06,650 --> 00:07:11,000
we don't have QA engineers at over so

00:07:09,260 --> 00:07:13,160
teams are very much reliant on making

00:07:11,000 --> 00:07:16,580
sure that their features work what does

00:07:13,160 --> 00:07:18,730
the detox looks tests look like well you

00:07:16,580 --> 00:07:18,730
go

00:07:24,980 --> 00:07:27,040
you

00:07:33,820 --> 00:07:37,479
and then now it's time to measure that

00:07:35,440 --> 00:07:39,340
feature using mixed panels so generally

00:07:37,479 --> 00:07:43,120
communicating with PMS product managers

00:07:39,340 --> 00:07:44,229
on what sort of the engagement should

00:07:43,120 --> 00:07:47,500
look like in terms of measuring that

00:07:44,229 --> 00:07:49,539
those depth of that feature and then

00:07:47,500 --> 00:07:52,419
it's time to sort of like release that

00:07:49,539 --> 00:07:54,430
feature so we have a Mac Mini hideout

00:07:52,419 --> 00:07:58,570
via Mac Stadium which is connected to

00:07:54,430 --> 00:08:00,580
our github repository or via github

00:07:58,570 --> 00:08:03,460
actions which then running those detox

00:08:00,580 --> 00:08:05,919
tests on every on every pull request and

00:08:03,460 --> 00:08:07,479
then if all goes well we're deploying to

00:08:05,919 --> 00:08:11,110
either natively the app store Play Store

00:08:07,479 --> 00:08:13,270
or code push what is code push Co push

00:08:11,110 --> 00:08:15,850
is provided by Microsoft that enables

00:08:13,270 --> 00:08:17,740
you to update your app over-the-air so

00:08:15,850 --> 00:08:19,570
you don't have to go via the public

00:08:17,740 --> 00:08:20,710
review process well that results in what

00:08:19,570 --> 00:08:23,590
means that we can similar to a website

00:08:20,710 --> 00:08:25,150
deploy the app almost at any time very

00:08:23,590 --> 00:08:27,360
very quickly so how we're looking to

00:08:25,150 --> 00:08:30,729
improve the future development in 2020

00:08:27,360 --> 00:08:33,339
so I've stolen this from the CEO of Zico

00:08:30,729 --> 00:08:34,690
he did sort of 2019 in review but I feel

00:08:33,339 --> 00:08:37,630
it's really really apt for how we're

00:08:34,690 --> 00:08:39,520
going to consider feature development in

00:08:37,630 --> 00:08:41,529
the future basically everything's going

00:08:39,520 --> 00:08:43,450
to flow through git and you're going to

00:08:41,529 --> 00:08:46,209
have in terms of react native you're

00:08:43,450 --> 00:08:50,790
going to have your detox tests product

00:08:46,209 --> 00:08:54,610
feedback manual QA performance testing

00:08:50,790 --> 00:08:56,140
Android iOS cross mobile testing and

00:08:54,610 --> 00:08:58,330
then internal testing all with a sort of

00:08:56,140 --> 00:08:59,830
like deployed app that you can actually

00:08:58,330 --> 00:09:01,660
access via the browser using a tool

00:08:59,830 --> 00:09:03,940
called appetize and there's a few more

00:09:01,660 --> 00:09:06,190
things that we need to achieve in 2020

00:09:03,940 --> 00:09:08,290
to get that completely all ticked off so

00:09:06,190 --> 00:09:10,959
we need to add screenshot dips visual

00:09:08,290 --> 00:09:12,970
testing in theory it's very possible if

00:09:10,959 --> 00:09:14,950
we have all the storybook components and

00:09:12,970 --> 00:09:16,720
we have detox we can get detox to run

00:09:14,950 --> 00:09:19,330
through the storybook and then take

00:09:16,720 --> 00:09:22,870
screenshots on every time we change the

00:09:19,330 --> 00:09:26,290
app we can add api sort of test using

00:09:22,870 --> 00:09:30,010
pact and we can properly deploy the app

00:09:26,290 --> 00:09:31,180
using appetizer so appetize there's the

00:09:30,010 --> 00:09:35,680
app in the browser which you can

00:09:31,180 --> 00:09:37,360
interact with via via mouse so a few

00:09:35,680 --> 00:09:40,930
things that are coming up in 2024 react

00:09:37,360 --> 00:09:42,850
native the first is something called

00:09:40,930 --> 00:09:45,100
universal apps so you might remember

00:09:42,850 --> 00:09:46,600
that or consider react native should

00:09:45,100 --> 00:09:48,220
just be about ios and android

00:09:46,600 --> 00:09:49,510
I think this year we're going to see a

00:09:48,220 --> 00:09:51,850
lot more of react native being

00:09:49,510 --> 00:09:53,590
compatible with web windows the reason

00:09:51,850 --> 00:09:56,860
for this is a tool called Expo which

00:09:53,590 --> 00:09:58,270
bundles react native for web so using

00:09:56,860 --> 00:10:01,080
your react native components they'll

00:09:58,270 --> 00:10:04,300
they'll transpile sort of to the dom and

00:10:01,080 --> 00:10:07,720
Microsoft is heavily adopting react

00:10:04,300 --> 00:10:10,270
native as a development tool to create

00:10:07,720 --> 00:10:16,060
Windows apps and then finally maybe Mac

00:10:10,270 --> 00:10:17,830
OS two so last year Mac Apple at WDC

00:10:16,060 --> 00:10:20,350
announced project catalyst which enables

00:10:17,830 --> 00:10:23,110
you to take your iPad apps and implement

00:10:20,350 --> 00:10:25,360
them as native Mac apps so if you have

00:10:23,110 --> 00:10:26,950
react native Mac App sorry iPad app then

00:10:25,360 --> 00:10:31,270
you should be able to turn it into a Mac

00:10:26,950 --> 00:10:33,850
up to finally there's the Ryoka texture

00:10:31,270 --> 00:10:36,940
which facebook is announced in 2018 it's

00:10:33,850 --> 00:10:38,500
taken quite a while but essentially it's

00:10:36,940 --> 00:10:40,480
getting rid of the bridge and adopting a

00:10:38,500 --> 00:10:43,710
new sort of structure that should

00:10:40,480 --> 00:10:45,490
promise a lot more performance and

00:10:43,710 --> 00:10:47,440
there's not enough time to talk about

00:10:45,490 --> 00:10:49,720
that now but if you do want to look more

00:10:47,440 --> 00:10:51,550
about that find out more there's both

00:10:49,720 --> 00:10:53,920
blog posts on formidable com slash blog

00:10:51,550 --> 00:10:57,460
and as a talk on YouTube by Lorenzo

00:10:53,920 --> 00:11:00,270
who's a react native core Cammisa thanks

00:10:57,460 --> 00:11:00,270
any questions

00:11:00,420 --> 00:11:10,130
[Applause]

00:11:19,040 --> 00:11:25,410
so our detox tests take 15 minutes 15

00:11:24,120 --> 00:11:27,509
minutes to run through the entire ones

00:11:25,410 --> 00:11:29,879
to give you quite a bit more context

00:11:27,509 --> 00:11:33,689
there that's including both the success

00:11:29,879 --> 00:11:36,959
and failure responses one tip I give you

00:11:33,689 --> 00:11:38,610
is use use that sort of dedicated

00:11:36,959 --> 00:11:41,519
infrastructure either get a Mac Mini in

00:11:38,610 --> 00:11:42,660
your office or hire it out dedicated so

00:11:41,519 --> 00:11:44,639
you're not using like a sort of

00:11:42,660 --> 00:11:49,199
virtualized environment that's pretty

00:11:44,639 --> 00:11:50,879
important we found 20/20 we're looking

00:11:49,199 --> 00:11:52,649
to adopt Android we found detox a bit

00:11:50,879 --> 00:12:09,180
flaky on Android but we're hoping we're

00:11:52,649 --> 00:12:13,500
hoping to figure that out I wasn't there

00:12:09,180 --> 00:12:15,839
for that so but looking at the looking

00:12:13,500 --> 00:12:17,759
at the commit log it doesn't seem like

00:12:15,839 --> 00:12:19,529
it was too difficult because if they

00:12:17,759 --> 00:12:23,220
were with with type scheme you can

00:12:19,529 --> 00:12:28,199
incrementally adopt it so it takes in

00:12:23,220 --> 00:12:31,230
JavaScript files and Metro takes in type

00:12:28,199 --> 00:12:33,569
ticket files so I think it's probably

00:12:31,230 --> 00:12:34,589
probably ret relatively painless you

00:12:33,569 --> 00:12:36,420
probably just got to get together as a

00:12:34,589 --> 00:12:38,220
team and decide what how you want to go

00:12:36,420 --> 00:12:41,100
about that do we have a web app and do

00:12:38,220 --> 00:12:43,139
we share logic so I think many of you

00:12:41,100 --> 00:12:44,819
probably realized hey the Redux codes

00:12:43,139 --> 00:12:48,629
probably going to be the same as the web

00:12:44,819 --> 00:12:50,550
app and app like in most cases I've seen

00:12:48,629 --> 00:12:51,689
it a few examples of this working out an

00:12:50,550 --> 00:12:53,430
open source there's a company called

00:12:51,689 --> 00:12:57,089
matter mark which is basically like a

00:12:53,430 --> 00:12:59,250
b2b SAS open source slack and they have

00:12:57,089 --> 00:13:01,829
a repository where they share both their

00:12:59,250 --> 00:13:03,059
redux code for their web and mobile I'd

00:13:01,829 --> 00:13:05,040
love for us to adopt something like this

00:13:03,059 --> 00:13:07,620
sadly I think just by the nature of

00:13:05,040 --> 00:13:09,660
geography the web teams in Bristol and

00:13:07,620 --> 00:13:12,930
we're in London and I think that barrier

00:13:09,660 --> 00:13:14,189
has just sort of meant that the sort of

00:13:12,930 --> 00:13:15,389
engineering process hasn't quite gelled

00:13:14,189 --> 00:13:18,179
into it's sort of like shared repository

00:13:15,389 --> 00:13:19,110
for components but I think we I think I

00:13:18,179 --> 00:13:22,459
think we're left we're never

00:13:19,110 --> 00:13:24,810
sort of planning stage for that yeah

00:13:22,459 --> 00:13:34,680
yeah I think you can do surprisingly

00:13:24,810 --> 00:13:37,410
well just by PR comments like again yeah

00:13:34,680 --> 00:13:40,230
so I think the announcement so context

00:13:37,410 --> 00:13:44,730
device for me is a das Amazon Web

00:13:40,230 --> 00:13:47,070
Services device form thing right sure

00:13:44,730 --> 00:13:49,680
sir but um there are yet different

00:13:47,070 --> 00:13:51,000
fighters but I think for example Atos

00:13:49,680 --> 00:13:53,820
provided device farm where you can in

00:13:51,000 --> 00:13:56,399
theory test any range of Android and iOS

00:13:53,820 --> 00:13:59,640
mobile devices and maybe apply your

00:13:56,399 --> 00:14:00,930
tests to all those devices and then

00:13:59,640 --> 00:14:04,529
you'll build per minute for those tests

00:14:00,930 --> 00:14:06,420
running I haven't seen someone do this

00:14:04,529 --> 00:14:25,829
with detox yet I'm not sure if you know

00:14:06,420 --> 00:14:28,680
anyone I think I think almost certainly

00:14:25,829 --> 00:14:30,779
would be it'd be ideal if we could test

00:14:28,680 --> 00:14:35,850
on physical devices so just a sort of

00:14:30,779 --> 00:14:37,649
war story we upgraded firebase in and

00:14:35,850 --> 00:14:40,170
was I think around August September and

00:14:37,649 --> 00:14:45,180
that version of iOS firebase didn't work

00:14:40,170 --> 00:14:47,180
on 32-bit iOS devices it crashed so had

00:14:45,180 --> 00:14:49,589
we actually tested properly on an iOS

00:14:47,180 --> 00:14:52,320
iPhone 5

00:14:49,589 --> 00:14:54,029
we'd have picked that up but you know

00:14:52,320 --> 00:14:55,620
our detox tests are running on an iPhone

00:14:54,029 --> 00:14:58,399
8 and we just didn't quite pick that up

00:14:55,620 --> 00:14:58,399
in manual QA

00:14:59,930 --> 00:15:02,870

YouTube URL: https://www.youtube.com/watch?v=vZ6WdXUmKcA


