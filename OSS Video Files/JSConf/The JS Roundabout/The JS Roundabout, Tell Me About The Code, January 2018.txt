Title: The JS Roundabout, Tell Me About The Code, January 2018
Publication date: 2018-01-31
Playlist: The JS Roundabout
Description: 
	Talk by Steve Gibbings & Tom McQuillan (Immediate Media).

More about The JS Roundabout: https://www.meetup.com/The-JS-Roundabout
Captions: 
	00:00:00,000 --> 00:00:04,259
first of all welcome thanks for coming

00:00:02,190 --> 00:00:07,830
I'm Tom I work at immediate media I'm a

00:00:04,259 --> 00:00:11,370
senior UI developer so my talk today is

00:00:07,830 --> 00:00:13,620
about unit testing and I've named it

00:00:11,370 --> 00:00:14,969
tell me about the code because it's

00:00:13,620 --> 00:00:16,289
almost like a conversation with the code

00:00:14,969 --> 00:00:18,720
when you're closer to the code when

00:00:16,289 --> 00:00:21,539
you're testing so the idea is we replace

00:00:18,720 --> 00:00:23,640
it we're replacing intentions so user

00:00:21,539 --> 00:00:26,460
intentions developer intentions with

00:00:23,640 --> 00:00:29,789
code assertions so I like make you stuff

00:00:26,460 --> 00:00:33,149
I like making websites gain services all

00:00:29,789 --> 00:00:36,320
that sort of good stuff I don't like it

00:00:33,149 --> 00:00:39,540
when stuff breaks so the thing about

00:00:36,320 --> 00:00:41,250
making things is if you get a really

00:00:39,540 --> 00:00:42,450
good feedback you get really good

00:00:41,250 --> 00:00:44,850
feedback from when you actually make

00:00:42,450 --> 00:00:49,440
stuff not so much when it starts to

00:00:44,850 --> 00:00:51,210
break so on in the like in the early

00:00:49,440 --> 00:00:54,780
stages it's okay because it's like

00:00:51,210 --> 00:00:56,489
projects are quite small so get any

00:00:54,780 --> 00:00:58,530
working is quite quite fluid you get you

00:00:56,489 --> 00:01:01,289
get to like a level you make a level in

00:00:58,530 --> 00:01:03,300
a game or you make like a page on the

00:01:01,289 --> 00:01:04,439
website it's quite small so if you're

00:01:03,300 --> 00:01:06,530
making a single page application

00:01:04,439 --> 00:01:08,939
generally the feature set is quite small

00:01:06,530 --> 00:01:12,090
so the difficulty comes in actually

00:01:08,939 --> 00:01:13,680
keeping the stuff working so successful

00:01:12,090 --> 00:01:15,240
projects generally change over time so

00:01:13,680 --> 00:01:16,799
if you were to make something quite

00:01:15,240 --> 00:01:20,100
successful you might argue like have the

00:01:16,799 --> 00:01:22,740
users ask you for feature changes those

00:01:20,100 --> 00:01:25,259
changes often they can introduce braking

00:01:22,740 --> 00:01:29,280
braking code so it breaks your product

00:01:25,259 --> 00:01:30,990
and it breaks your webpages and the more

00:01:29,280 --> 00:01:33,390
this goes on the wall added complexity

00:01:30,990 --> 00:01:38,040
starts to mount up and eventually you

00:01:33,390 --> 00:01:40,470
having a bad time so unit tests unit

00:01:38,040 --> 00:01:41,310
tests a good a good kind of guard

00:01:40,470 --> 00:01:44,970
against this sort of thing because

00:01:41,310 --> 00:01:49,049
you've got you've got a way of getting

00:01:44,970 --> 00:01:52,640
quick feedback so close to your codebase

00:01:49,049 --> 00:01:56,610
so the idea might be that you've got

00:01:52,640 --> 00:02:00,090
your so for example interface tests

00:01:56,610 --> 00:02:01,439
you've got kind of conversation with

00:02:00,090 --> 00:02:03,479
your code in terms of like you've got

00:02:01,439 --> 00:02:04,590
something happening but it's so far away

00:02:03,479 --> 00:02:05,969
from the code base that you end up

00:02:04,590 --> 00:02:08,190
having like we're really kind of you've

00:02:05,969 --> 00:02:11,190
got a bad relay so I'll kind of

00:02:08,190 --> 00:02:13,590
interface text test take about an hour

00:02:11,190 --> 00:02:15,150
and a half maybe two hours so

00:02:13,590 --> 00:02:17,250
kind of long time to wait to find out

00:02:15,150 --> 00:02:19,440
your clothes actually broke anything

00:02:17,250 --> 00:02:23,220
unit tests are a good kind of cover for

00:02:19,440 --> 00:02:25,800
this because you've got this kind of way

00:02:23,220 --> 00:02:30,599
of testing small increments of your coat

00:02:25,800 --> 00:02:32,190
so for example you've got like a search

00:02:30,599 --> 00:02:36,120
app you can you can kind of test it

00:02:32,190 --> 00:02:38,120
incrementally like small pieces so yeah

00:02:36,120 --> 00:02:40,620
there the reason is why we do it

00:02:38,120 --> 00:02:42,810
so yeah they live close to the code

00:02:40,620 --> 00:02:44,849
modification cycle so any development

00:02:42,810 --> 00:02:46,739
can start this up start like a test

00:02:44,849 --> 00:02:50,280
suite run them and they should be quite

00:02:46,739 --> 00:02:51,450
fast you can automate them so the good

00:02:50,280 --> 00:02:53,430
thing about that is that you don't have

00:02:51,450 --> 00:02:55,170
to really kind of do anything majorly

00:02:53,430 --> 00:02:59,310
intensive to get this kind of stuff in

00:02:55,170 --> 00:03:00,690
in place so we're just going to go we're

00:02:59,310 --> 00:03:02,819
gonna go straight into what a unit test

00:03:00,690 --> 00:03:05,489
might look like so this is an example of

00:03:02,819 --> 00:03:08,849
what a test suite and test specs might

00:03:05,489 --> 00:03:10,319
look like inside Jasmin so keeping your

00:03:08,849 --> 00:03:12,420
tests maintainable generally means

00:03:10,319 --> 00:03:15,390
keeping them readable you want to be

00:03:12,420 --> 00:03:17,340
able to say okay here's my module that

00:03:15,390 --> 00:03:19,200
in this case you've got greeting you

00:03:17,340 --> 00:03:19,980
want to make sure you can say that you

00:03:19,200 --> 00:03:22,650
want to make sure what the code does

00:03:19,980 --> 00:03:25,440
what you intend it to do so you give the

00:03:22,650 --> 00:03:27,510
specs which is the it blocks descriptive

00:03:25,440 --> 00:03:30,209
names so in this case we've got like

00:03:27,510 --> 00:03:34,500
should say hi or should greet the user

00:03:30,209 --> 00:03:37,560
by name so from this you get really good

00:03:34,500 --> 00:03:39,030
feedback from let's say you're here

00:03:37,560 --> 00:03:41,280
we've got like a bit of a test reporter

00:03:39,030 --> 00:03:43,829
here we're using maka like a maka report

00:03:41,280 --> 00:03:46,109
we've got karma running in the

00:03:43,829 --> 00:03:47,280
background so you've got yeah you've got

00:03:46,109 --> 00:03:51,239
a pretty good readability here you can

00:03:47,280 --> 00:03:52,889
kind of see what greetings doing yeah so

00:03:51,239 --> 00:03:53,970
they said this this is basically what

00:03:52,889 --> 00:03:56,220
you want to do in terms of keeping your

00:03:53,970 --> 00:03:57,840
code readable another thing you want to

00:03:56,220 --> 00:03:59,280
do is follow the kind of pattern arrange

00:03:57,840 --> 00:04:01,319
act asserts when if you've got a test

00:03:59,280 --> 00:04:02,940
you want to keep it as minimal as

00:04:01,319 --> 00:04:04,739
possible so you don't want to test too

00:04:02,940 --> 00:04:06,870
much stuff you want to kind of test it

00:04:04,739 --> 00:04:10,109
generally why this we're talking about

00:04:06,870 --> 00:04:11,880
having a bunch of stuff set up for your

00:04:10,109 --> 00:04:14,160
preconditions so if you've got like a

00:04:11,880 --> 00:04:17,100
test that is testing for a certain

00:04:14,160 --> 00:04:20,250
username set it up to at the top of the

00:04:17,100 --> 00:04:22,260
top of your test set up like an arranged

00:04:20,250 --> 00:04:24,450
section so you've got like your object

00:04:22,260 --> 00:04:26,310
being arranged and then after that you

00:04:24,450 --> 00:04:27,240
act on a certain method or you act on a

00:04:26,310 --> 00:04:29,180
certain function

00:04:27,240 --> 00:04:33,300
feed the feats of information in there

00:04:29,180 --> 00:04:34,500
and assert at the end and by that this

00:04:33,300 --> 00:04:36,180
is ways is what it would look like so

00:04:34,500 --> 00:04:39,090
here we're testing a function called

00:04:36,180 --> 00:04:41,580
greet it does very little it just kind

00:04:39,090 --> 00:04:44,310
of says hello name in this case we've

00:04:41,580 --> 00:04:48,330
got like a test case that says so it's

00:04:44,310 --> 00:04:50,580
so it's greeting should greet by name so

00:04:48,330 --> 00:04:52,199
we've got an arranged area where we set

00:04:50,580 --> 00:04:54,360
up the previous is which is the the name

00:04:52,199 --> 00:04:58,440
we're feeding it into our act which is

00:04:54,360 --> 00:04:59,780
greet so we're making a call here we get

00:04:58,440 --> 00:05:02,820
an actual response that we get actual

00:04:59,780 --> 00:05:07,340
return value back so at the bottom we've

00:05:02,820 --> 00:05:10,970
got this kind of assertion by which we

00:05:07,340 --> 00:05:15,419
send our assertion into aspect expect

00:05:10,970 --> 00:05:21,449
and we maybe we set up a matcher so this

00:05:15,419 --> 00:05:26,759
is to be hello Jean so so you want to

00:05:21,449 --> 00:05:30,479
keep your test fast so yeah so slow test

00:05:26,759 --> 00:05:33,150
don't get run Network calls a slow which

00:05:30,479 --> 00:05:35,520
means the slower you will of your tests

00:05:33,150 --> 00:05:37,320
are they just not gonna get run it's

00:05:35,520 --> 00:05:38,970
going to end up like into interface test

00:05:37,320 --> 00:05:42,120
or integration test where you can only

00:05:38,970 --> 00:05:45,020
run them closer this build pipeline so

00:05:42,120 --> 00:05:46,919
you want to keep them quite quite quick

00:05:45,020 --> 00:05:48,030
just just to cover some more things

00:05:46,919 --> 00:05:50,599
you've got time outs as well they can

00:05:48,030 --> 00:05:52,469
slow down tests file system access or

00:05:50,599 --> 00:05:54,030
database calls if they're on the same

00:05:52,469 --> 00:05:58,800
system again and you're not mocking them

00:05:54,030 --> 00:06:01,110
out they can also slow down tests so

00:05:58,800 --> 00:06:02,460
we're going to move on to spies stubs

00:06:01,110 --> 00:06:06,330
and mocks so this is a way of getting

00:06:02,460 --> 00:06:09,060
around those initial problems so for

00:06:06,330 --> 00:06:11,370
spies susp eyes are good for kind of

00:06:09,060 --> 00:06:13,139
testing what your code is doing to stuff

00:06:11,370 --> 00:06:14,849
that comes from the outside so in this

00:06:13,139 --> 00:06:16,680
instance we've got a method called

00:06:14,849 --> 00:06:19,289
invoke call back or a function call

00:06:16,680 --> 00:06:20,639
invoke callback which all it does at the

00:06:19,289 --> 00:06:22,650
moment is this is calling callback with

00:06:20,639 --> 00:06:24,000
a couple of arguments so this is just to

00:06:22,650 --> 00:06:27,030
keep it quite light in terms of what the

00:06:24,000 --> 00:06:30,330
code is actually doing so here we've got

00:06:27,030 --> 00:06:33,270
a spec that's called sweet called invoke

00:06:30,330 --> 00:06:35,150
call back and we've got a spec that says

00:06:33,270 --> 00:06:38,690
should invoke the provide a callback

00:06:35,150 --> 00:06:41,070
callback so then we set up the callback

00:06:38,690 --> 00:06:43,560
so we're arranging our stuff up front

00:06:41,070 --> 00:06:47,100
we put this so this is aspires as an

00:06:43,560 --> 00:06:51,360
honest sign on I'm using here the spire

00:06:47,100 --> 00:06:52,860
goes into invoke call back and then once

00:06:51,360 --> 00:06:55,470
it's been called so once we've acted on

00:06:52,860 --> 00:06:57,840
the on the bond the function within a

00:06:55,470 --> 00:07:00,270
certain things have happened so down

00:06:57,840 --> 00:07:01,260
here we got some sign on it certs we

00:07:00,270 --> 00:07:03,480
want to make sure it's been called at

00:07:01,260 --> 00:07:05,940
least once so we check that a callback

00:07:03,480 --> 00:07:07,760
it's been called once we also assert

00:07:05,940 --> 00:07:11,610
this be called with a certain set of

00:07:07,760 --> 00:07:14,280
arguments so you can also do this with

00:07:11,610 --> 00:07:16,140
methods on objects so in this example

00:07:14,280 --> 00:07:17,550
we've got like a class called greeter so

00:07:16,140 --> 00:07:19,980
it's just a small little thing and

00:07:17,550 --> 00:07:21,540
there's a constructor takes a name and

00:07:19,980 --> 00:07:26,490
there's a greet function on it a group

00:07:21,540 --> 00:07:29,160
method so again I've got a kind of a

00:07:26,490 --> 00:07:31,650
arrange area up here where we're

00:07:29,160 --> 00:07:36,180
constructing the greeter we're setting

00:07:31,650 --> 00:07:39,510
up the spider to to the method of greet

00:07:36,180 --> 00:07:45,720
on greeter and then we do then we act on

00:07:39,510 --> 00:07:47,610
greet greeter so at the end of this you

00:07:45,720 --> 00:07:49,290
end up there with so there's a couple of

00:07:47,610 --> 00:07:50,520
a search here just to show we can get

00:07:49,290 --> 00:07:53,190
out of it

00:07:50,520 --> 00:07:56,100
the first assert is making sure spies

00:07:53,190 --> 00:08:00,920
being called and you expect here is just

00:07:56,100 --> 00:08:03,540
showing you that the underlying spy is

00:08:00,920 --> 00:08:07,020
it still being action so it's not

00:08:03,540 --> 00:08:08,960
actually it's not kind of just it's not

00:08:07,020 --> 00:08:12,690
replaced it is still calling through

00:08:08,960 --> 00:08:14,970
that's that's what sign-on gives you and

00:08:12,690 --> 00:08:19,050
then we restore greet - what voice

00:08:14,970 --> 00:08:21,360
original state was here again we use

00:08:19,050 --> 00:08:23,490
these so now we're using stubs and we've

00:08:21,360 --> 00:08:25,290
got a function called validator which

00:08:23,490 --> 00:08:28,020
takes a data provider and we're just

00:08:25,290 --> 00:08:29,580
doing some you know it's not really

00:08:28,020 --> 00:08:33,750
validation but yeah some kind of

00:08:29,580 --> 00:08:35,910
validation so here we have another

00:08:33,750 --> 00:08:40,620
another test we've got a describe which

00:08:35,910 --> 00:08:41,960
is the sweet goes through so this time

00:08:40,620 --> 00:08:45,960
we're stopping out what we expect this

00:08:41,960 --> 00:08:48,690
thing to return so at the moment we're

00:08:45,960 --> 00:08:50,340
expecting it to return bad value so

00:08:48,690 --> 00:08:52,140
we're setting up just to just a return

00:08:50,340 --> 00:08:54,690
of a bad value the good thing about this

00:08:52,140 --> 00:08:56,490
is you can test your kind of Erised

00:08:54,690 --> 00:08:59,400
in your code here we know we're going to

00:08:56,490 --> 00:09:00,630
fry our type error down here that's what

00:08:59,400 --> 00:09:04,560
we're saying we're expecting so we just

00:09:00,630 --> 00:09:06,630
wreck this validator in a method so

00:09:04,560 --> 00:09:11,220
expect calls this and we expect it to

00:09:06,630 --> 00:09:13,640
throw an error of type type error well

00:09:11,220 --> 00:09:17,520
of the constructor type error and

00:09:13,640 --> 00:09:19,710
expected error as its message mocks are

00:09:17,520 --> 00:09:20,310
slightly different so with a mock you

00:09:19,710 --> 00:09:22,770
can

00:09:20,310 --> 00:09:25,980
mock's so here we got like an example of

00:09:22,770 --> 00:09:28,440
a callback delay so all we've got is

00:09:25,980 --> 00:09:29,790
we've got like a constructor and a

00:09:28,440 --> 00:09:31,980
method that's called execute after we

00:09:29,790 --> 00:09:37,230
pass it seconds and we expected to call

00:09:31,980 --> 00:09:40,680
set timeout so what we can do with marks

00:09:37,230 --> 00:09:43,020
is set up the idea of like controlling

00:09:40,680 --> 00:09:48,270
time a little bit so we've got our kind

00:09:43,020 --> 00:09:53,820
of here we're using a sign on fake use

00:09:48,270 --> 00:09:57,420
fake timers so we have sets so the clock

00:09:53,820 --> 00:09:59,700
is now replacing set timer saying of all

00:09:57,420 --> 00:10:09,720
date and a bunch of other things that

00:09:59,700 --> 00:10:13,080
could be used about timers and then yeah

00:10:09,720 --> 00:10:15,720
so we act on this so you've got callback

00:10:13,080 --> 00:10:18,150
delay execute after one second

00:10:15,720 --> 00:10:19,980
we close the clock pin ticks down so

00:10:18,150 --> 00:10:23,220
we've brought an eye nine eight

00:10:19,980 --> 00:10:25,280
we're asserting that the callback hasn't

00:10:23,220 --> 00:10:28,260
been called and it kind of ticks down

00:10:25,280 --> 00:10:29,670
until it calls once so it says just so

00:10:28,260 --> 00:10:30,780
you wouldn't necessarily assert a lot of

00:10:29,670 --> 00:10:32,280
things in one function what kind of want

00:10:30,780 --> 00:10:34,140
to assert one thing but it just

00:10:32,280 --> 00:10:36,270
demonstrates the point that if you've

00:10:34,140 --> 00:10:37,740
got time as in place you can kind of

00:10:36,270 --> 00:10:41,280
make sure things are working the way you

00:10:37,740 --> 00:10:44,250
expect them to then again we at the

00:10:41,280 --> 00:10:45,870
bottom of this we restore clock so that

00:10:44,250 --> 00:10:47,880
should set all the kind of set timers

00:10:45,870 --> 00:10:52,410
intervals dates all back to the way they

00:10:47,880 --> 00:10:55,050
should be so effectively we were trapped

00:10:52,410 --> 00:10:56,430
we've got time travel in our code we've

00:10:55,050 --> 00:10:59,040
got like so something that would take

00:10:56,430 --> 00:11:01,980
one second to you without mocks to run

00:10:59,040 --> 00:11:04,550
we now have yeah effectively you've got

00:11:01,980 --> 00:11:04,550
milliseconds

00:11:04,730 --> 00:11:10,460
similarly with fetch mock

00:11:07,520 --> 00:11:11,690
do stuff with fetch so fetch makes a

00:11:10,460 --> 00:11:18,620
call-out for the network we don't want

00:11:11,690 --> 00:11:22,220
that so we can set up our fetch so we

00:11:18,620 --> 00:11:25,400
mock out fetch we call the method which

00:11:22,220 --> 00:11:26,840
is kind of returning a promise and then

00:11:25,400 --> 00:11:30,290
we can kind of assert on certain things

00:11:26,840 --> 00:11:33,410
like in this example fetch mock to be

00:11:30,290 --> 00:11:37,570
called and also that the last URL we

00:11:33,410 --> 00:11:39,950
used was a URL we passed in in our test

00:11:37,570 --> 00:11:41,590
we also capped the file just in case

00:11:39,950 --> 00:11:43,880
because you want to fail fast on tests

00:11:41,590 --> 00:11:45,020
so you pass in the error message you

00:11:43,880 --> 00:11:48,560
know just to give you a bit of

00:11:45,020 --> 00:11:50,840
information about what's happened so

00:11:48,560 --> 00:11:54,110
yeah starting up new projects I would

00:11:50,840 --> 00:11:57,800
say you want to kind of think about gang

00:11:54,110 --> 00:12:01,390
testing early because without that you

00:11:57,800 --> 00:12:01,390
kind of you kind of miss miss a chance

00:12:01,960 --> 00:12:06,920
yeah so get a test harness in place

00:12:04,870 --> 00:12:10,040
confirm that it works by writing unit

00:12:06,920 --> 00:12:13,370
tests make sure one fails and then make

00:12:10,040 --> 00:12:15,500
that test pass execute a test run out

00:12:13,370 --> 00:12:17,270
verify everything is working and then

00:12:15,500 --> 00:12:21,350
yeah your any weights making unit tests

00:12:17,270 --> 00:12:22,520
for your code so in this interests in

00:12:21,350 --> 00:12:24,880
this kind of demonstration we've been

00:12:22,520 --> 00:12:28,940
using karma so that's our test runner

00:12:24,880 --> 00:12:31,340
Jasmine sign on so Jasmine is the test

00:12:28,940 --> 00:12:34,700
framework sign-on is getting us all the

00:12:31,340 --> 00:12:36,710
kind of spires the stubs the Mocs and

00:12:34,700 --> 00:12:40,160
fetch mark he's kind of mocking out fish

00:12:36,710 --> 00:12:45,800
so fetch API calls and we using maka

00:12:40,160 --> 00:12:48,320
report for this beautiful report testing

00:12:45,800 --> 00:12:49,790
legacy code so the problem with with

00:12:48,320 --> 00:12:51,320
legacy code is there's kind of two ways

00:12:49,790 --> 00:12:53,540
to handle it like if you if you go into

00:12:51,320 --> 00:12:58,550
a project that hasn't got unit tests you

00:12:53,540 --> 00:13:00,830
can either edit and pray which is the

00:12:58,550 --> 00:13:04,310
kind of so this isn't as bad as this

00:13:00,830 --> 00:13:05,900
this gif is leading to it's kind of like

00:13:04,310 --> 00:13:07,910
sewing you you make sure all the stuff

00:13:05,900 --> 00:13:08,960
you're doing you're kind of going

00:13:07,910 --> 00:13:12,650
through the comb make sure all the kind

00:13:08,960 --> 00:13:13,640
of areas that you're affecting are kind

00:13:12,650 --> 00:13:14,690
of covers you're looking for all the

00:13:13,640 --> 00:13:17,000
code make sure you're not gonna make too

00:13:14,690 --> 00:13:18,680
many mistakes but at the end of the day

00:13:17,000 --> 00:13:19,760
you're still praying like you're not

00:13:18,680 --> 00:13:21,120
you're not got tests in place so it

00:13:19,760 --> 00:13:25,829
still going to be like you know

00:13:21,120 --> 00:13:27,509
it's a long shot the other is cover and

00:13:25,829 --> 00:13:29,970
modify so this is this is a little bit

00:13:27,509 --> 00:13:31,949
slower but it kind of it gives you in a

00:13:29,970 --> 00:13:33,360
place where you can kind of say right

00:13:31,949 --> 00:13:38,309
I've got tests around the kind of code I

00:13:33,360 --> 00:13:40,199
am touching but you know you've got

00:13:38,309 --> 00:13:42,209
tests in the place but the touching so

00:13:40,199 --> 00:13:43,620
modifying it isn't as dangerous it's

00:13:42,209 --> 00:13:45,059
still kind of dangerous because it

00:13:43,620 --> 00:13:48,209
legacy code you don't really know what

00:13:45,059 --> 00:13:50,490
everything is doing so but yeah I mean

00:13:48,209 --> 00:13:52,620
is it's better than nothing

00:13:50,490 --> 00:13:54,149
so yeah it's hard in Aleksey code is

00:13:52,620 --> 00:13:57,420
hard to find seems to get this stuff

00:13:54,149 --> 00:13:59,579
into sign-on helps a lot with that so

00:13:57,420 --> 00:14:01,350
you've got kind of spies and so all the

00:13:59,579 --> 00:14:05,939
kind of spy stubs and mocks are going to

00:14:01,350 --> 00:14:08,699
help you there yeah so coloring is often

00:14:05,939 --> 00:14:09,990
done with manual testing you know in in

00:14:08,699 --> 00:14:13,589
our experience that is in this company

00:14:09,990 --> 00:14:15,720
at the moment with legacy code and unit

00:14:13,589 --> 00:14:19,040
tests won't catch everything so you've

00:14:15,720 --> 00:14:21,389
got this so with interface tests

00:14:19,040 --> 00:14:25,559
integration tests and unit tests you

00:14:21,389 --> 00:14:27,089
kind of catch more see how you kind of

00:14:25,559 --> 00:14:29,699
want this kind of idea of like you've

00:14:27,089 --> 00:14:31,709
got unit tests as your base so that

00:14:29,699 --> 00:14:33,290
you've got a lot a lot of unit tests so

00:14:31,709 --> 00:14:34,589
you get really quick feedback that way

00:14:33,290 --> 00:14:36,509
above that

00:14:34,589 --> 00:14:37,860
get a few integration tests make sure

00:14:36,509 --> 00:14:40,920
that you've got kind of like modules

00:14:37,860 --> 00:14:43,139
working together as you expect

00:14:40,920 --> 00:14:45,209
and beyond that setup UI like selenium

00:14:43,139 --> 00:14:47,999
tests and stuff like that just to get

00:14:45,209 --> 00:14:50,839
into end tests in there what you don't

00:14:47,999 --> 00:14:53,100
want is to have an ice cream cone

00:14:50,839 --> 00:14:54,720
because the problem with an ice cream

00:14:53,100 --> 00:14:57,420
cone is you've got like so you are test

00:14:54,720 --> 00:14:59,910
taking on time already so you just don't

00:14:57,420 --> 00:15:00,929
want to you know you don't want too many

00:14:59,910 --> 00:15:01,800
long running tests otherwise you're

00:15:00,929 --> 00:15:05,730
never gonna know what your code is doing

00:15:01,800 --> 00:15:07,470
you're never going to run the tests so

00:15:05,730 --> 00:15:08,579
recommending reads around unit testing I

00:15:07,470 --> 00:15:12,389
would say working effectively with

00:15:08,579 --> 00:15:13,920
legacy code is number one for me if

00:15:12,389 --> 00:15:15,990
you're working with legacy code tells

00:15:13,920 --> 00:15:17,490
you a lot about how you integrate tests

00:15:15,990 --> 00:15:18,350
that tells you a lot of our seams and

00:15:17,490 --> 00:15:20,550
things like that

00:15:18,350 --> 00:15:22,079
reliable jobs goods is good for getting

00:15:20,550 --> 00:15:26,309
the test in a state that can be tested

00:15:22,079 --> 00:15:29,160
and also clean code by obviously Uncle

00:15:26,309 --> 00:15:31,220
Bob thanks a lot

00:15:29,160 --> 00:15:31,220

YouTube URL: https://www.youtube.com/watch?v=8hI-wl4w96M


