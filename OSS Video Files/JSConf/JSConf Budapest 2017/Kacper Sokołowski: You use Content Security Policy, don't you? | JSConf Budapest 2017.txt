Title: Kacper Sokołowski: You use Content Security Policy, don't you? | JSConf Budapest 2017
Publication date: 2017-12-01
Playlist: JSConf Budapest 2017
Description: 
	Everyone know that security is important right? The biggest companies like Facebook and Google spend tons of money on bug bounty programs to ensure that their products are secure. But is there a way that we can make our website prone to some of the most popular attacks? There is one security mechanism which can help, but yet not everyone knows and uses it. It’s called Content Security Policy. When properly used, CSP can make your website impenetrable to XSS and many different attacks. My talk will tell you what CSP is, how it works and how to use it. The talk will be backed by real-life examples and some live coding!

http://jsconfbp.com/speakers/kacper-sokolowski/
Captions: 
	00:00:00,510 --> 00:00:06,870
[Applause]

00:00:04,650 --> 00:00:09,120
yeah hello everyone my name is Kasper I

00:00:06,870 --> 00:00:11,550
come from Poland so not that far away

00:00:09,120 --> 00:00:13,290
I've been loved in this city for it for

00:00:11,550 --> 00:00:15,089
a quite long time and it's always a

00:00:13,290 --> 00:00:17,220
pleasure to come back to Budapest I love

00:00:15,089 --> 00:00:19,050
the city really and I'm here today to

00:00:17,220 --> 00:00:21,090
talk about a little bit about security

00:00:19,050 --> 00:00:24,410
and to talk about security in the

00:00:21,090 --> 00:00:27,810
context of JavaScript applications so

00:00:24,410 --> 00:00:29,910
every once in a while the big news break

00:00:27,810 --> 00:00:32,059
out that some of the some of the leading

00:00:29,910 --> 00:00:34,860
companies got hacked right millions of

00:00:32,059 --> 00:00:36,930
credit card details personal data got

00:00:34,860 --> 00:00:39,180
leaked people get anxious before being

00:00:36,930 --> 00:00:42,090
angry the the reputation of the

00:00:39,180 --> 00:00:44,940
company's got undermined and if you look

00:00:42,090 --> 00:00:47,700
closely it it seems that there are some

00:00:44,940 --> 00:00:50,370
technology giants that get those kind of

00:00:47,700 --> 00:00:50,850
problems and for me it can only mean one

00:00:50,370 --> 00:00:54,500
thing

00:00:50,850 --> 00:00:57,329
that security is really really hard and

00:00:54,500 --> 00:00:58,280
I don't know if you've heard about this

00:00:57,329 --> 00:01:04,379
product

00:00:58,280 --> 00:01:06,780
they got hacked like in 2011 and they

00:01:04,379 --> 00:01:08,930
probably they lost some credit card

00:01:06,780 --> 00:01:11,189
details so the hackers could use them to

00:01:08,930 --> 00:01:13,920
you know to use your credit card to buy

00:01:11,189 --> 00:01:17,759
different different things and it's

00:01:13,920 --> 00:01:20,700
estimated that Sony lost 171 million

00:01:17,759 --> 00:01:22,320
dollars in as a consequence right

00:01:20,700 --> 00:01:24,240
because they had to they had to first

00:01:22,320 --> 00:01:26,430
fix the issue the PlayStation Network

00:01:24,240 --> 00:01:28,909
was down for some time and then they

00:01:26,430 --> 00:01:33,360
have to you know pay the insurances like

00:01:28,909 --> 00:01:36,900
make refunds and stuff like that so it's

00:01:33,360 --> 00:01:38,909
really really important to know that you

00:01:36,900 --> 00:01:41,610
can load your company can lose a lot of

00:01:38,909 --> 00:01:45,270
money not to mention reputation right

00:01:41,610 --> 00:01:48,420
but but but you can lose a lot of money

00:01:45,270 --> 00:01:50,549
if you get security wrong but the the

00:01:48,420 --> 00:01:54,030
things I'm talking about are mostly

00:01:50,549 --> 00:01:56,219
 related we probably most of us

00:01:54,030 --> 00:01:57,719
here are front-end developers there are

00:01:56,219 --> 00:02:00,240
probably some back-end developers but

00:01:57,719 --> 00:02:03,540
I'm gonna focus on front right now and

00:02:00,240 --> 00:02:06,899
we usually don't deal with with

00:02:03,540 --> 00:02:09,679
databases with with user data because we

00:02:06,899 --> 00:02:12,030
do front ends right and we are safe so

00:02:09,679 --> 00:02:12,780
we shouldn't be talking about security

00:02:12,030 --> 00:02:16,080
and

00:02:12,780 --> 00:02:18,390
it turns out that nope we are in safe we

00:02:16,080 --> 00:02:22,440
are insecure and does anyone of you know

00:02:18,390 --> 00:02:25,260
this guy no so so cool because it's a

00:02:22,440 --> 00:02:27,959
very very cool story his name is Sammy

00:02:25,260 --> 00:02:30,170
come car and he wrote a fastest

00:02:27,959 --> 00:02:32,300
spreading virus ever using javascript

00:02:30,170 --> 00:02:35,850
yeah really

00:02:32,300 --> 00:02:40,140
that's the VPD uh page of this and he a

00:02:35,850 --> 00:02:42,030
huge huge javascript to write a virus

00:02:40,140 --> 00:02:44,880
that spread on myspace myspace was a

00:02:42,030 --> 00:02:46,769
like Facebook back then sorry for the

00:02:44,880 --> 00:02:49,140
images I couldn't find any better but

00:02:46,769 --> 00:02:52,320
the virus wasn't really that harmful it

00:02:49,140 --> 00:02:56,100
just sent the friend invitation to many

00:02:52,320 --> 00:02:57,660
different people so it just sent coming

00:02:56,100 --> 00:02:59,970
a semi invitation from many different

00:02:57,660 --> 00:03:01,319
people and just posted some random posts

00:02:59,970 --> 00:03:04,380
like Sammy's or some person like this

00:03:01,319 --> 00:03:08,550
and he ended up having this many pages

00:03:04,380 --> 00:03:12,180
of friend requests so so that was that

00:03:08,550 --> 00:03:15,750
was pretty you know that the virus went

00:03:12,180 --> 00:03:20,519
went crazy went really viral and as a

00:03:15,750 --> 00:03:23,610
consequence he went to jail he they they

00:03:20,519 --> 00:03:28,620
made him they made him pay some some

00:03:23,610 --> 00:03:31,170
money as a compensation and they also he

00:03:28,620 --> 00:03:34,650
also had some had to do some public

00:03:31,170 --> 00:03:37,440
service so yeah that was really that was

00:03:34,650 --> 00:03:40,890
really that was treated really seriously

00:03:37,440 --> 00:03:42,570
and by the way if you don't know Sammy

00:03:40,890 --> 00:03:45,630
you should definitely check out his

00:03:42,570 --> 00:03:47,190
github page because he's done security

00:03:45,630 --> 00:03:49,140
research I don't approve the thing he

00:03:47,190 --> 00:03:50,519
done with he has done with with MySpace

00:03:49,140 --> 00:03:53,459
but still he is now a security

00:03:50,519 --> 00:03:57,180
researcher and he does a really cool

00:03:53,459 --> 00:04:00,120
stuff and one might ask how how was

00:03:57,180 --> 00:04:01,620
Sammy able to to get this virus running

00:04:00,120 --> 00:04:03,660
and he used a technique called

00:04:01,620 --> 00:04:04,950
cross-site scripting and probably most

00:04:03,660 --> 00:04:08,040
of you are familiar with cross-site

00:04:04,950 --> 00:04:11,250
scripting but I will quickly recap so

00:04:08,040 --> 00:04:14,609
cross-site scripting is a vulnerability

00:04:11,250 --> 00:04:17,820
that lets the attacker execute any kind

00:04:14,609 --> 00:04:20,940
of code any kind of any kind of code in

00:04:17,820 --> 00:04:23,460
the context of our our webpage right and

00:04:20,940 --> 00:04:26,430
what does it really mean it does mean

00:04:23,460 --> 00:04:29,250
that attacker is able to still cook

00:04:26,430 --> 00:04:31,530
still local storage data basically the

00:04:29,250 --> 00:04:33,690
attackers are able to do anything we

00:04:31,530 --> 00:04:35,910
would do as a programmers in a context

00:04:33,690 --> 00:04:37,560
of our webpage and if you want to learn

00:04:35,910 --> 00:04:39,900
more about cross-site scripting there is

00:04:37,560 --> 00:04:41,190
this great resource called Ava's because

00:04:39,900 --> 00:04:42,720
there are some kind of there are many

00:04:41,190 --> 00:04:45,750
kinds of cross-site scripting attacks

00:04:42,720 --> 00:04:47,610
there are many techniques to to defend

00:04:45,750 --> 00:04:49,289
ourselves against the cross description

00:04:47,610 --> 00:04:51,600
attacks so we should go to or spend and

00:04:49,289 --> 00:04:56,130
learn about them and I've prepared a

00:04:51,600 --> 00:04:59,389
demo so I will show you how to how to do

00:04:56,130 --> 00:04:59,389
a cross-site scripting attack

00:05:06,999 --> 00:05:11,459
all right so

00:05:13,240 --> 00:05:18,050
so imagine we are an attacker we are a

00:05:16,760 --> 00:05:20,500
hacker and you want to hack into this

00:05:18,050 --> 00:05:23,780
blog right this is a blog like you know

00:05:20,500 --> 00:05:27,020
we have a blog post here you can go and

00:05:23,780 --> 00:05:31,090
read it and what would I do as a hacker

00:05:27,020 --> 00:05:37,490
to try to hack this i crack this blog I

00:05:31,090 --> 00:05:40,820
would probably go and see like this in

00:05:37,490 --> 00:05:42,200
WordPress right try to hack it as it was

00:05:40,820 --> 00:05:45,920
WordPress it turns out it's not in

00:05:42,200 --> 00:05:48,890
WordPress and then I would look for more

00:05:45,920 --> 00:05:52,220
interesting parts and I would go to some

00:05:48,890 --> 00:05:54,830
like this admin oh well there's an admin

00:05:52,220 --> 00:05:58,670
login for example and probably admin has

00:05:54,830 --> 00:06:00,830
some yes there is probably an admin

00:05:58,670 --> 00:06:03,710
panel that would be interesting from an

00:06:00,830 --> 00:06:05,450
attacker standpoint and our goal right

00:06:03,710 --> 00:06:09,980
now is to hack into this panel it

00:06:05,450 --> 00:06:16,130
happens that I know the login password I

00:06:09,980 --> 00:06:18,890
will just show you what's in panel yeah

00:06:16,130 --> 00:06:21,110
sound like this and our intention would

00:06:18,890 --> 00:06:24,560
be to hack into this panel without

00:06:21,110 --> 00:06:27,710
knowing any kind of password or login

00:06:24,560 --> 00:06:29,770
any kind of credentials so what could I

00:06:27,710 --> 00:06:29,770
do

00:06:35,860 --> 00:06:39,850
it's not occur I would go to the to my

00:06:37,870 --> 00:06:42,760
to the to the website I would like to

00:06:39,850 --> 00:06:44,620
hack and I would look for possible input

00:06:42,760 --> 00:06:46,540
points like for example let's go to the

00:06:44,620 --> 00:06:49,750
post because posts usually have a

00:06:46,540 --> 00:06:51,730
comment section and it turns out that

00:06:49,750 --> 00:06:55,120
there is this comment section and you

00:06:51,730 --> 00:06:58,320
can what we can do is we can try to put

00:06:55,120 --> 00:06:58,320
some HTML here

00:07:05,140 --> 00:07:18,410
whoa something broke sorry on handle

00:07:14,330 --> 00:07:34,160
there yeah yeah demo that's right

00:07:18,410 --> 00:07:36,880
yeah let's just start it again sorry we

00:07:34,160 --> 00:07:36,880
would just have to

00:07:47,870 --> 00:07:54,770
it just worked it worked like five

00:07:50,060 --> 00:07:56,290
minutes ago so demo gods right yeah

00:07:54,770 --> 00:08:05,780
let's do this one more time

00:07:56,290 --> 00:08:06,200
first yeah yeah the restart is always a

00:08:05,780 --> 00:08:08,690
good thing

00:08:06,200 --> 00:08:12,200
yeah and it works and as you can see

00:08:08,690 --> 00:08:14,600
I've typed it Iife there a bold tag

00:08:12,200 --> 00:08:18,020
right and as you can see the browser

00:08:14,600 --> 00:08:22,550
read it as HTML and executed so what I

00:08:18,020 --> 00:08:26,290
can do is I can try to put a script

00:08:22,550 --> 00:08:26,290
doctor and see what happens right

00:08:36,740 --> 00:08:44,090
and as you can see the script got

00:08:41,180 --> 00:08:45,430
executed that's right so that's my

00:08:44,090 --> 00:08:48,920
that's my that's my security

00:08:45,430 --> 00:08:51,860
vulnerability like I can abuse and right

00:08:48,920 --> 00:08:54,470
now I would assume that the session is

00:08:51,860 --> 00:08:56,600
stored in cookies I would use this hall

00:08:54,470 --> 00:08:57,590
to steal the cookies and my code for

00:08:56,600 --> 00:08:59,900
stealing cookies would look something

00:08:57,590 --> 00:09:03,440
like this here's my code

00:08:59,900 --> 00:09:09,050
it's called hack yeah yeah is it

00:09:03,440 --> 00:09:12,170
readable from from the back yeah so

00:09:09,050 --> 00:09:15,890
basically what I'm what I want to do is

00:09:12,170 --> 00:09:17,930
I want to get my cookies and send them

00:09:15,890 --> 00:09:21,560
to my server so then I can you know

00:09:17,930 --> 00:09:25,070
somehow get them and login into the into

00:09:21,560 --> 00:09:26,450
the admin panel assuring that the admin

00:09:25,070 --> 00:09:28,700
of the webpage would eventually go to

00:09:26,450 --> 00:09:31,520
the poll go to the post and try to read

00:09:28,700 --> 00:09:34,310
it right so that's my script and I'm I

00:09:31,520 --> 00:09:39,050
would just add an image tag to my web

00:09:34,310 --> 00:09:42,050
page and add like special guide

00:09:39,050 --> 00:09:45,080
parameters the image wouldn't load but I

00:09:42,050 --> 00:09:46,580
still get a request in the and in this

00:09:45,080 --> 00:09:51,110
cookie parameter I would get encoded

00:09:46,580 --> 00:09:53,590
cookies right and that's great so if we

00:09:51,110 --> 00:09:53,590
post it

00:10:01,080 --> 00:10:05,180
my server is down but no worries

00:10:15,200 --> 00:10:20,720
Yeah right so right now as you can see

00:10:17,810 --> 00:10:22,670
it says only great article thanks but it

00:10:20,720 --> 00:10:24,320
tries to send some cookie to my server

00:10:22,670 --> 00:10:25,760
which it didn't because the server

00:10:24,320 --> 00:10:29,360
wasn't running but when i refresh it

00:10:25,760 --> 00:10:33,170
probably will yeah and it did because

00:10:29,360 --> 00:10:35,780
I'm already logged in as an admin you

00:10:33,170 --> 00:10:42,080
see I got the request here and this

00:10:35,780 --> 00:10:53,990
encoded thing is my cookie so now when I

00:10:42,080 --> 00:10:56,090
copy this an open new separate window as

00:10:53,990 --> 00:11:01,700
you can see I'm not logged in but when I

00:10:56,090 --> 00:11:13,520
try to set my cookie here I prepare a

00:11:01,700 --> 00:11:22,430
little snippet here and if I add my

00:11:13,520 --> 00:11:24,440
cookies yeah it just set the cookies in

00:11:22,430 --> 00:11:29,180
my in my current current browser window

00:11:24,440 --> 00:11:31,250
and if I go to admin panel I've logged

00:11:29,180 --> 00:11:32,600
in right and I didn't know any passwords

00:11:31,250 --> 00:11:35,320
because it's like completely separate

00:11:32,600 --> 00:11:37,850
page so the attack went like this I just

00:11:35,320 --> 00:11:39,650
found the security cross-site scripting

00:11:37,850 --> 00:11:41,600
hole then I planted the script that

00:11:39,650 --> 00:11:43,670
stole every cookie from the website and

00:11:41,600 --> 00:11:45,980
then I used those cookies to get into

00:11:43,670 --> 00:11:51,160
the admin panel so that's pretty scary

00:11:45,980 --> 00:11:51,160
and let's go back to the slides

00:12:00,800 --> 00:12:07,980
so yeah and I know that this demo was a

00:12:06,000 --> 00:12:09,529
little bit exaggerated because normally

00:12:07,980 --> 00:12:11,850
you would use something which is called

00:12:09,529 --> 00:12:13,560
HTTP only cookies that I wouldn't be

00:12:11,850 --> 00:12:15,270
able to read them if you want to keep

00:12:13,560 --> 00:12:17,940
the session in cookies you should you

00:12:15,270 --> 00:12:19,800
should use HTTP only cookies but I I

00:12:17,940 --> 00:12:21,390
disable this feature for a purpose

00:12:19,800 --> 00:12:23,190
because I wanted to show that it's

00:12:21,390 --> 00:12:26,339
really easy to steal some malicious data

00:12:23,190 --> 00:12:28,700
from the user some personal data from

00:12:26,339 --> 00:12:34,470
the user and then abuse it somehow and

00:12:28,700 --> 00:12:37,050
how do we say so one might say that I

00:12:34,470 --> 00:12:40,260
should always filter the input from my

00:12:37,050 --> 00:12:43,440
users and use sanitizer so just and

00:12:40,260 --> 00:12:46,020
strip every HTML tag that is posted to

00:12:43,440 --> 00:12:48,660
the comment section and that's true but

00:12:46,020 --> 00:12:50,100
it turns out that those parsers could

00:12:48,660 --> 00:12:52,260
have bugs and there are really really

00:12:50,100 --> 00:12:57,060
sophisticated bugs but still that there

00:12:52,260 --> 00:12:58,709
are bugs and on the other hand there is

00:12:57,060 --> 00:13:01,010
a better way of protecting ourselves

00:12:58,709 --> 00:13:03,149
against those kinds of attacks and this

00:13:01,010 --> 00:13:06,510
method is called content security policy

00:13:03,149 --> 00:13:08,930
and content security policy is nothing

00:13:06,510 --> 00:13:12,149
more than a whitelist which let us

00:13:08,930 --> 00:13:14,370
define from which lets us define the

00:13:12,149 --> 00:13:16,230
URLs from which our browser is allowed

00:13:14,370 --> 00:13:18,540
to download some resources so for

00:13:16,230 --> 00:13:21,240
example I can take tell hey browser you

00:13:18,540 --> 00:13:23,279
are allowed to download download stuff

00:13:21,240 --> 00:13:26,640
from bootstrap from Facebook but you're

00:13:23,279 --> 00:13:28,860
forbidden to download anything from from

00:13:26,640 --> 00:13:32,579
different resources right and not only

00:13:28,860 --> 00:13:34,740
content security policy lets us define

00:13:32,579 --> 00:13:37,770
what we can download it also it also

00:13:34,740 --> 00:13:39,480
lets us define how do we want to how do

00:13:37,770 --> 00:13:42,060
we want our scripts to be executed so

00:13:39,480 --> 00:13:46,860
for example we can say that we can

00:13:42,060 --> 00:13:49,709
execute the script using like we can we

00:13:46,860 --> 00:13:51,990
can we can allow the browser to run the

00:13:49,709 --> 00:13:55,260
scripts addit using source attribute

00:13:51,990 --> 00:13:57,690
like this and we can say we don't like

00:13:55,260 --> 00:14:00,329
inline scripts so we want to disband

00:13:57,690 --> 00:14:03,120
them and browser what would wouldn't

00:14:00,329 --> 00:14:06,870
wouldn't even wouldn't even execute this

00:14:03,120 --> 00:14:10,050
code and contrast security policy is

00:14:06,870 --> 00:14:11,670
turned on using HTTP headers we just

00:14:10,050 --> 00:14:14,880
specify on

00:14:11,670 --> 00:14:16,890
our server we specify we specify the

00:14:14,880 --> 00:14:19,170
content security policy header which

00:14:16,890 --> 00:14:22,500
looked like this it's here we have

00:14:19,170 --> 00:14:24,990
header coverage policy then we have

00:14:22,500 --> 00:14:27,630
something called directive in this case

00:14:24,990 --> 00:14:28,950
it's script if it defines from which

00:14:27,630 --> 00:14:32,280
resources we can you can download

00:14:28,950 --> 00:14:34,590
download script and there is a URL list

00:14:32,280 --> 00:14:36,690
which says we can execute scripts from

00:14:34,590 --> 00:14:39,780
and download scripts from self which is

00:14:36,690 --> 00:14:43,140
our domain and from Google as simple as

00:14:39,780 --> 00:14:45,120
that so having this knowledge that we

00:14:43,140 --> 00:14:47,040
can try to fix our demo so the attack I

00:14:45,120 --> 00:15:01,800
presented you wouldn't be wouldn't be

00:14:47,040 --> 00:15:03,300
even possible alright so here's my

00:15:01,800 --> 00:15:07,620
server code and it's like basically

00:15:03,300 --> 00:15:10,110
really basic really basic really basic

00:15:07,620 --> 00:15:11,460
Express app which uses this this really

00:15:10,110 --> 00:15:14,100
neat package called content security

00:15:11,460 --> 00:15:15,780
policy and here are my content security

00:15:14,100 --> 00:15:20,640
policy rules there are a couple of them

00:15:15,780 --> 00:15:24,470
I'm specifying the the resources that my

00:15:20,640 --> 00:15:29,760
page uses so I can use only scripts from

00:15:24,470 --> 00:15:32,160
source self and there is a couple of

00:15:29,760 --> 00:15:34,800
things I've added here because my web

00:15:32,160 --> 00:15:36,540
page requires bootstrap and some google

00:15:34,800 --> 00:15:39,020
fonts right so when I use this

00:15:36,540 --> 00:15:39,020
middleware

00:15:44,029 --> 00:15:48,680
and restart my server

00:15:57,720 --> 00:16:05,589
and go back to my webpage I would have

00:16:01,870 --> 00:16:08,920
to oh and as you can see my browser

00:16:05,589 --> 00:16:16,300
refused to apply in line in line of its

00:16:08,920 --> 00:16:18,579
inline script actually yeah so it's here

00:16:16,300 --> 00:16:20,740
all right so as you can see my script

00:16:18,579 --> 00:16:22,149
didn't get executed because it refused

00:16:20,740 --> 00:16:24,339
my content security policy which says

00:16:22,149 --> 00:16:27,040
that I can only download scripts which

00:16:24,339 --> 00:16:29,170
are from my from my own domain and not

00:16:27,040 --> 00:16:30,790
only did it block my inline script which

00:16:29,170 --> 00:16:34,360
is not explicitly defined in my content

00:16:30,790 --> 00:16:36,459
security policy rows it also it also

00:16:34,360 --> 00:16:39,250
gave me this this nice report here that

00:16:36,459 --> 00:16:42,100
says that somebody tried to try to hack

00:16:39,250 --> 00:16:44,620
into my web page and we can specify the

00:16:42,100 --> 00:16:47,050
content security policy rule to send

00:16:44,620 --> 00:16:49,240
this report to to our to our back-end

00:16:47,050 --> 00:16:51,220
and then we can filter those reports and

00:16:49,240 --> 00:16:53,199
see that somebody tried to hack us and

00:16:51,220 --> 00:16:57,399
that's really neat and as far as I know

00:16:53,199 --> 00:16:59,139
the sensoring the tool for getting blogs

00:16:57,399 --> 00:17:01,089
is also supporting content security

00:16:59,139 --> 00:17:03,190
policy right now so you can definitely

00:17:01,089 --> 00:17:04,600
check it out and see whether somebody

00:17:03,190 --> 00:17:07,030
tries to hack your site hack your

00:17:04,600 --> 00:17:10,360
webpage so right now my attack would be

00:17:07,030 --> 00:17:12,370
completely my attack will be completely

00:17:10,360 --> 00:17:14,319
impossible because the script we we

00:17:12,370 --> 00:17:16,919
planted before it's not exactly and

00:17:14,319 --> 00:17:16,919
that's great

00:17:24,500 --> 00:17:30,240
I'm sorry all right

00:17:27,060 --> 00:17:32,520
so as I said before content security

00:17:30,240 --> 00:17:35,220
policy lets you define many different

00:17:32,520 --> 00:17:36,780
rules for for resources and we can

00:17:35,220 --> 00:17:38,910
control almost everything like we can

00:17:36,780 --> 00:17:40,470
control the WebSockets we can specify to

00:17:38,910 --> 00:17:41,970
which servers web sockets are allowed to

00:17:40,470 --> 00:17:44,520
connect we can specify the image

00:17:41,970 --> 00:17:45,930
resources as you can see the Astra photo

00:17:44,520 --> 00:17:48,360
didn't load because I didn't explicitly

00:17:45,930 --> 00:17:51,390
tell the browser to allow it load it

00:17:48,360 --> 00:17:52,860
right and security policy content

00:17:51,390 --> 00:17:56,880
security policy is really really great

00:17:52,860 --> 00:17:59,510
but it also has its downsides just look

00:17:56,880 --> 00:18:03,000
at this it's the content security policy

00:17:59,510 --> 00:18:05,400
header from Gmail right and there is

00:18:03,000 --> 00:18:07,830
there is a lot of stuff here and it's

00:18:05,400 --> 00:18:10,170
really really hard to make to maintain

00:18:07,830 --> 00:18:11,940
those tools because imagine you are

00:18:10,170 --> 00:18:14,250
using third-party scripts like analytic

00:18:11,940 --> 00:18:17,640
scripts or Google tag manager or

00:18:14,250 --> 00:18:19,200
something that that we have we have a

00:18:17,640 --> 00:18:21,180
tag manager that downloads many

00:18:19,200 --> 00:18:23,160
different resources from many different

00:18:21,180 --> 00:18:25,620
domains and we didn't even we don't even

00:18:23,160 --> 00:18:27,300
know from which domains we have from

00:18:25,620 --> 00:18:29,790
which domains we load content to our web

00:18:27,300 --> 00:18:31,680
page and to make them work we have to

00:18:29,790 --> 00:18:33,960
explicitly define them in those rules

00:18:31,680 --> 00:18:37,470
right because otherwise they won't be

00:18:33,960 --> 00:18:39,150
working and as you can see this gets

00:18:37,470 --> 00:18:40,710
pretty large and it hits both

00:18:39,150 --> 00:18:43,080
performance because we had to load this

00:18:40,710 --> 00:18:45,540
header and it's you know if we have that

00:18:43,080 --> 00:18:48,450
many rules probably we are not safe

00:18:45,540 --> 00:18:52,530
anyway because if some of the different

00:18:48,450 --> 00:18:55,860
you know different different services

00:18:52,530 --> 00:18:57,960
that we listed here get hacked we would

00:18:55,860 --> 00:19:01,680
be affected as well so that's really

00:18:57,960 --> 00:19:05,460
hard and if you try to use content

00:19:01,680 --> 00:19:07,320
security policy right away your webpage

00:19:05,460 --> 00:19:09,570
would probably break because it's really

00:19:07,320 --> 00:19:12,660
really it's it's really really hard to

00:19:09,570 --> 00:19:15,450
know the exact resources that your

00:19:12,660 --> 00:19:16,680
webpage uses and there will be if you

00:19:15,450 --> 00:19:18,570
turn on the content security policy

00:19:16,680 --> 00:19:21,510
today you will be surprised how many of

00:19:18,570 --> 00:19:23,760
things your webpage downloads right but

00:19:21,510 --> 00:19:25,560
so there is one rule if you start a

00:19:23,760 --> 00:19:27,960
project start using content security

00:19:25,560 --> 00:19:29,310
policy as soon as possible because it

00:19:27,960 --> 00:19:33,120
will give you the full control over your

00:19:29,310 --> 00:19:36,750
resources another downside is that you

00:19:33,120 --> 00:19:37,789
know I am building single page

00:19:36,750 --> 00:19:40,789
applications

00:19:37,789 --> 00:19:43,460
and we use webpack for building our own

00:19:40,789 --> 00:19:45,109
for building the application itself and

00:19:43,460 --> 00:19:47,269
we end up with a package that is

00:19:45,109 --> 00:19:49,460
completely serverless we don't need any

00:19:47,269 --> 00:19:51,470
servers we just want to deploy we just

00:19:49,460 --> 00:19:54,049
want to deploy those three files and we

00:19:51,470 --> 00:19:55,879
decided to use Amazon s3 right because

00:19:54,049 --> 00:19:56,960
it's like come on come on use case we

00:19:55,879 --> 00:19:59,119
just put those files from this tree

00:19:56,960 --> 00:20:04,489
turned on static web site hosting

00:19:59,119 --> 00:20:07,039
and we are done basically and it turns

00:20:04,489 --> 00:20:09,259
out that Amazon s3 lets us define our

00:20:07,039 --> 00:20:11,149
own headers so that's great because we

00:20:09,259 --> 00:20:13,609
can use it to you know control cache and

00:20:11,149 --> 00:20:17,210
we thought that it would be it would be

00:20:13,609 --> 00:20:19,220
nice that we would be able to add

00:20:17,210 --> 00:20:21,229
content security policy here so we would

00:20:19,220 --> 00:20:23,029
actually we would get an architecture

00:20:21,229 --> 00:20:24,950
that is completely that has no moving

00:20:23,029 --> 00:20:30,049
parts we wouldn't have to maintain any

00:20:24,950 --> 00:20:32,960
servers anything and it turned out when

00:20:30,049 --> 00:20:36,190
we turned the CDN before ahead of the

00:20:32,960 --> 00:20:38,929
head of the stream it turned out that s3

00:20:36,190 --> 00:20:40,549
doesn't support content security policy

00:20:38,929 --> 00:20:42,619
headers for some reason we don't know

00:20:40,549 --> 00:20:46,669
why so we had to add an engineer's

00:20:42,619 --> 00:20:49,070
before our Amazon s3 just to add those

00:20:46,669 --> 00:20:51,440
headers and that's the another downside

00:20:49,070 --> 00:20:53,659
of the content security policy is that

00:20:51,440 --> 00:20:55,009
only a few hosting providers and city

00:20:53,659 --> 00:20:57,229
and support those fellers I don't know

00:20:55,009 --> 00:20:58,700
really why if you ask them nicely they

00:20:57,229 --> 00:21:01,609
would probably turn them on for you

00:20:58,700 --> 00:21:03,710
but it's not by default and it's you

00:21:01,609 --> 00:21:07,159
know it's really really hard and you

00:21:03,710 --> 00:21:07,429
know to sum up what have we learned

00:21:07,159 --> 00:21:10,759
today

00:21:07,429 --> 00:21:13,369
yeah we recap to what continent what

00:21:10,759 --> 00:21:15,769
cross-site scripting was we learned what

00:21:13,369 --> 00:21:18,289
content security policy is and the most

00:21:15,769 --> 00:21:21,169
important thing that I would like to I

00:21:18,289 --> 00:21:24,049
would like to you to learn from my talk

00:21:21,169 --> 00:21:25,909
is that security is really really hard

00:21:24,049 --> 00:21:29,659
and we should always pay attention to it

00:21:25,909 --> 00:21:32,509
because it's it's really important and

00:21:29,659 --> 00:21:34,970
it can cost us a lot a lot of money and

00:21:32,509 --> 00:21:37,190
a lot of and it can cause a lot of

00:21:34,970 --> 00:21:41,029
trouble if we don't have security done

00:21:37,190 --> 00:21:43,099
right and here are a couple of links you

00:21:41,029 --> 00:21:44,960
can read afterwards and my name is

00:21:43,099 --> 00:21:47,750
kasper zhukovsky for girl follow me on

00:21:44,960 --> 00:21:49,810
twitter and thank you very much

00:21:47,750 --> 00:21:49,810

YouTube URL: https://www.youtube.com/watch?v=IE9_sUgeTkU


