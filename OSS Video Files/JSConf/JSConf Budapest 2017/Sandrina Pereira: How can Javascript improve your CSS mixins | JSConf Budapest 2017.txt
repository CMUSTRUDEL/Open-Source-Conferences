Title: Sandrina Pereira: How can Javascript improve your CSS mixins | JSConf Budapest 2017
Publication date: 2017-12-01
Playlist: JSConf Budapest 2017
Description: 
	Open a new window of possibilities to CSS: Faster compilation time, advanced logic, better styles scalability with Unit Testing and more.

How can we use Javascript in order expand the potential of CSS? Why not bring Unit Testing to the table? PostCSS exposes a new world of possibilities for CSS with Javascript. Let’s have a faster compilation time, a prettier and more advanced logic than @if | @for, access to values outside of the CSS files, and much more! Let’s put your CSS to the test!

http://jsconfbp.com/speakers/sandrina-pereira/
Captions: 
	00:00:00,550 --> 00:00:05,609
[Applause]

00:00:02,149 --> 00:00:07,710
hi everyone thank you all for coming

00:00:05,609 --> 00:00:09,719
yeah this is my first time in a big

00:00:07,710 --> 00:00:12,599
conference like yes calm even as a

00:00:09,719 --> 00:00:17,490
speaker so guys this is amazing this is

00:00:12,599 --> 00:00:20,250
beautiful like oh I start so I'm Sabrina

00:00:17,490 --> 00:00:22,560
I came from Portugal where I work at far

00:00:20,250 --> 00:00:25,680
fetch as a white Vela / besides that

00:00:22,560 --> 00:00:28,500
from design to front-end I'm a web lover

00:00:25,680 --> 00:00:30,929
and today I'm here to share with you how

00:00:28,500 --> 00:00:34,680
you can improve your CSS mix-ins with

00:00:30,929 --> 00:00:35,160
JavaScript so I know what you are

00:00:34,680 --> 00:00:38,280
thinking

00:00:35,160 --> 00:00:40,950
Oh CSS come for yesterday now it's all

00:00:38,280 --> 00:00:42,960
about JavaScript well guess what I'm I'm

00:00:40,950 --> 00:00:45,000
going to talk about both CSS and

00:00:42,960 --> 00:00:45,390
JavaScript but before starting let me

00:00:45,000 --> 00:00:47,309
know

00:00:45,390 --> 00:00:51,989
is anyone here that doesn't know

00:00:47,309 --> 00:00:52,590
anything about CSS anything no one right

00:00:51,989 --> 00:00:56,430
perfect

00:00:52,590 --> 00:01:01,590
so how many of you are used to tools

00:00:56,430 --> 00:01:06,810
like sass or less Oh quite a lot right a

00:01:01,590 --> 00:01:11,100
lot okay what about post CSS Alf okay

00:01:06,810 --> 00:01:15,299
what about the new wave of CSS NGS like

00:01:11,100 --> 00:01:16,110
style components or glamorous some of

00:01:15,299 --> 00:01:18,360
you okay

00:01:16,110 --> 00:01:21,659
whatever the tool we use we've been

00:01:18,360 --> 00:01:24,750
using them because CSS doesn't have

00:01:21,659 --> 00:01:26,810
logic right you just write a class give

00:01:24,750 --> 00:01:30,150
it some rules and you hope that it works

00:01:26,810 --> 00:01:32,820
the good part about tools like sauce or

00:01:30,150 --> 00:01:36,659
post CSS is that allow us to write some

00:01:32,820 --> 00:01:39,479
logic here we have for loop where you

00:01:36,659 --> 00:01:41,939
increment the ninja level from one to

00:01:39,479 --> 00:01:44,549
ten and dagger the level the faster than

00:01:41,939 --> 00:01:47,490
emotion will be another thing that you

00:01:44,549 --> 00:01:49,590
can do it's as conditionals so if the

00:01:47,490 --> 00:01:52,259
ninja level is ten it will be invisible

00:01:49,590 --> 00:01:52,890
otherwise it will take some time does it

00:01:52,259 --> 00:01:56,070
make sense

00:01:52,890 --> 00:01:58,380
no but I hope you get idea okay another

00:01:56,070 --> 00:02:00,750
thing that you can do it's at some

00:01:58,380 --> 00:02:03,450
mix-ins I will talk more about them

00:02:00,750 --> 00:02:07,469
later so all of this logic is really

00:02:03,450 --> 00:02:09,959
cool until at the end of the day he will

00:02:07,469 --> 00:02:13,770
end up with something like this let me

00:02:09,959 --> 00:02:17,100
describe this for you you have a mixin

00:02:13,770 --> 00:02:20,400
let as a each after 15 lines of calls

00:02:17,100 --> 00:02:23,550
you have an include inside that includes

00:02:20,400 --> 00:02:25,980
and after another 50 lines of code you

00:02:23,550 --> 00:02:28,680
have a four with a thief with some

00:02:25,980 --> 00:02:32,190
quests a class with some variables and

00:02:28,680 --> 00:02:35,310
another includes and after that I don't

00:02:32,190 --> 00:02:38,160
care I really don't care this is not CSS

00:02:35,310 --> 00:02:40,680
it can be like you know what we call

00:02:38,160 --> 00:02:43,920
this this is spaghetti code this is

00:02:40,680 --> 00:02:47,160
readable code like I look at this and

00:02:43,920 --> 00:02:49,950
it's like can't we simplify this I wish

00:02:47,160 --> 00:02:52,230
I could handle all of these logic with

00:02:49,950 --> 00:02:54,330
JavaScript and let me tell you if you

00:02:52,230 --> 00:02:57,090
are not the guy who is writing this

00:02:54,330 --> 00:02:59,700
someone else is doing that for you these

00:02:57,090 --> 00:03:03,420
are the most popular post CSS plugins

00:02:59,700 --> 00:03:06,720
that allow us to write logic in CSS like

00:03:03,420 --> 00:03:08,610
mix-ins functions conditionals and at

00:03:06,720 --> 00:03:11,160
the end of the month it's more than

00:03:08,610 --> 00:03:13,920
alpha million of downloads that's a lot

00:03:11,160 --> 00:03:17,070
of logic that you wish you could use

00:03:13,920 --> 00:03:20,850
javascript and to do that you need to

00:03:17,070 --> 00:03:23,130
use post CSS WIPO CSS well possesses is

00:03:20,850 --> 00:03:25,260
really fast compared to sauce because

00:03:23,130 --> 00:03:28,590
it's built with JavaScript and sass is

00:03:25,260 --> 00:03:30,630
built with Ruby then it's modular so

00:03:28,590 --> 00:03:33,960
it's easy to contribute like writing a

00:03:30,630 --> 00:03:36,390
plug-in with those plugins you have

00:03:33,960 --> 00:03:39,540
access to features that are impossible

00:03:36,390 --> 00:03:44,040
with sauce and last but not least it's

00:03:39,540 --> 00:03:46,110
really simple to start to setup in any

00:03:44,040 --> 00:03:49,380
project with web pack or belt or

00:03:46,110 --> 00:03:52,020
whatever so before jumping to JavaScript

00:03:49,380 --> 00:03:55,530
let me quickly explain how a mixin works

00:03:52,020 --> 00:03:58,020
with CSS in this case with post CSS so

00:03:55,530 --> 00:04:01,410
you define a mix in and you give it a

00:03:58,020 --> 00:04:03,510
name sites dynamics in can have

00:04:01,410 --> 00:04:06,870
arguments like a function in JavaScript

00:04:03,510 --> 00:04:10,440
let's give it a value inside the mixing

00:04:06,870 --> 00:04:12,060
you can have whatever logic you want but

00:04:10,440 --> 00:04:14,370
in this case let's keep it simple a

00:04:12,060 --> 00:04:18,090
width and a height rule with the same

00:04:14,370 --> 00:04:21,150
value that's it to use the mixing you'll

00:04:18,090 --> 00:04:23,520
need to write hot mix in the name of the

00:04:21,150 --> 00:04:27,390
mixing size and give it a value 20

00:04:23,520 --> 00:04:27,630
pixels after that post CSS mix-ins will

00:04:27,390 --> 00:04:29,940
do

00:04:27,630 --> 00:04:32,670
all the magic and you will end up with a

00:04:29,940 --> 00:04:34,920
width and a height of 20 pixels that's

00:04:32,670 --> 00:04:38,340
it this is all you need to know about

00:04:34,920 --> 00:04:40,860
CSS to follow the rest of my talk now

00:04:38,340 --> 00:04:42,780
with JavaScript it's pretty the same but

00:04:40,860 --> 00:04:45,540
with a function but there is one main

00:04:42,780 --> 00:04:49,560
difference the mixin name is a file name

00:04:45,540 --> 00:04:52,620
in this case size GS the mixin I'm will

00:04:49,560 --> 00:04:54,330
recites another difference is the first

00:04:52,620 --> 00:04:56,790
argument is a mixin note

00:04:54,330 --> 00:04:59,130
mixing all is created by post CSS and

00:04:56,790 --> 00:05:02,820
with that you can have access to the

00:04:59,130 --> 00:05:05,730
context of the mixing but we all don't

00:05:02,820 --> 00:05:07,380
need that in this example so you just

00:05:05,730 --> 00:05:10,110
need to know that it's used at work for

00:05:07,380 --> 00:05:12,720
CSS then you pass the the rest of the

00:05:10,110 --> 00:05:15,420
arguments in this case of le then to

00:05:12,720 --> 00:05:17,820
return the CSS you return as an object a

00:05:15,420 --> 00:05:22,110
width and height of the same well pretty

00:05:17,820 --> 00:05:24,570
simple pretty similar to CSS now the

00:05:22,110 --> 00:05:28,590
only thing missing is to connect this

00:05:24,570 --> 00:05:30,090
mixing to the CSS files to do that you

00:05:28,590 --> 00:05:32,670
need to update the post CSS

00:05:30,090 --> 00:05:35,340
configuration file that file is very

00:05:32,670 --> 00:05:38,690
well all your plugins one of them is the

00:05:35,340 --> 00:05:41,430
process s mix-ins possesses mix-ins as a

00:05:38,690 --> 00:05:43,590
option called mix-ins directory where

00:05:41,430 --> 00:05:47,730
you pass the folder that has all your

00:05:43,590 --> 00:05:49,920
mix ins that's it now back to the CSS

00:05:47,730 --> 00:05:52,170
file you just need to call the mix in

00:05:49,920 --> 00:05:54,750
it's a global mixing so you don't even

00:05:52,170 --> 00:05:57,360
need to import the mixing and all the

00:05:54,750 --> 00:06:00,120
logic behind that mixing is handled by

00:05:57,360 --> 00:06:03,870
JavaScript how cool is that this is

00:06:00,120 --> 00:06:08,010
something new now what can you do with

00:06:03,870 --> 00:06:11,540
logic that you can't in CSS what happens

00:06:08,010 --> 00:06:11,540
to logic in JavaScript

00:06:16,169 --> 00:06:22,560
let's be honest here guys how many of

00:06:19,620 --> 00:06:30,629
you write unit tests JavaScript unit

00:06:22,560 --> 00:06:33,090
tests oh okay okay is anyone here that

00:06:30,629 --> 00:06:36,300
doesn't write unit tests in JavaScript

00:06:33,090 --> 00:06:37,740
don't be shy come on it's okay come on

00:06:36,300 --> 00:06:42,150
no one okay

00:06:37,740 --> 00:06:46,759
some of you okay okay is anyone here

00:06:42,150 --> 00:06:46,759
that doesn't care at all about tests I

00:06:47,509 --> 00:06:53,370
saw you and I understand you i sir I do

00:06:50,909 --> 00:06:54,779
I know why you don't write tests you

00:06:53,370 --> 00:06:58,319
don't write this and you don't care

00:06:54,779 --> 00:07:01,949
about tests because your code is so so

00:06:58,319 --> 00:07:04,800
perfect so simple doesn't need to be

00:07:01,949 --> 00:07:09,300
tested right what could be wrong or

00:07:04,800 --> 00:07:12,120
maybe just maybe your code is so complex

00:07:09,300 --> 00:07:13,949
it's like come on it works on my machine

00:07:12,120 --> 00:07:17,159
don't touch it it will work on next

00:07:13,949 --> 00:07:20,490
Monday okay well let me tell you my

00:07:17,159 --> 00:07:23,430
story when years ago more or less I

00:07:20,490 --> 00:07:25,080
didn't care about this come on

00:07:23,430 --> 00:07:28,020
like I didn't care because I didn't

00:07:25,080 --> 00:07:30,810
understand them but when I found myself

00:07:28,020 --> 00:07:33,379
writing the same code over and over

00:07:30,810 --> 00:07:35,849
again I understood I understood that

00:07:33,379 --> 00:07:39,449
writing tests forced you to simplify

00:07:35,849 --> 00:07:42,060
your code and that's not easy when you

00:07:39,449 --> 00:07:45,060
write tests you need to know exactly

00:07:42,060 --> 00:07:48,180
what to cause what to do and when you

00:07:45,060 --> 00:07:51,270
know what to do you do less and when you

00:07:48,180 --> 00:07:52,349
do less you can do better so in your

00:07:51,270 --> 00:07:54,779
next project

00:07:52,349 --> 00:07:56,969
don't forget about tests they will

00:07:54,779 --> 00:07:59,009
improve you they will improve your calls

00:07:56,969 --> 00:08:00,479
and they even if you don't know how to

00:07:59,009 --> 00:08:03,419
test you can start today

00:08:00,479 --> 00:08:05,599
by testing a CSS mixing with JavaScript

00:08:03,419 --> 00:08:08,969
so let's do it

00:08:05,599 --> 00:08:11,189
although the tests work a test is simple

00:08:08,969 --> 00:08:14,069
as you expect something to match an

00:08:11,189 --> 00:08:17,069
output so let's see how we test the size

00:08:14,069 --> 00:08:19,649
mix in it start by importing the size

00:08:17,069 --> 00:08:22,139
then you have a test function area I'm

00:08:19,649 --> 00:08:24,180
using just just is a test framework

00:08:22,139 --> 00:08:26,729
built by Facebook but you can use

00:08:24,180 --> 00:08:29,519
whatever you want then in your test

00:08:26,729 --> 00:08:32,130
function you give it a description slice

00:08:29,519 --> 00:08:35,159
return the width and height then you

00:08:32,130 --> 00:08:37,560
expect the size that it's a mixing node

00:08:35,159 --> 00:08:40,260
and the value two we call tuned output

00:08:37,560 --> 00:08:41,729
remember the mixing no this is why pasta

00:08:40,260 --> 00:08:46,769
says that we don't need it

00:08:41,729 --> 00:08:49,620
nope then you pass a value twenty four

00:08:46,769 --> 00:08:52,230
pixels and then you just need to write

00:08:49,620 --> 00:08:55,529
the expected output an object with a

00:08:52,230 --> 00:08:57,990
width and height of 24 pixels after that

00:08:55,529 --> 00:09:00,839
you just need to run the test see a

00:08:57,990 --> 00:09:03,209
green checkmark and be happy you don't

00:09:00,839 --> 00:09:06,390
need to worry about this mixing anymore

00:09:03,209 --> 00:09:09,510
because it's tested you have CSS logic

00:09:06,390 --> 00:09:12,540
tested with JavaScript so until at the

00:09:09,510 --> 00:09:14,339
end of the day you can enjoy the rest of

00:09:12,540 --> 00:09:20,940
the day how cool is that

00:09:14,339 --> 00:09:23,250
it's really cool no I think it's great

00:09:20,940 --> 00:09:25,680
that we have these tools that allow us

00:09:23,250 --> 00:09:28,709
to create these small improvements in

00:09:25,680 --> 00:09:30,569
our CSS because we like to improve we

00:09:28,709 --> 00:09:34,019
like to evolve and that's our wave

00:09:30,569 --> 00:09:38,839
evolution works not really let me tell

00:09:34,019 --> 00:09:38,839
you our evolution really works ready

00:09:45,140 --> 00:09:50,330
you're laughing but this is not fun

00:09:50,480 --> 00:09:56,730
waiting for w3c to approve a feature and

00:09:53,820 --> 00:10:02,070
then all browsers is supported so we can

00:09:56,730 --> 00:10:05,880
use that feature this is a pain so my

00:10:02,070 --> 00:10:08,310
question is is where is our CSS mixing

00:10:05,880 --> 00:10:11,160
in this process we where is the size

00:10:08,310 --> 00:10:13,590
mixing well it's not here it's not here

00:10:11,160 --> 00:10:15,930
because we don't like to wait we don't

00:10:13,590 --> 00:10:20,040
like to wait for a web evolution it's

00:10:15,930 --> 00:10:23,970
too slow so what we do we create a web

00:10:20,040 --> 00:10:26,040
evolution nowadays almost every project

00:10:23,970 --> 00:10:28,800
as one of these tools

00:10:26,040 --> 00:10:31,170
that's all where evolution works we like

00:10:28,800 --> 00:10:35,730
to create we like to evolve we like to

00:10:31,170 --> 00:10:38,190
be one step ahead and how web evolution

00:10:35,730 --> 00:10:40,920
works like that you create something we

00:10:38,190 --> 00:10:44,490
share it so people can see how amazing

00:10:40,920 --> 00:10:47,070
is that or not and you use it until the

00:10:44,490 --> 00:10:49,650
day it gets approval and this is what we

00:10:47,070 --> 00:10:52,770
are doing with our mixing we already

00:10:49,650 --> 00:10:55,710
creatives what about sharing you have

00:10:52,770 --> 00:10:57,660
your mix-ins folder full of mix-ins that

00:10:55,710 --> 00:11:00,900
improves your project your project

00:10:57,660 --> 00:11:03,540
workflow what about the others maybe

00:11:00,900 --> 00:11:05,820
there is someone else that needs exactly

00:11:03,540 --> 00:11:10,230
the same mixing as you you could share

00:11:05,820 --> 00:11:13,560
it so how can you share this I'm talking

00:11:10,230 --> 00:11:15,570
about mix-ins for almost 15 minutes and

00:11:13,560 --> 00:11:17,790
there is something that I have to

00:11:15,570 --> 00:11:19,170
confess you there is one thing that I

00:11:17,790 --> 00:11:22,560
don't like about mix-ins

00:11:19,170 --> 00:11:25,620
the problem is with mix-ins is that when

00:11:22,560 --> 00:11:29,970
you have a lot of mix-ins you have

00:11:25,620 --> 00:11:32,700
mix-ins everywhere so what if I tell you

00:11:29,970 --> 00:11:36,330
that you can simplify even more this

00:11:32,700 --> 00:11:39,750
mixing instead of writing at mixing size

00:11:36,330 --> 00:11:44,220
20 pixels you could just write size 20

00:11:39,750 --> 00:11:46,410
pixels it looks simpler official doesn't

00:11:44,220 --> 00:11:49,260
it it could be one day who knows and

00:11:46,410 --> 00:11:51,750
this is one of the things that I most

00:11:49,260 --> 00:11:55,260
like about post ESS it allow us to

00:11:51,750 --> 00:11:57,360
create custom CSS in this case we are

00:11:55,260 --> 00:11:59,550
creating a custom property

00:11:57,360 --> 00:12:02,600
and to do this you need to write a post

00:11:59,550 --> 00:12:06,990
CSS plugin so let's do it

00:12:02,600 --> 00:12:09,420
to help you there is a post CSS plugin

00:12:06,990 --> 00:12:14,510
boilerplate hungry tub and we only use

00:12:09,420 --> 00:12:17,579
them we only use it in this talk so

00:12:14,510 --> 00:12:21,149
first of all you need to import post CSS

00:12:17,579 --> 00:12:23,040
to have access to the post CSS API after

00:12:21,149 --> 00:12:26,430
that you'll create a post ESS plug-in

00:12:23,040 --> 00:12:28,980
let's give it a name for CSS sites then

00:12:26,430 --> 00:12:31,110
you'll have initializer the initializer

00:12:28,980 --> 00:12:33,839
is a callback function that gives you

00:12:31,110 --> 00:12:37,560
access to the CSS itself in a person

00:12:33,839 --> 00:12:39,930
node like an ast with that you are ready

00:12:37,560 --> 00:12:41,930
to transform the CSS with JavaScript

00:12:39,930 --> 00:12:45,240
this is what you have on the boilerplate

00:12:41,930 --> 00:12:49,019
so before starting to actually write

00:12:45,240 --> 00:12:51,570
some code let me see if it's working to

00:12:49,019 --> 00:12:54,750
see if this plug-in works I need to set

00:12:51,570 --> 00:12:56,640
up a new project with post CSS after

00:12:54,750 --> 00:12:58,890
that I need to apply to process s

00:12:56,640 --> 00:13:02,449
configuration adding the post ESS size

00:12:58,890 --> 00:13:06,959
plug-in then let's write some CSS that

00:13:02,449 --> 00:13:09,810
uses that plug-in and then you also

00:13:06,959 --> 00:13:14,269
fresh the page while you code until it

00:13:09,810 --> 00:13:18,540
works doesn't feel right doesn't it

00:13:14,269 --> 00:13:20,699
sorry to say this but know there are

00:13:18,540 --> 00:13:23,160
better ways than doing this this is not

00:13:20,699 --> 00:13:26,790
how you should test your code like I'm

00:13:23,160 --> 00:13:30,949
talking about CSS mix-ins but we all do

00:13:26,790 --> 00:13:35,100
this in our daily basis don't worry so

00:13:30,949 --> 00:13:39,600
there are better ways faster ways to to

00:13:35,100 --> 00:13:42,480
test a post ESS plug-in or your calls so

00:13:39,600 --> 00:13:44,550
instead of having a refresh driven

00:13:42,480 --> 00:13:47,250
development we can have a test-driven

00:13:44,550 --> 00:13:50,010
development also known as TDD where you

00:13:47,250 --> 00:13:52,320
start by writing the tests and then

00:13:50,010 --> 00:13:55,890
write the code needed to make those

00:13:52,320 --> 00:13:59,160
tests pass so let's write our test to

00:13:55,890 --> 00:14:02,339
this plug-in so you start by importing

00:13:59,160 --> 00:14:04,050
the plug-in and post ESS then you have a

00:14:02,339 --> 00:14:06,149
run function this is what you have on

00:14:04,050 --> 00:14:08,790
the boilerplate you can see a run

00:14:06,149 --> 00:14:10,980
function the run function like a utility

00:14:08,790 --> 00:14:13,230
function that saves you

00:14:10,980 --> 00:14:15,329
writing expects something to match and

00:14:13,230 --> 00:14:18,810
output in this case you are expecting

00:14:15,329 --> 00:14:21,839
that the post CSS process result to

00:14:18,810 --> 00:14:25,139
match the expected output

00:14:21,839 --> 00:14:27,480
it might sound hard to understand but

00:14:25,139 --> 00:14:29,279
you'll you'll understand that after that

00:14:27,480 --> 00:14:31,560
you have a test function with a

00:14:29,279 --> 00:14:33,720
description and then you call the run

00:14:31,560 --> 00:14:37,110
function where you give it an input and

00:14:33,720 --> 00:14:39,870
an output so if you write a class foo

00:14:37,110 --> 00:14:41,850
with a size 1 pixel then you are

00:14:39,870 --> 00:14:44,490
expecting the foo with a width and a

00:14:41,850 --> 00:14:47,130
height of 1 pixel that's it and if you

00:14:44,490 --> 00:14:50,339
run the test now it will file so let's

00:14:47,130 --> 00:14:53,399
make it pass back to our processes

00:14:50,339 --> 00:14:56,610
plug-in code the first thing that you

00:14:53,399 --> 00:15:00,300
need to do it's to look for the size

00:14:56,610 --> 00:15:02,760
property in your CSS to do that use the

00:15:00,300 --> 00:15:04,740
world declaration method that you can't

00:15:02,760 --> 00:15:07,320
filter by property in this case the size

00:15:04,740 --> 00:15:11,430
when you have a match you'll have access

00:15:07,320 --> 00:15:14,490
to the declaration itself and with that

00:15:11,430 --> 00:15:16,949
you just need to do two things to get

00:15:14,490 --> 00:15:19,500
the size value and all the weed and

00:15:16,949 --> 00:15:22,170
direct properties the size value is

00:15:19,500 --> 00:15:24,449
simple as declaration dot value then to

00:15:22,170 --> 00:15:26,699
add the weed indict properties you use

00:15:24,449 --> 00:15:31,680
clone before where you pass an object

00:15:26,699 --> 00:15:35,699
with a property and the value now let me

00:15:31,680 --> 00:15:38,730
see if it works we have class a square

00:15:35,699 --> 00:15:41,279
class with a size 80 pixels and the red

00:15:38,730 --> 00:15:42,690
background is anyone here that thinks

00:15:41,279 --> 00:15:45,209
that this will not work

00:15:42,690 --> 00:15:48,389
I believe it works I mean my code is

00:15:45,209 --> 00:15:52,279
perfect right of course it works

00:15:48,389 --> 00:15:56,550
come on now if it works on the browser

00:15:52,279 --> 00:16:02,970
it will work on the test yes

00:15:56,550 --> 00:16:05,910
no no of course it works what a second

00:16:02,970 --> 00:16:08,370
oh it doesn't work my code is not

00:16:05,910 --> 00:16:10,529
perfect anymore so we are suspecting the

00:16:08,370 --> 00:16:13,500
width and height of 1 pixel but we also

00:16:10,529 --> 00:16:14,810
receive the size 1 pixel there is two

00:16:13,500 --> 00:16:18,420
problems here

00:16:14,810 --> 00:16:21,060
CSS arrows on the browser are silent so

00:16:18,420 --> 00:16:22,959
you will not see size is not the finest

00:16:21,060 --> 00:16:27,019
on the console

00:16:22,959 --> 00:16:30,529
besides that and worse than that the you

00:16:27,019 --> 00:16:33,259
are with this you are having more coal

00:16:30,529 --> 00:16:36,649
that you expect on your production file

00:16:33,259 --> 00:16:40,490
and that's not good so in this case unit

00:16:36,649 --> 00:16:43,459
tests l pellets and because in this case

00:16:40,490 --> 00:16:45,680
we forgot to remove the size property so

00:16:43,459 --> 00:16:48,290
to home of the size property it's simple

00:16:45,680 --> 00:16:52,129
as declaration that he move that's it

00:16:48,290 --> 00:16:54,250
now if you run the test again it will

00:16:52,129 --> 00:16:57,079
pass simple as that

00:16:54,250 --> 00:17:00,829
this is all you need to write a post CSS

00:16:57,079 --> 00:17:01,850
plug in less than ten lines of code how

00:17:00,829 --> 00:17:06,650
simple is that

00:17:01,850 --> 00:17:09,470
and we let like what can you do with the

00:17:06,650 --> 00:17:12,860
size eight eighty pixels that we

00:17:09,470 --> 00:17:17,209
couldn't do with the mixing you can

00:17:12,860 --> 00:17:19,850
publish it you can share it so from your

00:17:17,209 --> 00:17:24,100
project you can level up to another

00:17:19,850 --> 00:17:27,230
project and share it with everyone

00:17:24,100 --> 00:17:29,750
actually this plug-in already exists is

00:17:27,230 --> 00:17:33,169
called Poe CSS short size and you can

00:17:29,750 --> 00:17:35,840
have more logic than just having a value

00:17:33,169 --> 00:17:38,690
you can add a second value so we the

00:17:35,840 --> 00:17:41,600
night you can have proportional values

00:17:38,690 --> 00:17:46,250
and if you have a size you can have a

00:17:41,600 --> 00:17:48,919
mean size and of course a Mac size there

00:17:46,250 --> 00:17:51,860
are a lot of really good possi SS

00:17:48,919 --> 00:17:54,890
plug-ins like CSS next allow us to write

00:17:51,860 --> 00:17:58,190
CSS for it's like barbell for JavaScript

00:17:54,890 --> 00:18:00,460
you have FTL CSS that transforms the

00:17:58,190 --> 00:18:03,049
left to right from right to left

00:18:00,460 --> 00:18:05,150
direction and the web possess a short

00:18:03,049 --> 00:18:08,179
possessor short is a group of small

00:18:05,150 --> 00:18:10,700
plugins like Poe CSS short sites that

00:18:08,179 --> 00:18:14,440
allow us to have shortened properties in

00:18:10,700 --> 00:18:20,900
CSS and you can check much more plugins

00:18:14,440 --> 00:18:24,980
now so far my talk is all about GS in

00:18:20,900 --> 00:18:27,820
CSS instead of CSS in GS but you can

00:18:24,980 --> 00:18:31,850
also apply this at mix-ins

00:18:27,820 --> 00:18:35,680
concept with CSS NGS tools let's see

00:18:31,850 --> 00:18:38,680
with glamorous with glamorous we

00:18:35,680 --> 00:18:40,990
the CSS in an object so to use the size

00:18:38,680 --> 00:18:44,290
function in this case you can use the

00:18:40,990 --> 00:18:46,450
spread operator to get the value which

00:18:44,290 --> 00:18:49,360
style components is pretty the same but

00:18:46,450 --> 00:18:51,850
instead of an object is a template

00:18:49,360 --> 00:18:55,030
literal well you need to use the

00:18:51,850 --> 00:18:58,420
placeholder the dollar with the brackets

00:18:55,030 --> 00:19:03,420
and that's it so whatever the tool you

00:18:58,420 --> 00:19:06,490
you use you can improve your CSS let me

00:19:03,420 --> 00:19:10,330
let me say something here like I'm not

00:19:06,490 --> 00:19:13,030
saying that CSS mix-ins are well like

00:19:10,330 --> 00:19:15,370
they can do but they can do if you have

00:19:13,030 --> 00:19:18,130
your small project yeah you can use CSS

00:19:15,370 --> 00:19:20,530
mix-ins that's okay but if you have

00:19:18,130 --> 00:19:23,860
bigger projects where you need to feel

00:19:20,530 --> 00:19:26,350
safer about your calls you can use

00:19:23,860 --> 00:19:28,750
JavaScript to help you you can test your

00:19:26,350 --> 00:19:31,900
code you can test your CSS logic that's

00:19:28,750 --> 00:19:34,690
really nice so a quick recap

00:19:31,900 --> 00:19:37,150
how can JavaScript improve your CSS

00:19:34,690 --> 00:19:40,960
mix-ins so say no more

00:19:37,150 --> 00:19:43,210
- weird sass syntax and spaghetti code

00:19:40,960 --> 00:19:47,050
and all of that you can enjoy javascript

00:19:43,210 --> 00:19:50,860
es6 AST whatever you want you have a

00:19:47,050 --> 00:19:53,730
full power and the rio CSS for the first

00:19:50,860 --> 00:19:56,350
time you can test your CSS logic and

00:19:53,730 --> 00:19:59,980
this is really cool this is what i like

00:19:56,350 --> 00:20:03,310
most and if your mixing is really nice

00:19:59,980 --> 00:20:05,350
you can share it with the web and that's

00:20:03,310 --> 00:20:07,780
why I came here today because I found

00:20:05,350 --> 00:20:10,090
something that improves my workflow and

00:20:07,780 --> 00:20:12,580
I believe that might improve yours as

00:20:10,090 --> 00:20:15,120
well because sharing is what make us

00:20:12,580 --> 00:20:16,540
better thank you

00:20:15,120 --> 00:20:19,240
[Applause]

00:20:16,540 --> 00:20:19,320
[Music]

00:20:19,240 --> 00:20:23,579
you

00:20:19,320 --> 00:20:23,579

YouTube URL: https://www.youtube.com/watch?v=UUl0BZgjm3o


