Title: Anna Migas: Make your animations perform well | JSConf Budapest 2017
Publication date: 2017-12-01
Playlist: JSConf Budapest 2017
Description: 
	Animations have been around the web for some time already; badly implemented can be deadly to the website’s performance and the user’s delight. Let’s learn together how the browser renders our page, to know where to look for optimisations and what are the best techniques to get our animations smooth and fast.

http://jsconfbp.com/speakers/anna-migas/
Captions: 
	00:00:02,780 --> 00:00:06,810
does it work yeah it works well that's

00:00:05,460 --> 00:00:10,320
big

00:00:06,810 --> 00:00:12,240
so hello my name is Ann amigas I work as

00:00:10,320 --> 00:00:15,059
a front-end developer and designer in

00:00:12,240 --> 00:00:17,130
lunar logic we are no management

00:00:15,059 --> 00:00:20,910
software house based in Krakow Poland

00:00:17,130 --> 00:00:25,859
which is not far thankfully we built

00:00:20,910 --> 00:00:27,960
apps in rails in elixir in react and

00:00:25,859 --> 00:00:31,080
whatever technology suits our clients

00:00:27,960 --> 00:00:35,010
needs best the title of my talk is make

00:00:31,080 --> 00:00:38,219
your animations perform well and I had a

00:00:35,010 --> 00:00:40,920
pleasure to create and maintain free

00:00:38,219 --> 00:00:45,930
open-source libraries you can ignore the

00:00:40,920 --> 00:00:48,270
CSS name in the name stir and before I

00:00:45,930 --> 00:00:50,039
give you the first tip on animation

00:00:48,270 --> 00:00:54,899
performance I need to share a short

00:00:50,039 --> 00:00:57,960
story about my life so about two years

00:00:54,899 --> 00:01:00,989
ago I bought my very first own apartment

00:00:57,960 --> 00:01:04,949
and I decided to decorate it on my own

00:01:00,989 --> 00:01:07,260
and what I found out it's that like

00:01:04,949 --> 00:01:09,450
decorating your house is very similar to

00:01:07,260 --> 00:01:13,770
designing a website you just need to put

00:01:09,450 --> 00:01:17,610
many things together that go well what I

00:01:13,770 --> 00:01:19,530
also realized is that most of the things

00:01:17,610 --> 00:01:23,310
that are out there in furniture shops

00:01:19,530 --> 00:01:26,100
are not the things that I want in my

00:01:23,310 --> 00:01:28,680
house I just didn't like the things that

00:01:26,100 --> 00:01:31,740
I could afford and the things that I

00:01:28,680 --> 00:01:36,090
couldn't afford I liked so kind of it

00:01:31,740 --> 00:01:40,259
didn't much so this is my lamp in the

00:01:36,090 --> 00:01:41,670
living room after two years and if I had

00:01:40,259 --> 00:01:45,360
to compare it to something on the

00:01:41,670 --> 00:01:47,430
website is it's this just text that says

00:01:45,360 --> 00:01:51,030
low thing that she puts in a place where

00:01:47,430 --> 00:01:52,710
the low there should be it just kills

00:01:51,030 --> 00:01:54,630
you that's something like that is there

00:01:52,710 --> 00:01:56,549
anything about it every time I see it

00:01:54,630 --> 00:02:00,270
that you should actually put something

00:01:56,549 --> 00:02:03,000
real there so it's good because at some

00:02:00,270 --> 00:02:06,799
point you're going to replace it the

00:02:03,000 --> 00:02:10,670
next piece I have is this beautiful

00:02:06,799 --> 00:02:14,810
coffee table when I found it after light

00:02:10,670 --> 00:02:17,150
year and a half I told that it's perfect

00:02:14,810 --> 00:02:22,010
because it was affordable what color was

00:02:17,150 --> 00:02:24,260
matching my place it has this shelf to

00:02:22,010 --> 00:02:26,090
put all my art albums there so it's just

00:02:24,260 --> 00:02:28,190
it's just perfect and I assembled it

00:02:26,090 --> 00:02:31,280
myself so I feel it's like really

00:02:28,190 --> 00:02:33,140
powerful after that and if I had to

00:02:31,280 --> 00:02:35,980
compare it it would be comparing it to

00:02:33,140 --> 00:02:38,420
the animation that just helps user to

00:02:35,980 --> 00:02:41,840
understand the app better it just guides

00:02:38,420 --> 00:02:43,760
him at some context so everything that

00:02:41,840 --> 00:02:49,810
the user is doing there so it's just

00:02:43,760 --> 00:02:52,760
really good thing and I have this chairs

00:02:49,810 --> 00:02:55,340
well this countertop is of irregular

00:02:52,760 --> 00:02:57,980
size the regular chairs are just too low

00:02:55,340 --> 00:03:01,190
and regular hookers are too high for it

00:02:57,980 --> 00:03:04,400
so I have to choose from like very small

00:03:01,190 --> 00:03:06,650
pool of chairs I found this online and

00:03:04,400 --> 00:03:10,640
they're like why it's for the ball and

00:03:06,650 --> 00:03:12,170
kind of like simple so it's they're

00:03:10,640 --> 00:03:15,049
going to be kind of okay

00:03:12,170 --> 00:03:17,030
but it turned out they're kind of okay

00:03:15,049 --> 00:03:19,310
it's not enough for me I just hate them

00:03:17,030 --> 00:03:22,220
I never sit on them I prefer to eat

00:03:19,310 --> 00:03:24,140
standing up the only moment that they're

00:03:22,220 --> 00:03:26,570
in use is some the big part is when

00:03:24,140 --> 00:03:29,690
someone gets like really drunk and

00:03:26,570 --> 00:03:31,730
decides to sit on them and I can't get

00:03:29,690 --> 00:03:33,560
rid of them because like I have chairs

00:03:31,730 --> 00:03:35,750
they're like everything is fine about

00:03:33,560 --> 00:03:37,670
them but it's just me that don't like

00:03:35,750 --> 00:03:40,070
them and my friends whispering them

00:03:37,670 --> 00:03:42,560
crazy just throw away and have nothing

00:03:40,070 --> 00:03:45,530
there and what I could compare it to

00:03:42,560 --> 00:03:47,329
it's just animation that you put

00:03:45,530 --> 00:03:50,510
something out there without really

00:03:47,329 --> 00:03:53,720
thinking about it and it just stays

00:03:50,510 --> 00:03:57,860
there forever you have no time to

00:03:53,720 --> 00:03:59,750
replace it because you know you already

00:03:57,860 --> 00:04:01,549
you already put something there and you

00:03:59,750 --> 00:04:04,040
have different priorities so it's like

00:04:01,549 --> 00:04:06,769
laggy you make all your users just

00:04:04,040 --> 00:04:10,100
downloads thousands of assets and it's

00:04:06,769 --> 00:04:13,130
not really helping anyone it makes the

00:04:10,100 --> 00:04:15,560
experience worse in like all cases

00:04:13,130 --> 00:04:16,160
basically and it's going to stay there

00:04:15,560 --> 00:04:18,500
believe me

00:04:16,160 --> 00:04:20,660
so the first rule of performance of an

00:04:18,500 --> 00:04:22,789
animation is just to not use them if you

00:04:20,660 --> 00:04:23,170
don't really need them just don't force

00:04:22,789 --> 00:04:27,460
you

00:04:23,170 --> 00:04:32,950
to download many assets to make the

00:04:27,460 --> 00:04:35,320
whole up more junky okay now that we

00:04:32,950 --> 00:04:37,570
have the most important rule of CSS and

00:04:35,320 --> 00:04:40,570
JavaScript and any kind of animations

00:04:37,570 --> 00:04:42,700
behind us the important thing is to

00:04:40,570 --> 00:04:46,000
choose the right tool so there's this

00:04:42,700 --> 00:04:49,720
debate CSS or JavaScript animations some

00:04:46,000 --> 00:04:52,120
people prefer this or that actually to

00:04:49,720 --> 00:04:55,480
be honest they're both perfectly good

00:04:52,120 --> 00:04:58,570
tools but they suit different purpose so

00:04:55,480 --> 00:05:00,420
if you have CSS animations they're just

00:04:58,570 --> 00:05:03,310
great if you have something simple up

00:05:00,420 --> 00:05:05,470
simple to put up like I don't know

00:05:03,310 --> 00:05:08,110
something that just needs to slide up

00:05:05,470 --> 00:05:10,120
the screen this is perfect then during

00:05:08,110 --> 00:05:14,070
the native to the browser they get all

00:05:10,120 --> 00:05:17,700
the GPU acceleration from the browser

00:05:14,070 --> 00:05:21,340
there's a need to put prefixes for them

00:05:17,700 --> 00:05:23,350
unfortunately but it's not much and the

00:05:21,340 --> 00:05:25,690
only bad thing about them is that if you

00:05:23,350 --> 00:05:28,330
need to schedule more than like one or

00:05:25,690 --> 00:05:30,190
two animations in CSS it's just a pain

00:05:28,330 --> 00:05:33,640
and this is where the JavaScript

00:05:30,190 --> 00:05:35,920
animations actually shine they're really

00:05:33,640 --> 00:05:37,930
good at scheduling and timing so if you

00:05:35,920 --> 00:05:40,360
need to put more than one animation and

00:05:37,930 --> 00:05:40,900
schedule them one after another this is

00:05:40,360 --> 00:05:42,130
great

00:05:40,900 --> 00:05:44,380
and there are many ways how you can

00:05:42,130 --> 00:05:47,620
implement JavaScript animations during

00:05:44,380 --> 00:05:49,210
like pure JavaScript it needs some

00:05:47,620 --> 00:05:51,970
optimizations I will talk about the

00:05:49,210 --> 00:05:54,400
trick later there's web animation API

00:05:51,970 --> 00:05:57,670
which is my personal favorite because it

00:05:54,400 --> 00:06:00,040
takes the best things of both words it's

00:05:57,670 --> 00:06:02,680
it's got this GPU acceleration from the

00:06:00,040 --> 00:06:05,710
browser and at the same time it get the

00:06:02,680 --> 00:06:08,530
scheduling and timing unfortunately it

00:06:05,710 --> 00:06:11,050
still needs to be poly field so until

00:06:08,530 --> 00:06:13,990
like all the browser vendors decide to

00:06:11,050 --> 00:06:17,680
have it there well you need to polyfill

00:06:13,990 --> 00:06:19,690
that and there are frameworks but you

00:06:17,680 --> 00:06:22,150
need to decide if they're really needed

00:06:19,690 --> 00:06:25,480
in your app because well it's some code

00:06:22,150 --> 00:06:28,270
that you're downloading and well it can

00:06:25,480 --> 00:06:30,610
be heavy like music is amazing platform

00:06:28,270 --> 00:06:33,130
but it's really heavy so for small apps

00:06:30,610 --> 00:06:34,120
with notes many animations is not good

00:06:33,130 --> 00:06:38,949
choice and MJ

00:06:34,120 --> 00:06:42,850
can be a good choice then okay so so we

00:06:38,949 --> 00:06:46,150
have the choice of Bustos and the the

00:06:42,850 --> 00:06:47,860
most important tip behind us but before

00:06:46,150 --> 00:06:50,740
we actually start optimizing our

00:06:47,860 --> 00:06:54,220
animations it's good to know what's

00:06:50,740 --> 00:06:57,639
going up what's going on in the behind

00:06:54,220 --> 00:07:01,360
because it makes us realize that some

00:06:57,639 --> 00:07:03,040
optimizations can can can make things

00:07:01,360 --> 00:07:06,669
better or worse actually

00:07:03,040 --> 00:07:09,400
so how actually browser paints a website

00:07:06,669 --> 00:07:12,250
let's talk about this for a moment like

00:07:09,400 --> 00:07:16,180
very briefly so first step is the

00:07:12,250 --> 00:07:19,930
browser makes get request and it gets

00:07:16,180 --> 00:07:22,479
HTML or in turn then the h2 the hTML is

00:07:19,930 --> 00:07:25,330
parsed and Dom is created document

00:07:22,479 --> 00:07:27,669
object model it looks like a tree it's

00:07:25,330 --> 00:07:31,180
got all the notes from the HTML in it

00:07:27,669 --> 00:07:33,669
they're visible in this way after that

00:07:31,180 --> 00:07:36,340
the styles are applied it's from the

00:07:33,669 --> 00:07:41,530
user agent from your style sheets inline

00:07:36,340 --> 00:07:43,300
Styles the don't is taken out and we

00:07:41,530 --> 00:07:46,690
have a render tree render tree is very

00:07:43,300 --> 00:07:49,510
similar to the Dom with this difference

00:07:46,690 --> 00:07:52,360
that render tree has all the Styles

00:07:49,510 --> 00:07:54,400
applied and there are only things that's

00:07:52,360 --> 00:07:57,669
going to be actually visible on a page

00:07:54,400 --> 00:08:00,910
so for example if the image elements

00:07:57,669 --> 00:08:04,389
here had display:none and a paragraph

00:08:00,910 --> 00:08:05,680
element had a pseudo class that's what

00:08:04,389 --> 00:08:07,479
would happen

00:08:05,680 --> 00:08:10,389
they'll be it would be also represented

00:08:07,479 --> 00:08:13,479
in the render tree and then the layout

00:08:10,389 --> 00:08:15,430
is calculated at this point the browser

00:08:13,479 --> 00:08:17,229
is trying to figure out how much space

00:08:15,430 --> 00:08:20,139
each of the elements is going to take

00:08:17,229 --> 00:08:23,680
and it actually features it as a

00:08:20,139 --> 00:08:26,500
collection of vector boxes here we need

00:08:23,680 --> 00:08:31,120
to remember that the parent size affects

00:08:26,500 --> 00:08:32,979
its children size after this points when

00:08:31,120 --> 00:08:36,459
browser already figure out how much

00:08:32,979 --> 00:08:39,459
space each element is going to take we

00:08:36,459 --> 00:08:42,180
have everything rasterized and put into

00:08:39,459 --> 00:08:44,800
layers you can think of layers as of

00:08:42,180 --> 00:08:46,600
something like layers in Photoshop that

00:08:44,800 --> 00:08:47,220
if you have things on two different

00:08:46,600 --> 00:08:49,350
layers

00:08:47,220 --> 00:08:51,329
then you can move them around if things

00:08:49,350 --> 00:08:53,730
are on the same layer then there is not

00:08:51,329 --> 00:08:59,069
much of what you can do actually they're

00:08:53,730 --> 00:09:02,910
just glued together so yeah so our our

00:08:59,069 --> 00:09:04,769
our collection of boxes moves to to this

00:09:02,910 --> 00:09:07,350
two layers layers are going to be

00:09:04,769 --> 00:09:12,110
represented as this box shadow I hope

00:09:07,350 --> 00:09:15,060
that you appreciate how cheesy this is

00:09:12,110 --> 00:09:16,949
okay and the last step is compositing

00:09:15,060 --> 00:09:21,029
and at this step this is the first step

00:09:16,949 --> 00:09:25,379
that browser takes advantage of the GPU

00:09:21,029 --> 00:09:29,459
so it optimizes its its way around here

00:09:25,379 --> 00:09:32,339
so the the layers that we had actually

00:09:29,459 --> 00:09:35,550
get glued together into one frame that

00:09:32,339 --> 00:09:38,990
is then shell to the our end user dude

00:09:35,550 --> 00:09:42,589
it's good to one frame one picture so

00:09:38,990 --> 00:09:45,689
this was the first render but actually

00:09:42,589 --> 00:09:49,290
you must understand that every time the

00:09:45,689 --> 00:09:50,910
user makes any change on the on your

00:09:49,290 --> 00:09:53,069
page so by changing I mean like

00:09:50,910 --> 00:09:56,279
scrolling hovering over element that

00:09:53,069 --> 00:09:58,980
changes and hover or just clicking

00:09:56,279 --> 00:10:00,930
something that gets a class somewhere

00:09:58,980 --> 00:10:03,480
else then the browser needs to go

00:10:00,930 --> 00:10:07,040
through all the steps again with the

00:10:03,480 --> 00:10:10,500
small change that instead of having

00:10:07,040 --> 00:10:12,569
instead of having this request at the

00:10:10,500 --> 00:10:17,100
beginning there can be some JavaScript

00:10:12,569 --> 00:10:19,319
that's introduces the change so there

00:10:17,100 --> 00:10:20,879
are different types of change that you

00:10:19,319 --> 00:10:23,100
can actually introduce and some of them

00:10:20,879 --> 00:10:24,689
are more important for performance and

00:10:23,100 --> 00:10:27,480
some of them are a less performance so

00:10:24,689 --> 00:10:29,040
let's go through them the first type of

00:10:27,480 --> 00:10:31,850
changes when we change layout

00:10:29,040 --> 00:10:37,500
it's when we animates with height

00:10:31,850 --> 00:10:39,600
margins left or right properties and in

00:10:37,500 --> 00:10:41,339
this case browser needs to go through

00:10:39,600 --> 00:10:43,050
all the steps because it needs to figure

00:10:41,339 --> 00:10:47,579
out how much space each element is

00:10:43,050 --> 00:10:50,309
taking and unfortunately it's it's a

00:10:47,579 --> 00:10:53,579
very costly change then there is when we

00:10:50,309 --> 00:10:55,829
change the paint properties the browser

00:10:53,579 --> 00:10:58,709
knows how much space each elements takes

00:10:55,829 --> 00:11:00,060
so it can skip this step so it's a bit

00:10:58,709 --> 00:11:02,190
more performance

00:11:00,060 --> 00:11:06,870
these are changes like background color

00:11:02,190 --> 00:11:08,880
color shadows things like that and there

00:11:06,870 --> 00:11:11,520
is the most performant type of change

00:11:08,880 --> 00:11:16,440
when we only change compositing in

00:11:11,520 --> 00:11:18,570
compositing its transforms or opacity in

00:11:16,440 --> 00:11:20,940
this case we don't change layout or

00:11:18,570 --> 00:11:23,610
paint so this is the most optimal kind

00:11:20,940 --> 00:11:25,470
of change which means that these are the

00:11:23,610 --> 00:11:28,620
two properties that you should be

00:11:25,470 --> 00:11:31,080
animating like in in most cases they're

00:11:28,620 --> 00:11:36,570
like perfectly fine to anything you want

00:11:31,080 --> 00:11:39,960
to do in animation all right why is that

00:11:36,570 --> 00:11:43,320
so why this should be the only purpose

00:11:39,960 --> 00:11:45,420
is for for animating first it's this GPU

00:11:43,320 --> 00:11:47,520
acceleration that I that I said that's

00:11:45,420 --> 00:11:51,770
happening at the compositing stage and

00:11:47,520 --> 00:11:57,390
the second one is layer creation so at

00:11:51,770 --> 00:11:59,160
next to last step we had rasterizing and

00:11:57,390 --> 00:12:01,620
creating layers but actually you need to

00:11:59,160 --> 00:12:04,530
know that that by default browser puts

00:12:01,620 --> 00:12:06,180
everything into one layer so we need to

00:12:04,530 --> 00:12:09,750
figure out ways so that the browser

00:12:06,180 --> 00:12:14,010
would create smaller layers and by

00:12:09,750 --> 00:12:16,200
default when we have this when we have

00:12:14,010 --> 00:12:18,360
these different layers like things can

00:12:16,200 --> 00:12:21,840
be moved around and they don't affect

00:12:18,360 --> 00:12:24,810
other things so it means that that the

00:12:21,840 --> 00:12:27,780
animation is smooth so what creates

00:12:24,810 --> 00:12:30,330
other layers frizzier perspective

00:12:27,780 --> 00:12:34,470
transforms animated this is a keyword

00:12:30,330 --> 00:12:38,460
animated 2d transfers or opacity if

00:12:34,470 --> 00:12:41,250
element is top on the top or it's a

00:12:38,460 --> 00:12:44,250
child of the compositing layer that was

00:12:41,250 --> 00:12:47,400
already created accelerated CSS filters

00:12:44,250 --> 00:12:50,430
and in special cases video canvas or

00:12:47,400 --> 00:12:53,340
plugins like flash or Silverlight this

00:12:50,430 --> 00:12:56,130
is what creates layers so we have a

00:12:53,340 --> 00:12:58,350
small problem here and I'll give you an

00:12:56,130 --> 00:13:00,420
example to understand it better let's

00:12:58,350 --> 00:13:02,980
say that we have here an animation is

00:13:00,420 --> 00:13:07,540
applied to the button and it's

00:13:02,980 --> 00:13:09,880
it rotates the button all the time so

00:13:07,540 --> 00:13:12,399
it's fine we have two layers button is

00:13:09,880 --> 00:13:16,149
just moving around notes and that's

00:13:12,399 --> 00:13:18,160
actually affecting anything around but

00:13:16,149 --> 00:13:21,250
in most cases you would want the button

00:13:18,160 --> 00:13:24,940
to actually be moved only for example if

00:13:21,250 --> 00:13:26,740
someone hovers over the verse over it so

00:13:24,940 --> 00:13:30,940
that's the point where you want the

00:13:26,740 --> 00:13:32,829
animation to happen so the problem here

00:13:30,940 --> 00:13:35,230
is that the browser doesn't know that

00:13:32,829 --> 00:13:38,290
this animation is bound to happen so

00:13:35,230 --> 00:13:42,430
it's it puts everything on one layer and

00:13:38,290 --> 00:13:44,800
when user actually actually just hovers

00:13:42,430 --> 00:13:47,260
over over the elements it only has to

00:13:44,800 --> 00:13:50,350
create the new layer so everything needs

00:13:47,260 --> 00:13:51,430
to be repainted and what users is of

00:13:50,350 --> 00:13:53,589
course not

00:13:51,430 --> 00:13:56,529
like the button doesn't disappear

00:13:53,589 --> 00:13:59,800
anywhere but there is a small lag and it

00:13:56,529 --> 00:14:04,810
can make user think that your your app

00:13:59,800 --> 00:14:06,670
is responsive or it's just slow and the

00:14:04,810 --> 00:14:09,639
worst part is that after animation is

00:14:06,670 --> 00:14:13,060
done it's also pushed layers together

00:14:09,639 --> 00:14:15,720
again so if a user hovers over it again

00:14:13,060 --> 00:14:18,880
it will do the same thing repaint things

00:14:15,720 --> 00:14:22,660
so there is one more thing that can make

00:14:18,880 --> 00:14:25,180
your browser create a new layer and this

00:14:22,660 --> 00:14:26,740
is the will change property and it can

00:14:25,180 --> 00:14:29,589
help us with the prone that we've had

00:14:26,740 --> 00:14:31,540
using it is very easy you just need to

00:14:29,589 --> 00:14:35,170
apply it to the element that is going to

00:14:31,540 --> 00:14:38,980
be changed and explicitly say like we'll

00:14:35,170 --> 00:14:41,680
change transform browser will we'll know

00:14:38,980 --> 00:14:43,480
that it needs to listen for a change it

00:14:41,680 --> 00:14:47,339
will create the new layer for this

00:14:43,480 --> 00:14:50,889
element so so we can change things

00:14:47,339 --> 00:14:54,100
without being worried that and you learn

00:14:50,889 --> 00:14:56,290
it to be created at the moment of of

00:14:54,100 --> 00:14:59,680
user actually interacting with the

00:14:56,290 --> 00:15:02,500
website there are a few rules that you

00:14:59,680 --> 00:15:04,810
need to follow with will change first

00:15:02,500 --> 00:15:07,480
one is you need to give a browser a

00:15:04,810 --> 00:15:11,079
moment to think so let's say that you

00:15:07,480 --> 00:15:14,709
want to apply some animation in hover

00:15:11,079 --> 00:15:17,319
you cannot add like we'll change

00:15:14,709 --> 00:15:19,839
transform for the hovered element you

00:15:17,319 --> 00:15:22,209
need to be one step ahead of the browser

00:15:19,839 --> 00:15:24,790
because when user hovers over element

00:15:22,209 --> 00:15:27,550
the browser already is like making the

00:15:24,790 --> 00:15:29,829
best optimizations it can for for it to

00:15:27,550 --> 00:15:32,800
happen and actually putting will change

00:15:29,829 --> 00:15:35,170
at this point could could interrupt the

00:15:32,800 --> 00:15:38,199
browser so please check at least added

00:15:35,170 --> 00:15:45,370
one moment before you want this change

00:15:38,199 --> 00:15:47,680
to happen like here to just button you

00:15:45,370 --> 00:15:50,620
can't also try to optimize too many

00:15:47,680 --> 00:15:53,350
elements you might think that well why

00:15:50,620 --> 00:15:54,819
just no ads will change to everything

00:15:53,350 --> 00:15:56,680
and have everything on different

00:15:54,819 --> 00:15:58,600
separate layers and just move things

00:15:56,680 --> 00:16:02,490
around without affecting anything else

00:15:58,600 --> 00:16:05,740
don't ever do this here was a nice

00:16:02,490 --> 00:16:08,319
spider-man quote on the slide but I had

00:16:05,740 --> 00:16:11,230
to remove it because it was just already

00:16:08,319 --> 00:16:13,089
on CSS conf two days ago I would just

00:16:11,230 --> 00:16:17,829
hint you that it was Uncle Sam saying

00:16:13,089 --> 00:16:21,100
that things about responsibility so

00:16:17,829 --> 00:16:24,160
every layer consumes memory starting to

00:16:21,100 --> 00:16:26,790
use them wisely if user has a less

00:16:24,160 --> 00:16:29,260
powerful device like low end phone

00:16:26,790 --> 00:16:33,160
actually having too many layers can

00:16:29,260 --> 00:16:34,810
trash his his or her browser and well

00:16:33,160 --> 00:16:38,709
the experience won't be very good then

00:16:34,810 --> 00:16:40,990
write another rule that you need to

00:16:38,709 --> 00:16:43,060
remember is to use use will change

00:16:40,990 --> 00:16:45,399
inside sheets only if the change is

00:16:43,060 --> 00:16:47,050
bound to happen constantly if you have

00:16:45,399 --> 00:16:50,620
animation that will happen only once

00:16:47,050 --> 00:16:54,850
it's better to move I think the will

00:16:50,620 --> 00:16:58,089
change property to JavaScript and if you

00:16:54,850 --> 00:16:59,649
have changed like hovering over elements

00:16:58,089 --> 00:17:01,149
that will happen all the time for

00:16:59,649 --> 00:17:03,189
example I don't know we show something

00:17:01,149 --> 00:17:05,559
on hover on each element on the page

00:17:03,189 --> 00:17:08,199
then it should say in your style sheets

00:17:05,559 --> 00:17:10,209
and those it's a good idea to actually

00:17:08,199 --> 00:17:11,740
remove this hint once once you're done

00:17:10,209 --> 00:17:15,040
with your animations so that browser

00:17:11,740 --> 00:17:18,370
wouldn't have this layer and it wouldn't

00:17:15,040 --> 00:17:20,829
just listen for user to interact with

00:17:18,370 --> 00:17:22,929
your page you can do this easily just

00:17:20,829 --> 00:17:25,550
grab the element that is supposed to

00:17:22,929 --> 00:17:28,340
have the animation on that

00:17:25,550 --> 00:17:30,920
put two even listeners here for example

00:17:28,340 --> 00:17:35,570
we have Mao Center so on Mouse

00:17:30,920 --> 00:17:37,730
intelligence ad will change property to

00:17:35,570 --> 00:17:41,300
the lemons and when the animation and

00:17:37,730 --> 00:17:43,010
event fires you just remove this just

00:17:41,300 --> 00:17:47,660
remove this will change property by

00:17:43,010 --> 00:17:52,340
setting it out and of course it's not

00:17:47,660 --> 00:17:55,210
supported in I am edge but you can use

00:17:52,340 --> 00:17:58,730
the fallback which is transform

00:17:55,210 --> 00:18:01,580
translate Freddie - we just add this as

00:17:58,730 --> 00:18:04,010
I said 3d transfer is also creating a

00:18:01,580 --> 00:18:06,500
new layer so it's kind of a hug but it

00:18:04,010 --> 00:18:10,880
works exactly the same as will change to

00:18:06,500 --> 00:18:12,680
be honest all right the next technique I

00:18:10,880 --> 00:18:17,060
wanted to say is more of a principle

00:18:12,680 --> 00:18:19,160
it's called flippity-flip States stands

00:18:17,060 --> 00:18:21,740
for first last inverted play and it's

00:18:19,160 --> 00:18:24,350
just what we were doing here so

00:18:21,740 --> 00:18:27,020
basically if you wanted to pull element

00:18:24,350 --> 00:18:29,510
from point A to B you don't push it by

00:18:27,020 --> 00:18:31,910
200 pixels to the right you first pull

00:18:29,510 --> 00:18:34,760
it 200 pixels to the left and then let

00:18:31,910 --> 00:18:36,590
it slide to its original position it

00:18:34,760 --> 00:18:41,270
could be implemented very easily with

00:18:36,590 --> 00:18:44,120
transforms as you can see just as in the

00:18:41,270 --> 00:18:47,990
example and if you would for example had

00:18:44,120 --> 00:18:50,000
some kind of many that's that we wanted

00:18:47,990 --> 00:18:52,760
to show in this way we would just

00:18:50,000 --> 00:18:55,190
position it absolutely then we would add

00:18:52,760 --> 00:18:58,190
some transform to move it out of the

00:18:55,190 --> 00:19:00,290
viewports add some transitions so it

00:18:58,190 --> 00:19:03,380
would slide not just show up in the

00:19:00,290 --> 00:19:06,260
place and add for example a class of

00:19:03,380 --> 00:19:08,090
active that when applied with just let

00:19:06,260 --> 00:19:12,500
the elements slide to its original

00:19:08,090 --> 00:19:15,380
position you might ask why would we do

00:19:12,500 --> 00:19:18,350
that like what's the point there is this

00:19:15,380 --> 00:19:20,390
100 milliseconds gap that happens in

00:19:18,350 --> 00:19:22,610
between the moment that the whole page

00:19:20,390 --> 00:19:24,980
is loaded and the moment that user is

00:19:22,610 --> 00:19:27,590
able to interact with your page it's

00:19:24,980 --> 00:19:29,809
just how our brains work we are not able

00:19:27,590 --> 00:19:32,929
to interact with

00:19:29,809 --> 00:19:34,879
and I think like on such short notice so

00:19:32,929 --> 00:19:38,059
we're taking advantage of this hundred

00:19:34,879 --> 00:19:40,399
milliseconds gap and even though it's

00:19:38,059 --> 00:19:42,409
like optimize we're using transforms

00:19:40,399 --> 00:19:44,989
there's still some small calculation

00:19:42,409 --> 00:19:47,299
that's browser needs to make to figure

00:19:44,989 --> 00:19:50,090
out where's the destination point of

00:19:47,299 --> 00:19:52,190
this elements and here if we first move

00:19:50,090 --> 00:19:54,469
element out and then let it slide or

00:19:52,190 --> 00:19:56,840
general original position then actually

00:19:54,469 --> 00:19:59,379
where we're having this animations than

00:19:56,840 --> 00:20:02,179
up front so the browser did the

00:19:59,379 --> 00:20:04,429
calculation this gap and when the user

00:20:02,179 --> 00:20:06,229
clicks on elements the change happens

00:20:04,429 --> 00:20:09,259
instantly the calculation doesn't have

00:20:06,229 --> 00:20:11,450
to be done in this moment so the flip

00:20:09,259 --> 00:20:14,029
technique actually can make a difference

00:20:11,450 --> 00:20:16,429
on less powerful devices and low-end

00:20:14,029 --> 00:20:20,149
phones so it's where where you should be

00:20:16,429 --> 00:20:24,080
using it also you should use it only for

00:20:20,149 --> 00:20:26,089
the animation that happens when when

00:20:24,080 --> 00:20:29,239
user interacts with our with our

00:20:26,089 --> 00:20:31,609
websites and there are free useful

00:20:29,239 --> 00:20:34,729
resources that you can use there is a

00:20:31,609 --> 00:20:37,609
flip J's library by Paul Lewis from

00:20:34,729 --> 00:20:39,769
Google there is my library that is

00:20:37,609 --> 00:20:42,049
actually a collection of examples how

00:20:39,769 --> 00:20:44,599
you can use it and there is a really

00:20:42,049 --> 00:20:46,460
good article by Paul Lewis who is

00:20:44,599 --> 00:20:52,070
actually a creator of the technique as

00:20:46,460 --> 00:20:54,200
well okay do you remember this this was

00:20:52,070 --> 00:20:55,849
how the browser went through all the

00:20:54,200 --> 00:20:58,789
steps to show the page to the browser to

00:20:55,849 --> 00:21:02,419
our user but actually it's just one

00:20:58,789 --> 00:21:05,330
frame and to have our animation looks

00:21:02,419 --> 00:21:10,399
smooth we should serve this frame every

00:21:05,330 --> 00:21:12,379
16 milliseconds why 16 milliseconds 60

00:21:10,399 --> 00:21:15,379
frames per second is what our browsers

00:21:12,379 --> 00:21:19,190
can do for for our animation so this is

00:21:15,379 --> 00:21:21,529
how fast we should be serving the frames

00:21:19,190 --> 00:21:22,789
to the user so that animation would look

00:21:21,529 --> 00:21:24,710
good

00:21:22,789 --> 00:21:27,109
one second is just thousand milliseconds

00:21:24,710 --> 00:21:30,830
and when we divide tiles and by 60 it

00:21:27,109 --> 00:21:33,349
gives us 16 milliseconds truth be told

00:21:30,830 --> 00:21:36,589
it should be more like 10 milliseconds

00:21:33,349 --> 00:21:38,119
because after after the browser goes

00:21:36,589 --> 00:21:40,580
through all the steps there are still

00:21:38,119 --> 00:21:41,980
some you know cleaning up to do but I

00:21:40,580 --> 00:21:47,350
don't want to scare us

00:21:41,980 --> 00:21:50,100
stay with 16 if we don't we if the

00:21:47,350 --> 00:21:53,410
browser fails to provide us with this

00:21:50,100 --> 00:21:56,950
frame every 16 milliseconds the

00:21:53,410 --> 00:21:59,080
animation will just look not smooth it

00:21:56,950 --> 00:22:02,140
will look junk like it there will be

00:21:59,080 --> 00:22:04,210
junk the user might feel that actually

00:22:02,140 --> 00:22:07,419
your application is not responding very

00:22:04,210 --> 00:22:09,490
well so now imagine that browser is

00:22:07,419 --> 00:22:12,220
trying to meet this 60 millisecond

00:22:09,490 --> 00:22:14,410
deadline it's already at layout part

00:22:12,220 --> 00:22:17,950
it's figuring out how how much space

00:22:14,410 --> 00:22:20,470
each element is going to take and then

00:22:17,950 --> 00:22:22,299
the JavaScript comes in like something

00:22:20,470 --> 00:22:24,040
needs to be changed so the browser needs

00:22:22,299 --> 00:22:26,110
to go through all the steps again like

00:22:24,040 --> 00:22:29,620
it needs to recalculate the styles and

00:22:26,110 --> 00:22:33,610
the layout again well things happen try

00:22:29,620 --> 00:22:35,950
to meet that in 16 milliseconds browser

00:22:33,610 --> 00:22:38,110
is probably going to miss the deadline

00:22:35,950 --> 00:22:41,410
and the frame is going to be lost

00:22:38,110 --> 00:22:43,480
animation will look terribly fortunately

00:22:41,410 --> 00:22:46,110
there is a thing that can help us with

00:22:43,480 --> 00:22:49,030
that and it's the requestanimationframe

00:22:46,110 --> 00:22:51,309
function finally is something like truly

00:22:49,030 --> 00:22:54,010
JavaScript e right

00:22:51,309 --> 00:22:56,650
what requestanimationframe does it's

00:22:54,010 --> 00:23:00,270
just it makes sure that all the

00:22:56,650 --> 00:23:03,850
JavaScript that is about to somehow

00:23:00,270 --> 00:23:06,040
influence the frame is going to come in

00:23:03,850 --> 00:23:12,340
in the first possible moment of each

00:23:06,040 --> 00:23:14,950
frame so this is how it works and it's

00:23:12,340 --> 00:23:17,470
quite easy to implement this is like the

00:23:14,950 --> 00:23:22,570
easiest case that we could have that we

00:23:17,470 --> 00:23:25,030
just we need to just fire this function

00:23:22,570 --> 00:23:28,210
with something that is about to be

00:23:25,030 --> 00:23:32,950
repeated and then recursively call the

00:23:28,210 --> 00:23:34,750
function from the inside and of course

00:23:32,950 --> 00:23:36,790
as with everything that's cool in the

00:23:34,750 --> 00:23:39,549
web there a requestanimationframe has

00:23:36,790 --> 00:23:41,679
some rules it needs to vendor prefixes

00:23:39,549 --> 00:23:45,429
and it needs polyfill for the

00:23:41,679 --> 00:23:47,830
less-fortunate browsers fortunately

00:23:45,429 --> 00:23:49,360
polyfill takes care of vendor prefixes

00:23:47,830 --> 00:23:50,740
so if you're using polyfill you don't

00:23:49,360 --> 00:23:54,460
have to care about that

00:23:50,740 --> 00:23:56,980
also if you're using green sock or

00:23:54,460 --> 00:23:59,200
web animation API or jQuery free bundle

00:23:56,980 --> 00:24:01,150
and hire you also don't have to remember

00:23:59,200 --> 00:24:04,810
about requestanimationframe because it's

00:24:01,150 --> 00:24:07,810
already there it's inside inside these

00:24:04,810 --> 00:24:10,390
tools there is canceled animation frame

00:24:07,810 --> 00:24:12,520
which is like complementary function

00:24:10,390 --> 00:24:16,690
that will just stop your animation from

00:24:12,520 --> 00:24:19,030
happening and it's way better than using

00:24:16,690 --> 00:24:22,660
set interval actually set interval is

00:24:19,030 --> 00:24:26,740
what what is in the polyfill but browser

00:24:22,660 --> 00:24:29,050
doesn't optimize for first set interval

00:24:26,740 --> 00:24:30,970
it doesn't take that interval into

00:24:29,050 --> 00:24:34,540
consideration when it's scheduling up

00:24:30,970 --> 00:24:37,030
the frame and setting the role is just

00:24:34,540 --> 00:24:38,830
guessing that in next 16 milliseconds

00:24:37,030 --> 00:24:41,170
then your frame will happen but if

00:24:38,830 --> 00:24:46,600
something offsets and goes wrong is

00:24:41,170 --> 00:24:49,090
still much mr. frame and the last thing

00:24:46,600 --> 00:24:50,980
I wanted to say to you about it is to

00:24:49,090 --> 00:24:53,680
test your animations before actually

00:24:50,980 --> 00:24:55,720
optimizing because things that you think

00:24:53,680 --> 00:24:59,170
might actually be needed for your

00:24:55,720 --> 00:25:01,360
animation might might make it worse and

00:24:59,170 --> 00:25:03,670
things that should be smooth might

00:25:01,360 --> 00:25:06,040
actually not work very well so test your

00:25:03,670 --> 00:25:09,760
test your animations and of course the

00:25:06,040 --> 00:25:12,520
best thing to the to do testing is to

00:25:09,760 --> 00:25:16,020
use dev tools both in Chrome and in

00:25:12,520 --> 00:25:19,030
Firefox at least that's what I'm using

00:25:16,020 --> 00:25:22,060
for example in Chrome it can enable the

00:25:19,030 --> 00:25:24,400
rendering top you need to click this

00:25:22,060 --> 00:25:26,110
free small dot menu and just in more

00:25:24,400 --> 00:25:28,780
tools you have friends ring tab and all

00:25:26,110 --> 00:25:31,180
the cool things and then you'll be able

00:25:28,780 --> 00:25:34,210
to actually see for example where the

00:25:31,180 --> 00:25:37,210
layer borders are to see paint flashing

00:25:34,210 --> 00:25:39,250
or you can see the FPS meter or any

00:25:37,210 --> 00:25:44,560
strong performance issues that you could

00:25:39,250 --> 00:25:46,570
have also you can use the timeline tool

00:25:44,560 --> 00:25:48,040
to record your animation the shorter

00:25:46,570 --> 00:25:49,810
they're recording the better because

00:25:48,040 --> 00:25:54,340
it's easier to investigate what's going

00:25:49,810 --> 00:25:56,230
on if you have the green small blocks at

00:25:54,340 --> 00:26:00,250
the top it means that your animation is

00:25:56,230 --> 00:26:03,130
actually smooth then there are like

00:26:00,250 --> 00:26:05,110
really new shiny tools there like to

00:26:03,130 --> 00:26:06,870
things that I just discovered like month

00:26:05,110 --> 00:26:10,919
ago that they're there

00:26:06,870 --> 00:26:13,440
layers tab which shows you why every

00:26:10,919 --> 00:26:15,570
layer in the website was created it says

00:26:13,440 --> 00:26:18,570
for example that is the root layer or

00:26:15,570 --> 00:26:20,789
it's it's the layer is because it's on

00:26:18,570 --> 00:26:23,940
top of other layer or it's because it's

00:26:20,789 --> 00:26:26,640
animated transform it's really really

00:26:23,940 --> 00:26:29,760
useful thing and there is the new

00:26:26,640 --> 00:26:32,549
animation tab in in chrome that lets see

00:26:29,760 --> 00:26:36,769
for example run your animation so we're

00:26:32,549 --> 00:26:36,769
just record it and investigate it too

00:26:36,870 --> 00:26:44,639
Firefox also has animation step and it's

00:26:40,440 --> 00:26:47,340
also very similar but it was there first

00:26:44,639 --> 00:26:50,250
as well you can run your animation bit

00:26:47,340 --> 00:26:52,320
slower or you can if you if you inspect

00:26:50,250 --> 00:26:54,570
an animated element it will show you if

00:26:52,320 --> 00:26:57,360
it's optimized by this small lightning

00:26:54,570 --> 00:26:59,429
bolt icon next to it or if it's not

00:26:57,360 --> 00:27:01,440
optimized it will give you a warning

00:26:59,429 --> 00:27:07,139
what's going on in there why it's not

00:27:01,440 --> 00:27:09,720
why it's not okay so to sum up please

00:27:07,139 --> 00:27:11,340
don't overuse animations if they are not

00:27:09,720 --> 00:27:13,559
going to help your user and they are

00:27:11,340 --> 00:27:16,200
just there for your pleasure of the or

00:27:13,559 --> 00:27:19,980
the pleasure of a designer try to skip

00:27:16,200 --> 00:27:23,399
them not make the user feel the junk

00:27:19,980 --> 00:27:25,889
junk eNOS of Europe animate only

00:27:23,399 --> 00:27:28,289
transforms and opacity because they are

00:27:25,889 --> 00:27:30,809
the most performance in that way try to

00:27:28,289 --> 00:27:34,549
take leverage of will change flip and

00:27:30,809 --> 00:27:37,740
request animation frame wins applicable

00:27:34,549 --> 00:27:40,679
don't overuse layers don't overuse the

00:27:37,740 --> 00:27:44,370
wheel change property test your

00:27:40,679 --> 00:27:46,769
animations animates elements that are on

00:27:44,370 --> 00:27:49,110
top layers don't animate things that are

00:27:46,769 --> 00:27:52,950
behind something because it will make

00:27:49,110 --> 00:27:58,049
all the things up on them to be create

00:27:52,950 --> 00:28:00,659
like to go to the other layers and yeah

00:27:58,049 --> 00:28:03,539
test animations before optimizing the

00:28:00,659 --> 00:28:05,789
most important one here are some

00:28:03,539 --> 00:28:08,870
resources I'll post the slides after

00:28:05,789 --> 00:28:12,380
this talk maybe tomorrow we'll see and

00:28:08,870 --> 00:28:12,380
thank you very much

00:28:12,669 --> 00:28:14,730

YouTube URL: https://www.youtube.com/watch?v=wQ-jn1KYUkQ


