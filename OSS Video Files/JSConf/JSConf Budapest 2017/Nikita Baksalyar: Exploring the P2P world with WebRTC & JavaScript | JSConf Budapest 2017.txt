Title: Nikita Baksalyar: Exploring the P2P world with WebRTC & JavaScript | JSConf Budapest 2017
Publication date: 2017-12-01
Playlist: JSConf Budapest 2017
Description: 
	The Web becomes increasingly centralized. We trust our private data to be stored in data centers despite news about data leaks. We exchange our messages and they are handled to three-letter agencies without you knowing about it. Can we do better and return the Web to its decentralized roots? A combination of proven and emerging technologies like WebRTC can help us. In this talk weâ€™ll learn about the building blocks and basic principles of decentralized networks on real-world examples, using WebRTC, Kademlia DHT, and BitTorrent (which is useful way beyond just file sharing).

http://jsconfbp.com/speakers/nikita-baksalyar/
Captions: 
	00:00:00,000 --> 00:00:03,149
[Applause]

00:00:00,350 --> 00:00:06,779
thank you very much I'm very glad to be

00:00:03,149 --> 00:00:11,160
here and first let me introduce myself

00:00:06,779 --> 00:00:13,290
briefly my name is Nikita and I work at

00:00:11,160 --> 00:00:19,949
made safe but it's a company that

00:00:13,290 --> 00:00:22,529
develops very barren Network and so my

00:00:19,949 --> 00:00:25,710
day job is kind of related to the topic

00:00:22,529 --> 00:00:28,800
of my today's talk and today I want to

00:00:25,710 --> 00:00:31,619
talk to you about WebRTC and for those

00:00:28,800 --> 00:00:33,870
who don't know it's an html5 technology

00:00:31,619 --> 00:00:37,140
that's commonly used to transfer video

00:00:33,870 --> 00:00:40,649
and voice data Google Hangouts uses it

00:00:37,140 --> 00:00:42,270
as well as many other tools that you

00:00:40,649 --> 00:00:45,210
might have used to talk to other people

00:00:42,270 --> 00:00:46,980
directly in your browser it's been

00:00:45,210 --> 00:00:52,289
available in most of the major browsers

00:00:46,980 --> 00:00:54,629
for a while since at least year to 2012

00:00:52,289 --> 00:00:58,649
I guess on both desktop and mobile

00:00:54,629 --> 00:01:00,780
platforms but actually web RTC is

00:00:58,649 --> 00:01:03,120
capable of much more than simply

00:01:00,780 --> 00:01:06,060
transferring media and in fact in my

00:01:03,120 --> 00:01:08,700
opinion WebRTC is able to spark a new

00:01:06,060 --> 00:01:12,780
decentralisation revolution and help in

00:01:08,700 --> 00:01:16,560
building a new internet so my goal today

00:01:12,780 --> 00:01:18,810
is not a teacher about all the intricate

00:01:16,560 --> 00:01:22,470
details of this technology but to

00:01:18,810 --> 00:01:26,100
inspire you to take to take you to take

00:01:22,470 --> 00:01:28,369
action and help to bring that revolution

00:01:26,100 --> 00:01:28,369
closer

00:01:40,230 --> 00:01:45,220
but there is a reasonable question that

00:01:42,580 --> 00:01:48,340
you might have why do we need that

00:01:45,220 --> 00:01:51,430
revolution at all do we need a new web

00:01:48,340 --> 00:01:54,670
like the current one works quite

00:01:51,430 --> 00:01:58,270
perfectly now right well in my opinion

00:01:54,670 --> 00:01:59,890
it does but at the same time the web and

00:01:58,270 --> 00:02:01,900
the internet were created a long long

00:01:59,890 --> 00:02:05,530
time ago and on the fundamental level

00:02:01,900 --> 00:02:07,600
they're a little bit flawed because the

00:02:05,530 --> 00:02:09,640
internet was originally conceived and

00:02:07,600 --> 00:02:12,550
created as a completely decentralized

00:02:09,640 --> 00:02:16,660
network that no single authority can

00:02:12,550 --> 00:02:20,230
control and the web as well was thought

00:02:16,660 --> 00:02:22,989
of as kind of a cyberspace where every

00:02:20,230 --> 00:02:25,600
human being is not in control of any

00:02:22,989 --> 00:02:27,820
government or any corporation and that

00:02:25,600 --> 00:02:31,180
they have complete freedom to say what

00:02:27,820 --> 00:02:35,670
they think and what they want and the

00:02:31,180 --> 00:02:39,340
web was a place without any censorship

00:02:35,670 --> 00:02:43,000
however lately this situation has

00:02:39,340 --> 00:02:45,130
changed drastically nowadays the web is

00:02:43,000 --> 00:02:48,760
largely dependent on big corporations

00:02:45,130 --> 00:02:51,040
that run our infrastructure like giant

00:02:48,760 --> 00:02:54,989
data centers and they provide many

00:02:51,040 --> 00:02:58,239
useful services like email for example

00:02:54,989 --> 00:03:00,400
it wasn't always like that though at

00:02:58,239 --> 00:03:02,110
first people set up and run their own

00:03:00,400 --> 00:03:07,540
email servers and control their own

00:03:02,110 --> 00:03:10,420
communications this approach was not

00:03:07,540 --> 00:03:12,370
scalable so so natural consequence was

00:03:10,420 --> 00:03:15,880
that a lot of small commercial email

00:03:12,370 --> 00:03:17,950
email providers sprang up at first they

00:03:15,880 --> 00:03:19,840
were small and if he was there at the

00:03:17,950 --> 00:03:22,510
early days of the web you might remember

00:03:19,840 --> 00:03:24,280
that it was a great feeling

00:03:22,510 --> 00:03:27,310
to just create your accounts and get

00:03:24,280 --> 00:03:32,380
access to whole 10 to 15 megabytes of

00:03:27,310 --> 00:03:34,510
your own inbox space but then something

00:03:32,380 --> 00:03:37,209
has changed the more people started to

00:03:34,510 --> 00:03:39,489
use the internet the more our services

00:03:37,209 --> 00:03:43,209
are consolidated around just a few of

00:03:39,489 --> 00:03:47,590
big providers and the result of that is

00:03:43,209 --> 00:03:50,290
that now our email usage is confined

00:03:47,590 --> 00:03:53,709
just a few giant services and almost no

00:03:50,290 --> 00:03:56,319
one runs their own servers and that's

00:03:53,709 --> 00:03:58,569
pretty understandable because it's just

00:03:56,319 --> 00:04:01,510
too inconvenient and not even strictly

00:03:58,569 --> 00:04:03,510
required to deal with all that spam all

00:04:01,510 --> 00:04:08,140
by yourself and handle all those

00:04:03,510 --> 00:04:10,269
daunting administration tasks and

00:04:08,140 --> 00:04:12,640
actually what happened to email is not

00:04:10,269 --> 00:04:15,849
unique we have seen the same process

00:04:12,640 --> 00:04:18,340
follow it for almost anything we use and

00:04:15,849 --> 00:04:20,260
see on the web and despite the email

00:04:18,340 --> 00:04:23,260
protocol itself being decentralized as

00:04:20,260 --> 00:04:25,150
many of other original internet

00:04:23,260 --> 00:04:27,820
protocols like a before instance or

00:04:25,150 --> 00:04:31,139
FTP we don't have centralized

00:04:27,820 --> 00:04:33,340
authorities that we depend upon and

00:04:31,139 --> 00:04:34,960
previously we had a concept of home

00:04:33,340 --> 00:04:37,780
pages we could which you could serve

00:04:34,960 --> 00:04:40,600
from your own home computer and put

00:04:37,780 --> 00:04:43,300
there anything you would like now you

00:04:40,600 --> 00:04:45,220
can kind of still do that but far more

00:04:43,300 --> 00:04:49,750
people just create their Facebook or

00:04:45,220 --> 00:04:51,220
Twitter profiles and now that what they

00:04:49,750 --> 00:04:53,410
can write and their profiles are

00:04:51,220 --> 00:04:56,639
determined not by people themselves by

00:04:53,410 --> 00:04:59,530
but by the policies of these websites

00:04:56,639 --> 00:05:01,479
it's like that so we have exchange tile

00:04:59,530 --> 00:05:04,479
control and our privacy for convenience

00:05:01,479 --> 00:05:07,510
and now the large corporations can tell

00:05:04,479 --> 00:05:09,310
us what we can say on the internet now

00:05:07,510 --> 00:05:11,080
it depends on those centralized services

00:05:09,310 --> 00:05:13,060
to do many things to share files through

00:05:11,080 --> 00:05:15,820
Dropbox we share messages through

00:05:13,060 --> 00:05:20,410
servers that we can control we pay with

00:05:15,820 --> 00:05:22,780
PayPal you might ask why is it bad

00:05:20,410 --> 00:05:25,690
though isn't that protocol to bring

00:05:22,780 --> 00:05:28,599
millions and now even a billion of users

00:05:25,690 --> 00:05:30,490
to the Internet well of course these

00:05:28,599 --> 00:05:34,960
services are very nice and there is

00:05:30,490 --> 00:05:37,289
nothing wrong with them as such but it's

00:05:34,960 --> 00:05:39,820
not only about the freedom of speech

00:05:37,289 --> 00:05:41,590
it's also about the fact that government

00:05:39,820 --> 00:05:44,229
started to snoop into our private data

00:05:41,590 --> 00:05:46,180
and communications in the name of good

00:05:44,229 --> 00:05:48,360
things like predicting children or

00:05:46,180 --> 00:05:51,310
protecting the world from terrorism and

00:05:48,360 --> 00:05:53,830
while these intentions are good the

00:05:51,310 --> 00:05:58,840
consequences of allowing other people to

00:05:53,830 --> 00:06:00,820
read your private data are not the more

00:05:58,840 --> 00:06:01,750
power the governments have the more

00:06:00,820 --> 00:06:03,250
likely it is

00:06:01,750 --> 00:06:06,790
that they will use this power in the

00:06:03,250 --> 00:06:09,340
wrong way and this is uh not some kind

00:06:06,790 --> 00:06:12,760
of theoretical or imaginable problem

00:06:09,340 --> 00:06:14,830
because this is our reality already in

00:06:12,760 --> 00:06:17,110
countries like turkey Russia and China

00:06:14,830 --> 00:06:19,180
where they block hundreds and thousands

00:06:17,110 --> 00:06:23,170
websites that they deem inappropriate or

00:06:19,180 --> 00:06:25,780
bad but actually what website you can

00:06:23,170 --> 00:06:27,910
name is bad different cultures have

00:06:25,780 --> 00:06:31,630
different concepts and understanding of

00:06:27,910 --> 00:06:35,169
of that and inappropriate but it's just

00:06:31,630 --> 00:06:37,120
you easy to use this excuse of a bad

00:06:35,169 --> 00:06:39,550
website to introduce censorship and

00:06:37,120 --> 00:06:41,470
silence the political opposition and we

00:06:39,550 --> 00:06:43,930
have seen that here already even in

00:06:41,470 --> 00:06:45,370
European countries like when Spain

00:06:43,930 --> 00:06:47,200
blocked websites and censored

00:06:45,370 --> 00:06:50,560
information that was related to their

00:06:47,200 --> 00:06:53,169
friend in Catalunya and of course we all

00:06:50,560 --> 00:06:55,720
know about the case of NSA the American

00:06:53,169 --> 00:06:57,310
spatial agency that collected private

00:06:55,720 --> 00:07:01,150
data of people from all around the world

00:06:57,310 --> 00:07:03,100
so with the power of social networks

00:07:01,150 --> 00:07:05,500
which are very large part of our lives

00:07:03,100 --> 00:07:07,120
now the governments and corporations can

00:07:05,500 --> 00:07:11,669
have another present its control over

00:07:07,120 --> 00:07:11,669
their lives or something like that

00:07:11,880 --> 00:07:17,860
can we change these beliefs current

00:07:14,590 --> 00:07:19,360
state over that I believe that began we

00:07:17,860 --> 00:07:22,419
just need to rethink the web from

00:07:19,360 --> 00:07:25,419
scratch and that might sound impossible

00:07:22,419 --> 00:07:27,520
to you at first but we can create the

00:07:25,419 --> 00:07:30,190
centralized networks and the centralized

00:07:27,520 --> 00:07:34,450
web apps that are just as easy to use as

00:07:30,190 --> 00:07:35,800
any other modern-day web application and

00:07:34,450 --> 00:07:37,900
I personally believe that the user

00:07:35,800 --> 00:07:40,300
experience is even more important than

00:07:37,900 --> 00:07:41,950
privacy or anything else because why

00:07:40,300 --> 00:07:43,810
would you use an app that frustrates

00:07:41,950 --> 00:07:46,979
your you don't understand how to use

00:07:43,810 --> 00:07:49,570
properly that's one of the reasons why

00:07:46,979 --> 00:07:51,490
so many privacy's Android applications

00:07:49,570 --> 00:07:54,960
failed in the past like take for example

00:07:51,490 --> 00:07:57,460
PGP and mio encryption which are

00:07:54,960 --> 00:07:59,530
bulletproof but at the same time they're

00:07:57,460 --> 00:08:01,780
also just inconvenient for everyday use

00:07:59,530 --> 00:08:08,830
and almost no one increases their immune

00:08:01,780 --> 00:08:10,810
email messages nowadays so that's also

00:08:08,830 --> 00:08:13,599
the reason why so many the surprise

00:08:10,810 --> 00:08:15,650
Network failed as well and that's why we

00:08:13,599 --> 00:08:18,740
need to incentivize users to

00:08:15,650 --> 00:08:22,190
is applications that are aware of these

00:08:18,740 --> 00:08:24,949
privacy concerns and I believe that

00:08:22,190 --> 00:08:26,840
diversity can be the answer now it's

00:08:24,949 --> 00:08:28,729
already available in most browsers and

00:08:26,840 --> 00:08:32,900
you don't need to install any software

00:08:28,729 --> 00:08:34,700
or a browser plug-ins for it to work you

00:08:32,900 --> 00:08:36,710
just open a web page and it connects

00:08:34,700 --> 00:08:38,479
directly to same users as you without

00:08:36,710 --> 00:08:41,750
passing data through any intermediary

00:08:38,479 --> 00:08:43,969
servers and a lot of people use forever

00:08:41,750 --> 00:08:46,460
to see now to transfer media but not a

00:08:43,969 --> 00:08:49,520
lot of people know that it can also be

00:08:46,460 --> 00:08:52,190
used to transfer any arbitrary text or

00:08:49,520 --> 00:08:54,830
binary data in an addition to that

00:08:52,190 --> 00:08:57,050
despite having weapon its name it's not

00:08:54,830 --> 00:08:59,660
confined to the web only and the

00:08:57,050 --> 00:09:01,459
protocol itself is open and you can use

00:08:59,660 --> 00:09:05,270
it from anywhere not only from a browser

00:09:01,459 --> 00:09:06,950
and that's a very powerful idea because

00:09:05,270 --> 00:09:09,410
you can create a beber this application

00:09:06,950 --> 00:09:11,390
that reberty's applications that work on

00:09:09,410 --> 00:09:13,850
desktop or Internet of Things devices

00:09:11,390 --> 00:09:15,800
all these devices will be compatible

00:09:13,850 --> 00:09:18,290
with web browsers and you can

00:09:15,800 --> 00:09:20,240
communicate with them directly skipping

00:09:18,290 --> 00:09:23,709
any third parties that together and

00:09:20,240 --> 00:09:25,880
analyze your private data

00:09:23,709 --> 00:09:27,440
Roberta C can also be used to create

00:09:25,880 --> 00:09:29,959
general-purpose and large-scale

00:09:27,440 --> 00:09:32,089
peer-to-peer networks which do not

00:09:29,959 --> 00:09:36,860
depend on centralized servers or any

00:09:32,089 --> 00:09:38,839
authorities it can also play a

00:09:36,860 --> 00:09:41,900
significant role in the recent trend of

00:09:38,839 --> 00:09:45,200
raid centralization or bringing back the

00:09:41,900 --> 00:09:47,240
Internet to its origins there are

00:09:45,200 --> 00:09:49,520
already exist a lot of decentralized

00:09:47,240 --> 00:09:52,010
applications that we use every day it

00:09:49,520 --> 00:09:54,680
all started with BitTorrent and Bitcoin

00:09:52,010 --> 00:09:58,089
which showed that global scalable

00:09:54,680 --> 00:10:00,560
peer-to-peer networks are possible and

00:09:58,089 --> 00:10:02,270
today not a small part of the world's

00:10:00,560 --> 00:10:04,700
Internet traffic consists of Bitcoin

00:10:02,270 --> 00:10:06,190
Bitcoin usage and this is where

00:10:04,700 --> 00:10:09,170
important fact that shows that

00:10:06,190 --> 00:10:11,330
decentralized apps are not purely like

00:10:09,170 --> 00:10:16,040
abstract or theoretical and that they

00:10:11,330 --> 00:10:17,870
are needed by the people so reberty see

00:10:16,040 --> 00:10:20,089
can serve as a kind of a bridge to

00:10:17,870 --> 00:10:22,640
existing peer-to-peer networks and with

00:10:20,089 --> 00:10:25,390
its help that can create a lot of new

00:10:22,640 --> 00:10:25,390
networks as well

00:10:27,660 --> 00:10:32,760
on the practical side the vibrating capi

00:10:30,450 --> 00:10:34,770
is simple it's a bit hard when it gets

00:10:32,760 --> 00:10:37,110
to establishing gas connection as we

00:10:34,770 --> 00:10:39,890
will see but for the message passing

00:10:37,110 --> 00:10:42,990
it's really similar to the websocket api

00:10:39,890 --> 00:10:45,870
just to initialize a data channel which

00:10:42,990 --> 00:10:47,370
is a data stream between two peers you

00:10:45,870 --> 00:10:49,320
set a callback function that will be

00:10:47,370 --> 00:10:51,630
called each time you get a new message

00:10:49,320 --> 00:10:55,170
and then you can send a message to

00:10:51,630 --> 00:10:57,060
itself the other side will get it and

00:10:55,170 --> 00:10:59,280
the own message callback will be

00:10:57,060 --> 00:11:00,990
triggered and that's almost all you need

00:10:59,280 --> 00:11:03,600
to know about exchanging messages in the

00:11:00,990 --> 00:11:05,370
RTC and behind the scenes the protocol

00:11:03,600 --> 00:11:06,890
guarantees that your messages will be

00:11:05,370 --> 00:11:09,690
encrypted

00:11:06,890 --> 00:11:12,450
the encryption thief is defined in the

00:11:09,690 --> 00:11:14,910
standard and it is mandatory you don't

00:11:12,450 --> 00:11:16,260
need to do anything to set it up the

00:11:14,910 --> 00:11:17,820
session encryption keys will be

00:11:16,260 --> 00:11:20,910
automatically created during the

00:11:17,820 --> 00:11:23,430
connection and tells a ssin step so our

00:11:20,910 --> 00:11:28,950
communications are secure and they can

00:11:23,430 --> 00:11:30,420
be tapped by anyone but most importantly

00:11:28,950 --> 00:11:32,900
you have to set up the connection

00:11:30,420 --> 00:11:35,310
properly first and you do that

00:11:32,900 --> 00:11:37,890
eventually you need to understand the

00:11:35,310 --> 00:11:40,980
concept of signalling which is quite

00:11:37,890 --> 00:11:43,740
complex topic by itself but to put it

00:11:40,980 --> 00:11:46,320
simply it's a connection stage when

00:11:43,740 --> 00:11:49,140
peers share their IP addresses and

00:11:46,320 --> 00:11:50,940
encryption keys with each other and they

00:11:49,140 --> 00:11:53,150
do that through some point of exchange

00:11:50,940 --> 00:11:55,440
that they have a great opponent advance

00:11:53,150 --> 00:11:57,870
that point of exchange can be

00:11:55,440 --> 00:12:01,320
practically anything and WebSocket

00:11:57,870 --> 00:12:03,350
server and mail exchange for some secure

00:12:01,320 --> 00:12:06,750
chat it doesn't matter

00:12:03,350 --> 00:12:07,980
some people might consider it this point

00:12:06,750 --> 00:12:10,230
of exchange as a kind of a

00:12:07,980 --> 00:12:13,400
centralization or a single point of

00:12:10,230 --> 00:12:15,690
failure though and in some sense it is

00:12:13,400 --> 00:12:17,670
but it's not really centralized because

00:12:15,690 --> 00:12:20,310
the way you do signalling is not defined

00:12:17,670 --> 00:12:21,810
in the WebRTC standards itself and it

00:12:20,310 --> 00:12:23,400
gives you a big extent of freedom in

00:12:21,810 --> 00:12:29,700
choosing the most efficient way that

00:12:23,400 --> 00:12:33,480
suits your application best so it can be

00:12:29,700 --> 00:12:35,520
compared to DNS if your Gena's server

00:12:33,480 --> 00:12:37,680
doesn't respond to your request you can

00:12:35,520 --> 00:12:40,450
always still get to the server if you

00:12:37,680 --> 00:12:42,370
know it's a be address right so have

00:12:40,450 --> 00:12:44,050
that information can bypass some of the

00:12:42,370 --> 00:12:47,140
centralized parts of the internet

00:12:44,050 --> 00:12:48,790
architecture infrastructure and the same

00:12:47,140 --> 00:12:50,860
thing basically applies to ever to see

00:12:48,790 --> 00:12:52,510
if you know IP addresses of your peers

00:12:50,860 --> 00:12:56,050
they can exchange the session

00:12:52,510 --> 00:12:57,790
information with them directly and when

00:12:56,050 --> 00:12:59,740
they get that information you won't need

00:12:57,790 --> 00:13:03,730
to deal with any kind of centralized

00:12:59,740 --> 00:13:05,410
servers anymore and now that we have

00:13:03,730 --> 00:13:07,900
learned the basic concepts we can try to

00:13:05,410 --> 00:13:09,730
establish our vertice connection which

00:13:07,900 --> 00:13:12,700
is a bit more complicated than the data

00:13:09,730 --> 00:13:16,660
channels API but when you learn it it

00:13:12,700 --> 00:13:19,120
becomes for other intuitive so what we

00:13:16,660 --> 00:13:21,730
need to know about it is that there are

00:13:19,120 --> 00:13:24,550
two sides of the handshake process and

00:13:21,730 --> 00:13:27,700
the connection the initiator and the

00:13:24,550 --> 00:13:29,440
recipient the initiator creates an offer

00:13:27,700 --> 00:13:31,600
which contains the session encryption

00:13:29,440 --> 00:13:33,190
key and in case if you want to stream

00:13:31,600 --> 00:13:34,900
media it will also contain the

00:13:33,190 --> 00:13:38,110
information about media encoding

00:13:34,900 --> 00:13:41,230
available codecs and so on so when an

00:13:38,110 --> 00:13:43,060
initiator has created an offer they need

00:13:41,230 --> 00:13:44,830
to sell it as a local description of the

00:13:43,060 --> 00:13:47,200
connection which will tell the browser

00:13:44,830 --> 00:13:51,430
how it should decode the incoming

00:13:47,200 --> 00:13:53,800
messages as a final step you need to

00:13:51,430 --> 00:13:55,990
send your offer to the recipient through

00:13:53,800 --> 00:13:58,360
the signaling channel which again can be

00:13:55,990 --> 00:14:04,000
a web secure connection or whatever you

00:13:58,360 --> 00:14:05,890
choose it to be and on the other end the

00:14:04,000 --> 00:14:08,680
party that you want to connect you the

00:14:05,890 --> 00:14:11,710
recipient receives an offer through the

00:14:08,680 --> 00:14:14,200
signaling channel and then they follow

00:14:11,710 --> 00:14:16,180
almost the same exact steps only at this

00:14:14,200 --> 00:14:18,880
time they will need to set your offer as

00:14:16,180 --> 00:14:20,320
a remote description instead which which

00:14:18,880 --> 00:14:26,020
will tell the browser how it should

00:14:20,320 --> 00:14:28,030
encode the outgoing messages then the

00:14:26,020 --> 00:14:29,560
other end should create an answer which

00:14:28,030 --> 00:14:32,050
in turn will contain their encryption

00:14:29,560 --> 00:14:33,940
keys and the session information they

00:14:32,050 --> 00:14:36,790
set it as their local description and

00:14:33,940 --> 00:14:44,380
then send it through the same signaling

00:14:36,790 --> 00:14:46,810
channel to the initiator party finally

00:14:44,380 --> 00:14:48,550
when the initiator gets the answer they

00:14:46,810 --> 00:14:50,680
just set it as their remote description

00:14:48,550 --> 00:14:52,090
and now both parties should have the

00:14:50,680 --> 00:14:53,860
full information to exchange messages

00:14:52,090 --> 00:14:56,350
both should know it

00:14:53,860 --> 00:14:58,180
there's encryption keys and now we can

00:14:56,350 --> 00:15:01,660
forget about the signaling server for

00:14:58,180 --> 00:15:03,430
now but not really because you also have

00:15:01,660 --> 00:15:04,269
to care about exchanging not only the

00:15:03,430 --> 00:15:07,209
encryption keys

00:15:04,269 --> 00:15:09,670
between the two parties but also and

00:15:07,209 --> 00:15:12,550
most importantly and most crucially

00:15:09,670 --> 00:15:14,649
their connection information that is you

00:15:12,550 --> 00:15:17,880
need to know an IP address of the other

00:15:14,649 --> 00:15:20,140
side to connect to them directly and

00:15:17,880 --> 00:15:22,209
there is a key that for the direct

00:15:20,140 --> 00:15:24,730
connections because in the real world

00:15:22,209 --> 00:15:29,470
most likely you will have to deal with

00:15:24,730 --> 00:15:31,089
Nats or network address translators most

00:15:29,470 --> 00:15:33,220
people deal with Nats in the form of

00:15:31,089 --> 00:15:35,380
rooters switch translate addresses from

00:15:33,220 --> 00:15:38,050
your local network to their real

00:15:35,380 --> 00:15:40,600
internet IP addresses and in fact it's

00:15:38,050 --> 00:15:42,970
not unusual to see case when behind a

00:15:40,600 --> 00:15:45,040
single global IP address there are

00:15:42,970 --> 00:15:48,880
several hundreds devices in the local

00:15:45,040 --> 00:15:51,070
network area and we need Nats because

00:15:48,880 --> 00:15:54,820
the IP version 4 address space is

00:15:51,070 --> 00:15:56,500
limited with 4 billion addresses and we

00:15:54,820 --> 00:16:00,040
have a lot more devices in the both now

00:15:56,500 --> 00:16:02,079
and because of Nats direct connections

00:16:00,040 --> 00:16:02,860
to peers in peer-to-peer networks become

00:16:02,079 --> 00:16:05,529
complicated

00:16:02,860 --> 00:16:09,700
you have to bypass this mess with one of

00:16:05,529 --> 00:16:11,459
the natural result techniques and this

00:16:09,700 --> 00:16:13,630
task is a bit complicated because

00:16:11,459 --> 00:16:15,329
because of the fact that there is no

00:16:13,630 --> 00:16:17,649
single standard way for Nats

00:16:15,329 --> 00:16:20,680
there's no single standard way to

00:16:17,649 --> 00:16:22,240
structure Nats but there aren't many of

00:16:20,680 --> 00:16:25,120
them kocoum

00:16:22,240 --> 00:16:27,430
port restricted symmetric Nats and even

00:16:25,120 --> 00:16:29,110
more non-conventional configurations and

00:16:27,430 --> 00:16:33,459
each type requires its own approach to

00:16:29,110 --> 00:16:35,740
bypass it but the good thing is these

00:16:33,459 --> 00:16:37,180
techniques are well known and in the

00:16:35,740 --> 00:16:38,920
simplest case it works in a pretty

00:16:37,180 --> 00:16:40,839
straightforward way you just send a

00:16:38,920 --> 00:16:43,660
request to some external address and

00:16:40,839 --> 00:16:48,640
that opens a port so that the external

00:16:43,660 --> 00:16:50,740
party could send you a response now if

00:16:48,640 --> 00:16:53,410
you know that port number you can just

00:16:50,740 --> 00:16:56,079
reuse it and send it back to your peer

00:16:53,410 --> 00:16:59,620
along with your public IP address and

00:16:56,079 --> 00:17:01,839
now that that knows that any data that

00:16:59,620 --> 00:17:03,940
gets to the sport should be forwarded to

00:17:01,839 --> 00:17:06,480
you you can communicate with your peers

00:17:03,940 --> 00:17:06,480
directly

00:17:07,500 --> 00:17:12,539
and WebRTC takes care about all of that

00:17:10,860 --> 00:17:15,449
for us so we don't need to be involved

00:17:12,539 --> 00:17:17,730
in that at all all their support from us

00:17:15,449 --> 00:17:20,549
is to collect our public IP address and

00:17:17,730 --> 00:17:25,679
afford and transfer them to our peer

00:17:20,549 --> 00:17:27,600
through the signaling channel but you

00:17:25,679 --> 00:17:30,330
have to discover your own IP addresses

00:17:27,600 --> 00:17:33,529
and port in the first place like most

00:17:30,330 --> 00:17:36,509
often you would do that through stun

00:17:33,529 --> 00:17:38,970
stun is a basic protocol that allows you

00:17:36,509 --> 00:17:41,190
to get your own IP address by sending a

00:17:38,970 --> 00:17:44,460
request to a stun server which basically

00:17:41,190 --> 00:17:46,559
acts as a kind of a mirror a sentry

00:17:44,460 --> 00:17:48,570
request from your local network and the

00:17:46,559 --> 00:17:50,940
stun server sees your translated address

00:17:48,570 --> 00:17:53,940
and the port and send them back to you

00:17:50,940 --> 00:17:59,879
and then you just need to broadcast them

00:17:53,940 --> 00:18:02,340
through the signaling channel it is a

00:17:59,879 --> 00:18:05,129
simplest case through because sometimes

00:18:02,340 --> 00:18:07,169
for various reasons your peers can't

00:18:05,129 --> 00:18:08,940
connect you directly like in the case

00:18:07,169 --> 00:18:11,309
when you're behind the symmetric net

00:18:08,940 --> 00:18:14,580
which will have a random port numbers

00:18:11,309 --> 00:18:16,289
assigned for each connections and but

00:18:14,580 --> 00:18:18,750
this problem can be solved as well with

00:18:16,289 --> 00:18:24,179
the other teams to bypass Nets it is

00:18:18,750 --> 00:18:26,700
called turn but turn is a kind of last

00:18:24,179 --> 00:18:29,279
resort because it basically works as a

00:18:26,700 --> 00:18:32,370
proxy server relay in traffic between

00:18:29,279 --> 00:18:34,289
peers obviously turn is a costly

00:18:32,370 --> 00:18:36,809
solution and you can't find a turn

00:18:34,289 --> 00:18:38,759
server in the wild as opposed to stun

00:18:36,809 --> 00:18:42,360
which is commonly provided by many

00:18:38,759 --> 00:18:46,289
servers there is a Google stun server so

00:18:42,360 --> 00:18:49,230
you can find a lot of them but luckily

00:18:46,289 --> 00:18:51,720
you won't need to resort to turn in many

00:18:49,230 --> 00:18:54,289
cases because symmetric Nats are not

00:18:51,720 --> 00:18:54,289
that common

00:18:58,100 --> 00:19:02,789
so to exchange the connection

00:19:00,570 --> 00:19:05,190
information there exists another special

00:19:02,789 --> 00:19:09,509
protocol that WebRTC uses which is

00:19:05,190 --> 00:19:11,730
called ice ice helps to discover all

00:19:09,509 --> 00:19:13,679
candidates or IP addresses and port

00:19:11,730 --> 00:19:16,350
payers by combining marie's in the

00:19:13,679 --> 00:19:18,840
traversal techniques it also collects

00:19:16,350 --> 00:19:20,650
your local IP addresses so your peers

00:19:18,840 --> 00:19:22,270
are on the local network

00:19:20,650 --> 00:19:25,000
you won't even need to go through the

00:19:22,270 --> 00:19:27,220
internet to connect to them so with ice

00:19:25,000 --> 00:19:29,500
we gather all candidates that we can

00:19:27,220 --> 00:19:31,900
find and send them to the other party

00:19:29,500 --> 00:19:34,690
which tries to use them all at once as

00:19:31,900 --> 00:19:36,430
synchronously meaning they will try to

00:19:34,690 --> 00:19:39,250
connect to us through all available

00:19:36,430 --> 00:19:42,910
means and finally hopefully resulting in

00:19:39,250 --> 00:19:45,070
a successful connection and the WebRTC

00:19:42,910 --> 00:19:47,080
implementation of this protocol allows

00:19:45,070 --> 00:19:49,570
us to concentrate on the application

00:19:47,080 --> 00:19:52,630
side because all that it requires from

00:19:49,570 --> 00:19:54,310
us is that team to provide that we need

00:19:52,630 --> 00:19:57,430
to provide the stun and turn server

00:19:54,310 --> 00:19:59,350
addresses then we set a callback

00:19:57,430 --> 00:20:02,790
function and sandwich collected

00:19:59,350 --> 00:20:06,940
candidate through the signaling channel

00:20:02,790 --> 00:20:08,590
in all the other end our peer listens on

00:20:06,940 --> 00:20:10,720
the signaling channel for incoming ice

00:20:08,590 --> 00:20:17,020
candidates and tries to use them as soon

00:20:10,720 --> 00:20:20,950
as they come in the real world however

00:20:17,020 --> 00:20:22,840
it's a bit much a bit more nuanced but

00:20:20,950 --> 00:20:25,540
basically that's all we need to know

00:20:22,840 --> 00:20:32,890
about setting up basic emergency

00:20:25,540 --> 00:20:36,100
connection however what we have seen so

00:20:32,890 --> 00:20:37,870
far was just the most simple possible

00:20:36,100 --> 00:20:39,940
topology what set up a connection

00:20:37,870 --> 00:20:44,020
between just two peers which can be

00:20:39,940 --> 00:20:45,640
useful of course but usually you imagine

00:20:44,020 --> 00:20:48,460
peer to peer networks is having more

00:20:45,640 --> 00:20:50,620
actors like if you have just two peers

00:20:48,460 --> 00:20:53,440
in your network you can just have a chat

00:20:50,620 --> 00:20:56,530
or exchange files with other person but

00:20:53,440 --> 00:20:58,450
it's not that useful and if they want to

00:20:56,530 --> 00:21:00,910
connect more peers to your network

00:20:58,450 --> 00:21:04,630
that's where it starts to get more

00:21:00,910 --> 00:21:06,220
complicated with multiple peers there

00:21:04,630 --> 00:21:08,800
are many ways to structure the p2p

00:21:06,220 --> 00:21:11,980
network you can just connect all peers

00:21:08,800 --> 00:21:15,580
to each other but it won't be the most

00:21:11,980 --> 00:21:18,010
efficient way to do that because if you

00:21:15,580 --> 00:21:19,870
transfer large files or voice or video

00:21:18,010 --> 00:21:22,180
data it will have to duplicate this

00:21:19,870 --> 00:21:24,880
traffic traffic for each connection and

00:21:22,180 --> 00:21:28,960
it might work for small connection with

00:21:24,880 --> 00:21:31,660
four or five peers but at one scale to

00:21:28,960 --> 00:21:33,049
hundreds and even tens of years it will

00:21:31,660 --> 00:21:35,269
just require

00:21:33,049 --> 00:21:39,350
no too much bandwidth and processing

00:21:35,269 --> 00:21:41,899
power there's an answer to that problem

00:21:39,350 --> 00:21:44,090
too you can choose one or more peers

00:21:41,899 --> 00:21:46,879
that have the most processing power and

00:21:44,090 --> 00:21:48,799
make them serve all other peers relating

00:21:46,879 --> 00:21:51,830
to traffic and multiplexing requests

00:21:48,799 --> 00:21:54,350
this is called star topology and it is

00:21:51,830 --> 00:21:56,809
pretty efficient it is also secure

00:21:54,350 --> 00:21:59,360
because the serving peers still won't

00:21:56,809 --> 00:22:03,169
have access to the session encryption

00:21:59,360 --> 00:22:05,359
keys but at the same time your network

00:22:03,169 --> 00:22:08,450
will start to rely on a single point of

00:22:05,359 --> 00:22:10,970
failure and it will depend on a good

00:22:08,450 --> 00:22:15,200
behavior of just a couple of notes so it

00:22:10,970 --> 00:22:17,450
will be kind of centralized again it is

00:22:15,200 --> 00:22:19,970
efficient for transferring a video and

00:22:17,450 --> 00:22:22,009
voice data though and many such

00:22:19,970 --> 00:22:26,210
applications use it like Google Hangouts

00:22:22,009 --> 00:22:28,369
for instance but there are also many

00:22:26,210 --> 00:22:30,950
more alternative ways of structuring p2p

00:22:28,369 --> 00:22:33,049
networks this topic is a bits out of

00:22:30,950 --> 00:22:35,720
scope of this talk unfortunately because

00:22:33,049 --> 00:22:38,960
it's it will be easy to spend at least

00:22:35,720 --> 00:22:41,779
30 minutes more to talk just about one

00:22:38,960 --> 00:22:44,179
of the algorithms so we can just mention

00:22:41,779 --> 00:22:46,700
that one of the prominent ones is the

00:22:44,179 --> 00:22:49,070
distributed hash table which has many

00:22:46,700 --> 00:22:51,019
different implementations it is also

00:22:49,070 --> 00:22:56,029
used by the BitTorrent Network for

00:22:51,019 --> 00:22:58,970
example and many of us have used be

00:22:56,029 --> 00:23:00,919
turned at least once and this protocol

00:22:58,970 --> 00:23:03,499
also has an interesting history because

00:23:00,919 --> 00:23:05,960
at first it dependent on centralized

00:23:03,499 --> 00:23:08,600
trackers to find the connection info and

00:23:05,960 --> 00:23:14,419
IP addresses of peers that serve files

00:23:08,600 --> 00:23:18,080
that you are searching for and this has

00:23:14,419 --> 00:23:21,559
an obvious disadvantage of trackers

00:23:18,080 --> 00:23:23,989
being that authorities are able to log

00:23:21,559 --> 00:23:25,609
the trackers and then you can can't find

00:23:23,989 --> 00:23:28,909
their current connection information and

00:23:25,609 --> 00:23:31,399
then you can download the file so now in

00:23:28,909 --> 00:23:34,129
BitTorrent and supports the distributed

00:23:31,399 --> 00:23:35,869
hash table algorithm so all you need to

00:23:34,129 --> 00:23:38,749
do is just find a single pair to

00:23:35,869 --> 00:23:41,210
bootstrap from because requests for

00:23:38,749 --> 00:23:44,059
files can be propagated throughout the

00:23:41,210 --> 00:23:45,430
network with several hops instead of

00:23:44,059 --> 00:23:49,780
relying on a single

00:23:45,430 --> 00:23:51,400
failure and the process of the initial

00:23:49,780 --> 00:23:53,590
connection to the network is now usually

00:23:51,400 --> 00:23:56,560
done by just by contacting a well-known

00:23:53,590 --> 00:23:58,450
node and then it can continue to work in

00:23:56,560 --> 00:24:01,330
a decentralized way because each node

00:23:58,450 --> 00:24:05,260
knows about its neighbours or theirs

00:24:01,330 --> 00:24:07,480
knows who contacted them so if you know

00:24:05,260 --> 00:24:09,280
at least a single IP address of a

00:24:07,480 --> 00:24:12,490
patrolling node you can join the full

00:24:09,280 --> 00:24:14,800
network and now an interesting question

00:24:12,490 --> 00:24:18,390
what will happen if we can bind the big

00:24:14,800 --> 00:24:20,380
current with WebRTC we get web torrent

00:24:18,390 --> 00:24:22,900
which has a bitter end protocol

00:24:20,380 --> 00:24:25,510
implementation for JavaScript which can

00:24:22,900 --> 00:24:28,510
work in browsers as well as on the

00:24:25,510 --> 00:24:30,640
server side and also it can communicate

00:24:28,510 --> 00:24:32,920
with BitTorrent peers directly from a

00:24:30,640 --> 00:24:36,160
browser because of incompatible Network

00:24:32,920 --> 00:24:38,920
protocols it still allows us to do a lot

00:24:36,160 --> 00:24:40,420
of interesting things and it simplifies

00:24:38,920 --> 00:24:42,580
the interaction with the verticity

00:24:40,420 --> 00:24:45,940
recall a lot we don't need to care about

00:24:42,580 --> 00:24:48,070
signaling and all that stuff all we have

00:24:45,940 --> 00:24:50,320
to do is to serve a file to the network

00:24:48,070 --> 00:24:53,380
and this file will be automatically

00:24:50,320 --> 00:24:55,810
converted into the torrent and announced

00:24:53,380 --> 00:24:57,100
on the tracker behind the schemes and

00:24:55,810 --> 00:25:00,010
that point has a pretty straightforward

00:24:57,100 --> 00:25:02,440
API you can serve basically anything as

00:25:00,010 --> 00:25:06,190
a file can be a blob a JSON object or

00:25:02,440 --> 00:25:08,770
even a JavaScript stream other peers

00:25:06,190 --> 00:25:18,070
knowing that torrent hash can download

00:25:08,770 --> 00:25:20,830
this file and set it further in files

00:25:18,070 --> 00:25:22,840
are generally not limited to a Linux

00:25:20,830 --> 00:25:25,090
distribution archives or whatever you

00:25:22,840 --> 00:25:26,800
usually download from torrents any

00:25:25,090 --> 00:25:29,830
information can be represented as an

00:25:26,800 --> 00:25:32,800
abstract file so web turn can be used

00:25:29,830 --> 00:25:34,300
for much more than just file sharing for

00:25:32,800 --> 00:25:36,160
instance we can build a distributed

00:25:34,300 --> 00:25:38,110
github quite easily because git

00:25:36,160 --> 00:25:40,630
extensively uses and relies in hashes

00:25:38,110 --> 00:25:42,460
for its internal implementation and so

00:25:40,630 --> 00:25:44,260
it will be a very straightforward to

00:25:42,460 --> 00:25:46,870
serve the get packed objects through

00:25:44,260 --> 00:25:49,750
torrents there is an proof-of-concept

00:25:46,870 --> 00:25:54,760
project called get torrent that already

00:25:49,750 --> 00:25:56,950
does just that and we can reuse the same

00:25:54,760 --> 00:25:59,040
protocol to serve web pages or static

00:25:56,950 --> 00:26:01,680
content and make a kind of

00:25:59,040 --> 00:26:03,570
distributed content delivery network so

00:26:01,680 --> 00:26:05,820
that each visitor of your website will

00:26:03,570 --> 00:26:09,840
serve the website's content to each

00:26:05,820 --> 00:26:11,460
other visitor and you didn't find many

00:26:09,840 --> 00:26:17,340
more applications of the BitTorrent

00:26:11,460 --> 00:26:21,420
protocol but still despite of being very

00:26:17,340 --> 00:26:23,760
promising whatever he sees in mature

00:26:21,420 --> 00:26:25,830
technology it still needs to come a long

00:26:23,760 --> 00:26:27,600
way to support large-scale networks that

00:26:25,830 --> 00:26:30,960
can transform the current centralized

00:26:27,600 --> 00:26:34,320
state of the web it's not perfect and

00:26:30,960 --> 00:26:37,020
has many limitations the browser support

00:26:34,320 --> 00:26:38,580
is not perfect for instance and current

00:26:37,020 --> 00:26:40,590
modern web browser such as Chrome or

00:26:38,580 --> 00:26:42,270
Firefox stolen at a number of

00:26:40,590 --> 00:26:44,490
connections that you can establish and

00:26:42,270 --> 00:26:46,080
because of this limitation and because

00:26:44,490 --> 00:26:49,770
of the handshake overhead

00:26:46,080 --> 00:26:52,440
it's practically impossible to build DHT

00:26:49,770 --> 00:26:54,570
networks which made the web for

00:26:52,440 --> 00:26:58,230
implementation dependent on the

00:26:54,570 --> 00:27:01,140
centralized trackers for now in addition

00:26:58,230 --> 00:27:03,300
to that Weber GC doesn't allow to allow

00:27:01,140 --> 00:27:04,650
us to use raw sockets so you can't

00:27:03,300 --> 00:27:06,510
connect to the existing networks

00:27:04,650 --> 00:27:11,040
directly they'll have to go through the

00:27:06,510 --> 00:27:13,230
proxies and another important issue is

00:27:11,040 --> 00:27:15,510
that browser sessions are usually

00:27:13,230 --> 00:27:17,460
short-lived when you close your tab you

00:27:15,510 --> 00:27:19,560
know lows you will lose all connections

00:27:17,460 --> 00:27:22,110
and the next time you will have to go

00:27:19,560 --> 00:27:25,080
through the costly signaling and the

00:27:22,110 --> 00:27:27,600
connection initiation process again this

00:27:25,080 --> 00:27:29,760
problem can be theoretically alleviated

00:27:27,600 --> 00:27:32,520
by allowing to run WebRTC sessions in

00:27:29,760 --> 00:27:34,500
service workers so that even if you

00:27:32,520 --> 00:27:36,300
close a tab with a very juicy connection

00:27:34,500 --> 00:27:38,550
you will still maintain your connection

00:27:36,300 --> 00:27:41,790
to the network of peers but it's kind of

00:27:38,550 --> 00:27:45,540
not possible for now and it's currently

00:27:41,790 --> 00:27:47,010
being developed another possible

00:27:45,540 --> 00:27:50,190
solution to the problem of short-lived

00:27:47,010 --> 00:27:51,540
sessions is hybrid servers because as I

00:27:50,190 --> 00:27:52,890
said earlier the Beverley's

00:27:51,540 --> 00:27:55,500
implementation is not limited to

00:27:52,890 --> 00:27:58,080
browsers so we can integrate the WebRTC

00:27:55,500 --> 00:28:00,120
protocol support into the existing

00:27:58,080 --> 00:28:04,980
peer-to-peer networks and they can act

00:28:00,120 --> 00:28:07,260
as kind of intermediary servers still

00:28:04,980 --> 00:28:09,780
well there is a there is a lot of

00:28:07,260 --> 00:28:12,300
problems to overcome WebRTC is very

00:28:09,780 --> 00:28:12,600
useful today and I'm hoping to see many

00:28:12,300 --> 00:28:16,470
new

00:28:12,600 --> 00:28:18,060
projects that used this particle but

00:28:16,470 --> 00:28:19,980
between networks in general have their

00:28:18,060 --> 00:28:22,260
own set of problems to solve because

00:28:19,980 --> 00:28:23,970
these networks are trustless it's hard

00:28:22,260 --> 00:28:26,730
to solve the problem of malicious peers

00:28:23,970 --> 00:28:28,470
for instance which can span your network

00:28:26,730 --> 00:28:30,810
work misbehave in order to gain some

00:28:28,470 --> 00:28:32,910
advantages in a fist or contained and

00:28:30,810 --> 00:28:35,340
multiple nodes but step under the

00:28:32,910 --> 00:28:37,470
territory of distributed systems which

00:28:35,340 --> 00:28:40,670
are very complex because we'll have to

00:28:37,470 --> 00:28:43,140
deal with data consistency in churn

00:28:40,670 --> 00:28:45,750
because imagine that all knows that

00:28:43,140 --> 00:28:50,190
store some file on the network leave all

00:28:45,750 --> 00:28:52,260
at once effectively this file will be

00:28:50,190 --> 00:28:54,120
lost and it's completely fine if that

00:28:52,260 --> 00:28:56,580
file has no value to you like if it's on

00:28:54,120 --> 00:28:58,650
another of Justin Bieber songs or

00:28:56,580 --> 00:29:00,660
whatever but imagine if that file was

00:28:58,650 --> 00:29:03,750
your Bitcoin wallet you certainly

00:29:00,660 --> 00:29:05,460
wouldn't want to lose it that's why for

00:29:03,750 --> 00:29:06,840
redundancy we have to make sure to have

00:29:05,460 --> 00:29:09,150
enough copies of the same file

00:29:06,840 --> 00:29:12,840
distributed over mail well over many

00:29:09,150 --> 00:29:14,580
nodes and it is not definitely not an

00:29:12,840 --> 00:29:16,920
easy task to coordinate nodes which

00:29:14,580 --> 00:29:19,170
don't trust each other so if we are

00:29:16,920 --> 00:29:21,060
talking about a long lasting global

00:29:19,170 --> 00:29:23,940
scale network we need to make sure that

00:29:21,060 --> 00:29:28,860
Pearson these networks are incentivized

00:29:23,940 --> 00:29:31,140
to stay and in my opinion the economy of

00:29:28,860 --> 00:29:34,770
p2p networks is even more important than

00:29:31,140 --> 00:29:36,240
their algorithms because not a lot of

00:29:34,770 --> 00:29:38,520
people would want to share their

00:29:36,240 --> 00:29:40,980
resources if there is no reward for them

00:29:38,520 --> 00:29:44,280
but can kind of solve this problem by

00:29:40,980 --> 00:29:46,560
giving some coins to mining nodes but

00:29:44,280 --> 00:29:49,350
it's tricky because some strategies can

00:29:46,560 --> 00:29:51,060
lead to centralization all over again we

00:29:49,350 --> 00:29:53,580
have seen that on the same example of

00:29:51,060 --> 00:29:56,940
Bitcoin where mining is now largely

00:29:53,580 --> 00:30:01,410
consolidated around just a few large

00:29:56,940 --> 00:30:03,120
pools and remember that the Internet

00:30:01,410 --> 00:30:05,700
itself originally was started as a

00:30:03,120 --> 00:30:07,350
distributed network - but the question

00:30:05,700 --> 00:30:09,630
of who provides the resources and who

00:30:07,350 --> 00:30:11,700
serves the webpages leads us to use in

00:30:09,630 --> 00:30:14,670
modern days of giant centralized data

00:30:11,700 --> 00:30:16,560
centers and mega corporations so this is

00:30:14,670 --> 00:30:19,080
an open question and we ought to look

00:30:16,560 --> 00:30:20,370
for an answer because I think answering

00:30:19,080 --> 00:30:24,800
this question will be very beneficial

00:30:20,370 --> 00:30:24,800
for very beneficial for all of us

00:30:25,790 --> 00:30:31,040
we can do a lot with WebRTC and we can

00:30:28,670 --> 00:30:33,440
confirm the current internet we can

00:30:31,040 --> 00:30:36,230
bring existing p2p networks such as tor

00:30:33,440 --> 00:30:39,650
to web by putting them to dissemble and

00:30:36,230 --> 00:30:41,780
adding the WebRTC protocol support we

00:30:39,650 --> 00:30:43,520
can build new p2p networks that point

00:30:41,780 --> 00:30:46,340
depends on the will of governments and

00:30:43,520 --> 00:30:48,110
greedy corporations these networks can

00:30:46,340 --> 00:30:50,720
be used to get back the control over

00:30:48,110 --> 00:30:53,960
data to the people because they are more

00:30:50,720 --> 00:30:56,090
secure and resilient in the application

00:30:53,960 --> 00:30:58,100
of a bird ECM will be especially

00:30:56,090 --> 00:31:01,400
important in the area of Internet of

00:30:58,100 --> 00:31:04,490
Things as we can see that medical

00:31:01,400 --> 00:31:05,990
devices self-driving cars smart homes

00:31:04,490 --> 00:31:08,840
and critical infrastructure already

00:31:05,990 --> 00:31:10,040
depends on the internet which is by and

00:31:08,840 --> 00:31:14,330
large controlled by a few big players

00:31:10,040 --> 00:31:17,780
now and I strongly believe that it's not

00:31:14,330 --> 00:31:19,310
right to give these mega corporations

00:31:17,780 --> 00:31:21,950
and governments even more power and

00:31:19,310 --> 00:31:25,670
control over our data and consequently

00:31:21,950 --> 00:31:27,560
or our daily lives so you can find me on

00:31:25,670 --> 00:31:30,110
Twitter and there is a link to page

00:31:27,560 --> 00:31:32,150
listing some is for resources related to

00:31:30,110 --> 00:31:33,470
this talk and thanks a lot for your

00:31:32,150 --> 00:31:37,989
attention

00:31:33,470 --> 00:31:37,989
[Applause]

00:31:40,730 --> 00:31:42,790

YouTube URL: https://www.youtube.com/watch?v=nBPpJKvuNXM


