Title: Sarrah Vesselov: How to style in React and not lose friends | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/sarrah-vesselov/

Aside from recent political events, I don't know of another topic sure to cause more heated debate than how you should style React components. This talk sets out to cover the main methods for styling in React (and beyond).

Through code examples, we will explore the pros and cons of just some of the methods out there. You will learn to make styling decisions based on the scale and type of project. By the end, you should feel confident that there is hope! You can style React components without losing friends.
Captions: 
	00:00:01,370 --> 00:00:07,379
all right good morning

00:00:03,980 --> 00:00:10,050
so had some snafus with some fonts and

00:00:07,379 --> 00:00:14,040
some notes so bear with me a little bit

00:00:10,050 --> 00:00:16,590
but thank you for coming this early so

00:00:14,040 --> 00:00:20,010
as you can probably tell from the title

00:00:16,590 --> 00:00:21,720
of my talk it's based on some pretty

00:00:20,010 --> 00:00:24,420
painful personal experience

00:00:21,720 --> 00:00:31,260
and I wanted to start today by sharing

00:00:24,420 --> 00:00:33,210
that experience with you so in 2015 I

00:00:31,260 --> 00:00:35,489
worked at a small Tampa startup as a

00:00:33,210 --> 00:00:38,309
senior UI developer on a product team

00:00:35,489 --> 00:00:41,700
and my main role was to build scalable

00:00:38,309 --> 00:00:43,140
maintainable CSS architectures the team

00:00:41,700 --> 00:00:45,450
and I had worked for months on a

00:00:43,140 --> 00:00:47,250
proof-of-concept looked a lot like a

00:00:45,450 --> 00:00:50,700
real app but it was essentially

00:00:47,250 --> 00:00:52,379
vaporware we done well there was a lot

00:00:50,700 --> 00:00:54,449
of buzz and we'd snagged her first

00:00:52,379 --> 00:00:57,480
client so it's time to get down to

00:00:54,449 --> 00:00:59,489
business and begin writing production

00:00:57,480 --> 00:01:01,289
quality code it was an exciting

00:00:59,489 --> 00:01:03,090
opportunity to build an app from scratch

00:01:01,289 --> 00:01:08,060
and we decided we were gonna do it and

00:01:03,090 --> 00:01:10,439
react it was just one problem

00:01:08,060 --> 00:01:12,960
there weren't any best practices for

00:01:10,439 --> 00:01:14,700
styling and react at that time and this

00:01:12,960 --> 00:01:17,549
was really where the trouble started for

00:01:14,700 --> 00:01:19,979
me up until now the team had been happy

00:01:17,549 --> 00:01:21,810
to take care of all the styles to have

00:01:19,979 --> 00:01:23,850
me take care of all the style.css less

00:01:21,810 --> 00:01:26,520
sass they really didn't care as long as

00:01:23,850 --> 00:01:29,130
it looked good but this all changed with

00:01:26,520 --> 00:01:31,890
react all of a sudden my ten plus years

00:01:29,130 --> 00:01:34,560
of experience styling applications meant

00:01:31,890 --> 00:01:37,890
absolutely nothing in fact it meant that

00:01:34,560 --> 00:01:40,860
I was a dinosaur and this was because in

00:01:37,890 --> 00:01:43,740
2014 an engineer at Facebook gave a talk

00:01:40,860 --> 00:01:46,490
that changed everything his talk made

00:01:43,740 --> 00:01:49,920
the case for putting CSS in your Jas and

00:01:46,490 --> 00:01:52,079
this really represented a shift from

00:01:49,920 --> 00:01:53,640
traditional MVC architectures to a more

00:01:52,079 --> 00:01:56,369
component based architecture and that

00:01:53,640 --> 00:01:57,990
shift changed the way we viewed styling

00:01:56,369 --> 00:02:02,490
in relationship to the rest of the

00:01:57,990 --> 00:02:03,799
codebase so the next few months honestly

00:02:02,490 --> 00:02:06,990
were some of the worst of my career

00:02:03,799 --> 00:02:09,720
every presentation every conversation

00:02:06,990 --> 00:02:11,400
became a confrontation every

00:02:09,720 --> 00:02:13,560
conversation became a confrontation and

00:02:11,400 --> 00:02:15,569
it was meant to shame and bully once

00:02:13,560 --> 00:02:18,750
the other into seeing the error of their

00:02:15,569 --> 00:02:21,180
ways and by the end of it all none of us

00:02:18,750 --> 00:02:25,500
were friends anymore so if this sounds

00:02:21,180 --> 00:02:31,680
crazy it was and if it sounds familiar

00:02:25,500 --> 00:02:32,130
really sorry but it didn't have to end

00:02:31,680 --> 00:02:34,920
this way

00:02:32,130 --> 00:02:37,620
the team imploded not because of bad

00:02:34,920 --> 00:02:39,150
technology choices in reality most of

00:02:37,620 --> 00:02:41,250
the styling choices we tried would have

00:02:39,150 --> 00:02:43,739
worked if we just stuck with it the

00:02:41,250 --> 00:02:44,519
problem was us and the way we approached

00:02:43,739 --> 00:02:46,560
the problem

00:02:44,519 --> 00:02:49,739
we'd made things far more complicated

00:02:46,560 --> 00:02:51,180
and personal than they needed to be if

00:02:49,739 --> 00:02:54,030
we've been asking the right questions

00:02:51,180 --> 00:03:00,209
and really listening to each other we

00:02:54,030 --> 00:03:01,170
could have avoided the whole mess that

00:03:00,209 --> 00:03:05,519
was two years ago

00:03:01,170 --> 00:03:09,360
a lot has changed but the debate really

00:03:05,519 --> 00:03:12,930
hasn't and this is a local recent Google

00:03:09,360 --> 00:03:14,760
search I did just for CSS so I see the

00:03:12,930 --> 00:03:17,640
same arguments being made today that we

00:03:14,760 --> 00:03:19,380
were having two years ago so I want to

00:03:17,640 --> 00:03:21,060
talk about that today and take a look at

00:03:19,380 --> 00:03:22,470
both sides of that argument and then

00:03:21,060 --> 00:03:29,069
look at the pros and cons of each way

00:03:22,470 --> 00:03:31,739
that you really can style and react so

00:03:29,069 --> 00:03:34,890
to look at both sides of debate starting

00:03:31,739 --> 00:03:38,400
with the gripes against CSS we all know

00:03:34,890 --> 00:03:40,380
CSS is broken right CSS uses global

00:03:38,400 --> 00:03:41,730
scope by default that is a no-no in

00:03:40,380 --> 00:03:45,569
JavaScript why are we doing it in

00:03:41,730 --> 00:03:47,340
styles.css dependencies and inheritance

00:03:45,569 --> 00:03:51,000
make style collision and overriding just

00:03:47,340 --> 00:03:53,250
inevitable you're looking at separation

00:03:51,000 --> 00:03:56,280
of concerns all wrong on the CSS side

00:03:53,250 --> 00:03:58,049
right we look at CSS separation of

00:03:56,280 --> 00:04:01,200
concerns as a separation of technologies

00:03:58,049 --> 00:04:05,250
and in CSS and j/s it's really a

00:04:01,200 --> 00:04:08,459
separation of components and what each

00:04:05,250 --> 00:04:10,889
piece is doing and then the Cascade of

00:04:08,459 --> 00:04:13,109
course causes thousands of lines of dead

00:04:10,889 --> 00:04:17,850
code and doesn't work with CSS at scale

00:04:13,109 --> 00:04:19,829
so you have this dead code problem but

00:04:17,850 --> 00:04:23,370
there are equally strong gripes against

00:04:19,829 --> 00:04:25,590
CSS and Jas CSS isn't broken you just

00:04:23,370 --> 00:04:27,230
don't know how to use it using

00:04:25,590 --> 00:04:29,090
JavaScript to create CSS

00:04:27,230 --> 00:04:31,310
is excessive and unnecessary why are we

00:04:29,090 --> 00:04:35,210
reinventing the wheel CSS works just

00:04:31,310 --> 00:04:38,630
fine on its own CSS should be separate

00:04:35,210 --> 00:04:40,910
from your market markup the Cascade is

00:04:38,630 --> 00:04:49,520
your friend if you know how to use it

00:04:40,910 --> 00:04:50,870
and of course Oh apologies there the

00:04:49,520 --> 00:04:53,990
Cascade is your friend if you know how

00:04:50,870 --> 00:04:57,140
to use it and of course inline styles

00:04:53,990 --> 00:04:59,150
are a hack so both sides CSS and Jas and

00:04:57,140 --> 00:05:01,070
the CSS side have some pretty serious

00:04:59,150 --> 00:05:06,410
concerns about what the other side is

00:05:01,070 --> 00:05:08,510
doing so now that we've heard the two

00:05:06,410 --> 00:05:10,040
sides let's look at the options you can

00:05:08,510 --> 00:05:12,470
break down styling into four basic

00:05:10,040 --> 00:05:16,760
categories each one with its own sets of

00:05:12,470 --> 00:05:18,200
pros and cons I'm going to start with

00:05:16,760 --> 00:05:20,360
the basics

00:05:18,200 --> 00:05:25,250
standardization methods otherwise known

00:05:20,360 --> 00:05:28,520
as naming things intelligently there are

00:05:25,250 --> 00:05:31,400
a lot of methods out there common thread

00:05:28,520 --> 00:05:33,500
among all of them is to eliminate style

00:05:31,400 --> 00:05:35,420
collision by lowering specificity and

00:05:33,500 --> 00:05:37,190
encouraging modularity so

00:05:35,420 --> 00:05:38,480
standardization methods work with CSS

00:05:37,190 --> 00:05:44,030
sass blast

00:05:38,480 --> 00:05:46,460
you name it and in 2015 Ben was a

00:05:44,030 --> 00:05:48,350
standardization the CSS camp on the team

00:05:46,460 --> 00:05:51,050
is rooting for and BEM stands for block

00:05:48,350 --> 00:05:51,380
element modifier rules are really really

00:05:51,050 --> 00:05:54,550
simple

00:05:51,380 --> 00:05:57,050
everything has a class everything

00:05:54,550 --> 00:06:00,290
elements should never be directly styled

00:05:57,050 --> 00:06:02,090
no nesting of styles and choose clear

00:06:00,290 --> 00:06:08,600
naming conventions and of course you

00:06:02,090 --> 00:06:10,360
must follow the syntax religiously so in

00:06:08,600 --> 00:06:12,650
this example I have my friend component

00:06:10,360 --> 00:06:14,270
friend is a block it's a standalone

00:06:12,650 --> 00:06:17,240
entity that has its own meaning and

00:06:14,270 --> 00:06:19,400
identity any Dom node in my friend block

00:06:17,240 --> 00:06:21,410
is an element of that block they are

00:06:19,400 --> 00:06:23,030
semantically tied to that block and have

00:06:21,410 --> 00:06:24,710
no meaning on their own so you would

00:06:23,030 --> 00:06:26,210
never use friend image or friend name or

00:06:24,710 --> 00:06:27,470
friend description anywhere else in your

00:06:26,210 --> 00:06:30,910
codebase it should always live with

00:06:27,470 --> 00:06:30,910
inside that friend block

00:06:33,540 --> 00:06:37,740
and modifier is just an extra class name

00:06:35,790 --> 00:06:39,500
that can be added to blocks and elements

00:06:37,740 --> 00:06:41,730
to change its appearance or behavior

00:06:39,500 --> 00:06:47,340
modifiers should only modify the block

00:06:41,730 --> 00:06:48,140
never replace it in terms of component

00:06:47,340 --> 00:06:50,370
structure

00:06:48,140 --> 00:06:52,110
here's a simple component folder

00:06:50,370 --> 00:06:53,700
structure to start with and I'm lino

00:06:52,110 --> 00:06:55,770
means telling you this is the way to do

00:06:53,700 --> 00:06:58,080
it this is just one way that you can do

00:06:55,770 --> 00:06:59,340
it I think component folder structure

00:06:58,080 --> 00:07:03,540
and structure in general is very

00:06:59,340 --> 00:07:06,750
personalized from project to project but

00:07:03,540 --> 00:07:08,340
here we've got the simple structure each

00:07:06,750 --> 00:07:10,260
component should do one thing and do it

00:07:08,340 --> 00:07:13,560
well and notice that each folder

00:07:10,260 --> 00:07:15,990
contains the JSC SS and test files in

00:07:13,560 --> 00:07:17,790
this example components have been broken

00:07:15,990 --> 00:07:19,830
out into two categories we've got our

00:07:17,790 --> 00:07:21,950
container components and just our

00:07:19,830 --> 00:07:24,540
components the components folder

00:07:21,950 --> 00:07:26,490
represents our presentational components

00:07:24,540 --> 00:07:29,640
they're simply their state lists and

00:07:26,490 --> 00:07:32,490
they simply take props the container

00:07:29,640 --> 00:07:36,090
components are stateful they make API

00:07:32,490 --> 00:07:39,720
calls etc etc there's a lot of benefits

00:07:36,090 --> 00:07:41,190
to this approach you get better but

00:07:39,720 --> 00:07:43,440
different type of separation of concerns

00:07:41,190 --> 00:07:44,670
and you get reusability and other

00:07:43,440 --> 00:07:47,520
projects if that's something you're

00:07:44,670 --> 00:07:49,530
concerned with the presentational

00:07:47,520 --> 00:07:51,480
components also can be worked on by the

00:07:49,530 --> 00:07:56,820
design team without concern that it's

00:07:51,480 --> 00:07:58,130
going to affect the apps logic so

00:07:56,820 --> 00:08:00,620
there's a lot of pros to them and

00:07:58,130 --> 00:08:03,780
standardization methods in general I

00:08:00,620 --> 00:08:06,200
think they're a natural fit for building

00:08:03,780 --> 00:08:06,200
components

00:08:10,110 --> 00:08:17,289
there's no configuration compiler etc so

00:08:14,740 --> 00:08:19,449
we're using just straight CSS nothing to

00:08:17,289 --> 00:08:26,680
configure nothing to setup and put

00:08:19,449 --> 00:08:28,240
together using BEM and presentational

00:08:26,680 --> 00:08:30,569
components each component can be used

00:08:28,240 --> 00:08:34,500
over and over again in other projects

00:08:30,569 --> 00:08:37,060
and single class names make collisions

00:08:34,500 --> 00:08:40,440
impossible and easier to rework as long

00:08:37,060 --> 00:08:43,300
as everyone's following that syntax

00:08:40,440 --> 00:08:44,980
rendering engines evaluate CSS selectors

00:08:43,300 --> 00:08:48,269
right to left so the less there is to

00:08:44,980 --> 00:08:48,269
evaluate the faster it's going to render

00:08:48,300 --> 00:08:52,600
and I think that BEM structure lends

00:08:50,560 --> 00:08:54,550
itself perfectly to linting so you can

00:08:52,600 --> 00:09:00,310
make sure that every style that is added

00:08:54,550 --> 00:09:04,480
conforms to the same standards but there

00:09:00,310 --> 00:09:06,220
are some cons let's face it naming

00:09:04,480 --> 00:09:07,720
things is really hard it's probably one

00:09:06,220 --> 00:09:09,370
of the hardest things that we do it

00:09:07,720 --> 00:09:11,019
sounds crazy to anyone that doesn't do

00:09:09,370 --> 00:09:13,779
this for a living but I think most of my

00:09:11,019 --> 00:09:15,250
time building CSS architectures has been

00:09:13,779 --> 00:09:16,810
figuring out what to name something so

00:09:15,250 --> 00:09:18,870
someone else knows what I'm talking

00:09:16,810 --> 00:09:18,870
about

00:09:19,079 --> 00:09:24,820
the rigid structure of them is what

00:09:22,690 --> 00:09:26,500
makes it work but it's also I think what

00:09:24,820 --> 00:09:28,480
makes it difficult to write at first it

00:09:26,500 --> 00:09:30,250
feels really weird it it doesn't feel

00:09:28,480 --> 00:09:32,170
natural and when something doesn't feel

00:09:30,250 --> 00:09:33,699
natural it takes longer so it can be

00:09:32,170 --> 00:09:35,380
really frustrating to do something that

00:09:33,699 --> 00:09:37,180
you think you could do a lot faster

00:09:35,380 --> 00:09:38,920
another way but you're being forced into

00:09:37,180 --> 00:09:41,410
this syntax and into this this

00:09:38,920 --> 00:09:45,420
particular method so you got to get team

00:09:41,410 --> 00:09:48,730
buy-in in order for this system to work

00:09:45,420 --> 00:09:50,740
and losing the benefit of the Cascade

00:09:48,730 --> 00:09:52,420
can be seen as a pro or con depending on

00:09:50,740 --> 00:09:54,519
which side of the debate you fall on the

00:09:52,420 --> 00:09:56,500
Cascade can keep things dry when used

00:09:54,519 --> 00:09:57,399
correctly or can result in a bloated

00:09:56,500 --> 00:09:59,529
codebase

00:09:57,399 --> 00:10:06,399
when Styles are repeatedly overridden

00:09:59,529 --> 00:10:08,350
and hacked it's possible to use them for

00:10:06,399 --> 00:10:10,240
theming but I would say that there are

00:10:08,350 --> 00:10:11,620
far better methods out there if theming

00:10:10,240 --> 00:10:16,660
is something that's important to you in

00:10:11,620 --> 00:10:19,390
and the work that you're doing and it

00:10:16,660 --> 00:10:20,860
may not be a serious Condor scores and

00:10:19,390 --> 00:10:23,050
the dashes when you first work them it

00:10:20,860 --> 00:10:24,400
feels really really ugly

00:10:23,050 --> 00:10:26,920
and again I think it goes back to

00:10:24,400 --> 00:10:29,080
writing something that's that's

00:10:26,920 --> 00:10:36,190
difficult or doesn't come naturally can

00:10:29,080 --> 00:10:38,680
make things a lot slower so next I want

00:10:36,190 --> 00:10:44,140
to look at preprocessors we're turning

00:10:38,680 --> 00:10:46,990
this into that so CSS preprocessor takes

00:10:44,140 --> 00:10:49,180
a language and outputs it as CSS syntax

00:10:46,990 --> 00:10:51,990
is usually more readable than plain CSS

00:10:49,180 --> 00:10:54,580
and allows you to write dry code faster

00:10:51,990 --> 00:10:58,210
gain a lot of helpful features like

00:10:54,580 --> 00:11:02,500
variables operations mix-ins you name it

00:10:58,210 --> 00:11:04,690
I think sass is probably one of the most

00:11:02,500 --> 00:11:06,070
well-known extension languages and so

00:11:04,690 --> 00:11:11,680
that's the one I'm just gonna touch upon

00:11:06,070 --> 00:11:14,500
here in this talk so the bad news about

00:11:11,680 --> 00:11:16,780
sass or any preprocessor is that you

00:11:14,500 --> 00:11:18,760
still need to name things so in this

00:11:16,780 --> 00:11:20,290
example I'm continuing to use the BEM

00:11:18,760 --> 00:11:21,940
naming convention for our friend

00:11:20,290 --> 00:11:23,350
component the friend component will look

00:11:21,940 --> 00:11:25,960
exactly the same as in the last example

00:11:23,350 --> 00:11:30,700
nothing changes here the component

00:11:25,960 --> 00:11:32,050
itself is set the difference here is

00:11:30,700 --> 00:11:34,870
that instead of having to write out each

00:11:32,050 --> 00:11:38,410
class in its entirety or nesting using

00:11:34,870 --> 00:11:40,120
the ampersand to assemble each class we

00:11:38,410 --> 00:11:41,560
have variables in here and there's a lot

00:11:40,120 --> 00:11:42,570
of ways that I could dry this up even

00:11:41,560 --> 00:11:45,250
further

00:11:42,570 --> 00:11:47,020
once compiled the CSS output is going to

00:11:45,250 --> 00:11:51,880
be exactly the same as in our original

00:11:47,020 --> 00:11:53,850
example and again with the folder

00:11:51,880 --> 00:11:56,080
structure nothing has really changed

00:11:53,850 --> 00:11:57,880
we're still approaching each component

00:11:56,080 --> 00:12:01,750
as a whole entity we're no longer

00:11:57,880 --> 00:12:03,940
separating HTML CSS and j/s and instead

00:12:01,750 --> 00:12:07,660
we're separating based on presentational

00:12:03,940 --> 00:12:09,760
components and container components and

00:12:07,660 --> 00:12:12,250
in this example I actually have the sass

00:12:09,760 --> 00:12:14,710
outputting to an individual CSS file

00:12:12,250 --> 00:12:17,080
that lives within the component however

00:12:14,710 --> 00:12:18,850
you can do it a number of different ways

00:12:17,080 --> 00:12:20,170
you could compile this into one

00:12:18,850 --> 00:12:25,090
stylesheet and load that whole

00:12:20,170 --> 00:12:29,350
stylesheet instead so pros there's a lot

00:12:25,090 --> 00:12:31,030
of pros to pre-processors sass gives you

00:12:29,350 --> 00:12:32,410
the power obviously of variables mix-ins

00:12:31,030 --> 00:12:33,820
nestings it's got a lot of really

00:12:32,410 --> 00:12:35,810
helpful features i think a lot of us

00:12:33,820 --> 00:12:38,720
have grown dependent on

00:12:35,810 --> 00:12:43,339
and in general you can dry up your code

00:12:38,720 --> 00:12:45,019
quite a bit using these features I also

00:12:43,339 --> 00:12:47,930
think a lot of them are really easy to

00:12:45,019 --> 00:12:49,459
pick up if you already know CSS there's

00:12:47,930 --> 00:12:52,279
there's no real overhead to jumping in

00:12:49,459 --> 00:12:56,589
and working with sass you can really do

00:12:52,279 --> 00:12:58,430
it straightaway without much help and

00:12:56,589 --> 00:13:01,670
similar to a first setup each

00:12:58,430 --> 00:13:03,499
presentation component is modular each

00:13:01,670 --> 00:13:05,629
sass file can be compiled into one sheet

00:13:03,499 --> 00:13:07,490
or can be exported into one single CSS

00:13:05,629 --> 00:13:09,290
sheet that lives with that component so

00:13:07,490 --> 00:13:10,579
it really lends itself to working for

00:13:09,290 --> 00:13:17,029
your team and for the project the way

00:13:10,579 --> 00:13:18,649
you need it to there are some cons so to

00:13:17,029 --> 00:13:20,439
use sass in your project you'll need to

00:13:18,649 --> 00:13:22,819
add some configuration in dependencies

00:13:20,439 --> 00:13:24,920
it isn't really a big con considering

00:13:22,819 --> 00:13:26,540
what we already do with web pack and

00:13:24,920 --> 00:13:30,220
other things in react but it's something

00:13:26,540 --> 00:13:30,220
to keep in mind it's just one more layer

00:13:31,540 --> 00:13:34,939
nesting can can get out of control very

00:13:34,309 --> 00:13:37,910
very quickly

00:13:34,939 --> 00:13:39,740
I've seen some some devs new to sass

00:13:37,910 --> 00:13:42,379
nests themselves I mean like straight to

00:13:39,740 --> 00:13:44,059
hell there's look they're like 10 deep

00:13:42,379 --> 00:13:46,550
and they can't figure out how that

00:13:44,059 --> 00:13:49,000
possibly happened so you've got to be

00:13:46,550 --> 00:13:52,309
really careful with sass and nesting

00:13:49,000 --> 00:13:55,009
having said that I would argue that the

00:13:52,309 --> 00:13:56,750
the component composition of reactant

00:13:55,009 --> 00:13:58,129
general reduces the need for mix-ins and

00:13:56,750 --> 00:13:59,870
nesting you shouldn't be building these

00:13:58,129 --> 00:14:01,550
really big components that do a lot of

00:13:59,870 --> 00:14:02,899
things they should be very very small

00:14:01,550 --> 00:14:05,000
they should be very very concentrated

00:14:02,899 --> 00:14:08,269
and the amount of styling you need

00:14:05,000 --> 00:14:12,920
should be relatively small so you may

00:14:08,269 --> 00:14:16,100
not even need those things and you have

00:14:12,920 --> 00:14:18,019
to name a lot of things right we just

00:14:16,100 --> 00:14:25,189
don't want to do this it seems to be a

00:14:18,019 --> 00:14:27,980
really popular refrain so now I want to

00:14:25,189 --> 00:14:29,809
talk about inline styles and inline

00:14:27,980 --> 00:14:30,800
styles are not the same as CSS and Jas

00:14:29,809 --> 00:14:33,319
and I'm gonna get to that in a minute

00:14:30,800 --> 00:14:35,179
and the first two methods that we just

00:14:33,319 --> 00:14:38,240
talked about have been standard for

00:14:35,179 --> 00:14:41,809
quite a long time adding CSS Styles

00:14:38,240 --> 00:14:44,540
inline goes back even further but in

00:14:41,809 --> 00:14:47,209
2015 the idea of using them to style

00:14:44,540 --> 00:14:49,389
your entire application seemed kind of

00:14:47,209 --> 00:14:49,389
crazy

00:14:50,330 --> 00:14:54,330
so just like it sounds

00:14:52,290 --> 00:14:57,210
inline Styles attach your styles in line

00:14:54,330 --> 00:14:59,280
to the actual Dom node and again they're

00:14:57,210 --> 00:15:02,400
not the same thing as CSS and JSI I will

00:14:59,280 --> 00:15:04,620
get to that but this is a same frame

00:15:02,400 --> 00:15:07,380
component it's a simple example of

00:15:04,620 --> 00:15:09,960
inline Styles and this was the first

00:15:07,380 --> 00:15:12,710
example that the CSS and J's folks on

00:15:09,960 --> 00:15:16,080
the team brought to us in 2015 and I

00:15:12,710 --> 00:15:20,310
gotta say we were horrified when we saw

00:15:16,080 --> 00:15:24,780
this and to be fair this is not how most

00:15:20,310 --> 00:15:26,640
people are using inline Styles most are

00:15:24,780 --> 00:15:28,830
using style objects it's much more

00:15:26,640 --> 00:15:30,090
maintainable than the first example it's

00:15:28,830 --> 00:15:32,970
also the way react native handles

00:15:30,090 --> 00:15:35,160
styling most will take it one step

00:15:32,970 --> 00:15:36,810
further and place the style objects in a

00:15:35,160 --> 00:15:40,040
separate document and then import that

00:15:36,810 --> 00:15:48,030
into the component sounds familiar

00:15:40,040 --> 00:15:51,390
should so at the time the thought for

00:15:48,030 --> 00:15:53,570
many of us was seriously you want us to

00:15:51,390 --> 00:15:56,310
style an entire application like this

00:15:53,570 --> 00:15:58,980
the very thought of styling an entire

00:15:56,310 --> 00:16:02,010
app by injecting Styles seemed laughable

00:15:58,980 --> 00:16:05,040
at the time because a big argument right

00:16:02,010 --> 00:16:06,870
had been working with CSS at scale and

00:16:05,040 --> 00:16:10,200
from the perspective of the CSS folks

00:16:06,870 --> 00:16:12,480
this was not scalable the font size

00:16:10,200 --> 00:16:14,400
color palette of the application had

00:16:12,480 --> 00:16:15,570
changed several times in just a few

00:16:14,400 --> 00:16:17,940
months that we were working on the proof

00:16:15,570 --> 00:16:19,500
of concept how are we ever gonna manage

00:16:17,940 --> 00:16:22,050
monumental style changes like that with

00:16:19,500 --> 00:16:24,839
inline Styles surely there was an

00:16:22,050 --> 00:16:26,640
obvious need for global Styles to handle

00:16:24,839 --> 00:16:31,680
things like font sizing vertical rhythm

00:16:26,640 --> 00:16:33,240
and color palette even more distressing

00:16:31,680 --> 00:16:35,280
at the time was learning what it

00:16:33,240 --> 00:16:38,580
couldn't do the main difference between

00:16:35,280 --> 00:16:41,520
inline Styles and CSS and Jas so inline

00:16:38,580 --> 00:16:43,500
Styles only supports a subset of CSS CSS

00:16:41,520 --> 00:16:45,630
and j/s on the other hand allows you to

00:16:43,500 --> 00:16:48,089
use all the power of CSS because it

00:16:45,630 --> 00:16:49,589
generates actual CSS and we're gonna get

00:16:48,089 --> 00:16:52,910
to those in a minute I know I keep

00:16:49,589 --> 00:16:52,910
saying that but we're almost there so

00:16:54,350 --> 00:16:58,620
while in stein law in blind styles are

00:16:57,060 --> 00:17:01,980
lacking quite a bit I think there are

00:16:58,620 --> 00:17:02,630
some positives to them inline Styles

00:17:01,980 --> 00:17:05,240
really forces

00:17:02,630 --> 00:17:07,640
you to change your mental model and see

00:17:05,240 --> 00:17:08,690
each component as its own entity and

00:17:07,640 --> 00:17:11,660
this was something that it really did

00:17:08,690 --> 00:17:14,510
for me I will admit that I was not

00:17:11,660 --> 00:17:16,400
against the idea of CSS and Jas but it

00:17:14,510 --> 00:17:17,839
did go against everything that I had

00:17:16,400 --> 00:17:20,770
learned my years and years of best

00:17:17,839 --> 00:17:23,060
practice and it really put my hackles up

00:17:20,770 --> 00:17:25,220
but sitting down and writing a component

00:17:23,060 --> 00:17:27,530
and using inline Styles really changed

00:17:25,220 --> 00:17:30,260
my view on that I was able to see the

00:17:27,530 --> 00:17:32,720
component as its own concern and see the

00:17:30,260 --> 00:17:38,870
value in being able to localize those

00:17:32,720 --> 00:17:41,000
Styles and obviously inline styles are

00:17:38,870 --> 00:17:42,320
of the trump card and specificity right

00:17:41,000 --> 00:17:44,060
there's no way someone's gonna

00:17:42,320 --> 00:17:49,190
accidentally override them or leave

00:17:44,060 --> 00:17:51,110
unused Styles hanging around and if you

00:17:49,190 --> 00:17:52,670
intend to stick with react long-term to

00:17:51,110 --> 00:17:54,050
go react native your styles are still

00:17:52,670 --> 00:17:58,850
gonna work it's gonna be much easier to

00:17:54,050 --> 00:18:03,710
move those over so the cons list is a

00:17:58,850 --> 00:18:06,470
bit longer so you need to depend on a

00:18:03,710 --> 00:18:07,790
library to access basic CSS features and

00:18:06,470 --> 00:18:09,830
this was one of the big arguments from

00:18:07,790 --> 00:18:11,450
the CSS side at the time was we're just

00:18:09,830 --> 00:18:14,590
adding all these things that CSS does

00:18:11,450 --> 00:18:17,840
does naturally why why would we do this

00:18:14,590 --> 00:18:19,820
and if you're not losing using a library

00:18:17,840 --> 00:18:21,740
it's necessary to program jeaious

00:18:19,820 --> 00:18:23,480
workarounds to address media queries

00:18:21,740 --> 00:18:28,580
pseudo selectors all of the things that

00:18:23,480 --> 00:18:29,930
CSS gives you just out of the box and

00:18:28,580 --> 00:18:31,670
then again depending on which side of

00:18:29,930 --> 00:18:33,620
the debate you're on you lose the

00:18:31,670 --> 00:18:35,420
Cascade so you're not able to make

00:18:33,620 --> 00:18:37,310
global style changes using the Cascade

00:18:35,420 --> 00:18:41,090
every component would need to be touched

00:18:37,310 --> 00:18:46,700
if the changes were going to be to go

00:18:41,090 --> 00:18:48,200
across all the components and I got to

00:18:46,700 --> 00:18:51,260
say it was really difficult to debug in

00:18:48,200 --> 00:18:53,570
the Dom I did most of my work in the

00:18:51,260 --> 00:18:56,810
inspector and when you're not using

00:18:53,570 --> 00:18:57,890
mapping class names to the elements it's

00:18:56,810 --> 00:18:59,150
really difficult to tell what you're

00:18:57,890 --> 00:19:00,650
looking at even when you know what

00:18:59,150 --> 00:19:01,670
you're looking at it's difficult to tell

00:19:00,650 --> 00:19:03,260
what you're looking at because the

00:19:01,670 --> 00:19:07,000
styles are jammed in with the rest of

00:19:03,260 --> 00:19:07,000
your your elements

00:19:07,960 --> 00:19:11,860
and interestingly enough the components

00:19:10,539 --> 00:19:15,610
themselves don't really lend themselves

00:19:11,860 --> 00:19:17,320
to outside use and other code bases

00:19:15,610 --> 00:19:19,269
because you're placing these Styles

00:19:17,320 --> 00:19:21,190
directly in line you'd have to go in and

00:19:19,269 --> 00:19:23,320
reconfigure basically every single one

00:19:21,190 --> 00:19:27,700
by hand in order to use it somewhere

00:19:23,320 --> 00:19:29,830
else and another interesting thing that

00:19:27,700 --> 00:19:32,169
we found was that performance was not

00:19:29,830 --> 00:19:33,999
very good not page full of inline Styles

00:19:32,169 --> 00:19:36,039
where each tag needs to be parsed is

00:19:33,999 --> 00:19:42,879
gonna be less performant than loading a

00:19:36,039 --> 00:19:45,909
single stylesheet so CSS and j/s is

00:19:42,879 --> 00:19:51,639
pretty hot right now but in 2015 it was

00:19:45,909 --> 00:19:53,740
on fire and in 2015 there weren't a lot

00:19:51,639 --> 00:19:55,869
of CSS and J's libraries aside from

00:19:53,740 --> 00:19:57,039
radium CSS modules and I think at the

00:19:55,869 --> 00:20:00,249
time that we were developing like

00:19:57,039 --> 00:20:02,799
aphrodite had just come out many of the

00:20:00,249 --> 00:20:04,720
cons that were plaguing inline j:s could

00:20:02,799 --> 00:20:05,169
also be applied to libraries available

00:20:04,720 --> 00:20:09,480
at that time

00:20:05,169 --> 00:20:09,480
I think it's evolved quite a bit

00:20:16,050 --> 00:20:21,220
so style components weren't around in

00:20:18,760 --> 00:20:23,710
2015 but I think that they represent a

00:20:21,220 --> 00:20:25,030
giant leap forward in CSS and J's

00:20:23,710 --> 00:20:31,990
library so I'm going to talk about that

00:20:25,030 --> 00:20:33,880
today so here we have our same friend

00:20:31,990 --> 00:20:36,730
component should be very familiar with

00:20:33,880 --> 00:20:37,870
this component by now but there's a big

00:20:36,730 --> 00:20:41,170
difference in the way we're putting this

00:20:37,870 --> 00:20:43,090
together so style components actually

00:20:41,170 --> 00:20:46,180
utilize this tag tagged template

00:20:43,090 --> 00:20:48,610
literals to use real CSS and create

00:20:46,180 --> 00:20:51,610
normal react components so as you can

00:20:48,610 --> 00:20:53,290
see we're importing styled from style

00:20:51,610 --> 00:20:55,000
components so we're using that we're

00:20:53,290 --> 00:20:59,320
importing that library and then we're

00:20:55,000 --> 00:21:03,280
able to construct a wrapper component

00:20:59,320 --> 00:21:05,410
that applies the styles to a section tag

00:21:03,280 --> 00:21:06,820
so wrapper equals style dot section in

00:21:05,410 --> 00:21:08,800
the Dom that's actually going to

00:21:06,820 --> 00:21:12,310
generate a section tag with a mapped

00:21:08,800 --> 00:21:15,190
class name that maps to those Styles so

00:21:12,310 --> 00:21:17,170
it's a big difference in the way that

00:21:15,190 --> 00:21:19,240
you handle inline Styles it is not

00:21:17,170 --> 00:21:23,500
inline it's actually generating a CSS

00:21:19,240 --> 00:21:25,180
style sheet so at runtime it's actually

00:21:23,500 --> 00:21:27,700
loading that into the head section of

00:21:25,180 --> 00:21:34,960
your document and then applying the

00:21:27,700 --> 00:21:36,220
class name to the Styles so I would say

00:21:34,960 --> 00:21:37,510
that how you structure your component

00:21:36,220 --> 00:21:40,060
folder is going to be a team decision

00:21:37,510 --> 00:21:43,720
and in most cases should be decided

00:21:40,060 --> 00:21:45,310
before you ever touch the Styles in this

00:21:43,720 --> 00:21:51,880
example I've actually broken that

00:21:45,310 --> 00:21:53,410
component down even further here the way

00:21:51,880 --> 00:21:55,870
we've broken it down is we've

00:21:53,410 --> 00:21:58,000
constructed each piece and then I'm just

00:21:55,870 --> 00:22:02,410
building in my render each piece of that

00:21:58,000 --> 00:22:04,450
component here I've actually broken out

00:22:02,410 --> 00:22:06,580
each one is its own separate entity and

00:22:04,450 --> 00:22:08,860
I'm bringing them in to my index file

00:22:06,580 --> 00:22:10,330
and that way I can use these over and

00:22:08,860 --> 00:22:13,210
over again and other components and

00:22:10,330 --> 00:22:16,570
other areas and build like a bunch of

00:22:13,210 --> 00:22:19,630
Lego blocks really so this allows more

00:22:16,570 --> 00:22:21,130
flexibility and scalability long-term as

00:22:19,630 --> 00:22:25,380
you can easily move those smaller pieces

00:22:21,130 --> 00:22:25,380
around to construct larger components

00:22:27,429 --> 00:22:31,999
so I think style components have a lot

00:22:29,659 --> 00:22:35,149
going for them and CSS and Jas libraries

00:22:31,999 --> 00:22:37,099
in general do they allow you to write

00:22:35,149 --> 00:22:39,289
real CSS without contact shifting

00:22:37,099 --> 00:22:42,139
between JavaScript and a set of style

00:22:39,289 --> 00:22:44,479
sheets and it also enforces CSS based

00:22:42,139 --> 00:22:49,849
best practices by removing that mapping

00:22:44,479 --> 00:22:51,979
between the HTML and the CSS because

00:22:49,849 --> 00:22:53,779
you're building small purely

00:22:51,979 --> 00:22:58,849
presentational components they're

00:22:53,779 --> 00:23:02,419
independent and reusable and single use

00:22:58,849 --> 00:23:04,459
class names make there we go

00:23:02,419 --> 00:23:06,199
single use class names make naming

00:23:04,459 --> 00:23:08,089
easier with no chance of collision and

00:23:06,199 --> 00:23:10,039
of course you have your containers and

00:23:08,089 --> 00:23:14,289
components so your separate separating

00:23:10,039 --> 00:23:14,289
out your presentational from your logic

00:23:16,089 --> 00:23:20,119
style components actually has basic sass

00:23:18,949 --> 00:23:22,969
support so you can do things with

00:23:20,119 --> 00:23:26,659
variables nesting mix-ins there's a lot

00:23:22,969 --> 00:23:30,459
of really cool features there it even

00:23:26,659 --> 00:23:39,459
has a native native mobile support and

00:23:30,459 --> 00:23:42,619
steam support so there are some cons

00:23:39,459 --> 00:23:44,689
choosing CSS and jus as an approach

00:23:42,619 --> 00:23:47,019
means choosing a framework so it's one

00:23:44,689 --> 00:23:50,929
choice followed by another choice

00:23:47,019 --> 00:23:52,909
glamour style components aphrodite CSS

00:23:50,929 --> 00:23:55,159
modules there are many flavors of CSS

00:23:52,909 --> 00:23:56,539
and j/s out there and at the end of this

00:23:55,159 --> 00:23:59,089
deck I actually have a resource that

00:23:56,539 --> 00:24:02,439
takes you to an entire list of all the

00:23:59,089 --> 00:24:05,809
possible CSS and J's choices you have

00:24:02,439 --> 00:24:07,399
and it's yet another library to use

00:24:05,809 --> 00:24:09,279
which i think is something to keep in

00:24:07,399 --> 00:24:11,899
mind because things change so quickly

00:24:09,279 --> 00:24:15,729
relying on a library that's the hot new

00:24:11,899 --> 00:24:17,839
thing today might be a problem later on

00:24:15,729 --> 00:24:21,459
so and it's also something that needs to

00:24:17,839 --> 00:24:21,459
be understood by the entire team

00:24:23,400 --> 00:24:28,830
and I think a solid case could be made

00:24:25,770 --> 00:24:31,230
for the complexity this introduces many

00:24:28,830 --> 00:24:33,780
teams have designers and implementing

00:24:31,230 --> 00:24:35,430
styles and design patterns and CSS so

00:24:33,780 --> 00:24:36,450
while a developer might be able to jump

00:24:35,430 --> 00:24:38,730
right in and feel very comfortable

00:24:36,450 --> 00:24:40,980
because this utilizes so much of what's

00:24:38,730 --> 00:24:49,680
already there in JavaScript it could be

00:24:40,980 --> 00:24:53,640
difficult for others on the team so the

00:24:49,680 --> 00:24:56,190
question is what should I use it depends

00:24:53,640 --> 00:24:58,920
I know you were looking for one answer

00:24:56,190 --> 00:25:01,110
today but there really is no one answer

00:24:58,920 --> 00:25:04,559
I think it really does depend there are

00:25:01,110 --> 00:25:05,790
a lot of choices out there I think you

00:25:04,559 --> 00:25:10,980
need to start by asking the right

00:25:05,790 --> 00:25:14,070
questions so what are the mental models

00:25:10,980 --> 00:25:15,270
on the team a mental model is based on

00:25:14,070 --> 00:25:18,330
belief not facts

00:25:15,270 --> 00:25:20,309
it's a model of what users think then or

00:25:18,330 --> 00:25:23,370
what users know or think they know about

00:25:20,309 --> 00:25:25,290
a system and understanding each person's

00:25:23,370 --> 00:25:26,910
mental model of styling can help clear

00:25:25,290 --> 00:25:29,070
up misunderstandings and foster

00:25:26,910 --> 00:25:30,870
productive conversations I think really

00:25:29,070 --> 00:25:34,770
having a good idea of how each person

00:25:30,870 --> 00:25:37,230
sees styling so that you can speak to

00:25:34,770 --> 00:25:44,160
their view on it a little bit better can

00:25:37,230 --> 00:25:45,630
help you in those conversations and I

00:25:44,160 --> 00:25:47,160
think it's also important to acknowledge

00:25:45,630 --> 00:25:49,320
the different skill levels on the team

00:25:47,160 --> 00:25:51,120
so if there's a mixture of skill levels

00:25:49,320 --> 00:25:52,830
as I said a lot of times you have

00:25:51,120 --> 00:25:55,320
designers that are implementing your CSS

00:25:52,830 --> 00:25:58,620
and may not be as comfortable in

00:25:55,320 --> 00:26:01,160
JavaScript simplicity and clarity can

00:25:58,620 --> 00:26:03,540
really help everyone stay together and

00:26:01,160 --> 00:26:05,670
if you're a group of highly skilled devs

00:26:03,540 --> 00:26:07,350
then I think introducing complexity or

00:26:05,670 --> 00:26:12,900
new technologies probably won't pose

00:26:07,350 --> 00:26:15,570
that much of a problem and then what do

00:26:12,900 --> 00:26:17,220
you need to build make sure you

00:26:15,570 --> 00:26:19,500
understand what you actually need to

00:26:17,220 --> 00:26:20,970
build there's a lot of pressure in our

00:26:19,500 --> 00:26:22,590
industry to know the latest framework

00:26:20,970 --> 00:26:24,900
the latest language or whatever tech is

00:26:22,590 --> 00:26:26,850
making the rounds today and it can be

00:26:24,900 --> 00:26:30,120
really tempting to jump on the latest

00:26:26,850 --> 00:26:31,890
technology so before adding libraries

00:26:30,120 --> 00:26:34,590
and building complex styling systems to

00:26:31,890 --> 00:26:36,870
accommodate theming and reusability make

00:26:34,590 --> 00:26:39,150
sure there's something you actually need

00:26:36,870 --> 00:26:43,950
startled as simply as possible and build

00:26:39,150 --> 00:26:46,950
from there and then how do you plan on

00:26:43,950 --> 00:26:49,380
structuring your project react is not

00:26:46,950 --> 00:26:50,970
opinionated about project structure so

00:26:49,380 --> 00:26:52,080
understanding how you want to structure

00:26:50,970 --> 00:26:53,910
your project is going to help you

00:26:52,080 --> 00:26:55,169
determine the style method that's going

00:26:53,910 --> 00:26:57,240
to work best for you and the rest of

00:26:55,169 --> 00:26:58,710
your team will contain our components

00:26:57,240 --> 00:26:59,820
live separately from presentational

00:26:58,710 --> 00:27:02,490
components are they going to be kept

00:26:59,820 --> 00:27:04,200
together will you have the need for

00:27:02,490 --> 00:27:06,030
access to global Styles is that

00:27:04,200 --> 00:27:08,370
something that you anticipate having to

00:27:06,030 --> 00:27:10,049
have and these are just a couple of

00:27:08,370 --> 00:27:11,700
considerations so think about these

00:27:10,049 --> 00:27:17,250
things before you jump into making that

00:27:11,700 --> 00:27:20,419
styling decision even more importantly I

00:27:17,250 --> 00:27:20,419
think is to create the right environment

00:27:20,600 --> 00:27:26,160
building things successfully requires

00:27:23,940 --> 00:27:28,679
more than the right technology it really

00:27:26,160 --> 00:27:29,850
does require the right environment and I

00:27:28,679 --> 00:27:30,980
think there are four ingredients to

00:27:29,850 --> 00:27:34,980
making that happen

00:27:30,980 --> 00:27:37,169
first avoid dogma at all costs taking

00:27:34,980 --> 00:27:38,730
extreme positions on a subject creates

00:27:37,169 --> 00:27:41,870
tension and defensiveness before

00:27:38,730 --> 00:27:41,870
conversations even get started

00:27:42,590 --> 00:27:48,419
build trust taking risks is really hard

00:27:46,290 --> 00:27:52,190
to do and it's even harder if you don't

00:27:48,419 --> 00:27:52,190
trust the people you're doing it with I

00:27:52,790 --> 00:27:57,900
think you need to embrace change

00:27:55,410 --> 00:28:00,480
whenever you feel the urge to push back

00:27:57,900 --> 00:28:02,220
on something lean in instead and you'll

00:28:00,480 --> 00:28:03,450
be surprised at what you'll learn and

00:28:02,220 --> 00:28:07,740
how many friends are gonna make along

00:28:03,450 --> 00:28:09,900
the way I think lastly you need to be

00:28:07,740 --> 00:28:11,580
vulnerable it's ok to say you don't

00:28:09,900 --> 00:28:13,830
understand something or that you don't

00:28:11,580 --> 00:28:15,570
see the benefit in it being honest

00:28:13,830 --> 00:28:17,130
builds trust and opens the opportunity

00:28:15,570 --> 00:28:23,070
up for greater understanding for

00:28:17,130 --> 00:28:26,040
everyone on the team and I think it's

00:28:23,070 --> 00:28:28,140
also important to to remember I love

00:28:26,040 --> 00:28:31,169
this quote having a thoughtful

00:28:28,140 --> 00:28:33,030
understanding of CSS to begin with

00:28:31,169 --> 00:28:35,070
is going to help you build greater

00:28:33,030 --> 00:28:38,790
things so whether you do it using CSS

00:28:35,070 --> 00:28:40,500
sass less or CSS and GIS understanding

00:28:38,790 --> 00:28:45,980
what you're what you're building and and

00:28:40,500 --> 00:28:45,980
how to use it is very important

00:28:46,420 --> 00:28:58,459
thank you

00:28:48,430 --> 00:28:58,459

YouTube URL: https://www.youtube.com/watch?v=V-flI7ui52M


