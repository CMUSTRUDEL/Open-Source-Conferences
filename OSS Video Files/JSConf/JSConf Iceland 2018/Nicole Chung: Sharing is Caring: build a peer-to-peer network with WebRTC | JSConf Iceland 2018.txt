Title: Nicole Chung: Sharing is Caring: build a peer-to-peer network with WebRTC | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/nicole-chung/

Yes, it’s still experimental, but you can build a peer-to-peer real-time connection using WebRTC - a connection that shares audio, video, files in a fast, highly secure, decentralized manner.

In this talk, we will cover how to open up a peer connection using JavaScript, and how to transmit data via a data channel.

We will demystify the underlying technologies of the WebRTC protocols (STUN and TURN for example) and show you that it’s possible to store files in a safe, highly secure and decentralized way.
Captions: 
	00:00:01,700 --> 00:00:08,370
hi can everyone hear me yeah okay cool

00:00:05,690 --> 00:00:10,920
today I'm gonna be talking about sharing

00:00:08,370 --> 00:00:13,049
is caring and in particular how you can

00:00:10,920 --> 00:00:15,450
use our browsers to share with other

00:00:13,049 --> 00:00:18,359
browsers using a technology called web

00:00:15,450 --> 00:00:20,279
RTC RT C stands for real-time

00:00:18,359 --> 00:00:23,130
communication and it could be real-time

00:00:20,279 --> 00:00:27,420
communication of audio video and other

00:00:23,130 --> 00:00:30,029
kinds of files a few things I want to

00:00:27,420 --> 00:00:32,250
cover today are a bit of the contrast of

00:00:30,029 --> 00:00:33,690
what we do in our day to day work for me

00:00:32,250 --> 00:00:35,489
most of the time I'm writing code for

00:00:33,690 --> 00:00:37,320
the client or I'm writing code for a

00:00:35,489 --> 00:00:39,390
server so I'm used to writing code that

00:00:37,320 --> 00:00:42,079
involves sending out requests and

00:00:39,390 --> 00:00:44,190
getting back responses from a server

00:00:42,079 --> 00:00:46,289
some other people might be used to

00:00:44,190 --> 00:00:48,450
writing code like WebSocket code which

00:00:46,289 --> 00:00:51,059
is bi-directional communication between

00:00:48,450 --> 00:00:52,920
a server and a browser where a server

00:00:51,059 --> 00:00:56,879
can actually push information over to a

00:00:52,920 --> 00:00:59,370
browser so this is makes up most of the

00:00:56,879 --> 00:01:02,309
websites we use so why do we really need

00:00:59,370 --> 00:01:06,570
something like WebRTC well the thing is

00:01:02,309 --> 00:01:08,400
once upon a time a long time ago it used

00:01:06,570 --> 00:01:11,729
to take a really long time to download

00:01:08,400 --> 00:01:15,259
files it would take a really really long

00:01:11,729 --> 00:01:17,759
time to download a song and then so we

00:01:15,259 --> 00:01:19,950
people came up with peer-to-peer

00:01:17,759 --> 00:01:22,470
technologies that allowed people to

00:01:19,950 --> 00:01:24,210
share files quickly and easily so if I

00:01:22,470 --> 00:01:26,850
had part of a song and someone had a

00:01:24,210 --> 00:01:29,340
part of the same song we can sort of

00:01:26,850 --> 00:01:32,790
share those parts and then that would

00:01:29,340 --> 00:01:34,070
just result in a faster download we sort

00:01:32,790 --> 00:01:36,990
of forgot about that

00:01:34,070 --> 00:01:38,520
when stuff like YouTube came up and our

00:01:36,990 --> 00:01:40,860
internet connections got faster and

00:01:38,520 --> 00:01:44,040
servers became way more efficient but

00:01:40,860 --> 00:01:46,439
right now the thing is out of our

00:01:44,040 --> 00:01:49,380
Internet traffic 70 percent of that is

00:01:46,439 --> 00:01:50,790
now streaming video so it's gonna become

00:01:49,380 --> 00:01:52,470
an issue when we start having millions

00:01:50,790 --> 00:01:55,110
and millions of people watching the same

00:01:52,470 --> 00:01:57,899
episode of Game of Thrones or trying to

00:01:55,110 --> 00:01:59,640
download the same file so there are new

00:01:57,899 --> 00:02:02,070
companies coming out such as pear 5

00:01:59,640 --> 00:02:04,140
which are using WebRTC technologies in

00:02:02,070 --> 00:02:06,619
order to help people share and download

00:02:04,140 --> 00:02:09,720
those files faster it helps people

00:02:06,619 --> 00:02:11,400
stream video at better quality if they

00:02:09,720 --> 00:02:13,770
happen to be in Australia but the server

00:02:11,400 --> 00:02:15,930
for that video happens to be in London

00:02:13,770 --> 00:02:18,060
Technologies like pr5 will enable that

00:02:15,930 --> 00:02:21,960
person to watch that video as if it's a

00:02:18,060 --> 00:02:24,600
seamless experience another use of what

00:02:21,960 --> 00:02:26,670
RTC is web torrent web torrent works

00:02:24,600 --> 00:02:29,400
with the BitTorrent protocol in order to

00:02:26,670 --> 00:02:31,800
help you stream video files right into

00:02:29,400 --> 00:02:33,540
your browser so instead of you having to

00:02:31,800 --> 00:02:34,920
use something like transmission or

00:02:33,540 --> 00:02:37,170
utorrent or any sort of BitTorrent

00:02:34,920 --> 00:02:40,760
client you can just go to like a really

00:02:37,170 --> 00:02:43,550
beautiful web page and watch that file

00:02:40,760 --> 00:02:46,740
people kind of worry about bit torrents

00:02:43,550 --> 00:02:48,630
they kind of associated with privacy but

00:02:46,740 --> 00:02:51,150
it's actually possible now like inter

00:02:48,630 --> 00:02:53,250
Ledger's doing demos where you can like

00:02:51,150 --> 00:02:55,620
actually have micro payments associated

00:02:53,250 --> 00:02:58,740
to a bit torrent download you can attach

00:02:55,620 --> 00:03:00,750
metadata to an mp3 or a video file and

00:02:58,740 --> 00:03:02,190
people can pay as they're streaming and

00:03:00,750 --> 00:03:06,930
downloading your file even though it's

00:03:02,190 --> 00:03:10,380
peer-to-peer so back to the whole

00:03:06,930 --> 00:03:11,160
WebSockets thing we when we do

00:03:10,380 --> 00:03:12,630
WebSockets

00:03:11,160 --> 00:03:14,730
it's almost stuff like push

00:03:12,630 --> 00:03:17,940
notifications and it sends little bits

00:03:14,730 --> 00:03:21,180
of data in order web RTC doesn't care

00:03:17,940 --> 00:03:23,880
about dropping packets it just sends

00:03:21,180 --> 00:03:25,830
everything in a big big stream so it's a

00:03:23,880 --> 00:03:28,200
big stream of video it's a big stream of

00:03:25,830 --> 00:03:29,550
data for online game you're playing if

00:03:28,200 --> 00:03:31,080
you lose a packet that's not the

00:03:29,550 --> 00:03:32,340
important part the important part is

00:03:31,080 --> 00:03:37,110
that you get most of the data you need

00:03:32,340 --> 00:03:40,380
at the right time so again back to peer

00:03:37,110 --> 00:03:42,900
to peer web mercy see the browser

00:03:40,380 --> 00:03:44,990
support is getting better and better it

00:03:42,900 --> 00:03:48,380
used to just be for Chrome and Firefox

00:03:44,990 --> 00:03:50,790
but now it's also for edge and Safari

00:03:48,380 --> 00:03:54,090
most of the time it's recommended that

00:03:50,790 --> 00:03:56,490
use a shim called adapter Jas to account

00:03:54,090 --> 00:04:01,440
for slightly different names or naming

00:03:56,490 --> 00:04:03,150
in the API between browsers one thing

00:04:01,440 --> 00:04:06,240
I'm going to spend a lot of time on is

00:04:03,150 --> 00:04:09,330
how to connect the pairs so the thing

00:04:06,240 --> 00:04:10,890
with WebRTC is that browsers and

00:04:09,330 --> 00:04:13,250
computers are very good at sharing data

00:04:10,890 --> 00:04:15,230
but they're not very good about caring

00:04:13,250 --> 00:04:17,459
meaning they're not very good about

00:04:15,230 --> 00:04:20,040
caring about each other or finding each

00:04:17,459 --> 00:04:21,810
other so in order to connect to pairs we

00:04:20,040 --> 00:04:23,760
have to talk about a lot of technical

00:04:21,810 --> 00:04:26,880
terms I'm going to touch on really

00:04:23,760 --> 00:04:34,850
quickly such as SDP

00:04:26,880 --> 00:04:40,410
offers answers IP addresses ports

00:04:34,850 --> 00:04:42,780
routers firewalls ice the interactive

00:04:40,410 --> 00:04:44,340
connectivity establishment different

00:04:42,780 --> 00:04:47,850
kinds of ice servers such as stun

00:04:44,340 --> 00:04:50,580
session traversal utilities for not turn

00:04:47,850 --> 00:04:52,500
traversal relay using that and then I'm

00:04:50,580 --> 00:04:54,270
just going to very quickly touch on the

00:04:52,500 --> 00:04:56,580
data channel which is available through

00:04:54,270 --> 00:04:58,140
an rtcpeerconnection the data channel is

00:04:56,580 --> 00:05:01,680
what allows us to share data with each

00:04:58,140 --> 00:05:04,740
other so the first part making a

00:05:01,680 --> 00:05:07,350
connection we take making a connection

00:05:04,740 --> 00:05:09,270
for granted most of us we have eyes we

00:05:07,350 --> 00:05:11,070
have ears if we see another person on

00:05:09,270 --> 00:05:13,440
the street it's very easy for us to

00:05:11,070 --> 00:05:15,330
connect with another person we just

00:05:13,440 --> 00:05:17,430
start talking to them they can hear us

00:05:15,330 --> 00:05:19,700
they start talking back and we've made a

00:05:17,430 --> 00:05:19,700
connection

00:05:20,030 --> 00:05:24,480
however for computers it's not that easy

00:05:22,860 --> 00:05:27,360
computers don't know how to find other

00:05:24,480 --> 00:05:29,760
computers computers are pretty familiar

00:05:27,360 --> 00:05:31,620
with finding websites you just tell a

00:05:29,760 --> 00:05:33,840
computer to go to a certain domain and

00:05:31,620 --> 00:05:35,970
that domain is associated with an IP

00:05:33,840 --> 00:05:39,360
address and a port and that way the

00:05:35,970 --> 00:05:40,770
computer can find the website so that

00:05:39,360 --> 00:05:43,170
kind of thing your computer is pretty

00:05:40,770 --> 00:05:44,700
comfortable with but there's things that

00:05:43,170 --> 00:05:47,100
the computer doesn't even know about its

00:05:44,700 --> 00:05:50,790
own self your computer doesn't even know

00:05:47,100 --> 00:05:55,080
its own IP address which we're going to

00:05:50,790 --> 00:05:58,290
talk about in a bit so I lied a bit at

00:05:55,080 --> 00:05:59,670
the beginning WebRTC is peer-to-peer but

00:05:58,290 --> 00:06:02,100
you actually need servers to help

00:05:59,670 --> 00:06:03,420
connect those peers those servers don't

00:06:02,100 --> 00:06:04,710
need to know anything about your peers

00:06:03,420 --> 00:06:06,450
and they don't need to store any data

00:06:04,710 --> 00:06:08,880
that those peers are exchanging with you

00:06:06,450 --> 00:06:11,760
we cheat the other yeah but they need

00:06:08,880 --> 00:06:14,910
those servers help make a connection so

00:06:11,760 --> 00:06:17,370
an example here we need to do a lot of

00:06:14,910 --> 00:06:18,930
this thing called signaling so at the

00:06:17,370 --> 00:06:21,630
beginning of the connection the two

00:06:18,930 --> 00:06:23,310
pairs do a lot of signaling and then

00:06:21,630 --> 00:06:26,070
once the signaling is done and they're

00:06:23,310 --> 00:06:28,970
connected it's almost like the signaling

00:06:26,070 --> 00:06:28,970
server can follow away

00:06:32,260 --> 00:06:36,380
so signaling starts off with this thing

00:06:34,820 --> 00:06:39,380
called a session description protocol

00:06:36,380 --> 00:06:42,260
this is the almost the equivalent of

00:06:39,380 --> 00:06:45,230
like just finding out if anyone's out

00:06:42,260 --> 00:06:47,660
there so a computer needs to find out if

00:06:45,230 --> 00:06:49,460
another computers out there they make up

00:06:47,660 --> 00:06:53,060
a session description protocol and send

00:06:49,460 --> 00:06:56,120
it out so this is sent out in the form

00:06:53,060 --> 00:06:58,250
of an offer the offer goes through the

00:06:56,120 --> 00:07:01,310
router through the signaling server and

00:06:58,250 --> 00:07:03,050
then reaches the other pair the pair

00:07:01,310 --> 00:07:05,720
accepts the remote offer and then they

00:07:03,050 --> 00:07:07,220
store it as a remote description once

00:07:05,720 --> 00:07:11,030
they've done that they create another

00:07:07,220 --> 00:07:14,240
part SDP called an answer and then that

00:07:11,030 --> 00:07:17,150
answer is sent out on the network and it

00:07:14,240 --> 00:07:21,320
goes through the signaling server and it

00:07:17,150 --> 00:07:23,120
goes back to the other pair so the pair

00:07:21,320 --> 00:07:25,040
accepts the remote answer and sets it as

00:07:23,120 --> 00:07:27,940
the remote description however at this

00:07:25,040 --> 00:07:31,400
point we've sent offer we sent an answer

00:07:27,940 --> 00:07:33,800
but a connection between the two pairs

00:07:31,400 --> 00:07:35,690
haven't been made yet so all they know

00:07:33,800 --> 00:07:37,430
at this point is that someone is sending

00:07:35,690 --> 00:07:38,780
out an offer someone's ready to accept

00:07:37,430 --> 00:07:40,370
that offer they want to make a

00:07:38,780 --> 00:07:42,350
connection but they still don't know how

00:07:40,370 --> 00:07:44,000
to make the connection and they make

00:07:42,350 --> 00:07:48,260
this connection by doing something we

00:07:44,000 --> 00:07:50,030
call exchanging ice candidates so this

00:07:48,260 --> 00:07:54,500
is a little complicated I'm going to

00:07:50,030 --> 00:07:56,510
start at the beginning so basically the

00:07:54,500 --> 00:07:58,180
computer knows that there's someone else

00:07:56,510 --> 00:08:00,560
out there that they want to connect with

00:07:58,180 --> 00:08:03,050
but they don't actually know where that

00:08:00,560 --> 00:08:05,000
other computer is and in fact like I

00:08:03,050 --> 00:08:07,970
mentioned the computer doesn't even know

00:08:05,000 --> 00:08:10,220
where they are computers connect to

00:08:07,970 --> 00:08:13,130
other computers by this thing called IP

00:08:10,220 --> 00:08:17,300
addresses imports but because of our

00:08:13,130 --> 00:08:19,850
routers we only know our private IP when

00:08:17,300 --> 00:08:22,040
we're on a home network to connect with

00:08:19,850 --> 00:08:24,020
another pair we need to know our public

00:08:22,040 --> 00:08:27,080
IP and we also need to know the peers

00:08:24,020 --> 00:08:29,870
public IP and this whole thing about

00:08:27,080 --> 00:08:32,270
only nosing your private IP is something

00:08:29,870 --> 00:08:33,920
called NAT which is basically a

00:08:32,270 --> 00:08:36,020
technical term for hiding your address

00:08:33,920 --> 00:08:37,970
from you the other thing we have to

00:08:36,020 --> 00:08:40,430
worry about in order in other in

00:08:37,970 --> 00:08:44,140
addition to this thing called NAT is we

00:08:40,430 --> 00:08:44,140
have to know a tiny bit about firewalls

00:08:44,240 --> 00:08:48,709
so the thing with firewalls is that

00:08:46,040 --> 00:08:49,939
firewalls block ports and to connect

00:08:48,709 --> 00:08:52,160
with another parent we need to know

00:08:49,939 --> 00:08:55,610
their public IP and we also need to know

00:08:52,160 --> 00:08:57,079
their port so how do we get around these

00:08:55,610 --> 00:09:00,589
issues with our routers and our

00:08:57,079 --> 00:09:01,999
firewalls how do we get around that so

00:09:00,589 --> 00:09:04,490
the two computers can actually make a

00:09:01,999 --> 00:09:06,379
connection we get around these with

00:09:04,490 --> 00:09:08,199
something called ice the in turn

00:09:06,379 --> 00:09:10,699
interactive connectivity establishment

00:09:08,199 --> 00:09:13,249
it's a framework for getting two pairs

00:09:10,699 --> 00:09:16,309
to connect to each other and ice has two

00:09:13,249 --> 00:09:19,100
kinds of servers one of them is a sun's

00:09:16,309 --> 00:09:21,259
stun server which is session traversal

00:09:19,100 --> 00:09:24,259
utilities for NAT and the other kind of

00:09:21,259 --> 00:09:28,279
server is a turn server which is

00:09:24,259 --> 00:09:31,879
traversal using relay net so a few quick

00:09:28,279 --> 00:09:34,009
things about these servers the stun

00:09:31,879 --> 00:09:36,559
server is often free there's lots

00:09:34,009 --> 00:09:38,749
available and when you're using a stun

00:09:36,559 --> 00:09:41,720
server you're only exchanging maybe 10

00:09:38,749 --> 00:09:43,819
kilobytes of information at a time so

00:09:41,720 --> 00:09:45,429
the cost is next to nothing people

00:09:43,819 --> 00:09:48,319
usually give out Sun servers for free

00:09:45,429 --> 00:09:50,029
turn servers are used to relay media in

00:09:48,319 --> 00:09:52,279
case your peer-to-peer connection isn't

00:09:50,029 --> 00:09:53,899
strong enough and because it's relaying

00:09:52,279 --> 00:09:57,799
media and large amounts of files turn

00:09:53,899 --> 00:09:59,449
servers can be quite expensive so the

00:09:57,799 --> 00:10:00,769
thing with these ice servers is that

00:09:59,449 --> 00:10:03,259
these ice servers give you ice

00:10:00,769 --> 00:10:05,329
candidates so while that whole offer

00:10:03,259 --> 00:10:07,819
answer process is going on that I spoke

00:10:05,329 --> 00:10:10,639
about earlier at the same time these

00:10:07,819 --> 00:10:15,889
pairs are also like making a connection

00:10:10,639 --> 00:10:18,799
to often a stun server so the stun

00:10:15,889 --> 00:10:20,779
server they get ice candidates from the

00:10:18,799 --> 00:10:23,329
stun server and the main purpose of a

00:10:20,779 --> 00:10:25,819
stun server is to find out your IP so

00:10:23,329 --> 00:10:29,329
the stun server tells the peer what

00:10:25,819 --> 00:10:32,360
their IP is and it gets sent back to the

00:10:29,329 --> 00:10:35,720
peer once they have some candidates

00:10:32,360 --> 00:10:38,540
ready the pair's exchange candidates by

00:10:35,720 --> 00:10:41,089
the signaling server and then that's how

00:10:38,540 --> 00:10:43,819
they reach each other and once they find

00:10:41,089 --> 00:10:47,119
enough ice candidates they have a

00:10:43,819 --> 00:10:51,649
connection so it's kind of a complicated

00:10:47,119 --> 00:10:53,089
process but there is that's the that's

00:10:51,649 --> 00:10:55,069
the gist of it you have to send out

00:10:53,089 --> 00:10:56,749
offers you have to send out answers and

00:10:55,069 --> 00:10:57,890
you have to exchange ice candidates in

00:10:56,749 --> 00:11:01,610
order to make

00:10:57,890 --> 00:11:03,290
connection sometimes son servers aren't

00:11:01,610 --> 00:11:05,660
enough to give you a valid ice candidate

00:11:03,290 --> 00:11:08,450
this happens when your router employs a

00:11:05,660 --> 00:11:10,310
restriction called symmetric net also

00:11:08,450 --> 00:11:12,890
like I said earlier when you're reeling

00:11:10,310 --> 00:11:15,110
large amounts of data you can't rely on

00:11:12,890 --> 00:11:17,920
stun alone so this is where the turn

00:11:15,110 --> 00:11:21,200
servers come in if anyone's ever used

00:11:17,920 --> 00:11:24,050
videoconferencing in slack slack uses

00:11:21,200 --> 00:11:28,490
WebRTC and they rely almost entirely on

00:11:24,050 --> 00:11:30,620
turn servers so one thing I want to talk

00:11:28,490 --> 00:11:34,250
about really quickly is troubleshooting

00:11:30,620 --> 00:11:35,810
before I dive into the code just kind of

00:11:34,250 --> 00:11:38,450
like my experiences like working with

00:11:35,810 --> 00:11:42,190
WebRTC and issues I've come into contact

00:11:38,450 --> 00:11:45,560
with so the first thing I discovered is

00:11:42,190 --> 00:11:47,990
WebRTC as of last couple years I think

00:11:45,560 --> 00:11:49,070
it requires a secure connection so even

00:11:47,990 --> 00:11:51,019
though you're just writing maybe

00:11:49,070 --> 00:11:52,850
client-side code you have to make sure

00:11:51,019 --> 00:11:55,220
that you have a certificate and you have

00:11:52,850 --> 00:11:56,720
to make sure it's HTTPS especially for

00:11:55,220 --> 00:11:59,300
some of the api's such as getusermedia

00:11:56,720 --> 00:12:00,800
which takes control of a user's camera

00:11:59,300 --> 00:12:02,839
like if you're controlling someone's

00:12:00,800 --> 00:12:04,390
camera or their microphone you want to

00:12:02,839 --> 00:12:06,769
make sure you're sending out whatever

00:12:04,390 --> 00:12:09,920
video stream you're getting from them in

00:12:06,769 --> 00:12:11,870
a secure encrypted connection because

00:12:09,920 --> 00:12:13,370
your client-side code is secure though

00:12:11,870 --> 00:12:16,459
whatever you're using for your signaling

00:12:13,370 --> 00:12:18,589
and WebRTC doesn't you can use sip or

00:12:16,459 --> 00:12:20,300
you can use WebSockets for whatever

00:12:18,589 --> 00:12:22,220
you're using for signaling also has to

00:12:20,300 --> 00:12:24,170
be secure so depending on how

00:12:22,220 --> 00:12:26,480
comfortable you're comfortable you are

00:12:24,170 --> 00:12:28,100
with setting up a TLS certificate I

00:12:26,480 --> 00:12:29,540
think if you're just like messing around

00:12:28,100 --> 00:12:31,880
you're just starting you just want to

00:12:29,540 --> 00:12:34,190
make something basic and WebRTC to feel

00:12:31,880 --> 00:12:37,190
find out if you like it or not I would

00:12:34,190 --> 00:12:39,440
stick with using firebase for your kind

00:12:37,190 --> 00:12:43,010
of first kind of messing around the

00:12:39,440 --> 00:12:45,050
other thing I found out is like in my

00:12:43,010 --> 00:12:47,589
personal experience I think Firefox is a

00:12:45,050 --> 00:12:50,810
lot better to do WebRTC development in

00:12:47,589 --> 00:12:52,990
the developer the internal WebRTC tool

00:12:50,810 --> 00:12:55,310
is a lot more user friendly it has logs

00:12:52,990 --> 00:12:59,269
it tells you if the offers being sent

00:12:55,310 --> 00:13:01,070
out and received correctly I know that

00:12:59,269 --> 00:13:02,630
Chrome is like kind of pushing WebRTC

00:13:01,070 --> 00:13:04,220
and it's probably like I'd had in terms

00:13:02,630 --> 00:13:06,620
of the technology available but I just

00:13:04,220 --> 00:13:11,240
find Firefox was a little more friendly

00:13:06,620 --> 00:13:13,820
to do development in another thing I

00:13:11,240 --> 00:13:15,589
didn't know when I first started messing

00:13:13,820 --> 00:13:16,700
around with making peer connections like

00:13:15,589 --> 00:13:18,680
rtcpeerconnection

00:13:16,700 --> 00:13:21,370
is that you can only send signals

00:13:18,680 --> 00:13:24,170
between two pair connections at a time

00:13:21,370 --> 00:13:27,230
if you try to do something like this

00:13:24,170 --> 00:13:29,360
it's not going to work if you're kind of

00:13:27,230 --> 00:13:30,740
trying to broadcast messages from one

00:13:29,360 --> 00:13:32,720
pair connection out to two pair

00:13:30,740 --> 00:13:35,209
connections you're getting get all sorts

00:13:32,720 --> 00:13:37,459
of errors and the problem with these

00:13:35,209 --> 00:13:39,529
errors is that those errors are

00:13:37,459 --> 00:13:41,540
misleading that's not actually what's

00:13:39,529 --> 00:13:42,920
going wrong with your peer connection

00:13:41,540 --> 00:13:44,990
you're not sending out the wrong thing

00:13:42,920 --> 00:13:46,610
in the wrong state it's not that you're

00:13:44,990 --> 00:13:48,529
missing a turn server that your turn

00:13:46,610 --> 00:13:51,320
server is broken it's actually because

00:13:48,529 --> 00:13:53,209
you're sending out the wrong message to

00:13:51,320 --> 00:13:55,339
the wrong peer and it's getting confused

00:13:53,209 --> 00:13:57,290
so you have to be really careful

00:13:55,339 --> 00:13:59,990
whenever you're architecting or

00:13:57,290 --> 00:14:02,149
designing your signaling system to kind

00:13:59,990 --> 00:14:03,860
of keep things like unique IDs and make

00:14:02,149 --> 00:14:08,029
sure you're sending out the message to

00:14:03,860 --> 00:14:10,760
the exact pair the other thing I found

00:14:08,029 --> 00:14:12,380
like in my personal experience is that a

00:14:10,760 --> 00:14:15,500
lot of the tutorials are pretty

00:14:12,380 --> 00:14:17,779
misleading often you see the remote pair

00:14:15,500 --> 00:14:19,640
and the local pair they're often shown

00:14:17,779 --> 00:14:21,529
in the same script so you'll see

00:14:19,640 --> 00:14:25,160
something like this in the Mozilla Docs

00:14:21,529 --> 00:14:27,230
and you see that local connection and

00:14:25,160 --> 00:14:29,149
the remote connection are kind of on the

00:14:27,230 --> 00:14:31,339
same page but really you almost have to

00:14:29,149 --> 00:14:33,560
have a mental model where you take that

00:14:31,339 --> 00:14:35,120
code you see in the tutorial and you rip

00:14:33,560 --> 00:14:37,339
out the remote connection and you keep

00:14:35,120 --> 00:14:38,990
that in a separate web page which is as

00:14:37,339 --> 00:14:40,250
you can imagine a little confusing here

00:14:38,990 --> 00:14:45,140
like you'd have to rewrite all your

00:14:40,250 --> 00:14:47,329
promise code another thing I want to

00:14:45,140 --> 00:14:49,760
briefly talk about I'm just going to

00:14:47,329 --> 00:14:51,680
show a bit of code now is that we I just

00:14:49,760 --> 00:14:54,649
spoke a lot about how this whole offer

00:14:51,680 --> 00:14:56,510
answer exchange process but I think like

00:14:54,649 --> 00:14:58,130
if you're just starting out it's good to

00:14:56,510 --> 00:15:00,350
have a library that sort of abstracts a

00:14:58,130 --> 00:15:03,079
lot of stuff like this away from you so

00:15:00,350 --> 00:15:07,880
I found it was really useful to use this

00:15:03,079 --> 00:15:09,740
library called simple peer so as you can

00:15:07,880 --> 00:15:12,500
see all you do is require the library

00:15:09,740 --> 00:15:14,270
you create a new pair so there always

00:15:12,500 --> 00:15:17,420
has to be one pair that sounds that the

00:15:14,270 --> 00:15:19,160
offer so if you have two pairs one pair

00:15:17,420 --> 00:15:20,810
has to be there to send out the offer so

00:15:19,160 --> 00:15:23,420
in this library you do that by setting

00:15:20,810 --> 00:15:24,990
the initiator to true and then you can

00:15:23,420 --> 00:15:27,540
just listen for

00:15:24,990 --> 00:15:29,040
these four events you can listen for the

00:15:27,540 --> 00:15:31,110
error so if there's any errors you can

00:15:29,040 --> 00:15:33,480
log it to see what's going on

00:15:31,110 --> 00:15:35,550
parents signal that usually happens when

00:15:33,480 --> 00:15:37,680
a pair is ready to send out an offer or

00:15:35,550 --> 00:15:41,070
an answer or send out some ice candidate

00:15:37,680 --> 00:15:43,410
information so in your signal event you

00:15:41,070 --> 00:15:44,880
just use your your firebase and you send

00:15:43,410 --> 00:15:48,209
out the messages you need to the correct

00:15:44,880 --> 00:15:50,790
pair on connect once you're connected

00:15:48,209 --> 00:15:52,380
all you have to do if you use a simple

00:15:50,790 --> 00:15:54,149
peer library if you want to use the data

00:15:52,380 --> 00:15:58,230
channel is just send stuff using the

00:15:54,149 --> 00:16:01,410
send method so and you can also handle

00:15:58,230 --> 00:16:04,440
incoming data here's some example

00:16:01,410 --> 00:16:06,000
firebase stuff it's if anyone's worked

00:16:04,440 --> 00:16:07,529
with firebase before I think the first

00:16:06,000 --> 00:16:10,399
three lines are first four lines they're

00:16:07,529 --> 00:16:13,500
pretty like familiar you import firebase

00:16:10,399 --> 00:16:14,790
in the config it's just you cut and

00:16:13,500 --> 00:16:16,440
paste what you get from the firebase

00:16:14,790 --> 00:16:19,230
website when you set up a new firebase

00:16:16,440 --> 00:16:21,300
database you initialize your app with

00:16:19,230 --> 00:16:22,860
your configuration and then you get a

00:16:21,300 --> 00:16:24,540
reference to your database and then when

00:16:22,860 --> 00:16:26,610
you want to send the message you just

00:16:24,540 --> 00:16:28,890
you just push that message to the

00:16:26,610 --> 00:16:31,079
database and if you do it with a unique

00:16:28,890 --> 00:16:33,029
ID the other peer knows like hey this

00:16:31,079 --> 00:16:34,920
message is from me based on the ID and

00:16:33,029 --> 00:16:36,570
I'll accept that message and I'll use

00:16:34,920 --> 00:16:42,570
that when I'm signaling and trying to

00:16:36,570 --> 00:16:44,820
find another pair so I have a simple

00:16:42,570 --> 00:16:50,070
file upload example here I'm just gonna

00:16:44,820 --> 00:16:52,380
kind of play an animation of it so this

00:16:50,070 --> 00:16:55,230
is a destination page it's connected to

00:16:52,380 --> 00:17:01,680
one user and then the data channel is

00:16:55,230 --> 00:17:04,439
sending cat pictures over and that's

00:17:01,680 --> 00:17:05,579
what it does it's just it's hard to see

00:17:04,439 --> 00:17:07,620
how this is different from like a

00:17:05,579 --> 00:17:09,540
regular file upload but really what's

00:17:07,620 --> 00:17:11,250
happening here is that instead of you

00:17:09,540 --> 00:17:13,020
uploading an image to like an s3 bucket

00:17:11,250 --> 00:17:15,059
and then displaying it on a web page

00:17:13,020 --> 00:17:18,589
this image is going directly from your

00:17:15,059 --> 00:17:18,589
browser to another person's browser

00:17:19,010 --> 00:17:24,209
so in summary WebRTC allows computers

00:17:22,470 --> 00:17:26,220
share media directly with other

00:17:24,209 --> 00:17:29,040
computers without an intermediary server

00:17:26,220 --> 00:17:30,600
however to connect two pairs you need to

00:17:29,040 --> 00:17:34,950
use some kind of signaling server and

00:17:30,600 --> 00:17:38,000
eye servers are required I just want to

00:17:34,950 --> 00:17:38,000
show one thing really quick

00:17:39,400 --> 00:17:48,580
might possibly need some okay here yeah

00:17:45,950 --> 00:17:51,350
okay so I'm just gonna make this bigger

00:17:48,580 --> 00:17:53,870
this is one thing I really like it's a

00:17:51,350 --> 00:17:56,390
little hard to see but if you if you go

00:17:53,870 --> 00:17:59,510
into Firefox and you type in about :

00:17:56,390 --> 00:18:04,910
WebRTC this pulls up your internal web

00:17:59,510 --> 00:18:12,800
RTC tools and if you go to web I'm just

00:18:04,910 --> 00:18:16,240
gonna go to web wait can I get some

00:18:12,800 --> 00:18:16,240
technical help just for a second

00:18:20,600 --> 00:18:31,600
hey just uh when I'm like you know what

00:18:48,230 --> 00:18:55,690
hmmm maybe I'll try can we just try this

00:19:06,980 --> 00:19:10,570
sorry just give me a minute

00:19:24,880 --> 00:19:35,860
always to connect it to a keyboard or

00:19:27,100 --> 00:19:37,300
some just okay so okay I was going to

00:19:35,860 --> 00:19:39,970
show a website to show how it worked

00:19:37,300 --> 00:19:41,380
with the internal web RTC tools but I

00:19:39,970 --> 00:19:43,900
think having a little bit of technical

00:19:41,380 --> 00:19:45,850
difficulty so that's it for my talk

00:19:43,900 --> 00:19:47,440
hopefully it's a good intro to WebRTC

00:19:45,850 --> 00:19:49,560
and some cool tools you can use to get

00:19:47,440 --> 00:19:56,950
up and running with it

00:19:49,560 --> 00:19:56,950

YouTube URL: https://www.youtube.com/watch?v=ZGPOQOLv1p0


