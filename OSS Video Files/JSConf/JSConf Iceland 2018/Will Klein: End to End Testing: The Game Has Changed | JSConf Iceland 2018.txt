Title: Will Klein: End to End Testing: The Game Has Changed | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/will-klein/

Testing our JavaScript apps has come a long way. For years we relied on Selenium Webdriver to automate browser testing from outside the browser. Now we can use tools like Cypress to interact from the same JavaScript runtime as our app, without relying on remote APIs, language bindings, or browser-specific drivers.

Let's explore how Cypress created a new testing platform to enable an awesome developer experience. This includes "native" debugging and time travel capabilities. We'll walkthrough using Cypress and how it all works, so we can deliver better, well-tested software.
Captions: 
	00:00:00,140 --> 00:00:09,719
okay whoo

00:00:04,430 --> 00:00:13,889
so I've got to talk about end-to-end

00:00:09,719 --> 00:00:17,100
testing and why the game has changed so

00:00:13,889 --> 00:00:20,070
I actually have a little story to share

00:00:17,100 --> 00:00:25,320
as well that's kind of personal but it

00:00:20,070 --> 00:00:27,449
means a lot to be here today so this is

00:00:25,320 --> 00:00:29,730
my name is will and this is my wife

00:00:27,449 --> 00:00:32,300
Diane five years ago we went to our

00:00:29,730 --> 00:00:35,550
first J s cough in Florida in the US

00:00:32,300 --> 00:00:37,290
this is us on Amelia Island it was a

00:00:35,550 --> 00:00:39,989
really great time and I really

00:00:37,290 --> 00:00:42,210
appreciated that J's cough welcomed not

00:00:39,989 --> 00:00:44,460
just us in the community but our

00:00:42,210 --> 00:00:46,260
significant others and our families I

00:00:44,460 --> 00:00:47,969
think it's really important to value

00:00:46,260 --> 00:00:52,230
that and I really appreciate that that

00:00:47,969 --> 00:00:54,180
tradition is continued here today I had

00:00:52,230 --> 00:00:56,640
a question at the time that I was trying

00:00:54,180 --> 00:00:59,609
to figure out the answer to how do you

00:00:56,640 --> 00:01:01,170
test your front-end I think we've got

00:00:59,609 --> 00:01:04,170
some really good answers about how to

00:01:01,170 --> 00:01:05,850
test our unit tests how to test our

00:01:04,170 --> 00:01:08,100
functions our classes and our UI

00:01:05,850 --> 00:01:09,540
components and isolation I think it

00:01:08,100 --> 00:01:11,880
becomes more difficult when we try to

00:01:09,540 --> 00:01:14,659
integrate that all these things and put

00:01:11,880 --> 00:01:19,229
it all together a lot can go wrong on

00:01:14,659 --> 00:01:21,840
whether it's our UI or our web api's or

00:01:19,229 --> 00:01:23,520
our back-end or our database or even our

00:01:21,840 --> 00:01:25,290
deployments when we put all those things

00:01:23,520 --> 00:01:26,939
together anything could break down and

00:01:25,290 --> 00:01:28,560
we could have all the unit tests in the

00:01:26,939 --> 00:01:31,710
world and they won't help us in those

00:01:28,560 --> 00:01:33,869
cases so the type of tests they try to

00:01:31,710 --> 00:01:35,729
exercise this are called end end tests

00:01:33,869 --> 00:01:40,470
testing things from one end all the way

00:01:35,729 --> 00:01:42,630
to the other and back I had a lot of

00:01:40,470 --> 00:01:47,850
really great conversations at the

00:01:42,630 --> 00:01:49,350
conference so I move my mouse off I had

00:01:47,850 --> 00:01:52,079
a lot of great conversations but once

00:01:49,350 --> 00:01:56,759
took out I met this person Nicholas ball

00:01:52,079 --> 00:01:58,920
and he talked to me for hours and little

00:01:56,759 --> 00:02:01,290
did I know but his wife was also at the

00:01:58,920 --> 00:02:02,820
conference Katrina and she was quickly

00:02:01,290 --> 00:02:04,740
becoming friends with my wife while we

00:02:02,820 --> 00:02:08,190
were hanging out talking about testing

00:02:04,740 --> 00:02:11,220
and he talked about all the tests that

00:02:08,190 --> 00:02:13,450
his team had written they had thousands

00:02:11,220 --> 00:02:15,640
and thousands of unit tests

00:02:13,450 --> 00:02:18,100
lots and lots of integration tests and

00:02:15,640 --> 00:02:19,780
maybe a thousand or so an N test which

00:02:18,100 --> 00:02:21,970
is quite a lot they were testing an

00:02:19,780 --> 00:02:25,569
enterprise app which is just an app that

00:02:21,970 --> 00:02:27,310
does way too many things and I was so

00:02:25,569 --> 00:02:28,990
impressed with all the things he had to

00:02:27,310 --> 00:02:31,090
say about their stack and their tools

00:02:28,990 --> 00:02:32,500
and all the effort they put in I applied

00:02:31,090 --> 00:02:34,270
to work at his company and a few months

00:02:32,500 --> 00:02:37,000
later my wife and I moved out to

00:02:34,270 --> 00:02:39,310
Colorado joined his team he and his wife

00:02:37,000 --> 00:02:42,819
helped us unload our moving truck twice

00:02:39,310 --> 00:02:45,340
and helped us settle in invited us over

00:02:42,819 --> 00:02:47,470
for the holidays and became close

00:02:45,340 --> 00:02:49,870
friends it was really awesome to have

00:02:47,470 --> 00:02:53,550
met them at the conference and and and

00:02:49,870 --> 00:02:53,550
now we hang out so much together today

00:03:01,900 --> 00:03:05,690
so when I joined this team I found there

00:03:04,430 --> 00:03:08,510
using a tool I was actually quite

00:03:05,690 --> 00:03:11,180
familiar with selenium so selenium is a

00:03:08,510 --> 00:03:13,220
tool written in Java that lets us test

00:03:11,180 --> 00:03:18,080
our apps from the point of view of the

00:03:13,220 --> 00:03:19,460
browser and it's it's a little bit old

00:03:18,080 --> 00:03:21,020
and but it's done a lot of wonderful

00:03:19,460 --> 00:03:23,360
things and so let's do something we

00:03:21,020 --> 00:03:25,820
might not otherwise be able to do the

00:03:23,360 --> 00:03:28,340
way it works is it's it's got this Java

00:03:25,820 --> 00:03:31,220
service that just listens for commands

00:03:28,340 --> 00:03:33,980
and you write test code in any language

00:03:31,220 --> 00:03:36,890
actually and more often than not not

00:03:33,980 --> 00:03:39,440
JavaScript and that language would

00:03:36,890 --> 00:03:41,420
usually use a library to speak the

00:03:39,440 --> 00:03:43,160
language of selenium the webdriver API

00:03:41,420 --> 00:03:44,450
it would send those commands to the

00:03:43,160 --> 00:03:46,010
service and the service would queue all

00:03:44,450 --> 00:03:48,760
these commands and would try to send

00:03:46,010 --> 00:03:52,370
them to any given browser real browsers

00:03:48,760 --> 00:03:54,770
and so there was just a number of

00:03:52,370 --> 00:03:57,320
different abstractions and integration

00:03:54,770 --> 00:03:59,810
and interfaces where things could go

00:03:57,320 --> 00:04:02,690
wrong it could be that your test code

00:03:59,810 --> 00:04:04,700
had an issue or using the API different

00:04:02,690 --> 00:04:06,350
and all the different API is to work

00:04:04,700 --> 00:04:07,519
with selenium in every language and even

00:04:06,350 --> 00:04:08,630
within JavaScript there's several

00:04:07,519 --> 00:04:11,450
choices they're all a little bit

00:04:08,630 --> 00:04:13,220
different those could have issues or you

00:04:11,450 --> 00:04:14,420
could be using it incorrectly the

00:04:13,220 --> 00:04:15,739
selenium service queuing up those

00:04:14,420 --> 00:04:18,080
commands and sending them to the browser

00:04:15,739 --> 00:04:20,060
drivers for each browser the browser

00:04:18,080 --> 00:04:21,320
drivers could have bugs there are a lot

00:04:20,060 --> 00:04:25,360
of ways where this could go off the

00:04:21,320 --> 00:04:25,360
rails just with this architecture

00:04:31,380 --> 00:04:37,800
so the greatest complexity of all is our

00:04:34,320 --> 00:04:40,200
app I find that as we write modern

00:04:37,800 --> 00:04:42,180
JavaScript apps we're doing a lot of

00:04:40,200 --> 00:04:44,040
things now in the browser we're making

00:04:42,180 --> 00:04:47,070
all these different API calls just when

00:04:44,040 --> 00:04:49,470
the page loads those come back in

00:04:47,070 --> 00:04:53,130
different timings different orders

00:04:49,470 --> 00:04:55,020
sometimes that can cause just different

00:04:53,130 --> 00:04:57,440
behaviors in our front-end whenever the

00:04:55,020 --> 00:05:00,240
user interacts with the API with our UI

00:04:57,440 --> 00:05:02,760
that makes more calls more things happen

00:05:00,240 --> 00:05:04,770
and all these happen things happen

00:05:02,760 --> 00:05:08,190
asynchronously

00:05:04,770 --> 00:05:09,690
so we are rendering m''d it could finish

00:05:08,190 --> 00:05:11,730
at any time and we don't really

00:05:09,690 --> 00:05:14,460
necessarily know when it is at least

00:05:11,730 --> 00:05:16,200
from our test codes point of view us as

00:05:14,460 --> 00:05:17,940
users as humans it's very intuitive to

00:05:16,200 --> 00:05:20,610
us but we run our test code it does

00:05:17,940 --> 00:05:23,100
exactly what we tell to do and if it's

00:05:20,610 --> 00:05:25,020
trying to if it clicks a button and then

00:05:23,100 --> 00:05:25,770
it starts to read render and we try to

00:05:25,020 --> 00:05:28,350
do the next thing

00:05:25,770 --> 00:05:29,910
we need to be very careful about knowing

00:05:28,350 --> 00:05:37,530
that it finished rendering or we might

00:05:29,910 --> 00:05:39,390
get something very unexpected so the

00:05:37,530 --> 00:05:41,220
greatest problem of all is when we take

00:05:39,390 --> 00:05:43,710
this selenium architecture and combine

00:05:41,220 --> 00:05:46,830
it with the complexity of our apps it's

00:05:43,710 --> 00:05:49,500
really a recipe for just frustration and

00:05:46,830 --> 00:05:50,970
what we'd find is we'd write a commit

00:05:49,500 --> 00:05:52,200
and we'd run tests locally and

00:05:50,970 --> 00:05:55,590
everything will look good we'd push it

00:05:52,200 --> 00:05:57,390
to the build and it would fail some

00:05:55,590 --> 00:06:00,150
tests would fail and usually in an

00:05:57,390 --> 00:06:01,710
end-to-end test and we'd run that build

00:06:00,150 --> 00:06:03,510
again because it was a test that we

00:06:01,710 --> 00:06:06,720
didn't even like shouldn't have broken

00:06:03,510 --> 00:06:08,790
and it would pass and we'd see this over

00:06:06,720 --> 00:06:10,500
and over again and we're different

00:06:08,790 --> 00:06:11,670
commits we just randomly failed this

00:06:10,500 --> 00:06:14,840
different tests and we call this

00:06:11,670 --> 00:06:16,740
flakiness and the problem might be

00:06:14,840 --> 00:06:18,540
something with a selenium architecture

00:06:16,740 --> 00:06:20,520
often it was a combination of that and

00:06:18,540 --> 00:06:22,290
just the complexity of our app working

00:06:20,520 --> 00:06:24,450
in different before with different

00:06:22,290 --> 00:06:26,880
performance characteristics particularly

00:06:24,450 --> 00:06:28,830
when we're on build environments they're

00:06:26,880 --> 00:06:30,750
virtualized you know they just things

00:06:28,830 --> 00:06:32,130
can slow down or the database anything

00:06:30,750 --> 00:06:34,740
could make it just work a little bit

00:06:32,130 --> 00:06:36,600
slower and one part of the stack at any

00:06:34,740 --> 00:06:39,479
given time and something will fail

00:06:36,600 --> 00:06:40,860
somewhere we ran into this so much we

00:06:39,479 --> 00:06:42,870
had a bill job that would just

00:06:40,860 --> 00:06:44,580
continuously run and check the latest

00:06:42,870 --> 00:06:45,060
commits on master and just run all the

00:06:44,580 --> 00:06:47,400
tests

00:06:45,060 --> 00:06:48,980
and it would just flush out dozens and

00:06:47,400 --> 00:06:51,870
dozens of tests that just failed a lot

00:06:48,980 --> 00:06:53,940
even with that we just kept tripping

00:06:51,870 --> 00:07:00,360
over this issue over and over again test

00:06:53,940 --> 00:07:02,820
it would just fail once in a while why

00:07:00,360 --> 00:07:04,920
do we keep doing this well these tests

00:07:02,820 --> 00:07:05,940
we found to be extremely valuable as I

00:07:04,920 --> 00:07:08,880
said before you could have all your

00:07:05,940 --> 00:07:10,460
tests in the world but if everything

00:07:08,880 --> 00:07:13,260
integrates that something breaks down

00:07:10,460 --> 00:07:14,940
you're gonna have a really bad time and

00:07:13,260 --> 00:07:15,450
and worst of all your users gonna have a

00:07:14,940 --> 00:07:17,000
bad time

00:07:15,450 --> 00:07:19,230
I mean this at the end of the day

00:07:17,000 --> 00:07:20,850
everything we do is about building a

00:07:19,230 --> 00:07:24,030
user experience building values so

00:07:20,850 --> 00:07:25,350
somebody can do their job or do that

00:07:24,030 --> 00:07:27,120
part of their life or make that one

00:07:25,350 --> 00:07:30,300
thing easier that gives them joy makes

00:07:27,120 --> 00:07:32,610
them happier or productive so we

00:07:30,300 --> 00:07:34,290
invested as much as we could into making

00:07:32,610 --> 00:07:37,260
this better I mentioned the flaky finer

00:07:34,290 --> 00:07:40,440
but we even tried to make our tests

00:07:37,260 --> 00:07:43,830
better in a lot of ways one example we

00:07:40,440 --> 00:07:47,460
we took we wrote some test helpers that

00:07:43,830 --> 00:07:49,410
would try command and if something

00:07:47,460 --> 00:07:51,870
didn't work right it would retry it a

00:07:49,410 --> 00:07:54,120
number of times or for a certain time

00:07:51,870 --> 00:07:56,040
out and this is called an implicit wait

00:07:54,120 --> 00:07:57,240
just building it into the API so you

00:07:56,040 --> 00:08:02,340
don't have to do that manual in your

00:07:57,240 --> 00:08:04,380
code so we also found that it helped to

00:08:02,340 --> 00:08:06,479
mock some service once in a while

00:08:04,380 --> 00:08:08,520
mock some services to test certain edge

00:08:06,479 --> 00:08:13,950
cases or certain scenarios large data

00:08:08,520 --> 00:08:15,810
things like that doing that we wrote our

00:08:13,950 --> 00:08:18,150
some of our own service mocking

00:08:15,810 --> 00:08:20,010
libraries to make that process easier we

00:08:18,150 --> 00:08:21,900
invest this as much as we could into

00:08:20,010 --> 00:08:23,729
making the developer experience of using

00:08:21,900 --> 00:08:26,220
our tests and writing our tests better

00:08:23,729 --> 00:08:37,710
so we keep doing it is despite how

00:08:26,220 --> 00:08:40,680
painful it was so after a while I joined

00:08:37,710 --> 00:08:44,190
a new team and got selenium up and

00:08:40,680 --> 00:08:46,800
running there and that went all right

00:08:44,190 --> 00:08:50,160
and ran some of the same issues and then

00:08:46,800 --> 00:08:52,890
just this past fall in October I was

00:08:50,160 --> 00:08:55,560
consulting on a project and we had run

00:08:52,890 --> 00:08:58,050
into a serious quality problem we didn't

00:08:55,560 --> 00:08:58,649
have a dedicated QA team and as much as

00:08:58,050 --> 00:09:00,809
we smoked

00:08:58,649 --> 00:09:03,480
appen every single commit there were

00:09:00,809 --> 00:09:04,740
always cases we missed and any given

00:09:03,480 --> 00:09:06,360
time something would stop working and

00:09:04,740 --> 00:09:08,759
you didn't know when it happened so we

00:09:06,360 --> 00:09:10,680
decided to write some more tests

00:09:08,759 --> 00:09:12,959
I pulled the story to write the N

00:09:10,680 --> 00:09:15,149
dentists and I pulled on selenium and

00:09:12,959 --> 00:09:17,220
the first thing I had to do on my year

00:09:15,149 --> 00:09:19,230
old MacBook was installed Java installed

00:09:17,220 --> 00:09:21,480
the JDK aside in have that and you need

00:09:19,230 --> 00:09:22,649
that for selenium I thought well I still

00:09:21,480 --> 00:09:25,470
I still wish this was written in

00:09:22,649 --> 00:09:31,679
JavaScript so the next tool I tried is

00:09:25,470 --> 00:09:33,329
Cypress and Cypress Cypress was

00:09:31,679 --> 00:09:36,809
something that I had actually held off

00:09:33,329 --> 00:09:38,819
on using for a while it been closed

00:09:36,809 --> 00:09:40,800
source up until I think May last year

00:09:38,819 --> 00:09:43,230
and it had been in a private beta until

00:09:40,800 --> 00:09:45,269
October and they had both a company

00:09:43,230 --> 00:09:47,240
around some of the premium CI features

00:09:45,269 --> 00:09:49,949
but you now that it's open-source

00:09:47,240 --> 00:09:52,619
everything that you need is just right

00:09:49,949 --> 00:09:54,389
up there on github if the if the team

00:09:52,619 --> 00:09:55,559
stopped doing what they're doing the

00:09:54,389 --> 00:09:58,410
community could pick it up and run with

00:09:55,559 --> 00:10:00,990
it so I'd really waited to use this

00:09:58,410 --> 00:10:03,059
until it was open freely available it

00:10:00,990 --> 00:10:05,279
was something I've you know wanted to

00:10:03,059 --> 00:10:10,589
use it was an MIT licensed and ready to

00:10:05,279 --> 00:10:14,040
go so I actually used it for just maybe

00:10:10,589 --> 00:10:16,740
two hours and I was honestly I was blown

00:10:14,040 --> 00:10:21,389
away I was so shocked by how different

00:10:16,740 --> 00:10:25,079
and better my developer experience was

00:10:21,389 --> 00:10:26,790
that I wrote a proposal to a conference

00:10:25,079 --> 00:10:35,129
after it's working for a couple hours

00:10:26,790 --> 00:10:36,929
and Here I am so I have a few demos I'm

00:10:35,129 --> 00:10:39,059
just gonna run through to show you how

00:10:36,929 --> 00:10:41,249
to install it set it up what some of the

00:10:39,059 --> 00:10:43,110
tests look like I don't wanna get too

00:10:41,249 --> 00:10:45,209
hung up on any of the syntax or any of

00:10:43,110 --> 00:10:47,670
the commands I just want to give you an

00:10:45,209 --> 00:10:49,799
idea of what it's like so the first

00:10:47,670 --> 00:10:53,730
thing you do is you just npm install it

00:10:49,799 --> 00:10:56,579
and this actually will do a download

00:10:53,730 --> 00:10:59,309
from one of their from their website and

00:10:56,579 --> 00:11:00,990
pull down the right-sized app there's an

00:10:59,309 --> 00:11:03,420
electron app involved so it's going to

00:11:00,990 --> 00:11:07,279
pull down based on your operating system

00:11:03,420 --> 00:11:07,279
and your CPU architecture

00:11:08,990 --> 00:11:13,550
next you open it and the first time you

00:11:11,720 --> 00:11:15,440
open it it kind of initializes some

00:11:13,550 --> 00:11:16,820
things and make sure it's verified and

00:11:15,440 --> 00:11:18,950
it's like the right thing and all and

00:11:16,820 --> 00:11:20,210
then when it runs there's this little

00:11:18,950 --> 00:11:22,610
pop-up saying hey to help get you

00:11:20,210 --> 00:11:25,070
started we put some files in the file

00:11:22,610 --> 00:11:29,150
system and you might want to take a look

00:11:25,070 --> 00:11:31,610
at that the files are basically examples

00:11:29,150 --> 00:11:33,020
this is just nice they there's an

00:11:31,610 --> 00:11:36,380
example like fixture

00:11:33,020 --> 00:11:41,270
there's example plugin custom commands'

00:11:36,380 --> 00:11:42,770
and an example spec and the example spec

00:11:41,270 --> 00:11:44,450
is just this kitchen sink of all the

00:11:42,770 --> 00:11:45,470
different commands you might want and it

00:11:44,450 --> 00:11:46,670
just gives you that quick reference

00:11:45,470 --> 00:11:48,350
right in the repo I mean you can go to

00:11:46,670 --> 00:11:50,420
their Docs but it's just all right there

00:11:48,350 --> 00:11:51,770
and it just kind of gets you gives you a

00:11:50,420 --> 00:11:56,470
little head start with what you might

00:11:51,770 --> 00:11:58,310
want to try to do the nice thing is it's

00:11:56,470 --> 00:12:01,160
from there it starts to get very

00:11:58,310 --> 00:12:03,800
familiar if you've ever done BDD style

00:12:01,160 --> 00:12:05,990
tests whether in jasmine or with mocha

00:12:03,800 --> 00:12:11,090
and chai the syntax is going to look

00:12:05,990 --> 00:12:15,710
very very familiar let me make this just

00:12:11,090 --> 00:12:19,610
a little bit bigger big oh yes I worked

00:12:15,710 --> 00:12:22,370
good all right cool all right so this is

00:12:19,610 --> 00:12:24,020
just part of a spec file and the first

00:12:22,370 --> 00:12:25,820
thing is like there's top-level describe

00:12:24,020 --> 00:12:28,460
we're describing our app or some view in

00:12:25,820 --> 00:12:31,190
our app and we can have before each's if

00:12:28,460 --> 00:12:32,960
we're used to that and do things before

00:12:31,190 --> 00:12:35,950
every test and most commonly we'll load

00:12:32,960 --> 00:12:38,180
the page load a route on our app and

00:12:35,950 --> 00:12:40,400
then from there we can have nested

00:12:38,180 --> 00:12:43,850
describes or context in cha and mocha

00:12:40,400 --> 00:12:46,520
and we can have our it sheds it should

00:12:43,850 --> 00:12:49,310
do a thing it should focus on the to do

00:12:46,520 --> 00:12:51,800
input field and then from there we can

00:12:49,310 --> 00:12:53,900
start using the Cypress API in this case

00:12:51,800 --> 00:12:55,460
we're doing two things we're doing site

00:12:53,900 --> 00:12:57,970
up focus which says hey Cypress look up

00:12:55,460 --> 00:13:00,890
what's currently focused in the window

00:12:57,970 --> 00:13:02,750
but our P and then it tries to do an

00:13:00,890 --> 00:13:06,020
insertion it does a and it says it

00:13:02,750 --> 00:13:07,070
should have the class new to do there's

00:13:06,020 --> 00:13:09,170
something interesting about this should

00:13:07,070 --> 00:13:11,210
and this whole you'll see some chaining

00:13:09,170 --> 00:13:14,000
here and there's a reason why they use

00:13:11,210 --> 00:13:16,100
that style see this has this

00:13:14,000 --> 00:13:17,750
context of I'm trying to do a on

00:13:16,100 --> 00:13:20,360
something I was focused or something

00:13:17,750 --> 00:13:22,579
that I tried to get in the Dom this vid

00:13:20,360 --> 00:13:24,679
will keep trying until it's true

00:13:22,579 --> 00:13:26,119
till there's a timeout this is really

00:13:24,679 --> 00:13:27,470
nice because when we first load our page

00:13:26,119 --> 00:13:29,600
like if we talk about asynchronous

00:13:27,470 --> 00:13:31,220
rendering the first thing this focus

00:13:29,600 --> 00:13:33,559
might just be the window or the document

00:13:31,220 --> 00:13:35,899
that thing hasn't rendered that has that

00:13:33,559 --> 00:13:37,850
class it's going to keep retrying until

00:13:35,899 --> 00:13:41,029
it gets that until it passes and this

00:13:37,850 --> 00:13:42,709
this permeates all their api's and

00:13:41,029 --> 00:13:44,779
having that context and doing things

00:13:42,709 --> 00:13:48,279
just a little bit more intelligently by

00:13:44,779 --> 00:13:51,139
Nature I'll show you one other example

00:13:48,279 --> 00:13:52,249
this is an example that is quite common

00:13:51,139 --> 00:13:54,559
where you try to just get something

00:13:52,249 --> 00:13:57,799
based on a selector it's using jQuery

00:13:54,559 --> 00:13:59,389
under the hood so anything that anything

00:13:57,799 --> 00:14:01,220
that's really valid selector works and

00:13:59,389 --> 00:14:02,989
you can even do things similar to in

00:14:01,220 --> 00:14:06,679
jQuery with Dom traversals to like get

00:14:02,989 --> 00:14:08,119
siblings or next or parent etc and then

00:14:06,679 --> 00:14:10,429
we just type in a little thing we want

00:14:08,119 --> 00:14:12,379
to do and another thing I'll point out

00:14:10,429 --> 00:14:14,689
is there's instead of having to memorize

00:14:12,379 --> 00:14:17,179
those key codes like what key code do I

00:14:14,689 --> 00:14:19,519
need to put in to automate Enter key or

00:14:17,179 --> 00:14:21,319
an escape key they just use like enter

00:14:19,519 --> 00:14:27,559
with curly braces just nice and

00:14:21,319 --> 00:14:29,959
convenient that way so from here I want

00:14:27,559 --> 00:14:31,459
to show you what running the test looks

00:14:29,959 --> 00:14:32,629
like and what debugging the test looks

00:14:31,459 --> 00:14:35,269
like all that other stuff

00:14:32,629 --> 00:14:36,649
it's relatively similar to selenium in

00:14:35,269 --> 00:14:38,929
terms of like we're just running tests

00:14:36,649 --> 00:14:41,119
and using some API this were I think it

00:14:38,929 --> 00:14:43,009
starts to take off so the first thing is

00:14:41,119 --> 00:14:45,769
you can run a headless Lee by default it

00:14:43,009 --> 00:14:47,059
runs headless Lee like on CI or for just

00:14:45,769 --> 00:14:50,059
running tests locally before on a

00:14:47,059 --> 00:14:51,559
pre-commit hook there's some nice

00:14:50,059 --> 00:14:53,600
results there telling you everything

00:14:51,559 --> 00:14:55,399
that passed and there's also recording

00:14:53,600 --> 00:14:57,559
by default so you can you could actually

00:14:55,399 --> 00:15:00,919
replay the recording of your app in and

00:14:57,559 --> 00:15:01,970
all the tests if you want here's where

00:15:00,919 --> 00:15:04,369
here's where it start to get a bit

00:15:01,970 --> 00:15:05,569
different there's an electron app the

00:15:04,369 --> 00:15:06,919
first thing that happens when you load

00:15:05,569 --> 00:15:09,709
the electrode app there's this yellow

00:15:06,919 --> 00:15:11,779
warning that says hey can you make sure

00:15:09,709 --> 00:15:13,730
you're running your webserver there's a

00:15:11,779 --> 00:15:15,019
configuration you can set your base your

00:15:13,730 --> 00:15:16,160
route if you can figure that it'll

00:15:15,019 --> 00:15:18,499
actually check that when this a

00:15:16,160 --> 00:15:20,389
collection app runs to make sure that

00:15:18,499 --> 00:15:21,290
you're running your webserver I can't

00:15:20,389 --> 00:15:23,329
tell you how many times I've forgotten

00:15:21,290 --> 00:15:24,889
to run my local dev server when I'm

00:15:23,329 --> 00:15:26,239
running my tests and just tells you

00:15:24,889 --> 00:15:27,799
right away

00:15:26,239 --> 00:15:30,919
and then from there you can also choose

00:15:27,799 --> 00:15:33,289
which browser and just whichever version

00:15:30,919 --> 00:15:36,230
of chrome you want right now and or

00:15:33,289 --> 00:15:38,720
Firefox and edge and all that eventually

00:15:36,230 --> 00:15:42,020
I get to that and then you can run your

00:15:38,720 --> 00:15:44,900
spec so from here we get into the test

00:15:42,020 --> 00:15:48,380
runner the test runner is pretty neat

00:15:44,900 --> 00:15:50,450
this is this is a at this part run it

00:15:48,380 --> 00:15:52,370
okay good so this pretty neat this is

00:15:50,450 --> 00:15:55,190
running in a browser like a sandbox

00:15:52,370 --> 00:15:57,320
browser environment and the test runner

00:15:55,190 --> 00:15:59,480
is this whole like there's our tests on

00:15:57,320 --> 00:16:02,000
the Left there's this header on the top

00:15:59,480 --> 00:16:03,590
that has like this this information

00:16:02,000 --> 00:16:05,360
about what tests have passed which tests

00:16:03,590 --> 00:16:07,520
have failed how long it's been running

00:16:05,360 --> 00:16:10,130
we can stop and replay it there's an

00:16:07,520 --> 00:16:12,500
there's a URL preview there's a little

00:16:10,130 --> 00:16:13,910
target icon that's actually a Dom Dom

00:16:12,500 --> 00:16:15,500
selector playground we can click on that

00:16:13,910 --> 00:16:18,830
and play around with selectors to find

00:16:15,500 --> 00:16:20,990
things in our app and there's also

00:16:18,830 --> 00:16:24,140
viewport information at the top and our

00:16:20,990 --> 00:16:26,240
on our right is our app so this might

00:16:24,140 --> 00:16:27,500
seem like a little thing but this just

00:16:26,240 --> 00:16:28,910
having it right in the same window is

00:16:27,500 --> 00:16:30,590
very convenient there's there's a very

00:16:28,910 --> 00:16:37,160
good reason why they put this all in the

00:16:30,590 --> 00:16:39,350
same window so that thing on the left is

00:16:37,160 --> 00:16:40,700
where all our commands and all our tests

00:16:39,350 --> 00:16:45,020
are kind of logged that's called the

00:16:40,700 --> 00:16:47,210
command lock this thing is cool when we

00:16:45,020 --> 00:16:48,770
tell when we click on anything in there

00:16:47,210 --> 00:16:50,720
expand one of our tests we see all the

00:16:48,770 --> 00:16:53,710
commands that are tests tried to execute

00:16:50,720 --> 00:16:57,590
if we click on any of those commands

00:16:53,710 --> 00:17:00,230
it'll jump to that part of the test

00:16:57,590 --> 00:17:01,760
it'll actually go to the da it takes Dom

00:17:00,230 --> 00:17:04,160
snapshots throughout the test and it

00:17:01,760 --> 00:17:05,510
replays those Dom snapshots so we can

00:17:04,160 --> 00:17:08,420
actually jump around our tests

00:17:05,510 --> 00:17:10,490
sequentially or out of order and replay

00:17:08,420 --> 00:17:14,050
the state of our down and see what's

00:17:10,490 --> 00:17:17,960
going on in our app without having to

00:17:14,050 --> 00:17:19,580
well without much effort and you'll see

00:17:17,960 --> 00:17:21,920
there's this thing at the bottom of our

00:17:19,580 --> 00:17:24,680
app this is before and after certain

00:17:21,920 --> 00:17:26,870
commands have this context of before and

00:17:24,680 --> 00:17:28,340
after I think typing is one of them so

00:17:26,870 --> 00:17:30,440
if you go to type in something like a

00:17:28,340 --> 00:17:32,270
new to do you hit before you can see the

00:17:30,440 --> 00:17:35,240
to do before something got types see

00:17:32,270 --> 00:17:36,860
what's going on debug it maybe and you

00:17:35,240 --> 00:17:38,960
can click to the after and see after

00:17:36,860 --> 00:17:41,630
you've done the type command this

00:17:38,960 --> 00:17:43,940
ability to replay the Don snapshots and

00:17:41,630 --> 00:17:46,400
walk through our tests just by clicking

00:17:43,940 --> 00:17:47,990
on the command log is a night-and-day

00:17:46,400 --> 00:17:49,640
difference from anything I ever

00:17:47,990 --> 00:17:51,860
experienced with selenium the

00:17:49,640 --> 00:17:53,870
workflow is used to was setting up a

00:17:51,860 --> 00:17:56,570
debugger and trying to drop a breakpoint

00:17:53,870 --> 00:17:57,880
in my test or my app code and trying to

00:17:56,570 --> 00:17:59,930
hopefully stop at the right point

00:17:57,880 --> 00:18:02,210
running into all kinds of things like

00:17:59,930 --> 00:18:03,800
default timeouts and the app reloading

00:18:02,210 --> 00:18:05,000
and test reloading and just all kinds of

00:18:03,800 --> 00:18:06,680
wackiness that was just always

00:18:05,000 --> 00:18:08,180
frustrating and just be able to walk

00:18:06,680 --> 00:18:10,490
through my tests I can see exactly

00:18:08,180 --> 00:18:12,230
what's happening and just a little side

00:18:10,490 --> 00:18:14,540
interesting thing if you write really

00:18:12,230 --> 00:18:16,070
good tests about your app like this you

00:18:14,540 --> 00:18:18,650
can actually sort of document how your

00:18:16,070 --> 00:18:20,660
app works and a new user a new person on

00:18:18,650 --> 00:18:22,070
the team could could look at it and get

00:18:20,660 --> 00:18:24,140
a pretty good understanding of all the

00:18:22,070 --> 00:18:29,510
things it does and how it behaves and

00:18:24,140 --> 00:18:31,310
what it looks like all of that so let's

00:18:29,510 --> 00:18:33,200
talk about debugging like really

00:18:31,310 --> 00:18:35,270
debugging so the first thing is when we

00:18:33,200 --> 00:18:39,650
click on those things in the test Runner

00:18:35,270 --> 00:18:41,930
we get a we any of those any of the

00:18:39,650 --> 00:18:43,700
things we click they have some context

00:18:41,930 --> 00:18:45,290
of there's a Dom element involved or

00:18:43,700 --> 00:18:46,670
there's a network request if we click on

00:18:45,290 --> 00:18:48,440
them they just get log to the console

00:18:46,670 --> 00:18:50,720
normally I'd have to set up a breakpoint

00:18:48,440 --> 00:18:52,520
and throw my own console logs to get

00:18:50,720 --> 00:18:53,900
this information and it's just right

00:18:52,520 --> 00:18:58,550
there like just at a click we can get

00:18:53,900 --> 00:19:00,530
that and start playing with it Dom's

00:18:58,550 --> 00:19:02,060
debugging you can inspect the state of

00:19:00,530 --> 00:19:03,890
the Dom in any of these snapshots you

00:19:02,060 --> 00:19:05,810
and you have that and you can rely on

00:19:03,890 --> 00:19:08,120
that I will say it's not necessarily

00:19:05,810 --> 00:19:10,700
replaying all of your different redux

00:19:08,120 --> 00:19:12,890
states for example your your true app

00:19:10,700 --> 00:19:15,920
state it's just going based on the Dom

00:19:12,890 --> 00:19:17,630
though I have found that in reality even

00:19:15,920 --> 00:19:20,000
with an app using react and redux I was

00:19:17,630 --> 00:19:21,680
able to actually interact with my UI in

00:19:20,000 --> 00:19:25,100
some cases and things were just sort of

00:19:21,680 --> 00:19:27,800
work and there are hooks to potentially

00:19:25,100 --> 00:19:30,140
do things like inject Redux stay and and

00:19:27,800 --> 00:19:32,240
snapshot that stuff I haven't gotten to

00:19:30,140 --> 00:19:33,680
that yet I'm not sure anybody has but

00:19:32,240 --> 00:19:37,490
there there's some crazy things we can

00:19:33,680 --> 00:19:40,310
do with this replayability JavaScript

00:19:37,490 --> 00:19:41,450
debugging so if that that wasn't enough

00:19:40,310 --> 00:19:44,270
for me

00:19:41,450 --> 00:19:46,100
I found it really awesome that I only

00:19:44,270 --> 00:19:47,960
needed to run this one app this one

00:19:46,100 --> 00:19:50,210
browser this one app and this one

00:19:47,960 --> 00:19:52,130
debugger to debug both my tests and my

00:19:50,210 --> 00:19:53,630
app code this replay is just showing

00:19:52,130 --> 00:19:56,030
hitting a breakpoint in my test code

00:19:53,630 --> 00:19:57,980
here and there's also hitting a

00:19:56,030 --> 00:19:59,240
breakpoint in my app code and being able

00:19:57,980 --> 00:20:00,920
to jump between those two contacts

00:19:59,240 --> 00:20:03,410
normally I was used to having like a

00:20:00,920 --> 00:20:05,240
debugger hopefully anode because my

00:20:03,410 --> 00:20:07,460
tests were maybe written in JavaScript

00:20:05,240 --> 00:20:09,740
and and then another one in the dev

00:20:07,460 --> 00:20:11,360
tools for my app and I'd be bouncing

00:20:09,740 --> 00:20:13,130
around between the two and there's just

00:20:11,360 --> 00:20:14,900
all this cognitive load that comes with

00:20:13,130 --> 00:20:17,210
which one of my end what am i doing

00:20:14,900 --> 00:20:19,460
where and bouncing back and forth and

00:20:17,210 --> 00:20:21,080
window switching just all that and when

00:20:19,460 --> 00:20:23,060
you just start to take this other way

00:20:21,080 --> 00:20:24,920
you know this very challenging thing

00:20:23,060 --> 00:20:26,540
that we do every day and you put it in a

00:20:24,920 --> 00:20:29,600
single place and you just make it that

00:20:26,540 --> 00:20:35,270
much easier it it starts to make it fun

00:20:29,600 --> 00:20:37,700
again so there are some other nice

00:20:35,270 --> 00:20:39,770
things so I mentioned we had to write

00:20:37,700 --> 00:20:41,540
our own implicit waits Cyprus does that

00:20:39,770 --> 00:20:44,180
out of the box there's a four second

00:20:41,540 --> 00:20:46,370
timeout which is plenty you could make

00:20:44,180 --> 00:20:48,950
it shorter if you like you can override

00:20:46,370 --> 00:20:50,390
that there's direct access to the Dom so

00:20:48,950 --> 00:20:52,550
in selenium everything was being

00:20:50,390 --> 00:20:54,260
serialized to that service I mentioned

00:20:52,550 --> 00:20:55,820
and so you're always just getting a

00:20:54,260 --> 00:20:57,680
serialize version of Dom because

00:20:55,820 --> 00:20:59,390
everything's running the same JavaScript

00:20:57,680 --> 00:21:01,490
runtime you're actually dealing with a

00:20:59,390 --> 00:21:04,790
Dom that's in your app from your test

00:21:01,490 --> 00:21:07,130
code like you just have it's it's just

00:21:04,790 --> 00:21:10,670
nice and there's some service mocking

00:21:07,130 --> 00:21:12,620
libraries built in the they they just

00:21:10,670 --> 00:21:14,180
made it easy to define a route and

00:21:12,620 --> 00:21:17,270
define things you want to match on like

00:21:14,180 --> 00:21:19,280
a method or parameter and you can have

00:21:17,270 --> 00:21:21,920
it return fixture data

00:21:19,280 --> 00:21:23,750
it's just rolled up and that's the thing

00:21:21,920 --> 00:21:25,430
overall like it rolls up all this

00:21:23,750 --> 00:21:28,400
tooling that we normally be cobbling

00:21:25,430 --> 00:21:30,560
together ourselves sign-on for the

00:21:28,400 --> 00:21:33,410
request stuff the service mocking and

00:21:30,560 --> 00:21:36,380
and jQuery for Dom querying and

00:21:33,410 --> 00:21:38,720
traversal mocha and chai for the BDD

00:21:36,380 --> 00:21:40,190
syntax and our tests it takes care of

00:21:38,720 --> 00:21:41,390
that for us so we don't have to select

00:21:40,190 --> 00:21:43,880
them ourselves or maintain those

00:21:41,390 --> 00:21:46,280
dependencies and and it just becomes

00:21:43,880 --> 00:21:50,060
this one cohesive package that is well

00:21:46,280 --> 00:21:52,460
documented on their site the other thing

00:21:50,060 --> 00:21:56,240
I noticed about their site both in their

00:21:52,460 --> 00:21:58,280
blog and in their in their Docs they

00:21:56,240 --> 00:22:00,080
have lots of little tidbits like this so

00:21:58,280 --> 00:22:02,360
this is a thing on timeouts and

00:22:00,080 --> 00:22:03,740
performance and it talks about this

00:22:02,360 --> 00:22:05,150
performance trade-off when you start to

00:22:03,740 --> 00:22:06,770
extend the timeout which is like a

00:22:05,150 --> 00:22:08,510
common trap when writing these tests

00:22:06,770 --> 00:22:10,790
something didn't work it wasn't ready

00:22:08,510 --> 00:22:12,020
yet so what's in the timeout well I mean

00:22:10,790 --> 00:22:13,700
there's there's a big catch to that

00:22:12,020 --> 00:22:15,110
especially if you do it universally and

00:22:13,700 --> 00:22:17,240
there's things throughout their Docs

00:22:15,110 --> 00:22:18,590
that kind of throw this out at you

00:22:17,240 --> 00:22:20,840
like little tidbits that aren't even

00:22:18,590 --> 00:22:22,430
specific to Cyprus these are just like

00:22:20,840 --> 00:22:24,410
there's a book in here about how to

00:22:22,430 --> 00:22:26,150
write good and end tests that could

00:22:24,410 --> 00:22:28,460
apply to selenium or whatever else tool

00:22:26,150 --> 00:22:29,660
you want to use and I just like that I

00:22:28,460 --> 00:22:31,580
like that they're a little bit

00:22:29,660 --> 00:22:34,370
opinionated and they just share these

00:22:31,580 --> 00:22:39,320
things right in their Docs so we we just

00:22:34,370 --> 00:22:44,660
have it it's just nice that they went

00:22:39,320 --> 00:22:46,340
that far there are trade offs so I've

00:22:44,660 --> 00:22:48,140
been talking about how awesome it is I

00:22:46,340 --> 00:22:49,580
do want to say you know some of the

00:22:48,140 --> 00:22:51,350
things that it lacks that it that it

00:22:49,580 --> 00:22:53,930
can't do yet or things you need to

00:22:51,350 --> 00:22:55,220
consider it's a new tool it's a new

00:22:53,930 --> 00:22:57,650
technology it's a new thing to bring

00:22:55,220 --> 00:23:01,310
into your team there's always a cost for

00:22:57,650 --> 00:23:03,770
that I take that very carefully

00:23:01,310 --> 00:23:05,060
it has a style that Det Cheney syntax I

00:23:03,770 --> 00:23:07,250
actually personally don't like chaining

00:23:05,060 --> 00:23:08,960
that much but as I said before there's a

00:23:07,250 --> 00:23:10,910
reason for it they like to maintain that

00:23:08,960 --> 00:23:12,980
that that context of what you're doing

00:23:10,910 --> 00:23:14,870
so that way they can intelligently do

00:23:12,980 --> 00:23:18,140
the thing that you're doing next like an

00:23:14,870 --> 00:23:19,730
assertion and they're very upfront about

00:23:18,140 --> 00:23:21,590
their trade-offs they have a whole dock

00:23:19,730 --> 00:23:24,170
page dedicated to this and it mentions

00:23:21,590 --> 00:23:27,020
both permanent trade offs and temporary

00:23:24,170 --> 00:23:29,930
trade offs a permanent trade-off is it

00:23:27,020 --> 00:23:32,240
runs in a single browser tab I have seen

00:23:29,930 --> 00:23:33,890
apps that try to open other tabs to do

00:23:32,240 --> 00:23:36,890
certain things you're not gonna be able

00:23:33,890 --> 00:23:39,230
to test those things in Cypress there's

00:23:36,890 --> 00:23:41,060
also a temporary trade-off of browser

00:23:39,230 --> 00:23:42,710
support they didn't try to support every

00:23:41,060 --> 00:23:44,510
browser right out of the gates they just

00:23:42,710 --> 00:23:46,580
chose Chrome based browsers so they got

00:23:44,510 --> 00:23:48,860
Chrome chromium Canary and electron

00:23:46,580 --> 00:23:50,780
browser they're working on Firefox

00:23:48,860 --> 00:23:52,280
they're just fixing issues in that right

00:23:50,780 --> 00:23:54,290
now squashing some bugs and they're

00:23:52,280 --> 00:23:57,050
gonna have that soon as soon as they can

00:23:54,290 --> 00:24:00,230
and I'm sure edge and and and so forth

00:23:57,050 --> 00:24:03,320
will be next but that's that's something

00:24:00,230 --> 00:24:05,630
that is very very important though

00:24:03,320 --> 00:24:08,300
covering having cross browser support is

00:24:05,630 --> 00:24:11,090
is key in a lot of cases and I would

00:24:08,300 --> 00:24:13,160
suggest still having some selenium tests

00:24:11,090 --> 00:24:15,350
just for those situations that Cypress

00:24:13,160 --> 00:24:17,330
cannot do them I find that 99% of the

00:24:15,350 --> 00:24:18,920
value of these tests is easily covered

00:24:17,330 --> 00:24:20,660
by Cypress making sure that we exercise

00:24:18,920 --> 00:24:22,070
our user experience all the different

00:24:20,660 --> 00:24:25,430
views all the different interactions

00:24:22,070 --> 00:24:28,460
that we care about testing each workflow

00:24:25,430 --> 00:24:29,500
once that the user wants to do ABC tests

00:24:28,460 --> 00:24:31,780
those things

00:24:29,500 --> 00:24:34,059
testing any given all the different UI

00:24:31,780 --> 00:24:39,340
components at least once that's also

00:24:34,059 --> 00:24:41,890
really important more than anything I

00:24:39,340 --> 00:24:44,890
would say it's ambitious they basically

00:24:41,890 --> 00:24:47,320
reinvented the wheel and anytime you do

00:24:44,890 --> 00:24:50,470
that you're gonna introduce at a bug

00:24:47,320 --> 00:24:52,510
your own set of challenges and I think

00:24:50,470 --> 00:24:55,690
they not only tried to like reinvent

00:24:52,510 --> 00:24:57,580
selenium but to add this very

00:24:55,690 --> 00:24:58,679
comprehensive developer experience on

00:24:57,580 --> 00:25:02,620
top of it

00:24:58,679 --> 00:25:04,720
that is crazy I'm like if I if I'm ever

00:25:02,620 --> 00:25:06,220
met Brian man the original author of

00:25:04,720 --> 00:25:07,990
this years ago I would have like told

00:25:06,220 --> 00:25:10,210
him he was crazy and said good luck

00:25:07,990 --> 00:25:11,650
please try and please succeed but I

00:25:10,210 --> 00:25:13,929
don't think it's possible

00:25:11,650 --> 00:25:16,900
don't feel bad if you fail but here here

00:25:13,929 --> 00:25:19,270
is he's what started as an experiment he

00:25:16,900 --> 00:25:20,890
got it working and he's built a team

00:25:19,270 --> 00:25:25,330
around it there's I think six full-time

00:25:20,890 --> 00:25:26,919
devs on it now and and the open source

00:25:25,330 --> 00:25:28,480
community is growing there's thirty more

00:25:26,919 --> 00:25:31,480
contributors on top of that that have

00:25:28,480 --> 00:25:32,440
made contributions but there's there's

00:25:31,480 --> 00:25:34,210
going to be bugs there's going to be

00:25:32,440 --> 00:25:37,539
issues there's gonna be there's gonna be

00:25:34,210 --> 00:25:41,250
the trade offs I mentioned but I'm

00:25:37,539 --> 00:25:45,789
really glad that they made it anyway so

00:25:41,250 --> 00:25:47,500
I would definitely say that when it

00:25:45,789 --> 00:25:49,690
comes to end and testing and our ability

00:25:47,500 --> 00:25:52,929
to test our user experiences the game

00:25:49,690 --> 00:25:54,580
has changed and I would encourage I

00:25:52,929 --> 00:25:56,500
would encourage everyone to not just

00:25:54,580 --> 00:25:58,750
think about unit test coverage but user

00:25:56,500 --> 00:26:02,080
experience coverage and then test is

00:25:58,750 --> 00:26:03,730
where we solve that problem and if

00:26:02,080 --> 00:26:04,240
you're new to this or trying to get

00:26:03,730 --> 00:26:08,169
started

00:26:04,240 --> 00:26:10,960
do one thing write a smoke test test

00:26:08,169 --> 00:26:13,690
that one thing your app says it does

00:26:10,960 --> 00:26:15,309
test that main workflow do the happy

00:26:13,690 --> 00:26:17,799
path make sure that's good

00:26:15,309 --> 00:26:19,510
that is going to give you 90% of the

00:26:17,799 --> 00:26:21,490
value you're going to cover your build

00:26:19,510 --> 00:26:23,110
and your deployments and of course that

00:26:21,490 --> 00:26:25,210
one thing that your app is supposed to

00:26:23,110 --> 00:26:27,850
do and from there you can start to cover

00:26:25,210 --> 00:26:31,320
more things but that is the one thing

00:26:27,850 --> 00:26:35,169
that you could do and it may be a day I

00:26:31,320 --> 00:26:37,120
think I had I think I had the first few

00:26:35,169 --> 00:26:38,919
views our app tested in like an hour or

00:26:37,120 --> 00:26:40,570
two and then ice went from there there

00:26:38,919 --> 00:26:42,169
was there were dozens of uses a very

00:26:40,570 --> 00:26:46,129
heavy a lot of another enterprise

00:26:42,169 --> 00:26:47,320
but but it didn't take long to get that

00:26:46,129 --> 00:26:49,519
going

00:26:47,320 --> 00:26:50,809
and I like to say this

00:26:49,519 --> 00:26:52,700
don't let your users test your app

00:26:50,809 --> 00:26:54,799
because if you're not automating these

00:26:52,700 --> 00:26:57,200
things that's what you're doing you can

00:26:54,799 --> 00:26:58,429
have a QA team you could be smoke

00:26:57,200 --> 00:27:00,529
testing this yourself in your own

00:26:58,429 --> 00:27:01,879
browser there's no way you're gonna

00:27:00,529 --> 00:27:04,489
catch all the things that these

00:27:01,879 --> 00:27:06,409
automated tests can catch as quickly as

00:27:04,489 --> 00:27:08,179
they can catch I mean to test those

00:27:06,409 --> 00:27:09,440
things manually what's your dev cycle

00:27:08,179 --> 00:27:11,809
you're just creating a feedback loop

00:27:09,440 --> 00:27:13,909
that could be so much shorter and these

00:27:11,809 --> 00:27:19,220
things can run very quickly and catch so

00:27:13,909 --> 00:27:20,359
much more so at was law any application

00:27:19,220 --> 00:27:22,909
that can be written in JavaScript

00:27:20,359 --> 00:27:23,299
eventually will right I think this is a

00:27:22,909 --> 00:27:26,779
good thing

00:27:23,299 --> 00:27:27,980
I just a couple weeks ago I was I was

00:27:26,779 --> 00:27:31,399
working a visual studio and I thought

00:27:27,980 --> 00:27:33,320
wow I remember when Adam came out and I

00:27:31,399 --> 00:27:35,029
before that I was using sublime sublime

00:27:33,320 --> 00:27:36,889
was great like everybody loves sublime

00:27:35,029 --> 00:27:39,019
everyone at least used to love sublime

00:27:36,889 --> 00:27:41,179
and maybe we've forgotten about a little

00:27:39,019 --> 00:27:43,369
bit because we've had Adam come out and

00:27:41,179 --> 00:27:45,379
at the time it was like oh this is

00:27:43,369 --> 00:27:47,149
written in JavaScript an editor this

00:27:45,379 --> 00:27:49,100
this is fast this works this is crazy

00:27:47,149 --> 00:27:52,279
and the visual studio code and I'm

00:27:49,100 --> 00:27:54,259
thinking now I when I use Visual Studio

00:27:52,279 --> 00:27:55,700
code or Adam I'm not just using those

00:27:54,259 --> 00:27:58,009
editors I'm using all these extensions

00:27:55,700 --> 00:27:59,989
and plugins there's these ecosystems of

00:27:58,009 --> 00:28:01,999
tools that have built up around these

00:27:59,989 --> 00:28:03,320
tools because they were in a JavaScript

00:28:01,999 --> 00:28:05,539
because they're written in the things

00:28:03,320 --> 00:28:07,429
that were familiar with and I look at

00:28:05,539 --> 00:28:08,690
Cypress I still think we're very much in

00:28:07,429 --> 00:28:10,190
the early days it's still gaining

00:28:08,690 --> 00:28:11,720
adoption people are still catching on

00:28:10,190 --> 00:28:13,519
people starting to write custom commands

00:28:11,720 --> 00:28:15,409
this people are starting to write

00:28:13,519 --> 00:28:18,529
plug-ins like we're in the early stages

00:28:15,409 --> 00:28:20,359
of seeing that ecosystem expand and grow

00:28:18,529 --> 00:28:24,289
and become something beyond what the

00:28:20,359 --> 00:28:26,840
original authors intended I really want

00:28:24,289 --> 00:28:30,109
to thank the Cypress team they did an

00:28:26,840 --> 00:28:31,940
amazing job there they they they

00:28:30,109 --> 00:28:33,379
definitely ran into all these problems I

00:28:31,940 --> 00:28:36,409
described that I experienced with

00:28:33,379 --> 00:28:38,749
selenium and said they they wanted to do

00:28:36,409 --> 00:28:41,059
better and they have they've built

00:28:38,749 --> 00:28:42,799
something that not only was written in

00:28:41,059 --> 00:28:44,149
JavaScript but tried to solve the

00:28:42,799 --> 00:28:45,559
developer experience and tried to make

00:28:44,149 --> 00:28:47,629
that smoother and tried to make it

00:28:45,559 --> 00:28:50,809
encouraging for us to write these tests

00:28:47,629 --> 00:28:52,900
that aren't always easy and I think

00:28:50,809 --> 00:28:55,210
they've done a terrific job if

00:28:52,900 --> 00:28:56,590
you I think the docs are great but if

00:28:55,210 --> 00:28:58,210
you need more help than what's in their

00:28:56,590 --> 00:29:01,210
Doc's check out their get er chat I

00:28:58,210 --> 00:29:05,470
promise you they're really nice and and

00:29:01,210 --> 00:29:08,710
friendly I want to finish my story my

00:29:05,470 --> 00:29:11,260
personal story this is my family and

00:29:08,710 --> 00:29:14,700
Nicholas's family we each had a daughter

00:29:11,260 --> 00:29:17,350
two years ago they're born a month apart

00:29:14,700 --> 00:29:20,350
our wives are both expecting our second

00:29:17,350 --> 00:29:23,560
this summer I really really wanted to

00:29:20,350 --> 00:29:25,150
bring my family here but my wife is five

00:29:23,560 --> 00:29:26,170
points pregnant and my daughter is two

00:29:25,150 --> 00:29:29,230
years old and wants to climb over

00:29:26,170 --> 00:29:31,780
everything I actually asked her my

00:29:29,230 --> 00:29:35,770
wife's doctor if I should and she yelled

00:29:31,780 --> 00:29:39,370
at me that view very bad idea I miss

00:29:35,770 --> 00:29:42,880
them very much but I I will also say

00:29:39,370 --> 00:29:44,530
that Nicholas and I you know still talk

00:29:42,880 --> 00:29:47,650
for hours and he's still teaching me

00:29:44,530 --> 00:29:51,420
things and I'm so grateful for having

00:29:47,650 --> 00:29:51,420
met them at Jay s comma five years ago

00:29:51,600 --> 00:29:56,530
thank you for joining me today for

00:29:54,370 --> 00:29:58,390
wanting to hear about how to write tests

00:29:56,530 --> 00:29:59,110
about how to do this better about what's

00:29:58,390 --> 00:30:01,360
changed

00:29:59,110 --> 00:30:03,190
I hope I hope I've given you some ideas

00:30:01,360 --> 00:30:05,110
about that I hope I've given you some

00:30:03,190 --> 00:30:06,700
ideas about what's happened in our

00:30:05,110 --> 00:30:08,290
ecosystem and what continues to happen

00:30:06,700 --> 00:30:10,450
with our tooling and how that continues

00:30:08,290 --> 00:30:11,890
to advance if you want to talk to me

00:30:10,450 --> 00:30:13,270
after this I love talking about this

00:30:11,890 --> 00:30:16,300
stuff please come find me

00:30:13,270 --> 00:30:18,940
or find me on Twitter at Will's lab I

00:30:16,300 --> 00:30:24,019
really appreciate being here thank you

00:30:18,940 --> 00:30:24,019

YouTube URL: https://www.youtube.com/watch?v=C1D94jWy8uE


