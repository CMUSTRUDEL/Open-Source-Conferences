Title: Maja Wichrowska: Do the Right (to Left) Thing: Directional Content in React | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/maja-wichrowska/

In 2017, Airbnb supported 27 languages and had developed robust translation tools that made it easy to add more. We launched Croatian in May with little overhead beyond setting up the new domain and translating phrases. However, this was not true for all new languages; our next most requested language, Hebrew, posed a unique challenge. Because it reads right-to-left, the entire Hebrew UI must be flipped. Browsers only handle reversing the DOM structure, but styling and interactions must be coded manually.

This talk covers the journey of enabling right-to-left languages on airbnb.com. Recently, Airbnb has moved to a React frontend and away from Sass to a CSS-in-JS paradigm. We developed a performant and cross-browser solution for RTL that leveraged a CSS-in-JS abstraction layer to isolate the logic from our codebase. Our efforts led us most of the way to launching in Arabic and Hebrew while requiring little effort from our product engineers and with minimal disruption to their work.
Captions: 
	00:00:00,380 --> 00:00:02,490
Maja Wichrowska - Do the Right (to Left) Thing: Directional Content in React.

00:00:02,490 --> 00:00:03,490
My name is Maja.

00:00:03,490 --> 00:00:09,090
I'm a front-end engineer at Airbnb in San Francisco, and I'm going to start this talk

00:00:09,090 --> 00:00:15,920
with a fun fact, because that's kind of the traditional way we present at Airbnb.

00:00:15,920 --> 00:00:25,369
My fun fact for today is that I actually broke my nose so fine, playing rugby, very expected,

00:00:25,369 --> 00:00:30,739
so, if you notice these bruises under my eyes, it's not just the jet lag, it's a bit of the

00:00:30,739 --> 00:00:31,960
nose!

00:00:31,960 --> 00:00:39,610
So, I'm here to talk to you today about right-to-left languages, and specifically the infrastructure

00:00:39,610 --> 00:00:44,491
we've been working on to support them at Airbnb.

00:00:44,491 --> 00:00:48,420
I hope to answer a number of questions throughout this talk.

00:00:48,420 --> 00:00:53,650
First, why support right-to-left languages at all?

00:00:53,650 --> 00:00:56,740
Why is it hard to do so?

00:00:56,740 --> 00:01:00,630
What tools are already available to us out there?

00:01:00,630 --> 00:01:06,780
Finally, how we ended up tackling the problem at Airbnb with like a special secret bonus

00:01:06,780 --> 00:01:11,859
deep dive into our CSS and JavaScript infrastructure.

00:01:11,859 --> 00:01:17,039
The takeaway is that I plan to demonstrate the steps it takes to get this screen shot

00:01:17,039 --> 00:01:21,630
turn into this.

00:01:21,630 --> 00:01:26,509
And I hope that you leave this talk inspired to build in the same kind of support into

00:01:26,509 --> 00:01:31,791
your apps, and help make a more connected web, one that is accessible and available

00:01:31,791 --> 00:01:34,759
to everyone in the world.

00:01:34,759 --> 00:01:41,009
Jumping right in, before we built this whole new infrastructure, it was important to consider

00:01:41,009 --> 00:01:44,779
who we were building it for, and why it mattered.

00:01:44,779 --> 00:01:49,389
Of course, I would be tempted to go back to the title slide and like it's the right thing

00:01:49,389 --> 00:01:52,959
to do, and walk off the stage, and be done with it.

00:01:52,959 --> 00:01:56,619
But I will delve a bit more into the details.

00:01:56,619 --> 00:02:02,299
It's difficult to pinpoint an exact number of languages written right-to-left but a huge

00:02:02,299 --> 00:02:06,220
number of people speak, read, and write these languages.

00:02:06,220 --> 00:02:11,310
Arabic alone is the fifth most spoken language in the world, with estimates from about 300

00:02:11,310 --> 00:02:17,610
million to up to 425 million speaking some variant of it.

00:02:17,610 --> 00:02:23,450
Couple that with languages like Hebrew, Urdu, Persian, and more, and you easily add another

00:02:23,450 --> 00:02:28,620
250 million people in the world who would benefit from a web in a readily supported

00:02:28,620 --> 00:02:30,950
right-to-left languages.

00:02:30,950 --> 00:02:37,720
Now, since Arabic is the most popular of these languages, we have the most data internet

00:02:37,720 --> 00:02:45,520
users and specifically on the growing digital generation in the Middle East and North Africa.

00:02:45,520 --> 00:02:49,010
Internet penetration in the Middle East is actually higher than the global average of

00:02:49,010 --> 00:02:52,900
51 per cent, sitting at nearly 60 per cent.

00:02:52,900 --> 00:02:59,210
Some countries like the UAE and Qatar have 90 per cent of the population regularly accessing

00:02:59,210 --> 00:03:00,700
the internet.

00:03:00,700 --> 00:03:02,360
These aren't casual users.

00:03:02,360 --> 00:03:06,820
40 per cent of what has been dubbed as the Arab digital generation is on the internet

00:03:06,820 --> 00:03:10,010
for at least five hours a day.

00:03:10,010 --> 00:03:17,430
Now, taking a step back, even if you're not doing business in the Middle East or investing

00:03:17,430 --> 00:03:22,530
there specifically, Arab immigrants are spread out all over the world.

00:03:22,530 --> 00:03:24,980
There are normal forums on the web.

00:03:24,980 --> 00:03:33,480
Four out of five all internet users speak Arabic which amounts to - it's the fourth

00:03:33,480 --> 00:03:36,100
largest language group.

00:03:36,100 --> 00:03:41,570
The number of English speakers on the web have grown about 600 per cent since 2000;

00:03:41,570 --> 00:03:46,040
the number of Arabic speakers has grown over 7,000 per cent.

00:03:46,040 --> 00:03:48,330
This is huge.

00:03:48,330 --> 00:03:53,400
And what is more, at least 60 per cent of these users say they would prefer content

00:03:53,400 --> 00:03:55,150
in their own language.

00:03:55,150 --> 00:04:01,880
It's so much so that there is actually a statistical preference towards blocking and other content-creation

00:04:01,880 --> 00:04:09,860
platforms which you can extrapolate as because they want that native language content.

00:04:09,860 --> 00:04:19,560
Only 43 per cent of the top websites have that Arabic content.

00:04:19,560 --> 00:04:24,710
The ones in the room are the ones who is move the metric in a positive direction.

00:04:24,710 --> 00:04:31,980
For most of our apps, it's non-trivial, so which begs the question of course, why is

00:04:31,980 --> 00:04:34,660
this hard?

00:04:34,660 --> 00:04:40,070
If the problem was supporting basic Arabic content, it wouldn't be a challenge.

00:04:40,070 --> 00:04:44,070
We would assembly align everything to the right and call it a day.

00:04:44,070 --> 00:04:50,260
But, of course, Airbnb, like a lot of other platforms, has a tonne of user-generated content.

00:04:50,260 --> 00:04:57,400
The text is showed in the user's preferred language, there's a good chance that reviews,

00:04:57,400 --> 00:05:01,850
listing titles, descriptions, names, will be in a different language which creates a

00:05:01,850 --> 00:05:08,130
by-directional text - a bidirectional text environment.

00:05:08,130 --> 00:05:14,620
Even if we could control the language of our content, Arabic, Hebrew, are bidirectional

00:05:14,620 --> 00:05:23,270
by default, numbers read left-to-right creating a challenge in the simplest of information.

00:05:23,270 --> 00:05:26,400
Bidirectional inputs are trickier.

00:05:26,400 --> 00:05:34,360
If you have to handle input in every languages, that - do you justify the input according

00:05:34,360 --> 00:05:36,170
to the page's content language?

00:05:36,170 --> 00:05:41,169
Do you decide on the fly based on which character the user inputs?

00:05:41,169 --> 00:05:43,610
What about pre-fixes and sufficient fixes?

00:05:43,610 --> 00:05:44,610
How do you - suffixes.

00:05:44,610 --> 00:05:47,580
How do you address mixed content?

00:05:47,580 --> 00:05:53,360
There is a ton of open questions as to how to create the best user experience.

00:05:53,360 --> 00:05:59,251
When you add a little bit of directional styling, even things like floats, or padding, that's

00:05:59,251 --> 00:06:02,840
asymmetrical, that needs to be mirrored too.

00:06:02,840 --> 00:06:08,590
Finally, iconography and other images need to be taken into account.

00:06:08,590 --> 00:06:13,980
If the text is flowing right-to-left, it makes that arrows, chevrons and other images need

00:06:13,980 --> 00:06:19,830
to be method tide to disappoint - modified to point in that direction.

00:06:19,830 --> 00:06:25,860
What about IDs, or search icons, check marks, universal symbols for accessibility.

00:06:25,860 --> 00:06:30,450
There are so many icons that may or may not be flipped.

00:06:30,450 --> 00:06:34,460
We live with a ton of questions.

00:06:34,460 --> 00:06:41,290
What became apparent is that we actually need to allow for some imagery to stay in the default

00:06:41,290 --> 00:06:43,680
direction, and then we need to flip some others.

00:06:43,680 --> 00:06:51,550
So, in summary, for a truly comprehensive system to support right-to-left languages,

00:06:51,550 --> 00:06:57,300
we need to be able to have non-directional content but bidirectional content on the same

00:06:57,300 --> 00:07:01,090
page and on the same sentence.

00:07:01,090 --> 00:07:05,900
We need to figure out how to allow users to type in content in their preferred language,

00:07:05,900 --> 00:07:13,970
how to allow custom styles to be mirrored, padding, alignment, borders, things like than.

00:07:13,970 --> 00:07:20,930
We need to have the same allowance for images and iconography, and the ability to opt out

00:07:20,930 --> 00:07:24,270
all of these things on a selective basis.

00:07:24,270 --> 00:07:29,860
So the big question becomes how do we accomplish all of this with minimal disruption to our

00:07:29,860 --> 00:07:34,300
existing code base and our developer work flow?

00:07:34,300 --> 00:07:40,010
We can begin by assessing the tools that are available to us.

00:07:40,010 --> 00:07:43,930
The main thing at our disposal is this HTML attribute.

00:07:43,930 --> 00:07:46,520
It is not a new feature.

00:07:46,520 --> 00:07:54,160
It is kind of the opposite of a new feature, introduced to the HTML spec in 1999 and was

00:07:54,160 --> 00:08:00,810
kind of designed as a one true thing to holistically support right-to-left languages.

00:08:00,810 --> 00:08:05,430
This means that the browser support is super good - every browser supports it - but, unfortunately,

00:08:05,430 --> 00:08:09,110
it was built for a very different web.

00:08:09,110 --> 00:08:16,750
So, to time-travel back, look at a beautiful, brutalist Airbnb.com.

00:08:16,750 --> 00:08:23,190
We set the dir attribute on the top level with great success.

00:08:23,190 --> 00:08:29,570
Notably, this is designed to automatically flip inline block content and tap similar

00:08:29,570 --> 00:08:30,570
information.

00:08:30,570 --> 00:08:36,640
So, in the simplified Airbnb design, we see that everything is right-aligned as expect,

00:08:36,640 --> 00:08:42,310
labels are on the correct side of their respective inputs, and tabular data like our calendar,

00:08:42,310 --> 00:08:47,210
or even the grid of experiences flows in the right direction, which is what we want.

00:08:47,210 --> 00:08:54,000
One thing to note, though, is that inline information, like our header links, remain

00:08:54,000 --> 00:08:57,510
in the same order even with the dir attribute set.

00:08:57,510 --> 00:09:01,150
This is due to the fact that the content is written in English, and, actually, if we translated

00:09:01,150 --> 00:09:05,750
this, it would flow in the opposite direction.

00:09:05,750 --> 00:09:12,620
Another weird point that's on this page, due to mixed content, looking at the prices on

00:09:12,620 --> 00:09:19,010
our listing cards, we see that the bidirectional algorithm has identified the prices leading

00:09:19,010 --> 00:09:26,430
the class, and, as a result, in a right-to-left page, that means it's on the right side.

00:09:26,430 --> 00:09:32,810
If we translated this per person, it would actually be okay, so you can imagine this

00:09:32,810 --> 00:09:35,550
page in Arabic, pretty good.

00:09:35,550 --> 00:09:43,190
So, our first step in a right-to-left layout is to check this dir attribute on every page.

00:09:43,190 --> 00:09:49,820
At the same time we set it, it made sense to make that available down the tree to do

00:09:49,820 --> 00:09:52,550
customisation if necessary.

00:09:52,550 --> 00:09:54,730
Enter reactive direction.

00:09:54,730 --> 00:10:00,410
One of my co-workers conceived of and implemented this particular library.

00:10:00,410 --> 00:10:07,180
It follows a basic structure that we've been using a lot for top-level variables like break

00:10:07,180 --> 00:10:11,490
points, or loading data, even our internal brands.

00:10:11,490 --> 00:10:17,240
Two main exports - a direction provider which sets the direction attribute on kind of a

00:10:17,240 --> 00:10:24,230
top-level node, and a with-direction wrapper which consumes that direction as a prop and

00:10:24,230 --> 00:10:26,730
sends it down to each of its child components.

00:10:26,730 --> 00:10:31,630
So, in action, the direction provider is very simple.

00:10:31,630 --> 00:10:39,250
If we start with a basic "hello world" React app, we assemble wrap the content to the direction

00:10:39,250 --> 00:10:50,310
to rtl or LTR or if we - and set the direction appropriately.

00:10:50,310 --> 00:10:57,430
In practice, if we do nothing else, this just sets the dir attribute on the root node of

00:10:57,430 --> 00:10:58,520
our app.

00:10:58,520 --> 00:11:06,720
Once it's set, we can leverage our value down the tree by using the wrapper, and there becomes

00:11:06,720 --> 00:11:07,720
powerful.

00:11:07,720 --> 00:11:12,420
If we wanted to have a basic step incrementor component with a chevron icon that we can

00:11:12,420 --> 00:11:20,910
click and move our stepper forward, if we just put the dir attribute on top, you see

00:11:20,910 --> 00:11:26,200
it works in the right way, and because we've styled these elements in an inline block fashion,

00:11:26,200 --> 00:11:32,580
it will put it to the correct side of our text but it's pointing in the wrong direction,

00:11:32,580 --> 00:11:37,830
and if we want to solve this in a reusable way, we want to create a direction, let's

00:11:37,830 --> 00:11:40,870
call it icon chevron next.

00:11:40,870 --> 00:11:47,300
By default, it returns the icon pointing to the right, but if we wrap it and with direction,

00:11:47,300 --> 00:11:55,070
we will get access to that directional context and we can return a left icon in the rtl context.

00:11:55,070 --> 00:11:57,820
So of course this changes the game.

00:11:57,820 --> 00:12:03,000
If we reference this new and improved icon and set a direction provider at the top, we

00:12:03,000 --> 00:12:07,830
can easily have a separator that works on every language with no problem.

00:12:07,830 --> 00:12:16,290
So, with these basic tools at our disposal, we wanted to investigate how many of our components

00:12:16,290 --> 00:12:22,510
need to be wrapped in with direction and customised according to that value.

00:12:22,510 --> 00:12:27,640
Unfortunately, the answer was quite a lot.

00:12:27,640 --> 00:12:32,000
The dir attribute only handles inline block and tabular layouts, and a lot of our pages

00:12:32,000 --> 00:12:34,900
were styled in different ways.

00:12:34,900 --> 00:12:41,180
The most basic layout characteristics, the fact that this bucket box should be on the

00:12:41,180 --> 00:12:46,810
far side of the page, doesn't get - the book it box doesn't get fix by the dir attribute.

00:12:46,810 --> 00:12:52,420
We have to manually address all of these little style tweaks and spacing and things like that

00:12:52,420 --> 00:12:54,870
if we didn't come up with a better solution.

00:12:54,870 --> 00:12:59,140
We didn't have the resources to deal with that.

00:12:59,140 --> 00:13:03,620
So, we started investigate automated options.

00:13:03,620 --> 00:13:16,770
We found a number of open resource projects, RTLSS, CSS - web pack, and even like - I've

00:13:16,770 --> 00:13:19,860
lost all my slide.

00:13:19,860 --> 00:13:26,140
All of these packages came with one major caveat: they're all CSS packages.

00:13:26,140 --> 00:13:31,800
We had been spending the past two years moving away from style sheets, so none of these were

00:13:31,800 --> 00:13:34,660
really helpful for us.

00:13:34,660 --> 00:13:40,769
Maybe in 2014, when we had been relying on an internal bootstrap-like framework but at

00:13:40,769 --> 00:13:42,769
this time, it wasn't really relevant.

00:13:42,769 --> 00:13:46,769
I'm going to go on a bit of a tangent to explain.

00:13:46,769 --> 00:13:51,980
Airbnb had traditionally been Ruby on Rails backbone style sheet.

00:13:51,980 --> 00:13:58,360
But as we moved to a world of React, the style sheets we had were still associated largely

00:13:58,360 --> 00:14:06,829
with routes whereas our components were more featured-based across multiple routes and

00:14:06,829 --> 00:14:08,839
pages.

00:14:08,839 --> 00:14:15,329
We also had a lot of generic class names that were really hard to track down and grab for

00:14:15,329 --> 00:14:20,610
which made is really difficult to determine what component required which style sheet,

00:14:20,610 --> 00:14:24,950
and which style sheet was still in effect.

00:14:24,950 --> 00:14:26,860
This was like a particularly big one.

00:14:26,860 --> 00:14:32,670
If you can't figure out if a particular override or style is still being used, that ends up

00:14:32,670 --> 00:14:33,670
in us.

00:14:33,670 --> 00:14:37,950
Sending down an enormous amount of CSS some of which is an app to the page you're looking

00:14:37,950 --> 00:14:44,050
at, some of which isn't applicable to any page under Airbnb and this is causing a big

00:14:44,050 --> 00:14:46,630
performance issue.

00:14:46,630 --> 00:14:50,940
All of these things coupled together led to incident after incident.

00:14:50,940 --> 00:14:57,230
I think I sent out six individual post-mortems related to mistaken CSS style sheets so started

00:14:57,230 --> 00:14:58,970
to consider other options.

00:14:58,970 --> 00:15:05,000
The question we asked was how do we style React components while minimising side effects

00:15:05,000 --> 00:15:07,700
performance impact and implicit dependencies?

00:15:07,700 --> 00:15:12,390
The answer foreign us, and I - the answer for us, and I will emphasise is may not be

00:15:12,390 --> 00:15:19,470
for you, was to couple styles with our components and write our CSS in the React components.

00:15:19,470 --> 00:15:23,640
The idea of CSS and JS had been hot around the web for a while and there were numerous

00:15:23,640 --> 00:15:26,430
paradigms out there already.

00:15:26,430 --> 00:15:36,320
We were leaning towards the Conig Aphrodite library and we will delve into the basics

00:15:36,320 --> 00:15:39,540
of how it works.

00:15:39,540 --> 00:15:47,450
With Aphrodite, you want the create method with your definitions.

00:15:47,450 --> 00:15:53,160
It could be on import, that first render, but that needs to be accessible by your DOM

00:15:53,160 --> 00:15:54,720
elements.

00:15:54,720 --> 00:16:03,590
Aphrodite handles fancy selectors, pseudo selectors, and that's a feature bit on a pluggable

00:16:03,590 --> 00:16:09,100
selector handler which will be important for us later.

00:16:09,100 --> 00:16:16,720
What a Aphrodite does under the hoot is transpile that object to something it can understand.

00:16:16,720 --> 00:16:23,420
Notably, it hashes the key of your style and creates a class name for it and then does

00:16:23,420 --> 00:16:28,630
any special selector handling to generate the actual CSS.

00:16:28,630 --> 00:16:35,570
You reference these styles objects on your individual DOM element using the CSS method.

00:16:35,570 --> 00:16:42,540
And this in turn turns into a unique - this in turn, turns into a unique class name.

00:16:42,540 --> 00:16:48,110
What Aphrodite does is inject it directly into the page as a style tag.

00:16:48,110 --> 00:16:53,459
This is great for performance reasons because it is only ever injecting the subtitle that

00:16:53,459 --> 00:16:55,330
are actually being rendered to the page.

00:16:55,330 --> 00:17:00,790
-- it only injects the styles that are being injected into the page.

00:17:00,790 --> 00:17:07,350
We also enjoyed the parity of these definitions with React native styles.

00:17:07,350 --> 00:17:14,079
But, since the greater open source community hadn't landed on a CSS and JS solution and

00:17:14,079 --> 00:17:21,290
still hasn't landed on one true solution, we didn't want to write our thousands of components

00:17:21,290 --> 00:17:26,169
using Aphrodite only to have to write them again in six months.

00:17:26,169 --> 00:17:32,000
One of my co-workers tried to future-proof this idea of Airbnb with a package called

00:17:32,000 --> 00:17:34,360
React with Styles.

00:17:34,360 --> 00:17:40,350
The basic premise of that is that, no matter what technology you're relying on, you always

00:17:40,350 --> 00:17:43,870
write your components the exact same way.

00:17:43,870 --> 00:17:51,780
What actually does under-the-hood legwork of that styling is an interface, and most

00:17:51,780 --> 00:17:57,160
importantly, you can easily swap that interface out by changing what you register.

00:17:57,160 --> 00:18:08,890
We have interfaces for Aphrodite, CSS, and even hilariously ...

00:18:08,890 --> 00:18:11,280
just in case you change your mind.

00:18:11,280 --> 00:18:17,710
So, to write an actual component in that paradigm, you start by importing these two functions,

00:18:17,710 --> 00:18:21,140
and then the components are defined the exact same way they always have been.

00:18:21,140 --> 00:18:27,220
Instead of the binnable component, you wrap it in with styles.

00:18:27,220 --> 00:18:32,260
And styles can be defined in a very class-like manner.

00:18:32,260 --> 00:18:39,100
You can see the parity with how we why using Aphrodite before showing through in this wrapper.

00:18:39,100 --> 00:18:44,660
You can also easily reference top-level theme variables that you have defined like colour

00:18:44,660 --> 00:18:48,570
constants, or user sizes, which is pretty neat.

00:18:48,570 --> 00:18:54,210
Then, because we've wrapped our component, we actually have those styles accessible to

00:18:54,210 --> 00:18:56,200
us as a problem.

00:18:56,200 --> 00:19:01,530
We spread them on to whatever DOM node is needed using the CSS method which again you

00:19:01,530 --> 00:19:05,090
can see the parity with how Aphrodite does class names.

00:19:05,090 --> 00:19:09,940
This method can take conditional statements as well which is cool if you're trying to

00:19:09,940 --> 00:19:12,940
do some fancy stuff based on props.

00:19:12,940 --> 00:19:19,420
You can even it cannily pass in based on prop values or something calculated.

00:19:19,420 --> 00:19:23,920
This is actually an added feature of React with Styles with these objects will get convert

00:19:23,920 --> 00:19:30,920
the to an instyle tag which again is important for later.

00:19:30,920 --> 00:19:37,120
Coming back to rtl, after that lovely tangent, the environment created by React with Styles

00:19:37,120 --> 00:19:44,370
and Aphrodite proved to be both a unique challenge and a great benefit to how we implemented

00:19:44,370 --> 00:19:47,980
automatic style-flipping for right-to-left context.

00:19:47,980 --> 00:19:54,280
Even though we had to get creative with what was available to us, having this abstraction

00:19:54,280 --> 00:20:00,240
layer allowed us to its trait an experiment in an isolated playground without touching

00:20:00,240 --> 00:20:06,170
either Aphrodite or our own codebase which was pretty cooling.

00:20:06,170 --> 00:20:14,760
When considering how to flip in this environment, we considered a handful which would inform

00:20:14,760 --> 00:20:16,960
our own approach.

00:20:16,960 --> 00:20:20,540
First, we would have to handle all directional styles.

00:20:20,540 --> 00:20:25,940
Things like margin, padding, text alignment, floats, left-to-right positioning, transforms,

00:20:25,940 --> 00:20:26,940
everything.

00:20:26,940 --> 00:20:34,740
Second, and this sounds really big: we wanted zero changes as to how our developers were

00:20:34,740 --> 00:20:40,550
writing their components and didn't want to have to make any changes to the existing codebase.

00:20:40,550 --> 00:20:49,371
Third how style sheets needed to be handled and the inline style objects we were dynamically

00:20:49,371 --> 00:20:52,510
creating on Render.

00:20:52,510 --> 00:20:59,230
Of course, we didn't want to have a huge performance impact on our application while doing this

00:20:59,230 --> 00:21:00,330
process.

00:21:00,330 --> 00:21:02,480
So, attempt number 1.

00:21:02,480 --> 00:21:07,240
Got to love the number 1 because you know it is not the final one!

00:21:07,240 --> 00:21:11,060
We noted a few things that kind of like informed this attempt.

00:21:11,060 --> 00:21:16,820
So, one, style sheet creation happens on import, not on render.

00:21:16,820 --> 00:21:22,049
This means when we call that method, we don't have any access to React context or other

00:21:22,049 --> 00:21:23,250
variables.

00:21:23,250 --> 00:21:29,770
CSS method is a singleton global export, not passed down through the props which means

00:21:29,770 --> 00:21:35,250
it doesn't have any access to React context.

00:21:35,250 --> 00:21:40,570
Objects passed into the CSS method are handled at render time, not on import.

00:21:40,570 --> 00:21:42,210
That's important.

00:21:42,210 --> 00:21:46,570
We can, however, assume that all of our apps have a top-level dir attribute set, so we

00:21:46,570 --> 00:21:50,600
do have that available to us.

00:21:50,600 --> 00:21:56,540
As we noted before, Aphrodite has a built-in plug-in system to handle fancy selectors,

00:21:56,540 --> 00:22:00,900
and we can create our own selectors through this process.

00:22:00,900 --> 00:22:08,070
So you, the gameplan was to leverage Aphrodite's figure-in system to create descendent selectors.

00:22:08,070 --> 00:22:14,370
Specifically, we would wrap our default styles in the ltr context, and the flip styles in

00:22:14,370 --> 00:22:18,380
the dir squalls rtl context.

00:22:18,380 --> 00:22:26,250
It knows we added these - added these two new keys we are looking at, and the most important

00:22:26,250 --> 00:22:33,730
part of this is that we would search our generated CSS for anything that looks like a class name

00:22:33,730 --> 00:22:39,230
- Aphrodite doesn't give us a nice object to work with, it just gives us a string - but

00:22:39,230 --> 00:22:50,960
we do regec to find those and do each of one, depending on which object we are looking at.

00:22:50,960 --> 00:22:56,900
The effect of this is if this was passed into our style-sheet creation method, what would

00:22:56,900 --> 00:23:04,190
transform into, ah, is this output CSS.

00:23:04,190 --> 00:23:10,400
And so, this isn't quite enough to satisfy all of our requirements, if this selector

00:23:10,400 --> 00:23:17,840
handler was all we did, we would have to rewrite our styles to have this styles in them.

00:23:17,840 --> 00:23:23,750
So, we wanted to monkey-patch the CSS method to do all of this for us.

00:23:23,750 --> 00:23:26,730
This method takes a list of styles as arguments.

00:23:26,730 --> 00:23:32,781
It flips them up so looks at the Aphrodite styles and the inline styles separately.

00:23:32,781 --> 00:23:35,220
They go through the CSS call.

00:23:35,220 --> 00:23:39,950
The inline styles get appended to a style tag, and is to what we did was create this

00:23:39,950 --> 00:23:43,820
helper method that would split apart these styles.

00:23:43,820 --> 00:23:48,490
We relied on a really excellent package called RTL CSS.

00:23:48,490 --> 00:23:56,570
JS handling the flipping for which keys are appropriate for which context, and so we dumped

00:23:56,570 --> 00:24:01,880
out this object output, and then we passed it into the CSS.

00:24:01,880 --> 00:24:06,630
With our custom handler, we are free.

00:24:06,630 --> 00:24:11,520
With inline styles, it is a bit trickier.

00:24:11,520 --> 00:24:16,760
They have descendent selectors, obviously.

00:24:16,760 --> 00:24:23,830
We had to call the same direction method to split those apart, and, if there were flippable

00:24:23,830 --> 00:24:30,630
styles, we actually created a fake class name for that situation in the same way that Aphrodite

00:24:30,630 --> 00:24:38,950
does, and, otherwise, dependent on the style tag just as always.

00:24:38,950 --> 00:24:43,490
We had a decent amount of success with this.

00:24:43,490 --> 00:24:51,751
We didn't have to change any of our components, and we found our switch component, which is

00:24:51,751 --> 00:24:57,280
all CSS would roll in the correct way, so it was pretty good.

00:24:57,280 --> 00:25:02,429
But a number of things cropped up that led us back to the drawing board.

00:25:02,429 --> 00:25:07,100
For one, descendent selectors don't allow for content-switching.

00:25:07,100 --> 00:25:10,909
As I mentioned earlier in the presentation, we have a lot of user-generated content.

00:25:10,909 --> 00:25:16,230
You might be looking at Airbnb in Arabic but there might be a review in English, and we

00:25:16,230 --> 00:25:20,000
need to be able to align that properly.

00:25:20,000 --> 00:25:28,400
Second, descendent selectors coupled with directional styles and directional styles,

00:25:28,400 --> 00:25:32,370
things like border and border left trying to override each other, actually led to a

00:25:32,370 --> 00:25:38,179
lot of very strange specificity issues that we began exploring and learning about.

00:25:38,179 --> 00:25:44,870
And then finally, when we upgraded to React, because we have server-side rendering in our

00:25:44,870 --> 00:25:50,650
app, we started seeing whereas previously a client-side renderer would win, there were

00:25:50,650 --> 00:26:01,110
discrepancies that would manifest themselves in really bizarre and like undebuggable ways.

00:26:01,110 --> 00:26:06,370
So, we went back to the drawing board.

00:26:06,370 --> 00:26:12,120
Looking back at our original requirements, we made one small change which is that we

00:26:12,120 --> 00:26:16,700
would allow changes to our components as long as they were easily code moddable - moddable

00:26:16,700 --> 00:26:23,030
and could manufacturer the script.

00:26:23,030 --> 00:26:30,590
We made sure we could handle context-switching but no specificity issues, so dependent selectors

00:26:30,590 --> 00:26:38,520
were probably out, and that specifically, there wasn't a server-client mismatch in some

00:26:38,520 --> 00:26:39,680
occasions.

00:26:39,680 --> 00:26:47,390
So, our new strategy was to create contextual create-and-resolve methods based on direction.

00:26:47,390 --> 00:26:51,530
This notably was a bit of a challenge because, as mentioned before, these methods did not

00:26:51,530 --> 00:26:55,730
have access to context in the beginning.

00:26:55,730 --> 00:27:00,432
How this would look in our interface, whereas before we would have just one create and one

00:27:00,432 --> 00:27:05,210
resolve method that would have to handle on everything, we split it up.

00:27:05,210 --> 00:27:09,270
There's one for the left-to-right languages, and there's one for the right-to-left.

00:27:09,270 --> 00:27:16,090
For Create, this was super easy, for, like, in a default context, we called style sheet,

00:27:16,090 --> 00:27:22,929
create as normal, and the rtl context, we simply flip the styles into the pack I suggest

00:27:22,929 --> 00:27:31,340
and put that into - inline styles is a similarly simple solution, we would just flip the styles,

00:27:31,340 --> 00:27:35,549
so now there is no specificity issues, no challenges between the two.

00:27:35,549 --> 00:27:37,280
Pretty good.

00:27:37,280 --> 00:27:43,890
And the way we made this accessible to all of our components is, before we were creating

00:27:43,890 --> 00:27:47,840
the style sheet on import, so, again, no context.

00:27:47,840 --> 00:27:53,159
So we deferred it to the first renderer, and then picked the appropriate create method

00:27:53,159 --> 00:27:54,720
based on directional context.

00:27:54,720 --> 00:28:00,450
We are assuming that our apps are all wrapped in the direction provider.

00:28:00,450 --> 00:28:08,880
But again, this doesn't consider dynamically-created inline styles, so we also picked our CSS method

00:28:08,880 --> 00:28:10,790
based on the same context.

00:28:10,790 --> 00:28:15,580
And the difference now is we pass it in as a prop.

00:28:15,580 --> 00:28:20,919
So the main change 24-hour components, whereas previously they were written like this, we

00:28:20,919 --> 00:28:25,220
would now pull the CSS method from our props and call it instead.

00:28:25,220 --> 00:28:30,140
This is prettily easily code moddable, easy to write a script that handled all of our

00:28:30,140 --> 00:28:36,070
cases off the bat, and the effect is pretty stunning.

00:28:36,070 --> 00:28:42,279
With just a few changes to accurate calm, we are about to -- to countercalm -- ecosystem,

00:28:42,279 --> 00:28:50,150
we are go to get - we still haven't launched but we still have a way of testing across

00:28:50,150 --> 00:28:54,450
the entire platform but we don't expect to run into too much trouble.

00:28:54,450 --> 00:28:58,460
The journey has gotten us an enormous way there, and we look forward to rolling out

00:28:58,460 --> 00:29:03,080
these languages in the future and making Airbnb a bit more accessible to people across the

00:29:03,080 --> 00:29:04,080
world.

00:29:04,080 --> 00:29:09,700
And, if you would like to learn more, I highly recommend checking out a React with Direction

00:29:09,700 --> 00:29:16,450
package, a React with Styles pack I suggest, and the JSS and CSS package, and you can always

00:29:16,450 --> 00:29:18,779
tweet at me if you have any questions.

00:29:18,780 --> 00:29:19,780
Thank you.

00:29:19,920 --> 00:29:23,080

YouTube URL: https://www.youtube.com/watch?v=A_3BfONFRUc


