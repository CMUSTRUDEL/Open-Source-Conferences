Title: Jean-Yves Perrier: Today: Making a browser fast, the story of Firefox Quantum | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/jean-yves-perrier/

What is expected from a browser has changed over the years. From displaying a simple text pages with a few images in the 90s to a tool that displays 4K videos at 120 fps for Virtual Reality applications, browser had to evolve to keep up with the expectation.

Through the example of Firefox, this is the story of some of the needed changes that modern browsers underwent over the past few years. How they fought yank, freezes and kept up being perceived as fast.
Captions: 
	00:00:00,030 --> 00:00:08,370
so hello everybody I'm really exciting

00:00:03,990 --> 00:00:10,469
to be here and to talk about how browser

00:00:08,370 --> 00:00:14,130
makers are making brother fast and I

00:00:10,469 --> 00:00:19,470
will use Firefox quantum as an example

00:00:14,130 --> 00:00:22,970
of how browser vendors are modifying the

00:00:19,470 --> 00:00:26,939
browser to cope with the 21st century

00:00:22,970 --> 00:00:29,070
most of the things that I'm about to say

00:00:26,939 --> 00:00:31,380
is also valid for a lot of other

00:00:29,070 --> 00:00:37,559
browsers but I'm taking the example of

00:00:31,380 --> 00:00:40,200
Firefox content so I'm George Bailey I'm

00:00:37,559 --> 00:00:44,760
part of developer outreach at Mozilla

00:00:40,200 --> 00:00:47,489
and I have a Twitter account so the

00:00:44,760 --> 00:00:49,440
story starts a little bit with how a

00:00:47,489 --> 00:00:51,620
computer works so at the core of the

00:00:49,440 --> 00:00:56,280
computer there is a processor and

00:00:51,620 --> 00:00:59,699
processors have evolved over the years

00:00:56,280 --> 00:01:03,090
very quickly initially in the 70s 80s

00:00:59,699 --> 00:01:06,330
90s of last century there was something

00:01:03,090 --> 00:01:09,150
called the more low that was basically

00:01:06,330 --> 00:01:13,619
saying that every two years or every

00:01:09,150 --> 00:01:17,040
three years your computer becomes twice

00:01:13,619 --> 00:01:20,159
as fast as previous which was very

00:01:17,040 --> 00:01:22,500
convenient for people making programs

00:01:20,159 --> 00:01:24,869
and browser in particular because you do

00:01:22,500 --> 00:01:27,540
nothing and two or three years later

00:01:24,869 --> 00:01:32,840
your browser is twice as fast it's kind

00:01:27,540 --> 00:01:36,710
of free lunch lately at the beginning

00:01:32,840 --> 00:01:40,500
was second decade of this 21st century

00:01:36,710 --> 00:01:42,210
people are seeing that processor or not

00:01:40,500 --> 00:01:46,320
I'm not really doubling the speed

00:01:42,210 --> 00:01:48,619
anymore each 2 or 3 years it's still a

00:01:46,320 --> 00:01:52,409
little bit true for the high end

00:01:48,619 --> 00:01:54,689
processors but in fact it doesn't really

00:01:52,409 --> 00:01:56,969
matter for somewhere because we are no

00:01:54,689 --> 00:02:00,000
more in a point where we want the web to

00:01:56,969 --> 00:02:02,579
run only on the high end processor most

00:02:00,000 --> 00:02:06,420
of the time you want it to run on such

00:02:02,579 --> 00:02:08,610
device and it's not the latest the most

00:02:06,420 --> 00:02:12,400
powerful processor in it because as the

00:02:08,610 --> 00:02:15,120
battery will just last 5 minutes so

00:02:12,400 --> 00:02:19,510
processor has found a different way to

00:02:15,120 --> 00:02:21,700
increase the calculation power and it's

00:02:19,510 --> 00:02:24,840
by having more calls

00:02:21,700 --> 00:02:27,310
so more processing power in parallel and

00:02:24,840 --> 00:02:29,709
the difference here is there is no free

00:02:27,310 --> 00:02:32,560
lunch program has to adapt themselves

00:02:29,709 --> 00:02:34,599
and to make use of this multiple course

00:02:32,560 --> 00:02:43,000
of this concurrency that is now

00:02:34,599 --> 00:02:45,489
available at the same time on two

00:02:43,000 --> 00:02:48,579
browsers what we want browsers to do has

00:02:45,489 --> 00:02:50,139
changed over the years so at the

00:02:48,579 --> 00:02:52,870
beginning it was just displaying a

00:02:50,139 --> 00:02:54,670
document and even in 2005 if you were

00:02:52,870 --> 00:02:57,430
able to put a few images and making

00:02:54,670 --> 00:03:00,700
rounded corner or on the box

00:02:57,430 --> 00:03:04,420
you were top-notch developer it's not

00:03:00,700 --> 00:03:09,060
the case anymore today and what we want

00:03:04,420 --> 00:03:13,079
today is to have HD videos running with

00:03:09,060 --> 00:03:16,359
transparency effect with rotations and

00:03:13,079 --> 00:03:19,540
you want all these to run at 60 frames

00:03:16,359 --> 00:03:22,629
per second you want all these to run on

00:03:19,540 --> 00:03:24,160
your virtual reality headset which means

00:03:22,629 --> 00:03:25,629
that in fact you need more than 60

00:03:24,160 --> 00:03:28,510
frames per second because if you want

00:03:25,629 --> 00:03:31,000
with a virtual reality headset not to be

00:03:28,510 --> 00:03:33,909
to have motion sickness you need at

00:03:31,000 --> 00:03:37,989
least 80 if not 100 100 frames per

00:03:33,909 --> 00:03:41,319
second in order to achieve this in order

00:03:37,989 --> 00:03:43,870
to cope with this browser had to adapt

00:03:41,319 --> 00:03:45,790
they were designed in the 80s and the

00:03:43,870 --> 00:03:47,949
80s and mostly at the beginning of the

00:03:45,790 --> 00:03:51,010
90s even if they have evolved of the

00:03:47,949 --> 00:03:55,930
years it's not the same architecture

00:03:51,010 --> 00:03:58,659
that is able to run so modern web so

00:03:55,930 --> 00:04:01,479
this story today is about telling you

00:03:58,659 --> 00:04:03,159
what browser vendors are doing in order

00:04:01,479 --> 00:04:05,799
to make your website view web

00:04:03,159 --> 00:04:11,109
application faster even without you

00:04:05,799 --> 00:04:15,040
having to do anything the browser is a

00:04:11,109 --> 00:04:18,039
user agent and in 2008 we used this

00:04:15,040 --> 00:04:21,669
robot for the launch and 543 it's a

00:04:18,039 --> 00:04:25,389
friendly robot but of course over the

00:04:21,669 --> 00:04:26,380
next decade it looks a little bit clunky

00:04:25,389 --> 00:04:30,940
is it still

00:04:26,380 --> 00:04:34,960
user agent that we want to have on the

00:04:30,940 --> 00:04:43,900
web so the question is what a modern

00:04:34,960 --> 00:04:47,740
browser is doing in 2018 sorry first

00:04:43,900 --> 00:04:50,950
part is how does a web browser work and

00:04:47,740 --> 00:04:52,630
especially the rendering engine so this

00:04:50,950 --> 00:04:54,100
is quite important to understand a

00:04:52,630 --> 00:04:57,430
little bit so that you understand what

00:04:54,100 --> 00:05:00,580
changes are happening so the first thing

00:04:57,430 --> 00:05:02,590
is your browser is downloading pages its

00:05:00,580 --> 00:05:06,340
request handle on the web and it gets

00:05:02,590 --> 00:05:09,490
HTML the JavaScript the CSS files and

00:05:06,340 --> 00:05:11,590
just pass all these into an HTML parser

00:05:09,490 --> 00:05:14,710
as a JavaScript engine the CSS parser

00:05:11,590 --> 00:05:18,640
and what it does is to generate the Dom

00:05:14,710 --> 00:05:21,100
of nodes so each time you modify the Dom

00:05:18,640 --> 00:05:24,520
of nodes the whole process starts again

00:05:21,100 --> 00:05:27,130
not downloading but what follow up so

00:05:24,520 --> 00:05:31,150
with the CSS the first things to go in a

00:05:27,130 --> 00:05:34,840
rendering engine is the stein engine the

00:05:31,150 --> 00:05:38,410
styl engine take the CSS and applied and

00:05:34,840 --> 00:05:40,150
define what rules are applied to each of

00:05:38,410 --> 00:05:42,430
the boxes it doesn't apply them the yet

00:05:40,150 --> 00:05:46,560
but you just defined what has a set of

00:05:42,430 --> 00:05:49,390
rules that match each element of the Dom

00:05:46,560 --> 00:05:52,330
when you have this you add all the media

00:05:49,390 --> 00:05:54,880
so the images videos and you can know

00:05:52,330 --> 00:05:56,980
the size of the images the size of the

00:05:54,880 --> 00:05:58,890
videos and when you have this you have a

00:05:56,980 --> 00:06:01,660
face that is a layout which is in fact

00:05:58,890 --> 00:06:05,140
defining where on the page will be

00:06:01,660 --> 00:06:07,360
displayed each of the boxes you have

00:06:05,140 --> 00:06:09,640
several layers because they can be on

00:06:07,360 --> 00:06:12,460
top of each others but you don't know

00:06:09,640 --> 00:06:15,760
yet what is inside the layers and which

00:06:12,460 --> 00:06:19,780
layer is winning the next step is a

00:06:15,760 --> 00:06:22,180
paint so this is to apply texture on

00:06:19,780 --> 00:06:24,610
each of the layers that will define okay

00:06:22,180 --> 00:06:27,370
this texture is the video this texture

00:06:24,610 --> 00:06:30,820
is the image this texture is just a

00:06:27,370 --> 00:06:33,010
background or some text from this then

00:06:30,820 --> 00:06:34,930
you have to define which pixels are

00:06:33,010 --> 00:06:37,150
visible this is the next step and the

00:06:34,930 --> 00:06:40,080
last step that is a compositor and then

00:06:37,150 --> 00:06:42,780
you go to your page on the screen

00:06:40,080 --> 00:06:44,220
and each time you modify the Dom you

00:06:42,780 --> 00:06:47,669
have to go through this process again

00:06:44,220 --> 00:06:50,520
for years and years browser have already

00:06:47,669 --> 00:06:52,919
optimized this part by only redesigning

00:06:50,520 --> 00:06:55,110
or redrawing the part of the page that

00:06:52,919 --> 00:06:57,870
are actually modified when you change

00:06:55,110 --> 00:07:00,330
the Dom and not the whole page but this

00:06:57,870 --> 00:07:06,240
is really the big the big an important

00:07:00,330 --> 00:07:09,690
element atmosphere in order to improve

00:07:06,240 --> 00:07:11,669
this we wanted to test new algorithm and

00:07:09,690 --> 00:07:13,919
we wanted especially to work on

00:07:11,669 --> 00:07:15,599
parallelization so what we have done

00:07:13,919 --> 00:07:19,710
first we have created a new language

00:07:15,599 --> 00:07:22,250
called rust rust is replacing little by

00:07:19,710 --> 00:07:25,469
little the different part of Firefox

00:07:22,250 --> 00:07:28,020
written in C++ by by this language and

00:07:25,469 --> 00:07:33,800
this language has been designed to make

00:07:28,020 --> 00:07:36,780
the writing of of codes that can be

00:07:33,800 --> 00:07:39,780
executed on multiple core on multiple

00:07:36,780 --> 00:07:43,259
thread much much easier with less errors

00:07:39,780 --> 00:07:45,150
than C++ and so that's really important

00:07:43,259 --> 00:07:48,150
because a lot of people are contributing

00:07:45,150 --> 00:07:50,430
to the code and if even if most people

00:07:48,150 --> 00:07:53,270
are really good programmers they do Aero

00:07:50,430 --> 00:07:55,740
but you can also get patches for

00:07:53,270 --> 00:07:57,690
programmers that less experienced and

00:07:55,740 --> 00:08:02,330
they will not do the basics common

00:07:57,690 --> 00:08:05,639
errors we created then an experimental

00:08:02,330 --> 00:08:08,370
engine and experimental browser called

00:08:05,639 --> 00:08:15,110
servo it's written in rust

00:08:08,370 --> 00:08:18,000
it has algorithm that take paradism and

00:08:15,110 --> 00:08:20,789
that allows us to check if this

00:08:18,000 --> 00:08:23,729
algorithm are very working very well and

00:08:20,789 --> 00:08:25,979
also it has no significant UI it's not a

00:08:23,729 --> 00:08:28,469
real browser it's something to test if

00:08:25,979 --> 00:08:30,389
the idea we have are good or not and

00:08:28,469 --> 00:08:33,870
finally and this is the most important

00:08:30,389 --> 00:08:36,899
part servo can break the web so where is

00:08:33,870 --> 00:08:39,180
a very complex piece and there is a lot

00:08:36,899 --> 00:08:41,550
of special cases with special CSS

00:08:39,180 --> 00:08:43,440
properties and so on and in fact to test

00:08:41,550 --> 00:08:46,350
the algorithm you don't want to have to

00:08:43,440 --> 00:08:48,180
write the engine in all the detail first

00:08:46,350 --> 00:08:50,730
you won't first validate that in the

00:08:48,180 --> 00:08:53,700
good case in the easy case you get the

00:08:50,730 --> 00:08:58,290
speed improvements that you were you

00:08:53,700 --> 00:09:03,810
to have so we did this several and we

00:08:58,290 --> 00:09:06,360
developed a lot of things on it at the

00:09:03,810 --> 00:09:09,030
same time we wanted to solve several

00:09:06,360 --> 00:09:11,010
other problems so a firefox had a

00:09:09,030 --> 00:09:12,900
stability problem we noticed over the

00:09:11,010 --> 00:09:16,380
last few years that he was has a lot of

00:09:12,900 --> 00:09:18,420
crashes and we were wondering why it has

00:09:16,380 --> 00:09:21,000
an old theme so like the robots that

00:09:18,420 --> 00:09:25,380
were loop is just looking old by just

00:09:21,000 --> 00:09:27,090
having an old theme when the UI in OSS

00:09:25,380 --> 00:09:29,820
has been improved

00:09:27,090 --> 00:09:31,950
it feels slow and also there was a lot

00:09:29,820 --> 00:09:33,810
of cases where in fact the user

00:09:31,950 --> 00:09:36,510
interface was freezing

00:09:33,810 --> 00:09:38,340
it's called UI young and finally we

00:09:36,510 --> 00:09:45,710
wanted to increase to have the new

00:09:38,340 --> 00:09:50,550
algorithm so we launched we launched a

00:09:45,710 --> 00:09:52,770
project called quantum la the beginning

00:09:50,550 --> 00:09:54,720
of last year and we decided we want to

00:09:52,770 --> 00:10:00,020
make a quantum leap in performance and

00:09:54,720 --> 00:10:02,070
in the way the website are rendered

00:10:00,020 --> 00:10:04,590
there are several things that has been

00:10:02,070 --> 00:10:06,030
done but the first thing and I want

00:10:04,590 --> 00:10:13,020
first to thank my colleague 9 o'clock

00:10:06,030 --> 00:10:16,650
who has drawn this amazing drawing I'm

00:10:13,020 --> 00:10:20,460
absolutely unable unable to to make any

00:10:16,650 --> 00:10:23,520
drawings that looks readable by anybody

00:10:20,460 --> 00:10:25,680
so she's doing a lot of these drawings

00:10:23,520 --> 00:10:26,880
she's writing blog post explaining how a

00:10:25,680 --> 00:10:29,970
browser is working

00:10:26,880 --> 00:10:31,950
there will be a link later that allow

00:10:29,970 --> 00:10:33,660
you to have more information so the

00:10:31,950 --> 00:10:37,470
first things that we have decided to do

00:10:33,660 --> 00:10:40,200
is to change our Stan engine so the

00:10:37,470 --> 00:10:43,670
style engine as I said take the

00:10:40,200 --> 00:10:47,100
different CSS properties look at the

00:10:43,670 --> 00:10:50,190
selectors at the specification and in

00:10:47,100 --> 00:10:52,710
fact for each of the boxes define ok

00:10:50,190 --> 00:10:54,780
these properties with this value apply

00:10:52,710 --> 00:10:59,250
to this one for example the background

00:10:54,780 --> 00:11:02,430
color of the text color as a font and so

00:10:59,250 --> 00:11:05,760
on this is something that has to be done

00:11:02,430 --> 00:11:07,530
to each and every boxes so this is at

00:11:05,760 --> 00:11:11,760
first sight something that can be

00:11:07,530 --> 00:11:17,370
use very easily to with a parallel with

00:11:11,760 --> 00:11:21,170
paralyzation and so we tried it in rust

00:11:17,370 --> 00:11:24,120
on style so basically we had several

00:11:21,170 --> 00:11:25,530
processes several threads that takes

00:11:24,120 --> 00:11:28,140
part of the tree and makes the

00:11:25,530 --> 00:11:31,320
calculation and of course it's not that

00:11:28,140 --> 00:11:34,260
easy because first you don't have one

00:11:31,320 --> 00:11:35,910
thread one process per element on the

00:11:34,260 --> 00:11:39,510
page because are sometimes several

00:11:35,910 --> 00:11:41,550
thousand of them so you have to give

00:11:39,510 --> 00:11:44,100
chunk of the page to each of the

00:11:41,550 --> 00:11:46,980
processes so that means that some of

00:11:44,100 --> 00:11:49,320
this process are just idle at some point

00:11:46,980 --> 00:11:50,880
because there is nothing happening is I

00:11:49,320 --> 00:11:53,400
finished their work while other may be

00:11:50,880 --> 00:11:56,310
extremely busy so there is a very big

00:11:53,400 --> 00:11:58,200
complex algorithm here that allows the

00:11:56,310 --> 00:12:01,260
different threads or different processes

00:11:58,200 --> 00:12:08,210
to still work from the other when they

00:12:01,260 --> 00:12:12,440
are idle so with this we created and we

00:12:08,210 --> 00:12:16,110
validated that's a new way of doing

00:12:12,440 --> 00:12:19,200
styling in the browser is in fact much

00:12:16,110 --> 00:12:20,970
much more efficient but that was only

00:12:19,200 --> 00:12:23,339
the first step because this is in

00:12:20,970 --> 00:12:25,530
several in the experimental browser we

00:12:23,339 --> 00:12:29,089
needed to sort out all the detail and to

00:12:25,530 --> 00:12:31,380
integrate this into the real browser and

00:12:29,089 --> 00:12:33,830
integrating a new styling gene in a

00:12:31,380 --> 00:12:37,860
browser it's a little bit like doing

00:12:33,830 --> 00:12:39,089
heart surgery but with a person that is

00:12:37,860 --> 00:12:43,050
still conscious

00:12:39,089 --> 00:12:45,390
you you want to browser to continue to

00:12:43,050 --> 00:12:49,110
work you don't want suddenly have no new

00:12:45,390 --> 00:12:52,230
release for one year two years while you

00:12:49,110 --> 00:12:55,140
put all the wire together so we took the

00:12:52,230 --> 00:12:57,570
stylus or quantum CSS with a parallelism

00:12:55,140 --> 00:13:00,270
we integrate it with a rule tree from

00:12:57,570 --> 00:13:03,210
Firefox and also we took the staggering

00:13:00,270 --> 00:13:07,110
cache from Chrome and Safari so the

00:13:03,210 --> 00:13:08,520
start sharing cache just memorize things

00:13:07,110 --> 00:13:10,589
you have already calculated because

00:13:08,520 --> 00:13:12,630
sometimes on the page a lot of nodes

00:13:10,589 --> 00:13:17,040
have the same ancestors and the same

00:13:12,630 --> 00:13:18,600
values so it works pretty well in fact

00:13:17,040 --> 00:13:21,180
it wasn't working that well anymore

00:13:18,600 --> 00:13:23,670
because lately with all

00:13:21,180 --> 00:13:24,990
you do classes and so on it became more

00:13:23,670 --> 00:13:29,220
complex and there are less of these

00:13:24,990 --> 00:13:32,310
elements that are there that were cashed

00:13:29,220 --> 00:13:36,090
so we modified so start sharing cash in

00:13:32,310 --> 00:13:39,720
orders for it to work again and then we

00:13:36,090 --> 00:13:42,390
just transplanted stylo into the browser

00:13:39,720 --> 00:13:45,390
and this happened last November in

00:13:42,390 --> 00:13:49,200
Firefox 57 and we got for this spot a

00:13:45,390 --> 00:13:51,150
very very large improvement in speed so

00:13:49,200 --> 00:13:54,300
style is the first technology transfer

00:13:51,150 --> 00:13:57,450
from several it's not the first part of

00:13:54,300 --> 00:13:59,370
rust inside the browser and it is

00:13:57,450 --> 00:14:01,590
solving a problem that is called

00:13:59,370 --> 00:14:04,230
embarrassingly parallel problem by

00:14:01,590 --> 00:14:06,920
definition style engine are doing

00:14:04,230 --> 00:14:11,550
something that can be massively

00:14:06,920 --> 00:14:14,130
paralyzed and of course when the page is

00:14:11,550 --> 00:14:16,440
simple you see little improvement when

00:14:14,130 --> 00:14:24,390
the page is very complex you see a lot

00:14:16,440 --> 00:14:28,290
of improvement browser has another

00:14:24,390 --> 00:14:31,190
challenge each time you click somewhere

00:14:28,290 --> 00:14:34,320
on the browser there is an even handler

00:14:31,190 --> 00:14:38,310
going on and firing and executing some

00:14:34,320 --> 00:14:40,620
code and you want to be sure if you want

00:14:38,310 --> 00:14:43,230
to have 60 frames per second or 120

00:14:40,620 --> 00:14:45,390
frames per second that all that's

00:14:43,230 --> 00:14:48,600
happening on the main thread and

00:14:45,390 --> 00:14:51,660
especially these handlers happening is

00:14:48,600 --> 00:14:54,810
no more than 16 millisecond or 8

00:14:51,660 --> 00:14:56,220
millisecond for 120 frame per second so

00:14:54,810 --> 00:14:58,140
that means that you have to go out of

00:14:56,220 --> 00:15:00,000
the main straight as soon as possible

00:14:58,140 --> 00:15:03,150
because while you're on the main thread

00:15:00,000 --> 00:15:05,430
you cannot handle the next even so

00:15:03,150 --> 00:15:08,870
Lex even when you are calling a page or

00:15:05,430 --> 00:15:08,870
when you are clicking and so on

00:15:08,900 --> 00:15:13,890
initially browser had everything on the

00:15:12,240 --> 00:15:16,170
main thread and little by little over

00:15:13,890 --> 00:15:18,420
the years I start to take things out so

00:15:16,170 --> 00:15:20,400
first of of them is a video decoding

00:15:18,420 --> 00:15:23,670
that is happening now most of the time

00:15:20,400 --> 00:15:27,840
on the graphic cloud itself there was a

00:15:23,670 --> 00:15:29,760
plugins also a display canvas worker and

00:15:27,840 --> 00:15:32,760
several others but what is quite

00:15:29,760 --> 00:15:36,750
interesting is

00:15:32,760 --> 00:15:48,500
we have another piece of computer power

00:15:36,750 --> 00:15:52,380
on a browser that is a GPU the GPU is

00:15:48,500 --> 00:15:54,270
designed for games is designed for the

00:15:52,380 --> 00:15:57,960
operating system where you have a lot of

00:15:54,270 --> 00:16:00,540
calculation to do on a lot of data the

00:15:57,960 --> 00:16:03,210
same operation on a very large amount of

00:16:00,540 --> 00:16:04,890
data and it's very very efficient for

00:16:03,210 --> 00:16:08,880
this kind of things it's very efficient

00:16:04,890 --> 00:16:10,500
for gaming on the browser we have this

00:16:08,880 --> 00:16:13,680
kind of operation one of them is a

00:16:10,500 --> 00:16:15,240
compositing so the last bit of the

00:16:13,680 --> 00:16:17,160
calculation where you have all the

00:16:15,240 --> 00:16:18,450
layers and you have to define which one

00:16:17,160 --> 00:16:20,940
are visible or not it's the same

00:16:18,450 --> 00:16:25,610
operation most of the time on a lot of

00:16:20,940 --> 00:16:28,530
data so we decided in 2016 to offload

00:16:25,610 --> 00:16:31,680
the composition to the GPU and we did it

00:16:28,530 --> 00:16:34,020
and improve a lot at the same time a

00:16:31,680 --> 00:16:37,590
little bit later in fact we notice that

00:16:34,020 --> 00:16:40,770
the crash is just increased we had a lot

00:16:37,590 --> 00:16:42,420
of crashes and in fact it wasn't the

00:16:40,770 --> 00:16:43,920
browser itself that was buggy it was the

00:16:42,420 --> 00:16:46,140
drivers that were Birdie

00:16:43,920 --> 00:16:48,510
so the crash the crashes were mostly

00:16:46,140 --> 00:16:51,780
happening on Windows and for example Mac

00:16:48,510 --> 00:16:54,930
has very few few grush crashes because

00:16:51,780 --> 00:16:59,070
of farlis type of divert for less types

00:16:54,930 --> 00:17:00,930
of graphic cards and less bugs so we

00:16:59,070 --> 00:17:05,339
decided last year to solve the crashes

00:17:00,930 --> 00:17:07,310
by having the GPU in the graphic drivers

00:17:05,339 --> 00:17:10,829
load in a different process so the

00:17:07,310 --> 00:17:13,440
process crash the browser detected crash

00:17:10,829 --> 00:17:16,050
it's restarted and then it works without

00:17:13,440 --> 00:17:18,480
using the GPU for this part so you don't

00:17:16,050 --> 00:17:20,220
have all the speed improvement of the

00:17:18,480 --> 00:17:22,350
GPU but you don't have the crashes

00:17:20,220 --> 00:17:27,630
either so that's a way we had to

00:17:22,350 --> 00:17:29,040
mitigate the bugs in graphic drivers so

00:17:27,630 --> 00:17:33,180
the compositor is the first part that

00:17:29,040 --> 00:17:37,650
went to the GPU at the beginning of last

00:17:33,180 --> 00:17:39,630
year another part is a painting so the

00:17:37,650 --> 00:17:41,640
painting is to take a texture and to

00:17:39,630 --> 00:17:43,980
apply it to the surface it's cool or

00:17:41,640 --> 00:17:46,169
rasterization and we want to do the same

00:17:43,980 --> 00:17:48,989
off-roading li2 GPU

00:17:46,169 --> 00:17:51,379
and this is a project called WebRunner

00:17:48,989 --> 00:17:54,629
it's not yet finished it's in progress

00:17:51,379 --> 00:17:56,340
this is ultimate goal I don't know when

00:17:54,629 --> 00:17:58,619
it will be finished because if you asks

00:17:56,340 --> 00:18:01,019
management they say very soon and if you

00:17:58,619 --> 00:18:01,379
ask the developers I say oh in several

00:18:01,019 --> 00:18:05,389
years

00:18:01,379 --> 00:18:05,389
so it's some somewhere in between

00:18:05,509 --> 00:18:11,639
meanwhile we decided that okay even if

00:18:10,080 --> 00:18:14,999
we don't send it to the GPU

00:18:11,639 --> 00:18:17,100
we can remove it from the main thread so

00:18:14,999 --> 00:18:18,570
we have what we call off main straight

00:18:17,100 --> 00:18:20,429
painting just what's right for the

00:18:18,570 --> 00:18:24,059
painting and this has been done in

00:18:20,429 --> 00:18:28,259
Firefox 58 which went out in January so

00:18:24,059 --> 00:18:30,840
basically we create a set of instruction

00:18:28,259 --> 00:18:34,109
the display list that is applied to

00:18:30,840 --> 00:18:36,629
assign to the layers and then we send it

00:18:34,109 --> 00:18:41,009
to another process that rasterize which

00:18:36,629 --> 00:18:43,169
is actual painting operation and then

00:18:41,009 --> 00:18:48,210
sent to the compositor that is in its

00:18:43,169 --> 00:18:50,909
own process or on the GPU and that way

00:18:48,210 --> 00:18:53,249
as soon as the rasterization is no more

00:18:50,909 --> 00:18:55,409
on the main thread so that means that

00:18:53,249 --> 00:18:57,359
you can trace the next displaylist and

00:18:55,409 --> 00:18:59,249
so on so we remove the bottleneck it's

00:18:57,359 --> 00:19:01,679
not as perfect as having everything on

00:18:59,249 --> 00:19:03,929
the GPU we still sometimes lose frames

00:19:01,679 --> 00:19:05,669
when it's gone a lot of changes but much

00:19:03,929 --> 00:19:09,690
less of it's no more the rasterization

00:19:05,669 --> 00:19:11,580
the problem so this landed in Firefox 58

00:19:09,690 --> 00:19:14,159
and there is an improvement coming the

00:19:11,580 --> 00:19:16,019
next version into it where in fact we

00:19:14,159 --> 00:19:18,629
discover that this Palast we don't need

00:19:16,019 --> 00:19:21,119
to recalculate it each time for simple

00:19:18,629 --> 00:19:23,489
but it's not the most efficient so now

00:19:21,119 --> 00:19:25,499
we have you ristic in place so that we

00:19:23,489 --> 00:19:29,179
don't recalculate so this play list was

00:19:25,499 --> 00:19:29,179
a who loved the display list each time

00:19:30,649 --> 00:19:37,789
so until now we have mostly seen

00:19:33,690 --> 00:19:40,649
replacement of pieces of the browser and

00:19:37,789 --> 00:19:44,389
in fact if you want to have a browser

00:19:40,649 --> 00:19:47,549
that is efficient that feel quick

00:19:44,389 --> 00:19:50,220
responsive you need to consider it as a

00:19:47,549 --> 00:19:52,619
system as a whole because yes you can

00:19:50,220 --> 00:19:56,099
have a very efficient style engine but

00:19:52,619 --> 00:19:58,710
maybe the bottleneck is somewhere ads so

00:19:56,099 --> 00:20:01,610
we changed a way to do development

00:19:58,710 --> 00:20:04,500
and to prioritize the development masya

00:20:01,610 --> 00:20:07,140
by having the moto measure all the

00:20:04,500 --> 00:20:10,620
things then we triage we prioritize and

00:20:07,140 --> 00:20:13,020
weary measure and we applied this and we

00:20:10,620 --> 00:20:16,860
still apply this to fight young so

00:20:13,020 --> 00:20:19,799
freeze in the UI and there is a

00:20:16,860 --> 00:20:22,860
collection of 30 blog post by Asian act

00:20:19,799 --> 00:20:24,539
Garin that explain all the changes that

00:20:22,860 --> 00:20:28,230
happen all over the place it's it's

00:20:24,539 --> 00:20:30,809
going on a lot of details and she calls

00:20:28,230 --> 00:20:33,840
her name death by a million cuts we

00:20:30,809 --> 00:20:37,260
found bugs where we had to fix ten bugs

00:20:33,840 --> 00:20:39,450
and suddenly we get back a lot of time

00:20:37,260 --> 00:20:41,789
each of the bug individually in the

00:20:39,450 --> 00:20:43,230
individual fix were just shaving one

00:20:41,789 --> 00:20:44,940
millisecond here there but no

00:20:43,230 --> 00:20:47,029
significant difference but the ten

00:20:44,940 --> 00:20:50,669
together we're leaving a lot of

00:20:47,029 --> 00:20:52,200
differences so one of the things that we

00:20:50,669 --> 00:20:54,350
change is a way we were doing is

00:20:52,200 --> 00:20:56,789
crawling it's it's not specific to

00:20:54,350 --> 00:20:59,460
Firefox at all and it has been pioneered

00:20:56,789 --> 00:21:03,149
by Apple and it's called checkerboarding

00:20:59,460 --> 00:21:07,049
you when you scroll on your screen with

00:21:03,149 --> 00:21:10,080
a mouse with the finger you never want

00:21:07,049 --> 00:21:12,330
to scroll to stop but sometimes it goes

00:21:10,080 --> 00:21:14,279
too quick and you don't have the time to

00:21:12,330 --> 00:21:16,230
calculate what to present to the screen

00:21:14,279 --> 00:21:19,529
so you present a default value and

00:21:16,230 --> 00:21:23,039
people instead of being confused scroll

00:21:19,529 --> 00:21:25,380
less quickly the data appear the images

00:21:23,039 --> 00:21:26,090
appear and initially it was a chick

00:21:25,380 --> 00:21:28,830
abort

00:21:26,090 --> 00:21:32,149
that's why it's called Chicka bowling so

00:21:28,830 --> 00:21:36,169
the the X overall speed is not better

00:21:32,149 --> 00:21:39,059
but the feeling is completely different

00:21:36,169 --> 00:21:41,960
and those are big things that we have

00:21:39,059 --> 00:21:44,279
changes what we call IPC inter-process

00:21:41,960 --> 00:21:46,950
communication so it's known for a long

00:21:44,279 --> 00:21:49,470
time that when you communicate for

00:21:46,950 --> 00:21:51,120
example with a disc it takes a lot of

00:21:49,470 --> 00:21:54,929
time and you don't want to do this on

00:21:51,120 --> 00:21:57,210
the hub on the main thread it's the same

00:21:54,929 --> 00:21:59,669
when you communicate with another

00:21:57,210 --> 00:22:02,460
process especially if it's synchronous

00:21:59,669 --> 00:22:05,159
communication you don't want to do this

00:22:02,460 --> 00:22:07,049
on the main thread so we fight

00:22:05,159 --> 00:22:08,639
synchronous communication and you want

00:22:07,049 --> 00:22:10,380
it to have as many as synchronous

00:22:08,639 --> 00:22:12,150
communication at all and this is where

00:22:10,380 --> 00:22:14,190
we did a lot of merger and so on

00:22:12,150 --> 00:22:17,730
there was for example two people working

00:22:14,190 --> 00:22:21,690
for six months on the cookies because

00:22:17,730 --> 00:22:23,370
cookies were needed a lot of synchronous

00:22:21,690 --> 00:22:26,130
communication they rewrote completely

00:22:23,370 --> 00:22:30,890
the cookie mechanism in Firefox and in

00:22:26,130 --> 00:22:33,900
fact it was 25% of our block blocking on

00:22:30,890 --> 00:22:36,870
inter process communication and on big

00:22:33,900 --> 00:22:40,140
website when it was fixed like Facebook

00:22:36,870 --> 00:22:43,170
is making several written write several

00:22:40,140 --> 00:22:47,220
times per second to the cookie store in

00:22:43,170 --> 00:22:50,100
this website like Twitter or Facebook we

00:22:47,220 --> 00:22:53,820
were able to win in the order of the

00:22:50,100 --> 00:22:56,460
second in the time we need to display

00:22:53,820 --> 00:22:59,010
the page so as other offenders like

00:22:56,460 --> 00:23:02,280
plugins but plugins are gone today

00:22:59,010 --> 00:23:04,170
other traditional extension on Firefox

00:23:02,280 --> 00:23:09,030
on Zul extension also we're on offender

00:23:04,170 --> 00:23:15,120
so we had to define to decide to stop

00:23:09,030 --> 00:23:17,130
having that there are plenty of other

00:23:15,120 --> 00:23:20,130
things that we have done for example we

00:23:17,130 --> 00:23:23,340
have changed some algorithm just till

00:23:20,130 --> 00:23:25,680
efficient but they were already

00:23:23,340 --> 00:23:28,260
efficient but in fact sometimes they

00:23:25,680 --> 00:23:31,200
were not making usage good use of the

00:23:28,260 --> 00:23:33,990
cache so we keep an algorithm with the

00:23:31,200 --> 00:23:36,300
same complexity but that works better

00:23:33,990 --> 00:23:38,850
with a cache for example and suddenly

00:23:36,300 --> 00:23:43,080
you have an improvement of your

00:23:38,850 --> 00:23:44,960
performance on complex pages that with

00:23:43,080 --> 00:23:47,610
the same complexity of the algorithm

00:23:44,960 --> 00:23:50,730
also the garbage collection so the part

00:23:47,610 --> 00:23:52,410
that take back the memory has been

00:23:50,730 --> 00:23:56,280
changed instead of having to do a

00:23:52,410 --> 00:23:58,740
complete sweep or we can now do an

00:23:56,280 --> 00:24:00,960
incremental sweep so we take a bit of

00:23:58,740 --> 00:24:03,150
the memory we stop because we have only

00:24:00,960 --> 00:24:05,280
a few milliseconds and then we continue

00:24:03,150 --> 00:24:07,680
later so that means that the memory grow

00:24:05,280 --> 00:24:10,950
a little bit but when the browser is

00:24:07,680 --> 00:24:12,690
idle it go back to normal at the same

00:24:10,950 --> 00:24:16,410
time we notice that memory that is used

00:24:12,690 --> 00:24:19,410
on towards the end very quickly and so

00:24:16,410 --> 00:24:21,510
on is the ones that usually is released

00:24:19,410 --> 00:24:24,390
very quickly and what you have are done

00:24:21,510 --> 00:24:25,950
I don't know two hours before usually

00:24:24,390 --> 00:24:28,860
you will keep it until you

00:24:25,950 --> 00:24:32,279
the browser so we also have as changes

00:24:28,860 --> 00:24:34,590
these kind of things in the last thing

00:24:32,279 --> 00:24:39,139
is we try to remove old timers in the

00:24:34,590 --> 00:24:43,320
interface timers are really really bad

00:24:39,139 --> 00:24:45,360
at first time first look it looks very

00:24:43,320 --> 00:24:47,519
nice because you delays execution later

00:24:45,360 --> 00:24:49,740
but in fact you don't control when the

00:24:47,519 --> 00:24:51,929
execution will happen and when the timer

00:24:49,740 --> 00:24:54,630
will fire not only it will find the main

00:24:51,929 --> 00:24:56,610
thread but maybe it's a moment that is

00:24:54,630 --> 00:24:58,799
important for something else you have no

00:24:56,610 --> 00:25:01,169
control so in fact the web platform in

00:24:58,799 --> 00:25:02,909
this can be used also on website we have

00:25:01,169 --> 00:25:06,510
now request either callbacks let's say

00:25:02,909 --> 00:25:10,830
fire this or do this when the main

00:25:06,510 --> 00:25:14,309
stride is free we also did things like

00:25:10,830 --> 00:25:16,110
throttling background tabs so if it is

00:25:14,309 --> 00:25:17,610
in the back it's less important but of

00:25:16,110 --> 00:25:19,860
course if there are music playing in the

00:25:17,610 --> 00:25:21,899
back you don't want your musics to stop

00:25:19,860 --> 00:25:26,940
so we are very very defensive here and

00:25:21,899 --> 00:25:30,470
we process with experimentation and

00:25:26,940 --> 00:25:33,149
finally we redesign our user interface

00:25:30,470 --> 00:25:36,299
so the feeling of the user interface is

00:25:33,149 --> 00:25:39,179
something really important so the look

00:25:36,299 --> 00:25:41,100
has to look modern and it doesn't change

00:25:39,179 --> 00:25:45,240
the speed it change the perception of

00:25:41,100 --> 00:25:47,610
the speed one thing we change is every

00:25:45,240 --> 00:25:50,370
animation now is happening on the GPU is

00:25:47,610 --> 00:25:52,440
happening through CSS we had in the

00:25:50,370 --> 00:25:55,019
previous interface still animation down

00:25:52,440 --> 00:25:57,809
in JavaScript and they were causing a

00:25:55,019 --> 00:26:01,919
good deal of the yup so that's that's

00:25:57,809 --> 00:26:05,399
really important that animation not in

00:26:01,919 --> 00:26:06,510
JavaScript on the main thread we change

00:26:05,399 --> 00:26:09,240
a bit the structure of the user

00:26:06,510 --> 00:26:11,760
interface so it's quicker for the user

00:26:09,240 --> 00:26:14,490
to find elements it's not quicker and

00:26:11,760 --> 00:26:17,639
speed proper but it's quicker for the

00:26:14,490 --> 00:26:22,230
user so with all these things together

00:26:17,639 --> 00:26:25,980
we have now a new engine and it looks

00:26:22,230 --> 00:26:32,130
still a user agent still a nice robot

00:26:25,980 --> 00:26:35,279
but it looks much more modern and it's

00:26:32,130 --> 00:26:37,500
not finished in fact quantum was

00:26:35,279 --> 00:26:39,860
released in November but already is a 2

00:26:37,500 --> 00:26:42,120
next version of the browser had more

00:26:39,860 --> 00:26:45,510
improvements or web render is coming

00:26:42,120 --> 00:26:47,790
soon at some point we have other ideas

00:26:45,510 --> 00:26:50,460
to improve things and in general

00:26:47,790 --> 00:26:53,040
browsers are still evolving it's it's

00:26:50,460 --> 00:26:54,930
not the end it's it's a new beginning

00:26:53,040 --> 00:26:56,820
because it's the first time we have now

00:26:54,930 --> 00:27:00,360
this power of having a massive

00:26:56,820 --> 00:27:01,530
parallelism on a browser so I want to

00:27:00,360 --> 00:27:05,160
thank you too

00:27:01,530 --> 00:27:07,320
here also you can help by installing

00:27:05,160 --> 00:27:09,390
firefox nightly by reporting problem

00:27:07,320 --> 00:27:11,400
especially when your application or your

00:27:09,390 --> 00:27:13,380
website is much slower and firefox and

00:27:11,400 --> 00:27:15,210
in lhasa browser this interests us

00:27:13,380 --> 00:27:18,450
because it's difficult to have real-life

00:27:15,210 --> 00:27:21,030
data each time we do a commit there are

00:27:18,450 --> 00:27:24,090
two thousand hours of tests going on on

00:27:21,030 --> 00:27:26,460
a term of computers but it's test it's

00:27:24,090 --> 00:27:30,480
not real life things so if you file

00:27:26,460 --> 00:27:32,520
about say you can give help by

00:27:30,480 --> 00:27:37,020
reproducing it engineer will be very

00:27:32,520 --> 00:27:38,940
happy spread the word we want as many

00:27:37,020 --> 00:27:41,490
people to use as many browser as

00:27:38,940 --> 00:27:43,560
possible firefox if possible to because

00:27:41,490 --> 00:27:45,990
competition is good that's a way we

00:27:43,560 --> 00:27:48,420
improve speed and firefox nightly

00:27:45,990 --> 00:27:49,510
twitter account is where to stay info

00:27:48,420 --> 00:27:55,940
thank you

00:27:49,510 --> 00:27:55,940

YouTube URL: https://www.youtube.com/watch?v=Frwe3x8HfwE


