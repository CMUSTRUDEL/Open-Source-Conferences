Title: Anna Henningsen: Node.js: Where are we now, where are we going? | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/anna-henningsen/

Node.js has been around for 9 years now, so you might think we’re getting closer to holding a finished piece of software in our hands. Yet somehow, despite placing a high value on stability, it is seeing a record number of commits and new contributors.

With the Node 10.0.0 release just around the corner, it’s worth taking a closer look at what has been changing and where Node.js is headed: HTTP/2 support, ES Modules, N-API, async_hooks and a Promise-based standard library are just some of the upcoming gems that this talk will put in the spotlight.
Captions: 
	00:00:00,870 --> 00:00:13,650
yeah cool okay great that that works I

00:00:11,340 --> 00:00:15,719
think like there's like tiny bit of the

00:00:13,650 --> 00:00:17,670
screen that's cut up cut off at both

00:00:15,719 --> 00:00:20,699
ends I don't think it's gonna be a

00:00:17,670 --> 00:00:22,740
problem just like yeah just tell me if

00:00:20,699 --> 00:00:26,789
something is completely not

00:00:22,740 --> 00:00:29,160
understandable yeah anyway I'm Anna I

00:00:26,789 --> 00:00:34,620
don't know like whether you're all

00:00:29,160 --> 00:00:38,340
morning people I'm not I I I'm not

00:00:34,620 --> 00:00:41,219
usually awake at that kind of time so

00:00:38,340 --> 00:00:43,710
yeah I hope this is going well it's not

00:00:41,219 --> 00:00:48,719
going to be a like it's going to be a

00:00:43,710 --> 00:00:52,379
technical talk about node just like yeah

00:00:48,719 --> 00:00:54,570
okay so first of all first of all like

00:00:52,379 --> 00:00:57,090
the forward he doesn't work here so I'm

00:00:54,570 --> 00:01:02,969
gonna have to go here

00:00:57,090 --> 00:01:04,979
okay so Who am I Anna I'm a DBA LAX on

00:01:02,969 --> 00:01:10,320
Twitter and github / answered whatever

00:01:04,979 --> 00:01:13,710
you want I use she/her pronouns and I've

00:01:10,320 --> 00:01:15,420
been an active contributor to know chess

00:01:13,710 --> 00:01:18,930
since December 2015

00:01:15,420 --> 00:01:21,030
it's like quite a while ago and I'm and

00:01:18,930 --> 00:01:22,560
I know just to see like technical

00:01:21,030 --> 00:01:26,490
steering committee and what that means

00:01:22,560 --> 00:01:28,740
is that I am one of the people who like

00:01:26,490 --> 00:01:31,619
if there is no consensus among the you

00:01:28,740 --> 00:01:33,420
know chess collaborator group where the

00:01:31,619 --> 00:01:36,119
people who decide what actually happens

00:01:33,420 --> 00:01:38,720
or we try to set the the general

00:01:36,119 --> 00:01:41,520
direction for where the project is going

00:01:38,720 --> 00:01:43,110
like that that also means that like if

00:01:41,520 --> 00:01:45,149
you want to complain about something or

00:01:43,110 --> 00:01:50,820
anything you can like I personally can

00:01:45,149 --> 00:01:52,439
come to and it's like I'm gonna start

00:01:50,820 --> 00:01:55,979
this start by like describing how I

00:01:52,439 --> 00:01:58,799
originally got into coding in Noches I'm

00:01:55,979 --> 00:02:01,500
contributing to know chess itself and so

00:01:58,799 --> 00:02:09,390
like there's this I hope you can you all

00:02:01,500 --> 00:02:12,540
read that I not that's what so like

00:02:09,390 --> 00:02:14,310
basically it's like setting using

00:02:12,540 --> 00:02:17,430
timeout with like invalid parameters

00:02:14,310 --> 00:02:19,769
using the like accidentally passing a

00:02:17,430 --> 00:02:22,469
number twice and like don't ask me why I

00:02:19,769 --> 00:02:24,180
did that I I had something like that in

00:02:22,469 --> 00:02:25,920
my code once and like I couldn't really

00:02:24,180 --> 00:02:27,719
figure out where wearing that coat that

00:02:25,920 --> 00:02:30,060
was means like that was the original

00:02:27,719 --> 00:02:31,920
stack race that you were getting and I'm

00:02:30,060 --> 00:02:35,340
still I just don't think you're getting

00:02:31,920 --> 00:02:36,989
it unknown far and so yeah just like

00:02:35,340 --> 00:02:39,720
it's it's blowing up when it tries to

00:02:36,989 --> 00:02:41,939
call that function which is 1000 which

00:02:39,720 --> 00:02:46,170
is not a function so it's not going to

00:02:41,939 --> 00:02:47,760
work and so like yeah that was

00:02:46,170 --> 00:02:49,769
frustrating to debug and actually the

00:02:47,760 --> 00:02:51,260
the easiest way that I could think of

00:02:49,769 --> 00:02:53,909
debugging this was like to actually

00:02:51,260 --> 00:02:57,120
patch note card so that it would like

00:02:53,909 --> 00:03:00,299
throw an error if if the function first

00:02:57,120 --> 00:03:02,879
the timeout is not actually function so

00:03:00,299 --> 00:03:04,230
like this is I mean there were tests and

00:03:02,879 --> 00:03:05,790
there were what's the documentation

00:03:04,230 --> 00:03:07,769
change and everything it like with this

00:03:05,790 --> 00:03:11,069
but basically this was all the patch to

00:03:07,769 --> 00:03:14,069
us like if the callbacks not a function

00:03:11,069 --> 00:03:17,909
then like complain immediately so you

00:03:14,069 --> 00:03:20,400
would get a proper stack trace and yeah

00:03:17,909 --> 00:03:23,940
and like i mentioning this because like

00:03:20,400 --> 00:03:25,560
it's it's just that a like no jess is

00:03:23,940 --> 00:03:29,040
part of your application if you build

00:03:25,560 --> 00:03:30,329
something in note so it means like every

00:03:29,040 --> 00:03:32,489
improvement that you make to note makes

00:03:30,329 --> 00:03:34,379
your code better and like if there is

00:03:32,489 --> 00:03:35,220
something that you think that note could

00:03:34,379 --> 00:03:37,409
do better

00:03:35,220 --> 00:03:39,209
you can like try to come up with a pull

00:03:37,409 --> 00:03:41,579
request or maybe even choose open issue

00:03:39,209 --> 00:03:44,639
or something it's a lot of these small

00:03:41,579 --> 00:03:49,489
things that that actually make note a

00:03:44,639 --> 00:03:51,930
great software like for example like

00:03:49,489 --> 00:03:54,150
after he like seven or eight last pull

00:03:51,930 --> 00:03:57,449
requests that I opened like two were

00:03:54,150 --> 00:04:00,060
actual bug fixes for like HTTP to stuff

00:03:57,449 --> 00:04:02,220
and the like five of them were just like

00:04:00,060 --> 00:04:04,919
stuff that I ran along the way while I

00:04:02,220 --> 00:04:07,049
was debugging them just like thinking

00:04:04,919 --> 00:04:09,419
okay yeah this is not helpful what note

00:04:07,049 --> 00:04:13,109
does their so let's do something more

00:04:09,419 --> 00:04:14,579
helpful okay yeah so why was I talking

00:04:13,109 --> 00:04:17,579
about that and like why I'm talking

00:04:14,579 --> 00:04:20,130
about no chase in general it's not just

00:04:17,579 --> 00:04:23,340
because like I'm a core contributor it's

00:04:20,130 --> 00:04:25,229
also because like before I made that

00:04:23,340 --> 00:04:26,220
patch and like before later I started

00:04:25,229 --> 00:04:29,190
watching the no J

00:04:26,220 --> 00:04:32,220
no repository and everything I didn't

00:04:29,190 --> 00:04:34,470
really have a lot of a lot of concept

00:04:32,220 --> 00:04:37,920
about what was going on inside the court

00:04:34,470 --> 00:04:40,530
no just community it's kind of like it

00:04:37,920 --> 00:04:43,980
was kind of like its own separate world

00:04:40,530 --> 00:04:45,300
and and I know that a lot of people in

00:04:43,980 --> 00:04:48,690
the community still feel kind of

00:04:45,300 --> 00:04:51,510
disconnected from from what's happening

00:04:48,690 --> 00:04:54,120
there like most of you probably just

00:04:51,510 --> 00:04:55,650
like take the releases of notice they

00:04:54,120 --> 00:04:59,070
come and like update every once in a

00:04:55,650 --> 00:05:02,370
while and sometimes hear about new cool

00:04:59,070 --> 00:05:05,550
features or something but but basically

00:05:02,370 --> 00:05:10,050
that's it and like I think it would be

00:05:05,550 --> 00:05:11,250
cool for both sides if they're like if

00:05:10,050 --> 00:05:13,620
people had more of an idea what was

00:05:11,250 --> 00:05:15,200
happening a note and if we note core

00:05:13,620 --> 00:05:19,169
people have more of an idea what was

00:05:15,200 --> 00:05:21,360
what what users actually do it need any

00:05:19,169 --> 00:05:24,180
like it's not like none of us are

00:05:21,360 --> 00:05:28,830
actually are aren't users either but you

00:05:24,180 --> 00:05:30,870
know okay so and where are we now with

00:05:28,830 --> 00:05:34,080
note as to like no tennis just around

00:05:30,870 --> 00:05:36,840
the corner it's probably going to come

00:05:34,080 --> 00:05:38,280
out in April until yesterday I thought

00:05:36,840 --> 00:05:41,419
it was definitely coming out in April

00:05:38,280 --> 00:05:44,640
[Laughter]

00:05:41,419 --> 00:05:50,669
okay yeah so I'm gonna like maybe

00:05:44,640 --> 00:05:53,040
mention that later but yeah probably so

00:05:50,669 --> 00:05:59,040
like what's gonna have its features like

00:05:53,040 --> 00:06:06,390
yes modules which yet excited like too

00:05:59,040 --> 00:06:08,280
early it's like I probably can't speak

00:06:06,390 --> 00:06:09,810
as much to it as I should because like I

00:06:08,280 --> 00:06:13,610
try to stay away from that topic because

00:06:09,810 --> 00:06:16,439
like it's

00:06:13,610 --> 00:06:18,449
it's not it's not like healthy to like

00:06:16,439 --> 00:06:21,779
talk about it a lot

00:06:18,449 --> 00:06:25,559
htv-2 which is like a lot more fun and

00:06:21,779 --> 00:06:29,300
which like I'm participating in a lot

00:06:25,559 --> 00:06:32,869
more icing hooks which you may have

00:06:29,300 --> 00:06:35,129
heard of might probably not have used

00:06:32,869 --> 00:06:36,779
but like it's pretty cool thing and

00:06:35,129 --> 00:06:40,110
people are building pretty cool things

00:06:36,779 --> 00:06:43,709
with it and yeah you're gonna want to

00:06:40,110 --> 00:06:46,019
know about that an API just like also

00:06:43,709 --> 00:06:50,069
very very specific it's just like for

00:06:46,019 --> 00:06:53,969
native add-on authors but it's is it's a

00:06:50,069 --> 00:06:56,249
cool new thing and note then there are

00:06:53,969 --> 00:07:01,199
like things that move along with with

00:06:56,249 --> 00:07:03,209
Jas like SJS evolves are things that we

00:07:01,199 --> 00:07:05,550
see in the web platform in browsers that

00:07:03,209 --> 00:07:10,139
we think yeah that might be close my for

00:07:05,550 --> 00:07:13,379
note like standard URL object like it's

00:07:10,139 --> 00:07:15,360
a good I think it's becoming a global in

00:07:13,379 --> 00:07:19,559
know tense like you can just like take

00:07:15,360 --> 00:07:21,059
URL new URL just like you write it in

00:07:19,559 --> 00:07:25,369
the browser and use that same thing in

00:07:21,059 --> 00:07:29,399
note text occur the text text encoder

00:07:25,369 --> 00:07:31,529
those things then there's things that

00:07:29,399 --> 00:07:33,569
are coming from the JavaScript engines

00:07:31,529 --> 00:07:36,449
so themselves like we are currently in

00:07:33,569 --> 00:07:40,879
master and so probably in no 10 as well

00:07:36,449 --> 00:07:43,909
on v8 6.4 which means like stuff like

00:07:40,879 --> 00:07:49,619
we're full assembly support in there

00:07:43,909 --> 00:07:50,759
that's pretty cool we have a like I

00:07:49,619 --> 00:07:53,099
don't know if you have ever heard of

00:07:50,759 --> 00:07:57,149
that but like the old debugger way API

00:07:53,099 --> 00:07:59,819
there that went completely away but we

00:07:57,149 --> 00:08:03,149
also like since then we introduced as a

00:07:59,819 --> 00:08:06,149
replacement a way to talk like the like

00:08:03,149 --> 00:08:08,849
you can talk to node like the v8 chrome

00:08:06,149 --> 00:08:10,800
debugger like you probably have used

00:08:08,849 --> 00:08:13,050
that with not or I've heard that you can

00:08:10,800 --> 00:08:14,759
do that it's like there's an API for

00:08:13,050 --> 00:08:16,339
talking to node with that so like you

00:08:14,759 --> 00:08:19,050
can actually do really cool things like

00:08:16,339 --> 00:08:20,909
inspect the actual stack of your program

00:08:19,050 --> 00:08:22,649
while it is running not just a stack

00:08:20,909 --> 00:08:25,469
Chris but like the actual variables and

00:08:22,649 --> 00:08:27,900
everything it's like pretty cool stuff

00:08:25,469 --> 00:08:32,090
that you can build with that

00:08:27,900 --> 00:08:32,090
we're changing the era system in note

00:08:32,390 --> 00:08:39,000
yeah I'm gonna like have more details on

00:08:35,760 --> 00:08:45,570
everything in here later so I like some

00:08:39,000 --> 00:08:47,850
more longer Ford's okay so yes modules

00:08:45,570 --> 00:08:51,060
um I'm just like gonna give an overview

00:08:47,850 --> 00:08:52,950
of where like my understanding of where

00:08:51,060 --> 00:08:56,690
we are at this and I think my understand

00:08:52,950 --> 00:08:59,730
is pretty accurate but I'm not like a

00:08:56,690 --> 00:09:02,640
like 2 F we recently we span up a new

00:08:59,730 --> 00:09:04,290
modules working group and like if you

00:09:02,640 --> 00:09:06,360
are really really interested in like

00:09:04,290 --> 00:09:09,420
knowing what exactly is being discussed

00:09:06,360 --> 00:09:10,709
and it's happening you can like they

00:09:09,420 --> 00:09:12,990
have meetings and they are being

00:09:10,709 --> 00:09:18,630
recorded and you might want to check

00:09:12,990 --> 00:09:20,760
those out there there is experimental

00:09:18,630 --> 00:09:24,420
support in notes so like you can run

00:09:20,760 --> 00:09:29,040
note - - experimental modules I think

00:09:24,420 --> 00:09:31,709
something like that and you actually can

00:09:29,040 --> 00:09:35,130
use ESM with that and it's not quite

00:09:31,709 --> 00:09:38,820
where you want it to be yet it's like

00:09:35,130 --> 00:09:41,250
one of the things that that we're

00:09:38,820 --> 00:09:45,300
currently having a notice that that mgs

00:09:41,250 --> 00:09:50,880
is happening as the file extension for

00:09:45,300 --> 00:09:52,529
ES modules that might not have to be the

00:09:50,880 --> 00:09:56,399
end of it there might be a way to like

00:09:52,529 --> 00:09:59,699
use ESM with GS files we're just like

00:09:56,399 --> 00:10:01,199
gonna have to gonna have to see what we

00:09:59,699 --> 00:10:03,089
can make happen what like is actually

00:10:01,199 --> 00:10:05,699
best for everyone it's like one of the

00:10:03,089 --> 00:10:08,100
things about us modules is that in every

00:10:05,699 --> 00:10:11,220
discussion there's always like multiple

00:10:08,100 --> 00:10:14,579
approaches and like none is perfect and

00:10:11,220 --> 00:10:19,800
like it always has real downsides for

00:10:14,579 --> 00:10:22,680
everyone and like like I can't go into

00:10:19,800 --> 00:10:27,390
detail mostly because like some of those

00:10:22,680 --> 00:10:28,949
thoughts like for example one of the

00:10:27,390 --> 00:10:32,040
things that I have here and the list of

00:10:28,949 --> 00:10:34,769
stat named imports was CGS for command

00:10:32,040 --> 00:10:37,440
GS so like you can yeah we right you're

00:10:34,769 --> 00:10:40,590
at a module that's called like left pad

00:10:37,440 --> 00:10:43,620
or something and so you want to like imp

00:10:40,590 --> 00:10:46,080
and then import the actual fraction I

00:10:43,620 --> 00:10:49,020
don't know what it's called import pad

00:10:46,080 --> 00:10:50,760
from coming from left pad or something

00:10:49,020 --> 00:10:54,570
like that it's not like going to be what

00:10:50,760 --> 00:10:58,020
you it might work it might not work and

00:10:54,570 --> 00:11:02,190
like it's not as easy as saying okay we

00:10:58,020 --> 00:11:03,960
can just make it work it's like it's

00:11:02,190 --> 00:11:05,760
also going to be very different from

00:11:03,960 --> 00:11:07,620
what you have right now with commands

00:11:05,760 --> 00:11:10,010
yes it's like it's being loaded

00:11:07,620 --> 00:11:10,010
asynchronously

00:11:10,490 --> 00:11:16,170
so like that's one of the issues that we

00:11:13,800 --> 00:11:18,210
have like with interoperability so like

00:11:16,170 --> 00:11:20,160
you can't just require and yes module

00:11:18,210 --> 00:11:22,050
that's like never going to actually work

00:11:20,160 --> 00:11:24,750
this require always gives you a

00:11:22,050 --> 00:11:27,080
synchronous result and that is just like

00:11:24,750 --> 00:11:29,880
not happening with yes modules by design

00:11:27,080 --> 00:11:33,630
it's also not not going to work like

00:11:29,880 --> 00:11:36,120
babel like currently compiles yes

00:11:33,630 --> 00:11:37,670
modules just like probably one of the

00:11:36,120 --> 00:11:43,020
more tricky things to work around it

00:11:37,670 --> 00:11:45,720
might be good enough but like babel

00:11:43,020 --> 00:11:48,480
isn't doing it like the like this back

00:11:45,720 --> 00:11:50,820
wants us to so like we're gonna have to

00:11:48,480 --> 00:11:57,480
do it like the the actual j aspect wants

00:11:50,820 --> 00:11:59,670
us to do it so yeah okay so like just

00:11:57,480 --> 00:12:02,160
like to give a quick overview it's like

00:11:59,670 --> 00:12:03,660
important FS from FS just like importing

00:12:02,160 --> 00:12:07,140
the entire module that is going to work

00:12:03,660 --> 00:12:08,760
that currently does work we like four

00:12:07,140 --> 00:12:10,950
core modules we're also going to have

00:12:08,760 --> 00:12:13,050
named imports in some way like most

00:12:10,950 --> 00:12:14,700
likely because like at least there are

00:12:13,050 --> 00:12:20,750
ways that we can make it happen

00:12:14,700 --> 00:12:23,930
so yeah and imparting like between

00:12:20,750 --> 00:12:26,280
exists between userland

00:12:23,930 --> 00:12:28,350
yes modules is always going to work

00:12:26,280 --> 00:12:33,350
right that's just like completely SPECT

00:12:28,350 --> 00:12:36,420
and yeah that's not going to be an issue

00:12:33,350 --> 00:12:40,050
what you like weird what we're not going

00:12:36,420 --> 00:12:41,700
to have in yes modules underscore

00:12:40,050 --> 00:12:43,350
underscore file name or underscore

00:12:41,700 --> 00:12:45,420
underscore their name something like

00:12:43,350 --> 00:12:49,260
that i instead you're going to get the

00:12:45,420 --> 00:12:50,970
URL of the current module and all of

00:12:49,260 --> 00:12:54,030
that lives under imported media so like

00:12:50,970 --> 00:12:56,790
there's no magic Global's like all right

00:12:54,030 --> 00:13:00,810
she was like require or module or

00:12:56,790 --> 00:13:02,310
experts or anything like that and you're

00:13:00,810 --> 00:13:03,900
probably going to get like imparted

00:13:02,310 --> 00:13:06,870
meter that require which like it's going

00:13:03,900 --> 00:13:12,570
to give you way to at least lot existing

00:13:06,870 --> 00:13:15,630
common J's modules in in USM okay

00:13:12,570 --> 00:13:16,920
another thing HTTP to which is like as I

00:13:15,630 --> 00:13:20,730
said is something that I've been working

00:13:16,920 --> 00:13:23,010
on a lot more than USM and it's really

00:13:20,730 --> 00:13:25,890
cool we have like pretty much everything

00:13:23,010 --> 00:13:29,490
in the API fleshed out right now so

00:13:25,890 --> 00:13:31,110
that's nice we are it's currently

00:13:29,490 --> 00:13:33,720
experimental it has been since it was

00:13:31,110 --> 00:13:38,430
introduced in think one-and-a-half years

00:13:33,720 --> 00:13:40,350
ago I don't remember exactly but it's

00:13:38,430 --> 00:13:42,360
like with your hope is that in no 10

00:13:40,350 --> 00:13:44,490
which is like one month away it's not

00:13:42,360 --> 00:13:47,010
going to be experimental anymore mostly

00:13:44,490 --> 00:13:51,290
because like the API is really fleshed

00:13:47,010 --> 00:13:54,270
out at this point it's a lot like the

00:13:51,290 --> 00:13:57,180
there is a compatibility API so you can

00:13:54,270 --> 00:13:59,450
use it a lot like HTTP one or the

00:13:57,180 --> 00:14:01,770
existing HTTP module if you want to

00:13:59,450 --> 00:14:04,140
that's going to be useful a lot of the

00:14:01,770 --> 00:14:06,600
time you can actually like at least if

00:14:04,140 --> 00:14:10,980
you're using TLS servers you can

00:14:06,600 --> 00:14:13,410
actually build build servers that

00:14:10,980 --> 00:14:17,160
support both natively which is really

00:14:13,410 --> 00:14:19,740
nice but likely the new API that you get

00:14:17,160 --> 00:14:21,770
from HTTP to if you if you don't care

00:14:19,740 --> 00:14:24,960
about like the old stuff about HTTP 1

00:14:21,770 --> 00:14:30,570
it's a lot cleaner than what we have an

00:14:24,960 --> 00:14:33,690
HTTP 1 yeah it's it's just like it's

00:14:30,570 --> 00:14:35,730
also just like better code like actually

00:14:33,690 --> 00:14:39,870
everyone was like written in a time when

00:14:35,730 --> 00:14:44,060
there was a lot smaller and and it was

00:14:39,870 --> 00:14:47,640
just like there was less command review

00:14:44,060 --> 00:14:49,290
and more like ok yeah we're gonna like

00:14:47,640 --> 00:14:53,130
make changes and like if something

00:14:49,290 --> 00:14:55,530
breaks and we're gonna fix it yeah so it

00:14:53,130 --> 00:14:57,210
was a different time and plus you get

00:14:55,530 --> 00:14:59,640
all the perks of HTTP 2 which is like

00:14:57,210 --> 00:15:02,100
you can have a single connection and

00:14:59,640 --> 00:15:04,140
multiplex different screams like

00:15:02,100 --> 00:15:05,890
basically different files over that you

00:15:04,140 --> 00:15:10,160
get pushed

00:15:05,890 --> 00:15:11,600
it's like I'm not exactly sure like how

00:15:10,160 --> 00:15:12,890
people are actually going to use it but

00:15:11,600 --> 00:15:16,160
I'm pretty sure that they're going to

00:15:12,890 --> 00:15:18,170
build amazing stuff with it and so like

00:15:16,160 --> 00:15:20,660
this is a basically sample of like how

00:15:18,170 --> 00:15:22,190
an HTTP server looks like you're gonna

00:15:20,660 --> 00:15:23,960
see that like this is not the

00:15:22,190 --> 00:15:28,130
compatibility API this is like the

00:15:23,960 --> 00:15:31,360
actual new one and you're gonna see okay

00:15:28,130 --> 00:15:34,160
some things are pretty familiar like

00:15:31,360 --> 00:15:37,100
creating a server and listening on a

00:15:34,160 --> 00:15:39,920
port that works like like you'd expect

00:15:37,100 --> 00:15:42,740
it to but instead of like requests you

00:15:39,920 --> 00:15:47,090
had screens it's like kind of

00:15:42,740 --> 00:15:50,080
conceptually the same thing it's like an

00:15:47,090 --> 00:15:52,250
HTTP to scream it's like an actual

00:15:50,080 --> 00:15:54,680
writable stream that you can just send

00:15:52,250 --> 00:15:58,130
data to and instead of like writing

00:15:54,680 --> 00:16:06,980
headers you conceptually those are kind

00:15:58,130 --> 00:16:09,290
of similar but like you can yeah it's

00:16:06,980 --> 00:16:11,030
just like pretty similar if you look at

00:16:09,290 --> 00:16:12,800
it at that but like it has a much richer

00:16:11,030 --> 00:16:14,120
API but you're gonna have to look at it

00:16:12,800 --> 00:16:17,240
up in the documentation if you actually

00:16:14,120 --> 00:16:19,880
want to know a lot about that okay so

00:16:17,240 --> 00:16:23,500
one of the things that I also like find

00:16:19,880 --> 00:16:26,990
pretty cool in notice async works

00:16:23,500 --> 00:16:29,210
that's way to like get more of an idea

00:16:26,990 --> 00:16:31,730
of what is currently happening in the in

00:16:29,210 --> 00:16:33,200
those event loop like what what things

00:16:31,730 --> 00:16:38,030
are keeping the event will be life and

00:16:33,200 --> 00:16:39,290
what things are currently running so

00:16:38,030 --> 00:16:41,180
like for example if you're reading a

00:16:39,290 --> 00:16:43,760
file you could actually use s in hooks

00:16:41,180 --> 00:16:48,620
to tell what file requests are currently

00:16:43,760 --> 00:16:51,800
going on and so also a API that allows

00:16:48,620 --> 00:16:53,960
you to like keep track of what a same

00:16:51,800 --> 00:16:57,290
thing is causing what async things like

00:16:53,960 --> 00:16:59,690
for example some people have previously

00:16:57,290 --> 00:17:02,120
built stuff like continuation local

00:16:59,690 --> 00:17:03,800
storage with the previous thing that we

00:17:02,120 --> 00:17:06,170
had for it which was domains which is

00:17:03,800 --> 00:17:08,390
like not a great idea it's like what

00:17:06,170 --> 00:17:11,410
we're getting rid of it and that

00:17:08,390 --> 00:17:15,530
basically means okay for example you can

00:17:11,410 --> 00:17:18,449
you can keep track of what where your

00:17:15,530 --> 00:17:22,110
current code is like to watch HTV tu h

00:17:18,449 --> 00:17:25,409
here HTTP requests it originally belong

00:17:22,110 --> 00:17:29,370
to and like just like keep track of that

00:17:25,409 --> 00:17:32,519
and see which where that origin it came

00:17:29,370 --> 00:17:34,710
from and you can can you can use it for

00:17:32,519 --> 00:17:39,240
like diagnostics for looking at the

00:17:34,710 --> 00:17:41,010
timing of operations it's still

00:17:39,240 --> 00:17:43,350
experimental and it has a lot of rough

00:17:41,010 --> 00:17:45,360
edges in its API I'm gonna give an

00:17:43,350 --> 00:17:46,980
example like pretty much right now and

00:17:45,360 --> 00:17:49,350
just so you know if you're writing

00:17:46,980 --> 00:17:51,210
add-ons ladyhood add-ons like note

00:17:49,350 --> 00:17:53,159
doesn't automatically know what you're

00:17:51,210 --> 00:17:56,730
doing like if you're just like calling

00:17:53,159 --> 00:17:59,279
back from from C++ are from C you're

00:17:56,730 --> 00:18:02,429
just like not know doesn't know where

00:17:59,279 --> 00:18:05,519
where that originally was caused in note

00:18:02,429 --> 00:18:06,899
in the J's code it's like as an add-on

00:18:05,519 --> 00:18:10,710
author you're going to have to support

00:18:06,899 --> 00:18:13,620
it like pretty much explicitly okay and

00:18:10,710 --> 00:18:14,909
so this is like one example script so

00:18:13,620 --> 00:18:16,980
like icing hooks that means you have

00:18:14,909 --> 00:18:19,980
four hooks it means like you get an

00:18:16,980 --> 00:18:25,080
inner took a before after and destroy

00:18:19,980 --> 00:18:27,269
hook just like keeping track of of like

00:18:25,080 --> 00:18:30,269
every single async operation that is

00:18:27,269 --> 00:18:32,220
happening for like for like sockets you

00:18:30,269 --> 00:18:34,019
so like if there's an inbound connection

00:18:32,220 --> 00:18:36,990
the inner talk is called every time

00:18:34,019 --> 00:18:39,659
there is an event on that socket before

00:18:36,990 --> 00:18:41,580
and after hooks are called and like once

00:18:39,659 --> 00:18:44,850
that socket close it is it gets up to

00:18:41,580 --> 00:18:48,990
destroy hook that has been called so I I

00:18:44,850 --> 00:18:51,059
have like reading the current file as an

00:18:48,990 --> 00:18:54,389
example here at the at the end of this

00:18:51,059 --> 00:18:58,100
quick and so like what that actually

00:18:54,389 --> 00:19:02,279
does is okay so the first thing it's

00:18:58,100 --> 00:19:08,789
initializing AFS request grep that gets

00:19:02,279 --> 00:19:11,220
the IV what is that oh it's the ID six

00:19:08,789 --> 00:19:12,659
it's like it's like numerical IDs that

00:19:11,220 --> 00:19:15,570
you're using to keep track of everything

00:19:12,659 --> 00:19:17,159
then later in that script the before

00:19:15,570 --> 00:19:20,130
hook is called which means that that

00:19:17,159 --> 00:19:24,179
request is finished then it's

00:19:20,130 --> 00:19:26,850
initializing in other another file

00:19:24,179 --> 00:19:29,429
system request gets to the next ID which

00:19:26,850 --> 00:19:31,139
is seven and then the original one is

00:19:29,429 --> 00:19:32,269
finished like it's after and destroy

00:19:31,139 --> 00:19:34,729
hooks are called

00:19:32,269 --> 00:19:37,759
then later the same thing for the next

00:19:34,729 --> 00:19:40,070
request like it it's finished it calls

00:19:37,759 --> 00:19:41,299
its call back just like indicated by

00:19:40,070 --> 00:19:43,789
having it before and after

00:19:41,299 --> 00:19:46,489
ok and because it's a request like

00:19:43,789 --> 00:19:47,839
request means it only like it's when

00:19:46,489 --> 00:19:49,879
it's finished it's done it's always

00:19:47,839 --> 00:19:54,769
getting called it's calling the destroy

00:19:49,879 --> 00:19:57,559
hook and finally you get another friend

00:19:54,769 --> 00:19:59,059
system request and it's like this is

00:19:57,559 --> 00:20:00,979
just like the beginning so like it's

00:19:59,059 --> 00:20:02,839
very very detailed but what you can

00:20:00,979 --> 00:20:04,279
actually see is that there are different

00:20:02,839 --> 00:20:05,959
things happening here it's like the

00:20:04,279 --> 00:20:07,759
first is actually opening the file the

00:20:05,959 --> 00:20:10,249
second one is actually reading from the

00:20:07,759 --> 00:20:14,149
file and the third one is closing the

00:20:10,249 --> 00:20:16,820
file request so like it's very very low

00:20:14,149 --> 00:20:19,999
level and very detailed but yeah you can

00:20:16,820 --> 00:20:21,709
build pretty cool stuff with it one of

00:20:19,999 --> 00:20:24,950
the things that are also like in the

00:20:21,709 --> 00:20:26,659
area of things that are pretty cool in

00:20:24,950 --> 00:20:29,719
the web platform and we're having

00:20:26,659 --> 00:20:35,059
compatibility is nice it's perfect

00:20:29,719 --> 00:20:36,950
performance 6 it's it's also like I

00:20:35,059 --> 00:20:39,889
don't think it's introduced in node 8

00:20:36,950 --> 00:20:42,139
and I think it's still experimental too

00:20:39,889 --> 00:20:46,149
but like also slowly getting out of that

00:20:42,139 --> 00:20:49,789
I might be right might be stable by now

00:20:46,149 --> 00:20:51,440
and yet this is just like Department

00:20:49,789 --> 00:20:53,929
performance API like you have it in the

00:20:51,440 --> 00:20:55,219
browser if you're ever I've come in

00:20:53,929 --> 00:20:58,190
touch with that it's like you have

00:20:55,219 --> 00:21:00,349
performance that now and and a lot more

00:20:58,190 --> 00:21:01,579
in there like support for no just

00:21:00,349 --> 00:21:04,309
specific events like you can actually

00:21:01,579 --> 00:21:07,549
actually tell like how long it took to

00:21:04,309 --> 00:21:11,629
lot load the main module of your

00:21:07,549 --> 00:21:13,309
application and everything and and it

00:21:11,629 --> 00:21:16,339
gives you like low overhead timers which

00:21:13,309 --> 00:21:18,950
is like we have something something

00:21:16,339 --> 00:21:22,099
similar with like console that time and

00:21:18,950 --> 00:21:28,459
console that time and but this is this

00:21:22,099 --> 00:21:30,139
is a cool new stuff ok an API who in

00:21:28,459 --> 00:21:34,129
this room has ever written a native

00:21:30,139 --> 00:21:38,359
add-on with note it's not a lot of

00:21:34,129 --> 00:21:41,299
people so if you ever like felt that

00:21:38,359 --> 00:21:44,629
that might be useful for you this is a

00:21:41,299 --> 00:21:45,650
cool new thing that also makes that a

00:21:44,629 --> 00:21:47,990
lot easier

00:21:45,650 --> 00:21:51,020
like if you previously wrote an add-on

00:21:47,990 --> 00:21:53,750
for note you have to understand the v8

00:21:51,020 --> 00:21:56,570
API which is dual but really really

00:21:53,750 --> 00:21:58,220
tricky because like if you're coming

00:21:56,570 --> 00:21:59,900
from a JS background there error

00:21:58,220 --> 00:22:02,570
handling is just like going to be really

00:21:59,900 --> 00:22:04,490
really confusing because like it's

00:22:02,570 --> 00:22:06,770
written in C++ and they don't use

00:22:04,490 --> 00:22:11,270
exceptions it's like that has

00:22:06,770 --> 00:22:12,860
performance impact so they're gonna have

00:22:11,270 --> 00:22:14,930
to do something really really tricky and

00:22:12,860 --> 00:22:17,810
with napi you have something pretty

00:22:14,930 --> 00:22:20,860
natural so like this is an example of

00:22:17,810 --> 00:22:23,300
how to write a C++ add-on with an API

00:22:20,860 --> 00:22:26,750
this is just a single function that you

00:22:23,300 --> 00:22:29,660
can expose to JavaScript and I mean it's

00:22:26,750 --> 00:22:31,640
it's not quite like JavaScript you still

00:22:29,660 --> 00:22:34,610
have like to do things like explicitly

00:22:31,640 --> 00:22:36,050
convert like say this value convert it

00:22:34,610 --> 00:22:39,830
to a number and then like give me the

00:22:36,050 --> 00:22:41,840
value as a 32-bit integer that's

00:22:39,830 --> 00:22:44,840
overhead you're not gonna get it around

00:22:41,840 --> 00:22:46,640
but I get like as a JavaScript developer

00:22:44,840 --> 00:22:50,360
you can definitely understand what this

00:22:46,640 --> 00:22:59,930
does and make changes to it and yeah

00:22:50,360 --> 00:23:01,850
it's okay another thing promise support

00:22:59,930 --> 00:23:04,820
is just like something that we're going

00:23:01,850 --> 00:23:06,710
to live with like there are people who

00:23:04,820 --> 00:23:08,960
don't really like to use promises in

00:23:06,710 --> 00:23:12,560
node and like they're going to keep

00:23:08,960 --> 00:23:14,660
being able to do that but like generally

00:23:12,560 --> 00:23:17,120
people are going to use async await

00:23:14,660 --> 00:23:21,980
people are going to use promises for a

00:23:17,120 --> 00:23:23,690
lot of stuff and yeah we as a platform

00:23:21,980 --> 00:23:28,490
know just like has to move along with

00:23:23,690 --> 00:23:30,260
that and so like we have like if you

00:23:28,490 --> 00:23:32,000
don't use async await at this point you

00:23:30,260 --> 00:23:38,570
should just like telling you this is

00:23:32,000 --> 00:23:40,460
just like really really really nice you

00:23:38,570 --> 00:23:43,250
have we have a weight support entity in

00:23:40,460 --> 00:23:46,090
the wrapper right now I think that's

00:23:43,250 --> 00:23:48,920
also just like coming out in no 10

00:23:46,090 --> 00:23:52,730
because like we actually have to like do

00:23:48,920 --> 00:23:55,910
some weird transpiration inside the

00:23:52,730 --> 00:23:57,500
repple like previously previously didn't

00:23:55,910 --> 00:23:59,390
do that

00:23:57,500 --> 00:24:01,880
but we think it's

00:23:59,390 --> 00:24:06,230
it's like we have to ship an actual like

00:24:01,880 --> 00:24:08,650
parsing library with note we have Google

00:24:06,230 --> 00:24:12,260
dot promise if I in Note 8 and above

00:24:08,650 --> 00:24:15,140
which is like the bare minimum like you

00:24:12,260 --> 00:24:17,690
can convert note functions to like

00:24:15,140 --> 00:24:18,830
promise api's but just like you still

00:24:17,690 --> 00:24:23,660
have to do that explicit conversion

00:24:18,830 --> 00:24:26,750
which is not that nice we have a new

00:24:23,660 --> 00:24:29,210
module FS / promises coming in no 10 and

00:24:26,750 --> 00:24:30,980
that is actually going to be like all

00:24:29,210 --> 00:24:32,690
the file system functions that you're

00:24:30,980 --> 00:24:35,810
used to

00:24:32,690 --> 00:24:37,790
except they work promise based and like

00:24:35,810 --> 00:24:39,620
instead of so instead of file

00:24:37,790 --> 00:24:42,050
descriptors like the actual you're

00:24:39,620 --> 00:24:43,910
working with like if you're using file

00:24:42,050 --> 00:24:46,640
descriptors in the current file system

00:24:43,910 --> 00:24:49,160
API you're working with the actual raw

00:24:46,640 --> 00:24:51,230
numbers which is not that nice piece

00:24:49,160 --> 00:24:53,180
like I mean you can open a file and

00:24:51,230 --> 00:24:58,130
basically forget to close it and just

00:24:53,180 --> 00:24:59,720
like it's going to leak resources if you

00:24:58,130 --> 00:25:02,000
are not really really careful

00:24:59,720 --> 00:25:03,830
like if something throws before you can

00:25:02,000 --> 00:25:06,470
close the file the file descriptor

00:25:03,830 --> 00:25:08,570
you're gonna have a resource leak it's

00:25:06,470 --> 00:25:11,420
like there's the one change that is

00:25:08,570 --> 00:25:13,100
different from the normal FS API that

00:25:11,420 --> 00:25:14,900
you don't actually work with your raw

00:25:13,100 --> 00:25:18,290
file descriptors to work with wrappers

00:25:14,900 --> 00:25:19,550
and like if you if they get garbage

00:25:18,290 --> 00:25:21,350
collected they're going to show you a

00:25:19,550 --> 00:25:25,910
warning it's like hey you forgot to

00:25:21,350 --> 00:25:30,500
close this that's also pretty nice and I

00:25:25,910 --> 00:25:34,250
think iterators which is like something

00:25:30,500 --> 00:25:36,770
that I think is like you don't need a

00:25:34,250 --> 00:25:39,490
flag for it in no.10 anymore like just

00:25:36,770 --> 00:25:41,630
to have the the engine exposed to us and

00:25:39,490 --> 00:25:43,880
like we're going to implement that in

00:25:41,630 --> 00:25:45,950
some way for for redline and for screams

00:25:43,880 --> 00:25:49,580
it's like you can actually do something

00:25:45,950 --> 00:25:51,830
like for racing cons shank off-screen

00:25:49,580 --> 00:25:54,170
instead of like listening to the data

00:25:51,830 --> 00:25:57,890
event of a stream also like really

00:25:54,170 --> 00:25:59,450
really cool and so like yeah I mentioned

00:25:57,890 --> 00:26:03,350
in the beginning that there were changes

00:25:59,450 --> 00:26:05,360
to our error system and it's like every

00:26:03,350 --> 00:26:08,060
error in node is going to eventually

00:26:05,360 --> 00:26:10,240
have a error code associated with it in

00:26:08,060 --> 00:26:10,240
some way

00:26:10,880 --> 00:26:14,750
this is usually going to look something

00:26:12,920 --> 00:26:17,290
like this like this is just like a very

00:26:14,750 --> 00:26:20,660
simple example of use like passing in a

00:26:17,290 --> 00:26:23,120
just like invalid thing to a function

00:26:20,660 --> 00:26:25,520
like you can't listen on an array with a

00:26:23,120 --> 00:26:29,060
network server just like going to tell

00:26:25,520 --> 00:26:33,830
you okay yeah that is not the right form

00:26:29,060 --> 00:26:36,680
we don't understand that and it's like

00:26:33,830 --> 00:26:41,770
so you can use you can look up the error

00:26:36,680 --> 00:26:41,770
code on that on that error

00:26:42,100 --> 00:26:47,240
yeah and that also means like if you're

00:26:44,510 --> 00:26:48,800
currently like the motivation for this

00:26:47,240 --> 00:26:51,740
is that like a lot of people were

00:26:48,800 --> 00:26:54,500
checking the the error text the error

00:26:51,740 --> 00:26:56,810
message when they like to figure out

00:26:54,500 --> 00:27:01,250
what actually happened and just like do

00:26:56,810 --> 00:27:04,070
like diagnostic speak in terms of that

00:27:01,250 --> 00:27:05,630
and that's not really cool because that

00:27:04,070 --> 00:27:07,520
means that changing an error message is

00:27:05,630 --> 00:27:09,650
actually a cember major change or has

00:27:07,520 --> 00:27:11,180
been up until now and we really don't

00:27:09,650 --> 00:27:13,310
want to do that group on I like just

00:27:11,180 --> 00:27:16,460
like give you the best error messages we

00:27:13,310 --> 00:27:17,870
can it's like yeah if you're if you want

00:27:16,460 --> 00:27:19,970
to know what was happening with a

00:27:17,870 --> 00:27:23,420
certain error just use error that code

00:27:19,970 --> 00:27:24,560
from now but like also like introducing

00:27:23,420 --> 00:27:26,210
this as always the same verb major

00:27:24,560 --> 00:27:28,940
change or at least we consider the one

00:27:26,210 --> 00:27:30,770
just like to be careful at this point so

00:27:28,940 --> 00:27:37,880
this is just like more of a long-term

00:27:30,770 --> 00:27:39,650
thing too and yeah okay workers we it's

00:27:37,880 --> 00:27:41,420
like there was a fork of node that you

00:27:39,650 --> 00:27:44,600
made a furtive like a while ago like

00:27:41,420 --> 00:27:47,150
half a year or so and in there I

00:27:44,600 --> 00:27:51,170
actually build work your support for

00:27:47,150 --> 00:27:55,040
node and I mean that far can installed

00:27:51,170 --> 00:27:57,770
at this point but but I have a lot of

00:27:55,040 --> 00:28:00,140
free time in the next couple weeks and I

00:27:57,770 --> 00:28:02,180
definitely want to have this a node I'm

00:28:00,140 --> 00:28:04,640
gonna try to like take the parts which

00:28:02,180 --> 00:28:07,460
like half a year olds like I mean

00:28:04,640 --> 00:28:08,720
there's those are pretty big patches but

00:28:07,460 --> 00:28:10,370
like I definitely want to have to add a

00:28:08,720 --> 00:28:13,130
note and like when I get them part it

00:28:10,370 --> 00:28:15,770
and want to make that happen really soon

00:28:13,130 --> 00:28:17,540
like that is what the API would

00:28:15,770 --> 00:28:20,150
currently look like if those patches

00:28:17,540 --> 00:28:23,410
were accepted as they currently are it's

00:28:20,150 --> 00:28:25,630
like completely up for debate but

00:28:23,410 --> 00:28:27,700
yeah you could just like have work as a

00:28:25,630 --> 00:28:29,980
note and those would have like access to

00:28:27,700 --> 00:28:32,110
the full noches API it's not like we're

00:28:29,980 --> 00:28:34,870
workers where you like have only

00:28:32,110 --> 00:28:36,820
restricted subset of things if if you

00:28:34,870 --> 00:28:41,049
want that you can probably build it with

00:28:36,820 --> 00:28:43,900
this like this is like speculative it's

00:28:41,049 --> 00:28:46,240
like there there isn't even open pull

00:28:43,900 --> 00:28:51,490
request so like take it with like grain

00:28:46,240 --> 00:28:53,380
of salt are you all tired at this point

00:28:51,490 --> 00:28:55,419
just like I know this is I know this is

00:28:53,380 --> 00:28:58,390
a very technical talk it's like doesn't

00:28:55,419 --> 00:29:05,650
really have any highlights or anything I

00:28:58,390 --> 00:29:07,270
hope you're fine with that I ain't like

00:29:05,650 --> 00:29:09,250
the general ideas just like to give you

00:29:07,270 --> 00:29:13,780
an overview over it's happening and I

00:29:09,250 --> 00:29:15,760
mean if you want to look something up

00:29:13,780 --> 00:29:20,140
again you can always like take a look at

00:29:15,760 --> 00:29:22,900
these slides later or or ask me or

00:29:20,140 --> 00:29:24,429
anything which is like don't feel like

00:29:22,900 --> 00:29:28,809
you have to like soak everything out

00:29:24,429 --> 00:29:30,010
just like no okay webassembly is there

00:29:28,809 --> 00:29:31,990
and we should have probably heard of

00:29:30,010 --> 00:29:34,150
because like over the last two months or

00:29:31,990 --> 00:29:35,980
so like everybody has been really really

00:29:34,150 --> 00:29:39,970
excited about being able to use rap

00:29:35,980 --> 00:29:41,679
assembly in JavaScript it's like yeah we

00:29:39,970 --> 00:29:43,690
have support for that it's not gonna

00:29:41,679 --> 00:29:46,150
like completely replace native add-ons

00:29:43,690 --> 00:29:52,090
but going to replace a lot of the use

00:29:46,150 --> 00:29:55,960
cases that we have for those yeah also

00:29:52,090 --> 00:29:57,580
like since no date you we like like I

00:29:55,960 --> 00:29:59,950
guess a lot of people here that are

00:29:57,580 --> 00:30:03,400
using the new protection are still on

00:29:59,950 --> 00:30:05,350
note 6 or something like that no date

00:30:03,400 --> 00:30:09,250
has a completely new compiler tool chain

00:30:05,350 --> 00:30:12,100
which is like I think like people were

00:30:09,250 --> 00:30:13,539
seeing up to 50% increases in

00:30:12,100 --> 00:30:18,130
performance just like from having this

00:30:13,539 --> 00:30:22,120
new JavaScript compiler tool chain like

00:30:18,130 --> 00:30:23,679
yeah I read work that they did or like I

00:30:22,120 --> 00:30:26,409
said the debugger API if you're ever

00:30:23,679 --> 00:30:28,570
used that it's like gone because like V

00:30:26,409 --> 00:30:31,419
I'd remove that so like we can't provide

00:30:28,570 --> 00:30:34,710
it anymore we're gonna have to live with

00:30:31,419 --> 00:30:34,710
what's coming up scream

00:30:35,510 --> 00:30:44,940
and oh yeah right it's we also like

00:30:42,150 --> 00:30:47,280
managed like it's not really a spur like

00:30:44,940 --> 00:30:49,920
we ain't decided to put note in its own

00:30:47,280 --> 00:30:51,870
CI so like that means that every change

00:30:49,920 --> 00:30:53,670
to v8 is actually being run against note

00:30:51,870 --> 00:30:56,310
and see whether it breaks any of our

00:30:53,670 --> 00:31:00,060
tests which is like really really nice

00:30:56,310 --> 00:31:01,710
first ability and just like not having

00:31:00,060 --> 00:31:04,230
to worry about as much like putting

00:31:01,710 --> 00:31:06,390
putting as much work into upgrading the

00:31:04,230 --> 00:31:09,320
18 note because like they're also like

00:31:06,390 --> 00:31:12,380
trying to take care of that on their own

00:31:09,320 --> 00:31:13,590
some are longer turn things okay so

00:31:12,380 --> 00:31:16,100
chakracore

00:31:13,590 --> 00:31:19,530
is it's a fork if note that's still like

00:31:16,100 --> 00:31:22,200
pretty actively being worked upon i'm

00:31:19,530 --> 00:31:24,510
not sure like when they're trying to

00:31:22,200 --> 00:31:26,160
like get that into the main noches

00:31:24,510 --> 00:31:29,340
repository but they they do have

00:31:26,160 --> 00:31:31,650
releases that you can check out like you

00:31:29,340 --> 00:31:34,800
can't install them i mean i think there

00:31:31,650 --> 00:31:36,210
are things like nvm with which you can

00:31:34,800 --> 00:31:39,630
install them but like i don't think you

00:31:36,210 --> 00:31:41,280
can do it with nvm itself in any case

00:31:39,630 --> 00:31:43,440
you can just like download and run them

00:31:41,280 --> 00:31:45,930
and see what whether that's for you

00:31:43,440 --> 00:31:47,790
whether it works i mean like if if you

00:31:45,930 --> 00:31:49,200
want try it out and if you have any

00:31:47,790 --> 00:31:54,390
feedback they'd be happy about that i

00:31:49,200 --> 00:31:55,890
guess also like good and this is I just

00:31:54,390 --> 00:31:58,380
like added that last night because like

00:31:55,890 --> 00:32:03,800
we had our TOC meetings you see meeting

00:31:58,380 --> 00:32:06,690
yesterday after the party and okay so

00:32:03,800 --> 00:32:10,140
our like we're gonna have to look at the

00:32:06,690 --> 00:32:15,000
OpenSSL story because so currently we're

00:32:10,140 --> 00:32:19,170
using open SSL 102 and that is going to

00:32:15,000 --> 00:32:21,510
stop being supported after 2019 it's

00:32:19,170 --> 00:32:24,870
like it's it's already limiting like how

00:32:21,510 --> 00:32:27,840
far we can support note 8 because we're

00:32:24,870 --> 00:32:29,790
using that they're like usually we would

00:32:27,840 --> 00:32:31,980
support no date for 4 more months I

00:32:29,790 --> 00:32:33,750
think I think it's like we have to end

00:32:31,980 --> 00:32:39,210
that early because like open mrs. Ellis

00:32:33,750 --> 00:32:41,040
going out of LTS and so like the most

00:32:39,210 --> 00:32:43,340
probable outcome is that we're going to

00:32:41,040 --> 00:32:45,990
support like three versions of OpenSSL

00:32:43,340 --> 00:32:47,490
EndNote it's like still going to take a

00:32:45,990 --> 00:32:52,590
lot of work

00:32:47,490 --> 00:32:54,840
in no.10 and it's like that's why I said

00:32:52,590 --> 00:32:57,840
like it's very very likely that no 10 is

00:32:54,840 --> 00:32:59,429
coming out in April but like there's

00:32:57,840 --> 00:33:02,669
also the option of just waiting for

00:32:59,429 --> 00:33:05,340
OpenSSL 1 1 1 to come out which is

00:33:02,669 --> 00:33:07,110
probably going to be in May and just

00:33:05,340 --> 00:33:08,250
like waiting for that with Aurelius we

00:33:07,110 --> 00:33:10,799
don't really want to do that because

00:33:08,250 --> 00:33:13,919
like we already delayed like the last

00:33:10,799 --> 00:33:16,200
like Note 8 not a release for a

00:33:13,919 --> 00:33:19,259
dependency we don't want to kind of get

00:33:16,200 --> 00:33:21,899
in the habit of that and we're probably

00:33:19,259 --> 00:33:24,389
going to make this work some way but

00:33:21,899 --> 00:33:26,669
yeah and openness will be one one one is

00:33:24,389 --> 00:33:29,970
actually coming with TLS 1.3 support

00:33:26,669 --> 00:33:33,779
which is like I don't know if you care

00:33:29,970 --> 00:33:35,940
about that but like people who do a lot

00:33:33,779 --> 00:33:39,750
with security stuff apparently care so I

00:33:35,940 --> 00:33:44,759
guess that's a really good thing yeah

00:33:39,750 --> 00:33:46,409
okay one more thing we like also one of

00:33:44,759 --> 00:33:51,899
the things that we just decided this

00:33:46,409 --> 00:33:54,240
week is that we are actually going to do

00:33:51,899 --> 00:33:56,009
a runtime deprecation for like the

00:33:54,240 --> 00:34:02,210
buffer constructor for new buffer or

00:33:56,009 --> 00:34:05,730
without the new in some way in no.10 I

00:34:02,210 --> 00:34:06,809
rewrote it on that and just like it's a

00:34:05,730 --> 00:34:09,750
decision that we're going to have to

00:34:06,809 --> 00:34:12,659
live with the backward controller has

00:34:09,750 --> 00:34:14,790
been deprecated since note 6 so like

00:34:12,659 --> 00:34:17,369
it's been quite a while but people are

00:34:14,790 --> 00:34:19,409
still very actively using it and there

00:34:17,369 --> 00:34:22,169
are some like I don't know if you've

00:34:19,409 --> 00:34:24,899
ever read up on that there are some

00:34:22,169 --> 00:34:30,240
usability concerns that like reach into

00:34:24,899 --> 00:34:35,609
security issues so like the thing is and

00:34:30,240 --> 00:34:37,290
if you like use pass the string to to

00:34:35,609 --> 00:34:41,250
the buffer yeah I actually have an

00:34:37,290 --> 00:34:42,569
example it's like if you have input

00:34:41,250 --> 00:34:44,639
that's coming from a user and you're

00:34:42,569 --> 00:34:46,770
going to like parse it in some way and

00:34:44,639 --> 00:34:49,589
you forget validating the type and then

00:34:46,770 --> 00:34:53,339
you're going to respond something with

00:34:49,589 --> 00:34:54,300
with new buffer where the parameter is

00:34:53,339 --> 00:34:58,920
something that you didn't really

00:34:54,300 --> 00:34:59,820
validate so like that that thing that

00:34:58,920 --> 00:35:03,060
you think

00:34:59,820 --> 00:35:08,040
some screen like which it might not be

00:35:03,060 --> 00:35:09,870
because the user passed it in like if

00:35:08,040 --> 00:35:12,570
that's a number like in other versions

00:35:09,870 --> 00:35:15,120
of nerd you would actually get a chunk

00:35:12,570 --> 00:35:17,220
of additional uninitialized memory it's

00:35:15,120 --> 00:35:19,590
like you would actually tell you

00:35:17,220 --> 00:35:21,150
potentially tell an attacker what is in

00:35:19,590 --> 00:35:25,320
your memory which is like something you

00:35:21,150 --> 00:35:28,350
really don't want to do and so like we

00:35:25,320 --> 00:35:29,700
switch to zero filling a while ago it's

00:35:28,350 --> 00:35:31,920
like you they would get a zero foot

00:35:29,700 --> 00:35:33,570
buffer but still like they could like if

00:35:31,920 --> 00:35:35,340
there's an attacker and they can control

00:35:33,570 --> 00:35:37,980
your program like that and they pass in

00:35:35,340 --> 00:35:40,740
a really big number like your program is

00:35:37,980 --> 00:35:43,440
trying to use a lot of memory and that's

00:35:40,740 --> 00:35:44,880
actually it's like if they do it that a

00:35:43,440 --> 00:35:47,150
couple times your code it's just like

00:35:44,880 --> 00:35:49,680
we're going to run out of memory yep

00:35:47,150 --> 00:35:51,390
your servers going to crash we don't

00:35:49,680 --> 00:35:53,190
want to have that happen so we

00:35:51,390 --> 00:35:55,020
deprecated the buffer constructor and

00:35:53,190 --> 00:35:58,650
replaced it with buffered Alec and

00:35:55,020 --> 00:36:00,300
buffer that from you should use those

00:35:58,650 --> 00:36:02,850
and like there's going to be a warning

00:36:00,300 --> 00:36:07,020
and emitted in no.10 like I said in some

00:36:02,850 --> 00:36:08,880
way and be careful and like try to

00:36:07,020 --> 00:36:10,740
upgrade your code if you have new buffer

00:36:08,880 --> 00:36:13,140
anywhere in there it's like you don't

00:36:10,740 --> 00:36:15,960
want your users or yourself to just like

00:36:13,140 --> 00:36:21,380
be you see a warning every time you run

00:36:15,960 --> 00:36:23,700
that code another thing that is like

00:36:21,380 --> 00:36:28,410
kind of thought somebody was saying

00:36:23,700 --> 00:36:29,970
something ok yeah screams so that's also

00:36:28,410 --> 00:36:32,370
one of the more long-term things but

00:36:29,970 --> 00:36:35,840
it's like what I basically spent my last

00:36:32,370 --> 00:36:38,240
four or five months working on the node

00:36:35,840 --> 00:36:41,610
so like scripts have a lot of overhead

00:36:38,240 --> 00:36:43,470
it's like there's buffering in on both

00:36:41,610 --> 00:36:45,660
sides for readable screens for writable

00:36:43,470 --> 00:36:47,540
screams there's support for a lot of

00:36:45,660 --> 00:36:49,740
stuff in there that most people like

00:36:47,540 --> 00:36:52,680
well they do use it but they don't use

00:36:49,740 --> 00:36:55,800
it all the time like automatically

00:36:52,680 --> 00:36:59,430
decoding incoming data from like buffers

00:36:55,800 --> 00:37:01,830
to utf-8 or something it's like it's a

00:36:59,430 --> 00:37:05,550
very complex machinery you have a lot of

00:37:01,830 --> 00:37:07,530
different modes to use screams in just

00:37:05,550 --> 00:37:09,630
like it's very complex and it does

00:37:07,530 --> 00:37:11,980
unfurnished you unfortunately have a lot

00:37:09,630 --> 00:37:14,650
of overhead it's

00:37:11,980 --> 00:37:18,520
not terrible but like it's not the way

00:37:14,650 --> 00:37:21,820
it should be so like a couple people are

00:37:18,520 --> 00:37:24,580
working on like flashing out a new

00:37:21,820 --> 00:37:26,710
low-level screams API that is not going

00:37:24,580 --> 00:37:29,860
to have those issues it's probably going

00:37:26,710 --> 00:37:32,200
to be pull screen based and it's like

00:37:29,860 --> 00:37:34,210
what I did it's like that that is still

00:37:32,200 --> 00:37:35,920
very speculative what I actually did and

00:37:34,210 --> 00:37:37,990
landed a note is like a lot of

00:37:35,920 --> 00:37:41,470
refactoring on the C++ side of things

00:37:37,990 --> 00:37:44,260
and so like the goal of that is being

00:37:41,470 --> 00:37:47,350
able to like have scream a the pipe

00:37:44,260 --> 00:37:49,540
scream be just like half that be a fast

00:37:47,350 --> 00:37:52,150
path just like not calling into

00:37:49,540 --> 00:37:54,070
JavaScript screams at all just like

00:37:52,150 --> 00:37:57,100
passing the data right through in C++

00:37:54,070 --> 00:38:01,500
which is like if I can make that work

00:37:57,100 --> 00:38:05,800
it's going to be really really fast and

00:38:01,500 --> 00:38:09,070
so just like so you know where bad note

00:38:05,800 --> 00:38:11,710
4 is just like about to expire like if

00:38:09,070 --> 00:38:13,660
you use node 4 anywhere just like get

00:38:11,710 --> 00:38:18,940
rid of that because like it's only

00:38:13,660 --> 00:38:21,670
supported for another month node 6 is

00:38:18,940 --> 00:38:24,010
being supported until like one more year

00:38:21,670 --> 00:38:25,840
which is also like you might want to

00:38:24,010 --> 00:38:29,380
think about starting to move away from

00:38:25,840 --> 00:38:31,660
that and like I said no it is supported

00:38:29,380 --> 00:38:37,830
on 30 December 2019 because like open

00:38:31,660 --> 00:38:43,240
SSL expires then one or two no.9 is like

00:38:37,830 --> 00:38:45,310
also like I mean like when I'm talking

00:38:43,240 --> 00:38:49,600
to people like some of them are not that

00:38:45,310 --> 00:38:53,880
aware that like our our odd number

00:38:49,600 --> 00:38:56,080
releases like node 7 node 5 node 9 like

00:38:53,880 --> 00:38:58,270
they're just like they basically stop

00:38:56,080 --> 00:39:00,700
being supported when the next major

00:38:58,270 --> 00:39:02,740
release comes out like no 10 we're still

00:39:00,700 --> 00:39:04,570
going to do security releases for like

00:39:02,740 --> 00:39:06,730
another two months or so but basically

00:39:04,570 --> 00:39:09,640
like if you use an odd-numbered release

00:39:06,730 --> 00:39:12,940
of node that's cool because like you

00:39:09,640 --> 00:39:16,050
should because like it's basically a a

00:39:12,940 --> 00:39:16,050
peek into the future

00:39:17,230 --> 00:39:21,310
but yeah it's just like if you're using

00:39:19,180 --> 00:39:26,050
that just like be prepared to jump to

00:39:21,310 --> 00:39:27,730
know ten like very very soon and that's

00:39:26,050 --> 00:39:30,369
it thank you for listening if you have

00:39:27,730 --> 00:39:35,260
any questions just like you can come to

00:39:30,369 --> 00:39:37,630
me if you have anything that note could

00:39:35,260 --> 00:39:40,530
do better or that we could do better or

00:39:37,630 --> 00:39:43,760
that you want to change a note yourself

00:39:40,530 --> 00:39:51,099
just like come talk to me

00:39:43,760 --> 00:39:51,099

YouTube URL: https://www.youtube.com/watch?v=O3MYg3Tp36s


