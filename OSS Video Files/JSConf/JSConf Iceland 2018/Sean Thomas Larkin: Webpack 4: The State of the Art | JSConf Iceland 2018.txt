Title: Sean Thomas Larkin: Webpack 4: The State of the Art | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/sean-larkin/

Webpack 4 is closely drawing near to its final release! But what does that mean to you? Join me as not only I help break down everything we’ve accomplished this year, but also look forward to what we have in store for you in the future. Join me as we’ll talk about what it means to represent the #0CJS (Zero Config JS) movement, what it means to put developers first, and how we aim to embody the term Legato: to perform in a smooth, flowing, manner without gaps.

Join me as I breakdown why this update, more then any that have come before, is the most groundbreaking set of changes for the future of webpack and our ecosystem!
Captions: 
	00:00:00,060 --> 00:00:07,020
how's it going that last talk was really

00:00:04,230 --> 00:00:10,260
freakin great like I wondered to myself

00:00:07,020 --> 00:00:12,509
I'm like I maintain this web compiler

00:00:10,260 --> 00:00:13,889
and like how many like tiny character

00:00:12,509 --> 00:00:16,230
tricks can we take from this

00:00:13,889 --> 00:00:19,680
but anyways maybe that's for a minute

00:00:16,230 --> 00:00:23,279
fire so yes thank you so the title of

00:00:19,680 --> 00:00:26,490
this talk is web pack for the state of

00:00:23,279 --> 00:00:29,189
the art and so for those who don't know

00:00:26,490 --> 00:00:31,340
me I am Sean Larkin and so I'm a project

00:00:29,189 --> 00:00:34,530
manager or program manager at Microsoft

00:00:31,340 --> 00:00:38,040
working at Microsoft edge and edge dev

00:00:34,530 --> 00:00:39,149
tools but you may know me as being one

00:00:38,040 --> 00:00:42,570
of the maintainer x' of the web pack

00:00:39,149 --> 00:00:44,870
core team and also spent time working on

00:00:42,570 --> 00:00:46,230
the angular CLI and just a general

00:00:44,870 --> 00:00:49,110
evangelist for open-source

00:00:46,230 --> 00:00:50,550
sustainability and then now kind of with

00:00:49,110 --> 00:00:53,969
my involvement through Microsoft and web

00:00:50,550 --> 00:00:56,280
pack helping represent you all at the

00:00:53,969 --> 00:01:00,030
node.js foundation for modules and also

00:00:56,280 --> 00:01:02,010
web assembly in their community group so

00:01:00,030 --> 00:01:04,530
a little bit about myself is I'm a tech

00:01:02,010 --> 00:01:06,720
support technical support rep gone rogue

00:01:04,530 --> 00:01:09,240
I got tired of not being able to solve

00:01:06,720 --> 00:01:11,700
people's problems and so I started

00:01:09,240 --> 00:01:14,850
learning AppleScript like who wrote

00:01:11,700 --> 00:01:17,390
AppleScript like yeah like that was my

00:01:14,850 --> 00:01:20,070
first programming language and then Ruby

00:01:17,390 --> 00:01:23,000
and then objective-c and then finally I

00:01:20,070 --> 00:01:27,030
found JavaScript you know I also like

00:01:23,000 --> 00:01:28,500
woodworking and Internet of Things but

00:01:27,030 --> 00:01:30,240
like I said sustainable open-source

00:01:28,500 --> 00:01:33,409
practices is one of probably my latest

00:01:30,240 --> 00:01:36,900
passions that I've been following now

00:01:33,409 --> 00:01:40,700
you can find me anywhere like anywhere

00:01:36,900 --> 00:01:43,350
most in most places with at the lark in

00:01:40,700 --> 00:01:44,939
and so if you wanted to tweet this out

00:01:43,350 --> 00:01:46,770
right now I'll give you a second take

00:01:44,939 --> 00:01:49,409
your time

00:01:46,770 --> 00:01:50,899
there's no rush but you can find me on

00:01:49,409 --> 00:01:54,119
any of those places

00:01:50,899 --> 00:01:58,439
so back back to the talk okay so web

00:01:54,119 --> 00:02:02,189
pack for the state of the art and state

00:01:58,439 --> 00:02:04,590
of the art so like I just wanted to pull

00:02:02,189 --> 00:02:06,570
up a little definition and there is that

00:02:04,590 --> 00:02:08,550
how you'd say it I stand off the list

00:02:06,570 --> 00:02:13,410
and is that the Icelandic version of

00:02:08,550 --> 00:02:13,780
that I'm not sure but you know we're

00:02:13,410 --> 00:02:16,030
talking

00:02:13,780 --> 00:02:18,520
about the recent stage of development or

00:02:16,030 --> 00:02:21,970
I don't want to call what we do

00:02:18,520 --> 00:02:23,380
avant-garde but at least you know the

00:02:21,970 --> 00:02:26,080
the latest release and what we're

00:02:23,380 --> 00:02:27,520
talking about today and so you know like

00:02:26,080 --> 00:02:31,480
it was mentioned we did just release

00:02:27,520 --> 00:02:34,990
webpack a hundred and twenty hours ago

00:02:31,480 --> 00:02:38,500
and it's here it's in latest web pack

00:02:34,990 --> 00:02:40,510
for is out and you can get it today but

00:02:38,500 --> 00:02:44,530
I want to talk about what web pack four

00:02:40,510 --> 00:02:46,600
represents and so for the first time we

00:02:44,530 --> 00:02:48,520
decided to take and give our major

00:02:46,600 --> 00:02:51,250
releases a codename and so this is

00:02:48,520 --> 00:02:53,230
called web pack legato so you might be

00:02:51,250 --> 00:02:55,750
like what like I know who's a like I'm a

00:02:53,230 --> 00:02:58,900
music major so in college so anybody

00:02:55,750 --> 00:03:02,530
else did music okay so you understand

00:02:58,900 --> 00:03:04,870
what legato means it's to express notes

00:03:02,530 --> 00:03:09,670
in a flowing matter without gaps in

00:03:04,870 --> 00:03:12,850
between them but we got this term from

00:03:09,670 --> 00:03:14,920
our major sponsor trivago so we we want

00:03:12,850 --> 00:03:18,310
to give the opportunity for one of our

00:03:14,920 --> 00:03:21,250
largest sponsors to name the to name

00:03:18,310 --> 00:03:24,220
this major release and so this was kind

00:03:21,250 --> 00:03:26,170
of their explanation you know at trivago

00:03:24,220 --> 00:03:29,260
we usually give our projects a name and

00:03:26,170 --> 00:03:30,730
a musical theme so for example they're

00:03:29,260 --> 00:03:32,440
all JavaScript framework was called

00:03:30,730 --> 00:03:35,080
harmony our new framework is called

00:03:32,440 --> 00:03:37,750
melody and on the PHP side they're using

00:03:35,080 --> 00:03:40,959
Symphony and the top layer is called

00:03:37,750 --> 00:03:44,739
Orchestra and so legato meaning to play

00:03:40,959 --> 00:03:47,890
without gaps expressive through through

00:03:44,739 --> 00:03:51,190
each note to them really embodied what

00:03:47,890 --> 00:03:52,690
it meant to have webpack for you know in

00:03:51,190 --> 00:03:56,829
their build system and how it ties

00:03:52,690 --> 00:03:58,930
everything together and you know before

00:03:56,829 --> 00:04:02,470
I go on and explain more I want you to

00:03:58,930 --> 00:04:04,989
just look at one of these slides or to

00:04:02,470 --> 00:04:08,950
each of them and if you see your company

00:04:04,989 --> 00:04:14,200
there or yourself I just want you to

00:04:08,950 --> 00:04:16,989
stand up right now so if any of this is

00:04:14,200 --> 00:04:19,989
you stand up I know I know there are

00:04:16,989 --> 00:04:21,489
many please so I want you to look around

00:04:19,989 --> 00:04:23,680
and I want to give I want you all to

00:04:21,489 --> 00:04:26,099
give them a round of applause because

00:04:23,680 --> 00:04:26,099
this is

00:04:28,080 --> 00:04:33,310
because without these people we would

00:04:30,970 --> 00:04:36,790
not be here today

00:04:33,310 --> 00:04:38,260
and webpack four may not exist so I just

00:04:36,790 --> 00:04:42,220
wanted to take take a second and

00:04:38,260 --> 00:04:44,260
recognize those people mm-hmm so you

00:04:42,220 --> 00:04:45,910
know we wanted to kind of create this

00:04:44,260 --> 00:04:49,150
higher level story about what webpack

00:04:45,910 --> 00:04:51,640
four meant meant for our users meant for

00:04:49,150 --> 00:04:55,630
us and so you know the first thing with

00:04:51,640 --> 00:04:59,110
smaller builds and faster builds the

00:04:55,630 --> 00:05:00,460
second was modernization and then

00:04:59,110 --> 00:05:02,980
finally probably one of the most

00:05:00,460 --> 00:05:05,140
important well I mean all of these are

00:05:02,980 --> 00:05:05,890
really important and not mutually

00:05:05,140 --> 00:05:10,810
exclusive

00:05:05,890 --> 00:05:13,060
which is developer experience and if I

00:05:10,810 --> 00:05:16,000
talk about smaller and faster builds and

00:05:13,060 --> 00:05:17,950
we try and break it down you can kind of

00:05:16,000 --> 00:05:20,560
categorize it here so like to have a

00:05:17,950 --> 00:05:24,340
smaller build you're going to need to do

00:05:20,560 --> 00:05:26,410
more analysis on the code and you're

00:05:24,340 --> 00:05:29,860
gonna have to process more of the module

00:05:26,410 --> 00:05:32,880
graph and then for faster builds though

00:05:29,860 --> 00:05:36,280
you're gonna have to do less work and

00:05:32,880 --> 00:05:40,950
reuse existing work that's already been

00:05:36,280 --> 00:05:46,080
done so these are kind of conflicting

00:05:40,950 --> 00:05:48,130
but for faster builds we completely

00:05:46,080 --> 00:05:50,640
reacted the way that we define what a

00:05:48,130 --> 00:05:53,020
chunk is and a chunk is just the

00:05:50,640 --> 00:05:55,960
in-memory version of the bundle you see

00:05:53,020 --> 00:05:58,690
created but we also added additional

00:05:55,960 --> 00:06:00,820
features like uglify j/s we're gonna be

00:05:58,690 --> 00:06:04,390
using it in parallel and cashing it out

00:06:00,820 --> 00:06:07,260
of the box and we also modernized a lot

00:06:04,390 --> 00:06:10,360
of the pieces that we had in just old

00:06:07,260 --> 00:06:15,040
es5 object syntax and we moved to using

00:06:10,360 --> 00:06:17,290
maps and sets but specifically I think

00:06:15,040 --> 00:06:20,440
one of the most important is the

00:06:17,290 --> 00:06:22,150
migration of our plug-in system we wrote

00:06:20,440 --> 00:06:26,110
it completely from the graph from the

00:06:22,150 --> 00:06:27,820
ground up and now we have what are

00:06:26,110 --> 00:06:30,820
called hooks which are create

00:06:27,820 --> 00:06:32,230
monomorphic code and we lazy compile

00:06:30,820 --> 00:06:34,900
them and I want to actually take a

00:06:32,230 --> 00:06:35,360
moment to explain well what is what is

00:06:34,900 --> 00:06:38,870
this

00:06:35,360 --> 00:06:42,439
mean who here is familiar with mano

00:06:38,870 --> 00:06:43,659
morphism or polymorphism okay so this

00:06:42,439 --> 00:06:46,430
may look familiar

00:06:43,659 --> 00:06:48,500
so this is an example of one of the

00:06:46,430 --> 00:06:52,460
methods that is available in our plug-in

00:06:48,500 --> 00:06:56,050
system prior to rewriting it and so if

00:06:52,460 --> 00:06:58,340
you see here this this method is what

00:06:56,050 --> 00:07:00,469
certain classes in web pack will call

00:06:58,340 --> 00:07:03,530
and plugins are listening to this event

00:07:00,469 --> 00:07:05,360
and what's passed in is a arbitrary like

00:07:03,530 --> 00:07:07,550
event string it's like an event emitter

00:07:05,360 --> 00:07:09,849
if you've ever used it before but the

00:07:07,550 --> 00:07:12,849
problem here is that this is polymorphic

00:07:09,849 --> 00:07:15,289
it can be any amount of arguments and

00:07:12,849 --> 00:07:20,539
there's no way for the JavaScript engine

00:07:15,289 --> 00:07:22,099
stopped mices so you know our initial

00:07:20,539 --> 00:07:24,050
answer was like oh why don't we get

00:07:22,099 --> 00:07:26,330
clever and just make separate methods

00:07:24,050 --> 00:07:28,340
with single arguments for each of them

00:07:26,330 --> 00:07:30,620
well that was not going to work one

00:07:28,340 --> 00:07:32,930
because we could have a plug-in system

00:07:30,620 --> 00:07:34,639
that's ginormous you have infinite

00:07:32,930 --> 00:07:37,219
amount of different event names and

00:07:34,639 --> 00:07:38,870
argument types that can be passed in and

00:07:37,219 --> 00:07:42,740
so it's unmaintainable and not really a

00:07:38,870 --> 00:07:45,740
great contributor experience and so it's

00:07:42,740 --> 00:07:49,250
like how could we how could we solve

00:07:45,740 --> 00:07:53,930
this where we're creating monomorphic

00:07:49,250 --> 00:07:55,159
functions but they're unique and you

00:07:53,930 --> 00:07:58,610
know we don't have a billion of them

00:07:55,159 --> 00:08:02,779
that we have to maintain so we use the

00:07:58,610 --> 00:08:04,759
technique to lazily compile based on

00:08:02,779 --> 00:08:06,319
what is listening to these events and I

00:08:04,759 --> 00:08:08,990
know I'm going a little deep here but it

00:08:06,319 --> 00:08:10,879
might make more sense in a moment but

00:08:08,990 --> 00:08:14,110
you can see at the bottom we're

00:08:10,879 --> 00:08:17,449
literally just composing a bunch of

00:08:14,110 --> 00:08:20,919
strings that are JavaScript that compile

00:08:17,449 --> 00:08:23,479
to these hooks and then we evaluate it

00:08:20,919 --> 00:08:25,490
and so like a really great resource if

00:08:23,479 --> 00:08:27,560
you're interested in this and I'll try

00:08:25,490 --> 00:08:31,219
not to butcher the name but V dot J's

00:08:27,560 --> 00:08:32,599
luff I got off wrote a great explainer

00:08:31,219 --> 00:08:34,399
article that you can go to and take a

00:08:32,599 --> 00:08:37,729
look at it to understand how this

00:08:34,399 --> 00:08:39,949
accomplishes monomorphic code and if

00:08:37,729 --> 00:08:41,810
you're on Twitter a lot like myself you

00:08:39,949 --> 00:08:44,660
may have seen this article that was like

00:08:41,810 --> 00:08:46,310
hey you may not need you know rust and

00:08:44,660 --> 00:08:48,180
webassembly to speed up your JavaScript

00:08:46,310 --> 00:08:51,000
well it turns out

00:08:48,180 --> 00:08:55,290
like how that looks pretty familiar the

00:08:51,000 --> 00:08:57,750
code that he showcased and look he's

00:08:55,290 --> 00:09:00,170
doing the same thing so the point is

00:08:57,750 --> 00:09:03,180
that we can create this monomorphic code

00:09:00,170 --> 00:09:06,330
but we're doing it kind of evaluative ly

00:09:03,180 --> 00:09:09,600
or lazy compiling it but please do not

00:09:06,330 --> 00:09:11,940
do this in your normal projects this is

00:09:09,600 --> 00:09:14,310
you know there are some parts of webpack

00:09:11,940 --> 00:09:16,530
that execute 19 million times on large

00:09:14,310 --> 00:09:20,820
code bases and so everything is in the

00:09:16,530 --> 00:09:25,440
hot path for us and so just as Benedict

00:09:20,820 --> 00:09:26,190
Moyer says or v8 senpai don't please

00:09:25,440 --> 00:09:30,480
don't do this

00:09:26,190 --> 00:09:36,840
please don't but so like what did this

00:09:30,480 --> 00:09:39,530
represent to us and so on most web pack

00:09:36,840 --> 00:09:44,780
builds we saw it get 98 percent faster

00:09:39,530 --> 00:09:50,450
so 98% of the build time was reduced

00:09:44,780 --> 00:09:57,000
just by people upgrading to web pack 498

00:09:50,450 --> 00:09:58,770
yeah and you'd be like Shawn you're

00:09:57,000 --> 00:10:01,770
lying stop you embellish all the time

00:09:58,770 --> 00:10:03,420
and I'm like well it turns out that we

00:10:01,770 --> 00:10:05,820
have people who are reporting 6 hours of

00:10:03,420 --> 00:10:09,090
their build times on web pack 3 actually

00:10:05,820 --> 00:10:14,790
who's 9 hours but this he stopped at 6

00:10:09,090 --> 00:10:19,470
on this run and so we were like we have

00:10:14,790 --> 00:10:21,810
an idea and after after showcasing this

00:10:19,470 --> 00:10:26,030
in the in the web pack for alpha we

00:10:21,810 --> 00:10:30,000
found 17 minutes 17 minutes from 9 hours

00:10:26,030 --> 00:10:34,770
so like there's the URL you can go to it

00:10:30,000 --> 00:10:36,480
I'm not lying and just to make sure so

00:10:34,770 --> 00:10:37,980
that people would be like Shawn you're

00:10:36,480 --> 00:10:40,590
still lying

00:10:37,980 --> 00:10:43,950
we just before once we got into our

00:10:40,590 --> 00:10:47,970
release candidacy I decided to you know

00:10:43,950 --> 00:10:49,530
play a little game to see hey 1 could we

00:10:47,970 --> 00:10:51,600
get people to upgrade to the beta so

00:10:49,530 --> 00:10:54,420
that we could catch early bugs warning

00:10:51,600 --> 00:10:56,330
signs things like that but - is this

00:10:54,420 --> 00:11:01,740
like speed boost really is this for real

00:10:56,330 --> 00:11:06,560
so um yeah I shot this out and like we

00:11:01,740 --> 00:11:17,430
seeing 75% on some cases we were seeing

00:11:06,560 --> 00:11:20,160
90% 80% and so it's the real deal and so

00:11:17,430 --> 00:11:22,680
you know that build speed you know to

00:11:20,160 --> 00:11:25,070
sum it up we were able to accomplish

00:11:22,680 --> 00:11:28,410
that first piece in what our goals were

00:11:25,070 --> 00:11:29,850
but then we still had smaller builds now

00:11:28,410 --> 00:11:31,830
we have to do something basically

00:11:29,850 --> 00:11:35,790
completely opposite to what trying to

00:11:31,830 --> 00:11:36,870
get a faster build will do for you so

00:11:35,790 --> 00:11:40,470
the first thing that we tried to

00:11:36,870 --> 00:11:43,680
implement and we were able to do so is

00:11:40,470 --> 00:11:46,830
JSON tree-shaking so if you ever use

00:11:43,680 --> 00:11:49,080
JSON with webpack you'll notice that in

00:11:46,830 --> 00:11:51,900
version 3 it would bundle all of the

00:11:49,080 --> 00:11:54,270
pieces that you would import into it but

00:11:51,900 --> 00:11:57,990
we found out that really like JSON is

00:11:54,270 --> 00:12:01,020
just as a a stricter set of what

00:11:57,990 --> 00:12:04,800
JavaScript is and so we could treat it

00:12:01,020 --> 00:12:07,290
like an atmosphere module and only the

00:12:04,800 --> 00:12:10,230
pieces that are now used will actually

00:12:07,290 --> 00:12:11,580
get will stay in your code and so in

00:12:10,230 --> 00:12:13,770
this case you know you can just see

00:12:11,580 --> 00:12:15,780
we're just pulling in and importing one

00:12:13,770 --> 00:12:21,600
property and that's all that actually

00:12:15,780 --> 00:12:24,360
compiles when we minify the code we also

00:12:21,600 --> 00:12:27,150
have a feature well I'll explain the

00:12:24,360 --> 00:12:29,880
problem first so according to Equus grip

00:12:27,150 --> 00:12:33,770
module specification or the harmony

00:12:29,880 --> 00:12:37,530
module spec when you have multiple

00:12:33,770 --> 00:12:40,130
exports inside of a file every single

00:12:37,530 --> 00:12:43,710
one of them has to be evaluated and

00:12:40,130 --> 00:12:46,040
executed to ensure that they are not

00:12:43,710 --> 00:12:50,900
creating side-effects against each other

00:12:46,040 --> 00:12:53,730
so what does that mean well if lodash is

00:12:50,900 --> 00:12:56,790
exporting from a file essentially a

00:12:53,730 --> 00:13:00,630
thousand exports each one of them has to

00:12:56,790 --> 00:13:02,670
be included into your bundle so what we

00:13:00,630 --> 00:13:07,710
did and you can see that here in this

00:13:02,670 --> 00:13:09,480
tiny example so we did as we created

00:13:07,710 --> 00:13:11,790
this trick we had to tell the compiler

00:13:09,480 --> 00:13:13,710
some way like hey there are no side

00:13:11,790 --> 00:13:15,050
effects here you can go ahead and ignore

00:13:13,710 --> 00:13:17,060
those properties

00:13:15,050 --> 00:13:19,940
and so that's what we did we created the

00:13:17,060 --> 00:13:21,860
side effects property which now we're

00:13:19,940 --> 00:13:24,589
asking library authors to include in

00:13:21,860 --> 00:13:27,019
their package Jason's because what

00:13:24,589 --> 00:13:29,269
webpack will do in production mode is it

00:13:27,019 --> 00:13:32,060
will look for the presence of this this

00:13:29,269 --> 00:13:35,810
property and it will simply prune it out

00:13:32,060 --> 00:13:38,450
and in fact it actually makes builds

00:13:35,810 --> 00:13:39,860
faster when we are in the beta stages we

00:13:38,450 --> 00:13:41,839
found that our production builds were

00:13:39,860 --> 00:13:44,630
faster than the develop memo builds

00:13:41,839 --> 00:13:46,370
because of this feature because what

00:13:44,630 --> 00:13:47,630
you're doing is you're ignoring tracing

00:13:46,370 --> 00:13:50,120
those parts of the graph because you

00:13:47,630 --> 00:13:52,579
know they aren't actually used so in

00:13:50,120 --> 00:13:57,560
this case we saw something like in

00:13:52,579 --> 00:14:03,640
webpack 3 you know 200 KB of minimize

00:13:57,560 --> 00:14:04,820
code actually turned to 1 KB so hmm

00:14:03,640 --> 00:14:08,120
really

00:14:04,820 --> 00:14:11,089
all you need to do if you you know it's

00:14:08,120 --> 00:14:12,620
so easy all I have to do is just tree

00:14:11,089 --> 00:14:14,329
shake mangle your exports go POIs

00:14:12,620 --> 00:14:18,110
minimize and then package authors have

00:14:14,329 --> 00:14:21,050
to set side-effects oh that's ridiculous

00:14:18,110 --> 00:14:22,820
you shouldn't have to do any of that and

00:14:21,050 --> 00:14:24,950
that kind of gets into what developer

00:14:22,820 --> 00:14:29,000
experience is about all you should have

00:14:24,950 --> 00:14:33,260
to do is freakin run web pack and so out

00:14:29,000 --> 00:14:36,470
of the box now in web pack four we

00:14:33,260 --> 00:14:37,850
default to a production mode so all of

00:14:36,470 --> 00:14:42,890
those things you saw in that bullet

00:14:37,850 --> 00:14:44,660
point they just happen and so developer

00:14:42,890 --> 00:14:46,220
experience to us meant we need to lower

00:14:44,660 --> 00:14:47,839
the barrier to entry to people who are

00:14:46,220 --> 00:14:50,990
trying these tools for the first time

00:14:47,839 --> 00:14:53,390
not everybody understands the rigorous

00:14:50,990 --> 00:14:55,010
and obnoxious history of JavaScript

00:14:53,390 --> 00:14:57,380
modules and where they started and where

00:14:55,010 --> 00:15:01,520
they are now and we also need to have

00:14:57,380 --> 00:15:04,339
better defaults and thanks to libraries

00:15:01,520 --> 00:15:09,649
like parcel we can now coin something

00:15:04,339 --> 00:15:12,050
like zero config j/s and us zero config

00:15:09,649 --> 00:15:13,640
doesn't mean you know like letting you

00:15:12,050 --> 00:15:16,040
do whatever you want and shoving it into

00:15:13,640 --> 00:15:17,570
one package and then hoping not the

00:15:16,040 --> 00:15:20,029
feature that you don't use breaks and

00:15:17,570 --> 00:15:25,699
causes a major breaking change it means

00:15:20,029 --> 00:15:28,400
being able to actually extend a base

00:15:25,699 --> 00:15:30,890
scenario to your users so that it can

00:15:28,400 --> 00:15:33,980
you I oh you know bring your own zero

00:15:30,890 --> 00:15:37,760
config j/s and so this is really the

00:15:33,980 --> 00:15:40,490
line that we wanted to to cross so you

00:15:37,760 --> 00:15:43,570
know by defaults you don't even need a

00:15:40,490 --> 00:15:48,140
web pack config to use web pack for

00:15:43,570 --> 00:15:56,390
every property has been defaulted and

00:15:48,140 --> 00:15:58,340
what the future yeah now I'm not so that

00:15:56,390 --> 00:16:01,040
what I'm trying to say though is that

00:15:58,340 --> 00:16:03,010
not everybody will end up you know just

00:16:01,040 --> 00:16:06,290
ripping out their web pack config

00:16:03,010 --> 00:16:08,840
because the power of web pack is is

00:16:06,290 --> 00:16:14,000
deeply rooted in how extensible we are

00:16:08,840 --> 00:16:16,910
and so instead why don't we extend this

00:16:14,000 --> 00:16:19,910
idea so we also created this feature

00:16:16,910 --> 00:16:21,530
called mode and so mode is a property on

00:16:19,910 --> 00:16:23,390
the config or a flag that you can pass

00:16:21,530 --> 00:16:27,080
in the CLI and we default to production

00:16:23,390 --> 00:16:28,610
like I said and you know what it

00:16:27,080 --> 00:16:29,840
represents is that for development

00:16:28,610 --> 00:16:31,490
you're going to want to have tooling for

00:16:29,840 --> 00:16:34,040
the browser you're going to want to have

00:16:31,490 --> 00:16:36,440
really fast incremental compilation and

00:16:34,040 --> 00:16:38,600
you're gonna have better error messages

00:16:36,440 --> 00:16:42,590
that you know don't take up an entire

00:16:38,600 --> 00:16:45,740
console and then for production we're

00:16:42,590 --> 00:16:48,410
optimizing for size we're optimizing for

00:16:45,740 --> 00:16:51,500
the right kind of source code and we're

00:16:48,410 --> 00:16:53,930
optimizing for file paths that are

00:16:51,500 --> 00:16:55,910
understandable but don't leak you know

00:16:53,930 --> 00:16:59,840
information to the people using your

00:16:55,910 --> 00:17:01,670
website but it also means getting rid of

00:16:59,840 --> 00:17:03,260
things that used to really cause us

00:17:01,670 --> 00:17:06,380
problems like the Commons chunk plugin

00:17:03,260 --> 00:17:09,260
and web pack for it's gone we've

00:17:06,380 --> 00:17:12,560
replaced it with an API that does much

00:17:09,260 --> 00:17:14,690
of this out of the box by default but on

00:17:12,560 --> 00:17:17,800
top of that we have properties that give

00:17:14,690 --> 00:17:22,190
you more control than Commons chunk did

00:17:17,800 --> 00:17:23,750
and then finally you know build speed

00:17:22,190 --> 00:17:25,640
was something that we took so seriously

00:17:23,750 --> 00:17:29,390
that we wanted to be able to profile and

00:17:25,640 --> 00:17:34,300
analyze really deeply any long-running

00:17:29,390 --> 00:17:37,840
build and so we worked with Sam saucony

00:17:34,300 --> 00:17:40,550
from Google who helped us implement a

00:17:37,840 --> 00:17:41,870
special profiler that allows you to see

00:17:40,550 --> 00:17:45,830
every plug-in and how long

00:17:41,870 --> 00:17:52,730
takes right inside of the dev tools

00:17:45,830 --> 00:17:55,610
timeline viewer online yeah so now you

00:17:52,730 --> 00:17:57,580
can literally see and I mean this this

00:17:55,610 --> 00:18:00,410
information may be more valuable to us

00:17:57,580 --> 00:18:03,410
but it allows us to just say hey pop in

00:18:00,410 --> 00:18:06,770
a plugin and send us the events JSON

00:18:03,410 --> 00:18:09,230
file and it it's really useful for those

00:18:06,770 --> 00:18:14,120
who are creating plugins themselves and

00:18:09,230 --> 00:18:15,650
trying to analyze interactions and that

00:18:14,120 --> 00:18:18,920
kind of leaves us to you know the

00:18:15,650 --> 00:18:20,809
modernization in the Ryoka tech chure so

00:18:18,920 --> 00:18:22,790
you know one of the most important

00:18:20,809 --> 00:18:24,740
things that kind of held us back in web

00:18:22,790 --> 00:18:29,540
pack three is that we treat everything

00:18:24,740 --> 00:18:31,190
as a JavaScript module but we also were

00:18:29,540 --> 00:18:33,830
championed with being able to implement

00:18:31,190 --> 00:18:36,380
web assembly as a first-class citizen

00:18:33,830 --> 00:18:39,290
and so this gave us the opportunity to

00:18:36,380 --> 00:18:42,920
remove all of these everything is j/s

00:18:39,290 --> 00:18:47,000
hacks or it allowed us to actually

00:18:42,920 --> 00:18:49,220
implement wasm as a module type which

00:18:47,000 --> 00:18:51,290
allowed us to also implement JSON as a

00:18:49,220 --> 00:18:53,750
module type and it gave us JSON

00:18:51,290 --> 00:18:56,330
tree-shaking and then what we're working

00:18:53,750 --> 00:19:00,230
on right now is HTML and CSS module

00:18:56,330 --> 00:19:02,360
types so we had to take and remove all

00:19:00,230 --> 00:19:04,309
from you know our module factories is

00:19:02,360 --> 00:19:06,140
what we call them all of the code

00:19:04,309 --> 00:19:08,390
generation system that was specific to

00:19:06,140 --> 00:19:13,190
JavaScript and we've you know isolated

00:19:08,390 --> 00:19:15,679
it and so now with our web assembly is a

00:19:13,190 --> 00:19:18,980
first-class module type you have code

00:19:15,679 --> 00:19:21,770
like this this is um a newer library

00:19:18,980 --> 00:19:23,809
called Walt who has heard of Walt it's a

00:19:21,770 --> 00:19:27,500
subset of I guess you could say

00:19:23,809 --> 00:19:30,800
typescript and it allows you to write a

00:19:27,500 --> 00:19:33,650
very JavaScript like syntax as you see

00:19:30,800 --> 00:19:35,360
up at the top and then all you have to

00:19:33,650 --> 00:19:37,790
do is import it just like it's a

00:19:35,360 --> 00:19:40,070
JavaScript module into your code and you

00:19:37,790 --> 00:19:47,240
have used web assembly without doing

00:19:40,070 --> 00:19:48,440
anything else at your fingertips this is

00:19:47,240 --> 00:19:50,840
probably one of the most exciting things

00:19:48,440 --> 00:19:53,270
to me is that you want to use a frame or

00:19:50,840 --> 00:19:55,690
you want to use these things now what

00:19:53,270 --> 00:19:57,909
these these library authors can do

00:19:55,690 --> 00:20:00,789
is instantly compiled a web assembly

00:19:57,909 --> 00:20:02,559
module and if it's available in the

00:20:00,789 --> 00:20:04,929
package web pack will consume that

00:20:02,559 --> 00:20:07,240
instead of the JavaScript and so you get

00:20:04,929 --> 00:20:10,870
the 10x speed up instantly at your

00:20:07,240 --> 00:20:13,779
fingertips and so the other pieces were

00:20:10,870 --> 00:20:15,669
dropping node four so node four is no

00:20:13,779 --> 00:20:18,460
longer supported for web pack and node

00:20:15,669 --> 00:20:20,860
six is our minimum version but this

00:20:18,460 --> 00:20:24,039
allowed us to convert the rest of the

00:20:20,860 --> 00:20:27,250
codebase to using es6 features it a lot

00:20:24,039 --> 00:20:29,320
of code to be more readable easier to

00:20:27,250 --> 00:20:30,970
change using syntax that people

00:20:29,320 --> 00:20:34,299
understand and contributors want to

00:20:30,970 --> 00:20:37,179
actually leverage and now you know by

00:20:34,299 --> 00:20:38,740
using these this new code v8 actually

00:20:37,179 --> 00:20:40,870
has a great test bench for optimizing

00:20:38,740 --> 00:20:46,179
paths that aren't as hot yet that should

00:20:40,870 --> 00:20:48,250
be and I mean like as it was said

00:20:46,179 --> 00:20:49,659
there's we're just scratching the

00:20:48,250 --> 00:20:54,429
surface on all the different changes

00:20:49,659 --> 00:20:58,360
that we've made and so you know smaller

00:20:54,429 --> 00:21:00,399
builds and faster builds modernization

00:20:58,360 --> 00:21:04,299
developer experience that is where

00:21:00,399 --> 00:21:05,919
everything was routed in and so you

00:21:04,299 --> 00:21:10,299
might be like alright Sean this is great

00:21:05,919 --> 00:21:11,950
like how do i migrate so right now we

00:21:10,299 --> 00:21:13,840
have the pr pending for our migration

00:21:11,950 --> 00:21:17,230
guide and i'll talk about a little bit

00:21:13,840 --> 00:21:19,679
more and then what about four frameworks

00:21:17,230 --> 00:21:23,230
and plugins we've been working you know

00:21:19,679 --> 00:21:26,200
ever since we released our alpha behind

00:21:23,230 --> 00:21:31,779
the scenes with create react app pre-act

00:21:26,200 --> 00:21:34,690
CLI the angular CLI view CLI teams to

00:21:31,779 --> 00:21:37,600
make sure that and we we put extra focus

00:21:34,690 --> 00:21:39,159
on them to ensure that they had a steady

00:21:37,600 --> 00:21:43,029
path and there weren't blockers for them

00:21:39,159 --> 00:21:45,220
to test early but for right now you know

00:21:43,029 --> 00:21:47,200
in until we get that that migration

00:21:45,220 --> 00:21:49,570
guide merged i'd say jump on our medium

00:21:47,200 --> 00:21:53,379
publication or submit an issue and ask

00:21:49,570 --> 00:21:54,220
how you can help and like I said the

00:21:53,379 --> 00:21:55,990
angular CLI

00:21:54,220 --> 00:21:57,580
is actually going to be now supporting

00:21:55,990 --> 00:22:02,169
it in their next major release which I

00:21:57,580 --> 00:22:03,580
believe is like next week so look to

00:22:02,169 --> 00:22:06,909
have that automatically out-of-the-box

00:22:03,580 --> 00:22:09,610
for you and then you know a shameless

00:22:06,909 --> 00:22:11,740
plug to me you can always jump on my

00:22:09,610 --> 00:22:14,799
twitch livestream which I do two times a

00:22:11,740 --> 00:22:16,480
week and you can ask me questions any

00:22:14,799 --> 00:22:18,910
time we work with people just to help

00:22:16,480 --> 00:22:21,100
them migrate we also get people to

00:22:18,910 --> 00:22:25,450
contribute to the codebase and you know

00:22:21,100 --> 00:22:27,010
submit their first PR ever and even more

00:22:25,450 --> 00:22:30,100
so we wanted to make sure that this

00:22:27,010 --> 00:22:33,670
worked at scale and so Ken Shaw who's

00:22:30,100 --> 00:22:36,010
surprised appearing in these slides you

00:22:33,670 --> 00:22:39,160
know he is one of the lead engineers for

00:22:36,010 --> 00:22:42,150
the Outlook Web App team well as of I

00:22:39,160 --> 00:22:44,799
think a few days ago or was it yesterday

00:22:42,150 --> 00:22:48,490
the Outlook Web App is now using webpack

00:22:44,799 --> 00:22:50,290
for not only did the size of their

00:22:48,490 --> 00:22:52,600
builds instantly shrink without making

00:22:50,290 --> 00:22:55,090
any changes but their build times their

00:22:52,600 --> 00:22:57,640
inner dev loop jumped from a hundred

00:22:55,090 --> 00:23:00,010
seconds to 20 seconds and on a hundred

00:22:57,640 --> 00:23:02,740
fifty person team we're talking millions

00:23:00,010 --> 00:23:04,390
of dollars of Deb's time saved and so

00:23:02,740 --> 00:23:06,640
we're hoping to accomplish that not just

00:23:04,390 --> 00:23:09,549
for you know Microsoft and the outlook

00:23:06,640 --> 00:23:11,020
team but by vetting it in dogfooding it

00:23:09,549 --> 00:23:14,890
in that way we can ensure that it's a

00:23:11,020 --> 00:23:20,410
great experience for you so what's next

00:23:14,890 --> 00:23:21,880
like what's beyond web pack four so the

00:23:20,410 --> 00:23:25,330
things that we're gonna focus on are

00:23:21,880 --> 00:23:28,360
finishing the CSS is a module type HTML

00:23:25,330 --> 00:23:31,870
is a module type URL and file as a

00:23:28,360 --> 00:23:33,640
module type but as you can see what this

00:23:31,870 --> 00:23:35,740
means is you don't have to use extract

00:23:33,640 --> 00:23:38,290
text plug-in anymore you might not even

00:23:35,740 --> 00:23:43,059
need he I know you might not even need

00:23:38,290 --> 00:23:44,380
to have a CSS URL file loader we might

00:23:43,059 --> 00:23:48,790
just have this supported out-of-the-box

00:23:44,380 --> 00:23:51,340
as a module you'll be able to say hello

00:23:48,790 --> 00:23:53,440
to CSS code splitting something that

00:23:51,340 --> 00:23:55,950
doesn't exist today and actually you

00:23:53,440 --> 00:23:59,919
know cause this kind of a pain point for

00:23:55,950 --> 00:24:03,210
you know browser and load times but you

00:23:59,919 --> 00:24:07,210
could also have HTML as an entry point

00:24:03,210 --> 00:24:09,580
and then the other big feature that I'm

00:24:07,210 --> 00:24:13,120
really excited about which is called web

00:24:09,580 --> 00:24:14,860
packing lazon part two so you know when

00:24:13,120 --> 00:24:16,960
we introduce what web assembly is a

00:24:14,860 --> 00:24:18,760
first-class citizen we kind of can you

00:24:16,960 --> 00:24:22,660
know the module type is called web

00:24:18,760 --> 00:24:23,590
assembly / experimental and so the first

00:24:22,660 --> 00:24:26,289
thing is to stay

00:24:23,590 --> 00:24:29,159
lies it but then we're going to go ahead

00:24:26,289 --> 00:24:32,140
and add a bunch of the features that we

00:24:29,159 --> 00:24:34,179
that we already have on JavaScript and

00:24:32,140 --> 00:24:36,539
apply it to web assembly and so this

00:24:34,179 --> 00:24:40,150
means tree-shaking you can do that

00:24:36,539 --> 00:24:44,679
dead code elimination scope hosting wise

00:24:40,150 --> 00:24:47,440
modules and so this is super exciting

00:24:44,679 --> 00:24:48,820
because now web assembly goes from being

00:24:47,440 --> 00:24:51,549
something that you can use once or twice

00:24:48,820 --> 00:24:53,380
to using it just like any other

00:24:51,549 --> 00:24:56,580
JavaScript module and not taking a

00:24:53,380 --> 00:24:58,750
perfect or a size hit or a runtime hit

00:24:56,580 --> 00:25:02,380
and then maybe something that's really

00:24:58,750 --> 00:25:04,360
special for me is it's presets so like I

00:25:02,380 --> 00:25:06,909
said you know bring your own zero config

00:25:04,360 --> 00:25:09,539
j/s these are just examples that I

00:25:06,909 --> 00:25:12,279
played around with in a prototype but

00:25:09,539 --> 00:25:15,600
what if it would be just this easy to

00:25:12,279 --> 00:25:18,279
say at web pack can use Babel if exists

00:25:15,600 --> 00:25:20,350
you can install that package and it just

00:25:18,279 --> 00:25:24,820
reads your babel RC and throws in babel

00:25:20,350 --> 00:25:26,710
loader what if as a package author you

00:25:24,820 --> 00:25:29,409
have these composable parts that you can

00:25:26,710 --> 00:25:31,450
share and leverage this looks very

00:25:29,409 --> 00:25:33,880
similar to babel if you understand their

00:25:31,450 --> 00:25:35,350
package structure and we're you know at

00:25:33,880 --> 00:25:38,500
least i took the inspiration in this

00:25:35,350 --> 00:25:40,480
prototype to kind of leverage it but can

00:25:38,500 --> 00:25:41,860
use typescript really could just be can

00:25:40,480 --> 00:25:45,090
it resolve type scripting can it load it

00:25:41,860 --> 00:25:48,669
using a loader but the point is that

00:25:45,090 --> 00:25:49,960
this is how you can extend 0 config so

00:25:48,669 --> 00:25:51,880
with a couple packages that you would

00:25:49,960 --> 00:26:01,029
add you still don't need a web pack

00:25:51,880 --> 00:26:04,210
config yep thank you and so what's

00:26:01,029 --> 00:26:05,980
beyond what's beyond for point X so

00:26:04,210 --> 00:26:08,110
those are they're kind of like the

00:26:05,980 --> 00:26:09,520
things that we can do right now without

00:26:08,110 --> 00:26:12,549
causing a breaking change but what

00:26:09,520 --> 00:26:14,770
what's beyond that so one of the most

00:26:12,549 --> 00:26:18,039
important things that is lacking for web

00:26:14,770 --> 00:26:22,059
pack is that we don't have a fully

00:26:18,039 --> 00:26:23,049
persistent cache and so that's that's

00:26:22,059 --> 00:26:24,880
the first one that we're gonna be

00:26:23,049 --> 00:26:27,039
working on and so we actually kind of

00:26:24,880 --> 00:26:28,570
worked really closely with the author of

00:26:27,039 --> 00:26:30,220
hard source web pack plug-in new who has

00:26:28,570 --> 00:26:33,010
probably the most experience with our

00:26:30,220 --> 00:26:35,380
code base and you know disk caching and

00:26:33,010 --> 00:26:36,970
so he wrote up a specification and you

00:26:35,380 --> 00:26:38,470
can take a look at it on github

00:26:36,970 --> 00:26:41,890
think it's under the the webpack five

00:26:38,470 --> 00:26:44,380
tag but also things like multi-threading

00:26:41,890 --> 00:26:46,030
our builds actually when we saw the

00:26:44,380 --> 00:26:48,220
presentation or when I saw the

00:26:46,030 --> 00:26:49,720
presentation yesterday about having

00:26:48,220 --> 00:26:51,970
workers be native that was really

00:26:49,720 --> 00:26:53,350
exciting especially to us who wants to

00:26:51,970 --> 00:26:56,890
be able to have something right out of

00:26:53,350 --> 00:26:58,600
the box from node but also have all of

00:26:56,890 --> 00:27:03,250
our experimental module types become

00:26:58,600 --> 00:27:05,320
stable and then what if we could bring

00:27:03,250 --> 00:27:07,179
your own module type what if you could

00:27:05,320 --> 00:27:09,130
write a module type that makes you not

00:27:07,179 --> 00:27:10,480
even need a type script loader what if

00:27:09,130 --> 00:27:14,049
you could take those types and treat it

00:27:10,480 --> 00:27:16,630
as metadata and allow it to do static

00:27:14,049 --> 00:27:18,820
you know program flow analysis and make

00:27:16,630 --> 00:27:21,130
your code even smaller I see a future

00:27:18,820 --> 00:27:23,770
where it's you want to use typescript

00:27:21,130 --> 00:27:27,370
with web pack because it creates smaller

00:27:23,770 --> 00:27:29,350
bundles and so I really have a you know

00:27:27,370 --> 00:27:33,730
see a promise for bring your own module

00:27:29,350 --> 00:27:35,320
type I mean I mean to be honest these

00:27:33,730 --> 00:27:39,700
things are just a reflection of what you

00:27:35,320 --> 00:27:41,049
asked for and so did you know that every

00:27:39,700 --> 00:27:43,179
single one of you if you have a github

00:27:41,049 --> 00:27:46,270
account can go to web packages or

00:27:43,179 --> 00:27:48,580
forward slash vote and everyday even not

00:27:46,270 --> 00:27:51,700
as a contributor or sponsor you get one

00:27:48,580 --> 00:27:54,789
piece of influence every day that you

00:27:51,700 --> 00:27:57,490
can vote on a specific feature so I mean

00:27:54,789 --> 00:28:00,159
literally we put the power in you all

00:27:57,490 --> 00:28:01,659
because that's who we represent you saw

00:28:00,159 --> 00:28:03,429
our sponsors and backers we're a

00:28:01,659 --> 00:28:05,710
grassroots project that represents

00:28:03,429 --> 00:28:07,630
exactly what it means to have web

00:28:05,710 --> 00:28:12,010
performance and developer experience

00:28:07,630 --> 00:28:15,100
without making a sacrifice to each and

00:28:12,010 --> 00:28:17,280
you know finally you know we shipped web

00:28:15,100 --> 00:28:19,419
pack for what do we take away from it

00:28:17,280 --> 00:28:21,309
one of the things that we announced when

00:28:19,419 --> 00:28:25,090
we released the release candidate was

00:28:21,309 --> 00:28:28,150
that you know we we said here's 30 days

00:28:25,090 --> 00:28:30,039
log plugin and loader authors you get 30

00:28:28,150 --> 00:28:33,039
days to upgrade we're not going to break

00:28:30,039 --> 00:28:36,940
any changes between our RCE and final

00:28:33,039 --> 00:28:38,520
and that was great for our team who owns

00:28:36,940 --> 00:28:41,770
a lot of the core plugins and loaders

00:28:38,520 --> 00:28:45,340
but it was a lot harder for people who

00:28:41,770 --> 00:28:47,049
you know third-party plugins and so I

00:28:45,340 --> 00:28:50,049
think what we're gonna do is focus more

00:28:47,049 --> 00:28:50,559
on providing a migration guide for

00:28:50,049 --> 00:28:53,470
loaders and

00:28:50,559 --> 00:28:59,080
plugins and even just general updating

00:28:53,470 --> 00:29:01,240
versus having a time window and I mean

00:28:59,080 --> 00:29:03,789
overall like you know like I just said I

00:29:01,240 --> 00:29:07,120
rambled about it a little early but we

00:29:03,789 --> 00:29:11,470
are like what we do is exactly what you

00:29:07,120 --> 00:29:13,749
asked us to and so we see this year of

00:29:11,470 --> 00:29:16,720
JavaScript as being you know no more

00:29:13,749 --> 00:29:18,820
talk of this fatigue but instead it's

00:29:16,720 --> 00:29:20,529
having this mindset of embracing the

00:29:18,820 --> 00:29:22,029
changes of our technology that are so

00:29:20,529 --> 00:29:23,950
beautiful in JavaScript

00:29:22,029 --> 00:29:25,419
some joke that we see a new framework

00:29:23,950 --> 00:29:28,149
every two weeks but that's the most

00:29:25,419 --> 00:29:30,669
beautiful part of our language in what

00:29:28,149 --> 00:29:34,960
other language do you get to use syntax

00:29:30,669 --> 00:29:38,860
that doesn't exist yet without a VM for

00:29:34,960 --> 00:29:41,649
you Java people does that doesn't count

00:29:38,860 --> 00:29:44,769
there is no other language it's it's a

00:29:41,649 --> 00:29:46,809
JavaScript Renaissance and so we embrace

00:29:44,769 --> 00:29:48,909
this we call it even a growth mindset at

00:29:46,809 --> 00:29:52,840
Microsoft and so we ask you to do the

00:29:48,909 --> 00:29:54,669
same and and help web pack just not be

00:29:52,840 --> 00:29:55,210
yet another build tool so thank you guys

00:29:54,669 --> 00:30:01,430
very much

00:29:55,210 --> 00:30:07,420
oh yeah and try web back today

00:30:01,430 --> 00:30:07,420

YouTube URL: https://www.youtube.com/watch?v=jUTE7lmrS70


