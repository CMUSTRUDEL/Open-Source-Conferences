Title: Andy Mockler: A whirlwind introduction to TypeScript (Lightning Talk) | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	
Captions: 
	00:00:01,730 --> 00:00:09,300
hi I'm Andy and I work at Shopify we're

00:00:06,509 --> 00:00:10,800
an e-commerce platform and today I'm

00:00:09,300 --> 00:00:14,280
going to be giving you a whirlwind

00:00:10,800 --> 00:00:16,529
introduction to typescript so first of

00:00:14,280 --> 00:00:18,510
Reif disclaimer most of the stuff I'm

00:00:16,529 --> 00:00:21,090
going to talk about today is typescript

00:00:18,510 --> 00:00:23,760
specific but typescript is not the only

00:00:21,090 --> 00:00:25,050
way to bring types into your javascript

00:00:23,760 --> 00:00:27,390
there's a lot of other really good

00:00:25,050 --> 00:00:30,390
options I actually first started with

00:00:27,390 --> 00:00:32,130
flow and then we switched to typescript

00:00:30,390 --> 00:00:34,320
at work and so that's what I do most of

00:00:32,130 --> 00:00:37,770
my time but reason or flow or typescript

00:00:34,320 --> 00:00:39,540
they're all great okay so first I want

00:00:37,770 --> 00:00:41,309
to give you a little bit of why to use

00:00:39,540 --> 00:00:42,690
types this is probably the most

00:00:41,309 --> 00:00:45,210
important part and then we'll dive into

00:00:42,690 --> 00:00:48,420
some typescript syntax to hopefully make

00:00:45,210 --> 00:00:50,730
it a little less scary to get started so

00:00:48,420 --> 00:00:52,469
I really want to talk about two main

00:00:50,730 --> 00:00:54,899
reasons that you would want to use types

00:00:52,469 --> 00:00:56,610
in your project the first one is that if

00:00:54,899 --> 00:00:59,129
you're working on a large application as

00:00:56,610 --> 00:01:01,230
that application grows it's impossible

00:00:59,129 --> 00:01:02,820
to keep in your own mind everything

00:01:01,230 --> 00:01:05,070
that's happening so if you're working on

00:01:02,820 --> 00:01:08,130
a small library like maybe the overhead

00:01:05,070 --> 00:01:08,909
of types is a little bit overkill but if

00:01:08,130 --> 00:01:11,220
you're working on a really big

00:01:08,909 --> 00:01:13,229
application eventually it's gonna get to

00:01:11,220 --> 00:01:16,140
the point where you can't keep track of

00:01:13,229 --> 00:01:17,970
all the changes that are happening to

00:01:16,140 --> 00:01:20,009
functions or other interfaces in your

00:01:17,970 --> 00:01:22,320
application but the compiler can keep

00:01:20,009 --> 00:01:25,560
track of that so it's like having this

00:01:22,320 --> 00:01:27,210
like super powered buddy on your team

00:01:25,560 --> 00:01:29,310
who's gonna keep track of everything

00:01:27,210 --> 00:01:31,979
that's happening the second thing is

00:01:29,310 --> 00:01:33,900
that it's really hard to keep

00:01:31,979 --> 00:01:36,240
documentation up to date whether it be

00:01:33,900 --> 00:01:39,090
comments in your code or whether it be a

00:01:36,240 --> 00:01:40,920
readme or whatever else the nice thing

00:01:39,090 --> 00:01:42,180
about types is that they're kind they

00:01:40,920 --> 00:01:44,490
make your code a little more self

00:01:42,180 --> 00:01:46,979
documenting and since the compiler is

00:01:44,490 --> 00:01:48,750
going to be enforcing those types it's a

00:01:46,979 --> 00:01:50,790
lot harder to get them out of date it's

00:01:48,750 --> 00:01:53,100
definitely possible and it's definitely

00:01:50,790 --> 00:01:54,899
easy to do things that still make it

00:01:53,100 --> 00:01:57,030
hard to understand but it's a little bit

00:01:54,899 --> 00:02:01,680
of a help to make your code easier to

00:01:57,030 --> 00:02:03,000
jump into all right so basic types we're

00:02:01,680 --> 00:02:05,310
gonna start going pretty fast through

00:02:03,000 --> 00:02:08,129
typescript syntax here just to kind of

00:02:05,310 --> 00:02:10,830
do an overview so here is like sort of a

00:02:08,129 --> 00:02:12,840
hello world of some very primitive types

00:02:10,830 --> 00:02:13,950
and typescript you can see that it looks

00:02:12,840 --> 00:02:15,989
a lot like normal Travis

00:02:13,950 --> 00:02:17,730
script but you have a colon and then the

00:02:15,989 --> 00:02:20,790
name of a type which is how you're gonna

00:02:17,730 --> 00:02:22,440
annotate your variables now that

00:02:20,790 --> 00:02:24,390
actually isn't necessary a lot of the

00:02:22,440 --> 00:02:26,700
time I would say that I more often than

00:02:24,390 --> 00:02:29,580
not don't have to add explicit

00:02:26,700 --> 00:02:31,380
annotations to my code because

00:02:29,580 --> 00:02:35,250
typescript is very good at inferring

00:02:31,380 --> 00:02:36,870
what I what I mean you can also see here

00:02:35,250 --> 00:02:38,910
this is where the benefit starts coming

00:02:36,870 --> 00:02:40,860
in so this screenshot is from Visual

00:02:38,910 --> 00:02:42,420
Studio code but it's really just a

00:02:40,860 --> 00:02:43,830
reflection of the error that the

00:02:42,420 --> 00:02:45,620
compiler is outputting so you're not

00:02:43,830 --> 00:02:47,700
tied to using vs code with typescript

00:02:45,620 --> 00:02:50,220
but you can see it has a red squiggly

00:02:47,700 --> 00:02:52,110
under this index of call because the

00:02:50,220 --> 00:02:55,049
boolean doesn't have a method called

00:02:52,110 --> 00:02:57,150
index of all right so arrays this is a

00:02:55,049 --> 00:02:58,799
little more complicated but looks much

00:02:57,150 --> 00:03:00,599
the same so you have an annotation and

00:02:58,799 --> 00:03:02,040
you just put square brackets after 8 to

00:03:00,599 --> 00:03:05,400
say that it's an array so you can see

00:03:02,040 --> 00:03:06,840
here I have this array of foods and if I

00:03:05,400 --> 00:03:08,849
initialize it to these strings it's

00:03:06,840 --> 00:03:10,980
happy if I push in a new string it's

00:03:08,849 --> 00:03:12,870
still happy but if I were to try to

00:03:10,980 --> 00:03:14,819
initialize it to an array of numbers or

00:03:12,870 --> 00:03:16,620
if I were to push in a boolean it's

00:03:14,819 --> 00:03:17,329
going to complain at me and I would have

00:03:16,620 --> 00:03:19,380
to fix that

00:03:17,329 --> 00:03:21,329
functions so this is where things get

00:03:19,380 --> 00:03:23,040
really exciting so your functions you're

00:03:21,329 --> 00:03:24,720
gonna be importing them all over the

00:03:23,040 --> 00:03:26,250
place in your application before those

00:03:24,720 --> 00:03:27,780
were like pretty contrived examples

00:03:26,250 --> 00:03:29,670
because like you can look at your

00:03:27,780 --> 00:03:31,560
variables three or four lines above or

00:03:29,670 --> 00:03:32,850
you know even in the same file but a

00:03:31,560 --> 00:03:34,109
function this is where you're gonna be

00:03:32,850 --> 00:03:36,930
able to catch things across your whole

00:03:34,109 --> 00:03:39,299
application as you import things so you

00:03:36,930 --> 00:03:41,549
can see here that I typed my parameter

00:03:39,299 --> 00:03:43,560
with that same annotation there's

00:03:41,549 --> 00:03:45,600
another annotation after the arguments

00:03:43,560 --> 00:03:47,130
list which is the return type and then

00:03:45,600 --> 00:03:49,230
we just write normal JavaScript on the

00:03:47,130 --> 00:03:50,819
inside so if I pass a trace car it's

00:03:49,230 --> 00:03:53,870
going to be happy but if I pass it a

00:03:50,819 --> 00:03:56,340
boolean then it's going to complain

00:03:53,870 --> 00:03:58,170
again typescript is pretty smart at

00:03:56,340 --> 00:03:59,819
inferring what my variables are going to

00:03:58,170 --> 00:04:02,130
be and what my return types are so we

00:03:59,819 --> 00:04:05,430
can actually omit that return type if

00:04:02,130 --> 00:04:09,569
you don't want to do so much typing all

00:04:05,430 --> 00:04:11,130
right unions this is again a little bit

00:04:09,569 --> 00:04:14,069
more of an advanced feature so you can

00:04:11,130 --> 00:04:15,599
think about a union like an or this is

00:04:14,069 --> 00:04:17,549
something that I use all the time so

00:04:15,599 --> 00:04:21,780
here like I want to say that a vegetable

00:04:17,549 --> 00:04:23,669
can be a broccoli or a carrot I say that

00:04:21,780 --> 00:04:26,550
fruit can be any of these fruits and

00:04:23,669 --> 00:04:27,750
then I can also use unions with types so

00:04:26,550 --> 00:04:29,310
I can say that an ingredient

00:04:27,750 --> 00:04:31,800
for this restaurant is going to be

00:04:29,310 --> 00:04:34,440
either a vegetable or a fruit and it can

00:04:31,800 --> 00:04:37,260
be any of those values so then if I'm

00:04:34,440 --> 00:04:39,540
making a recipe for juice and I give it

00:04:37,260 --> 00:04:41,640
broccoli and watermelon it's happy but

00:04:39,540 --> 00:04:43,740
if I try to make this sludge drink out

00:04:41,640 --> 00:04:45,720
of bread and bacon it's going to be very

00:04:43,740 --> 00:04:47,450
unhappy because that's neither a

00:04:45,720 --> 00:04:49,890
vegetable nor a fruit

00:04:47,450 --> 00:04:51,000
all right interfaces this is going to be

00:04:49,890 --> 00:04:53,010
our last type and then we'll go through

00:04:51,000 --> 00:04:55,320
a short little example

00:04:53,010 --> 00:04:57,570
so interfaces this is how you type

00:04:55,320 --> 00:05:00,000
objects so this looks a lot like playing

00:04:57,570 --> 00:05:02,100
object notation you have a colon and

00:05:00,000 --> 00:05:05,460
then instead of the value you put your

00:05:02,100 --> 00:05:07,530
type name you also can use all of these

00:05:05,460 --> 00:05:09,750
other features inside of your interfaces

00:05:07,530 --> 00:05:12,000
so here we have a union between a bunch

00:05:09,750 --> 00:05:13,470
of animals you have your favorite animal

00:05:12,000 --> 00:05:15,540
you can make it optional by allowing

00:05:13,470 --> 00:05:16,980
nulls and then type script will help you

00:05:15,540 --> 00:05:19,650
check null before you try to access

00:05:16,980 --> 00:05:20,220
those values or anything like that all

00:05:19,650 --> 00:05:22,850
right

00:05:20,220 --> 00:05:25,620
so most of my day I spend writing react

00:05:22,850 --> 00:05:27,750
and that is like where typescript really

00:05:25,620 --> 00:05:29,340
shines for me I like it pretty well when

00:05:27,750 --> 00:05:31,410
I'm writing playing typescript but for

00:05:29,340 --> 00:05:34,020
react components I think it's the bee's

00:05:31,410 --> 00:05:36,810
knees so I'm here we have a really

00:05:34,020 --> 00:05:38,880
simple example if you used the prop

00:05:36,810 --> 00:05:41,430
types package this probably looks very

00:05:38,880 --> 00:05:44,160
familiar to you because in prop types

00:05:41,430 --> 00:05:46,350
you also have to like declare your props

00:05:44,160 --> 00:05:48,030
the nice thing about this is you get a

00:05:46,350 --> 00:05:49,800
little more help from the compiler and

00:05:48,030 --> 00:05:52,290
it happens at compile time instead of at

00:05:49,800 --> 00:05:53,669
runtime the other nice thing is that you

00:05:52,290 --> 00:05:56,130
don't have to include the prop types

00:05:53,669 --> 00:05:59,130
package all of this gets stripped out at

00:05:56,130 --> 00:06:03,210
compile time and then you ship a smaller

00:05:59,130 --> 00:06:04,860
bundle a little bit so just to walk

00:06:03,210 --> 00:06:06,900
through this we have our props we're

00:06:04,860 --> 00:06:10,229
gonna have one prop called size that

00:06:06,900 --> 00:06:12,600
accepts either small medium or large and

00:06:10,229 --> 00:06:14,910
then we just pass it into our component

00:06:12,600 --> 00:06:17,070
as usual and you can see here that

00:06:14,910 --> 00:06:19,800
inside my component I have very little

00:06:17,070 --> 00:06:22,010
typescript specific syntax it really

00:06:19,800 --> 00:06:24,120
looks pretty much like normal JavaScript

00:06:22,010 --> 00:06:26,310
and then this is what it looks like to

00:06:24,120 --> 00:06:27,630
use that so I import my icon component

00:06:26,310 --> 00:06:29,250
and if I don't give it any props

00:06:27,630 --> 00:06:30,870
typescript is going to complain to me

00:06:29,250 --> 00:06:35,490
because I told it that I was expecting

00:06:30,870 --> 00:06:37,260
some props here if I give it size it can

00:06:35,490 --> 00:06:38,640
suggest to me what those props should be

00:06:37,260 --> 00:06:40,800
so this is really nice when you're like

00:06:38,640 --> 00:06:41,400
using a design system inside your

00:06:40,800 --> 00:06:42,990
company

00:06:41,400 --> 00:06:45,240
you can know exactly what the values are

00:06:42,990 --> 00:06:47,070
supposed to be again this is the vs code

00:06:45,240 --> 00:06:48,630
interface but when you run the

00:06:47,070 --> 00:06:50,669
typescript compiler it gives you this

00:06:48,630 --> 00:06:53,760
exact same suggestion where it'll list

00:06:50,669 --> 00:06:55,410
what it's expecting and if I give it

00:06:53,760 --> 00:06:57,419
something that it's expecting it will be

00:06:55,410 --> 00:06:59,880
happy you know compile my code and I can

00:06:57,419 --> 00:07:02,370
run it so I hope that has made

00:06:59,880 --> 00:07:04,470
typescript a little less mysterious you

00:07:02,370 --> 00:07:05,050
can find me at AS Moakler thank you very

00:07:04,470 --> 00:07:09,899
much

00:07:05,050 --> 00:07:09,899

YouTube URL: https://www.youtube.com/watch?v=rJTzA6ohHQA


