Title: Armagan Amcalar: Code, Play & Rock 'n' Roll: A WebAudio Experiment | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/armagan-amcalar/

The speaker hits the “stage” with a guitar, playing memorable rock tunes using a web browser as an amplifier. This talk is about pushing the limits of what a web browser can do, and goes over pedalboard.js, an open source JavaScript framework for building real-time guitar effects in the browser.

Demonstrating both code and music, talking a little bit about math and signal processing, the speaker paints a picture of the current state of the web and how capable it is as a platform. He then goes on to present a way to make a collaborative music session using pedalboard.js over WebRTC, so people can play along with friends in real-time even if they are miles away.
Captions: 
	00:00:01,829 --> 00:00:08,660
welcome everybody

00:00:04,110 --> 00:00:08,660
maybe maybe we could start with a song

00:00:09,139 --> 00:00:17,609
do you like that okay let's start with

00:00:14,009 --> 00:00:20,570
an easy one something that hopefully a

00:00:17,609 --> 00:00:20,570
lot of people know

00:00:29,470 --> 00:00:52,460
[Music]

00:00:49,300 --> 00:00:52,460
[Applause]

00:00:52,520 --> 00:01:06,920
[Music]

00:01:10,290 --> 00:01:37,329
[Music]

00:01:31,899 --> 00:01:37,329
okay that didn't go as as well as plan

00:01:42,990 --> 00:02:27,969
[Music]

00:02:32,330 --> 00:02:49,940
[Music]

00:02:44,960 --> 00:02:53,580
okay this one was better thank you cool

00:02:49,940 --> 00:02:55,290
let's get back to the presentation so

00:02:53,580 --> 00:03:00,030
this talk is called Coldplay and

00:02:55,290 --> 00:03:02,430
rock'n'roll I hope to code some and play

00:03:00,030 --> 00:03:04,820
some guitar and hopefully we'll enjoy

00:03:02,430 --> 00:03:04,820
the show

00:03:05,930 --> 00:03:12,540
all right great so before we start a lot

00:03:10,020 --> 00:03:14,250
of you are you tourists out there so you

00:03:12,540 --> 00:03:18,660
are familiar with the scene but this is

00:03:14,250 --> 00:03:21,600
what a real pedal board looks like these

00:03:18,660 --> 00:03:23,730
are all tiny gadgets that shaped the

00:03:21,600 --> 00:03:25,770
sounds of famous guitarists legendary

00:03:23,730 --> 00:03:29,190
guitarists that that we all know out

00:03:25,770 --> 00:03:32,940
there and this is how it can work for

00:03:29,190 --> 00:03:35,610
example in software in one of the one of

00:03:32,940 --> 00:03:39,260
the tools or products that I've done

00:03:35,610 --> 00:03:42,510
called pedals IO this is basically a

00:03:39,260 --> 00:03:46,020
faithful representation of real-life

00:03:42,510 --> 00:03:48,480
guitar pedals you sold two of them in

00:03:46,020 --> 00:03:52,170
the short demo and we'll be adding more

00:03:48,480 --> 00:03:57,270
an overdrive a chorus delay reverb and a

00:03:52,170 --> 00:03:59,690
lot more in in the coming minutes so I'm

00:03:57,270 --> 00:04:02,580
Arman Arman I'm jyler I come from Berlin

00:03:59,690 --> 00:04:04,380
I work for a company called you know

00:04:02,580 --> 00:04:06,510
Gambia and we're building electric

00:04:04,380 --> 00:04:10,560
scooters so like West pas but with

00:04:06,510 --> 00:04:12,420
electric batteries I'm also the founder

00:04:10,560 --> 00:04:15,570
of Longy which is a software

00:04:12,420 --> 00:04:18,420
craftsmanship school for women and I

00:04:15,570 --> 00:04:21,060
like to play a lot with code I have a

00:04:18,420 --> 00:04:23,580
lot of open source projects on github

00:04:21,060 --> 00:04:26,280
that range from brain signal processing

00:04:23,580 --> 00:04:29,400
to audio processing to front and

00:04:26,280 --> 00:04:32,370
libraries and platform-as-a-service

00:04:29,400 --> 00:04:35,760
and micro services and a lot of other

00:04:32,370 --> 00:04:41,430
stuff so what is Web Audio anybody

00:04:35,760 --> 00:04:43,349
familiar with Web Audio only a few ok

00:04:41,430 --> 00:04:45,870
let this be a call to the guitarist out

00:04:43,349 --> 00:04:48,840
there I hope you also write some code

00:04:45,870 --> 00:04:51,780
this is extremely fun to play with this

00:04:48,840 --> 00:04:55,020
is an amazing playground for especially

00:04:51,780 --> 00:04:58,319
as the cold air musicians Web Audio API

00:04:55,020 --> 00:05:00,810
is basically built into all of the major

00:04:58,319 --> 00:05:03,300
browsers and it gives you everything you

00:05:00,810 --> 00:05:07,500
need to build high quality audio

00:05:03,300 --> 00:05:11,069
applications that are like this pedal

00:05:07,500 --> 00:05:15,930
boards or full-fledged digital audio

00:05:11,069 --> 00:05:18,210
workstations or game audio in a 3d room

00:05:15,930 --> 00:05:22,409
where you can adjust the position of the

00:05:18,210 --> 00:05:24,780
sound and you can have specific start

00:05:22,409 --> 00:05:26,909
times and end times for specific samples

00:05:24,780 --> 00:05:29,610
so that it matches with your animations

00:05:26,909 --> 00:05:31,110
your characters and you can do some

00:05:29,610 --> 00:05:34,319
production applications you can do video

00:05:31,110 --> 00:05:38,280
production applications like DJ mixing

00:05:34,319 --> 00:05:39,960
tools and basically anything you can do

00:05:38,280 --> 00:05:42,870
with audio anything you are used to

00:05:39,960 --> 00:05:48,870
using on your computers or on your

00:05:42,870 --> 00:05:52,409
phones or iPads or tablets they they are

00:05:48,870 --> 00:05:54,569
available through Web Audio API and you

00:05:52,409 --> 00:05:57,750
can build any dream application that you

00:05:54,569 --> 00:05:59,880
have in mind that includes audio as well

00:05:57,750 --> 00:06:02,039
as you know art installation as well

00:05:59,880 --> 00:06:04,529
because you can combine it with the

00:06:02,039 --> 00:06:06,389
input that comes from a camera and you

00:06:04,529 --> 00:06:08,310
can basically turn it into sound you can

00:06:06,389 --> 00:06:12,270
turn the the pixels that the camera

00:06:08,310 --> 00:06:18,120
captures and portrayed as sound samples

00:06:12,270 --> 00:06:21,120
or any any kind of sound effects if you

00:06:18,120 --> 00:06:23,400
have ever imagined anything about audio

00:06:21,120 --> 00:06:26,909
that's available through Web Audio API

00:06:23,400 --> 00:06:30,860
actually this was what I had imagined to

00:06:26,909 --> 00:06:33,539
be able to play guitar effects free

00:06:30,860 --> 00:06:35,490
everywhere without the need of

00:06:33,539 --> 00:06:38,699
installation of a new software and

00:06:35,490 --> 00:06:42,810
basically I made it possible with Web

00:06:38,699 --> 00:06:47,909
Audio API so a little bit about Web

00:06:42,810 --> 00:06:52,320
Audio API and its basic structure Web

00:06:47,909 --> 00:06:54,440
Audio API is a network of nodes all you

00:06:52,320 --> 00:06:56,630
do is you create some nodes

00:06:54,440 --> 00:06:59,570
and they are either a source so that

00:06:56,630 --> 00:07:02,480
they represent a signal like an mp3 file

00:06:59,570 --> 00:07:06,220
for example or an oscillator like a

00:07:02,480 --> 00:07:10,040
keyboard which is a source of sound or

00:07:06,220 --> 00:07:13,070
they are sound processing units sound

00:07:10,040 --> 00:07:17,030
processing notes so these can be as you

00:07:13,070 --> 00:07:21,350
see here like a delay effect that is

00:07:17,030 --> 00:07:26,030
like an echo that repeats the sound or a

00:07:21,350 --> 00:07:28,640
gain effect that improves or amplifies

00:07:26,030 --> 00:07:31,880
the sound or some filters some very

00:07:28,640 --> 00:07:34,340
wonky filters that I will demo in a

00:07:31,880 --> 00:07:36,050
couple of minutes that you can do and of

00:07:34,340 --> 00:07:38,630
course at the end there is a target a

00:07:36,050 --> 00:07:42,200
destination an output which is your

00:07:38,630 --> 00:07:42,560
headphones or your speakers whatever you

00:07:42,200 --> 00:07:45,530
like

00:07:42,560 --> 00:07:47,870
or it could be a recording target so

00:07:45,530 --> 00:07:51,800
that you could save whatever you created

00:07:47,870 --> 00:07:53,570
with Web Audio to to an mp3 file much

00:07:51,800 --> 00:07:57,290
like rendering in a in a digital audio

00:07:53,570 --> 00:07:59,900
workstation the idea is very simple you

00:07:57,290 --> 00:08:02,300
create these nodes and you set some

00:07:59,900 --> 00:08:04,040
parameters which is very very simple

00:08:02,300 --> 00:08:06,770
extremely simple you don't have to know

00:08:04,040 --> 00:08:08,780
a lot of math actually you don't even

00:08:06,770 --> 00:08:12,470
have to know math for anything except

00:08:08,780 --> 00:08:17,120
one special node that is kind of there

00:08:12,470 --> 00:08:18,890
to introduce gain distortion effects but

00:08:17,120 --> 00:08:21,490
then you connect them you connect them

00:08:18,890 --> 00:08:25,640
together starting from the source from

00:08:21,490 --> 00:08:27,770
from the guitar or of course that's a

00:08:25,640 --> 00:08:30,380
guitar for me but whatever source of

00:08:27,770 --> 00:08:34,580
input you want maybe it's a mic or

00:08:30,380 --> 00:08:37,550
another audio file and you connect them

00:08:34,580 --> 00:08:40,729
in whatever way you like and then to the

00:08:37,550 --> 00:08:43,030
output and everything happens in real

00:08:40,729 --> 00:08:43,030
time

00:08:49,050 --> 00:08:54,940
okay

00:08:50,230 --> 00:08:56,230
so web audio hosts a lot of components

00:08:54,940 --> 00:08:58,480
that you can generate that you can

00:08:56,230 --> 00:09:02,530
create it starts with an audio context

00:08:58,480 --> 00:09:06,000
everything has to happen within an audio

00:09:02,530 --> 00:09:08,470
context anybody familiar with canvas API

00:09:06,000 --> 00:09:11,080
to draw some pixels it also has a

00:09:08,470 --> 00:09:12,790
context so in order to draw something to

00:09:11,080 --> 00:09:14,950
the screen you have to get a get a hold

00:09:12,790 --> 00:09:16,390
of a context and audio context is

00:09:14,950 --> 00:09:18,850
basically the same in order to do any

00:09:16,390 --> 00:09:21,010
audio application you need to have an

00:09:18,850 --> 00:09:23,740
audio context now you can have more than

00:09:21,010 --> 00:09:26,770
one and you can connect anything to more

00:09:23,740 --> 00:09:32,170
than one context to have multiple

00:09:26,770 --> 00:09:34,240
plugins or other applications but in the

00:09:32,170 --> 00:09:36,970
end you need at least one audio context

00:09:34,240 --> 00:09:39,190
then there's the offline of the context

00:09:36,970 --> 00:09:42,970
for you to be able to record something

00:09:39,190 --> 00:09:46,440
again and a lot of processing nodes

00:09:42,970 --> 00:09:49,600
processing units like again gain delay

00:09:46,440 --> 00:09:52,210
pan or Cromwell where panner is used to

00:09:49,600 --> 00:09:56,170
direct the sound to either left or right

00:09:52,210 --> 00:09:59,860
channels convolve ER is used to

00:09:56,170 --> 00:10:03,910
introduce effects like the echo effect

00:09:59,860 --> 00:10:07,630
here the whole effect like a cave you

00:10:03,910 --> 00:10:11,020
know your your sound kind of echoes and

00:10:07,630 --> 00:10:13,870
drifts away in a cave those effects are

00:10:11,020 --> 00:10:17,140
made by finite impulse response filters

00:10:13,870 --> 00:10:20,290
and a Cromwell ray node is basically

00:10:17,140 --> 00:10:22,480
used there and you can have an analyzer

00:10:20,290 --> 00:10:27,700
node so you can actually grab the signal

00:10:22,480 --> 00:10:29,380
and look at its properties so look at

00:10:27,700 --> 00:10:32,710
the frequency content look at the power

00:10:29,380 --> 00:10:35,290
and you can do various effects based on

00:10:32,710 --> 00:10:37,600
that you can split them into multiple

00:10:35,290 --> 00:10:41,470
channels multiple tracks so that the

00:10:37,600 --> 00:10:47,070
graph can get wider and wider as you

00:10:41,470 --> 00:10:51,910
want it has a lot of a lot of nodes and

00:10:47,070 --> 00:10:54,820
lately they also introduced some audio

00:10:51,910 --> 00:10:57,520
worker so it's like a service worker it

00:10:54,820 --> 00:10:59,379
works in the background it has separate

00:10:57,520 --> 00:11:00,879
threads and basic

00:10:59,379 --> 00:11:06,189
it allows you to implement your own

00:11:00,879 --> 00:11:09,220
algorithms your own scripts or functions

00:11:06,189 --> 00:11:11,649
that will run per sample but it will run

00:11:09,220 --> 00:11:13,419
off thread and so you won't hit a

00:11:11,649 --> 00:11:17,709
performance penalty so you won't be

00:11:13,419 --> 00:11:20,019
using the the main thread of the browser

00:11:17,709 --> 00:11:21,970
but it's parallel so that you can have

00:11:20,019 --> 00:11:25,539
multiple of them which makes the browser

00:11:21,970 --> 00:11:27,339
a very nice competitor for digital audio

00:11:25,539 --> 00:11:31,239
workstations like you can really get

00:11:27,339 --> 00:11:36,069
real production grade audio applications

00:11:31,239 --> 00:11:40,869
riding inside the browser and okay

00:11:36,069 --> 00:11:44,409
here's a very small example you start by

00:11:40,869 --> 00:11:48,159
creating a context which you do new

00:11:44,409 --> 00:11:50,439
audio context and as I said everything

00:11:48,159 --> 00:11:54,159
is hosted under the under that context

00:11:50,439 --> 00:11:56,889
so you can create a gain node which will

00:11:54,159 --> 00:11:59,769
amplify the the incoming signal by doing

00:11:56,889 --> 00:12:02,289
context that create gain and you can

00:11:59,769 --> 00:12:04,989
connect it to the destination which is

00:12:02,289 --> 00:12:08,369
the speaker output or whatever you like

00:12:04,989 --> 00:12:11,949
again here's another example to

00:12:08,369 --> 00:12:14,259
basically load an mp3 file and use it as

00:12:11,949 --> 00:12:17,699
the source you can create a buffer

00:12:14,259 --> 00:12:22,209
source and load the buffer that you

00:12:17,699 --> 00:12:25,689
download from the internet and use it

00:12:22,209 --> 00:12:28,299
connect it to the gain as the input so

00:12:25,689 --> 00:12:30,399
this basically gives you a graph where

00:12:28,299 --> 00:12:32,739
the source is at the beginning in the

00:12:30,399 --> 00:12:35,470
middle you have the gain and in the end

00:12:32,739 --> 00:12:37,659
you have the destination but this is

00:12:35,470 --> 00:12:43,629
basically as simple as as this loading

00:12:37,659 --> 00:12:47,109
an mp3 file ok let's talk about

00:12:43,629 --> 00:12:51,220
pedalboard chess it is the first open

00:12:47,109 --> 00:12:52,529
source web audio framework I guess I did

00:12:51,220 --> 00:12:55,439
it in 2012

00:12:52,529 --> 00:12:58,509
back then Web Audio API wasn't a thing

00:12:55,439 --> 00:13:00,789
they were still developing it it didn't

00:12:58,509 --> 00:13:03,189
have stream input for example it

00:13:00,789 --> 00:13:06,129
couldn't capture directly from it from

00:13:03,189 --> 00:13:09,720
your sound card and could only work with

00:13:06,129 --> 00:13:12,939
static buffers but those days are

00:13:09,720 --> 00:13:13,450
fortunately behind us and six years

00:13:12,939 --> 00:13:15,550
later

00:13:13,450 --> 00:13:18,490
it's still one of the best guitar

00:13:15,550 --> 00:13:21,940
effects library out there full

00:13:18,490 --> 00:13:24,450
disclosure I wrote it and it's GPL

00:13:21,940 --> 00:13:27,370
licensed and it has a very nice

00:13:24,450 --> 00:13:30,460
documentation both inside source code

00:13:27,370 --> 00:13:31,960
and as I read me and it has very nice

00:13:30,460 --> 00:13:35,110
abstractions based on the guitar world

00:13:31,960 --> 00:13:37,720
so if you are into building your own

00:13:35,110 --> 00:13:40,090
pedals which I am you can build your own

00:13:37,720 --> 00:13:42,640
pedals here very easily and make it a

00:13:40,090 --> 00:13:44,200
part of the library or you know play

00:13:42,640 --> 00:13:46,900
play with it however you like

00:13:44,200 --> 00:13:52,680
anybody doing guitar electronics like

00:13:46,900 --> 00:13:55,510
their own pedals nobody ok interesting

00:13:52,680 --> 00:13:57,610
good some of the guitars should start

00:13:55,510 --> 00:14:00,130
doing that as well that's very fun I

00:13:57,610 --> 00:14:04,030
started by doing real electronic

00:14:00,130 --> 00:14:05,980
circuits for overdrive pedals and then

00:14:04,030 --> 00:14:09,520
moved on to the digital world because

00:14:05,980 --> 00:14:12,490
this is a lot easier so you have pedal

00:14:09,520 --> 00:14:15,310
boxes pots potentiometers knobs that you

00:14:12,490 --> 00:14:18,060
can twist and turn around switches that

00:14:15,310 --> 00:14:21,160
you can push and LEDs that link and

00:14:18,060 --> 00:14:23,920
basically you bring these together to

00:14:21,160 --> 00:14:26,020
make pedals this is built on top of

00:14:23,920 --> 00:14:29,560
something called Google closure library

00:14:26,020 --> 00:14:31,930
which is ancient by today's standards I

00:14:29,560 --> 00:14:35,200
guess start in 2008 or something anybody

00:14:31,930 --> 00:14:36,720
using Google closure library one person

00:14:35,200 --> 00:14:40,690
you're my hero

00:14:36,720 --> 00:14:42,690
anybody who has used it before another

00:14:40,690 --> 00:14:47,230
person

00:14:42,690 --> 00:14:49,900
well it's arguably the best user

00:14:47,230 --> 00:14:52,360
interface library out there it's by

00:14:49,900 --> 00:14:55,360
Google and it's what Gmail Google Docs

00:14:52,360 --> 00:14:58,300
and all the other serious Google tools

00:14:55,360 --> 00:15:01,390
are built upon it has an amazing

00:14:58,300 --> 00:15:04,570
compiler like nothing the other guys can

00:15:01,390 --> 00:15:08,620
do nowadays like even roll up or other

00:15:04,570 --> 00:15:11,110
information web pack but yeah Google

00:15:08,620 --> 00:15:13,360
closure compiler has a really nice mode

00:15:11,110 --> 00:15:15,160
called advanced mode which rewrites your

00:15:13,360 --> 00:15:18,760
code from scratch doing a lot of

00:15:15,160 --> 00:15:22,090
optimizations just like a real real

00:15:18,760 --> 00:15:23,770
compiler just like a C compiler and it

00:15:22,090 --> 00:15:26,380
also optimizes for speed and for

00:15:23,770 --> 00:15:27,350
download speed and for runtime

00:15:26,380 --> 00:15:29,180
performance

00:15:27,350 --> 00:15:30,650
so pedalboard chess is built on top of

00:15:29,180 --> 00:15:33,830
google closure library because that was

00:15:30,650 --> 00:15:34,700
the best choice in 2012 but i guess i

00:15:33,830 --> 00:15:37,730
want to rewrite it

00:15:34,700 --> 00:15:39,560
now with es6 so if anybody out there I

00:15:37,730 --> 00:15:42,140
wanna you a hand that will be

00:15:39,560 --> 00:15:46,480
appreciated and it uses something called

00:15:42,140 --> 00:15:49,700
an MBTA architecture which is kind of

00:15:46,480 --> 00:15:54,440
out of fashion right now in in the

00:15:49,700 --> 00:15:58,310
front-end world but yeah so you have a

00:15:54,440 --> 00:15:59,600
stage as as the audio context in my

00:15:58,310 --> 00:16:01,430
world you're in pedal board chairs

00:15:59,600 --> 00:16:03,350
everything starts with a stage as you

00:16:01,430 --> 00:16:05,210
see here because without a stage

00:16:03,350 --> 00:16:06,770
there's no musicians even if you're

00:16:05,210 --> 00:16:09,680
playing in your bedroom that's your

00:16:06,770 --> 00:16:12,890
stage and then you have a board a pedal

00:16:09,680 --> 00:16:15,560
board that hosts your pedals and you

00:16:12,890 --> 00:16:18,920
have some boxes initially they're empty

00:16:15,560 --> 00:16:22,310
so it's like a gut class but you can

00:16:18,920 --> 00:16:27,050
fill them and make them guitar pedals

00:16:22,310 --> 00:16:30,200
for example a reverb or a delay pedal is

00:16:27,050 --> 00:16:33,400
a box with some inner circuitry you have

00:16:30,200 --> 00:16:37,280
a foot switch that can toggle on and off

00:16:33,400 --> 00:16:38,600
LEDs pots again file inputs and maybe

00:16:37,280 --> 00:16:41,470
the most important one is the stream

00:16:38,600 --> 00:16:45,080
input which is the thing you use to

00:16:41,470 --> 00:16:48,830
capture the sound of your guitar or a

00:16:45,080 --> 00:16:50,570
live instrument or also a microphone so

00:16:48,830 --> 00:16:55,120
you can actually do pretty fun effects

00:16:50,570 --> 00:16:55,120
with your voice just in your browser

00:16:55,330 --> 00:16:59,720
okay

00:16:57,020 --> 00:17:03,050
I'm not going to go into the details

00:16:59,720 --> 00:17:04,579
here I'm gonna show you some code but

00:17:03,050 --> 00:17:08,510
before that I also want to talk about

00:17:04,579 --> 00:17:09,920
web MIDI API now anybody again please

00:17:08,510 --> 00:17:15,110
raise your hands if you have played with

00:17:09,920 --> 00:17:17,959
the web MIDI API one two three okay

00:17:15,110 --> 00:17:22,939
this is also another very very fun API

00:17:17,959 --> 00:17:24,949
that opens the web to a world of immense

00:17:22,939 --> 00:17:27,740
pop possibilities you can do anything

00:17:24,949 --> 00:17:31,460
with it so you can grab any DJ gear any

00:17:27,740 --> 00:17:36,430
musician gear like a keyboard or a drum

00:17:31,460 --> 00:17:36,430
pad or I don't know something like this

00:17:36,520 --> 00:17:41,210
so this is also a MIDI controller it's a

00:17:40,430 --> 00:17:42,890
wireless Bluetooth

00:17:41,210 --> 00:17:45,559
midi-controller this thing is for the

00:17:42,890 --> 00:17:50,480
foot pedal but there's bluetooth

00:17:45,559 --> 00:17:52,880
connection to the computer so basically

00:17:50,480 --> 00:17:55,510
you can connect this to the browser

00:17:52,880 --> 00:17:58,399
directly and get some messages from that

00:17:55,510 --> 00:18:00,080
depending on which key you press or

00:17:58,399 --> 00:18:02,059
which button you press you get a

00:18:00,080 --> 00:18:03,950
different message on your browser which

00:18:02,059 --> 00:18:07,039
means you can then do whatever you want

00:18:03,950 --> 00:18:11,750
with it you can use it for I don't know

00:18:07,039 --> 00:18:14,059
if scrolling pages or hiding ads or I

00:18:11,750 --> 00:18:18,370
don't know photo applications like photo

00:18:14,059 --> 00:18:22,130
filters for me for example I'm really

00:18:18,370 --> 00:18:24,830
sick of editing tiny sliders on my phone

00:18:22,130 --> 00:18:26,870
when I when I edit photos or like in the

00:18:24,830 --> 00:18:29,270
computer even worse with a mouse you

00:18:26,870 --> 00:18:31,929
have to click something to change the

00:18:29,270 --> 00:18:34,880
brightness of of an image for example

00:18:31,929 --> 00:18:38,870
but if you have a MIDI controller that

00:18:34,880 --> 00:18:43,370
has a knob that you can turn it's a lot

00:18:38,870 --> 00:18:46,460
simpler to to modify images or or sound

00:18:43,370 --> 00:18:48,950
if you're a DJ basically the mixer that

00:18:46,460 --> 00:18:50,539
you see before the musicians there are

00:18:48,950 --> 00:18:53,029
also medical rollers and they can be

00:18:50,539 --> 00:18:56,240
reflected right in the browser and it's

00:18:53,029 --> 00:18:58,250
super easy to get started so it also

00:18:56,240 --> 00:19:01,220
these gears are like they start from I

00:18:58,250 --> 00:19:04,760
don't know $20 or something so you can

00:19:01,220 --> 00:19:07,669
get extremely cheap MIDI gear and use it

00:19:04,760 --> 00:19:10,820
as an external input device to the to

00:19:07,669 --> 00:19:11,899
the browser because with the mouse you

00:19:10,820 --> 00:19:14,750
can only do so much

00:19:11,899 --> 00:19:18,350
but tactile input is is really good if

00:19:14,750 --> 00:19:22,070
you have a pad or a slider a fader or a

00:19:18,350 --> 00:19:24,710
knob that you can twist to I don't know

00:19:22,070 --> 00:19:26,929
to turn on the volume of YouTube videos

00:19:24,710 --> 00:19:30,890
or something it's really really

00:19:26,929 --> 00:19:38,690
effective and of course you can also do

00:19:30,890 --> 00:19:41,440
some games with it let me see oh yeah

00:19:38,690 --> 00:19:41,440
here it is

00:19:41,800 --> 00:19:49,300
so this is a snake game that I

00:19:43,960 --> 00:19:52,720
implemented in one of the DJ gears the

00:19:49,300 --> 00:19:53,680
one on the left is the real DJ pad the

00:19:52,720 --> 00:19:59,890
right is a browser

00:19:53,680 --> 00:20:02,110
so I basically mirrored it in the Dom so

00:19:59,890 --> 00:20:04,780
that's a snake game that that I play

00:20:02,110 --> 00:20:07,270
with a with a real DJ device so you can

00:20:04,780 --> 00:20:09,520
turn on the lights on and off through

00:20:07,270 --> 00:20:14,560
the browser and again it's connected

00:20:09,520 --> 00:20:18,940
over bluetooth and yeah you can do a lot

00:20:14,560 --> 00:20:21,250
of a lot of stuff with it cool so how

00:20:18,940 --> 00:20:24,550
does it look like really it's extremely

00:20:21,250 --> 00:20:28,870
simple again you do navigator that

00:20:24,550 --> 00:20:32,080
request media access so I want some MIDI

00:20:28,870 --> 00:20:34,420
devices to be available and it gives you

00:20:32,080 --> 00:20:37,650
something with inputs and outputs so

00:20:34,420 --> 00:20:44,700
what you do is you traverse over the

00:20:37,650 --> 00:20:46,960
input and attach an event handler called

00:20:44,700 --> 00:20:50,380
media message event handler or whatever

00:20:46,960 --> 00:20:52,930
so basically there you get any events

00:20:50,380 --> 00:20:55,390
every time something changes in the MIDI

00:20:52,930 --> 00:20:58,480
device like when you press a button or

00:20:55,390 --> 00:21:01,620
when you turn a knob or anything you get

00:20:58,480 --> 00:21:05,500
an event that is not that significant

00:21:01,620 --> 00:21:08,380
except for the data which is an array of

00:21:05,500 --> 00:21:10,480
three values or sometimes even two

00:21:08,380 --> 00:21:12,280
values and they are the numbers the

00:21:10,480 --> 00:21:15,580
channel that the middle signal is coming

00:21:12,280 --> 00:21:18,070
in the note the the control change or

00:21:15,580 --> 00:21:24,240
program change signals and its value and

00:21:18,070 --> 00:21:26,620
it's either 0 or any value up to 127

00:21:24,240 --> 00:21:28,300
it's very simple and then you do

00:21:26,620 --> 00:21:30,700
whatever you want with it and of course

00:21:28,300 --> 00:21:36,430
as you can imagine what I did with that

00:21:30,700 --> 00:21:39,240
is I connected it to my pedal board and

00:21:36,430 --> 00:21:41,860
I can turn on turn on and off my pedals

00:21:39,240 --> 00:21:48,390
in real time as I play because I don't

00:21:41,860 --> 00:21:52,060
have a third hand yet so here's the demo

00:21:48,390 --> 00:21:55,480
that that is the the patch that I was

00:21:52,060 --> 00:22:06,490
using first I actually want to show

00:21:55,480 --> 00:22:10,390
you have the yeah so if you see it there

00:22:06,490 --> 00:22:15,370
the the LED is blinking it's turning off

00:22:10,390 --> 00:22:21,520
and on and I can also turn on and off

00:22:15,370 --> 00:22:24,430
the second one if I long press this it

00:22:21,520 --> 00:22:26,320
will change the patch so it will go to

00:22:24,430 --> 00:22:32,500
the second song so that I can play that

00:22:26,320 --> 00:22:41,100
one and yeah I can turn and turn on and

00:22:32,500 --> 00:22:44,130
off different petals and the other one

00:22:41,100 --> 00:22:46,990
has a very nice pedal called a wah pedal

00:22:44,130 --> 00:22:50,740
anybody familiar with the wah pedal wah

00:22:46,990 --> 00:22:52,330
wah pedal good well there were more

00:22:50,740 --> 00:22:58,420
heaters here you should learn the while

00:22:52,330 --> 00:23:00,580
pedal ok so basically it's it's like at

00:22:58,420 --> 00:23:02,950
this device this is a this is called the

00:23:00,580 --> 00:23:04,240
pedal it's a very confusing name

00:23:02,950 --> 00:23:05,770
everything apparently is called the

00:23:04,240 --> 00:23:09,100
pedal but this is also called the pedal

00:23:05,770 --> 00:23:11,460
you can step on it and as you see you

00:23:09,100 --> 00:23:14,380
can step on it to change the value and

00:23:11,460 --> 00:23:18,910
look at the second one I hope you can

00:23:14,380 --> 00:23:22,750
see it the the effect knob changes as I

00:23:18,910 --> 00:23:24,190
move my my pedal which means it opens

00:23:22,750 --> 00:23:26,890
the wah pedal or closes the wah pedal

00:23:24,190 --> 00:23:31,960
depending on the position so basically I

00:23:26,890 --> 00:23:43,260
use these with my library to make some

00:23:31,960 --> 00:23:43,260
music ok now let's see some code

00:23:50,830 --> 00:23:53,519
cool

00:23:54,980 --> 00:24:04,340
so is it readable from the back that's

00:24:00,770 --> 00:24:08,360
nice thank you so again it's very very

00:24:04,340 --> 00:24:10,670
simple I included pedal board chairs as

00:24:08,360 --> 00:24:14,270
a global library so even though this is

00:24:10,670 --> 00:24:17,480
a module some of the the components are

00:24:14,270 --> 00:24:21,320
available in the global context in the

00:24:17,480 --> 00:24:23,660
window so I call something called a

00:24:21,320 --> 00:24:26,420
stage it has its own context so stage

00:24:23,660 --> 00:24:28,760
creates its own audio context and that

00:24:26,420 --> 00:24:32,300
is what you use to create your other

00:24:28,760 --> 00:24:37,220
pedals so you create a stage you create

00:24:32,300 --> 00:24:41,900
a board a pedal board you use the stream

00:24:37,220 --> 00:24:43,670
input to get the guitar and you set the

00:24:41,900 --> 00:24:51,400
board to the stage and then you have

00:24:43,670 --> 00:24:51,400
some pedals let's see

00:24:57,480 --> 00:25:00,080
so

00:25:00,120 --> 00:25:04,610
you have three pedals out there

00:25:07,760 --> 00:25:12,220
yeah the first one is in noise gate a

00:25:10,520 --> 00:25:14,780
noise gate basically saves our ears

00:25:12,220 --> 00:25:17,780
because when you use distortion or

00:25:14,780 --> 00:25:19,010
overdrive there is a lot of hum and a

00:25:17,780 --> 00:25:19,850
lot of noise that I'm gonna demo right

00:25:19,010 --> 00:25:23,390
now

00:25:19,850 --> 00:25:25,240
that's really that's not ideal so you

00:25:23,390 --> 00:25:29,690
use the noise get to to block those

00:25:25,240 --> 00:25:37,820
those noises but it has a switch that

00:25:29,690 --> 00:25:40,550
you can toggle on and off or you can

00:25:37,820 --> 00:25:42,290
change some of its values you won't see

00:25:40,550 --> 00:25:49,670
it there but there's a threshold pot

00:25:42,290 --> 00:25:54,410
here and you can change it and it it is

00:25:49,670 --> 00:25:59,840
it is dynamically reflected in in the

00:25:54,410 --> 00:26:03,800
value so you can play play it here with

00:25:59,840 --> 00:26:07,270
your mouse or as I hate Mouse's you can

00:26:03,800 --> 00:26:11,330
change it through code or through

00:26:07,270 --> 00:26:13,600
through this pedal so let me try another

00:26:11,330 --> 00:26:13,600
one

00:26:19,150 --> 00:26:22,150
cool

00:26:34,680 --> 00:26:45,780
[Music]

00:26:42,630 --> 00:26:49,910
[Applause]

00:26:45,780 --> 00:26:49,910
[Music]

00:26:55,530 --> 00:27:03,690
[Music]

00:26:58,160 --> 00:27:03,690
[Applause]

00:27:23,920 --> 00:27:37,950
[Applause]

00:27:24,560 --> 00:27:40,190
[Music]

00:27:37,950 --> 00:27:40,190
from

00:27:41,130 --> 00:28:29,300
[Music]

00:28:19,850 --> 00:28:30,740
that's it thank you so basically this is

00:28:29,300 --> 00:28:32,810
play-doh ball chess and this is what you

00:28:30,740 --> 00:28:35,480
can do with the browser only a fraction

00:28:32,810 --> 00:28:38,030
of it so I encourage you to take a look

00:28:35,480 --> 00:28:40,600
into both pedalboard chess and the Web

00:28:38,030 --> 00:28:45,140
Audio API thank you again

00:28:40,600 --> 00:28:45,140

YouTube URL: https://www.youtube.com/watch?v=VE0kjwvuw7c


