Title: Madlaina Kalunder: Building a raytracing engine with JS | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/madlaina-kalunder/

In this talk we will build a 3D ray tracer with Javascript. We learn about the basics of real time 3D graphics and what we need in order to produce realistic looking 3D graphics in the browser.
Captions: 
	00:00:03,529 --> 00:00:09,809
hello everyone it's really packed in

00:00:06,569 --> 00:00:12,360
here thank you all for coming as when I

00:00:09,809 --> 00:00:15,389
saw I said my name is milena I am from

00:00:12,360 --> 00:00:18,150
Switzerland and I'm a game designer and

00:00:15,389 --> 00:00:21,510
currently a full-stack developer at art

00:00:18,150 --> 00:00:25,019
illogic we are working on a toolkit in

00:00:21,510 --> 00:00:31,170
JavaScript to provide 3d models for

00:00:25,019 --> 00:00:34,200
interior spaces and also api's for

00:00:31,170 --> 00:00:36,420
spatial analytics so what we do is we

00:00:34,200 --> 00:00:38,940
want to make 3d models accessible for

00:00:36,420 --> 00:00:43,500
every web developer that would like to

00:00:38,940 --> 00:00:45,510
integrate this in his daily work as I

00:00:43,500 --> 00:00:48,629
studied game design I'm really excited

00:00:45,510 --> 00:00:50,760
about games you might see there I love

00:00:48,629 --> 00:00:52,770
to play games I love to collect retro

00:00:50,760 --> 00:00:56,719
games and I also love to make games

00:00:52,770 --> 00:00:59,670
which usually includes working in 3d I

00:00:56,719 --> 00:01:02,309
also really love travelling as I see it

00:00:59,670 --> 00:01:04,890
as a resource for a lot of inspiration

00:01:02,309 --> 00:01:08,220
especially for storytelling and finding

00:01:04,890 --> 00:01:10,290
new ways of designing and I also love

00:01:08,220 --> 00:01:12,330
creative things and music and a lot of

00:01:10,290 --> 00:01:14,880
other things especially Iceland I've

00:01:12,330 --> 00:01:16,140
been here two times already for a long

00:01:14,880 --> 00:01:21,000
period of time

00:01:16,140 --> 00:01:24,030
I have not seen anything so you

00:01:21,000 --> 00:01:26,400
definitely have to come back why should

00:01:24,030 --> 00:01:28,740
you as a web developer or JavaScript

00:01:26,400 --> 00:01:32,970
developer be interested in doing 3d on

00:01:28,740 --> 00:01:36,270
the web as we might already know most of

00:01:32,970 --> 00:01:41,159
you guys sorry folks as might everybody

00:01:36,270 --> 00:01:43,439
know that that VR is coming and 3d on

00:01:41,159 --> 00:01:46,500
the web is very accessible at the moment

00:01:43,439 --> 00:01:51,350
and we're also challenging browsers like

00:01:46,500 --> 00:01:55,110
show Eve was explaining before to

00:01:51,350 --> 00:01:56,969
actually support 3d on the web there is

00:01:55,110 --> 00:01:59,430
lots of things you can do to enhance

00:01:56,969 --> 00:02:02,579
your product for example this is a

00:01:59,430 --> 00:02:05,460
screenshot from what we are doing we are

00:02:02,579 --> 00:02:07,409
having semantic 3d models which we can

00:02:05,460 --> 00:02:11,220
then analyze with machine learning for

00:02:07,409 --> 00:02:13,260
spatial data and we can actually also

00:02:11,220 --> 00:02:15,540
use machine learning to

00:02:13,260 --> 00:02:18,569
propose you how you should furnish your

00:02:15,540 --> 00:02:22,019
apartment which is pretty cool so you

00:02:18,569 --> 00:02:25,349
can see your new house already before

00:02:22,019 --> 00:02:28,019
it's actually being built or you can

00:02:25,349 --> 00:02:30,569
make a really cool small games on your

00:02:28,019 --> 00:02:35,000
browser on your website integrated it

00:02:30,569 --> 00:02:38,670
with all the native web environment

00:02:35,000 --> 00:02:40,440
things that you have and you can make

00:02:38,670 --> 00:02:43,890
them work with each other which is

00:02:40,440 --> 00:02:49,739
really cool you can also use it to

00:02:43,890 --> 00:02:53,190
enhance your infographics or to make

00:02:49,739 --> 00:02:55,650
your data more readable with enhancing

00:02:53,190 --> 00:02:58,950
it with the third dimension so you can

00:02:55,650 --> 00:03:01,200
also use animation time and the third

00:02:58,950 --> 00:03:04,230
dimension to show something you would

00:03:01,200 --> 00:03:06,480
like to do with your data I think this

00:03:04,230 --> 00:03:10,040
is pretty interesting and you should

00:03:06,480 --> 00:03:13,260
definitely think about how to use it

00:03:10,040 --> 00:03:15,959
most developers that would like to start

00:03:13,260 --> 00:03:19,530
with especially web VR have been coming

00:03:15,959 --> 00:03:23,700
to me and asked me how do I get started

00:03:19,530 --> 00:03:26,310
with 3d why is it that it's so hard to

00:03:23,700 --> 00:03:28,079
get started for these people and this is

00:03:26,310 --> 00:03:30,690
what I would like to talk to you about

00:03:28,079 --> 00:03:32,250
today I would really love that you come

00:03:30,690 --> 00:03:34,650
out of this talk and you have this

00:03:32,250 --> 00:03:36,599
little toolbox with things you have

00:03:34,650 --> 00:03:40,620
heard before and you feel more motivated

00:03:36,599 --> 00:03:43,319
to start trying it because at first you

00:03:40,620 --> 00:03:45,959
will be overwhelmed by all the new

00:03:43,319 --> 00:03:49,590
terminologies you're gonna encounter

00:03:45,959 --> 00:03:52,799
not only have you have new things to

00:03:49,590 --> 00:03:54,000
learn but you're also gonna be a movie

00:03:52,799 --> 00:03:56,879
screen designer

00:03:54,000 --> 00:03:59,609
you're gonna be a narrator you're gonna

00:03:56,879 --> 00:04:01,590
have to learn how to do UX in 3d you're

00:03:59,609 --> 00:04:04,859
gonna have to learn about 3d modeling

00:04:01,590 --> 00:04:09,389
how to light a scene properly etc etc

00:04:04,859 --> 00:04:11,220
that's a lot of things to learn I would

00:04:09,389 --> 00:04:15,720
like to talk to you first about the

00:04:11,220 --> 00:04:17,789
physics of light so here you see it's

00:04:15,720 --> 00:04:22,740
very simple scene we have this little

00:04:17,789 --> 00:04:24,960
apartment it works okay and we have we

00:04:22,740 --> 00:04:26,280
see a computer or standing on a desk we

00:04:24,960 --> 00:04:28,950
have a chair we

00:04:26,280 --> 00:04:32,490
a window and outside we have the Sun

00:04:28,950 --> 00:04:35,310
which is primarily the source of light

00:04:32,490 --> 00:04:38,850
which makes us see everything but how

00:04:35,310 --> 00:04:40,889
does it actually work so every light

00:04:38,850 --> 00:04:44,100
source for now we're talking about the

00:04:40,889 --> 00:04:49,889
Sun is emitting race of electromagnetic

00:04:44,100 --> 00:04:53,010
waves as soon as these rays are hitting

00:04:49,889 --> 00:04:57,330
an object they are going to interact

00:04:53,010 --> 00:05:00,120
with that object so either the object is

00:04:57,330 --> 00:05:03,750
absorbing all the light in that case a

00:05:00,120 --> 00:05:05,669
lot of energy is being produced or parts

00:05:03,750 --> 00:05:09,630
of the ray of the Sun are gonna be

00:05:05,669 --> 00:05:12,720
bouncing off and reflecting on different

00:05:09,630 --> 00:05:17,160
surfaces until that light energy is used

00:05:12,720 --> 00:05:19,620
up I already said that the lecture

00:05:17,160 --> 00:05:21,419
magnetic waves consisting of different

00:05:19,620 --> 00:05:25,080
frequencies so that means different

00:05:21,419 --> 00:05:27,600
frequencies are different colors if one

00:05:25,080 --> 00:05:30,450
frequency is absorbed the other of two

00:05:27,600 --> 00:05:32,640
frequencies are going to hit our eye the

00:05:30,450 --> 00:05:37,250
retina of our eye therefore creating

00:05:32,640 --> 00:05:37,250
this color in our eyes and we can see it

00:05:39,650 --> 00:05:44,430
different materials react very

00:05:41,760 --> 00:05:46,860
differently which I'm going to talk

00:05:44,430 --> 00:05:49,020
about the differences afterwards but

00:05:46,860 --> 00:05:51,720
there is three major things as I said

00:05:49,020 --> 00:05:55,350
already its absorption reflection and

00:05:51,720 --> 00:05:58,310
transmission of light we could say this

00:05:55,350 --> 00:06:02,010
here a little bit more graphically

00:05:58,310 --> 00:06:04,860
imagine you have a perfect mirror which

00:06:02,010 --> 00:06:07,530
is even it's not possible even if we

00:06:04,860 --> 00:06:08,970
polish your surface very well you're

00:06:07,530 --> 00:06:12,720
never going to have it but theoretically

00:06:08,970 --> 00:06:17,240
a perfect mirror will reflect all the

00:06:12,720 --> 00:06:21,060
light rays uniformly this we call

00:06:17,240 --> 00:06:25,770
specular reflection then we have diffuse

00:06:21,060 --> 00:06:27,990
material like cloth and like wood and

00:06:25,770 --> 00:06:31,830
other things that are not so much

00:06:27,990 --> 00:06:34,830
reflective so it's gonna take the race

00:06:31,830 --> 00:06:40,050
and bounce them back in a very chaotic

00:06:34,830 --> 00:06:43,050
way and you have propagated light so

00:06:40,050 --> 00:06:45,449
if you have glass or water the light is

00:06:43,050 --> 00:06:50,220
not only gonna reflect it's also gonna

00:06:45,449 --> 00:06:54,690
transmit through the solid creating

00:06:50,220 --> 00:06:56,159
these really cool effects so with this

00:06:54,690 --> 00:06:58,740
is of course not everything that defines

00:06:56,159 --> 00:07:03,030
a material but as we can see in this

00:06:58,740 --> 00:07:06,800
illustration these three components make

00:07:03,030 --> 00:07:10,699
a lot of our real-life materials and

00:07:06,800 --> 00:07:15,479
it's never just one component that is

00:07:10,699 --> 00:07:18,750
there in one material for example if you

00:07:15,479 --> 00:07:22,259
imagine about if you imagine you have a

00:07:18,750 --> 00:07:24,030
wooden floor that is not polished the

00:07:22,259 --> 00:07:26,819
the rays of light are going to bounce

00:07:24,030 --> 00:07:30,000
back chaotically but if you then put a

00:07:26,819 --> 00:07:32,419
polish or finish on it's going to be

00:07:30,000 --> 00:07:34,710
very shiny from specific angles and

00:07:32,419 --> 00:07:36,449
that's what I really want you to think

00:07:34,710 --> 00:07:38,430
about when he gets started with 3d

00:07:36,449 --> 00:07:41,250
because that's what a lot of people get

00:07:38,430 --> 00:07:45,630
wrong or just don't think about because

00:07:41,250 --> 00:07:50,159
why would you so how do we now translate

00:07:45,630 --> 00:07:54,599
this into computer graphics I would like

00:07:50,159 --> 00:07:57,330
to just go back to a few centuries back

00:07:54,599 --> 00:08:01,110
where the first cameras were appearing

00:07:57,330 --> 00:08:03,120
and these are called pinhole cameras so

00:08:01,110 --> 00:08:06,840
you have a light-sensitive film on the

00:08:03,120 --> 00:08:12,090
back of a box with a little hole inside

00:08:06,840 --> 00:08:14,210
and only one ray of light per angle is

00:08:12,090 --> 00:08:17,639
allowed to pass through that hole

00:08:14,210 --> 00:08:24,150
creating then the color on that spot of

00:08:17,639 --> 00:08:27,719
the of the film and we are also using

00:08:24,150 --> 00:08:29,610
this technique in the render engine

00:08:27,719 --> 00:08:34,949
technique called ray tracing and that's

00:08:29,610 --> 00:08:37,380
what I'm gonna talk about however if you

00:08:34,949 --> 00:08:40,469
imagine again the Sun it's not only

00:08:37,380 --> 00:08:42,719
shooting one ray at the time it's like a

00:08:40,469 --> 00:08:44,730
really really big energy source and it's

00:08:42,719 --> 00:08:46,740
shooting down all these billions and

00:08:44,730 --> 00:08:49,410
billions of race at the same time and

00:08:46,740 --> 00:08:51,690
most of these rays are never gonna hit

00:08:49,410 --> 00:08:53,550
our eye they're never going to hit our

00:08:51,690 --> 00:08:56,310
camera or whatever specifics

00:08:53,550 --> 00:08:59,010
but that we want to look at so what

00:08:56,310 --> 00:09:01,800
computer graphics are doing is they use

00:08:59,010 --> 00:09:04,649
technique called backwards ray tracing

00:09:01,800 --> 00:09:06,690
so we are tracing the race but instead

00:09:04,649 --> 00:09:09,720
of going from the light source we're

00:09:06,690 --> 00:09:12,209
going from our camera through the pixel

00:09:09,720 --> 00:09:15,269
that we want to trace and we should

00:09:12,209 --> 00:09:17,010
array into the scene and we look at the

00:09:15,269 --> 00:09:20,220
first object that we're going to hit at

00:09:17,010 --> 00:09:23,250
the closest one from there we're going

00:09:20,220 --> 00:09:37,110
to see we want to see if this one object

00:09:23,250 --> 00:09:42,089
is in shadow or if it is in light okay

00:09:37,110 --> 00:09:44,610
so if the object is actually lit we're

00:09:42,089 --> 00:09:47,120
going to use the color of the of the

00:09:44,610 --> 00:09:49,620
material that is defined at that space

00:09:47,120 --> 00:09:52,560
basically multiplying it simple

00:09:49,620 --> 00:09:54,839
simplified set multiplying it with the

00:09:52,560 --> 00:09:58,470
color of the light intensity of the

00:09:54,839 --> 00:10:01,560
light if the object is in shadow we're

00:09:58,470 --> 00:10:05,310
just going to use we're just going to

00:10:01,560 --> 00:10:09,209
use black for now as for shadow this is

00:10:05,310 --> 00:10:11,490
very simplified but now I also talked

00:10:09,209 --> 00:10:15,930
about these other things that called

00:10:11,490 --> 00:10:18,380
like transmission and reflection so how

00:10:15,930 --> 00:10:24,810
are we handling this in ray tracing

00:10:18,380 --> 00:10:28,829
imagine we want to see where if we have

00:10:24,810 --> 00:10:31,470
a transparent material like glass we

00:10:28,829 --> 00:10:33,600
would like to see what can we see

00:10:31,470 --> 00:10:36,720
through that glass and what is reflected

00:10:33,600 --> 00:10:40,170
on the surface of that glass so on the

00:10:36,720 --> 00:10:42,410
impact point we have to calculate the

00:10:40,170 --> 00:10:45,209
different race that we're going to trace

00:10:42,410 --> 00:10:48,209
one of those rays is going to be the

00:10:45,209 --> 00:10:51,510
reflection ray and one of them is going

00:10:48,209 --> 00:10:53,459
to be the refraction ray it's a bit yeah

00:10:51,510 --> 00:10:57,600
not very nice that the names are so

00:10:53,459 --> 00:10:59,070
close and from there these rays we're

00:10:57,600 --> 00:11:01,980
going to do another check if they are

00:10:59,070 --> 00:11:03,899
hitting a next object so if the

00:11:01,980 --> 00:11:06,930
reflection ray is hitting this red

00:11:03,899 --> 00:11:10,080
sphere it's going to be red at that

00:11:06,930 --> 00:11:12,899
points but the refraction rays hitting

00:11:10,080 --> 00:11:16,260
this green sphere and so we have to

00:11:12,899 --> 00:11:20,310
calculate together if we want to have to

00:11:16,260 --> 00:11:23,490
pixel their red or green from the impact

00:11:20,310 --> 00:11:26,430
point of the secondary race we're going

00:11:23,490 --> 00:11:32,640
to trace to towards the Sun and see if

00:11:26,430 --> 00:11:34,950
these points are in light or not I want

00:11:32,640 --> 00:11:37,160
you to have a moment to look at this

00:11:34,950 --> 00:11:37,160
code

00:11:50,320 --> 00:11:57,800
everybody get it can you come here and

00:11:54,890 --> 00:11:59,840
explain it to me because this is how I

00:11:57,800 --> 00:12:04,400
feel about my own code after two weeks

00:11:59,840 --> 00:12:07,040
of not looking at it so yeah what you're

00:12:04,400 --> 00:12:09,080
looking at is a basic implementation of

00:12:07,040 --> 00:12:11,680
a ray tracing engine that can do

00:12:09,080 --> 00:12:16,220
reflection reflection and reflect

00:12:11,680 --> 00:12:19,280
refraction with geometry primitives of

00:12:16,220 --> 00:12:22,340
spheres and I'm not sure if planes as

00:12:19,280 --> 00:12:25,130
well I think only spheres and this is a

00:12:22,340 --> 00:12:27,410
common challenge and young people who do

00:12:25,130 --> 00:12:30,050
computer graphics is how to make the

00:12:27,410 --> 00:12:34,520
most compact ray tracing engine that can

00:12:30,050 --> 00:12:36,380
be fit on a business card so this

00:12:34,520 --> 00:12:38,900
actually compiles and I think that's

00:12:36,380 --> 00:12:42,350
pretty cool but let's take it apart a

00:12:38,900 --> 00:12:45,650
little bit so what we want to do is we

00:12:42,350 --> 00:12:48,560
want to define our geometry primitives

00:12:45,650 --> 00:12:50,240
and for now we are just going to talk

00:12:48,560 --> 00:12:52,880
about the sphere because the sphere is

00:12:50,240 --> 00:12:56,660
one of the most easy shapes to calculate

00:12:52,880 --> 00:12:59,060
an intersection and for that we need a

00:12:56,660 --> 00:13:00,920
center and radius and we want to have

00:12:59,060 --> 00:13:02,860
the material because as I explained

00:13:00,920 --> 00:13:06,440
before that's the most interesting part

00:13:02,860 --> 00:13:08,150
and we're going to make an algorithm

00:13:06,440 --> 00:13:11,480
that will calculate our intersection

00:13:08,150 --> 00:13:15,020
from that if we are successful we're

00:13:11,480 --> 00:13:16,670
going to return both points that are

00:13:15,020 --> 00:13:19,130
intersecting with the sphere because

00:13:16,670 --> 00:13:22,160
usually you will have two of them so the

00:13:19,130 --> 00:13:24,290
the distance to the the closest one and

00:13:22,160 --> 00:13:29,860
the distance to this to the further away

00:13:24,290 --> 00:13:32,210
one then we're gonna start our main

00:13:29,860 --> 00:13:34,480
function and we're going to define the

00:13:32,210 --> 00:13:37,250
geometries and again for simplification

00:13:34,480 --> 00:13:40,040
our light source are also going to be

00:13:37,250 --> 00:13:43,850
spheres just with a different material

00:13:40,040 --> 00:13:46,430
that actually emits light for that we

00:13:43,850 --> 00:13:49,610
can test afterwards we're gonna have a

00:13:46,430 --> 00:13:51,710
buffer for our canvas and we're going to

00:13:49,610 --> 00:13:54,770
go and Traverse through each pixel and

00:13:51,710 --> 00:13:58,450
for and we're gonna trace for each pixel

00:13:54,770 --> 00:14:02,180
one ray that's what we did before right

00:13:58,450 --> 00:14:03,260
then in the trace function I want to see

00:14:02,180 --> 00:14:05,240
again

00:14:03,260 --> 00:14:08,330
shoot this is the primary ray that we

00:14:05,240 --> 00:14:10,670
talked about before and we want to see

00:14:08,330 --> 00:14:12,920
which is the closest object so we're

00:14:10,670 --> 00:14:17,240
gonna we're gonna test the Ray against

00:14:12,920 --> 00:14:19,580
every object in the sea and as a result

00:14:17,240 --> 00:14:21,200
we get the nearest one back if we don't

00:14:19,580 --> 00:14:23,270
have one hit at all we could just return

00:14:21,200 --> 00:14:27,140
the background color because there is

00:14:23,270 --> 00:14:28,790
nothing there and there will never be

00:14:27,140 --> 00:14:30,710
something there that's the really cool

00:14:28,790 --> 00:14:33,920
thing about ray tracing you actually

00:14:30,710 --> 00:14:37,250
test against the whole scene if there is

00:14:33,920 --> 00:14:41,540
an object there and it's a transparent

00:14:37,250 --> 00:14:44,450
or a reflective material we're gonna

00:14:41,540 --> 00:14:48,050
have to to shoot the secondary rays for

00:14:44,450 --> 00:14:51,980
each of those and we do this recursively

00:14:48,050 --> 00:14:53,600
until we are satisfied and usually you

00:14:51,980 --> 00:14:56,330
don't want to do this endlessly because

00:14:53,600 --> 00:14:59,270
it's gonna take forever so we're gonna

00:14:56,330 --> 00:15:02,030
decide how often you want to do this

00:14:59,270 --> 00:15:04,160
recursion and at the end of that you

00:15:02,030 --> 00:15:08,690
will test against the lights and see if

00:15:04,160 --> 00:15:11,090
these points are in shadow or not then

00:15:08,690 --> 00:15:13,520
you're gonna use a fernell algorithm to

00:15:11,090 --> 00:15:15,950
see how you should calculate the lights

00:15:13,520 --> 00:15:17,540
together or the results of the colors

00:15:15,950 --> 00:15:19,340
you're getting I'm not going to explain

00:15:17,540 --> 00:15:22,940
that right now but it's very interesting

00:15:19,340 --> 00:15:25,910
to look at and if it doesn't fall into

00:15:22,940 --> 00:15:28,580
this that means we are hitting a light

00:15:25,910 --> 00:15:31,460
source or a diffuse material that is not

00:15:28,580 --> 00:15:34,250
going to reflect any different points so

00:15:31,460 --> 00:15:36,200
we can break the recursion there I did

00:15:34,250 --> 00:15:39,140
not make another slide for this because

00:15:36,200 --> 00:15:43,930
I think it's clear and this is the

00:15:39,140 --> 00:15:43,930
result that we are getting from this I

00:15:46,630 --> 00:15:53,990
think it's very interesting to see that

00:15:49,070 --> 00:15:57,500
from this rather simple algorithm we

00:15:53,990 --> 00:15:59,720
already get really cool effects like we

00:15:57,500 --> 00:16:00,640
can really see the spheres that are

00:15:59,720 --> 00:16:04,430
close to each other

00:16:00,640 --> 00:16:07,430
reflecting each other we can see shadows

00:16:04,430 --> 00:16:09,230
and we can also see what's behind the

00:16:07,430 --> 00:16:13,100
camera which is pretty cool

00:16:09,230 --> 00:16:17,329
and this is something that you do not

00:16:13,100 --> 00:16:21,489
generally see in games for example or in

00:16:17,329 --> 00:16:24,040
different render engines and why is that

00:16:21,489 --> 00:16:28,819
we're gonna get to that later on

00:16:24,040 --> 00:16:31,910
so this was really easy I think but now

00:16:28,819 --> 00:16:34,579
we want to really go realistic because

00:16:31,910 --> 00:16:37,399
we said before there is not one ray per

00:16:34,579 --> 00:16:40,040
pixel usually the Sun shoot so many rays

00:16:37,399 --> 00:16:42,230
that make up one pixel of your image

00:16:40,040 --> 00:16:45,499
there is so many things that come

00:16:42,230 --> 00:16:48,259
together we want to have soft shadows we

00:16:45,499 --> 00:16:50,679
want to use multiple light sources how

00:16:48,259 --> 00:16:54,769
are we going to compute these together

00:16:50,679 --> 00:16:58,459
how are we going to decide on what is

00:16:54,769 --> 00:17:01,249
more weighted which pixel should be what

00:16:58,459 --> 00:17:04,549
and we really want to have this physical

00:17:01,249 --> 00:17:08,209
correctness which means that we have to

00:17:04,549 --> 00:17:11,389
basically bounce the array forever until

00:17:08,209 --> 00:17:13,909
it hits the light source by itself right

00:17:11,389 --> 00:17:16,339
now we're just making it a shortcut

00:17:13,909 --> 00:17:18,799
because we just test if it's if it will

00:17:16,339 --> 00:17:22,909
be hitting the light or not if there is

00:17:18,799 --> 00:17:24,559
something in-between or not this is

00:17:22,909 --> 00:17:28,000
going to use a lot of computational

00:17:24,559 --> 00:17:31,460
power ray tracing is really old

00:17:28,000 --> 00:17:34,909
technique it's from the knife from 1984

00:17:31,460 --> 00:17:38,659
was the first sake graph conference that

00:17:34,909 --> 00:17:41,360
was taking this as a topic and since

00:17:38,659 --> 00:17:45,139
then we are still not there where we

00:17:41,360 --> 00:17:47,929
have real time ray traced and she is

00:17:45,139 --> 00:17:50,720
that are engines that are working it has

00:17:47,929 --> 00:17:53,029
a lot to do with this that you cannot

00:17:50,720 --> 00:17:55,789
make shortcuts to make it look good

00:17:53,029 --> 00:17:57,860
you have to have a certain amount of

00:17:55,789 --> 00:18:00,230
samples unless you're gonna have a

00:17:57,860 --> 00:18:08,120
really otherwise you can have a really

00:18:00,230 --> 00:18:10,039
noisy scenery so we have a lot of new

00:18:08,120 --> 00:18:14,960
light sources in the room that are also

00:18:10,039 --> 00:18:18,049
casting Ray's I would like to just very

00:18:14,960 --> 00:18:20,179
briefly introduce to you rasterization

00:18:18,049 --> 00:18:23,179
technique this is the most common

00:18:20,179 --> 00:18:26,720
real-time render engine technique that

00:18:23,179 --> 00:18:29,000
is being used and it's just as ray

00:18:26,720 --> 00:18:30,710
tracing just it's just as fundamental

00:18:29,000 --> 00:18:32,299
this technique it has been around

00:18:30,710 --> 00:18:34,580
almost the same time because when

00:18:32,299 --> 00:18:37,010
ray-tracing was introduced the

00:18:34,580 --> 00:18:39,260
computational power was not good enough

00:18:37,010 --> 00:18:42,649
or not strong enough it would have taken

00:18:39,260 --> 00:18:48,679
them forever to render one frame of an

00:18:42,649 --> 00:18:52,130
animated movie for example so what's

00:18:48,679 --> 00:18:54,140
interesting about rasterization is that

00:18:52,130 --> 00:18:56,270
it's also trying to solve the visibility

00:18:54,140 --> 00:18:58,520
problem it's also trying to find out

00:18:56,270 --> 00:19:05,390
which object object is laying in shadow

00:18:58,520 --> 00:19:07,600
or what's the color of it but it's doing

00:19:05,390 --> 00:19:09,890
it in a very opposite way of ray tracing

00:19:07,600 --> 00:19:14,110
while the ray tracing is going from the

00:19:09,890 --> 00:19:17,179
eye or from the camera into the scene

00:19:14,110 --> 00:19:21,049
rasterization is going from the objects

00:19:17,179 --> 00:19:24,220
or from the scenery onto the screen due

00:19:21,049 --> 00:19:28,789
to perspective projection so we take all

00:19:24,220 --> 00:19:31,399
the numbers and all our points and all

00:19:28,789 --> 00:19:35,419
our vertices everything and we project

00:19:31,399 --> 00:19:38,510
it onto the screen for this we it's

00:19:35,419 --> 00:19:40,940
currently using triangles which is also

00:19:38,510 --> 00:19:43,159
a rendering primitive the cool thing

00:19:40,940 --> 00:19:45,020
about triangles is you cannot subdivide

00:19:43,159 --> 00:19:48,860
it anymore it's already you cannot make

00:19:45,020 --> 00:19:51,620
more areas out of it and the areas is

00:19:48,860 --> 00:19:55,760
always planner so we never have like a

00:19:51,620 --> 00:20:00,049
perspective warp or something which

00:19:55,760 --> 00:20:04,700
makes it really cool to then project and

00:20:00,049 --> 00:20:06,470
test what we then do with it with the

00:20:04,700 --> 00:20:10,159
triangles that are mapped onto screen

00:20:06,470 --> 00:20:12,020
space is something that also shown has

00:20:10,159 --> 00:20:15,649
been talking about before we were

00:20:12,020 --> 00:20:18,500
rasterizing each pixel for each triangle

00:20:15,649 --> 00:20:20,570
that is visible and we mapped their sea

00:20:18,500 --> 00:20:23,299
value so how far it is away from the

00:20:20,570 --> 00:20:25,460
camera so that afterwards when we color

00:20:23,299 --> 00:20:28,940
it in we know what's on top of each

00:20:25,460 --> 00:20:31,580
other and if you have transparency then

00:20:28,940 --> 00:20:33,200
we have to consider the C buffer because

00:20:31,580 --> 00:20:38,179
that's how we're going to put it

00:20:33,200 --> 00:20:40,309
together which also tells us that the Z

00:20:38,179 --> 00:20:43,070
buffer is basically so a transparent

00:20:40,309 --> 00:20:44,750
object is basically just look through

00:20:43,070 --> 00:20:47,350
with a different

00:20:44,750 --> 00:20:50,240
our value which does not have this

00:20:47,350 --> 00:20:56,030
refraction rays that are kind of warped

00:20:50,240 --> 00:20:59,060
around in the scene so here in this

00:20:56,030 --> 00:21:01,730
image you can see two basic

00:20:59,060 --> 00:21:04,010
implementations one basic implementation

00:21:01,730 --> 00:21:06,890
of rasterization and the basic

00:21:04,010 --> 00:21:10,780
implementation of ray tracing and you

00:21:06,890 --> 00:21:10,780
can already see the difference I think

00:21:16,750 --> 00:21:22,700
while rasterization has come a really

00:21:20,180 --> 00:21:25,430
long way if you have played any 3d games

00:21:22,700 --> 00:21:27,740
recently or if you are working with VR

00:21:25,430 --> 00:21:30,740
you're gonna know that it's not going to

00:21:27,740 --> 00:21:33,520
look like the image up there so there is

00:21:30,740 --> 00:21:36,590
a lot of simulations of real physics

00:21:33,520 --> 00:21:40,670
happening in restoration but generally

00:21:36,590 --> 00:21:45,310
this implementation is also really a lot

00:21:40,670 --> 00:21:48,410
of work to do to simulate these physics

00:21:45,310 --> 00:21:50,330
but they are doing a pretty good job the

00:21:48,410 --> 00:21:54,980
only problem is still transparency I

00:21:50,330 --> 00:21:58,130
think so just a quick overview of the

00:21:54,980 --> 00:21:59,840
two ray tracing is mostly physically

00:21:58,130 --> 00:22:04,190
correct if you put enough effort in it

00:21:59,840 --> 00:22:05,750
it has very high details very nice side

00:22:04,190 --> 00:22:08,360
effects that you don't have to think

00:22:05,750 --> 00:22:10,580
about you get the soft shadows you get

00:22:08,360 --> 00:22:13,460
the inter reflections you get the

00:22:10,580 --> 00:22:17,630
caustics but it's very computationally

00:22:13,460 --> 00:22:20,840
heavy so we are going to use a lot of

00:22:17,630 --> 00:22:23,150
computation time to render frames and if

00:22:20,840 --> 00:22:26,120
we ever want to do this real time we're

00:22:23,150 --> 00:22:30,560
gonna either have to break it down or we

00:22:26,120 --> 00:22:33,950
have to make cuts and restoration is

00:22:30,560 --> 00:22:36,020
super fast it's really only one

00:22:33,950 --> 00:22:38,990
transformation basically from your world

00:22:36,020 --> 00:22:41,480
world coordinates to your screens space

00:22:38,990 --> 00:22:43,790
coordinates there's a lot of tooling and

00:22:41,480 --> 00:22:46,190
hardware support so your GPU and your

00:22:43,790 --> 00:22:48,950
computer is designed to do a rasterize

00:22:46,190 --> 00:22:52,370
ation it's not designed to do ray

00:22:48,950 --> 00:22:54,890
tracing and and most of the like Pixar

00:22:52,370 --> 00:22:58,640
and most of the rendering people I know

00:22:54,890 --> 00:23:02,540
they're still rendering ray tracing

00:22:58,640 --> 00:23:04,310
with CPUs because it doesn't matter to

00:23:02,540 --> 00:23:06,560
them if there are three times faster or

00:23:04,310 --> 00:23:08,840
not in what matters is that they have to

00:23:06,560 --> 00:23:11,050
change all their their tools and they

00:23:08,840 --> 00:23:15,890
have to change their engines to be

00:23:11,050 --> 00:23:21,290
supportive of GPUs for just a little

00:23:15,890 --> 00:23:23,420
benefit so you have the physics that are

00:23:21,290 --> 00:23:25,570
not really correct you have like an

00:23:23,420 --> 00:23:32,090
approximation of what you can do and you

00:23:25,570 --> 00:23:34,820
have quality loss due to that so this is

00:23:32,090 --> 00:23:36,980
kind of the point where I hope you are

00:23:34,820 --> 00:23:39,800
all oh god how should I even get started

00:23:36,980 --> 00:23:43,040
it seems very complicated so I would

00:23:39,800 --> 00:23:47,780
like to introduce you a frame toolkit

00:23:43,040 --> 00:23:49,640
and a frame is a web toolkit where you

00:23:47,780 --> 00:23:52,700
can really easily get started with

00:23:49,640 --> 00:23:55,640
making your own 3d scenes and if you're

00:23:52,700 --> 00:23:58,010
a fan of HTML you're gonna be really

00:23:55,640 --> 00:24:03,050
happy because this is what its gonna

00:23:58,010 --> 00:24:05,570
look like so you can define with HTML

00:24:03,050 --> 00:24:08,990
tags we basically define everything you

00:24:05,570 --> 00:24:11,330
define your scene you define the sky you

00:24:08,990 --> 00:24:14,630
can put sources and if you want to use a

00:24:11,330 --> 00:24:17,720
sky texture if you prefer to use a sky

00:24:14,630 --> 00:24:20,510
color then you can put a color then you

00:24:17,720 --> 00:24:24,500
have this geometry primitives as you

00:24:20,510 --> 00:24:28,400
have usually boxes spheres cubes

00:24:24,500 --> 00:24:32,810
whatever planes are also very prominent

00:24:28,400 --> 00:24:34,610
and you can also define the lights and

00:24:32,810 --> 00:24:38,450
that's where we come back to the

00:24:34,610 --> 00:24:41,990
beginning because with this components

00:24:38,450 --> 00:24:44,420
you're gonna make or break your scene if

00:24:41,990 --> 00:24:49,340
your lightning is good sorry lighting

00:24:44,420 --> 00:24:51,700
it's good you're gonna have you can

00:24:49,340 --> 00:24:55,460
really achieve a lot by just having

00:24:51,700 --> 00:24:59,450
three or four or five different objects

00:24:55,460 --> 00:25:01,850
in the scene and the best part of a

00:24:59,450 --> 00:25:04,070
frame is that it comes with webviewer

00:25:01,850 --> 00:25:06,830
integration so you don't have to do

00:25:04,070 --> 00:25:09,710
anything you just lean back you import

00:25:06,830 --> 00:25:12,380
your wife controls or every major

00:25:09,710 --> 00:25:14,030
headset is supported or so mostly

00:25:12,380 --> 00:25:18,590
every major headset controller is

00:25:14,030 --> 00:25:24,620
supported so this is what that example

00:25:18,590 --> 00:25:27,020
would look like once it is but that did

00:25:24,620 --> 00:25:32,810
not look very good I mean the background

00:25:27,020 --> 00:25:34,640
does but the foreground so it's still

00:25:32,810 --> 00:25:38,060
the big question in the room is how do I

00:25:34,640 --> 00:25:42,050
get my 3d models and that's where also

00:25:38,060 --> 00:25:45,050
we come in so for example this is gonna

00:25:42,050 --> 00:25:47,540
be in your head of your HTML you load

00:25:45,050 --> 00:25:50,180
all these external components they're

00:25:47,540 --> 00:25:52,070
called a frame components and I think

00:25:50,180 --> 00:25:54,500
the open-source community is really

00:25:52,070 --> 00:25:56,900
doing an amazing job here because you

00:25:54,500 --> 00:25:59,900
have all these really cool components

00:25:56,900 --> 00:26:01,700
like a frame orbit controls you have

00:25:59,900 --> 00:26:04,520
people that are building environment

00:26:01,700 --> 00:26:06,290
presets for you so you can just import

00:26:04,520 --> 00:26:08,570
them and say I would like to use this

00:26:06,290 --> 00:26:12,910
preset and then afterwards you can

00:26:08,570 --> 00:26:17,390
always use animation of each attributes

00:26:12,910 --> 00:26:20,090
to to change your scene the way you want

00:26:17,390 --> 00:26:22,370
and you can if you don't like HTML you

00:26:20,090 --> 00:26:26,120
can do that with JavaScript so you can

00:26:22,370 --> 00:26:29,320
just edit edit your HTML attributes

00:26:26,120 --> 00:26:31,940
programmatically to make them animate

00:26:29,320 --> 00:26:33,590
and this is how you're going to use the

00:26:31,940 --> 00:26:37,520
a frame components that are made by

00:26:33,590 --> 00:26:40,910
external parties for example if you can

00:26:37,520 --> 00:26:43,730
load a 3d i/o furniture of your choice

00:26:40,910 --> 00:26:46,010
you can position it because position

00:26:43,730 --> 00:26:50,600
attributes are just generally used for

00:26:46,010 --> 00:26:53,630
each object and you can you can have

00:26:50,600 --> 00:26:57,020
your camera rotating around that object

00:26:53,630 --> 00:27:00,770
and you had this really nice background

00:26:57,020 --> 00:27:03,770
that you loved so much and you just want

00:27:00,770 --> 00:27:08,660
to lay in that bed and with the VR

00:27:03,770 --> 00:27:10,160
headset yeah so this I think it's really

00:27:08,660 --> 00:27:12,980
cool and you should definitely try it

00:27:10,160 --> 00:27:15,970
out because there is so many amazing

00:27:12,980 --> 00:27:18,320
things that people are doing with this I

00:27:15,970 --> 00:27:20,330
would like to share with you like a few

00:27:18,320 --> 00:27:22,640
tips and tricks this would just be a

00:27:20,330 --> 00:27:25,850
talk on its own but this is what I have

00:27:22,640 --> 00:27:26,060
been asked most of the times again how

00:27:25,850 --> 00:27:28,850
do

00:27:26,060 --> 00:27:32,090
get my 3d content should I go now and

00:27:28,850 --> 00:27:33,830
start to learn blender because that's a

00:27:32,090 --> 00:27:36,050
pretty frustrating tool to learn

00:27:33,830 --> 00:27:38,990
I know it's I've worked a lot with

00:27:36,050 --> 00:27:41,450
blender but it's pretty powerful however

00:27:38,990 --> 00:27:43,790
you don't have to do that because some

00:27:41,450 --> 00:27:44,900
people like my coworker Thomas I'm

00:27:43,790 --> 00:27:47,540
writing

00:27:44,900 --> 00:27:49,220
inspector plugin for a-frame so a-frame

00:27:47,540 --> 00:27:51,530
has a 3d inspector where you can

00:27:49,220 --> 00:27:53,840
manipulate your scene drag around things

00:27:51,530 --> 00:27:57,380
try out your values that you then can

00:27:53,840 --> 00:28:00,170
pour it into your HTML file and you can

00:27:57,380 --> 00:28:04,130
use this inspector plug-in to get models

00:28:00,170 --> 00:28:04,970
from for example Google blocks I just

00:28:04,130 --> 00:28:08,870
try it out

00:28:04,970 --> 00:28:11,990
scale the models have fun with it then

00:28:08,870 --> 00:28:15,440
lightning not lightning why do I always

00:28:11,990 --> 00:28:19,730
say lightning lightning it's gonna make

00:28:15,440 --> 00:28:22,040
or break your scene so I think it makes

00:28:19,730 --> 00:28:25,730
a really big difference and if you're

00:28:22,040 --> 00:28:29,140
interested in this I have hi motivations

00:28:25,730 --> 00:28:32,210
to write blog posts about this topic and

00:28:29,140 --> 00:28:35,000
then for the end is content optimization

00:28:32,210 --> 00:28:39,860
we are people that work mostly with the

00:28:35,000 --> 00:28:42,310
web and with different devices so if you

00:28:39,860 --> 00:28:45,680
start working with 3d for a project

00:28:42,310 --> 00:28:49,550
think about what is your target group if

00:28:45,680 --> 00:28:52,190
you want to use 3d on different devices

00:28:49,550 --> 00:28:55,010
at the same time keep in mind that you

00:28:52,190 --> 00:28:57,230
might want to design it differently for

00:28:55,010 --> 00:28:59,990
whatever you want to do if you want to

00:28:57,230 --> 00:29:03,560
do a fast-paced game then you have to

00:28:59,990 --> 00:29:06,950
maybe not be so detailed but if you want

00:29:03,560 --> 00:29:09,980
to do product like you want to have a 3d

00:29:06,950 --> 00:29:13,180
scene of your product to try to sell you

00:29:09,980 --> 00:29:16,520
might want to be more detailed on that

00:29:13,180 --> 00:29:19,340
so you should be thinking about loading

00:29:16,520 --> 00:29:21,440
your assets progressively that means you

00:29:19,340 --> 00:29:23,990
could have your textures in different

00:29:21,440 --> 00:29:27,760
sizes or different formats depending on

00:29:23,990 --> 00:29:31,070
what your device is capable of doing and

00:29:27,760 --> 00:29:32,930
you should design for level of detail if

00:29:31,070 --> 00:29:35,690
there's an object in your scene that

00:29:32,930 --> 00:29:39,720
you're only gonna see two pixels don't

00:29:35,690 --> 00:29:42,970
make it have a million polygons please

00:29:39,720 --> 00:29:46,480
and these are all the lessons that we

00:29:42,970 --> 00:29:49,720
have for free from game development also

00:29:46,480 --> 00:29:54,000
one other lesson that we are actually

00:29:49,720 --> 00:29:58,390
doing or that I was working on is we do

00:29:54,000 --> 00:30:02,890
use ray tracing for calculating light

00:29:58,390 --> 00:30:05,410
simulation for static scenery so the

00:30:02,890 --> 00:30:09,010
parts of our scenes that are static we

00:30:05,410 --> 00:30:09,760
use a ray tracing engine to calculate in

00:30:09,010 --> 00:30:12,670
the clouds

00:30:09,760 --> 00:30:15,250
what is our realistic light and then we

00:30:12,670 --> 00:30:17,500
put it back into the rasterize ation

00:30:15,250 --> 00:30:22,000
with the real-time stuff so this is also

00:30:17,500 --> 00:30:25,270
really cool workarounds so one two

00:30:22,000 --> 00:30:30,070
takeaways and then I'm done models

00:30:25,270 --> 00:30:31,720
materials and lights do matter and this

00:30:30,070 --> 00:30:35,650
one is mostly for myself

00:30:31,720 --> 00:30:37,980
I love ray tracing it's really cool but

00:30:35,650 --> 00:30:40,420
are we ever gonna have it real time

00:30:37,980 --> 00:30:44,260
Nvidia is having really cool demos on

00:30:40,420 --> 00:30:47,200
this but it's still a question that is

00:30:44,260 --> 00:30:51,420
unanswered thank you very much for

00:30:47,200 --> 00:30:51,420
listening if there's any questions

00:30:51,690 --> 00:30:59,110
please ask me any time and this is

00:30:56,500 --> 00:31:02,370
started so scratchy pixel is amazing

00:30:59,110 --> 00:31:04,660
resources for any computer graphics

00:31:02,370 --> 00:31:07,090
pioneers that would like to get started

00:31:04,660 --> 00:31:09,700
and really try to engine-out themselves

00:31:07,090 --> 00:31:11,140
a frame is the tool that I have been

00:31:09,700 --> 00:31:13,960
showing you if you just want to play

00:31:11,140 --> 00:31:15,700
around and 3d i/o is what we are working

00:31:13,960 --> 00:31:16,090
with to provide you with the models you

00:31:15,700 --> 00:31:21,060
need

00:31:16,090 --> 00:31:21,060

YouTube URL: https://www.youtube.com/watch?v=s9-BqS32cF8


