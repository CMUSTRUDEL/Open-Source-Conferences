Title: Dominik Kundel: XSS, CSRF, CSP, JWT, WTF? IDK ¯\_(ツ)_ ¯ | JSConf Iceland 2018
Publication date: 2018-04-06
Playlist: JSConf Iceland 2018
Description: 
	https://2018.jsconf.is/speakers/dominik-kundel/

Robert'); DROP TABLE Students;-- The little Bobby Tables is embodying the classical fear of SQL injections when building web applications.

However, SQL injections are just one aspect of things we need to worry about when building web applications. With the recent popularity of Angular, React and other Single Page Application frameworks we got more logic executing on the front-end create new problems and make you forget about others.

In this talk you will learn about XSS, CSRF, CORS, JWT, HTTPS, SPAs, REST APIs and other weird abbreviations, how to protect yourself and your users from the new generation of Bobby Tables.
Captions: 
	00:00:02,540 --> 00:00:06,839
all right welcome everyone oh there's

00:00:05,279 --> 00:00:09,630
this mic on can you hear me

00:00:06,839 --> 00:00:11,550
Samsung awesome so welcome everyone

00:00:09,630 --> 00:00:14,130
thanks for joining my talk I think it's

00:00:11,550 --> 00:00:15,240
the most click Beatty title I'm not

00:00:14,130 --> 00:00:17,460
gonna read all of these abbreviations

00:00:15,240 --> 00:00:21,990
because that already weighs half at the

00:00:17,460 --> 00:00:23,340
time but instead I would like to give

00:00:21,990 --> 00:00:25,920
you in the next 30 minutes a quick

00:00:23,340 --> 00:00:28,410
introduction to web security and this is

00:00:25,920 --> 00:00:30,449
not gonna be making you all web security

00:00:28,410 --> 00:00:32,520
experts but one thing that I want to

00:00:30,449 --> 00:00:34,230
make sure is that all of the topics that

00:00:32,520 --> 00:00:35,790
I highlight our topics that I think

00:00:34,230 --> 00:00:37,800
every web developer should be aware of

00:00:35,790 --> 00:00:40,050
whenever they build an application and

00:00:37,800 --> 00:00:41,489
hopefully by the end of the talk all of

00:00:40,050 --> 00:00:44,340
these abbreviations will make a bit more

00:00:41,489 --> 00:00:46,140
sense to you but before we start I would

00:00:44,340 --> 00:00:47,309
like to quickly introduce myself as

00:00:46,140 --> 00:00:49,460
mentioned before I'm a developer

00:00:47,309 --> 00:00:52,800
evangelist for a company called Twilio

00:00:49,460 --> 00:00:54,480
we do things like api's to send and

00:00:52,800 --> 00:00:56,640
receive text messages and other things

00:00:54,480 --> 00:00:58,109
around communications and I live in

00:00:56,640 --> 00:00:59,879
Berlin but there's one more thing that

00:00:58,109 --> 00:01:01,260
you should know about me and that's the

00:00:59,879 --> 00:01:04,100
beautiful part where I can drop this

00:01:01,260 --> 00:01:08,090
jacket because it's getting really warm

00:01:04,100 --> 00:01:10,590
and this is where the talk gets awkward

00:01:08,090 --> 00:01:13,140
all right so I'm a member of a group

00:01:10,590 --> 00:01:15,570
called one zjs we're a group of onesie

00:01:13,140 --> 00:01:17,400
loving JavaScript developers that love

00:01:15,570 --> 00:01:17,909
to go to conferences and care about the

00:01:17,400 --> 00:01:19,799
community

00:01:17,909 --> 00:01:21,119
I think fluckey is somewhere here which

00:01:19,799 --> 00:01:24,450
is the unicorn that is running around

00:01:21,119 --> 00:01:26,610
I'm not sure if I see him right now but

00:01:24,450 --> 00:01:28,020
you know like today we have so many

00:01:26,610 --> 00:01:30,409
social networks and communication

00:01:28,020 --> 00:01:32,670
channels but there isn't really one for

00:01:30,409 --> 00:01:34,110
onesie loving developers so being a

00:01:32,670 --> 00:01:35,460
developer myself I did what every

00:01:34,110 --> 00:01:37,650
developer does when they're frustrated

00:01:35,460 --> 00:01:40,740
about something not existing and I built

00:01:37,650 --> 00:01:43,049
the future great social network called

00:01:40,740 --> 00:01:45,720
onesie live which is for onesie loving

00:01:43,049 --> 00:01:48,240
developers so social network which I'm

00:01:45,720 --> 00:01:49,770
fairly certain will take off I'm not

00:01:48,240 --> 00:01:53,009
sure why I don't have high traffic yet

00:01:49,770 --> 00:01:54,930
but it will come and you know like being

00:01:53,009 --> 00:01:58,290
a developer I obviously made sure that

00:01:54,930 --> 00:01:59,579
this is as secure as possible and it

00:01:58,290 --> 00:02:01,110
doesn't have any vulnerabilities

00:01:59,579 --> 00:02:04,860
especially nothing that can be hacked

00:02:01,110 --> 00:02:08,550
with a banana so you know I thought of

00:02:04,860 --> 00:02:09,869
everything it uses HTTPS and things to

00:02:08,550 --> 00:02:13,800
let's encrypt I don't have to pay a dime

00:02:09,869 --> 00:02:15,990
for that it uses HSCs which is the HTTPS

00:02:13,800 --> 00:02:18,090
transport security which just makes sure

00:02:15,990 --> 00:02:19,800
that there's no downgrading of the

00:02:18,090 --> 00:02:21,960
traffic so this is typically what blocks

00:02:19,800 --> 00:02:24,090
you from going to google.com when

00:02:21,960 --> 00:02:25,740
there's a public Wi-Fi with a captive

00:02:24,090 --> 00:02:27,720
portal because they're trying to

00:02:25,740 --> 00:02:31,770
downgrade the connection typically from

00:02:27,720 --> 00:02:35,520
HTTP to HTTPS and you know I don't allow

00:02:31,770 --> 00:02:38,880
mixed content so no HTTP content on a

00:02:35,520 --> 00:02:42,270
website that is served by HTTPS no

00:02:38,880 --> 00:02:44,610
senator I sanitize the HTML so I allow

00:02:42,270 --> 00:02:46,050
people to put a mark down but I'll make

00:02:44,610 --> 00:02:47,550
sure to send out I said before I put it

00:02:46,050 --> 00:02:49,410
in the page and there's no room for

00:02:47,550 --> 00:02:53,580
sequel injections because I'm not really

00:02:49,410 --> 00:02:56,520
using a real database so there's no no

00:02:53,580 --> 00:02:58,830
way Trav's database injections and i'm

00:02:56,520 --> 00:03:01,260
not talking about no sequel databases

00:02:58,830 --> 00:03:02,490
because there are no sequel injections

00:03:01,260 --> 00:03:03,930
but I'm literally just using a plain

00:03:02,490 --> 00:03:08,370
storage because I don't believe this

00:03:03,930 --> 00:03:10,380
will scale but turns out that developing

00:03:08,370 --> 00:03:12,690
secure web applications isn't as easy as

00:03:10,380 --> 00:03:15,330
I thought so I contacted my buddy Bob

00:03:12,690 --> 00:03:17,550
Ellison and he took us and you took a

00:03:15,330 --> 00:03:19,200
stab at the at the application and kind

00:03:17,550 --> 00:03:20,670
of try and figure it out a bunch of

00:03:19,200 --> 00:03:22,230
security vulnerabilities that would like

00:03:20,670 --> 00:03:23,880
to share with you today and this is

00:03:22,230 --> 00:03:27,930
where this hood gets really warm so I'm

00:03:23,880 --> 00:03:33,120
gonna take this off all right so if we

00:03:27,930 --> 00:03:35,580
go to this page this is basically the

00:03:33,120 --> 00:03:38,010
login dialog and I'm gonna open the dev

00:03:35,580 --> 00:03:40,190
tools here so we can want to char the

00:03:38,010 --> 00:03:42,950
thing and basically what I'm doing

00:03:40,190 --> 00:03:45,060
typing in my super secure password here

00:03:42,950 --> 00:03:47,580
and it will just do a normal post

00:03:45,060 --> 00:03:50,310
request and afterwards I'll send and set

00:03:47,580 --> 00:03:51,780
an HTTP cookie to maintain the session

00:03:50,310 --> 00:03:54,300
so if you're not familiar with cookies

00:03:51,780 --> 00:03:56,580
it's just a way that allows you to

00:03:54,300 --> 00:03:58,110
maintain session state throughout

00:03:56,580 --> 00:04:01,230
multiple say throughout multiple

00:03:58,110 --> 00:04:04,800
sessions by setting a value either by

00:04:01,230 --> 00:04:06,420
HTTP headers or via JavaScript so if we

00:04:04,800 --> 00:04:10,950
go into the console here we can actually

00:04:06,420 --> 00:04:16,140
access that and so I have one that is

00:04:10,950 --> 00:04:19,410
called auth token and this is what is

00:04:16,140 --> 00:04:22,049
called a JWT or jots or JSON web token

00:04:19,410 --> 00:04:24,450
and they're formatted in a very

00:04:22,049 --> 00:04:25,919
particular way so if we inspect this we

00:04:24,450 --> 00:04:26,710
can see it has three different parts it

00:04:25,919 --> 00:04:28,720
has a header

00:04:26,710 --> 00:04:30,759
which is the RET part it has a purple

00:04:28,720 --> 00:04:33,850
part which is like the payload and then

00:04:30,759 --> 00:04:36,160
it has a signature so that's generated

00:04:33,850 --> 00:04:38,710
by an algorithm that is specified in the

00:04:36,160 --> 00:04:40,389
header using a secret and if we look

00:04:38,710 --> 00:04:41,919
here it actually says invalid signature

00:04:40,389 --> 00:04:46,030
because I was smart enough to not use

00:04:41,919 --> 00:04:47,560
secret as my secret but unfortunately

00:04:46,030 --> 00:04:50,440
there is a vulnerability in my app

00:04:47,560 --> 00:04:51,970
around this that we can exploit and that

00:04:50,440 --> 00:04:53,710
is because there are different

00:04:51,970 --> 00:04:55,810
algorithms that you can use to sign your

00:04:53,710 --> 00:04:58,389
jots and one of them that is mandatory

00:04:55,810 --> 00:04:59,919
in the spec is none

00:04:58,389 --> 00:05:02,199
and what nan basically says is that

00:04:59,919 --> 00:05:03,789
disregard the signature we don't care

00:05:02,199 --> 00:05:05,710
about it and this is more for like

00:05:03,789 --> 00:05:09,190
transmitting data than like maintaining

00:05:05,710 --> 00:05:10,960
session or something but the problem is

00:05:09,190 --> 00:05:14,320
if we do this and let's have some fun we

00:05:10,960 --> 00:05:17,320
switch the role here to admin and then I

00:05:14,320 --> 00:05:19,509
copy this part and this is just basic C

00:05:17,320 --> 00:05:22,090
important base64 encoded right so this

00:05:19,509 --> 00:05:26,110
is plain data don't think this is secure

00:05:22,090 --> 00:05:31,900
or something and I will set this as an

00:05:26,110 --> 00:05:33,940
auth token then we will we can refresh

00:05:31,900 --> 00:05:37,599
the page and we'll see that we're now in

00:05:33,940 --> 00:05:39,849
admin mode and that is because I'm

00:05:37,599 --> 00:05:41,979
taking the job as a single source of

00:05:39,849 --> 00:05:43,510
truth so if it says role admin I'm an

00:05:41,979 --> 00:05:47,080
admin you know I'm not looking to suffer

00:05:43,510 --> 00:05:48,430
anything and because of that in

00:05:47,080 --> 00:05:51,639
combination with the algorithm that is

00:05:48,430 --> 00:05:53,260
none we can have just switch anything

00:05:51,639 --> 00:05:54,340
and I wouldn't have had to login in the

00:05:53,260 --> 00:05:56,409
first place I could have just generated

00:05:54,340 --> 00:05:59,409
this token with any username and sign in

00:05:56,409 --> 00:06:01,449
as anyone so how can we how can we

00:05:59,409 --> 00:06:02,860
protect ourselves from that so the first

00:06:01,449 --> 00:06:04,870
thing is as I mentioned you can set

00:06:02,860 --> 00:06:08,050
cookies either by a JavaScript or via

00:06:04,870 --> 00:06:10,060
HTTP headers and you can declare cookies

00:06:08,050 --> 00:06:12,070
as HTTP only and that means that you

00:06:10,060 --> 00:06:13,659
can't access these by a JavaScript they

00:06:12,070 --> 00:06:15,940
will still be send around by the browser

00:06:13,659 --> 00:06:17,860
but you won't be able to access them in

00:06:15,940 --> 00:06:19,240
JavaScript manipulate them additionally

00:06:17,860 --> 00:06:20,860
I should have said this as a signed

00:06:19,240 --> 00:06:23,199
cookie meaning I won't be able to

00:06:20,860 --> 00:06:25,570
manipulate this anyways without knowing

00:06:23,199 --> 00:06:28,060
this the token that was used to sign the

00:06:25,570 --> 00:06:31,180
cookie and it's secure so this is only

00:06:28,060 --> 00:06:32,409
transferred by a secure connection but

00:06:31,180 --> 00:06:36,400
there's another thing I should have done

00:06:32,409 --> 00:06:39,159
and that evolves around jars of cells so

00:06:36,400 --> 00:06:39,639
I'm using the JSON web token library on

00:06:39,159 --> 00:06:42,219
node

00:06:39,639 --> 00:06:44,020
but I'm using an old version and that

00:06:42,219 --> 00:06:47,409
one has to floss that the newer one

00:06:44,020 --> 00:06:49,150
fixes and that is on the one hand the

00:06:47,409 --> 00:06:51,879
library should provide you with a way to

00:06:49,150 --> 00:06:54,849
whitelist algorithms so in this case I

00:06:51,879 --> 00:06:58,360
am in the secure version of this I'm

00:06:54,849 --> 00:07:02,020
saying that I only allow HS 256 tokens

00:06:58,360 --> 00:07:04,810
versus nothing else and then the other

00:07:02,020 --> 00:07:06,879
thing is in this library for example if

00:07:04,810 --> 00:07:09,219
the secret is set to something that is

00:07:06,879 --> 00:07:11,919
not null the library will actually not

00:07:09,219 --> 00:07:14,259
accept none as an algorithm but that's

00:07:11,919 --> 00:07:16,569
only in the newer libraries so the

00:07:14,259 --> 00:07:18,069
bottom line here stay up to date because

00:07:16,569 --> 00:07:19,419
you don't want to be the next Equifax

00:07:18,069 --> 00:07:21,610
because that's pretty much what happened

00:07:19,419 --> 00:07:23,529
to them not about jots but about having

00:07:21,610 --> 00:07:25,689
an older version of an implementation

00:07:23,529 --> 00:07:27,879
that was known to be vulnerable and I'm

00:07:25,689 --> 00:07:29,279
not getting around to update it so you

00:07:27,879 --> 00:07:33,490
don't want to be in the news for that

00:07:29,279 --> 00:07:36,159
and this is a social network so we can

00:07:33,490 --> 00:07:37,689
post stuff so let's jump back here and

00:07:36,159 --> 00:07:39,129
actually post something and I said this

00:07:37,689 --> 00:07:45,400
was marked so we can write something

00:07:39,129 --> 00:07:50,289
like hi just cough Iceland and if we

00:07:45,400 --> 00:07:54,659
post this and we look at the traffic we

00:07:50,289 --> 00:07:54,659
will see that if I make this bigger

00:07:54,689 --> 00:08:00,699
there's an HTTP POST request here that

00:07:58,149 --> 00:08:04,120
actually sets the sense the auth token

00:08:00,699 --> 00:08:06,939
along and just sense of form data here

00:08:04,120 --> 00:08:08,229
in the bottom so the this is nice

00:08:06,939 --> 00:08:10,000
because it's really easy to implement

00:08:08,229 --> 00:08:14,849
I'm literally just submitting a form

00:08:10,000 --> 00:08:18,039
asynchronously but the combination of

00:08:14,849 --> 00:08:19,839
form and cookies is also something that

00:08:18,039 --> 00:08:22,629
can cause a cross-site request forgery

00:08:19,839 --> 00:08:23,979
attack by attackers so to give you an

00:08:22,629 --> 00:08:24,639
idea how this works and what this

00:08:23,979 --> 00:08:28,960
actually is

00:08:24,639 --> 00:08:32,589
so this is pronounced access access so

00:08:28,960 --> 00:08:35,320
sometimes it's written as xsrf or a CSRF

00:08:32,589 --> 00:08:37,930
but typically it's pronounced c surf so

00:08:35,320 --> 00:08:40,419
if we perform a c Serfaty here it says

00:08:37,930 --> 00:08:42,430
you got pwned and if we get back to the

00:08:40,419 --> 00:08:44,320
page and we refresh here we see that

00:08:42,430 --> 00:08:47,500
actually the attacker was able to post

00:08:44,320 --> 00:08:49,390
on my behalf on the page and the reason

00:08:47,500 --> 00:08:51,130
why this works is that the browser is

00:08:49,390 --> 00:08:53,200
super eager to send all these cookies

00:08:51,130 --> 00:08:54,730
along on every

00:08:53,200 --> 00:08:58,000
and if we look at the code that actually

00:08:54,730 --> 00:09:01,090
hacked us here all it does is it on

00:08:58,000 --> 00:09:02,590
bodies body unload it will submit the

00:09:01,090 --> 00:09:03,940
form that we have there in this case

00:09:02,590 --> 00:09:06,490
it's visible but this could have been

00:09:03,940 --> 00:09:07,990
also just hidden and inside there

00:09:06,490 --> 00:09:09,640
there's an input tag with a message we

00:09:07,990 --> 00:09:13,060
want to send again this could be hidden

00:09:09,640 --> 00:09:15,670
it doesn't have to be visible and then

00:09:13,060 --> 00:09:17,350
this just submits so and this is really

00:09:15,670 --> 00:09:19,660
the danger about this because there

00:09:17,350 --> 00:09:21,490
because the browser is super eager to

00:09:19,660 --> 00:09:24,400
send this so let's talk about how we can

00:09:21,490 --> 00:09:26,890
fix this so let me find my slides again

00:09:24,400 --> 00:09:29,560
all right so apparently I was hacked

00:09:26,890 --> 00:09:32,020
twice by this application so it's

00:09:29,560 --> 00:09:35,830
navigate back first and talk about what

00:09:32,020 --> 00:09:38,590
happened here so when I clicked on the

00:09:35,830 --> 00:09:41,410
link here I'm using a target blank link

00:09:38,590 --> 00:09:44,350
here and what this causes is that the

00:09:41,410 --> 00:09:46,990
attackers page can actually access my

00:09:44,350 --> 00:09:49,540
page window by using windows open or

00:09:46,990 --> 00:09:52,270
that location and rewrite that location

00:09:49,540 --> 00:09:54,820
so in my case I was just the attacker

00:09:52,270 --> 00:09:57,340
page was just navigating me to another

00:09:54,820 --> 00:10:00,040
harmless page but this could just as

00:09:57,340 --> 00:10:02,410
well be a redirection for example to a

00:10:00,040 --> 00:10:04,000
phishing page it looks like your page so

00:10:02,410 --> 00:10:06,160
imagine you you have something like a

00:10:04,000 --> 00:10:07,510
social media page where someone can post

00:10:06,160 --> 00:10:09,880
a link and you always market it with

00:10:07,510 --> 00:10:13,060
target blank then someone someone could

00:10:09,880 --> 00:10:16,360
put in a page page link that redirects

00:10:13,060 --> 00:10:18,970
that original browser to to a phishing

00:10:16,360 --> 00:10:20,440
page luckily protecting yourself from

00:10:18,970 --> 00:10:23,770
that as I said pretty straightforward

00:10:20,440 --> 00:10:26,620
you want to use the rel attribute and

00:10:23,770 --> 00:10:29,650
set it to no opener no refer no opener

00:10:26,620 --> 00:10:31,810
basically declares that you don't want

00:10:29,650 --> 00:10:34,420
to provide access to windows opener and

00:10:31,810 --> 00:10:36,700
then there is no refer which because

00:10:34,420 --> 00:10:39,370
some browsers don't support no opener

00:10:36,700 --> 00:10:41,290
namely ie and I'm not sure if the newest

00:10:39,370 --> 00:10:43,870
version of edge supports no opener but

00:10:41,290 --> 00:10:45,730
older versions don't you want to use no

00:10:43,870 --> 00:10:47,860
refer as well which at least will hide

00:10:45,730 --> 00:10:49,360
the refer URL so we can protect

00:10:47,860 --> 00:10:52,630
ourselves from that plus there are some

00:10:49,360 --> 00:10:55,000
JavaScript scripts that can you that

00:10:52,630 --> 00:10:58,300
allow you to have circumvent this as

00:10:55,000 --> 00:11:01,030
well to get back to the sea surface acts

00:10:58,300 --> 00:11:03,400
the approach here is relatively

00:11:01,030 --> 00:11:05,740
straightforward as well you can use a

00:11:03,400 --> 00:11:06,970
library like C surf or just implement

00:11:05,740 --> 00:11:09,009
this yourself but the

00:11:06,970 --> 00:11:12,189
basic idea is that you will generate a

00:11:09,009 --> 00:11:15,279
new cookie called underscore Caesar for

00:11:12,189 --> 00:11:17,620
example where you specify a random token

00:11:15,279 --> 00:11:19,420
and then you passes token once as a

00:11:17,620 --> 00:11:21,610
cookie but you also embed it into the

00:11:19,420 --> 00:11:24,610
page that is supposed to have this for

00:11:21,610 --> 00:11:27,459
example form submission into for example

00:11:24,610 --> 00:11:30,399
in in hidden input field and then when

00:11:27,459 --> 00:11:33,759
you submit the post request in this case

00:11:30,399 --> 00:11:36,250
you will check if the value in the

00:11:33,759 --> 00:11:38,170
cookie equals the same value that is

00:11:36,250 --> 00:11:40,629
either passed in the request body in the

00:11:38,170 --> 00:11:44,920
request query parameters or in one of

00:11:40,629 --> 00:11:46,300
the headers like the ones in the example

00:11:44,920 --> 00:11:48,370
which are the ones that the see serve

00:11:46,300 --> 00:11:51,790
library checks for and if that's the

00:11:48,370 --> 00:11:53,649
case then that works and like your you

00:11:51,790 --> 00:11:55,120
successfully submitted something if this

00:11:53,649 --> 00:11:56,769
isn't the case it's likely someone who

00:11:55,120 --> 00:11:59,350
performs a sea-surface against you

00:11:56,769 --> 00:12:01,540
because they will be able to submit that

00:11:59,350 --> 00:12:03,310
cookie but they're not able to read that

00:12:01,540 --> 00:12:05,920
cookie since the browser auto submits

00:12:03,310 --> 00:12:08,399
this meaning that they will not be able

00:12:05,920 --> 00:12:11,050
to pass this as a header additionally

00:12:08,399 --> 00:12:12,430
all right let's talk about little bobby

00:12:11,050 --> 00:12:16,089
tables younger brother which I call

00:12:12,430 --> 00:12:18,160
Sammy and the reason is to first give

00:12:16,089 --> 00:12:19,809
you back a background about little Bobby

00:12:18,160 --> 00:12:23,589
tables if you're not familiar with that

00:12:19,809 --> 00:12:26,199
it comes from this xkcd comic which is a

00:12:23,589 --> 00:12:27,910
joke about sequel injections by a family

00:12:26,199 --> 00:12:31,360
of hackers who named their kid like a

00:12:27,910 --> 00:12:32,680
sequel injection and and the principal

00:12:31,360 --> 00:12:34,000
being mad because they lost all of their

00:12:32,680 --> 00:12:38,860
student records because they weren't

00:12:34,000 --> 00:12:40,930
sanitizing the input now to get to

00:12:38,860 --> 00:12:43,389
access isotype does anyone know what

00:12:40,930 --> 00:12:44,709
this source code is from I would be

00:12:43,389 --> 00:12:47,379
really impressed if you someone knows

00:12:44,709 --> 00:12:49,899
this behind so this is the myspace worm

00:12:47,379 --> 00:12:52,059
or Sammy worm some of you might be

00:12:49,899 --> 00:12:54,009
familiar with this for those who are not

00:12:52,059 --> 00:12:57,430
familiar with this this was an XSS

00:12:54,009 --> 00:13:00,819
attack from 2005 on myspace which would

00:12:57,430 --> 00:13:02,980
basically repost this code at Sammy as

00:13:00,819 --> 00:13:06,279
your friend and post that Sammy is

00:13:02,980 --> 00:13:09,040
awesome that's also how they caught him

00:13:06,279 --> 00:13:10,899
because if like if your access code

00:13:09,040 --> 00:13:12,100
points at your myspace profile that's

00:13:10,899 --> 00:13:14,050
not a smart idea

00:13:12,100 --> 00:13:17,050
maybe now because myspace isn't much of

00:13:14,050 --> 00:13:19,059
a thing anymore but especially at that

00:13:17,050 --> 00:13:20,500
time that wasn't a smart idea but the

00:13:19,059 --> 00:13:22,420
cool thing about the

00:13:20,500 --> 00:13:25,360
attack as it shows a couple of things

00:13:22,420 --> 00:13:28,270
that people use to circumvent XSS

00:13:25,360 --> 00:13:31,360
protection because myspace actually had

00:13:28,270 --> 00:13:33,040
XSS protection and yet that wasn't

00:13:31,360 --> 00:13:34,990
enough because one thing that they said

00:13:33,040 --> 00:13:37,810
is they don't have our script tags they

00:13:34,990 --> 00:13:39,460
didn't allow the script Collin in in

00:13:37,810 --> 00:13:42,640
your else and stuff but they did allow

00:13:39,460 --> 00:13:44,860
CS inline CSS so Sammy just created a

00:13:42,640 --> 00:13:46,630
div tag that has a style in it that used

00:13:44,860 --> 00:13:48,340
background URL and then put JavaScript

00:13:46,630 --> 00:13:50,710
in there and because he wasn't allowed

00:13:48,340 --> 00:13:53,230
to use quotes in there he basically took

00:13:50,710 --> 00:13:55,570
all his code wrapped it into an eval and

00:13:53,230 --> 00:13:58,480
put the code itself into another HTTP

00:13:55,570 --> 00:14:00,760
and to another HTML attribute and that

00:13:58,480 --> 00:14:02,530
would then just be evaluated now the

00:14:00,760 --> 00:14:05,170
other thing is they blacklisted words

00:14:02,530 --> 00:14:08,560
like inner HTML or onreadystatechange

00:14:05,170 --> 00:14:10,960
which is something that is used by xml

00:14:08,560 --> 00:14:14,530
httprequest so Ajax requests before

00:14:10,960 --> 00:14:16,060
there was fetch but what Sammy just did

00:14:14,530 --> 00:14:19,180
is he just turned this into strings

00:14:16,060 --> 00:14:20,770
split them by a plus and then also

00:14:19,180 --> 00:14:22,900
basically recon catenate at them and

00:14:20,770 --> 00:14:24,850
eval the whole thing which equals to the

00:14:22,900 --> 00:14:27,970
same code but it's harder to reg acts

00:14:24,850 --> 00:14:29,410
against that and then there's the other

00:14:27,970 --> 00:14:31,330
thing because if you say that like well

00:14:29,410 --> 00:14:33,700
I could block eval and then that's fine

00:14:31,330 --> 00:14:36,430
there were all ways to evaluate code the

00:14:33,700 --> 00:14:37,960
last one is from a project that I'm not

00:14:36,430 --> 00:14:40,420
sure if I can name the name because I'm

00:14:37,960 --> 00:14:42,610
not sure if it violates a code of

00:14:40,420 --> 00:14:45,070
conduct but talk to Martin clapper over

00:14:42,610 --> 00:14:46,540
there and he can probably tell you the

00:14:45,070 --> 00:14:49,180
name oh I can tell you the name

00:14:46,540 --> 00:14:50,860
afterwards but basically the bottom line

00:14:49,180 --> 00:14:52,840
here is there are a bunch of ways to

00:14:50,860 --> 00:14:56,020
write the same code in JavaScript so you

00:14:52,840 --> 00:14:57,700
can't just block like a single word or

00:14:56,020 --> 00:15:01,120
like blacklist certain words because

00:14:57,700 --> 00:15:02,830
that doesn't help you so blocking XSL is

00:15:01,120 --> 00:15:04,530
not exercise is not trivial and

00:15:02,830 --> 00:15:08,050
obviously have a demo for that as well

00:15:04,530 --> 00:15:10,030
and so I told you I'm using marks down

00:15:08,050 --> 00:15:13,060
here and I'm using a library called

00:15:10,030 --> 00:15:15,100
marked and if you're not on the latest

00:15:13,060 --> 00:15:17,950
version but like a few versions back so

00:15:15,100 --> 00:15:19,570
not really old even though it has a

00:15:17,950 --> 00:15:23,020
function that allows you to sanitize

00:15:19,570 --> 00:15:27,280
stuff so we can do stuff like alert 1

00:15:23,020 --> 00:15:30,790
and this will not work there is a

00:15:27,280 --> 00:15:32,910
security vulnerability in here so we can

00:15:30,790 --> 00:15:35,000
create links right

00:15:32,910 --> 00:15:38,640
and I can do something like click me and

00:15:35,000 --> 00:15:45,750
in here if we would write JavaScript :

00:15:38,640 --> 00:15:47,340
alert hello JS conf then copy this this

00:15:45,750 --> 00:15:49,680
doesn't work directly because the

00:15:47,340 --> 00:15:51,270
sanitizer is smart enough to do that but

00:15:49,680 --> 00:15:55,410
we can we can play around with this and

00:15:51,270 --> 00:15:58,200
shout out to guy from sneek who actually

00:15:55,410 --> 00:16:01,860
showed this to me let's do some fun

00:15:58,200 --> 00:16:03,600
stuff with encoding so ampersand hash 51

00:16:01,860 --> 00:16:07,200
semicolon is literally the same as a

00:16:03,600 --> 00:16:10,200
closing parenthesis and similarly a

00:16:07,200 --> 00:16:12,540
Colin is M percent hash 50 aint

00:16:10,200 --> 00:16:13,470
semicolon and I'm gonna copy this and if

00:16:12,540 --> 00:16:14,970
we look at this this is already

00:16:13,470 --> 00:16:16,830
difference because some we don't have

00:16:14,970 --> 00:16:18,120
the closing parenthesis anymore so we're

00:16:16,830 --> 00:16:21,060
getting there

00:16:18,120 --> 00:16:24,380
now we can use a sort of quirkiness in

00:16:21,060 --> 00:16:27,600
the browser and actually write this here

00:16:24,380 --> 00:16:30,900
and what this will do let's first try

00:16:27,600 --> 00:16:33,690
this it works and the reason why this

00:16:30,900 --> 00:16:36,270
works is that the browser so so first of

00:16:33,690 --> 00:16:39,150
all the HTML sanitizer will see this and

00:16:36,270 --> 00:16:42,510
doesn't it doesn't see JavaScript : so

00:16:39,150 --> 00:16:44,070
it's like I'm fine with that but the

00:16:42,510 --> 00:16:47,250
browser will see oh you have an

00:16:44,070 --> 00:16:49,080
ampersand a hash your number I think you

00:16:47,250 --> 00:16:53,940
just forgot the semicolon so I'll be a

00:16:49,080 --> 00:16:55,290
good guy and insert this and then

00:16:53,940 --> 00:16:57,180
everything afterwards turns into

00:16:55,290 --> 00:16:58,410
JavaScript so this semicolon is valid

00:16:57,180 --> 00:16:59,910
JavaScript so it doesn't complain about

00:16:58,410 --> 00:17:04,830
that and then we can do anything

00:16:59,910 --> 00:17:06,330
afterwards so we've seen this works and

00:17:04,830 --> 00:17:08,910
the bottom line here is encoding can be

00:17:06,330 --> 00:17:10,830
dangerous don't trust it don't trust any

00:17:08,910 --> 00:17:13,320
code that you user can put in because

00:17:10,830 --> 00:17:14,610
they can just modify it in like

00:17:13,320 --> 00:17:17,730
different ways to kind of get around

00:17:14,610 --> 00:17:19,740
that also CSS don't trust CSS I don't

00:17:17,730 --> 00:17:21,120
have time to dig into that now but don't

00:17:19,740 --> 00:17:22,650
trust it and Jake Archibald actually

00:17:21,120 --> 00:17:25,710
just tweeted about this two days ago

00:17:22,650 --> 00:17:27,060
again with a new blog post um really

00:17:25,710 --> 00:17:29,100
don't trust users there's a bunch of

00:17:27,060 --> 00:17:30,390
stuff you can do with about it and I

00:17:29,100 --> 00:17:32,550
highly recommend you to check out this

00:17:30,390 --> 00:17:36,480
tweet or like the blog post in this

00:17:32,550 --> 00:17:39,420
tweet let's talk about another thing

00:17:36,480 --> 00:17:42,300
and that's Jason P so jason with padding

00:17:39,420 --> 00:17:44,900
it's being used less these days but

00:17:42,300 --> 00:17:46,680
basically it's a way to circumvent

00:17:44,900 --> 00:17:48,870
same-origin policy

00:17:46,680 --> 00:17:51,420
so if you want to request some data from

00:17:48,870 --> 00:17:53,850
a different domain you could do this and

00:17:51,420 --> 00:17:55,320
the way it works is you define a global

00:17:53,850 --> 00:17:57,960
function if you would use something like

00:17:55,320 --> 00:17:59,940
Jason J queries JSONP method it would

00:17:57,960 --> 00:18:01,710
define this for you but it's basically a

00:17:59,940 --> 00:18:05,370
callback function that has to be global

00:18:01,710 --> 00:18:07,290
where you expect the code to let the

00:18:05,370 --> 00:18:11,370
data to be passed in to you and then you

00:18:07,290 --> 00:18:13,800
inject a script tag with that JSONP URL

00:18:11,370 --> 00:18:15,390
and pass in as a callback for example or

00:18:13,800 --> 00:18:18,480
any other parameter depending on the

00:18:15,390 --> 00:18:21,600
endpoint you define the name of the

00:18:18,480 --> 00:18:23,910
function in this page play in this case

00:18:21,600 --> 00:18:25,710
it's called got posts and what what this

00:18:23,910 --> 00:18:28,230
will do is the JSONP endpoint will take

00:18:25,710 --> 00:18:31,320
that name and then wrap the data into a

00:18:28,230 --> 00:18:34,320
function call with that name now if you

00:18:31,320 --> 00:18:36,450
use that but you write poor JSONP and

00:18:34,320 --> 00:18:38,940
combine that with the XSS attack now

00:18:36,450 --> 00:18:42,150
this is getting fun because my JSONP

00:18:38,940 --> 00:18:45,450
endpoint does not verify what I pass and

00:18:42,150 --> 00:18:48,540
as a callback and that means that we can

00:18:45,450 --> 00:18:51,480
I'm in the wrong tab we can generate

00:18:48,540 --> 00:18:54,270
arbitrary JavaScript here and this gets

00:18:51,480 --> 00:18:56,030
really fun I'm gonna first show it to

00:18:54,270 --> 00:18:58,830
you and then explain what's going on so

00:18:56,030 --> 00:19:02,040
this is a bit over the longer code

00:18:58,830 --> 00:19:03,840
snippet so I'm gonna copy this so I'm

00:19:02,040 --> 00:19:06,270
gonna press this and then click this

00:19:03,840 --> 00:19:10,620
button and nothing happens but if i

00:19:06,270 --> 00:19:12,690
refresh the page we get this and I can

00:19:10,620 --> 00:19:15,180
refresh as many times as a1 it will stay

00:19:12,690 --> 00:19:18,060
like this so the reason why this why

00:19:15,180 --> 00:19:20,220
this is happening is if we go to

00:19:18,060 --> 00:19:24,360
application

00:19:20,220 --> 00:19:26,100
I installed a serviceworker and if you

00:19:24,360 --> 00:19:28,800
know if you don't know what service

00:19:26,100 --> 00:19:31,380
workers are there an api from the

00:19:28,800 --> 00:19:34,110
browser that allows you to handle the

00:19:31,380 --> 00:19:36,090
network proxy so that you can it's made

00:19:34,110 --> 00:19:38,310
for things like offline available apps

00:19:36,090 --> 00:19:41,010
so you can cache your website and your

00:19:38,310 --> 00:19:42,180
resources and kind of handle which ones

00:19:41,010 --> 00:19:45,450
you want to cache and which ones you

00:19:42,180 --> 00:19:47,490
don't but it can pretty much do anything

00:19:45,450 --> 00:19:50,130
because it can intercept the network

00:19:47,490 --> 00:19:51,930
requests right now the browsers are

00:19:50,130 --> 00:19:53,700
smart enough to make sure that this can

00:19:51,930 --> 00:19:56,550
only be like a serviceworker can only be

00:19:53,700 --> 00:19:58,260
installed from your domain but if your

00:19:56,550 --> 00:20:00,720
domain has something like a vulnerable

00:19:58,260 --> 00:20:02,669
JSONP implementation that allows you to

00:20:00,720 --> 00:20:05,159
right arbitrary JavaScript code hosted

00:20:02,669 --> 00:20:06,809
on your domain then you have the problem

00:20:05,159 --> 00:20:08,460
like this so we can actually see the

00:20:06,809 --> 00:20:10,110
callback parameter here is really long

00:20:08,460 --> 00:20:12,809
because it's literally the entire

00:20:10,110 --> 00:20:15,240
JavaScript that I wanted to generate and

00:20:12,809 --> 00:20:16,440
if we pretty fly this here we can see

00:20:15,240 --> 00:20:19,919
what's actually happening so I'm

00:20:16,440 --> 00:20:21,630
creating a serviceworker script and then

00:20:19,919 --> 00:20:24,090
every the entire data because I don't

00:20:21,630 --> 00:20:25,830
really care about it just commented and

00:20:24,090 --> 00:20:27,120
in here what we do is we just cover

00:20:25,830 --> 00:20:29,580
apply always with a hacked and the

00:20:27,120 --> 00:20:31,470
script tag injected but this is an

00:20:29,580 --> 00:20:33,480
obvious attack but you could do it in a

00:20:31,470 --> 00:20:36,150
like less obvious way as well right you

00:20:33,480 --> 00:20:37,890
could actually fetch the page inject a

00:20:36,150 --> 00:20:39,390
script tag and then send that to the

00:20:37,890 --> 00:20:41,669
user and the user will not recognize

00:20:39,390 --> 00:20:43,049
this especially not a common user who

00:20:41,669 --> 00:20:45,150
doesn't have the dev tool to open and

00:20:43,049 --> 00:20:48,030
checks with serviceworkers are installed

00:20:45,150 --> 00:20:49,140
I mean how many often did you do let's

00:20:48,030 --> 00:20:51,720
see I think they still have that

00:20:49,140 --> 00:20:53,220
checkbox or something oh it's down here

00:20:51,720 --> 00:20:55,260
so there's a drop-down here called

00:20:53,220 --> 00:20:56,640
search workers from other domains that's

00:20:55,260 --> 00:20:58,320
a lot of fun open that and you will see

00:20:56,640 --> 00:20:59,909
how many people actually install service

00:20:58,320 --> 00:21:01,409
workers but you're not reading that code

00:20:59,909 --> 00:21:04,590
so you have no idea what these service

00:21:01,409 --> 00:21:07,980
workers do so it's sort of a dangerous

00:21:04,590 --> 00:21:10,710
attack that's actually remove this

00:21:07,980 --> 00:21:15,090
because I also forget about it on

00:21:10,710 --> 00:21:16,409
register so if we reload this now this

00:21:15,090 --> 00:21:19,350
works but you obviously don't want to

00:21:16,409 --> 00:21:22,289
explain your customers please go to your

00:21:19,350 --> 00:21:24,150
browser and then click on application in

00:21:22,289 --> 00:21:26,159
the command the dev tools and then click

00:21:24,150 --> 00:21:29,760
on register on this thing called

00:21:26,159 --> 00:21:32,039
serviceworker so far we've seen like

00:21:29,760 --> 00:21:34,200
different XSS attacks and we should fix

00:21:32,039 --> 00:21:36,030
all of these and also all the other

00:21:34,200 --> 00:21:38,400
attacks that we have in there but there

00:21:36,030 --> 00:21:40,799
is a new superhero in town that allows

00:21:38,400 --> 00:21:42,960
you to protect yourself at least against

00:21:40,799 --> 00:21:46,470
some of these and that's called content

00:21:42,960 --> 00:21:48,120
security policy or CSP and I haven't

00:21:46,470 --> 00:21:50,789
demo for that and this is the exact same

00:21:48,120 --> 00:21:53,669
page all that I'm doing is I'm injecting

00:21:50,789 --> 00:21:56,970
an HTTP header and we can see that if I

00:21:53,669 --> 00:21:59,309
click on any of these and refresh

00:21:56,970 --> 00:22:00,570
nothing happens no difference the only

00:21:59,309 --> 00:22:04,380
difference is I'm not showing some

00:22:00,570 --> 00:22:05,789
pictures here and if we open this and go

00:22:04,380 --> 00:22:08,070
to the console we'll see we have a bunch

00:22:05,789 --> 00:22:10,080
of errors and that's because it says

00:22:08,070 --> 00:22:12,929
that it violates the following content

00:22:10,080 --> 00:22:14,940
security policy so what does that

00:22:12,929 --> 00:22:17,190
actually mean

00:22:14,940 --> 00:22:19,680
so I said content security policy it's

00:22:17,190 --> 00:22:21,420
just an HTTP header that you can define

00:22:19,680 --> 00:22:24,120
rules that the browser should play by

00:22:21,420 --> 00:22:26,430
for your resources so this can be things

00:22:24,120 --> 00:22:28,590
like by default anything hosted on my

00:22:26,430 --> 00:22:30,210
domain is fine but for scripts and

00:22:28,590 --> 00:22:31,980
styles I only want to have things that

00:22:30,210 --> 00:22:33,870
have the following neurons and there's

00:22:31,980 --> 00:22:36,660
nonce changes on every request so this

00:22:33,870 --> 00:22:38,520
can't be hard-coded by the attacker and

00:22:36,660 --> 00:22:40,620
that means that no more inline scripts

00:22:38,520 --> 00:22:44,040
unless they have an HTML attribute

00:22:40,620 --> 00:22:46,140
called nones similarly no inline styles

00:22:44,040 --> 00:22:48,360
or anything and that's why the alert 1

00:22:46,140 --> 00:22:51,630
or these XSS attacks don't work

00:22:48,360 --> 00:22:54,000
I'm blocking objects here image source

00:22:51,630 --> 00:22:55,770
I'm only specifying self and API to the

00:22:54,000 --> 00:22:59,130
Dorobo dial which is what I use for the

00:22:55,770 --> 00:23:01,470
user icons fund source I only allow

00:22:59,130 --> 00:23:03,420
Google Fonts itself I block all mixed

00:23:01,470 --> 00:23:05,640
content meaning no HTTP content in my

00:23:03,420 --> 00:23:08,070
page and then I specify report your I

00:23:05,640 --> 00:23:10,770
and this report your I will be paint on

00:23:08,070 --> 00:23:13,110
every violation within with an HTTP POST

00:23:10,770 --> 00:23:14,250
request there are tools that you can

00:23:13,110 --> 00:23:16,290
point this against but you can also

00:23:14,250 --> 00:23:18,450
point this against any endpoint on your

00:23:16,290 --> 00:23:20,730
server and this will report it there's

00:23:18,450 --> 00:23:24,060
also a report only flag and that one

00:23:20,730 --> 00:23:25,650
allows you to say that you want to only

00:23:24,060 --> 00:23:27,180
get the information that something has

00:23:25,650 --> 00:23:29,100
been violated but you don't block the

00:23:27,180 --> 00:23:31,620
actual content and this is great for to

00:23:29,100 --> 00:23:33,150
have transitioning into it especially if

00:23:31,620 --> 00:23:36,960
you want to test this first in like a

00:23:33,150 --> 00:23:38,760
local environment or something but the

00:23:36,960 --> 00:23:40,830
important thing here is to keep in mind

00:23:38,760 --> 00:23:43,410
is that CSP should not be your security

00:23:40,830 --> 00:23:45,870
policy it should be or security strategy

00:23:43,410 --> 00:23:50,070
it should be your safety net because

00:23:45,870 --> 00:23:51,990
writing a really strong CSP is hard and

00:23:50,070 --> 00:23:54,450
there's a great paper by Google about

00:23:51,990 --> 00:23:57,570
this well sort of like about the dangers

00:23:54,450 --> 00:23:58,830
of this and meaning you should only have

00:23:57,570 --> 00:24:01,830
this as a safety net but you should

00:23:58,830 --> 00:24:06,330
still care about XSS attacks and similar

00:24:01,830 --> 00:24:08,010
similar things a couple of other things

00:24:06,330 --> 00:24:09,750
that you should look out for you should

00:24:08,010 --> 00:24:13,020
avoid clickjacking by disallowing

00:24:09,750 --> 00:24:14,550
framing I think most websites don't have

00:24:13,020 --> 00:24:18,060
a legitimate reason why they should be

00:24:14,550 --> 00:24:19,890
allowing to be iframed and if you do

00:24:18,060 --> 00:24:22,350
allow a framing what an attacker can do

00:24:19,890 --> 00:24:24,990
is they can place your page with an

00:24:22,350 --> 00:24:27,640
opacity of zero above their page and

00:24:24,990 --> 00:24:29,770
have lineup buttons so that the

00:24:27,640 --> 00:24:31,630
that user things they're interacting

00:24:29,770 --> 00:24:35,290
with their page but they're really

00:24:31,630 --> 00:24:38,110
interacting with your page and so this

00:24:35,290 --> 00:24:40,030
is what people could use for example to

00:24:38,110 --> 00:24:41,680
like if you want to like a page or

00:24:40,030 --> 00:24:44,410
something like that which like Facebook

00:24:41,680 --> 00:24:45,850
blocks I Framing but you could do

00:24:44,410 --> 00:24:48,040
something similar

00:24:45,850 --> 00:24:50,200
also don't chill versions of front-end

00:24:48,040 --> 00:24:51,670
libraries and servers so there are

00:24:50,200 --> 00:24:55,030
things like unpackage and stuff very

00:24:51,670 --> 00:24:57,400
really useful to to develop things but

00:24:55,030 --> 00:24:59,560
if you show a version number in your in

00:24:57,400 --> 00:25:00,970
your HTML page or in your HTTP headers

00:24:59,560 --> 00:25:04,690
like hey I'm using Express version

00:25:00,970 --> 00:25:06,970
whatever this can gives an attacker the

00:25:04,690 --> 00:25:09,490
right idea of what security vulnerable

00:25:06,970 --> 00:25:11,470
honorable vulnerabilities to test out

00:25:09,490 --> 00:25:14,980
and you don't want to make their job

00:25:11,470 --> 00:25:16,480
easier and then check for types of input

00:25:14,980 --> 00:25:19,270
because there can be things like no

00:25:16,480 --> 00:25:21,580
sequel injections if you expect a value

00:25:19,270 --> 00:25:23,950
to be a string in an HTTP and like an

00:25:21,580 --> 00:25:26,860
HTML HTTP body or in a query parameter

00:25:23,950 --> 00:25:28,240
check that is really a string don't just

00:25:26,860 --> 00:25:30,670
assume it because there are things said

00:25:28,240 --> 00:25:33,130
some partial libraries that will parse

00:25:30,670 --> 00:25:36,490
things like objects as well and if you

00:25:33,130 --> 00:25:39,220
do that the result is that you could for

00:25:36,490 --> 00:25:41,410
example have a no sequel injection other

00:25:39,220 --> 00:25:43,060
things consider security audits

00:25:41,410 --> 00:25:45,430
especially if your code base has never

00:25:43,060 --> 00:25:48,610
had a security audit if you don't have

00:25:45,430 --> 00:25:51,700
an internal security expert contract one

00:25:48,610 --> 00:25:54,910
because there's so many things that it's

00:25:51,700 --> 00:25:56,680
really hard to keep up with that this is

00:25:54,910 --> 00:25:57,730
really helpful and you learn yourself a

00:25:56,680 --> 00:25:59,470
lot as well if you look over their

00:25:57,730 --> 00:26:01,000
shoulder that's how I learned most of

00:25:59,470 --> 00:26:04,030
this stuff was when I had to go through

00:26:01,000 --> 00:26:05,980
security audit with a feature and then

00:26:04,030 --> 00:26:07,090
stay up to date with versions because as

00:26:05,980 --> 00:26:09,460
I said you don't want to be the next

00:26:07,090 --> 00:26:11,410
Equifax greenkeepers a useful tool but

00:26:09,460 --> 00:26:13,590
there are other tools as well similarly

00:26:11,410 --> 00:26:15,520
use a tool to detect security

00:26:13,590 --> 00:26:17,800
vulnerabilities in your dependencies

00:26:15,520 --> 00:26:19,960
because you can write the most secure

00:26:17,800 --> 00:26:22,000
code but if your dependencies are

00:26:19,960 --> 00:26:23,140
vulnerable that sort of defeats the

00:26:22,000 --> 00:26:25,870
purpose

00:26:23,140 --> 00:26:27,370
so sneek is one of them I like I like

00:26:25,870 --> 00:26:29,170
them because they also provide patches

00:26:27,370 --> 00:26:32,170
for things if they're too late so for

00:26:29,170 --> 00:26:33,760
example marked still has a one or like

00:26:32,170 --> 00:26:35,410
fix that vulnerability that I showed you

00:26:33,760 --> 00:26:37,840
but they still have a vulnerability

00:26:35,410 --> 00:26:41,320
about data your eyes and that still

00:26:37,840 --> 00:26:43,059
didn't make it into the into the

00:26:41,320 --> 00:26:44,380
package at least last I checked but

00:26:43,059 --> 00:26:45,669
sneak for example has a patch for that

00:26:44,380 --> 00:26:48,610
but there are other tools like no

00:26:45,669 --> 00:26:50,679
security project and etc that check for

00:26:48,610 --> 00:26:52,659
this as well github I think against your

00:26:50,679 --> 00:26:56,529
package Jason as well and tells you

00:26:52,659 --> 00:27:00,009
about vulnerabilities so to wrap this up

00:26:56,529 --> 00:27:01,779
you signed HTTP only cookies be

00:27:00,009 --> 00:27:05,679
skeptical of jobs don't treat them as a

00:27:01,779 --> 00:27:08,409
single source of truth use something

00:27:05,679 --> 00:27:11,200
like use rel no opener nor refer on your

00:27:08,409 --> 00:27:13,299
target blank links use C surf tokens

00:27:11,200 --> 00:27:15,120
it's really easy to use so there's no

00:27:13,299 --> 00:27:17,559
real excuse to not do it

00:27:15,120 --> 00:27:19,120
blocking XSS isn't trivial so always

00:27:17,559 --> 00:27:21,070
think about like whenever you let the

00:27:19,120 --> 00:27:23,860
user input anything or if you have query

00:27:21,070 --> 00:27:25,870
parameters or something always think of

00:27:23,860 --> 00:27:28,240
these and make sure that they can't

00:27:25,870 --> 00:27:29,440
cause harm be aware of encoding because

00:27:28,240 --> 00:27:33,220
there are a million ways to write the

00:27:29,440 --> 00:27:34,899
same thing be careful with JSONP a JSONP

00:27:33,220 --> 00:27:37,149
endpoint should really only accept word

00:27:34,899 --> 00:27:38,230
characters in a callback and nothing

00:27:37,149 --> 00:27:43,419
else

00:27:38,230 --> 00:27:46,149
use CSP as a safety net and most

00:27:43,419 --> 00:27:47,470
importantly stay up to date so I put up

00:27:46,149 --> 00:27:50,320
the slides here I'm gonna tweet the link

00:27:47,470 --> 00:27:51,190
in a second so you can check them out

00:27:50,320 --> 00:27:53,409
again

00:27:51,190 --> 00:27:56,100
similarly the whole source code of the

00:27:53,409 --> 00:27:58,779
website is on this URL including

00:27:56,100 --> 00:28:00,100
different readme files for every of

00:27:58,779 --> 00:28:01,360
these vulnerable to said I showed you

00:28:00,100 --> 00:28:03,730
plus a couple of others that are in

00:28:01,360 --> 00:28:05,259
there including resources that are

00:28:03,730 --> 00:28:07,269
interesting about the respective topic

00:28:05,259 --> 00:28:08,379
and with that I would like to thank you

00:28:07,269 --> 00:28:10,330
all for your attention I'll be around

00:28:08,379 --> 00:28:11,860
for the rest of the day wearing likely

00:28:10,330 --> 00:28:13,269
this jacket instead of the onesie

00:28:11,860 --> 00:28:17,110
because this is really warm even in

00:28:13,269 --> 00:28:18,460
Iceland and yeah come come by ask me any

00:28:17,110 --> 00:28:19,250
questions and thank you for your

00:28:18,460 --> 00:28:24,619
attention

00:28:19,250 --> 00:28:24,619

YouTube URL: https://www.youtube.com/watch?v=c6mqdsfWdmE


