Title: Automated perf. budgeting into your pipeline w  sitespeed.io - Daniel Lopez - JSConf US 2019
Publication date: 2019-11-08
Playlist: JSConf US 2019
Description: 
	Performance budgeting seems to be the way to go when it comes tackling front-end performance in medium to large organizations. I'll be talking about my journey in front-end focused performance testing automation and where I'd like to see the current state of tooling go.
Captions: 
	00:00:00,120 --> 00:00:02,939
Automated Performance Budgeting Into Your Pipeline With Sitespeed.io

00:00:02,939 --> 00:00:03,939
- Daniel Lopez

00:00:03,939 --> 00:00:04,939
Hi, thank you.

00:00:04,939 --> 00:00:05,939
Mic check.

00:00:05,939 --> 00:00:06,939
Hello.

00:00:06,939 --> 00:00:07,939
All right.

00:00:07,939 --> 00:00:13,090
So the official title for this is automated performance budgeting into your pipeline with

00:00:13,090 --> 00:00:14,900
Sitespeed.io.

00:00:14,900 --> 00:00:22,600
It's kind of a mouthful and also I put W there for some horrible reason, apologies for that.

00:00:22,600 --> 00:00:30,570
and I normally don't do public speaking, I'm very happy that we have the HPE track for

00:00:30,570 --> 00:00:41,879
those who are beginners, or yeah, and I just really wanted to share this tool, because

00:00:41,879 --> 00:00:43,200
I think it's awesome.

00:00:43,200 --> 00:00:48,249
I think it really doesn't get enough credit, and it's been around for an extremely long

00:00:48,249 --> 00:00:52,559
time, and I just wanted to share it with you.

00:00:52,559 --> 00:00:54,620
So that's what I'll be doing with you here today.

00:00:54,620 --> 00:01:02,999
So a quick overview, so we're going to talk about my own personal performance journey,

00:01:02,999 --> 00:01:11,030
some -- I guess just like performance budgets in general, what they are, what they're for,

00:01:11,030 --> 00:01:16,610
and we're going to talk about Sitespeed.io specifically, and performance budgets within

00:01:16,610 --> 00:01:18,720
Sitespeed.io specifically.

00:01:18,720 --> 00:01:24,760
We're going to talk about, there's a lot of different tools that do performance budgeting,

00:01:24,760 --> 00:01:29,890
Sitespeed.io is one of them and there's a lot of other really amazing tools that I found

00:01:29,890 --> 00:01:32,720
with in my journey.

00:01:32,720 --> 00:01:41,060
So yeah, we'll be talking about other tools and things to consider, and I wanted to throw

00:01:41,060 --> 00:01:49,250
out some stuff that I've been experimenting with, and what I see as my future for front-end

00:01:49,250 --> 00:01:55,590
performance, what I'd like to see, and what I've experimented with.

00:01:55,590 --> 00:01:59,280
So first: A little bit about me.

00:01:59,280 --> 00:02:07,770
There's me behind my pizza curtains, that I sewed myself and put up in my office and

00:02:07,770 --> 00:02:08,799
some things that I like.

00:02:08,799 --> 00:02:17,170
I go by the name of debug xyz on the interweb and that's because I have way too many hobbies

00:02:17,170 --> 00:02:19,760
for my own good.

00:02:19,760 --> 00:02:21,540
I'm not good at any of them.

00:02:21,540 --> 00:02:25,609
So this list here is all things I'm really bad at.

00:02:25,609 --> 00:02:33,920
So I'm into growing Pequin peppers, tech minimalism, is hard.

00:02:33,920 --> 00:02:37,840
Accessible is hard.

00:02:37,840 --> 00:02:39,630
Skateboarding was really hard.

00:02:39,630 --> 00:02:47,329
turntablism is insane, I'm horrible, horrible at that one, but I love learning about it.

00:02:47,329 --> 00:02:49,560
Front-end engineering is insanely hard.

00:02:49,560 --> 00:02:58,910
Right now I'm learning NixOS which is an operating system that is configuration as code.

00:02:58,910 --> 00:03:04,749
I've been doing, I don't even want to say how long I've been taking front-end seriously

00:03:04,749 --> 00:03:12,219
but I'm relearning CSS and investing a lot of time in that, as well.

00:03:12,219 --> 00:03:16,379
So I'm going to quickly go through two of my hobbies, don't worry, I'm not going to

00:03:16,379 --> 00:03:20,049
go through my whole list of hobbies.

00:03:20,049 --> 00:03:29,819
One of my brothers gave me chilly Pequin seeds.

00:03:29,819 --> 00:03:33,450
He suggested I give it a shot.

00:03:33,450 --> 00:03:39,370
They have a 15% germination rate.

00:03:39,370 --> 00:03:44,569
Normally birds only eat them and they kind of eat away the hull of the seed so you kind

00:03:44,569 --> 00:03:50,340
of have to emulate that to make sure that they're happy and keep them O

00:03:50,340 --> 00:03:54,279
Thrasher, so this is a '90s thing.

00:03:54,279 --> 00:03:59,519
I'm see if I can resize my slide here.

00:03:59,519 --> 00:04:04,650
There we go.

00:04:04,650 --> 00:04:06,360
Yeah.

00:04:06,360 --> 00:04:11,150
Here we have the pose of the year, so at this point I'd been skateboarding for a very long

00:04:11,150 --> 00:04:12,180
time.

00:04:12,180 --> 00:04:16,840
I had -- it was an absolute obsession of mine.

00:04:16,840 --> 00:04:25,819
It takes tons of practice, and is -- it's difficult.

00:04:25,819 --> 00:04:35,220
And so when I was skateboarding, I would go all around downtown, I'd grind the -- you

00:04:35,220 --> 00:04:51,870
know, destroy the curbs at my local library, and it would get really hot and the (speaks

00:04:51,870 --> 00:05:03,530
Spanish) when I would get really hot and exhausted from skateboarding, I would go into my local

00:05:03,530 --> 00:05:09,630
library, and cool off, and play with a computer.

00:05:09,630 --> 00:05:13,650
And that's where I actually learned to code.

00:05:13,650 --> 00:05:19,810
And I would print out -- actually JavaScript, even though I gave up really quickly, and

00:05:19,810 --> 00:05:27,990
take it home for studying, and I did that, because it was hard.

00:05:27,990 --> 00:05:32,810
So when I knew I was going to be a programmer, I decided I'd go to boot camp.

00:05:32,810 --> 00:05:36,099
That was hard.

00:05:36,099 --> 00:05:45,509
So this is me at my graduation photo Parris Island and there's my father and mother supporting

00:05:45,509 --> 00:05:47,729
me at my graduation.

00:05:47,729 --> 00:05:48,980
It was hard.

00:05:48,980 --> 00:05:49,980
Frontend is hard.

00:05:49,980 --> 00:05:56,180
It was very difficult and achieving web performance can be very difficult.

00:05:56,180 --> 00:06:03,310
It's a discipline -- like front-end web performance is a discipline within front-end and maintaining

00:06:03,310 --> 00:06:06,919
web performance is even more difficult.

00:06:06,919 --> 00:06:15,020
You can really work really hard, you know, getting your site to get that time to first

00:06:15,020 --> 00:06:22,880
interactive super-low, but at the pace that we jump from job to job, and from project

00:06:22,880 --> 00:06:30,250
to project, you're going to have a lot of people from with varying skill levels, and

00:06:30,250 --> 00:06:32,800
everyone within front-end performance has their specialties.

00:06:32,800 --> 00:06:38,360
There's amazing front-end developers who are super knowledgeable about accessibility, but

00:06:38,360 --> 00:06:43,849
may not know about front-end performance, so it's important to share your skillset with

00:06:43,849 --> 00:06:49,039
your peers and make sure that you're having front-end discipline meetings to kind of share

00:06:49,039 --> 00:06:54,050
your expertise within the field.

00:06:54,050 --> 00:07:02,520
So you have to do all of the things for front-end performance: Capture metrics, observe trends,

00:07:02,520 --> 00:07:11,639
provide alerting, fixing actual issues on the website, because that's what, you know,

00:07:11,639 --> 00:07:16,280
-- what we're talking about here is that's the kind of context that I come in from is

00:07:16,280 --> 00:07:18,890
the web, and front-end development.

00:07:18,890 --> 00:07:22,570
So fixing issues on the website, raising awareness with your peers.

00:07:22,570 --> 00:07:27,689
You know, you may go through this same struggle if you're working on things like security,

00:07:27,689 --> 00:07:31,840
maintainability, maybe you're super into testing, you've got to be sure that you're raising

00:07:31,840 --> 00:07:40,139
awareness within your peers, as well as consulting, tools, analysis, for analysis, providing -- supporting

00:07:40,139 --> 00:07:41,280
platforms.

00:07:41,280 --> 00:07:47,069
One of the first things I did when I started focusing front-end performance within my organization

00:07:47,069 --> 00:07:58,669
is I just started capturing PSI data because I thought that was really important for reasons

00:07:58,669 --> 00:08:01,569
that I'll talk about later.

00:08:01,569 --> 00:08:04,639
And just all of the things you have to do.

00:08:04,639 --> 00:08:11,689
And it's -- and it's pretty intense, you know, especially if you're a smaller shop, and you

00:08:11,689 --> 00:08:16,439
may have all of this within your organization, but you still need to provide that consulting

00:08:16,439 --> 00:08:22,270
to your peers to make sure they're aware of the tooling and of the structure that's there.

00:08:22,270 --> 00:08:24,970
Performance is critical on the web.

00:08:24,970 --> 00:08:30,449
I'm not going to talk too much about this, but CPU are getting really fast.

00:08:30,449 --> 00:08:39,270
We have blazing fast mobile devices, but you know, not everyone has that, and most of the

00:08:39,270 --> 00:08:45,910
cell phone adoption right now is happening with like new people buying cell phones who

00:08:45,910 --> 00:08:54,760
haven't had cell phones before, are buying low to medium-tier devices, so it's super

00:08:54,760 --> 00:08:59,180
important going into the future.

00:08:59,180 --> 00:09:04,410
And as the web advances, expectations are getting higher.

00:09:04,410 --> 00:09:06,950
People want snappier experiences.

00:09:06,950 --> 00:09:15,860
Users gret frustrated, they tend to get less likely to come back and nobody likes a slow

00:09:15,860 --> 00:09:17,040
site.

00:09:17,040 --> 00:09:21,000
This is us today.

00:09:21,000 --> 00:09:25,540
I actually like I think that was funny and stuff, but I like I literally do this.

00:09:25,540 --> 00:09:31,630
I literally, you know, do this to my salad, like it's really gross.

00:09:31,630 --> 00:09:33,820
[laughter]

00:09:33,820 --> 00:09:39,550
So yeah, most of you are probably concerned about profit on your websites.

00:09:39,550 --> 00:09:41,440
This is it.

00:09:41,440 --> 00:09:43,830
So Step 1, Step 2, performance, profit.

00:09:43,830 --> 00:09:45,600
Check it out.

00:09:45,600 --> 00:09:55,130
No, seriously, there's amazing resources by Google and there's this book that I read called

00:09:55,130 --> 00:10:01,220
time is money, the business value of web performance that if you're trying to sell web performance

00:10:01,220 --> 00:10:05,089
to your organization, you gotta read this book.

00:10:05,089 --> 00:10:06,089
It's amazing.

00:10:06,089 --> 00:10:10,470
It gave me tons of case studies to show to my leadership.

00:10:10,470 --> 00:10:17,329
And, you know, you know, you could -- don't do an A/B test for it.

00:10:17,329 --> 00:10:21,350
Look to other studies, seriously, because it's very difficult.

00:10:21,350 --> 00:10:28,899
I don't recommend it, And you're ignoring a key part of the equation.

00:10:28,899 --> 00:10:34,810
There's a lot to it, it's very complex, but, you know, SEO is a big factor to revenue,

00:10:34,810 --> 00:10:42,800
so where you're, you know, with Google having tools like Lighthouse and PHP insights being

00:10:42,800 --> 00:10:47,370
directly factored into your page rank score, this is one of the key pieces of advice that

00:10:47,370 --> 00:10:54,940
you know, Google lets you know is a big impact.

00:10:54,940 --> 00:10:58,180
So I forgot some things.

00:10:58,180 --> 00:11:01,480
In that big list of all the things and that's regression.

00:11:01,480 --> 00:11:07,959
So it's -- it's easy to accidentally, you know, you have a project where you need to

00:11:07,959 --> 00:11:13,540
convert a timezone, so you pull in a moment and then you realized that you need moment

00:11:13,540 --> 00:11:21,279
timezone plugin and then that pulls in literally all of the geographical latitude and longitude

00:11:21,279 --> 00:11:26,649
information about the timezone lines that you didn't know about, and wasn't documented.

00:11:26,649 --> 00:11:32,550
So it can be an easy mistake to make, and you need tools to support you throughout that.

00:11:32,550 --> 00:11:38,820
And also, it's about scalability, as well, it's kind of a weird term to use in this sense,

00:11:38,820 --> 00:11:42,589
but I think about organizational scalability.

00:11:42,589 --> 00:11:49,519
You can't be there for everything as, you know, maybe that one or maybe there's a couple

00:11:49,519 --> 00:11:55,110
performance experts and you have this large organization, or a large project, so I tend

00:11:55,110 --> 00:11:58,070
to speak within the context of organizations.

00:11:58,070 --> 00:12:02,720
But you may be working on an open source project where performance is absolutely critical.

00:12:02,720 --> 00:12:06,250
It may be for Mobile Web.

00:12:06,250 --> 00:12:09,790
And I'm still probably forgetting tons of things.

00:12:09,790 --> 00:12:13,630
So what are performance budgets?

00:12:13,630 --> 00:12:15,990
It is what it sounds like.

00:12:15,990 --> 00:12:22,930
You define something like a budget.json, you can specify some things.

00:12:22,930 --> 00:12:27,110
Typically you might want to failure build.

00:12:27,110 --> 00:12:30,529
It's a bit of a touchy subject to roll out to your organization, but I'll talk about

00:12:30,529 --> 00:12:32,080
that a little bit later.

00:12:32,080 --> 00:12:36,540
How can performance budgets help?

00:12:36,540 --> 00:12:40,440
First of all, it gets the conversation started.

00:12:40,440 --> 00:12:44,790
When you introduce performance budgets into your organization or project, you're immediately

00:12:44,790 --> 00:12:48,970
going to start talking about performance, which is immediate when?

00:12:48,970 --> 00:12:53,190
But what's more important, and one of the keys to performance budgeting is it keeps

00:12:53,190 --> 00:13:00,230
the conversation going, so this is, you know, when you're introducing a new feature and

00:13:00,230 --> 00:13:06,220
then you roll it out and then it fails to build, you're like, oh, well, lesson learned,

00:13:06,220 --> 00:13:12,199
I'm going to make sure that I bring up this conversation a little bit early, because it's

00:13:12,199 --> 00:13:16,220
kind of pushed our project a little bit out.

00:13:16,220 --> 00:13:18,990
You're making explicit tradeoffs.

00:13:18,990 --> 00:13:28,699
Instead of implicitly kind of making that tradeoff, you're being direct and more -- you're

00:13:28,699 --> 00:13:29,810
being more direct about it.

00:13:29,810 --> 00:13:34,820
There has been a conversation, there has been a commit, maybe you even bump your budget.

00:13:34,820 --> 00:13:35,820
That's OK.

00:13:35,820 --> 00:13:36,980
It works like that in real life.

00:13:36,980 --> 00:13:42,420
If you've ever tried budgeting and like going on a hard core budget, the first thing you

00:13:42,420 --> 00:13:46,480
do is overrestrict yourself.

00:13:46,480 --> 00:13:51,170
And you adjust, and that's OK.

00:13:51,170 --> 00:13:56,850
But it's being explicit about it that kind of helps out with the situation and it prevents

00:13:56,850 --> 00:13:57,850
accidents.

00:13:57,850 --> 00:14:00,269
This is one of the biggest things for me.

00:14:00,269 --> 00:14:05,389
So there's a lot of different things that you can budget on.

00:14:05,389 --> 00:14:08,440
So there's score-based metrics.

00:14:08,440 --> 00:14:12,620
If you're using something like Lighthouse you might be familiar with, it gives you an

00:14:12,620 --> 00:14:17,690
overall performance score, so you can assert on that.

00:14:17,690 --> 00:14:24,079
So if your SEO is critical to your organization and you need that traffic coming in to make

00:14:24,079 --> 00:14:32,060
your revenue, you know, that score is going to be important, so your SEO team might even

00:14:32,060 --> 00:14:35,620
demand that and then there's quantitative.

00:14:35,620 --> 00:14:37,639
So this is about numbers.

00:14:37,639 --> 00:14:45,449
It's about how many kilobytes of JavaScript do we think we really need?

00:14:45,449 --> 00:14:48,029
And kind of asserting against that.

00:14:48,029 --> 00:14:52,740
It can be how many images you have on your home page?

00:14:52,740 --> 00:14:57,310
And maybe it will remind you that oh, I need to lazy load.

00:14:57,310 --> 00:15:01,079
That's one of the things that, like, I do as consulting within my organization.

00:15:01,079 --> 00:15:02,279
Lazy load.

00:15:02,279 --> 00:15:05,880
Lazy load, lazy load.

00:15:05,880 --> 00:15:08,319
So timings, as well.

00:15:08,319 --> 00:15:10,940
So timings can be difficult.

00:15:10,940 --> 00:15:17,279
In fact, this is one of the things that I really wanted to touch on, because when you

00:15:17,279 --> 00:15:25,220
roll out performance budgets into your organization, the last thing you want is false positives,

00:15:25,220 --> 00:15:30,650
especially at the beginning, so that's one of the key advices -- pieces of advice that

00:15:30,650 --> 00:15:37,589
I have, is to make sure that if you're budgeting, make sure that your timings or that what you're

00:15:37,589 --> 00:15:43,779
budgeting on doesn't have false positives and that your timings are stable.

00:15:43,779 --> 00:15:53,000
Before I forget, you know, because this is an important part, I have some advice on keeping

00:15:53,000 --> 00:16:01,170
your timing stable, so within the type of websites that I work on, there's lots of third

00:16:01,170 --> 00:16:10,639
parties, and that can cause a lot of volatility in your metrics, so you don't want to include

00:16:10,639 --> 00:16:14,070
that within the metrics that you're budgeting on.

00:16:14,070 --> 00:16:19,930
It is important that you keep an eye on those things, but make it separate and budget for

00:16:19,930 --> 00:16:25,000
them separately.

00:16:25,000 --> 00:16:27,360
Accessibility budgets!

00:16:27,360 --> 00:16:35,009
This is about performance budgeting, but it's an easy thing to do, so don't forget to check

00:16:35,009 --> 00:16:39,779
the accessibility box within your performance budgeting tool.

00:16:39,779 --> 00:16:48,029
A lot of them come with that so you can assert against that, and it's an easy win for accessibility.

00:16:48,029 --> 00:16:58,220
Just a caveat here: Automated accessibility detection only catches like an extremely small

00:16:58,220 --> 00:17:02,279
amount of actual accessibility issues.

00:17:02,279 --> 00:17:05,790
I've seen percentages as low as like 3%.

00:17:05,790 --> 00:17:11,039
But that doesn't mean that you can't take advantage of some of those easy wins of making

00:17:11,039 --> 00:17:13,750
some simple mistakes.

00:17:13,750 --> 00:17:22,010
So don't forget to check the check box and don't forget to use your label tags.

00:17:22,010 --> 00:17:27,190
So back to performance: How do you roll out performance budgets within your organization?

00:17:27,190 --> 00:17:38,460
I mentioned that it can be easy to be too aggressive, and it can be difficult to sell

00:17:38,460 --> 00:17:39,669
it.

00:17:39,669 --> 00:17:47,020
One of my main pieces of advice is when you -- when it comes to rolling out in your organization,

00:17:47,020 --> 00:17:54,920
is to don't immediately jump to the slowest item on your page.

00:17:54,920 --> 00:17:57,640
Go to the fastest.

00:17:57,640 --> 00:18:04,240
Because really this is about regression and keeping a conversation going, and I'd recommend

00:18:04,240 --> 00:18:10,390
if you have a fast area already, do that first.

00:18:10,390 --> 00:18:14,990
Let's see here.

00:18:14,990 --> 00:18:21,000
No, you really have to get everyone on board, so that's actually why I'm here.

00:18:21,000 --> 00:18:24,799
This is my sprint demo.

00:18:24,799 --> 00:18:29,290
So yeah, you have -- you know, I'm going to be giving this presentation to my organization,

00:18:29,290 --> 00:18:30,429
as well.

00:18:30,429 --> 00:18:37,340
Another thing, you know, make sure you plant those seeds early, so I've been talking about

00:18:37,340 --> 00:18:44,530
this for a long time within my organization, and people are asking me for it now.

00:18:44,530 --> 00:18:49,570
And that's a wonderful thing.

00:18:49,570 --> 00:18:55,000
Some places to focus, places, you know, areas that are really fast, new projects can be

00:18:55,000 --> 00:18:58,659
a great place to start.

00:18:58,659 --> 00:19:03,850
Just for like my context, the happy path is a great place to focus.

00:19:03,850 --> 00:19:10,340
This is the areas of your website that the users are going to be kind of jumping through.

00:19:10,340 --> 00:19:16,240
Some ideas of things that you can budget on, so things like time to interactive, speed

00:19:16,240 --> 00:19:21,660
index is an amazing visual metric.

00:19:21,660 --> 00:19:29,030
And I was exposed to that by another insanely web tool, web page tests.

00:19:29,030 --> 00:19:34,039
People look at it all weird, but it's really an incredible project.

00:19:34,039 --> 00:19:38,540
So just wanted to mention that tool.

00:19:38,540 --> 00:19:45,640
Yeah, bundle size, basically anything within the performance API, so like, sitespeed,io

00:19:45,640 --> 00:19:49,050
specifically, it has incredible metrics.

00:19:49,050 --> 00:19:53,360
We'll talk about it more.

00:19:53,360 --> 00:19:58,789
Sitespeed.io is very pluggable.

00:19:58,789 --> 00:20:07,380
It's been that way for a while, and yeah, you can, you know, I want this checkout button

00:20:07,380 --> 00:20:10,570
to display within this amount of seconds.

00:20:10,570 --> 00:20:13,610
It's pretty awesome.

00:20:13,610 --> 00:20:16,679
How do you figure out what your budget is?

00:20:16,679 --> 00:20:27,050
At Google I/O 2018 I think they released a performance budget.

00:20:27,050 --> 00:20:37,700
It's a slider to kind of estimate how fast you want your page to load.

00:20:37,700 --> 00:20:41,320
And then slide like how many kilobytes of JavaScript and whatnot.

00:20:41,320 --> 00:20:46,250
So that's an amazing introduction of a nice little tool.

00:20:46,250 --> 00:20:47,310
Analyze your competitors.

00:20:47,310 --> 00:20:53,820
You know, you can actually -- there's a little SEO trick to find your competitors.

00:20:53,820 --> 00:20:55,490
I actually don't remember.

00:20:55,490 --> 00:21:00,750
Yeah, you know, just look at your competitors, see how they're doing.

00:21:00,750 --> 00:21:07,620
Another thing is that when you're working against competitors, you know, just a slight

00:21:07,620 --> 00:21:13,419
difference between your competitor doesn't really make that huge of an impact.

00:21:13,419 --> 00:21:18,350
You got to be way faster than your competitor to actually notice.

00:21:18,350 --> 00:21:23,059
There's statistics on this, and studies on this.

00:21:23,059 --> 00:21:26,070
What happens when you make a mistake?

00:21:26,070 --> 00:21:29,480
What happens when your budget fails in your pipeline?

00:21:29,480 --> 00:21:37,520
You can, you know, obviously optimize the feature that you're introducing.

00:21:37,520 --> 00:21:45,480
You can remove other features, you can redesign the feature, you may even catch this early

00:21:45,480 --> 00:21:51,810
as you're, you know, talking about it early in the design development process, but it

00:21:51,810 --> 00:21:54,799
can just as easily be redesigned afterwards.

00:21:54,799 --> 00:21:59,440
Or just don't do the feature at all.

00:21:59,440 --> 00:22:01,820
It's an option.

00:22:01,820 --> 00:22:04,130
Less is more, seriously.

00:22:04,130 --> 00:22:06,960
It's so easy to forget.

00:22:06,960 --> 00:22:14,340
So here's a screenshot of Sitespeed.io budgeting results.

00:22:14,340 --> 00:22:21,809
I don't think I'm going to have enough time to do an end-up demo, but the innovation within

00:22:21,809 --> 00:22:24,419
Jenkins is pretty awesome.

00:22:24,419 --> 00:22:31,910
The documentation is incredible on that.

00:22:31,910 --> 00:22:36,070
And yeah, we'll talk a little bit Mr. Sitespeed.io.

00:22:36,070 --> 00:22:37,789
It has something called Coach.

00:22:37,789 --> 00:22:40,289
This is the thing that gives you advice.

00:22:40,289 --> 00:22:45,460
It has a philosophy of trying not to give you any bad advice.

00:22:45,460 --> 00:22:53,090
If you follow the Coach, you will win.

00:22:53,090 --> 00:23:01,530
Browsertime is the thing that kind of actually opens up the web page and tries to capture

00:23:01,530 --> 00:23:02,809
measurements.

00:23:02,809 --> 00:23:06,320
It's actually very cool technically if you deep dive into it.

00:23:06,320 --> 00:23:16,870
There's the thing called XVXB it's like an X display server, which is super-cool.

00:23:16,870 --> 00:23:20,799
It uses a neat protocol.

00:23:20,799 --> 00:23:30,289
And to dig into Sitespeed.io even more, it has this tool called pageXray, shout out to

00:23:30,289 --> 00:23:43,309
the designer these are all little icons in the project.

00:23:43,309 --> 00:23:56,860
There's this PageXray.

00:23:56,860 --> 00:24:04,700
It's used on the compare.sitespeed.io which is a waterfall comparison tool.

00:24:04,700 --> 00:24:06,570
It's amazing work.

00:24:06,570 --> 00:24:08,710
I just love this project.

00:24:08,710 --> 00:24:14,100
And, yeah, I definitely want to deep dive into that at some point.

00:24:14,100 --> 00:24:21,030
Here's an example of some of the format here.

00:24:21,030 --> 00:24:34,789
This is where if you wanted to write a deep dive you would write your own information.

00:24:34,789 --> 00:24:42,720
The compare.sitespeed.io, I'm obsessed with waterfall comparisons, I'll have to jump through

00:24:42,720 --> 00:24:47,309
some of these slides because I want to talk about the future here, especially when this

00:24:47,309 --> 00:24:48,840
comes to water fall comparisons.

00:24:48,840 --> 00:24:56,659
I really love Sitespeed.io because it fell within the technologies that I use at work.

00:24:56,659 --> 00:25:08,260
So we use Graphite and Graphana, you can directly import to have insanely nice displays of all

00:25:08,260 --> 00:25:09,260
of your metrics.

00:25:09,260 --> 00:25:16,649
If you're using Sitespeed.io not just for budgeting, but for tracking metrics separately.

00:25:16,649 --> 00:25:25,620
The you know, there's this cool thing called Throttle.

00:25:25,620 --> 00:25:31,020
I haven't deep dived into it, but there's some really interesting stuff about this.

00:25:31,020 --> 00:25:32,820
A lot of the volatility.

00:25:32,820 --> 00:25:39,330
Again, volatility within your timing metrics is critical, there's this kind of network

00:25:39,330 --> 00:25:46,140
replay thing that is experimental right now, that it would capture what, during the task

00:25:46,140 --> 00:25:52,710
what the network activity was, and it would replay that activity, which is a pretty insane

00:25:52,710 --> 00:25:55,210
idea.

00:25:55,210 --> 00:26:03,620
And Throttle is inspired by the funniest GitHub project name I've ever heard in my life.

00:26:03,620 --> 00:26:08,049
So we're talking about a tool that slows down your website.

00:26:08,049 --> 00:26:09,049
It's called Comcast.

00:26:09,049 --> 00:26:10,049
[laughter]

00:26:10,049 --> 00:26:15,909
It's just incredible.

00:26:15,909 --> 00:26:20,390
I jokingly say read the manual, because the documentation is insanely good.

00:26:20,390 --> 00:26:27,440
There's tons of integration, instructions for -- I implemented it using it my own personal

00:26:27,440 --> 00:26:32,440
GitLab instance and it wasn't too bad.

00:26:32,440 --> 00:26:35,880
I didn't read the manual, don't recommend not reading the manual.

00:26:35,880 --> 00:26:47,610
I kind of did it on my own, and yeah, and I also integrated work on Jenkins instance.

00:26:47,610 --> 00:26:56,880
These are documented integrations for GitHub Action, Jenkins, Travis, CircleCI, GitLab.

00:26:56,880 --> 00:27:04,890
The concepts are basically the same across platforms, but difficulty varies.

00:27:04,890 --> 00:27:16,159
For me, setting it up on Jenkins was difficult, because at work, we use just a plug for our

00:27:16,159 --> 00:27:25,250
blog, that our DevOps engineers are amazing, so engineering.rei.com, they write a lot about

00:27:25,250 --> 00:27:32,440
infrastructure as code there, so I had to deep dive into Jenkins DSL, which is, you

00:27:32,440 --> 00:27:39,019
know, a little subset of groovy, in order to implement this pipeline as infrastructure

00:27:39,019 --> 00:27:40,970
as code.

00:27:40,970 --> 00:27:45,299
So it seemed hard, so I gave it a shot.

00:27:45,299 --> 00:27:49,370
And you know, I don't expect you to be able to read this and I wish I could pull it up

00:27:49,370 --> 00:27:55,760
a little bit more, but yeah, this is what Jenkins DSL looks like.

00:27:55,760 --> 00:28:02,309
I specified what I recommend if you're rolling this out to a large organization, is to provide

00:28:02,309 --> 00:28:07,601
some default, sane, and generous budgets and so that's what I tried to do, but you want

00:28:07,601 --> 00:28:11,070
to have that flexibility so your different teams who have different requirements and

00:28:11,070 --> 00:28:13,720
different needs can override those budgets.

00:28:13,720 --> 00:28:16,070
So that's what I did here.

00:28:16,070 --> 00:28:22,659
So I pulled in some default budgets, merged it with the project budget, and then did an

00:28:22,659 --> 00:28:29,230
assertion which basically just ran Sitespeed.io as a Docker image.

00:28:29,230 --> 00:28:37,179
And then I let -- we use Bitbucket now about that, and the Jenkins integration is awesome

00:28:37,179 --> 00:28:44,380
because it uses the HTML publisher plugin, which Sitespeed.io will output like a full-blown

00:28:44,380 --> 00:28:51,559
website with a video, showing the page load, illustrating the visual metrics and when your

00:28:51,559 --> 00:28:58,019
build fails, you know, you can output some text that will link you to a nice little,

00:28:58,019 --> 00:29:06,010
you know, whole suite of HTML that you can kind of view. and kind of figure out what's

00:29:06,010 --> 00:29:09,260
going on with your budget.

00:29:09,260 --> 00:29:14,920
GitLab should be pretty straightforward, follow the docs.

00:29:14,920 --> 00:29:21,230
There's lots of other budgeting tools and lots of amazing, absolutely incredible tools.

00:29:21,230 --> 00:29:28,070
So I've -- one thing is that WebPack actually has performance budgeting built in, you just

00:29:28,070 --> 00:29:36,140
may not know it so if you want to roll out some sort of basic performance budgeting,

00:29:36,140 --> 00:29:41,450
into your organization there's a flag within WebPack that you can flip to make sure that

00:29:41,450 --> 00:29:47,120
it fails if your bundle size is over some insane amount.

00:29:47,120 --> 00:29:49,330
So you can make that assertion there.

00:29:49,330 --> 00:29:52,269
Lighthouse is obviously amazing.

00:29:52,269 --> 00:29:59,820
It has Sitespeed.io actually has Lighthouse integration, so you can use Sitespeed.io to

00:29:59,820 --> 00:30:06,620
run Lighthouse and assert against Lighthouse scores as well as other Lighthouse metrics.

00:30:06,620 --> 00:30:13,060
But Lighthouse is a great place to get started if you at all care about SEO, which a lot

00:30:13,060 --> 00:30:16,740
of people do.

00:30:16,740 --> 00:30:22,929
Speedcurve, I've experimented with this, it's incredible, as well.

00:30:22,929 --> 00:30:28,160
And the future!

00:30:28,160 --> 00:30:35,820
So I think regression analysis is kind of empty.

00:30:35,820 --> 00:30:41,970
Maybe I just don't know much about the toolsets here.

00:30:41,970 --> 00:30:45,929
But I've done some basic experimentation.

00:30:45,929 --> 00:30:52,120
We've set up a private webpagetest instance, within our organization that we can run tests

00:30:52,120 --> 00:30:58,870
against and I just ran a job that ran webpagetest private instance on real mobile devices and

00:30:58,870 --> 00:31:05,630
started plotting that information out on a graph using D3 and what I haven't seen done

00:31:05,630 --> 00:31:13,059
before, and this may exist is you know, you see the graph go up, but OK, what happened?

00:31:13,059 --> 00:31:14,059
Why?

00:31:14,059 --> 00:31:22,280
So what we did, you'd select a low point of the item that was ran by webpagetest and you

00:31:22,280 --> 00:31:28,539
select a high point and that took you to the wonderful waterfall comparison tool where

00:31:28,539 --> 00:31:34,830
I've caught seriously so many issues while we have this experimental prototype up.

00:31:34,830 --> 00:31:42,409
It's, you know, the ease of being able to observe regressions is important.

00:31:42,409 --> 00:31:50,789
Within my own personal journey, setting up webpagetest is not straightforward.

00:31:50,789 --> 00:31:56,429
And especially with physical devices, and I think it could be easier if tools like webpagetest

00:31:56,429 --> 00:32:02,710
and other tools could start using the cloud.

00:32:02,710 --> 00:32:09,679
So there's a lot of cloud services that are providing device forms, and if these tools

00:32:09,679 --> 00:32:16,039
can start integrating with those device forms, instead of plugging in your real phones, you

00:32:16,039 --> 00:32:24,049
can start using services like G cloud or alias Device Farm to connect and run your tests,

00:32:24,049 --> 00:32:31,220
but right now these are mostly focused around actual mobile app tests, so I don't really,

00:32:31,220 --> 00:32:38,429
you know, I don't really see a straightforward way to kind of run those tests.

00:32:38,429 --> 00:32:42,950
In the browser. and integrated in the tools.

00:32:42,950 --> 00:32:47,110
I've spent a ton of time kind of doing research.

00:32:47,110 --> 00:32:53,269
Here's a couple of links, and the Google I/O talk is basically the same as this.

00:32:53,269 --> 00:32:56,730
I highly recommend checking that out.

00:32:56,730 --> 00:33:08,149
There's a Google has put out so many amazing tools and guides and guidance, so I'll actually

00:33:08,149 --> 00:33:15,010
publish these slides and put even more links and credits here.

00:33:15,010 --> 00:33:16,010
That's my talk.

00:33:16,010 --> 00:33:17,650
Thank you everyone.

00:33:17,650 --> 00:33:18,650
I appreciate it.

00:33:18,650 --> 00:33:18,730

YouTube URL: https://www.youtube.com/watch?v=SIp_xU2zCkg


