Title: Evolving Chrome Extensions with Manifest V3 - Simeon Vincent - JSConf US 2019
Publication date: 2019-09-10
Playlist: JSConf US 2019
Description: 
	Browser extensions are a defining feature of the web experience, but they're far from perfect. The Chrome team is planning to make a number of changes to improve privacy, security, and performance. In this session we’ll dive into some of the biggest issues with the current platform, where we’d like the platform to be, and how the next version (Manifest V3) will help us get there.

https://2019.jsconf.us/speakers/simeon-vincent
Captions: 
	00:00:04,980 --> 00:00:09,900
so this is actually my first crew do

00:00:08,309 --> 00:00:13,500
conference talk every other talk I've

00:00:09,900 --> 00:00:16,289
given has been internal or to small

00:00:13,500 --> 00:00:17,990
meetups or just groups of friends so

00:00:16,289 --> 00:00:22,710
this is actually kind of exciting for me

00:00:17,990 --> 00:00:24,779
thank you thank you so I am a developer

00:00:22,710 --> 00:00:27,359
advocate with the Google Chrome team and

00:00:24,779 --> 00:00:31,439
my explicit focus is Chrome extensions

00:00:27,359 --> 00:00:32,960
and the the Chrome Web Store so today

00:00:31,439 --> 00:00:35,340
I'd like to talk to you a bit about how

00:00:32,960 --> 00:00:37,680
Chrome is trying to evolve the

00:00:35,340 --> 00:00:40,350
extensions platform in order to make it

00:00:37,680 --> 00:00:44,460
more secure stable and reliable friend

00:00:40,350 --> 00:00:46,260
users so the high-level overview of what

00:00:44,460 --> 00:00:49,489
I'm going to be talking about is a broad

00:00:46,260 --> 00:00:52,050
history of an abbreviated history of

00:00:49,489 --> 00:00:54,170
browser extensions and custom is a

00:00:52,050 --> 00:00:57,230
customized ability in the browser

00:00:54,170 --> 00:01:00,390
Chrome's approach to extensions and

00:00:57,230 --> 00:01:04,739
finally what is changing in manifest v3

00:01:00,390 --> 00:01:06,450
so onto the browser history browser

00:01:04,739 --> 00:01:07,770
history is very long very complicated

00:01:06,450 --> 00:01:10,080
there's a ton of different stuff so I'm

00:01:07,770 --> 00:01:12,990
gonna be giving a vastly oversimplified

00:01:10,080 --> 00:01:14,729
history here and if you're expecting

00:01:12,990 --> 00:01:17,119
something exciting here don't be because

00:01:14,729 --> 00:01:19,159
it is literally these bullet points so

00:01:17,119 --> 00:01:21,840
first up we have Netscape Navigator

00:01:19,159 --> 00:01:24,420
Internet Explorer and then Firefox v1

00:01:21,840 --> 00:01:26,909
each of these kind of introduces a new

00:01:24,420 --> 00:01:29,100
concept to browser extension and

00:01:26,909 --> 00:01:31,799
customization and obviously finally

00:01:29,100 --> 00:01:34,079
Chrome with its own special take so

00:01:31,799 --> 00:01:35,790
Netscape Navigator wait before I go on

00:01:34,079 --> 00:01:39,420
one of my favorite things about this

00:01:35,790 --> 00:01:41,490
slide is the the animation in the

00:01:39,420 --> 00:01:43,470
Navigator logo I totally forgot it's

00:01:41,490 --> 00:01:45,090
been long enough that but when I was

00:01:43,470 --> 00:01:47,750
doing research for this and looking into

00:01:45,090 --> 00:01:50,189
the history of browsers I forgot how

00:01:47,750 --> 00:01:52,500
common these kind of throb animations

00:01:50,189 --> 00:01:56,159
were and it's an artifact of web history

00:01:52,500 --> 00:01:58,530
that I kind of miss anyway Netscape

00:01:56,159 --> 00:02:01,890
Navigator was the first browser that

00:01:58,530 --> 00:02:04,490
allowed third-party developers to modify

00:02:01,890 --> 00:02:06,420
what the browser could do post

00:02:04,490 --> 00:02:07,979
installation after it was actually on

00:02:06,420 --> 00:02:10,440
the user's machine and they did this

00:02:07,979 --> 00:02:12,360
through the introduction of a NPAPI or

00:02:10,440 --> 00:02:12,930
Netscape plug-in application programming

00:02:12,360 --> 00:02:16,220
interface

00:02:12,930 --> 00:02:18,510
NPAPI was cool because it allowed

00:02:16,220 --> 00:02:20,420
third-party developers to register new

00:02:18,510 --> 00:02:23,580
content types that the browser could

00:02:20,420 --> 00:02:25,580
display and the user could interact with

00:02:23,580 --> 00:02:28,739
so this was originally introduced

00:02:25,580 --> 00:02:32,459
specifically for Java applets but later

00:02:28,739 --> 00:02:35,819
on folks like Mozilla used this

00:02:32,459 --> 00:02:38,280
capability to add the ability to for

00:02:35,819 --> 00:02:42,150
application PDF work to display PDFs in

00:02:38,280 --> 00:02:44,819
a browser so this capability was reverse

00:02:42,150 --> 00:02:47,640
engineer able and ultimately extendable

00:02:44,819 --> 00:02:50,760
by third other third parties but one of

00:02:47,640 --> 00:02:52,769
the disadvantages of this approach is

00:02:50,760 --> 00:02:54,569
that fundamentally they didn't really

00:02:52,769 --> 00:02:56,519
have a security model this was just a

00:02:54,569 --> 00:02:58,620
some native code running in the browser

00:02:56,519 --> 00:03:00,569
executed in the browser's process and it

00:02:58,620 --> 00:03:01,709
had the same capabilities the threat

00:03:00,569 --> 00:03:03,780
model at the time was very different

00:03:01,709 --> 00:03:06,390
than we have today so that wasn't too

00:03:03,780 --> 00:03:09,180
much of a concern but it was something

00:03:06,390 --> 00:03:12,560
to be aware of the most practical side

00:03:09,180 --> 00:03:15,569
effect of this is if you had an unstable

00:03:12,560 --> 00:03:18,540
plugin let's say maybe it was something

00:03:15,569 --> 00:03:21,329
like a PDF displayer it might crash your

00:03:18,540 --> 00:03:24,599
browser unexpectedly that was pretty not

00:03:21,329 --> 00:03:26,459
great as an end user experience the next

00:03:24,599 --> 00:03:28,379
major phase we have here is internet

00:03:26,459 --> 00:03:32,129
explorer floor Internet Explorer

00:03:28,379 --> 00:03:37,200
introduced the first this was the first

00:03:32,129 --> 00:03:38,609
time a a browser allowed third parties

00:03:37,200 --> 00:03:40,919
to actually modify the browser's

00:03:38,609 --> 00:03:43,139
behavior rather than just the the

00:03:40,919 --> 00:03:46,470
content that it could display and before

00:03:43,139 --> 00:03:47,730
I go on again logo stuff this in my head

00:03:46,470 --> 00:03:50,010
is what I think of when I think of

00:03:47,730 --> 00:03:52,769
Internet Explorer 4 it turns out this is

00:03:50,010 --> 00:03:56,129
actually like the eye 6 and 7 logo in

00:03:52,769 --> 00:03:59,489
loading animation ie 4 actually had this

00:03:56,129 --> 00:04:01,980
modern style logo which I find kind of

00:03:59,489 --> 00:04:03,930
funny that we started here and then

00:04:01,980 --> 00:04:05,639
moved away and went skeuomorphic and

00:04:03,930 --> 00:04:06,900
then came back to this super reduced

00:04:05,639 --> 00:04:11,010
minimal thing anyway none of that's

00:04:06,900 --> 00:04:13,650
important so one of the capabilities

00:04:11,010 --> 00:04:15,750
that they introduced from 94 was this

00:04:13,650 --> 00:04:17,430
shortcuts menu or context menu when you

00:04:15,750 --> 00:04:20,039
right-click you were able to go to a

00:04:17,430 --> 00:04:23,659
menu and take an action that would be

00:04:20,039 --> 00:04:23,659
invoked in your extension

00:04:24,440 --> 00:04:28,320
this was a nice bit of functionality but

00:04:26,970 --> 00:04:30,540
not I don't know

00:04:28,320 --> 00:04:33,360
the end-all-be-all internet explorer

00:04:30,540 --> 00:04:36,360
also introduced Explorer VARs or in what

00:04:33,360 --> 00:04:39,270
some modern browsers call sidebars so

00:04:36,360 --> 00:04:43,250
this is persistent content that frames

00:04:39,270 --> 00:04:43,250
the web UI that you're interacting with

00:04:44,210 --> 00:04:50,370
next up we have toolbars and you can see

00:04:47,730 --> 00:04:53,460
Google is one of the many providers of

00:04:50,370 --> 00:04:56,300
toolbars this would typically be things

00:04:53,460 --> 00:04:59,160
like overriding your search provider

00:04:56,300 --> 00:05:01,320
adding customization - I don't know

00:04:59,160 --> 00:05:05,150
common behaviors that you might have or

00:05:01,320 --> 00:05:10,260
maybe even tabs or uh what do they call

00:05:05,150 --> 00:05:11,760
bookmarks of course this could be pretty

00:05:10,260 --> 00:05:14,370
terrible and you ended up with stuff

00:05:11,760 --> 00:05:17,550
like this where of course Google is a

00:05:14,370 --> 00:05:18,660
contributor to this mess now one of the

00:05:17,550 --> 00:05:22,650
reasons that we ended up in this

00:05:18,660 --> 00:05:24,540
situation is that it in order to install

00:05:22,650 --> 00:05:27,930
an extension you had to execute an

00:05:24,540 --> 00:05:30,000
installer and that would drop a binary

00:05:27,930 --> 00:05:32,850
in your file system and that would

00:05:30,000 --> 00:05:35,220
register you would add a registry

00:05:32,850 --> 00:05:37,230
interest entry so that I would know

00:05:35,220 --> 00:05:40,920
where to look - in order to load your

00:05:37,230 --> 00:05:43,530
extension which made it kind of hard for

00:05:40,920 --> 00:05:45,930
non tech savvy users to get rid of stuff

00:05:43,530 --> 00:05:50,610
and with the capabilities of running in

00:05:45,930 --> 00:05:52,740
a binary it also made it so extension

00:05:50,610 --> 00:05:53,730
developers could make some bad

00:05:52,740 --> 00:05:55,380
not-so-great

00:05:53,730 --> 00:05:58,610
user interface decisions that made it

00:05:55,380 --> 00:06:03,900
hard to get rid of there their tools

00:05:58,610 --> 00:06:05,820
their tools and finally the third major

00:06:03,900 --> 00:06:08,070
or fourth major thing that Internet

00:06:05,820 --> 00:06:11,130
Explorer introduced was this concept of

00:06:08,070 --> 00:06:15,030
browser helper objects or be a chose by

00:06:11,130 --> 00:06:17,850
and large the entire extension feature

00:06:15,030 --> 00:06:19,710
is commonly referred to as be a chose or

00:06:17,850 --> 00:06:21,860
in extension was commonly referred to as

00:06:19,710 --> 00:06:23,790
a Pho even though the first things

00:06:21,860 --> 00:06:26,250
shortcuts Explorer VARs and toolbars

00:06:23,790 --> 00:06:27,540
could be provided without a BHO that's

00:06:26,250 --> 00:06:31,320
kind of an implementation detail but

00:06:27,540 --> 00:06:33,840
whatever so the way the system worked is

00:06:31,320 --> 00:06:36,360
you would compile a native dll that used

00:06:33,840 --> 00:06:37,590
a kind of standardized comm interface in

00:06:36,360 --> 00:06:40,919
order to communicate with

00:06:37,590 --> 00:06:43,740
Internet Explorer and BA chose could

00:06:40,919 --> 00:06:46,530
then have this full set of native

00:06:43,740 --> 00:06:49,380
capabilities and file system access and

00:06:46,530 --> 00:06:52,770
you know potentially owning a user's

00:06:49,380 --> 00:06:55,169
machine not not the best security

00:06:52,770 --> 00:06:56,880
capabilities anyway this one that we're

00:06:55,169 --> 00:06:59,190
looking at right now the web accessible

00:06:56,880 --> 00:07:01,620
web accessibility toolbar produced by

00:06:59,190 --> 00:07:04,970
Vision Australia it would let you do

00:07:01,620 --> 00:07:07,260
things like preview a grayscale mode or

00:07:04,970 --> 00:07:09,800
see what your web experience would be

00:07:07,260 --> 00:07:12,780
like with for color Brian blind users or

00:07:09,800 --> 00:07:14,220
expose in a visual way the accessibility

00:07:12,780 --> 00:07:16,200
tree it was actually a pretty cool

00:07:14,220 --> 00:07:21,300
extension that helped a lot of

00:07:16,200 --> 00:07:24,330
developers Firefox is kind of the next

00:07:21,300 --> 00:07:27,540
major step in the customization of

00:07:24,330 --> 00:07:30,150
browser extensions in that this was the

00:07:27,540 --> 00:07:34,650
first time well there were a couple of

00:07:30,150 --> 00:07:38,520
interesting first with Firefox predating

00:07:34,650 --> 00:07:39,870
Firefox is a application suite that was

00:07:38,520 --> 00:07:44,100
produced by Mozilla called Mozilla

00:07:39,870 --> 00:07:46,260
application suite clever name they they

00:07:44,100 --> 00:07:49,080
basically had an email client in an RSS

00:07:46,260 --> 00:07:51,240
reader and a web browser in this package

00:07:49,080 --> 00:07:54,960
and I think a calendar - of all of this

00:07:51,240 --> 00:07:56,780
package of tools that a user can use to

00:07:54,960 --> 00:08:01,500
you know accomplish their day to day

00:07:56,780 --> 00:08:04,100
native work on their desktop what was

00:08:01,500 --> 00:08:07,830
really cool about this is they used an

00:08:04,100 --> 00:08:10,830
user interface language called Zul XML

00:08:07,830 --> 00:08:13,650
user interface language and it could be

00:08:10,830 --> 00:08:15,780
scripted or programmed scripted with

00:08:13,650 --> 00:08:18,990
JavaScript or programmed with xpcom

00:08:15,780 --> 00:08:21,080
which is a cross-platform component

00:08:18,990 --> 00:08:23,910
object model basically the same thing as

00:08:21,080 --> 00:08:27,389
the com model that ie was using except

00:08:23,910 --> 00:08:29,280
now it's cross platform and you can do

00:08:27,389 --> 00:08:31,470
more languages rather than just the

00:08:29,280 --> 00:08:38,729
specific things that would compile to

00:08:31,470 --> 00:08:41,190
the common interface later on oh right I

00:08:38,729 --> 00:08:43,140
was talking about Mozilla application

00:08:41,190 --> 00:08:45,540
suite that's also known as sea monkey if

00:08:43,140 --> 00:08:46,680
you might have heard that term sea

00:08:45,540 --> 00:08:48,600
monkey was interesting because the

00:08:46,680 --> 00:08:50,930
entire thing was scriptable using Zul

00:08:48,600 --> 00:08:53,330
and one of these languages

00:08:50,930 --> 00:08:56,180
so they were using web technologies to

00:08:53,330 --> 00:09:01,100
build an entire web browser an

00:08:56,180 --> 00:09:03,080
application suite what happened with

00:09:01,100 --> 00:09:05,480
Firefox is they took those capabilities

00:09:03,080 --> 00:09:07,430
and formalized them and expose them as

00:09:05,480 --> 00:09:10,460
the extension platform so it was

00:09:07,430 --> 00:09:12,710
possible in to use web technologies to

00:09:10,460 --> 00:09:14,270
build the web browser it was possible to

00:09:12,710 --> 00:09:15,860
use web technologies to customize the

00:09:14,270 --> 00:09:18,740
web browser they also tried to do some

00:09:15,860 --> 00:09:20,750
sandboxing here to limit the nefarious

00:09:18,740 --> 00:09:24,260
things that extensions could do but

00:09:20,750 --> 00:09:28,400
ultimately it wasn't that hard to get

00:09:24,260 --> 00:09:32,210
full control of the browser with xpcom

00:09:28,400 --> 00:09:34,340
and therefore do terrible things with to

00:09:32,210 --> 00:09:36,560
the user's machine part of what was

00:09:34,340 --> 00:09:38,030
novel with Firefox here though is they

00:09:36,560 --> 00:09:40,130
introduced for the first time the

00:09:38,030 --> 00:09:43,040
ability to install extensions from the

00:09:40,130 --> 00:09:45,980
web so this is a whole interesting

00:09:43,040 --> 00:09:49,250
potential vector for a new class of

00:09:45,980 --> 00:09:53,630
attacks and again like the previous ones

00:09:49,250 --> 00:09:55,130
this is the the app the X become DLL

00:09:53,630 --> 00:09:57,140
that is being loaded in the browser is

00:09:55,130 --> 00:10:01,010
arbitrary binary so you again you could

00:09:57,140 --> 00:10:03,530
do some pretty terrible stuff so inter

00:10:01,010 --> 00:10:06,590
chrome extensions chrome extensions were

00:10:03,530 --> 00:10:08,750
introduced in chrome 4.0 which is very

00:10:06,590 --> 00:10:11,930
very early on I think maybe a year or

00:10:08,750 --> 00:10:14,600
two after chrome was first released the

00:10:11,930 --> 00:10:16,370
main the goals are listed here the of

00:10:14,600 --> 00:10:18,400
the Chrome extension platform but the

00:10:16,370 --> 00:10:21,860
main thing I want to call out is that

00:10:18,400 --> 00:10:23,510
chrome is Webby it is stable and our

00:10:21,860 --> 00:10:25,310
Chrome extensions are Webby stable and

00:10:23,510 --> 00:10:26,900
secure so it's webby in that they're

00:10:25,310 --> 00:10:31,240
built with web technologies HTML

00:10:26,900 --> 00:10:33,560
Javascript and CSS it's stable in that a

00:10:31,240 --> 00:10:35,180
Fault in the extension isn't going to

00:10:33,560 --> 00:10:38,420
bring down the whole browser process the

00:10:35,180 --> 00:10:40,820
worst case is the unstable extension

00:10:38,420 --> 00:10:43,070
will take itself down and you know it'll

00:10:40,820 --> 00:10:45,830
die on its own in the corner and it's

00:10:43,070 --> 00:10:47,740
secure in that it adopts the web

00:10:45,830 --> 00:10:50,690
security model with some additional

00:10:47,740 --> 00:10:52,700
modifications specific to the extension

00:10:50,690 --> 00:10:54,650
platform in order to increase the

00:10:52,700 --> 00:10:57,170
security of the additional capabilities

00:10:54,650 --> 00:11:00,890
that are exposed there this is a

00:10:57,170 --> 00:11:02,990
fundamental shift from how everything I

00:11:00,890 --> 00:11:04,310
guess pre Firefox Firefox had a little

00:11:02,990 --> 00:11:06,259
bit of ability to do this but

00:11:04,310 --> 00:11:07,759
they were still something different they

00:11:06,259 --> 00:11:10,279
were using special technologies to build

00:11:07,759 --> 00:11:11,959
the extensions platform where Chrome

00:11:10,279 --> 00:11:15,589
extensions are all just web technologies

00:11:11,959 --> 00:11:17,089
with some additional api's and I wanted

00:11:15,589 --> 00:11:19,759
to call out it this breaks away from

00:11:17,089 --> 00:11:23,689
native api's with the small Astra that

00:11:19,759 --> 00:11:27,379
content displaying capabilities like we

00:11:23,689 --> 00:11:29,870
originally discussed with Netscape it

00:11:27,379 --> 00:11:32,480
still supports it still supported NPAPI

00:11:29,870 --> 00:11:35,269
and some additional Chrome specific

00:11:32,480 --> 00:11:37,819
stuff Knakal and pinochle but those are

00:11:35,269 --> 00:11:39,470
going away in favor of wasm so let's

00:11:37,819 --> 00:11:42,639
pretend they don't exist I only care

00:11:39,470 --> 00:11:45,680
about extensions anywhere so moving on

00:11:42,639 --> 00:11:49,610
no extension platform no software

00:11:45,680 --> 00:11:52,910
platform is perfect so in the

00:11:49,610 --> 00:11:55,699
intervening years between the original

00:11:52,910 --> 00:11:58,579
release of extensions and the current

00:11:55,699 --> 00:12:01,160
platform as we know it today we started

00:11:58,579 --> 00:12:04,339
to see some patterns in the extension

00:12:01,160 --> 00:12:07,329
ecosystem of both abuse and user error

00:12:04,339 --> 00:12:11,870
on the part of developers where

00:12:07,329 --> 00:12:14,300
developers would do things that weren't

00:12:11,870 --> 00:12:17,420
in their best interest they would have

00:12:14,300 --> 00:12:19,579
accidental vulnerabilities so in order

00:12:17,420 --> 00:12:22,430
to address some of those we introduced

00:12:19,579 --> 00:12:24,559
some stuff like a web accessible

00:12:22,430 --> 00:12:27,620
resources field in your manifest JSON oh

00:12:24,559 --> 00:12:29,029
I just realized I didn't actually go

00:12:27,620 --> 00:12:30,769
over all the contents of a Chrome

00:12:29,029 --> 00:12:31,639
extension we'll get into some details

00:12:30,769 --> 00:12:33,980
later

00:12:31,639 --> 00:12:35,629
so the main entry point of a Chrome

00:12:33,980 --> 00:12:38,120
extension is manifest.json there's a

00:12:35,629 --> 00:12:39,970
JSON file that defines the name of your

00:12:38,120 --> 00:12:42,410
extension the current version what files

00:12:39,970 --> 00:12:48,110
to run in the background what files to

00:12:42,410 --> 00:12:50,269
inject into the page etc in manifest v2

00:12:48,110 --> 00:12:53,300
it introduced this web accessible

00:12:50,269 --> 00:12:56,329
resources so only resources that you

00:12:53,300 --> 00:13:00,379
want to expose to the web context or

00:12:56,329 --> 00:13:03,290
other places would actually appear or be

00:13:00,379 --> 00:13:05,629
accessible and this was addressing a

00:13:03,290 --> 00:13:09,679
common attack vector where people were

00:13:05,629 --> 00:13:11,149
able to use signals that are leaked by

00:13:09,679 --> 00:13:13,879
the extension in order to figure out

00:13:11,149 --> 00:13:15,709
which extension is running and if

00:13:13,879 --> 00:13:16,940
knowing the exploits available on that

00:13:15,709 --> 00:13:18,860
extension could then

00:13:16,940 --> 00:13:21,010
hook in and didn't do bad things to the

00:13:18,860 --> 00:13:21,010
user

00:13:23,350 --> 00:13:30,020
anything else I wanted to cover in that

00:13:25,100 --> 00:13:33,770
nah again no platform is perfect there

00:13:30,020 --> 00:13:36,620
were some issues here even as we tried

00:13:33,770 --> 00:13:38,930
to plug some of these issues are some of

00:13:36,620 --> 00:13:41,750
the exploits that existed one of which

00:13:38,930 --> 00:13:43,730
was that if an extension in its

00:13:41,750 --> 00:13:45,590
background page loaded an iframe of a

00:13:43,730 --> 00:13:48,110
third-party website that third-party

00:13:45,590 --> 00:13:49,640
website could use browser exploits to

00:13:48,110 --> 00:13:51,650
gain control of the extension and

00:13:49,640 --> 00:13:54,920
therefore have elevated privileges to do

00:13:51,650 --> 00:13:56,120
bad things to the user the way that the

00:13:54,920 --> 00:13:57,890
chrome team addressed this was by

00:13:56,120 --> 00:14:00,740
separating the iframe process from the

00:13:57,890 --> 00:14:02,180
extension process so they no longer

00:14:00,740 --> 00:14:05,120
share the same memory and can't be

00:14:02,180 --> 00:14:07,280
directly accessed more broadly site

00:14:05,120 --> 00:14:10,700
isolation is something the extension

00:14:07,280 --> 00:14:15,080
team and chrome team are very concerned

00:14:10,700 --> 00:14:17,660
about we removed the ability to perform

00:14:15,080 --> 00:14:19,850
inline installation so previously it was

00:14:17,660 --> 00:14:23,660
possible to visit some website let's say

00:14:19,850 --> 00:14:25,490
AFRICOM and to click the install Chrome

00:14:23,660 --> 00:14:27,410
extension button and then suddenly you

00:14:25,490 --> 00:14:29,150
would have the buffer extension

00:14:27,410 --> 00:14:31,910
installed in your web browser of course

00:14:29,150 --> 00:14:35,330
a malicious actor could have buffer with

00:14:31,910 --> 00:14:37,400
three FS rather than to directly clone

00:14:35,330 --> 00:14:38,810
their website clone their extension and

00:14:37,400 --> 00:14:41,330
then add a little bit of more code that

00:14:38,810 --> 00:14:43,460
allowed them to exploit the user and the

00:14:41,330 --> 00:14:45,200
end user would be none the wiser

00:14:43,460 --> 00:14:46,460
the end user thinks they're doing

00:14:45,200 --> 00:14:48,220
everything correctly it appears that

00:14:46,460 --> 00:14:49,970
they're doing everything correctly but

00:14:48,220 --> 00:14:53,410
unfortunately they've just given

00:14:49,970 --> 00:14:53,410
somebody else the keys to the kingdom

00:14:53,530 --> 00:14:57,230
the final thing that I want to call out

00:14:55,850 --> 00:15:00,140
in improvements that we've made to the

00:14:57,230 --> 00:15:01,880
current extension platform is changing

00:15:00,140 --> 00:15:04,160
it so that extensions that are loaded in

00:15:01,880 --> 00:15:07,730
the browser the user has more control

00:15:04,160 --> 00:15:11,420
over when and how they run so right here

00:15:07,730 --> 00:15:14,030
I'm interacting with the posit google

00:15:11,420 --> 00:15:17,930
dictionary extension which lets you

00:15:14,030 --> 00:15:19,730
define terms on a page and I know that I

00:15:17,930 --> 00:15:21,740
work with some sensitive data so I don't

00:15:19,730 --> 00:15:23,720
want to expose every page that I visit

00:15:21,740 --> 00:15:25,550
to it I only want to say expose

00:15:23,720 --> 00:15:27,800
google.com in that case I can

00:15:25,550 --> 00:15:30,290
right-click the extension go to this can

00:15:27,800 --> 00:15:33,110
read and change data cite data and

00:15:30,290 --> 00:15:35,180
then select the specific sites where I

00:15:33,110 --> 00:15:36,680
want the extension to run or only run

00:15:35,180 --> 00:15:39,410
the extension in response to clicking

00:15:36,680 --> 00:15:41,470
the extensions browser action the icon

00:15:39,410 --> 00:15:43,820
in the toolbar

00:15:41,470 --> 00:15:46,279
the ultimate goal here is that we're

00:15:43,820 --> 00:15:50,180
giving users more control this change

00:15:46,279 --> 00:15:51,589
was made in chrome 70 and in the future

00:15:50,180 --> 00:15:53,810
we're planning to change it so by

00:15:51,589 --> 00:15:56,480
default when you install an extension it

00:15:53,810 --> 00:15:58,160
will not default to all sites that will

00:15:56,480 --> 00:16:03,199
default to the most limited set of

00:15:58,160 --> 00:16:04,970
capabilities now I talked about some of

00:16:03,199 --> 00:16:07,279
the things that we've done to address

00:16:04,970 --> 00:16:09,110
limitations of manifest v2 but there are

00:16:07,279 --> 00:16:12,230
other things that we can't quite address

00:16:09,110 --> 00:16:15,319
here for one there's not enough focus on

00:16:12,230 --> 00:16:18,380
usability when the chrome team designed

00:16:15,319 --> 00:16:21,170
the extension interaction patterns the

00:16:18,380 --> 00:16:23,839
the platform there was a fundamental

00:16:21,170 --> 00:16:28,130
assumption about how users interact with

00:16:23,839 --> 00:16:29,660
install prompts and I think in the

00:16:28,130 --> 00:16:32,209
assumption that people read all the

00:16:29,660 --> 00:16:35,480
words and understand them and make

00:16:32,209 --> 00:16:39,290
informed decisions that's not always

00:16:35,480 --> 00:16:41,209
true unfortunately I think in the

00:16:39,290 --> 00:16:45,170
intervening years we've seen that users

00:16:41,209 --> 00:16:47,420
don't quite understand what read and

00:16:45,170 --> 00:16:50,720
modify all site data means for example

00:16:47,420 --> 00:16:53,209
and that's an extremely common thing

00:16:50,720 --> 00:16:55,970
because all URLs is extremely common in

00:16:53,209 --> 00:16:58,730
the extension ecosystem the all URLs

00:16:55,970 --> 00:17:01,699
permission allows an extension to eject

00:16:58,730 --> 00:17:04,640
content scripts on any site that you

00:17:01,699 --> 00:17:06,409
visit and in some cases to kind of

00:17:04,640 --> 00:17:10,720
supercharge other api's that the browser

00:17:06,409 --> 00:17:13,819
exposes so the tabs API for example

00:17:10,720 --> 00:17:17,299
actually tabs is a bad example ignore

00:17:13,819 --> 00:17:18,890
that pretend I didn't say that but in

00:17:17,299 --> 00:17:20,949
general all URLs is too common it is

00:17:18,890 --> 00:17:23,419
very powerful permission it is

00:17:20,949 --> 00:17:25,429
unfortunately currently the only way to

00:17:23,419 --> 00:17:29,960
do some things like passively inject UI

00:17:25,429 --> 00:17:32,179
into a page and when it's too common

00:17:29,960 --> 00:17:34,820
that means that we can't detect

00:17:32,179 --> 00:17:39,799
anomalous use of this permission because

00:17:34,820 --> 00:17:42,049
everybody requests it one of the major

00:17:39,799 --> 00:17:44,539
things that has been in the news and the

00:17:42,049 --> 00:17:46,759
recently is that remote code injection

00:17:44,539 --> 00:17:49,309
in an extension is currently allowed and

00:17:46,759 --> 00:17:50,629
it's kind of a problem but it's a

00:17:49,309 --> 00:17:54,019
problem that we don't think we can

00:17:50,629 --> 00:17:55,849
address on the manifest v2 platform

00:17:54,019 --> 00:17:57,619
because it breaks some fundamental

00:17:55,849 --> 00:18:00,289
assumptions about how extensions work so

00:17:57,619 --> 00:18:06,559
that's why it's going into this this

00:18:00,289 --> 00:18:08,719
platform version bump if effectively if

00:18:06,559 --> 00:18:10,249
a code if an extension loads code that

00:18:08,719 --> 00:18:13,549
isn't bundled in the extensions

00:18:10,249 --> 00:18:15,919
executable then it can do anything at

00:18:13,549 --> 00:18:20,269
any time and we can't know about it or

00:18:15,919 --> 00:18:21,649
react to it very well in fact the thing

00:18:20,269 --> 00:18:22,879
that it does today might not be the same

00:18:21,649 --> 00:18:24,529
thing as it does tomorrow or the thing

00:18:22,879 --> 00:18:26,419
that it does for me might be the same as

00:18:24,529 --> 00:18:29,690
it does for you which is I think a

00:18:26,419 --> 00:18:31,879
pretty bad world to be in I mentioned

00:18:29,690 --> 00:18:34,580
this a bit in discussion of all URLs

00:18:31,879 --> 00:18:37,599
powerful api's are currently your only

00:18:34,580 --> 00:18:40,759
option for a lot of capabilities that is

00:18:37,599 --> 00:18:42,889
for a content blocker say in order to

00:18:40,759 --> 00:18:46,399
allow a content blocker to block a

00:18:42,889 --> 00:18:49,129
website I have to give that that content

00:18:46,399 --> 00:18:52,190
blocker access to the websites that I

00:18:49,129 --> 00:18:54,889
want to block which means that it could

00:18:52,190 --> 00:18:57,349
potentially perform who-knows-what

00:18:54,889 --> 00:19:02,779
actions on those sites without my

00:18:57,349 --> 00:19:04,669
knowledge or consent this is more of a

00:19:02,779 --> 00:19:06,379
chrome issue but extensions can tank

00:19:04,669 --> 00:19:07,729
performance and in tank it in a way

00:19:06,379 --> 00:19:12,019
that's not terribly obvious to the

00:19:07,729 --> 00:19:15,399
end-user so by a developer not coding an

00:19:12,019 --> 00:19:17,539
extension in a performant way they can

00:19:15,399 --> 00:19:19,009
unintentionally make the entire browser

00:19:17,539 --> 00:19:22,009
experience significantly worse and

00:19:19,009 --> 00:19:24,589
finally users don't have enough control

00:19:22,009 --> 00:19:26,239
over their experience we address some of

00:19:24,589 --> 00:19:29,179
this or now trying to work through this

00:19:26,239 --> 00:19:32,979
with the upcoming change I mentioned to

00:19:29,179 --> 00:19:37,700
default to restricting all URLs to only

00:19:32,979 --> 00:19:39,259
unclick but that that again is going to

00:19:37,700 --> 00:19:42,649
require a version font in order to

00:19:39,259 --> 00:19:45,559
actually tackle so I think it's fair to

00:19:42,649 --> 00:19:47,629
say that we are not in a situation that

00:19:45,559 --> 00:19:50,869
we want to be that the extension

00:19:47,629 --> 00:19:53,479
platform is more vulnerable kind of by

00:19:50,869 --> 00:19:55,730
design than it should be and to that end

00:19:53,479 --> 00:19:58,370
we're introducing manifest weak

00:19:55,730 --> 00:20:00,039
which will shift some of these basic

00:19:58,370 --> 00:20:03,980
assumptions about how the platform works

00:20:00,039 --> 00:20:06,139
so the broad strokes the goals of

00:20:03,980 --> 00:20:08,120
manifest v3 are to improve the security

00:20:06,139 --> 00:20:11,450
privacy and performance of the Chrome

00:20:08,120 --> 00:20:13,610
extensions platform for security we want

00:20:11,450 --> 00:20:16,940
to improve the security guarantees that

00:20:13,610 --> 00:20:19,190
is we want to be able to say with

00:20:16,940 --> 00:20:20,990
confidence that it is significantly

00:20:19,190 --> 00:20:22,940
harder or impossible for a malicious

00:20:20,990 --> 00:20:26,149
site or extension to gain control of

00:20:22,940 --> 00:20:29,269
these privileged execution environments

00:20:26,149 --> 00:20:31,610
and by extension to increase end-user

00:20:29,269 --> 00:20:33,049
trust that when they extol in an

00:20:31,610 --> 00:20:35,659
extension it isn't going to do anything

00:20:33,049 --> 00:20:39,080
harmful to them without their without

00:20:35,659 --> 00:20:40,789
their direct involvement and that they

00:20:39,080 --> 00:20:44,019
can easily remove an extension and it

00:20:40,789 --> 00:20:46,370
won't cause any lasting harm for privacy

00:20:44,019 --> 00:20:50,990
we want users to have more control over

00:20:46,370 --> 00:20:52,460
their experience so for privacy we we

00:20:50,990 --> 00:20:55,159
want the user to have more control over

00:20:52,460 --> 00:20:58,010
what sites and extension is executing on

00:20:55,159 --> 00:21:00,620
and part of that is going to be a shift

00:20:58,010 --> 00:21:04,010
in or trying to encourage developers to

00:21:00,620 --> 00:21:06,049
shift how they expect their extensions

00:21:04,010 --> 00:21:08,600
to run rather than passively running all

00:21:06,049 --> 00:21:10,549
the time we want extensions to move to a

00:21:08,600 --> 00:21:12,889
model where they're running in response

00:21:10,549 --> 00:21:15,289
to user action so the user is ultimately

00:21:12,889 --> 00:21:18,169
the one that's in control and for

00:21:15,289 --> 00:21:19,730
performance extensions we want

00:21:18,169 --> 00:21:20,990
extensions to be performed by default we

00:21:19,730 --> 00:21:23,000
want developers to fall into a pit of

00:21:20,990 --> 00:21:24,350
success where even if they don't know

00:21:23,000 --> 00:21:27,159
what they're doing and they do some

00:21:24,350 --> 00:21:29,570
anti-patterns worst case scenario that

00:21:27,159 --> 00:21:34,490
things will kind of work out for them

00:21:29,570 --> 00:21:36,019
anyway and by extension reducing the

00:21:34,490 --> 00:21:40,059
amount of resources that an extension is

00:21:36,019 --> 00:21:40,059
using over over the course of its life

00:21:40,510 --> 00:21:46,279
so at this point I want to get a bit

00:21:44,179 --> 00:21:49,360
into the specifics of some of these

00:21:46,279 --> 00:21:53,919
changes runtime host permissions that is

00:21:49,360 --> 00:21:57,980
the ability to inject script into a site

00:21:53,919 --> 00:22:00,289
we want to as I said move to clicked by

00:21:57,980 --> 00:22:02,269
default we have a permissions in the

00:22:00,289 --> 00:22:03,909
Chrome extension platform called active

00:22:02,269 --> 00:22:06,129
tab that

00:22:03,909 --> 00:22:10,179
browser can or an extension can

00:22:06,129 --> 00:22:12,579
currently choose to opt into active tab

00:22:10,179 --> 00:22:14,619
style permissions where when somebody

00:22:12,579 --> 00:22:16,659
clicks a browser action or hits a global

00:22:14,619 --> 00:22:17,979
keyboard shortcut or hits the omnibox

00:22:16,659 --> 00:22:20,229
shortcut that they've read in a store

00:22:17,979 --> 00:22:22,389
Tory triggers the context menu entry

00:22:20,229 --> 00:22:25,329
those are the four ways that you can get

00:22:22,389 --> 00:22:27,909
active tab only then does the extension

00:22:25,329 --> 00:22:30,999
have the ability to run and for

00:22:27,909 --> 00:22:32,859
extensions that do require or need to

00:22:30,999 --> 00:22:34,629
passively inject there will be a way to

00:22:32,859 --> 00:22:36,369
do that but it isn't going to be the

00:22:34,629 --> 00:22:39,129
primary way that most extensions are

00:22:36,369 --> 00:22:41,499
expected to operate this is challenging

00:22:39,129 --> 00:22:45,339
though because it is a shift in the

00:22:41,499 --> 00:22:46,839
extension architecture it will require

00:22:45,339 --> 00:22:48,999
developers to make it a shift in their

00:22:46,839 --> 00:22:51,819
architecture in order to be more evented

00:22:48,999 --> 00:22:53,889
and more contextual so again in the

00:22:51,819 --> 00:22:56,619
future when you click the extension will

00:22:53,889 --> 00:22:58,659
be the default option at install time

00:22:56,619 --> 00:23:01,359
they're still working on the UI for this

00:22:58,659 --> 00:23:04,989
but at install time it will have an

00:23:01,359 --> 00:23:06,099
option it will present the user with an

00:23:04,989 --> 00:23:07,659
option that says when you click the

00:23:06,099 --> 00:23:10,509
extension and they will have a way of

00:23:07,659 --> 00:23:13,089
changing that to to automatically run on

00:23:10,509 --> 00:23:14,919
all sites or on specific sites and then

00:23:13,089 --> 00:23:16,659
developers will also have a way of

00:23:14,919 --> 00:23:19,539
checking their current permissions and

00:23:16,659 --> 00:23:21,459
then re prompting the user if they don't

00:23:19,539 --> 00:23:25,389
have enough if they can't do their job

00:23:21,459 --> 00:23:27,519
basically another significant change

00:23:25,389 --> 00:23:29,559
that we're making is replacing the web

00:23:27,519 --> 00:23:31,389
request block the blocking version of

00:23:29,559 --> 00:23:34,929
the web request API with a new API

00:23:31,389 --> 00:23:37,679
called declarative net request for the

00:23:34,929 --> 00:23:40,509
most part most of the capabilities of

00:23:37,679 --> 00:23:42,039
declarative net request api don't

00:23:40,509 --> 00:23:44,229
actually require host permissions so

00:23:42,039 --> 00:23:46,269
again we're limiting the potential

00:23:44,229 --> 00:23:48,879
vulnerabilities and attack vectors by

00:23:46,269 --> 00:23:52,629
just giving extensions less right out of

00:23:48,879 --> 00:23:54,009
the gate but fundamentally web request

00:23:52,629 --> 00:23:56,049
is more capable because it's a

00:23:54,009 --> 00:23:59,169
imperative API you can literally what

00:23:56,049 --> 00:24:00,999
write whatever code you want and it will

00:23:59,169 --> 00:24:03,249
do it whereas the declarative net

00:24:00,999 --> 00:24:04,869
request API it's declarative so there's

00:24:03,249 --> 00:24:09,219
a limited set of capabilities that you

00:24:04,869 --> 00:24:10,749
can actually execute one of the benefits

00:24:09,219 --> 00:24:13,449
to this from a performance point of view

00:24:10,749 --> 00:24:15,429
is we're getting extensions out of the

00:24:13,449 --> 00:24:17,930
web request flow which means we can

00:24:15,429 --> 00:24:22,080
heavily optimize how

00:24:17,930 --> 00:24:24,690
how network requests are processed by

00:24:22,080 --> 00:24:26,940
extensions currently it takes several

00:24:24,690 --> 00:24:30,690
process hops in order for an extension

00:24:26,940 --> 00:24:32,130
to even get notified that that a request

00:24:30,690 --> 00:24:35,610
is being made and then they have to

00:24:32,130 --> 00:24:36,930
exceed some logic and then pass it back

00:24:35,610 --> 00:24:39,600
to Chrome which takes a couple more

00:24:36,930 --> 00:24:41,370
process hops all of this is potentially

00:24:39,600 --> 00:24:43,440
you know depending on the implementation

00:24:41,370 --> 00:24:45,240
details potentially all able to be

00:24:43,440 --> 00:24:46,950
executed on the network thread meaning

00:24:45,240 --> 00:24:48,840
there's no additional hops that just

00:24:46,950 --> 00:24:52,590
happens immediately as soon as chrome

00:24:48,840 --> 00:24:55,380
executes side so a quick example I'm

00:24:52,590 --> 00:24:56,850
gonna say I have been known to spend too

00:24:55,380 --> 00:24:58,680
much time on Facebook so when I'm at

00:24:56,850 --> 00:25:00,450
work I just don't want it to be

00:24:58,680 --> 00:25:03,390
available at all so I'm going to have a

00:25:00,450 --> 00:25:06,120
simple extension here that requires the

00:25:03,390 --> 00:25:10,950
web request API the request blocking API

00:25:06,120 --> 00:25:12,390
and access to facebook.com so this is

00:25:10,950 --> 00:25:13,920
the manifest.json i mentioned earlier

00:25:12,390 --> 00:25:16,410
and you can see I have a background

00:25:13,920 --> 00:25:19,200
script that I'm going to passively load

00:25:16,410 --> 00:25:22,230
and have running my background script is

00:25:19,200 --> 00:25:24,450
going to receive a details object or a

00:25:22,230 --> 00:25:27,150
request object that contains details

00:25:24,450 --> 00:25:29,190
about the request so this is kind of the

00:25:27,150 --> 00:25:33,660
passive data that's being exposed to the

00:25:29,190 --> 00:25:36,360
extension so any in in this simple

00:25:33,660 --> 00:25:39,420
example anytime I see a request going to

00:25:36,360 --> 00:25:41,550
facebook.com I'm gonna return a object

00:25:39,420 --> 00:25:44,100
that says cancel so the can't request

00:25:41,550 --> 00:25:46,230
will be blocked and otherwise don't do

00:25:44,100 --> 00:25:48,180
any special modification and that's the

00:25:46,230 --> 00:25:49,650
super simple extension the way this

00:25:48,180 --> 00:25:51,810
would look in the declarative net

00:25:49,650 --> 00:25:53,430
requests world is we replace all those

00:25:51,810 --> 00:25:54,930
permissions with a simple one

00:25:53,430 --> 00:25:57,750
declarative net request with no

00:25:54,930 --> 00:26:00,800
additional host permissions no

00:25:57,750 --> 00:26:04,770
additional ability to inject content and

00:26:00,800 --> 00:26:07,350
we're we now have a rules JSON which

00:26:04,770 --> 00:26:09,390
will define the network request

00:26:07,350 --> 00:26:12,960
modification rules that Chrome will

00:26:09,390 --> 00:26:15,060
execute our rules list is pretty simple

00:26:12,960 --> 00:26:16,800
all we're gonna do is if we see a

00:26:15,060 --> 00:26:20,300
request for facebook.com we're gonna

00:26:16,800 --> 00:26:20,300
take the action block that's it

00:26:20,760 --> 00:26:25,020
another major change that is happening

00:26:22,560 --> 00:26:29,250
in chrome manifest v3 is the migration

00:26:25,020 --> 00:26:30,930
from background pages to serviceworkers

00:26:29,250 --> 00:26:32,640
so if you're not familiar with the exten

00:26:30,930 --> 00:26:35,430
and platform the way it currently works

00:26:32,640 --> 00:26:37,560
is if you have when you create an

00:26:35,430 --> 00:26:39,390
extension one of the core pieces that

00:26:37,560 --> 00:26:41,160
you have is a background page or

00:26:39,390 --> 00:26:42,690
background script which has a page

00:26:41,160 --> 00:26:44,850
environment so you you're literally

00:26:42,690 --> 00:26:47,370
running an entire web page headless it

00:26:44,850 --> 00:26:48,600
just doesn't render anything which means

00:26:47,370 --> 00:26:50,040
that you have the full capabilities of

00:26:48,600 --> 00:26:54,450
the web in terms of being able to place

00:26:50,040 --> 00:26:57,900
a audio or being able to use event

00:26:54,450 --> 00:27:00,180
propagation natively in your background

00:26:57,900 --> 00:27:03,330
page in the future we're moving to

00:27:00,180 --> 00:27:04,530
service workers which are web technology

00:27:03,330 --> 00:27:08,040
that's emerging kind of under the

00:27:04,530 --> 00:27:11,730
progressive Web App banner and it allows

00:27:08,040 --> 00:27:14,280
you to have a more ephemeral execution

00:27:11,730 --> 00:27:16,470
environment where your service worker

00:27:14,280 --> 00:27:18,060
gets woken up in response to events it

00:27:16,470 --> 00:27:19,350
has some time that it can execute and

00:27:18,060 --> 00:27:22,110
then when it's no longer doing anything

00:27:19,350 --> 00:27:27,690
it just gets terminated and then frees

00:27:22,110 --> 00:27:30,300
up the resources so this service worker

00:27:27,690 --> 00:27:33,140
environment is extremely similar to the

00:27:30,300 --> 00:27:35,640
current event page system you can have

00:27:33,140 --> 00:27:37,140
today in manifest v2 you can have two

00:27:35,640 --> 00:27:39,690
types of background pages you can have a

00:27:37,140 --> 00:27:41,670
persistent page which lives forever or

00:27:39,690 --> 00:27:44,840
you can have an event page which is only

00:27:41,670 --> 00:27:46,890
woken up in response to events in

00:27:44,840 --> 00:27:49,170
general this is kind of a pattern of

00:27:46,890 --> 00:27:51,540
chrome trying to provide more performant

00:27:49,170 --> 00:27:53,730
options but most people fall back on the

00:27:51,540 --> 00:27:55,440
less performant version so event pages

00:27:53,730 --> 00:27:58,620
have not been as well adopted as we

00:27:55,440 --> 00:28:00,330
would like part of the move to service

00:27:58,620 --> 00:28:02,580
workers is just cleaning up to hit use a

00:28:00,330 --> 00:28:04,500
standardized use the standards that the

00:28:02,580 --> 00:28:06,180
web platform exposes since Chrome

00:28:04,500 --> 00:28:08,370
extensions are webby we want to use the

00:28:06,180 --> 00:28:10,080
web as our default environment with only

00:28:08,370 --> 00:28:12,600
the modifications required to enable

00:28:10,080 --> 00:28:14,370
extensions so some of the challenges

00:28:12,600 --> 00:28:16,410
that this move is going to present to

00:28:14,370 --> 00:28:18,150
developers is they don't have access to

00:28:16,410 --> 00:28:22,320
dom with all of the capabilities that

00:28:18,150 --> 00:28:24,270
involves it requires a more event based

00:28:22,320 --> 00:28:26,900
approach to application development

00:28:24,270 --> 00:28:30,930
which you may or may not currently be

00:28:26,900 --> 00:28:32,910
doing and given that you no longer have

00:28:30,930 --> 00:28:35,790
a persistent global environment you can

00:28:32,910 --> 00:28:39,870
no longer have state sitting there

00:28:35,790 --> 00:28:43,950
passively exposed so let's take a look

00:28:39,870 --> 00:28:45,309
at a couple of examples i am i have a

00:28:43,950 --> 00:28:48,860
simple

00:28:45,309 --> 00:28:50,990
X I have a simple extension here that

00:28:48,860 --> 00:28:52,490
basically is just gonna pass a message

00:28:50,990 --> 00:28:55,130
to the content script that will display

00:28:52,490 --> 00:28:56,660
somebody's name I think in this these

00:28:55,130 --> 00:28:57,770
code samples I left out the content

00:28:56,660 --> 00:28:59,720
script because it's not that important

00:28:57,770 --> 00:29:01,940
but basically it just has a message

00:28:59,720 --> 00:29:03,590
handler that receives a name and then

00:29:01,940 --> 00:29:07,190
logs it nothing fancy

00:29:03,590 --> 00:29:09,530
so here the extension currently has

00:29:07,190 --> 00:29:11,990
persistent persistent true if you don't

00:29:09,530 --> 00:29:15,860
explicitly specify persistent false it

00:29:11,990 --> 00:29:18,980
is by default true and then our

00:29:15,860 --> 00:29:23,090
background script basically if we get a

00:29:18,980 --> 00:29:25,870
message that that sets the user's name

00:29:23,090 --> 00:29:28,160
then we'll set the global name variable

00:29:25,870 --> 00:29:31,010
to whatever them name is that we

00:29:28,160 --> 00:29:32,900
received and then when you click the

00:29:31,010 --> 00:29:36,320
browser action button the icon in your

00:29:32,900 --> 00:29:38,270
the Chrome window then we will send the

00:29:36,320 --> 00:29:39,799
name to the the content script that's

00:29:38,270 --> 00:29:42,410
all that's happening here it's not

00:29:39,799 --> 00:29:44,540
terribly fancy the problem that we're

00:29:42,410 --> 00:29:46,340
gonna have with this in the migration to

00:29:44,540 --> 00:29:48,440
manifest b3 is we're not gonna have

00:29:46,340 --> 00:29:50,240
global state anymore so in order to work

00:29:48,440 --> 00:29:52,490
around that we need to tweak it a little

00:29:50,240 --> 00:29:54,320
bit here we're explicitly calling out

00:29:52,490 --> 00:29:58,130
that persistent is false so now we're

00:29:54,320 --> 00:29:59,660
using an event page and rather than

00:29:58,130 --> 00:30:01,549
having a global variable that we're

00:29:59,660 --> 00:30:04,580
reading and writing we're using chrome

00:30:01,549 --> 00:30:07,700
storage sync to set the user's name when

00:30:04,580 --> 00:30:09,590
they pass it in and we're using criminal

00:30:07,700 --> 00:30:12,530
storage that same tacit to retrieve the

00:30:09,590 --> 00:30:15,500
user's name when when we want to send

00:30:12,530 --> 00:30:18,980
the message to the background page so

00:30:15,500 --> 00:30:21,620
this is basically shifting from global

00:30:18,980 --> 00:30:26,090
state sort in JavaScript to state stored

00:30:21,620 --> 00:30:28,730
in a persistent place the next step in

00:30:26,090 --> 00:30:32,570
the migration is going to be changing

00:30:28,730 --> 00:30:35,630
from an event page to a serviceworker so

00:30:32,570 --> 00:30:37,490
here we have a script it's a single

00:30:35,630 --> 00:30:39,650
person a background page or a single non

00:30:37,490 --> 00:30:41,419
persistent background page here we're

00:30:39,650 --> 00:30:43,850
explicitly declaring a serviceworker and

00:30:41,419 --> 00:30:47,240
it's worth noting here that in the

00:30:43,850 --> 00:30:48,380
introduction of serviceworkers you will

00:30:47,240 --> 00:30:52,400
be able to use service workers with

00:30:48,380 --> 00:30:54,559
manifest v2 this is intended to help

00:30:52,400 --> 00:30:56,210
developers migrate from the current

00:30:54,559 --> 00:30:58,790
platform to the the new version that

00:30:56,210 --> 00:31:01,730
we're going to be using

00:30:58,790 --> 00:31:02,900
the third and I think final change that

00:31:01,730 --> 00:31:06,770
I want to call out is remotely hosted

00:31:02,900 --> 00:31:09,620
code as I said we're not going to allow

00:31:06,770 --> 00:31:10,730
you to execute code that isn't part of

00:31:09,620 --> 00:31:13,280
your extension bundle in the

00:31:10,730 --> 00:31:15,140
not-too-distant future one of the

00:31:13,280 --> 00:31:17,570
challenges that this is going to prevent

00:31:15,140 --> 00:31:20,090
to developers is that it limits the

00:31:17,570 --> 00:31:22,040
dynamism that you can have some people

00:31:20,090 --> 00:31:24,500
are currently using this to not ill

00:31:22,040 --> 00:31:26,450
affect like they're doing good things by

00:31:24,500 --> 00:31:30,650
delivering updates very quickly to users

00:31:26,450 --> 00:31:32,420
or to a be test and make sure that their

00:31:30,650 --> 00:31:38,150
extension is performing as well as it

00:31:32,420 --> 00:31:39,710
can in order to adapt to this developers

00:31:38,150 --> 00:31:42,970
are essentially going to need to bundle

00:31:39,710 --> 00:31:44,990
their third-party code into the art

00:31:42,970 --> 00:31:46,580
bundle the resources that they want to

00:31:44,990 --> 00:31:48,160
load at runtime bundle that into the

00:31:46,580 --> 00:31:52,700
extension and load it from the extension

00:31:48,160 --> 00:31:54,380
so here we're doing a simple incredibly

00:31:52,700 --> 00:31:56,510
simple thing where we have a content

00:31:54,380 --> 00:31:59,930
script that is just going to inject

00:31:56,510 --> 00:32:01,730
jQuery onto the page and as you could

00:31:59,930 --> 00:32:06,050
see we're loading jQuery from the

00:32:01,730 --> 00:32:08,300
official jQuery website all this content

00:32:06,050 --> 00:32:10,250
script does is create an element assign

00:32:08,300 --> 00:32:13,700
the appropriate attributes and then

00:32:10,250 --> 00:32:15,980
append it to the parent document in the

00:32:13,700 --> 00:32:18,320
new world we're going to need to

00:32:15,980 --> 00:32:20,600
explicitly expose the jQuery library

00:32:18,320 --> 00:32:22,100
using web accessible resources and we're

00:32:20,600 --> 00:32:25,070
bundling the library with our extension

00:32:22,100 --> 00:32:28,130
and then when we want to inject it we

00:32:25,070 --> 00:32:32,900
just use chrome runtime get URL to

00:32:28,130 --> 00:32:35,120
retrieve a a URL in order to load the

00:32:32,900 --> 00:32:39,200
specific file the rest is basically the

00:32:35,120 --> 00:32:41,570
same and with that I just want to

00:32:39,200 --> 00:32:44,030
quickly go through the the major changes

00:32:41,570 --> 00:32:45,710
again to the extension platform we're

00:32:44,030 --> 00:32:48,440
trying to move towards an active tab

00:32:45,710 --> 00:32:50,740
style set of permissions so users are in

00:32:48,440 --> 00:32:54,620
control of when the extension is running

00:32:50,740 --> 00:32:56,840
we're moving away from API is that

00:32:54,620 --> 00:33:00,410
leaked data like web requests in order

00:32:56,840 --> 00:33:02,150
to make sure that as little information

00:33:00,410 --> 00:33:04,490
as being exposed to the extension as

00:33:02,150 --> 00:33:06,740
reasonably possible the web requests

00:33:04,490 --> 00:33:09,770
change here is the first of many steps

00:33:06,740 --> 00:33:10,880
in this direction but I think in future

00:33:09,770 --> 00:33:12,380
versions of the

00:33:10,880 --> 00:33:14,930
platform and additional changes in

00:33:12,380 --> 00:33:16,880
manifest v2 or manifest v3 you can

00:33:14,930 --> 00:33:17,720
expect that we're gonna be trying to

00:33:16,880 --> 00:33:19,790
tighten up

00:33:17,720 --> 00:33:21,520
how and when extensions are running and

00:33:19,790 --> 00:33:25,550
what data they're getting access to and

00:33:21,520 --> 00:33:28,430
finally we're replacing a weight this

00:33:25,550 --> 00:33:29,930
there is a fourth one we're replacing

00:33:28,430 --> 00:33:32,150
background pages with service workers

00:33:29,930 --> 00:33:34,910
and that's going to have some impact on

00:33:32,150 --> 00:33:36,620
how extensions are architected and how

00:33:34,910 --> 00:33:39,140
they approach the job that they're doing

00:33:36,620 --> 00:33:40,880
and finally we're removing the ability

00:33:39,140 --> 00:33:42,530
to run remotely hosted code through a

00:33:40,880 --> 00:33:45,730
combination of platform API level

00:33:42,530 --> 00:33:50,990
changes and chrome Chrome Web Store

00:33:45,730 --> 00:33:52,430
policy changes if you are interested in

00:33:50,990 --> 00:33:54,080
continuing to dig into the extension

00:33:52,430 --> 00:33:57,530
ecosystem I'd recommend checking out the

00:33:54,080 --> 00:34:00,800
Google Chrome or Chrome extensions

00:33:57,530 --> 00:34:03,410
google group and also checking out the

00:34:00,800 --> 00:34:05,630
manifest v3 design document the design

00:34:03,410 --> 00:34:07,850
document is public like almost all

00:34:05,630 --> 00:34:10,310
chrome design documents and the

00:34:07,850 --> 00:34:11,600
intention is to this is the launching

00:34:10,310 --> 00:34:13,520
off point this isn't a definitive

00:34:11,600 --> 00:34:14,929
document but it's the starting point

00:34:13,520 --> 00:34:18,399
from which the team is starting to work

00:34:14,929 --> 00:34:18,399
to actually implement these features

00:34:18,730 --> 00:34:23,659
finally if you have any feedback on this

00:34:21,500 --> 00:34:24,139
stuff as the extensions developer

00:34:23,659 --> 00:34:25,669
advocate

00:34:24,139 --> 00:34:28,250
I am extremely interested in it so

00:34:25,669 --> 00:34:30,020
please tell me so I can help make the

00:34:28,250 --> 00:34:31,810
extensions platform as good as possible

00:34:30,020 --> 00:34:33,889
for you and for everyone else

00:34:31,810 --> 00:34:35,000
again the chromium extension Google

00:34:33,889 --> 00:34:35,419
group or if you want to reach out to me

00:34:35,000 --> 00:34:38,210
directly

00:34:35,419 --> 00:34:40,460
I'm dot proto on Twitter and you can

00:34:38,210 --> 00:34:44,060
also schedule office hours to do a one

00:34:40,460 --> 00:34:47,629
on one video based session or phone call

00:34:44,060 --> 00:34:49,730
with me using the bitly link here and

00:34:47,629 --> 00:34:53,300
that is it thank you very much

00:34:49,730 --> 00:35:06,609
[Applause]

00:34:53,300 --> 00:35:06,609

YouTube URL: https://www.youtube.com/watch?v=e_nEP--FOHE


