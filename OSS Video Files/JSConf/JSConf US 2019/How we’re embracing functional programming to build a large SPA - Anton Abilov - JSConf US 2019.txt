Title: How we’re embracing functional programming to build a large SPA - Anton Abilov - JSConf US 2019
Publication date: 2019-09-17
Playlist: JSConf US 2019
Description: 
	Original title: “Everything as a stream!”: how we’re embracing functional reactive programming to build a large SPA

This talk will present why we chose functional reactive programming to solve most things in our SPA - state management, side-effects and reasoning about complex data flows. RxJS is an extremely flexible and powerful library that allows you to work with streams of data. It has given us the flexibility needed to decouple a monolith, spaghetti-code application mid-flight, but with great power comes responsibility - and a lot of pitfalls. We'll reflect on the challenges we're facing as we utilize RxJS’ implementation of Observables and the patterns that have emerged.
Captions: 
	00:00:00,160 --> 00:00:01,360
"Everything as a Stream!": How We're Embracing React Programming to Build

00:00:01,360 --> 00:00:02,360
a Large SPA - Anton Abilov

00:00:02,360 --> 00:00:03,360
>> Hey, everybody!

00:00:03,360 --> 00:00:04,360
OK, so for our next speaker, fun fact: He's never lost a dance of limbo.

00:00:04,360 --> 00:00:05,360
Is limbo a dance?

00:00:05,360 --> 00:00:06,360
He's never lost limbo, just know that.

00:00:06,360 --> 00:00:07,360
So for our next talk it's called everything as a stream.

00:00:07,360 --> 00:00:08,360
Let's welcome Anton Abilov.

00:00:08,360 --> 00:00:09,360
[applause]

00:00:09,360 --> 00:00:12,849
I won't be doing limbo on stage, but if you want to challenge me in limbo later, I'm all

00:00:12,849 --> 00:00:14,209
for it.

00:00:14,209 --> 00:00:16,750
So I'm very excited to be here.

00:00:16,750 --> 00:00:19,320
I came all the way from Norway for this conference.

00:00:19,320 --> 00:00:20,949
It's been awesome so far.

00:00:20,949 --> 00:00:25,990
Thanks to all of you, the organizers, and the speakers of course.

00:00:25,990 --> 00:00:30,950
Now we're going to talk a little bit more about streams, and how we've embraced Functional

00:00:30,950 --> 00:00:39,531
Reactive Programming to build a large single-page application at Ardoq, owe at Ardoq we try

00:00:39,531 --> 00:00:51,530
to help -- we do this by model emthem as a graph so we map out applications, business

00:00:51,530 --> 00:00:55,949
capabilities, their infrastructure and how it all ties together.

00:00:55,949 --> 00:01:02,899
It's a fairly client-side-heavy app with dynamic generated visualizations, real-time collaboration

00:01:02,899 --> 00:01:09,750
and also an interesting mix of technologies that we're going to go a bit in.

00:01:09,750 --> 00:01:14,940
So for this talk we're going to define some concepts to give you an intro to streams and

00:01:14,940 --> 00:01:16,370
Functional Reactive Programming.

00:01:16,370 --> 00:01:21,180
Then we're going to hopefully give you some motivation for why you should care, and then

00:01:21,180 --> 00:01:26,590
we're going to present some building blocks for building an app with RX JS and also talk

00:01:26,590 --> 00:01:31,060
about some roadblocks that we've hit along the way.

00:01:31,060 --> 00:01:36,380
So Functional Reactive Programming, how many of you have used it before.

00:01:36,380 --> 00:01:38,560
Please raise a hand.

00:01:38,560 --> 00:01:40,950
That's a few, not that many.

00:01:40,950 --> 00:01:46,740
I think I can't see because of the lights, but Functional Reactive Programming is programming

00:01:46,740 --> 00:01:51,570
with data streams.

00:01:51,570 --> 00:01:58,480
If you look at the languages a lot of us use, a lot of them involve the principles of reactive

00:01:58,480 --> 00:01:59,480
programming.

00:01:59,480 --> 00:02:10,720
For Redux, for example, you have the store, so that is essentially a stream, right?

00:02:10,720 --> 00:02:15,230
What we do in reactive programming, though, is we elevate streams and we treat them as

00:02:15,230 --> 00:02:21,200
first-class citizens and the functional part comes from the part that we compose them functionally,

00:02:21,200 --> 00:02:24,590
so we map them, filter, and reduce.

00:02:24,590 --> 00:02:28,590
There are many libraries in JavaScript for working with streams, and in this talk we're

00:02:28,590 --> 00:02:32,420
going to focus on RxJS which is probably the most popular one.

00:02:32,420 --> 00:02:37,500
I think it surpassed a million downloads had this year and it's the only dependency of

00:02:37,500 --> 00:02:39,920
Angular.

00:02:39,920 --> 00:02:46,290
So RxJS is a library for transforming, composing and querying streams of data, it implements

00:02:46,290 --> 00:02:51,840
the observable type in JavaScript.

00:02:51,840 --> 00:02:54,600
And many people call it LoDash for streams.

00:02:54,600 --> 00:03:00,120
I think it's quite powerful and I like this definition, and I hope you can see that, as

00:03:00,120 --> 00:03:01,120
well.

00:03:01,120 --> 00:03:12,030
So the observable is comes from reactive tensions, Rx and it allowed us to work with async code

00:03:12,030 --> 00:03:16,880
more easily and when interesting the observable, I like to compare it with promises because

00:03:16,880 --> 00:03:23,500
I think most of us have worked with promises, so whereas a promise emits a single value,

00:03:23,500 --> 00:03:27,730
observables emit multiple values over a period of time.

00:03:27,730 --> 00:03:38,110
A promise is not lazy, it begins promising on crease, so whereas an observable is lazy,

00:03:38,110 --> 00:03:42,900
so you can declare an observable that should fetch data from an API, but it won't actually

00:03:42,900 --> 00:03:48,220
start fetching until you subscribe to it.

00:03:48,220 --> 00:03:53,650
Whereas a promise can't be canceled, observables can be canceled seamlessly and this can be

00:03:53,650 --> 00:03:58,961
quite powerful in some web applications, a lot of the core contributors at RxJS work

00:03:58,961 --> 00:04:05,170
at Netflix and their canonical example is when a user starts buffering a video and then

00:04:05,170 --> 00:04:13,030
goes back, with promises this can be quite complex, while with observables, it's seamless

00:04:13,030 --> 00:04:18,320
and kind of reflecting on these properties, I think the more complex our single-page applications

00:04:18,320 --> 00:04:23,710
become, the more things kind of emit over time and the observable pattern fits much

00:04:23,710 --> 00:04:27,350
better for dealing with this than promises.

00:04:27,350 --> 00:04:31,790
Another reason for why you should care is that the observable is a Stage 1 proposal

00:04:31,790 --> 00:04:33,480
in JavaScript.

00:04:33,480 --> 00:04:35,720
So it might actually become a part of our language.

00:04:35,720 --> 00:04:43,250
And RxJS have also done a lot of work in mirroring that proposal.

00:04:43,250 --> 00:04:45,600
So how did we come across RxJS.

00:04:45,600 --> 00:04:53,330
We went with Redux, then we needed a way to handle async and for simple applications you

00:04:53,330 --> 00:04:54,741
might be fine with Redux thunk.

00:04:54,741 --> 00:05:03,860
But if you have more complex, you might want to look into reDutch ... we tried Redux observable

00:05:03,860 --> 00:05:09,960
and that was the gateway drug to streams.

00:05:09,960 --> 00:05:16,740
So on the left side here you have a typical Redux application or a flux-architecture where

00:05:16,740 --> 00:05:22,750
you have views that trigger actions, these actions are reduced in the store and then

00:05:22,750 --> 00:05:25,820
the views are described in this store to read the application state.

00:05:25,820 --> 00:05:32,330
What Redux observable does is it also adds epochs into the mix.

00:05:32,330 --> 00:05:39,620
Epochs take our actions and can also read the store and they emit new actions, and the

00:05:39,620 --> 00:05:45,240
store and actions are represented as RxJS streams, so you can apply several operators

00:05:45,240 --> 00:05:51,910
to them, and write fairly complex async code seamlessly.

00:05:51,910 --> 00:05:57,050
And for us streams really made sense, so for the actions in store, I mean they emit over

00:05:57,050 --> 00:06:02,130
time, so representing them as a stream makes sense, but then if you think of your web applications

00:06:02,130 --> 00:06:10,139
you also have click events, DOM events, user reaction.

00:06:10,139 --> 00:06:17,850
And thinking of these as streams kind of liberates you, it makes it much easier to model complex

00:06:17,850 --> 00:06:20,240
data flow.

00:06:20,240 --> 00:06:23,880
And you might even think of everything as a stream eventually.

00:06:23,880 --> 00:06:30,600
At least for us that kind of became the case and this is our mantra when building applications.

00:06:30,600 --> 00:06:48,250
And while we were super-zen, like this dog meditating, that's when reality kicked in.

00:06:48,250 --> 00:06:51,920
It was in a quite dire state, with vast amounts of technical debt.

00:06:51,920 --> 00:06:57,900
So as I said, Ardoq is a startup and for the first four years we were trying to find product

00:06:57,900 --> 00:07:02,979
market fit and what that meant is that we needed to add a lot of new features without

00:07:02,979 --> 00:07:06,699
thinking much about technical debt or dealing with that.

00:07:06,699 --> 00:07:11,180
And kind of in the JavaScript world, that also meant that we took a lot of shortcuts,

00:07:11,180 --> 00:07:16,850
introduced a lot of new libraries, and it led to a mix of paradigms that don't mix well

00:07:16,850 --> 00:07:17,850
together.

00:07:17,850 --> 00:07:23,419
We had a new colleague join two years ago, and he said that our app basically showcased

00:07:23,419 --> 00:07:25,680
the history of web development.

00:07:25,680 --> 00:07:27,090
[laughter]

00:07:27,090 --> 00:07:33,800
It had a mix of JQuery, handlebars, React, Redux, all the good stuff for the bad stuff.

00:07:33,800 --> 00:07:39,800
So it was really hard to reason about what's going on.

00:07:39,800 --> 00:07:45,259
If you tried to fix something over here, this other thing broke and also state was all over

00:07:45,259 --> 00:07:51,240
the place, and it was really hard to reason what was going on, and I think that's where

00:07:51,240 --> 00:07:58,690
Redux saved us is it allowed us to think easily about our state.

00:07:58,690 --> 00:08:07,710
The so the plans, first we to rearchitecture mid flight.

00:08:07,710 --> 00:08:09,979
We need to start decoupling or app.

00:08:09,979 --> 00:08:14,509
Then we need to be able to reason about our state and also need good interop with legacy

00:08:14,509 --> 00:08:16,160
state and views.

00:08:16,160 --> 00:08:24,710
So new views need to interrupt with old state and old views and RxJS and Redux was introduced,

00:08:24,710 --> 00:08:28,490
but then we started thinking, do we really need Redux?

00:08:28,490 --> 00:08:32,949
And it was great for starting from scratch, but it was not really obvious how we introduced

00:08:32,949 --> 00:08:37,560
it in a legacy app, especially since we had a lot of state all over the place, simply

00:08:37,560 --> 00:08:42,050
adding a Redux store would mean we had another state manager and so it became an even bigger

00:08:42,050 --> 00:08:48,579
mess and if you read the Redux documentation, they mention RxJS and they say it works together

00:08:48,579 --> 00:08:53,940
with Redux, but I'm going to highlight this one paragraph and that's where they ask: Do

00:08:53,940 --> 00:08:56,999
you really need Redux if you already use RX?

00:08:56,999 --> 00:08:57,999
Maybe not.

00:08:57,999 --> 00:09:03,579
It's not hard to reimplement Redux in RX.

00:09:03,579 --> 00:09:06,120
And that's essentially what we did.

00:09:06,120 --> 00:09:13,810
So we defined these building blocks, which are very similar to a Redux architecture.

00:09:13,810 --> 00:09:15,839
It's a flux-like architecture.

00:09:15,839 --> 00:09:19,329
We have the action stream which ties everything together.

00:09:19,329 --> 00:09:23,790
That is subscribed by the state stream which calculates the application state based on

00:09:23,790 --> 00:09:24,790
actions.

00:09:24,790 --> 00:09:28,869
Then we have view streams which is a layer in between the states and our views, which

00:09:28,869 --> 00:09:34,800
prepares the state for the views so that the views can be as simple as possible, essentially

00:09:34,800 --> 00:09:37,870
pure functions of view streams.

00:09:37,870 --> 00:09:42,470
Finally we have routines and that's where we contain our side effects, so similar to

00:09:42,470 --> 00:09:47,490
epochs and Redux observable and they also allow us to kind of decouple our application,

00:09:47,490 --> 00:09:50,860
so I'm going to jump into each one of these.

00:09:50,860 --> 00:09:56,379
Owe the action stream allows any part of the action to communicate.

00:09:56,379 --> 00:10:01,470
We define it as a subject so a subject is a type of an observable.

00:10:01,470 --> 00:10:07,880
Whereas an observable emits data over time, you can also push data to a subject, using

00:10:07,880 --> 00:10:11,139
the .next method.

00:10:11,139 --> 00:10:17,839
And with these two lines of code we can dispatch our first action and launch a rocket at JSConf.

00:10:17,839 --> 00:10:21,629
However, nothing is happening yet.

00:10:21,629 --> 00:10:23,560
So with that reintroduced routines.

00:10:23,560 --> 00:10:27,360
Rye teens handle actions and produce side effects.

00:10:27,360 --> 00:10:29,759
So here's an example of a routine.

00:10:29,759 --> 00:10:42,600
It pipes the action step.

00:10:42,600 --> 00:10:49,389
So we filter on the launch rocket action then we mapped that to fetching of coordinates

00:10:49,389 --> 00:10:55,730
which could be an API call to get the coordinates and finally if that touches successfully,

00:10:55,730 --> 00:10:58,660
we dispatch an action to proceed.

00:10:58,660 --> 00:11:02,279
And these are three different RxJS operators.

00:11:02,279 --> 00:11:08,720
Of type was custom and in the middle we have switchMap and I purposely chose switchMap

00:11:08,720 --> 00:11:12,839
instead of flat map to show cancellation.

00:11:12,839 --> 00:11:19,189
Essentially what switchMap does is if it starts fetching coordinates and that takes a long

00:11:19,189 --> 00:11:24,269
time and then another action is dispatched to launch another rocket, the first one would

00:11:24,269 --> 00:11:25,790
be canceled.

00:11:25,790 --> 00:11:30,999
So that's how cancellation can easily be built into streams.

00:11:30,999 --> 00:11:38,850
So routines allow us to decouple our application, because modules can simply define what they

00:11:38,850 --> 00:11:45,459
should react to, and our views and other modules can dispatch action, so it allows us to decouple

00:11:45,459 --> 00:11:46,459
them.

00:11:46,459 --> 00:11:50,069
For us that helped a lot, because we had basically a spaghetti monster.

00:11:50,069 --> 00:11:56,360
If one service needed to use another, it basically imported it and if that needs to use the other

00:11:56,360 --> 00:12:00,189
one, then you have circular dependencies and once everything goes over the action stream

00:12:00,189 --> 00:12:05,670
it's much easier to build a modular application.

00:12:05,670 --> 00:12:09,819
And then we hit our first roadblock, and that was dead streams.

00:12:09,819 --> 00:12:13,529
So what is streamed may die.

00:12:13,529 --> 00:12:16,490
Essentially you need to catch your errors with RxJS.

00:12:16,490 --> 00:12:22,310
So in this example if we fetch coordinates and that API call fails, then it wouldn't

00:12:22,310 --> 00:12:25,350
proceed, and that makes sense.

00:12:25,350 --> 00:12:35,899
As you would expect.

00:12:35,899 --> 00:12:40,749
With RxJS you need to catch errors in order to keep your streams alive and that is actually

00:12:40,749 --> 00:12:46,209
a pretty good feature, I think because it forces you to catch errors and define how

00:12:46,209 --> 00:12:48,309
your application should handle them.

00:12:48,309 --> 00:12:52,899
Of course, for production-ready code you might want to make it more robust by centralizing

00:12:52,899 --> 00:12:58,660
stream creation.

00:12:58,660 --> 00:13:06,720
Next we have state streams, so so far we have actions and routines.

00:13:06,720 --> 00:13:12,990
State streams emit the state of our application and here's an example of our state stream.

00:13:12,990 --> 00:13:18,660
So the rocket stream pipes the action stream and accumulates state over time.

00:13:18,660 --> 00:13:28,850
So if this batch action to launch a rocket, it will decrement the fuel of a rocket.

00:13:28,850 --> 00:13:34,480
It's basically a reducer, except it's now modeled as a stream.

00:13:34,480 --> 00:13:38,839
Now that it's modeled as a stream, we can also do a lot of different things with them

00:13:38,839 --> 00:13:40,859
that we're going to go into.

00:13:40,859 --> 00:13:46,369
So one thing is that we can have derived state, so oftentimes in your applications you have

00:13:46,369 --> 00:13:51,100
state which depends on base state.

00:13:51,100 --> 00:13:55,980
For example, we could have refueling cost, which should be calculated using the fuel

00:13:55,980 --> 00:14:03,339
price, for example, so here we pluck the fuel from the rocket stream and then we apply distinct

00:14:03,339 --> 00:14:04,999
until changed.

00:14:04,999 --> 00:14:11,239
That adds memorization, so essentially it won't emit until the fuel changes and then

00:14:11,239 --> 00:14:16,749
we define it with a fuel price stream.

00:14:16,749 --> 00:14:22,810
So when something subscribes to this, it would also do an API call to get the latest fuel

00:14:22,810 --> 00:14:28,619
price and finally we mapped that to the refueling cost.

00:14:28,619 --> 00:14:40,649
And normally, if you would have minimization in a Redux, you would have to add ...

00:14:40,649 --> 00:14:46,339
Next we have proxy state, so going back to our requirements, we have a lot of legacy

00:14:46,339 --> 00:14:54,459
state, and we need to interrupt with that, we can create our own stream creators and

00:14:54,459 --> 00:14:56,989
essentially stream our legacy state.

00:14:56,989 --> 00:15:02,800
So here we create an observable from a backbone model.

00:15:02,800 --> 00:15:08,389
Whenever a backbone model syncs with a server it also pushes that to an observable.

00:15:08,389 --> 00:15:16,179
So we can simply subscribe to these streams and they won't really know about backbone

00:15:16,179 --> 00:15:22,029
being under the hood so we can later swap out backbone easily.

00:15:22,029 --> 00:15:26,489
So the benefits of state streams is that they're quite expressive and powerful, yet easy to

00:15:26,489 --> 00:15:27,559
reason about.

00:15:27,559 --> 00:15:37,959
So going back to this slide, we have minimization built in and once you get used to the paradigm

00:15:37,959 --> 00:15:42,089
it's quite easy to read.

00:15:42,089 --> 00:15:51,540
Then it has good interop with legacy state.

00:15:51,540 --> 00:15:55,589
You could add debouncing, you have minimization with distinct until changed.

00:15:55,589 --> 00:16:01,069
You could add a buffer and there are many other options, as well.

00:16:01,069 --> 00:16:05,410
Then we hit our next roadblock and that's cold versus hot?

00:16:05,410 --> 00:16:10,279
So I think anyone who starts using RxJS hits this roadblock eventually.

00:16:10,279 --> 00:16:15,829
For those of you who are not familiar with cold versus hot, it might also be a bit ambiguous

00:16:15,829 --> 00:16:16,829
terms.

00:16:16,829 --> 00:16:19,360
They didn't make much sense to me the first time I heard them.

00:16:19,360 --> 00:16:27,220
What it means is observables are cold by default and then they can be made hot.

00:16:27,220 --> 00:16:35,089
Cold observables work in the way that every new subscriber gets its own producer.

00:16:35,089 --> 00:16:41,989
So imagine that there's an observable which models the Fibonacci sequence, the first subscriber

00:16:41,989 --> 00:16:47,069
would get the whole sequence and the second subscriber would also get the whole sequence.

00:16:47,069 --> 00:16:55,350
And that makes sense in some cases, with API calls, for example, you would expect that

00:16:55,350 --> 00:16:59,009
every new subscriber would do a new API call.

00:16:59,009 --> 00:17:04,030
However, for some cases such as state streams, that's not really efficient, because every

00:17:04,030 --> 00:17:11,630
new subscriber to a state stream would provide a new producer, so it would recalculate the

00:17:11,630 --> 00:17:15,400
state every time.

00:17:15,400 --> 00:17:19,530
So what we can do for state streams is we have hot observables.

00:17:19,530 --> 00:17:26,900
So essentially it shares the producer among all subscribers.

00:17:26,900 --> 00:17:31,760
Basically cold versus hot is a very important property of streams that has implications

00:17:31,760 --> 00:17:35,630
and you need to think about this when you define your streams.

00:17:35,630 --> 00:17:41,100
And for streams, it's easy, we just make them hot.

00:17:41,100 --> 00:17:47,270
laugh so next we have views and views is a function

00:17:47,270 --> 00:17:55,310
of streams and I hope host of you agree that the views should be dead simple, pure functional

00:17:55,310 --> 00:17:56,490
components.

00:17:56,490 --> 00:18:01,190
It makes them decouple from our business logic and easy to change them later.

00:18:01,190 --> 00:18:09,830
So we have view streams that pipe state streams and prepare them for the view so the views

00:18:09,830 --> 00:18:11,870
can be as simple as possible.

00:18:11,870 --> 00:18:16,200
And we've created a connect utility function.

00:18:16,200 --> 00:18:24,330
Essentially what it does is it subscribes to a stream when the view is mounted and then

00:18:24,330 --> 00:18:31,920
unsubscribes when it's unmounted, so the view would update whenever the view stream updates.

00:18:31,920 --> 00:18:35,290
Next we can also have view streams that fetch data.

00:18:35,290 --> 00:18:40,990
So you could define a view stream as an AJAX call, so you could essentially fetch data

00:18:40,990 --> 00:18:46,850
from the API when the view mounts and map that to props for the view.

00:18:46,850 --> 00:18:51,430
Using another operator, we could also add initial loading props so that the view could

00:18:51,430 --> 00:18:57,290
load something before the API call resolves, and we could also catch errors, so with just

00:18:57,290 --> 00:19:04,120
fivish lines of code and maybe a couple of utility functions we have a view that's coupled

00:19:04,120 --> 00:19:12,050
to an API call without having that API logic in our view.

00:19:12,050 --> 00:19:18,050
So that is essentially our building blocks for building an application with RxJS and

00:19:18,050 --> 00:19:22,930
now I want to reflect a little bit on the higher level pitfalls and benefits of that.

00:19:22,930 --> 00:19:30,170
So one thing is that RxJS is extremely flexible and you need to invest some time in kind of

00:19:30,170 --> 00:19:32,030
dealing with this flexibility.

00:19:32,030 --> 00:19:37,220
Because you can really shoot yourself in the foot when dealing with it.

00:19:37,220 --> 00:19:41,570
Another thing is that you might end up with streams all over the place.

00:19:41,570 --> 00:19:49,800
I heard a podcast with Ben Lesch, the core maintainer of RxJS, and he warns about basically

00:19:49,800 --> 00:19:54,690
creating streams all over the place and that's what many people do, and I like Dan, that's

00:19:54,690 --> 00:19:57,600
the title of my talk.

00:19:57,600 --> 00:20:06,400
However, I think you can circumvent that probably being explicit about your streams.

00:20:06,400 --> 00:20:11,390
So kind of the building blocks I presented, it's not meant to be a framework or a silver

00:20:11,390 --> 00:20:17,370
bullet or everyone it's kind of an architecture that you can build to suit your needs and

00:20:17,370 --> 00:20:20,990
I think RxJS is a great tool for that.

00:20:20,990 --> 00:20:26,710
The next is that debugging can be a bit challenging in RxJS.

00:20:26,710 --> 00:20:33,330
Call stacks are a I will little bit long and hide some important details, however, we have

00:20:33,330 --> 00:20:34,890
tools to also deal with that.

00:20:34,890 --> 00:20:40,940
So you can use RxJS spy to tag your streams and essentially you can replay your streams,

00:20:40,940 --> 00:20:45,790
you can stop them, similar with how you would do with Redux DevTools and the creator is

00:20:45,790 --> 00:20:51,580
also working on a Chrome extension so then we'll have a similar experience and the benefits

00:20:51,580 --> 00:20:56,920
of RxJS and streams is that it is extremely flexible so you can do a lot of things with

00:20:56,920 --> 00:21:03,640
the operators that RxJS provides, and I think also one thing is the kind of the expressiveness

00:21:03,640 --> 00:21:05,260
of reactive programming.

00:21:05,260 --> 00:21:12,700
You can write ten lines of code with a few operators and that defines a fairly complicated

00:21:12,700 --> 00:21:19,350
async logic, and then it's still very easy to reason about.

00:21:19,350 --> 00:21:24,880
And perhaps the most important point is that with streams, there is very little overhead

00:21:24,880 --> 00:21:30,610
to dealing with asynchronous code because once you kind of embrace streams, then everything

00:21:30,610 --> 00:21:36,270
can react to anything at any point in time so you don't really care whether it's async

00:21:36,270 --> 00:21:37,570
or synchronous.

00:21:37,570 --> 00:21:53,660
So I think a think I hear about JavaScript is that we treat asyncnus if you.

00:21:53,660 --> 00:21:59,280
If you find that async code makes things complex in your application, or perhaps if you're

00:21:59,280 --> 00:22:02,880
working on a large single page application and it's difficult to reason about what's

00:22:02,880 --> 00:22:03,880
going on.

00:22:03,880 --> 00:22:05,790
That was the case for us.

00:22:05,790 --> 00:22:10,460
Obviously adding reactive programming to the mix won't solve your problems, but I really

00:22:10,460 --> 00:22:16,760
think it will help you.

00:22:16,760 --> 00:22:21,610
And the next is if you're using Angular or Redux observable.

00:22:21,610 --> 00:22:26,910
So our Angular has a single dependency, and I think that's RxJS, but I think people who

00:22:26,910 --> 00:22:35,260
haven't embraced it: And perhaps also if you use Redux, you should really check out Redux

00:22:35,260 --> 00:22:38,200
observable.

00:22:38,200 --> 00:22:42,960
So I hope this talk was interesting and that you might also start thinking about everything

00:22:42,960 --> 00:22:51,110
as a stream.

00:22:51,110 --> 00:22:59,010

YouTube URL: https://www.youtube.com/watch?v=vd5S_7Qm9WE


