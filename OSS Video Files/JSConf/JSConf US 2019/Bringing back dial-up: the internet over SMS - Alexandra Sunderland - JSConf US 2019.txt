Title: Bringing back dial-up: the internet over SMS - Alexandra Sunderland - JSConf US 2019
Publication date: 2019-09-17
Playlist: JSConf US 2019
Description: 
	Traveling to JSConf US from another country? You probably had to pay an arm and a leg for a data roaming package on your phone.

But there’s a better way! What if I told you that you could stay connected to the internet with a phone that can only send and receive text messages?

In this talk we’ll build our own browser that makes all requests over SMS, so that next time you can forget about that fancy data package.
Captions: 
	00:00:00,429 --> 00:00:01,429
Bringing back dial up: The Internet over SMS

00:00:01,429 --> 00:00:02,429
Alexandra Sunderland KATIE: Hello. How were the snacks? Were they

00:00:02,429 --> 00:00:03,429
good? Yeah. Oh, my gosh, are those chocolate cupcakes with like mousse? I wanted to eat

00:00:03,429 --> 00:00:04,429
probably 20 of those. But I didn't because I wanted to make sure that everyone else got

00:00:04,429 --> 00:00:05,429
one too. So, if you had a chocolate little cupcake, you can thank me for exercising

00:00:05,429 --> 00:00:06,429
restraint. All right. So, our next speaker is Alexandra Sunderland. She's an engineer

00:00:06,429 --> 00:00:07,429
at fellow.app. But the most interesting and amazing thing about her and I am so jealous

00:00:07,429 --> 00:00:08,429
certify she sews her own clothing. So, the dress she is wearing on stage far outshines

00:00:08,429 --> 00:00:09,429
my dress that has code on it because she designed and sewed it herself and it even has a little

00:00:09,429 --> 00:00:10,429
secret pocket on the pack for her to put her like mic pack. Which is genius. And I think

00:00:10,429 --> 00:00:11,429
she needs to start, like, I don't know. She needs to open up an Etsy store to start selling

00:00:11,429 --> 00:00:12,429
them women speakers everywhere. All right. She's going to talk to us about bringing back

00:00:12,429 --> 00:00:13,429
dial up in the Internet over SMS. Give it up for Alexandra.

00:00:13,429 --> 00:00:14,429
[ Applause ] ALEXANDRA: Hi, everyone. I'm Alexandra. I

00:00:14,429 --> 00:00:15,429
work at fellow.app. We're building a product that acts as a manager's copilot. Helps you

00:00:15,429 --> 00:00:18,500
organize your one on ones, organize feedback, action in meetings and track action items.

00:00:18,500 --> 00:00:26,949
If that's interesting, talk to me or check out fell.app. But I want to talk about a completely

00:00:26,949 --> 00:00:32,340
different project I have been working on in my spare time. This is an app that I built

00:00:32,340 --> 00:00:36,980
for my phone that lets you access the Internet in a real browser without having to have a

00:00:36,980 --> 00:00:45,410
data or Wi Fi connection. It transfers it over SMS. To give you a preview, on the left,

00:00:45,410 --> 00:00:50,550
a screenshot of the app where you are going to enter the URL for the website. And on the

00:00:50,550 --> 00:00:55,550
right side, there's a website for my default messaging application that shows the communication

00:00:55,550 --> 00:01:02,350
going on behind the scenes between phone and the server. Why on Earth would I make something

00:01:02,350 --> 00:01:07,950
like this when we have access to free Wi Fi and data connections all over the world. I

00:01:07,950 --> 00:01:14,690
come from a country where I get 2 gigabytes of data every month for $80 and the prices

00:01:14,690 --> 00:01:19,640
for Internet are so expensive in this country that three quarters of a million people are

00:01:19,640 --> 00:01:25,760
still using dial up Internet connections in their home. I come from Canada.

00:01:25,760 --> 00:01:30,150
[ Laughter ] So, the data prices are so expensive just

00:01:30,150 --> 00:01:34,420
when I'm at home in my own country. It's whenever I'm traveling I have to pay an arm and a leg

00:01:34,420 --> 00:01:39,570
just to be able to browse the Internet. To be here right now, I'm paying $100 just to

00:01:39,570 --> 00:01:44,720
get access to 1 gigabyte of data. And this is kind of an issue for me because I really,

00:01:44,720 --> 00:01:49,439
really love to travel. And I spend a lot of time in places like Paris, the streets look

00:01:49,439 --> 00:01:55,260
like this, they're all over the place. I'm extremely directionally impaired. I get lost

00:01:55,260 --> 00:02:00,369
in New York City where the streets are in a grid and numbered. And I end up in these

00:02:00,369 --> 00:02:06,470
situations in places like Paris. And I walk in one direction and I have to take the sub

00:02:06,470 --> 00:02:12,849
quay to get back to where I was originally trying to go. I could download an offline

00:02:12,849 --> 00:02:18,669
map and use that to walk around. But when I want to take the subway, that requires up

00:02:18,669 --> 00:02:25,299
to date real time information and I can't get that online. And so, I decided to do something

00:02:25,299 --> 00:02:29,040
about this. And one of the first things that I notice when had I started trying to solve

00:02:29,040 --> 00:02:35,829
this problem is that my phone plan has unlimited SMS in most countries or very, very cheap

00:02:35,829 --> 00:02:40,999
messaging. So, originally a couple years ago when I started this, the big thing at the

00:02:40,999 --> 00:02:46,529
time was building chat bots. And a lot of companies started building these interfaces

00:02:46,529 --> 00:02:51,180
through like Facebook messenger or whatever. So, I decided that because I have unlimited

00:02:51,180 --> 00:02:57,769
SMS, I'll build a chat bot. And the way that it worked was I would be able to send a message,

00:02:57,769 --> 00:03:03,339
how do I get from here to there. That message was sent to the server, have unlimited access

00:03:03,339 --> 00:03:09,629
to the Internet, you could use the Google API and get it back to me. I could use this

00:03:09,629 --> 00:03:15,939
in France for 15 cents and get all the directions I needed.

00:03:15,939 --> 00:03:22,739
I used this a lot. And I could store address books and say, how do I get home? You could

00:03:22,739 --> 00:03:27,589
say I want to get there at 4 p.m. It would do that for you but, it was so useful that

00:03:27,589 --> 00:03:32,699
I kind of got addicted to having access to the Internet so I would want to look up a

00:03:32,699 --> 00:03:38,239
translation of a word. And build an API integration for that. Or look up a rating for a restaurant

00:03:38,239 --> 00:03:44,219
I was next to and I built an API integration for that. And I started spending so much time

00:03:44,219 --> 00:03:49,099
building these one off integrations. I decided, this is kind of silly. I shouldn't be doing

00:03:49,099 --> 00:03:55,209
this. I should just build a browser instead. And that is what we're going to go other now.

00:03:55,209 --> 00:04:00,760
There are two parts to this project. That's the Android app on one side and the Node.js

00:04:00,760 --> 00:04:05,959
server on the other. The app I built in Android because I figured this is something I'm going

00:04:05,959 --> 00:04:09,409
to use, so, screw iPhones. [ Laughter ]

00:04:09,409 --> 00:04:14,829
I did it in Java and not Kotlin because I was completely new to building phone apps.

00:04:14,829 --> 00:04:21,139
I had never worked with the SMS API and there's a lot more on StackOverflow about SMS with

00:04:21,139 --> 00:04:26,750
Java. I'm going with that because of the community around it. The server I built in Node.js because

00:04:26,750 --> 00:04:32,599
I thought it would be fun to put it on the server where it does not belong to create

00:04:32,599 --> 00:04:40,680
a browser where it's not supposed to be. For communication between these two parts, I used

00:04:40,680 --> 00:04:46,610
Twilio. Twilio is a really great company with a lot of services around communication and

00:04:46,610 --> 00:04:52,560
messaging. The part that I used here is something that lets me forward SMS to a server. So,

00:04:52,560 --> 00:04:57,701
what I've done is I bought a number on Twilio and phone number  every message that I send

00:04:57,701 --> 00:05:01,750
to that phone number will be sent as a post request with a bunch of information about

00:05:01,750 --> 00:05:09,889
the message to my server. To set up the limitations that I had to deal with for this project,

00:05:09,889 --> 00:05:15,970
so, I want to transfer an entire web page over SMS to my phone. But SMS only allows

00:05:15,970 --> 00:05:22,900
for 160 characters at a time which is about the size of a Tweet. So, it kind of is discouraging

00:05:22,900 --> 00:05:28,790
already to have transfer a whole bunch of messages this way. And even more so, if you

00:05:28,790 --> 00:05:33,800
look at a page that's very simple like Google, all we think about when we look at this page

00:05:33,800 --> 00:05:38,729
is the input and the button and maybe the word Google. But when you actually look at

00:05:38,729 --> 00:05:43,400
source of this page, this is a quarter million characters in HTML. So, if we were to break

00:05:43,400 --> 00:05:48,650
this up into messages and send this over without doing anything to it, it would take 1300 SMS

00:05:48,650 --> 00:05:53,710
to get there. And this would cost $10 in Twilio fee alone which is a lot more than I was willing

00:05:53,710 --> 00:06:03,810
to pay. But when we think about the website and the functionality behind it, it's the

00:06:03,810 --> 00:06:10,169
form, the word, the input, the button and it's very, very small and fits into a single

00:06:10,169 --> 00:06:15,680
SMS. And so, when I was going about this, I decided that any web page I have, I'm gonna

00:06:15,680 --> 00:06:21,001
want to make a programmatic way to get it down from this big bulky thing to a tiny thing

00:06:21,001 --> 00:06:25,940
that just represents the interactions that I want to have with it. We're going to walk

00:06:25,940 --> 00:06:31,259
through the life cycle of requesting a website and then actually getting around to rendering

00:06:31,259 --> 00:06:37,330
it. Right off the bat, when we want to the request a URL, we end up with a pretty big

00:06:37,330 --> 00:06:43,659
limitation. URLs, the spec says that a URL can be 2,000 characters in length which could

00:06:43,659 --> 00:06:53,370
end up taking 13 whole SMS., when we start off by being an SMS, we chop off the HTTPS,

00:06:53,370 --> 00:06:58,840
WWW, it's assumed every website has that anyway. It's going to take up space in the message.

00:06:58,840 --> 00:07:06,849
The browser isn't going to support tracking information or fancy JavaScript stuff. So,

00:07:06,849 --> 00:07:11,229
anything that follows after the real part of the URL is something we can just get rid

00:07:11,229 --> 00:07:15,960
of. So, if we have a URL like this, we can just use the yellow part that's highlighted

00:07:15,960 --> 00:07:23,830
and send that over SMS. And to do that, Android has this very, very simple SMS manager API

00:07:23,830 --> 00:07:28,780
which is just lines nine and ten here. This took many hours of StackOverflowing to figure

00:07:28,780 --> 00:07:35,490
out. It was very difficult. But really all you have to do is get permissions to send,

00:07:35,490 --> 00:07:42,050
receive and read SMS. And then initialize the SMS manager API, specify the phone number

00:07:42,050 --> 00:07:46,249
you want to send the message to, specify the body of the message, and then it sends it

00:07:46,249 --> 00:07:52,689
off for you and takes care of everything. So, then this message is sent to the Twilio

00:07:52,689 --> 00:07:57,879
number that I own. And Twilio takes that and turns it into this very, very big JSON blob

00:07:57,879 --> 00:08:02,509
with a whole bunch of information. And I've highlighted the parts that are important here.

00:08:02,509 --> 00:08:07,840
So, at first we have the body which is just the URL that we're requesting. The two number,

00:08:07,840 --> 00:08:12,240
which is the number that I have. And the from number, which is the number that we're gonna

00:08:12,240 --> 00:08:20,259
want to send the data back to at the end. So, this is sent to the server. Which then

00:08:20,259 --> 00:08:26,870
has to do a lot of processing. So, I spend a lot of time working on React components

00:08:26,870 --> 00:08:32,750
which, when you look at them on their own, are very, very small, tiny things and I kind

00:08:32,750 --> 00:08:38,539
of forget sometimes just how big our websites end up being. So, I accidently press new page

00:08:38,539 --> 00:08:44,600
source pretty often when I mean inspect element and I see this wall of HTML that looks horrible

00:08:44,600 --> 00:08:49,440
and it's impossible to understand looking tat like this. And this is the HTML that the

00:08:49,440 --> 00:08:55,300
server has to deal with when it's trying to figure out how to send this over SMS. But

00:08:55,300 --> 00:08:59,740
there are a lot of things in this HTML that we know we can get rid of right off the bat.

00:08:59,740 --> 00:09:04,810
Like, we aren't gonna support JavaScript. We can get rid of all that code. We're not

00:09:04,810 --> 00:09:08,820
going to support CSS, we can get rid of all style tags. We're not gonna support thing

00:09:08,820 --> 00:09:16,330
like images. So, the first thing that happens to get that HTML is on the Node.js server,

00:09:16,330 --> 00:09:23,230
we're using express to set up this web application. We're going to start by grabbing that URL

00:09:23,230 --> 00:09:29,430
from the text message. Pre pending HTTPS. It's a real URL. Just getting the HTML for

00:09:29,430 --> 00:09:36,589
that page and then loading that into a library called Churio. It's like JQuery for the server.

00:09:36,589 --> 00:09:42,290
And all we're gonna use that for is to get the body for the page so we have a much smaller

00:09:42,290 --> 00:09:49,760
subset of code to deal with. The next thing we're gonna do is use this library, sanitize

00:09:49,760 --> 00:09:55,910
HTML. And this is a library this lets you decide what tags you want, what attribute

00:09:55,910 --> 00:10:00,810
on those tags you want, and then you pass it some HTML and it will filter it down to

00:10:00,810 --> 00:10:07,860
what you want it to be. So, I figured in this simple browser, the only tags I care about

00:10:07,860 --> 00:10:14,881
other than text are anchor tags, input elements and forms. That lets you access the rest of

00:10:14,881 --> 00:10:21,380
the Internet and really interact with the text based website. And on those tabs, we

00:10:21,380 --> 00:10:27,220
care about the value, the type, the name. And anything that's class or data. Like, we

00:10:27,220 --> 00:10:32,880
can get rid of. Because we don't have CSS, so, allowing class tags would  or class attributes

00:10:32,880 --> 00:10:38,649
would take up quite a bit of space that we don't really have the ability to use. The

00:10:38,649 --> 00:10:44,600
last part of sanitized HTML here is this exclusive filter. And that's something that lets you

00:10:44,600 --> 00:10:50,000
set up a function of the tags and attributes. So, for example, we might want to hide all

00:10:50,000 --> 00:10:53,880
hidden inputs because we're not going to be able to see them. So, it's kind of wasted

00:10:53,880 --> 00:10:59,269
space. And we get rid of privacy policies in terms and conditions because we're not

00:10:59,269 --> 00:11:06,089
going to click on them. There's no point in setting them. At this point we have a lot

00:11:06,089 --> 00:11:11,470
of  like, a lot of tags and a couple of different HTML tags here and there. And so, we have

00:11:11,470 --> 00:11:16,560
to start compressing the English text. And the logical thing to do at this point is to

00:11:16,560 --> 00:11:24,410
run this through Gzip and send that. But this is not a logical problem. So, the first way

00:11:24,410 --> 00:11:30,000
that I decided to compress the text is by doing character replacements for really common

00:11:30,000 --> 00:11:35,700
words. So, the word the and are extremely common in English. And there are a lot of

00:11:35,700 --> 00:11:40,360
letters in English that aren't used. Like everything except for A and I. And so, what

00:11:40,360 --> 00:11:45,610
I decided to do is replace these common words with a single letter variations. So the becomes

00:11:45,610 --> 00:11:52,600
T and becomes ampersand and so on and so forth. And this is a really easy compression to decompress

00:11:52,600 --> 00:12:00,600
on the Android side. If we see a single later on its own that's not A or I, it's clearly

00:12:00,600 --> 00:12:06,199
that other word. We can do this for the 24 letters that don't mean anything. And then

00:12:06,199 --> 00:12:10,740
we can do the combinations of two letters that don't mean anything and we can compress

00:12:10,740 --> 00:12:16,720
a lot of words in the end this way. To do that, all we have to do is set up this mapping

00:12:16,720 --> 00:12:21,050
of long word to short word. And then just go through that mapping and do a replace all.

00:12:21,050 --> 00:12:26,300
We don't care about the structure of the HTML at this point. It's probably going to be okay.

00:12:26,300 --> 00:12:31,500
If you're visiting a website like Wikipedia, there are probably a lot of really big words

00:12:31,500 --> 00:12:42,860
that don't need to be that big. So, penitentiary means the same as jail, a four letter word.

00:12:42,860 --> 00:12:48,769
We can find the long words, find synonyms for them that are really short and replace

00:12:48,769 --> 00:12:55,190
those. This is not a reversible compression. [ Laughter ]

00:12:55,190 --> 00:13:00,759
So, on the Android side, you could take all the very short words and find the longest

00:13:00,759 --> 00:13:06,840
possible synonyms for them. But it's  you're going to get some interesting results. The

00:13:06,840 --> 00:13:11,750
next way that we're gonna start compressing things is by replacing links. So, when I'm

00:13:11,750 --> 00:13:16,850
on my computer, I have the proper behavior of hovering over a link before I click it,

00:13:16,850 --> 00:13:21,320
seeing that it's a good trustworthy link and then clicking on it. When I'm on my phone,

00:13:21,320 --> 00:13:26,760
I just click on the link and I don't care where it goes. And I decided I should take

00:13:26,760 --> 00:13:32,420
advantage of that behavior. So, what I do here is let's say I have a link in real HTML

00:13:32,420 --> 00:13:39,980
that goes to fellow.app. What I can do is replace that link with a three character long

00:13:39,980 --> 00:13:46,410
random string. Send that over to the browser or the app. And then when I click on the app,

00:13:46,410 --> 00:13:53,339
that three  that thing is sent back to the server. And the server knows, this isn't a

00:13:53,339 --> 00:13:59,560
real URL. I should figure out what it's supposed to be and get the HTML for that link. And

00:13:59,560 --> 00:14:04,889
this saves a lot of space on a lot of websites. Because websites are covered with links. And

00:14:04,889 --> 00:14:09,389
sometimes the words that are link ready really, really short. But the URLs tend to be extremely

00:14:09,389 --> 00:14:16,291
long. So, this saves a lot of space. And the way that I do this is by using Redis, which

00:14:16,291 --> 00:14:24,180
is a in memory key value data store. So, for every URL that's encountered in the HTML,

00:14:24,180 --> 00:14:29,970
it's passed to this URL shortener function. And it generates the random string and then

00:14:29,970 --> 00:14:36,740
is sets the value in Redis as the phone number_short URL. Sorry, that's the key. And then the value

00:14:36,740 --> 00:14:42,699
is the real URL. And this  so, setting it "phone number first reduces the chances of

00:14:42,699 --> 00:14:49,160
there being collisions. But there still is the chance that you'll get the same URL stored

00:14:49,160 --> 00:14:55,290
under the same  the same short link. But that's okay. It's all gonna be our own URL.

00:14:55,290 --> 00:15:02,600
So, it's not a big deal. Okay. So, the last way of compressing the HTML is by using Greek

00:15:02,600 --> 00:15:05,089
characters. [ Laughter ]

00:15:05,089 --> 00:15:12,589
One of the great things about the SMS character set is that it allows for Greek characters.

00:15:12,589 --> 00:15:17,589
And most of the websites that I visit, at least, do not have Greek characters on them.

00:15:17,589 --> 00:15:23,089
And so, I decided to take advantage of that. Now, because we have such a small subset of

00:15:23,089 --> 00:15:29,250
HTML tags and attributes, I figured there's this way of mapping all of these combinations

00:15:29,250 --> 00:15:34,790
to different characters. So, I color coded the original version and the shortened version

00:15:34,790 --> 00:15:40,510
here. So, like the bracket input is that first one, type equals quotation mark is the second

00:15:40,510 --> 00:15:45,660
one. And it might look a bit odd that the words are combined with the different like

00:15:45,660 --> 00:15:50,519
equals and quotation marks. But we know that type is always going to be followed by an

00:15:50,519 --> 00:15:54,990
equals and then a quotation mark. And so, we can do this because we have enough characters

00:15:54,990 --> 00:16:03,209
in the Greek letters to do this explicit mapping. This shortens can quite a bit. One of the

00:16:03,209 --> 00:16:08,540
issues with SMS is that it does not have guaranteed delivery or a guarantee that it will arrive

00:16:08,540 --> 00:16:12,959
in the same order that it's sent. So, we might end up with the situation where we have six

00:16:12,959 --> 00:16:18,279
messages sent. Two of them never make it and then the four that do arrive completely out

00:16:18,279 --> 00:16:25,529
of order. I decided to ignore the fact that some SMS might not make it. In order to recover

00:16:25,529 --> 00:16:30,220
from that kind of issue it would require building out an entire networking system. That was

00:16:30,220 --> 00:16:34,660
a bit above what I wanted to do with this. Because if some of the messages don't arrive,

00:16:34,660 --> 00:16:39,070
you can just reload the page and it's not going to be a huge issue. But for the arriving

00:16:39,070 --> 00:16:45,129
out of order issue, that's quite a big thing with my phone. What I've done here, is if

00:16:45,129 --> 00:16:49,529
these three messages make up the entirety of the HTML to be sent out. We're going to

00:16:49,529 --> 00:17:00,689
prefix them with met data, we can see that they are there. And we wait for a total of

00:17:00,689 --> 00:17:08,620
three. And once that arrives, we know the order to place them in to get valid HTML.

00:17:08,620 --> 00:17:14,950
To do this, Twilio has a great Node.js library. All we have to do is say messages.create and

00:17:14,950 --> 00:17:20,650
then specify the body of the message, who the message is from, and then the number that

00:17:20,650 --> 00:17:26,640
it's going to which is something that was sent in the post request earlier on. So, now

00:17:26,640 --> 00:17:31,300
this is being sent back to the phone. And the way we receive it is through something

00:17:31,300 --> 00:17:36,920
on Android called broadcast receiver. And broadcast receiver is something that you can

00:17:36,920 --> 00:17:41,430
set up to listen out for different signals, for events that happen within the phone. Here

00:17:41,430 --> 00:17:47,530
I have one set up for listening for a coming SMS. And what this does is it just waits for

00:17:47,530 --> 00:17:52,220
all the SMS not shown here, very condensed. But waits for the SMS and sends it off to

00:17:52,220 --> 00:18:00,010
an activities and Android's version of a view. So, once we have all the SMS, we've concatenated

00:18:00,010 --> 00:18:04,990
them together, we have to start by reversing the Greek letter conversion so that we have

00:18:04,990 --> 00:18:10,711
some real HTML to deal with. Reverse the shortened English words. Not the thesaurus way, just

00:18:10,711 --> 00:18:16,300
the single letter shortening. We're going to add some spaces between the closing and

00:18:16,300 --> 00:18:23,120
opening tags just to add a little bit of visual interest to the page because there's no CSS,

00:18:23,120 --> 00:18:27,190
there's nothing. We got to make it a little bit more readable. And then we're going to

00:18:27,190 --> 00:18:32,841
load it in a web view. So, if you've ever opened Slack and clicked on a link and it

00:18:32,841 --> 00:18:39,130
opens Chrome within Slack, they're using a web view component. So, a web view is Chrome

00:18:39,130 --> 00:18:43,880
within an app. And you can either send it a URL to open, or Amazingly, you can send

00:18:43,880 --> 00:18:48,810
it some HTML to open which was the best discovery in the world. When I was building this, I

00:18:48,810 --> 00:18:58,270
thought I was going to have to build my own rendering engine. And I almost stopped. And

00:18:58,270 --> 00:19:03,510
this is what it looks like. So, on the right side we have the actual message that was sent

00:19:03,510 --> 00:19:09,760
to transfer all of Google.ca. And on the left we have the rendering in the app of that web

00:19:09,760 --> 00:19:21,090
page. So, this  [ Applause ]

00:19:21,090 --> 00:19:27,420
This is pretty on point with what Google looked like 15 years ago. So, it's not too bad. When

00:19:27,420 --> 00:19:32,440
I started this out, I had a goal of getting this web page down to 10 SMS. I thought that

00:19:32,440 --> 00:19:37,930
would be a completely unattainable amazing thing to do. It was starting off 1300. And

00:19:37,930 --> 00:19:46,970
I got it down to three SMS for the whole page. So, once I did that, I was really interested

00:19:46,970 --> 00:19:52,830
because this project is named dial up, I was curious to see, how fast is this compared

00:19:52,830 --> 00:19:57,920
to actual dial up? On my phone on a good day using a regular browser, it takes 2 seconds

00:19:57,920 --> 00:20:05,370
to load the page. On dial up a few years ago, 45 seconds. And using this method over SMS,

00:20:05,370 --> 00:20:11,161
it takes 10 seconds. Which when it's the only way you have of accessing the Internet, that's

00:20:11,161 --> 00:20:18,250
not long at all. SMS is not secure at all. [ Laughter ]

00:20:18,250 --> 00:20:24,500
SMS has the capability of being intercepted, it's not encrypted. It's  yeah. It's not

00:20:24,500 --> 00:20:30,410
secure. So, this is not something that should be used for password related, anything credit

00:20:30,410 --> 00:20:35,620
card related. Anything like that. So, one of the things that I do is get rid of sign

00:20:35,620 --> 00:20:43,420
in links, if we're not going to click on them anyways, why use the space. Because it's no

00:20:43,420 --> 00:20:51,520
cookies, on the other hand, this is more secure than other browsers. One of the ways that

00:20:51,520 --> 00:20:57,970
this project could have been quite a bit easier is using MMS instead of SMS. That costs a

00:20:57,970 --> 00:21:04,170
fraction of a cent more and it supports quite a bit more data. But just like Gzip, that

00:21:04,170 --> 00:21:10,700
is just not a fun solution. There are a lot of things that could be done with this project.

00:21:10,700 --> 00:21:14,150
So. , one of the  we could do thing like web

00:21:14,150 --> 00:21:20,200
sockets. Phones and SMS are by nature bidirectional communication. They could send something to

00:21:20,200 --> 00:21:27,930
the phone when there's communication, nothing fancy there. And AJAX, if I visit Tweeter

00:21:27,930 --> 00:21:36,910
a lot, I could store that on my phone ahead of time and use these requests to get only

00:21:36,910 --> 00:21:42,370
the contents of Tweets or the content that really changes. We could use add support for

00:21:42,370 --> 00:21:49,010
JavaScript. Or my favorite one is support for real dial up. So, through the Android

00:21:49,010 --> 00:21:55,000
API you can also make voice calls. And I thought it would be really cool if instead of doing

00:21:55,000 --> 00:22:00,320
SMS, if it did real dial up where you initiate a phone call, the server and phone go back

00:22:00,320 --> 00:22:04,620
and forth for a couple seconds and then all the data far website is transferred that way.

00:22:04,620 --> 00:22:08,910
So, it would probably only take a couple seconds and might end up being cheaper and more reliable

00:22:08,910 --> 00:22:18,040
than SMS. That would be super cool. Going backwards. So, I did not know about travel

00:22:18,040 --> 00:22:24,300
SIM cards when I started this project. [ Laughter ]

00:22:24,300 --> 00:22:29,041
I found about these a few months ago. If you don't know, you can get a travel SIM card

00:22:29,041 --> 00:22:34,640
for about $20 or $30 and it gives you access to about 20 gigabytes of data in whatever

00:22:34,640 --> 00:22:41,350
country you're traveling to. In comparison, I pay $80 for 2 gigs. This is a great solution

00:22:41,350 --> 00:22:45,010
and this is what I do now. [ Laughter ]

00:22:45,010 --> 00:22:49,840
If you want to get in touch with me or check out more about the project, here's my website

00:22:49,840 --> 00:22:50,840
and Twitter. Thank you very much. [ Applause ]

00:22:50,840 --> 00:22:51,840
KATIE: Wow, okay. I take it back. Sewing her own clothes is no longer the most impressive

00:22:51,840 --> 00:22:52,840
thing that Alexandra has on her resume. That was so good and so creative and inspiring.

00:22:52,840 --> 00:22:53,840
And I want to learn more about how your brain works how you came up with this idea at all.

00:22:53,840 --> 00:22:54,840
It's so original. Up next we have Daniel Cousineau is going to be giving us a really  I hope

00:22:54,840 --> 00:22:55,840
it's going to be mind blowing. I'm expecting lots of explosions and lazars. Time is a social

00:22:55,840 --> 00:22:56,840
construct and I'm really, really interested to learn more about what he means by that.

00:22:56,840 --> 00:22:56,858

YouTube URL: https://www.youtube.com/watch?v=BspedNJNn_A


