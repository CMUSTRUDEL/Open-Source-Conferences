Title: JavaScript: Off the Grid - Sophia Shoemaker - JSConf US 2019
Publication date: 2019-09-13
Playlist: JSConf US 2019
Description: 
	Creating a JavaScript application (built with React) for orphans in Ghana offered some unique challenges. Progressive Web Apps (PWAs) are more than just "cool" or "hip" — they can be really important for applications where the internet is spotty, if available at all. Learn why I chose React + AWS Lambda for a country with poor internet connectivity, and general lessons on the often messy and exciting world of creating offline applications.
Captions: 
	00:00:00,120 --> 00:00:01,120
JavaScript: Off the Grid

00:00:01,120 --> 00:00:02,120
Sophia Shoemaker KATIE: Hello. Welcome back to the SitePen

00:00:02,120 --> 00:00:03,120
track. We have Sophia Shoemaker. And you don't want to live in San Francisco with her because

00:00:03,120 --> 00:00:04,120
her grandfather was born right before the 1906 earthquake and she was in the 1989 earthquake.

00:00:04,120 --> 00:00:05,120
So, earthquakes follow her family around. If you live in San Francisco, you might want

00:00:05,120 --> 00:00:06,120
to move. Or maybe get her to move. Anyways. I am super excited about Sophia's talk because

00:00:06,120 --> 00:00:07,120
she's going to be telling us a story about the real world where some of like the hot

00:00:07,120 --> 00:00:08,120
topics, progressive web apps, what everybody is talking about, where the rubber hits and

00:00:08,120 --> 00:00:09,120
the road and these really cool technologies that we geek out about can actually bring

00:00:09,120 --> 00:00:10,120
a positive impact to communities that we want to serve. So, I think this is gonna be a really

00:00:10,120 --> 00:00:11,120
meaningful and awesome talk and I hope you're excited for it. So, let's give it up for Sophia.

00:00:11,120 --> 00:00:12,120
[ Applause ] SOPHIA: Come on, computer. Okay. I think we're

00:00:12,120 --> 00:00:15,980
good. There we go. Okay. Okay. Hi, everybody. I'm Sophia Shoemaker. I work as a freelance

00:00:15,980 --> 00:00:17,620
developer of shoes. Just kidding. [ Laughter ]

00:00:17,620 --> 00:00:21,810
I'm actually a web developer, a freelance web developer. But I really did make she's

00:00:21,810 --> 00:00:27,160
shoes. They're little baby shoes that I made. One of the companies that I work for is called

00:00:27,160 --> 00:00:33,679
Fullstack.IO. We write tons of tech books. We have a book about Angular, a couple books

00:00:33,679 --> 00:00:42,269
about React. We have a Vue book. The latest book that we're hoping to publish in the next

00:00:42,269 --> 00:00:48,219
couple of months is called JavaScript Algorithms and Data Structures. If you would like a beta

00:00:48,219 --> 00:00:55,100
version of the book, you can come find me after my talk. Yeah. Okay. So, before I get

00:00:55,100 --> 00:01:01,079
started with like the technical side of my talk, I want to give a little bit of background.

00:01:01,079 --> 00:01:07,660
So, for various political, social and economic reasons, there are large numbers of orphanages

00:01:07,660 --> 00:01:16,620
in many regions of Africa. For example, in Uganda there were 2500 orphanages in 1992.

00:01:16,620 --> 00:01:26,640
In 2013, there's 50,000. So, governments have begun to crack down on these orphanages because

00:01:26,640 --> 00:01:31,980
in a lot of cases they're not actually helping these children. And in a lot of cases there's

00:01:31,980 --> 00:01:42,060
abuse happening so they shut down and suspended or banned international adoptions. And for

00:01:42,060 --> 00:01:47,630
the past couple of years I have been working on a project for a nonprofit organization

00:01:47,630 --> 00:01:55,560
called Kaeme. They are working with orphanages and the government in Ghana to get these children

00:01:55,560 --> 00:02:01,610
out of these orphanages and back with their families. In a lot of cases these children

00:02:01,610 --> 00:02:08,009
often have family members alive. Sometimes their parents are still alive. So, they try

00:02:08,009 --> 00:02:16,159
to get them back with people that can take care of them or get them adopted. And the

00:02:16,159 --> 00:02:23,860
application that I built allows them to collect data and generate reports based on the data.

00:02:23,860 --> 00:02:28,730
So, I actually inherited this project from a group of grad students at Santa Clara University.

00:02:28,730 --> 00:02:35,940
The first version of the application was built with PHP. Anybody do PHP out here?

00:02:35,940 --> 00:02:41,110
[ Applause ] Which is great. PHP is great. But it needed

00:02:41,110 --> 00:02:50,049
a little bit of reworking to get it in a better shape so I re architected it to use Laravel.

00:02:50,049 --> 00:02:57,620
The Laravel framework. Which was fine. It totally worked great. But the team  as the

00:02:57,620 --> 00:03:02,519
team started to use it more and more, it was getting pretty frustrating for them because

00:03:02,519 --> 00:03:07,599
their Internet connection in Ghana is limited. So, every page load required a round trip

00:03:07,599 --> 00:03:13,730
to the server which when your Internet is slow is not a great experience. So, in addition

00:03:13,730 --> 00:03:21,139
to speeding up the application, Kaeme also wanted the ability to use the application

00:03:21,139 --> 00:03:24,620
offline so that when they went out to the orphanages where there was no Internet, they

00:03:24,620 --> 00:03:30,680
wanted to be able to enter the data into the application directly rather than filling out

00:03:30,680 --> 00:03:34,450
a paper form and taking the paper form back to the office where there was an Internet

00:03:34,450 --> 00:03:40,090
connection and there's the chance of data not getting transferred properly or missing

00:03:40,090 --> 00:03:51,040
data. So, in re architecting this a second time, I opted to leave the database structure

00:03:51,040 --> 00:04:00,159
alone because the database structure was fine. So, it's  I used a MySQL database and left

00:04:00,159 --> 00:04:06,779
that alone and focused on the backend code and the frontend code. So, for the backend,

00:04:06,779 --> 00:04:16,359
I opted to use AWS Lambda. And I used Lambda for two reasons. One, I am not a DevOps expert.

00:04:16,359 --> 00:04:22,900
And Lambda makes it really, really easy to write server side code without having to maintain

00:04:22,900 --> 00:04:29,590
a server. And since I was the only person working on this application, not using my

00:04:29,590 --> 00:04:36,569
headspace to maintain a server was really valuable. And then the other reason was switching

00:04:36,569 --> 00:04:45,639
from an EC2 instance that was running PHP to AWS Lambda significantly reduced the costs

00:04:45,639 --> 00:04:53,190
on AWS. So, right now Kaeme is essentially paying for the database because Lambda is

00:04:53,190 --> 00:05:01,610
so cheap. And then finally, I used React for the frontend because I am a React fan girl.

00:05:01,610 --> 00:05:06,139
And I also needed a single page application. Like I mentioned earlier, making a round trip

00:05:06,139 --> 00:05:12,240
to the server every time a page needed to get loaded was getting frustrating. And so,

00:05:12,240 --> 00:05:19,830
making a single page application was a really great way to reduce the amount of data and

00:05:19,830 --> 00:05:26,419
pages that were getting loaded or the amount of times that I needed to make  get stuff

00:05:26,419 --> 00:05:33,920
from the server. So, okay. So, what is a progressive web app? I'm sure a lot of you are familiar

00:05:33,920 --> 00:05:39,240
with this term. But I just to want run through a couple of like features of a progressive

00:05:39,240 --> 00:05:45,139
web app because this is relevant to what I built for Kaeme. And this isn't a comprehensive

00:05:45,139 --> 00:05:51,430
list of features. But these are the ones that are relevant to the application. So, obviously

00:05:51,430 --> 00:05:55,590
it's progressive. But what does that really mean? It means it works for every user, regardless

00:05:55,590 --> 00:06:00,110
of browser choice. Whether somebody's on a mobile phone that has a really slow connection

00:06:00,110 --> 00:06:10,500
or an awesome Macbook Pro. It works on all different types of devices. Oops. It's responsive.

00:06:10,500 --> 00:06:16,990
Which means it fits any form factor, desktop, mobile, tablet. It's connectivity independent.

00:06:16,990 --> 00:06:23,520
Which means it is enhanced with service workers which I'll get to in a minute to work offline

00:06:23,520 --> 00:06:31,400
around low quality networks. And then it's safe. It's HTTPS to ensure content is served

00:06:31,400 --> 00:06:36,770
securely. So, one of the things you can do to improve your web application is to use

00:06:36,770 --> 00:06:43,110
a tool called Lighthouse. It's from Google. And if you're not familiar with this tool,

00:06:43,110 --> 00:06:49,190
it allows you to do an audit on your web application to see where you can improve in performance,

00:06:49,190 --> 00:06:55,379
accessibility, progressive web apps, all those features that I just talked about. And it

00:06:55,379 --> 00:07:02,780
can give you some great insight into where you can improve your application. So, I tried

00:07:02,780 --> 00:07:08,370
to run Lighthouse on the PHP version of my application and the audit didn't even finish

00:07:08,370 --> 00:07:13,639
running. It stalled out. I don't know if my PHP application was just really unprogressive

00:07:13,639 --> 00:07:20,440
or I don't know what. Or maybe Lighthouse isn't meant to run on PHP apps. It just didn't

00:07:20,440 --> 00:07:25,919
work. I don't know if you can see, but the text says, as page load time increases from

00:07:25,919 --> 00:07:31,590
1 second to 7 seconds, the probability of a mobile site visitor bouncing increases 113%.

00:07:31,590 --> 00:07:38,979
So, yeah. it just was not great. But, so, I ran it again

00:07:38,979 --> 00:07:44,449
on the new version and this is just a, you know, a screenshot of all the information

00:07:44,449 --> 00:07:51,180
you can get from Lighthouse. It's a pretty extensive report. It's a great way to just

00:07:51,180 --> 00:07:58,050
get a gut check of what  how you can improve your application. Here's just another screenshot

00:07:58,050 --> 00:08:02,139
of performance. Just some various things that you can do to improve your application. And

00:08:02,139 --> 00:08:08,999
then here's another  this section is specifically about progressive web app features that you

00:08:08,999 --> 00:08:16,999
can improve on. Okay. So, service workers. So, in order to make any application accessible

00:08:16,999 --> 00:08:22,879
offline, you have to make use of service workers. Service workers are JavaScript files that

00:08:22,879 --> 00:08:30,250
allow you to cache other resources such as other JavaScript files, CSS, images. Then

00:08:30,250 --> 00:08:37,490
they can then be available offline. Service workers only run over HTTPS and make use of

00:08:37,490 --> 00:08:44,920
promises. So, let's take a look at how service worker works. So, there are three stages in

00:08:44,920 --> 00:08:49,410
the life cycle of a service worker. The registration phase, the installation phase and the activation

00:08:49,410 --> 00:08:56,240
phase. To register, a service worker will need to add code like this. The honor block

00:08:56,240 --> 00:09:04,389
detects whether or not service workers are supported before trying to register it. Then

00:09:04,389 --> 00:09:08,780
the register function registers a service worker which is just a JavaScript file in

00:09:08,780 --> 00:09:14,690
our application. And then we have a then and a catch to handle what happens when the promise

00:09:14,690 --> 00:09:22,980
is either resolved or rejected. So, this is what our service worker file actually looked

00:09:22,980 --> 00:09:31,450
like. It handles the install event and caches the context. We add the install event and

00:09:31,450 --> 00:09:38,700
call the wait until method on the event. This holds the service worker in the installing

00:09:38,700 --> 00:09:45,950
phase until everything is ready  is good to go. Inside the wait until  sorry. Inside

00:09:45,950 --> 00:09:51,730
the wait until the cache is dot open method is called and that creates a new cache called

00:09:51,730 --> 00:09:58,990
v1 which will be v1 of the site's resources. And that can be any name that you want. It

00:09:58,990 --> 00:10:06,080
doesn't have to be v1. So, if your service worker has been previously installed and there's

00:10:06,080 --> 00:10:11,990
a new version of your worker available on refresh or page load. For example, you've

00:10:11,990 --> 00:10:18,550
updated your application. You have a new JavaScript file or new CSS or it's been edited. The new

00:10:18,550 --> 00:10:24,589
version is installed, but it's not activated. So, in this code you'll notice that it's the

00:10:24,589 --> 00:10:30,420
same install code that I showed you in the previous slide. We've renamed the cache and

00:10:30,420 --> 00:10:39,590
we have new assets to install. It's now called v2. So, the new version of your service worker

00:10:39,590 --> 00:10:43,399
is only activated when there are no other pages loaded that are still using the old

00:10:43,399 --> 00:10:49,250
service worker. And as soon as there's no more pages loaded, then the new service worker

00:10:49,250 --> 00:10:54,570
gets activated. So, if you're a React fan like me, create React app does this all for

00:10:54,570 --> 00:11:03,210
free so you don't have to write this stuff. So, when you create a new React application,

00:11:03,210 --> 00:11:07,750
there's an option to add service workers and cache assets offline. And this is an example

00:11:07,750 --> 00:11:16,940
of what your index.JS file looks like in React. So, if you switch the last line, service worker.unregister

00:11:16,940 --> 00:11:25,589
to service worker.register, that will allow you to make use of service workers. Another

00:11:25,589 --> 00:11:31,010
aspect of this project that was pretty critical, I don't know if this was obvious or not, but

00:11:31,010 --> 00:11:36,540
I needed to know when the user was online or offline. The navigator online property

00:11:36,540 --> 00:11:44,760
returns the status with true, meaning online, and false meaning offline. So, in the application

00:11:44,760 --> 00:11:48,839
I start nod notice a lot of code that looked like this. A bunch of if elses all over the

00:11:48,839 --> 00:11:54,209
place. And to make my code more maintainable, I created a function that took two callbacks

00:11:54,209 --> 00:12:01,051
as parameters. An online callback and an offline callback. So, using this function, I could

00:12:01,051 --> 00:12:09,330
customize what happens when a user is offline versus online. So, when the user is offline,

00:12:09,330 --> 00:12:13,670
how do we store data that's getting created and updated? There's a few options for storing

00:12:13,670 --> 00:12:20,990
data offline. But first I want to give a few guidelines on storing data offline. Number

00:12:20,990 --> 00:12:26,200
one, like, the limit of  you have a limit of 50% of the total hard drive storage. Like,

00:12:26,200 --> 00:12:31,670
for example, if you have a 500 gigabyte hard drive, 250 gigabytes total allowed for the

00:12:31,670 --> 00:12:39,449
browser. And then there's a limit of 10 megabytes to 2 gigabytes per group. A group is an origin

00:12:39,449 --> 00:12:48,410
like Google.com. Okay. So, in researching the technologies I needed to use for this

00:12:48,410 --> 00:12:53,820
project, I found that there was a few different options out there for storing data offline.

00:12:53,820 --> 00:12:59,400
There are a lot out there. But these are the ones that I became familiar with. Familiar

00:12:59,400 --> 00:13:07,430
with for this project. One is PouchDB in connection with CouchDB. PouchDB is a library that syncs

00:13:07,430 --> 00:13:19,480
with CouchDB, a NoSQL database. It makes going offline. If you have a user that's editing

00:13:19,480 --> 00:13:26,210
data offline and a different use offline and there are merge conflicts, PouchDB allows

00:13:26,210 --> 00:13:34,579
you to gracefully handle those issues. So, the con in using this for my project was that

00:13:34,579 --> 00:13:40,389
I would have to migrate my MySQL database structure to a NoSQL format which is something

00:13:40,389 --> 00:13:47,990
I'm not familiar with. And I have been burned in the past biting off more than I can chew

00:13:47,990 --> 00:13:56,029
with refactors. I wanted to leave the database along so I opted not to use PouchDB with CouchDB.

00:13:56,029 --> 00:14:02,269
And on top of it, the application  the data was really meant to be relational database.

00:14:02,269 --> 00:14:11,139
It didn't really fit the NoSQL format of things. Okay. So, another option is IndexedDB, a low

00:14:11,139 --> 00:14:20,149
level way to store significant amounts of data including files and blobs. And this is

00:14:20,149 --> 00:14:24,140
from the MDN docs. IndexedDB API is powerful but may seem too

00:14:24,140 --> 00:14:30,589
complicated for simple case. If you'd prefer a simple API, try indications such as that

00:14:30,589 --> 00:14:37,190
huge long list that make IndexedDB a little more programmer friendly. I read this and

00:14:37,190 --> 00:14:45,529
said, hm, I'm not going down the path. I'm the only developer on this project. This looks

00:14:45,529 --> 00:14:51,600
a little more complicated and I don't have seven, eight, nine, ten months to work on

00:14:51,600 --> 00:14:58,149
this. So, I opted not to. But I think if I went back and re architected the application

00:14:58,149 --> 00:15:03,839
I would go down this path of using the IndexedDB because it fit better with the data that I

00:15:03,839 --> 00:15:11,000
was saving offline. But ultimately I ended up using localStorage. So, localStorage is

00:15:11,000 --> 00:15:18,040
a property, and the stored data is saved across browser sessions. It's a key value store that

00:15:18,040 --> 00:15:26,009
has a set, get and remove item methods on it. So, only strings can be stored in localStorage.

00:15:26,009 --> 00:15:30,910
So, if you want to store anything other than a string, you have to turn your data into

00:15:30,910 --> 00:15:37,269
a string. One caveat is that while storage limits for localStorage are larger than using

00:15:37,269 --> 00:15:43,160
cookies, you can't store like gigabytes for the user unless the user allows for it for

00:15:43,160 --> 00:15:50,410
the domain. So, typically localStorage is limited to 5 10 megabytes. Here is an example

00:15:50,410 --> 00:16:03,079
of how I used localStorage in the Kaeme application. I was using JSON, user the JSON.stringify,

00:16:03,079 --> 00:16:11,279
and then I would pull them out of local storage and turn them back into JSON objects. So,

00:16:11,279 --> 00:16:17,060
in order to properly save a child's record online and offline, I used my online offline

00:16:17,060 --> 00:16:24,980
function I showed you a couple slides back and saved it via API to the database or updated

00:16:24,980 --> 00:16:30,680
the Q value in local storage. And then any time the child's record is saved offline,

00:16:30,680 --> 00:16:38,220
I set a flag in the local storage record indicating the record had an optimistic update. You can

00:16:38,220 --> 00:16:48,060
see right there. Okay. hopefully this demo goes okay. Let me go back. This is what the

00:16:48,060 --> 00:16:54,170
Kaeme application looks like. Let me get some test data here. You can seeing right here

00:16:54,170 --> 00:17:01,079
this first record here. Actually, let me go back a little bit. So, this black button right

00:17:01,079 --> 00:17:08,600
here allows me to download a particular record and save it offline. It might take a little

00:17:08,600 --> 00:17:19,350
bit of time. We'll see how long it takes. See if the Wi Fi works okay. Come on. Great.

00:17:19,350 --> 00:17:26,570
Okay. So, now it's gray, that means that the  that record  particular record  is saved

00:17:26,570 --> 00:17:34,950
offline. Right now I'm online. so, if I go in and edit, I can just change  hello, hello.

00:17:34,950 --> 00:17:49,409
And then I'll save it. And then if I go back up here. And if I go up here and then turn

00:17:49,409 --> 00:17:58,690
off Wi Fi. You can see now that the only records that are showing up are the ones that I've

00:17:58,690 --> 00:18:13,120
downloaded to my application. And so, then I'll go in here and edit this one again. Earth 

00:18:13,120 --> 00:18:28,990
are not great. Okay. So, then if I go back. So, I have these two records here that are

00:18:28,990 --> 00:18:33,940
highlighted red which means that there's been data that's been saved offline. So, then if

00:18:33,940 --> 00:18:53,980
I go back online. Get connected again. And then we go back. If guy in here, it says this

00:18:53,980 --> 00:18:59,620
child has updates that were done offline. So, riff the option to upload the offline

00:18:59,620 --> 00:19:04,910
data. Or I can opt to not upload that data if I wanted to. So, yeah. Let me just go back

00:19:04,910 --> 00:19:18,429
to here. Okay. So, yeah. That's how it works. [ Applause ]

00:19:18,429 --> 00:19:27,220
Okay. So, in this process there were quite a few challenges and frustrations that came

00:19:27,220 --> 00:19:34,370
with this project. Dealing with offline applications is not an easy task. At one point the team

00:19:34,370 --> 00:19:40,400
in Ghana was having some issues with the application and I couldn't reproduce the issue on my end.

00:19:40,400 --> 00:19:46,860
It always works on your own computer, right? So, we had a Skype call with them and they

00:19:46,860 --> 00:19:53,360
were literally holding a laptop up with the, you know, the application running with the

00:19:53,360 --> 00:19:57,770
computer that was offline. Because you can't do a screen share with the computer that's

00:19:57,770 --> 00:20:02,779
offline. So, I had them opening like Chrome Dev tools and inspecting the elements and

00:20:02,779 --> 00:20:08,510
clicking inside, you know, trying to figure out what the problem was. So, like the time

00:20:08,510 --> 00:20:14,799
difference, the language barrier and the technical capabilities of the team made for some interesting

00:20:14,799 --> 00:20:19,620
challenges and required a lot of patience on both ends. And we're still working out

00:20:19,620 --> 00:20:25,429
some bugs. But in general it's a much better experience. So, this is the Kaeme team in

00:20:25,429 --> 00:20:33,190
Ghana. So, in thinking about how to build this application, I knew that I could impose

00:20:33,190 --> 00:20:39,840
a few constraints on how the offline interactions work. The Kaeme team in Ghana is very small.

00:20:39,840 --> 00:20:44,309
There's just four people working on it to gather information about the children. So,

00:20:44,309 --> 00:20:48,890
it was easier to manage how the users would be allowed to use the application. I knew

00:20:48,890 --> 00:20:55,480
that there would not be a risk of a user potentially editing a child's record online and then somebody

00:20:55,480 --> 00:21:00,990
else editing the record offline because they all work together. Obviously, if the team

00:21:00,990 --> 00:21:06,950
scaled up in any way, I would have to rethink my approach. And there would be different

00:21:06,950 --> 00:21:12,900
constraints. For example, as a number of users scaled up, maybe I would have a child worker

00:21:12,900 --> 00:21:19,960
assigned to a particular user to ensure that the data would not get overwritten or maybe

00:21:19,960 --> 00:21:27,520
I would consider using PouchDB with CouchDB so that I could handle the conflicts there.

00:21:27,520 --> 00:21:32,650
And then finally one last thing, I just wanted to share something that I have seen floating

00:21:32,650 --> 00:21:39,820
around the Internet in a few places. It's this Japanese concept of ikigai. If you happen

00:21:39,820 --> 00:21:48,510
to speak Japanese, you can come up to me later and correct my pronunciation. Everyone according

00:21:48,510 --> 00:21:55,490
to Japanese culture has one. And discovering it brings satisfaction and meaning to life.

00:21:55,490 --> 00:22:03,090
When you combine these four things, what you love doing, what the world needs, what you

00:22:03,090 --> 00:22:10,900
can get paid to do and what you are good at, you can find your sense of purpose, your Ikigai.

00:22:10,900 --> 00:22:18,030
For me, this project has been an Ikigai experience. I loved stretching my engineering skills and

00:22:18,030 --> 00:22:23,120
feeling like this project has provided more value to the world than some of the other

00:22:23,120 --> 00:22:28,760
projects that I worked on. So, I hope you can all kind  oh. There's the Ikigai. It's

00:22:28,760 --> 00:22:36,860
in the center of the circle there. I hope you can use JavaScript in helpful and useful

00:22:36,860 --> 00:22:42,060
ways that go beyond the typical ways that we think of creating web applications. I hope

00:22:42,060 --> 00:22:44,275
you can all kind your Ikigai experience with JavaScript. And that's it. Thanks.

00:22:44,275 --> 00:22:45,275
[ Applause ] KATIE: Hello, wow. That was so good. How many

00:22:45,275 --> 00:22:46,275
of you feel like your current job is your Ikigai? Yeah. I can  I can't see much. I

00:22:46,275 --> 00:22:47,275
don't know how many people actually raised their hands. I'm sorry. That didn't work as

00:22:47,275 --> 00:22:48,275
well as I'd hoped. Anyway. Oh, my goodness. It's gonna be a great day today, folks. I

00:22:48,275 --> 00:22:49,275
hope you're ready. So, coming up next here in the SitePen track we have Lara Schenck

00:22:49,275 --> 00:22:50,275
is going to talk about CSS algorithms which might seem like a contradiction in terms,

00:22:50,275 --> 00:22:51,275
but actually is not. So, we'll all meet up back here at 11:15. And I hope to see you

00:22:51,275 --> 00:22:51,279

YouTube URL: https://www.youtube.com/watch?v=YFrCEbx1oW0


