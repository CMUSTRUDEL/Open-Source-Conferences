Title: Componentizing end-to-end tests - Nicholas Boll - JSConf US 2019
Publication date: 2019-09-11
Playlist: JSConf US 2019
Description: 
	Component libraries and design systems are becoming popular and more complex. They abstract our UI to make us more productive. Why can’t they do the same with end-to-end tests? In this talk, we’ll explore how our component libraries can export UI test helpers to make testing easier, faster and more reliable in downstream applications.
Captions: 
	00:00:00,160 --> 00:00:01,160
Componentizing End-to-End Tests - Nicholas Boll

00:00:01,160 --> 00:00:02,160
>> Mic check.

00:00:02,160 --> 00:00:03,160
Great, this works.

00:00:03,160 --> 00:00:04,160
Guys doing well?

00:00:04,160 --> 00:00:05,160
Woo!

00:00:05,160 --> 00:00:06,160
OK.

00:00:06,160 --> 00:00:07,160
All right, so for our next speaker, we have Nicholas Boll, talking about componentizing

00:00:07,160 --> 00:00:08,160
end to end tests.

00:00:08,160 --> 00:00:09,160
Are we ready?

00:00:09,160 --> 00:00:10,160
All right!

00:00:10,160 --> 00:00:11,160
[applause]

00:00:11,160 --> 00:00:12,160
>> All right, starting a little bit early.

00:00:12,160 --> 00:00:13,160
Just waiting for the slides.

00:00:13,160 --> 00:00:14,160
I think I'm hooked up.

00:00:14,160 --> 00:00:15,160
OK, all right, I'm talking about componentizing end to end tests, so, this is my first time

00:00:15,160 --> 00:00:16,160
being at a conference speaking, so -- AUDIENCE: Whoo!

00:00:16,160 --> 00:00:17,160
[applause]

00:00:17,160 --> 00:00:21,949
Thank you, so I'm going to start with some ice-breaker questions that will make me feel

00:00:21,949 --> 00:00:24,349
better.

00:00:24,349 --> 00:00:28,500
So who here has written web applications?

00:00:28,500 --> 00:00:29,599
Looks like quite a bit.

00:00:29,599 --> 00:00:30,599
All right.

00:00:30,599 --> 00:00:31,970
Who's written unit tests?

00:00:31,970 --> 00:00:32,980
. Yeah.

00:00:32,980 --> 00:00:35,020
All right.

00:00:35,020 --> 00:00:40,300
So who writes end to end tests using Cypress, Selenium, etc.?

00:00:40,300 --> 00:00:42,489
OK, less people.

00:00:42,489 --> 00:00:49,010
All right, so who thinks they're easy to write, debug or maintain?

00:00:49,010 --> 00:00:51,379
Not very many hands.

00:00:51,379 --> 00:00:52,770
OK, cool.

00:00:52,770 --> 00:00:54,039
So this talk will help.

00:00:54,039 --> 00:00:59,610
All right, so I'm going to put a statement out there that writing end to end tests is

00:00:59,610 --> 00:01:00,610
hard.

00:01:00,610 --> 00:01:04,010
So one thing is figuring out how to select something.

00:01:04,010 --> 00:01:06,440
Do you use -- there's all kinds of different things?

00:01:06,440 --> 00:01:09,610
Do you even control what they are going to be?

00:01:09,610 --> 00:01:16,340
Race conditions, both in your applications and also maybe in your test runner.

00:01:16,340 --> 00:01:19,790
Data can be hard to control.

00:01:19,790 --> 00:01:22,580
And also UI changes tend to break tests.

00:01:22,580 --> 00:01:28,700
I know that's for the last five years at a company, we had an offshore doing our end

00:01:28,700 --> 00:01:34,240
to end tests for us, and they were -- they had an entire team just trying to keep those

00:01:34,240 --> 00:01:41,350
running, so the tests were constantly breaking.

00:01:41,350 --> 00:01:45,670
Now that I've postulated all of that, I'm Nicholas Boll, I'm a design system engineer

00:01:45,670 --> 00:01:47,070
at Workday.

00:01:47,070 --> 00:01:49,400
It's kind of what it sounds like.

00:01:49,400 --> 00:01:53,410
I'm an engineer on the design system to Workday.

00:01:53,410 --> 00:01:56,670
It's called Canvas.

00:01:56,670 --> 00:02:00,610
It's open source in July.

00:02:00,610 --> 00:02:06,230
So how do we break down our applications, because we have to build complex applications,

00:02:06,230 --> 00:02:07,840
so how do we do it?

00:02:07,840 --> 00:02:11,920
So this is just a screenshot that I took from Essentia's website.

00:02:11,920 --> 00:02:21,480
It's a complex application of just like a dashboard, some menu items, and stuff.

00:02:21,480 --> 00:02:28,470
So we probably try and visualize how we would break this down and we'll probably draw boxes

00:02:28,470 --> 00:02:32,090
around that, like layout boxes.

00:02:32,090 --> 00:02:34,580
We might even call these components.

00:02:34,580 --> 00:02:40,030
And obviously this application has multiple widgets, those widgets have titles.

00:02:40,030 --> 00:02:41,660
We can start to see some common themes.

00:02:41,660 --> 00:02:47,150
I had some color coding so the menu has menu items and I've outlined that with purple and

00:02:47,150 --> 00:02:50,760
widgets I've outlined with red and the titles I've outlined with yellow.

00:02:50,760 --> 00:02:55,330
So you can see these patterns of repeating piece that is repeat over and over again,

00:02:55,330 --> 00:03:01,010
and this big problem was broken down into small pieces and built up to make this complex

00:03:01,010 --> 00:03:03,730
dashboard application.

00:03:03,730 --> 00:03:06,960
So how would we target that email icon?

00:03:06,960 --> 00:03:09,870
So maybe we wanted to click on it.

00:03:09,870 --> 00:03:11,620
So that one right there.

00:03:11,620 --> 00:03:18,870
So we might choose the first option I had, which was a selector.

00:03:18,870 --> 00:03:21,460
This is an option, this is called Xpath.

00:03:21,460 --> 00:03:23,960
Hopefully you don't use that.

00:03:23,960 --> 00:03:24,960
It's very fragile.

00:03:24,960 --> 00:03:29,000
You can see the numbers in brackets, like 3, that's the third div under the body and

00:03:29,000 --> 00:03:34,459
there was a second div under that one and then they anchor tagged.

00:03:34,459 --> 00:03:36,020
You can maybe use a class.

00:03:36,020 --> 00:03:39,810
That seems a little more stable, maybe.

00:03:39,810 --> 00:03:42,270
That was a problem we had with our offshore team.

00:03:42,270 --> 00:03:45,490
They tried to figure what selector would be best.

00:03:45,490 --> 00:03:53,770
Obviously Xpath tried too often, so they tried class names.

00:03:53,770 --> 00:03:56,170
So another option might be like a data test ID.

00:03:56,170 --> 00:03:59,099
That is something that we could control and it made it a little bit more obvious that

00:03:59,099 --> 00:04:03,240
that was something specifically for testing so that developers didn't accidentally change

00:04:03,240 --> 00:04:06,870
that too often.

00:04:06,870 --> 00:04:09,070
But then the next question is where do these selectors go?

00:04:09,070 --> 00:04:10,740
Where do you put them?

00:04:10,740 --> 00:04:13,910
So one option is co-located with your source code.

00:04:13,910 --> 00:04:19,000
That seems like a pretty obvious choice, I've got the import React statement at the top

00:04:19,000 --> 00:04:28,001
and I've just name it data test ID email so now you can grab that selector and you can

00:04:28,001 --> 00:04:29,470
match that icon.

00:04:29,470 --> 00:04:36,560
You can see that that's matched to the ID inside that email component.

00:04:36,560 --> 00:04:38,060
So some pros and cons.

00:04:38,060 --> 00:04:40,250
So it's very easy at the unit testing level.

00:04:40,250 --> 00:04:42,000
It's nice and co-located.

00:04:42,000 --> 00:04:43,680
It's easy to tell where it is.

00:04:43,680 --> 00:04:50,680
It could be bad for end to end testing, so I don't work for Cypress, but I've contributed

00:04:50,680 --> 00:04:55,470
there, so they gave me a nice t-shirt so if you do this in a Cypress test the way they

00:04:55,470 --> 00:05:02,750
do that is every test becomes its own application that it wraps up -- it injects itself into

00:05:02,750 --> 00:05:09,720
your application's page, so what ends up happening is instead of just grabbing all of your test

00:05:09,720 --> 00:05:14,210
code, it also is now grabbing the whole of React, so that can be bad.

00:05:14,210 --> 00:05:19,240
It will slow down your test, because it has to compile and parse and all that the entire

00:05:19,240 --> 00:05:22,590
application, not just test code.

00:05:22,590 --> 00:05:26,400
So the next thing that we tried doing was doing a global selectors file where we just

00:05:26,400 --> 00:05:29,060
listed out and tried to add names to all the selectors.

00:05:29,060 --> 00:05:34,650
Now, this is a nice list because everything has test IDs, but we had complicated CSS selectors

00:05:34,650 --> 00:05:35,650
before.

00:05:35,650 --> 00:05:38,590
It was a little bit more obvious.

00:05:38,590 --> 00:05:42,730
What was nice is this was in our source code so that we could at least see where it was,

00:05:42,730 --> 00:05:49,180
whereas before it was in a different repository in a different technology that we didn't have

00:05:49,180 --> 00:05:50,180
secure access to.

00:05:50,180 --> 00:05:53,740
So we couldn't even see what selectors the offshore team chose.

00:05:53,740 --> 00:05:55,400
So this was at least a little bit better.

00:05:55,400 --> 00:06:01,400
We could import them all and at the bottom we just said, this is all my examples are

00:06:01,400 --> 00:06:04,490
in Cypress, but this could work for any testing framework.

00:06:04,490 --> 00:06:13,590
So we just got this, you just we just called it cy.get.

00:06:13,590 --> 00:06:19,510
Pros and cons with that, it's easy to tell where everything is at once, but it's not

00:06:19,510 --> 00:06:24,080
modular if you've done some Redux stuff and you have all of your reactions in one place,

00:06:24,080 --> 00:06:28,710
that works pretty well until you get to a certain scale and then that file is just huge

00:06:28,710 --> 00:06:34,190
and you accidentally add selectors multiple times, because the list is too long.

00:06:34,190 --> 00:06:40,090
So you could have local selector files, so that's what we ended up moving to next.

00:06:40,090 --> 00:06:47,889
So we had each area had its own kind of selector thing, so all the icons had a selector, and

00:06:47,889 --> 00:06:55,800
then all of the like maybe cards had a selector, and then just in the index file we just exported

00:06:55,800 --> 00:07:03,330
everything, so now we could just do name spacing so now I have a cy.get selectors is a little

00:07:03,330 --> 00:07:05,020
bit cleaner.

00:07:05,020 --> 00:07:10,520
So it was more modular, but then we quickly ran into an issue where are selectors powerful

00:07:10,520 --> 00:07:12,699
enough?

00:07:12,699 --> 00:07:18,100
We have complex applications so we have more and more complex interactions to do something

00:07:18,100 --> 00:07:19,400
that we wanted to do.

00:07:19,400 --> 00:07:23,970
It's pretty easy to describe in English, but it was harder to do in our implementation,

00:07:23,970 --> 00:07:26,930
especially if it had to be repeated.

00:07:26,930 --> 00:07:31,490
So how do you target an item in this to do and then check it off?

00:07:31,490 --> 00:07:34,840
So I'm talking about this one down here.

00:07:34,840 --> 00:07:39,790
So if theirs one, you might do, maybe you'd say that could be that Xpath or maybe you'd

00:07:39,790 --> 00:07:46,600
get all the to-do items and pick the first one, but maybe we want to just grab it by

00:07:46,600 --> 00:07:49,060
something that we can see within the application.

00:07:49,060 --> 00:07:51,430
So we might want to grab it by that name.

00:07:51,430 --> 00:07:56,870
Now, some of you might be alluding to the next part.

00:07:56,870 --> 00:08:02,979
Could we just use -- oops, sorry, that took a little bit.

00:08:02,979 --> 00:08:08,389
This is too complicated for our selector, so we had to look for something else.

00:08:08,389 --> 00:08:15,790
So I said before, all our examples are in Cypress, but it could work in any framework.

00:08:15,790 --> 00:08:21,130
So then it was routed into testing library.

00:08:21,130 --> 00:08:35,899
That added adapters for a bunch of different things, including React, Vue, Marco, cypress

00:08:35,899 --> 00:08:41,879
and others.

00:08:41,879 --> 00:08:44,889
But it's on one of the listed as one of their adapters.

00:08:44,889 --> 00:08:49,910
So I thought that was pretty cool because kind of along that same idea.

00:08:49,910 --> 00:08:57,680
So this is if you are using the to-do, using the testing library with the Cypress adapter,

00:08:57,680 --> 00:09:03,420
you would use query by text and just say upgrade to SSD hard disks and then would you click

00:09:03,420 --> 00:09:08,680
on it and then hopefully it doesn't work with how Sentra interacts with its application,

00:09:08,680 --> 00:09:24,050
but that's cool if it works with the library which is around text and what about if it

00:09:24,050 --> 00:09:31,829
is a little more specific where it doesn't quite work like a modern application the DOM

00:09:31,829 --> 00:09:32,829
would work.

00:09:32,829 --> 00:09:36,980
So you'd need something a little bit more custom to get the right thing.

00:09:36,980 --> 00:09:40,529
So I coined it as component helpers.

00:09:40,529 --> 00:09:43,639
Or basically component helper functions or helper functions.

00:09:43,639 --> 00:09:45,949
We had a few different names for it.

00:09:45,949 --> 00:09:47,790
So they look kind of like this.

00:09:47,790 --> 00:10:00,480
So the first thing I did is just created a function called getto dobynow, the only place

00:10:00,480 --> 00:10:05,300
that selector is available is inside of the helper itself, so your test code doesn't deal

00:10:05,300 --> 00:10:07,629
with it at all.

00:10:07,629 --> 00:10:09,589
The next with is giving it a check box.

00:10:09,589 --> 00:10:18,190
And the last one is getting we want to check that to-do item and you can see I'm starting

00:10:18,190 --> 00:10:22,209
to compose some of those helpers within the same file together.

00:10:22,209 --> 00:10:27,220
So a check to-do item is now getting that item by its name.

00:10:27,220 --> 00:10:32,279
It's getting the check box out of it and then it's clicking on it.

00:10:32,279 --> 00:10:36,139
So it kind of looks like this.

00:10:36,139 --> 00:10:41,870
We want the first check that to do item and then we wanted to grab it and get the check

00:10:41,870 --> 00:10:46,610
box and do an assertion on it and make sure that it's checked.

00:10:46,610 --> 00:10:51,870
now, you notice there's no selectors in T it's kind of the whole thing around page objects

00:10:51,870 --> 00:10:55,890
where you're not dealing with the underlying driver directly, you're working at a little

00:10:55,890 --> 00:11:04,519
bit higher level of abstraction it's not exactly like English, but it's fairly easy to read

00:11:04,519 --> 00:11:06,800
and understand what's going to happen.

00:11:06,800 --> 00:11:10,519
This worked well for our PMs and our QA to be able to have some confidence that we were

00:11:10,519 --> 00:11:15,759
doing the testing that we wanted to do and that we said we were doing.

00:11:15,759 --> 00:11:21,059
So other components, obviously like a button probably doesn't need much for helpers, because

00:11:21,059 --> 00:11:26,509
all you can really do is click on it and maybe assert on its text.

00:11:26,509 --> 00:11:28,100
But there could be other things.

00:11:28,100 --> 00:11:30,139
So components with portaled content.

00:11:30,139 --> 00:11:33,389
Now, portal is kind of something that was coined by React.

00:11:33,389 --> 00:11:38,209
I think in Angular 4 they call it transfusion, but it's basically calling content and projecting

00:11:38,209 --> 00:11:42,690
it to another place in the portal tree.

00:11:42,690 --> 00:11:48,970
So if you can imagine a modal is like a picture frame and you want to take this picture and

00:11:48,970 --> 00:11:52,220
shove it into the frame.

00:11:52,220 --> 00:11:56,589
So that's what I'd describe as portaled content.

00:11:56,589 --> 00:11:58,850
Something that moves somewhere else.

00:11:58,850 --> 00:12:01,600
Portal specifically is going to be something different in the DOM.

00:12:01,600 --> 00:12:06,529
So it's not not going to be a direct child.

00:12:06,529 --> 00:12:11,089
It's going to be basically put at the bottom of the DOM so it's not confined by the overflow

00:12:11,089 --> 00:12:15,149
of the container of the target.

00:12:15,149 --> 00:12:21,449
So modals will do that so that it's not clipped by whatever that target is contained in.

00:12:21,449 --> 00:12:26,720
So that can be tricky, because it's not -- you can't just find t you can't just take the

00:12:26,720 --> 00:12:28,380
target and do a dot-find.

00:12:28,380 --> 00:12:33,370
But now it's going to be scoped to the document instead of that component.

00:12:33,370 --> 00:12:39,339
So hierarchical menus, if we have multiple layers of a menu, you have to click on it

00:12:39,339 --> 00:12:43,850
and then you have to find your item and click on it and it opens up another submenu and

00:12:43,850 --> 00:12:45,470
then you want to click on it.

00:12:45,470 --> 00:12:49,990
That can be more complex where you just want to describe the hierarchy of it to select

00:12:49,990 --> 00:12:52,149
what you want.

00:12:52,149 --> 00:12:54,699
Another one might be combo boxes.

00:12:54,699 --> 00:13:00,639
We might have some complicated things around how you'd select things.

00:13:00,639 --> 00:13:06,009
Cards, you might want to say I want a card of some domain type.

00:13:06,009 --> 00:13:12,540
Like I worked in a cybersecurity company so we had things like alarm cards and case cards,

00:13:12,540 --> 00:13:16,829
so we wanted to just select that card by its name, but we wanted to get the card and not

00:13:16,829 --> 00:13:21,920
the text, so we could just have a component that would grab the card by whatever the name

00:13:21,920 --> 00:13:24,149
contained or ID.

00:13:24,149 --> 00:13:28,459
And then return that card and do other actions on it, like change the status.

00:13:28,459 --> 00:13:34,649
Dashboard widgets, similar to the example that I had, and the biggest one at the company

00:13:34,649 --> 00:13:35,730
I worked with was virtual lists.

00:13:35,730 --> 00:13:39,639
We had virtual lists for everything, which definitely made testing things harder because

00:13:39,639 --> 00:13:44,929
we couldn't just grab something in the DOM and then click on it, because it didn't exist

00:13:44,929 --> 00:13:47,399
in the DOM, it was virtual.

00:13:47,399 --> 00:13:52,600
So now I've got a demo of how I've done that using React select virtualize, I don't know

00:13:52,600 --> 00:13:54,679
if anyone has ever used that before.

00:13:54,679 --> 00:13:59,189
So this is kind of what it looks like.

00:13:59,189 --> 00:14:04,420
This is with 8,000 items in it, so as I'm scrolling, it will actually keep going.

00:14:04,420 --> 00:14:09,109
It's opening and closing pretty instantly because it's only rendering exactly what you

00:14:09,109 --> 00:14:10,540
see.

00:14:10,540 --> 00:14:20,449
You can just go on and you can scroll quickly and get to everything.

00:14:20,449 --> 00:14:28,750
So I've got a simple spec here that just grabs it, so this is without any component helpers,

00:14:28,750 --> 00:14:32,879
this is just we are going to grab it, we have to know what the selector is it going to be.

00:14:32,879 --> 00:14:36,629
We have to know what the next thing is going to be, which in this case I want to open t

00:14:36,629 --> 00:14:41,290
I want to find something that contains the number 5 and now I'm going to click on it

00:14:41,290 --> 00:14:45,139
and I want to make an assertion that it still contains that 5.

00:14:45,139 --> 00:14:49,889
So I have to know the implementation details of how this works.

00:14:49,889 --> 00:14:54,769
So I've got the first test and this is what it looks like.

00:14:54,769 --> 00:15:00,600
It should just work, it looks fine, so why would I need any helper for this?

00:15:00,600 --> 00:15:08,740
Well, if the item I happen to want to be selecting is not on the first viewable page right now,

00:15:08,740 --> 00:15:11,420
that's an implementation detail for how the component works.

00:15:11,420 --> 00:15:17,439
So let's say I want to select the item number 100 so we'll just change this right here to

00:15:17,439 --> 00:15:20,699
100.

00:15:20,699 --> 00:15:27,529
Now, this should reload and it's going to sit here and wait and it will eventually fail,

00:15:27,529 --> 00:15:33,980
because it can't actually click on an option that has the string 100 on it, because it's

00:15:33,980 --> 00:15:34,980
down there.

00:15:34,980 --> 00:15:40,579
Now, interestingly enough, if I refresh this, and manually scroll it down to the item of

00:15:40,579 --> 00:15:43,879
100, it will pass.

00:15:43,879 --> 00:15:50,220
So to movement people that just happens to be an implementation detail.

00:15:50,220 --> 00:15:54,639
All I really want to do is select a specific item in this list, the fact that it's virtualized.

00:15:54,639 --> 00:16:00,899
I don't really care about it.

00:16:00,899 --> 00:16:04,850
I shouldn't really have to care about that difference.

00:16:04,850 --> 00:16:08,649
But it went through and it did everything that you you would expect.

00:16:08,649 --> 00:16:10,410
It grabbed this item by the selection.

00:16:10,410 --> 00:16:13,209
It went ahead and clicked on it.

00:16:13,209 --> 00:16:18,689
Then it found an item that contains 100, it clicked on it and then it ran an expectation

00:16:18,689 --> 00:16:24,540
against that to make sure it contained this this dash 100 on there.

00:16:24,540 --> 00:16:30,660
So I just looked at the implementation of React select virtualize, I'd never actually

00:16:30,660 --> 00:16:34,629
used it before, so it just made those helpers.

00:16:34,629 --> 00:16:40,829
So I made some way of getting the component so that you could just call t you just import

00:16:40,829 --> 00:16:46,669
this function and then you just call it: Then the select was a little interesting.

00:16:46,669 --> 00:16:51,660
So what I ended up doing was I first grabbed that element and I'd click on it, just to

00:16:51,660 --> 00:16:56,369
open it, then I'd end up getting this selector here, which normally you never have to think

00:16:56,369 --> 00:16:57,369
about.

00:16:57,369 --> 00:17:02,419
But this is the overflow container that contains all the virtualization.

00:17:02,419 --> 00:17:04,850
So what I'm doing is I'm scrolling that.

00:17:04,850 --> 00:17:11,290
So I'm sending a scroll event, I'm telling that container to scroll a little bit and

00:17:11,290 --> 00:17:15,450
doing an assertion on it to see if the item I wanted it is there and if it's not I'll

00:17:15,450 --> 00:17:23,200
tell it to keep scrolling and I'm telling it to make sure that React fully fleshes to

00:17:23,200 --> 00:17:25,060
the DOM before that's done.

00:17:25,060 --> 00:17:29,760
So here's the implementation of scroll, too, so this component opens it, or this helper

00:17:29,760 --> 00:17:35,240
opens it, it grabs that container, it tells it to scroll, too, and it gives it a nice

00:17:35,240 --> 00:17:36,690
long timeout.

00:17:36,690 --> 00:17:42,690
The default is 4 seconds and it might take us longer, so I set that to 10 seconds.

00:17:42,690 --> 00:17:45,930
Then once I've found it then I'm going to go ahead and click on it.

00:17:45,930 --> 00:17:49,240
So what the scroll tool does is it's an async function.

00:17:49,240 --> 00:17:56,060
It turns into a match that returns an async function that contains that element and it

00:17:56,060 --> 00:18:02,890
will continuously see if there's any node in this node list that contains that string

00:18:02,890 --> 00:18:09,710
that you gave it and if it doesn't, if the length is 0, it will make sure that the DOM

00:18:09,710 --> 00:18:11,530
has been properly flushed.

00:18:11,530 --> 00:18:22,510
It will set the scroll top to be + 20.

00:18:22,510 --> 00:18:24,530
But it's hard to see what's going on.

00:18:24,530 --> 00:18:30,770
So after that, then it just calls scroll top, sets it to the new scroll top selection, and

00:18:30,770 --> 00:18:36,880
when it does, it will return that element so it can be clicked on later.

00:18:36,880 --> 00:18:47,450
So what that ends up looking like, so I'm going to select that item No. 100.

00:18:47,450 --> 00:18:54,650
And now I'm using my nice array API so I'm calling a get select.

00:18:54,650 --> 00:19:00,770
I'm using pipe, so if people have used Cypress before, pipe is a plugin that I've made.

00:19:00,770 --> 00:19:10,570
It's similar to .then, and then I just pipe in that end selection that I imported and

00:19:10,570 --> 00:19:18,230
I give it what string I want it to match and then I'm doing an assertion of that containing

00:19:18,230 --> 00:19:21,230
this text string.

00:19:21,230 --> 00:19:23,980
So now this is what it ends up looking like.

00:19:23,980 --> 00:19:28,040
It's going to scroll through automatically on its own and find the thing.

00:19:28,040 --> 00:19:29,390
The right item.

00:19:29,390 --> 00:19:32,100
So now I don't actually care if it's virtualized or not.

00:19:32,100 --> 00:19:34,380
If it happens to be viewable or not.

00:19:34,380 --> 00:19:37,500
It will just run through.

00:19:37,500 --> 00:19:40,330
Now when I talked about pipe, this is what pipe gives me.

00:19:40,330 --> 00:19:42,280
It gives me a nice little item here.

00:19:42,280 --> 00:19:51,190
It tells me what function is called as well as a before and after of that call.

00:19:51,190 --> 00:20:00,980
So if you use a .then, it doesn't actually show you any nice things in the log here.

00:20:00,980 --> 00:20:05,360
So I'll slow that down a little bit and we'll watch that.

00:20:05,360 --> 00:20:09,610
It's kind of fun to watch when it's running so we'll slow it down to maybe like 8 pixels

00:20:09,610 --> 00:20:11,930
at a time.

00:20:11,930 --> 00:20:19,640
So you can it's scrolling a lot slower, but it's the same basic concept.

00:20:19,640 --> 00:20:25,070
And then once it finds the item it will either time out because it can't find it or it will

00:20:25,070 --> 00:20:32,090
scroll enough that it finds it, it will select it and then it will move on.

00:20:32,090 --> 00:20:40,620
All right.

00:20:40,620 --> 00:20:47,640
So component helpers help us abstract our implementation details.

00:20:47,640 --> 00:20:52,790
Just like components are a contract for developing our UI, component helpers are a contract for

00:20:52,790 --> 00:20:59,390
testing our UI.

00:20:59,390 --> 00:21:03,970
So we've -- we ended up proving this over the course of two years, but the implementation

00:21:03,970 --> 00:21:11,250
can be tested.

00:21:11,250 --> 00:21:16,000
As long as our implementation, our component helpers are updated with the implementation,

00:21:16,000 --> 00:21:17,930
nothing ended up breaking.

00:21:17,930 --> 00:21:25,380
How we ended up doing it is our component library was pushed into our local NPM repository.

00:21:25,380 --> 00:21:31,400
Our helpers were also pushed to that name repository under a like a /helpers.

00:21:31,400 --> 00:21:37,440
So our CI was tied to testing out our helpers of our components so we so we could guarantee

00:21:37,440 --> 00:21:44,220
that as long as our APIs did not change, the application test did not break.

00:21:44,220 --> 00:21:49,670
If they did, our CI would catch it before it ever got to that point.

00:21:49,670 --> 00:21:57,100
So what ended up happening is all of our application failures are because the application was breaking,

00:21:57,100 --> 00:22:02,760
not because the components changed.

00:22:02,760 --> 00:22:06,280
So component helpers can be composed.

00:22:06,280 --> 00:22:13,820
So we ended up proving this out for -- we had a multiple component libraries, and the

00:22:13,820 --> 00:22:20,850
leaf node, the lowest Level 1 of our design system, it had these component helpers for

00:22:20,850 --> 00:22:27,400
the very, very basic low-level components, and those were consumed by higher-level component

00:22:27,400 --> 00:22:32,140
libraries, and those were consumed by widget repositories.

00:22:32,140 --> 00:22:34,830
And then eventually it was consumed by the application.

00:22:34,830 --> 00:22:40,260
So each level created their own helper abstraction layer and it kind of built on top of it.

00:22:40,260 --> 00:22:45,690
So when we had more within our dashboard example we had some of those widgets or those apps.

00:22:45,690 --> 00:22:50,630
They had some complex interactions and we just had easier ways of dealing with them.

00:22:50,630 --> 00:22:54,680
One of them was like an identity list and it was using this idea where it would scroll

00:22:54,680 --> 00:23:02,780
through identities and if it expected there to be an anonymous identity risk above a certain

00:23:02,780 --> 00:23:09,610
level, it made it easier to give it some risk that we wanted it to test against and then

00:23:09,610 --> 00:23:15,790
grab it and then move on.

00:23:15,790 --> 00:23:18,960
So here are some of the links that I had.

00:23:18,960 --> 00:23:23,080
First one is design.workday.com.

00:23:23,080 --> 00:23:25,810
There's the ReactDOM testing library.

00:23:25,810 --> 00:23:37,850
I have a link to the Sencha dashboard that I had and then cypress.io, there's no timer

00:23:37,850 --> 00:23:40,420
up here so I have no idea where I'm at.

00:23:40,420 --> 00:23:42,680
AUDIENCE: 1:51.

00:23:42,680 --> 00:23:48,430
>> And this talk is supposed to end -- I'm actually done.

00:23:48,430 --> 00:23:50,341
I hope I didn't leave too much time left.

00:23:50,341 --> 00:23:51,341
[laughter] [applause]

00:23:51,341 --> 00:23:52,341
Everybody, we ended a bit early, if you go out to registration, we actually have swag

00:23:52,341 --> 00:23:53,341
bags and this would be a good time to go get them.

00:23:53,341 --> 00:23:53,348

YouTube URL: https://www.youtube.com/watch?v=Pv2YHXQOEJY


