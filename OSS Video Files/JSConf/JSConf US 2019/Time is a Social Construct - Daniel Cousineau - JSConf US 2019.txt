Title: Time is a Social Construct - Daniel Cousineau - JSConf US 2019
Publication date: 2019-09-17
Playlist: JSConf US 2019
Description: 
	Did you know that one of the most headache-inducing problems a programmer will face in their career has only existed for barely 130 years? Time as we know it legitimately is a social construct, invented so we can do everything from predicting where a train is to scheduling a hangout with your international office coworkers.

Together we'll take a wacky adventure through history to learn why timezones are so confusing, why daylight savings time can feel like a form of torture, and why "just use UTC for everything" isn't necessarily the best idea. And while we're not going to walk away with a silver bullet answer to fix all our time problems, we will leave understanding the historical context behind the answer to why your automated emails went out a day early.
Captions: 
	00:00:00,140 --> 00:00:01,140
Time is a Social Construct

00:00:01,140 --> 00:00:02,140
Daniel Cousineau KATIE: How are we doing?

00:00:02,140 --> 00:00:03,140
Woohoo.

00:00:03,140 --> 00:00:04,140
Second to last talk.

00:00:04,140 --> 00:00:05,140
I am like simultaneously excited to go and party, but also sad that this is ending.

00:00:05,140 --> 00:00:06,140
Like, three days kind of went by pretty quickly.

00:00:06,140 --> 00:00:07,140
I don't know about you.

00:00:07,140 --> 00:00:08,140
But it did for me.

00:00:08,140 --> 00:00:09,140
So, next up we have Daniel Cousineau who is gonna talk to us about how time is a social

00:00:09,140 --> 00:00:10,140
construct.

00:00:10,140 --> 00:00:11,140
And Daniel was kind of lame and I asked him for a fun fact and he didn't give me one.

00:00:11,140 --> 00:00:12,140
Whomp, whomp.

00:00:12,140 --> 00:00:13,140
But thankfully, I happen to know very well the person who is the co organizer of Queens

00:00:13,140 --> 00:00:14,140
JS with him.

00:00:14,140 --> 00:00:15,140
And she told me that  [ Laughter ]

00:00:15,140 --> 00:00:16,140
She gave me all the dirt.

00:00:16,140 --> 00:00:17,140
Thank you, Sara, she's out there somewhere.

00:00:17,140 --> 00:00:18,140
I have no idea where.

00:00:18,140 --> 00:00:19,140
I can't see.

00:00:19,140 --> 00:00:20,140
She gave me a couple of fun facts.

00:00:20,140 --> 00:00:21,140
One of which I'm not gonna tell you because it will spoil something in his presentation.

00:00:21,140 --> 00:00:22,140
The other fun fact is he is a serial conference organizer and he started out organizing PHP

00:00:22,140 --> 00:00:23,140
meetups and PHP conferences in Texas.

00:00:23,140 --> 00:00:24,140
Which, like, I write PHP too.

00:00:24,140 --> 00:00:25,140
So I'm like, yes, PHP.

00:00:25,140 --> 00:00:26,140
And then when he moved to New York, after six months he loved Brooklyn JS so much he

00:00:26,140 --> 00:00:27,140
said, I want to get involved.

00:00:27,140 --> 00:00:28,140
And they said, we don't need you.

00:00:28,140 --> 00:00:29,140
But you can make this other new thing if you want.

00:00:29,140 --> 00:00:30,140
So, yeah.

00:00:30,140 --> 00:00:31,140
So, that's  that's the fun fact about Daniel.

00:00:31,140 --> 00:00:32,140
So, let's give it up for Daniel.

00:00:32,140 --> 00:00:33,140
[ Applause ] DANIEL: All right.

00:00:33,140 --> 00:00:34,140
Is this on?

00:00:34,140 --> 00:00:35,140
All right.

00:00:35,140 --> 00:00:36,140
Howdy, everybody.

00:00:36,140 --> 00:00:37,140
Okay.

00:00:37,140 --> 00:00:38,140
Got a little bit of that.

00:00:38,140 --> 00:00:39,140
So, as I said, I'm originally from Texas.

00:00:39,140 --> 00:00:40,140
I'm from Texas A&M.

00:00:40,140 --> 00:00:41,140
When someone guess up on stage and stays howdy, and everyone says howdy back.

00:00:41,140 --> 00:00:42,140
Try this one more time.

00:00:42,140 --> 00:00:43,140
Howdy!

00:00:43,140 --> 00:00:44,140
I think I see one.

00:00:44,140 --> 00:00:45,140
You said that, I know it hurt a little bit.

00:00:45,140 --> 00:00:46,140
So, let's jump right in.

00:00:46,140 --> 00:00:47,140
Time.

00:00:47,140 --> 00:00:48,140
Time is a social construct.

00:00:48,140 --> 00:00:49,140
This talk does not have a simple ending, does not have any solutions.

00:00:49,140 --> 00:00:50,140
Time is truly a social construct.

00:00:50,140 --> 00:00:51,140
And as we know, social constructs are garbage, so, using the transitive property of math,

00:00:51,140 --> 00:00:52,140
we can conclude that time is garbage.

00:00:52,140 --> 00:00:53,140
We want to believe it is simple because simple is easy.

00:00:53,140 --> 00:00:54,140
But that simplicity doesn't hold up to any scrutiny.

00:00:54,140 --> 00:00:55,140
I'm your host for the evening, Daniel Cousineau.

00:00:55,140 --> 00:00:56,140
Find me on Twitter, pronouns he/him.

00:00:56,140 --> 00:00:57,140
A long time ago I peaked.

00:00:57,140 --> 00:00:58,140
You can see me peaking right here.

00:00:58,140 --> 00:00:59,140
This is a sign of the times.

00:00:59,140 --> 00:01:00,140
My most popular Tweet of all time was a joke about how painful time is.

00:01:00,140 --> 00:01:01,140
My second most popular Tweet was also about how painful time is.

00:01:01,140 --> 00:01:02,140
And I got a lot of replies.

00:01:02,140 --> 00:01:03,140
Some of which  others seized upon fruitier interpretations.

00:01:03,140 --> 00:01:07,729
Others were laboring under the delusion that there was an easy answer.

00:01:07,729 --> 00:01:13,560
Even the easy truths are not as complete or as exhaustive as we would want.

00:01:13,560 --> 00:01:17,000
And I'm not the only one who had these problems.

00:01:17,000 --> 00:01:19,770
Everybody has these problems with time.

00:01:19,770 --> 00:01:23,670
So, let's start with a simple problem to solve.

00:01:23,670 --> 00:01:27,479
Let's say I had a button on my phone that if I tapped it, it would dispense food for

00:01:27,479 --> 00:01:30,990
my cats at home.

00:01:30,990 --> 00:01:32,840
That's a talk for the node bots people.

00:01:32,840 --> 00:01:35,939
Frances is out there somewhere.

00:01:35,939 --> 00:01:39,939
But I want to feed the cats at noon every day otherwise they get angry and start destroying

00:01:39,939 --> 00:01:41,790
all of my things.

00:01:41,790 --> 00:01:43,970
Let's get started.

00:01:43,970 --> 00:01:47,820
My physics teacher in high school taught me, when you're solving a problem, start by writing

00:01:47,820 --> 00:01:50,060
down what you know.

00:01:50,060 --> 00:01:55,770
Tomorrow, August 15th, I would like to feed my cats at 12 p.m.

00:01:55,770 --> 00:02:00,420
Now, most wouldn't ask questions beyond this.

00:02:00,420 --> 00:02:02,140
They wouldn't ask any questions beyond this.

00:02:02,140 --> 00:02:04,799
They would just start digging into the project.

00:02:04,799 --> 00:02:08,929
But we want to dig in a little bit deeper and we want to ask ourselves some deeper questions.

00:02:08,929 --> 00:02:10,670
What is 12 p.m.?

00:02:10,670 --> 00:02:15,760
To a computer system, it's maybe a point on a timeline, an arbitrary number in the scheme

00:02:15,760 --> 00:02:16,760
of things.

00:02:16,760 --> 00:02:19,170
But to a human, this time has context.

00:02:19,170 --> 00:02:22,610
I contend that 12 p.m. actually means nothing to you.

00:02:22,610 --> 00:02:24,739
But sometime around lunch does.

00:02:24,739 --> 00:02:28,220
Halfway through my day does, when the sun is overhead.

00:02:28,220 --> 00:02:33,040
These are things that have meaning to us that we just have to attach to the number 12.

00:02:33,040 --> 00:02:38,840
Time for us and cats is relative and entirely according to our perspective.

00:02:38,840 --> 00:02:41,659
There's a problem, whose 12 p.m. is this?

00:02:41,659 --> 00:02:45,870
That's a fairly recent question in human history.

00:02:45,870 --> 00:02:47,290
Us asking that question.

00:02:47,290 --> 00:02:48,390
All right.

00:02:48,390 --> 00:02:50,050
There we go.

00:02:50,050 --> 00:02:55,209
Since the dawn of time, or just a long time ago, we follow the circadian rhythm, wake

00:02:55,209 --> 00:03:02,200
when the sunrises, eat at zenith and go to bed when it's set.

00:03:02,200 --> 00:03:05,209
Appointments made along this rhythm.

00:03:05,209 --> 00:03:08,980
Even the advent of the mechanical clock did little to change.

00:03:08,980 --> 00:03:12,459
Merely giving a mechanical consistency to the solar day.

00:03:12,459 --> 00:03:16,390
And during the industrial Revolution, this efficiency was very key as we'll allude to

00:03:16,390 --> 00:03:17,690
later.

00:03:17,690 --> 00:03:22,319
Despite having these clocks, weapon needed our older, more traditional sun dials.

00:03:22,319 --> 00:03:26,160
We allowed our clocks to see that 12 p.m. aligned with solar noon.

00:03:26,160 --> 00:03:30,230
It was taking advantage of the equation of the development of time.

00:03:30,230 --> 00:03:36,250
Which took into account variances for Earth's orbit to see when a solar minute would be

00:03:36,250 --> 00:03:41,709
longer or shorter than a theoretical perfect orbit with no variances.

00:03:41,709 --> 00:03:48,510
That's all they're capable of providing, if you think about it.

00:03:48,510 --> 00:03:55,560
Clocks that we set were set over the course of the year, the difference between the readings,

00:03:55,560 --> 00:04:01,340
longer shorter out and averaged to zero.

00:04:01,340 --> 00:04:03,209
This was mean solar time.

00:04:03,209 --> 00:04:09,370
And a local village set the clocks to the time to eventually catch back up with itself.

00:04:09,370 --> 00:04:12,480
We called this the local meantime.

00:04:12,480 --> 00:04:15,830
Cities began adopting public clocks because they were big and expensive things.

00:04:15,830 --> 00:04:18,800
We couldn't really all have pocket watches.

00:04:18,800 --> 00:04:21,170
And those clocks would make it accessible.

00:04:21,170 --> 00:04:24,030
Local meantime for the surrounding community.

00:04:24,030 --> 00:04:27,800
Everybody could set their day based off of the clock in the center of town.

00:04:27,800 --> 00:04:31,080
As cities grew, different areas have needs of clocks.

00:04:31,080 --> 00:04:32,160
Courthouses would have a clock.

00:04:32,160 --> 00:04:34,150
Bureaucratic buildings need a clock.

00:04:34,150 --> 00:04:36,790
They need to be set to the same time.

00:04:36,790 --> 00:04:41,060
However, not all of them would be set to the same time.

00:04:41,060 --> 00:04:45,410
Courthouses and other government buildings would be set 10 minutes slow to give leeway

00:04:45,410 --> 00:04:46,570
for the appointments.

00:04:46,570 --> 00:04:50,480
Is your appointment at 12:00 and you're caught up in a three horse accident with cabbages

00:04:50,480 --> 00:04:53,170
all over the ground?

00:04:53,170 --> 00:04:58,150
Don't worry, the court says it's 11:55 in the morning.

00:04:58,150 --> 00:05:05,110
But in the early 1800s, humankind had a radical transformation of technology.

00:05:05,110 --> 00:05:10,380
There was no longer the workday ending with the sunsetting.

00:05:10,380 --> 00:05:14,950
The Telegraph meant we could communicate over long distances.

00:05:14,950 --> 00:05:20,580
And the advent of trains meant that traveling that previously took days now took mere hours.

00:05:20,580 --> 00:05:28,310
Pop quiz, in 1830, the train leaves Paris although 12:31, traveling for a thousand kilometers

00:05:28,310 --> 00:05:32,370
to Berlin.

00:05:32,370 --> 00:05:43,150
And is it the time in Berlin?

00:05:43,150 --> 00:05:46,350
How do I know which clock is faster or slower?

00:05:46,350 --> 00:05:51,460
You see, the stun reaches high noon four minutes later for every degree of longitude traveled

00:05:51,460 --> 00:05:53,310
towards the west.

00:05:53,310 --> 00:05:59,060
Each town had different local mean times that were several minute office and apart.

00:05:59,060 --> 00:06:02,630
Stagecoach companies would keep the large compendiums of local meantime differences

00:06:02,630 --> 00:06:07,670
of areas they served so they could adjust their watches as they arrived.

00:06:07,670 --> 00:06:12,350
But with stagecoaching with so slow, it was not a problem.

00:06:12,350 --> 00:06:15,580
You were usually only in one location per day.

00:06:15,580 --> 00:06:17,860
With the advent of trains, things were more complicated.

00:06:17,860 --> 00:06:24,750
So simplify and solving with the railways came up with railway time.

00:06:24,750 --> 00:06:29,600
All across Europe and America, they operated off of their own time.

00:06:29,600 --> 00:06:35,540
For the most part a single or a finite set of time areas that these trains would operate

00:06:35,540 --> 00:06:36,540
in.

00:06:36,540 --> 00:06:42,380
However, railway time often had nothing to do with the local mean town of the train station

00:06:42,380 --> 00:06:43,920
that it was located in.

00:06:43,920 --> 00:06:48,440
Meaning you would have to set your watch when you got on the train, set it again once you

00:06:48,440 --> 00:06:52,980
got off, and once more when you entered the train station and the town.

00:06:52,980 --> 00:06:57,340
And probably a fourth time when you entered the courthouse for your appointment.

00:06:57,340 --> 00:07:03,050
This is the exchange in Bristol, showing two minute times.

00:07:03,050 --> 00:07:06,320
One with local time and one showing London time.

00:07:06,320 --> 00:07:12,070
Trains made Bristol accessible enough where it was possible that you were doing business

00:07:12,070 --> 00:07:16,840
with London, especially using a telegraph machine.

00:07:16,840 --> 00:07:21,110
This complexity came to a head on August 12th in 1853.

00:07:21,110 --> 00:07:30,680
Two providence and Worcester trains collided, killing 13 and injuring 50 in one of the biggest

00:07:30,680 --> 00:07:32,210
train accidents of the day.

00:07:32,210 --> 00:07:37,750
It's also famous for being one of the first photographed train wrecks in history.

00:07:37,750 --> 00:07:43,880
It was the inability to calculate the arrival and departure would cause them to miss each

00:07:43,880 --> 00:07:48,500
other.

00:07:48,500 --> 00:07:50,070
It did not.

00:07:50,070 --> 00:07:59,240
It led credence to a growing way to look at a singular meantime across the world.

00:07:59,240 --> 00:08:02,230
But even this was fraught with politics and not science.

00:08:02,230 --> 00:08:05,040
England wanted their royal Observatory to be the meridian.

00:08:05,040 --> 00:08:11,970
And France was the scientific power and wanted Paris to be the all time.

00:08:11,970 --> 00:08:18,550
And Prussian time should be the time our clocks should operate on.

00:08:18,550 --> 00:08:27,060
Since two thirds of charts used Greenwich meantime in England, it was the prime meridian

00:08:27,060 --> 00:08:30,090
for the standardization of time.

00:08:30,090 --> 00:08:35,630
Now calculating Paris to Berlin was simple, and train accidents, at least for the cause

00:08:35,630 --> 00:08:38,580
of mis scheduling, reduced significantly.

00:08:38,580 --> 00:08:45,690
So, this same applies to the same example of me pressing a button and feeding my cats.

00:08:45,690 --> 00:08:48,940
From whom's perspective is noon?

00:08:48,940 --> 00:08:53,820
Going based off of me, I know at noon I need to press a button and feed the cats.

00:08:53,820 --> 00:08:59,340
If I do it tomorrow in San Diego, my cats get the food at 3 p.m.

00:08:59,340 --> 00:09:01,770
Not the worst thing in the world, might get a little bit peeved.

00:09:01,770 --> 00:09:05,660
Maybe one of the flowerpots gets knocked awful the counter.

00:09:05,660 --> 00:09:12,410
However, when we're in Italy next month on vacation, however, that food is coming out

00:09:12,410 --> 00:09:17,540
at 6 a.m. and I'm probably not coming home to a functional apartment and I'm very proud

00:09:17,540 --> 00:09:18,740
of my apartment.

00:09:18,740 --> 00:09:23,570
So, we realize there's more to the date than a simple number or even a simple position

00:09:23,570 --> 00:09:24,570
of the sun.

00:09:24,570 --> 00:09:26,920
It is insufficient to know when.

00:09:26,920 --> 00:09:31,060
We also must know where the 12 p.m. is.

00:09:31,060 --> 00:09:35,320
Okay, I know I'm four hours off of UTC in New York City.

00:09:35,320 --> 00:09:36,320
Great.

00:09:36,320 --> 00:09:37,320
I feel really smart.

00:09:37,320 --> 00:09:39,170
It's time to get coding on the project.

00:09:39,170 --> 00:09:43,420
First, we need to store this information a computer readable format.

00:09:43,420 --> 00:09:45,750
We could use UNIX timestamps.

00:09:45,750 --> 00:09:51,470
But it's not very readable or understandable and often fraught with significant issues.

00:09:51,470 --> 00:09:56,050
Like I said, like Katie said, I used to work with PHP.

00:09:56,050 --> 00:10:00,560
Back in the day, there were some bugs where PHP would use the local clock instead of the

00:10:00,560 --> 00:10:02,420
UTC to get the UNIX timestamp.

00:10:02,420 --> 00:10:05,680
I grew up going away from them.

00:10:05,680 --> 00:10:16,510
And there was the ISO 8601, we had a universal timestamp, a point in time easily digested

00:10:16,510 --> 00:10:21,940
by computers and humans and converting in and out of universal time without necessarily

00:10:21,940 --> 00:10:24,670
knowing the context of the systems.

00:10:24,670 --> 00:10:30,310
This is why ISO 8601 was used in email.

00:10:30,310 --> 00:10:33,680
That was the originally intended purpose of ISO 8601.

00:10:33,680 --> 00:10:40,240
The key to building a future is to attach a UTC offset with the timestamp.

00:10:40,240 --> 00:10:46,720
This way I can send the message to a server and say, yes, I generated this at this time.

00:10:46,720 --> 00:10:49,950
You can do with this as you please and you can figure it out based off of what you're

00:10:49,950 --> 00:10:54,020
doing and I don't have to worry about where and when you are.

00:10:54,020 --> 00:10:55,020
So, great.

00:10:55,020 --> 00:10:59,360
So, for example, tomorrow's feeding in ISO 8601 would look a heck of a lot like this.

00:10:59,360 --> 00:11:01,950
In fact, it would look like this.

00:11:01,950 --> 00:11:07,160
Noon at minus 0400 on the 15th.

00:11:07,160 --> 00:11:09,150
Correct, yes?

00:11:09,150 --> 00:11:10,420
For now.

00:11:10,420 --> 00:11:15,050
Remember, I said earlier that time zones are a political beast.

00:11:15,050 --> 00:11:20,230
When they were adopted, scientists originally invented  envisioned these clean one hour

00:11:20,230 --> 00:11:23,040
time zones along longitudinal timelines.

00:11:23,040 --> 00:11:28,770
Starting at the Greenwich meantime over the Greenwich Observatory.

00:11:28,770 --> 00:11:31,390
But time didn't come out so clean.

00:11:31,390 --> 00:11:34,100
They didn't follow natural longitudinal boundaries.

00:11:34,100 --> 00:11:36,040
That was too easy.

00:11:36,040 --> 00:11:38,920
In the US, they're ragged, you can see.

00:11:38,920 --> 00:11:42,880
But they're for the most part clean, fairly reasonable.

00:11:42,880 --> 00:11:44,240
But it's not simple.

00:11:44,240 --> 00:11:47,100
Start exploring the map with time zones.

00:11:47,100 --> 00:11:50,470
They migrate east and west when they shouldn't.

00:11:50,470 --> 00:11:55,960
Argentina, they should be in minus 4, but Argentina does whatever Argentina wants and

00:11:55,960 --> 00:11:59,170
so we deal with it the best we can.

00:11:59,170 --> 00:12:01,120
But god knows what's happening here.

00:12:01,120 --> 00:12:07,870
Three and a half, five, six and a halftime zone offsets.

00:12:07,870 --> 00:12:08,910
No idea what's happening.

00:12:08,910 --> 00:12:10,430
And it continues to get worse.

00:12:10,430 --> 00:12:15,670
I'm not sure I can follow the plot anymore with how these lines are going around.

00:12:15,670 --> 00:12:20,170
And then things just get extra special in Australia and we'll cover a little bit later.

00:12:20,170 --> 00:12:22,080
[ Laughter ] Got to love the Australians.

00:12:22,080 --> 00:12:23,080
All right.

00:12:23,080 --> 00:12:25,329
I accidently forgot about that slide.

00:12:25,329 --> 00:12:26,750
And Antarctica is the worst.

00:12:26,750 --> 00:12:28,440
Look at this.

00:12:28,440 --> 00:12:29,680
Look at this and just cry.

00:12:29,680 --> 00:12:32,600
That's what I do.

00:12:32,600 --> 00:12:35,850
But honestly, if you look at this, as much as I like to complain about how ridiculous

00:12:35,850 --> 00:12:38,760
it is, it makes sense.

00:12:38,760 --> 00:12:41,310
Time zones exist to make sure we have standard time.

00:12:41,310 --> 00:12:44,420
And we still orient our clocks around solar noon.

00:12:44,420 --> 00:12:49,790
When you're at the south pole of this planet, there really isn't much  the solar noon lasts

00:12:49,790 --> 00:12:50,790
months.

00:12:50,790 --> 00:12:54,190
There's no concept of which time zone you're in.

00:12:54,190 --> 00:12:59,220
And as you start moving away, all of a sudden a zenith of the sun backs reasonable.

00:12:59,220 --> 00:13:05,850
And becomes the time zone of whatever country happens to have a research base on the continent.

00:13:05,850 --> 00:13:06,850
Okay.

00:13:06,850 --> 00:13:08,520
So, I'm  what?

00:13:08,520 --> 00:13:09,520
You know?

00:13:09,520 --> 00:13:13,070
I don't know, 15, 16 minutes into this talk and we haven't started yet.

00:13:13,070 --> 00:13:16,860
So, you know what, I just don't want to deal with any of this and I'm just going to store

00:13:16,860 --> 00:13:22,640
this as UTC in my database, just like all the geniuses replying to my Twitter thread

00:13:22,640 --> 00:13:24,930
said I should do.

00:13:24,930 --> 00:13:26,760
Great.

00:13:26,760 --> 00:13:31,850
1600Z  Z being the shorthand for UTC that I need to feed my cats.

00:13:31,850 --> 00:13:37,460
Whenever I'm in Italy, great, I know how to convert from UTC to Italy time.

00:13:37,460 --> 00:13:39,570
I need to press the button.

00:13:39,570 --> 00:13:40,570
Done.

00:13:40,570 --> 00:13:41,570
On to the next step.

00:13:41,570 --> 00:13:42,570
Good lord.

00:13:42,570 --> 00:13:43,800
But wait.

00:13:43,800 --> 00:13:50,480
If you remember the reason we have time zones rather than a single time is because we associate

00:13:50,480 --> 00:13:52,470
time with concepts like sun in the sky.

00:13:52,470 --> 00:13:54,770
Very hot.

00:13:54,770 --> 00:13:57,600
If we were to sit here and say, like, oh, 12 p.m. is lunch for me.

00:13:57,600 --> 00:13:59,460
But 12 p.m. for someone else is bedtime.

00:13:59,460 --> 00:14:00,550
That's really confusing.

00:14:00,550 --> 00:14:02,210
We can't deal with that.

00:14:02,210 --> 00:14:07,690
And in the summer months outside of equatorial regions, summer hours are much longer than

00:14:07,690 --> 00:14:08,690
normal.

00:14:08,690 --> 00:14:11,650
Or to put it clearly, you get more daylight.

00:14:11,650 --> 00:14:18,140
And it needed to be simplified and replicated at time.

00:14:18,140 --> 00:14:19,400
Industrialists really love making money.

00:14:19,400 --> 00:14:23,900
And the easy way to do it is if everybody showed up exactly at the same time and ended

00:14:23,900 --> 00:14:25,430
at the same time.

00:14:25,430 --> 00:14:28,980
Your day started at the exact same meantime.

00:14:28,980 --> 00:14:33,670
If that meant half the year you woke up in pitch black darkness and the other half home

00:14:33,670 --> 00:14:36,070
in pitch black darkness, so be it.

00:14:36,070 --> 00:14:38,950
The wealthy industrialist didn't like it.

00:14:38,950 --> 00:14:42,490
But this man did care.

00:14:42,490 --> 00:14:49,880
He liked to go out and collect insects after work and this whole the universe is messy

00:14:49,880 --> 00:14:52,190
and complicated thing wasn't his jam.

00:14:52,190 --> 00:14:57,940
He put forward the modern proposal that eventually became daylight savings time.

00:14:57,940 --> 00:15:04,170
Where in which if we changed the clocks that if I left at 5 p.m., I could guarantee at

00:15:04,170 --> 00:15:08,339
5 p.m. the sun was up.

00:15:08,339 --> 00:15:10,400
And he could go off and catch butterflies.

00:15:10,400 --> 00:15:11,540
Yes.

00:15:11,540 --> 00:15:15,160
All of fur problems we have ever had with daylight savings time was caused by a dude

00:15:15,160 --> 00:15:19,940
who wanted to play with bugs after work.

00:15:19,940 --> 00:15:25,770
Daylight savings time in the US is moving the UTC forward one hour on the second Sunday

00:15:25,770 --> 00:15:31,710
of March and reverting to the time on the second Sunday at 2 a.m. in November.

00:15:31,710 --> 00:15:38,020
The certain time, minus 0400, and then minus 0500.

00:15:38,020 --> 00:15:43,840
If you notice, there's a flaw in the simple UTC solution.

00:15:43,840 --> 00:15:49,190
I was assuming 1600 UTC is always 12 p.m.

00:15:49,190 --> 00:15:51,149
That's not always the case.

00:15:51,149 --> 00:16:00,150
During standard time, which is fall and winter months, UTC  1600 UTC is actually 11 a.m.

00:16:00,150 --> 00:16:02,900
local time so my cats would be fed early.

00:16:02,900 --> 00:16:05,080
They're not exactly angry about that.

00:16:05,080 --> 00:16:09,070
But as a programmer, everything needs to be perfect and it bothers me.

00:16:09,070 --> 00:16:11,270
You see, it's the offset that changes for New York.

00:16:11,270 --> 00:16:16,180
If the location I'm in at the time doesn't change the offset, I don't know this.

00:16:16,180 --> 00:16:20,800
And if I operate on local time, I completely use this context of New York City.

00:16:20,800 --> 00:16:23,210
You see, UTC does not follow daylight savings time.

00:16:23,210 --> 00:16:24,960
It stays the same.

00:16:24,960 --> 00:16:30,800
That's why it's a simple solution and we like using it, but we forget a certain amount of

00:16:30,800 --> 00:16:31,920
context.

00:16:31,920 --> 00:16:38,910
But like time zones, daylight savings time was also politically implemented and based

00:16:38,910 --> 00:16:42,980
and thus arbitrary, inconsistent and very capricious.

00:16:42,980 --> 00:16:44,790
Here we have the United States.

00:16:44,790 --> 00:16:46,390
Notice our friend, Arizona.

00:16:46,390 --> 00:16:52,740
Not on mountain time, but not observing daylight savings time as we see with the handy legend.

00:16:52,740 --> 00:16:57,010
Except, we see this line right here.

00:16:57,010 --> 00:17:02,240
Yes, Arizona doesn't follow daylight savings time, except on the Navajo reservation, then

00:17:02,240 --> 00:17:05,650
you saw it.

00:17:05,650 --> 00:17:14,550
And somebody in Salt Lake City and somebody in Phoenix will have different clocks depending

00:17:14,550 --> 00:17:18,890
on the time of year, unless you're in the Navajo nation and you're not different, or

00:17:18,890 --> 00:17:21,130
are, I don't care anymore.

00:17:21,130 --> 00:17:22,559
It's getting confusing.

00:17:22,559 --> 00:17:26,839
And lest you think I'm picking on the United States, we're not the only ones.

00:17:26,839 --> 00:17:32,150
Australia has the partial daylight savings time.

00:17:32,150 --> 00:17:36,290
Where you have no idea what your neighbor's time is at any time.

00:17:36,290 --> 00:17:37,890
Unless you have a reference book.

00:17:37,890 --> 00:17:39,750
And I don't have space.

00:17:39,750 --> 00:17:41,740
I live in New York City.

00:17:41,740 --> 00:17:44,690
And fun fact.

00:17:44,690 --> 00:17:46,650
What's wrong with this time.

00:17:46,650 --> 00:17:47,650
Look at it.

00:17:47,650 --> 00:17:53,110
A hint, focus on the parts that are actually important.

00:17:53,110 --> 00:17:56,540
The answer is, for those of you, some of you may have gotten this in your head, some may

00:17:56,540 --> 00:18:02,429
not, this time does not exist unless you live in Arizona or on the Navajo reservation.

00:18:02,429 --> 00:18:14,700
It's the 10th of March 2019, at 2 a.m., Salt Lake City flips over to 3:01, there is no

00:18:14,700 --> 00:18:20,950
2:01 in Salt Lake City, but there is in Arizona.

00:18:20,950 --> 00:18:26,290
And some states had to come out and make things a little bit more ridiculous.

00:18:26,290 --> 00:18:27,420
Which state?

00:18:27,420 --> 00:18:30,580
If you thought Florida, then you were correct.

00:18:30,580 --> 00:18:34,640
In 2018, Florida wants to change time.

00:18:34,640 --> 00:18:38,700
And unlike Arizona, they always want to be on daylight savings time, as opposed to Arizona

00:18:38,700 --> 00:18:41,470
which is never on daylight savings time.

00:18:41,470 --> 00:18:44,090
I have some feelings about Florida.

00:18:44,090 --> 00:18:47,910
However, regardless of those feelings, I really to want take you through this build because

00:18:47,910 --> 00:18:49,350
it's fantastic.

00:18:49,350 --> 00:18:53,840
Look at the wording of this bill, whereas as the sunshine state, Florida should be kept

00:18:53,840 --> 00:18:56,240
sunny year round.

00:18:56,240 --> 00:19:00,400
I have feelings about the wording of this bill.

00:19:00,400 --> 00:19:04,200
But for those of you who wonder why didn't I have a panic about this a year ago, if you

00:19:04,200 --> 00:19:08,460
read tissue it turns out Florida passed this bill, but not the ability to actually implement

00:19:08,460 --> 00:19:09,460
it.

00:19:09,460 --> 00:19:15,480
You see, the federal code says you are allowed to opt out of DST.

00:19:15,480 --> 00:19:19,160
You are not allowed to permanently opt into DST.

00:19:19,160 --> 00:19:24,309
This bill says one day if the federal government lets us, we'll be completely ridiculous.

00:19:24,309 --> 00:19:28,050
I have no idea what's happening in Florida.

00:19:28,050 --> 00:19:30,960
But we need something more than he's UTC offsets.

00:19:30,960 --> 00:19:34,370
We are seeing, there's so much context loss.

00:19:34,370 --> 00:19:39,450
Idea the Iana context identifier.

00:19:39,450 --> 00:19:47,160
This was started around 1996 and created the naming conventions that we know as programmers

00:19:47,160 --> 00:19:49,630
but maybe haven't delve into.

00:19:49,630 --> 00:19:58,140
And it's important to look at future historical timestamps.

00:19:58,140 --> 00:20:04,280
I highly suggest if you haven't, you go to the IANA.org website, download the database

00:20:04,280 --> 00:20:06,059
and open up the news file.

00:20:06,059 --> 00:20:09,760
The change log for the database is absolutely fantastic.

00:20:09,760 --> 00:20:13,150
Look at this, the Egyptian government changed its mind on short notice.

00:20:13,150 --> 00:20:16,350
And decided not to introduce it after all.

00:20:16,350 --> 00:20:22,670
It's a study into the decent into madness of one lone citizen trying to bring order

00:20:22,670 --> 00:20:24,130
into the world.

00:20:24,130 --> 00:20:29,470
When I gave this talk, this change law was at the top of the file.

00:20:29,470 --> 00:20:35,060
With good eyes, notice it's now lying 1327 so there's a lot that's been happening since

00:20:35,060 --> 00:20:36,179
2016.

00:20:36,179 --> 00:20:44,590
So, offsets, and instead we marked the closest municipality that we follow their standards

00:20:44,590 --> 00:20:45,790
on.

00:20:45,790 --> 00:20:48,220
Is your timestamp America Phoenix or America Denver?

00:20:48,220 --> 00:20:49,440
It's very important.

00:20:49,440 --> 00:20:53,410
If you're Denver, you're respecting calculations.

00:20:53,410 --> 00:20:57,770
If you're in Phoenix, it knows not to respect daylight savings time.

00:20:57,770 --> 00:21:01,840
It's important for a city, as well as knowing the location of the locale.

00:21:01,840 --> 00:21:04,470
However, if you dig into the file, there's even more fun.

00:21:04,470 --> 00:21:07,711
If you thought Florida was crazy, I have news for you.

00:21:07,711 --> 00:21:13,870
You can see Indiana gets its own namespace and it shows up several times.

00:21:13,870 --> 00:21:14,870
I had no idea.

00:21:14,870 --> 00:21:17,820
I thought to myself, maybe Wikipedia can help.

00:21:17,820 --> 00:21:18,820
So.

00:21:18,820 --> 00:21:20,220
So, I looked at page.

00:21:20,220 --> 00:21:23,919
This is the time in Indiana Wikipedia page.

00:21:23,919 --> 00:21:26,790
[ Laughter ] Some of you may be thinking what's ridiculous

00:21:26,790 --> 00:21:27,790
about that?

00:21:27,790 --> 00:21:30,490
This is the time in Texas Wikipedia page.

00:21:30,490 --> 00:21:33,170
And this is the time in New York page.

00:21:33,170 --> 00:21:38,700
It's literally a couple slides about how New York decides when broadcast times are.

00:21:38,700 --> 00:21:40,780
Deep dive into Indiana.

00:21:40,780 --> 00:21:45,809
Around 1919, the standard time act made Indiana a central time zone.

00:21:45,809 --> 00:21:49,450
Some decided to ignore this and observe eastern time.

00:21:49,450 --> 00:21:50,580
Some daylight savings time.

00:21:50,580 --> 00:21:54,870
Off to a good start, doing whatever they want, supposed to be central time.

00:21:54,870 --> 00:22:01,150
And then the interstate commission divided Indiana in half, eastern and central time.

00:22:01,150 --> 00:22:04,430
Absolutely nobody in Indiana observed this.

00:22:04,430 --> 00:22:11,530
And then in the northwest and southwest, they observed daylight savings time in the central

00:22:11,530 --> 00:22:12,840
time zone.

00:22:12,840 --> 00:22:18,530
Everybody else was in eastern time with six counties observing daylight savings time.

00:22:18,530 --> 00:22:20,190
Are you following me?

00:22:20,190 --> 00:22:26,549
1977, pike county stopped observing daylight savings time.

00:22:26,549 --> 00:22:34,370
And then moving from eastern time and decided to not observe daylight savings time.

00:22:34,370 --> 00:22:38,970
In 2006, eight counties moved from eastern to central, and the entire state decided to

00:22:38,970 --> 00:22:40,400
observe eastern time.

00:22:40,400 --> 00:22:46,620
And then returning to east time.

00:22:46,620 --> 00:22:53,050
And in November of 2007, the southwestern counties returned to eastern time.

00:22:53,050 --> 00:22:57,900
And then my favorite part, there are counties in Indiana that don't even do any Indiana

00:22:57,900 --> 00:22:58,900
time zones.

00:22:58,900 --> 00:23:06,130
Dearborn and Ohio county, New York time, Chicago, a bunch, and America, Kentucky, Louisville.

00:23:06,130 --> 00:23:07,690
Kentucky gets its own namespace.

00:23:07,690 --> 00:23:09,410
Absolutely fantastic.

00:23:09,410 --> 00:23:15,240
So, rolling this together, we now realize we need more contextual information than just

00:23:15,240 --> 00:23:16,380
an offset.

00:23:16,380 --> 00:23:22,850
The offset is insufficient and the way this is happening is so critical to the function

00:23:22,850 --> 00:23:24,550
that it can't be left out.

00:23:24,550 --> 00:23:29,730
Because really my cats, just like your users, could care about the Indiana legislature,

00:23:29,730 --> 00:23:33,660
the whatever legislatures decided to do when, where, what.

00:23:33,660 --> 00:23:36,170
All they care about is are they going to get their snack at noon?

00:23:36,170 --> 00:23:39,660
That's the only thing they care about and your users care about.

00:23:39,660 --> 00:23:43,540
And continue on, and with everything we learned.

00:23:43,540 --> 00:23:47,290
And unfortunately, time is about up.

00:23:47,290 --> 00:23:50,610
So, did we learn anything?

00:23:50,610 --> 00:23:52,780
I think maybe we did.

00:23:52,780 --> 00:23:54,370
Probably not.

00:23:54,370 --> 00:23:58,460
I have a couple of takeaways from this talk that I hope you walk away with.

00:23:58,460 --> 00:24:08,910
One is that we should treat time as if it reduce complexity, and it's political.

00:24:08,910 --> 00:24:11,100
It's arbitrary and made up in the first place.

00:24:11,100 --> 00:24:15,200
It's complex because we decided to make it complex and we should probably respect that

00:24:15,200 --> 00:24:18,440
it's always going to be complex.

00:24:18,440 --> 00:24:22,549
Time is a question of where almost as much as it is when.

00:24:22,549 --> 00:24:27,540
While it is perfectly reasonable to capture, say, your logs on your servers and pinpoint

00:24:27,540 --> 00:24:30,590
in a universal time, that's perfectly fine.

00:24:30,590 --> 00:24:35,300
For what you present to your users and what your users present to you, where the user

00:24:35,300 --> 00:24:39,880
is, where their perspective is, and where thing the actions their taking is happen is

00:24:39,880 --> 00:24:43,940
vitally important and we should be aware of that when we build our systems.

00:24:43,940 --> 00:24:49,420
You should treat UTC like it's a synchronization and conversion aid.

00:24:49,420 --> 00:24:52,710
Converting your timestamps to UTC will not save you.

00:24:52,710 --> 00:24:55,120
Don't treat it like that.

00:24:55,120 --> 00:24:57,540
Treat it as neutral ground.

00:24:57,540 --> 00:25:00,450
You can meet to exchange information.

00:25:00,450 --> 00:25:05,610
Always observe your presented offsets and time zones and only convert so UTC.

00:25:05,610 --> 00:25:12,600
For those using MySQL, you convert to UTC to do calculations.

00:25:12,600 --> 00:25:16,700
If you're using postgres, take advantage of the power you have to you.

00:25:16,700 --> 00:25:23,580
But more importantly, if a user gives you a timestamp in minus 0 400, observe that.

00:25:23,580 --> 00:25:27,120
It is not going to hurt.

00:25:27,120 --> 00:25:34,700
Always use ISO 8601 and handle it in the timestamps.

00:25:34,700 --> 00:25:36,620
Give the browser and the user control.

00:25:36,620 --> 00:25:39,030
Don't try to take over and tell them what's best.

00:25:39,030 --> 00:25:41,020
Let them and the tools tell them what's best.

00:25:41,020 --> 00:25:46,080
Let the browser decide what time to see things in.

00:25:46,080 --> 00:25:51,140
Be explicit about the context with your user, if this talk was confusing for you, and certainly

00:25:51,140 --> 00:25:52,580
was for me.

00:25:52,580 --> 00:25:53,580
It's worse for them.

00:25:53,580 --> 00:25:56,730
Tell them when they're creating a timestamp.

00:25:56,730 --> 00:26:02,750
Hey, it's 12 p.m. in eastern time, it's 12 p.m. in San Francisco time.

00:26:02,750 --> 00:26:08,110
Tell them when and what they're doing is, they're only thinking about their local time.

00:26:08,110 --> 00:26:15,169
And you will catch bugs early if you take the extra few pixels to warn what's happening.

00:26:15,169 --> 00:26:18,110
And use a library for simple arithmetic.

00:26:18,110 --> 00:26:21,179
I have fallen in love with date fns.

00:26:21,179 --> 00:26:28,210
There's moment.js, there's temporal stuff in Node.

00:26:28,210 --> 00:26:30,130
Use a library.

00:26:30,130 --> 00:26:35,480
Even if it's as simple as adding 3600 strokes at a time.

00:26:35,480 --> 00:26:38,200
If the library is wrong, the library will fix it.

00:26:38,200 --> 00:26:42,950
Time is more complicated than we give it any sort of credit for.

00:26:42,950 --> 00:26:45,830
When all else fails, move to Florida.

00:26:45,830 --> 00:26:48,031
It's the sunshine state and it's going to be sunny year round.

00:26:48,031 --> 00:26:50,549
And if you thought  [ Applause ]

00:26:50,549 --> 00:26:51,549
And make sure, these are the  thank you very much.

00:26:51,549 --> 00:26:52,549
[ Applause ] KATIE: Nice one.

00:26:52,549 --> 00:26:53,549
Yeah.

00:26:53,549 --> 00:26:54,549
All right.

00:26:54,549 --> 00:26:55,549
So, I guess we all understand now why moment.js is so freaking big.

00:26:55,549 --> 00:26:56,549
I have a bone to pick with you, I'm sorry.

00:26:56,549 --> 00:26:57,549
So, I'm from Massachusetts.

00:26:57,549 --> 00:26:58,549
Massachusetts is in America and not England.

00:26:58,549 --> 00:26:59,549
It's Worcester.

00:26:59,549 --> 00:27:00,549
Not woo ster.

00:27:00,549 --> 00:27:01,549
>> Thank you.

00:27:01,549 --> 00:27:02,549
KATIE: You're welcome.

00:27:02,549 --> 00:27:03,549
This is very important information.

00:27:03,549 --> 00:27:04,549
If you think the time zones around the world is confusing, you should try to figure out

00:27:04,549 --> 00:27:05,549
how to pronounce any one town in Massachusetts.

00:27:05,549 --> 00:27:06,549
Because there are no rules.

00:27:06,549 --> 00:27:07,549
It's like  all right.

00:27:07,549 --> 00:27:08,549
What time is it?

00:27:08,549 --> 00:27:09,549
Oh, well, we have about 15 minutes until the last talk of the day.

00:27:09,549 --> 00:27:10,549
Hayley Denbraver is gonna be up here talking about chaos engineering and incident management

00:27:10,549 --> 00:27:11,549
that she worked on.

00:27:11,549 --> 00:27:12,549
So, yeah.

00:27:12,549 --> 00:27:12,558

YouTube URL: https://www.youtube.com/watch?v=EUzPpXhFmG8


