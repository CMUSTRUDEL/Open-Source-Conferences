Title: TDCD: Test Driven Component Development - Tim Doherty - JSConf US 2019
Publication date: 2019-09-10
Playlist: JSConf US 2019
Description: 
	Do you test your React components? I thought not, but why not? Often developers just don’t know how. CSS is hard. HTML is hard, JavaScript is hard. Conflating CSS, HTML, and JavaScript is exponentially harder. TDD can help! Learn how to drive a component's behavior, agnostic of presentational concerns, with tests. Learn how to focus on the look and feel once you have a passing test suite. Learn that it’s possible to build and verify an entire web application, before even looking at it in a browser.

Join me as I share a technique that has fundamentally changed how I build React Applications.

https://2019.jsconf.us/speakers/tim-doherty
Captions: 
	00:00:10,320 --> 00:00:15,389
[Music]

00:00:11,900 --> 00:00:21,359
usually drive down the coast I came here

00:00:15,389 --> 00:00:23,550
the long way I've been building software

00:00:21,359 --> 00:00:25,980
professionally since 1996

00:00:23,550 --> 00:00:29,730
I am the organizer of Santa Barbara

00:00:25,980 --> 00:00:30,990
JavaScript up the coast I love jazz

00:00:29,730 --> 00:00:32,880
music if I were stranded on a desert

00:00:30,990 --> 00:00:33,510
island and could take only one genre of

00:00:32,880 --> 00:00:35,040
music with me

00:00:33,510 --> 00:00:37,050
it'll be jazz it's America's greatest

00:00:35,040 --> 00:00:39,540
gift for the world and I'm a dad of two

00:00:37,050 --> 00:00:41,850
school-aged kids step-dad to a 19 year

00:00:39,540 --> 00:00:43,260
old college student and husband of my

00:00:41,850 --> 00:00:44,879
beautiful wife for five years that's me

00:00:43,260 --> 00:00:48,629
on twitter follow me there for all sorts

00:00:44,879 --> 00:00:50,760
of non sexy cold textured so I'm a

00:00:48,629 --> 00:00:51,960
software architecture and pro core

00:00:50,760 --> 00:00:53,850
technologies where cloud-based

00:00:51,960 --> 00:00:54,960
constructions offer our company and

00:00:53,850 --> 00:00:56,969
we're growing like wildfire

00:00:54,960 --> 00:00:58,920
Glassdoor meaning us the number four

00:00:56,969 --> 00:01:00,480
place overall to work in the US this

00:00:58,920 --> 00:01:01,949
year number two in tech ahead of

00:01:00,480 --> 00:01:04,860
heavyweights like Facebook Google

00:01:01,949 --> 00:01:07,290
Microsoft Amazon etc and we're actively

00:01:04,860 --> 00:01:09,600
hiring we got a large react codebase

00:01:07,290 --> 00:01:10,950
you're interested in that see me after

00:01:09,600 --> 00:01:11,820
the talker in the hallways I'll be happy

00:01:10,950 --> 00:01:13,590
to put you in touch with the right

00:01:11,820 --> 00:01:16,020
people and I do have some pro core

00:01:13,590 --> 00:01:18,810
keychain bottle openers so hit me up

00:01:16,020 --> 00:01:21,030
afterwards if you want to try when I'm

00:01:18,810 --> 00:01:26,009
not geeking out over tech I'm an avid

00:01:21,030 --> 00:01:28,590
scuba diver it's a bad habit don't get

00:01:26,009 --> 00:01:31,590
into it it's a major waste of money but

00:01:28,590 --> 00:01:33,720
it's a lot of fun all right so why

00:01:31,590 --> 00:01:35,430
test-driven development well let's take

00:01:33,720 --> 00:01:37,290
a step back for a moment for those who

00:01:35,430 --> 00:01:39,900
aren't familiar and let's ask what is

00:01:37,290 --> 00:01:41,430
test-driven development well it's a

00:01:39,900 --> 00:01:43,799
software development methodology

00:01:41,430 --> 00:01:45,689
agnostic and language technology

00:01:43,799 --> 00:01:46,920
platform etc and it consists of

00:01:45,689 --> 00:01:48,250
repeating a really short development

00:01:46,920 --> 00:01:52,150
cycle

00:01:48,250 --> 00:01:53,590
red green refactor read is writing a

00:01:52,150 --> 00:01:54,970
failing test and watching it fail

00:01:53,590 --> 00:01:57,550
knowing it's going to fail

00:01:54,970 --> 00:01:59,230
Green is writing just enough code to

00:01:57,550 --> 00:02:01,660
make that test pass and committing all

00:01:59,230 --> 00:02:03,400
manner of sins to get there and refactor

00:02:01,660 --> 00:02:04,750
is changing the internals or optimizing

00:02:03,400 --> 00:02:07,420
the internals without breaking the

00:02:04,750 --> 00:02:09,220
interface under tests so there's all

00:02:07,420 --> 00:02:11,440
sorts of benefits to this methodology

00:02:09,220 --> 00:02:13,930
some are technical some are process

00:02:11,440 --> 00:02:15,910
based but in my mind the most important

00:02:13,930 --> 00:02:17,650
outcome of test-driven development is

00:02:15,910 --> 00:02:20,050
that a well-written suite becomes a

00:02:17,650 --> 00:02:21,540
shared self documenting understanding of

00:02:20,050 --> 00:02:24,280
the problem to me

00:02:21,540 --> 00:02:26,140
so it's true that you can actually write

00:02:24,280 --> 00:02:28,000
decent tests after the fact and you

00:02:26,140 --> 00:02:29,830
could definitely get equivalent coverage

00:02:28,000 --> 00:02:31,240
code coverage after the fact the problem

00:02:29,830 --> 00:02:33,190
is you may be just asserting the

00:02:31,240 --> 00:02:35,440
correctness of bad code or code that

00:02:33,190 --> 00:02:36,970
solves the wrong problem in fact you're

00:02:35,440 --> 00:02:41,380
kind of just verifying that the monster

00:02:36,970 --> 00:02:42,970
lives okay wake up everybody I realized

00:02:41,380 --> 00:02:45,550
that this sounds really dry and boring

00:02:42,970 --> 00:02:49,390
but the truth is TDD can and should be

00:02:45,550 --> 00:02:51,430
fun we first off we get to hook into the

00:02:49,390 --> 00:02:53,080
brains own reward system we get to kick

00:02:51,430 --> 00:02:55,180
that little dopamine rush off for each

00:02:53,080 --> 00:02:56,769
passing test and then when we get a

00:02:55,180 --> 00:02:59,890
whole suite of them it makes our

00:02:56,769 --> 00:03:01,690
developer brains happy so we all agree

00:02:59,890 --> 00:03:03,519
that test-driven development is awesome

00:03:01,690 --> 00:03:06,220
right so why would you not want to do

00:03:03,519 --> 00:03:08,680
this it turns out a few decades later

00:03:06,220 --> 00:03:10,540
this practice is still controversial out

00:03:08,680 --> 00:03:12,580
in the wild and there's various

00:03:10,540 --> 00:03:14,980
different push backs most of which can

00:03:12,580 --> 00:03:16,630
be pretty pretty easily countered it

00:03:14,980 --> 00:03:18,580
does definitely feel wrong when you're

00:03:16,630 --> 00:03:20,650
first doing it the rest of these can

00:03:18,580 --> 00:03:22,630
easily be countered by the benefits that

00:03:20,650 --> 00:03:24,430
are given in fact the the last couple

00:03:22,630 --> 00:03:26,590
change happens to quickly solution isn't

00:03:24,430 --> 00:03:28,360
clear TDD strength as it lets you

00:03:26,590 --> 00:03:29,890
systematically close the knowledge gap

00:03:28,360 --> 00:03:31,420
between where you are and where you want

00:03:29,890 --> 00:03:33,010
to get to so I think you could pretty

00:03:31,420 --> 00:03:36,549
easily throw these all in episode of

00:03:33,010 --> 00:03:38,500
mythbusters' and maybe firmly busted so

00:03:36,549 --> 00:03:41,140
we agree TDD is awesome

00:03:38,500 --> 00:03:43,299
why test react components well to start

00:03:41,140 --> 00:03:45,850
with there web technologies that we all

00:03:43,299 --> 00:03:47,459
know and love are hard and at the end of

00:03:45,850 --> 00:03:49,750
the day we're building user interfaces

00:03:47,459 --> 00:03:51,760
right we're building something visual

00:03:49,750 --> 00:03:53,620
and everybody and their mother has an

00:03:51,760 --> 00:03:56,049
opinion on things that are visual and

00:03:53,620 --> 00:03:59,260
then in react land we also have this

00:03:56,049 --> 00:04:00,960
beast called JSX JSX looks an awful lot

00:03:59,260 --> 00:04:02,460
like their web technologies

00:04:00,960 --> 00:04:06,540
we're already familiar with it but in

00:04:02,460 --> 00:04:08,790
fact it's not these things JSX is just

00:04:06,540 --> 00:04:11,040
XML like extensions to the JavaScript

00:04:08,790 --> 00:04:12,360
language it's syntactic sugar for the

00:04:11,040 --> 00:04:15,120
create element method which just

00:04:12,360 --> 00:04:18,350
produces react elements it's not HTML

00:04:15,120 --> 00:04:24,150
it's not CSS I think it is JavaScript

00:04:18,350 --> 00:04:25,860
got it awesome alright so we agree TDD

00:04:24,150 --> 00:04:29,790
is awesome we think we should test our

00:04:25,860 --> 00:04:31,560
react components how do we do that when

00:04:29,790 --> 00:04:33,450
we think about testing react components

00:04:31,560 --> 00:04:35,520
it helps to take a moment think about

00:04:33,450 --> 00:04:37,560
the abstractions the react provides and

00:04:35,520 --> 00:04:39,300
the primary abstraction that react

00:04:37,560 --> 00:04:42,230
provides for us is to model a user

00:04:39,300 --> 00:04:44,670
interface as a tree of components and

00:04:42,230 --> 00:04:46,260
the docs actually give us some really

00:04:44,670 --> 00:04:47,130
helpful little tidbits as we read

00:04:46,260 --> 00:04:49,530
through them they tell us that

00:04:47,130 --> 00:04:51,510
components are like functions they take

00:04:49,530 --> 00:04:54,330
inputs and they return outputs that are

00:04:51,510 --> 00:04:57,450
react elements and they go on to say

00:04:54,330 --> 00:05:00,150
that they those react elements aren't

00:04:57,450 --> 00:05:01,560
dominant they're plain objects and it's

00:05:00,150 --> 00:05:03,260
not our responsibility to update the

00:05:01,560 --> 00:05:05,580
don't react Dom will do that for us so

00:05:03,260 --> 00:05:06,960
there's some really good little nuggets

00:05:05,580 --> 00:05:08,280
in there that help us frame this

00:05:06,960 --> 00:05:10,260
discussion around how to test react

00:05:08,280 --> 00:05:12,090
components the first is components are

00:05:10,260 --> 00:05:14,160
like functions they take inputs in

00:05:12,090 --> 00:05:16,890
return outputs and there's a little

00:05:14,160 --> 00:05:18,900
easier to test than a peer function the

00:05:16,890 --> 00:05:21,750
outputs are react elements not Dom

00:05:18,900 --> 00:05:24,030
elements those react elements are plain

00:05:21,750 --> 00:05:24,570
objects and the Dom is none of your

00:05:24,030 --> 00:05:26,730
business

00:05:24,570 --> 00:05:28,050
I want to dig into that last point a

00:05:26,730 --> 00:05:30,660
little bit more because it's important

00:05:28,050 --> 00:05:32,220
it's reflected in the design of react we

00:05:30,660 --> 00:05:34,500
actually get one package called react

00:05:32,220 --> 00:05:36,330
and that is the core component hash

00:05:34,500 --> 00:05:38,670
function and we get a completely

00:05:36,330 --> 00:05:40,350
separate package called react Dom that's

00:05:38,670 --> 00:05:41,880
responsible for the details of rendering

00:05:40,350 --> 00:05:45,000
to the Dom because the Dom is an

00:05:41,880 --> 00:05:47,820
implementation detail okay so we saw

00:05:45,000 --> 00:05:49,560
from the docs that it's like react

00:05:47,820 --> 00:05:51,510
components like a function take inputs

00:05:49,560 --> 00:05:54,150
and returns outputs so if we take a

00:05:51,510 --> 00:05:55,980
component in its simplest form this is a

00:05:54,150 --> 00:05:58,500
basic function component from the docs

00:05:55,980 --> 00:06:01,020
and if we just invoke that and pass it

00:05:58,500 --> 00:06:03,240
an object with props what we get back is

00:06:01,020 --> 00:06:05,520
a react element it's a plane object that

00:06:03,240 --> 00:06:08,280
describes what might happen later if we

00:06:05,520 --> 00:06:10,290
hand that off to react on this is not

00:06:08,280 --> 00:06:12,180
super useful on its own from a testing

00:06:10,290 --> 00:06:13,290
point of view there's no API here we

00:06:12,180 --> 00:06:14,110
might be able to make some useful

00:06:13,290 --> 00:06:16,450
assertions but we're

00:06:14,110 --> 00:06:18,670
limited in what we can do so react ships

00:06:16,450 --> 00:06:21,280
a package called react test renderer we

00:06:18,670 --> 00:06:22,990
speak to it in JSX and we get back an

00:06:21,280 --> 00:06:25,360
object with some methods on it like this

00:06:22,990 --> 00:06:26,980
- tree method and we get back again a

00:06:25,360 --> 00:06:29,770
plane object with a little bit more

00:06:26,980 --> 00:06:31,870
detail and it also gives us an API by

00:06:29,770 --> 00:06:34,570
which we can query the returned element

00:06:31,870 --> 00:06:36,670
and make assertions about it so the docs

00:06:34,570 --> 00:06:38,200
don't stop there they go further and

00:06:36,670 --> 00:06:40,630
they tell us that if you're writing unit

00:06:38,200 --> 00:06:42,160
tests shallow rendering can be helpful

00:06:40,630 --> 00:06:44,760
because it frees us from worrying about

00:06:42,160 --> 00:06:47,710
child components now this assumes that

00:06:44,760 --> 00:06:48,970
unit testing is valuable to you and this

00:06:47,710 --> 00:06:51,370
is another thing that's controversial

00:06:48,970 --> 00:06:52,930
still out in the wild I believe that

00:06:51,370 --> 00:06:55,570
years of testing experience have taught

00:06:52,930 --> 00:06:57,280
us that based on cost and speed you

00:06:55,570 --> 00:06:59,220
should spend most of your time at the

00:06:57,280 --> 00:07:02,800
bottom of the test pyramid on unit tests

00:06:59,220 --> 00:07:04,180
UI tests are important and then tests

00:07:02,800 --> 00:07:05,680
service and integration tests are

00:07:04,180 --> 00:07:07,540
important but they're more expensive

00:07:05,680 --> 00:07:09,820
they're slower tend to be more brittle

00:07:07,540 --> 00:07:11,800
and from a TDD perspective you're

00:07:09,820 --> 00:07:14,560
starting at nothing so you're going to

00:07:11,800 --> 00:07:16,510
be building unit tests first so with

00:07:14,560 --> 00:07:18,910
that in mind the react test renderer

00:07:16,510 --> 00:07:20,980
packages it ships a shallow render very

00:07:18,910 --> 00:07:23,290
similar you talk to it in JSX and you

00:07:20,980 --> 00:07:25,300
get back a plain object that you can

00:07:23,290 --> 00:07:28,120
query it just doesn't render or

00:07:25,300 --> 00:07:30,370
instantiate child objects the API is

00:07:28,120 --> 00:07:32,200
fairly limited and the docs tell us that

00:07:30,370 --> 00:07:33,940
if you want a more robust experience

00:07:32,200 --> 00:07:35,740
with shallow rendering to use the

00:07:33,940 --> 00:07:38,650
shallow render from enzyme this is a

00:07:35,740 --> 00:07:40,240
package from Airbnb this library is also

00:07:38,650 --> 00:07:42,190
not without its own controversy and

00:07:40,240 --> 00:07:43,620
there are shinier new toys making their

00:07:42,190 --> 00:07:45,880
way around the JavaScript ecosystem

00:07:43,620 --> 00:07:47,800
there's definitely some legitimate

00:07:45,880 --> 00:07:49,810
criticisms of enzyme but on the whole

00:07:47,800 --> 00:07:51,460
especially for shallow rendering I think

00:07:49,810 --> 00:07:53,530
the pros far outweigh the cons I

00:07:51,460 --> 00:07:54,610
wholeheartedly recommend it and it's

00:07:53,530 --> 00:07:59,140
what I'm gonna use for the rest of this

00:07:54,610 --> 00:08:01,360
talk so all that said we now know the

00:07:59,140 --> 00:08:02,980
TDD is awesome we all agree we should be

00:08:01,360 --> 00:08:04,360
testing our react components we have

00:08:02,980 --> 00:08:06,910
some idea how to do it

00:08:04,360 --> 00:08:09,100
what do I mean then by testers and

00:08:06,910 --> 00:08:11,340
component development what I'm really

00:08:09,100 --> 00:08:13,480
getting at is this tendency to conflate

00:08:11,340 --> 00:08:16,240
behavioral and presentational concerns

00:08:13,480 --> 00:08:17,320
it's really easy especially in this

00:08:16,240 --> 00:08:20,380
world of JSX

00:08:17,320 --> 00:08:22,060
to go down the rabbit hole when you

00:08:20,380 --> 00:08:23,440
should be testing the behavior or

00:08:22,060 --> 00:08:24,880
verifying the behavior of the component

00:08:23,440 --> 00:08:25,780
nobody's ever done that right they've

00:08:24,880 --> 00:08:27,310
been in the middle of trying to make

00:08:25,780 --> 00:08:27,860
something work and then they set it up

00:08:27,310 --> 00:08:29,419
on the brows

00:08:27,860 --> 00:08:30,830
and that should have a drop shadow that

00:08:29,419 --> 00:08:32,510
should be three pictures to the left it

00:08:30,830 --> 00:08:35,329
should be red etc

00:08:32,510 --> 00:08:36,950
nobody's ever guilty of that so this is

00:08:35,329 --> 00:08:39,829
basically applying the methodology of

00:08:36,950 --> 00:08:41,719
TDD to focus entirely on the behavior of

00:08:39,829 --> 00:08:43,849
a component first without worrying at

00:08:41,719 --> 00:08:44,450
all about what it looks like we'll do

00:08:43,849 --> 00:08:50,390
that later

00:08:44,450 --> 00:08:52,130
we know that TDD forces us to compose or

00:08:50,390 --> 00:08:54,230
output small modular single

00:08:52,130 --> 00:08:57,500
responsibility units in this case react

00:08:54,230 --> 00:08:59,510
components we can then compose those

00:08:57,500 --> 00:09:01,459
together and write tests further up the

00:08:59,510 --> 00:09:03,440
tree to verify the composition of those

00:09:01,459 --> 00:09:05,660
and then we can focus on how they look

00:09:03,440 --> 00:09:08,180
we already know that HTML and CSS are

00:09:05,660 --> 00:09:10,160
hard so let's put our brains on the back

00:09:08,180 --> 00:09:11,959
burner with a bunch of tests running on

00:09:10,160 --> 00:09:15,230
the behavioral side of things and then

00:09:11,959 --> 00:09:17,140
we can focus solely on the appearance so

00:09:15,230 --> 00:09:20,420
what do you think should give a shot

00:09:17,140 --> 00:09:22,190
cool so we know that the first thing

00:09:20,420 --> 00:09:24,410
we're going to do is we're gonna write a

00:09:22,190 --> 00:09:27,800
failing test but first let's have a

00:09:24,410 --> 00:09:30,260
little context so we have a small bright

00:09:27,800 --> 00:09:32,240
hungry development team and we've been

00:09:30,260 --> 00:09:34,310
approached by a client with a unique

00:09:32,240 --> 00:09:36,110
problem the clients told us they're

00:09:34,310 --> 00:09:37,490
super busy they have a really hard time

00:09:36,110 --> 00:09:40,040
keeping track of all the things they

00:09:37,490 --> 00:09:41,930
have to do and what they want is an

00:09:40,040 --> 00:09:44,060
application where they can type in tasks

00:09:41,930 --> 00:09:45,829
they can mark them as complete they can

00:09:44,060 --> 00:09:47,570
see which ones have done and not and

00:09:45,829 --> 00:09:50,029
they could remove old done tasks and

00:09:47,570 --> 00:09:51,560
since nobody in the history of software

00:09:50,029 --> 00:09:55,070
engineering has ever built anything like

00:09:51,560 --> 00:09:56,449
this our team has agreed that we can

00:09:55,070 --> 00:09:57,740
step up to the plate and even though we

00:09:56,449 --> 00:10:01,420
don't know how to get there we can use

00:09:57,740 --> 00:10:05,269
TDD to bridge that knowledge gap so

00:10:01,420 --> 00:10:06,620
we're gonna jump in six months into the

00:10:05,269 --> 00:10:09,380
development cycle we're gonna see where

00:10:06,620 --> 00:10:12,230
our team is so we know that test-driven

00:10:09,380 --> 00:10:14,930
development produces as an artifact a

00:10:12,230 --> 00:10:17,949
self documenting shared understanding of

00:10:14,930 --> 00:10:22,430
the domain so let's run the tests and

00:10:17,949 --> 00:10:27,860
what might be wrong here doesn't

00:10:22,430 --> 00:10:29,899
recognize that let's run the tests and

00:10:27,860 --> 00:10:31,699
let's see what we get and what we should

00:10:29,899 --> 00:10:33,170
get is you should get some idea of what

00:10:31,699 --> 00:10:35,570
the team has been up to in the past six

00:10:33,170 --> 00:10:37,010
months all right so we've got some

00:10:35,570 --> 00:10:39,500
output here let's see what they've been

00:10:37,010 --> 00:10:41,730
doing so we can see sort of in plain

00:10:39,500 --> 00:10:43,649
English that they've written this to do

00:10:41,730 --> 00:10:45,420
component given a place to enter a new

00:10:43,649 --> 00:10:47,190
task when a user presses enter and the

00:10:45,420 --> 00:10:49,670
task is not empty responds with the task

00:10:47,190 --> 00:10:52,320
it looks like they've also created a

00:10:49,670 --> 00:10:54,089
component to hold a single to do give it

00:10:52,320 --> 00:10:55,410
a task when displayed it shows the name

00:10:54,089 --> 00:10:56,940
and whether it's complete or not and

00:10:55,410 --> 00:10:59,010
they've written a button that bottom

00:10:56,940 --> 00:11:01,740
navigation to switch between active and

00:10:59,010 --> 00:11:04,350
completed - dues cool so that gives us

00:11:01,740 --> 00:11:06,060
some idea of what they've been up to so

00:11:04,350 --> 00:11:08,550
what we're gonna do as we're stepping in

00:11:06,060 --> 00:11:09,750
here to help the team out glute for

00:11:08,550 --> 00:11:11,790
those things and put them together into

00:11:09,750 --> 00:11:13,920
a - duze component that has the input

00:11:11,790 --> 00:11:16,350
that shows individual - dues and lets us

00:11:13,920 --> 00:11:17,579
toggle between the views so the first

00:11:16,350 --> 00:11:27,839
thing we know is we're gonna have to

00:11:17,579 --> 00:11:34,350
write a failing test so let's do that so

00:11:27,839 --> 00:11:43,519
let's say given a list of tasks when

00:11:34,350 --> 00:11:45,680
displayed it shows each task in the list

00:11:43,519 --> 00:11:49,170
sounds like a reasonable test right

00:11:45,680 --> 00:11:50,970
everyone agree excellent ok so that

00:11:49,170 --> 00:11:55,160
means that we're gonna need some tasks

00:11:50,970 --> 00:12:02,430
to give this guy so let's add some tasks

00:11:55,160 --> 00:12:05,899
so let's create some - dues and we'll

00:12:02,430 --> 00:12:05,899
call them nonsensical names

00:12:15,920 --> 00:12:24,540
okay cool now we can pass these to our

00:12:18,720 --> 00:12:27,090
to do component so let's do that alright

00:12:24,540 --> 00:12:28,680
so we've set up our test now we need to

00:12:27,090 --> 00:12:29,970
make an assertion about it so what's a

00:12:28,680 --> 00:12:32,490
reasonable assertion there we've given

00:12:29,970 --> 00:12:34,350
it five to Do's why don't we say that

00:12:32,490 --> 00:12:35,970
there's five individual to do components

00:12:34,350 --> 00:12:39,420
one for each in the list sound

00:12:35,970 --> 00:12:44,670
reasonable let's do it so we're going to

00:12:39,420 --> 00:12:46,500
use an enzyme method called find and

00:12:44,670 --> 00:12:49,110
we're gonna find our previously written

00:12:46,500 --> 00:12:50,910
to do component and we're going to

00:12:49,110 --> 00:12:57,170
verify that we have the right number of

00:12:50,910 --> 00:12:57,170
them typos at all

00:13:09,120 --> 00:13:13,990
okay let's run it and we should expect

00:13:11,380 --> 00:13:16,600
that test to fail and it does it

00:13:13,990 --> 00:13:19,450
definitely fails it fails with a syntax

00:13:16,600 --> 00:13:20,800
error let's fix that first don't you

00:13:19,450 --> 00:13:23,080
love that where's my syntax error

00:13:20,800 --> 00:13:25,690
everyone help me out here this is the

00:13:23,080 --> 00:13:30,550
perils of live coding oh I broke I broke

00:13:25,690 --> 00:13:37,210
my my render area denied not to sought

00:13:30,550 --> 00:13:40,030
hard let's do two do's that should fix

00:13:37,210 --> 00:13:41,770
that okay that's better alright so it

00:13:40,030 --> 00:13:44,170
still fails and it gives us this really

00:13:41,770 --> 00:13:46,090
cryptic error react creat element type

00:13:44,170 --> 00:13:47,590
is invalid so for those who have ever

00:13:46,090 --> 00:13:48,520
worked in a statically typed languages

00:13:47,590 --> 00:13:50,770
this is the equivalent of like a

00:13:48,520 --> 00:13:52,720
compiler what it's telling us is that

00:13:50,770 --> 00:13:54,910
the file that has our component and it

00:13:52,720 --> 00:13:56,830
has nothing in it and our test run our

00:13:54,910 --> 00:13:58,780
just is super helpful in that case gives

00:13:56,830 --> 00:14:00,460
us a plain object and react has no idea

00:13:58,780 --> 00:14:02,260
what to do with that so let's get

00:14:00,460 --> 00:14:04,540
ourselves to at least a meaningful test

00:14:02,260 --> 00:14:07,030
here I think that's gonna help us along

00:14:04,540 --> 00:14:09,100
so let's grab our to Do's component and

00:14:07,030 --> 00:14:13,090
let's just give it a basic react

00:14:09,100 --> 00:14:14,620
component call to do's let's save that

00:14:13,090 --> 00:14:17,080
now we should have a more meaningful air

00:14:14,620 --> 00:14:19,390
great so it says give it a list of tasks

00:14:17,080 --> 00:14:24,330
when displayed shows each in the list we

00:14:19,390 --> 00:14:27,070
expected 5 we got 0 our test fails

00:14:24,330 --> 00:14:29,380
alright and so armed with our failing

00:14:27,070 --> 00:14:31,510
test we begin to cry we feel like

00:14:29,380 --> 00:14:33,160
perhaps impostor syndrome is real maybe

00:14:31,510 --> 00:14:34,630
we can't not cut out for this programmer

00:14:33,160 --> 00:14:35,320
thing after all and we should maybe find

00:14:34,630 --> 00:14:37,960
a new job

00:14:35,320 --> 00:14:40,750
don't despair it's ok this is actually

00:14:37,960 --> 00:14:42,220
progress a concrete failure is way

00:14:40,750 --> 00:14:43,720
better than some sense that things are

00:14:42,220 --> 00:14:47,290
failing and not knowing what's going on

00:14:43,720 --> 00:14:49,300
and also and I can't under underscore

00:14:47,290 --> 00:14:51,370
this enough if you've never seen a test

00:14:49,300 --> 00:14:53,410
fail it's really hard to have confidence

00:14:51,370 --> 00:14:55,450
that it's a valid test if you have a

00:14:53,410 --> 00:14:57,160
whole suite of tests running in CI and

00:14:55,450 --> 00:14:57,730
they always pass and you've never seen

00:14:57,160 --> 00:14:59,860
one failed

00:14:57,730 --> 00:15:01,840
chances are you have at least some false

00:14:59,860 --> 00:15:04,060
positives and one of the things that TDD

00:15:01,840 --> 00:15:06,130
gives us is the ability to verify up

00:15:04,060 --> 00:15:09,580
front that a test can fail it's a super

00:15:06,130 --> 00:15:11,530
important all right so the next step in

00:15:09,580 --> 00:15:13,120
our short development cycle is the green

00:15:11,530 --> 00:15:15,370
step and that's writing just enough code

00:15:13,120 --> 00:15:17,450
to make this test to pass

00:15:15,370 --> 00:15:18,980
and that's what we're gonna do and we're

00:15:17,450 --> 00:15:21,890
gonna commit all manner of sins and

00:15:18,980 --> 00:15:23,690
atrocities to get there so we have this

00:15:21,890 --> 00:15:25,580
test it's failing um

00:15:23,690 --> 00:15:27,560
I think probably the simplest thing that

00:15:25,580 --> 00:15:29,870
we can do to make this test pass is just

00:15:27,560 --> 00:15:32,420
a spit out five to do component do we

00:15:29,870 --> 00:15:38,840
agree cool let's do it

00:15:32,420 --> 00:15:43,930
so let's grab our to do component and

00:15:38,840 --> 00:15:43,930
let's just spit out five of them

00:15:52,390 --> 00:16:02,180
look bear with me there we go

00:15:59,050 --> 00:16:03,950
let's run it and voila it passes

00:16:02,180 --> 00:16:04,970
outstanding we got some console errors

00:16:03,950 --> 00:16:07,250
there from prop type-checking

00:16:04,970 --> 00:16:12,320
fix those later the point is our test

00:16:07,250 --> 00:16:14,750
passes you would be cool so what do we

00:16:12,320 --> 00:16:16,880
do there we did what's called a

00:16:14,750 --> 00:16:20,030
shameless green or sinful green right

00:16:16,880 --> 00:16:21,350
and even though the test passes the

00:16:20,030 --> 00:16:22,550
implementation is not very useful

00:16:21,350 --> 00:16:24,590
because it's very tightly coupled to

00:16:22,550 --> 00:16:26,810
that test case if we wrote another test

00:16:24,590 --> 00:16:28,250
case and threw it 6 - duze the test

00:16:26,810 --> 00:16:30,200
would fail right there tightly coupled

00:16:28,250 --> 00:16:32,300
so obviously this is not going to help

00:16:30,200 --> 00:16:33,980
us much but what we did was we described

00:16:32,300 --> 00:16:35,900
this perfect interface that we want for

00:16:33,980 --> 00:16:39,170
our component and we achieved it with a

00:16:35,900 --> 00:16:40,640
passing test more importantly we got

00:16:39,170 --> 00:16:42,440
that little dopamine rush from our

00:16:40,640 --> 00:16:44,420
passing tests our developer brain is

00:16:42,440 --> 00:16:46,130
happy we no longer feel like failures

00:16:44,420 --> 00:16:47,720
maybe this imposter syndrome thing is

00:16:46,130 --> 00:16:51,170
not real maybe we don't have to quit our

00:16:47,720 --> 00:16:53,210
jobs we can proceed cool so now the next

00:16:51,170 --> 00:16:54,980
step is we're gonna optimize the code

00:16:53,210 --> 00:16:56,960
under tests without breaking the test

00:16:54,980 --> 00:17:00,170
this is the refactor step so let's go

00:16:56,960 --> 00:17:01,700
ahead and do that so I think what we

00:17:00,170 --> 00:17:03,050
know what we need to do here right we

00:17:01,700 --> 00:17:04,760
can't hard code these to do is we

00:17:03,050 --> 00:17:07,820
probably just need to map over that to

00:17:04,760 --> 00:17:14,240
dues that were given to us and output

00:17:07,820 --> 00:17:18,380
those so let's do that so we have this

00:17:14,240 --> 00:17:24,230
to do prop it's a map so we'll get its

00:17:18,380 --> 00:17:26,210
entries array and then it will pluck

00:17:24,230 --> 00:17:28,610
apart the values in there we've got a

00:17:26,210 --> 00:17:29,900
key we'll call it task and we're gonna

00:17:28,610 --> 00:17:32,270
have a boolean whether it's complete or

00:17:29,900 --> 00:17:33,920
not okay so since we're mapping over

00:17:32,270 --> 00:17:36,850
something here we're gonna need a key

00:17:33,920 --> 00:17:43,490
and we have a map that has unique keys

00:17:36,850 --> 00:17:47,780
so we can use that as our key so we use

00:17:43,490 --> 00:17:49,970
the task as the key and then each one

00:17:47,780 --> 00:17:52,490
needs it to do which is going to be the

00:17:49,970 --> 00:17:57,140
same task and then each one has it is

00:17:52,490 --> 00:17:59,120
complete okay and see what we got the

00:17:57,140 --> 00:18:00,410
excellent we got a passing test Col

00:17:59,120 --> 00:18:04,190
let's just while we're at it let's get

00:18:00,410 --> 00:18:06,020
rid of those console warnings and we

00:18:04,190 --> 00:18:09,080
know from reading the docs and the tests

00:18:06,020 --> 00:18:10,310
that we have an unchanged event we don't

00:18:09,080 --> 00:18:14,390
need to implement it right now we just

00:18:10,310 --> 00:18:18,220
want to verify that the council warnings

00:18:14,390 --> 00:18:18,220
are gone and we also have an on remove

00:18:19,900 --> 00:18:23,180
cool

00:18:21,140 --> 00:18:25,490
we have passing tests outstanding with

00:18:23,180 --> 00:18:28,220
no council warnings so what did we do

00:18:25,490 --> 00:18:30,080
there we committed this sinful green the

00:18:28,220 --> 00:18:32,240
shameless green that got us to a passing

00:18:30,080 --> 00:18:34,460
test and then we went back and fixed it

00:18:32,240 --> 00:18:36,320
but chances are if you've been writing

00:18:34,460 --> 00:18:38,060
react components for a while you know

00:18:36,320 --> 00:18:39,890
what to do right the obvious the clean

00:18:38,060 --> 00:18:40,460
implementation is obvious you should

00:18:39,890 --> 00:18:41,930
just do it

00:18:40,460 --> 00:18:43,640
so I'm not recommending that you

00:18:41,930 --> 00:18:46,310
necessarily do these silly little in

00:18:43,640 --> 00:18:48,380
between steps unless you don't know how

00:18:46,310 --> 00:18:49,760
to reach the optimal solution sometimes

00:18:48,380 --> 00:18:51,500
it won't be clear how to get from your

00:18:49,760 --> 00:18:53,810
perfect interface to the right clean

00:18:51,500 --> 00:18:56,060
solution so you get to refactor in small

00:18:53,810 --> 00:18:57,590
steps until you get there and the

00:18:56,060 --> 00:18:59,540
gentleman that coined the term

00:18:57,590 --> 00:19:01,520
test-driven development guy named by the

00:18:59,540 --> 00:19:04,100
neighbor Kent back in his book TDD by

00:19:01,520 --> 00:19:05,330
example says that and he says this over

00:19:04,100 --> 00:19:07,880
and over and over again throughout the

00:19:05,330 --> 00:19:09,710
book TDD is not about taking teeny tiny

00:19:07,880 --> 00:19:11,630
steps it's about being able to take

00:19:09,710 --> 00:19:13,820
teeny tiny steps and he goes on to say

00:19:11,630 --> 00:19:15,770
that if you all you ever do is take

00:19:13,820 --> 00:19:17,510
large steps how would you know that a

00:19:15,770 --> 00:19:20,570
smaller step might actually solve the

00:19:17,510 --> 00:19:22,070
problem better so that's it in a

00:19:20,570 --> 00:19:23,990
nutshell that's TDD

00:19:22,070 --> 00:19:26,300
it's just that cycle and then you just

00:19:23,990 --> 00:19:28,580
repeat it over and over and over again

00:19:26,300 --> 00:19:30,440
till your application is done so in the

00:19:28,580 --> 00:19:32,660
spirit of that let's go ahead and do so

00:19:30,440 --> 00:19:35,300
let's repeat it and we have one test

00:19:32,660 --> 00:19:37,940
right now this component is not super

00:19:35,300 --> 00:19:39,560
useful for us we can display some to

00:19:37,940 --> 00:19:40,910
do's but right now the user can't

00:19:39,560 --> 00:19:42,920
interact with it so let's write another

00:19:40,910 --> 00:19:44,810
test probably the first thing a user is

00:19:42,920 --> 00:19:46,640
going to want to do is to add a new task

00:19:44,810 --> 00:19:49,610
so let's go ahead and do that let's

00:19:46,640 --> 00:19:54,640
write a test for that let's say when a

00:19:49,610 --> 00:19:54,640
user chooses to add a new task

00:19:56,560 --> 00:20:07,160
it shows the new task in the list so

00:20:03,740 --> 00:20:12,200
good cool so we're gonna need to render

00:20:07,160 --> 00:20:13,910
out the component again and we'll

00:20:12,200 --> 00:20:16,100
bootstrap it with that same set of -

00:20:13,910 --> 00:20:17,720
duze okay there's our arrangement by the

00:20:16,100 --> 00:20:19,130
way a test a good test usually is in

00:20:17,720 --> 00:20:19,820
three phases arranged

00:20:19,130 --> 00:20:21,470
acta sir

00:20:19,820 --> 00:20:23,749
so here's our arrangement now we're

00:20:21,470 --> 00:20:27,019
gonna need to act so we already have

00:20:23,749 --> 00:20:28,489
some components pre-built by our team we

00:20:27,019 --> 00:20:29,989
have that individual to do component

00:20:28,489 --> 00:20:32,059
we've also got this to do input

00:20:29,989 --> 00:20:34,100
component and it's been tested we know

00:20:32,059 --> 00:20:36,889
that it works and has a public contract

00:20:34,100 --> 00:20:39,409
and in that public contract is a prop

00:20:36,889 --> 00:20:41,210
called unchanged so here we're unit

00:20:39,409 --> 00:20:42,289
testing this component in isolation we

00:20:41,210 --> 00:20:43,879
don't need to worry about how that

00:20:42,289 --> 00:20:46,669
internals with that other component

00:20:43,879 --> 00:20:48,590
behave we're verifying that a callback

00:20:46,669 --> 00:20:50,840
this component provides - it works

00:20:48,590 --> 00:20:52,549
correctly and results in the right

00:20:50,840 --> 00:20:54,769
output so what we're gonna do is we're

00:20:52,549 --> 00:20:55,970
gonna find that to do input and we're

00:20:54,769 --> 00:20:57,950
just going to directly call its on

00:20:55,970 --> 00:21:00,470
change problem the unchanged prop is

00:20:57,950 --> 00:21:05,950
provided by this component so we are

00:21:00,470 --> 00:21:11,659
going to find that to do input component

00:21:05,950 --> 00:21:15,529
and then we're going to get its props

00:21:11,659 --> 00:21:17,989
collection and then we're just going to

00:21:15,529 --> 00:21:21,019
call the unchanged method now but we're

00:21:17,989 --> 00:21:23,090
gonna need to call it with something now

00:21:21,019 --> 00:21:24,440
we're gonna need a new to do let's say

00:21:23,090 --> 00:21:26,509
we're just gonna call it to do and let's

00:21:24,440 --> 00:21:39,649
create that above so let's create a new

00:21:26,509 --> 00:21:41,179
to do and we're gonna do something and

00:21:39,649 --> 00:21:43,009
we're gonna fix that little typo there

00:21:41,179 --> 00:21:44,629
okay cool so we're gonna cast it back

00:21:43,009 --> 00:21:46,369
into the fiery chasm from whence it came

00:21:44,629 --> 00:21:47,570
all right so at this point we've acted

00:21:46,369 --> 00:21:49,099
now now we're gonna rush search

00:21:47,570 --> 00:21:50,809
something about our action so there's

00:21:49,099 --> 00:21:52,759
probably two assertions we could make

00:21:50,809 --> 00:21:54,649
here that would be equally valid we

00:21:52,759 --> 00:21:56,090
bootstrap this thing with five - duze we

00:21:54,649 --> 00:21:58,639
can assert that now there's six and

00:21:56,090 --> 00:22:00,529
that's a perfectly valid assertion but I

00:21:58,639 --> 00:22:01,879
always prefer specificity and I think

00:22:00,529 --> 00:22:03,049
there's a more specific assertion we

00:22:01,879 --> 00:22:04,999
could make here and that's that we can

00:22:03,049 --> 00:22:08,119
find it to do whose to do prop matches

00:22:04,999 --> 00:22:12,639
that exactly so we're gonna do that so

00:22:08,119 --> 00:22:12,639
let's make an assertion let's expect

00:22:12,789 --> 00:22:16,099
that this is a really odd angle to type

00:22:15,619 --> 00:22:18,440
AB

00:22:16,099 --> 00:22:22,749
pardon my typos so we're gonna do first

00:22:18,440 --> 00:22:22,749
is we're going to find all the to Do's

00:22:24,639 --> 00:22:28,940
and then we're gonna call a more

00:22:26,989 --> 00:22:29,820
granular version of find called find

00:22:28,940 --> 00:22:33,749
where

00:22:29,820 --> 00:22:35,609
and find where lets you run a predicate

00:22:33,749 --> 00:22:37,529
over all the nodes all the children in

00:22:35,609 --> 00:22:38,729
the tree and then it'll return those

00:22:37,529 --> 00:22:40,289
that match the predicate so our

00:22:38,729 --> 00:22:46,259
predicate is going to be that there's a

00:22:40,289 --> 00:22:49,619
prop called or a azaab we're gonna find

00:22:46,259 --> 00:22:53,100
a prop called to do

00:22:49,619 --> 00:22:55,289
oops pardon me we're going to find a

00:22:53,100 --> 00:22:58,379
prop called to do and that we're gonna

00:22:55,289 --> 00:23:01,049
expect that it matches exactly but to do

00:22:58,379 --> 00:23:03,809
that we just defined and then we're

00:23:01,049 --> 00:23:04,859
gonna check that it exists and this is

00:23:03,809 --> 00:23:06,599
going to tell us that at least one of

00:23:04,859 --> 00:23:13,019
them exists or we'll expect that to be

00:23:06,599 --> 00:23:15,570
true cool and let's run the test and we

00:23:13,019 --> 00:23:17,249
should expect the test to fail and we

00:23:15,570 --> 00:23:18,690
have an unexpected token so it's

00:23:17,249 --> 00:23:23,279
definitely going to fail where did we

00:23:18,690 --> 00:23:25,080
break it helped me out folks first one

00:23:23,279 --> 00:23:30,119
to spot it gets a prize it looks like

00:23:25,080 --> 00:23:30,450
it's here right there's the problem all

00:23:30,119 --> 00:23:32,519
right

00:23:30,450 --> 00:23:35,940
good okay cool so we got a failure as

00:23:32,519 --> 00:23:38,159
expected and the failure tells us that

00:23:35,940 --> 00:23:41,580
method props is meant to be run on one

00:23:38,159 --> 00:23:42,659
node zero found instead and then it

00:23:41,580 --> 00:23:44,669
shows us the line where that occurs

00:23:42,659 --> 00:23:46,649
basically it's telling us it can't find

00:23:44,669 --> 00:23:48,419
to do input right because we haven't

00:23:46,649 --> 00:23:51,119
implemented it yet so let's go ahead and

00:23:48,419 --> 00:23:53,609
implement it let's go back to our unit

00:23:51,119 --> 00:24:00,929
under test so we're gonna need to import

00:23:53,609 --> 00:24:08,129
that and then we're gonna need to render

00:24:00,929 --> 00:24:09,869
one out right okay and then we also know

00:24:08,129 --> 00:24:10,889
because we're invoking it that we're

00:24:09,869 --> 00:24:13,379
gonna have to cut we're gonna have to

00:24:10,889 --> 00:24:15,090
give it a non change and for the sake of

00:24:13,379 --> 00:24:17,779
simplicity let's just call it on change

00:24:15,090 --> 00:24:21,869
and then our job is going to be to

00:24:17,779 --> 00:24:26,429
implement that so we know what's going

00:24:21,869 --> 00:24:28,759
to take it to do now what are we gonna

00:24:26,429 --> 00:24:28,759
do here

00:24:30,390 --> 00:24:34,470
well we have some idea because we've

00:24:32,670 --> 00:24:36,960
described the behavior that we want in

00:24:34,470 --> 00:24:40,230
our test we basically have said that

00:24:36,960 --> 00:24:41,970
when the user triggers this change event

00:24:40,230 --> 00:24:43,260
that our new to do just magically

00:24:41,970 --> 00:24:46,230
appears right

00:24:43,260 --> 00:24:47,610
which probably implies some state we

00:24:46,230 --> 00:24:50,280
can't mutate the props that are passed

00:24:47,610 --> 00:24:51,840
in so it probably implies that we're

00:24:50,280 --> 00:24:54,720
gonna have state means we're gonna need

00:24:51,840 --> 00:24:58,500
a stateful component now in the old days

00:24:54,720 --> 00:24:59,550
say in our last October that would have

00:24:58,500 --> 00:25:01,820
meant that we would need a class

00:24:59,550 --> 00:25:04,320
component that extends react component

00:25:01,820 --> 00:25:04,860
but the folks at Facebook that work on

00:25:04,320 --> 00:25:06,720
react

00:25:04,860 --> 00:25:08,670
came up with an alternative API that

00:25:06,720 --> 00:25:10,260
lets you hook into things like state

00:25:08,670 --> 00:25:12,360
management from function components it's

00:25:10,260 --> 00:25:15,240
called the hooks API this is good

00:25:12,360 --> 00:25:16,560
because the overhead of classes is often

00:25:15,240 --> 00:25:18,210
not needed and more importantly

00:25:16,560 --> 00:25:20,340
javascript doesn't have classes

00:25:18,210 --> 00:25:22,410
javascript just has syntax sugar on top

00:25:20,340 --> 00:25:25,320
of constructors and prototype chains so

00:25:22,410 --> 00:25:30,770
we're gonna use the use state hook so

00:25:25,320 --> 00:25:33,830
we're gonna need to import it first and

00:25:30,770 --> 00:25:36,000
it looks something like this

00:25:33,830 --> 00:25:37,980
you give it the name of the state

00:25:36,000 --> 00:25:39,390
container there's a setter provided for

00:25:37,980 --> 00:25:41,820
you and then we'll initialize it with

00:25:39,390 --> 00:25:44,400
the two dews that are passed in or we

00:25:41,820 --> 00:25:46,980
don't get one we'll just initialize it

00:25:44,400 --> 00:25:48,960
with a new map and then what that means

00:25:46,980 --> 00:25:51,000
is that we should just be able to call

00:25:48,960 --> 00:25:52,500
the setter or the mutated collection so

00:25:51,000 --> 00:25:57,300
we should just be able to do set to dues

00:25:52,500 --> 00:26:00,390
and just add our new one initialize to

00:25:57,300 --> 00:26:01,560
false okay and we're almost done there's

00:26:00,390 --> 00:26:03,990
just one more thing here that we're

00:26:01,560 --> 00:26:07,260
gonna need to do to make this work first

00:26:03,990 --> 00:26:08,580
one the spot it gets extra credit it's

00:26:07,260 --> 00:26:10,140
alright I'll give it away right now

00:26:08,580 --> 00:26:11,940
we're still reading off off the props

00:26:10,140 --> 00:26:13,710
the read-only props that are passed in

00:26:11,940 --> 00:26:19,650
so we actually need to read from our new

00:26:13,710 --> 00:26:21,380
State container okay now we have syntax

00:26:19,650 --> 00:26:26,210
errors all over the place what do we do

00:26:21,380 --> 00:26:26,210
we broke something oh I know what it is

00:26:29,990 --> 00:26:36,580
all right we're still broken would it be

00:26:31,999 --> 00:26:39,200
break now we broke something

00:26:36,580 --> 00:26:43,820
we broke one of our previous tests right

00:26:39,200 --> 00:26:47,619
yeah no that's it help me out folks what

00:26:43,820 --> 00:26:56,809
did we break hmm

00:26:47,619 --> 00:27:10,279
we're in the source of the test right

00:26:56,809 --> 00:27:11,740
here right here ah yeah thank you that

00:27:10,279 --> 00:27:13,340
is outstanding thanks for the help

00:27:11,740 --> 00:27:16,549
thanks for the assist

00:27:13,340 --> 00:27:19,519
all right cool all right

00:27:16,549 --> 00:27:21,409
so we have now what we're gonna do is

00:27:19,519 --> 00:27:23,149
we're gonna fast forward another six

00:27:21,409 --> 00:27:24,200
months you can tell like these things

00:27:23,149 --> 00:27:25,429
take a long time for anyone that

00:27:24,200 --> 00:27:27,019
actually works in the real world knows

00:27:25,429 --> 00:27:28,820
that simple things take a long time in

00:27:27,019 --> 00:27:30,649
the real world um we're gonna fast

00:27:28,820 --> 00:27:32,119
forward six months and we're gonna let

00:27:30,649 --> 00:27:33,440
our team continue along this journey of

00:27:32,119 --> 00:27:35,330
test-driven development before they've

00:27:33,440 --> 00:27:36,289
even looked at it in a browser and then

00:27:35,330 --> 00:27:38,059
what's going to happen is they're gonna

00:27:36,289 --> 00:27:39,440
have a fully functional application and

00:27:38,059 --> 00:27:41,539
they haven't yet looked at it in the

00:27:39,440 --> 00:27:46,039
browser it's probably going to look like

00:27:41,539 --> 00:27:48,590
crap this is amazon.com when it launched

00:27:46,039 --> 00:27:50,960
in 1999 by today's standards this looks

00:27:48,590 --> 00:27:52,549
like absolute rubbish but it was a very

00:27:50,960 --> 00:27:54,679
successful e-commerce site that allowed

00:27:52,549 --> 00:27:57,320
Amazon to become the juggernaut that

00:27:54,679 --> 00:27:59,360
they are today and this leads us then to

00:27:57,320 --> 00:28:01,159
the really neat thing about test-driven

00:27:59,360 --> 00:28:04,490
component development and that is that

00:28:01,159 --> 00:28:06,769
we can treat the visual look and feel

00:28:04,490 --> 00:28:09,350
portion of it as refactoring with

00:28:06,769 --> 00:28:12,679
passing tests so we've already proven

00:28:09,350 --> 00:28:14,330
that it works right now we can actually

00:28:12,679 --> 00:28:16,519
set aside the behavioural part which was

00:28:14,330 --> 00:28:18,019
hard right and we can let our tests run

00:28:16,519 --> 00:28:20,480
and now we can focus on something else

00:28:18,019 --> 00:28:23,570
that's hard which is CSS and HTML making

00:28:20,480 --> 00:28:31,930
things look great so let's catch up with

00:28:23,570 --> 00:28:34,780
the team and

00:28:31,930 --> 00:28:37,300
see how they've done so the first thing

00:28:34,780 --> 00:28:39,970
we're gonna do of course is to run our

00:28:37,300 --> 00:28:41,710
tests and see how far they've come on

00:28:39,970 --> 00:28:44,860
that component that we started helping

00:28:41,710 --> 00:28:47,740
them with and what we can see is that

00:28:44,860 --> 00:28:50,980
they were able to select only the active

00:28:47,740 --> 00:28:52,930
tasks complete one and verify that it is

00:28:50,980 --> 00:28:54,490
removed from the active tasks if you do

00:28:52,930 --> 00:28:56,320
the opposite with completed tasks they

00:28:54,490 --> 00:28:57,790
can delete one and they can remove one

00:28:56,320 --> 00:29:00,160
so we're gonna do here is I'm going to

00:28:57,790 --> 00:29:01,540
shrink these tests down not important

00:29:00,160 --> 00:29:02,890
that you guys can read the individual

00:29:01,540 --> 00:29:05,620
tests out there we just want to verify

00:29:02,890 --> 00:29:07,810
that they're not breaking and then we

00:29:05,620 --> 00:29:12,190
are going to stand up a browser over

00:29:07,810 --> 00:29:18,250
here and we are going to let's go ahead

00:29:12,190 --> 00:29:20,190
and get this guy here and I've got the

00:29:18,250 --> 00:29:23,320
dev server running in the background and

00:29:20,190 --> 00:29:25,030
the first thing we're gonna do is verify

00:29:23,320 --> 00:29:26,830
that it in fact it actually does work

00:29:25,030 --> 00:29:28,600
we've made this bold claim that we could

00:29:26,830 --> 00:29:29,830
build an application without looking at

00:29:28,600 --> 00:29:32,050
it so let's just see

00:29:29,830 --> 00:29:34,300
can we add a new task it looks like we

00:29:32,050 --> 00:29:36,280
can this is good this is progress

00:29:34,300 --> 00:29:38,230
can't wait let's see all the active one

00:29:36,280 --> 00:29:41,620
to see if we can complete one it looks

00:29:38,230 --> 00:29:43,510
like we can looks good and let's see if

00:29:41,620 --> 00:29:46,000
we can remove that it looks like it's

00:29:43,510 --> 00:29:48,970
gone and then let's see if we can remove

00:29:46,000 --> 00:29:51,310
them all okay cool so it worked it looks

00:29:48,970 --> 00:29:53,050
like crap it's all just basic HTML

00:29:51,310 --> 00:29:54,790
components there's no real pizzazz here

00:29:53,050 --> 00:29:57,280
no style if we put different links

00:29:54,790 --> 00:29:58,720
strings they're all off they're not

00:29:57,280 --> 00:30:01,840
lined up it looks kind of like rubbish

00:29:58,720 --> 00:30:03,490
so with that in mind let's do a little

00:30:01,840 --> 00:30:05,980
bit of visual refactoring I'm gonna

00:30:03,490 --> 00:30:08,590
cheat here and I'm gonna use component

00:30:05,980 --> 00:30:10,870
library for some prettiness I'm gonna

00:30:08,590 --> 00:30:14,200
use material your eye not because I

00:30:10,870 --> 00:30:16,180
recommend it over other libraries the

00:30:14,200 --> 00:30:17,710
real reason is a lot more practical and

00:30:16,180 --> 00:30:19,510
that is that it's the one that's easiest

00:30:17,710 --> 00:30:20,800
to drop into a project with no config

00:30:19,510 --> 00:30:24,280
and no style sheets and it just looks

00:30:20,800 --> 00:30:28,510
good so I'm gonna use that and I think

00:30:24,280 --> 00:30:31,330
what we can do here let's go ahead swap

00:30:28,510 --> 00:30:33,840
that out for a card all right let's make

00:30:31,330 --> 00:30:33,840
it a flexbox

00:30:42,920 --> 00:30:54,800
and let's make it not fill the whole

00:30:46,350 --> 00:30:54,800
width let's say 90% let's line it laughs

00:30:56,540 --> 00:31:01,440
this is a really odd angle to type from

00:30:59,840 --> 00:31:03,600
all right that should be good enough

00:31:01,440 --> 00:31:08,460
cool and then I think if we just wrap

00:31:03,600 --> 00:31:11,480
these guys in their own container and

00:31:08,460 --> 00:31:11,480
give it a flex of one

00:31:21,550 --> 00:31:27,500
unless see what that looks like

00:31:23,650 --> 00:31:28,190
good said here we go okay alright we're

00:31:27,500 --> 00:31:32,059
getting somewhere

00:31:28,190 --> 00:31:34,280
cool all right so we can also if we want

00:31:32,059 --> 00:31:36,970
so we've just changed the mark up we

00:31:34,280 --> 00:31:39,740
could also or like wrap this in a span

00:31:36,970 --> 00:31:41,630
and everything should still work let's

00:31:39,740 --> 00:31:44,150
just make sure that it works first and

00:31:41,630 --> 00:31:45,320
then we'll prove it by looking at the

00:31:44,150 --> 00:31:47,840
tests and the tests are all still

00:31:45,320 --> 00:31:48,710
passing so if you've written good tests

00:31:47,840 --> 00:31:50,870
if you've written tests that are

00:31:48,710 --> 00:31:52,190
agnostic of implementation details you

00:31:50,870 --> 00:31:55,130
can you should be able to move your

00:31:52,190 --> 00:31:56,690
markup around style it add additional

00:31:55,130 --> 00:32:00,650
wrapper components and everything should

00:31:56,690 --> 00:32:04,790
still just work cool so let's jump ahead

00:32:00,650 --> 00:32:07,250
just one more time here let's see what

00:32:04,790 --> 00:32:10,190
the team has been up to for the next six

00:32:07,250 --> 00:32:14,720
months just doing visual refactoring

00:32:10,190 --> 00:32:18,080
working with the client and let's see

00:32:14,720 --> 00:32:19,220
what we get let's run the tests just

00:32:18,080 --> 00:32:21,350
make sure everything is still running

00:32:19,220 --> 00:32:22,700
and you can see now our UI looks a

00:32:21,350 --> 00:32:25,010
little bit glossy err we've got these

00:32:22,700 --> 00:32:26,750
great little animated radio buttons

00:32:25,010 --> 00:32:33,200
everything looks pretty cool so let's

00:32:26,750 --> 00:32:35,510
just add one more task whoops well Jess

00:32:33,200 --> 00:32:36,910
Kong is close enough let's mark that

00:32:35,510 --> 00:32:39,350
sucker off the list

00:32:36,910 --> 00:32:41,900
alright cool the perils of live coding

00:32:39,350 --> 00:32:44,900
and so what did we do here we learned

00:32:41,900 --> 00:32:47,750
that test-driven development is a thing

00:32:44,900 --> 00:32:49,490
that it's good that testing react

00:32:47,750 --> 00:32:52,580
components is worthwhile and important

00:32:49,490 --> 00:32:54,020
we learned that using this technique we

00:32:52,580 --> 00:32:55,790
could free ourselves from completing

00:32:54,020 --> 00:32:57,350
behavior own presentational concerns

00:32:55,790 --> 00:32:59,360
even though they're co-located in one

00:32:57,350 --> 00:33:01,670
file we could focus on making components

00:32:59,360 --> 00:33:04,429
work and then we could free ourselves to

00:33:01,670 --> 00:33:06,520
focus on how they look we're happy our

00:33:04,429 --> 00:33:08,330
customers happy and now we can get paid

00:33:06,520 --> 00:33:10,250
and that's all I got

00:33:08,330 --> 00:33:10,770
thanks a lot there's the repo that's me

00:33:10,250 --> 00:33:14,270
on Twitter

00:33:10,770 --> 00:33:27,579
[Applause]

00:33:14,270 --> 00:33:27,579

YouTube URL: https://www.youtube.com/watch?v=SDoq37lXHEw


