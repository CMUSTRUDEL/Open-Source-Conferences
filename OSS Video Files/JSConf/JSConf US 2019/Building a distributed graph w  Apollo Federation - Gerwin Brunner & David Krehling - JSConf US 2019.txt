Title: Building a distributed graph w  Apollo Federation - Gerwin Brunner & David Krehling - JSConf US 2019
Publication date: 2019-09-13
Playlist: JSConf US 2019
Description: 
	Introduction to graph federation with Apollo Federation. With a simple example, we will show you how to split your GraphQL Schema into smaller "micro-services" and how to link them back together again.
Captions: 
	00:00:00,160 --> 00:00:01,579
Building A Distributed Graph With Apollo Federation - Gerwin Brunner

00:00:01,579 --> 00:00:02,579
- David Krehling We're back everyone.

00:00:02,579 --> 00:00:03,579
Did you guys like your little break?

00:00:03,579 --> 00:00:05,439
All right, so now we have two speakers coming onstage, Gerwin Brunner and David Krehling

00:00:05,439 --> 00:00:06,439
on building Apollo graphs?

00:00:06,439 --> 00:00:07,439
Got it.

00:00:07,439 --> 00:00:08,439
OK, cool.

00:00:08,439 --> 00:00:09,439
Let's give them a warm welcome [applause]

00:00:09,439 --> 00:00:10,439
>> Gerwin: Hello.

00:00:10,439 --> 00:00:11,439
David: Can you hear us?

00:00:11,439 --> 00:00:12,439
Great.

00:00:12,439 --> 00:00:13,439
Gerwin: Yeah, I know what they meant before.

00:00:13,439 --> 00:00:14,439
You're in the spotlight literally.

00:00:14,439 --> 00:00:15,439
Is there anybody there?

00:00:15,439 --> 00:00:16,439
David: All right, perfect.

00:00:16,439 --> 00:00:17,439
So yeah.

00:00:17,439 --> 00:00:18,439
So, yeah, thanks for coming, I guess.

00:00:18,439 --> 00:00:19,439
Today we're going to talk about building a distributed graph with Apollo Federation and

00:00:19,439 --> 00:00:24,449
maybe before we dive in, some questions for you just so we get to know you a little bit

00:00:24,449 --> 00:00:25,449
better.

00:00:25,449 --> 00:00:27,570
So actually, start with simple one.

00:00:27,570 --> 00:00:29,529
How many of you actually know GraphQL?

00:00:29,529 --> 00:00:31,750
OK, raise your hand.

00:00:31,750 --> 00:00:33,920
OK, so I can't see anything.

00:00:33,920 --> 00:00:38,719
OK, that's kind of good!

00:00:38,719 --> 00:00:41,100
How many of you already use GraphQL?

00:00:41,100 --> 00:00:46,010
Yay, also, quite good, I guess.

00:00:46,010 --> 00:00:48,649
And how many of you have heard of the Apollo Federation.

00:00:48,649 --> 00:00:53,060
OK, that's more than I expected.

00:00:53,060 --> 00:00:56,180
But that's good, because that is why we're here.

00:00:56,180 --> 00:00:59,850
Maybe just to start with us.

00:00:59,850 --> 00:01:01,469
My name is David Krehling.

00:01:01,469 --> 00:01:07,610
This guy next to me is Gerwin Brunner, we're both from Vienna Austria, and we work there

00:01:07,610 --> 00:01:15,830
in one of the biggest banks in Austria and central Eastern Europe region and we're building

00:01:15,830 --> 00:01:25,190
a state of the art web application replacing an old legacy one and we tried to incorporate

00:01:25,190 --> 00:01:32,670
GraphQL like from day one into our design so we got quite a few learnings and basically

00:01:32,670 --> 00:01:36,190
this talk incorporates that a little.

00:01:36,190 --> 00:01:39,100
So maybe let's start simple.

00:01:39,100 --> 00:01:41,030
What's actually GraphQL?

00:01:41,030 --> 00:01:49,900
OK, so -- oh, I can see it here so.

00:01:49,900 --> 00:01:56,211
So I guess most of you know REST, and I guess most of you know like the issues you get with

00:01:56,211 --> 00:02:04,890
REST, especially when you get like -- when you have like more complex or bigger applications

00:02:04,890 --> 00:02:06,250
or systems.

00:02:06,250 --> 00:02:12,410
You have several issues, for example, if you need data from different kinds of services,

00:02:12,410 --> 00:02:18,940
you always have to call them separately, you have to get all the data from them.

00:02:18,940 --> 00:02:26,520
And basically this leads to a slow network environment and you basically get data you

00:02:26,520 --> 00:02:31,330
don't want or you don't need.

00:02:31,330 --> 00:02:40,010
GraphQL is trying to solve that by putting a data graph in between which is described

00:02:40,010 --> 00:02:48,090
in this so-called schema and that basically allows you to query several services at once

00:02:48,090 --> 00:02:53,150
and to query exactly for the data you really need.

00:02:53,150 --> 00:03:00,300
What's also cool, just like a side fact, you can also put GraphQL as a layer on top of

00:03:00,300 --> 00:03:08,220
your REST services so if you can't switch like this, you can really build the REST service

00:03:08,220 --> 00:03:14,490
into your GraphQL environment and then replace it piece by piece.

00:03:14,490 --> 00:03:23,090
So like I said before, like one of the core building blocks of GraphQL is the schema.

00:03:23,090 --> 00:03:29,890
Which is shared between the client and server, and basically it's there to validate all the

00:03:29,890 --> 00:03:33,320
inputs or the payloads you define in the schema.

00:03:33,320 --> 00:03:40,569
So every time you make a request and GraphQL terminal, it would be a query or a mutation,

00:03:40,569 --> 00:03:49,790
the schema checks if one the types are proper and if they are input or the payload is complete,

00:03:49,790 --> 00:03:55,540
and if there's -- if the data is in there or the data that you want.

00:03:55,540 --> 00:04:00,040
Another thing is that it's like strictly typed, so you also have type validation in there,

00:04:00,040 --> 00:04:01,070
as well.

00:04:01,070 --> 00:04:06,711
The second big building block is the resolver, and basically in the resolver, not all of

00:04:06,711 --> 00:04:12,020
the metric, but basically all the metric happens because it's there to process data, and to

00:04:12,020 --> 00:04:14,050
retrieve data and return data.

00:04:14,050 --> 00:04:24,260
So every time he query something for example, it goes through the resolver and basically

00:04:24,260 --> 00:04:30,160
that's the point where you connect to the database, where you connect to APIs, to other

00:04:30,160 --> 00:04:35,130
services and so on.

00:04:35,130 --> 00:04:42,930
So maybe like the people that already worked with GraphQL know that issue, that like when

00:04:42,930 --> 00:04:46,750
it gets a little bit more complex and as it gets a little bit bigger, you create this

00:04:46,750 --> 00:04:52,470
huge monolithic schema, which basically creates a mess.

00:04:52,470 --> 00:04:56,720
So there are several solutions to that.

00:04:56,720 --> 00:05:06,530
One would be to use schema stitching, which basically creates a mess, as well.

00:05:06,530 --> 00:05:12,620
Because like one of the biggest down sides is if you try to separate the schema which

00:05:12,620 --> 00:05:17,720
shouldn't be separated, you create like lots of overhead code, you create lots of effort,

00:05:17,720 --> 00:05:25,090
lots of work, the bigger it gets, the more you separate t the harder it gets to maintain.

00:05:25,090 --> 00:05:33,610
Even to understand and basically at some point it's impossible to test it.

00:05:33,610 --> 00:05:36,449
So that's where Apollo came in.

00:05:36,449 --> 00:05:45,530
The smart guys there, and they created Apollo Federation.

00:05:45,530 --> 00:05:52,640
What they tried to do is incorporate some core principles, basically the first one it

00:05:52,640 --> 00:06:01,520
should be a declarative, meaning no schema stitching at all, so you're freed of that,

00:06:01,520 --> 00:06:09,100
and another thing which is pretty great is that you have a separation of concerns, meaning

00:06:09,100 --> 00:06:17,139
you divide your schema into several stand-alone schemas, which then can be referenced to each

00:06:17,139 --> 00:06:18,180
other.

00:06:18,180 --> 00:06:25,090
And basically to bring all of that back together to the client, Apollo created the gateway

00:06:25,090 --> 00:06:32,990
which takes all those several federated schemas, and makes like one huge schema out of it again,

00:06:32,990 --> 00:06:40,270
so basically like the client, nothing changed at all, it's only on the server side.

00:06:40,270 --> 00:06:41,270
OK.

00:06:41,270 --> 00:06:47,300
So to build up federated schema, you have several building blocks, we go through this

00:06:47,300 --> 00:06:49,550
list one by one.

00:06:49,550 --> 00:06:53,080
Let's just start with entities and keys.

00:06:53,080 --> 00:07:05,250
So basically an entity is just -- is just a GraphQL type basically the only thing that's

00:07:05,250 --> 00:07:16,190
changed is this @key directive on the right-hand side of the customer.

00:07:16,190 --> 00:07:25,620
Which basically creates a connection between the several schemas, so by adding this @key

00:07:25,620 --> 00:07:35,310
field, you create this connection point and basically what it is is nothing else than

00:07:35,310 --> 00:07:49,190
as a primary key, basically it works like an SQL.

00:07:49,190 --> 00:07:57,860
So as soon as you created this entity, which again is basically just an @key directive,

00:07:57,860 --> 00:08:06,539
you can reference it from different schemas or services, so maybe to go back, just imagine

00:08:06,539 --> 00:08:13,260
this code example, for example, would be in a schema in the customer service, and the

00:08:13,260 --> 00:08:17,940
next one here would be, for example, in the order service.

00:08:17,940 --> 00:08:24,889
So basically everything you do there is just creating the same type again, but putting

00:08:24,889 --> 00:08:30,600
this extent keyword in front of it, and again this directive.

00:08:30,600 --> 00:08:34,529
The @key primary key at the end of it.

00:08:34,529 --> 00:08:42,809
And that's basically where you'd just -- how do you say it, like, reference to the other

00:08:42,809 --> 00:08:43,809
schema.

00:08:43,809 --> 00:08:46,569
And basically that's almost it.

00:08:46,569 --> 00:08:52,209
So all you have to do now is just declare what do you want?

00:08:52,209 --> 00:09:01,600
So basically again, just like super-simple GraphQL and for that, you got the other.

00:09:01,600 --> 00:09:04,049
The other keyword which would be the external.

00:09:04,049 --> 00:09:11,189
-- I have to drink something, sorry.

00:09:11,189 --> 00:09:21,480
Which would be the external keyword, and basically all the external is doing is it's telling

00:09:21,480 --> 00:09:31,999
GraphQL, it's telling your schema in this case, the order schema, that the ID is coming

00:09:31,999 --> 00:09:33,959
from a different schema.

00:09:33,959 --> 00:09:37,759
So it's not like native to the schema.

00:09:37,759 --> 00:09:44,990
This might sound kind of weird like in the first second, but if we go to the next slide,

00:09:44,990 --> 00:09:51,679
hopefully it makes a little bit more sense, because there are also type extension, because

00:09:51,679 --> 00:09:56,069
there's referencing between different schemas shouldn't be a one-way street.

00:09:56,069 --> 00:10:03,019
It should basically go in the other direction, as well, because you want to divide it by

00:10:03,019 --> 00:10:11,839
concern, and not just by type, so you also have the possibility, in this case, to extend

00:10:11,839 --> 00:10:19,560
reference type, so basically meaning again we're in an order schema, we created the reference

00:10:19,560 --> 00:10:22,429
to the customer type here.

00:10:22,429 --> 00:10:29,089
And now we want to add some properties there, because just imagine in the order service,

00:10:29,089 --> 00:10:33,450
we want to know the number of orders for one customer.

00:10:33,450 --> 00:10:41,459
I mean there's no point to add this state to the customer service, it doesn't concern

00:10:41,459 --> 00:10:46,910
it, so we have to add it to the order service and that's basically what we're doing here.

00:10:46,910 --> 00:10:53,999
We just add another prop to a reference type, without this external keyword, so GraphQL

00:10:53,999 --> 00:11:00,429
knows straight away, it's like native to this schema.

00:11:00,429 --> 00:11:09,040
And that way you basically create the relationship between those different schemas, so actually,

00:11:09,040 --> 00:11:11,050
it's super-simple.

00:11:11,050 --> 00:11:19,420
So coming back to the architecture, actually, all you know is like different federated schemas,

00:11:19,420 --> 00:11:26,149
and this Apollo gateway and basically Apollo is providing you with both of those.

00:11:26,149 --> 00:11:34,970
Just to give you like a quick overview, how much code you would need to set it up, except

00:11:34,970 --> 00:11:39,480
the code I showed you already, is basically just this.

00:11:39,480 --> 00:11:56,920
So instead of inserting your server into your Apollo server, so basically that way you just

00:11:56,920 --> 00:12:03,779
create a federated schema, which can, like work on its own, which is stand-alone, so

00:12:03,779 --> 00:12:10,579
it's basically its own schema, and then, on the right-hand side, you see the Apollo gateway

00:12:10,579 --> 00:12:14,689
which brings everything together, so in that Apollo gateway.

00:12:14,689 --> 00:12:24,879
You put in a direction where to find it and that's it.

00:12:24,879 --> 00:12:31,980
And it's basically not tough to set up and it brings you so much benefits.

00:12:31,980 --> 00:12:38,560
And maybe to show you the transition from like a regular schema to a federated schema,

00:12:38,560 --> 00:12:44,040
I will hand it over to Gerwin now.

00:12:44,040 --> 00:12:48,490
Gerwin: So enough of the theory.

00:12:48,490 --> 00:12:57,029
I like to do the insane stuff, which means, doing live coding and if the screen comes

00:12:57,029 --> 00:12:58,959
up, we'll see how that goes.

00:12:58,959 --> 00:13:00,730
Yeah.

00:13:00,730 --> 00:13:02,510
OK.

00:13:02,510 --> 00:13:05,910
So where do we start here?

00:13:05,910 --> 00:13:08,079
OK.

00:13:08,079 --> 00:13:12,009
Let's start with a little bit of looking into the code.

00:13:12,009 --> 00:13:17,430
So our starting point is simple.

00:13:17,430 --> 00:13:25,009
We have customers, we have coffee, like Espresso.

00:13:25,009 --> 00:13:27,709
Or a cold brew, and we have orders.

00:13:27,709 --> 00:13:35,499
Which combines those two things like customers and coffees together to basically enjoy the

00:13:35,499 --> 00:13:36,499
beverage.

00:13:36,499 --> 00:13:42,869
So that's the simplest schema we could come up with, so as we said, we had a customer

00:13:42,869 --> 00:13:51,040
which has an ID and name, we have coffee which has an ID, a name, which is the type of coffee,

00:13:51,040 --> 00:13:57,569
like Espresso, cappuccino, and we have a price, obviously it's not free and we have orders

00:13:57,569 --> 00:14:02,699
that combine those and also give us the information when it was bought.

00:14:02,699 --> 00:14:10,720
Pretty simple, pretty straightforward, then we have basically the resolvers and can everybody

00:14:10,720 --> 00:14:14,040
see the stuff up there?

00:14:14,040 --> 00:14:15,040
Yes?

00:14:15,040 --> 00:14:16,980
No, OK, that's good, just to make sure.

00:14:16,980 --> 00:14:22,570
So in the resolver, basically you would go to a database to a different API, to whatever,

00:14:22,570 --> 00:14:27,850
to query the stuff, but in this case we don't -- I just basically hard coded it here.

00:14:27,850 --> 00:14:32,240
So we have a list of customers, we have Paul, Mark and Bruce.

00:14:32,240 --> 00:14:37,290
We have coffees like Espresso, cold brew and nitro cold brew and we have resolvers that

00:14:37,290 --> 00:14:39,129
merge those.

00:14:39,129 --> 00:14:46,070
In the same query, we can query all customers, all coffees, all orders.

00:14:46,070 --> 00:14:53,100
And we have this thing here that basically makes orders resolve correctly.

00:14:53,100 --> 00:14:56,799
So now let's quickly look at GraphQL.

00:14:56,799 --> 00:15:05,209
GraphQL comes with a lot of implementation of the GraphQL API, so Apollo provides it

00:15:05,209 --> 00:15:09,839
as soon as you throw it into the application, you get like a graphical interface and if

00:15:09,839 --> 00:15:21,369
you haven't seen it yet, it's magic, magic meaning, like oh, hey, I just start typing

00:15:21,369 --> 00:15:29,350
and it says oh, customers, and I run this query and I get a list of customers, amazing.

00:15:29,350 --> 00:15:34,449
Then we can do the same kind of thing for coffees, and what kind of coffees do we offer?

00:15:34,449 --> 00:15:37,929
And we get a list of coffees.

00:15:37,929 --> 00:15:44,480
And I probably need the ID of the customer in my application to do something else, so

00:15:44,480 --> 00:15:53,749
I can add stuff on the go, and that's actually one of the biggest magics -- biggest magic

00:15:53,749 --> 00:16:00,850
that GraphQL does, it gives you the opportunity to, as a client to just select what you need.

00:16:00,850 --> 00:16:01,850
Good.

00:16:01,850 --> 00:16:03,809
So and finally, let's do something.

00:16:03,809 --> 00:16:09,389
And let's take a look at the orders.

00:16:09,389 --> 00:16:13,509
So we can do the same here, like when was it bought?

00:16:13,509 --> 00:16:18,879
And we can also dig deep into the customer.

00:16:18,879 --> 00:16:20,220
Who was it?

00:16:20,220 --> 00:16:27,709
And we have all the same properties that the customer actually provides as an object.

00:16:27,709 --> 00:16:35,329
So we can select the coffee -- the customer, and to do the same exact same thing with the

00:16:35,329 --> 00:16:38,389
coffee and -- oops.

00:16:38,389 --> 00:16:45,779
Well, the exact same thing with coffee, l so display it and so we have it here.

00:16:45,779 --> 00:16:50,569
So that's really, really really cool, compared to a REST API.

00:16:50,569 --> 00:16:53,910
Who wants to do the same thing up here with REST API?

00:16:53,910 --> 00:16:58,439
I encourage you to show me in that in 4 and a half minutes.

00:16:58,439 --> 00:16:59,470
Anyway.

00:16:59,470 --> 00:17:02,669
So enough about how cool that is.

00:17:02,669 --> 00:17:05,920
So let's just do the crazy part.

00:17:05,920 --> 00:17:13,770
The crazy part is we have looked at the schema, the resolver, and finally, there is like this

00:17:13,770 --> 00:17:22,950
glue magic that comes from the Apollo server that basically loads the resolver and then

00:17:22,950 --> 00:17:32,000
exposes it in a new URL called GraphQL and that's T that's really literally the only

00:17:32,000 --> 00:17:35,030
code that that's something useful in this application.

00:17:35,030 --> 00:17:38,190
I mean useful for this example.

00:17:38,190 --> 00:17:44,450
And if we now decide as a company it's a great idea to split up the stuff, so we make three

00:17:44,450 --> 00:17:45,450
teams.

00:17:45,450 --> 00:17:49,360
One team for customers, one for coffee and one for orders and they should do whatever

00:17:49,360 --> 00:17:53,960
they want to do whenever they want to do it without interfering with each other.

00:17:53,960 --> 00:17:57,580
If you have just one schema, this can be a little bit painful!

00:17:57,580 --> 00:18:07,490
Yeah, I think we can tell you in a beer session what we mean by painful.

00:18:07,490 --> 00:18:08,490
Yeah.

00:18:08,490 --> 00:18:19,650
So good, if we want to split that up, we basically create something like customer in microservices.

00:18:19,650 --> 00:18:21,660
Which is just a folder.

00:18:21,660 --> 00:18:30,980
And in there, we do three things, we create an index.js -- oops index.js.

00:18:30,980 --> 00:18:34,740
Yeah, typing is the most difficult thing.

00:18:34,740 --> 00:18:43,810
Resolvers.js and I really understand what the other speaker yesterday meant with it's

00:18:43,810 --> 00:18:45,320
hard to type here.

00:18:45,320 --> 00:18:47,610
Good, so we have those three things.

00:18:47,610 --> 00:18:53,500
I go to the existing schema and basically just copy everything, and remove the stuff

00:18:53,500 --> 00:18:54,500
I'm not needing.

00:18:54,500 --> 00:18:58,480
Because we're dealing with a customer here now, I just want to query customer.

00:18:58,480 --> 00:19:02,850
I keep the type of customer and delete everything else.

00:19:02,850 --> 00:19:03,850
save.

00:19:03,850 --> 00:19:08,910
I do the same for the resolvers.

00:19:08,910 --> 00:19:18,910
Keep the customer data or database actually, because that's what it is.

00:19:18,910 --> 00:19:19,910
And remove everything that we don't need.

00:19:19,910 --> 00:19:21,890
So that's it.

00:19:21,890 --> 00:19:28,350
As you already saw here, this is a function I wrote before, which is just the same, Apollo

00:19:28,350 --> 00:19:32,970
server creation that we saw before, this part here with two exceptions.

00:19:32,970 --> 00:19:39,810
We built the schema first as a build federated schema and used that schema then to start

00:19:39,810 --> 00:19:41,710
Apollo server, that's everything.

00:19:41,710 --> 00:19:43,720
That's the only thing that changed here.

00:19:43,720 --> 00:19:44,720
Not true.

00:19:44,720 --> 00:19:45,940
There's one more thing.

00:19:45,940 --> 00:19:54,360
I pass in a path because we need to expose this new schema somewhere in this example.

00:19:54,360 --> 00:20:00,120
You would kind of need that, but if you really have different codebases, then every codebase

00:20:00,120 --> 00:20:02,040
would have a different thing.

00:20:02,040 --> 00:20:04,760
Here I just used one server.

00:20:04,760 --> 00:20:11,340
So the path is here.

00:20:11,340 --> 00:20:16,030
So we need the index file and I'm lazy because I can't remember this stuff, or actually I

00:20:16,030 --> 00:20:22,280
tried to remember it before, but failed like three times, so I just copied this over here.

00:20:22,280 --> 00:20:28,420
So OK, this function basically is just a little bit of glue code for my micro-service of the

00:20:28,420 --> 00:20:37,500
customers, which just initializes the create Apollo server code that we had before and

00:20:37,500 --> 00:20:39,150
exposes that.

00:20:39,150 --> 00:20:41,470
So no magic here.

00:20:41,470 --> 00:20:44,920
So this is the index that we had before.

00:20:44,920 --> 00:20:54,880
We can now get rid of the initial full single schema GraphQL stuff and we just do two things,

00:20:54,880 --> 00:21:03,680
we import the Apollo gateway, and we import the function that I just showed you with initializing

00:21:03,680 --> 00:21:04,930
the customers.

00:21:04,930 --> 00:21:07,690
Then I need to define the URL.

00:21:07,690 --> 00:21:16,000
Oops, and not just a URL, but I also need to do just this here, define a URL, which

00:21:16,000 --> 00:21:25,310
is GMS, which is GraphQL microservices/customer and I call in it customers, which is exactly

00:21:25,310 --> 00:21:34,900
the method that starts up that specific GraphQL server for the customer, and then I have the

00:21:34,900 --> 00:21:44,010
Apollo gateway where I pass in this URL of the customer to basically aggregate that.

00:21:44,010 --> 00:21:50,760
So we have two things now, we have the separate GMS/customer GraphQL endpoint that works as

00:21:50,760 --> 00:21:56,940
a regular GraphQL enter point and now we have the gateway, which is just /graphQL which

00:21:56,940 --> 00:22:02,780
aggregates all the other ones, but we just have the customer one and that's it.

00:22:02,780 --> 00:22:07,530
And if everything works -- wow, it does!

00:22:07,530 --> 00:22:16,540
We can go here and one thing, we can go into GMS customer, and we fail.

00:22:16,540 --> 00:22:19,180
Which is not surprising.

00:22:19,180 --> 00:22:20,620
Does the regular one work?

00:22:20,620 --> 00:22:22,080
No, everything breaks.

00:22:22,080 --> 00:22:23,080
Awesome!

00:22:23,080 --> 00:22:26,300
Why -- init customers is not loaded.

00:22:26,300 --> 00:22:40,350
OK, saving things helps, yes, it really does, OK, that was simple, helpful.

00:22:40,350 --> 00:22:52,640
So now we're in GMS customer and we can -- oh, cool, query customers, what a surprise!

00:22:52,640 --> 00:22:55,230
So damn it!

00:22:55,230 --> 00:22:57,820
Wrong key.

00:22:57,820 --> 00:23:02,280
So and here's my point, we can query the customers.

00:23:02,280 --> 00:23:03,280
Woohoo!!

00:23:03,280 --> 00:23:11,030
And also, we can query the customer here.

00:23:11,030 --> 00:23:12,700
Customers and name.

00:23:12,700 --> 00:23:14,910
So it's there.

00:23:14,910 --> 00:23:15,910
Wow!

00:23:15,910 --> 00:23:23,790
Two end points, one is the gateway, this is the gateway here now, and that one is basically

00:23:23,790 --> 00:23:31,190
the GMS, the micro-service endpoint.

00:23:31,190 --> 00:23:37,990
I'm going to copy over now from a working example the same thing for orders and customers.

00:23:37,990 --> 00:23:39,200
Whoopsie.

00:23:39,200 --> 00:23:45,850
So you just have to believe me that I'm doing the same thing as before, so we can go there.

00:23:45,850 --> 00:23:52,690
Here we got all coffees, and the definition of the schema.

00:23:52,690 --> 00:24:01,140
So we just have to import the same thing here, coffee will path, more coffee, and expose

00:24:01,140 --> 00:24:07,110
it through the gateway, in the last step, and see if that works.

00:24:07,110 --> 00:24:08,200
It does.

00:24:08,200 --> 00:24:16,520
So the GMS customer still works and we just on this -- try to see, oh, we have coffees

00:24:16,520 --> 00:24:17,520
now.

00:24:17,520 --> 00:24:19,040
Hey, cool!

00:24:19,040 --> 00:24:23,120
And we just select the price to see a different -- it works.

00:24:23,120 --> 00:24:32,140
So same thing, and finally, I already copied it, we do the exact same thing for the orders,

00:24:32,140 --> 00:24:35,040
and disclaimer: This is going to break.

00:24:35,040 --> 00:24:37,230
Why is it going to break?

00:24:37,230 --> 00:24:43,860
Because it complains about customer ID is marked as external, but it's not used.

00:24:43,860 --> 00:24:52,730
OK, simple, because what I didn't do before is in the customers, when I copied it over,

00:24:52,730 --> 00:24:54,320
I missed one thing.

00:24:54,320 --> 00:25:04,480
I basically need to say that it's a key, and I already have done that in coffee, so @key

00:25:04,480 --> 00:25:15,730
fields ID, which is this -- which tells the gateway, hey, this is a thing you can reference,

00:25:15,730 --> 00:25:21,850
and as soon as I add that, we should be back in business.

00:25:21,850 --> 00:25:22,850
And we are.

00:25:22,850 --> 00:25:23,850
And it works.

00:25:23,850 --> 00:25:31,750
And so now we can try to also select the orders.

00:25:31,750 --> 00:25:33,020
And the order ID.

00:25:33,020 --> 00:25:37,170
Oops, let's remove these here, so we can see better.

00:25:37,170 --> 00:25:39,740
We removed the order ID.

00:25:39,740 --> 00:25:40,740
It's there.

00:25:40,740 --> 00:25:42,390
What a surprise.

00:25:42,390 --> 00:25:57,550
And we add the coffee, name, also there works nicely, and now we add the customer, and it

00:25:57,550 --> 00:25:58,550
will break.

00:25:58,550 --> 00:25:59,550
Haha.

00:25:59,550 --> 00:26:00,550
Plan for that.

00:26:00,550 --> 00:26:01,550
OK, so why?

00:26:01,550 --> 00:26:05,750
Because we missed the other part, and we take a look at the resolver, and in the coffee

00:26:05,750 --> 00:26:10,070
resolver, we already have it, and now I'm putting it over.

00:26:10,070 --> 00:26:19,050
This is the second piece you need besides the key for reference is the way to tell the

00:26:19,050 --> 00:26:24,910
local service that if some other service comes along and asks you for a customer in this

00:26:24,910 --> 00:26:31,810
case, how to do that, and it's -- the underscore-underscore resolve reference method you need to rely

00:26:31,810 --> 00:26:36,140
on for that type and voila, it works.

00:26:36,140 --> 00:26:37,140
That's it.

00:26:37,140 --> 00:26:38,140
Almost in time.

00:26:38,140 --> 00:26:39,140
David: So really in?

00:26:39,140 --> 00:26:40,180
It breaks at the end?

00:26:40,180 --> 00:26:41,180
Nice.

00:26:41,180 --> 00:26:42,680
Basically just final words.

00:26:42,680 --> 00:26:49,750
Maybe I just put together like a short list which basically some advanced -- more advanced

00:26:49,750 --> 00:26:55,951
features you can do with this Apollo Federation, so for example, you can not only like go 0

00:26:55,951 --> 00:27:00,720
for one primary key, but you can do several, like you can even do like composite primary

00:27:00,720 --> 00:27:08,190
keys, so like a combined key has to be there and so on and so forth.

00:27:08,190 --> 00:27:15,250
If you're really interested in all that stuff and want to go into more detail, we get some

00:27:15,250 --> 00:27:16,250
references here for you.

00:27:16,250 --> 00:27:24,420
Basically the first one is the blogpost published in Apollo, which this talk is based on.

00:27:24,420 --> 00:27:35,010
Oops there's a typo and the Apollo documentation and if you are interested in the code, there's

00:27:35,010 --> 00:27:42,920
also the link to repository for this demo we just showed you.

00:27:42,920 --> 00:27:47,260
So if you want to go into like a simple example and have to code right away, that would be

00:27:47,260 --> 00:27:48,260
it.

00:27:48,260 --> 00:27:52,320
So at that point, we're done.

00:27:52,320 --> 00:27:54,320
Thank you for listening, and yeah.

00:27:54,320 --> 00:27:58,280
Gerwin: If you got any questions, find us.

00:27:58,280 --> 00:28:03,290
We will talk for beer! [applause]

00:28:03,290 --> 00:28:15,140
David: Just to make my mom proud, I have to do one.

00:28:15,140 --> 00:28:16,120

YouTube URL: https://www.youtube.com/watch?v=1nCq_a6-4bg


