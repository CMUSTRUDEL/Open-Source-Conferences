Title: Keynote: Software-Defined Infrastructure at Uber Scale - Justin Dustzadeh, Uber
Publication date: 2018-03-29
Playlist: Open Networking Summit North America 2018
Description: 
	Keynote: Software-Defined Infrastructure at Uber Scale - Justin Dustzadeh, Head of Global Network & Software Platform, Uber

About Justin Dustzadeh
Justin Dustzadeh is Uber’s Head of Global Network & Software Platform. He leads a team responsible for the engineering and operations of Uber’s global network infrastructure, as well as the software-based automation capabilities and tools that help ensure Uber’s infrastructure (compute, network, DC) is always available and functions at peak performance.

Previously, Justin served as the VP and Head of Global Infrastructure Network Services at Visa, where he led the architecture, engineering, and 24x7 operations & security of Visa’s global datacenter and wide-area networks, and drove the modernization and transformation of Visa’s infrastructure toward open, software-defined networking & cloud technologies.

Prior to Visa, Justin served as the CTO & VP of Technology Strategy for Huawei’s $9B Networks business while helping to drive the development and adoption of open SDN & NFV in the industry as a visible and active member of the open networking community. Other previous positions include VP of Technology & Head of Network Architecture at Ericsson, CTO & Co-Founder of a Silicon Valley software technology startup, senior technology and management roles at AT&T Labs (CTO support including driving the transformation of AT&T’s technical infrastructure), as well as senior technology roles with French service providers Cegetel/SFR and Orange. Justin holds a Ph.D. and master's degree in Computer Science from Telecom ParisTech and a bachelor's degree in Theoretical Physics from Ecole Normale Supérieure (ENS Paris).
Captions: 
	00:00:00,030 --> 00:00:06,629
good morning thank you the Linux

00:00:03,899 --> 00:00:09,990
Foundation for inviting me back to speak

00:00:06,629 --> 00:00:11,940
here today and many thanks also to my

00:00:09,990 --> 00:00:13,019
colleagues in the uber infrastructure

00:00:11,940 --> 00:00:16,020
team who helped me with this

00:00:13,019 --> 00:00:18,539
presentation a special shout out to the

00:00:16,020 --> 00:00:20,820
network and software platform teams I'm

00:00:18,539 --> 00:00:23,760
just here to talk about some of the

00:00:20,820 --> 00:00:25,939
great work that our teams are doing to

00:00:23,760 --> 00:00:32,009
build and manage a software-defined

00:00:25,939 --> 00:00:34,170
infrastructure at uber scale today I

00:00:32,009 --> 00:00:37,140
will first say a few words about who we

00:00:34,170 --> 00:00:39,950
are and we also share some numbers to

00:00:37,140 --> 00:00:43,620
highlight Google's growth and scale I

00:00:39,950 --> 00:00:45,539
will then talk about a vision and some

00:00:43,620 --> 00:00:49,140
of our architectural principles for

00:00:45,539 --> 00:00:51,410
software-defined infrastructure I will

00:00:49,140 --> 00:00:53,969
follow on by giving a few specific

00:00:51,410 --> 00:00:56,670
real-world examples of how we leverage

00:00:53,969 --> 00:01:00,660
software for automation and the

00:00:56,670 --> 00:01:02,789
infrastructure and I will conclude by

00:01:00,660 --> 00:01:12,450
providing an end-to-end view of our

00:01:02,789 --> 00:01:17,520
global network who is over uber started

00:01:12,450 --> 00:01:21,890
in 2010 to solve a simple problem how do

00:01:17,520 --> 00:01:21,890
you get a ride at the push of a button a

00:01:22,340 --> 00:01:26,880
few years later

00:01:24,210 --> 00:01:32,159
uber was already operating in hundreds

00:01:26,880 --> 00:01:37,020
of cities around the world by late 2015

00:01:32,159 --> 00:01:40,320
we completed our one billionth trip and

00:01:37,020 --> 00:01:44,759
in about six months later we completed

00:01:40,320 --> 00:01:45,470
the next billion and less than a year

00:01:44,759 --> 00:01:49,700
later

00:01:45,470 --> 00:01:54,990
uber had logged over five billion trips

00:01:49,700 --> 00:02:00,090
in 2017 alone we completed four billion

00:01:54,990 --> 00:02:04,770
trips and as of now about 15 million

00:02:00,090 --> 00:02:12,540
trips happen each day in over 600 cities

00:02:04,770 --> 00:02:15,480
and in 78 countries users of our path

00:02:12,540 --> 00:02:19,349
from today include over 75 million

00:02:15,480 --> 00:02:22,950
monthly active riders as well as over 3

00:02:19,349 --> 00:02:29,310
million global 3 million active drivers

00:02:22,950 --> 00:02:32,750
globally so while these numbers speak to

00:02:29,310 --> 00:02:35,340
the already significant scale of uber in

00:02:32,750 --> 00:02:39,870
terms of the overarching opportunity

00:02:35,340 --> 00:02:42,299
today ride-sharing accounts for only a

00:02:39,870 --> 00:02:49,230
low single-digit percentage of total

00:02:42,299 --> 00:02:51,689
miles driven globally in addition to a

00:02:49,230 --> 00:02:54,269
ride-sharing business we have also been

00:02:51,689 --> 00:02:57,470
introducing new services that will

00:02:54,269 --> 00:03:00,750
continue to drive the growth of uber

00:02:57,470 --> 00:03:03,659
these and possibly new services in the

00:03:00,750 --> 00:03:05,519
future will also continue to set new

00:03:03,659 --> 00:03:08,459
requirements and our infrastructure in

00:03:05,519 --> 00:03:14,250
terms of scale performance resiliency

00:03:08,459 --> 00:03:16,139
agility and unit cost so how do we make

00:03:14,250 --> 00:03:22,409
sure that our infrastructure can keep

00:03:16,139 --> 00:03:25,379
pace with such a rapid growth the magic

00:03:22,409 --> 00:03:27,690
of the uber app today is powered by a

00:03:25,379 --> 00:03:30,569
highly distributed software architecture

00:03:27,690 --> 00:03:34,280
that relies on a fault tolerant and

00:03:30,569 --> 00:03:39,180
highly available infrastructure for us

00:03:34,280 --> 00:03:40,919
the only way to be able to deliver the

00:03:39,180 --> 00:03:43,290
required levels of performance and

00:03:40,919 --> 00:03:47,040
availability is through software and

00:03:43,290 --> 00:03:48,599
automation and in order to fully achieve

00:03:47,040 --> 00:03:53,040
the benefits of software based

00:03:48,599 --> 00:03:55,500
automation we must and always strive to

00:03:53,040 --> 00:04:00,389
use open standards based technologies

00:03:55,500 --> 00:04:02,639
and avoid dependency on any single

00:04:00,389 --> 00:04:09,810
vendor across the entire infrastructure

00:04:02,639 --> 00:04:11,879
stack this framework summarizes much of

00:04:09,810 --> 00:04:16,680
the work that we do on staff to define

00:04:11,879 --> 00:04:20,039
infrastructure for us a key enabler is

00:04:16,680 --> 00:04:21,989
to first build real-time or near

00:04:20,039 --> 00:04:24,710
real-time visibility into the

00:04:21,989 --> 00:04:27,690
infrastructure state and

00:04:24,710 --> 00:04:30,150
leveraging debt information possibly

00:04:27,690 --> 00:04:32,730
augmented with additional insights from

00:04:30,150 --> 00:04:35,400
analytics and machine learning we can

00:04:32,730 --> 00:04:37,050
then push the desired state of the

00:04:35,400 --> 00:04:42,960
infrastructure through programmatic

00:04:37,050 --> 00:04:44,910
interfaces now let me spend a few

00:04:42,960 --> 00:04:47,970
minutes to put this into context and

00:04:44,910 --> 00:04:53,190
provide specific real-world examples of

00:04:47,970 --> 00:04:54,660
infrastructure automation we use

00:04:53,190 --> 00:04:56,940
software throughout the entire

00:04:54,660 --> 00:05:00,900
infrastructure lifecycle at uber to

00:04:56,940 --> 00:05:03,330
automate many things from delivering

00:05:00,900 --> 00:05:05,730
forecasting models to doing capacity

00:05:03,330 --> 00:05:08,850
planning to provisioning infrastructure

00:05:05,730 --> 00:05:12,650
to managing all the changes that we

00:05:08,850 --> 00:05:16,920
perform to detecting incidents and

00:05:12,650 --> 00:05:21,440
provide learning to mitigating and

00:05:16,920 --> 00:05:24,720
remediating things when things fail in

00:05:21,440 --> 00:05:27,540
the interest of time I will cover only

00:05:24,720 --> 00:05:34,200
four specific areas over the next few

00:05:27,540 --> 00:05:36,570
slides for provisioning across our

00:05:34,200 --> 00:05:39,420
server and network environments we

00:05:36,570 --> 00:05:43,080
leverage a number of homegrown software

00:05:39,420 --> 00:05:46,260
platforms to automate and orchestrate

00:05:43,080 --> 00:05:48,480
the entire provisioning process this

00:05:46,260 --> 00:05:50,880
includes capabilities such as auto

00:05:48,480 --> 00:05:53,160
discovery where for example on the

00:05:50,880 --> 00:05:55,470
network side we push intelligence down

00:05:53,160 --> 00:05:58,170
to the devices to enable a truly

00:05:55,470 --> 00:06:02,460
distributed self-discovery model and

00:05:58,170 --> 00:06:05,550
enable zero touch provisioning this also

00:06:02,460 --> 00:06:08,790
includes our validation of the state of

00:06:05,550 --> 00:06:14,430
the hardware for example to prevent bad

00:06:08,790 --> 00:06:16,770
devices from going into production for

00:06:14,430 --> 00:06:19,560
automated change management we also

00:06:16,770 --> 00:06:22,680
leverage a homegrown platform that

00:06:19,560 --> 00:06:24,540
serves as the source of truth for the

00:06:22,680 --> 00:06:27,540
desire in the state of the

00:06:24,540 --> 00:06:30,450
infrastructure this platform also

00:06:27,540 --> 00:06:33,210
enables our engineers to define the

00:06:30,450 --> 00:06:36,480
infrastructure state in a vendor

00:06:33,210 --> 00:06:37,320
agnostic way through the configuration

00:06:36,480 --> 00:06:39,750
data

00:06:37,320 --> 00:06:43,650
and it's the data that drives the device

00:06:39,750 --> 00:06:46,620
configuration generations requiring no

00:06:43,650 --> 00:06:50,760
direct human interaction with servers or

00:06:46,620 --> 00:06:52,520
network devices this platform also

00:06:50,760 --> 00:06:55,200
provides infrastructure as code

00:06:52,520 --> 00:06:55,950
capabilities so that changes are

00:06:55,200 --> 00:06:58,710
versioned

00:06:55,950 --> 00:07:01,170
withdrawal backs can be audited reviewed

00:06:58,710 --> 00:07:07,740
and ported across platforms for example

00:07:01,170 --> 00:07:11,340
between on-prem and cloud if needed for

00:07:07,740 --> 00:07:14,610
our detection we leverage a distributed

00:07:11,340 --> 00:07:17,220
and highly available platform and the

00:07:14,610 --> 00:07:20,220
network side we do both active and

00:07:17,220 --> 00:07:23,130
passive monitoring leveraging streaming

00:07:20,220 --> 00:07:25,110
telemetry that gives us near real-time

00:07:23,130 --> 00:07:28,640
visibility into the state of the network

00:07:25,110 --> 00:07:33,000
including our network reach ability

00:07:28,640 --> 00:07:36,530
network latency packet losses and link

00:07:33,000 --> 00:07:39,300
utilization one area that we have found

00:07:36,530 --> 00:07:42,660
to be a bit challenging in this space is

00:07:39,300 --> 00:07:46,680
the current vendor support for standard

00:07:42,660 --> 00:07:53,460
base yang models and also lack of full

00:07:46,680 --> 00:07:56,490
support for open config our mitigation

00:07:53,460 --> 00:07:59,040
and other remediation are also areas

00:07:56,490 --> 00:08:02,550
where we heavily leveraged software to

00:07:59,040 --> 00:08:06,150
improve our operational efficiencies so

00:08:02,550 --> 00:08:08,700
when Hardware fails not only we have to

00:08:06,150 --> 00:08:11,400
ensure that the issue is mitigated

00:08:08,700 --> 00:08:15,720
quickly before it becomes a service

00:08:11,400 --> 00:08:18,360
impacting incident we also automate the

00:08:15,720 --> 00:08:21,210
back end workflows to automatically

00:08:18,360 --> 00:08:26,690
generate troubleshooting and/or RMA

00:08:21,210 --> 00:08:30,750
tickets if needed we can also do auto

00:08:26,690 --> 00:08:33,900
diagnostic tests Auto remediation tests

00:08:30,750 --> 00:08:36,630
and perform failure prediction functions

00:08:33,900 --> 00:08:41,390
for example by monitoring specific

00:08:36,630 --> 00:08:41,390
metrics or by running specific playbooks

00:08:42,140 --> 00:08:47,580
so we do a lot more on software

00:08:44,430 --> 00:08:50,490
automation than these than what these

00:08:47,580 --> 00:08:52,200
four slides covered I

00:08:50,490 --> 00:08:54,959
not have time to cover all of those

00:08:52,200 --> 00:08:56,870
unfortunately but one other aspect that

00:08:54,959 --> 00:08:59,820
I want to talk about is the fact that

00:08:56,870 --> 00:09:02,220
when you rely on software to automate

00:08:59,820 --> 00:09:04,680
your infrastructure you have to be sure

00:09:02,220 --> 00:09:07,589
that that software is thoroughly tested

00:09:04,680 --> 00:09:11,580
and our approach to doing that is to

00:09:07,589 --> 00:09:15,029
create a test environment that can not

00:09:11,580 --> 00:09:18,660
only provide the capabilities needed to

00:09:15,029 --> 00:09:21,510
do the traditional software test cycles

00:09:18,660 --> 00:09:23,610
such as feature testing regression

00:09:21,510 --> 00:09:27,300
testing integration Center testing but

00:09:23,610 --> 00:09:30,149
also enable us to deploy and use the

00:09:27,300 --> 00:09:36,810
tested software to provision monitor and

00:09:30,149 --> 00:09:40,140
configure the test environment itself so

00:09:36,810 --> 00:09:43,920
I will now talk for a few minutes about

00:09:40,140 --> 00:09:50,040
the global network starting from the

00:09:43,920 --> 00:09:53,190
starting with the data center so for us

00:09:50,040 --> 00:09:55,500
network is a foundational layer of

00:09:53,190 --> 00:09:59,220
infrastructure and a key enabler for our

00:09:55,500 --> 00:10:01,500
business as such network resiliency with

00:09:59,220 --> 00:10:03,779
the focus on deterministic failure

00:10:01,500 --> 00:10:07,320
behavior is one of our top design

00:10:03,779 --> 00:10:09,990
principles our professional efficiency

00:10:07,320 --> 00:10:12,029
is also a key objective meaning that the

00:10:09,990 --> 00:10:19,860
network has to be simple to build and

00:10:12,029 --> 00:10:22,770
also be flexible and cost effective this

00:10:19,860 --> 00:10:25,520
is an example data center design which

00:10:22,770 --> 00:10:30,029
in this case is based on a six plane

00:10:25,520 --> 00:10:32,940
multistage cost apology starting from

00:10:30,029 --> 00:10:36,329
the bottom rack switches for several

00:10:32,940 --> 00:10:38,850
aggregation part switches to connect the

00:10:36,329 --> 00:10:41,820
racks fabric switches for connectivity

00:10:38,850 --> 00:10:44,730
between parts and then external fabrics

00:10:41,820 --> 00:10:46,649
which is pro connectivity toward a data

00:10:44,730 --> 00:10:49,500
center aggregation layer and then an

00:10:46,649 --> 00:10:55,560
edge path for connectivity toward ran

00:10:49,500 --> 00:10:58,110
and redundant pops this design is quite

00:10:55,560 --> 00:11:00,690
flexible and that it's a specific

00:10:58,110 --> 00:11:03,750
implementation can be fine-tuned and

00:11:00,690 --> 00:11:06,649
adjusted across many dimensions

00:11:03,750 --> 00:11:07,889
for example depending on requirements on

00:11:06,649 --> 00:11:11,459
oversubscription

00:11:07,889 --> 00:11:14,810
size a failure domain bandwidth capacity

00:11:11,459 --> 00:11:20,850
or power or they need to scale across

00:11:14,810 --> 00:11:23,189
multiple fabrics now here are some

00:11:20,850 --> 00:11:27,810
examples of how this design could be

00:11:23,189 --> 00:11:29,879
implemented in different ways in the

00:11:27,810 --> 00:11:32,759
simplest scenario you can imagine one

00:11:29,879 --> 00:11:35,790
campus with one building or data center

00:11:32,759 --> 00:11:39,660
and one fabric connecting to the

00:11:35,790 --> 00:11:42,209
external world or you can have multiple

00:11:39,660 --> 00:11:45,149
buildings or data centers on the same

00:11:42,209 --> 00:11:50,399
campus and multiple campuses within a

00:11:45,149 --> 00:11:53,160
metro area in this example one edge

00:11:50,399 --> 00:11:57,569
domain is shared between two fabrics in

00:11:53,160 --> 00:12:00,540
two different buildings and similarly

00:11:57,569 --> 00:12:02,819
you can have additional fabrics deployed

00:12:00,540 --> 00:12:06,329
across different buildings and different

00:12:02,819 --> 00:12:08,809
campuses connected through a data center

00:12:06,329 --> 00:12:15,180
aggregation layer with resilience

00:12:08,809 --> 00:12:19,829
redundant low latency fiber but this

00:12:15,180 --> 00:12:22,559
design you can now have availability

00:12:19,829 --> 00:12:25,559
zones where each zone is an independent

00:12:22,559 --> 00:12:28,250
failure domain which means that

00:12:25,559 --> 00:12:32,639
availability zones do not share a common

00:12:28,250 --> 00:12:35,519
physical failure domain which could be a

00:12:32,639 --> 00:12:42,269
network hardware and the edge part or

00:12:35,519 --> 00:12:45,480
rags or power or cooling and once you

00:12:42,269 --> 00:12:48,680
have availability zones you can combine

00:12:45,480 --> 00:12:51,660
zones that are in nearby physical

00:12:48,680 --> 00:12:56,459
locations typically a few milliseconds

00:12:51,660 --> 00:12:58,620
apart into regions and from an

00:12:56,459 --> 00:13:01,050
availability perspective these regions

00:12:58,620 --> 00:13:04,439
can now effectively function similarly

00:13:01,050 --> 00:13:07,860
to cloud providers regions and your

00:13:04,439 --> 00:13:10,220
software developers and your software

00:13:07,860 --> 00:13:14,339
teams can now deploy in these

00:13:10,220 --> 00:13:18,709
availability zones seamlessly between on

00:13:14,339 --> 00:13:18,709
Prem and uncloudy environments

00:13:20,450 --> 00:13:28,020
our global network includes not only the

00:13:24,510 --> 00:13:31,200
data center network in pops but also the

00:13:28,020 --> 00:13:34,340
Metro as well as backbone networks that

00:13:31,200 --> 00:13:36,960
connect pops and data centers together

00:13:34,340 --> 00:13:41,760
we also have an access network for our

00:13:36,960 --> 00:13:43,980
R&D sites across each of these domains

00:13:41,760 --> 00:13:48,080
we are working on a technology roadmap

00:13:43,980 --> 00:13:50,490
and look into next-gen technologies and

00:13:48,080 --> 00:13:54,120
would love to work with this community

00:13:50,490 --> 00:14:00,300
and solving some of these big challenges

00:13:54,120 --> 00:14:03,660
together and the exercise we are looking

00:14:00,300 --> 00:14:06,120
into Sdn and next-gen capabilities to

00:14:03,660 --> 00:14:11,220
support full line great crypto at 100

00:14:06,120 --> 00:14:15,120
gig at the right price point in the

00:14:11,220 --> 00:14:17,880
Metro we are leveraging DWDM for more

00:14:15,120 --> 00:14:22,080
flexible and scalable connectivity at

00:14:17,880 --> 00:14:24,420
the lower unit cost on the backbone side

00:14:22,080 --> 00:14:27,240
and generally in the van space we are

00:14:24,420 --> 00:14:30,240
moving away from static and long-term

00:14:27,240 --> 00:14:33,890
contract models toward a more flexible

00:14:30,240 --> 00:14:39,600
approach preferably Sdn controlled

00:14:33,890 --> 00:14:42,120
undemanding as a service we are also

00:14:39,600 --> 00:14:44,940
exploring ideas and future models where

00:14:42,120 --> 00:14:47,550
regional and long-haul bandwidth could

00:14:44,940 --> 00:14:50,160
be more undemanding usage based like

00:14:47,550 --> 00:14:54,390
cloud services where carriers would

00:14:50,160 --> 00:14:57,600
serve as a spectrum brokers one key

00:14:54,390 --> 00:15:00,240
enabler here will be the upgraded option

00:14:57,600 --> 00:15:05,040
of flex credit open line systems by

00:15:00,240 --> 00:15:06,660
carriers finally on the DC side and the

00:15:05,040 --> 00:15:08,370
data center side in addition to this

00:15:06,660 --> 00:15:10,140
software-defined capabilities that I

00:15:08,370 --> 00:15:14,940
mentioned we are also looking into

00:15:10,140 --> 00:15:17,820
several DM and a modular rack design to

00:15:14,940 --> 00:15:21,960
support multiple server types for

00:15:17,820 --> 00:15:26,540
example across compute storage and AI

00:15:21,960 --> 00:15:29,100
and machine learning with GPU and FPGA

00:15:26,540 --> 00:15:30,990
we're also looking at network

00:15:29,100 --> 00:15:33,360
disaggregation in the data center

00:15:30,990 --> 00:15:40,980
as my last topic I'm gonna cover over

00:15:33,360 --> 00:15:43,380
the next two three slides so with

00:15:40,980 --> 00:15:45,540
merchants silicon taking over networking

00:15:43,380 --> 00:15:48,810
there is a great opportunity especially

00:15:45,540 --> 00:15:51,570
in the data center space to look into

00:15:48,810 --> 00:15:54,149
the disaggregated model to separate

00:15:51,570 --> 00:15:57,149
network hardware and network software

00:15:54,149 --> 00:16:00,450
and with the great work that is

00:15:57,149 --> 00:16:02,790
happening in the industry this model can

00:16:00,450 --> 00:16:06,690
not only bring significant cost savings

00:16:02,790 --> 00:16:09,149
it can also enable a much faster pace of

00:16:06,690 --> 00:16:11,899
innovation especially if you're

00:16:09,149 --> 00:16:17,760
considering building your own network os

00:16:11,899 --> 00:16:20,610
versus leveraging a third-party nas this

00:16:17,760 --> 00:16:24,660
would also allow you to quickly develop

00:16:20,610 --> 00:16:30,540
features in ways not currently possible

00:16:24,660 --> 00:16:32,490
with the OEM model there are certain

00:16:30,540 --> 00:16:34,110
considerations that have to be taken

00:16:32,490 --> 00:16:36,120
into account if you're considering

00:16:34,110 --> 00:16:39,690
adopting a third-party nas or building

00:16:36,120 --> 00:16:41,910
your own ass first and foremost you have

00:16:39,690 --> 00:16:46,350
to ensure that you get feature parity

00:16:41,910 --> 00:16:47,430
with this now solution you have to think

00:16:46,350 --> 00:16:49,800
about the hardware abstraction

00:16:47,430 --> 00:16:54,470
architecture and design that works best

00:16:49,800 --> 00:16:59,130
for you should it be kernel agnostic

00:16:54,470 --> 00:17:01,380
we're introducing changes and adding

00:16:59,130 --> 00:17:05,730
support for new hardware can probably be

00:17:01,380 --> 00:17:07,620
less risky you have to think about the

00:17:05,730 --> 00:17:10,490
code support model that works best for

00:17:07,620 --> 00:17:13,650
you should it be user managed versus

00:17:10,490 --> 00:17:15,780
vendor managed and who should do the

00:17:13,650 --> 00:17:19,020
feature enhancements the patches the

00:17:15,780 --> 00:17:21,360
vulnerability management work and also

00:17:19,020 --> 00:17:23,130
you have to consider and ensure that the

00:17:21,360 --> 00:17:25,530
software has reached the level of

00:17:23,130 --> 00:17:29,210
maturity that can now be put in your

00:17:25,530 --> 00:17:31,890
production environment and last but

00:17:29,210 --> 00:17:33,600
probably most importantly you have to

00:17:31,890 --> 00:17:38,660
make sure that this new solution is

00:17:33,600 --> 00:17:41,370
fully ready for operational deployment

00:17:38,660 --> 00:17:44,720
with that thank you very much for your

00:17:41,370 --> 00:17:44,720
time I'm now happy to take questions

00:17:45,510 --> 00:17:54,580
[Applause]

00:17:51,360 --> 00:17:57,429
just then glad you were able to come

00:17:54,580 --> 00:18:02,429
back again this year as uber rather than

00:17:57,429 --> 00:18:05,799
visa I was fascinated last year that you

00:18:02,429 --> 00:18:08,409
developed a plan for SD Wan as a

00:18:05,799 --> 00:18:10,990
critical part of the visa network

00:18:08,409 --> 00:18:16,240
structure and now I see you considering

00:18:10,990 --> 00:18:19,090
SD win again for the access for uber why

00:18:16,240 --> 00:18:22,000
can you give us more details what kind

00:18:19,090 --> 00:18:23,679
of options are you considering are you

00:18:22,000 --> 00:18:25,470
and can you talk about vendors that

00:18:23,679 --> 00:18:28,929
you're considering what are your

00:18:25,470 --> 00:18:32,860
decision criteria for choosing an SD

00:18:28,929 --> 00:18:33,879
when approached Thank You Michael great

00:18:32,860 --> 00:18:37,659
to see you again

00:18:33,879 --> 00:18:40,269
thank you for the great question yes SD

00:18:37,659 --> 00:18:43,029
when really the use case remains the

00:18:40,269 --> 00:18:47,759
same how do you leverage software to

00:18:43,029 --> 00:18:50,740
manage remote sites in an automated way

00:18:47,759 --> 00:18:54,549
and how do you make sure that config

00:18:50,740 --> 00:18:57,610
changes or bringing up these devices can

00:18:54,549 --> 00:19:00,730
be managed through software so and in

00:18:57,610 --> 00:19:02,649
this case at uber we have some of our

00:19:00,730 --> 00:19:06,669
R&D sites that generate a lot of traffic

00:19:02,649 --> 00:19:09,820
and some of the SDRAM solutions that we

00:19:06,669 --> 00:19:13,690
have looked at cannot easily support

00:19:09,820 --> 00:19:17,019
hundred gig if at all and enable foreign

00:19:13,690 --> 00:19:19,029
crypto and the current pricing models

00:19:17,019 --> 00:19:21,909
and cost structure for some of the SDRAM

00:19:19,029 --> 00:19:24,070
solutions are not where we want them to

00:19:21,909 --> 00:19:25,659
be at this point so we are working with

00:19:24,070 --> 00:19:26,139
the community and vendors to make that

00:19:25,659 --> 00:19:28,750
happen

00:19:26,139 --> 00:19:32,559
and the use cases I mentioned remains

00:19:28,750 --> 00:19:36,190
the same at uber we have a number of

00:19:32,559 --> 00:19:39,100
remote sites and our teams are trying to

00:19:36,190 --> 00:19:42,659
find a way to be able to bring these new

00:19:39,100 --> 00:19:45,220
sites quickly and manage all the initial

00:19:42,659 --> 00:19:47,049
configurations through software and push

00:19:45,220 --> 00:19:48,990
the subsequent changes through software

00:19:47,049 --> 00:19:51,519
and manage the whole environment

00:19:48,990 --> 00:19:54,100
remotely in a centralized way through

00:19:51,519 --> 00:19:55,970
software thank you very much for your

00:19:54,100 --> 00:19:58,490
question

00:19:55,970 --> 00:20:00,020
you know one more question this is more

00:19:58,490 --> 00:20:02,090
along the lines of scalability of the

00:20:00,020 --> 00:20:03,230
applications what have you learned as

00:20:02,090 --> 00:20:05,750
you've ramped up quickly on

00:20:03,230 --> 00:20:08,600
microservices ability to scale on

00:20:05,750 --> 00:20:10,100
performance and and those kinds of

00:20:08,600 --> 00:20:11,960
things I'm sorry can you repeat the last

00:20:10,100 --> 00:20:14,180
sentence please yeah what have you

00:20:11,960 --> 00:20:16,520
learned on the ability on the app side

00:20:14,180 --> 00:20:18,770
for micro services to scale and both

00:20:16,520 --> 00:20:22,190
manageability and performance as you

00:20:18,770 --> 00:20:27,350
ramped up them that's that's a great

00:20:22,190 --> 00:20:29,300
question so at uber as I mentioned we

00:20:27,350 --> 00:20:33,080
have a highly distributed software

00:20:29,300 --> 00:20:36,880
architecture that actually is based on a

00:20:33,080 --> 00:20:39,830
very large number of micro services and

00:20:36,880 --> 00:20:43,220
what we have learned from the network

00:20:39,830 --> 00:20:46,090
and infrastructure side is that as I

00:20:43,220 --> 00:20:49,190
mentioned these micro services rely on a

00:20:46,090 --> 00:20:52,190
fault tolerant and highly available

00:20:49,190 --> 00:20:54,350
infrastructure and a lot of the traffic

00:20:52,190 --> 00:20:57,590
that is generated in the data center is

00:20:54,350 --> 00:20:59,980
because of a lot of the kind of traffic

00:20:57,590 --> 00:21:02,900
exchange between these micro services

00:20:59,980 --> 00:21:06,020
from our perspective from the network

00:21:02,900 --> 00:21:08,000
and software plasma perspective we need

00:21:06,020 --> 00:21:13,340
to ensure that those requirements are

00:21:08,000 --> 00:21:15,200
well understood and that and that the

00:21:13,340 --> 00:21:18,010
the infrastructure can actually support

00:21:15,200 --> 00:21:20,210
the growth of these micro services

00:21:18,010 --> 00:21:24,980
across different data centers but also

00:21:20,210 --> 00:21:26,810
on cloud so that's that's kind of my my

00:21:24,980 --> 00:21:32,090
quick answer to your question happy to

00:21:26,810 --> 00:21:34,610
discuss offline after my talk please hi

00:21:32,090 --> 00:21:35,630
cliff gross nigh HS market good to meet

00:21:34,610 --> 00:21:38,750
you

00:21:35,630 --> 00:21:41,630
we just finished a study for the Open

00:21:38,750 --> 00:21:43,280
Compute foundation and I was wondering

00:21:41,630 --> 00:21:46,190
if you could give a little bit more

00:21:43,280 --> 00:21:47,870
color on some of the parameters and some

00:21:46,190 --> 00:21:50,360
of the considerations around the ODMs

00:21:47,870 --> 00:21:53,480
you're looking at for servers some of

00:21:50,360 --> 00:21:55,970
the decision-making criteria and also

00:21:53,480 --> 00:21:58,850
for white box for example are you

00:21:55,970 --> 00:22:00,680
looking at an open compute design or

00:21:58,850 --> 00:22:03,980
certification certified design that you

00:22:00,680 --> 00:22:07,010
might modify for yourself that's a great

00:22:03,980 --> 00:22:08,930
question and the white box I can tell

00:22:07,010 --> 00:22:09,980
you that right now we are looking at

00:22:08,930 --> 00:22:15,080
ways to

00:22:09,980 --> 00:22:18,730
first enable in this aggregated model so

00:22:15,080 --> 00:22:21,380
the the roadmap would be from OM to a

00:22:18,730 --> 00:22:24,049
network white box solution based on

00:22:21,380 --> 00:22:29,900
third-party nas and commodity hardware

00:22:24,049 --> 00:22:32,059
and then considering building a an uber

00:22:29,900 --> 00:22:39,110
nas possibly depending on the use case

00:22:32,059 --> 00:22:40,880
and and and other factors and then you

00:22:39,110 --> 00:22:44,540
can also imagine that the next and

00:22:40,880 --> 00:22:47,090
ultimate stage would be to to duo DM on

00:22:44,540 --> 00:22:50,200
the network device similarly to the work

00:22:47,090 --> 00:22:54,429
that is happening on the server side I

00:22:50,200 --> 00:22:58,940
hope I answered your question thank you

00:22:54,429 --> 00:23:03,970
great but thank you very much again and

00:22:58,940 --> 00:23:03,970

YouTube URL: https://www.youtube.com/watch?v=BREeCR8dgxk


