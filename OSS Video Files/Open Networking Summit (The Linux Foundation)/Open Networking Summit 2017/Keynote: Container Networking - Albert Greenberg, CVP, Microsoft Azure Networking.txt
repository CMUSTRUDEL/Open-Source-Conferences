Title: Keynote: Container Networking - Albert Greenberg, CVP, Microsoft Azure Networking
Publication date: 2017-04-09
Playlist: Open Networking Summit 2017
Description: 
	Keynote: Container Networking - Albert Greenberg, CVP, Microsoft Azure Networking

About Albert Greenberg
CVP for Microsoft Azure Networking, leading software and hardware development and engineering for all Microsoft Azure, including all Microsoft first and third parties, and encompassing physical data center, regional and wide area networking, host networking datapath, virtual networking, virtual appliances, hybrid networking, network security, network services, network distributed systems, optical networking, network reconfigurable hardware and device firmware, network analytics, edge/CDN networks and services. Azure is built on SDN principles, which the team pioneered as the inevitable and right way to scale the cloud.  Major offices for Azure networking are in Redmond, Beijing, Dublin and Hyderabad, all working to transform all elements of networking for the cloud: controlled by software, low cost, high performance, super reliable, secure and automated. Within Azure, founded and led the network virtualization, datapath and physical data center network teams in Azure, as well as other teams in networking and monitoring. Worked in Microsoft Research to invent and prototype the data center networking technologies now widely deployed in Microsoft services and products, such as Virtual Layer-2 (VL2), Virtual Networks (VNets), Load Balancing (Ananta), Data Center TCP (DCTCP). Joined Microsoft from Bell Labs and AT&T Labs Research, where he was an AT&T Fellow and Executive Director, and where he helped build the systems and tools for engineering and managing AT&Tâ€™s networks. IEEE Kobayashi Award winner, ACM Fellow, ACM Sigcomm Award winner, ACM Test of Time Paper Award winner, National Academy of Engineering member.
Captions: 
	00:00:00,050 --> 00:00:08,189
let me start so it's great to be back at

00:00:04,380 --> 00:00:12,599
ons and things are bit for the

00:00:08,189 --> 00:00:15,839
introduction I am going to be talking

00:00:12,599 --> 00:00:19,130
about container networking and really

00:00:15,839 --> 00:00:23,910
representing the amazing imagination and

00:00:19,130 --> 00:00:26,189
work of hundreds of amazing engineers in

00:00:23,910 --> 00:00:28,980
the Azure networking team it's their

00:00:26,189 --> 00:00:32,520
imagination their work that created

00:00:28,980 --> 00:00:35,360
these services there are two things that

00:00:32,520 --> 00:00:39,030
the first segment of my talk will

00:00:35,360 --> 00:00:43,890
emphasize number one is the title

00:00:39,030 --> 00:00:45,210
essentially that we have a container

00:00:43,890 --> 00:00:47,550
networking service that I'm going to

00:00:45,210 --> 00:00:52,260
announce here and the thing to remember

00:00:47,550 --> 00:00:55,770
about it is it's very flexible

00:00:52,260 --> 00:00:59,010
very simple you can essentially

00:00:55,770 --> 00:01:04,379
provision see of compute see of storage

00:00:59,010 --> 00:01:06,600
a see of networking in a click and it'll

00:01:04,379 --> 00:01:09,630
leverage the Sdn stack that we have in

00:01:06,600 --> 00:01:13,320
Azure or you can use a couple of Python

00:01:09,630 --> 00:01:16,500
commands whatever is your style the

00:01:13,320 --> 00:01:20,070
other is it's open it's Linux

00:01:16,500 --> 00:01:22,710
first-class and it's open source and

00:01:20,070 --> 00:01:28,950
I'll provide the pointers to the open

00:01:22,710 --> 00:01:32,549
source in the talk so first about azure

00:01:28,950 --> 00:01:34,409
the most of the folks on our team are

00:01:32,549 --> 00:01:37,140
actually building this constantly we're

00:01:34,409 --> 00:01:40,530
building data centers and fiber as far

00:01:37,140 --> 00:01:45,320
as the eye can see the little mentum is

00:01:40,530 --> 00:01:49,399
amazing we get about 120,000 new

00:01:45,320 --> 00:01:52,140
subscriptions every month and we just

00:01:49,399 --> 00:01:55,229
keep scaling and keep packing in more

00:01:52,140 --> 00:01:57,689
and more work as a result and here's a

00:01:55,229 --> 00:02:00,810
and I would kind of a NASCAR view of the

00:01:57,689 --> 00:02:05,880
different fortune 500 companies on the

00:02:00,810 --> 00:02:08,539
Microsoft cloud one thing that that

00:02:05,880 --> 00:02:17,030
you've probably seen about

00:02:08,539 --> 00:02:19,549
the new Microsoft is ok we join the

00:02:17,030 --> 00:02:22,400
Linux Foundation Here I am speaking in a

00:02:19,549 --> 00:02:25,790
Linux Foundation sponsored event and we

00:02:22,400 --> 00:02:27,200
build Linux first-class so it's it's

00:02:25,790 --> 00:02:30,650
something we consider from the very

00:02:27,200 --> 00:02:35,030
beginning and we're also very serious

00:02:30,650 --> 00:02:37,159
about the momentum around the the Linux

00:02:35,030 --> 00:02:40,040
community that we've developed so one

00:02:37,159 --> 00:02:44,120
out of three now of the the VMS for

00:02:40,040 --> 00:02:47,510
example that our provision on Azure our

00:02:44,120 --> 00:02:53,859
Linux VMs so you see more and more of

00:02:47,510 --> 00:02:56,780
this from us and what about containers

00:02:53,859 --> 00:03:01,519
so I mean containers really are a great

00:02:56,780 --> 00:03:02,989
technology I mean why and so it's just a

00:03:01,519 --> 00:03:05,239
very thing that came out of the Linux

00:03:02,989 --> 00:03:08,480
world it's a very very convenient way to

00:03:05,239 --> 00:03:11,900
package and ship and update your

00:03:08,480 --> 00:03:13,910
services or your micro services and I

00:03:11,900 --> 00:03:15,470
mean you you really in a networking

00:03:13,910 --> 00:03:18,919
world you want to be able to ship

00:03:15,470 --> 00:03:20,720
services without any downtime you want

00:03:18,919 --> 00:03:22,459
to be able to make changes to little

00:03:20,720 --> 00:03:24,470
micro services instead of two large

00:03:22,459 --> 00:03:26,780
monoliths and it's a nice technology for

00:03:24,470 --> 00:03:31,849
that and we use it internally so for

00:03:26,780 --> 00:03:34,519
example at ons 2016 I first started

00:03:31,849 --> 00:03:37,280
talking about our open-source switch

00:03:34,519 --> 00:03:39,139
stacks so this is firmware built on

00:03:37,280 --> 00:03:40,400
containers it's really quite magical you

00:03:39,139 --> 00:03:42,349
can update the BGP

00:03:40,400 --> 00:03:47,900
you can do this and that without any

00:03:42,349 --> 00:03:52,760
downtime and it's open source building

00:03:47,900 --> 00:03:55,730
on containers Linux containers we have

00:03:52,760 --> 00:03:58,220
embraced the container movement big time

00:03:55,730 --> 00:04:02,180
so for example we announced kubernetes

00:03:58,220 --> 00:04:04,340
as a GA service on Azure in the form of

00:04:02,180 --> 00:04:11,239
azure container services just a month or

00:04:04,340 --> 00:04:14,239
so ago and here I saw it last week over

00:04:11,239 --> 00:04:17,599
an OCP nearby maybe it was literally

00:04:14,239 --> 00:04:20,400
here we we talked about the

00:04:17,599 --> 00:04:23,910
containerization

00:04:20,400 --> 00:04:25,290
work them you've done for for Sonic I'll

00:04:23,910 --> 00:04:27,390
talk a little bit more about Sonic at

00:04:25,290 --> 00:04:30,780
the end but think of it as not only we

00:04:27,390 --> 00:04:32,400
producing containers for people that are

00:04:30,780 --> 00:04:34,470
building services on the cloud to

00:04:32,400 --> 00:04:39,540
consume we also are using them to build

00:04:34,470 --> 00:04:40,650
their own software the the other thing I

00:04:39,540 --> 00:04:43,980
want to talk about in terms of momentum

00:04:40,650 --> 00:04:47,400
is just the virtualization momentum in

00:04:43,980 --> 00:04:51,390
Azure so this is our Sdn momentum and

00:04:47,400 --> 00:04:54,090
you can see that in 2013 we started with

00:04:51,390 --> 00:04:56,040
GA of virtual networks and then we just

00:04:54,090 --> 00:05:00,180
keep adding more and more features to

00:04:56,040 --> 00:05:02,130
that as we go so and and at an

00:05:00,180 --> 00:05:06,680
accelerated pace every month or two

00:05:02,130 --> 00:05:06,680
we'll announce another another feature

00:05:08,150 --> 00:05:14,820
now the the question is well if I'm

00:05:11,970 --> 00:05:17,820
doing all this Sdn work and I've done it

00:05:14,820 --> 00:05:23,700
four VMs will it pertain to containers

00:05:17,820 --> 00:05:27,120
or not and that's the answer is yes and

00:05:23,700 --> 00:05:28,620
the that's our announcement here but

00:05:27,120 --> 00:05:30,990
we're announcing as your v-net for

00:05:28,620 --> 00:05:35,360
containers it's a one Sdn solution

00:05:30,990 --> 00:05:38,880
everything everything that works for VMs

00:05:35,360 --> 00:05:42,780
same code will work for containers and

00:05:38,880 --> 00:05:45,000
not only that it's comprehensive so you

00:05:42,780 --> 00:05:47,460
can pick your Orchestrator you can pick

00:05:45,000 --> 00:05:51,150
the kubernetes family the DCOs the

00:05:47,460 --> 00:05:56,220
docker and and it hook it up in the in

00:05:51,150 --> 00:05:58,200
Azure with one virtual network it's in

00:05:56,220 --> 00:06:02,190
public preview now there'll be a blog

00:05:58,200 --> 00:06:04,440
out I think may already be out and so

00:06:02,190 --> 00:06:08,550
you can you can search for it on the on

00:06:04,440 --> 00:06:10,169
Azure it allows you to connect your to

00:06:08,550 --> 00:06:12,270
deploy and connect your containers to

00:06:10,169 --> 00:06:15,780
the Azure virtual network there's a

00:06:12,270 --> 00:06:21,870
symbol of the cubes and the containers

00:06:15,780 --> 00:06:23,910
and you can program with with the same

00:06:21,870 --> 00:06:26,790
you know connectivity rules routing

00:06:23,910 --> 00:06:29,250
security and so forth that you get for

00:06:26,790 --> 00:06:32,150
VMs and it's available in the azure

00:06:29,250 --> 00:06:32,150
container service

00:06:33,479 --> 00:06:37,720
what's it look like

00:06:35,169 --> 00:06:39,460
so at the bottom is as your container

00:06:37,720 --> 00:06:43,810
service that allows you to deploy the

00:06:39,460 --> 00:06:47,860
infrastructure to manage large container

00:06:43,810 --> 00:06:49,479
clusters then comes the orchestrators

00:06:47,860 --> 00:06:52,000
and we like I said before we offer

00:06:49,479 --> 00:06:56,470
several orchestrators several popular

00:06:52,000 --> 00:06:57,820
orchestrators and then we after you've

00:06:56,470 --> 00:06:59,229
deployed that you can deploy your

00:06:57,820 --> 00:07:01,479
containers into that now it seems like

00:06:59,229 --> 00:07:03,340
there's something missing here in the

00:07:01,479 --> 00:07:05,229
middle and in some of the sessions this

00:07:03,340 --> 00:07:08,770
morning I heard talk about it it's kind

00:07:05,229 --> 00:07:10,030
of a little a bit of toil now to hook up

00:07:08,770 --> 00:07:13,539
the networking because you have

00:07:10,030 --> 00:07:15,039
networking for your VMs which is in the

00:07:13,539 --> 00:07:18,760
infrastructure and working for the

00:07:15,039 --> 00:07:20,800
containers an extra step so can you make

00:07:18,760 --> 00:07:22,870
it seamless can you make it you know one

00:07:20,800 --> 00:07:26,550
step same virtual network and that's

00:07:22,870 --> 00:07:31,000
what we what we've done so through the

00:07:26,550 --> 00:07:33,729
azure compute service engine also open

00:07:31,000 --> 00:07:37,590
source you can deploy and we'll show you

00:07:33,729 --> 00:07:42,370
how the an azure v-net that then

00:07:37,590 --> 00:07:47,380
networks your your your containers with

00:07:42,370 --> 00:07:51,010
a single click so how does this differ

00:07:47,380 --> 00:07:53,320
from what's commonly out there well

00:07:51,010 --> 00:07:54,909
there there you can already and we do

00:07:53,320 --> 00:07:57,430
support this and and you're welcome to

00:07:54,909 --> 00:08:00,699
use it and we will continue to support

00:07:57,430 --> 00:08:03,370
it right now if you you know if you look

00:08:00,699 --> 00:08:06,099
at the the symbol symbols here there's a

00:08:03,370 --> 00:08:08,710
node or VM and then there's two

00:08:06,099 --> 00:08:10,870
containers in it on the left and two

00:08:08,710 --> 00:08:12,909
containers and the note on the right and

00:08:10,870 --> 00:08:16,930
you can network network them together

00:08:12,909 --> 00:08:20,080
through bridging so you can see that if

00:08:16,930 --> 00:08:21,940
you look closely as an IP address on the

00:08:20,080 --> 00:08:24,400
source on the left hand side if it wants

00:08:21,940 --> 00:08:27,490
to talk over to the right hand side it

00:08:24,400 --> 00:08:29,949
will add well it'll remap the IP address

00:08:27,490 --> 00:08:31,990
so if you can't go hypee to IP you can't

00:08:29,949 --> 00:08:34,810
sort of do direct connectivity but you

00:08:31,990 --> 00:08:42,490
can't get it done through NAT so the the

00:08:34,810 --> 00:08:44,410
10.0.0.0 dot to about 34 and there

00:08:42,490 --> 00:08:47,529
they're always complications with that

00:08:44,410 --> 00:08:50,560
it can be made to work or you can do a

00:08:47,529 --> 00:08:52,269
double overlay so the the virtual

00:08:50,560 --> 00:08:56,050
network itself has an overlay and you

00:08:52,269 --> 00:08:58,029
can overlay within that and and and get

00:08:56,050 --> 00:09:01,029
this done without having to lose IP to

00:08:58,029 --> 00:09:02,769
IP connectivity but what but what

00:09:01,029 --> 00:09:04,990
happens you know if any of you were

00:09:02,769 --> 00:09:07,810
around you know when we were talking

00:09:04,990 --> 00:09:09,310
about different in cap formats you tend

00:09:07,810 --> 00:09:12,279
to lose the offloads when you do this

00:09:09,310 --> 00:09:14,379
and you do so you'll lose the TCP

00:09:12,279 --> 00:09:17,009
offloads which which means you'll lose a

00:09:14,379 --> 00:09:21,550
lot of perf when you do double in count

00:09:17,009 --> 00:09:24,879
and that that long rectangle at the

00:09:21,550 --> 00:09:26,860
bottom shows that the layering of end

00:09:24,879 --> 00:09:34,389
caps and sort of the torture you put the

00:09:26,860 --> 00:09:37,660
header of the packet through so what we

00:09:34,389 --> 00:09:39,850
do is very simple and very flexible and

00:09:37,660 --> 00:09:43,600
just leverages natively what we already

00:09:39,850 --> 00:09:45,459
have so you can and what do you get from

00:09:43,600 --> 00:09:48,160
that with Azure V net for containers

00:09:45,459 --> 00:09:51,100
what you get today you can connect your

00:09:48,160 --> 00:09:53,019
entire network get container the

00:09:51,100 --> 00:09:54,959
container container in a VM container to

00:09:53,019 --> 00:09:58,480
on-prem any combination of those three

00:09:54,959 --> 00:10:02,019
with one Sdn stack you get native

00:09:58,480 --> 00:10:04,509
support meaning that all the offloads

00:10:02,019 --> 00:10:06,399
large send offload everything else that

00:10:04,509 --> 00:10:09,339
makes things go fast and tcp will

00:10:06,399 --> 00:10:11,860
continue to work and you get one unified

00:10:09,339 --> 00:10:17,170
network policy same policy for

00:10:11,860 --> 00:10:22,209
containers same policy for VMs you get

00:10:17,170 --> 00:10:25,779
more as well it works with the the

00:10:22,209 --> 00:10:28,449
ecosystem so of course we have both

00:10:25,779 --> 00:10:34,209
asher and azure stack so you can run in

00:10:28,449 --> 00:10:37,630
the cloud or on prim it works with Linux

00:10:34,209 --> 00:10:40,779
containers and windows containers and it

00:10:37,630 --> 00:10:43,420
works with the kubernetes and DCOs file

00:10:40,779 --> 00:10:44,860
containers as well as docker so it

00:10:43,420 --> 00:10:46,029
either uses the container network

00:10:44,860 --> 00:10:48,399
interface or the container network

00:10:46,029 --> 00:10:50,970
manager depending on which of the the

00:10:48,399 --> 00:10:50,970
two you pick

00:10:52,779 --> 00:10:59,120
that's just yeah we we take care of the

00:10:56,180 --> 00:11:02,209
plug in between the orchestrator and the

00:10:59,120 --> 00:11:04,160
cloud network and in essence we have the

00:11:02,209 --> 00:11:09,259
cloud network interface plug-in that

00:11:04,160 --> 00:11:10,040
makes it all happen seamlessly so one

00:11:09,259 --> 00:11:12,139
thing that what we're talking about

00:11:10,040 --> 00:11:15,920
later in the week that that I encourage

00:11:12,139 --> 00:11:17,180
you to go to is accelerated networking

00:11:15,920 --> 00:11:19,939
for Linux will be talked about later

00:11:17,180 --> 00:11:21,829
this week and it just it's an example

00:11:19,939 --> 00:11:24,439
there's so many examples but this is one

00:11:21,829 --> 00:11:27,259
example of the benefit you get when you

00:11:24,439 --> 00:11:30,170
go with one Sdn stack so this we made

00:11:27,259 --> 00:11:34,370
available we built it for VMs it just

00:11:30,170 --> 00:11:37,550
works for containers so we get great

00:11:34,370 --> 00:11:39,699
speed 25 gigabits per second and 10x

00:11:37,550 --> 00:11:43,009
lower latency for Linux VMs and

00:11:39,699 --> 00:11:46,879
containers and network appliances as a

00:11:43,009 --> 00:11:50,629
result and we've also released up the

00:11:46,879 --> 00:11:52,879
code upstream into the Linux kernel so

00:11:50,629 --> 00:11:58,029
just a shout out for the session

00:11:52,879 --> 00:12:02,209
tomorrow takeaways from the talk so far

00:11:58,029 --> 00:12:04,569
one Sdn stack containers and VMs

00:12:02,209 --> 00:12:06,980
on-premise and cloud Linux and Windows

00:12:04,569 --> 00:12:10,009
uses code that we've developed since

00:12:06,980 --> 00:12:13,160
whatever 2011 or so started on this

00:12:10,009 --> 00:12:17,329
journey battle-tested designed to scale

00:12:13,160 --> 00:12:20,360
same code high performance like I just

00:12:17,329 --> 00:12:22,430
showed you and integrated that's really

00:12:20,360 --> 00:12:25,189
the the beauty of the container story is

00:12:22,430 --> 00:12:29,000
it's simple to deploy your apps with a

00:12:25,189 --> 00:12:31,040
click and with the other thing that that

00:12:29,000 --> 00:12:34,759
that again I want to come back to is

00:12:31,040 --> 00:12:36,889
it's open its Linux first-class so you

00:12:34,759 --> 00:12:39,589
can go to github and pull it down you

00:12:36,889 --> 00:12:41,870
can add value we have for example IP

00:12:39,589 --> 00:12:44,870
address management a driver for that you

00:12:41,870 --> 00:12:46,850
can change that you can look at how we

00:12:44,870 --> 00:12:50,740
plug in 2 different orchestrators you

00:12:46,850 --> 00:12:50,740
can add add to all these things

00:12:52,179 --> 00:12:57,490
so with this I'll bring up my colleague

00:12:55,040 --> 00:12:57,490
Deepak

00:12:58,380 --> 00:13:03,580
seems good afternoon I'm going to show

00:13:01,450 --> 00:13:06,730
you today how easy it is to create a

00:13:03,580 --> 00:13:09,430
kubernetes cluster in Azure and deployed

00:13:06,730 --> 00:13:11,710
in an azure virtual network with as few

00:13:09,430 --> 00:13:13,810
as two commands and one simple

00:13:11,710 --> 00:13:16,090
configuration file you can get your

00:13:13,810 --> 00:13:19,090
kubernetes cluster up and running in a

00:13:16,090 --> 00:13:21,790
national network in kubernetes the

00:13:19,090 --> 00:13:23,290
containers are called parts as albert

00:13:21,790 --> 00:13:25,570
mentioned parts will be first-class

00:13:23,290 --> 00:13:27,520
citizens in the azure virtual network

00:13:25,570 --> 00:13:29,500
they will get an IP address from the

00:13:27,520 --> 00:13:32,200
azure virtual network you can specify

00:13:29,500 --> 00:13:35,650
all your policies load-balancing

00:13:32,200 --> 00:13:37,630
on-premise connectivity ackles you name

00:13:35,650 --> 00:13:40,210
it everything is available for

00:13:37,630 --> 00:13:43,660
containers that I'm going to show today

00:13:40,210 --> 00:13:46,000
so with that the demo setup that I'm

00:13:43,660 --> 00:13:49,240
going to use actually can we go back to

00:13:46,000 --> 00:13:51,520
the previous slide yeah so the demo

00:13:49,240 --> 00:13:53,800
setup that I'm going to use consists of

00:13:51,520 --> 00:13:55,960
a kubernetes cluster that is I am going

00:13:53,800 --> 00:13:58,900
to deploy it consists of one master node

00:13:55,960 --> 00:14:01,840
and two agent nodes the two agent nodes

00:13:58,900 --> 00:14:04,150
will be running three parts and each of

00:14:01,840 --> 00:14:06,610
those parts will be running nginx which

00:14:04,150 --> 00:14:08,980
is a popular open source software in

00:14:06,610 --> 00:14:11,650
addition I'll have two VMs also running

00:14:08,980 --> 00:14:13,330
in this virtual network and I will have

00:14:11,650 --> 00:14:16,030
an AK I'll define which blocks

00:14:13,330 --> 00:14:18,250
connectivity from the parts to one of

00:14:16,030 --> 00:14:20,590
the VMS various connectivity works to

00:14:18,250 --> 00:14:23,530
the other VM so as you can see the whole

00:14:20,590 --> 00:14:27,550
power of azure v-net is available to VMs

00:14:23,530 --> 00:14:32,380
and two parts alike can we switch to the

00:14:27,550 --> 00:14:34,390
other PC please switch back yeah so

00:14:32,380 --> 00:14:36,430
here's the simple JSON file that you

00:14:34,390 --> 00:14:38,830
need to define to create this governess

00:14:36,430 --> 00:14:40,720
cluster in there there is the profile

00:14:38,830 --> 00:14:43,420
that you specify for the kubernetes

00:14:40,720 --> 00:14:45,790
cluster and you also define your network

00:14:43,420 --> 00:14:47,800
policy as a sure which basically means

00:14:45,790 --> 00:14:50,140
that you want to use the azure virtual

00:14:47,800 --> 00:14:52,650
network so now let's get the deployment

00:14:50,140 --> 00:14:52,650
started

00:15:04,000 --> 00:15:08,889
so you pass this JSON file to the azure

00:15:07,000 --> 00:15:11,620
container service engine which will

00:15:08,889 --> 00:15:13,990
generate a bunch of templates and what

00:15:11,620 --> 00:15:15,879
these templates are are basically the

00:15:13,990 --> 00:15:17,920
templates for deploying your resources

00:15:15,879 --> 00:15:20,339
in Azure so here we have generated the

00:15:17,920 --> 00:15:20,339
templates

00:15:31,950 --> 00:15:37,440
now you pass these templates to the

00:15:34,620 --> 00:15:39,060
command to generate the azure deployment

00:15:37,440 --> 00:15:41,010
and here we have launched the azure

00:15:39,060 --> 00:15:43,079
deployment now let's go to the azure

00:15:41,010 --> 00:15:45,600
portal and see the resources getting

00:15:43,079 --> 00:15:48,630
created so here is the azure portal it

00:15:45,600 --> 00:15:57,000
shows all the resources that exists in

00:15:48,630 --> 00:15:59,100
my subscription and you see all these

00:15:57,000 --> 00:16:00,959
new resources that are getting created

00:15:59,100 --> 00:16:02,970
are because of the deployment I just

00:16:00,959 --> 00:16:04,949
launched so if I click on this resource

00:16:02,970 --> 00:16:06,630
group you will see various kinds of

00:16:04,949 --> 00:16:09,149
resources getting created underneath it

00:16:06,630 --> 00:16:10,949
this includes a virtual network that is

00:16:09,149 --> 00:16:12,720
getting created there is the network

00:16:10,949 --> 00:16:14,970
security group which refers to the Akal

00:16:12,720 --> 00:16:17,220
that is getting created there are these

00:16:14,970 --> 00:16:18,389
IP addresses load balancers that are all

00:16:17,220 --> 00:16:21,000
getting created because of the

00:16:18,389 --> 00:16:26,360
deployment I just launched now let's go

00:16:21,000 --> 00:16:26,360
to to one of the kubernetes nodes

00:16:33,820 --> 00:16:38,650
so here I am on the masternode and as

00:16:36,100 --> 00:16:46,360
you can see there are three nodes

00:16:38,650 --> 00:16:48,430
deployed under this master right now

00:16:46,360 --> 00:16:56,200
there are no parts underneath it now I'm

00:16:48,430 --> 00:16:58,240
going to create three parts running

00:16:56,200 --> 00:17:04,480
nginx so now I've created three parts

00:16:58,240 --> 00:17:06,460
let's see these three parts so here are

00:17:04,480 --> 00:17:08,970
the three parts now let's go inside one

00:17:06,460 --> 00:17:08,970
of the parts

00:17:41,420 --> 00:17:46,330
so now we are inside the pot let's look

00:17:43,850 --> 00:17:49,010
at the IP address inside this part and

00:17:46,330 --> 00:17:50,480
as you'll be able to see that this part

00:17:49,010 --> 00:17:53,840
got an IP address from the virtual

00:17:50,480 --> 00:17:56,270
network from the 10.2 240 subnet from

00:17:53,840 --> 00:18:00,040
this part I can paint the master node as

00:17:56,270 --> 00:18:00,040
well as ping the other VMs

00:18:09,760 --> 00:18:14,290
so here is the VM the sequel VM that I

00:18:12,580 --> 00:18:20,470
showed earlier in the setup that I'm

00:18:14,290 --> 00:18:24,310
able to ping from this part now let's

00:18:20,470 --> 00:18:27,250
try to ping the the HR VM that I also

00:18:24,310 --> 00:18:28,960
have deployed in the same V net and you

00:18:27,250 --> 00:18:30,760
can see I cannot bring the other VM

00:18:28,960 --> 00:18:33,190
because I have a network alkyl defined

00:18:30,760 --> 00:18:35,950
blocking access to that other VM so

00:18:33,190 --> 00:18:38,290
using one Sdn and tight integration with

00:18:35,950 --> 00:18:40,870
various container orchestrators like

00:18:38,290 --> 00:18:43,630
kubernetes and swamp we are able to give

00:18:40,870 --> 00:18:46,000
rich Sdn and bring all the capabilities

00:18:43,630 --> 00:18:48,190
of Sdn to the container world we are

00:18:46,000 --> 00:18:51,100
able to offer one Sdn that spans across

00:18:48,190 --> 00:18:53,530
VMs and containers so you don't have to

00:18:51,100 --> 00:18:55,720
manage and specify your policies in two

00:18:53,530 --> 00:18:57,280
different ways one for VMs and one for

00:18:55,720 --> 00:19:10,180
containers your workload can seamlessly

00:18:57,280 --> 00:19:12,940
span containers and VMs thank you okay I

00:19:10,180 --> 00:19:18,100
want to switch gears and then wrap up so

00:19:12,940 --> 00:19:21,490
you know another completely beautiful

00:19:18,100 --> 00:19:23,680
and surprising part of the Sdn move and

00:19:21,490 --> 00:19:25,780
it's the incredible a6 that are now

00:19:23,680 --> 00:19:30,160
coming available and the way that we

00:19:25,780 --> 00:19:32,620
have a choice there and in a vibrant

00:19:30,160 --> 00:19:35,020
industry fantastic optics fantastic

00:19:32,620 --> 00:19:38,620
Asics and how do we take and take

00:19:35,020 --> 00:19:42,520
advantage of them and in a so that we

00:19:38,620 --> 00:19:46,360
can introduce innovation quickly so we

00:19:42,520 --> 00:19:48,640
we've been working on two two efforts so

00:19:46,360 --> 00:19:53,170
one is the switch abstraction interface

00:19:48,640 --> 00:19:57,640
so I can accommodate a wide variety of

00:19:53,170 --> 00:20:00,100
a6 with the same interface it's an

00:19:57,640 --> 00:20:03,100
abstraction interface so I my software

00:20:00,100 --> 00:20:04,930
investment is protected as I change the

00:20:03,100 --> 00:20:07,420
ASIC and take advantage of the latest

00:20:04,930 --> 00:20:11,890
from the industry so that's that's one

00:20:07,420 --> 00:20:13,300
key part the the other is almost the

00:20:11,890 --> 00:20:16,360
same as the container story its

00:20:13,300 --> 00:20:19,270
serviceability how do I have in them you

00:20:16,360 --> 00:20:22,360
know carrier-grade amazingly reliable

00:20:19,270 --> 00:20:23,350
stack it's the biggest deal running it

00:20:22,360 --> 00:20:26,260
on the switch and

00:20:23,350 --> 00:20:28,840
how do I update that functionality and

00:20:26,260 --> 00:20:32,950
that's what we have for the sonic

00:20:28,840 --> 00:20:37,210
project and with that I want to announce

00:20:32,950 --> 00:20:39,730
that we have a new partner in the in the

00:20:37,210 --> 00:20:42,160
sonic community

00:20:39,730 --> 00:20:59,200
Alibaba so I'm gonna bring up a you chin

00:20:42,160 --> 00:21:02,559
kind okay Thank You Albert

00:20:59,200 --> 00:21:05,679
yeah thank you everybody it is with

00:21:02,559 --> 00:21:08,890
great pleasure to be here to be able to

00:21:05,679 --> 00:21:12,309
share the podium with our Bert whom I

00:21:08,890 --> 00:21:15,820
regard not only as a former boss but

00:21:12,309 --> 00:21:19,150
also as a mentor and a wonderful teacher

00:21:15,820 --> 00:21:22,270
and thank you all very much for giving

00:21:19,150 --> 00:21:24,490
me the opportunity to be here to share

00:21:22,270 --> 00:21:27,669
with you to brief briefly about the

00:21:24,490 --> 00:21:30,789
journey that we take in Alibaba to skill

00:21:27,669 --> 00:21:34,750
our network to support the growth of our

00:21:30,789 --> 00:21:38,110
company so for all of you who know about

00:21:34,750 --> 00:21:42,429
Alibaba most probably only know Alibaba

00:21:38,110 --> 00:21:45,039
as a successful e-commerce company yes

00:21:42,429 --> 00:21:48,039
we did make a lot of strides in that

00:21:45,039 --> 00:21:50,590
area so last year I'm sure everybody

00:21:48,039 --> 00:21:54,190
heard of on the singles day shopping

00:21:50,590 --> 00:21:58,179
event so last year within the 24 hours

00:21:54,190 --> 00:22:00,610
alone on November 11th the shopping

00:21:58,179 --> 00:22:03,010
valuing that carried on our platform

00:22:00,610 --> 00:22:06,130
totaled at seventeen point eight billion

00:22:03,010 --> 00:22:08,830
u.s. dollars was the first two billion

00:22:06,130 --> 00:22:11,770
US dollars worth of order placed within

00:22:08,830 --> 00:22:15,820
the first five minutes what that

00:22:11,770 --> 00:22:19,030
translated into is a platform that are

00:22:15,820 --> 00:22:21,520
capable of supporting over a hundred

00:22:19,030 --> 00:22:24,520
thousand per second transactions for

00:22:21,520 --> 00:22:28,000
both ecommerce and payment and the

00:22:24,520 --> 00:22:32,080
delivery for goods and services over 650

00:22:28,000 --> 00:22:35,500
million within the first 24 hours this

00:22:32,080 --> 00:22:37,179
scale requires two things it requires a

00:22:35,500 --> 00:22:40,210
massive investment

00:22:37,179 --> 00:22:42,639
on a hardware infrastructure as well as

00:22:40,210 --> 00:22:46,200
innovations on technologies from

00:22:42,639 --> 00:22:49,089
hardware software and many other areas

00:22:46,200 --> 00:22:52,269
so alibaba's network infrastructure

00:22:49,089 --> 00:22:54,460
today supports from data center

00:22:52,269 --> 00:22:56,619
networking to regional network to our

00:22:54,460 --> 00:23:00,369
fiber networks and we have a global

00:22:56,619 --> 00:23:03,969
reach so we provide a scale the

00:23:00,369 --> 00:23:06,509
flexibility and availability needed to

00:23:03,969 --> 00:23:09,460
support the growth of our company and

00:23:06,509 --> 00:23:11,549
the variety of technologies that we have

00:23:09,460 --> 00:23:14,440
and that the need to integrate them

00:23:11,549 --> 00:23:17,379
poses one of the greatest technology

00:23:14,440 --> 00:23:20,739
challenges that we face so let me give

00:23:17,379 --> 00:23:23,320
you an example on in China a great

00:23:20,739 --> 00:23:25,809
percentage of the populations live

00:23:23,320 --> 00:23:28,989
within a few hundred miles from the

00:23:25,809 --> 00:23:31,929
south and east coastlines and that's how

00:23:28,989 --> 00:23:34,419
our data centres are mapped out so this

00:23:31,929 --> 00:23:37,539
gives an advantage of being very very

00:23:34,419 --> 00:23:40,269
close to our customers but in the mean

00:23:37,539 --> 00:23:42,700
time it also poses a great challenge

00:23:40,269 --> 00:23:45,789
because our fibers are frequently get

00:23:42,700 --> 00:23:49,059
cut due to all the construction events

00:23:45,789 --> 00:23:50,679
that's happening in the areas so what

00:23:49,059 --> 00:23:53,320
our networking engineers and our

00:23:50,679 --> 00:23:55,659
software engineers do they're both

00:23:53,320 --> 00:23:58,289
working hard and diligent is to make

00:23:55,659 --> 00:24:01,029
sure that whenever there is a fiber cut

00:23:58,289 --> 00:24:02,919
whether this is happening in our network

00:24:01,029 --> 00:24:05,679
or whether this happening in the

00:24:02,919 --> 00:24:09,339
providers network we want to make sure I

00:24:05,679 --> 00:24:12,249
cut a potential incident will be turned

00:24:09,339 --> 00:24:14,529
into only a small glitch that only our

00:24:12,249 --> 00:24:17,679
network engineers will notice but not

00:24:14,529 --> 00:24:21,369
our end customers and this is a very

00:24:17,679 --> 00:24:24,129
lofty goal so to achieve that goal what

00:24:21,369 --> 00:24:27,609
we need is technologies that are not

00:24:24,129 --> 00:24:30,399
only advanced but also allows us to be

00:24:27,609 --> 00:24:35,080
agile and that means we want to be able

00:24:30,399 --> 00:24:38,889
to learn to experiment to develop deploy

00:24:35,080 --> 00:24:40,919
manage and as it often happens we want

00:24:38,889 --> 00:24:43,389
to be able to change directions quickly

00:24:40,919 --> 00:24:46,289
we call it that the new Tripoli

00:24:43,389 --> 00:24:50,770
principles be able to quickly adopt

00:24:46,289 --> 00:24:54,310
absorb in advance and this is not

00:24:50,770 --> 00:24:56,200
demanded by our desire as engineers but

00:24:54,310 --> 00:25:00,250
also demanded by the growth of the

00:24:56,200 --> 00:25:02,950
technology itself so today we are very

00:25:00,250 --> 00:25:06,840
very excited to join the sonic community

00:25:02,950 --> 00:25:09,970
to help drive the momentum of network OS

00:25:06,840 --> 00:25:12,850
it gives us a wonderful opportunity to

00:25:09,970 --> 00:25:15,160
partner with industry leaders and to be

00:25:12,850 --> 00:25:18,040
an active contributing members to the

00:25:15,160 --> 00:25:20,050
open source communities and we eagerly

00:25:18,040 --> 00:25:23,260
look forward to working with Microsoft

00:25:20,050 --> 00:25:25,960
and many others to advance the NASS

00:25:23,260 --> 00:25:29,650
technologies we believe this is a great

00:25:25,960 --> 00:25:32,170
endeavor that raise tremendous values to

00:25:29,650 --> 00:25:34,890
the network industry and everybody in

00:25:32,170 --> 00:25:37,690
the ecosystem including cloud operators

00:25:34,890 --> 00:25:40,090
including our chip vendors our system

00:25:37,690 --> 00:25:43,120
vendors and even software engineers and

00:25:40,090 --> 00:25:45,280
large so thank you very much for giving

00:25:43,120 --> 00:25:46,840
me this opportunity and let's work

00:25:45,280 --> 00:25:56,140
together to make great things happen

00:25:46,840 --> 00:25:57,510
thank you so I'm going to wrap up

00:25:56,140 --> 00:26:00,130
quickly

00:25:57,510 --> 00:26:02,500
let me see first could with the alley

00:26:00,130 --> 00:26:04,470
guys and the Microsoft guys that created

00:26:02,500 --> 00:26:10,450
this great tech please stand up

00:26:04,470 --> 00:26:13,090
so you know who to approach yeah there's

00:26:10,450 --> 00:26:17,920
some in that pocket there they are over

00:26:13,090 --> 00:26:19,990
there so the this our whole thing here

00:26:17,920 --> 00:26:22,450
what we trying to accomplish is really

00:26:19,990 --> 00:26:25,060
to invite the community to work with us

00:26:22,450 --> 00:26:30,760
and contribute to these efforts it's

00:26:25,060 --> 00:26:33,100
open its we really are I mean the open

00:26:30,760 --> 00:26:34,930
the sonic project is all open source you

00:26:33,100 --> 00:26:38,200
can find it on github and use it the

00:26:34,930 --> 00:26:40,030
size is open source the container

00:26:38,200 --> 00:26:41,980
network interface plug-in is open source

00:26:40,030 --> 00:26:44,200
so we we really look forward to the

00:26:41,980 --> 00:26:48,340
community having a look and giving

00:26:44,200 --> 00:26:53,560
feedback and building on top thank you

00:26:48,340 --> 00:26:53,560

YouTube URL: https://www.youtube.com/watch?v=RgxEj_JQ74Y


