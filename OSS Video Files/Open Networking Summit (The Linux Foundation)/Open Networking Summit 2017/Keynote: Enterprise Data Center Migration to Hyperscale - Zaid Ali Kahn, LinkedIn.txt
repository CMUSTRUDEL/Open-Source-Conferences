Title: Keynote: Enterprise Data Center Migration to Hyperscale - Zaid Ali Kahn, LinkedIn
Publication date: 2017-04-10
Playlist: Open Networking Summit 2017
Description: 
	Keynote: Enterprise Data Center Migration to Hyperscale - Ihab Tarazi, CTO, Equinix & Zaid Ali Kahn, Sr. Director, Infrastructure Engineering, LinkedIn

Zaid Ali Kahn
Zaid began his career in Silicon Valley in 1998 at WebEx as the company's first network engineer, where he designed the first SaaS network called MediaTone. After building his own software company, Zaid eventually returned to his passion of infrastructure engineering. At LinkedIn he leads the infrastructure architecture team which works on next generation technologies for network, compute and datacenters. Zaid is passionate about Internet development which lead him to co-found the San Francisco Chapter of the Internet Society, a non- profit organization that promotes open development and ensures that the Internet is for everyone. Zaid has been an invited speaker to many Internet Peering forums and currently is an advisory board member for DE-CIX, the worldâ€™s largest Internet Exchange.
Captions: 
	00:00:00,000 --> 00:00:07,770
thank you so when I last to do this talk

00:00:05,040 --> 00:00:09,300
I generally used to like talking about

00:00:07,770 --> 00:00:11,330
some very specific things that we are

00:00:09,300 --> 00:00:13,620
trying to do in inside the data center

00:00:11,330 --> 00:00:17,039
whether it be around white box which is

00:00:13,620 --> 00:00:18,960
or open 19 or like different rack

00:00:17,039 --> 00:00:19,920
designs we get a bunch of stuff but I

00:00:18,960 --> 00:00:22,350
was pretty excited about this one

00:00:19,920 --> 00:00:23,850
because it's it's it was more like hey

00:00:22,350 --> 00:00:25,050
how did you make this transition and

00:00:23,850 --> 00:00:27,810
generally you don't get to tell the

00:00:25,050 --> 00:00:29,820
story about how you sort of got from one

00:00:27,810 --> 00:00:31,640
place to the other so so my point here

00:00:29,820 --> 00:00:34,680
is just to sort of give you an idea of

00:00:31,640 --> 00:00:37,590
what things we went to think about when

00:00:34,680 --> 00:00:39,750
we you know and when scaling from from

00:00:37,590 --> 00:00:42,090
like an traditional enterprise thinking

00:00:39,750 --> 00:00:43,680
to sort of how do we support hundreds

00:00:42,090 --> 00:00:45,390
and thousands of machines in liquid were

00:00:43,680 --> 00:00:48,059
you thinking about hyper scale Network

00:00:45,390 --> 00:00:50,250
right so I'll tell you you know it all

00:00:48,059 --> 00:00:53,850
starts obviously from traffic right we

00:00:50,250 --> 00:00:55,800
all run who all of us were on days and

00:00:53,850 --> 00:00:59,070
there's always a physically looking at

00:00:55,800 --> 00:01:01,140
traffic so inside LinkedIn data centers

00:00:59,070 --> 00:01:04,110
you know the traffic demands over time

00:01:01,140 --> 00:01:05,640
has grown tremendously right and and

00:01:04,110 --> 00:01:08,010
what's interesting about like content

00:01:05,640 --> 00:01:10,580
companies like us is that when you have

00:01:08,010 --> 00:01:12,960
sort of one byte of their that comes

00:01:10,580 --> 00:01:15,259
from say north south you know from the

00:01:12,960 --> 00:01:18,570
internet inside the data center it spans

00:01:15,259 --> 00:01:20,939
chanax right so because the way the

00:01:18,570 --> 00:01:23,460
applications are built is in almost core

00:01:20,939 --> 00:01:26,250
graph and it goes in spans across this

00:01:23,460 --> 00:01:27,960
and as insider and across them and and

00:01:26,250 --> 00:01:31,200
that creates enormous amount of traffic

00:01:27,960 --> 00:01:33,869
right so the other thing is we move tons

00:01:31,200 --> 00:01:36,360
of metrics inside the data center it's

00:01:33,869 --> 00:01:39,630
in the billions per second right

00:01:36,360 --> 00:01:41,880
we have offline jobs processing we have

00:01:39,630 --> 00:01:44,820
machine learning algorithms that are

00:01:41,880 --> 00:01:47,399
going seeking across networks trying to

00:01:44,820 --> 00:01:50,130
get a bunch of data lots of replication

00:01:47,399 --> 00:01:53,100
all these things add to the amount of

00:01:50,130 --> 00:01:55,619
traffic and all of this this machinery

00:01:53,100 --> 00:01:57,119
is you know impacting all sort of you

00:01:55,619 --> 00:01:58,460
know close to half a billion users that

00:01:57,119 --> 00:02:02,340
we have out there

00:01:58,460 --> 00:02:04,140
so one of the things that that our

00:02:02,340 --> 00:02:08,490
developers talked about and I was

00:02:04,140 --> 00:02:10,620
talking to a couple of my

00:02:08,490 --> 00:02:14,040
of my colleagues in the development side

00:02:10,620 --> 00:02:15,660
they you know a few years back we'll you

00:02:14,040 --> 00:02:17,220
know they would write a piece of

00:02:15,660 --> 00:02:20,100
software and they would say you know I

00:02:17,220 --> 00:02:21,690
need X number of machines right but we

00:02:20,100 --> 00:02:23,520
couldn't realize that that type of

00:02:21,690 --> 00:02:25,620
thinking just slows down a developer

00:02:23,520 --> 00:02:28,890
like what we wanted to create was

00:02:25,620 --> 00:02:30,360
basically infrastructure across the

00:02:28,890 --> 00:02:31,950
board and I'm not just talking about

00:02:30,360 --> 00:02:33,300
your accent service I'm talking about

00:02:31,950 --> 00:02:35,820
even a little bit higher level than that

00:02:33,300 --> 00:02:37,500
that it is completely invisible to the

00:02:35,820 --> 00:02:39,600
developer they should not care about it

00:02:37,500 --> 00:02:41,910
it should be extremely simple to use it

00:02:39,600 --> 00:02:43,710
should be elastic should scale

00:02:41,910 --> 00:02:45,450
automatically the developer shouldn't

00:02:43,710 --> 00:02:48,300
have to think about you know oh you know

00:02:45,450 --> 00:02:50,430
how many how many calls do I have do I

00:02:48,300 --> 00:02:51,750
have to be you know go and change a few

00:02:50,430 --> 00:02:53,760
of the parameters know all these things

00:02:51,750 --> 00:02:55,050
should happen automatically right there

00:02:53,760 --> 00:02:57,060
isn't a single point of free light it's

00:02:55,050 --> 00:02:59,370
always available so these are the things

00:02:57,060 --> 00:03:01,920
that we wanted our developers to sort of

00:02:59,370 --> 00:03:04,260
go is like you can you know get things

00:03:01,920 --> 00:03:06,330
on demand so when you start sort of

00:03:04,260 --> 00:03:07,800
thinking about that at LinkedIn we

00:03:06,330 --> 00:03:09,510
created something called LinkedIn

00:03:07,800 --> 00:03:12,180
platform Assessors it's all internal

00:03:09,510 --> 00:03:13,800
cloud so think of our developer you know

00:03:12,180 --> 00:03:16,290
who just puts in a little bit of a

00:03:13,800 --> 00:03:18,990
blueprint information and then you know

00:03:16,290 --> 00:03:21,180
ships their information now we have the

00:03:18,990 --> 00:03:23,430
system called called rainy and race and

00:03:21,180 --> 00:03:24,960
it you know says hey you know I'm I now

00:03:23,430 --> 00:03:27,870
know all this information and I'm gonna

00:03:24,960 --> 00:03:30,780
go and find the best server or servers

00:03:27,870 --> 00:03:33,690
for you based on your compute and your

00:03:30,780 --> 00:03:35,310
storage demand and in general and then

00:03:33,690 --> 00:03:37,380
it goes out and sort of populates that

00:03:35,310 --> 00:03:39,090
and then once it's out there you've

00:03:37,380 --> 00:03:41,160
developed this piece of software you

00:03:39,090 --> 00:03:41,550
don't think about it at all just let it

00:03:41,160 --> 00:03:44,010
be

00:03:41,550 --> 00:03:46,350
right and then you have we have another

00:03:44,010 --> 00:03:48,810
feature which just basically Auto scales

00:03:46,350 --> 00:03:53,400
it based on the demand of the

00:03:48,810 --> 00:03:55,860
application and and at that point we

00:03:53,400 --> 00:03:58,020
have tons of metrics and and learning

00:03:55,860 --> 00:03:59,970
mechanisms that basically scale the

00:03:58,020 --> 00:04:02,220
application on the back end so this is

00:03:59,970 --> 00:04:05,310
sort of like our sort of view into our

00:04:02,220 --> 00:04:07,050
internal cloud and how we serve the

00:04:05,310 --> 00:04:08,280
requests that you are asking for I think

00:04:07,050 --> 00:04:09,360
the previous gentleman just said like

00:04:08,280 --> 00:04:12,090
you know if you're asking you looking

00:04:09,360 --> 00:04:14,730
for a job so so when we sort of think

00:04:12,090 --> 00:04:16,260
about that you know when the problem

00:04:14,730 --> 00:04:18,480
comes to like on our side an

00:04:16,260 --> 00:04:20,280
infrastructure side of the house what

00:04:18,480 --> 00:04:21,230
does that translate to so when I look at

00:04:20,280 --> 00:04:23,660
something like that

00:04:21,230 --> 00:04:26,360
I you know the team sort of has to say

00:04:23,660 --> 00:04:29,030
okay well are we building to to sort of

00:04:26,360 --> 00:04:31,430
some very specific things the the the

00:04:29,030 --> 00:04:33,260
the challenge that I always have my team

00:04:31,430 --> 00:04:35,300
base think think of a much broader

00:04:33,260 --> 00:04:37,340
vision so we basically sat down and said

00:04:35,300 --> 00:04:40,850
in order to sort of get to a hyper scale

00:04:37,340 --> 00:04:42,410
model you have to think about unlimited

00:04:40,850 --> 00:04:44,450
bandwidth that means developers should

00:04:42,410 --> 00:04:45,920
not have to ever think about how much

00:04:44,450 --> 00:04:47,090
banners do I have in order to make my

00:04:45,920 --> 00:04:49,220
application work they should always

00:04:47,090 --> 00:04:51,410
think it's unlimited they should be

00:04:49,220 --> 00:04:54,230
thinking that there's no latency there's

00:04:51,410 --> 00:04:56,420
this they can get whatever they want and

00:04:54,230 --> 00:05:01,040
we will make sure that it's there the

00:04:56,420 --> 00:05:02,660
computers on demand the the part that we

00:05:01,040 --> 00:05:04,340
thought of is that it should be a

00:05:02,660 --> 00:05:06,050
completely disagree good model to give

00:05:04,340 --> 00:05:08,150
us more and more control of our destiny

00:05:06,050 --> 00:05:10,100
we came up with this concept called

00:05:08,150 --> 00:05:12,110
programmable data center and I'll touch

00:05:10,100 --> 00:05:14,540
a little bit in depth everybody you know

00:05:12,110 --> 00:05:16,580
as we go along the slides and then the

00:05:14,540 --> 00:05:18,860
other one is self-healing where as we

00:05:16,580 --> 00:05:22,340
scale the infrastructure if something

00:05:18,860 --> 00:05:24,080
breaks you know you don't run to fix it

00:05:22,340 --> 00:05:25,760
it should oughta heal right and that

00:05:24,080 --> 00:05:29,000
these are some of the principles that we

00:05:25,760 --> 00:05:31,640
sort of talk so out of that we created

00:05:29,000 --> 00:05:34,160
our flagship design called Altair which

00:05:31,640 --> 00:05:36,640
there's been some numerous blossomy but

00:05:34,160 --> 00:05:39,920
quickly go into it we looked at it as

00:05:36,640 --> 00:05:41,930
ability that as we build we need to

00:05:39,920 --> 00:05:45,680
future-proof it from 10 to 100 Gig

00:05:41,930 --> 00:05:49,040
capability to the host right we took a

00:05:45,680 --> 00:05:51,170
different approach where we at our scale

00:05:49,040 --> 00:05:53,090
we we don't have the ability to we don't

00:05:51,170 --> 00:05:55,940
look greenfield data centers we do go

00:05:53,090 --> 00:05:58,250
and buy wholesale space so that limits

00:05:55,940 --> 00:06:00,020
us to have like you know enormous

00:05:58,250 --> 00:06:03,110
amounts of data center space so we do

00:06:00,020 --> 00:06:06,640
density we try to pack more servers in

00:06:03,110 --> 00:06:10,670
iraq so we pack up to 96 hosts in iraq

00:06:06,640 --> 00:06:12,680
we decided that we will move into the

00:06:10,670 --> 00:06:15,380
single chip switching that means no

00:06:12,680 --> 00:06:18,050
chassis in the network we want to be

00:06:15,380 --> 00:06:20,900
able to support 200 gigs between the

00:06:18,050 --> 00:06:23,660
cabinets and of course non-blocking

00:06:20,900 --> 00:06:25,460
parallel fabric and we're trying to get

00:06:23,660 --> 00:06:29,620
subscriptions down to less than 6s to

00:06:25,460 --> 00:06:31,720
one and then the other one is our own

00:06:29,620 --> 00:06:33,640
adventure into

00:06:31,720 --> 00:06:35,470
what we call the fad the Falco fabric

00:06:33,640 --> 00:06:39,550
based which which is our own switch

00:06:35,470 --> 00:06:40,930
design so when when we sort of looked at

00:06:39,550 --> 00:06:45,010
these things we said well how do you

00:06:40,930 --> 00:06:47,590
scale these things out right so when you

00:06:45,010 --> 00:06:50,740
scale out our data centers across we

00:06:47,590 --> 00:06:52,600
have Universal them across the US there

00:06:50,740 --> 00:06:55,240
should be you know simple our design

00:06:52,600 --> 00:06:58,350
approaches there should be simple non

00:06:55,240 --> 00:07:01,630
blocking IP fabric we want to be able to

00:06:58,350 --> 00:07:04,330
do multiple parallel fabrics on cluster

00:07:01,630 --> 00:07:07,300
or architecture and I'll go a little bit

00:07:04,330 --> 00:07:10,660
depth into into what I mean by that and

00:07:07,300 --> 00:07:12,670
we also took this stance that the

00:07:10,660 --> 00:07:14,310
merchant silicon should have least

00:07:12,670 --> 00:07:16,320
amount of features we don't want

00:07:14,310 --> 00:07:18,640
unnecessary features we don't want to be

00:07:16,320 --> 00:07:20,590
putting things inside the network where

00:07:18,640 --> 00:07:22,930
we we don't even use them but then we

00:07:20,590 --> 00:07:24,400
have to you know deal with the bugs or

00:07:22,930 --> 00:07:26,020
the support and all that other things

00:07:24,400 --> 00:07:28,660
right so that that was kind of one of

00:07:26,020 --> 00:07:31,630
the thing distributed control plane with

00:07:28,660 --> 00:07:34,840
with some centralized control the other

00:07:31,630 --> 00:07:38,710
one is wide multi ecmp right we want to

00:07:34,840 --> 00:07:40,960
be able to go across the fabric and not

00:07:38,710 --> 00:07:42,190
have to go traverse cause anymore so

00:07:40,960 --> 00:07:44,650
there that that's one of the

00:07:42,190 --> 00:07:47,950
characteristics and then uniform chipset

00:07:44,650 --> 00:07:49,600
bandwidth buffering low latency and

00:07:47,950 --> 00:07:51,310
small buffering requirements was sort of

00:07:49,600 --> 00:07:54,370
one of the things we talked about this

00:07:51,310 --> 00:07:56,919
week so of scale out so what do you do

00:07:54,370 --> 00:07:59,500
when you try to get to a hyper scale you

00:07:56,919 --> 00:08:02,500
kill the dam chassis no more chassis so

00:07:59,500 --> 00:08:04,450
we took a very very hard stance and

00:08:02,500 --> 00:08:08,320
instead we will do single skew that

00:08:04,450 --> 00:08:11,140
means that 1u is the entire fabric one

00:08:08,320 --> 00:08:14,530
skew Maibaum is like this bag right for

00:08:11,140 --> 00:08:17,530
a network that is pretty massive so we

00:08:14,530 --> 00:08:21,040
said because if you want to get to the

00:08:17,530 --> 00:08:23,290
scale of going down to minimum number of

00:08:21,040 --> 00:08:25,210
chipsets where your packet is traversing

00:08:23,290 --> 00:08:27,520
less than five chipsets if you put

00:08:25,210 --> 00:08:28,990
causing it and firewalls and load

00:08:27,520 --> 00:08:33,190
balances and all these things they will

00:08:28,990 --> 00:08:34,900
add to your latency so introducing power

00:08:33,190 --> 00:08:36,580
of fabrics right that is kind of like

00:08:34,900 --> 00:08:39,339
one of the key things that we did so

00:08:36,580 --> 00:08:41,860
think of each pore and we have a single

00:08:39,339 --> 00:08:44,779
tour each door is four-way ECM key pass

00:08:41,860 --> 00:08:47,389
out and there are four fabrics we color

00:08:44,779 --> 00:08:49,430
fabrics and each of those fabrics are

00:08:47,389 --> 00:08:52,279
not at all connected to each other they

00:08:49,430 --> 00:08:55,790
are totally independent right we have

00:08:52,279 --> 00:08:59,180
one to one of a subscription across the

00:08:55,790 --> 00:09:01,399
fabric using minimum number of chipsets

00:08:59,180 --> 00:09:04,129
to carry east-west traffic I think that

00:09:01,399 --> 00:09:05,959
in the early days I calculated we were

00:09:04,129 --> 00:09:09,079
doing like hitting like each Packer was

00:09:05,959 --> 00:09:10,459
hitting like 15 to 20 chipsets and now

00:09:09,079 --> 00:09:14,209
we have it down to less than five

00:09:10,459 --> 00:09:16,670
chipsets server the server the the

00:09:14,209 --> 00:09:19,850
principle here in the fabric is that you

00:09:16,670 --> 00:09:22,309
were able to support 100,000 plus bare

00:09:19,850 --> 00:09:25,430
metal servers without adding any

00:09:22,309 --> 00:09:28,730
additional fabric layer and it should

00:09:25,430 --> 00:09:32,899
support up to 64 parts and each part has

00:09:28,730 --> 00:09:35,420
32 cabs and each of the caps has 1996

00:09:32,899 --> 00:09:37,339
bare metal as I had mentioned before and

00:09:35,420 --> 00:09:40,610
then the fabric is limited to you know

00:09:37,339 --> 00:09:43,220
its reach typical five-stage cost and

00:09:40,610 --> 00:09:45,709
the whole data center is is you know

00:09:43,220 --> 00:09:48,379
minimizing his chip set to reduce the

00:09:45,709 --> 00:09:50,540
latency and then and then at the hosts

00:09:48,379 --> 00:09:53,329
layer as I'm going down you know I'm

00:09:50,540 --> 00:09:56,870
supporting 10 25 50 and 100 at this

00:09:53,329 --> 00:09:59,540
point we are largely doing 10 25 we are

00:09:56,870 --> 00:10:02,629
open to 50 but I haven't seen a lot of

00:09:59,540 --> 00:10:04,550
use cases yet for 50 and 100 I think is

00:10:02,629 --> 00:10:06,079
I mean we've built the infrastructure

00:10:04,550 --> 00:10:08,649
for it it would be nice if the kernel

00:10:06,079 --> 00:10:11,149
gets there I think well that'll be fun

00:10:08,649 --> 00:10:13,490
so this is a three dimensional view of

00:10:11,149 --> 00:10:15,949
the same network what I wanted to really

00:10:13,490 --> 00:10:18,800
show here is that how we we've built our

00:10:15,949 --> 00:10:21,680
planes and how they spread across so if

00:10:18,800 --> 00:10:25,029
you were to traverse from say part one

00:10:21,680 --> 00:10:27,679
to part 64 you know in this architecture

00:10:25,029 --> 00:10:32,600
you're looking at a switching of 2.5

00:10:27,679 --> 00:10:36,559
microsecond right so what what are the

00:10:32,600 --> 00:10:38,870
so in the future proofing aspect we also

00:10:36,559 --> 00:10:41,540
did a hundred gate transformation late

00:10:38,870 --> 00:10:42,980
sort of early last year and we were a

00:10:41,540 --> 00:10:46,899
little bit on the cutting edge of it it

00:10:42,980 --> 00:10:50,089
was just out the tomahawk platform and

00:10:46,899 --> 00:10:52,819
so what we did was we as I talked about

00:10:50,089 --> 00:10:55,279
the single SKU so all our spine and all

00:10:52,819 --> 00:10:57,959
our fabric is that one SKU

00:10:55,279 --> 00:11:00,509
you can think of like I think it's like

00:10:57,959 --> 00:11:02,519
the Cisco 3232 see is one of them and

00:11:00,509 --> 00:11:05,699
and there's a number of 10 and we also

00:11:02,519 --> 00:11:09,720
have own that sort of blended there and

00:11:05,699 --> 00:11:12,899
and basically what we did is we we did

00:11:09,720 --> 00:11:15,209
hundred gear across the fabrics as you

00:11:12,899 --> 00:11:17,850
can see between the spine and with 50

00:11:15,209 --> 00:11:22,139
gig lakes connecting spine to the fabric

00:11:17,850 --> 00:11:26,519
now that is we decided to do 50

00:11:22,139 --> 00:11:28,679
gig each path so four times 50 right for

00:11:26,519 --> 00:11:32,069
path of 50 and the way we did that was

00:11:28,679 --> 00:11:37,199
we used PSM 4 so we could split each of

00:11:32,069 --> 00:11:38,970
100 Gig 2 to 250 gigs then the next

00:11:37,199 --> 00:11:42,239
thing i want to talk to talk about which

00:11:38,970 --> 00:11:45,119
is what i mentioned is the is is a

00:11:42,239 --> 00:11:48,779
desegregation right so earlier last year

00:11:45,119 --> 00:11:50,759
we kind of opened up and really got it

00:11:48,779 --> 00:11:54,480
into the desegregation space where we

00:11:50,759 --> 00:11:57,149
got odm platform and we put on linux nas

00:11:54,480 --> 00:11:58,889
and and and then we're working on the

00:11:57,149 --> 00:12:01,410
application layer what's interesting is

00:11:58,889 --> 00:12:04,860
that we we were really more focused on

00:12:01,410 --> 00:12:07,439
figuring out how do we just separate the

00:12:04,860 --> 00:12:09,389
two and this was like sometime last year

00:12:07,439 --> 00:12:12,329
we're very new into the into the face so

00:12:09,389 --> 00:12:14,730
we looked at like hey let's build an own

00:12:12,329 --> 00:12:16,470
ass whether we get us a third party

00:12:14,730 --> 00:12:18,809
where we get open source and try to just

00:12:16,470 --> 00:12:21,149
figure out how to do the ODM space and

00:12:18,809 --> 00:12:22,769
it opened up a new world for us but it

00:12:21,149 --> 00:12:25,470
also taught us a lot of things it taught

00:12:22,769 --> 00:12:29,369
us that you know spending a lot of time

00:12:25,470 --> 00:12:31,860
on the lower level you know between your

00:12:29,369 --> 00:12:32,850
a seek your only and all your hell you

00:12:31,860 --> 00:12:35,970
know these things take a lot of

00:12:32,850 --> 00:12:37,470
developer time what our team was more

00:12:35,970 --> 00:12:39,059
interested in because we built a five

00:12:37,470 --> 00:12:41,039
stage class network we had different

00:12:39,059 --> 00:12:44,910
sets of problems we had to deal with

00:12:41,039 --> 00:12:47,910
alpha mice crowd issues ecmp not being

00:12:44,910 --> 00:12:49,799
equal path so those things can you have

00:12:47,910 --> 00:12:51,359
to think application a little bit more

00:12:49,799 --> 00:12:52,709
on the control plane so we started to

00:12:51,359 --> 00:12:54,359
spend a bit more time and then found

00:12:52,709 --> 00:12:57,839
that the low-level part was a little bit

00:12:54,359 --> 00:13:00,029
of a pain so we transformed our

00:12:57,839 --> 00:13:02,160
desegregation model into something we

00:13:00,029 --> 00:13:04,289
call in our open fabric we don't really

00:13:02,160 --> 00:13:07,289
care about the nos we actually say that

00:13:04,289 --> 00:13:08,480
look we can just pick one like you know

00:13:07,289 --> 00:13:10,070
there's so many

00:13:08,480 --> 00:13:11,630
few people out there you know that are

00:13:10,070 --> 00:13:14,120
doing this they're great they're taking

00:13:11,630 --> 00:13:16,190
care of the low-level stuff we will you

00:13:14,120 --> 00:13:19,130
know use them or we can interchange them

00:13:16,190 --> 00:13:20,360
when we want and and you know as long as

00:13:19,130 --> 00:13:21,860
they work with the hardware everyone

00:13:20,360 --> 00:13:24,230
that's fine what we really want to focus

00:13:21,860 --> 00:13:27,170
on is in the control plane we want to be

00:13:24,230 --> 00:13:29,300
able to look at distribution of reach

00:13:27,170 --> 00:13:34,160
ability right fast simple distribution

00:13:29,300 --> 00:13:36,110
control plane we don't want you know

00:13:34,160 --> 00:13:37,940
crazy amount of features we just want

00:13:36,110 --> 00:13:40,339
one or two things that we need for it to

00:13:37,940 --> 00:13:43,370
do but what we want is Auto discovery

00:13:40,339 --> 00:13:46,610
basically what that means is I envision

00:13:43,370 --> 00:13:49,399
a data center technician taking a switch

00:13:46,610 --> 00:13:52,220
plugging it in and turning the power on

00:13:49,399 --> 00:13:54,410
and it knows whether it's a spine or

00:13:52,220 --> 00:13:57,380
relief right I don't have to configure

00:13:54,410 --> 00:13:59,690
it even a little bit of it it knows how

00:13:57,380 --> 00:14:01,910
to connect to it and it's so it's

00:13:59,690 --> 00:14:04,910
topology aware it knows how to auto

00:14:01,910 --> 00:14:06,860
discover neighbors and then all the

00:14:04,910 --> 00:14:10,389
policy is a little bit more centralized

00:14:06,860 --> 00:14:12,620
and where possible we use our own

00:14:10,389 --> 00:14:13,579
pipeline system called Kafka and I'll

00:14:12,620 --> 00:14:16,459
talk a little bit about what we're doing

00:14:13,579 --> 00:14:18,949
over there but basically the idea of our

00:14:16,459 --> 00:14:22,160
desegregation was next step in this

00:14:18,949 --> 00:14:23,990
equation is that and it makes you really

00:14:22,160 --> 00:14:26,149
think we think the network stack right

00:14:23,990 --> 00:14:27,440
it makes you think about your forwarding

00:14:26,149 --> 00:14:29,810
plane a little bit differently you know

00:14:27,440 --> 00:14:32,510
how do you do link selection how do you

00:14:29,810 --> 00:14:34,790
do to apology discovery you know how do

00:14:32,510 --> 00:14:37,790
you think about you know we think your

00:14:34,790 --> 00:14:39,529
telemetry scenarios you you know what

00:14:37,790 --> 00:14:41,149
what you can do if this is a whole world

00:14:39,529 --> 00:14:42,800
of opportunity for you to do a lot of

00:14:41,149 --> 00:14:45,470
different things on the application side

00:14:42,800 --> 00:14:47,120
like I was saying like self-healing you

00:14:45,470 --> 00:14:48,740
know predicting failures all these kind

00:14:47,120 --> 00:14:50,540
of things that that you can add on to

00:14:48,740 --> 00:14:53,240
the control plane so we want to spend a

00:14:50,540 --> 00:14:54,470
lot of time on that I'm running a little

00:14:53,240 --> 00:14:56,360
bit out of time so I'm trying to get

00:14:54,470 --> 00:14:59,240
through what I want to show here was

00:14:56,360 --> 00:15:01,850
that you know like we we've got this

00:14:59,240 --> 00:15:04,519
philosophy that our network folks that

00:15:01,850 --> 00:15:06,560
they don't really want to they don't

00:15:04,519 --> 00:15:09,410
care about SNMP anymore they don't want

00:15:06,560 --> 00:15:12,019
to deal with syslog so we said okay then

00:15:09,410 --> 00:15:13,550
let's not pull this stuff let's not put

00:15:12,019 --> 00:15:17,089
the stress on the control plane let's

00:15:13,550 --> 00:15:18,589
stream everything using Kafka and then

00:15:17,089 --> 00:15:21,110
we send everything through a pipeline

00:15:18,589 --> 00:15:22,939
and then our stuff is stored somewhere

00:15:21,110 --> 00:15:24,919
and we were able to do all kinds of

00:15:22,939 --> 00:15:26,839
amazing magic on it which is basically

00:15:24,919 --> 00:15:29,029
this and that's basically a programmable

00:15:26,839 --> 00:15:32,029
data center is that what that means is

00:15:29,029 --> 00:15:34,429
that we take all of the telemetry and we

00:15:32,029 --> 00:15:37,069
push it through a pipeline and then we

00:15:34,429 --> 00:15:39,439
can do all kinds of processing machine

00:15:37,069 --> 00:15:41,809
learning on top of it and those things

00:15:39,439 --> 00:15:43,369
are your network management aspects so

00:15:41,809 --> 00:15:45,859
you don't think on network management by

00:15:43,369 --> 00:15:48,979
by polling you think of it sort of like

00:15:45,859 --> 00:15:51,859
just using streaming telemetry and you

00:15:48,979 --> 00:15:53,929
can use that to to add a monitor Network

00:15:51,859 --> 00:15:56,449
or you can build feedback mechanisms and

00:15:53,929 --> 00:15:58,309
say I'm going to apply this action so

00:15:56,449 --> 00:16:00,529
that's sort of the future of where we

00:15:58,309 --> 00:16:03,139
are going and I think on that note I am

00:16:00,529 --> 00:16:05,029
just about on time and closing you know

00:16:03,139 --> 00:16:07,669
people generally say you know why why do

00:16:05,029 --> 00:16:09,350
you build your your own switch why do

00:16:07,669 --> 00:16:10,819
you want to do all this and and my

00:16:09,350 --> 00:16:12,769
answer that to that is it's not about

00:16:10,819 --> 00:16:15,410
the fact that we want to become experts

00:16:12,769 --> 00:16:17,509
in this right it's that because we see

00:16:15,410 --> 00:16:18,769
that this is a massive advantage to

00:16:17,509 --> 00:16:20,749
control the destiny of our

00:16:18,769 --> 00:16:22,939
infrastructure if we control the destiny

00:16:20,749 --> 00:16:25,399
of infrastructure it directly impacts

00:16:22,939 --> 00:16:30,309
how you are able to use our application

00:16:25,399 --> 00:16:33,309
and fastest and easiest manner so any

00:16:30,309 --> 00:16:33,309
questions

00:16:42,950 --> 00:16:49,649
so the question if people didn't hear is

00:16:46,920 --> 00:16:50,850
about Microsoft because of the

00:16:49,649 --> 00:16:54,360
acquisition are we gonna change the

00:16:50,850 --> 00:16:57,829
strategy or not so my my answer to that

00:16:54,360 --> 00:16:59,850
is a LinkedIn will will continue to to

00:16:57,829 --> 00:17:03,329
to manage and control its own

00:16:59,850 --> 00:17:06,480
infrastructure we are doing this for our

00:17:03,329 --> 00:17:08,280
member base at this point we will

00:17:06,480 --> 00:17:11,549
continue to do what we are doing and in

00:17:08,280 --> 00:17:19,140
the future time things may change but

00:17:11,549 --> 00:17:23,579
that's yet to be decided for distributed

00:17:19,140 --> 00:17:26,669
control plane so for you can be a little

00:17:23,579 --> 00:17:29,490
bit more specific for that that level

00:17:26,669 --> 00:17:32,220
okay so got it so yes so we are doing

00:17:29,490 --> 00:17:34,020
BGP to the Tor and what we are doing

00:17:32,220 --> 00:17:36,210
there is actually the open fabric is now

00:17:34,020 --> 00:17:38,700
a draft and ITF if you want to take a

00:17:36,210 --> 00:17:41,250
look at it basically what we are trying

00:17:38,700 --> 00:17:45,140
to do is use label management in there

00:17:41,250 --> 00:17:45,140
to figure out how to do the traffic so

00:17:49,280 --> 00:17:56,119
all right thank you very much everyone

00:17:51,840 --> 00:17:56,119

YouTube URL: https://www.youtube.com/watch?v=tybzdFsKeNA


