Title: Keynote: Cloud Native: Essential for 5G - Anders Rosengren, Ericsson
Publication date: 2019-04-18
Playlist: Open Networking Summit North America 2019
Description: 
	Keynote: Cloud Native: Essential for 5G - Anders Rosengren, Head of Architecture & Technology – Digital Services, Ericsson

This keynote will discuss how cloud native design principles, cloud native applications and other key areas such as Automation, Orchestration and Open source playing a major role towards the evolution of 5G. This keynote also plans to demonstrate a demo in the area of cloud native operations.

Speakers

Anders Rosengren
Head of Architecture & Technology Business Area Digital Services, Ericsson
Anders Rosengren is head of Architecture & Technology in Business Area Digital Services.Ericsson Digital Services provides solutions that realize our customers’ digital transformation including software and services in the areas of monetization and management systems (OSS/BSS...
Captions: 
	00:00:04,970 --> 00:00:11,580
thank you really really great to be here

00:00:07,649 --> 00:00:14,429
and of course fantastic to be following

00:00:11,580 --> 00:00:17,100
Andrey and this presentation so I'm

00:00:14,429 --> 00:00:20,460
going to talk about 5g and why cloud

00:00:17,100 --> 00:00:22,230
native is essential for 5g we saw on the

00:00:20,460 --> 00:00:25,170
video earlier here that 5g is happening

00:00:22,230 --> 00:00:28,769
now it's we're actually from Ericsson we

00:00:25,170 --> 00:00:31,340
have 17 commercial contracts for 5g we

00:00:28,769 --> 00:00:33,719
rolling out 5df we speak now NSA and

00:00:31,340 --> 00:00:37,170
tours and q3 this year we'll also

00:00:33,719 --> 00:00:40,640
deploying 5g standalone so definitely

00:00:37,170 --> 00:00:43,469
happening now and we also heard this

00:00:40,640 --> 00:00:46,140
presentation little bit earlier here 5d

00:00:43,469 --> 00:00:49,170
its use case driven it will start in the

00:00:46,140 --> 00:00:51,420
enhanced mobile broadband so we will 5g

00:00:49,170 --> 00:00:53,699
brings the possibility of lower the cost

00:00:51,420 --> 00:00:56,250
or delivering one bit with a two

00:00:53,699 --> 00:00:58,469
attempts so ten times cheaper to deliver

00:00:56,250 --> 00:01:00,570
data over 5g compared to 4G so that's

00:00:58,469 --> 00:01:02,190
why it's really really important we hear

00:01:00,570 --> 00:01:04,290
about the data volumes going up so it

00:01:02,190 --> 00:01:06,299
needs to be cheaper to deliver the

00:01:04,290 --> 00:01:08,159
mobile broadband and the increased

00:01:06,299 --> 00:01:11,010
capacity in that and 5g is there to

00:01:08,159 --> 00:01:12,390
support that but on top of that and I

00:01:11,010 --> 00:01:13,950
think that's why I'm going to also gonna

00:01:12,390 --> 00:01:16,799
talk about cloud native why that's

00:01:13,950 --> 00:01:19,170
important on top of the enhanced mobile

00:01:16,799 --> 00:01:21,900
broadband we see two types of use cases

00:01:19,170 --> 00:01:24,330
use groups of use cases massive machine

00:01:21,900 --> 00:01:27,509
type of communication so utilizing a lot

00:01:24,330 --> 00:01:30,000
of different sensors supporting smart

00:01:27,509 --> 00:01:33,600
metering smart or decock agriculture

00:01:30,000 --> 00:01:36,030
logistics etc but also critical MTC and

00:01:33,600 --> 00:01:38,689
I think that's even more interesting

00:01:36,030 --> 00:01:42,259
maybe where we see that 5g will support

00:01:38,689 --> 00:01:45,060
ultra reliable low latency communication

00:01:42,259 --> 00:01:47,600
very complex abbreviation there but

00:01:45,060 --> 00:01:49,920
still it will see how these use cases

00:01:47,600 --> 00:01:53,009
come together around

00:01:49,920 --> 00:01:55,189
industry control applications as well as

00:01:53,009 --> 00:01:58,140
autonomous driving traffic control

00:01:55,189 --> 00:01:59,759
remote training even remote surgery I

00:01:58,140 --> 00:02:01,740
think maybe we're not going to build 5g

00:01:59,759 --> 00:02:03,689
for remote surgery but still I think we

00:02:01,740 --> 00:02:05,070
did a very great demo what Mobile World

00:02:03,689 --> 00:02:06,659
Congress together with China Mobile

00:02:05,070 --> 00:02:09,239
around remote surgery and I think we

00:02:06,659 --> 00:02:11,489
will see use cases there as well but and

00:02:09,239 --> 00:02:13,840
this is I think also a great opportunity

00:02:11,489 --> 00:02:17,020
we see in the industry now to

00:02:13,840 --> 00:02:19,390
really build on top of 5g 50 is not just

00:02:17,020 --> 00:02:21,880
another G it's actually enhancing and

00:02:19,390 --> 00:02:23,590
enabling new applications on top of the

00:02:21,880 --> 00:02:26,050
mobile broadband if we seen that the

00:02:23,590 --> 00:02:28,300
business development on top of 4G has

00:02:26,050 --> 00:02:31,450
been primarily over the top I think we

00:02:28,300 --> 00:02:35,530
see that coming together in 5g with edge

00:02:31,450 --> 00:02:37,239
with exposure with the right speed and a

00:02:35,530 --> 00:02:40,690
low latency we will be able to build

00:02:37,239 --> 00:02:42,610
completely new use cases on top of 5g

00:02:40,690 --> 00:02:45,840
and that going to be a very interesting

00:02:42,610 --> 00:02:48,489
evolution over the coming years but I

00:02:45,840 --> 00:02:51,130
mean not here really to talk about 5g

00:02:48,489 --> 00:02:53,530
I'm here to talk about y 5g needs cloud

00:02:51,130 --> 00:02:55,209
native and I think it's coming back to

00:02:53,530 --> 00:02:58,330
all of these use cases coming back to

00:02:55,209 --> 00:03:00,880
why we need the possibility to really

00:02:58,330 --> 00:03:04,180
really quickly rollout to shorten the

00:03:00,880 --> 00:03:07,330
time to market for our functionality so

00:03:04,180 --> 00:03:09,489
to really be able to quickly deploy new

00:03:07,330 --> 00:03:12,340
functionality to be too quickly the

00:03:09,489 --> 00:03:14,350
upgrade functionality it's also

00:03:12,340 --> 00:03:17,170
important that we can scale the software

00:03:14,350 --> 00:03:19,299
that we deploy so cloud native will help

00:03:17,170 --> 00:03:21,310
us there as well we believe we need to

00:03:19,299 --> 00:03:23,500
be able to scale down to deploy on edges

00:03:21,310 --> 00:03:26,860
we need to scale up to manage the

00:03:23,500 --> 00:03:29,019
increased capacity and to do that very

00:03:26,860 --> 00:03:31,209
simply very fast and also there we see

00:03:29,019 --> 00:03:33,840
cloud native and containers and micro

00:03:31,209 --> 00:03:36,610
services really coming in to help

00:03:33,840 --> 00:03:38,799
efficient operations we will see a

00:03:36,610 --> 00:03:40,720
larger set of use cases a larger

00:03:38,799 --> 00:03:42,910
complexity actually in the network and

00:03:40,720 --> 00:03:45,609
the only way we can manage that is true

00:03:42,910 --> 00:03:47,500
automation also here we see cloud native

00:03:45,609 --> 00:03:50,500
with the simplicity that that brings

00:03:47,500 --> 00:03:53,019
really helps us in deploying that so and

00:03:50,500 --> 00:03:58,480
then of course finally performance and

00:03:53,019 --> 00:03:59,829
capacity it's really with the speed that

00:03:58,480 --> 00:04:02,410
is needed with the capacity that's

00:03:59,829 --> 00:04:04,269
needed we cannot lose anything we need

00:04:02,410 --> 00:04:06,190
to have the lowest possible overhead and

00:04:04,269 --> 00:04:09,790
we will get that with cloud native and

00:04:06,190 --> 00:04:11,950
containers so 5g is super important and

00:04:09,790 --> 00:04:17,109
cloud native is really really essential

00:04:11,950 --> 00:04:18,549
for network applications and in Ericsson

00:04:17,109 --> 00:04:21,479
we have realized that so we have gone

00:04:18,549 --> 00:04:23,860
all-in on cloud native all our 5g

00:04:21,479 --> 00:04:26,380
network applications network functions

00:04:23,860 --> 00:04:27,699
are cloud native from start and we do

00:04:26,380 --> 00:04:30,219
that across the complete four

00:04:27,699 --> 00:04:32,349
not only the 5 D Network functions but

00:04:30,219 --> 00:04:35,409
also into OSS into BSS into

00:04:32,349 --> 00:04:37,029
communication services and we see this

00:04:35,409 --> 00:04:38,830
is a big transformation of how we

00:04:37,029 --> 00:04:40,870
develop code and how we develop our

00:04:38,830 --> 00:04:43,180
application so we created a number of

00:04:40,870 --> 00:04:45,819
design principles that we are applying

00:04:43,180 --> 00:04:47,319
to all our development of course cloud

00:04:45,819 --> 00:04:49,479
native you can only do that by running

00:04:47,319 --> 00:04:51,189
and containers and of course you need to

00:04:49,479 --> 00:04:52,990
be built on market services architecture

00:04:51,189 --> 00:04:55,139
otherwise you will not be able to

00:04:52,990 --> 00:04:57,900
realize the benefits with cloud native

00:04:55,139 --> 00:05:01,979
on top of that we put another five

00:04:57,900 --> 00:05:03,129
critical design principles in place

00:05:01,979 --> 00:05:04,990
agnostic

00:05:03,129 --> 00:05:06,699
we will need to run our network

00:05:04,990 --> 00:05:08,830
applications on any kubernetes

00:05:06,699 --> 00:05:11,050
infrastructure we don't we cannot build

00:05:08,830 --> 00:05:12,759
telco unique we cannot build special

00:05:11,050 --> 00:05:14,229
functions or require special functions

00:05:12,759 --> 00:05:15,699
we know that our cloud native

00:05:14,229 --> 00:05:18,779
applications will be deployed in

00:05:15,699 --> 00:05:20,919
multiple different ways across both edge

00:05:18,779 --> 00:05:21,430
central telco clouds and even public

00:05:20,919 --> 00:05:23,589
clouds

00:05:21,430 --> 00:05:26,259
so definitely Agnes thisit is super

00:05:23,589 --> 00:05:27,580
important decompose software we need to

00:05:26,259 --> 00:05:29,319
be able to decompose we need to

00:05:27,580 --> 00:05:31,710
decompose our software's into marker

00:05:29,319 --> 00:05:34,029
services to have stable interfaces

00:05:31,710 --> 00:05:35,740
independent lifecycle management is also

00:05:34,029 --> 00:05:40,150
depending on the decomposition of the

00:05:35,740 --> 00:05:42,310
software application resiliency we have

00:05:40,150 --> 00:05:44,979
a long tradition of Intel code to be

00:05:42,310 --> 00:05:47,919
build one plus one to rely a lot on

00:05:44,979 --> 00:05:50,710
hardware resiliency etc that's not gonna

00:05:47,919 --> 00:05:53,229
work in a cloud native world we need to

00:05:50,710 --> 00:05:55,689
both strengthen how we'd build the

00:05:53,229 --> 00:05:57,849
applications routes resiliency also push

00:05:55,689 --> 00:05:59,830
down into the cloud infrastructure and

00:05:57,849 --> 00:06:02,409
really to rely on the cloud native

00:05:59,830 --> 00:06:04,389
principles that handle the resiliency we

00:06:02,409 --> 00:06:07,120
talk about herding cattle since heard of

00:06:04,389 --> 00:06:09,370
herding cats then state optimized design

00:06:07,120 --> 00:06:12,849
stateless design comes with cloud native

00:06:09,370 --> 00:06:15,399
we need to separate state and business

00:06:12,849 --> 00:06:17,500
code but we also need to handle the

00:06:15,399 --> 00:06:20,050
states different not all states are

00:06:17,500 --> 00:06:20,379
equal some are just updated maybe once a

00:06:20,050 --> 00:06:23,169
month

00:06:20,379 --> 00:06:24,819
others are updated every microsecond so

00:06:23,169 --> 00:06:26,680
some of the states needs to be kept very

00:06:24,819 --> 00:06:29,169
close to business logic while other

00:06:26,680 --> 00:06:32,589
states can be separated and handled in a

00:06:29,169 --> 00:06:34,180
in a longer way from the code and then

00:06:32,589 --> 00:06:37,389
finally orchestration and automation

00:06:34,180 --> 00:06:39,519
think we see also here a super important

00:06:37,389 --> 00:06:41,260
part to manage the complexity that we

00:06:39,519 --> 00:06:42,670
see coming in with the five

00:06:41,260 --> 00:06:46,510
the applications and they all those

00:06:42,670 --> 00:06:48,730
different use cases so really utilize

00:06:46,510 --> 00:06:50,680
and build out the orchestration to

00:06:48,730 --> 00:06:54,130
manage cloud native applications as well

00:06:50,680 --> 00:06:56,710
as the infrastructure so these design

00:06:54,130 --> 00:07:00,060
principles we put in place and we drive

00:06:56,710 --> 00:07:00,060
them across our complete development

00:07:02,400 --> 00:07:11,440
then I'm now almost echoing Andrew here

00:07:06,630 --> 00:07:14,080
so we see that if cloud native is really

00:07:11,440 --> 00:07:16,030
the essential for 5g open-source is

00:07:14,080 --> 00:07:19,330
really the enabler to create get us

00:07:16,030 --> 00:07:21,880
there and Ericsson is a strong proponent

00:07:19,330 --> 00:07:23,470
of open source we are a strong strongly

00:07:21,880 --> 00:07:25,780
engaged in a lot of different

00:07:23,470 --> 00:07:29,530
communities so LF networking of course

00:07:25,780 --> 00:07:32,470
onap to extend own up to manage open

00:07:29,530 --> 00:07:34,450
source to manage cloud native to manage

00:07:32,470 --> 00:07:36,340
kubernetes to be able to manage cloud

00:07:34,450 --> 00:07:39,880
native applications that's in a very

00:07:36,340 --> 00:07:41,800
important next step we also see ela

00:07:39,880 --> 00:07:46,960
fetch and Akron oh of course

00:07:41,800 --> 00:07:48,400
- we extend 5g into the edges we extend

00:07:46,960 --> 00:07:50,500
the network applications into the edge

00:07:48,400 --> 00:07:53,110
to really manage and handle the low

00:07:50,500 --> 00:07:55,780
latency so that is required or the

00:07:53,110 --> 00:07:57,940
specific enterprise use cases etc so of

00:07:55,780 --> 00:08:00,430
course a cry no and lfh is is an

00:07:57,940 --> 00:08:02,110
important part of creating an open

00:08:00,430 --> 00:08:04,540
ecosystem around that edge

00:08:02,110 --> 00:08:06,190
infrastructure cloud native computing

00:08:04,540 --> 00:08:07,960
foundation of course in kubernetes and

00:08:06,190 --> 00:08:09,790
all the tool sets around kubernetes

00:08:07,960 --> 00:08:13,300
that's really really important for us

00:08:09,790 --> 00:08:15,190
and then we talked about automation and

00:08:13,300 --> 00:08:16,960
orchestration and we know that we're

00:08:15,190 --> 00:08:20,620
gonna get there we're not going to get

00:08:16,960 --> 00:08:24,010
the efficiency the reduced OPEX the the

00:08:20,620 --> 00:08:26,470
lower mount power needed to run these

00:08:24,010 --> 00:08:28,810
systems without ai and automation and

00:08:26,470 --> 00:08:31,270
then we see deep learning combined we

00:08:28,810 --> 00:08:33,910
don't up and and the orchestration parts

00:08:31,270 --> 00:08:35,290
are very very important also airships

00:08:33,910 --> 00:08:37,930
plays a role here from a lifecycle

00:08:35,290 --> 00:08:40,060
management and we are aiming to see how

00:08:37,930 --> 00:08:41,830
we can get the lifecycle management of

00:08:40,060 --> 00:08:45,640
airship and lifecycle management of C&C

00:08:41,830 --> 00:08:47,530
f coming together in a good way so open

00:08:45,640 --> 00:08:49,540
source is definitely really really

00:08:47,530 --> 00:08:52,000
important and I can just let go Andrea

00:08:49,540 --> 00:08:53,680
to say that we are here because we

00:08:52,000 --> 00:08:54,540
believe in open source we are engaging

00:08:53,680 --> 00:08:56,850
this course

00:08:54,540 --> 00:08:58,620
believe in open source and the momentum

00:08:56,850 --> 00:09:00,959
that that creates the flexibility and

00:08:58,620 --> 00:09:02,639
the energy that that creates into the

00:09:00,959 --> 00:09:07,019
software development and into our

00:09:02,639 --> 00:09:09,839
products now but now I talked a lot

00:09:07,019 --> 00:09:12,360
about the cloud native applications and

00:09:09,839 --> 00:09:15,630
importance to look at that but that's

00:09:12,360 --> 00:09:17,430
not enough it's not enough to do these

00:09:15,630 --> 00:09:19,440
design principles and develop our

00:09:17,430 --> 00:09:21,630
applications to be cloud native to be

00:09:19,440 --> 00:09:23,639
based on micro services to run in

00:09:21,630 --> 00:09:25,649
containers it's not enough you need to

00:09:23,639 --> 00:09:27,350
look at the complete you need to take a

00:09:25,649 --> 00:09:30,149
holistic view and look at the complete

00:09:27,350 --> 00:09:31,860
infrastructure the complete package so

00:09:30,149 --> 00:09:35,220
of course we need to run on any

00:09:31,860 --> 00:09:37,620
infrastructure on bare metal on edge in

00:09:35,220 --> 00:09:40,050
central codes public clouds to be able

00:09:37,620 --> 00:09:44,279
to run on any infrastructure we need a

00:09:40,050 --> 00:09:47,180
CNC F base platform we need to develop

00:09:44,279 --> 00:09:49,829
our applications to be cloud native and

00:09:47,180 --> 00:09:52,110
we need an orchestration and automation

00:09:49,829 --> 00:09:54,240
tool suite that can handle a container

00:09:52,110 --> 00:09:57,839
as a service infrastructure and cloud

00:09:54,240 --> 00:09:59,720
native natural functions so when you us

00:09:57,839 --> 00:10:02,190
an operator or when you as an

00:09:59,720 --> 00:10:04,139
organization that are going to deploy

00:10:02,190 --> 00:10:05,699
cloud net the applications it's not yet

00:10:04,139 --> 00:10:07,620
enough that you say that ok I buy a

00:10:05,699 --> 00:10:08,639
cloud native application you actually

00:10:07,620 --> 00:10:10,470
need to look at your complete

00:10:08,639 --> 00:10:13,500
infrastructure at your complete stack

00:10:10,470 --> 00:10:15,329
and say do I have all the supports in

00:10:13,500 --> 00:10:17,610
all the different stages and all the

00:10:15,329 --> 00:10:21,180
different layers of the stack to be able

00:10:17,610 --> 00:10:24,360
to really support the efficiency the

00:10:21,180 --> 00:10:26,130
flexibility the upgrade speeds etc

00:10:24,360 --> 00:10:27,810
otherwise you will not succeed you will

00:10:26,130 --> 00:10:30,540
not get the benefits out of cloud native

00:10:27,810 --> 00:10:31,889
if you don't do take a look at your

00:10:30,540 --> 00:10:34,709
complete stack and take a look at

00:10:31,889 --> 00:10:37,439
exactly how you don't do it but even

00:10:34,709 --> 00:10:40,139
that is not enough we also need to look

00:10:37,439 --> 00:10:42,870
at the complete way working and

00:10:40,139 --> 00:10:44,939
operations we see that if you want to

00:10:42,870 --> 00:10:46,589
upgrade if you're building the

00:10:44,939 --> 00:10:48,689
flexibility to do an upgrade of an

00:10:46,589 --> 00:10:52,439
individual micro services in a few

00:10:48,689 --> 00:10:55,529
seconds then of course you cannot have

00:10:52,439 --> 00:10:58,139
an upgraded schedule of once a year you

00:10:55,529 --> 00:11:01,649
lose the complete meaning of that

00:10:58,139 --> 00:11:04,439
flexibility of that time to market so by

00:11:01,649 --> 00:11:06,480
if you don't really look into how you

00:11:04,439 --> 00:11:08,850
can have a complete continuous

00:11:06,480 --> 00:11:12,060
integration continuous deployment the

00:11:08,850 --> 00:11:14,459
every staging all the way between your

00:11:12,060 --> 00:11:16,980
vendor and yourself as an operator and

00:11:14,459 --> 00:11:19,350
even close that loop back so you can

00:11:16,980 --> 00:11:22,620
bring data back from your installations

00:11:19,350 --> 00:11:24,839
to your vendor for the to be enabled the

00:11:22,620 --> 00:11:27,300
vendor to really learn what's going on

00:11:24,839 --> 00:11:30,209
outside in in the deployments in the

00:11:27,300 --> 00:11:31,589
real operations if you don't do that if

00:11:30,209 --> 00:11:34,920
you don't upgrade your processor to

00:11:31,589 --> 00:11:36,620
support a more frequent upgrade then you

00:11:34,920 --> 00:11:39,449
will lose the benefits of cloud native

00:11:36,620 --> 00:11:41,639
we see that Erickson sees that when we

00:11:39,449 --> 00:11:43,740
engage with operators and and do so we

00:11:41,639 --> 00:11:46,079
have examples where we basically deploy

00:11:43,740 --> 00:11:49,319
production software into production

00:11:46,079 --> 00:11:51,120
systems every third week and we see the

00:11:49,319 --> 00:11:54,420
benefits we're reducing the upgrade

00:11:51,120 --> 00:11:58,230
times from number of many several days

00:11:54,420 --> 00:12:00,899
into maybe half a day and we also see

00:11:58,230 --> 00:12:05,670
that we can create a DevOps schedule

00:12:00,899 --> 00:12:09,149
between us and our customers so that we

00:12:05,670 --> 00:12:10,649
we have a closed loop not only on on the

00:12:09,149 --> 00:12:12,269
date that we bring back but also on

00:12:10,649 --> 00:12:16,230
functionality and we can engage on a

00:12:12,269 --> 00:12:18,180
completely different level so I think

00:12:16,230 --> 00:12:20,550
this is a call to say that you cannot

00:12:18,180 --> 00:12:22,680
only look at your stack you also need to

00:12:20,550 --> 00:12:25,550
look at your way you're working and your

00:12:22,680 --> 00:12:27,660
operations and you need to rethink

00:12:25,550 --> 00:12:29,220
basically your organization your

00:12:27,660 --> 00:12:30,839
operations your processes your way

00:12:29,220 --> 00:12:35,910
you're working to really get the

00:12:30,839 --> 00:12:39,750
benefits out of cloud native right so

00:12:35,910 --> 00:12:42,509
lots of slides a lot of words so is

00:12:39,750 --> 00:12:44,579
there anything real behind and yes there

00:12:42,509 --> 00:12:48,209
is as I said Ericsson is going full in

00:12:44,579 --> 00:12:49,889
on developing our five denotes cloud

00:12:48,209 --> 00:12:51,930
native I also said that we are rolling

00:12:49,889 --> 00:12:54,240
it out this year and that means that

00:12:51,930 --> 00:12:56,459
it's ready it's it's in our in our labs

00:12:54,240 --> 00:12:58,740
it's in our customer labs in our

00:12:56,459 --> 00:13:04,230
customer networks and therefore I'm

00:12:58,740 --> 00:13:06,000
happy to invite one of my experts Thomas

00:13:04,230 --> 00:13:07,560
arrows was an expert in cloud native

00:13:06,000 --> 00:13:09,779
architecture and cloud native

00:13:07,560 --> 00:13:12,990
implementations and it's going to show

00:13:09,779 --> 00:13:16,769
you a demo here of how we do in service

00:13:12,990 --> 00:13:19,740
upgrade of our Mme node in container

00:13:16,769 --> 00:13:21,949
orchestrated environment thank you and

00:13:19,740 --> 00:13:21,949
ash

00:13:22,180 --> 00:13:26,840
so just before you thought you gonna see

00:13:25,310 --> 00:13:30,770
a demonstration you're gonna see some

00:13:26,840 --> 00:13:34,940
slides first let me introduce you to our

00:13:30,770 --> 00:13:36,800
humble dual-mode 5g cloud core actually

00:13:34,940 --> 00:13:39,260
this should have been called the dual

00:13:36,800 --> 00:13:41,810
mode 5g cloud native core because

00:13:39,260 --> 00:13:44,990
everything that you see on the screen is

00:13:41,810 --> 00:13:47,660
cloud native fully to full extent and as

00:13:44,990 --> 00:13:49,820
you see these are the network functions

00:13:47,660 --> 00:13:52,100
that make up the newer moved five G

00:13:49,820 --> 00:13:56,480
cloud core it's newer mode because it's

00:13:52,100 --> 00:13:59,150
does 4G and 5g and as you see the light

00:13:56,480 --> 00:14:01,490
green boxes are the network functions

00:13:59,150 --> 00:14:04,220
defined for it word packet core doing

00:14:01,490 --> 00:14:07,430
the 40 functionality and the dark blue

00:14:04,220 --> 00:14:12,200
boxes do the 5g core network functions

00:14:07,430 --> 00:14:15,830
specified by 3gpp so what we are going

00:14:12,200 --> 00:14:18,500
to show you today is how we take Mme it

00:14:15,830 --> 00:14:21,380
stands for mobility management entity

00:14:18,500 --> 00:14:24,140
within this new remote core which is

00:14:21,380 --> 00:14:26,690
fully cloud native runs on kubernetes

00:14:24,140 --> 00:14:30,290
and take the business logic part of this

00:14:26,690 --> 00:14:32,870
network function and upgrade it fully

00:14:30,290 --> 00:14:38,360
using kubernetes facilities

00:14:32,870 --> 00:14:42,470
so this Mme yes

00:14:38,360 --> 00:14:45,020
so this Mme instance that you're going

00:14:42,470 --> 00:14:48,320
to see here basically we only upgrade

00:14:45,020 --> 00:14:50,570
the business logic and it runs on three

00:14:48,320 --> 00:14:53,960
micro services three instances of the

00:14:50,570 --> 00:14:57,320
same pod it roughly takes up around 0.15

00:14:53,960 --> 00:15:00,800
V CPUs it's very lightweight and it will

00:14:57,320 --> 00:15:04,310
handle around 7,500 simultaneously

00:15:00,800 --> 00:15:07,040
attached users so I think in itself is

00:15:04,310 --> 00:15:09,740
it's a it's a great example of how small

00:15:07,040 --> 00:15:11,920
can you scale with cloud native but at

00:15:09,740 --> 00:15:13,130
the same time how powerful can you be

00:15:11,920 --> 00:15:15,470
then

00:15:13,130 --> 00:15:17,930
this application is orchestrated fully

00:15:15,470 --> 00:15:20,750
by kubernetes and we gonna ask

00:15:17,930 --> 00:15:22,670
kubernetes to do the upgrade for us and

00:15:20,750 --> 00:15:24,680
then watch the results and of course

00:15:22,670 --> 00:15:27,320
check the KPI if everything is going

00:15:24,680 --> 00:15:30,320
right so I'd like to ask my kind friends

00:15:27,320 --> 00:15:31,750
to roll the demonstration and I'm gonna

00:15:30,320 --> 00:15:34,700
talk you through it

00:15:31,750 --> 00:15:36,290
on the video on the right hand side

00:15:34,700 --> 00:15:38,150
you basically see the standard

00:15:36,290 --> 00:15:40,310
kubernetes dashboard and on the on the

00:15:38,150 --> 00:15:42,650
left hand side you see our little user

00:15:40,310 --> 00:15:45,560
interface that shows the traffic that is

00:15:42,650 --> 00:15:47,480
being handled by the Mme and as you see

00:15:45,560 --> 00:15:49,640
there are three instances of the same

00:15:47,480 --> 00:15:52,310
pod with the Virgin bond of the software

00:15:49,640 --> 00:15:54,020
already running on the system so we

00:15:52,310 --> 00:15:56,440
start the upgrade by actually

00:15:54,020 --> 00:16:00,470
associating these pods with a new image

00:15:56,440 --> 00:16:02,360
we change the image and once that is

00:16:00,470 --> 00:16:03,950
done and we refresh the dashboard we see

00:16:02,360 --> 00:16:06,320
that the version has changed to version

00:16:03,950 --> 00:16:09,110
two none of the software currently

00:16:06,320 --> 00:16:11,390
running is using this image for it to be

00:16:09,110 --> 00:16:13,610
run we need to ask Cuban artists to

00:16:11,390 --> 00:16:16,040
upgrade the pods which are basically

00:16:13,610 --> 00:16:18,710
done by restarting them one by one and

00:16:16,040 --> 00:16:21,080
since the business logic is fully

00:16:18,710 --> 00:16:23,480
stateless that we can do without any

00:16:21,080 --> 00:16:26,120
end-user impact so as you see we

00:16:23,480 --> 00:16:28,700
initiated the upgrade for the first pod

00:16:26,120 --> 00:16:30,980
actually it's gonna be CP to control

00:16:28,700 --> 00:16:33,050
plane to port that is going to be

00:16:30,980 --> 00:16:35,090
upgraded and you will see on the user

00:16:33,050 --> 00:16:36,740
interface when it turns green it will

00:16:35,090 --> 00:16:39,020
already be running the new software

00:16:36,740 --> 00:16:41,150
there you go now this is typically the

00:16:39,020 --> 00:16:43,790
point where we sort of stopped for a

00:16:41,150 --> 00:16:45,950
second check the kpi's verify that the

00:16:43,790 --> 00:16:48,560
software is running as its intended to

00:16:45,950 --> 00:16:51,260
and once we have done all the manual

00:16:48,560 --> 00:16:53,240
steps or once all the automated tests

00:16:51,260 --> 00:16:55,610
have been run which is more likely the

00:16:53,240 --> 00:16:57,290
case then we can ask kubernetes to

00:16:55,610 --> 00:17:00,500
proceed for the rest of the pods and

00:16:57,290 --> 00:17:02,240
restore them sequentially actually since

00:17:00,500 --> 00:17:04,070
this is a fully stateless business logic

00:17:02,240 --> 00:17:05,660
we could just restore everything at the

00:17:04,070 --> 00:17:07,520
same time but that that would mean that

00:17:05,660 --> 00:17:10,490
would be some traffic outage which we

00:17:07,520 --> 00:17:12,380
don't want but obviously if we have more

00:17:10,490 --> 00:17:15,380
than three port instances let's say if

00:17:12,380 --> 00:17:18,290
we have 50 then we could do the upgrade

00:17:15,380 --> 00:17:20,720
in greater steps if we wanted so the

00:17:18,290 --> 00:17:23,420
last phase of the upgrade is when we ask

00:17:20,720 --> 00:17:26,000
the system to actually replace all of

00:17:23,420 --> 00:17:27,890
the pods and and restore them with all

00:17:26,000 --> 00:17:31,100
of with the new software that has been

00:17:27,890 --> 00:17:33,500
associated with this pod and once that

00:17:31,100 --> 00:17:35,630
is completed the whole system the whole

00:17:33,500 --> 00:17:37,940
MMA business logic is now will be

00:17:35,630 --> 00:17:39,650
upgraded to the new software level and

00:17:37,940 --> 00:17:47,870
they'll continue handling traffic

00:17:39,650 --> 00:17:50,160
forever so that basically concludes of

00:17:47,870 --> 00:17:52,260
demonstration as you see the pods are

00:17:50,160 --> 00:17:57,360
running and the off time is is

00:17:52,260 --> 00:17:59,760
increasing as we go along I'd like to

00:17:57,360 --> 00:18:02,340
get back to one issue first that I think

00:17:59,760 --> 00:18:04,860
on - mentioned before and it's the three

00:18:02,340 --> 00:18:07,350
things that we need to have together - -

00:18:04,860 --> 00:18:09,330
cloud annuity benefits it's the way of

00:18:07,350 --> 00:18:11,400
working it's the application and it's

00:18:09,330 --> 00:18:14,910
the cloud infrastructure and there is

00:18:11,400 --> 00:18:18,179
one area which sort of spans across all

00:18:14,910 --> 00:18:20,820
of these and an area where we see that

00:18:18,179 --> 00:18:23,790
we need to address the current state of

00:18:20,820 --> 00:18:27,179
things and we need to call your help in

00:18:23,790 --> 00:18:31,220
doing that that is not working as of

00:18:27,179 --> 00:18:33,870
today the networking Macanese protocols

00:18:31,220 --> 00:18:36,990
solutions that we use in Turku networks

00:18:33,870 --> 00:18:39,059
are typically ones which we started

00:18:36,990 --> 00:18:43,020
using than we had monolithic not running

00:18:39,059 --> 00:18:45,330
on dedicated hardware and since then we

00:18:43,020 --> 00:18:46,830
have created cloud we have evolved the

00:18:45,330 --> 00:18:49,200
cloud we have created cloud native

00:18:46,830 --> 00:18:51,299
applications but we are still using the

00:18:49,200 --> 00:18:54,179
same protocols the same mechanisms and

00:18:51,299 --> 00:18:56,610
the same solutions so in many cases we

00:18:54,179 --> 00:18:58,890
use layer 2 conductivity for things

00:18:56,610 --> 00:19:01,620
which should be using you know standard

00:18:58,890 --> 00:19:03,450
kubernetes networking and layer 3 so

00:19:01,620 --> 00:19:07,140
this is a little bit for a call for

00:19:03,450 --> 00:19:09,570
action for vendors and operators and and

00:19:07,140 --> 00:19:12,000
everyone who is working with open source

00:19:09,570 --> 00:19:14,250
because we see open source as the best

00:19:12,000 --> 00:19:17,010
tool sort of to push through this change

00:19:14,250 --> 00:19:20,400
to look through these networking use

00:19:17,010 --> 00:19:22,980
cases and see which kind of traffic

00:19:20,400 --> 00:19:25,890
which sort of all protocols do we need

00:19:22,980 --> 00:19:29,700
to evolve do we need to get rid of how

00:19:25,890 --> 00:19:32,130
do we move traffic towards layer 3 +

00:19:29,700 --> 00:19:34,710
kind of environments and and and

00:19:32,130 --> 00:19:37,260
solutions in the cloud and of course

00:19:34,710 --> 00:19:39,690
there will be things which will need

00:19:37,260 --> 00:19:42,900
extreme packet throughput and which

00:19:39,690 --> 00:19:45,270
might need layer 2 connectivity there we

00:19:42,900 --> 00:19:47,520
need to see how we improve the ecosystem

00:19:45,270 --> 00:19:49,770
how we work together with for example

00:19:47,520 --> 00:19:53,040
hardware acceleration technologies like

00:19:49,770 --> 00:19:55,620
smart Nix and make the cloud better so

00:19:53,040 --> 00:19:57,929
it can better execute our mobile

00:19:55,620 --> 00:20:00,620
broadband RI with the use cases and

00:19:57,929 --> 00:20:05,460
everything that 5g has to bring

00:20:00,620 --> 00:20:07,279
so with that more I ask on this to

00:20:05,460 --> 00:20:09,419
conclude our keynote speech

00:20:07,279 --> 00:20:15,809
thank you very much Thomas thank you

00:20:09,419 --> 00:20:18,840
demo so basically basically my time is

00:20:15,809 --> 00:20:20,850
running out so I'm gonna summarize this

00:20:18,840 --> 00:20:22,860
5g is happening now it's not something

00:20:20,850 --> 00:20:25,740
next year it's not something two years

00:20:22,860 --> 00:20:28,320
it's happening now cloud native is

00:20:25,740 --> 00:20:31,500
essential for fire to deliver deliver 5g

00:20:28,320 --> 00:20:33,450
and finally open source is super

00:20:31,500 --> 00:20:35,519
important tool to enable cloud native

00:20:33,450 --> 00:20:38,100
implementation let's work together to

00:20:35,519 --> 00:20:39,450
iron out the last problems that we see I

00:20:38,100 --> 00:20:41,370
think the call for action that Thomas

00:20:39,450 --> 00:20:43,980
had around networking is something that

00:20:41,370 --> 00:20:45,840
we work with something that we help the

00:20:43,980 --> 00:20:47,639
community work with and I also would

00:20:45,840 --> 00:20:50,759
like to get help back from the community

00:20:47,639 --> 00:20:52,440
to really sort this out committees visit

00:20:50,759 --> 00:20:54,509
us in our booth we'll have a lot more

00:20:52,440 --> 00:20:57,090
use cases a lot more demos around cloud

00:20:54,509 --> 00:20:59,340
native around our own apace that was s

00:20:57,090 --> 00:20:59,880
etc so please come and visit us thank

00:20:59,340 --> 00:21:04,159
you very much

00:20:59,880 --> 00:21:04,159

YouTube URL: https://www.youtube.com/watch?v=JC7xBSKA4-I


