Title: Introducing Project DENT -  Linux Networking at the Edge - Roopa Prabhu & Aviad Raveh
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	Introducing Project DENT -  Linux Networking at the Edge - Roopa Prabhu, Cumulus Networks & Aviad Raveh, Mellanox Technologies
Captions: 
	00:00:00,880 --> 00:00:06,319
hi um my name is rupa i'm

00:00:03,280 --> 00:00:10,240
from previously cumulus networks

00:00:06,319 --> 00:00:13,120
and now nvidia and i'll be talking about

00:00:10,240 --> 00:00:15,120
the dent project the distributed

00:00:13,120 --> 00:00:18,160
enterprise linux foundation project

00:00:15,120 --> 00:00:20,560
that started earlier this year um

00:00:18,160 --> 00:00:22,640
my co-speaker aviath from melanox who's

00:00:20,560 --> 00:00:25,920
also part of nvidia right now

00:00:22,640 --> 00:00:31,840
will uh not be able to join us today but

00:00:25,920 --> 00:00:31,840
um yeah let's let's get started

00:00:32,800 --> 00:00:37,600
so again a little bit about me i have i

00:00:35,120 --> 00:00:42,480
was an early employee at cumulus which

00:00:37,600 --> 00:00:46,640
means i was at the very beginning of

00:00:42,480 --> 00:00:48,960
the open networking revolution so

00:00:46,640 --> 00:00:49,760
i've been at the center of all the news

00:00:48,960 --> 00:00:51,199
about all

00:00:49,760 --> 00:00:52,960
network operating systems that came

00:00:51,199 --> 00:00:59,520
along since the last

00:00:52,960 --> 00:01:04,239
10 years

00:00:59,520 --> 00:01:04,239
a few um goals and

00:01:04,400 --> 00:01:08,479
an outline of the talk a little

00:01:09,600 --> 00:01:13,840
sorry i have a bit of an echo

00:01:17,119 --> 00:01:21,520
um i'll be i'll be talking about

00:01:19,439 --> 00:01:24,960
introduction to the open networking

00:01:21,520 --> 00:01:25,600
um dent architecture linux native

00:01:24,960 --> 00:01:27,439
software

00:01:25,600 --> 00:01:29,119
architecture for switch a6 linux

00:01:27,439 --> 00:01:32,240
switched up drivers

00:01:29,119 --> 00:01:32,720
then project itself and where can you

00:01:32,240 --> 00:01:36,079
find

00:01:32,720 --> 00:01:39,600
the dent project details

00:01:36,079 --> 00:01:41,200
so this screen is familiar to most of

00:01:39,600 --> 00:01:43,040
most of us who have been in the center

00:01:41,200 --> 00:01:46,000
of open networking revolution

00:01:43,040 --> 00:01:47,280
it's been a close to a decade now but

00:01:46,000 --> 00:01:50,000
legacy systems

00:01:47,280 --> 00:01:51,840
are still around but then the whole open

00:01:50,000 --> 00:01:53,040
networking revolution with ocp with

00:01:51,840 --> 00:01:54,720
linux foundation

00:01:53,040 --> 00:01:56,159
it's become very prominent in the data

00:01:54,720 --> 00:01:59,600
center and

00:01:56,159 --> 00:02:03,119
cloud and um and so on

00:01:59,600 --> 00:02:06,799
so if you see the

00:02:03,119 --> 00:02:09,920
um in this slide

00:02:06,799 --> 00:02:12,000
if you see the evolution of open network

00:02:09,920 --> 00:02:13,680
operating systems

00:02:12,000 --> 00:02:15,520
there are different tailored to

00:02:13,680 --> 00:02:18,319
different markets um

00:02:15,520 --> 00:02:20,319
for example for the cloud there is sonic

00:02:18,319 --> 00:02:22,640
and f boss from

00:02:20,319 --> 00:02:24,239
sonic is from microsoft and f boss is

00:02:22,640 --> 00:02:27,360
from facebook

00:02:24,239 --> 00:02:28,800
um and for telecom you have danos

00:02:27,360 --> 00:02:31,760
which i think was a contribution from

00:02:28,800 --> 00:02:34,959
atm t and

00:02:31,760 --> 00:02:37,360
for the data center there have been

00:02:34,959 --> 00:02:38,480
uh operating systems commercially open

00:02:37,360 --> 00:02:41,840
operating systems

00:02:38,480 --> 00:02:43,680
uh not in a community sense but uh

00:02:41,840 --> 00:02:45,120
the disaggregated open networking

00:02:43,680 --> 00:02:46,640
operating systems like cumulus linux

00:02:45,120 --> 00:02:47,680
which i was part of for a really long

00:02:46,640 --> 00:02:50,000
time or am still

00:02:47,680 --> 00:02:51,280
on peak i8 and so on and missing some

00:02:50,000 --> 00:02:54,480
names of course

00:02:51,280 --> 00:02:55,360
um but now the recent one is distributed

00:02:54,480 --> 00:02:58,239
enterprise

00:02:55,360 --> 00:02:59,280
and that targets for the edge market um

00:02:58,239 --> 00:03:00,560
open networking

00:02:59,280 --> 00:03:03,519
network operating system for the

00:03:00,560 --> 00:03:05,360
distributed enterprise and edge

00:03:03,519 --> 00:03:06,800
um and it's a linux foundation project

00:03:05,360 --> 00:03:09,280
there is a reference to

00:03:06,800 --> 00:03:10,879
this at the end of in the references

00:03:09,280 --> 00:03:14,000
section in the linux foundation

00:03:10,879 --> 00:03:14,000
uh announcement

00:03:14,560 --> 00:03:18,879
so what is dent so dent is a new

00:03:16,640 --> 00:03:20,400
operating system and for the networking

00:03:18,879 --> 00:03:22,959
at the edge

00:03:20,400 --> 00:03:26,080
and for example campus edge retail

00:03:22,959 --> 00:03:28,000
remote office branch office and so on

00:03:26,080 --> 00:03:29,599
uh what how is it different from the

00:03:28,000 --> 00:03:30,080
other network operating systems out

00:03:29,599 --> 00:03:31,920
there

00:03:30,080 --> 00:03:34,080
is basically it uses the linux

00:03:31,920 --> 00:03:37,280
networking api and switch tab

00:03:34,080 --> 00:03:38,799
for offload to switch asic i'll talk a

00:03:37,280 --> 00:03:40,640
little more about switch asic

00:03:38,799 --> 00:03:42,560
uh switched up the switcher project the

00:03:40,640 --> 00:03:45,920
linux kernel switched up project

00:03:42,560 --> 00:03:46,640
but cumulus linux is also a linux

00:03:45,920 --> 00:03:49,360
networking

00:03:46,640 --> 00:03:49,680
api based network operating system so

00:03:49,360 --> 00:03:52,319
it's

00:03:49,680 --> 00:03:52,959
very familiar to me especially and i was

00:03:52,319 --> 00:03:56,640
also part

00:03:52,959 --> 00:03:59,280
of when the switchdab

00:03:56,640 --> 00:04:01,120
movement started or the project started

00:03:59,280 --> 00:04:04,400
in the next kernel

00:04:01,120 --> 00:04:07,439
so what um

00:04:04,400 --> 00:04:08,640
sorry um the founding members of dent of

00:04:07,439 --> 00:04:11,840
the premier members

00:04:08,640 --> 00:04:14,959
are uh these amazon cumulus

00:04:11,840 --> 00:04:18,720
delta marvel melanox winston

00:04:14,959 --> 00:04:21,040
edgecore and amazon was the

00:04:18,720 --> 00:04:23,040
leader in starting the project and it

00:04:21,040 --> 00:04:24,000
brought along the community and linux

00:04:23,040 --> 00:04:27,600
foundation

00:04:24,000 --> 00:04:29,840
together so

00:04:27,600 --> 00:04:30,639
edge deployments what are the

00:04:29,840 --> 00:04:33,360
requirements

00:04:30,639 --> 00:04:34,320
of an edge nas right so a network

00:04:33,360 --> 00:04:37,600
operating system

00:04:34,320 --> 00:04:41,600
open disaggregated result here um

00:04:37,600 --> 00:04:44,320
for a cloud basically you need a

00:04:41,600 --> 00:04:45,759
routing stack and the usual protocols

00:04:44,320 --> 00:04:48,400
and

00:04:45,759 --> 00:04:49,759
the switch data plane forwarding um and

00:04:48,400 --> 00:04:53,040
the cpu forwarding

00:04:49,759 --> 00:04:55,280
uh plane and so on so

00:04:53,040 --> 00:04:56,479
for the edge there are a few things

00:04:55,280 --> 00:04:58,240
different uh

00:04:56,479 --> 00:04:59,759
of course the modern open disaggregated

00:04:58,240 --> 00:05:02,090
is common to all of them

00:04:59,759 --> 00:05:03,360
build for automation and scale um

00:05:02,090 --> 00:05:05,680
[Music]

00:05:03,360 --> 00:05:07,520
and you are trying to in this model for

00:05:05,680 --> 00:05:09,919
open networking you are trying to

00:05:07,520 --> 00:05:10,880
uniform the operational model leverage

00:05:09,919 --> 00:05:12,800
some of the

00:05:10,880 --> 00:05:14,240
data center automation tools or

00:05:12,800 --> 00:05:16,479
networking tools

00:05:14,240 --> 00:05:17,360
and best practices or whatever we have

00:05:16,479 --> 00:05:20,639
learned

00:05:17,360 --> 00:05:22,000
with open networking to to campus and

00:05:20,639 --> 00:05:23,919
edge

00:05:22,000 --> 00:05:26,400
what this also gives you is a simplified

00:05:23,919 --> 00:05:29,759
architecture operations and cost

00:05:26,400 --> 00:05:33,039
efficiency this again comes um

00:05:29,759 --> 00:05:36,840
due to the nature of uh the

00:05:33,039 --> 00:05:38,800
open networking uh flexibility and

00:05:36,840 --> 00:05:42,320
control

00:05:38,800 --> 00:05:45,360
so what is uh the dent

00:05:42,320 --> 00:05:47,360
nos uh critical

00:05:45,360 --> 00:05:48,639
or the central point of how it's

00:05:47,360 --> 00:05:50,240
different from the other network

00:05:48,639 --> 00:05:54,479
operating systems

00:05:50,240 --> 00:05:57,280
so we've seen um linux kernel

00:05:54,479 --> 00:05:58,080
offloading to hardware right it's also

00:05:57,280 --> 00:06:00,479
called network

00:05:58,080 --> 00:06:01,680
acceleration or network hardware

00:06:00,479 --> 00:06:04,880
acceleration

00:06:01,680 --> 00:06:05,680
basically the architecture or the linux

00:06:04,880 --> 00:06:08,080
system

00:06:05,680 --> 00:06:09,360
you submit drivers you have those

00:06:08,080 --> 00:06:11,440
drivers in the kernel

00:06:09,360 --> 00:06:13,360
it recognizes your device and it can

00:06:11,440 --> 00:06:15,360
accelerate your

00:06:13,360 --> 00:06:16,720
networking or any function that your

00:06:15,360 --> 00:06:18,560
device provides

00:06:16,720 --> 00:06:21,199
so if your device is not there that

00:06:18,560 --> 00:06:24,479
function is gets executed in software

00:06:21,199 --> 00:06:26,160
and when the device is present or the

00:06:24,479 --> 00:06:28,479
driver is present or the hardware is

00:06:26,160 --> 00:06:31,919
present it gets offloaded to

00:06:28,479 --> 00:06:33,440
the hardware so this mix and mpus have

00:06:31,919 --> 00:06:34,560
followed this model in the linux world

00:06:33,440 --> 00:06:36,720
for a really long time

00:06:34,560 --> 00:06:38,160
right uh you know when your neck driver

00:06:36,720 --> 00:06:40,880
is there and then you know

00:06:38,160 --> 00:06:41,840
you can simulate a neck driver on in kvm

00:06:40,880 --> 00:06:43,680
or so on

00:06:41,840 --> 00:06:44,960
but you know when you have the hardware

00:06:43,680 --> 00:06:48,319
it just

00:06:44,960 --> 00:06:51,280
offloads to hardware so

00:06:48,319 --> 00:06:53,120
the model is the model of switch tab or

00:06:51,280 --> 00:06:55,120
the model of dent nas is based on that

00:06:53,120 --> 00:06:56,240
basically your switch ports they appear

00:06:55,120 --> 00:06:59,039
as neck ports

00:06:56,240 --> 00:06:59,599
your kernel linux kernel layer to

00:06:59,039 --> 00:07:02,639
forwarding

00:06:59,599 --> 00:07:04,639
layer 3 forwarding and multicast vxlan

00:07:02,639 --> 00:07:06,639
and so on that you're very familiar with

00:07:04,639 --> 00:07:10,080
on the host os or vm

00:07:06,639 --> 00:07:13,440
on linux you will see that

00:07:10,080 --> 00:07:15,039
um you can do that on a dent system

00:07:13,440 --> 00:07:16,720
so that's the whole idea of the

00:07:15,039 --> 00:07:18,000
architecture

00:07:16,720 --> 00:07:19,520
and on the right there is a pictures

00:07:18,000 --> 00:07:21,120
which board says make ports then you

00:07:19,520 --> 00:07:24,960
have the linux networking api

00:07:21,120 --> 00:07:24,960
and the hardware offload api

00:07:26,400 --> 00:07:29,599
so the software architecture guiding

00:07:28,160 --> 00:07:31,919
principles again is

00:07:29,599 --> 00:07:34,160
basically it needs to be an open source

00:07:31,919 --> 00:07:36,240
linux based so it's a debian based

00:07:34,160 --> 00:07:37,440
so for all practical purposes it's a

00:07:36,240 --> 00:07:40,720
debian system

00:07:37,440 --> 00:07:44,400
right it's debian systems with some uh

00:07:40,720 --> 00:07:46,639
add-ons for things uh a massive this

00:07:44,400 --> 00:07:49,840
provides you a massive linux ecosystem

00:07:46,639 --> 00:07:52,960
uh to or debian ecosystem uh to

00:07:49,840 --> 00:07:54,639
choose from packages from and um you

00:07:52,960 --> 00:07:56,479
have a linux natively accelerated

00:07:54,639 --> 00:07:59,280
stack that is accelerated by switch asic

00:07:56,479 --> 00:08:01,599
hardware open protocol implementations

00:07:59,280 --> 00:08:02,319
with fr being the control plane then you

00:08:01,599 --> 00:08:05,680
have worf

00:08:02,319 --> 00:08:08,720
and vxlan vrp all these

00:08:05,680 --> 00:08:12,000
implementations already exist on linux

00:08:08,720 --> 00:08:15,440
and they have been they've gone

00:08:12,000 --> 00:08:17,759
through another a big boost

00:08:15,440 --> 00:08:19,280
in open source development in these

00:08:17,759 --> 00:08:21,599
areas or in these protocol

00:08:19,280 --> 00:08:22,639
implementations with fr and so on in the

00:08:21,599 --> 00:08:26,800
past

00:08:22,639 --> 00:08:28,000
few years and of course simplified

00:08:26,800 --> 00:08:30,240
modern architecture

00:08:28,000 --> 00:08:32,159
it's just as plain your switch uh or

00:08:30,240 --> 00:08:34,320
your edge switch is basically a plain

00:08:32,159 --> 00:08:36,959
linux box you

00:08:34,320 --> 00:08:37,440
do everything that you could on a linux

00:08:36,959 --> 00:08:40,640
box

00:08:37,440 --> 00:08:41,919
on your server for example um

00:08:40,640 --> 00:08:44,880
a little bit about the switch type

00:08:41,919 --> 00:08:47,760
project again like i mentioned

00:08:44,880 --> 00:08:51,680
its switchdev is a name given to the

00:08:47,760 --> 00:08:55,200
linux kernel support for switch a6

00:08:51,680 --> 00:08:56,240
and what that means is you have switch

00:08:55,200 --> 00:08:59,200
asic drivers

00:08:56,240 --> 00:09:01,279
in the upstream kernel the kernel has

00:08:59,200 --> 00:09:03,680
hardware offload extensions for these

00:09:01,279 --> 00:09:04,480
switch asics basically hooks in the

00:09:03,680 --> 00:09:08,320
routing code

00:09:04,480 --> 00:09:10,080
neighbor bridging and so on initial apis

00:09:08,320 --> 00:09:13,519
were prefixed with switchdev

00:09:10,080 --> 00:09:16,160
and the name stuck but the name you

00:09:13,519 --> 00:09:19,120
won't find the name in apis and so on

00:09:16,160 --> 00:09:20,880
um but quickly evolved to using existing

00:09:19,120 --> 00:09:23,600
kernel infrastructure like

00:09:20,880 --> 00:09:25,040
notifiers and so on there is a new

00:09:23,600 --> 00:09:27,839
netlink api

00:09:25,040 --> 00:09:28,800
uh netlink is a protocol for kernel

00:09:27,839 --> 00:09:31,279
linux kernel

00:09:28,800 --> 00:09:32,880
uh user space communication it's an ipc

00:09:31,279 --> 00:09:36,080
uh mechanism

00:09:32,880 --> 00:09:39,279
in linux and a new api

00:09:36,080 --> 00:09:41,680
called devlink was born to actually

00:09:39,279 --> 00:09:42,480
tailor to this particular switch asic

00:09:41,680 --> 00:09:45,519
hardware

00:09:42,480 --> 00:09:48,240
uh configuration and you know resource

00:09:45,519 --> 00:09:48,959
uh viewing resources debug ability and

00:09:48,240 --> 00:09:50,800
so on

00:09:48,959 --> 00:09:52,160
and like any other technology in the

00:09:50,800 --> 00:09:54,720
linux kernel

00:09:52,160 --> 00:09:55,760
devlink api is actually proliferated to

00:09:54,720 --> 00:09:57,600
other areas like

00:09:55,760 --> 00:09:59,279
example the nick teams or the server

00:09:57,600 --> 00:10:01,519
teams are also server

00:09:59,279 --> 00:10:02,800
drivers are also using them which is a

00:10:01,519 --> 00:10:05,279
great thing again

00:10:02,800 --> 00:10:06,560
this is another path to uniformity

00:10:05,279 --> 00:10:09,839
between a switch

00:10:06,560 --> 00:10:12,079
uh asic driver and you know a server

00:10:09,839 --> 00:10:13,760
and that was the whole intention of the

00:10:12,079 --> 00:10:16,880
switchdev project

00:10:13,760 --> 00:10:20,160
um and the linux api

00:10:16,880 --> 00:10:22,480
based open networking network operating

00:10:20,160 --> 00:10:22,480
system

00:10:23,120 --> 00:10:29,839
so this is an overall picture of the

00:10:27,519 --> 00:10:32,640
dent architecture

00:10:29,839 --> 00:10:34,800
like i mentioned this this will be

00:10:32,640 --> 00:10:37,839
familiar to people who have looked at

00:10:34,800 --> 00:10:39,760
network operating systems based on um

00:10:37,839 --> 00:10:42,160
the linux kernel api and its native

00:10:39,760 --> 00:10:45,600
networking api like cumulus linux

00:10:42,160 --> 00:10:48,720
so what we're talking about here is your

00:10:45,600 --> 00:10:50,640
applications that are here are

00:10:48,720 --> 00:10:53,680
linux applications some of this for

00:10:50,640 --> 00:10:56,320
example lltpd comes from the debian

00:10:53,680 --> 00:10:57,360
ecosystem dhcp comes from the debian

00:10:56,320 --> 00:11:01,839
ecosystem

00:10:57,360 --> 00:11:04,880
fr is as um as you guys know is a

00:11:01,839 --> 00:11:05,760
routing stack an open implementation uh

00:11:04,880 --> 00:11:08,880
routing stack

00:11:05,760 --> 00:11:12,000
it has bgp ospf and many others and

00:11:08,880 --> 00:11:14,959
it was previously quagga and now

00:11:12,000 --> 00:11:17,600
it's become one of the yeah massive

00:11:14,959 --> 00:11:19,680
protocol suite actually vr pd it also

00:11:17,600 --> 00:11:22,480
has a vrpd implementation

00:11:19,680 --> 00:11:23,440
so ferrara has various back-ends and one

00:11:22,480 --> 00:11:26,399
of his back-ends is

00:11:23,440 --> 00:11:27,120
linux and it can work on any linux

00:11:26,399 --> 00:11:29,920
system

00:11:27,120 --> 00:11:31,279
and it works on linux system as it is a

00:11:29,920 --> 00:11:33,360
linux system for example

00:11:31,279 --> 00:11:34,800
you can run it on a red hat it'll use

00:11:33,360 --> 00:11:38,160
the kernel for

00:11:34,800 --> 00:11:38,640
its data plane but what the switched up

00:11:38,160 --> 00:11:41,040
driver

00:11:38,640 --> 00:11:43,360
here what it's going to do is it's going

00:11:41,040 --> 00:11:43,360
to

00:11:43,440 --> 00:11:47,279
the control plane is going to interact

00:11:44,800 --> 00:11:49,040
with the linux kernel and the hooks in

00:11:47,279 --> 00:11:51,760
all of these subsystems

00:11:49,040 --> 00:11:53,200
will eventually lead to the driver and

00:11:51,760 --> 00:11:54,480
then to the asic

00:11:53,200 --> 00:11:56,399
okay that's the whole idea of the

00:11:54,480 --> 00:11:59,040
architecture so the applications

00:11:56,399 --> 00:12:00,240
don't know that there is a switch driver

00:11:59,040 --> 00:12:03,200
on asic

00:12:00,240 --> 00:12:04,480
uh but the uh what this also enables you

00:12:03,200 --> 00:12:08,079
to do is you can run

00:12:04,480 --> 00:12:10,800
dent nas as a virtual machine

00:12:08,079 --> 00:12:12,480
um that comes for free uh basically as

00:12:10,800 --> 00:12:13,600
long as if you if you're not running a

00:12:12,480 --> 00:12:17,360
hardware and

00:12:13,600 --> 00:12:20,160
switch asic this top stack of linux

00:12:17,360 --> 00:12:21,600
will continue to function like any other

00:12:20,160 --> 00:12:25,120
um

00:12:21,600 --> 00:12:27,120
like a software linux system

00:12:25,120 --> 00:12:29,120
so that's the uh that's the power of the

00:12:27,120 --> 00:12:32,560
architecture

00:12:29,120 --> 00:12:34,160
the dent ecosystem um it's a lot of

00:12:32,560 --> 00:12:36,160
like any other project actually any

00:12:34,160 --> 00:12:37,519
other open source uh

00:12:36,160 --> 00:12:39,519
something like a network operating

00:12:37,519 --> 00:12:42,800
system which is huge enough

00:12:39,519 --> 00:12:45,839
to have many players um dent has

00:12:42,800 --> 00:12:48,160
many uh communities coming together um

00:12:45,839 --> 00:12:49,279
oni which was part of is part of the

00:12:48,160 --> 00:12:52,480
open networking

00:12:49,279 --> 00:12:55,360
revolution and ocp

00:12:52,480 --> 00:12:56,160
then of course linux debian switched up

00:12:55,360 --> 00:12:58,959
project

00:12:56,160 --> 00:13:00,320
ansible and puppet chef the other

00:12:58,959 --> 00:13:01,760
automation tools

00:13:00,320 --> 00:13:03,920
that you're very familiar with on the

00:13:01,760 --> 00:13:06,959
server fr routing stack

00:13:03,920 --> 00:13:07,839
um ocp again with o l i'll talk a little

00:13:06,959 --> 00:13:10,000
bit about o

00:13:07,839 --> 00:13:11,040
l's presence in dent and of course the

00:13:10,000 --> 00:13:13,279
linux foundation

00:13:11,040 --> 00:13:16,160
which started this project or who is

00:13:13,279 --> 00:13:16,160
hosting the project

00:13:16,800 --> 00:13:23,200
so um dent hardware and software

00:13:20,399 --> 00:13:23,920
a little bit of details um the three

00:13:23,200 --> 00:13:27,600
odiums

00:13:23,920 --> 00:13:31,519
um act on delta networks and western

00:13:27,600 --> 00:13:35,200
uh two asic vendors marvel and melanox

00:13:31,519 --> 00:13:37,839
um and i've of course i

00:13:35,200 --> 00:13:39,360
i am part of nvidia milanox and nvidia

00:13:37,839 --> 00:13:42,160
cumulus so

00:13:39,360 --> 00:13:43,440
i uh the examples that i use later on in

00:13:42,160 --> 00:13:46,000
the slides are all about

00:13:43,440 --> 00:13:48,320
uh taken on a melanox platform so you

00:13:46,000 --> 00:13:50,880
have three different

00:13:48,320 --> 00:13:52,959
switches switch configurations as seen

00:13:50,880 --> 00:13:55,040
here

00:13:52,959 --> 00:13:57,600
and poe if i have not mentioned earlier

00:13:55,040 --> 00:13:59,839
pure is one of the

00:13:57,600 --> 00:14:01,279
different features that you will see

00:13:59,839 --> 00:14:05,120
requirement

00:14:01,279 --> 00:14:08,160
in an edge mass or an edge detail noise

00:14:05,120 --> 00:14:08,160
power over ethernet

00:14:08,480 --> 00:14:14,480
so what are dent noise components open

00:14:11,519 --> 00:14:14,480
networking linux

00:14:14,560 --> 00:14:18,720
onl this is an ocp project it provides

00:14:18,000 --> 00:14:21,839
you

00:14:18,720 --> 00:14:24,880
with a debian based image

00:14:21,839 --> 00:14:26,720
build system

00:14:24,880 --> 00:14:28,399
and platform drivers or a platform

00:14:26,720 --> 00:14:31,440
abstraction

00:14:28,399 --> 00:14:32,160
and it was easier for the den project to

00:14:31,440 --> 00:14:34,639
actually

00:14:32,160 --> 00:14:35,360
start with onl as a base because it's an

00:14:34,639 --> 00:14:38,399
already

00:14:35,360 --> 00:14:42,320
uh available open uh project

00:14:38,399 --> 00:14:45,600
uh out there so beyond that

00:14:42,320 --> 00:14:46,399
it has the latest kernel uh 5.6 and it

00:14:45,600 --> 00:14:50,560
may go

00:14:46,399 --> 00:14:52,720
um to a newer kernel and

00:14:50,560 --> 00:14:54,000
the kernel is because the kernel being

00:14:52,720 --> 00:14:55,600
on a latest kernel is because

00:14:54,000 --> 00:14:57,839
of switch drive drivers coming from

00:14:55,600 --> 00:15:00,240
marvel and melanox has had their

00:14:57,839 --> 00:15:02,399
switched up drivers for a few years now

00:15:00,240 --> 00:15:04,240
uh they are in the upstream kernel any

00:15:02,399 --> 00:15:05,760
linux kernel has them it's called as mlx

00:15:04,240 --> 00:15:08,959
sw

00:15:05,760 --> 00:15:10,800
marvel's drivers are in progress they

00:15:08,959 --> 00:15:13,120
are work in progress right now it's

00:15:10,800 --> 00:15:16,399
closed to be getting into the kernel

00:15:13,120 --> 00:15:18,560
um and linux platform drivers again

00:15:16,399 --> 00:15:19,760
linux has supported platform drivers

00:15:18,560 --> 00:15:23,760
using csfs

00:15:19,760 --> 00:15:26,320
and uh tools that use csfs

00:15:23,760 --> 00:15:27,120
right so the dent project is going to

00:15:26,320 --> 00:15:31,040
support both

00:15:27,120 --> 00:15:31,759
because of its onl roots it's going to

00:15:31,040 --> 00:15:35,839
support

00:15:31,759 --> 00:15:37,360
onlp drivers and because it's linux

00:15:35,839 --> 00:15:39,680
it'll also support linux platform

00:15:37,360 --> 00:15:40,000
drivers and the reference that i've put

00:15:39,680 --> 00:15:41,519
there

00:15:40,000 --> 00:15:43,199
for the linux platform drivers is

00:15:41,519 --> 00:15:45,759
actually from a melanox

00:15:43,199 --> 00:15:47,199
documentation which is public uh

00:15:45,759 --> 00:15:49,120
software and control plane of course

00:15:47,199 --> 00:15:51,600
it's a debian ecosystem lots of

00:15:49,120 --> 00:15:52,639
uh protocol implementations like lldpd

00:15:51,600 --> 00:15:54,240
fr

00:15:52,639 --> 00:15:55,759
if done too for network interface

00:15:54,240 --> 00:15:57,759
configuration

00:15:55,759 --> 00:16:00,959
and additional capabilities is something

00:15:57,759 --> 00:16:00,959
like power over ethernet

00:16:02,320 --> 00:16:07,680
so then to v1 features this is

00:16:05,759 --> 00:16:09,920
um i think it goes to the next slide as

00:16:07,680 --> 00:16:10,480
well uh but this is the base features

00:16:09,920 --> 00:16:13,839
that den

00:16:10,480 --> 00:16:17,199
weave and release will come out with um

00:16:13,839 --> 00:16:18,880
a basic lldp ssh and so on and in terms

00:16:17,199 --> 00:16:22,720
of networking functionality

00:16:18,880 --> 00:16:25,930
uh for edge retail it is

00:16:22,720 --> 00:16:27,600
um l2 bridging vlan aware

00:16:25,930 --> 00:16:31,120
[Music]

00:16:27,600 --> 00:16:33,360
routing ecmp then in terms of protocols

00:16:31,120 --> 00:16:36,880
again there is stp

00:16:33,360 --> 00:16:41,680
bgp bgp is the only routing protocol

00:16:36,880 --> 00:16:41,680
um brp with fr as well

00:16:43,279 --> 00:16:50,240
going further again lag lag lag is very

00:16:46,959 --> 00:16:52,959
uh base feature for any nas right now

00:16:50,240 --> 00:16:55,199
debug tooling ansible playbooks dhcp

00:16:52,959 --> 00:16:58,720
relay dxp server

00:16:55,199 --> 00:16:58,720
ethe tool and so on

00:16:59,519 --> 00:17:02,959
so v2 features v2 features are still

00:17:02,000 --> 00:17:05,280
being discussed

00:17:02,959 --> 00:17:06,319
i'm just gonna i have this here for just

00:17:05,280 --> 00:17:08,880
for records because

00:17:06,319 --> 00:17:10,240
uh the dent uh technical steering

00:17:08,880 --> 00:17:13,199
committee is actually

00:17:10,240 --> 00:17:14,160
trying to come up with this uh list for

00:17:13,199 --> 00:17:17,120
v2

00:17:14,160 --> 00:17:18,559
and the release v1 is supposed to come

00:17:17,120 --> 00:17:20,720
out

00:17:18,559 --> 00:17:22,400
before the end of this year it's almost

00:17:20,720 --> 00:17:25,600
ready

00:17:22,400 --> 00:17:27,919
and out

00:17:25,600 --> 00:17:32,160
anytime soon once the marvel switched up

00:17:27,919 --> 00:17:34,960
driver is accepted

00:17:32,160 --> 00:17:35,760
and thanks to steve noble from the dent

00:17:34,960 --> 00:17:39,679
project

00:17:35,760 --> 00:17:42,080
actually to give me some of these

00:17:39,679 --> 00:17:43,919
detailed slides and features that are

00:17:42,080 --> 00:17:46,960
being worked on

00:17:43,919 --> 00:17:47,600
so um the next few slides actually three

00:17:46,960 --> 00:17:50,640
slides

00:17:47,600 --> 00:17:52,720
i have screenshots about um how how

00:17:50,640 --> 00:17:56,000
different is linux native networking

00:17:52,720 --> 00:17:56,960
what does that mean uh so this is uh the

00:17:56,000 --> 00:17:58,480
first

00:17:56,960 --> 00:18:00,480
one actually just shows you that this is

00:17:58,480 --> 00:18:02,720
a debian system

00:18:00,480 --> 00:18:04,080
and the next two are basically showing

00:18:02,720 --> 00:18:07,200
you how do you see your ports

00:18:04,080 --> 00:18:08,960
it's the simple uh ip link show from the

00:18:07,200 --> 00:18:11,039
ip root route 2

00:18:08,960 --> 00:18:13,440
command suite to look at your

00:18:11,039 --> 00:18:17,200
switchboard details

00:18:13,440 --> 00:18:18,640
okay so basically you can run

00:18:17,200 --> 00:18:20,480
all your networking commands that you

00:18:18,640 --> 00:18:23,520
run on your server

00:18:20,480 --> 00:18:25,679
on your switch um

00:18:23,520 --> 00:18:27,120
again eth tool is everybody's if you're

00:18:25,679 --> 00:18:28,480
familiar with debugging networking

00:18:27,120 --> 00:18:30,960
problems on e

00:18:28,480 --> 00:18:31,600
on servers each tool is the interface to

00:18:30,960 --> 00:18:35,440
the kernel

00:18:31,600 --> 00:18:37,360
for l1 config and uh show and so on

00:18:35,440 --> 00:18:39,120
so this is an example how you can see

00:18:37,360 --> 00:18:41,679
your links states

00:18:39,120 --> 00:18:43,039
and this is all these slides were taken

00:18:41,679 --> 00:18:46,240
on an um

00:18:43,039 --> 00:18:49,200
examples were taken on a dent uh

00:18:46,240 --> 00:18:57,840
spectrum melanox box so you can see the

00:18:49,200 --> 00:19:00,000
driver melanox's mlx sw spectrum

00:18:57,840 --> 00:19:02,640
so devlink i mentioned dublin earlier

00:19:00,000 --> 00:19:06,160
devlink is another netlink api

00:19:02,640 --> 00:19:06,559
which is getting popular on the servers

00:19:06,160 --> 00:19:10,720
too

00:19:06,559 --> 00:19:12,799
or is getting getting used into or

00:19:10,720 --> 00:19:14,799
adapted into different configurations on

00:19:12,799 --> 00:19:18,160
the servers for example

00:19:14,799 --> 00:19:21,360
sriv or nix and so on um

00:19:18,160 --> 00:19:22,480
this is a simple example how devlink is

00:19:21,360 --> 00:19:25,600
an api

00:19:22,480 --> 00:19:26,160
to look at the switch hardware on its

00:19:25,600 --> 00:19:28,480
own

00:19:26,160 --> 00:19:30,720
it's kind of like an eth tool if you're

00:19:28,480 --> 00:19:33,760
very familiar with each tool on linux

00:19:30,720 --> 00:19:35,679
um but it will uh it

00:19:33,760 --> 00:19:38,400
it can work on your network interface

00:19:35,679 --> 00:19:40,480
like you know e081

00:19:38,400 --> 00:19:42,320
and so on the your switchboards are here

00:19:40,480 --> 00:19:46,000
swp 1 swp 2

00:19:42,320 --> 00:19:49,039
but it can also work on directly pci

00:19:46,000 --> 00:19:50,400
uh if your switch a6 ep uses pci

00:19:49,039 --> 00:19:53,440
endpoint it can directly work

00:19:50,400 --> 00:19:55,760
on on that and

00:19:53,440 --> 00:19:55,760
port

00:19:56,480 --> 00:20:02,240
port splitting port splitting

00:19:59,679 --> 00:20:06,559
is also a function of devlink you can do

00:20:02,240 --> 00:20:09,840
port breakouts with weblink

00:20:06,559 --> 00:20:13,440
so what what else does

00:20:09,840 --> 00:20:15,520
um the edge uh

00:20:13,440 --> 00:20:17,280
deployment or what are the possibilities

00:20:15,520 --> 00:20:20,559
of having an open networking nas

00:20:17,280 --> 00:20:21,600
at at the edge uh limits based open

00:20:20,559 --> 00:20:23,200
networking ask

00:20:21,600 --> 00:20:25,039
so basically this slide is just telling

00:20:23,200 --> 00:20:28,400
you that you know we haven't

00:20:25,039 --> 00:20:30,080
had experiments where we run uh for

00:20:28,400 --> 00:20:31,200
example the switched up driver or we

00:20:30,080 --> 00:20:33,440
have experimented

00:20:31,200 --> 00:20:34,320
or have deployments with you know a

00:20:33,440 --> 00:20:37,440
kubernetes

00:20:34,320 --> 00:20:39,600
master running on the um

00:20:37,440 --> 00:20:40,640
on the ma on the switch which can manage

00:20:39,600 --> 00:20:42,320
your edge rack

00:20:40,640 --> 00:20:44,320
right all the other applications on the

00:20:42,320 --> 00:20:46,799
edge rack so things like that

00:20:44,320 --> 00:20:48,080
uh container runtime comes for free

00:20:46,799 --> 00:20:50,480
because debian actually

00:20:48,080 --> 00:20:51,679
has a container runtime docker you can

00:20:50,480 --> 00:20:53,840
install docker

00:20:51,679 --> 00:20:55,120
and so on so there are many

00:20:53,840 --> 00:20:58,880
possibilities

00:20:55,120 --> 00:21:03,520
you can treat your dent switch

00:20:58,880 --> 00:21:06,640
as one of your systems in your edge rack

00:21:03,520 --> 00:21:08,720
and what this means is you have that

00:21:06,640 --> 00:21:10,400
power of uniformity and automation

00:21:08,720 --> 00:21:13,679
provisioning and operations

00:21:10,400 --> 00:21:16,240
across your edge cluster ability to

00:21:13,679 --> 00:21:18,799
extend you know native containerized uh

00:21:16,240 --> 00:21:20,320
applications to your switch to

00:21:18,799 --> 00:21:22,000
you know move the applications

00:21:20,320 --> 00:21:23,919
containerized applications from a data

00:21:22,000 --> 00:21:24,799
center to your edge rack to your edge

00:21:23,919 --> 00:21:27,679
switch

00:21:24,799 --> 00:21:29,600
from the cloud and so on and of course

00:21:27,679 --> 00:21:30,000
you're limited by the cpu that is

00:21:29,600 --> 00:21:32,480
present

00:21:30,000 --> 00:21:33,280
on the dents or present or any of these

00:21:32,480 --> 00:21:37,600
switches

00:21:33,280 --> 00:21:40,640
but you know people run do run apps on

00:21:37,600 --> 00:21:43,760
um on

00:21:40,640 --> 00:21:45,520
your on switch especially again

00:21:43,760 --> 00:21:47,280
monitoring apps you don't need another

00:21:45,520 --> 00:21:49,120
server for your monitoring app you know

00:21:47,280 --> 00:21:50,799
monitoring application you can possibly

00:21:49,120 --> 00:21:51,230
run it on your switch

00:21:50,799 --> 00:21:54,309
um

00:21:51,230 --> 00:21:54,309
[Music]

00:21:55,120 --> 00:22:00,400
so though dent is edge first um

00:21:58,320 --> 00:22:01,520
it the architecture doesn't stop it from

00:22:00,400 --> 00:22:03,440
being edge first

00:22:01,520 --> 00:22:04,720
for example the features that we're

00:22:03,440 --> 00:22:08,240
talking about in the next

00:22:04,720 --> 00:22:10,159
um uh v2 is

00:22:08,240 --> 00:22:13,840
sometime in some cases it's beyond

00:22:10,159 --> 00:22:13,840
beyond uh edge

00:22:14,720 --> 00:22:18,240
where to find dent there is an open

00:22:16,480 --> 00:22:21,360
mailing list there is a weekly call

00:22:18,240 --> 00:22:23,039
in fact the call is uh um and

00:22:21,360 --> 00:22:24,799
actually sorry and i forget that this is

00:22:23,039 --> 00:22:27,919
a recording so it's in

00:22:24,799 --> 00:22:31,039
a few minutes from now but

00:22:27,919 --> 00:22:31,760
the dent project the code is there the

00:22:31,039 --> 00:22:35,919
sequel

00:22:31,760 --> 00:22:39,760
from amazon and the other vendors

00:22:35,919 --> 00:22:43,039
and it is going to be public once

00:22:39,760 --> 00:22:45,600
when vendors released which should be in

00:22:43,039 --> 00:22:47,919
in about time actually in a few weeks or

00:22:45,600 --> 00:22:47,919
months

00:22:48,240 --> 00:22:54,480
um yeah this is what that talks about

00:22:52,400 --> 00:22:56,480
and some references of all the projects

00:22:54,480 --> 00:22:58,720
other projects that um

00:22:56,480 --> 00:23:01,120
dent is using the switched up drivers

00:22:58,720 --> 00:23:09,840
and so on

00:23:01,120 --> 00:23:09,840
that's that concludes my talk

00:23:19,840 --> 00:23:23,840
hey um hey

00:23:26,960 --> 00:23:31,039
sorry sorry

00:23:34,840 --> 00:23:37,840
sorry

00:23:38,559 --> 00:23:51,840
sorry guys

00:23:54,080 --> 00:24:01,200
hello sorry about that um feedback

00:23:57,679 --> 00:24:03,679
so i do see a few questions um

00:24:01,200 --> 00:24:05,200
i've tried to respond a few respond to a

00:24:03,679 --> 00:24:07,360
few so i'm just going to

00:24:05,200 --> 00:24:09,360
read them here is that also hardware

00:24:07,360 --> 00:24:13,440
activated at the asics

00:24:09,360 --> 00:24:17,200
yes it's um not in the dent project but

00:24:13,440 --> 00:24:19,760
many implementations today do have

00:24:17,200 --> 00:24:21,039
uh nast offloaded through linux

00:24:19,760 --> 00:24:23,039
basically linux knife

00:24:21,039 --> 00:24:24,720
offloaded to switch asic uh actually

00:24:23,039 --> 00:24:25,360
since cumulus linux reference has come

00:24:24,720 --> 00:24:28,400
up there

00:24:25,360 --> 00:24:32,320
cumulus linux does offload kernel uh

00:24:28,400 --> 00:24:35,520
nat to asic

00:24:32,320 --> 00:24:36,000
um and again of course if dent had to

00:24:35,520 --> 00:24:38,720
support

00:24:36,000 --> 00:24:39,600
uh nat to switch asic it needs the

00:24:38,720 --> 00:24:42,080
switched

00:24:39,600 --> 00:24:44,320
dev drivers to support nas and as far as

00:24:42,080 --> 00:24:48,080
i know there is no switched up driver

00:24:44,320 --> 00:24:49,760
supporting an act today

00:24:48,080 --> 00:24:51,360
the other question is does dent

00:24:49,760 --> 00:24:55,520
implement open flow

00:24:51,360 --> 00:24:58,320
it does not implement open flow today

00:24:55,520 --> 00:25:01,279
um for the web release or it's not in

00:24:58,320 --> 00:25:02,960
the pipeline but there is no reason

00:25:01,279 --> 00:25:04,880
for it to not implement or

00:25:02,960 --> 00:25:08,320
architecturally there is no limitation

00:25:04,880 --> 00:25:09,840
as long as uh one of the ways

00:25:08,320 --> 00:25:12,159
openflow can be implemented is an

00:25:09,840 --> 00:25:14,400
openflow app

00:25:12,159 --> 00:25:16,320
having to translate into the kernel and

00:25:14,400 --> 00:25:18,640
kernel to switch that driver so that's

00:25:16,320 --> 00:25:20,960
another way or most of the open flow

00:25:18,640 --> 00:25:24,720
implementations like open v-switch

00:25:20,960 --> 00:25:28,400
could also run on the switch and

00:25:24,720 --> 00:25:28,880
as long as the open switch as you guys

00:25:28,400 --> 00:25:31,679
know

00:25:28,880 --> 00:25:32,400
most of it uh on the servers today uses

00:25:31,679 --> 00:25:36,080
the tc

00:25:32,400 --> 00:25:37,679
offload rule off load so it can

00:25:36,080 --> 00:25:40,240
um and the switch shift drivers do

00:25:37,679 --> 00:25:43,679
support some sort of pc offload and they

00:25:40,240 --> 00:25:47,520
can be extended to support opencl

00:25:43,679 --> 00:25:47,520
but not currently planned

00:25:49,279 --> 00:25:54,000
what monitoring features are supported

00:25:51,279 --> 00:25:57,039
in dent like prometheus endpoint

00:25:54,000 --> 00:25:58,960
um there is no

00:25:57,039 --> 00:26:00,960
i mean the dent project is not putting

00:25:58,960 --> 00:26:02,960
out any monitoring agent

00:26:00,960 --> 00:26:04,480
right now but there is no reason uh

00:26:02,960 --> 00:26:07,919
primitive endpoint

00:26:04,480 --> 00:26:11,200
cannot run right it's it's just a open

00:26:07,919 --> 00:26:12,720
linux box and a

00:26:11,200 --> 00:26:14,960
similar example on cumulus there are

00:26:12,720 --> 00:26:18,320
many people who do that already

00:26:14,960 --> 00:26:18,320
it's it's possible

00:26:22,320 --> 00:26:25,200
i think um

00:26:25,840 --> 00:26:28,960
that's all the questions

00:26:30,080 --> 00:26:33,200
so the kernel version again i did

00:26:32,000 --> 00:26:36,640
respond on uh

00:26:33,200 --> 00:26:39,600
chat it's um it's 5.6 right now

00:26:36,640 --> 00:26:41,600
there is a plan to move to fire date but

00:26:39,600 --> 00:26:42,720
it could move to a long term stable

00:26:41,600 --> 00:26:45,600
kernel once

00:26:42,720 --> 00:26:45,600
that is announced

00:26:49,039 --> 00:26:57,120
and any other questions

00:26:53,760 --> 00:26:59,120
missed any and of course i

00:26:57,120 --> 00:27:01,360
did to respond to the question on how is

00:26:59,120 --> 00:27:04,080
uh dent and cumulative clinics different

00:27:01,360 --> 00:27:06,159
tumors likes is again based on the same

00:27:04,080 --> 00:27:07,200
principles your apps just talk to the

00:27:06,159 --> 00:27:10,240
linux api

00:27:07,200 --> 00:27:12,559
and cumulus does the magic

00:27:10,240 --> 00:27:13,520
and the magic that qmis does is it also

00:27:12,559 --> 00:27:17,919
supports user space

00:27:13,520 --> 00:27:19,520
sdks translates from the kernel to the

00:27:17,919 --> 00:27:23,840
sdk

00:27:19,520 --> 00:27:28,799
and dent is based on an open source

00:27:23,840 --> 00:27:30,640
driver for the switch asic um

00:27:28,799 --> 00:27:31,840
yeah because it's an open source project

00:27:30,640 --> 00:27:35,679
and it does not

00:27:31,840 --> 00:27:37,360
have the people closed security

00:27:35,679 --> 00:27:38,799
but in that context you have to know

00:27:37,360 --> 00:27:42,480
realize that kim was started

00:27:38,799 --> 00:27:45,200
way long ago where only sdks or closed

00:27:42,480 --> 00:27:45,200
source destitute

00:27:46,480 --> 00:27:52,799
was there and even today i think sdks

00:27:49,679 --> 00:27:54,159
do for any switch asic are critical and

00:27:52,799 --> 00:27:55,600
then all vendors support them and they

00:27:54,159 --> 00:28:03,840
are usually more

00:27:55,600 --> 00:28:03,840
feature rich

00:28:04,799 --> 00:28:08,799
with all the questions for now i can

00:28:06,960 --> 00:28:17,840
wait in for

00:28:08,799 --> 00:28:17,840
new questions to come in

00:29:09,600 --> 00:29:16,080
there is a weekly call to dent uh it's

00:29:13,039 --> 00:29:20,080
on wednesday 7 a.m pst

00:29:16,080 --> 00:29:24,840
um i think the information is on the

00:29:20,080 --> 00:29:27,840
dent project if anybody wants to join in

00:29:24,840 --> 00:29:27,840
listening

00:29:29,919 --> 00:29:41,840
thanks everybody

00:30:11,520 --> 00:30:13,600

YouTube URL: https://www.youtube.com/watch?v=mPz6Ypn1ugw


