Title: Automating the Journey to Cloud Native Intelligent Networks - Denis Murphy, IBM Hybrid Cloud
Publication date: 2020-11-24
Playlist: Open Networking & Edge Summit 2020
Description: 
	Automating the Journey to Cloud Native Intelligent Networks - Denis Murphy, IBM Hybrid Cloud
Captions: 
	00:00:00,719 --> 00:00:05,040
good afternoon my name is dennis murphy

00:00:03,040 --> 00:00:06,879
um i work for ibm and software group

00:00:05,040 --> 00:00:08,880
and today i'm going to talk to you about

00:00:06,879 --> 00:00:13,200
automating the journey to

00:00:08,880 --> 00:00:13,200
cloud native um intelligent networks

00:00:13,280 --> 00:00:18,560
so as we look um

00:00:16,880 --> 00:00:20,560
at the the modern telecom network

00:00:18,560 --> 00:00:21,359
platform the cloud has become integral

00:00:20,560 --> 00:00:23,039
to

00:00:21,359 --> 00:00:25,199
to every telco business transformation

00:00:23,039 --> 00:00:26,640
strategy you know as the world of

00:00:25,199 --> 00:00:29,760
network modernization

00:00:26,640 --> 00:00:31,439
evolves the growing focus is on open

00:00:29,760 --> 00:00:32,800
hybrid cloud you know compliant

00:00:31,439 --> 00:00:34,399
architectures

00:00:32,800 --> 00:00:36,320
so that services can be deployed as

00:00:34,399 --> 00:00:37,200
needed at the right hybrid location be

00:00:36,320 --> 00:00:39,840
it public or

00:00:37,200 --> 00:00:41,600
private cloud on the right-hand side and

00:00:39,840 --> 00:00:43,360
at the right network location across

00:00:41,600 --> 00:00:45,440
across this picture if you like

00:00:43,360 --> 00:00:47,520
you know and the move to network

00:00:45,440 --> 00:00:48,960
codification means that

00:00:47,520 --> 00:00:51,440
network functions can run in the same

00:00:48,960 --> 00:00:53,520
cloud as it and other workloads

00:00:51,440 --> 00:00:54,559
and this also means that workloads can

00:00:53,520 --> 00:00:55,840
be

00:00:54,559 --> 00:00:57,600
automatically provisioned to run

00:00:55,840 --> 00:00:58,000
wherever they are best suited either

00:00:57,600 --> 00:01:00,559
near

00:00:58,000 --> 00:01:01,840
the the end user or you know so-called

00:01:00,559 --> 00:01:04,239
edge computing

00:01:01,840 --> 00:01:06,000
um or in the core data centers if you

00:01:04,239 --> 00:01:09,680
like

00:01:06,000 --> 00:01:11,200
and you know this evolution

00:01:09,680 --> 00:01:12,880
offers the promise of greatly reduced

00:01:11,200 --> 00:01:14,720
cost of operation

00:01:12,880 --> 00:01:16,400
as well as you know a new level of

00:01:14,720 --> 00:01:17,680
flexibility and agility for for the

00:01:16,400 --> 00:01:20,240
telcos

00:01:17,680 --> 00:01:22,159
allowing them to innovate and deploy new

00:01:20,240 --> 00:01:23,520
services quickly

00:01:22,159 --> 00:01:25,520
and as cheaply if you like as the

00:01:23,520 --> 00:01:26,080
competition and this is important

00:01:25,520 --> 00:01:29,360
because

00:01:26,080 --> 00:01:31,119
you know there's an increasing threat of

00:01:29,360 --> 00:01:32,720
increased competition right and this is

00:01:31,119 --> 00:01:33,840
lowering both revenue and operating

00:01:32,720 --> 00:01:36,640
margins

00:01:33,840 --> 00:01:38,240
at a time when all of us consumers and

00:01:36,640 --> 00:01:39,439
our data usage is going up right

00:01:38,240 --> 00:01:41,439
particularly for

00:01:39,439 --> 00:01:43,840
for video trafficking video traffic

00:01:41,439 --> 00:01:46,079
which is you know it's exploding

00:01:43,840 --> 00:01:48,320
so the telcos and the csps need to

00:01:46,079 --> 00:01:50,240
quickly and efficiently scale

00:01:48,320 --> 00:01:51,520
the network capacity to meet these

00:01:50,240 --> 00:01:54,560
demands in

00:01:51,520 --> 00:01:56,399
a cost effective way and you know we can

00:01:54,560 --> 00:01:57,759
no longer rely on traditional services

00:01:56,399 --> 00:02:00,399
to generate the revenue

00:01:57,759 --> 00:02:01,360
so this is why we need a modern network

00:02:00,399 --> 00:02:03,360
that will allow

00:02:01,360 --> 00:02:05,680
this communication service providers to

00:02:03,360 --> 00:02:08,560
to rapidly develop and deploy these new

00:02:05,680 --> 00:02:10,000
revenue generating services um and

00:02:08,560 --> 00:02:10,720
that's that's all about modernizing the

00:02:10,000 --> 00:02:12,640
network

00:02:10,720 --> 00:02:15,120
by abstracting those legacy network

00:02:12,640 --> 00:02:17,040
appliances to a network cloud

00:02:15,120 --> 00:02:19,280
and this is all happening right now

00:02:17,040 --> 00:02:20,800
simultaneously with 5g the rollout of 5g

00:02:19,280 --> 00:02:23,920
deployments

00:02:20,800 --> 00:02:25,280
and to fully leverage the benefits um of

00:02:23,920 --> 00:02:26,800
a modern network

00:02:25,280 --> 00:02:29,840
there must be a network and an

00:02:26,800 --> 00:02:32,239
automation strategy that is underpinned

00:02:29,840 --> 00:02:33,040
by artificial intelligence and this is

00:02:32,239 --> 00:02:35,840
what we'll talk about

00:02:33,040 --> 00:02:36,959
in the coming slides you know complex or

00:02:35,840 --> 00:02:40,959
cloud networking

00:02:36,959 --> 00:02:42,720
um and services for large scale

00:02:40,959 --> 00:02:44,160
cloud native deployments are complex

00:02:42,720 --> 00:02:45,599
things to manage

00:02:44,160 --> 00:02:47,519
you know but there's there's cloud

00:02:45,599 --> 00:02:49,519
complexity right services need to run

00:02:47,519 --> 00:02:50,720
across multiple age multiple public

00:02:49,519 --> 00:02:52,720
multiple private clouds that are

00:02:50,720 --> 00:02:54,560
distributed across that landscape

00:02:52,720 --> 00:02:56,160
the networking complexity right so the

00:02:54,560 --> 00:02:57,519
networking between these clouds and

00:02:56,160 --> 00:02:58,480
internet working within the cloud as

00:02:57,519 --> 00:02:59,920
well of course

00:02:58,480 --> 00:03:01,599
but all the service components need to

00:02:59,920 --> 00:03:04,400
be designed and maintained

00:03:01,599 --> 00:03:04,640
across the network dynamic services you

00:03:04,400 --> 00:03:06,480
know

00:03:04,640 --> 00:03:09,280
the services are much more dynamic than

00:03:06,480 --> 00:03:11,200
before um you know location services

00:03:09,280 --> 00:03:12,480
networks can be added can be deleted

00:03:11,200 --> 00:03:15,040
change deleted on

00:03:12,480 --> 00:03:16,640
on the fly in an autonomous fashion and

00:03:15,040 --> 00:03:18,239
this leads to you know operational

00:03:16,640 --> 00:03:20,480
complexity right this

00:03:18,239 --> 00:03:22,159
is you know there's more effort up front

00:03:20,480 --> 00:03:23,599
to design and test

00:03:22,159 --> 00:03:26,000
and it's critically important that we do

00:03:23,599 --> 00:03:27,760
upfront testing and design of this um

00:03:26,000 --> 00:03:29,519
in particular for day two operation use

00:03:27,760 --> 00:03:30,080
cases you know once services are applied

00:03:29,519 --> 00:03:31,280
in

00:03:30,080 --> 00:03:32,959
into production and you know there's

00:03:31,280 --> 00:03:34,400
increasing complexity and this is

00:03:32,959 --> 00:03:36,239
heavily increasing as well

00:03:34,400 --> 00:03:38,319
so we need to figure all of that out and

00:03:36,239 --> 00:03:40,799
you know traditional tools

00:03:38,319 --> 00:03:42,480
um you know they're more manual based

00:03:40,799 --> 00:03:44,319
and they require static programming

00:03:42,480 --> 00:03:45,760
and they're not really suited to this

00:03:44,319 --> 00:03:46,879
this new modern telco environment to

00:03:45,760 --> 00:03:48,159
this new environment that we're looking

00:03:46,879 --> 00:03:50,159
at

00:03:48,159 --> 00:03:51,920
complex dependencies you know they exist

00:03:50,159 --> 00:03:52,799
across multiple technology layers you

00:03:51,920 --> 00:03:55,519
know if you look at the

00:03:52,799 --> 00:03:56,159
the right up and down the disaggregated

00:03:55,519 --> 00:03:58,799
stack

00:03:56,159 --> 00:04:00,879
where we now have open hardware and open

00:03:58,799 --> 00:04:02,159
controllers open the cards etc

00:04:00,879 --> 00:04:04,560
right up to the network functions from

00:04:02,159 --> 00:04:07,599
multiple and different vendors

00:04:04,560 --> 00:04:08,720
um up to stack the design of the network

00:04:07,599 --> 00:04:10,239
services themselves

00:04:08,720 --> 00:04:11,519
and that logical network design and

00:04:10,239 --> 00:04:12,319
stitching across those sites like i

00:04:11,519 --> 00:04:14,560
mentioned

00:04:12,319 --> 00:04:16,639
so these complex dependencies across all

00:04:14,560 --> 00:04:18,000
of these multiple technology layers

00:04:16,639 --> 00:04:19,680
you know analogy would be like the

00:04:18,000 --> 00:04:22,000
enterprise edge cloud id

00:04:19,680 --> 00:04:23,600
and the networking workloads they must

00:04:22,000 --> 00:04:24,560
cooperate across these independent

00:04:23,600 --> 00:04:26,880
layers

00:04:24,560 --> 00:04:28,080
and connected locations to deliver that

00:04:26,880 --> 00:04:30,080
end-to-end service

00:04:28,080 --> 00:04:31,759
you know each layer here is designed and

00:04:30,080 --> 00:04:33,199
managed independently of the others

00:04:31,759 --> 00:04:35,680
and delivering a service if you like to

00:04:33,199 --> 00:04:37,280
the layer above you know for example an

00:04:35,680 --> 00:04:39,759
it application owner might be designing

00:04:37,280 --> 00:04:41,919
a video surveillance application

00:04:39,759 --> 00:04:44,000
and you know they need low level their

00:04:41,919 --> 00:04:45,520
two-layer networking details

00:04:44,000 --> 00:04:47,199
that would be required to deliver that

00:04:45,520 --> 00:04:48,880
application traffic but that's

00:04:47,199 --> 00:04:50,240
abstracted from that it application

00:04:48,880 --> 00:04:51,040
owner who will work with the network

00:04:50,240 --> 00:04:52,960
engineer

00:04:51,040 --> 00:04:54,720
you know who can design the required

00:04:52,960 --> 00:04:56,560
network design and you know use his

00:04:54,720 --> 00:04:58,240
orchestration design tooling to design

00:04:56,560 --> 00:04:59,280
out the networking that that it service

00:04:58,240 --> 00:05:00,720
requires

00:04:59,280 --> 00:05:02,960
you know so these logical network

00:05:00,720 --> 00:05:04,479
services in our dynamic and like we said

00:05:02,960 --> 00:05:05,440
that can be added and moved and changed

00:05:04,479 --> 00:05:06,720
locations

00:05:05,440 --> 00:05:08,639
you know for example if that video

00:05:06,720 --> 00:05:12,000
surveillance application was sitting on

00:05:08,639 --> 00:05:13,919
a pod over here and some ai-infused

00:05:12,000 --> 00:05:15,280
monitoring suggested that you know move

00:05:13,919 --> 00:05:17,600
it to another part over here as we know

00:05:15,280 --> 00:05:19,440
pods go up and down quite frequently

00:05:17,600 --> 00:05:20,960
that impact and the change of that it

00:05:19,440 --> 00:05:22,320
application from here to there has an

00:05:20,960 --> 00:05:23,840
impact on all the networking services

00:05:22,320 --> 00:05:24,560
below that all of the layers up and down

00:05:23,840 --> 00:05:25,919
the stack

00:05:24,560 --> 00:05:27,520
and they need to be managed that ripple

00:05:25,919 --> 00:05:28,160
effect across the network needs to be

00:05:27,520 --> 00:05:31,600
managed

00:05:28,160 --> 00:05:32,960
um accordingly and if we look at this

00:05:31,600 --> 00:05:34,479
you know from a top-down point of view

00:05:32,960 --> 00:05:35,680
like we said on the network service

00:05:34,479 --> 00:05:38,880
point of view

00:05:35,680 --> 00:05:40,400
you know what what what

00:05:38,880 --> 00:05:41,919
questions we need to answer what where

00:05:40,400 --> 00:05:42,560
do we put which version of this network

00:05:41,919 --> 00:05:44,960
function

00:05:42,560 --> 00:05:46,479
what existing network functions exist

00:05:44,960 --> 00:05:48,400
that we need to bind to

00:05:46,479 --> 00:05:49,520
um when should a network function move

00:05:48,400 --> 00:05:51,440
from one site you know

00:05:49,520 --> 00:05:53,840
along this this slice here to another

00:05:51,440 --> 00:05:55,280
site so that network service changes all

00:05:53,840 --> 00:05:58,000
of these changes

00:05:55,280 --> 00:05:58,560
cause a ripple effect across all the

00:05:58,000 --> 00:05:59,840
layers

00:05:58,560 --> 00:06:01,680
across multiple different cloud

00:05:59,840 --> 00:06:03,039
locations you know and these changes

00:06:01,680 --> 00:06:05,039
need to be automated to cope

00:06:03,039 --> 00:06:06,160
with new levels of operational

00:06:05,039 --> 00:06:07,840
complexity

00:06:06,160 --> 00:06:09,600
you know an example here with this this

00:06:07,840 --> 00:06:10,319
slide would be you know a 5g network

00:06:09,600 --> 00:06:11,840
service

00:06:10,319 --> 00:06:13,440
you know can share and create dedicated

00:06:11,840 --> 00:06:15,199
network functions across many network

00:06:13,440 --> 00:06:19,680
cloud locations

00:06:15,199 --> 00:06:21,120
we can also look at this then from a um

00:06:19,680 --> 00:06:22,400
you know a bottoms up point of view if

00:06:21,120 --> 00:06:23,280
you like from a hardware tuning point of

00:06:22,400 --> 00:06:26,720
view

00:06:23,280 --> 00:06:28,240
and you know we we can look at this from

00:06:26,720 --> 00:06:30,960
the hardware up through the

00:06:28,240 --> 00:06:31,680
the sdn controllers up through the the

00:06:30,960 --> 00:06:32,960
spine

00:06:31,680 --> 00:06:34,960
up to the underlay overlay from that

00:06:32,960 --> 00:06:36,560
point of view you know gone are the hard

00:06:34,960 --> 00:06:38,160
distinctions from the past right between

00:06:36,560 --> 00:06:39,759
infrastructure

00:06:38,160 --> 00:06:41,199
between infrastructure network functions

00:06:39,759 --> 00:06:42,960
and the end-to-end services

00:06:41,199 --> 00:06:45,039
these are now replaced by a flexible

00:06:42,960 --> 00:06:46,960
hierarchy of interconnected software

00:06:45,039 --> 00:06:48,960
services up and down the stack

00:06:46,960 --> 00:06:50,720
you know virtual network functions are

00:06:48,960 --> 00:06:51,599
cloud native natural functions vms and

00:06:50,720 --> 00:06:53,280
containers

00:06:51,599 --> 00:06:54,880
but all these things now require

00:06:53,280 --> 00:06:56,560
specific hardware and tuning

00:06:54,880 --> 00:06:58,080
you know things like net parameters

00:06:56,560 --> 00:06:59,919
things like hypervisor

00:06:58,080 --> 00:07:01,919
parameters things like container

00:06:59,919 --> 00:07:05,039
networking plugins

00:07:01,919 --> 00:07:06,720
you know etc etc so all of these the the

00:07:05,039 --> 00:07:07,759
design of the network service and the

00:07:06,720 --> 00:07:09,360
underlying you know the network

00:07:07,759 --> 00:07:09,919
functions are composing up that network

00:07:09,360 --> 00:07:11,680
service

00:07:09,919 --> 00:07:13,120
put requirements on those layers below

00:07:11,680 --> 00:07:14,800
like we said and

00:07:13,120 --> 00:07:16,560
tuning up the specific hardware and

00:07:14,800 --> 00:07:17,280
tuning of the specific controllers etc

00:07:16,560 --> 00:07:18,560
etc

00:07:17,280 --> 00:07:20,800
which is all important to take into

00:07:18,560 --> 00:07:22,000
consideration as we do our our network

00:07:20,800 --> 00:07:25,120
design

00:07:22,000 --> 00:07:26,560
so um ultimately all of this is about

00:07:25,120 --> 00:07:29,280
the move to putting software

00:07:26,560 --> 00:07:29,680
at the center of the network now the way

00:07:29,280 --> 00:07:31,680
to

00:07:29,680 --> 00:07:33,680
really achieve both the innovation gains

00:07:31,680 --> 00:07:35,440
promised by um cloud network

00:07:33,680 --> 00:07:38,080
qualification and 5g

00:07:35,440 --> 00:07:39,280
and to maintain operational costs by is

00:07:38,080 --> 00:07:42,000
by adopting

00:07:39,280 --> 00:07:42,479
a cloud software culture and this starts

00:07:42,000 --> 00:07:44,000
with

00:07:42,479 --> 00:07:46,080
software management approaches and

00:07:44,000 --> 00:07:47,440
adapting them you know adopting these

00:07:46,080 --> 00:07:49,199
software management approaches and

00:07:47,440 --> 00:07:50,960
adapting them for the telco

00:07:49,199 --> 00:07:52,560
so let's expand on this in a little bit

00:07:50,960 --> 00:07:54,560
so on the left hand side here you know

00:07:52,560 --> 00:07:56,400
we talk about a standardized life cycle

00:07:54,560 --> 00:07:59,120
you know a standardized lifecycle model

00:07:56,400 --> 00:08:01,199
and api allows dynamic assemblies of

00:07:59,120 --> 00:08:03,360
network functions and applications

00:08:01,199 --> 00:08:04,720
this lends itself to lower complexity

00:08:03,360 --> 00:08:06,479
you know everything abiding by the

00:08:04,720 --> 00:08:08,080
standardized lifecycle model allows you

00:08:06,479 --> 00:08:08,800
to layer huge amounts of automation on

00:08:08,080 --> 00:08:10,400
top

00:08:08,800 --> 00:08:12,479
you know all network software function

00:08:10,400 --> 00:08:14,720
components implement these

00:08:12,479 --> 00:08:15,759
standard lifecycle models and apis then

00:08:14,720 --> 00:08:18,879
the engine itself

00:08:15,759 --> 00:08:20,560
can figure out um the lifecycle tasks in

00:08:18,879 --> 00:08:21,440
any complex service required to keep the

00:08:20,560 --> 00:08:23,759
inserts

00:08:21,440 --> 00:08:25,280
to keep the entire service in an active

00:08:23,759 --> 00:08:26,879
mode or an active state

00:08:25,280 --> 00:08:28,800
and doing this without any upfront

00:08:26,879 --> 00:08:30,400
programming you know it's all about

00:08:28,800 --> 00:08:32,159
making everything look the same all the

00:08:30,400 --> 00:08:33,519
components must implement each standard

00:08:32,159 --> 00:08:35,360
lifecycle transition

00:08:33,519 --> 00:08:36,800
then everything looks the same so it's

00:08:35,360 --> 00:08:40,640
really about modeling

00:08:36,800 --> 00:08:42,080
dependencies and relationships and

00:08:40,640 --> 00:08:43,599
you know it's not about workflows or

00:08:42,080 --> 00:08:45,040
upfront workflows that try to anticipate

00:08:43,599 --> 00:08:46,800
every possible state

00:08:45,040 --> 00:08:48,560
and then we have the concept in in cloud

00:08:46,800 --> 00:08:50,240
native here of this intent engine so

00:08:48,560 --> 00:08:51,600
this declarative based approach

00:08:50,240 --> 00:08:53,040
so the intent that you can use these

00:08:51,600 --> 00:08:54,000
relationships then these dependencies

00:08:53,040 --> 00:08:55,360
and relationships

00:08:54,000 --> 00:08:57,040
to figure out how to get into the

00:08:55,360 --> 00:08:58,000
desired state this is my design that's

00:08:57,040 --> 00:08:59,360
where i need to be

00:08:58,000 --> 00:09:01,360
and we can automatically figure out how

00:08:59,360 --> 00:09:03,600
to get there you know

00:09:01,360 --> 00:09:04,959
it calculates this intent this engine is

00:09:03,600 --> 00:09:06,560
intent based and what we mean by that is

00:09:04,959 --> 00:09:08,880
that it calculates

00:09:06,560 --> 00:09:10,000
and executes the minimum set of required

00:09:08,880 --> 00:09:12,000
actions

00:09:10,000 --> 00:09:13,440
considering the actual services topology

00:09:12,000 --> 00:09:15,760
at this moment in time

00:09:13,440 --> 00:09:17,519
to reach the desired state of the design

00:09:15,760 --> 00:09:18,480
to be state for the target service

00:09:17,519 --> 00:09:20,240
instance

00:09:18,480 --> 00:09:22,080
and this in this way we can hide all the

00:09:20,240 --> 00:09:24,399
underlying service complexity so that

00:09:22,080 --> 00:09:26,160
you the service designer can focus on

00:09:24,399 --> 00:09:27,279
designing your service and what that

00:09:26,160 --> 00:09:29,440
service should deliver to your end

00:09:27,279 --> 00:09:32,160
customer to us as consumers

00:09:29,440 --> 00:09:33,839
um and not how it should be deployed or

00:09:32,160 --> 00:09:34,399
implemented at the detail infrastructure

00:09:33,839 --> 00:09:36,399
level

00:09:34,399 --> 00:09:37,600
like we mentioned earlier around those

00:09:36,399 --> 00:09:39,200
the different layers of the stack you

00:09:37,600 --> 00:09:41,040
know these network functions put

00:09:39,200 --> 00:09:43,120
dependencies on different layers of the

00:09:41,040 --> 00:09:44,480
infrastructure

00:09:43,120 --> 00:09:46,720
and then the engine itself you know

00:09:44,480 --> 00:09:48,320
we've got a set of opinionated patterns

00:09:46,720 --> 00:09:50,320
that can support the healing of broken

00:09:48,320 --> 00:09:53,920
services and resources etc

00:09:50,320 --> 00:09:55,519
and all of this is done you know um

00:09:53,920 --> 00:09:57,519
you know things like you know it's done

00:09:55,519 --> 00:09:58,640
in a process execution plans that can

00:09:57,519 --> 00:10:00,640
resolve

00:09:58,640 --> 00:10:01,760
uh placement strategies can resolve any

00:10:00,640 --> 00:10:04,320
shared resources

00:10:01,760 --> 00:10:06,079
uh things like that the the analogy that

00:10:04,320 --> 00:10:07,680
can be used here is similar to a sat nav

00:10:06,079 --> 00:10:08,560
system where a user programs their

00:10:07,680 --> 00:10:10,160
destination

00:10:08,560 --> 00:10:12,079
and the sat nav figures out the best

00:10:10,160 --> 00:10:13,200
route to get there depending on if it's

00:10:12,079 --> 00:10:14,320
crashed and it can re-route you

00:10:13,200 --> 00:10:15,680
automatically you know if you're going

00:10:14,320 --> 00:10:17,600
from park to dublin

00:10:15,680 --> 00:10:18,880
and there's road blocks or whatever we

00:10:17,600 --> 00:10:20,480
figure out the next possible

00:10:18,880 --> 00:10:22,240
best possible route to get you to your

00:10:20,480 --> 00:10:23,920
destination you know in the same way

00:10:22,240 --> 00:10:26,160
this intent-based solution can be loaded

00:10:23,920 --> 00:10:28,240
with a set of simple service models

00:10:26,160 --> 00:10:30,160
and all the operational processes then

00:10:28,240 --> 00:10:33,519
required to keep that service optimized

00:10:30,160 --> 00:10:33,920
are in place and then when we look at

00:10:33,519 --> 00:10:36,560
the

00:10:33,920 --> 00:10:38,160
cloud-based tool chain you know to scale

00:10:36,560 --> 00:10:40,160
any cloud-based networking

00:10:38,160 --> 00:10:42,079
program you know a unified operations

00:10:40,160 --> 00:10:43,680
and network engineering model

00:10:42,079 --> 00:10:45,200
is combined with a set of automation

00:10:43,680 --> 00:10:46,720
tools that can simplify

00:10:45,200 --> 00:10:48,320
and automate the complexities of the

00:10:46,720 --> 00:10:50,079
end-to-end life cycle

00:10:48,320 --> 00:10:52,160
of the network functions themselves and

00:10:50,079 --> 00:10:54,560
also the network service

00:10:52,160 --> 00:10:55,920
um you know you need to look for a

00:10:54,560 --> 00:10:57,360
solution that's got inbuilt service

00:10:55,920 --> 00:10:58,880
behavior testing tools

00:10:57,360 --> 00:11:00,959
you know solutions that allow you to be

00:10:58,880 --> 00:11:01,680
to fully test the network function the

00:11:00,959 --> 00:11:03,920
onboarding

00:11:01,680 --> 00:11:05,360
cycle life cycle fully test the natural

00:11:03,920 --> 00:11:06,480
function to see that it does it what it

00:11:05,360 --> 00:11:08,800
says in the tin

00:11:06,480 --> 00:11:10,720
and do all this in an automated way now

00:11:08,800 --> 00:11:12,320
traditionally these tests were very time

00:11:10,720 --> 00:11:13,200
consuming with programming having to

00:11:12,320 --> 00:11:14,880
reprogram

00:11:13,200 --> 00:11:16,399
and run all the tests again for say a

00:11:14,880 --> 00:11:16,880
new version of a network function came

00:11:16,399 --> 00:11:19,440
from

00:11:16,880 --> 00:11:20,800
from the third party but you know in a

00:11:19,440 --> 00:11:22,240
cloud native fashion in

00:11:20,800 --> 00:11:24,000
a cloud operating model you know an

00:11:22,240 --> 00:11:25,760
automated test framework allows you to

00:11:24,000 --> 00:11:27,760
spin up entire dev environments

00:11:25,760 --> 00:11:29,120
this is taking advantage of the cloud

00:11:27,760 --> 00:11:31,360
you know install and activate all the

00:11:29,120 --> 00:11:33,519
network functions and network services

00:11:31,360 --> 00:11:35,200
on those environments add additional

00:11:33,519 --> 00:11:37,519
test resources things like

00:11:35,200 --> 00:11:39,279
traffic generators or metric generators

00:11:37,519 --> 00:11:40,800
or you know and run the servers through

00:11:39,279 --> 00:11:42,480
its entire life cycle

00:11:40,800 --> 00:11:44,160
and these tests then can be part of an

00:11:42,480 --> 00:11:46,160
automatic you know um continuous

00:11:44,160 --> 00:11:47,519
integration continuous delivery pipeline

00:11:46,160 --> 00:11:49,200
you know part of the ready for service

00:11:47,519 --> 00:11:50,959
test if you like or the old the whole

00:11:49,200 --> 00:11:52,639
process of upgrading to a

00:11:50,959 --> 00:11:54,079
new version of a network service or

00:11:52,639 --> 00:11:54,880
patching in a new version of a network

00:11:54,079 --> 00:11:56,480
function

00:11:54,880 --> 00:11:58,560
you know kicks off that automatic test

00:11:56,480 --> 00:12:00,399
it runs through the entire life cycle

00:11:58,560 --> 00:12:02,160
and check the box and then you know

00:12:00,399 --> 00:12:02,639
performance is all good security is all

00:12:02,160 --> 00:12:04,240
good

00:12:02,639 --> 00:12:05,600
you can then automatically you know

00:12:04,240 --> 00:12:06,320
de-install the service from the test

00:12:05,600 --> 00:12:07,360
environment

00:12:06,320 --> 00:12:09,040
and push it to the production

00:12:07,360 --> 00:12:10,320
environment so that's what we mean by

00:12:09,040 --> 00:12:11,839
applying a lot of these cloud native

00:12:10,320 --> 00:12:14,160
techniques that we have learned

00:12:11,839 --> 00:12:15,680
from the i.t world and applying machine

00:12:14,160 --> 00:12:16,480
enabled automation here with the intent

00:12:15,680 --> 00:12:17,760
engine

00:12:16,480 --> 00:12:19,760
that you know it's all about these

00:12:17,760 --> 00:12:21,680
opinionated um patterns that

00:12:19,760 --> 00:12:23,200
model dependencies and relationships and

00:12:21,680 --> 00:12:25,040
not trying to figure out everything

00:12:23,200 --> 00:12:27,680
up front let the machine take over and

00:12:25,040 --> 00:12:30,800
figure out the best possible patch

00:12:27,680 --> 00:12:31,279
so once then we have um all of that set

00:12:30,800 --> 00:12:32,880
up

00:12:31,279 --> 00:12:34,720
you know we have now moved our our

00:12:32,880 --> 00:12:38,240
workloads into production

00:12:34,720 --> 00:12:40,000
um it's very very important then you

00:12:38,240 --> 00:12:41,600
know for you know how do we

00:12:40,000 --> 00:12:43,200
manage or how do we operationalize the

00:12:41,600 --> 00:12:45,920
day two operational use cases

00:12:43,200 --> 00:12:47,920
you know ai and it's a term user but ai

00:12:45,920 --> 00:12:50,079
for network operations is all about

00:12:47,920 --> 00:12:51,760
the infusion of ai to provide um

00:12:50,079 --> 00:12:53,200
operational efficiencies such as

00:12:51,760 --> 00:12:55,760
predictive

00:12:53,200 --> 00:12:57,440
alerts um outage avoidance instance

00:12:55,760 --> 00:13:00,240
reduction etc etc

00:12:57,440 --> 00:13:02,240
and into the network operations and and

00:13:00,240 --> 00:13:04,320
the journey to ai ops has a number of

00:13:02,240 --> 00:13:05,680
different maturity levels and if you

00:13:04,320 --> 00:13:06,399
look down here in the on the bottom left

00:13:05,680 --> 00:13:08,240
of the

00:13:06,399 --> 00:13:09,440
there's kind of the middle of the chart

00:13:08,240 --> 00:13:11,600
here you know it's

00:13:09,440 --> 00:13:12,560
simplified uh maturity level so you know

00:13:11,600 --> 00:13:14,639
noise reduction

00:13:12,560 --> 00:13:15,680
deduplication of events deduplication of

00:13:14,639 --> 00:13:17,200
alarms

00:13:15,680 --> 00:13:18,720
then we move on to more reactive you

00:13:17,200 --> 00:13:21,279
know real-time insights

00:13:18,720 --> 00:13:23,120
into what the data trends are and

00:13:21,279 --> 00:13:24,959
correlations things like that

00:13:23,120 --> 00:13:27,200
then we move on to more of a predictive

00:13:24,959 --> 00:13:30,000
um real-time dynamic insights for

00:13:27,200 --> 00:13:31,519
um probable cause identification things

00:13:30,000 --> 00:13:32,160
like predictive correlations this is

00:13:31,519 --> 00:13:34,399
what the

00:13:32,160 --> 00:13:35,920
the normal behavior is multivariate

00:13:34,399 --> 00:13:37,360
colorations all sorts of machine

00:13:35,920 --> 00:13:40,560
learning can be applied here

00:13:37,360 --> 00:13:42,480
and then going to more proactive um

00:13:40,560 --> 00:13:44,560
maturity level if you like so from smart

00:13:42,480 --> 00:13:46,160
incidents avoid outages

00:13:44,560 --> 00:13:47,760
get ahead of any problems before they

00:13:46,160 --> 00:13:49,920
come customer

00:13:47,760 --> 00:13:51,279
affecting and all of these maturity

00:13:49,920 --> 00:13:53,120
levels and they all follow the kind of

00:13:51,279 --> 00:13:54,880
similar four stages of

00:13:53,120 --> 00:13:56,480
of the ai ops journey if you like so

00:13:54,880 --> 00:13:59,360
it's collecting your data

00:13:56,480 --> 00:14:01,440
you'll provide the relevant um data

00:13:59,360 --> 00:14:02,639
insights from kpis from events from time

00:14:01,440 --> 00:14:05,120
series data

00:14:02,639 --> 00:14:07,600
organize that data so curate it cleanse

00:14:05,120 --> 00:14:09,279
it and govern that data if you like

00:14:07,600 --> 00:14:11,279
analyze the insights you know apply

00:14:09,279 --> 00:14:12,160
machine learning apply ai to understand

00:14:11,279 --> 00:14:14,079
what are the

00:14:12,160 --> 00:14:15,279
insights we can gather from the data and

00:14:14,079 --> 00:14:17,839
then infuse that

00:14:15,279 --> 00:14:21,199
um ai into operational processes into

00:14:17,839 --> 00:14:21,199
the closed loop et cetera

00:14:21,519 --> 00:14:26,720
and then as we um

00:14:24,720 --> 00:14:29,040
talk about implementing air ops you know

00:14:26,720 --> 00:14:30,639
it's important to

00:14:29,040 --> 00:14:32,720
look at this from a perspective of you

00:14:30,639 --> 00:14:34,160
know to implement intelligent operations

00:14:32,720 --> 00:14:35,519
you know you need to tie all the dots

00:14:34,160 --> 00:14:36,959
across all of the data

00:14:35,519 --> 00:14:38,320
so you need to type signals across

00:14:36,959 --> 00:14:39,279
structured data and you need to type

00:14:38,320 --> 00:14:41,199
signals into

00:14:39,279 --> 00:14:42,639
and unstructured data from multiple

00:14:41,199 --> 00:14:44,880
sources like we have on the left hand

00:14:42,639 --> 00:14:44,880
side

00:14:44,959 --> 00:14:48,079
up and down our stack here but we tell

00:14:46,880 --> 00:14:50,399
you that data from the

00:14:48,079 --> 00:14:51,120
structured and the unstructured data

00:14:50,399 --> 00:14:52,720
together

00:14:51,120 --> 00:14:54,480
so that you know we correlate all of

00:14:52,720 --> 00:14:55,440
this data together right so we tie

00:14:54,480 --> 00:14:57,279
signals from

00:14:55,440 --> 00:14:58,480
from multiple sources and we can provide

00:14:57,279 --> 00:15:00,399
a clearer view

00:14:58,480 --> 00:15:02,480
of anomalies of clear view of linkages

00:15:00,399 --> 00:15:05,600
to sources for faster investigation

00:15:02,480 --> 00:15:07,199
faster resolution and there's there's we

00:15:05,600 --> 00:15:08,639
can derive hidden insights from all of

00:15:07,199 --> 00:15:10,399
this data that we're collecting

00:15:08,639 --> 00:15:12,639
now structured data you know things like

00:15:10,399 --> 00:15:14,639
events time series data kpis

00:15:12,639 --> 00:15:16,880
performance management data but equally

00:15:14,639 --> 00:15:20,480
then unstructured data things like logs

00:15:16,880 --> 00:15:21,680
and tickets um manuals user manuals for

00:15:20,480 --> 00:15:23,040
different types of network functions for

00:15:21,680 --> 00:15:24,000
example coming from the third party

00:15:23,040 --> 00:15:26,399
vendors

00:15:24,000 --> 00:15:27,839
you know in order to leverage ai in

00:15:26,399 --> 00:15:28,880
sophisticated analytics

00:15:27,839 --> 00:15:30,959
you know we need to have a solid

00:15:28,880 --> 00:15:31,680
foundation like we have here with robust

00:15:30,959 --> 00:15:33,199
tooling

00:15:31,680 --> 00:15:34,880
covering all of this type of data this

00:15:33,199 --> 00:15:36,880
is structured and unstructured data

00:15:34,880 --> 00:15:38,639
and we need to understand the data you

00:15:36,880 --> 00:15:40,000
know all of this data together is really

00:15:38,639 --> 00:15:41,600
really valuable for us in network

00:15:40,000 --> 00:15:43,600
operations you know but we need a

00:15:41,600 --> 00:15:44,800
real-time what's a growing truth right

00:15:43,600 --> 00:15:46,320
what is the state of the

00:15:44,800 --> 00:15:47,839
what is the state of my network for

00:15:46,320 --> 00:15:49,120
managing you know background crew can

00:15:47,839 --> 00:15:50,959
help us manage these complex

00:15:49,120 --> 00:15:52,480
applications these complex services

00:15:50,959 --> 00:15:54,720
these dynamic servers that were rolling

00:15:52,480 --> 00:15:56,880
out um

00:15:54,720 --> 00:15:58,399
and you know these tools allow us to you

00:15:56,880 --> 00:16:00,160
know anticipate and address

00:15:58,399 --> 00:16:01,440
risks proactively like that maturity

00:16:00,160 --> 00:16:03,120
carbon ai right

00:16:01,440 --> 00:16:05,199
you know draw insights from more complex

00:16:03,120 --> 00:16:05,839
unstructured data get ahead of any

00:16:05,199 --> 00:16:07,680
problems

00:16:05,839 --> 00:16:08,959
and all of this lends itself into you

00:16:07,680 --> 00:16:10,320
know towards automation

00:16:08,959 --> 00:16:12,399
how can we automate this you know

00:16:10,320 --> 00:16:14,240
building that foundation enrich it with

00:16:12,399 --> 00:16:16,320
topology data enrichment ai

00:16:14,240 --> 00:16:18,000
other sophisticated toolings and then

00:16:16,320 --> 00:16:19,120
that can further reduce cost further

00:16:18,000 --> 00:16:21,360
reduce risk

00:16:19,120 --> 00:16:22,160
um you know and that will you know allow

00:16:21,360 --> 00:16:24,240
us to have more

00:16:22,160 --> 00:16:25,759
sophisticated strategies which we can

00:16:24,240 --> 00:16:29,519
discuss um

00:16:25,759 --> 00:16:31,519
text here so

00:16:29,519 --> 00:16:33,440
designing networks for the cloud with ai

00:16:31,519 --> 00:16:36,320
in automation so

00:16:33,440 --> 00:16:37,279
expanding all we just previously said

00:16:36,320 --> 00:16:39,279
you know

00:16:37,279 --> 00:16:41,120
a cloud native approach that encourages

00:16:39,279 --> 00:16:42,720
reuse is really important

00:16:41,120 --> 00:16:44,639
now this demands intent based

00:16:42,720 --> 00:16:46,240
definitions that let the machine if you

00:16:44,639 --> 00:16:47,680
like handle the specifics

00:16:46,240 --> 00:16:49,600
you know a lot of this is about build to

00:16:47,680 --> 00:16:50,880
manage you know these automation models

00:16:49,600 --> 00:16:52,399
right up and down the stack

00:16:50,880 --> 00:16:54,000
we talked with them earlier and so these

00:16:52,399 --> 00:16:55,759
intent based models

00:16:54,000 --> 00:16:57,519
you know make these available not just

00:16:55,759 --> 00:16:59,600
for orchestrating and configuring

00:16:57,519 --> 00:17:01,600
and instantiating day one day zero and

00:16:59,600 --> 00:17:03,360
day one of your network service but make

00:17:01,600 --> 00:17:05,199
them available to assurance as well

00:17:03,360 --> 00:17:07,280
so we can derive additional insights out

00:17:05,199 --> 00:17:08,319
there so this set of predefined life

00:17:07,280 --> 00:17:09,839
cycle types

00:17:08,319 --> 00:17:11,679
these dependencies and relationships

00:17:09,839 --> 00:17:13,600
that we spoke to

00:17:11,679 --> 00:17:14,880
and you know have a set of automation

00:17:13,600 --> 00:17:16,640
artifacts if you like a library of

00:17:14,880 --> 00:17:18,240
opinionated patterns

00:17:16,640 --> 00:17:19,919
that can address planned and more

00:17:18,240 --> 00:17:22,319
importantly are equally as important

00:17:19,919 --> 00:17:23,760
unplanned and you know changes in the

00:17:22,319 --> 00:17:25,280
network so for service

00:17:23,760 --> 00:17:27,439
service restoration use cases for

00:17:25,280 --> 00:17:28,559
example you know when assurance in ai is

00:17:27,439 --> 00:17:32,400
monitoring everything

00:17:28,559 --> 00:17:34,000
um on the network at the stage now as we

00:17:32,400 --> 00:17:36,160
see here

00:17:34,000 --> 00:17:38,000
let's play this through a little bit you

00:17:36,160 --> 00:17:41,039
know we're looking to

00:17:38,000 --> 00:17:42,559
you know an infrastructure event can

00:17:41,039 --> 00:17:44,160
cause an error for example

00:17:42,559 --> 00:17:46,080
uh cascading of errors you know

00:17:44,160 --> 00:17:47,520
assurance and ai help us to

00:17:46,080 --> 00:17:49,520
select the appropriated opinionated

00:17:47,520 --> 00:17:51,039
pattern that addresses for unplanned

00:17:49,520 --> 00:17:51,600
changes there's a series of feedback

00:17:51,039 --> 00:17:53,919
loops

00:17:51,600 --> 00:17:55,600
back into the orchestration layer um all

00:17:53,919 --> 00:17:57,679
the lights could be green for example

00:17:55,600 --> 00:17:59,200
um users could be complaining on social

00:17:57,679 --> 00:18:00,400
media but everything in the knot looks

00:17:59,200 --> 00:18:02,160
looks good right

00:18:00,400 --> 00:18:04,400
and you know we've got a client that has

00:18:02,160 --> 00:18:06,080
um twitter sentiment analysis

00:18:04,400 --> 00:18:07,440
overlay than the knock and that helps

00:18:06,080 --> 00:18:09,120
the prioritization you know

00:18:07,440 --> 00:18:10,559
this is in in countries who have very

00:18:09,120 --> 00:18:12,320
high social media

00:18:10,559 --> 00:18:14,000
and you know users run all the time

00:18:12,320 --> 00:18:15,840
right so other customers have

00:18:14,000 --> 00:18:17,760
weather weather analysis feeding into

00:18:15,840 --> 00:18:20,799
the knock so all of these insights

00:18:17,760 --> 00:18:24,559
can help with the prioritization um

00:18:20,799 --> 00:18:26,000
you know of reconciling the actual state

00:18:24,559 --> 00:18:27,840
of the and the target state of the

00:18:26,000 --> 00:18:29,840
actual network cloud stacks across these

00:18:27,840 --> 00:18:32,160
different um locations

00:18:29,840 --> 00:18:34,160
um you know so sense respond to issues

00:18:32,160 --> 00:18:35,919
to opportunities for optimization

00:18:34,160 --> 00:18:37,440
and it's worth reiterating here as well

00:18:35,919 --> 00:18:38,799
that you know this is all done with this

00:18:37,440 --> 00:18:41,120
model based approach

00:18:38,799 --> 00:18:42,480
without any upfront programming so we're

00:18:41,120 --> 00:18:44,160
making the same automation models

00:18:42,480 --> 00:18:45,360
available for instantiation

00:18:44,160 --> 00:18:47,520
right up and down the stack from the

00:18:45,360 --> 00:18:49,039
nfvi up to the network function up to

00:18:47,520 --> 00:18:51,039
the network service layer to the

00:18:49,039 --> 00:18:52,240
enterprise application there available

00:18:51,039 --> 00:18:56,080
for insurance

00:18:52,240 --> 00:18:59,600
and for ai monitoring

00:18:56,080 --> 00:19:00,799
and and along with that then you know we

00:18:59,600 --> 00:19:03,360
require

00:19:00,799 --> 00:19:03,919
to leverage a cloud operating model um

00:19:03,360 --> 00:19:06,559
and what

00:19:03,919 --> 00:19:07,120
you know we should understand that the

00:19:06,559 --> 00:19:09,280
need to

00:19:07,120 --> 00:19:10,720
those techniques i spoke to a while ago

00:19:09,280 --> 00:19:11,840
that they need to adopt this software

00:19:10,720 --> 00:19:15,520
development management

00:19:11,840 --> 00:19:17,600
um techniques we also need to you know

00:19:15,520 --> 00:19:18,640
reorganize ourselves as well we can't

00:19:17,600 --> 00:19:20,960
simply try to

00:19:18,640 --> 00:19:23,200
automate existing legacy processes you

00:19:20,960 --> 00:19:25,440
know these processes were designed for

00:19:23,200 --> 00:19:26,960
networks that were based on hardware for

00:19:25,440 --> 00:19:29,120
change in configuration and

00:19:26,960 --> 00:19:30,559
you know it's slow right and a lot of

00:19:29,120 --> 00:19:32,160
it's often manual right

00:19:30,559 --> 00:19:33,760
network upgrades are measured in in

00:19:32,160 --> 00:19:35,679
months right things like that

00:19:33,760 --> 00:19:37,360
you know existing our legacy processes

00:19:35,679 --> 00:19:38,880
and tooling they've also got a high

00:19:37,360 --> 00:19:41,360
degree of manual touch

00:19:38,880 --> 00:19:43,360
now that limits the ability to deliver

00:19:41,360 --> 00:19:44,400
on demand or self-correcting cloud-based

00:19:43,360 --> 00:19:46,240
services

00:19:44,400 --> 00:19:47,919
you know most operating centers you know

00:19:46,240 --> 00:19:50,640
require skill technicians

00:19:47,919 --> 00:19:52,000
who perform mainly manual tasks so we

00:19:50,640 --> 00:19:54,240
now have this cloud

00:19:52,000 --> 00:19:55,360
networking automation platform and that

00:19:54,240 --> 00:19:56,880
we can embrace

00:19:55,360 --> 00:19:59,360
you know and learn from the it in the

00:19:56,880 --> 00:20:01,600
devops world devops movement if you like

00:19:59,360 --> 00:20:03,280
and enable complex network services to

00:20:01,600 --> 00:20:04,320
be designed created and continuously

00:20:03,280 --> 00:20:07,039
optimized

00:20:04,320 --> 00:20:08,559
across hybrid and across public private

00:20:07,039 --> 00:20:11,679
and across these distributed cloud

00:20:08,559 --> 00:20:13,360
locations and this requires new tooling

00:20:11,679 --> 00:20:15,280
process and skills and culture right you

00:20:13,360 --> 00:20:18,240
know if you think about what the

00:20:15,280 --> 00:20:20,240
um a day in the life of a knox person is

00:20:18,240 --> 00:20:22,240
in this type of cloud operating modules

00:20:20,240 --> 00:20:23,760
those things like configure once and

00:20:22,240 --> 00:20:25,360
then you can apply that multiple times

00:20:23,760 --> 00:20:27,120
in a cookie cutter fashion

00:20:25,360 --> 00:20:28,799
you know all changes in configuration

00:20:27,120 --> 00:20:29,679
management are true these declarative

00:20:28,799 --> 00:20:32,000
templates

00:20:29,679 --> 00:20:33,039
you know engineers don't need to tweak

00:20:32,000 --> 00:20:35,600
low-level system

00:20:33,039 --> 00:20:36,400
configs directly drive your top level

00:20:35,600 --> 00:20:38,080
intent

00:20:36,400 --> 00:20:40,640
and that will then drive the lower level

00:20:38,080 --> 00:20:43,120
commands and you know conflict changes

00:20:40,640 --> 00:20:44,080
which lends itself into proactive closed

00:20:43,120 --> 00:20:47,200
loop control

00:20:44,080 --> 00:20:48,960
that classic observe heal test you know

00:20:47,200 --> 00:20:51,200
and this network devops environment

00:20:48,960 --> 00:20:52,960
it really enables a lean and effective

00:20:51,200 --> 00:20:55,200
way to manage

00:20:52,960 --> 00:20:57,039
and to roll out faster implementation of

00:20:55,200 --> 00:20:58,640
function functionality

00:20:57,039 --> 00:21:00,080
and you know but to manage the

00:20:58,640 --> 00:21:01,520
complexity of that environment and

00:21:00,080 --> 00:21:03,360
ultimately to improve customer

00:21:01,520 --> 00:21:05,200
experience

00:21:03,360 --> 00:21:08,159
in summary then or to wrap up you know

00:21:05,200 --> 00:21:10,400
we can talk um

00:21:08,159 --> 00:21:12,080
the move to this cloud native converged

00:21:10,400 --> 00:21:12,960
i.t network cloud you know it can really

00:21:12,080 --> 00:21:15,360
be summed up into

00:21:12,960 --> 00:21:17,679
apply intelligent automation and we're

00:21:15,360 --> 00:21:20,080
talking about this intent based modeling

00:21:17,679 --> 00:21:21,679
and focus which is focusing on exposing

00:21:20,080 --> 00:21:22,960
and delivering what a consumer wants or

00:21:21,679 --> 00:21:25,039
what a customer wants

00:21:22,960 --> 00:21:26,799
not exposing the technology kind of how

00:21:25,039 --> 00:21:27,760
do i how do i deliver this

00:21:26,799 --> 00:21:30,080
and then applying this to the

00:21:27,760 --> 00:21:30,960
operational changes you know adopt those

00:21:30,080 --> 00:21:33,440
new processes

00:21:30,960 --> 00:21:34,159
adopt those new operating models infuse

00:21:33,440 --> 00:21:36,159
with ai

00:21:34,159 --> 00:21:37,280
everywhere if you like you know we and

00:21:36,159 --> 00:21:38,799
ibm are helping

00:21:37,280 --> 00:21:40,480
clients to safely adopt this

00:21:38,799 --> 00:21:42,720
revolutionary approach um

00:21:40,480 --> 00:21:43,679
to a software-based network management

00:21:42,720 --> 00:21:46,240
you know we're allowing

00:21:43,679 --> 00:21:47,679
clients to to benefit from the what

00:21:46,240 --> 00:21:49,120
we've experienced for many years now

00:21:47,679 --> 00:21:50,240
from the already demonstrated benefits

00:21:49,120 --> 00:21:52,320
of cloud native

00:21:50,240 --> 00:21:54,000
you know learning from other industries

00:21:52,320 --> 00:21:55,039
where there is high innovation rate

00:21:54,000 --> 00:21:56,480
where there is lower

00:21:55,039 --> 00:21:58,640
you know we've proven that we can lower

00:21:56,480 --> 00:22:00,400
the operational costs now as an analyst

00:21:58,640 --> 00:22:02,799
said to me earlier in the week

00:22:00,400 --> 00:22:04,080
ultimately 5g is about the move to

00:22:02,799 --> 00:22:05,280
putting software at the center of the

00:22:04,080 --> 00:22:07,280
network

00:22:05,280 --> 00:22:09,039
and the approach then our approach in

00:22:07,280 --> 00:22:11,679
ibm we believe enables that open

00:22:09,039 --> 00:22:13,280
open ecosystem for delivering that open

00:22:11,679 --> 00:22:14,640
hybrid network cloud

00:22:13,280 --> 00:22:16,159
you know if you want to find out more

00:22:14,640 --> 00:22:16,720
you can take a look at the ibm virtual

00:22:16,159 --> 00:22:19,280
booth

00:22:16,720 --> 00:22:20,159
um at the conference or you can reach

00:22:19,280 --> 00:22:22,320
out to me

00:22:20,159 --> 00:22:23,600
directly so thank you for your time

00:22:22,320 --> 00:22:24,400
today and i hope you found this

00:22:23,600 --> 00:22:29,120
informative

00:22:24,400 --> 00:22:29,120
and available for any questions so thank

00:22:32,600 --> 00:22:35,600

YouTube URL: https://www.youtube.com/watch?v=gDuHE8J-kC0


