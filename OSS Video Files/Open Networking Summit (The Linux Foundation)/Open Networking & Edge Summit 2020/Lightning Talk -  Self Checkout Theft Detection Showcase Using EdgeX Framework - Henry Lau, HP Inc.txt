Title: Lightning Talk -  Self Checkout Theft Detection Showcase Using EdgeX Framework - Henry Lau, HP Inc
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	Lightning Talk -  Self Checkout Theft Detection Showcase Using EdgeX Framework - Henry Lau, HP Inc
Captions: 
	00:00:03,439 --> 00:00:07,359
hello

00:00:04,240 --> 00:00:08,080
this is henry lau with hp thank you for

00:00:07,359 --> 00:00:10,639
my talk

00:00:08,080 --> 00:00:12,880
on self-checkout theft detection using

00:00:10,639 --> 00:00:15,200
ajax framework

00:00:12,880 --> 00:00:16,240
a little background information to start

00:00:15,200 --> 00:00:18,880
with

00:00:16,240 --> 00:00:20,400
nrf stands for national retailers

00:00:18,880 --> 00:00:23,519
federation

00:00:20,400 --> 00:00:26,800
it holds a larger

00:00:23,519 --> 00:00:28,640
show in retail space every january in

00:00:26,800 --> 00:00:31,439
new york city

00:00:28,640 --> 00:00:32,480
it is attended by over 40 000 industry

00:00:31,439 --> 00:00:36,640
professionals

00:00:32,480 --> 00:00:39,440
and over 18 000 retailers

00:00:36,640 --> 00:00:41,040
hp has been a participant in this show

00:00:39,440 --> 00:00:44,480
for many years

00:00:41,040 --> 00:00:47,920
for this past uh january 2020

00:00:44,480 --> 00:00:49,520
within our large booth we have over 15

00:00:47,920 --> 00:00:52,960
theme stations

00:00:49,520 --> 00:00:55,440
covering product introductions uh

00:00:52,960 --> 00:00:57,039
showcases of our partners and also

00:00:55,440 --> 00:01:01,760
demonstrations of

00:00:57,039 --> 00:01:01,760
upcoming ideas and innovations

00:01:02,160 --> 00:01:05,199
in one of these stations we put together

00:01:04,879 --> 00:01:08,240
a

00:01:05,199 --> 00:01:11,520
self-checkout theft detection showcase

00:01:08,240 --> 00:01:14,320
by making use of ajax framework and

00:01:11,520 --> 00:01:15,600
combining four data streams and

00:01:14,320 --> 00:01:18,479
recognize reckon

00:01:15,600 --> 00:01:20,880
all the events in order to determine

00:01:18,479 --> 00:01:20,880
theft

00:01:20,960 --> 00:01:25,280
let's look at it this way right this is

00:01:23,119 --> 00:01:27,600
a typical

00:01:25,280 --> 00:01:28,720
checkout station you see in many grocery

00:01:27,600 --> 00:01:30,720
stores

00:01:28,720 --> 00:01:32,000
starting from the left you have the

00:01:30,720 --> 00:01:34,720
staging space

00:01:32,000 --> 00:01:36,320
where the items you intend to purchase

00:01:34,720 --> 00:01:40,159
maybe on a basket

00:01:36,320 --> 00:01:42,399
is put there in the middle is uh where

00:01:40,159 --> 00:01:44,720
there's usually a scanner

00:01:42,399 --> 00:01:45,759
and then also a touch screen for you to

00:01:44,720 --> 00:01:48,560
enter

00:01:45,759 --> 00:01:50,320
search codes or something like that and

00:01:48,560 --> 00:01:50,799
then the right hand side is the bagging

00:01:50,320 --> 00:01:53,600
area

00:01:50,799 --> 00:01:54,159
after you scan the items and there's

00:01:53,600 --> 00:01:56,079
usually

00:01:54,159 --> 00:01:57,439
also a receipt printer attached

00:01:56,079 --> 00:02:00,399
somewhere

00:01:57,439 --> 00:02:02,079
so the way we did it is we don't have

00:02:00,399 --> 00:02:05,200
enough space in the show

00:02:02,079 --> 00:02:06,079
to put together a setup exactly like

00:02:05,200 --> 00:02:09,840
this

00:02:06,079 --> 00:02:13,040
so we kind of uh mark it up right so

00:02:09,840 --> 00:02:15,920
we have uh put in the hp engage one uh

00:02:13,040 --> 00:02:16,239
point of sale system as the touchscreen

00:02:15,920 --> 00:02:17,920
uh

00:02:16,239 --> 00:02:20,319
running one of our partners point of

00:02:17,920 --> 00:02:23,120
sale software

00:02:20,319 --> 00:02:23,840
the the scanner is one of the industry

00:02:23,120 --> 00:02:27,120
standard

00:02:23,840 --> 00:02:29,599
uh scanners from datalogic

00:02:27,120 --> 00:02:30,800
and then the bagging area has a weight

00:02:29,599 --> 00:02:32,720
scale

00:02:30,800 --> 00:02:34,239
that detects when something is put on

00:02:32,720 --> 00:02:37,040
there

00:02:34,239 --> 00:02:37,680
and also on the top uh we mounted a

00:02:37,040 --> 00:02:40,879
camera

00:02:37,680 --> 00:02:43,120
to look down so we can uh watch

00:02:40,879 --> 00:02:45,519
how items are being scanned during the

00:02:43,120 --> 00:02:49,360
checkout process

00:02:45,519 --> 00:02:53,040
yeah and all these uh data streams

00:02:49,360 --> 00:02:55,120
is sent to a edge gateway for central

00:02:53,040 --> 00:02:57,760
processing

00:02:55,120 --> 00:02:58,720
the idea is to combine all these four

00:02:57,760 --> 00:03:01,840
streams

00:02:58,720 --> 00:03:02,879
the point of sale transaction scanner

00:03:01,840 --> 00:03:06,400
data

00:03:02,879 --> 00:03:10,080
the weight scale data as well as

00:03:06,400 --> 00:03:12,879
image recognition coming from the camera

00:03:10,080 --> 00:03:14,560
and combine it all process it on a

00:03:12,879 --> 00:03:19,440
on-premise gateway

00:03:14,560 --> 00:03:22,720
that's based on the hx framework

00:03:19,440 --> 00:03:25,519
this is a view of the architecture so

00:03:22,720 --> 00:03:27,120
from the bottom is where all the devices

00:03:25,519 --> 00:03:29,599
are coming in

00:03:27,120 --> 00:03:31,200
in this case the point-of-sale

00:03:29,599 --> 00:03:33,360
transaction

00:03:31,200 --> 00:03:36,480
the scanner scale and the weight scale

00:03:33,360 --> 00:03:40,319
information all coming into ajax

00:03:36,480 --> 00:03:43,440
via the mqtt protocol

00:03:40,319 --> 00:03:45,920
for the usb camera it is uh

00:03:43,440 --> 00:03:46,799
within the gateway is running a object

00:03:45,920 --> 00:03:50,159
recognition

00:03:46,799 --> 00:03:53,760
algorithm to detect whether we are

00:03:50,159 --> 00:03:57,120
scanning a bottle of olive oil

00:03:53,760 --> 00:03:59,760
or scanning a apple banana

00:03:57,120 --> 00:04:01,040
etc etc the result of that object

00:03:59,760 --> 00:04:03,360
recognition

00:04:01,040 --> 00:04:04,879
is also fed into the airchecks framework

00:04:03,360 --> 00:04:09,360
via the rest api

00:04:04,879 --> 00:04:10,480
interface and with configurations within

00:04:09,360 --> 00:04:13,519
edgex

00:04:10,480 --> 00:04:16,639
on how to process these data streams

00:04:13,519 --> 00:04:17,680
up on the top are the application layers

00:04:16,639 --> 00:04:20,720
where

00:04:17,680 --> 00:04:23,680
we can process the events

00:04:20,720 --> 00:04:24,560
reconcile the events do a product look

00:04:23,680 --> 00:04:28,320
up

00:04:24,560 --> 00:04:30,240
and for the sake of the show

00:04:28,320 --> 00:04:31,919
we present the results in the ui

00:04:30,240 --> 00:04:35,199
dashboard so

00:04:31,919 --> 00:04:36,880
basically we flash a red icon if there's

00:04:35,199 --> 00:04:40,160
something wrong with the

00:04:36,880 --> 00:04:42,320
scan and we put on a green icon if

00:04:40,160 --> 00:04:45,520
everything's checked out

00:04:42,320 --> 00:04:47,120
so for example if someone is hiding the

00:04:45,520 --> 00:04:50,800
barcode but just still

00:04:47,120 --> 00:04:54,400
swipe uh do the swipe action uh

00:04:50,800 --> 00:04:55,040
of a bottle then the camera will see the

00:04:54,400 --> 00:04:56,960
bottle

00:04:55,040 --> 00:04:58,560
but the barcode scanner wouldn't catch

00:04:56,960 --> 00:05:00,800
it and so

00:04:58,560 --> 00:05:02,560
by that determination something might be

00:05:00,800 --> 00:05:06,080
wrong

00:05:02,560 --> 00:05:07,440
so this is just one example of combining

00:05:06,080 --> 00:05:09,360
edge x

00:05:07,440 --> 00:05:10,560
data stream processing and event

00:05:09,360 --> 00:05:13,600
processing

00:05:10,560 --> 00:05:16,720
to be able to achieve a theft detection

00:05:13,600 --> 00:05:18,720
use case we are able to work with all

00:05:16,720 --> 00:05:20,639
these partners

00:05:18,720 --> 00:05:22,479
supplying the software supplying the

00:05:20,639 --> 00:05:25,600
devices

00:05:22,479 --> 00:05:26,960
hp working with intel io tech and many

00:05:25,600 --> 00:05:28,560
other partners

00:05:26,960 --> 00:05:30,720
to be able to put together this

00:05:28,560 --> 00:05:33,840
demonstration very quickly within a

00:05:30,720 --> 00:05:33,840
matter of two months

00:05:34,000 --> 00:05:37,919
so further on we can extend the same

00:05:36,479 --> 00:05:40,560
model

00:05:37,919 --> 00:05:42,400
give an example of if we wanted to do a

00:05:40,560 --> 00:05:44,000
quick service restaurant that is the

00:05:42,400 --> 00:05:47,120
fast food restaurant

00:05:44,000 --> 00:05:48,479
to do inventory checkout inventory

00:05:47,120 --> 00:05:52,240
tracking

00:05:48,479 --> 00:05:57,440
we could make use of rfid for example

00:05:52,240 --> 00:06:00,800
to watch for uh items being delivered

00:05:57,440 --> 00:06:02,960
move into storage using kitchen

00:06:00,800 --> 00:06:04,319
and then using the dining room right

00:06:02,960 --> 00:06:08,479
these could be

00:06:04,319 --> 00:06:11,600
the hamburger patties uh the drink cups

00:06:08,479 --> 00:06:12,479
the straws ketchup packets etc there are

00:06:11,600 --> 00:06:15,919
just

00:06:12,479 --> 00:06:19,280
many many items to be tracked within a

00:06:15,919 --> 00:06:22,720
quick service restaurant so these can

00:06:19,280 --> 00:06:25,360
all be based on the same hx core

00:06:22,720 --> 00:06:28,160
uh except of course the data stream is

00:06:25,360 --> 00:06:30,960
coming in is via rfid

00:06:28,160 --> 00:06:33,919
in this example that rfid events can

00:06:30,960 --> 00:06:35,280
also be fed into ajax via the mqtt

00:06:33,919 --> 00:06:38,479
interface

00:06:35,280 --> 00:06:40,720
and uh you can still have uh create a

00:06:38,479 --> 00:06:41,840
similar reconciler to determine the

00:06:40,720 --> 00:06:44,080
results

00:06:41,840 --> 00:06:46,400
and uh you can present the results in a

00:06:44,080 --> 00:06:48,560
ui dashboard or you can further fed the

00:06:46,400 --> 00:06:50,720
results to some other

00:06:48,560 --> 00:06:52,000
server-side database where you have to

00:06:50,720 --> 00:06:54,240
keep track of

00:06:52,000 --> 00:06:56,000
things in order to determine when you

00:06:54,240 --> 00:06:59,120
need to reorder

00:06:56,000 --> 00:07:01,360
certain items in your inventory these

00:06:59,120 --> 00:07:04,720
again the core remains the same

00:07:01,360 --> 00:07:07,360
and you can replace a few

00:07:04,720 --> 00:07:10,160
software components and cover a totally

00:07:07,360 --> 00:07:12,880
different use case

00:07:10,160 --> 00:07:13,440
so that's the purpose of edgex right it

00:07:12,880 --> 00:07:17,199
is a

00:07:13,440 --> 00:07:19,840
highly flexible open software framework

00:07:17,199 --> 00:07:24,560
that allows interoperability between the

00:07:19,840 --> 00:07:27,840
devices and applications at the iot edge

00:07:24,560 --> 00:07:29,599
edgex is hosted by the linux foundation

00:07:27,840 --> 00:07:31,120
and this project has been around for

00:07:29,599 --> 00:07:33,280
three years

00:07:31,120 --> 00:07:36,160
within this project we also have a

00:07:33,280 --> 00:07:38,639
vertical solutions working group

00:07:36,160 --> 00:07:40,479
for the past two to three months we have

00:07:38,639 --> 00:07:43,360
various

00:07:40,479 --> 00:07:44,560
industry players come in to present how

00:07:43,360 --> 00:07:48,000
they are using

00:07:44,560 --> 00:07:49,680
uh ajax how they are making use of ajax

00:07:48,000 --> 00:07:52,240
to build their product

00:07:49,680 --> 00:07:53,759
uh what do they like about ajax and

00:07:52,240 --> 00:07:55,440
maybe even in the future

00:07:53,759 --> 00:07:58,080
what additional features they are

00:07:55,440 --> 00:08:00,080
seeking in hx so

00:07:58,080 --> 00:08:01,440
feel free to check out that working

00:08:00,080 --> 00:08:05,440
group to look at

00:08:01,440 --> 00:08:09,039
the previous uh session recordings

00:08:05,440 --> 00:08:12,160
and in hp uh about a month ago

00:08:09,039 --> 00:08:14,800
uh we announced this engage edge product

00:08:12,160 --> 00:08:15,680
which is a edge gateway that

00:08:14,800 --> 00:08:19,120
incorporates

00:08:15,680 --> 00:08:20,000
edge x and the purpose is to have this

00:08:19,120 --> 00:08:23,039
edge gateway

00:08:20,000 --> 00:08:26,080
element to allow the

00:08:23,039 --> 00:08:27,440
isv partners to accelerate a edge

00:08:26,080 --> 00:08:30,720
deployment

00:08:27,440 --> 00:08:31,840
in retail hospitality and many other use

00:08:30,720 --> 00:08:36,000
cases

00:08:31,840 --> 00:08:39,039
so feel free to look into that

00:08:36,000 --> 00:08:50,800
so thank you very much and uh

00:08:39,039 --> 00:08:50,800

YouTube URL: https://www.youtube.com/watch?v=EQyQRFRsz0o


