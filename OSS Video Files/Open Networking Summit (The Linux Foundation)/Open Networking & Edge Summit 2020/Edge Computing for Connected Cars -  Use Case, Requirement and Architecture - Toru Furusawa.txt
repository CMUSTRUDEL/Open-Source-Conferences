Title: Edge Computing for Connected Cars -  Use Case, Requirement and Architecture - Toru Furusawa
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	Edge Computing for Connected Cars -  Use Case, Requirement and Architecture - Toru Furusawa, Toyota Motor Corporation
Captions: 
	00:00:00,399 --> 00:00:04,319
hello everyone thank you for joining the

00:00:03,439 --> 00:00:07,359
session

00:00:04,319 --> 00:00:12,800
at computing for connected cars

00:00:07,359 --> 00:00:12,800
use case requirement and architecture

00:00:14,480 --> 00:00:18,720
my name is toru gurusava i'm a

00:00:17,760 --> 00:00:22,480
researcher

00:00:18,720 --> 00:00:24,480
working at toyota i mainly research on

00:00:22,480 --> 00:00:31,119
edge computing technology

00:00:24,480 --> 00:00:34,399
for connected vehicles

00:00:31,119 --> 00:00:37,280
in this presentation i will

00:00:34,399 --> 00:00:38,559
introduce connected cars and there are

00:00:37,280 --> 00:00:42,000
use cases

00:00:38,559 --> 00:00:45,680
and requirements at first

00:00:42,000 --> 00:00:48,559
then i will talk about the expectations

00:00:45,680 --> 00:00:51,440
and challenges for edge computing for

00:00:48,559 --> 00:00:54,879
connected cars

00:00:51,440 --> 00:00:59,440
lastly i'll show some of our approaches

00:00:54,879 --> 00:01:00,320
and internal plc experiments for the

00:00:59,440 --> 00:01:02,960
emerging

00:01:00,320 --> 00:01:02,960
charities

00:01:06,799 --> 00:01:11,119
first i will talk about future connected

00:01:10,159 --> 00:01:16,720
cars

00:01:11,119 --> 00:01:16,720
and the use cases and requirements

00:01:17,439 --> 00:01:25,600
connected cars are a term for vehicles

00:01:21,280 --> 00:01:28,479
that are connected to a mobile network

00:01:25,600 --> 00:01:29,600
many cars are already connected to the

00:01:28,479 --> 00:01:32,880
network

00:01:29,600 --> 00:01:35,200
and all cars sold in the future

00:01:32,880 --> 00:01:36,640
will essentially be connected to the

00:01:35,200 --> 00:01:40,320
network

00:01:36,640 --> 00:01:43,520
at least for toyota cars

00:01:40,320 --> 00:01:47,280
and we expect that

00:01:43,520 --> 00:01:50,320
around 2025

00:01:47,280 --> 00:01:53,520
100 million cars worldwide

00:01:50,320 --> 00:01:56,479
will be connected to the network

00:01:53,520 --> 00:01:57,759
and the total traffic that will be

00:01:56,479 --> 00:02:01,280
generated

00:01:57,759 --> 00:02:06,000
will range from one exercise

00:02:01,280 --> 00:02:09,200
to 10 exercise per month

00:02:06,000 --> 00:02:12,720
this is a huge amount of data

00:02:09,200 --> 00:02:16,480
and concentrating all data in the

00:02:12,720 --> 00:02:20,400
cloud we call the heavy load

00:02:16,480 --> 00:02:23,440
on the mobile network and the ground

00:02:20,400 --> 00:02:24,319
so our system to distribute the heavy

00:02:23,440 --> 00:02:27,200
drought

00:02:24,319 --> 00:02:27,200
is needed

00:02:29,760 --> 00:02:37,040
so what kind of services

00:02:33,120 --> 00:02:40,080
do connected cars provide

00:02:37,040 --> 00:02:43,440
they can be divided into three

00:02:40,080 --> 00:02:43,440
main service types

00:02:43,840 --> 00:02:52,000
the first is in vehicle infotainment

00:02:48,840 --> 00:02:55,319
ivi ivi

00:02:52,000 --> 00:02:58,879
refers to vehicle systems that combine

00:02:55,319 --> 00:03:02,159
entertainment and information delivery

00:02:58,879 --> 00:03:06,159
for drivers and passengers

00:03:02,159 --> 00:03:09,760
such as gps navigation

00:03:06,159 --> 00:03:13,599
music and tv voice applications

00:03:09,760 --> 00:03:17,280
etc the second

00:03:13,599 --> 00:03:21,760
is the intelligent transport system

00:03:17,280 --> 00:03:24,799
its that includes

00:03:21,760 --> 00:03:28,000
driver control services such as

00:03:24,799 --> 00:03:31,280
such as local danger warning

00:03:28,000 --> 00:03:33,280
collision avoidance and cooperative

00:03:31,280 --> 00:03:35,920
adaptive cruise control

00:03:33,280 --> 00:03:35,920
etc

00:03:36,560 --> 00:03:44,480
the third one is vehicle iot

00:03:40,159 --> 00:03:47,840
or vehicle big data

00:03:44,480 --> 00:03:49,599
lots of data including high definition

00:03:47,840 --> 00:03:52,720
map data

00:03:49,599 --> 00:03:56,000
video data and the

00:03:52,720 --> 00:04:01,840
variety of object sensor data

00:03:56,000 --> 00:04:01,840
etc are connected to the cloud

00:04:01,920 --> 00:04:09,519
in fact we believe that the third one

00:04:06,000 --> 00:04:15,280
is going to be the most important

00:04:09,519 --> 00:04:18,560
in the future

00:04:15,280 --> 00:04:21,600
so why is bigger big data

00:04:18,560 --> 00:04:25,199
so important

00:04:21,600 --> 00:04:28,720
as drawn on this slide data

00:04:25,199 --> 00:04:33,680
collected from vehicles into the cloud

00:04:28,720 --> 00:04:38,080
can be used for a variety of services

00:04:33,680 --> 00:04:39,360
for example it is expected to be applied

00:04:38,080 --> 00:04:42,800
to a variety of

00:04:39,360 --> 00:04:47,040
automotive services such as

00:04:42,800 --> 00:04:50,479
sales marketing and maintenance services

00:04:47,040 --> 00:04:56,960
in addition to research and development

00:04:50,479 --> 00:05:00,400
and enhanced vehicle features

00:04:56,960 --> 00:05:02,960
it is also expected to be used

00:05:00,400 --> 00:05:04,400
in conjunction with other companies

00:05:02,960 --> 00:05:09,520
public clouds

00:05:04,400 --> 00:05:13,199
and public data for extended services

00:05:09,520 --> 00:05:16,560
such as mars

00:05:13,199 --> 00:05:24,080
music and video services and

00:05:16,560 --> 00:05:27,039
possibly all to insurance services

00:05:24,080 --> 00:05:30,639
now let's consider the requirements of

00:05:27,039 --> 00:05:30,639
connected car services

00:05:30,880 --> 00:05:37,600
i mentioned earlier that there are

00:05:33,919 --> 00:05:39,919
three types of services

00:05:37,600 --> 00:05:42,720
each service has different service

00:05:39,919 --> 00:05:42,720
requirements

00:05:43,039 --> 00:05:52,240
for ibr the key requirement

00:05:46,880 --> 00:05:55,199
is to improve the user experience

00:05:52,240 --> 00:05:56,400
the communication will involve a lot of

00:05:55,199 --> 00:05:59,520
downloads

00:05:56,400 --> 00:05:59,520
from the cloud

00:05:59,600 --> 00:06:03,759
therefore broadband cellular

00:06:02,240 --> 00:06:07,919
communication

00:06:03,759 --> 00:06:07,919
is suitable for ipi

00:06:09,120 --> 00:06:15,919
in its safety is the most

00:06:12,720 --> 00:06:20,080
important factor and

00:06:15,919 --> 00:06:23,360
low latency and high reliable

00:06:20,080 --> 00:06:28,639
vehicle to vehicle communication

00:06:23,360 --> 00:06:28,639
is required for this reason

00:06:28,880 --> 00:06:36,479
dedicated short-range communication dsrc

00:06:33,440 --> 00:06:39,680
and cellular btx communications

00:06:36,479 --> 00:06:39,680
are suitable

00:06:41,280 --> 00:06:49,199
and as for iot

00:06:44,560 --> 00:06:53,680
capacity is the most important factor

00:06:49,199 --> 00:06:56,720
also the demand for latency is though

00:06:53,680 --> 00:07:00,479
less data approach to the cloud

00:06:56,720 --> 00:07:03,440
are required so

00:07:00,479 --> 00:07:04,000
wireless lan and cellular communications

00:07:03,440 --> 00:07:08,319
are

00:07:04,000 --> 00:07:08,319
used for the iot

00:07:09,039 --> 00:07:16,240
so each type of service has different

00:07:12,400 --> 00:07:20,000
service requirements but the big

00:07:16,240 --> 00:07:24,240
data requirements for iot services

00:07:20,000 --> 00:07:29,039
are so large that they can negatively

00:07:24,240 --> 00:07:32,000
impact services like ids idea services

00:07:29,039 --> 00:07:34,639
which requires more capacity but low

00:07:32,000 --> 00:07:34,639
latency

00:07:34,720 --> 00:07:39,680
we believe this will be our major

00:07:42,840 --> 00:07:48,000
challenge

00:07:45,199 --> 00:07:49,120
let me give you an example of the iot

00:07:48,000 --> 00:07:52,479
big data

00:07:49,120 --> 00:07:52,479
capacity issue

00:07:53,039 --> 00:07:59,840
at the beginning of this talk i

00:07:55,919 --> 00:08:02,479
mentioned that 100 million cars

00:07:59,840 --> 00:08:03,520
are expected to be connected to the

00:08:02,479 --> 00:08:07,680
network

00:08:03,520 --> 00:08:11,360
by 2025

00:08:07,680 --> 00:08:14,720
assuming that 3 million of these cars

00:08:11,360 --> 00:08:18,479
are twitter cars and each car

00:08:14,720 --> 00:08:22,560
uploads 20 gigabytes of data

00:08:18,479 --> 00:08:26,400
per month to the cloud that means

00:08:22,560 --> 00:08:30,000
60 petabytes of data transactions

00:08:26,400 --> 00:08:33,519
per bars occurs in the crowd

00:08:30,000 --> 00:08:34,320
so for example if the transaction rate

00:08:33,519 --> 00:08:37,839
in the cloud

00:08:34,320 --> 00:08:41,120
is 10 gigabyte per second

00:08:37,839 --> 00:08:44,399
this will take more than two months for

00:08:41,120 --> 00:08:47,600
completion so

00:08:44,399 --> 00:08:54,399
we need a kind of efficient way to

00:08:47,600 --> 00:08:57,320
process the big data

00:08:54,399 --> 00:08:59,279
to process this kind of big data

00:08:57,320 --> 00:09:02,800
efficiently

00:08:59,279 --> 00:09:06,080
a load distribution will be

00:09:02,800 --> 00:09:11,440
the right solution approach

00:09:06,080 --> 00:09:11,440
so what exactly is the right solution

00:09:14,720 --> 00:09:21,440
there are several possible approaches to

00:09:17,959 --> 00:09:24,640
distribute the load

00:09:21,440 --> 00:09:28,959
the first is to correct only

00:09:24,640 --> 00:09:33,120
the data that is really needed

00:09:28,959 --> 00:09:35,279
for example if a car is parked in a

00:09:33,120 --> 00:09:38,560
parking lot

00:09:35,279 --> 00:09:43,440
the drive the drive recorder video

00:09:38,560 --> 00:09:43,440
won't need to be uploaded to the cloud

00:09:44,240 --> 00:09:53,040
the second is to use edge computing

00:09:48,320 --> 00:09:57,760
to distribute processing at the edge

00:09:53,040 --> 00:09:57,760
i'll discuss this in more detail later

00:09:58,800 --> 00:10:05,360
the third is to send data as

00:10:02,079 --> 00:10:09,040
tiles when the network is not

00:10:05,360 --> 00:10:12,640
congested for example

00:10:09,040 --> 00:10:13,519
a car can avoid congestion on the mobile

00:10:12,640 --> 00:10:16,560
network

00:10:13,519 --> 00:10:19,839
by sending data during

00:10:16,560 --> 00:10:19,839
late midnight hours

00:10:20,880 --> 00:10:27,120
there are many possible approaches

00:10:24,079 --> 00:10:28,320
but in this session i want to focus on

00:10:27,120 --> 00:10:33,839
the second one

00:10:28,320 --> 00:10:33,839
at computing

00:10:36,240 --> 00:10:43,200
as you may know there are many different

00:10:39,440 --> 00:10:47,680
types of edges ranging from

00:10:43,200 --> 00:10:51,120
edges close to the device

00:10:47,680 --> 00:10:55,200
to edges that are located in the

00:10:51,120 --> 00:10:58,399
telecom carrier's infrastructure

00:10:55,200 --> 00:11:01,440
which is a mac and

00:10:58,399 --> 00:11:05,440
two exits that were provided

00:11:01,440 --> 00:11:10,800
as just a one zone in the public cloud

00:11:05,440 --> 00:11:10,800
so which edge is best for connected cars

00:11:10,959 --> 00:11:19,600
in my opinion i think we'll see adapt

00:11:16,000 --> 00:11:24,560
i think we'll see adoption starting at

00:11:19,600 --> 00:11:24,560
edge closer to the cloud size

00:11:24,880 --> 00:11:29,200
this is because the demand for big data

00:11:27,880 --> 00:11:32,560
communications

00:11:29,200 --> 00:11:34,720
will fluctuate and

00:11:32,560 --> 00:11:36,079
will require a certain amount of

00:11:34,720 --> 00:11:40,079
scalability

00:11:36,079 --> 00:11:43,200
at the edge as well

00:11:40,079 --> 00:11:44,399
however this is still being discussed

00:11:43,200 --> 00:11:48,959
and there's

00:11:44,399 --> 00:11:48,959
no definitive answer yet

00:11:52,399 --> 00:11:56,800
to enable edge computing for connected

00:11:55,200 --> 00:12:00,399
vehicles

00:11:56,800 --> 00:12:01,800
we found this automotive edge computing

00:12:00,399 --> 00:12:07,519
consortium

00:12:01,800 --> 00:12:11,360
aecc in 2018

00:12:07,519 --> 00:12:12,320
aacc includes a variety of companies

00:12:11,360 --> 00:12:15,920
from

00:12:12,320 --> 00:12:21,200
automotive sector telecom carriers

00:12:15,920 --> 00:12:25,839
class providers service providers etc

00:12:21,200 --> 00:12:25,839
as of september 2000

00:12:26,120 --> 00:12:33,200
2020 we have

00:12:29,600 --> 00:12:33,200
26 member companies

00:12:33,920 --> 00:12:41,760
acc defines specific service scenarios

00:12:38,480 --> 00:12:45,360
use cases and requirements for

00:12:41,760 --> 00:12:48,399
edge computing for connected vehicles

00:12:45,360 --> 00:12:51,839
and compress recommended

00:12:48,399 --> 00:12:53,120
architectures and solutions based on

00:12:51,839 --> 00:12:56,560
these requirements

00:12:53,120 --> 00:12:59,040
in technical reports and

00:12:56,560 --> 00:13:00,880
actually i'm one of the working group

00:12:59,040 --> 00:13:04,480
members of the acc

00:13:00,880 --> 00:13:07,519
now and i contribute to

00:13:04,480 --> 00:13:12,480
defining some specific use cases

00:13:07,519 --> 00:13:12,480
and requirements in acc

00:13:13,360 --> 00:13:21,200
by the way most of the materials such as

00:13:18,560 --> 00:13:22,480
white papers and technical reports in

00:13:21,200 --> 00:13:25,680
the acc

00:13:22,480 --> 00:13:30,800
are available on the acc website

00:13:25,680 --> 00:13:30,800
so please take a look at them if you get

00:13:32,839 --> 00:13:38,720
interested

00:13:35,440 --> 00:13:44,160
next i would like to discuss the concept

00:13:38,720 --> 00:13:44,160
of h computing at acc

00:13:44,240 --> 00:13:52,800
in a nutshell it is distributed

00:13:48,079 --> 00:13:52,800
computing on localized network

00:13:53,279 --> 00:14:00,160
by distributing computing as

00:13:56,720 --> 00:14:03,920
s it is expected to reduce

00:14:00,160 --> 00:14:06,959
processing time also

00:14:03,920 --> 00:14:11,760
the big data traffic is split

00:14:06,959 --> 00:14:11,760
to the edge via the localized network

00:14:12,000 --> 00:14:18,480
and data between vehicles

00:14:15,120 --> 00:14:23,519
in the same region as consolidated and

00:14:18,480 --> 00:14:23,519
efficiently differ via the edge

00:14:24,240 --> 00:14:31,920
based on this basic concept the aacc

00:14:28,639 --> 00:14:34,959
defines specific use cases

00:14:31,920 --> 00:14:44,240
requirements and architecture but

00:14:34,959 --> 00:14:48,000
today i want to go into the details here

00:14:44,240 --> 00:14:49,360
although acc has defined a variety of

00:14:48,000 --> 00:14:52,480
use cases

00:14:49,360 --> 00:14:53,040
requirements and architectures there are

00:14:52,480 --> 00:14:56,240
still

00:14:53,040 --> 00:14:59,600
many challenges or many issues

00:14:56,240 --> 00:15:03,760
to build itself in order to realize the

00:14:59,600 --> 00:15:03,760
automotive edge computing concepts

00:15:04,000 --> 00:15:12,240
first there are lots of challenges

00:15:07,839 --> 00:15:15,519
related to the edge infrastructure

00:15:12,240 --> 00:15:18,480
what is the best method to split one

00:15:15,519 --> 00:15:21,040
some traffic to its servers in the

00:15:18,480 --> 00:15:23,279
mobile network

00:15:21,040 --> 00:15:24,800
how should the infrastructure of the

00:15:23,279 --> 00:15:29,600
cloud environment as

00:15:24,800 --> 00:15:29,600
edge be implemented etc

00:15:30,519 --> 00:15:36,800
specifications and implementations of

00:15:33,360 --> 00:15:40,160
such edge infrastructure seem to be

00:15:36,800 --> 00:15:44,160
an area of particular

00:15:40,160 --> 00:15:47,880
interest to telecom operators

00:15:44,160 --> 00:15:50,160
there are many standards and open source

00:15:47,880 --> 00:15:54,560
implementations

00:15:50,160 --> 00:15:57,680
for example the cranial project and the

00:15:54,560 --> 00:16:02,880
x foundation edge has developed

00:15:57,680 --> 00:16:06,720
many blueprints that implement various

00:16:02,880 --> 00:16:09,600
mix also

00:16:06,720 --> 00:16:10,800
there are a number of challenges that

00:16:09,600 --> 00:16:13,360
remain

00:16:10,800 --> 00:16:16,160
as to how to deploy and use edge

00:16:13,360 --> 00:16:19,199
applications

00:16:16,160 --> 00:16:22,399
for example how should we design

00:16:19,199 --> 00:16:26,079
distributed applications

00:16:22,399 --> 00:16:30,560
how do we deploy applications to the

00:16:26,079 --> 00:16:33,360
multiple edges around the world

00:16:30,560 --> 00:16:34,240
the edge has limited resources compared

00:16:33,360 --> 00:16:38,560
to the cloud

00:16:34,240 --> 00:16:42,079
but how do we manage edge resources

00:16:38,560 --> 00:16:45,440
etc and

00:16:42,079 --> 00:16:48,720
it seems that there are still

00:16:45,440 --> 00:16:51,440
few specifications or implementations

00:16:48,720 --> 00:16:55,040
for these edge applications

00:16:51,440 --> 00:16:56,079
so we we are working on several

00:16:55,040 --> 00:16:59,360
activities

00:16:56,079 --> 00:17:00,320
to solve edge application issues as well

00:16:59,360 --> 00:17:04,880
as

00:17:00,320 --> 00:17:06,400
infrastructure issues

00:17:04,880 --> 00:17:10,400
so let's think again about the

00:17:06,400 --> 00:17:13,520
challenges of edge cloud applications

00:17:10,400 --> 00:17:16,839
edge clouds have limited availability

00:17:13,520 --> 00:17:18,079
and scalability compared to public

00:17:16,839 --> 00:17:21,120
clouds

00:17:18,079 --> 00:17:24,079
on the other hand communication demand

00:17:21,120 --> 00:17:26,000
from connected cars and edge application

00:17:24,079 --> 00:17:29,760
processing demand

00:17:26,000 --> 00:17:33,360
is expected to change drastically

00:17:29,760 --> 00:17:36,960
with time and location

00:17:33,360 --> 00:17:40,880
for example if there is a traffic

00:17:36,960 --> 00:17:44,160
accident and sudden traffic condition

00:17:40,880 --> 00:17:45,039
the communication demand for nearby 8

00:17:44,160 --> 00:17:50,000
servers

00:17:45,039 --> 00:17:53,120
may also increase dramatically

00:17:50,000 --> 00:17:56,880
such sudden fluctuations in demand

00:17:53,120 --> 00:18:00,799
can cause significant service delays

00:17:56,880 --> 00:18:04,400
or maybe outages which can be

00:18:00,799 --> 00:18:04,400
a major challenge

00:18:07,520 --> 00:18:15,120
and there are many possible solutions

00:18:10,720 --> 00:18:17,520
to this challenge with a variety of

00:18:15,120 --> 00:18:21,120
approaches

00:18:17,520 --> 00:18:22,080
however in this session i represent two

00:18:21,120 --> 00:18:25,679
approaches

00:18:22,080 --> 00:18:29,440
as examples as well as

00:18:25,679 --> 00:18:32,640
uh simply being simple implementation

00:18:29,440 --> 00:18:35,679
and test results to check

00:18:32,640 --> 00:18:35,679
the feasibility

00:18:35,760 --> 00:18:41,919
excuse me how to check the feasibility

00:18:39,840 --> 00:18:45,600
so please note that i will not go into

00:18:41,919 --> 00:18:45,600
the detailed techniques

00:18:46,000 --> 00:18:51,520
the first is a method to scale up to the

00:18:50,000 --> 00:18:54,880
other edges

00:18:51,520 --> 00:18:55,600
and the scan is about a method to

00:18:54,880 --> 00:19:00,240
control

00:18:55,600 --> 00:19:00,240
the uproar of liquidity

00:19:02,400 --> 00:19:09,120
the first approach is the idea of

00:19:05,600 --> 00:19:13,039
assembling clusters of calibrated cars

00:19:09,120 --> 00:19:17,280
in the same region for example

00:19:13,039 --> 00:19:20,799
if the number of vehicles increases

00:19:17,280 --> 00:19:23,919
and the particular exercise is suddenly

00:19:20,799 --> 00:19:27,200
overloaded it your first

00:19:23,919 --> 00:19:30,559
scale out in response to the load

00:19:27,200 --> 00:19:33,280
within the outside however

00:19:30,559 --> 00:19:34,880
if the edge size runs out of resources

00:19:33,280 --> 00:19:38,480
and it cannot carry out

00:19:34,880 --> 00:19:40,880
anymore it can continue to temporarily

00:19:38,480 --> 00:19:44,559
scale out to the server's

00:19:40,880 --> 00:19:46,320
yearbook edge sites to prevent service

00:19:44,559 --> 00:19:52,160
outlets

00:19:46,320 --> 00:19:55,200
this is about its idea

00:19:52,160 --> 00:19:58,559
and to confirm the feasibility

00:19:55,200 --> 00:20:02,000
of this idea we perform uh

00:19:58,559 --> 00:20:05,200
just a small poc demonstration

00:20:02,000 --> 00:20:05,440
and demo implementation using kubernetes

00:20:05,200 --> 00:20:08,799
and

00:20:05,440 --> 00:20:11,200
creative to build and test the operation

00:20:08,799 --> 00:20:14,080
of a

00:20:11,200 --> 00:20:14,880
serverless edge computing infrastructure

00:20:14,080 --> 00:20:18,720
that runs

00:20:14,880 --> 00:20:22,960
across multiple neighborhood sites

00:20:18,720 --> 00:20:26,400
the example workflow is as follows

00:20:22,960 --> 00:20:29,679
first connected cars

00:20:26,400 --> 00:20:33,440
access the closest edge site application

00:20:29,679 --> 00:20:35,600
via the mobile network the number of

00:20:33,440 --> 00:20:38,159
contrapports

00:20:35,600 --> 00:20:39,120
running the application is scaled up

00:20:38,159 --> 00:20:43,120
down

00:20:39,120 --> 00:20:47,120
based on the frequency of access

00:20:43,120 --> 00:20:50,000
if more frequent application accesses

00:20:47,120 --> 00:20:50,720
occur after being scaled out to the

00:20:50,000 --> 00:20:54,000
limits

00:20:50,720 --> 00:20:57,760
within the closest edge then

00:20:54,000 --> 00:21:01,280
the application polls are deployed

00:20:57,760 --> 00:21:02,080
and run on the adjacent edge size to

00:21:01,280 --> 00:21:05,440
distribute

00:21:02,080 --> 00:21:08,480
the row to the neighbor to the

00:21:05,440 --> 00:21:11,679
neighboring edge and

00:21:08,480 --> 00:21:16,640
we confirmed that there

00:21:11,679 --> 00:21:19,840
the simple experiment works as expected

00:21:16,640 --> 00:21:21,200
however there are still many issues to

00:21:19,840 --> 00:21:25,760
consider

00:21:21,200 --> 00:21:29,440
such as how to select a decent edge

00:21:25,760 --> 00:21:32,880
when there are multiple candidates

00:21:29,440 --> 00:21:36,799
and whether it works properly

00:21:32,880 --> 00:21:42,000
in a large-scale environment

00:21:36,799 --> 00:21:42,000
but i'll skip detail them in this

00:21:42,840 --> 00:21:48,080
presentation

00:21:45,679 --> 00:21:48,720
the second approach is to control the

00:21:48,080 --> 00:21:51,840
amount of

00:21:48,720 --> 00:21:53,520
data from cars to avoid condition at the

00:21:51,840 --> 00:21:56,320
edge

00:21:53,520 --> 00:21:57,039
the idea is to measure the number of

00:21:56,320 --> 00:22:00,240
cars

00:21:57,039 --> 00:22:03,440
connecting to the edge as a metric

00:22:00,240 --> 00:22:06,559
for the real time load of the edge

00:22:03,440 --> 00:22:09,760
and then adjust the size of the data

00:22:06,559 --> 00:22:12,080
sent from the individual cars depending

00:22:09,760 --> 00:22:14,799
on the number of connections

00:22:12,080 --> 00:22:15,600
so that the total traffic coming into

00:22:14,799 --> 00:22:18,559
the edge

00:22:15,600 --> 00:22:18,559
is not congested

00:22:19,039 --> 00:22:26,320
for example if the number of cars

00:22:22,640 --> 00:22:29,200
is low as shown on the left side

00:22:26,320 --> 00:22:31,360
the frequency of the transmissions and

00:22:29,200 --> 00:22:35,360
the video dissociation

00:22:31,360 --> 00:22:36,400
will be high but if the number of cars

00:22:35,360 --> 00:22:40,159
is high

00:22:36,400 --> 00:22:42,320
as shown on the right side the frequency

00:22:40,159 --> 00:22:44,480
of data transmission and visual

00:22:42,320 --> 00:22:50,559
resolution a little bit long

00:22:44,480 --> 00:22:50,559
to prevent congestion of mobile network

00:22:50,640 --> 00:22:56,320
by the way in practice we need to

00:22:52,960 --> 00:22:59,360
control it according to the specific

00:22:56,320 --> 00:23:00,000
application and its use so please note

00:22:59,360 --> 00:23:02,320
that

00:23:00,000 --> 00:23:04,720
this is just an example of a simple

00:23:02,320 --> 00:23:04,720
vessel

00:23:06,960 --> 00:23:14,240
so to check the feasibility of this idea

00:23:10,799 --> 00:23:18,559
we built and we built and experimented

00:23:14,240 --> 00:23:18,559
with a simple plc test environment

00:23:19,280 --> 00:23:26,000
we wanted to simulate a mobile network

00:23:22,400 --> 00:23:26,720
so we built a small lte emulation

00:23:26,000 --> 00:23:29,919
environment

00:23:26,720 --> 00:23:31,200
using comarch which is the open source

00:23:29,919 --> 00:23:35,360
project of

00:23:31,200 --> 00:23:39,520
onf open jerking foundation

00:23:35,360 --> 00:23:40,799
we also depart to edge applications or

00:23:39,520 --> 00:23:44,080
make applications

00:23:40,799 --> 00:23:46,799
at the location where the sp

00:23:44,080 --> 00:23:49,039
gateway will be connected as shown in

00:23:46,799 --> 00:23:52,159
this figure

00:23:49,039 --> 00:23:53,039
one is application to measure the load

00:23:52,159 --> 00:23:56,400
and control

00:23:53,039 --> 00:24:00,799
the data upload of each vehicle and

00:23:56,400 --> 00:24:03,360
there's a it's just a sample application

00:24:00,799 --> 00:24:05,679
to recognize the video sent from the

00:24:03,360 --> 00:24:05,679
figure

00:24:07,120 --> 00:24:15,200
the experimental scenario is as follows

00:24:11,760 --> 00:24:17,120
first the data blood control application

00:24:15,200 --> 00:24:19,120
measures the number of vehicles

00:24:17,120 --> 00:24:21,039
connected to the underlying mobile

00:24:19,120 --> 00:24:25,200
network

00:24:21,039 --> 00:24:28,240
then based on the number of connections

00:24:25,200 --> 00:24:31,120
a request is based to its vehicle to

00:24:28,240 --> 00:24:34,400
adjust the transmission frequency

00:24:31,120 --> 00:24:36,400
and visual resolution to change their

00:24:34,400 --> 00:24:39,760
process

00:24:36,400 --> 00:24:40,799
and to meet the process updated by the

00:24:39,760 --> 00:24:43,440
request

00:24:40,799 --> 00:24:45,760
each vehicle sends its video data to the

00:24:43,440 --> 00:24:49,200
video recognition app

00:24:45,760 --> 00:24:53,360
applications and this cycle

00:24:49,200 --> 00:24:53,360
will continue at regular intervals

00:24:53,760 --> 00:25:01,679
and here is the result of the experiment

00:24:58,559 --> 00:25:02,159
we measured the traffic of vehicle data

00:25:01,679 --> 00:25:05,840
coming

00:25:02,159 --> 00:25:08,080
into the video recognition application

00:25:05,840 --> 00:25:09,520
when the number of vehicles was

00:25:08,080 --> 00:25:12,640
increased by

00:25:09,520 --> 00:25:14,960
one car every 40 seconds

00:25:12,640 --> 00:25:15,679
the orange line represents the number of

00:25:14,960 --> 00:25:19,919
vehicles

00:25:15,679 --> 00:25:22,400
and the grand represent to the traffic

00:25:19,919 --> 00:25:24,159
and it was just confirmed that the total

00:25:22,400 --> 00:25:28,159
traffic did not increase

00:25:24,159 --> 00:25:33,440
linear the number of vehicles increased

00:25:28,159 --> 00:25:33,440
but remains roughly roughly concept

00:25:37,840 --> 00:25:44,480
and having presented two approaches and

00:25:41,440 --> 00:25:48,159
example of simple poc demo

00:25:44,480 --> 00:25:48,720
implementation let me add just a one

00:25:48,159 --> 00:25:52,720
comment

00:25:48,720 --> 00:25:56,080
about this so traditionally

00:25:52,720 --> 00:25:59,039
such experiments have required the

00:25:56,080 --> 00:26:00,400
cooperation of telecom careers and

00:25:59,039 --> 00:26:03,679
telecom equipment

00:26:00,400 --> 00:26:07,440
vendors and sometimes with

00:26:03,679 --> 00:26:11,600
paid contracts however

00:26:07,440 --> 00:26:14,799
this time plc implementation

00:26:11,600 --> 00:26:17,520
and experiments could be done quickly

00:26:14,799 --> 00:26:18,559
very quickly and easily using open

00:26:17,520 --> 00:26:23,200
source software

00:26:18,559 --> 00:26:25,600
by ourselves the open source

00:26:23,200 --> 00:26:27,200
of the telecom network technology makes

00:26:25,600 --> 00:26:30,880
it possible

00:26:27,200 --> 00:26:33,919
for end users like us to implement

00:26:30,880 --> 00:26:35,919
and test it ourselves so

00:26:33,919 --> 00:26:37,600
we are very confident that this will

00:26:35,919 --> 00:26:40,240
read

00:26:37,600 --> 00:26:43,200
new wave of innovation in telecom

00:26:40,240 --> 00:26:43,200
networks

00:26:44,880 --> 00:26:48,640
finally i will summarize the

00:26:46,480 --> 00:26:52,000
presentation

00:26:48,640 --> 00:26:55,200
in this session i introduced the

00:26:52,000 --> 00:26:56,720
use cases and challenges of connected

00:26:55,200 --> 00:26:59,520
cars

00:26:56,720 --> 00:27:00,559
and i'll train the promise of edge

00:26:59,520 --> 00:27:04,960
computing

00:27:00,559 --> 00:27:08,640
as an approach to solve those challenges

00:27:04,960 --> 00:27:11,039
and i showed the demanding challenges

00:27:08,640 --> 00:27:14,559
for practical implementation

00:27:11,039 --> 00:27:18,960
and finally i presented several of

00:27:14,559 --> 00:27:23,840
our approaches to solving those

00:27:18,960 --> 00:27:23,840
chances and some implementations

00:27:24,799 --> 00:27:35,840
that's all for my presentation thank you

00:27:43,279 --> 00:27:45,360

YouTube URL: https://www.youtube.com/watch?v=-ZEriVcZ25k


