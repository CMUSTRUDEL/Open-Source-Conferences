Title: Edge Lab -  Open Reference Architecture (RPis and More!) - Rob Hirschfeld, RackN
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	Edge Lab -  Open Reference Architecture (RPis and More!) - Rob Hirschfeld, RackN
Captions: 
	00:00:01,120 --> 00:00:04,720
hello and welcome to the edge

00:00:02,960 --> 00:00:06,480
infrastructures code session

00:00:04,720 --> 00:00:07,839
about edgelab.digital where we're going

00:00:06,480 --> 00:00:10,320
to be talking about

00:00:07,839 --> 00:00:11,679
simple repeatable and portable edge

00:00:10,320 --> 00:00:14,240
kubernetes

00:00:11,679 --> 00:00:15,120
my name is rob hirschfeld with rackn and

00:00:14,240 --> 00:00:17,119
i'm your guide

00:00:15,120 --> 00:00:18,960
on how to run and set up edge lab

00:00:17,119 --> 00:00:20,960
including a demo

00:00:18,960 --> 00:00:22,320
rackhand specializes in distributed

00:00:20,960 --> 00:00:24,640
infrastructure as code

00:00:22,320 --> 00:00:26,240
data center automation and so this is

00:00:24,640 --> 00:00:28,080
something that we've put together to try

00:00:26,240 --> 00:00:29,199
and create a repeatable experience for

00:00:28,080 --> 00:00:31,039
edge communities

00:00:29,199 --> 00:00:32,800
the mission for edgelab is simple it's

00:00:31,039 --> 00:00:34,399
about collaboration we're trying to

00:00:32,800 --> 00:00:36,559
unify edge builders

00:00:34,399 --> 00:00:37,920
looking at developers platform providers

00:00:36,559 --> 00:00:40,399
and infrastructure

00:00:37,920 --> 00:00:41,600
providers who all want to come together

00:00:40,399 --> 00:00:43,360
for both open source

00:00:41,600 --> 00:00:44,640
and commercial solutions i'm a board

00:00:43,360 --> 00:00:47,039
member for lf edge

00:00:44,640 --> 00:00:48,559
that's exactly the mission is to try and

00:00:47,039 --> 00:00:50,160
create a unified place where

00:00:48,559 --> 00:00:52,399
applications platforming and

00:00:50,160 --> 00:00:53,280
infrastructure all come together in a

00:00:52,399 --> 00:00:56,559
continuous

00:00:53,280 --> 00:00:58,399
feedback loop the problem that we have

00:00:56,559 --> 00:00:59,680
is that there's a high risk of proof of

00:00:58,399 --> 00:01:02,000
concept failures

00:00:59,680 --> 00:01:03,680
and distributed edge failures in general

00:01:02,000 --> 00:01:04,159
there's no shared architecture for the

00:01:03,680 --> 00:01:06,560
edge

00:01:04,159 --> 00:01:08,960
and design paralysis wastes resources

00:01:06,560 --> 00:01:09,280
where everybody is reinventing how to do

00:01:08,960 --> 00:01:11,600
this

00:01:09,280 --> 00:01:12,640
work and that means that we're building

00:01:11,600 --> 00:01:14,479
components without

00:01:12,640 --> 00:01:16,159
end-to-end integration or without a real

00:01:14,479 --> 00:01:16,799
plan to how how things are going to

00:01:16,159 --> 00:01:19,040
scale

00:01:16,799 --> 00:01:20,479
and the solution is simple we need to

00:01:19,040 --> 00:01:22,799
have shared resources

00:01:20,479 --> 00:01:24,479
we need a vendor-neutral edge platform

00:01:22,799 --> 00:01:26,080
that allows us to have a portable

00:01:24,479 --> 00:01:27,920
application architecture

00:01:26,080 --> 00:01:29,520
that's something that's not just about

00:01:27,920 --> 00:01:31,200
the hardware but about the software and

00:01:29,520 --> 00:01:33,280
the platforms that you run on that

00:01:31,200 --> 00:01:34,799
and it's not not sufficient for it to

00:01:33,280 --> 00:01:36,799
just be kubernetes

00:01:34,799 --> 00:01:38,079
but actually the whole environment that

00:01:36,799 --> 00:01:39,680
runs at the edge

00:01:38,079 --> 00:01:41,360
has to be designed repeatable and

00:01:39,680 --> 00:01:42,640
scalable for edge environments whether

00:01:41,360 --> 00:01:44,880
it's a single box

00:01:42,640 --> 00:01:46,000
tens of boxes or potentially thousands

00:01:44,880 --> 00:01:47,360
of environments

00:01:46,000 --> 00:01:49,759
as we get into larger and larger

00:01:47,360 --> 00:01:51,200
co-located edge infrastructures

00:01:49,759 --> 00:01:52,880
and most importantly these things

00:01:51,200 --> 00:01:54,320
together allow us to simplify

00:01:52,880 --> 00:01:56,079
collaboration so that

00:01:54,320 --> 00:01:58,240
if you do work that does something

00:01:56,079 --> 00:02:00,560
amazing at one layer of the stack

00:01:58,240 --> 00:02:02,000
that work should be portable so other

00:02:00,560 --> 00:02:04,719
innovators can enjoy it

00:02:02,000 --> 00:02:06,159
and leverage that work and what we know

00:02:04,719 --> 00:02:07,840
is is really straightforward this is a

00:02:06,159 --> 00:02:10,479
quote from matt breese

00:02:07,840 --> 00:02:11,200
with gartner that talks about the

00:02:10,479 --> 00:02:13,200
challenges

00:02:11,200 --> 00:02:15,280
of these proof of concepts and the

00:02:13,200 --> 00:02:16,000
failure rate of a proof of concept

00:02:15,280 --> 00:02:18,720
moving into

00:02:16,000 --> 00:02:19,920
a scale distributed infrastructure is

00:02:18,720 --> 00:02:21,599
incredibly high

00:02:19,920 --> 00:02:23,280
because just demonstrating that

00:02:21,599 --> 00:02:23,840
something works and integrates on one

00:02:23,280 --> 00:02:25,680
site

00:02:23,840 --> 00:02:29,120
is a very different problem than a

00:02:25,680 --> 00:02:29,120
distributed management plan

00:02:29,520 --> 00:02:33,840
and so this is where edge lab has become

00:02:32,160 --> 00:02:35,440
a pathway to production

00:02:33,840 --> 00:02:37,040
and it's not acceptable to just have

00:02:35,440 --> 00:02:37,680
throwaway environments and throw away

00:02:37,040 --> 00:02:39,280
efforts

00:02:37,680 --> 00:02:41,760
we want to make sure that when you're

00:02:39,280 --> 00:02:42,959
doing work on a proof of concept or a

00:02:41,760 --> 00:02:44,640
desktop lab

00:02:42,959 --> 00:02:46,720
or any layer of the automation that you

00:02:44,640 --> 00:02:48,400
can take that using infrastructure as

00:02:46,720 --> 00:02:51,120
code principles and scale it

00:02:48,400 --> 00:02:52,640
into a distributed architecture for that

00:02:51,120 --> 00:02:53,040
reason the edge lab work that we're

00:02:52,640 --> 00:02:54,400
doing

00:02:53,040 --> 00:02:56,879
uses the same software that's in

00:02:54,400 --> 00:02:59,200
production in global spanning enterprise

00:02:56,879 --> 00:03:02,319
infrastructures but shrunk down

00:02:59,200 --> 00:03:05,200
fully featured to run on raspberry pi's

00:03:02,319 --> 00:03:06,800
or whatever infrastructure you need we

00:03:05,200 --> 00:03:07,920
chose raspberry pi's as the initial

00:03:06,800 --> 00:03:10,400
deployment model

00:03:07,920 --> 00:03:12,560
because as a environment it is

00:03:10,400 --> 00:03:14,879
incredibly cost effective you can buy an

00:03:12,560 --> 00:03:16,560
entire edge lab including the switch and

00:03:14,879 --> 00:03:18,480
the supplies

00:03:16,560 --> 00:03:20,480
sd card is everything you need for under

00:03:18,480 --> 00:03:22,959
500.

00:03:20,480 --> 00:03:24,319
then that runs into a zero touch install

00:03:22,959 --> 00:03:27,280
lets you reboot and re

00:03:24,319 --> 00:03:29,040
reapply we keep things network isolated

00:03:27,280 --> 00:03:29,519
so that chatter between the raspberry

00:03:29,040 --> 00:03:32,000
pi's

00:03:29,519 --> 00:03:32,560
isn't bleeding into all of the other

00:03:32,000 --> 00:03:34,799
wi-fi

00:03:32,560 --> 00:03:36,080
environments is much more like what you

00:03:34,799 --> 00:03:36,959
would want to have in a real edge

00:03:36,080 --> 00:03:39,680
environment

00:03:36,959 --> 00:03:40,319
and then we pre-configured the edge lab

00:03:39,680 --> 00:03:43,200
to be

00:03:40,319 --> 00:03:43,760
k3s embedded so that you can actually

00:03:43,200 --> 00:03:45,599
run

00:03:43,760 --> 00:03:47,200
a kubernetes workload right out of the

00:03:45,599 --> 00:03:49,760
box in the infrastructure

00:03:47,200 --> 00:03:51,840
we also included open fast so you could

00:03:49,760 --> 00:03:54,159
do functions as a service also

00:03:51,840 --> 00:03:55,120
and then the whole system is designed to

00:03:54,159 --> 00:03:56,879
have a rapid

00:03:55,120 --> 00:03:58,879
redeployment a lot of times with pies

00:03:56,879 --> 00:04:01,120
you have to re-burn sd cards and you end

00:03:58,879 --> 00:04:03,120
up with a lot of

00:04:01,120 --> 00:04:04,640
moving parts to try and make things go

00:04:03,120 --> 00:04:05,760
with edge lab it's an automated

00:04:04,640 --> 00:04:07,760
infrastructure

00:04:05,760 --> 00:04:09,920
like a data center would be and so it's

00:04:07,760 --> 00:04:11,599
designed to have a rapid reset where you

00:04:09,920 --> 00:04:15,120
reset the power and you're back in

00:04:11,599 --> 00:04:16,880
business in less than 30 seconds

00:04:15,120 --> 00:04:18,560
so if you look at the environment that

00:04:16,880 --> 00:04:20,079
we're going to work walk in the demo

00:04:18,560 --> 00:04:22,320
it's four raspberry pi's of course you

00:04:20,079 --> 00:04:23,199
could have more or fewer the first pie

00:04:22,320 --> 00:04:25,280
what we call pi

00:04:23,199 --> 00:04:27,520
zero is the management node so it

00:04:25,280 --> 00:04:28,560
provides dhcp and pixie for the rest of

00:04:27,520 --> 00:04:31,520
the environment

00:04:28,560 --> 00:04:33,360
and we do pixie boot raspberry pi's sd

00:04:31,520 --> 00:04:34,880
cards are just used for storage in this

00:04:33,360 --> 00:04:38,080
environment

00:04:34,880 --> 00:04:39,759
uh the wi-fi of that first raspberry pi

00:04:38,080 --> 00:04:41,120
provides the internet gateway so all the

00:04:39,759 --> 00:04:43,360
systems have access

00:04:41,120 --> 00:04:45,680
to the internet even without having to

00:04:43,360 --> 00:04:47,680
activate wi-fi on all the other systems

00:04:45,680 --> 00:04:50,560
it makes it very very convenient to get

00:04:47,680 --> 00:04:53,040
everything up and running quickly

00:04:50,560 --> 00:04:55,120
and then from there they're given static

00:04:53,040 --> 00:04:56,880
addresses out of the dhcp range so we

00:04:55,120 --> 00:04:58,479
have known good addresses it makes it

00:04:56,880 --> 00:05:00,479
very easy to set up

00:04:58,479 --> 00:05:02,240
the demos i do in the way i operate i

00:05:00,479 --> 00:05:05,160
actually use a wired interface back into

00:05:02,240 --> 00:05:08,240
this switch so i set my pc to be

00:05:05,160 --> 00:05:10,080
10.3.14.2 and then i can directly attach

00:05:08,240 --> 00:05:12,720
to pi zero

00:05:10,080 --> 00:05:14,639
from a blank setup using its its initial

00:05:12,720 --> 00:05:15,759
sd card provisioning and then we have sd

00:05:14,639 --> 00:05:18,240
cards that enable

00:05:15,759 --> 00:05:19,840
pixie booting in the raspberry pi's in a

00:05:18,240 --> 00:05:21,919
specialized configuration

00:05:19,840 --> 00:05:23,360
uh built into the into digital rebar

00:05:21,919 --> 00:05:24,320
that enables that pixie boot

00:05:23,360 --> 00:05:26,400
configuration

00:05:24,320 --> 00:05:27,600
this is a really significant thing we

00:05:26,400 --> 00:05:29,280
can pixy boot pretty much

00:05:27,600 --> 00:05:31,520
any infrastructure you have including

00:05:29,280 --> 00:05:32,479
the pies and what that means is that

00:05:31,520 --> 00:05:34,720
today

00:05:32,479 --> 00:05:36,160
we're showing you raspberry pi's for the

00:05:34,720 --> 00:05:39,280
edge lab because of the low

00:05:36,160 --> 00:05:40,800
cost to get started but you could be

00:05:39,280 --> 00:05:42,800
easily doing this against

00:05:40,800 --> 00:05:46,080
any hardware if you want to use nooks

00:05:42,800 --> 00:05:48,720
full enterprise servers super micros

00:05:46,080 --> 00:05:50,320
any edge enabled device will work with

00:05:48,720 --> 00:05:51,680
this infrastructure it doesn't require

00:05:50,320 --> 00:05:55,039
out-of-band management

00:05:51,680 --> 00:05:57,600
it doesn't require you know specific

00:05:55,039 --> 00:06:00,240
hardware or instruction sets

00:05:57,600 --> 00:06:02,319
even vms can work just fine and we test

00:06:00,240 --> 00:06:03,759
against virtual machines all the time so

00:06:02,319 --> 00:06:06,160
while we're showing you edge lab today

00:06:03,759 --> 00:06:08,639
on raspberry pi's the system is already

00:06:06,160 --> 00:06:10,960
capable of doing much more

00:06:08,639 --> 00:06:12,319
broad hardware automation and being used

00:06:10,960 --> 00:06:15,440
in

00:06:12,319 --> 00:06:15,440
very distributed ways

00:06:15,919 --> 00:06:19,520
so let's get into some demos and i'll

00:06:17,919 --> 00:06:21,440
show you exactly what it's like to bring

00:06:19,520 --> 00:06:24,000
up an edge lab

00:06:21,440 --> 00:06:25,440
so welcome to the edge lab environment

00:06:24,000 --> 00:06:28,160
this is a

00:06:25,440 --> 00:06:29,840
perfectly normal digital rebar install

00:06:28,160 --> 00:06:30,880
i've already run through the initial

00:06:29,840 --> 00:06:32,840
setup phases

00:06:30,880 --> 00:06:34,400
and i encourage you to go to

00:06:32,840 --> 00:06:36,720
edgelab.digital

00:06:34,400 --> 00:06:38,639
to review the documentation where you

00:06:36,720 --> 00:06:39,039
can see the bill of materials you can

00:06:38,639 --> 00:06:41,440
see

00:06:39,039 --> 00:06:43,039
bootstrapping videos including visual

00:06:41,440 --> 00:06:45,840
build instructions that take you through

00:06:43,039 --> 00:06:47,759
the entire environment

00:06:45,840 --> 00:06:49,280
once you've run that initial sd card and

00:06:47,759 --> 00:06:53,039
gotten things running

00:06:49,280 --> 00:06:54,800
you will come into our regular ux

00:06:53,039 --> 00:06:56,720
from this perspective and this is

00:06:54,800 --> 00:06:57,599
provided to create the infrastructure's

00:06:56,720 --> 00:07:00,639
code environment

00:06:57,599 --> 00:07:02,080
it's very important that to understand

00:07:00,639 --> 00:07:04,000
how deeply we've gone from

00:07:02,080 --> 00:07:05,840
infrastructure as code here even the

00:07:04,000 --> 00:07:07,840
bootstrapping of the system itself

00:07:05,840 --> 00:07:09,360
runs out of our infrastructure as code

00:07:07,840 --> 00:07:10,400
libraries that means that if we make

00:07:09,360 --> 00:07:13,039
improvements

00:07:10,400 --> 00:07:14,960
in the catalog even though the edge lab

00:07:13,039 --> 00:07:17,520
is running completely isolated behind

00:07:14,960 --> 00:07:19,440
your firewall it can pull in the latest

00:07:17,520 --> 00:07:22,319
infrastructure's code automation

00:07:19,440 --> 00:07:23,840
to build itself in a comprehensive ways

00:07:22,319 --> 00:07:25,680
as we make improvements to the

00:07:23,840 --> 00:07:26,720
kubernetes installs or the lab

00:07:25,680 --> 00:07:28,240
automation

00:07:26,720 --> 00:07:30,000
those can be brought in through the

00:07:28,240 --> 00:07:33,120
digital rebar catalog

00:07:30,000 --> 00:07:34,479
which is completely open source so

00:07:33,120 --> 00:07:35,840
everything that i'm showing you out of

00:07:34,479 --> 00:07:38,160
these catalog entries

00:07:35,840 --> 00:07:39,680
you can actually go to the digital rebar

00:07:38,160 --> 00:07:44,400
repositories

00:07:39,680 --> 00:07:46,879
i can spell it correctly and

00:07:44,400 --> 00:07:48,720
you can look at the edgelab code modify

00:07:46,879 --> 00:07:49,680
it make improvements contribute back to

00:07:48,720 --> 00:07:52,240
the community

00:07:49,680 --> 00:07:53,680
and enhance this environment for your

00:07:52,240 --> 00:07:55,680
environment in ways that allow

00:07:53,680 --> 00:07:57,759
other people to leverage that work just

00:07:55,680 --> 00:08:00,960
like we've done with the k3s install and

00:07:57,759 --> 00:08:00,960
the open fas installs

00:08:01,199 --> 00:08:05,039
so over here is our catalog and you can

00:08:03,440 --> 00:08:06,639
see the bootstrapping has come through

00:08:05,039 --> 00:08:10,240
and already set those up

00:08:06,639 --> 00:08:12,479
it is also in our subnet definition for

00:08:10,240 --> 00:08:14,000
dhcp it's also defined our edge lab

00:08:12,479 --> 00:08:15,919
infrastructure

00:08:14,000 --> 00:08:18,720
so that we can net boot those raspberry

00:08:15,919 --> 00:08:21,199
pi's and it's to find itself

00:08:18,720 --> 00:08:22,479
pi zero as this first machine so that it

00:08:21,199 --> 00:08:24,400
can complete the

00:08:22,479 --> 00:08:26,319
work bootstrapping workflow that's done

00:08:24,400 --> 00:08:27,120
completely automatically for you after

00:08:26,319 --> 00:08:28,720
you start

00:08:27,120 --> 00:08:30,160
the infrastructure we have other demo

00:08:28,720 --> 00:08:31,599
videos so i'm not going to show you the

00:08:30,160 --> 00:08:33,519
actual bootstrapping

00:08:31,599 --> 00:08:35,519
typing that initial command and watching

00:08:33,519 --> 00:08:36,640
it log in what i'm going to do instead

00:08:35,519 --> 00:08:38,800
is i'm going to

00:08:36,640 --> 00:08:41,279
go into the boot process for the other

00:08:38,800 --> 00:08:43,360
machines i have a edge lab on my desk

00:08:41,279 --> 00:08:45,519
and because i'm using power over

00:08:43,360 --> 00:08:48,399
ethernet all i have to do is plug them

00:08:45,519 --> 00:08:49,760
in one at a time

00:08:48,399 --> 00:08:52,160
and they will go through and boot you

00:08:49,760 --> 00:08:55,519
can hear the clicks as the network cards

00:08:52,160 --> 00:08:58,959
start that bootstrap looks like this

00:08:55,519 --> 00:09:00,959
if i was to attach an hdmi capture card

00:08:58,959 --> 00:09:03,440
i would produce another video like this

00:09:00,959 --> 00:09:05,519
and watch the machines netbooting

00:09:03,440 --> 00:09:07,600
so it's going through a sample test

00:09:05,519 --> 00:09:10,240
infrastructure phase

00:09:07,600 --> 00:09:10,800
and then it'll very shortly actually

00:09:10,240 --> 00:09:13,440
boot

00:09:10,800 --> 00:09:13,839
uh the discovery operating system so we

00:09:13,440 --> 00:09:16,160
use

00:09:13,839 --> 00:09:17,839
an in-memory os this is why we prefer

00:09:16,160 --> 00:09:20,240
the four and eight

00:09:17,839 --> 00:09:22,320
gig ram raspberry pi's although other

00:09:20,240 --> 00:09:24,480
ones would work

00:09:22,320 --> 00:09:25,600
that will then attach the local storage

00:09:24,480 --> 00:09:28,399
and we will have

00:09:25,600 --> 00:09:28,720
the system running in an immutable state

00:09:28,399 --> 00:09:30,320
so

00:09:28,720 --> 00:09:31,760
we can net boot very quickly and do

00:09:30,320 --> 00:09:33,519
these resets and that's exactly what

00:09:31,760 --> 00:09:35,279
you're watching here is the pixie boot

00:09:33,519 --> 00:09:38,320
of those raspberry pi's

00:09:35,279 --> 00:09:38,320
coming into the system

00:09:40,320 --> 00:09:44,160
so that's what's happening in the

00:09:41,760 --> 00:09:46,800
background

00:09:44,160 --> 00:09:47,920
i am waiting otherwise for and i'm in

00:09:46,800 --> 00:09:49,360
the way a little bit

00:09:47,920 --> 00:09:51,440
for the machines to come in and be

00:09:49,360 --> 00:09:53,360
created and the leases to come through

00:09:51,440 --> 00:09:55,200
you can see the live event stream coming

00:09:53,360 --> 00:09:57,200
in and watching those

00:09:55,200 --> 00:09:59,440
so if i refresh here what you'll see is

00:09:57,200 --> 00:10:01,440
i have the systems and they're available

00:09:59,440 --> 00:10:02,720
they're being discovered if i click down

00:10:01,440 --> 00:10:04,320
into this

00:10:02,720 --> 00:10:06,160
what you'll see is that we've gone

00:10:04,320 --> 00:10:07,040
through our normal discovery process

00:10:06,160 --> 00:10:09,760
which includes

00:10:07,040 --> 00:10:11,519
a very deep scan of all of the

00:10:09,760 --> 00:10:14,079
capabilities of the system

00:10:11,519 --> 00:10:19,839
and inventoried it so that you can then

00:10:14,079 --> 00:10:19,839
use that for downstream automation

00:10:21,040 --> 00:10:24,399
so now that we have all three of the

00:10:22,800 --> 00:10:26,720
systems registered

00:10:24,399 --> 00:10:29,279
and ready to go it's time to install

00:10:26,720 --> 00:10:31,920
kubernetes

00:10:29,279 --> 00:10:33,519
digital rebar does this as a workflow

00:10:31,920 --> 00:10:34,160
system and it's worth actually showing

00:10:33,519 --> 00:10:36,000
you

00:10:34,160 --> 00:10:37,839
some of the swim lanes for that because

00:10:36,000 --> 00:10:40,480
the actual install process

00:10:37,839 --> 00:10:41,680
only takes a couple of seconds and so i

00:10:40,480 --> 00:10:43,440
want to show you how

00:10:41,680 --> 00:10:44,880
how that process works what we've

00:10:43,440 --> 00:10:46,720
already gone through is bootstrapping

00:10:44,880 --> 00:10:48,560
the infrastructure is code system

00:10:46,720 --> 00:10:51,120
downloading the isos all that happens

00:10:48,560 --> 00:10:53,600
automatically through our bootstrapping

00:10:51,120 --> 00:10:55,200
when we kick in the next process we'll

00:10:53,600 --> 00:10:56,720
take the discovered nodes which we have

00:10:55,200 --> 00:10:58,480
now and i've shown you how they're net

00:10:56,720 --> 00:10:59,279
booted discovered and registered in the

00:10:58,480 --> 00:11:00,800
system

00:10:59,279 --> 00:11:02,720
our next step will go through the

00:11:00,800 --> 00:11:04,000
kubernetes install process

00:11:02,720 --> 00:11:06,560
all three of the machines will start at

00:11:04,000 --> 00:11:09,120
the same time work to elect a leader

00:11:06,560 --> 00:11:10,320
once that leader is elected only takes

00:11:09,120 --> 00:11:12,000
microseconds

00:11:10,320 --> 00:11:14,000
that leader will then proceed to

00:11:12,000 --> 00:11:16,320
download the kubernetes the k3s

00:11:14,000 --> 00:11:18,560
in this case binaries while the other

00:11:16,320 --> 00:11:19,360
ones wait for the system to have that

00:11:18,560 --> 00:11:22,160
leader

00:11:19,360 --> 00:11:24,000
completely built it'll build kubernetes

00:11:22,160 --> 00:11:26,000
generate the credentials pass them back

00:11:24,000 --> 00:11:28,800
to the rest of the cluster and allow the

00:11:26,000 --> 00:11:30,720
system to join kubernetes that whole

00:11:28,800 --> 00:11:33,839
process once the binaries are downloaded

00:11:30,720 --> 00:11:36,320
usually takes about 20 seconds

00:11:33,839 --> 00:11:36,880
from there we will continue through the

00:11:36,320 --> 00:11:38,959
process

00:11:36,880 --> 00:11:39,920
using the freshly installed kubernetes

00:11:38,959 --> 00:11:42,640
we'll install the

00:11:39,920 --> 00:11:43,360
dashboard run install helm run any helm

00:11:42,640 --> 00:11:45,680
charts that are

00:11:43,360 --> 00:11:47,600
done and then if we've set they say open

00:11:45,680 --> 00:11:50,240
fast for our helm charts it'll complete

00:11:47,600 --> 00:11:51,760
that process and install open faz also

00:11:50,240 --> 00:11:53,920
which i will demonstrate as part of this

00:11:51,760 --> 00:11:56,639
run all of that process

00:11:53,920 --> 00:11:57,760
is only takes a few clicks to set up and

00:11:56,639 --> 00:12:00,399
get running

00:11:57,760 --> 00:12:02,240
so let's start going in this case i'm

00:12:00,399 --> 00:12:04,560
selecting my three machines i'm going to

00:12:02,240 --> 00:12:05,519
go ahead and put the open fast profile

00:12:04,560 --> 00:12:08,639
on them

00:12:05,519 --> 00:12:10,000
in that profile it has the fat the

00:12:08,639 --> 00:12:11,760
helm charts that are necessary to

00:12:10,000 --> 00:12:14,079
install open fast we won't have time to

00:12:11,760 --> 00:12:16,240
get that running but i want to show you

00:12:14,079 --> 00:12:17,920
what that looks like just to get it

00:12:16,240 --> 00:12:21,440
installed what we are going to do

00:12:17,920 --> 00:12:23,680
is go ahead and select the k3s workflow

00:12:21,440 --> 00:12:24,800
install them on the system and then let

00:12:23,680 --> 00:12:27,600
that process

00:12:24,800 --> 00:12:29,519
begin what you'll see happening here is

00:12:27,600 --> 00:12:31,440
the machines all start the kubernetes

00:12:29,519 --> 00:12:33,200
workflow and go through exactly what i

00:12:31,440 --> 00:12:35,680
was showing you in the slide process

00:12:33,200 --> 00:12:36,399
if i jump into the shared profile that's

00:12:35,680 --> 00:12:39,040
part of this

00:12:36,399 --> 00:12:39,920
you'll see that the leader of this

00:12:39,040 --> 00:12:43,360
cluster

00:12:39,920 --> 00:12:46,160
is machine 102 so if i come back here

00:12:43,360 --> 00:12:48,720
look at the machine with ip address 102

00:12:46,160 --> 00:12:51,120
and click into its k3s install

00:12:48,720 --> 00:12:52,399
we'll see a live log of the system

00:12:51,120 --> 00:12:55,120
actually doing that

00:12:52,399 --> 00:12:55,839
install process so it's mounted the sd

00:12:55,120 --> 00:12:58,000
cards

00:12:55,839 --> 00:13:00,160
and then it's running through building

00:12:58,000 --> 00:13:00,800
the k3s service and getting that turned

00:13:00,160 --> 00:13:02,480
on

00:13:00,800 --> 00:13:04,079
it takes a little while for that k3s

00:13:02,480 --> 00:13:04,720
service to come up on these raspberry

00:13:04,079 --> 00:13:07,040
pi's

00:13:04,720 --> 00:13:08,560
and once it does it will then be able to

00:13:07,040 --> 00:13:10,240
generate all of the downstream

00:13:08,560 --> 00:13:13,120
components that we need

00:13:10,240 --> 00:13:13,760
to make things go so now we're waiting

00:13:13,120 --> 00:13:16,880
uh

00:13:13,760 --> 00:13:19,120
for some settling time and

00:13:16,880 --> 00:13:20,160
the cluster is now starting so that's

00:13:19,120 --> 00:13:23,040
about it

00:13:20,160 --> 00:13:24,399
it's generating secure tokens and admin

00:13:23,040 --> 00:13:27,839
config files

00:13:24,399 --> 00:13:31,040
and so we can watch the system go

00:13:27,839 --> 00:13:32,560
but hold on i'm going to interrupt this

00:13:31,040 --> 00:13:34,399
presentation i realized it was 20

00:13:32,560 --> 00:13:39,040
minutes long and i have 30 minute slots

00:13:34,399 --> 00:13:40,560
so it's a bonus material for you

00:13:39,040 --> 00:13:42,160
in going through this demo really

00:13:40,560 --> 00:13:44,480
quickly one of the things that we miss

00:13:42,160 --> 00:13:46,480
is the infrastructure is code components

00:13:44,480 --> 00:13:48,320
so that you can be part of the community

00:13:46,480 --> 00:13:50,000
and extend and add to this

00:13:48,320 --> 00:13:51,839
infrastructure and i'm going to take a

00:13:50,000 --> 00:13:54,160
couple minutes since we have them

00:13:51,839 --> 00:13:55,360
to show you exactly what that looks like

00:13:54,160 --> 00:13:57,440
because really

00:13:55,360 --> 00:13:59,120
how you add and extend the system is

00:13:57,440 --> 00:14:00,320
critically important because you want to

00:13:59,120 --> 00:14:03,600
build on top

00:14:00,320 --> 00:14:04,320
not reset or recalibrate so let me show

00:14:03,600 --> 00:14:06,240
you

00:14:04,320 --> 00:14:08,320
how this looks and everything i'm going

00:14:06,240 --> 00:14:10,720
to show you is in github so if i jump

00:14:08,320 --> 00:14:12,560
over to my github repository as i showed

00:14:10,720 --> 00:14:15,440
you before in edge lab

00:14:12,560 --> 00:14:16,720
the parameters profiles tasks stages are

00:14:15,440 --> 00:14:19,839
all part of this

00:14:16,720 --> 00:14:22,320
in digital rebar the overall

00:14:19,839 --> 00:14:22,959
intent is called a workflow workflows

00:14:22,320 --> 00:14:25,680
are made up

00:14:22,959 --> 00:14:27,040
of stages stages are made out of tasks

00:14:25,680 --> 00:14:27,600
tasks are where most of that work is

00:14:27,040 --> 00:14:29,199
done

00:14:27,600 --> 00:14:30,560
tasks can actually have sub components

00:14:29,199 --> 00:14:32,959
called templates so if you have to build

00:14:30,560 --> 00:14:34,720
a configuration file out of yaml

00:14:32,959 --> 00:14:36,880
or bash script that you use in a whole

00:14:34,720 --> 00:14:39,600
bunch of places or a terraform

00:14:36,880 --> 00:14:41,519
or an ansible playbook all those things

00:14:39,600 --> 00:14:44,079
can be created as templates and also

00:14:41,519 --> 00:14:45,920
stored and then accessible as files when

00:14:44,079 --> 00:14:47,199
you run a task

00:14:45,920 --> 00:14:49,839
pretty straightforward when you think

00:14:47,199 --> 00:14:52,800
about it this is really just building up

00:14:49,839 --> 00:14:54,240
an application or a workflow automation

00:14:52,800 --> 00:14:56,720
out of out of components

00:14:54,240 --> 00:14:57,600
but doing it in a source controlled way

00:14:56,720 --> 00:15:01,760
is what makes it

00:14:57,600 --> 00:15:04,000
infrastructure is code so from there

00:15:01,760 --> 00:15:06,639
this workflow is actually composed of

00:15:04,000 --> 00:15:09,760
multiple stages the modular aspect

00:15:06,639 --> 00:15:11,839
is essential to creating repeatable work

00:15:09,760 --> 00:15:12,959
because you don't want to have to figure

00:15:11,839 --> 00:15:16,480
out how to image

00:15:12,959 --> 00:15:18,720
a server or set its bios or install an

00:15:16,480 --> 00:15:21,199
operating system or install kubernetes

00:15:18,720 --> 00:15:22,639
we have a huge catalog of standard

00:15:21,199 --> 00:15:24,959
components that are proven at

00:15:22,639 --> 00:15:27,760
enterprise scale and can be applied even

00:15:24,959 --> 00:15:29,600
on small form factor devices

00:15:27,760 --> 00:15:31,839
as you build those things up you can

00:15:29,600 --> 00:15:34,399
then extend and add yourself

00:15:31,839 --> 00:15:35,040
and it becomes just a process of going

00:15:34,399 --> 00:15:36,880
through

00:15:35,040 --> 00:15:38,959
building up what those look like so let

00:15:36,880 --> 00:15:39,600
me go into one as an example here's our

00:15:38,959 --> 00:15:42,800
k3s

00:15:39,600 --> 00:15:45,279
install process the k3s install stage

00:15:42,800 --> 00:15:46,320
has a single task that installs k3s

00:15:45,279 --> 00:15:48,000
we're actually in the process of

00:15:46,320 --> 00:15:50,240
refactoring this to break

00:15:48,000 --> 00:15:51,920
that into even smaller units so that

00:15:50,240 --> 00:15:55,199
it's more composable

00:15:51,920 --> 00:15:56,959
and that one task decomposes into a

00:15:55,199 --> 00:15:59,440
template now you might be thinking

00:15:56,959 --> 00:16:00,480
that's a lot of decomposition why do i

00:15:59,440 --> 00:16:02,720
need all those things

00:16:00,480 --> 00:16:03,680
and it's about code reuse so the example

00:16:02,720 --> 00:16:06,160
i'm showing you

00:16:03,680 --> 00:16:08,079
for the deployed system is entirely

00:16:06,160 --> 00:16:10,160
read-only if i want to make changes

00:16:08,079 --> 00:16:11,759
to it we have a way that i can go

00:16:10,160 --> 00:16:13,839
through and do

00:16:11,759 --> 00:16:16,000
build actually build this content pack

00:16:13,839 --> 00:16:18,240
and then upload it as a unit

00:16:16,000 --> 00:16:19,360
i don't edit things on an endpoint at

00:16:18,240 --> 00:16:22,639
all i actually do it

00:16:19,360 --> 00:16:23,360
all as code upload and then test and we

00:16:22,639 --> 00:16:25,279
have videos

00:16:23,360 --> 00:16:26,480
explaining exactly how to do this but

00:16:25,279 --> 00:16:28,560
this is essential

00:16:26,480 --> 00:16:30,959
for infrastructures code so if i look at

00:16:28,560 --> 00:16:31,600
my k3s tasks this is the one i'm looking

00:16:30,959 --> 00:16:33,199
at

00:16:31,600 --> 00:16:34,560
you'll see it's very short it is

00:16:33,199 --> 00:16:35,120
basically telling me to use this

00:16:34,560 --> 00:16:37,440
template

00:16:35,120 --> 00:16:39,199
so i can come back up look at the

00:16:37,440 --> 00:16:41,600
template

00:16:39,199 --> 00:16:43,440
k3s install right here and this is

00:16:41,600 --> 00:16:44,480
exactly the same thing that i'm showing

00:16:43,440 --> 00:16:47,440
you in

00:16:44,480 --> 00:16:48,399
the platform itself so all of this code

00:16:47,440 --> 00:16:51,199
here

00:16:48,399 --> 00:16:52,800
is what runs that infrastructure's code

00:16:51,199 --> 00:16:54,320
process and it's it's actually pretty

00:16:52,800 --> 00:16:57,440
straightforward stuff it

00:16:54,320 --> 00:16:59,360
checks the architecture it opens up the

00:16:57,440 --> 00:17:00,240
firewall to allow kubernetes to work

00:16:59,360 --> 00:17:03,040
correctly

00:17:00,240 --> 00:17:04,640
it downloads kubernetes in this case

00:17:03,040 --> 00:17:05,679
this actually mounts the drive so that

00:17:04,640 --> 00:17:08,880
they're available

00:17:05,679 --> 00:17:08,880
this code does

00:17:09,360 --> 00:17:13,280
a container d that sets up the storage

00:17:11,120 --> 00:17:17,039
platform

00:17:13,280 --> 00:17:20,480
this code actually starts the download

00:17:17,039 --> 00:17:21,360
this if it's the leader will start the

00:17:20,480 --> 00:17:24,160
bind process

00:17:21,360 --> 00:17:25,919
otherwise if it's not it will wait so

00:17:24,160 --> 00:17:27,839
all of those steps that i had are very

00:17:25,919 --> 00:17:30,000
clearly delineated in code

00:17:27,839 --> 00:17:31,760
and because that code is out in the open

00:17:30,000 --> 00:17:33,840
if you find a bug or enhancement

00:17:31,760 --> 00:17:35,679
you can then extend it there's another

00:17:33,840 --> 00:17:38,480
important point that i want to show

00:17:35,679 --> 00:17:39,360
while we have a moment and that's this

00:17:38,480 --> 00:17:43,039
concept

00:17:39,360 --> 00:17:45,120
of parameters so the items that are used

00:17:43,039 --> 00:17:46,559
in that code some of it's inferred from

00:17:45,120 --> 00:17:48,640
the system but a lot of it actually

00:17:46,559 --> 00:17:50,799
comes out of the parameter system

00:17:48,640 --> 00:17:52,400
parameters in our system can be defined

00:17:50,799 --> 00:17:55,600
completely ad hoc

00:17:52,400 --> 00:17:57,280
but you can also define them in advance

00:17:55,600 --> 00:17:58,799
and then type them and control them and

00:17:57,280 --> 00:18:00,880
provide safe defaults

00:17:58,799 --> 00:18:02,160
so if i was to look for our k3s

00:18:00,880 --> 00:18:04,720
components here

00:18:02,160 --> 00:18:06,320
i might be able to come in and see that

00:18:04,720 --> 00:18:09,360
i have a download url

00:18:06,320 --> 00:18:10,799
with a safe default in it so if you

00:18:09,360 --> 00:18:11,919
don't provide an override it will use

00:18:10,799 --> 00:18:14,320
that default

00:18:11,919 --> 00:18:16,320
that allows us to have this very great

00:18:14,320 --> 00:18:17,280
out of box experience without taking any

00:18:16,320 --> 00:18:20,080
control away

00:18:17,280 --> 00:18:21,840
from an operator and we do this

00:18:20,080 --> 00:18:25,520
consistently over and over again

00:18:21,840 --> 00:18:27,760
by having parameters that are secure

00:18:25,520 --> 00:18:30,240
so that you can store secure data and

00:18:27,760 --> 00:18:34,080
not have it generally available

00:18:30,240 --> 00:18:36,000
and also well defined and typed so even

00:18:34,080 --> 00:18:37,840
if i come in and look at my cluster

00:18:36,000 --> 00:18:40,400
definition

00:18:37,840 --> 00:18:41,039
the cluster leader spec here actually

00:18:40,400 --> 00:18:43,919
has a

00:18:41,039 --> 00:18:45,600
json schema and that schema is enforced

00:18:43,919 --> 00:18:46,640
down to the properties and types on the

00:18:45,600 --> 00:18:49,840
properties

00:18:46,640 --> 00:18:52,320
this type of careful parameterization on

00:18:49,840 --> 00:18:52,799
your code infrastructure as code ensures

00:18:52,320 --> 00:18:55,600
that the

00:18:52,799 --> 00:18:57,760
inputs into that that workflow are

00:18:55,600 --> 00:18:59,679
consistent and vetted

00:18:57,760 --> 00:19:00,880
and these things together create a very

00:18:59,679 --> 00:19:03,600
safe environment

00:19:00,880 --> 00:19:04,160
so that you can confidently extend and

00:19:03,600 --> 00:19:05,360
add

00:19:04,160 --> 00:19:07,200
without worrying that you're going to be

00:19:05,360 --> 00:19:08,960
breaking some upstream or downstream

00:19:07,200 --> 00:19:12,799
dependency

00:19:08,960 --> 00:19:14,799
and finally how do you access all of

00:19:12,799 --> 00:19:16,640
this content

00:19:14,799 --> 00:19:18,000
we've put together a catalog and made it

00:19:16,640 --> 00:19:20,559
very easy to extend

00:19:18,000 --> 00:19:22,480
and bring new components in so from the

00:19:20,559 --> 00:19:24,559
ux there's a catalog version there's a

00:19:22,480 --> 00:19:26,799
cli that actually lets you

00:19:24,559 --> 00:19:28,400
make catalog requests and request

00:19:26,799 --> 00:19:30,400
specific versions this is actually

00:19:28,400 --> 00:19:32,480
backed by a giant json file

00:19:30,400 --> 00:19:33,440
where you can look things up completely

00:19:32,480 --> 00:19:35,120
offline we have

00:19:33,440 --> 00:19:37,360
people in the community doing exactly

00:19:35,120 --> 00:19:39,600
that and so i can pick things that i'm

00:19:37,360 --> 00:19:42,320
interested in doing say burn in

00:19:39,600 --> 00:19:44,000
processes i can pick a version so we go

00:19:42,320 --> 00:19:44,880
back several versions or the latest

00:19:44,000 --> 00:19:47,360
version

00:19:44,880 --> 00:19:48,720
and then i can simply install them so if

00:19:47,360 --> 00:19:50,400
i click a button here

00:19:48,720 --> 00:19:51,760
it will go through and pull in the

00:19:50,400 --> 00:19:53,600
relevant content pack

00:19:51,760 --> 00:19:55,360
and add it into my system with the

00:19:53,600 --> 00:19:56,960
correct version

00:19:55,360 --> 00:19:58,640
in multi-site we actually have version

00:19:56,960 --> 00:20:00,320
sets and can synchronize this across the

00:19:58,640 --> 00:20:01,360
distributed fleet there's some amazing

00:20:00,320 --> 00:20:04,000
consequences

00:20:01,360 --> 00:20:04,960
of having a very clearly delineated

00:20:04,000 --> 00:20:09,280
content

00:20:04,960 --> 00:20:11,120
and catalog system baked into how you do

00:20:09,280 --> 00:20:12,880
and manage these deployments and these

00:20:11,120 --> 00:20:13,120
aren't just content but they actually

00:20:12,880 --> 00:20:16,960
are

00:20:13,120 --> 00:20:16,960
system extensions that we call plugins

00:20:17,200 --> 00:20:20,720
and you can actually see them if you

00:20:18,960 --> 00:20:23,840
come back up into the

00:20:20,720 --> 00:20:25,600
repository here the same library items

00:20:23,840 --> 00:20:28,880
that i added are listed here

00:20:25,600 --> 00:20:30,960
for you to explore and extend

00:20:28,880 --> 00:20:32,480
thank you i hope this little

00:20:30,960 --> 00:20:34,240
introduction to infrastructure's code

00:20:32,480 --> 00:20:37,520
was helpful i have much longer

00:20:34,240 --> 00:20:39,440
infrastructures code tutorials and now

00:20:37,520 --> 00:20:40,799
back to your regularly scheduled

00:20:39,440 --> 00:20:42,480
programming

00:20:40,799 --> 00:20:44,480
now in this case what you'll see is the

00:20:42,480 --> 00:20:47,600
kubernetes on the

00:20:44,480 --> 00:20:49,679
workers are already finished the

00:20:47,600 --> 00:20:51,120
leader is going through and doing

00:20:49,679 --> 00:20:52,720
additional work so in this case

00:20:51,120 --> 00:20:54,960
installing the dashboard

00:20:52,720 --> 00:21:03,840
and eventually installing open faz as

00:20:54,960 --> 00:21:03,840
part of its instruction set

00:21:09,360 --> 00:21:14,640
so what i want to do here is jump into

00:21:12,799 --> 00:21:16,320
that profile again you remember we have

00:21:14,640 --> 00:21:18,000
the leaders but now that the cluster has

00:21:16,320 --> 00:21:18,640
been built we've collected additional

00:21:18,000 --> 00:21:20,640
data

00:21:18,640 --> 00:21:21,840
about what the system is doing so that

00:21:20,640 --> 00:21:23,679
means that we have a

00:21:21,840 --> 00:21:25,280
token to log into the dashboard that's

00:21:23,679 --> 00:21:27,919
been generated for us

00:21:25,280 --> 00:21:29,760
we also have our admin comp file and so

00:21:27,919 --> 00:21:31,440
if i have this file this includes

00:21:29,760 --> 00:21:34,240
everything i need to access the cluster

00:21:31,440 --> 00:21:36,480
i can download that

00:21:34,240 --> 00:21:38,000
i have it pre-wired in my environment so

00:21:36,480 --> 00:21:39,679
from there

00:21:38,000 --> 00:21:43,200
what i'd be able to do is use cube

00:21:39,679 --> 00:21:44,880
cuddle and then i can just get the nodes

00:21:43,200 --> 00:21:46,320
since it already knows the admin com

00:21:44,880 --> 00:21:48,720
file from a known location

00:21:46,320 --> 00:21:50,000
it's able to log in and address exactly

00:21:48,720 --> 00:21:52,480
what i was hoping to do

00:21:50,000 --> 00:21:54,480
which is show the the systems in my

00:21:52,480 --> 00:21:58,799
cluster configuration i can also do

00:21:54,480 --> 00:22:00,400
things like get namespaces

00:21:58,799 --> 00:22:01,919
and see all of the infrastructure that

00:22:00,400 --> 00:22:03,440
i've built you notice we've already

00:22:01,919 --> 00:22:05,440
started building the open fast in the

00:22:03,440 --> 00:22:06,640
background and the kubernetes dashboard

00:22:05,440 --> 00:22:08,880
so

00:22:06,640 --> 00:22:10,720
no additional work on my part i've built

00:22:08,880 --> 00:22:12,080
a very sophisticated platform on

00:22:10,720 --> 00:22:15,919
raspberry pi's

00:22:12,080 --> 00:22:18,799
in a completely automated repeatable way

00:22:15,919 --> 00:22:20,240
and so what i'd really like to do is log

00:22:18,799 --> 00:22:23,120
into that dashboard

00:22:20,240 --> 00:22:24,880
nice cli is great but some people prefer

00:22:23,120 --> 00:22:25,600
a dashboard that'll let you see a little

00:22:24,880 --> 00:22:27,440
bit

00:22:25,600 --> 00:22:29,760
of what's going on to do that i'm just

00:22:27,440 --> 00:22:31,679
turning on the coop cuddle proxy

00:22:29,760 --> 00:22:32,880
and then i'm going to go in and find the

00:22:31,679 --> 00:22:35,840
dashboard now

00:22:32,880 --> 00:22:37,919
dashboard is actually nested down in the

00:22:35,840 --> 00:22:38,640
api namespaces so i'm going to cut and

00:22:37,919 --> 00:22:42,000
paste this

00:22:38,640 --> 00:22:43,600
is out of the docs for that parameter

00:22:42,000 --> 00:22:45,200
and if i bring it up you can see i've

00:22:43,600 --> 00:22:47,200
done this before

00:22:45,200 --> 00:22:48,320
and a previous one and the system is no

00:22:47,200 --> 00:22:51,280
longer responding

00:22:48,320 --> 00:22:51,280
because we have

00:22:51,600 --> 00:22:56,640
reset the cluster in this case it's

00:22:54,640 --> 00:22:59,200
still downloading the containers so

00:22:56,640 --> 00:23:00,880
this is a container container based

00:22:59,200 --> 00:23:02,400
solution and it does have to download

00:23:00,880 --> 00:23:03,600
and pull things off the internet and so

00:23:02,400 --> 00:23:05,760
we do need to wait

00:23:03,600 --> 00:23:06,799
uh just a little bit for the kubernetes

00:23:05,760 --> 00:23:09,760
dashboard to

00:23:06,799 --> 00:23:10,640
get up and running while we wait for

00:23:09,760 --> 00:23:12,799
that to happen

00:23:10,640 --> 00:23:13,679
i'm going to come back over and i'm

00:23:12,799 --> 00:23:15,760
going to get

00:23:13,679 --> 00:23:18,080
the there's my open fast password i'm

00:23:15,760 --> 00:23:19,760
going to get the dashboard token

00:23:18,080 --> 00:23:21,919
it's encrypted in the system so i have

00:23:19,760 --> 00:23:23,120
to go collect that handy cut and paste

00:23:21,919 --> 00:23:27,679
over here

00:23:23,120 --> 00:23:29,440
and so

00:23:27,679 --> 00:23:31,679
now that the container is downloaded i

00:23:29,440 --> 00:23:33,440
can get the kubernetes dashboard prompt

00:23:31,679 --> 00:23:35,760
the token is exactly what i need to log

00:23:33,440 --> 00:23:37,760
in so i pulled that from cut and paste

00:23:35,760 --> 00:23:38,799
and now you can see that i actually have

00:23:37,760 --> 00:23:40,880
the dashboard

00:23:38,799 --> 00:23:43,520
ready to roll so i can check out the

00:23:40,880 --> 00:23:46,559
namespaces exactly what i saw in the cli

00:23:43,520 --> 00:23:48,559
and if i drill down and look at

00:23:46,559 --> 00:23:50,480
different components i can see exactly

00:23:48,559 --> 00:23:52,799
what's been going on in my cluster

00:23:50,480 --> 00:23:54,559
using the kubernetes dashboard so even

00:23:52,799 --> 00:23:56,640
though this is k3s

00:23:54,559 --> 00:23:58,400
it's kubernetes and so we can use

00:23:56,640 --> 00:23:59,919
whatever tools and applications and

00:23:58,400 --> 00:24:02,320
programming that we would normally do

00:23:59,919 --> 00:24:03,520
that do overall what i've just

00:24:02,320 --> 00:24:07,120
demonstrated is

00:24:03,520 --> 00:24:08,880
a 500 cluster that you do not require

00:24:07,120 --> 00:24:10,320
additional command lines and

00:24:08,880 --> 00:24:12,400
installations any

00:24:10,320 --> 00:24:14,000
additional work or learning to boot

00:24:12,400 --> 00:24:15,919
provision and get running and then of

00:24:14,000 --> 00:24:17,919
course you can go to the repos

00:24:15,919 --> 00:24:19,360
and see exactly what's going on because

00:24:17,919 --> 00:24:21,120
all of the infrastructure's code

00:24:19,360 --> 00:24:23,360
components here are open source

00:24:21,120 --> 00:24:25,039
you can extend and watch and check and

00:24:23,360 --> 00:24:25,919
play and that's exactly what we want to

00:24:25,039 --> 00:24:27,760
do because

00:24:25,919 --> 00:24:30,480
the goal here is that we're building a

00:24:27,760 --> 00:24:32,480
community of people at the edge who are

00:24:30,480 --> 00:24:34,480
able to share and leverage and

00:24:32,480 --> 00:24:37,919
collaborate both on hardware

00:24:34,480 --> 00:24:39,919
architecture automation and platforms

00:24:37,919 --> 00:24:41,440
that's the essence of building an open

00:24:39,919 --> 00:24:42,000
community and we hope you will come

00:24:41,440 --> 00:24:44,840
along

00:24:42,000 --> 00:24:46,480
check out digital digital rebar and the

00:24:44,840 --> 00:24:48,799
edgelab.digital

00:24:46,480 --> 00:24:50,480
and let us know what you think this is

00:24:48,799 --> 00:25:00,080
rob hirschfeld with rackn

00:24:50,480 --> 00:25:04,080
thank you

00:25:00,080 --> 00:25:07,679
hello that's me i'm live for questions

00:25:04,080 --> 00:25:09,279
and i'm happy to uh

00:25:07,679 --> 00:25:11,120
engage with chat if people have

00:25:09,279 --> 00:25:12,840
interactive components or things that

00:25:11,120 --> 00:25:14,000
they want to know i do have a couple of

00:25:12,840 --> 00:25:15,520
questions

00:25:14,000 --> 00:25:17,120
and so i'm happy to go through that and

00:25:15,520 --> 00:25:18,960
this is your time to go in

00:25:17,120 --> 00:25:20,400
and go ahead and get that done we've

00:25:18,960 --> 00:25:22,159
already had somebody ask where they can

00:25:20,400 --> 00:25:24,360
get more information about digital rebar

00:25:22,159 --> 00:25:27,039
outside of edgelab so

00:25:24,360 --> 00:25:29,039
rebar.digital is a place to visit for

00:25:27,039 --> 00:25:31,760
information about digital rebar

00:25:29,039 --> 00:25:33,039
and uh edgelab.digital we like

00:25:31,760 --> 00:25:35,919
that.digital

00:25:33,039 --> 00:25:36,240
top level domain is the place to go for

00:25:35,919 --> 00:25:37,840
all

00:25:36,240 --> 00:25:39,279
edge lab considerations including

00:25:37,840 --> 00:25:41,120
detailed instructions and a build

00:25:39,279 --> 00:25:44,240
material so some of the questions

00:25:41,120 --> 00:25:46,240
that we have been accumulating is

00:25:44,240 --> 00:25:48,880
are there hardware limitation types this

00:25:46,240 --> 00:25:50,080
was very much about raspberry pi's

00:25:48,880 --> 00:25:52,080
raspberry pi's in some ways are the

00:25:50,080 --> 00:25:53,600
hardest thing to automate in this type

00:25:52,080 --> 00:25:54,840
of system because they have very little

00:25:53,600 --> 00:25:57,520
out of band control so

00:25:54,840 --> 00:25:58,960
no uh pretty much every system and

00:25:57,520 --> 00:26:01,279
server that we

00:25:58,960 --> 00:26:03,120
put the jewelry bar under is available

00:26:01,279 --> 00:26:04,559
and the systems that's being used to

00:26:03,120 --> 00:26:05,919
generate to drive edge lab on the

00:26:04,559 --> 00:26:08,240
raspberry pi's

00:26:05,919 --> 00:26:10,000
also have all the software needed to run

00:26:08,240 --> 00:26:12,880
all the other types of servers so you

00:26:10,000 --> 00:26:14,000
could boot nooks you could boot fitlits

00:26:12,880 --> 00:26:16,720
you could boot

00:26:14,000 --> 00:26:17,440
desktop servers pretty much whatever you

00:26:16,720 --> 00:26:18,960
want

00:26:17,440 --> 00:26:20,640
from that perspective so there is no

00:26:18,960 --> 00:26:22,080
hardware limitation

00:26:20,640 --> 00:26:24,640
if you have out-of-band management

00:26:22,080 --> 00:26:26,720
that's great we support enterprise grade

00:26:24,640 --> 00:26:28,320
servers without a band management

00:26:26,720 --> 00:26:29,840
that's actually a lot easier than a

00:26:28,320 --> 00:26:32,799
raspberry pi where there's

00:26:29,840 --> 00:26:34,240
nothing at all from that perspective

00:26:32,799 --> 00:26:38,400
speaking of out-of-band management

00:26:34,240 --> 00:26:40,960
we had another question about that

00:26:38,400 --> 00:26:43,679
and for that um pretty much whatever

00:26:40,960 --> 00:26:45,279
advan management you want redfish ipmi

00:26:43,679 --> 00:26:47,440
vendor tools

00:26:45,279 --> 00:26:48,720
it's not required so the systems will

00:26:47,440 --> 00:26:49,840
work if you don't have out of band

00:26:48,720 --> 00:26:51,520
management so we have

00:26:49,840 --> 00:26:53,200
a lot of testing a lot of use cases with

00:26:51,520 --> 00:26:55,120
vms and using

00:26:53,200 --> 00:26:57,440
the vm managers as the out-of-band

00:26:55,120 --> 00:27:00,080
manager that also works

00:26:57,440 --> 00:27:01,919
really dynamic flexible environment from

00:27:00,080 --> 00:27:04,720
that perspective

00:27:01,919 --> 00:27:06,159
in this we showed k3s and a little bit

00:27:04,720 --> 00:27:08,559
of open faz

00:27:06,159 --> 00:27:09,360
um those things those are not the only

00:27:08,559 --> 00:27:12,000
platforms

00:27:09,360 --> 00:27:13,279
uh that was a good question um there are

00:27:12,000 --> 00:27:16,400
kubernetes patterns

00:27:13,279 --> 00:27:18,640
in the um digital rebar family

00:27:16,400 --> 00:27:20,000
not in edge labs specifically but we are

00:27:18,640 --> 00:27:21,760
actually bringing all those things

00:27:20,000 --> 00:27:23,679
back in and should be able to do full

00:27:21,760 --> 00:27:24,399
kubernetes installs the goal for edge

00:27:23,679 --> 00:27:26,880
lab is to have

00:27:24,399 --> 00:27:28,559
community participate in this and so

00:27:26,880 --> 00:27:31,039
everything that's done in edgelab

00:27:28,559 --> 00:27:32,640
uh generally translates 100 into the

00:27:31,039 --> 00:27:34,080
digital rebar community which is much

00:27:32,640 --> 00:27:36,559
bigger

00:27:34,080 --> 00:27:37,440
our goal is to have them be able to feed

00:27:36,559 --> 00:27:39,600
off each other

00:27:37,440 --> 00:27:42,799
uh the edge use cases sometimes have

00:27:39,600 --> 00:27:45,600
some additional flavor

00:27:42,799 --> 00:27:46,320
additional questions that i have um i do

00:27:45,600 --> 00:27:49,679
speak dog

00:27:46,320 --> 00:27:52,559
and my dog wanted to know um

00:27:49,679 --> 00:27:53,679
operating systems uh oh an immutable

00:27:52,559 --> 00:27:56,240
boot

00:27:53,679 --> 00:27:57,440
it's both things to consider together uh

00:27:56,240 --> 00:27:59,120
one of the things that we did that was

00:27:57,440 --> 00:27:59,600
actually really tricky here is that we

00:27:59,120 --> 00:28:02,720
got

00:27:59,600 --> 00:28:05,200
pic raspberry pi's a pixie boot um

00:28:02,720 --> 00:28:06,720
and we use an immutable os so the os is

00:28:05,200 --> 00:28:08,559
actually running in memory which means

00:28:06,720 --> 00:28:10,399
you're not burning sd cards

00:28:08,559 --> 00:28:11,840
we do use the sd card for storage of

00:28:10,399 --> 00:28:14,080
containers and things like that so you

00:28:11,840 --> 00:28:16,320
get the best of both worlds in this case

00:28:14,080 --> 00:28:17,200
um that is a really powerful thing um we

00:28:16,320 --> 00:28:20,159
do it quite a bit

00:28:17,200 --> 00:28:22,159
with digital rebar also uh with what we

00:28:20,159 --> 00:28:23,360
call sledgehammer to our discovery os

00:28:22,159 --> 00:28:25,760
based on centos

00:28:23,360 --> 00:28:27,200
seven or eight but you can install

00:28:25,760 --> 00:28:29,679
windows esx

00:28:27,200 --> 00:28:30,399
um linux of course uh depending on what

00:28:29,679 --> 00:28:33,520
you want to go

00:28:30,399 --> 00:28:34,960
can't do that on the pies clearly if you

00:28:33,520 --> 00:28:35,840
want to try you're welcome to give it a

00:28:34,960 --> 00:28:39,520
shot that that

00:28:35,840 --> 00:28:39,520
would be possible

00:28:39,840 --> 00:28:45,840
and the last question i'm seeing let me

00:28:43,279 --> 00:28:49,919
see if anything new came in

00:28:45,840 --> 00:28:52,399
is um open source uh edge lab.digital is

00:28:49,919 --> 00:28:53,039
open source uh please make pull requests

00:28:52,399 --> 00:28:55,840
and patches

00:28:53,039 --> 00:28:57,279
the content packs and all of the amazing

00:28:55,840 --> 00:28:58,720
libraries and contents and things like

00:28:57,279 --> 00:29:00,640
that are open

00:28:58,720 --> 00:29:01,919
so you can go and review how we do these

00:29:00,640 --> 00:29:03,039
installs and things like that the

00:29:01,919 --> 00:29:06,480
digital rebar

00:29:03,039 --> 00:29:09,679
code itself the platform is a rack in

00:29:06,480 --> 00:29:11,360
thing it is licensed for this type of

00:29:09,679 --> 00:29:14,799
use without any charge at all

00:29:11,360 --> 00:29:16,399
so you can run home labs and go crazy on

00:29:14,799 --> 00:29:19,039
your own infrastructure

00:29:16,399 --> 00:29:21,200
up to 20 machines and just get a

00:29:19,039 --> 00:29:23,600
self-trial license and go crazy that is

00:29:21,200 --> 00:29:25,039
perfectly legitimate use for this and

00:29:23,600 --> 00:29:26,799
should be able to have a good time

00:29:25,039 --> 00:29:28,880
there's tons more

00:29:26,799 --> 00:29:31,360
feature sets in digital rebar and this

00:29:28,880 --> 00:29:34,320
isn't about that so

00:29:31,360 --> 00:29:35,440
please feel free to look at that i think

00:29:34,320 --> 00:29:36,880
i am out of time

00:29:35,440 --> 00:29:38,640
if you have any other questions please

00:29:36,880 --> 00:29:40,880
feel free to contact me

00:29:38,640 --> 00:29:43,360
i'm at vehicle and twitter or you can

00:29:40,880 --> 00:29:46,559
reach me through rackn.com

00:29:43,360 --> 00:29:49,120
and we are giving away an edgelab

00:29:46,559 --> 00:29:50,720
kit for as an unboxing community

00:29:49,120 --> 00:29:52,159
experience so if you go to the rackins

00:29:50,720 --> 00:29:54,000
website

00:29:52,159 --> 00:29:56,480
in our blog we actually have linked to

00:29:54,000 --> 00:29:58,320
how to register for a kit please do that

00:29:56,480 --> 00:29:59,760
um we'd love to have put this in

00:29:58,320 --> 00:30:01,360
somebody's hands and have them just

00:29:59,760 --> 00:30:03,120
get that unboxing experience and share

00:30:01,360 --> 00:30:09,840
it with everybody else

00:30:03,120 --> 00:30:09,840
thank you

00:30:20,840 --> 00:30:23,840
you

00:31:38,720 --> 00:31:40,799

YouTube URL: https://www.youtube.com/watch?v=ewI_oTEIGZI


