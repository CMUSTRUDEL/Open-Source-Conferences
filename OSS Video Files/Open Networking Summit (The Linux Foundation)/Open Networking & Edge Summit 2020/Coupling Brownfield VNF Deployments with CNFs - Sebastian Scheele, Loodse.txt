Title: Coupling Brownfield VNF Deployments with CNFs - Sebastian Scheele, Loodse
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	Coupling Brownfield VNF Deployments with CNFs - Sebastian Scheele, Loodse
Captions: 
	00:00:07,839 --> 00:00:10,400
welcome to our session coupling

00:00:09,200 --> 00:00:13,440
broadfield

00:00:10,400 --> 00:00:14,960
vns deployments with cnf

00:00:13,440 --> 00:00:16,560
but before we start let me introduce

00:00:14,960 --> 00:00:19,760
myself i'm the bastard sheila

00:00:16,560 --> 00:00:23,039
co-founder and ceo of cuba matic

00:00:19,760 --> 00:00:24,480
and today my co-presenter is

00:00:23,039 --> 00:00:26,160
joseph youssef do you want to quickly

00:00:24,480 --> 00:00:27,920
introduce yourself yeah

00:00:26,160 --> 00:00:30,000
thank you sebastian i'm yusuf i'm a

00:00:27,920 --> 00:00:32,320
software engineer with schubermatic

00:00:30,000 --> 00:00:34,800
i work with the backend team or

00:00:32,320 --> 00:00:39,920
distributed system team i would say

00:00:34,800 --> 00:00:39,920
and on the kubernetes schematic platform

00:00:40,480 --> 00:00:44,239
okay let's start so let's have a quick

00:00:43,200 --> 00:00:46,800
recap

00:00:44,239 --> 00:00:47,520
so where are we coming from so in the

00:00:46,800 --> 00:00:50,399
early days

00:00:47,520 --> 00:00:51,680
we really used physical hardware for our

00:00:50,399 --> 00:00:54,079
network infrastructure

00:00:51,680 --> 00:00:55,199
and over the time it already moved

00:00:54,079 --> 00:00:57,520
forward to

00:00:55,199 --> 00:00:58,800
virtualized infrastructure so that we

00:00:57,520 --> 00:01:02,000
put

00:00:58,800 --> 00:01:02,640
some components into vms and um one of

00:01:02,000 --> 00:01:05,360
the next

00:01:02,640 --> 00:01:06,640
things we want to do is instead of

00:01:05,360 --> 00:01:08,320
running it into

00:01:06,640 --> 00:01:10,000
the ends we want to run this into

00:01:08,320 --> 00:01:13,040
containers but this have

00:01:10,000 --> 00:01:15,119
some challenges and there are also some

00:01:13,040 --> 00:01:16,320
problems with this and we want to show

00:01:15,119 --> 00:01:18,720
you how we can

00:01:16,320 --> 00:01:20,560
couple different components to together

00:01:18,720 --> 00:01:23,360
uh because we think

00:01:20,560 --> 00:01:25,119
we cannot go with the big bang approach

00:01:23,360 --> 00:01:26,640
so we have the requirement that

00:01:25,119 --> 00:01:28,479
like all the different components need

00:01:26,640 --> 00:01:31,920
to work to uh together

00:01:28,479 --> 00:01:33,439
in a smooth way and yeah let's talk a

00:01:31,920 --> 00:01:37,920
little bit about the

00:01:33,439 --> 00:01:37,920
evaluation um so um

00:01:38,400 --> 00:01:44,159
physical and virtual infrastructure will

00:01:41,759 --> 00:01:46,479
stay for at least another decade so it's

00:01:44,159 --> 00:01:48,640
not like that we can easily replace them

00:01:46,479 --> 00:01:50,479
um even if we're now starting with a

00:01:48,640 --> 00:01:53,360
containerized infrastructure

00:01:50,479 --> 00:01:54,159
we will have them um for at least a

00:01:53,360 --> 00:01:57,119
decade

00:01:54,159 --> 00:01:57,920
and so the only really feasible approach

00:01:57,119 --> 00:02:01,360
for

00:01:57,920 --> 00:02:04,079
um telcos and tech operators is

00:02:01,360 --> 00:02:06,240
uh we need to move smoothly from uh

00:02:04,079 --> 00:02:08,479
pnf's to vnfs and and

00:02:06,240 --> 00:02:09,440
uh let's say in the future to become

00:02:08,479 --> 00:02:12,879
cnfs

00:02:09,440 --> 00:02:14,239
um and i think we see a similar pattern

00:02:12,879 --> 00:02:16,000
what we already saw

00:02:14,239 --> 00:02:17,760
uh in the enterprise when they're moving

00:02:16,000 --> 00:02:21,280
from monolith applications

00:02:17,760 --> 00:02:23,280
to microsoft microservice architectures

00:02:21,280 --> 00:02:24,400
so there are different patterns how to

00:02:23,280 --> 00:02:25,520
do this so

00:02:24,400 --> 00:02:27,599
if you're starting completely from

00:02:25,520 --> 00:02:31,040
scratch of course you can start

00:02:27,599 --> 00:02:32,879
with a cnf infrastructure but

00:02:31,040 --> 00:02:34,239
uh if you're having like in similar ways

00:02:32,879 --> 00:02:36,560
in an enterprise you have your big

00:02:34,239 --> 00:02:39,920
monolith application so you have your

00:02:36,560 --> 00:02:42,319
pnfs or vnfs you need to

00:02:39,920 --> 00:02:43,280
slowly refactor them and putting them

00:02:42,319 --> 00:02:45,840
into containers

00:02:43,280 --> 00:02:47,760
so that you can really leveraging

00:02:45,840 --> 00:02:50,480
container infrastructure

00:02:47,760 --> 00:02:52,560
and this of course needs a lot of time

00:02:50,480 --> 00:02:53,680
and we need to do this in an incremental

00:02:52,560 --> 00:02:57,760
way

00:02:53,680 --> 00:02:59,840
and increase in the future also the

00:02:57,760 --> 00:03:01,200
velocity of our development

00:02:59,840 --> 00:03:04,319
and also can leveraging new

00:03:01,200 --> 00:03:07,120
functionalities on the new platform

00:03:04,319 --> 00:03:08,800
but what is the main challenge for

00:03:07,120 --> 00:03:11,840
transforming from

00:03:08,800 --> 00:03:15,120
vnfs to cnfs

00:03:11,840 --> 00:03:18,720
so one part is definitely moving

00:03:15,120 --> 00:03:21,840
from physical hardware to vms

00:03:18,720 --> 00:03:24,560
was in general much easier because

00:03:21,840 --> 00:03:26,560
we could put everything in a vm and it's

00:03:24,560 --> 00:03:29,599
running

00:03:26,560 --> 00:03:31,760
but many of the networks functions

00:03:29,599 --> 00:03:32,799
rely on specific kernel or specific

00:03:31,760 --> 00:03:35,680
kernel hex

00:03:32,799 --> 00:03:36,239
and this is now not so easy if we are

00:03:35,680 --> 00:03:39,760
using

00:03:36,239 --> 00:03:44,000
containers because we

00:03:39,760 --> 00:03:46,400
cannot run different kernels on the same

00:03:44,000 --> 00:03:47,360
host so we need to think about how we

00:03:46,400 --> 00:03:50,560
can leveraging

00:03:47,360 --> 00:03:51,280
this and what needs uh to be done in the

00:03:50,560 --> 00:03:53,920
user space

00:03:51,280 --> 00:03:54,959
what need what other services do we need

00:03:53,920 --> 00:03:58,080
to be using

00:03:54,959 --> 00:04:01,519
like how can we connect to uh dp

00:03:58,080 --> 00:04:04,080
uh decay or si iov and

00:04:01,519 --> 00:04:05,120
so it needs to be some new thinking

00:04:04,080 --> 00:04:09,360
around this um

00:04:05,120 --> 00:04:11,280
and um but container can really provide

00:04:09,360 --> 00:04:13,120
more or less nearly direct access to the

00:04:11,280 --> 00:04:14,959
hardware with little or no

00:04:13,120 --> 00:04:18,320
virtualization overhead so there's also

00:04:14,959 --> 00:04:20,720
a big benefit in this new architecture

00:04:18,320 --> 00:04:20,720
um

00:04:22,880 --> 00:04:26,479
so but when we're looking into this is

00:04:24,880 --> 00:04:30,800
now when we want to go

00:04:26,479 --> 00:04:33,440
to cnf's vms comes our new legacy again

00:04:30,800 --> 00:04:34,160
so we need to think about how can we

00:04:33,440 --> 00:04:36,800
solve this

00:04:34,160 --> 00:04:39,120
how can we smoothly involve but

00:04:36,800 --> 00:04:40,560
sometimes we really need a vm

00:04:39,120 --> 00:04:45,280
when you have for example non-standard

00:04:40,560 --> 00:04:48,639
kernel modules for specific components

00:04:45,280 --> 00:04:52,400
when the security folks ask for vm

00:04:48,639 --> 00:04:54,840
level isolation and sometimes

00:04:52,400 --> 00:04:56,000
currently if you're looking into your

00:04:54,840 --> 00:04:57,600
application

00:04:56,000 --> 00:04:59,040
and it's a much more moderate

00:04:57,600 --> 00:05:01,199
application

00:04:59,040 --> 00:05:02,160
um it's not possible to do it right with

00:05:01,199 --> 00:05:03,639
containers so

00:05:02,160 --> 00:05:05,199
i think that it needs first

00:05:03,639 --> 00:05:07,759
re-architecturing it

00:05:05,199 --> 00:05:09,440
um and as long as this is not done it

00:05:07,759 --> 00:05:12,800
makes not really sense

00:05:09,440 --> 00:05:13,680
to put it into containers but what we

00:05:12,800 --> 00:05:17,120
think is

00:05:13,680 --> 00:05:18,639
vnfs and cnfs can live side by side on

00:05:17,120 --> 00:05:20,960
one platform

00:05:18,639 --> 00:05:22,400
because a big benefit of this is we can

00:05:20,960 --> 00:05:26,800
already establish

00:05:22,400 --> 00:05:29,919
one operational model for container nvms

00:05:26,800 --> 00:05:33,120
so we can support legacy uh brownfield

00:05:29,919 --> 00:05:35,440
and greenfield deployments and of course

00:05:33,120 --> 00:05:39,120
also mixed deployments

00:05:35,440 --> 00:05:41,759
and with this we can run vnf

00:05:39,120 --> 00:05:43,360
functions in vms and cnf functions in

00:05:41,759 --> 00:05:46,720
containers

00:05:43,360 --> 00:05:48,479
and but what we need there is we really

00:05:46,720 --> 00:05:50,160
want to connect them together

00:05:48,479 --> 00:05:53,280
in best case with the kubernetes

00:05:50,160 --> 00:05:54,479
networking um and so we have also a

00:05:53,280 --> 00:05:56,800
consistent model

00:05:54,479 --> 00:05:59,360
for on the networking layer for vnfs and

00:05:56,800 --> 00:05:59,360
cnfs

00:06:01,120 --> 00:06:07,840
so what should be the desired state cnf

00:06:04,639 --> 00:06:09,120
should coexist with vnfs because as we

00:06:07,840 --> 00:06:11,600
saw at the beginning

00:06:09,120 --> 00:06:13,440
uh vnfs will list for a long time and

00:06:11,600 --> 00:06:16,319
what we already want to do is like

00:06:13,440 --> 00:06:17,919
we want to renew our underlying

00:06:16,319 --> 00:06:21,120
infrastructure

00:06:17,919 --> 00:06:22,319
without replacing everything and we want

00:06:21,120 --> 00:06:24,319
to really make this

00:06:22,319 --> 00:06:26,000
independent from our infrastructure and

00:06:24,319 --> 00:06:28,000
also when we are neutral

00:06:26,000 --> 00:06:30,000
so that we can already change some

00:06:28,000 --> 00:06:32,840
things and moving slowly

00:06:30,000 --> 00:06:35,280
more and more into a cloud native

00:06:32,840 --> 00:06:37,520
ecosystem and we can also

00:06:35,280 --> 00:06:38,479
really leveraging the orchestration for

00:06:37,520 --> 00:06:40,960
network functions

00:06:38,479 --> 00:06:42,000
so having like self-healing capabilities

00:06:40,960 --> 00:06:45,720
um

00:06:42,000 --> 00:06:48,000
heavily automation and and zero touch

00:06:45,720 --> 00:06:50,160
deployments um

00:06:48,000 --> 00:06:52,400
but let's think about how we can embrace

00:06:50,160 --> 00:06:54,800
this um

00:06:52,400 --> 00:06:56,880
one thing we believe is like uh what we

00:06:54,800 --> 00:06:58,000
can use is an open source project called

00:06:56,880 --> 00:07:00,319
keep word

00:06:58,000 --> 00:07:01,280
where you put your virtual machines into

00:07:00,319 --> 00:07:05,199
a container

00:07:01,280 --> 00:07:07,039
and with this you can run your vms

00:07:05,199 --> 00:07:08,479
on a kubernetes cluster and your

00:07:07,039 --> 00:07:11,360
containers on a kubernetes

00:07:08,479 --> 00:07:12,720
cluster and then you can leveraging

00:07:11,360 --> 00:07:13,599
kubernetes to orchestrate your

00:07:12,720 --> 00:07:16,400
containers

00:07:13,599 --> 00:07:17,840
and as well with cuboid orchestrate also

00:07:16,400 --> 00:07:20,080
you your vms

00:07:17,840 --> 00:07:20,080
and

00:07:21,120 --> 00:07:25,759
with this we can already build a

00:07:23,919 --> 00:07:28,800
centralized one platform

00:07:25,759 --> 00:07:31,120
and can also use

00:07:28,800 --> 00:07:33,840
a hardware acceleration um if the

00:07:31,120 --> 00:07:37,759
application supports it

00:07:33,840 --> 00:07:39,840
and so now i want to hand over to yousef

00:07:37,759 --> 00:07:41,360
he will now give you a demo how this

00:07:39,840 --> 00:07:43,840
could look like

00:07:41,360 --> 00:07:44,400
thank you celestion give me a second

00:07:43,840 --> 00:07:59,039
guys

00:07:44,400 --> 00:08:12,960
just set up my environment

00:07:59,039 --> 00:08:17,360
okay so let me show the screen

00:08:12,960 --> 00:08:17,360
okay um can you see the slides

00:08:17,680 --> 00:08:20,319
yep working

00:08:21,440 --> 00:08:27,840
um so yeah to illustrate what was

00:08:24,800 --> 00:08:32,080
sebastian saying on how to

00:08:27,840 --> 00:08:35,360
work uh with vnf and cnf together

00:08:32,080 --> 00:08:38,560
we'll do a little demo and basically

00:08:35,360 --> 00:08:41,599
um the demo will be using

00:08:38,560 --> 00:08:43,120
a couple of components that as western

00:08:41,599 --> 00:08:44,560
mentioned so obviously kubernetes

00:08:43,120 --> 00:08:47,600
clusters

00:08:44,560 --> 00:08:48,880
also cube words for the hypervisor on on

00:08:47,600 --> 00:08:51,200
kubernetes

00:08:48,880 --> 00:08:52,880
we'll be using packet for the bare metal

00:08:51,200 --> 00:08:56,240
servers

00:08:52,880 --> 00:08:57,519
and also we'll be using chipmatic cube1

00:08:56,240 --> 00:08:59,279
which is an open source tool to

00:08:57,519 --> 00:09:01,440
provision the infrastructure

00:08:59,279 --> 00:09:04,080
uh and build the communities cluster

00:09:01,440 --> 00:09:06,320
quickly so the idea here

00:09:04,080 --> 00:09:07,200
is that we have two sites um two

00:09:06,320 --> 00:09:09,920
physical sites

00:09:07,200 --> 00:09:10,880
amsterdam in uh netherlands and tokyo

00:09:09,920 --> 00:09:13,200
and japan

00:09:10,880 --> 00:09:14,060
and we're gonna connect those two sites

00:09:13,200 --> 00:09:15,200
with um

00:09:14,060 --> 00:09:18,240
[Music]

00:09:15,200 --> 00:09:19,120
the vms so running as vnf in this case

00:09:18,240 --> 00:09:22,560
using a channel

00:09:19,120 --> 00:09:22,959
with y-god and uh i'm choosing why god

00:09:22,560 --> 00:09:26,000
because

00:09:22,959 --> 00:09:27,120
why god can illustrate what uh sebastian

00:09:26,000 --> 00:09:29,120
was saying before

00:09:27,120 --> 00:09:31,519
about the custom kernel needs so

00:09:29,120 --> 00:09:33,600
typically if you take an f5 a balancer

00:09:31,519 --> 00:09:35,839
vm or 40 gate

00:09:33,600 --> 00:09:37,120
a firewall vm all those run custom

00:09:35,839 --> 00:09:38,640
kernels so it's a

00:09:37,120 --> 00:09:40,720
well you can't containerize them like

00:09:38,640 --> 00:09:42,480
that and you need to run to run them as

00:09:40,720 --> 00:09:44,720
vms

00:09:42,480 --> 00:09:46,320
so uh we will be running a y-god uh

00:09:44,720 --> 00:09:49,920
between the two sides and have

00:09:46,320 --> 00:09:50,880
uh why godzilla and then uh we'll have a

00:09:49,920 --> 00:09:53,600
router that will

00:09:50,880 --> 00:09:55,920
act our as a router doing the mapping

00:09:53,600 --> 00:09:59,120
and as a firewall also

00:09:55,920 --> 00:10:02,839
and finally uh a web server

00:09:59,120 --> 00:10:05,440
nginx running inside the tokyo data

00:10:02,839 --> 00:10:08,880
center

00:10:05,440 --> 00:10:10,560
and to illustrate this demo we'll have

00:10:08,880 --> 00:10:12,640
couple of networks basically

00:10:10,560 --> 00:10:14,320
and the goal is to be able to call and

00:10:12,640 --> 00:10:17,279
ping

00:10:14,320 --> 00:10:18,800
the web server in using an overlay

00:10:17,279 --> 00:10:22,000
network so we'll be using

00:10:18,800 --> 00:10:25,600
the baseline and specific sub networks

00:10:22,000 --> 00:10:26,640
that are running on top i would say of

00:10:25,600 --> 00:10:28,560
the kubernetes

00:10:26,640 --> 00:10:30,839
network so the classical cni import

00:10:28,560 --> 00:10:34,240
network and service network

00:10:30,839 --> 00:10:37,200
um so um let me

00:10:34,240 --> 00:10:37,200
bring my terminal

00:10:38,320 --> 00:10:43,760
so here we are so we have my

00:10:41,360 --> 00:10:44,560
terminal is separated into we have to

00:10:43,760 --> 00:10:46,240
the lefty

00:10:44,560 --> 00:10:48,720
asia side so tokyo side to the right the

00:10:46,240 --> 00:10:51,680
european side and

00:10:48,720 --> 00:10:52,720
let's have a look at what we have um i

00:10:51,680 --> 00:10:55,760
won't go through

00:10:52,720 --> 00:10:58,079
the infra stuff i mean again

00:10:55,760 --> 00:10:59,040
it's using cube one and kubernetes so we

00:10:58,079 --> 00:11:02,079
just have

00:10:59,040 --> 00:11:03,920
um working kubernetes

00:11:02,079 --> 00:11:05,600
cluster right now i've already proceeded

00:11:03,920 --> 00:11:07,839
with installation because provisioning

00:11:05,600 --> 00:11:09,519
the vms can take a couple of minutes and

00:11:07,839 --> 00:11:10,959
obviously for the sake of the demo i

00:11:09,519 --> 00:11:14,000
don't want i mean

00:11:10,959 --> 00:11:16,320
people to wait for nothing so we have

00:11:14,000 --> 00:11:18,800
uh masternodes and one worker node one

00:11:16,320 --> 00:11:22,720
working node is more than enough

00:11:18,800 --> 00:11:24,880
and um if we go to the manifest

00:11:22,720 --> 00:11:26,959
what we are installing so basically we

00:11:24,880 --> 00:11:29,680
start by installing the router

00:11:26,959 --> 00:11:31,040
so if we open the manifest of the router

00:11:29,680 --> 00:11:34,399
we have a simple

00:11:31,040 --> 00:11:36,240
deployment uh kubernetes deployment so

00:11:34,399 --> 00:11:38,160
we'll be using a custom image but this

00:11:36,240 --> 00:11:40,240
custom image is actually a very simple

00:11:38,160 --> 00:11:42,560
image it's an alpine linux image

00:11:40,240 --> 00:11:43,760
and it has couple of uh applications

00:11:42,560 --> 00:11:47,200
that have been installed

00:11:43,760 --> 00:11:49,360
like uh bridge utils uh tcp dump and

00:11:47,200 --> 00:11:52,240
couple of networking tools basically

00:11:49,360 --> 00:11:53,600
uh installed inside of it and what are

00:11:52,240 --> 00:11:56,079
we doing in this router

00:11:53,600 --> 00:11:57,360
we are simply well building the blocks

00:11:56,079 --> 00:12:01,120
that we saw

00:11:57,360 --> 00:12:01,519
uh on the diagram so to put it simply if

00:12:01,120 --> 00:12:04,560
we

00:12:01,519 --> 00:12:07,680
think about the diagram um on

00:12:04,560 --> 00:12:10,560
this router we'll be building this part

00:12:07,680 --> 00:12:12,000
so this half part and this half part and

00:12:10,560 --> 00:12:14,959
doing the same for all

00:12:12,000 --> 00:12:14,959
the items

00:12:16,000 --> 00:12:22,560
so the first part is indeed building

00:12:19,279 --> 00:12:26,079
the connection and overlay between

00:12:22,560 --> 00:12:28,720
the cnf router and the future

00:12:26,079 --> 00:12:29,200
vm i would say so the wire guard server

00:12:28,720 --> 00:12:31,440
running

00:12:29,200 --> 00:12:34,240
in the same sites of tokyo so we are

00:12:31,440 --> 00:12:37,279
creating a vxlan interface

00:12:34,240 --> 00:12:37,680
we are assigning assigning it a specific

00:12:37,279 --> 00:12:41,040
uh

00:12:37,680 --> 00:12:42,959
subnet and iep which is 191.68255

00:12:41,040 --> 00:12:44,720
and this will be called i would say the

00:12:42,959 --> 00:12:45,600
transfer network since this subnet will

00:12:44,720 --> 00:12:49,200
be used

00:12:45,600 --> 00:12:51,440
uh for the cnf router

00:12:49,200 --> 00:12:53,839
and the vm cube via motors in tokyo

00:12:51,440 --> 00:12:55,279
amsterdam to talk between each other

00:12:53,839 --> 00:12:59,839
each other

00:12:55,279 --> 00:13:02,240
and we are using a bridge

00:12:59,839 --> 00:13:04,079
forwarding database attend zero zero

00:13:02,240 --> 00:13:07,600
blah blah blah so basically

00:13:04,079 --> 00:13:09,120
this command uh here we are not using um

00:13:07,600 --> 00:13:10,480
well i'm not using for the sake of the

00:13:09,120 --> 00:13:13,279
demo uh

00:13:10,480 --> 00:13:14,519
multicast groups uh with the vxlan i'm

00:13:13,279 --> 00:13:17,600
just using

00:13:14,519 --> 00:13:20,320
static with uh unicast uh

00:13:17,600 --> 00:13:21,600
flooding i would say uh sorry unicast

00:13:20,320 --> 00:13:23,680
with static flooding

00:13:21,600 --> 00:13:25,040
so basically what does this mean that

00:13:23,680 --> 00:13:28,160
the vteps

00:13:25,040 --> 00:13:31,680
so the virtual virtual channel endpoints

00:13:28,160 --> 00:13:32,079
uh are static you design them so in this

00:13:31,680 --> 00:13:35,680
case

00:13:32,079 --> 00:13:38,720
a vtep for the cnf router will be

00:13:35,680 --> 00:13:40,399
the vnf peer what i call here which is

00:13:38,720 --> 00:13:42,639
basically the y guard server

00:13:40,399 --> 00:13:44,560
so running on q vert inside the same

00:13:42,639 --> 00:13:46,560
kubernetes cluster

00:13:44,560 --> 00:13:48,320
and all addresses all the xeros

00:13:46,560 --> 00:13:48,880
addresses basically telling you that all

00:13:48,320 --> 00:13:51,600
the bump

00:13:48,880 --> 00:13:53,040
frames so the broadcast and unknown

00:13:51,600 --> 00:13:55,920
unicast and multicast

00:13:53,040 --> 00:13:56,639
frame will be sent to this vtep

00:13:55,920 --> 00:13:59,760
obviously

00:13:56,639 --> 00:14:01,360
this setup is simple and it's good if

00:13:59,760 --> 00:14:02,959
you have a couple of details but if you

00:14:01,360 --> 00:14:04,480
start having like thousands of details

00:14:02,959 --> 00:14:05,279
obviously you want you want to switch to

00:14:04,480 --> 00:14:08,160
to multi

00:14:05,279 --> 00:14:09,519
to multicast so these parts build uh the

00:14:08,160 --> 00:14:11,600
first i would say interconnection

00:14:09,519 --> 00:14:15,279
between the cnf router and

00:14:11,600 --> 00:14:18,959
the uh vm and the second part

00:14:15,279 --> 00:14:19,600
is uh building the interconnection

00:14:18,959 --> 00:14:22,240
between the

00:14:19,600 --> 00:14:24,560
web uh server the nginx web server and

00:14:22,240 --> 00:14:26,560
the cnf router so here in this case

00:14:24,560 --> 00:14:28,079
we are creating a new vxlan interface

00:14:26,560 --> 00:14:31,040
using a different vxlan id

00:14:28,079 --> 00:14:31,760
and exposing it on on specific polls the

00:14:31,040 --> 00:14:34,480
same port

00:14:31,760 --> 00:14:35,519
as a vixen id and with this one we're

00:14:34,480 --> 00:14:38,399
creating another

00:14:35,519 --> 00:14:39,760
another network which is basically uh

00:14:38,399 --> 00:14:41,199
just to illustrate that we can have

00:14:39,760 --> 00:14:44,320
multiple subnetworks

00:14:41,199 --> 00:14:46,000
um and that will be the network use for

00:14:44,320 --> 00:14:49,120
the interconnection or for the

00:14:46,000 --> 00:14:49,920
connection between this um the cnf

00:14:49,120 --> 00:14:52,720
router

00:14:49,920 --> 00:14:54,800
and the web server finally we are

00:14:52,720 --> 00:14:57,279
defining couple of uh

00:14:54,800 --> 00:14:58,399
rules i would say and nothing because

00:14:57,279 --> 00:15:00,480
this is acting as a

00:14:58,399 --> 00:15:02,800
as a router so what we are saying we are

00:15:00,480 --> 00:15:03,199
saying uh for all the packets that will

00:15:02,800 --> 00:15:06,240
be

00:15:03,199 --> 00:15:08,720
going from the router to the web server

00:15:06,240 --> 00:15:10,639
uh using the interface the vxlan

00:15:08,720 --> 00:15:13,760
interface we have created

00:15:10,639 --> 00:15:14,560
uh just source not them or masquerade

00:15:13,760 --> 00:15:17,600
them to be

00:15:14,560 --> 00:15:19,279
well more specific and correct and we

00:15:17,600 --> 00:15:21,040
are dropping all the packets and these

00:15:19,279 --> 00:15:22,720
three lines will act as a firewall so we

00:15:21,040 --> 00:15:25,120
are dropping all the packets

00:15:22,720 --> 00:15:26,480
that uh by default and we're only

00:15:25,120 --> 00:15:29,600
accepting http

00:15:26,480 --> 00:15:30,800
traffic and packets that are in an

00:15:29,600 --> 00:15:34,240
established or related

00:15:30,800 --> 00:15:36,880
uh state so that's

00:15:34,240 --> 00:15:39,040
i would say that's it for the cnf router

00:15:36,880 --> 00:15:42,320
so if we have a look at

00:15:39,040 --> 00:15:44,480
the pods running currently

00:15:42,320 --> 00:15:46,079
so we have the first one cnf router and

00:15:44,480 --> 00:15:48,800
it is running properly

00:15:46,079 --> 00:15:50,959
so next step is to build the web server

00:15:48,800 --> 00:15:53,920
web server is to be honest

00:15:50,959 --> 00:15:55,360
pretty simple uh it contains its

00:15:53,920 --> 00:15:57,120
deployment also

00:15:55,360 --> 00:15:59,040
it contains the same custom image but

00:15:57,120 --> 00:16:01,920
again i mean this is a very uh

00:15:59,040 --> 00:16:02,880
lightweight alpine image which has some

00:16:01,920 --> 00:16:06,000
networking

00:16:02,880 --> 00:16:06,000
application added to it

00:16:06,079 --> 00:16:12,160
so in this case what we are doing

00:16:09,120 --> 00:16:14,639
we are building the exact same thing

00:16:12,160 --> 00:16:16,240
we are connecting the two and together

00:16:14,639 --> 00:16:20,160
so the cnf router

00:16:16,240 --> 00:16:23,680
and uh the um web server

00:16:20,160 --> 00:16:26,320
um so they are using both vxlan id uh

00:16:23,680 --> 00:16:28,079
2002 so we are creating a vxlan

00:16:26,320 --> 00:16:31,279
interface we are assigning it

00:16:28,079 --> 00:16:34,000
an ip from the same subnet

00:16:31,279 --> 00:16:36,140
and we are using the same basically uh

00:16:34,000 --> 00:16:38,399
unicast uh

00:16:36,140 --> 00:16:42,320
[Music]

00:16:38,399 --> 00:16:44,240
the xlan type of traffic so

00:16:42,320 --> 00:16:45,680
this is for the first container so i

00:16:44,240 --> 00:16:47,199
would say this is a sidecar container

00:16:45,680 --> 00:16:49,600
that will set up the networking

00:16:47,199 --> 00:16:50,399
and we have a second container which

00:16:49,600 --> 00:16:54,160
runs the

00:16:50,399 --> 00:16:54,800
nginx web website so this set up the cnf

00:16:54,160 --> 00:16:56,720
web

00:16:54,800 --> 00:16:58,800
and once we have it we can do a cube

00:16:56,720 --> 00:17:01,519
catal get pods and we see that it is

00:16:58,800 --> 00:17:04,640
running with two out of two ready

00:17:01,519 --> 00:17:06,720
and finally what we need to run

00:17:04,640 --> 00:17:07,760
and install is the vm in itself so the

00:17:06,720 --> 00:17:10,799
vm

00:17:07,760 --> 00:17:12,000
again we said we are using cubot as a

00:17:10,799 --> 00:17:15,120
hypervisor

00:17:12,000 --> 00:17:16,160
and um basically it's a virtual machine

00:17:15,120 --> 00:17:19,520
instance

00:17:16,160 --> 00:17:20,000
um so it's a type of uh well it's the

00:17:19,520 --> 00:17:23,439
kind that

00:17:20,000 --> 00:17:25,520
uh for cubert and

00:17:23,439 --> 00:17:26,720
in this one we're using a very simple

00:17:25,520 --> 00:17:28,799
image i would say a

00:17:26,720 --> 00:17:31,039
default image from cube vert provided by

00:17:28,799 --> 00:17:34,480
themselves fedora image

00:17:31,039 --> 00:17:36,960
it's running um it's internal 5.6

00:17:34,480 --> 00:17:38,559
but whatever i mean you can use your own

00:17:36,960 --> 00:17:42,080
image in your own disk

00:17:38,559 --> 00:17:43,520
um in my case it's touring why god so

00:17:42,080 --> 00:17:45,840
this works fine

00:17:43,520 --> 00:17:47,280
um so what we are doing we are running

00:17:45,840 --> 00:17:48,960
two scripts basically

00:17:47,280 --> 00:17:50,720
and to run those two scripts before

00:17:48,960 --> 00:17:53,120
going through those two

00:17:50,720 --> 00:17:53,760
we are first creating a secret and these

00:17:53,120 --> 00:17:58,880
secrets

00:17:53,760 --> 00:18:01,440
it contained the base64 um

00:17:58,880 --> 00:18:03,600
why god private key and public key so

00:18:01,440 --> 00:18:03,919
the public key would be the public key

00:18:03,600 --> 00:18:06,960
of

00:18:03,919 --> 00:18:08,559
the other side the amsterdam side in

00:18:06,960 --> 00:18:10,799
this case as we are in tokyo

00:18:08,559 --> 00:18:12,400
and the private key of basically the

00:18:10,799 --> 00:18:15,039
tokyo site

00:18:12,400 --> 00:18:16,799
so those two will be mounted and this is

00:18:15,039 --> 00:18:17,120
where we have a starting script that

00:18:16,799 --> 00:18:19,679
will

00:18:17,120 --> 00:18:20,960
add my ssh key and mount the secrets to

00:18:19,679 --> 00:18:23,120
a specific folder

00:18:20,960 --> 00:18:24,960
and map the config map to a specific

00:18:23,120 --> 00:18:25,600
folder and then we are running the

00:18:24,960 --> 00:18:28,000
scripts

00:18:25,600 --> 00:18:29,760
as part of the starting script so if we

00:18:28,000 --> 00:18:32,160
go to the config maps this configm

00:18:29,760 --> 00:18:34,000
basically contains a shell script and

00:18:32,160 --> 00:18:36,799
this shell script will set up the

00:18:34,000 --> 00:18:38,640
wire guard and the networking so we're

00:18:36,799 --> 00:18:41,120
installing why god we're starting why

00:18:38,640 --> 00:18:42,960
god creating an interface of type regard

00:18:41,120 --> 00:18:44,559
and we are starting this we're starting

00:18:42,960 --> 00:18:46,720
way guard and listening on the default

00:18:44,559 --> 00:18:48,880
wagon pole 51 820

00:18:46,720 --> 00:18:50,000
and uh well using the private keys that

00:18:48,880 --> 00:18:52,640
we have mounted saying

00:18:50,000 --> 00:18:54,400
thanks to kubernetes features here's a

00:18:52,640 --> 00:18:57,360
secret

00:18:54,400 --> 00:18:57,679
and also we are setting up the peering

00:18:57,360 --> 00:19:01,120
with

00:18:57,679 --> 00:19:04,640
amsterdam so the peer here is basically

00:19:01,120 --> 00:19:07,760
the um i would say the uh

00:19:04,640 --> 00:19:11,679
public ip of uh amsterdam site

00:19:07,760 --> 00:19:13,200
it's hard-coded and allowed ipswich this

00:19:11,679 --> 00:19:16,960
is the ip we allow to

00:19:13,200 --> 00:19:20,880
to peel to um

00:19:16,960 --> 00:19:24,559
then we set up the underlay

00:19:20,880 --> 00:19:25,120
address so here what i mean by underlay

00:19:24,559 --> 00:19:27,600
addresses

00:19:25,120 --> 00:19:28,640
is i would say the the data plane

00:19:27,600 --> 00:19:31,760
between

00:19:28,640 --> 00:19:35,200
um the amsterdam side and uh

00:19:31,760 --> 00:19:36,840
tokyo site uh related to why god so we

00:19:35,200 --> 00:19:39,520
are setting up a subnet

00:19:36,840 --> 00:19:43,280
192.168.1

00:19:39,520 --> 00:19:45,919
and we are also creating a static route

00:19:43,280 --> 00:19:46,880
telling that every traffic going to the

00:19:45,919 --> 00:19:50,080
00:19:46,880 --> 00:19:53,440
16 goes to the tunnel

00:19:50,080 --> 00:19:54,559
so with this done we also need to set up

00:19:53,440 --> 00:19:58,240
the overlay so

00:19:54,559 --> 00:20:01,280
the vxlan so basically

00:19:58,240 --> 00:20:03,679
um what we are doing is um

00:20:01,280 --> 00:20:06,640
again uh we're not using multicast just

00:20:03,679 --> 00:20:10,480
for the sake of the demo we're using uh

00:20:06,640 --> 00:20:12,880
the unicast for static floating and um

00:20:10,480 --> 00:20:13,679
what we are creating here is a vxr

00:20:12,880 --> 00:20:15,679
interface

00:20:13,679 --> 00:20:18,400
with a specific vaseline id a different

00:20:15,679 --> 00:20:19,280
one and we are appending all the zeros

00:20:18,400 --> 00:20:22,480
addresses

00:20:19,280 --> 00:20:25,760
and send them to the vtep in this case

00:20:22,480 --> 00:20:27,840
the 192.168.102.2 and

00:20:25,760 --> 00:20:29,280
if you have paid admissions this is not

00:20:27,840 --> 00:20:32,640
one so the two is

00:20:29,280 --> 00:20:35,039
basically amsterdam site

00:20:32,640 --> 00:20:36,960
and then we also set up the transfer

00:20:35,039 --> 00:20:40,159
networks this is another network

00:20:36,960 --> 00:20:43,440
uh that we are using on top and uh

00:20:40,159 --> 00:20:45,280
basically this network as i said is the

00:20:43,440 --> 00:20:48,480
one that is used basically to

00:20:45,280 --> 00:20:51,280
let the two vms and the router speaks uh

00:20:48,480 --> 00:20:51,280
between themselves

00:20:51,919 --> 00:20:59,760
so here to put it simply

00:20:56,640 --> 00:21:01,280
we have configured this part so now we

00:20:59,760 --> 00:21:02,720
still need to configure this part and

00:21:01,280 --> 00:21:05,760
have the connection between

00:21:02,720 --> 00:21:09,039
the router and the

00:21:05,760 --> 00:21:12,000
vnf vm here working

00:21:09,039 --> 00:21:12,000
so if we go back to

00:21:14,000 --> 00:21:19,600
the terminal i'm creating

00:21:17,679 --> 00:21:20,960
again another vxlan interface with the

00:21:19,600 --> 00:21:24,000
same vxlan id

00:21:20,960 --> 00:21:27,120
as as a cnf router so

00:21:24,000 --> 00:21:30,480
2001 same thing for the forwarding

00:21:27,120 --> 00:21:34,159
database um and

00:21:30,480 --> 00:21:35,280
basically let's just set up the vxlan

00:21:34,159 --> 00:21:38,000
part

00:21:35,280 --> 00:21:40,000
and now we are using basically what we

00:21:38,000 --> 00:21:42,400
would call a layer 2

00:21:40,000 --> 00:21:43,360
handover to layer 3 so what how we are

00:21:42,400 --> 00:21:45,360
doing that

00:21:43,360 --> 00:21:46,880
we are creating a bridge which is

00:21:45,360 --> 00:21:49,840
basically a virtual

00:21:46,880 --> 00:21:51,120
switch of layer 2 and we are adding the

00:21:49,840 --> 00:21:53,840
interfaces

00:21:51,120 --> 00:21:54,640
uh that we have created before and we

00:21:53,840 --> 00:21:57,520
are setting

00:21:54,640 --> 00:21:59,039
everything up so once this is done we

00:21:57,520 --> 00:22:03,440
apply the manifest and

00:21:59,039 --> 00:22:03,440
normally we should see uh

00:22:03,600 --> 00:22:09,840
a pod called the old launcher that has

00:22:06,880 --> 00:22:11,360
the vm running so once this is done we

00:22:09,840 --> 00:22:15,679
need to expose some port

00:22:11,360 --> 00:22:18,400
for this um y-guard vm

00:22:15,679 --> 00:22:19,840
because uh well it's needed to speak uh

00:22:18,400 --> 00:22:22,240
where it's needed to speak

00:22:19,840 --> 00:22:24,400
with the y-guard and basically they have

00:22:22,240 --> 00:22:24,720
exports three ports ssh one well this

00:22:24,400 --> 00:22:27,520
one

00:22:24,720 --> 00:22:29,280
in a way it's just for me if i want or

00:22:27,520 --> 00:22:33,039
for anyone i mean if you want to

00:22:29,280 --> 00:22:35,679
reach the vm jssh uh a cluster ip

00:22:33,039 --> 00:22:36,640
and you can see that this one is uh

00:22:35,679 --> 00:22:39,600
listening

00:22:36,640 --> 00:22:40,960
uh targeting port 2001 on udp so this is

00:22:39,600 --> 00:22:45,840
a vxlan port

00:22:40,960 --> 00:22:48,559
and finally uh a not port

00:22:45,840 --> 00:22:50,159
not port one service of type not port

00:22:48,559 --> 00:22:52,159
and this is because we won't be using

00:22:50,159 --> 00:22:55,679
any load balancer will directly target

00:22:52,159 --> 00:22:57,360
the the worker node uh

00:22:55,679 --> 00:22:59,039
to have the channel working and we are

00:22:57,360 --> 00:23:02,720
exposing the default

00:22:59,039 --> 00:23:05,520
uh basically i would say y got port

00:23:02,720 --> 00:23:06,559
and uh as an outport and we have a port

00:23:05,520 --> 00:23:08,480
assigned it

00:23:06,559 --> 00:23:10,080
assigned here randomly and we'll be

00:23:08,480 --> 00:23:11,039
using this spot on the amsterdam site

00:23:10,080 --> 00:23:14,080
and i will show you this

00:23:11,039 --> 00:23:16,159
uh in a couple of minutes so

00:23:14,080 --> 00:23:17,600
once this is done we have finished

00:23:16,159 --> 00:23:21,039
everything on

00:23:17,600 --> 00:23:23,360
the wagon side the tokyo site

00:23:21,039 --> 00:23:24,159
in amsterdam we do exactly the same

00:23:23,360 --> 00:23:26,960
basically

00:23:24,159 --> 00:23:28,960
if we go to the manifest here in this

00:23:26,960 --> 00:23:32,559
case we have not that much

00:23:28,960 --> 00:23:34,400
we just have the vm 01 to apply

00:23:32,559 --> 00:23:35,600
and this is exactly the same as the one

00:23:34,400 --> 00:23:38,320
in tokyo

00:23:35,600 --> 00:23:39,919
the only difference i would say uh if

00:23:38,320 --> 00:23:41,440
you go down where obviously the white

00:23:39,919 --> 00:23:43,279
guard keys are

00:23:41,440 --> 00:23:44,480
private key is different this makes

00:23:43,279 --> 00:23:47,679
sense and

00:23:44,480 --> 00:23:50,000
the setting up of the y-guard tunnel

00:23:47,679 --> 00:23:50,799
here we are adding well we are changing

00:23:50,000 --> 00:23:52,320
we are adding

00:23:50,799 --> 00:23:53,840
well we're changing the public uh the

00:23:52,320 --> 00:23:54,320
public key obviously this is the one

00:23:53,840 --> 00:23:57,440
from

00:23:54,320 --> 00:23:58,080
tokyo and the endpoint basically this

00:23:57,440 --> 00:24:00,720
endpoint

00:23:58,080 --> 00:24:03,039
is the since we're using not port to

00:24:00,720 --> 00:24:06,720
expose the port on the tokyo side

00:24:03,039 --> 00:24:09,919
is if we do a capital get nodes

00:24:06,720 --> 00:24:13,039
you can see this is the ip external ip

00:24:09,919 --> 00:24:14,960
of the worker node so

00:24:13,039 --> 00:24:16,400
it's targeting the external ip and the

00:24:14,960 --> 00:24:18,480
port 30

00:24:16,400 --> 00:24:20,640
021 21 you can see it's the notebook

00:24:18,480 --> 00:24:24,000
port of white god

00:24:20,640 --> 00:24:26,799
so we are creating also the same uh

00:24:24,000 --> 00:24:28,240
the 102.2 so the same control network

00:24:26,799 --> 00:24:31,440
for the y guard

00:24:28,240 --> 00:24:32,720
and we are creating the vxlan interface

00:24:31,440 --> 00:24:35,120
etc etc

00:24:32,720 --> 00:24:36,000
exactly the same transfer network and

00:24:35,120 --> 00:24:38,000
finally

00:24:36,000 --> 00:24:39,039
this is a little change we are adding a

00:24:38,000 --> 00:24:42,159
static route

00:24:39,039 --> 00:24:45,120
telling you if you want to go to the 164

00:24:42,159 --> 00:24:47,039
16 network this is a network that we

00:24:45,120 --> 00:24:48,000
created between the cnf router and the

00:24:47,039 --> 00:24:51,520
web server

00:24:48,000 --> 00:24:53,679
you have to go through this uh basically

00:24:51,520 --> 00:24:54,880
know the point or end point where in

00:24:53,679 --> 00:24:57,440
this case

00:24:54,880 --> 00:24:58,640
it is the cnf router and the cnf how

00:24:57,440 --> 00:25:01,039
router will have a route

00:24:58,640 --> 00:25:02,480
table for for this specific network so

00:25:01,039 --> 00:25:05,679
we apply this one

00:25:02,480 --> 00:25:07,279
and if when we apply it will get pods we

00:25:05,679 --> 00:25:08,320
have this wheel launcher which is

00:25:07,279 --> 00:25:11,600
basically the vm

00:25:08,320 --> 00:25:15,440
and with vr ctl we can basically

00:25:11,600 --> 00:25:18,960
uh easily access the

00:25:15,440 --> 00:25:22,080
vm so let me use that console

00:25:18,960 --> 00:25:25,360
to config vm01 and

00:25:22,080 --> 00:25:28,799
yeah so we can connect to it

00:25:25,360 --> 00:25:30,480
so now logically if we are we should be

00:25:28,799 --> 00:25:34,720
able to target

00:25:30,480 --> 00:25:34,720
uh sorry we should be able to

00:25:34,880 --> 00:25:41,760
target um the web server

00:25:38,559 --> 00:25:46,240
so it's cnf web circuit getting

00:25:41,760 --> 00:25:49,520
exec minus it cnf

00:25:46,240 --> 00:25:52,159
web and we're just going to put ipa

00:25:49,520 --> 00:25:52,159
should be enough

00:25:52,640 --> 00:25:59,120
so it's 164 zero

00:25:56,159 --> 00:26:00,559
that one hundred so if we do a curl and

00:25:59,120 --> 00:26:03,520
we target it

00:26:00,559 --> 00:26:05,120
and there we go so we are able to reach

00:26:03,520 --> 00:26:08,400
the nginx web server

00:26:05,120 --> 00:26:10,559
so now if we want to ping this is not

00:26:08,400 --> 00:26:13,279
possible because if you recall correctly

00:26:10,559 --> 00:26:13,840
we have not allowed this type of traffic

00:26:13,279 --> 00:26:16,880
on

00:26:13,840 --> 00:26:20,159
the uh web server on this sorry on the

00:26:16,880 --> 00:26:20,159
on the router so if we

00:26:21,200 --> 00:26:27,840
actually we can just exact

00:26:24,640 --> 00:26:32,320
inside the router and

00:26:27,840 --> 00:26:35,200
uh let me see what type of

00:26:32,320 --> 00:26:36,880
rules we have inside the forward chain

00:26:35,200 --> 00:26:38,960
of the filter table

00:26:36,880 --> 00:26:40,720
so yeah we are not allowing anything the

00:26:38,960 --> 00:26:42,080
default policies drop and there is no

00:26:40,720 --> 00:26:44,880
icmp so let's

00:26:42,080 --> 00:26:45,919
let's add a rule just to allow this type

00:26:44,880 --> 00:26:49,279
of traffic

00:26:45,919 --> 00:26:51,600
and uh let it act let's disrupt

00:26:49,279 --> 00:26:52,960
as a firewall so we insert in the

00:26:51,600 --> 00:26:56,240
forward chain

00:26:52,960 --> 00:26:57,120
and just simply put minus p for protocol

00:26:56,240 --> 00:27:00,799
icmp

00:26:57,120 --> 00:27:01,679
and the targets accept and there we go

00:27:00,799 --> 00:27:04,960
we are having

00:27:01,679 --> 00:27:06,559
the ping response

00:27:04,960 --> 00:27:08,240
and you can see that the latency time is

00:27:06,559 --> 00:27:11,200
pretty high because well this

00:27:08,240 --> 00:27:12,799
uh it's japan so we have a 240

00:27:11,200 --> 00:27:16,400
milliseconds latency

00:27:12,799 --> 00:27:20,399
and uh yeah that's it for the demo

00:27:16,400 --> 00:27:23,919
so in summary we were able to

00:27:20,399 --> 00:27:28,320
use the vms to set up

00:27:23,919 --> 00:27:30,480
a tunnel and set up an overlay network

00:27:28,320 --> 00:27:33,840
and have traffic being sent from one

00:27:30,480 --> 00:27:37,840
side to the to other side

00:27:33,840 --> 00:27:40,159
the vms the vnf and be routed properly

00:27:37,840 --> 00:27:45,520
in the kubernetes cluster the target one

00:27:40,159 --> 00:27:45,520
using the kubernetes cni capabilities

00:27:46,840 --> 00:27:49,840
so

00:27:51,679 --> 00:27:58,960
so yeah in summary

00:27:55,279 --> 00:28:03,039
um for this talk uh everything related

00:27:58,960 --> 00:28:03,039
to zero touch networking so basically

00:28:03,120 --> 00:28:08,399
provisioning a device without a

00:28:06,320 --> 00:28:10,559
user interaction and the service

00:28:08,399 --> 00:28:12,880
management well it helps to have

00:28:10,559 --> 00:28:14,880
obviously smaller slices and to

00:28:12,880 --> 00:28:17,039
literally couple your puzzle pieces

00:28:14,880 --> 00:28:18,640
and to use cnfs with communities

00:28:17,039 --> 00:28:20,559
orchestration but this is not simple

00:28:18,640 --> 00:28:23,039
it's not always the case as i said we

00:28:20,559 --> 00:28:25,840
have lots of i would say legacy vendors

00:28:23,039 --> 00:28:26,559
that are still very popular like f5 or

00:28:25,840 --> 00:28:29,600
or even

00:28:26,559 --> 00:28:33,279
i mean for logs like splunk that

00:28:29,600 --> 00:28:36,240
well don't have these containerized

00:28:33,279 --> 00:28:36,960
solutions and you still must run those

00:28:36,240 --> 00:28:39,360
vms

00:28:36,960 --> 00:28:40,559
so we need those virtual machines but

00:28:39,360 --> 00:28:43,039
now thanks to

00:28:40,559 --> 00:28:44,880
projects like cubert we are able to run

00:28:43,039 --> 00:28:47,520
them side by side with a

00:28:44,880 --> 00:28:49,120
cloud native network functions and we

00:28:47,520 --> 00:28:51,440
can have the advantages of

00:28:49,120 --> 00:28:52,159
buzzwords so thank you very much for

00:28:51,440 --> 00:28:55,440
listening

00:28:52,159 --> 00:28:55,840
and that's it from our side yep thanks a

00:28:55,440 --> 00:28:57,760
lot

00:28:55,840 --> 00:29:00,640
and if you have any questions feel free

00:28:57,760 --> 00:29:00,640
to reach out to us

00:29:10,840 --> 00:29:13,840
bye

00:30:05,679 --> 00:30:07,760

YouTube URL: https://www.youtube.com/watch?v=4qlR8yOhyg0


