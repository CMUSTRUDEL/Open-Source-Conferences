Title: LF Networking: "OVP Automation DevOps for VNF CNF"
Publication date: 2020-09-30
Playlist: Open Networking & Edge Summit 2020
Description: 
	LF Networking: "OVP Automation DevOps for VNF/CNF"
Captions: 
	00:00:01,280 --> 00:00:06,480
welcome to immediate outburst today

00:00:03,439 --> 00:00:09,440
we will show you the oep test

00:00:06,480 --> 00:00:09,760
automation devops in our demo as you

00:00:09,440 --> 00:00:12,480
know

00:00:09,760 --> 00:00:13,519
the test process our traditional network

00:00:12,480 --> 00:00:16,880
element

00:00:13,519 --> 00:00:19,520
equipment or system can be abstracted

00:00:16,880 --> 00:00:19,920
into four steps tested topology design

00:00:19,520 --> 00:00:22,720
test

00:00:19,920 --> 00:00:23,680
environment construction test task

00:00:22,720 --> 00:00:27,519
execution and

00:00:23,680 --> 00:00:30,800
test result analysis each steps requires

00:00:27,519 --> 00:00:31,840
cross organizational coordination manual

00:00:30,800 --> 00:00:34,880
statistics

00:00:31,840 --> 00:00:37,680
and their signature confirmation

00:00:34,880 --> 00:00:37,920
take the network element access test as

00:00:37,680 --> 00:00:40,719
an

00:00:37,920 --> 00:00:43,280
example it usually takes about six

00:00:40,719 --> 00:00:46,079
months to get a new or renewed

00:00:43,280 --> 00:00:47,840
network access license before going

00:00:46,079 --> 00:00:50,239
online

00:00:47,840 --> 00:00:50,879
also with the introduction of open

00:00:50,239 --> 00:00:52,800
source

00:00:50,879 --> 00:00:54,960
components and software layered

00:00:52,800 --> 00:00:58,160
decoupling fv networks

00:00:54,960 --> 00:01:00,800
the frequency of software upgrades and

00:00:58,160 --> 00:01:01,280
new service introduction increase this

00:01:00,800 --> 00:01:05,360
makes

00:01:01,280 --> 00:01:08,080
tests become more complex and frequent

00:01:05,360 --> 00:01:09,840
in order to reduce the test costs and

00:01:08,080 --> 00:01:12,240
improve test efficiency

00:01:09,840 --> 00:01:13,119
it is urgent to introduce their

00:01:12,240 --> 00:01:17,119
automated

00:01:13,119 --> 00:01:19,119
tools in order to cope with about

00:01:17,119 --> 00:01:20,080
changes understand their problems

00:01:19,119 --> 00:01:23,520
international

00:01:20,080 --> 00:01:25,680
testing it is embedded and corresponding

00:01:23,520 --> 00:01:26,720
automation to should be introduced in

00:01:25,680 --> 00:01:29,360
each test

00:01:26,720 --> 00:01:29,840
step to build the common fv automated

00:01:29,360 --> 00:01:33,119
test

00:01:29,840 --> 00:01:33,759
platform realizing automatic test design

00:01:33,119 --> 00:01:36,799
automatic

00:01:33,759 --> 00:01:38,320
deployment of test environment automatic

00:01:36,799 --> 00:01:41,200
execution of test

00:01:38,320 --> 00:01:43,920
tasks and automatic analysis and

00:01:41,200 --> 00:01:47,040
certification our test is results

00:01:43,920 --> 00:01:50,320
finally build complete into and test

00:01:47,040 --> 00:01:54,159
the helps to improve test efficiency and

00:01:50,320 --> 00:01:57,040
test accuracy also based on the result

00:01:54,159 --> 00:01:59,759
of automated testing can build the

00:01:57,040 --> 00:02:02,799
self-service certification every style

00:01:59,759 --> 00:02:03,280
we believe that it will be an important

00:02:02,799 --> 00:02:06,399
means

00:02:03,280 --> 00:02:07,520
to cultivate operators open business

00:02:06,399 --> 00:02:10,560
ecosystem

00:02:07,520 --> 00:02:14,400
such as 5g plus ai and the 5g

00:02:10,560 --> 00:02:17,040
plus edge in order to achieve about

00:02:14,400 --> 00:02:19,840
ghost reducer function mapping with oep

00:02:17,040 --> 00:02:22,080
and onap you can see from this picture

00:02:19,840 --> 00:02:22,879
on app can cover most functions of

00:02:22,080 --> 00:02:25,599
automated

00:02:22,879 --> 00:02:28,160
tools we can leverage as easy to design

00:02:25,599 --> 00:02:31,680
test topology using args cheater

00:02:28,160 --> 00:02:33,120
components such as sofcfc to deploy the

00:02:31,680 --> 00:02:36,160
testing environment

00:02:33,120 --> 00:02:39,920
with tpp to execute the test task and

00:02:36,160 --> 00:02:43,319
collect the test reports oep also can

00:02:39,920 --> 00:02:46,319
provide the test results analysis and

00:02:43,319 --> 00:02:46,319
certifications

00:02:46,560 --> 00:02:50,480
here shows the show based off testing

00:02:49,440 --> 00:02:53,360
workflow

00:02:50,480 --> 00:02:54,239
in this process three types of shows are

00:02:53,360 --> 00:02:56,480
involved

00:02:54,239 --> 00:02:57,519
as the designer has the case developer

00:02:56,480 --> 00:03:00,159
and the test

00:02:57,519 --> 00:03:02,959
as curator the overall import of this

00:03:00,159 --> 00:03:05,519
workflow is test specification

00:03:02,959 --> 00:03:07,599
first the test designer is responsible

00:03:05,519 --> 00:03:11,519
for the test topology design

00:03:07,599 --> 00:03:14,560
which includes the test objective test

00:03:11,519 --> 00:03:17,599
tools and the network between the

00:03:14,560 --> 00:03:21,519
sdc based on the test specification

00:03:17,599 --> 00:03:24,720
and upload test topology to exchanger

00:03:21,519 --> 00:03:27,760
second test case developer implements

00:03:24,720 --> 00:03:30,000
the required test keys based test

00:03:27,760 --> 00:03:31,599
topology designed by thai state designer

00:03:30,000 --> 00:03:35,040
and meet it

00:03:31,599 --> 00:03:38,080
with btp and the third test

00:03:35,040 --> 00:03:42,080
excluder is responsible for test

00:03:38,080 --> 00:03:44,879
task execution in test task management

00:03:42,080 --> 00:03:45,760
system the basic execution unit of the

00:03:44,879 --> 00:03:48,799
tested task

00:03:45,760 --> 00:03:51,840
management system is their tested job

00:03:48,799 --> 00:03:55,040
a single job can contain one or more

00:03:51,840 --> 00:03:57,439
test keys in addition to the task

00:03:55,040 --> 00:03:59,200
management function it also provides the

00:03:57,439 --> 00:04:01,920
testing environments

00:03:59,200 --> 00:04:03,200
tools objective registration test

00:04:01,920 --> 00:04:05,599
definition

00:04:03,200 --> 00:04:06,879
and test job monitoring and other

00:04:05,599 --> 00:04:09,760
functions

00:04:06,879 --> 00:04:10,480
the test keys execute process where

00:04:09,760 --> 00:04:12,640
first

00:04:10,480 --> 00:04:14,159
interactivity's own app operator to

00:04:12,640 --> 00:04:17,359
complete the deployment

00:04:14,159 --> 00:04:19,519
of the test environment and then

00:04:17,359 --> 00:04:20,639
use the capability of third party

00:04:19,519 --> 00:04:23,759
instrument

00:04:20,639 --> 00:04:24,560
to assist in completing the overall

00:04:23,759 --> 00:04:27,840
testing

00:04:24,560 --> 00:04:29,280
and collect the test result finally the

00:04:27,840 --> 00:04:32,400
tested object

00:04:29,280 --> 00:04:36,160
then passed the test can enter the way

00:04:32,400 --> 00:04:38,560
i've marked the place automatically

00:04:36,160 --> 00:04:41,360
next i will demonstrate the process of

00:04:38,560 --> 00:04:44,880
1fn2 into testing according to different

00:04:41,360 --> 00:04:47,520
rules in this demo we will use open wrt

00:04:44,880 --> 00:04:48,400
which is an open source giveaway as the

00:04:47,520 --> 00:04:51,840
tested

00:04:48,400 --> 00:04:53,919
object and use spcv from sprint as the

00:04:51,840 --> 00:04:56,639
virtual test instrument

00:04:53,919 --> 00:04:58,960
to complete by directional traffic

00:04:56,639 --> 00:05:01,440
forwarding test

00:04:58,960 --> 00:05:02,160
first test designer design the testos

00:05:01,440 --> 00:05:04,240
hopefully

00:05:02,160 --> 00:05:06,639
as you see before you design the tested

00:05:04,240 --> 00:05:07,280
topology you should upload the seo tv

00:05:06,639 --> 00:05:10,800
app

00:05:07,280 --> 00:05:13,520
and the test instrument to sdc first

00:05:10,800 --> 00:05:14,639
what we see here is the topology we

00:05:13,520 --> 00:05:17,680
designed

00:05:14,639 --> 00:05:20,240
in advance in this topology it contains

00:05:17,680 --> 00:05:22,840
driven apps one is as you given as

00:05:20,240 --> 00:05:25,039
the other two are the virtual testing

00:05:22,840 --> 00:05:27,520
instruments connected across

00:05:25,039 --> 00:05:28,880
one management network and two network

00:05:27,520 --> 00:05:31,759
for testing

00:05:28,880 --> 00:05:32,160
we can also initial the network details

00:05:31,759 --> 00:05:39,840
and

00:05:32,160 --> 00:05:39,840
we have information in sdc

00:05:44,080 --> 00:05:49,120
after design you can test and distribute

00:05:47,120 --> 00:05:50,880
this topology to your own app of the

00:05:49,120 --> 00:05:53,440
twitter

00:05:50,880 --> 00:05:55,199
next step we need to develop the test

00:05:53,440 --> 00:05:56,080
scripts and the test the definition

00:05:55,199 --> 00:05:58,560
yammer file

00:05:56,080 --> 00:06:02,319
and delete them unity here you see is

00:05:58,560 --> 00:06:04,400
the test keys definition yamo

00:06:02,319 --> 00:06:06,880
which is modeled with test keys

00:06:04,400 --> 00:06:09,680
description input and output

00:06:06,880 --> 00:06:12,240
and also specifies the share execution

00:06:09,680 --> 00:06:12,240
script

00:06:18,880 --> 00:06:22,479
the tested script is used to deploy the

00:06:21,440 --> 00:06:25,360
testing environment

00:06:22,479 --> 00:06:26,479
and detected with simulated traffic the

00:06:25,360 --> 00:06:28,880
steps involved

00:06:26,479 --> 00:06:29,759
first set up cloud and subscription

00:06:28,880 --> 00:06:31,840
detail

00:06:29,759 --> 00:06:33,600
second deploys the test environment

00:06:31,840 --> 00:06:36,160
using online obstructor

00:06:33,600 --> 00:06:37,120
third generated the traffic are deployed

00:06:36,160 --> 00:06:40,160
by us

00:06:37,120 --> 00:06:43,039
finally clean up the test environment

00:06:40,160 --> 00:06:43,360
after the about steps the test executor

00:06:43,039 --> 00:06:47,440
can

00:06:43,360 --> 00:06:49,520
trigger the real test in this system

00:06:47,440 --> 00:06:51,840
tested executor should register the

00:06:49,520 --> 00:06:55,120
related environment before the test

00:06:51,840 --> 00:06:55,759
is actually executed you can reduce the

00:06:55,120 --> 00:06:59,759
beam

00:06:55,759 --> 00:07:04,400
when fm menu here now the system only

00:06:59,759 --> 00:07:04,400
supports on-app type manual registration

00:07:13,520 --> 00:07:16,639
in addition to the testing environment

00:07:15,520 --> 00:07:18,800
the test object

00:07:16,639 --> 00:07:19,840
and the tester tools also need to be

00:07:18,800 --> 00:07:23,440
registered

00:07:19,840 --> 00:07:28,080
in the system here you see we have

00:07:23,440 --> 00:07:32,639
registered the seot open wrt

00:07:28,080 --> 00:07:35,199
and also the test instrument stcv

00:07:32,639 --> 00:07:37,360
in the test specification management you

00:07:35,199 --> 00:07:38,240
will see all the specification and the

00:07:37,360 --> 00:07:41,840
test case

00:07:38,240 --> 00:07:44,240
the system supports click one test

00:07:41,840 --> 00:07:44,960
specification you will see other tested

00:07:44,240 --> 00:07:48,800
keys

00:07:44,960 --> 00:07:50,000
we can also choose to enable or disable

00:07:48,800 --> 00:07:52,240
one test case

00:07:50,000 --> 00:07:54,000
as the test case is disabled it

00:07:52,240 --> 00:07:59,840
shouldn't be displayed

00:07:54,000 --> 00:07:59,840
when you create test tasks

00:08:00,479 --> 00:08:03,840
you can also create your own test

00:08:02,560 --> 00:08:06,479
specification

00:08:03,840 --> 00:08:08,879
as needed when you choose the seot type

00:08:06,479 --> 00:08:10,400
all the text is supported for this seo

00:08:08,879 --> 00:08:12,639
key will be listed

00:08:10,400 --> 00:08:27,840
you can choose all part of them to

00:08:12,639 --> 00:08:27,840
create your own specifications

00:08:29,520 --> 00:08:33,440
then we can create the test job and

00:08:31,919 --> 00:08:35,279
execute

00:08:33,440 --> 00:08:37,039
when you create then test the job you

00:08:35,279 --> 00:08:38,000
will see all the required information

00:08:37,039 --> 00:08:41,519
usually failed

00:08:38,000 --> 00:08:44,399
in the compliance testing we didn't rely

00:08:41,519 --> 00:08:47,360
on any environment so we can skip

00:08:44,399 --> 00:08:49,600
the environment selection to choose test

00:08:47,360 --> 00:08:49,600
case

00:08:52,839 --> 00:08:57,519
directory

00:08:55,040 --> 00:09:00,000
and then the test job has been created

00:08:57,519 --> 00:09:02,080
and we can start it

00:09:00,000 --> 00:09:03,279
and in this page you can monitor the

00:09:02,080 --> 00:09:06,720
execution process

00:09:03,279 --> 00:09:08,000
and status once the test is executed

00:09:06,720 --> 00:09:10,480
successfully it will show

00:09:08,000 --> 00:09:13,760
one link here which means you can upload

00:09:10,480 --> 00:09:15,680
the test vf to the certified marketplace

00:09:13,760 --> 00:09:17,920
of course you can download the test

00:09:15,680 --> 00:09:23,839
report if this report contains

00:09:17,920 --> 00:09:23,839
more execution information

00:09:29,600 --> 00:09:33,680
for the way i've trafficked following

00:09:31,519 --> 00:09:34,839
test because it involves way of

00:09:33,680 --> 00:09:38,160
instantiation

00:09:34,839 --> 00:09:41,360
and deletion the testing is take about

00:09:38,160 --> 00:09:44,080
20 minutes so we'll use a task that has

00:09:41,360 --> 00:09:46,399
been performed before to a last change

00:09:44,080 --> 00:09:48,080
in this test job we use the environment

00:09:46,399 --> 00:09:51,839
we registered before

00:09:48,080 --> 00:09:54,000
we can also set the test keys input

00:09:51,839 --> 00:09:57,120
parameters here

00:09:54,000 --> 00:10:02,080
such as the suu id which should be

00:09:57,120 --> 00:10:02,080
consistent with the topology ide

00:10:02,839 --> 00:10:07,920
sdc

00:10:04,959 --> 00:10:10,560
let's check the test status in addition

00:10:07,920 --> 00:10:13,120
to the overall status of the

00:10:10,560 --> 00:10:14,240
test case you can also see all the test

00:10:13,120 --> 00:10:18,880
steps

00:10:14,240 --> 00:10:21,600
it involved currently we can also

00:10:18,880 --> 00:10:24,560
get some basic statistics of the system

00:10:21,600 --> 00:10:24,560
on the dashboard

00:10:25,760 --> 00:10:31,920
okay above is also demo content

00:10:28,800 --> 00:10:33,440
if you are interested in our demo and

00:10:31,920 --> 00:10:36,640
have more questions

00:10:33,440 --> 00:10:42,800
welcome to contact us

00:10:36,640 --> 00:10:42,800

YouTube URL: https://www.youtube.com/watch?v=CzfBS9C8xhA


