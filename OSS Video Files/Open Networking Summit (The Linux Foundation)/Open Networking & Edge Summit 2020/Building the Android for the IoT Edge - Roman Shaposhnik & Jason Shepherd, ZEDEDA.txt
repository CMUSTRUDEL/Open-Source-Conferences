Title: Building the Android for the IoT Edge - Roman Shaposhnik & Jason Shepherd, ZEDEDA
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	Building the Android for the IoT Edge - Roman Shaposhnik & Jason Shepherd, ZEDEDA
Captions: 
	00:00:01,680 --> 00:00:04,960
hello hey my name is jason sheppard and

00:00:03,919 --> 00:00:06,799
with me is roman

00:00:04,960 --> 00:00:08,000
posnick and we're here to talk to you

00:00:06,799 --> 00:00:09,679
about uh

00:00:08,000 --> 00:00:12,400
building the android for the iot edge

00:00:09,679 --> 00:00:15,679
related to project eve within lf edge

00:00:12,400 --> 00:00:17,760
so um hey everyone

00:00:15,679 --> 00:00:20,000
all right so that's us um you can find

00:00:17,760 --> 00:00:20,560
us online you know there and uh both of

00:00:20,000 --> 00:00:22,160
us work

00:00:20,560 --> 00:00:23,760
with the company called zida and we

00:00:22,160 --> 00:00:24,560
leverage uh eve as part of our

00:00:23,760 --> 00:00:27,519
commercial

00:00:24,560 --> 00:00:28,080
offer so you know what is e the aroma is

00:00:27,519 --> 00:00:30,080
going to talk

00:00:28,080 --> 00:00:31,359
in a lot more detail about eve as a

00:00:30,080 --> 00:00:33,680
foundation for

00:00:31,359 --> 00:00:36,079
iot edge applications but you think of

00:00:33,680 --> 00:00:38,480
it as a universal abstraction layer for

00:00:36,079 --> 00:00:40,640
um edge hardware and it's really focused

00:00:38,480 --> 00:00:42,640
on hardware outside of a

00:00:40,640 --> 00:00:43,920
secure data center so it could be a

00:00:42,640 --> 00:00:45,600
gateway it could be a server on a

00:00:43,920 --> 00:00:47,039
factory floor but just anything out

00:00:45,600 --> 00:00:49,280
you in the wild that you need to make

00:00:47,039 --> 00:00:50,879
sure is very secure uh you want to

00:00:49,280 --> 00:00:53,199
abstract all that complexity from the

00:00:50,879 --> 00:00:54,320
hardware and make it much more easy for

00:00:53,199 --> 00:00:56,960
developers to

00:00:54,320 --> 00:00:58,480
to deploy applications orchestrate those

00:00:56,960 --> 00:01:00,320
applications remotely

00:00:58,480 --> 00:01:01,760
uh completely open obviously it's part

00:01:00,320 --> 00:01:03,359
of linux foundation and

00:01:01,760 --> 00:01:05,519
and ultimately it's about providing

00:01:03,359 --> 00:01:07,520
these open apis that enable you to

00:01:05,519 --> 00:01:09,439
take advantage of that abstraction and

00:01:07,520 --> 00:01:10,479
and prevent lock-in for any any

00:01:09,439 --> 00:01:13,200
particular

00:01:10,479 --> 00:01:14,479
application stack hardware etc so that's

00:01:13,200 --> 00:01:16,479
kind of even a nutshell and we'll get

00:01:14,479 --> 00:01:17,840
into more details but

00:01:16,479 --> 00:01:20,880
just to make sure it's clear where we

00:01:17,840 --> 00:01:23,439
play so i recommend you check out the

00:01:20,880 --> 00:01:24,840
elf edge taxonomy paper that came out

00:01:23,439 --> 00:01:27,280
earlier this summer you can find that

00:01:24,840 --> 00:01:28,720
online lots and lots of detail won't go

00:01:27,280 --> 00:01:29,600
through all the detail here but you

00:01:28,720 --> 00:01:33,520
think of

00:01:29,600 --> 00:01:35,840
uh eve as being the serving the iot

00:01:33,520 --> 00:01:38,479
component of the smart device edge as

00:01:35,840 --> 00:01:39,040
covered in that paper so this means

00:01:38,479 --> 00:01:41,840
anything

00:01:39,040 --> 00:01:43,360
outside of a secure data center uh out

00:01:41,840 --> 00:01:45,840
distributed out in the field

00:01:43,360 --> 00:01:46,560
uh but still capable of running apps if

00:01:45,840 --> 00:01:48,159
you go one

00:01:46,560 --> 00:01:49,920
step further left now you're you're

00:01:48,159 --> 00:01:51,759
highly constrained in terms of

00:01:49,920 --> 00:01:53,280
device you know it's more embedded

00:01:51,759 --> 00:01:54,000
software very custom tools for

00:01:53,280 --> 00:01:55,600
everything

00:01:54,000 --> 00:01:57,520
but once you have enough memory to

00:01:55,600 --> 00:01:59,680
abstract uh that

00:01:57,520 --> 00:02:00,640
bare metal foundation for virtualization

00:01:59,680 --> 00:02:01,920
in containers

00:02:00,640 --> 00:02:04,000
there's a lot more that you can do and

00:02:01,920 --> 00:02:04,880
it simplifies a lot of that complexity

00:02:04,000 --> 00:02:06,799
and so

00:02:04,880 --> 00:02:09,039
um you know eve is focused on that lots

00:02:06,799 --> 00:02:10,879
of great tools for the data center but

00:02:09,039 --> 00:02:12,959
really a challenge when you get outside

00:02:10,879 --> 00:02:14,480
of a physically secure data center

00:02:12,959 --> 00:02:16,720
you know lots and lots of different

00:02:14,480 --> 00:02:18,800
diversity many types of

00:02:16,720 --> 00:02:20,480
x86 hardware arm hardware a lot of

00:02:18,800 --> 00:02:22,640
legacy stuff out there

00:02:20,480 --> 00:02:23,680
uh all kinds of different things to deal

00:02:22,640 --> 00:02:26,000
with

00:02:23,680 --> 00:02:26,720
scale factors so when you're in the uh

00:02:26,000 --> 00:02:28,239
the cloud

00:02:26,720 --> 00:02:30,480
you talk about the public cloud there's

00:02:28,239 --> 00:02:32,720
tens of public clouds that really matter

00:02:30,480 --> 00:02:34,160
when you get to the device edge

00:02:32,720 --> 00:02:35,920
especially the constrained devices will

00:02:34,160 --> 00:02:36,640
eventually be trillions of devices out

00:02:35,920 --> 00:02:39,599
there

00:02:36,640 --> 00:02:40,239
and now the the iot edge where compute's

00:02:39,599 --> 00:02:41,599
happening

00:02:40,239 --> 00:02:43,840
you know it's somewhere in between but

00:02:41,599 --> 00:02:45,120
just massive scale over time that you

00:02:43,840 --> 00:02:47,040
have to comprehend and it's just

00:02:45,120 --> 00:02:48,239
different than what's in the data center

00:02:47,040 --> 00:02:49,680
and the other big thing is when you're

00:02:48,239 --> 00:02:50,239
not in the data center not only do you

00:02:49,680 --> 00:02:51,920
not have

00:02:50,239 --> 00:02:53,280
physical security all the time but also

00:02:51,920 --> 00:02:54,080
you don't necessarily have a network

00:02:53,280 --> 00:02:55,680
perimeter

00:02:54,080 --> 00:02:57,440
you know you don't necessarily know that

00:02:55,680 --> 00:02:58,400
there's a firewall or have control over

00:02:57,440 --> 00:03:01,120
that so you need

00:02:58,400 --> 00:03:02,000
a solution that's built to be out you in

00:03:01,120 --> 00:03:04,879
the wild

00:03:02,000 --> 00:03:07,200
built to to be secure regardless of um

00:03:04,879 --> 00:03:09,840
how you deploy it and so that's a big

00:03:07,200 --> 00:03:11,120
enablement that eve is looking to go do

00:03:09,840 --> 00:03:13,680
and if you really look at it you know

00:03:11,120 --> 00:03:15,760
the smart device edge includes

00:03:13,680 --> 00:03:17,599
mobile devices client devices a very

00:03:15,760 --> 00:03:20,879
well solved problem

00:03:17,599 --> 00:03:23,519
with windows and ios and android

00:03:20,879 --> 00:03:25,760
the the iot compute edge is also part of

00:03:23,519 --> 00:03:28,159
that as defined in the taxonomy

00:03:25,760 --> 00:03:29,200
and that's that's the wild west right

00:03:28,159 --> 00:03:31,840
now and so think of

00:03:29,200 --> 00:03:33,040
eve doing for the iot component of the

00:03:31,840 --> 00:03:34,239
smart device edge

00:03:33,040 --> 00:03:36,159
what android did for the mobile

00:03:34,239 --> 00:03:36,959
component component you create a

00:03:36,159 --> 00:03:38,720
universal

00:03:36,959 --> 00:03:40,480
foundation make it super easy to deploy

00:03:38,720 --> 00:03:41,840
apps you can build an ecosystem on top

00:03:40,480 --> 00:03:44,159
but uh

00:03:41,840 --> 00:03:45,920
way work way more easier than basically

00:03:44,159 --> 00:03:46,959
depth by a thousand cuts hacking away at

00:03:45,920 --> 00:03:48,560
you know all this different kind of

00:03:46,959 --> 00:03:50,879
hardware and whatnot so

00:03:48,560 --> 00:03:52,720
a very uh very uh important you know

00:03:50,879 --> 00:03:54,159
part of we think of of scaling embedded

00:03:52,720 --> 00:03:57,519
computing to meet the needs of

00:03:54,159 --> 00:03:58,400
iot and edge and so just you know real

00:03:57,519 --> 00:04:00,640
quick on kind of

00:03:58,400 --> 00:04:02,239
the philosophy behind eve in terms of

00:04:00,640 --> 00:04:04,080
architectural approach

00:04:02,239 --> 00:04:05,519
so there's a variety of different ways

00:04:04,080 --> 00:04:06,959
of doing it um you know

00:04:05,519 --> 00:04:08,640
roman will describe a little bit more

00:04:06,959 --> 00:04:09,760
but you know eve is a bare metal

00:04:08,640 --> 00:04:12,319
abstraction layer so you're sitting

00:04:09,760 --> 00:04:14,480
right on top of the hardware

00:04:12,319 --> 00:04:15,920
we support both virtual machines and

00:04:14,480 --> 00:04:17,759
containerized workloads so that's

00:04:15,920 --> 00:04:19,840
important when you're in a legacy

00:04:17,759 --> 00:04:21,040
uh world where you've got say some

00:04:19,840 --> 00:04:23,600
windows applications

00:04:21,040 --> 00:04:25,280
that you want to put next to modernized

00:04:23,600 --> 00:04:27,680
new cloud native apps so

00:04:25,280 --> 00:04:28,639
uh very very much focused on more

00:04:27,680 --> 00:04:29,840
constrained hardware

00:04:28,639 --> 00:04:31,680
you know still has enough memory to

00:04:29,840 --> 00:04:33,360
support the abstraction but but

00:04:31,680 --> 00:04:34,560
a lot more constrained than a rack of

00:04:33,360 --> 00:04:35,600
servers that you would see in a data

00:04:34,560 --> 00:04:39,040
center

00:04:35,600 --> 00:04:42,720
a completely uh uh open api

00:04:39,040 --> 00:04:44,880
in terms of how you build um

00:04:42,720 --> 00:04:46,160
a interface into eve so you're not going

00:04:44,880 --> 00:04:47,680
to get locked into any particular

00:04:46,160 --> 00:04:50,080
interface

00:04:47,680 --> 00:04:50,880
so that's that's uh you know a

00:04:50,080 --> 00:04:52,479
foundationally

00:04:50,880 --> 00:04:53,840
foundational level like what it's about

00:04:52,479 --> 00:04:54,800
and of course the other big things since

00:04:53,840 --> 00:04:56,479
you're bare metal is you're not

00:04:54,800 --> 00:04:57,840
necessarily going to break that device

00:04:56,479 --> 00:04:59,680
or you won't break that device out in

00:04:57,840 --> 00:05:01,039
the field compared to some other ways of

00:04:59,680 --> 00:05:02,639
doing it

00:05:01,039 --> 00:05:05,520
when you're looking at the alternatives

00:05:02,639 --> 00:05:07,680
today there is a number of proprietary

00:05:05,520 --> 00:05:09,039
bare metal solutions you can get some

00:05:07,680 --> 00:05:11,039
similar benefits because you've got that

00:05:09,039 --> 00:05:12,880
lower level hardware access but

00:05:11,039 --> 00:05:14,720
you will be locked in to only the

00:05:12,880 --> 00:05:18,320
controller that's supported with that

00:05:14,720 --> 00:05:20,240
abstraction layer the other big thing

00:05:18,320 --> 00:05:21,759
with those solutions is you know all of

00:05:20,240 --> 00:05:24,160
the solutions that we see today are

00:05:21,759 --> 00:05:26,000
really focused at the data center

00:05:24,160 --> 00:05:27,520
class equipment not stuff that's

00:05:26,000 --> 00:05:29,280
distributed out in the wild that's more

00:05:27,520 --> 00:05:31,360
constrained

00:05:29,280 --> 00:05:32,639
so that's that's one option we see out

00:05:31,360 --> 00:05:35,120
there and the other option we see

00:05:32,639 --> 00:05:36,560
often is where you take an os you put an

00:05:35,120 --> 00:05:37,360
agent on top and that talks with the

00:05:36,560 --> 00:05:38,560
controller

00:05:37,360 --> 00:05:40,000
but the problem with that is if you

00:05:38,560 --> 00:05:41,360
don't do a lot of integration between

00:05:40,000 --> 00:05:42,720
the agent and the os

00:05:41,360 --> 00:05:44,800
you're very likely going to break that

00:05:42,720 --> 00:05:46,080
device out in the field if you don't do

00:05:44,800 --> 00:05:47,919
hardening of the os you're going to have

00:05:46,080 --> 00:05:49,520
security issues so the whole point is if

00:05:47,919 --> 00:05:50,960
you integrate the agent with the ios

00:05:49,520 --> 00:05:51,199
well you've just built eve so the idea

00:05:50,960 --> 00:05:53,199
is

00:05:51,199 --> 00:05:54,880
hey just use eve and let's go build a

00:05:53,199 --> 00:05:56,479
community around that and again kind of

00:05:54,880 --> 00:05:58,560
do that android thing from the outset

00:05:56,479 --> 00:06:02,080
edge and make it just a lot easier to

00:05:58,560 --> 00:06:05,199
to scale long term so uh you know real

00:06:02,080 --> 00:06:07,039
quick before i hand it over to

00:06:05,199 --> 00:06:08,639
to roman is is kind of give you an

00:06:07,039 --> 00:06:09,520
example so one of the patterns that we

00:06:08,639 --> 00:06:11,600
see all the time

00:06:09,520 --> 00:06:12,800
people have legacy applications they

00:06:11,600 --> 00:06:14,319
need to be able to

00:06:12,800 --> 00:06:15,759
support those you can't just get rid of

00:06:14,319 --> 00:06:16,479
existing investments you want to run

00:06:15,759 --> 00:06:18,240
some new

00:06:16,479 --> 00:06:20,080
containerized applications on the same

00:06:18,240 --> 00:06:22,080
hardware so you imagine

00:06:20,080 --> 00:06:23,600
a gateway or a server deployed you know

00:06:22,080 --> 00:06:24,960
could be in a retail store it could be

00:06:23,600 --> 00:06:27,360
on a

00:06:24,960 --> 00:06:28,160
an office space you know even a factory

00:06:27,360 --> 00:06:29,680
floor doing

00:06:28,160 --> 00:06:30,960
uh video surveillance you know obviously

00:06:29,680 --> 00:06:32,160
we're moving more and more to computer

00:06:30,960 --> 00:06:35,600
vision and whatnot but

00:06:32,160 --> 00:06:37,840
classic video surveillance use case most

00:06:35,600 --> 00:06:39,520
video surveillance applications vms's

00:06:37,840 --> 00:06:41,919
are windows based today

00:06:39,520 --> 00:06:43,520
uh very often today what happens is

00:06:41,919 --> 00:06:44,400
someone goes and deploys a box they put

00:06:43,520 --> 00:06:46,160
it in the closet

00:06:44,400 --> 00:06:47,919
they start it running it's recording and

00:06:46,160 --> 00:06:49,840
then they leave you as a technician they

00:06:47,919 --> 00:06:51,759
leave and then they never see it again

00:06:49,840 --> 00:06:53,440
and so eve can provide a lot of

00:06:51,759 --> 00:06:56,160
visibility into

00:06:53,440 --> 00:06:58,000
that um that foundation but also help

00:06:56,160 --> 00:06:59,360
you run more modernized workloads next

00:06:58,000 --> 00:07:01,840
to it in terms of containers

00:06:59,360 --> 00:07:02,560
maybe you want to put a an ai model next

00:07:01,840 --> 00:07:06,080
to that

00:07:02,560 --> 00:07:06,080
foundation for um

00:07:06,319 --> 00:07:10,160
object detection it could be licensed

00:07:07,840 --> 00:07:11,919
place could be people etc

00:07:10,160 --> 00:07:13,599
various different things and then send

00:07:11,919 --> 00:07:14,720
that data could be on-prem into the

00:07:13,599 --> 00:07:16,080
cloud maybe you're going to put

00:07:14,720 --> 00:07:17,840
something like azure iot edge

00:07:16,080 --> 00:07:19,680
next to it maybe you're using some sort

00:07:17,840 --> 00:07:22,240
of pro protocol conversion

00:07:19,680 --> 00:07:22,880
uh service you're running in there you

00:07:22,240 --> 00:07:24,880
can assign

00:07:22,880 --> 00:07:26,560
to different cores and and uh

00:07:24,880 --> 00:07:28,240
co-processing elements so it's

00:07:26,560 --> 00:07:29,919
it's really about how do i provide that

00:07:28,240 --> 00:07:31,680
hardware abstraction how do i make it

00:07:29,919 --> 00:07:35,280
very very easy to deploy

00:07:31,680 --> 00:07:38,400
and orchestrate hardware uh and software

00:07:35,280 --> 00:07:40,560
any device any application any cloud

00:07:38,400 --> 00:07:42,319
any on-prem system so the eve is that

00:07:40,560 --> 00:07:42,880
becomes that universal abstraction layer

00:07:42,319 --> 00:07:44,240
so

00:07:42,880 --> 00:07:45,759
with that i'll hand it off to roman to

00:07:44,240 --> 00:07:47,919
provide a little more detail on on the

00:07:45,759 --> 00:07:49,440
project and where we're headed

00:07:47,919 --> 00:07:51,759
absolutely thank you jason for a

00:07:49,440 --> 00:07:53,919
wonderful introduction so hopefully

00:07:51,759 --> 00:07:55,759
we got everybody's attention and sort of

00:07:53,919 --> 00:07:56,639
interest in digging a little bit deeper

00:07:55,759 --> 00:07:59,280
into eve

00:07:56,639 --> 00:08:00,160
and let me just again reiterate what eve

00:07:59,280 --> 00:08:02,479
is

00:08:00,160 --> 00:08:03,919
uh so conceptually it's basically an

00:08:02,479 --> 00:08:07,039
operating system like

00:08:03,919 --> 00:08:10,000
uh you know uh offering

00:08:07,039 --> 00:08:11,199
so the closest analogy in the existing

00:08:10,000 --> 00:08:13,759
space would be

00:08:11,199 --> 00:08:14,560
uh if you're familiar with vmware uh it

00:08:13,759 --> 00:08:16,800
would be

00:08:14,560 --> 00:08:18,879
something like esx or esxi you know from

00:08:16,800 --> 00:08:19,520
vmware it's basically something that you

00:08:18,879 --> 00:08:21,440
deploy

00:08:19,520 --> 00:08:23,680
on an edge node right you know it could

00:08:21,440 --> 00:08:25,440
be a small computer it could be you know

00:08:23,680 --> 00:08:27,039
as small actually as raspberry pi

00:08:25,440 --> 00:08:28,560
i will talk about raspberry pi's a

00:08:27,039 --> 00:08:29,599
little bit later but you know typically

00:08:28,560 --> 00:08:32,399
it's a computer

00:08:29,599 --> 00:08:33,839
uh the size of the intel's nook uh you

00:08:32,399 --> 00:08:34,560
know that's attached to some kind of an

00:08:33,839 --> 00:08:36,719
equipment

00:08:34,560 --> 00:08:38,320
or basically does you know data

00:08:36,719 --> 00:08:40,880
acquisition and processing

00:08:38,320 --> 00:08:42,719
and eve just gets deployed uh as an

00:08:40,880 --> 00:08:45,120
operating system so it boots

00:08:42,719 --> 00:08:46,880
and once it boots uh it has all of these

00:08:45,120 --> 00:08:48,000
different services uh that you can see

00:08:46,880 --> 00:08:50,880
on this slide

00:08:48,000 --> 00:08:51,279
essentially being in support of running

00:08:50,880 --> 00:08:53,440
uh

00:08:51,279 --> 00:08:54,320
virtual machines and containers and

00:08:53,440 --> 00:08:57,200
those become

00:08:54,320 --> 00:08:57,839
user applications right so we'll get

00:08:57,200 --> 00:08:59,680
into

00:08:57,839 --> 00:09:01,519
all of these different services uh but

00:08:59,680 --> 00:09:02,560
you can see that you know at the end of

00:09:01,519 --> 00:09:05,760
the day

00:09:02,560 --> 00:09:07,920
eve is that uh

00:09:05,760 --> 00:09:09,040
you know appliance almost operating

00:09:07,920 --> 00:09:12,399
system right

00:09:09,040 --> 00:09:13,519
uh that doesn't really require any kind

00:09:12,399 --> 00:09:15,040
of management

00:09:13,519 --> 00:09:17,040
because all of the management is built

00:09:15,040 --> 00:09:19,040
right into it

00:09:17,040 --> 00:09:20,800
so if you look into the key capability

00:09:19,040 --> 00:09:22,000
key capabilities that eve actually

00:09:20,800 --> 00:09:25,279
provides to the application

00:09:22,000 --> 00:09:26,480
layer uh we spend a great deal on making

00:09:25,279 --> 00:09:29,360
sure that the trust

00:09:26,480 --> 00:09:29,680
and security becomes as easy as possible

00:09:29,360 --> 00:09:31,279
uh

00:09:29,680 --> 00:09:33,200
because all of these you know small

00:09:31,279 --> 00:09:34,240
devices nowadays have actually a pretty

00:09:33,200 --> 00:09:35,920
decent

00:09:34,240 --> 00:09:37,680
route of trust infrastructure you know

00:09:35,920 --> 00:09:40,160
typically expressed as a tpm

00:09:37,680 --> 00:09:41,760
you know intel or t or you know similar

00:09:40,160 --> 00:09:43,839
infrastructure on arm

00:09:41,760 --> 00:09:45,360
uh but using it you know from your

00:09:43,839 --> 00:09:46,399
application becomes a challenge a lot of

00:09:45,360 --> 00:09:49,760
times right

00:09:46,399 --> 00:09:51,600
uh so eve uh takes care of that on

00:09:49,760 --> 00:09:53,200
its own side and then presents a

00:09:51,600 --> 00:09:54,800
virtualized view

00:09:53,200 --> 00:09:56,560
into that security infrastructure back

00:09:54,800 --> 00:09:59,600
to the application uh

00:09:56,560 --> 00:10:02,320
so obviously uh we you know

00:09:59,600 --> 00:10:03,600
are pretty efficient in terms of how we

00:10:02,320 --> 00:10:06,560
manage resources like

00:10:03,600 --> 00:10:07,920
cpu memory you know device ports but on

00:10:06,560 --> 00:10:10,240
the device ports we also

00:10:07,920 --> 00:10:12,720
provide an additional level of security

00:10:10,240 --> 00:10:15,200
uh making sure that you can actually

00:10:12,720 --> 00:10:15,920
remotely turn on and off you know things

00:10:15,200 --> 00:10:18,320
like usb

00:10:15,920 --> 00:10:19,680
ports for example so that you cut down

00:10:18,320 --> 00:10:21,680
on the attack factors

00:10:19,680 --> 00:10:23,360
in your infrastructure or you can assign

00:10:21,680 --> 00:10:24,880
individual usb ports you know to

00:10:23,360 --> 00:10:26,880
individual applications

00:10:24,880 --> 00:10:28,320
uh so let's say a container that

00:10:26,880 --> 00:10:30,640
actually needs to

00:10:28,320 --> 00:10:32,000
get some data out of a machine gets a

00:10:30,640 --> 00:10:33,680
usb port assigned but

00:10:32,000 --> 00:10:36,560
not none of the other containers running

00:10:33,680 --> 00:10:40,240
on these will get you know anything

00:10:36,560 --> 00:10:41,760
uh we support you know some level of uh

00:10:40,240 --> 00:10:43,760
what you would describe as you know

00:10:41,760 --> 00:10:46,240
serverless infrastructure

00:10:43,760 --> 00:10:48,240
uh so we have this uh way of running

00:10:46,240 --> 00:10:50,640
tiny vms called unicorns

00:10:48,240 --> 00:10:52,800
uh and you can actually build the vm uh

00:10:50,640 --> 00:10:53,680
full flash vm to be as small as one

00:10:52,800 --> 00:10:55,200
megabyte

00:10:53,680 --> 00:10:57,040
which is actually a pretty decent you

00:10:55,200 --> 00:10:59,760
know size uh

00:10:57,040 --> 00:11:01,839
again cpu assignment is obviously given

00:10:59,760 --> 00:11:03,920
for any kind of virtualization system

00:11:01,839 --> 00:11:05,680
uh but we're also taking care of gpu

00:11:03,920 --> 00:11:08,720
assignments uh which becomes

00:11:05,680 --> 00:11:10,399
a use case a lot of times for uh ai

00:11:08,720 --> 00:11:12,320
applications on the edge

00:11:10,399 --> 00:11:14,800
uh and especially applications that tend

00:11:12,320 --> 00:11:16,000
to do a lot of uh acceleration you know

00:11:14,800 --> 00:11:18,560
on the gpu

00:11:16,000 --> 00:11:20,320
uh and finally when it comes to patching

00:11:18,560 --> 00:11:22,079
you know security updates

00:11:20,320 --> 00:11:23,519
all of that is built right into eve

00:11:22,079 --> 00:11:25,600
itself uh

00:11:23,519 --> 00:11:28,399
just like android you know we use this

00:11:25,600 --> 00:11:30,480
uh blue green partition uh

00:11:28,399 --> 00:11:31,920
so that you never really uh are in

00:11:30,480 --> 00:11:34,240
danger of bricking your device

00:11:31,920 --> 00:11:36,000
even if you update eve itself but

00:11:34,240 --> 00:11:38,160
obviously updating an application

00:11:36,000 --> 00:11:39,360
uh running on this is as easy as just

00:11:38,160 --> 00:11:40,880
deploying a new version of the

00:11:39,360 --> 00:11:41,760
application and you know killing the old

00:11:40,880 --> 00:11:43,600
one right so

00:11:41,760 --> 00:11:45,200
it's a very cloud native way of looking

00:11:43,600 --> 00:11:46,640
at your application deployment

00:11:45,200 --> 00:11:48,959
and at the end of the day that's what

00:11:46,640 --> 00:11:49,920
eve is trying to do so eve is basically

00:11:48,959 --> 00:11:52,800
trying to turn

00:11:49,920 --> 00:11:54,839
all of your edge infrastructure into

00:11:52,800 --> 00:11:56,399
something that looks like yet another

00:11:54,839 --> 00:12:00,800
cloud

00:11:56,399 --> 00:12:01,200
um so we actually had a few things you

00:12:00,800 --> 00:12:04,399
know

00:12:01,200 --> 00:12:04,880
for our project roadmap for 2020 and we

00:12:04,399 --> 00:12:06,560
kind of

00:12:04,880 --> 00:12:08,160
actually got quite a few of them done

00:12:06,560 --> 00:12:10,639
but there's still you know a few

00:12:08,160 --> 00:12:11,680
uh outstanding so i'll just call out the

00:12:10,639 --> 00:12:13,120
ones that you know

00:12:11,680 --> 00:12:14,880
are pretty interesting and you can

00:12:13,120 --> 00:12:17,680
actually play with them already

00:12:14,880 --> 00:12:18,639
um so one of them was integrating kvm

00:12:17,680 --> 00:12:22,160
and acorn

00:12:18,639 --> 00:12:25,200
hypervisors into eve eve uh began

00:12:22,160 --> 00:12:27,519
uh as a technology based on zam

00:12:25,200 --> 00:12:29,440
hypervisor but from the beginning we

00:12:27,519 --> 00:12:30,399
actually wanted it to be hypervisor

00:12:29,440 --> 00:12:32,240
agnostic

00:12:30,399 --> 00:12:34,560
and to keep us honest obviously we

00:12:32,240 --> 00:12:37,120
integrated kvm you know pretty quickly

00:12:34,560 --> 00:12:38,720
uh but the fact that intel has donated

00:12:37,120 --> 00:12:40,880
you know acorn

00:12:38,720 --> 00:12:43,360
a hypervisor that's specifically aimed

00:12:40,880 --> 00:12:45,200
at industrial and real-time use

00:12:43,360 --> 00:12:46,560
to linux foundation accelerated our

00:12:45,200 --> 00:12:48,480
integration with acorn

00:12:46,560 --> 00:12:49,760
and intel team actually did all the work

00:12:48,480 --> 00:12:51,600
uh which is a great

00:12:49,760 --> 00:12:53,120
you know news for us because you know as

00:12:51,600 --> 00:12:54,560
any open source project we're always

00:12:53,120 --> 00:12:55,600
looking for community members to

00:12:54,560 --> 00:12:56,880
contribute

00:12:55,600 --> 00:12:59,279
uh so that's pretty interesting and you

00:12:56,880 --> 00:12:59,920
can play with it already uh we actually

00:12:59,279 --> 00:13:02,639
added

00:12:59,920 --> 00:13:03,440
uh uh you know we shrunk e front time

00:13:02,639 --> 00:13:05,639
quite a bit

00:13:03,440 --> 00:13:07,440
so right now we can you know fit into

00:13:05,639 --> 00:13:11,040
256 megabytes

00:13:07,440 --> 00:13:12,240
of ram and about you know the same size

00:13:11,040 --> 00:13:14,480
of the flash

00:13:12,240 --> 00:13:16,160
uh honestly you know to be absolutely

00:13:14,480 --> 00:13:18,000
comfortable we probably need you know

00:13:16,160 --> 00:13:18,800
512 but you can actually start playing

00:13:18,000 --> 00:13:21,839
with eve

00:13:18,800 --> 00:13:21,839
even in that small footprint

00:13:21,920 --> 00:13:28,399
uh just a quick you know summary on the

00:13:25,279 --> 00:13:29,440
internal composition of eve right so any

00:13:28,399 --> 00:13:32,320
kind of workload

00:13:29,440 --> 00:13:32,880
uh or any kind of resource that you need

00:13:32,320 --> 00:13:35,360
to be

00:13:32,880 --> 00:13:37,519
expressed as a user resource on eve

00:13:35,360 --> 00:13:39,440
basically gets expressed in a similar

00:13:37,519 --> 00:13:40,720
manner to kubernetes crds

00:13:39,440 --> 00:13:42,639
and you know for those of you familiar

00:13:40,720 --> 00:13:45,040
with kubernetes crds

00:13:42,639 --> 00:13:46,320
stand for custom resource definitions so

00:13:45,040 --> 00:13:48,560
basically anything that

00:13:46,320 --> 00:13:49,360
runs on eve we'll get a crd-like

00:13:48,560 --> 00:13:50,959
definition

00:13:49,360 --> 00:13:52,480
and in fact we're actually working with

00:13:50,959 --> 00:13:55,920
the community to see

00:13:52,480 --> 00:13:58,720
maybe we can migrate to the crd uh

00:13:55,920 --> 00:13:59,440
format itself so then eve basically

00:13:58,720 --> 00:14:01,839
becomes

00:13:59,440 --> 00:14:03,600
even more uh even closer to the

00:14:01,839 --> 00:14:05,199
kubernetes you know as we all know it

00:14:03,600 --> 00:14:07,760
today

00:14:05,199 --> 00:14:08,480
but uh what do those crds actually

00:14:07,760 --> 00:14:10,959
express

00:14:08,480 --> 00:14:11,519
well fundamentally on eve you basically

00:14:10,959 --> 00:14:14,079
have

00:14:11,519 --> 00:14:16,079
uh three kind of resources right uh you

00:14:14,079 --> 00:14:18,560
have volumes which basically signify

00:14:16,079 --> 00:14:20,160
storage and those volumes could be just

00:14:18,560 --> 00:14:21,279
you know virtual machine volumes like

00:14:20,160 --> 00:14:24,079
you know block disk

00:14:21,279 --> 00:14:25,040
or they could be container or ci volume

00:14:24,079 --> 00:14:27,120
you know which is

00:14:25,040 --> 00:14:28,320
a file system you know posix file system

00:14:27,120 --> 00:14:30,720
like interface

00:14:28,320 --> 00:14:32,160
uh we give you a pretty flexible way of

00:14:30,720 --> 00:14:33,839
managing them but you know that

00:14:32,160 --> 00:14:36,240
basically storage management

00:14:33,839 --> 00:14:38,079
the second type of resource is network

00:14:36,240 --> 00:14:39,600
uh so we actually abstract away all of

00:14:38,079 --> 00:14:41,360
the complexity of networks so for

00:14:39,600 --> 00:14:43,360
example you can basically say i want a

00:14:41,360 --> 00:14:46,720
resource that is a network

00:14:43,360 --> 00:14:48,160
that is connected to an amazon vpc

00:14:46,720 --> 00:14:49,600
with the following set of credentials

00:14:48,160 --> 00:14:50,320
and eve will just instantiate that

00:14:49,600 --> 00:14:54,079
network

00:14:50,320 --> 00:14:55,600
and make it available uh on the system

00:14:54,079 --> 00:14:57,519
and finally once you have volumes and

00:14:55,600 --> 00:14:59,360
networks basically there has to be

00:14:57,519 --> 00:15:01,680
something that takes care of you know

00:14:59,360 --> 00:15:03,519
actually using them and that something

00:15:01,680 --> 00:15:05,600
is a runnable entity

00:15:03,519 --> 00:15:07,199
and any runnable entity or need gets

00:15:05,600 --> 00:15:09,519
represented as a task

00:15:07,199 --> 00:15:11,680
so tasks are basically uh either

00:15:09,519 --> 00:15:13,360
containers or vms or unicorns

00:15:11,680 --> 00:15:14,880
that essentially consume volumes and

00:15:13,360 --> 00:15:16,160
networks and do something useful

00:15:14,880 --> 00:15:18,160
right you know they also obviously

00:15:16,160 --> 00:15:20,079
consume cpu and ram uh but

00:15:18,160 --> 00:15:21,600
cpu and ram are kind of table stakes so

00:15:20,079 --> 00:15:22,320
you know i don't really call them out

00:15:21,600 --> 00:15:23,839
separately

00:15:22,320 --> 00:15:25,920
so that's in a nutshell they call

00:15:23,839 --> 00:15:27,519
composition of eve you know that's how

00:15:25,920 --> 00:15:28,320
kind of how you have to think about the

00:15:27,519 --> 00:15:31,600
system

00:15:28,320 --> 00:15:33,199
uh so if you would uh see a manifest of

00:15:31,600 --> 00:15:35,519
what gets deployed on eve

00:15:33,199 --> 00:15:37,279
that manifest would look very similar to

00:15:35,519 --> 00:15:38,959
a kubernetes manifest or you know

00:15:37,279 --> 00:15:40,720
hashicorp terraform

00:15:38,959 --> 00:15:42,480
uh so you would feel right at home if

00:15:40,720 --> 00:15:43,199
you're familiar with the typical devops

00:15:42,480 --> 00:15:46,160
you know tool

00:15:43,199 --> 00:15:46,959
tool chain now finally you know one

00:15:46,160 --> 00:15:50,079
exciting bit

00:15:46,959 --> 00:15:52,399
uh is a full support of raspberry pi 4.

00:15:50,079 --> 00:15:54,560
you know before raspberry pi 4 raspberry

00:15:52,399 --> 00:15:56,560
pi's were not really capable as you know

00:15:54,560 --> 00:15:59,199
computers in terms of virtualization

00:15:56,560 --> 00:16:00,880
uh because they uh were not implementing

00:15:59,199 --> 00:16:02,720
uh geeks correctly

00:16:00,880 --> 00:16:04,639
uh but with raspberry pi 4 we have a

00:16:02,720 --> 00:16:06,560
full flash platform you know on arm you

00:16:04,639 --> 00:16:08,160
know which is very exciting for us

00:16:06,560 --> 00:16:10,480
so there was a lot of work done with the

00:16:08,160 --> 00:16:11,040
zen community uh between zen and eve to

00:16:10,480 --> 00:16:13,920
make it

00:16:11,040 --> 00:16:15,360
uh uh available you know but now you can

00:16:13,920 --> 00:16:16,160
basically check it out you know you can

00:16:15,360 --> 00:16:17,839
go to the

00:16:16,160 --> 00:16:19,440
eves project website and it's probably

00:16:17,839 --> 00:16:20,079
the easiest way to start playing with

00:16:19,440 --> 00:16:21,759
eve

00:16:20,079 --> 00:16:23,839
right you know to get yourself a

00:16:21,759 --> 00:16:26,800
raspberry pi board and just

00:16:23,839 --> 00:16:28,320
uh uh trying it out now before you do

00:16:26,800 --> 00:16:31,519
that you might actually want to

00:16:28,320 --> 00:16:33,519
give it a try on the uh laptop and we

00:16:31,519 --> 00:16:34,880
allow for that as well in fact we

00:16:33,519 --> 00:16:37,680
actually have a

00:16:34,880 --> 00:16:38,320
brother or sister project you know to

00:16:37,680 --> 00:16:40,240
eve called

00:16:38,320 --> 00:16:42,079
eden which is essentially a sweet

00:16:40,240 --> 00:16:42,800
farming knife for open source eave

00:16:42,079 --> 00:16:45,360
management

00:16:42,800 --> 00:16:47,279
so again think of edem eden as you know

00:16:45,360 --> 00:16:49,120
a bit of a hashicorp like tooling

00:16:47,279 --> 00:16:50,880
to essentially tie all of the different

00:16:49,120 --> 00:16:52,399
things that you need to have running to

00:16:50,880 --> 00:16:55,839
basically make a fleet

00:16:52,399 --> 00:16:57,360
of eve devices useful uh and today

00:16:55,839 --> 00:16:59,759
eden supports you know three different

00:16:57,360 --> 00:17:01,440
kind of eve um you know you can run

00:16:59,759 --> 00:17:02,959
eve locally on your laptop which i'm

00:17:01,440 --> 00:17:04,640
about to demo quickly

00:17:02,959 --> 00:17:06,880
you can run eve on your raspberry pi you

00:17:04,640 --> 00:17:10,000
can eve run eve as a virtualized

00:17:06,880 --> 00:17:12,559
instance on google cloud compute

00:17:10,000 --> 00:17:13,919
and the tooling of eden basically mimics

00:17:12,559 --> 00:17:17,039
a popular

00:17:13,919 --> 00:17:19,039
devops tool chain so demo time

00:17:17,039 --> 00:17:20,559
all right so the first thing that you

00:17:19,039 --> 00:17:23,919
need to do once you download

00:17:20,559 --> 00:17:27,439
eden from github is to build it uh which

00:17:23,919 --> 00:17:29,280
we will use make to do uh make build

00:17:27,439 --> 00:17:31,120
and eden is written in go so i could

00:17:29,280 --> 00:17:32,880
have just easily used go compiler but

00:17:31,120 --> 00:17:34,320
it's just a little bit nicer to use make

00:17:32,880 --> 00:17:35,840
but this is the last time we will be

00:17:34,320 --> 00:17:37,760
using make everything else is done

00:17:35,840 --> 00:17:39,280
through the eden utility itself

00:17:37,760 --> 00:17:40,960
so it comes with a lot of helpful

00:17:39,280 --> 00:17:42,160
commands we will be exploring a few of

00:17:40,960 --> 00:17:45,200
them today

00:17:42,160 --> 00:17:47,919
so the first command that you should

00:17:45,200 --> 00:17:50,640
know about is called eden config and

00:17:47,919 --> 00:17:53,440
eden config is modeled after kubernetes

00:17:50,640 --> 00:17:55,440
context so it's basically allowing you

00:17:53,440 --> 00:17:56,320
to manage different profiles or flavors

00:17:55,440 --> 00:17:59,600
of eve

00:17:56,320 --> 00:18:01,360
so let's start with adding the default

00:17:59,600 --> 00:18:03,039
uh config but before we do that let's

00:18:01,360 --> 00:18:05,039
see what options are available

00:18:03,039 --> 00:18:07,120
so as you can see we have a raspberry pi

00:18:05,039 --> 00:18:09,360
option we have a google compute option

00:18:07,120 --> 00:18:11,280
but today we will be using the easiest

00:18:09,360 --> 00:18:13,760
the simplest one of all which is running

00:18:11,280 --> 00:18:15,280
eve directly on my laptop using qmo

00:18:13,760 --> 00:18:17,440
so this is the default config that we

00:18:15,280 --> 00:18:20,080
just generated and now let's

00:18:17,440 --> 00:18:22,000
set this config up so there's a command

00:18:20,080 --> 00:18:25,200
called eden setup

00:18:22,000 --> 00:18:25,919
which essentially uh is downloading and

00:18:25,200 --> 00:18:27,440
generating

00:18:25,919 --> 00:18:29,600
all of the bits and pieces that you

00:18:27,440 --> 00:18:31,039
could easily download and generate

00:18:29,600 --> 00:18:32,640
manually yourself

00:18:31,039 --> 00:18:34,400
but it's just a little bit nicer to use

00:18:32,640 --> 00:18:35,679
eden and orchestrate

00:18:34,400 --> 00:18:38,160
all of these different steps so right

00:18:35,679 --> 00:18:41,280
now for example it creates certificates

00:18:38,160 --> 00:18:43,120
uh to install into the image so when eve

00:18:41,280 --> 00:18:44,960
comes up you know there's a

00:18:43,120 --> 00:18:46,720
mutual tls that protects you know any

00:18:44,960 --> 00:18:49,120
kind of connection that it does

00:18:46,720 --> 00:18:50,880
uh it also downloads a particular

00:18:49,120 --> 00:18:53,520
release of eve so right now it

00:18:50,880 --> 00:18:55,039
downloaded this release from docker hub

00:18:53,520 --> 00:18:57,360
and it needs to unpack this release and

00:18:55,039 --> 00:19:00,080
basically turn it into an image

00:18:57,360 --> 00:19:00,720
that has all those uh certificates built

00:19:00,080 --> 00:19:03,039
in

00:19:00,720 --> 00:19:03,760
um so it's done it's not too bad it's

00:19:03,039 --> 00:19:05,200
not

00:19:03,760 --> 00:19:07,600
running for too long and besides it's

00:19:05,200 --> 00:19:08,960
just one time action so now that we have

00:19:07,600 --> 00:19:11,440
everything set up correctly

00:19:08,960 --> 00:19:12,160
let's start everything up so there is a

00:19:11,440 --> 00:19:15,280
command called

00:19:12,160 --> 00:19:17,520
eden start which essentially

00:19:15,280 --> 00:19:18,559
is running a whole bunch of containers

00:19:17,520 --> 00:19:22,000
and you can see

00:19:18,559 --> 00:19:23,679
which ones by just doing docker ps

00:19:22,000 --> 00:19:25,679
all of the eden containers are prefixed

00:19:23,679 --> 00:19:27,919
with eden so it's pretty easy to see

00:19:25,679 --> 00:19:30,080
what they are but it also started the

00:19:27,919 --> 00:19:32,160
qmo so that's the eve itself

00:19:30,080 --> 00:19:34,080
and if you want to take a look at what

00:19:32,160 --> 00:19:35,600
eden thinks about your system you can

00:19:34,080 --> 00:19:39,039
always do

00:19:35,600 --> 00:19:39,919
eden status and it will basically show

00:19:39,039 --> 00:19:41,760
you that you know

00:19:39,919 --> 00:19:43,520
a lot of things are green the only thing

00:19:41,760 --> 00:19:44,160
that is yellow is eve is actually

00:19:43,520 --> 00:19:45,679
running

00:19:44,160 --> 00:19:47,679
but it hasn't been registered with the

00:19:45,679 --> 00:19:48,400
controller so eve is not known to eden

00:19:47,679 --> 00:19:51,760
just yet

00:19:48,400 --> 00:19:54,880
let's fix it by issuing eden eve

00:19:51,760 --> 00:19:56,320
on board command and i will run it in

00:19:54,880 --> 00:19:57,280
the background because it takes a little

00:19:56,320 --> 00:19:58,559
bit of time

00:19:57,280 --> 00:20:00,320
and the reason takes a little bit of

00:19:58,559 --> 00:20:03,039
time is because eve

00:20:00,320 --> 00:20:03,520
follows an old hollywood principle you

00:20:03,039 --> 00:20:05,760
don't

00:20:03,520 --> 00:20:07,679
call us we call you in that sense you

00:20:05,760 --> 00:20:09,200
cannot really establish an inbound

00:20:07,679 --> 00:20:12,159
connection into eve

00:20:09,200 --> 00:20:13,120
so for example now that eden needs to uh

00:20:12,159 --> 00:20:14,880
register eve

00:20:13,120 --> 00:20:16,960
it cannot really just call eve it needs

00:20:14,880 --> 00:20:18,400
to wait for eve to call it

00:20:16,960 --> 00:20:20,000
and then it can basically exchange

00:20:18,400 --> 00:20:22,799
security information that would

00:20:20,000 --> 00:20:24,640
uh allow you to recognize that this is

00:20:22,799 --> 00:20:25,679
indeed the eu that needs to be trusted

00:20:24,640 --> 00:20:27,679
and managed

00:20:25,679 --> 00:20:28,799
so it needs to wait for an internal eve

00:20:27,679 --> 00:20:31,360
timer to elapse

00:20:28,799 --> 00:20:32,640
you know and for eve to contact you uh

00:20:31,360 --> 00:20:34,320
while it's doing that let me actually

00:20:32,640 --> 00:20:35,120
show you another useful command which is

00:20:34,320 --> 00:20:38,960
eden

00:20:35,120 --> 00:20:40,720
eve console and this is just

00:20:38,960 --> 00:20:42,640
inside of the eve itself right you know

00:20:40,720 --> 00:20:44,080
where right now inside of a unix

00:20:42,640 --> 00:20:46,240
instance linux instance

00:20:44,080 --> 00:20:47,679
that is eve itself so you can run ps and

00:20:46,240 --> 00:20:49,280
see the processes that are running on

00:20:47,679 --> 00:20:50,480
the system it's just a console into a

00:20:49,280 --> 00:20:53,600
system right

00:20:50,480 --> 00:20:55,200
uh but it looks like you know the uh eve

00:20:53,600 --> 00:20:56,799
node has been provisioned and the reason

00:20:55,200 --> 00:21:00,000
i know this is because it

00:20:56,799 --> 00:21:03,600
gets the uuid as its hostname so let's

00:21:00,000 --> 00:21:03,919
exit this uh and see what edens thinks

00:21:03,600 --> 00:21:06,799
of

00:21:03,919 --> 00:21:07,840
our running eve instance now so for that

00:21:06,799 --> 00:21:11,280
obviously let's

00:21:07,840 --> 00:21:12,880
rerun eden status command

00:21:11,280 --> 00:21:14,640
and right now everything seems to be

00:21:12,880 --> 00:21:16,880
green so eden

00:21:14,640 --> 00:21:17,760
knows and understands the remote eve

00:21:16,880 --> 00:21:19,440
apis

00:21:17,760 --> 00:21:21,120
so now the only question is what can you

00:21:19,440 --> 00:21:23,360
do with this setup well

00:21:21,120 --> 00:21:24,159
what i tell everyone to do is to run a

00:21:23,360 --> 00:21:26,080
hello world

00:21:24,159 --> 00:21:28,159
type of a docker container which

00:21:26,080 --> 00:21:31,919
typically is nginx so let's do

00:21:28,159 --> 00:21:33,520
just that eden comes with a pod command

00:21:31,919 --> 00:21:35,679
which basically allows you to deploy

00:21:33,520 --> 00:21:37,760
different types of containers and vms

00:21:35,679 --> 00:21:39,520
uh and sort of modeled after docker so

00:21:37,760 --> 00:21:40,880
it's pretty easy for people to get their

00:21:39,520 --> 00:21:44,240
head around

00:21:40,880 --> 00:21:47,600
so let's use eden pod

00:21:44,240 --> 00:21:51,280
deploy command and deploy an nginx

00:21:47,600 --> 00:21:55,039
but also proxy it's a report to 80 28

00:21:51,280 --> 00:21:56,559
on my local computer so let's run it

00:21:55,039 --> 00:21:58,240
as you can see eden is basically

00:21:56,559 --> 00:22:00,799
creating a configuration for eve

00:21:58,240 --> 00:22:02,320
that eve will later contact controller

00:22:00,799 --> 00:22:04,480
and ask for

00:22:02,320 --> 00:22:06,320
but if you want to know the status that

00:22:04,480 --> 00:22:09,200
your container is in you can run

00:22:06,320 --> 00:22:11,360
eden pod ps command and you will

00:22:09,200 --> 00:22:14,080
basically see that your container is

00:22:11,360 --> 00:22:16,880
in configuration it hasn't really been

00:22:14,080 --> 00:22:19,200
requested or provisioned by eve just yet

00:22:16,880 --> 00:22:20,960
uh but the whole system knows about it

00:22:19,200 --> 00:22:22,320
so it takes a little bit of time for the

00:22:20,960 --> 00:22:23,200
container to be requested and

00:22:22,320 --> 00:22:25,200
provisioned

00:22:23,200 --> 00:22:28,240
uh but by the time we're done you will

00:22:25,200 --> 00:22:30,720
basically have a running nginx instance

00:22:28,240 --> 00:22:31,760
uh and just so that we don't waste time

00:22:30,720 --> 00:22:33,679
waiting for it

00:22:31,760 --> 00:22:36,000
i'll cut down to when it's actually

00:22:33,679 --> 00:22:36,000
running

00:22:36,080 --> 00:22:40,640
now as you can see uh the state of the

00:22:38,000 --> 00:22:42,559
container changed to download started

00:22:40,640 --> 00:22:44,640
this is basically an indication that eve

00:22:42,559 --> 00:22:45,919
has uh started downloading it from

00:22:44,640 --> 00:22:48,000
docker registering

00:22:45,919 --> 00:22:49,440
by the way eden actually runs a private

00:22:48,000 --> 00:22:50,240
docker registry on your laptop so i

00:22:49,440 --> 00:22:51,919
could have just

00:22:50,240 --> 00:22:53,679
you know created a custom container and

00:22:51,919 --> 00:22:55,919
put it in my registry here

00:22:53,679 --> 00:22:57,200
but this one is being downloaded from

00:22:55,919 --> 00:22:58,960
docker hub

00:22:57,200 --> 00:23:01,280
so let's wait a little bit for it to

00:22:58,960 --> 00:23:01,280
finish

00:23:01,520 --> 00:23:05,280
okay it looks like right now our

00:23:04,000 --> 00:23:06,640
container is up and running so

00:23:05,280 --> 00:23:07,840
everything went correctly

00:23:06,640 --> 00:23:09,039
again it took a little bit of time

00:23:07,840 --> 00:23:09,919
that's why we're doing these you know

00:23:09,039 --> 00:23:11,679
jump cuts

00:23:09,919 --> 00:23:13,440
uh so the container is up and running so

00:23:11,679 --> 00:23:16,400
let's see if i can curl

00:23:13,440 --> 00:23:18,400
this container tada you now have your

00:23:16,400 --> 00:23:20,159
first container running on eve

00:23:18,400 --> 00:23:23,120
and that concludes our demo back to you

00:23:20,159 --> 00:23:25,039
jason cool all right thanks roman so

00:23:23,120 --> 00:23:26,559
um yeah just we'll kind of wrap it up

00:23:25,039 --> 00:23:28,559
here you know obviously we welcome you

00:23:26,559 --> 00:23:30,480
guys to join in on eve and

00:23:28,559 --> 00:23:32,480
and help contribute you know explore you

00:23:30,480 --> 00:23:35,120
grab a grab a raspberry pi and

00:23:32,480 --> 00:23:36,159
start hacking um we've actually been

00:23:35,120 --> 00:23:38,080
growing as a community

00:23:36,159 --> 00:23:39,360
so we're up uh just over 50 unique

00:23:38,080 --> 00:23:42,240
contributors um

00:23:39,360 --> 00:23:42,799
these days uh zida ur company roman and

00:23:42,240 --> 00:23:44,240
crew

00:23:42,799 --> 00:23:45,919
contributed of course we've had a lot

00:23:44,240 --> 00:23:49,120
coming in from xilinx and

00:23:45,919 --> 00:23:50,559
and intel a variety of others and so the

00:23:49,120 --> 00:23:52,480
community is growing

00:23:50,559 --> 00:23:54,880
and we're seeing eve being deployed in a

00:23:52,480 --> 00:23:58,000
variety of different vertical markets so

00:23:54,880 --> 00:24:00,000
industrial spaces um people interested

00:23:58,000 --> 00:24:01,360
in it and from a health care standpoint

00:24:00,000 --> 00:24:03,200
if i'm deploying in hospitals and i

00:24:01,360 --> 00:24:06,000
don't necessarily own the network as a

00:24:03,200 --> 00:24:06,400
as a solution oem into a hospital uh you

00:24:06,000 --> 00:24:08,240
know

00:24:06,400 --> 00:24:10,400
out in wind turbines out in the middle

00:24:08,240 --> 00:24:13,440
of nowhere uh where it requires like a

00:24:10,400 --> 00:24:15,440
helicopter ride to go out there and

00:24:13,440 --> 00:24:17,120
touch anything so having that remote

00:24:15,440 --> 00:24:19,120
management really helps

00:24:17,120 --> 00:24:20,799
so it's just a variety of use cases and

00:24:19,120 --> 00:24:21,360
it's really about bringing together the

00:24:20,799 --> 00:24:24,080
best

00:24:21,360 --> 00:24:25,760
uh solutions into a holistic package and

00:24:24,080 --> 00:24:26,480
then exposing that open api to where

00:24:25,760 --> 00:24:28,159
people can

00:24:26,480 --> 00:24:29,520
just kind of simplify the whole

00:24:28,159 --> 00:24:30,000
development experience and then you can

00:24:29,520 --> 00:24:33,440
just go

00:24:30,000 --> 00:24:35,600
you innovate uh so with that i think um

00:24:33,440 --> 00:24:36,640
we'll wrap up there's a there's some

00:24:35,600 --> 00:24:39,919
links here

00:24:36,640 --> 00:24:42,400
um you know we uh encourage you to go

00:24:39,919 --> 00:24:42,400
check out

00:24:42,640 --> 00:24:47,760
and and um you go check out you know

00:24:46,240 --> 00:24:49,200
look at the the codes out there of

00:24:47,760 --> 00:24:50,159
course you know lots of documentation

00:24:49,200 --> 00:24:52,880
online we run

00:24:50,159 --> 00:24:53,840
um weekly office hours if you have any

00:24:52,880 --> 00:24:55,039
questions or you just want to get

00:24:53,840 --> 00:24:57,440
involved there

00:24:55,039 --> 00:24:59,279
and um with that i think we've got time

00:24:57,440 --> 00:25:00,320
for a few questions if there's questions

00:24:59,279 --> 00:25:02,960
in the chat

00:25:00,320 --> 00:25:04,159
otherwise that's a wrap for us and

00:25:02,960 --> 00:25:12,159
thanks for listening

00:25:04,159 --> 00:25:12,159

YouTube URL: https://www.youtube.com/watch?v=0lchg7slk1k


