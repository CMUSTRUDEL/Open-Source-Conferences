Title: CI-CT-CD, Devops Loop for the Future Telco Cloud - Fu Qiao, China Mobile
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	CI-CT-CD, Devops Loop for the Future Telco Cloud - Fu Qiao, China Mobile
Captions: 
	00:00:01,360 --> 00:00:03,840
good morning good afternoon good evening

00:00:03,439 --> 00:00:06,160
uh

00:00:03,840 --> 00:00:07,359
good days this is futile from china

00:00:06,160 --> 00:00:10,800
mobile

00:00:07,359 --> 00:00:14,400
uh giving you this virtual session

00:00:10,800 --> 00:00:15,040
from beijing china so i hope everyone

00:00:14,400 --> 00:00:19,439
would

00:00:15,040 --> 00:00:23,279
enjoy this uh first virtual session for

00:00:19,439 --> 00:00:25,599
oas today i want to

00:00:23,279 --> 00:00:27,119
share our continuous integration

00:00:25,599 --> 00:00:29,039
continuous testing and continuous

00:00:27,119 --> 00:00:31,359
delivery

00:00:29,039 --> 00:00:33,200
pipeline we're using in channel mobile

00:00:31,359 --> 00:00:36,640
and also share our view for the

00:00:33,200 --> 00:00:37,840
uh devops loops uh for our future telco

00:00:36,640 --> 00:00:40,800
cloud

00:00:37,840 --> 00:00:41,440
so on the second page uh i actually

00:00:40,800 --> 00:00:43,440
listed

00:00:41,440 --> 00:00:45,520
the the contents i want to share in this

00:00:43,440 --> 00:00:47,840
session first is about

00:00:45,520 --> 00:00:48,559
the challenges we see for the telco

00:00:47,840 --> 00:00:50,640
cloud

00:00:48,559 --> 00:00:52,559
and secondly i want to share the view we

00:00:50,640 --> 00:00:55,360
have for the whole devops loops

00:00:52,559 --> 00:00:57,039
for future techno cloud and finally i

00:00:55,360 --> 00:00:57,680
want to share some of the experience we

00:00:57,039 --> 00:01:00,800
got

00:00:57,680 --> 00:01:04,080
when we're constructing our telco cloud

00:01:00,800 --> 00:01:05,840
so um talking about nfv nfv actually the

00:01:04,080 --> 00:01:09,040
first uh

00:01:05,840 --> 00:01:10,560
the kind of uh concept was uh proposed

00:01:09,040 --> 00:01:13,920
eight years ago

00:01:10,560 --> 00:01:17,119
uh by sc nfv in the white paper

00:01:13,920 --> 00:01:18,640
and then as the nfv work worked out the

00:01:17,119 --> 00:01:20,960
framework

00:01:18,640 --> 00:01:22,640
it is a very well-known framework for

00:01:20,960 --> 00:01:24,080
nfv and it's very simple and

00:01:22,640 --> 00:01:26,880
straightforward

00:01:24,080 --> 00:01:27,200
however today i want to share with you

00:01:26,880 --> 00:01:30,799
the

00:01:27,200 --> 00:01:31,759
the real nfv in reality channel mobile

00:01:30,799 --> 00:01:34,880
actually

00:01:31,759 --> 00:01:38,000
launched our telco cloud construction

00:01:34,880 --> 00:01:40,159
since 2019 which i

00:01:38,000 --> 00:01:42,000
think is also one of the world's largest

00:01:40,159 --> 00:01:44,560
nfv projects so far

00:01:42,000 --> 00:01:45,680
with tens of thousands of servers in

00:01:44,560 --> 00:01:47,840
total

00:01:45,680 --> 00:01:51,280
we have this cloud located in eight

00:01:47,840 --> 00:01:51,280
regions across the country

00:01:51,520 --> 00:01:55,520
here i i try to give you some of the

00:01:53,920 --> 00:01:57,920
examples of how our

00:01:55,520 --> 00:02:00,079
source 4 actually looked like hope you

00:01:57,920 --> 00:02:02,640
could have some uh

00:02:00,079 --> 00:02:04,960
direct feeling now how the complexity

00:02:02,640 --> 00:02:07,600
would be for our telco cloud

00:02:04,960 --> 00:02:08,399
so you can see for the first resource

00:02:07,600 --> 00:02:12,000
pool

00:02:08,399 --> 00:02:12,879
we have server switches and distributed

00:02:12,000 --> 00:02:16,319
storage from

00:02:12,879 --> 00:02:18,400
all different vendors however we have

00:02:16,319 --> 00:02:19,599
openstack and vnabs from the steam

00:02:18,400 --> 00:02:21,200
vendors

00:02:19,599 --> 00:02:24,879
which means that interoperability

00:02:21,200 --> 00:02:27,200
between vmaps and the openstack will be

00:02:24,879 --> 00:02:28,160
much easier because they could have

00:02:27,200 --> 00:02:32,560
their uh

00:02:28,160 --> 00:02:35,360
interface uh on a private interface

00:02:32,560 --> 00:02:37,120
uh and then but if you go to the third

00:02:35,360 --> 00:02:39,920
resource pool you can see that

00:02:37,120 --> 00:02:41,280
the bnf and the openstack are from

00:02:39,920 --> 00:02:43,280
different vendors

00:02:41,280 --> 00:02:45,040
which means that you should have to deal

00:02:43,280 --> 00:02:46,160
with the interoperability between these

00:02:45,040 --> 00:02:47,760
two

00:02:46,160 --> 00:02:50,400
and when you go to the second resource

00:02:47,760 --> 00:02:52,000
pool you can see uh

00:02:50,400 --> 00:02:54,480
some of the bin apps are from the same

00:02:52,000 --> 00:02:57,040
vendor but the others are from

00:02:54,480 --> 00:02:59,200
different vendors but they use separate

00:02:57,040 --> 00:03:01,040
orchestrator

00:02:59,200 --> 00:03:02,840
but you if you go to the fourth one you

00:03:01,040 --> 00:03:05,200
can see that they share the same

00:03:02,840 --> 00:03:06,959
orchestrator so we have to also deal

00:03:05,200 --> 00:03:08,560
with the interoperability problem

00:03:06,959 --> 00:03:11,840
between the orchestrator

00:03:08,560 --> 00:03:14,959
and the third party vnf manager

00:03:11,840 --> 00:03:17,040
so i guess this could probably help you

00:03:14,959 --> 00:03:20,319
to understand more about

00:03:17,040 --> 00:03:23,200
how our telco cloud could be like

00:03:20,319 --> 00:03:24,640
so on the third page i want to show the

00:03:23,200 --> 00:03:27,360
challenges we have

00:03:24,640 --> 00:03:29,760
first is about the scalability we have

00:03:27,360 --> 00:03:32,239
more than 60 resource pools

00:03:29,760 --> 00:03:34,080
constructed almost at the same time

00:03:32,239 --> 00:03:37,120
which actually require a lot of

00:03:34,080 --> 00:03:38,000
human powers and resources into this and

00:03:37,120 --> 00:03:40,480
each resources

00:03:38,000 --> 00:03:43,040
will actually include physical servers

00:03:40,480 --> 00:03:45,680
of more than one thousand

00:03:43,040 --> 00:03:47,440
and we have actually huge workload for

00:03:45,680 --> 00:03:50,319
configuration deploy

00:03:47,440 --> 00:03:52,000
and testing for all these resource walls

00:03:50,319 --> 00:03:54,480
and the second challenges we see

00:03:52,000 --> 00:03:55,760
is a multi-vendor problem i think you

00:03:54,480 --> 00:03:57,519
have some

00:03:55,760 --> 00:03:59,680
feeling about that in the previous

00:03:57,519 --> 00:04:02,239
slides

00:03:59,680 --> 00:04:03,200
in total we have tens of vendors

00:04:02,239 --> 00:04:06,000
included

00:04:03,200 --> 00:04:06,400
in our taco cloud so you can see that we

00:04:06,000 --> 00:04:08,319
have

00:04:06,400 --> 00:04:09,760
complicated interoperability work we

00:04:08,319 --> 00:04:12,720
need to do and we need to

00:04:09,760 --> 00:04:14,159
check the interoperability uh makes

00:04:12,720 --> 00:04:15,280
making sure that they could work

00:04:14,159 --> 00:04:18,160
together

00:04:15,280 --> 00:04:20,479
and when you're actually going deeper

00:04:18,160 --> 00:04:22,160
into the cross-vendor interfaces

00:04:20,479 --> 00:04:24,720
you will realize that we are still

00:04:22,160 --> 00:04:26,720
lacking of a lot of standards

00:04:24,720 --> 00:04:28,080
and still lacking of a deeper

00:04:26,720 --> 00:04:31,360
understanding of the

00:04:28,080 --> 00:04:33,040
standards when you do the interval

00:04:31,360 --> 00:04:36,479
ability

00:04:33,040 --> 00:04:38,880
so uh issues we see when we're actually

00:04:36,479 --> 00:04:41,600
doing this uh telco cloud delivery

00:04:38,880 --> 00:04:42,080
first is although we have developing a

00:04:41,600 --> 00:04:45,280
lot of

00:04:42,080 --> 00:04:47,360
automation tools uh in the open source

00:04:45,280 --> 00:04:49,840
community and also

00:04:47,360 --> 00:04:52,720
in vendor's own product but when we're

00:04:49,840 --> 00:04:54,800
actually constructing such a large-scale

00:04:52,720 --> 00:04:56,960
cloud we still see that we are lacking

00:04:54,800 --> 00:04:59,040
of automation tools

00:04:56,960 --> 00:05:01,199
most of the vendors are still deploying

00:04:59,040 --> 00:05:03,360
the cloud manually and or just to use

00:05:01,199 --> 00:05:06,560
some simple automation scripts

00:05:03,360 --> 00:05:08,479
efficiency is the biggest problem for us

00:05:06,560 --> 00:05:09,680
i know automated mission tools they are

00:05:08,479 --> 00:05:12,720
developing but

00:05:09,680 --> 00:05:15,120
they are they have never tried these out

00:05:12,720 --> 00:05:17,039
in such huge scale so people are not

00:05:15,120 --> 00:05:19,039
quite so confident with that

00:05:17,039 --> 00:05:21,199
and eventually they decided not to use

00:05:19,039 --> 00:05:22,840
these automation tools

00:05:21,199 --> 00:05:24,880
so the second one is about

00:05:22,840 --> 00:05:26,639
interoperability this kind of issue

00:05:24,880 --> 00:05:28,240
actually happened when different vendors

00:05:26,639 --> 00:05:29,280
product need to integrate and work

00:05:28,240 --> 00:05:33,280
together

00:05:29,280 --> 00:05:36,160
and a lot of inter operation needs to be

00:05:33,280 --> 00:05:38,000
decided and worked out and even the

00:05:36,160 --> 00:05:40,720
software need to be modified on

00:05:38,000 --> 00:05:42,080
site which you know it takes a lot of

00:05:40,720 --> 00:05:44,639
time and

00:05:42,080 --> 00:05:46,320
you cannot count on the on those things

00:05:44,639 --> 00:05:47,600
that actually are worked out just on

00:05:46,320 --> 00:05:49,199
site

00:05:47,600 --> 00:05:51,280
and third is about the manual

00:05:49,199 --> 00:05:54,000
configuration difference

00:05:51,280 --> 00:05:55,600
you know when you finish the deployment

00:05:54,000 --> 00:05:58,479
of the cloud you need to do a lot of

00:05:55,600 --> 00:06:00,240
configuration work however these

00:05:58,479 --> 00:06:02,800
configurations may be different

00:06:00,240 --> 00:06:04,560
in different flows because they are done

00:06:02,800 --> 00:06:06,720
by different engineers

00:06:04,560 --> 00:06:08,160
and some configuration may cause the

00:06:06,720 --> 00:06:10,800
performance decrease

00:06:08,160 --> 00:06:11,919
due to the lack of experience of the

00:06:10,800 --> 00:06:14,160
engineers

00:06:11,919 --> 00:06:16,240
so this is also some problem we face in

00:06:14,160 --> 00:06:18,639
our techno cloud

00:06:16,240 --> 00:06:20,000
so now uh i would like to go to the

00:06:18,639 --> 00:06:23,440
second session uh

00:06:20,000 --> 00:06:26,080
second part of my talk is about our view

00:06:23,440 --> 00:06:29,360
for the future devops loops

00:06:26,080 --> 00:06:31,759
devops devops is a very uh

00:06:29,360 --> 00:06:32,400
i think very hot topic actually in these

00:06:31,759 --> 00:06:34,479
years

00:06:32,400 --> 00:06:35,919
especially especially when we talk about

00:06:34,479 --> 00:06:38,960
cloud native

00:06:35,919 --> 00:06:39,919
when we talk about the ci cd for

00:06:38,960 --> 00:06:42,479
software

00:06:39,919 --> 00:06:45,199
but we also consider that devops is very

00:06:42,479 --> 00:06:48,319
important for our telco cloud

00:06:45,199 --> 00:06:50,639
but probably we need to uh

00:06:48,319 --> 00:06:51,440
make it much clearer how devops actually

00:06:50,639 --> 00:06:53,520
mean

00:06:51,440 --> 00:06:54,720
for telco cloud it probably a little bit

00:06:53,520 --> 00:06:57,280
different from the

00:06:54,720 --> 00:06:59,440
uh whole devops loops for the uh

00:06:57,280 --> 00:07:02,560
software development

00:06:59,440 --> 00:07:04,479
um for cloud-based taco cloud

00:07:02,560 --> 00:07:06,639
we consider it's very important to build

00:07:04,479 --> 00:07:08,960
up this devops loop to make

00:07:06,639 --> 00:07:09,919
make sure that we have a normalized

00:07:08,960 --> 00:07:12,720
planning

00:07:09,919 --> 00:07:14,880
deploy and feedback look happening

00:07:12,720 --> 00:07:16,800
actually in an automatic way

00:07:14,880 --> 00:07:19,039
it is also important to keep in mind

00:07:16,800 --> 00:07:20,319
that the scalability and multi-vendor

00:07:19,039 --> 00:07:22,639
nature of this

00:07:20,319 --> 00:07:23,680
telco cloud so when you design the

00:07:22,639 --> 00:07:25,840
devops loops

00:07:23,680 --> 00:07:27,680
for telco you need to realize these two

00:07:25,840 --> 00:07:30,400
things

00:07:27,680 --> 00:07:32,800
there are actually a lot of devops tools

00:07:30,400 --> 00:07:35,199
we could already utilize in telco

00:07:32,800 --> 00:07:36,479
however there's also need to develop new

00:07:35,199 --> 00:07:39,280
tools and

00:07:36,479 --> 00:07:40,720
even standard interfaces in order to

00:07:39,280 --> 00:07:42,800
solve the challenge

00:07:40,720 --> 00:07:45,120
for the scalability and multi-vendor

00:07:42,800 --> 00:07:47,919
problems that i mentioned

00:07:45,120 --> 00:07:47,919
so um

00:07:48,160 --> 00:07:54,319
on the uh on page 8 i actually share how

00:07:51,360 --> 00:07:55,039
we think the devops looks could look

00:07:54,319 --> 00:07:57,599
like

00:07:55,039 --> 00:07:58,080
for future tech cloud within channel

00:07:57,599 --> 00:08:00,479
mobile

00:07:58,080 --> 00:08:01,840
we we think that it should be down in a

00:08:00,479 --> 00:08:04,080
continuous way

00:08:01,840 --> 00:08:05,919
we call it as continuous integration

00:08:04,080 --> 00:08:07,120
continuous testing and continuous

00:08:05,919 --> 00:08:09,039
delivery

00:08:07,120 --> 00:08:11,840
so in this kind of continuous delivery

00:08:09,039 --> 00:08:13,919
cycle we hope it could help us to delete

00:08:11,840 --> 00:08:17,039
to increase the efficiency

00:08:13,919 --> 00:08:19,599
of the future network cloud delivery

00:08:17,039 --> 00:08:20,800
and also help to quickly feedback to the

00:08:19,599 --> 00:08:23,360
vendor products

00:08:20,800 --> 00:08:24,800
so you could see this devops loops is

00:08:23,360 --> 00:08:27,199
different from

00:08:24,800 --> 00:08:29,840
the software development devops loops

00:08:27,199 --> 00:08:29,840
because uh

00:08:30,080 --> 00:08:36,719
it actually connects with with vendors

00:08:33,680 --> 00:08:38,320
and it actually first go to the lab and

00:08:36,719 --> 00:08:41,440
then go to the

00:08:38,320 --> 00:08:44,720
field to go to the uh delivery site

00:08:41,440 --> 00:08:47,519
so it could be a little bit different

00:08:44,720 --> 00:08:49,279
uh however there are a lot of things we

00:08:47,519 --> 00:08:52,839
could reuse we could use

00:08:49,279 --> 00:08:55,440
utilize from the whole devops

00:08:52,839 --> 00:08:57,839
communities

00:08:55,440 --> 00:09:00,160
on 8 9 i want to share some of the

00:08:57,839 --> 00:09:03,680
details of how we see this

00:09:00,160 --> 00:09:06,000
so first our ci ctcd we

00:09:03,680 --> 00:09:07,360
it actually includes three phase we

00:09:06,000 --> 00:09:10,320
think from ci

00:09:07,360 --> 00:09:12,080
to ct we hope all the interoperability

00:09:10,320 --> 00:09:15,440
issues could be solved

00:09:12,080 --> 00:09:17,040
we provide lab environment and ci ct

00:09:15,440 --> 00:09:20,839
automation pipeline

00:09:17,040 --> 00:09:22,000
to make sure that efficient cross-vendor

00:09:20,839 --> 00:09:24,800
interpretability

00:09:22,000 --> 00:09:25,440
actually could happen before we directly

00:09:24,800 --> 00:09:29,360
go to

00:09:25,440 --> 00:09:30,959
the delivery on site so any new versions

00:09:29,360 --> 00:09:34,240
that actually happened

00:09:30,959 --> 00:09:37,760
in the vendors could test and iterate

00:09:34,240 --> 00:09:39,920
within days in our labs and now we have

00:09:37,760 --> 00:09:41,040
multi-vendors to actually join this

00:09:39,920 --> 00:09:44,240
whole this kind of

00:09:41,040 --> 00:09:46,240
activity to make sure that and anytime

00:09:44,240 --> 00:09:48,320
they have their version updates they

00:09:46,240 --> 00:09:50,880
could promote that to our

00:09:48,320 --> 00:09:52,640
version gateway in our lab and then we

00:09:50,880 --> 00:09:53,920
will automatically build up the

00:09:52,640 --> 00:09:56,080
environment

00:09:53,920 --> 00:09:57,680
deploy the new version and do the

00:09:56,080 --> 00:10:01,519
interoperability test

00:09:57,680 --> 00:10:04,560
with other vendors product so

00:10:01,519 --> 00:10:07,519
with this we hope that we could

00:10:04,560 --> 00:10:08,240
achieve the goal as any vendor match can

00:10:07,519 --> 00:10:11,120
be tested

00:10:08,240 --> 00:10:12,320
in advance any product can iterate

00:10:11,120 --> 00:10:14,959
within days

00:10:12,320 --> 00:10:15,600
and any lab resources can make full use

00:10:14,959 --> 00:10:19,680
of we

00:10:15,600 --> 00:10:23,200
we don't need to actually deploy some

00:10:19,680 --> 00:10:25,760
software and wait in the lab

00:10:23,200 --> 00:10:27,279
to to do the integration work anytime

00:10:25,760 --> 00:10:30,839
you need to do any match

00:10:27,279 --> 00:10:32,160
they will deploy it automatically in

00:10:30,839 --> 00:10:36,079
hours

00:10:32,160 --> 00:10:38,959
and for second phase from ct to cd

00:10:36,079 --> 00:10:39,519
we hope it could be a precise copy from

00:10:38,959 --> 00:10:42,800
lab

00:10:39,519 --> 00:10:44,959
to site versions tested in lab

00:10:42,800 --> 00:10:46,720
eventually will result in

00:10:44,959 --> 00:10:48,800
some develop deployment and

00:10:46,720 --> 00:10:50,240
configuration scripts and codes

00:10:48,800 --> 00:10:52,640
and we hope that these could be

00:10:50,240 --> 00:10:55,040
precisely copied on site

00:10:52,640 --> 00:10:57,200
and delivered automatically so you see

00:10:55,040 --> 00:10:57,760
when we do the continuous testing within

00:10:57,200 --> 00:10:59,600
lab

00:10:57,760 --> 00:11:01,760
we actually have a lot of things that

00:10:59,600 --> 00:11:03,360
and they are all in docker images

00:11:01,760 --> 00:11:04,800
we have the software version that

00:11:03,360 --> 00:11:06,800
actually passed the test

00:11:04,800 --> 00:11:07,920
we have the script for cross vendor and

00:11:06,800 --> 00:11:09,279
availability

00:11:07,920 --> 00:11:11,440
we have script for automation

00:11:09,279 --> 00:11:12,399
configuration tools for automatic

00:11:11,440 --> 00:11:15,760
deployment

00:11:12,399 --> 00:11:16,480
a lot of things we put them in in docker

00:11:15,760 --> 00:11:19,760
images

00:11:16,480 --> 00:11:20,880
and then we transfer to the uh to our

00:11:19,760 --> 00:11:23,760
site

00:11:20,880 --> 00:11:25,839
to do the continuous delivery we mostly

00:11:23,760 --> 00:11:27,440
the things we need to do on site is we

00:11:25,839 --> 00:11:29,760
have to modify the configuration

00:11:27,440 --> 00:11:31,839
parameters according to the scale

00:11:29,760 --> 00:11:33,040
and then the whole resource pool could

00:11:31,839 --> 00:11:35,519
be bring up

00:11:33,040 --> 00:11:37,839
automatically we hope then automatic

00:11:35,519 --> 00:11:40,399
delivery based on image and scripts

00:11:37,839 --> 00:11:42,160
already tested in lab the cross vendor

00:11:40,399 --> 00:11:43,519
interval ability solutions already

00:11:42,160 --> 00:11:46,560
tested in lab

00:11:43,519 --> 00:11:49,760
and the configuration scripts could

00:11:46,560 --> 00:11:50,639
copied across different pools to avoid

00:11:49,760 --> 00:11:53,600
the human

00:11:50,639 --> 00:11:54,880
engineer experience difference for that

00:11:53,600 --> 00:11:57,519
so these are

00:11:54,880 --> 00:11:58,399
mostly the view before we have for the

00:11:57,519 --> 00:12:01,519
future

00:11:58,399 --> 00:12:04,000
devops loops for our telco cloud

00:12:01,519 --> 00:12:05,920
and for the third part i want to share

00:12:04,000 --> 00:12:07,120
some of the things we are doing in china

00:12:05,920 --> 00:12:10,240
mobile

00:12:07,120 --> 00:12:13,440
so first i want to give you some a big

00:12:10,240 --> 00:12:17,360
view of how our network looked like

00:12:13,440 --> 00:12:20,399
we started since 2019 and now we finish

00:12:17,360 --> 00:12:22,880
two phases for the construction

00:12:20,399 --> 00:12:24,959
we have tens of thousands of physical

00:12:22,880 --> 00:12:27,519
servers

00:12:24,959 --> 00:12:28,880
included in the cloud and they are

00:12:27,519 --> 00:12:30,880
distributed in eight

00:12:28,880 --> 00:12:32,720
regions across the country and you know

00:12:30,880 --> 00:12:35,200
it's a it's a big country

00:12:32,720 --> 00:12:36,880
we have about 20 hardware and software

00:12:35,200 --> 00:12:40,240
suppliers included in in the two

00:12:36,880 --> 00:12:40,240
two-phase of construction

00:12:40,399 --> 00:12:44,560
so when we do all these construction

00:12:43,600 --> 00:12:47,839
work

00:12:44,560 --> 00:12:49,040
we we gradually decided that we need to

00:12:47,839 --> 00:12:51,360
set up

00:12:49,040 --> 00:12:53,040
over an overall continuous delivery

00:12:51,360 --> 00:12:56,079
process

00:12:53,040 --> 00:12:58,480
so we have a closed loop network

00:12:56,079 --> 00:13:02,959
delivery process

00:12:58,480 --> 00:13:05,279
we build up and it helps us to

00:13:02,959 --> 00:13:06,000
to do the whole construction work

00:13:05,279 --> 00:13:10,000
independent

00:13:06,000 --> 00:13:14,000
of any vendors or integrators

00:13:10,000 --> 00:13:16,399
this whole loop is built based on ci cd

00:13:14,000 --> 00:13:17,760
and automation tools to improve the

00:13:16,399 --> 00:13:20,959
whole efficiency

00:13:17,760 --> 00:13:23,680
so you can see that we do the planning

00:13:20,959 --> 00:13:24,240
and then we we bring all the things to

00:13:23,680 --> 00:13:27,519
our

00:13:24,240 --> 00:13:30,320
lab to do the pre-test and then we have

00:13:27,519 --> 00:13:32,800
all these things put in the docker image

00:13:30,320 --> 00:13:35,440
and bring that to the on-site deployment

00:13:32,800 --> 00:13:36,959
and then we will do an automatic check

00:13:35,440 --> 00:13:39,440
and a verification

00:13:36,959 --> 00:13:40,240
and then go to the operation phase and

00:13:39,440 --> 00:13:44,000
when we

00:13:40,240 --> 00:13:46,320
find problems issues we need to solve

00:13:44,000 --> 00:13:48,320
in the operation phase we will still get

00:13:46,320 --> 00:13:51,279
back to the planning phase

00:13:48,320 --> 00:13:52,079
so that for the next phase for the next

00:13:51,279 --> 00:13:55,360
construction

00:13:52,079 --> 00:13:58,160
period construction time

00:13:55,360 --> 00:13:58,800
we will adjust all these issues in the

00:13:58,160 --> 00:14:01,519
planning

00:13:58,800 --> 00:14:03,360
and planning phase so you see that this

00:14:01,519 --> 00:14:05,680
loop we're actually building

00:14:03,360 --> 00:14:08,160
around multiple automation tools and

00:14:05,680 --> 00:14:08,560
we're using cisd pipelines to make sure

00:14:08,160 --> 00:14:12,480
that

00:14:08,560 --> 00:14:12,480
this closed loop could run

00:14:13,040 --> 00:14:17,760
on page 14 i first want to give you some

00:14:15,839 --> 00:14:20,959
of the hardware automation

00:14:17,760 --> 00:14:22,160
we are doing it is actually when we are

00:14:20,959 --> 00:14:25,040
doing this uh

00:14:22,160 --> 00:14:26,800
huge scale of cloud construction we

00:14:25,040 --> 00:14:28,639
realize that it's very important to

00:14:26,800 --> 00:14:30,399
improve the efficiency and quality of

00:14:28,639 --> 00:14:32,959
hardware integration

00:14:30,399 --> 00:14:35,760
since any hardware defects will

00:14:32,959 --> 00:14:38,079
eventually influence the software

00:14:35,760 --> 00:14:39,199
deploy on that and will cause actual

00:14:38,079 --> 00:14:42,959
difficulties

00:14:39,199 --> 00:14:44,959
in sourcing all the issues so

00:14:42,959 --> 00:14:47,600
we actually the things we're doing is we

00:14:44,959 --> 00:14:49,760
developed an automation tools

00:14:47,600 --> 00:14:51,279
for the full life cycle of hardware

00:14:49,760 --> 00:14:54,240
delivery

00:14:51,279 --> 00:14:55,199
you can see on this whole process the

00:14:54,240 --> 00:14:57,680
the block

00:14:55,199 --> 00:14:59,120
in red they are all doing by the

00:14:57,680 --> 00:15:02,800
automation tools

00:14:59,120 --> 00:15:04,959
while the the block uh in white

00:15:02,800 --> 00:15:06,079
they are a manual work you can see there

00:15:04,959 --> 00:15:09,920
are actually

00:15:06,079 --> 00:15:11,600
quite a quite few manual work we need to

00:15:09,920 --> 00:15:14,399
do in this whole process

00:15:11,600 --> 00:15:16,320
we will do the resource planning

00:15:14,399 --> 00:15:18,079
automatically and then we will do the

00:15:16,320 --> 00:15:20,880
pre-test of hardware in

00:15:18,079 --> 00:15:22,480
lab automatically when all is done we

00:15:20,880 --> 00:15:26,639
will inject all the data

00:15:22,480 --> 00:15:29,839
into our hardware low-level design

00:15:26,639 --> 00:15:32,399
data data sheet and then

00:15:29,839 --> 00:15:33,440
at the same time all the hardware will

00:15:32,399 --> 00:15:36,959
put on shelf

00:15:33,440 --> 00:15:39,440
and the workers will work on the

00:15:36,959 --> 00:15:40,160
connection of the all those lines and

00:15:39,440 --> 00:15:43,360
then

00:15:40,160 --> 00:15:46,240
we could just turn on all the switches

00:15:43,360 --> 00:15:46,880
and servers and we will do automatic

00:15:46,240 --> 00:15:49,600
device

00:15:46,880 --> 00:15:51,920
configuration and testing and we'll do

00:15:49,600 --> 00:15:55,279
automatic network connection check

00:15:51,920 --> 00:15:56,000
and if we have some and then if there

00:15:55,279 --> 00:15:58,639
are there are some

00:15:56,000 --> 00:15:59,600
issues we we find through this testing

00:15:58,639 --> 00:16:03,040
we will have

00:15:59,600 --> 00:16:05,839
uh analyze the result put out

00:16:03,040 --> 00:16:07,040
and the workers will do the rectify if

00:16:05,839 --> 00:16:09,440
possible

00:16:07,040 --> 00:16:11,040
and then eventually when all the issues

00:16:09,440 --> 00:16:12,160
are solved we'll do the automatic

00:16:11,040 --> 00:16:14,240
delivery

00:16:12,160 --> 00:16:16,639
so you can see that with with this kind

00:16:14,240 --> 00:16:19,440
of automatic delivery process

00:16:16,639 --> 00:16:19,839
we actually reduce our construction time

00:16:19,440 --> 00:16:23,199
by

00:16:19,839 --> 00:16:25,600
one-third it actually only take us

00:16:23,199 --> 00:16:28,160
20 minutes to configure all the devices

00:16:25,600 --> 00:16:30,320
and 80 minutes to finish all the testing

00:16:28,160 --> 00:16:32,480
on the single single pole of more than

00:16:30,320 --> 00:16:34,959
one thousand physical nodes

00:16:32,480 --> 00:16:36,800
so the major challenges all these

00:16:34,959 --> 00:16:37,519
process where we're dealing with is

00:16:36,800 --> 00:16:39,680
actually

00:16:37,519 --> 00:16:40,560
there are all different kinds of

00:16:39,680 --> 00:16:43,600
interfaces

00:16:40,560 --> 00:16:45,680
from all different vendors devices

00:16:43,600 --> 00:16:48,000
uh people who understand about hardware

00:16:45,680 --> 00:16:48,639
probably know the kind of challenges we

00:16:48,000 --> 00:16:52,000
have

00:16:48,639 --> 00:16:56,000
so we have to design an open framework

00:16:52,000 --> 00:16:57,920
to easily adapt all these vendor devices

00:16:56,000 --> 00:17:00,240
this is something that we are working

00:16:57,920 --> 00:17:02,399
and we are also contributing this to the

00:17:00,240 --> 00:17:05,360
elephant community now i will show the

00:17:02,399 --> 00:17:09,439
details in following slices

00:17:05,360 --> 00:17:11,760
so on page 15 there are actually some

00:17:09,439 --> 00:17:12,640
detailed numbers i want to share with

00:17:11,760 --> 00:17:16,079
you

00:17:12,640 --> 00:17:17,439
we have more than 15 000 issues actually

00:17:16,079 --> 00:17:21,520
found and solved

00:17:17,439 --> 00:17:21,520
during our construction and

00:17:22,240 --> 00:17:26,720
these two uh figures actually give you

00:17:25,199 --> 00:17:29,520
some details

00:17:26,720 --> 00:17:31,679
we actually we we are comparing

00:17:29,520 --> 00:17:34,160
different solutions

00:17:31,679 --> 00:17:35,039
for the manual solutions i mean that

00:17:34,160 --> 00:17:37,120
it's like

00:17:35,039 --> 00:17:38,799
how how all these work are doing

00:17:37,120 --> 00:17:42,320
traditionally all the

00:17:38,799 --> 00:17:45,440
work configuration and

00:17:42,320 --> 00:17:48,080
are done manually and then uh

00:17:45,440 --> 00:17:48,559
people will do a spa check which they

00:17:48,080 --> 00:17:51,600
choose

00:17:48,559 --> 00:17:54,720
five only five percent of the hardware

00:17:51,600 --> 00:17:56,080
to do the check uh however even that

00:17:54,720 --> 00:17:59,120
will cost us like

00:17:56,080 --> 00:18:02,000
60 days almost two months to finish

00:17:59,120 --> 00:18:02,960
all the hardware integration for

00:18:02,000 --> 00:18:05,840
solution c

00:18:02,960 --> 00:18:07,360
it is actually something we are doing in

00:18:05,840 --> 00:18:09,520
the early phase of our

00:18:07,360 --> 00:18:10,960
construction we're still using the

00:18:09,520 --> 00:18:14,160
manual configuration

00:18:10,960 --> 00:18:16,640
but we're doing some automatic testing

00:18:14,160 --> 00:18:18,240
and then we will rectify the whole

00:18:16,640 --> 00:18:20,960
things manually

00:18:18,240 --> 00:18:22,960
for solution b we're actually doing the

00:18:20,960 --> 00:18:24,160
manual configuration but we're doing the

00:18:22,960 --> 00:18:27,120
automatic testing

00:18:24,160 --> 00:18:27,760
and automatic rectify and solution is

00:18:27,120 --> 00:18:29,520
the best

00:18:27,760 --> 00:18:31,919
all the things are manual and

00:18:29,520 --> 00:18:34,880
automatically down

00:18:31,919 --> 00:18:36,080
so you can see that the time taken for

00:18:34,880 --> 00:18:38,640
these different

00:18:36,080 --> 00:18:40,320
solutions we do a comparison of all

00:18:38,640 --> 00:18:43,840
these things and you can see

00:18:40,320 --> 00:18:46,960
solution a actually give only five days

00:18:43,840 --> 00:18:48,720
to do all these automatic work

00:18:46,960 --> 00:18:50,960
another thing you need to consider is

00:18:48,720 --> 00:18:52,720
also the configuration fault rate

00:18:50,960 --> 00:18:55,360
when you do all the configuration

00:18:52,720 --> 00:18:56,559
manually the fault rate is about 30

00:18:55,360 --> 00:18:59,280
percent

00:18:56,559 --> 00:19:01,200
uh so when we when we realized this we

00:18:59,280 --> 00:19:04,000
we decided that it's very important that

00:19:01,200 --> 00:19:06,240
we also need to do some automatic manual

00:19:04,000 --> 00:19:08,559
automatic uh configuration and now to

00:19:06,240 --> 00:19:11,520
also do some automatic rectify

00:19:08,559 --> 00:19:13,200
so for solution and so a and b we

00:19:11,520 --> 00:19:14,480
actually do the automatic uh

00:19:13,200 --> 00:19:17,039
configuration

00:19:14,480 --> 00:19:18,720
which make if you check all the code the

00:19:17,039 --> 00:19:21,520
configuration won't be

00:19:18,720 --> 00:19:22,640
causing any thought rate and also when

00:19:21,520 --> 00:19:25,679
we

00:19:22,640 --> 00:19:28,720
do some rectification uh

00:19:25,679 --> 00:19:30,640
we actually um when we

00:19:28,720 --> 00:19:33,039
find there are some issues we will do

00:19:30,640 --> 00:19:36,240
the automatic configuration

00:19:33,039 --> 00:19:37,039
to directly change the default issue so

00:19:36,240 --> 00:19:39,280
you won't see

00:19:37,039 --> 00:19:40,400
that thought issue appear in the

00:19:39,280 --> 00:19:43,280
following result

00:19:40,400 --> 00:19:44,400
uh analysis so this actually helped us

00:19:43,280 --> 00:19:47,600
to to

00:19:44,400 --> 00:19:49,919
hugely reduce the default rate the best

00:19:47,600 --> 00:19:52,559
work we actually do is for solution a

00:19:49,919 --> 00:19:55,760
that we see zero fault rate for the

00:19:52,559 --> 00:19:55,760
hardware configuration

00:19:55,919 --> 00:20:00,640
on page 16 i also want to share with you

00:19:58,799 --> 00:20:01,600
the software automation deliver loop

00:20:00,640 --> 00:20:04,480
we're doing

00:20:01,600 --> 00:20:06,960
we're using jenkins this open source

00:20:04,480 --> 00:20:10,000
software to build up the whole

00:20:06,960 --> 00:20:12,320
ci cd pipeline and then we are providing

00:20:10,000 --> 00:20:15,280
a general port description file

00:20:12,320 --> 00:20:17,120
for both vendor products and cmcc tools

00:20:15,280 --> 00:20:20,159
so you can see that

00:20:17,120 --> 00:20:23,919
all the tools from vendors and

00:20:20,159 --> 00:20:26,640
from cmcc they are put into

00:20:23,919 --> 00:20:27,520
the same jenkins pipeline to work with

00:20:26,640 --> 00:20:30,159
each other

00:20:27,520 --> 00:20:31,120
and all the tools they understand a

00:20:30,159 --> 00:20:34,159
general part

00:20:31,120 --> 00:20:35,039
description file this makes uh tools

00:20:34,159 --> 00:20:37,440
from different

00:20:35,039 --> 00:20:40,159
vendors and suppliers they could work

00:20:37,440 --> 00:20:42,799
together to finish the whole procedure

00:20:40,159 --> 00:20:44,080
so when we have a new version upgrade to

00:20:42,799 --> 00:20:48,320
our gateway

00:20:44,080 --> 00:20:50,400
we will use our automatic tools to help

00:20:48,320 --> 00:20:52,000
do the hardware configuration and

00:20:50,400 --> 00:20:55,679
environment preparing

00:20:52,000 --> 00:20:58,480
and then we will use vendor suppliers

00:20:55,679 --> 00:20:59,360
software to do the veeam building and

00:20:58,480 --> 00:21:02,039
distributed

00:20:59,360 --> 00:21:03,440
storage deployment and also do the

00:21:02,039 --> 00:21:05,360
interoperability

00:21:03,440 --> 00:21:06,559
work between them using automatic

00:21:05,360 --> 00:21:09,840
scripts

00:21:06,559 --> 00:21:11,600
and we then we will use our automation

00:21:09,840 --> 00:21:13,679
tools to do the tests

00:21:11,600 --> 00:21:15,039
and eventually give them some report and

00:21:13,679 --> 00:21:18,480
feedback

00:21:15,039 --> 00:21:20,799
but like you said all these things

00:21:18,480 --> 00:21:21,520
they are done under a general ci cd

00:21:20,799 --> 00:21:25,520
pipeline

00:21:21,520 --> 00:21:28,640
and a general port description files

00:21:25,520 --> 00:21:31,600
page 17 actually shares some of the

00:21:28,640 --> 00:21:32,000
results we got for the cicd pipeline we

00:21:31,600 --> 00:21:33,679
now

00:21:32,000 --> 00:21:36,320
actually are connecting with different

00:21:33,679 --> 00:21:37,520
vendors labs and any version updates

00:21:36,320 --> 00:21:40,559
from vendors

00:21:37,520 --> 00:21:44,000
will invoke an automatic deploy and

00:21:40,559 --> 00:21:46,559
system check loop in china mobile's lab

00:21:44,000 --> 00:21:48,480
so with this one we actually we are able

00:21:46,559 --> 00:21:49,679
to continue to deploy and test the

00:21:48,480 --> 00:21:52,400
vendor openstack

00:21:49,679 --> 00:21:52,799
for more than 10 times a week and each

00:21:52,400 --> 00:21:54,799
round

00:21:52,799 --> 00:21:56,240
actually only cost us less than five

00:21:54,799 --> 00:21:58,240
hours so

00:21:56,240 --> 00:22:00,400
it actually helped us to iterate very

00:21:58,240 --> 00:22:02,960
hard fast and precise

00:22:00,400 --> 00:22:04,720
here i also share some of the numbers we

00:22:02,960 --> 00:22:07,440
have for different vendors

00:22:04,720 --> 00:22:07,919
you can see um some of the vendors they

00:22:07,440 --> 00:22:10,840
could

00:22:07,919 --> 00:22:12,960
even iterate less than two or three

00:22:10,840 --> 00:22:17,679
hours

00:22:12,960 --> 00:22:19,280
so my last page is uh

00:22:17,679 --> 00:22:21,760
i want to share with you some of the

00:22:19,280 --> 00:22:24,799
contributions we're actually doing to

00:22:21,760 --> 00:22:25,280
elephant community so those things we're

00:22:24,799 --> 00:22:28,960
doing

00:22:25,280 --> 00:22:31,520
in for ci cd for the devops loops

00:22:28,960 --> 00:22:32,799
within our channel mobile stock loop we

00:22:31,520 --> 00:22:35,919
also see that

00:22:32,799 --> 00:22:39,280
if we want to build up the sloop we need

00:22:35,919 --> 00:22:42,400
vendors help we need improvements in the

00:22:39,280 --> 00:22:44,320
whole community for the automation

00:22:42,400 --> 00:22:46,000
so we decided that we need to closely

00:22:44,320 --> 00:22:48,480
work with open source

00:22:46,000 --> 00:22:49,440
communities to contribute leads back to

00:22:48,480 --> 00:22:51,039
open source

00:22:49,440 --> 00:22:53,679
and make sure people understand the

00:22:51,039 --> 00:22:55,840
value here and also develop their own

00:22:53,679 --> 00:22:58,960
tools based on this

00:22:55,840 --> 00:23:00,640
so for the hardware delivery work uh

00:22:58,960 --> 00:23:02,480
which i mentioned previously

00:23:00,640 --> 00:23:04,960
we're actually contributing this to the

00:23:02,480 --> 00:23:08,320
opnfvc rv project

00:23:04,960 --> 00:23:12,000
so this hdv tools actually provide

00:23:08,320 --> 00:23:15,120
an open framework for hardware check

00:23:12,000 --> 00:23:16,880
and with a quite easy configuration file

00:23:15,120 --> 00:23:20,799
so that you could adapt different

00:23:16,880 --> 00:23:20,799
vendors devices very easily

00:23:20,840 --> 00:23:24,960
and you could find some useful link in

00:23:23,679 --> 00:23:27,840
my slides

00:23:24,960 --> 00:23:29,200
and also about the poor description file

00:23:27,840 --> 00:23:31,520
this is actually uh

00:23:29,200 --> 00:23:32,400
some saying we already down you know

00:23:31,520 --> 00:23:34,640
pianofee

00:23:32,400 --> 00:23:36,720
for the passing years but now we are

00:23:34,640 --> 00:23:38,880
contributing our general description

00:23:36,720 --> 00:23:41,279
files to pdf 2.0

00:23:38,880 --> 00:23:42,320
which means pdf2.org actually need to

00:23:41,279 --> 00:23:45,360
evolve

00:23:42,320 --> 00:23:47,679
to have more

00:23:45,360 --> 00:23:49,279
illustration for the telco cloud to have

00:23:47,679 --> 00:23:51,679
more details included

00:23:49,279 --> 00:23:53,440
so we're actually helping to contribute

00:23:51,679 --> 00:23:54,400
the general description files we are

00:23:53,440 --> 00:23:58,400
using within

00:23:54,400 --> 00:24:01,120
labs to the pdf 2.0 so i also provide

00:23:58,400 --> 00:24:03,760
some useful link in my slides

00:24:01,120 --> 00:24:05,679
and finally that's all if you are

00:24:03,760 --> 00:24:06,480
interested in contributing our piano

00:24:05,679 --> 00:24:08,559
view work

00:24:06,480 --> 00:24:09,760
please also feel free to contact our

00:24:08,559 --> 00:24:11,679
developers

00:24:09,760 --> 00:24:13,120
thank you and hope you enjoy our time in

00:24:11,679 --> 00:24:19,840
this virtual event

00:24:13,120 --> 00:24:19,840
bye bye

00:24:59,039 --> 00:25:01,120

YouTube URL: https://www.youtube.com/watch?v=i0JZnWaldr4


