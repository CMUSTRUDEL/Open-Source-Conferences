Title: A Microservices Approach to Edge Computing Platform Architecture - Neal Oliver & Sindhura Gaddam
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	A Microservices Approach to Edge Computing Platform Architecture - Neal Oliver & Sindhura Gaddam, Intel
Captions: 
	00:00:02,320 --> 00:00:05,680
hi

00:00:03,040 --> 00:00:08,000
this is neil oliver and this is

00:00:05,680 --> 00:00:10,000
cinderella gadam

00:00:08,000 --> 00:00:11,920
we are architects in the network

00:00:10,000 --> 00:00:14,080
platforms group at intel

00:00:11,920 --> 00:00:15,280
our topic is edge computing platform

00:00:14,080 --> 00:00:17,119
architecture

00:00:15,280 --> 00:00:19,520
intel has worked in this domain for

00:00:17,119 --> 00:00:22,240
several years contributing to standards

00:00:19,520 --> 00:00:24,080
open source code and products and we are

00:00:22,240 --> 00:00:27,680
seeing strong growth in the market and

00:00:24,080 --> 00:00:27,680
among our ecosystem partners

00:00:27,760 --> 00:00:32,160
the topic we are presenting here is the

00:00:29,920 --> 00:00:33,200
architectural style of cloud native

00:00:32,160 --> 00:00:35,840
computing

00:00:33,200 --> 00:00:37,280
as applied to edge computing while we

00:00:35,840 --> 00:00:39,680
started originally by

00:00:37,280 --> 00:00:41,840
implementing an edge computing platform

00:00:39,680 --> 00:00:44,079
we are devoting significant attention to

00:00:41,840 --> 00:00:45,760
the development of microservices which

00:00:44,079 --> 00:00:48,800
are one of the fundamental features of

00:00:45,760 --> 00:00:50,399
cloud native computing

00:00:48,800 --> 00:00:52,399
we will describe our cloud native

00:00:50,399 --> 00:00:53,120
architecture and draw attention to the

00:00:52,399 --> 00:00:55,199
areas

00:00:53,120 --> 00:00:57,120
where the cloud native style is impacted

00:00:55,199 --> 00:00:59,520
by deployment on the edge

00:00:57,120 --> 00:01:01,440
and then talk about a few interesting

00:00:59,520 --> 00:01:05,199
microservices which emerged from our

00:01:01,440 --> 00:01:05,199
investigation into these use cases

00:01:07,680 --> 00:01:12,640
cloud native computing is an approach to

00:01:10,000 --> 00:01:14,720
building systems that run in the cloud

00:01:12,640 --> 00:01:16,479
in the cloud the number of users of a

00:01:14,720 --> 00:01:18,799
system is not only large

00:01:16,479 --> 00:01:20,240
but may increase or decrease over orders

00:01:18,799 --> 00:01:22,320
of magnitude

00:01:20,240 --> 00:01:24,640
and so the system itself must be able to

00:01:22,320 --> 00:01:26,799
scale over orders of magnitude

00:01:24,640 --> 00:01:28,560
because the user base is large the

00:01:26,799 --> 00:01:31,680
system must be always on

00:01:28,560 --> 00:01:33,360
the cloud has no downtime but since no

00:01:31,680 --> 00:01:35,600
computing components hardware or

00:01:33,360 --> 00:01:37,600
software are infinitely reliable

00:01:35,600 --> 00:01:39,200
a system in the cloud must be reliable

00:01:37,600 --> 00:01:40,880
even when built from unreliable

00:01:39,200 --> 00:01:42,960
components

00:01:40,880 --> 00:01:44,720
the cloud native approach has had

00:01:42,960 --> 00:01:46,880
considerable success in creating

00:01:44,720 --> 00:01:48,880
scalable resilient systems

00:01:46,880 --> 00:01:50,720
so cloud applications are everywhere

00:01:48,880 --> 00:01:52,399
providing services to consumers and

00:01:50,720 --> 00:01:54,640
businesses

00:01:52,399 --> 00:01:55,439
edge computing at a high level can be

00:01:54,640 --> 00:01:57,119
thought of as

00:01:55,439 --> 00:01:59,520
cloud computing where the physical

00:01:57,119 --> 00:02:01,680
location of the cloud matters

00:01:59,520 --> 00:02:04,320
an edge computing network can be thought

00:02:01,680 --> 00:02:06,399
of as a cloud with special constraints

00:02:04,320 --> 00:02:08,800
and so cloud native techniques ought to

00:02:06,399 --> 00:02:11,360
be applicable to edge networks

00:02:08,800 --> 00:02:12,720
we will call this an edge native system

00:02:11,360 --> 00:02:13,840
and we'll talk about it for a few

00:02:12,720 --> 00:02:15,360
minutes

00:02:13,840 --> 00:02:17,599
we will then move from theory to

00:02:15,360 --> 00:02:20,480
practice and talk about the open

00:02:17,599 --> 00:02:21,360
network edge services software openness

00:02:20,480 --> 00:02:22,879
project

00:02:21,360 --> 00:02:25,360
and its approach to edge native

00:02:22,879 --> 00:02:27,280
computing covering both the platform

00:02:25,360 --> 00:02:31,280
architecture that enables it

00:02:27,280 --> 00:02:31,280
and the micro services which it employs

00:02:33,599 --> 00:02:38,000
cloud native computing does not have a

00:02:35,840 --> 00:02:40,160
precise rigorous definition

00:02:38,000 --> 00:02:41,280
it is partly a class of computer network

00:02:40,160 --> 00:02:43,840
architecture

00:02:41,280 --> 00:02:45,760
partly a style software engineering and

00:02:43,840 --> 00:02:48,239
partly an organizational style and

00:02:45,760 --> 00:02:50,080
mindset for it

00:02:48,239 --> 00:02:52,560
over the last few years of widespread

00:02:50,080 --> 00:02:54,640
use however there is a consensus on its

00:02:52,560 --> 00:02:56,560
basic tenets

00:02:54,640 --> 00:02:58,400
stateless processing means that

00:02:56,560 --> 00:03:00,239
components of a system should not own

00:02:58,400 --> 00:03:01,440
their state such as user information

00:03:00,239 --> 00:03:03,040
databases

00:03:01,440 --> 00:03:05,680
but should retrieve it from external

00:03:03,040 --> 00:03:07,360
data sources where necessary

00:03:05,680 --> 00:03:08,720
this is needed for resilience and

00:03:07,360 --> 00:03:10,400
scalability

00:03:08,720 --> 00:03:12,480
new components can be started in a

00:03:10,400 --> 00:03:15,360
uniform manner whether to increase

00:03:12,480 --> 00:03:17,920
capacity or to recover from a crash

00:03:15,360 --> 00:03:18,800
statelessness allows applications to

00:03:17,920 --> 00:03:20,480
scale out

00:03:18,800 --> 00:03:22,239
by increasing the number of compute

00:03:20,480 --> 00:03:24,319
components

00:03:22,239 --> 00:03:25,840
microservices follow from the tenant of

00:03:24,319 --> 00:03:28,480
statelessness

00:03:25,840 --> 00:03:30,480
microservice is a much overloaded term

00:03:28,480 --> 00:03:32,319
particularly the micro part

00:03:30,480 --> 00:03:34,400
but it is basically a function that does

00:03:32,319 --> 00:03:37,120
a particular set of tightly related

00:03:34,400 --> 00:03:39,120
actions efficiently and is networked to

00:03:37,120 --> 00:03:41,280
other microservices

00:03:39,120 --> 00:03:43,360
applications and complex systems are

00:03:41,280 --> 00:03:46,000
expected to be built by composition

00:03:43,360 --> 00:03:48,080
connecting microservices together the

00:03:46,000 --> 00:03:51,040
connection method is usually a rest a

00:03:48,080 --> 00:03:52,959
representational state transfer api

00:03:51,040 --> 00:03:55,120
which is also a way that a microservice

00:03:52,959 --> 00:03:57,760
can remain stateless

00:03:55,120 --> 00:03:59,280
strictly speaking open source software

00:03:57,760 --> 00:04:00,799
is not a fundamental tenet of

00:03:59,280 --> 00:04:03,120
cloud-native computing

00:04:00,799 --> 00:04:05,040
but historically cloud-native computing

00:04:03,120 --> 00:04:07,840
came from organizations with a habit of

00:04:05,040 --> 00:04:10,080
contributing software to open source

00:04:07,840 --> 00:04:12,239
these organizations however often take

00:04:10,080 --> 00:04:14,560
themselves take a hybrid approach

00:04:12,239 --> 00:04:15,920
releasing community editions of software

00:04:14,560 --> 00:04:17,919
to open source

00:04:15,920 --> 00:04:19,600
but retaining a highly maintained high

00:04:17,919 --> 00:04:23,120
performance version for their mission

00:04:19,600 --> 00:04:25,520
critical and proprietary requirements

00:04:23,120 --> 00:04:26,320
finally the deployment of cloud native

00:04:25,520 --> 00:04:28,080
software

00:04:26,320 --> 00:04:31,120
is carried out via standard building

00:04:28,080 --> 00:04:32,960
blocks and run by standard processes

00:04:31,120 --> 00:04:34,160
virtual machines and containers are

00:04:32,960 --> 00:04:36,320
widely used

00:04:34,160 --> 00:04:38,240
and orchestration frameworks and tools

00:04:36,320 --> 00:04:39,280
built on them such as helm charts and

00:04:38,240 --> 00:04:41,440
operators

00:04:39,280 --> 00:04:42,320
formalize deployment and make them

00:04:41,440 --> 00:04:45,280
easier to

00:04:42,320 --> 00:04:45,280
debug and maintain

00:04:46,720 --> 00:04:50,960
there are various definitions of edge

00:04:48,960 --> 00:04:52,960
some definitions place the edge in an

00:04:50,960 --> 00:04:55,360
embedded system such as a cabinet or

00:04:52,960 --> 00:04:56,880
enclosure in an outdoor environment

00:04:55,360 --> 00:04:58,960
others consider it to be a server

00:04:56,880 --> 00:05:01,840
cluster located at a telco central

00:04:58,960 --> 00:05:03,520
office or even a regional data center

00:05:01,840 --> 00:05:05,840
the variations are determined by use

00:05:03,520 --> 00:05:07,520
cases but what they all have in common

00:05:05,840 --> 00:05:09,360
is that they are responding to the laws

00:05:07,520 --> 00:05:10,479
of physics and sometimes the laws of

00:05:09,360 --> 00:05:14,240
nations for example

00:05:10,479 --> 00:05:15,759
data sovereignty edge native computing

00:05:14,240 --> 00:05:16,639
makes some important changes in the

00:05:15,759 --> 00:05:19,759
cloud-native

00:05:16,639 --> 00:05:21,680
tenets the most obvious differences come

00:05:19,759 --> 00:05:23,360
from the physical constraints of an edge

00:05:21,680 --> 00:05:25,039
cluster

00:05:23,360 --> 00:05:26,720
it is safe to say they are more

00:05:25,039 --> 00:05:27,360
constrained in size and power and

00:05:26,720 --> 00:05:29,440
therefore

00:05:27,360 --> 00:05:30,720
compute in network capacity than a data

00:05:29,440 --> 00:05:32,400
center

00:05:30,720 --> 00:05:34,800
the number of distinct edge cluster

00:05:32,400 --> 00:05:37,039
locations like separated by wide area

00:05:34,800 --> 00:05:38,560
networks is larger as well

00:05:37,039 --> 00:05:40,240
thus the scale-out approach of

00:05:38,560 --> 00:05:42,639
cloud-native orchestration

00:05:40,240 --> 00:05:44,960
is no longer homogeneous past a certain

00:05:42,639 --> 00:05:46,960
capacity the scale out reaches out to

00:05:44,960 --> 00:05:49,120
other edge clusters

00:05:46,960 --> 00:05:50,800
but time-sensitive applications must be

00:05:49,120 --> 00:05:52,240
located close enough to their data

00:05:50,800 --> 00:05:54,240
sources to work

00:05:52,240 --> 00:05:56,560
so an orchestrator will ultimately have

00:05:54,240 --> 00:05:59,520
to optimize for compute capacity and

00:05:56,560 --> 00:06:01,759
density in an edge cloud

00:05:59,520 --> 00:06:03,680
depending on the workloads optimizing

00:06:01,759 --> 00:06:06,319
for compute density will require the use

00:06:03,680 --> 00:06:08,080
of accelerators such as gpus npus or

00:06:06,319 --> 00:06:10,000
fpgas

00:06:08,080 --> 00:06:12,400
orchestrators must take these additional

00:06:10,000 --> 00:06:14,560
constraints into account

00:06:12,400 --> 00:06:17,199
finally data sources reach the edge

00:06:14,560 --> 00:06:19,360
application via access networks

00:06:17,199 --> 00:06:21,440
for many important use cases these are

00:06:19,360 --> 00:06:23,039
mobile networks which have control and

00:06:21,440 --> 00:06:25,199
data plane separation

00:06:23,039 --> 00:06:26,800
and full sets of protocols and apis

00:06:25,199 --> 00:06:30,479
which must be used to steer

00:06:26,800 --> 00:06:32,479
data plane traffic to edge applications

00:06:30,479 --> 00:06:34,560
the net effect is that an edge native

00:06:32,479 --> 00:06:36,960
system has more moving parts

00:06:34,560 --> 00:06:37,759
more heterogeneity and more constraints

00:06:36,960 --> 00:06:41,039
in operation

00:06:37,759 --> 00:06:41,039
than a cloud native system

00:06:42,000 --> 00:06:47,120
well that was all somewhat theoretical

00:06:45,120 --> 00:06:48,560
we will now move toward an example of an

00:06:47,120 --> 00:06:50,639
edge native system

00:06:48,560 --> 00:06:51,919
specifically the open network edge

00:06:50,639 --> 00:06:55,280
services software or

00:06:51,919 --> 00:06:56,080
openness toolkit openness is a software

00:06:55,280 --> 00:06:58,000
toolkit

00:06:56,080 --> 00:06:59,120
that enables the construction of high

00:06:58,000 --> 00:07:02,240
performance edge

00:06:59,120 --> 00:07:04,240
edge platforms it is designed to provide

00:07:02,240 --> 00:07:05,840
cloud features to edge clusters

00:07:04,240 --> 00:07:08,240
within the edge native constraints

00:07:05,840 --> 00:07:10,479
described in the previous slide

00:07:08,240 --> 00:07:12,400
the features listed in this slide depict

00:07:10,479 --> 00:07:15,280
the range of features supported

00:07:12,400 --> 00:07:16,720
which enables commercial deployments

00:07:15,280 --> 00:07:18,560
implicit in this list

00:07:16,720 --> 00:07:20,800
is that the microservice approach to

00:07:18,560 --> 00:07:23,360
creating features enables real-world

00:07:20,800 --> 00:07:23,360
deployments

00:07:24,160 --> 00:07:29,440
now let's look at the openness platform

00:07:26,800 --> 00:07:31,440
level architecture

00:07:29,440 --> 00:07:34,319
depicted here are a representative edge

00:07:31,440 --> 00:07:36,319
node on which edge applications execute

00:07:34,319 --> 00:07:37,919
and a controller which is used to deploy

00:07:36,319 --> 00:07:39,840
and manage edge nodes

00:07:37,919 --> 00:07:41,120
an edge cluster consists of one or more

00:07:39,840 --> 00:07:43,199
edge nodes

00:07:41,120 --> 00:07:45,039
multiple edge nodes may be associated

00:07:43,199 --> 00:07:47,759
with one controller

00:07:45,039 --> 00:07:49,680
note that i said representative the

00:07:47,759 --> 00:07:52,400
green and blue blocks in the diagram

00:07:49,680 --> 00:07:54,319
are microservices not all openness

00:07:52,400 --> 00:07:56,160
microservices are shown here because

00:07:54,319 --> 00:07:58,160
not all microservices of an openness

00:07:56,160 --> 00:08:00,160
distribution need be in a given

00:07:58,160 --> 00:08:03,039
configuration

00:08:00,160 --> 00:08:04,960
the platform is based on kubernetes thus

00:08:03,039 --> 00:08:05,919
many of the microservices shown here are

00:08:04,960 --> 00:08:07,680
containers

00:08:05,919 --> 00:08:09,919
grouped together in pods so that they

00:08:07,680 --> 00:08:11,919
can be deployed together

00:08:09,919 --> 00:08:14,479
openness supports virtual machines for

00:08:11,919 --> 00:08:16,400
applications but does so via kubvert

00:08:14,479 --> 00:08:18,639
rather than natively

00:08:16,400 --> 00:08:20,800
the color coding and stacking of various

00:08:18,639 --> 00:08:21,599
subsystems suggests a certain layer cake

00:08:20,800 --> 00:08:24,960
design

00:08:21,599 --> 00:08:26,879
but this is more for ease of explanation

00:08:24,960 --> 00:08:29,440
the microservices actually interact with

00:08:26,879 --> 00:08:31,280
each other via a container network

00:08:29,440 --> 00:08:33,200
cloud native design allows for elements

00:08:31,280 --> 00:08:35,599
to be deployed in a coordinated manner

00:08:33,200 --> 00:08:37,919
and we follow that rule too

00:08:35,599 --> 00:08:40,719
the color coding does indicate where the

00:08:37,919 --> 00:08:43,279
building blocks come from blue blocks

00:08:40,719 --> 00:08:44,720
are standard open source ingredients on

00:08:43,279 --> 00:08:45,760
the left side of the figure we see

00:08:44,720 --> 00:08:48,240
centos

00:08:45,760 --> 00:08:50,640
the host operating system and docker for

00:08:48,240 --> 00:08:52,640
low-level container management

00:08:50,640 --> 00:08:55,360
elsewhere you can see the standard

00:08:52,640 --> 00:08:57,760
kubernetes components cube proxy kublet

00:08:55,360 --> 00:08:59,920
kubectl etc that comprise a working

00:08:57,760 --> 00:09:02,480
kubernetes cluster

00:08:59,920 --> 00:09:04,240
this is a stock kubernetes distribution

00:09:02,480 --> 00:09:06,959
although with optimizations that intel

00:09:04,240 --> 00:09:09,680
has upstreamed into open source

00:09:06,959 --> 00:09:11,440
the green blocks are openness components

00:09:09,680 --> 00:09:13,040
most of them are microservices although

00:09:11,440 --> 00:09:15,040
some of them might be more accurately

00:09:13,040 --> 00:09:16,880
called ingredients or enhancements or

00:09:15,040 --> 00:09:19,040
plugins

00:09:16,880 --> 00:09:20,640
the first pod we will look at is the

00:09:19,040 --> 00:09:24,560
container networking interface

00:09:20,640 --> 00:09:27,360
cni pod this platform uses kube ovn

00:09:24,560 --> 00:09:28,399
as a default cni but can support other

00:09:27,360 --> 00:09:31,519
cni's as well

00:09:28,399 --> 00:09:34,240
such as weave or calico because many

00:09:31,519 --> 00:09:36,959
edge applications require multiple ports

00:09:34,240 --> 00:09:39,120
openness uses the multis cni to support

00:09:36,959 --> 00:09:42,080
this functionality

00:09:39,120 --> 00:09:43,600
we will now move to the system pods

00:09:42,080 --> 00:09:46,000
these microservices

00:09:43,600 --> 00:09:49,040
enable time-sensitive applications

00:09:46,000 --> 00:09:51,120
another tenant of edge native computing

00:09:49,040 --> 00:09:52,720
sensitive applications need to have fine

00:09:51,120 --> 00:09:55,440
control over app deployment

00:09:52,720 --> 00:09:56,399
over sequestered cores a selection of

00:09:55,440 --> 00:09:58,560
pneuma nodes

00:09:56,399 --> 00:10:00,080
availability of special instructions or

00:09:58,560 --> 00:10:01,680
other features

00:10:00,080 --> 00:10:03,920
these microservices enable the

00:10:01,680 --> 00:10:05,600
controller microservices to control app

00:10:03,920 --> 00:10:07,680
deployment

00:10:05,600 --> 00:10:08,800
the platform pods exist for a similar

00:10:07,680 --> 00:10:10,800
reason

00:10:08,800 --> 00:10:12,720
in this case rather than fine-grained

00:10:10,800 --> 00:10:14,560
control of the cpus

00:10:12,720 --> 00:10:16,640
these microservices are used to support

00:10:14,560 --> 00:10:18,399
computing and network accelerators

00:10:16,640 --> 00:10:20,399
when an application is deployed in

00:10:18,399 --> 00:10:21,920
addition to selecting a destination with

00:10:20,399 --> 00:10:23,760
enough computing headroom

00:10:21,920 --> 00:10:26,000
it can also select a candidate cluster

00:10:23,760 --> 00:10:28,240
with required special purpose hardware

00:10:26,000 --> 00:10:29,680
and control the hardware as they are

00:10:28,240 --> 00:10:32,079
configured

00:10:29,680 --> 00:10:33,680
these microservices are specialized for

00:10:32,079 --> 00:10:35,040
certain families of hardware and work

00:10:33,680 --> 00:10:37,040
with other microservices in the

00:10:35,040 --> 00:10:38,800
controller

00:10:37,040 --> 00:10:41,040
moving over to the controller the

00:10:38,800 --> 00:10:41,760
openness microservices work with the

00:10:41,040 --> 00:10:44,079
edgenode

00:10:41,760 --> 00:10:46,240
microservices harvesting information

00:10:44,079 --> 00:10:48,959
from edge nodes and making orchestration

00:10:46,240 --> 00:10:50,720
decisions based on that information

00:10:48,959 --> 00:10:52,399
the information received includes

00:10:50,720 --> 00:10:55,200
capabilities and attributes

00:10:52,399 --> 00:10:56,959
as well as telemetry information the

00:10:55,200 --> 00:10:59,040
remaining blocks to mention here have to

00:10:56,959 --> 00:11:01,360
do with the access network

00:10:59,040 --> 00:11:03,680
the openness configuration shown here

00:11:01,360 --> 00:11:07,040
assumes a connection to a mobile network

00:11:03,680 --> 00:11:08,560
either 4g or 5g the blocks along the

00:11:07,040 --> 00:11:10,480
bottom of the diagram

00:11:08,560 --> 00:11:11,600
are radio access network and core

00:11:10,480 --> 00:11:14,079
network

00:11:11,600 --> 00:11:16,079
the mobile network and the edge platform

00:11:14,079 --> 00:11:18,640
must cooperate to steer traffic from the

00:11:16,079 --> 00:11:20,320
network to edge applications

00:11:18,640 --> 00:11:22,000
openness provides reference

00:11:20,320 --> 00:11:23,279
implementations of the core network

00:11:22,000 --> 00:11:25,120
building blocks

00:11:23,279 --> 00:11:26,720
as well as a special controller

00:11:25,120 --> 00:11:30,000
microservice the core

00:11:26,720 --> 00:11:32,720
network configuration agent cnca

00:11:30,000 --> 00:11:33,519
to accomplish this we will explain this

00:11:32,720 --> 00:11:36,240
in more detail

00:11:33,519 --> 00:11:36,240
later in the talk

00:11:38,160 --> 00:11:43,680
before moving on to microservices a few

00:11:40,959 --> 00:11:45,760
more comments about cni networks

00:11:43,680 --> 00:11:46,800
edge applications are often very time

00:11:45,760 --> 00:11:49,440
sensitive

00:11:46,800 --> 00:11:50,079
they have requirements on latency and or

00:11:49,440 --> 00:11:52,320
jitter

00:11:50,079 --> 00:11:55,120
in order to function properly such as

00:11:52,320 --> 00:11:57,360
gaming apps which need to minimize lag

00:11:55,120 --> 00:11:59,839
or public safety applications which need

00:11:57,360 --> 00:12:02,160
to be able to respond to signals rest by

00:11:59,839 --> 00:12:04,560
algorithms in a timely manner

00:12:02,160 --> 00:12:07,200
networking between microservices must be

00:12:04,560 --> 00:12:10,240
able to support these requirements

00:12:07,200 --> 00:12:10,800
the cnf the cncf community accepted a

00:12:10,240 --> 00:12:12,720
project

00:12:10,800 --> 00:12:14,720
the cni project to develop

00:12:12,720 --> 00:12:17,279
specifications for container network

00:12:14,720 --> 00:12:19,600
interfaces for linux containers

00:12:17,279 --> 00:12:20,639
today there is a growing list of cni

00:12:19,600 --> 00:12:24,720
implementations

00:12:20,639 --> 00:12:27,200
such as calico weave or sriov

00:12:24,720 --> 00:12:29,200
opens works with many of this and the

00:12:27,200 --> 00:12:31,279
installation charts provides procedures

00:12:29,200 --> 00:12:33,120
for installing them when configuring on

00:12:31,279 --> 00:12:35,519
openness system

00:12:33,120 --> 00:12:38,160
for time sensitive application support

00:12:35,519 --> 00:12:41,920
openness in particular adopts ovn or

00:12:38,160 --> 00:12:44,240
ovs virtual networking the cube ovn cni

00:12:41,920 --> 00:12:46,480
may be used as well as enhanced cni

00:12:44,240 --> 00:12:50,000
based on the data plane development kit

00:12:46,480 --> 00:12:53,200
dpdk this is ovs dpdk

00:12:50,000 --> 00:12:55,360
the malta cni is configured by default

00:12:53,200 --> 00:12:56,639
as many edge applications require

00:12:55,360 --> 00:12:59,839
multi-port functional

00:12:56,639 --> 00:12:59,839
for their functionality

00:13:00,880 --> 00:13:05,600
a key microservice included in openness

00:13:03,440 --> 00:13:07,680
is topology manager

00:13:05,600 --> 00:13:08,639
this microservice which is now supported

00:13:07,680 --> 00:13:11,360
in kubernetes

00:13:08,639 --> 00:13:14,000
makes the orchestrator pneuma aware for

00:13:11,360 --> 00:13:16,880
optimum deployment of time sensitive

00:13:14,000 --> 00:13:17,680
net edge applications with the

00:13:16,880 --> 00:13:20,079
multi-core

00:13:17,680 --> 00:13:21,440
and multi-socket cot system which

00:13:20,079 --> 00:13:24,240
provide a variety of

00:13:21,440 --> 00:13:24,720
memory and io features an application

00:13:24,240 --> 00:13:27,680
whose

00:13:24,720 --> 00:13:30,000
cpu memory and io are not located on the

00:13:27,680 --> 00:13:32,639
same socket or pneuma node

00:13:30,000 --> 00:13:34,639
will have degraded performance the

00:13:32,639 --> 00:13:37,279
topology manager microservice

00:13:34,639 --> 00:13:38,639
allows resources to be in inventoried

00:13:37,279 --> 00:13:40,240
and tagged

00:13:38,639 --> 00:13:42,079
when the container containing an

00:13:40,240 --> 00:13:44,560
application is deployed

00:13:42,079 --> 00:13:46,240
the same kubernetes mechanisms cpu

00:13:44,560 --> 00:13:48,399
manager and device manager

00:13:46,240 --> 00:13:49,279
that uses the labels to select a

00:13:48,399 --> 00:13:51,760
platform

00:13:49,279 --> 00:13:53,680
can also select for appropriate hardware

00:13:51,760 --> 00:13:56,079
on the same numa node

00:13:53,680 --> 00:13:57,600
an example of this might be a video

00:13:56,079 --> 00:13:59,600
analytics application

00:13:57,600 --> 00:14:00,800
that must run on the same numa node

00:13:59,600 --> 00:14:05,279
where the network card

00:14:00,800 --> 00:14:05,279
supplying its input stream is located

00:14:06,399 --> 00:14:11,839
the next microservice we will discuss is

00:14:08,480 --> 00:14:14,639
the node feature discovery or nfd

00:14:11,839 --> 00:14:16,720
quartz platforms used to use for edge

00:14:14,639 --> 00:14:17,279
deployment come with many hardware

00:14:16,720 --> 00:14:19,199
features

00:14:17,279 --> 00:14:20,720
to provide better performance and meet

00:14:19,199 --> 00:14:23,760
the sla

00:14:20,720 --> 00:14:26,560
the features may be intrinsic to the cpu

00:14:23,760 --> 00:14:26,959
such as special instruction sets or

00:14:26,560 --> 00:14:31,399
maybe

00:14:26,959 --> 00:14:34,480
external such as gpus tpus fpga

00:14:31,399 --> 00:14:36,720
non-non-volatile memory etc

00:14:34,480 --> 00:14:38,720
for these features to be used they must

00:14:36,720 --> 00:14:40,240
be discovered and dragged within the

00:14:38,720 --> 00:14:42,880
controller

00:14:40,240 --> 00:14:44,000
let's take an example a container

00:14:42,880 --> 00:14:47,279
network function or

00:14:44,000 --> 00:14:49,440
cnf such as 5g g node b that implements

00:14:47,279 --> 00:14:51,839
the layer 1 of base station

00:14:49,440 --> 00:14:54,320
this cnf needs to have hardware that

00:14:51,839 --> 00:14:56,880
includes fpga acceleration for

00:14:54,320 --> 00:14:57,760
forward error correction vector

00:14:56,880 --> 00:14:59,519
instructions

00:14:57,760 --> 00:15:02,160
in the cpu to implement the math

00:14:59,519 --> 00:15:04,079
functions and a real-time host operating

00:15:02,160 --> 00:15:05,920
system and so on

00:15:04,079 --> 00:15:08,720
the nft microservice which is

00:15:05,920 --> 00:15:11,760
implemented in kubernetes as an add-on

00:15:08,720 --> 00:15:14,000
provides this feature there is an nft

00:15:11,760 --> 00:15:16,000
worker component that inspects the edge

00:15:14,000 --> 00:15:17,360
platforms for hardware and software

00:15:16,000 --> 00:15:20,079
capabilities

00:15:17,360 --> 00:15:21,519
nfd worker puts this information in an

00:15:20,079 --> 00:15:24,839
etcd database

00:15:21,519 --> 00:15:26,079
where the nft control uses it to perform

00:15:24,839 --> 00:15:28,720
scheduling

00:15:26,079 --> 00:15:30,959
our g note b would therefore be

00:15:28,720 --> 00:15:33,360
automatically scheduled on a node

00:15:30,959 --> 00:15:36,160
that has the hardware capabilities that

00:15:33,360 --> 00:15:36,160
it requires

00:15:37,360 --> 00:15:42,079
the next micro service to discuss is

00:15:39,519 --> 00:15:44,639
telemetry aware scheduler

00:15:42,079 --> 00:15:45,440
it enables the user to make kubernetes

00:15:44,639 --> 00:15:48,320
scheduling

00:15:45,440 --> 00:15:50,000
and scheduling decisions using telemetry

00:15:48,320 --> 00:15:52,399
information

00:15:50,000 --> 00:15:54,079
the telemetry allows the scheduler to

00:15:52,399 --> 00:15:57,600
observe metrics such as

00:15:54,079 --> 00:15:58,720
cpu or network utilization and react to

00:15:57,600 --> 00:16:01,279
performance

00:15:58,720 --> 00:16:03,040
bottlenecks by moving applications to

00:16:01,279 --> 00:16:05,199
different nodes

00:16:03,040 --> 00:16:07,120
like node feature discovery this is an

00:16:05,199 --> 00:16:10,639
add-on to the kubernetes scheduler

00:16:07,120 --> 00:16:12,880
developed by intel and used by openness

00:16:10,639 --> 00:16:14,000
the app developer is able to create a

00:16:12,880 --> 00:16:16,000
set of policies

00:16:14,000 --> 00:16:18,160
defining the rules to which fort

00:16:16,000 --> 00:16:20,240
placement must adhere

00:16:18,160 --> 00:16:22,240
the kubernetes scheduler has the ability

00:16:20,240 --> 00:16:25,519
to trigger an action if the

00:16:22,240 --> 00:16:28,000
policy is violated policies can be

00:16:25,519 --> 00:16:30,160
applied on a workload by workload basis

00:16:28,000 --> 00:16:32,959
allowing the right indicators to be used

00:16:30,160 --> 00:16:36,720
to place the plot board

00:16:32,959 --> 00:16:37,440
the tas may collect metrics from many

00:16:36,720 --> 00:16:39,600
sources

00:16:37,440 --> 00:16:40,720
but in particular supports metrics

00:16:39,600 --> 00:16:44,240
received from the

00:16:40,720 --> 00:16:46,560
intel resource director technology rdt

00:16:44,240 --> 00:16:48,880
and reliability availability and

00:16:46,560 --> 00:16:51,839
serviceability metrics provided by

00:16:48,880 --> 00:16:51,839
xeon cpus

00:16:54,320 --> 00:16:58,560
the final topic we will consider is the

00:16:56,639 --> 00:16:59,759
integration of openness with a mobile

00:16:58,560 --> 00:17:01,759
network

00:16:59,759 --> 00:17:03,680
this talk is not the place to discuss

00:17:01,759 --> 00:17:05,760
all of mobile network architecture

00:17:03,680 --> 00:17:06,720
the standards run to thousands of pages

00:17:05,760 --> 00:17:10,000
and are different for

00:17:06,720 --> 00:17:10,959
lte and 5g networks the important part

00:17:10,000 --> 00:17:12,959
for this talk

00:17:10,959 --> 00:17:15,360
is that the mobile network routes data

00:17:12,959 --> 00:17:17,839
from the user equipment or ue

00:17:15,360 --> 00:17:19,120
think phone or tablet to the end point

00:17:17,839 --> 00:17:20,240
where it is connected to the edge

00:17:19,120 --> 00:17:21,919
platform

00:17:20,240 --> 00:17:23,520
we will restrict ourselves to the 5g

00:17:21,919 --> 00:17:26,160
network and will only cover a few of the

00:17:23,520 --> 00:17:29,600
network functions of 5g

00:17:26,160 --> 00:17:32,000
the white boxes at the are depict the

00:17:29,600 --> 00:17:33,440
primary 5g network functions

00:17:32,000 --> 00:17:35,280
there are numerous other functions that

00:17:33,440 --> 00:17:37,280
we are not going to cover

00:17:35,280 --> 00:17:39,280
this description is not specific to edge

00:17:37,280 --> 00:17:41,120
computing it is the way that any 5g

00:17:39,280 --> 00:17:43,520
network operates

00:17:41,120 --> 00:17:45,679
in this diagram the ue is user equipment

00:17:43,520 --> 00:17:48,080
the phone or tablet or similar equipment

00:17:45,679 --> 00:17:49,679
the gnode b is the base station and

00:17:48,080 --> 00:17:52,720
other functions that deal with the radio

00:17:49,679 --> 00:17:55,520
signal and turn it into an ip stream

00:17:52,720 --> 00:17:57,840
the application function or af provides

00:17:55,520 --> 00:18:00,160
services relating to applications

00:17:57,840 --> 00:18:02,559
for example applications need to steer

00:18:00,160 --> 00:18:04,559
traffic from the ue to the application

00:18:02,559 --> 00:18:06,480
and configure various mobile network

00:18:04,559 --> 00:18:09,520
configurations

00:18:06,480 --> 00:18:11,760
the network exposure function or nef

00:18:09,520 --> 00:18:13,679
provides an interface so that untrusted

00:18:11,760 --> 00:18:14,000
third parties such as for example an

00:18:13,679 --> 00:18:16,640
edge

00:18:14,000 --> 00:18:19,120
native platform can request the mobile

00:18:16,640 --> 00:18:21,919
network to steer traffic

00:18:19,120 --> 00:18:23,120
the nef is already designed as a service

00:18:21,919 --> 00:18:26,080
by the 3gpp

00:18:23,120 --> 00:18:27,360
standards it provides its own api used

00:18:26,080 --> 00:18:29,280
by other services

00:18:27,360 --> 00:18:30,559
and the openness framework will also use

00:18:29,280 --> 00:18:33,039
it

00:18:30,559 --> 00:18:34,960
the upf performs routing and filtering

00:18:33,039 --> 00:18:37,919
functions for data flows

00:18:34,960 --> 00:18:39,440
it receives traffic from the g node b

00:18:37,919 --> 00:18:41,520
and from data networks

00:18:39,440 --> 00:18:43,600
and forwards it based on policies and

00:18:41,520 --> 00:18:45,840
filtering rules that are set up by the

00:18:43,600 --> 00:18:48,960
functions of the control plane

00:18:45,840 --> 00:18:49,440
in general multiple upfs exist in a 5g

00:18:48,960 --> 00:18:51,280
network

00:18:49,440 --> 00:18:52,640
and they may forward user data between

00:18:51,280 --> 00:18:54,880
each other

00:18:52,640 --> 00:18:56,640
data routing from one upf to another

00:18:54,880 --> 00:19:00,000
might happen in order to make sure that

00:18:56,640 --> 00:19:02,720
a data flow reaches a selected edge node

00:19:00,000 --> 00:19:03,600
finally the data network or dn is the

00:19:02,720 --> 00:19:06,400
opposite end

00:19:03,600 --> 00:19:07,039
of data sessions with the ue for us the

00:19:06,400 --> 00:19:11,840
dn

00:19:07,039 --> 00:19:11,840
is the edge platform

00:19:12,000 --> 00:19:15,200
now we move back to the openness

00:19:13,440 --> 00:19:17,200
platform architecture you see in the

00:19:15,200 --> 00:19:19,600
upper left hand corner

00:19:17,200 --> 00:19:22,000
focusing on the mobile network blocks

00:19:19,600 --> 00:19:24,320
the main part of the diagram

00:19:22,000 --> 00:19:25,919
the gray blocks in this diagram come

00:19:24,320 --> 00:19:27,440
from the previous slide

00:19:25,919 --> 00:19:29,520
the green blocks are provided by

00:19:27,440 --> 00:19:31,760
openness as before

00:19:29,520 --> 00:19:33,520
the nef is a reference implementation

00:19:31,760 --> 00:19:35,280
provided by openness

00:19:33,520 --> 00:19:38,080
it interacts with the rest of a 5g

00:19:35,280 --> 00:19:40,720
network following the 3gpp standard

00:19:38,080 --> 00:19:42,720
the af or application function is a

00:19:40,720 --> 00:19:46,480
reference implementation that interacts

00:19:42,720 --> 00:19:48,720
with the nef via the standard 3gpp apis

00:19:46,480 --> 00:19:50,320
and also provides application interfaces

00:19:48,720 --> 00:19:51,120
that allow it to talk to other network

00:19:50,320 --> 00:19:55,280
functions

00:19:51,120 --> 00:19:57,840
in particular to the cnca the cnca

00:19:55,280 --> 00:19:59,200
or core network configuration agent is a

00:19:57,840 --> 00:20:00,240
micro service that is part of the

00:19:59,200 --> 00:20:02,480
controller

00:20:00,240 --> 00:20:04,480
it is a function that knows both where

00:20:02,480 --> 00:20:05,280
the edge platform is in terms of ip

00:20:04,480 --> 00:20:08,720
addresses

00:20:05,280 --> 00:20:11,679
and where the nef is it can therefore

00:20:08,720 --> 00:20:14,000
steer data flows from a particular ue to

00:20:11,679 --> 00:20:16,080
a particular edge application

00:20:14,000 --> 00:20:17,200
it provides an api to allow it to be

00:20:16,080 --> 00:20:20,000
used by a telco

00:20:17,200 --> 00:20:21,520
operation support system and also a user

00:20:20,000 --> 00:20:23,440
interface so it can be controlled by a

00:20:21,520 --> 00:20:26,880
system operator

00:20:23,440 --> 00:20:29,440
in other words the af and nef are

00:20:26,880 --> 00:20:31,200
reference implementation microservices

00:20:29,440 --> 00:20:33,520
that implement 3gpp

00:20:31,200 --> 00:20:35,520
network functions on the one hand and

00:20:33,520 --> 00:20:37,840
provide apis that allow the controller

00:20:35,520 --> 00:20:39,919
microservices to steer data flows on the

00:20:37,840 --> 00:20:41,440
other hand

00:20:39,919 --> 00:20:43,039
there's an equivalent set of network

00:20:41,440 --> 00:20:45,280
functions for lte but

00:20:43,039 --> 00:20:47,600
we won't go into them here and they work

00:20:45,280 --> 00:20:49,360
somewhat similarly

00:20:47,600 --> 00:20:51,840
because of the complexity of mobile

00:20:49,360 --> 00:20:53,919
networks and because telco networks

00:20:51,840 --> 00:20:55,280
configure and operate their networks in

00:20:53,919 --> 00:20:57,120
many different ways

00:20:55,280 --> 00:20:58,559
these microservices are only reference

00:20:57,120 --> 00:21:01,120
implementations

00:20:58,559 --> 00:21:01,760
but they provide a starting point for an

00:21:01,120 --> 00:21:04,159
operator

00:21:01,760 --> 00:21:06,240
wanting to use the openness toolkit to

00:21:04,159 --> 00:21:08,559
add edge computing services to their

00:21:06,240 --> 00:21:08,559
network

00:21:11,120 --> 00:21:15,440
the previous two slides talked about

00:21:13,200 --> 00:21:17,840
enabling a mobile network to steer

00:21:15,440 --> 00:21:20,480
traffic to an edge application

00:21:17,840 --> 00:21:22,240
but edge platforms can also host mobile

00:21:20,480 --> 00:21:24,159
network components

00:21:22,240 --> 00:21:25,760
in the previous slides the access

00:21:24,159 --> 00:21:28,799
network or gnode b

00:21:25,760 --> 00:21:30,159
was just a single box in reality it is a

00:21:28,799 --> 00:21:32,159
very complex function

00:21:30,159 --> 00:21:33,520
requiring very demanding real-time

00:21:32,159 --> 00:21:35,440
processing

00:21:33,520 --> 00:21:37,039
it is often implemented with special

00:21:35,440 --> 00:21:39,600
purpose hardware

00:21:37,039 --> 00:21:41,120
but one configuration of openness edge

00:21:39,600 --> 00:21:44,240
platform consists of

00:21:41,120 --> 00:21:46,400
implementation of genome b the ran

00:21:44,240 --> 00:21:48,400
architecture in the diagram comes from

00:21:46,400 --> 00:21:50,799
the oran reference architecture

00:21:48,400 --> 00:21:52,720
published by the open radio access

00:21:50,799 --> 00:21:54,720
network alliance

00:21:52,720 --> 00:21:56,960
in the configuration shown here the

00:21:54,720 --> 00:21:58,080
application consists of distributed unit

00:21:56,960 --> 00:22:00,480
or du

00:21:58,080 --> 00:22:02,080
functions following the oran reference

00:22:00,480 --> 00:22:04,720
architecture

00:22:02,080 --> 00:22:05,840
the du is deployed as a pod in which

00:22:04,720 --> 00:22:12,000
various physical

00:22:05,840 --> 00:22:14,640
and link level functions execute

00:22:12,000 --> 00:22:15,840
5g code can also be hosted by openness

00:22:14,640 --> 00:22:18,240
edge nodes

00:22:15,840 --> 00:22:19,520
in this case two different edge nodes

00:22:18,240 --> 00:22:22,000
are employed

00:22:19,520 --> 00:22:23,760
one is for the user plane in which upf

00:22:22,000 --> 00:22:25,600
network functions are on

00:22:23,760 --> 00:22:28,720
and the other for the control plane in

00:22:25,600 --> 00:22:31,200
which af and nef functions are run

00:22:28,720 --> 00:22:32,880
the advantage of running 5g ran and core

00:22:31,200 --> 00:22:34,559
functions in an edge platform

00:22:32,880 --> 00:22:36,559
is that the network functions can be

00:22:34,559 --> 00:22:39,679
moved closer to one another

00:22:36,559 --> 00:22:42,640
than if they were in discrete components

00:22:39,679 --> 00:22:44,559
which improves performance it also

00:22:42,640 --> 00:22:46,960
allows functions of a mobile network to

00:22:44,559 --> 00:22:49,039
be converged into a single server

00:22:46,960 --> 00:22:54,080
which can then be deployed with much

00:22:49,039 --> 00:22:55,760
more flexibility

00:22:54,080 --> 00:22:57,120
we have covered a lot of ground in the

00:22:55,760 --> 00:22:59,039
last 30 minutes

00:22:57,120 --> 00:23:01,120
we discussed the concept of cloud-native

00:22:59,039 --> 00:23:02,480
computing and how it applies to edge

00:23:01,120 --> 00:23:04,480
computing

00:23:02,480 --> 00:23:07,200
after this theory we then took a

00:23:04,480 --> 00:23:08,960
specific example the openness toolkit

00:23:07,200 --> 00:23:11,120
which provides both a platform for

00:23:08,960 --> 00:23:12,960
executing edge microservices

00:23:11,120 --> 00:23:15,679
and also a growing catalog of

00:23:12,960 --> 00:23:17,760
microservices

00:23:15,679 --> 00:23:19,200
we discussed the cni network the

00:23:17,760 --> 00:23:21,760
topology manager

00:23:19,200 --> 00:23:23,679
node feature discovery telemetry aware

00:23:21,760 --> 00:23:24,799
scheduling microservices and building

00:23:23,679 --> 00:23:27,679
blocks

00:23:24,799 --> 00:23:29,679
we talked about why they are implemented

00:23:27,679 --> 00:23:31,919
and how they are used

00:23:29,679 --> 00:23:33,919
the this talk only scratched the surface

00:23:31,919 --> 00:23:35,840
of a very large topic

00:23:33,919 --> 00:23:39,520
we invite you to visit the openness

00:23:35,840 --> 00:23:41,279
website www.openness.org

00:23:39,520 --> 00:23:43,840
to browse through our engineering white

00:23:41,279 --> 00:23:44,400
papers and to download and evaluate the

00:23:43,840 --> 00:23:47,279
toolkit

00:23:44,400 --> 00:23:48,960
yourself we hope you have found this

00:23:47,279 --> 00:23:50,559
talk interesting and informative

00:23:48,960 --> 00:23:53,919
thank you for your attention and have a

00:23:50,559 --> 00:23:53,919
nice conference bye

00:23:59,880 --> 00:24:02,880

YouTube URL: https://www.youtube.com/watch?v=VmxNNhRD7kQ


