Title: LF Networking: "Policy-based RAN with O-RAN Non-RealTime-RIC"
Publication date: 2020-09-30
Playlist: Open Networking & Edge Summit 2020
Description: 
	LF Networking: "Policy-based RAN with O-RAN Non-RealTime-RIC"
Captions: 
	00:00:00,719 --> 00:00:04,480
hello and welcome to erickson's virtual

00:00:03,679 --> 00:00:07,040
demo

00:00:04,480 --> 00:00:08,080
a non-real-time ran intelligent

00:00:07,040 --> 00:00:12,160
controller-based

00:00:08,080 --> 00:00:14,719
quality of experience modification

00:00:12,160 --> 00:00:16,880
let me start by sharing our vision for

00:00:14,719 --> 00:00:19,520
the open ran

00:00:16,880 --> 00:00:20,160
we believe in an open and desegregated

00:00:19,520 --> 00:00:22,400
world

00:00:20,160 --> 00:00:24,000
where the networks offer more than open

00:00:22,400 --> 00:00:26,800
interfaces

00:00:24,000 --> 00:00:27,680
the network must be robust and simple to

00:00:26,800 --> 00:00:31,039
deploy

00:00:27,680 --> 00:00:31,599
orchestrate and manage it also needs to

00:00:31,039 --> 00:00:34,160
secure

00:00:31,599 --> 00:00:35,280
evolution and adaptability for future

00:00:34,160 --> 00:00:38,559
use cases

00:00:35,280 --> 00:00:41,280
when anything can be a device only a

00:00:38,559 --> 00:00:43,600
comprehensive orchestration solution

00:00:41,280 --> 00:00:44,480
with a non-real-time rand intelligent

00:00:43,600 --> 00:00:48,160
controller

00:00:44,480 --> 00:00:50,800
across radio transport and core domains

00:00:48,160 --> 00:00:51,520
can secure service quality assurance at

00:00:50,800 --> 00:00:55,680
the device

00:00:51,520 --> 00:00:58,320
level anywhere and at any time

00:00:55,680 --> 00:00:59,280
ericsson is fully committed to creating

00:00:58,320 --> 00:01:02,320
a future-proof

00:00:59,280 --> 00:01:03,199
orchestration architecture our ambitions

00:01:02,320 --> 00:01:05,199
are

00:01:03,199 --> 00:01:07,840
to enable network service quality

00:01:05,199 --> 00:01:08,960
assurance at a greater granularity level

00:01:07,840 --> 00:01:11,600
than that of today

00:01:08,960 --> 00:01:12,320
at the device level to ensure that the

00:01:11,600 --> 00:01:14,880
network

00:01:12,320 --> 00:01:16,320
monitors the service quality and adapts

00:01:14,880 --> 00:01:19,360
the quality of experience

00:01:16,320 --> 00:01:20,960
or qoe target to guarantee desired

00:01:19,360 --> 00:01:24,080
performance

00:01:20,960 --> 00:01:25,280
and to address today's applications and

00:01:24,080 --> 00:01:28,080
public spaces

00:01:25,280 --> 00:01:29,119
that are adaptable for new use cases

00:01:28,080 --> 00:01:33,200
devices

00:01:29,119 --> 00:01:34,720
and private networks let me now describe

00:01:33,200 --> 00:01:35,600
the difference between today's

00:01:34,720 --> 00:01:38,079
management

00:01:35,600 --> 00:01:40,000
versus the future orchestration based on

00:01:38,079 --> 00:01:40,960
the non-real-time rand intelligent

00:01:40,000 --> 00:01:43,040
controller

00:01:40,960 --> 00:01:45,119
which shall henceforth be called

00:01:43,040 --> 00:01:47,840
non-real-time rick

00:01:45,119 --> 00:01:49,439
as shown in the left side using today's

00:01:47,840 --> 00:01:51,360
management paradigm

00:01:49,439 --> 00:01:53,680
the service quality assurance is

00:01:51,360 --> 00:01:56,159
achieved at the slice level

00:01:53,680 --> 00:01:57,680
the qoe can be changed based on a

00:01:56,159 --> 00:01:59,840
request from the consumer

00:01:57,680 --> 00:02:00,719
that starts at the operation and support

00:01:59,840 --> 00:02:04,000
system or

00:02:00,719 --> 00:02:06,320
oss proceeds to the core network

00:02:04,000 --> 00:02:07,360
and then to the radio access network or

00:02:06,320 --> 00:02:10,080
ran

00:02:07,360 --> 00:02:10,879
let me explain this a bit more the

00:02:10,080 --> 00:02:13,680
consumer

00:02:10,879 --> 00:02:15,520
can request a qoe change to the operator

00:02:13,680 --> 00:02:18,560
oss

00:02:15,520 --> 00:02:21,760
the operator oss triggers the ran

00:02:18,560 --> 00:02:23,440
to change the qoe via the core network

00:02:21,760 --> 00:02:25,280
for example by changing the

00:02:23,440 --> 00:02:28,400
corresponding qci

00:02:25,280 --> 00:02:32,640
that's qos class identifier or the 5

00:02:28,400 --> 00:02:35,120
qi that's 5g qos identifier

00:02:32,640 --> 00:02:37,040
while this works fine it does have the

00:02:35,120 --> 00:02:39,280
following limitations

00:02:37,040 --> 00:02:42,239
first the core network cannot perform

00:02:39,280 --> 00:02:44,080
per ue assurance and qoe optimization

00:02:42,239 --> 00:02:47,360
based on rand conditions

00:02:44,080 --> 00:02:49,920
and second the core network is not aware

00:02:47,360 --> 00:02:51,280
if a change in the qoe has given the

00:02:49,920 --> 00:02:54,640
expected effect

00:02:51,280 --> 00:02:56,879
to the service quality now

00:02:54,640 --> 00:02:58,640
let's look at the right side that shows

00:02:56,879 --> 00:03:01,920
the non-real-time rick-based

00:02:58,640 --> 00:03:03,760
future orchestration here the service

00:03:01,920 --> 00:03:05,360
quality assurance is achieved at the

00:03:03,760 --> 00:03:07,840
device level

00:03:05,360 --> 00:03:08,800
the qoe targets are set by the core

00:03:07,840 --> 00:03:12,159
network

00:03:08,800 --> 00:03:14,480
based on these targets qoe optimization

00:03:12,159 --> 00:03:16,560
is done autonomously by applications

00:03:14,480 --> 00:03:19,840
within the non-real-time rick

00:03:16,560 --> 00:03:24,239
also known as r apps that aim to achieve

00:03:19,840 --> 00:03:27,120
service assurance the non-real-time rick

00:03:24,239 --> 00:03:29,200
can initiate qoe changes towards the ran

00:03:27,120 --> 00:03:32,080
for this purpose

00:03:29,200 --> 00:03:32,959
the non-real-time rick applications or r

00:03:32,080 --> 00:03:36,159
apps

00:03:32,959 --> 00:03:36,640
monitor ue service quality and decide

00:03:36,159 --> 00:03:39,360
when

00:03:36,640 --> 00:03:40,080
and how to perform a temporary qoe

00:03:39,360 --> 00:03:43,840
change

00:03:40,080 --> 00:03:46,000
in a fully automated manner in addition

00:03:43,840 --> 00:03:47,280
the non-real-time ric continuously

00:03:46,000 --> 00:03:50,080
monitors the ran

00:03:47,280 --> 00:03:52,159
to ensure that the qoe modification

00:03:50,080 --> 00:03:53,920
results in the desired service quality

00:03:52,159 --> 00:03:55,680
for the ue

00:03:53,920 --> 00:03:58,480
let me list the key benefits of

00:03:55,680 --> 00:04:00,799
non-real-time ric based orchestration

00:03:58,480 --> 00:04:01,840
first it provides a greater level of

00:04:00,799 --> 00:04:04,159
granularity

00:04:01,840 --> 00:04:06,080
where the non-real-time rick acts on the

00:04:04,159 --> 00:04:08,720
need of the devices

00:04:06,080 --> 00:04:10,560
second the non-real-time rick is aware

00:04:08,720 --> 00:04:13,840
of the expected quality

00:04:10,560 --> 00:04:14,720
and results achieved and finally the

00:04:13,840 --> 00:04:17,600
operators

00:04:14,720 --> 00:04:18,959
are now able to use non-rand data and a

00:04:17,600 --> 00:04:21,519
wider rand scope

00:04:18,959 --> 00:04:28,720
for example outside a gnode b to

00:04:21,519 --> 00:04:30,639
influence the qoe of the devices

00:04:28,720 --> 00:04:33,520
here we illustrate the reference

00:04:30,639 --> 00:04:36,160
scenario for our demo

00:04:33,520 --> 00:04:37,120
first it is assumed that the network

00:04:36,160 --> 00:04:39,520
operator

00:04:37,120 --> 00:04:40,400
has deployed a network slice for mobile

00:04:39,520 --> 00:04:42,720
broadband

00:04:40,400 --> 00:04:44,560
and one high priority network slice for

00:04:42,720 --> 00:04:46,800
first responders

00:04:44,560 --> 00:04:48,960
the two slices have different quality of

00:04:46,800 --> 00:04:50,639
experience targets as shown in the graph

00:04:48,960 --> 00:04:53,040
at the bottom

00:04:50,639 --> 00:04:54,800
the first responder slice has a higher

00:04:53,040 --> 00:04:57,759
quality of experience target

00:04:54,800 --> 00:04:58,880
compared to the mobile broadband slice

00:04:57,759 --> 00:05:00,960
this implies

00:04:58,880 --> 00:05:01,919
that the ram will prioritize first

00:05:00,960 --> 00:05:05,840
responders

00:05:01,919 --> 00:05:08,320
over mobile broadband users second

00:05:05,840 --> 00:05:09,199
it is assumed that a large fire is

00:05:08,320 --> 00:05:11,440
ongoing

00:05:09,199 --> 00:05:12,720
and some first responders are on duty in

00:05:11,440 --> 00:05:15,120
the area

00:05:12,720 --> 00:05:16,639
each first responder is streaming a live

00:05:15,120 --> 00:05:18,960
video

00:05:16,639 --> 00:05:20,080
the ran treats the first responders with

00:05:18,960 --> 00:05:22,000
high priority

00:05:20,080 --> 00:05:23,759
so that they observe better quality of

00:05:22,000 --> 00:05:25,919
experience compared to the mobile

00:05:23,759 --> 00:05:28,560
broadband users

00:05:25,919 --> 00:05:30,160
third a special r app in the

00:05:28,560 --> 00:05:32,320
non-real-time rick

00:05:30,160 --> 00:05:34,320
is designed to provide service assurance

00:05:32,320 --> 00:05:37,120
for first responders

00:05:34,320 --> 00:05:38,000
the r app monitors the location of each

00:05:37,120 --> 00:05:39,759
responder

00:05:38,000 --> 00:05:41,280
and the quality of experience of its

00:05:39,759 --> 00:05:44,240
video the r

00:05:41,280 --> 00:05:46,320
app is also aware of the fire location

00:05:44,240 --> 00:05:47,919
through enrichment information collected

00:05:46,320 --> 00:05:49,039
by the service management and

00:05:47,919 --> 00:05:52,720
orchestration

00:05:49,039 --> 00:05:53,440
or smo finally one of the first

00:05:52,720 --> 00:05:56,080
responders

00:05:53,440 --> 00:05:58,400
is closest to the fire location but it

00:05:56,080 --> 00:06:00,639
has worse quality of experience compared

00:05:58,400 --> 00:06:03,759
to the other first responders

00:06:00,639 --> 00:06:05,759
the ran has no information on which

00:06:03,759 --> 00:06:08,000
first responder to prioritize

00:06:05,759 --> 00:06:09,440
because it is not aware of the location

00:06:08,000 --> 00:06:11,280
of the fire

00:06:09,440 --> 00:06:12,960
as long as the quality of experienced

00:06:11,280 --> 00:06:14,880
target is fulfilled

00:06:12,960 --> 00:06:17,440
the ram does not take any corrective

00:06:14,880 --> 00:06:17,440
actions

00:06:17,680 --> 00:06:20,720
here we describe how the non-real-time

00:06:20,240 --> 00:06:23,039
rick

00:06:20,720 --> 00:06:25,199
can be used to improve service assurance

00:06:23,039 --> 00:06:28,080
in the described scenario

00:06:25,199 --> 00:06:30,319
the r app decides to act for improving

00:06:28,080 --> 00:06:31,280
the quality of experience of the first

00:06:30,319 --> 00:06:34,319
responder

00:06:31,280 --> 00:06:36,240
in the best location this is illustrated

00:06:34,319 --> 00:06:39,280
here as step one

00:06:36,240 --> 00:06:41,919
to achieve the qoe improvement the r

00:06:39,280 --> 00:06:43,039
app provides a new policy to the ran

00:06:41,919 --> 00:06:45,840
over the a1

00:06:43,039 --> 00:06:48,000
interface indicating to the ran to

00:06:45,840 --> 00:06:51,599
increase the priority for the selected

00:06:48,000 --> 00:06:54,919
user this is illustrated as step two

00:06:51,599 --> 00:06:56,319
the rand including near real-time rick

00:06:54,919 --> 00:06:59,440
ocucp

00:06:56,319 --> 00:07:02,639
and odu modify the priority

00:06:59,440 --> 00:07:05,120
and update the scheduling policies this

00:07:02,639 --> 00:07:08,319
is illustrated as step three

00:07:05,120 --> 00:07:10,400
as a result the quality of experience of

00:07:08,319 --> 00:07:12,880
the video from the first responder

00:07:10,400 --> 00:07:16,160
closest to the fire is increased

00:07:12,880 --> 00:07:16,639
this is illustrated as step four this

00:07:16,160 --> 00:07:19,759
demo

00:07:16,639 --> 00:07:23,120
focuses on step 2 meaning

00:07:19,759 --> 00:07:27,440
that it aims to show how to create a new

00:07:23,120 --> 00:07:27,440
policy using the a1 interface

00:07:29,680 --> 00:07:33,280
to demonstrate the concept we will

00:07:31,759 --> 00:07:35,280
briefly show some work we have

00:07:33,280 --> 00:07:36,080
contributed to the oran software

00:07:35,280 --> 00:07:39,440
community

00:07:36,080 --> 00:07:40,240
or osc this includes an a1 controller

00:07:39,440 --> 00:07:43,280
function

00:07:40,240 --> 00:07:45,919
and an a1 policy management service

00:07:43,280 --> 00:07:47,520
the a1 controller function terminates

00:07:45,919 --> 00:07:50,240
and mediates the a1

00:07:47,520 --> 00:07:52,000
interface connection from the ram to the

00:07:50,240 --> 00:07:52,960
service management and orchestration

00:07:52,000 --> 00:07:55,440
layer

00:07:52,960 --> 00:07:56,720
the a1 policy management service

00:07:55,440 --> 00:07:59,840
maintains a view of

00:07:56,720 --> 00:08:01,360
all a1 policies across the ran and

00:07:59,840 --> 00:08:04,560
allows us to view

00:08:01,360 --> 00:08:05,120
create and manage these a1 policies in a

00:08:04,560 --> 00:08:08,080
simple

00:08:05,120 --> 00:08:09,919
and intuitive manner a sample graphical

00:08:08,080 --> 00:08:12,240
control plane ui

00:08:09,919 --> 00:08:13,919
allows us to visualize and manipulate

00:08:12,240 --> 00:08:16,560
these policies

00:08:13,919 --> 00:08:17,599
but of course in many cases more

00:08:16,560 --> 00:08:19,520
sophisticated

00:08:17,599 --> 00:08:20,879
automated processes running in a

00:08:19,520 --> 00:08:23,280
non-real-time rick

00:08:20,879 --> 00:08:25,680
would manipulate policies in a much more

00:08:23,280 --> 00:08:27,919
dynamic and intelligent way

00:08:25,680 --> 00:08:29,520
we show a brief demo of how you can

00:08:27,919 --> 00:08:32,880
manually view

00:08:29,520 --> 00:08:35,120
modify and create and delete a1 policies

00:08:32,880 --> 00:08:38,000
in the ran

00:08:35,120 --> 00:08:39,200
we will first open the a1 policy control

00:08:38,000 --> 00:08:42,159
in the osc

00:08:39,200 --> 00:08:43,519
non-rt ric control panel from the smo

00:08:42,159 --> 00:08:46,480
portal

00:08:43,519 --> 00:08:48,560
here we see some sample a1 policy types

00:08:46,480 --> 00:08:50,880
supported in the ran

00:08:48,560 --> 00:08:52,959
the policy types shown depend on the

00:08:50,880 --> 00:08:55,680
capabilities of the underlying rand

00:08:52,959 --> 00:08:57,360
functions as exposed over the a1

00:08:55,680 --> 00:08:59,680
interface

00:08:57,360 --> 00:09:00,560
each policy type can have many policy

00:08:59,680 --> 00:09:02,560
instances

00:09:00,560 --> 00:09:03,600
each with different scopes or targeted

00:09:02,560 --> 00:09:06,320
towards different rand

00:09:03,600 --> 00:09:08,720
functions let us first consider the

00:09:06,320 --> 00:09:11,360
policy type for fine-grained tuning of

00:09:08,720 --> 00:09:13,440
qos priorities to affect qoe for

00:09:11,360 --> 00:09:15,760
appropriate ues

00:09:13,440 --> 00:09:17,440
we can view an existing policy instance

00:09:15,760 --> 00:09:20,720
by clicking on it

00:09:17,440 --> 00:09:23,920
for these qos policies each policy has a

00:09:20,720 --> 00:09:27,839
scope selector to target a specific qos

00:09:23,920 --> 00:09:30,880
id or qci or 5qi

00:09:27,839 --> 00:09:33,760
and a specific identified ue

00:09:30,880 --> 00:09:34,880
we also see a value for the qos priority

00:09:33,760 --> 00:09:38,320
for this qos

00:09:34,880 --> 00:09:41,200
ue pair a json representation of the new

00:09:38,320 --> 00:09:43,680
policy object can be seen at the bottom

00:09:41,200 --> 00:09:44,320
also at the bottom we can view the json

00:09:43,680 --> 00:09:46,880
schema

00:09:44,320 --> 00:09:49,760
used to both define the format for the

00:09:46,880 --> 00:09:51,839
a1 policy instance objects which is also

00:09:49,760 --> 00:09:54,959
used to populate this interface

00:09:51,839 --> 00:09:56,959
and to validate the policy's contents

00:09:54,959 --> 00:09:59,200
at the very top we can also see that

00:09:56,959 --> 00:10:00,320
this policy instance is addressed to the

00:09:59,200 --> 00:10:04,640
ran function

00:10:00,320 --> 00:10:06,480
gnb g12

00:10:04,640 --> 00:10:09,360
we have just shown you how to view the

00:10:06,480 --> 00:10:12,240
a1 policy types and instances in the ran

00:10:09,360 --> 00:10:12,240
as shown here

00:10:12,480 --> 00:10:17,040
at this stage we can manually edit the

00:10:14,560 --> 00:10:18,959
policy instance to decrease the priority

00:10:17,040 --> 00:10:22,160
level for the particular ue

00:10:18,959 --> 00:10:23,600
qos id pairing we submit the policy

00:10:22,160 --> 00:10:26,079
using the submit button

00:10:23,600 --> 00:10:28,160
which updates the policy in the ram node

00:10:26,079 --> 00:10:29,279
over the appropriate a1 interface

00:10:28,160 --> 00:10:31,600
connection

00:10:29,279 --> 00:10:33,440
here we briefly show the audit logs from

00:10:31,600 --> 00:10:35,600
the a1 controller function

00:10:33,440 --> 00:10:38,560
showing the a1 rest operation has been

00:10:35,600 --> 00:10:40,240
performed with the modified a1 policy

00:10:38,560 --> 00:10:43,120
addressed to the appropriate ran

00:10:40,240 --> 00:10:43,760
function we can also create a new policy

00:10:43,120 --> 00:10:46,399
instance

00:10:43,760 --> 00:10:47,120
by clicking on the create instance icon

00:10:46,399 --> 00:10:50,160
we first

00:10:47,120 --> 00:10:53,519
set the scope filter for a specific ueid

00:10:50,160 --> 00:10:56,640
and for qos id4 then set the preferred

00:10:53,519 --> 00:10:57,839
priority level to 22 for that ue qos

00:10:56,640 --> 00:10:59,600
class pair

00:10:57,839 --> 00:11:01,519
we then select which rand function we

00:10:59,600 --> 00:11:02,720
would like to deploy this new policy

00:11:01,519 --> 00:11:05,120
instance to

00:11:02,720 --> 00:11:06,880
once the values are validated according

00:11:05,120 --> 00:11:09,200
to the policy types model

00:11:06,880 --> 00:11:10,640
the policy is ready for deployment using

00:11:09,200 --> 00:11:12,880
the submit button

00:11:10,640 --> 00:11:14,880
note that the new policy instance now

00:11:12,880 --> 00:11:16,880
has a new automatically assigned

00:11:14,880 --> 00:11:19,519
globally unique policy id

00:11:16,880 --> 00:11:21,600
associated with it as can be seen in the

00:11:19,519 --> 00:11:23,760
top title bar

00:11:21,600 --> 00:11:26,160
you have just seen how to modify or

00:11:23,760 --> 00:11:26,720
create the a1 policy instances in the

00:11:26,160 --> 00:11:29,839
ran

00:11:26,720 --> 00:11:29,839
as shown here

00:11:31,279 --> 00:11:36,079
as you might expect policy instances can

00:11:33,839 --> 00:11:37,680
be manually deleted by clicking on the

00:11:36,079 --> 00:11:40,640
delete instance icon

00:11:37,680 --> 00:11:41,200
for specific policy instance in this

00:11:40,640 --> 00:11:43,360
case

00:11:41,200 --> 00:11:44,240
we delete the policy deployed to node

00:11:43,360 --> 00:11:47,760
gnb

00:11:44,240 --> 00:11:49,680
g14 the green pop-up notification

00:11:47,760 --> 00:11:52,399
shows us that the delete operation

00:11:49,680 --> 00:11:54,480
completed and the policy instance is now

00:11:52,399 --> 00:11:57,360
removed from the list of policies

00:11:54,480 --> 00:11:58,240
in the control panel we can again see

00:11:57,360 --> 00:12:00,399
from the logs

00:11:58,240 --> 00:12:02,399
that the delete operation was achieved

00:12:00,399 --> 00:12:03,360
using the appropriate rest delete

00:12:02,399 --> 00:12:05,839
operation

00:12:03,360 --> 00:12:09,279
over the a1 interface addressed to the

00:12:05,839 --> 00:12:09,279
appropriate ran function

00:12:09,600 --> 00:12:14,560
now we've also shown how to delete the

00:12:12,079 --> 00:12:17,360
a1 policy instances in the ran

00:12:14,560 --> 00:12:18,000
as shown here this completes our brief

00:12:17,360 --> 00:12:20,240
demo

00:12:18,000 --> 00:12:21,120
of how to manually manipulate a1

00:12:20,240 --> 00:12:23,200
policies

00:12:21,120 --> 00:12:24,480
using the a1 interface via the

00:12:23,200 --> 00:12:27,920
non-real-time ric

00:12:24,480 --> 00:12:30,880
a1 controller of course to reiterate

00:12:27,920 --> 00:12:33,040
many a1 policy management operations

00:12:30,880 --> 00:12:35,120
will likely be performed automatically

00:12:33,040 --> 00:12:36,240
and continuously by appropriate

00:12:35,120 --> 00:12:38,959
non-real-time ric

00:12:36,240 --> 00:12:40,800
applications or services usually

00:12:38,959 --> 00:12:42,079
informed by changes in network and

00:12:40,800 --> 00:12:44,480
subscriber context

00:12:42,079 --> 00:12:48,639
or requirements as would be the case for

00:12:44,480 --> 00:12:48,639
the scenario we introduced previously

00:12:51,519 --> 00:12:55,680
this presentation has demonstrated how

00:12:54,160 --> 00:12:58,320
non-real-time rick

00:12:55,680 --> 00:12:59,600
can make intent-driven and fine-grained

00:12:58,320 --> 00:13:02,240
updates to the ran

00:12:59,600 --> 00:13:04,079
to optimize for a specific emergency

00:13:02,240 --> 00:13:06,480
services scenario

00:13:04,079 --> 00:13:09,040
non-real-time ric enhances radio

00:13:06,480 --> 00:13:11,760
resources management capabilities

00:13:09,040 --> 00:13:12,240
and addresses a new set of use cases for

00:13:11,760 --> 00:13:16,079
ram

00:13:12,240 --> 00:13:18,399
optimization and automation ericsson

00:13:16,079 --> 00:13:20,880
will continue to improve non-real-time

00:13:18,399 --> 00:13:21,839
ric capabilities and drive the

00:13:20,880 --> 00:13:30,880
innovation

00:13:21,839 --> 00:13:30,880

YouTube URL: https://www.youtube.com/watch?v=L1SF5Q_zMWs


