Title: Lightning Talk -  Cloud Native Test Platform - CNT - Kanagaraj Manickam & Kalyankumar Asangi
Publication date: 2020-10-28
Playlist: Open Networking & Edge Summit 2020
Description: 
	Lightning Talk -  Cloud Native Test Platform - CNT - Kanagaraj Manickam & Kalyankumar Asangi, Huawei Technologies India
Captions: 
	00:00:01,680 --> 00:00:05,759
my name is raj

00:00:03,120 --> 00:00:06,160
and in this session we are going to talk

00:00:05,759 --> 00:00:09,839
about

00:00:06,160 --> 00:00:09,839
the cnf test part found

00:00:10,000 --> 00:00:13,280
in telco industries the network function

00:00:12,880 --> 00:00:16,320
is

00:00:13,280 --> 00:00:17,520
evolving into the software from the

00:00:16,320 --> 00:00:20,320
hardware that is

00:00:17,520 --> 00:00:22,880
into the virtual network function and

00:00:20,320 --> 00:00:26,480
container network function

00:00:22,880 --> 00:00:29,760
so these network functions

00:00:26,480 --> 00:00:33,280
should be completely

00:00:29,760 --> 00:00:34,719
tested and certified before getting used

00:00:33,280 --> 00:00:37,360
in the production

00:00:34,719 --> 00:00:39,920
so there is a need for testing the vnf

00:00:37,360 --> 00:00:41,920
and cnf always

00:00:39,920 --> 00:00:43,520
for testing the vnf we have introduced

00:00:41,920 --> 00:00:44,079
the platform called the vein of test

00:00:43,520 --> 00:00:46,879
platform

00:00:44,079 --> 00:00:47,280
in the owner and using that platform we

00:00:46,879 --> 00:00:51,680
have

00:00:47,280 --> 00:00:51,680
done the uh the complaints testing and

00:00:51,760 --> 00:00:56,960
life cycle testing as well

00:00:54,879 --> 00:00:58,000
so we found this platform is promising

00:00:56,960 --> 00:01:01,440
for carrying out the

00:00:58,000 --> 00:01:04,559
the vnf test along with the uh one app

00:01:01,440 --> 00:01:07,760
as the main orchestrator

00:01:04,559 --> 00:01:11,119
and um we are leveraging the platform

00:01:07,760 --> 00:01:12,000
to enable the the compliance and

00:01:11,119 --> 00:01:15,759
verification

00:01:12,000 --> 00:01:19,280
testing for the cnf

00:01:15,759 --> 00:01:22,479
uh elephant oep is providing the

00:01:19,280 --> 00:01:26,000
badging mechanism in which

00:01:22,479 --> 00:01:29,680
the cnf can be getting tested and

00:01:26,000 --> 00:01:32,240
certified once it is certified um

00:01:29,680 --> 00:01:33,360
it can be taken into the menu platform

00:01:32,240 --> 00:01:37,360
like one app

00:01:33,360 --> 00:01:40,560
and to deploy into the cntt certified

00:01:37,360 --> 00:01:42,799
kubernetes environment

00:01:40,560 --> 00:01:44,479
so here uh the scientific defines a

00:01:42,799 --> 00:01:46,640
required uh the

00:01:44,479 --> 00:01:48,720
specification of the requirement in

00:01:46,640 --> 00:01:51,600
order to pause the the cn of

00:01:48,720 --> 00:01:53,200
uh the certification so the tools like

00:01:51,600 --> 00:01:56,079
the cnf test platform

00:01:53,200 --> 00:01:57,920
x testing will involve on performing

00:01:56,079 --> 00:02:00,240
this uh the scene of testing

00:01:57,920 --> 00:02:01,759
and make sure that it whether it meets

00:02:00,240 --> 00:02:04,799
the the cnn

00:02:01,759 --> 00:02:05,680
cnt uh define the requirements so once

00:02:04,799 --> 00:02:08,640
it meet

00:02:05,680 --> 00:02:09,200
uh it will be uh given with the badging

00:02:08,640 --> 00:02:12,479
through the

00:02:09,200 --> 00:02:12,479
uh op portal

00:02:12,879 --> 00:02:16,239
so the cnf test platform is kind of a

00:02:15,280 --> 00:02:18,879
micro service

00:02:16,239 --> 00:02:19,840
in which uh the main components are the

00:02:18,879 --> 00:02:22,319
test controller

00:02:19,840 --> 00:02:24,400
and the testosterone orchestrator so

00:02:22,319 --> 00:02:27,520
test controller provides the all

00:02:24,400 --> 00:02:27,920
uh the domain aspect of the management

00:02:27,520 --> 00:02:30,160
like

00:02:27,920 --> 00:02:31,200
the test case management execution

00:02:30,160 --> 00:02:34,239
management

00:02:31,200 --> 00:02:36,000
the result management etc and the azir

00:02:34,239 --> 00:02:38,239
orchestrator helps to

00:02:36,000 --> 00:02:39,920
perform the execution of the given test

00:02:38,239 --> 00:02:42,400
cases by making use of

00:02:39,920 --> 00:02:43,440
the required uh the testing tool in

00:02:42,400 --> 00:02:47,200
place

00:02:43,440 --> 00:02:49,840
for example in the cn of compliance um

00:02:47,200 --> 00:02:51,360
it can be it might be written in let's

00:02:49,840 --> 00:02:54,959
say go language and

00:02:51,360 --> 00:02:57,200
so it helps to or run those uh already

00:02:54,959 --> 00:02:58,480
built um the scene of complaint test

00:02:57,200 --> 00:03:00,640
tools uh

00:02:58,480 --> 00:03:03,040
through the test azure orchestrator

00:03:00,640 --> 00:03:05,680
let's see we are having

00:03:03,040 --> 00:03:08,239
one sample at the cnf and we wanted to

00:03:05,680 --> 00:03:10,319
get deployed and tested through the help

00:03:08,239 --> 00:03:11,440
and the cnf verification and the

00:03:10,319 --> 00:03:15,280
validation uh

00:03:11,440 --> 00:03:17,440
the test cases can be used for that

00:03:15,280 --> 00:03:19,760
so like that um the the testosterone

00:03:17,440 --> 00:03:20,720
orchestra basically facilitate to run

00:03:19,760 --> 00:03:23,280
the given

00:03:20,720 --> 00:03:24,879
the test cases on the given environment

00:03:23,280 --> 00:03:25,760
so the given runtime environment could

00:03:24,879 --> 00:03:27,920
be

00:03:25,760 --> 00:03:29,840
it can be a docker or it can be java

00:03:27,920 --> 00:03:33,280
python um

00:03:29,840 --> 00:03:35,519
even it can be like a direct http calls

00:03:33,280 --> 00:03:38,159
etc

00:03:35,519 --> 00:03:40,799
so under this platform also has the the

00:03:38,159 --> 00:03:43,599
repository where it stores all the

00:03:40,799 --> 00:03:44,319
the test case uh artifacts and test case

00:03:43,599 --> 00:03:47,680
yamls

00:03:44,319 --> 00:03:50,000
and the test case results etc

00:03:47,680 --> 00:03:51,599
this also provides the integrity and the

00:03:50,000 --> 00:03:54,640
third party integration

00:03:51,599 --> 00:03:56,959
by which we can enable the integration

00:03:54,640 --> 00:03:59,360
with other existing third party tools

00:03:56,959 --> 00:04:00,400
but to perform the various testings

00:03:59,360 --> 00:04:03,040
involved

00:04:00,400 --> 00:04:04,799
so once the let's say the testing is

00:04:03,040 --> 00:04:06,239
done the result is generated it

00:04:04,799 --> 00:04:09,439
facilitates to

00:04:06,239 --> 00:04:11,920
translate those results into the

00:04:09,439 --> 00:04:13,439
the format required by the the olf and

00:04:11,920 --> 00:04:15,920
oep in order to

00:04:13,439 --> 00:04:16,799
to check whether it is pausing the uh

00:04:15,920 --> 00:04:20,079
the scene of

00:04:16,799 --> 00:04:22,880
some i mean oep defined format

00:04:20,079 --> 00:04:24,080
or not so for vnf we already done that

00:04:22,880 --> 00:04:27,600
and the cnn

00:04:24,080 --> 00:04:30,560
we need to enable it further on that

00:04:27,600 --> 00:04:31,759
so from the uh user side it hell it

00:04:30,560 --> 00:04:34,880
provides the cli

00:04:31,759 --> 00:04:37,360
and the um web portal

00:04:34,880 --> 00:04:39,759
uh also by using the cls it can be

00:04:37,360 --> 00:04:41,919
integrated into the cacd environment

00:04:39,759 --> 00:04:43,840
by using the sap we can integrate in

00:04:41,919 --> 00:04:44,970
devices basis environment on the need

00:04:43,840 --> 00:04:47,680
basis

00:04:44,970 --> 00:04:51,040
[Music]

00:04:47,680 --> 00:04:54,080
so this is the complete the

00:04:51,040 --> 00:04:57,199
solution where in which as a

00:04:54,080 --> 00:04:59,919
user you can just deploy this the cnf

00:04:57,199 --> 00:05:01,520
into the i mean upload the cnf into the

00:04:59,919 --> 00:05:04,639
the cntp portal

00:05:01,520 --> 00:05:06,479
and you can once uploaded we can

00:05:04,639 --> 00:05:08,560
trigger the required test cases like say

00:05:06,479 --> 00:05:12,080
enough um the compliance

00:05:08,560 --> 00:05:13,919
so once um it is um tested and

00:05:12,080 --> 00:05:15,360
let's say it is successful then we can

00:05:13,919 --> 00:05:19,199
upload those results

00:05:15,360 --> 00:05:20,880
in the ovp format into the ovp portal

00:05:19,199 --> 00:05:22,800
so we are already working on enabling

00:05:20,880 --> 00:05:25,600
this uploading the sl directly into the

00:05:22,800 --> 00:05:27,759
op portal and in german release of the

00:05:25,600 --> 00:05:29,440
opponent it will be available so

00:05:27,759 --> 00:05:30,320
assuming that once it's tested and

00:05:29,440 --> 00:05:32,880
uploaded

00:05:30,320 --> 00:05:35,440
uh the results into the op portal and

00:05:32,880 --> 00:05:37,039
from in ovp the cbc committee will come

00:05:35,440 --> 00:05:38,479
and review those results and make sure

00:05:37,039 --> 00:05:40,080
that if things are working

00:05:38,479 --> 00:05:43,039
then they will give the badge for the

00:05:40,080 --> 00:05:44,720
given cnf so once dnf is certified

00:05:43,039 --> 00:05:47,360
then that can be brought into the

00:05:44,720 --> 00:05:50,800
marketplace from the marketplace we can

00:05:47,360 --> 00:05:52,479
uh deploy into the actual kubernetes

00:05:50,800 --> 00:05:55,680
environment through the sdc

00:05:52,479 --> 00:05:58,000
in the open the one so mona basically

00:05:55,680 --> 00:06:00,400
helps to bring those certified one the

00:05:58,000 --> 00:06:01,280
cnf and then deploy into the kubernetes

00:06:00,400 --> 00:06:04,319
environment

00:06:01,280 --> 00:06:05,600
and once it is deployed we can um we can

00:06:04,319 --> 00:06:08,080
use again the cntp

00:06:05,600 --> 00:06:10,000
for performing various testing on the

00:06:08,080 --> 00:06:14,160
deployed c enough to check whether it

00:06:10,000 --> 00:06:17,440
meets the given requirement like sl

00:06:14,160 --> 00:06:20,319
so once it is uh tested even

00:06:17,440 --> 00:06:21,680
we can confirm that the deployed the the

00:06:20,319 --> 00:06:25,199
cnf service is

00:06:21,680 --> 00:06:25,199
working fine as expected

00:06:25,759 --> 00:06:29,919
so uh so that is so the second aspect of

00:06:28,240 --> 00:06:31,600
the the platform so one

00:06:29,919 --> 00:06:33,360
aspect is the badging environment

00:06:31,600 --> 00:06:34,479
another another aspect is the design

00:06:33,360 --> 00:06:37,120
time environment

00:06:34,479 --> 00:06:40,240
the third is like just mention it is the

00:06:37,120 --> 00:06:40,240
runtime environment

00:06:42,639 --> 00:06:48,479
so that's all about the the cntp so the

00:06:45,680 --> 00:06:48,800
um cntp basically helps for performing

00:06:48,479 --> 00:06:51,599
the

00:06:48,800 --> 00:06:52,240
the cnf testing required on various

00:06:51,599 --> 00:06:54,560
spaces

00:06:52,240 --> 00:06:55,919
like uh the certification phase uh

00:06:54,560 --> 00:06:58,160
design the network

00:06:55,919 --> 00:06:59,199
service design phase or the network

00:06:58,160 --> 00:07:02,560
service uh

00:06:59,199 --> 00:07:04,080
deployment phase so it basically enables

00:07:02,560 --> 00:07:07,280
the

00:07:04,080 --> 00:07:08,000
the cooperation for place where the

00:07:07,280 --> 00:07:10,319
vendors

00:07:08,000 --> 00:07:11,120
on the operators as well as sustained

00:07:10,319 --> 00:07:12,720
communities

00:07:11,120 --> 00:07:14,880
and the community members can

00:07:12,720 --> 00:07:17,039
collaborate and make sure that

00:07:14,880 --> 00:07:19,120
we come up with the required the test

00:07:17,039 --> 00:07:21,360
cases with

00:07:19,120 --> 00:07:22,560
properly defined the requirements in

00:07:21,360 --> 00:07:27,120
place so

00:07:22,560 --> 00:07:28,000
it helps to increase the adoption of the

00:07:27,120 --> 00:07:31,120
cnf

00:07:28,000 --> 00:07:33,599
as we can quickly uh

00:07:31,120 --> 00:07:34,880
test the given say enough and then get

00:07:33,599 --> 00:07:41,759
certified from the

00:07:34,880 --> 00:07:41,759

YouTube URL: https://www.youtube.com/watch?v=bBew9xdu7rs


