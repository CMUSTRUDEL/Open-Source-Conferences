Title: Getting started using UAVCAN v1 with PX4 on the NXP UAVCAN Board â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-21
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	Title: Getting started using UAVCAN v1 with PX4 on the NXP UAVCAN Board

Summary: Introduction to the NXP RDDRONE-UCANS32K146 reference board running PX4 & UAVCAN v1.We'll talk about the S32K MCU and its features, CAN bus and CAN FD, NuttX, PX4 and of course UAVCAN v1.

We don't make drones, we make reference designs using our silicon. Learn how this benefits you with opensource reference designs and proven starting points for modular safe and secure solutions. Gain insight into accessories and modules Drone and Rover development that NXP is working on including: battery management, CAN-FD interfaces, security and 2-wire ethernet.
Captions: 
	00:00:00,000 --> 00:00:03,689
community work back at the big four

00:00:02,100 --> 00:00:06,270
developers summit thanks for sticking

00:00:03,689 --> 00:00:09,059
with us next up we got our next speaker

00:00:06,270 --> 00:00:10,469
he's already lined up and ready for you

00:00:09,059 --> 00:00:11,940
peter von der Burke is going to be

00:00:10,469 --> 00:00:15,059
speaking about getting started when you

00:00:11,940 --> 00:00:18,029
ad can be one with px for an annex pGAD

00:00:15,059 --> 00:00:23,070
can board it's going to introduce us to

00:00:18,029 --> 00:00:25,380
the NX BRT the drone you will can s 32k

00:00:23,070 --> 00:00:28,769
146 reference for 20 px for any

00:00:25,380 --> 00:00:32,340
conversion one will talk about s 30k MCU

00:00:28,769 --> 00:00:34,230
and its references CANbus kenneth e not

00:00:32,340 --> 00:00:37,559
xpx floor and of course really can be

00:00:34,230 --> 00:00:39,780
one next beam doesn't make drones they

00:00:37,559 --> 00:00:44,090
make reference designs with using their

00:00:39,780 --> 00:00:49,469
selector so let's hear it from an XP

00:00:44,090 --> 00:00:51,539
community that's welcome Peter for the

00:00:49,469 --> 00:00:54,629
introduction welcome to the getting

00:00:51,539 --> 00:00:59,300
started guides with using UV khandvi one

00:00:54,629 --> 00:01:03,059
with the px4 NX p UV keyboard so first a

00:00:59,300 --> 00:01:05,970
small introduction to NX p we make

00:01:03,059 --> 00:01:08,450
silicon for automotive industries in

00:01:05,970 --> 00:01:12,330
this year mobile smart home and

00:01:08,450 --> 00:01:15,240
infrastructure so this presentation is

00:01:12,330 --> 00:01:17,070
about our automotive line and inside

00:01:15,240 --> 00:01:20,610
this automotive line we have the mobile

00:01:17,070 --> 00:01:23,520
robotics line for small rovers and for

00:01:20,610 --> 00:01:27,270
small drones and in that team we make

00:01:23,520 --> 00:01:30,509
reference designs for drone solutions so

00:01:27,270 --> 00:01:34,829
let's start with the you can ester DK

00:01:30,509 --> 00:01:40,560
146 so the estrogen K 146 is an arm

00:01:34,829 --> 00:01:43,430
cortex-m for MCU having two Ken

00:01:40,560 --> 00:01:48,030
connectors supporting Ken and Ken FD and

00:01:43,430 --> 00:01:51,420
we incorporated the big stock connector

00:01:48,030 --> 00:01:54,810
standards into into our board so people

00:01:51,420 --> 00:01:59,310
can connect it to the FM you using the

00:01:54,810 --> 00:02:00,840
standard GST gh connectors and on the

00:01:59,310 --> 00:02:03,920
other side of our board we have

00:02:00,840 --> 00:02:07,560
different referrals so we have UART SPI

00:02:03,920 --> 00:02:11,370
let's and we even have a secure element

00:02:07,560 --> 00:02:11,879
which supports a NFC interface for key

00:02:11,370 --> 00:02:13,890
exchange

00:02:11,879 --> 00:02:15,930
so the typical use cases of

00:02:13,890 --> 00:02:20,640
this reference design board is that we

00:02:15,930 --> 00:02:24,350
can convert GPS data into canvas or make

00:02:20,640 --> 00:02:28,680
a server server or motor controller

00:02:24,350 --> 00:02:30,990
using this platform or having other SPI

00:02:28,680 --> 00:02:35,490
or I squared C free files we can convert

00:02:30,990 --> 00:02:39,060
and this is based on our automotive SDK

00:02:35,490 --> 00:02:42,209
platform so this is the block diagram of

00:02:39,060 --> 00:02:46,800
our boards so we have our MCU we have

00:02:42,209 --> 00:02:50,880
two can files which can be used for a

00:02:46,800 --> 00:02:54,150
redundant connection then we have a you

00:02:50,880 --> 00:02:58,580
work board people can use to set up

00:02:54,150 --> 00:03:03,900
yours free throws or SPI or I squared C

00:02:58,580 --> 00:03:07,380
RS a0 50 is our secure elements on that

00:03:03,900 --> 00:03:11,790
we can connect a energy coal and use NFC

00:03:07,380 --> 00:03:14,220
products with that and our board can be

00:03:11,790 --> 00:03:16,350
powered using the king connector or we

00:03:14,220 --> 00:03:18,290
can connect it directly through a

00:03:16,350 --> 00:03:21,360
five-fold

00:03:18,290 --> 00:03:24,239
so this is just another picture so we

00:03:21,360 --> 00:03:27,590
have all the panels available so it's

00:03:24,239 --> 00:03:33,000
very versatile he to start prototyping

00:03:27,590 --> 00:03:36,060
to make a UAV can solution so the

00:03:33,000 --> 00:03:39,200
software support for the you can STK

00:03:36,060 --> 00:03:42,320
board is we support ethics are tools and

00:03:39,200 --> 00:03:44,579
on top of that we can run px for

00:03:42,320 --> 00:03:48,299
autopilot firmware so that's the main

00:03:44,579 --> 00:03:52,470
talk we can have here today we also

00:03:48,299 --> 00:03:54,510
support the UAV can directly through a

00:03:52,470 --> 00:03:56,880
bare-metal if people are interested in

00:03:54,510 --> 00:04:00,480
that and with the board we have our

00:03:56,880 --> 00:04:02,880
acidic a design studio and with that

00:04:00,480 --> 00:04:05,400
also we have an SDK if people want to

00:04:02,880 --> 00:04:08,220
play around with drivers or there is a

00:04:05,400 --> 00:04:11,459
possibility for free artists solution as

00:04:08,220 --> 00:04:14,670
last we also have a SL can interface for

00:04:11,459 --> 00:04:18,560
PC debugging so we can also hook up our

00:04:14,670 --> 00:04:24,390
reference design board to ABC so we can

00:04:18,560 --> 00:04:27,720
debug the can data so this is the the

00:04:24,390 --> 00:04:30,810
kit we we sell so we have a reference

00:04:27,720 --> 00:04:33,050
it with two sc2k boards so you can

00:04:30,810 --> 00:04:37,200
communicate with each other we have a

00:04:33,050 --> 00:04:39,240
terminator board and we have a DC dlg

00:04:37,200 --> 00:04:41,970
debug adapter which can be used to

00:04:39,240 --> 00:04:45,750
program and we and also as a serial

00:04:41,970 --> 00:04:51,750
console for the nutshell debugging or

00:04:45,750 --> 00:04:54,930
jailing debugging for a gdb debugging so

00:04:51,750 --> 00:04:57,090
first let's start because we have a kid

00:04:54,930 --> 00:05:00,750
we have two boards so the second board

00:04:57,090 --> 00:05:03,570
we can use as a SLK node and this allows

00:05:00,750 --> 00:05:07,080
us to observe and debug the canvas in

00:05:03,570 --> 00:05:09,840
Linux and we can use the typical can you

00:05:07,080 --> 00:05:12,540
to scan them utilities to see the raw

00:05:09,840 --> 00:05:16,170
data but this also opens up the

00:05:12,540 --> 00:05:18,990
possibility to use PI you Fe can which

00:05:16,170 --> 00:05:21,480
is the if he can implementation in

00:05:18,990 --> 00:05:24,390
Python so you can already test some

00:05:21,480 --> 00:05:26,460
interactions through that and in the

00:05:24,390 --> 00:05:30,050
future you can also use the you can you

00:05:26,460 --> 00:05:32,580
he can v1 tooling fortunately it's still

00:05:30,050 --> 00:05:34,650
working progress so please check out

00:05:32,580 --> 00:05:38,010
there get up for the latest status of

00:05:34,650 --> 00:05:41,010
that and using SL can is pretty simple

00:05:38,010 --> 00:05:43,410
so on your Linux machine you install you

00:05:41,010 --> 00:05:46,260
can you toast package you said a bit

00:05:43,410 --> 00:05:49,380
demon and you have a SL can interface

00:05:46,260 --> 00:05:51,210
and you can easily just dim the data so

00:05:49,380 --> 00:05:57,930
you can see what's happening on the

00:05:51,210 --> 00:06:03,419
canvas but now let's start with EU if

00:05:57,930 --> 00:06:06,630
you can one basics so we want to plot

00:06:03,419 --> 00:06:09,650
out it into an OSI model so the bottom

00:06:06,630 --> 00:06:13,080
layer we have our physical canvas which

00:06:09,650 --> 00:06:16,620
takes has just ten frames we have a

00:06:13,080 --> 00:06:19,050
Kennedy MAF can data you he can takes

00:06:16,620 --> 00:06:21,750
care of the network and transport so

00:06:19,050 --> 00:06:24,030
takes care how everything is done it

00:06:21,750 --> 00:06:25,770
takes care of the transport of multiple

00:06:24,030 --> 00:06:28,650
packages and on how to combine them

00:06:25,770 --> 00:06:32,700
together and it has a presentation layer

00:06:28,650 --> 00:06:36,210
through their D STL layer I don't want

00:06:32,700 --> 00:06:38,970
to go super into deep to this and this

00:06:36,210 --> 00:06:41,040
afternoon Pavel is also having a

00:06:38,970 --> 00:06:43,220
presentation about

00:06:41,040 --> 00:06:50,460
the workers who here vegans so I would

00:06:43,220 --> 00:06:53,670
allows you remind to check that out so

00:06:50,460 --> 00:06:56,760
to implement you if you can v1 on the

00:06:53,670 --> 00:07:00,560
our reference design board we use the

00:06:56,760 --> 00:07:03,570
reference UV can v1 transport

00:07:00,560 --> 00:07:07,230
implementation in C created by the UAV

00:07:03,570 --> 00:07:11,100
can development team so this is

00:07:07,230 --> 00:07:15,600
implemented on top of canvas and takes

00:07:11,100 --> 00:07:17,460
care of the UAV can V one protocol so we

00:07:15,600 --> 00:07:20,430
have support for both classical can and

00:07:17,460 --> 00:07:24,780
can FD we have written the transport and

00:07:20,430 --> 00:07:26,820
it's extremely resource constrained when

00:07:24,780 --> 00:07:29,970
it comes recording it's very small it's

00:07:26,820 --> 00:07:34,470
not a very complex protocol so you can

00:07:29,970 --> 00:07:37,620
also check it out here and on top of

00:07:34,470 --> 00:07:40,230
that because you're vegan is just a

00:07:37,620 --> 00:07:43,710
transport layer we've been working

00:07:40,230 --> 00:07:46,290
together with pixhawk on the Diaz 15

00:07:43,710 --> 00:07:48,870
standard which is the open standard for

00:07:46,290 --> 00:07:51,900
drones were working on to think about

00:07:48,870 --> 00:07:55,860
the messaging on top of it where UAV can

00:07:51,900 --> 00:07:57,360
be one is just a transport later oh not

00:07:55,860 --> 00:08:00,690
all the mechanisms are precisely

00:07:57,360 --> 00:08:03,230
describes so our addressing is done our

00:08:00,690 --> 00:08:05,760
communication is done how setup is done

00:08:03,230 --> 00:08:07,560
security we also want to handle and we

00:08:05,760 --> 00:08:10,590
want to have a general system for health

00:08:07,560 --> 00:08:13,260
and introspection so defined way to do

00:08:10,590 --> 00:08:15,540
that and also on how to deal with boot

00:08:13,260 --> 00:08:18,870
loading so the goal is here to create a

00:08:15,540 --> 00:08:24,600
plug-and-play experience for you if we

00:08:18,870 --> 00:08:30,200
can v1 so working on specific specific

00:08:24,600 --> 00:08:30,200
avionics profiles for you of ye again v1

00:08:31,640 --> 00:08:38,430
so how does the px4 setup works with

00:08:36,599 --> 00:08:41,910
this reference designs so on the Left we

00:08:38,430 --> 00:08:45,300
have our pixhawk FM you running px for

00:08:41,910 --> 00:08:48,210
autopilot we have our meu our middleware

00:08:45,300 --> 00:08:49,860
to do inter process communication we

00:08:48,210 --> 00:08:52,290
have two full sack rating so this is

00:08:49,860 --> 00:08:54,960
integrated being integrated into the

00:08:52,290 --> 00:08:56,760
pigs are getting you but we do with

00:08:54,960 --> 00:09:01,110
reference platform that is that we also

00:08:56,760 --> 00:09:03,810
will be x4 leveraging all the existing

00:09:01,110 --> 00:09:06,300
software - so what we do is we run the

00:09:03,810 --> 00:09:09,030
same year week and v1 stack the same

00:09:06,300 --> 00:09:12,270
Diaz 15 message stack we converted to

00:09:09,030 --> 00:09:14,520
Muir and then the user can just make a

00:09:12,270 --> 00:09:18,660
very simple custom application just

00:09:14,520 --> 00:09:23,040
utilizing the Europe protocol

00:09:18,660 --> 00:09:27,690
middleware as document and on the px4

00:09:23,040 --> 00:09:30,840
def page and this takes care of of all

00:09:27,690 --> 00:09:34,200
the European stuff that's running

00:09:30,840 --> 00:09:37,860
beneath so your we're going to show an

00:09:34,200 --> 00:09:39,960
example on how to do that so we just

00:09:37,860 --> 00:09:43,110
start with our debug interface so this

00:09:39,960 --> 00:09:45,960
is our DC DLC interface we can plug it

00:09:43,110 --> 00:09:49,310
into our debug boards and to our machine

00:09:45,960 --> 00:09:58,290
we have a USB serial console and IG link

00:09:49,310 --> 00:10:01,830
jtech debugger so first we have to clone

00:09:58,290 --> 00:10:04,140
to flash this board we have to clone ps4

00:10:01,830 --> 00:10:06,240
firmware and then we have to set up our

00:10:04,140 --> 00:10:10,100
tool chain this is just easily done by

00:10:06,240 --> 00:10:13,110
setting up executing the setup script or

00:10:10,100 --> 00:10:14,910
otherwise the guidebook goes further if

00:10:13,110 --> 00:10:18,290
you stuck in there sometimes this can be

00:10:14,910 --> 00:10:20,880
a bit hard then we check out our

00:10:18,290 --> 00:10:24,090
work-in-progress branch for our here we

00:10:20,880 --> 00:10:28,980
can stick software and can we can just

00:10:24,090 --> 00:10:30,840
easily build this project when is has

00:10:28,980 --> 00:10:34,860
been successfully compiled we can just

00:10:30,840 --> 00:10:39,900
easily flash it to the UAV cambot using

00:10:34,860 --> 00:10:44,160
these commands when it's flesh we can

00:10:39,900 --> 00:10:47,100
just easily connect to our UAV cab board

00:10:44,160 --> 00:10:49,740
when we connect to it we get our get or

00:10:47,100 --> 00:10:52,560
not eggshell and in this example we're

00:10:49,740 --> 00:10:56,880
just gonna utilize existing software so

00:10:52,560 --> 00:10:59,750
what we do here is we use the GPS daemon

00:10:56,880 --> 00:11:02,340
which is already available in px4 and

00:10:59,750 --> 00:11:05,940
for now we render the fake mode so we

00:11:02,340 --> 00:11:09,980
create fake data and we can start UAV

00:11:05,940 --> 00:11:13,770
can v1 converter software

00:11:09,980 --> 00:11:16,410
some some remarks so right now we run it

00:11:13,770 --> 00:11:20,490
in fake boat but you're free to connect

00:11:16,410 --> 00:11:23,790
a real GPS to the Europeans and this

00:11:20,490 --> 00:11:26,970
demon takes care of the location and

00:11:23,790 --> 00:11:29,910
peace for parses this data and we

00:11:26,970 --> 00:11:33,090
convert that and for the sake of this

00:11:29,910 --> 00:11:36,030
demo the D is 15 is still working

00:11:33,090 --> 00:11:39,560
progress and in the future we gonna

00:11:36,030 --> 00:11:43,290
support of course the GPS match messages

00:11:39,560 --> 00:11:48,210
but for now we're using a non defined

00:11:43,290 --> 00:11:51,690
set for that so this is the demo for the

00:11:48,210 --> 00:11:54,210
GPS so on the Left we have a cue ground

00:11:51,690 --> 00:11:57,660
control session running on an MMU and on

00:11:54,210 --> 00:11:59,930
the right we have you can reference a

00:11:57,660 --> 00:11:59,930
signboard

00:12:08,630 --> 00:12:15,210
okay video is not working but I'm just

00:12:12,990 --> 00:12:17,370
going to talk you through this

00:12:15,210 --> 00:12:20,940
so what pretty much is happening if we

00:12:17,370 --> 00:12:24,600
start UAV cancel for FMU and if we

00:12:20,940 --> 00:12:27,510
started on our UAV can reference design

00:12:24,600 --> 00:12:30,540
word has shown in the previous slide

00:12:27,510 --> 00:12:33,000
UAV can takes care of it so right now we

00:12:30,540 --> 00:12:35,760
don't see that there is a lock and if

00:12:33,000 --> 00:12:38,570
this fear was working then it was a

00:12:35,760 --> 00:12:42,390
showcase that we get fellow GPS data to

00:12:38,570 --> 00:12:44,700
RFM you through you a vegan so that's

00:12:42,390 --> 00:12:49,280
the power that is easy to set up and we

00:12:44,700 --> 00:12:49,280
have all the tools for the px4 ecosystem

00:12:49,970 --> 00:12:55,710
and Wow

00:12:52,110 --> 00:12:59,670
okay I did something wrong so this is

00:12:55,710 --> 00:13:04,440
the video so on the left side we setting

00:12:59,670 --> 00:13:09,360
up UAV can on the right side we start a

00:13:04,440 --> 00:13:13,710
GPS demon and we start the canned out

00:13:09,360 --> 00:13:16,380
and now we converting it to Europe and

00:13:13,710 --> 00:13:18,900
here receiving the data we see here on

00:13:16,380 --> 00:13:22,020
the left is showcasing that we now have

00:13:18,900 --> 00:13:25,050
a GPS fix and this is an example how a

00:13:22,020 --> 00:13:28,290
GPS fix for instance can be communicated

00:13:25,050 --> 00:13:31,050
over UAV can but thanks to the Diaz 15

00:13:28,290 --> 00:13:36,900
said we can extend it to different

00:13:31,050 --> 00:13:41,910
multiple different applications so there

00:13:36,900 --> 00:13:45,390
was to talk about a UAV can on px4 but

00:13:41,910 --> 00:13:48,780
we also have implemented you if you can

00:13:45,390 --> 00:13:51,480
directly on a other product we've been

00:13:48,780 --> 00:13:56,340
working on so this is a reference design

00:13:51,480 --> 00:14:00,300
for a battery management system and we

00:13:56,340 --> 00:14:03,630
initially prototype the UAV can on our

00:14:00,300 --> 00:14:08,040
you can assert it cave 146 I mean could

00:14:03,630 --> 00:14:11,730
easily Portus to the metrics running on

00:14:08,040 --> 00:14:15,510
this this battery management system and

00:14:11,730 --> 00:14:18,680
we have implemented the base set of the

00:14:15,510 --> 00:14:20,400
s 15 with the BMS message profile and

00:14:18,680 --> 00:14:24,360
what you see on the

00:14:20,400 --> 00:14:28,440
is a simple example of that so what we

00:14:24,360 --> 00:14:30,570
see here in comparison to px4 is that we

00:14:28,440 --> 00:14:32,120
already had an application and it's very

00:14:30,570 --> 00:14:35,340
easy to integrate

00:14:32,120 --> 00:14:40,710
Lipkin art and the is 50 on top of that

00:14:35,340 --> 00:14:45,150
and so we implement the BMS magic

00:14:40,710 --> 00:14:47,670
profiler so an example on how we have

00:14:45,150 --> 00:14:51,330
implemented is available in this github

00:14:47,670 --> 00:14:54,500
page but we're working on to be able to

00:14:51,330 --> 00:14:58,230
release the source code of this BMS

00:14:54,500 --> 00:14:59,940
completely so people can use this

00:14:58,230 --> 00:15:06,680
reference platform and learn on how to

00:14:59,940 --> 00:15:09,830
implement a UAV get so some conclusions

00:15:06,680 --> 00:15:12,570
x4 with you if we can it's a very easy

00:15:09,830 --> 00:15:15,870
solution to get started with your

00:15:12,570 --> 00:15:18,410
weekend and we can reuse a lot of things

00:15:15,870 --> 00:15:23,630
from the px4 ecosystems for interested

00:15:18,410 --> 00:15:27,060
GPS parser or for instance gyro drivers

00:15:23,630 --> 00:15:30,780
because it's already in there people can

00:15:27,060 --> 00:15:33,410
also look if they want to go to resource

00:15:30,780 --> 00:15:36,420
constraint or make a very competitive

00:15:33,410 --> 00:15:39,500
solution to not X or even fee artists

00:15:36,420 --> 00:15:43,350
and bare metal they are very low print

00:15:39,500 --> 00:15:45,270
alternatives so especially the footprint

00:15:43,350 --> 00:15:46,920
becomes small but then it's a trade-off

00:15:45,270 --> 00:15:49,200
when it comes to driver support

00:15:46,920 --> 00:15:52,620
especially in bare metal a user have to

00:15:49,200 --> 00:15:55,890
work everything out by itself whereas if

00:15:52,620 --> 00:15:58,020
someone decides to use beings for there

00:15:55,890 --> 00:16:01,200
is a huge ecosystem and huge community

00:15:58,020 --> 00:16:04,230
behind it to make it easier but that's

00:16:01,200 --> 00:16:06,750
the scalability what a user could choose

00:16:04,230 --> 00:16:09,360
for so for instance the estrogen a

00:16:06,750 --> 00:16:12,420
platform itself the it's it's very

00:16:09,360 --> 00:16:15,600
scalable so we have a cortex a m0 which

00:16:12,420 --> 00:16:17,700
is only 128 kilobytes which can be a

00:16:15,600 --> 00:16:19,560
very small cheap package where you can

00:16:17,700 --> 00:16:25,200
enable you if you can own a small

00:16:19,560 --> 00:16:30,090
product but we also have a very complex

00:16:25,200 --> 00:16:34,050
of fast MCU with m4f core where you can

00:16:30,090 --> 00:16:39,390
include a lot of smartphone

00:16:34,050 --> 00:16:42,720
into your product something I also want

00:16:39,390 --> 00:16:45,180
to point out so in our mobile robotics

00:16:42,720 --> 00:16:48,600
teams we were working on multiple

00:16:45,180 --> 00:16:51,690
solutions we've been working on our NX b

00:16:48,600 --> 00:16:55,440
FM u reference platform and we're also

00:16:51,690 --> 00:16:59,370
working on a Neff cube companion system

00:16:55,440 --> 00:17:00,870
software and this also know my colleague

00:16:59,370 --> 00:17:04,140
Ian Galloway is going to give a

00:17:00,870 --> 00:17:06,390
presentation about that and we want to

00:17:04,140 --> 00:17:11,120
showcase with different ecosystems yes

00:17:06,390 --> 00:17:14,730
and for the people indicating that a

00:17:11,120 --> 00:17:16,740
1080 P x4 developer segment so meant

00:17:14,730 --> 00:17:20,280
there is a chance to win a free drone

00:17:16,740 --> 00:17:22,550
kit and nephew open computer so check

00:17:20,280 --> 00:17:22,550

YouTube URL: https://www.youtube.com/watch?v=MwdHwjaXYKs


