Title: The Simulator-In-Hardware (SIH), a low cost and hard real time HITL | PX4 Developer Summit 2020
Publication date: 2020-07-06
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	The PX4 Developer Summit is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd

Title: The Simulator-In-Hardware (SIH), a low cost and hard real time HITL

Summary: This session presents the SIH module https://dev.px4.io/master/en/simulation/simulation-in-hardware.html, the motivations, comparison with standard HITL, how to use it, understanding the code, and bringing modifications.

https://sched.co/cnuM
Captions: 
	00:00:09,440 --> 00:00:15,210
hi everyone my name is Romain Kappa

00:00:12,840 --> 00:00:17,550
Nelly and I'm presenting the simulator

00:00:15,210 --> 00:00:19,920
on hardware the low cost and hard

00:00:17,550 --> 00:00:23,939
real-time hard when loop simulator and

00:00:19,920 --> 00:00:29,820
I'll be demonstrating that on the a UAV

00:00:23,939 --> 00:00:33,210
X 2.1 or the pilot board so this is the

00:00:29,820 --> 00:00:36,440
outline for today i will start to talk

00:00:33,210 --> 00:00:39,739
about the standard h ITL simulation and

00:00:36,440 --> 00:00:42,469
the motivation for something else

00:00:39,739 --> 00:00:46,410
I'll then introduce the SH

00:00:42,469 --> 00:00:49,399
implementation and its performance I'll

00:00:46,410 --> 00:00:51,660
then explain how to use the SH

00:00:49,399 --> 00:00:56,960
understanding the code and bringing

00:00:51,660 --> 00:01:00,989
modifications and finally the conclusion

00:00:56,960 --> 00:01:04,199
this is the standard flow diagram for an

00:01:00,989 --> 00:01:07,500
H IDL simulation so you can see that the

00:01:04,199 --> 00:01:11,400
hardware is running the navigation

00:01:07,500 --> 00:01:14,010
control and estimation algorithms and is

00:01:11,400 --> 00:01:17,460
sending actuator signals to the desktop

00:01:14,010 --> 00:01:20,630
the desktop is processing those actuator

00:01:17,460 --> 00:01:24,920
signals through dynamics engine such as

00:01:20,630 --> 00:01:30,210
Jamison gazebo explain and sends back

00:01:24,920 --> 00:01:33,240
sensor signals to the hardware sending

00:01:30,210 --> 00:01:36,180
actuator signals to the desktop computer

00:01:33,240 --> 00:01:39,780
and waiting the receiver sensor signals

00:01:36,180 --> 00:01:42,000
might be an issue as most common desktop

00:01:39,780 --> 00:01:45,960
computer are not designed to run in real

00:01:42,000 --> 00:01:48,360
time so you might end up with inaccurate

00:01:45,960 --> 00:01:52,350
sampling time such as the figure on the

00:01:48,360 --> 00:01:54,090
right most of the time the controller is

00:01:52,350 --> 00:01:58,740
able to deal with this inaccurate

00:01:54,090 --> 00:02:00,780
sampling time but in some cases and for

00:01:58,740 --> 00:02:03,270
me it was during my thesis when I was

00:02:00,780 --> 00:02:06,149
running an H ideal setup for retail

00:02:03,270 --> 00:02:09,270
theater in Simulink the controller was

00:02:06,149 --> 00:02:11,910
not able to stabilize the system

00:02:09,270 --> 00:02:14,520
so what can we do about that the HIPAA

00:02:11,910 --> 00:02:18,690
needs a real-time operating system to

00:02:14,520 --> 00:02:21,060
run in real time or rtos and most of the

00:02:18,690 --> 00:02:25,680
desktop computer are not real-time

00:02:21,060 --> 00:02:28,830
capable but px4 is running on not X

00:02:25,680 --> 00:02:33,180
which is an RTOS so why not using that

00:02:28,830 --> 00:02:35,670
as a simulator or dynamics engine ok

00:02:33,180 --> 00:02:40,920
let's go let's do it let's go to

00:02:35,670 --> 00:02:43,440
dynamics of a quadrotor into px4 so this

00:02:40,920 --> 00:02:46,710
brings us to the implementation of the

00:02:43,440 --> 00:02:49,850
sih so what do we need we need the

00:02:46,710 --> 00:02:52,560
equations of motion of a rigid body with

00:02:49,850 --> 00:02:55,740
update for the inertial position

00:02:52,560 --> 00:02:58,980
inertial velocity the attitude which is

00:02:55,740 --> 00:03:04,140
described by the quaternion q and the

00:02:58,980 --> 00:03:06,840
body rates omega p we also live in model

00:03:04,140 --> 00:03:09,840
for the quadrotor mainly how the

00:03:06,840 --> 00:03:14,430
quadrotor is generating forces and

00:03:09,840 --> 00:03:19,010
moments we also need to reconstruct the

00:03:14,430 --> 00:03:23,310
sensor signals such as gps or IMU and

00:03:19,010 --> 00:03:25,140
corrupt them with Gaussian noise don't

00:03:23,310 --> 00:03:28,440
worry you can find all of these

00:03:25,140 --> 00:03:30,960
equations in the sih documentation in

00:03:28,440 --> 00:03:34,580
the dev guide there is a PDF report

00:03:30,960 --> 00:03:37,590
detailing the models used by the sih

00:03:34,580 --> 00:03:40,440
well this implementation seems to work

00:03:37,590 --> 00:03:43,460
as the pull request was accepted already

00:03:40,440 --> 00:03:47,460
so let's talk about the performances the

00:03:43,460 --> 00:03:50,100
sih was challenged against jameson h ITL

00:03:47,460 --> 00:03:53,340
and the real flight you can see that

00:03:50,100 --> 00:03:55,830
both the SI h and the h ITL give a good

00:03:53,340 --> 00:04:00,390
match with the real flight when flying a

00:03:55,830 --> 00:04:02,640
rectangular mission however the sampling

00:04:00,390 --> 00:04:05,040
time of the SI h is way more accurate

00:04:02,640 --> 00:04:07,950
and closer to the sampling time of the

00:04:05,040 --> 00:04:12,840
real flight making it a hard real-time

00:04:07,950 --> 00:04:15,720
setup the CPU usage was also

00:04:12,840 --> 00:04:19,950
investigated this was tested on the a

00:04:15,720 --> 00:04:22,560
UAV x 2.1 board the SI h for a quadrotor

00:04:19,950 --> 00:04:25,320
vehicle running at 200 and

00:04:22,560 --> 00:04:29,400
50 Hertz was recorded to use less than

00:04:25,320 --> 00:04:32,970
10% of the CPU this is less than the EKF

00:04:29,400 --> 00:04:35,760
or the modeling module and two good news

00:04:32,970 --> 00:04:38,040
the first one is that this is not

00:04:35,760 --> 00:04:40,320
dependent on the desktop performance as

00:04:38,040 --> 00:04:42,419
the entire simulation is running on the

00:04:40,320 --> 00:04:45,150
hardware board so you can have the

00:04:42,419 --> 00:04:48,240
cheapest desktop ever this will still

00:04:45,150 --> 00:04:50,850
run fine and second one the SH is

00:04:48,240 --> 00:04:51,419
available on all the px4 compatible

00:04:50,850 --> 00:04:55,470
boards

00:04:51,419 --> 00:05:01,380
well except F mu V 2 which has a silicon

00:04:55,470 --> 00:05:04,320
errata how to use the sih well this is

00:05:01,380 --> 00:05:09,000
as simple as selecting the sih airframe

00:05:04,320 --> 00:05:11,460
and that's it J Maxim was also modified

00:05:09,000 --> 00:05:15,630
to be able to display the states of the

00:05:11,460 --> 00:05:20,280
vehicle running in the sih4 this J Maxim

00:05:15,630 --> 00:05:22,500
must be started with the flag - Oh a lot

00:05:20,280 --> 00:05:25,110
of parameters are available to simulate

00:05:22,500 --> 00:05:28,380
different quad rotors such as the

00:05:25,110 --> 00:05:31,229
vehicle mass the moments of inertia the

00:05:28,380 --> 00:05:34,020
maximum thrust and torque generated by

00:05:31,229 --> 00:05:35,630
the engines and the moment arms

00:05:34,020 --> 00:05:38,850
generating the rolling and pitching

00:05:35,630 --> 00:05:41,669
moments okay

00:05:38,850 --> 00:05:44,370
let's demo that the first thing to do is

00:05:41,669 --> 00:05:52,190
to open Q run control plug the autopilot

00:05:44,370 --> 00:05:54,990
and select the airframe sih quadcopter X

00:05:52,190 --> 00:05:57,210
the physical properties of the quadrotor

00:05:54,990 --> 00:06:01,710
can be modified by the parameter

00:05:57,210 --> 00:06:03,720
starting by sih underscore but let's

00:06:01,710 --> 00:06:06,240
keep the default values for this demo

00:06:03,720 --> 00:06:08,700
you might then want to set up your radio

00:06:06,240 --> 00:06:13,530
or if you don't have a radio make sure

00:06:08,700 --> 00:06:15,930
to disable the else allows failsafe now

00:06:13,530 --> 00:06:21,900
let's close Q gun control and have a

00:06:15,930 --> 00:06:24,510
look at the sih documentation this is

00:06:21,900 --> 00:06:27,450
the sih documentation in the dev guide

00:06:24,510 --> 00:06:31,349
and here is the PDF report for the

00:06:27,450 --> 00:06:33,659
dynamic model it is available mainly for

00:06:31,349 --> 00:06:34,390
researcher willing to understand what is

00:06:33,659 --> 00:06:36,820
happening

00:06:34,390 --> 00:06:39,670
under the hood this contains the

00:06:36,820 --> 00:06:42,040
equations of motion the model for the

00:06:39,670 --> 00:06:44,890
forces and moments simple aerodynamic

00:06:42,040 --> 00:06:48,340
model the sense or the reconstruction

00:06:44,890 --> 00:06:51,310
some information on how the sense or no

00:06:48,340 --> 00:06:56,740
standard deviation were obtained as well

00:06:51,310 --> 00:06:58,870
as additional notes and here is the

00:06:56,740 --> 00:07:03,190
information to set up the display using

00:06:58,870 --> 00:07:06,280
J max in closed queuing control this is

00:07:03,190 --> 00:07:09,490
done already unplug and replug the

00:07:06,280 --> 00:07:11,950
hardware of the pilot then copy paste

00:07:09,490 --> 00:07:17,550
this command in the terminal to start

00:07:11,950 --> 00:07:17,550
Jameson here we are

00:07:24,889 --> 00:07:34,819
bang J Maxim is open then we can open a

00:07:32,780 --> 00:07:38,840
cool run control which should

00:07:34,819 --> 00:07:42,229
auto-connect Jameson let's go to the fly

00:07:38,840 --> 00:07:46,159
view and here is our vehicle at the

00:07:42,229 --> 00:07:49,279
airport we can now use all the tools

00:07:46,159 --> 00:07:50,150
provided by Q run control the auto

00:07:49,279 --> 00:07:53,150
takeoff

00:07:50,150 --> 00:07:54,080
go to a location mission public

00:07:53,150 --> 00:07:59,120
inspector

00:07:54,080 --> 00:08:02,300
babbling console etc this video might be

00:07:59,120 --> 00:08:04,550
laggy but don't worry the simulation

00:08:02,300 --> 00:08:06,949
keeps running at a perfect sampling rate

00:08:04,550 --> 00:08:09,469
this is because the computer doesn't

00:08:06,949 --> 00:08:16,580
have to send any signal back to the

00:08:09,469 --> 00:08:18,669
hardware to make it run okay I'll fast

00:08:16,580 --> 00:08:18,669
forward

00:08:28,190 --> 00:08:39,830
and let's end here now you may want to

00:08:37,400 --> 00:08:46,400
download your log file and display it in

00:08:39,830 --> 00:08:48,980
Flex review for instance but before

00:08:46,400 --> 00:08:52,820
ending this demo let's have a look at

00:08:48,980 --> 00:08:58,460
the performances by typing perv in the

00:08:52,820 --> 00:09:01,340
madelung console the SAH is recorded to

00:08:58,460 --> 00:09:04,730
be sampled at an average of three nine

00:09:01,340 --> 00:09:09,050
nine eight microseconds with maximum

00:09:04,730 --> 00:09:13,370
deviation within 52 microseconds this is

00:09:09,050 --> 00:09:17,170
what I call hard real-time the SAH main

00:09:13,370 --> 00:09:20,000
loop is executed in less than 459

00:09:17,170 --> 00:09:22,640
microseconds the main loop could be

00:09:20,000 --> 00:09:25,010
eight times slower so there is room for

00:09:22,640 --> 00:09:29,420
more sophisticated model like a

00:09:25,010 --> 00:09:31,970
fixed-wing aircraft for instance great

00:09:29,420 --> 00:09:34,190
now that you know how to use the SAH

00:09:31,970 --> 00:09:38,270
let's have a look at the code and modify

00:09:34,190 --> 00:09:40,970
it at every iteration the main loop will

00:09:38,270 --> 00:09:44,240
start by reading the motors or more

00:09:40,970 --> 00:09:46,820
generally the activators it will then

00:09:44,240 --> 00:09:49,580
generate the forces and torques based on

00:09:46,820 --> 00:09:52,310
the geometry of the vehicle then the

00:09:49,580 --> 00:09:55,310
equations of motion of a rigid body are

00:09:52,310 --> 00:09:57,920
applied these equations are the same for

00:09:55,310 --> 00:10:01,970
all vehicle modeled as a single rigid

00:09:57,920 --> 00:10:04,850
body the SAH finally reconstruct the

00:10:01,970 --> 00:10:09,290
sensor signals corrupt them with noise

00:10:04,850 --> 00:10:11,810
and sends the IMU signals the ground

00:10:09,290 --> 00:10:15,050
through signals which are used for the

00:10:11,810 --> 00:10:20,330
display in je Maxime and the GPS signals

00:10:15,050 --> 00:10:24,230
are sent at a lower rate if a developer

00:10:20,330 --> 00:10:25,460
or researcher want to modify the SAH for

00:10:24,230 --> 00:10:28,190
a custom vehicle

00:10:25,460 --> 00:10:30,500
the only modifications will be in

00:10:28,190 --> 00:10:32,470
reading the motors and generating the

00:10:30,500 --> 00:10:35,570
forces and torques

00:10:32,470 --> 00:10:40,100
additionally custom parameters might be

00:10:35,570 --> 00:10:41,430
added to to modify the sensors noise

00:10:40,100 --> 00:10:43,230
level

00:10:41,430 --> 00:10:46,500
to better represent sense or noise

00:10:43,230 --> 00:10:49,410
logged from a real fly for instance the

00:10:46,500 --> 00:10:54,420
reconstruction of the sensor signal can

00:10:49,410 --> 00:10:56,779
be modified easily adding a custom

00:10:54,420 --> 00:11:00,330
sensor can be done in the function

00:10:56,779 --> 00:11:03,089
reconstructing the sensor signals the

00:11:00,330 --> 00:11:08,459
custom sensor must then be published to

00:11:03,089 --> 00:11:12,029
you all okay for this demo we will bring

00:11:08,459 --> 00:11:14,459
four modifications to the code one we

00:11:12,029 --> 00:11:17,520
now want to simulate an accelerator in X

00:11:14,459 --> 00:11:20,970
configuration so we'll have to read not

00:11:17,520 --> 00:11:23,250
four but six motor signals and we need

00:11:20,970 --> 00:11:26,640
to modify how the forces and moments are

00:11:23,250 --> 00:11:29,370
generated let's assume that the arm

00:11:26,640 --> 00:11:33,630
length is L roll and the angle between

00:11:29,370 --> 00:11:35,730
two arms is 60 degrees it gives us the

00:11:33,630 --> 00:11:39,000
equations for the vertical force and

00:11:35,730 --> 00:11:41,490
moments as shown the vertical force is

00:11:39,000 --> 00:11:45,930
negative because the z-axis is defined

00:11:41,490 --> 00:11:48,540
as pointing down to for our arrow

00:11:45,930 --> 00:11:51,000
damages friend we will modify the linear

00:11:48,540 --> 00:11:54,570
drag model into a quadratic drive and

00:11:51,000 --> 00:11:57,060
this in one line of code three

00:11:54,570 --> 00:11:59,430
we will also simulate a very noisy bar

00:11:57,060 --> 00:12:04,339
matter which will motivate the point

00:11:59,430 --> 00:12:04,339
four to our distant sense or facing down

00:12:04,490 --> 00:12:10,290
so let's have a look at the modified

00:12:07,200 --> 00:12:13,920
code for this example in the folder

00:12:10,290 --> 00:12:17,550
airframes the sih airframe was modified

00:12:13,920 --> 00:12:20,850
to call the mixer exact X it also

00:12:17,550 --> 00:12:27,690
configures six PWM output channels

00:12:20,850 --> 00:12:30,900
instead of four in the SH module in SI H

00:12:27,690 --> 00:12:33,270
dot CPP the function generate force and

00:12:30,900 --> 00:12:36,029
torques was modified to generate the

00:12:33,270 --> 00:12:39,570
forces and torques from our exact captor

00:12:36,029 --> 00:12:42,270
equations and look here is a

00:12:39,570 --> 00:12:44,310
second-order drag model we simply have

00:12:42,270 --> 00:12:47,730
to multiply by the norm of the velocity

00:12:44,310 --> 00:12:50,910
one more time and down here is the

00:12:47,730 --> 00:12:53,889
barometer noise which is increased to 50

00:12:50,910 --> 00:12:55,809
centimeters standard deviation

00:12:53,889 --> 00:13:00,819
it is in fact in the function

00:12:55,809 --> 00:13:02,769
reconstruct sensor signals I decided to

00:13:00,819 --> 00:13:06,579
publish the distance sensor in the

00:13:02,769 --> 00:13:09,910
function send GPS to be published at 20

00:13:06,579 --> 00:13:14,079
Hertz as well the standard deviation is

00:13:09,910 --> 00:13:16,660
chosen to be 0.05 meter the mean

00:13:14,079 --> 00:13:20,230
distance 0 and the max distance 30

00:13:16,660 --> 00:13:23,619
meters a bit of trigonometry can give us

00:13:20,230 --> 00:13:26,309
the measured distance the variance is

00:13:23,619 --> 00:13:29,379
the square of the standard deviation and

00:13:26,309 --> 00:13:33,459
let's pretend a good signal quality as

00:13:29,379 --> 00:13:35,139
we simulate it as a laser sensor the

00:13:33,459 --> 00:13:36,459
orientation is configured as

00:13:35,139 --> 00:13:40,569
downward-facing

00:13:36,459 --> 00:13:46,329
and finally we store the timestamp and

00:13:40,569 --> 00:13:48,970
publish the Europe topic in SI h dot PHP

00:13:46,329 --> 00:13:53,169
P the header file for the Europe topic

00:13:48,970 --> 00:13:55,359
distance sensor must be included as well

00:13:53,169 --> 00:13:59,669
as the structure for it and the

00:13:55,359 --> 00:14:04,779
publication object this is done at lines

00:13:59,669 --> 00:14:07,989
127 and 28 and finally we configure the

00:14:04,779 --> 00:14:10,929
number of motors to be 6 the function

00:14:07,989 --> 00:14:15,999
read motors will automatically read six

00:14:10,929 --> 00:14:19,809
motors instead of four and that's it how

00:14:15,999 --> 00:14:21,939
does the SH behave with this code so

00:14:19,809 --> 00:14:26,019
here is our vehicle at the airport

00:14:21,939 --> 00:14:29,769
let's open widget analyze and look for

00:14:26,019 --> 00:14:35,259
our distance sensor here is main

00:14:29,769 --> 00:14:37,689
distance max distance centimeters here's

00:14:35,259 --> 00:14:41,249
the current distance in centimeters as

00:14:37,689 --> 00:14:47,189
well we can clearly see the noise and

00:14:41,249 --> 00:14:47,189
our covariance is 25 centimeter squared

00:14:51,060 --> 00:14:55,610
let's observe the current distance and

00:14:52,950 --> 00:14:55,610
takeoff

00:15:01,370 --> 00:15:07,790
now how do we know we are not simulating

00:15:04,100 --> 00:15:12,589
a quadrotor well let's have a look at

00:15:07,790 --> 00:15:17,270
the simulated PWM outputs as you can see

00:15:12,589 --> 00:15:19,279
we have six of them and they are being

00:15:17,270 --> 00:15:23,570
modulated to produce the reference

00:15:19,279 --> 00:15:27,160
maneuver so here is our example being

00:15:23,570 --> 00:15:27,160
simulated in the SAH

00:15:34,050 --> 00:15:38,040
it's time for the conclusion so for the

00:15:37,410 --> 00:15:41,580
pros

00:15:38,040 --> 00:15:44,820
yes ih simulates the world px4 autopilot

00:15:41,580 --> 00:15:48,149
not only the controller we're also the

00:15:44,820 --> 00:15:51,660
EKF failsafe mission and all the other

00:15:48,149 --> 00:15:56,250
modes it is running on the hardware in

00:15:51,660 --> 00:15:59,490
hard real-time it is cheap it's only the

00:15:56,250 --> 00:16:04,829
cost of the hardware board the source

00:15:59,490 --> 00:16:07,200
code is available directly in C++ and I

00:16:04,829 --> 00:16:11,000
hope this video convinced you that the

00:16:07,200 --> 00:16:13,860
code is easy to modify and for the cons

00:16:11,000 --> 00:16:17,279
well everything is embedded in the

00:16:13,860 --> 00:16:21,540
hardware so you're kind of limited in

00:16:17,279 --> 00:16:25,940
computational power but as we saw not as

00:16:21,540 --> 00:16:29,040
limited the environment is limited to I

00:16:25,940 --> 00:16:33,510
cannot imagine like vision based

00:16:29,040 --> 00:16:37,529
simulation or a simulated world with

00:16:33,510 --> 00:16:42,360
different obstacles and this setup does

00:16:37,529 --> 00:16:45,630
not allow multi vehicle simulation also

00:16:42,360 --> 00:16:47,850
I would like to mention that the sih was

00:16:45,630 --> 00:16:51,270
developed by Coriolis G when I was

00:16:47,850 --> 00:16:54,959
working for them so all the credit

00:16:51,270 --> 00:16:58,010
should go to them you can visit Volga -

00:16:54,959 --> 00:17:00,600
Vito comm to know more about them

00:16:58,010 --> 00:17:02,970
Coriolis G is a Canadian company

00:17:00,600 --> 00:17:05,490
developing and conventional little

00:17:02,970 --> 00:17:09,030
aircraft based on passive coupling

00:17:05,490 --> 00:17:11,939
mechanism it means there is no actuator

00:17:09,030 --> 00:17:15,480
to till the rotors and the result is a

00:17:11,939 --> 00:17:18,260
very smooth transition that's a somewhat

00:17:15,480 --> 00:17:22,939
and common technology and its patented

00:17:18,260 --> 00:17:22,939
so feel free to visit their web page

00:17:23,419 --> 00:17:29,030
that's it

00:17:24,900 --> 00:17:29,030

YouTube URL: https://www.youtube.com/watch?v=Icfl4GqfsmI


