Title: Simulated Workflows using Software-In-The-Loop Simulations â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-15
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	Title: Simulated Workflows using Software-In-The-Loop Simulations
Summary: Software-In-The-Loop simulations have been a great tool to speed up the development process for developers in the PX4 community.

In this session, we show how this approach can be used for testing advanced flight control features such as high-risk flight control features to multi-vehicle simulations. Also, we explore how this tool can be extended for testing complex interactions of vehicle subcomponents beyond the firmware using mavlink as an interface.

https://sched.co/cjOs

The PX4 Developer Summit is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd
Captions: 
	00:00:04,910 --> 00:00:11,219
hi my name is Jan Lim and today we talk

00:00:08,940 --> 00:00:14,730
about how to leverage soft in the loop

00:00:11,219 --> 00:00:19,650
simulations to test your daily workflows

00:00:14,730 --> 00:00:21,750
of your vehicle we go through a brief

00:00:19,650 --> 00:00:24,090
introduction of what software in the

00:00:21,750 --> 00:00:27,359
loop simulation is and go through the

00:00:24,090 --> 00:00:31,230
components of the simulation so that you

00:00:27,359 --> 00:00:36,030
can test your own vehicle in a software

00:00:31,230 --> 00:00:38,760
in the loop simulation software the loop

00:00:36,030 --> 00:00:41,750
simulation is a way to run the px4

00:00:38,760 --> 00:00:45,539
flights type directly on your computer

00:00:41,750 --> 00:00:49,440
compared to a flight controller with a

00:00:45,539 --> 00:00:53,039
simulator that can simulate the vehicle

00:00:49,440 --> 00:00:58,739
dynamics as well as the sensor you can

00:00:53,039 --> 00:01:01,230
basically fly a read a simulated vehicle

00:00:58,739 --> 00:01:05,010
that acts as a real vehicle in the

00:01:01,230 --> 00:01:07,049
software point of view the flight stank

00:01:05,010 --> 00:01:10,320
communicates with the simulator through

00:01:07,049 --> 00:01:12,240
the hardware in the loop now the link

00:01:10,320 --> 00:01:16,200
messages which include the actuator

00:01:12,240 --> 00:01:18,450
controls and various sensors this allows

00:01:16,200 --> 00:01:21,479
you to test various actuator

00:01:18,450 --> 00:01:25,560
configurations and sensor configurations

00:01:21,479 --> 00:01:28,080
of the vehicle lockstep keeps the

00:01:25,560 --> 00:01:31,740
simulation and the flight stack in sync

00:01:28,080 --> 00:01:33,750
with the madelung Hill messages so that

00:01:31,740 --> 00:01:35,430
you don't have inconsistent results

00:01:33,750 --> 00:01:39,450
depending on the performance of the

00:01:35,430 --> 00:01:41,549
computer in this talk we focus on gazebo

00:01:39,450 --> 00:01:44,250
based Siddal software the loop

00:01:41,549 --> 00:01:51,320
simulation since it is the most standard

00:01:44,250 --> 00:01:54,509
and widely used simulation at a terian

00:01:51,320 --> 00:01:58,140
we leverage soft in the loop simulations

00:01:54,509 --> 00:02:00,360
to do end-to-end testing this includes

00:01:58,140 --> 00:02:06,329
the ground station as well as the real

00:02:00,360 --> 00:02:11,790
vehicle as you can see we can plan a

00:02:06,329 --> 00:02:13,170
regular mission and the UI elements of

00:02:11,790 --> 00:02:16,170
the ground station

00:02:13,170 --> 00:02:18,720
is all functional and the vehicle has

00:02:16,170 --> 00:02:21,150
the same behavior as the real vehicle

00:02:18,720 --> 00:02:27,750
since we are running the flight snack

00:02:21,150 --> 00:02:30,660
directly in the simulation also you can

00:02:27,750 --> 00:02:33,750
see all the gimbal controls as well as

00:02:30,660 --> 00:02:37,770
the camera controls working and this is

00:02:33,750 --> 00:02:43,260
very helpful not only for development

00:02:37,770 --> 00:02:45,330
but also for people using the vehicle to

00:02:43,260 --> 00:02:51,380
get familiarized with the behaviors

00:02:45,330 --> 00:02:53,610
before going out in the field the use of

00:02:51,380 --> 00:02:57,660
software the loop simulation can be

00:02:53,610 --> 00:03:02,100
broken down in three major areas one is

00:02:57,660 --> 00:03:04,830
to demonstrate behaviors for developers

00:03:02,100 --> 00:03:07,290
but also operators after a major

00:03:04,830 --> 00:03:10,970
software update to get familiarized with

00:03:07,290 --> 00:03:16,440
new features as well as new behaviors

00:03:10,970 --> 00:03:19,970
before going out in the field also px4

00:03:16,440 --> 00:03:26,450
users often the loop simulation - -

00:03:19,970 --> 00:03:30,450
continuous integrations testing so that

00:03:26,450 --> 00:03:33,690
every code change of or pull request

00:03:30,450 --> 00:03:37,920
gets verified by actually flying the

00:03:33,690 --> 00:03:41,609
vehicle in the simulation also for

00:03:37,920 --> 00:03:45,260
development software development by

00:03:41,609 --> 00:03:47,489
speeding up the iteration cycles and

00:03:45,260 --> 00:03:51,150
minimizing the hours you spend in the

00:03:47,489 --> 00:03:53,310
field software the loop simulation is a

00:03:51,150 --> 00:03:58,530
great tool for developers to stay

00:03:53,310 --> 00:04:02,100
efficient the simulation can be run

00:03:58,530 --> 00:04:05,489
through a main command by specifying the

00:04:02,100 --> 00:04:07,470
viewer which is the simulation the

00:04:05,489 --> 00:04:10,109
configuration of the vehicle which

00:04:07,470 --> 00:04:12,329
includes models as well as sub

00:04:10,109 --> 00:04:14,480
configurations of the models and the

00:04:12,329 --> 00:04:20,299
world which the vehicle will be

00:04:14,480 --> 00:04:22,860
simulated in px4 also supports running

00:04:20,299 --> 00:04:25,159
soft and the loop simulations through

00:04:22,860 --> 00:04:25,159
Ross

00:04:26,620 --> 00:04:33,080
also we can simulate multiple vehicles

00:04:29,840 --> 00:04:36,110
with a single script and basically what

00:04:33,080 --> 00:04:39,590
this does is it uses an exact roll macro

00:04:36,110 --> 00:04:41,480
to increment the tcp port which is used

00:04:39,590 --> 00:04:43,340
for the modeling kill message

00:04:41,480 --> 00:04:50,000
communication between the flight stack

00:04:43,340 --> 00:04:52,700
and the simulator the maximum number of

00:04:50,000 --> 00:04:55,910
vehicles that can be simulated is 255

00:04:52,700 --> 00:05:00,430
which is the maximum number madelung can

00:04:55,910 --> 00:05:00,430
support with synthesis ID field

00:05:01,510 --> 00:05:07,190
especially gazebo the software and the

00:05:05,000 --> 00:05:10,520
loop simulation can be broken down into

00:05:07,190 --> 00:05:15,670
three components the model which

00:05:10,520 --> 00:05:19,130
describes the vehicle the plugin which

00:05:15,670 --> 00:05:21,620
defines and configures the sensor

00:05:19,130 --> 00:05:27,110
information or the vehicle dynamics and

00:05:21,620 --> 00:05:32,180
the world which defines the environment

00:05:27,110 --> 00:05:37,840
the vehicle will fly in when integrating

00:05:32,180 --> 00:05:40,550
a new vehicle into px for the mixer

00:05:37,840 --> 00:05:44,120
enables the vehicle to publish actuator

00:05:40,550 --> 00:05:45,920
controls to the relevant actuators what

00:05:44,120 --> 00:05:48,350
is different with the real vehicle and

00:05:45,920 --> 00:05:50,390
the simulated vehicle is that the

00:05:48,350 --> 00:05:52,550
actuator controls do not go to the

00:05:50,390 --> 00:05:55,580
actual actuator but goes to the

00:05:52,550 --> 00:05:58,850
simulation module simulator model module

00:05:55,580 --> 00:06:04,670
which translates this into a hardware

00:05:58,850 --> 00:06:06,860
the loop actuator map link message this

00:06:04,670 --> 00:06:09,380
gets sent to the gazebo map link

00:06:06,860 --> 00:06:15,560
interface plug-in which translates this

00:06:09,380 --> 00:06:18,170
into the gazebo transport messages that

00:06:15,560 --> 00:06:20,960
gets consumed with various plugins

00:06:18,170 --> 00:06:23,930
within the simulation especially for

00:06:20,960 --> 00:06:26,540
actuation because evil motor model which

00:06:23,930 --> 00:06:29,210
simulates the force and moments

00:06:26,540 --> 00:06:32,690
generated by the motors and the lift

00:06:29,210 --> 00:06:34,449
drag plugin which simulates the control

00:06:32,690 --> 00:06:38,650
surfaces or aerodynamic

00:06:34,449 --> 00:06:42,370
Effects of the vehicle as you can see we

00:06:38,650 --> 00:06:45,039
can even simulate a complex model such

00:06:42,370 --> 00:06:52,300
as a tilt rotor as you can see on the

00:06:45,039 --> 00:06:55,919
right as a brief example here is the map

00:06:52,300 --> 00:07:00,009
link interface defining the channels and

00:06:55,919 --> 00:07:04,539
by defining the index of the actuator

00:07:00,009 --> 00:07:10,949
commands this gets passed to the motor

00:07:04,539 --> 00:07:13,599
model as as you are wiring the motors

00:07:10,949 --> 00:07:17,379
with the lift drag plug-in it is a

00:07:13,599 --> 00:07:20,139
little different where the modeling

00:07:17,379 --> 00:07:22,749
interface controls the joint position of

00:07:20,139 --> 00:07:24,879
the control surfaces and the joint

00:07:22,749 --> 00:07:31,930
position are read from the lift drag

00:07:24,879 --> 00:07:35,289
plugin sensors are implemented either

00:07:31,930 --> 00:07:37,839
with a model plugin or a sensor plug in

00:07:35,289 --> 00:07:39,999
in gazebo where a model plugin uses

00:07:37,839 --> 00:07:43,509
information of model states and the

00:07:39,999 --> 00:07:48,789
sensor plug-in uses the sensor class of

00:07:43,509 --> 00:07:51,129
gazebo all these plugins send their

00:07:48,789 --> 00:07:53,439
information to the gazebo modeling

00:07:51,129 --> 00:07:55,839
interface which translates them to the

00:07:53,439 --> 00:08:00,159
madelung kill message that gets sent to

00:07:55,839 --> 00:08:02,830
the flight stack here's an example of

00:08:00,159 --> 00:08:07,899
the IMU sensor plug-in where you can

00:08:02,830 --> 00:08:11,830
configure various noise parameters of

00:08:07,899 --> 00:08:16,209
the gyroscope and accelerometer and as a

00:08:11,830 --> 00:08:21,219
result you can simulate complex behavior

00:08:16,209 --> 00:08:23,889
such as the fixed-wing catapult launch a

00:08:21,219 --> 00:08:30,129
catapult takeoff as you can see on the

00:08:23,889 --> 00:08:33,159
right using plugins you can not only

00:08:30,129 --> 00:08:35,199
simulate sensors but also safety

00:08:33,159 --> 00:08:40,329
critical failures and flight termination

00:08:35,199 --> 00:08:44,260
states such as the parachute plugin

00:08:40,329 --> 00:08:47,340
which subscribes to the actuator

00:08:44,260 --> 00:08:49,320
commands and trigger a para

00:08:47,340 --> 00:08:52,560
shoot when there is a flight termination

00:08:49,320 --> 00:08:55,230
state which is the same way a normal

00:08:52,560 --> 00:08:59,490
parachute trigger will work in the in a

00:08:55,230 --> 00:09:05,330
real vehicle also sensor failures can be

00:08:59,490 --> 00:09:09,270
triggered through a parameter such as a

00:09:05,330 --> 00:09:13,170
ending with a block so that we can

00:09:09,270 --> 00:09:20,250
simulate safety critical features

00:09:13,170 --> 00:09:23,100
without risking a real vehicle also you

00:09:20,250 --> 00:09:26,190
would want to test your vehicle in

00:09:23,100 --> 00:09:28,650
various operating environments that the

00:09:26,190 --> 00:09:31,950
vehicle will be flying in in the real

00:09:28,650 --> 00:09:34,650
world with the recent architectural

00:09:31,950 --> 00:09:39,690
changes the world is now independent of

00:09:34,650 --> 00:09:42,600
the model and various models can be

00:09:39,690 --> 00:09:46,170
spawned into the same world this enables

00:09:42,600 --> 00:09:49,200
testing various models with the

00:09:46,170 --> 00:09:53,160
consistent environment set the worlds

00:09:49,200 --> 00:09:56,330
are defined in an SDF file under the

00:09:53,160 --> 00:09:59,130
world's directory and you can set

00:09:56,330 --> 00:10:02,010
properties such as the location of the

00:09:59,130 --> 00:10:07,350
world the weather of the world including

00:10:02,010 --> 00:10:12,260
wind and gust and the physics of the

00:10:07,350 --> 00:10:16,020
world the physics are basically define

00:10:12,260 --> 00:10:18,270
the times time step of your lobster

00:10:16,020 --> 00:10:23,010
which defines the fidelity of the

00:10:18,270 --> 00:10:25,770
simulation the location of the world can

00:10:23,010 --> 00:10:31,200
be defined through spherical coordinates

00:10:25,770 --> 00:10:35,190
tag which sets the GPS location of the

00:10:31,200 --> 00:10:38,970
local origin to the GPS plugin this is

00:10:35,190 --> 00:10:41,490
useful to align map UI on the ground

00:10:38,970 --> 00:10:47,490
control station as you can see on the

00:10:41,490 --> 00:10:51,210
right you can see that the 3d model in

00:10:47,490 --> 00:10:54,440
the world matches the map displayed on

00:10:51,210 --> 00:10:54,440
cue ground control

00:10:56,199 --> 00:11:01,579
also to simulate weather you can

00:10:58,699 --> 00:11:04,160
simulate wind since the wind is the lock

00:11:01,579 --> 00:11:08,509
has the largest influence over vehicles

00:11:04,160 --> 00:11:14,360
in the environment since wind is now a

00:11:08,509 --> 00:11:17,180
world plug-in you can have consistent

00:11:14,360 --> 00:11:21,500
wind testing environments with different

00:11:17,180 --> 00:11:24,230
vehicle types and with the recent

00:11:21,500 --> 00:11:27,050
changes the wind is now defined as a

00:11:24,230 --> 00:11:30,829
wind velocity instead of directly of

00:11:27,050 --> 00:11:34,370
playing force to the body so now the

00:11:30,829 --> 00:11:40,279
influence to motor thrust and lift drag

00:11:34,370 --> 00:11:42,980
is modeled this enables us to test wind

00:11:40,279 --> 00:11:45,380
influence features such as the weather

00:11:42,980 --> 00:11:49,730
vane as you see on the right which makes

00:11:45,380 --> 00:11:54,290
the VTOL point its nodes towards the

00:11:49,730 --> 00:11:56,480
wind for stability thank you for

00:11:54,290 --> 00:11:58,670
listening and I look forward to have

00:11:56,480 --> 00:12:01,420
interesting discussions with you during

00:11:58,670 --> 00:12:01,420

YouTube URL: https://www.youtube.com/watch?v=60SX8pwYLUc


