Title: Overview of multicopter control from sensors to motors â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-19
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	Title: Overview of multicopter control from sensors to motors

Summary: We give an overview of the components within PX4 to control multicopter vehicles from sensor input pipeline overestimation, through cascaded position, attitude, rate control, and the output allocation. We can only zoom in on certain selected aspects and are happy to answer additional related questions.

The PX4 Developer Summit 2020 is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd
Captions: 
	00:00:00,160 --> 00:00:03,679
uh our next session is overview of

00:00:01,920 --> 00:00:05,279
multicultural control from sensors to

00:00:03,679 --> 00:00:06,879
motors by matthew bruschkani and

00:00:05,279 --> 00:00:09,200
matthias grub reclining from

00:00:06,879 --> 00:00:10,719
uh zurich switzerland matthew matthias

00:00:09,200 --> 00:00:13,519
are both flight control engineers of

00:00:10,719 --> 00:00:14,960
therian and our px4 maintainers

00:00:13,519 --> 00:00:17,600
and this session they will give an

00:00:14,960 --> 00:00:20,640
overview of the components within px4

00:00:17,600 --> 00:00:23,439
to control multicopter vehicles from

00:00:20,640 --> 00:00:24,880
sensor input pipeline overestimation

00:00:23,439 --> 00:00:27,119
through cascaded position

00:00:24,880 --> 00:00:28,160
attitude rate control and the output

00:00:27,119 --> 00:00:30,400
allocation

00:00:28,160 --> 00:00:32,079
and also zoom in on certain selected

00:00:30,400 --> 00:00:32,640
aspects and answer additional related

00:00:32,079 --> 00:00:36,399
questions

00:00:32,640 --> 00:00:39,440
regarding navigation controls and

00:00:36,399 --> 00:00:45,840
development all right so

00:00:39,440 --> 00:00:45,840
let's hear it from matthew and matthias

00:00:49,200 --> 00:00:54,640
welcome to a new talk about navi in the

00:00:51,920 --> 00:00:58,160
navigation control series

00:00:54,640 --> 00:01:00,000
i'll present today with matias

00:00:58,160 --> 00:01:03,120
the overview of multicultural control

00:01:00,000 --> 00:01:05,280
from sensor to motors

00:01:03,120 --> 00:01:06,240
so i'll first let's not just introduce

00:01:05,280 --> 00:01:09,439
himself

00:01:06,240 --> 00:01:13,119
i'm matthias krob matt tooger on github

00:01:09,439 --> 00:01:14,240
i work with bx4 for a lot of years now i

00:01:13,119 --> 00:01:17,759
joined the

00:01:14,240 --> 00:01:19,520
maintenance and developer team in 2017

00:01:17,759 --> 00:01:21,439
and i'm flight control engineer at

00:01:19,520 --> 00:01:24,799
oterion

00:01:21,439 --> 00:01:27,280
so my name is mateo bresciani

00:01:24,799 --> 00:01:28,759
my name my github nickname is brash i'm

00:01:27,280 --> 00:01:32,799
maintainer since

00:01:28,759 --> 00:01:35,200
2018 i work for three years with px4

00:01:32,799 --> 00:01:37,680
and my main focus is estimation and

00:01:35,200 --> 00:01:40,640
multi-couple control

00:01:37,680 --> 00:01:40,960
so we'll first give you an overview of

00:01:40,640 --> 00:01:44,079
the

00:01:40,960 --> 00:01:47,360
multicopter pipeline then specifically

00:01:44,079 --> 00:01:50,320
on the imu side of that pipeline

00:01:47,360 --> 00:01:53,360
different path on estimation and control

00:01:50,320 --> 00:01:56,640
then matthias will give you an overview

00:01:53,360 --> 00:01:59,360
an update on flight task from last year

00:01:56,640 --> 00:02:00,399
and then explain the quaternion attitude

00:01:59,360 --> 00:02:03,360
control

00:02:00,399 --> 00:02:05,920
and i finally talk about control

00:02:03,360 --> 00:02:05,920
location

00:02:06,880 --> 00:02:10,720
so like the title says we want to give

00:02:08,959 --> 00:02:12,879
you a quick overview over the

00:02:10,720 --> 00:02:14,879
components in px4 that make up

00:02:12,879 --> 00:02:16,480
everything that's necessary to fly a

00:02:14,879 --> 00:02:19,920
multicopter

00:02:16,480 --> 00:02:20,560
this overview is is very rough and there

00:02:19,920 --> 00:02:24,400
is not

00:02:20,560 --> 00:02:27,840
an arrow for each and every data

00:02:24,400 --> 00:02:28,959
path but the general path is there so

00:02:27,840 --> 00:02:31,680
from

00:02:28,959 --> 00:02:33,360
from left to right we have the feedback

00:02:31,680 --> 00:02:37,840
loop

00:02:33,360 --> 00:02:40,160
here here closed

00:02:37,840 --> 00:02:42,160
and from the top comes the data path

00:02:40,160 --> 00:02:45,280
that determines the

00:02:42,160 --> 00:02:47,840
behavior of the vehicle so on the left

00:02:45,280 --> 00:02:52,000
we start with sensor drivers that get

00:02:47,840 --> 00:02:54,800
in our raw data from an example of

00:02:52,000 --> 00:02:56,560
sensors for every component i wrote down

00:02:54,800 --> 00:02:58,480
the path as well in the code

00:02:56,560 --> 00:03:00,560
if you want to look it up such that

00:02:58,480 --> 00:03:03,120
you'll easily find it

00:03:00,560 --> 00:03:04,480
and i wrote down the topics that are

00:03:03,120 --> 00:03:07,360
published over

00:03:04,480 --> 00:03:09,519
europe where the data is then given over

00:03:07,360 --> 00:03:12,560
to the next module

00:03:09,519 --> 00:03:15,680
each sensor publishes his

00:03:12,560 --> 00:03:18,000
specific data on a specific topic and

00:03:15,680 --> 00:03:20,239
this then gets further processed in the

00:03:18,000 --> 00:03:21,440
sensor hub that we'll cover later on a

00:03:20,239 --> 00:03:24,480
bit more

00:03:21,440 --> 00:03:26,879
then it goes through an ekf the

00:03:24,480 --> 00:03:29,440
estimator which is covered by paul

00:03:26,879 --> 00:03:32,080
rysboro tomorrow

00:03:29,440 --> 00:03:33,760
and then from the top comes as i said

00:03:32,080 --> 00:03:37,040
the behavioral

00:03:33,760 --> 00:03:39,760
path of data so your input

00:03:37,040 --> 00:03:42,799
comes through here what mode you're in

00:03:39,760 --> 00:03:46,080
how you want to fly and what your

00:03:42,799 --> 00:03:48,480
stick input is from the remote and

00:03:46,080 --> 00:03:51,040
this goes then into the position control

00:03:48,480 --> 00:03:53,439
attitude control and rate control

00:03:51,040 --> 00:03:55,040
pipeline for multicopter that was

00:03:53,439 --> 00:03:59,120
covered by anton

00:03:55,040 --> 00:04:01,519
just before and we will cover some

00:03:59,120 --> 00:04:03,439
like we said some of the flight task

00:04:01,519 --> 00:04:04,720
updates and attitude control in this

00:04:03,439 --> 00:04:07,360
talk

00:04:04,720 --> 00:04:09,680
then it goes through the mixer to

00:04:07,360 --> 00:04:12,480
determine what motor needs to do what

00:04:09,680 --> 00:04:14,480
and there's also further talk about

00:04:12,480 --> 00:04:18,160
control allocation

00:04:14,480 --> 00:04:18,160
later on in the dev summit

00:04:19,040 --> 00:04:23,360
so first part what uh i would like to

00:04:21,040 --> 00:04:25,520
talk is the aimu pipeline

00:04:23,360 --> 00:04:27,440
so i would like to emphasize that there

00:04:25,520 --> 00:04:30,320
are two different paths

00:04:27,440 --> 00:04:31,840
there is the the top one which will go

00:04:30,320 --> 00:04:34,800
for the estimation

00:04:31,840 --> 00:04:35,840
so we have that path that is low rate

00:04:34,800 --> 00:04:39,120
and unfiltered

00:04:35,840 --> 00:04:42,000
that goes directly to the ekf2 uh

00:04:39,120 --> 00:04:43,600
after coming from the ime driver and

00:04:42,000 --> 00:04:47,120
that is the lower one

00:04:43,600 --> 00:04:51,199
which is a high rate and filtered

00:04:47,120 --> 00:04:51,199
signal that goes to the rate controller

00:04:51,680 --> 00:04:55,360
so first we have the driver directly

00:04:53,759 --> 00:04:58,000
reading the data from the

00:04:55,360 --> 00:04:59,040
from the imu that one is usually

00:04:58,000 --> 00:05:02,479
triggered by

00:04:59,040 --> 00:05:04,880
an interrupt and then you have processed

00:05:02,479 --> 00:05:07,120
the accelerometer

00:05:04,880 --> 00:05:08,080
on the top here and in the gyro on the

00:05:07,120 --> 00:05:11,199
bottom

00:05:08,080 --> 00:05:13,039
quite similarly except that on the

00:05:11,199 --> 00:05:15,600
the accelerometer side you have a clip

00:05:13,039 --> 00:05:18,800
counter that then is used by the ekf

00:05:15,600 --> 00:05:20,560
to try to um to counteract some effects

00:05:18,800 --> 00:05:23,520
of clipping

00:05:20,560 --> 00:05:25,120
and then there is the the rotation to to

00:05:23,520 --> 00:05:25,680
put everything in the in the correct

00:05:25,120 --> 00:05:29,120
frame

00:05:25,680 --> 00:05:32,560
from the defined autopilot

00:05:29,120 --> 00:05:35,600
then it gets uh integrated to uh

00:05:32,560 --> 00:05:38,880
to have the the define rate of here on

00:05:35,600 --> 00:05:41,919
800 hertz which can be also

00:05:38,880 --> 00:05:42,880
selected by this parameter that controls

00:05:41,919 --> 00:05:45,919
the

00:05:42,880 --> 00:05:48,000
mainly the the gyro rate frequency

00:05:45,919 --> 00:05:49,199
so it can be changed for 400 to 4

00:05:48,000 --> 00:05:53,360
kilohertz

00:05:49,199 --> 00:05:55,360
um note that on you need a

00:05:53,360 --> 00:05:57,199
quite new generation of boards to run

00:05:55,360 --> 00:05:58,319
the control at four kilohertz that is

00:05:57,199 --> 00:06:01,680
consume quite

00:05:58,319 --> 00:06:02,880
a lot of resources uh default is 800

00:06:01,680 --> 00:06:05,840
hertz

00:06:02,880 --> 00:06:07,039
and you can lock directly here the fifo

00:06:05,840 --> 00:06:09,919
data

00:06:07,039 --> 00:06:10,400
at four kilohertz if you have a good sd

00:06:09,919 --> 00:06:13,600
card

00:06:10,400 --> 00:06:16,720
by enabling the the logging on with that

00:06:13,600 --> 00:06:19,440
parameter and then you can directly plot

00:06:16,720 --> 00:06:20,400
those spectrogram and fast-forward

00:06:19,440 --> 00:06:23,600
transform

00:06:20,400 --> 00:06:24,560
of the accelerometer and the gyro using

00:06:23,600 --> 00:06:27,759
the

00:06:24,560 --> 00:06:30,400
that website which is flight review

00:06:27,759 --> 00:06:31,199
and so you can analyze the vibration of

00:06:30,400 --> 00:06:35,840
your drone

00:06:31,199 --> 00:06:35,840
quite quite well

00:06:38,960 --> 00:06:41,759
sorry for that

00:06:42,720 --> 00:06:51,440
so um then the estimation path which was

00:06:46,639 --> 00:06:54,560
on the top of the the slide before

00:06:51,440 --> 00:06:57,680
you can select the the imu into

00:06:54,560 --> 00:06:59,759
integration rate that will define the

00:06:57,680 --> 00:07:01,440
output rate of the ekf which is the

00:06:59,759 --> 00:07:04,880
attitude

00:07:01,440 --> 00:07:07,440
message but not the

00:07:04,880 --> 00:07:08,720
the other one which is position and

00:07:07,440 --> 00:07:11,280
velocity

00:07:08,720 --> 00:07:12,880
and the other message which are fixed at

00:07:11,280 --> 00:07:16,000
100 hertz

00:07:12,880 --> 00:07:17,840
so there are two for for each imu you

00:07:16,000 --> 00:07:18,960
have one of those block proteins vehicle

00:07:17,840 --> 00:07:21,520
imu

00:07:18,960 --> 00:07:22,880
that receive calibration compute some

00:07:21,520 --> 00:07:26,479
vibration metrics and

00:07:22,880 --> 00:07:28,400
are published to the vehicle imu topic

00:07:26,479 --> 00:07:30,160
that vehicle i'm your topic so as i said

00:07:28,400 --> 00:07:33,520
there is one per imu

00:07:30,160 --> 00:07:36,479
and that will enable us in the future to

00:07:33,520 --> 00:07:37,599
to run one ekf per imu and then switch

00:07:36,479 --> 00:07:40,160
over

00:07:37,599 --> 00:07:41,919
right now we're still using that topic

00:07:40,160 --> 00:07:44,000
that you might have heard of

00:07:41,919 --> 00:07:46,479
which is called center combine it's

00:07:44,000 --> 00:07:50,080
actually one instance of that vehicle

00:07:46,479 --> 00:07:52,400
imu topic with the highest priority

00:07:50,080 --> 00:07:53,680
so soon we'll have multi ekf we already

00:07:52,400 --> 00:07:56,639
have prototype working

00:07:53,680 --> 00:07:57,520
and that will enable switching between

00:07:56,639 --> 00:07:59,680
imuse

00:07:57,520 --> 00:08:03,120
depending on the on the state of the

00:07:59,680 --> 00:08:03,120
state of the estimator

00:08:03,360 --> 00:08:06,720
then on the control path which is uh

00:08:05,759 --> 00:08:10,000
faster

00:08:06,720 --> 00:08:12,800
we have first body

00:08:10,000 --> 00:08:14,639
acceleration so it got also calibrated

00:08:12,800 --> 00:08:15,120
compensated for the estimated bias of

00:08:14,639 --> 00:08:18,319
the

00:08:15,120 --> 00:08:20,080
of the estimator and then there is a

00:08:18,319 --> 00:08:22,240
low pass filter that you can select

00:08:20,080 --> 00:08:24,960
which is uh that

00:08:22,240 --> 00:08:26,000
that one i'm your excel cutoff and that

00:08:24,960 --> 00:08:28,879
goes into the vehicle

00:08:26,000 --> 00:08:30,160
acceleration topics it's not a lot used

00:08:28,879 --> 00:08:33,279
in multicopter but

00:08:30,160 --> 00:08:37,120
more use on fixed-wing and also on

00:08:33,279 --> 00:08:40,800
in commander for launch detection and

00:08:37,120 --> 00:08:43,120
load factor computations

00:08:40,800 --> 00:08:44,159
here on the bottom part you have the the

00:08:43,120 --> 00:08:46,720
gyroscope

00:08:44,159 --> 00:08:48,320
the data that comes in gets calibrated

00:08:46,720 --> 00:08:49,440
also compensated for bias from the

00:08:48,320 --> 00:08:50,959
estimator

00:08:49,440 --> 00:08:53,040
and the difference with the

00:08:50,959 --> 00:08:54,560
accelerometers that you can select here

00:08:53,040 --> 00:08:58,240
a notch filter

00:08:54,560 --> 00:08:58,800
and then the low pass filter also in

00:08:58,240 --> 00:09:01,360
that

00:08:58,800 --> 00:09:04,000
same block it computes the derivative

00:09:01,360 --> 00:09:06,959
and filters it that will go to the

00:09:04,000 --> 00:09:08,720
rate control directly on the right side

00:09:06,959 --> 00:09:10,800
you see all the the parameters that can

00:09:08,720 --> 00:09:12,320
control the different kind of filters

00:09:10,800 --> 00:09:14,080
and on the bottom here like that

00:09:12,320 --> 00:09:15,440
specific notch filter where you can

00:09:14,080 --> 00:09:19,760
select the notch frequency

00:09:15,440 --> 00:09:22,800
and the bandwidth of the of the filter

00:09:19,760 --> 00:09:25,040
so since i'm one of the authors of

00:09:22,800 --> 00:09:25,440
flight tasks and i gave a speak already

00:09:25,040 --> 00:09:28,320
a lot

00:09:25,440 --> 00:09:30,560
on last year's dev summit i wanted to

00:09:28,320 --> 00:09:32,800
give a quick update on the to do's we

00:09:30,560 --> 00:09:34,080
had from last year what was done in that

00:09:32,800 --> 00:09:36,600
year

00:09:34,080 --> 00:09:39,200
one of the to-do's was to avoid

00:09:36,600 --> 00:09:42,880
discontinuities between mode switches or

00:09:39,200 --> 00:09:45,519
also then task switches which were

00:09:42,880 --> 00:09:46,000
present because and the new task didn't

00:09:45,519 --> 00:09:49,120
know

00:09:46,000 --> 00:09:51,279
what the old task was doing before and

00:09:49,120 --> 00:09:53,920
only had the current vehicle state to

00:09:51,279 --> 00:09:56,480
take over which is not enough because

00:09:53,920 --> 00:09:57,760
it cannot know how to continue with the

00:09:56,480 --> 00:10:00,880
set point

00:09:57,760 --> 00:10:01,600
in a continuous way and the idea here to

00:10:00,880 --> 00:10:03,839
solve that

00:10:01,600 --> 00:10:05,600
is to just capture the last set point

00:10:03,839 --> 00:10:09,040
that was executed from

00:10:05,600 --> 00:10:11,200
the task before and that gets passed

00:10:09,040 --> 00:10:12,560
on to the activate function of the new

00:10:11,200 --> 00:10:14,880
task and then it's

00:10:12,560 --> 00:10:16,959
his responsibility to take over

00:10:14,880 --> 00:10:21,519
continuously

00:10:16,959 --> 00:10:24,240
a second bigger change that is now

00:10:21,519 --> 00:10:26,160
made possible is the execution of

00:10:24,240 --> 00:10:28,640
acceleration set points and i have the

00:10:26,160 --> 00:10:32,560
next two slides to explain this

00:10:28,640 --> 00:10:35,279
in more depth to you

00:10:32,560 --> 00:10:36,880
like presented last year the main

00:10:35,279 --> 00:10:38,480
interface between flight task and

00:10:36,880 --> 00:10:42,000
position control was

00:10:38,480 --> 00:10:45,279
position velocity and thrust and now new

00:10:42,000 --> 00:10:47,440
the thrust the unit thrust 3d vector is

00:10:45,279 --> 00:10:50,160
replaced with acceleration

00:10:47,440 --> 00:10:50,800
in actual meters per second square this

00:10:50,160 --> 00:10:52,880
is done

00:10:50,800 --> 00:10:54,720
because the unit thrust was more

00:10:52,880 --> 00:10:58,000
dependent on the vehicle

00:10:54,720 --> 00:10:58,399
mass and maximum thrust and so you can

00:10:58,000 --> 00:11:02,079
now

00:10:58,399 --> 00:11:02,079
set in your flight task

00:11:02,320 --> 00:11:05,760
any any set point combination of

00:11:04,480 --> 00:11:09,120
position velocity

00:11:05,760 --> 00:11:12,480
acceleration yo and your speed

00:11:09,120 --> 00:11:15,040
uh use but only adhering to the

00:11:12,480 --> 00:11:17,200
two requirements i wrote here every

00:11:15,040 --> 00:11:19,200
dimension needs to have at least

00:11:17,200 --> 00:11:20,560
one set point otherwise it doesn't know

00:11:19,200 --> 00:11:23,279
what to do

00:11:20,560 --> 00:11:25,360
and the horizontal set point in x and y

00:11:23,279 --> 00:11:26,959
needs to come in pairs so you cannot

00:11:25,360 --> 00:11:29,279
exclusively have

00:11:26,959 --> 00:11:33,440
positions that point for x and

00:11:29,279 --> 00:11:33,440
velocities at 0.4y for example

00:11:33,519 --> 00:11:38,720
as an implication of that the output of

00:11:36,720 --> 00:11:39,360
the velocity controller is now not

00:11:38,720 --> 00:11:42,320
thrust

00:11:39,360 --> 00:11:44,240
but acceleration and to have that

00:11:42,320 --> 00:11:47,920
represented in the gain

00:11:44,240 --> 00:11:51,920
um we rescaled the gain from

00:11:47,920 --> 00:11:55,519
and and renamed the parameter with that

00:11:51,920 --> 00:11:58,560
that underscore ax at the end

00:11:55,519 --> 00:12:00,480
and to show you how to convert to that

00:11:58,560 --> 00:12:03,680
new gain scaling

00:12:00,480 --> 00:12:06,720
the default gains were rescaled by

00:12:03,680 --> 00:12:08,800
this factor of the gravity acceleration

00:12:06,720 --> 00:12:12,639
over hover thrust

00:12:08,800 --> 00:12:15,519
which is um approp approximately

00:12:12,639 --> 00:12:16,320
10 meters per second square over an

00:12:15,519 --> 00:12:20,639
assumed

00:12:16,320 --> 00:12:23,200
15 50 hover thrust which is about 20

00:12:20,639 --> 00:12:24,160
factor of 20. so if you rescale your

00:12:23,200 --> 00:12:27,519
gains

00:12:24,160 --> 00:12:28,959
you will have acceptable results and

00:12:27,519 --> 00:12:29,760
from there on it should be more

00:12:28,959 --> 00:12:33,440
consistent

00:12:29,760 --> 00:12:33,440
independent of the vehicle weight

00:12:34,399 --> 00:12:38,000
additionally i want to show you that the

00:12:37,120 --> 00:12:40,880
strategy of

00:12:38,000 --> 00:12:41,920
the attitude set point generation

00:12:40,880 --> 00:12:46,240
changed

00:12:41,920 --> 00:12:46,800
before the 3d thrust vector was directly

00:12:46,240 --> 00:12:50,000
used

00:12:46,800 --> 00:12:52,800
to generate the attitude and

00:12:50,000 --> 00:12:54,639
that had some problems because the

00:12:52,800 --> 00:12:57,360
vertical

00:12:54,639 --> 00:12:58,560
and vehicle dynamics are usually much

00:12:57,360 --> 00:13:00,800
faster than the

00:12:58,560 --> 00:13:01,760
horizontal or rotational ones in

00:13:00,800 --> 00:13:05,440
practice

00:13:01,760 --> 00:13:09,040
and so the idea to solve this is to make

00:13:05,440 --> 00:13:11,600
the tilt of the vehicle so

00:13:09,040 --> 00:13:12,800
the tilt of the attitude independent of

00:13:11,600 --> 00:13:16,160
the vertical

00:13:12,800 --> 00:13:18,639
demanded acceleration i have here a

00:13:16,160 --> 00:13:21,519
small example on the right side

00:13:18,639 --> 00:13:23,440
we demand the horizontal acceleration of

00:13:21,519 --> 00:13:26,720
four meters per second squared

00:13:23,440 --> 00:13:30,639
and that directly uh determines the

00:13:26,720 --> 00:13:35,279
tilt of of the demanded thrust um

00:13:30,639 --> 00:13:37,839
by by projecting with assuming uh

00:13:35,279 --> 00:13:39,600
the gravitational acceleration in the

00:13:37,839 --> 00:13:42,240
vertical direction

00:13:39,600 --> 00:13:45,199
and the demanded acceleration in the

00:13:42,240 --> 00:13:47,600
vertical direction then can only change

00:13:45,199 --> 00:13:49,120
the amount of collective frost but the

00:13:47,600 --> 00:13:54,240
tilt stays the same

00:13:49,120 --> 00:13:54,240
independent of the vertical control

00:13:59,199 --> 00:14:03,519
further i want to address some to-do's

00:14:01,600 --> 00:14:06,880
that are still remaining

00:14:03,519 --> 00:14:07,279
related to flight tasks flight tasks are

00:14:06,880 --> 00:14:09,519
now

00:14:07,279 --> 00:14:11,680
a library instantiated in position

00:14:09,519 --> 00:14:12,160
control and should be moved out into

00:14:11,680 --> 00:14:15,279
their

00:14:12,160 --> 00:14:18,399
separate component there is still

00:14:15,279 --> 00:14:21,600
an inheritance structure which is

00:14:18,399 --> 00:14:24,880
kind of hard to get into and um

00:14:21,600 --> 00:14:26,000
yeah it it hinders this sequential

00:14:24,880 --> 00:14:30,079
reading of what

00:14:26,000 --> 00:14:32,720
what is executed then flight tasks are

00:14:30,079 --> 00:14:34,079
planned to be extended to flight modes

00:14:32,720 --> 00:14:36,639
which support also

00:14:34,079 --> 00:14:38,160
other set points like rate and attitude

00:14:36,639 --> 00:14:41,040
set points directly

00:14:38,160 --> 00:14:42,000
this would then cover all all possible

00:14:41,040 --> 00:14:45,199
flight modes

00:14:42,000 --> 00:14:48,560
and we have no exceptions left for

00:14:45,199 --> 00:14:49,199
modes that cannot be covered then a goal

00:14:48,560 --> 00:14:52,480
is to

00:14:49,199 --> 00:14:52,880
import the existing navigation states

00:14:52,480 --> 00:14:56,320
for

00:14:52,880 --> 00:14:58,880
autonomous flight like take off rtl land

00:14:56,320 --> 00:14:59,360
in two such flight modes such that we

00:14:58,880 --> 00:15:02,639
have

00:14:59,360 --> 00:15:05,680
one uh single type for

00:15:02,639 --> 00:15:06,399
forum to represent the mode and not like

00:15:05,680 --> 00:15:10,639
scattered

00:15:06,399 --> 00:15:13,040
over over the code then there's also

00:15:10,639 --> 00:15:15,600
a low barrier with those flight modes to

00:15:13,040 --> 00:15:19,600
also be used for other vehicle types

00:15:15,600 --> 00:15:22,720
like fixed-wing vtol or rover

00:15:19,600 --> 00:15:24,160
and also a further goal is to hook it up

00:15:22,720 --> 00:15:27,680
with the state machine

00:15:24,160 --> 00:15:28,560
which is now commander to um to be able

00:15:27,680 --> 00:15:31,279
to infer

00:15:28,560 --> 00:15:32,320
the state machine transitions from

00:15:31,279 --> 00:15:36,320
certain problem

00:15:32,320 --> 00:15:36,320
properties of the mode directly

00:15:39,440 --> 00:15:44,480
now i want to go further down the

00:15:41,519 --> 00:15:47,519
pipeline to the attitude control

00:15:44,480 --> 00:15:51,199
i want to explain hopefully um

00:15:47,519 --> 00:15:54,720
in a in an easy way how we

00:15:51,199 --> 00:15:56,160
calculate and and act on an error in

00:15:54,720 --> 00:15:59,279
attitude

00:15:56,160 --> 00:16:02,480
so in green on the right side we see our

00:15:59,279 --> 00:16:05,279
desired uh attitude set point uh

00:16:02,480 --> 00:16:05,680
represented now here as a completely

00:16:05,279 --> 00:16:10,079
level

00:16:05,680 --> 00:16:12,720
attitude with these three unit vectors

00:16:10,079 --> 00:16:13,839
then we know from the estimator in red

00:16:12,720 --> 00:16:16,000
that we are currently

00:16:13,839 --> 00:16:18,560
tilted to the side and so we need to

00:16:16,000 --> 00:16:18,560
roll back

00:16:18,880 --> 00:16:24,880
in quaternion arithmetic multiplication

00:16:22,320 --> 00:16:26,560
is a rotation of a quaternion so we are

00:16:24,880 --> 00:16:29,440
looking for the error that

00:16:26,560 --> 00:16:32,639
rotates us from the current estimate to

00:16:29,440 --> 00:16:35,519
where we want to be the set point

00:16:32,639 --> 00:16:36,320
and that quaternion error we find by

00:16:35,519 --> 00:16:39,440
rearranging

00:16:36,320 --> 00:16:42,320
the equation

00:16:39,440 --> 00:16:42,800
then after we calculated this quaternion

00:16:42,320 --> 00:16:46,160
error

00:16:42,800 --> 00:16:48,880
we take a closer look at the individual

00:16:46,160 --> 00:16:51,279
four components the first component

00:16:48,880 --> 00:16:55,519
which is the first line

00:16:51,279 --> 00:16:58,800
here we are not interested in

00:16:55,519 --> 00:16:59,440
in in this calculation so we look at the

00:16:58,800 --> 00:17:02,079
other

00:16:59,440 --> 00:17:02,959
three components that are at the bottom

00:17:02,079 --> 00:17:06,079
and they

00:17:02,959 --> 00:17:06,400
represent a 3d vector which points into

00:17:06,079 --> 00:17:10,160
the

00:17:06,400 --> 00:17:12,559
direction of the rotation axis

00:17:10,160 --> 00:17:15,600
around which we need to rotate it's the

00:17:12,559 --> 00:17:18,959
blue vector here in the graph

00:17:15,600 --> 00:17:22,000
and this vector is scaled by sine

00:17:18,959 --> 00:17:25,919
of the tilt angle divided by 2.

00:17:22,000 --> 00:17:28,720
i quickly plotted here sine over

00:17:25,919 --> 00:17:29,679
sine of alpha divided by 2 and we can

00:17:28,720 --> 00:17:33,520
see between

00:17:29,679 --> 00:17:37,120
minus 180 degrees and 180 degrees

00:17:33,520 --> 00:17:40,080
it's monotonically increasing

00:17:37,120 --> 00:17:40,640
which means the more tilt angle we have

00:17:40,080 --> 00:17:43,679
the more

00:17:40,640 --> 00:17:47,039
error we infer and

00:17:43,679 --> 00:17:50,000
the more action we give as a

00:17:47,039 --> 00:17:50,480
rate set point and so we take these

00:17:50,000 --> 00:17:55,600
three

00:17:50,480 --> 00:17:58,080
components at the bottom to use as our

00:17:55,600 --> 00:18:00,559
rate set point of course scaled by the

00:17:58,080 --> 00:18:03,840
proportional gain of the controller

00:18:00,559 --> 00:18:06,880
i didn't invent this algorithm it's

00:18:03,840 --> 00:18:10,640
represented more in detail in that paper

00:18:06,880 --> 00:18:10,640
that is also referenced in the code

00:18:11,280 --> 00:18:15,520
so i'll quickly discuss about control

00:18:13,120 --> 00:18:16,240
location so basically what's control

00:18:15,520 --> 00:18:19,280
location

00:18:16,240 --> 00:18:21,280
is is a way to transform the desired

00:18:19,280 --> 00:18:22,640
force and torques that come out of the

00:18:21,280 --> 00:18:25,919
raid controller

00:18:22,640 --> 00:18:27,760
into the actuator outputs so it's kind

00:18:25,919 --> 00:18:28,000
of mysterious blocks here that has to do

00:18:27,760 --> 00:18:31,600
that

00:18:28,000 --> 00:18:34,240
operation fortunately we can use

00:18:31,600 --> 00:18:35,200
linear algebra to achieve that as the

00:18:34,240 --> 00:18:38,160
system

00:18:35,200 --> 00:18:39,360
is close to linear if we only use force

00:18:38,160 --> 00:18:41,280
and torques

00:18:39,360 --> 00:18:42,880
and how do we compute that control

00:18:41,280 --> 00:18:45,919
location matrix so

00:18:42,880 --> 00:18:47,200
what we do is that we take the geometry

00:18:45,919 --> 00:18:49,600
of the vehicle

00:18:47,200 --> 00:18:50,799
and the force that can produce each

00:18:49,600 --> 00:18:52,960
motor

00:18:50,799 --> 00:18:54,640
given that we can build the actuator

00:18:52,960 --> 00:18:57,600
effectiveness matrix

00:18:54,640 --> 00:18:58,160
here and then by computing the inverse

00:18:57,600 --> 00:19:00,640
we can

00:18:58,160 --> 00:19:01,840
have the control location matrix that

00:19:00,640 --> 00:19:04,000
inverse is

00:19:01,840 --> 00:19:06,640
if it's squared it's just a squared

00:19:04,000 --> 00:19:09,679
matrices just a normal inverse and

00:19:06,640 --> 00:19:12,160
if not if you have more actuators than

00:19:09,679 --> 00:19:13,280
than inputs then you can have a

00:19:12,160 --> 00:19:18,240
pseudo-inverse

00:19:13,280 --> 00:19:20,320
here computed by a more penrose solution

00:19:18,240 --> 00:19:21,760
so basically how to add new geometry so

00:19:20,320 --> 00:19:25,520
you have a new vehicle

00:19:21,760 --> 00:19:27,360
that has a crazy shape with 20 motors or

00:19:25,520 --> 00:19:30,080
i don't know how many

00:19:27,360 --> 00:19:31,200
you want to add a new file for that to

00:19:30,080 --> 00:19:33,360
have new mixer

00:19:31,200 --> 00:19:35,919
you can have the description you can

00:19:33,360 --> 00:19:38,080
have your own description in

00:19:35,919 --> 00:19:38,960
in a new file in that path it's a

00:19:38,080 --> 00:19:40,960
thermal file

00:19:38,960 --> 00:19:42,080
you can describe the position and the

00:19:40,960 --> 00:19:45,679
force of

00:19:42,080 --> 00:19:45,919
each actuator you create a new key for

00:19:45,679 --> 00:19:49,200
it

00:19:45,919 --> 00:19:50,880
a unique key and then in the rom fs you

00:19:49,200 --> 00:19:51,280
can create a new mixer with that line

00:19:50,880 --> 00:19:54,320
which

00:19:51,280 --> 00:19:57,679
means that the r is for a multicopter

00:19:54,320 --> 00:19:59,280
here is your key and those numbers are

00:19:57,679 --> 00:20:01,840
just for legacy reasons you don't

00:19:59,280 --> 00:20:02,559
need to worry about it and then simply

00:20:01,840 --> 00:20:05,919
call that

00:20:02,559 --> 00:20:07,440
that mixer that you you your new mixer

00:20:05,919 --> 00:20:09,760
into your config

00:20:07,440 --> 00:20:11,200
and at build time it will compile

00:20:09,760 --> 00:20:13,039
everything for you you have

00:20:11,200 --> 00:20:14,320
a python script that will generate

00:20:13,039 --> 00:20:16,080
directly that

00:20:14,320 --> 00:20:18,159
control allocation matrix based on the

00:20:16,080 --> 00:20:21,360
geometry generate the

00:20:18,159 --> 00:20:24,240
the c5 file and

00:20:21,360 --> 00:20:24,240
it's ready to go

00:20:25,520 --> 00:20:28,960
also that's why it's super fast to run

00:20:27,520 --> 00:20:32,159
in air because you'll need to

00:20:28,960 --> 00:20:34,960
recompute every time one

00:20:32,159 --> 00:20:36,799
option that you can enable in in control

00:20:34,960 --> 00:20:40,799
location is called air mode

00:20:36,799 --> 00:20:44,080
so air mode is the is a way to increase

00:20:40,799 --> 00:20:45,440
the authority of some axis over the the

00:20:44,080 --> 00:20:48,240
thrust

00:20:45,440 --> 00:20:48,559
so for example here on that graph you

00:20:48,240 --> 00:20:52,080
see

00:20:48,559 --> 00:20:55,120
on the x-axis that's the the roll torque

00:20:52,080 --> 00:20:57,280
you you're demanding on with that small

00:20:55,120 --> 00:20:59,039
arrow here and on the vertical axis is

00:20:57,280 --> 00:21:01,520
the collective thrust

00:20:59,039 --> 00:21:03,840
so for a normal quad it looks like that

00:21:01,520 --> 00:21:06,000
shape so you have the maximum

00:21:03,840 --> 00:21:07,919
authority when you're at 50 because

00:21:06,000 --> 00:21:10,080
that's when you have the maximum

00:21:07,919 --> 00:21:11,919
differential thrust that you can apply

00:21:10,080 --> 00:21:13,679
so if you have no air mode and you can

00:21:11,919 --> 00:21:16,880
attain the desired

00:21:13,679 --> 00:21:17,600
torque and trust it will just allocate

00:21:16,880 --> 00:21:20,480
it

00:21:17,600 --> 00:21:21,840
if you have air mode it's the same here

00:21:20,480 --> 00:21:24,559
if it's unattainable

00:21:21,840 --> 00:21:25,120
and you have no air mode and the roll

00:21:24,559 --> 00:21:27,120
torque

00:21:25,120 --> 00:21:28,960
is not feasible then it will constrain

00:21:27,120 --> 00:21:31,120
it to the

00:21:28,960 --> 00:21:32,559
what's what's actually feasible and not

00:21:31,120 --> 00:21:35,120
touch the thrust

00:21:32,559 --> 00:21:35,679
if you enable air mode what you can have

00:21:35,120 --> 00:21:38,000
is that

00:21:35,679 --> 00:21:39,679
it will give you a boost of collective

00:21:38,000 --> 00:21:43,280
thrust to be able to allocate

00:21:39,679 --> 00:21:45,280
the full torque

00:21:43,280 --> 00:21:47,039
uh one thing to so a few things to

00:21:45,280 --> 00:21:47,679
mention here so you can activate it by

00:21:47,039 --> 00:21:50,640
uh

00:21:47,679 --> 00:21:51,919
by setting that mcr mode parameter you

00:21:50,640 --> 00:21:54,400
have different modes so

00:21:51,919 --> 00:21:56,640
a roll pitch only prioritization of a

00:21:54,400 --> 00:21:59,039
thrust or a roll pto

00:21:56,640 --> 00:21:59,679
um you will only activate normally roll

00:21:59,039 --> 00:22:03,120
pitch you

00:21:59,679 --> 00:22:06,240
on a racer or on drones that have strong

00:22:03,120 --> 00:22:08,880
eu authority and it works

00:22:06,240 --> 00:22:10,720
much better if you have kind of a linear

00:22:08,880 --> 00:22:12,720
mapping between

00:22:10,720 --> 00:22:15,039
between the output that goes to the

00:22:12,720 --> 00:22:17,280
motor and actual thrust

00:22:15,039 --> 00:22:18,640
because we assume it's a linear system

00:22:17,280 --> 00:22:21,520
so try to

00:22:18,640 --> 00:22:23,280
linearize the that's mapping using that

00:22:21,520 --> 00:22:25,360
model factor here

00:22:23,280 --> 00:22:27,360
and also be sure that you first tune

00:22:25,360 --> 00:22:29,280
your vehicle before you activate air

00:22:27,360 --> 00:22:30,880
mode because otherwise you can have a

00:22:29,280 --> 00:22:33,600
bad thing happening

00:22:30,880 --> 00:22:34,400
let's imagine you have the here the

00:22:33,600 --> 00:22:36,480
x-axis that

00:22:34,400 --> 00:22:38,400
oscillates if you have air mode active

00:22:36,480 --> 00:22:41,840
it will always put your thrust

00:22:38,400 --> 00:22:44,799
at the midpoint so you'll you might fly

00:22:41,840 --> 00:22:44,799
away because of that

00:22:44,880 --> 00:22:48,320
and thank you for our attention now

00:22:48,000 --> 00:22:51,520
we'll

00:22:48,320 --> 00:22:53,679
answer a few questions so yeah i'll

00:22:51,520 --> 00:22:56,159
directly take the the first one

00:22:53,679 --> 00:22:57,120
what is the accelerometer clipping so

00:22:56,159 --> 00:22:59,200
basically

00:22:57,120 --> 00:23:00,400
clipping or asymmetric railing is a

00:22:59,200 --> 00:23:03,520
problem that you have

00:23:00,400 --> 00:23:05,760
on the z-axis so on the vertical axis of

00:23:03,520 --> 00:23:06,799
the accelerometer because of the gravity

00:23:05,760 --> 00:23:08,720
offset

00:23:06,799 --> 00:23:10,240
so the problem when you start you have a

00:23:08,720 --> 00:23:13,919
high vibration

00:23:10,240 --> 00:23:17,039
uh you have um clipping on both sides

00:23:13,919 --> 00:23:19,520
and the actual average value will have

00:23:17,039 --> 00:23:22,880
will be zero instead of one g

00:23:19,520 --> 00:23:26,400
so that will fool usually the navigation

00:23:22,880 --> 00:23:29,600
inertial solution of the estimator and

00:23:26,400 --> 00:23:33,280
as a result the vehicle will

00:23:29,600 --> 00:23:36,080
fly in the sky usually so we implement

00:23:33,280 --> 00:23:36,480
something to to detect that clipping and

00:23:36,080 --> 00:23:40,000
then

00:23:36,480 --> 00:23:43,200
to uh to constrain the estimator not to

00:23:40,000 --> 00:23:43,200
to drift because that

00:23:44,400 --> 00:23:48,880
so i take the next question the question

00:23:46,480 --> 00:23:50,720
is are acceleration set points available

00:23:48,880 --> 00:23:54,400
in the last stable version of

00:23:50,720 --> 00:23:56,960
version 1.10.1 and the answer

00:23:54,400 --> 00:23:58,480
is yes it's available for the interface

00:23:56,960 --> 00:24:01,440
of the flight task

00:23:58,480 --> 00:24:02,720
at the moment i think there is no flight

00:24:01,440 --> 00:24:06,000
task directly

00:24:02,720 --> 00:24:09,440
using it for other

00:24:06,000 --> 00:24:12,480
things than feed forward so the current

00:24:09,440 --> 00:24:15,600
mission and also stick

00:24:12,480 --> 00:24:19,360
mapped flight tasks for position mode

00:24:15,600 --> 00:24:21,360
use it as feet forward and it's used for

00:24:19,360 --> 00:24:22,720
certain specific things like vtol

00:24:21,360 --> 00:24:25,120
transition but there is

00:24:22,720 --> 00:24:26,320
nothing that takes advantage of the

00:24:25,120 --> 00:24:29,600
exclusive

00:24:26,320 --> 00:24:29,600
acceleration set point

00:24:29,679 --> 00:24:34,000
but that can be added at any time and

00:24:32,320 --> 00:24:37,039
will be added

00:24:34,000 --> 00:24:39,600
um the next question i take as well is

00:24:37,039 --> 00:24:41,520
there an up-to-date tutorial or summary

00:24:39,600 --> 00:24:42,720
that covers everything to create a new

00:24:41,520 --> 00:24:46,720
flight task

00:24:42,720 --> 00:24:50,159
if not can we expect one sometimes

00:24:46,720 --> 00:24:51,200
and i can say it's it's a bit of my

00:24:50,159 --> 00:24:53,039
fault because

00:24:51,200 --> 00:24:55,360
in the dev guide you will not find the

00:24:53,039 --> 00:24:58,000
content of last

00:24:55,360 --> 00:25:00,640
of last year's flight task talk except

00:24:58,000 --> 00:25:04,000
for the video of the last talk

00:25:00,640 --> 00:25:06,720
and i will still add the content

00:25:04,000 --> 00:25:07,200
so the graphs and the description yes

00:25:06,720 --> 00:25:09,440
and then

00:25:07,200 --> 00:25:10,240
we will also add the content of this

00:25:09,440 --> 00:25:14,240
talk

00:25:10,240 --> 00:25:17,120
such that you're able to look this up

00:25:14,240 --> 00:25:20,880
later on like the video will be

00:25:17,120 --> 00:25:20,880
available but also in the dev guide

00:25:22,799 --> 00:25:26,720
so the next question is will the plan

00:25:25,200 --> 00:25:29,039
for flight task structure

00:25:26,720 --> 00:25:31,600
improvement be implemented in version

00:25:29,039 --> 00:25:34,960
1.11 stable version

00:25:31,600 --> 00:25:37,760
and i would say that depends on what

00:25:34,960 --> 00:25:39,200
improvement like i named a lot of

00:25:37,760 --> 00:25:42,080
improvements

00:25:39,200 --> 00:25:43,840
six six possible ones and i think the

00:25:42,080 --> 00:25:46,320
first three ones were

00:25:43,840 --> 00:25:47,440
lower hanging fruits that will be done a

00:25:46,320 --> 00:25:50,720
lot earlier and

00:25:47,440 --> 00:25:53,600
can probably be expected for a next

00:25:50,720 --> 00:25:54,400
stable release but i cannot promise

00:25:53,600 --> 00:25:57,440
anything

00:25:54,400 --> 00:25:59,360
and the the ones on the bottom are

00:25:57,440 --> 00:26:03,919
more in depth and will probably take a

00:25:59,360 --> 00:26:03,919

YouTube URL: https://www.youtube.com/watch?v=orvng_11ngQ


