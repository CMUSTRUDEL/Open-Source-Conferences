Title: PX4 failsafe testing using MAVSDK â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-06
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	The PX4 Developer Summit is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd

Title: PX4 failsafe testing using MAVSDK

Summary: In order to ensure the safety and robustness of PX4 as it evolves, failsafe testing is critical.

This talk aims to give an overview of how failure can be triggered to test a certain failsafe response. I will be explaining the underlying architecture that enables this and shows how to do it using MAVSDK.

I also plan to hint at how this failsafe testing can be integrated as part of the PX4 continuous integration.

https://sched.co/cjOy
Captions: 
	00:00:06,240 --> 00:00:10,320
hi my name is julian earth

00:00:08,080 --> 00:00:11,280
i work for a terran in switzerland where

00:00:10,320 --> 00:00:14,880
i help maintain

00:00:11,280 --> 00:00:16,720
px4 and mav sdk today i want to talk

00:00:14,880 --> 00:00:19,680
about px4 failsafe testing

00:00:16,720 --> 00:00:19,680
using mem sdk

00:00:20,080 --> 00:00:24,240
failures can always happen but as px4 is

00:00:22,400 --> 00:00:27,359
maturing as a platform

00:00:24,240 --> 00:00:29,279
um as we're looking more more and more

00:00:27,359 --> 00:00:29,760
into beyond visual line of sight flights

00:00:29,279 --> 00:00:32,399
as

00:00:29,760 --> 00:00:32,880
some of the vehicles are getting heavier

00:00:32,399 --> 00:00:34,399
and

00:00:32,880 --> 00:00:36,000
as we're doing steps towards

00:00:34,399 --> 00:00:38,239
certification

00:00:36,000 --> 00:00:39,600
we absolutely need to make sure that

00:00:38,239 --> 00:00:42,840
failures are handled

00:00:39,600 --> 00:00:45,520
correctly consistently and also

00:00:42,840 --> 00:00:48,879
predictably

00:00:45,520 --> 00:00:51,760
the first step to get there is

00:00:48,879 --> 00:00:52,640
to actually be able to test the failsafe

00:00:51,760 --> 00:00:55,440
behavior

00:00:52,640 --> 00:00:56,399
once we have done tests in place we can

00:00:55,440 --> 00:01:00,160
add

00:00:56,399 --> 00:01:03,760
missing fail-safe functionality or fix

00:01:00,160 --> 00:01:05,760
existing ones and last but not least we

00:01:03,760 --> 00:01:08,320
also want to properly document the

00:01:05,760 --> 00:01:10,080
fail safes so that an operator knows

00:01:08,320 --> 00:01:13,360
exactly

00:01:10,080 --> 00:01:16,799
what they have to expect

00:01:13,360 --> 00:01:19,920
when a failure happens so

00:01:16,799 --> 00:01:22,320
in order to test fail-safes we

00:01:19,920 --> 00:01:23,280
first need to need a way to inject a

00:01:22,320 --> 00:01:25,520
failure

00:01:23,280 --> 00:01:27,280
and for this failure injection we have a

00:01:25,520 --> 00:01:30,159
couple of requirements

00:01:27,280 --> 00:01:31,439
first of all it should not just work for

00:01:30,159 --> 00:01:33,680
software in the loop

00:01:31,439 --> 00:01:35,200
but also for hardware in the loop so a

00:01:33,680 --> 00:01:36,159
bench setup like you can see it on the

00:01:35,200 --> 00:01:39,439
picture

00:01:36,159 --> 00:01:40,000
or realflight real testing the

00:01:39,439 --> 00:01:42,479
triggering

00:01:40,000 --> 00:01:44,640
of a failure needs to be possible to be

00:01:42,479 --> 00:01:47,600
done manually

00:01:44,640 --> 00:01:49,360
as well as automated for continuous

00:01:47,600 --> 00:01:52,640
integration

00:01:49,360 --> 00:01:55,520
and we should never ever

00:01:52,640 --> 00:01:56,640
trigger a failure in normal operation so

00:01:55,520 --> 00:02:00,320
so really that

00:01:56,640 --> 00:02:03,840
failure injection should be a completely

00:02:00,320 --> 00:02:07,280
separate and protected testing mode

00:02:03,840 --> 00:02:10,959
and not happen um while

00:02:07,280 --> 00:02:14,239
normal flight is taking place um

00:02:10,959 --> 00:02:16,720
so we came up with a

00:02:14,239 --> 00:02:18,560
solution and that's to use mavlink

00:02:16,720 --> 00:02:22,080
command

00:02:18,560 --> 00:02:23,840
um why that's because we already have

00:02:22,080 --> 00:02:24,800
the modeling interface for all of these

00:02:23,840 --> 00:02:28,000
cases we have

00:02:24,800 --> 00:02:31,200
we use maplink for certain hiddle

00:02:28,000 --> 00:02:31,680
and real flying and so that just makes

00:02:31,200 --> 00:02:34,840
sense

00:02:31,680 --> 00:02:37,840
and we can easily automate it using mod

00:02:34,840 --> 00:02:37,840
sdk

00:02:39,200 --> 00:02:44,560
in order to prevent accidental failure

00:02:42,000 --> 00:02:44,560
injection

00:02:44,879 --> 00:02:51,120
this will be protected by a parameter

00:02:47,920 --> 00:02:52,560
so without actually setting that

00:02:51,120 --> 00:02:55,680
parameter

00:02:52,560 --> 00:02:58,959
all injected failures won't work

00:02:55,680 --> 00:02:58,959
will just fall right off

00:03:00,640 --> 00:03:05,280
so what are these possible failures um

00:03:03,920 --> 00:03:08,319
for sure

00:03:05,280 --> 00:03:11,519
sensors are in there um but then

00:03:08,319 --> 00:03:12,800
also components that can fail like the

00:03:11,519 --> 00:03:16,159
battery

00:03:12,800 --> 00:03:20,239
motor servos etc or the link

00:03:16,159 --> 00:03:24,879
is a common one um sort of rc or matlin

00:03:20,239 --> 00:03:28,239
telemetry um

00:03:24,879 --> 00:03:32,080
when i talk about failure cases

00:03:28,239 --> 00:03:35,280
i mean the way in how a failure

00:03:32,080 --> 00:03:38,879
can happen so it can

00:03:35,280 --> 00:03:41,360
be just off or stuck or then the data

00:03:38,879 --> 00:03:45,200
can actually be bad

00:03:41,360 --> 00:03:47,680
ranging from garbage to some offset

00:03:45,200 --> 00:03:48,640
as well as a timing problem such as a

00:03:47,680 --> 00:03:51,680
slower data

00:03:48,640 --> 00:03:54,560
or delayed data

00:03:51,680 --> 00:03:54,560
being transmitted

00:03:55,519 --> 00:03:59,599
so how does this failure injection work

00:03:57,280 --> 00:04:02,239
via mould link

00:03:59,599 --> 00:04:02,239
basically

00:04:02,640 --> 00:04:06,799
a map flink command with the failure

00:04:05,840 --> 00:04:10,239
injection

00:04:06,799 --> 00:04:13,360
is sent um from the map

00:04:10,239 --> 00:04:14,720
from using leveling from mav sdk into

00:04:13,360 --> 00:04:17,919
the mavlink module

00:04:14,720 --> 00:04:19,919
of px4 there if the parameter for

00:04:17,919 --> 00:04:23,199
failure injection is not set

00:04:19,919 --> 00:04:26,479
it falls right off if it is set then it

00:04:23,199 --> 00:04:29,440
will be forwarded to whichever module

00:04:26,479 --> 00:04:31,199
is in charge of that sense value or

00:04:29,440 --> 00:04:34,960
actuator output

00:04:31,199 --> 00:04:38,880
and so the actual failure is

00:04:34,960 --> 00:04:42,240
simulated on the px4 side and not

00:04:38,880 --> 00:04:45,919
on a simulation side

00:04:42,240 --> 00:04:48,080
and the reason for that

00:04:45,919 --> 00:04:50,720
is that we also want to be able to use

00:04:48,080 --> 00:04:54,240
this for real flights where there is no

00:04:50,720 --> 00:04:54,240
simulator present obviously

00:04:55,759 --> 00:05:01,280
um once we put this into testing

00:04:58,560 --> 00:05:03,360
automation so into into ci

00:05:01,280 --> 00:05:05,919
the way it works is that we have a test

00:05:03,360 --> 00:05:08,320
runner the test runner spawns

00:05:05,919 --> 00:05:10,720
um everything needed so as usual for

00:05:08,320 --> 00:05:12,880
signal that's px4 and gazebo

00:05:10,720 --> 00:05:14,320
but then additionally it runs an

00:05:12,880 --> 00:05:17,520
executable

00:05:14,320 --> 00:05:18,000
based on my sdk which contains a test

00:05:17,520 --> 00:05:20,880
case

00:05:18,000 --> 00:05:23,600
and a test case in this case could be

00:05:20,880 --> 00:05:26,240
that it starts a flight

00:05:23,600 --> 00:05:27,199
emission or a manual flight and then at

00:05:26,240 --> 00:05:31,039
some point

00:05:27,199 --> 00:05:33,280
it injects a failure after that

00:05:31,039 --> 00:05:34,560
it just monitors the behavior of px4 it

00:05:33,280 --> 00:05:36,960
checks

00:05:34,560 --> 00:05:38,240
the flight profile it checks that px4

00:05:36,960 --> 00:05:41,280
does the right thing

00:05:38,240 --> 00:05:42,479
reacts accordingly to the failure at the

00:05:41,280 --> 00:05:44,479
end of one test case

00:05:42,479 --> 00:05:46,320
everything is torn down the locks are

00:05:44,479 --> 00:05:52,320
collected

00:05:46,320 --> 00:05:54,800
and the actual result is checked

00:05:52,320 --> 00:05:56,560
so current state is that the first

00:05:54,800 --> 00:05:59,440
version of the mavelink messages have

00:05:56,560 --> 00:06:02,160
been defined and that's merged

00:05:59,440 --> 00:06:02,960
and we have failure injection working

00:06:02,160 --> 00:06:05,360
using

00:06:02,960 --> 00:06:07,680
px4 internal system commands and that's

00:06:05,360 --> 00:06:10,000
currently in an open pull request

00:06:07,680 --> 00:06:12,560
and then we also have failure injection

00:06:10,000 --> 00:06:12,560
possible

00:06:13,199 --> 00:06:18,639
using med sdk that's also an open pull

00:06:16,240 --> 00:06:18,639
request

00:06:19,360 --> 00:06:23,360
and so now i want to show two examples

00:06:21,360 --> 00:06:25,039
first a manual failure injection and

00:06:23,360 --> 00:06:25,759
then an automated test with failure

00:06:25,039 --> 00:06:30,479
injection

00:06:25,759 --> 00:06:34,479
both times will just simulate the gps

00:06:30,479 --> 00:06:38,880
being lost

00:06:34,479 --> 00:06:42,080
so the first example is manual um

00:06:38,880 --> 00:06:44,160
so this is just normal single flight

00:06:42,080 --> 00:06:46,639
we're doing a take off from qground

00:06:44,160 --> 00:06:46,639
control

00:06:46,880 --> 00:06:50,000
it's taken off and now we want to

00:06:48,720 --> 00:06:52,160
simulate a failure

00:06:50,000 --> 00:06:53,520
um first thing that we have to do is

00:06:52,160 --> 00:06:56,560
actually enable

00:06:53,520 --> 00:06:57,919
failure injection so we do param set cis

00:06:56,560 --> 00:07:02,880
failure

00:06:57,919 --> 00:07:04,560
n one so that's enabled

00:07:02,880 --> 00:07:06,479
and now we do the actual failure

00:07:04,560 --> 00:07:09,840
injection so failure gps

00:07:06,479 --> 00:07:11,440
off that's done now

00:07:09,840 --> 00:07:14,000
and now it takes a couple of seconds for

00:07:11,440 --> 00:07:14,240
px4 to realize that gps really is gone

00:07:14,000 --> 00:07:16,319
and

00:07:14,240 --> 00:07:17,440
is not coming back and at that point it

00:07:16,319 --> 00:07:20,720
decides to go

00:07:17,440 --> 00:07:21,520
into blind land that's because we don't

00:07:20,720 --> 00:07:23,440
have a

00:07:21,520 --> 00:07:25,360
joystick connected so we can't take over

00:07:23,440 --> 00:07:26,160
manually so that's sort of the best it

00:07:25,360 --> 00:07:29,440
can do

00:07:26,160 --> 00:07:30,080
in this situation so now let's look at

00:07:29,440 --> 00:07:34,319
the same thing

00:07:30,080 --> 00:07:34,319
but as part of an automated test

00:07:38,319 --> 00:07:41,440
so here we are using the mav sdk test

00:07:40,639 --> 00:07:44,960
runner

00:07:41,440 --> 00:07:49,280
we are running one case

00:07:44,960 --> 00:07:53,039
which is land on gps lost during mission

00:07:49,280 --> 00:07:53,039
and let's just do that for iris again

00:07:56,240 --> 00:07:59,840
so what's happening is that a mission

00:07:58,639 --> 00:08:02,080
has been

00:07:59,840 --> 00:08:04,000
or first of all gazebo has been started

00:08:02,080 --> 00:08:08,160
px4 has been started then a mission

00:08:04,000 --> 00:08:11,520
is uploaded to px4 and started

00:08:08,160 --> 00:08:14,639
and now at once waypoint one is reached

00:08:11,520 --> 00:08:16,080
they inject the failure so

00:08:14,639 --> 00:08:18,479
again it takes a couple of seconds now

00:08:16,080 --> 00:08:20,720
it realized okay gps is not coming back

00:08:18,479 --> 00:08:22,479
and it gave up and it again does a blind

00:08:20,720 --> 00:08:26,000
line

00:08:22,479 --> 00:08:28,160
and using fsdk we're now checking

00:08:26,000 --> 00:08:29,120
what is it actually doing um is it

00:08:28,160 --> 00:08:32,159
actually landing

00:08:29,120 --> 00:08:34,880
is it detecting

00:08:32,159 --> 00:08:41,360
having landed and then disarming and it

00:08:34,880 --> 00:08:43,519
did all of that so that's a pass

00:08:41,360 --> 00:08:44,880
so i want to talk a bit about first

00:08:43,519 --> 00:08:47,040
results while

00:08:44,880 --> 00:08:49,920
working on this pull request we actually

00:08:47,040 --> 00:08:52,560
already found a recent regression

00:08:49,920 --> 00:08:56,240
um luckily this was only in master a

00:08:52,560 --> 00:08:56,240
couple of weeks so

00:08:56,399 --> 00:09:02,399
it was uh lucky to to find it already

00:09:00,000 --> 00:09:03,920
and that's exactly the sort of thing the

00:09:02,399 --> 00:09:05,040
sort of regression that we want to

00:09:03,920 --> 00:09:07,440
prevent

00:09:05,040 --> 00:09:09,360
in this case what happened was that if

00:09:07,440 --> 00:09:11,760
gps was lost

00:09:09,360 --> 00:09:14,320
during position control instead of

00:09:11,760 --> 00:09:16,720
switching back to altitude control

00:09:14,320 --> 00:09:18,480
it would just land going to blind land

00:09:16,720 --> 00:09:20,839
and the pilot had no influence

00:09:18,480 --> 00:09:24,080
whatsoever

00:09:20,839 --> 00:09:27,279
and while working on this photographs

00:09:24,080 --> 00:09:30,480
we also found a couple of other issues

00:09:27,279 --> 00:09:33,519
um less severe than this one

00:09:30,480 --> 00:09:37,120
but nevertheless things we need to

00:09:33,519 --> 00:09:41,440
look into and as we go we will find

00:09:37,120 --> 00:09:41,440
presumably more issues as we as we go

00:09:41,680 --> 00:09:46,160
so what's the future of failsafe testing

00:09:44,240 --> 00:09:47,519
we need to expand the test coverage for

00:09:46,160 --> 00:09:49,279
sure

00:09:47,519 --> 00:09:51,760
so we need to add vtol and fixed-wing

00:09:49,279 --> 00:09:54,720
test right now it's all multi-copter

00:09:51,760 --> 00:09:55,519
we need to add more failure units so we

00:09:54,720 --> 00:09:58,399
need to test

00:09:55,519 --> 00:09:58,800
more of the component failing and also

00:09:58,399 --> 00:10:02,720
the

00:09:58,800 --> 00:10:02,720
cases so we need to

00:10:02,839 --> 00:10:09,600
um add various checks so not just off

00:10:06,720 --> 00:10:11,120
or stuck but also intermittent failures

00:10:09,600 --> 00:10:13,920
or

00:10:11,120 --> 00:10:16,560
subtle errors like small offsets in

00:10:13,920 --> 00:10:19,600
sensor values etc

00:10:16,560 --> 00:10:20,560
and then eventually we can also start

00:10:19,600 --> 00:10:24,320
testing

00:10:20,560 --> 00:10:27,600
combined failures which

00:10:24,320 --> 00:10:30,640
might be quite tricky to react

00:10:27,600 --> 00:10:30,640
appropriately to them

00:10:30,880 --> 00:10:34,480
then we want to generalize those tests

00:10:32,640 --> 00:10:37,360
which are just um

00:10:34,480 --> 00:10:38,640
running for civil right now to hitler

00:10:37,360 --> 00:10:42,160
and real world

00:10:38,640 --> 00:10:43,760
tests um the plumbing is already there

00:10:42,160 --> 00:10:46,320
it just sort of needs to needs to be

00:10:43,760 --> 00:10:48,160
enabled and then in general we always

00:10:46,320 --> 00:10:48,720
want to improve the testing robustness

00:10:48,160 --> 00:10:51,680
so

00:10:48,720 --> 00:10:53,839
you can improve the the actual checks um

00:10:51,680 --> 00:10:56,320
we could add log analysis

00:10:53,839 --> 00:10:57,200
and always we need to make sure to

00:10:56,320 --> 00:11:00,399
reduce the

00:10:57,200 --> 00:11:04,079
false positives to prevent

00:11:00,399 --> 00:11:06,480
um ci from from failing um

00:11:04,079 --> 00:11:08,720
a test when actually everything was was

00:11:06,480 --> 00:11:08,720
fine

00:11:08,800 --> 00:11:14,640
and with that i conclude my my talk

00:11:12,000 --> 00:11:17,279
thanks a lot um i'm looking forward to

00:11:14,640 --> 00:11:23,680
comments questions and contributions

00:11:17,279 --> 00:11:23,680

YouTube URL: https://www.youtube.com/watch?v=guH0CcgBnMc


