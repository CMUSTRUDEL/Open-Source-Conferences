Title: PX4 State Estimation 2021 Update â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-07
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	The PX4 Developer Summit is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd

Title: PX4 State Estimation 2021 Update

Summary: The talk will be a status and summary progress report on changes made to the PX4 navigation state estimator since the last conference. It will contain a description of the new yaw estimator algorithm that has enabled operation without a magnetomer or external yaw sensor, and enabled automatic recovery from loss of navigation due to bad magnetometer or yaw sensor data.

https://sched.co/cjOv
Captions: 
	00:00:04,640 --> 00:00:11,280
hello I'm Paul Roseboro I'm one of the

00:00:08,880 --> 00:00:15,509
maintain is for the px4 estimation

00:00:11,280 --> 00:00:17,699
library this presentation will cover the

00:00:15,509 --> 00:00:21,689
changes that we've made in the past 12

00:00:17,699 --> 00:00:24,539
months I'll do some more detail into the

00:00:21,689 --> 00:00:27,680
your estimator work and how to set it up

00:00:24,539 --> 00:00:31,260
for operation without a magnetometer and

00:00:27,680 --> 00:00:33,930
we will then finish with a very short

00:00:31,260 --> 00:00:45,930
discussion of the priority areas for

00:00:33,930 --> 00:00:49,289
development in the next 12 months the

00:00:45,930 --> 00:00:52,379
estimation library is a complex piece of

00:00:49,289 --> 00:00:55,500
code its flight critical it uses

00:00:52,379 --> 00:01:00,930
inertial navigation Theory estimation

00:00:55,500 --> 00:01:07,400
theory and it has a significant number

00:01:00,930 --> 00:01:10,530
of developers the estimation library

00:01:07,400 --> 00:01:12,540
goes back to the some original extended

00:01:10,530 --> 00:01:18,570
Kalman filter work that was performed

00:01:12,540 --> 00:01:22,790
back in 2014 on the project and it's

00:01:18,570 --> 00:01:22,790
been through several iterations since

00:01:24,439 --> 00:01:29,460
this slide is a top-level view of the

00:01:27,570 --> 00:01:31,110
architecture this has been covered in

00:01:29,460 --> 00:01:37,439
more detail in our last year's

00:01:31,110 --> 00:01:40,920
presentation the IMU data is the key

00:01:37,439 --> 00:01:42,960
piece of data in the estimator it

00:01:40,920 --> 00:01:46,229
provides the prediction for the extended

00:01:42,960 --> 00:01:49,680
Kalman filter and also the prediction

00:01:46,229 --> 00:01:52,439
for the output predictor the output

00:01:49,680 --> 00:01:56,549
predictor uses the latest time new data

00:01:52,439 --> 00:01:58,560
and provides a low latency solution for

00:01:56,549 --> 00:02:00,600
the kinematic in states the kinematic

00:01:58,560 --> 00:02:03,090
States being the attitude the velocity

00:02:00,600 --> 00:02:05,520
and the position the extended Kalman

00:02:03,090 --> 00:02:08,459
filter algorithm runs on a delayed time

00:02:05,520 --> 00:02:10,860
horizon so that it can bring data

00:02:08,459 --> 00:02:12,660
together with different time delays at

00:02:10,860 --> 00:02:15,140
different data rates different times of

00:02:12,660 --> 00:02:15,140
arrival

00:02:17,569 --> 00:02:24,329
the amount of work in the past 12 months

00:02:21,209 --> 00:02:27,120
has increased significantly we merged

00:02:24,329 --> 00:02:30,239
over 120 pour requests since the last

00:02:27,120 --> 00:02:32,069
conference and it's been split mostly

00:02:30,239 --> 00:02:35,750
between 1/3 for functionality and

00:02:32,069 --> 00:02:39,560
performance 1/3 for bug fixing and

00:02:35,750 --> 00:02:42,919
testing and then 1/3 for improvements to

00:02:39,560 --> 00:02:52,319
code style readability maintainability

00:02:42,919 --> 00:02:53,760
what we call housekeeping changes if we

00:02:52,319 --> 00:02:56,549
have a look at some of the more

00:02:53,760 --> 00:03:01,260
significant functional enhancements that

00:02:56,549 --> 00:03:04,919
have been made the first was an

00:03:01,260 --> 00:03:07,590
initiative that commenced

00:03:04,919 --> 00:03:10,109
well back in 2018 with the original 3

00:03:07,590 --> 00:03:15,329
degree of freedom development and that's

00:03:10,109 --> 00:03:18,449
to develop a your estimator that is able

00:03:15,329 --> 00:03:21,959
to use IMU data and GPS velocity data to

00:03:18,449 --> 00:03:24,229
estimate your angle and with no reliance

00:03:21,959 --> 00:03:28,019
on an external on your sensor or

00:03:24,229 --> 00:03:30,359
magnetometer and this has enabled us to

00:03:28,019 --> 00:03:33,359
automatically correct for your if we

00:03:30,359 --> 00:03:37,139
have a loss of navigation post takeoff

00:03:33,359 --> 00:03:40,489
and to correct before the commander

00:03:37,139 --> 00:03:42,840
failsafe activates it also enables a

00:03:40,489 --> 00:03:44,790
limited operation without a magnetometer

00:03:42,840 --> 00:03:47,009
but does require that the initial

00:03:44,790 --> 00:03:50,780
takeoff and horizontal movement be

00:03:47,009 --> 00:03:53,280
performed in a non position control mode

00:03:50,780 --> 00:03:57,989
they've been other changes to improve

00:03:53,280 --> 00:04:00,359
robustness one significant change has

00:03:57,989 --> 00:04:02,340
been the ability to compensate for

00:04:00,359 --> 00:04:04,620
accelerometer clipping by increasing the

00:04:02,340 --> 00:04:08,790
process noise that's been an over by

00:04:04,620 --> 00:04:10,859
changes to the IMU drivers that gives us

00:04:08,790 --> 00:04:14,759
direct access to the high frequency

00:04:10,859 --> 00:04:16,769
sample data within the Emir's we've also

00:04:14,759 --> 00:04:20,310
improved the detection and the ability

00:04:16,769 --> 00:04:22,260
to reject bad magnetometer data and I

00:04:20,310 --> 00:04:26,310
would recommend that you have a look at

00:04:22,260 --> 00:04:26,850
those pull requests if you're interested

00:04:26,310 --> 00:04:31,350
in the

00:04:26,850 --> 00:04:36,780
synthetic said access method which

00:04:31,350 --> 00:04:40,170
enables platforms with corrupted z-axis

00:04:36,780 --> 00:04:44,250
magnetometer data to replace that with

00:04:40,170 --> 00:04:47,310
synthesized data we also have the

00:04:44,250 --> 00:04:50,160
ability to reject magnetometer data if

00:04:47,310 --> 00:04:52,860
the length of the field exceeds the

00:04:50,160 --> 00:04:59,880
limits that we would expect based on the

00:04:52,860 --> 00:05:01,440
world magnetic model table improvement

00:04:59,880 --> 00:05:04,490
for external vision based navigation

00:05:01,440 --> 00:05:07,670
sources has been significantly improved

00:05:04,490 --> 00:05:12,170
that started with some better

00:05:07,670 --> 00:05:16,800
Diagnostics logging we're now able to

00:05:12,170 --> 00:05:18,780
individually inspect the innovations and

00:05:16,800 --> 00:05:21,570
the innovation variances for the

00:05:18,780 --> 00:05:23,760
individual components so we can

00:05:21,570 --> 00:05:25,890
distinguish in a log the innovations

00:05:23,760 --> 00:05:28,290
from the GPS from the innovations that

00:05:25,890 --> 00:05:31,470
have resulted from the external vision

00:05:28,290 --> 00:05:33,810
system there's also been addition of

00:05:31,470 --> 00:05:36,180
support for velocity data from an

00:05:33,810 --> 00:05:39,560
external vision system and use of the

00:05:36,180 --> 00:05:43,770
full covariance matrix that that

00:05:39,560 --> 00:05:46,740
accompanies the vision based state

00:05:43,770 --> 00:05:49,590
estimates the rangefinder and optical

00:05:46,740 --> 00:05:52,350
flow ear such improvements have focused

00:05:49,590 --> 00:05:56,090
on improving the transition period from

00:05:52,350 --> 00:05:58,980
on grounds we in air and accommodating

00:05:56,090 --> 00:06:03,830
rangefinders that produce invalid data

00:05:58,980 --> 00:06:03,830
at when they're close to the ground

00:06:05,300 --> 00:06:09,960
we've added unit testing using the

00:06:08,100 --> 00:06:12,660
Google G test library we have over 50

00:06:09,960 --> 00:06:15,690
tests implemented to date they're being

00:06:12,660 --> 00:06:21,750
developed and added with each pull

00:06:15,690 --> 00:06:25,110
request for new features and also

00:06:21,750 --> 00:06:28,230
importantly the ability to run automatic

00:06:25,110 --> 00:06:30,420
reversion testing using replayed sensor

00:06:28,230 --> 00:06:33,720
data this is important because we have a

00:06:30,420 --> 00:06:37,860
significant number of pull requests that

00:06:33,720 --> 00:06:40,770
are refactoring or non-functional

00:06:37,860 --> 00:06:44,990
changes and what the reversion test and

00:06:40,770 --> 00:06:47,699
ables us to check is that these types of

00:06:44,990 --> 00:06:50,610
requests pull requests don't result in

00:06:47,699 --> 00:06:54,060
unintended changes in the state

00:06:50,610 --> 00:06:55,530
estimation and we encourage developers

00:06:54,060 --> 00:06:57,000
to split their poor request into

00:06:55,530 --> 00:06:59,789
functional versus non functional

00:06:57,000 --> 00:07:04,819
components because that maximizes the

00:06:59,789 --> 00:07:08,970
usage of this reversion testing facility

00:07:04,819 --> 00:07:14,389
the your alignment work was initialized

00:07:08,970 --> 00:07:17,430
back in 2018 and it was a an R&D task

00:07:14,389 --> 00:07:19,169
conducted using simplified three degree

00:07:17,430 --> 00:07:21,960
freedom models to determine if there was

00:07:19,169 --> 00:07:25,970
a some estimator structure that would

00:07:21,960 --> 00:07:28,349
enable us to with low computational cost

00:07:25,970 --> 00:07:29,880
robustly estimate you're using a

00:07:28,349 --> 00:07:31,800
velocity aiding technique that is a

00:07:29,880 --> 00:07:34,680
technique that uses inertial data and

00:07:31,800 --> 00:07:38,669
uses an external northeast reference

00:07:34,680 --> 00:07:41,099
frame velocity data that work concluded

00:07:38,669 --> 00:07:43,020
that a combination of a bank of extended

00:07:41,099 --> 00:07:45,380
kalman filters feeding into a gaussian

00:07:43,020 --> 00:07:52,289
some filter provided the best

00:07:45,380 --> 00:07:56,159
performance cost trade-off we have here

00:07:52,289 --> 00:08:00,000
a very high-level description because

00:07:56,159 --> 00:08:03,599
the IMU produces three axis data you

00:08:00,000 --> 00:08:05,639
know three accelerometers three gyros

00:08:03,599 --> 00:08:08,250
and the motion of the vehicle is you

00:08:05,639 --> 00:08:11,130
know six degrees of freedom we have to

00:08:08,250 --> 00:08:14,000
use a bank of 5 hrs solutions that use

00:08:11,130 --> 00:08:17,250
complimentary filters and these take the

00:08:14,000 --> 00:08:20,759
three exercise ro and accelerometer data

00:08:17,250 --> 00:08:22,500
and convert it into go from six degrees

00:08:20,759 --> 00:08:24,419
of freedom to 3 degrees of freedom of

00:08:22,500 --> 00:08:28,139
initial data which is seen used by the

00:08:24,419 --> 00:08:31,020
bank of extended Kalman filters the

00:08:28,139 --> 00:08:36,180
Kalman filters their output is then

00:08:31,020 --> 00:08:39,479
combined I guess in some filter this

00:08:36,180 --> 00:08:42,180
shows the the processing flow and you

00:08:39,479 --> 00:08:43,950
can see that the data paths are

00:08:42,180 --> 00:08:46,350
independent up to the Gaussian Sun

00:08:43,950 --> 00:08:48,630
filter now which one of these IRS and

00:08:46,350 --> 00:08:51,149
extended Kalman filter Bank starts with

00:08:48,630 --> 00:08:54,690
a different your hypothesis we start

00:08:51,149 --> 00:08:57,510
initially at the when the vehicle arms

00:08:54,690 --> 00:09:00,150
before it starts to move we initialize

00:08:57,510 --> 00:09:01,800
them 72 degrees apart with the

00:09:00,150 --> 00:09:03,390
assumption that we have no prior

00:09:01,800 --> 00:09:05,670
information about the your angle and

00:09:03,390 --> 00:09:13,380
then as the vehicle moves the estimates

00:09:05,670 --> 00:09:15,720
converge this features now available in

00:09:13,380 --> 00:09:19,050
pics for firmware master it will be part

00:09:15,720 --> 00:09:21,180
of the next stable release and of course

00:09:19,050 --> 00:09:23,460
as has been mentioned before we get

00:09:21,180 --> 00:09:25,890
automatic recovery from bad magnetic yaw

00:09:23,460 --> 00:09:28,290
we also have the ability to operate

00:09:25,890 --> 00:09:32,040
without a magnetometer form a horizontal

00:09:28,290 --> 00:09:35,870
position or velocity change to align the

00:09:32,040 --> 00:09:40,340
your and then commence normal navigation

00:09:35,870 --> 00:09:43,860
the work has been funded thanks to

00:09:40,340 --> 00:09:45,660
winter and or Tyrion and they enabled

00:09:43,860 --> 00:09:48,780
this original development work to be

00:09:45,660 --> 00:09:51,240
taken into a six degree freedom

00:09:48,780 --> 00:09:58,890
prototype followed by coding for the

00:09:51,240 --> 00:10:01,260
peaks for SEO library flight testing to

00:09:58,890 --> 00:10:03,480
date has been limited to multicopters

00:10:01,260 --> 00:10:05,880
and VTOL there's been settled testing of

00:10:03,480 --> 00:10:09,180
fixed-wing additionally and the two

00:10:05,880 --> 00:10:13,440
types of testing are firstly take off

00:10:09,180 --> 00:10:17,070
with the with a compass error of up to

00:10:13,440 --> 00:10:19,520
180 degrees to initiate initiate a loss

00:10:17,070 --> 00:10:21,960
of navigation Flyway and that testing is

00:10:19,520 --> 00:10:25,560
demonstrated that the navigation is able

00:10:21,960 --> 00:10:27,570
to be reset position control recovered

00:10:25,560 --> 00:10:31,740
before the commander failsafe activates

00:10:27,570 --> 00:10:33,330
and we've also tested takeoff in

00:10:31,740 --> 00:10:35,100
altitude control mode with some

00:10:33,330 --> 00:10:36,980
horizontal position changes and then a

00:10:35,100 --> 00:10:40,440
switch to a position control mode and

00:10:36,980 --> 00:10:42,420
winter have performed testing using one

00:10:40,440 --> 00:10:46,140
of their test their flight test

00:10:42,420 --> 00:10:49,290
platforms and have kindly provided a

00:10:46,140 --> 00:10:51,510
video of one of their tests and this

00:10:49,290 --> 00:10:54,420
shows a vertical takeoff with a hundred

00:10:51,510 --> 00:10:57,990
and eighty degrees of compass error with

00:10:54,420 --> 00:11:01,500
a subsequent start of Flyway navigation

00:10:57,990 --> 00:11:03,740
recovery and then continuation of normal

00:11:01,500 --> 00:11:03,740
flight

00:11:07,340 --> 00:11:10,489
[Music]

00:11:11,450 --> 00:11:23,280
that's the recovery and then transitions

00:11:17,370 --> 00:11:26,030
into the fixed-wing part of flight CPU

00:11:23,280 --> 00:11:29,340
load measurements for this estimator

00:11:26,030 --> 00:11:35,060
show that we're consuming less than 1%

00:11:29,340 --> 00:11:38,430
of CPU on stm32f4 we haven't conducted

00:11:35,060 --> 00:11:40,170
profiling measurements on the f7 we

00:11:38,430 --> 00:11:49,050
would expect that to be a significantly

00:11:40,170 --> 00:11:51,000
lower if we inspect the output from one

00:11:49,050 --> 00:11:54,240
of the multicopter tests we can see in

00:11:51,000 --> 00:11:57,330
the first graph the individual your

00:11:54,240 --> 00:11:59,460
estimates and this is a vehicle that

00:11:57,330 --> 00:12:01,410
arms performs a vertical take-off with

00:11:59,460 --> 00:12:03,390
minimal horizontal movement you can see

00:12:01,410 --> 00:12:07,110
here with the GPS velocities on the on

00:12:03,390 --> 00:12:11,240
the bottom graph but even with a little

00:12:07,110 --> 00:12:13,290
bit of horizontal movement there's still

00:12:11,240 --> 00:12:16,080
convergence of the weights for the

00:12:13,290 --> 00:12:18,090
Gaussian sunfilter a reduction in the

00:12:16,080 --> 00:12:21,470
estimated variance is seen by this black

00:12:18,090 --> 00:12:26,030
line which stabilizes at about 0.5

00:12:21,470 --> 00:12:28,440
radians squared and as soon as the

00:12:26,030 --> 00:12:31,200
copter pitches forward and starts to

00:12:28,440 --> 00:12:33,410
accelerate there's a rapid you know in

00:12:31,200 --> 00:12:36,450
less than half a second it takes to

00:12:33,410 --> 00:12:43,800
converge to your estimate that enables

00:12:36,450 --> 00:12:45,780
the reset of the main filter it should

00:12:43,800 --> 00:12:47,850
be noted that the horizontal velocity

00:12:45,780 --> 00:12:54,660
change does need to be greater than the

00:12:47,850 --> 00:12:58,800
uncertainty in the GPS velocity for

00:12:54,660 --> 00:13:00,840
future work we intend to continue to

00:12:58,800 --> 00:13:05,480
prioritize those items that will improve

00:13:00,840 --> 00:13:10,260
tolerance to sensor faults we and that

00:13:05,480 --> 00:13:13,680
will include further work to support a

00:13:10,260 --> 00:13:15,030
multi-lane architecture which the f7

00:13:13,680 --> 00:13:19,640
processor will provide us with

00:13:15,030 --> 00:13:19,640
sufficient overhead for and

00:13:19,880 --> 00:13:25,800
the also expansion of the ability to

00:13:23,130 --> 00:13:27,810
handle a combination of sensors to

00:13:25,800 --> 00:13:31,520
expand the envelope of non GPS

00:13:27,810 --> 00:13:35,150
navigation is also important as is

00:13:31,520 --> 00:13:37,980
continuation in test coverage

00:13:35,150 --> 00:13:39,960
improvements thank you for your

00:13:37,980 --> 00:13:43,100
attention and I look forward to

00:13:39,960 --> 00:13:43,100

YouTube URL: https://www.youtube.com/watch?v=CwehBx2hJcg


