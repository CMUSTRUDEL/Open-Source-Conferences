Title: Extending MAVSDK with new features â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-19
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	Title: Extending MAVSDK with new features

Presenter: Jonas Vautherin, Software Engineer @ Auterion

Summary: This session will explain how proto definitions and auto-generation can be leveraged to extend MAVSDK. Either by adding a MAVLink message to an existing plugin or by creating a new plugin completely. The demo will show that the logic has to be written only once in C++ and that it is then propagated to the language bindings through auto-generation. It will also explain that this is independent of MAVLink, and could be used to leverage other interfaces (e.g. a REST interface to a web server).

The PX4 Developer Summit is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd
Captions: 
	00:00:00,399 --> 00:00:03,600
hey everyone we're back at the px world

00:00:01,920 --> 00:00:05,359
developer summit i'm your host ramon

00:00:03,600 --> 00:00:06,560
roche i'm really happy to be here i have

00:00:05,359 --> 00:00:08,720
janas on the line

00:00:06,560 --> 00:00:10,320
janelle's bathroom is colony from low

00:00:08,720 --> 00:00:11,360
science switzerland he's the software

00:00:10,320 --> 00:00:13,840
engineer at altering

00:00:11,360 --> 00:00:15,440
and a map sdk maintainer he's a computer

00:00:13,840 --> 00:00:17,279
scientist from epfl

00:00:15,440 --> 00:00:19,039
and has been involved in creating

00:00:17,279 --> 00:00:21,119
mission control apps and developer tools

00:00:19,039 --> 00:00:23,199
since 2014.

00:00:21,119 --> 00:00:24,160
um he's a repeat speaker of the dev

00:00:23,199 --> 00:00:26,480
summit he spoke

00:00:24,160 --> 00:00:28,480
at the first one at the adhd last year

00:00:26,480 --> 00:00:30,080
john has did a workshop on how to use

00:00:28,480 --> 00:00:32,880
map sdk

00:00:30,080 --> 00:00:33,440
this session today is going to explain

00:00:32,880 --> 00:00:35,280
how

00:00:33,440 --> 00:00:37,440
photo definitions and auto generation

00:00:35,280 --> 00:00:39,600
can be leveraged to extend map sdk

00:00:37,440 --> 00:00:41,440
this is a huge topic guys this is one of

00:00:39,600 --> 00:00:43,680
the main benefits out of the map sdk i'm

00:00:41,440 --> 00:00:46,480
really excited to have you here janas

00:00:43,680 --> 00:00:46,480
please take it away

00:00:48,079 --> 00:00:54,239
hi everybody thanks for being here

00:00:51,680 --> 00:00:54,960
and welcome to to the dev summit my name

00:00:54,239 --> 00:00:57,600
is

00:00:54,960 --> 00:00:58,320
jonas voteran i am working for italian

00:00:57,600 --> 00:01:00,079
and in

00:00:58,320 --> 00:01:02,320
this session i will be trying to give

00:01:00,079 --> 00:01:03,120
you a feel of what it takes to extend my

00:01:02,320 --> 00:01:06,159
sdk with

00:01:03,120 --> 00:01:08,799
new features because

00:01:06,159 --> 00:01:10,880
20 minutes is so short i will not be

00:01:08,799 --> 00:01:13,119
starting from zero and i will go

00:01:10,880 --> 00:01:14,720
pretty fast so i'm assuming that you

00:01:13,119 --> 00:01:17,759
have some familiarity with

00:01:14,720 --> 00:01:20,799
mavlink and mav sdk

00:01:17,759 --> 00:01:22,080
um and and what i will be doing is um i

00:01:20,799 --> 00:01:24,159
selected a

00:01:22,080 --> 00:01:26,000
feature that i want to implement into

00:01:24,159 --> 00:01:29,040
sdk and i will be showing you how how

00:01:26,000 --> 00:01:29,680
i do that before i start i still wanted

00:01:29,040 --> 00:01:31,920
to go

00:01:29,680 --> 00:01:33,280
through a quick overview of what mavezik

00:01:31,920 --> 00:01:35,840
is

00:01:33,280 --> 00:01:37,600
so at the lowest level mavsdk is a c

00:01:35,840 --> 00:01:40,000
plus plus library

00:01:37,600 --> 00:01:41,520
it has very few dependencies on its

00:01:40,000 --> 00:01:43,840
lightweight

00:01:41,520 --> 00:01:46,079
and we and we made it such that we can

00:01:43,840 --> 00:01:48,960
run it on as many devices as we

00:01:46,079 --> 00:01:49,680
as we need be its companion computers

00:01:48,960 --> 00:01:53,200
android or

00:01:49,680 --> 00:01:55,360
ios devices or whatever ground station

00:01:53,200 --> 00:01:57,680
we can imagine

00:01:55,360 --> 00:01:58,799
everything that one may need to talk

00:01:57,680 --> 00:02:02,479
marveling to a drone

00:01:58,799 --> 00:02:04,079
is inside maverick ac plus plus so

00:02:02,479 --> 00:02:06,240
what that means is that if you want to

00:02:04,079 --> 00:02:09,200
write a c plus plus program

00:02:06,240 --> 00:02:10,640
using mavsdk this is all you need

00:02:09,200 --> 00:02:12,720
nothing more

00:02:10,640 --> 00:02:14,480
now if you want to use another language

00:02:12,720 --> 00:02:16,160
one of the language bindings we support

00:02:14,480 --> 00:02:19,360
it's a bit different

00:02:16,160 --> 00:02:22,080
so if we go one level higher we have my

00:02:19,360 --> 00:02:23,840
sdk server on top of my sdkc plus plus

00:02:22,080 --> 00:02:25,280
and that guy is there to make the link

00:02:23,840 --> 00:02:27,920
to

00:02:25,280 --> 00:02:29,599
the language bindings we have so my vdk

00:02:27,920 --> 00:02:32,480
server is an executable

00:02:29,599 --> 00:02:33,599
that uses mavsdkc plus plus internally

00:02:32,480 --> 00:02:36,000
and that exposes

00:02:33,599 --> 00:02:38,239
a grpc interface to the language

00:02:36,000 --> 00:02:40,879
bindings

00:02:38,239 --> 00:02:42,720
i will be focusing on adding a new

00:02:40,879 --> 00:02:44,560
feature to my sdkc plus plus and showing

00:02:42,720 --> 00:02:45,519
you how it propagates to movistky python

00:02:44,560 --> 00:02:47,840
but it's the same

00:02:45,519 --> 00:02:48,840
thing for all of the other language

00:02:47,840 --> 00:02:52,080
bindings

00:02:48,840 --> 00:02:54,080
actually most of this is auto generated

00:02:52,080 --> 00:02:55,519
all the language bindings all of

00:02:54,080 --> 00:02:58,959
maverick server

00:02:55,519 --> 00:03:00,560
and the header files of my vdc plus plus

00:02:58,959 --> 00:03:02,560
so when you want to add a new feature

00:03:00,560 --> 00:03:03,680
what you have to do is define it into a

00:03:02,560 --> 00:03:06,159
profile

00:03:03,680 --> 00:03:07,360
generate the code and then implement the

00:03:06,159 --> 00:03:10,800
mavlink logic

00:03:07,360 --> 00:03:12,720
here and

00:03:10,800 --> 00:03:14,879
that's it for the introduction so let me

00:03:12,720 --> 00:03:19,440
directly go into a demo

00:03:14,879 --> 00:03:21,200
as i said i have chosen um

00:03:19,440 --> 00:03:22,560
a feature that i want to implement and

00:03:21,200 --> 00:03:24,879
that is not yet into

00:03:22,560 --> 00:03:26,159
my sdk so that will be this one uh do

00:03:24,879 --> 00:03:28,640
flight termination

00:03:26,159 --> 00:03:29,280
what this does is it disarms the drone

00:03:28,640 --> 00:03:31,519
and

00:03:29,280 --> 00:03:34,640
on px4 it should open a parachute if you

00:03:31,519 --> 00:03:34,640
if you have it configured

00:03:34,879 --> 00:03:41,120
um okay so

00:03:38,159 --> 00:03:42,000
here i've got a terminal and it's

00:03:41,120 --> 00:03:45,120
located into

00:03:42,000 --> 00:03:48,000
my sdk repository

00:03:45,120 --> 00:03:48,799
uh just to show you it's a git um it's

00:03:48,000 --> 00:03:51,519
the git

00:03:48,799 --> 00:03:53,280
repo uh my basically repo so what you

00:03:51,519 --> 00:03:56,239
need to do if you want to

00:03:53,280 --> 00:03:56,720
um to generate code first you need to be

00:03:56,239 --> 00:03:59,760
able to

00:03:56,720 --> 00:04:00,080
to um to compile mvck so i already did

00:03:59,760 --> 00:04:02,560
it

00:04:00,080 --> 00:04:04,080
so here i'm just running running it

00:04:02,560 --> 00:04:06,480
again

00:04:04,080 --> 00:04:07,760
and that's that's working on my setup

00:04:06,480 --> 00:04:10,879
then the second thing you need

00:04:07,760 --> 00:04:13,040
is to be able to run

00:04:10,879 --> 00:04:15,360
the protofi generator and that's a

00:04:13,040 --> 00:04:15,920
script we have so it's in tools and it's

00:04:15,360 --> 00:04:18,959
called

00:04:15,920 --> 00:04:19,519
generate from photos so if i just run

00:04:18,959 --> 00:04:22,320
that

00:04:19,519 --> 00:04:22,960
um it's now failing and that's on

00:04:22,320 --> 00:04:25,040
purpose

00:04:22,960 --> 00:04:26,160
um because it has one dependency this

00:04:25,040 --> 00:04:30,160
dependency is this

00:04:26,160 --> 00:04:31,840
protocol sdk and

00:04:30,160 --> 00:04:33,759
uh so i need to install that but the

00:04:31,840 --> 00:04:34,880
good news is that it's available on pipe

00:04:33,759 --> 00:04:38,160
i so you can just

00:04:34,880 --> 00:04:41,520
run pip install it so let me do that

00:04:38,160 --> 00:04:42,400
i like working with python vn but you

00:04:41,520 --> 00:04:46,400
don't have to

00:04:42,400 --> 00:04:49,759
i will just be doing it here

00:04:46,400 --> 00:04:53,120
and now i can pip install protoc

00:04:49,759 --> 00:04:53,120
gen mavsdk

00:04:53,199 --> 00:04:56,800
so this is necessary to generate all the

00:04:55,360 --> 00:04:58,560
plugins all the

00:04:56,800 --> 00:05:01,280
all the code for all the language

00:04:58,560 --> 00:05:03,039
bindings and everything

00:05:01,280 --> 00:05:05,840
now that i have it installed i can run

00:05:03,039 --> 00:05:08,080
the to generation script

00:05:05,840 --> 00:05:09,600
it's going through all our product files

00:05:08,080 --> 00:05:11,120
you see the plugins here action

00:05:09,600 --> 00:05:14,320
calibration camera

00:05:11,120 --> 00:05:17,199
and it's generating the code for me if i

00:05:14,320 --> 00:05:17,600
look at the git diff nothing has changed

00:05:17,199 --> 00:05:20,000
here

00:05:17,600 --> 00:05:22,479
i just have my new vm but that's because

00:05:20,000 --> 00:05:25,680
i haven't changed to portal files

00:05:22,479 --> 00:05:28,880
what i will do now is um go into those

00:05:25,680 --> 00:05:32,639
this protocol module and edit

00:05:28,880 --> 00:05:36,080
the the action profile because

00:05:32,639 --> 00:05:38,800
um this feature that i want to

00:05:36,080 --> 00:05:40,400
to add do flight termination um i will

00:05:38,800 --> 00:05:42,400
call it terminate

00:05:40,400 --> 00:05:44,639
and it's it's very similar to like

00:05:42,400 --> 00:05:48,880
arming taking off or actually

00:05:44,639 --> 00:05:51,520
even um like kill which disarms to drone

00:05:48,880 --> 00:05:52,720
so i just decide that i will i will add

00:05:51,520 --> 00:05:54,560
it here

00:05:52,720 --> 00:05:56,160
so the first thing i do is just write

00:05:54,560 --> 00:05:58,800
some documentation

00:05:56,160 --> 00:06:00,960
so terminate will send command to

00:05:58,800 --> 00:06:03,520
terminate

00:06:00,960 --> 00:06:03,520
the drone

00:06:04,160 --> 00:06:07,600
and then say i just want some definition

00:06:06,160 --> 00:06:11,919
so this will

00:06:07,600 --> 00:06:11,919
run the terminate routine

00:06:12,400 --> 00:06:21,360
as um configured on the drone

00:06:17,280 --> 00:06:24,400
eg um so disarm

00:06:21,360 --> 00:06:26,319
and open parachute

00:06:24,400 --> 00:06:28,000
something like that so that's my

00:06:26,319 --> 00:06:28,880
documentation for this feature i want to

00:06:28,000 --> 00:06:32,000
add and then

00:06:28,880 --> 00:06:33,600
as you see it's defined in the proto um

00:06:32,000 --> 00:06:35,600
interface definition language so a

00:06:33,600 --> 00:06:37,919
function is an rpc here

00:06:35,600 --> 00:06:39,600
so i just copy my function is very

00:06:37,919 --> 00:06:41,680
similar to kill i just send the key

00:06:39,600 --> 00:06:42,960
command and that's it so i will i will

00:06:41,680 --> 00:06:45,360
imitate a bit that

00:06:42,960 --> 00:06:46,880
so i have rpc and i want to call my

00:06:45,360 --> 00:06:48,880
function terminate

00:06:46,880 --> 00:06:50,080
and then all of the functions need a

00:06:48,880 --> 00:06:53,280
request and a response

00:06:50,080 --> 00:06:56,319
so i just terminate request

00:06:53,280 --> 00:07:00,080
and i return terminate

00:06:56,319 --> 00:07:02,160
response okay good then an easy thing to

00:07:00,080 --> 00:07:04,560
do is to just like follow

00:07:02,160 --> 00:07:05,440
another function that's similar so so

00:07:04,560 --> 00:07:07,520
i've got kill

00:07:05,440 --> 00:07:09,520
um this terminate request is not

00:07:07,520 --> 00:07:10,800
implemented yet so i need to i will

00:07:09,520 --> 00:07:12,800
follow the kill request

00:07:10,800 --> 00:07:14,479
and see that here i want to implement

00:07:12,800 --> 00:07:17,759
the terminate request

00:07:14,479 --> 00:07:21,919
a search request

00:07:17,759 --> 00:07:21,919
and i do for now exactly the same

00:07:22,000 --> 00:07:25,919
skill and i will comment on it later

00:07:27,199 --> 00:07:33,360
action results and that's it

00:07:30,960 --> 00:07:35,440
okay so in the request that's where i

00:07:33,360 --> 00:07:38,400
would put parameters if i have some

00:07:35,440 --> 00:07:40,319
so so here i don't but for instance if

00:07:38,400 --> 00:07:41,759
you look at go to location request it

00:07:40,319 --> 00:07:43,199
has four parameters

00:07:41,759 --> 00:07:45,360
and that will be translated to the

00:07:43,199 --> 00:07:46,960
different languages so i'm fine here i

00:07:45,360 --> 00:07:49,599
don't want any

00:07:46,960 --> 00:07:50,400
and the result is just um saying that it

00:07:49,599 --> 00:07:52,240
could

00:07:50,400 --> 00:07:53,840
have an error message it could like the

00:07:52,240 --> 00:07:54,720
function could be denied or i could have

00:07:53,840 --> 00:07:58,240
a timeout or

00:07:54,720 --> 00:07:59,280
something so that's it i just uh defined

00:07:58,240 --> 00:08:02,560
now the api

00:07:59,280 --> 00:08:06,160
for my new my new feature

00:08:02,560 --> 00:08:07,680
let me quit so if i check i have like

00:08:06,160 --> 00:08:11,759
the protozoa module has changed

00:08:07,680 --> 00:08:13,120
and i can run toyota generation again

00:08:11,759 --> 00:08:14,879
it's going through all the plugins but

00:08:13,120 --> 00:08:15,520
what's interesting is that it went

00:08:14,879 --> 00:08:17,840
through

00:08:15,520 --> 00:08:19,680
action.proto that one changed the other

00:08:17,840 --> 00:08:22,960
ones did not

00:08:19,680 --> 00:08:23,919
once it's done i can check again and i

00:08:22,960 --> 00:08:28,240
see that now

00:08:23,919 --> 00:08:31,520
um the like action related files

00:08:28,240 --> 00:08:32,399
got generated modified at least um so

00:08:31,520 --> 00:08:34,240
it's all good

00:08:32,399 --> 00:08:35,440
um all those files i will not have to

00:08:34,240 --> 00:08:37,519
touch they are

00:08:35,440 --> 00:08:39,360
all other generated files but the thing

00:08:37,519 --> 00:08:40,000
is as i said i still have to implement

00:08:39,360 --> 00:08:42,959
the mavlink

00:08:40,000 --> 00:08:43,440
logic somewhere right what i like to do

00:08:42,959 --> 00:08:45,680
is

00:08:43,440 --> 00:08:47,120
follow the compiler right so i just i

00:08:45,680 --> 00:08:48,800
just compile and i see

00:08:47,120 --> 00:08:50,920
where it crashes because it has to crash

00:08:48,800 --> 00:08:54,959
somewhere and here it says

00:08:50,920 --> 00:08:58,160
inaction.cpp which was auto generated

00:08:54,959 --> 00:09:01,040
just before uh it tries to call imp

00:08:58,160 --> 00:09:02,160
terminate async and imp terminate and it

00:09:01,040 --> 00:09:03,680
doesn't find them

00:09:02,160 --> 00:09:05,680
of course because i did not implement

00:09:03,680 --> 00:09:07,839
them so the

00:09:05,680 --> 00:09:09,200
the the file where they should be

00:09:07,839 --> 00:09:13,040
implemented is in the

00:09:09,200 --> 00:09:16,080
implementation of action let me go there

00:09:13,040 --> 00:09:19,839
so plugin action and i should have an

00:09:16,080 --> 00:09:21,519
action imp let me go to the header

00:09:19,839 --> 00:09:23,839
same as before i just go to kill and i

00:09:21,519 --> 00:09:25,360
look a bit around and i see that

00:09:23,839 --> 00:09:27,120
yeah terminate is something that should

00:09:25,360 --> 00:09:29,360
be similar it has

00:09:27,120 --> 00:09:30,160
a result an action result it's called

00:09:29,360 --> 00:09:32,800
terminate

00:09:30,160 --> 00:09:33,519
it doesn't have any parameters and

00:09:32,800 --> 00:09:36,560
that's it

00:09:33,519 --> 00:09:38,000
and in c plus plus we have blocking

00:09:36,560 --> 00:09:39,920
functions and non-blocking functions

00:09:38,000 --> 00:09:41,120
this one is the blocking one but if i

00:09:39,920 --> 00:09:45,120
look for kill

00:09:41,120 --> 00:09:47,519
the other one here is um is also

00:09:45,120 --> 00:09:50,000
is the non-blocking function the async

00:09:47,519 --> 00:09:52,800
one so i need something similar here so

00:09:50,000 --> 00:09:54,399
i just define it and the compiler error

00:09:52,800 --> 00:09:55,920
before was actually complaining that it

00:09:54,399 --> 00:09:59,040
was looking for that

00:09:55,920 --> 00:10:00,560
so it has a result as well under a form

00:09:59,040 --> 00:10:01,440
of a callback this time because it's

00:10:00,560 --> 00:10:05,120
async

00:10:01,440 --> 00:10:07,839
and that's it so nice i i solve

00:10:05,120 --> 00:10:08,560
those errors but i only edited the

00:10:07,839 --> 00:10:10,560
header file

00:10:08,560 --> 00:10:12,399
right i need to write the implementation

00:10:10,560 --> 00:10:15,680
now

00:10:12,399 --> 00:10:16,880
same thing i want to go close to the to

00:10:15,680 --> 00:10:19,680
the other similar feature

00:10:16,880 --> 00:10:20,480
feature here and what i can see is that

00:10:19,680 --> 00:10:22,480
this is

00:10:20,480 --> 00:10:24,399
the blocking function and what the

00:10:22,480 --> 00:10:28,640
blocking function is

00:10:24,399 --> 00:10:30,800
does sorry is um it creates um

00:10:28,640 --> 00:10:32,240
promise in the future it runs the async

00:10:30,800 --> 00:10:34,959
function it integrates

00:10:32,240 --> 00:10:35,680
for it so i can just do exactly the same

00:10:34,959 --> 00:10:39,680
thing here

00:10:35,680 --> 00:10:44,640
so let me just copy it and

00:10:39,680 --> 00:10:44,640
um change the kill function for

00:10:44,839 --> 00:10:48,480
terminate

00:10:46,320 --> 00:10:49,920
terminate again and that's it for that

00:10:48,480 --> 00:10:52,399
so i just implemented the blocking

00:10:49,920 --> 00:10:56,640
function of terminate that was easy

00:10:52,399 --> 00:10:58,880
and now i want to go check the async one

00:10:56,640 --> 00:11:00,880
and this one is actually the mavlink

00:10:58,880 --> 00:11:03,279
logic right it's defining

00:11:00,880 --> 00:11:05,120
a command it's setting some parameters a

00:11:03,279 --> 00:11:07,440
target component id so that's that's the

00:11:05,120 --> 00:11:09,920
thing i need to implement

00:11:07,440 --> 00:11:10,959
so same thing it's just terminate it's

00:11:09,920 --> 00:11:16,720
called terminate

00:11:10,959 --> 00:11:16,720
async and it takes a callback

00:11:20,000 --> 00:11:26,079
okay now

00:11:23,440 --> 00:11:29,839
it's a command as well so i just define

00:11:26,079 --> 00:11:29,839
my commands

00:11:31,600 --> 00:11:36,480
and i need to set what common it is and

00:11:35,040 --> 00:11:38,399
so for that i go back to the

00:11:36,480 --> 00:11:41,600
documentation and i said that's

00:11:38,399 --> 00:11:43,519
this one i want so let me let me copy it

00:11:41,600 --> 00:11:46,440
here

00:11:43,519 --> 00:11:48,560
next step is the parameters of it so

00:11:46,440 --> 00:11:51,200
command.params

00:11:48,560 --> 00:11:52,320
dot param1 i know that there is one

00:11:51,200 --> 00:11:55,440
parameter

00:11:52,320 --> 00:11:56,639
here param is called terminate um and

00:11:55,440 --> 00:11:58,639
it's activated if

00:11:56,639 --> 00:12:01,200
uh bigger than zero and it has to be

00:11:58,639 --> 00:12:04,720
zero or one so i need to set it to one

00:12:01,200 --> 00:12:07,760
and there's no other parameter fine

00:12:04,720 --> 00:12:08,720
so here i just set it to one and then

00:12:07,760 --> 00:12:10,079
the next thing

00:12:08,720 --> 00:12:12,079
that i need to set is the target

00:12:10,079 --> 00:12:13,200
component id that's that's necessary for

00:12:12,079 --> 00:12:16,320
a command

00:12:13,200 --> 00:12:20,160
target all of this is really

00:12:16,320 --> 00:12:21,680
um mavlink mavlink logic if you know how

00:12:20,160 --> 00:12:23,760
mavlink works that's that's just how you

00:12:21,680 --> 00:12:25,040
would define a message with any mavlink

00:12:23,760 --> 00:12:27,920
library

00:12:25,040 --> 00:12:28,720
this parent object i use is a helper

00:12:27,920 --> 00:12:32,560
given to you

00:12:28,720 --> 00:12:34,800
by mavsdk so it in this case it gives me

00:12:32,560 --> 00:12:37,600
the autopilot id

00:12:34,800 --> 00:12:38,320
which i use as the target component id

00:12:37,600 --> 00:12:40,399
and then

00:12:38,320 --> 00:12:42,000
if i look at the other one uh the last

00:12:40,399 --> 00:12:45,920
thing is though it does is just

00:12:42,000 --> 00:12:47,440
um sending sending the command async

00:12:45,920 --> 00:12:50,320
so i just copy that that's the same

00:12:47,440 --> 00:12:52,720
thing that's my command

00:12:50,320 --> 00:12:54,480
great so now i implemented terminate and

00:12:52,720 --> 00:12:56,720
terminate async

00:12:54,480 --> 00:12:59,920
and that should be it for compiling

00:12:56,720 --> 00:12:59,920
right let me try that

00:13:05,200 --> 00:13:08,560
okay so it's compiled and it installed

00:13:07,360 --> 00:13:12,079
it now

00:13:08,560 --> 00:13:12,800
and if i look at my git diff i see that

00:13:12,079 --> 00:13:15,279
um

00:13:12,800 --> 00:13:18,639
this is what i just implemented now and

00:13:15,279 --> 00:13:22,320
all the res got auto generated

00:13:18,639 --> 00:13:24,480
great so i prepared a small um

00:13:22,320 --> 00:13:26,480
c plus plus example i put a label at the

00:13:24,480 --> 00:13:28,720
top so so you see it's an ide

00:13:26,480 --> 00:13:30,240
and this example will not be working

00:13:28,720 --> 00:13:31,519
it's missing a few things but what i

00:13:30,240 --> 00:13:32,240
want to show is the auto completion

00:13:31,519 --> 00:13:36,079
there

00:13:32,240 --> 00:13:39,680
so it's uh depending on the mavic sdk

00:13:36,079 --> 00:13:42,560
um i i just built and installed so if i

00:13:39,680 --> 00:13:44,399
if i compile it now i should be able in

00:13:42,560 --> 00:13:47,680
my action plugin to just

00:13:44,399 --> 00:13:50,000
to action.term and i get terminate

00:13:47,680 --> 00:13:52,560
as you see i get both the async one and

00:13:50,000 --> 00:13:54,480
the synchronous one

00:13:52,560 --> 00:13:55,920
so that's it we just implemented a

00:13:54,480 --> 00:13:59,600
feature that is now

00:13:55,920 --> 00:14:01,920
available in c plus plus um

00:13:59,600 --> 00:14:02,639
from the auto generation we got for free

00:14:01,920 --> 00:14:06,000
uh

00:14:02,639 --> 00:14:09,199
the implementation of wave sdk server

00:14:06,000 --> 00:14:11,600
so so that should be it now for the

00:14:09,199 --> 00:14:14,480
mavic sdk server side

00:14:11,600 --> 00:14:17,360
now one thing is we have this profile

00:14:14,480 --> 00:14:20,560
that we edited so let me go in the proto

00:14:17,360 --> 00:14:24,320
repository and that's the diff

00:14:20,560 --> 00:14:26,959
we made now i will be wanting to

00:14:24,320 --> 00:14:27,839
to propagate that to python right so i

00:14:26,959 --> 00:14:31,600
need to

00:14:27,839 --> 00:14:36,079
somehow get it into the python repo

00:14:31,600 --> 00:14:37,920
and the python repo also has this proto

00:14:36,079 --> 00:14:40,160
repository as a submodule so what i need

00:14:37,920 --> 00:14:42,839
to do is push it so i prepared already

00:14:40,160 --> 00:14:44,959
my branch that's this one and i will

00:14:42,839 --> 00:14:48,880
just

00:14:44,959 --> 00:14:53,839
add terminate for dev submit demo

00:14:48,880 --> 00:14:53,839
something like this and i just push the

00:14:56,839 --> 00:15:02,399
branch

00:14:59,839 --> 00:15:03,040
okay so what happens here was not

00:15:02,399 --> 00:15:05,680
planned

00:15:03,040 --> 00:15:07,519
if i look at the remote oh i'm on the

00:15:05,680 --> 00:15:13,839
https remote so let me just

00:15:07,519 --> 00:15:13,839
um hit remote

00:15:22,399 --> 00:15:27,839
update the remote so that i can actually

00:15:24,839 --> 00:15:27,839
push

00:15:31,519 --> 00:15:34,800
okay let me do that again

00:15:37,440 --> 00:15:40,720
so you don't need to have any special

00:15:38,800 --> 00:15:43,920
rights uh you could just have

00:15:40,720 --> 00:15:45,600
a fork of um of

00:15:43,920 --> 00:15:46,959
the the repository that would work for

00:15:45,600 --> 00:15:48,480
you you don't need to be a maintainer or

00:15:46,959 --> 00:15:50,720
have any rights there

00:15:48,480 --> 00:15:51,600
let me just go check there so i just

00:15:50,720 --> 00:15:55,920
pushed my

00:15:51,600 --> 00:16:01,040
branch now and i'm not logged in

00:15:55,920 --> 00:16:04,240
demo let me do it here

00:16:01,040 --> 00:16:04,880
demo effect sorry so that's um what we

00:16:04,240 --> 00:16:08,160
changed

00:16:04,880 --> 00:16:10,160
now in the in the proto repository just

00:16:08,160 --> 00:16:12,240
the new function

00:16:10,160 --> 00:16:13,199
so what you would do now typically is

00:16:12,240 --> 00:16:16,320
just add us

00:16:13,199 --> 00:16:20,560
as reviewer i can just add julian

00:16:16,320 --> 00:16:23,839
and say that's the new function

00:16:20,560 --> 00:16:28,560
i it in the dev submit

00:16:23,839 --> 00:16:30,480
demo and if julian is

00:16:28,560 --> 00:16:31,759
watching the presentation maybe he can

00:16:30,480 --> 00:16:34,399
review it now

00:16:31,759 --> 00:16:35,600
but we don't need that right so now let

00:16:34,399 --> 00:16:37,839
me go

00:16:35,600 --> 00:16:41,199
to another idea i prepared this time is

00:16:37,839 --> 00:16:41,199
for maverick python

00:16:42,079 --> 00:16:46,160
and i have by charm here with a small

00:16:44,639 --> 00:16:49,519
example

00:16:46,160 --> 00:16:51,519
that's um that will create a system

00:16:49,519 --> 00:16:52,959
connect to it and then set the takeoff

00:16:51,519 --> 00:16:55,519
altitude to 20 meters

00:16:52,959 --> 00:16:56,240
on the drone take off and then wait 10

00:16:55,519 --> 00:16:58,639
seconds

00:16:56,240 --> 00:16:59,680
and what's missing here is i would like

00:16:58,639 --> 00:17:03,360
to be able to do

00:16:59,680 --> 00:17:05,679
a weight drone.action.terminate

00:17:03,360 --> 00:17:07,520
but as you see it's not auto completed

00:17:05,679 --> 00:17:09,679
so if i try to do land

00:17:07,520 --> 00:17:11,439
i get the auto completion with the

00:17:09,679 --> 00:17:12,480
documentation that we that we had in the

00:17:11,439 --> 00:17:14,880
profile

00:17:12,480 --> 00:17:16,160
but i don't have it yet for terminates

00:17:14,880 --> 00:17:19,439
because i need to

00:17:16,160 --> 00:17:22,959
generate it

00:17:19,439 --> 00:17:25,520
so let's go check this terminal i have

00:17:22,959 --> 00:17:29,360
now what we have here again we have the

00:17:25,520 --> 00:17:29,360
protozoa module so let me go there

00:17:31,520 --> 00:17:37,760
and if i fetch

00:17:34,640 --> 00:17:40,000
i should get the see yeah the

00:17:37,760 --> 00:17:41,760
dev semi terminates so let me check out

00:17:40,000 --> 00:17:46,160
into this branch

00:17:41,760 --> 00:17:48,799
dev submit terminate

00:17:46,160 --> 00:17:49,760
and we have now uh the commit we just

00:17:48,799 --> 00:17:54,160
did before for

00:17:49,760 --> 00:17:56,960
for um c plus plus so i can go back

00:17:54,160 --> 00:17:58,160
and this time i already installed uh

00:17:56,960 --> 00:18:00,400
protoc

00:17:58,160 --> 00:18:02,000
chain sdk as i showed you before so i

00:18:00,400 --> 00:18:03,360
can directly run the auto generation

00:18:02,000 --> 00:18:06,160
script

00:18:03,360 --> 00:18:09,280
for python it's in other tools and it's

00:18:06,160 --> 00:18:09,280
called run protoc

00:18:09,919 --> 00:18:14,240
so it's the equivalent to what we have

00:18:12,320 --> 00:18:15,200
in c plus plus but now it's generating

00:18:14,240 --> 00:18:17,840
the

00:18:15,200 --> 00:18:17,840
python code

00:18:18,240 --> 00:18:22,320
for all the plugins and

00:18:23,280 --> 00:18:29,280
that's it i should be able to install

00:18:26,320 --> 00:18:31,200
install it locally and i can go back to

00:18:29,280 --> 00:18:34,480
my example here

00:18:31,200 --> 00:18:35,280
um theoretically it should have updated

00:18:34,480 --> 00:18:38,480
and now

00:18:35,280 --> 00:18:41,360
i should be on the latest um sorry

00:18:38,480 --> 00:18:44,240
on the latest version of of my sdk so if

00:18:41,360 --> 00:18:46,480
i do draw.action.terminate

00:18:44,240 --> 00:18:47,360
it now exists so it was just completely

00:18:46,480 --> 00:18:52,559
auto generated

00:18:47,360 --> 00:18:55,440
and it appeared um in in the sdk

00:18:52,559 --> 00:18:56,720
good um i still have a few minutes the

00:18:55,440 --> 00:18:58,240
the goal was to

00:18:56,720 --> 00:19:00,000
really show you that it's working and i

00:18:58,240 --> 00:19:04,559
hope it does

00:19:00,000 --> 00:19:04,559
so let me save that and go to my

00:19:04,640 --> 00:19:13,440
my environment my simulator environment

00:19:08,559 --> 00:19:16,960
so down there on this um

00:19:13,440 --> 00:19:18,720
on this shell i'm inside uh my basically

00:19:16,960 --> 00:19:20,799
that that we just um

00:19:18,720 --> 00:19:21,760
like built before and i'm and we

00:19:20,799 --> 00:19:24,240
installed it so we

00:19:21,760 --> 00:19:26,080
installed it into build default install

00:19:24,240 --> 00:19:29,600
which means that it should be here

00:19:26,080 --> 00:19:34,640
so in bin there i've got my sdk server

00:19:29,600 --> 00:19:38,080
so i need to run it and i run it on port

00:19:34,640 --> 00:19:41,280
grpc port 50 051

00:19:38,080 --> 00:19:42,880
because that's what the um the

00:19:41,280 --> 00:19:44,480
the python example we have will be

00:19:42,880 --> 00:19:47,520
connecting to

00:19:44,480 --> 00:19:48,320
so now it's waiting on one side on this

00:19:47,520 --> 00:19:52,080
port

00:19:48,320 --> 00:19:54,240
for the the mavidky python

00:19:52,080 --> 00:19:55,440
example to connect and on the other side

00:19:54,240 --> 00:19:58,720
it's waiting for

00:19:55,440 --> 00:20:01,520
the mavlink drone connect so

00:19:58,720 --> 00:20:03,039
let me start at one here it's just like

00:20:01,520 --> 00:20:06,400
normal gazebo with

00:20:03,039 --> 00:20:09,919
um some model and some some world

00:20:06,400 --> 00:20:09,919
should take a few seconds to start

00:20:11,520 --> 00:20:15,280
and okay i should be i should be set up

00:20:13,679 --> 00:20:18,880
now so we have a drone

00:20:15,280 --> 00:20:20,320
here we have the pixel and we have my

00:20:18,880 --> 00:20:23,200
sdk server waiting

00:20:20,320 --> 00:20:24,799
for my vdk python to connect let me just

00:20:23,200 --> 00:20:27,520
quickly try it so i

00:20:24,799 --> 00:20:29,600
come under takeoff to see if my

00:20:27,520 --> 00:20:32,720
simulator is working

00:20:29,600 --> 00:20:32,720
and let me land again

00:20:33,200 --> 00:20:37,840
so setup is working now which means that

00:20:36,400 --> 00:20:40,960
i can go back

00:20:37,840 --> 00:20:43,520
to my sdk python example and run it

00:20:40,960 --> 00:20:44,480
so let's just quickly look at it again

00:20:43,520 --> 00:20:47,919
it will

00:20:44,480 --> 00:20:48,960
um connect to my sdk server running on

00:20:47,919 --> 00:20:53,919
localhost

00:20:48,960 --> 00:20:55,760
port 5051 it will connect to it

00:20:53,919 --> 00:20:57,840
um it will set the takeoff altitude to

00:20:55,760 --> 00:21:00,320
20 meters because we want to see it you

00:20:57,840 --> 00:21:03,520
know full after the termination

00:21:00,320 --> 00:21:04,559
it will arm take off wait 10 seconds so

00:21:03,520 --> 00:21:07,440
that it has time

00:21:04,559 --> 00:21:07,919
to take off and then it will terminate

00:21:07,440 --> 00:21:10,960
okay

00:21:07,919 --> 00:21:10,960
let's run that

00:21:11,520 --> 00:21:17,440
now and go here so it's taking off

00:21:15,760 --> 00:21:19,600
and now it should be waiting for 10

00:21:17,440 --> 00:21:22,559
seconds and at the end it will terminate

00:21:19,600 --> 00:21:22,559
and we'll see what happens

00:21:25,039 --> 00:21:30,799
awesome it just terminated and opened

00:21:27,280 --> 00:21:33,679
the parachute

00:21:30,799 --> 00:21:33,679
and now it's landing

00:21:35,039 --> 00:21:45,600
good let me stop this now

00:21:38,159 --> 00:21:49,360
and go back to my slides

00:21:45,600 --> 00:21:52,320
okay so that's it for my demo um

00:21:49,360 --> 00:21:53,520
to conclude i i i know that i probably

00:21:52,320 --> 00:21:55,919
went pretty fast but

00:21:53,520 --> 00:21:57,200
i hope you got a feel for what it means

00:21:55,919 --> 00:22:00,480
to to add

00:21:57,200 --> 00:22:02,000
a new feature in uh into my sdk the the

00:22:00,480 --> 00:22:04,960
main point here is that

00:22:02,000 --> 00:22:06,480
all you have to do is add a c plus plus

00:22:04,960 --> 00:22:09,679
mavlink implementation

00:22:06,480 --> 00:22:11,280
in the corresponding proto api but the

00:22:09,679 --> 00:22:13,200
rest will be auto generated for you so

00:22:11,280 --> 00:22:14,799
you don't have to know any of the other

00:22:13,200 --> 00:22:17,360
of the other languages you don't have to

00:22:14,799 --> 00:22:19,120
know go to add a feature to my sdk but

00:22:17,360 --> 00:22:22,400
it will still be propagated to

00:22:19,120 --> 00:22:24,320
to go um and maybe the last thing i

00:22:22,400 --> 00:22:25,600
i'd like to say is uh if julian is

00:22:24,320 --> 00:22:28,320
watching the

00:22:25,600 --> 00:22:29,840
the presentation maybe you have a new pr

00:22:28,320 --> 00:22:34,000
to review

00:22:29,840 --> 00:22:37,360
thank you thank you jonas that was

00:22:34,000 --> 00:22:38,960
excellent thanks a lot for your

00:22:37,360 --> 00:22:42,320
presentation

00:22:38,960 --> 00:22:45,280
um let's uh why don't you head to

00:22:42,320 --> 00:22:46,720
slack and help our community with a few

00:22:45,280 --> 00:22:53,760
questions i think there's a bunch of

00:22:46,720 --> 00:22:53,760

YouTube URL: https://www.youtube.com/watch?v=T1orxSyqDzI


