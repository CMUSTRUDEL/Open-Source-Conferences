Title: Getting started as a contributor on PX4 â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-06
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	The PX4 Developer Summit is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd

Title: Getting started as a contributor on PX4

Summary: PX4 is a big subject, sometimes it can be daunting to even begin looking at how to get started. We are going to present an overview of: the ways people can contribute to the project, how they can get started, and where they can go to drill deeper into particular areas of interest. While this content is directed at getting volunteers spun up efficiently, hopefully it will be of use to anyone getting started with PX4. This presentation includes a pdf file with important reference content and details which were omitted from the video, attendees are encouraged to refer to that pdf for additional information.

https://sched.co/cjOg
Captions: 
	00:00:07,309 --> 00:00:13,200
hello welcome beginning started with px4

00:00:10,980 --> 00:00:15,540
this is a high-level overview of how to

00:00:13,200 --> 00:00:17,340
get started with px4 intended to

00:00:15,540 --> 00:00:21,689
accommodate several different levels of

00:00:17,340 --> 00:00:24,689
engagement I'm mark West I'm a px4

00:00:21,689 --> 00:00:28,260
community volunteer first a word about

00:00:24,689 --> 00:00:30,090
format we have about 10 minutes to go

00:00:28,260 --> 00:00:32,160
over a big subject so we'll have a lot

00:00:30,090 --> 00:00:34,950
of abstraction and compression some

00:00:32,160 --> 00:00:36,630
subjects will be skipped some demos will

00:00:34,950 --> 00:00:41,489
be clipped but don't worry there's a lot

00:00:36,630 --> 00:00:42,090
of detail in the appendix ok so let's

00:00:41,489 --> 00:00:44,910
get started

00:00:42,090 --> 00:00:46,379
who's this for this presentation was

00:00:44,910 --> 00:00:48,390
written with contributors in mind to get

00:00:46,379 --> 00:00:50,399
them up to speed quickly but this

00:00:48,390 --> 00:00:53,550
content will probably help anybody get

00:00:50,399 --> 00:00:55,800
started with px4 so what do you want to

00:00:53,550 --> 00:00:58,320
do with px4 well one might break down

00:00:55,800 --> 00:01:01,410
the knowledge domains into levels it's

00:00:58,320 --> 00:01:04,650
building upon lower levels level one

00:01:01,410 --> 00:01:07,350
operate a px for vehicle level to build

00:01:04,650 --> 00:01:10,110
a px for vehicle level 3 build the

00:01:07,350 --> 00:01:15,000
source level 4 modify the source and

00:01:10,110 --> 00:01:17,240
level 5 contribute to the community so a

00:01:15,000 --> 00:01:20,610
level 1 and operate skip see appendix

00:01:17,240 --> 00:01:23,100
level to build the vehicle skip see

00:01:20,610 --> 00:01:26,729
appendix all right

00:01:23,100 --> 00:01:29,880
level 3 you want to build a px for image

00:01:26,729 --> 00:01:32,100
or executable from the source this is a

00:01:29,880 --> 00:01:35,670
big step up in complexity from level 2

00:01:32,100 --> 00:01:37,079
and Deb skills are very helpful before

00:01:35,670 --> 00:01:39,780
you get started you need to make a

00:01:37,079 --> 00:01:43,020
choice will you install a tool chain or

00:01:39,780 --> 00:01:48,740
will you use containers we will present

00:01:43,020 --> 00:01:51,689
both option 1 use a tool chain to build

00:01:48,740 --> 00:01:53,700
what is a tool chain well a tool chain

00:01:51,689 --> 00:01:56,250
is all stuff you need to build for a

00:01:53,700 --> 00:01:59,610
particular target there are tool chains

00:01:56,250 --> 00:02:01,799
for Windows Mac and Linux and our demo

00:01:59,610 --> 00:02:05,130
we will use Ubuntu the belt for a

00:02:01,799 --> 00:02:07,049
simulation that will run on a boon to

00:02:05,130 --> 00:02:10,080
to use a tool chain you need first

00:02:07,049 --> 00:02:10,560
install it obviously you have a choice

00:02:10,080 --> 00:02:14,010
here

00:02:10,560 --> 00:02:15,510
manual or convenient scripts there are

00:02:14,010 --> 00:02:18,450
several convenient scripts and their

00:02:15,510 --> 00:02:19,670
uses recommended see the appendix for

00:02:18,450 --> 00:02:22,080
details

00:02:19,670 --> 00:02:24,660
sometimes the scripts don't meet all

00:02:22,080 --> 00:02:27,630
your particular requirements though for

00:02:24,660 --> 00:02:30,000
example I work with Ross using some open

00:02:27,630 --> 00:02:32,370
CV features which must be built they

00:02:30,000 --> 00:02:34,739
don't come in a distrib so I have to

00:02:32,370 --> 00:02:37,769
build that therefore and you'd also

00:02:34,739 --> 00:02:40,470
build Ross up from source to therefore I

00:02:37,769 --> 00:02:41,519
can use the Ross convenient script same

00:02:40,470 --> 00:02:43,709
goes for gazebo

00:02:41,519 --> 00:02:46,019
sometimes I've been under so many

00:02:43,709 --> 00:02:47,430
problems with conflicting open CV that I

00:02:46,019 --> 00:02:51,000
always just install the whole chain

00:02:47,430 --> 00:02:53,430
manually nobody has to do that though if

00:02:51,000 --> 00:02:59,400
you run into such things manual

00:02:53,430 --> 00:03:04,200
installation might be for you option to

00:02:59,400 --> 00:03:05,340
using a container to build so first

00:03:04,200 --> 00:03:07,410
you're gonna have to understand doctor

00:03:05,340 --> 00:03:09,870
containers so according to the docker

00:03:07,410 --> 00:03:11,760
website quote a container is a standard

00:03:09,870 --> 00:03:14,370
unit of software that packages up code

00:03:11,760 --> 00:03:15,930
and all its dependencies so the

00:03:14,370 --> 00:03:17,940
application runs quickly and reliably

00:03:15,930 --> 00:03:21,660
from one computing environment to

00:03:17,940 --> 00:03:24,540
another and quote in many ways victim

00:03:21,660 --> 00:03:26,370
container behaves like a VM and you can

00:03:24,540 --> 00:03:29,130
effectively use them more or less like

00:03:26,370 --> 00:03:31,079
you would use a VM but there are of

00:03:29,130 --> 00:03:33,480
course differences primarily that they

00:03:31,079 --> 00:03:35,579
use namespaces and C groups for

00:03:33,480 --> 00:03:37,459
isolation I don't worry about what that

00:03:35,579 --> 00:03:40,019
means

00:03:37,459 --> 00:03:41,970
containers are in very heavy use in the

00:03:40,019 --> 00:03:44,940
big clouds and our popular way of

00:03:41,970 --> 00:03:47,700
distributing dev environments they allow

00:03:44,940 --> 00:03:49,560
you as a consumer to plug and play very

00:03:47,700 --> 00:03:51,930
sophisticated environments which will

00:03:49,560 --> 00:03:56,040
not conflict with each other or with a

00:03:51,930 --> 00:03:57,630
host you can elect to use the px4

00:03:56,040 --> 00:04:00,450
containers instead of installing and

00:03:57,630 --> 00:04:02,280
maintaining a px4 tool chain because the

00:04:00,450 --> 00:04:06,390
tool chain is built into the container

00:04:02,280 --> 00:04:08,579
their use is recommended now worried

00:04:06,390 --> 00:04:11,549
about nomenclature containers are stored

00:04:08,579 --> 00:04:14,269
in images you don't download or store

00:04:11,549 --> 00:04:16,949
containers you download or store images

00:04:14,269 --> 00:04:17,989
when you run an image it becomes a

00:04:16,949 --> 00:04:20,150
container

00:04:17,989 --> 00:04:23,330
a couple more things you need to know

00:04:20,150 --> 00:04:25,360
about containers one is containers build

00:04:23,330 --> 00:04:27,800
upon other containers each layer

00:04:25,360 --> 00:04:30,740
contains all aspects of the parent

00:04:27,800 --> 00:04:32,539
layers an important part of working with

00:04:30,740 --> 00:04:35,870
containers is figuring out which one you

00:04:32,539 --> 00:04:38,330
want to use for example the px4

00:04:35,870 --> 00:04:41,120
deborah's melodic container adds ross to

00:04:38,330 --> 00:04:43,520
be explored Epsom elation Bionic which

00:04:41,120 --> 00:04:45,800
adds simulation to px4 debt-based Bionic

00:04:43,520 --> 00:04:48,979
which adds a tool chain to the Ubuntu

00:04:45,800 --> 00:04:52,699
image another thing about containers

00:04:48,979 --> 00:04:54,650
containers provide isolation all of the

00:04:52,699 --> 00:04:58,039
interaction of the container with the

00:04:54,650 --> 00:05:00,500
host is prohibited except as explicitly

00:04:58,039 --> 00:05:03,050
enabled by command line parameters for

00:05:00,500 --> 00:05:04,669
example it's very common for a directory

00:05:03,050 --> 00:05:06,080
and the user domain on the host to be

00:05:04,669 --> 00:05:08,659
mapped to directory on the container

00:05:06,080 --> 00:05:11,090
through the V parameter it's also very

00:05:08,659 --> 00:05:15,830
common to open a network port via the

00:05:11,090 --> 00:05:17,419
peep parameter okay so you have to

00:05:15,830 --> 00:05:19,490
choose to a chain or container

00:05:17,419 --> 00:05:24,349
well I suggest container if you can

00:05:19,490 --> 00:05:26,719
otherwise install the tool chain one

00:05:24,349 --> 00:05:28,099
fine point on that more advanced

00:05:26,719 --> 00:05:29,630
container users can build up their own

00:05:28,099 --> 00:05:32,599
containers with whatever components they

00:05:29,630 --> 00:05:35,120
want and then snap to an image for

00:05:32,599 --> 00:05:36,440
storage or sharing so with some work you

00:05:35,120 --> 00:05:41,990
can use containers no matter how

00:05:36,440 --> 00:05:43,820
particular your needs okay so now we're

00:05:41,990 --> 00:05:45,979
going to and we're going to run our

00:05:43,820 --> 00:05:48,139
first demo we're going to demonstrate

00:05:45,979 --> 00:05:51,949
using a tool chain to build and run an

00:05:48,139 --> 00:05:54,680
xe4 single little simulation don't worry

00:05:51,949 --> 00:05:57,639
it would goes too fast the script is in

00:05:54,680 --> 00:05:57,639
the appendix

00:05:59,249 --> 00:06:04,150
step one install the tool chain not

00:06:01,599 --> 00:06:08,400
shown step 2 create a directory for the

00:06:04,150 --> 00:06:08,400
px4 source then get

00:06:08,950 --> 00:06:12,750
a lot of time compression here

00:06:16,580 --> 00:06:22,249
navigate to the firmware directory and

00:06:18,930 --> 00:06:22,249
then build px4

00:06:25,040 --> 00:06:31,040
if all goes well I Jameson will appear

00:06:28,650 --> 00:06:33,630
and the council will open the px4 shell

00:06:31,040 --> 00:06:35,870
to shell a moment to initialize and take

00:06:33,630 --> 00:06:35,870
off

00:06:38,950 --> 00:06:42,280
as you can see times that sometimes it

00:06:40,840 --> 00:06:44,530
takes a moment for the simulator and

00:06:42,280 --> 00:06:45,970
they actually just spin up so now might

00:06:44,530 --> 00:06:48,280
not be ready to take off right away

00:06:45,970 --> 00:06:51,420
try again eventually it will be ready

00:06:48,280 --> 00:06:51,420
unless something is broken

00:06:57,200 --> 00:06:59,260
you

00:06:59,830 --> 00:07:03,430
okay so in our case the drone can't see

00:07:01,870 --> 00:07:05,259
a data link and immediately goes in to

00:07:03,430 --> 00:07:06,490
return to home load this is correct

00:07:05,259 --> 00:07:09,129
behavior because we have not yet

00:07:06,490 --> 00:07:12,479
configured a data like we'll leave that

00:07:09,129 --> 00:07:12,479
exercise for another demo

00:07:17,670 --> 00:07:20,240
and there we are

00:07:24,470 --> 00:07:31,280
all right demo to hear we're going to

00:07:27,630 --> 00:07:31,280
demonstrate using a container to build

00:07:35,260 --> 00:07:41,530
step one install docker not shown step 2

00:07:38,860 --> 00:07:44,370
create a directory for the px4 source

00:07:41,530 --> 00:07:44,370
then get

00:07:50,690 --> 00:07:56,570
we're going to go ahead and take a look

00:07:52,680 --> 00:07:56,570
at some containers while that's getting

00:07:57,279 --> 00:08:01,059
go to the px4 container github and

00:07:59,169 --> 00:08:03,129
select your container we're gonna use

00:08:01,059 --> 00:08:06,599
px4 did simulation by on it click on

00:08:03,129 --> 00:08:08,469
that link notice the darker pull command

00:08:06,599 --> 00:08:11,039
we're going to copy the name of the

00:08:08,469 --> 00:08:11,039
container there

00:08:12,810 --> 00:08:16,260
right now right in the container with

00:08:14,580 --> 00:08:18,360
the docker run command don't worry about

00:08:16,260 --> 00:08:21,060
that format it's it's detailed in the

00:08:18,360 --> 00:08:25,460
appendix at this point the container

00:08:21,060 --> 00:08:25,460
images will download install and run

00:08:25,680 --> 00:08:31,850
you prompt will change which indicates

00:08:28,560 --> 00:08:31,850
that you're now running in the container

00:08:32,180 --> 00:08:38,560
notice that prompt navigate to the share

00:08:34,849 --> 00:08:38,560
in the container and build px4

00:08:39,120 --> 00:08:42,450
the convention of build process

00:08:40,919 --> 00:08:44,099
commences when complete the build

00:08:42,450 --> 00:08:46,370
directory will be present on the share

00:08:44,099 --> 00:08:50,330
on the host so look over there in the

00:08:46,370 --> 00:08:50,330
directory see that we just created

00:08:51,670 --> 00:08:55,440
you can exit the house you leave it

00:08:53,320 --> 00:08:55,440
running

00:09:05,800 --> 00:09:12,999
okay now we've got level four modify the

00:09:09,910 --> 00:09:14,920
source this is a step up and complexity

00:09:12,999 --> 00:09:17,230
from level three dev skills are pretty

00:09:14,920 --> 00:09:19,529
much required and you will in many cases

00:09:17,230 --> 00:09:24,009
need to understand the architecture of

00:09:19,529 --> 00:09:25,449
px4 why would you do this well the most

00:09:24,009 --> 00:09:29,589
common scenarios would be to add

00:09:25,449 --> 00:09:31,179
features and the fixed bugs the standard

00:09:29,589 --> 00:09:34,299
dev loop applies here

00:09:31,179 --> 00:09:37,720
you had it build debug and it you know

00:09:34,299 --> 00:09:39,749
fixed ability bug at this level many

00:09:37,720 --> 00:09:43,629
depths find an ID to be very helpful

00:09:39,749 --> 00:09:45,660
some down some do religious are founded

00:09:43,629 --> 00:09:48,970
on this and wars are fought over this I

00:09:45,660 --> 00:09:52,119
prefer to use an IDE so we will demo

00:09:48,970 --> 00:09:55,059
with an IDE some IDs are known to work

00:09:52,119 --> 00:09:58,929
well the px4 there's your studio code

00:09:55,059 --> 00:10:01,749
Eclipse QT creator there are others I'm

00:09:58,929 --> 00:10:03,819
sure for px for work

00:10:01,749 --> 00:10:09,610
I prefer Visual Studio code on a bun too

00:10:03,819 --> 00:10:11,379
so that's what we will demo all right so

00:10:09,610 --> 00:10:14,999
here we demonstrate building and

00:10:11,379 --> 00:10:14,999
debugging with an IDE

00:10:15,260 --> 00:10:22,390
create a directory for the px4 source

00:10:19,120 --> 00:10:22,390
then get

00:10:27,410 --> 00:10:29,470
you

00:10:34,660 --> 00:10:40,620
notice adjust radio code is already

00:10:37,720 --> 00:10:40,620
installed and open

00:10:43,860 --> 00:10:49,850
now open the px4 folder

00:10:47,149 --> 00:10:52,069
a lot of config will happen wait don't

00:10:49,850 --> 00:10:53,720
break out if you get frustrated and

00:10:52,069 --> 00:10:57,579
break out earlier just require code to

00:10:53,720 --> 00:10:57,579
restart order to move forward

00:11:03,870 --> 00:11:05,930
you

00:11:09,040 --> 00:11:14,959
all right a px4 detect is not your

00:11:11,810 --> 00:11:18,190
active kit then change to px4 detect

00:11:14,959 --> 00:11:20,040
wait for config to finish

00:11:18,190 --> 00:11:21,930
you

00:11:20,040 --> 00:11:25,520
next we're gonna want to select the

00:11:21,930 --> 00:11:28,520
build variant we'll use P X force it'll

00:11:25,520 --> 00:11:28,520
that

00:11:28,870 --> 00:11:36,360
let me go wait for config to finish now

00:11:33,970 --> 00:11:38,790
click build

00:11:36,360 --> 00:11:40,740
Turner build ensues the problems

00:11:38,790 --> 00:11:43,140
happenin mentions messages will be seen

00:11:40,740 --> 00:11:46,360
sometimes problem tab is the best view

00:11:43,140 --> 00:11:48,230
sometimes up in tabs of this year

00:11:46,360 --> 00:11:50,380
all right now we're going to start

00:11:48,230 --> 00:11:50,380
debugging

00:11:51,070 --> 00:11:55,089
we're gonna go into our code and set a

00:11:52,959 --> 00:11:59,940
breakpoint on an executable line in main

00:11:55,089 --> 00:11:59,940
dot cpp this is the general entry point

00:12:00,300 --> 00:12:05,589
there we go now click on the debug icon

00:12:03,670 --> 00:12:09,310
the left horizontal toolbar and then

00:12:05,589 --> 00:12:12,449
click on the start debug green triangle

00:12:09,310 --> 00:12:12,449
in the upper left drop down

00:12:13,890 --> 00:12:17,260
sometimes you get errors especially on

00:12:15,850 --> 00:12:18,850
the first debug build you can try to run

00:12:17,260 --> 00:12:21,130
anyway but sometimes that doesn't work

00:12:18,850 --> 00:12:25,320
it just kind of hangs in that case

00:12:21,130 --> 00:12:25,320
restart code and debug again

00:12:27,630 --> 00:12:30,199
yeah

00:12:32,400 --> 00:12:34,460
you

00:12:34,570 --> 00:12:38,800
so now we're going to debug again

00:12:38,840 --> 00:12:44,360
look on that dream green triangle well

00:12:42,590 --> 00:12:46,520
you should see a build a startup

00:12:44,360 --> 00:12:49,090
sequence and code halting on the

00:12:46,520 --> 00:12:49,090
breakpoint

00:12:54,200 --> 00:12:59,670
and at this point you can single step

00:12:56,640 --> 00:13:04,220
and remove breakpoints and spec

00:12:59,670 --> 00:13:04,220
variables all the standard step

00:13:04,830 --> 00:13:06,890
you

00:13:08,640 --> 00:13:12,500
all right so now we'll break how to be

00:13:10,170 --> 00:13:12,500
buggin

00:13:16,040 --> 00:13:18,100
you

00:13:18,940 --> 00:13:26,630
okay so there's a lot more to debugging

00:13:22,850 --> 00:13:29,240
than this we just don't have time for

00:13:26,630 --> 00:13:31,100
all that that's for another video

00:13:29,240 --> 00:13:32,420
I'll just mention a few things you might

00:13:31,100 --> 00:13:35,660
want to look into and then you can

00:13:32,420 --> 00:13:37,610
expand from there one simulation in both

00:13:35,660 --> 00:13:39,620
hardware and software so you can fly

00:13:37,610 --> 00:13:42,440
without flying you already got a taste

00:13:39,620 --> 00:13:47,450
of that in the GM f7

00:13:42,440 --> 00:13:51,100
first demo to the px4 console the three

00:13:47,450 --> 00:13:53,240
various logs that are generated and for

00:13:51,100 --> 00:13:55,390
JTAG if you needed closer to the

00:13:53,240 --> 00:14:01,000
hardware all of these things are

00:13:55,390 --> 00:14:04,880
expanded in the appendix okay level 5

00:14:01,000 --> 00:14:06,110
now you're looking at contributing we're

00:14:04,880 --> 00:14:08,180
going to break away from the pure Tech

00:14:06,110 --> 00:14:11,300
Talk here and now you can step up to

00:14:08,180 --> 00:14:14,210
give back to the px4 community what kind

00:14:11,300 --> 00:14:16,460
of things can you do to help well you

00:14:14,210 --> 00:14:20,750
can add features of the code you can fix

00:14:16,460 --> 00:14:23,530
the code or you can add non-code content

00:14:20,750 --> 00:14:26,330
and like this presentation for example

00:14:23,530 --> 00:14:28,190
you can conduct test flights there's

00:14:26,330 --> 00:14:30,830
always a need for that and currently

00:14:28,190 --> 00:14:33,920
there's a great need for that you can

00:14:30,830 --> 00:14:37,090
report bugs you find a possible debug

00:14:33,920 --> 00:14:40,400
and provide analysis for those bugs

00:14:37,090 --> 00:14:43,160
there are all kinds of things so ask

00:14:40,400 --> 00:14:45,980
around there are a few levels and

00:14:43,160 --> 00:14:50,420
channels for engagement the appendix for

00:14:45,980 --> 00:14:53,900
those ok so we reached the end of the

00:14:50,420 --> 00:14:55,370
presentation thanks for watching be sure

00:14:53,900 --> 00:14:59,860
to refer to the appendix for skip

00:14:55,370 --> 00:14:59,860

YouTube URL: https://www.youtube.com/watch?v=m2o_0z0Pyy4


