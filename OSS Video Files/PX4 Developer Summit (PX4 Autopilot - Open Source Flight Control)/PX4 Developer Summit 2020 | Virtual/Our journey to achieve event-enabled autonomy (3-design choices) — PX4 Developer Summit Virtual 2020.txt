Title: Our journey to achieve event-enabled autonomy (3-design choices) — PX4 Developer Summit Virtual 2020
Publication date: 2020-07-19
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	Title: Our journey to achieve event-enabled autonomy (3-design choices)

Summary: We are an autonomous delivery startup based in The Netherlands.
We harness the power of the PX4 ecosystem along with cutting-edge Cloud solutions to enable Event-driven Autonomy for our drones. Simply put, it was hard (but super fun!).
Via this talk, we would like to distill and share our learnings in the form of 3 design choices (we call them as U-turns) which enables event-driven autonomy for our drones.

#1 Python and/or C++?
#2 When to 'Edge over Cloud'?
#3 When to 'Cloud over Edge'?

Net, our talk summarises best practices (our version) in the realization of a ‘forward-looking’ autonomous drone delivery architecture. See you soon!

The PX4 Developer Summit is the annual flagship conference hosted by Dronecode for the drone development community. https://bit.ly/2YXe4Rd
Captions: 
	00:00:01,199 --> 00:00:04,560
all right community how are you all

00:00:03,360 --> 00:00:06,960
doing

00:00:04,560 --> 00:00:07,839
happy to be here uh thank you for

00:00:06,960 --> 00:00:10,320
sticking with us

00:00:07,839 --> 00:00:13,280
um next up we got our journey to achieve

00:00:10,320 --> 00:00:14,559
event enable autonomy by bric digital

00:00:13,280 --> 00:00:16,000
uh they're an autonomous delivery

00:00:14,559 --> 00:00:18,000
startup based on the netherlands they

00:00:16,000 --> 00:00:20,720
are on a mission to create hassle-free

00:00:18,000 --> 00:00:21,359
last-mile delivery using drones uh our

00:00:20,720 --> 00:00:23,279
speaker

00:00:21,359 --> 00:00:25,279
ram gandhi is the co-founder and fellow

00:00:23,279 --> 00:00:26,560
developer at british digital

00:00:25,279 --> 00:00:28,400
he's calling in today from the

00:00:26,560 --> 00:00:29,840
netherlands

00:00:28,400 --> 00:00:31,519
deepak singh is a final year

00:00:29,840 --> 00:00:32,800
undergraduate student majoring in

00:00:31,519 --> 00:00:35,520
electronics and communication

00:00:32,800 --> 00:00:36,960
engineering from nsit college delhi

00:00:35,520 --> 00:00:39,440
currently working as a technical

00:00:36,960 --> 00:00:41,120
research intern at bric digital

00:00:39,440 --> 00:00:42,399
on this talk they will chart their

00:00:41,120 --> 00:00:43,840
learnings and realization of a

00:00:42,399 --> 00:00:45,680
forward-looking autonomous drone

00:00:43,840 --> 00:00:50,480
delivery architecture

00:00:45,680 --> 00:00:50,480
community please welcome brief digital

00:00:51,920 --> 00:00:56,079
oh mike's all yours guys hey welcome

00:00:55,280 --> 00:01:00,960
everyone

00:00:56,079 --> 00:01:04,239
hello my name is rahm hey i'm deepak

00:01:00,960 --> 00:01:04,239
let me share my screen a moment

00:01:10,840 --> 00:01:13,840
okay

00:01:15,520 --> 00:01:21,520
we hope that you're having a bright day

00:01:18,720 --> 00:01:22,320
like the slide is going to have and

00:01:21,520 --> 00:01:25,280
thank you for

00:01:22,320 --> 00:01:27,200
your interest for attending this event

00:01:25,280 --> 00:01:28,720
and it's really a great pleasure to be

00:01:27,200 --> 00:01:29,360
speaking at this event and thank you

00:01:28,720 --> 00:01:32,640
very much

00:01:29,360 --> 00:01:33,040
uh drawcone foundation as well we have a

00:01:32,640 --> 00:01:35,119
lot of

00:01:33,040 --> 00:01:37,439
interesting slides coming up and we hope

00:01:35,119 --> 00:01:39,439
to make you stick till the end

00:01:37,439 --> 00:01:40,720
uh it's a great slides and great

00:01:39,439 --> 00:01:42,799
presentations all around

00:01:40,720 --> 00:01:45,280
last few days and we're very impressed

00:01:42,799 --> 00:01:47,439
with it and that's why

00:01:45,280 --> 00:01:49,680
we have something else very interesting

00:01:47,439 --> 00:01:51,759
as well to i trust we will keep you

00:01:49,680 --> 00:01:53,360
uh stay until the end of it this is what

00:01:51,759 --> 00:01:56,560
we're going to talk today

00:01:53,360 --> 00:01:58,560
how do you enable even enabled autonomy

00:01:56,560 --> 00:02:02,399
for your drones

00:01:58,560 --> 00:02:02,399
that's us just in case

00:02:02,960 --> 00:02:07,200
uh we are brief digital we are very

00:02:06,320 --> 00:02:09,039
early stage

00:02:07,200 --> 00:02:10,319
autonomous delivery startup based in the

00:02:09,039 --> 00:02:13,680
netherlands

00:02:10,319 --> 00:02:13,680
our mission is to

00:02:13,920 --> 00:02:19,520
create customer using drones

00:02:17,360 --> 00:02:20,400
and as you see that we are spread across

00:02:19,520 --> 00:02:24,959
the globe

00:02:20,400 --> 00:02:24,959
and who doesn't like open source come on

00:02:25,200 --> 00:02:31,840
so we design build and also code our

00:02:28,560 --> 00:02:34,800
drones and the ecosystem around it

00:02:31,840 --> 00:02:35,519
and we truly believe that the higher

00:02:34,800 --> 00:02:38,640
levels of

00:02:35,519 --> 00:02:40,400
automation across the chain is going to

00:02:38,640 --> 00:02:43,680
make the drone delivery

00:02:40,400 --> 00:02:44,400
very affordable and to just make this

00:02:43,680 --> 00:02:46,879
happen

00:02:44,400 --> 00:02:47,599
at brief digital we have a code name

00:02:46,879 --> 00:02:50,800
project

00:02:47,599 --> 00:02:51,519
just for this thing to happen we want to

00:02:50,800 --> 00:02:54,560
enable

00:02:51,519 --> 00:02:57,120
restaurants to deliver flying food

00:02:54,560 --> 00:02:58,560
and as you can already imagine there are

00:02:57,120 --> 00:03:02,239
so many moving parts

00:02:58,560 --> 00:03:04,640
involved in delivering stuff with drones

00:03:02,239 --> 00:03:06,000
and you got to keep so many systems in

00:03:04,640 --> 00:03:08,080
hotline

00:03:06,000 --> 00:03:09,200
and there is a great deal of autonomy

00:03:08,080 --> 00:03:11,440
that's needed at

00:03:09,200 --> 00:03:13,920
every stage in the architecture and

00:03:11,440 --> 00:03:13,920
usually

00:03:16,840 --> 00:03:22,239
um

00:03:19,360 --> 00:03:22,800
so what we want at the end of it is

00:03:22,239 --> 00:03:24,480
really

00:03:22,800 --> 00:03:26,000
take your hands off and let the system

00:03:24,480 --> 00:03:28,000
do the magic so

00:03:26,000 --> 00:03:29,200
autonomy in and out was very very

00:03:28,000 --> 00:03:32,400
important for

00:03:29,200 --> 00:03:35,519
our dream to make it happen

00:03:32,400 --> 00:03:37,280
so why event enabled autonomy is so

00:03:35,519 --> 00:03:40,480
important for us

00:03:37,280 --> 00:03:43,040
and what the role it's going to play

00:03:40,480 --> 00:03:45,120
to enable the forward-looking drone

00:03:43,040 --> 00:03:47,680
delivery architecture

00:03:45,120 --> 00:03:48,159
so there are a couple of aspects that we

00:03:47,680 --> 00:03:51,040
uh

00:03:48,159 --> 00:03:52,720
felt in when we started up and there are

00:03:51,040 --> 00:03:53,519
some of the things i'm gonna list down

00:03:52,720 --> 00:03:56,400
here

00:03:53,519 --> 00:03:57,360
the very first one was the over-the-air

00:03:56,400 --> 00:03:59,920
updates

00:03:57,360 --> 00:04:00,799
so we want to make sure the source code

00:03:59,920 --> 00:04:03,120
that we change

00:04:00,799 --> 00:04:04,879
the code that we do for the drone is

00:04:03,120 --> 00:04:06,560
really landing on the drone

00:04:04,879 --> 00:04:08,080
irrespective of whether the drone is

00:04:06,560 --> 00:04:09,760
offline or online

00:04:08,080 --> 00:04:14,560
because everything is cloud connected

00:04:09,760 --> 00:04:18,239
these days and you also want to make

00:04:14,560 --> 00:04:20,160
that's very relaxed secure

00:04:18,239 --> 00:04:22,160
at the same time there are so many

00:04:20,160 --> 00:04:24,160
moving parts involved in this

00:04:22,160 --> 00:04:26,160
solution and we want to make sure the

00:04:24,160 --> 00:04:28,160
transmission is always reliable

00:04:26,160 --> 00:04:31,680
over unreliable connections that we all

00:04:28,160 --> 00:04:34,240
have across 3g 4g 5g whatever

00:04:31,680 --> 00:04:36,479
and what's also very important is this

00:04:34,240 --> 00:04:38,960
thing which most of us are aware of

00:04:36,479 --> 00:04:40,720
is it works on my machine syndrome we

00:04:38,960 --> 00:04:41,520
want to really avoid that from the

00:04:40,720 --> 00:04:43,600
ground up

00:04:41,520 --> 00:04:44,880
we want to make sure whatever piece of

00:04:43,600 --> 00:04:48,000
software that we built

00:04:44,880 --> 00:04:49,440
is truly reliable enough that it runs on

00:04:48,000 --> 00:04:51,040
the real hardware

00:04:49,440 --> 00:04:52,720
and we want to get the testing

00:04:51,040 --> 00:04:54,840
confidence while we are building our

00:04:52,720 --> 00:04:57,840
solution from ground up

00:04:54,840 --> 00:04:59,840
so what we have for that is

00:04:57,840 --> 00:05:01,680
simulation on steroids so i'm going to

00:04:59,840 --> 00:05:04,880
take you through a slide on that

00:05:01,680 --> 00:05:07,360
on how we uh perceive simulation

00:05:04,880 --> 00:05:09,919
in our software development life cycle

00:05:07,360 --> 00:05:14,479
and how it's really helping us to

00:05:09,919 --> 00:05:14,479
up the game and the la

00:05:15,039 --> 00:05:18,720
for the lead what i truly believe is

00:05:18,240 --> 00:05:20,880
that

00:05:18,720 --> 00:05:22,160
developers are happy when they see their

00:05:20,880 --> 00:05:24,479
code in action

00:05:22,160 --> 00:05:25,199
so it's really our responsibility to

00:05:24,479 --> 00:05:27,840
make sure

00:05:25,199 --> 00:05:29,360
the piece of code that's written and the

00:05:27,840 --> 00:05:32,639
moment it's deployed

00:05:29,360 --> 00:05:35,039
onto the drones real or virtual the end

00:05:32,639 --> 00:05:38,160
of end to end time should be really

00:05:35,039 --> 00:05:38,560
short because the moment you have given

00:05:38,160 --> 00:05:40,960
that

00:05:38,560 --> 00:05:42,320
acceleration to these features to reach

00:05:40,960 --> 00:05:44,479
the target state

00:05:42,320 --> 00:05:46,400
the more energy the developers would get

00:05:44,479 --> 00:05:47,039
so hopefully they will consume less

00:05:46,400 --> 00:05:50,160
coffee

00:05:47,039 --> 00:05:52,000
who knows so we believe that

00:05:50,160 --> 00:05:53,360
the key to the designing such a

00:05:52,000 --> 00:05:56,720
forward-looking

00:05:53,360 --> 00:05:59,199
solution is lying in the embracement of

00:05:56,720 --> 00:06:02,319
your events that are happening across

00:05:59,199 --> 00:06:04,240
the in or out uh let's dive right in

00:06:02,319 --> 00:06:06,000
what is event enabled autonomy that's

00:06:04,240 --> 00:06:08,400
the topic of the day

00:06:06,000 --> 00:06:10,240
so what i did was i looked up on the

00:06:08,400 --> 00:06:12,319
internet to see if i could find the

00:06:10,240 --> 00:06:14,479
definition that i could use here

00:06:12,319 --> 00:06:14,479
but

00:06:15,680 --> 00:06:18,960
there is nothing like an event-enabled

00:06:17,600 --> 00:06:21,280
autonomy that's

00:06:18,960 --> 00:06:22,400
termed or coined so far and google

00:06:21,280 --> 00:06:24,800
trends across

00:06:22,400 --> 00:06:26,080
the history shows me that so maybe it's

00:06:24,800 --> 00:06:28,960
time for us to define it

00:06:26,080 --> 00:06:30,720
why not so let's take a moment to define

00:06:28,960 --> 00:06:32,960
it so we are all on the same page

00:06:30,720 --> 00:06:35,440
so event enabled autonomy is as simple

00:06:32,960 --> 00:06:38,080
as achieving autonomy by sourcing

00:06:35,440 --> 00:06:38,800
events so by what i mean is in a plain

00:06:38,080 --> 00:06:41,280
english

00:06:38,800 --> 00:06:42,880
events are nothing but an action or an

00:06:41,280 --> 00:06:45,199
occurrence that happens

00:06:42,880 --> 00:06:47,039
for example a low battery event or a

00:06:45,199 --> 00:06:50,319
mission is in progress event or

00:06:47,039 --> 00:06:52,400
a no-fly advisory in fact and these kind

00:06:50,319 --> 00:06:54,319
of events keep happening all around

00:06:52,400 --> 00:06:55,599
us you know either on board off board

00:06:54,319 --> 00:06:58,319
all over and

00:06:55,599 --> 00:06:58,960
autonomy is really the capacity to take

00:06:58,319 --> 00:07:02,160
or make

00:06:58,960 --> 00:07:04,080
informed decision and it could be a uh

00:07:02,160 --> 00:07:05,440
obstacle avoidance or it could be also

00:07:04,080 --> 00:07:09,039
emergency landing

00:07:05,440 --> 00:07:10,319
and many things like that so imagine if

00:07:09,039 --> 00:07:13,360
you could source

00:07:10,319 --> 00:07:15,599
all these events off-board onboard cloud

00:07:13,360 --> 00:07:15,599
what

00:07:18,639 --> 00:07:22,479
of interest and it can do the magic

00:07:20,960 --> 00:07:24,240
necessary actions

00:07:22,479 --> 00:07:26,319
that's exactly what we would like to uh

00:07:24,240 --> 00:07:27,840
term as event enabled autonomy

00:07:26,319 --> 00:07:29,599
so i have a very small example so let's

00:07:27,840 --> 00:07:31,919
see it in action

00:07:29,599 --> 00:07:34,160
so at a very very simplistic level again

00:07:31,919 --> 00:07:36,639
as i said it's a very simplistic level

00:07:34,160 --> 00:07:38,160
this is how an event enabled autonomy

00:07:36,639 --> 00:07:40,319
would look like

00:07:38,160 --> 00:07:42,479
so you see that the events from the

00:07:40,319 --> 00:07:45,280
drone are coming all the way

00:07:42,479 --> 00:07:46,000
into the pub sub bridge which is in the

00:07:45,280 --> 00:07:47,840
middle

00:07:46,000 --> 00:07:49,599
at the same time there are events that

00:07:47,840 --> 00:07:51,520
are originating from the cloud

00:07:49,599 --> 00:07:53,280
that's on the right side and there are

00:07:51,520 --> 00:07:54,800
various types of events it could be like

00:07:53,280 --> 00:07:56,879
for from the drone for example

00:07:54,800 --> 00:07:59,120
you could have a pre-flight check event

00:07:56,879 --> 00:08:00,720
successful or failure or whatever

00:07:59,120 --> 00:08:02,879
or it could be also mission progress

00:08:00,720 --> 00:08:03,680
event or a health probe event telemetry

00:08:02,879 --> 00:08:06,400
event

00:08:03,680 --> 00:08:08,479
so what's interesting here is sourcing

00:08:06,400 --> 00:08:11,919
these events from all around

00:08:08,479 --> 00:08:15,599
and creating some sort of a hub wherein

00:08:11,919 --> 00:08:15,599
interested parties can actually tune

00:08:15,840 --> 00:08:19,440
into this particular uh to make sure

00:08:18,639 --> 00:08:22,639
that they

00:08:19,440 --> 00:08:24,240
react on time and by doing this approach

00:08:22,639 --> 00:08:25,759
what we have achieved is we created a

00:08:24,240 --> 00:08:28,400
decoupled architecture

00:08:25,759 --> 00:08:29,599
across all our modules and by decoupled

00:08:28,400 --> 00:08:31,680
what i mean is we got

00:08:29,599 --> 00:08:34,000
greater flexibility to kind of compose

00:08:31,680 --> 00:08:36,000
them and create complex workflows

00:08:34,000 --> 00:08:37,839
without having to worry about making

00:08:36,000 --> 00:08:38,240
changes to the core components every

00:08:37,839 --> 00:08:40,560
time

00:08:38,240 --> 00:08:43,200
that you want to make things different

00:08:40,560 --> 00:08:46,000
so how do you create such a system

00:08:43,200 --> 00:08:46,320
uh we have been spending some time on it

00:08:46,000 --> 00:08:49,279
and

00:08:46,320 --> 00:08:51,440
enabling this event driven approach has

00:08:49,279 --> 00:08:54,640
been very important for us

00:08:51,440 --> 00:08:56,320
so we have made a three design choices

00:08:54,640 --> 00:08:57,920
uh when we sit back and think through

00:08:56,320 --> 00:08:59,200
these are the three prominent ones that

00:08:57,920 --> 00:09:01,279
popped up in our head

00:08:59,200 --> 00:09:03,600
that we would like to share with you and

00:09:01,279 --> 00:09:05,839
hopefully you can make your own uh

00:09:03,600 --> 00:09:06,640
impression of mind maps of how you see

00:09:05,839 --> 00:09:10,000
things

00:09:06,640 --> 00:09:12,640
in your perspective the very first one

00:09:10,000 --> 00:09:13,519
is very interesting it's a c plus plus

00:09:12,640 --> 00:09:17,040
and or python

00:09:13,519 --> 00:09:21,120
you know and

00:09:17,040 --> 00:09:24,160
so we share his findings on this topic

00:09:21,120 --> 00:09:26,880
over to you deepak oh hello everyone

00:09:24,160 --> 00:09:26,880
thanks a lot ram

00:09:27,200 --> 00:09:34,320
so uh hello everyone so here we have

00:09:31,760 --> 00:09:36,000
a demo showing the obstacle avoid

00:09:34,320 --> 00:09:38,160
obstacle detection algorithm

00:09:36,000 --> 00:09:39,279
in running so on the left we have the

00:09:38,160 --> 00:09:41,279
algorithm written in

00:09:39,279 --> 00:09:43,200
like the code written in c plus and on

00:09:41,279 --> 00:09:44,560
the right we have the code written in

00:09:43,200 --> 00:09:46,959
python

00:09:44,560 --> 00:09:49,200
so when it comes to c plus plus versus

00:09:46,959 --> 00:09:52,320
python c plus plus has a very clear edge

00:09:49,200 --> 00:09:54,800
in fps or in the memory footprint

00:09:52,320 --> 00:09:56,640
with c plus plus we were able to achieve

00:09:54,800 --> 00:09:58,800
a 22 frames per second

00:09:56,640 --> 00:10:00,399
whereas with python it was only 14

00:09:58,800 --> 00:10:02,320
frames per second

00:10:00,399 --> 00:10:03,440
and when it comes to memory as can be

00:10:02,320 --> 00:10:05,440
seen from the graph c

00:10:03,440 --> 00:10:07,519
plus plus had a lower memory footprint

00:10:05,440 --> 00:10:09,920
so in this case c plus plus is the clear

00:10:07,519 --> 00:10:09,920
winner

00:10:12,640 --> 00:10:16,480
let's have a look at the other aspect of

00:10:16,839 --> 00:10:19,839
things

00:10:34,399 --> 00:10:37,600
okay i think deepak is having some

00:10:35,839 --> 00:10:40,160
troubles probably

00:10:37,600 --> 00:10:41,360
uh so when you look at it from a build

00:10:40,160 --> 00:10:45,200
perspective

00:10:41,360 --> 00:10:48,399
uh what you do with c plus plus is

00:10:45,200 --> 00:10:49,440
you actually build the native machine

00:10:48,399 --> 00:10:52,240
code

00:10:49,440 --> 00:10:53,519
suitable for the underlying operating

00:10:52,240 --> 00:10:54,880
system and also the processor

00:10:53,519 --> 00:10:57,440
instruction set

00:10:54,880 --> 00:10:58,480
however for python you actually build

00:10:57,440 --> 00:10:59,839
the byte code

00:10:58,480 --> 00:11:02,160
which is consumed by the python

00:10:59,839 --> 00:11:04,640
interpreter so with that

00:11:02,160 --> 00:11:06,000
specific aspect has been a great

00:11:04,640 --> 00:11:09,120
importance for us

00:11:06,000 --> 00:11:11,600
because you actually build once and

00:11:09,120 --> 00:11:13,440
you can deploy the code python anywhere

00:11:11,600 --> 00:11:16,560
and it is very important and you will

00:11:13,440 --> 00:11:19,600
realize it in the next slide

00:11:16,560 --> 00:11:21,680
saying it in this slide uh

00:11:19,600 --> 00:11:23,600
i assume all of you agree that python is

00:11:21,680 --> 00:11:25,040
a winner when it comes to build once and

00:11:23,600 --> 00:11:27,279
deploy anywhere

00:11:25,040 --> 00:11:28,240
so it's a tie basically so we want to

00:11:27,279 --> 00:11:31,360
take you through

00:11:28,240 --> 00:11:32,640
the uh uh reasons why we chose python

00:11:31,360 --> 00:11:36,079
over c plus plus

00:11:32,640 --> 00:11:37,680
for us um it was really very hard

00:11:36,079 --> 00:11:39,760
decision for us to kind of

00:11:37,680 --> 00:11:40,800
switch in the middle of our you know

00:11:39,760 --> 00:11:44,160
assignment or

00:11:40,800 --> 00:11:45,440
mission that we move all the way from c

00:11:44,160 --> 00:11:47,440
plus plus to python

00:11:45,440 --> 00:11:49,680
because naturally we started with c plus

00:11:47,440 --> 00:11:52,320
plus for all the low level programming

00:11:49,680 --> 00:11:54,079
and we chose python for doing the high

00:11:52,320 --> 00:11:55,920
level stuff it could be integration

00:11:54,079 --> 00:11:56,959
orchestrations and stuff like that

00:11:55,920 --> 00:11:59,600
however

00:11:56,959 --> 00:12:01,200
we sooner we realize that in order to

00:11:59,600 --> 00:12:03,600
write a reliable software

00:12:01,200 --> 00:12:04,320
you need to have a parity between a

00:12:03,600 --> 00:12:07,360
simulation

00:12:04,320 --> 00:12:09,920
and production situations environments

00:12:07,360 --> 00:12:10,720
and how can you bring the parity is by

00:12:09,920 --> 00:12:13,360
making sure

00:12:10,720 --> 00:12:14,320
that you build and you test the same

00:12:13,360 --> 00:12:17,839
piece of code

00:12:14,320 --> 00:12:19,839
and same memories

00:12:17,839 --> 00:12:22,079
that is deployed on the drone at the end

00:12:19,839 --> 00:12:23,920
of the day and in order to reduce

00:12:22,079 --> 00:12:26,320
or bring in the parity between these two

00:12:23,920 --> 00:12:28,560
environments we realize that building

00:12:26,320 --> 00:12:30,560
native machine code on the real hardware

00:12:28,560 --> 00:12:30,959
was very challenging when you see plus

00:12:30,560 --> 00:12:34,320
plus

00:12:30,959 --> 00:12:36,240
given that we cannot have a lim

00:12:34,320 --> 00:12:38,000
we can have ceiling when it comes to

00:12:36,240 --> 00:12:40,880
automation at scale

00:12:38,000 --> 00:12:42,000
so there is some level of uh ceiling

00:12:40,880 --> 00:12:44,560
that we felt

00:12:42,000 --> 00:12:46,480
and with python when we moved in we

00:12:44,560 --> 00:12:49,200
write once we push it to a drone without

00:12:46,480 --> 00:12:51,839
any exclusive compilation steps

00:12:49,200 --> 00:12:52,720
and second one was python being a high

00:12:51,839 --> 00:12:55,360
level language

00:12:52,720 --> 00:12:57,040
it was very faster to develop and we see

00:12:55,360 --> 00:13:00,079
the progress that we are making uh

00:12:57,040 --> 00:13:01,519
day in day out and also the ever-growing

00:13:00,079 --> 00:13:03,200
third-party libraries

00:13:01,519 --> 00:13:04,800
so the mavis dicker python is a very

00:13:03,200 --> 00:13:05,600
classic example of it it's a prime

00:13:04,800 --> 00:13:08,160
example

00:13:05,600 --> 00:13:09,519
and it really enabled us to tap into the

00:13:08,160 --> 00:13:12,079
px4 ecosystem

00:13:09,519 --> 00:13:13,680
via the python bindings uh and it's very

00:13:12,079 --> 00:13:17,200
big thanks to all the contributors of

00:13:13,680 --> 00:13:17,200
the mavistick python because

00:13:19,120 --> 00:13:23,680
let us focus on our position without

00:13:21,200 --> 00:13:26,399
having to worry too much about the px4

00:13:23,680 --> 00:13:28,160
internals and the last is really the

00:13:26,399 --> 00:13:28,480
developer well-being which i keep coming

00:13:28,160 --> 00:13:29,920
back

00:13:28,480 --> 00:13:32,000
because it's very important for us to

00:13:29,920 --> 00:13:32,639
reduce the time to deploy our changes

00:13:32,000 --> 00:13:35,120
all the way

00:13:32,639 --> 00:13:36,240
across the ecosystem that we have and

00:13:35,120 --> 00:13:40,160
python really

00:13:36,240 --> 00:13:42,959
helped us in that line second one is

00:13:40,160 --> 00:13:44,000
when would you use edge compute over

00:13:42,959 --> 00:13:47,279
cloud

00:13:44,000 --> 00:13:49,519
and this is uh also very classic uh

00:13:47,279 --> 00:13:51,279
question that we all get is is it

00:13:49,519 --> 00:13:51,920
suitable for age or it's suitable for

00:13:51,279 --> 00:13:53,760
cloud

00:13:51,920 --> 00:13:56,079
so i tried to list down some of it from

00:13:53,760 --> 00:13:59,279
our experience in this slide

00:13:56,079 --> 00:13:59,920
we see the need to use the power of the

00:13:59,279 --> 00:14:01,600
edge

00:13:59,920 --> 00:14:03,040
when it comes down to these three things

00:14:01,600 --> 00:14:05,760
or even more

00:14:03,040 --> 00:14:06,880
the first one is physical connectivity

00:14:05,760 --> 00:14:09,199
so if you see

00:14:06,880 --> 00:14:11,360
at the need for sense and respond sense

00:14:09,199 --> 00:14:12,800
of void or even local connected devices

00:14:11,360 --> 00:14:14,480
that you want to leverage

00:14:12,800 --> 00:14:17,680
then there is absolutely no other choice

00:14:14,480 --> 00:14:20,639
other than doing this

00:14:17,680 --> 00:14:21,440
stuff on the edge number two is time

00:14:20,639 --> 00:14:23,839
sensitive

00:14:21,440 --> 00:14:25,760
if you have latency sensitive activities

00:14:23,839 --> 00:14:27,440
like obstacle detection avoidance or

00:14:25,760 --> 00:14:29,760
even active emergency

00:14:27,440 --> 00:14:30,800
that's exactly when you also choose to

00:14:29,760 --> 00:14:33,760
do things on the edge

00:14:30,800 --> 00:14:34,639
completely and the last is a privacy

00:14:33,760 --> 00:14:37,600
sensitive

00:14:34,639 --> 00:14:40,079
so you might want to uh for a situation

00:14:37,600 --> 00:14:42,720
like in europe for example we have gdpr

00:14:40,079 --> 00:14:43,360
and all privacy regulations making sure

00:14:42,720 --> 00:14:46,079
that

00:14:43,360 --> 00:14:46,560
uh the the vision data and the location

00:14:46,079 --> 00:14:50,160
data

00:14:46,560 --> 00:14:52,639
of the uh things we see and we we watch

00:14:50,160 --> 00:14:54,639
is has to be handled very carefully so

00:14:52,639 --> 00:14:56,880
probably that's also a reason why we

00:14:54,639 --> 00:14:58,560
could do things on the edge itself

00:14:56,880 --> 00:15:00,160
there are many more other things like if

00:14:58,560 --> 00:15:01,760
you want to save some power

00:15:00,160 --> 00:15:03,199
you want to avoid round trip to the

00:15:01,760 --> 00:15:04,240
internet probably you want to do it

00:15:03,199 --> 00:15:06,160
offline so

00:15:04,240 --> 00:15:07,760
there are so many aspects like that uh

00:15:06,160 --> 00:15:10,320
you could use edge over

00:15:07,760 --> 00:15:11,199
cloud so deepak has a very interesting

00:15:10,320 --> 00:15:14,399
example

00:15:11,199 --> 00:15:18,240
to show it toward you oh to you deepak

00:15:14,399 --> 00:15:18,240
hey are you back yeah

00:15:21,600 --> 00:15:25,920
so uh hello everyone here is a short

00:15:23,440 --> 00:15:27,839
demo of our obstacle avoidance algorithm

00:15:25,920 --> 00:15:29,600
so we use the px4sitl

00:15:27,839 --> 00:15:31,600
and the gazebo simulator for simulating

00:15:29,600 --> 00:15:33,920
the same on the left you can see

00:15:31,600 --> 00:15:35,519
the gazebo world and on the right we

00:15:33,920 --> 00:15:37,360
have the queue ground control

00:15:35,519 --> 00:15:39,519
where as can be seen we've planned a

00:15:37,360 --> 00:15:41,839
mission using the gps coordinates

00:15:39,519 --> 00:15:44,079
now the drone is equipped with an rgbd

00:15:41,839 --> 00:15:47,360
sensor simulating closely to the

00:15:44,079 --> 00:15:48,959
hardware that we have and the drone

00:15:47,360 --> 00:15:50,720
has to reach that goal location while

00:15:48,959 --> 00:15:55,839
avoiding these obstacles

00:15:50,720 --> 00:15:55,839
so let's see the drone in action

00:15:56,800 --> 00:16:00,079
as you can see it's taking off

00:16:01,040 --> 00:16:05,519
now using the rgb sensor drone creates a

00:16:04,079 --> 00:16:08,240
local depth map

00:16:05,519 --> 00:16:09,920
using which it computes trajectories and

00:16:08,240 --> 00:16:11,759
the control signals as you can see

00:16:09,920 --> 00:16:13,759
it took a turn around the tree and now

00:16:11,759 --> 00:16:15,839
there's another obstacle coming in front

00:16:13,759 --> 00:16:17,440
and it will plan a trajectory around

00:16:15,839 --> 00:16:19,600
this

00:16:17,440 --> 00:16:23,199
for doing this we we use the off-board

00:16:19,600 --> 00:16:25,920
control mode in the px4 firmware

00:16:23,199 --> 00:16:27,680
yeah so what happens is when it

00:16:25,920 --> 00:16:29,040
encounters an obstacle it changes mode

00:16:27,680 --> 00:16:30,880
from mission to off-board

00:16:29,040 --> 00:16:32,399
and when there is no obstacle in front

00:16:30,880 --> 00:16:34,079
it changes back to mission mode

00:16:32,399 --> 00:16:37,839
so that it can execute the pre-planned

00:16:34,079 --> 00:16:37,839
mission safely

00:16:44,000 --> 00:16:53,199
so it has reached this way point

00:16:50,560 --> 00:16:55,120
so yeah so this is the entire stack as

00:16:53,199 --> 00:16:55,839
you can see we have an rgb sensor which

00:16:55,120 --> 00:16:58,160
basically

00:16:55,839 --> 00:17:00,079
passes the point cloud to the companion

00:16:58,160 --> 00:17:01,199
computer which is running the detect and

00:17:00,079 --> 00:17:03,519
avoid logic

00:17:01,199 --> 00:17:05,439
so it initially checks for obstacles if

00:17:03,519 --> 00:17:06,319
there are no obstacles then it continues

00:17:05,439 --> 00:17:08,000
the mission

00:17:06,319 --> 00:17:10,160
if there's an obstacle then it changes

00:17:08,000 --> 00:17:12,880
to off-board mode it gets the current

00:17:10,160 --> 00:17:14,480
drone state using the mav sdk python api

00:17:12,880 --> 00:17:16,240
and it generates the velocity command

00:17:14,480 --> 00:17:20,559
which is passed to the pixel

00:17:16,240 --> 00:17:20,559
using again the mav sdk python api

00:17:21,839 --> 00:17:25,039
over to you ram thank you thank you

00:17:24,160 --> 00:17:26,799
deepak

00:17:25,039 --> 00:17:29,280
uh it's very important to mention to

00:17:26,799 --> 00:17:32,320
everyone that the moment we chose to

00:17:29,280 --> 00:17:34,240
switch to python and uh it really helped

00:17:32,320 --> 00:17:37,360
us greatly because then we could focus

00:17:34,240 --> 00:17:40,160
more to compensate the uh

00:17:37,360 --> 00:17:41,200
the underperformance of python in its

00:17:40,160 --> 00:17:43,840
raw form

00:17:41,200 --> 00:17:44,799
with using numpy and other libraries

00:17:43,840 --> 00:17:47,120
along with that

00:17:44,799 --> 00:17:48,080
we leveraged the asynchronous libraries

00:17:47,120 --> 00:17:50,640
of python

00:17:48,080 --> 00:17:51,200
to make sure that we utilize the os

00:17:50,640 --> 00:17:53,440
threading

00:17:51,200 --> 00:17:55,280
very effectively on the edge to make

00:17:53,440 --> 00:17:58,080
sure whatever you see on the slide

00:17:55,280 --> 00:18:00,160
uh happen at a very low cost and no

00:17:58,080 --> 00:18:03,200
footprint on the cpu

00:18:00,160 --> 00:18:04,400
um the next stop is uh really went to

00:18:03,200 --> 00:18:06,880
cloud over edge

00:18:04,400 --> 00:18:07,840
and that's really the last topic that i

00:18:06,880 --> 00:18:10,720
have today

00:18:07,840 --> 00:18:12,320
so there's very uh several advantages of

00:18:10,720 --> 00:18:14,400
choosing cloud over anything

00:18:12,320 --> 00:18:16,240
and primarily is because it's 24 7

00:18:14,400 --> 00:18:19,679
available it's scalable

00:18:16,240 --> 00:18:21,840
and it's sick pure

00:18:19,679 --> 00:18:23,679
and doing things still we do see there

00:18:21,840 --> 00:18:26,160
are very exclusive requirements

00:18:23,679 --> 00:18:27,600
when to use cloud over the edge and

00:18:26,160 --> 00:18:29,840
those are

00:18:27,600 --> 00:18:32,320
the first one is reliable transmission

00:18:29,840 --> 00:18:34,160
over unreliable connectivity

00:18:32,320 --> 00:18:36,320
so we know that things are not always

00:18:34,160 --> 00:18:36,880
connected and there's always a blip in

00:18:36,320 --> 00:18:39,600
between

00:18:36,880 --> 00:18:41,120
so we solve the problem using a very

00:18:39,600 --> 00:18:43,280
classic pops up pattern

00:18:41,120 --> 00:18:44,720
in a store forward mechanism based on

00:18:43,280 --> 00:18:47,360
the type of the data

00:18:44,720 --> 00:18:49,200
between the drones and the cloud and as

00:18:47,360 --> 00:18:49,919
you can see the autonomy is in both

00:18:49,200 --> 00:18:52,160
sides

00:18:49,919 --> 00:18:53,520
even the cloud is autonomous in its own

00:18:52,160 --> 00:18:54,799
aspect and the drones are also

00:18:53,520 --> 00:18:58,000
autonomous in their own

00:18:54,799 --> 00:18:59,520
cocoon and we make these two autonomies

00:18:58,000 --> 00:19:02,240
talk to each other with the help of

00:18:59,520 --> 00:19:04,799
event streaming across both the sites

00:19:02,240 --> 00:19:06,960
and there are we got to make sure that

00:19:04,799 --> 00:19:09,039
we design the solution for failure

00:19:06,960 --> 00:19:10,400
and which essentially means the command

00:19:09,039 --> 00:19:12,640
data the result data

00:19:10,400 --> 00:19:13,919
or the over-the-air updates that go in

00:19:12,640 --> 00:19:16,480
back and forth

00:19:13,919 --> 00:19:19,039
all of that we should not lose it at any

00:19:16,480 --> 00:19:19,039
given time

00:19:19,520 --> 00:19:22,799
so this approach has been we even if the

00:19:22,000 --> 00:19:25,600
drone has been

00:19:22,799 --> 00:19:27,280
shut off for say 30 minutes or one hour

00:19:25,600 --> 00:19:28,720
our over there update has been always

00:19:27,280 --> 00:19:29,760
waiting for the drone whenever it comes

00:19:28,720 --> 00:19:32,320
back up online

00:19:29,760 --> 00:19:33,840
the entire uh solution software has been

00:19:32,320 --> 00:19:35,760
overridden on the drone so it's ready to

00:19:33,840 --> 00:19:38,799
fly off in the next mission

00:19:35,760 --> 00:19:40,799
so the ability for us to push our code

00:19:38,799 --> 00:19:41,440
updates back to the drone in less than a

00:19:40,799 --> 00:19:43,679
few seconds

00:19:41,440 --> 00:19:44,640
is really what is enabling us to move

00:19:43,679 --> 00:19:46,799
fast

00:19:44,640 --> 00:19:48,559
and this loosely coupled design from the

00:19:46,799 --> 00:19:50,799
ground up is also another

00:19:48,559 --> 00:19:51,600
important thing to observe is the way

00:19:50,799 --> 00:19:53,760
that we can do

00:19:51,600 --> 00:19:54,720
hand on and hand off between these

00:19:53,760 --> 00:19:56,559
components

00:19:54,720 --> 00:19:59,200
is very interesting if we kind of split

00:19:56,559 --> 00:20:00,880
them up using uh pub sub mechanism

00:19:59,200 --> 00:20:03,120
it enabled us to create complex

00:20:00,880 --> 00:20:06,400
workflows uh without having to deal with

00:20:03,120 --> 00:20:08,640
individual modules and the last one

00:20:06,400 --> 00:20:09,679
i have is the simulation so how do we do

00:20:08,640 --> 00:20:11,919
simulation

00:20:09,679 --> 00:20:13,679
uh in the in the complicated world that

00:20:11,919 --> 00:20:16,400
we have today

00:20:13,679 --> 00:20:18,840
so this is a workflow i can show you on

00:20:16,400 --> 00:20:21,280
the left side

00:20:18,840 --> 00:20:23,760
this so

00:20:21,280 --> 00:20:25,039
the world so they do the thing and when

00:20:23,760 --> 00:20:26,720
they create a feature then

00:20:25,039 --> 00:20:29,039
it's basically going to be get shipped

00:20:26,720 --> 00:20:30,720
over the air onto the virtual drones

00:20:29,039 --> 00:20:33,440
that we have created on the cloud

00:20:30,720 --> 00:20:34,000
and also the real drones so what it

00:20:33,440 --> 00:20:36,240
happens is

00:20:34,000 --> 00:20:37,120
that inside the cloud we have

00:20:36,240 --> 00:20:40,480
provisioned

00:20:37,120 --> 00:20:42,720
a very high gpu virtual machines which

00:20:40,480 --> 00:20:44,480
exactly contains a drone stack the mock

00:20:42,720 --> 00:20:46,240
sensors mock actuators

00:20:44,480 --> 00:20:48,799
we have camera streams and the drone

00:20:46,240 --> 00:20:51,360
dynamics as well on the cloud

00:20:48,799 --> 00:20:52,000
so this really let us make sure we

00:20:51,360 --> 00:20:55,520
create a

00:20:52,000 --> 00:20:57,280
synonymous environment very similar to

00:20:55,520 --> 00:20:58,559
the production situation

00:20:57,280 --> 00:21:00,400
right on the cloud right in the

00:20:58,559 --> 00:21:02,880
simulation situation so

00:21:00,400 --> 00:21:04,799
the dev just a matter of few seconds

00:21:02,880 --> 00:21:05,280
should be able to connect over a virtual

00:21:04,799 --> 00:21:07,840
gl

00:21:05,280 --> 00:21:08,320
over vnc to it and they can actually see

00:21:07,840 --> 00:21:11,200
the

00:21:08,320 --> 00:21:11,679
encoded decode 3d graphics from gazebo

00:21:11,200 --> 00:21:15,600
or

00:21:11,679 --> 00:21:17,679
rvs and stuff so it really enabled the

00:21:15,600 --> 00:21:20,000
the acceleration at which we can move

00:21:17,679 --> 00:21:20,000
forward

00:21:20,720 --> 00:21:24,960
and totally second to fire

00:21:25,120 --> 00:21:28,880
so this approach what you see the

00:21:27,200 --> 00:21:30,080
tooling on the right side is what we use

00:21:28,880 --> 00:21:33,440
for simulation

00:21:30,080 --> 00:21:35,120
uh we believe that it will enable the

00:21:33,440 --> 00:21:37,039
developers to push

00:21:35,120 --> 00:21:38,799
source codes very faster and the

00:21:37,039 --> 00:21:41,600
features additions will take them

00:21:38,799 --> 00:21:44,640
uh much further and we get the testing

00:21:41,600 --> 00:21:47,039
confidence as well as we move forward

00:21:44,640 --> 00:21:48,400
so with that uh really completes our

00:21:47,039 --> 00:21:52,080
talk and we hope

00:21:48,400 --> 00:21:56,080
you enjoyed it as much as we do and the

00:21:52,080 --> 00:21:56,080
last but not the least is

00:21:57,280 --> 00:22:00,960
yes we are hiring so we are really

00:21:59,360 --> 00:22:02,559
looking for go-getters

00:22:00,960 --> 00:22:06,240
and we promise there is never a day

00:22:02,559 --> 00:22:10,080
without coding so come talk to us

00:22:06,240 --> 00:22:14,000
thank you for listening thank you

00:22:10,080 --> 00:22:17,679
thank you guys great presentation so we

00:22:14,000 --> 00:22:20,640
um predominantly run out of time but

00:22:17,679 --> 00:22:22,159
uh brief digital is going to be on slack

00:22:20,640 --> 00:22:23,360
uh please join the most likely if you

00:22:22,159 --> 00:22:25,919
have any questions uh

00:22:23,360 --> 00:22:28,080
feel free to ping deepak or run directly

00:22:25,919 --> 00:22:33,600
there they're both of their there

00:22:28,080 --> 00:22:33,600

YouTube URL: https://www.youtube.com/watch?v=eu-4cvsQZS0


