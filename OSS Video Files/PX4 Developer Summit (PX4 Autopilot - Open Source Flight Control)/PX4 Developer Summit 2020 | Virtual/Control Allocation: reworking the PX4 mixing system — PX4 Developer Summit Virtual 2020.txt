Title: Control Allocation: reworking the PX4 mixing system â€” PX4 Developer Summit Virtual 2020
Publication date: 2020-07-19
Playlist: PX4 Developer Summit 2020 | Virtual
Description: 
	In the PX4 stack, the output of the controllers is converted into actuator commands by mixers.
Although very powerful for the insiders, the current mixing system is not user-friendly and is limited to static configurations. In this session, we present ongoing work on control allocation, which aims at complementing or even replacing the current mixing system.
The future control allocation module promises easier and more flexible airframe configuration while enabling new features such as the continuous control of tilt-rotor transitions, and the handling of actuator failures.
Captions: 
	00:00:00,719 --> 00:00:05,040
hello uh welcome back to the px4 lab

00:00:03,120 --> 00:00:08,080
summit guys a few

00:00:05,040 --> 00:00:09,840
audio issues here um we're live

00:00:08,080 --> 00:00:11,120
thank you for uh bearing with us thank

00:00:09,840 --> 00:00:14,719
you for sticking with us

00:00:11,120 --> 00:00:16,960
um please let us know if uh there's

00:00:14,719 --> 00:00:18,880
anything that uh we can do to make this

00:00:16,960 --> 00:00:20,880
experience better um for now let me

00:00:18,880 --> 00:00:23,760
introduce our next uh speakers

00:00:20,880 --> 00:00:25,359
control allocation record reworking the

00:00:23,760 --> 00:00:26,960
px4 mixer system um

00:00:25,359 --> 00:00:28,800
we welcome back julian the core client

00:00:26,960 --> 00:00:30,480
from los san switzerland the engineer

00:00:28,800 --> 00:00:33,360
behind judgment we just

00:00:30,480 --> 00:00:35,360
saw him live earlier today and joining

00:00:33,360 --> 00:00:35,920
him we have silvan fuhrer flight control

00:00:35,360 --> 00:00:37,680
engineer

00:00:35,920 --> 00:00:40,000
altherian sylvan's focus is on

00:00:37,680 --> 00:00:42,879
fixed-wing and beetle vehicles

00:00:40,000 --> 00:00:44,960
in the px4 stock the output of the

00:00:42,879 --> 00:00:46,480
controllers is converted into actuator

00:00:44,960 --> 00:00:48,000
commands by mixers

00:00:46,480 --> 00:00:49,600
although very powerful insiders the

00:00:48,000 --> 00:00:51,199
current mixing system is not user

00:00:49,600 --> 00:00:52,320
friendly and is limited to static

00:00:51,199 --> 00:00:54,160
configurations

00:00:52,320 --> 00:00:56,079
in this session you will learn about the

00:00:54,160 --> 00:00:59,039
ongoing work and control location

00:00:56,079 --> 00:01:01,359
which aims at complementing or even

00:00:59,039 --> 00:01:03,359
replacing the current mixing system

00:01:01,359 --> 00:01:05,199
the future control allocation module

00:01:03,359 --> 00:01:06,720
promises easier and more flexible

00:01:05,199 --> 00:01:08,560
airframe configuration

00:01:06,720 --> 00:01:09,760
while enabling new features such as the

00:01:08,560 --> 00:01:12,000
continuous control

00:01:09,760 --> 00:01:13,680
of silver transitions and the handling

00:01:12,000 --> 00:01:16,000
of actuator failures

00:01:13,680 --> 00:01:18,479
community let's welcome sylvan and

00:01:16,000 --> 00:01:18,479
julian

00:01:20,880 --> 00:01:28,400
okay okay hello everybody welcome back

00:01:26,080 --> 00:01:29,920
i'm glad to start this second

00:01:28,400 --> 00:01:32,960
presentation of the day for me

00:01:29,920 --> 00:01:36,479
uh it will be about controller location

00:01:32,960 --> 00:01:39,520
which is a work in progress

00:01:36,479 --> 00:01:40,000
that aims at improving the mixing system

00:01:39,520 --> 00:01:43,840
in

00:01:40,000 --> 00:01:46,960
dx4 so that we can do very interesting

00:01:43,840 --> 00:01:48,720
stuff like enabling handling of motor

00:01:46,960 --> 00:01:51,040
failures

00:01:48,720 --> 00:01:52,079
actual control of chilled photos during

00:01:51,040 --> 00:01:55,119
transitions

00:01:52,079 --> 00:01:57,920
and all sorts of things so i am

00:01:55,119 --> 00:01:58,799
julianna kerr i'm an r d engineer at

00:01:57,920 --> 00:02:01,520
fibonaccs

00:01:58,799 --> 00:02:03,119
and i will be representing with sylvan

00:02:01,520 --> 00:02:06,240
when can you say a few words about you

00:02:03,119 --> 00:02:09,039
yeah hi everybody um i'm salon footer i

00:02:06,240 --> 00:02:13,520
work at tyrion

00:02:09,039 --> 00:02:17,360
with for metal and fixed-wing vehicles

00:02:13,520 --> 00:02:21,040
right great so um pix4 can be

00:02:17,360 --> 00:02:24,400
used on many sorts of platforms

00:02:21,040 --> 00:02:25,520
you can use it to control multirotors

00:02:24,400 --> 00:02:28,400
with

00:02:25,520 --> 00:02:29,599
various shapes here are a few examples

00:02:28,400 --> 00:02:32,720
hexacopters

00:02:29,599 --> 00:02:36,720
tricopters quadcopters

00:02:32,720 --> 00:02:39,760
with non-squared rotors etc you can also

00:02:36,720 --> 00:02:42,560
control uh fixed-wing aircrafts

00:02:39,760 --> 00:02:43,920
detail it could be tail-seaters or tube

00:02:42,560 --> 00:02:46,959
photos

00:02:43,920 --> 00:02:50,000
um during my phd i also worked

00:02:46,959 --> 00:02:53,920
on platforms with tilted

00:02:50,000 --> 00:02:56,800
propellers that are capable of

00:02:53,920 --> 00:02:58,720
producing thrust laterally and this is

00:02:56,800 --> 00:03:02,080
when i got interested into the

00:02:58,720 --> 00:03:03,760
problem of control location then

00:03:02,080 --> 00:03:05,840
if you were connected earlier today you

00:03:03,760 --> 00:03:09,120
could see a presentation on uh

00:03:05,840 --> 00:03:09,920
on a jetman project that uses a first

00:03:09,120 --> 00:03:12,400
vectoring

00:03:09,920 --> 00:03:14,239
so that's also an interesting control

00:03:12,400 --> 00:03:16,959
location problem because

00:03:14,239 --> 00:03:19,519
you have a non-linear mapping between

00:03:16,959 --> 00:03:22,879
your actuator output and

00:03:19,519 --> 00:03:23,840
in the actual uh effect on the on on the

00:03:22,879 --> 00:03:26,319
system

00:03:23,840 --> 00:03:28,159
and yeah right now i'm working on the

00:03:26,319 --> 00:03:31,680
flybotix where we have

00:03:28,159 --> 00:03:34,560
an innovative actuation system

00:03:31,680 --> 00:03:35,440
that is sort of midway between a

00:03:34,560 --> 00:03:38,319
multicultural

00:03:35,440 --> 00:03:39,040
and a helicopter and that there are also

00:03:38,319 --> 00:03:43,280
interesting

00:03:39,040 --> 00:03:47,200
uh aspects of controller location so

00:03:43,280 --> 00:03:50,239
how is it possible we here we

00:03:47,200 --> 00:03:50,560
see a slide with a lot of things to pass

00:03:50,239 --> 00:03:53,280
but

00:03:50,560 --> 00:03:54,000
basically this is an overview of the

00:03:53,280 --> 00:03:57,360
control

00:03:54,000 --> 00:04:00,400
estimation and actuation of

00:03:57,360 --> 00:04:02,799
a drone sort of what is implemented in

00:04:00,400 --> 00:04:03,599
in this world and what i would like to

00:04:02,799 --> 00:04:07,200
focus on

00:04:03,599 --> 00:04:08,879
is the what comes inside into the

00:04:07,200 --> 00:04:12,080
actuators on the right

00:04:08,879 --> 00:04:16,400
called you and this

00:04:12,080 --> 00:04:17,759
um then is provided by a blog called a

00:04:16,400 --> 00:04:21,680
controller location

00:04:17,759 --> 00:04:25,440
this um is what will be the focus

00:04:21,680 --> 00:04:26,560
of this talk uh you have this controller

00:04:25,440 --> 00:04:29,840
location block

00:04:26,560 --> 00:04:32,560
which abstracts away

00:04:29,840 --> 00:04:34,400
the specificities of the airframe with

00:04:32,560 --> 00:04:36,960
multi-rotor

00:04:34,400 --> 00:04:38,000
fixed wing or something else from the

00:04:36,960 --> 00:04:40,160
controller which

00:04:38,000 --> 00:04:41,440
is which means we can run basically the

00:04:40,160 --> 00:04:44,240
same controllers

00:04:41,440 --> 00:04:46,160
for many types of platform so what is

00:04:44,240 --> 00:04:49,680
controller location

00:04:46,160 --> 00:04:52,880
if you have you the actuator commands

00:04:49,680 --> 00:04:53,919
these are the pvm set points that you

00:04:52,880 --> 00:04:57,919
send to your

00:04:53,919 --> 00:05:01,120
to your esc's or could be something else

00:04:57,919 --> 00:05:03,280
um then we can define g

00:05:01,120 --> 00:05:04,160
as the actuator effectiveness which is a

00:05:03,280 --> 00:05:07,520
function

00:05:04,160 --> 00:05:11,360
that for given actuator command

00:05:07,520 --> 00:05:14,080
then computes what are the torques

00:05:11,360 --> 00:05:15,280
moments and and thrust generated by the

00:05:14,080 --> 00:05:18,080
system

00:05:15,280 --> 00:05:20,080
and then the controller location problem

00:05:18,080 --> 00:05:23,440
is about finding the correct

00:05:20,080 --> 00:05:26,160
u correct actuator commands that match

00:05:23,440 --> 00:05:28,560
the moment and thrust set points that

00:05:26,160 --> 00:05:31,840
are computed by the controllers

00:05:28,560 --> 00:05:35,199
how do we do today today we

00:05:31,840 --> 00:05:38,800
are using um static mixing tables

00:05:35,199 --> 00:05:42,160
here i give an example for a quadcopter

00:05:38,800 --> 00:05:45,199
we have b which is a matrix

00:05:42,160 --> 00:05:48,560
composed of plus ones and minus ones

00:05:45,199 --> 00:05:52,080
that converts the desired torques

00:05:48,560 --> 00:05:55,520
on x y z and thrust on z

00:05:52,080 --> 00:05:56,400
into actuator commands actually you

00:05:55,520 --> 00:05:58,960
could

00:05:56,400 --> 00:06:01,600
for this particular example feel the

00:05:58,960 --> 00:06:05,360
matrix by hand you put plus ones

00:06:01,600 --> 00:06:08,160
when an actuator has a positive impact

00:06:05,360 --> 00:06:09,520
on uh one axis and minus one when it has

00:06:08,160 --> 00:06:12,560
a negative impact

00:06:09,520 --> 00:06:14,560
but in reality that's not how you should

00:06:12,560 --> 00:06:17,199
do because it's very easy

00:06:14,560 --> 00:06:18,560
uh to do it incorrectly and to introduce

00:06:17,199 --> 00:06:21,680
coupling between the axes

00:06:18,560 --> 00:06:23,759
for instance between uh for instance

00:06:21,680 --> 00:06:26,160
on an hexacopter if you use that

00:06:23,759 --> 00:06:29,440
technique then it wouldn't work at all

00:06:26,160 --> 00:06:30,160
um so in fact when you configure an

00:06:29,440 --> 00:06:33,280
airframe

00:06:30,160 --> 00:06:35,600
on px4 you will use

00:06:33,280 --> 00:06:37,440
um an airframe script here i give an

00:06:35,600 --> 00:06:41,120
example for the vehicle

00:06:37,440 --> 00:06:44,960
which will load a specific mixer

00:06:41,120 --> 00:06:48,240
and then this mixer corresponds to

00:06:44,960 --> 00:06:51,440
a few files which are now listed

00:06:48,240 --> 00:06:56,639
on the on the screen so you have

00:06:51,440 --> 00:06:56,639
um first the the mixer file

00:06:57,680 --> 00:07:04,800
click this yeah thank you

00:07:00,800 --> 00:07:08,240
the mixer file which is actually defined

00:07:04,800 --> 00:07:11,680
uh with a geometry file uh

00:07:08,240 --> 00:07:15,039
which is used to compute the

00:07:11,680 --> 00:07:16,479
static mixing tables and generate a cpp

00:07:15,039 --> 00:07:19,520
file

00:07:16,479 --> 00:07:20,720
during the compile time that is a lot of

00:07:19,520 --> 00:07:24,000
boilerplate

00:07:20,720 --> 00:07:25,520
and we think that we could get rid of

00:07:24,000 --> 00:07:28,000
most of these files and have

00:07:25,520 --> 00:07:32,160
configuration of airframe

00:07:28,000 --> 00:07:35,120
based only on parameters

00:07:32,160 --> 00:07:35,919
the mixed table generation goes as

00:07:35,120 --> 00:07:38,000
follow

00:07:35,919 --> 00:07:39,440
you have a description of the geometry

00:07:38,000 --> 00:07:42,000
of the

00:07:39,440 --> 00:07:43,680
multicopter or the drone in general and

00:07:42,000 --> 00:07:46,960
then using an actuator model

00:07:43,680 --> 00:07:49,280
you build an effectiveness matrix

00:07:46,960 --> 00:07:50,000
that you can then invert in order to

00:07:49,280 --> 00:07:53,360
have

00:07:50,000 --> 00:07:53,919
to obtain the mixer matrix this is now

00:07:53,360 --> 00:07:57,120
done

00:07:53,919 --> 00:08:00,319
by a python script at compile time but

00:07:57,120 --> 00:08:00,879
now we have an implementation of sudo

00:08:00,319 --> 00:08:05,520
inverse

00:08:00,879 --> 00:08:08,560
in the matrix library that uh

00:08:05,520 --> 00:08:09,280
that is now emerged and available so we

00:08:08,560 --> 00:08:13,599
started

00:08:09,280 --> 00:08:14,560
um to build a dynamic version of the

00:08:13,599 --> 00:08:18,319
mixer which

00:08:14,560 --> 00:08:21,440
is the controller location module

00:08:18,319 --> 00:08:24,479
yeah um so here

00:08:21,440 --> 00:08:25,360
we have the current pipeline control

00:08:24,479 --> 00:08:28,000
pipeline

00:08:25,360 --> 00:08:28,479
from the vehicle rate set point that

00:08:28,000 --> 00:08:31,520
goes

00:08:28,479 --> 00:08:32,719
into the multicultural rate control and

00:08:31,520 --> 00:08:36,479
then generate

00:08:32,719 --> 00:08:38,959
actuator controls that are

00:08:36,479 --> 00:08:40,640
are basically the thrust and torque set

00:08:38,959 --> 00:08:42,880
points that was nothing but before

00:08:40,640 --> 00:08:44,320
except they don't have units they are

00:08:42,880 --> 00:08:46,720
normal

00:08:44,320 --> 00:08:47,760
this goes into a multi-copter mixer that

00:08:46,720 --> 00:08:50,160
uses the

00:08:47,760 --> 00:08:51,200
pre-computed tables i was mentioning

00:08:50,160 --> 00:08:54,320
before

00:08:51,200 --> 00:08:57,519
and finally out to the

00:08:54,320 --> 00:08:59,200
actual devices what we suggest is to

00:08:57,519 --> 00:09:00,720
have a second pipeline

00:08:59,200 --> 00:09:03,040
where we have an angular velocity

00:09:00,720 --> 00:09:05,760
controller that is more or less the same

00:09:03,040 --> 00:09:06,480
as the multicultural rate control except

00:09:05,760 --> 00:09:10,320
that

00:09:06,480 --> 00:09:13,040
it has games with physical units

00:09:10,320 --> 00:09:14,800
it is aware of the mass and the inertia

00:09:13,040 --> 00:09:18,560
of the platform

00:09:14,800 --> 00:09:20,720
and it can first generate

00:09:18,560 --> 00:09:22,480
torque and thrust set points that have

00:09:20,720 --> 00:09:24,000
the correct units

00:09:22,480 --> 00:09:25,680
then we have the controller locator

00:09:24,000 --> 00:09:28,800
module

00:09:25,680 --> 00:09:31,440
which implements the pseudo inverse and

00:09:28,800 --> 00:09:32,160
is able to dynamically update the table

00:09:31,440 --> 00:09:35,200
if needed

00:09:32,160 --> 00:09:35,200
we will see that later

00:09:35,279 --> 00:09:39,120
and at the end this is spiked in the

00:09:38,080 --> 00:09:42,320
existing

00:09:39,120 --> 00:09:45,360
uh mixer system

00:09:42,320 --> 00:09:47,040
with a new direct mixer

00:09:45,360 --> 00:09:48,480
in order to be compatible with the

00:09:47,040 --> 00:09:50,160
current system

00:09:48,480 --> 00:09:52,640
okay a bit more information on the

00:09:50,160 --> 00:09:54,480
controller locator

00:09:52,640 --> 00:09:55,680
this is a class diagram of the

00:09:54,480 --> 00:09:58,240
controller locator

00:09:55,680 --> 00:09:59,519
on top you have the main class and

00:09:58,240 --> 00:10:04,320
what's important to see

00:09:59,519 --> 00:10:07,040
is that it uses two service classes

00:10:04,320 --> 00:10:07,519
one inherits the controller location

00:10:07,040 --> 00:10:11,040
class

00:10:07,519 --> 00:10:11,680
interface um which is basically what

00:10:11,040 --> 00:10:15,839
method

00:10:11,680 --> 00:10:18,000
you use to allocate your output

00:10:15,839 --> 00:10:20,079
and on the right side you have the

00:10:18,000 --> 00:10:23,839
actuator effectiveness

00:10:20,079 --> 00:10:26,880
interface that provides the

00:10:23,839 --> 00:10:28,480
the effectiveness matrix so we have for

00:10:26,880 --> 00:10:31,839
example in the center the actuator

00:10:28,480 --> 00:10:35,200
effectiveness multi-rotor

00:10:31,839 --> 00:10:36,880
that lets you configure your materials

00:10:35,200 --> 00:10:39,519
or geometry with parameters

00:10:36,880 --> 00:10:40,880
and provides the effectiveness what's

00:10:39,519 --> 00:10:43,839
important to note here

00:10:40,880 --> 00:10:44,480
is that if you have a very specific

00:10:43,839 --> 00:10:46,160
platform

00:10:44,480 --> 00:10:48,160
that cannot be described with the

00:10:46,160 --> 00:10:50,399
implementations we would provide

00:10:48,160 --> 00:10:51,680
then you can easily add an

00:10:50,399 --> 00:10:52,800
implementation of a creator

00:10:51,680 --> 00:10:56,959
effectiveness

00:10:52,800 --> 00:10:59,839
if you have same way if you have

00:10:56,959 --> 00:11:00,399
a very specific and fancy allocation

00:10:59,839 --> 00:11:02,480
method

00:11:00,399 --> 00:11:04,320
then you can implement it yourself quite

00:11:02,480 --> 00:11:08,800
easy

00:11:04,320 --> 00:11:12,800
right now that we have seen

00:11:08,800 --> 00:11:15,519
the the way this is implemented

00:11:12,800 --> 00:11:18,000
i will hand it over to to sylvan who

00:11:15,519 --> 00:11:18,000
will show

00:11:18,160 --> 00:11:22,560
a few real world tests and demonstrate

00:11:20,880 --> 00:11:24,959
the advantages of this new control

00:11:22,560 --> 00:11:24,959
location

00:11:25,920 --> 00:11:34,240
yes exactly thanks a lot julia

00:11:30,240 --> 00:11:36,959
cover as you mentioned um

00:11:34,240 --> 00:11:38,760
concrete use where actually this new

00:11:36,959 --> 00:11:42,079
allocation

00:11:38,760 --> 00:11:45,279
architecture to step

00:11:42,079 --> 00:11:46,240
we have at the moment in px4 um first

00:11:45,279 --> 00:11:48,560
example i will

00:11:46,240 --> 00:11:50,079
go with a hexacopter actually i could go

00:11:48,560 --> 00:11:52,639
with

00:11:50,079 --> 00:11:53,760
multirotor for this example but um that

00:11:52,639 --> 00:11:56,399
has more than four

00:11:53,760 --> 00:11:58,480
but here with the hexacopter i assume

00:11:56,399 --> 00:12:00,959
that this is the first time i

00:11:58,480 --> 00:12:02,800
configure hexacopter in px4 so that you

00:12:00,959 --> 00:12:05,440
don't have any special mixer

00:12:02,800 --> 00:12:06,000
in place for it but in that case what we

00:12:05,440 --> 00:12:08,800
need to do

00:12:06,000 --> 00:12:10,399
is we need to measure the vehicle for

00:12:08,800 --> 00:12:13,839
weight and inertia

00:12:10,399 --> 00:12:15,600
and give it type and that means define

00:12:13,839 --> 00:12:18,639
or

00:12:15,600 --> 00:12:20,160
set all the specific parameters for all

00:12:18,639 --> 00:12:22,880
the motors which is

00:12:20,160 --> 00:12:24,240
basically the thrust coefficient the

00:12:22,880 --> 00:12:27,040
drag coefficient

00:12:24,240 --> 00:12:29,920
the distance of the motor to the cg as

00:12:27,040 --> 00:12:31,279
well as the tilt of the motor

00:12:29,920 --> 00:12:33,920
so these are all parameters that you

00:12:31,279 --> 00:12:38,240
either can measure or you can

00:12:33,920 --> 00:12:39,600
find out we are modeling um

00:12:38,240 --> 00:12:41,839
but the good thing is all that if you

00:12:39,600 --> 00:12:42,880
don't know them precisely um it's also

00:12:41,839 --> 00:12:45,839
fine if you

00:12:42,880 --> 00:12:47,839
leave some mellows at default um then

00:12:45,839 --> 00:12:49,920
you just need to

00:12:47,839 --> 00:12:51,680
put in a bit more work in tuning on your

00:12:49,920 --> 00:12:54,240
eyes tuning is

00:12:51,680 --> 00:12:56,320
usually pretty easy if the model is

00:12:54,240 --> 00:12:57,920
correct

00:12:56,320 --> 00:13:02,480
so what then the algorithm does it

00:12:57,920 --> 00:13:02,480
computes this effectiveness matrix

00:13:03,040 --> 00:13:09,920
g which then

00:13:06,399 --> 00:13:12,800
as julia explained in his talk um

00:13:09,920 --> 00:13:14,880
can be inverted with a pseudo inverse

00:13:12,800 --> 00:13:18,160
and then of course we can solve for the

00:13:14,880 --> 00:13:18,839
actuator sub points in this case these

00:13:18,160 --> 00:13:21,680
six

00:13:18,839 --> 00:13:24,720
actuators

00:13:21,680 --> 00:13:27,279
so this is an actual

00:13:24,720 --> 00:13:28,639
and static mix that we already have now

00:13:27,279 --> 00:13:32,079
in px4

00:13:28,639 --> 00:13:33,279
but i will show you now an example of

00:13:32,079 --> 00:13:35,279
something that we can't do with the

00:13:33,279 --> 00:13:39,120
current system and this is

00:13:35,279 --> 00:13:41,519
actually exploiting the um

00:13:39,120 --> 00:13:43,120
the case that the hexacopter is over

00:13:41,519 --> 00:13:46,399
actuated so it has more

00:13:43,120 --> 00:13:49,360
motors than it needs to control its its

00:13:46,399 --> 00:13:49,760
attitude of the three moments as well as

00:13:49,360 --> 00:13:53,360
the

00:13:49,760 --> 00:13:57,040
thrust and

00:13:53,360 --> 00:13:58,720
that means that so if you go into

00:13:57,040 --> 00:14:01,680
more detail into this matrix you have

00:13:58,720 --> 00:14:03,680
this six columns indicating or

00:14:01,680 --> 00:14:05,519
reflecting the effect of these six

00:14:03,680 --> 00:14:06,160
actuators to the moment as well as to

00:14:05,519 --> 00:14:08,880
the

00:14:06,160 --> 00:14:08,880
thrust force

00:14:09,600 --> 00:14:13,040
and you have as i mentioned before you

00:14:12,160 --> 00:14:15,040
need four

00:14:13,040 --> 00:14:16,639
to control four set points the four the

00:14:15,040 --> 00:14:16,959
three moments as well as the thrust in

00:14:16,639 --> 00:14:20,240
in z

00:14:16,959 --> 00:14:22,880
direction and

00:14:20,240 --> 00:14:23,600
you have six available out actuator

00:14:22,880 --> 00:14:27,839
settings

00:14:23,600 --> 00:14:30,800
that means it's over actuated now

00:14:27,839 --> 00:14:32,399
actually we can use this over actuation

00:14:30,800 --> 00:14:33,519
to control the vehicle in case of a

00:14:32,399 --> 00:14:36,399
motor failure

00:14:33,519 --> 00:14:37,279
so in this example i assume that i know

00:14:36,399 --> 00:14:39,680
immediately that

00:14:37,279 --> 00:14:41,600
motor in this case number two has failed

00:14:39,680 --> 00:14:43,839
and then of course the whole

00:14:41,600 --> 00:14:44,800
effect of this motor to the moment as

00:14:43,839 --> 00:14:48,079
well to the thrust

00:14:44,800 --> 00:14:50,240
is zero so we know that and we can

00:14:48,079 --> 00:14:53,040
recompute the effectiveness matrix

00:14:50,240 --> 00:14:54,160
and then end up with a four column

00:14:53,040 --> 00:14:58,240
matrix

00:14:54,160 --> 00:15:00,079
which is still fine for the control of a

00:14:58,240 --> 00:15:02,720
multi-router

00:15:00,079 --> 00:15:05,199
enough talking i think some video show

00:15:02,720 --> 00:15:05,199
you more

00:15:05,600 --> 00:15:11,199
how it performs so here in this task i

00:15:08,320 --> 00:15:14,000
have from the left side

00:15:11,199 --> 00:15:16,399
we a motor failure with the new dynamic

00:15:14,000 --> 00:15:18,480
allocation on the and on the right side

00:15:16,399 --> 00:15:19,519
it's a test with the current static

00:15:18,480 --> 00:15:21,760
allocation

00:15:19,519 --> 00:15:24,320
and i fly in position mode and let's see

00:15:21,760 --> 00:15:24,320
what happens

00:15:24,839 --> 00:15:30,560
when the motor fail so in first case

00:15:28,320 --> 00:15:30,560
here

00:15:30,959 --> 00:15:36,800
the failure happens at this time

00:15:34,399 --> 00:15:38,000
and you see if you look closely that

00:15:36,800 --> 00:15:40,800
this motor here

00:15:38,000 --> 00:15:42,160
has stopped working so it's it's zero

00:15:40,800 --> 00:15:44,800
rpms

00:15:42,160 --> 00:15:45,600
and the vehicle still keeps its position

00:15:44,800 --> 00:15:48,639
quite nice

00:15:45,600 --> 00:15:50,320
and didn't see too much of it

00:15:48,639 --> 00:15:52,399
of movement actually and then failure

00:15:50,320 --> 00:15:55,519
happened compared to that

00:15:52,399 --> 00:15:57,839
with the current static

00:15:55,519 --> 00:15:59,120
allocation in place you then have the

00:15:57,839 --> 00:16:02,800
failure you see an immediate

00:15:59,120 --> 00:16:04,639
response of the vehicle and it then

00:16:02,800 --> 00:16:05,920
manages to stabilize itself as

00:16:04,639 --> 00:16:08,560
integrators fill up

00:16:05,920 --> 00:16:09,519
but you also see that it's not as nice

00:16:08,560 --> 00:16:11,680
as before and

00:16:09,519 --> 00:16:12,639
i had really hard times controlling it

00:16:11,680 --> 00:16:14,399
and

00:16:12,639 --> 00:16:16,000
i'm preventing it from flying away and

00:16:14,399 --> 00:16:17,600
also the dynamics of the whole system

00:16:16,000 --> 00:16:20,079
have changed because

00:16:17,600 --> 00:16:20,880
these integrators introduce a lot of

00:16:20,079 --> 00:16:23,920
error and

00:16:20,880 --> 00:16:26,320
different dynamics than before

00:16:23,920 --> 00:16:27,360
so it's i'm just just about to be able

00:16:26,320 --> 00:16:31,600
to land it

00:16:27,360 --> 00:16:33,279
whereas with the dynamic allocation

00:16:31,600 --> 00:16:35,600
i almost feel no different so i can move

00:16:33,279 --> 00:16:40,399
the drone left right

00:16:35,600 --> 00:16:43,360
forward and backward

00:16:40,399 --> 00:16:45,120
so the effectiveness matrix is

00:16:43,360 --> 00:16:46,800
recalculated to

00:16:45,120 --> 00:16:49,360
account for this motor that's switched

00:16:46,800 --> 00:16:49,360
off and

00:16:49,519 --> 00:16:56,639
the remaining control loops control it

00:16:53,360 --> 00:16:58,800
almost the same as before all right

00:16:56,639 --> 00:17:01,279
now for another example which is the

00:16:58,800 --> 00:17:04,079
tiltrot rivito

00:17:01,279 --> 00:17:05,839
a tiltrotretol is a fixed-wing vehicle

00:17:04,079 --> 00:17:08,559
that uses the motors

00:17:05,839 --> 00:17:09,919
um pointed horizontally vertically to

00:17:08,559 --> 00:17:12,720
take off and land

00:17:09,919 --> 00:17:15,679
but then in in cruise flight it tilts

00:17:12,720 --> 00:17:18,319
them forward to accelerate

00:17:15,679 --> 00:17:19,199
so it's a system with a total of seven

00:17:18,319 --> 00:17:22,640
actuators

00:17:19,199 --> 00:17:25,839
and for

00:17:22,640 --> 00:17:27,919
for the allocation we need to model the

00:17:25,839 --> 00:17:28,960
moments and forces from the actuators to

00:17:27,919 --> 00:17:31,840
the system

00:17:28,960 --> 00:17:33,760
and do this in this example with a

00:17:31,840 --> 00:17:37,120
pretty rough

00:17:33,760 --> 00:17:40,880
model that still leads to this

00:17:37,120 --> 00:17:44,080
quite complicated formulations

00:17:40,880 --> 00:17:45,919
and we try if you try to fit this into a

00:17:44,080 --> 00:17:46,880
matrix as before on the on the

00:17:45,919 --> 00:17:49,200
hexacopter

00:17:46,880 --> 00:17:51,600
example you'll see that this doesn't end

00:17:49,200 --> 00:17:54,720
up well because you have here this

00:17:51,600 --> 00:17:59,919
this cosine sine terms in in it

00:17:54,720 --> 00:18:01,840
and also some actuator settings in

00:17:59,919 --> 00:18:03,760
coupling terms and other in other parts

00:18:01,840 --> 00:18:06,320
of the matrix so this this isn't

00:18:03,760 --> 00:18:07,600
for sure not linear and that's also not

00:18:06,320 --> 00:18:09,520
invertible

00:18:07,600 --> 00:18:10,799
so what we do here to have the system

00:18:09,520 --> 00:18:15,360
still controllable

00:18:10,799 --> 00:18:18,000
is that we calculate first um the

00:18:15,360 --> 00:18:19,200
some trim conditions of the motors and

00:18:18,000 --> 00:18:22,720
the tilt motors

00:18:19,200 --> 00:18:25,280
to allocate the desired forces

00:18:22,720 --> 00:18:26,400
in horizontal and horizontal vertical

00:18:25,280 --> 00:18:29,760
and horizontal

00:18:26,400 --> 00:18:32,880
direction and with these actuator trim

00:18:29,760 --> 00:18:35,360
settings then we can linearize

00:18:32,880 --> 00:18:36,880
the effectiveness matrix and from there

00:18:35,360 --> 00:18:38,080
on it's done the same story as before of

00:18:36,880 --> 00:18:39,840
the hexacopter

00:18:38,080 --> 00:18:43,200
we can invert this and solve for the

00:18:39,840 --> 00:18:45,120
actuator settings

00:18:43,200 --> 00:18:47,280
in real flight it looks done like this

00:18:45,120 --> 00:18:49,520
so here i tilt

00:18:47,280 --> 00:18:52,080
the propellers of the vtol forwards to

00:18:49,520 --> 00:18:56,080
accelerate

00:18:52,080 --> 00:18:57,919
and it keeps on recalculating

00:18:56,080 --> 00:19:01,760
the effectiveness matrix depending on

00:18:57,919 --> 00:19:04,720
this tilt and this leads to a

00:19:01,760 --> 00:19:05,520
very nice and smooth flight um in this

00:19:04,720 --> 00:19:08,160
like

00:19:05,520 --> 00:19:10,080
transition mode or hybrid mode where the

00:19:08,160 --> 00:19:12,480
vehicle is actually still in motor rotor

00:19:10,080 --> 00:19:14,720
mode but it also picks up air speed and

00:19:12,480 --> 00:19:14,720
does

00:19:15,039 --> 00:19:18,480
yeah it's in between fixed wing and

00:19:16,480 --> 00:19:19,360
multicopter flight and it here is an

00:19:18,480 --> 00:19:21,679
onboard view

00:19:19,360 --> 00:19:23,280
motors hold forward to accelerate as

00:19:21,679 --> 00:19:26,799
well as to control the yaw

00:19:23,280 --> 00:19:31,039
of the vehicle and all the time the

00:19:26,799 --> 00:19:31,039
effectiveness matrix is recalculated

00:19:31,679 --> 00:19:37,120
okay so

00:19:35,200 --> 00:19:38,559
the current state of the whole

00:19:37,120 --> 00:19:40,720
integration to px4

00:19:38,559 --> 00:19:42,320
is that there's a pr open since quite a

00:19:40,720 --> 00:19:44,880
while now that

00:19:42,320 --> 00:19:46,960
has got quite a bit of testing now

00:19:44,880 --> 00:19:48,559
especially in the last couple of weeks

00:19:46,960 --> 00:19:50,400
so here on the right side you see all

00:19:48,559 --> 00:19:51,120
the vehicles that i personally tested it

00:19:50,400 --> 00:19:54,000
with

00:19:51,120 --> 00:19:55,200
so it's a quadcopter helicopter a

00:19:54,000 --> 00:19:57,600
fixed-wing vehicle

00:19:55,200 --> 00:20:00,080
and two vehicles tilt rotor as well as a

00:19:57,600 --> 00:20:03,200
tail seater

00:20:00,080 --> 00:20:05,600
but the state is that it's different

00:20:03,200 --> 00:20:07,280
for for some vehicles and for others for

00:20:05,600 --> 00:20:09,600
example for multirotors

00:20:07,280 --> 00:20:11,440
it's quite advanced so there it's really

00:20:09,600 --> 00:20:13,120
um the interface is there that you set

00:20:11,440 --> 00:20:15,840
all the vehicle settings

00:20:13,120 --> 00:20:16,240
geometries in in the parameters and you

00:20:15,840 --> 00:20:20,640
can

00:20:16,240 --> 00:20:23,200
basically add any motor anywhere

00:20:20,640 --> 00:20:24,000
for the other vehicles it's now it was

00:20:23,200 --> 00:20:26,480
it's up to now

00:20:24,000 --> 00:20:28,720
a quite manual process you need to add

00:20:26,480 --> 00:20:30,799
your effectiveness matrix yourself

00:20:28,720 --> 00:20:32,559
and then of course recompile but once

00:20:30,799 --> 00:20:35,360
you have that you also see

00:20:32,559 --> 00:20:39,039
clear benefits compared to the static

00:20:35,360 --> 00:20:39,039
mixer that we currently have in px4

00:20:41,200 --> 00:20:46,320
yeah you can check out the the pr

00:20:44,799 --> 00:20:48,960
for more information about the current

00:20:46,320 --> 00:20:51,520
state and of course we are

00:20:48,960 --> 00:20:52,400
we welcome any contribution be it review

00:20:51,520 --> 00:20:55,440
or

00:20:52,400 --> 00:20:57,440
coding or of course all the test flying

00:20:55,440 --> 00:20:59,760
to really improve this and bring it in

00:20:57,440 --> 00:20:59,760
soon

00:21:00,840 --> 00:21:07,360
yeah so conclusion for

00:21:04,480 --> 00:21:08,159
for our talk about this new control

00:21:07,360 --> 00:21:13,200
allocation

00:21:08,159 --> 00:21:16,080
architecture let me first point out the

00:21:13,200 --> 00:21:18,640
the new ease of configuring that we

00:21:16,080 --> 00:21:22,080
would offer with this allocation

00:21:18,640 --> 00:21:23,840
so instead of having the static airframe

00:21:22,080 --> 00:21:26,000
configs and mixers

00:21:23,840 --> 00:21:28,000
that you need to actually change in code

00:21:26,000 --> 00:21:30,799
to to have a new vehicle

00:21:28,000 --> 00:21:32,799
you can now do this by the maya

00:21:30,799 --> 00:21:34,799
parameters

00:21:32,799 --> 00:21:36,960
um and thus this extends also the

00:21:34,799 --> 00:21:39,120
possible ways

00:21:36,960 --> 00:21:40,960
or the possible airframes that we can

00:21:39,120 --> 00:21:43,039
support with px4

00:21:40,960 --> 00:21:44,000
as well as we have no no limits anymore

00:21:43,039 --> 00:21:47,520
you can add

00:21:44,000 --> 00:21:51,200
any any kind of actuation that you

00:21:47,520 --> 00:21:51,200
cannot can come up with

00:21:51,520 --> 00:21:55,520
then i've also showed into this car in

00:21:53,840 --> 00:21:57,600
the couple of videos that i showed

00:21:55,520 --> 00:22:00,799
that it increases the performance as

00:21:57,600 --> 00:22:03,840
well as the robustness of the whole

00:22:00,799 --> 00:22:07,200
flight controls system

00:22:03,840 --> 00:22:09,679
as for example for hexacopter it added

00:22:07,200 --> 00:22:10,960
robustness with providing full tolerance

00:22:09,679 --> 00:22:13,039
control

00:22:10,960 --> 00:22:14,960
and for the tilt rotor the example was

00:22:13,039 --> 00:22:17,440
that there you have smoother transition

00:22:14,960 --> 00:22:19,679
smoother

00:22:17,440 --> 00:22:21,039
forward flight while still being in

00:22:19,679 --> 00:22:23,919
multicopter flight and

00:22:21,039 --> 00:22:27,840
exploiting all the actuators that you

00:22:23,919 --> 00:22:29,760
have in this state

00:22:27,840 --> 00:22:31,919
last but not least as this is a dev

00:22:29,760 --> 00:22:33,280
summit especially for all developers out

00:22:31,919 --> 00:22:36,880
there

00:22:33,280 --> 00:22:38,400
with this new architecture we add a way

00:22:36,880 --> 00:22:40,640
of

00:22:38,400 --> 00:22:41,520
simplifying the current control

00:22:40,640 --> 00:22:43,679
structure

00:22:41,520 --> 00:22:44,559
especially for retail you have at the

00:22:43,679 --> 00:22:46,320
moment

00:22:44,559 --> 00:22:47,679
separate modules for multi-copter and

00:22:46,320 --> 00:22:50,559
for fixed-wing running

00:22:47,679 --> 00:22:52,559
which then gets fused together to make

00:22:50,559 --> 00:22:56,000
something flyable

00:22:52,559 --> 00:22:58,400
but with this new allocation

00:22:56,000 --> 00:22:59,679
in place we could have a sim single

00:22:58,400 --> 00:23:02,000
simplified

00:22:59,679 --> 00:23:03,440
a singular attitude as well as array

00:23:02,000 --> 00:23:07,280
controller

00:23:03,440 --> 00:23:09,200
that then also gets allocated

00:23:07,280 --> 00:23:11,360
in one allocator to the old actuators

00:23:09,200 --> 00:23:14,799
you have being its flaps or

00:23:11,360 --> 00:23:14,799
motors or whatever

00:23:16,799 --> 00:23:24,000
yes that's it's from my side

00:23:20,080 --> 00:23:24,000
so here is for your questions

00:23:25,360 --> 00:23:31,039
awesome thank you guys we're going to

00:23:26,720 --> 00:23:31,039
load questions on silvan's screen right

00:23:31,480 --> 00:23:34,480

YouTube URL: https://www.youtube.com/watch?v=xjLM9whwjO4


