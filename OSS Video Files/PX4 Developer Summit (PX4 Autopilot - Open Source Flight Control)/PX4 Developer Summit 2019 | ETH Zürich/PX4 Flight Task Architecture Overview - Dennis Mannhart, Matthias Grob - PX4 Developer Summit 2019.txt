Title: PX4 Flight Task Architecture Overview - Dennis Mannhart, Matthias Grob - PX4 Developer Summit 2019
Publication date: 2019-07-03
Playlist: PX4 Developer Summit 2019 | ETH ZÃ¼rich
Description: 
	Dennis Mannhart
Engineer, Yuneec Research

Matthias Grob
Engineer, Auterion
PX4 Maintainer

With the goal to improve modularization, extensibility of the multicopter setpoint generation, the so-called flight task architecture was implemented beginning of 2018. This session is for developers who want to familiarize themselves with the core idea, the advantages, the details, and the current state of this implementation. Also, questions are answered, and feedback or new ideas are welcome.
Captions: 
	00:00:07,410 --> 00:00:12,640
welcome everyone to

00:00:10,219 --> 00:00:15,730
the recently introduced flight tasks are

00:00:12,640 --> 00:00:19,480
Tector we began development of this

00:00:15,730 --> 00:00:23,619
architecture in 2017 it was merged into

00:00:19,480 --> 00:00:26,710
master into in 2018 and now it will be

00:00:23,619 --> 00:00:28,779
part of the release 1.9 I'm here

00:00:26,710 --> 00:00:32,079
together with Dennis manhart my

00:00:28,779 --> 00:00:34,390
colleague from unique research and I

00:00:32,079 --> 00:00:36,940
myself and Matias group and I'm now

00:00:34,390 --> 00:00:41,800
working at out Arian as a flight control

00:00:36,940 --> 00:00:44,320
engineer now to begin with we start from

00:00:41,800 --> 00:00:48,010
the overview because I'm sure you all

00:00:44,320 --> 00:00:50,050
know px4 but I want to be make sure that

00:00:48,010 --> 00:00:52,420
we are all on the same page and that you

00:00:50,050 --> 00:00:55,539
know what part of Peaks for we're

00:00:52,420 --> 00:00:59,500
talking about so we have an autopilot

00:00:55,539 --> 00:01:02,769
px4 we have input data like sensors and

00:00:59,500 --> 00:01:05,830
RC and we have output data like commands

00:01:02,769 --> 00:01:09,430
to an actuator that make our vehicle do

00:01:05,830 --> 00:01:12,430
something and in between we have a lot

00:01:09,430 --> 00:01:15,130
of modules that are part of px4 we have

00:01:12,430 --> 00:01:17,920
drivers to get the input to our modules

00:01:15,130 --> 00:01:22,860
we have drivers to get the output to our

00:01:17,920 --> 00:01:22,860
actuators and in between we have a

00:01:24,000 --> 00:01:30,520
processing line of like estimation and

00:01:27,909 --> 00:01:32,619
control now for all the different

00:01:30,520 --> 00:01:36,009
vehicle types like multicopter

00:01:32,619 --> 00:01:39,430
fixed-wing VTOL we have different such

00:01:36,009 --> 00:01:42,030
processing lines of modules but right

00:01:39,430 --> 00:01:45,399
now we will focus on a multicopter

00:01:42,030 --> 00:01:47,170
control pipeline because that's where

00:01:45,399 --> 00:01:49,990
the flight task or flight task

00:01:47,170 --> 00:01:52,329
architecture was introduced so at the

00:01:49,990 --> 00:01:55,539
beginning we have a sensors module that

00:01:52,329 --> 00:01:57,039
takes the date sensor data in and we

00:01:55,539 --> 00:01:59,820
have the estimator so the last

00:01:57,039 --> 00:02:04,659
presentation was exactly at that point

00:01:59,820 --> 00:02:07,390
then we have control pipeline for the

00:02:04,659 --> 00:02:10,450
different states for multicopter that is

00:02:07,390 --> 00:02:13,540
position attitude and rate and that's

00:02:10,450 --> 00:02:15,880
where you where you put in your set

00:02:13,540 --> 00:02:19,270
point to make your vehicle act in a

00:02:15,880 --> 00:02:22,510
certain way in a different mode and the

00:02:19,270 --> 00:02:25,390
red part here is we're on a high level

00:02:22,510 --> 00:02:26,500
if you want to go make your vehicle to

00:02:25,390 --> 00:02:29,470
go to a certain

00:02:26,500 --> 00:02:33,100
in 3d space you want to put your

00:02:29,470 --> 00:02:35,560
setpoint in and that's also like where

00:02:33,100 --> 00:02:39,100
where every book everyone was adding his

00:02:35,560 --> 00:02:40,870
his particular mode basically then on

00:02:39,100 --> 00:02:43,240
the top we have also certain

00:02:40,870 --> 00:02:45,280
housekeeping modules like the commander

00:02:43,240 --> 00:02:47,470
keeping an overview over everything and

00:02:45,280 --> 00:02:50,470
like jumping in if something goes wrong

00:02:47,470 --> 00:02:53,130
and mavar link and logger to handle

00:02:50,470 --> 00:02:57,400
communication to the outside world and

00:02:53,130 --> 00:03:05,020
enable log analysis afterwards now let's

00:02:57,400 --> 00:03:07,570
jump into that red spot here now the

00:03:05,020 --> 00:03:09,420
position controller was where you put in

00:03:07,570 --> 00:03:12,910
your set points to make your vehicle

00:03:09,420 --> 00:03:14,560
behave in a certain way and you might

00:03:12,910 --> 00:03:16,780
ask yourself why should you change

00:03:14,560 --> 00:03:18,610
anything about that like it was working

00:03:16,780 --> 00:03:21,940
all the modes were behaving like you

00:03:18,610 --> 00:03:24,430
expect so why should you change anything

00:03:21,940 --> 00:03:27,400
at all and introduce a lot of problems

00:03:24,430 --> 00:03:30,040
and complexity now there was already

00:03:27,400 --> 00:03:32,530
there were already a lot of problems and

00:03:30,040 --> 00:03:34,959
complexity because the position control

00:03:32,530 --> 00:03:38,230
became that centre of behavior

00:03:34,959 --> 00:03:41,920
everyone was adding his stuff and the

00:03:38,230 --> 00:03:46,060
the lines of that modules peaked at 3.5

00:03:41,920 --> 00:03:48,700
K lines of code for one module now all

00:03:46,060 --> 00:03:51,340
these flight modes that we support were

00:03:48,700 --> 00:03:53,860
scattered over this file so if you have

00:03:51,340 --> 00:03:55,989
you would have just as an example here

00:03:53,860 --> 00:03:58,959
all these if statements you would check

00:03:55,989 --> 00:04:01,989
am i in my mode then I do something else

00:03:58,959 --> 00:04:06,040
or overwrite set points and this at the

00:04:01,989 --> 00:04:08,590
end gets really hard to debug and I see

00:04:06,040 --> 00:04:11,410
we've seen as a requirement for all the

00:04:08,590 --> 00:04:13,269
companies to to enable differentiation

00:04:11,410 --> 00:04:15,760
for their product they want to have

00:04:13,269 --> 00:04:18,250
their own modes and their own logical

00:04:15,760 --> 00:04:21,970
behavior so we have to change something

00:04:18,250 --> 00:04:25,240
about that to make it easier so the

00:04:21,970 --> 00:04:29,229
biggest goal is to simplify for any

00:04:25,240 --> 00:04:32,290
developer any company to add a new mode

00:04:29,229 --> 00:04:33,160
or behavior of the vehicle so that is

00:04:32,290 --> 00:04:37,030
our main goal

00:04:33,160 --> 00:04:40,330
and for this to achieve it has to be

00:04:37,030 --> 00:04:43,389
modular and easy to debug

00:04:40,330 --> 00:04:46,720
this brings us to a library design where

00:04:43,389 --> 00:04:50,080
there is one class for each behavior for

00:04:46,720 --> 00:04:52,990
each mode for each type of let's say

00:04:50,080 --> 00:04:55,060
it's moving follow me all these

00:04:52,990 --> 00:05:00,009
different kinds of things you can do

00:04:55,060 --> 00:05:02,409
with your groan and for this to work all

00:05:00,009 --> 00:05:06,099
all the modes need to have a clear

00:05:02,409 --> 00:05:09,280
output interface to to interface to the

00:05:06,099 --> 00:05:11,919
post core position control the PID which

00:05:09,280 --> 00:05:16,319
will rely on which is already there and

00:05:11,919 --> 00:05:16,319
you don't have to take care of yourself

00:05:16,860 --> 00:05:23,650
so as I already said one of the main

00:05:21,069 --> 00:05:25,360
goal is to that you don't have to care

00:05:23,650 --> 00:05:28,389
about the position control so there is

00:05:25,360 --> 00:05:33,270
one class for this and it runs for every

00:05:28,389 --> 00:05:36,280
flight tasks that you produce yourself

00:05:33,270 --> 00:05:39,370
one other goal was the flight task

00:05:36,280 --> 00:05:41,080
consumes any input you want let's say if

00:05:39,370 --> 00:05:43,330
you follow something you want to know

00:05:41,080 --> 00:05:45,849
where the target is you for sure want to

00:05:43,330 --> 00:05:49,120
know where the vehicle is so you can

00:05:45,849 --> 00:05:52,690
consume all the topics and all the data

00:05:49,120 --> 00:05:55,150
you want but you need to also take care

00:05:52,690 --> 00:05:57,370
of yourself if that data is ready and if

00:05:55,150 --> 00:06:00,849
it's not ready then you need to be able

00:05:57,370 --> 00:06:03,190
to report that you cannot run so then

00:06:00,849 --> 00:06:05,889
the rest of the system can take care to

00:06:03,190 --> 00:06:10,120
enable a failsafe to switch to another

00:06:05,889 --> 00:06:14,349
task or mode and in the end one one of

00:06:10,120 --> 00:06:16,539
the big goals is also to make it easy to

00:06:14,349 --> 00:06:21,400
run this on the microcontroller it

00:06:16,539 --> 00:06:23,680
should not have too much overhead now

00:06:21,400 --> 00:06:26,469
you might think we're fruit that all go

00:06:23,680 --> 00:06:28,779
I said the position controller is the

00:06:26,469 --> 00:06:31,419
center of all the behavior and we want

00:06:28,779 --> 00:06:34,509
to rebase akhira move it from there

00:06:31,419 --> 00:06:36,849
I have to say that is not the case it's

00:06:34,509 --> 00:06:39,159
now in a library in that folder red is

00:06:36,849 --> 00:06:41,319
written there and it's still

00:06:39,159 --> 00:06:43,690
instantiated in the position controller

00:06:41,319 --> 00:06:47,020
but the position controller only calls

00:06:43,690 --> 00:06:48,839
it so there you will not have a lot of

00:06:47,020 --> 00:06:52,330
change anymore

00:06:48,839 --> 00:06:54,250
it all the flight asks are basically in

00:06:52,330 --> 00:06:57,160
front of the position controllers

00:06:54,250 --> 00:06:59,320
they are set point generators to act on

00:06:57,160 --> 00:07:03,340
the position controller and give it

00:06:59,320 --> 00:07:06,070
commands and all the interfaces are your

00:07:03,340 --> 00:07:08,920
messages so everything you subscribe in

00:07:06,070 --> 00:07:11,560
your flight tasks is through Europe and

00:07:08,920 --> 00:07:14,520
also the output to the position control

00:07:11,560 --> 00:07:17,500
module are your messages so you can

00:07:14,520 --> 00:07:20,860
potentially move your flight task to

00:07:17,500 --> 00:07:22,900
another module to a separate companion

00:07:20,860 --> 00:07:27,940
computer if the architecture is further

00:07:22,900 --> 00:07:31,330
enhanced so it's portable basically now

00:07:27,940 --> 00:07:33,940
I said that the output interface of a

00:07:31,330 --> 00:07:36,100
flight task is the important thing such

00:07:33,940 --> 00:07:38,910
that all the fly tasks run with the same

00:07:36,100 --> 00:07:43,510
position controller and that output

00:07:38,910 --> 00:07:46,450
interface the main part of it is the set

00:07:43,510 --> 00:07:49,600
point so the set point is designed to

00:07:46,450 --> 00:07:53,169
enable trajectories a trajectory has a

00:07:49,600 --> 00:07:55,240
series of position position set points

00:07:53,169 --> 00:07:58,480
velocity set points acceleration set

00:07:55,240 --> 00:08:01,080
points and some others part of them are

00:07:58,480 --> 00:08:05,710
just for logging part of them are for

00:08:01,080 --> 00:08:08,380
legacy reasons now any now you might

00:08:05,710 --> 00:08:10,479
think ooh if I write a fly task I have

00:08:08,380 --> 00:08:13,270
to set a lot of set points but you don't

00:08:10,479 --> 00:08:16,150
have to set all of them you can produce

00:08:13,270 --> 00:08:18,610
any combination that suits your needs

00:08:16,150 --> 00:08:21,190
for example if you just want to hold

00:08:18,610 --> 00:08:23,950
position you would set the position set

00:08:21,190 --> 00:08:28,450
point and leave everything else as nan

00:08:23,950 --> 00:08:30,370
nan in this interface means it's not set

00:08:28,450 --> 00:08:32,830
you should not control it I don't care

00:08:30,370 --> 00:08:35,680
about it so for example you could also

00:08:32,830 --> 00:08:39,339
set a velocity set the position to none

00:08:35,680 --> 00:08:42,630
and you will act on that velocity and

00:08:39,339 --> 00:08:45,100
the position will not be held anymore

00:08:42,630 --> 00:08:48,400
additionally in that interface we also

00:08:45,100 --> 00:08:50,830
have constraints because a knife

00:08:48,400 --> 00:08:53,410
solution to go somewhere for example is

00:08:50,830 --> 00:08:56,200
just to set a position set point there

00:08:53,410 --> 00:09:02,800
but then you want to limit the speed to

00:08:56,200 --> 00:09:06,250
go there that's where you do it now just

00:09:02,800 --> 00:09:07,990
to say the the set points this interface

00:09:06,250 --> 00:09:10,990
everything that you put out

00:09:07,990 --> 00:09:14,470
your flight task is locked in a message

00:09:10,990 --> 00:09:16,750
and also the set point that in the end

00:09:14,470 --> 00:09:19,089
gets executed for example if you set a

00:09:16,750 --> 00:09:21,430
position setpoint and the position

00:09:19,089 --> 00:09:24,910
controller generates a velocity setpoint

00:09:21,430 --> 00:09:27,070
and thrust out of that is also locked so

00:09:24,910 --> 00:09:29,320
it's really easy to debug in the end

00:09:27,070 --> 00:09:39,550
where your pocket is where your error

00:09:29,320 --> 00:09:41,920
happened can you hear me okay so now

00:09:39,550 --> 00:09:45,120
let's go over the key concept of the

00:09:41,920 --> 00:09:48,250
library so the flight task library and

00:09:45,120 --> 00:09:51,910
can have multiple tasks but only one

00:09:48,250 --> 00:09:54,850
task and one at a time and it also has

00:09:51,910 --> 00:09:56,620
only one memory slot which has that that

00:09:54,850 --> 00:09:59,170
that slot has actually the size of the

00:09:56,620 --> 00:10:01,470
largest task which further explains why

00:09:59,170 --> 00:10:04,060
there can only be one task at a time

00:10:01,470 --> 00:10:06,490
then the library has a factory class

00:10:04,060 --> 00:10:09,820
which is that which is called flight

00:10:06,490 --> 00:10:12,339
tasks with an S and which is the

00:10:09,820 --> 00:10:15,600
interface to the running task so with

00:10:12,339 --> 00:10:18,220
this factory class you can start stop or

00:10:15,600 --> 00:10:19,959
switch between tasks and it also

00:10:18,220 --> 00:10:22,029
provides you the output of the running

00:10:19,959 --> 00:10:25,390
task so prove these factory class you

00:10:22,029 --> 00:10:27,610
will get your position set points then

00:10:25,390 --> 00:10:30,070
there's a base class called flight task

00:10:27,610 --> 00:10:33,279
the base class is an abstract class and

00:10:30,070 --> 00:10:36,610
therefore defines and the method that

00:10:33,279 --> 00:10:40,540
each task has to have implemented and it

00:10:36,610 --> 00:10:44,380
also defines what default methods each

00:10:40,540 --> 00:10:47,589
clan each task will have then there's a

00:10:44,380 --> 00:10:49,060
concept of core flight tasks those are

00:10:47,589 --> 00:10:53,110
the tasks which are fully integrated

00:10:49,060 --> 00:10:55,570
into the px4 and firmware which

00:10:53,110 --> 00:10:57,610
corresponds to a flight mode what that

00:10:55,570 --> 00:11:00,250
basically means is that you cannot

00:10:57,610 --> 00:11:02,800
remove or add those tasks without

00:11:00,250 --> 00:11:05,890
generating conflict with the px4

00:11:02,800 --> 00:11:09,880
firmware in contrast there are a

00:11:05,890 --> 00:11:12,040
deployed tasks and they in theory can be

00:11:09,880 --> 00:11:13,870
added and moved at any time and they are

00:11:12,040 --> 00:11:15,910
triggered by a Matalin command I

00:11:13,870 --> 00:11:17,290
specifically said in theory because it

00:11:15,910 --> 00:11:19,180
still broke in progress and you still

00:11:17,290 --> 00:11:21,550
have to do to go through some manual

00:11:19,180 --> 00:11:23,560
steps but

00:11:21,550 --> 00:11:27,450
well later on into two lists you will

00:11:23,560 --> 00:11:30,490
see that that's is on our to-do list and

00:11:27,450 --> 00:11:32,230
then we also have like in order to

00:11:30,490 --> 00:11:33,730
create a new flight task there right not

00:11:32,230 --> 00:11:36,580
to two options

00:11:33,730 --> 00:11:38,440
so either you use inheritance where you

00:11:36,580 --> 00:11:41,529
can inherit functionalities from an

00:11:38,440 --> 00:11:44,050
already existing task or you use the

00:11:41,529 --> 00:11:48,850
utility library which provides you

00:11:44,050 --> 00:11:51,850
utility classes and functions so now

00:11:48,850 --> 00:11:55,870
let's have a look at the architecture so

00:11:51,850 --> 00:11:58,930
here okay

00:11:55,870 --> 00:12:02,529
so here you seen UML diagram of the the

00:11:58,930 --> 00:12:05,890
current existing flight task library in

00:12:02,529 --> 00:12:08,260
px4 and it's not complete and also will

00:12:05,890 --> 00:12:10,990
not cover everything but it gives you a

00:12:08,260 --> 00:12:14,200
good overview so here on the Left we

00:12:10,990 --> 00:12:17,649
have our factory class flight task which

00:12:14,200 --> 00:12:20,740
contains our base class the flight tasks

00:12:17,649 --> 00:12:25,870
and to the right we have all existing

00:12:20,740 --> 00:12:28,930
tasks the our factory class as a if you

00:12:25,870 --> 00:12:32,260
can see a bunch of get methods and those

00:12:28,930 --> 00:12:34,570
get methods are just wrappers for the

00:12:32,260 --> 00:12:36,579
method with the same name of the running

00:12:34,570 --> 00:12:39,100
task so what that points in means like

00:12:36,579 --> 00:12:43,810
if you let's say call get positions that

00:12:39,100 --> 00:12:47,050
point internally like here internally it

00:12:43,810 --> 00:12:51,220
will call the guide position set point

00:12:47,050 --> 00:12:53,410
here from the the rani task which will

00:12:51,220 --> 00:12:54,700
return the set points and the set points

00:12:53,410 --> 00:12:59,470
are the position velocity acceleration

00:12:54,700 --> 00:13:02,020
for set points and in addition the

00:12:59,470 --> 00:13:04,240
factory class it's one important method

00:13:02,020 --> 00:13:07,680
which is called update the update method

00:13:04,240 --> 00:13:10,720
has to be called at every iteration loop

00:13:07,680 --> 00:13:13,540
what it does it basically tells a flight

00:13:10,720 --> 00:13:16,959
task or tells the running test that it

00:13:13,540 --> 00:13:19,209
now it's time to update the output so if

00:13:16,959 --> 00:13:21,839
you don't call this method the output of

00:13:19,209 --> 00:13:23,860
the running test will just stay constant

00:13:21,839 --> 00:13:28,060
internally it's the same as with the get

00:13:23,860 --> 00:13:29,890
method it will call the update method of

00:13:28,060 --> 00:13:32,770
the the running task and as you can see

00:13:29,890 --> 00:13:35,050
here the base class the update method of

00:13:32,770 --> 00:13:37,839
the base class is a pure vehicle method

00:13:35,050 --> 00:13:42,580
which just means that every task on this

00:13:37,839 --> 00:13:43,990
side has to have an update method in

00:13:42,580 --> 00:13:46,000
addition the base class has a bunch of

00:13:43,990 --> 00:13:48,399
other method so for instance here we

00:13:46,000 --> 00:13:50,649
have an activate method this activate

00:13:48,399 --> 00:13:53,230
method will be called and at the

00:13:50,649 --> 00:13:56,470
beginning when when the task starts to

00:13:53,230 --> 00:13:59,260
run and a bunch of other ones may be

00:13:56,470 --> 00:14:01,930
also important to to to mention is that

00:13:59,260 --> 00:14:04,060
it has a private method and which is

00:14:01,930 --> 00:14:07,329
called evaluate very local position and

00:14:04,060 --> 00:14:12,790
what it does here is it subscribes to

00:14:07,329 --> 00:14:14,800
the position estimate and therefore each

00:14:12,790 --> 00:14:16,990
of those tasks will automatically have

00:14:14,800 --> 00:14:18,540
already information about the position

00:14:16,990 --> 00:14:24,570
estimate like position velocity and

00:14:18,540 --> 00:14:24,570
whoops sorry go back

00:14:30,290 --> 00:14:39,320
for choice then you also can see here a

00:14:36,529 --> 00:14:43,670
bunch of inheritances which is indicated

00:14:39,320 --> 00:14:46,750
by the white arrows and well while

00:14:43,670 --> 00:14:49,490
inheritance makes things really easy to

00:14:46,750 --> 00:14:51,470
take all functionalities of existing

00:14:49,490 --> 00:14:54,770
tasks it also adds a lot of complexity

00:14:51,470 --> 00:14:58,100
and code becomes more difficult to read

00:14:54,770 --> 00:15:00,440
so what we also added is an utility

00:14:58,100 --> 00:15:03,020
library which is in here which has

00:15:00,440 --> 00:15:05,330
utility classes and functions and those

00:15:03,020 --> 00:15:07,520
classes can then be used in in the

00:15:05,330 --> 00:15:10,580
individual tasks tasks so for instance

00:15:07,520 --> 00:15:12,589
the this moving part which all it does

00:15:10,580 --> 00:15:18,040
it just moves the set points a little

00:15:12,589 --> 00:15:21,830
bit is why now used in all this moving

00:15:18,040 --> 00:15:26,720
tasks of Winston the positions move or

00:15:21,830 --> 00:15:28,790
it's used in here and so on I also would

00:15:26,720 --> 00:15:31,430
like to to give some information about

00:15:28,790 --> 00:15:35,750
this class the subscription array which

00:15:31,430 --> 00:15:37,850
is contained in the factory class the

00:15:35,750 --> 00:15:40,400
subscription array is an array of all

00:15:37,850 --> 00:15:43,370
the subscription and required for all

00:15:40,400 --> 00:15:45,800
the tasks but each subscription is only

00:15:43,370 --> 00:15:49,000
or stored once so that's just for

00:15:45,800 --> 00:15:51,440
optimization not that like every task

00:15:49,000 --> 00:15:59,870
requires to have its own and file

00:15:51,440 --> 00:16:02,690
descriptor for the subscription and in

00:15:59,870 --> 00:16:04,670
order to add a new task to the flight

00:16:02,690 --> 00:16:07,130
task library is quite simple because

00:16:04,670 --> 00:16:09,440
flight task follows the modern C make

00:16:07,130 --> 00:16:12,040
structure so here on the left you see

00:16:09,440 --> 00:16:15,320
the tree of the flight task library and

00:16:12,040 --> 00:16:18,760
as you can see there's a top C make list

00:16:15,320 --> 00:16:23,330
which defines the flight task library

00:16:18,760 --> 00:16:25,070
then we have our factory classes and we

00:16:23,330 --> 00:16:28,670
have a folder called tasks with a bunch

00:16:25,070 --> 00:16:32,360
of sub folders each sub folder is a task

00:16:28,670 --> 00:16:34,490
and each sub folder is as well also a

00:16:32,360 --> 00:16:36,650
library so if you now look in the middle

00:16:34,490 --> 00:16:38,630
if you look for instance editor order

00:16:36,650 --> 00:16:43,980
folder in here we have another Simek

00:16:38,630 --> 00:16:46,410
list which defines the the auto library

00:16:43,980 --> 00:16:48,720
and we have two source files which

00:16:46,410 --> 00:16:50,220
implements the logic for the odo

00:16:48,720 --> 00:16:52,380
like although in px4 is basically

00:16:50,220 --> 00:16:53,520
mission or light or whatever like

00:16:52,380 --> 00:16:58,110
everything which is happens

00:16:53,520 --> 00:17:00,630
automatically and the the syntax or the

00:16:58,110 --> 00:17:01,860
the name of the the source files this is

00:17:00,630 --> 00:17:04,079
not random but it has to follow a

00:17:01,860 --> 00:17:07,140
certain pattern so there's always the

00:17:04,079 --> 00:17:09,540
name of the two folders so otto prepared

00:17:07,140 --> 00:17:12,690
the flight tasks the same class for all

00:17:09,540 --> 00:17:14,520
other folders as well and now as an

00:17:12,690 --> 00:17:17,160
example what you have to put in to make

00:17:14,520 --> 00:17:19,709
it a valid library but you have to put

00:17:17,160 --> 00:17:22,260
in the into the sea mclees we now look

00:17:19,709 --> 00:17:25,650
at the orbit example and in here in the

00:17:22,260 --> 00:17:28,140
Simek list what we add is just we define

00:17:25,650 --> 00:17:30,030
we add a new new target like a library

00:17:28,140 --> 00:17:33,540
which is called which is just the name

00:17:30,030 --> 00:17:35,940
of the resource file then we add our

00:17:33,540 --> 00:17:39,000
dependencies to this library in our case

00:17:35,940 --> 00:17:42,300
the orbit depends on the flight AskMen

00:17:39,000 --> 00:17:45,510
altitudes move which is another library

00:17:42,300 --> 00:17:50,150
another task and then we just add like

00:17:45,510 --> 00:17:53,010
the source files to the sea make and

00:17:50,150 --> 00:17:54,710
finally so once we have finished this

00:17:53,010 --> 00:17:57,690
step then we have actually a valid

00:17:54,710 --> 00:18:00,360
library a valid task but we still have

00:17:57,690 --> 00:18:03,420
to add it to the flight tasks library we

00:18:00,360 --> 00:18:07,110
do that if you go to the outermost Simek

00:18:03,420 --> 00:18:10,560
list and just add the name of the folder

00:18:07,110 --> 00:18:16,920
and that we just created so in our case

00:18:10,560 --> 00:18:18,450
it's orbit so now we created that new

00:18:16,920 --> 00:18:21,450
task but we also want to be able to

00:18:18,450 --> 00:18:23,880
trigger it and from the frame rail from

00:18:21,450 --> 00:18:25,830
px4 autopilot and right now there are

00:18:23,880 --> 00:18:29,310
there are two two methods the first

00:18:25,830 --> 00:18:30,780
metal is points and you say ok well so

00:18:29,310 --> 00:18:33,720
we have these px for position control

00:18:30,780 --> 00:18:35,790
mode and and I don't like the

00:18:33,720 --> 00:18:38,160
functionality I would like to have have

00:18:35,790 --> 00:18:40,290
it I don't move or you want to have it

00:18:38,160 --> 00:18:42,450
just better so instead of creating like

00:18:40,290 --> 00:18:44,730
new if statements in the existing tasks

00:18:42,450 --> 00:18:47,880
what you do you can just add a new task

00:18:44,730 --> 00:18:52,020
when control which task is 1 through 4

00:18:47,880 --> 00:18:54,120
parameter so for instance the the px4

00:18:52,020 --> 00:18:57,000
position control mode is right now

00:18:54,120 --> 00:19:00,210
covered before different tasks

00:18:57,000 --> 00:19:03,480
all those so here we have the the flight

00:19:00,210 --> 00:19:06,330
Ismail position and task which is a

00:19:03,480 --> 00:19:08,280
general like deals there's a busy all

00:19:06,330 --> 00:19:10,169
the position related and set point

00:19:08,280 --> 00:19:12,059
generation and all the other ones just

00:19:10,169 --> 00:19:14,039
make I don't know aggressive or source

00:19:12,059 --> 00:19:15,059
mover so when it's in the sport mode

00:19:14,039 --> 00:19:16,590
just makes it a little bit more

00:19:15,059 --> 00:19:18,510
aggressive that's why it hurts from

00:19:16,590 --> 00:19:20,520
blighters main opposition the flight

00:19:18,510 --> 00:19:22,350
tasks positions move makes it smoother

00:19:20,520 --> 00:19:25,520
and the flight test version through well

00:19:22,350 --> 00:19:27,960
is a truck optimized smoothness and

00:19:25,520 --> 00:19:30,539
which tasks at the end is one if

00:19:27,960 --> 00:19:32,490
precision control is enabled is defined

00:19:30,539 --> 00:19:36,809
by the MC precision control mode flag

00:19:32,490 --> 00:19:37,320
the same logic is applied to the auto

00:19:36,809 --> 00:19:39,870
mode

00:19:37,320 --> 00:19:42,120
they are currently we have two tasks so

00:19:39,870 --> 00:19:45,299
we have the legacy task which is this

00:19:42,120 --> 00:19:49,049
one and we have again a choc optimized

00:19:45,299 --> 00:19:51,659
and auto task like when you fly mission

00:19:49,049 --> 00:19:53,570
this one will move and the trajectory

00:19:51,659 --> 00:19:56,429
when you fly around the corners and

00:19:53,570 --> 00:20:01,320
which tasks at the end is executed or

00:19:56,429 --> 00:20:04,559
run is defined by this parameter the

00:20:01,320 --> 00:20:08,299
second method to and trigger a flight

00:20:04,559 --> 00:20:12,059
tasks a new task is to the math link and

00:20:08,299 --> 00:20:13,230
commands and in principle if you would

00:20:12,059 --> 00:20:15,450
do that you don't have to change

00:20:13,230 --> 00:20:19,409
anything in a few more but right now

00:20:15,450 --> 00:20:21,179
there are still about I think seven

00:20:19,409 --> 00:20:23,610
steps required where you have to

00:20:21,179 --> 00:20:25,980
manually modify things in the commander

00:20:23,610 --> 00:20:27,929
and I broke you down in the seventh step

00:20:25,980 --> 00:20:29,730
I listed here on the on the presentation

00:20:27,929 --> 00:20:32,159
but I will not go through them because

00:20:29,730 --> 00:20:34,110
of quite boring and if you want to add a

00:20:32,159 --> 00:20:36,960
new task you can just look at the look

00:20:34,110 --> 00:20:40,140
at it and follow the instruction but

00:20:36,960 --> 00:20:46,049
it's not that interesting so I will skip

00:20:40,140 --> 00:20:49,740
all this pot and I water prefer to show

00:20:46,049 --> 00:20:53,159
a simple example so let's assume we want

00:20:49,740 --> 00:20:55,830
to add a new task and our constraints

00:20:53,159 --> 00:21:00,000
are that we want to trigger it we are

00:20:55,830 --> 00:21:02,039
via a parameter so the auto mode so

00:21:00,000 --> 00:21:03,690
basically if we are in mission mode then

00:21:02,039 --> 00:21:10,350
we want to control to this parameter

00:21:03,690 --> 00:21:14,220
were and what task it should run then we

00:21:10,350 --> 00:21:17,690
to fly our dummy tasks what we want it

00:21:14,220 --> 00:21:21,630
should fly up and down eight meters and

00:21:17,690 --> 00:21:25,440
starting with the upward direction then

00:21:21,630 --> 00:21:29,010
the origin the origin of of the stopping

00:21:25,440 --> 00:21:31,169
point should be set at rig up time we

00:21:29,010 --> 00:21:33,090
want to keep the horizontal direction

00:21:31,169 --> 00:21:36,299
when we fly up and down constant so it

00:21:33,090 --> 00:21:38,850
shouldn't drift left or to the right or

00:21:36,299 --> 00:21:42,270
just like horizontally and we want to

00:21:38,850 --> 00:21:44,520
rotate 45 degrees in one direction when

00:21:42,270 --> 00:21:47,490
we go up once we turn back we want to

00:21:44,520 --> 00:21:49,799
rotate all the way around so the way we

00:21:47,490 --> 00:21:53,039
do it is quite simple so first we again

00:21:49,799 --> 00:21:55,409
go in normal tree add a new folder which

00:21:53,039 --> 00:21:58,590
I call continues here I mean I could

00:21:55,409 --> 00:22:01,110
also call it Tommy or whatever and then

00:21:58,590 --> 00:22:05,010
in the in this folder we add our source

00:22:01,110 --> 00:22:08,340
files and a see make list in the sea

00:22:05,010 --> 00:22:11,909
make list we then will do what what I

00:22:08,340 --> 00:22:15,960
described before we just define the

00:22:11,909 --> 00:22:18,630
light target as a library and then it's

00:22:15,960 --> 00:22:21,270
a little bit different since we now call

00:22:18,630 --> 00:22:24,000
it so this one is in the outermost Simek

00:22:21,270 --> 00:22:26,909
list here we still have to add our new

00:22:24,000 --> 00:22:29,570
created task but we don't add it as we

00:22:26,909 --> 00:22:34,230
did as it described before since we are

00:22:29,570 --> 00:22:36,450
modifying like one of the px4 core

00:22:34,230 --> 00:22:38,610
flight modes we have to add it to

00:22:36,450 --> 00:22:40,140
another list which is the it's called

00:22:38,610 --> 00:22:42,659
flight tasks or lists here you see like

00:22:40,140 --> 00:22:47,940
all the the core gates for flight modes

00:22:42,659 --> 00:22:50,280
and we add it to here and now we have to

00:22:47,940 --> 00:22:55,679
fill the source files

00:22:50,280 --> 00:22:58,289
so in our HPP file all we have to do is

00:22:55,679 --> 00:23:00,900
create we have to include our base class

00:22:58,289 --> 00:23:03,900
which is flight tasks from which we we

00:23:00,900 --> 00:23:06,630
inherit all the functionalities and then

00:23:03,900 --> 00:23:08,100
we need to have two methods so one is

00:23:06,630 --> 00:23:10,740
the update method which I explained

00:23:08,100 --> 00:23:14,039
before is required for every and task

00:23:10,740 --> 00:23:16,020
and I also need to add active I mean I

00:23:14,039 --> 00:23:18,630
don't have to put in this particular

00:23:16,020 --> 00:23:22,320
example I have our let the activate

00:23:18,630 --> 00:23:24,250
method then I also need a private member

00:23:22,320 --> 00:23:28,960
for setting the origin

00:23:24,250 --> 00:23:30,039
so if you now look at our CPP file is it

00:23:28,960 --> 00:23:32,159
that's one

00:23:30,039 --> 00:23:35,740
yeah there should be I don't know it's

00:23:32,159 --> 00:23:37,720
okay but so what we do in here we in the

00:23:35,740 --> 00:23:39,730
activate method all we have to do is

00:23:37,720 --> 00:23:43,740
first we have to also to activate our

00:23:39,730 --> 00:23:45,940
base class then in order to stay

00:23:43,740 --> 00:23:49,030
constant have like a constant horizontal

00:23:45,940 --> 00:23:51,370
position block we set our position set

00:23:49,030 --> 00:23:55,179
point to the current position in the

00:23:51,370 --> 00:23:56,830
activate method our origin because we

00:23:55,179 --> 00:23:58,900
want to go fly from the origin eight

00:23:56,830 --> 00:24:00,760
meters up and then eight minutes down so

00:23:58,900 --> 00:24:03,250
we need to know where we started so I

00:24:00,760 --> 00:24:04,990
set our origin in the altitude Direction

00:24:03,250 --> 00:24:10,059
is a direction to our current position

00:24:04,990 --> 00:24:12,010
in the Z direction and our your speed

00:24:10,059 --> 00:24:15,340
setpoint our requirements that we want

00:24:12,010 --> 00:24:17,919
to rotate 45 degrees so I do that I said

00:24:15,340 --> 00:24:21,250
our your speed is 45 degrees per second

00:24:17,919 --> 00:24:24,730
and our an OC set point is minus one

00:24:21,250 --> 00:24:28,360
well minus one meter per second we in

00:24:24,730 --> 00:24:31,030
px4 we have the net frame so minus means

00:24:28,360 --> 00:24:32,440
you want to go upwards so I say okay

00:24:31,030 --> 00:24:35,890
let's go with one meter per second

00:24:32,440 --> 00:24:37,210
upwards and this methyl as I explained

00:24:35,890 --> 00:24:39,880
will only be called at the beginning of

00:24:37,210 --> 00:24:42,250
the task so in our update function which

00:24:39,880 --> 00:24:46,480
we've recorded every iteration loop we

00:24:42,250 --> 00:24:48,250
then and just the difference is where we

00:24:46,480 --> 00:24:52,690
are right now so our position

00:24:48,250 --> 00:24:55,990
- very stop and if we are if this

00:24:52,690 --> 00:24:57,460
difference is more than eight meters and

00:24:55,990 --> 00:24:59,440
again we are neck frame that's why it's

00:24:57,460 --> 00:25:02,770
negative it's more than eight meters

00:24:59,440 --> 00:25:04,150
then all we do which just flip and what

00:25:02,770 --> 00:25:06,220
we have done before so we say the

00:25:04,150 --> 00:25:08,230
velocity setpoint is now downward so

00:25:06,220 --> 00:25:10,630
that's y plus one and to your speed

00:25:08,230 --> 00:25:12,940
setpoint is now the other way around so

00:25:10,630 --> 00:25:19,390
it's just like multiplied by negative

00:25:12,940 --> 00:25:22,210
one and if we reach again our origin we

00:25:19,390 --> 00:25:24,929
do what we flip again so we go down

00:25:22,210 --> 00:25:27,760
upwards on wrote in other direction and

00:25:24,929 --> 00:25:29,950
yeah that's pretty much it so all we

00:25:27,760 --> 00:25:34,840
then have to do is we have to extend our

00:25:29,950 --> 00:25:38,290
M parameter so in the MPC Auto mode we

00:25:34,840 --> 00:25:41,920
say well now case two is our continued

00:25:38,290 --> 00:25:46,720
yeah and and in the MC position

00:25:41,920 --> 00:25:49,150
controller because it is a px for AK or

00:25:46,720 --> 00:25:51,310
flight mode we then have to add one more

00:25:49,150 --> 00:25:56,350
case to it where we basically then call

00:25:51,310 --> 00:25:58,510
the our new task and that's it like now

00:25:56,350 --> 00:25:59,920
I mean if you would run it it would

00:25:58,510 --> 00:26:01,390
basically exactly do what I just

00:25:59,920 --> 00:26:03,070
described it would go up and down wrote

00:26:01,390 --> 00:26:04,510
in one direction then wrote in other

00:26:03,070 --> 00:26:12,190
what other direction when it flies

00:26:04,510 --> 00:26:14,260
downwards yeah so at the end of the

00:26:12,190 --> 00:26:16,960
presentation I want to come to the two

00:26:14,260 --> 00:26:19,030
dues or to the state where we are the as

00:26:16,960 --> 00:26:22,330
I said this flight task architecture is

00:26:19,030 --> 00:26:24,820
now in stable 1.9 and all the existing

00:26:22,330 --> 00:26:28,030
picks for flight modes are in within

00:26:24,820 --> 00:26:30,910
this architecture and the remaining

00:26:28,030 --> 00:26:33,910
things to do are to to improve the

00:26:30,910 --> 00:26:36,280
switching between tasks so as you've

00:26:33,910 --> 00:26:38,860
seen there are several methods to to

00:26:36,280 --> 00:26:40,450
initiate a switching like it's not that

00:26:38,860 --> 00:26:45,160
simple to add it just from the outside

00:26:40,450 --> 00:26:47,560
by an uplink message you have to also

00:26:45,160 --> 00:26:49,500
adjust the commander or something

00:26:47,560 --> 00:26:52,750
existing in the position controller and

00:26:49,500 --> 00:26:55,150
also while you switch it could be that

00:26:52,750 --> 00:26:57,190
one task was actually doing something

00:26:55,150 --> 00:26:58,840
and the other task takes over and wants

00:26:57,190 --> 00:27:01,870
to do something completely else and

00:26:58,840 --> 00:27:05,860
there is a discontinuity in set points

00:27:01,870 --> 00:27:08,260
which is not desired then as Dennis

00:27:05,860 --> 00:27:10,480
already mentioned a bit we have this

00:27:08,260 --> 00:27:12,580
inheritance structure which totally

00:27:10,480 --> 00:27:15,310
makes sense for free tasks but as you

00:27:12,580 --> 00:27:19,150
have xx it just grows and grows and gets

00:27:15,310 --> 00:27:21,730
less you lose the overview so we want to

00:27:19,150 --> 00:27:24,610
actually make the tasks independent and

00:27:21,730 --> 00:27:28,420
just rely on library implementation to

00:27:24,610 --> 00:27:32,530
not not like duplicate code but to be

00:27:28,420 --> 00:27:35,740
able to reuse things then we want to

00:27:32,530 --> 00:27:38,350
further simplify adding a new task I

00:27:35,740 --> 00:27:41,470
mean as you've seen it has to do with

00:27:38,350 --> 00:27:43,690
the switching so in commander we have to

00:27:41,470 --> 00:27:47,110
do we have to improve commander to make

00:27:43,690 --> 00:27:49,750
that that process even easier and then

00:27:47,110 --> 00:27:52,150
what I'm currently working on is the

00:27:49,750 --> 00:27:54,430
acceleration set point as I've said

00:27:52,150 --> 00:27:56,770
this in the in the interface there's an

00:27:54,430 --> 00:27:59,170
acceleration setpoint but currently it's

00:27:56,770 --> 00:28:01,930
not executed it's only locked and I'm

00:27:59,170 --> 00:28:06,150
currently working on executing this

00:28:01,930 --> 00:28:09,070
actually in the position controller so

00:28:06,150 --> 00:28:13,420
we are at the end of our presentation

00:28:09,070 --> 00:28:25,960
and I hope you have some questions you

00:28:13,420 --> 00:28:28,750
may raise them yeah okay so the question

00:28:25,960 --> 00:28:32,770
was the update method which is mandatory

00:28:28,750 --> 00:28:35,830
for every task it returns a bool and a

00:28:32,770 --> 00:28:38,920
lot of flight asks now returned true

00:28:35,830 --> 00:28:41,410
just because it was we had to quickly

00:28:38,920 --> 00:28:43,510
implement them but the idea is that if

00:28:41,410 --> 00:28:45,730
you return false and you should return

00:28:43,510 --> 00:28:48,100
false if your beta is not available if

00:28:45,730 --> 00:28:50,080
some calculation went wrong you realize

00:28:48,100 --> 00:28:51,450
oh it's not working you should return

00:28:50,080 --> 00:28:54,430
false and then the outside

00:28:51,450 --> 00:28:56,050
infrastructure makes sure that nothing

00:28:54,430 --> 00:28:59,890
bad happens that you switch into a

00:28:56,050 --> 00:29:02,470
fail-safe you stay in a safe mode and

00:28:59,890 --> 00:29:04,680
yeah you don't just drift away and do

00:29:02,470 --> 00:29:04,680
nothing

00:29:13,080 --> 00:29:20,380
so okay there's a follow-up question

00:29:17,320 --> 00:29:23,230
what exactly happens if you return false

00:29:20,380 --> 00:29:25,510
right now it's kind of work in progress

00:29:23,230 --> 00:29:27,850
it's it's not super nice what happens

00:29:25,510 --> 00:29:30,190
but there is a fail-safe so what happens

00:29:27,850 --> 00:29:32,830
if you return false the position control

00:29:30,190 --> 00:29:37,750
module realizes that tasks cannot run

00:29:32,830 --> 00:29:40,930
and it will send the commander a vehicle

00:29:37,750 --> 00:29:42,400
command to switch mode which is actually

00:29:40,930 --> 00:29:45,220
not what we want we want to improve

00:29:42,400 --> 00:29:47,670
commander to have a better handling of

00:29:45,220 --> 00:29:47,670
that situation

00:29:54,100 --> 00:30:00,470
so there's a very good question how can

00:29:57,290 --> 00:30:03,110
a task say that the actual behavior the

00:30:00,470 --> 00:30:05,420
task that it had is done such that you

00:30:03,110 --> 00:30:08,870
can continue with the next one currently

00:30:05,420 --> 00:30:11,330
there is no notion of done but I've

00:30:08,870 --> 00:30:13,310
heard this feedback multiple times now

00:30:11,330 --> 00:30:16,580
so I think it makes sense to add this

00:30:13,310 --> 00:30:18,470
functionality and then to to let the

00:30:16,580 --> 00:30:20,630
rest of the infrastructure know for

00:30:18,470 --> 00:30:22,760
example that if you are in a mission you

00:30:20,630 --> 00:30:30,680
do something that you can continue with

00:30:22,760 --> 00:30:32,270
the next step in your mission and also I

00:30:30,680 --> 00:30:34,130
mean I want to add something right now

00:30:32,270 --> 00:30:36,500
the way it is implemented right now

00:30:34,130 --> 00:30:40,070
anyway is the way that the commander

00:30:36,500 --> 00:30:43,070
does all the transitions the commander

00:30:40,070 --> 00:30:45,530
like he like flight task itself just

00:30:43,070 --> 00:30:49,160
executes and it doesn't have a notion of

00:30:45,530 --> 00:30:49,940
it doesn't decide and what transition to

00:30:49,160 --> 00:30:51,290
what neck

00:30:49,940 --> 00:30:53,480
what auto task it has to trans

00:30:51,290 --> 00:30:54,920
transition to but that's the command

00:30:53,480 --> 00:30:56,600
also right now it's still like a

00:30:54,920 --> 00:31:00,620
top-down where the commander decides

00:30:56,600 --> 00:31:02,420
which mode well because every mode is

00:31:00,620 --> 00:31:06,470
covered with a task so it defines which

00:31:02,420 --> 00:31:08,600
mode is has to run and he does all the

00:31:06,470 --> 00:31:10,820
transition and the task itself than just

00:31:08,600 --> 00:31:12,280
execute but you're right in the future

00:31:10,820 --> 00:31:15,400
we would like to have it in a different

00:31:12,280 --> 00:31:15,400
different way

00:31:35,090 --> 00:31:40,560
yes so the question is that now this is

00:31:38,700 --> 00:31:43,350
basically a refactor of the position

00:31:40,560 --> 00:31:45,440
control module and the question is does

00:31:43,350 --> 00:31:48,450
the commander follow with this

00:31:45,440 --> 00:31:51,780
refactoring of the and take care of this

00:31:48,450 --> 00:31:54,660
new structure and yes I think that's

00:31:51,780 --> 00:31:57,240
really necessary but just to give you a

00:31:54,660 --> 00:31:59,970
perspective I said the position

00:31:57,240 --> 00:32:03,450
controller has 3.5 K lines the commander

00:31:59,970 --> 00:32:05,550
has five five K lines so it's even more

00:32:03,450 --> 00:32:09,270
complicated and will take some time but

00:32:05,550 --> 00:32:11,700
I think that's next up and it's also I

00:32:09,270 --> 00:32:14,460
think desirable to take some

00:32:11,700 --> 00:32:17,640
responsibility of the commander and like

00:32:14,460 --> 00:32:21,090
distributed to we're very make sense to

00:32:17,640 --> 00:32:31,740
such that you can easily customize your

00:32:21,090 --> 00:32:35,130
flight behavior and basically so the

00:32:31,740 --> 00:32:39,660
question was the rate of the update

00:32:35,130 --> 00:32:42,300
method right so the update method is

00:32:39,660 --> 00:32:45,810
just the call into the library to

00:32:42,300 --> 00:32:48,390
generate new set points and the outside

00:32:45,810 --> 00:32:50,550
determines how fast you generate new set

00:32:48,390 --> 00:32:52,710
points so currently the position

00:32:50,550 --> 00:32:55,200
controller calls this method and the

00:32:52,710 --> 00:32:59,940
position controller runs by default at

00:32:55,200 --> 00:33:02,460
around 250 Hertz I think so but you

00:32:59,940 --> 00:33:05,250
could you could use this fly task

00:33:02,460 --> 00:33:10,050
library somewhere else and adjust it to

00:33:05,250 --> 00:33:13,380
your needs to your platform - yeah but I

00:33:10,050 --> 00:33:16,050
can also say on that regard that we we

00:33:13,380 --> 00:33:19,320
don't need a super high update frequency

00:33:16,050 --> 00:33:21,390
for position control tasks because the

00:33:19,320 --> 00:33:25,830
the higher bandwidth control like the

00:33:21,390 --> 00:33:30,060
rate controller is further below in the

00:33:25,830 --> 00:33:32,010
control process pipeline and yet for

00:33:30,060 --> 00:33:33,840
position control to update these

00:33:32,010 --> 00:34:14,399
attitude set points each

00:33:33,840 --> 00:34:17,099
really enough to run a bit slower okay

00:34:14,399 --> 00:34:19,200
so I think it's duplication of a

00:34:17,099 --> 00:34:21,330
question that we had before and it

00:34:19,200 --> 00:34:26,369
confirms that we should add this notion

00:34:21,330 --> 00:34:28,859
of having a task complete it's it's its

00:34:26,369 --> 00:34:30,990
task basically and and to be able to

00:34:28,859 --> 00:34:33,990
continue with something else currently

00:34:30,990 --> 00:34:36,480
that's not in but as we see a lot of

00:34:33,990 --> 00:34:39,619
people need that and we should add that

00:34:36,480 --> 00:34:39,619
in the architecture

00:34:54,260 --> 00:35:01,920
maybe maybe or the question was the the

00:34:58,140 --> 00:35:04,500
flight task automap er what it does does

00:35:01,920 --> 00:35:07,500
it generate flight plans for mapping and

00:35:04,500 --> 00:35:10,440
I think the name there is a bit mistaken

00:35:07,500 --> 00:35:15,000
the auto map or flight task is basically

00:35:10,440 --> 00:35:17,480
a task that that takes set points from

00:35:15,000 --> 00:35:21,620
or waypoints from the navigator and

00:35:17,480 --> 00:35:24,510
makes them available to all the mission

00:35:21,620 --> 00:35:27,600
executing flight tasks so it's a mapping

00:35:24,510 --> 00:35:31,650
from navigator waypoints to having them

00:35:27,600 --> 00:35:33,960
available in a in a nice yeah member

00:35:31,650 --> 00:35:37,170
member variable within the flight task

00:35:33,960 --> 00:35:39,450
is not specifically for mapping but it's

00:35:37,170 --> 00:35:42,210
for any mission and can be used for

00:35:39,450 --> 00:35:45,330
mapping yeah the auto map was not even

00:35:42,210 --> 00:35:48,540
actually a task that you can call right

00:35:45,330 --> 00:35:50,760
now it doesn't have an update method so

00:35:48,540 --> 00:35:54,900
it's just not all abstract class which

00:35:50,760 --> 00:35:57,750
does some you know mapping from the px4

00:35:54,900 --> 00:36:02,520
triples to basically mapping from global

00:35:57,750 --> 00:36:05,460
to local and set points such as easier

00:36:02,520 --> 00:36:06,990
for the auto for like the one for the

00:36:05,460 --> 00:36:11,570
auto task which inherits from the auto

00:36:06,990 --> 00:36:11,570
map to do some some computation with it

00:36:20,610 --> 00:36:25,289
thank you guys

00:36:22,130 --> 00:36:25,289
[Applause]

00:36:30,350 --> 00:36:32,410

YouTube URL: https://www.youtube.com/watch?v=-dkQG8YLffc


