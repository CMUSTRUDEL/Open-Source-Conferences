Title: MAVLink3 Update - Dr. Lorenz Meier - PX4 Developer Summit 2019
Publication date: 2019-07-03
Playlist: PX4 Developer Summit 2019 | ETH ZÃ¼rich
Description: 
	Dr. Lorenz Meier
MAVLink Author
Captions: 
	00:00:07,510 --> 00:00:12,910
so given this as a boring topic I

00:00:10,100 --> 00:00:16,180
thought I can at least make an effort

00:00:12,910 --> 00:00:18,939
you know be a bit more engaged in a

00:00:16,180 --> 00:00:23,099
discussion so there's almost the last

00:00:18,939 --> 00:00:27,189
talk we can get our hands a bit dirty

00:00:23,099 --> 00:00:34,840
and I'd like to start doing that by

00:00:27,189 --> 00:00:37,269
looking at this so you can all relax we

00:00:34,840 --> 00:00:40,059
need to get our hands dirty but there

00:00:37,269 --> 00:00:43,589
won't be any new protocol any time soon

00:00:40,059 --> 00:00:47,620
and the reason I'm pushing this out

00:00:43,589 --> 00:00:49,300
really strongly is every time you talk

00:00:47,620 --> 00:00:51,670
about the limitations of what you're

00:00:49,300 --> 00:00:54,489
currently working on some way we will go

00:00:51,670 --> 00:00:56,320
like oh oh they're changing it so now

00:00:54,489 --> 00:00:59,530
we're probably we probably should wait

00:00:56,320 --> 00:01:02,320
let's let's not fix what we have so

00:00:59,530 --> 00:01:05,490
people don't do this because it's not

00:01:02,320 --> 00:01:08,410
around the corner but at the same time

00:01:05,490 --> 00:01:10,720
not talking about it gives you gives

00:01:08,410 --> 00:01:13,890
people the wrong impression that we

00:01:10,720 --> 00:01:17,560
don't care about the current limitations

00:01:13,890 --> 00:01:19,240
so mavs link is so many things I

00:01:17,560 --> 00:01:23,979
actually think we need a quick

00:01:19,240 --> 00:01:27,990
introduction first on the lowest level

00:01:23,979 --> 00:01:31,179
it's this it's a couple bites on a bus

00:01:27,990 --> 00:01:35,020
first-in first-out single packet it

00:01:31,179 --> 00:01:37,450
starts with a start symbol a length a

00:01:35,020 --> 00:01:40,690
sequence number that is wrapping a

00:01:37,450 --> 00:01:45,729
system ID a component ID the message

00:01:40,690 --> 00:01:48,940
type payload and a checksum this is the

00:01:45,729 --> 00:01:51,580
mavs link to non extended actually

00:01:48,940 --> 00:01:53,739
that's a math link one zero non extended

00:01:51,580 --> 00:01:56,259
frame it's not the Maverick to frame

00:01:53,739 --> 00:01:58,840
we're signing so but that that's what it

00:01:56,259 --> 00:02:04,119
is like super simple it's it's even

00:01:58,840 --> 00:02:06,130
simpler than can however mavs link

00:02:04,119 --> 00:02:08,500
really really means something different

00:02:06,130 --> 00:02:11,650
that is just a wireframe but you really

00:02:08,500 --> 00:02:14,170
get out of it it's an ecosystem it's an

00:02:11,650 --> 00:02:17,040
ecosystem promising interoperability

00:02:14,170 --> 00:02:19,510
that is why you guys are using it and

00:02:17,040 --> 00:02:23,250
when we talk about MAV link we're not

00:02:19,510 --> 00:02:26,410
talking about these bytes on the bus

00:02:23,250 --> 00:02:33,580
what we're actually talking about as so

00:02:26,410 --> 00:02:36,310
contract on how we do things how we send

00:02:33,580 --> 00:02:40,390
information what coordinate frames we

00:02:36,310 --> 00:02:44,950
use what datums we use that is the true

00:02:40,390 --> 00:02:47,260
value of the protocol and that is true

00:02:44,950 --> 00:02:50,200
value that actually doesn't depend at

00:02:47,260 --> 00:02:52,810
all if you're now sending you by its

00:02:50,200 --> 00:02:54,940
little-endian or big-endian or network

00:02:52,810 --> 00:02:55,890
order which is the same thing it really

00:02:54,940 --> 00:02:58,540
doesn't matter

00:02:55,890 --> 00:03:00,940
it also doesn't matter if you're sending

00:02:58,540 --> 00:03:07,330
a UDP packet if you're pushing that

00:03:00,940 --> 00:03:11,790
through a TT mqq if you whatever if you

00:03:07,330 --> 00:03:15,040
use rows as a transport the same way as

00:03:11,790 --> 00:03:16,780
rows is two things a set of semantic

00:03:15,040 --> 00:03:20,290
messages and standards and social

00:03:16,780 --> 00:03:22,600
contracts specs and a transport layer

00:03:20,290 --> 00:03:25,600
Mavs link is this so that's really

00:03:22,600 --> 00:03:28,570
really important to understand and so

00:03:25,600 --> 00:03:30,970
this layers as a common message set

00:03:28,570 --> 00:03:34,090
which gives you the interoperability

00:03:30,970 --> 00:03:37,300
part then it gives it a micro service

00:03:34,090 --> 00:03:39,430
architecture which is a parameter

00:03:37,300 --> 00:03:42,220
protocol the mission protocol and all

00:03:39,430 --> 00:03:45,070
that and then there's the report framing

00:03:42,220 --> 00:03:48,430
which is sort of the least impactful yet

00:03:45,070 --> 00:03:51,880
necessary thing and authentication in

00:03:48,430 --> 00:03:54,700
the madelung to format the

00:03:51,880 --> 00:03:58,840
authentication is limited it's based on

00:03:54,700 --> 00:04:01,270
a symmetric key and so that's kind of

00:03:58,840 --> 00:04:03,640
the current state and the one reason

00:04:01,270 --> 00:04:06,190
this protocol has been so successful is

00:04:03,640 --> 00:04:08,850
first it has been there at the right

00:04:06,190 --> 00:04:11,020
moment in time at the right place and

00:04:08,850 --> 00:04:13,480
generally people underestimate how

00:04:11,020 --> 00:04:15,100
important that is and then claimed it

00:04:13,480 --> 00:04:20,919
it's something right so I'm not making

00:04:15,100 --> 00:04:25,590
that mistake the second reason is things

00:04:20,919 --> 00:04:25,590
like quality of servers retransmission

00:04:25,830 --> 00:04:31,360
authentication command and control are

00:04:28,390 --> 00:04:33,490
built into the application layer into

00:04:31,360 --> 00:04:37,780
these micro services on an as-needed

00:04:33,490 --> 00:04:39,950
basis the result of that is that you get

00:04:37,780 --> 00:04:41,900
a super efficient framing

00:04:39,950 --> 00:04:44,060
but you all get the functionality you

00:04:41,900 --> 00:04:49,010
need for example that commands get

00:04:44,060 --> 00:04:51,710
retransmitted and so you kind of get

00:04:49,010 --> 00:04:53,660
something that's relatively rigid crazy

00:04:51,710 --> 00:04:57,950
efficient and there's all the necessary

00:04:53,660 --> 00:04:59,330
things which is beautiful because that's

00:04:57,950 --> 00:05:01,910
what you need from a deeply embedded

00:04:59,330 --> 00:05:05,960
protocol that runs on a kilobits

00:05:01,910 --> 00:05:11,330
kilobytes per second radio link that's

00:05:05,960 --> 00:05:13,130
why it was successful now this is a copy

00:05:11,330 --> 00:05:15,140
of the slide that I showed early that I

00:05:13,130 --> 00:05:17,030
showed earlier now if you go to that

00:05:15,140 --> 00:05:19,010
kind of architecture if you start to

00:05:17,030 --> 00:05:21,710
talk to an on-board computer with

00:05:19,010 --> 00:05:24,320
hundred megabits or gigabit and once you

00:05:21,710 --> 00:05:28,160
start to create this mash of nodes if

00:05:24,320 --> 00:05:30,440
you want to really pull the px4

00:05:28,160 --> 00:05:33,070
publish/subscribe publish/subscribe

00:05:30,440 --> 00:05:35,450
architecture to the raw public

00:05:33,070 --> 00:05:38,000
publish/subscribe architecture this all

00:05:35,450 --> 00:05:40,670
gets into the way right it's not

00:05:38,000 --> 00:05:45,050
designed for it it's an API protocol

00:05:40,670 --> 00:05:48,440
it's not your onboard pops-up thing so

00:05:45,050 --> 00:05:53,240
please don't use it for it MAV link has

00:05:48,440 --> 00:05:56,830
been horribly abused what we want for

00:05:53,240 --> 00:06:00,080
that is a real deep proper integration

00:05:56,830 --> 00:06:01,610
but at the same time there is something

00:06:00,080 --> 00:06:03,320
new there's a new pattern right now we

00:06:01,610 --> 00:06:04,970
have this radio link thing with the

00:06:03,320 --> 00:06:08,330
ground control station then we have this

00:06:04,970 --> 00:06:11,620
onboard thing net what will happen now

00:06:08,330 --> 00:06:14,410
is that we're starting to have systems

00:06:11,620 --> 00:06:17,210
systems that are kind of a weird hybrid

00:06:14,410 --> 00:06:17,990
it's a swarm in a warehouse it's a swarm

00:06:17,210 --> 00:06:20,930
in a lightshow

00:06:17,990 --> 00:06:23,510
it's a wider deployment so suddenly you

00:06:20,930 --> 00:06:26,090
have onboard components that need to

00:06:23,510 --> 00:06:27,710
talk to other onboard components and we

00:06:26,090 --> 00:06:29,570
have no concept for that right now I

00:06:27,710 --> 00:06:31,070
mean you have like you create this

00:06:29,570 --> 00:06:32,690
horrible nav link bridge and then you

00:06:31,070 --> 00:06:34,520
know you spent like four weeks and you

00:06:32,690 --> 00:06:37,570
get very confused on your dialect and

00:06:34,520 --> 00:06:42,790
your life is terrible we don't want that

00:06:37,570 --> 00:06:42,790
so let's talk about it

00:06:44,200 --> 00:06:49,220
what we can keep is the common message

00:06:46,970 --> 00:06:51,020
set what we can keep is the micro

00:06:49,220 --> 00:06:53,030
service architecture there's nothing

00:06:51,020 --> 00:06:53,719
wrong about having a way to transmit

00:06:53,030 --> 00:06:55,699
parameter

00:06:53,719 --> 00:06:59,479
there's nothing wrong about having a way

00:06:55,699 --> 00:07:02,929
to transmit commands but then on the

00:06:59,479 --> 00:07:04,549
framing how we exactly frame things we

00:07:02,929 --> 00:07:06,079
still need that serial port support

00:07:04,549 --> 00:07:07,689
because that's a core value of marveling

00:07:06,079 --> 00:07:10,519
over everything else out there

00:07:07,689 --> 00:07:13,459
but then we can easily also use an IP

00:07:10,519 --> 00:07:16,569
framing with quality of service nobody

00:07:13,459 --> 00:07:20,269
says we can just run straight on Ross -

00:07:16,569 --> 00:07:23,899
why not framing is there we have a

00:07:20,269 --> 00:07:28,339
semantic definition we we could also

00:07:23,899 --> 00:07:31,819
hash out coordinate frames so we do two

00:07:28,339 --> 00:07:34,610
teams like Ross developers on one side

00:07:31,819 --> 00:07:39,579
and px for developers on the other where

00:07:34,610 --> 00:07:39,579
are you tele it's not here he knows why

00:07:40,509 --> 00:07:45,349
though jokes aside I mean coordinate

00:07:43,519 --> 00:07:47,149
frames and semantics those are the

00:07:45,349 --> 00:07:49,519
things that we need to understand and

00:07:47,149 --> 00:07:51,889
look at these are they really important

00:07:49,519 --> 00:07:54,499
things when we talk about this because

00:07:51,889 --> 00:07:57,139
we're all invested into semantics into

00:07:54,499 --> 00:07:59,839
the function calls we're not invested

00:07:57,139 --> 00:08:03,349
into what's on the wire most of you have

00:07:59,839 --> 00:08:06,860
no idea what's on the wire and then what

00:08:03,349 --> 00:08:09,259
we also need is encryption and proper

00:08:06,860 --> 00:08:16,689
authentication when I say proper I mean

00:08:09,259 --> 00:08:20,019
with proper asymmetric certificate based

00:08:16,689 --> 00:08:22,509
proper boot initialization in factory

00:08:20,019 --> 00:08:25,249
initialization of your key of your

00:08:22,509 --> 00:08:28,249
certificate chain all that we need all

00:08:25,249 --> 00:08:31,069
that and we can't built at all ourselves

00:08:28,249 --> 00:08:33,199
that's crazy so we need to live off

00:08:31,069 --> 00:08:35,539
existing ecosystems we need to look what

00:08:33,199 --> 00:08:37,809
is there in general robotics we need to

00:08:35,539 --> 00:08:40,669
look at what's there in automotive

00:08:37,809 --> 00:08:43,459
because we we really need to reuse

00:08:40,669 --> 00:08:45,559
what's there but we can and should keep

00:08:43,459 --> 00:08:51,079
our semantics because they kind of

00:08:45,559 --> 00:08:53,839
really work well and what also will play

00:08:51,079 --> 00:08:56,509
an increasing role is the other thing

00:08:53,839 --> 00:09:00,139
that kind of got abused is like mavs

00:08:56,509 --> 00:09:02,089
link is kind of in some places designed

00:09:00,139 --> 00:09:04,100
to be easy to work with from an API

00:09:02,089 --> 00:09:05,809
perspective like some of the messages

00:09:04,100 --> 00:09:07,780
and then pushing back more and more on

00:09:05,809 --> 00:09:10,460
stuff like that getting merged

00:09:07,780 --> 00:09:13,700
for example there's no reason why you

00:09:10,460 --> 00:09:17,210
would have degrees in a message like

00:09:13,700 --> 00:09:22,100
degrees mean nothing the world consists

00:09:17,210 --> 00:09:25,550
of radians right I mean put degrees into

00:09:22,100 --> 00:09:28,400
a sine function see what you get doesn't

00:09:25,550 --> 00:09:29,770
exist so from a protocol perspective we

00:09:28,400 --> 00:09:32,720
shouldn't have degrees in a protocol

00:09:29,770 --> 00:09:34,940
should be converted the only reason you

00:09:32,720 --> 00:09:38,030
have degrees there is that somebody with

00:09:34,940 --> 00:09:41,480
some basic geometric understanding like

00:09:38,030 --> 00:09:45,650
myself can put in like oh I want to turn

00:09:41,480 --> 00:09:48,860
90 degrees right but that's an API thing

00:09:45,650 --> 00:09:51,530
and now that we have math as decay we

00:09:48,860 --> 00:09:54,710
should keep all the things all these

00:09:51,530 --> 00:09:56,450
considerations there it's perfectly fine

00:09:54,710 --> 00:10:00,920
for that thing to have an API where you

00:09:56,450 --> 00:10:03,850
can rotate by 90 degrees but that

00:10:00,920 --> 00:10:06,920
shouldn't leak into the protocol anymore

00:10:03,850 --> 00:10:08,690
so I think that will really help and be

00:10:06,920 --> 00:10:10,930
a refreshing change because now people

00:10:08,690 --> 00:10:13,370
that dealt with maverick in the past

00:10:10,930 --> 00:10:16,070
really have what they actually were

00:10:13,370 --> 00:10:18,260
looking for you can also say like yeah

00:10:16,070 --> 00:10:19,640
but now you need to extend the SDK when

00:10:18,260 --> 00:10:21,620
you need to add something and they need

00:10:19,640 --> 00:10:24,290
to extend the protocol yes that's all

00:10:21,620 --> 00:10:26,750
true but guess what somebody else needs

00:10:24,290 --> 00:10:28,820
to update their drone to also support

00:10:26,750 --> 00:10:32,180
that because what we will see more and

00:10:28,820 --> 00:10:35,960
more is that outside of R&D you will not

00:10:32,180 --> 00:10:38,900
have your drone and your app that's over

00:10:35,960 --> 00:10:43,040
it's somebody else's drone and your app

00:10:38,900 --> 00:10:44,810
and so having a relatively rigid system

00:10:43,040 --> 00:10:48,500
right now with maverick is actually not

00:10:44,810 --> 00:10:50,570
a bad thing it's in a way the embedded

00:10:48,500 --> 00:10:53,690
limitation of being rigid forced people

00:10:50,570 --> 00:10:55,400
to kind of accept like yeah it's like

00:10:53,690 --> 00:10:57,470
it's not exactly what I want but it's

00:10:55,400 --> 00:11:00,100
close enough so okay I'm okay to do

00:10:57,470 --> 00:11:02,630
what's there and that way we converged

00:11:00,100 --> 00:11:04,730
so I think we need to also keep that

00:11:02,630 --> 00:11:06,500
there needs to be a standardized way to

00:11:04,730 --> 00:11:11,300
control a drone because that creates

00:11:06,500 --> 00:11:13,400
interoperability so with that said I

00:11:11,300 --> 00:11:17,560
actually want to spend a good chair of

00:11:13,400 --> 00:11:20,180
the session discussing this with you

00:11:17,560 --> 00:11:21,310
looking at current limitations looking

00:11:20,180 --> 00:11:23,770
at scalability

00:11:21,310 --> 00:11:27,790
and how to engage with the deaf team

00:11:23,770 --> 00:11:30,790
because right now I really enjoy the

00:11:27,790 --> 00:11:32,260
mavin deaf call because I can hear

00:11:30,790 --> 00:11:39,670
myself talking all the time it's like

00:11:32,260 --> 00:11:42,070
awesome and Hamish like Hamish and and

00:11:39,670 --> 00:11:48,160
my ego like they're really thankful for

00:11:42,070 --> 00:11:51,670
your contribution so to see the

00:11:48,160 --> 00:11:54,670
discussion these are things that are

00:11:51,670 --> 00:11:58,690
probably current limitations or at least

00:11:54,670 --> 00:12:00,370
areas of concern none of that means it's

00:11:58,690 --> 00:12:02,950
broken none of that means it's a hard

00:12:00,370 --> 00:12:06,430
problem but it's things that we might to

00:12:02,950 --> 00:12:08,830
think about as we move towards the next

00:12:06,430 --> 00:12:13,510
generation and again the next generation

00:12:08,830 --> 00:12:15,370
is not around the corner okay so give me

00:12:13,510 --> 00:12:16,630
your laundry list and then go off and

00:12:15,370 --> 00:12:19,890
build your products forget about it

00:12:16,630 --> 00:12:19,890
we'll come back when it's done

00:12:20,070 --> 00:12:25,450
so apart from what's listed here would

00:12:23,380 --> 00:12:27,640
you would like to is somebody in the

00:12:25,450 --> 00:12:30,400
audience who would like to reiterate on

00:12:27,640 --> 00:12:32,410
this ad something I'm sure there are

00:12:30,400 --> 00:12:42,070
points here that should be raised that

00:12:32,410 --> 00:12:45,370
we haven't captured yet what was raised

00:12:42,070 --> 00:12:48,010
was variable-length arrays what what

00:12:45,370 --> 00:12:51,089
does that help if the message we have if

00:12:48,010 --> 00:12:55,060
we around like a swarm we have only two

00:12:51,089 --> 00:12:58,180
256 drones but what if we want more like

00:12:55,060 --> 00:13:01,560
Intel runs to thousands of drones so is

00:12:58,180 --> 00:13:05,290
it I do only have one bite is it enough

00:13:01,560 --> 00:13:08,380
so first I would put up the challenge

00:13:05,290 --> 00:13:10,510
let's see if who is faster the protocol

00:13:08,380 --> 00:13:16,050
revision are you having more than 255

00:13:10,510 --> 00:13:16,050
drones in one space

00:13:17,139 --> 00:13:27,910
right right I mean the IP network answer

00:13:24,199 --> 00:13:30,709
to that was what's a horrible thing

00:13:27,910 --> 00:13:34,910
which is which is called network address

00:13:30,709 --> 00:13:37,670
translation so if you ask me you're not

00:13:34,910 --> 00:13:40,639
limited by that we're happy to add that

00:13:37,670 --> 00:13:42,920
- - so you can scale and then build you

00:13:40,639 --> 00:13:44,600
know you know how long like actually I

00:13:42,920 --> 00:13:46,790
don't know anybody

00:13:44,600 --> 00:13:48,920
surfing on Wikipedia right now and not

00:13:46,790 --> 00:13:53,149
listening maybe they can look up like

00:13:48,920 --> 00:13:59,439
since when I pv6 was under consideration

00:13:53,149 --> 00:14:06,920
and what the current adoption rate is 97

00:13:59,439 --> 00:14:10,579
and it's kind of fast it's not bad so I

00:14:06,920 --> 00:14:14,209
think what we need to look into as we

00:14:10,579 --> 00:14:17,449
revise this is to increase the address

00:14:14,209 --> 00:14:20,300
space but have a way as you're not using

00:14:17,449 --> 00:14:22,339
it for example for a ground station -

00:14:20,300 --> 00:14:24,559
one thing link you're not paying the

00:14:22,339 --> 00:14:29,120
price for being able to address the

00:14:24,559 --> 00:14:31,550
whole freaking Internet or every atom in

00:14:29,120 --> 00:14:36,709
the universe depending on what number

00:14:31,550 --> 00:14:38,899
you choose so but I think you know

00:14:36,709 --> 00:14:43,029
address space and and variable-length

00:14:38,899 --> 00:14:46,399
arrays that certainly in a consideration

00:14:43,029 --> 00:14:50,449
what Navin - already does is arrayed

00:14:46,399 --> 00:14:52,189
truncation for the last array so if you

00:14:50,449 --> 00:14:54,259
designed a message this is another like

00:14:52,189 --> 00:14:56,089
there's not a MAV Lang thing right if

00:14:54,259 --> 00:15:01,459
you design a message correctly you get

00:14:56,089 --> 00:15:04,149
that but only if you know I think that

00:15:01,459 --> 00:15:04,149
go ahead

00:15:14,140 --> 00:15:22,190
yeah can you repeat that no I actually

00:15:16,970 --> 00:15:26,420
didn't hear it sorry if I remember

00:15:22,190 --> 00:15:31,160
correctly the parameter set in there the

00:15:26,420 --> 00:15:33,740
array of 128 is not the last thing or it

00:15:31,160 --> 00:15:36,710
wasn't at the time we were actually

00:15:33,740 --> 00:15:39,440
implementing this and so it doesn't get

00:15:36,710 --> 00:15:42,760
truncated and with our bandwidth

00:15:39,440 --> 00:15:45,380
limitations it actually got in our way

00:15:42,760 --> 00:15:48,110
yeah I think it depends on the exact

00:15:45,380 --> 00:15:54,830
message and depends on whether you have

00:15:48,110 --> 00:15:57,650
extensions there so yes as I said it's

00:15:54,830 --> 00:15:59,780
like subject to like three or four

00:15:57,650 --> 00:16:02,390
conditions you get that or not and

00:15:59,780 --> 00:16:06,140
that's that's not great like we need to

00:16:02,390 --> 00:16:08,870
get away from that hello I have a

00:16:06,140 --> 00:16:11,870
question related to the third point can

00:16:08,870 --> 00:16:13,340
you elaborate maybe a little bit maybe

00:16:11,870 --> 00:16:15,680
it's something that we're interested in

00:16:13,340 --> 00:16:18,200
good so right now we have message

00:16:15,680 --> 00:16:19,880
retransmission for on the application I

00:16:18,200 --> 00:16:22,250
would call it on the application layer

00:16:19,880 --> 00:16:24,140
of the micro-services so parameters get

00:16:22,250 --> 00:16:27,040
retransmitted commands get retransmitted

00:16:24,140 --> 00:16:30,290
but it's kind of it's very efficient and

00:16:27,040 --> 00:16:32,720
contextual but it's also painful to

00:16:30,290 --> 00:16:35,060
implement and so I think there should be

00:16:32,720 --> 00:16:37,130
a retransmission method with a certain

00:16:35,060 --> 00:16:42,680
quality of service that you can just ask

00:16:37,130 --> 00:16:49,730
for and then you're done who wants to

00:16:42,680 --> 00:16:51,350
contribute that good so those are the

00:16:49,730 --> 00:16:53,750
current limitations and the interest of

00:16:51,350 --> 00:16:56,810
time let's also look at scalability and

00:16:53,750 --> 00:16:59,480
this is taking math link as it is on to

00:16:56,810 --> 00:17:01,430
an IP link with unlimited bandwidth you

00:16:59,480 --> 00:17:04,270
know everybody has 5g and you have

00:17:01,430 --> 00:17:08,480
global coverage and StarLink and

00:17:04,270 --> 00:17:14,060
bandwidth is not an issue so how does it

00:17:08,480 --> 00:17:15,860
scale well certainly the packet size is

00:17:14,060 --> 00:17:18,410
something we could talk about i would

00:17:15,860 --> 00:17:19,770
actually advise to not necessarily go

00:17:18,410 --> 00:17:25,830
over to status and

00:17:19,770 --> 00:17:27,540
wireless MTU of 1.5 kilobytes but you

00:17:25,830 --> 00:17:31,580
know we need larger packets because you

00:17:27,540 --> 00:17:34,230
start to pay for the overhead we need

00:17:31,580 --> 00:17:37,110
security in terms of authentication and

00:17:34,230 --> 00:17:39,390
encryption and beyond what we have which

00:17:37,110 --> 00:17:40,680
is a good baseline but with where

00:17:39,390 --> 00:17:44,730
something that can be more easily

00:17:40,680 --> 00:17:47,310
deployed in a really secure fashion we

00:17:44,730 --> 00:17:49,200
need better quality of service again

00:17:47,310 --> 00:17:51,270
it's on the application micro service

00:17:49,200 --> 00:17:53,190
level right now already implemented and

00:17:51,270 --> 00:17:56,430
it's working reasonably well but it's

00:17:53,190 --> 00:17:58,380
like it's not easy to add another thing

00:17:56,430 --> 00:18:04,410
without being sort of deep down in the

00:17:58,380 --> 00:18:08,240
protocol guts anything that is not on

00:18:04,410 --> 00:18:08,240
here that should be on here so

00:18:17,010 --> 00:18:22,170
hamish said it's probably important that

00:18:20,010 --> 00:18:25,110
it's easier to understand how to talk to

00:18:22,170 --> 00:18:27,030
an individual component how to how to

00:18:25,110 --> 00:18:31,350
actually built a micro service so I

00:18:27,030 --> 00:18:34,230
think it's generated documentation for

00:18:31,350 --> 00:18:36,480
the protocol dependencies of individual

00:18:34,230 --> 00:18:39,480
micro services so as you look at a spec

00:18:36,480 --> 00:18:41,310
you know ok this is how it works these

00:18:39,480 --> 00:18:42,950
are the dependencies and as we

00:18:41,310 --> 00:18:45,360
standardize more things like

00:18:42,950 --> 00:18:47,220
retransmission it's also a bit easier to

00:18:45,360 --> 00:18:48,450
understand because then you go like okay

00:18:47,220 --> 00:18:49,890
this is retransmission and I don't

00:18:48,450 --> 00:18:51,960
actually understand what it's doing but

00:18:49,890 --> 00:18:58,400
it's kind of there right now you need to

00:18:51,960 --> 00:18:58,400
understand how to do it yep

00:19:01,530 --> 00:19:06,450
what about protocol capabilities that's

00:19:05,010 --> 00:19:08,730
also one of the things that goes in the

00:19:06,450 --> 00:19:12,480
same direction as a retransmission which

00:19:08,730 --> 00:19:15,390
is now handled in software on a

00:19:12,480 --> 00:19:17,610
case-to-case basis so I want to know is

00:19:15,390 --> 00:19:21,930
my autopilot supporting message X or

00:19:17,610 --> 00:19:23,750
service X this discoverability yes

00:19:21,930 --> 00:19:27,680
really important

00:19:23,750 --> 00:19:27,680
another thing that Ross does

00:19:35,240 --> 00:19:41,630
just bigger messages transmission images

00:19:38,880 --> 00:19:44,429
video over more link

00:19:41,630 --> 00:19:49,380
yeah I think bigger messages and

00:19:44,429 --> 00:19:51,270
automatic fragmentation again there are

00:19:49,380 --> 00:19:53,940
clever people who have solved that like

00:19:51,270 --> 00:19:56,250
you know I'm sure like hundred times in

00:19:53,940 --> 00:19:59,370
the last 50 years but like recently

00:19:56,250 --> 00:20:02,929
implementations things like DDS fast our

00:19:59,370 --> 00:20:02,929
GPS yes

00:20:11,200 --> 00:20:15,860
right

00:20:13,150 --> 00:20:19,070
synchronization if you want to update a

00:20:15,860 --> 00:20:20,360
few parameters on the drone and be sure

00:20:19,070 --> 00:20:23,530
that either

00:20:20,360 --> 00:20:31,340
all of them are accepted or none

00:20:23,530 --> 00:20:34,190
transactions yes basically yes air Aman

00:20:31,340 --> 00:20:37,760
I think you have to go back there can

00:20:34,190 --> 00:20:52,130
you ask a question next but wait wait

00:20:37,760 --> 00:20:55,100
not yet now so in extension to do right

00:20:52,130 --> 00:20:59,300
now you can you can set a component ID

00:20:55,100 --> 00:21:03,860
or target ID which is either zero so all

00:20:59,300 --> 00:21:07,820
systems or just a single component ID or

00:21:03,860 --> 00:21:09,260
a system the differentiation between I

00:21:07,820 --> 00:21:10,820
want to send a message to all ground

00:21:09,260 --> 00:21:13,550
stations that are listening on this

00:21:10,820 --> 00:21:15,440
network or all whatever component I

00:21:13,550 --> 00:21:16,970
think either it's already working but

00:21:15,440 --> 00:21:20,720
not clear that it should work that way

00:21:16,970 --> 00:21:25,250
and not implement it as such or should

00:21:20,720 --> 00:21:28,430
be something to consider that's

00:21:25,250 --> 00:21:30,470
interesting I like off the top of my

00:21:28,430 --> 00:21:32,750
head I would think if you would send a

00:21:30,470 --> 00:21:35,150
message to all systems and a ground

00:21:32,750 --> 00:21:38,410
station component ID we can build that

00:21:35,150 --> 00:21:41,090
into v2 in a not very beautiful way but

00:21:38,410 --> 00:21:42,650
being able to send to certain device

00:21:41,090 --> 00:21:44,510
types and I think that's pretty much

00:21:42,650 --> 00:21:46,160
above any middleware this is like

00:21:44,510 --> 00:21:47,720
software that we would need to build but

00:21:46,160 --> 00:21:49,640
I can totally see that that makes sense

00:21:47,720 --> 00:21:52,990
you would also want to send a

00:21:49,640 --> 00:21:56,570
transponder message that way yep

00:21:52,990 --> 00:22:03,940
will you likely consider support for

00:21:56,570 --> 00:22:06,380
multicast IGMP leaves and joins yes

00:22:03,940 --> 00:22:09,350
although I'm generally good at knowing

00:22:06,380 --> 00:22:11,810
what I don't know and I don't know like

00:22:09,350 --> 00:22:13,520
how scalable existing middleware

00:22:11,810 --> 00:22:15,560
solutions are once you put them on

00:22:13,520 --> 00:22:20,680
multicast what what corner cases they

00:22:15,560 --> 00:22:20,680
run into so to be able to be analyzed

00:22:21,750 --> 00:22:25,340
can you raise your hand please

00:22:31,980 --> 00:22:37,320
on the topic of target system ID and

00:22:34,950 --> 00:22:39,299
component IG it will be nice if they

00:22:37,320 --> 00:22:42,210
would be part of a generic message and

00:22:39,299 --> 00:22:44,519
not each specific message because you

00:22:42,210 --> 00:22:46,620
can't right now make a router note

00:22:44,519 --> 00:22:49,350
without understanding every single

00:22:46,620 --> 00:22:53,370
message so that is actually problem

00:22:49,350 --> 00:22:55,950
that's solved in v2 so there is for

00:22:53,370 --> 00:22:59,039
every packet that has a target component

00:22:55,950 --> 00:23:03,000
ID a an offset that shows you where that

00:22:59,039 --> 00:23:06,600
is and if if the offset is I need to I

00:23:03,000 --> 00:23:08,340
think if the offset is zero it might be

00:23:06,600 --> 00:23:09,620
negative number I need to look but then

00:23:08,340 --> 00:23:12,929
essentially you know it's a broadcast

00:23:09,620 --> 00:23:14,879
it's the same value as 0 so you can do

00:23:12,929 --> 00:23:18,620
that with version 2 completely

00:23:14,879 --> 00:23:18,620
automatically with the C library

00:23:24,900 --> 00:23:30,420
I'm just wondering which of these things

00:23:27,970 --> 00:23:34,060
that were discussing actually belong

00:23:30,420 --> 00:23:36,640
into the protocol and which of them

00:23:34,060 --> 00:23:40,600
maybe could be included in the map is

00:23:36,640 --> 00:23:44,530
decay that is a very good question so

00:23:40,600 --> 00:23:48,250
for me a lot of it needs to be on the

00:23:44,530 --> 00:23:54,070
transport on the transport not

00:23:48,250 --> 00:23:56,730
necessarily on the semantics but maybe

00:23:54,070 --> 00:23:59,350
such things as the RET transmission

00:23:56,730 --> 00:24:07,180
could be pushed to the mother's decatur

00:23:59,350 --> 00:24:07,390
just and courage people to use it thank

00:24:07,180 --> 00:24:10,300
you

00:24:07,390 --> 00:24:14,670
yeah I mean yes do you want to talk

00:24:10,300 --> 00:24:14,670
about to that like one minute

00:24:27,500 --> 00:24:32,519
so I believe as an end user you don't

00:24:30,389 --> 00:24:34,919
care you just don't care at all as the

00:24:32,519 --> 00:24:36,330
MAV SDK developer you know you actually

00:24:34,919 --> 00:24:37,710
prefer if you don't have to implement

00:24:36,330 --> 00:24:45,450
like three different ways of doing

00:24:37,710 --> 00:24:50,330
retransmission yes then you should start

00:24:45,450 --> 00:24:52,440
using it the other thing is

00:24:50,330 --> 00:24:55,320
retransmission and quality of service

00:24:52,440 --> 00:24:57,779
are closely linked you cannot build a

00:24:55,320 --> 00:25:00,330
good quality of service system without

00:24:57,779 --> 00:25:02,600
factoring in retransmission because

00:25:00,330 --> 00:25:05,549
otherwise you have this really high

00:25:02,600 --> 00:25:06,980
priority message that gets retransmitted

00:25:05,549 --> 00:25:09,120
and trashes your safety critical

00:25:06,980 --> 00:25:11,159
messages in the process because you have

00:25:09,120 --> 00:25:13,799
link congestion so that's why I think

00:25:11,159 --> 00:25:16,470
and we we kind of manage that right now

00:25:13,799 --> 00:25:19,049
on the application layer and in the

00:25:16,470 --> 00:25:21,750
autopilot specifically and on the ground

00:25:19,049 --> 00:25:23,190
station and MAV SDK side so it's all

00:25:21,750 --> 00:25:24,899
good like we have actually good

00:25:23,190 --> 00:25:26,850
performance but you need to know too

00:25:24,899 --> 00:25:28,080
much about the protocol intrinsic and

00:25:26,850 --> 00:25:32,700
that's why I think it would help to have

00:25:28,080 --> 00:25:36,870
it in the transport good one last point

00:25:32,700 --> 00:25:39,630
I'm almost done how do you engage if you

00:25:36,870 --> 00:25:42,059
have now all these great ideas and you

00:25:39,630 --> 00:25:46,789
want to change the world and replace

00:25:42,059 --> 00:25:49,399
thirteen standards by introducing 214th

00:25:46,789 --> 00:25:54,000
then you can absolutely do it

00:25:49,399 --> 00:25:57,570
join the bi-weekly def call we probably

00:25:54,000 --> 00:26:00,510
will make you talk about really tactical

00:25:57,570 --> 00:26:06,299
short-term things like should be a float

00:26:00,510 --> 00:26:08,159
or an int in the calendar but we also

00:26:06,299 --> 00:26:10,830
have the right people there and more

00:26:08,159 --> 00:26:15,600
attendance than just px4 to actually

00:26:10,830 --> 00:26:18,470
talk about you know what is what is the

00:26:15,600 --> 00:26:22,260
vision what is the next step evolution

00:26:18,470 --> 00:26:24,450
and that would also be the right point

00:26:22,260 --> 00:26:26,340
also the flag channel to raise things

00:26:24,450 --> 00:26:28,529
like hey I've come across this cool

00:26:26,340 --> 00:26:30,659
thing that's a total Ross killer why

00:26:28,529 --> 00:26:33,029
don't you you know look at that

00:26:30,659 --> 00:26:35,639
transport and because I've said a couple

00:26:33,029 --> 00:26:37,290
times Ross we're not going to you know

00:26:35,639 --> 00:26:41,340
use Ross as Ross

00:26:37,290 --> 00:26:45,750
we're going to put the semantics onto

00:26:41,340 --> 00:26:48,270
DDS transport and allow people to use a

00:26:45,750 --> 00:26:53,130
single transport layer implementation if

00:26:48,270 --> 00:26:56,160
we were to go that route probably also

00:26:53,130 --> 00:26:58,110
backwards compatible and probably also

00:26:56,160 --> 00:27:01,560
in a way that could be really easily

00:26:58,110 --> 00:27:04,650
interfaced with qs2 serial links because

00:27:01,560 --> 00:27:07,920
again MAV link is a protocol built for a

00:27:04,650 --> 00:27:12,750
stable API ROS is a protocol for inter

00:27:07,920 --> 00:27:15,690
vehicle communication right now and the

00:27:12,750 --> 00:27:18,270
basic promise of MAV link is that you

00:27:15,690 --> 00:27:21,780
can connect to a drone in a very

00:27:18,270 --> 00:27:24,750
standardized way and you can do it let

00:27:21,780 --> 00:27:27,660
it do high-level stuff without starting

00:27:24,750 --> 00:27:30,530
to touch the guts which also means there

00:27:27,660 --> 00:27:33,450
will be access control needed and so

00:27:30,530 --> 00:27:35,880
also in the future there always will be

00:27:33,450 --> 00:27:39,330
the sort of this internal thing that has

00:27:35,880 --> 00:27:43,380
full system access and an external level

00:27:39,330 --> 00:27:45,840
of access and control and maybe we can

00:27:43,380 --> 00:27:47,070
converge on a technology a bit but it

00:27:45,840 --> 00:27:49,320
will be different things for different

00:27:47,070 --> 00:27:53,480
people because it's different type of

00:27:49,320 --> 00:27:53,480
developers thank you

00:27:54,020 --> 00:27:58,109
[Applause]

00:28:02,279 --> 00:28:04,340

YouTube URL: https://www.youtube.com/watch?v=-ftop8lvSPE


