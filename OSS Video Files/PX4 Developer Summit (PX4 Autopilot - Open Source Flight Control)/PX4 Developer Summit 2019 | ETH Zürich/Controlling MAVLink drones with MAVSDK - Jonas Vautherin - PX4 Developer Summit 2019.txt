Title: Controlling MAVLink drones with MAVSDK - Jonas Vautherin - PX4 Developer Summit 2019
Publication date: 2019-07-03
Playlist: PX4 Developer Summit 2019 | ETH ZÃ¼rich
Description: 
	Jonas Vautherin
Software Engineer, Auterion
MAVSDK Maintainer

This session will be dedicated to learn about the roadmap of MAVSDK and how to use it. It will start by providing an overview of MAVSDK (previously called 'DronecodeSDK'), its design, supported features and roadmap for the future changes to come. We will then move to live demos, that participants should be able to reproduce on their computer. Preferred languages and platforms for the workshop are C++, Python and Swift on Linux and macOS, but Windows users are welcome. Ideally, people wanting to reproduce the demos should be able to run SITL on their computer before the session (be it jmavsim or gazebo). At the end, you should be able to write your own code taking off and flying a simple mission on a simulator. It is suitable for any potential contributor or adopter willing to know whether MAVSDK is a good alternative for their use-case.
Captions: 
	00:00:07,920 --> 00:00:15,240
please welcome John

00:00:10,710 --> 00:00:21,050
[Applause]

00:00:15,240 --> 00:00:22,190
okay can you guys hear me I guess okay

00:00:21,050 --> 00:00:25,770
[Music]

00:00:22,190 --> 00:00:30,090
okay so this session will be about the

00:00:25,770 --> 00:00:33,000
novice decay before we start just like

00:00:30,090 --> 00:00:35,630
before today who knew about the MAV SDK

00:00:33,000 --> 00:00:43,520
or John Cody zk or like T SDK

00:00:35,630 --> 00:00:49,250
okay who has been using it Thanks

00:00:43,520 --> 00:00:54,210
okay so Julian and I are both

00:00:49,250 --> 00:00:57,570
maintaining the MAV SDK so it's been

00:00:54,210 --> 00:00:59,670
said today it's been renamed recently

00:00:57,570 --> 00:01:02,969
from drunkard educate uma vez de ke I

00:00:59,670 --> 00:01:04,350
think like as always this time we we

00:01:02,969 --> 00:01:08,970
hope we will not change the name in one

00:01:04,350 --> 00:01:10,650
year so yeah let's keep that julian has

00:01:08,970 --> 00:01:12,810
been presenting before up so I will be

00:01:10,650 --> 00:01:14,700
talking a bit more now and he will be

00:01:12,810 --> 00:01:18,540
here for questions at the end if you

00:01:14,700 --> 00:01:20,220
have something so um yeah quick

00:01:18,540 --> 00:01:21,899
introduction about the MA basically well

00:01:20,220 --> 00:01:24,000
what is it's like if I had to say in one

00:01:21,899 --> 00:01:25,979
sentence what it is I would say ma vzk

00:01:24,000 --> 00:01:30,540
is a set of libraries providing a high

00:01:25,979 --> 00:01:32,040
level API to move link doesn't mean px4

00:01:30,540 --> 00:01:34,310
it's really marveling like the goal is

00:01:32,040 --> 00:01:37,079
to support like the standard modeling

00:01:34,310 --> 00:01:39,030
it's currently developed and tested

00:01:37,079 --> 00:01:42,079
against px4 but we would like to have

00:01:39,030 --> 00:01:42,079
more than that

00:01:43,549 --> 00:01:52,560
so now SDK can be used to to build

00:01:49,500 --> 00:01:54,509
translation like like qgc so that would

00:01:52,560 --> 00:01:57,630
be on the left side here so we have qgc

00:01:54,509 --> 00:01:59,789
talking loving to the drone if qgc can

00:01:57,630 --> 00:02:01,590
talk to the drone it means that my vzk

00:01:59,789 --> 00:02:05,009
canto differ from as well and do

00:02:01,590 --> 00:02:07,500
something it can be used on the other

00:02:05,009 --> 00:02:09,660
side like a bit more like Madras is used

00:02:07,500 --> 00:02:12,990
like as an on-board module onboard the

00:02:09,660 --> 00:02:15,270
drone so talking to the camera to px4

00:02:12,990 --> 00:02:16,860
whatever and there you could have qgc

00:02:15,270 --> 00:02:20,640
talking to the phone and then my

00:02:16,860 --> 00:02:22,440
basically in the on-board module or you

00:02:20,640 --> 00:02:25,310
could obviously have it done on both

00:02:22,440 --> 00:02:25,310
sides right

00:02:26,540 --> 00:02:34,050
so I mentioned qgc Mavros why why my vzk

00:02:31,200 --> 00:02:38,160
like do we mean to replace who GC or

00:02:34,050 --> 00:02:40,830
Madras obviously not not really thing is

00:02:38,160 --> 00:02:43,470
that if qgc was to be like created now

00:02:40,830 --> 00:02:47,190
maybe it would make sense to see if it

00:02:43,470 --> 00:02:48,599
could be done with novice DK but yeah

00:02:47,190 --> 00:02:53,580
we will not rewrite it just just for

00:02:48,599 --> 00:02:55,319
that the point is Q GC and Mavros are

00:02:53,580 --> 00:02:58,170
like two different Maverick

00:02:55,319 --> 00:03:02,040
implementations and they have their own

00:02:58,170 --> 00:03:03,810
like use case and MAV SDK has has like

00:03:02,040 --> 00:03:07,380
is aiming at like different use cases

00:03:03,810 --> 00:03:09,680
right and to understand a bit that I

00:03:07,380 --> 00:03:12,840
would like to show like a high level

00:03:09,680 --> 00:03:17,000
explanation of what like how Marvis DK

00:03:12,840 --> 00:03:19,500
is built so it starts with C++ library

00:03:17,000 --> 00:03:25,410
that's what we call like to call every

00:03:19,500 --> 00:03:29,639
or like the MAV SDK C++ library and that

00:03:25,410 --> 00:03:31,769
one is talking muffling maintaining your

00:03:29,639 --> 00:03:33,540
connection it's sending heartbeats

00:03:31,769 --> 00:03:37,829
receiving the messages processing that

00:03:33,540 --> 00:03:39,660
and it exposes a high level API so you

00:03:37,829 --> 00:03:42,569
would just say take off or like send a

00:03:39,660 --> 00:03:44,280
list of waypoints instead of you know

00:03:42,569 --> 00:03:47,130
sending the MAV link message to say I'm

00:03:44,280 --> 00:03:49,470
sending the first Waypoint okay second

00:03:47,130 --> 00:03:52,470
one restore it if you have a problem or

00:03:49,470 --> 00:03:53,730
something like that and then the thing

00:03:52,470 --> 00:03:56,310
is that we would like to support act

00:03:53,730 --> 00:03:58,019
maybe more languages and to do that

00:03:56,310 --> 00:04:01,709
there are different ways to bring like

00:03:58,019 --> 00:04:04,109
to wrap C++ and to have to bring that to

00:04:01,709 --> 00:04:06,150
other languages let's just say now

00:04:04,109 --> 00:04:08,790
that's an implementation detail I will

00:04:06,150 --> 00:04:10,799
not go into this detail so let's just

00:04:08,790 --> 00:04:13,349
call that a black box but we have this

00:04:10,799 --> 00:04:15,269
like boilerplate code that brings you

00:04:13,349 --> 00:04:18,630
different languages right now we have

00:04:15,269 --> 00:04:20,910
Python Swift java javascript is really

00:04:18,630 --> 00:04:26,610
prototype proof of concept but that's

00:04:20,910 --> 00:04:28,500
that's working as well and like the

00:04:26,610 --> 00:04:31,020
languages here on the Left those are

00:04:28,500 --> 00:04:35,460
cross-platform and we was also cross

00:04:31,020 --> 00:04:37,140
compile the C++ collaborate for as many

00:04:35,460 --> 00:04:38,920
platforms as we can so it's working on

00:04:37,140 --> 00:04:48,100
Linux on

00:04:38,920 --> 00:04:50,860
Mike OS Windows Android iOS yeah just I

00:04:48,100 --> 00:04:52,270
would like to give some like vocabulary

00:04:50,860 --> 00:04:53,200
on like how we call the different

00:04:52,270 --> 00:04:54,700
components and what all the different

00:04:53,200 --> 00:04:56,770
components because then it's much much

00:04:54,700 --> 00:05:00,520
more easy to talk about the system so

00:04:56,770 --> 00:05:03,330
this C++ library that's what we call ma

00:05:00,520 --> 00:05:08,260
vzk c++ or like the core libraries

00:05:03,330 --> 00:05:10,390
together with this black box that's what

00:05:08,260 --> 00:05:12,580
we call the MAV SDK server and that's

00:05:10,390 --> 00:05:18,010
what the languages on the Left choose to

00:05:12,580 --> 00:05:20,290
talk nothing actually so if you take the

00:05:18,010 --> 00:05:22,690
Python bindings together with the black

00:05:20,290 --> 00:05:25,500
box and the super special presentation

00:05:22,690 --> 00:05:28,330
you have what we call my vzk Python

00:05:25,500 --> 00:05:31,480
same thing for Swift my basic is swift

00:05:28,330 --> 00:05:38,320
my physique a Java and for JavaScript

00:05:31,480 --> 00:05:41,800
my basic a JavaScript and what what does

00:05:38,320 --> 00:05:45,400
that bring why did we design it this way

00:05:41,800 --> 00:05:47,260
the idea is that we have one single

00:05:45,400 --> 00:05:48,850
maverick implementation for all the

00:05:47,260 --> 00:05:50,500
platforms for all the different

00:05:48,850 --> 00:05:52,180
languages that we support and that's

00:05:50,500 --> 00:05:54,790
that's actually super nice because it

00:05:52,180 --> 00:05:56,950
means that if we fix a bug in that then

00:05:54,790 --> 00:05:58,990
we fix it for all the languages we don't

00:05:56,950 --> 00:06:02,560
implement like the modeling protocol

00:05:58,990 --> 00:06:04,780
ones in Java once in c++ once in swift

00:06:02,560 --> 00:06:08,020
and have all the bugs in mix make errors

00:06:04,780 --> 00:06:09,760
there we share this one thing there but

00:06:08,020 --> 00:06:11,770
then like this black box is not so

00:06:09,760 --> 00:06:13,450
trivial to write and there's a lot of

00:06:11,770 --> 00:06:16,810
boilerplate and also what we do is that

00:06:13,450 --> 00:06:20,250
we auto generates all of that so and and

00:06:16,810 --> 00:06:22,480
we see that it doesn't take the C++

00:06:20,250 --> 00:06:26,200
library completely but just a bit like

00:06:22,480 --> 00:06:30,190
the idea is that we generates the C++

00:06:26,200 --> 00:06:32,110
API and then all the making all like the

00:06:30,190 --> 00:06:36,940
the messaging and the bindings that go

00:06:32,110 --> 00:06:38,890
to Python swift and the other ones so at

00:06:36,940 --> 00:06:40,270
the end all you have to do is just like

00:06:38,890 --> 00:06:43,360
write the business logic at the Maverick

00:06:40,270 --> 00:06:46,450
nothing implementation that also gives

00:06:43,360 --> 00:06:48,580
you a consistent set of features SDK

00:06:46,450 --> 00:06:50,470
like you know that if you have that and

00:06:48,580 --> 00:06:52,880
buy like a feature in Python you have it

00:06:50,470 --> 00:06:55,970
in in Swift as well or in Java

00:06:52,880 --> 00:06:59,450
and if somebody adds a feature in C++

00:06:55,970 --> 00:07:01,340
then it's the same as if we did not have

00:06:59,450 --> 00:07:02,540
any of the other languages there's no

00:07:01,340 --> 00:07:05,030
overhead because you have to generate

00:07:02,540 --> 00:07:07,400
that overhead but you implement that

00:07:05,030 --> 00:07:09,230
marvelling feature in C++ and you get it

00:07:07,400 --> 00:07:14,660
in northern English we support at once

00:07:09,230 --> 00:07:17,030
and it gives us a stable API and I just

00:07:14,660 --> 00:07:19,430
want to show a bit more on that so the

00:07:17,030 --> 00:07:22,580
idea is that we define the interface to

00:07:19,430 --> 00:07:25,550
my vck as using the protobuf definition

00:07:22,580 --> 00:07:29,870
language so proto files basically and

00:07:25,550 --> 00:07:32,180
and we can then like we will have CI

00:07:29,870 --> 00:07:34,850
tests from that that will just ensure

00:07:32,180 --> 00:07:38,840
that when we modify this API then we

00:07:34,850 --> 00:07:40,910
don't break completely everything and I

00:07:38,840 --> 00:07:42,800
just wanted to show that's the we have a

00:07:40,910 --> 00:07:45,710
web report just for that that's the

00:07:42,800 --> 00:07:47,930
that's where we keep our profiles and

00:07:45,710 --> 00:07:51,530
that's where we keep the proto C plug-in

00:07:47,930 --> 00:07:53,360
we used to generate the code so my vzk

00:07:51,530 --> 00:07:56,900
proto is the repo where we have the api

00:07:53,360 --> 00:07:59,030
the proto files are here and it's

00:07:56,900 --> 00:08:02,630
organized in plugins so plugin is a set

00:07:59,030 --> 00:08:06,620
of mapping features you have action

00:08:02,630 --> 00:08:09,890
calibration gimbal camera mission

00:08:06,620 --> 00:08:12,200
off-board and it's made in such a way

00:08:09,890 --> 00:08:13,580
that you can add new ones so if you if

00:08:12,200 --> 00:08:16,430
you have a feature request actually like

00:08:13,580 --> 00:08:20,000
one way to do it is just to go there and

00:08:16,430 --> 00:08:22,400
add like a new plugin all new line in in

00:08:20,000 --> 00:08:24,350
this interface now let's just have a

00:08:22,400 --> 00:08:28,370
look for instance at the action plug-in

00:08:24,350 --> 00:08:32,060
and how its defined so it's defined as

00:08:28,370 --> 00:08:35,660
an RPC service on in photo buff so like

00:08:32,060 --> 00:08:37,190
here you would have all the the features

00:08:35,660 --> 00:08:40,219
we have for the action begins so you can

00:08:37,190 --> 00:08:43,280
army can design take off land set

00:08:40,219 --> 00:08:46,340
takeoff attitude and all that and

00:08:43,280 --> 00:08:48,020
together with that we also define like a

00:08:46,340 --> 00:08:49,970
few other things it's basically the

00:08:48,020 --> 00:08:52,340
messages that that we send with that if

00:08:49,970 --> 00:08:54,890
you want to set the altitude you want to

00:08:52,340 --> 00:08:57,640
set to say like what kind of of

00:08:54,890 --> 00:09:00,050
parameter you sent there like if you get

00:08:57,640 --> 00:09:02,120
takeoff attitude then you will receive a

00:09:00,050 --> 00:09:04,490
float so we define all of this at the

00:09:02,120 --> 00:09:06,660
protobuf level we also define a key

00:09:04,490 --> 00:09:08,700
error messages you could receive

00:09:06,660 --> 00:09:12,290
like though it's a success or like you

00:09:08,700 --> 00:09:14,610
have come on denied for for some reason

00:09:12,290 --> 00:09:16,020
so that's that's definitely a resource

00:09:14,610 --> 00:09:18,960
you should you should check if you want

00:09:16,020 --> 00:09:21,570
to use the JDK because it really shows

00:09:18,960 --> 00:09:24,540
what we have that would be the telemetry

00:09:21,570 --> 00:09:27,180
plugins so we can get the position home

00:09:24,540 --> 00:09:33,240
is it armed or not like the attitude and

00:09:27,180 --> 00:09:36,000
all of that okay that's not all like

00:09:33,240 --> 00:09:38,130
with MA basically what the as I was

00:09:36,000 --> 00:09:39,780
saying like we have all those like dis

00:09:38,130 --> 00:09:42,960
plug-in architecture and it's super nice

00:09:39,780 --> 00:09:44,520
because it means that you can easily add

00:09:42,960 --> 00:09:47,190
a new plugin without having a lot of

00:09:44,520 --> 00:09:49,920
conflicts itself and it's it's an easy

00:09:47,190 --> 00:09:53,220
way to add new features we also bring

00:09:49,920 --> 00:09:54,930
like a lot of CI infrastructure we have

00:09:53,220 --> 00:09:56,850
a lot of tests that run there like we

00:09:54,930 --> 00:10:00,930
compile on different platforms for

00:09:56,850 --> 00:10:03,570
different languages and what we do as

00:10:00,930 --> 00:10:05,880
well is that we try to make it easy to

00:10:03,570 --> 00:10:07,140
use so we package it and distribute it

00:10:05,880 --> 00:10:10,050
in such a way that it's easy to install

00:10:07,140 --> 00:10:13,260
and run for C++ that would mean that we

00:10:10,050 --> 00:10:15,810
have like their packages or PM packages

00:10:13,260 --> 00:10:17,520
for Python it's on the the Python

00:10:15,810 --> 00:10:20,010
repository so you just have to do peep

00:10:17,520 --> 00:10:22,460
install my basic and you get it for

00:10:20,010 --> 00:10:26,130
Swift we have the Swift package manager

00:10:22,460 --> 00:10:28,290
iOS got a choco pod so in our US like in

00:10:26,130 --> 00:10:30,750
one line in your iOS project you get it

00:10:28,290 --> 00:10:34,110
and you can start using it same for Java

00:10:30,750 --> 00:10:35,910
we don't have all of those packages yet

00:10:34,110 --> 00:10:41,730
but that's that's the thing we William

00:10:35,910 --> 00:10:44,010
to get so I guess what I want to say is

00:10:41,730 --> 00:10:45,750
that if you need to talk moving you

00:10:44,010 --> 00:10:48,660
should consider up my vzk because we

00:10:45,750 --> 00:10:51,200
make it easy to install easy to use we

00:10:48,660 --> 00:10:54,360
have a stable API it's cross-platform

00:10:51,200 --> 00:10:57,840
multi-language and it's easy to extend

00:10:54,360 --> 00:10:59,730
so if you if you want to provide like

00:10:57,840 --> 00:11:01,200
you you're like draw manufacturer and

00:10:59,730 --> 00:11:04,890
you want to provide an SDK for your own

00:11:01,200 --> 00:11:08,400
then we we bring like this framework

00:11:04,890 --> 00:11:10,850
that you can use to provide an SDK and

00:11:08,400 --> 00:11:13,350
we don't limit you in the in the

00:11:10,850 --> 00:11:15,780
features you have Aikido you can

00:11:13,350 --> 00:11:16,410
contribute new features we will help

00:11:15,780 --> 00:11:18,480
with that

00:11:16,410 --> 00:11:20,520
you will benefit from all our

00:11:18,480 --> 00:11:22,560
infrastructure so yeah you know that

00:11:20,520 --> 00:11:24,390
if you have like some special features

00:11:22,560 --> 00:11:26,130
that are only for your drone and you

00:11:24,390 --> 00:11:27,450
could have a plugin that's only for your

00:11:26,130 --> 00:11:29,100
drone doesn't even have to be

00:11:27,450 --> 00:11:31,130
open-source like you just keep that for

00:11:29,100 --> 00:11:31,130
yourself

00:11:31,430 --> 00:11:38,130
okay the goal of the session we scan off

00:11:35,010 --> 00:11:40,050
to give a road map so here I'm

00:11:38,130 --> 00:11:42,510
explaining a bit like the design like

00:11:40,050 --> 00:11:45,030
where we are trying to go to go but not

00:11:42,510 --> 00:11:46,740
all of that is done so it would not be

00:11:45,030 --> 00:11:51,120
super it would not be fair to say that

00:11:46,740 --> 00:11:54,480
it's unusable now we have a lot of

00:11:51,120 --> 00:11:56,220
different components that work so I just

00:11:54,480 --> 00:11:58,650
try to show a bit on this picture like

00:11:56,220 --> 00:12:00,540
what we have so on the left Python Swift

00:11:58,650 --> 00:12:03,210
and Java are completely auto-generated

00:12:00,540 --> 00:12:05,850
now so if you go in the photo files you

00:12:03,210 --> 00:12:08,340
add one new feature and you run the

00:12:05,850 --> 00:12:14,190
other generation then then that just

00:12:08,340 --> 00:12:16,800
pops up there in those like SDKs what's

00:12:14,190 --> 00:12:18,600
not generated is the dis black box in

00:12:16,800 --> 00:12:22,950
the middle for now it has been written

00:12:18,600 --> 00:12:24,390
manually so all the features that we so

00:12:22,950 --> 00:12:25,920
all the features that are now in the

00:12:24,390 --> 00:12:27,600
proto files they are implemented there

00:12:25,920 --> 00:12:29,640
so we can use them already but if you

00:12:27,600 --> 00:12:31,950
want to add a new feature right now you

00:12:29,640 --> 00:12:34,050
have to write a bit of boilerplate there

00:12:31,950 --> 00:12:35,970
it has been done by contributors it's

00:12:34,050 --> 00:12:38,400
not like the end of the world but still

00:12:35,970 --> 00:12:40,230
that's not as nice as we would like so

00:12:38,400 --> 00:12:43,170
that's that's something we will improve

00:12:40,230 --> 00:12:45,150
now the C++ library has been there for

00:12:43,170 --> 00:12:47,190
like three years it's been used in

00:12:45,150 --> 00:12:49,500
production through the swift SDK or like

00:12:47,190 --> 00:12:53,850
alone so that's something that's that's

00:12:49,500 --> 00:12:56,390
that's done and in terms of platforms it

00:12:53,850 --> 00:13:00,690
already works on Linux Mac OS iOS

00:12:56,390 --> 00:13:06,000
Windows Android I just broke it recently

00:13:00,690 --> 00:13:08,010
so if we come back soon and yeah so like

00:13:06,000 --> 00:13:10,560
to summarize what's not freely done is

00:13:08,010 --> 00:13:13,260
like Java is a bit of a prototype now

00:13:10,560 --> 00:13:15,660
it's auto-generated Java Script is proof

00:13:13,260 --> 00:13:19,350
of concept so there's quite a bit of

00:13:15,660 --> 00:13:21,810
work to do there and in on this other

00:13:19,350 --> 00:13:25,620
generation thing like this black box

00:13:21,810 --> 00:13:28,260
thingy is not completely generated and

00:13:25,620 --> 00:13:30,600
that that's basically the roadmap like

00:13:28,260 --> 00:13:32,220
the next priority we have is to generate

00:13:30,600 --> 00:13:33,840
this black box that's that's what we

00:13:32,220 --> 00:13:36,840
call my vzk server

00:13:33,840 --> 00:13:38,670
also improved the C++ packaging and

00:13:36,840 --> 00:13:42,420
distribution so we'll just show like in

00:13:38,670 --> 00:13:46,920
a few minutes how to install the MAV SDK

00:13:42,420 --> 00:13:52,279
in in C++ but yeah we can improve that

00:13:46,920 --> 00:13:54,210
for other like systems same for Java I

00:13:52,279 --> 00:13:56,790
mentioned at the beginning that you can

00:13:54,210 --> 00:13:59,190
use malvaceae to build like a ground

00:13:56,790 --> 00:14:01,410
station or to like build a module that

00:13:59,190 --> 00:14:03,510
will run on board we have much more

00:14:01,410 --> 00:14:05,339
experience on the front station side so

00:14:03,510 --> 00:14:06,690
one thing if we will do is just get some

00:14:05,339 --> 00:14:08,940
more experience I can make some tests

00:14:06,690 --> 00:14:11,670
and stuff like that on the on both side

00:14:08,940 --> 00:14:13,350
to see like what's required but if you

00:14:11,670 --> 00:14:15,570
need something like that that then

00:14:13,350 --> 00:14:17,910
definitely tell us because we need to

00:14:15,570 --> 00:14:21,510
know like what my basic I can do already

00:14:17,910 --> 00:14:24,630
and what needs to be improved and one

00:14:21,510 --> 00:14:26,640
thing we lack is the documentation we

00:14:24,630 --> 00:14:28,440
try to we have examples to show in

00:14:26,640 --> 00:14:31,800
different languages how to do how to use

00:14:28,440 --> 00:14:33,750
the different features there's like two

00:14:31,800 --> 00:14:35,880
proto API that you can use and get all

00:14:33,750 --> 00:14:38,190
the features we support but still we

00:14:35,880 --> 00:14:39,900
don't explain each feature how to use it

00:14:38,190 --> 00:14:41,910
and stuff like that and that can be

00:14:39,900 --> 00:14:44,010
auto-generated as well because it's not

00:14:41,910 --> 00:14:45,600
like every function is the same it's

00:14:44,010 --> 00:14:47,089
different like they like many of them

00:14:45,600 --> 00:14:49,470
are the same if you want to subscribe to

00:14:47,089 --> 00:14:53,370
to a telemetry stream like you want to

00:14:49,470 --> 00:14:55,230
receive position messages it's the same

00:14:53,370 --> 00:14:57,240
as receiving like the attitude like you

00:14:55,230 --> 00:14:59,940
just receive some data structure right

00:14:57,240 --> 00:15:03,030
so we can Auto generate that and that's

00:14:59,940 --> 00:15:05,310
that's one thing we will do as

00:15:03,030 --> 00:15:07,530
maintainer we focus on that like making

00:15:05,310 --> 00:15:12,540
it such that it's a nice framework to

00:15:07,530 --> 00:15:14,280
use and and to to extend but of course

00:15:12,540 --> 00:15:17,130
if you have a feature that you need now

00:15:14,280 --> 00:15:19,140
before we finish all the rest then then

00:15:17,130 --> 00:15:21,270
we always review in support and we are

00:15:19,140 --> 00:15:23,610
happy to help getting that like one

00:15:21,270 --> 00:15:26,280
example is the geofence plugin it was

00:15:23,610 --> 00:15:33,450
recently contributed and and it's it's

00:15:26,280 --> 00:15:36,870
coming soon one thing I've realized is

00:15:33,450 --> 00:15:39,990
not completely it's like yzma vzk in

00:15:36,870 --> 00:15:43,380
beta can I use it or not I would say

00:15:39,990 --> 00:15:45,060
yeah use it it's not the C++ code is

00:15:43,380 --> 00:15:46,890
three years old there's been like quite

00:15:45,060 --> 00:15:47,880
a lot of tests on that we've been

00:15:46,890 --> 00:15:50,160
debating a lot

00:15:47,880 --> 00:15:53,580
it's it's working well and it's been

00:15:50,160 --> 00:15:57,690
used in production like in Swift there's

00:15:53,580 --> 00:15:59,910
the one station app that's using like

00:15:57,690 --> 00:16:01,740
the Swift SDK and it's been working for

00:15:59,910 --> 00:16:05,250
like a year or something like that and

00:16:01,740 --> 00:16:06,780
and like if the Swift physically uses

00:16:05,250 --> 00:16:10,620
that it means that it uses the super

00:16:06,780 --> 00:16:13,050
specific as well right so definitely use

00:16:10,620 --> 00:16:14,760
it one thing that was not clear is also

00:16:13,050 --> 00:16:16,530
that it's called version zero points on

00:16:14,760 --> 00:16:19,470
thing so it sounds like it's it may be a

00:16:16,530 --> 00:16:22,740
better it's not just because the API is

00:16:19,470 --> 00:16:25,830
not stable yet we will not make like

00:16:22,740 --> 00:16:27,360
huge changes but one thing that we

00:16:25,830 --> 00:16:28,500
change I mean from time to time we

00:16:27,360 --> 00:16:31,830
change a name or something that adds

00:16:28,500 --> 00:16:34,590
just because yeah we want better wording

00:16:31,830 --> 00:16:38,150
of with small things but it doesn't mean

00:16:34,590 --> 00:16:40,260
you should not use it use the SDK and

00:16:38,150 --> 00:16:42,480
yeah I mentioned before the

00:16:40,260 --> 00:16:44,400
documentation it's a bit lacking we have

00:16:42,480 --> 00:16:45,930
examples and if you if you have

00:16:44,400 --> 00:16:48,210
questions actually in you comment slack

00:16:45,930 --> 00:16:50,910
ask us we will help you probably add

00:16:48,210 --> 00:16:52,740
that to the documentation and maybe we

00:16:50,910 --> 00:16:56,340
will even write an example for you and

00:16:52,740 --> 00:16:58,350
just publish it on the report so yeah

00:16:56,340 --> 00:17:03,840
that should not be a reason not not to

00:16:58,350 --> 00:17:05,820
try ACK okay

00:17:03,840 --> 00:17:08,400
I'd like to I've been saying that it's

00:17:05,820 --> 00:17:10,820
easy to install for those of you who

00:17:08,400 --> 00:17:14,430
have tried in the past I know that it's

00:17:10,820 --> 00:17:16,410
it's not always easy to build like you

00:17:14,430 --> 00:17:17,760
have to that's one of the of the

00:17:16,410 --> 00:17:19,740
problems we have with the design if you

00:17:17,760 --> 00:17:21,810
want to build the Python SDK it means

00:17:19,740 --> 00:17:24,750
that you need to build the C++ library

00:17:21,810 --> 00:17:26,730
that's used by buy it and building that

00:17:24,750 --> 00:17:28,920
you need to know Sameach how to build in

00:17:26,730 --> 00:17:31,290
C++ it takes like 20 minutes for the

00:17:28,920 --> 00:17:34,170
differences and stuff we've seen people

00:17:31,290 --> 00:17:36,140
struggling with that so that's why we

00:17:34,170 --> 00:17:38,610
are working on the packaging and since

00:17:36,140 --> 00:17:41,880
for instance for python since yesterday

00:17:38,610 --> 00:17:44,700
we have the package on the Python report

00:17:41,880 --> 00:17:47,550
so you can really do people install

00:17:44,700 --> 00:17:48,890
maverick and I want to show stuff like

00:17:47,550 --> 00:17:52,400
that

00:17:48,890 --> 00:17:54,540
the first thing you need to have is okay

00:17:52,400 --> 00:17:56,250
you could connect the ready to a drone

00:17:54,540 --> 00:17:57,030
pod for testing an SDK maybe that's not

00:17:56,250 --> 00:18:01,620
the safest thing

00:17:57,030 --> 00:18:03,919
so having like co-running beat you know

00:18:01,620 --> 00:18:07,020
Jim I've seen gazebo whatever you want

00:18:03,919 --> 00:18:08,940
that's one thing where I've seen some

00:18:07,020 --> 00:18:11,220
people struggling like some people told

00:18:08,940 --> 00:18:12,630
me that they need it like they spent two

00:18:11,220 --> 00:18:14,610
days trying to get Jim I've seen running

00:18:12,630 --> 00:18:18,450
on their their machine so a quick way to

00:18:14,610 --> 00:18:21,210
do it is I have a docker image that is

00:18:18,450 --> 00:18:22,529
just running gazebo headless it means

00:18:21,210 --> 00:18:24,120
that you will not see like the fancy

00:18:22,529 --> 00:18:28,169
image with the drone taking off and

00:18:24,120 --> 00:18:30,150
flying a mission but you can kind of QT

00:18:28,169 --> 00:18:33,179
see to that and see like see it's moving

00:18:30,150 --> 00:18:34,860
you see I've put the link to the github

00:18:33,179 --> 00:18:37,110
thing and there are instructions there

00:18:34,860 --> 00:18:38,460
but basically it's one one line or if

00:18:37,110 --> 00:18:42,630
you have the account you just talk I'll

00:18:38,460 --> 00:18:46,740
run this image and that will run sito

00:18:42,630 --> 00:18:48,299
for you okay I was saying that since

00:18:46,740 --> 00:18:52,529
yesterday it's super easy to use

00:18:48,299 --> 00:18:54,750
mizuki Python so actually it's like you

00:18:52,529 --> 00:18:57,120
can do it in in a few lines of code and

00:18:54,750 --> 00:19:03,260
I will just set up so I will run

00:18:57,120 --> 00:19:05,419
sit down now just to kind of prove it

00:19:03,260 --> 00:19:08,450
let's hope it's easy

00:19:05,419 --> 00:19:14,880
okay so I've got sitter running here and

00:19:08,450 --> 00:19:19,200
I'll share it there and this is yeah

00:19:14,880 --> 00:19:21,179
just like another please we have like a

00:19:19,200 --> 00:19:23,340
few examples that I'm going to show okay

00:19:21,179 --> 00:19:27,149
let me just go on on the dream I've seen

00:19:23,340 --> 00:19:28,529
now I'm waiting for it to initialize and

00:19:27,149 --> 00:19:32,100
I'm just shaking checking that's

00:19:28,529 --> 00:19:34,289
something I do if I can take off the

00:19:32,100 --> 00:19:36,149
drone or sometimes I need to reboot Jim

00:19:34,289 --> 00:19:40,200
I've seen sometimes I have issues so

00:19:36,149 --> 00:19:42,000
it's working fine so I can now land good

00:19:40,200 --> 00:19:46,590
that has nothing to do with my basically

00:19:42,000 --> 00:19:48,570
that's just Jim assume now now I keep on

00:19:46,590 --> 00:19:50,929
the left I just kept the image of the

00:19:48,570 --> 00:19:56,340
throne but on the right I will be doing

00:19:50,929 --> 00:19:58,529
my basic e stuff right so to prove to

00:19:56,340 --> 00:20:00,809
you that I really haven't installed and

00:19:58,529 --> 00:20:03,899
I'm not cheating I'm just trying

00:20:00,809 --> 00:20:06,929
going to do it from from scratch so I

00:20:03,899 --> 00:20:12,450
create Python or VN you don't have to do

00:20:06,929 --> 00:20:15,779
it but just and I just go there okay so

00:20:12,450 --> 00:20:21,960
now installing the SDK is

00:20:15,779 --> 00:20:23,489
one night pip install my bazooka and

00:20:21,960 --> 00:20:26,159
that's it

00:20:23,489 --> 00:20:28,979
Marvis DK python is using a sink IO

00:20:26,159 --> 00:20:31,080
which means that you cannot run the

00:20:28,979 --> 00:20:33,690
co-routines directly in the in the

00:20:31,080 --> 00:20:36,749
Python ripple so I just install another

00:20:33,690 --> 00:20:38,789
one so people still are you console

00:20:36,749 --> 00:20:42,389
that's just for the sake of the other

00:20:38,789 --> 00:20:44,580
variable thing it gives me a Python and

00:20:42,389 --> 00:20:46,200
a Python is just like a Python web

00:20:44,580 --> 00:20:48,649
report that gives me an even loop before

00:20:46,200 --> 00:20:51,929
I think I okay

00:20:48,649 --> 00:20:57,830
so now I'm writing Python let's let's

00:20:51,929 --> 00:20:57,830
try to use it so I import from novice DK

00:20:58,190 --> 00:21:06,509
start moving so that comment will spin

00:21:01,979 --> 00:21:08,609
the like a novice DK server in the

00:21:06,509 --> 00:21:09,659
background and you need that that may be

00:21:08,609 --> 00:21:12,419
the key server is the thing that will

00:21:09,659 --> 00:21:14,369
connect to to gem of seam and python

00:21:12,419 --> 00:21:18,389
will connect to this server so i need

00:21:14,369 --> 00:21:22,409
that the other thing I need is I need to

00:21:18,389 --> 00:21:27,799
connect to the drone and that's it so

00:21:22,409 --> 00:21:32,219
let me start the maybe secure server

00:21:27,799 --> 00:21:33,899
that's it and the next step is that I

00:21:32,219 --> 00:21:38,599
want to create a drawn object that is

00:21:33,899 --> 00:21:42,629
just me connecting to the drone

00:21:38,599 --> 00:21:44,219
so yeah that's just I'm just saying that

00:21:42,629 --> 00:21:47,009
I connect and look at who's just I'm

00:21:44,219 --> 00:21:50,159
connecting now on my vzg server that's

00:21:47,009 --> 00:21:52,259
running on my machine so I can host and

00:21:50,159 --> 00:21:54,389
now that I have these drone objects then

00:21:52,259 --> 00:21:56,729
I can use all the features that I say

00:21:54,389 --> 00:22:00,659
that that I showed before on the on the

00:21:56,729 --> 00:22:02,279
photo repo so it's I think I owe so it's

00:22:00,659 --> 00:22:06,149
a go routine so I just have to wait for

00:22:02,279 --> 00:22:07,889
it but just wait drone action and here I

00:22:06,149 --> 00:22:10,039
could harm so let's try to arm and take

00:22:07,889 --> 00:22:10,039
off

00:22:13,450 --> 00:22:19,960
that's it and so like the goal is to

00:22:18,190 --> 00:22:22,450
show that in two minutes now if you have

00:22:19,960 --> 00:22:28,660
sitter running you can install my visa

00:22:22,450 --> 00:22:33,010
key and start winning stuff let me just

00:22:28,660 --> 00:22:35,770
land oh no actually I could show

00:22:33,010 --> 00:22:38,410
something else like I have all the

00:22:35,770 --> 00:22:42,190
plugins here right so drawn the

00:22:38,410 --> 00:22:58,500
telemetry dots okay position will give

00:22:42,190 --> 00:23:01,720
me an I think generator so for this will

00:22:58,500 --> 00:23:04,870
just gets me the like the telemetry

00:23:01,720 --> 00:23:06,490
position and show it on screen and maybe

00:23:04,870 --> 00:23:09,460
it's not super easy to see but we have

00:23:06,490 --> 00:23:12,160
latitude longitude reactive attitude and

00:23:09,460 --> 00:23:17,040
absolute altitude so that's the yeah way

00:23:12,160 --> 00:23:17,040
to access that okay

00:23:21,070 --> 00:23:29,430
leave that who so I mentioned I think I

00:23:27,040 --> 00:23:32,320
you know if you say exactly what it is

00:23:29,430 --> 00:23:36,550
so let me try to show that in like a

00:23:32,320 --> 00:23:39,310
real stripped so a strip that would take

00:23:36,550 --> 00:23:42,040
off wait a bit and then land would look

00:23:39,310 --> 00:23:45,760
like this so what you need is you need I

00:23:42,040 --> 00:23:47,320
think a oh I did that before like in for

00:23:45,760 --> 00:23:50,290
text or traveling to stop my basically

00:23:47,320 --> 00:23:53,190
server in what connects to connect your

00:23:50,290 --> 00:23:55,750
own and this is not needed actually

00:23:53,190 --> 00:23:57,580
first thing I need to do is to start the

00:23:55,750 --> 00:24:01,000
server what I did before up then I

00:23:57,580 --> 00:24:04,150
connect and I think I owe you can see

00:24:01,000 --> 00:24:06,220
it's a bit as like you need some kind of

00:24:04,150 --> 00:24:10,060
main function like you would do in C++

00:24:06,220 --> 00:24:14,980
you you need to set up an even hoop so

00:24:10,060 --> 00:24:17,200
that line I think I you get even true we

00:24:14,980 --> 00:24:18,880
just get you the loop and you can say I

00:24:17,200 --> 00:24:21,820
just want to run my main function by

00:24:18,880 --> 00:24:23,920
running run and we complete this

00:24:21,820 --> 00:24:26,890
function and that that will be this

00:24:23,920 --> 00:24:29,140
front function there and that's my main

00:24:26,890 --> 00:24:31,960
one then you know you don't have to know

00:24:29,140 --> 00:24:33,640
much more but I think you actually just

00:24:31,960 --> 00:24:35,170
that whenever you want to cause

00:24:33,640 --> 00:24:37,020
something you have to say a weights

00:24:35,170 --> 00:24:39,730
before and that's a blocking call

00:24:37,020 --> 00:24:45,130
so here what this example is doing is

00:24:39,730 --> 00:24:47,410
first waiting for the drone then we wait

00:24:45,130 --> 00:24:50,140
for the drone to be connected once it's

00:24:47,410 --> 00:24:52,180
connected when we receive an event that

00:24:50,140 --> 00:24:55,960
says the drone is connected then we just

00:24:52,180 --> 00:25:00,610
show its UID and then we leave this this

00:24:55,960 --> 00:25:03,550
loop the next step is arm take off three

00:25:00,610 --> 00:25:06,790
five seconds and land and that's it

00:25:03,550 --> 00:25:14,380
small example let me just try to run it

00:25:06,790 --> 00:25:20,380
so take off land and first I just want

00:25:14,380 --> 00:25:23,280
to learn the room okay so now I'm just

00:25:20,380 --> 00:25:23,280
trying this this example

00:25:25,640 --> 00:25:31,370
and we see that here I got an arrow it

00:25:28,760 --> 00:25:33,610
said so it looks like a Python they're

00:25:31,370 --> 00:25:37,100
all it's just that whenever we receive

00:25:33,610 --> 00:25:39,080
like whenever px4 refuses a function we

00:25:37,100 --> 00:25:40,850
send we just raise an exception which is

00:25:39,080 --> 00:25:42,950
what happened here we got an arrow that

00:25:40,850 --> 00:25:45,679
is an action arrow because I was trying

00:25:42,950 --> 00:25:48,200
to take off that's an action and they're

00:25:45,679 --> 00:25:50,150
all says come on deny it or not offended

00:25:48,200 --> 00:25:59,030
because I run the script while it was

00:25:50,150 --> 00:26:00,590
landing so that's try again so what

00:25:59,030 --> 00:26:03,520
happened here is it discovered the drone

00:26:00,590 --> 00:26:08,120
showed the UID then armed took off

00:26:03,520 --> 00:26:11,660
waited five seconds and landed easy

00:26:08,120 --> 00:26:14,419
right I hope so at least like I'm

00:26:11,660 --> 00:26:18,130
expecting that I'm hoping that some of

00:26:14,419 --> 00:26:22,429
you will try some some Python them ok

00:26:18,130 --> 00:26:25,340
after that so we have more examples in

00:26:22,429 --> 00:26:27,740
the repo and another one is for running

00:26:25,340 --> 00:26:34,730
a mission and I just want to show the

00:26:27,740 --> 00:26:38,750
code yeah so it's it's not super long

00:26:34,730 --> 00:26:40,970
and it does always the same thing like

00:26:38,750 --> 00:26:43,580
you always have you import like a few

00:26:40,970 --> 00:26:45,590
things from the SDK you start the server

00:26:43,580 --> 00:26:50,660
or you connect to the drone then you

00:26:45,590 --> 00:26:53,360
have this main loop and here we do like

00:26:50,660 --> 00:26:56,299
a few other things in I think i/o so we

00:26:53,360 --> 00:26:58,520
we don't find only this front loop but

00:26:56,299 --> 00:26:59,809
in parallel to that we run the print

00:26:58,520 --> 00:27:01,910
mission progress loop and you see it's

00:26:59,809 --> 00:27:03,200
it's showing some nice messages but

00:27:01,910 --> 00:27:07,340
what's important to see is really this

00:27:03,200 --> 00:27:11,540
one loop where we create a an array of

00:27:07,340 --> 00:27:15,460
of mission items so a mission item is

00:27:11,540 --> 00:27:18,130
composed of you have latitude longitude

00:27:15,460 --> 00:27:20,480
yeah different different parameters

00:27:18,130 --> 00:27:23,030
that's one thing now it's quite verbose

00:27:20,480 --> 00:27:24,950
because we don't have defaults note that

00:27:23,030 --> 00:27:26,330
it's difficult to do in Python but it's

00:27:24,950 --> 00:27:29,299
not so easy to auto generate that

00:27:26,330 --> 00:27:30,410
consistently and all the languages so

00:27:29,299 --> 00:27:32,000
for now it's like this but that will

00:27:30,410 --> 00:27:34,280
change so at some point you will be able

00:27:32,000 --> 00:27:35,840
to just say you know latitude longitude

00:27:34,280 --> 00:27:37,640
altitude if you don't care about the

00:27:35,840 --> 00:27:38,809
rest now you have to set everything so

00:27:37,640 --> 00:27:39,290
you see that there's a camera action

00:27:38,809 --> 00:27:41,210
here

00:27:39,290 --> 00:27:43,250
you could say take a picture on that we

00:27:41,210 --> 00:27:43,880
appoint for instance okay so I've got

00:27:43,250 --> 00:27:50,420
one Waypoint

00:27:43,880 --> 00:27:52,250
- Waypoint three of them here then I in

00:27:50,420 --> 00:27:53,720
the mission I have an another call I can

00:27:52,250 --> 00:27:56,090
do is set return to launch of the

00:27:53,720 --> 00:27:58,490
mission so do I want the drone to come

00:27:56,090 --> 00:27:59,840
back and land after it has been like

00:27:58,490 --> 00:28:01,820
finish the mission

00:27:59,840 --> 00:28:04,670
those three waypoints so I set it to

00:28:01,820 --> 00:28:08,300
true so that it comes back I upload the

00:28:04,670 --> 00:28:13,190
mission mission upload mission I arm a

00:28:08,300 --> 00:28:15,430
nice total mission okay let's try to run

00:28:13,190 --> 00:28:15,430
that

00:28:23,540 --> 00:28:28,230
and that's it so it's uploaded the three

00:28:26,010 --> 00:28:36,150
waypoints and you're just doing it and

00:28:28,230 --> 00:28:38,280
showing the results good

00:28:36,150 --> 00:28:40,350
so that was for Python okay let's just

00:28:38,280 --> 00:28:43,230
wait for it to go through first Waypoint

00:28:40,350 --> 00:28:45,690
to see they sing something yeah so it

00:28:43,230 --> 00:28:49,860
will do like yeah the triangle and then

00:28:45,690 --> 00:28:51,180
come back okay next one I want to show

00:28:49,860 --> 00:28:53,040
is C++

00:28:51,180 --> 00:28:56,460
how do you install that same thing

00:28:53,040 --> 00:28:58,740
depending on your system we don't have

00:28:56,460 --> 00:29:00,860
the package we have to build it good

00:28:58,740 --> 00:29:04,620
news is that it's it's quite easy to

00:29:00,860 --> 00:29:06,300
build we've it used to be a bit more

00:29:04,620 --> 00:29:07,830
difficult because of some dependencies

00:29:06,300 --> 00:29:09,210
and stuff but I think now it's it's

00:29:07,830 --> 00:29:12,300
better we build all the dependencies

00:29:09,210 --> 00:29:14,370
ourselves so it should just just work so

00:29:12,300 --> 00:29:19,740
what you have to do is just run see make

00:29:14,370 --> 00:29:21,900
like a usual way and I will show you how

00:29:19,740 --> 00:29:26,000
to install the package on Ubuntu so what

00:29:21,900 --> 00:29:26,000
I have let me find it

00:29:26,780 --> 00:29:37,140
yeah what I have here is that's that's

00:29:32,970 --> 00:29:38,820
in Ubuntu docker container so I just

00:29:37,140 --> 00:29:40,860
wanted to you know not start on my

00:29:38,820 --> 00:29:42,060
machine that has that may have jzuk

00:29:40,860 --> 00:29:44,490
installed or stuff like that so I just

00:29:42,060 --> 00:29:45,900
started with the brand Ubuntu I

00:29:44,490 --> 00:29:52,220
installed Simic

00:29:45,900 --> 00:29:56,670
beam build essential and that's it and I

00:29:52,220 --> 00:29:59,520
prepared some some some script here and

00:29:56,670 --> 00:30:01,020
I can directly show you so just to prove

00:29:59,520 --> 00:30:02,520
you that it's not installed I will just

00:30:01,020 --> 00:30:05,970
show you the symmetries that I want to

00:30:02,520 --> 00:30:08,820
build and that's this so basic Simek

00:30:05,970 --> 00:30:11,250
lists that's important if we do find

00:30:08,820 --> 00:30:13,860
package novice DK how to get the

00:30:11,250 --> 00:30:15,990
referees and then we link them and this

00:30:13,860 --> 00:30:24,690
dev summit the TPP is a small example I

00:30:15,990 --> 00:30:26,790
want to show and if I try to build it to

00:30:24,690 --> 00:30:31,130
run CMake against it then I get this

00:30:26,790 --> 00:30:33,600
error that says it doesn't find Mizuki

00:30:31,130 --> 00:30:36,440
what I did here is that I have this

00:30:33,600 --> 00:30:39,830
dismal ACK 0:18

00:30:36,440 --> 00:30:43,040
to that package that one is coming from

00:30:39,830 --> 00:30:46,610
the typo so on the report we have the

00:30:43,040 --> 00:30:49,370
releases and for it really is we we have

00:30:46,610 --> 00:30:52,730
some some packages there at some point

00:30:49,370 --> 00:30:54,740
that will be on the two repository so

00:30:52,730 --> 00:30:57,830
you will be able to do apt-get install

00:30:54,740 --> 00:30:59,480
MAV SDK but for now it's not so what you

00:30:57,830 --> 00:31:01,430
would have to do and that's what I did I

00:30:59,480 --> 00:31:04,640
just went there I don't need this one

00:31:01,430 --> 00:31:10,340
and that's that's this fire we have here

00:31:04,640 --> 00:31:12,160
and I just install it manually so it's

00:31:10,340 --> 00:31:15,590
like that

00:31:12,160 --> 00:31:21,700
and that's it now we can start using it

00:31:15,590 --> 00:31:28,160
so again I will just run CMake when it's

00:31:21,700 --> 00:31:29,750
it built okay in the meantime the the

00:31:28,160 --> 00:31:33,380
mission was finished it came home

00:31:29,750 --> 00:31:40,430
understand it so so let me just check

00:31:33,380 --> 00:31:42,970
okay so python is finished here and I'm

00:31:40,430 --> 00:31:42,970
a bit lost

00:31:48,620 --> 00:31:55,520
yeah here so same thing here we have

00:31:51,470 --> 00:31:58,330
this seeming list and I also wanted to

00:31:55,520 --> 00:31:59,480
show you the small example I have oh

00:31:58,330 --> 00:32:05,720
yeah

00:31:59,480 --> 00:32:08,419
dev summit so that's the C++ code that

00:32:05,720 --> 00:32:09,140
would run just take off and I will just

00:32:08,419 --> 00:32:11,419
I will not

00:32:09,140 --> 00:32:15,320
yeah we just go through it quickly also

00:32:11,419 --> 00:32:16,610
we have a main function first thing we

00:32:15,320 --> 00:32:20,710
do is that we create a mob a sticky

00:32:16,610 --> 00:32:23,659
object that's yeah interface to my vck

00:32:20,710 --> 00:32:26,299
and here what we do is that we open a

00:32:23,659 --> 00:32:30,020
connection to the phone so so you see on

00:32:26,299 --> 00:32:32,240
the right this UDP 14 540 that's the

00:32:30,020 --> 00:32:34,880
that's the mapping port that's that's

00:32:32,240 --> 00:32:37,309
like the port on which cities are

00:32:34,880 --> 00:32:39,529
broadcasting the messages so I'm saying

00:32:37,309 --> 00:32:42,409
here okay just open a connection and try

00:32:39,529 --> 00:32:45,260
to n tell me when when the drone is

00:32:42,409 --> 00:32:48,620
connected and I just check here Europe

00:32:45,260 --> 00:32:51,289
so I'm if I'm just checking here if the

00:32:48,620 --> 00:32:52,760
like opening this connection was fine it

00:32:51,289 --> 00:32:55,700
does not mean that the drone is

00:32:52,760 --> 00:32:55,909
connected or not that's what happens

00:32:55,700 --> 00:32:58,399
here

00:32:55,909 --> 00:33:00,919
actually so here I just say okay my vzk

00:32:58,399 --> 00:33:04,510
and i register on discover a callback

00:33:00,919 --> 00:33:07,340
and this callback will give me a UID

00:33:04,510 --> 00:33:10,039
whenever Neutron is connected then I

00:33:07,340 --> 00:33:12,559
receive the UID I print it and I have a

00:33:10,039 --> 00:33:14,299
promise here it's just that I don't want

00:33:12,559 --> 00:33:16,279
to continue if until the drone is

00:33:14,299 --> 00:33:19,820
connected so like those those few lines

00:33:16,279 --> 00:33:23,350
here I just are just like wait until

00:33:19,820 --> 00:33:29,950
everyone is connected and then continue

00:33:23,350 --> 00:33:32,750
ok so now once we have a connected drone

00:33:29,950 --> 00:33:34,760
it's like a few lines of code so you do

00:33:32,750 --> 00:33:35,750
you create a system that's just

00:33:34,760 --> 00:33:38,630
something you have to do and then you

00:33:35,750 --> 00:33:40,159
instantiate the plug-in so here I just

00:33:38,630 --> 00:33:42,409
want to instantiate the action plug-in

00:33:40,159 --> 00:33:43,520
and I need to give it the system so

00:33:42,409 --> 00:33:47,059
that's just something you will always

00:33:43,520 --> 00:33:48,980
write and from that I can do the same as

00:33:47,059 --> 00:33:52,220
I was doing in Python so action not

00:33:48,980 --> 00:33:54,409
armed actually take off and I just sleep

00:33:52,220 --> 00:33:56,419
for five seconds just so it doesn't

00:33:54,409 --> 00:34:01,940
return on before it's the message is

00:33:56,419 --> 00:34:04,159
sent just a disclaimer here those two

00:34:01,940 --> 00:34:06,769
functions can return an error code like

00:34:04,159 --> 00:34:09,020
busy teen is not handed or something

00:34:06,769 --> 00:34:27,560
like that I'm not checking that here

00:34:09,020 --> 00:34:29,089
because it adds oh yeah so yeah the

00:34:27,560 --> 00:34:31,429
question is if you wanted to run that

00:34:29,089 --> 00:34:34,210
like on a real on real hardware how

00:34:31,429 --> 00:34:34,210
would you do it right

00:34:45,780 --> 00:34:51,370
yeah so it's um I think it does not if I

00:34:50,139 --> 00:34:52,750
understand correctly your question like

00:34:51,370 --> 00:34:54,760
the host does not really matter what

00:34:52,750 --> 00:34:56,700
matters is that like you receive

00:34:54,760 --> 00:35:00,730
maverick messages that's networking over

00:34:56,700 --> 00:35:02,890
like some like some protocol here UDP oh

00:35:00,730 --> 00:35:05,020
and then you just need to be able to

00:35:02,890 --> 00:35:07,480
receive that so what what sittel is

00:35:05,020 --> 00:35:12,610
doing here I have it running on my

00:35:07,480 --> 00:35:16,180
machine now and it is sending madelung

00:35:12,610 --> 00:35:19,270
messages and broadcasting or 14 540 so

00:35:16,180 --> 00:35:22,420
that's why I say I want to listen UDP on

00:35:19,270 --> 00:35:24,370
that but I could actually have another

00:35:22,420 --> 00:35:26,560
computer that's running sittel and I

00:35:24,370 --> 00:35:28,360
would say to this other computer to

00:35:26,560 --> 00:35:30,220
broadcast to the other one or if they

00:35:28,360 --> 00:35:33,040
are on the same network then that would

00:35:30,220 --> 00:35:35,440
just work and and now if I just plugged

00:35:33,040 --> 00:35:37,780
a big soak into my computer and had the

00:35:35,440 --> 00:35:39,430
serial connection to that instead of UDP

00:35:37,780 --> 00:35:41,980
I would just say it's a connection in

00:35:39,430 --> 00:35:45,160
that rapport so that's that's really at

00:35:41,980 --> 00:35:47,230
yeah at this time here so that's where

00:35:45,160 --> 00:35:51,720
you decide how like what you want to

00:35:47,230 --> 00:35:52,840
connect does that answer your question

00:35:51,720 --> 00:35:55,270
okay

00:35:52,840 --> 00:35:56,740
so yeah I was just saying here I'm not

00:35:55,270 --> 00:35:59,020
checking the error codes you should

00:35:56,740 --> 00:36:00,610
because if it says that it could not

00:35:59,020 --> 00:36:08,080
army try to take off it will fail as

00:36:00,610 --> 00:36:12,040
well so anyway okay so I okay so I run I

00:36:08,080 --> 00:36:17,410
run CMake let me just try it again now I

00:36:12,040 --> 00:36:21,910
just build it build build that's my

00:36:17,410 --> 00:36:27,970
example and if I run this executable it

00:36:21,910 --> 00:36:30,130
should just take off yeah and let's just

00:36:27,970 --> 00:36:33,190
have a look at the output of my basic a

00:36:30,130 --> 00:36:34,570
server so I just give you gives you some

00:36:33,190 --> 00:36:36,760
information but what we see is that it

00:36:34,570 --> 00:36:40,660
discovers what's wrong with this UID

00:36:36,760 --> 00:36:43,390
squad components and then here we

00:36:40,660 --> 00:36:48,850
receive some we have some output from

00:36:43,390 --> 00:36:51,250
the from the from my vzg server we did

00:36:48,850 --> 00:36:54,210
not see that from python before but they

00:36:51,250 --> 00:36:54,210
exist as well and they are logged

00:36:56,710 --> 00:37:03,230
did I have no okay so I think that's all

00:37:00,170 --> 00:37:05,420
I wanted to show for C++ same thing you

00:37:03,230 --> 00:37:09,650
can use the functions to like do off

00:37:05,420 --> 00:37:12,200
board missions telemetry and all that my

00:37:09,650 --> 00:37:14,300
upon here was to say it's quite easy to

00:37:12,200 --> 00:37:15,740
install like from from scratch it just

00:37:14,300 --> 00:37:19,400
takes me a few minutes and I can I have

00:37:15,740 --> 00:37:21,890
something that's working so that's what

00:37:19,400 --> 00:37:25,280
we did if you're interested in the in

00:37:21,890 --> 00:37:30,220
the code I just want I just fitted this

00:37:25,280 --> 00:37:32,390
with it so it sits there yeah we have

00:37:30,220 --> 00:37:33,950
different resources so the way it's

00:37:32,390 --> 00:37:35,840
organized that we have different triples

00:37:33,950 --> 00:37:38,600
for the different languages we have one

00:37:35,840 --> 00:37:41,060
repo for Python Swift etc so we've got

00:37:38,600 --> 00:37:43,550
the links there we've got some

00:37:41,060 --> 00:37:45,670
documentation on drone code.org it's

00:37:43,550 --> 00:37:49,970
moving because of the name change

00:37:45,670 --> 00:37:51,230
happened recently so it's maybe yeah

00:37:49,970 --> 00:37:54,320
moving in the next few days

00:37:51,230 --> 00:37:57,350
don't be surprised slack is not moving

00:37:54,320 --> 00:37:59,570
so if you want to contact us just just

00:37:57,350 --> 00:38:01,910
on yeah come on maverick it's like it

00:37:59,570 --> 00:38:07,970
will be like Julian and I we're always

00:38:01,910 --> 00:38:10,580
connected so so yeah please do you can

00:38:07,970 --> 00:38:12,410
definitely contribute whatever is fine

00:38:10,580 --> 00:38:14,120
like if you use it and you want to give

00:38:12,410 --> 00:38:16,160
us some feedback that's that's super

00:38:14,120 --> 00:38:17,810
nice or if you have some feedback on the

00:38:16,160 --> 00:38:19,520
on the API I was saying the API is not

00:38:17,810 --> 00:38:20,720
completely stable if you think that

00:38:19,520 --> 00:38:23,680
something like some work should be

00:38:20,720 --> 00:38:26,570
changed then now is the moment to do it

00:38:23,680 --> 00:38:27,680
when you try to use it maybe I mean I

00:38:26,570 --> 00:38:31,190
was saying that the communication is not

00:38:27,680 --> 00:38:33,080
it's not like super advanced now so when

00:38:31,190 --> 00:38:34,700
you realize something then it would be

00:38:33,080 --> 00:38:36,770
nice to help us and just bring it back

00:38:34,700 --> 00:38:39,680
to the manual or like fright an example

00:38:36,770 --> 00:38:42,680
or something like that and if you have

00:38:39,680 --> 00:38:44,960
experience in testing like CI stuff

00:38:42,680 --> 00:38:51,890
whatever just feel free to reach us and

00:38:44,960 --> 00:38:53,690
let us know that you want to help one

00:38:51,890 --> 00:38:57,080
thing we always like to say that it's

00:38:53,690 --> 00:38:59,720
not only Julian and I writing writing

00:38:57,080 --> 00:39:00,850
all the code we mainly maintain and we

00:38:59,720 --> 00:39:03,860
make sure that we have this

00:39:00,850 --> 00:39:06,560
infrastructure that lowers - I mean the

00:39:03,860 --> 00:39:09,380
CI and this framework that allows us to

00:39:06,560 --> 00:39:12,380
extend the SDK but many people config

00:39:09,380 --> 00:39:14,630
did I did not update this live since

00:39:12,380 --> 00:39:16,640
last September and we got quite a few

00:39:14,630 --> 00:39:17,570
contributions since then so many are

00:39:16,640 --> 00:39:20,000
missing and I'm sorry

00:39:17,570 --> 00:39:22,820
but I just wanted to say like a big

00:39:20,000 --> 00:39:27,540
thank you to to all the contributors and

00:39:22,820 --> 00:39:31,390
I think that's it awesome thank you

00:39:27,540 --> 00:39:32,810
[Applause]

00:39:31,390 --> 00:39:35,560
thank you

00:39:32,810 --> 00:39:35,560
any questions

00:39:55,809 --> 00:40:03,920
the question is can I use C sharp to

00:39:58,759 --> 00:40:05,450
generate yeah so what we do is this

00:40:03,920 --> 00:40:08,630
black box I mentioned the mob a secure

00:40:05,450 --> 00:40:11,420
server what we use is on Geo PC so we do

00:40:08,630 --> 00:40:15,650
G RPC between our C++ implementation and

00:40:11,420 --> 00:40:19,450
the language which means that you could

00:40:15,650 --> 00:40:22,640
already generate yeah you could use

00:40:19,450 --> 00:40:25,460
c-sharp your PC and connect that's

00:40:22,640 --> 00:40:27,049
directly what we do usually and what we

00:40:25,460 --> 00:40:29,720
call the Python SDK and all that is that

00:40:27,049 --> 00:40:31,819
we make we try to make a nicer API

00:40:29,720 --> 00:40:34,490
you know Jo PC if you want to use your

00:40:31,819 --> 00:40:36,319
PC you have to know how it works if you

00:40:34,490 --> 00:40:38,150
want to send a message you would have to

00:40:36,319 --> 00:40:41,180
say actually it now a message that will

00:40:38,150 --> 00:40:43,220
that will send a request to ask or to to

00:40:41,180 --> 00:40:44,779
arm or maybe I need to put parameters in

00:40:43,220 --> 00:40:47,630
that you build the request and you send

00:40:44,779 --> 00:40:50,809
it through G OPC we just wrap that into

00:40:47,630 --> 00:40:53,170
our own function that is just arm and

00:40:50,809 --> 00:41:02,480
that's what we have to generate on the

00:40:53,170 --> 00:41:06,259
outside yes you can yeah

00:41:02,480 --> 00:41:08,390
so again can you run just the MAV SDK

00:41:06,259 --> 00:41:10,700
server like the GOP C node and connect C

00:41:08,390 --> 00:41:13,700
shop to that the answer is yes you can

00:41:10,700 --> 00:41:15,289
do it it's not you have then we don't

00:41:13,700 --> 00:41:17,150
support that officially so you have to

00:41:15,289 --> 00:41:26,619
learn how to do that in C in C sharp and

00:41:17,150 --> 00:41:30,499
sharpie see but that's supported I

00:41:26,619 --> 00:41:35,269
actually personally forgot it until now

00:41:30,499 --> 00:41:39,739
but it was about the black box does that

00:41:35,269 --> 00:41:44,289
mean that actually inside it you have

00:41:39,739 --> 00:41:53,839
some code that would do retries for like

00:41:44,289 --> 00:41:58,009
missed mission upload items sorry no

00:41:53,839 --> 00:42:00,470
yeah so the question is like is like the

00:41:58,009 --> 00:42:02,509
MAV link connection is it maintained in

00:42:00,470 --> 00:42:05,089
this black box so if you miss a message

00:42:02,509 --> 00:42:07,870
something about is it read right there

00:42:05,089 --> 00:42:11,470
right

00:42:07,870 --> 00:42:13,270
so it is done but not in the black box

00:42:11,470 --> 00:42:17,050
that's done in the C++ library so the

00:42:13,270 --> 00:42:19,630
C++ core libraries that's that's where

00:42:17,050 --> 00:42:23,140
all the modeling business logic is done

00:42:19,630 --> 00:42:24,970
so there's nothing to do with moving in

00:42:23,140 --> 00:42:26,740
this black box the black box is I was

00:42:24,970 --> 00:42:33,340
saying just boilerplate what it does is

00:42:26,740 --> 00:42:35,710
that it takes it it takes the C++ s it

00:42:33,340 --> 00:42:38,080
uses the C++ SDK actually and it will

00:42:35,710 --> 00:42:40,720
call those functions and just makes a

00:42:38,080 --> 00:42:43,060
message to say Python or Swift so that's

00:42:40,720 --> 00:42:45,760
that's really like boilerplate

00:42:43,060 --> 00:42:48,220
it could be you know j'ni or whatever

00:42:45,760 --> 00:42:52,210
it's your PC but all the mapping stuff

00:42:48,220 --> 00:42:54,520
is done in C++ in the C++ library any

00:42:52,210 --> 00:42:58,470
other questions No

00:42:54,520 --> 00:42:58,470
thank you guys there's a lot questions

00:43:02,850 --> 00:43:10,210
[Music]

00:43:04,410 --> 00:43:13,630
or footprint for like compiling it on

00:43:10,210 --> 00:43:16,270
Raspberry Pi right so the question is is

00:43:13,630 --> 00:43:18,130
like is there like one binary without

00:43:16,270 --> 00:43:20,800
dependencies for my physique is server

00:43:18,130 --> 00:43:23,440
and what does it imply to come to first

00:43:20,800 --> 00:43:26,350
compile that for Raspberry Pi all right

00:43:23,440 --> 00:43:31,210
um so you can choose at Build time

00:43:26,350 --> 00:43:33,520
actually when when we make like when we

00:43:31,210 --> 00:43:35,290
install only gnu/linux all the different

00:43:33,520 --> 00:43:37,300
plugins are shared library they've been

00:43:35,290 --> 00:43:39,960
stolen your system but when we run that

00:43:37,300 --> 00:43:43,380
on iOS for instance we want to have one

00:43:39,960 --> 00:43:47,170
just one library so you can have both

00:43:43,380 --> 00:43:49,480
and and what i showed in python running

00:43:47,170 --> 00:43:51,640
here that was a many Linux field so my

00:43:49,480 --> 00:43:53,230
vzk server is one binary that has

00:43:51,640 --> 00:43:56,950
everything inside and that works on all

00:43:53,230 --> 00:44:01,090
Linux distributions if you want now to

00:43:56,950 --> 00:44:02,830
run that on Raspberry Pi it's um you can

00:44:01,090 --> 00:44:03,580
you can easily cross compile it and we

00:44:02,830 --> 00:44:06,460
try to do it

00:44:03,580 --> 00:44:09,820
I can maybe just show quickly what it

00:44:06,460 --> 00:44:13,120
would imply it depends okay I just need

00:44:09,820 --> 00:44:14,470
it depends on the on the platform

00:44:13,120 --> 00:44:16,750
sometimes maybe we will have to make

00:44:14,470 --> 00:44:18,520
some changes in the code but like cross

00:44:16,750 --> 00:44:20,830
compiling for Raspberry Pi could be as

00:44:18,520 --> 00:44:23,860
easy as we use da cross so

00:44:20,830 --> 00:44:25,270
that could look like dr. oz and you

00:44:23,860 --> 00:44:27,880
would get the image for raspberry pie

00:44:25,270 --> 00:44:30,360
and then you just want to make so

00:44:27,880 --> 00:44:30,360
Sameach

00:44:30,480 --> 00:44:36,250
then you don't want to build shared libs

00:44:33,520 --> 00:44:37,480
so you would say don't bid share lip so

00:44:36,250 --> 00:44:41,110
we will have you will have one

00:44:37,480 --> 00:44:44,740
executable only you want to build the

00:44:41,110 --> 00:44:46,570
backend we call it back in here that's

00:44:44,740 --> 00:44:50,230
the old name that's math as a key server

00:44:46,570 --> 00:44:52,480
so you just say that and then that's it

00:44:50,230 --> 00:44:55,240
you just like the usual stuff and that

00:44:52,480 --> 00:44:56,560
would cross compile for raspberry pi I'm

00:44:55,240 --> 00:44:58,720
not sure it completely works for

00:44:56,560 --> 00:45:00,190
raspberry pi now maybe we have some

00:44:58,720 --> 00:45:03,700
things to change but I know that for

00:45:00,190 --> 00:45:11,110
although platforms it works like many

00:45:03,700 --> 00:45:13,720
Linux for instance yes so it could be

00:45:11,110 --> 00:45:17,470
like 15 20 megabytes

00:45:13,720 --> 00:45:21,160
just because G OPC is yeah that's the

00:45:17,470 --> 00:45:22,890
big dependency we have right now G

00:45:21,160 --> 00:45:26,200
obviously is not optimized to run on

00:45:22,890 --> 00:45:29,860
like embedded systems the server is a

00:45:26,200 --> 00:45:32,110
bit bigger the thing is that like the

00:45:29,860 --> 00:45:33,490
point in using your PC is that is super

00:45:32,110 --> 00:45:36,520
easy for us to auto-generate all that

00:45:33,490 --> 00:45:38,800
and bring new languages and stuff but

00:45:36,520 --> 00:45:41,440
because it's auto-generated and our API

00:45:38,800 --> 00:45:43,150
does not depend on your PC in the future

00:45:41,440 --> 00:45:45,430
you could imagine that you know you want

00:45:43,150 --> 00:45:47,920
something super optimized for Python

00:45:45,430 --> 00:45:49,360
then you can like write a note or

00:45:47,920 --> 00:45:52,660
different generation that does not use

00:45:49,360 --> 00:45:55,150
your PC and like really if you want

00:45:52,660 --> 00:45:57,370
something super optimized maybe you

00:45:55,150 --> 00:46:00,550
should use the C++ library and then you

00:45:57,370 --> 00:46:05,560
don't get any of the MIDI key server and

00:46:00,550 --> 00:46:09,070
that could be like 2 or 3 megabytes any

00:46:05,560 --> 00:46:10,680
other questions thank you guys for time

00:46:09,070 --> 00:46:14,540
thank you

00:46:10,680 --> 00:46:14,540
[Applause]

00:46:19,400 --> 00:46:21,460

YouTube URL: https://www.youtube.com/watch?v=GXt-eXJ9vfg


