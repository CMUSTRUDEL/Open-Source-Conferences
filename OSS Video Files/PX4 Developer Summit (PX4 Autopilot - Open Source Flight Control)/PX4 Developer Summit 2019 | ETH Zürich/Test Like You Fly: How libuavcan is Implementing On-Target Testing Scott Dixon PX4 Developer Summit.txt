Title: Test Like You Fly: How libuavcan is Implementing On-Target Testing Scott Dixon PX4 Developer Summit
Publication date: 2019-07-03
Playlist: PX4 Developer Summit 2019 | ETH Zürich
Description: 
	Scott Dixon
Software Engineer, Amazon
I'm a firmware engineer with Amazon PrimeAir in Seattle and a passionate maker of things.

In this talk, we will demonstrate how the libuavcan project, a C++ implementation of the UAVCAN protocol, is using Raspberry PIs and Buildkite.com to run unit tests on Cortex-M targets as part of its automated build pipeline. We’ll discuss why we’re investing in this capability, how the project’s methodology is well suited for geographically distributed teams developing firmware and will invite others in the PX4 community to comment and contribute ideas on how to evolve and improve what we’ve built.

This is a presentation of a blog post I have on my personal site here.

https://32bits.io/blog/2019/5/26/libuavcan-hil-test-automation-using-buildkite-and-raspberry-pi
Captions: 
	00:00:07,180 --> 00:00:14,730
there it goes all right so you've just

00:00:12,570 --> 00:00:16,200
and pretty low level change but you

00:00:14,730 --> 00:00:16,800
wrote your unit tests and you got that

00:00:16,200 --> 00:00:18,390
covered

00:00:16,800 --> 00:00:20,070
and you're pretty sure that it got

00:00:18,390 --> 00:00:22,710
covered in the software simulation test

00:00:20,070 --> 00:00:25,050
too and now here you are you've got

00:00:22,710 --> 00:00:26,580
about a hundred tons of rocket fuel and

00:00:25,050 --> 00:00:27,509
a hundred million dollar payload on top

00:00:26,580 --> 00:00:30,750
of it and they're about to light the

00:00:27,509 --> 00:00:33,210
candle are you really sure you got that

00:00:30,750 --> 00:00:34,980
code right this is the kind of thing

00:00:33,210 --> 00:00:36,660
that David over here and I who work

00:00:34,980 --> 00:00:38,640
really close to the hardware we're kept

00:00:36,660 --> 00:00:41,790
up at night about the difficulty is to

00:00:38,640 --> 00:00:44,460
get absolutely every bit right when it

00:00:41,790 --> 00:00:46,620
comes down to testing so this is gonna

00:00:44,460 --> 00:00:49,410
be a really short talk kind of a after

00:00:46,620 --> 00:00:51,000
lunch palate cleanser about something

00:00:49,410 --> 00:00:53,610
we're doing on the Libby wake we can

00:00:51,000 --> 00:00:57,060
project which is a C++ implementation of

00:00:53,610 --> 00:00:59,850
UAV Ken and it's going to be about how

00:00:57,060 --> 00:01:03,270
we are building a hardware test pipeline

00:00:59,850 --> 00:01:06,180
for this project as I said my name is

00:01:03,270 --> 00:01:08,640
Scott Dixon I've been working on with

00:01:06,180 --> 00:01:10,829
Pavel on the allelic and specification

00:01:08,640 --> 00:01:13,799
v1 we are gonna have a talk on that

00:01:10,829 --> 00:01:17,190
later this afternoon and I have been

00:01:13,799 --> 00:01:19,710
writing the v1 version of the C++

00:01:17,190 --> 00:01:21,780
presentation of that protocol so first

00:01:19,710 --> 00:01:23,850
the why why do I care so much about

00:01:21,780 --> 00:01:26,370
Hardware testing other than wanting to

00:01:23,850 --> 00:01:28,470
go to sleep at night here's a quote from

00:01:26,370 --> 00:01:30,120
the Aerospace Corporation paper they put

00:01:28,470 --> 00:01:33,090
out that I really like the system should

00:01:30,120 --> 00:01:34,500
never experience expected operations

00:01:33,090 --> 00:01:36,299
environment stresses or their

00:01:34,500 --> 00:01:40,080
combinations for the first time during a

00:01:36,299 --> 00:01:42,119
mission and this is a kind of a typical

00:01:40,080 --> 00:01:43,920
system way we look at a system in

00:01:42,119 --> 00:01:45,270
testing and guess system systems in the

00:01:43,920 --> 00:01:46,049
system and the element the subsystem

00:01:45,270 --> 00:01:48,630
sub-assembly

00:01:46,049 --> 00:01:51,390
and in part and for me what I'm

00:01:48,630 --> 00:01:53,640
considering as libuv can hear because

00:01:51,390 --> 00:01:57,090
it's a library actually treating as a

00:01:53,640 --> 00:01:59,460
part and as a parts what's underneath me

00:01:57,090 --> 00:02:00,900
are the drivers and then the peripherals

00:01:59,460 --> 00:02:02,159
of those drivers are on and then of

00:02:00,900 --> 00:02:04,020
course the hardware that those

00:02:02,159 --> 00:02:06,090
peripherals are connected to and then

00:02:04,020 --> 00:02:09,780
above me are the the subsystems that are

00:02:06,090 --> 00:02:13,170
using my part so the why is because I'm

00:02:09,780 --> 00:02:16,500
delivering a part and in that previous

00:02:13,170 --> 00:02:18,420
slide you look at there's a width of

00:02:16,500 --> 00:02:21,480
testing that's expected when you buy a

00:02:18,420 --> 00:02:23,189
part from a manufacturer especially

00:02:21,480 --> 00:02:24,870
anything that's a certified part you

00:02:23,189 --> 00:02:26,340
expect this to be a rigorous rigorously

00:02:24,870 --> 00:02:28,140
tested thing

00:02:26,340 --> 00:02:29,580
that adheres to the specifications that

00:02:28,140 --> 00:02:31,380
it advertises this is why you're paying

00:02:29,580 --> 00:02:33,690
for it and this is kind of the

00:02:31,380 --> 00:02:37,739
philosophy that we have as we're

00:02:33,690 --> 00:02:40,260
developing Libya we can another reason

00:02:37,739 --> 00:02:43,530
that we do it is the whole Swiss cheese

00:02:40,260 --> 00:02:44,880
analogy which I put in the slide before

00:02:43,530 --> 00:02:48,060
I realized I was gonna be in Switzerland

00:02:44,880 --> 00:02:49,890
so it's actually kind of funny but so

00:02:48,060 --> 00:02:51,630
we're going to show you some hardware

00:02:49,890 --> 00:02:53,340
testing and it's gonna be you're gonna

00:02:51,630 --> 00:02:55,500
be a little dubious can see well what's

00:02:53,340 --> 00:02:56,720
what's typical hardware you're a library

00:02:55,500 --> 00:02:59,519
you don't know what your hardware is

00:02:56,720 --> 00:03:01,140
you're right but what I'm looking for is

00:02:59,519 --> 00:03:02,970
I'm looking for holes in the cheese so I

00:03:01,140 --> 00:03:04,739
don't know if everybody's heard of this

00:03:02,970 --> 00:03:06,569
analogy but in your system you've got

00:03:04,739 --> 00:03:07,920
your Swiss cheese analogy of failures

00:03:06,569 --> 00:03:10,650
and as long as the holes don't line up

00:03:07,920 --> 00:03:12,209
the failure won't escape out to a

00:03:10,650 --> 00:03:15,150
critical place where it can have

00:03:12,209 --> 00:03:18,480
real-world effects so what I'm doing is

00:03:15,150 --> 00:03:20,250
I am giving myself a kind of typical

00:03:18,480 --> 00:03:22,680
environment hardware environment to test

00:03:20,250 --> 00:03:24,630
on and I'm looking for holes that line

00:03:22,680 --> 00:03:25,950
up through my library and when I see

00:03:24,630 --> 00:03:29,160
those holes I can plug them and I can

00:03:25,950 --> 00:03:31,109
make my cheese less holy and less less

00:03:29,160 --> 00:03:34,739
obvious to be the thing that ends up

00:03:31,109 --> 00:03:36,420
lining up and this is the mantra that

00:03:34,739 --> 00:03:38,480
aerospace has had forever I mean I think

00:03:36,420 --> 00:03:43,260
everybody's heard tests like you fly and

00:03:38,480 --> 00:03:45,060
the NASA and Boeing you know and all of

00:03:43,260 --> 00:03:49,709
the big aerospace people really live by

00:03:45,060 --> 00:03:53,430
this and of course right here we see a

00:03:49,709 --> 00:03:55,350
rocket test this is a 20 million dollar

00:03:53,430 --> 00:03:57,630
rocket I think this test would cost

00:03:55,350 --> 00:03:59,940
something like that and I'm not exactly

00:03:57,630 --> 00:04:02,400
sure we're an open-source project we

00:03:59,940 --> 00:04:05,760
can't afford 20 million dollar tests so

00:04:02,400 --> 00:04:08,370
well can we afford actually it's quite

00:04:05,760 --> 00:04:11,459
impressive so I work in industry and I

00:04:08,370 --> 00:04:13,829
have started working with the UAV can

00:04:11,459 --> 00:04:17,070
project and one of the things that I've

00:04:13,829 --> 00:04:19,289
really enjoyed is it's a lot of fun you

00:04:17,070 --> 00:04:21,570
guys have a lot of really cool tools and

00:04:19,289 --> 00:04:23,610
one of the things that I don't have to

00:04:21,570 --> 00:04:27,600
worry about is confidentiality it's open

00:04:23,610 --> 00:04:29,580
and confidentiality is actually hard it

00:04:27,600 --> 00:04:33,180
takes a lot of resources to maintain

00:04:29,580 --> 00:04:37,229
confidentiality so there's a freedom and

00:04:33,180 --> 00:04:39,570
a fun and a utility an open-source it is

00:04:37,229 --> 00:04:41,940
actually really powerful and so I had a

00:04:39,570 --> 00:04:43,080
lot of fun exploring that space one of

00:04:41,940 --> 00:04:44,790
the first things that came across here

00:04:43,080 --> 00:04:46,290
is a service called build kite

00:04:44,790 --> 00:04:49,139
if anybody familiar with built kite

00:04:46,290 --> 00:04:52,620
hands in the room anybody know Pavel is

00:04:49,139 --> 00:04:55,860
you know okay it's it's it's an

00:04:52,620 --> 00:04:57,540
Australian company and they have this CI

00:04:55,860 --> 00:04:59,729
pipeline and I know what you're thinking

00:04:57,540 --> 00:05:01,199
yet another CI pipeline but it's really

00:04:59,729 --> 00:05:04,410
unique they've got this thing to factor

00:05:01,199 --> 00:05:06,030
it out in a really nice way where it's

00:05:04,410 --> 00:05:07,860
not just a monolithic offering it's not

00:05:06,030 --> 00:05:10,050
like Travis where you have to use

00:05:07,860 --> 00:05:11,460
Travis's services and Travis's api's and

00:05:10,050 --> 00:05:13,650
Travis's everything which is great it's

00:05:11,460 --> 00:05:15,180
easy it's not like Jenkins where you

00:05:13,650 --> 00:05:17,190
have to pull it down and host it and

00:05:15,180 --> 00:05:20,039
build everything yourself it's right in

00:05:17,190 --> 00:05:22,380
between they they host all the stuff

00:05:20,039 --> 00:05:24,270
that at least I don't care about but

00:05:22,380 --> 00:05:25,350
most people who are working on robotics

00:05:24,270 --> 00:05:27,830
and drones don't care about all the

00:05:25,350 --> 00:05:29,580
mundane machinery of managing your

00:05:27,830 --> 00:05:31,680
services and your servers and

00:05:29,580 --> 00:05:33,360
certificates and authentication but they

00:05:31,680 --> 00:05:34,860
let you bring your hardware to the

00:05:33,360 --> 00:05:39,840
pipeline this makes it great for

00:05:34,860 --> 00:05:41,190
firmware so what we what we did is got

00:05:39,840 --> 00:05:43,950
some raspberry PI's because they're

00:05:41,190 --> 00:05:47,310
super cheap got some dev kits which

00:05:43,950 --> 00:05:51,780
aren't very cheap Ian from NXT you have

00:05:47,310 --> 00:05:55,710
to talk to you about that and then we

00:05:51,780 --> 00:05:57,780
have bill kite out there and so what the

00:05:55,710 --> 00:05:59,190
the flow is is that we've got our docker

00:05:57,780 --> 00:06:00,090
containers and that's another thing

00:05:59,190 --> 00:06:02,310
that's nice we have the docker

00:06:00,090 --> 00:06:03,479
containers so that yes we're using Bill

00:06:02,310 --> 00:06:05,190
Cape but we're not tight to them I could

00:06:03,479 --> 00:06:08,099
just as easily toss my docker container

00:06:05,190 --> 00:06:10,680
on Travis CI and great if they go out of

00:06:08,099 --> 00:06:13,800
business or something I've doctored

00:06:10,680 --> 00:06:16,139
containers running an ec2 hosts the I

00:06:13,800 --> 00:06:18,690
spin up and I put into the the bill cake

00:06:16,139 --> 00:06:20,550
queue pulls our Libya you can source

00:06:18,690 --> 00:06:22,860
from github runs it through their

00:06:20,550 --> 00:06:23,820
automation builds it now I'm gonna show

00:06:22,860 --> 00:06:25,889
you a little bit about some of the build

00:06:23,820 --> 00:06:28,080
parts but the last thing it does is once

00:06:25,889 --> 00:06:29,400
it's built these hex files bill kite

00:06:28,080 --> 00:06:32,190
sends those hex files down in my

00:06:29,400 --> 00:06:34,169
Raspberry Pi in my garage now the

00:06:32,190 --> 00:06:36,240
Raspberry Pi my garage gets those files

00:06:34,169 --> 00:06:38,460
and it's got a little J link and it's

00:06:36,240 --> 00:06:41,430
got a J link edu mini on it these are

00:06:38,460 --> 00:06:44,099
great the $20 for a full J link as long

00:06:41,430 --> 00:06:46,920
as it's not a commercial application and

00:06:44,099 --> 00:06:50,310
it J links it over to the Evie

00:06:46,920 --> 00:06:52,530
it's got a UART over there and it runs

00:06:50,310 --> 00:06:55,380
the the tests right on an actual

00:06:52,530 --> 00:06:57,560
cortex-m target and when I want to care

00:06:55,380 --> 00:07:01,260
about somewhat representative hardware

00:06:57,560 --> 00:07:02,550
I've got a little bit I'm a Canadian

00:07:01,260 --> 00:07:04,110
here and there's my favorite desserts

00:07:02,550 --> 00:07:05,610
nine nine ammo bars and have you ever

00:07:04,110 --> 00:07:07,400
heard of them we've got a little Python

00:07:05,610 --> 00:07:10,530
framework we call in an ammo that it

00:07:07,400 --> 00:07:12,150
takes this and monitors the output of

00:07:10,530 --> 00:07:13,890
the UART and coordinates it and then

00:07:12,150 --> 00:07:17,190
ultimately reports back success very or

00:07:13,890 --> 00:07:20,420
the pipeline so let's tell you how much

00:07:17,190 --> 00:07:24,840
it's cost us github free docker hub free

00:07:20,420 --> 00:07:26,430
bill kite free for open source ec2 does

00:07:24,840 --> 00:07:28,430
have free tiers turns out that it's not

00:07:26,430 --> 00:07:31,290
quite beefy enough to do builds but um

00:07:28,430 --> 00:07:32,700
it it can be it how much you want to pay

00:07:31,290 --> 00:07:35,040
for it I'm paying maybe ten dollars a

00:07:32,700 --> 00:07:36,480
month for the demo I'm showing you you

00:07:35,040 --> 00:07:38,340
can pay hundreds of dollars a months if

00:07:36,480 --> 00:07:40,520
you really want to have a super blazing

00:07:38,340 --> 00:07:44,040
fast build times and hundreds of people

00:07:40,520 --> 00:07:46,320
raspberry pie is $40 each $25 for that

00:07:44,040 --> 00:07:47,400
Sager and then a dev kit anywhere

00:07:46,320 --> 00:07:48,690
between you know twenty two hundred

00:07:47,400 --> 00:07:51,990
dollars depending what you're looking at

00:07:48,690 --> 00:07:53,280
so all told you're talking about less

00:07:51,990 --> 00:07:56,100
than two hundred dollars

00:07:53,280 --> 00:07:59,790
sorry this is all US dollars two hundred

00:07:56,100 --> 00:08:04,410
US dollars for one node in your test

00:07:59,790 --> 00:08:07,440
from twenty million dollars so a little

00:08:04,410 --> 00:08:08,460
bit cheaper totally feasible okay and

00:08:07,440 --> 00:08:12,480
now I'm gonna do a live demo because

00:08:08,460 --> 00:08:13,830
that's always a great idea Paul though I

00:08:12,480 --> 00:08:17,220
have got an update to that pull request

00:08:13,830 --> 00:08:20,760
that I were working on I get my cursor

00:08:17,220 --> 00:08:34,590
over here you just got a mirror there we

00:08:20,760 --> 00:08:35,910
go get to this is great okay so I'm not

00:08:34,590 --> 00:08:39,690
gonna do the live demo but I will show

00:08:35,910 --> 00:08:47,910
you a live pipelines which is probably

00:08:39,690 --> 00:08:50,460
just as good Mac okay so this right here

00:08:47,910 --> 00:08:53,610
is what's in my garage you'll see the

00:08:50,460 --> 00:08:57,390
raspberry PI's connected to the an XP

00:08:53,610 --> 00:08:59,490
dev kits the 148 case I even got a

00:08:57,390 --> 00:09:02,309
little IOT a tab and monitor so I can do

00:08:59,490 --> 00:09:09,660
a reset for my phone if I need to

00:09:02,309 --> 00:09:12,420
the pipeline here we go so we'll go over

00:09:09,660 --> 00:09:16,379
to bill kite and this is what you would

00:09:12,420 --> 00:09:18,720
have seen you would have seen these

00:09:16,379 --> 00:09:21,269
three builds get kicked off all an ec2

00:09:18,720 --> 00:09:24,929
hosts in parallel so we're running on a

00:09:21,269 --> 00:09:28,309
GCC compiler x86 clang compiler x86 and

00:09:24,929 --> 00:09:30,629
then we're cross compiling for armed v7m

00:09:28,309 --> 00:09:32,429
in parallel this is actually really

00:09:30,629 --> 00:09:33,809
blazing fast goes as parallel so less

00:09:32,429 --> 00:09:45,749
than a minute yes

00:09:33,809 --> 00:09:48,300
oh yeah sorry okay so this these guys

00:09:45,749 --> 00:09:50,579
all are one step that have to complete

00:09:48,300 --> 00:09:52,769
and this margin blocks on it these guys

00:09:50,579 --> 00:09:55,639
produce hex files and J link scripts

00:09:52,769 --> 00:09:58,230
those hex files and J link scripts I

00:09:55,639 --> 00:10:00,179
show you here is the output from there

00:09:58,230 --> 00:10:01,199
then they go to the on target testing

00:10:00,179 --> 00:10:03,920
and this is where they're delivered to

00:10:01,199 --> 00:10:06,720
my Raspberry Pi so what we're doing is

00:10:03,920 --> 00:10:08,879
to start what we're doing to start is

00:10:06,720 --> 00:10:10,499
certainly not test as you fly but it's a

00:10:08,879 --> 00:10:12,269
start we're just taking all of our

00:10:10,499 --> 00:10:14,429
Google tests and cross compiling that

00:10:12,269 --> 00:10:16,649
forearm and by putting a little bit of a

00:10:14,429 --> 00:10:18,449
system shim in there we're able to

00:10:16,649 --> 00:10:19,949
actually run tests that we're using for

00:10:18,449 --> 00:10:21,660
on target testing and getting credit for

00:10:19,949 --> 00:10:24,029
test coverage on those and then just

00:10:21,660 --> 00:10:25,740
rerun it again on a typical target and

00:10:24,029 --> 00:10:32,100
you can see here this is coming over the

00:10:25,740 --> 00:10:41,579
UART from that to 148 and go back to

00:10:32,100 --> 00:10:43,949
this so right if you're interested in

00:10:41,579 --> 00:10:45,929
how to build Google test for no system

00:10:43,949 --> 00:10:48,569
see that you can do something similar

00:10:45,929 --> 00:10:51,540
where the run it on you are or swo is a

00:10:48,569 --> 00:10:54,720
lot is a lot better actually I've got

00:10:51,540 --> 00:10:56,549
that in the slides and there's it's as

00:10:54,720 --> 00:10:58,619
part of the the Libby ad camp projects

00:10:56,549 --> 00:11:00,869
so what's the road map we actually want

00:10:58,619 --> 00:11:03,240
to do some typical testing so I've got

00:11:00,869 --> 00:11:04,589
we're gonna have a can FD hat we're

00:11:03,240 --> 00:11:06,480
gonna put onto the Raspberry Pi and

00:11:04,589 --> 00:11:09,689
create an actual physical cam bus

00:11:06,480 --> 00:11:11,850
between the Raspberry Pi and our dev

00:11:09,689 --> 00:11:13,620
kits and then we're going to start

00:11:11,850 --> 00:11:14,820
actually doing cane interactions between

00:11:13,620 --> 00:11:17,760
socket can

00:11:14,820 --> 00:11:20,460
on Linux and the armed peripherals

00:11:17,760 --> 00:11:21,900
running on bare metal and we can with

00:11:20,460 --> 00:11:23,760
the the bare metal firmware we can

00:11:21,900 --> 00:11:25,560
actually do really tight timings now we

00:11:23,760 --> 00:11:28,730
can actually make assertions within

00:11:25,560 --> 00:11:30,780
microseconds on some if we have a

00:11:28,730 --> 00:11:33,510
instrument hooked up that's accurate

00:11:30,780 --> 00:11:35,880
enough and do a test that says you can't

00:11:33,510 --> 00:11:36,690
violate these timing constraints the

00:11:35,880 --> 00:11:41,250
other thing that's really interesting

00:11:36,690 --> 00:11:42,480
about this roadmap can on Google tests

00:11:41,250 --> 00:11:44,850
because Google test is like I said just

00:11:42,480 --> 00:11:46,890
a hack to get started but it actually

00:11:44,850 --> 00:11:49,770
uses a ton of heap I had to actually

00:11:46,890 --> 00:11:51,660
upgrade to the 148th dev kit from the

00:11:49,770 --> 00:11:54,360
one that I had before because I needed

00:11:51,660 --> 00:11:56,160
116 km to run it so we don't really want

00:11:54,360 --> 00:11:58,020
to be using that I just want gonna

00:11:56,160 --> 00:12:00,900
switch swo which really cool in the

00:11:58,020 --> 00:12:02,610
cortex-m module is a debug module that

00:12:00,900 --> 00:12:04,140
allows you to output character data

00:12:02,610 --> 00:12:06,630
without actually affecting the runtime

00:12:04,140 --> 00:12:08,640
very much and I don't need to use aur

00:12:06,630 --> 00:12:11,280
peripherals so it's a really lightweight

00:12:08,640 --> 00:12:14,820
way to get actually much higher speed

00:12:11,280 --> 00:12:17,490
output than a you're capable of and and

00:12:14,820 --> 00:12:20,520
ETM debugging David I think is your

00:12:17,490 --> 00:12:23,250
Drake J trace so we're gonna use that as

00:12:20,520 --> 00:12:26,250
well in order to capture this and put on

00:12:23,250 --> 00:12:30,120
coveralls actually what instructions

00:12:26,250 --> 00:12:32,010
were run and up to rolled off into the

00:12:30,120 --> 00:12:33,540
code on target so we get on target

00:12:32,010 --> 00:12:36,000
coverage and that can be important for

00:12:33,540 --> 00:12:37,710
some regulators there are some deal when

00:12:36,000 --> 00:12:40,410
7/8 processes that say you must get

00:12:37,710 --> 00:12:43,260
credit for on target testing and we're

00:12:40,410 --> 00:12:44,670
gonna have that capability and I also

00:12:43,260 --> 00:12:45,720
want to put a resource constraint target

00:12:44,670 --> 00:12:46,860
in there I want to make sure that we're

00:12:45,720 --> 00:12:48,570
not blowing through a bunch of memory

00:12:46,860 --> 00:12:49,710
and so I'm probably gonna have an m0 in

00:12:48,570 --> 00:12:52,200
there at some point make sure we're

00:12:49,710 --> 00:12:54,300
running on that core and I talked about

00:12:52,200 --> 00:12:58,230
performance testing I'd really love to

00:12:54,300 --> 00:13:01,560
have a pixhawk or nut X at some level in

00:12:58,230 --> 00:13:02,880
you know this build pipeline so similar

00:13:01,560 --> 00:13:05,180
with the Google test I've got a link for

00:13:02,880 --> 00:13:07,410
how to enable swo it's really funny that

00:13:05,180 --> 00:13:08,880
you can't actually find arm

00:13:07,410 --> 00:13:10,650
documentation in one place it's all

00:13:08,880 --> 00:13:11,730
peppered around but J link has gone

00:13:10,650 --> 00:13:15,330
through and put it in their manual

00:13:11,730 --> 00:13:17,790
because of that it's just good and you

00:13:15,330 --> 00:13:21,200
can too so this is interesting idea

00:13:17,790 --> 00:13:24,420
whoops how do I go back here darn it

00:13:21,200 --> 00:13:26,390
this actually is totally distributed

00:13:24,420 --> 00:13:28,710
it's in my garage in Seattle right now

00:13:26,390 --> 00:13:30,480
it could conceivably be

00:13:28,710 --> 00:13:33,750
if I wanted to work with somebody and

00:13:30,480 --> 00:13:35,130
they had a servo or some UAV cam part

00:13:33,750 --> 00:13:37,290
and they were really concerned about

00:13:35,130 --> 00:13:40,470
what's going on upstream I can give them

00:13:37,290 --> 00:13:42,990
a token that is their token and they can

00:13:40,470 --> 00:13:45,900
get a PI and put their thing onto the PI

00:13:42,990 --> 00:13:47,100
and all that they get is the binaries

00:13:45,900 --> 00:13:49,170
you don't have any special access

00:13:47,100 --> 00:13:51,660
because that token and so now when Y

00:13:49,170 --> 00:13:53,250
push something into Libya Libya AV can

00:13:51,660 --> 00:13:53,700
it can be delivered anywhere in the

00:13:53,250 --> 00:13:56,070
world

00:13:53,700 --> 00:13:59,100
to a person and say here's the binaries

00:13:56,070 --> 00:14:00,900
that we're proposing that come out of

00:13:59,100 --> 00:14:02,280
the merge that we're proposing and they

00:14:00,900 --> 00:14:05,430
can run their own tests and then they

00:14:02,280 --> 00:14:07,950
can if we decide to be given the ability

00:14:05,430 --> 00:14:09,540
to say fail no this is going to break my

00:14:07,950 --> 00:14:12,000
hardware we need to talk about this

00:14:09,540 --> 00:14:14,550
change I don't know if that's a good

00:14:12,000 --> 00:14:17,130
idea or not it could be a disaster but

00:14:14,550 --> 00:14:22,280
it's something that I'm curious about I

00:14:17,130 --> 00:14:24,930
might want to experiment with right I

00:14:22,280 --> 00:14:27,090
did actually put this whole talk

00:14:24,930 --> 00:14:29,390
together as a blog post first and then

00:14:27,090 --> 00:14:33,180
ginger asked me to do this as a

00:14:29,390 --> 00:14:34,680
presentation so the link in the slide to

00:14:33,180 --> 00:14:36,570
the actual original blog post is up

00:14:34,680 --> 00:14:39,570
there and we're going to keep that blog

00:14:36,570 --> 00:14:48,990
post updated as we do get evolve this

00:14:39,570 --> 00:14:53,000
and make it more mature so questions all

00:14:48,990 --> 00:14:53,000
right no questions

00:14:56,920 --> 00:15:01,569
yeah the question was what are you using

00:14:59,829 --> 00:15:03,639
in the rest very applied to monitor the

00:15:01,569 --> 00:15:05,859
serial connection right it's a little

00:15:03,639 --> 00:15:09,489
bit of Python that I have a library my

00:15:05,859 --> 00:15:13,329
github account it called a Nanaimo which

00:15:09,489 --> 00:15:15,819
is just a mnemonic for a desert right

00:15:13,329 --> 00:15:21,459
now all it's doing is it's taking PI

00:15:15,819 --> 00:15:25,269
serial and it's taking mning some j-link

00:15:21,459 --> 00:15:26,739
commander commands in python and it's

00:15:25,269 --> 00:15:28,419
coordinating those that's going to

00:15:26,739 --> 00:15:30,489
evolve over time and it's going to

00:15:28,419 --> 00:15:31,929
become more robust I'm just going to

00:15:30,489 --> 00:15:33,549
start knowing stuff about SW I was gonna

00:15:31,929 --> 00:15:34,660
have some parsers built into it that's

00:15:33,549 --> 00:15:46,569
kind of where I'm gonna assemble my

00:15:34,660 --> 00:15:49,239
toolkit for this anyone else yes screen

00:15:46,569 --> 00:15:52,019
scraping the results ok let's go and

00:15:49,239 --> 00:15:52,019
repeat the question please

00:15:54,149 --> 00:16:04,569
yep not yet yeah so I mean right now it

00:16:02,259 --> 00:16:07,600
does actually parse out pass/fail so the

00:16:04,569 --> 00:16:09,249
build does fail if Google test fails but

00:16:07,600 --> 00:16:10,959
I didn't want to invest a lot in the

00:16:09,249 --> 00:16:12,879
Google test output parser because it's

00:16:10,959 --> 00:16:14,410
not structured and ultimately don't want

00:16:12,879 --> 00:16:16,629
to be using Google tests but at some

00:16:14,410 --> 00:16:18,639
point we'll come up with a syntax where

00:16:16,629 --> 00:16:20,290
we you can say pass/fail and you can

00:16:18,639 --> 00:16:21,730
also say here's some diagnostic

00:16:20,290 --> 00:16:23,529
information that comes from the SW oh

00:16:21,730 --> 00:16:26,230
that then gets uploaded as an artifact

00:16:23,529 --> 00:16:27,819
so if if we do have that manufacture

00:16:26,230 --> 00:16:30,069
scenario we should be able to control

00:16:27,819 --> 00:16:32,439
what we can dump and put back up into

00:16:30,069 --> 00:16:35,610
our artifact repository and Bill kite to

00:16:32,439 --> 00:16:35,610
diagnose what the problem was

00:16:46,990 --> 00:16:55,610
yes yes yes exactly yes we just want to

00:16:53,870 --> 00:16:57,290
capture what David said on the

00:16:55,610 --> 00:16:59,209
microphone he says that there's a lot of

00:16:57,290 --> 00:17:02,480
synergy here happening and we think we

00:16:59,209 --> 00:17:04,699
can maybe work together to advance our

00:17:02,480 --> 00:17:05,959
future bill drag that we have already

00:17:04,699 --> 00:17:08,420
that Lorraine's presented this morning

00:17:05,959 --> 00:17:12,520
as well yeah thank you David

00:17:08,420 --> 00:17:17,529
all right thank you thank you Scott

00:17:12,520 --> 00:17:17,529
[Applause]

00:17:23,079 --> 00:17:25,140

YouTube URL: https://www.youtube.com/watch?v=yqf2hOQSorI


