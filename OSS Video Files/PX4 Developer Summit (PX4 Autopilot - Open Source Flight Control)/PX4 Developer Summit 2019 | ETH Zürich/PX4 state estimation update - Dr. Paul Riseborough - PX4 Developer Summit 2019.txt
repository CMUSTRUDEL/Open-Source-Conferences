Title: PX4 state estimation update - Dr. Paul Riseborough - PX4 Developer Summit 2019
Publication date: 2019-07-02
Playlist: PX4 Developer Summit 2019 | ETH ZÃ¼rich
Description: 
	Dr. Paul Riseborough
PX4 Maintainer

This session will start with an overview of the developments in state estimation made during the past 12 months leading up to the 3.9 release. It will summarise the key development challenges for the next 12 months and present a proposed development roadmap.
Captions: 
	00:00:14,310 --> 00:00:18,690
hello everyone I locked up all boys real

00:00:17,250 --> 00:00:20,160
will be speaking next he's joining us

00:00:18,690 --> 00:00:23,360
remotely from Australia he couldn't be

00:00:20,160 --> 00:00:30,180
here today but Paul please take it away

00:00:23,360 --> 00:00:32,640
ok so yep good morning everyone

00:00:30,180 --> 00:00:34,770
I apologize for not being able to attend

00:00:32,640 --> 00:00:37,500
in person I had work commitments in

00:00:34,770 --> 00:00:41,430
Australia and also my my son's wedding

00:00:37,500 --> 00:00:44,550
that's finished with now so I look

00:00:41,430 --> 00:00:47,820
forward to be able to get to as for one

00:00:44,550 --> 00:00:50,460
of the follow-on meetings what I wanted

00:00:47,820 --> 00:00:52,950
to do with this presentation was to give

00:00:50,460 --> 00:00:57,540
a quick overview of the state estimation

00:00:52,950 --> 00:01:01,620
and the status of the work in px4 just

00:00:57,540 --> 00:01:04,860
providing an overview of the of the

00:01:01,620 --> 00:01:07,530
state estimator and then move on to

00:01:04,860 --> 00:01:09,390
describing the major changes that have

00:01:07,530 --> 00:01:11,790
been made in the past twelve months and

00:01:09,390 --> 00:01:13,439
also the plans we have in the next

00:01:11,790 --> 00:01:17,400
twelve months to improve the robustness

00:01:13,439 --> 00:01:18,870
and functionality of the system so I'm

00:01:17,400 --> 00:01:21,050
going to move across to a screen share

00:01:18,870 --> 00:01:21,050
now

00:01:30,670 --> 00:01:36,369
okay you should be able to see the

00:01:32,900 --> 00:01:38,690
screen shape okay

00:01:36,369 --> 00:01:40,549
so for those of you that that aren't

00:01:38,690 --> 00:01:43,280
familiar with the state estimation or

00:01:40,549 --> 00:01:46,580
the term state estimation state

00:01:43,280 --> 00:01:49,640
estimation is the process of determining

00:01:46,580 --> 00:01:51,649
the vehicle attitude orientation if you

00:01:49,640 --> 00:01:55,670
like you know which can be expressed as

00:01:51,649 --> 00:02:00,229
the roll pixel your the the velocity of

00:01:55,670 --> 00:02:02,630
the vehicle its position and then we

00:02:00,229 --> 00:02:06,020
also have additional states which

00:02:02,630 --> 00:02:08,630
described the errors or biases in our

00:02:06,020 --> 00:02:10,789
sensors the Earth's magnetic field

00:02:08,630 --> 00:02:13,610
vector and also we estimate wind

00:02:10,789 --> 00:02:19,400
velocity depending on the sense of fit

00:02:13,610 --> 00:02:21,470
and all of this estimation is performed

00:02:19,400 --> 00:02:26,780
using what's called an extended Kalman

00:02:21,470 --> 00:02:28,970
filter algorithm and this is a 24 state

00:02:26,780 --> 00:02:31,280
algorithm it's the most complex piece of

00:02:28,970 --> 00:02:35,260
software that we have on the ps4 flight

00:02:31,280 --> 00:02:38,390
stack so about 6,800 lines of code and

00:02:35,260 --> 00:02:43,160
we've had 41 contributors to the code

00:02:38,390 --> 00:02:53,660
base since it was created in I think

00:02:43,160 --> 00:02:57,320
about 2016 the we one of the items to

00:02:53,660 --> 00:03:00,019
note there is that we compute attitudes

00:02:57,320 --> 00:03:04,070
internally using quaternions to avoid

00:03:00,019 --> 00:03:06,859
gimbal lock and all of these states are

00:03:04,070 --> 00:03:09,170
available on the are published by the

00:03:06,859 --> 00:03:15,190
you orb and are available in the flight

00:03:09,170 --> 00:03:18,500
locks what I'll do now is explain to you

00:03:15,190 --> 00:03:20,209
or describe the architecture for the EKF

00:03:18,500 --> 00:03:23,660
because this is something there that

00:03:20,209 --> 00:03:27,980
makes the estimator that we have in our

00:03:23,660 --> 00:03:33,890
code base unique in the sense that it

00:03:27,980 --> 00:03:36,019
achieves two objectives using a novel

00:03:33,890 --> 00:03:37,940
combination of algorithms the one

00:03:36,019 --> 00:03:42,199
objective is that it's able to take data

00:03:37,940 --> 00:03:43,600
from different points in time that are

00:03:42,199 --> 00:03:46,000
misaligned in entire

00:03:43,600 --> 00:03:48,040
because all of our senses have different

00:03:46,000 --> 00:03:50,380
time delays and coming in at different

00:03:48,040 --> 00:03:50,860
rates and it's able to bring them

00:03:50,380 --> 00:03:54,600
together

00:03:50,860 --> 00:03:59,580
and fuse them at a common time horizon

00:03:54,600 --> 00:04:02,020
it's also able to output attitudes

00:03:59,580 --> 00:04:04,600
velocities positions you know the

00:04:02,020 --> 00:04:07,720
vehicle States and produce a very

00:04:04,600 --> 00:04:10,240
up-to-date estimate you know from the

00:04:07,720 --> 00:04:13,930
IMU data that doesn't suck that suffers

00:04:10,240 --> 00:04:16,870
from minimum latency and lag and at the

00:04:13,930 --> 00:04:18,700
top of the screen we have what we call

00:04:16,870 --> 00:04:22,120
the EKF the extended Kalman filter

00:04:18,700 --> 00:04:25,030
algorithm and you see that the most

00:04:22,120 --> 00:04:30,310
important piece of data for our state

00:04:25,030 --> 00:04:32,430
estimation is the IMU and this is a an

00:04:30,310 --> 00:04:35,650
important point to remember when you're

00:04:32,430 --> 00:04:39,610
setting up a system and when you're

00:04:35,650 --> 00:04:42,190
trying to debug for navigation

00:04:39,610 --> 00:04:45,070
performance that the most important

00:04:42,190 --> 00:04:47,380
sensor for state estimation is the IMU

00:04:45,070 --> 00:04:49,630
and it's important that it be properly

00:04:47,380 --> 00:04:51,910
isolated from vibration and effects like

00:04:49,630 --> 00:04:55,960
flipping and aliasing so we take the arm

00:04:51,910 --> 00:04:59,200
you data we accumulate we down sample it

00:04:55,960 --> 00:05:00,820
it goes into a buffer and all of our

00:04:59,200 --> 00:05:02,200
other sensor data also goes into these

00:05:00,820 --> 00:05:03,580
buffers and the idea and what the

00:05:02,200 --> 00:05:05,920
buffers do and the buffers aren't very

00:05:03,580 --> 00:05:08,500
long they're between 100 and 200

00:05:05,920 --> 00:05:10,750
milliseconds worth of data contained in

00:05:08,500 --> 00:05:15,100
a buffer what the buffer enables us to

00:05:10,750 --> 00:05:17,830
do is to take the data from our other

00:05:15,100 --> 00:05:19,750
sensors like our barometer like the

00:05:17,830 --> 00:05:23,320
optical flow or the GPS or the

00:05:19,750 --> 00:05:26,980
magnetometer and then use them to

00:05:23,320 --> 00:05:30,310
correct the motion that's been

00:05:26,980 --> 00:05:34,990
calculated from the IMU at the correct

00:05:30,310 --> 00:05:36,490
time for that piece of sensor data so by

00:05:34,990 --> 00:05:38,260
using buffers we're able to bring data

00:05:36,490 --> 00:05:41,740
together at the correct point in time

00:05:38,260 --> 00:05:44,650
also note that the way that we use the

00:05:41,740 --> 00:05:47,320
IMU data is we do we run an inertial

00:05:44,650 --> 00:05:50,770
navigation calculation using the our new

00:05:47,320 --> 00:05:55,410
data and then we correct it using the

00:05:50,770 --> 00:05:58,240
data from the other sensors so

00:05:55,410 --> 00:06:02,140
and we also calculate an estimate of the

00:05:58,240 --> 00:06:03,730
uncertainty in our state estimates what

00:06:02,140 --> 00:06:05,890
we get out of the EKF is a state

00:06:03,730 --> 00:06:09,910
estimate that's between 100 and 200

00:06:05,890 --> 00:06:12,040
milliseconds long so we have another but

00:06:09,910 --> 00:06:13,300
that's too that's too old and has too

00:06:12,040 --> 00:06:18,580
much latency to be used in our

00:06:13,300 --> 00:06:21,730
controllers so the normal design feature

00:06:18,580 --> 00:06:25,870
with the ps4 estimator is that we then

00:06:21,730 --> 00:06:30,640
take the IMU data and we use it

00:06:25,870 --> 00:06:32,260
immediately to calculate an attitude of

00:06:30,640 --> 00:06:35,650
velocity position using an initial

00:06:32,260 --> 00:06:39,400
navigation calculation within buffer

00:06:35,650 --> 00:06:40,980
that calculation I'll move back sorry

00:06:39,400 --> 00:06:45,340
about that

00:06:40,980 --> 00:06:49,870
within buffer the calculation and we

00:06:45,340 --> 00:06:52,390
then compare it to the EKF data at a

00:06:49,870 --> 00:06:54,280
common time horizon we then have a

00:06:52,390 --> 00:06:56,050
correction we calculate corrections and

00:06:54,280 --> 00:06:58,900
we apply those Corrections back to the

00:06:56,050 --> 00:07:00,790
input data to the ironists in the output

00:06:58,900 --> 00:07:03,190
predictor and the and what these

00:07:00,790 --> 00:07:05,830
Corrections do is they compensate for

00:07:03,190 --> 00:07:08,530
the errors in the inertial data and that

00:07:05,830 --> 00:07:12,610
means that we have outputs which come

00:07:08,530 --> 00:07:14,740
out at current time which are calculated

00:07:12,610 --> 00:07:17,950
very quickly after we receive our new

00:07:14,740 --> 00:07:21,340
data with less than 100 microseconds of

00:07:17,950 --> 00:07:23,830
latency but those outputs are stopped

00:07:21,340 --> 00:07:25,570
from drifting these estimates are

00:07:23,830 --> 00:07:29,200
stopped from drifting because the output

00:07:25,570 --> 00:07:33,550
predictor tracks the output from the EKF

00:07:29,200 --> 00:07:35,530
at the UKF time horizon so we have an

00:07:33,550 --> 00:07:38,560
EKF and we have an output predictor and

00:07:35,530 --> 00:07:43,560
when you look in your data logs the UKF

00:07:38,560 --> 00:07:47,490
states are in the you'll see the we have

00:07:43,560 --> 00:07:51,670
the estimated status message in the logs

00:07:47,490 --> 00:07:54,130
that contains the ek estates the outputs

00:07:51,670 --> 00:07:56,620
from the predictor they're contained in

00:07:54,130 --> 00:08:01,300
messages like the vehicle attitude or

00:07:56,620 --> 00:08:03,460
the vehicle local position so it's

00:08:01,300 --> 00:08:06,400
important to understand that when you

00:08:03,460 --> 00:08:08,320
look at your estimated status message

00:08:06,400 --> 00:08:08,980
and look at those states that'll logs

00:08:08,320 --> 00:08:12,100
the base

00:08:08,980 --> 00:08:23,590
dates i delayed between 100 to 200

00:08:12,100 --> 00:08:26,260
milliseconds from real time now the in

00:08:23,590 --> 00:08:29,710
terms of the status of the project and

00:08:26,260 --> 00:08:32,830
I'll move through this very quickly the

00:08:29,710 --> 00:08:35,050
codebases is sort of stabilized in the

00:08:32,830 --> 00:08:38,830
last 12 months and the focus is now

00:08:35,050 --> 00:08:43,210
shifting from improving functionality to

00:08:38,830 --> 00:08:44,710
improving robustness of the software so

00:08:43,210 --> 00:08:47,020
in the past 12 months we've had 20

00:08:44,710 --> 00:08:49,590
enhancements we've had a number of 24

00:08:47,020 --> 00:08:52,840
bug fixes had some housekeeping changes

00:08:49,590 --> 00:08:55,960
we still we have to pull request open

00:08:52,840 --> 00:08:58,810
and we've got 30 and open issues - minor

00:08:55,960 --> 00:09:01,420
bugs and then we got full potential bugs

00:08:58,810 --> 00:09:05,560
these are available on github for you to

00:09:01,420 --> 00:09:07,180
look at you can look at the ECL EKF go

00:09:05,560 --> 00:09:12,760
to the ECL library and you'll be able to

00:09:07,180 --> 00:09:16,180
sort by issue type and and look to see

00:09:12,760 --> 00:09:18,090
if those issues are things which would

00:09:16,180 --> 00:09:21,160
concern you for your operations but we

00:09:18,090 --> 00:09:25,510
focused on trying to improve the

00:09:21,160 --> 00:09:26,920
robustness and stability of the code in

00:09:25,510 --> 00:09:29,410
the past 12 months and we're shifting

00:09:26,920 --> 00:09:35,020
the focus to doing that rather than

00:09:29,410 --> 00:09:39,130
integrating new sensor types now what do

00:09:35,020 --> 00:09:41,320
we have we have in terms of we've had

00:09:39,130 --> 00:09:44,470
some three major enhancements go through

00:09:41,320 --> 00:09:47,350
in the last 12 months the first one and

00:09:44,470 --> 00:09:50,380
this is quite significant is that we've

00:09:47,350 --> 00:09:52,090
been able to reduce the latency from the

00:09:50,380 --> 00:09:53,620
receipt of the army data to the output

00:09:52,090 --> 00:09:55,210
of the vehicle attitude by an order of

00:09:53,620 --> 00:10:00,100
magnitude and it's now under 100

00:09:55,210 --> 00:10:02,050
microseconds and we did this moving back

00:10:00,100 --> 00:10:04,000
to the architecture we did this by

00:10:02,050 --> 00:10:05,380
changing the order of calculations so

00:10:04,000 --> 00:10:09,070
that the first calculation that's

00:10:05,380 --> 00:10:11,380
performed when the UK when the estimator

00:10:09,070 --> 00:10:13,990
receives our new data as it runs this

00:10:11,380 --> 00:10:16,510
output prediction is and then it sends

00:10:13,990 --> 00:10:18,730
those outputs publishes those outputs

00:10:16,510 --> 00:10:20,620
they're available to the attitude and

00:10:18,730 --> 00:10:21,850
the other controllers and that's done

00:10:20,620 --> 00:10:24,910
immediately

00:10:21,850 --> 00:10:28,570
we then complete the other calculations

00:10:24,910 --> 00:10:30,970
for the EKF which can take up to two

00:10:28,570 --> 00:10:33,100
milliseconds to complete and then

00:10:30,970 --> 00:10:35,290
perform the corrections but the output

00:10:33,100 --> 00:10:37,180
prediction runs immediately and then we

00:10:35,290 --> 00:10:41,520
immediately publish through to the

00:10:37,180 --> 00:10:41,520
vehicle attitudes message

00:10:42,510 --> 00:10:47,250
we've also added terrain height

00:10:45,160 --> 00:10:50,500
estimation using optical flow sensing

00:10:47,250 --> 00:10:52,600
now that's a significant feature because

00:10:50,500 --> 00:10:56,260
we've tested that on a fixed-wing and

00:10:52,600 --> 00:10:59,980
rotary-wing using the little pmw 3 901

00:10:56,260 --> 00:11:02,640
flow sensor it's it's showed on those

00:10:59,980 --> 00:11:05,230
platforms that it's able to provide a I

00:11:02,640 --> 00:11:08,080
hide it touchdown accurate to within

00:11:05,230 --> 00:11:12,340
about 25 centimeters to half a meter

00:11:08,080 --> 00:11:14,770
accuracy and actually good enough to be

00:11:12,340 --> 00:11:18,520
able to schedule a flare maneuver on

00:11:14,770 --> 00:11:20,830
fixed-wing it does require motion to

00:11:18,520 --> 00:11:22,750
measure height but if you do have an

00:11:20,830 --> 00:11:27,520
optical flow sensor and you enable it

00:11:22,750 --> 00:11:29,860
and you turn off use of optical flow for

00:11:27,520 --> 00:11:31,630
navigation then the EKF will use that

00:11:29,860 --> 00:11:38,740
optical flow to estimate the terrain

00:11:31,630 --> 00:11:42,310
offset we've also added support for use

00:11:38,740 --> 00:11:44,410
of heading from dual antenna RTK gps

00:11:42,310 --> 00:11:48,760
receivers it's been tested on a trimmer

00:11:44,410 --> 00:11:52,420
in b2 gps with good results and and this

00:11:48,760 --> 00:11:54,640
is part of part of the work in the long

00:11:52,420 --> 00:11:58,990
term plan to reduce the reliance on

00:11:54,640 --> 00:12:02,290
magnetometer data magnetometer data is

00:11:58,990 --> 00:12:06,310
one of the major sources of sensor error

00:12:02,290 --> 00:12:07,840
and sensor faults for anomalies for

00:12:06,310 --> 00:12:09,520
flight anomalies particularly when

00:12:07,840 --> 00:12:15,220
operating near large building structures

00:12:09,520 --> 00:12:16,720
or large vehicles so if you for

00:12:15,220 --> 00:12:19,090
platforms that are able to accommodate

00:12:16,720 --> 00:12:21,130
the cost and and the weight associated

00:12:19,090 --> 00:12:24,340
with this type of GPS receiver this

00:12:21,130 --> 00:12:29,340
provides a good method of eliminating

00:12:24,340 --> 00:12:29,340
reliance on a stable magnetic field

00:12:30,280 --> 00:12:43,780
the next item to cover the bug reports

00:12:39,420 --> 00:12:46,270
we still have to open in the system I

00:12:43,780 --> 00:12:48,790
mean we never closed these out as fast

00:12:46,270 --> 00:12:51,850
as he closed them we have new new issues

00:12:48,790 --> 00:12:54,610
are recorded we have one issue we're

00:12:51,850 --> 00:12:57,760
using these wider field of view flow

00:12:54,610 --> 00:12:59,410
sensors like the FEM w3 901 that hide

00:12:57,760 --> 00:13:01,720
estimation can be degraded if the

00:12:59,410 --> 00:13:05,170
vehicle has if the vehicles tilting and

00:13:01,720 --> 00:13:07,450
changing its tilt angle this isn't

00:13:05,170 --> 00:13:10,990
something that's occurred on all vehicle

00:13:07,450 --> 00:13:12,460
types or all setups and it's something

00:13:10,990 --> 00:13:15,010
that we're awaiting further testing to

00:13:12,460 --> 00:13:17,470
quantify the issue we also have an issue

00:13:15,010 --> 00:13:19,660
with fixed-wing veto platform types that

00:13:17,470 --> 00:13:23,380
if operating in in high wind conditions

00:13:19,660 --> 00:13:25,750
that the initial wind velocity estimate

00:13:23,380 --> 00:13:28,390
takes longer to converge than it should

00:13:25,750 --> 00:13:30,610
due to the way that the covariances are

00:13:28,390 --> 00:13:32,340
being initialized and there's a fix in

00:13:30,610 --> 00:13:39,060
progress that's currently under

00:13:32,340 --> 00:13:42,070
evaluation and that's now I don't know

00:13:39,060 --> 00:13:47,290
Rahman these slides going to be made

00:13:42,070 --> 00:13:48,610
available in terms of PDF okay great we

00:13:47,290 --> 00:13:50,560
can put them up on a website because

00:13:48,610 --> 00:13:54,070
I've included the links to these issues

00:13:50,560 --> 00:13:55,540
in the slides so that's if people get

00:13:54,070 --> 00:13:58,120
them in electronic form they'll be able

00:13:55,540 --> 00:14:03,270
to click on the links and then and

00:13:58,120 --> 00:14:05,680
follow up issues for themselves right

00:14:03,270 --> 00:14:07,540
okay we have two outstanding call

00:14:05,680 --> 00:14:09,790
requests there are some miscellaneous

00:14:07,540 --> 00:14:13,050
optical flow changes that's intestine

00:14:09,790 --> 00:14:19,210
review and in something quite recent

00:14:13,050 --> 00:14:21,610
with the with the f7 and h7 based flight

00:14:19,210 --> 00:14:23,770
boards processor flight boards we now

00:14:21,610 --> 00:14:27,550
have the ability to use double precision

00:14:23,770 --> 00:14:32,590
in the estimated calculations and that

00:14:27,550 --> 00:14:34,240
is going to enable us to to use more

00:14:32,590 --> 00:14:35,560
aggressive tuning of the estimator

00:14:34,240 --> 00:14:39,790
particularly tuning of some of the

00:14:35,560 --> 00:14:43,090
process noise in the estimator without

00:14:39,790 --> 00:14:43,810
worrying about loss of stability in the

00:14:43,090 --> 00:14:47,170
covariance

00:14:43,810 --> 00:14:49,779
halation due to the numerical rounding

00:14:47,170 --> 00:14:52,360
errors so we have a draft that's in

00:14:49,779 --> 00:14:54,160
draft at the moment and there's a lot a

00:14:52,360 --> 00:14:56,890
bit more work to be done in terms of

00:14:54,160 --> 00:14:58,420
evaluating its effect and what then what

00:14:56,890 --> 00:15:04,720
we can do in terms of taking advantage

00:14:58,420 --> 00:15:07,810
of it with tuning parameters in terms of

00:15:04,720 --> 00:15:11,400
future estimation work as I've said

00:15:07,810 --> 00:15:13,720
before we are going to focus on

00:15:11,400 --> 00:15:17,710
improving tolerance the sense of faults

00:15:13,720 --> 00:15:22,140
and improving overall robust robustness

00:15:17,710 --> 00:15:24,700
of the code base over and above in

00:15:22,140 --> 00:15:26,650
additional features and support for new

00:15:24,700 --> 00:15:29,350
sensors now that's not saying that we

00:15:26,650 --> 00:15:35,200
won't be adding support for new sensor

00:15:29,350 --> 00:15:38,790
types but the focus does now need to be

00:15:35,200 --> 00:15:43,690
more on robustness and fault tolerance

00:15:38,790 --> 00:15:46,240
so the areas there and these are just a

00:15:43,690 --> 00:15:50,560
list of items which we've discussed in

00:15:46,240 --> 00:15:52,720
our estimation team and that is that we

00:15:50,560 --> 00:15:54,820
would like to move to use of multiple

00:15:52,720 --> 00:15:57,220
EKF instances so that we can isolate

00:15:54,820 --> 00:15:58,900
detect and isolates off time you sense

00:15:57,220 --> 00:16:01,930
of faults now what oh maybe I'll spy a

00:15:58,900 --> 00:16:04,390
soft vault a soft vault is one way the

00:16:01,930 --> 00:16:06,040
sensor produces data but the beta map

00:16:04,390 --> 00:16:08,650
the data might be degraded due to a

00:16:06,040 --> 00:16:12,660
large change in sensor offset and this

00:16:08,650 --> 00:16:15,640
wouldn't be detected by the hard fault

00:16:12,660 --> 00:16:19,990
sensor selection a code in the in the

00:16:15,640 --> 00:16:21,640
sensor module we'd also like to use the

00:16:19,990 --> 00:16:23,800
full knowledge of the Earth's magnetic

00:16:21,640 --> 00:16:27,910
field for up and away flight to better

00:16:23,800 --> 00:16:30,400
our detect magnetometer errors certainly

00:16:27,910 --> 00:16:33,730
with larger platforms we've noticed

00:16:30,400 --> 00:16:35,680
there's been an increase with the use of

00:16:33,730 --> 00:16:36,910
larger platform types and these have

00:16:35,680 --> 00:16:40,390
larger amounts of electromagnetic

00:16:36,910 --> 00:16:43,529
interference and this will be a good

00:16:40,390 --> 00:16:48,820
time to add a user adjustable correction

00:16:43,529 --> 00:16:51,550
for the to the magnetometer data based

00:16:48,820 --> 00:16:54,670
on the measured battery current and then

00:16:51,550 --> 00:16:56,589
finally we'd like to enhance the

00:16:54,670 --> 00:16:57,640
existing airspeed fault tolerance which

00:16:56,589 --> 00:17:02,110
was introduced by

00:16:57,640 --> 00:17:04,750
request 11 846 and we can do that by

00:17:02,110 --> 00:17:08,110
fusing in data from Julius speed sensors

00:17:04,750 --> 00:17:09,760
and using the difference in between the

00:17:08,110 --> 00:17:11,530
innovations of those two sensors to

00:17:09,760 --> 00:17:13,150
determine which sensor has developed the

00:17:11,530 --> 00:17:14,920
fault so we can monitor the difference

00:17:13,150 --> 00:17:16,329
between the two sensors when they

00:17:14,920 --> 00:17:17,980
develop a difference we look at the

00:17:16,329 --> 00:17:21,339
innovations and that enables us to

00:17:17,980 --> 00:17:27,579
isolate the faulty sensor and this will

00:17:21,339 --> 00:17:29,770
provide a more a better handling of SV

00:17:27,579 --> 00:17:33,460
faults than than what we currently have

00:17:29,770 --> 00:17:36,660
the current method relies is able to

00:17:33,460 --> 00:17:40,320
detect airspeed for NSB that fails load

00:17:36,660 --> 00:17:43,450
better than an airspeed failing high and

00:17:40,320 --> 00:17:46,030
it handles it by switching off use of

00:17:43,450 --> 00:17:49,900
airspeed and going back to pitch to

00:17:46,030 --> 00:17:51,400
throttle relationship we would like to

00:17:49,900 --> 00:17:54,330
have dual air speed sensors and been

00:17:51,400 --> 00:17:58,000
able to failover to the second sensor

00:17:54,330 --> 00:18:01,210
and in terms of that the one since the

00:17:58,000 --> 00:18:03,610
top we would like to add support for is

00:18:01,210 --> 00:18:06,700
it just generic range to beacon

00:18:03,610 --> 00:18:11,140
measurements such as ultra wideband RF

00:18:06,700 --> 00:18:12,490
tags or or sonar and these types of

00:18:11,140 --> 00:18:17,200
sensor systems are going to be very

00:18:12,490 --> 00:18:19,660
useful for recovery in in adverse

00:18:17,200 --> 00:18:22,900
conditions you know where visibility so

00:18:19,660 --> 00:18:25,240
camera systems is blocked and finally we

00:18:22,900 --> 00:18:27,910
also want to improve the amount of test

00:18:25,240 --> 00:18:30,640
coverage we version testing for future

00:18:27,910 --> 00:18:32,710
changes and also start to push up the

00:18:30,640 --> 00:18:34,420
level of test evidence required for

00:18:32,710 --> 00:18:38,830
developers when they submit to future

00:18:34,420 --> 00:18:41,590
change requests okay well that's the end

00:18:38,830 --> 00:18:44,310
of the presentation so I'm available to

00:18:41,590 --> 00:18:48,100
take some questions if there's time

00:18:44,310 --> 00:18:55,420
thank you Paul let me is there any

00:18:48,100 --> 00:18:57,460
questions for dr. Paul no one okay can

00:18:55,420 --> 00:19:00,330
we get an applause for dr. Paul it's a

00:18:57,460 --> 00:19:05,380
bit hard to have a remote session

00:19:00,330 --> 00:19:05,380
[Applause]

00:19:11,670 --> 00:19:13,730

YouTube URL: https://www.youtube.com/watch?v=HkYRJJoyBwQ


