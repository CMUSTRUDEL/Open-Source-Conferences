Title: UAVCAN: a highly dependable publish-subscribe protocol for hard real-time intravehicular networking
Publication date: 2019-07-03
Playlist: PX4 Developer Summit 2019 | ETH Zürich
Description: 
	Pavel Kirienko
Founder/CEO, Zubax Robotics
Helping enterprises around the world create aerial transport of the 21st century: electric, autonomous, dependable.

Scott Dixon
Software Engineer, Amazon
I'm a firmware engineer with Amazon PrimeAir in Seattle and a passionate maker of things.

UAVCAN is a compact and robust protocol designed to provide publish/subscribe and remote procedure call (RPC) transports on top of real-time, reliable, and redundant networks for highly-deterministic applications. It is a modern protocol focused on cyber-physical systems making it relevant to the emerging class of vehicles that are largely software-defined and increasingly autonomous. Being first proposed in 2014, the protocol has been integrated into numerous systems and is supported by several vendors worldwide. Experience from years of real-world integration and deployment has culminated in the first long-term stable version – UAVCAN v1.0. New features in this version include compatibility with transport protocols such as CAN FD and UDP/Ethernet, DSDL message versioning, a simplified on-wire representation of UAVCAN frames, and a clear process for the registration and deconfliction of message identifiers between systems and vendors.
Captions: 
	00:00:07,400 --> 00:00:13,120
so this is about you a weekend some of

00:00:13,530 --> 00:00:21,189
briefly this is an onboard communication

00:00:17,710 --> 00:00:25,750
solution for hard real-time in radicular

00:00:21,189 --> 00:00:27,900
networks I'm going to explain what you

00:00:25,750 --> 00:00:30,730
have again is with the help of this

00:00:27,900 --> 00:00:35,320
simple model some of you might consider

00:00:30,730 --> 00:00:38,649
it a bit oversimplified because it is so

00:00:35,320 --> 00:00:43,470
briefly we have two dimensions here one

00:00:38,649 --> 00:00:45,520
dimension denotes the difficulty of

00:00:43,470 --> 00:00:48,010
verification and validation of a

00:00:45,520 --> 00:00:49,570
protocol which is important for safety

00:00:48,010 --> 00:00:51,940
critical applications and the other

00:00:49,570 --> 00:00:53,440
dimension represents the level of

00:00:51,940 --> 00:00:55,810
abstraction that the protocol provides

00:00:53,440 --> 00:00:58,360
for the application and we are going to

00:00:55,810 --> 00:01:01,360
use it in order to help you understand

00:00:58,360 --> 00:01:05,049
what is the place of UA we can compare

00:01:01,360 --> 00:01:07,329
to others oceans so we have several

00:01:05,049 --> 00:01:10,689
broad categories here and as you can see

00:01:07,329 --> 00:01:13,329
the upper left corner is dedicated to

00:01:10,689 --> 00:01:14,979
modern software-defined vehicles and it

00:01:13,329 --> 00:01:19,179
is something that we are actually

00:01:14,979 --> 00:01:22,569
targeting so we can add some protocols

00:01:19,179 --> 00:01:24,640
on here or RC PWM and DDS they are

00:01:22,569 --> 00:01:27,310
worsley different and you can see it

00:01:24,640 --> 00:01:30,219
reflected with this model RC PWM and

00:01:27,310 --> 00:01:31,689
similar basic analog protocols are very

00:01:30,219 --> 00:01:33,719
cheap to validate obviously because they

00:01:31,689 --> 00:01:36,369
are simple they are predictable

00:01:33,719 --> 00:01:37,990
unfortunately their level of abstraction

00:01:36,369 --> 00:01:41,380
and level of communication features

00:01:37,990 --> 00:01:43,299
provided by them is too limited and

00:01:41,380 --> 00:01:45,340
indeed yes you are probably familiar

00:01:43,299 --> 00:01:49,840
with that protocol why do we use it in

00:01:45,340 --> 00:01:51,939
various industrial and IOT applications

00:01:49,840 --> 00:01:54,009
at the moment it doesn't enjoy much use

00:01:51,939 --> 00:01:56,079
in safe at a critical on board networks

00:01:54,009 --> 00:01:58,810
because it is very complex

00:01:56,079 --> 00:02:01,560
the state space of a DDS deployment is

00:01:58,810 --> 00:02:05,520
very extensive and that makes it very

00:02:01,560 --> 00:02:09,640
difficult to validate and to ensure its

00:02:05,520 --> 00:02:11,500
predictable behavior so we can throw

00:02:09,640 --> 00:02:13,480
more protocols perhaps you can recognize

00:02:11,500 --> 00:02:17,620
some of them MQTT is particularly

00:02:13,480 --> 00:02:21,850
popular in ITV's days can aerospace can

00:02:17,620 --> 00:02:24,670
open they're very similar ARINC 429 is

00:02:21,850 --> 00:02:26,190
basically a basic signaling protocol

00:02:24,670 --> 00:02:27,630
which is where our

00:02:26,190 --> 00:02:29,580
level but at the same time very robust

00:02:27,630 --> 00:02:32,730
it's been widely used in aerospace

00:02:29,580 --> 00:02:38,370
applications for decades still use it by

00:02:32,730 --> 00:02:41,360
the way so some extra protocol this is

00:02:38,370 --> 00:02:43,320
not a particle some extra particles here

00:02:41,360 --> 00:02:46,290
al DX

00:02:43,320 --> 00:02:49,530
it's another communication standard

00:02:46,290 --> 00:02:53,340
which displays used in modern airliners

00:02:49,530 --> 00:02:55,070
and other many applications for safety

00:02:53,340 --> 00:02:58,830
critical systems such as fly-by-wire

00:02:55,070 --> 00:03:02,430
where the safety demands are the highest

00:02:58,830 --> 00:03:03,900
higher than anywhere else it's based on

00:03:02,430 --> 00:03:07,980
either net so that is important to keep

00:03:03,900 --> 00:03:10,140
in mind it's yes there is a donate its I

00:03:07,980 --> 00:03:11,810
know it's sounds unusual because it's

00:03:10,140 --> 00:03:14,670
technology which is borrow it from

00:03:11,810 --> 00:03:20,940
consumer applications and it's a very

00:03:14,670 --> 00:03:24,720
interesting solution so we can throw say

00:03:20,940 --> 00:03:26,220
I to C and TCP on here just for the sake

00:03:24,720 --> 00:03:28,590
of general reference although they are

00:03:26,220 --> 00:03:29,730
not really relevant to our effort

00:03:28,590 --> 00:03:32,760
they're designed for completely

00:03:29,730 --> 00:03:35,459
different applications and that makes

00:03:32,760 --> 00:03:40,320
them belong in the in the sector of non

00:03:35,459 --> 00:03:45,360
viable solutions and finally this is the

00:03:40,320 --> 00:03:47,340
place of UAV can or at least this is the

00:03:45,360 --> 00:03:51,450
place that we want that we are striving

00:03:47,340 --> 00:03:53,700
to bring it in you can probably like

00:03:51,450 --> 00:03:55,560
perceive that the upper left corner of

00:03:53,700 --> 00:03:58,110
this diagram is like the holy grail of

00:03:55,560 --> 00:04:00,209
onboard communication something that is

00:03:58,110 --> 00:04:02,040
very easy to validate and the same time

00:04:00,209 --> 00:04:03,390
it provides a rich abstractions allowing

00:04:02,040 --> 00:04:05,850
developers to design complex

00:04:03,390 --> 00:04:07,560
applications easily so that is we're

00:04:05,850 --> 00:04:09,930
trying to push it towards the upper left

00:04:07,560 --> 00:04:12,590
corner and whether we are successful not

00:04:09,930 --> 00:04:12,590
that remains to be seen

00:04:13,160 --> 00:04:19,890
so how are we actually doing that we

00:04:17,970 --> 00:04:22,830
have a set of core design goals which

00:04:19,890 --> 00:04:26,930
form the basic principles that guide our

00:04:22,830 --> 00:04:29,580
design decisions and or engineering

00:04:26,930 --> 00:04:32,010
obviously it's a real-time protocol it's

00:04:29,580 --> 00:04:35,700
designed for real-time systems it should

00:04:32,010 --> 00:04:38,700
be usable in it should be viable a

00:04:35,700 --> 00:04:39,689
viable choice for say for the critical

00:04:38,700 --> 00:04:41,069
systems

00:04:39,689 --> 00:04:43,979
and at the same time we want it to be

00:04:41,069 --> 00:04:45,839
simple so that it's easy to validate our

00:04:43,979 --> 00:04:48,539
you have again deployment to ensure that

00:04:45,839 --> 00:04:51,869
the entire safe space state spaces

00:04:48,539 --> 00:04:56,489
export and it's safe for use it's lower

00:04:51,869 --> 00:05:00,389
head and you will see how we manage it

00:04:56,489 --> 00:05:07,379
to achieve that we're going to cover all

00:05:00,389 --> 00:05:10,049
of this design goes briefly Europe again

00:05:07,379 --> 00:05:12,509
depends on deterministic transports for

00:05:10,049 --> 00:05:15,029
now you know that it supports can and

00:05:12,509 --> 00:05:17,249
later I'm going to also mention our

00:05:15,029 --> 00:05:21,269
force to bring you a weekend to other

00:05:17,249 --> 00:05:23,189
particles weight remember that you have

00:05:21,269 --> 00:05:25,829
again can be implemented using only

00:05:23,189 --> 00:05:27,779
constant complexity algorithms which is

00:05:25,829 --> 00:05:30,269
very important for predictability and

00:05:27,779 --> 00:05:32,610
finally data structures that are

00:05:30,269 --> 00:05:34,559
exchanged over you a weekend they are

00:05:32,610 --> 00:05:37,050
always bounded so worst-case memory

00:05:34,559 --> 00:05:39,649
footprint worst worst case serialization

00:05:37,050 --> 00:05:46,019
deserialization complexity is

00:05:39,649 --> 00:05:48,569
predictable speaking of real time there

00:05:46,019 --> 00:05:50,969
is a common misconception or perhaps

00:05:48,569 --> 00:05:52,829
this is our failure because we don't

00:05:50,969 --> 00:05:56,119
manage to communicate this point clearly

00:05:52,829 --> 00:06:00,679
enough people sometimes ask us questions

00:05:56,119 --> 00:06:03,360
what if they is the performance of their

00:06:00,679 --> 00:06:05,369
control loops on there and many vehicles

00:06:03,360 --> 00:06:07,169
is going to be affected if they actually

00:06:05,369 --> 00:06:09,509
migrate to you a weekend

00:06:07,169 --> 00:06:13,110
how does it compare against their C PWM

00:06:09,509 --> 00:06:17,279
and actually it can it it can compete

00:06:13,110 --> 00:06:20,989
with their C PWM in this diagram we

00:06:17,279 --> 00:06:24,329
assume a standard one megabit per second

00:06:20,989 --> 00:06:28,050
canvas and in the case of Kennedy the

00:06:24,329 --> 00:06:29,729
second bit rate is around it megabit per

00:06:28,050 --> 00:06:32,759
second you can see that it can it can

00:06:29,729 --> 00:06:35,669
actually compete with the best protocols

00:06:32,759 --> 00:06:38,909
that are designed specifically for motor

00:06:35,669 --> 00:06:40,619
control in unmanned vehicles so the

00:06:38,909 --> 00:06:42,649
important message here that you have

00:06:40,619 --> 00:06:46,739
again is at least as capable as

00:06:42,649 --> 00:06:48,869
dedicated protocols if you want more

00:06:46,739 --> 00:06:51,269
technical details refer to the

00:06:48,869 --> 00:06:54,889
specification it's it's very extensive

00:06:51,269 --> 00:06:54,889
and we spend a lot of time writing

00:06:56,360 --> 00:07:01,800
this is what we believe will make you

00:06:59,790 --> 00:07:03,870
weekend a great choice for save for the

00:07:01,800 --> 00:07:06,060
critical deployments first of all there

00:07:03,870 --> 00:07:10,200
is no such thing as a brass master it's

00:07:06,060 --> 00:07:13,380
entirely decentralized and every note

00:07:10,200 --> 00:07:15,750
every participant of the bus has the

00:07:13,380 --> 00:07:17,730
same as equal rights when it comes to

00:07:15,750 --> 00:07:21,300
participation on the network anything

00:07:17,730 --> 00:07:24,750
can and particularly any note can start

00:07:21,300 --> 00:07:27,840
communication there is virtually no

00:07:24,750 --> 00:07:29,640
shared state shared state is a bit of a

00:07:27,840 --> 00:07:31,350
complicated subject I don't want this

00:07:29,640 --> 00:07:34,610
presentation to be technical but briefly

00:07:31,350 --> 00:07:39,150
it makes a communication system fragile

00:07:34,610 --> 00:07:41,370
because when the shared state becomes

00:07:39,150 --> 00:07:44,210
inconsistent certain failure modes

00:07:41,370 --> 00:07:47,940
become important to know as it makes

00:07:44,210 --> 00:07:51,120
verification validation complex that in

00:07:47,940 --> 00:07:53,880
turn enables another feature which is we

00:07:51,120 --> 00:07:55,920
call power up and go basically any node

00:07:53,880 --> 00:07:59,540
can join the network and begin

00:07:55,920 --> 00:08:02,250
communication virtually instantaneously

00:07:59,540 --> 00:08:05,700
there is no such thing as establishment

00:08:02,250 --> 00:08:07,530
of connections or other procedures that

00:08:05,700 --> 00:08:10,170
need to be performed before and now they

00:08:07,530 --> 00:08:14,790
can actually begin operation on the bus

00:08:10,170 --> 00:08:17,370
and redundant transports are first-class

00:08:14,790 --> 00:08:18,810
citizens support for redundant

00:08:17,370 --> 00:08:20,910
communication transport redundant

00:08:18,810 --> 00:08:24,630
interfaces is built into the protocol

00:08:20,910 --> 00:08:26,850
and the protocol provides a convenient

00:08:24,630 --> 00:08:28,890
abstraction for the application so that

00:08:26,850 --> 00:08:30,870
the application perceives the

00:08:28,890 --> 00:08:32,910
communication channel as one virtual

00:08:30,870 --> 00:08:36,500
link which is actually based on several

00:08:32,910 --> 00:08:40,669
several independent physical connections

00:08:36,500 --> 00:08:42,840
and I think we managed to find a pretty

00:08:40,669 --> 00:08:45,350
satisfactory solution that allowed us to

00:08:42,840 --> 00:08:47,760
implement the support easily and again

00:08:45,350 --> 00:08:49,230
another reference to the specification

00:08:47,760 --> 00:08:53,880
if you want to learn the details please

00:08:49,230 --> 00:08:56,610
read it it's interesting last but not

00:08:53,880 --> 00:08:59,760
least it is simple in terms of

00:08:56,610 --> 00:09:01,620
implementation there exists a reference

00:08:59,760 --> 00:09:04,650
implementation called Lipkin art it's

00:09:01,620 --> 00:09:06,670
MIT licensed by the way or it contains

00:09:04,650 --> 00:09:10,720
approximately 1,000 source

00:09:06,670 --> 00:09:12,640
of code so pretty compact and it's on

00:09:10,720 --> 00:09:17,200
github they will be links at the end of

00:09:12,640 --> 00:09:19,710
this presentation so in order to achieve

00:09:17,200 --> 00:09:22,120
this level of simplicity and ease of

00:09:19,710 --> 00:09:25,540
validation we had to introduce some

00:09:22,120 --> 00:09:28,780
design trade-offs of course first of all

00:09:25,540 --> 00:09:31,960
we don't support non reliable transports

00:09:28,780 --> 00:09:34,450
which means that a message loss is

00:09:31,960 --> 00:09:38,470
highly unlikely in a properly

00:09:34,450 --> 00:09:40,150
functioning you weaken deployment the

00:09:38,470 --> 00:09:42,460
architecture is static which means that

00:09:40,150 --> 00:09:44,590
there are no self-describing messages no

00:09:42,460 --> 00:09:47,350
dynamic message formats everything must

00:09:44,590 --> 00:09:50,590
be communication schema must be defined

00:09:47,350 --> 00:09:54,690
before hand and this is desirable for

00:09:50,590 --> 00:09:56,860
the domain that we are targeting and

00:09:54,690 --> 00:09:58,810
another thing that is tightly related

00:09:56,860 --> 00:10:00,760
there is no such thing as arbitrary size

00:09:58,810 --> 00:10:02,830
data data objects which means if you

00:10:00,760 --> 00:10:05,560
want to define a dynamic array for

00:10:02,830 --> 00:10:07,870
example as shown here you have to

00:10:05,560 --> 00:10:10,570
specify its maximum its worst case size

00:10:07,870 --> 00:10:15,220
that allows the protocol to a water line

00:10:10,570 --> 00:10:18,640
some variable complexity routines very

00:10:15,220 --> 00:10:20,440
simple key studied this this product is

00:10:18,640 --> 00:10:23,290
built on a microcontroller

00:10:20,440 --> 00:10:26,860
next video is 11 C 24 it's maybe it's a

00:10:23,290 --> 00:10:30,580
bit of sweet knowledge but no matter

00:10:26,860 --> 00:10:34,000
it contains 32 K from 8k of RAM and it

00:10:30,580 --> 00:10:36,520
runs you can this thing by the way it's

00:10:34,000 --> 00:10:39,060
interesting on its own it's an electro

00:10:36,520 --> 00:10:43,000
permanent magnet it is used for

00:10:39,060 --> 00:10:46,030
attachment of payload to Amend flying

00:10:43,000 --> 00:10:47,500
vehicles and other applications it's

00:10:46,030 --> 00:10:49,450
manufactured by nikka drone you can

00:10:47,500 --> 00:10:51,970
google it if you care about this sort of

00:10:49,450 --> 00:10:54,640
thing really interesting another

00:10:51,970 --> 00:10:56,620
interesting example it's it's a motor

00:10:54,640 --> 00:11:00,420
controller an open-source motor

00:10:56,620 --> 00:11:02,980
controller built on not so capable MCU

00:11:00,420 --> 00:11:06,130
at least when it comes to memory 16 here

00:11:02,980 --> 00:11:08,920
I'm 64 K ROM nor real-time operating

00:11:06,130 --> 00:11:14,070
system it runs you we can end this thing

00:11:08,920 --> 00:11:14,070
is really tiny it's like like this wait

00:11:16,329 --> 00:11:22,660
just to summarize again this is the

00:11:20,199 --> 00:11:24,189
variance of this numbers can be huge so

00:11:22,660 --> 00:11:26,259
it is important to keep in mind that

00:11:24,189 --> 00:11:28,119
these are not exact numbers but it gives

00:11:26,259 --> 00:11:30,160
you a rough idea what you can do with

00:11:28,119 --> 00:11:32,049
memory you have Canary space is of

00:11:30,160 --> 00:11:33,850
course a very simple protocol it is not

00:11:32,049 --> 00:11:37,869
a bad protocol and can be implemented in

00:11:33,850 --> 00:11:41,410
a very constrained systems you the

00:11:37,869 --> 00:11:58,529
takeaway message is that compared to DDS

00:11:41,410 --> 00:12:00,939
solutions you we can is pretty clean so

00:11:58,529 --> 00:12:03,399
last but not least how do we make it

00:12:00,939 --> 00:12:06,970
simple and by last I mean is the last of

00:12:03,399 --> 00:12:09,850
our design goals the complexity of a

00:12:06,970 --> 00:12:12,009
unity and implementation is comparable

00:12:09,850 --> 00:12:16,679
to Canary space some of you may be

00:12:12,009 --> 00:12:18,939
familiar with this protocol the

00:12:16,679 --> 00:12:21,069
specification itself is quite compact

00:12:18,939 --> 00:12:27,040
and that doesn't mean that it's not

00:12:21,069 --> 00:12:28,869
detailed we estimate this it's my

00:12:27,040 --> 00:12:30,850
personal understanding my personal

00:12:28,869 --> 00:12:32,709
assessment is that a sufficiently

00:12:30,850 --> 00:12:36,160
experienced developer can implement you

00:12:32,709 --> 00:12:38,499
again from scratch in approximately one

00:12:36,160 --> 00:12:40,149
main month of course if the

00:12:38,499 --> 00:12:42,429
implementation is to be generic then the

00:12:40,149 --> 00:12:43,449
effort would be slightly higher but for

00:12:42,429 --> 00:12:49,350
a particular application

00:12:43,449 --> 00:12:53,709
this assessment should hold true and

00:12:49,350 --> 00:12:56,379
also the simplicity argument extends not

00:12:53,709 --> 00:13:01,179
only to the implementation of you can

00:12:56,379 --> 00:13:03,220
but also to its usability you can easily

00:13:01,179 --> 00:13:05,759
integrate you weekend into your

00:13:03,220 --> 00:13:08,230
application thanks to our high quality

00:13:05,759 --> 00:13:10,419
reference implementations they are all

00:13:08,230 --> 00:13:12,459
MIT license they are all hosted on

00:13:10,419 --> 00:13:17,049
github

00:13:12,459 --> 00:13:18,790
we support C C++ and Python and there is

00:13:17,049 --> 00:13:21,610
also rest implementation which is sort

00:13:18,790 --> 00:13:25,929
of a work in progress if you care about

00:13:21,610 --> 00:13:27,759
trust we could really use your help now

00:13:25,929 --> 00:13:29,670
those of you who are familiar with Ross

00:13:27,759 --> 00:13:31,980
will find this beta

00:13:29,670 --> 00:13:36,390
definition very familiar because it's

00:13:31,980 --> 00:13:39,930
their use sort of from from Ross there

00:13:36,390 --> 00:13:42,630
are some similarities basically you

00:13:39,930 --> 00:13:46,380
specify type on the left name on the

00:13:42,630 --> 00:13:48,930
right and that makes a data field you

00:13:46,380 --> 00:13:50,430
can see on the line number 16 how we

00:13:48,930 --> 00:13:52,950
constrain a race which I already

00:13:50,430 --> 00:13:56,550
mentioned and these two things at the

00:13:52,950 --> 00:13:58,280
bottom are static verification hooks

00:13:56,550 --> 00:14:00,690
it's a bit of a sophisticated

00:13:58,280 --> 00:14:02,880
complicated thing but in the end that

00:14:00,690 --> 00:14:04,350
allows us to generate extremely

00:14:02,880 --> 00:14:07,290
efficient serialization and

00:14:04,350 --> 00:14:09,570
deserialization code we perform very

00:14:07,290 --> 00:14:11,970
in-depth analysis of bit layouts and

00:14:09,570 --> 00:14:13,920
again specification is your friend of

00:14:11,970 --> 00:14:20,790
you want to learn more it's it's a great

00:14:13,920 --> 00:14:22,680
feature for developers it's easy to use

00:14:20,790 --> 00:14:24,570
for developers who build their

00:14:22,680 --> 00:14:27,150
applications on top of you can it's easy

00:14:24,570 --> 00:14:29,240
to use because we provide very

00:14:27,150 --> 00:14:31,050
convenient communication abstractions

00:14:29,240 --> 00:14:33,210
publish/subscribe many people are

00:14:31,050 --> 00:14:35,850
familiar with that a remote procedure

00:14:33,210 --> 00:14:38,550
call that I called quest response

00:14:35,850 --> 00:14:40,110
exchanges there are two basic

00:14:38,550 --> 00:14:43,860
communication abstractions which are

00:14:40,110 --> 00:14:46,440
built into you a weekend and semantic

00:14:43,860 --> 00:14:50,400
overhead and what we mean by semantic

00:14:46,440 --> 00:14:53,340
overhead is that a working weekend

00:14:50,400 --> 00:14:56,150
deployment is very similar to what you

00:14:53,340 --> 00:14:58,980
would get if you were to just exchange

00:14:56,150 --> 00:15:03,120
raw data over the wire without any

00:14:58,980 --> 00:15:05,310
additional protocol they sometimes call

00:15:03,120 --> 00:15:07,620
it a zero cost abstraction if you're

00:15:05,310 --> 00:15:12,150
familiar with this system it comes from

00:15:07,620 --> 00:15:15,510
software engineering again it's easy to

00:15:12,150 --> 00:15:18,270
use because we provide some decent tools

00:15:15,510 --> 00:15:22,650
this is a graphical user interface which

00:15:18,270 --> 00:15:24,750
we call GUI tool basically it allows you

00:15:22,650 --> 00:15:28,280
to monitor what's happening on the bus

00:15:24,750 --> 00:15:31,170
to who plot values to scrape things and

00:15:28,280 --> 00:15:33,270
perform some sophisticated analysis of

00:15:31,170 --> 00:15:36,230
what's happening it's also open source

00:15:33,270 --> 00:15:36,230
and faucet and get her

00:15:38,060 --> 00:15:47,840
so what I just described it is known as

00:15:41,360 --> 00:15:50,870
you weekend version version one here

00:15:47,840 --> 00:15:53,660
weekend version one was built from our

00:15:50,870 --> 00:15:55,220
experience of deploying the first

00:15:53,660 --> 00:15:58,370
experimental version of the particle

00:15:55,220 --> 00:16:00,770
which is known as pv conversion 0.so

00:15:58,370 --> 00:16:03,830
version zero allowed us to actually test

00:16:00,770 --> 00:16:07,640
our ideas and our engineering against

00:16:03,830 --> 00:16:09,440
real applications not just in simulation

00:16:07,640 --> 00:16:11,960
environments but actually on things that

00:16:09,440 --> 00:16:15,770
go out there and fly and you can is

00:16:11,960 --> 00:16:18,800
currently in use and this is what you a

00:16:15,770 --> 00:16:21,410
weekend version zero was defined for so

00:16:18,800 --> 00:16:24,790
you can see that we've been covering the

00:16:21,410 --> 00:16:27,860
domain of unmanned aerial vehicles and

00:16:24,790 --> 00:16:31,150
ken was our only supported transport

00:16:27,860 --> 00:16:33,890
specifically can 2.0 which is very

00:16:31,150 --> 00:16:39,590
limited transport that's in the toy 8

00:16:33,890 --> 00:16:41,450
bytes per message and so on this is your

00:16:39,590 --> 00:16:43,520
weekend version zero in the world of

00:16:41,450 --> 00:16:45,170
other protocols that other other

00:16:43,520 --> 00:16:52,760
applications which could also possibly

00:16:45,170 --> 00:16:55,700
benefit from it it is in use last year

00:16:52,760 --> 00:16:58,010
we run a survey among companies that are

00:16:55,700 --> 00:17:00,770
members of the drone code foundation

00:16:58,010 --> 00:17:04,340
Thank You Ramon and we've discovered

00:17:00,770 --> 00:17:10,910
that you began is Java conversion 0 is

00:17:04,340 --> 00:17:12,860
used in about 12% of of vehicles again

00:17:10,910 --> 00:17:16,520
that was last year so this these numbers

00:17:12,860 --> 00:17:19,330
are obsolete I expect that today this

00:17:16,520 --> 00:17:24,770
percentage is substantially higher and

00:17:19,330 --> 00:17:26,420
this is you a conversion one we we are

00:17:24,770 --> 00:17:28,210
trying to generalize the protocol I

00:17:26,420 --> 00:17:31,310
think we did that quite successfully

00:17:28,210 --> 00:17:34,160
because we managed to we've identified

00:17:31,310 --> 00:17:36,680
that communication abstractions and

00:17:34,160 --> 00:17:39,260
principles and design objectives that

00:17:36,680 --> 00:17:41,810
are valid for and met vehicles can be

00:17:39,260 --> 00:17:43,700
transferred on to other domains which

00:17:41,810 --> 00:17:46,340
are listed here such as magnet aircraft

00:17:43,700 --> 00:17:49,250
or robotic systems or electric vehicles

00:17:46,340 --> 00:17:51,320
micro satellites all of them use similar

00:17:49,250 --> 00:17:51,830
communication patterns all of them can

00:17:51,320 --> 00:17:54,200
benefit

00:17:51,830 --> 00:17:56,570
from weekend especially so if it

00:17:54,200 --> 00:17:59,480
supports different transports these are

00:17:56,570 --> 00:18:01,519
subjects of ongoing research at the

00:17:59,480 --> 00:18:03,710
moment to support cannon can have the

00:18:01,519 --> 00:18:05,690
heat reliably so it's something that is

00:18:03,710 --> 00:18:08,299
already available and there is ongoing

00:18:05,690 --> 00:18:10,399
work on bringing here we can onto other

00:18:08,299 --> 00:18:12,289
net and serial transports and other

00:18:10,399 --> 00:18:14,600
applications and this this thing I

00:18:12,289 --> 00:18:17,929
Triple E 802 something this is a

00:18:14,600 --> 00:18:20,210
wireless transport wireless is important

00:18:17,929 --> 00:18:22,730
because proper design provide that you

00:18:20,210 --> 00:18:24,799
can build a very robust communication

00:18:22,730 --> 00:18:27,350
system that leverages the dissimilarity

00:18:24,799 --> 00:18:32,659
between wire transports such a scan or

00:18:27,350 --> 00:18:34,730
Ethernet and wireless transport if you

00:18:32,659 --> 00:18:36,440
want to learn about a state-of-the-art

00:18:34,730 --> 00:18:38,120
on lists you can google wireless

00:18:36,440 --> 00:18:40,399
avionics intercommunications it's an

00:18:38,120 --> 00:18:42,380
interesting project they are trying to

00:18:40,399 --> 00:18:46,059
build transports but a built on wireless

00:18:42,380 --> 00:18:50,019
interface on terminated MANET aircraft

00:18:46,059 --> 00:18:53,419
so this approach has caused some of our

00:18:50,019 --> 00:18:56,960
users to raise concerns about the

00:18:53,419 --> 00:18:58,970
disappearance of of data types and

00:18:56,960 --> 00:19:00,620
abstractions that are specific to you to

00:18:58,970 --> 00:19:02,870
the UAV domain from the core

00:19:00,620 --> 00:19:05,389
specification it is important to

00:19:02,870 --> 00:19:08,720
understand that these data types are not

00:19:05,389 --> 00:19:11,419
being removed and users who are

00:19:08,720 --> 00:19:14,510
concerned should be like should

00:19:11,419 --> 00:19:28,100
understand that their abstractions are

00:19:14,510 --> 00:19:33,169
still there we propose to transfer the

00:19:28,100 --> 00:19:35,029
ownership of the domain specific data

00:19:33,169 --> 00:19:37,970
type definitions from the core

00:19:35,029 --> 00:19:41,870
specification into entity such as drone

00:19:37,970 --> 00:19:43,700
code which would manage its own set of

00:19:41,870 --> 00:19:47,149
data type definitions and service

00:19:43,700 --> 00:19:49,340
definitions that are useful in the

00:19:47,149 --> 00:19:51,470
domain of small and minute and many

00:19:49,340 --> 00:19:55,250
vehicles this is we're going to

00:19:51,470 --> 00:19:59,179
formalize this proposal over the soon in

00:19:55,250 --> 00:20:03,820
the near future and then we raise it for

00:19:59,179 --> 00:20:03,820
discussion with drone code stakeholders

00:20:04,370 --> 00:20:10,640
besides there's a specific highly

00:20:07,550 --> 00:20:12,440
specialized datatypes there exist also

00:20:10,640 --> 00:20:16,100
generalized data types such as for

00:20:12,440 --> 00:20:20,390
example this is SI namespace which

00:20:16,100 --> 00:20:22,220
provides very basic definitions for some

00:20:20,390 --> 00:20:24,590
of the basic physical quantities such as

00:20:22,220 --> 00:20:26,780
speed for example or power or energy

00:20:24,590 --> 00:20:28,760
voltage and so on which allow you to

00:20:26,780 --> 00:20:31,160
quickly prototype a system based on here

00:20:28,760 --> 00:20:34,940
we can while not requiring it to

00:20:31,160 --> 00:20:36,350
actually define your own data types it's

00:20:34,940 --> 00:20:38,270
not really intended for use in

00:20:36,350 --> 00:20:40,780
production this is more like for quick

00:20:38,270 --> 00:20:43,340
prototyping because it is expected that

00:20:40,780 --> 00:20:47,690
it's always possible to build a more

00:20:43,340 --> 00:20:48,280
more optimal system with custom data

00:20:47,690 --> 00:20:50,750
types

00:20:48,280 --> 00:20:53,360
likewise there exist very basic

00:20:50,750 --> 00:20:56,810
primitive types such as natural integers

00:20:53,360 --> 00:21:02,030
and bit flags which are also designed to

00:20:56,810 --> 00:21:06,920
fulfill the same Basim role that was on

00:21:02,030 --> 00:21:08,690
the basics of you we can and the the

00:21:06,920 --> 00:21:16,130
next the next part of this presentation

00:21:08,690 --> 00:21:19,010
will be led by Scott right so why am I

00:21:16,130 --> 00:21:21,380
here because I recently integrated this

00:21:19,010 --> 00:21:24,080
into our vehicle system so I have recent

00:21:21,380 --> 00:21:25,850
experience with evaluating UAV can as a

00:21:24,080 --> 00:21:29,780
technology and then actually working

00:21:25,850 --> 00:21:33,860
with it and and then working with Pavel

00:21:29,780 --> 00:21:36,410
to evolve it to be the the v1

00:21:33,860 --> 00:21:38,420
specification that we have today so let

00:21:36,410 --> 00:21:40,940
me give you a bit of a background of

00:21:38,420 --> 00:21:44,690
what it looks like to industry as a

00:21:40,940 --> 00:21:48,080
value proposition first of all it is

00:21:44,690 --> 00:21:52,940
open its MIT license which is a license

00:21:48,080 --> 00:21:54,590
that industry likes a lot it is in

00:21:52,940 --> 00:21:58,330
github so we can see all the source

00:21:54,590 --> 00:22:03,070
easily and the specification is open

00:21:58,330 --> 00:22:06,740
this is when I was going to look at the

00:22:03,070 --> 00:22:09,140
was open can't open I was get it

00:22:06,740 --> 00:22:10,280
backwards open can camera looking at

00:22:09,140 --> 00:22:11,360
can't open you want to look at can't all

00:22:10,280 --> 00:22:13,460
fit great yeah they've got a lot of

00:22:11,360 --> 00:22:14,360
marketing material like okay I want to

00:22:13,460 --> 00:22:16,760
see how its implemented

00:22:14,360 --> 00:22:18,080
no implementations that I can find on

00:22:16,760 --> 00:22:19,820
get

00:22:18,080 --> 00:22:20,419
well I'll read the spec I'll do it

00:22:19,820 --> 00:22:22,309
myself

00:22:20,419 --> 00:22:24,710
oh well I got a log in and get a

00:22:22,309 --> 00:22:26,299
password from my office and you know

00:22:24,710 --> 00:22:27,799
it's just and this was kind of a pattern

00:22:26,299 --> 00:22:29,270
I saw on some of the other projects like

00:22:27,799 --> 00:22:30,950
I want to evaluate this technology guys

00:22:29,270 --> 00:22:33,409
I don't want to like join your group

00:22:30,950 --> 00:22:36,669
before I try what the technology is it's

00:22:33,409 --> 00:22:40,580
kind of a try before you buy philosophy

00:22:36,669 --> 00:22:42,770
it's really useful UAV can it maintains

00:22:40,580 --> 00:22:46,909
debug tools you saw the graphical

00:22:42,770 --> 00:22:48,409
debugger from v-0 we have a v1 version

00:22:46,909 --> 00:22:50,210
that working on that we're excited about

00:22:48,409 --> 00:22:53,030
unfortunate it's not far enough along we

00:22:50,210 --> 00:22:57,110
have screenshots but it's a JavaScript

00:22:53,030 --> 00:23:00,320
UI version that is remoted so that you

00:22:57,110 --> 00:23:02,000
have a server process and a JavaScript

00:23:00,320 --> 00:23:04,820
UI which is really useful because

00:23:02,000 --> 00:23:06,799
sometimes you have raspberry pi or some

00:23:04,820 --> 00:23:08,990
embedded machine that you want to have

00:23:06,799 --> 00:23:11,270
running on in down in your hardware lab

00:23:08,990 --> 00:23:15,799
or something and now you could put this

00:23:11,270 --> 00:23:17,720
debugging module in that embedded

00:23:15,799 --> 00:23:20,780
environment run it over TCP and have

00:23:17,720 --> 00:23:24,280
your nice MacBook run really fancy

00:23:20,780 --> 00:23:24,280
JavaScript you eyes and visualizations

00:23:24,309 --> 00:23:28,820
didn't intend to talk about that but one

00:23:27,049 --> 00:23:29,960
of the reasons to talk about that is and

00:23:28,820 --> 00:23:31,460
other slides coming up we could really

00:23:29,960 --> 00:23:33,110
use help a lot of us are really

00:23:31,460 --> 00:23:35,330
low-level geeks and we'd love to have

00:23:33,110 --> 00:23:39,650
more JavaScript help in this area

00:23:35,330 --> 00:23:41,750
especially any designers documentation

00:23:39,650 --> 00:23:45,110
was really good excuse me was really

00:23:41,750 --> 00:23:49,130
good this was a big plus so I was able

00:23:45,110 --> 00:23:51,679
to skip ahead of slides when I was

00:23:49,130 --> 00:23:54,770
evaluating this I was able to go into

00:23:51,679 --> 00:23:56,659
here and start reading about UAV can

00:23:54,770 --> 00:23:58,610
note additionally initialization start

00:23:56,659 --> 00:24:00,890
up this looks pretty easy I don't want

00:23:58,610 --> 00:24:03,980
to read words I don't like words words

00:24:00,890 --> 00:24:06,289
words code yeh got to this really fast

00:24:03,980 --> 00:24:09,679
coffee pace put on my micro controller

00:24:06,289 --> 00:24:11,600
and this kind of works I can totally see

00:24:09,679 --> 00:24:13,669
how to implement and then I like node

00:24:11,600 --> 00:24:15,650
spin okay I get the theory of operation

00:24:13,669 --> 00:24:18,080
I can kind of now start getting an idea

00:24:15,650 --> 00:24:22,360
now I want to know more so now I can go

00:24:18,080 --> 00:24:25,549
up and I can get the specification and

00:24:22,360 --> 00:24:27,260
another one over here for v-0 and we're

00:24:25,549 --> 00:24:28,580
you know these are these are important

00:24:27,260 --> 00:24:30,740
value propositions that we will continue

00:24:28,580 --> 00:24:32,660
with with v1 we want it to be the same

00:24:30,740 --> 00:24:36,050
kind of experience for industry as they

00:24:32,660 --> 00:24:40,250
start evaluating this and for example

00:24:36,050 --> 00:24:41,660
right here is Olivia levy can v1 the

00:24:40,250 --> 00:24:44,570
implementation that I've been working on

00:24:41,660 --> 00:24:46,190
and this is an automated output every

00:24:44,570 --> 00:24:48,950
build that we do pushes a new set of

00:24:46,190 --> 00:24:50,059
doxygen outputs from that build up to

00:24:48,950 --> 00:24:52,580
the server so you can see the build

00:24:50,059 --> 00:24:55,660
number up there are docks go live right

00:24:52,580 --> 00:24:55,660
with our changes

00:24:59,179 --> 00:25:05,210
it's forward-looking as a technology

00:25:01,670 --> 00:25:07,190
it's not encumbered by a lot of junk

00:25:05,210 --> 00:25:08,240
that we don't care about and there was

00:25:07,190 --> 00:25:10,309
another thing that when we were

00:25:08,240 --> 00:25:12,100
evaluating other camp protocols Kamban

00:25:10,309 --> 00:25:14,150
came has been around for a long time

00:25:12,100 --> 00:25:16,280
we've kind of had to wade through all

00:25:14,150 --> 00:25:18,350
the stuff that was about running systems

00:25:16,280 --> 00:25:21,470
that were barely out of being pneumatic

00:25:18,350 --> 00:25:25,720
systems and going through stuff that had

00:25:21,470 --> 00:25:27,710
to do with robotic arms and automobiles

00:25:25,720 --> 00:25:29,450
just to get to like the currently note

00:25:27,710 --> 00:25:31,550
we just want like the really abstracted

00:25:29,450 --> 00:25:33,860
middle part of the thing and and UAV can

00:25:31,550 --> 00:25:37,400
gave it to us really directly without

00:25:33,860 --> 00:25:40,160
too much obstruction and confusion which

00:25:37,400 --> 00:25:43,040
really helped us evaluate it's um its

00:25:40,160 --> 00:25:47,570
utility and imagine how we were going to

00:25:43,040 --> 00:25:49,220
use it going forward it also because of

00:25:47,570 --> 00:25:50,330
with the v1 design we're lowering the

00:25:49,220 --> 00:25:53,059
chance it's gonna get locked into a

00:25:50,330 --> 00:25:55,250
given bus technology cans been around

00:25:53,059 --> 00:25:56,809
for a long time it's not going away can

00:25:55,250 --> 00:25:58,670
FD has just come out and is becoming

00:25:56,809 --> 00:26:02,830
very popular which is going to expand

00:25:58,670 --> 00:26:04,670
its lifetime but there's a couple things

00:26:02,830 --> 00:26:06,350
automotive ethernet is becoming very

00:26:04,670 --> 00:26:08,480
popular those parts are becoming very

00:26:06,350 --> 00:26:11,000
cheap it has a lot of the same value

00:26:08,480 --> 00:26:12,650
propositions as can who knows what else

00:26:11,000 --> 00:26:14,780
might happen maybe we'll finally figure

00:26:12,650 --> 00:26:17,120
out quantum radio or something can will

00:26:14,780 --> 00:26:19,400
become irrelevant this is trying to give

00:26:17,120 --> 00:26:25,400
you a little bit of an abstraction at

00:26:19,400 --> 00:26:28,670
your a not application layer but at a

00:26:25,400 --> 00:26:30,559
low layer that will kind of protect you

00:26:28,670 --> 00:26:32,420
from that and hopefully we'll we'll be

00:26:30,559 --> 00:26:34,070
able to adapt v1 to a changing

00:26:32,420 --> 00:26:36,760
environment without disruption to the

00:26:34,070 --> 00:26:36,760
higher level code

00:26:40,040 --> 00:26:45,570
right and dfdl is another thing that is

00:26:43,620 --> 00:26:48,720
a really great value proposition for

00:26:45,570 --> 00:26:50,700
industry a lot of existing can

00:26:48,720 --> 00:26:52,770
implementations start out as they're

00:26:50,700 --> 00:26:55,830
like a diagram on the left there it's

00:26:52,770 --> 00:26:57,600
definitely this the state that my team

00:26:55,830 --> 00:27:00,330
was in when we started we had some

00:26:57,600 --> 00:27:02,190
massive canned messages H everybody used

00:27:00,330 --> 00:27:04,650
it and you start getting a lot more

00:27:02,190 --> 00:27:06,510
engineers working on on the program you

00:27:04,650 --> 00:27:08,850
get several different divisions that are

00:27:06,510 --> 00:27:10,410
working on a unified vehicle system

00:27:08,850 --> 00:27:12,000
you're all that come together somewhere

00:27:10,410 --> 00:27:13,890
and you start coming together and

00:27:12,000 --> 00:27:15,540
there's a big header and it starts

00:27:13,890 --> 00:27:18,150
getting in the way if there's becoming a

00:27:15,540 --> 00:27:20,280
problem with the SDL instead we have an

00:27:18,150 --> 00:27:21,929
interface definition language and that

00:27:20,280 --> 00:27:23,309
interface definition language becomes

00:27:21,929 --> 00:27:25,500
the place that we collaborate now the

00:27:23,309 --> 00:27:28,770
various engineering teams can publish

00:27:25,500 --> 00:27:30,750
types to each other as IDL and the

00:27:28,770 --> 00:27:33,390
engineering teams then can choose what

00:27:30,750 --> 00:27:35,940
they want to do it with that idea if

00:27:33,390 --> 00:27:37,500
they want to generate C with C++ with it

00:27:35,940 --> 00:27:39,270
whether they want to use the open-source

00:27:37,500 --> 00:27:40,800
generators one of the want to create

00:27:39,270 --> 00:27:44,100
their own and integrate it into their

00:27:40,800 --> 00:27:48,720
software those are all options with with

00:27:44,100 --> 00:27:51,000
an idea another thing that this makes a

00:27:48,720 --> 00:27:53,700
possibility is you could conceivably

00:27:51,000 --> 00:27:57,600
create a certifiable generator so for

00:27:53,700 --> 00:28:00,179
four different like deal one seven eight

00:27:57,600 --> 00:28:02,910
processes you can actually certify a

00:28:00,179 --> 00:28:06,390
tool so that it can output content that

00:28:02,910 --> 00:28:09,360
will be under your type sir and it is

00:28:06,390 --> 00:28:14,250
conceivable that you could have DSD l

00:28:09,360 --> 00:28:16,200
tool that was certified in that way the

00:28:14,250 --> 00:28:17,790
core applications functions may be when

00:28:16,200 --> 00:28:19,110
you're evaluating the technology you

00:28:17,790 --> 00:28:22,679
look at some of them and think we're not

00:28:19,110 --> 00:28:24,809
gonna need that you will it turns out

00:28:22,679 --> 00:28:26,070
all of the the core functions actually

00:28:24,809 --> 00:28:29,640
turn out to be really important once

00:28:26,070 --> 00:28:31,530
your vehicle system matures so batteries

00:28:29,640 --> 00:28:34,710
included yeah but just the batteries you

00:28:31,530 --> 00:28:37,950
need just very small batteries so the

00:28:34,710 --> 00:28:39,630
heartbeat is is really important this is

00:28:37,950 --> 00:28:42,120
one people overlooked with

00:28:39,630 --> 00:28:45,240
microcontrollers microcontrollers are

00:28:42,120 --> 00:28:46,919
really cool they can reset so fast that

00:28:45,240 --> 00:28:48,059
you don't know anything's wrong and it

00:28:46,919 --> 00:28:49,679
doesn't know anything's wrong

00:28:48,059 --> 00:28:51,960
it just goes along it hits a hurtful

00:28:49,679 --> 00:28:52,380
resets comes back up continues to do it

00:28:51,960 --> 00:28:54,030
just

00:28:52,380 --> 00:28:56,430
functionality make the system think it's

00:28:54,030 --> 00:28:57,900
healthy and go into reset come back even

00:28:56,430 --> 00:28:58,980
be flying across the country thinking

00:28:57,900 --> 00:29:01,170
you're happy as anything

00:28:58,980 --> 00:29:03,120
heartbeat is the one indicator it's

00:29:01,170 --> 00:29:05,640
gonna tell you that there's a monotonic

00:29:03,120 --> 00:29:07,740
timer and UAV can which can be literally

00:29:05,640 --> 00:29:09,780
the only signal you know that you're

00:29:07,740 --> 00:29:12,140
something is desperately wrong and you

00:29:09,780 --> 00:29:16,170
probably need to get into a safe state

00:29:12,140 --> 00:29:17,940
get info is is really important when

00:29:16,170 --> 00:29:20,610
your system starts sealing up you're not

00:29:17,940 --> 00:29:22,020
able to attach je tags to every part and

00:29:20,610 --> 00:29:24,300
you need to start introspecting things

00:29:22,020 --> 00:29:26,790
attached to a bus this allows you to go

00:29:24,300 --> 00:29:30,180
out and ask things on the bus what are

00:29:26,790 --> 00:29:31,710
you how are you configured it gives you

00:29:30,180 --> 00:29:34,230
a like an interactive debugging

00:29:31,710 --> 00:29:36,690
capability for your vehicle this is a

00:29:34,230 --> 00:29:37,860
like some of the tools the ride this is

00:29:36,690 --> 00:29:39,360
something you can walk out of a

00:29:37,860 --> 00:29:41,910
production vehicle so it's really great

00:29:39,360 --> 00:29:44,040
for flight testing and prototypes and

00:29:41,910 --> 00:29:46,320
then if you need to go and I deliver

00:29:44,040 --> 00:29:48,750
something this type search you can

00:29:46,320 --> 00:29:51,090
compile this functionality out and just

00:29:48,750 --> 00:29:55,380
stay with the actual core functions that

00:29:51,090 --> 00:29:57,180
you need to fly and diagnostics data

00:29:55,380 --> 00:29:58,290
flow and registers are similar functions

00:29:57,180 --> 00:30:01,290
that are delivered as part of the core

00:29:58,290 --> 00:30:02,700
specification plug-and-play is something

00:30:01,290 --> 00:30:04,500
that we were really dubious that we

00:30:02,700 --> 00:30:06,480
would need because we don't like the

00:30:04,500 --> 00:30:08,460
idea of dynamic stuff in the vehicle we

00:30:06,480 --> 00:30:10,550
want to know that our vehicle is

00:30:08,460 --> 00:30:13,020
configured exactly right before we fly

00:30:10,550 --> 00:30:15,030
the thing is something changing in the

00:30:13,020 --> 00:30:17,400
vehicle is terrifying but it turns out

00:30:15,030 --> 00:30:18,990
it's really useful for reasons other

00:30:17,400 --> 00:30:20,580
than you would think and again this is

00:30:18,990 --> 00:30:23,730
one of those things you can choose to

00:30:20,580 --> 00:30:25,170
compile in in certain modes one of the

00:30:23,730 --> 00:30:28,050
things there's really interesting is we

00:30:25,170 --> 00:30:29,430
can use it for manufacturing tests where

00:30:28,050 --> 00:30:31,290
you need to take something that's

00:30:29,430 --> 00:30:32,640
supposed to be unique in a vehicle but

00:30:31,290 --> 00:30:33,870
you may need to have a hundred of them

00:30:32,640 --> 00:30:35,490
on a single bus as part of them in a

00:30:33,870 --> 00:30:37,290
manufacturing test plug-and-play

00:30:35,490 --> 00:30:39,780
actually gives you a solution where you

00:30:37,290 --> 00:30:40,860
can create software that is really

00:30:39,780 --> 00:30:42,360
really similar the thing you're gonna

00:30:40,860 --> 00:30:46,520
fly with the only difference that it can

00:30:42,360 --> 00:30:49,770
get its node ID dynamically node

00:30:46,520 --> 00:30:52,500
software update is we always forget

00:30:49,770 --> 00:30:54,360
about the boot loaders and the UAV can

00:30:52,500 --> 00:30:59,310
reminds us that you are going to need a

00:30:54,360 --> 00:31:04,230
boot loader at some point so what

00:30:59,310 --> 00:31:05,820
changed in v-0 this was the the layout

00:31:04,230 --> 00:31:08,479
of the R

00:31:05,820 --> 00:31:10,409
tration part of the camp message now

00:31:08,479 --> 00:31:11,879
probably should mention here so we've

00:31:10,409 --> 00:31:15,239
been talking about about ovie one's

00:31:11,879 --> 00:31:18,179
going to be protocol agnostic yes that's

00:31:15,239 --> 00:31:21,389
an area of research that's an aspiration

00:31:18,179 --> 00:31:24,239
you Eve can v1 though is still very much

00:31:21,389 --> 00:31:27,720
focused on can and best it can it is

00:31:24,239 --> 00:31:29,639
really good it can so I'm showing you

00:31:27,720 --> 00:31:32,580
the can arbitration frame it is core to

00:31:29,639 --> 00:31:35,009
the protocol still this is the

00:31:32,580 --> 00:31:36,659
arbitration frame for v-0 and there were

00:31:35,009 --> 00:31:39,899
three different layouts that you would

00:31:36,659 --> 00:31:41,159
have a little difficult to exactly

00:31:39,899 --> 00:31:43,259
figure out which layout you're in

00:31:41,159 --> 00:31:44,639
because it's it's not like I could just

00:31:43,259 --> 00:31:48,690
show you look at this bit you could tell

00:31:44,639 --> 00:31:51,539
which one but with v1 to a lot of

00:31:48,690 --> 00:31:53,399
back-and-forth and arguing and begging

00:31:51,539 --> 00:31:56,519
Pavel to give us our protocol bit which

00:31:53,399 --> 00:32:00,330
he finally did we were able to get it

00:31:56,519 --> 00:32:01,889
down to just two layouts so any UAV cam

00:32:00,330 --> 00:32:06,200
message will have only one of these two

00:32:01,889 --> 00:32:09,929
layouts and it has to do with the

00:32:06,200 --> 00:32:15,629
service not message bits you'll you'll

00:32:09,929 --> 00:32:20,009
either have a kind of an RPC style or a

00:32:15,629 --> 00:32:22,229
pub/sub style message and then yeah this

00:32:20,009 --> 00:32:22,919
thing that I have shuttle and I argued

00:32:22,229 --> 00:32:26,519
about quite a bit

00:32:22,919 --> 00:32:29,029
protocol version bit is yet another so I

00:32:26,519 --> 00:32:31,259
just showed you we broke the binary

00:32:29,029 --> 00:32:33,599
protocol from v-0 to v1 the wire

00:32:31,259 --> 00:32:35,700
protocol which is a little scary and you

00:32:33,599 --> 00:32:37,470
probe ask me why this is one of the

00:32:35,700 --> 00:32:39,539
reasons why one of the biggest reasons

00:32:37,470 --> 00:32:41,909
why I'm really ok with it this

00:32:39,539 --> 00:32:43,349
future-proof stuff now we have a bit so

00:32:41,909 --> 00:32:45,629
that if we got something desperately

00:32:43,349 --> 00:32:48,299
wrong now we do have that one bit where

00:32:45,629 --> 00:32:50,970
in the future I can say you know what v2

00:32:48,299 --> 00:32:52,409
is gonna have to come out not planning

00:32:50,970 --> 00:32:54,149
out of it it's going to have to come out

00:32:52,409 --> 00:32:56,580
and v2 is going to set that bit to one

00:32:54,149 --> 00:33:01,679
and now we have a really good forward

00:32:56,580 --> 00:33:05,340
compatibility story and the biggest

00:33:01,679 --> 00:33:07,320
thing data types so v-0 was terrifying

00:33:05,340 --> 00:33:10,320
because the data types had no versioning

00:33:07,320 --> 00:33:12,960
story whatsoever and this was definitely

00:33:10,320 --> 00:33:15,119
me do not want to manufacture millions

00:33:12,960 --> 00:33:16,559
of devices and have no story about what

00:33:15,119 --> 00:33:18,720
am I going to do if I need to change the

00:33:16,559 --> 00:33:19,680
data type I'm not going to go into too

00:33:18,720 --> 00:33:21,930
much

00:33:19,680 --> 00:33:23,760
on exactly how the revision alerts a

00:33:21,930 --> 00:33:25,650
binary protocol it's very low-level and

00:33:23,760 --> 00:33:29,520
Static so the revision is a little bit

00:33:25,650 --> 00:33:31,110
nuanced but it's in specification I want

00:33:29,520 --> 00:33:34,440
to give a call up to Chet Oh who is uh

00:33:31,110 --> 00:33:37,920
was one of the three that met to start

00:33:34,440 --> 00:33:41,490
kick off the v1 process and this link

00:33:37,920 --> 00:33:43,170
down here you'll see he had he was

00:33:41,490 --> 00:33:45,510
really key to getting the the the

00:33:43,170 --> 00:33:48,150
protocol the datatype versioning correct

00:33:45,510 --> 00:33:50,309
he argued long and hard and really well

00:33:48,150 --> 00:33:54,059
thought through arguments if anything

00:33:50,309 --> 00:33:56,370
else this this thread on the forum it's

00:33:54,059 --> 00:33:58,170
just a really great example of engineers

00:33:56,370 --> 00:33:59,820
collaborating in an open-source setting

00:33:58,170 --> 00:34:04,530
I would I would recommend it for for

00:33:59,820 --> 00:34:08,429
that reason alone and back to you yeah

00:34:04,530 --> 00:34:10,919
thank you so this part is going to be

00:34:08,429 --> 00:34:13,669
very brief here we basically I am the

00:34:10,919 --> 00:34:16,530
current status of our implementations

00:34:13,669 --> 00:34:20,340
you can see that C and Python

00:34:16,530 --> 00:34:21,899
implementations are already usable the

00:34:20,340 --> 00:34:24,389
Python implementation is actually

00:34:21,899 --> 00:34:26,460
designed to support different transports

00:34:24,389 --> 00:34:28,320
already although the supports are not

00:34:26,460 --> 00:34:30,330
yet in the specification as I said this

00:34:28,320 --> 00:34:34,710
is something that is currently under

00:34:30,330 --> 00:34:38,960
active research but can FD or can 2.0

00:34:34,710 --> 00:34:41,850
can be used already live you began is

00:34:38,960 --> 00:34:46,700
kind of being worked on it is not quite

00:34:41,850 --> 00:34:46,700
usable some work remains to be done

00:34:48,139 --> 00:34:54,540
then there is a rust implementation

00:34:51,090 --> 00:34:57,000
which requires which must be worked on

00:34:54,540 --> 00:34:58,350
quite let me talk about that real quick

00:34:57,000 --> 00:35:00,540
because that was a selling point for us

00:34:58,350 --> 00:35:02,610
we liked that there was rust not because

00:35:00,540 --> 00:35:04,230
we wanted to use it because I told us

00:35:02,610 --> 00:35:05,970
that the community was looking ahead and

00:35:04,230 --> 00:35:08,580
researching things and thinking beyond

00:35:05,970 --> 00:35:11,430
what it knew I'd really love to have

00:35:08,580 --> 00:35:13,980
somebody pick up rust for v1 and and

00:35:11,430 --> 00:35:18,120
restore that yes I am personally a big

00:35:13,980 --> 00:35:19,950
believer in rust I think this is it has

00:35:18,120 --> 00:35:22,710
the potential to be a great solution for

00:35:19,950 --> 00:35:24,900
safety critical software development at

00:35:22,710 --> 00:35:28,410
the moment it's kind of in its early

00:35:24,900 --> 00:35:30,690
days still there is effort which you

00:35:28,410 --> 00:35:33,210
might have heard of scoffs you addressed

00:35:30,690 --> 00:35:36,640
it subjectivist Oh

00:35:33,210 --> 00:35:38,890
provide certified and validated

00:35:36,640 --> 00:35:40,120
implementation of harrassed compiler to

00:35:38,890 --> 00:35:42,610
make this language usable in

00:35:40,120 --> 00:35:46,990
safety-critical systems on par with a de

00:35:42,610 --> 00:35:49,120
or C so we want to be on board with that

00:35:46,990 --> 00:35:50,830
because I think that this is a great

00:35:49,120 --> 00:35:53,980
trend which is which has the potential

00:35:50,830 --> 00:35:57,660
to perhaps significantly displace see

00:35:53,980 --> 00:35:57,660
from certain safety critical domains

00:35:58,590 --> 00:36:06,340
this is our proposal how to bring your

00:36:02,410 --> 00:36:08,560
weekend version 1 to px4 so obviously

00:36:06,340 --> 00:36:10,330
this is not something that we finalized

00:36:08,560 --> 00:36:12,430
which is as I say this is merely a

00:36:10,330 --> 00:36:16,030
proposal this is something that we want

00:36:12,430 --> 00:36:19,300
to discuss the plan is to integrate you

00:36:16,030 --> 00:36:21,790
weekend version 1 into the release of

00:36:19,300 --> 00:36:24,730
Peaks for following version 1 point 10

00:36:21,790 --> 00:36:27,130
so that's due in March of the next year

00:36:24,730 --> 00:36:30,910
and then there's going to be a transit

00:36:27,130 --> 00:36:33,550
repaired and until version 1 point 10

00:36:30,910 --> 00:36:36,850
which we expect to be the last version

00:36:33,550 --> 00:36:38,890
supporting European version 0 reaches

00:36:36,850 --> 00:36:42,460
the end of its lifecycle and after that

00:36:38,890 --> 00:36:45,310
is going to be consistently version 1 it

00:36:42,460 --> 00:36:47,520
is extremely important to perform this

00:36:45,310 --> 00:36:49,780
transition sooner rather than later

00:36:47,520 --> 00:36:52,990
because we know that there is power

00:36:49,780 --> 00:36:57,400
certain vendors are Chinese partners and

00:36:52,990 --> 00:37:00,880
others who are working on new generation

00:36:57,400 --> 00:37:03,340
of UAV products which will be you can

00:37:00,880 --> 00:37:06,430
enabled and it is important to ensure

00:37:03,340 --> 00:37:09,160
that we roll out the transition to

00:37:06,430 --> 00:37:11,500
version 1 before these products and new

00:37:09,160 --> 00:37:13,960
products reach the market because if we

00:37:11,500 --> 00:37:16,270
fail to do so if we delay the transition

00:37:13,960 --> 00:37:18,340
then the ecosystem will be fragmented

00:37:16,270 --> 00:37:22,690
which could be very disastrous for the

00:37:18,340 --> 00:37:24,280
specification and a good thing is that

00:37:22,690 --> 00:37:27,820
we have already secured the necessary

00:37:24,280 --> 00:37:32,050
human resources for this transition and

00:37:27,820 --> 00:37:35,410
I think the the general process is

00:37:32,050 --> 00:37:37,090
pretty well defined so there are the

00:37:35,410 --> 00:37:42,850
risk of this transition should be very

00:37:37,090 --> 00:37:46,570
low now there is a particular question

00:37:42,850 --> 00:37:47,230
that we get asked frequently is how does

00:37:46,570 --> 00:37:51,430
one

00:37:47,230 --> 00:37:53,500
use you weekend version zero and there

00:37:51,430 --> 00:37:56,470
is no better answer than to just go

00:37:53,500 --> 00:37:58,150
ahead and look at the website knew that

00:37:56,470 --> 00:38:02,950
you became the tork new because it

00:37:58,150 --> 00:38:04,810
stands for version one go here and read

00:38:02,950 --> 00:38:08,109
whatever is published there and that

00:38:04,810 --> 00:38:09,910
will bring you up to speed you will know

00:38:08,109 --> 00:38:12,609
everything that there is to know to be

00:38:09,910 --> 00:38:15,099
able to build a UAV can application

00:38:12,609 --> 00:38:21,280
software hardware product research

00:38:15,099 --> 00:38:27,430
whatever now this is on the future here

00:38:21,280 --> 00:38:30,250
we can take over here alright so the

00:38:27,430 --> 00:38:32,650
remaining work that we have for you a

00:38:30,250 --> 00:38:34,570
weekend v1 we need to finish the

00:38:32,650 --> 00:38:36,070
reference implementations and from what

00:38:34,570 --> 00:38:38,890
Paul was telling me I mean I need to

00:38:36,070 --> 00:38:42,339
finish the C++ for reference

00:38:38,890 --> 00:38:43,869
implementation finish the the new tool

00:38:42,339 --> 00:38:46,720
type so the Yukon tool that I was

00:38:43,869 --> 00:38:48,640
telling you about is lagging behind the

00:38:46,720 --> 00:38:51,579
rest of the project and that's that's an

00:38:48,640 --> 00:38:53,950
area where we could use more help and

00:38:51,579 --> 00:38:57,819
more important in area that I think is

00:38:53,950 --> 00:39:03,069
is really critical for v1 to be widely

00:38:57,819 --> 00:39:05,230
adopted going forward we need to define

00:39:03,069 --> 00:39:06,609
and deploy the type management process

00:39:05,230 --> 00:39:08,260
that we're talking about so we were

00:39:06,609 --> 00:39:10,270
saying we didn't delete your types we

00:39:08,260 --> 00:39:11,680
promoted them they're something we're

00:39:10,270 --> 00:39:13,930
going to work with outside of the

00:39:11,680 --> 00:39:15,280
specification but we haven't yet said

00:39:13,930 --> 00:39:17,920
how we're going to work with the types

00:39:15,280 --> 00:39:19,329
we owe the community that and that's

00:39:17,920 --> 00:39:22,990
going to be something that we do in

00:39:19,329 --> 00:39:25,900
short order I think maybe I could talk a

00:39:22,990 --> 00:39:29,500
little bit more about that so what we're

00:39:25,900 --> 00:39:31,210
hoping is that px4 has a set of types of

00:39:29,500 --> 00:39:33,520
isn't interested in but there could be

00:39:31,210 --> 00:39:35,859
other industries or other projects that

00:39:33,520 --> 00:39:37,960
also are interested in UAV can that want

00:39:35,859 --> 00:39:39,970
to have their own namespace and this

00:39:37,960 --> 00:39:42,130
process will allow us to manage those

00:39:39,970 --> 00:39:43,780
things independently so if you had

00:39:42,130 --> 00:39:46,660
somebody that was interested in I don't

00:39:43,780 --> 00:39:48,190
know a factory automation it was very

00:39:46,660 --> 00:39:50,589
hard to collaborate with them in the

00:39:48,190 --> 00:39:55,180
drone community you would have very

00:39:50,589 --> 00:39:56,650
different ways of looking at some at

00:39:55,180 --> 00:39:58,839
these data types and at the interfaces

00:39:56,650 --> 00:40:01,930
this allows the state to parallel wise

00:39:58,839 --> 00:40:05,020
those standardization efforts

00:40:01,930 --> 00:40:06,730
and we want to lower the the entry

00:40:05,020 --> 00:40:11,320
barrier barrier we want to make it

00:40:06,730 --> 00:40:12,400
easier to evaluate and adopt v1 to play

00:40:11,320 --> 00:40:16,180
with it

00:40:12,400 --> 00:40:19,090
I think play is a very powerful tool for

00:40:16,180 --> 00:40:20,830
engineers to build a tinkerer and poke

00:40:19,090 --> 00:40:23,560
and prod at it and get to learn through

00:40:20,830 --> 00:40:24,850
that way so hopefully we'll have some

00:40:23,560 --> 00:40:30,630
solutions that'll make it a little more

00:40:24,850 --> 00:40:33,280
fun Pavel you want to talk about your

00:40:30,630 --> 00:40:35,860
yeah I love this picture because I I

00:40:33,280 --> 00:40:37,270
love this kind of these kinds of

00:40:35,860 --> 00:40:38,620
applications where you can just point

00:40:37,270 --> 00:40:40,690
and click and connect things together

00:40:38,620 --> 00:40:44,860
this is something that we have on our

00:40:40,690 --> 00:40:46,180
roadmap Scott mentioned that we are

00:40:44,860 --> 00:40:50,470
working on a new graphical user

00:40:46,180 --> 00:40:52,180
interface Yukon and these capabilities

00:40:50,470 --> 00:40:56,400
on the roadmap basically what it allows

00:40:52,180 --> 00:40:58,750
it do is to connect Yukon to canvas

00:40:56,400 --> 00:41:01,930
containing several nodes and you can

00:40:58,750 --> 00:41:05,700
configure them by connecting together

00:41:01,930 --> 00:41:08,710
different there are representations and

00:41:05,700 --> 00:41:12,310
that will allow you to easily configure

00:41:08,710 --> 00:41:16,150
a possible very complex system and look

00:41:12,310 --> 00:41:17,980
at the way it's configured in this human

00:41:16,150 --> 00:41:20,530
kinda visualization

00:41:17,980 --> 00:41:23,290
again people who are familiar with Ross

00:41:20,530 --> 00:41:27,250
will find certain similarities with Ross

00:41:23,290 --> 00:41:31,620
graph and other Ross visualization tools

00:41:27,250 --> 00:41:31,620
there are a lot of parallels to be made

00:41:32,610 --> 00:41:40,000
briefly what we are working on this is

00:41:37,090 --> 00:41:42,760
the current status of the project has

00:41:40,000 --> 00:41:46,420
been saved new transport currently the

00:41:42,760 --> 00:41:50,020
area of active research lowering the

00:41:46,420 --> 00:41:51,580
entry barrier is extremely important yes

00:41:50,020 --> 00:41:53,050
that's the sort of feedback that we've

00:41:51,580 --> 00:41:54,670
been receiving from the community that

00:41:53,050 --> 00:41:56,470
certain aspects might be a bit hard to

00:41:54,670 --> 00:42:00,310
grasp and we are working hard to ensure

00:41:56,470 --> 00:42:06,250
that every developer can easily start

00:42:00,310 --> 00:42:08,680
with you again and get up to speed we we

00:42:06,250 --> 00:42:10,990
are trying very hard to ensure that our

00:42:08,680 --> 00:42:14,619
software our reference implementations

00:42:10,990 --> 00:42:17,619
adhere to the highest quality standards

00:42:14,619 --> 00:42:19,420
we use lenders we use maestra in the

00:42:17,619 --> 00:42:22,509
other high reliability coding standards

00:42:19,420 --> 00:42:25,470
static verification and most importantly

00:42:22,509 --> 00:42:25,470
everything is on github

00:42:25,950 --> 00:42:32,319
one of the plans for v1 from new term

00:42:30,279 --> 00:42:35,259
plans is to ensure that it is deployed

00:42:32,319 --> 00:42:38,049
in at least two large scale with

00:42:35,259 --> 00:42:44,319
ecosystems one of them perhaps could be

00:42:38,049 --> 00:42:47,190
Peaks or we will see it was will after

00:42:44,319 --> 00:42:49,690
that we would have received sufficient

00:42:47,190 --> 00:42:53,069
validation empirical validation of this

00:42:49,690 --> 00:42:55,329
technology which would allow us to

00:42:53,069 --> 00:42:57,460
launch the protest of formal

00:42:55,329 --> 00:42:59,259
standardisation of the protocol because

00:42:57,460 --> 00:43:00,940
by that point it would be actually as

00:42:59,259 --> 00:43:03,999
you put battle-proven

00:43:00,940 --> 00:43:07,749
and verify it against real few good

00:43:03,999 --> 00:43:11,079
applications not just research should we

00:43:07,749 --> 00:43:14,440
operate on standardization other than

00:43:11,079 --> 00:43:16,210
its it's a very desirable goal to get to

00:43:14,440 --> 00:43:18,069
so yes once we once we have it deployed

00:43:16,210 --> 00:43:20,259
into vehicle systems that kind of gives

00:43:18,069 --> 00:43:22,059
us enough confidence that v1 is

00:43:20,259 --> 00:43:25,480
something we want to standardize and

00:43:22,059 --> 00:43:27,069
then I know I'm personally very

00:43:25,480 --> 00:43:29,529
interested in and I've gotten some

00:43:27,069 --> 00:43:32,440
commitment from my company to back some

00:43:29,529 --> 00:43:36,279
of this approach some standards body and

00:43:32,440 --> 00:43:43,420
you get this specification written up

00:43:36,279 --> 00:43:45,700
through that standard I think it's

00:43:43,420 --> 00:43:47,650
higher bus factor after all yes so

00:43:45,700 --> 00:43:50,309
objective is to increase the bus factor

00:43:47,650 --> 00:43:50,309
and that means

00:43:50,400 --> 00:43:54,880
reducing the number of actually

00:43:52,930 --> 00:43:56,289
increasing the number of key people who

00:43:54,880 --> 00:43:58,089
are necessary for this through our

00:43:56,289 --> 00:44:00,519
loader project

00:43:58,089 --> 00:44:02,170
I'm not exactly sure what are the

00:44:00,519 --> 00:44:06,239
logistics of this approach but this is

00:44:02,170 --> 00:44:08,710
an important goal you know it does go to

00:44:06,239 --> 00:44:11,700
one of the things I didn't mention that

00:44:08,710 --> 00:44:13,779
I meant to about in the evaluation is

00:44:11,700 --> 00:44:16,809
project health of an open source project

00:44:13,779 --> 00:44:19,029
and there were a few other projects out

00:44:16,809 --> 00:44:21,759
there that maybe had similar value

00:44:19,029 --> 00:44:23,980
propositions to UAV can but appeared to

00:44:21,759 --> 00:44:26,200
be all but abandoned if not dead

00:44:23,980 --> 00:44:28,020
so it's very important that the UAV

00:44:26,200 --> 00:44:29,970
can't project remain

00:44:28,020 --> 00:44:33,780
healthy open-source project to maintain

00:44:29,970 --> 00:44:35,820
that value proposition through v1 and

00:44:33,780 --> 00:44:41,040
it's very important that pavel does not

00:44:35,820 --> 00:44:44,430
get hit by a bus right now yes so as Ben

00:44:41,040 --> 00:44:47,150
said we have tentatively secured some HR

00:44:44,430 --> 00:44:49,410
some human resources necessary for

00:44:47,150 --> 00:44:51,090
maintenance of year weekend within the

00:44:49,410 --> 00:44:55,470
scope of their own code in Peaks or

00:44:51,090 --> 00:45:01,350
project so that's something that's more

00:44:55,470 --> 00:45:04,620
or less resolved at this point really

00:45:01,350 --> 00:45:07,170
that's it you began with one is in a

00:45:04,620 --> 00:45:11,370
state where it can be safely used for

00:45:07,170 --> 00:45:13,500
new projects new deployment we are

00:45:11,370 --> 00:45:15,390
committed to provide support to European

00:45:13,500 --> 00:45:16,980
version zero it is not getting the per

00:45:15,390 --> 00:45:19,410
ticket overnight we know that there are

00:45:16,980 --> 00:45:21,270
users and products out there that depend

00:45:19,410 --> 00:45:24,020
on it and it is very hard commitment to

00:45:21,270 --> 00:45:27,570
ensure that they continue safe operation

00:45:24,020 --> 00:45:30,090
and again this is very important which

00:45:27,570 --> 00:45:34,500
is why we reiterate we are continuing

00:45:30,090 --> 00:45:35,910
ongoing research and different transport

00:45:34,500 --> 00:45:38,970
protocols including heterogeneous

00:45:35,910 --> 00:45:41,550
transport protocols there is a pretty

00:45:38,970 --> 00:45:44,760
long write-up written in bad english on

00:45:41,550 --> 00:45:48,300
the forum you will be able to click this

00:45:44,760 --> 00:45:50,270
link afterwards and understand at the

00:45:48,300 --> 00:45:53,460
background what we've been working on

00:45:50,270 --> 00:45:58,020
heard of heterogeneous redundancy before

00:45:53,460 --> 00:45:59,520
anybody I briefly mentioned it's

00:45:58,020 --> 00:46:01,380
something it seems you heard about

00:45:59,520 --> 00:46:02,610
you're like oh wow I really should have

00:46:01,380 --> 00:46:04,500
thought of that before it's something

00:46:02,610 --> 00:46:07,560
more interesting and yeah if you have

00:46:04,500 --> 00:46:08,820
redundant CANbus the failure mode that

00:46:07,560 --> 00:46:10,200
you can experience in one of those buses

00:46:08,820 --> 00:46:13,080
it's probably the exact same failure

00:46:10,200 --> 00:46:14,190
mode you can experience in the other for

00:46:13,080 --> 00:46:15,630
one thing is probably gonna be your

00:46:14,190 --> 00:46:16,980
connector it's probably gonna be the

00:46:15,630 --> 00:46:18,360
same connector and it's probably gonna

00:46:16,980 --> 00:46:20,070
be experienced the same vibration and

00:46:18,360 --> 00:46:22,080
they're probably both gonna fail so what

00:46:20,070 --> 00:46:23,790
did the two buses buy you heterogeneous

00:46:22,080 --> 00:46:26,010
redundancy means you should have to

00:46:23,790 --> 00:46:27,690
completely heterogeneous solutions so

00:46:26,010 --> 00:46:29,910
that those failure modes are different

00:46:27,690 --> 00:46:31,680
one of the really striking examples if

00:46:29,910 --> 00:46:33,390
you think about an airplane wing if you

00:46:31,680 --> 00:46:34,950
have multiple hydraulic lines going to

00:46:33,390 --> 00:46:35,940
the control surfaces and an engine blows

00:46:34,950 --> 00:46:38,280
up it's he's going to cut through all

00:46:35,940 --> 00:46:39,960
the hydraulic lines so this Wireless

00:46:38,280 --> 00:46:40,610
standard that Paul was talking about was

00:46:39,960 --> 00:46:42,500
a it was a

00:46:40,610 --> 00:46:44,240
innovative solution of that well let's

00:46:42,500 --> 00:46:46,190
have the redundant thing be Wireless so

00:46:44,240 --> 00:46:49,070
yeah you've got a wire there it gets cut

00:46:46,190 --> 00:46:51,020
and now you can use the wire connection

00:46:49,070 --> 00:46:52,970
to go past there the catastrophic

00:46:51,020 --> 00:46:55,700
failure and still control the emergency

00:46:52,970 --> 00:47:00,440
equipment different failure modes that's

00:46:55,700 --> 00:47:03,410
the key again they supposed this this

00:47:00,440 --> 00:47:04,990
slide is more useful for those I will be

00:47:03,410 --> 00:47:08,150
looking at this presentation afterwards

00:47:04,990 --> 00:47:09,890
click this link to go ahead read what

00:47:08,150 --> 00:47:15,520
we've been working on there is a lot of

00:47:09,890 --> 00:47:21,260
great stuff out there plus but at least

00:47:15,520 --> 00:47:23,570
you we can kind of means canvas for UAV

00:47:21,260 --> 00:47:26,870
but this interpretation is slowly

00:47:23,570 --> 00:47:29,270
becoming obsolete we hope to ensure that

00:47:26,870 --> 00:47:35,480
this acronym remain is the only complex

00:47:29,270 --> 00:47:43,100
thing in the particle thank you thank

00:47:35,480 --> 00:47:44,540
you guys it was a great talk guys thank

00:47:43,100 --> 00:47:46,690
you is there any questions from the

00:47:44,540 --> 00:47:46,690
audience

00:47:47,650 --> 00:47:50,860
go ahead

00:48:00,950 --> 00:48:07,710
alright question was it seems that

00:48:04,590 --> 00:48:09,119
you're targeting the same goals as Ross

00:48:07,710 --> 00:48:11,850
what is the difference what are the

00:48:09,119 --> 00:48:14,610
different goals I think it's best to

00:48:11,850 --> 00:48:20,280
answer this question with a picture one

00:48:14,610 --> 00:48:22,770
picture is worth 1,000 24 words so you

00:48:20,280 --> 00:48:25,470
began is all the way on the left part of

00:48:22,770 --> 00:48:29,460
this chart which means that it is safe

00:48:25,470 --> 00:48:32,300
it is it is easy to ensure that it it

00:48:29,460 --> 00:48:36,030
performs according to the specification

00:48:32,300 --> 00:48:39,330
there is a specification for you we can

00:48:36,030 --> 00:48:41,400
there is probably no well-defined for

00:48:39,330 --> 00:48:43,560
most specification for us you want

00:48:41,400 --> 00:48:49,020
disagree that way and not exactly sure

00:48:43,560 --> 00:48:51,570
no that is a very important

00:48:49,020 --> 00:48:53,100
differentiator because it allows you to

00:48:51,570 --> 00:48:54,420
track requirements of a lyric and

00:48:53,100 --> 00:48:56,190
implementation and that makes it

00:48:54,420 --> 00:48:58,590
suitable for safety critical deployment

00:48:56,190 --> 00:49:00,240
also it is very simple one thousand

00:48:58,590 --> 00:49:02,760
lines of code get your working system

00:49:00,240 --> 00:49:05,700
that is something that it is manageable

00:49:02,760 --> 00:49:07,590
that can be cheaply elevated that is the

00:49:05,700 --> 00:49:09,630
main distinguishing factor for a

00:49:07,590 --> 00:49:11,280
developer for somebody who uses you ever

00:49:09,630 --> 00:49:14,369
can as opposed to performs his

00:49:11,280 --> 00:49:16,050
deployment it's more or less it's at

00:49:14,369 --> 00:49:19,770
this familiar if they're familiar with

00:49:16,050 --> 00:49:22,410
yours I hope that makes sense it's also

00:49:19,770 --> 00:49:23,580
very statically defined everything is

00:49:22,410 --> 00:49:27,180
determined at compile time

00:49:23,580 --> 00:49:30,960
so that's makes it much easier to verify

00:49:27,180 --> 00:49:32,940
and it also does allows you to verify

00:49:30,960 --> 00:49:37,100
and assert certain properties of the

00:49:32,940 --> 00:49:37,100
entire vehicle bus at compilation time

00:49:40,720 --> 00:49:58,150
I don't see that it's it to me it's you

00:49:56,590 --> 00:50:00,430
could repeat the question

00:49:58,150 --> 00:50:02,650
can you repeat the question okay so let

00:50:00,430 --> 00:50:04,270
me see if they it seems like what you're

00:50:02,650 --> 00:50:06,010
saying that it's a one or the other

00:50:04,270 --> 00:50:08,500
situation and they can't live together

00:50:06,010 --> 00:50:10,360
in the same vehicle system I don't think

00:50:08,500 --> 00:50:13,780
that I don't think that's necessarily

00:50:10,360 --> 00:50:15,610
true that's not my vision of it I would

00:50:13,780 --> 00:50:19,840
imagine that UAV can is a lower level

00:50:15,610 --> 00:50:23,140
protocol you could have some versions

00:50:19,840 --> 00:50:26,320
where you're integrating where Ross is

00:50:23,140 --> 00:50:28,030
going over UAV can is a possibility but

00:50:26,320 --> 00:50:29,920
it's probably more likely that there are

00:50:28,030 --> 00:50:31,870
like boundaries or you've got lower

00:50:29,920 --> 00:50:35,440
level for referrals that are talking UAV

00:50:31,870 --> 00:50:37,630
can to some kind of a switch or

00:50:35,440 --> 00:50:40,840
intermediate that then goes into the the

00:50:37,630 --> 00:50:43,180
Ross domain yes I think the application

00:50:40,840 --> 00:50:49,540
domains of Ross and you ever can they

00:50:43,180 --> 00:50:52,240
don't overlap significantly well and so

00:50:49,540 --> 00:50:56,230
I have a question I just started with

00:50:52,240 --> 00:50:58,930
UAV camp project and I have now like my

00:50:56,230 --> 00:51:01,540
laptop talking to 2px or nodes running

00:50:58,930 --> 00:51:04,810
by UAV can on the laptop and live here

00:51:01,540 --> 00:51:07,740
we can on the extra nodes when will I be

00:51:04,810 --> 00:51:12,520
able to run your weekend 1.0 as easily

00:51:07,740 --> 00:51:13,690
as it was with 0.9 yeah so pavel claims

00:51:12,520 --> 00:51:16,240
and i haven't had time to verify that

00:51:13,690 --> 00:51:18,700
you PI ueb can is ready to do that level

00:51:16,240 --> 00:51:22,240
of testing right it is technically early

00:51:18,700 --> 00:51:23,710
it works you can do things but we're

00:51:22,240 --> 00:51:24,990
still working on the documentation to

00:51:23,710 --> 00:51:26,440
make sure that the ender barrier is

00:51:24,990 --> 00:51:28,720
accepted at all

00:51:26,440 --> 00:51:30,700
so the moment it's a bit difficult to

00:51:28,720 --> 00:51:34,540
use but we're working on that

00:51:30,700 --> 00:51:37,570
technically it's there and the C++

00:51:34,540 --> 00:51:39,250
implementation I kind of throw a dart

00:51:37,570 --> 00:51:44,080
board at the calendar and set an alpha

00:51:39,250 --> 00:51:46,480
in August so a rough date from an

00:51:44,080 --> 00:51:48,930
engineer really trust us and there is

00:51:46,480 --> 00:51:52,290
great documentation for we maybe we can

00:51:48,930 --> 00:51:52,290
Scott made it

00:51:53,049 --> 00:51:59,390
thank you I have a question regarding

00:51:55,640 --> 00:52:01,220
multiple physical layers is there any

00:51:59,390 --> 00:52:03,170
plan to integrate routing between those

00:52:01,220 --> 00:52:05,569
different physical like having a device

00:52:03,170 --> 00:52:07,640
on can't or two devices can and well

00:52:05,569 --> 00:52:10,029
less talk to a device that has only

00:52:07,640 --> 00:52:12,380
wireless and message is transparently so

00:52:10,029 --> 00:52:14,690
I think that there actually exists very

00:52:12,380 --> 00:52:17,359
sensible use cases for that and you can

00:52:14,690 --> 00:52:20,329
find similar similar patterns deployed

00:52:17,359 --> 00:52:22,160
in actual say Fatih critical aerospace

00:52:20,329 --> 00:52:25,009
applications for example a bridge

00:52:22,160 --> 00:52:27,710
between our enhanced and our 10 FDX is

00:52:25,009 --> 00:52:29,859
something that is used frequently in in

00:52:27,710 --> 00:52:32,269
airliners for example where they connect

00:52:29,859 --> 00:52:34,789
avionics installed on a wingtip to the

00:52:32,269 --> 00:52:37,539
main FDX bus so that is something that

00:52:34,789 --> 00:52:45,470
that makes sense

00:52:37,539 --> 00:52:47,450
any other questions first so you showed

00:52:45,470 --> 00:52:49,430
on one of the slides with your 29 bit

00:52:47,450 --> 00:52:49,730
identifier you had like four priority

00:52:49,430 --> 00:52:51,829
bits

00:52:49,730 --> 00:52:53,809
how are those configured and is that

00:52:51,829 --> 00:52:58,369
effectively a message priority or a node

00:52:53,809 --> 00:53:00,710
priority so it's a priority is generally

00:52:58,369 --> 00:53:02,480
configured for per publisher and

00:53:00,710 --> 00:53:05,559
actually there are three linked three

00:53:02,480 --> 00:53:14,660
priority bits let me find this slide for

00:53:05,559 --> 00:53:17,150
general reference that is something that

00:53:14,660 --> 00:53:20,539
can be arbitrarily chosen for publisher

00:53:17,150 --> 00:53:21,920
actually pure message one follow-on

00:53:20,539 --> 00:53:24,589
question to that it does this represent

00:53:21,920 --> 00:53:28,160
all of the overhead for you if you can

00:53:24,589 --> 00:53:30,589
because that's an arbitration framing

00:53:28,160 --> 00:53:32,749
can so right I understand so there's

00:53:30,589 --> 00:53:34,279
about 50 percent quote-unquote overhead

00:53:32,749 --> 00:53:35,869
when you're using twenty nine betadine

00:53:34,279 --> 00:53:37,099
afire so are you adding anything on top

00:53:35,869 --> 00:53:46,730
of that or do you fit everything right

00:53:37,099 --> 00:53:48,380
in here there is one extra byte okay hi

00:53:46,730 --> 00:53:50,599
Pavel there's one one part I didn't

00:53:48,380 --> 00:53:53,539
quite catch you said at one point there

00:53:50,599 --> 00:53:54,739
was static configuration of or the

00:53:53,539 --> 00:53:56,809
preferred method was static

00:53:54,739 --> 00:53:57,259
configuration but then you also talked

00:53:56,809 --> 00:53:59,749
about

00:53:57,259 --> 00:54:01,400
plug-and-play so plugins is an option

00:53:59,749 --> 00:54:02,869
something that you can implement if you

00:54:01,400 --> 00:54:04,580
believe your application can benefit

00:54:02,869 --> 00:54:06,920
from it but it is

00:54:04,580 --> 00:54:08,600
something that we we don't recommend to

00:54:06,920 --> 00:54:10,670
use in the specification there is a

00:54:08,600 --> 00:54:12,290
footnote that says this thing is

00:54:10,670 --> 00:54:14,390
available but most likely your

00:54:12,290 --> 00:54:16,160
application will not benefit from its

00:54:14,390 --> 00:54:17,780
there because there are certain corner

00:54:16,160 --> 00:54:20,030
cases where this is used for such as one

00:54:17,780 --> 00:54:22,700
that Scott mentioned testing and similar

00:54:20,030 --> 00:54:26,720
similar use cases so in the case let's

00:54:22,700 --> 00:54:28,940
say you have multiple battery packs

00:54:26,720 --> 00:54:30,710
where there may actually be multiple

00:54:28,940 --> 00:54:33,860
types of battery packs that are all can

00:54:30,710 --> 00:54:35,870
plus is that still you would cover all

00:54:33,860 --> 00:54:38,480
the potential ones that got plugged in

00:54:35,870 --> 00:54:42,830
as a static case and then or would you

00:54:38,480 --> 00:54:44,600
want that as a dynamic service so

00:54:42,830 --> 00:54:48,110
actually they are like different options

00:54:44,600 --> 00:54:50,300
available yes in order to answer this

00:54:48,110 --> 00:54:52,850
question comprehensively I have to ask

00:54:50,300 --> 00:54:54,370
you a lot of all of our questions I'm

00:54:52,850 --> 00:54:56,690
not going to do that right now but

00:54:54,370 --> 00:54:58,490
briefly both approaches are possible

00:54:56,690 --> 00:55:00,410
both approaches make sense depending on

00:54:58,490 --> 00:55:02,450
the constraints of your application and

00:55:00,410 --> 00:55:04,130
I think that the note that says you

00:55:02,450 --> 00:55:05,870
shouldn't use plug-and-play in your

00:55:04,130 --> 00:55:08,120
system you saying of a system level note

00:55:05,870 --> 00:55:11,510
it's not that it's an inherently broken

00:55:08,120 --> 00:55:13,040
protocol or conjurus it's just as a note

00:55:11,510 --> 00:55:15,110
you probably shouldn't be swapping node

00:55:13,040 --> 00:55:16,670
IDs while you're flying around it's

00:55:15,110 --> 00:55:18,050
similar to how embedded systems you

00:55:16,670 --> 00:55:20,360
shouldn't be allocating memory normally

00:55:18,050 --> 00:55:21,860
when you're running you but you have

00:55:20,360 --> 00:55:23,240
this exception sometimes where you just

00:55:21,860 --> 00:55:24,680
Halleck ate one chunk at the beginning

00:55:23,240 --> 00:55:27,110
and now you're initialized and now

00:55:24,680 --> 00:55:28,700
you're running statically it you can you

00:55:27,110 --> 00:55:30,650
can imagine doing a system like that

00:55:28,700 --> 00:55:32,090
where in start off I'm allowed to

00:55:30,650 --> 00:55:34,280
plug-and-play I'm allowed to allocate

00:55:32,090 --> 00:55:35,690
the stuff and then we get into the we're

00:55:34,280 --> 00:55:37,550
configured mode I'm not allowed to do

00:55:35,690 --> 00:55:40,070
that anymore yeah I mean I could have

00:55:37,550 --> 00:55:42,080
another scenario would be a if you

00:55:40,070 --> 00:55:44,690
picked up a payload and then wanted to

00:55:42,080 --> 00:55:48,290
have that as part of the system you

00:55:44,690 --> 00:55:57,290
might want to be dynamic in that kind of

00:55:48,290 --> 00:56:00,340
situation as well anyone else we got one

00:55:57,290 --> 00:56:00,340
down here here

00:56:05,259 --> 00:56:10,220
can you repeat the question please

00:56:07,249 --> 00:56:14,359
yeah so during the trans the period of

00:56:10,220 --> 00:56:15,740
transition from v-0 to v1 Peaks for the

00:56:14,359 --> 00:56:19,940
question is whether Peaks for will

00:56:15,740 --> 00:56:21,559
support both particles I think that it

00:56:19,940 --> 00:56:24,380
would be feasible to support this

00:56:21,559 --> 00:56:26,359
through a compile-time switch I don't

00:56:24,380 --> 00:56:28,569
think that it makes sense to build both

00:56:26,359 --> 00:56:31,400
our versions of the particle because the

00:56:28,569 --> 00:56:34,849
footprint the ROM footprint would be

00:56:31,400 --> 00:56:37,369
probably prohibitive but again this is

00:56:34,849 --> 00:56:40,869
something that can be discussed I think

00:56:37,369 --> 00:56:42,769
you again at this point costs like

00:56:40,869 --> 00:56:46,359
specifically in the case of Peaks so

00:56:42,769 --> 00:56:46,359
it's like 20k or something

00:56:47,109 --> 00:56:59,280
anyone else perfect thank you guys

00:56:52,690 --> 00:56:59,280
[Applause]

00:57:04,650 --> 00:57:06,710

YouTube URL: https://www.youtube.com/watch?v=MBtROivYPik


