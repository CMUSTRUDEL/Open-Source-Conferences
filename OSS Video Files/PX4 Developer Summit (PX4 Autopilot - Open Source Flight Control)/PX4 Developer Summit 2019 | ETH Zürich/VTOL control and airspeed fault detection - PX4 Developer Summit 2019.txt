Title: VTOL control and airspeed fault detection - PX4 Developer Summit 2019
Publication date: 2019-07-03
Playlist: PX4 Developer Summit 2019 | ETH ZÃ¼rich
Description: 
	Roman Bapst
Flight control engineer, Auterion
PX4 Maintainer

Discussion of work that has been going on around VTOL during the last year:
- rate controller architecture change
- weathervane
- tailsitter transition improvements (Xvert)

Airspeed fault detection:
- support multiple airspeed sensors
- airspeed module which detects airspeed faults and generates a "best" airspeed
estimate to be used by controllers"
Captions: 
	00:00:13,640 --> 00:00:18,450
okay welcome everybody to my

00:00:15,780 --> 00:00:21,330
presentation as Ramona is said I'll be

00:00:18,450 --> 00:00:25,080
talking about veto control and airspeeds

00:00:21,330 --> 00:00:27,000
fault detection so I'm Roman I work for

00:00:25,080 --> 00:00:30,300
a Tyrian as a flight control engineer

00:00:27,000 --> 00:00:36,390
and I'm a somewhat regular contributor

00:00:30,300 --> 00:00:38,910
to upstream px4 okay I will do a quick

00:00:36,390 --> 00:00:40,590
introduction what Vito is why we are

00:00:38,910 --> 00:00:43,260
interested in it what we can do with it

00:00:40,590 --> 00:00:45,630
and also then I'll go ahead and have a

00:00:43,260 --> 00:00:49,440
look at the current Vito control

00:00:45,630 --> 00:00:51,360
architecture implemented in px4 then

00:00:49,440 --> 00:00:53,190
I'll also go and have a look at a few

00:00:51,360 --> 00:00:55,830
steps that we can do in the future to

00:00:53,190 --> 00:00:58,350
improve things and then the second part

00:00:55,830 --> 00:01:00,360
of the presentation is going to be a

00:00:58,350 --> 00:01:01,890
slightly different topic but some are

00:01:00,360 --> 00:01:10,710
related it's about air speed fault

00:01:01,890 --> 00:01:13,920
detection okay all right so this got

00:01:10,710 --> 00:01:16,829
messed up this is the introduction so

00:01:13,920 --> 00:01:19,970
what does VTOL actually means so VTOL is

00:01:16,829 --> 00:01:25,650
actually a german word and means VTOL

00:01:19,970 --> 00:01:27,540
which means how nice well not really it

00:01:25,650 --> 00:01:30,810
actually stands for vertical takeoff and

00:01:27,540 --> 00:01:32,670
landing as you better know and what it

00:01:30,810 --> 00:01:36,630
really is in the easiest case is just a

00:01:32,670 --> 00:01:38,909
plane with a quadcopter patch to it so

00:01:36,630 --> 00:01:41,880
that you have something that looks like

00:01:38,909 --> 00:01:47,970
this over there so really it is a plane

00:01:41,880 --> 00:01:50,520
that can hover why do we do these kind

00:01:47,970 --> 00:01:52,650
of things so if we have a look at quad

00:01:50,520 --> 00:01:55,470
copters what we like about them is their

00:01:52,650 --> 00:01:58,409
ability to hover we like them to carry

00:01:55,470 --> 00:02:00,000
our cameras to pictures and also very

00:01:58,409 --> 00:02:02,729
big advantages that they can pretty much

00:02:00,000 --> 00:02:05,960
land anywhere you don't need need long

00:02:02,729 --> 00:02:08,580
runways like for traditional fixed wings

00:02:05,960 --> 00:02:10,349
but also on the other hand people want

00:02:08,580 --> 00:02:14,489
to fly more efficiently they want to do

00:02:10,349 --> 00:02:16,560
long missions they want to map big areas

00:02:14,489 --> 00:02:18,750
so they want a long flight time they

00:02:16,560 --> 00:02:21,749
also want to be fast they want to have

00:02:18,750 --> 00:02:24,180
more payload so definitely we would want

00:02:21,749 --> 00:02:26,670
to have the advantages of pure fixed

00:02:24,180 --> 00:02:28,710
wings and if you combine those two your

00:02:26,670 --> 00:02:31,410
end up with a veto so it makes sense to

00:02:28,710 --> 00:02:34,400
do these things also I'm pretty sure

00:02:31,410 --> 00:02:36,990
most of you are aware of these projects

00:02:34,400 --> 00:02:38,190
big companies are doing it I think you

00:02:36,990 --> 00:02:41,610
have a feeling that everybody nowadays

00:02:38,190 --> 00:02:44,340
sort of does veto so if they do it it's

00:02:41,610 --> 00:02:48,120
probably a good thing okay I have to go

00:02:44,340 --> 00:02:49,980
back now I quickly want to have a look

00:02:48,120 --> 00:02:51,150
at a few different veto types that we

00:02:49,980 --> 00:02:53,430
support in px4

00:02:51,150 --> 00:02:55,410
my goal with this slide is actually not

00:02:53,430 --> 00:02:57,810
to convince you that any of these types

00:02:55,410 --> 00:03:01,500
are the best or you should use this one

00:02:57,810 --> 00:03:03,180
or that one if you look at the industry

00:03:01,500 --> 00:03:05,040
you see that there are different

00:03:03,180 --> 00:03:06,630
companies using different types and it

00:03:05,040 --> 00:03:09,660
really depends on the mission so there's

00:03:06,630 --> 00:03:12,600
not the best thing it always it will

00:03:09,660 --> 00:03:14,670
always be a compromise let's start with

00:03:12,600 --> 00:03:16,260
tail fitters on the very left that's

00:03:14,670 --> 00:03:19,590
probably the most popular example that

00:03:16,260 --> 00:03:22,110
we have wing draw the tail sitter

00:03:19,590 --> 00:03:24,780
achieves the transition by not tilting

00:03:22,110 --> 00:03:26,910
any motors or having any propulsion

00:03:24,780 --> 00:03:29,040
system that only works in fixed-wing but

00:03:26,910 --> 00:03:32,600
it actually just tells the whole body

00:03:29,040 --> 00:03:35,489
and completes a transition like this

00:03:32,600 --> 00:03:40,110
this makes it a bit more difficult to

00:03:35,489 --> 00:03:41,820
control in terms of flight control you

00:03:40,110 --> 00:03:44,220
have to go through a 90 degrees pitch

00:03:41,820 --> 00:03:45,840
transition probably a Euler angle

00:03:44,220 --> 00:03:49,290
controller will not work anymore unless

00:03:45,840 --> 00:03:52,500
you handle the corner cases especially

00:03:49,290 --> 00:03:54,570
this type is quite challenging to fly in

00:03:52,500 --> 00:03:58,140
wind that's probably wing truckin can

00:03:54,570 --> 00:04:00,140
tell you but on the other hand it has

00:03:58,140 --> 00:04:04,290
disadvantages right I mean it has pretty

00:04:00,140 --> 00:04:07,560
like it has less actuators it's very

00:04:04,290 --> 00:04:09,209
very simple very complex so the

00:04:07,560 --> 00:04:12,690
simplicity is really a strong point of

00:04:09,209 --> 00:04:14,940
this type we also support tiltrotors you

00:04:12,690 --> 00:04:17,760
can see an example there in the middle

00:04:14,940 --> 00:04:20,640
those are generally easier to control I

00:04:17,760 --> 00:04:22,740
would say they're mechanical a bit more

00:04:20,640 --> 00:04:26,450
complex because they tilt the motors to

00:04:22,740 --> 00:04:29,010
achieve the transition to forward flight

00:04:26,450 --> 00:04:30,419
that can also be a bit challenging as

00:04:29,010 --> 00:04:35,270
we'll see later we actually do change

00:04:30,419 --> 00:04:37,410
the mixture geometry and we can get

00:04:35,270 --> 00:04:39,240
coupling effects when we do the

00:04:37,410 --> 00:04:39,910
transition so there is some kind of

00:04:39,240 --> 00:04:41,590
handling when you

00:04:39,910 --> 00:04:45,190
to do their and I'll tell you a bit more

00:04:41,590 --> 00:04:47,820
about this later then the third type

00:04:45,190 --> 00:04:50,320
quad plain or a case standard VTOL

00:04:47,820 --> 00:04:52,650
that's basically the just a brute-force

00:04:50,320 --> 00:04:54,720
approach you have a plane and you add

00:04:52,650 --> 00:04:58,360
multicopter motors to it and you have a

00:04:54,720 --> 00:04:59,560
basically two different systems from my

00:04:58,360 --> 00:05:01,480
point of view it's definitely the most

00:04:59,560 --> 00:05:05,530
easy thing to control and I think many

00:05:01,480 --> 00:05:07,990
companies also use it because of this it

00:05:05,530 --> 00:05:10,270
has many actuators that can be a pro on

00:05:07,990 --> 00:05:13,300
the con I mean it's it's more weight it

00:05:10,270 --> 00:05:15,250
also gives you redundancy and it kind of

00:05:13,300 --> 00:05:16,840
it's tempting to put a fuel engine in

00:05:15,250 --> 00:05:25,290
there and still have your separate court

00:05:16,840 --> 00:05:28,630
motors okay let's have a look at the

00:05:25,290 --> 00:05:31,570
detail control architectural high level

00:05:28,630 --> 00:05:34,270
that is in px4 probably you've seen from

00:05:31,570 --> 00:05:37,180
the Hubble presentation that px4 is very

00:05:34,270 --> 00:05:40,330
modular and we try to put function

00:05:37,180 --> 00:05:43,530
functional stuff into modules for Vito

00:05:40,330 --> 00:05:46,360
the special thing is that you have

00:05:43,530 --> 00:05:48,430
multicopter and fixed-wing modules

00:05:46,360 --> 00:05:50,050
running at the same time so if you go to

00:05:48,430 --> 00:05:52,480
the top left you see that we have a

00:05:50,050 --> 00:05:55,200
multi copter position controller and a

00:05:52,480 --> 00:05:57,610
fixed-wing position controller running

00:05:55,200 --> 00:05:59,290
the special thing about VTOL is that

00:05:57,610 --> 00:06:00,970
they don't publish to the standard

00:05:59,290 --> 00:06:02,740
attitude setpoint topics that you

00:06:00,970 --> 00:06:04,990
usually see but they publish to virtual

00:06:02,740 --> 00:06:07,930
topics that means it's actually not the

00:06:04,990 --> 00:06:10,330
final topic but this is consumed by a

00:06:07,930 --> 00:06:13,030
module that's called the Vito attitude

00:06:10,330 --> 00:06:14,980
controller the vehicle little attitude

00:06:13,030 --> 00:06:16,690
controller is actually not really an

00:06:14,980 --> 00:06:18,970
attitude controller it's more like Vito

00:06:16,690 --> 00:06:21,060
logic that basically decides in which

00:06:18,970 --> 00:06:23,800
situation to use which set point or

00:06:21,060 --> 00:06:25,690
maybe generate an entirely different set

00:06:23,800 --> 00:06:28,660
point see what you can see at the bottom

00:06:25,690 --> 00:06:30,340
there is a attitudes vector or setpoint

00:06:28,660 --> 00:06:33,100
coming out of there which is then

00:06:30,340 --> 00:06:34,720
consumed by again a multicopter attitude

00:06:33,100 --> 00:06:37,780
controller and the fixed-wing attitude

00:06:34,720 --> 00:06:40,419
controller both of those they run in

00:06:37,780 --> 00:06:43,330
parallel and the output a rate set point

00:06:40,419 --> 00:06:46,300
the desired rate space on the attitude

00:06:43,330 --> 00:06:48,100
error now we have a switch there that

00:06:46,300 --> 00:06:50,680
basically decides in every situation

00:06:48,100 --> 00:06:52,210
which rates that point to use in hover

00:06:50,680 --> 00:06:53,660
you would definitely use the one for the

00:06:52,210 --> 00:06:55,910
attitude controller

00:06:53,660 --> 00:06:58,400
the multicopter one and vice versa and

00:06:55,910 --> 00:07:03,020
fixed-wing and in transition you could

00:06:58,400 --> 00:07:04,550
do something in between but the the

00:07:03,020 --> 00:07:06,650
important thing is that this rate set

00:07:04,550 --> 00:07:08,360
point goes to both multicopter and

00:07:06,650 --> 00:07:11,330
fixed-wing rate controls which are two

00:07:08,360 --> 00:07:15,080
separate modules running and there is a

00:07:11,330 --> 00:07:17,270
clear distinct mapping for actuators to

00:07:15,080 --> 00:07:18,800
these rate controls so the multicopter

00:07:17,270 --> 00:07:20,600
rate controller controls the motors in

00:07:18,800 --> 00:07:21,950
hover and the fixed-wing rate

00:07:20,600 --> 00:07:23,660
controllers controls the control

00:07:21,950 --> 00:07:28,370
surfaces and you can run these actually

00:07:23,660 --> 00:07:30,770
in parallel lastly you can see the

00:07:28,370 --> 00:07:32,510
virtual controls the output of the

00:07:30,770 --> 00:07:34,280
controllers you reroute them again

00:07:32,510 --> 00:07:36,620
through the veto module as virtual

00:07:34,280 --> 00:07:42,380
control topics which is mostly done due

00:07:36,620 --> 00:07:45,200
to corner case handling ok the

00:07:42,380 --> 00:07:46,760
advantages of this structure is that we

00:07:45,200 --> 00:07:49,070
have one rate controller that always

00:07:46,760 --> 00:07:51,770
controls the same set of actuators we

00:07:49,070 --> 00:07:53,960
can take advantage of that by for

00:07:51,770 --> 00:07:55,700
example using the multicopter rate

00:07:53,960 --> 00:07:58,580
control in fixed-wing mode should you

00:07:55,700 --> 00:08:01,130
for example have a control surfaces

00:07:58,580 --> 00:08:03,950
failure or you detect a stall or

00:08:01,130 --> 00:08:06,710
whatever you can use the rate controller

00:08:03,950 --> 00:08:09,860
for that also you can use fixed-wing

00:08:06,710 --> 00:08:13,670
control surfaces to aid controlling in

00:08:09,860 --> 00:08:15,380
strong winds when you're hovering the

00:08:13,670 --> 00:08:18,200
challenging part about this is that we

00:08:15,380 --> 00:08:21,290
basically create a mezzo system so we

00:08:18,200 --> 00:08:24,200
have multiple inputs for a single output

00:08:21,290 --> 00:08:26,990
take for example the the roll axis you

00:08:24,200 --> 00:08:29,180
now have motors using differential

00:08:26,990 --> 00:08:30,800
thrust and control surfaces that try to

00:08:29,180 --> 00:08:33,289
do the same thing and it's not

00:08:30,800 --> 00:08:35,560
straightforward anymore to just tune

00:08:33,289 --> 00:08:35,560
them

00:08:39,590 --> 00:08:45,320
okay I want to have a look a bit of

00:08:42,380 --> 00:08:47,750
future work that I think would be

00:08:45,320 --> 00:08:50,360
worthwhile in the future - to have a

00:08:47,750 --> 00:08:52,790
look at I think it would be good moving

00:08:50,360 --> 00:08:55,340
towards control allocation what does

00:08:52,790 --> 00:08:57,500
that mean I'm pretty sure most of you

00:08:55,340 --> 00:09:00,920
are familiar with our mixing system that

00:08:57,500 --> 00:09:04,460
we use in px4 so the controller is I'm

00:09:00,920 --> 00:09:07,300
just using a name for this but it's rate

00:09:04,460 --> 00:09:09,650
controller that I mean they output a a

00:09:07,300 --> 00:09:15,680
dimensionless torque and thrust demands

00:09:09,650 --> 00:09:17,720
for each axis these signals are consumed

00:09:15,680 --> 00:09:21,190
by the mixer and what the mixer does is

00:09:17,720 --> 00:09:23,630
basically translates this to specific

00:09:21,190 --> 00:09:26,660
actuator signals so depending on if you

00:09:23,630 --> 00:09:28,700
have a quad and octocopter it basically

00:09:26,660 --> 00:09:30,740
decides what motor does what for the

00:09:28,700 --> 00:09:33,110
specific movements the controller wants

00:09:30,740 --> 00:09:35,050
to do and the problem that we have right

00:09:33,110 --> 00:09:41,240
now that this mapping is actually fixed

00:09:35,050 --> 00:09:42,770
so if we have fun things like this which

00:09:41,240 --> 00:09:44,420
actually tilt their motors during a

00:09:42,770 --> 00:09:47,330
transition this mapping is actually not

00:09:44,420 --> 00:09:49,010
correct anymore so the vehicle thinks

00:09:47,330 --> 00:09:51,770
it's still a quadcopter but actually

00:09:49,010 --> 00:09:54,050
you've tilted the motors and you start

00:09:51,770 --> 00:09:56,900
to see coupling effects so the vehicle

00:09:54,050 --> 00:09:59,210
tries to correct for your role sorry and

00:09:56,900 --> 00:10:03,070
at the same time this couples into your

00:09:59,210 --> 00:10:05,000
and it starts to do weird stuff

00:10:03,070 --> 00:10:06,470
currently the way we do is is we

00:10:05,000 --> 00:10:08,120
actually have logic inside the

00:10:06,470 --> 00:10:13,000
controllers that kind of try to take

00:10:08,120 --> 00:10:16,610
care of this but it could be better

00:10:13,000 --> 00:10:18,650
that's why it would be good to at some

00:10:16,610 --> 00:10:21,320
point move that logic out of the

00:10:18,650 --> 00:10:23,060
controller's and push it back into the

00:10:21,320 --> 00:10:26,600
mixer that would be rather than a

00:10:23,060 --> 00:10:28,040
control allocator it would enhance our

00:10:26,600 --> 00:10:32,480
mixers to do with this kind of control

00:10:28,040 --> 00:10:34,310
allocation it would help us to keep the

00:10:32,480 --> 00:10:36,350
advantage that we that our controllers

00:10:34,310 --> 00:10:39,709
remain independent of the specific

00:10:36,350 --> 00:10:42,320
vehicle configuration which then in turn

00:10:39,709 --> 00:10:44,660
also allows more precise control during

00:10:42,320 --> 00:10:47,839
transitions as I said it could eliminate

00:10:44,660 --> 00:10:51,570
the coupling and it would also enable in

00:10:47,839 --> 00:10:53,790
the future fault tolerant control

00:10:51,570 --> 00:10:55,470
by that I mean vehicles that are over

00:10:53,790 --> 00:10:58,320
actuated and that it can actually take

00:10:55,470 --> 00:11:03,029
advantage of reallocating the the

00:10:58,320 --> 00:11:12,899
allocation in case some some actuator

00:11:03,029 --> 00:11:15,630
feels good lastly I want to save it

00:11:12,899 --> 00:11:17,610
something about documentation we

00:11:15,630 --> 00:11:19,529
basically have two parts here there's

00:11:17,610 --> 00:11:22,709
some tuning information for VTOL on the

00:11:19,529 --> 00:11:24,360
DEF CON the on the px4 user guide you

00:11:22,709 --> 00:11:27,720
can search for beetle and the user guide

00:11:24,360 --> 00:11:30,269
and you'll get there the most important

00:11:27,720 --> 00:11:33,720
features for VTOL are documented there

00:11:30,269 --> 00:11:35,730
such as weather vane we also have

00:11:33,720 --> 00:11:39,810
airframe references for vetoes that

00:11:35,730 --> 00:11:41,339
we've built there might not be always up

00:11:39,810 --> 00:11:44,459
to date but it's a good starting point

00:11:41,339 --> 00:11:50,910
and we have we generally need more dogs

00:11:44,459 --> 00:11:52,940
so I guess that's always true okay I

00:11:50,910 --> 00:11:56,370
want to move to the second part now

00:11:52,940 --> 00:12:01,310
which is the airspeed fault detection

00:11:56,370 --> 00:12:03,810
and handling so I'm going to start by

00:12:01,310 --> 00:12:10,589
explaining why we actually use airspeed

00:12:03,810 --> 00:12:13,170
sensors for fixed-wing planes so

00:12:10,589 --> 00:12:14,880
definitely one thing we want to do is we

00:12:13,170 --> 00:12:19,709
want to maximize our flight efficiency

00:12:14,880 --> 00:12:21,510
and planes tend to fly at an airspeed or

00:12:19,709 --> 00:12:23,339
tend to be most efficient at a specific

00:12:21,510 --> 00:12:25,380
airspeed so we want to know what that

00:12:23,339 --> 00:12:28,170
airspeed is and we want to control the

00:12:25,380 --> 00:12:30,870
plane to that airspeed but it's also a

00:12:28,170 --> 00:12:34,380
safety aspect so airplanes can stall as

00:12:30,870 --> 00:12:36,779
you know and if you fly them too fast

00:12:34,380 --> 00:12:39,240
and do maneuvers you can get structural

00:12:36,779 --> 00:12:40,470
damage so it's it's a safety aspect you

00:12:39,240 --> 00:12:43,470
want to know what what airspeed you're

00:12:40,470 --> 00:12:45,720
going it's also relevant for flight

00:12:43,470 --> 00:12:48,120
performance for example we use airspeed

00:12:45,720 --> 00:12:51,329
to to do gain scheduling or in other

00:12:48,120 --> 00:12:54,120
words to scale our signals of the

00:12:51,329 --> 00:12:56,100
controller's because we have a high

00:12:54,120 --> 00:12:58,230
dependency on airspeed the faster you go

00:12:56,100 --> 00:13:02,730
the less deflection you need to get to a

00:12:58,230 --> 00:13:05,280
certain torque lastly also for robustus

00:13:02,730 --> 00:13:08,550
we can actually make use of airspeed so

00:13:05,280 --> 00:13:12,090
we can limit attitude drift by fusing

00:13:08,550 --> 00:13:16,920
airspeed measurements into the EKF if we

00:13:12,090 --> 00:13:18,960
lose GPS okay now we know what we want

00:13:16,920 --> 00:13:21,810
to use it for but what are the problems

00:13:18,960 --> 00:13:23,040
with that so unlike the IMU which is

00:13:21,810 --> 00:13:25,050
kind of like inside the flight

00:13:23,040 --> 00:13:27,600
controller well-protected the airspeed

00:13:25,050 --> 00:13:29,100
sensor or the pitot tube is sticking

00:13:27,600 --> 00:13:33,690
outside and is therefore directly

00:13:29,100 --> 00:13:38,550
exposed to to the airflow and vulnerable

00:13:33,690 --> 00:13:42,720
to blockage so if this happens it's it's

00:13:38,550 --> 00:13:45,360
very critical because our controls

00:13:42,720 --> 00:13:47,180
systems rely on air speed and false

00:13:45,360 --> 00:13:50,820
airspeed data can actually lead to

00:13:47,180 --> 00:13:52,410
things like flight into terrain the

00:13:50,820 --> 00:13:54,300
controller trying to pitch down the nose

00:13:52,410 --> 00:13:58,940
to regain the airspeed but that doesn't

00:13:54,300 --> 00:14:01,080
happen and we might stall or over speed

00:13:58,940 --> 00:14:03,180
so we definitely want to be able to

00:14:01,080 --> 00:14:04,320
somehow detect these failures and and

00:14:03,180 --> 00:14:09,540
then do something

00:14:04,320 --> 00:14:12,930
appropriately good what do we have

00:14:09,540 --> 00:14:15,720
currently in px4 that does fall

00:14:12,930 --> 00:14:17,880
detection and handling so Paul

00:14:15,720 --> 00:14:21,950
riseborough did a first stab at

00:14:17,880 --> 00:14:25,170
implementing some basic checks it was PR

00:14:21,950 --> 00:14:28,760
10 7 3 3 that just went in a couple of

00:14:25,170 --> 00:14:28,760
months ago that's part of the release

00:14:29,270 --> 00:14:35,280
basically first of all basic checks were

00:14:32,460 --> 00:14:40,680
implemented so if there's data timeouts

00:14:35,280 --> 00:14:44,040
or stuff like that we also check EKF

00:14:40,680 --> 00:14:46,950
airspeed innovations for consistency I

00:14:44,040 --> 00:14:49,890
will explain later a bit more what these

00:14:46,950 --> 00:14:52,380
are and there is also a load factor

00:14:49,890 --> 00:14:54,270
consistency check right now in px4 that

00:14:52,380 --> 00:14:57,480
can be used to detect false airspeed

00:14:54,270 --> 00:15:01,400
data I want to quickly say something

00:14:57,480 --> 00:15:03,750
about that that might be interesting so

00:15:01,400 --> 00:15:06,930
the load factor of an airplane is

00:15:03,750 --> 00:15:09,180
basically you can imagine it as how many

00:15:06,930 --> 00:15:11,610
G's you pull or how heavy you feel in

00:15:09,180 --> 00:15:14,910
the seat of your airplane and there is a

00:15:11,610 --> 00:15:17,190
direct relation between the load factor

00:15:14,910 --> 00:15:18,630
and the stall airspeed of the plane so

00:15:17,190 --> 00:15:21,810
if you're in a

00:15:18,630 --> 00:15:24,600
earn at level altitude and you're in a

00:15:21,810 --> 00:15:27,060
60Â° Bank you're going to have a 2g load

00:15:24,600 --> 00:15:29,550
factor that means you'll have a

00:15:27,060 --> 00:15:31,140
increased stall speed so if your air

00:15:29,550 --> 00:15:33,120
speed sensor at that point tells you

00:15:31,140 --> 00:15:36,060
that you're below a certain value and

00:15:33,120 --> 00:15:37,770
you calculate the theoretical value with

00:15:36,060 --> 00:15:39,270
your load factor then you kind of know

00:15:37,770 --> 00:15:41,480
that something is probably wrong

00:15:39,270 --> 00:15:45,810
so this check is useful for detecting

00:15:41,480 --> 00:15:49,860
low airspeed readings so this is what we

00:15:45,810 --> 00:15:53,130
have currently now in px for now I'm

00:15:49,860 --> 00:15:54,690
gonna before I'm gonna show you what we

00:15:53,130 --> 00:15:56,910
want to do next I'm quickly going to

00:15:54,690 --> 00:16:00,390
tell you something about wind estimators

00:15:56,910 --> 00:16:03,840
so in px4 we have a wind estimation

00:16:00,390 --> 00:16:06,510
library which is a library that enables

00:16:03,840 --> 00:16:08,670
you to estimate wind in north and east

00:16:06,510 --> 00:16:11,940
direction and an airspeed scale factor

00:16:08,670 --> 00:16:15,840
by providing true airspeed measurements

00:16:11,940 --> 00:16:17,190
and a zero side slip assumption I'm

00:16:15,840 --> 00:16:20,970
going to explain both of them really

00:16:17,190 --> 00:16:23,190
quick if you can see this triangle here

00:16:20,970 --> 00:16:25,560
on the very left you see the green

00:16:23,190 --> 00:16:27,830
vector is your ground speed vector it's

00:16:25,560 --> 00:16:31,380
basically the direction the plane is is

00:16:27,830 --> 00:16:33,860
moving then you have the blue vector at

00:16:31,380 --> 00:16:36,780
the top which is the wind vector

00:16:33,860 --> 00:16:39,360
relative to the earth and the yellow

00:16:36,780 --> 00:16:41,850
vector is then basically the air data

00:16:39,360 --> 00:16:45,210
vector or the combination it's what the

00:16:41,850 --> 00:16:47,100
airplane really sees we can measure the

00:16:45,210 --> 00:16:50,400
yellow vector with an airspeed sensor

00:16:47,100 --> 00:16:52,800
and we know our ground speed and so we

00:16:50,400 --> 00:16:56,400
can basically reconstruct the wind from

00:16:52,800 --> 00:16:57,960
that the second measurement we can use

00:16:56,400 --> 00:16:59,940
is this so-called zero sideslip

00:16:57,960 --> 00:17:03,150
assumption which can be illustrated

00:16:59,940 --> 00:17:06,589
using the second picture so you can see

00:17:03,150 --> 00:17:09,329
this plane there it's it's it's flying

00:17:06,589 --> 00:17:11,189
along this horizontal line the thick

00:17:09,329 --> 00:17:13,709
horizontal line but you can see that

00:17:11,189 --> 00:17:15,930
it's actually looking somewhere else

00:17:13,709 --> 00:17:17,430
like it's heading is different than the

00:17:15,930 --> 00:17:20,880
direction and that's because it has

00:17:17,430 --> 00:17:23,189
strong winds from the left and you can

00:17:20,880 --> 00:17:25,260
use this information or the natural

00:17:23,189 --> 00:17:28,500
tendency of planes to turn into the

00:17:25,260 --> 00:17:30,930
relative wind even without knowing its

00:17:28,500 --> 00:17:32,660
airspeed to reconstruct a a wind

00:17:30,930 --> 00:17:35,010
estimate

00:17:32,660 --> 00:17:40,320
that's how it works and let's see how we

00:17:35,010 --> 00:17:43,070
can actually make use of this now this

00:17:40,320 --> 00:17:45,390
is the architecture that we're currently

00:17:43,070 --> 00:17:47,970
experimenting for air speed fault

00:17:45,390 --> 00:17:51,570
detection and handling as you can see

00:17:47,970 --> 00:17:53,309
already in the diagram one thing that we

00:17:51,570 --> 00:17:56,820
can do is basically plug in multiple

00:17:53,309 --> 00:17:58,350
airspeed sensors that alone doesn't help

00:17:56,820 --> 00:18:00,809
if you don't know which sensor is

00:17:58,350 --> 00:18:03,419
actually the faulty one so we need kind

00:18:00,809 --> 00:18:06,179
of a way to figure out which sensor is

00:18:03,419 --> 00:18:08,130
is giving us bad data or they both

00:18:06,179 --> 00:18:11,669
giving us bad data should we even use

00:18:08,130 --> 00:18:14,790
them so how we do this is that we

00:18:11,669 --> 00:18:17,820
basically feed data from each airspeed

00:18:14,790 --> 00:18:20,669
sensor and that can be any number to a

00:18:17,820 --> 00:18:22,140
wind estimator instance now from the

00:18:20,669 --> 00:18:24,480
wind estimator instance we're actually

00:18:22,140 --> 00:18:26,460
not really interested that much in its

00:18:24,480 --> 00:18:28,470
output in the wind but we are actually

00:18:26,460 --> 00:18:31,410
more interested in the true airspeed

00:18:28,470 --> 00:18:35,220
innovations let me quickly explain for

00:18:31,410 --> 00:18:37,500
the few of you who maybe not be not know

00:18:35,220 --> 00:18:40,110
what that is the airspeed innovation is

00:18:37,500 --> 00:18:41,970
basically the difference between the

00:18:40,110 --> 00:18:45,720
airspeed sample that comes from the

00:18:41,970 --> 00:18:48,929
sensor and what the estimator internally

00:18:45,720 --> 00:18:52,230
thinks the the airspeed should be so

00:18:48,929 --> 00:18:54,270
it's really it gives you it gives you an

00:18:52,230 --> 00:18:56,429
idea of how consistent the airspeed data

00:18:54,270 --> 00:18:58,740
is normally in a perfect world you want

00:18:56,429 --> 00:19:00,419
to see there's the innovations around

00:18:58,740 --> 00:19:01,679
zero what a bit of noise then you know

00:19:00,419 --> 00:19:05,130
everything is fine everything is

00:19:01,679 --> 00:19:06,990
consistent so we have two of those in

00:19:05,130 --> 00:19:09,299
systems running on different airspeed

00:19:06,990 --> 00:19:11,070
sensors and then also important we have

00:19:09,299 --> 00:19:12,950
one last instance that actually does not

00:19:11,070 --> 00:19:15,419
consume any air speed but that just

00:19:12,950 --> 00:19:18,150
works based on the zero sidestep

00:19:15,419 --> 00:19:23,130
assumption and it's going to be clear

00:19:18,150 --> 00:19:25,470
soon why we do that all these all this

00:19:23,130 --> 00:19:28,410
data goes into an airspeed validator and

00:19:25,470 --> 00:19:31,530
selector which implements innovation

00:19:28,410 --> 00:19:34,590
checks so it checks the innovation sees

00:19:31,530 --> 00:19:36,150
if some are small some are large and

00:19:34,590 --> 00:19:38,400
then basically decides which one to

00:19:36,150 --> 00:19:40,710
trust more and it also implements the

00:19:38,400 --> 00:19:43,020
previously described load factor checks

00:19:40,710 --> 00:19:45,270
as well as data consistency checks and

00:19:43,020 --> 00:19:45,810
at the end it spits out an airs and

00:19:45,270 --> 00:19:48,930
airspeed

00:19:45,810 --> 00:19:51,450
validated which can either be the

00:19:48,930 --> 00:19:55,040
airspeed data from sensor one from

00:19:51,450 --> 00:19:57,960
sensor two or it can actually be an an

00:19:55,040 --> 00:19:59,820
airspeed reconstructed from ground speed

00:19:57,960 --> 00:20:01,530
and wind estimated by the third

00:19:59,820 --> 00:20:02,190
estimator that is not dependent on any

00:20:01,530 --> 00:20:04,440
pedo

00:20:02,190 --> 00:20:07,920
or in the worst case it can just tell

00:20:04,440 --> 00:20:09,930
you I don't know I am Not sure my data

00:20:07,920 --> 00:20:11,940
is now consistent don't use airspeed and

00:20:09,930 --> 00:20:13,680
it will then inform the controllers not

00:20:11,940 --> 00:20:19,680
to use airspeed and fall back to a

00:20:13,680 --> 00:20:24,120
different mode okay I want to show you

00:20:19,680 --> 00:20:26,580
three simulation examples how this can

00:20:24,120 --> 00:20:28,050
work so in this example I'm going to

00:20:26,580 --> 00:20:31,230
show you what happens if you have an

00:20:28,050 --> 00:20:33,120
excessive reading on one sensor this is

00:20:31,230 --> 00:20:37,770
how it looked like you'd have airspeed 1

00:20:33,120 --> 00:20:40,290
airspeed 2 on this right initially they

00:20:37,770 --> 00:20:42,870
both show 24 meters per second at some

00:20:40,290 --> 00:20:47,700
point there is a step and obviously

00:20:42,870 --> 00:20:49,260
airspeed 1 is is garbage how would you

00:20:47,700 --> 00:20:51,060
see this reflected you would see it

00:20:49,260 --> 00:20:53,700
directly reflected in the innovations

00:20:51,060 --> 00:20:56,190
while there is a huge offset in

00:20:53,700 --> 00:20:58,790
innovations of the first wind estimator

00:20:56,190 --> 00:21:01,620
the second wind estimator is happily

00:20:58,790 --> 00:21:03,540
kind of like you know mean zero with a

00:21:01,620 --> 00:21:07,740
bit of noise what you usually want to

00:21:03,540 --> 00:21:10,620
see then the system what does the system

00:21:07,740 --> 00:21:13,050
do so previously top left you can see

00:21:10,620 --> 00:21:15,390
that's the selected index 0 is for

00:21:13,050 --> 00:21:18,300
airspeed 1 so it didn't see any problem

00:21:15,390 --> 00:21:20,280
with that it used the first one but then

00:21:18,300 --> 00:21:22,140
after a couple of seconds after the

00:21:20,280 --> 00:21:24,960
innovation screw you see it's switching

00:21:22,140 --> 00:21:28,260
to the index 1 which now means that it's

00:21:24,960 --> 00:21:30,180
actually using the airspeed sensor 1 you

00:21:28,260 --> 00:21:33,330
can also see it very flex it in the

00:21:30,180 --> 00:21:36,420
airspeed validated bottom right which

00:21:33,330 --> 00:21:38,010
basically reveals a small time span

00:21:36,420 --> 00:21:40,800
where the airspeed is actually wrong

00:21:38,010 --> 00:21:43,260
that's the time it needs for detecting

00:21:40,800 --> 00:21:47,900
the fault and then soon after it jumps

00:21:43,260 --> 00:21:47,900
back to the to the previous airspeed I

00:21:47,960 --> 00:21:55,770
want to also show you partial blockage

00:21:50,520 --> 00:21:57,780
of both sensors so same situation but

00:21:55,770 --> 00:22:00,440
right now we have a too low airspeed and

00:21:57,780 --> 00:22:00,440
even on both

00:22:01,020 --> 00:22:07,410
you will see this reflected in both

00:22:03,560 --> 00:22:08,880
innovations the reason why you actually

00:22:07,410 --> 00:22:12,870
see it recovering is because the wind

00:22:08,880 --> 00:22:14,940
estimator does a reset so it's not yeah

00:22:12,870 --> 00:22:16,880
it's not consistent anymore after but

00:22:14,940 --> 00:22:19,590
you've already switched by that time so

00:22:16,880 --> 00:22:22,350
you can see that the selected index in

00:22:19,590 --> 00:22:26,280
that in that case goes from 0 to minus 1

00:22:22,350 --> 00:22:29,820
which is what I explained before it will

00:22:26,280 --> 00:22:31,680
use the ground speed combined with the

00:22:29,820 --> 00:22:33,930
wind estimated from the other wind

00:22:31,680 --> 00:22:36,090
estimator if it's data is consistent and

00:22:33,930 --> 00:22:37,950
then output that and you can see that

00:22:36,090 --> 00:22:42,300
it's actually recovering to more or less

00:22:37,950 --> 00:22:44,190
the value it had before last example I

00:22:42,300 --> 00:22:47,340
want to show gradual blockage of both

00:22:44,190 --> 00:22:50,070
sensors it may not always be that

00:22:47,340 --> 00:22:53,100
obvious that the the sensors are blocked

00:22:50,070 --> 00:22:57,900
like we've seen before but even in that

00:22:53,100 --> 00:22:59,790
case it should still work depending on

00:22:57,900 --> 00:23:01,710
how well you have it tuned as well you

00:22:59,790 --> 00:23:04,860
can see that here at some point air

00:23:01,710 --> 00:23:06,810
speeds just gradually deteriorate but

00:23:04,860 --> 00:23:16,250
you will still see it reflected in the

00:23:06,810 --> 00:23:20,160
innovations and you can take action yes

00:23:16,250 --> 00:23:22,470
I also want to highlight that you can

00:23:20,160 --> 00:23:25,080
definitely not rely only on these checks

00:23:22,470 --> 00:23:27,780
they're safe they're definitely Corin

00:23:25,080 --> 00:23:29,780
cases where this will not work or maybe

00:23:27,780 --> 00:23:32,520
you're going to be too late in detecting

00:23:29,780 --> 00:23:34,950
that their speed is faulty I think

00:23:32,520 --> 00:23:37,170
eventually what will make a good air

00:23:34,950 --> 00:23:39,390
speed fault detection is trying to use a

00:23:37,170 --> 00:23:43,970
lot of these checks combine them with

00:23:39,390 --> 00:23:47,250
each other and in the worst case maybe

00:23:43,970 --> 00:23:49,770
switch earlier to not using air speed

00:23:47,250 --> 00:23:52,170
than too late because we know we can fly

00:23:49,770 --> 00:23:54,480
without air speed if we if we have to

00:23:52,170 --> 00:23:56,460
but we should definitely not fly too

00:23:54,480 --> 00:24:03,570
long on an air speed that might not be

00:23:56,460 --> 00:24:05,640
working ok lastly I would like to say

00:24:03,570 --> 00:24:07,560
that we're going to test fly this

00:24:05,640 --> 00:24:11,040
probably next week on a real vehicle

00:24:07,560 --> 00:24:12,390
with two air speed sensors I also want

00:24:11,040 --> 00:24:12,930
to mention that this can of course be

00:24:12,390 --> 00:24:15,450
extended

00:24:12,930 --> 00:24:17,430
to any number of airspeed sensors and it

00:24:15,450 --> 00:24:19,860
will also work for only one air speed

00:24:17,430 --> 00:24:23,370
sensor you don't actually need to if you

00:24:19,860 --> 00:24:25,050
don't like I should also mention that

00:24:23,370 --> 00:24:27,480
the wind estimator is very lightweight

00:24:25,050 --> 00:24:29,250
so there's not really a problems of the

00:24:27,480 --> 00:24:32,280
problem in terms of resources to run a

00:24:29,250 --> 00:24:34,320
couple of these but it definitely

00:24:32,280 --> 00:24:37,920
requires some careful handling and

00:24:34,320 --> 00:24:40,980
tuning so we will probably try to find

00:24:37,920 --> 00:24:43,080
defaults that work well but you can get

00:24:40,980 --> 00:24:51,170
a lot of performance out of it by tuning

00:24:43,080 --> 00:24:51,170
it for your setup okay I'm done

00:24:52,370 --> 00:24:57,330
thank you Roman

00:24:55,470 --> 00:25:04,350
is there any questions from the audience

00:24:57,330 --> 00:25:05,880
awesome there you go thanks Roman so I

00:25:04,350 --> 00:25:08,250
just wondering how do you see the

00:25:05,880 --> 00:25:14,010
interaction between this new logic and a

00:25:08,250 --> 00:25:17,250
gift - yeah it's interesting we first

00:25:14,010 --> 00:25:20,340
actually did some tests with using the

00:25:17,250 --> 00:25:23,460
wind estimate from EKF - when the pitot

00:25:20,340 --> 00:25:25,920
is kind of the innovations go high but

00:25:23,460 --> 00:25:30,600
then also the question is which pedo do

00:25:25,920 --> 00:25:32,430
you actually fuse into EKF - so if you

00:25:30,600 --> 00:25:34,560
have a fault on the pitot and it's what

00:25:32,430 --> 00:25:37,680
you fuse into EKF - you you cannot use

00:25:34,560 --> 00:25:40,200
the wind estimate from EKF - anymore so

00:25:37,680 --> 00:25:41,880
currently we're going to go with the

00:25:40,200 --> 00:25:44,100
option of actually running a separate

00:25:41,880 --> 00:25:48,000
wind estimator with the side slip

00:25:44,100 --> 00:25:52,230
assumption and not using not fusing air

00:25:48,000 --> 00:25:54,750
speed into that and leaving the EKF to

00:25:52,230 --> 00:25:57,420
air speed or or wind

00:25:54,750 --> 00:25:59,610
innovations for now but I think testing

00:25:57,420 --> 00:26:07,950
is going to show if we can do anything

00:25:59,610 --> 00:26:10,020
better with that I Roman if you fly -

00:26:07,950 --> 00:26:12,390
air speed sensors do you then also have

00:26:10,020 --> 00:26:15,540
to calibrate - air speed sensors before

00:26:12,390 --> 00:26:16,680
every flight now we knew we use the

00:26:15,540 --> 00:26:23,370
newer ones they don't need to be

00:26:16,680 --> 00:26:25,050
calibrated plus I can add that you saw

00:26:23,370 --> 00:26:26,520
the wind estimator also does a scale

00:26:25,050 --> 00:26:29,100
factor estimation which can

00:26:26,520 --> 00:26:37,530
be used if you have a non-optimal

00:26:29,100 --> 00:26:39,450
installation thank you first of all I

00:26:37,530 --> 00:26:41,670
want to say that I have absolutely no

00:26:39,450 --> 00:26:45,600
experience with fixed-wing drones so

00:26:41,670 --> 00:26:48,780
yeah just but anyway it seems like it

00:26:45,600 --> 00:26:51,230
must be a solved problem in mint evasion

00:26:48,780 --> 00:26:54,180
I mean the air speed sensor blockage

00:26:51,230 --> 00:26:56,280
malfunction whatever other unless so any

00:26:54,180 --> 00:26:59,610
lessons to be learned from from that I

00:26:56,280 --> 00:27:06,630
mean you don't see planes falling out of

00:26:59,610 --> 00:27:08,400
the sky very often well actually I was

00:27:06,630 --> 00:27:12,930
actually thinking about on one slide

00:27:08,400 --> 00:27:16,530
showing pictures of planes going down

00:27:12,930 --> 00:27:18,060
I cannot say exactly what it was but I

00:27:16,530 --> 00:27:20,760
think it was related to air speed and

00:27:18,060 --> 00:27:23,430
angle of attack so I do think that it's

00:27:20,760 --> 00:27:29,240
I mean yeah it's not completely a solved

00:27:23,430 --> 00:27:29,240
problem what was the question again

00:27:34,730 --> 00:27:40,110
if there are any parallels with the I

00:27:37,800 --> 00:27:42,300
think so I think so I mean that's that's

00:27:40,110 --> 00:27:45,590
probably also one reason why we're

00:27:42,300 --> 00:27:48,690
trying to use multiple airspeed sensors

00:27:45,590 --> 00:27:48,690
[Music]

00:27:50,000 --> 00:27:56,000
anyone else all right thank you Roman

00:27:56,130 --> 00:27:59,829
[Applause]

00:28:04,930 --> 00:28:06,990

YouTube URL: https://www.youtube.com/watch?v=37BIBAzD6fE


