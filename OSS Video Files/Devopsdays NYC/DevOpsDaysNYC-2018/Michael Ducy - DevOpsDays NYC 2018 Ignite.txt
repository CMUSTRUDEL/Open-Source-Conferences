Title: Michael Ducy - DevOpsDays NYC 2018 Ignite
Publication date: 2018-02-01
Playlist: DevOpsDaysNYC-2018
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:18,660
[Music]

00:00:16,529 --> 00:00:21,090
my name is Michael dulce I work at a

00:00:18,660 --> 00:00:23,189
company called cystic I've been in the

00:00:21,090 --> 00:00:25,019
DevOps both for a long time well

00:00:23,189 --> 00:00:27,750
organized step up days come on Vista

00:00:25,019 --> 00:00:29,400
buffets Minneapolis and so forth so

00:00:27,750 --> 00:00:31,019
let's define micro-services how many

00:00:29,400 --> 00:00:32,340
people would use micro services or an

00:00:31,019 --> 00:00:32,700
architecture of moving that way all

00:00:32,340 --> 00:00:35,610
right

00:00:32,700 --> 00:00:38,399
trend number review so this is by Martin

00:00:35,610 --> 00:00:41,010
Fowler and I think the important thing

00:00:38,399 --> 00:00:43,680
is there's no price per slice definition

00:00:41,010 --> 00:00:45,360
of microservices but that definition

00:00:43,680 --> 00:00:47,879
makes things really really confusing

00:00:45,360 --> 00:00:49,379
when you actually read that entire thing

00:00:47,879 --> 00:00:51,149
that Martin Fowler closed it

00:00:49,379 --> 00:00:53,100
Martin actually has a really good blog

00:00:51,149 --> 00:00:56,460
that actually breaks things down in much

00:00:53,100 --> 00:00:58,170
more simpler terms and this is a good

00:00:56,460 --> 00:00:59,550
way and this is kind of the more common

00:00:58,170 --> 00:01:00,840
way that we think of micro-services

00:00:59,550 --> 00:01:02,910
where you take a monolithic based

00:01:00,840 --> 00:01:05,880
application and you break it down into

00:01:02,910 --> 00:01:07,799
smaller components and then basically

00:01:05,880 --> 00:01:09,210
over the network these components are

00:01:07,799 --> 00:01:10,860
able to talk to one another and to

00:01:09,210 --> 00:01:13,650
promote function calls and things like

00:01:10,860 --> 00:01:16,229
that now this sounds very similar to

00:01:13,650 --> 00:01:18,450
Scylla but it's not so our

00:01:16,229 --> 00:01:20,070
service-oriented architectures it is a

00:01:18,450 --> 00:01:22,350
service-oriented architecture but it's

00:01:20,070 --> 00:01:24,270
not what we traditionally thought of

00:01:22,350 --> 00:01:26,280
when we've looked at surveys oriented

00:01:24,270 --> 00:01:29,310
architectures and mainly because it

00:01:26,280 --> 00:01:30,689
takes into account a lot of innovations

00:01:29,310 --> 00:01:32,610
that we've had in the last several years

00:01:30,689 --> 00:01:34,950
one of those innovations is containers

00:01:32,610 --> 00:01:36,930
so what are containers so containers

00:01:34,950 --> 00:01:38,579
actually is a collection of things on a

00:01:36,930 --> 00:01:40,590
Linux operating system and now on

00:01:38,579 --> 00:01:43,140
Windows that makes it easy to isolate

00:01:40,590 --> 00:01:47,520
processes so it uses things like cgroups

00:01:43,140 --> 00:01:50,040
namespaces LSM comm and a whole bunch of

00:01:47,520 --> 00:01:52,320
other things but what it is is this

00:01:50,040 --> 00:01:54,820
ability for you to basically isolate how

00:01:52,320 --> 00:01:57,130
processes can interact with one another

00:01:54,820 --> 00:01:58,810
interact with other systems as well and

00:01:57,130 --> 00:02:00,370
now when we're moving towards this

00:01:58,810 --> 00:02:02,170
container type model what we're actually

00:02:00,370 --> 00:02:04,360
looking at is how do we package up the

00:02:02,170 --> 00:02:06,610
application and the libraries and then

00:02:04,360 --> 00:02:08,560
provide a very generic kernel that the

00:02:06,610 --> 00:02:11,590
containers used to actually go and run

00:02:08,560 --> 00:02:13,390
their applications this is just a

00:02:11,590 --> 00:02:16,210
picture I couldn't I needed another

00:02:13,390 --> 00:02:19,120
slide I needed 20 slides so I just drew

00:02:16,210 --> 00:02:31,780
a picture of my boss in there and it's

00:02:19,120 --> 00:02:33,910
good so this makes you think about how

00:02:31,780 --> 00:02:35,230
you monitor these containers and the

00:02:33,910 --> 00:02:37,030
applications that are running inside of

00:02:35,230 --> 00:02:38,709
them and rethink it when you're looking

00:02:37,030 --> 00:02:39,850
at on microservices architecture and

00:02:38,709 --> 00:02:44,110
these are the five what we call

00:02:39,850 --> 00:02:46,780
assisting the five principles of modern

00:02:44,110 --> 00:02:48,670
monitoring so monitor containers and wet

00:02:46,780 --> 00:02:51,360
inside so traditional monetary and focus

00:02:48,670 --> 00:02:53,950
on on the apps running on the ends

00:02:51,360 --> 00:02:55,959
containers are not VMs containers are

00:02:53,950 --> 00:02:58,300
processes that are running either on a

00:02:55,959 --> 00:02:59,920
VM or somewhere else that's isolated you

00:02:58,300 --> 00:03:01,450
should monitor the application yourself

00:02:59,920 --> 00:03:03,640
and I think what's really important is

00:03:01,450 --> 00:03:05,800
you want to be able to auto discover

00:03:03,640 --> 00:03:07,540
metrics for the runtime the application

00:03:05,800 --> 00:03:09,220
services and so forth because you don't

00:03:07,540 --> 00:03:11,019
necessarily know what you're always

00:03:09,220 --> 00:03:12,580
getting inside of that container so

00:03:11,019 --> 00:03:14,830
having that auto discovery is really

00:03:12,580 --> 00:03:17,110
really important another thing is that

00:03:14,830 --> 00:03:20,049
you don't want to monitor containers for

00:03:17,110 --> 00:03:22,870
things like CPU health and alert on CPU

00:03:20,049 --> 00:03:25,090
of a container going high mainly because

00:03:22,870 --> 00:03:27,970
containers don't last very long thank

00:03:25,090 --> 00:03:29,950
you Jason for this diagram containers

00:03:27,970 --> 00:03:31,690
don't last long in orchestration system

00:03:29,950 --> 00:03:33,700
so the ones that should be looking at

00:03:31,690 --> 00:03:35,709
things like CPU and memory usage and

00:03:33,700 --> 00:03:37,450
killing off containers and spawning new

00:03:35,709 --> 00:03:38,920
ones not your monitoring system your

00:03:37,450 --> 00:03:41,080
Orchestrator should be doing that and

00:03:38,920 --> 00:03:42,700
when operatives and developers want to

00:03:41,080 --> 00:03:44,530
try and do is focus on is the

00:03:42,700 --> 00:03:45,360
application actually running the service

00:03:44,530 --> 00:03:46,920
the way that we

00:03:45,360 --> 00:03:49,470
within the time frames that we want as

00:03:46,920 --> 00:03:51,210
well you also want to make sure that

00:03:49,470 --> 00:03:52,920
you're monitoring scales so in the

00:03:51,210 --> 00:03:54,810
containerized world or microservices

00:03:52,920 --> 00:03:57,120
world you can very quickly go from ten

00:03:54,810 --> 00:03:58,410
containers to twenty to ten to fifty and

00:03:57,120 --> 00:04:00,450
so forth so you want to make sure that

00:03:58,410 --> 00:04:02,550
you take into account those different

00:04:00,450 --> 00:04:04,590
problems the other thing that you want

00:04:02,550 --> 00:04:06,660
to do is also think about monitoring

00:04:04,590 --> 00:04:09,810
your api's this is how a micro services

00:04:06,660 --> 00:04:11,700
architecture might look and basically

00:04:09,810 --> 00:04:13,380
those communication paths become really

00:04:11,700 --> 00:04:15,480
really important between those different

00:04:13,380 --> 00:04:17,160
services it allows you to catch things

00:04:15,480 --> 00:04:18,690
like bottlenecks and certain methods

00:04:17,160 --> 00:04:20,760
functions or endpoints if you can get

00:04:18,690 --> 00:04:22,980
very granular with what API URLs be

00:04:20,760 --> 00:04:24,840
intent you can see more frequently used

00:04:22,980 --> 00:04:27,120
methods and it also helps you to trace

00:04:24,840 --> 00:04:28,680
behavior through those multiple services

00:04:27,120 --> 00:04:30,990
and multiple systems very quickly as

00:04:28,680 --> 00:04:32,670
well and then the other thing is is that

00:04:30,990 --> 00:04:34,230
you want to map your monitoring to your

00:04:32,670 --> 00:04:36,350
organizational structure so we mentioned

00:04:34,230 --> 00:04:38,970
Conway's law just before lunch as well

00:04:36,350 --> 00:04:40,710
I'm sure Conway's law has tumbled a lot

00:04:38,970 --> 00:04:43,170
but you want to make sure that you're

00:04:40,710 --> 00:04:44,850
empowering teams to actually set up the

00:04:43,170 --> 00:04:47,100
monitoring that they need and the alerts

00:04:44,850 --> 00:04:49,320
and the metrics that they care about

00:04:47,100 --> 00:04:51,750
versus having that pushed down from the

00:04:49,320 --> 00:04:53,250
top-level organization is called so to

00:04:51,750 --> 00:04:55,110
summarize containers change how we

00:04:53,250 --> 00:04:58,090
monitor applications microservices

00:04:55,110 --> 00:05:04,959
change how we monitor services thank you

00:04:58,090 --> 00:05:04,959

YouTube URL: https://www.youtube.com/watch?v=VzeOOMk_isc


