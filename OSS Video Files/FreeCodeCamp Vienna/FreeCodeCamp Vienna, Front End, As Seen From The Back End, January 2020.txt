Title: FreeCodeCamp Vienna, Front End, As Seen From The Back End, January 2020
Publication date: 2020-01-29
Playlist: FreeCodeCamp Vienna
Description: 
	Talk by Max-Julian Pogner

What happens in the back end when you click a button in the browser. Max will guide us through the steps involved, and how to debug scenarios.
Captions: 
	00:00:00,060 --> 00:00:07,170
I have constructed a very simple

00:00:02,760 --> 00:00:10,380
front-end program that's the user we or

00:00:07,170 --> 00:00:13,200
I I'm interacting with with some

00:00:10,380 --> 00:00:15,870
JavaScript program it's running in the

00:00:13,200 --> 00:00:18,600
browser and the JavaScript program sends

00:00:15,870 --> 00:00:21,390
time as a number it's unix time but it

00:00:18,600 --> 00:00:23,400
doesn't matter to the backend and then

00:00:21,390 --> 00:00:26,580
the backend magically determines some

00:00:23,400 --> 00:00:29,849
string that's time as a string and

00:00:26,580 --> 00:00:32,489
returns it and then the JavaScript this

00:00:29,849 --> 00:00:36,950
place the result and the user sees the

00:00:32,489 --> 00:00:40,140
results so it's a very simple use case

00:00:36,950 --> 00:00:42,860
you could do this in JavaScript actually

00:00:40,140 --> 00:00:45,660
but let's just assume it's some magic

00:00:42,860 --> 00:00:50,280
what string is determined that's not

00:00:45,660 --> 00:00:55,440
possible in JavaScript so I wanted to

00:00:50,280 --> 00:00:59,070
show the program first kind of for

00:00:55,440 --> 00:01:04,890
anybody who is interested oh that's my

00:00:59,070 --> 00:01:12,630
slides I have that's too small I can

00:01:04,890 --> 00:01:13,260
make this one larger okay so the front

00:01:12,630 --> 00:01:15,830
end program

00:01:13,260 --> 00:01:19,229
is one single file so in larger programs

00:01:15,830 --> 00:01:20,580
usually you split the program in many

00:01:19,229 --> 00:01:24,030
files

00:01:20,580 --> 00:01:27,299
I just want to gloss over it it's some

00:01:24,030 --> 00:01:29,759
meta meta information that this is in

00:01:27,299 --> 00:01:34,049
utf-8 file so the browser will display

00:01:29,759 --> 00:01:36,689
all the umlauts correctly you see I I

00:01:34,049 --> 00:01:38,159
didn't do all the HTML and head stuff

00:01:36,689 --> 00:01:43,200
because the browser will render it

00:01:38,159 --> 00:01:47,909
anyway the style it's just some CSS

00:01:43,200 --> 00:01:49,770
style app I won't go into it then let's

00:01:47,909 --> 00:01:53,009
look at the initial tome it's very

00:01:49,770 --> 00:01:54,390
simple we have it if you will see it

00:01:53,009 --> 00:01:57,390
later

00:01:54,390 --> 00:01:59,850
and then one button you can click the

00:01:57,390 --> 00:02:03,290
button and then this is the result and

00:01:59,850 --> 00:02:03,290
the JavaScript

00:02:05,859 --> 00:02:12,760
on patent click we look at the current

00:02:10,360 --> 00:02:16,090
result elements we search the element

00:02:12,760 --> 00:02:18,310
then we prepare the request it's a post

00:02:16,090 --> 00:02:20,500
request so in web there is different

00:02:18,310 --> 00:02:24,310
kinds of requests this is a post request

00:02:20,500 --> 00:02:26,620
to some URL and the request body which

00:02:24,310 --> 00:02:31,500
just is the timestamp and the current

00:02:26,620 --> 00:02:34,900
date as integer

00:02:31,500 --> 00:02:38,489
just a little in between because I

00:02:34,900 --> 00:02:40,900
wasn't sure how much of you have already

00:02:38,489 --> 00:02:48,670
did something with chaves chaves

00:02:40,900 --> 00:02:51,730
JavaScript so yeah okay so if I say

00:02:48,670 --> 00:03:00,150
that's an XML HTTP request you know what

00:02:51,730 --> 00:03:03,670
it is yeah okay okay so it opens the

00:03:00,150 --> 00:03:05,680
request sends the request and then if

00:03:03,670 --> 00:03:08,819
and then this is executed if the

00:03:05,680 --> 00:03:12,130
response is here it assigns the result

00:03:08,819 --> 00:03:14,019
from the response text to the text

00:03:12,130 --> 00:03:17,950
content of the result element and that's

00:03:14,019 --> 00:03:20,260
the whole front end program it sends the

00:03:17,950 --> 00:03:21,910
time to the back end receives the

00:03:20,260 --> 00:03:26,260
response and the signs of the result

00:03:21,910 --> 00:03:29,500
element I will now start the application

00:03:26,260 --> 00:03:36,389
I prepared something in docker know

00:03:29,500 --> 00:03:36,389
where am i I'm in the wrong directory so

00:03:37,799 --> 00:03:44,230
let's go into the web server I will not

00:03:41,650 --> 00:03:46,450
go into the docker compose specifics

00:03:44,230 --> 00:03:48,849
basically I'm starting a virtual

00:03:46,450 --> 00:03:52,870
container in the background that starts

00:03:48,849 --> 00:03:57,639
the whole web server stuff so and I will

00:03:52,870 --> 00:04:00,549
open what the web server gives me so

00:03:57,639 --> 00:04:03,849
it's very simple we have one diff I made

00:04:00,549 --> 00:04:06,550
a blue line around the day for better

00:04:03,849 --> 00:04:09,820
finding it we have one button

00:04:06,550 --> 00:04:11,950
and if I press the button then the

00:04:09,820 --> 00:04:15,220
packet will generate a time a string and

00:04:11,950 --> 00:04:20,290
the string is displayed so it's a good

00:04:15,220 --> 00:04:22,720
use case to to show it okay but what

00:04:20,290 --> 00:04:26,700
actually happens so this talk is about

00:04:22,720 --> 00:04:30,580
what happens in the background because

00:04:26,700 --> 00:04:32,920
if you're in a big project and something

00:04:30,580 --> 00:04:35,050
is wrong with the string if you tell the

00:04:32,920 --> 00:04:37,510
back-end developer well this string is

00:04:35,050 --> 00:04:39,490
wrong then the back-end developer will

00:04:37,510 --> 00:04:41,230
think oh I have to think about all the

00:04:39,490 --> 00:04:42,790
front-end stuff and in big projects you

00:04:41,230 --> 00:04:44,830
have so many libraries in the front-end

00:04:42,790 --> 00:04:48,400
back-end developers don't like to think

00:04:44,830 --> 00:04:50,440
about front-end libraries so if you

00:04:48,400 --> 00:04:52,960
cannot negotiate with the back-end

00:04:50,440 --> 00:04:55,240
developer to think about the front-end

00:04:52,960 --> 00:04:58,270
stuff maybe you have to analyze yours

00:04:55,240 --> 00:05:02,200
the next step yourself so what is the

00:04:58,270 --> 00:05:04,810
next step if we look at what happens in

00:05:02,200 --> 00:05:07,750
the background so user clicks on

00:05:04,810 --> 00:05:10,240
JavaScript but JavaScript actually just

00:05:07,750 --> 00:05:12,760
sends some instructions to the browser

00:05:10,240 --> 00:05:18,840
and then the browser will send an HTTP

00:05:12,760 --> 00:05:22,390
request for you to the backend and in

00:05:18,840 --> 00:05:25,750
modern browsers and let's make it big

00:05:22,390 --> 00:05:28,780
again there is some secret hotkey well

00:05:25,750 --> 00:05:31,870
you can google it in my browser is it's

00:05:28,780 --> 00:05:35,230
ctrl shift C and it opens developer

00:05:31,870 --> 00:05:37,570
tools and developer tools are very handy

00:05:35,230 --> 00:05:39,340
because they have a network tab so all

00:05:37,570 --> 00:05:41,710
the other stuff is about Java Java

00:05:39,340 --> 00:05:43,840
Script back in developer I don't care

00:05:41,710 --> 00:05:47,110
about Chavez Java Script but I care

00:05:43,840 --> 00:05:51,010
about the network tab because that is

00:05:47,110 --> 00:05:53,820
what is seen by the backend so and if I

00:05:51,010 --> 00:05:57,100
now press the button again it will

00:05:53,820 --> 00:05:59,440
notice the time it will send the request

00:05:57,100 --> 00:06:01,330
again with the updated time to the

00:05:59,440 --> 00:06:04,750
backend the backend will send an updated

00:06:01,330 --> 00:06:07,260
string and what then is here seen this

00:06:04,750 --> 00:06:10,600
is the HTTP request if you look here

00:06:07,260 --> 00:06:12,820
javascript will send to the browser the

00:06:10,600 --> 00:06:14,650
instruction to send something at then

00:06:12,820 --> 00:06:18,040
the browser will send an HTTP request

00:06:14,650 --> 00:06:19,319
for you and these developer tools can

00:06:18,040 --> 00:06:25,399
inspect

00:06:19,319 --> 00:06:27,599
those requests let's see one per line I

00:06:25,399 --> 00:06:30,059
already clicked it and we see the

00:06:27,599 --> 00:06:39,740
details it's very small it's very small

00:06:30,059 --> 00:06:43,439
so you have to believe me I don't know I

00:06:39,740 --> 00:06:46,199
guess anybody that's interested in has

00:06:43,439 --> 00:06:53,129
to come to me afterwards and look at the

00:06:46,199 --> 00:06:56,639
laptop again but to summarize it this

00:06:53,129 --> 00:07:00,629
shows all the properties of the request

00:06:56,639 --> 00:07:04,129
where is it going what exactly is in the

00:07:00,629 --> 00:07:08,279
request we have request your l method

00:07:04,129 --> 00:07:10,800
HDPE version there is version 1.0 to 1.1

00:07:08,279 --> 00:07:13,770
and in this case response headers

00:07:10,800 --> 00:07:15,629
requests headers and all this is sent to

00:07:13,770 --> 00:07:17,550
the backend so even though in Javas

00:07:15,629 --> 00:07:20,399
channel in JavaScript it was just one

00:07:17,550 --> 00:07:23,999
small timestamp time the browser adds

00:07:20,399 --> 00:07:26,069
other stuff and the back end cannot do

00:07:23,999 --> 00:07:28,199
anything about the browser so if a

00:07:26,069 --> 00:07:31,409
problem is here the wrong thing is sent

00:07:28,199 --> 00:07:35,069
then back and cannot help you but it's

00:07:31,409 --> 00:07:37,860
important to look at it yeah it's it's

00:07:35,069 --> 00:07:40,889
just too small I will look at the same

00:07:37,860 --> 00:07:44,819
what is the next level sometimes the

00:07:40,889 --> 00:07:47,789
browser is not low enough because

00:07:44,819 --> 00:07:50,279
browsers have I brought it down here

00:07:47,789 --> 00:07:52,769
I hope big enough they have the same

00:07:50,279 --> 00:07:55,559
origin policy they have a core security

00:07:52,769 --> 00:07:57,479
policy they have HTTP only cookies so

00:07:55,559 --> 00:08:00,419
maybe the JavaScript doesn't see all the

00:07:57,479 --> 00:08:03,869
cookies and etc etc there is some

00:08:00,419 --> 00:08:06,119
library swagga you I didn't bring it up

00:08:03,869 --> 00:08:08,519
today but it's basically helps how to

00:08:06,119 --> 00:08:10,199
communicate how back-end developers

00:08:08,519 --> 00:08:12,689
communicate with front-end developers

00:08:10,199 --> 00:08:15,479
and you can click and it's all fancy but

00:08:12,689 --> 00:08:17,759
if something doesn't work maybe it's

00:08:15,479 --> 00:08:19,800
because of some wrong cookie and the

00:08:17,759 --> 00:08:22,669
swagger you I cannot access this cookie

00:08:19,800 --> 00:08:28,210
because it's an HTTP only cookie and

00:08:22,669 --> 00:08:30,650
then if we have this kind of problem and

00:08:28,210 --> 00:08:33,200
maybe you want to send an email to the

00:08:30,650 --> 00:08:36,530
packing developer and now you could only

00:08:33,200 --> 00:08:41,650
the sender send the screenshot the next

00:08:36,530 --> 00:08:44,480
level we can just circumvent a browser

00:08:41,650 --> 00:08:47,360
we don't execute the JavaScript we don't

00:08:44,480 --> 00:08:50,540
use the browser there is the possibility

00:08:47,360 --> 00:08:51,890
in Linux and Mac I don't know I don't

00:08:50,540 --> 00:08:55,640
know about Windows but I guess it's

00:08:51,890 --> 00:08:58,490
possible to send HTTP requests directly

00:08:55,640 --> 00:09:01,430
that circumvents all the security stuff

00:08:58,490 --> 00:09:04,910
in the browser and that's a nice way to

00:09:01,430 --> 00:09:12,800
check if the problem is with back-end or

00:09:04,910 --> 00:09:19,850
with some browser configuration and that

00:09:12,800 --> 00:09:25,850
one I can make large so because I've bet

00:09:19,850 --> 00:09:29,630
eyesight I need a large so the program

00:09:25,850 --> 00:09:32,060
is I want to show to the S Curl it's a

00:09:29,630 --> 00:09:34,850
usual command line program I have

00:09:32,060 --> 00:09:38,270
prepared some options I shows additional

00:09:34,850 --> 00:09:40,700
stuff and then the first option exposed

00:09:38,270 --> 00:09:44,090
it just wraps around so in reality

00:09:40,700 --> 00:09:47,780
that's one line it just wraps around for

00:09:44,090 --> 00:09:50,210
this please play post we have ket method

00:09:47,780 --> 00:09:53,060
post method head method put method

00:09:50,210 --> 00:09:55,580
delete method in this case there is some

00:09:53,060 --> 00:09:57,890
agreement between packet in front and

00:09:55,580 --> 00:10:00,710
what what to use and in this case I just

00:09:57,890 --> 00:10:04,480
decided to use post to implement the

00:10:00,710 --> 00:10:09,800
backend to use post then content header

00:10:04,480 --> 00:10:11,570
because today it's the latest hype to

00:10:09,800 --> 00:10:15,590
send everything in Chase and receive

00:10:11,570 --> 00:10:19,610
everything in Jason and in an HTTP

00:10:15,590 --> 00:10:22,310
request it is declared what is sent we

00:10:19,610 --> 00:10:26,110
could use a binary image but in this

00:10:22,310 --> 00:10:29,810
case I'm adding the header page that

00:10:26,110 --> 00:10:35,630
declares that the content I will send is

00:10:29,810 --> 00:10:37,460
Jason then I'm including the content

00:10:35,630 --> 00:10:39,440
itself

00:10:37,460 --> 00:10:43,610
[Music]

00:10:39,440 --> 00:10:46,250
just believe me it's value chasing i-i

00:10:43,610 --> 00:10:48,470
didn't bother calculating the time

00:10:46,250 --> 00:10:52,250
number i just used in any number it's

00:10:48,470 --> 00:10:58,340
nine with how many one two six eight

00:10:52,250 --> 00:11:01,580
three eight nine s that's just some date

00:10:58,340 --> 00:11:02,690
I will correct close to Travis the chase

00:11:01,580 --> 00:11:06,080
document again

00:11:02,690 --> 00:11:09,080
and finally I'm specifying the URL where

00:11:06,080 --> 00:11:11,720
I'm sending the request because I

00:11:09,080 --> 00:11:14,600
configure Tucker the way I configure it

00:11:11,720 --> 00:11:18,530
the back end is running on this your L

00:11:14,600 --> 00:11:20,540
with HTTP so no security whatsoever then

00:11:18,530 --> 00:11:26,210
localhost I'm running it on my local

00:11:20,540 --> 00:11:30,170
machine I put it on port 1 4 4 2 1 1 4

00:11:26,210 --> 00:11:34,790
and just for good measure I prefix the

00:11:30,170 --> 00:11:37,520
URL with API v1 and submit I'm assuming

00:11:34,790 --> 00:11:41,710
URL everybody knows what what are you

00:11:37,520 --> 00:11:45,710
ready so I'm sending this post request

00:11:41,710 --> 00:11:51,280
with a certain header and a certain

00:11:45,710 --> 00:11:51,280
request body to this URL and enter and

00:11:51,310 --> 00:11:56,990
now command line if difficult to read

00:11:55,280 --> 00:11:59,630
because in the in Linux

00:11:56,990 --> 00:12:01,550
its usual if I press Enter the output of

00:11:59,630 --> 00:12:03,920
the command immediately starts so there

00:12:01,550 --> 00:12:06,560
is no nice separate separation that

00:12:03,920 --> 00:12:09,740
means what curl is giving me back

00:12:06,560 --> 00:12:13,310
immediately starts here and goes until

00:12:09,740 --> 00:12:15,710
here the back end did not send a new

00:12:13,310 --> 00:12:20,720
line at the end so there is no new line

00:12:15,710 --> 00:12:23,810
there so you have to read a curl

00:12:20,720 --> 00:12:28,580
response it's not graphically its back

00:12:23,810 --> 00:12:30,440
end so what is what is the response and

00:12:28,580 --> 00:12:32,480
curl does not print in this

00:12:30,440 --> 00:12:34,430
configuration does not print what we

00:12:32,480 --> 00:12:37,010
sent only the response from from the

00:12:34,430 --> 00:12:41,420
back end so the back end responds with

00:12:37,010 --> 00:12:45,470
some HTTP 1.1 this response that would

00:12:41,420 --> 00:12:50,990
be 1.0 and 2 or 3 i here are in in the

00:12:45,470 --> 00:12:52,110
works to hang 200 well if you don't know

00:12:50,990 --> 00:12:53,790
what the code means

00:12:52,110 --> 00:12:57,750
ooh great there's a whole Wikipedia page

00:12:53,790 --> 00:13:01,080
on it then date when this response was

00:12:57,750 --> 00:13:04,140
generated but that's not the result in

00:13:01,080 --> 00:13:06,360
this case so it's it's it's when the

00:13:04,140 --> 00:13:08,820
response was generated and not what the

00:13:06,360 --> 00:13:11,220
back and told us then some server

00:13:08,820 --> 00:13:14,280
information the back end was kind enough

00:13:11,220 --> 00:13:17,430
to also respond with content type Jason

00:13:14,280 --> 00:13:18,900
it's some transfer encoding we could

00:13:17,430 --> 00:13:22,800
have for example transfer encoding

00:13:18,900 --> 00:13:26,460
zipped if it's big data back-end could

00:13:22,800 --> 00:13:31,260
choose to zip the response so it's

00:13:26,460 --> 00:13:35,240
smaller compress or chip or 7-zip or

00:13:31,260 --> 00:13:37,560
whatever and then because HTTP has a

00:13:35,240 --> 00:13:40,290
always an empty line there is an empty

00:13:37,560 --> 00:13:43,560
line and then there is the response body

00:13:40,290 --> 00:13:49,020
and this is now what really the backend

00:13:43,560 --> 00:13:52,170
generated the backend sends and chasten

00:13:49,020 --> 00:13:56,580
document with one property formatted

00:13:52,170 --> 00:13:58,400
timestamp and now this is the string and

00:13:56,580 --> 00:14:02,970
it just so happens that the nine with

00:13:58,400 --> 00:14:06,240
twelve I think was it serious is in 1989

00:14:02,970 --> 00:14:11,670
so I'm I was born near last millennia

00:14:06,240 --> 00:14:15,180
that's that's why yes and that's the

00:14:11,670 --> 00:14:18,690
whole thing now if this is the request

00:14:15,180 --> 00:14:20,670
gives a wrong result you could send an

00:14:18,690 --> 00:14:24,000
email to the back-end developer and say

00:14:20,670 --> 00:14:26,490
well I use this curl and it gives the

00:14:24,000 --> 00:14:28,320
wrong result and the big advantages that

00:14:26,490 --> 00:14:30,930
even if the back-end developer is

00:14:28,320 --> 00:14:35,700
working on some strange operating

00:14:30,930 --> 00:14:39,150
sous-sous system he can reproduce

00:14:35,700 --> 00:14:41,430
can reproduce it because a browser use

00:14:39,150 --> 00:14:44,220
you maybe you record the video and say I

00:14:41,430 --> 00:14:48,530
click here then it's maybe not possible

00:14:44,220 --> 00:14:50,880
to reproduce it that reliably so maybe

00:14:48,530 --> 00:14:53,730
what the back-end developer is doing on

00:14:50,880 --> 00:14:56,070
this his laptop and you're doing on your

00:14:53,730 --> 00:14:59,340
laptop are actually different things and

00:14:56,070 --> 00:15:00,990
with curl the big advantage is that the

00:14:59,340 --> 00:15:05,760
likelihood that you're talking about

00:15:00,990 --> 00:15:08,610
different things is lower but there is

00:15:05,760 --> 00:15:12,720
more because that's just HTTP request we

00:15:08,610 --> 00:15:15,000
can go even one step lower we cannot

00:15:12,720 --> 00:15:19,140
send an HTTP request but make it is a

00:15:15,000 --> 00:15:22,650
big connection ourselves that's fun

00:15:19,140 --> 00:15:24,600
because what if curl is in the ROM it

00:15:22,650 --> 00:15:26,700
actually happened to me once in my life

00:15:24,600 --> 00:15:30,450
lifetime that the curl gave a wrong

00:15:26,700 --> 00:15:34,590
result so what can be done I will not

00:15:30,450 --> 00:15:38,730
explain the syntax but there is a

00:15:34,590 --> 00:15:42,210
program called N ket which does nothing

00:15:38,730 --> 00:15:45,210
except making a TCP connection and

00:15:42,210 --> 00:15:48,780
whatever you type in on your laptop is

00:15:45,210 --> 00:15:51,120
sent and altered to the other side and

00:15:48,780 --> 00:15:54,060
whatever the other side sends to you is

00:15:51,120 --> 00:15:57,870
displayed unaltered curl already does

00:15:54,060 --> 00:16:00,840
all the chunk encoding in HTTP and

00:15:57,870 --> 00:16:05,100
status code analyzation and stuff and

00:16:00,840 --> 00:16:10,650
ket doesn't do that so I'm sending to

00:16:05,100 --> 00:16:16,620
localhost one four one one two and let's

00:16:10,650 --> 00:16:19,230
first see n cut now I have pressed enter

00:16:16,620 --> 00:16:22,350
and made a TCP connection to localhost

00:16:19,230 --> 00:16:25,590
four to one one four and nothing happens

00:16:22,350 --> 00:16:27,690
because that's how HTTP works the server

00:16:25,590 --> 00:16:32,240
is waiting for the client to do anything

00:16:27,690 --> 00:16:39,450
and I could write hello press ENTER and

00:16:32,240 --> 00:16:43,500
what happens now is I typed hello sent

00:16:39,450 --> 00:16:47,490
those actually six bytes to the other

00:16:43,500 --> 00:16:51,630
side because it's h-e-l-l-o and then an

00:16:47,490 --> 00:16:54,150
enter and the server responded with

00:16:51,630 --> 00:16:57,090
because it's an HTTP server it responds

00:16:54,150 --> 00:16:59,550
with the correct it responds some bad

00:16:57,090 --> 00:17:02,580
requests this response was generated at

00:16:59,550 --> 00:17:04,890
this time the server was an Apache

00:17:02,580 --> 00:17:08,820
server the content length of the

00:17:04,890 --> 00:17:11,280
response the server had enough of my

00:17:08,820 --> 00:17:14,760
wrong requests and closing the

00:17:11,280 --> 00:17:19,069
connection and the response content is

00:17:14,760 --> 00:17:21,649
actually HTTP HTML

00:17:19,069 --> 00:17:25,429
it basically displays the error message

00:17:21,649 --> 00:17:27,649
again so if this request would have been

00:17:25,429 --> 00:17:32,049
sent by a browser the browser could

00:17:27,649 --> 00:17:34,880
could display a readable error message

00:17:32,049 --> 00:17:40,130
what I actually want to do I want to

00:17:34,880 --> 00:17:42,860
show a correct request so I brought it

00:17:40,130 --> 00:17:46,039
down beforehand because otherwise I will

00:17:42,860 --> 00:17:53,320
miss type so it's post so I'm sending

00:17:46,039 --> 00:17:58,279
those five POS D bytes API the URLs

00:17:53,320 --> 00:18:00,230
submit then I'm declaring its 1.0

00:17:58,279 --> 00:18:05,179
because it's easy to type one two third

00:18:00,230 --> 00:18:08,720
and ten 1.1 host localhost so I want to

00:18:05,179 --> 00:18:12,889
speak to localhost then I'm declaring my

00:18:08,720 --> 00:18:16,100
content type what I will be sending I'm

00:18:12,889 --> 00:18:18,230
declaring the content length for example

00:18:16,100 --> 00:18:23,690
that is something that Carol will

00:18:18,230 --> 00:18:27,110
automatically determined and then my

00:18:23,690 --> 00:18:28,970
body times them oh no space there

00:18:27,110 --> 00:18:31,519
because I declare the content byte and

00:18:28,970 --> 00:18:33,320
it's in PI at the content length it's in

00:18:31,519 --> 00:18:43,970
bytes so no space allowed because

00:18:33,320 --> 00:18:47,720
otherwise 27 so 9 and 1/2 and enter your

00:18:43,970 --> 00:18:51,590
F enter and that's the response it's the

00:18:47,720 --> 00:19:00,080
same response as displayed a curl so

00:18:51,590 --> 00:19:03,769
curl is actually very low but if there

00:19:00,080 --> 00:19:06,919
is some well I never actually used n ket

00:19:03,769 --> 00:19:10,629
in my life for this purpose for

00:19:06,919 --> 00:19:14,000
analyzing but it's nice to know that

00:19:10,629 --> 00:19:18,019
there is actually something I actually

00:19:14,000 --> 00:19:21,200
then use some other program and use an

00:19:18,019 --> 00:19:24,649
inspection tool that will display the

00:19:21,200 --> 00:19:29,019
bites on the TCP stream so I don't have

00:19:24,649 --> 00:19:29,019
to type it all myself and

00:19:29,619 --> 00:19:40,179
the main thing I want to show is this

00:19:32,749 --> 00:19:40,179
curl stuff and that's it

00:19:41,260 --> 00:19:44,940

YouTube URL: https://www.youtube.com/watch?v=Ai2mKHYMORE


