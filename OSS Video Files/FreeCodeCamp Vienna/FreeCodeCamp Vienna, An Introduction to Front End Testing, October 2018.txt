Title: FreeCodeCamp Vienna, An Introduction to Front End Testing, October 2018
Publication date: 2018-10-21
Playlist: FreeCodeCamp Vienna
Description: 
	"An Introduction to Front-End Testing" - Hans Schnedlitz

In this talk, Hans get you started with testing for the Front End. Learn how you can use tests to produce less bugs and code with confidence. Covering: Basics (What is testing, why do we need it?), Testing Pyramid, Demo (Unit & E2E Tests)
Captions: 
	00:00:00,030 --> 00:00:04,110
so thanks for having me it's great being

00:00:02,100 --> 00:00:06,600
here thanks to Robert and Daniel for

00:00:04,110 --> 00:00:07,950
giving me the opportunity to speak what

00:00:06,600 --> 00:00:09,990
we're going to discuss today is just a

00:00:07,950 --> 00:00:12,179
general overview to testing I'm gonna

00:00:09,990 --> 00:00:14,730
talk about what is testing why do you

00:00:12,179 --> 00:00:17,130
need testing it's not gonna be too

00:00:14,730 --> 00:00:19,859
technical all right so if you already

00:00:17,130 --> 00:00:21,689
have some experience I hope it's not too

00:00:19,859 --> 00:00:24,660
boring okay

00:00:21,689 --> 00:00:26,460
I was planning on doing like a quick

00:00:24,660 --> 00:00:28,289
live demo at the end where it can

00:00:26,460 --> 00:00:30,210
actually show off how you can test some

00:00:28,289 --> 00:00:33,000
small web application which

00:00:30,210 --> 00:00:35,760
unfortunately since technical issues we

00:00:33,000 --> 00:00:37,380
can't do today but we'll just walk you

00:00:35,760 --> 00:00:39,840
through the code and get up real quick

00:00:37,380 --> 00:00:42,960
and see to make the best out of it

00:00:39,840 --> 00:00:45,239
I guess right quick bit about myself

00:00:42,960 --> 00:00:47,190
where am I well my name sounds like I

00:00:45,239 --> 00:00:50,010
said already I'm not a front-end death

00:00:47,190 --> 00:00:52,289
okay mostly a full stack or a front-end

00:00:50,010 --> 00:00:53,940
theft's I am not to actually have a Java

00:00:52,289 --> 00:00:56,430
and c-sharp background and just recently

00:00:53,940 --> 00:01:00,420
got started with Ruby so if you see any

00:00:56,430 --> 00:01:04,589
code that looks like garbage is not my

00:01:00,420 --> 00:01:06,540
natural habitat okay I am tutoring at

00:01:04,589 --> 00:01:09,840
the Technical University so I'm helping

00:01:06,540 --> 00:01:12,810
out with teaching there coincidentally

00:01:09,840 --> 00:01:14,880
in the subjects testing and software

00:01:12,810 --> 00:01:17,460
Quality Assurance so you see how this

00:01:14,880 --> 00:01:19,439
how this works yeah and I myself am a

00:01:17,460 --> 00:01:24,170
big fan of testing why do I like testing

00:01:19,439 --> 00:01:27,470
my first job was in a testing firm and

00:01:24,170 --> 00:01:30,210
yeah I like testing because it liked

00:01:27,470 --> 00:01:34,740
protects us from the code from the evil

00:01:30,210 --> 00:01:36,390
that is code okay what I mean by that no

00:01:34,740 --> 00:01:38,189
program is kind of hard a lot of people

00:01:36,390 --> 00:01:40,140
have written about how software today is

00:01:38,189 --> 00:01:41,759
kind of sucks I remember an article I

00:01:40,140 --> 00:01:44,280
read that was typed in the coming

00:01:41,759 --> 00:01:46,700
software pocalypse was really like oh my

00:01:44,280 --> 00:01:50,159
god we all gonna die

00:01:46,700 --> 00:01:54,270
problem is soft us really complex today

00:01:50,159 --> 00:01:56,969
and that causes a lot of issues Kim what

00:01:54,270 --> 00:01:59,460
I mean by software is very complex quick

00:01:56,969 --> 00:02:02,280
guessing game for y'all what do you

00:01:59,460 --> 00:02:03,899
reckon an average car like not average

00:02:02,280 --> 00:02:06,750
but luxury car today

00:02:03,899 --> 00:02:09,300
like smart car how many lines of code

00:02:06,750 --> 00:02:10,770
does the software in that car just the

00:02:09,300 --> 00:02:12,700
software it stirs the car in everything

00:02:10,770 --> 00:02:15,250
how many lines of code in the gear

00:02:12,700 --> 00:02:17,140
it's gonna be 1 million it's gonna be 10

00:02:15,250 --> 00:02:19,720
million or 100 million give me a show of

00:02:17,140 --> 00:02:23,349
hand so I know you're not asleep who

00:02:19,720 --> 00:02:25,150
thinks it's 1 million okay good one all

00:02:23,349 --> 00:02:27,550
right who thinks it's 10 million 10

00:02:25,150 --> 00:02:29,110
million lines of code in the car a bunch

00:02:27,550 --> 00:02:32,020
of people who thinks it's a hundred

00:02:29,110 --> 00:02:34,090
million just one okay

00:02:32,020 --> 00:02:36,459
was a trick questions actually 600

00:02:34,090 --> 00:02:38,920
million lines of code okay six turn on

00:02:36,459 --> 00:02:41,590
lights code for a freaking car that's

00:02:38,920 --> 00:02:47,350
what we've come to complex code means a

00:02:41,590 --> 00:02:48,910
lot of errors all right you know it's

00:02:47,350 --> 00:02:50,739
like you touch some piece of software

00:02:48,910 --> 00:02:53,049
and basically breaks as soon as you're

00:02:50,739 --> 00:02:56,319
like poking it an example I always give

00:02:53,049 --> 00:02:59,350
for critical software errors is the

00:02:56,319 --> 00:03:00,190
story of the arianna anyone has a clue

00:02:59,350 --> 00:03:03,730
of what Ariana

00:03:00,190 --> 00:03:07,299
what the ariana is exactly yeah was a

00:03:03,730 --> 00:03:10,060
rocket that was built in 1996 by

00:03:07,299 --> 00:03:11,799
European Space Agency and the story

00:03:10,060 --> 00:03:13,569
about Ariana's rather sad one they built

00:03:11,799 --> 00:03:15,400
this thing they developed it for ten

00:03:13,569 --> 00:03:17,739
years cost about 400 million bucks

00:03:15,400 --> 00:03:19,530
then it launched it and it went up like

00:03:17,739 --> 00:03:22,630
four kilometers and then it blew up

00:03:19,530 --> 00:03:23,230
because someone didn't convert some

00:03:22,630 --> 00:03:25,209
floating's

00:03:23,230 --> 00:03:27,700
into improperly and the rocket did like

00:03:25,209 --> 00:03:29,530
a flip and it went bang okay 400 million

00:03:27,700 --> 00:03:32,530
lines of code because of a teeny whiny

00:03:29,530 --> 00:03:32,980
era there was almost no more than 20

00:03:32,530 --> 00:03:36,670
years ago

00:03:32,980 --> 00:03:39,820
a more recent story maybe you followed

00:03:36,670 --> 00:03:43,359
Luber self-driving cars there has been

00:03:39,820 --> 00:03:45,640
an issue with one car in the beginning

00:03:43,359 --> 00:03:46,269
of August the car basically ran over

00:03:45,640 --> 00:03:48,880
petrest

00:03:46,269 --> 00:03:52,120
pedestrian like full stop just went

00:03:48,880 --> 00:03:53,739
through and they found out well it

00:03:52,120 --> 00:03:56,019
registered her well no problem with the

00:03:53,739 --> 00:03:58,900
sensor senses but for some reason the

00:03:56,019 --> 00:04:02,130
car decided not to stop okay

00:03:58,900 --> 00:04:04,600
it just went which is very sad so we

00:04:02,130 --> 00:04:07,359
have some issues with software there's a

00:04:04,600 --> 00:04:10,840
bunch of problems what can we do to

00:04:07,359 --> 00:04:14,859
avoid these issues obviously we do

00:04:10,840 --> 00:04:20,049
testing okay so doesn't matter if you

00:04:14,859 --> 00:04:23,229
talk about cars or web applications or

00:04:20,049 --> 00:04:25,450
just small functions the concepts always

00:04:23,229 --> 00:04:25,850
the same you have some components some

00:04:25,450 --> 00:04:28,790
sis

00:04:25,850 --> 00:04:30,560
and it's supposed to do something in a

00:04:28,790 --> 00:04:32,420
way of like a car is supposed to stir

00:04:30,560 --> 00:04:34,460
properly your web application supposed

00:04:32,420 --> 00:04:38,540
to display some values properly this

00:04:34,460 --> 00:04:40,370
function idea is supposed to divide two

00:04:38,540 --> 00:04:40,760
numbers calculate the division easy

00:04:40,370 --> 00:04:44,450
peasy

00:04:40,760 --> 00:04:46,580
how do you know if it works well how do

00:04:44,450 --> 00:04:49,030
you check if your calculator works you

00:04:46,580 --> 00:04:51,620
try it out type in some numbers just

00:04:49,030 --> 00:04:54,320
display the correct result if it does so

00:04:51,620 --> 00:04:56,990
good if not you found an issue this is

00:04:54,320 --> 00:05:00,290
what testing does you take your system

00:04:56,990 --> 00:05:03,080
in some state precondition you chuck

00:05:00,290 --> 00:05:05,030
some values in there and you check if

00:05:03,080 --> 00:05:08,350
what it puts out is correct

00:05:05,030 --> 00:05:12,580
that's basically it this is a test okay

00:05:08,350 --> 00:05:12,580
what's the issue with this piece of code

00:05:13,210 --> 00:05:20,390
yeah so what input would make that fail

00:05:17,990 --> 00:05:23,180
yeah if B is 0 exactly in any other

00:05:20,390 --> 00:05:24,020
language if this was not JavaScript it

00:05:23,180 --> 00:05:26,000
would be an issue

00:05:24,020 --> 00:05:28,370
this is JavaScript so just puts out

00:05:26,000 --> 00:05:30,380
infinity so if you want your code to

00:05:28,370 --> 00:05:33,200
behave that way then it's actually

00:05:30,380 --> 00:05:35,920
correct um might be a bug in the

00:05:33,200 --> 00:05:39,230
JavaScript language I don't know might

00:05:35,920 --> 00:05:40,880
impede you we might argue that yeah so

00:05:39,230 --> 00:05:43,970
we got covered what the test is it's

00:05:40,880 --> 00:05:47,090
always the same input output on some

00:05:43,970 --> 00:05:50,300
system okay what does testing mean now I

00:05:47,090 --> 00:05:52,940
said you check if it works by putting

00:05:50,300 --> 00:05:55,610
some stuff into it actually I mean it's

00:05:52,940 --> 00:05:58,160
kind of kind of wrong actually testing

00:05:55,610 --> 00:06:00,680
is the process it says it acts of

00:05:58,160 --> 00:06:02,420
executing a program or system with the

00:06:00,680 --> 00:06:05,000
intent of finding errors and that's the

00:06:02,420 --> 00:06:08,270
important part you don't test to check

00:06:05,000 --> 00:06:12,920
if it works you test to check it doesn't

00:06:08,270 --> 00:06:15,320
work you reveal errors basically there's

00:06:12,920 --> 00:06:17,540
this comic that says compares

00:06:15,320 --> 00:06:20,600
programmers or developers to testers and

00:06:17,540 --> 00:06:22,280
the program is like I'm making something

00:06:20,600 --> 00:06:24,410
that the test is like I'm breaking

00:06:22,280 --> 00:06:26,720
something and that's really what this is

00:06:24,410 --> 00:06:28,910
about why do you want to break your

00:06:26,720 --> 00:06:30,410
stuff because if you break it someone

00:06:28,910 --> 00:06:34,340
else doesn't have the opportunity to

00:06:30,410 --> 00:06:37,490
write do you find an error you hopefully

00:06:34,340 --> 00:06:40,160
will fix it and how planet good

00:06:37,490 --> 00:06:42,950
reduction and then it won't fail

00:06:40,160 --> 00:06:45,260
that's good we want that why do we want

00:06:42,950 --> 00:06:47,570
that what you actually care if you

00:06:45,260 --> 00:06:52,580
produce work in software I personally

00:06:47,570 --> 00:06:54,920
think it's a bit of our responsibility

00:06:52,580 --> 00:06:57,590
personal responsibility as developers we

00:06:54,920 --> 00:07:00,800
build stuff for the world to run on ok

00:06:57,590 --> 00:07:02,480
we want that stuff to work we don't want

00:07:00,800 --> 00:07:05,060
to contribute to the house to this

00:07:02,480 --> 00:07:07,070
program today ok we want to build nice

00:07:05,060 --> 00:07:09,740
things and I hope you all kind of want

00:07:07,070 --> 00:07:13,070
to do that if that noble goal doesn't

00:07:09,740 --> 00:07:16,400
cut it for you want to save your dignity

00:07:13,070 --> 00:07:18,650
and money because errors that live in

00:07:16,400 --> 00:07:20,930
the wild are pretty expensive like a

00:07:18,650 --> 00:07:23,090
rocket blowing up that costs 400 million

00:07:20,930 --> 00:07:25,870
pretty expensive if you find that issue

00:07:23,090 --> 00:07:28,100
spent half an hour testing something

00:07:25,870 --> 00:07:32,180
finding the issue fixing that bit

00:07:28,100 --> 00:07:35,810
cheaper and also especially in the

00:07:32,180 --> 00:07:37,850
security scene where you have issues

00:07:35,810 --> 00:07:39,590
with security that can cause a lot of

00:07:37,850 --> 00:07:42,740
embarrassment if you have problems

00:07:39,590 --> 00:07:45,590
security issues or bugs stuff like that

00:07:42,740 --> 00:07:47,360
yeah so in reality combination of both I

00:07:45,590 --> 00:07:50,990
think this should make it clear why I

00:07:47,360 --> 00:07:53,540
want to test good I got the motivation

00:07:50,990 --> 00:07:55,700
covered hopefully now we're going to

00:07:53,540 --> 00:07:58,460
talk about the types of errors that you

00:07:55,700 --> 00:08:02,660
can reveal with tests the thing is I

00:07:58,460 --> 00:08:04,730
said testing is the process of finding

00:08:02,660 --> 00:08:06,770
errors ok which errors there's a bunch

00:08:04,730 --> 00:08:08,870
of errors can happen many different

00:08:06,770 --> 00:08:11,270
different errors we don't have time to

00:08:08,870 --> 00:08:13,700
cover them all so we're just gonna talk

00:08:11,270 --> 00:08:14,000
about regression tests on regression

00:08:13,700 --> 00:08:15,740
errors

00:08:14,000 --> 00:08:18,140
what's a regression it's something that

00:08:15,740 --> 00:08:21,050
if all if you've developed for more than

00:08:18,140 --> 00:08:22,850
a week you've already seen that it's

00:08:21,050 --> 00:08:26,690
this situation you develop some

00:08:22,850 --> 00:08:28,040
wonderful feature you build it and let's

00:08:26,690 --> 00:08:31,220
say you test did you make sure it works

00:08:28,040 --> 00:08:33,260
so you try to out try to break it and it

00:08:31,220 --> 00:08:34,970
doesn't break all good you say you push

00:08:33,260 --> 00:08:36,860
it to production it's fine let it run

00:08:34,970 --> 00:08:39,770
there you work on some other stuff three

00:08:36,860 --> 00:08:41,360
months later you decide to let's try my

00:08:39,770 --> 00:08:42,980
old feature again like just

00:08:41,360 --> 00:08:46,160
coincidentally you touch it it breaks

00:08:42,980 --> 00:08:48,020
like what the actual that's a regression

00:08:46,160 --> 00:08:51,110
you have something that used to work no

00:08:48,020 --> 00:08:51,910
it doesn't and everyone's like what

00:08:51,110 --> 00:08:54,700
happened

00:08:51,910 --> 00:08:58,900
yeah to avoid these kind of errors you

00:08:54,700 --> 00:09:01,030
have regression tests yeah so what do

00:08:58,900 --> 00:09:04,840
people do in reality to avoid

00:09:01,030 --> 00:09:07,690
regressions I've actually worked with

00:09:04,840 --> 00:09:09,430
places or seen places where each time

00:09:07,690 --> 00:09:12,940
they have a release let's say you have a

00:09:09,430 --> 00:09:16,660
release of some people's bank exhaust

00:09:12,940 --> 00:09:18,970
where every six months they would spend

00:09:16,660 --> 00:09:21,370
they have had a manual test suite with

00:09:18,970 --> 00:09:23,320
several thousand tests and they would

00:09:21,370 --> 00:09:26,650
before each release they would take a

00:09:23,320 --> 00:09:30,400
month with something like between 15 and

00:09:26,650 --> 00:09:32,980
20 testers and those testers would run a

00:09:30,400 --> 00:09:35,440
manual regression test suite for and

00:09:32,980 --> 00:09:37,960
months out of six months development

00:09:35,440 --> 00:09:39,360
time okay so if you have lots of

00:09:37,960 --> 00:09:41,830
features lots of stuff to test

00:09:39,360 --> 00:09:45,370
regression testing is gonna take a lot

00:09:41,830 --> 00:09:49,240
of time we're developers we're lazy we

00:09:45,370 --> 00:09:51,340
don't want to spend a month test each

00:09:49,240 --> 00:09:54,280
time we release it especially in today's

00:09:51,340 --> 00:09:54,870
world we have to release fast we can't

00:09:54,280 --> 00:09:59,020
really do that

00:09:54,870 --> 00:10:01,240
enter automation luckily smart people

00:09:59,020 --> 00:10:03,790
have developed a bunch of tools to allow

00:10:01,240 --> 00:10:05,680
us to automate this process so you don't

00:10:03,790 --> 00:10:08,290
have to each time you change something

00:10:05,680 --> 00:10:11,020
manually see if it still works you can

00:10:08,290 --> 00:10:13,780
instead write your tests by code so you

00:10:11,020 --> 00:10:15,700
see it here there's some and even know

00:10:13,780 --> 00:10:20,230
what the framework is basically you

00:10:15,700 --> 00:10:22,060
write the test code and that will do

00:10:20,230 --> 00:10:23,830
this process of putting stuff in

00:10:22,060 --> 00:10:25,720
checking if it works automatically and

00:10:23,830 --> 00:10:29,740
the good thing is well you spend some

00:10:25,720 --> 00:10:32,380
time developing the test beforehand but

00:10:29,740 --> 00:10:33,880
now you can rerun those tests at the

00:10:32,380 --> 00:10:35,980
press of a button and you see that here

00:10:33,880 --> 00:10:38,260
you don't even have to press something

00:10:35,980 --> 00:10:40,330
like the framework just detects if

00:10:38,260 --> 00:10:43,030
anything changed if you change your code

00:10:40,330 --> 00:10:48,070
it's gonna rerun your test and goes like

00:10:43,030 --> 00:10:51,790
this okay so test automation can really

00:10:48,070 --> 00:10:55,350
help you avoid these doing the same

00:10:51,790 --> 00:10:55,350
thing with testing over and over again

00:10:56,339 --> 00:11:02,220
what in an application can you test so

00:11:00,120 --> 00:11:04,290
we got covered okay what kind of errors

00:11:02,220 --> 00:11:08,059
do we check where we're gonna check them

00:11:04,290 --> 00:11:11,550
if you have some application there's

00:11:08,059 --> 00:11:13,290
very many ways to or many things to

00:11:11,550 --> 00:11:16,199
actually test the most intuitive thing

00:11:13,290 --> 00:11:20,100
would be let's assume you have an

00:11:16,199 --> 00:11:22,110
application that has this email input

00:11:20,100 --> 00:11:23,939
field where people enter the email and

00:11:22,110 --> 00:11:25,709
say okay and then at some point they're

00:11:23,939 --> 00:11:28,639
gonna get sent and registration may or

00:11:25,709 --> 00:11:31,350
something like that okay

00:11:28,639 --> 00:11:33,180
the intuitive thing maybe would be to

00:11:31,350 --> 00:11:35,100
have the automation system really

00:11:33,180 --> 00:11:38,339
interact with the application you'd have

00:11:35,100 --> 00:11:40,050
the web web thing with the input field

00:11:38,339 --> 00:11:42,480
and button and your framework would

00:11:40,050 --> 00:11:44,069
interact with that input field type

00:11:42,480 --> 00:11:45,959
something and automatically press the

00:11:44,069 --> 00:11:48,180
button now at some point it would check

00:11:45,959 --> 00:11:50,309
some mail server if an email with the

00:11:48,180 --> 00:11:53,339
correct content has arrived right would

00:11:50,309 --> 00:11:55,019
work but there's other ways to test the

00:11:53,339 --> 00:11:57,839
application you don't always have to

00:11:55,019 --> 00:12:00,889
test the whole thing together there's

00:11:57,839 --> 00:12:05,279
always a at the whole system end-to-end

00:12:00,889 --> 00:12:08,819
you can also simply take some components

00:12:05,279 --> 00:12:11,129
out of that system and test those like

00:12:08,819 --> 00:12:14,279
an isolation that for example an

00:12:11,129 --> 00:12:17,189
integration test where test components

00:12:14,279 --> 00:12:21,600
together or unit tests where you test a

00:12:17,189 --> 00:12:23,639
single component for example just up to

00:12:21,600 --> 00:12:25,499
make the class that sends me also it

00:12:23,639 --> 00:12:30,240
gets a string and it sends me you test

00:12:25,499 --> 00:12:33,029
that why do you do that two things first

00:12:30,240 --> 00:12:35,519
of all each of those levels so to speak

00:12:33,029 --> 00:12:37,559
reveals different errors again a very

00:12:35,519 --> 00:12:40,259
unit test that's very good at uncovering

00:12:37,559 --> 00:12:42,829
issues that are related to functionality

00:12:40,259 --> 00:12:45,019
some small issue with the component

00:12:42,829 --> 00:12:48,420
integration tests much better with

00:12:45,019 --> 00:12:50,879
finding issues that occur when different

00:12:48,420 --> 00:12:52,829
components don't quite work together as

00:12:50,879 --> 00:12:56,160
well as they should right what

00:12:52,829 --> 00:12:58,139
end-to-end tests imagine these really do

00:12:56,160 --> 00:13:01,800
basically what user does so they're

00:12:58,139 --> 00:13:04,290
often called acceptance tests that would

00:13:01,800 --> 00:13:06,000
detect like stuff like is a button

00:13:04,290 --> 00:13:07,709
actually visible because it will

00:13:06,000 --> 00:13:10,020
actually try to click the button and it

00:13:07,709 --> 00:13:12,540
isn't there well you found that

00:13:10,020 --> 00:13:16,620
so good at different things that's the

00:13:12,540 --> 00:13:19,170
fury part oh no it's not quite sorry

00:13:16,620 --> 00:13:23,250
the other thing with these levels is

00:13:19,170 --> 00:13:25,140
that they have equal clock and not equal

00:13:23,250 --> 00:13:28,410
they have different costs associated

00:13:25,140 --> 00:13:30,800
with them unit tests are very easy to

00:13:28,410 --> 00:13:33,540
write and they're very quick to run

00:13:30,800 --> 00:13:36,690
end-to-end tests not so much they're

00:13:33,540 --> 00:13:39,900
harder to write take longer to execute

00:13:36,690 --> 00:13:41,790
and this is what testing pyramids gonna

00:13:39,900 --> 00:13:47,070
come in who has already seen that before

00:13:41,790 --> 00:13:48,420
today ring okay how many times like then

00:13:47,070 --> 00:13:49,400
you how many times have you seen this in

00:13:48,420 --> 00:13:52,290
the talk

00:13:49,400 --> 00:13:54,030
exactly you're all gonna I'm happy that

00:13:52,290 --> 00:13:56,070
I'm the first one to actually show you

00:13:54,030 --> 00:13:58,050
see if you attend any tests about

00:13:56,070 --> 00:14:00,630
talking at all ever again you're gonna

00:13:58,050 --> 00:14:02,670
see this it's very very popular because

00:14:00,630 --> 00:14:05,070
it's true tells you how to automate your

00:14:02,670 --> 00:14:07,350
how should your automation test suite

00:14:05,070 --> 00:14:08,550
look lots of unit tests bunch of

00:14:07,350 --> 00:14:10,410
integration tests not too many

00:14:08,550 --> 00:14:13,140
end-to-end tests so the balance between

00:14:10,410 --> 00:14:15,750
cost and risk what kind of issues can

00:14:13,140 --> 00:14:19,470
you find how much money do you want want

00:14:15,750 --> 00:14:24,750
to spend that's it with fury but LS

00:14:19,470 --> 00:14:27,420
there's no life demo instead I whipped

00:14:24,750 --> 00:14:32,690
up the quick application that I would

00:14:27,420 --> 00:14:37,140
normally how do I get out of full screen

00:14:32,690 --> 00:14:39,560
no no it doesn't work in something ctrl

00:14:37,140 --> 00:14:39,560
P

00:14:40,410 --> 00:14:45,990
come and control shift F command shift

00:14:44,230 --> 00:14:49,930
them we got it

00:14:45,990 --> 00:14:54,280
I'm not on that user in case you haven't

00:14:49,930 --> 00:14:55,720
noticed all right so I whipped up a

00:14:54,280 --> 00:14:57,460
quick application that I would normally

00:14:55,720 --> 00:14:59,860
I provide a test suite and would

00:14:57,460 --> 00:15:01,360
normally run that we quite can't do that

00:14:59,860 --> 00:15:03,310
so instead I'm gonna show you the

00:15:01,360 --> 00:15:05,980
application I will show you the tests I

00:15:03,310 --> 00:15:09,040
wrote and you just have to imagine that

00:15:05,980 --> 00:15:14,260
they actually run okay if you can do

00:15:09,040 --> 00:15:16,510
that use your fantasy so let's look at

00:15:14,260 --> 00:15:20,830
the application first fair word of

00:15:16,510 --> 00:15:22,390
warning I had to come up with an idea

00:15:20,830 --> 00:15:24,220
what am I going to build that's easily

00:15:22,390 --> 00:15:25,930
testable and demonstrate some concepts

00:15:24,220 --> 00:15:28,000
of testing and the only thing my brain

00:15:25,930 --> 00:15:29,770
could come up with was let's make an

00:15:28,000 --> 00:15:31,450
application where you manage kittens

00:15:29,770 --> 00:15:35,740
that fight each other to the death kind

00:15:31,450 --> 00:15:37,870
of thing I don't know so this is not it

00:15:35,740 --> 00:15:39,900
because that doesn't work sorry about

00:15:37,870 --> 00:15:39,900
that

00:15:48,399 --> 00:15:53,380
enter right

00:15:50,350 --> 00:15:57,550
what isn't gonna oh my god

00:15:53,380 --> 00:16:01,149
did I mention a mother Mac user Jesus

00:15:57,550 --> 00:16:01,149
what they need to do

00:16:01,570 --> 00:16:16,010
don't it all right what yeah yep

00:16:07,450 --> 00:16:21,610
okay how they'll copy it c'mon see no no

00:16:16,010 --> 00:16:38,410
not enter another hit enter and see and

00:16:21,610 --> 00:16:38,410
now okay can i paste something here

00:16:45,850 --> 00:17:06,309
caps-lock maybe like that maybe we found

00:16:53,180 --> 00:17:06,309
the path through testing okay like that

00:17:15,160 --> 00:17:20,699
maybe may pass it need the Sydney HT

00:17:18,839 --> 00:17:25,650
[Music]

00:17:20,699 --> 00:17:25,650
does it need like an HTTP in front maybe

00:17:34,860 --> 00:17:38,640
can i press enter now

00:17:46,430 --> 00:18:02,960
I love that all right

00:17:54,760 --> 00:18:06,710
sorry yes so all right so right so I

00:18:02,960 --> 00:18:08,240
made this a monstrosity you can see you

00:18:06,710 --> 00:18:10,430
have a list of kittens all right and

00:18:08,240 --> 00:18:12,020
it's fairly simple you can also edit and

00:18:10,430 --> 00:18:19,030
delete them let's have a look at some

00:18:12,020 --> 00:18:19,030
kittens I don't like that one I please

00:18:19,750 --> 00:18:27,560
didn't test it know what's actually

00:18:25,070 --> 00:18:30,200
happening I didn't test it on Safari

00:18:27,560 --> 00:18:32,810
that's exactly right okay we'll just

00:18:30,200 --> 00:18:35,420
have to do it that way so as you can see

00:18:32,810 --> 00:18:37,220
you you can put in some stuff and it

00:18:35,420 --> 00:18:39,050
should hopefully yeah so it will update

00:18:37,220 --> 00:18:43,700
this score that tells you how much is

00:18:39,050 --> 00:18:45,710
this kitten is okay and so what can you

00:18:43,700 --> 00:18:48,050
test you can do unit tests or end-to-end

00:18:45,710 --> 00:18:50,620
tests let's look at that God are the

00:18:48,050 --> 00:18:58,360
same thing again with get up how can I

00:18:50,620 --> 00:19:01,360
do a new tab okay

00:18:58,360 --> 00:19:01,360
calm

00:19:04,230 --> 00:19:09,730
so I'm gonna just quickly show you what

00:19:07,480 --> 00:19:12,429
the unit test could look like all right

00:19:09,730 --> 00:19:21,610
for that and like I said you will have

00:19:12,429 --> 00:19:23,140
to imagine that they just work right so

00:19:21,610 --> 00:19:28,030
this is an angular application it

00:19:23,140 --> 00:19:29,710
doesn't really matter that it is just

00:19:28,030 --> 00:19:31,300
gonna he'll look so this what I showed

00:19:29,710 --> 00:19:33,490
you that the score that's calculated

00:19:31,300 --> 00:19:35,590
that's a perfect example for thing you

00:19:33,490 --> 00:19:37,540
can unit test okay because it's fairly

00:19:35,590 --> 00:19:42,070
simple just take some values and puts

00:19:37,540 --> 00:19:46,059
out the number so let's look at what the

00:19:42,070 --> 00:19:48,160
code look looks like so that's it

00:19:46,059 --> 00:19:50,710
doesn't really matter what the syntax

00:19:48,160 --> 00:19:53,710
like you have this component the battle

00:19:50,710 --> 00:19:56,429
score service well as a method calculate

00:19:53,710 --> 00:20:00,429
battle points that takes a kitten and

00:19:56,429 --> 00:20:02,110
returns a number okay and what does it

00:20:00,429 --> 00:20:03,580
do then well if the kittens now there's

00:20:02,110 --> 00:20:05,800
nothing to return to return zero

00:20:03,580 --> 00:20:08,080
otherwise it takes the attributes of the

00:20:05,800 --> 00:20:10,530
kitten cuteness speed blah blah blah and

00:20:08,080 --> 00:20:14,380
calculates your battle points easy peasy

00:20:10,530 --> 00:20:19,120
so very clear what the function is very

00:20:14,380 --> 00:20:21,280
easy to test unit test right this is a

00:20:19,120 --> 00:20:25,330
unit a simple simple component simple

00:20:21,280 --> 00:20:30,280
function to test now let's have a look

00:20:25,330 --> 00:20:33,850
at the test it more stuff still come

00:20:30,280 --> 00:20:36,700
move so I have to imagine me pointing so

00:20:33,850 --> 00:20:38,740
this is a test file and remember what a

00:20:36,700 --> 00:20:40,780
test looks like just run back you have a

00:20:38,740 --> 00:20:42,070
component you have some input and you

00:20:40,780 --> 00:20:43,630
have some expected result we're gonna

00:20:42,070 --> 00:20:46,450
use that here first of all you can see

00:20:43,630 --> 00:20:48,640
in like the line fix line nine we create

00:20:46,450 --> 00:20:51,250
a system the thing that we want to test

00:20:48,640 --> 00:20:53,110
in this case it's a battle score service

00:20:51,250 --> 00:20:55,330
the component we want to test or

00:20:53,110 --> 00:20:57,520
calculator whatever and then we have

00:20:55,330 --> 00:20:59,580
actual test cases that start with it in

00:20:57,520 --> 00:21:02,970
line twelve twenty

00:20:59,580 --> 00:21:05,380
let's look at the first one line twelve

00:21:02,970 --> 00:21:06,820
first of all has a name what does it do

00:21:05,380 --> 00:21:09,580
it should return a correct battle score

00:21:06,820 --> 00:21:12,190
and then you set up your input remember

00:21:09,580 --> 00:21:15,309
the input of the battle service function

00:21:12,190 --> 00:21:16,300
was a kitten or a create one with its

00:21:15,309 --> 00:21:19,060
attributes

00:21:16,300 --> 00:21:21,510
strength and so forth next line after

00:21:19,060 --> 00:21:24,520
that is the actual execution of the test

00:21:21,510 --> 00:21:26,680
where we take the function and we put

00:21:24,520 --> 00:21:29,890
stuff in this is our actual let's do it

00:21:26,680 --> 00:21:32,230
part and then we record the result now

00:21:29,890 --> 00:21:34,120
the last thing we have to do we compare

00:21:32,230 --> 00:21:36,850
the actual result with what we get back

00:21:34,120 --> 00:21:39,100
and that's the expect expect the result

00:21:36,850 --> 00:21:43,120
that would we actually get with what we

00:21:39,100 --> 00:21:44,380
want should be can and similarly we test

00:21:43,120 --> 00:21:47,710
if it works for now

00:21:44,380 --> 00:21:50,170
easy-peasy right normally it's a an

00:21:47,710 --> 00:21:53,590
issue of just executing command in this

00:21:50,170 --> 00:21:55,330
case ng test and this will run all your

00:21:53,590 --> 00:21:57,790
tests automatically and will also watch

00:21:55,330 --> 00:22:00,490
your files for changes and if you break

00:21:57,790 --> 00:22:02,890
the application you affect it and you do

00:22:00,490 --> 00:22:04,480
something bad we will show you well you

00:22:02,890 --> 00:22:06,070
have an issue easy peasy

00:22:04,480 --> 00:22:09,550
let's have a look at the end-to-end

00:22:06,070 --> 00:22:11,920
tests so this is the component a single

00:22:09,550 --> 00:22:16,260
component that we can test and go back

00:22:11,920 --> 00:22:19,090
to the application something that is

00:22:16,260 --> 00:22:22,330
lends itself to an end-to-end test would

00:22:19,090 --> 00:22:25,720
be scenarios like does it display it

00:22:22,330 --> 00:22:28,210
lists in the index correctly or when I

00:22:25,720 --> 00:22:30,820
press delete is it actually removed from

00:22:28,210 --> 00:22:32,920
the list or if I edit it in the Edit

00:22:30,820 --> 00:22:35,860
field is it actually updated in the

00:22:32,920 --> 00:22:37,660
index things like that so multiple views

00:22:35,860 --> 00:22:39,940
needs the whole application that would

00:22:37,660 --> 00:22:42,870
be an end-to-end test and we're going to

00:22:39,940 --> 00:22:46,900
have a look at what an end-to-end test

00:22:42,870 --> 00:22:49,840
looks like angular luckily makes it's

00:22:46,900 --> 00:22:52,420
fairly easy to set this kind of stuff up

00:22:49,840 --> 00:22:55,300
like I said another front end death so

00:22:52,420 --> 00:22:58,570
I'm pretty happy and you already noticed

00:22:55,300 --> 00:23:01,210
when we look at this app's back end to

00:22:58,570 --> 00:23:03,460
end test file it's a bit more involved

00:23:01,210 --> 00:23:05,230
right you have stuff like page that

00:23:03,460 --> 00:23:06,850
navigate to I mean the concept is the

00:23:05,230 --> 00:23:10,300
same you do something and then you have

00:23:06,850 --> 00:23:13,660
an expectation an expected result

00:23:10,300 --> 00:23:16,300
but you see gets longer involves more

00:23:13,660 --> 00:23:18,730
pages for example in line 25 which is

00:23:16,300 --> 00:23:21,400
check if we click the button remove it

00:23:18,730 --> 00:23:24,070
from the list and you see it's already

00:23:21,400 --> 00:23:27,970
getting a bit like longer and needs more

00:23:24,070 --> 00:23:30,160
syntax also maintenance is harder you

00:23:27,970 --> 00:23:33,130
see that we calculate we

00:23:30,160 --> 00:23:36,610
get items by selecting the links in the

00:23:33,130 --> 00:23:38,860
actual HTML all right imagine if you

00:23:36,610 --> 00:23:41,740
change that up if you give it if you use

00:23:38,860 --> 00:23:43,660
CSS selectors and you change your CSS

00:23:41,740 --> 00:23:47,680
your tests are going to break that won't

00:23:43,660 --> 00:23:49,480
happen with your unit test good how the

00:23:47,680 --> 00:23:55,170
hell I'm gonna get to my presentation

00:23:49,480 --> 00:23:58,450
Chrome where was it yeah it is ok so

00:23:55,170 --> 00:24:01,060
that was the practical part sorry again

00:23:58,450 --> 00:24:01,960
it didn't work out let's summarize what

00:24:01,060 --> 00:24:04,510
we've learnt today

00:24:01,960 --> 00:24:06,550
first of all programming is its own kind

00:24:04,510 --> 00:24:10,600
of hellscape which I hope you don't have

00:24:06,550 --> 00:24:11,400
to learn too much but testing can help

00:24:10,600 --> 00:24:15,550
you with that

00:24:11,400 --> 00:24:18,280
ok we learned about regression tests why

00:24:15,550 --> 00:24:20,380
use them and we also talked about what

00:24:18,280 --> 00:24:23,710
test automation and test louses so I

00:24:20,380 --> 00:24:27,660
hope I didn't give you too much stuff

00:24:23,710 --> 00:24:31,510
like okay they're risky show of hands

00:24:27,660 --> 00:24:34,750
who's kind of like this was a bit too

00:24:31,510 --> 00:24:35,170
much for me like I did that who is like

00:24:34,750 --> 00:24:38,380
that

00:24:35,170 --> 00:24:41,680
show of hands okay one two all right

00:24:38,380 --> 00:24:45,880
too fast who could follow along nicely

00:24:41,680 --> 00:24:50,400
and understood most of stuff thank you

00:24:45,880 --> 00:24:52,450
and who's like I don't give up okay mine

00:24:50,400 --> 00:24:54,070
so that's what a summary if you're

00:24:52,450 --> 00:24:56,860
interested to learn more about testing

00:24:54,070 --> 00:24:58,750
first of all just send me a message I'm

00:24:56,860 --> 00:25:00,490
always happy to help people out like I

00:24:58,750 --> 00:25:02,260
said I'm very passionate about testing

00:25:00,490 --> 00:25:03,820
let me know what you think let me know

00:25:02,260 --> 00:25:06,130
if you have some problems with testing

00:25:03,820 --> 00:25:08,380
something specific talk over that and

00:25:06,130 --> 00:25:10,300
there's some great books out of software

00:25:08,380 --> 00:25:11,860
testing or the art of unit testing and

00:25:10,300 --> 00:25:13,690
you can also visit the Ministry of

00:25:11,860 --> 00:25:16,660
testing website they've great resources

00:25:13,690 --> 00:25:19,090
so that's it from my side you can check

00:25:16,660 --> 00:25:21,010
out the slides hosted them with review

00:25:19,090 --> 00:25:24,490
just gonna have a look at the other

00:25:21,010 --> 00:25:27,010
thing what was it we mark Jess gotta

00:25:24,490 --> 00:25:29,230
check that out and yeah do we have time

00:25:27,010 --> 00:25:30,040
for questions

00:25:29,230 --> 00:25:33,790
yep

00:25:30,040 --> 00:25:33,790

YouTube URL: https://www.youtube.com/watch?v=wxhElTuvztw


