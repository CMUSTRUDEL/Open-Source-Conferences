Title: FreeCodeCamp Vienna, Introduction to GraphQL, October 2019
Publication date: 2019-10-12
Playlist: FreeCodeCamp Vienna
Description: 
	Talk by Sebastian Schenk

A short introduction of GraphQL and how it is diffrent from classic RESTful APIs.
Captions: 
	00:00:00,030 --> 00:00:04,580
today I would like to introduce you to

00:00:01,860 --> 00:00:07,980
cough quail which is cool technology

00:00:04,580 --> 00:00:09,990
created by Facebook and I want to show

00:00:07,980 --> 00:00:15,770
you how to use it and what use cases

00:00:09,990 --> 00:00:18,029
there are and yeah furthermore this

00:00:15,770 --> 00:00:21,000
presentation will be more about the

00:00:18,029 --> 00:00:24,420
tools and the code and less about slides

00:00:21,000 --> 00:00:27,840
so just for information first of all we

00:00:24,420 --> 00:00:29,779
start with the basics what is an API an

00:00:27,840 --> 00:00:33,870
API stands for application programming

00:00:29,779 --> 00:00:36,090
interface which can be many things what

00:00:33,870 --> 00:00:38,610
we are talking about today is the

00:00:36,090 --> 00:00:42,719
contract between the front end and the

00:00:38,610 --> 00:00:45,230
back end in the simple use case we use

00:00:42,719 --> 00:00:50,940
that for crud operations which means

00:00:45,230 --> 00:00:52,800
create read update and delete so let's

00:00:50,940 --> 00:00:55,110
start with the most common case of an

00:00:52,800 --> 00:00:58,590
API in today's applications

00:00:55,110 --> 00:01:01,020
it's called restful api i guess most of

00:00:58,590 --> 00:01:04,799
you already heard of that and used it

00:01:01,020 --> 00:01:08,250
probably it's it stands for

00:01:04,799 --> 00:01:12,330
representational state transfer and it

00:01:08,250 --> 00:01:14,970
means that we transfer the state of a

00:01:12,330 --> 00:01:18,810
remote server or something to the front

00:01:14,970 --> 00:01:21,330
end and a representation of that it is

00:01:18,810 --> 00:01:23,369
the de facto standard for today's web

00:01:21,330 --> 00:01:27,030
api s-- that you will find all over the

00:01:23,369 --> 00:01:29,369
place it uses the standard HTTP methods

00:01:27,030 --> 00:01:31,729
to interact with the resources so

00:01:29,369 --> 00:01:34,020
depending on the method you using

00:01:31,729 --> 00:01:35,009
different operations are executed on

00:01:34,020 --> 00:01:38,640
those resources

00:01:35,009 --> 00:01:41,009
it is stateless with me which means the

00:01:38,640 --> 00:01:45,390
backend and the server does not know

00:01:41,009 --> 00:01:49,049
about the state of the front-end so this

00:01:45,390 --> 00:01:52,700
is you a huge benefit and it's cashable

00:01:49,049 --> 00:01:55,530
because browsers they include cache

00:01:52,700 --> 00:01:57,630
functionality for certain endpoints

00:01:55,530 --> 00:02:00,990
which can be used with restful api

00:01:57,630 --> 00:02:03,210
switch will well reduce the load that is

00:02:00,990 --> 00:02:08,310
going through the server actually since

00:02:03,210 --> 00:02:12,000
the browser can cache all this data so

00:02:08,310 --> 00:02:14,760
what is graph creo graph coil is a query

00:02:12,000 --> 00:02:17,490
language for your api

00:02:14,760 --> 00:02:21,690
it is quite loosely coupled with the

00:02:17,490 --> 00:02:26,580
HTTP methods it uses one but that's

00:02:21,690 --> 00:02:28,950
actually not a requirement it is a type

00:02:26,580 --> 00:02:31,050
system which means you define all the

00:02:28,950 --> 00:02:33,270
types if it's you know data types like

00:02:31,050 --> 00:02:36,120
strings and boolean and stuff like that

00:02:33,270 --> 00:02:38,550
and it defined a schemer of the data

00:02:36,120 --> 00:02:41,760
structure you are providing to your

00:02:38,550 --> 00:02:45,150
clients which is quite different from a

00:02:41,760 --> 00:02:48,330
RESTful API where you well define the

00:02:45,150 --> 00:02:50,519
resources and this is what everyone gets

00:02:48,330 --> 00:02:53,400
so they cannot choose between what they

00:02:50,519 --> 00:02:55,470
want to have so you cannot really query

00:02:53,400 --> 00:02:59,130
the things as you would could as you

00:02:55,470 --> 00:03:02,130
would do that with cough query it is not

00:02:59,130 --> 00:03:05,400
tied to the data origin so it's

00:03:02,130 --> 00:03:07,530
basically well you can build up a craft

00:03:05,400 --> 00:03:09,840
rails server and connect it to different

00:03:07,530 --> 00:03:12,330
other endpoints like restful endpoints

00:03:09,840 --> 00:03:15,840
or directly to a database or anything

00:03:12,330 --> 00:03:18,480
like that and the cool thing is you can

00:03:15,840 --> 00:03:21,090
use it with HTTP or WebSockets which

00:03:18,480 --> 00:03:24,299
means it also allows you to use it to

00:03:21,090 --> 00:03:28,680
create a real-time system with graph

00:03:24,299 --> 00:03:31,950
query which is also quite amazing here's

00:03:28,680 --> 00:03:34,380
a short comparison like how a restful

00:03:31,950 --> 00:03:37,650
call would look like compared to a craft

00:03:34,380 --> 00:03:39,989
whale so like what you're seeing here

00:03:37,650 --> 00:03:43,680
there's an API called sloppy it's the

00:03:39,989 --> 00:03:47,640
Star Wars API and this is would be an

00:03:43,680 --> 00:03:50,970
API call for fetching people and

00:03:47,640 --> 00:03:53,190
depending on what HTTP method you're

00:03:50,970 --> 00:03:54,930
using here you interact differently with

00:03:53,190 --> 00:03:57,000
the resource behind that so with a

00:03:54,930 --> 00:03:59,310
normal gap you would would like to get a

00:03:57,000 --> 00:04:02,850
list of people with a post you would

00:03:59,310 --> 00:04:04,170
create a new person we've put you would

00:04:02,850 --> 00:04:07,319
update that but I will come to that

00:04:04,170 --> 00:04:09,390
later with craft whale you're in most

00:04:07,319 --> 00:04:13,200
libraries you only use one effort which

00:04:09,390 --> 00:04:17,370
would be the post method and you also

00:04:13,200 --> 00:04:19,530
won't have endpoint for each resource

00:04:17,370 --> 00:04:21,750
you just have the craft whale endpoint

00:04:19,530 --> 00:04:23,669
and depending on the query you are

00:04:21,750 --> 00:04:27,210
sending which you are sending with the

00:04:23,669 --> 00:04:29,780
body you interact with this

00:04:27,210 --> 00:04:32,580
resource and then you can define what

00:04:29,780 --> 00:04:34,979
data of this resource you would like to

00:04:32,580 --> 00:04:37,470
fetch in this case I would make a query

00:04:34,979 --> 00:04:39,389
against the whole person schema and say

00:04:37,470 --> 00:04:43,020
hey only give me the name of all the

00:04:39,389 --> 00:04:46,470
persons compared to restful web look at

00:04:43,020 --> 00:04:53,490
all the data that is like defined in the

00:04:46,470 --> 00:04:56,400
restful api a quick review on HTTP

00:04:53,490 --> 00:04:58,169
methods there are more than those I am

00:04:56,400 --> 00:05:02,250
showing you currently but they are the

00:04:58,169 --> 00:05:04,199
most important one for restful api s so

00:05:02,250 --> 00:05:06,539
the first one would be a get some effort

00:05:04,199 --> 00:05:08,940
which is there to retrieve data the

00:05:06,539 --> 00:05:11,520
other one would be a post but which is

00:05:08,940 --> 00:05:12,870
there for creating new resources the

00:05:11,520 --> 00:05:16,919
letter at the end is the like the

00:05:12,870 --> 00:05:19,590
corrupt letter we have in here like ours

00:05:16,919 --> 00:05:22,710
for read and C's for create put in

00:05:19,590 --> 00:05:24,810
patches for updating resources where you

00:05:22,710 --> 00:05:28,680
can use put to update the entire object

00:05:24,810 --> 00:05:31,400
or patch to partially update it and then

00:05:28,680 --> 00:05:36,389
we have to delete an effort to delete

00:05:31,400 --> 00:05:38,880
resources compared to that we have to

00:05:36,389 --> 00:05:40,979
craft well operations because we're

00:05:38,880 --> 00:05:44,039
always using the post method for Cal Cal

00:05:40,979 --> 00:05:47,669
we cannot interact with our resources in

00:05:44,039 --> 00:05:49,680
that way so we have to tell our endpoint

00:05:47,669 --> 00:05:52,020
server what we want to do with the data

00:05:49,680 --> 00:05:55,050
and therefore we have three operations

00:05:52,020 --> 00:05:58,800
namely query which is basically clearly

00:05:55,050 --> 00:06:03,330
any kind of information mutation which

00:05:58,800 --> 00:06:06,050
is used for changing adding data in any

00:06:03,330 --> 00:06:09,690
kind and also doing side effects

00:06:06,050 --> 00:06:12,180
everywhere subscriptions which are used

00:06:09,690 --> 00:06:14,389
for real-time communication so I can

00:06:12,180 --> 00:06:17,370
subscribe to a certain set of data and

00:06:14,389 --> 00:06:19,530
this is mostly used with WebSockets

00:06:17,370 --> 00:06:21,690
and then I get real life updates about

00:06:19,530 --> 00:06:24,150
this resource and only about the data

00:06:21,690 --> 00:06:25,770
I'm really asking for which is of course

00:06:24,150 --> 00:06:27,870
great when you're using it for like

00:06:25,770 --> 00:06:30,539
mobile applications because then you can

00:06:27,870 --> 00:06:33,270
really have small amounts of data which

00:06:30,539 --> 00:06:34,740
are transferred over the line and those

00:06:33,270 --> 00:06:37,580
kinds of things are important for mobile

00:06:34,740 --> 00:06:37,580
applications of course

00:06:38,539 --> 00:06:44,219
here we have like an overview of

00:06:40,999 --> 00:06:47,309
available libraries I think I won't get

00:06:44,219 --> 00:06:48,809
into detail about that right now just as

00:06:47,309 --> 00:06:52,729
an overview there are many libraries

00:06:48,809 --> 00:06:57,179
available like I already said CAF 12 was

00:06:52,729 --> 00:07:00,449
invented by Facebook so this naturally

00:06:57,179 --> 00:07:03,360
means there is a huge amount of

00:07:00,449 --> 00:07:06,989
libraries for a react day out there one

00:07:03,360 --> 00:07:10,589
also built by Facebook itself for the

00:07:06,989 --> 00:07:12,569
other frameworks it's not well it's okay

00:07:10,589 --> 00:07:16,189
there's one big play around it's called

00:07:12,569 --> 00:07:19,739
a polo polo is a bigger company already

00:07:16,189 --> 00:07:22,729
in this company or the members of the

00:07:19,739 --> 00:07:26,219
company they also had a big saying in

00:07:22,729 --> 00:07:27,299
creating the graph credit raft and how

00:07:26,219 --> 00:07:29,479
it's worked the heart is working

00:07:27,299 --> 00:07:33,719
especially about the subscription part

00:07:29,479 --> 00:07:35,429
and a polo is not all only as providing

00:07:33,719 --> 00:07:37,049
front-end libraries but also packet

00:07:35,429 --> 00:07:39,539
libraries to serve a part of the whole

00:07:37,049 --> 00:07:41,789
thing but there are also other libraries

00:07:39,539 --> 00:07:43,919
what you will see when you try to

00:07:41,789 --> 00:07:47,550
discover the available libraries that

00:07:43,919 --> 00:07:49,409
are out there you will see that cafe was

00:07:47,550 --> 00:07:51,300
primarily built for no chests in the

00:07:49,409 --> 00:07:53,939
first place so the reference

00:07:51,300 --> 00:07:56,969
implementation provided by Facebook is

00:07:53,939 --> 00:08:00,809
also beautiful no chairs so for all the

00:07:56,969 --> 00:08:03,300
other technologies it can be hard to

00:08:00,809 --> 00:08:04,739
find something it can be especially hard

00:08:03,300 --> 00:08:08,459
to find something that is also

00:08:04,739 --> 00:08:10,649
maintained properly but there are things

00:08:08,459 --> 00:08:13,169
like for.net technologies and Java you

00:08:10,649 --> 00:08:14,759
will find things but it's also an

00:08:13,169 --> 00:08:17,669
architectural question if you actually

00:08:14,759 --> 00:08:20,069
want to Inc to create your graph Creole

00:08:17,669 --> 00:08:22,259
server directly into your packet that is

00:08:20,069 --> 00:08:23,729
providing the data there would be other

00:08:22,259 --> 00:08:26,099
approaches where you would have like a

00:08:23,729 --> 00:08:29,399
craft corel server as like an api

00:08:26,099 --> 00:08:33,199
gateway connecting all the other service

00:08:29,399 --> 00:08:35,219
behind that to the outside world so

00:08:33,199 --> 00:08:40,889
depends on how you really want to use

00:08:35,219 --> 00:08:43,529
that then there are best practices of

00:08:40,889 --> 00:08:46,079
course when you first try to get into

00:08:43,529 --> 00:08:48,209
craft quayle you will find all the basic

00:08:46,079 --> 00:08:49,329
demos and all the basic use cases how to

00:08:48,209 --> 00:08:51,239
use that

00:08:49,329 --> 00:08:54,249
when you get deeper into that you will

00:08:51,239 --> 00:08:56,769
have questions about how do I do

00:08:54,249 --> 00:08:58,869
pagination in craft wear how do i do

00:08:56,769 --> 00:09:01,929
caching and all those things because

00:08:58,869 --> 00:09:06,989
like I said before with a RESTful API

00:09:01,929 --> 00:09:10,360
you get default caching by default yeah

00:09:06,989 --> 00:09:12,189
you don't get that with craft Grail

00:09:10,360 --> 00:09:13,959
because there's only this postman method

00:09:12,189 --> 00:09:16,869
you're using this is not supported by

00:09:13,959 --> 00:09:21,489
any browser to be cached so you have to

00:09:16,869 --> 00:09:23,860
come up with other ways and that would

00:09:21,489 --> 00:09:25,239
be the short introduction on what is

00:09:23,860 --> 00:09:28,769
graphic well and I would like to get

00:09:25,239 --> 00:09:28,769
into it and show you how it relays

00:09:29,549 --> 00:09:39,040
so let's exit this presentation first of

00:09:36,610 --> 00:09:41,019
all to give you a better impression of

00:09:39,040 --> 00:09:42,519
what I just said I would like to show

00:09:41,019 --> 00:09:46,600
the real data on how this really works

00:09:42,519 --> 00:09:47,519
so this is the sloppy API for this

00:09:46,600 --> 00:09:50,259
Devastator

00:09:47,519 --> 00:10:00,100
but you can see here for example is now

00:09:50,259 --> 00:10:03,369
a simple call against the API that is

00:10:00,100 --> 00:10:05,350
delivering a list of all the people who

00:10:03,369 --> 00:10:08,850
showed up in stock or not the most

00:10:05,350 --> 00:10:11,459
important ones and as you can see here I

00:10:08,850 --> 00:10:13,809
get all the data they have about those

00:10:11,459 --> 00:10:17,669
characters I get the name I get to hide

00:10:13,809 --> 00:10:17,669
the mess hair color and all those things

00:10:18,089 --> 00:10:23,919
it's often the use case that you like

00:10:20,889 --> 00:10:27,489
you would like to have a certain type of

00:10:23,919 --> 00:10:30,429
resource but you only need a portion of

00:10:27,489 --> 00:10:33,939
this data like imagine you would like to

00:10:30,429 --> 00:10:35,679
display a table of people and in this

00:10:33,939 --> 00:10:38,139
table you only want to show the name and

00:10:35,679 --> 00:10:39,549
the height and maybe the age and on

00:10:38,139 --> 00:10:42,040
another site on another page you would

00:10:39,549 --> 00:10:44,079
like to show way more than that in order

00:10:42,040 --> 00:10:46,600
to achieve this with a restful api you

00:10:44,079 --> 00:10:49,149
have to define different endpoints to

00:10:46,600 --> 00:10:52,269
get there with craftwell on the other

00:10:49,149 --> 00:10:56,110
hand just for information there is a

00:10:52,269 --> 00:10:58,480
tool called graph equal it basically

00:10:56,110 --> 00:11:01,089
explores the schema of your craft quayle

00:10:58,480 --> 00:11:02,980
endpoint and gives you this nice editor

00:11:01,089 --> 00:11:04,750
in order to

00:11:02,980 --> 00:11:08,980
play around with it to try it out and

00:11:04,750 --> 00:11:11,610
get also documentation out of it here in

00:11:08,980 --> 00:11:15,520
this case I defined a small query the

00:11:11,610 --> 00:11:17,530
equivalent to what I just show you here

00:11:15,520 --> 00:11:19,680
I say give me all persons and from all

00:11:17,530 --> 00:11:23,830
the persons just give me the name and

00:11:19,680 --> 00:11:26,380
when I execute that now you see here

00:11:23,830 --> 00:11:29,410
that I get now my list again of all the

00:11:26,380 --> 00:11:32,080
people who are characters in Star Wars

00:11:29,410 --> 00:11:34,510
but only a name which is great because

00:11:32,080 --> 00:11:36,280
now I can use the same schema for

00:11:34,510 --> 00:11:38,830
different views for different UI

00:11:36,280 --> 00:11:41,440
elements and use it over and over again

00:11:38,830 --> 00:11:45,490
so now I could just say like give me

00:11:41,440 --> 00:11:47,590
also the birth year and bam I get it

00:11:45,490 --> 00:11:50,080
without any changes to the back end

00:11:47,590 --> 00:11:53,560
which be good but this would be normally

00:11:50,080 --> 00:11:55,300
the case with a normal restful api so as

00:11:53,560 --> 00:11:56,920
you can see also the whole development

00:11:55,300 --> 00:11:58,840
process would be a little bit different

00:11:56,920 --> 00:12:01,240
because from now on I don't have to go

00:11:58,840 --> 00:12:02,980
to my back-end people and say hey can

00:12:01,240 --> 00:12:05,260
you add this property for me now I just

00:12:02,980 --> 00:12:08,140
say okay this is the schemer this is

00:12:05,260 --> 00:12:11,170
potentially the data I will need sooner

00:12:08,140 --> 00:12:15,490
or later and then we can create these

00:12:11,170 --> 00:12:19,230
endpoints to show you a little bit how

00:12:15,490 --> 00:12:24,670
this would look like on the code side I

00:12:19,230 --> 00:12:27,870
started a little demo server here which

00:12:24,670 --> 00:12:29,680
is basically like a just a github Fork I

00:12:27,870 --> 00:12:35,770
can tell you later

00:12:29,680 --> 00:12:37,630
what project exactly is so here you can

00:12:35,770 --> 00:12:44,640
say this is like a book library I can

00:12:37,630 --> 00:12:47,640
add books offers and I can also assure

00:12:44,640 --> 00:12:47,640
better

00:12:48,940 --> 00:12:55,990
so like what you're seeing here the cool

00:12:54,160 --> 00:12:58,600
thing about this editor is I can add

00:12:55,990 --> 00:13:00,370
multiple queries and mutations and

00:12:58,600 --> 00:13:03,310
everything and then when I hit the play

00:13:00,370 --> 00:13:06,460
button I can select what action I would

00:13:03,310 --> 00:13:10,300
like to perform now I say like get all

00:13:06,460 --> 00:13:11,860
the offers and I get the list of all the

00:13:10,300 --> 00:13:16,810
offers I have currently my database

00:13:11,860 --> 00:13:17,500
which is only their Brown the query

00:13:16,810 --> 00:13:21,040
would look like that

00:13:17,500 --> 00:13:24,430
that I say ok get offers this is like

00:13:21,040 --> 00:13:28,330
the advanced way to write a query where

00:13:24,430 --> 00:13:30,190
I give the query a name this is this is

00:13:28,330 --> 00:13:32,350
something you can use for debugging so

00:13:30,190 --> 00:13:35,800
you know what query maybe failed or not

00:13:32,350 --> 00:13:37,990
so this is quite cool then I say what

00:13:35,800 --> 00:13:39,940
resource I would like to query and what

00:13:37,990 --> 00:13:42,880
fields of this resource I would like to

00:13:39,940 --> 00:13:45,220
query in this case ID name and age but

00:13:42,880 --> 00:13:49,660
it could also say okay give me all the

00:13:45,220 --> 00:13:51,850
books and in this case books is also

00:13:49,660 --> 00:13:55,240
again like the name says the plural

00:13:51,850 --> 00:13:57,550
books a list of books and its own

00:13:55,240 --> 00:13:59,980
resource so I can say what do I want to

00:13:57,550 --> 00:14:02,890
have from those books and now I say I

00:13:59,980 --> 00:14:05,230
only would like to have the name so if I

00:14:02,890 --> 00:14:09,580
execute the same query again but with

00:14:05,230 --> 00:14:12,090
those changes I get now all the books of

00:14:09,580 --> 00:14:15,280
10 brown which are stored in my database

00:14:12,090 --> 00:14:17,890
and that's really cool because when you

00:14:15,280 --> 00:14:20,860
use a restful api in general what you

00:14:17,890 --> 00:14:23,080
would get here is an array of ideas of

00:14:20,860 --> 00:14:25,120
books so the next thing you would do now

00:14:23,080 --> 00:14:28,900
is to make another query against your

00:14:25,120 --> 00:14:31,810
data against your API to retrieve all a

00:14:28,900 --> 00:14:34,120
list of all those books I can't do the

00:14:31,810 --> 00:14:37,980
same thing with just one query against

00:14:34,120 --> 00:14:37,980
my application and that's really nice

00:14:38,850 --> 00:14:47,740
now when I say ok let's let's create

00:14:45,040 --> 00:14:50,050
something like I prepared something here

00:14:47,740 --> 00:14:52,990
I guess you're up there I feel a

00:14:50,050 --> 00:14:54,820
mutation where I can add an offer this

00:14:52,990 --> 00:14:57,730
is the syntax you are using in order to

00:14:54,820 --> 00:14:59,710
pass arguments to your mutations which

00:14:57,730 --> 00:15:03,790
is also possible to communis and and

00:14:59,710 --> 00:15:05,740
subscriptions of course in this case

00:15:03,790 --> 00:15:07,150
it's more or less like a function call

00:15:05,740 --> 00:15:09,520
basically you know you you have

00:15:07,150 --> 00:15:12,280
parameters I defined here that I have a

00:15:09,520 --> 00:15:15,160
name which is a string the exclamation

00:15:12,280 --> 00:15:19,290
mark means it is a required property

00:15:15,160 --> 00:15:19,290
that I have to pass and also the age now

00:15:20,190 --> 00:15:25,210
when I have this mutation here I can

00:15:23,080 --> 00:15:27,610
tell okay after you have added to offer

00:15:25,210 --> 00:15:31,090
please return the ID the name and the

00:15:27,610 --> 00:15:41,020
age of the offer I've added so when I

00:15:31,090 --> 00:15:44,740
now copy those variables down here and

00:15:41,020 --> 00:15:50,010
now I'm going to add Stephen King and

00:15:44,740 --> 00:15:55,210
now I say so just to make it more clear

00:15:50,010 --> 00:15:57,970
here I defined that the basic the basic

00:15:55,210 --> 00:16:01,510
variables I'm going to pass over it down

00:15:57,970 --> 00:16:04,570
there and those are the very other the

00:16:01,510 --> 00:16:06,820
parameters I defined in my endpoint so

00:16:04,570 --> 00:16:08,140
it's about two to connect like the

00:16:06,820 --> 00:16:12,460
fronting in the backend with each other

00:16:08,140 --> 00:16:15,100
so when I execute this task at offer you

00:16:12,460 --> 00:16:17,860
will see it was added and it returns the

00:16:15,100 --> 00:16:21,280
ID that was now created thanks to my

00:16:17,860 --> 00:16:24,460
database the name and the age so what I

00:16:21,280 --> 00:16:26,140
can do now is also add a book and here

00:16:24,460 --> 00:16:29,230
works like the same I have to pass a

00:16:26,140 --> 00:16:33,660
name page and the offer ID when I now

00:16:29,230 --> 00:16:33,660
just copy those variables down here oh

00:16:34,440 --> 00:16:37,440
crap

00:16:39,450 --> 00:16:44,100
I of course have to take care that I

00:16:41,279 --> 00:16:46,170
change the idea of the offer accordingly

00:16:44,100 --> 00:16:50,610
so that it adds the book to the right

00:16:46,170 --> 00:16:51,649
offer and when I execute this one now at

00:16:50,610 --> 00:16:54,959
book

00:16:51,649 --> 00:16:58,860
it adds the book to my offer

00:16:54,959 --> 00:17:02,459
and now when I again return execute get

00:16:58,860 --> 00:17:05,100
offers very you see now I have Stephen

00:17:02,459 --> 00:17:08,000
King here with his book so that's

00:17:05,100 --> 00:17:10,530
basically how you would mutate tailor

00:17:08,000 --> 00:17:12,600
now I've shown you how this would look

00:17:10,530 --> 00:17:16,040
like on the front and side and how you

00:17:12,600 --> 00:17:18,270
would execute the queries into mutations

00:17:16,040 --> 00:17:22,620
now I'm going to show you how this looks

00:17:18,270 --> 00:17:27,929
on the backend side just let's make this

00:17:22,620 --> 00:17:29,460
a little bit bigger here so what you're

00:17:27,929 --> 00:17:33,780
seeing you know this is a classic

00:17:29,460 --> 00:17:36,360
Express no chess back-end thing it is

00:17:33,780 --> 00:17:38,790
the like this reference implementation I

00:17:36,360 --> 00:17:41,929
talked about before from Facebook with a

00:17:38,790 --> 00:17:45,540
small layer to make it use with Express

00:17:41,929 --> 00:17:47,940
what you're basically doing here is like

00:17:45,540 --> 00:17:51,660
okay tell Express that on slash craft

00:17:47,940 --> 00:17:54,510
quayle use the craft Creole adapter here

00:17:51,660 --> 00:17:56,400
is the schema I'm using and activate

00:17:54,510 --> 00:18:00,299
graphic well so like the tool you're

00:17:56,400 --> 00:18:06,480
seeing here this can be activated in

00:18:00,299 --> 00:18:09,299
able to disable data like and now when I

00:18:06,480 --> 00:18:11,880
go to my schema you will see here you

00:18:09,299 --> 00:18:13,500
will find all the things I just used all

00:18:11,880 --> 00:18:17,090
the resources so there's always a root

00:18:13,500 --> 00:18:20,880
root query which is like the entry point

00:18:17,090 --> 00:18:23,669
which also has most likely the name root

00:18:20,880 --> 00:18:27,090
career type here I define the fields

00:18:23,669 --> 00:18:29,940
which are in general available like I

00:18:27,090 --> 00:18:32,100
can query book one book I can create

00:18:29,940 --> 00:18:38,490
multiple books offer offers and so on

00:18:32,100 --> 00:18:41,070
and so forth this is built always the

00:18:38,490 --> 00:18:42,929
same way like I pass you an object where

00:18:41,070 --> 00:18:44,940
I define the type like here it's the

00:18:42,929 --> 00:18:46,980
book type the arguments that are

00:18:44,940 --> 00:18:48,720
possible so like when I want to query a

00:18:46,980 --> 00:18:51,419
book I also have to pass the book ID

00:18:48,720 --> 00:18:52,300
which I want to query and the resolve

00:18:51,419 --> 00:18:53,920
function

00:18:52,300 --> 00:18:59,440
and this is the thing I talked about

00:18:53,920 --> 00:19:01,480
before that it is not tightly connected

00:18:59,440 --> 00:19:04,420
with the packet resource so what I can

00:19:01,480 --> 00:19:06,940
do here in this case I make a query

00:19:04,420 --> 00:19:08,800
against my database which is MongoDB in

00:19:06,940 --> 00:19:10,840
this case but it could also make another

00:19:08,800 --> 00:19:15,370
rest call here or another call to

00:19:10,840 --> 00:19:17,860
another craftwell server and so there's

00:19:15,370 --> 00:19:23,050
there no it's just loosely coupled to

00:19:17,860 --> 00:19:25,780
whatever data source I have when I go up

00:19:23,050 --> 00:19:28,270
there a little bit so like what we are

00:19:25,780 --> 00:19:31,270
having gears like the book type so the

00:19:28,270 --> 00:19:33,250
book type is further defined up there it

00:19:31,270 --> 00:19:36,160
defines what fields I have this is this

00:19:33,250 --> 00:19:38,650
type system I was talking about so I was

00:19:36,160 --> 00:19:40,930
saying okay I have a book type so what

00:19:38,650 --> 00:19:44,410
fields are available I have an idea of a

00:19:40,930 --> 00:19:46,660
name pages and an offer and again the

00:19:44,410 --> 00:19:49,330
offer can be queried again so I have to

00:19:46,660 --> 00:19:53,400
sell him okay this offer is of the offer

00:19:49,330 --> 00:19:55,390
type and how do you resolve that and

00:19:53,400 --> 00:19:57,640
like what you're seeing here you have

00:19:55,390 --> 00:20:03,820
here a parent parameter and an argument

00:19:57,640 --> 00:20:07,540
parameter and when I go back what the

00:20:03,820 --> 00:20:11,590
parent is like in this case because when

00:20:07,540 --> 00:20:14,920
I'm out query the offers list I get one

00:20:11,590 --> 00:20:18,310
offer after the other and in its own

00:20:14,920 --> 00:20:22,630
book list I want only to have the books

00:20:18,310 --> 00:20:24,340
of this specific offer so that this part

00:20:22,630 --> 00:20:28,710
appear that's the parent that it's

00:20:24,340 --> 00:20:31,750
passed to my to check that it has passed

00:20:28,710 --> 00:20:34,060
to this resolved function and then I say

00:20:31,750 --> 00:20:38,800
okay from the parent use the offer ID

00:20:34,060 --> 00:20:40,810
and make a career against the offer yeah

00:20:38,800 --> 00:20:44,500
against the offer resource of my

00:20:40,810 --> 00:20:46,420
database with this variety and that's

00:20:44,500 --> 00:20:51,070
the reason I only get the list of this

00:20:46,420 --> 00:20:55,060
specific offer underneath my my book

00:20:51,070 --> 00:20:57,700
Tator and this is going on here like I

00:20:55,060 --> 00:20:59,770
just defined here all the types and all

00:20:57,700 --> 00:21:02,140
those things and the really nice thing

00:20:59,770 --> 00:21:05,490
about that is since I have to do that

00:21:02,140 --> 00:21:07,380
anyway a big topic about

00:21:05,490 --> 00:21:09,960
API is in general is the documentation

00:21:07,380 --> 00:21:12,740
like for chat normal restful api you

00:21:09,960 --> 00:21:17,100
would use tools like swagger for example

00:21:12,740 --> 00:21:19,529
in graphic where a graph quail this is

00:21:17,100 --> 00:21:21,809
coming like by default because we have a

00:21:19,529 --> 00:21:25,529
radius type system and there is this

00:21:21,809 --> 00:21:28,350
like default endpoint that this tool is

00:21:25,529 --> 00:21:30,779
using to fetch the whole schema and then

00:21:28,350 --> 00:21:34,020
it uses this information to provide a

00:21:30,779 --> 00:21:35,970
documentation about it so I fear all the

00:21:34,020 --> 00:21:37,950
route types I can use like I have to

00:21:35,970 --> 00:21:41,669
create mutations and if you would like

00:21:37,950 --> 00:21:44,760
to know what type of queries do I have I

00:21:41,669 --> 00:21:46,919
just can hit it and then I say ok I have

00:21:44,760 --> 00:21:48,870
booked I have books often offers and I

00:21:46,919 --> 00:21:52,409
also see what parameters I have to pass

00:21:48,870 --> 00:21:55,350
in order to make use of that and I also

00:21:52,409 --> 00:21:58,409
see what data type I get back so if I

00:21:55,350 --> 00:22:00,270
want to know like what is a book I just

00:21:58,409 --> 00:22:04,220
hit that button and say ok a book has an

00:22:00,270 --> 00:22:06,870
ID there's a name page as an offer and

00:22:04,220 --> 00:22:08,940
yeah well this is a great thing and that

00:22:06,870 --> 00:22:17,390
makes craftwell such an interesting

00:22:08,940 --> 00:22:21,270
technology yeah so that's actually

00:22:17,390 --> 00:22:23,700
basically it with my presentation I have

00:22:21,270 --> 00:22:25,470
shown you all the important parts I have

00:22:23,700 --> 00:22:27,990
left up subscriptions because they are a

00:22:25,470 --> 00:22:30,169
little bit more complicated and they

00:22:27,990 --> 00:22:33,870
need a little bit more effort to set up

00:22:30,169 --> 00:22:36,600
but when you're using them they are they

00:22:33,870 --> 00:22:37,950
look just like a query or mutation it's

00:22:36,600 --> 00:22:41,730
the same thing just the underlying

00:22:37,950 --> 00:22:43,529
transport technology is different yeah

00:22:41,730 --> 00:22:47,950
other than that thank you very much for

00:22:43,529 --> 00:22:51,900
listening and I hope you liked it

00:22:47,950 --> 00:22:51,900

YouTube URL: https://www.youtube.com/watch?v=zFVA3ynbXjg


