Title: FreeCodeCamp Vienna, Global CSS Scope, December 2017
Publication date: 2018-02-12
Playlist: FreeCodeCamp Vienna
Description: 
	Alex will provide tips and tricks on how to work with CSS. He will cover: Selectors, CSS modules, CSS in JavaScript and the shadow DOM.

More about Alexander Silberschneider: https://twitter.com/Silberxander

More about FreeCodeCamp Vienna: https://www.meetup.com/Free-Code-Camp-Vienna/
Captions: 
	00:00:00,030 --> 00:00:06,779
hi I'm Alex I'll talk about the gerousia

00:00:03,449 --> 00:00:10,650
scope today and here you can see the

00:00:06,779 --> 00:00:14,030
topics touch and now it's a bit much

00:00:10,650 --> 00:00:16,859
because especially when it goes into

00:00:14,030 --> 00:00:18,350
using javascript and shadow Dom but I'll

00:00:16,859 --> 00:00:22,949
try to keep it short

00:00:18,350 --> 00:00:25,260
hopefully it's open 30 minutes yes so

00:00:22,949 --> 00:00:28,800
what's this you always use a scope

00:00:25,260 --> 00:00:31,230
what's this all about if ever an HTML

00:00:28,800 --> 00:00:34,170
document and you apply CSS into it the

00:00:31,230 --> 00:00:35,910
CSS applies to the whole document this

00:00:34,170 --> 00:00:38,670
has been so for ever since the beginning

00:00:35,910 --> 00:00:40,829
of CSS this means if you have a selector

00:00:38,670 --> 00:00:43,350
this selector will match all elements in

00:00:40,829 --> 00:00:51,000
the whole document it could match with

00:00:43,350 --> 00:00:52,710
its if it's hard built so this is what

00:00:51,000 --> 00:00:56,160
I'm talking about and there could be

00:00:52,710 --> 00:00:57,930
many problems arising from that if a

00:00:56,160 --> 00:01:03,030
match elements that I didn't intend to

00:00:57,930 --> 00:01:05,750
match and has choice are just from some

00:01:03,030 --> 00:01:09,600
examples where this is going to happen

00:01:05,750 --> 00:01:10,500
so this is an example for a base

00:01:09,600 --> 00:01:13,170
selector

00:01:10,500 --> 00:01:15,750
I guess most most of your projects will

00:01:13,170 --> 00:01:18,720
have some some kind of base selectors in

00:01:15,750 --> 00:01:21,710
this case it's an h1 selector this

00:01:18,720 --> 00:01:26,549
applies to every h1 element in your HTML

00:01:21,710 --> 00:01:29,939
in our case we've got I don't see the

00:01:26,549 --> 00:01:32,189
pointer is visible but I hope is it's

00:01:29,939 --> 00:01:34,650
okay and just in this case you have got

00:01:32,189 --> 00:01:37,350
to know each one element in as a heading

00:01:34,650 --> 00:01:39,630
that's like an h1 element it's intended

00:01:37,350 --> 00:01:42,630
to be but you always I have one in the

00:01:39,630 --> 00:01:45,060
this button just to have a big button

00:01:42,630 --> 00:01:48,570
because the normal text styles and the

00:01:45,060 --> 00:01:50,729
path will be smaller otherwise so what

00:01:48,570 --> 00:01:53,759
will happen like this that somebody says

00:01:50,729 --> 00:01:55,470
okay no this font size of 24 pixels of

00:01:53,759 --> 00:01:57,450
our headings is too less we got to

00:01:55,470 --> 00:01:59,490
increase that so what will happen is

00:01:57,450 --> 00:02:04,140
that you're about Miller of course

00:01:59,490 --> 00:02:06,750
increase in size and this breaks the

00:02:04,140 --> 00:02:09,539
design and difficult many elements that

00:02:06,750 --> 00:02:12,410
are depending on such basic selectors in

00:02:09,539 --> 00:02:13,530
your CSS this will be even more and

00:02:12,410 --> 00:02:15,750
anakata

00:02:13,530 --> 00:02:18,690
big project will have much many widgets

00:02:15,750 --> 00:02:20,490
in there and then many pages you can't

00:02:18,690 --> 00:02:22,290
keep up if checking every side effect

00:02:20,490 --> 00:02:25,819
you're introducing by changing classic

00:02:22,290 --> 00:02:28,950
physics lecturer so this is problematic

00:02:25,819 --> 00:02:31,530
so what what could I do one solution

00:02:28,950 --> 00:02:33,270
would be that you increase the

00:02:31,530 --> 00:02:34,830
specificity of the selector for this

00:02:33,270 --> 00:02:35,640
side button or the text size in the

00:02:34,830 --> 00:02:38,940
pattern itself

00:02:35,640 --> 00:02:42,830
this means you introduced this button

00:02:38,940 --> 00:02:46,560
but an element selector this means this

00:02:42,830 --> 00:02:47,580
style it get more specific but of course

00:02:46,560 --> 00:02:50,910
you also have the problem that you've

00:02:47,580 --> 00:02:53,100
got to find this these occurrences so

00:02:50,910 --> 00:02:57,150
that you can fix them so this that's not

00:02:53,100 --> 00:02:59,640
really a really good solution the next

00:02:57,150 --> 00:03:01,140
problem is that of course everybody's

00:02:59,640 --> 00:03:03,750
will introduce his own selectors for

00:03:01,140 --> 00:03:07,080
that and they've got tons of selectors

00:03:03,750 --> 00:03:08,640
for for the same things and nobody dares

00:03:07,080 --> 00:03:10,709
to touch any basic selectors anymore

00:03:08,640 --> 00:03:16,440
because it could have too much side

00:03:10,709 --> 00:03:17,940
effects or too much impact the next

00:03:16,440 --> 00:03:21,299
problem that could happen is that you

00:03:17,940 --> 00:03:24,890
have a imagine on child element and

00:03:21,299 --> 00:03:27,920
notice but the contrast is not very good

00:03:24,890 --> 00:03:27,920
okay okay

00:03:28,040 --> 00:03:33,450
for example you've got a task list here

00:03:30,269 --> 00:03:36,480
with an S the task list of UL unordered

00:03:33,450 --> 00:03:39,450
list items list items we've got tasks

00:03:36,480 --> 00:03:42,780
and also we've we've got action buttons

00:03:39,450 --> 00:03:46,140
and what we define with our rule here is

00:03:42,780 --> 00:03:48,590
that the selector actions this these

00:03:46,140 --> 00:03:51,890
buttons here in the list items the list

00:03:48,590 --> 00:03:55,799
every part in this is its own this item

00:03:51,890 --> 00:03:59,519
they should have a green text color this

00:03:55,799 --> 00:04:02,609
works out well but what if we like to

00:03:59,519 --> 00:04:05,670
have red tasks with items we introduce a

00:04:02,609 --> 00:04:09,930
new selector called tasks task items

00:04:05,670 --> 00:04:12,090
list item and this defines that the list

00:04:09,930 --> 00:04:14,459
item color will get red but what happens

00:04:12,090 --> 00:04:16,350
here is that we always don't match the

00:04:14,459 --> 00:04:18,720
child elements we also merged action

00:04:16,350 --> 00:04:23,010
buttons because there are also a list

00:04:18,720 --> 00:04:25,320
items in the task items so this is

00:04:23,010 --> 00:04:27,150
unintentional and it could very well

00:04:25,320 --> 00:04:29,220
happen if occur at the third party which

00:04:27,150 --> 00:04:31,290
in there in your see a button that you

00:04:29,220 --> 00:04:33,389
override some styles that they didn't

00:04:31,290 --> 00:04:38,820
want to override with first electric

00:04:33,389 --> 00:04:41,729
defined for a task items a bad solution

00:04:38,820 --> 00:04:44,910
would be if you said okay I want this

00:04:41,729 --> 00:04:47,910
these buttons to be green so I'll define

00:04:44,910 --> 00:04:50,729
the modifier important on the on the CSS

00:04:47,910 --> 00:04:52,860
rule this is a bad idea because if

00:04:50,729 --> 00:04:55,440
everyone starts to use important to

00:04:52,860 --> 00:04:57,660
enforce matching rules as he says rules

00:04:55,440 --> 00:05:00,120
then you won't have any idea what

00:04:57,660 --> 00:05:02,669
happens if you introduce new elements

00:05:00,120 --> 00:05:05,010
how does the rules will be get applied

00:05:02,669 --> 00:05:06,930
it gets complicated that nobody could

00:05:05,010 --> 00:05:11,789
read this code anymore and in a big

00:05:06,930 --> 00:05:15,380
project is a horror I personally would

00:05:11,789 --> 00:05:17,430
recommend never to use important but

00:05:15,380 --> 00:05:18,510
sometimes you have to because when you

00:05:17,430 --> 00:05:20,729
have got the third party widget which

00:05:18,510 --> 00:05:24,449
says is a very high specificity can't

00:05:20,729 --> 00:05:28,860
get around it but in your code please

00:05:24,449 --> 00:05:32,430
don't use it a better solution would be

00:05:28,860 --> 00:05:37,910
to increase the specificity of the of

00:05:32,430 --> 00:05:40,950
the task item color rule by adding this

00:05:37,910 --> 00:05:44,099
design here this defines that only

00:05:40,950 --> 00:05:46,169
direct child atoms direct child list

00:05:44,099 --> 00:05:48,120
items of the task items are being

00:05:46,169 --> 00:05:52,830
matched this means this is these are

00:05:48,120 --> 00:05:54,479
only the task items itself but the next

00:05:52,830 --> 00:05:56,039
problem if that is that you've got a

00:05:54,479 --> 00:05:58,229
memoir increasing specifically on your

00:05:56,039 --> 00:06:03,720
CSS rules and she says specifically

00:05:58,229 --> 00:06:06,630
isn't really simple issue because when

00:06:03,720 --> 00:06:09,539
you introduce attribute selectors or a

00:06:06,630 --> 00:06:11,789
child selectors or whatever this the

00:06:09,539 --> 00:06:14,669
complexity of the CSS grows and nobody

00:06:11,789 --> 00:06:21,720
understands what's going on this is not

00:06:14,669 --> 00:06:24,479
another good good thing so a short round

00:06:21,720 --> 00:06:26,669
above the issues one issue is the the

00:06:24,479 --> 00:06:27,930
veneer intro when you integrate for the

00:06:26,669 --> 00:06:29,550
part widgets that their own Styles

00:06:27,930 --> 00:06:32,099
applied to the third-party widgets which

00:06:29,550 --> 00:06:34,770
I didn't attend to another problem is

00:06:32,099 --> 00:06:37,620
that nobody knows what the styles do

00:06:34,770 --> 00:06:39,500
there's a ton of obsolete Styles the

00:06:37,620 --> 00:06:41,510
nobility has to remove because

00:06:39,500 --> 00:06:46,490
what could be the side effects where

00:06:41,510 --> 00:06:50,990
else and that you use ever more specific

00:06:46,490 --> 00:06:53,600
selectors to have your rules applied so

00:06:50,990 --> 00:06:56,660
every other programming language aims

00:06:53,600 --> 00:06:58,340
for some kind of modular approach or

00:06:56,660 --> 00:07:00,740
tries to mimic it by using some

00:06:58,340 --> 00:07:01,400
workarounds and how to do this with with

00:07:00,740 --> 00:07:04,990
CSS

00:07:01,400 --> 00:07:07,010
there are ways and we dive into that now

00:07:04,990 --> 00:07:10,240
the first thing I'd like to talk about

00:07:07,010 --> 00:07:14,390
this BAM which is block element modifier

00:07:10,240 --> 00:07:19,220
it's in generates a semantic model which

00:07:14,390 --> 00:07:21,770
includes HTML Styles code and user

00:07:19,220 --> 00:07:23,330
experience but for this talk not focused

00:07:21,770 --> 00:07:25,850
just on the naming convention thing

00:07:23,330 --> 00:07:31,010
there's a naming convention used with

00:07:25,850 --> 00:07:34,250
them they'll show you how that works but

00:07:31,010 --> 00:07:37,520
BAM aims for in general is to have a

00:07:34,250 --> 00:07:40,820
better readable CSS code and to promote

00:07:37,520 --> 00:07:46,610
the use of of blocks and improve the

00:07:40,820 --> 00:07:51,020
maintainability of CSS code so the first

00:07:46,610 --> 00:07:53,210
part of them is blog and I'm showing you

00:07:51,020 --> 00:07:55,669
a selector that could be used as a block

00:07:53,210 --> 00:07:58,610
element element no I shouldn't say

00:07:55,669 --> 00:08:01,669
shouldn't a element before a block what

00:07:58,610 --> 00:08:03,680
is a block in BAM in in payment block is

00:08:01,669 --> 00:08:07,070
some kind of component that is reusable

00:08:03,680 --> 00:08:11,900
that could exist when its own for in our

00:08:07,070 --> 00:08:14,570
case it could be a title widget the name

00:08:11,900 --> 00:08:17,750
of the block always describes its

00:08:14,570 --> 00:08:21,290
purpose not its style or its state just

00:08:17,750 --> 00:08:26,740
its purpose a plugin BAM could include

00:08:21,290 --> 00:08:26,740
other elements acting as their parent

00:08:27,340 --> 00:08:33,020
because I'm saying always element that's

00:08:30,110 --> 00:08:35,599
the the child off of a block for example

00:08:33,020 --> 00:08:41,030
could be a sub line or the author tag of

00:08:35,599 --> 00:08:44,570
a title widget this is an element now it

00:08:41,030 --> 00:08:47,330
can't include other elements

00:08:44,570 --> 00:08:52,339
it doesn't shouldn't nest other elements

00:08:47,330 --> 00:08:53,480
in the beam structure it should always

00:08:52,339 --> 00:08:55,670
it always depends on

00:08:53,480 --> 00:08:59,870
Blagh can't exist on its own an element

00:08:55,670 --> 00:09:04,639
always depend a long stood lock and

00:08:59,870 --> 00:09:07,579
can't be somewhere on its own so notice

00:09:04,639 --> 00:09:10,430
that the last part of them are the

00:09:07,579 --> 00:09:13,490
modifiers the modifier belongs to a

00:09:10,430 --> 00:09:15,260
block or an element and describes a

00:09:13,490 --> 00:09:18,170
certain state or a specific style of a

00:09:15,260 --> 00:09:20,269
block or an element this specific state

00:09:18,170 --> 00:09:24,440
or style is a deviation of the default

00:09:20,269 --> 00:09:29,959
style or state just for information the

00:09:24,440 --> 00:09:33,980
syntax you see this separation of

00:09:29,959 --> 00:09:35,360
element and blog and this this dashes

00:09:33,980 --> 00:09:38,060
here between the element and the

00:09:35,360 --> 00:09:39,980
modifier this style is called double

00:09:38,060 --> 00:09:41,389
dash style their orders there are others

00:09:39,980 --> 00:09:49,130
as well but I found this to be the most

00:09:41,389 --> 00:09:50,720
readable so because I just showed you

00:09:49,130 --> 00:09:52,579
these selectors the selector names now

00:09:50,720 --> 00:09:54,470
but I guess that in your head already

00:09:52,579 --> 00:09:57,430
have an idea how that HTML would look

00:09:54,470 --> 00:10:02,540
like this is one of the benefits of them

00:09:57,430 --> 00:10:04,579
that you always have have an idea how

00:10:02,540 --> 00:10:07,880
the selectors and the HTML belong

00:10:04,579 --> 00:10:10,010
together and you see now that we have

00:10:07,880 --> 00:10:12,500
got here the the block elements of

00:10:10,010 --> 00:10:15,760
studying this block element has a

00:10:12,500 --> 00:10:19,220
modifier that is x-large

00:10:15,760 --> 00:10:26,990
in this block we have the element sub

00:10:19,220 --> 00:10:29,930
line and author and what I am to us it's

00:10:26,990 --> 00:10:32,660
it improves the communication between

00:10:29,930 --> 00:10:36,649
the ones I was writing CSS code around

00:10:32,660 --> 00:10:38,990
to about new markup because of because

00:10:36,649 --> 00:10:41,420
of these simple names and a clear

00:10:38,990 --> 00:10:43,760
structure is structure of the selectors

00:10:41,420 --> 00:10:47,470
you always know what is used where the

00:10:43,760 --> 00:10:49,880
order could find this likely you have to

00:10:47,470 --> 00:10:53,990
modify if Akata to make a modification

00:10:49,880 --> 00:10:55,459
on the author class for example this is

00:10:53,990 --> 00:10:57,920
very easy to locate in your code each a

00:10:55,459 --> 00:11:01,069
search name you don't have to you don't

00:10:57,920 --> 00:11:03,800
have to see how this is a somewhere up

00:11:01,069 --> 00:11:05,899
in the Dom structure and selector for

00:11:03,800 --> 00:11:06,960
T's and in combination with this parent

00:11:05,899 --> 00:11:10,110
selected as a child

00:11:06,960 --> 00:11:12,570
no you don't have to look for this just

00:11:10,110 --> 00:11:14,700
search for this selector and adapt it

00:11:12,570 --> 00:11:18,270
and that's it this is one of the

00:11:14,700 --> 00:11:21,240
benefits what you can do in BAM is you

00:11:18,270 --> 00:11:23,760
can change how you structure your HTML

00:11:21,240 --> 00:11:27,060
you can moved for example you can I move

00:11:23,760 --> 00:11:29,130
this author element you could move it

00:11:27,060 --> 00:11:30,300
into this append element it's it's it's

00:11:29,130 --> 00:11:32,760
what the problem doesn't it doesn't

00:11:30,300 --> 00:11:34,350
break this lecture itself because the

00:11:32,760 --> 00:11:36,570
selector is on the element you want to

00:11:34,350 --> 00:11:37,770
style when you move the element around

00:11:36,570 --> 00:11:40,830
in the structure it doesn't break the

00:11:37,770 --> 00:11:47,610
selector this the rules in the finders

00:11:40,830 --> 00:11:49,590
likely will still apply no problem what

00:11:47,610 --> 00:11:52,170
you could also do is include other

00:11:49,590 --> 00:11:54,540
blocks into your existing blocks for

00:11:52,170 --> 00:11:58,070
example in this slide here I'm showing

00:11:54,540 --> 00:12:07,710
that I've added an avatar block into the

00:11:58,070 --> 00:12:09,900
title into the author element and this

00:12:07,710 --> 00:12:13,440
this block brings its own styles its own

00:12:09,900 --> 00:12:15,450
selectors with it so what you shouldn't

00:12:13,440 --> 00:12:19,620
do is I said it before

00:12:15,450 --> 00:12:21,740
you shouldn't nest these elements like

00:12:19,620 --> 00:12:23,790
this here for example sup line and date

00:12:21,740 --> 00:12:26,610
because what you're doing is you're your

00:12:23,790 --> 00:12:30,090
coupling your HTML with your CSS code

00:12:26,610 --> 00:12:34,350
you couple the structure of HTML the CSS

00:12:30,090 --> 00:12:35,870
code it's it's more appropriate when

00:12:34,350 --> 00:12:38,100
you're doing such a thing

00:12:35,870 --> 00:12:39,600
most likely what you would like to

00:12:38,100 --> 00:12:41,490
introduce in your block for example in

00:12:39,600 --> 00:12:44,370
our case a date block which could you

00:12:41,490 --> 00:12:46,790
use were somewhere else it's much a

00:12:44,370 --> 00:12:46,790
better idea

00:12:49,190 --> 00:12:55,500
some thing when nesting is okay is when

00:12:53,370 --> 00:12:57,720
it's when it otherwise would be very

00:12:55,500 --> 00:13:00,540
inefficient for example in our case we

00:12:57,720 --> 00:13:03,150
have got a grid our grid is in the state

00:13:00,540 --> 00:13:05,280
editing we are just editing some data in

00:13:03,150 --> 00:13:08,370
a grid and we have grid cells as

00:13:05,280 --> 00:13:10,260
elements of this grid blog if we

00:13:08,370 --> 00:13:12,690
wouldn't let this lecture here we would

00:13:10,260 --> 00:13:15,090
have to apply some kind of modifier to

00:13:12,690 --> 00:13:17,700
every single grid cell which is very

00:13:15,090 --> 00:13:20,220
inefficient for this case it's okay to

00:13:17,700 --> 00:13:22,800
have some nesting here

00:13:20,220 --> 00:13:26,610
but that's about as that the only

00:13:22,800 --> 00:13:28,110
exception for when you should nest of em

00:13:26,610 --> 00:13:33,950
selector this when you have to do it for

00:13:28,110 --> 00:13:36,270
efficiency so what are the BAM benefits

00:13:33,950 --> 00:13:39,000
when you get this

00:13:36,270 --> 00:13:41,460
we got a BAM and setup in your team

00:13:39,000 --> 00:13:43,500
everyone knows how to write selectors

00:13:41,460 --> 00:13:45,000
everyone knows what blocks lameta

00:13:43,500 --> 00:13:46,880
selectively look like everyone knows

00:13:45,000 --> 00:13:50,480
what the elements negative look like

00:13:46,880 --> 00:13:53,580
this simplifies communication everyone

00:13:50,480 --> 00:13:57,480
knows what how to we will do generate

00:13:53,580 --> 00:14:00,150
class names this is s is not directly

00:13:57,480 --> 00:14:01,740
captive to HTML structure you have more

00:14:00,150 --> 00:14:04,790
confidence when you change or an

00:14:01,740 --> 00:14:07,620
existing style because you know that you

00:14:04,790 --> 00:14:17,270
shouldn't any shouldn't be any side

00:14:07,620 --> 00:14:20,670
effects to it yeah that's about it

00:14:17,270 --> 00:14:23,160
the downside to Pam is that you will

00:14:20,670 --> 00:14:25,850
generate a lot of class names a lot of

00:14:23,160 --> 00:14:29,310
long class names not everyone likes that

00:14:25,850 --> 00:14:29,940
I personally love it because I know what

00:14:29,310 --> 00:14:34,430
this was about

00:14:29,940 --> 00:14:39,600
what's this lake is about but there are

00:14:34,430 --> 00:14:41,790
people who don't liked it very much and

00:14:39,600 --> 00:14:45,630
of course everyone has to adhere to the

00:14:41,790 --> 00:14:49,680
defined structure that's also something

00:14:45,630 --> 00:14:51,000
that sometimes doesn't work but one of

00:14:49,680 --> 00:14:53,460
the great things he said they can

00:14:51,000 --> 00:14:55,230
include them in your even in your

00:14:53,460 --> 00:14:57,120
project it's just you know there's no

00:14:55,230 --> 00:14:58,890
tour or forum because they have to use

00:14:57,120 --> 00:15:06,240
is you can use it for the smallest

00:14:58,890 --> 00:15:09,270
project ok next up is USS modules what

00:15:06,240 --> 00:15:12,440
is this or CSS modules about its roughly

00:15:09,270 --> 00:15:15,120
speaking it's it's modifying your

00:15:12,440 --> 00:15:20,430
sources as files in the source HTML code

00:15:15,120 --> 00:15:23,550
so that CSS selector names are locally

00:15:20,430 --> 00:15:26,220
by default this is an inspector or

00:15:23,550 --> 00:15:28,740
something or a browser implementation

00:15:26,220 --> 00:15:30,900
it's a step in a build process so for

00:15:28,740 --> 00:15:32,130
example any use webpack or browserify or

00:15:30,900 --> 00:15:34,259
something like that you know in your

00:15:32,130 --> 00:15:35,999
build for your application

00:15:34,259 --> 00:15:38,669
you bundle your sources when you

00:15:35,999 --> 00:15:40,739
translate your assess to CSS when you

00:15:38,669 --> 00:15:43,379
translate your typescript to JavaScript

00:15:40,739 --> 00:15:47,999
you will know boots how to use a bundler

00:15:43,379 --> 00:15:50,100
or a build tool and this CSS mode your

00:15:47,999 --> 00:15:52,470
transformation is just as just an

00:15:50,100 --> 00:15:55,619
additional step in your in your new

00:15:52,470 --> 00:16:02,059
build of your project so how does it

00:15:55,619 --> 00:16:02,059
look like for example when we got oh

00:16:05,009 --> 00:16:13,979
PowerPoint has just crashed oh no works

00:16:10,949 --> 00:16:19,160
again okay when you got this initial

00:16:13,979 --> 00:16:23,039
code when you get an h1 element and this

00:16:19,160 --> 00:16:26,209
selector here big title to have it work

00:16:23,039 --> 00:16:30,419
with CSS models you need to rewrite it

00:16:26,209 --> 00:16:33,629
you have to make this about it you have

00:16:30,419 --> 00:16:35,879
to include as we have to rewrite your

00:16:33,629 --> 00:16:40,289
HTML to be an es6 template string this

00:16:35,879 --> 00:16:43,230
is just a simple example where use not

00:16:40,289 --> 00:16:47,480
the original selector name in the class

00:16:43,230 --> 00:16:50,009
as a class name but you import it from a

00:16:47,480 --> 00:16:52,559
CSS file for those of you who are

00:16:50,009 --> 00:16:54,480
already familiar with es6 imports will

00:16:52,559 --> 00:16:57,989
think this is a bit strange how could I

00:16:54,480 --> 00:17:00,299
import a module from a CSS file can't be

00:16:57,989 --> 00:17:03,809
this is the trick that a CSS modules

00:17:00,299 --> 00:17:07,079
does its includes its own CSS loader and

00:17:03,809 --> 00:17:10,620
in web pack and what it does is it

00:17:07,079 --> 00:17:14,220
parses this input CSS file and it gives

00:17:10,620 --> 00:17:16,289
you a map this is this object here a map

00:17:14,220 --> 00:17:20,909
object in the archives its name Styles

00:17:16,289 --> 00:17:23,730
where every selector of the original CSS

00:17:20,909 --> 00:17:26,819
file is a property of this map and you

00:17:23,730 --> 00:17:32,610
may think of I show that you why should

00:17:26,819 --> 00:17:34,529
I do that this is a JavaScript why would

00:17:32,610 --> 00:17:38,490
I have to whether the want to do that

00:17:34,529 --> 00:17:40,769
will see it just in a few seconds what

00:17:38,490 --> 00:17:44,490
we do here we use the value that is

00:17:40,769 --> 00:17:46,379
behind this property in our case we used

00:17:44,490 --> 00:17:47,510
the name of the original slack topic

00:17:46,379 --> 00:17:50,180
title

00:17:47,510 --> 00:17:51,770
to inject it into our HTML and what this

00:17:50,180 --> 00:17:56,300
look will look like I show in the next

00:17:51,770 --> 00:17:57,890
slide you see that our original selector

00:17:56,300 --> 00:18:00,910
name has been translated into something

00:17:57,890 --> 00:18:04,460
else something very unique we have the

00:18:00,910 --> 00:18:05,750
we can see of but it's a thing of

00:18:04,460 --> 00:18:08,750
configuration about to include in your

00:18:05,750 --> 00:18:11,180
in your final selection aims you can see

00:18:08,750 --> 00:18:12,950
the source file name you can see the

00:18:11,180 --> 00:18:15,470
original selector name and we see a hash

00:18:12,950 --> 00:18:18,110
and unique hash here and when you use

00:18:15,470 --> 00:18:20,900
this in our build process what we could

00:18:18,110 --> 00:18:22,700
ensure is that we could use the very

00:18:20,900 --> 00:18:25,700
generic class names like big turtle

00:18:22,700 --> 00:18:28,160
because it's quite quite a generic class

00:18:25,700 --> 00:18:31,700
name or it could just use big no problem

00:18:28,160 --> 00:18:34,850
it will be replaced by something unique

00:18:31,700 --> 00:18:36,410
in the output this ensures that you

00:18:34,850 --> 00:18:38,780
don't have to worry about your selector

00:18:36,410 --> 00:18:42,970
names because they will be in the final

00:18:38,780 --> 00:18:46,340
reset they will be unique anyway this

00:18:42,970 --> 00:18:48,710
seems a bit strange here to rewrite

00:18:46,340 --> 00:18:51,560
under the ESX template string when you

00:18:48,710 --> 00:18:53,150
have a look at how to use this and in

00:18:51,560 --> 00:18:55,180
conjunction with react it's it makes

00:18:53,150 --> 00:18:59,030
much more sense it's much more elegant

00:18:55,180 --> 00:19:00,470
because when you use JSX templates what

00:18:59,030 --> 00:19:03,280
you have right you're the culture of

00:19:00,470 --> 00:19:08,720
writing almost looks like the original

00:19:03,280 --> 00:19:11,180
HTML itself it's quite the same

00:19:08,720 --> 00:19:15,650
principle of importing this this map

00:19:11,180 --> 00:19:18,710
object but it looks much more elegant to

00:19:15,650 --> 00:19:21,230
use it like so when I'm talking about

00:19:18,710 --> 00:19:25,190
direct I also have to talk about angular

00:19:21,230 --> 00:19:28,010
you could use CSS modus me if angular as

00:19:25,190 --> 00:19:34,730
well if your user support loader like

00:19:28,010 --> 00:19:36,920
like pekus but you also have to fall

00:19:34,730 --> 00:19:39,980
back to this basic use except a string

00:19:36,920 --> 00:19:42,050
syntax which isn't very so cool but I

00:19:39,980 --> 00:19:44,390
will talk about something angular

00:19:42,050 --> 00:19:47,230
provides since version 2.x later which

00:19:44,390 --> 00:19:47,230
is much better than this

00:19:51,320 --> 00:19:57,470
okay just round up what are the benefits

00:19:54,020 --> 00:19:59,630
of CSS modules you can define your CSS

00:19:57,470 --> 00:20:00,950
selector names like keyboard it's no

00:19:59,630 --> 00:20:03,320
problem you can use the most generic

00:20:00,950 --> 00:20:07,580
things which are semantically correct

00:20:03,320 --> 00:20:10,370
for your use case it's much clearer to

00:20:07,580 --> 00:20:15,140
read and you don't have to worry so much

00:20:10,370 --> 00:20:16,700
about getting conflicts in your CSS like

00:20:15,140 --> 00:20:21,230
the name says because everything is

00:20:16,700 --> 00:20:23,840
locally depending on the area where you

00:20:21,230 --> 00:20:25,790
built this dependency between the style

00:20:23,840 --> 00:20:27,950
and the HTML if you do it for every

00:20:25,790 --> 00:20:31,130
component you are generating then there

00:20:27,950 --> 00:20:33,340
isn't any any problem at all you can

00:20:31,130 --> 00:20:36,230
write planes users you don't have to

00:20:33,340 --> 00:20:39,070
write something like CSS and JavaScript

00:20:36,230 --> 00:20:42,350
I'll show that later it's it's like you

00:20:39,070 --> 00:20:44,210
the CSS you used to write it's it's not

00:20:42,350 --> 00:20:48,020
it doesn't look any different in the

00:20:44,210 --> 00:20:51,680
source and other planes he says goes to

00:20:48,020 --> 00:20:53,810
browser of course this only makes sense

00:20:51,680 --> 00:20:55,970
if you got a bigger project it doesn't

00:20:53,810 --> 00:20:58,400
really make much sense if you've got a

00:20:55,970 --> 00:21:00,320
little little project starting because

00:20:58,400 --> 00:21:02,380
it's a bit overkill to have it all set

00:21:00,320 --> 00:21:04,940
up and configured because you need to

00:21:02,380 --> 00:21:07,250
also to set up your web pack or

00:21:04,940 --> 00:21:09,680
browserify to include CSS modules

00:21:07,250 --> 00:21:11,270
loaders and and so on it's a bit

00:21:09,680 --> 00:21:15,500
overkill for little projects I got to

00:21:11,270 --> 00:21:17,660
say and it also just makes sense if you

00:21:15,500 --> 00:21:20,060
got some kind of templating going on if

00:21:17,660 --> 00:21:22,060
you just writing HTML and applying CSS

00:21:20,060 --> 00:21:24,470
you don't have some kind of templating

00:21:22,060 --> 00:21:29,780
framework then it doesn't make sense to

00:21:24,470 --> 00:21:33,560
to go for this so now we're coming into

00:21:29,780 --> 00:21:36,290
CSS and JavaScript but first when I read

00:21:33,560 --> 00:21:40,580
this I thought oh thank god goodbye CSS

00:21:36,290 --> 00:21:43,870
but no not really it wasn't for the

00:21:40,580 --> 00:21:46,310
what's behind that what is this

00:21:43,870 --> 00:21:51,230
CSS in JavaScript there are many

00:21:46,310 --> 00:21:55,280
different frameworks with if those you

00:21:51,230 --> 00:21:56,570
can do a CSS and JavaScript in general

00:21:55,280 --> 00:21:58,310
they're just using two different

00:21:56,570 --> 00:22:01,910
approaches on how to achieve that the

00:21:58,310 --> 00:22:05,120
first approach is to emit a CSS again

00:22:01,910 --> 00:22:07,309
into a style tag in your head of your

00:22:05,120 --> 00:22:10,460
of your document and the other approach

00:22:07,309 --> 00:22:12,830
is to apply inline styles to every

00:22:10,460 --> 00:22:16,070
element you want your you want to have

00:22:12,830 --> 00:22:18,320
styled the second approach is a bit more

00:22:16,070 --> 00:22:20,030
tricky because inline styles don't

00:22:18,320 --> 00:22:21,980
support things like pseudo states like

00:22:20,030 --> 00:22:24,590
harbour or a media queries or keyframe

00:22:21,980 --> 00:22:27,290
animations so there are these frameworks

00:22:24,590 --> 00:22:29,150
that are going this approach also always

00:22:27,290 --> 00:22:31,510
some kind of tricks in there to support

00:22:29,150 --> 00:22:35,450
is most of the time this will be

00:22:31,510 --> 00:22:37,370
JavaScript event listeners so that you

00:22:35,450 --> 00:22:42,860
can achieve a Harvick effect with Indian

00:22:37,370 --> 00:22:47,960
styles PowerPoint doesn't do it doesn't

00:22:42,860 --> 00:22:50,330
do anything okay let's go again so the

00:22:47,960 --> 00:22:52,970
most the most known frameworks for doing

00:22:50,330 --> 00:22:56,960
this for the first approach is style

00:22:52,970 --> 00:22:59,030
components for the emission of CSS if

00:22:56,960 --> 00:23:02,420
together with react and react native and

00:22:59,030 --> 00:23:05,870
for a second approach this is something

00:23:02,420 --> 00:23:07,970
like radium for react or so and but I

00:23:05,870 --> 00:23:10,550
will show something else I will show you

00:23:07,970 --> 00:23:12,980
Aphrodite because generally it's it's

00:23:10,550 --> 00:23:14,480
more like framework independent you can

00:23:12,980 --> 00:23:17,720
use it with plain HTML change plain

00:23:14,480 --> 00:23:20,450
JavaScript or something other the one

00:23:17,720 --> 00:23:23,450
that generates your styles as styles in

00:23:20,450 --> 00:23:26,660
the style tag of your document and

00:23:23,450 --> 00:23:28,520
inject styles as needed it also has of

00:23:26,660 --> 00:23:30,650
course because it's generating real

00:23:28,520 --> 00:23:33,470
success it supports or pseudo queries

00:23:30,650 --> 00:23:37,480
and some things like hover and media

00:23:33,470 --> 00:23:39,820
queries on keyframe animations

00:23:37,480 --> 00:23:43,850
out-of-the-box there's no problem to it

00:23:39,820 --> 00:23:49,100
so I'm not showing you and Aphrodite she

00:23:43,850 --> 00:23:52,160
s GS example the first thing on the left

00:23:49,100 --> 00:23:54,260
side this is our style sheet definition

00:23:52,160 --> 00:23:56,690
this is our selector pick title from the

00:23:54,260 --> 00:24:00,020
previous example now but I added some

00:23:56,690 --> 00:24:02,320
some additional properties here and you

00:24:00,020 --> 00:24:05,960
can see that we are writing our CSS

00:24:02,320 --> 00:24:08,840
selector as JavaScript object and we

00:24:05,960 --> 00:24:11,210
always include here something special we

00:24:08,840 --> 00:24:16,520
always include support for a harbor

00:24:11,210 --> 00:24:18,740
state of this for this lecture and this

00:24:16,520 --> 00:24:24,800
destoyed should create here this is

00:24:18,740 --> 00:24:28,400
part of the effort ideas API and how to

00:24:24,800 --> 00:24:30,890
use it we see on the right side I'm

00:24:28,400 --> 00:24:35,900
fetching an element here where I inject

00:24:30,890 --> 00:24:37,880
my HTML and then I use this this style

00:24:35,900 --> 00:24:40,600
speak title when I use this selector

00:24:37,880 --> 00:24:42,740
property at this moment I'm accessing it

00:24:40,600 --> 00:24:44,390
aphrodite injects the Styles for

00:24:42,740 --> 00:24:46,370
immediate document era at this very

00:24:44,390 --> 00:24:48,170
moment this also means that if it got

00:24:46,370 --> 00:24:49,910
some definitions here that they aren't

00:24:48,170 --> 00:24:51,830
using on your current page or something

00:24:49,910 --> 00:24:56,000
like that they also want code injected

00:24:51,830 --> 00:24:59,000
in the style tag this is cool and if I

00:24:56,000 --> 00:25:01,160
have a look at what these Styles big

00:24:59,000 --> 00:25:03,920
title property is holding we see

00:25:01,160 --> 00:25:08,450
something similar like at the CSS

00:25:03,920 --> 00:25:09,980
modules like at the CSS modules thing we

00:25:08,450 --> 00:25:16,850
see the original select rename' and you

00:25:09,980 --> 00:25:21,320
also see a unique hash following so if

00:25:16,850 --> 00:25:21,679
you have a look at the output first of

00:25:21,320 --> 00:25:23,480
course

00:25:21,679 --> 00:25:25,429
when I'm hovering over the elements this

00:25:23,480 --> 00:25:28,160
how I style it get apply it just works

00:25:25,429 --> 00:25:30,830
nicely so I'm just showing you the

00:25:28,160 --> 00:25:34,100
output this is the CSS that will get

00:25:30,830 --> 00:25:36,320
injected into the document we see the

00:25:34,100 --> 00:25:39,650
original selector name and we also see

00:25:36,320 --> 00:25:44,000
the hash trailing it which makes it

00:25:39,650 --> 00:25:47,720
unique what we all see is very much as a

00:25:44,000 --> 00:25:49,460
many important modifiers I have read in

00:25:47,720 --> 00:25:51,200
Dhaka in the documentation that is this

00:25:49,460 --> 00:25:53,750
is intended to make integration with

00:25:51,200 --> 00:25:56,420
existing frameworks easier yeah you can

00:25:53,750 --> 00:26:04,070
turn it off if you want this is just a

00:25:56,420 --> 00:26:06,230
configuration thing so yeah just a

00:26:04,070 --> 00:26:10,130
roundup about the different approaches

00:26:06,230 --> 00:26:12,559
to CSS in JavaScript most of of these

00:26:10,130 --> 00:26:15,230
frameworks use some kind of injection of

00:26:12,559 --> 00:26:19,730
CSS into the document means you define

00:26:15,230 --> 00:26:21,470
your selectors and your styles and all

00:26:19,730 --> 00:26:23,720
of this will get injected into the

00:26:21,470 --> 00:26:25,160
document header because it's much more

00:26:23,720 --> 00:26:27,380
efficient to have real serious as the

00:26:25,160 --> 00:26:29,929
project could work much better if you

00:26:27,380 --> 00:26:32,390
easily could apply to the elements this

00:26:29,929 --> 00:26:34,370
is this is the reason

00:26:32,390 --> 00:26:36,260
and what always was always an

00:26:34,370 --> 00:26:38,390
interesting since most of these

00:26:36,260 --> 00:26:40,190
frameworks are built around react most

00:26:38,390 --> 00:26:43,240
of them also supports our site rendering

00:26:40,190 --> 00:26:47,990
is quite cool in my opinion

00:26:43,240 --> 00:26:50,870
so a bit what's what's unusual is that

00:26:47,990 --> 00:26:52,760
you now have not a plain CSS anymore you

00:26:50,870 --> 00:26:54,200
have to register as in JavaScript this

00:26:52,760 --> 00:26:56,330
is a bit awkward at the beginning

00:26:54,200 --> 00:26:58,250
because you have some different very

00:26:56,330 --> 00:27:01,220
different kind of offering you also

00:26:58,250 --> 00:27:03,049
don't use the sass or less anymore

00:27:01,220 --> 00:27:06,320
because you're doing your styled in

00:27:03,049 --> 00:27:08,510
JavaScript this isn't necessarily just a

00:27:06,320 --> 00:27:09,620
downside it could also be upside because

00:27:08,510 --> 00:27:11,450
you're unlimited

00:27:09,620 --> 00:27:16,850
through what some players are doing for

00:27:11,450 --> 00:27:18,410
you read your own transformations and do

00:27:16,850 --> 00:27:24,950
what you want in a real programming age

00:27:18,410 --> 00:27:27,290
JavaScript so next thing I am going to

00:27:24,950 --> 00:27:32,179
show you is what you can do with shadow

00:27:27,290 --> 00:27:34,510
Dom if you already worked with web

00:27:32,179 --> 00:27:37,730
components you've probably heard of it

00:27:34,510 --> 00:27:40,820
it's what it does what what does shadow

00:27:37,730 --> 00:27:44,030
Dom do it's quite a it does encapsulate

00:27:40,820 --> 00:27:48,020
parts of your HTML structure so that

00:27:44,030 --> 00:27:52,820
this is the HTML and the CSS living in

00:27:48,020 --> 00:27:54,830
that encapsulation is not interact also

00:27:52,820 --> 00:27:59,270
is not it's decoupled from the rest of

00:27:54,830 --> 00:28:02,179
your HTML page and it could encapsulate

00:27:59,270 --> 00:28:04,460
CSS and HTML without any further tools

00:28:02,179 --> 00:28:07,040
it's just it's just a process doing it

00:28:04,460 --> 00:28:10,070
for you it's a quite a new spec it's

00:28:07,040 --> 00:28:13,400
it's just it's not finished yet it's in

00:28:10,070 --> 00:28:15,260
active development and if I have a look

00:28:13,400 --> 00:28:18,169
for example at the Chrome browser when

00:28:15,260 --> 00:28:21,080
you use html5 video tag the video tag

00:28:18,169 --> 00:28:24,950
itself the contours in it these are real

00:28:21,080 --> 00:28:27,890
HTML elements the video player in chrome

00:28:24,950 --> 00:28:31,309
is just a web component this means that

00:28:27,890 --> 00:28:36,020
for example the slider and and the

00:28:31,309 --> 00:28:38,900
volume button are real HTML elements so

00:28:36,020 --> 00:28:43,400
it doesn't look like I've got a simple

00:28:38,900 --> 00:28:45,470
example here I have a regular h1 element

00:28:43,400 --> 00:28:48,020
I have an

00:28:45,470 --> 00:28:50,960
mint will hold my shadow Dom I need a

00:28:48,020 --> 00:28:55,280
host for it in the document and I have

00:28:50,960 --> 00:28:57,740
this CSS declaration in the outside HTML

00:28:55,280 --> 00:29:00,020
I'm declaring it with important on

00:28:57,740 --> 00:29:02,900
purpose here to show that it hasn't

00:29:00,020 --> 00:29:06,919
applied to the shadow Dom element it's

00:29:02,900 --> 00:29:08,539
still red and with this JavaScript code

00:29:06,919 --> 00:29:12,320
I am generating the shadow Dom and

00:29:08,539 --> 00:29:14,630
fetching my host for it and with my

00:29:12,320 --> 00:29:18,710
element that had shadow if this this API

00:29:14,630 --> 00:29:21,710
I'm generating strata Dom element inside

00:29:18,710 --> 00:29:24,440
my host and inside this host

00:29:21,710 --> 00:29:29,260
I'm injection I'm injecting this style

00:29:24,440 --> 00:29:33,679
and this element another h1 element with

00:29:29,260 --> 00:29:37,909
the style h1 declares a color of red so

00:29:33,679 --> 00:29:41,419
if if this HTML snippet if this style

00:29:37,909 --> 00:29:43,070
would exist in the outside document it

00:29:41,419 --> 00:29:44,900
would get overwritten by this important

00:29:43,070 --> 00:29:49,400
declaration here this means that both of

00:29:44,900 --> 00:29:53,240
these h1 elements would be blue but but

00:29:49,400 --> 00:29:55,970
because of shadow Dom it is encapsulated

00:29:53,240 --> 00:30:03,679
so it does the outside style doesn't

00:29:55,970 --> 00:30:08,090
touch the inner element so but if you

00:30:03,679 --> 00:30:11,179
are using like like shadow Dom widgets

00:30:08,090 --> 00:30:13,549
for your application how do you even

00:30:11,179 --> 00:30:17,030
style is something in there then because

00:30:13,549 --> 00:30:18,500
this your corporate design you're using

00:30:17,030 --> 00:30:20,270
the face design may not match what's

00:30:18,500 --> 00:30:22,789
what's being provided by the fat pad

00:30:20,270 --> 00:30:26,929
widget library so there is a way to do

00:30:22,789 --> 00:30:30,110
that and this is for example like

00:30:26,929 --> 00:30:33,679
polymer GS what they are using is you

00:30:30,110 --> 00:30:36,130
declare each CSS custom properties or

00:30:33,679 --> 00:30:40,820
CSS variables as you could name it and

00:30:36,130 --> 00:30:43,190
these custom properties will pierce the

00:30:40,820 --> 00:30:46,940
shadow Dom boundary so when we have a

00:30:43,190 --> 00:30:53,450
look here I've adapted the style in the

00:30:46,940 --> 00:30:57,029
shadow Dom to use this bar to have to

00:30:53,450 --> 00:31:00,869
take the value of this CSS

00:30:57,029 --> 00:31:03,899
of this CSS variable but also to provide

00:31:00,869 --> 00:31:07,049
a default value in this case it's red

00:31:03,899 --> 00:31:09,809
but because I'm declaring a nice GSS

00:31:07,049 --> 00:31:12,689
variable outside to have the cons of

00:31:09,809 --> 00:31:15,809
green it will get applied instead of red

00:31:12,689 --> 00:31:18,449
so this is a way to style third-party

00:31:15,809 --> 00:31:24,479
widgets which are basic based on shadow

00:31:18,449 --> 00:31:28,859
Dom the good thing is that whatever you

00:31:24,479 --> 00:31:29,579
are whatever you're using needs to

00:31:28,859 --> 00:31:32,399
support it

00:31:29,579 --> 00:31:35,129
you can't overrule any style into the

00:31:32,399 --> 00:31:36,839
into the shadow Dom body by accident

00:31:35,129 --> 00:31:39,059
whatever library you're using whatever

00:31:36,839 --> 00:31:43,439
part of it you're using must expose this

00:31:39,059 --> 00:31:46,829
must must have used for this CSS

00:31:43,439 --> 00:31:54,599
variable so you can't destroy anything

00:31:46,829 --> 00:31:57,389
in the indiv individual yeah one bad

00:31:54,599 --> 00:31:59,189
thing at the moment is that its support

00:31:57,389 --> 00:32:02,999
for shadow Dom isn't very very great

00:31:59,189 --> 00:32:07,499
unfortunately browsers like Chrome

00:32:02,999 --> 00:32:09,179
Safari Opera supporting it unfortunately

00:32:07,499 --> 00:32:10,649
one of the biggest alternative browsers

00:32:09,179 --> 00:32:14,449
Firefox isn't supporting it at the

00:32:10,649 --> 00:32:17,879
moment this is still in development and

00:32:14,449 --> 00:32:23,939
Internet's Pro and edge are considering

00:32:17,879 --> 00:32:25,349
implementing shadow Dom considering when

00:32:23,939 --> 00:32:26,339
you want to use shadow Dom today you

00:32:25,349 --> 00:32:28,379
have to use polyfills

00:32:26,339 --> 00:32:31,099
there are polyfills of course but the

00:32:28,379 --> 00:32:33,989
problem with those is that they are

00:32:31,099 --> 00:32:37,529
emulating shadow Dom if javascript is

00:32:33,989 --> 00:32:38,999
lisslow that's a very big downside you

00:32:37,529 --> 00:32:40,669
can use it as a progressive enhancement

00:32:38,999 --> 00:32:44,639
for example when you have got to look at

00:32:40,669 --> 00:32:48,149
Twitter app Twitter timeline in browsers

00:32:44,639 --> 00:32:49,649
like Chrome every every element or every

00:32:48,149 --> 00:32:52,189
tweet in your timeline will be a shadow

00:32:49,649 --> 00:32:54,989
Dom element and for other process it's

00:32:52,189 --> 00:32:57,779
for Specter an iframe this the

00:32:54,989 --> 00:33:00,169
individual tweets will be embedded as

00:32:57,779 --> 00:33:00,169
iframes

00:33:00,259 --> 00:33:07,399
so unfortunately support isn't very

00:33:03,179 --> 00:33:07,399
great at the moment so

00:33:07,710 --> 00:33:12,749
quite a time ago I mentioned that

00:33:09,940 --> 00:33:17,129
angular had Christophe in this regard

00:33:12,749 --> 00:33:19,359
and it's since the version 2 it supports

00:33:17,129 --> 00:33:21,639
something called view encapsulation

00:33:19,359 --> 00:33:27,519
we've got two approaches how to handle

00:33:21,639 --> 00:33:30,519
your CSS the first thing is the default

00:33:27,519 --> 00:33:33,669
it's the the emulated mode you don't

00:33:30,519 --> 00:33:35,769
have to define this inclination emulated

00:33:33,669 --> 00:33:36,909
on your component it's its default but

00:33:35,769 --> 00:33:41,139
it's just included here for

00:33:36,909 --> 00:33:43,299
demonstration what it does is so what

00:33:41,139 --> 00:33:46,299
you have to do is you you just define

00:33:43,299 --> 00:33:48,879
your style as a style us is to study

00:33:46,299 --> 00:33:51,489
wealth property and you just write a

00:33:48,879 --> 00:33:54,940
selector plain and simple h1 color red

00:33:51,489 --> 00:33:58,089
that's it and you can see this is the

00:33:54,940 --> 00:34:01,179
restart the rendered we start with two

00:33:58,089 --> 00:34:03,190
h1 components and you see that the

00:34:01,179 --> 00:34:04,559
second one isn't affected by that so how

00:34:03,190 --> 00:34:07,169
does it work

00:34:04,559 --> 00:34:10,359
when you have a look at the output and

00:34:07,169 --> 00:34:12,730
you could see that in our component

00:34:10,359 --> 00:34:14,760
markup every every single element in the

00:34:12,730 --> 00:34:18,480
component markup gets a new attribute

00:34:14,760 --> 00:34:20,950
this energy content c1 and every

00:34:18,480 --> 00:34:22,960
component you're using in your output

00:34:20,950 --> 00:34:25,539
will increase this number here will have

00:34:22,960 --> 00:34:27,879
its own attribute applied to all

00:34:25,539 --> 00:34:30,069
elements in it and when you have a look

00:34:27,879 --> 00:34:33,220
at what will what will get in check the

00:34:30,069 --> 00:34:36,159
styling in the output you also see it is

00:34:33,220 --> 00:34:38,529
attribute selector here this makes sure

00:34:36,159 --> 00:34:40,359
that the Styles you are using in your

00:34:38,529 --> 00:34:42,309
component style should only apply to to

00:34:40,359 --> 00:34:44,200
that component which is quite cool

00:34:42,309 --> 00:34:48,909
because they don't have to configure or

00:34:44,200 --> 00:34:52,359
do anything else just use it and the

00:34:48,909 --> 00:34:55,000
second way to do is angler has a second

00:34:52,359 --> 00:34:57,940
way you could also say my view

00:34:55,000 --> 00:34:58,779
encapsulation should be native what does

00:34:57,940 --> 00:35:01,059
this do now

00:34:58,779 --> 00:35:05,859
this uses shadow Dom this generates

00:35:01,059 --> 00:35:07,359
shadow Dom fare components and what's

00:35:05,859 --> 00:35:09,430
the cool thing is you don't have to do

00:35:07,359 --> 00:35:11,529
it yourself the framework does it for

00:35:09,430 --> 00:35:13,059
you and when you have a look at it in

00:35:11,529 --> 00:35:15,400
the chrome developer tools you see

00:35:13,059 --> 00:35:18,549
that's really a fair atom component and

00:35:15,400 --> 00:35:19,930
also of course when you have really CD

00:35:18,549 --> 00:35:21,640
style here

00:35:19,930 --> 00:35:29,650
this doesn't bleed out of a document

00:35:21,640 --> 00:35:32,770
this is style definition here so I've

00:35:29,650 --> 00:35:35,280
could only touch every topic briefly of

00:35:32,770 --> 00:35:38,650
course because of quite a many of them

00:35:35,280 --> 00:35:41,080
every method has its upsides and

00:35:38,650 --> 00:35:42,670
downsides of course ours depends on your

00:35:41,080 --> 00:35:44,500
project and if the framework you're

00:35:42,670 --> 00:35:47,110
using if you could use or should use or

00:35:44,500 --> 00:35:50,070
can't use some some of these approaches

00:35:47,110 --> 00:35:52,810
I showed you and in the end you have to

00:35:50,070 --> 00:35:56,440
probably mix different approaches so

00:35:52,810 --> 00:35:59,590
that it suits your needs so I'm finished

00:35:56,440 --> 00:36:01,530
now thanks for listening you know only

00:35:59,590 --> 00:36:05,499
took six minutes

00:36:01,530 --> 00:36:05,499

YouTube URL: https://www.youtube.com/watch?v=8srjEE7YF4o


