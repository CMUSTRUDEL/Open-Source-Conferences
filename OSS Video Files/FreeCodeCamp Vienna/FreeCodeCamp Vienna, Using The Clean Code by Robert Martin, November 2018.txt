Title: FreeCodeCamp Vienna, Using The Clean Code by Robert Martin, November 2018
Publication date: 2018-11-24
Playlist: FreeCodeCamp Vienna
Description: 
	Talk by Daniel Deutsch,

Daniel will summarize key issues from the famous book and explain how to implement some of the principles in real life.
Captions: 
	00:00:00,000 --> 00:00:04,890
so how to actually read a book very

00:00:02,879 --> 00:00:07,319
basic many people think it's easy to

00:00:04,890 --> 00:00:10,830
read a book but it's actually not I

00:00:07,319 --> 00:00:13,139
recently heard a quote that very rich

00:00:10,830 --> 00:00:16,350
and famous person is not reading books

00:00:13,139 --> 00:00:18,359
but actually using books and there are a

00:00:16,350 --> 00:00:22,080
few things I want to address a book

00:00:18,359 --> 00:00:24,330
equals knowledge a book is not just a

00:00:22,080 --> 00:00:26,070
piece of paper or a collection of papers

00:00:24,330 --> 00:00:29,570
a book is knowledge and it should be

00:00:26,070 --> 00:00:32,730
treated as knowledge you should not have

00:00:29,570 --> 00:00:35,760
to read it from start to end because

00:00:32,730 --> 00:00:38,690
that's just the way the offer was trying

00:00:35,760 --> 00:00:40,530
to make the content and the knowledge

00:00:38,690 --> 00:00:43,559
accessible to you in the most

00:00:40,530 --> 00:00:46,500
appropriate way and the last thing here

00:00:43,559 --> 00:00:49,050
is examples are examples so don't get

00:00:46,500 --> 00:00:52,739
hung up don't implement examples it's

00:00:49,050 --> 00:00:54,660
just for visualizing a concept that is

00:00:52,739 --> 00:00:56,910
discussed in a book and it's very

00:00:54,660 --> 00:01:00,120
important for programming books in my

00:00:56,910 --> 00:01:02,399
opinion so they suggest that workflow is

00:01:00,120 --> 00:01:04,860
to understand first of all what you need

00:01:02,399 --> 00:01:06,570
from the book you should not read a book

00:01:04,860 --> 00:01:08,460
or you can read a book because you're

00:01:06,570 --> 00:01:09,900
bored but most likely you will read a

00:01:08,460 --> 00:01:12,180
book because you need something you need

00:01:09,900 --> 00:01:14,130
information whether it be for your

00:01:12,180 --> 00:01:15,810
studies or whether it be for your work

00:01:14,130 --> 00:01:17,939
where you have to read an article about

00:01:15,810 --> 00:01:20,909
how implement how to implement the

00:01:17,939 --> 00:01:22,680
library the second step is actually look

00:01:20,909 --> 00:01:24,750
for what you need you don't have to read

00:01:22,680 --> 00:01:27,060
the whole book you don't read to you

00:01:24,750 --> 00:01:29,579
don't have to read the whole medium.com

00:01:27,060 --> 00:01:31,409
platform just look for what you need and

00:01:29,579 --> 00:01:34,049
stackoverflow is a great example

00:01:31,409 --> 00:01:37,110
you're not researching Stack Overflow

00:01:34,049 --> 00:01:39,720
you're looking exactly for what you need

00:01:37,110 --> 00:01:42,299
and the last step is actually implement

00:01:39,720 --> 00:01:44,579
what you need after you have understood

00:01:42,299 --> 00:01:45,990
what you need and also look for what you

00:01:44,579 --> 00:01:48,390
need you have to implement the

00:01:45,990 --> 00:01:51,840
information that you extracted from the

00:01:48,390 --> 00:01:53,970
book so that's basically how and that's

00:01:51,840 --> 00:01:56,310
just the work learn how to read actually

00:01:53,970 --> 00:01:58,619
in my opinion and that's why it's also

00:01:56,310 --> 00:02:01,259
important because someone said they

00:01:58,619 --> 00:02:04,350
started the book but did not finish it

00:02:01,259 --> 00:02:05,460
and that's totally fine if you know what

00:02:04,350 --> 00:02:07,640
you're looking for and what you need

00:02:05,460 --> 00:02:10,739
that's okay

00:02:07,640 --> 00:02:13,800
so now about the book this one is look

00:02:10,739 --> 00:02:17,430
like it was written by Robert

00:02:13,800 --> 00:02:21,420
Martin and I think some Co offers he has

00:02:17,430 --> 00:02:25,560
very very large experience and writing

00:02:21,420 --> 00:02:29,130
code more more more centuries of years I

00:02:25,560 --> 00:02:30,920
think and here in this book he simply

00:02:29,130 --> 00:02:33,360
collected some ideas and principle

00:02:30,920 --> 00:02:36,630
principles on how to actually write

00:02:33,360 --> 00:02:40,290
maintainable and clean code so I would

00:02:36,630 --> 00:02:45,810
like to start with a few quotes that are

00:02:40,290 --> 00:02:47,850
mentioned in the book so if you want to

00:02:45,810 --> 00:02:50,070
go fast if you want to get get it done

00:02:47,850 --> 00:02:52,560
quickly if you want your code to be easy

00:02:50,070 --> 00:02:54,660
to write make it easy to read I think

00:02:52,560 --> 00:02:56,850
it's also referenced in the book some

00:02:54,660 --> 00:02:59,520
statistics that most of the time a

00:02:56,850 --> 00:03:01,380
developer spends programming is not

00:02:59,520 --> 00:03:03,390
really the act of programming and

00:03:01,380 --> 00:03:05,490
writing code but actually to read into

00:03:03,390 --> 00:03:07,590
the code base read into the existing

00:03:05,490 --> 00:03:10,080
code understand what's going on there

00:03:07,590 --> 00:03:12,600
and if you are able to reduce that time

00:03:10,080 --> 00:03:15,750
you're already creating real additional

00:03:12,600 --> 00:03:19,020
value for a company another quote is you

00:03:15,750 --> 00:03:21,120
should name very variable using the same

00:03:19,020 --> 00:03:24,060
care with which you name a firstborn

00:03:21,120 --> 00:03:26,670
child it may it may sound silly but

00:03:24,060 --> 00:03:30,000
actually if you are dealing with a large

00:03:26,670 --> 00:03:32,489
code base or have to have have dealt

00:03:30,000 --> 00:03:34,140
with a large code base in the past you

00:03:32,489 --> 00:03:36,470
will know how important naming is

00:03:34,140 --> 00:03:39,390
because you will run into issues

00:03:36,470 --> 00:03:41,340
lowercase you have to know what case

00:03:39,390 --> 00:03:44,010
system you actually use and if you have

00:03:41,340 --> 00:03:48,270
similar names you most likely to run

00:03:44,010 --> 00:03:50,640
into some pretty severe problems another

00:03:48,270 --> 00:03:53,400
thing is it's not the language that

00:03:50,640 --> 00:03:55,380
makes programs appear simple it's the

00:03:53,400 --> 00:03:57,959
programmer that make the language appear

00:03:55,380 --> 00:04:02,550
simple so I like I like this quote

00:03:57,959 --> 00:04:04,950
because it's actually really it's an art

00:04:02,550 --> 00:04:10,650
coding is not just building a product

00:04:04,950 --> 00:04:13,890
it's art and if you put an effort to

00:04:10,650 --> 00:04:16,700
make your art or your product readable

00:04:13,890 --> 00:04:20,700
and understandable then it's really

00:04:16,700 --> 00:04:22,800
simple and that's how it should be for

00:04:20,700 --> 00:04:24,870
other programmers to work with and I

00:04:22,800 --> 00:04:27,570
think the last one is writing clean code

00:04:24,870 --> 00:04:29,430
is what you must do in order to call you

00:04:27,570 --> 00:04:31,770
a professional there's no reasonable

00:04:29,430 --> 00:04:34,710
excuse for doing anything less than your

00:04:31,770 --> 00:04:37,080
best and also like this one even if

00:04:34,710 --> 00:04:39,000
you're a beginner or you like to be a

00:04:37,080 --> 00:04:41,520
professional but it doesn't really just

00:04:39,000 --> 00:04:45,120
apply to programmers or programming but

00:04:41,520 --> 00:04:48,660
for all kinds of work you have been

00:04:45,120 --> 00:04:51,480
doing or you want to do you have to give

00:04:48,660 --> 00:04:53,640
your best to actually consider yourself

00:04:51,480 --> 00:04:57,240
a professional and really put an effort

00:04:53,640 --> 00:05:00,990
to make everything you create as good as

00:04:57,240 --> 00:05:03,360
possible and as Will Smith said you

00:05:00,990 --> 00:05:06,120
cannot start building a wall you just

00:05:03,360 --> 00:05:08,070
lay one brick as perfectly as one brick

00:05:06,120 --> 00:05:11,280
can be laid and that's the same with

00:05:08,070 --> 00:05:13,620
code you have to build one module one

00:05:11,280 --> 00:05:15,900
piece of code as perfectly as you can

00:05:13,620 --> 00:05:18,330
build it and then soon you will have a

00:05:15,900 --> 00:05:21,270
wall or in our case an application that

00:05:18,330 --> 00:05:24,150
will work and is also scalable so an

00:05:21,270 --> 00:05:26,280
overview about the book and Rob please

00:05:24,150 --> 00:05:27,510
give me a hint if I'm going too long

00:05:26,280 --> 00:05:30,510
because I'm not quite sure about the

00:05:27,510 --> 00:05:32,760
time he talks about clean code in

00:05:30,510 --> 00:05:35,370
general what is clean code he talks

00:05:32,760 --> 00:05:38,100
about names about functions and classes

00:05:35,370 --> 00:05:40,440
of course Commons formats objects and

00:05:38,100 --> 00:05:43,530
data structures error handling unit

00:05:40,440 --> 00:05:46,020
tests systems and he actually shows the

00:05:43,530 --> 00:05:49,080
process of refinement or the process of

00:05:46,020 --> 00:05:51,000
refactoring just if you want to to buy

00:05:49,080 --> 00:05:52,980
the book the examples are all in Java

00:05:51,000 --> 00:05:55,710
but there are some excellent articles on

00:05:52,980 --> 00:05:59,670
the internet on how to transfer transfer

00:05:55,710 --> 00:06:01,920
the concepts on JavaScript or any other

00:05:59,670 --> 00:06:03,330
language you like but I just looked for

00:06:01,920 --> 00:06:06,660
JavaScript and they have some nice

00:06:03,330 --> 00:06:08,730
examples I just want to talk touch a few

00:06:06,660 --> 00:06:10,260
key concepts because the time frame is

00:06:08,730 --> 00:06:13,020
just not big enough to talk about

00:06:10,260 --> 00:06:15,050
everything I want just to talk about the

00:06:13,020 --> 00:06:17,520
most important stuff or I found most

00:06:15,050 --> 00:06:20,430
important for me as a developer in my

00:06:17,520 --> 00:06:22,320
work and the first thing I want to talk

00:06:20,430 --> 00:06:25,320
about is readability as I said before

00:06:22,320 --> 00:06:27,540
readability readability is key for good

00:06:25,320 --> 00:06:29,790
software development development and

00:06:27,540 --> 00:06:31,890
also for other people to work with you

00:06:29,790 --> 00:06:35,100
understand your code and the first issue

00:06:31,890 --> 00:06:37,890
is names names should be descriptive and

00:06:35,100 --> 00:06:40,169
consistent for example they have an

00:06:37,890 --> 00:06:41,490
example in the book actually you should

00:06:40,169 --> 00:06:44,990
always name

00:06:41,490 --> 00:06:48,300
your variables the way you can speak

00:06:44,990 --> 00:06:50,699
words actually if you cannot pronounce a

00:06:48,300 --> 00:06:52,710
variable name that's most likely a hint

00:06:50,699 --> 00:06:55,080
that it's not a good name for example

00:06:52,710 --> 00:06:56,460
and also descriptive they should

00:06:55,080 --> 00:06:59,849
describe what they are actually doing

00:06:56,460 --> 00:07:01,520
because many people of your I think you

00:06:59,849 --> 00:07:04,740
have used I don't know for loops and

00:07:01,520 --> 00:07:07,229
often they using just the I that you are

00:07:04,740 --> 00:07:09,990
increasing with every loop that's in

00:07:07,229 --> 00:07:13,440
this case that's okay but other than

00:07:09,990 --> 00:07:14,729
that the variable names should always be

00:07:13,440 --> 00:07:17,340
it doesn't matter how long they can be

00:07:14,729 --> 00:07:18,900
long but they should be descriptive they

00:07:17,340 --> 00:07:23,580
should exactly describe what they are

00:07:18,900 --> 00:07:25,770
actually doing and another thing is to

00:07:23,580 --> 00:07:28,800
avoid mental mapping mental mapping is

00:07:25,770 --> 00:07:30,509
something if you have if your

00:07:28,800 --> 00:07:33,449
description of a variable is not concise

00:07:30,509 --> 00:07:35,699
enough you have to check in other parts

00:07:33,449 --> 00:07:38,490
of your code what that variable actually

00:07:35,699 --> 00:07:40,650
means you have to look in another file

00:07:38,490 --> 00:07:42,870
you have to go to the bottom you have to

00:07:40,650 --> 00:07:45,090
go to the to the top wherever that's

00:07:42,870 --> 00:07:47,280
mental mapping it should be really easy

00:07:45,090 --> 00:07:51,090
to read it should be and that's another

00:07:47,280 --> 00:07:53,520
point here it should be like a book a

00:07:51,090 --> 00:07:55,860
good code should also be like a book to

00:07:53,520 --> 00:07:58,080
read if you have a book you start with

00:07:55,860 --> 00:07:59,669
with the heathered the heading you start

00:07:58,080 --> 00:08:01,289
with an introduction and then you read

00:07:59,669 --> 00:08:03,150
through the content and that's the same

00:08:01,289 --> 00:08:05,550
with with the code base with a code file

00:08:03,150 --> 00:08:07,320
you start maybe with import you get a

00:08:05,550 --> 00:08:09,240
feeling okay what is important what is

00:08:07,320 --> 00:08:11,520
going on here you start for example if

00:08:09,240 --> 00:08:13,830
you're using react you start with a

00:08:11,520 --> 00:08:15,780
class name stateless component you know

00:08:13,830 --> 00:08:18,960
all right it's it's a function here and

00:08:15,780 --> 00:08:21,240
and then going through that starting

00:08:18,960 --> 00:08:25,169
with the with the functions that are

00:08:21,240 --> 00:08:27,449
used later on so defining and declaring

00:08:25,169 --> 00:08:29,669
it on top and then using it later on and

00:08:27,449 --> 00:08:32,310
that's basically the step down rule you

00:08:29,669 --> 00:08:35,579
start building your code pace and your

00:08:32,310 --> 00:08:37,289
files like a book just reading it if you

00:08:35,579 --> 00:08:39,000
can't read it and if you have to jump

00:08:37,289 --> 00:08:41,990
around in your code file it can be

00:08:39,000 --> 00:08:44,610
improved basically and that's what they

00:08:41,990 --> 00:08:46,470
say in the book so that are very

00:08:44,610 --> 00:08:48,510
important our concept and I'd like to

00:08:46,470 --> 00:08:52,620
talk about is the single responsibility

00:08:48,510 --> 00:08:54,510
principle and this is about function

00:08:52,620 --> 00:08:55,500
should have one and only one reason to

00:08:54,510 --> 00:08:57,810
change

00:08:55,500 --> 00:09:00,960
the number of arguments should be as

00:08:57,810 --> 00:09:03,540
little as possible and the same goes for

00:09:00,960 --> 00:09:05,610
flag arguments because I guess most of

00:09:03,540 --> 00:09:08,190
you if you have worked as developer you

00:09:05,610 --> 00:09:10,890
have been using this like you set the

00:09:08,190 --> 00:09:13,110
boolean true and then the function does

00:09:10,890 --> 00:09:15,270
something else and I think is a little

00:09:13,110 --> 00:09:16,800
bit extreme but it's also just my

00:09:15,270 --> 00:09:20,310
interpretation of the book maybe that's

00:09:16,800 --> 00:09:25,310
wrong but in general they say use this

00:09:20,310 --> 00:09:29,040
as little arguments as possible and also

00:09:25,310 --> 00:09:32,940
focus on keeping the function as small

00:09:29,040 --> 00:09:35,070
and clean as possible yes your function

00:09:32,940 --> 00:09:37,860
should do only one thing and you should

00:09:35,070 --> 00:09:39,870
set up your your code base with little

00:09:37,860 --> 00:09:42,270
functions every function does exactly

00:09:39,870 --> 00:09:44,730
what it needs to do and what it's what

00:09:42,270 --> 00:09:48,570
you expect it to do and then you build

00:09:44,730 --> 00:09:51,720
an application with small stones so to

00:09:48,570 --> 00:09:56,810
speak the last thing is no comments if

00:09:51,720 --> 00:09:59,700
possible the offers regard comments as

00:09:56,810 --> 00:10:02,730
failure in the code if you have to

00:09:59,700 --> 00:10:05,370
comment your code then you fail to make

00:10:02,730 --> 00:10:06,900
it readable because you should as we as

00:10:05,370 --> 00:10:09,089
we have discussed you should name your

00:10:06,900 --> 00:10:11,190
your variables and your function as

00:10:09,089 --> 00:10:14,400
descriptive as possible so if you have

00:10:11,190 --> 00:10:17,460
to add comments you already failed you

00:10:14,400 --> 00:10:21,120
really failed to build a readable code

00:10:17,460 --> 00:10:23,520
base there are of course and this is now

00:10:21,120 --> 00:10:25,290
just really collected of course there

00:10:23,520 --> 00:10:27,060
are some issues where comments are okay

00:10:25,290 --> 00:10:31,080
like for example I think they mention

00:10:27,060 --> 00:10:33,180
legal notice or reduce sometimes you put

00:10:31,080 --> 00:10:35,880
to do comment in your codebase that's

00:10:33,180 --> 00:10:38,280
also ok but you should never comment out

00:10:35,880 --> 00:10:40,500
code you should never trying to explain

00:10:38,280 --> 00:10:43,710
code because you have to maintain

00:10:40,500 --> 00:10:46,740
comments as well and a comment in a

00:10:43,710 --> 00:10:49,020
normal developer perspective should help

00:10:46,740 --> 00:10:51,450
you understand the code but if you

00:10:49,020 --> 00:10:53,220
change the code and not the comment it's

00:10:51,450 --> 00:10:55,170
not only not helping you to understand

00:10:53,220 --> 00:10:57,450
the code but actually misleading you and

00:10:55,170 --> 00:11:02,490
that's the worst thing ever so try to

00:10:57,450 --> 00:11:05,370
avoid comments as far as possible so

00:11:02,490 --> 00:11:07,680
that's about readability another huge

00:11:05,370 --> 00:11:09,210
issue and I think we talked about it the

00:11:07,680 --> 00:11:12,120
last time

00:11:09,210 --> 00:11:16,650
is tests how many of you are using tests

00:11:12,120 --> 00:11:21,390
or test-driven development okay three

00:11:16,650 --> 00:11:24,840
people for the offerors

00:11:21,390 --> 00:11:28,200
suggests to always use or as often as

00:11:24,840 --> 00:11:30,870
possible test-driven development and the

00:11:28,200 --> 00:11:33,480
way to use test-driven development or to

00:11:30,870 --> 00:11:37,500
actually test drive your development is

00:11:33,480 --> 00:11:40,020
to write failing tests just think about

00:11:37,500 --> 00:11:42,060
what the component or or the function or

00:11:40,020 --> 00:11:44,190
whatever the module should do and then

00:11:42,060 --> 00:11:46,170
write tests about that because you're

00:11:44,190 --> 00:11:49,350
actually building the framework for what

00:11:46,170 --> 00:11:53,640
the function or the module should do the

00:11:49,350 --> 00:11:56,040
second step is only tests or yeah write

00:11:53,640 --> 00:11:58,170
only tested are sufficient to fail you

00:11:56,040 --> 00:12:00,360
don't have to test everything you should

00:11:58,170 --> 00:12:02,730
just have to test what you want to

00:12:00,360 --> 00:12:06,750
accomplish with the component or the

00:12:02,730 --> 00:12:08,910
module and the first step is do not

00:12:06,750 --> 00:12:11,310
write more production code than is

00:12:08,910 --> 00:12:13,080
sufficient to pass the tests so after

00:12:11,310 --> 00:12:15,240
you have written your tests you built

00:12:13,080 --> 00:12:16,020
the framework you fill the framework

00:12:15,240 --> 00:12:17,790
with code

00:12:16,020 --> 00:12:20,190
you don't have to write extra code

00:12:17,790 --> 00:12:22,380
because this is again not tested and you

00:12:20,190 --> 00:12:24,750
don't want that you want to have your

00:12:22,380 --> 00:12:27,570
code coverage as high as possible you

00:12:24,750 --> 00:12:30,720
want to have everything tested and they

00:12:27,570 --> 00:12:33,060
offers I'll talk about tests have to be

00:12:30,720 --> 00:12:34,920
maintained tests have to be maintained

00:12:33,060 --> 00:12:38,600
the same way your code have has to be

00:12:34,920 --> 00:12:42,360
maintained if you fail to maintain test

00:12:38,600 --> 00:12:45,930
then you again create a hole for

00:12:42,360 --> 00:12:48,180
failures because all tests do not cover

00:12:45,930 --> 00:12:48,960
something they do not they do not tell

00:12:48,180 --> 00:12:52,380
you something

00:12:48,960 --> 00:12:54,660
they just old and neglected and with

00:12:52,380 --> 00:12:56,580
neglecting tests you neglect the code

00:12:54,660 --> 00:12:59,850
base and then again your code base fails

00:12:56,580 --> 00:13:02,310
and it's not scalable also tests are

00:12:59,850 --> 00:13:04,890
great documentation especially with the

00:13:02,310 --> 00:13:07,920
frameworks for of today you can really

00:13:04,890 --> 00:13:09,930
write tests just as really as a book and

00:13:07,920 --> 00:13:11,730
then you can just read through tests and

00:13:09,930 --> 00:13:15,540
you understand what the module the

00:13:11,730 --> 00:13:17,850
component should do yeah again on

00:13:15,540 --> 00:13:19,350
testing just use one concept per

00:13:17,850 --> 00:13:20,160
function with as many asserts as

00:13:19,350 --> 00:13:23,020
necessary

00:13:20,160 --> 00:13:25,090
but again keep it as a shortest path

00:13:23,020 --> 00:13:27,300
you don't have to test everything just

00:13:25,090 --> 00:13:30,030
the concept that you really want to have

00:13:27,300 --> 00:13:32,320
applied in the module for example

00:13:30,030 --> 00:13:34,000
another great thing which is the last

00:13:32,320 --> 00:13:37,570
part here which was a little bit

00:13:34,000 --> 00:13:40,240
surprising for me is write tests for

00:13:37,570 --> 00:13:42,040
third-party libraries if you're trying

00:13:40,240 --> 00:13:44,590
to implement a third-party library like

00:13:42,040 --> 00:13:47,200
for example moment chess have you worked

00:13:44,590 --> 00:13:51,040
with moment chess someone it's basically

00:13:47,200 --> 00:13:56,080
a JavaScript library for manipulating

00:13:51,040 --> 00:13:57,460
data time date and time and if you are

00:13:56,080 --> 00:13:59,650
integrating a third-party library

00:13:57,460 --> 00:14:02,260
because those libraries do not have to

00:13:59,650 --> 00:14:04,330
be working perfectly they have issues

00:14:02,260 --> 00:14:05,530
other people just created them and push

00:14:04,330 --> 00:14:07,810
them on the internet they can have

00:14:05,530 --> 00:14:11,020
failures and one idea is to actually

00:14:07,810 --> 00:14:13,180
write tests for this library you're

00:14:11,020 --> 00:14:15,370
implementing to see if the library

00:14:13,180 --> 00:14:17,830
itself works this way you also

00:14:15,370 --> 00:14:19,750
understand the framework and library and

00:14:17,830 --> 00:14:23,350
then you can implement it perfectly in

00:14:19,750 --> 00:14:26,650
your code system so that's the idea of

00:14:23,350 --> 00:14:28,060
test I think also put an acronym because

00:14:26,650 --> 00:14:30,610
they put it in the book as well and I

00:14:28,060 --> 00:14:32,980
like it it test should be fast

00:14:30,610 --> 00:14:37,540
independent repeatable self validating

00:14:32,980 --> 00:14:38,860
and timely because they are suggesting

00:14:37,540 --> 00:14:40,930
test-driven development they should of

00:14:38,860 --> 00:14:44,200
course always before be before

00:14:40,930 --> 00:14:46,840
production but also just give a boolean

00:14:44,200 --> 00:14:49,660
output it should be fast and not depend

00:14:46,840 --> 00:14:54,040
on each other to work well I think

00:14:49,660 --> 00:14:56,590
there's not much to say about that one

00:14:54,040 --> 00:14:58,150
last thing about systems because I also

00:14:56,590 --> 00:15:00,640
like this part of the book a lot and

00:14:58,150 --> 00:15:04,570
it's also there are many images on how

00:15:00,640 --> 00:15:08,290
to actually build a system that is

00:15:04,570 --> 00:15:10,120
independent with its modules but the are

00:15:08,290 --> 00:15:12,610
at the offers basically or the offer

00:15:10,120 --> 00:15:14,890
basically says that you shoot your code

00:15:12,610 --> 00:15:17,020
you should organize your code for change

00:15:14,890 --> 00:15:20,880
because doesn't really matter what

00:15:17,020 --> 00:15:23,500
industry are you you're working on or in

00:15:20,880 --> 00:15:26,470
you probably have some feature requests

00:15:23,500 --> 00:15:29,230
you have changes in software that's been

00:15:26,470 --> 00:15:31,089
used you will always have change and

00:15:29,230 --> 00:15:34,810
that's why it's important to organize

00:15:31,089 --> 00:15:37,260
your code base for change it's also

00:15:34,810 --> 00:15:40,390
important to have a separation of

00:15:37,260 --> 00:15:43,360
to actually really divide your codebase

00:15:40,390 --> 00:15:45,820
into parts where it's clear on what is

00:15:43,360 --> 00:15:47,140
accomplished here if you have I don't

00:15:45,820 --> 00:15:49,330
know if you have a server that is

00:15:47,140 --> 00:15:51,310
serving something pull it there if you

00:15:49,330 --> 00:15:54,310
have of course and that's just the basic

00:15:51,310 --> 00:15:58,960
example front-end back-end really divide

00:15:54,310 --> 00:16:01,380
it into the parts that actually that

00:15:58,960 --> 00:16:04,240
what they are should what they are doing

00:16:01,380 --> 00:16:06,910
that's basically it and I think we can

00:16:04,240 --> 00:16:08,170
elaborate on that after the talk but

00:16:06,910 --> 00:16:10,270
there is much more to say about that

00:16:08,170 --> 00:16:12,790
and of course keep it modular the idea

00:16:10,270 --> 00:16:15,790
is always to have it as as small as

00:16:12,790 --> 00:16:18,370
possible and to use rather composition

00:16:15,790 --> 00:16:21,640
than inheritance to build an application

00:16:18,370 --> 00:16:24,820
and and and components out of small

00:16:21,640 --> 00:16:27,520
building blocks that can easily be be

00:16:24,820 --> 00:16:30,610
taken out and switched out if you like

00:16:27,520 --> 00:16:33,670
to but then again keeping the rest of

00:16:30,610 --> 00:16:35,650
the application intact and working so

00:16:33,670 --> 00:16:37,030
that's why I keep in modular is very

00:16:35,650 --> 00:16:44,490
important and I really like this

00:16:37,030 --> 00:16:48,400
approach also simple code to go to as a

00:16:44,490 --> 00:16:51,640
summary should be or should have tests

00:16:48,400 --> 00:16:53,620
that run that are run at all at all

00:16:51,640 --> 00:16:56,070
times basically but at least before

00:16:53,620 --> 00:16:59,200
merging it to master master branch

00:16:56,070 --> 00:17:01,150
should have notification expresses the

00:16:59,200 --> 00:17:03,730
intent of a programmer and of course

00:17:01,150 --> 00:17:07,690
minimizes classes and methods so that's

00:17:03,730 --> 00:17:10,180
basically everything together yeah

00:17:07,690 --> 00:17:13,360
there's so much to say but let's have

00:17:10,180 --> 00:17:16,030
that for later in the discussion now my

00:17:13,360 --> 00:17:18,100
take my takeaways key takeaways because

00:17:16,030 --> 00:17:20,949
I'm working in different teams with

00:17:18,100 --> 00:17:22,839
different coast code bases and again

00:17:20,949 --> 00:17:24,970
code should be elegant which means it's

00:17:22,839 --> 00:17:27,339
easy to write and focus so every part

00:17:24,970 --> 00:17:28,750
has a single-minded attitude you read

00:17:27,339 --> 00:17:30,400
through it it's easy to read and you

00:17:28,750 --> 00:17:34,480
actually you actually know what the code

00:17:30,400 --> 00:17:36,730
is doing whatever every part is doing so

00:17:34,480 --> 00:17:40,210
what can you take take away or what have

00:17:36,730 --> 00:17:41,560
I've been taking away from this book the

00:17:40,210 --> 00:17:44,260
first thing I was doing was analyzing

00:17:41,560 --> 00:17:46,810
our code base at work I was just going

00:17:44,260 --> 00:17:50,419
through it and I was identifying code

00:17:46,810 --> 00:17:52,460
smells or simply complicated code

00:17:50,419 --> 00:17:54,739
you read for your own code and you do

00:17:52,460 --> 00:17:56,119
not understand it that's a problem if

00:17:54,739 --> 00:17:58,970
you don't have to understand your

00:17:56,119 --> 00:18:02,629
colleagues code that's also a problem so

00:17:58,970 --> 00:18:06,289
if you find those issues in your code

00:18:02,629 --> 00:18:08,029
try to refactor it also check code

00:18:06,289 --> 00:18:10,100
coverage it's important to have your

00:18:08,029 --> 00:18:13,129
code tested so if you change something

00:18:10,100 --> 00:18:14,809
if you refactor something then of course

00:18:13,129 --> 00:18:19,970
the rest of the application should be

00:18:14,809 --> 00:18:21,950
working still yeah and the last thing is

00:18:19,970 --> 00:18:24,379
refactoring a test-driven way and

00:18:21,950 --> 00:18:26,720
implement new concepts so that was what

00:18:24,379 --> 00:18:29,179
I was doing actually I was writing tests

00:18:26,720 --> 00:18:30,830
about code base we had because of course

00:18:29,179 --> 00:18:32,899
we had not covered everything with tests

00:18:30,830 --> 00:18:36,169
so I was writing tests and then

00:18:32,899 --> 00:18:38,989
implement the new structural ideas again

00:18:36,169 --> 00:18:42,230
from the book and yeah that's basically

00:18:38,989 --> 00:18:45,619
how I use the book to improve the work

00:18:42,230 --> 00:18:47,570
flow so for me

00:18:45,619 --> 00:18:49,970
the suggested workflow because it's

00:18:47,570 --> 00:18:52,039
always difficult between theory and

00:18:49,970 --> 00:18:55,249
practice because you have deadlines we

00:18:52,039 --> 00:18:56,720
have a lot of issues and problems that

00:18:55,249 --> 00:18:59,570
needs to be need to be solved very

00:18:56,720 --> 00:19:01,820
quickly so the idea is once again and

00:18:59,570 --> 00:19:04,190
that's a concept that is being preached

00:19:01,820 --> 00:19:06,289
and every one of know what every one of

00:19:04,190 --> 00:19:09,350
you knows this but I think it's just

00:19:06,289 --> 00:19:11,269
important to be reminded as often as

00:19:09,350 --> 00:19:14,720
possible to do it that way because this

00:19:11,269 --> 00:19:17,480
will spare you a lot of headaches in the

00:19:14,720 --> 00:19:19,279
future and with larger code bases right

00:19:17,480 --> 00:19:21,950
tests as I said before we've test-driven

00:19:19,279 --> 00:19:24,739
development then write the code and now

00:19:21,950 --> 00:19:26,450
we are getting to the team experience to

00:19:24,739 --> 00:19:28,639
the company experience where you have

00:19:26,450 --> 00:19:30,139
the review stage and that's amazing in

00:19:28,639 --> 00:19:34,129
programming because you have pull

00:19:30,139 --> 00:19:38,059
requests if if you are having an worked

00:19:34,129 --> 00:19:40,639
out flow workflow with with git for

00:19:38,059 --> 00:19:41,989
example you merge everything into master

00:19:40,639 --> 00:19:44,480
after you have review it after

00:19:41,989 --> 00:19:47,359
colleagues have taken a look about the

00:19:44,480 --> 00:19:49,399
code and suggested improvements so

00:19:47,359 --> 00:19:51,109
that's a very very critical point for a

00:19:49,399 --> 00:19:54,019
good application and a good software and

00:19:51,109 --> 00:19:56,539
then after that refactor your code and

00:19:54,019 --> 00:20:00,019
it's always important to not get

00:19:56,539 --> 00:20:02,480
personal or get like emotional about a

00:20:00,019 --> 00:20:03,860
review because we've you should be just

00:20:02,480 --> 00:20:06,649
to improve

00:20:03,860 --> 00:20:10,820
it's for you to learn and for the

00:20:06,649 --> 00:20:12,470
application to be better yes so that's

00:20:10,820 --> 00:20:16,190
basically the suggested workflow I've

00:20:12,470 --> 00:20:19,809
taken away from this book there are some

00:20:16,190 --> 00:20:24,320
father reads they are not really visible

00:20:19,809 --> 00:20:27,740
but will I will post the PowerPoint

00:20:24,320 --> 00:20:31,580
presentation and yes of course I will

00:20:27,740 --> 00:20:37,580
also show you some examples because

00:20:31,580 --> 00:20:40,880
there is a great example online because

00:20:37,580 --> 00:20:42,409
I'm not I haven't added code but this

00:20:40,880 --> 00:20:48,919
looks a little bit dark maybe you can

00:20:42,409 --> 00:20:51,049
have a cleaner it's not that's really

00:20:48,919 --> 00:20:54,830
not clean can you see something here

00:20:51,049 --> 00:20:58,250
it's okay I will post the link after the

00:20:54,830 --> 00:21:01,789
talk but there is a great github

00:20:58,250 --> 00:21:03,409
repository about cannot read clean code

00:21:01,789 --> 00:21:05,630
JavaScript and they have some great

00:21:03,409 --> 00:21:09,320
examples like for example for the

00:21:05,630 --> 00:21:12,289
variables part for example this is can

00:21:09,320 --> 00:21:14,000
you read that can someone read that okay

00:21:12,289 --> 00:21:17,600
so there's this just an example on how

00:21:14,000 --> 00:21:20,059
to name it date no don't worry we do it

00:21:17,600 --> 00:21:22,659
after after that we do it after the talk

00:21:20,059 --> 00:21:28,070
yeah so these are basically just

00:21:22,659 --> 00:21:29,870
examples yes that was my talk about

00:21:28,070 --> 00:21:31,639
clean code if you have any questions

00:21:29,870 --> 00:21:32,500
feel free to ask thanks a lot for the

00:21:31,639 --> 00:21:36,700
attention

00:21:32,500 --> 00:21:36,700

YouTube URL: https://www.youtube.com/watch?v=PC60fAKJiek


