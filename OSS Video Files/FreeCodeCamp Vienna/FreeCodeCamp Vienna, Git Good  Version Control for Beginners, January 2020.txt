Title: FreeCodeCamp Vienna, Git Good  Version Control for Beginners, January 2020
Publication date: 2020-01-29
Playlist: FreeCodeCamp Vienna
Description: 
	by Hans-JÃ¶rg Schnedlitz

A short introduction into how you can incorporate Git into your development workflow. Along the way this talk should help to figure out why version control is useful and what to watch out for when using Git.
Captions: 
	00:00:00,030 --> 00:00:07,259
so what are we gonna check out today

00:00:02,639 --> 00:00:09,990
first of all I'm gonna give a I'm gonna

00:00:07,259 --> 00:00:12,240
give a real quick intro to what version

00:00:09,990 --> 00:00:13,950
control actually is okay it is a version

00:00:12,240 --> 00:00:15,330
control system what does it actually

00:00:13,950 --> 00:00:17,670
mean why do we need it

00:00:15,330 --> 00:00:19,590
what's it going to be and then we're

00:00:17,670 --> 00:00:21,330
actually gonna have a bit of a hands-on

00:00:19,590 --> 00:00:23,400
session so I'll be doing actually live

00:00:21,330 --> 00:00:25,880
coding from the terminal I'll be showing

00:00:23,400 --> 00:00:27,660
off how it works what you can do with it

00:00:25,880 --> 00:00:32,160
what could go wrong

00:00:27,660 --> 00:00:34,500
possibly we'll see you're encouraged if

00:00:32,160 --> 00:00:37,590
you have laptops to try at least to

00:00:34,500 --> 00:00:44,730
follow along I guess you can find the

00:00:37,590 --> 00:00:46,020
slides on here yeah this code samples

00:00:44,730 --> 00:00:49,739
and everything so you can check it out

00:00:46,020 --> 00:00:52,710
later as well if you want to and you a

00:00:49,739 --> 00:00:53,430
couple of other disclaimers yes the no

00:00:52,710 --> 00:00:56,550
questions please

00:00:53,430 --> 00:00:59,309
thank you questions at the end and we'll

00:00:56,550 --> 00:01:01,050
also have some time maybe to figure some

00:00:59,309 --> 00:01:04,199
stuff out if you have advanced questions

00:01:01,050 --> 00:01:05,939
come to me afterwards last thing I

00:01:04,199 --> 00:01:08,100
already said this is like a beginners

00:01:05,939 --> 00:01:10,619
talk okay I don't know maybe quick show

00:01:08,100 --> 00:01:12,330
of hands how many people are new to

00:01:10,619 --> 00:01:14,400
programming have now worked with git for

00:01:12,330 --> 00:01:17,460
example it's the anyone that has never

00:01:14,400 --> 00:01:19,500
worked with git couple of people who's a

00:01:17,460 --> 00:01:23,369
get expert who knows everything there is

00:01:19,500 --> 00:01:28,290
about git I don't believe you yes nobody

00:01:23,369 --> 00:01:30,150
does okay so it's a beginners talk it's

00:01:28,290 --> 00:01:31,560
for beginners so if you already know a

00:01:30,150 --> 00:01:35,189
lot about git if you've used it

00:01:31,560 --> 00:01:38,549
professionally some time already there

00:01:35,189 --> 00:01:39,780
might not be that much new stuff but you

00:01:38,549 --> 00:01:42,390
never know maybe you'll learn something

00:01:39,780 --> 00:01:45,170
new as well alright so that's with the

00:01:42,390 --> 00:01:47,790
intro let's get started with the content

00:01:45,170 --> 00:01:50,430
what is a version control system okay

00:01:47,790 --> 00:01:52,950
what is version control even git is a

00:01:50,430 --> 00:01:55,110
version control system but what what

00:01:52,950 --> 00:01:57,689
does that do what does it mean version

00:01:55,110 --> 00:02:00,299
control so version control is thanks

00:01:57,689 --> 00:02:02,700
Wikipedia the management of changes to

00:02:00,299 --> 00:02:07,049
documents blah blah blah so you manage

00:02:02,700 --> 00:02:09,690
changes okay what does that even mean I

00:02:07,049 --> 00:02:12,590
like to say verse referral systems allow

00:02:09,690 --> 00:02:16,160
us to track what happens when and

00:02:12,590 --> 00:02:17,390
and who did what okay it's also a bit

00:02:16,160 --> 00:02:20,690
abstract

00:02:17,390 --> 00:02:23,770
so version control systems keep this a

00:02:20,690 --> 00:02:26,500
version control system to illustrate

00:02:23,770 --> 00:02:28,790
what they are they are not actually

00:02:26,500 --> 00:02:30,440
intrinsic to programming you don't have

00:02:28,790 --> 00:02:32,090
to be a developer programmer to use a

00:02:30,440 --> 00:02:33,950
version control system there's version

00:02:32,090 --> 00:02:36,019
control in other places for example

00:02:33,950 --> 00:02:38,870
Google Docs write Google Docs has

00:02:36,019 --> 00:02:40,459
built-in version control now you don't

00:02:38,870 --> 00:02:42,560
even have to activate that I think they

00:02:40,459 --> 00:02:45,049
just have to find the menu point

00:02:42,560 --> 00:02:46,640
somewhere figure out where it is and

00:02:45,049 --> 00:02:50,600
then you can have a look at what your

00:02:46,640 --> 00:02:53,720
document looked like through time you

00:02:50,600 --> 00:02:55,940
see on the right-hand side all the

00:02:53,720 --> 00:02:59,239
versions that they offer is document you

00:02:55,940 --> 00:03:00,980
can see who made changes and which

00:02:59,239 --> 00:03:03,590
changes they made so for example when

00:03:00,980 --> 00:03:05,750
the version for February 28 right now we

00:03:03,590 --> 00:03:07,730
can see Melanie and Justin worked a bit

00:03:05,750 --> 00:03:09,830
on that document you can see Melanie

00:03:07,730 --> 00:03:13,819
changed some headers here and Justin

00:03:09,830 --> 00:03:15,440
added some stuff over there and yeah we

00:03:13,819 --> 00:03:17,090
can navigate between those versions we

00:03:15,440 --> 00:03:18,560
can go to another point in time check

00:03:17,090 --> 00:03:21,140
out the version of the document over

00:03:18,560 --> 00:03:25,940
there we can even go restore this

00:03:21,140 --> 00:03:28,640
version and yeah basically reset our

00:03:25,940 --> 00:03:31,100
document to that so it allows us kind of

00:03:28,640 --> 00:03:35,540
to time travel and to see what happened

00:03:31,100 --> 00:03:37,130
in time now what what good is that for

00:03:35,540 --> 00:03:39,500
you as programmers right we're not

00:03:37,130 --> 00:03:42,260
developing in Google Docs what's what's

00:03:39,500 --> 00:03:45,260
in it for us so imagine this you're

00:03:42,260 --> 00:03:47,420
you're working on a project you having

00:03:45,260 --> 00:03:49,790
fun you're coding along just sitting

00:03:47,420 --> 00:03:51,859
there happily it's all good and then you

00:03:49,790 --> 00:03:54,350
hit refresh or recompile or whatever and

00:03:51,859 --> 00:03:56,569
everything's everything's can I swear

00:03:54,350 --> 00:03:59,810
probably not okay everything is broken

00:03:56,569 --> 00:04:02,120
it's it's done for I you don't even know

00:03:59,810 --> 00:04:03,799
what's happening anymore okay now what

00:04:02,120 --> 00:04:06,319
version control system allows you to do

00:04:03,799 --> 00:04:07,670
is actually check out what you did like

00:04:06,319 --> 00:04:08,930
say you've been working on this thing

00:04:07,670 --> 00:04:10,760
for half an hour maybe you can't

00:04:08,930 --> 00:04:12,739
remember every tiny change something

00:04:10,760 --> 00:04:14,329
might have made some change somewhere

00:04:12,739 --> 00:04:16,190
you can't remember and that broke it

00:04:14,329 --> 00:04:20,659
version control allows you to see that

00:04:16,190 --> 00:04:23,000
it even allows you well if you figure ok

00:04:20,659 --> 00:04:25,099
these changes are just dumb I don't like

00:04:23,000 --> 00:04:25,760
them they broke my project you can just

00:04:25,099 --> 00:04:27,800
throw them away

00:04:25,760 --> 00:04:30,230
go back to the recent version of your

00:04:27,800 --> 00:04:33,590
project that you know still works that's

00:04:30,230 --> 00:04:35,390
cool right or what happens more often

00:04:33,590 --> 00:04:37,880
than and you would like to work with

00:04:35,390 --> 00:04:40,460
other people and they break your project

00:04:37,880 --> 00:04:42,620
so you can actually see what they did

00:04:40,460 --> 00:04:45,590
and how they broke it and I can yell at

00:04:42,620 --> 00:04:47,990
them or whatever you like or just throw

00:04:45,590 --> 00:04:53,000
the changes away no problem probably

00:04:47,990 --> 00:04:55,820
shouldn't don't okay so what tools do we

00:04:53,000 --> 00:04:58,310
have how can we do version control as

00:04:55,820 --> 00:05:01,580
developers there's a couple of options

00:04:58,310 --> 00:05:03,800
the main ones not sure if you can read

00:05:01,580 --> 00:05:06,530
that there's mercurial there's

00:05:03,800 --> 00:05:09,050
subversion and disk it ok the first tool

00:05:06,530 --> 00:05:11,150
I just mentioned I'm not going to go

00:05:09,050 --> 00:05:13,670
into them or the different is if you

00:05:11,150 --> 00:05:16,850
want to ask that later I can answer that

00:05:13,670 --> 00:05:19,730
but we'll stick to get for now why

00:05:16,850 --> 00:05:22,250
because get this I think the most

00:05:19,730 --> 00:05:24,320
widespread version control system there

00:05:22,250 --> 00:05:27,740
is today it's very powerful

00:05:24,320 --> 00:05:30,830
it's very can do a lot of stuff it's

00:05:27,740 --> 00:05:35,690
also pretty complicated at first so

00:05:30,830 --> 00:05:37,880
another good could say validation or

00:05:35,690 --> 00:05:40,190
reason to be for this talk to be here

00:05:37,880 --> 00:05:42,980
because when you get started with git

00:05:40,190 --> 00:05:47,060
it's kind of hard I think to grasp what

00:05:42,980 --> 00:05:48,500
it's even going on so that's where we're

00:05:47,060 --> 00:05:50,930
gonna start a hands-on session if you

00:05:48,500 --> 00:05:52,580
don't already have make sure you

00:05:50,930 --> 00:05:55,670
download kit you obviously need to have

00:05:52,580 --> 00:05:57,710
kit installed on your computer just

00:05:55,670 --> 00:06:00,290
Google download kit whatever it's

00:05:57,710 --> 00:06:02,300
available for Linux and Windows and Mac

00:06:00,290 --> 00:06:04,490
and everything if you haven't already

00:06:02,300 --> 00:06:06,140
also have to type in these commands to

00:06:04,490 --> 00:06:10,280
configure get locally on your computer

00:06:06,140 --> 00:06:15,440
and then you can get started which will

00:06:10,280 --> 00:06:19,670
do you can read that good enough like

00:06:15,440 --> 00:06:21,080
dark terminals so yeah so what's the

00:06:19,670 --> 00:06:22,790
setup the setup is we work on our

00:06:21,080 --> 00:06:24,980
project we we have a project with a

00:06:22,790 --> 00:06:26,510
source code but we actually don't write

00:06:24,980 --> 00:06:28,910
here because this is just the demo I'm

00:06:26,510 --> 00:06:33,800
not going to show off any source code I

00:06:28,910 --> 00:06:36,230
don't have any JavaScript or C++ if your

00:06:33,800 --> 00:06:37,520
internet to show off we're just going to

00:06:36,230 --> 00:06:38,599
do a dummy dummy

00:06:37,520 --> 00:06:40,610
check the first thing you need for

00:06:38,599 --> 00:06:42,710
project is a project folder right we're

00:06:40,610 --> 00:06:45,319
just going to create one you can create

00:06:42,710 --> 00:06:47,389
that any way you like I'm just using the

00:06:45,319 --> 00:06:50,599
terminal type and make directory make

00:06:47,389 --> 00:06:51,319
dire and our project folder so it's very

00:06:50,599 --> 00:06:54,250
creative

00:06:51,319 --> 00:06:56,840
it's got my project I don't know and

00:06:54,250 --> 00:07:00,889
we'll just create that and then we'll

00:06:56,840 --> 00:07:04,220
navigate into that so we in there change

00:07:00,889 --> 00:07:06,080
directory go into the project cool so

00:07:04,220 --> 00:07:07,699
okay we have a project there's nothing

00:07:06,080 --> 00:07:10,090
in there yet so the first thing we'll do

00:07:07,699 --> 00:07:13,280
is create a file you can do that if you

00:07:10,090 --> 00:07:14,630
follow along or whatever later you can

00:07:13,280 --> 00:07:16,190
do that any way you like you don't have

00:07:14,630 --> 00:07:17,569
to use the terminal just use whatever

00:07:16,190 --> 00:07:20,900
tools you are comfortable with

00:07:17,569 --> 00:07:24,110
so we'll do go create a file with

00:07:20,900 --> 00:07:28,669
content in it and the file is gonna be

00:07:24,110 --> 00:07:29,330
new file right to create that check it

00:07:28,669 --> 00:07:33,440
if it's there

00:07:29,330 --> 00:07:33,919
LS gives us the directory contents it's

00:07:33,440 --> 00:07:36,169
there

00:07:33,919 --> 00:07:39,080
that's nice what's in it we can show

00:07:36,169 --> 00:07:40,550
what's in the file using cat has nothing

00:07:39,080 --> 00:07:44,300
to does anyone know what it stands for

00:07:40,550 --> 00:07:47,180
what cat stands for actually no not that

00:07:44,300 --> 00:07:51,560
pretty sure not that like I don't

00:07:47,180 --> 00:07:55,490
actually know that's concatenate that's

00:07:51,560 --> 00:07:57,710
the back end developer that's so I know

00:07:55,490 --> 00:07:59,840
so show show what's in the file its

00:07:57,710 --> 00:08:03,080
content alright so at this point we

00:07:59,840 --> 00:08:06,409
haven't done anything with it yet but we

00:08:03,080 --> 00:08:08,990
will now the first thing we need to do

00:08:06,409 --> 00:08:11,029
is get in it what get in it does is

00:08:08,990 --> 00:08:15,139
basically it initializes what we call a

00:08:11,029 --> 00:08:18,050
repository which is like let's say

00:08:15,139 --> 00:08:22,180
database that git uses to track your

00:08:18,050 --> 00:08:25,729
changes okay let's hit that get in it oh

00:08:22,180 --> 00:08:27,979
 I want to do ignore the yellow

00:08:25,729 --> 00:08:29,900
stuff please I want to disable that kind

00:08:27,979 --> 00:08:32,959
of forgot whatever just tells me that I

00:08:29,900 --> 00:08:35,270
should use my aliases all right so it

00:08:32,959 --> 00:08:38,930
says initialized empty git repository in

00:08:35,270 --> 00:08:41,180
our project cool so now we have a

00:08:38,930 --> 00:08:42,770
project repository what can we do now

00:08:41,180 --> 00:08:44,630
well we want to create some versions we

00:08:42,770 --> 00:08:46,190
want to track what's going on and thing

00:08:44,630 --> 00:08:47,959
with git is it doesn't do that

00:08:46,190 --> 00:08:50,410
automatically when you work at Google

00:08:47,959 --> 00:08:53,080
Docs it just automatically

00:08:50,410 --> 00:08:55,060
does it like periodically on certain

00:08:53,080 --> 00:08:58,180
changes I'm not sure just creates these

00:08:55,060 --> 00:09:01,900
versions for you you're a programmer you

00:08:58,180 --> 00:09:04,240
don't do stuff for a magic you do but in

00:09:01,900 --> 00:09:05,530
this case you'll have to do that

00:09:04,240 --> 00:09:10,360
yourself you'll have to create your

00:09:05,530 --> 00:09:12,490
versions yourself and before actually

00:09:10,360 --> 00:09:14,410
before I do that let's see what is going

00:09:12,490 --> 00:09:20,470
on in a repository because it gives us

00:09:14,410 --> 00:09:21,970
git status and that shows us what what

00:09:20,470 --> 00:09:24,040
the current state of the problem of the

00:09:21,970 --> 00:09:27,040
repository is pretty obvious from the

00:09:24,040 --> 00:09:28,750
name and there's a couple there's some

00:09:27,040 --> 00:09:31,300
interesting information that we maybe

00:09:28,750 --> 00:09:33,280
don't know what to make of it

00:09:31,300 --> 00:09:35,110
we own branch master we'll get into that

00:09:33,280 --> 00:09:37,570
later there's no commit yet commit are

00:09:35,110 --> 00:09:40,960
names for versions commit is a version

00:09:37,570 --> 00:09:43,420
and there's some untracked files there's

00:09:40,960 --> 00:09:45,160
new file we created that but it's not

00:09:43,420 --> 00:09:47,560
cracked yet there's no versioning

00:09:45,160 --> 00:09:50,050
information for it and get this nice

00:09:47,560 --> 00:09:53,650
enough to give us some info like okay

00:09:50,050 --> 00:09:58,600
use git add to create a new community

00:09:53,650 --> 00:10:02,500
for this file so we can do that let's do

00:09:58,600 --> 00:10:05,140
that so keep add new file does something

00:10:02,500 --> 00:10:08,610
and it does add the file to what's

00:10:05,140 --> 00:10:12,090
called the index or staging area so

00:10:08,610 --> 00:10:16,510
let's go here for a second the thing is

00:10:12,090 --> 00:10:18,250
this version creation process is not

00:10:16,510 --> 00:10:20,110
that simple when you do get add you

00:10:18,250 --> 00:10:22,720
don't want to create a version for like

00:10:20,110 --> 00:10:24,370
one change in one file you want to punch

00:10:22,720 --> 00:10:26,230
those together you want to collect what

00:10:24,370 --> 00:10:28,690
you want to have an aversion the way to

00:10:26,230 --> 00:10:31,720
do that is work in a working directory

00:10:28,690 --> 00:10:34,690
right you make your changes then you

00:10:31,720 --> 00:10:37,090
select changes that you want to create a

00:10:34,690 --> 00:10:38,650
version from might get that you can do

00:10:37,090 --> 00:10:41,170
it repeatedly you can do that for

00:10:38,650 --> 00:10:43,000
multiple files you can add stuff to the

00:10:41,170 --> 00:10:44,830
index whatever you like and once you're

00:10:43,000 --> 00:10:46,870
happy they get added to the staging area

00:10:44,830 --> 00:10:48,280
once you're happy with all the changes

00:10:46,870 --> 00:10:50,800
that are in there and you actually say

00:10:48,280 --> 00:10:52,390
ok this is what I want to have in my in

00:10:50,800 --> 00:10:55,480
my version and my change set this is

00:10:52,390 --> 00:10:57,780
what I want to show up only then do you

00:10:55,480 --> 00:11:00,310
do git commit and only then it's

00:10:57,780 --> 00:11:04,610
committed to the repository it's made

00:11:00,310 --> 00:11:07,980
permanent part of the version history

00:11:04,610 --> 00:11:11,459
so we have added the file we can run git

00:11:07,980 --> 00:11:13,829
status again see what changed and now we

00:11:11,459 --> 00:11:15,750
say see that ok the stuff in the index

00:11:13,829 --> 00:11:17,579
the new file is in the index we can now

00:11:15,750 --> 00:11:21,000
commit it so let's do that

00:11:17,579 --> 00:11:27,269
we run git commit we give it a nice

00:11:21,000 --> 00:11:28,589
message add new changes very helpful

00:11:27,269 --> 00:11:30,990
message please make your git commit

00:11:28,589 --> 00:11:34,620
message is helpful when you work you

00:11:30,990 --> 00:11:38,009
don't want add stuff or whatever anyway

00:11:34,620 --> 00:11:40,920
we commit that and some more interesting

00:11:38,009 --> 00:11:42,569
stuff happens so now we see that it

00:11:40,920 --> 00:11:44,339
tells us there's a new root commit root

00:11:42,569 --> 00:11:46,829
because it's the first one there's new

00:11:44,339 --> 00:11:48,449
changes and even what changes were made

00:11:46,829 --> 00:11:51,209
there was one file changed we know it's

00:11:48,449 --> 00:11:54,389
new file there was one insertion so

00:11:51,209 --> 00:11:56,610
one-line edit and now that we have stuff

00:11:54,389 --> 00:11:59,430
in our history we have some versions we

00:11:56,610 --> 00:12:03,209
can have a look at those we can do git

00:11:59,430 --> 00:12:05,339
log and I think yeah whatever I haven't

00:12:03,209 --> 00:12:09,120
set my email properly doesn't matter so

00:12:05,339 --> 00:12:11,939
we can see what the commit is there's a

00:12:09,120 --> 00:12:14,009
hash that an identifier we can see who

00:12:11,939 --> 00:12:16,889
the office that's me when the commit was

00:12:14,009 --> 00:12:18,899
made and what changes they were made so

00:12:16,889 --> 00:12:23,550
that's one let's add another one know

00:12:18,899 --> 00:12:25,350
what I'm not happy with my document will

00:12:23,550 --> 00:12:27,149
overwrite what's in there so we'll make

00:12:25,350 --> 00:12:29,970
some changes to a source code override

00:12:27,149 --> 00:12:34,670
the first line with echo content with

00:12:29,970 --> 00:12:37,680
content exclamation mark and also add

00:12:34,670 --> 00:12:42,139
more content we'll add more content to

00:12:37,680 --> 00:12:44,189
the file have a look at it just sure

00:12:42,139 --> 00:12:46,699
right so there's content and more

00:12:44,189 --> 00:12:48,569
continent if you have a command line

00:12:46,699 --> 00:12:49,860
integration thing you like me you can

00:12:48,569 --> 00:12:53,879
already see there's like an exclamation

00:12:49,860 --> 00:12:55,680
mark and that tells us well we modified

00:12:53,879 --> 00:12:58,079
a new file that's already in the in the

00:12:55,680 --> 00:12:59,459
version it knows about the file and it

00:12:58,079 --> 00:13:01,470
can see it it already

00:12:59,459 --> 00:13:03,269
figures out well you made some changes

00:13:01,470 --> 00:13:05,399
what you want to do with those changes

00:13:03,269 --> 00:13:08,990
do you want to get add and git commit

00:13:05,399 --> 00:13:11,670
it's very helpful if you if you read it

00:13:08,990 --> 00:13:13,620
not a nifty thing now that we have a

00:13:11,670 --> 00:13:14,750
previous version of that file we can do

00:13:13,620 --> 00:13:17,959
git diff

00:13:14,750 --> 00:13:21,470
to show well the difference between

00:13:17,959 --> 00:13:23,930
stuff so we can see that knew how we

00:13:21,470 --> 00:13:25,339
have modified new file and I think you

00:13:23,930 --> 00:13:27,680
already can see that this is super

00:13:25,339 --> 00:13:29,660
helpful when you're working and you make

00:13:27,680 --> 00:13:31,790
some changes to base what actually what

00:13:29,660 --> 00:13:32,990
did I actually change and which files it

00:13:31,790 --> 00:13:35,209
would give you all the files it will

00:13:32,990 --> 00:13:36,589
give you all the changes and often than

00:13:35,209 --> 00:13:39,379
not you probably made some stuff that

00:13:36,589 --> 00:13:42,620
you don't want to be in there if you're

00:13:39,379 --> 00:13:44,180
like me I like program like madman and

00:13:42,620 --> 00:13:46,759
make changes everywhere and half the

00:13:44,180 --> 00:13:51,050
time I throw half of them away using

00:13:46,759 --> 00:13:53,959
this right so we have we see we can see

00:13:51,050 --> 00:13:56,569
the TIF we gonna add the changes again

00:13:53,959 --> 00:14:01,129
gonna do add new file again add it to

00:13:56,569 --> 00:14:08,240
the staging area and then commit it

00:14:01,129 --> 00:14:11,540
again add more changes cool and with git

00:14:08,240 --> 00:14:14,779
log we can now see there's two versions

00:14:11,540 --> 00:14:18,199
right so there's one where we added the

00:14:14,779 --> 00:14:20,269
initial one new changes and the latest

00:14:18,199 --> 00:14:21,740
one with more changes cool so we have

00:14:20,269 --> 00:14:23,240
some versions that's that's pretty cool

00:14:21,740 --> 00:14:24,709
we can see what happened in our in a

00:14:23,240 --> 00:14:28,699
project we can follow it through time

00:14:24,709 --> 00:14:31,339
it's pretty hilarious actually

00:14:28,699 --> 00:14:32,959
- when you work on a problem you start

00:14:31,339 --> 00:14:36,410
on a project that's been running for a

00:14:32,959 --> 00:14:38,300
long time to go back so we'll see in a

00:14:36,410 --> 00:14:40,939
second how you can navigate those okay

00:14:38,300 --> 00:14:43,339
but it's pretty hilarious to go back to

00:14:40,939 --> 00:14:45,230
commits that are like five years ago and

00:14:43,339 --> 00:14:47,540
see what people did there so this allows

00:14:45,230 --> 00:14:50,050
you to do that I recommend it just to

00:14:47,540 --> 00:14:53,180
get log and like scroll a bit and see

00:14:50,050 --> 00:14:58,579
what people wrote and did go the way of

00:14:53,180 --> 00:15:00,829
changes now how what do we do with those

00:14:58,579 --> 00:15:03,740
like just having changes is okay that's

00:15:00,829 --> 00:15:05,899
fun but kind of lame

00:15:03,740 --> 00:15:07,879
we wanna the first thing we want to do

00:15:05,899 --> 00:15:09,550
is go back we don't want to go to a

00:15:07,879 --> 00:15:14,029
specific version we want to go to

00:15:09,550 --> 00:15:16,660
someplace in time let's say we have

00:15:14,029 --> 00:15:19,279
that's the latest our latest codebase

00:15:16,660 --> 00:15:20,720
this our latest state and it's kind of

00:15:19,279 --> 00:15:22,970
broken there's some box in it maybe we

00:15:20,720 --> 00:15:25,399
want to know if the box also happened in

00:15:22,970 --> 00:15:27,950
the previous version other parks in add

00:15:25,399 --> 00:15:31,790
new changes well we can

00:15:27,950 --> 00:15:35,060
we can go to that version and we can do

00:15:31,790 --> 00:15:37,910
that with checkout and we give it the

00:15:35,060 --> 00:15:41,899
hash the identifier there's other ways

00:15:37,910 --> 00:15:45,040
to do that but in this case we tell git

00:15:41,899 --> 00:15:48,170
okay the changes you have over there

00:15:45,040 --> 00:15:49,910
please take them put them in my enough

00:15:48,170 --> 00:15:52,880
old apply them to my working directory

00:15:49,910 --> 00:15:57,560
make my current folder look the way it

00:15:52,880 --> 00:15:59,329
looked back then when we run that you

00:15:57,560 --> 00:16:03,110
can all that it's a lot of stuff okay

00:15:59,329 --> 00:16:05,269
doesn't matter when we run that we're on

00:16:03,110 --> 00:16:07,910
that version so what is the content of

00:16:05,269 --> 00:16:11,180
new file right now should be pretty

00:16:07,910 --> 00:16:13,339
clear right content yeah we made some

00:16:11,180 --> 00:16:16,940
changes and now they are not there

00:16:13,339 --> 00:16:19,730
anymore because back then the add more

00:16:16,940 --> 00:16:22,639
changes line wasn't there now this is

00:16:19,730 --> 00:16:25,399
not permanent right we're on this

00:16:22,639 --> 00:16:27,680
version temporarily we can go back to a

00:16:25,399 --> 00:16:33,560
recent to the most recent one we've just

00:16:27,680 --> 00:16:36,470
check out master and if we go again show

00:16:33,560 --> 00:16:39,589
what the file contains it's the same and

00:16:36,470 --> 00:16:41,570
if we inspect what the history looked

00:16:39,589 --> 00:16:43,220
like well it's still the same we didn't

00:16:41,570 --> 00:16:46,370
change the history which just went back

00:16:43,220 --> 00:16:46,910
to that commit temporarily just for

00:16:46,370 --> 00:16:50,720
funsies

00:16:46,910 --> 00:16:53,839
what if add more changes is complete

00:16:50,720 --> 00:16:59,540
garbage okay some friendly develop

00:16:53,839 --> 00:17:01,790
develop that it's I'm so I'm trying

00:16:59,540 --> 00:17:05,540
really hard not to swear it's not it's

00:17:01,790 --> 00:17:08,240
not usual for me okay it's not good it's

00:17:05,540 --> 00:17:10,669
really not good at more changes is you

00:17:08,240 --> 00:17:15,020
don't want that when people come to your

00:17:10,669 --> 00:17:18,350
project and just clone download your

00:17:15,020 --> 00:17:21,500
project you don't want them to have this

00:17:18,350 --> 00:17:24,140
change be the first thing they see how

00:17:21,500 --> 00:17:26,089
can you undo that it gives you a lot of

00:17:24,140 --> 00:17:28,220
options to do that some are more

00:17:26,089 --> 00:17:30,590
complicated than others what we are

00:17:28,220 --> 00:17:34,429
going to demonstrate is get reword what

00:17:30,590 --> 00:17:37,940
get revert does is it takes a commit a

00:17:34,429 --> 00:17:41,030
sh like the one we have here and it

00:17:37,940 --> 00:17:41,809
basically just undoes exactly those

00:17:41,030 --> 00:17:44,090
changes

00:17:41,809 --> 00:17:46,399
so I will look at the change set if you

00:17:44,090 --> 00:17:48,469
edit the line it will exactly remove

00:17:46,399 --> 00:17:49,099
that line and it will create a new

00:17:48,469 --> 00:17:53,809
commit

00:17:49,099 --> 00:17:57,739
from that I can't even remember right

00:17:53,809 --> 00:17:58,879
now what the flag was no skip commit

00:17:57,739 --> 00:18:01,549
message something like that doesn't

00:17:58,879 --> 00:18:03,200
matter so now will ask me give me a

00:18:01,549 --> 00:18:06,349
commit message we'll give it that real

00:18:03,200 --> 00:18:11,389
quick you can actually tell get to just

00:18:06,349 --> 00:18:15,200
use a generic commit message remove the

00:18:11,389 --> 00:18:17,779
tags okay so what the skied log show us

00:18:15,200 --> 00:18:22,969
now you commit right

00:18:17,779 --> 00:18:26,149
we have reverted some the changes we own

00:18:22,969 --> 00:18:28,519
the latest change and the content of the

00:18:26,149 --> 00:18:31,909
file is again content because when did

00:18:28,519 --> 00:18:33,739
the whole add more content stuff so

00:18:31,909 --> 00:18:37,299
that's how you can navigate between

00:18:33,739 --> 00:18:41,169
commits and also how you can undo stuff

00:18:37,299 --> 00:18:43,690
okay next thing on the list branches

00:18:41,169 --> 00:18:46,070
branches who knows about who uses

00:18:43,690 --> 00:18:48,979
everybody that uses git uses branches

00:18:46,070 --> 00:18:51,889
right everybody does anyone use git to

00:18:48,979 --> 00:18:53,749
not use branches no right it's super

00:18:51,889 --> 00:18:55,909
it's an important concept and it's also

00:18:53,749 --> 00:18:58,279
kind of tricky to understand when you're

00:18:55,909 --> 00:19:00,529
you're a beginner so what a branch

00:18:58,279 --> 00:19:03,469
allows you to do is actually as the name

00:19:00,529 --> 00:19:06,349
suggests you have this commit history

00:19:03,469 --> 00:19:08,809
you have this let's say list of versions

00:19:06,349 --> 00:19:10,879
it allows you to go away from that and

00:19:08,809 --> 00:19:12,859
do your own thing to work in isolation

00:19:10,879 --> 00:19:15,559
still you can still do commits you can

00:19:12,859 --> 00:19:17,389
still create versions but you're not

00:19:15,559 --> 00:19:19,429
interfering with anybody else you can

00:19:17,389 --> 00:19:20,989
for example start working on a feature

00:19:19,429 --> 00:19:22,999
you're branching off you're just doing

00:19:20,989 --> 00:19:25,309
your stuff working on your feature and

00:19:22,999 --> 00:19:27,589
the other developers that work with that

00:19:25,309 --> 00:19:34,839
codebase are not they're not seeing that

00:19:27,589 --> 00:19:36,919
pretty much they're not yeah they simply

00:19:34,839 --> 00:19:41,989
yeah they don't see your changes they're

00:19:36,919 --> 00:19:44,629
not in whatever all right how can we

00:19:41,989 --> 00:19:48,589
create a new branch we can do git

00:19:44,629 --> 00:19:51,919
checkout B and then the branch name so

00:19:48,589 --> 00:19:55,620
we'll call ours feature one

00:19:51,919 --> 00:19:59,340
right and what happens now if you look

00:19:55,620 --> 00:20:01,649
at good luck all the changes that we had

00:19:59,340 --> 00:20:03,299
on master are still there if we go cap

00:20:01,649 --> 00:20:05,159
new file show what's in the file it's

00:20:03,299 --> 00:20:06,330
still the change because that's where

00:20:05,159 --> 00:20:08,580
you branched off we branched off from

00:20:06,330 --> 00:20:13,980
master but all the changes we make here

00:20:08,580 --> 00:20:15,360
are limited to that branch it's a bit a

00:20:13,980 --> 00:20:16,320
bit of something to visualize that's

00:20:15,360 --> 00:20:19,289
really hard to read

00:20:16,320 --> 00:20:21,509
ok but the idea is you have the Green

00:20:19,289 --> 00:20:23,490
Line that's the master branch you're a

00:20:21,509 --> 00:20:26,039
bunch of commits on there now you can go

00:20:23,490 --> 00:20:28,980
away it has four files all of them those

00:20:26,039 --> 00:20:30,509
are on version 1.0 in the beginning now

00:20:28,980 --> 00:20:32,549
if you branch off from that on feature

00:20:30,509 --> 00:20:35,549
one and we make some changes we update

00:20:32,549 --> 00:20:39,029
one and free to some version 1 1 1 or 1

00:20:35,549 --> 00:20:41,159
1 if we're still a must and we're

00:20:39,029 --> 00:20:43,919
branching off from that feature to at

00:20:41,159 --> 00:20:46,409
that point in time feature two doesn't

00:20:43,919 --> 00:20:48,960
have those changes the files are still

00:20:46,409 --> 00:20:50,879
on one zero and you can make other

00:20:48,960 --> 00:20:53,009
changes you change so feature two

00:20:50,879 --> 00:20:55,950
changes files two and four two one one

00:20:53,009 --> 00:21:00,120
and only when those changes get merged

00:20:55,950 --> 00:21:01,409
back together then they they yeah the

00:21:00,120 --> 00:21:03,750
merge you get then you have them on the

00:21:01,409 --> 00:21:06,929
master branch but before the merge not

00:21:03,750 --> 00:21:08,399
there you can experiment with features

00:21:06,929 --> 00:21:10,950
that way you can just branch off the

00:21:08,399 --> 00:21:13,590
master do your thing nobody knows about

00:21:10,950 --> 00:21:16,710
it and then maybe throw them away or if

00:21:13,590 --> 00:21:18,629
you have to with them merging back so

00:21:16,710 --> 00:21:22,370
we'll feature one right now let's add

00:21:18,629 --> 00:21:26,279
some changes the usual way we'll do

00:21:22,370 --> 00:21:31,919
branchy content and add that to a file

00:21:26,279 --> 00:21:34,559
so file contains now content and branchy

00:21:31,919 --> 00:21:41,870
content you know the schpeel let's get

00:21:34,559 --> 00:21:49,710
add new file and git commit em and at

00:21:41,870 --> 00:21:51,629
Ranchi content right so a log now shows

00:21:49,710 --> 00:21:54,419
that we have some branch content in

00:21:51,629 --> 00:21:58,500
there right great so but that's feature

00:21:54,419 --> 00:22:00,240
one let's go to feed to the master back

00:21:58,500 --> 00:22:02,519
to the master branch and we can do that

00:22:00,240 --> 00:22:05,560
with get switch it switch is actually

00:22:02,519 --> 00:22:08,800
fairly new most of

00:22:05,560 --> 00:22:11,080
experience it people already know that

00:22:08,800 --> 00:22:12,760
there's you can do the same thing with

00:22:11,080 --> 00:22:15,670
check out what good recently introduced

00:22:12,760 --> 00:22:18,970
skip switch specifically to switch

00:22:15,670 --> 00:22:23,050
between branches so you can use get

00:22:18,970 --> 00:22:24,370
switch and give it a branch name and now

00:22:23,050 --> 00:22:27,900
we're back on master now what do our

00:22:24,370 --> 00:22:29,920
changes look like if we go get log no

00:22:27,900 --> 00:22:31,510
doesn't I'll change the sonnet there

00:22:29,920 --> 00:22:34,360
that branch accountant is not there why

00:22:31,510 --> 00:22:37,120
because it was on the branch right the

00:22:34,360 --> 00:22:39,060
content there's no branch of content

00:22:37,120 --> 00:22:43,000
well because the changes were made to

00:22:39,060 --> 00:22:46,750
the branch we work with still on the

00:22:43,000 --> 00:22:48,820
same directory we was nothing exactly

00:22:46,750 --> 00:22:51,700
where we started we just used branches

00:22:48,820 --> 00:22:53,560
to make changes in isolation and that's

00:22:51,700 --> 00:22:55,840
super super powerful even when you work

00:22:53,560 --> 00:22:58,840
alone not with other people how do we

00:22:55,840 --> 00:23:01,210
get those changes now we can actually go

00:22:58,840 --> 00:23:04,510
git merge as I hinted before it's called

00:23:01,210 --> 00:23:08,140
the merge and then you give it the name

00:23:04,510 --> 00:23:09,970
of the branch that you want to merge so

00:23:08,140 --> 00:23:11,620
you start you're on the branch you won't

00:23:09,970 --> 00:23:13,660
need there's other ways to do that but

00:23:11,620 --> 00:23:16,510
in this case when you give just one

00:23:13,660 --> 00:23:18,460
branch name it will try to merge that

00:23:16,510 --> 00:23:22,240
branch into the branch you're currently

00:23:18,460 --> 00:23:24,190
on so switch to master or the branch you

00:23:22,240 --> 00:23:28,360
want to merge to and then give it the

00:23:24,190 --> 00:23:31,000
name of the branch feature one so let's

00:23:28,360 --> 00:23:34,120
do that and it tells us some stuff it's

00:23:31,000 --> 00:23:36,130
as fast forward that's the way it

00:23:34,120 --> 00:23:38,230
resolves branches in this case because

00:23:36,130 --> 00:23:41,890
we didn't make many changes just fast

00:23:38,230 --> 00:23:45,700
forward and what changed we added one

00:23:41,890 --> 00:23:48,430
line to new file git log will now show

00:23:45,700 --> 00:23:52,300
us that this committee is in there why

00:23:48,430 --> 00:23:53,970
because we merged it in there cool so I

00:23:52,300 --> 00:23:57,130
hope you can see how you can isolate

00:23:53,970 --> 00:23:59,860
changes and how how it helps you as a

00:23:57,130 --> 00:24:03,640
developer right I think it should be

00:23:59,860 --> 00:24:06,610
should be pretty clear last thing okay I

00:24:03,640 --> 00:24:07,990
I'm not sure it's kind of hard to when

00:24:06,610 --> 00:24:10,990
you when you've worked with kid for a

00:24:07,990 --> 00:24:13,630
while it's kind of hard to say how easy

00:24:10,990 --> 00:24:15,490
how easy it is to understand that kind

00:24:13,630 --> 00:24:17,350
of stuff so hope for the people that are

00:24:15,490 --> 00:24:19,570
new that still makes kind of sense

00:24:17,350 --> 00:24:22,179
alright if not

00:24:19,570 --> 00:24:23,889
ask me later come talk to me one last

00:24:22,179 --> 00:24:25,419
thing I know there's already a bunch of

00:24:23,889 --> 00:24:27,250
content but one last thing I want to

00:24:25,419 --> 00:24:30,820
talk about is get remote so everything

00:24:27,250 --> 00:24:34,240
we did so far it's a still time

00:24:30,820 --> 00:24:36,549
right yeah cool okay so everything we

00:24:34,240 --> 00:24:39,429
did so far was limited to our machine

00:24:36,549 --> 00:24:43,389
there was no sharing code or anything

00:24:39,429 --> 00:24:45,039
over the internet yet okay super

00:24:43,389 --> 00:24:46,419
powerful if you work alone right here

00:24:45,039 --> 00:24:48,340
but more often than not you will work

00:24:46,419 --> 00:24:49,960
with other people will want to share

00:24:48,340 --> 00:24:51,789
what you did you want to share the code

00:24:49,960 --> 00:24:53,919
you created you want to share your

00:24:51,789 --> 00:24:57,039
versions you want to share the changes

00:24:53,919 --> 00:24:59,049
that you made so how can you do that git

00:24:57,039 --> 00:25:00,700
is a distributed version control system

00:24:59,049 --> 00:25:04,720
and that means that there's no

00:25:00,700 --> 00:25:06,880
distinction between where repository is

00:25:04,720 --> 00:25:09,399
yeah everything is a repository you can

00:25:06,880 --> 00:25:11,559
have repository on your machine you can

00:25:09,399 --> 00:25:13,059
have a repository on some server

00:25:11,559 --> 00:25:15,970
somewhere and those can talk to each

00:25:13,059 --> 00:25:19,029
other you can even create two

00:25:15,970 --> 00:25:20,919
repositories on your let's say in

00:25:19,029 --> 00:25:22,080
different folders and have them talk to

00:25:20,919 --> 00:25:25,750
each other okay

00:25:22,080 --> 00:25:27,190
so what we need right now to share code

00:25:25,750 --> 00:25:28,840
with other people to share version

00:25:27,190 --> 00:25:31,149
history for the people as a remote

00:25:28,840 --> 00:25:35,159
repository or a repository is someplace

00:25:31,149 --> 00:25:35,159
on the internet there's a nice place for

00:25:35,220 --> 00:25:39,669
hosted repositories and that place is

00:25:38,460 --> 00:25:43,269
github

00:25:39,669 --> 00:25:45,909
okay github is a service that basically

00:25:43,269 --> 00:25:51,549
gives you free hosted repositories it's

00:25:45,909 --> 00:25:54,340
also social platform and stuff but for

00:25:51,549 --> 00:25:56,320
our intents here it allows us to have a

00:25:54,340 --> 00:25:59,620
repository like we had on our machine

00:25:56,320 --> 00:26:04,419
here but somewhere on some server in the

00:25:59,620 --> 00:26:10,059
cloud you know we're gonna call that my

00:26:04,419 --> 00:26:10,539
project yep it's my project one name

00:26:10,059 --> 00:26:12,309
doesn't matter

00:26:10,539 --> 00:26:13,809
doesn't matter and we can choose some

00:26:12,309 --> 00:26:16,659
other stuff which we don't care about

00:26:13,809 --> 00:26:18,330
right now we'll create the repository

00:26:16,659 --> 00:26:21,779
and it's important to understand even

00:26:18,330 --> 00:26:24,460
even though this is like a web interface

00:26:21,779 --> 00:26:27,010
I'm pretty sure that github does nothing

00:26:24,460 --> 00:26:28,330
other than simply do a git init

00:26:27,010 --> 00:26:30,549
somewhere in the background the same

00:26:28,330 --> 00:26:32,050
thing we did in the beginning so create

00:26:30,549 --> 00:26:34,600
the repository

00:26:32,050 --> 00:26:38,710
now he tells us okay cool yeah there's a

00:26:34,600 --> 00:26:41,290
repository right my project one and it

00:26:38,710 --> 00:26:44,770
tells us how we can reach it and how we

00:26:41,290 --> 00:26:47,140
can sync up with it we already know the

00:26:44,770 --> 00:26:49,270
stuff that's down here I don't need to

00:26:47,140 --> 00:26:52,420
know that so we'll copy this link and

00:26:49,270 --> 00:26:55,750
then we go back here so what we want now

00:26:52,420 --> 00:26:57,970
is tell our local repository about that

00:26:55,750 --> 00:27:00,940
other remote repository on github that's

00:26:57,970 --> 00:27:05,740
on some server how do we do that we do

00:27:00,940 --> 00:27:08,050
get remote get remote right git remote

00:27:05,740 --> 00:27:13,890
add because we want to add a new remote

00:27:08,050 --> 00:27:16,210
and then we give it a name origin and

00:27:13,890 --> 00:27:20,200
that's just the name that's convention

00:27:16,210 --> 00:27:23,290
the usual first remote that you use you

00:27:20,200 --> 00:27:26,830
call origin and then you paste in the

00:27:23,290 --> 00:27:29,020
link where can get on your machine find

00:27:26,830 --> 00:27:33,090
that other remote repository I hope I

00:27:29,020 --> 00:27:36,580
got the command right kinda yes perfect

00:27:33,090 --> 00:27:38,830
so kit should know about your remote and

00:27:36,580 --> 00:27:41,580
you can see what remotes your repository

00:27:38,830 --> 00:27:45,190
knows about by running git remote V and

00:27:41,580 --> 00:27:48,730
it will say okay you have two remote

00:27:45,190 --> 00:27:51,910
actually you have one for fetching that

00:27:48,730 --> 00:27:54,000
is getting changes and one for pushing

00:27:51,910 --> 00:27:57,370
changes which we'll do in a second so

00:27:54,000 --> 00:27:58,690
push is the process of putting your

00:27:57,370 --> 00:28:03,670
changes over there and we'll do that

00:27:58,690 --> 00:28:06,220
right now we'll do git push we give it

00:28:03,670 --> 00:28:09,610
where we want to push that is origin

00:28:06,220 --> 00:28:13,570
right if we say origin get knows okay he

00:28:09,610 --> 00:28:15,040
means that identifier that URL and then

00:28:13,570 --> 00:28:17,830
we give it the branch that we want to

00:28:15,040 --> 00:28:20,710
push okay let's do that

00:28:17,830 --> 00:28:25,000
get push where origin

00:28:20,710 --> 00:28:26,980
what master our master branch and then

00:28:25,000 --> 00:28:29,980
some stuff happens data compression blah

00:28:26,980 --> 00:28:34,000
blah blah punches everything together so

00:28:29,980 --> 00:28:36,820
it's small and where to get up and must

00:28:34,000 --> 00:28:40,600
and now if we go it back here and we

00:28:36,820 --> 00:28:43,420
reload and we have a changes over here

00:28:40,600 --> 00:28:45,549
and you can obviously this is public so

00:28:43,420 --> 00:28:48,190
if we go if you go to how

00:28:45,549 --> 00:28:50,559
me my project one right now you will see

00:28:48,190 --> 00:28:53,409
that and not only this is not just like

00:28:50,559 --> 00:28:55,600
a file upload or something yeah you have

00:28:53,409 --> 00:28:58,090
to file content there but even better

00:28:55,600 --> 00:29:00,399
you have right

00:28:58,090 --> 00:29:02,739
you have branches if you push those and

00:29:00,399 --> 00:29:04,450
you have the entire committee stream

00:29:02,739 --> 00:29:06,909
right you can have a look at that

00:29:04,450 --> 00:29:09,610
committee what changed here you see it

00:29:06,909 --> 00:29:12,519
so not only are the files there but the

00:29:09,610 --> 00:29:14,139
entire version history is there so if

00:29:12,519 --> 00:29:16,869
you go to some project on get up

00:29:14,139 --> 00:29:18,460
just look at that see what changed and

00:29:16,869 --> 00:29:19,710
last week or something you can do that

00:29:18,460 --> 00:29:23,859
no problem

00:29:19,710 --> 00:29:26,230
now one last thing how do we get to

00:29:23,859 --> 00:29:28,090
changes say people know about this repo

00:29:26,230 --> 00:29:30,820
they add this repository as their own

00:29:28,090 --> 00:29:33,460
origin they make some changes they push

00:29:30,820 --> 00:29:36,570
in there how do you get those now we can

00:29:33,460 --> 00:29:38,919
make a change real quick over get up

00:29:36,570 --> 00:29:41,769
directly we can say edit this file and

00:29:38,919 --> 00:29:44,859
we add github content okay

00:29:41,769 --> 00:29:47,169
and this again does nothing new it's

00:29:44,859 --> 00:29:51,009
just basically git add git commit in the

00:29:47,169 --> 00:29:54,460
background we say github content

00:29:51,009 --> 00:30:02,679
whatever and commit the changes now

00:29:54,460 --> 00:30:06,220
there's a new ok whatever so we have a

00:30:02,679 --> 00:30:08,710
new change there's a new commit right we

00:30:06,220 --> 00:30:11,200
added the branch of content if we go

00:30:08,710 --> 00:30:13,779
back to our local repository is that

00:30:11,200 --> 00:30:16,629
stuff in here nope

00:30:13,779 --> 00:30:19,720
obviously not there's no github content

00:30:16,629 --> 00:30:21,879
is our file up-to-date no it's free not

00:30:19,720 --> 00:30:23,379
there's no get to content why because we

00:30:21,879 --> 00:30:27,509
haven't gotten those changes yet so

00:30:23,379 --> 00:30:32,919
let's do that get pulled again origin

00:30:27,509 --> 00:30:35,919
where what master and then it again says

00:30:32,919 --> 00:30:37,749
some stuff yeah we fetched some stuff

00:30:35,919 --> 00:30:39,759
blah blah blah we fast forwarded and

00:30:37,749 --> 00:30:42,850
there's a change to new file so now we

00:30:39,759 --> 00:30:46,629
have our changes and we concede as

00:30:42,850 --> 00:30:48,159
github content that's me there's if you

00:30:46,629 --> 00:30:50,499
wondering why this is different it's

00:30:48,159 --> 00:30:52,600
just because I haven't set up get

00:30:50,499 --> 00:30:54,779
properly on this machine well sucks to

00:30:52,600 --> 00:30:54,779
be me

00:30:54,980 --> 00:30:59,809
good so we pull the changes our new file

00:30:57,769 --> 00:31:01,940
also has two changes everything's

00:30:59,809 --> 00:31:04,279
perfect so I hope you can see how that

00:31:01,940 --> 00:31:05,600
helps you to collaborate right if you

00:31:04,279 --> 00:31:08,419
haven't checked out get up if you don't

00:31:05,600 --> 00:31:09,860
know about it please do it's super

00:31:08,419 --> 00:31:12,049
helpful for beginners you can see other

00:31:09,860 --> 00:31:17,149
people's code and share your own which

00:31:12,049 --> 00:31:19,340
is super helpful good now I mean that's

00:31:17,149 --> 00:31:20,870
pretty much the end no it's not this is

00:31:19,340 --> 00:31:23,120
the freaking beginning we haven't even

00:31:20,870 --> 00:31:25,549
scratched the surface with git I mean

00:31:23,120 --> 00:31:28,490
what the show today is what you would

00:31:25,549 --> 00:31:32,110
probably use 90% of the time if you use

00:31:28,490 --> 00:31:34,639
if you work with git as a daily driver

00:31:32,110 --> 00:31:38,570
but the other 10% are kind of tricky

00:31:34,639 --> 00:31:40,730
right so there's so much more to learn

00:31:38,570 --> 00:31:41,870
we haven't covered stuff like UI clients

00:31:40,730 --> 00:31:43,340
I've been working in the command line

00:31:41,870 --> 00:31:44,690
maybe that's not your thing maybe you

00:31:43,340 --> 00:31:47,480
want to use something that looks nicer

00:31:44,690 --> 00:31:50,480
okay I think that looks nice but you

00:31:47,480 --> 00:31:52,580
know taste this is different what

00:31:50,480 --> 00:31:54,139
happens when a merge doesn't work out

00:31:52,580 --> 00:31:56,929
because there's some changes that don't

00:31:54,139 --> 00:31:59,179
mesh together you can do other stuff

00:31:56,929 --> 00:32:01,000
with the history or all may know stuff

00:31:59,179 --> 00:32:03,409
please have a look at that stuff just

00:32:01,000 --> 00:32:05,840
google it figure it out for yourself

00:32:03,409 --> 00:32:08,419
there's simply not enough time to check

00:32:05,840 --> 00:32:10,340
to figure that out there's some

00:32:08,419 --> 00:32:13,120
additional resources like to leave you

00:32:10,340 --> 00:32:15,559
with especially the good branching thing

00:32:13,120 --> 00:32:18,679
that is you know what I'll just show it

00:32:15,559 --> 00:32:21,799
real quick so this is like a little game

00:32:18,679 --> 00:32:26,840
thingy and it teaches you how it works

00:32:21,799 --> 00:32:28,250
in the background so what's ahead what

00:32:26,840 --> 00:32:29,840
does that mean where's your head

00:32:28,250 --> 00:32:31,940
currently what happens when you merge

00:32:29,840 --> 00:32:34,610
for real what happens when you pull for

00:32:31,940 --> 00:32:43,669
real that kind of stuff very very very

00:32:34,610 --> 00:32:46,000
helpful no right so last slide promise I

00:32:43,669 --> 00:32:48,380
don't know how much time actually took

00:32:46,000 --> 00:32:49,970
we talked about what version control is

00:32:48,380 --> 00:32:52,389
I hope that's pretty clear it's just the

00:32:49,970 --> 00:32:55,460
management of changes of versions and

00:32:52,389 --> 00:32:57,500
well how to get right we scratch the

00:32:55,460 --> 00:33:01,039
surface there but you saw how you can

00:32:57,500 --> 00:33:02,899
add versions I can navigate those I can

00:33:01,039 --> 00:33:06,500
basically do time travel go back to the

00:33:02,899 --> 00:33:07,879
future whatever and also how you can use

00:33:06,500 --> 00:33:10,429
branches and remote

00:33:07,879 --> 00:33:12,379
in your daily work okay so that's it for

00:33:10,429 --> 00:33:15,759
me thank you very much and I hope you

00:33:12,379 --> 00:33:15,759

YouTube URL: https://www.youtube.com/watch?v=cJfn7SuOMpo


