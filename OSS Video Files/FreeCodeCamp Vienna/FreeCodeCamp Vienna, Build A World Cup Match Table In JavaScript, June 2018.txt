Title: FreeCodeCamp Vienna, Build A World Cup Match Table In JavaScript, June 2018
Publication date: 2018-06-18
Playlist: FreeCodeCamp Vienna
Description: 
	Gerald Bauer will be talking about building a JavaScript widget that pulls data from a JSON HTTP API World Cup service.
Captions: 
	00:00:00,030 --> 00:00:07,290
today's topic is building for the World

00:00:03,330 --> 00:00:10,019
Cup building a small match schedule

00:00:07,290 --> 00:00:11,820
widget who's playing today who's playing

00:00:10,019 --> 00:00:15,330
tomorrow and the World Cup is the

00:00:11,820 --> 00:00:18,029
biggest event now the Spain Spain

00:00:15,330 --> 00:00:21,720
against protocol it's an ongoing match

00:00:18,029 --> 00:00:25,050
and so if you search Google you're

00:00:21,720 --> 00:00:27,869
looking for rotator then well cup

00:00:25,050 --> 00:00:33,719
chasing on Google and there's not really

00:00:27,869 --> 00:00:36,149
much open data for the World Cup and so

00:00:33,719 --> 00:00:38,390
let's look at the small open football

00:00:36,149 --> 00:00:42,110
World Cup chasin so the the

00:00:38,390 --> 00:00:45,960
footballdatabase provides open data for

00:00:42,110 --> 00:00:46,340
football tournaments and for the World

00:00:45,960 --> 00:00:50,340
Cup

00:00:46,340 --> 00:00:53,789
there's a small repository that has

00:00:50,340 --> 00:00:56,430
propelled Chasen datasets are not only

00:00:53,789 --> 00:01:00,780
datasets you can a great part of github

00:00:56,430 --> 00:01:03,390
is you can also use it as a API choose

00:01:00,780 --> 00:01:07,260
an API so let's say for the World Cup I

00:01:03,390 --> 00:01:09,600
have five services the main service is

00:01:07,260 --> 00:01:12,840
the match schedule with the results if I

00:01:09,600 --> 00:01:18,119
click on the World Cup Jason I have the

00:01:12,840 --> 00:01:21,119
match World Cup matches sorted by match

00:01:18,119 --> 00:01:24,000
States but if you look at this one this

00:01:21,119 --> 00:01:26,340
is kind of like a HTML page so if you

00:01:24,000 --> 00:01:29,610
want to read it in your JavaScript you

00:01:26,340 --> 00:01:33,780
know you don't want to have the HTML

00:01:29,610 --> 00:01:36,540
version but you want the raw data so

00:01:33,780 --> 00:01:39,780
there is something in github which is

00:01:36,540 --> 00:01:45,119
called the raw and if you use the raw

00:01:39,780 --> 00:01:48,210
link you get the you get the real data

00:01:45,119 --> 00:01:52,140
service so that's the trick or it's not

00:01:48,210 --> 00:01:57,060
the trick but that's a way to use github

00:01:52,140 --> 00:02:01,290
as a API Jason HTTP service and the

00:01:57,060 --> 00:02:03,719
great part is usually there's a security

00:02:01,290 --> 00:02:07,140
restriction so you can only call in

00:02:03,719 --> 00:02:09,989
JavaScript you can only call home and in

00:02:07,140 --> 00:02:13,380
github they have the course building so

00:02:09,989 --> 00:02:16,200
they allow access from any domain

00:02:13,380 --> 00:02:20,340
so that's really so it's not a heck or

00:02:16,200 --> 00:02:24,300
anything so get up really it's building

00:02:20,340 --> 00:02:28,760
and it's a service they offer so let's

00:02:24,300 --> 00:02:33,660
get started to build a tiny it so

00:02:28,760 --> 00:02:36,450
let's look at this example so that's a

00:02:33,660 --> 00:02:41,150
small example all we want to do is to

00:02:36,450 --> 00:02:44,100
list all the upcoming games and

00:02:41,150 --> 00:02:46,830
yesterday's game was game number one

00:02:44,100 --> 00:02:50,370
Russia against Saudi Arabia and today's

00:02:46,830 --> 00:02:53,460
match they do there is a chip we require

00:02:50,370 --> 00:02:55,020
and so on and so forth and so if I go

00:02:53,460 --> 00:03:02,130
back aah

00:02:55,020 --> 00:03:05,730
they dater so it's I I do the first have

00:03:02,130 --> 00:03:09,090
a list of rounds so the match day one

00:03:05,730 --> 00:03:11,400
was yesterday and here I have all the

00:03:09,090 --> 00:03:13,850
simple data structure which is team one

00:03:11,400 --> 00:03:19,170
team two and then the score the stadium

00:03:13,850 --> 00:03:22,950
so all let's get into the source code so

00:03:19,170 --> 00:03:27,060
I have the repository and it's just a

00:03:22,950 --> 00:03:34,620
single HTML page so let's look at the

00:03:27,060 --> 00:03:36,900
first one and the magic words up the

00:03:34,620 --> 00:03:37,830
magic it starts with the script tag with

00:03:36,900 --> 00:03:40,550
the JavaScript

00:03:37,830 --> 00:03:43,490
how can you fetch data if you have your

00:03:40,550 --> 00:03:47,690
JavaScript how can you fetch thither and

00:03:43,490 --> 00:03:53,940
the answer is the modern JavaScript has

00:03:47,690 --> 00:03:57,180
as a method called fetch so you can use

00:03:53,940 --> 00:04:00,270
fetch and you provide what you have to

00:03:57,180 --> 00:04:04,800
provide is the link the URL so in this

00:04:00,270 --> 00:04:09,630
case I'm using as mentioned by using the

00:04:04,800 --> 00:04:12,390
github chasin service and the important

00:04:09,630 --> 00:04:16,230
part is not to fetch the the HTML page

00:04:12,390 --> 00:04:18,660
but to fetch their raw JSON service so

00:04:16,230 --> 00:04:21,330
that's why it has rope it abuser content

00:04:18,660 --> 00:04:25,500
so that's the UL for the World Cup

00:04:21,330 --> 00:04:26,550
chasin so if I would change it to 2014 I

00:04:25,500 --> 00:04:29,580
would get

00:04:26,550 --> 00:04:31,770
parcel or there's the football Jason

00:04:29,580 --> 00:04:34,680
repository if I want the Austrian

00:04:31,770 --> 00:04:37,409
Bundesliga this would be the football

00:04:34,680 --> 00:04:39,409
Jason and then instead of a year you

00:04:37,409 --> 00:04:41,879
have the football season would be

00:04:39,409 --> 00:04:43,879
2017-18 and then you get the match

00:04:41,879 --> 00:04:48,659
scheduled for Austrian Bundesliga

00:04:43,879 --> 00:04:53,039
English Premier League would be en for

00:04:48,659 --> 00:04:58,440
English and German de and so on so forth

00:04:53,039 --> 00:05:06,180
so I can show you this example okay so

00:04:58,440 --> 00:05:09,659
that's the the football database project

00:05:06,180 --> 00:05:12,270
on on github and so we have seen the

00:05:09,659 --> 00:05:16,159
World Cup chasing has its own repo but

00:05:12,270 --> 00:05:19,530
the football chasing would be the

00:05:16,159 --> 00:05:20,759
repositories for the Bundesliga and for

00:05:19,530 --> 00:05:22,949
the English Premier League for the

00:05:20,759 --> 00:05:26,669
Spanish La Liga and so on so forth so

00:05:22,949 --> 00:05:32,310
you just have to change the link so

00:05:26,669 --> 00:05:36,300
going back to the fetch example okay

00:05:32,310 --> 00:05:39,509
sorry oh here is it yeah so all you do

00:05:36,300 --> 00:05:42,840
is you provide the link and then fetch

00:05:39,509 --> 00:05:47,969
and then it gets the catch the Chasen

00:05:42,840 --> 00:05:51,930
document and it does because it can

00:05:47,969 --> 00:05:56,789
fetch HTML and all other formats so you

00:05:51,930 --> 00:05:59,580
have to say you have to use you pick

00:05:56,789 --> 00:06:03,300
Chasen and the great part if you fetch a

00:05:59,580 --> 00:06:07,259
JSON file in JavaScript it automatically

00:06:03,300 --> 00:06:10,500
gets passed and so you can you can

00:06:07,259 --> 00:06:13,800
process it without doing any special

00:06:10,500 --> 00:06:16,469
things so this second step is so the

00:06:13,800 --> 00:06:19,409
first step is a fetch there the match

00:06:16,469 --> 00:06:22,310
schedule and now I want to build my my

00:06:19,409 --> 00:06:26,039
schedule and so to build my schedule I

00:06:22,310 --> 00:06:29,779
get I have build a little function which

00:06:26,039 --> 00:06:34,169
is build widget and I get the data is

00:06:29,779 --> 00:06:38,910
what I get from the service so in this

00:06:34,169 --> 00:06:45,270
case this is I pass it along

00:06:38,910 --> 00:06:47,670
here the chaser and so all I do is if I

00:06:45,270 --> 00:06:49,980
go to the example I go through their

00:06:47,670 --> 00:06:54,780
match things and then I print the

00:06:49,980 --> 00:07:01,980
individual match pair and so if I go

00:06:54,780 --> 00:07:04,740
back yeah so I'm using a modern

00:07:01,980 --> 00:07:07,310
JavaScript so in this case in modern

00:07:04,740 --> 00:07:10,050
JavaScript there's something called the

00:07:07,310 --> 00:07:12,270
the multi-line string and in the

00:07:10,050 --> 00:07:15,390
multi-line string that's it's a backtick

00:07:12,270 --> 00:07:19,410
and so that the string can be multi-line

00:07:15,390 --> 00:07:22,260
so it starts with HTML the backtick and

00:07:19,410 --> 00:07:27,030
it goes all the way here so this is one

00:07:22,260 --> 00:07:31,590
string and inside the string ah sorry

00:07:27,030 --> 00:07:34,470
here yes the back tick yeah sorry here's

00:07:31,590 --> 00:07:38,850
the the multi-line four-in-one

00:07:34,470 --> 00:07:41,670
but I loop a loop over over the data

00:07:38,850 --> 00:07:45,780
rounds and I built up the HTML snippet

00:07:41,670 --> 00:07:49,620
so I have the the event then I have the

00:07:45,780 --> 00:07:53,160
match around the matches and at the end

00:07:49,620 --> 00:07:57,240
all I do is I get my this is my tiny

00:07:53,160 --> 00:08:01,980
page which has the bit set ID the diff

00:07:57,240 --> 00:08:05,810
block and I select which get element by

00:08:01,980 --> 00:08:09,540
D I select that that the diff block and

00:08:05,810 --> 00:08:13,230
within HTML you can pass along the HTML

00:08:09,540 --> 00:08:17,490
and you get you you get your HTML page

00:08:13,230 --> 00:08:20,850
dynamically dynamically built without

00:08:17,490 --> 00:08:23,780
any so that's the without any framework

00:08:20,850 --> 00:08:27,480
so that's this it's plain vanilla

00:08:23,780 --> 00:08:30,210
JavaScript so usually what you would do

00:08:27,480 --> 00:08:34,469
is you know you would pick a framework

00:08:30,210 --> 00:08:37,140
react angle or view or there are so many

00:08:34,469 --> 00:08:39,510
choices so that's why in this example

00:08:37,140 --> 00:08:41,940
usually it's some time it's a good idea

00:08:39,510 --> 00:08:45,060
to start with the basics and if you use

00:08:41,940 --> 00:08:51,250
modern modern JavaScript as you have

00:08:45,060 --> 00:08:57,430
seen it's not it's not overly complex

00:08:51,250 --> 00:09:01,720
it was but yeah so and maybe I can show

00:08:57,430 --> 00:09:07,510
this one the console.log it helps for

00:09:01,720 --> 00:09:11,980
debugging so if I open up here the

00:09:07,510 --> 00:09:21,010
console it should show me the data that

00:09:11,980 --> 00:09:23,880
gets fetched in the beginning so so if I

00:09:21,010 --> 00:09:26,500
open up this this is the data I have

00:09:23,880 --> 00:09:30,490
fetched well cap and then it has the

00:09:26,500 --> 00:09:34,500
match days and every match day so this

00:09:30,490 --> 00:09:37,780
is the helping for debug the console log

00:09:34,500 --> 00:09:41,890
Jason to check if I get back the data

00:09:37,780 --> 00:09:46,470
and I have a second example the second

00:09:41,890 --> 00:09:50,550
example is still not using a framework

00:09:46,470 --> 00:09:55,960
but let's try this one

00:09:50,550 --> 00:09:59,620
so the second example what's different

00:09:55,960 --> 00:10:02,470
so it fetches the data and what do you

00:09:59,620 --> 00:10:04,960
want to use instead of having the

00:10:02,470 --> 00:10:08,230
template in line it uses a template

00:10:04,960 --> 00:10:09,820
language and there's something this is

00:10:08,230 --> 00:10:12,130
called nunchuks

00:10:09,820 --> 00:10:15,160
it's if anybody knows Django biting

00:10:12,130 --> 00:10:17,410
Django is the most popular or the

00:10:15,160 --> 00:10:21,280
easiest template language so the Chava

00:10:17,410 --> 00:10:24,130
script version that is the same as as

00:10:21,280 --> 00:10:27,370
the Chango template language it's from

00:10:24,130 --> 00:10:29,080
Mozilla it's called nunchucks it's I

00:10:27,370 --> 00:10:31,570
don't know about the name but it's they

00:10:29,080 --> 00:10:36,250
peyten the peyten

00:10:31,570 --> 00:10:43,050
django template language no jerks and

00:10:36,250 --> 00:10:43,050
it's from Mozilla known shirks template

00:10:48,370 --> 00:10:50,399
Oh

00:10:56,490 --> 00:10:59,450
oh here it is

00:10:59,700 --> 00:11:06,090
so that's the it's open source by

00:11:03,780 --> 00:11:08,520
Mozilla but so it's a clone in

00:11:06,090 --> 00:11:10,350
JavaScript of the Python language and so

00:11:08,520 --> 00:11:13,800
now if you compare to the previous

00:11:10,350 --> 00:11:17,520
version now the template it's all in in

00:11:13,800 --> 00:11:20,310
a single string and for the loops for

00:11:17,520 --> 00:11:23,220
the loops it's using the the template

00:11:20,310 --> 00:11:25,800
language before it was JavaScript and so

00:11:23,220 --> 00:11:28,680
all you have to do is you give it the

00:11:25,800 --> 00:11:32,430
data and then it merges it together and

00:11:28,680 --> 00:11:35,010
you get the HTML snippet and all I have

00:11:32,430 --> 00:11:38,580
to do is I have to include the the

00:11:35,010 --> 00:11:42,180
nunchuks library so I just included with

00:11:38,580 --> 00:11:44,640
the script tag and then the metric

00:11:42,180 --> 00:11:47,640
happens here does the global object

00:11:44,640 --> 00:11:50,250
nunchuks and i give it the template

00:11:47,640 --> 00:11:53,460
which is the template below i give it

00:11:50,250 --> 00:11:55,800
the date either that are fetched which

00:11:53,460 --> 00:11:59,010
is the world cup match schedule and then

00:11:55,800 --> 00:12:03,060
i get back to HTML as a string the

00:11:59,010 --> 00:12:07,050
building block and then i replace it i

00:12:03,060 --> 00:12:10,800
find the widget so here here that's the

00:12:07,050 --> 00:12:14,280
HTML page here and in the body this the

00:12:10,800 --> 00:12:18,060
virtual ID i get the widget and then it

00:12:14,280 --> 00:12:21,990
fills in the the HTML that has been

00:12:18,060 --> 00:12:25,070
built dynamically and so that's the live

00:12:21,990 --> 00:12:28,760
page so if I change here to number two

00:12:25,070 --> 00:12:28,760
there should be no difference

00:12:33,819 --> 00:12:39,740
and as homework so the homework would be

00:12:37,699 --> 00:12:43,720
you know to build mhm widget with your

00:12:39,740 --> 00:12:50,870
framework of choice using angular or you

00:12:43,720 --> 00:12:53,360
using reactive view and so and one one

00:12:50,870 --> 00:12:57,290
crate part because it's dynamic I can

00:12:53,360 --> 00:12:59,689
use just change the fed the link and I

00:12:57,290 --> 00:13:02,329
get a different match schedule so that

00:12:59,689 --> 00:13:07,000
the last example there's no difference

00:13:02,329 --> 00:13:10,160
other than it's the World Cup in Brazil

00:13:07,000 --> 00:13:13,180
so in this case it's selecting it's

00:13:10,160 --> 00:13:17,300
fetching the data the match scheduled

00:13:13,180 --> 00:13:24,639
2014 which is was the World Cup in

00:13:17,300 --> 00:13:24,639
Brazil and so I should get the the page

00:13:26,560 --> 00:13:38,079
and so the opening was Brazil against

00:13:30,529 --> 00:13:38,079
Croatia 3.1 and last World Cup champion

00:13:38,290 --> 00:13:46,459
yeah it was 0-0 Germany against

00:13:44,629 --> 00:13:49,120
Argentina and in overtime

00:13:46,459 --> 00:13:54,199
so it's missing the overtime but it's it

00:13:49,120 --> 00:13:57,259
it's part of the it's part of the data

00:13:54,199 --> 00:14:05,449
set it should be so if I change here to

00:13:57,259 --> 00:14:08,870
2014 I can query the World Cup last time

00:14:05,449 --> 00:14:12,500
and it should have the overtime at the

00:14:08,870 --> 00:14:14,329
last one so the overtime is extra time

00:14:12,500 --> 00:14:18,879
school one and squirt two

00:14:14,329 --> 00:14:24,920
in extra time and they go in minute 113

00:14:18,879 --> 00:14:27,339
so so you are encouraged to to use the

00:14:24,920 --> 00:14:31,040
free data service and to show you a

00:14:27,339 --> 00:14:34,009
another example so the first one if you

00:14:31,040 --> 00:14:37,579
do well kept chasing there's one on

00:14:34,009 --> 00:14:41,179
github from a guy from Finland I think

00:14:37,579 --> 00:14:45,440
so he has his little World Cup project

00:14:41,179 --> 00:14:50,870
and all the data in in this little data

00:14:45,440 --> 00:14:55,610
and file so it has the stadiums but the

00:14:50,870 --> 00:15:00,170
nice part is he is in few few he has a

00:14:55,610 --> 00:15:02,300
nice open source application front end

00:15:00,170 --> 00:15:09,189
so that's the FIFA World Cup front end

00:15:02,300 --> 00:15:12,019
code that's using the few web components

00:15:09,189 --> 00:15:17,269
let's look at this one the components

00:15:12,019 --> 00:15:20,089
here's the match part that's how modern

00:15:17,269 --> 00:15:23,480
JavaScript looks like so it's way more

00:15:20,089 --> 00:15:27,800
complex but to wrap up how does it look

00:15:23,480 --> 00:15:31,970
like you know when it's running so

00:15:27,800 --> 00:15:34,160
that's the running part here so what you

00:15:31,970 --> 00:15:38,839
can build to you a encourage next time

00:15:34,160 --> 00:15:41,360
to use the service and to build the the

00:15:38,839 --> 00:15:44,269
match schedule you have all the groups

00:15:41,360 --> 00:15:48,439
so they're eight groups and then there

00:15:44,269 --> 00:15:55,279
are the finals and so for example to go

00:15:48,439 --> 00:15:58,839
back to this service here so here's

00:15:55,279 --> 00:15:58,839
everything isn't in one file

00:16:02,649 --> 00:16:05,649
open

00:16:10,820 --> 00:16:23,480
so so the groups it has the service for

00:16:16,730 --> 00:16:26,420
the groups group a group and then there

00:16:23,480 --> 00:16:27,200
are the stadiums and there are the

00:16:26,420 --> 00:16:35,230
standings

00:16:27,200 --> 00:16:35,230
so the idioms so that the stadiums and

00:16:35,320 --> 00:16:44,800
yeah let's go last one sorry

00:16:39,460 --> 00:16:46,970
that's our so here there's a nice little

00:16:44,800 --> 00:16:51,920
visualization it has all the stadiums

00:16:46,970 --> 00:16:55,340
with Jo Jason so if you provide the

00:16:51,920 --> 00:16:57,500
latitude and longitude as Jason and you

00:16:55,340 --> 00:16:58,970
use a map service then it's super easy

00:16:57,500 --> 00:17:02,030
to provide you know

00:16:58,970 --> 00:17:03,770
nice nice maps with with the own

00:17:02,030 --> 00:17:06,950
location so in this case it has a

00:17:03,770 --> 00:17:12,350
location of the stadiums so that's also

00:17:06,950 --> 00:17:17,210
a nice feature yeah so so you're

00:17:12,350 --> 00:17:20,390
encouraged to use the data service to

00:17:17,210 --> 00:17:23,390
Boulder and if you have question you

00:17:20,390 --> 00:17:24,859
know I can the idea is to keep it small

00:17:23,390 --> 00:17:28,539
simple

00:17:24,859 --> 00:17:28,539

YouTube URL: https://www.youtube.com/watch?v=mF2UeeYoIX4


