Title: FreeCodeCamp Vienna, Coding should be fun, September 2019
Publication date: 2019-09-06
Playlist: FreeCodeCamp Vienna
Description: 
	Talk by Gregor Riegler:

Gregor will be giving a talk about how to make your code easily changeable, refactoring, tooling and clean code in general. Coding should indeed be fun, for everyone involved!
Captions: 
	00:00:00,030 --> 00:00:09,150
so thank you all for coming or turn this

00:00:04,470 --> 00:00:11,400
on really quick my name is Gregor I'm

00:00:09,150 --> 00:00:15,660
coding for living for quite some time

00:00:11,400 --> 00:00:19,130
now I'm also working here at Epcot with

00:00:15,660 --> 00:00:22,289
Robert and I want to give a talk about

00:00:19,130 --> 00:00:27,150
coding which in my opinion should be fun

00:00:22,289 --> 00:00:29,849
at least to me it's fun and I want to

00:00:27,150 --> 00:00:33,059
show you why maybe and how it would be

00:00:29,849 --> 00:00:38,010
more fun to you so over the course of my

00:00:33,059 --> 00:00:41,700
career I have learned well I have gotten

00:00:38,010 --> 00:00:45,390
into habits of keeping my code very much

00:00:41,700 --> 00:00:48,690
in order and have a very high focus on

00:00:45,390 --> 00:00:52,710
on getting or achieving the best

00:00:48,690 --> 00:00:54,270
possible design I can and it has not

00:00:52,710 --> 00:00:56,550
been like this from the start I just

00:00:54,270 --> 00:01:00,120
developed these habits and it helped me

00:00:56,550 --> 00:01:02,489
have more fun at what I'm doing the

00:01:00,120 --> 00:01:04,830
funny thing is I'm not really an

00:01:02,489 --> 00:01:07,920
organized person like my wife would even

00:01:04,830 --> 00:01:09,720
say that I'm chaotic and I'm lazy and

00:01:07,920 --> 00:01:12,450
I'm not really concerned about

00:01:09,720 --> 00:01:18,200
cleanliness but when I'm working on code

00:01:12,450 --> 00:01:21,210
it's exactly the opposite so that's that

00:01:18,200 --> 00:01:25,740
let me tell you this expensive software

00:01:21,210 --> 00:01:27,840
as I've seen is not fun and software

00:01:25,740 --> 00:01:31,350
should be simpler it should be cheap and

00:01:27,840 --> 00:01:35,909
if you can do it then it's usually cheap

00:01:31,350 --> 00:01:38,130
and expensive is not fun so what do I

00:01:35,909 --> 00:01:41,400
mean by that I will give you a model

00:01:38,130 --> 00:01:44,869
about what I think the cost of software

00:01:41,400 --> 00:01:48,930
is and I think the cost of software is

00:01:44,869 --> 00:01:52,350
the sum of the cost of all changes that

00:01:48,930 --> 00:01:55,380
you have to do in the code to build the

00:01:52,350 --> 00:01:57,509
software so if you have experience with

00:01:55,380 --> 00:02:00,030
version control or maybe we've kit you

00:01:57,509 --> 00:02:03,810
can think of these things as commits for

00:02:00,030 --> 00:02:05,430
example yes small steps changes and all

00:02:03,810 --> 00:02:07,350
of the changes together all of the cost

00:02:05,430 --> 00:02:10,700
of these changes together is the cost of

00:02:07,350 --> 00:02:13,560
the software and if you look at a single

00:02:10,700 --> 00:02:16,770
change the cost of

00:02:13,560 --> 00:02:20,760
one change of these is just a 4d

00:02:16,770 --> 00:02:23,010
communication because you have a

00:02:20,760 --> 00:02:27,300
customer the customer needs something as

00:02:23,010 --> 00:02:30,810
a need and there has to be some way you

00:02:27,300 --> 00:02:33,600
get what he needs from their head into

00:02:30,810 --> 00:02:36,209
your head so to get that coating and

00:02:33,600 --> 00:02:38,340
there is management in words there is a

00:02:36,209 --> 00:02:43,020
process involved there is lots of stuff

00:02:38,340 --> 00:02:45,450
involved the next theme one cost is the

00:02:43,020 --> 00:02:48,630
essential complexity so you're usually

00:02:45,450 --> 00:02:51,420
on always you have to solve a specific

00:02:48,630 --> 00:02:57,209
problem for the customer to fulfill

00:02:51,420 --> 00:02:59,370
their needs and you have to achieve this

00:02:57,209 --> 00:03:02,040
you have to get this complexity in your

00:02:59,370 --> 00:03:05,850
code it is essential there is no way to

00:03:02,040 --> 00:03:09,269
get around it on the other hand there is

00:03:05,850 --> 00:03:13,350
accidental complication and the thing

00:03:09,269 --> 00:03:16,709
with external complication is this is

00:03:13,350 --> 00:03:19,140
what reproduce because we are probably

00:03:16,709 --> 00:03:23,480
not as good as as getting the best

00:03:19,140 --> 00:03:26,160
design initially so and everybody

00:03:23,480 --> 00:03:30,360
everybody does this it doesn't matter if

00:03:26,160 --> 00:03:33,540
you a junior or a few a master you might

00:03:30,360 --> 00:03:35,549
get the code working at the first try

00:03:33,540 --> 00:03:39,000
but you will never get it

00:03:35,549 --> 00:03:42,269
working or you'll never get the code

00:03:39,000 --> 00:03:44,120
right on the first try so if you get the

00:03:42,269 --> 00:03:46,709
code working that's you're not done

00:03:44,120 --> 00:03:50,010
first you have to get it right and only

00:03:46,709 --> 00:03:53,970
if you get it right can you then you

00:03:50,010 --> 00:03:59,220
really get a good product now what do I

00:03:53,970 --> 00:04:01,799
mean by well let's first do we do what

00:03:59,220 --> 00:04:04,739
you should do it in the correct order so

00:04:01,799 --> 00:04:05,630
you want to first get it to work that's

00:04:04,739 --> 00:04:08,400
the easy part

00:04:05,630 --> 00:04:10,799
then you want to get it right and I will

00:04:08,400 --> 00:04:13,530
tell you what right is later and then

00:04:10,799 --> 00:04:18,120
you want to make it fast

00:04:13,530 --> 00:04:19,890
but usually when it's working in an inch

00:04:18,120 --> 00:04:21,390
right it's already fast so you don't

00:04:19,890 --> 00:04:23,310
have to care about it usually you don't

00:04:21,390 --> 00:04:26,250
really have to care about it so this is

00:04:23,310 --> 00:04:28,480
why it's small fast it's not that

00:04:26,250 --> 00:04:31,610
important usually

00:04:28,480 --> 00:04:34,640
when is the code right the code is right

00:04:31,610 --> 00:04:38,140
when it is working when you can read it

00:04:34,640 --> 00:04:41,360
with ease it should be very easy to read

00:04:38,140 --> 00:04:43,760
when it is easily changeable because as

00:04:41,360 --> 00:04:45,530
you have seen there is a lot of changes

00:04:43,760 --> 00:04:49,490
throughout the development of the code

00:04:45,530 --> 00:04:52,540
that you have to do and every one of

00:04:49,490 --> 00:04:57,050
these changes just adding a feature

00:04:52,540 --> 00:05:03,310
these are all changes and it should be

00:04:57,050 --> 00:05:03,310
as simple as possible and the thing is

00:05:04,090 --> 00:05:07,850
easily changeable and as simple as

00:05:07,190 --> 00:05:10,280
possible

00:05:07,850 --> 00:05:13,040
they kinda contradict each other and

00:05:10,280 --> 00:05:15,350
there are trade offs so maybe if you

00:05:13,040 --> 00:05:16,970
make the code as simple as possible it's

00:05:15,350 --> 00:05:21,020
not as easily changeable

00:05:16,970 --> 00:05:23,690
but if you make it as easily changed as

00:05:21,020 --> 00:05:24,350
possible it might not be as simple as

00:05:23,690 --> 00:05:26,210
possible

00:05:24,350 --> 00:05:28,160
so there are always trade-offs involved

00:05:26,210 --> 00:05:30,470
and you have to make decisions of

00:05:28,160 --> 00:05:34,790
finding the best in the middle

00:05:30,470 --> 00:05:37,520
so why easily changeable of course

00:05:34,790 --> 00:05:38,090
customers they change their mind all the

00:05:37,520 --> 00:05:40,190
time

00:05:38,090 --> 00:05:42,650
so but we can't really blame them for

00:05:40,190 --> 00:05:45,260
them that the business is is flowing

00:05:42,650 --> 00:05:47,090
there is it's always changing there is

00:05:45,260 --> 00:05:51,190
lots of people involved with your

00:05:47,090 --> 00:05:51,190
different needs different opinions and

00:05:51,700 --> 00:05:57,770
they have to communicate to everybody

00:05:54,290 --> 00:06:00,260
then some things get lost and other than

00:05:57,770 --> 00:06:03,830
that if we can't get it right on the

00:06:00,260 --> 00:06:06,140
first try how can we blame them to get

00:06:03,830 --> 00:06:08,840
it not right on their requirements not

00:06:06,140 --> 00:06:11,900
right on the first time so that's that's

00:06:08,840 --> 00:06:12,530
just naturally and we should not blame

00:06:11,900 --> 00:06:14,900
them for it

00:06:12,530 --> 00:06:18,250
instead we should try and make our code

00:06:14,900 --> 00:06:21,980
as easily changeable as possible and

00:06:18,250 --> 00:06:28,880
then we don't get into into issues or it

00:06:21,980 --> 00:06:32,180
we can we can stay fast okay the funny

00:06:28,880 --> 00:06:34,970
thing is we spend vastly more time

00:06:32,180 --> 00:06:37,550
reading code than we are writing it like

00:06:34,970 --> 00:06:39,590
from the Hollywood movies like you know

00:06:37,550 --> 00:06:42,090
developers Riya

00:06:39,590 --> 00:06:45,060
reoccurs slamming the keyboards all the

00:06:42,090 --> 00:06:47,969
time making magic happen but it's not

00:06:45,060 --> 00:06:51,599
sure a door we're usually staring at our

00:06:47,969 --> 00:06:52,439
screens just thinking trying to figure

00:06:51,599 --> 00:06:55,860
things out

00:06:52,439 --> 00:06:58,050
debugging and this just staring takes a

00:06:55,860 --> 00:07:00,330
lot of our time coding is actually very

00:06:58,050 --> 00:07:06,539
minimal time this is why I need to focus

00:07:00,330 --> 00:07:08,460
on on readability also this makes our

00:07:06,539 --> 00:07:12,090
team player so the code that you write

00:07:08,460 --> 00:07:15,629
is the code that the other people in

00:07:12,090 --> 00:07:17,729
your team have to read and if you can

00:07:15,629 --> 00:07:20,039
make it very readable you're a good team

00:07:17,729 --> 00:07:23,909
player and even if you're working alone

00:07:20,039 --> 00:07:26,129
on your own project you are the you are

00:07:23,909 --> 00:07:29,400
your own team player like two weeks

00:07:26,129 --> 00:07:31,050
later because after two weeks you will

00:07:29,400 --> 00:07:35,069
have forgotten most of the details and

00:07:31,050 --> 00:07:37,949
then you have to start recognizing

00:07:35,069 --> 00:07:39,870
everything again and if it's easy to

00:07:37,949 --> 00:07:42,479
read you it is much easy to get into the

00:07:39,870 --> 00:07:48,120
code so yours or own team player in this

00:07:42,479 --> 00:07:53,669
regards in my opinion slow is the new

00:07:48,120 --> 00:07:55,560
fast I think when you are working on a

00:07:53,669 --> 00:07:59,310
software should should really take your

00:07:55,560 --> 00:08:02,550
time and carry it right and and get the

00:07:59,310 --> 00:08:06,690
best design that you can do and in the

00:08:02,550 --> 00:08:09,240
end it will usually pay off for me it

00:08:06,690 --> 00:08:13,409
has always paid off and I have when I

00:08:09,240 --> 00:08:17,310
started I I did pure design and as I got

00:08:13,409 --> 00:08:19,830
better I noticed how I got faster like

00:08:17,310 --> 00:08:20,219
some people think I'm fast I'm a fast

00:08:19,830 --> 00:08:23,190
coder

00:08:20,219 --> 00:08:25,050
I know the fast coder my code is good

00:08:23,190 --> 00:08:31,529
it's why I'm fast but I'm actually very

00:08:25,050 --> 00:08:35,729
slow coder so yeah okay also the most of

00:08:31,529 --> 00:08:38,969
the people think they have no time but I

00:08:35,729 --> 00:08:41,729
think that's kind of an illusion so the

00:08:38,969 --> 00:08:45,149
the business needs it yesterday or they

00:08:41,729 --> 00:08:48,569
need it in in in two weeks or they asked

00:08:45,149 --> 00:08:51,840
you when can you ship it and you say I

00:08:48,569 --> 00:08:54,720
need four weeks and then they say

00:08:51,840 --> 00:08:58,590
but I need it in two weeks what do you

00:08:54,720 --> 00:09:00,360
do you say okay I will try harder you

00:08:58,590 --> 00:09:04,529
can make magic app and you make it baby

00:09:00,360 --> 00:09:07,140
you can ask what else can you give you

00:09:04,529 --> 00:09:10,260
in two weeks maybe something less that

00:09:07,140 --> 00:09:12,720
will fit your needs and if they can

00:09:10,260 --> 00:09:14,160
answer which you can do this and decent

00:09:12,720 --> 00:09:16,740
and maybe this works in two weeks

00:09:14,160 --> 00:09:20,550
then that's fine if they say no I need

00:09:16,740 --> 00:09:23,370
everything then you should say no like

00:09:20,550 --> 00:09:25,200
also when you are working on as a

00:09:23,370 --> 00:09:26,970
programmer and you want to be

00:09:25,200 --> 00:09:33,180
professional you have to learn to say no

00:09:26,970 --> 00:09:37,440
in these situations and getting into a

00:09:33,180 --> 00:09:39,750
rush getting hurrying and having all

00:09:37,440 --> 00:09:42,150
this adrenaline and when you're in this

00:09:39,750 --> 00:09:44,910
survival mode it's it's usually that

00:09:42,150 --> 00:09:47,250
you're a sad coda and it's not fun if

00:09:44,910 --> 00:09:55,350
you have if you have stress that's not

00:09:47,250 --> 00:09:57,270
fun so I don't recommend it also this is

00:09:55,350 --> 00:10:00,960
an interesting curve this is my

00:09:57,270 --> 00:10:03,570
experience when you are starting very

00:10:00,960 --> 00:10:06,990
fast and you are doing everything quick

00:10:03,570 --> 00:10:11,310
and dirty you might be on the right so

00:10:06,990 --> 00:10:15,680
this is the red curve then you might be

00:10:11,310 --> 00:10:18,240
faster in the beginning but very soon

00:10:15,680 --> 00:10:20,810
when you keep doing things like that

00:10:18,240 --> 00:10:24,570
your speed will drop off significantly

00:10:20,810 --> 00:10:27,690
and in extreme cases after weeks or

00:10:24,570 --> 00:10:29,370
maybe months you will have to ask

00:10:27,690 --> 00:10:31,850
yourself if you have if you should not

00:10:29,370 --> 00:10:35,100
start over

00:10:31,850 --> 00:10:41,100
instead what I recommend is to focus on

00:10:35,100 --> 00:10:44,310
this green line to slow down a bit to

00:10:41,100 --> 00:10:46,860
take your time to get it right and at

00:10:44,310 --> 00:10:49,589
some point at the tipping point it will

00:10:46,860 --> 00:10:52,440
pay off and and this is usually after

00:10:49,589 --> 00:10:54,810
two weeks already if you are more

00:10:52,440 --> 00:10:57,390
experienced if you're if you're better

00:10:54,810 --> 00:11:00,420
at getting a good design this tipping

00:10:57,390 --> 00:11:04,260
point naturally moves to the left so

00:11:00,420 --> 00:11:05,410
this is also good a good measure to how

00:11:04,260 --> 00:11:07,630
good you are

00:11:05,410 --> 00:11:10,510
if you are very skilled at designing

00:11:07,630 --> 00:11:14,670
code if you are getting writing good

00:11:10,510 --> 00:11:16,840
code then it doesn't it doesn't pay off

00:11:14,670 --> 00:11:20,110
doing quick and tidy anyhow

00:11:16,840 --> 00:11:26,980
so you yeah that's all how I see it at

00:11:20,110 --> 00:11:27,630
least this is Kent Beck anyone know Kent

00:11:26,980 --> 00:11:32,980
Peck

00:11:27,630 --> 00:11:35,530
okay I recommend googling him he has

00:11:32,980 --> 00:11:38,770
done a lot for he has shaped our

00:11:35,530 --> 00:11:39,790
industry very much he is the inventor of

00:11:38,770 --> 00:11:43,540
extreme programming

00:11:39,790 --> 00:11:45,880
he's also he rediscovered test-driven

00:11:43,540 --> 00:11:47,170
development and he really brought

00:11:45,880 --> 00:11:50,800
test-driven development which is not

00:11:47,170 --> 00:11:54,970
very popular to life in around 2000 and

00:11:50,800 --> 00:11:57,790
he really shaped the agile like the

00:11:54,970 --> 00:12:00,490
agile software development methodology

00:11:57,790 --> 00:12:05,940
and it's always is also one of the

00:12:00,490 --> 00:12:08,200
originators of the agile manifesto so

00:12:05,940 --> 00:12:12,640
there is a lot he brought to our

00:12:08,200 --> 00:12:16,480
community and he says for each desired

00:12:12,640 --> 00:12:18,730
change make the change easy warning this

00:12:16,480 --> 00:12:23,500
may be hard and then make the easy

00:12:18,730 --> 00:12:25,660
change and what does he mean by that so

00:12:23,500 --> 00:12:31,060
he's saying that when you're doing a

00:12:25,660 --> 00:12:33,340
change and and you want to to to to do

00:12:31,060 --> 00:12:35,770
it and the code does not really fit it

00:12:33,340 --> 00:12:36,130
first you get the code into feeding the

00:12:35,770 --> 00:12:39,580
change

00:12:36,130 --> 00:12:41,620
maybe this takes 50 minutes and then you

00:12:39,580 --> 00:12:45,250
do the actual change and this takes only

00:12:41,620 --> 00:12:48,760
10 minutes and then you end up in

00:12:45,250 --> 00:12:50,890
petticoat and you usually are even

00:12:48,760 --> 00:12:53,920
faster than just doing it quick and

00:12:50,890 --> 00:12:59,790
dirty and what he means by this this is

00:12:53,920 --> 00:13:04,330
also called refactoring refactoring is

00:12:59,790 --> 00:13:07,840
by the by definition making small

00:13:04,330 --> 00:13:11,290
changes in the code in the structure of

00:13:07,840 --> 00:13:14,590
your code to improve the design while

00:13:11,290 --> 00:13:16,720
maintaining the current behavior so over

00:13:14,590 --> 00:13:19,510
these small changes is a very small

00:13:16,720 --> 00:13:22,810
steps the code will

00:13:19,510 --> 00:13:26,080
we'll do the same but it will be

00:13:22,810 --> 00:13:29,020
differently structured to compensate for

00:13:26,080 --> 00:13:31,090
specific change or to to have it more

00:13:29,020 --> 00:13:34,180
readable for example and this is

00:13:31,090 --> 00:13:36,070
refactoring and I will show you later

00:13:34,180 --> 00:13:39,540
some examples of this because I think

00:13:36,070 --> 00:13:39,540
that's very helpful for you

00:13:40,680 --> 00:13:45,610
refactoring is not changing behavior so

00:13:43,300 --> 00:13:50,200
if you are fixing a back it's not

00:13:45,610 --> 00:13:52,570
refactoring and if you rewrite your

00:13:50,200 --> 00:13:56,770
application that's also non / factoring

00:13:52,570 --> 00:13:59,350
if you maybe rewrite like three lines or

00:13:56,770 --> 00:14:01,090
a small function you can count it as

00:13:59,350 --> 00:14:03,640
refactoring because it's a very small

00:14:01,090 --> 00:14:07,000
step but the importance is really on

00:14:03,640 --> 00:14:13,840
small steps where every step leaves the

00:14:07,000 --> 00:14:16,750
code in a working state like if you if

00:14:13,840 --> 00:14:18,640
you take for a refactoring step more

00:14:16,750 --> 00:14:23,290
than three minutes it's not really

00:14:18,640 --> 00:14:25,510
refactoring so usually refactoring steps

00:14:23,290 --> 00:14:29,760
can take from five seconds to one minute

00:14:25,510 --> 00:14:32,530
or something but if you are in more than

00:14:29,760 --> 00:14:34,690
three minutes of having code is not

00:14:32,530 --> 00:14:37,150
compiling or not working it's not really

00:14:34,690 --> 00:14:39,070
refactoring I've been there I've I've

00:14:37,150 --> 00:14:40,720
done a lot of stiff stuff rare wear my

00:14:39,070 --> 00:14:46,480
coat wasn't working for two hours but

00:14:40,720 --> 00:14:49,000
it's not really refactoring and you

00:14:46,480 --> 00:14:52,630
should be able to prove that everything

00:14:49,000 --> 00:14:56,230
still works after each change there are

00:14:52,630 --> 00:14:58,240
ways to do this for example the the

00:14:56,230 --> 00:15:01,300
ideas today are very good at refactoring

00:14:58,240 --> 00:15:03,610
the steps are a lot of the steps are

00:15:01,300 --> 00:15:05,920
automated and these automated steps are

00:15:03,610 --> 00:15:07,810
safe to do you just do them and you can

00:15:05,920 --> 00:15:10,690
be sure that everything still works

00:15:07,810 --> 00:15:14,710
afterwards but for some refactoring

00:15:10,690 --> 00:15:17,200
you will have to add unit tests for

00:15:14,710 --> 00:15:19,690
example to to make sure that everything

00:15:17,200 --> 00:15:21,610
still works after the changes all right

00:15:19,690 --> 00:15:21,850
now let's get into the code talk is

00:15:21,610 --> 00:15:26,980
cheap

00:15:21,850 --> 00:15:28,600
show me the code let's start with very

00:15:26,980 --> 00:15:31,240
simple things okay I will just show you

00:15:28,600 --> 00:15:32,639
everything pretty simple examples with

00:15:31,240 --> 00:15:39,299
clutter

00:15:32,639 --> 00:15:43,759
what is clutter anyone see problems in

00:15:39,299 --> 00:15:48,029
this code the problem I see is that

00:15:43,759 --> 00:15:50,339
there is a function and that says add so

00:15:48,029 --> 00:15:54,480
when I read this function I know that it

00:15:50,339 --> 00:15:55,709
adds those two parameters and then when

00:15:54,480 --> 00:15:59,189
I read the comment at the top

00:15:55,709 --> 00:16:04,379
it also says adds a and B and returns

00:15:59,189 --> 00:16:07,679
the result so the comment to me adds no

00:16:04,379 --> 00:16:10,079
value in this case because the name of

00:16:07,679 --> 00:16:13,049
the function already tells me what the

00:16:10,079 --> 00:16:15,569
function is doing I would just delete

00:16:13,049 --> 00:16:16,829
the comment because it's just five more

00:16:15,569 --> 00:16:23,369
lines that I don't want to read

00:16:16,829 --> 00:16:26,699
everything is in the function typically

00:16:23,369 --> 00:16:29,100
you don't want to comment the what the

00:16:26,699 --> 00:16:31,949
code is doing but a good tip is to

00:16:29,100 --> 00:16:36,179
comment why you are doing certain things

00:16:31,949 --> 00:16:38,999
so example you are running into an issue

00:16:36,179 --> 00:16:41,429
and you don't know how to solve it and

00:16:38,999 --> 00:16:43,529
then your Google Stack Overflow and then

00:16:41,429 --> 00:16:45,869
you find a solution and you're doing

00:16:43,529 --> 00:16:48,179
this solution maybe you can put the link

00:16:45,869 --> 00:16:50,610
to second flow in your comment so that

00:16:48,179 --> 00:16:53,279
if someone once wants to know why you

00:16:50,610 --> 00:16:55,110
did that and you have this link or some

00:16:53,279 --> 00:16:57,959
some issue ticket or something

00:16:55,110 --> 00:17:00,929
it could also help just to explain your

00:16:57,959 --> 00:17:03,389
team players why you're doing things not

00:17:00,929 --> 00:17:05,880
what you're doing I always try to put

00:17:03,389 --> 00:17:11,029
what you are doing in the names of the

00:17:05,880 --> 00:17:15,720
code this is another example this is a

00:17:11,029 --> 00:17:19,260
getter it would this is from a class an

00:17:15,720 --> 00:17:21,809
elevator class it returns the floor and

00:17:19,260 --> 00:17:24,299
it says get floor and in the comment it

00:17:21,809 --> 00:17:27,120
says the same turns the floor I mean

00:17:24,299 --> 00:17:31,320
this is also clutter I would just delete

00:17:27,120 --> 00:17:33,360
it like not all comments are bad some

00:17:31,320 --> 00:17:37,820
comments are really useful that these

00:17:33,360 --> 00:17:37,820
comments are without value

00:17:40,640 --> 00:17:50,280
in this example this is also a function

00:17:44,100 --> 00:17:55,740
from an elevator this method calls the

00:17:50,280 --> 00:18:00,750
elevator and here is a conditional and

00:17:55,740 --> 00:18:03,150
there is a comment on my rail and then

00:18:00,750 --> 00:18:06,080
there is some code that is your

00:18:03,150 --> 00:18:09,120
described riff adds an intermediate stop

00:18:06,080 --> 00:18:12,090
so that the elevator will stop there and

00:18:09,120 --> 00:18:15,600
then there is some something else to me

00:18:12,090 --> 00:18:17,790
this is already quite long and it's I

00:18:15,600 --> 00:18:21,870
can't really follow the logic it's it's

00:18:17,790 --> 00:18:24,870
it's a little bit complicated so you can

00:18:21,870 --> 00:18:28,670
just for example you can just extract

00:18:24,870 --> 00:18:34,640
this code yeah into a new function and

00:18:28,670 --> 00:18:34,640
call it add intermediate stop

00:18:38,080 --> 00:18:42,819
[Music]

00:18:39,639 --> 00:18:42,819
like this

00:18:43,830 --> 00:18:50,150
did you see that first there was sorry

00:18:53,270 --> 00:19:01,700
first there is this box the code and

00:18:56,440 --> 00:19:04,370
then it's extracted it sits down there

00:19:01,700 --> 00:19:08,059
and the function here says what it is

00:19:04,370 --> 00:19:10,850
doing and this code got a lot of got lot

00:19:08,059 --> 00:19:12,980
smaller it's much easier to read and the

00:19:10,850 --> 00:19:14,480
function says what it is doing and if

00:19:12,980 --> 00:19:17,690
you really want to know the details you

00:19:14,480 --> 00:19:22,370
just look into the function this called

00:19:17,690 --> 00:19:26,090
extract method and the idea is usually

00:19:22,370 --> 00:19:29,510
can automate these things also I note

00:19:26,090 --> 00:19:32,690
and yet I there is for example on my way

00:19:29,510 --> 00:19:35,720
so so there is a condition that says if

00:19:32,690 --> 00:19:40,190
on my way so if the elevator is on my

00:19:35,720 --> 00:19:42,260
way add an intermediate stop so why is

00:19:40,190 --> 00:19:49,549
this so complicated you know let's make

00:19:42,260 --> 00:19:53,480
this simpler just extract a method is on

00:19:49,549 --> 00:19:55,820
my way now it's down here the code and

00:19:53,480 --> 00:19:58,940
now you can very easily read it if on my

00:19:55,820 --> 00:20:02,659
way at intermediate stop simple as that

00:19:58,940 --> 00:20:04,490
just very simple steps that make the

00:20:02,659 --> 00:20:10,090
code easily readable and and you will

00:20:04,490 --> 00:20:13,760
get much faster doing it also clutter is

00:20:10,090 --> 00:20:17,179
commented out code I've been working on

00:20:13,760 --> 00:20:19,700
on projects where there was so many

00:20:17,179 --> 00:20:22,220
comment out code and everybody was

00:20:19,700 --> 00:20:25,399
afraid to delete it because they thought

00:20:22,220 --> 00:20:27,620
ok they probably need it or they don't

00:20:25,399 --> 00:20:31,100
know what it does and maybe it's

00:20:27,620 --> 00:20:33,559
important but honestly if it's if it's

00:20:31,100 --> 00:20:36,140
commented out like this just remove it

00:20:33,559 --> 00:20:39,890
you have to have the courage to remove

00:20:36,140 --> 00:20:41,450
comment out code there is no reason to

00:20:39,890 --> 00:20:46,279
have comment out code in your code base

00:20:41,450 --> 00:20:49,640
and if it is deleted and and you still

00:20:46,279 --> 00:20:53,630
need it you can just take it back from

00:20:49,640 --> 00:20:58,370
Russian control from get so that's that

00:20:53,630 --> 00:21:02,409
I would just remove it and it gets much

00:20:58,370 --> 00:21:02,409
smaller right

00:21:03,610 --> 00:21:12,010
this is a good example it's a it's a

00:21:07,880 --> 00:21:12,010
function and somebody commented

00:21:19,220 --> 00:21:25,250
and somebody commented to do maybe we

00:21:21,800 --> 00:21:26,630
need this later always maybe if it's

00:21:25,250 --> 00:21:29,600
comedy doubt it that's no value to

00:21:26,630 --> 00:21:32,240
decode and it's there in version control

00:21:29,600 --> 00:21:34,250
if you need it later so there's no point

00:21:32,240 --> 00:21:35,930
in having it and disturbing you from

00:21:34,250 --> 00:21:44,720
reading the rest of the code I'll just

00:21:35,930 --> 00:21:49,610
remove it or so maybe you can't see the

00:21:44,720 --> 00:21:53,020
color but this upper wavefunction it is

00:21:49,610 --> 00:21:56,510
gray it is it is it is great because

00:21:53,020 --> 00:21:59,780
nobody's using it if you have functions

00:21:56,510 --> 00:22:01,910
in your code that is not being used just

00:21:59,780 --> 00:22:03,650
delete them there are so they are not

00:22:01,910 --> 00:22:07,970
adding value they were just making your

00:22:03,650 --> 00:22:12,730
code longer this one it's this is this

00:22:07,970 --> 00:22:16,780
is grayed out so you can just delete it

00:22:12,730 --> 00:22:21,050
and this is an example this is a

00:22:16,780 --> 00:22:26,270
function that adds values positively

00:22:21,050 --> 00:22:29,390
like numbers positively and here it is

00:22:26,270 --> 00:22:31,370
it is getting the positive value so if

00:22:29,390 --> 00:22:35,210
it's negative it will be positive 10 and

00:22:31,370 --> 00:22:40,090
it's adding that and then there is if

00:22:35,210 --> 00:22:44,630
it's smaller than zero make it positive

00:22:40,090 --> 00:22:47,690
but actually with this code it will

00:22:44,630 --> 00:22:50,120
never be smaller than zero so this is

00:22:47,690 --> 00:22:52,340
this code is unreachable we will never

00:22:50,120 --> 00:22:54,350
get there if you have something like

00:22:52,340 --> 00:22:58,820
this also delete it

00:22:54,350 --> 00:23:02,000
yeah it's not adding value so this is

00:22:58,820 --> 00:23:04,790
what clutter is and if you are just

00:23:02,000 --> 00:23:08,840
removing clutter you are already doing a

00:23:04,790 --> 00:23:12,170
good thing to your code base next thing

00:23:08,840 --> 00:23:15,040
is you want to make it expressive this

00:23:12,170 --> 00:23:15,040
is expressive

00:23:16,490 --> 00:23:22,250
I cannot understand what history the

00:23:20,690 --> 00:23:24,140
funny thing it is just the same code

00:23:22,250 --> 00:23:26,540
from this slide before it is the

00:23:24,140 --> 00:23:29,870
elevator code but it just has very bad

00:23:26,540 --> 00:23:32,750
naming so these I just want to show you

00:23:29,870 --> 00:23:36,760
how important the naming is if you just

00:23:32,750 --> 00:23:40,010
use like abbreviations or very small

00:23:36,760 --> 00:23:40,910
characters in your variables nobody will

00:23:40,010 --> 00:23:44,000
know what you're doing

00:23:40,910 --> 00:23:45,230
just just it's it doesn't matter if the

00:23:44,000 --> 00:23:47,570
names get a little bit long

00:23:45,230 --> 00:23:54,680
just make them expressive it's very

00:23:47,570 --> 00:23:58,550
helpful also lots of parameters you have

00:23:54,680 --> 00:24:01,160
here a function that sends an email and

00:23:58,550 --> 00:24:05,600
you have like one two three four five

00:24:01,160 --> 00:24:11,270
six parameters and if you want to send

00:24:05,600 --> 00:24:14,390
the email to max muster man you have all

00:24:11,270 --> 00:24:17,180
these strings and it's very easy to get

00:24:14,390 --> 00:24:22,970
them in the wrong order or you don't

00:24:17,180 --> 00:24:25,490
even know which parameter is rich if you

00:24:22,970 --> 00:24:27,620
don't have this definition on your

00:24:25,490 --> 00:24:29,330
screen it's very hard to figure this out

00:24:27,620 --> 00:24:31,850
so what can you do

00:24:29,330 --> 00:24:34,550
you can't you connect you can you can

00:24:31,850 --> 00:24:36,950
group these parameters you can extract

00:24:34,550 --> 00:24:45,370
the parameter object and make it more

00:24:36,950 --> 00:24:51,290
expressive like this I grouped the first

00:24:45,370 --> 00:24:54,050
three parameters as the recipient object

00:24:51,290 --> 00:24:56,150
and now it is descriptive I can see ah

00:24:54,050 --> 00:24:58,820
this is the first name this is the last

00:24:56,150 --> 00:25:00,680
name ah this is the email I won't get it

00:24:58,820 --> 00:25:03,500
in the wrong order and I know what

00:25:00,680 --> 00:25:05,000
everything is and the same I can do for

00:25:03,500 --> 00:25:08,320
the second parameter I can group this

00:25:05,000 --> 00:25:11,120
too and this is much more expressive

00:25:08,320 --> 00:25:16,910
this is just small tips to help you get

00:25:11,120 --> 00:25:21,590
taught better also you want to make it

00:25:16,910 --> 00:25:23,780
simple I am seeing some of this code a

00:25:21,590 --> 00:25:26,360
lot when I'm reviewing code and it is

00:25:23,780 --> 00:25:29,850
accidental nesting this function is

00:25:26,360 --> 00:25:32,820
actually not doing very much

00:25:29,850 --> 00:25:35,490
function is to really just checking if a

00:25:32,820 --> 00:25:39,030
string contains a hello and then it is a

00:25:35,490 --> 00:25:41,940
welcome that's all it is doing but for

00:25:39,030 --> 00:25:44,549
this very simple thing there is so much

00:25:41,940 --> 00:25:46,470
nesting there's so many conditionals and

00:25:44,549 --> 00:25:50,130
it's really hard to understand what it

00:25:46,470 --> 00:25:53,910
is actually doing and also if you look

00:25:50,130 --> 00:25:56,669
closely at this if it's marked as yellow

00:25:53,910 --> 00:25:57,960
this is this is a hint bye-bye my IDE

00:25:56,669 --> 00:26:00,059
it's called IntelliJ

00:25:57,960 --> 00:26:03,480
I think webstorm has this as well for

00:26:00,059 --> 00:26:05,669
JavaScript it tells you that it could do

00:26:03,480 --> 00:26:09,720
something automatically and if I move my

00:26:05,669 --> 00:26:14,760
mouse over it it says if statement can

00:26:09,720 --> 00:26:16,230
be simplified so let's try that I just

00:26:14,760 --> 00:26:20,250
moved the code to the left so you can

00:26:16,230 --> 00:26:24,390
see compared with the result and this is

00:26:20,250 --> 00:26:27,690
what it does automatically like this if

00:26:24,390 --> 00:26:32,390
statement it cuts the whole inner if

00:26:27,690 --> 00:26:35,610
if-else got simplify to this one line

00:26:32,390 --> 00:26:39,929
okay but I am not done yet

00:26:35,610 --> 00:26:43,230
I don't like that that there is now only

00:26:39,929 --> 00:26:46,260
if the string is not undefined I want to

00:26:43,230 --> 00:26:47,940
do whatever the function does I don't

00:26:46,260 --> 00:26:51,390
want the code to be like this

00:26:47,940 --> 00:26:55,590
I want to have exit clauses in the top

00:26:51,390 --> 00:26:58,650
that check if it is not a valid input if

00:26:55,590 --> 00:27:03,590
it is not defined or something just

00:26:58,650 --> 00:27:06,450
return wrong and then focus on what the

00:27:03,590 --> 00:27:09,870
function two really does so I will now

00:27:06,450 --> 00:27:13,860
flip this if I move it to the left so

00:27:09,870 --> 00:27:17,490
you can compare I'm flipping it now it's

00:27:13,860 --> 00:27:22,020
just flipped it's it's it's gone from

00:27:17,490 --> 00:27:25,230
not equals to equals and then I have to

00:27:22,020 --> 00:27:27,450
also flip the content now they return or

00:27:25,230 --> 00:27:30,750
whatever the function actually does is

00:27:27,450 --> 00:27:34,320
in the bottom and I see already

00:27:30,750 --> 00:27:36,600
something like a an exit clause if if

00:27:34,320 --> 00:27:38,880
someone sends me an undefined string I

00:27:36,600 --> 00:27:40,740
just want to exit really quick there's

00:27:38,880 --> 00:27:43,080
an exit clause and you know I want this

00:27:40,740 --> 00:27:46,379
in the top so

00:27:43,080 --> 00:27:48,149
now I can get rid of this else it's not

00:27:46,379 --> 00:27:53,389
adding any value anymore so I really

00:27:48,149 --> 00:27:55,999
move to ales bum now the ass is gone I

00:27:53,389 --> 00:27:59,070
would already be happy with this code I

00:27:55,999 --> 00:28:01,889
have the exit cards in the top and then

00:27:59,070 --> 00:28:06,659
what the function is actually doing you

00:28:01,889 --> 00:28:11,820
could also do something like this to

00:28:06,659 --> 00:28:13,919
just remove the brackets this is a

00:28:11,820 --> 00:28:17,340
matter of taste you can even combine

00:28:13,919 --> 00:28:20,999
those two but I like to have the exit

00:28:17,340 --> 00:28:26,039
clause explicitly in the top that's a

00:28:20,999 --> 00:28:30,359
matter of taste and you see from if I go

00:28:26,039 --> 00:28:33,019
back to what it was originally this if

00:28:30,359 --> 00:28:35,309
you can compare this to the two lines

00:28:33,019 --> 00:28:41,190
it's much easier to read and understand

00:28:35,309 --> 00:28:43,350
and easy to change okay you want to

00:28:41,190 --> 00:28:46,139
eliminate duplication and it is this is

00:28:43,350 --> 00:28:49,379
a big thing most of the code pieces they

00:28:46,139 --> 00:28:53,639
have at least 40% of the application and

00:28:49,379 --> 00:28:55,559
then if you fix a buck on some function

00:28:53,639 --> 00:28:57,539
you don't know that there's another

00:28:55,559 --> 00:29:00,179
function does the same thing and the

00:28:57,539 --> 00:29:02,940
buck is still there so that's what

00:29:00,179 --> 00:29:05,820
duplication is I will show you very

00:29:02,940 --> 00:29:08,460
simple examples of duplication this is a

00:29:05,820 --> 00:29:11,970
function that is taken from a card game

00:29:08,460 --> 00:29:15,210
and this is the algorithm that suffers

00:29:11,970 --> 00:29:16,679
the card deck okay so it's just

00:29:15,210 --> 00:29:21,269
shuffling in the cards in the deck and

00:29:16,679 --> 00:29:23,249
and if you can see here there is 52 this

00:29:21,269 --> 00:29:27,059
is the size of the deck the number of

00:29:23,249 --> 00:29:31,440
cards in the deck and there is 53 minus

00:29:27,059 --> 00:29:34,340
I and this is not by accident 53 this is

00:29:31,440 --> 00:29:36,619
the size of the deck plus one

00:29:34,340 --> 00:29:40,139
intentionally so this is not by accident

00:29:36,619 --> 00:29:43,859
so these numbers they are in some way

00:29:40,139 --> 00:29:47,759
duplicated this is also called magic

00:29:43,859 --> 00:29:53,179
number if you if you find magic numbers

00:29:47,759 --> 00:29:56,850
like this you can extract them like this

00:29:53,179 --> 00:29:59,640
just extract the a constant deck size

00:29:56,850 --> 00:30:02,310
- and then you use them here and here

00:29:59,640 --> 00:30:04,110
and if you want to add more cards to

00:30:02,310 --> 00:30:08,610
your deck you just have to change a

00:30:04,110 --> 00:30:16,770
single value that's how your move -

00:30:08,610 --> 00:30:22,160
application let's look at this code I'm

00:30:16,770 --> 00:30:27,150
creating a new player 35 feet and 35 I

00:30:22,160 --> 00:30:32,730
have here two times the same number it's

00:30:27,150 --> 00:30:34,170
this duplication no it's not good good

00:30:32,730 --> 00:30:37,170
that you saw it it's not application

00:30:34,170 --> 00:30:40,050
because those numbers they change for

00:30:37,170 --> 00:30:42,570
different reasons the one is the ID and

00:30:40,050 --> 00:30:44,520
the other one is the age so if I if I

00:30:42,570 --> 00:30:46,500
changed the age I would change this ID

00:30:44,520 --> 00:30:49,170
that's not whatever you wanted I just

00:30:46,500 --> 00:30:53,460
want to change his age so this is not

00:30:49,170 --> 00:30:56,820
duplication and there is also functions

00:30:53,460 --> 00:30:58,440
that look sometimes exactly the same but

00:30:56,820 --> 00:31:00,960
if they change for different reasons

00:30:58,440 --> 00:31:02,960
those functions are not duplication and

00:31:00,960 --> 00:31:07,530
you have to take care about this

00:31:02,960 --> 00:31:12,060
sometimes if you if you remove those

00:31:07,530 --> 00:31:15,470
duplications that change not for the

00:31:12,060 --> 00:31:22,490
same reason you make your life harder

00:31:15,470 --> 00:31:25,140
yeah so when do you want to reflect on

00:31:22,490 --> 00:31:28,530
you want to do it continuously like all

00:31:25,140 --> 00:31:32,610
the time when you're working on code you

00:31:28,530 --> 00:31:34,710
do it before you make a change you make

00:31:32,610 --> 00:31:36,990
the change easy and when you're done

00:31:34,710 --> 00:31:41,250
making a change you clean the kitchen

00:31:36,990 --> 00:31:42,900
and if you do it like this you yeah you

00:31:41,250 --> 00:31:45,530
just end up with very clean code and

00:31:42,900 --> 00:31:49,710
you'll probably end up very fast and

00:31:45,530 --> 00:31:52,580
also I've often seen refactoring as an

00:31:49,710 --> 00:31:58,680
item on the backlog I do not recommend

00:31:52,580 --> 00:32:01,590
refactoring to even have it as a ticket

00:31:58,680 --> 00:32:03,930
or an issue it's it's it's it's

00:32:01,590 --> 00:32:06,690
something that is definitely not on the

00:32:03,930 --> 00:32:10,380
backlog and if it is on the backlog then

00:32:06,690 --> 00:32:12,210
it is not important to you right now or

00:32:10,380 --> 00:32:14,520
if it is important then you should do it

00:32:12,210 --> 00:32:16,590
right now so there is really no reason

00:32:14,520 --> 00:32:20,840
to do perfect we end up in the backlog

00:32:16,590 --> 00:32:26,280
you should do it always and that's that

00:32:20,840 --> 00:32:30,210
okay so what to refactor you want to

00:32:26,280 --> 00:32:31,650
reflect our code that is just related to

00:32:30,210 --> 00:32:34,290
your current work if you have lots of

00:32:31,650 --> 00:32:36,390
modules that you're not working on just

00:32:34,290 --> 00:32:38,220
leave them like they are maybe you don't

00:32:36,390 --> 00:32:44,010
need to factor them it's not adding any

00:32:38,220 --> 00:32:46,190
value to you you probably need a suit a

00:32:44,010 --> 00:32:49,380
suite of fast unit tests that verify

00:32:46,190 --> 00:32:53,250
that after each step the code is still

00:32:49,380 --> 00:32:55,020
working this this vastly improves the

00:32:53,250 --> 00:32:56,880
confidence in your code because you

00:32:55,020 --> 00:32:59,250
don't have to run it and test it and so

00:32:56,880 --> 00:33:01,320
on just execute your tests and if they

00:32:59,250 --> 00:33:03,090
they are finished hopefully in like one

00:33:01,320 --> 00:33:05,490
second and then you are confident

00:33:03,090 --> 00:33:09,540
everything still works you can do very

00:33:05,490 --> 00:33:12,330
nice refactoring so unit tests enable

00:33:09,540 --> 00:33:14,880
refactoring refactoring enables better

00:33:12,330 --> 00:33:17,250
design but it design enables easy

00:33:14,880 --> 00:33:21,360
changes and easy changes make happy

00:33:17,250 --> 00:33:23,910
coders that's what I think there is a

00:33:21,360 --> 00:33:28,500
one workflow for refactoring this

00:33:23,910 --> 00:33:30,390
test-driven development where you when

00:33:28,500 --> 00:33:32,640
your code you just you start with a unit

00:33:30,390 --> 00:33:36,800
test and after you written the unit test

00:33:32,640 --> 00:33:39,870
you make it past as simple as possible

00:33:36,800 --> 00:33:41,940
the test is then working and then when

00:33:39,870 --> 00:33:44,070
you have make the test working then you

00:33:41,940 --> 00:33:45,570
go into refactoring when you learn

00:33:44,070 --> 00:33:51,890
refactoring you add the next unit test

00:33:45,570 --> 00:33:55,110
this is a cycle and it and it makes you

00:33:51,890 --> 00:33:59,760
add all the tests you need to do safe

00:33:55,110 --> 00:34:01,710
refactorings in your code base maybe

00:33:59,760 --> 00:34:05,190
some of you know the factorial game I

00:34:01,710 --> 00:34:08,310
have played in early access and it had

00:34:05,190 --> 00:34:10,500
no park no crash whatsoever

00:34:08,310 --> 00:34:13,889
I played other early access games and

00:34:10,500 --> 00:34:16,020
they crashed all the time and the funny

00:34:13,889 --> 00:34:17,629
thing is factorial they are doing

00:34:16,020 --> 00:34:19,860
test-driven development in their game

00:34:17,629 --> 00:34:23,190
that's probably why they have no bugs

00:34:19,860 --> 00:34:25,850
and I'm already someone posted that they

00:34:23,190 --> 00:34:25,850
had a crash

00:34:26,720 --> 00:34:34,320
55 54 minutes and then 10 minutes later

00:34:31,860 --> 00:34:37,800
the developer gave an 80a

00:34:34,320 --> 00:34:41,640
in 1.5 hours the bug will be fixed

00:34:37,800 --> 00:34:48,360
that's good performance right that's

00:34:41,640 --> 00:34:52,050
really good performance ETA says that it

00:34:48,360 --> 00:34:53,580
will be estimated Lee fixed in 1.5 hours

00:34:52,050 --> 00:34:54,780
I don't really know what the

00:34:53,580 --> 00:34:57,540
abbreviation whatever works for the

00:34:54,780 --> 00:35:02,730
provisional maybe see guesstimate I'm of

00:34:57,540 --> 00:35:06,300
her okay thank you for that yeah yeah I

00:35:02,730 --> 00:35:10,530
will now quickly go over this I already

00:35:06,300 --> 00:35:14,420
said this this is not as important

00:35:10,530 --> 00:35:17,280
I recommend drunk based development

00:35:14,420 --> 00:35:18,600
maybe you have seen this workflow where

00:35:17,280 --> 00:35:21,390
the people are working in feature

00:35:18,600 --> 00:35:23,490
branches for a long time and that's very

00:35:21,390 --> 00:35:25,440
problematic because if you want a

00:35:23,490 --> 00:35:27,690
feature branch for one week and you are

00:35:25,440 --> 00:35:30,710
just changing a function that is used

00:35:27,690 --> 00:35:33,360
all all over the place in your code base

00:35:30,710 --> 00:35:36,000
when you emerge you get into conflict

00:35:33,360 --> 00:35:38,430
and you know this and so you're here

00:35:36,000 --> 00:35:41,310
probably then you are scared of doing

00:35:38,430 --> 00:35:42,480
your factoring in this branches so

00:35:41,310 --> 00:35:45,780
that's not a good idea

00:35:42,480 --> 00:35:48,750
you want to your work flow to enable

00:35:45,780 --> 00:35:51,660
refactoring so you don't want to go into

00:35:48,750 --> 00:35:54,900
feature branches it's much better to if

00:35:51,660 --> 00:35:58,080
all your people are committing to the

00:35:54,900 --> 00:36:01,380
same branch and then if you have very

00:35:58,080 --> 00:36:04,110
small changes very frequently the risk

00:36:01,380 --> 00:36:06,840
is reduced so the smaller the steps the

00:36:04,110 --> 00:36:09,480
much smaller the risk becomes and you

00:36:06,840 --> 00:36:13,230
probably don't end up with conflicts at

00:36:09,480 --> 00:36:15,420
all or if you do if you end up with a

00:36:13,230 --> 00:36:17,490
conflict the conflict has to be very

00:36:15,420 --> 00:36:19,770
small because it's just about a single

00:36:17,490 --> 00:36:22,050
commit and if you to very small commits

00:36:19,770 --> 00:36:24,570
then the risk is very low so you should

00:36:22,050 --> 00:36:27,150
also two small commits and commit very

00:36:24,570 --> 00:36:34,610
often like once every 10 minutes you can

00:36:27,150 --> 00:36:36,720
commit tooling I recommend using an IDE

00:36:34,610 --> 00:36:37,980
because they have lots of these

00:36:36,720 --> 00:36:44,010
refactoring steps

00:36:37,980 --> 00:36:47,359
automated I have a video here it takes

00:36:44,010 --> 00:36:53,040
just one minute it just demonstrates a

00:36:47,359 --> 00:36:55,440
little bit of Java code how the steps

00:36:53,040 --> 00:36:57,450
are automated this is a video where it

00:36:55,440 --> 00:37:01,040
is refactoring from an old Java version

00:36:57,450 --> 00:37:01,040
to a new channel version

00:37:13,430 --> 00:37:21,010
and it's using the mouse but you can do

00:37:17,090 --> 00:37:21,010
this oil free people just art enter

00:37:25,220 --> 00:37:34,700
all these steps are tiny and they are

00:37:29,779 --> 00:37:37,160
safe because the IDE guarantees that

00:37:34,700 --> 00:37:40,690
they are safe so for this refactoring

00:37:37,160 --> 00:37:40,690
you don't even need unit tests

00:37:58,730 --> 00:38:03,170
yeah it's not bachelor No so it was

00:38:01,730 --> 00:38:05,720
really awful in the beginning like

00:38:03,170 --> 00:38:10,760
waffle okay

00:38:05,720 --> 00:38:14,690
I also recommend trying to not use your

00:38:10,760 --> 00:38:17,089
mouse as much there is a good tip that

00:38:14,690 --> 00:38:20,150
you can do it try to move your mouse to

00:38:17,089 --> 00:38:21,619
the other side of the keyboard like that

00:38:20,150 --> 00:38:24,050
when you try to reach for the mouse

00:38:21,619 --> 00:38:25,670
there is no mouse and try to force

00:38:24,050 --> 00:38:29,060
yourself into using only the keyboard

00:38:25,670 --> 00:38:32,960
and really finding all the shortcuts

00:38:29,060 --> 00:38:34,849
that you need in your IDE to get the

00:38:32,960 --> 00:38:37,430
decoding done you can there is a

00:38:34,849 --> 00:38:39,680
shortcut for committing for pushing for

00:38:37,430 --> 00:38:41,329
pulling for doing your factoring so

00:38:39,680 --> 00:38:43,099
moving code around as shortcuts for

00:38:41,329 --> 00:38:44,450
everything you can really if you're in

00:38:43,099 --> 00:38:48,619
an ID you don't need your mouse and

00:38:44,450 --> 00:38:50,570
mouse just slows you down and it's not

00:38:48,619 --> 00:38:53,270
really that hard to get into using the

00:38:50,570 --> 00:38:55,640
keyboard it's just like you just have to

00:38:53,270 --> 00:39:02,990
start and then after some some weeks

00:38:55,640 --> 00:39:05,480
you're probably already into it pure

00:39:02,990 --> 00:39:08,359
functions and immutable objects are

00:39:05,480 --> 00:39:14,900
easier to refactor so you want to write

00:39:08,359 --> 00:39:18,130
these usually when you are factoring you

00:39:14,900 --> 00:39:21,500
have to break dependencies and

00:39:18,130 --> 00:39:23,810
dependencies of state are much harder to

00:39:21,500 --> 00:39:26,030
refactor and if you're doing pure

00:39:23,810 --> 00:39:29,119
functions and immutable objects there is

00:39:26,030 --> 00:39:33,680
no state dependency involved so it's

00:39:29,119 --> 00:39:35,540
easier to factor Tippy's branch first so

00:39:33,680 --> 00:39:39,440
if you have lots of nestings like if

00:39:35,540 --> 00:39:40,640
else--if switch while and you want to

00:39:39,440 --> 00:39:41,359
refactor the code because it's so

00:39:40,640 --> 00:39:44,240
complicated

00:39:41,359 --> 00:39:47,690
start at the deepest branch like the

00:39:44,240 --> 00:39:50,510
lowest branch then then you will have a

00:39:47,690 --> 00:39:53,000
much easier life if you start at the

00:39:50,510 --> 00:39:56,569
very top it is very likely that you get

00:39:53,000 --> 00:39:59,839
stuck this is what i not recommend and

00:39:56,569 --> 00:40:02,869
practice a lot of practice there is lots

00:39:59,839 --> 00:40:04,730
of practice examples online I have them

00:40:02,869 --> 00:40:10,280
in my in my slides you can look them up

00:40:04,730 --> 00:40:12,140
later cutters are this is cooking took

00:40:10,280 --> 00:40:15,140
this is taken from a karate

00:40:12,140 --> 00:40:18,140
where you practice fighting against an

00:40:15,140 --> 00:40:20,870
imaginary opponent and in this case the

00:40:18,140 --> 00:40:23,140
opponent is the code and you have to

00:40:20,870 --> 00:40:26,270
reflect on some very complex code and

00:40:23,140 --> 00:40:29,600
they they are on land they are available

00:40:26,270 --> 00:40:32,000
in all sorts of languages and you can

00:40:29,600 --> 00:40:33,920
just get get started into practicing and

00:40:32,000 --> 00:40:36,890
if you don't know what to do really

00:40:33,920 --> 00:40:39,110
just google them or find them on YouTube

00:40:36,890 --> 00:40:42,310
and and you will see someone else doing

00:40:39,110 --> 00:40:43,550
it and you can learn from what they did

00:40:42,310 --> 00:40:49,070
yeah

00:40:43,550 --> 00:40:50,750
and what if you're not allowed to there

00:40:49,070 --> 00:40:53,180
are companies where you will not be

00:40:50,750 --> 00:40:56,230
allowed to do refractor or to write

00:40:53,180 --> 00:40:58,970
tests there are companies like this and

00:40:56,230 --> 00:41:02,210
hungry pop has something to say about it

00:40:58,970 --> 00:41:04,520
and he says never ask for permission to

00:41:02,210 --> 00:41:07,400
refactor never ask for permission to

00:41:04,520 --> 00:41:09,320
write tests you do these things because

00:41:07,400 --> 00:41:11,630
you know that they are the best way to

00:41:09,320 --> 00:41:14,330
go fast and when you ask for a

00:41:11,630 --> 00:41:17,360
permission you are asking someone else

00:41:14,330 --> 00:41:20,540
to take responsibility for your actions

00:41:17,360 --> 00:41:22,910
so you don't want to give someone else

00:41:20,540 --> 00:41:25,220
the responsibility what you're doing

00:41:22,910 --> 00:41:27,830
with your code the customer can decide

00:41:25,220 --> 00:41:29,720
what the code should be doing but you

00:41:27,830 --> 00:41:32,810
are deciding on the design and and how

00:41:29,720 --> 00:41:34,070
you do and if you need unit tests and if

00:41:32,810 --> 00:41:36,230
you need refactoring that it's your

00:41:34,070 --> 00:41:42,890
choice because you are the one working

00:41:36,230 --> 00:41:45,590
on the code and one last tip working on

00:41:42,890 --> 00:41:48,200
a queen field is exciting it is fun but

00:41:45,590 --> 00:41:51,020
you should not underestimate the lessons

00:41:48,200 --> 00:41:53,840
that a poor legacy code piece can teach

00:41:51,020 --> 00:41:56,960
you I have been working on some of these

00:41:53,840 --> 00:41:58,550
very old very bad code bases and I

00:41:56,960 --> 00:42:01,880
believe that they have probably taught

00:41:58,550 --> 00:42:04,460
me more than greenfield projects it was

00:42:01,880 --> 00:42:06,290
frustrating at times but it really

00:42:04,460 --> 00:42:09,380
improved my skills in refactoring and

00:42:06,290 --> 00:42:11,960
and in clean code and so on and because

00:42:09,380 --> 00:42:14,570
you really learn what you don't want to

00:42:11,960 --> 00:42:16,550
do and this is also a lot of value if

00:42:14,570 --> 00:42:18,290
you want to improve so don't

00:42:16,550 --> 00:42:19,010
underestimate this if you get into such

00:42:18,290 --> 00:42:22,340
a project

00:42:19,010 --> 00:42:24,610
don't pay doubt right away maybe try and

00:42:22,340 --> 00:42:29,140
and and get advantage of it

00:42:24,610 --> 00:42:30,430
I want to recommend some books on this

00:42:29,140 --> 00:42:35,350
topic

00:42:30,430 --> 00:42:36,880
this is the the one on the left is the

00:42:35,350 --> 00:42:39,220
original refactoring book by Martin

00:42:36,880 --> 00:42:41,950
Fowler it's in written in Java it's from

00:42:39,220 --> 00:42:45,160
I think around 2000 there is now a

00:42:41,950 --> 00:42:48,810
second edition or so by Martin Fowler

00:42:45,160 --> 00:42:52,030
it is completely filled with examples

00:42:48,810 --> 00:42:59,200
only in JavaScript so it's maybe more

00:42:52,030 --> 00:43:01,240
up-to-date and the mikado method is a is

00:42:59,200 --> 00:43:02,650
a methodology hard to refactoring I

00:43:01,240 --> 00:43:06,040
don't want to get the details now

00:43:02,650 --> 00:43:08,020
because I don't have a time working

00:43:06,040 --> 00:43:11,020
effectively with legacy code my

00:43:08,020 --> 00:43:14,770
microphallus is a very old book but it

00:43:11,020 --> 00:43:17,040
has lots of very helpful tips

00:43:14,770 --> 00:43:19,420
reflecting on legacy code and

00:43:17,040 --> 00:43:21,970
refactoring so it's an excellent book I

00:43:19,420 --> 00:43:26,350
really recommend it and also clean code

00:43:21,970 --> 00:43:28,510
by Robert Martin this is where you want

00:43:26,350 --> 00:43:30,250
to end when you do refactoring you also

00:43:28,510 --> 00:43:34,330
want you always want to end with clean

00:43:30,250 --> 00:43:37,600
code also I have these books here sorry

00:43:34,330 --> 00:43:41,020
I'm going out of the camera if you're

00:43:37,600 --> 00:43:43,630
interested in these books you can look

00:43:41,020 --> 00:43:47,140
at them here maybe you'll find something

00:43:43,630 --> 00:43:53,020
that gives you value but I will take

00:43:47,140 --> 00:43:54,490
them home so yeah that's all thank you

00:43:53,020 --> 00:43:58,590
for listening

00:43:54,490 --> 00:43:58,590

YouTube URL: https://www.youtube.com/watch?v=z_BRsxrbz8w


