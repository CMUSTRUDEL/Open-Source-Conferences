Title: Commando Architecture - London Functionals - March 18
Publication date: 2018-03-19
Playlist: London Functionals
Description: 
	Ben Ford

"Commando Architecture, lessons from the Royal Marines on functional program design."
Captions: 
	00:00:00,030 --> 00:00:06,240
hi guys my name's Ben I came to software

00:00:04,350 --> 00:00:08,099
from a kind of a roundabout route I

00:00:06,240 --> 00:00:11,880
actually learn to program on board a

00:00:08,099 --> 00:00:15,210
warship in 2003 when I looked a bit more

00:00:11,880 --> 00:00:16,710
like that than I do now started with

00:00:15,210 --> 00:00:22,080
Python and then I got into Haskell

00:00:16,710 --> 00:00:25,140
probably about 2010 ish and now I'm all

00:00:22,080 --> 00:00:26,910
I'm working at Standard Chartered now a

00:00:25,140 --> 00:00:29,460
few of you in this room will have seen a

00:00:26,910 --> 00:00:31,399
talk that I gave that has the same front

00:00:29,460 --> 00:00:34,020
page I promise it's not the same talk

00:00:31,399 --> 00:00:35,610
one of the bits of feedback I got was

00:00:34,020 --> 00:00:37,160
that the talk covered a bit too much

00:00:35,610 --> 00:00:41,250
material so I'm going to drill down into

00:00:37,160 --> 00:00:42,270
the area of software architecture but

00:00:41,250 --> 00:00:44,610
I'm hardly going to talk about software

00:00:42,270 --> 00:00:51,329
architecture so let's see how this goes

00:00:44,610 --> 00:00:54,210
so not going well start off with I use

00:00:51,329 --> 00:00:57,180
these so first of all I'll give a quick

00:00:54,210 --> 00:00:58,590
sort of overview as to how I came to be

00:00:57,180 --> 00:01:02,969
talking about this kind of thing I think

00:00:58,590 --> 00:01:05,189
the the the combination and military

00:01:02,969 --> 00:01:07,439
experience and tech is not a very common

00:01:05,189 --> 00:01:08,909
one so I think there's some hopefully

00:01:07,439 --> 00:01:12,320
useful lessons to learn you can come and

00:01:08,909 --> 00:01:12,320
tell me afterwards if that's the case

00:01:12,770 --> 00:01:17,729
I'll come to that in a minute so this is

00:01:15,840 --> 00:01:18,990
a section of the talk is quite important

00:01:17,729 --> 00:01:21,509
then I will talk a little bit about

00:01:18,990 --> 00:01:23,729
architecture but not so much in a

00:01:21,509 --> 00:01:27,270
reading list of things that I've been

00:01:23,729 --> 00:01:29,579
looking at to to get to where I am with

00:01:27,270 --> 00:01:30,900
all these ideas and then we'll I'll try

00:01:29,579 --> 00:01:39,650
and leave as much time as I can for a

00:01:30,900 --> 00:01:42,150
Q&A so genesis of the talk will yeah so

00:01:39,650 --> 00:01:44,479
obviously as I said you know military

00:01:42,150 --> 00:01:48,869
experience and an IT not terribly common

00:01:44,479 --> 00:01:51,299
and I have worked for startups I've

00:01:48,869 --> 00:01:53,790
worked for big companies and I've had a

00:01:51,299 --> 00:01:57,869
few kind of not so great experiences

00:01:53,790 --> 00:02:00,360
working in tech in terms of you know

00:01:57,869 --> 00:02:01,770
working for failed projects or you know

00:02:00,360 --> 00:02:03,600
companies that had a bad culture all

00:02:01,770 --> 00:02:07,469
these kinds of things so you know a few

00:02:03,600 --> 00:02:09,119
years ago I started to get some Inklings

00:02:07,469 --> 00:02:10,920
that maybe I'd learn things in my

00:02:09,119 --> 00:02:13,890
previous life sort of a decade and a

00:02:10,920 --> 00:02:16,620
half ago that actually still apply so

00:02:13,890 --> 00:02:19,590
this is where the ideas of the talk kind

00:02:16,620 --> 00:02:21,930
of comes from and now I'm committing an

00:02:19,590 --> 00:02:23,730
absolutely cardinal sin here I'm an

00:02:21,930 --> 00:02:26,700
ex-marine and I'm about to talk about an

00:02:23,730 --> 00:02:27,959
Air Force guy now this you know it's

00:02:26,700 --> 00:02:28,730
being filmed as well so it could be in

00:02:27,959 --> 00:02:32,400
real trouble here

00:02:28,730 --> 00:02:35,459
so Colonel Boyd started life as a

00:02:32,400 --> 00:02:38,640
fighter pilot in in career in the 1950s

00:02:35,459 --> 00:02:41,760
and this guy has cut an absolute swath

00:02:38,640 --> 00:02:44,819
through military theory through business

00:02:41,760 --> 00:02:46,140
through you know he's had been hugely

00:02:44,819 --> 00:02:51,060
influential even though he only got two

00:02:46,140 --> 00:02:53,040
colonel and the reason for this is that

00:02:51,060 --> 00:02:55,400
he dives into some real kind of

00:02:53,040 --> 00:02:57,660
fundamentals that are applicable across

00:02:55,400 --> 00:02:59,100
multiple different domains and I'm gonna

00:02:57,660 --> 00:03:03,300
argue that they're quite applicable to

00:02:59,100 --> 00:03:04,650
software as well so can I just have a

00:03:03,300 --> 00:03:07,830
quick show of hands anyone who's heard

00:03:04,650 --> 00:03:13,190
of that other loop yeah everyone from

00:03:07,830 --> 00:03:15,930
Standard Chartered yeah we've heard so

00:03:13,190 --> 00:03:20,340
you dilute stands for observe orient

00:03:15,930 --> 00:03:21,360
decide act now I've come I put this as

00:03:20,340 --> 00:03:22,799
the first slide when I'm talking about

00:03:21,360 --> 00:03:24,750
boy but actually this is kind of the

00:03:22,799 --> 00:03:28,410
culmination of all of his work all of

00:03:24,750 --> 00:03:30,570
his kind of you know he's a voracious

00:03:28,410 --> 00:03:32,430
reader he's read up on you know long

00:03:30,570 --> 00:03:36,090
Clausewitz everyone in military history

00:03:32,430 --> 00:03:38,250
Musashi and this is his kind of his

00:03:36,090 --> 00:03:40,590
thing right it's their boy doodle-loop

00:03:38,250 --> 00:03:41,940
now it seems you know fairly simple it's

00:03:40,590 --> 00:03:42,980
just the basic feedback loop you know

00:03:41,940 --> 00:03:46,739
you see what's happening in the world

00:03:42,980 --> 00:03:49,470
you kind of relate that to the context

00:03:46,739 --> 00:03:50,700
of what you're in you decide what to do

00:03:49,470 --> 00:03:53,850
about it and then you carry out some

00:03:50,700 --> 00:03:55,680
sort of action however as with all

00:03:53,850 --> 00:03:56,970
things simple it's a little bit more

00:03:55,680 --> 00:03:59,340
complicated and boyd's

00:03:56,970 --> 00:04:02,010
so it's often it's often presented like

00:03:59,340 --> 00:04:03,840
this but Boyd's formulation in his in

00:04:02,010 --> 00:04:05,280
his actual writings which I'll come on

00:04:03,840 --> 00:04:08,340
to a little bit later he's a little bit

00:04:05,280 --> 00:04:10,470
more in-depth so this was on my previous

00:04:08,340 --> 00:04:14,670
talk so I promise I wasn't lying earlier

00:04:10,470 --> 00:04:16,650
this is not the same talk so in in

00:04:14,670 --> 00:04:19,169
Boyd's formulation actually the most

00:04:16,650 --> 00:04:21,800
important the most important part is

00:04:19,169 --> 00:04:26,320
this area here which is basically how

00:04:21,800 --> 00:04:29,260
how you integrate and

00:04:26,320 --> 00:04:31,990
how you integrate new knowledge and new

00:04:29,260 --> 00:04:35,550
information into how you kind of process

00:04:31,990 --> 00:04:38,650
the world and the aim of the aim of

00:04:35,550 --> 00:04:44,050
doing that in here is that once once you

00:04:38,650 --> 00:04:47,200
have this kind of broad kind of level of

00:04:44,050 --> 00:04:49,390
experience and and then all of the

00:04:47,200 --> 00:04:51,250
things that go go through this loop you

00:04:49,390 --> 00:04:53,940
can actually often bypass the decision

00:04:51,250 --> 00:04:56,380
point and go straight to intuition so

00:04:53,940 --> 00:04:57,610
I'm sure as an experienced software

00:04:56,380 --> 00:05:00,430
developer you've had the experience of

00:04:57,610 --> 00:05:02,830
looking at a piece of code and just

00:05:00,430 --> 00:05:04,600
feeling like don't like that I mean

00:05:02,830 --> 00:05:06,610
maybe it's something to do with you know

00:05:04,600 --> 00:05:08,530
when I was a Python developer you always

00:05:06,610 --> 00:05:10,450
used to see code that was like indenting

00:05:08,530 --> 00:05:11,350
so you guys are that way indenting like

00:05:10,450 --> 00:05:14,980
that and that would give you a bad

00:05:11,350 --> 00:05:16,870
feeling right well that's basically all

00:05:14,980 --> 00:05:19,270
of the time you spent going through this

00:05:16,870 --> 00:05:21,550
loop and refining your mental model in

00:05:19,270 --> 00:05:22,900
here gives you the ability to have some

00:05:21,550 --> 00:05:25,120
intuition about what you're seeing and

00:05:22,900 --> 00:05:27,790
you don't have to kind of make a weighty

00:05:25,120 --> 00:05:30,880
decision another example is that this is

00:05:27,790 --> 00:05:33,790
in the martial arts so I trained in

00:05:30,880 --> 00:05:36,310
Brazilian jiu-jitsu or have used to and

00:05:33,790 --> 00:05:39,100
you know when when you roll with

00:05:36,310 --> 00:05:40,750
somebody in Brazilian jiu-jitsu they

00:05:39,100 --> 00:05:42,550
skip this bit entirely when you're

00:05:40,750 --> 00:05:45,220
deciding where to put your arms and legs

00:05:42,550 --> 00:05:46,480
they already know and you know only

00:05:45,220 --> 00:05:48,910
takes a couple more loops around the

00:05:46,480 --> 00:05:52,450
round the loop and you're in some sort

00:05:48,910 --> 00:05:56,070
of inescapable chokehold

00:05:52,450 --> 00:05:58,930
so John Boyd's of seminal work is

00:05:56,070 --> 00:06:01,590
patterns of conflict which is a I think

00:05:58,930 --> 00:06:03,850
something like a three-hour briefing now

00:06:01,590 --> 00:06:05,760
Boyd used to travel around Washington

00:06:03,850 --> 00:06:08,260
giving this briefing to generals and

00:06:05,760 --> 00:06:09,550
government ministers and you know if

00:06:08,260 --> 00:06:11,230
these kinds of people can put aside

00:06:09,550 --> 00:06:13,300
three hours to listen to a colonel

00:06:11,230 --> 00:06:16,540
talking about stuff there's some there's

00:06:13,300 --> 00:06:19,030
some meat in there I believe it's

00:06:16,540 --> 00:06:21,520
available on YouTube the slides are

00:06:19,030 --> 00:06:23,140
available one of Boyd's things was he

00:06:21,520 --> 00:06:24,790
never really wrote much down so his body

00:06:23,140 --> 00:06:27,910
of kind of knowledge is passed on

00:06:24,790 --> 00:06:31,780
largely through sort of secondhand

00:06:27,910 --> 00:06:37,090
people that used to work with him so the

00:06:31,780 --> 00:06:39,580
kind of the driving kind of force behind

00:06:37,090 --> 00:06:41,560
this patterns of conflict is you know

00:06:39,580 --> 00:06:45,189
what do we want if we're you know

00:06:41,560 --> 00:06:48,400
running a company or weird you know

00:06:45,189 --> 00:06:50,199
having our own business or we want the

00:06:48,400 --> 00:06:53,169
freedom to be able to shape and adapt to

00:06:50,199 --> 00:06:56,169
changing circumstances so that we can

00:06:53,169 --> 00:06:59,139
survive on our own terms and improve our

00:06:56,169 --> 00:07:01,240
capacity for independent action I like

00:06:59,139 --> 00:07:03,009
that so that's that's something to aim

00:07:01,240 --> 00:07:07,409
for right it's you know if you're

00:07:03,009 --> 00:07:09,849
running a company if you're a startup

00:07:07,409 --> 00:07:11,800
you're you're looking to get to a point

00:07:09,849 --> 00:07:13,479
of profitability where you are surviving

00:07:11,800 --> 00:07:14,289
on your own terms and then you can

00:07:13,479 --> 00:07:18,789
choose where to go

00:07:14,289 --> 00:07:21,159
that's the one example so and the

00:07:18,789 --> 00:07:25,419
implication comes out of this huge slide

00:07:21,159 --> 00:07:27,819
deck is that these ideas of variety

00:07:25,419 --> 00:07:30,280
rapidity harmony initiative and the

00:07:27,819 --> 00:07:32,080
interaction between them are the key

00:07:30,280 --> 00:07:36,460
qualities that go into being able to

00:07:32,080 --> 00:07:38,590
reach your goal so when you look at

00:07:36,460 --> 00:07:39,909
these sort of four ideas you know

00:07:38,590 --> 00:07:44,110
variety and harmony and they're quite

00:07:39,909 --> 00:07:46,330
difficult to harmonize you know if you

00:07:44,110 --> 00:07:47,560
have you know harmony tend to think of

00:07:46,330 --> 00:07:52,029
harmony is something that's you know

00:07:47,560 --> 00:07:53,050
everything's very similar and variety is

00:07:52,029 --> 00:07:56,319
something that's sort of a bit chaotic

00:07:53,050 --> 00:08:00,120
so this is why the interaction between

00:07:56,319 --> 00:08:00,120
these ideas is quite important so

00:08:00,180 --> 00:08:05,319
another another avoid some papers is

00:08:03,400 --> 00:08:07,419
it's a tiny little paper it's seven

00:08:05,319 --> 00:08:14,710
pages long but it's absolutely

00:08:07,419 --> 00:08:15,550
brilliantly written so what we obviously

00:08:14,710 --> 00:08:19,589
trying to do when we're going through

00:08:15,550 --> 00:08:24,330
that other loop is we're developing our

00:08:19,589 --> 00:08:28,599
mental model of the world around us and

00:08:24,330 --> 00:08:30,849
we do that by taking taking in new

00:08:28,599 --> 00:08:33,579
observations compacting them all down

00:08:30,849 --> 00:08:34,870
and sort of generating new kind of

00:08:33,579 --> 00:08:36,880
representations of the world and

00:08:34,870 --> 00:08:39,070
likewise these new things are then

00:08:36,880 --> 00:08:41,469
broken down and and the cycle goes again

00:08:39,070 --> 00:08:46,300
and again and that's why the papers

00:08:41,469 --> 00:08:48,670
called destruction and creation and we

00:08:46,300 --> 00:08:51,360
really can't avoid challenging yourself

00:08:48,670 --> 00:08:51,360
you can't avoid

00:08:51,600 --> 00:08:55,030
challenging your ideas you can't avoid

00:08:53,680 --> 00:08:56,580
learning new things I mean nobody

00:08:55,030 --> 00:09:00,010
probably would be sitting in this room

00:08:56,580 --> 00:09:01,800
as a Haskell program and if they hadn't

00:09:00,010 --> 00:09:03,580
kind of I mean certainly for me

00:09:01,800 --> 00:09:05,260
Haskell wasn't my first programming

00:09:03,580 --> 00:09:06,640
language I'm guessing for most people

00:09:05,260 --> 00:09:09,640
know in this room it's not the case

00:09:06,640 --> 00:09:10,660
either and for me I came to ask because

00:09:09,640 --> 00:09:15,490
I thought it would make me a better

00:09:10,660 --> 00:09:17,140
program and teach me new things and you

00:09:15,490 --> 00:09:18,640
know to do so I had to break down some

00:09:17,140 --> 00:09:22,900
of the things that I thought I knew

00:09:18,640 --> 00:09:24,790
about programming as well so and then

00:09:22,900 --> 00:09:27,490
then there's this idea of you know

00:09:24,790 --> 00:09:29,830
harmony and variety you know you have to

00:09:27,490 --> 00:09:33,670
have a little bit of chaos in there you

00:09:29,830 --> 00:09:35,320
can't you can't be in a flat kind of

00:09:33,670 --> 00:09:36,790
neutral environment you have to have a

00:09:35,320 --> 00:09:37,840
little bit of chaos to kind of perturb

00:09:36,790 --> 00:09:39,880
it's like machine learning you know you

00:09:37,840 --> 00:09:41,830
need to you need to have a little bit of

00:09:39,880 --> 00:09:47,320
noise in there to be able to move around

00:09:41,830 --> 00:09:49,420
you're kind of problem space and you

00:09:47,320 --> 00:09:51,700
know this happens both internally and

00:09:49,420 --> 00:09:55,120
also in the external environment that

00:09:51,700 --> 00:09:57,190
you see changing so destruction and

00:09:55,120 --> 00:10:03,090
creation 7 pages long quite big type

00:09:57,190 --> 00:10:05,500
well worth a read so another kind of

00:10:03,090 --> 00:10:08,830
thing that I came across that I really

00:10:05,500 --> 00:10:10,780
liked there's a book by Robert cringe

00:10:08,830 --> 00:10:14,080
Lee called accidental empires about the

00:10:10,780 --> 00:10:15,750
rise of startups in Silicon Valley but

00:10:14,080 --> 00:10:18,160
the formulation I prefer obviously is

00:10:15,750 --> 00:10:23,470
its idea of commandos infantry and

00:10:18,160 --> 00:10:24,700
police so so you've got different sort

00:10:23,470 --> 00:10:27,310
of timescales of operation right

00:10:24,700 --> 00:10:30,730
commandos are the first people in the

00:10:27,310 --> 00:10:36,040
most uncertain environment the quickest

00:10:30,730 --> 00:10:39,340
change is most important missions most

00:10:36,040 --> 00:10:42,450
chaos damage is a surprise and less

00:10:39,340 --> 00:10:46,000
process alright and then you move and

00:10:42,450 --> 00:10:47,140
then you move into the second wave that

00:10:46,000 --> 00:10:49,570
comes in so this is you know you've

00:10:47,140 --> 00:10:50,890
you've you've perturbed your environment

00:10:49,570 --> 00:10:53,170
you've created a lot of chaos load of

00:10:50,890 --> 00:10:54,670
noise and then you need guys to come in

00:10:53,170 --> 00:10:55,810
and you know the guys that have done all

00:10:54,670 --> 00:10:59,800
that they're not really interested in

00:10:55,810 --> 00:11:02,620
kind of process and they want to go and

00:10:59,800 --> 00:11:03,850
do the next chaotic mission and blow

00:11:02,620 --> 00:11:05,530
stuff up

00:11:03,850 --> 00:11:06,370
so then you get the infantry who come in

00:11:05,530 --> 00:11:08,410
who and you know a little bit more

00:11:06,370 --> 00:11:10,840
established obviously still kind of very

00:11:08,410 --> 00:11:12,970
much on the sharp end but you know this

00:11:10,840 --> 00:11:14,470
would be your kind of you've got your

00:11:12,970 --> 00:11:16,960
MVP down if you're in a startup you've

00:11:14,470 --> 00:11:18,250
got your MVP done and now you actually

00:11:16,960 --> 00:11:21,550
need to you know systemize it

00:11:18,250 --> 00:11:23,140
productionize it package it and this is

00:11:21,550 --> 00:11:25,540
where you know you stopped process comes

00:11:23,140 --> 00:11:28,750
in and you need to start having systems

00:11:25,540 --> 00:11:30,910
in place and then following all that you

00:11:28,750 --> 00:11:32,650
move into an even slower kind of

00:11:30,910 --> 00:11:35,290
operational cycle so imagine is OODA

00:11:32,650 --> 00:11:37,980
loop going around you know these guys

00:11:35,290 --> 00:11:40,570
are very very quick very decentralized

00:11:37,980 --> 00:11:42,640
these guys a little bit less quick less

00:11:40,570 --> 00:11:44,020
decentralized more process and then

00:11:42,640 --> 00:11:45,880
you've got the bureaucracy that comes in

00:11:44,020 --> 00:11:51,010
which if anyone works in a big company

00:11:45,880 --> 00:11:54,790
will be very familiar with so this is

00:11:51,010 --> 00:11:57,970
about kind of consolidation and I would

00:11:54,790 --> 00:11:59,770
argue in this phase your ability to kind

00:11:57,970 --> 00:12:02,530
of generate chaos and therefore new

00:11:59,770 --> 00:12:05,500
ideas is mitigated slightly and and

00:12:02,530 --> 00:12:07,120
maybe tempered so that's the book I

00:12:05,500 --> 00:12:09,010
mentioned accidental Empire so I think

00:12:07,120 --> 00:12:11,860
face book got it wrong right like move

00:12:09,010 --> 00:12:14,080
fast and break things versus move fast

00:12:11,860 --> 00:12:16,000
on stable infrastructure actually you

00:12:14,080 --> 00:12:17,350
break things then you carry on moving

00:12:16,000 --> 00:12:20,230
fast and then you get to stable

00:12:17,350 --> 00:12:22,630
infrastructure so if I ever see Mark

00:12:20,230 --> 00:12:24,340
Holthe and I mentioned that to him and

00:12:22,630 --> 00:12:25,300
you know this is a very good if you

00:12:24,340 --> 00:12:26,620
can't be bothered to read the whole book

00:12:25,300 --> 00:12:29,350
and I actually haven't really hope

00:12:26,620 --> 00:12:32,850
hooking up must admit this is a quite a

00:12:29,350 --> 00:12:36,760
good overview of over the ideas there

00:12:32,850 --> 00:12:38,740
all right so architecture it says that

00:12:36,760 --> 00:12:41,350
says architecture right so anyone who's

00:12:38,740 --> 00:12:44,010
worked in a big company will be familiar

00:12:41,350 --> 00:12:46,420
with this view of software architecture

00:12:44,010 --> 00:12:48,370
what you do is you take a big pile of

00:12:46,420 --> 00:12:48,790
money you put it in the middle of the

00:12:48,370 --> 00:12:50,950
floor

00:12:48,790 --> 00:12:53,080
and then you burn it and then every

00:12:50,950 --> 00:12:54,430
couple of months when the kind of the

00:12:53,080 --> 00:12:56,290
cycle comes around and you need more

00:12:54,430 --> 00:12:58,240
funding you get more money and you throw

00:12:56,290 --> 00:13:02,920
it on the pile and then you just end up

00:12:58,240 --> 00:13:04,420
looking like that dude there and oh yes

00:13:02,920 --> 00:13:07,830
that's true yeah this is well I mean er

00:13:04,420 --> 00:13:10,960
some fairly large cracks in it you know

00:13:07,830 --> 00:13:14,040
so software architecture yeah not really

00:13:10,960 --> 00:13:17,650
that fond of this view of architecture

00:13:14,040 --> 00:13:19,270
so but you know important question

00:13:17,650 --> 00:13:20,410
right why do why do we bother with

00:13:19,270 --> 00:13:22,510
software architecture at all I remember

00:13:20,410 --> 00:13:25,000
when I was a sort of you know junior

00:13:22,510 --> 00:13:26,860
junior and development terms but maybe

00:13:25,000 --> 00:13:29,320
not quite junior in years because I

00:13:26,860 --> 00:13:32,410
started software quite late I went into

00:13:29,320 --> 00:13:34,270
a company and I don't really appreciate

00:13:32,410 --> 00:13:35,620
the need for you know why do we have to

00:13:34,270 --> 00:13:40,170
use this library versus that library why

00:13:35,620 --> 00:13:42,970
can't I just take whatever I want and I

00:13:40,170 --> 00:13:44,350
think the important question about why

00:13:42,970 --> 00:13:45,580
we bother with software architecture is

00:13:44,350 --> 00:13:47,710
because you know if you do achieve

00:13:45,580 --> 00:13:52,029
success you do have to go from that

00:13:47,710 --> 00:13:53,470
commando infantry police model right not

00:13:52,029 --> 00:13:55,360
everyone in your company will be in one

00:13:53,470 --> 00:13:56,980
box your whole company won't move from

00:13:55,360 --> 00:14:00,580
one box to another you know if you've

00:13:56,980 --> 00:14:02,980
got a stable bureaucracy strong and

00:14:00,580 --> 00:14:06,279
stable you'll still need people at the

00:14:02,980 --> 00:14:10,570
sharp end generating new ideas or if you

00:14:06,279 --> 00:14:13,600
don't you'll be in serious trouble so I

00:14:10,570 --> 00:14:15,070
think when you decide why you need to

00:14:13,600 --> 00:14:17,710
bother with software architecture you

00:14:15,070 --> 00:14:19,870
need to know what phase you're in and if

00:14:17,710 --> 00:14:21,100
your team if your multiple teams you

00:14:19,870 --> 00:14:24,790
might that answer might be different

00:14:21,100 --> 00:14:27,670
depending on which team you speak to so

00:14:24,790 --> 00:14:30,400
one of the one of my other interests

00:14:27,670 --> 00:14:33,370
besides trying to conflate military

00:14:30,400 --> 00:14:35,380
learning with with software is

00:14:33,370 --> 00:14:37,930
psychology so there's this concept

00:14:35,380 --> 00:14:41,860
called chunking not from Wikipedia from

00:14:37,930 --> 00:14:43,930
the field of cognitive psychology so

00:14:41,860 --> 00:14:45,310
this is where you you take individual

00:14:43,930 --> 00:14:47,320
knowledge you integrate it through your

00:14:45,310 --> 00:14:49,600
you know the orient bit and your you de

00:14:47,320 --> 00:14:53,709
loop and you were able to then compose

00:14:49,600 --> 00:14:55,450
things together right so an example from

00:14:53,709 --> 00:14:57,310
you know my earlier example of martial

00:14:55,450 --> 00:14:58,750
arts you know I'm still trying to put

00:14:57,310 --> 00:15:01,029
the basic building blocks of where my

00:14:58,750 --> 00:15:02,170
arms and legs go where is the guy who's

00:15:01,029 --> 00:15:03,940
better than me he's been doing it for a

00:15:02,170 --> 00:15:06,040
few years has integrated that into I'm

00:15:03,940 --> 00:15:07,660
gonna go and do this move and I'm trying

00:15:06,040 --> 00:15:09,640
to do all of those things at once and

00:15:07,660 --> 00:15:14,110
he's doing one thing at one time and

00:15:09,640 --> 00:15:18,100
it's all kind of chunk together and I

00:15:14,110 --> 00:15:19,360
think you know as Haskell errs I think

00:15:18,100 --> 00:15:21,040
that this is one of the things that

00:15:19,360 --> 00:15:23,440
really attracts people to ask oh you

00:15:21,040 --> 00:15:25,240
know people get the Haskell bug and I

00:15:23,440 --> 00:15:28,450
think it's because because of this this

00:15:25,240 --> 00:15:31,000
is an inherently pleasing process to go

00:15:28,450 --> 00:15:34,780
through so you know if you

00:15:31,000 --> 00:15:36,460
equate chunking to the kind of the type

00:15:34,780 --> 00:15:39,940
system hierarchy now for you looking at

00:15:36,460 --> 00:15:41,560
a functor you know if you've been doing

00:15:39,940 --> 00:15:42,820
haskell long enough you know what it can

00:15:41,560 --> 00:15:45,460
do you know what it's for

00:15:42,820 --> 00:15:47,800
you know the rough meaning behind it and

00:15:45,460 --> 00:15:49,540
you're able to kind of take that chunk

00:15:47,800 --> 00:15:51,190
and you're not then looking at the

00:15:49,540 --> 00:15:53,320
imperative code underneath it and to say

00:15:51,190 --> 00:15:56,980
what steps is its thing going to you're

00:15:53,320 --> 00:15:59,440
going from what's it doing to what is it

00:15:56,980 --> 00:16:03,160
and exactly this is from the same

00:15:59,440 --> 00:16:05,650
Wikipedia page so you're creating higher

00:16:03,160 --> 00:16:10,600
order cognitive representations right

00:16:05,650 --> 00:16:13,300
mental models and it's a paper from the

00:16:10,600 --> 00:16:14,890
60s I think I think this you know the

00:16:13,300 --> 00:16:16,390
idea that people have seven plus or

00:16:14,890 --> 00:16:18,670
minus two has been slightly do punk

00:16:16,390 --> 00:16:21,330
debunked now but the underlying theory

00:16:18,670 --> 00:16:24,430
that you know you want to be able to

00:16:21,330 --> 00:16:26,440
lump things together so that you can

00:16:24,430 --> 00:16:28,690
operate a higher kind of a mental level

00:16:26,440 --> 00:16:30,940
it's still a valid thing to take away

00:16:28,690 --> 00:16:32,970
from this and then mental mental

00:16:30,940 --> 00:16:35,400
representations are the kind of

00:16:32,970 --> 00:16:39,460
longer-term

00:16:35,400 --> 00:16:40,960
idea behind chunking so you know when

00:16:39,460 --> 00:16:42,970
you start something you've got this you

00:16:40,960 --> 00:16:44,200
know the four phases of competence were

00:16:42,970 --> 00:16:47,640
it's called you've got unconscious

00:16:44,200 --> 00:16:50,440
incompetence conscious incompetence

00:16:47,640 --> 00:16:51,850
conscious competence and unconscious

00:16:50,440 --> 00:16:53,710
competence so you go through this kind

00:16:51,850 --> 00:16:56,260
of process of not knowing what you don't

00:16:53,710 --> 00:16:57,880
know knowing I think there's a US

00:16:56,260 --> 00:16:59,680
Secretary of State that talked about

00:16:57,880 --> 00:17:03,220
this at some point

00:16:59,680 --> 00:17:05,770
and the way that we go from not knowing

00:17:03,220 --> 00:17:08,020
what we don't know to unconsciously just

00:17:05,770 --> 00:17:09,939
being able to do stuff is that we build

00:17:08,020 --> 00:17:13,420
our mental representations of what we're

00:17:09,939 --> 00:17:15,579
doing so you know in in Haskell

00:17:13,420 --> 00:17:18,310
obviously we we learn our basic kind of

00:17:15,579 --> 00:17:19,839
fundamentals we put those into practice

00:17:18,310 --> 00:17:21,430
and then we get some experience and then

00:17:19,839 --> 00:17:23,530
eventually we generate a bit of

00:17:21,430 --> 00:17:26,680
intuition like oh yeah I see this

00:17:23,530 --> 00:17:29,140
particular type of problem I might need

00:17:26,680 --> 00:17:36,340
this monad stack or I might use this MTL

00:17:29,140 --> 00:17:37,870
constraint and that idea of building up

00:17:36,340 --> 00:17:39,820
this experience so they have this kind

00:17:37,870 --> 00:17:42,340
of general base upon which to build

00:17:39,820 --> 00:17:43,570
intuition enables you to choose the

00:17:42,340 --> 00:17:44,590
right abstractions and I think we're

00:17:43,570 --> 00:17:46,929
very lucky as Haskell is

00:17:44,590 --> 00:17:49,150
because you know the right abstractions

00:17:46,929 --> 00:17:51,900
are mathematics and you know these are

00:17:49,150 --> 00:17:54,190
being rigorously studied and and and

00:17:51,900 --> 00:17:57,100
smacked around and you know we're

00:17:54,190 --> 00:17:58,360
building much closer to what the

00:17:57,100 --> 00:18:01,690
fundamentals are you know I think

00:17:58,360 --> 00:18:03,970
abstraction should be as deconstructed

00:18:01,690 --> 00:18:06,190
as possible so I would much rather think

00:18:03,970 --> 00:18:08,140
in terms of functors than say an

00:18:06,190 --> 00:18:09,940
observer pattern that you have to you

00:18:08,140 --> 00:18:11,200
know visually look through a whole line

00:18:09,940 --> 00:18:12,820
of a whole page of code before you

00:18:11,200 --> 00:18:15,100
figure out are I get what they're trying

00:18:12,820 --> 00:18:17,169
to do now right if you see this as a

00:18:15,100 --> 00:18:18,309
functor of a functor instance you know

00:18:17,169 --> 00:18:26,500
exactly what you're looking at

00:18:18,309 --> 00:18:29,049
straightaway so so this is where you

00:18:26,500 --> 00:18:31,480
know the destruction and creation paper

00:18:29,049 --> 00:18:34,179
kind of feeds back into kind of software

00:18:31,480 --> 00:18:36,970
architecture right you want to be able

00:18:34,179 --> 00:18:40,029
to do as much as you need to do to

00:18:36,970 --> 00:18:41,350
achieve success but you want to do that

00:18:40,029 --> 00:18:43,059
in a way that remains harmonious you

00:18:41,350 --> 00:18:44,470
want don't want to be achieving success

00:18:43,059 --> 00:18:46,809
on the short-term and creating loads of

00:18:44,470 --> 00:18:51,010
technical debt so you want to be able to

00:18:46,809 --> 00:18:53,679
apply the larger kind of chunks to what

00:18:51,010 --> 00:18:56,289
you end up with and then and that

00:18:53,679 --> 00:18:57,789
enables you to move quickly without

00:18:56,289 --> 00:19:00,220
breaking things or causing yourself

00:18:57,789 --> 00:19:02,730
problems that will make yourself not be

00:19:00,220 --> 00:19:05,919
able to move quickly in the future and

00:19:02,730 --> 00:19:10,120
so here we go this first bit of code

00:19:05,919 --> 00:19:12,480
this to me is the the core kind of

00:19:10,120 --> 00:19:14,559
abstraction that we all care about right

00:19:12,480 --> 00:19:17,890
when when you look at the odor loop

00:19:14,559 --> 00:19:19,960
right we have things happening we decide

00:19:17,890 --> 00:19:22,899
what to do with those things and from

00:19:19,960 --> 00:19:26,200
that we generate a new thing not

00:19:22,899 --> 00:19:28,600
knowledge or State in case of a left

00:19:26,200 --> 00:19:30,730
fold so everyone's familiar with you

00:19:28,600 --> 00:19:35,350
know left fold I mean you know pushes in

00:19:30,730 --> 00:19:37,539
a subscription API so you subscribe to

00:19:35,350 --> 00:19:39,250
new things you do something with them

00:19:37,539 --> 00:19:42,460
you know WebSocket I should have put

00:19:39,250 --> 00:19:43,690
pusher in there sorry well but this is

00:19:42,460 --> 00:19:47,730
you know this is a very very common

00:19:43,690 --> 00:19:51,730
pattern right you you can do this with

00:19:47,730 --> 00:19:52,780
you can apply this chunk to multiple

00:19:51,730 --> 00:19:55,960
different things that you see in the

00:19:52,780 --> 00:19:59,630
real world destruct

00:19:55,960 --> 00:20:00,890
you break down the old state and the

00:19:59,630 --> 00:20:06,790
event that comes in the new thing that

00:20:00,890 --> 00:20:09,710
you see and creation of a new state so

00:20:06,790 --> 00:20:13,130
you know I think odor is a hugely hugely

00:20:09,710 --> 00:20:16,850
applicable paradigm to think about it's

00:20:13,130 --> 00:20:18,710
you know it's simple its ever-present

00:20:16,850 --> 00:20:21,080
its fractal in that you know you have

00:20:18,710 --> 00:20:23,750
large-scale outer loops of a company say

00:20:21,080 --> 00:20:26,150
operating over months or years you have

00:20:23,750 --> 00:20:27,560
your very very low level development

00:20:26,150 --> 00:20:29,360
tool setup where you want quick feedback

00:20:27,560 --> 00:20:32,270
and you want your you know flightcheck

00:20:29,360 --> 00:20:33,710
warnings in your Emacs buffer yeah those

00:20:32,270 --> 00:20:38,260
are all other loops and they all compose

00:20:33,710 --> 00:20:40,940
and you know the smaller faster ones are

00:20:38,260 --> 00:20:42,320
all that sorry the longer slower ones

00:20:40,940 --> 00:20:47,600
are built upon multiple layers of

00:20:42,320 --> 00:20:53,770
smaller faster ones so events state fold

00:20:47,600 --> 00:20:57,290
commands so events obviously observation

00:20:53,770 --> 00:20:59,360
state is you're kind of all that giant

00:20:57,290 --> 00:21:00,590
load of stuff in the orientation bit

00:20:59,360 --> 00:21:04,910
this is your understanding of the world

00:21:00,590 --> 00:21:07,430
your context what you understand of the

00:21:04,910 --> 00:21:10,220
problem domain you're in and then

00:21:07,430 --> 00:21:12,410
obviously you decide what your new event

00:21:10,220 --> 00:21:14,360
comes in that comes in is that's your

00:21:12,410 --> 00:21:17,360
fold command you take your event and

00:21:14,360 --> 00:21:20,500
your old state and you generate a new

00:21:17,360 --> 00:21:22,580
state from it and then you act and in

00:21:20,500 --> 00:21:24,020
you know in a startup that I worked out

00:21:22,580 --> 00:21:26,420
before we actually called these commands

00:21:24,020 --> 00:21:27,920
so an intention to do something from the

00:21:26,420 --> 00:21:30,530
outside world in the web interface or

00:21:27,920 --> 00:21:34,820
something was a command the command

00:21:30,530 --> 00:21:38,030
comes in and and generates potentially

00:21:34,820 --> 00:21:40,010
many events and then that is then folded

00:21:38,030 --> 00:21:42,640
into the database and that's basically

00:21:40,010 --> 00:21:47,450
event sourcing event sourcing CQRS

00:21:42,640 --> 00:21:49,430
but and honestly I think unless I had

00:21:47,450 --> 00:21:52,100
some real constraint if I'm building

00:21:49,430 --> 00:21:54,580
anything nowadays I would usually go for

00:21:52,100 --> 00:21:57,620
a some kind of event sourcing idea

00:21:54,580 --> 00:22:01,220
because it enables you to ask the right

00:21:57,620 --> 00:22:02,510
questions so you you store your granular

00:22:01,220 --> 00:22:02,840
data you never kind of throw anything

00:22:02,510 --> 00:22:04,370
away

00:22:02,840 --> 00:22:06,440
you know if you're doing some sort of

00:22:04,370 --> 00:22:08,210
traditional web app where you have a

00:22:06,440 --> 00:22:09,470
lack of crud app and you know a post

00:22:08,210 --> 00:22:11,960
comes in from your

00:22:09,470 --> 00:22:14,269
Webbe thing and you do an update in the

00:22:11,960 --> 00:22:15,409
database well you basically thrown away

00:22:14,269 --> 00:22:17,210
a bit of information that you have the

00:22:15,409 --> 00:22:18,500
new state but you don't you don't have

00:22:17,210 --> 00:22:21,049
what happened you don't have the

00:22:18,500 --> 00:22:24,919
semantic kind of what did we do here

00:22:21,049 --> 00:22:26,090
what what was the occurrence and the

00:22:24,919 --> 00:22:27,529
other thing that event sourcing gives

00:22:26,090 --> 00:22:29,179
you is the ability to go back and answer

00:22:27,529 --> 00:22:31,460
different questions ask different

00:22:29,179 --> 00:22:32,960
questions of your data so you can go

00:22:31,460 --> 00:22:34,460
back and say right if I check if I

00:22:32,960 --> 00:22:35,750
change my folds given that this is what

00:22:34,460 --> 00:22:39,049
the concrete things that we've observed

00:22:35,750 --> 00:22:41,929
if I change my fold and my state what

00:22:39,049 --> 00:22:43,580
does the world look like now and it also

00:22:41,929 --> 00:22:45,350
gives you the ability to you know

00:22:43,580 --> 00:22:47,990
accounting systems are all essentially

00:22:45,350 --> 00:22:49,129
event sourcing things you know they they

00:22:47,990 --> 00:22:50,809
give you the ability you know what I

00:22:49,129 --> 00:22:52,070
work in a bank and one of the very

00:22:50,809 --> 00:22:54,470
important things that you have to do is

00:22:52,070 --> 00:22:58,159
to be able to say what's the view of the

00:22:54,470 --> 00:23:00,320
world as we see it now but also what's

00:22:58,159 --> 00:23:01,639
the view of the world before this event

00:23:00,320 --> 00:23:04,070
came in so we might have an event that

00:23:01,639 --> 00:23:05,600
comes in and so from a point of time a

00:23:04,070 --> 00:23:07,460
you might have an event that comes in

00:23:05,600 --> 00:23:09,860
and is relevant to a point in time

00:23:07,460 --> 00:23:11,929
before that but you need to know what

00:23:09,860 --> 00:23:14,210
does the world look like at time a or

00:23:11,929 --> 00:23:15,379
what does the world look like now when

00:23:14,210 --> 00:23:17,419
we understand that something else has

00:23:15,379 --> 00:23:21,049
happened so that's quite a useful

00:23:17,419 --> 00:23:24,080
superpower to have I mean and then in

00:23:21,049 --> 00:23:25,879
the front end you can use the same ideas

00:23:24,080 --> 00:23:28,220
for the the Elm architecture so you have

00:23:25,879 --> 00:23:29,840
events come in you have a pure function

00:23:28,220 --> 00:23:33,049
that updates your state and then your

00:23:29,840 --> 00:23:35,899
state is declaratively expressed into

00:23:33,049 --> 00:23:38,240
the HTML you know I personally prefer

00:23:35,899 --> 00:23:42,830
halogen and pure script but you know the

00:23:38,240 --> 00:23:46,220
idea is very similar so you know this is

00:23:42,830 --> 00:23:50,269
all the same as it's a fold it's the

00:23:46,220 --> 00:23:52,250
same as the cqs and an event sourcing

00:23:50,269 --> 00:23:54,110
idea on the backend and the best thing

00:23:52,250 --> 00:23:58,309
is you get to reuse your mental chunks

00:23:54,110 --> 00:23:59,809
in processing both of those things so

00:23:58,309 --> 00:24:02,750
you know it folds all the way down for

00:23:59,809 --> 00:24:03,799
me it's you know you you read any papers

00:24:02,750 --> 00:24:08,450
eventually you're going to come across

00:24:03,799 --> 00:24:11,090
all these kind of but all these terms F

00:24:08,450 --> 00:24:16,309
algebra is free man ads cattle morphisms

00:24:11,090 --> 00:24:18,649
highly morphisms interpreters semigroups

00:24:16,309 --> 00:24:21,080
mono its function composition these are

00:24:18,649 --> 00:24:22,299
all things where you're taking you're

00:24:21,080 --> 00:24:24,549
taking

00:24:22,299 --> 00:24:25,869
things that you in reasoning about

00:24:24,549 --> 00:24:27,279
individually you're smashing them

00:24:25,869 --> 00:24:30,099
together and then you're wanting to

00:24:27,279 --> 00:24:33,539
reason about them in the same way this

00:24:30,099 --> 00:24:38,499
special shout-out to metamorphism

00:24:33,539 --> 00:24:40,450
because metamorphism is like an animal

00:24:38,499 --> 00:24:42,519
no wrong way around a high/low morphism

00:24:40,450 --> 00:24:45,009
is an Animorph ism followed by a cattle

00:24:42,519 --> 00:24:46,479
morphism so you you generate something

00:24:45,009 --> 00:24:52,080
and then you contract it and then you

00:24:46,479 --> 00:24:57,609
and then you break it down used in I

00:24:52,080 --> 00:24:58,929
know where it's used I guess mmm como

00:24:57,609 --> 00:25:00,729
Nance maybe I'm sure I've seen a

00:24:58,929 --> 00:25:02,349
high/low morphism in the wild I've never

00:25:00,729 --> 00:25:03,159
seen a metamorphism in the wild so

00:25:02,349 --> 00:25:05,919
that's the other way around

00:25:03,159 --> 00:25:07,659
that's destruction and creation which I

00:25:05,919 --> 00:25:09,940
was talking about earlier so you have

00:25:07,659 --> 00:25:11,769
your cattle morphism and then you have

00:25:09,940 --> 00:25:14,769
your animal fizzing so you you break

00:25:11,769 --> 00:25:16,899
down a chunk of stuff and from that

00:25:14,769 --> 00:25:18,309
stuff is born something else which then

00:25:16,899 --> 00:25:22,499
probably goes on into another cycle of

00:25:18,309 --> 00:25:24,909
of being broken down and that's a

00:25:22,499 --> 00:25:26,919
funnily enough the only space I ever

00:25:24,909 --> 00:25:28,209
came across there so tonight I was

00:25:26,919 --> 00:25:29,799
reading destruction and creation and I

00:25:28,209 --> 00:25:31,059
thought sounds very much like a high

00:25:29,799 --> 00:25:33,729
limb orphism but the wrong way around

00:25:31,059 --> 00:25:34,959
and a metamorphism I don't think I've

00:25:33,729 --> 00:25:37,359
ever seen one in the wild but the one

00:25:34,959 --> 00:25:39,429
paper that I did find basically equates

00:25:37,359 --> 00:25:41,679
this to stream processing so that's

00:25:39,429 --> 00:25:43,570
basically what we do day by day when

00:25:41,679 --> 00:25:46,059
we're walking around we are a stream

00:25:43,570 --> 00:25:48,179
processor and this is the state it's not

00:25:46,059 --> 00:25:52,979
quite like that

00:25:48,179 --> 00:25:55,329
yeah fold L so yeah that's that's my

00:25:52,979 --> 00:25:57,609
learning from unfortunately not the raw

00:25:55,329 --> 00:26:00,309
Marines but mostly the airforce about

00:25:57,609 --> 00:26:04,839
software architecture it's all

00:26:00,309 --> 00:26:07,239
destruction and creation reading list

00:26:04,839 --> 00:26:08,109
Boyd's autobiography fantastic but

00:26:07,239 --> 00:26:09,639
really well-written

00:26:08,109 --> 00:26:12,759
Robert coram was one of his kind of

00:26:09,639 --> 00:26:14,349
acolytes very close associate of his so

00:26:12,759 --> 00:26:17,249
really understands the genesis of it

00:26:14,349 --> 00:26:20,729
Boyd as I said you know for somebody who

00:26:17,249 --> 00:26:25,299
basically wrote the book on military

00:26:20,729 --> 00:26:28,509
military kind of theory if you like you

00:26:25,299 --> 00:26:31,719
know he this guy is so revered that the

00:26:28,509 --> 00:26:35,139
US Marines actually had him help write

00:26:31,719 --> 00:26:36,040
their war fighting manual now as I said

00:26:35,139 --> 00:26:37,930
before

00:26:36,040 --> 00:26:40,420
right for a marine to even acknowledge

00:26:37,930 --> 00:26:44,020
the existence of an airforce weenie is

00:26:40,420 --> 00:26:46,030
something quite amazing so for somebody

00:26:44,020 --> 00:26:48,370
who had such a you know incredible

00:26:46,030 --> 00:26:51,100
output he didn't write much down

00:26:48,370 --> 00:26:54,310
patterns of patterns of conflict is

00:26:51,100 --> 00:26:56,560
slide deck destruction and creation is

00:26:54,310 --> 00:26:58,510
his little seven seven page long gem

00:26:56,560 --> 00:26:59,910
there are a few others dotted around but

00:26:58,510 --> 00:27:04,120
honestly I'd start with his

00:26:59,910 --> 00:27:05,500
autobiography to answer Pepe's question

00:27:04,120 --> 00:27:08,680
about why doesn't this work in big

00:27:05,500 --> 00:27:10,960
companies team of teams this is about

00:27:08,680 --> 00:27:15,520
the experience of general McChrystal in

00:27:10,960 --> 00:27:17,140
Iraq chronic combat al Qaeda if you want

00:27:15,520 --> 00:27:18,810
to understand about this kind of idea of

00:27:17,140 --> 00:27:21,640
mental models and this tree of kind of

00:27:18,810 --> 00:27:25,300
knowledge and and how that works Josh

00:27:21,640 --> 00:27:27,130
Waitzkin is a chess prodigy Brazilian

00:27:25,300 --> 00:27:31,120
jiu-jitsu blackbelt world kung-fu

00:27:27,130 --> 00:27:32,920
champion and has a very very good

00:27:31,120 --> 00:27:34,500
understanding of the kind of the meta

00:27:32,920 --> 00:27:37,210
stuff that goes on when you learn

00:27:34,500 --> 00:27:38,740
accidental empires you could skip that

00:27:37,210 --> 00:27:41,350
one to be honest go read the the blog

00:27:38,740 --> 00:27:42,520
post that I had earlier and then you

00:27:41,350 --> 00:27:43,900
know if you actually do want something

00:27:42,520 --> 00:27:45,460
about software and I apologize for

00:27:43,900 --> 00:27:47,200
talking about stuff that's not really

00:27:45,460 --> 00:27:48,550
about software building evolutionary

00:27:47,200 --> 00:27:51,250
architectures that is actually quite

00:27:48,550 --> 00:27:56,680
good by thought works and then a little

00:27:51,250 --> 00:27:58,240
shout-out to Graham Hall geezer X Row

00:27:56,680 --> 00:27:59,500
Marines intelligence officer he's

00:27:58,240 --> 00:28:01,150
written a very good book about how you

00:27:59,500 --> 00:28:03,130
build this kind of culture into

00:28:01,150 --> 00:28:06,160
companies about asking the right

00:28:03,130 --> 00:28:09,190
questions and enabling you will need a

00:28:06,160 --> 00:28:13,870
loop and unsticking things so yeah I

00:28:09,190 --> 00:28:18,940
think that's that's me done

00:28:13,870 --> 00:28:18,940

YouTube URL: https://www.youtube.com/watch?v=Mvg1j-lbpyY


