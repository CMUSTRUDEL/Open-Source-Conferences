Title: stackconf online 2020 | The Path to OpenSource DBaaS with Kubernetes by Peter Zaitsev
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	DBaaS is the fastest growing way to deploy databases. It is fast and convenient and it helps to reduce toil a lot, yet it is typically done using proprietary software and tightly coupled to the cloud vendor. We believe Kubernetes finally allows us to build fully OpenSource DBaaS Solution capable to be deployed anywhere Kubernetes runs â€“ on the Public Cloud or in your private data center.
In this presentation, we will describe the most important user requirements and typical problems you would encounter building DBaaS Solution and explain how you can solve them using Kubernetes Operator framework.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:16,550
[Music]

00:00:13,240 --> 00:00:19,250
hello hello my dear listeners

00:00:16,550 --> 00:00:21,730
welcome to stat conf we are going to

00:00:19,250 --> 00:00:25,360
talk about a path to open source

00:00:21,730 --> 00:00:30,890
database as a service with kubernetes

00:00:25,360 --> 00:00:33,440
today and I'm not sure what age you are

00:00:30,890 --> 00:00:36,700
and how long have you been using your

00:00:33,440 --> 00:00:40,000
open source but myself I started using

00:00:36,700 --> 00:00:45,680
open source quite a little while ago in

00:00:40,000 --> 00:00:49,240
in the late late 90s and in those early

00:00:45,680 --> 00:00:54,250
days using an open source software was

00:00:49,240 --> 00:00:57,800
quite different it requires a lot more

00:00:54,250 --> 00:01:01,640
skill perhaps at very least a lot more

00:00:57,800 --> 00:01:03,860
friction so at that time I remember we

00:01:01,640 --> 00:01:06,880
would have to download the sources in

00:01:03,860 --> 00:01:09,200
many cases run some patches to make that

00:01:06,880 --> 00:01:11,960
comparative particle your flavor of

00:01:09,200 --> 00:01:16,460
operating systems and your compiler and

00:01:11,960 --> 00:01:18,969
then compile compile software right

00:01:16,460 --> 00:01:21,229
because before you can use that and

00:01:18,969 --> 00:01:26,359
gradually things have been getting

00:01:21,229 --> 00:01:29,840
better for years right we got Targa gzip

00:01:26,359 --> 00:01:32,030
binaries and install scripts to avoid a

00:01:29,840 --> 00:01:34,759
lot of that manual compilation and

00:01:32,030 --> 00:01:37,279
installations when we go to Debian and

00:01:34,759 --> 00:01:40,399
RPM packages when you can get packages

00:01:37,279 --> 00:01:44,020
with dependencies so hopefully you would

00:01:40,399 --> 00:01:48,889
not only have a program but also their

00:01:44,020 --> 00:01:52,909
matching version of libraries it needs

00:01:48,889 --> 00:01:58,240
and then it evolved in the package

00:01:52,909 --> 00:02:03,889
repositories and now we have tools like

00:01:58,240 --> 00:02:06,859
docker which can help us oh snap which

00:02:03,889 --> 00:02:11,360
can help us to run the applications

00:02:06,859 --> 00:02:13,910
either even more seamlessly so what you

00:02:11,360 --> 00:02:17,629
can see here as a trend is what we are

00:02:13,910 --> 00:02:19,590
getting things easier and easier to

00:02:17,629 --> 00:02:23,069
really reduce

00:02:19,590 --> 00:02:26,700
barrier of entry right now we can have

00:02:23,069 --> 00:02:29,310
more and more developers are able to use

00:02:26,700 --> 00:02:31,830
the open source software but if I think

00:02:29,310 --> 00:02:34,739
is comes a very also interesting trend

00:02:31,830 --> 00:02:37,830
where are my jerky all for developers

00:02:34,739 --> 00:02:42,030
probably would not be able to build from

00:02:37,830 --> 00:02:46,200
scratch all the tools they really use in

00:02:42,030 --> 00:02:48,959
their everyday everyday life I know I am

00:02:46,200 --> 00:02:51,720
perhaps one of them at least I am NOT

00:02:48,959 --> 00:02:54,569
looking forward building some Linux

00:02:51,720 --> 00:02:58,650
distribution from scratch or browsers

00:02:54,569 --> 00:03:01,680
and some other complicated stuff so this

00:02:58,650 --> 00:03:03,799
is obviously a good thing because it

00:03:01,680 --> 00:03:07,410
really allows us to use a lot more

00:03:03,799 --> 00:03:10,829
complicated software and which is also

00:03:07,410 --> 00:03:15,420
more valuable which allows us to do a

00:03:10,829 --> 00:03:18,590
lot more things faster and then that

00:03:15,420 --> 00:03:21,629
also means what a lot more people can be

00:03:18,590 --> 00:03:25,950
open-source developers even those for

00:03:21,629 --> 00:03:30,600
whom it their open source of late 90s or

00:03:25,950 --> 00:03:33,359
early years would be too complicated to

00:03:30,600 --> 00:03:39,120
stomach now I think the face though we

00:03:33,359 --> 00:03:42,480
also get the dark side at least when it

00:03:39,120 --> 00:03:45,049
comes to the open source angle oh thanks

00:03:42,480 --> 00:03:47,700
what you can see is if in next

00:03:45,049 --> 00:03:50,930
simplification we can really see their

00:03:47,700 --> 00:03:54,329
vendor lock-in in the cloud comes in

00:03:50,930 --> 00:03:57,299
right so what you would if you're really

00:03:54,329 --> 00:03:59,630
looking at your easiest way to deploy

00:03:57,299 --> 00:04:03,060
the open source and compatible software

00:03:59,630 --> 00:04:06,919
you are likely to do it in the cloud and

00:04:03,060 --> 00:04:11,510
then you would be using the proprietary

00:04:06,919 --> 00:04:14,310
api to do that let me provide an example

00:04:11,510 --> 00:04:16,739
specifically as it comes to the

00:04:14,310 --> 00:04:19,019
databases if you're looking at running a

00:04:16,739 --> 00:04:22,349
database in the cloud such as MySQL

00:04:19,019 --> 00:04:27,060
posters and others you have essentially

00:04:22,349 --> 00:04:29,490
two approaches you can either roll your

00:04:27,060 --> 00:04:32,129
own using commodity building blocks like

00:04:29,490 --> 00:04:34,979
a storage compute

00:04:32,129 --> 00:04:37,050
network services and hours or you can

00:04:34,979 --> 00:04:40,349
use databases service functionality

00:04:37,050 --> 00:04:44,399
right such as Amazon RDS we will cloud

00:04:40,349 --> 00:04:46,769
SQL and so on of course right and of

00:04:44,399 --> 00:04:49,879
course the using database as a service

00:04:46,769 --> 00:04:54,809
is something which is much much easier

00:04:49,879 --> 00:04:59,029
but also that introduces a substantial

00:04:54,809 --> 00:05:02,219
level of logon database as a service is

00:04:59,029 --> 00:05:06,749
fantastic it has a lot of benefits which

00:05:02,219 --> 00:05:10,979
is often described as removal of fat oil

00:05:06,749 --> 00:05:13,080
right or a repetitive I needed boring

00:05:10,979 --> 00:05:15,629
work which does not really provide a

00:05:13,080 --> 00:05:19,439
value to your organization to your

00:05:15,629 --> 00:05:25,559
business right and with database as a

00:05:19,439 --> 00:05:27,839
service those benefits could be one such

00:05:25,559 --> 00:05:30,869
as managing you have ability without you

00:05:27,839 --> 00:05:33,989
need to take care of that way database

00:05:30,869 --> 00:05:35,579
patching right or touching the operating

00:05:33,989 --> 00:05:38,789
system to make sure you're not running

00:05:35,579 --> 00:05:41,789
something of security holes in it doing

00:05:38,789 --> 00:05:44,789
backups some basic performance Union and

00:05:41,789 --> 00:05:47,490
also providing your ability to scale

00:05:44,789 --> 00:05:49,519
rather easily right in many cases if

00:05:47,490 --> 00:05:54,899
database as a service you can

00:05:49,519 --> 00:05:58,019
essentially scale hmm if if a couple of

00:05:54,899 --> 00:06:04,679
clicks as long as you have your gold

00:05:58,019 --> 00:06:06,959
credit card on file now in a most of the

00:06:04,679 --> 00:06:09,179
cloud vendors right and I use Amazon

00:06:06,959 --> 00:06:11,669
here as example but really other cloud

00:06:09,179 --> 00:06:14,129
vendors are kind of food pursuing a

00:06:11,669 --> 00:06:16,499
similar strategy you would often see

00:06:14,129 --> 00:06:20,899
with two kinds of database as a server

00:06:16,499 --> 00:06:24,059
one is you're playing good open-source

00:06:20,899 --> 00:06:26,729
product which essentially is wrapped in

00:06:24,059 --> 00:06:30,719
the management back-end so for example

00:06:26,729 --> 00:06:32,399
Amazon RDS MySQL or Amazon RDS posters

00:06:30,719 --> 00:06:36,929
were not really differentiated

00:06:32,399 --> 00:06:40,249
substantially from those open source

00:06:36,929 --> 00:06:42,769
versions the only difference is the

00:06:40,249 --> 00:06:46,519
a management interface right simplicity

00:06:42,769 --> 00:06:48,799
to do the backups spin it up turn it

00:06:46,519 --> 00:06:52,039
down right setting up replication and so

00:06:48,799 --> 00:06:55,669
on and so forth then very is on so and

00:06:52,039 --> 00:06:58,939
hence solution which is Amazon Aurora in

00:06:55,669 --> 00:07:01,369
Amazon case which is really eight

00:06:58,939 --> 00:07:03,859
enhanced version of that open-source

00:07:01,369 --> 00:07:07,729
database if additional features but it

00:07:03,859 --> 00:07:10,909
is also proprietary right so it's better

00:07:07,729 --> 00:07:14,719
cold not open source but rather open

00:07:10,909 --> 00:07:18,769
source compatible now it's good to point

00:07:14,719 --> 00:07:23,179
out of both of them really reduce data

00:07:18,769 --> 00:07:25,699
and so application portability right so

00:07:23,179 --> 00:07:28,369
it is not really trivial to move from

00:07:25,699 --> 00:07:31,489
Amazon RDS to Google Cloud SQL because

00:07:28,369 --> 00:07:33,409
you interfaces the API if you're

00:07:31,489 --> 00:07:36,259
programming to them right and even some

00:07:33,409 --> 00:07:39,499
features are going to be different but

00:07:36,259 --> 00:07:42,469
it is much harder if you are really

00:07:39,499 --> 00:07:45,939
using all Amazon Aurora features because

00:07:42,469 --> 00:07:48,319
it has a lot of additional features or

00:07:45,939 --> 00:07:51,699
properties such as better performance

00:07:48,319 --> 00:07:58,039
compared to what you can get if you were

00:07:51,699 --> 00:08:04,099
standard MySQL so a thinking or I would

00:07:58,039 --> 00:08:07,819
say our desire in this case would be to

00:08:04,099 --> 00:08:10,099
get the public cloud database as a

00:08:07,819 --> 00:08:13,039
service simplicity so really you can get

00:08:10,099 --> 00:08:16,099
the database which can run itself which

00:08:13,039 --> 00:08:18,439
doesn't require a lot of you know hard

00:08:16,099 --> 00:08:21,019
work to do but really have it as a

00:08:18,439 --> 00:08:23,239
hundred percent open source solution

00:08:21,019 --> 00:08:26,419
right could we get something like that

00:08:23,239 --> 00:08:29,719
well in here I have some bad news for

00:08:26,419 --> 00:08:32,839
you and those bad news is what we are

00:08:29,719 --> 00:08:35,990
not really there yet right I'm not aware

00:08:32,839 --> 00:08:38,269
of the open source solutions when it

00:08:35,990 --> 00:08:40,519
comes to open source databases

00:08:38,269 --> 00:08:42,949
popular open source database at least

00:08:40,519 --> 00:08:46,579
which would be really give you the same

00:08:42,949 --> 00:08:51,889
amount of of flexibility inconvenience

00:08:46,579 --> 00:08:53,130
the good news though is over last few

00:08:51,889 --> 00:08:55,530
years

00:08:53,130 --> 00:09:00,990
this technology which came to a feature

00:08:55,530 --> 00:09:03,300
it's called the navicular ninjas what is

00:09:00,990 --> 00:09:06,090
it cabinet is on a high level and of

00:09:03,300 --> 00:09:09,360
course you probably know that already

00:09:06,090 --> 00:09:11,940
but for those few of you who may not let

00:09:09,360 --> 00:09:13,470
me go in a couple of more details you

00:09:11,940 --> 00:09:16,980
can think about the kubernetes

00:09:13,470 --> 00:09:21,420
as an operating system similar to to

00:09:16,980 --> 00:09:24,120
Linux but for cluster or set of computer

00:09:21,420 --> 00:09:26,790
nose rather than individual hosts and

00:09:24,120 --> 00:09:28,770
this is very important right because if

00:09:26,790 --> 00:09:33,660
especially when it comes to the

00:09:28,770 --> 00:09:35,160
databases because while installing if

00:09:33,660 --> 00:09:38,250
you are dealing with a small database

00:09:35,160 --> 00:09:40,680
and you do not need a high viability you

00:09:38,250 --> 00:09:41,100
typically can apply that on the single

00:09:40,680 --> 00:09:43,440
host

00:09:41,100 --> 00:09:45,660
however if you need high viability if

00:09:43,440 --> 00:09:48,330
you need to scale then you need to

00:09:45,660 --> 00:09:50,730
deploy the database on a different on a

00:09:48,330 --> 00:09:53,250
number of hosts and in a very particular

00:09:50,730 --> 00:09:55,800
way so those hosts really talk to each

00:09:53,250 --> 00:09:58,230
other and coordinate on the work you do

00:09:55,800 --> 00:10:00,210
right and not just being you know

00:09:58,230 --> 00:10:04,010
separate hosts which do not really know

00:10:00,210 --> 00:10:06,780
about right and this is very very good

00:10:04,010 --> 00:10:08,910
cluster focused so data center focused

00:10:06,780 --> 00:10:12,630
at the rating system becomes very

00:10:08,910 --> 00:10:14,940
important and kubernetes is obviously a

00:10:12,630 --> 00:10:16,470
Sagittarian system and having what is

00:10:14,940 --> 00:10:19,830
important about kubernetes

00:10:16,470 --> 00:10:22,710
is it has a lot of a lot of momentum

00:10:19,830 --> 00:10:24,630
right now and which is a very important

00:10:22,710 --> 00:10:27,870
for success of open source technology

00:10:24,630 --> 00:10:31,320
and also it is universally supported by

00:10:27,870 --> 00:10:37,140
public private and hybrid cloud right so

00:10:31,320 --> 00:10:39,420
here are some of examples you would very

00:10:37,140 --> 00:10:43,980
confined kubernetes you can see it's

00:10:39,420 --> 00:10:49,680
found on the top popular of major clouds

00:10:43,980 --> 00:10:53,160
Amazon Google Microsoft Azure it also is

00:10:49,680 --> 00:10:58,110
available on the alternative clouds such

00:10:53,160 --> 00:11:00,330
as the Lea node and also if you are Ryan

00:10:58,110 --> 00:11:03,720
I want to run solution on-premises very

00:11:00,330 --> 00:11:05,950
is actually tens of different community

00:11:03,720 --> 00:11:09,640
distributions available for you there

00:11:05,950 --> 00:11:13,060
I mentioned here openshift from Red Hat

00:11:09,640 --> 00:11:15,100
or now from IBM as well as a pivotal

00:11:13,060 --> 00:11:20,200
container service which is something

00:11:15,100 --> 00:11:23,620
from VMware ecosystem now one problem

00:11:20,200 --> 00:11:27,300
with kubernetes is what that was

00:11:23,620 --> 00:11:31,360
initially designed for applications

00:11:27,300 --> 00:11:33,580
which I designed as stateless and the

00:11:31,360 --> 00:11:38,350
state should have been maintained

00:11:33,580 --> 00:11:43,630
somewhere outside of kubernetes itself

00:11:38,350 --> 00:11:46,120
right and here is the retreat which is

00:11:43,630 --> 00:11:50,170
actually what's just slightly over a

00:11:46,120 --> 00:11:54,310
year ago ever from the KC Hightower who

00:11:50,170 --> 00:11:57,250
is one of the champions of kubernetes

00:11:54,310 --> 00:12:02,160
ecosystem which is talking about the

00:11:57,250 --> 00:12:06,220
kubernetes and caution about writing

00:12:02,160 --> 00:12:09,700
running the stateful application in in

00:12:06,220 --> 00:12:14,040
the kubernetes right and database is a

00:12:09,700 --> 00:12:17,320
quintessential queen a quintessential

00:12:14,040 --> 00:12:19,270
stateful application because all what

00:12:17,320 --> 00:12:23,620
database is in a high-level is

00:12:19,270 --> 00:12:26,790
maintaining and and changing the shared

00:12:23,620 --> 00:12:30,430
state or for your application right or a

00:12:26,790 --> 00:12:35,470
variety of applications right so there

00:12:30,430 --> 00:12:37,930
is such my point of view and indeed what

00:12:35,470 --> 00:12:39,910
that means is the stateful applications

00:12:37,930 --> 00:12:43,240
and databases as a part of that are

00:12:39,910 --> 00:12:47,320
relatively early have very relatively

00:12:43,240 --> 00:12:50,920
early days in kubernetes ecosystem even

00:12:47,320 --> 00:12:52,990
though over the last few years there

00:12:50,920 --> 00:12:56,230
have been very important features

00:12:52,990 --> 00:13:00,730
attitude kubernetes which allows us to

00:12:56,230 --> 00:13:03,400
build such stateful applications one of

00:13:00,730 --> 00:13:06,040
them is a stateful set as as a names

00:13:03,400 --> 00:13:10,950
says that is a functionality which

00:13:06,040 --> 00:13:14,550
really allows us to have a stateful

00:13:10,950 --> 00:13:17,780
objects such as a database which are

00:13:14,550 --> 00:13:22,400
managed appropriately right

00:13:17,780 --> 00:13:25,580
in in the sets which you can think about

00:13:22,400 --> 00:13:29,570
like as a cluster the second one is

00:13:25,580 --> 00:13:32,630
persistent volumes the volumes reach em

00:13:29,570 --> 00:13:35,990
which are no tree which have a life

00:13:32,630 --> 00:13:39,760
outside of of containers in which you

00:13:35,990 --> 00:13:43,550
can sort of connect and disconnect

00:13:39,760 --> 00:13:45,890
separately right and then the last one

00:13:43,550 --> 00:13:48,500
to mention is a operator framework

00:13:45,890 --> 00:13:52,220
usually allowed to provide the unified

00:13:48,500 --> 00:13:54,170
interface about how those stateful set

00:13:52,220 --> 00:13:57,290
persistent volumes and so on and so

00:13:54,170 --> 00:13:59,180
forth can be orchestrated because if you

00:13:57,290 --> 00:14:03,320
think about the databases the

00:13:59,180 --> 00:14:04,970
orchestration is very important so for

00:14:03,320 --> 00:14:08,240
example if you need to upgrade the

00:14:04,970 --> 00:14:10,730
database you can adjust deploy the new

00:14:08,240 --> 00:14:13,190
code right on the cluster on open all at

00:14:10,730 --> 00:14:15,680
the same time that will most likely call

00:14:13,190 --> 00:14:18,700
the downtime or other effects right you

00:14:15,680 --> 00:14:22,160
probably would have some very particular

00:14:18,700 --> 00:14:24,140
process going on like you may take the

00:14:22,160 --> 00:14:26,800
backup of a snapshot of a cluster in

00:14:24,140 --> 00:14:30,440
case something goes wrong then you would

00:14:26,800 --> 00:14:32,630
gradually replace one one node after

00:14:30,440 --> 00:14:37,339
another in a role invasion if in new

00:14:32,630 --> 00:14:40,070
code right - to ensure the database

00:14:37,339 --> 00:14:43,040
stays up well while it's being upgraded

00:14:40,070 --> 00:14:44,870
and the operator framework is something

00:14:43,040 --> 00:14:49,460
which is allows you to build an

00:14:44,870 --> 00:14:52,040
application to orchestrate that now the

00:14:49,460 --> 00:14:54,140
kubernetes success and kubernetes feed

00:14:52,040 --> 00:15:00,260
to run the state of application can be

00:14:54,140 --> 00:15:03,260
actually seen through number of number

00:15:00,260 --> 00:15:05,900
of public database as a service being

00:15:03,260 --> 00:15:08,330
built using kubernetes right I know

00:15:05,900 --> 00:15:11,080
actually more than they always but these

00:15:08,330 --> 00:15:16,430
are which spoke about using kubernetes

00:15:11,080 --> 00:15:19,640
in in public for example cockroach DB in

00:15:16,430 --> 00:15:21,710
Fox TV cloud planet scale all of them

00:15:19,640 --> 00:15:26,360
have a public database as a service

00:15:21,710 --> 00:15:29,420
which is built using using kubernetes

00:15:26,360 --> 00:15:31,460
which means kubernetes is actually

00:15:29,420 --> 00:15:36,649
getting good enough to

00:15:31,460 --> 00:15:41,350
database workload at scale okay well

00:15:36,649 --> 00:15:45,740
this is all Virginia realities now what

00:15:41,350 --> 00:15:49,490
do we as the corner are doing to advance

00:15:45,740 --> 00:15:52,250
the state of a databases of open-source

00:15:49,490 --> 00:15:57,140
databases 50 communities we actually

00:15:52,250 --> 00:16:00,740
released two kubernetes operators one is

00:15:57,140 --> 00:16:04,130
for the corner extra DB cluster which is

00:16:00,740 --> 00:16:08,649
basically highly available MySQL variant

00:16:04,130 --> 00:16:12,500
and then also for the corner server for

00:16:08,649 --> 00:16:15,500
MongoDB right Babu film allows you to

00:16:12,500 --> 00:16:19,850
really get the open source or source

00:16:15,500 --> 00:16:24,820
available right to be to be correct in

00:16:19,850 --> 00:16:28,279
the case of MongoDB database on any

00:16:24,820 --> 00:16:33,010
kubernetes solution out there and the

00:16:28,279 --> 00:16:36,410
face I will focus on the corner x-ray DB

00:16:33,010 --> 00:16:37,660
cluster with some more details and with

00:16:36,410 --> 00:16:41,270
my demo

00:16:37,660 --> 00:16:45,650
what is percona X 3 DB cluster well this

00:16:41,270 --> 00:16:49,400
is a pure corner open source product

00:16:45,650 --> 00:16:51,620
which is now quite mature it has been

00:16:49,400 --> 00:16:55,400
out I don't know maybe like for what

00:16:51,620 --> 00:16:57,860
seven years well truly it's more it has

00:16:55,400 --> 00:17:00,410
been how it for longer than how could

00:16:57,860 --> 00:17:03,309
the nineties itself it is MySQL

00:17:00,410 --> 00:17:07,010
compatible but at the same time it is

00:17:03,309 --> 00:17:09,500
offers the cluster a very strong semi

00:17:07,010 --> 00:17:11,870
cinders replication and advance at hive

00:17:09,500 --> 00:17:16,130
ability right so it's really fantastic

00:17:11,870 --> 00:17:18,230
to use in the communities where for use

00:17:16,130 --> 00:17:23,780
case when you want to have at high

00:17:18,230 --> 00:17:27,620
viability it's open source and you also

00:17:23,780 --> 00:17:29,360
can deploy the single node of the conex

00:17:27,620 --> 00:17:32,150
will be cluster when you essentially

00:17:29,360 --> 00:17:35,300
skip all that replication and plastering

00:17:32,150 --> 00:17:37,730
and then it really behaves as a hundred

00:17:35,300 --> 00:17:43,580
cam percent compatible with MySQL with

00:17:37,730 --> 00:17:44,960
no differences at all now if you look at

00:17:43,580 --> 00:17:47,840
the Copernicus I think it

00:17:44,960 --> 00:17:52,279
worth to note there are a couple of

00:17:47,840 --> 00:17:54,679
different users of of kubernetes right

00:17:52,279 --> 00:17:58,340
then you would think from shipping the

00:17:54,679 --> 00:18:00,529
database as a service right at least we

00:17:58,340 --> 00:18:04,370
are thinking about those down those ways

00:18:00,529 --> 00:18:08,690
one is it is where people who have a

00:18:04,370 --> 00:18:11,799
familiar with kubernetes or experts with

00:18:08,690 --> 00:18:14,779
kubernetes and they can really use our

00:18:11,799 --> 00:18:17,960
kubernetes operators directly right and

00:18:14,779 --> 00:18:21,830
they can get a lot of advanced features

00:18:17,960 --> 00:18:26,149
in this case there are also other users

00:18:21,830 --> 00:18:27,380
who do not mind running kubernetes on

00:18:26,149 --> 00:18:29,330
the back end

00:18:27,380 --> 00:18:31,039
especially if that's a managed give the

00:18:29,330 --> 00:18:34,190
ranges in the public cloud right or

00:18:31,039 --> 00:18:36,500
maybe people notice in their enterprise

00:18:34,190 --> 00:18:39,080
which somebody else manage as long as we

00:18:36,500 --> 00:18:42,110
can get the database which is much

00:18:39,080 --> 00:18:47,120
easier to use so a first kind of users

00:18:42,110 --> 00:18:50,090
will appear on the Copernicus operators

00:18:47,120 --> 00:18:52,940
directly and for second kind of users we

00:18:50,090 --> 00:18:55,880
have built the tool which we called the

00:18:52,940 --> 00:18:59,179
corner database as a service CLI which

00:18:55,880 --> 00:19:02,330
is experimental solution for those who

00:18:59,179 --> 00:19:04,899
wants to get open source database we

00:19:02,330 --> 00:19:08,710
found really having that very deep

00:19:04,899 --> 00:19:11,720
kubernetes not understanding right and

00:19:08,710 --> 00:19:14,419
how much understanding that really

00:19:11,720 --> 00:19:17,179
requires you will probably see from the

00:19:14,419 --> 00:19:21,820
next few slides when I am going to show

00:19:17,179 --> 00:19:25,940
you a little demo so let's walk through

00:19:21,820 --> 00:19:28,850
the demo I am going to show you how to

00:19:25,940 --> 00:19:33,770
run the database as a service on the

00:19:28,850 --> 00:19:35,330
google kubernetes engine which is very

00:19:33,770 --> 00:19:38,299
good I would call that the most feature

00:19:35,330 --> 00:19:41,809
full kubernetes implementation among the

00:19:38,299 --> 00:19:45,260
major clouds it's available in many

00:19:41,809 --> 00:19:50,539
location and it has very easy to use

00:19:45,260 --> 00:19:52,039
command line tool SDK which is very

00:19:50,539 --> 00:19:55,370
convenient to use if your corner

00:19:52,039 --> 00:19:58,700
database as a service CLI so if you want

00:19:55,370 --> 00:20:00,620
to use very solution

00:19:58,700 --> 00:20:03,590
you would need those three components

00:20:00,620 --> 00:20:06,560
right you will need cube CTL that is a

00:20:03,590 --> 00:20:08,830
tool which you comment line to which you

00:20:06,560 --> 00:20:14,240
which is standard and which you use for

00:20:08,830 --> 00:20:17,710
interacting with with kubernetes in many

00:20:14,240 --> 00:20:20,480
many cases you would also need the your

00:20:17,710 --> 00:20:23,390
G Cloud SDK

00:20:20,480 --> 00:20:24,410
that's your command line tool and you

00:20:23,390 --> 00:20:28,190
need to appear corner

00:20:24,410 --> 00:20:33,310
database-as-a-service CLI how do you

00:20:28,190 --> 00:20:36,260
install those installing cube CTL is

00:20:33,310 --> 00:20:41,120
pretty pretty easy you know just use

00:20:36,260 --> 00:20:43,910
standard comments right as I show here

00:20:41,120 --> 00:20:47,120
and in all the fellows installation

00:20:43,910 --> 00:20:51,500
slides I am going to show you some of

00:20:47,120 --> 00:20:55,280
the summary as an image but really when

00:20:51,500 --> 00:20:57,200
you are going to drive at yourself full

00:20:55,280 --> 00:20:59,840
of a link which is also included in the

00:20:57,200 --> 00:21:04,220
slides and which has the current and

00:20:59,840 --> 00:21:06,110
easy to copy paste in instructions if

00:21:04,220 --> 00:21:10,490
you look at the install in Google SDK

00:21:06,110 --> 00:21:13,010
again that is the same way which is a

00:21:10,490 --> 00:21:15,710
pretty pretty simple few standard

00:21:13,010 --> 00:21:17,840
comments to add repositories and then

00:21:15,710 --> 00:21:21,530
install the packages I am fooling the

00:21:17,840 --> 00:21:23,840
same pack same pattern even though some

00:21:21,530 --> 00:21:26,090
of those packages are also available for

00:21:23,840 --> 00:21:29,500
the snap or Canon deal that for services

00:21:26,090 --> 00:21:34,550
right and so on and so forth and finally

00:21:29,500 --> 00:21:40,030
the corner database-as-a-service CLI

00:21:34,550 --> 00:21:43,100
that is available from frontier corner

00:21:40,030 --> 00:21:47,570
repository again I want to point out

00:21:43,100 --> 00:21:53,210
what this is experimental tool for for

00:21:47,570 --> 00:21:55,600
now so it is really evolving very very

00:21:53,210 --> 00:22:00,770
rapidly in those instructions may change

00:21:55,600 --> 00:22:02,480
ok after you install all of those tools

00:22:00,770 --> 00:22:06,500
right and assuming you have a google

00:22:02,480 --> 00:22:09,080
cloud account you will need to connect

00:22:06,500 --> 00:22:10,429
to that Google Cloud oxygen makes it

00:22:09,080 --> 00:22:13,070
very easily and

00:22:10,429 --> 00:22:16,249
conveniently you can use magic g-cloud

00:22:13,070 --> 00:22:19,669
are flocking to to connect that will

00:22:16,249 --> 00:22:22,549
send you to the browser where you can

00:22:19,669 --> 00:22:27,909
login into Google account right and then

00:22:22,549 --> 00:22:32,450
you can set the project right which is

00:22:27,909 --> 00:22:34,820
well how Google talks about different

00:22:32,450 --> 00:22:38,049
environments that we can be working with

00:22:34,820 --> 00:22:41,749
and for each project it will give you

00:22:38,049 --> 00:22:44,149
the product code right so it would not

00:22:41,749 --> 00:22:46,759
be just my project which may be the name

00:22:44,149 --> 00:22:50,659
it will give you some funky name like I

00:22:46,759 --> 00:22:52,610
go to hide and brace something right the

00:22:50,659 --> 00:22:55,450
next comment you know what we are doing

00:22:52,610 --> 00:22:58,460
here is you can actually create that

00:22:55,450 --> 00:23:02,350
containing a cluster and in this case we

00:22:58,460 --> 00:23:04,999
are creating the kubernetes cluster in

00:23:02,350 --> 00:23:07,399
in the US central time zone we've given

00:23:04,999 --> 00:23:10,549
cluster manager and because that is

00:23:07,399 --> 00:23:12,259
going to be very small test we just need

00:23:10,549 --> 00:23:15,320
the three nodes right the free knowledge

00:23:12,259 --> 00:23:20,360
which is minimum needed minimum right

00:23:15,320 --> 00:23:25,960
that is a comment number three the next

00:23:20,360 --> 00:23:28,940
one would be to create what's known the

00:23:25,960 --> 00:23:32,059
cluster by a binding that essentially

00:23:28,940 --> 00:23:35,149
gives your user what they are using here

00:23:32,059 --> 00:23:39,519
if kept CTL the access what you will be

00:23:35,149 --> 00:23:43,190
needed to deploy the operator and then

00:23:39,519 --> 00:23:45,470
additionally to having a Google Google

00:23:43,190 --> 00:23:48,259
cloud project within each okay the next

00:23:45,470 --> 00:23:51,169
cluster creates we need to create kind

00:23:48,259 --> 00:23:54,820
of a project called native space within

00:23:51,169 --> 00:23:57,289
that Copernicus cluster right so we are

00:23:54,820 --> 00:23:59,869
saying what we are creating the name

00:23:57,289 --> 00:24:03,230
space my name space and then second that

00:23:59,869 --> 00:24:07,460
name space as default right so pretty

00:24:03,230 --> 00:24:09,590
much you know a few comments how you set

00:24:07,460 --> 00:24:13,039
it up and this is something which we

00:24:09,590 --> 00:24:16,059
would expect the administrator to do not

00:24:13,039 --> 00:24:19,399
the end user do it all the time right

00:24:16,059 --> 00:24:21,919
then if you have after you have set it

00:24:19,399 --> 00:24:23,010
up then create in a database as a server

00:24:21,919 --> 00:24:25,500
will be as

00:24:23,010 --> 00:24:28,890
simple as this right / : database a

00:24:25,500 --> 00:24:34,320
service my spell create DV example their

00:24:28,890 --> 00:24:38,490
example is your is it is your database

00:24:34,320 --> 00:24:41,580
or like a cluster name when a database

00:24:38,490 --> 00:24:44,160
is created by default for security

00:24:41,580 --> 00:24:46,530
purposes it's going to be the database

00:24:44,160 --> 00:24:49,200
which is only visible inside that

00:24:46,530 --> 00:24:52,290
kubernetes cluster if no direct IP map

00:24:49,200 --> 00:24:54,810
map to that and if you want to access a

00:24:52,290 --> 00:24:57,930
map externally you can use this tool to

00:24:54,810 --> 00:25:00,110
start keep CTL port forward right and

00:24:57,930 --> 00:25:04,250
then you can connect from a localhost

00:25:00,110 --> 00:25:07,950
with your favorite client if MySQL or

00:25:04,250 --> 00:25:12,270
whatever it is now if you actually want

00:25:07,950 --> 00:25:13,350
to expose the database you can do that

00:25:12,270 --> 00:25:16,170
as well

00:25:13,350 --> 00:25:19,410
right you would need to in this case

00:25:16,170 --> 00:25:22,440
pass what is seen as a pretty you know

00:25:19,410 --> 00:25:26,640
advanced option where you would specify

00:25:22,440 --> 00:25:29,160
the proxy school service time load

00:25:26,640 --> 00:25:31,950
balancer and that will expose

00:25:29,160 --> 00:25:34,050
essentially resource endpoint of a

00:25:31,950 --> 00:25:38,870
certain IP and then you can can make

00:25:34,050 --> 00:25:42,960
connect to that directly instead of

00:25:38,870 --> 00:25:46,110
instead of specifying the instead of

00:25:42,960 --> 00:25:49,140
doing the port mapping or anything like

00:25:46,110 --> 00:25:57,360
that now the next thing you may want to

00:25:49,140 --> 00:26:00,660
consider is to how to create databases

00:25:57,360 --> 00:26:05,070
specific password by default we decided

00:26:00,660 --> 00:26:09,150
to generate random password for you and

00:26:05,070 --> 00:26:12,180
show it in the output because that is

00:26:09,150 --> 00:26:14,490
more secure but in many tests and

00:26:12,180 --> 00:26:17,190
scripting environment you may want to

00:26:14,490 --> 00:26:23,850
specify your own password instead which

00:26:17,190 --> 00:26:28,380
you can you can do do here finally I

00:26:23,850 --> 00:26:33,000
should point out what those first view

00:26:28,380 --> 00:26:36,860
of comments they create the cluster with

00:26:33,000 --> 00:26:40,050
a free nodes that is a highly available

00:26:36,860 --> 00:26:45,240
cluster in a in a kubernetes right which

00:26:40,050 --> 00:26:47,940
will survive a single node failure and

00:26:45,240 --> 00:26:51,960
and so on and so forth but not obviously

00:26:47,940 --> 00:26:55,350
means what you are using the free pods

00:26:51,960 --> 00:26:57,270
for for that cluster if you are just

00:26:55,350 --> 00:27:00,000
looking for something for development

00:26:57,270 --> 00:27:04,560
let's say hey I want like a simple

00:27:00,000 --> 00:27:07,800
scratch database then you can you can

00:27:04,560 --> 00:27:10,440
use this common that specified right

00:27:07,800 --> 00:27:11,850
here which will instead of getting a

00:27:10,440 --> 00:27:16,320
cluster of three nodes you'll just

00:27:11,850 --> 00:27:19,100
deploy one node of a database for you

00:27:16,320 --> 00:27:24,300
and and that's it

00:27:19,100 --> 00:27:27,210
okay so what you can see in this case is

00:27:24,300 --> 00:27:29,850
what with database-as-a-service CLI you

00:27:27,210 --> 00:27:32,790
get database as a service like

00:27:29,850 --> 00:27:37,170
experience with kubernetes obviously

00:27:32,790 --> 00:27:39,150
it's not a fancy goo yet but it is much

00:27:37,170 --> 00:27:43,110
easier especially for a cluster

00:27:39,150 --> 00:27:46,470
deployment compared to doing all that

00:27:43,110 --> 00:27:49,740
stuff manually on even on the set of a

00:27:46,470 --> 00:27:53,030
Linux boxes and we are really working to

00:27:49,740 --> 00:27:56,550
bring more features and continue to

00:27:53,030 --> 00:27:59,490
extend the usability so we will get more

00:27:56,550 --> 00:28:03,240
of that database as a server flavor

00:27:59,490 --> 00:28:06,750
experience in the cloud and I would very

00:28:03,240 --> 00:28:10,920
much encourage you to give it a try

00:28:06,750 --> 00:28:14,520
provide us your feedback and even

00:28:10,920 --> 00:28:18,600
participate in development this is open

00:28:14,520 --> 00:28:21,140
source project and your folks code is

00:28:18,600 --> 00:28:24,390
even more welcome than your feedback

00:28:21,140 --> 00:28:28,190
with that I would be happy to take your

00:28:24,390 --> 00:28:28,190
questions and thank you

00:28:31,930 --> 00:28:48,420

YouTube URL: https://www.youtube.com/watch?v=azXadw8obV4


