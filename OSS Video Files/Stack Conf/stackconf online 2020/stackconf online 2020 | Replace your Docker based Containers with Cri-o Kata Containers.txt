Title: stackconf online 2020 | Replace your Docker based Containers with Cri-o Kata Containers
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	...by Michel Schildmeijer

They provide the workload isolation and security advantages of VMs. but at the same time maintain the speed of deployment and usability of containers.by using kata containers, instead of namespace, small virtual machines are created on the kernel and be strongly isolated. The technology of Kata Containers is based on KVM hypervisor. That’s why the level of isolation is equivalent to typical hypervisors. This session will focus on a live production phase when choosing kata instead of docker, and why they are preferable
Although containers provides software-level isolation of resources, the kernel needs to be shared. That’s why the isolation level in terms of security is not so high when compared with hypervisors.This learns to shift from Docker as the de facto standard to Kata containers and learn how to obtain higherl level of security

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:14,630
[Music]

00:00:11,620 --> 00:00:17,720
hi everyone this is Michelle silt Maya

00:00:14,630 --> 00:00:20,119
from the Netherlands and I'm presenting

00:00:17,720 --> 00:00:22,750
for you replace docker based containers

00:00:20,119 --> 00:00:26,029
with cryo cotta for better security I

00:00:22,750 --> 00:00:29,090
hope you enjoy my session and if you

00:00:26,029 --> 00:00:31,220
have questions I bet SATCOM will give

00:00:29,090 --> 00:00:34,120
you the facilities to ask questions I

00:00:31,220 --> 00:00:37,070
know this is a bit of a weird situation

00:00:34,120 --> 00:00:38,120
me presenting here from home but I hope

00:00:37,070 --> 00:00:42,170
you'll enjoy it

00:00:38,120 --> 00:00:44,269
and let's start so first a little bit

00:00:42,170 --> 00:00:46,489
about myself to introduce myself where

00:00:44,269 --> 00:00:48,739
my background is well I said I already

00:00:46,489 --> 00:00:54,070
said I'm from Amsterdam the Netherlands

00:00:48,739 --> 00:00:57,050
actually a small town near to Amsterdam

00:00:54,070 --> 00:00:59,469
and I'm a so-called leak technologist

00:00:57,050 --> 00:01:03,140
working at quality and quality's a

00:00:59,469 --> 00:01:05,960
consultancy company near to the hake and

00:01:03,140 --> 00:01:07,640
we do a lot of technologies we are an

00:01:05,960 --> 00:01:11,510
Oracle partner and we're doing data

00:01:07,640 --> 00:01:14,570
science for Java development house and

00:01:11,510 --> 00:01:17,420
we do managed operations for several

00:01:14,570 --> 00:01:23,480
customers so for myself

00:01:17,420 --> 00:01:27,410
I started doing IT with in 1994 starting

00:01:23,480 --> 00:01:32,020
with the basic UNIX where a platform was

00:01:27,410 --> 00:01:34,610
at that time I tried to support in the

00:01:32,020 --> 00:01:37,280
pharmacy where I worked at the moment

00:01:34,610 --> 00:01:40,520
and I'd make my switch my IT career

00:01:37,280 --> 00:01:42,530
switch in 2000 starting with be a

00:01:40,520 --> 00:01:47,810
middleware technologies application

00:01:42,530 --> 00:01:51,440
server web logic for instance and tuxedo

00:01:47,810 --> 00:01:55,460
and also of course our ho databases UNIX

00:01:51,440 --> 00:01:57,260
file UNIX operating systems so yeah I

00:01:55,460 --> 00:02:02,570
have a broad knowledge of all these

00:01:57,260 --> 00:02:06,530
systems 30 years and well the last years

00:02:02,570 --> 00:02:10,459
I also try to focus more on cloud native

00:02:06,530 --> 00:02:12,590
container native landscaping helping

00:02:10,459 --> 00:02:17,629
customers in developing a strategy for

00:02:12,590 --> 00:02:21,990
their future I key computer landscape

00:02:17,629 --> 00:02:25,620
and along with that also work

00:02:21,990 --> 00:02:28,950
methods like DevOps agile working comes

00:02:25,620 --> 00:02:32,480
along with it and those are all subjects

00:02:28,950 --> 00:02:36,830
you take with you but my focus first is

00:02:32,480 --> 00:02:43,860
technical on the container native

00:02:36,830 --> 00:02:45,810
technology side so here is a list of

00:02:43,860 --> 00:02:49,530
topics which I try to cover in this

00:02:45,810 --> 00:02:53,010
session some of them more deeply and

00:02:49,530 --> 00:02:55,740
some of them more an overview so

00:02:53,010 --> 00:03:01,560
containers and trends the runtimes of

00:02:55,740 --> 00:03:04,620
containers some container security but

00:03:01,560 --> 00:03:08,130
also integration with it orchestration

00:03:04,620 --> 00:03:10,710
tools like kubernetes and I will give a

00:03:08,130 --> 00:03:13,830
short demo about how cata containers

00:03:10,710 --> 00:03:16,530
work and try to emphasize a bit on the

00:03:13,830 --> 00:03:21,060
runtime and alternative tools for

00:03:16,530 --> 00:03:28,740
building and running your containers in

00:03:21,060 --> 00:03:32,340
a cutter container landscape so if you

00:03:28,740 --> 00:03:34,620
look at container trends while since the

00:03:32,340 --> 00:03:37,230
rise of cloud DevOps and micro servers

00:03:34,620 --> 00:03:39,540
and a lot of new technology trends also

00:03:37,230 --> 00:03:41,760
infrastructure has made a major

00:03:39,540 --> 00:03:45,090
transition in how to build provisioning

00:03:41,760 --> 00:03:47,580
operate your your infrastructure and

00:03:45,090 --> 00:03:50,190
your computer landscape and there's

00:03:47,580 --> 00:03:53,640
always in need of 24/7 high demands of

00:03:50,190 --> 00:03:57,080
new and better functionality release

00:03:53,640 --> 00:04:01,320
cycles has to go on more frequently and

00:03:57,080 --> 00:04:04,950
these have all impact on how you design

00:04:01,320 --> 00:04:09,210
your application / infrastructure

00:04:04,950 --> 00:04:11,940
landscape so traditional of an existing

00:04:09,210 --> 00:04:14,040
infrastructure is can be real tough to

00:04:11,940 --> 00:04:15,990
container-based and it's something which

00:04:14,040 --> 00:04:18,660
has to land and involve within an

00:04:15,990 --> 00:04:22,380
organization which is simply not an easy

00:04:18,660 --> 00:04:26,220
tasks and it usually starts somewhere at

00:04:22,380 --> 00:04:28,260
a development Club which thinks docker

00:04:26,220 --> 00:04:32,040
containers are easy to manage and to

00:04:28,260 --> 00:04:35,280
work with and from that on it starts

00:04:32,040 --> 00:04:38,669
more and more to become mature and

00:04:35,280 --> 00:04:42,960
evolved into from old stages to

00:04:38,669 --> 00:04:45,240
production eventually but you have to

00:04:42,960 --> 00:04:48,319
think of all the benefits with a new way

00:04:45,240 --> 00:04:54,060
of working and also keep in mind that

00:04:48,319 --> 00:04:56,909
not only functionality and more higher

00:04:54,060 --> 00:04:59,460
higher release cycles higher demanding

00:04:56,909 --> 00:05:01,740
of new features are important but also

00:04:59,460 --> 00:05:05,009
be aware of your security because

00:05:01,740 --> 00:05:07,039
security is one of the top priorities in

00:05:05,009 --> 00:05:10,530
a container native landscape and

00:05:07,039 --> 00:05:12,960
security is always a thing which I put

00:05:10,530 --> 00:05:16,650
it on one my slide but it's always a

00:05:12,960 --> 00:05:20,250
topic which comes well somewhere behind

00:05:16,650 --> 00:05:22,530
whenever everyone is always already gone

00:05:20,250 --> 00:05:27,840
projects already gone and then you need

00:05:22,530 --> 00:05:29,580
to consider about security so in my top

00:05:27,840 --> 00:05:32,370
trends of container negative landscape I

00:05:29,580 --> 00:05:35,849
put on security at first to think about

00:05:32,370 --> 00:05:39,229
how you design your container native

00:05:35,849 --> 00:05:43,050
landscape and all those others are also

00:05:39,229 --> 00:05:45,300
tremely important but for now I

00:05:43,050 --> 00:05:48,380
emphasize more on the security in

00:05:45,300 --> 00:05:48,380
government governance

00:05:51,900 --> 00:06:00,180
and so to come back to this statistics

00:05:55,660 --> 00:06:04,920
you can see in my screen Gartner

00:06:00,180 --> 00:06:07,870
calculated in 2019 that and that moment

00:06:04,920 --> 00:06:12,880
containers application containers which

00:06:07,870 --> 00:06:16,330
were in production for less than 30% so

00:06:12,880 --> 00:06:18,130
that's even the majority I know a lot of

00:06:16,330 --> 00:06:20,740
companies and a lot of culprits and

00:06:18,130 --> 00:06:24,640
enterprises still have their legacy

00:06:20,740 --> 00:06:26,560
running usually running on-premise and

00:06:24,640 --> 00:06:31,510
if they go to cloud then usually it's

00:06:26,560 --> 00:06:34,860
more like a an is transition first and I

00:06:31,510 --> 00:06:37,990
haven't seen that much application

00:06:34,860 --> 00:06:42,330
landscapes already moving to the cloud

00:06:37,990 --> 00:06:45,910
but when you look at 2022 gartner

00:06:42,330 --> 00:06:49,720
predicts that it will be more than 75%

00:06:45,910 --> 00:06:50,920
of the container landscape or of the

00:06:49,720 --> 00:06:53,430
infrastructure landscape will be

00:06:50,920 --> 00:06:56,230
container nave so a container based

00:06:53,430 --> 00:07:05,710
application landscape so it means

00:06:56,230 --> 00:07:07,900
security is a priority top one okay

00:07:05,710 --> 00:07:11,500
continue technology what's it's all

00:07:07,900 --> 00:07:15,610
about okay there are a lot of buzzwords

00:07:11,500 --> 00:07:18,810
these days especially when you look at

00:07:15,610 --> 00:07:25,020
container technology clouds enablement

00:07:18,810 --> 00:07:30,070
so cognitive applications serverless

00:07:25,020 --> 00:07:31,600
functions micro services low code a lot

00:07:30,070 --> 00:07:34,240
of buzzwords but what do they all mean

00:07:31,600 --> 00:07:39,220
it's it's really it can be confusing for

00:07:34,240 --> 00:07:41,830
for people maybe you're already totally

00:07:39,220 --> 00:07:44,290
into a container technology so this

00:07:41,830 --> 00:07:47,710
light won't bring you any new for the

00:07:44,290 --> 00:07:49,810
people who are pretty new to it I will

00:07:47,710 --> 00:07:53,220
try to explain the differences between

00:07:49,810 --> 00:07:57,250
all these different approaches of

00:07:53,220 --> 00:08:00,400
serving infrastructure so when you look

00:07:57,250 --> 00:08:02,530
at infrastructure and then you have you

00:08:00,400 --> 00:08:04,639
can divide it in three major things

00:08:02,530 --> 00:08:06,439
first of all you have

00:08:04,639 --> 00:08:11,750
bare-metal server and your bare-metal

00:08:06,439 --> 00:08:13,789
server is just a physical server or farm

00:08:11,750 --> 00:08:18,250
of physical servers in a data center and

00:08:13,789 --> 00:08:22,129
they all run their own operating system

00:08:18,250 --> 00:08:24,259
specific for their for that host for

00:08:22,129 --> 00:08:27,379
that server and they have their own

00:08:24,259 --> 00:08:30,409
operating system and you can solve your

00:08:27,379 --> 00:08:32,450
application on it all software of your

00:08:30,409 --> 00:08:34,849
vendor can run the database or a set of

00:08:32,450 --> 00:08:38,390
databases or an application server on it

00:08:34,849 --> 00:08:40,729
but that's just it it's dedicated for

00:08:38,390 --> 00:08:47,089
that part for that application

00:08:40,729 --> 00:08:54,200
no no sharing between in between of

00:08:47,089 --> 00:08:57,860
resources so around mm and 90s from the

00:08:54,200 --> 00:09:00,560
previous century the concept of virtual

00:08:57,860 --> 00:09:02,600
machine was introduced and a virtual

00:09:00,560 --> 00:09:05,450
machine is actually a vert alized

00:09:02,600 --> 00:09:07,190
hardware system within with its own

00:09:05,450 --> 00:09:10,279
operating system and this operating

00:09:07,190 --> 00:09:12,829
system can be on top of what's running

00:09:10,279 --> 00:09:15,110
on the bare metal server and it's

00:09:12,829 --> 00:09:17,380
completely isolated so you don't know in

00:09:15,110 --> 00:09:22,220
your routine that you are running on a

00:09:17,380 --> 00:09:25,730
guest host and you can run as many

00:09:22,220 --> 00:09:29,089
virtual machine on this on this server

00:09:25,730 --> 00:09:31,160
as you wish it only depends on how many

00:09:29,089 --> 00:09:34,880
resources you have on your bare metal

00:09:31,160 --> 00:09:39,880
server if you have enough memory CPU and

00:09:34,880 --> 00:09:45,170
storage then you can run unlimited

00:09:39,880 --> 00:09:47,120
servers on it virtual machines so these

00:09:45,170 --> 00:09:50,000
virtual machines share some resources

00:09:47,120 --> 00:09:52,610
from the initial bare metal server so

00:09:50,000 --> 00:09:54,980
they get a piece of CPU look at a piece

00:09:52,610 --> 00:09:58,820
of stores they get a piece of networking

00:09:54,980 --> 00:10:01,699
assigned which comes from the hardware

00:09:58,820 --> 00:10:04,820
server but there's completely strictly

00:10:01,699 --> 00:10:08,720
isolated from each other so that's a

00:10:04,820 --> 00:10:13,430
concept of virtual machine now some

00:10:08,720 --> 00:10:16,279
later at the end of 2009 10 another

00:10:13,430 --> 00:10:17,580
initiative came up which was called

00:10:16,279 --> 00:10:21,200
containers

00:10:17,580 --> 00:10:23,430
containers are actually a small set of

00:10:21,200 --> 00:10:27,450
configurable unit and the small set of

00:10:23,430 --> 00:10:29,010
services and applications a difference

00:10:27,450 --> 00:10:32,270
and an inverter machine where your

00:10:29,010 --> 00:10:36,510
applications are just installed in a

00:10:32,270 --> 00:10:40,950
virtual server and for a container it's

00:10:36,510 --> 00:10:45,630
it's just a small subset specific for a

00:10:40,950 --> 00:10:48,330
small application so no overhead all

00:10:45,630 --> 00:10:52,380
kinds of unnecessary software can be

00:10:48,330 --> 00:10:55,040
removed so containers can be very light

00:10:52,380 --> 00:10:57,990
weighted if you do it in the right way

00:10:55,040 --> 00:11:01,830
they share the operating system kernel

00:10:57,990 --> 00:11:04,680
so you can install a layer on top of

00:11:01,830 --> 00:11:09,930
your operating system which translates

00:11:04,680 --> 00:11:12,600
all the kernel features for your for

00:11:09,930 --> 00:11:14,880
your containers now different from

00:11:12,600 --> 00:11:20,280
virtual machines which uses a hypervisor

00:11:14,880 --> 00:11:21,750
to Translate to translate kernel

00:11:20,280 --> 00:11:24,860
features and operating system features

00:11:21,750 --> 00:11:29,670
of the house here you have your

00:11:24,860 --> 00:11:32,550
container runtime software so things are

00:11:29,670 --> 00:11:35,880
can be isolated starch and network can

00:11:32,550 --> 00:11:37,860
be isolated for containers but you share

00:11:35,880 --> 00:11:41,010
your current that's the most important

00:11:37,860 --> 00:11:43,050
thing a container is an application and

00:11:41,010 --> 00:11:44,940
infrastructure package as one which

00:11:43,050 --> 00:11:49,140
makes it for DevOps teams

00:11:44,940 --> 00:11:51,660
able to deploy an application including

00:11:49,140 --> 00:11:54,360
the infrastructure so infrastructure as

00:11:51,660 --> 00:11:57,720
code so you can as a DevOps team you're

00:11:54,360 --> 00:12:01,110
well you're responsible for a small part

00:11:57,720 --> 00:12:03,600
of the of your application landscape you

00:12:01,110 --> 00:12:07,130
can manage your application from death

00:12:03,600 --> 00:12:09,480
to product entirely

00:12:07,130 --> 00:12:11,820
usually it's packaged in an image and

00:12:09,480 --> 00:12:16,440
images a piece of a bundle of software

00:12:11,820 --> 00:12:19,810
which has all the things for your

00:12:16,440 --> 00:12:22,300
application all the

00:12:19,810 --> 00:12:24,820
install installer balls the libraries

00:12:22,300 --> 00:12:27,100
which are needed for your containerized

00:12:24,820 --> 00:12:29,880
applications and when you start up a

00:12:27,100 --> 00:12:33,880
container it runs as a process on your

00:12:29,880 --> 00:12:41,490
system on your Linux flash maybe a UNIX

00:12:33,880 --> 00:12:44,980
system depends so this concept of

00:12:41,490 --> 00:12:48,820
containerization is not that new

00:12:44,980 --> 00:12:51,550
actually it's already since beginning of

00:12:48,820 --> 00:12:54,520
the 80s where there was some kind of a

00:12:51,550 --> 00:12:58,210
tech container technology only it wasn't

00:12:54,520 --> 00:13:00,610
implemented at large scales but if you

00:12:58,210 --> 00:13:03,370
look at the modernized stacks containers

00:13:00,610 --> 00:13:05,830
text and you have the welded the de

00:13:03,370 --> 00:13:09,520
facto standard which is darker darker

00:13:05,830 --> 00:13:11,320
containers and darker runs as a process

00:13:09,520 --> 00:13:13,450
and it doesn't run on an independent

00:13:11,320 --> 00:13:15,730
version of the OS kernel so if you have

00:13:13,450 --> 00:13:21,760
multiple docker containers they all use

00:13:15,730 --> 00:13:25,540
the same operating system kernel but

00:13:21,760 --> 00:13:27,520
also developing containers there was

00:13:25,540 --> 00:13:30,400
also the need of more security and when

00:13:27,520 --> 00:13:33,430
you look at some other technologies

00:13:30,400 --> 00:13:36,580
there are a lot more but I now take the

00:13:33,430 --> 00:13:38,800
three most well-known if you look at

00:13:36,580 --> 00:13:41,650
core OS the rocket container which is

00:13:38,800 --> 00:13:44,320
now part of Red Hat open ship it's

00:13:41,650 --> 00:13:47,710
already more secure but if you go any

00:13:44,320 --> 00:13:50,640
further then you have an initiative

00:13:47,710 --> 00:13:54,580
called kata and kata is in fact

00:13:50,640 --> 00:13:57,339
container which is lightweight VM with

00:13:54,580 --> 00:14:00,300
all the benefits of a container and all

00:13:57,339 --> 00:14:05,730
the benefits of a virtual machine in

00:14:00,300 --> 00:14:05,730
terms of isolation in terms of security

00:14:08,759 --> 00:14:14,379
so if you look at the container stack

00:14:11,709 --> 00:14:17,920
the Asian container stack I already

00:14:14,379 --> 00:14:20,350
mentioned that the concept of containers

00:14:17,920 --> 00:14:28,139
were already there since the beginning

00:14:20,350 --> 00:14:31,990
of of Unix back in 1997 already some

00:14:28,139 --> 00:14:35,439
option existed which is called CH root

00:14:31,990 --> 00:14:37,180
which is an operation that changes a

00:14:35,439 --> 00:14:39,819
parent root directories for the current

00:14:37,180 --> 00:14:42,660
running processes and their children so

00:14:39,819 --> 00:14:45,879
the program runs in an isolated modified

00:14:42,660 --> 00:14:48,009
namespace environment and it cannot

00:14:45,879 --> 00:14:52,149
access files and commands outside of

00:14:48,009 --> 00:14:55,240
that so it's being isolated actually and

00:14:52,149 --> 00:14:59,649
some others which you have is the system

00:14:55,240 --> 00:15:02,939
and the ends poem which is more like an

00:14:59,649 --> 00:15:05,470
OS lightweight namespace container it's

00:15:02,939 --> 00:15:08,439
more or less a bit of the evolution of

00:15:05,470 --> 00:15:11,529
chroot but more powerful because she

00:15:08,439 --> 00:15:14,980
also can have various kernel interfaces

00:15:11,529 --> 00:15:21,309
to the container and set them only to

00:15:14,980 --> 00:15:23,559
read only using SELinux for that and you

00:15:21,309 --> 00:15:27,759
can isolate network interfaces in the

00:15:23,559 --> 00:15:30,610
system clock you can prohibit from out

00:15:27,759 --> 00:15:35,860
the container to change that so there's

00:15:30,610 --> 00:15:40,319
more and more isolation and when you go

00:15:35,860 --> 00:15:43,990
to to more evolution then you have your

00:15:40,319 --> 00:15:46,360
Linux containers which also operates

00:15:43,990 --> 00:15:51,329
online system-level virtualization and

00:15:46,360 --> 00:15:54,809
running in this case also multiple

00:15:51,329 --> 00:15:58,750
isolated systems within a single control

00:15:54,809 --> 00:16:01,889
host you don't have a virtual machine

00:15:58,750 --> 00:16:04,259
with this but you can extend this with

00:16:01,889 --> 00:16:08,819
Alexi with this virtual machine

00:16:04,259 --> 00:16:12,040
implementation of it but you can use

00:16:08,819 --> 00:16:14,800
namespace in situ features with from out

00:16:12,040 --> 00:16:17,410
the Linux kernel on the

00:16:14,800 --> 00:16:21,670
provided host which provides galaxy

00:16:17,410 --> 00:16:24,910
Kinane containers also Intel started

00:16:21,670 --> 00:16:26,529
initiative for containers clear

00:16:24,910 --> 00:16:30,040
containers and cut the containers are

00:16:26,529 --> 00:16:35,019
actually the benefit of clear containers

00:16:30,040 --> 00:16:37,720
and hyper-v visors hypervisors combines

00:16:35,019 --> 00:16:46,240
together within this project which

00:16:37,720 --> 00:16:49,480
started around 2017 so looking at this

00:16:46,240 --> 00:16:53,800
diagram then you can see the difference

00:16:49,480 --> 00:16:57,579
between what containers are and virtual

00:16:53,800 --> 00:17:01,269
machines are and in terms of running on

00:16:57,579 --> 00:17:03,550
a or on a server if you look at the left

00:17:01,269 --> 00:17:06,160
part it's part of the first machine

00:17:03,550 --> 00:17:09,309
while you have the host or the server

00:17:06,160 --> 00:17:12,069
with a core operating system which holds

00:17:09,309 --> 00:17:15,689
the kernel you have an engine and

00:17:12,069 --> 00:17:19,150
hypervisor which translates the drivers

00:17:15,689 --> 00:17:21,699
the guest operating systems using their

00:17:19,150 --> 00:17:26,339
own isolated applications in fact

00:17:21,699 --> 00:17:30,480
actually a guest host running on a

00:17:26,339 --> 00:17:34,330
server and you can do multiple hosts

00:17:30,480 --> 00:17:37,120
multiple guest houses hostess with

00:17:34,330 --> 00:17:38,530
different operating systems which they

00:17:37,120 --> 00:17:42,070
don't know each other's I would say

00:17:38,530 --> 00:17:43,540
effect a complete data center and on the

00:17:42,070 --> 00:17:47,800
right you can see the container

00:17:43,540 --> 00:17:49,630
technology using the same structure the

00:17:47,800 --> 00:17:55,059
host or the server the operating system

00:17:49,630 --> 00:17:58,330
kernel and container engine CLI and on

00:17:55,059 --> 00:18:00,100
top of that running containers with an

00:17:58,330 --> 00:18:04,690
application configured and only the

00:18:00,100 --> 00:18:08,080
necessary software which the container

00:18:04,690 --> 00:18:10,330
needs so now over had no enormous

00:18:08,080 --> 00:18:14,919
footprints so containers can be light

00:18:10,330 --> 00:18:18,059
weighted and don't have too much too

00:18:14,919 --> 00:18:18,059
much ballast with them

00:18:19,190 --> 00:18:29,850
so I already mentioned about security so

00:18:26,210 --> 00:18:32,400
what's important why security so

00:18:29,850 --> 00:18:34,350
important for application container

00:18:32,400 --> 00:18:38,690
landscapes well if you look at this flow

00:18:34,350 --> 00:18:43,580
then you can see how a typical

00:18:38,690 --> 00:18:46,890
development of an application flow is

00:18:43,580 --> 00:18:53,900
where container images are being stored

00:18:46,890 --> 00:18:57,600
and being pulled from and and eventually

00:18:53,900 --> 00:19:01,230
being deployed to a environment which

00:18:57,600 --> 00:19:03,660
where they can run and all on these in

00:19:01,230 --> 00:19:07,680
these stages you have certain risks if

00:19:03,660 --> 00:19:10,620
you look at development of containers

00:19:07,680 --> 00:19:11,640
then you have building an image which

00:19:10,620 --> 00:19:14,870
can be risky

00:19:11,640 --> 00:19:18,480
you have the registry so where you can

00:19:14,870 --> 00:19:22,560
store your container images can be at

00:19:18,480 --> 00:19:25,700
risk then when you have a Orchestrator

00:19:22,560 --> 00:19:29,280
platform which controls and manage your

00:19:25,700 --> 00:19:34,980
container applications they can be at

00:19:29,280 --> 00:19:37,590
risks and also the hosts where you run

00:19:34,980 --> 00:19:40,410
the containers and the orchestrator can

00:19:37,590 --> 00:19:43,380
be at risk at certain levels so what are

00:19:40,410 --> 00:19:47,550
these risks then so first of all if you

00:19:43,380 --> 00:19:49,680
look at the image risks they are

00:19:47,550 --> 00:19:53,250
actually static archive files and they

00:19:49,680 --> 00:19:56,820
can include all components to run a

00:19:53,250 --> 00:19:59,850
given app within an image and it can

00:19:56,820 --> 00:20:03,630
they can sometimes miss critical updates

00:19:59,850 --> 00:20:08,970
because you store them in your in your

00:20:03,630 --> 00:20:11,540
registry and they don't there are not

00:20:08,970 --> 00:20:14,160
applied with lifecycle management

00:20:11,540 --> 00:20:16,920
infrastructure lifecycle management such

00:20:14,160 --> 00:20:21,770
as security updates so an image can be

00:20:16,920 --> 00:20:24,540
outdated and free of full of

00:20:21,770 --> 00:20:26,970
vulnerabilities of which you know not

00:20:24,540 --> 00:20:28,920
know of so a ship when you have the

00:20:26,970 --> 00:20:30,810
traditional operational patterns with

00:20:28,920 --> 00:20:34,500
the quad 7 soft

00:20:30,810 --> 00:20:36,300
then usually it gets updated while the

00:20:34,500 --> 00:20:38,730
system is running and you can update

00:20:36,300 --> 00:20:41,100
your system with the latest security

00:20:38,730 --> 00:20:43,650
patches but when you have a container

00:20:41,100 --> 00:20:45,870
which is stored and it doesn't mean

00:20:43,650 --> 00:20:48,960
necessarily mean that it will do that

00:20:45,870 --> 00:20:52,160
also so you have to be aware of that

00:20:48,960 --> 00:20:57,420
your container your image can be at risk

00:20:52,160 --> 00:21:02,550
missing all kinds of lifecycle actions

00:20:57,420 --> 00:21:05,700
so be aware of it that you take care of

00:21:02,550 --> 00:21:09,570
that other things within your image can

00:21:05,700 --> 00:21:13,070
be that you can package malicious

00:21:09,570 --> 00:21:16,500
software with it malware or package

00:21:13,070 --> 00:21:19,830
unencrypted credentials text files with

00:21:16,500 --> 00:21:22,740
passwords all if you're not careful

00:21:19,830 --> 00:21:25,380
enough all packaged in that container so

00:21:22,740 --> 00:21:27,980
your or your image or image can be at

00:21:25,380 --> 00:21:32,580
great risk when you look at your

00:21:27,980 --> 00:21:37,410
registry for instance well the same if

00:21:32,580 --> 00:21:40,530
you kind of be applied from your images

00:21:37,410 --> 00:21:43,140
if you store your images in your

00:21:40,530 --> 00:21:45,330
registry they can be become stale and

00:21:43,140 --> 00:21:49,320
when they become stale they can be

00:21:45,330 --> 00:21:51,660
vulnerable with holidays version so this

00:21:49,320 --> 00:21:56,280
is also a thing which you can you have

00:21:51,660 --> 00:21:58,980
to take care of this is because the over

00:21:56,280 --> 00:22:02,070
time the set of images can store many

00:21:58,980 --> 00:22:06,840
vulnerable vulnerabilities out of the

00:22:02,070 --> 00:22:10,980
expressions and they do not have to pose

00:22:06,840 --> 00:22:13,730
a direct threat but if you want to try

00:22:10,980 --> 00:22:16,290
them or use them again for deployment

00:22:13,730 --> 00:22:19,400
then you're going to deploy a vulnerable

00:22:16,290 --> 00:22:23,580
version if you don't update your image

00:22:19,400 --> 00:22:26,720
using your lifecycle management

00:22:23,580 --> 00:22:26,720
floo floo

00:22:28,350 --> 00:22:36,289
other things within your images can be

00:22:33,830 --> 00:22:39,539
that you have insufficient

00:22:36,289 --> 00:22:44,780
authentication or authorization so you

00:22:39,539 --> 00:22:48,510
don't apply all the policies of your

00:22:44,780 --> 00:22:52,650
corporate census date since the data can

00:22:48,510 --> 00:22:55,500
be mixed together within within your

00:22:52,650 --> 00:23:00,030
images so you have to be aware of you

00:22:55,500 --> 00:23:02,130
isolate on a software level but you also

00:23:00,030 --> 00:23:05,220
have to isolate on a functional level so

00:23:02,130 --> 00:23:08,700
don't put financial data within some

00:23:05,220 --> 00:23:11,940
other data so that can potentially lead

00:23:08,700 --> 00:23:14,330
to compromised downstream containers and

00:23:11,940 --> 00:23:14,330
hosts

00:23:21,040 --> 00:23:29,380
now if you look at orchestrators

00:23:25,150 --> 00:23:32,300
orchestras which can manage all your

00:23:29,380 --> 00:23:36,950
location containers then there are also

00:23:32,300 --> 00:23:40,130
a lot of risks to to identify some of

00:23:36,950 --> 00:23:42,860
them there they won't will they won't

00:23:40,130 --> 00:23:44,780
apply to all and your your entire

00:23:42,860 --> 00:23:46,610
landscape but you also have to take

00:23:44,780 --> 00:23:49,400
notice of it and be aware that it can

00:23:46,610 --> 00:23:54,650
happen so like unbounded administrative

00:23:49,400 --> 00:23:56,210
access so first when you historically

00:23:54,650 --> 00:23:59,240
many orchestrators were designed with

00:23:56,210 --> 00:24:01,310
the assumption that all users could

00:23:59,240 --> 00:24:04,190
interact with them and they all would be

00:24:01,310 --> 00:24:06,410
administrator's but if you look at

00:24:04,190 --> 00:24:09,050
devops and especially they have sack ups

00:24:06,410 --> 00:24:12,290
then the roles within such a team are

00:24:09,050 --> 00:24:14,390
not only deaf or only ops and not

00:24:12,290 --> 00:24:19,220
everyone is in ops and not everyone is a

00:24:14,390 --> 00:24:21,850
deaf so you need to build in security in

00:24:19,220 --> 00:24:25,970
that pipeline and also in your

00:24:21,850 --> 00:24:30,050
environments to prevent someone doing

00:24:25,970 --> 00:24:32,870
actions which he or she shouldn't do can

00:24:30,050 --> 00:24:37,070
be unintentionally can be an accident

00:24:32,870 --> 00:24:40,940
but you can prevent it to set correct

00:24:37,070 --> 00:24:43,490
permissions and correct access to to

00:24:40,940 --> 00:24:46,280
your containers and also unauthorized

00:24:43,490 --> 00:24:49,460
unauthorized access should be set for

00:24:46,280 --> 00:24:55,180
your Orchestrator which means that you

00:24:49,460 --> 00:24:58,220
need to implement levels of security

00:24:55,180 --> 00:25:03,710
role based access which like kubernetes

00:24:58,220 --> 00:25:07,790
has also your secrets should be stored

00:25:03,710 --> 00:25:11,450
in a safe way best is not to use the

00:25:07,790 --> 00:25:14,240
default mechanism of cuban editors use

00:25:11,450 --> 00:25:18,860
some other like terraform fault or helm

00:25:14,240 --> 00:25:23,080
secrets which can store your secrets

00:25:18,860 --> 00:25:23,080
more secure than the default one

00:25:23,960 --> 00:25:29,269
so already told about mixing work locks

00:25:26,330 --> 00:25:34,009
and sensitivities different kinds of

00:25:29,269 --> 00:25:37,070
levels of sensitivity levels financial

00:25:34,009 --> 00:25:39,320
private but also issue scale your

00:25:37,070 --> 00:25:41,929
cluster your orchestrated cluster your

00:25:39,320 --> 00:25:44,389
cubanelles cluster be aware of that

00:25:41,929 --> 00:25:49,159
honor that you prevent an authorized

00:25:44,389 --> 00:25:55,159
house for you joining the cluster so set

00:25:49,159 --> 00:25:57,830
the proper encryption levels with SSL

00:25:55,159 --> 00:25:59,869
and every tools you have for your

00:25:57,830 --> 00:26:03,799
communications key pair for other

00:25:59,869 --> 00:26:05,929
authentication set them all across all

00:26:03,799 --> 00:26:09,080
your notes in your cluster and don't

00:26:05,929 --> 00:26:11,860
leave them behind because these posing

00:26:09,080 --> 00:26:15,580
image risk they pose a risk to your

00:26:11,860 --> 00:26:19,899
infrastructure also so these are all

00:26:15,580 --> 00:26:25,009
measurements you can think of a prompt

00:26:19,899 --> 00:26:28,190
you design your entire landscape so in

00:26:25,009 --> 00:26:31,159
last but not least all your containers

00:26:28,190 --> 00:26:35,330
and also your orchestrated runs on a

00:26:31,159 --> 00:26:38,690
server or a group of servers in your

00:26:35,330 --> 00:26:40,490
data center and when you look at that

00:26:38,690 --> 00:26:43,309
level then you have a large attack

00:26:40,490 --> 00:26:47,450
surface because your entire system can

00:26:43,309 --> 00:26:51,950
be exploited or vulnerabilities by

00:26:47,450 --> 00:26:56,240
hackers doing all kinds of attacks and

00:26:51,950 --> 00:27:00,619
also the shared kernel thing you have

00:26:56,240 --> 00:27:03,259
with containers that you can there are

00:27:00,619 --> 00:27:05,570
no isolation at the kernel level so if

00:27:03,259 --> 00:27:08,389
your kernel gets attacked and all the

00:27:05,570 --> 00:27:10,340
containers will be affected by it and of

00:27:08,389 --> 00:27:14,899
course when you have 40 machines then

00:27:10,340 --> 00:27:16,669
the isolation is more high than by

00:27:14,899 --> 00:27:20,570
container runtimes

00:27:16,669 --> 00:27:22,690
so all these vulnerabilities should be

00:27:20,570 --> 00:27:26,529
identified

00:27:22,690 --> 00:27:29,289
as well as also in here improper user

00:27:26,529 --> 00:27:31,889
access right shall give the proper

00:27:29,289 --> 00:27:35,769
permissions based on your company policy

00:27:31,889 --> 00:27:38,619
and the roles which should access the

00:27:35,769 --> 00:27:42,159
direct service or hosts not everyone

00:27:38,619 --> 00:27:45,399
needs to be a system administrator but

00:27:42,159 --> 00:27:49,769
these are all basic security rules which

00:27:45,399 --> 00:27:54,580
can be applied in every on every

00:27:49,769 --> 00:27:56,950
landscape system landscape as you can

00:27:54,580 --> 00:28:01,779
see running a containerized landscape

00:27:56,950 --> 00:28:04,779
there are many risks to identify and I

00:28:01,779 --> 00:28:07,239
for now I want to focus on the host

00:28:04,779 --> 00:28:10,749
operating system when containers are

00:28:07,239 --> 00:28:13,029
running in their own namespace but still

00:28:10,749 --> 00:28:16,690
sharing their kernel of the host and

00:28:13,029 --> 00:28:19,509
that can lead to many vulnerabilities

00:28:16,690 --> 00:28:22,359
and many threats to your to your

00:28:19,509 --> 00:28:24,909
containers such as an attack on hosts

00:28:22,359 --> 00:28:28,269
can be a large-scale attack for all your

00:28:24,909 --> 00:28:31,779
containers running on that house having

00:28:28,269 --> 00:28:35,099
improper user of authorities host of

00:28:31,779 --> 00:28:39,749
file system falsifications all these

00:28:35,099 --> 00:28:46,359
aspects can influence your container

00:28:39,749 --> 00:28:48,429
security to overcome this security issue

00:28:46,359 --> 00:28:51,759
pattern containers could be the right

00:28:48,429 --> 00:28:53,499
solution to clear this concern so as I

00:28:51,759 --> 00:28:56,019
mentioned there was a security risk for

00:28:53,499 --> 00:29:00,489
application containers due to the

00:28:56,019 --> 00:29:02,229
sharing of the Linux kernel but cut the

00:29:00,489 --> 00:29:06,009
containers have a different approach and

00:29:02,229 --> 00:29:08,229
they provide highly isolated containers

00:29:06,009 --> 00:29:11,529
likewise actually these virtual machines

00:29:08,229 --> 00:29:12,519
over hypervisors unless you can see in

00:29:11,529 --> 00:29:14,139
these diagrams

00:29:12,519 --> 00:29:16,389
it will show you the difference the

00:29:14,139 --> 00:29:19,649
left-hand image shows a typical

00:29:16,389 --> 00:29:22,749
application container based on docker or

00:29:19,649 --> 00:29:27,340
any other one and they share the same

00:29:22,749 --> 00:29:29,649
kernel they're only isolated with their

00:29:27,340 --> 00:29:32,619
namespace so it's a bit of a sub where

00:29:29,649 --> 00:29:35,240
isolation and on the other hand you have

00:29:32,619 --> 00:29:37,610
using you can use Cotta containers

00:29:35,240 --> 00:29:40,540
steadily namespace and these are the

00:29:37,610 --> 00:29:45,290
small virtual machines which are created

00:29:40,540 --> 00:29:47,570
on the kernel and strongly isolated so

00:29:45,290 --> 00:29:50,000
the technology of cotton containers is

00:29:47,570 --> 00:29:52,730
based on the KTM hypervisor and that's

00:29:50,000 --> 00:29:55,880
why the level of isolation is equivalent

00:29:52,730 --> 00:30:02,600
to hypervisor so for kata you need a

00:29:55,880 --> 00:30:04,870
hypervisor if you are looking at the

00:30:02,600 --> 00:30:07,429
traditional container technology stack

00:30:04,870 --> 00:30:10,309
traditional which is being used the last

00:30:07,429 --> 00:30:13,340
couple of years then you can see an

00:30:10,309 --> 00:30:18,140
overview here of what's being used and

00:30:13,340 --> 00:30:22,130
what the alternatives might be the types

00:30:18,140 --> 00:30:25,970
of technology are like the engine for

00:30:22,130 --> 00:30:29,510
docker dr. D which you run as a service

00:30:25,970 --> 00:30:32,090
as a debut on your Linux system but an

00:30:29,510 --> 00:30:37,040
alternative could be container heat or

00:30:32,090 --> 00:30:39,860
cryo runtime the traditional one is run

00:30:37,040 --> 00:30:44,960
see if you can replace them with cutter

00:30:39,860 --> 00:30:49,429
containers with the cutter runtime if

00:30:44,960 --> 00:30:51,590
you look at see like a lot of companies

00:30:49,429 --> 00:30:54,350
and a lot of projects used al kursi lie

00:30:51,590 --> 00:30:57,140
but you can replace with pop man which

00:30:54,350 --> 00:30:59,929
is also more secure than the docker see

00:30:57,140 --> 00:31:02,270
ally and last but not least if you want

00:30:59,929 --> 00:31:04,850
to build you can use the docker bill you

00:31:02,270 --> 00:31:08,300
can also use poplar for that but you can

00:31:04,850 --> 00:31:09,860
also try another tool like build up so

00:31:08,300 --> 00:31:12,140
there are many alternatives at the

00:31:09,860 --> 00:31:15,790
moment in the market and you have to

00:31:12,140 --> 00:31:20,080
pick the right ones for your project

00:31:15,790 --> 00:31:20,080
yeah move on with it

00:31:22,730 --> 00:31:27,519
there are a lot of benefits to running

00:31:24,559 --> 00:31:30,109
Akaka containers not the containers are

00:31:27,519 --> 00:31:33,799
highly compatible with several

00:31:30,109 --> 00:31:36,769
technologies you can even run it on your

00:31:33,799 --> 00:31:39,529
duh car engine so it's a highly

00:31:36,769 --> 00:31:43,159
compatible with docker but you can also

00:31:39,529 --> 00:31:45,739
choose some other technologies and some

00:31:43,159 --> 00:31:50,149
other open source energy initiatives

00:31:45,739 --> 00:31:53,389
because it supports the OCI standards

00:31:50,149 --> 00:31:55,609
and therefore it also it's compatible

00:31:53,389 --> 00:31:59,210
with your cuban at least custom resource

00:31:55,609 --> 00:32:02,840
interfaces and it can run on other

00:31:59,210 --> 00:32:05,749
runtimes then only the run see you can

00:32:02,840 --> 00:32:08,600
use cryo as a runtime container d as a

00:32:05,749 --> 00:32:12,649
runtime or even frac t which is also a

00:32:08,600 --> 00:32:17,749
runtime container interface so you can

00:32:12,649 --> 00:32:21,559
see how the containers are can be highly

00:32:17,749 --> 00:32:24,980
adopted in the community to be used as

00:32:21,559 --> 00:32:30,950
the standard more secure container more

00:32:24,980 --> 00:32:33,879
secured and darker another great benefit

00:32:30,950 --> 00:32:37,999
of kata is that you can run it container

00:32:33,879 --> 00:32:41,629
Damon less if you look at docker or

00:32:37,999 --> 00:32:43,429
container then you can run it if you

00:32:41,629 --> 00:32:45,799
install it you remnant have to run it in

00:32:43,429 --> 00:32:50,210
your after run a test as a daemon in

00:32:45,799 --> 00:32:52,669
your operating system but using shim you

00:32:50,210 --> 00:32:55,940
can run their containers daemon list

00:32:52,669 --> 00:32:59,659
which means that the container started

00:32:55,940 --> 00:33:02,840
up and then they could contain runtime

00:32:59,659 --> 00:33:06,470
immediately exits so there's no daemon

00:33:02,840 --> 00:33:10,309
which is monitoring the process because

00:33:06,470 --> 00:33:13,549
shim does that for you and shame is an

00:33:10,309 --> 00:33:17,149
API for launching runtime and handling

00:33:13,549 --> 00:33:19,460
container creations and also reporting

00:33:17,149 --> 00:33:23,450
status and

00:33:19,460 --> 00:33:27,200
I owe and log files for your streaming

00:33:23,450 --> 00:33:31,910
containers and you can report exit goats

00:33:27,200 --> 00:33:34,360
so Seamus actually meant to being

00:33:31,910 --> 00:33:38,680
replaced for Damon

00:33:34,360 --> 00:33:42,260
Damon's which container D and docker dr

00:33:38,680 --> 00:33:45,620
so if you look also at the next version

00:33:42,260 --> 00:33:48,290
of the shim implemented for cottage in

00:33:45,620 --> 00:33:51,080
version two then it's more simplified

00:33:48,290 --> 00:33:55,820
than the previous one because you have

00:33:51,080 --> 00:33:58,220
only one scene per container and or pear

00:33:55,820 --> 00:34:00,800
pod and you don't have any proxies in

00:33:58,220 --> 00:34:07,640
between anymore which we'll see in the

00:34:00,800 --> 00:34:10,460
next diagram in this diagram we zoom in

00:34:07,640 --> 00:34:11,960
on the cattle container architecture and

00:34:10,460 --> 00:34:16,360
if you look at the right hand side then

00:34:11,960 --> 00:34:18,890
you can see a cut virtual machine and

00:34:16,360 --> 00:34:21,590
what what what you can see in here that

00:34:18,890 --> 00:34:23,720
the container namespaces in the cut a

00:34:21,590 --> 00:34:26,060
virtual machine it sells or not on the

00:34:23,720 --> 00:34:28,400
host where traditional containers have

00:34:26,060 --> 00:34:32,210
their name stays running so you can see

00:34:28,400 --> 00:34:34,790
in here already the isolation of a kata

00:34:32,210 --> 00:34:36,860
virtual machine so kata has a cutter

00:34:34,790 --> 00:34:39,350
runtime on the host which starts in

00:34:36,860 --> 00:34:41,270
configure these the end containers and

00:34:39,350 --> 00:34:43,550
for each container in the cutter VM

00:34:41,270 --> 00:34:46,100
there's a corresponding kata shame on

00:34:43,550 --> 00:34:51,020
the host to communicate with clients

00:34:46,100 --> 00:34:54,410
like cube cuddle or darker and all this

00:34:51,020 --> 00:34:58,250
communication goes to the shim over G

00:34:54,410 --> 00:35:01,580
RPC protocol and the runtime for OC I

00:34:58,250 --> 00:35:04,420
command specifics and the specifics

00:35:01,580 --> 00:35:07,820
they also communicates to declined and

00:35:04,420 --> 00:35:12,680
backwards to cut version machine through

00:35:07,820 --> 00:35:15,460
the G RPC protocol in between you can

00:35:12,680 --> 00:35:18,170
see the kata proxy which was still

00:35:15,460 --> 00:35:20,540
implemented within version one in

00:35:18,170 --> 00:35:21,920
version two of kata you don't need to

00:35:20,540 --> 00:35:23,900
scuttle proxy anymore

00:35:21,920 --> 00:35:29,210
so this means every part will be

00:35:23,900 --> 00:35:29,780
accessed by a shim from the cata version

00:35:29,210 --> 00:35:38,050
machine

00:35:29,780 --> 00:35:40,400
I already told kata containers

00:35:38,050 --> 00:35:44,620
implemented as rotary machines they

00:35:40,400 --> 00:35:48,560
still need some type of a hypervisor and

00:35:44,620 --> 00:35:52,030
if you look at the typical hypervisors

00:35:48,560 --> 00:35:57,820
which are well-known like then like

00:35:52,030 --> 00:36:01,610
hyper-v like VMware ESX they are in fact

00:35:57,820 --> 00:36:03,560
hypervisors which can be run on Hardware

00:36:01,610 --> 00:36:07,340
bare metal with no operating system

00:36:03,560 --> 00:36:09,080
underneath it when you run kata

00:36:07,340 --> 00:36:12,230
containers then you also need a

00:36:09,080 --> 00:36:16,520
hypervisor and implemented hypervisor

00:36:12,230 --> 00:36:19,100
cut containers k vm k game is also the

00:36:16,520 --> 00:36:21,920
hypervisor which oracle now uses as a

00:36:19,100 --> 00:36:24,770
virtualization platform for standard

00:36:21,920 --> 00:36:27,590
virtual machines and it can also run as

00:36:24,770 --> 00:36:31,880
a type 1 hypervisor on the physical

00:36:27,590 --> 00:36:34,580
hardware but to run your containers as a

00:36:31,880 --> 00:36:37,970
virtual machine you have to have some

00:36:34,580 --> 00:36:45,140
emulation and this emulation technology

00:36:37,970 --> 00:36:49,250
is bundled in software called qemu which

00:36:45,140 --> 00:36:52,340
is compatible with k vm & QE emu is

00:36:49,250 --> 00:36:55,160
being used by oracle to implement kata

00:36:52,340 --> 00:36:59,270
containers and you also have some other

00:36:55,160 --> 00:37:03,830
like firecracker and firecrackers run by

00:36:59,270 --> 00:37:06,590
Amazon AWS there there are not many

00:37:03,830 --> 00:37:08,720
differences of course they're built

00:37:06,590 --> 00:37:12,080
different but in the work they do the

00:37:08,720 --> 00:37:16,130
same there are some small differences

00:37:12,080 --> 00:37:21,350
like qemu has some larger footprint and

00:37:16,130 --> 00:37:24,130
firecracker but firecracker s less

00:37:21,350 --> 00:37:31,490
security is more a bit less secure than

00:37:24,130 --> 00:37:32,589
q emu so the other emulator firecracker

00:37:31,490 --> 00:37:35,200
well it's

00:37:32,589 --> 00:37:39,690
as I already said it's right it runs in

00:37:35,200 --> 00:37:43,029
AWS for creating micro virtual machines

00:37:39,690 --> 00:37:45,849
it has a very fast startup time and low

00:37:43,029 --> 00:37:49,740
memory overhead so the footprint is

00:37:45,849 --> 00:37:52,269
compared to kill EMU is a bit smaller so

00:37:49,740 --> 00:37:55,750
it enables you to pack thousands of

00:37:52,269 --> 00:37:58,299
micro games on your machine so every

00:37:55,750 --> 00:38:01,630
function every container container group

00:37:58,299 --> 00:38:05,410
can be encapsulated within a virtual

00:38:01,630 --> 00:38:07,269
machine barrier to enable workloads for

00:38:05,410 --> 00:38:10,539
different customers to run on the same

00:38:07,269 --> 00:38:12,160
machine and still have this isolation

00:38:10,539 --> 00:38:17,680
and firecracker is in fact an

00:38:12,160 --> 00:38:20,019
alternative for key qemu but said of

00:38:17,680 --> 00:38:26,019
better as already said it's it's less

00:38:20,019 --> 00:38:32,910
secure because you have to share some

00:38:26,019 --> 00:38:37,470
some metadata across all these micro VMs

00:38:32,910 --> 00:38:45,000
so there's a sharing component within

00:38:37,470 --> 00:38:49,420
within firecracker implementing

00:38:45,000 --> 00:38:52,180
virtualization using QEMU you have to be

00:38:49,420 --> 00:38:54,970
aware of that it needs to be enabled on

00:38:52,180 --> 00:38:58,869
your CPU level so you have to check with

00:38:54,970 --> 00:39:03,279
this command if your CPU is compatible

00:38:58,869 --> 00:39:06,460
with virtualization these flags are set

00:39:03,279 --> 00:39:10,420
in CPU info and you can check them with

00:39:06,460 --> 00:39:12,819
a simple grep command if it's not there

00:39:10,420 --> 00:39:17,980
and you can check your bias if it's

00:39:12,819 --> 00:39:21,400
possible but can be that your processor

00:39:17,980 --> 00:39:25,180
doesn't support virtualization if that's

00:39:21,400 --> 00:39:28,210
the case then you can run this emulation

00:39:25,180 --> 00:39:32,519
for your virtual machines so be aware of

00:39:28,210 --> 00:39:35,319
this is one of the prerequisites to run

00:39:32,519 --> 00:39:37,680
cotton container emulated virtual

00:39:35,319 --> 00:39:37,680
machines

00:39:38,799 --> 00:39:48,650
Oracle implements cata on their cloud on

00:39:44,390 --> 00:39:52,130
the Oracle container runtime and it's

00:39:48,650 --> 00:39:57,190
generally available now and while cotta

00:39:52,130 --> 00:40:01,579
container is a mutual project from Intel

00:39:57,190 --> 00:40:05,569
clear containers using hyper-v as a

00:40:01,579 --> 00:40:07,640
hypervisor and using Q mu as the

00:40:05,569 --> 00:40:10,670
virtualization technology sorry the

00:40:07,640 --> 00:40:12,769
emulation technology for running the VM

00:40:10,670 --> 00:40:15,440
so you have lightweight virtual machines

00:40:12,769 --> 00:40:20,630
they still feel and perform like

00:40:15,440 --> 00:40:24,200
containers but there still have this

00:40:20,630 --> 00:40:29,480
type of isolation which you require as a

00:40:24,200 --> 00:40:32,930
security measurement as well as that it

00:40:29,480 --> 00:40:35,440
runs KP KVM hypervisor Oracle's Linux 7

00:40:32,930 --> 00:40:38,440
and higher with the kernel 5

00:40:35,440 --> 00:40:38,440
implementation

00:40:40,030 --> 00:40:46,250
zooming on specific Oracle it is

00:40:44,540 --> 00:40:49,250
supported for Oracle cloud Oracle

00:40:46,250 --> 00:40:52,340
support scatter containers and also the

00:40:49,250 --> 00:40:55,040
additional tool sets for using cutter

00:40:52,340 --> 00:40:59,840
containers like pot when buildin build a

00:40:55,040 --> 00:41:02,090
scope you it's also supported for oracle

00:40:59,840 --> 00:41:05,840
application server in the cloud oracle

00:41:02,090 --> 00:41:08,600
weblogic but it's still open source so

00:41:05,840 --> 00:41:14,660
which can be used also for non Oracle

00:41:08,600 --> 00:41:20,840
products like Amazon uses it for AWS for

00:41:14,660 --> 00:41:23,240
instance but it's it's supported so so

00:41:20,840 --> 00:41:25,520
if you look at kata cry or when the

00:41:23,240 --> 00:41:29,230
Oracle cloud infrastructure this is my

00:41:25,520 --> 00:41:33,050
recipe which are used to build any kata

00:41:29,230 --> 00:41:35,530
kubernetes cluster so what I need what a

00:41:33,050 --> 00:41:40,960
cloud compartment which I already have

00:41:35,530 --> 00:41:44,960
three regions three availability domains

00:41:40,960 --> 00:41:49,240
and I've used three virtual machine

00:41:44,960 --> 00:41:52,010
instances just plain Linux compute

00:41:49,240 --> 00:41:56,290
instances to run my kubernetes cluster

00:41:52,010 --> 00:42:00,260
on Oracle also has its own match

00:41:56,290 --> 00:42:03,380
kubernetes cluster Oracle kubernetes

00:42:00,260 --> 00:42:06,830
engine but Kuban in this engine which

00:42:03,380 --> 00:42:09,860
you can get from Oracle itself it

00:42:06,830 --> 00:42:14,420
doesn't support console containers yet

00:42:09,860 --> 00:42:17,500
so you can't set it up using oke or Co

00:42:14,420 --> 00:42:21,040
container engine cue brunette is engine

00:42:17,500 --> 00:42:23,510
but as I told I use the computer

00:42:21,040 --> 00:42:25,100
infrastructure for that and these

00:42:23,510 --> 00:42:28,490
instances were running on the Oracle

00:42:25,100 --> 00:42:33,500
Linux seven developer image to have the

00:42:28,490 --> 00:42:36,380
proper tool set to install cut a

00:42:33,500 --> 00:42:40,670
container and cutter runtime and also a

00:42:36,380 --> 00:42:44,740
container geek and cryo and pertain the

00:42:40,670 --> 00:42:44,740
runtime interfaces which I need

00:42:46,619 --> 00:42:55,299
and with these simple commands I started

00:42:52,029 --> 00:42:57,519
my kata trial integration so connect to

00:42:55,299 --> 00:42:59,880
the proper young repositories if they

00:42:57,519 --> 00:43:03,609
weren't there yet so connect to the

00:42:59,880 --> 00:43:07,799
default Google to Renee this repository

00:43:03,609 --> 00:43:11,739
to get the latest version of kubernetes

00:43:07,799 --> 00:43:15,219
because the Oracle yum doesn't support

00:43:11,739 --> 00:43:19,359
the latest versions 18 for instance but

00:43:15,219 --> 00:43:25,809
for my purpose I used one 15 for the

00:43:19,359 --> 00:43:28,349
latest so I used some developer tools 44

00:43:25,809 --> 00:43:31,650
from out the Oracle yam repository and

00:43:28,349 --> 00:43:36,339
KVM utilities for the key mu

00:43:31,650 --> 00:43:38,950
virtualization and emulation and then I

00:43:36,339 --> 00:43:49,420
installed some extra some dependencies

00:43:38,950 --> 00:43:51,999
for kata so install toccata runtime one

00:43:49,420 --> 00:43:54,190
building might cut a container cluster I

00:43:51,999 --> 00:43:57,969
first started to integrate it with in

00:43:54,190 --> 00:44:01,890
darker so I wanted to have control with

00:43:57,969 --> 00:44:06,489
system D to start up the car daemon and

00:44:01,890 --> 00:44:09,549
created an extra entry in my daemon to

00:44:06,489 --> 00:44:13,269
tell about the storage arrived her to be

00:44:09,549 --> 00:44:17,369
used to use the overlay to start the

00:44:13,269 --> 00:44:20,499
rifle for that and for the startup I

00:44:17,369 --> 00:44:22,989
implemented the cut of runtime for the

00:44:20,499 --> 00:44:25,209
darker daemon to tell the doctor daemon

00:44:22,989 --> 00:44:26,979
that the runtime default runtime would

00:44:25,209 --> 00:44:32,229
be the car to run climb instead of the

00:44:26,979 --> 00:44:35,619
docker run time and at the end I also

00:44:32,229 --> 00:44:38,259
installed the Sirah command-line utility

00:44:35,619 --> 00:44:43,109
for CRI compatible container one times

00:44:38,259 --> 00:44:43,109
for running it with kubernetes

00:44:50,900 --> 00:44:56,010
so when I was ready with all the

00:44:53,250 --> 00:44:58,950
prerequisites I started to do the

00:44:56,010 --> 00:45:00,960
kubernetes integration so integrate

00:44:58,950 --> 00:45:04,289
cutter containers into my kubernetes

00:45:00,960 --> 00:45:06,809
cluster I started with a very simple

00:45:04,289 --> 00:45:09,569
setup if you look at this diagram and

00:45:06,809 --> 00:45:11,789
you can see the master into worker notes

00:45:09,569 --> 00:45:14,609
for your for my kubernetes cluster and

00:45:11,789 --> 00:45:18,359
the container engine contain a runtime

00:45:14,609 --> 00:45:20,339
software which I wanted to be used so

00:45:18,359 --> 00:45:22,880
the container engine software first I

00:45:20,339 --> 00:45:26,869
started using the dock or software and

00:45:22,880 --> 00:45:33,420
later it became container D and cryo

00:45:26,869 --> 00:45:36,299
without a runtime so the math server was

00:45:33,420 --> 00:45:39,859
set up using an API server scheduler the

00:45:36,299 --> 00:45:43,079
controller at CD to alter cluster

00:45:39,859 --> 00:45:45,329
configurations just the basics of a

00:45:43,079 --> 00:45:48,150
cuban at this cluster and the work notes

00:45:45,329 --> 00:45:51,390
were instructed by the cubelet and a

00:45:48,150 --> 00:45:53,849
cute proxy to start up and managing the

00:45:51,390 --> 00:45:57,779
life cycles of all the app containers

00:45:53,849 --> 00:45:59,970
within these pots so if you as you can

00:45:57,779 --> 00:46:00,869
see this is a very basic set up it's not

00:45:59,970 --> 00:46:02,910
high available

00:46:00,869 --> 00:46:04,470
I had one monster you can set up

00:46:02,910 --> 00:46:09,210
multiple masters for you cuban hands

00:46:04,470 --> 00:46:12,390
closer if you want to do high

00:46:09,210 --> 00:46:15,569
availability what i did is was an

00:46:12,390 --> 00:46:19,920
existing cluster I took my approach was

00:46:15,569 --> 00:46:22,470
to take off node by node and implement

00:46:19,920 --> 00:46:25,140
the new cooking a runtime interface on

00:46:22,470 --> 00:46:29,099
the core kernel and then joined and the

00:46:25,140 --> 00:46:35,690
note again back to the kubernetes

00:46:29,099 --> 00:46:39,349
cluster and this resulted in these

00:46:35,690 --> 00:46:42,420
cubelet and container runtime engines I

00:46:39,349 --> 00:46:45,480
set up several runtimes to run in my

00:46:42,420 --> 00:46:46,740
Hubertus cluster first of all I started

00:46:45,480 --> 00:46:50,609
just with docker

00:46:46,740 --> 00:46:53,880
the cable that spoke to the docker the

00:46:50,609 --> 00:46:56,940
daemon and through run see it started

00:46:53,880 --> 00:46:59,609
some app containers later on I switched

00:46:56,940 --> 00:47:01,019
over to container D also making use of

00:46:59,609 --> 00:47:03,269
the run c

00:47:01,019 --> 00:47:08,190
contain a run time to start up these

00:47:03,269 --> 00:47:10,890
containers but next I started using

00:47:08,190 --> 00:47:13,920
container D and cryo for cutter

00:47:10,890 --> 00:47:17,900
containers to start up some app

00:47:13,920 --> 00:47:23,609
containers using the virtual image from

00:47:17,900 --> 00:47:26,279
EMU so in fact the right setup was set

00:47:23,609 --> 00:47:33,680
up which is being used was being used as

00:47:26,279 --> 00:47:36,900
a cata virtual machines now integrating

00:47:33,680 --> 00:47:41,549
containers in kubernetes I needed to do

00:47:36,900 --> 00:47:44,039
some extra steps to accomplish this so I

00:47:41,549 --> 00:47:46,859
had to install the right packages to be

00:47:44,039 --> 00:47:49,410
used by kubernetes I had to instruct the

00:47:46,859 --> 00:47:52,559
cubelet to use proper container runtime

00:47:49,410 --> 00:47:56,880
or the container runtime which I wished

00:47:52,559 --> 00:47:58,980
it would be used you can rebuild

00:47:56,880 --> 00:48:01,680
humanity's muscle but you also can say

00:47:58,980 --> 00:48:04,470
well I don't want to do that but my case

00:48:01,680 --> 00:48:06,240
I did because I wanted to the Cuban had

00:48:04,470 --> 00:48:09,900
this master to run the container heat

00:48:06,240 --> 00:48:12,930
and the worker notes I would be running

00:48:09,900 --> 00:48:18,839
with cryo using your own container

00:48:12,930 --> 00:48:21,000
runtime so looking at that one of the

00:48:18,839 --> 00:48:23,640
worker notes was using crying runtime as

00:48:21,000 --> 00:48:26,970
already told you so I had to configure

00:48:23,640 --> 00:48:30,839
that to use it instead of the dock our

00:48:26,970 --> 00:48:33,390
default runtime so what I did is made an

00:48:30,839 --> 00:48:36,299
extra configuration file called cubelet

00:48:33,390 --> 00:48:36,690
service and all the cubelet servers that

00:48:36,299 --> 00:48:39,540
you

00:48:36,690 --> 00:48:42,450
would that it would have to run with

00:48:39,540 --> 00:48:46,920
cryo runtime and these are the commands

00:48:42,450 --> 00:48:50,369
to do that and afterwards I also told

00:48:46,920 --> 00:48:52,680
the master I removed the master and set

00:48:50,369 --> 00:48:57,569
to the master that it would be running

00:48:52,680 --> 00:49:01,710
with container D and as you can see has

00:48:57,569 --> 00:49:03,270
to have swap on disabled because

00:49:01,710 --> 00:49:06,420
otherwise to people that won't start you

00:49:03,270 --> 00:49:09,780
kind of failure get an error so you need

00:49:06,420 --> 00:49:14,400
to be aware of to run the command swap

00:49:09,780 --> 00:49:17,880
off or set it system-wide so we free

00:49:14,400 --> 00:49:20,480
reboot appears and you won't have to set

00:49:17,880 --> 00:49:20,480
it again

00:49:22,369 --> 00:49:27,329
little bit focus on the master

00:49:24,540 --> 00:49:31,260
preparation where I already said I was

00:49:27,329 --> 00:49:33,839
using container D the same here make an

00:49:31,260 --> 00:49:35,819
extra entry for your cubelet service to

00:49:33,839 --> 00:49:40,530
say to the cubelet service that you want

00:49:35,819 --> 00:49:42,869
to run container d socket i also had to

00:49:40,530 --> 00:49:45,030
change the secret driver in the queue

00:49:42,869 --> 00:49:47,790
ballot with the capability extra

00:49:45,030 --> 00:49:54,180
arguments to say that the secret c group

00:49:47,790 --> 00:49:59,640
driver will be system deep and the end

00:49:54,180 --> 00:50:01,680
result was this actually you can see in

00:49:59,640 --> 00:50:03,630
this overview I told you about the

00:50:01,680 --> 00:50:06,240
master was running running container D

00:50:03,630 --> 00:50:08,220
but in this whole issue I configured one

00:50:06,240 --> 00:50:11,010
of the workers to use container yester

00:50:08,220 --> 00:50:15,349
contain a runtime and with a queue

00:50:11,010 --> 00:50:19,319
cuttle of the notes you can see

00:50:15,349 --> 00:50:22,020
container runtimes in a write table and

00:50:19,319 --> 00:50:24,420
they are using the something else you

00:50:22,020 --> 00:50:26,400
also can configure darker des to contain

00:50:24,420 --> 00:50:29,930
a runtime on one of those this you

00:50:26,400 --> 00:50:32,910
require that so they can go coexist all

00:50:29,930 --> 00:50:37,170
together and that's the meaning of it

00:50:32,910 --> 00:50:39,300
it's it really wonderful and here an

00:50:37,170 --> 00:50:42,900
overview of the shop unless I had to

00:50:39,300 --> 00:50:44,700
build it three DM in silico horrible

00:50:42,900 --> 00:50:47,069
called infrastructure just compute

00:50:44,700 --> 00:50:48,539
instances but it can be any you can do

00:50:47,069 --> 00:50:53,579
it in a sure you can do it

00:50:48,539 --> 00:50:56,279
in Amazon or Google a lot of Linux

00:50:53,579 --> 00:50:59,400
distributions are compatible with it

00:50:56,279 --> 00:51:03,890
senthil s hooba hooba - doesn't matter

00:50:59,400 --> 00:51:08,519
actually for me my Orca back when I used

00:51:03,890 --> 00:51:12,059
the Oracle Linux version you also need

00:51:08,519 --> 00:51:15,539
to install dkf emu utilities I had to

00:51:12,059 --> 00:51:20,239
install the developer release to enables

00:51:15,539 --> 00:51:23,910
KVM utilities and subsequent to that I

00:51:20,239 --> 00:51:33,179
cut the runtime cryo the continuity the

00:51:23,910 --> 00:51:35,459
real-time interface and container but

00:51:33,179 --> 00:51:39,089
with that you're not finished yet you

00:51:35,459 --> 00:51:42,469
need to enable the cut runtime when your

00:51:39,089 --> 00:51:46,079
communities clustering you do that by

00:51:42,469 --> 00:51:49,819
implementing a kata runtime class which

00:51:46,079 --> 00:51:52,229
can make use of the emu hypervisor

00:51:49,819 --> 00:51:57,239
furthermore you need to do some labeling

00:51:52,229 --> 00:52:00,719
to say to a note to act as a kata

00:51:57,239 --> 00:52:02,909
runtime host I've got a runtime node and

00:52:00,719 --> 00:52:06,179
you have to instruct your part to use

00:52:02,909 --> 00:52:08,939
the cutter runtime class and you have to

00:52:06,179 --> 00:52:11,459
label notes as already told to schedule

00:52:08,939 --> 00:52:14,159
pots for cotton room time you can also

00:52:11,459 --> 00:52:17,400
do with an untrusted workload so leave

00:52:14,159 --> 00:52:20,309
the class out of it but I wanted to

00:52:17,400 --> 00:52:23,999
implement the kata runtime class for

00:52:20,309 --> 00:52:27,599
that and this is the command which I

00:52:23,999 --> 00:52:30,659
used to label a note to be able to run

00:52:27,599 --> 00:52:34,609
kata containers so label to note that

00:52:30,659 --> 00:52:38,549
the cutter runtime class so you can also

00:52:34,609 --> 00:52:40,769
put that in your llamo file with a note

00:52:38,549 --> 00:52:45,299
selector which I will show you some

00:52:40,769 --> 00:52:47,729
later and here you can see some of these

00:52:45,299 --> 00:52:54,539
working outs have a label got a runtime

00:52:47,729 --> 00:52:56,369
true in here so every part you which is

00:52:54,539 --> 00:52:56,950
scheduled with will be scheduled you

00:52:56,369 --> 00:53:01,690
know

00:52:56,950 --> 00:53:05,650
one of these notes now here I have a

00:53:01,690 --> 00:53:09,990
deployment llamo file of a simple PHP

00:53:05,650 --> 00:53:13,990
Apache application which will be running

00:53:09,990 --> 00:53:18,790
cut in ricotta via virtual machine so

00:53:13,990 --> 00:53:21,550
you had to apply this runtime class in

00:53:18,790 --> 00:53:28,240
your spec a section to be using the

00:53:21,550 --> 00:53:30,369
cutter runtime class and when the part

00:53:28,240 --> 00:53:33,040
was started then you it would is was

00:53:30,369 --> 00:53:35,589
running on working out to my case and

00:53:33,040 --> 00:53:39,010
then you could see with this specific

00:53:35,589 --> 00:53:42,490
command that ki meu was started and

00:53:39,010 --> 00:53:45,970
running is this container so that's

00:53:42,490 --> 00:53:49,180
proof that it's working I now have a

00:53:45,970 --> 00:53:51,940
short demo to run an Oracle database on

00:53:49,180 --> 00:53:53,859
a cutter container and what I needed for

00:53:51,940 --> 00:53:55,599
this demo I needed a namespace

00:53:53,859 --> 00:53:58,089
I needed the secret for pulling the

00:53:55,599 --> 00:54:02,079
image I need a numerical database image

00:53:58,089 --> 00:54:06,180
I needed yamo file and I need run a kata

00:54:02,079 --> 00:54:13,750
on and also an uncut a container so I

00:54:06,180 --> 00:54:16,900
will start this demo shortly okay now in

00:54:13,750 --> 00:54:20,260
this short demo I prepared I have two

00:54:16,900 --> 00:54:24,160
yellow files for an Oracle database so

00:54:20,260 --> 00:54:27,640
if you look at it I created a demo file

00:54:24,160 --> 00:54:32,730
for database running on kata and then

00:54:27,640 --> 00:54:36,089
database run kata and I both of them

00:54:32,730 --> 00:54:39,579
working out to live so if you look at

00:54:36,089 --> 00:54:42,750
the cutter then you can see in here I

00:54:39,579 --> 00:54:50,040
have this runtime class cut a TEM you

00:54:42,750 --> 00:54:50,040
QEMU sorry for that and I have enabled

00:54:50,579 --> 00:54:57,700
there's no notes like here so it will

00:54:53,650 --> 00:55:02,829
run to the working out which is labeled

00:54:57,700 --> 00:55:08,740
with the cata runtime class and the

00:55:02,829 --> 00:55:10,750
other one is a yellow file not using

00:55:08,740 --> 00:55:16,200
console containers so it's a standard

00:55:10,750 --> 00:55:19,720
one and pulls the image from docker and

00:55:16,200 --> 00:55:24,279
you sell it as a part on the kubernetes

00:55:19,720 --> 00:55:26,589
cluster so we can look at my cubanelles

00:55:24,279 --> 00:55:28,960
cluster at the moment it's empty it's

00:55:26,589 --> 00:55:31,950
only running the basic administrative

00:55:28,960 --> 00:55:36,390
stuff so I created deployment with the

00:55:31,950 --> 00:55:40,569
kubernetes ARPA database yellow file

00:55:36,390 --> 00:55:56,589
without cutter so I can you can see the

00:55:40,569 --> 00:55:58,299
difference it will create a database so

00:55:56,589 --> 00:56:04,240
you can see in here the database running

00:55:58,299 --> 00:56:08,020
the park at the button and yeah you can

00:56:04,240 --> 00:56:11,770
access this a container by executors

00:56:08,020 --> 00:56:19,299
runtime for it and launched a secret

00:56:11,770 --> 00:56:21,910
plus of whatever you require the pot is

00:56:19,299 --> 00:56:24,730
running in here but if you want to see

00:56:21,910 --> 00:56:27,569
if the qemu virtualization is running

00:56:24,730 --> 00:56:30,309
well it's not because there is no

00:56:27,569 --> 00:56:33,160
container deployed so as you can see

00:56:30,309 --> 00:56:36,539
there's no process container process

00:56:33,160 --> 00:56:39,609
started up using just emulation for

00:56:36,539 --> 00:56:42,789
discounts a container so now to prove

00:56:39,609 --> 00:56:46,569
that you can run an oracle database

00:56:42,789 --> 00:56:50,559
using pata containers then I need to

00:56:46,569 --> 00:56:53,740
create a pot deployment for an orchid a

00:56:50,559 --> 00:56:56,990
base with the cutter a runtime class and

00:56:53,740 --> 00:56:59,240
I prepared a yellow file in here which

00:56:56,990 --> 00:57:02,540
showed you so we will create just

00:56:59,240 --> 00:57:15,170
applying for cutter to run the database

00:57:02,540 --> 00:57:19,490
on it command history so I will deploy

00:57:15,170 --> 00:57:23,900
this one so extra servers and then next

00:57:19,490 --> 00:57:25,880
engine will be created and part will be

00:57:23,900 --> 00:57:30,610
created so it's not pending because it

00:57:25,880 --> 00:57:35,780
will create a container for the database

00:57:30,610 --> 00:57:39,890
you can see it's now creating the

00:57:35,780 --> 00:57:42,800
container at the moment now you can see

00:57:39,890 --> 00:57:46,040
the database is created the cutter

00:57:42,800 --> 00:57:50,090
database and if you look at the working

00:57:46,040 --> 00:57:53,960
out now you can see QEMU we started with

00:57:50,090 --> 00:57:56,390
this container database container so

00:57:53,960 --> 00:57:58,250
that means that it runs an internal

00:57:56,390 --> 00:58:00,950
virtual machine and you can access it

00:57:58,250 --> 00:58:02,359
still as usual as any other container

00:58:00,950 --> 00:58:04,720
but you can see now

00:58:02,359 --> 00:58:07,160
this database is running on a cutter

00:58:04,720 --> 00:58:12,550
virtual machine so that's the proof it's

00:58:07,160 --> 00:58:17,210
it's working and well to conclude this

00:58:12,550 --> 00:58:22,540
you can run use multiple runtimes using

00:58:17,210 --> 00:58:25,730
either our cryo or al Kurdi or container

00:58:22,540 --> 00:58:28,730
it's all compatible with kubernetes so

00:58:25,730 --> 00:58:31,490
that's a really amazing thing I hope you

00:58:28,730 --> 00:58:33,800
enjoyed my session if you have any

00:58:31,490 --> 00:58:38,119
questions you can ask them through the

00:58:33,800 --> 00:58:41,770
facilities of stack con later on you can

00:58:38,119 --> 00:58:44,600
approach me by the socials which I will

00:58:41,770 --> 00:58:47,420
leave behind it's also not brothel I

00:58:44,600 --> 00:58:50,359
guess so I hope you enjoyed my session

00:58:47,420 --> 00:58:53,750
and well stay tuned and maybe we should

00:58:50,359 --> 00:58:56,690
each other somewhere the conference in

00:58:53,750 --> 00:58:59,849
real life in the future

00:58:56,690 --> 00:58:59,849

YouTube URL: https://www.youtube.com/watch?v=6Z0NHBUcd28


