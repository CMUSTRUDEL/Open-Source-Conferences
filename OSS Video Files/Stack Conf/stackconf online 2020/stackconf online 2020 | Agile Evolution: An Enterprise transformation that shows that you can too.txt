Title: stackconf online 2020 | Agile Evolution: An Enterprise transformation that shows that you can too
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	...by Martin Hinshelwood

“That would never work here.” You’ve likely heard this sentiment (or maybe you’ve even said it yourself). Good news: change is possible. Martin Hinshelwood explains how Microsoft’s Azure DevOps Services formerly VSTS went from a three-year waterfall delivery cycle to three-week iterations and open sourced the Azure DevOps task library and the Git Virtual File System.

There is a lot we can learn both from Microsoft’s success and failures in moving towards Scrum, Agile, & Continuous Delivery.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:16,410
[Music]

00:00:13,099 --> 00:00:20,070
hello my name is Martin hen Jewett

00:00:16,410 --> 00:00:21,980
and I run naked agility with Martin in

00:00:20,070 --> 00:00:25,079
Jewett I'm a professional scrum trainer

00:00:21,980 --> 00:00:27,450
Microsoft MVP and I've been working with

00:00:25,079 --> 00:00:30,599
the azure DevOps team at Microsoft for

00:00:27,450 --> 00:00:34,379
nearly 15 years and I'm here to tell you

00:00:30,599 --> 00:00:36,840
their story I'd like to thank stack

00:00:34,379 --> 00:00:39,120
Kampf for this opportunity to talk to

00:00:36,840 --> 00:00:41,700
you and please feel free to ask any

00:00:39,120 --> 00:00:45,810
questions in the chat I'll I'll be there

00:00:41,700 --> 00:00:49,410
and or at any time on Twitter I'm at mr.

00:00:45,810 --> 00:00:52,620
hinge is is me you can even find many

00:00:49,410 --> 00:00:56,190
other webcasts of mine on Naked agility

00:00:52,620 --> 00:00:58,920
TV and I'll be providing a link to the

00:00:56,190 --> 00:01:01,829
presentation at the end that will

00:00:58,920 --> 00:01:03,780
include much more information about the

00:01:01,829 --> 00:01:05,430
earlier DevOps team evolution towards

00:01:03,780 --> 00:01:08,880
agility I'm not going to be able to

00:01:05,430 --> 00:01:18,000
cover everything that I would love to

00:01:08,880 --> 00:01:22,380
cover in 45 minutes so first thing to

00:01:18,000 --> 00:01:27,299
think about is what what is DevOps

00:01:22,380 --> 00:01:29,790
that's an interesting thing because to

00:01:27,299 --> 00:01:31,500
devta to people DevOps means different

00:01:29,790 --> 00:01:32,909
things everybody thinks of it

00:01:31,500 --> 00:01:34,650
differently some people think of it as

00:01:32,909 --> 00:01:36,510
it's their job title I'm a DevOps

00:01:34,650 --> 00:01:38,610
engineer or I'm a DevOps Support

00:01:36,510 --> 00:01:40,610
Technician whatever those things are it

00:01:38,610 --> 00:01:43,530
could be about automation it could be

00:01:40,610 --> 00:01:45,540
about just being faster or bringing

00:01:43,530 --> 00:01:48,860
development and operations together and

00:01:45,540 --> 00:01:52,430
it's kind of about all of these things

00:01:48,860 --> 00:01:56,820
so I just want to show a little video

00:01:52,430 --> 00:02:00,479
that will maybe help us illustrate or

00:01:56,820 --> 00:02:03,689
help me illustrate the the scope and

00:02:00,479 --> 00:02:07,950
breadth that is at DevOps

00:02:03,689 --> 00:02:10,679
so if you just watch for a minute the

00:02:07,950 --> 00:02:13,260
first video I'm gonna show at two videos

00:02:10,679 --> 00:02:17,870
the second one's much shorter two videos

00:02:13,260 --> 00:02:21,330
the first one is from formula formula 1

00:02:17,870 --> 00:02:25,310
quite a long time ago and the second one

00:02:21,330 --> 00:02:25,310
is from formula 1 more recently

00:02:29,090 --> 00:02:36,210
but Harlan comes in for us hit stop time

00:02:32,430 --> 00:02:39,600
to refuel and change tire knew more

00:02:36,210 --> 00:02:41,580
himself changes the tire only four crew

00:02:39,600 --> 00:02:44,520
members including the driver are allowed

00:02:41,580 --> 00:02:47,340
to work on the car it's the tenth time

00:02:44,520 --> 00:02:50,690
Collins days in his seat anxious to get

00:02:47,340 --> 00:02:50,690
away let's watch

00:02:51,070 --> 00:03:10,860
[Music]

00:03:13,080 --> 00:03:16,779
[Music]

00:03:24,100 --> 00:03:33,150
[Music]

00:03:29,750 --> 00:03:35,549
the tires are changed to glass a cruel

00:03:33,150 --> 00:03:38,069
man polishes the windshield as Holland

00:03:35,549 --> 00:03:43,579
moved away jump 67th back in battery

00:03:38,069 --> 00:03:43,579
stop 67 seconds

00:03:45,640 --> 00:03:48,980
[Music]

00:03:51,970 --> 00:04:04,570
[Music]

00:04:00,000 --> 00:04:07,000
so what did you what did you notice was

00:04:04,570 --> 00:04:09,070
difference between those two you might

00:04:07,000 --> 00:04:14,200
have noticed that there was a lot more

00:04:09,070 --> 00:04:19,120
people involved in a modern Grand Prix

00:04:14,200 --> 00:04:20,920
than there was before and I would kind

00:04:19,120 --> 00:04:23,230
of argue that there's a lot more people

00:04:20,920 --> 00:04:26,530
involved in delivering software today

00:04:23,230 --> 00:04:29,710
than there ever was in the past it's

00:04:26,530 --> 00:04:35,650
it's a much bigger industry and if you

00:04:29,710 --> 00:04:38,440
think about 20 years ago when scrum was

00:04:35,650 --> 00:04:41,640
scrums a little bit older than 20 years

00:04:38,440 --> 00:04:44,860
the agile manifesto is a little bit

00:04:41,640 --> 00:04:46,540
younger than 20 years but 20 years ago

00:04:44,860 --> 00:04:49,419
it was much harder to deliver software

00:04:46,540 --> 00:04:51,040
than it is now today we have a lot more

00:04:49,419 --> 00:04:54,370
people involved there's a lot more

00:04:51,040 --> 00:04:56,890
things going on and while it's easier to

00:04:54,370 --> 00:05:00,250
deliver software there's a lot more

00:04:56,890 --> 00:05:02,590
moving parts and I think this this video

00:05:00,250 --> 00:05:06,610
kind of illustrates that that increase

00:05:02,590 --> 00:05:09,880
in the number of people also I would

00:05:06,610 --> 00:05:13,600
point out that it it this particular

00:05:09,880 --> 00:05:15,990
scenario was not really about the people

00:05:13,600 --> 00:05:20,229
that are involved they're all doing a

00:05:15,990 --> 00:05:23,010
specialized jobs and there's one person

00:05:20,229 --> 00:05:25,090
for each thing so it's more like

00:05:23,010 --> 00:05:29,650
automation all of these people are

00:05:25,090 --> 00:05:31,419
providing a piece of automation for this

00:05:29,650 --> 00:05:33,010
puzzle they're like little micro

00:05:31,419 --> 00:05:34,810
services all working together there's

00:05:33,010 --> 00:05:37,990
one service to remove the tire another

00:05:34,810 --> 00:05:39,990
to replace it one service to just jack

00:05:37,990 --> 00:05:43,090
up the vehicle and I don't know if you

00:05:39,990 --> 00:05:46,150
can see there but behind the person with

00:05:43,090 --> 00:05:50,620
the jack is another person with a jack a

00:05:46,150 --> 00:05:55,990
backup jack it must have failed at some

00:05:50,620 --> 00:05:58,600
point during these pit stops and they

00:05:55,990 --> 00:06:01,419
have out somebody there to back that

00:05:58,600 --> 00:06:04,180
person up that's the fix they've put in

00:06:01,419 --> 00:06:04,810
just just to make sure that it happens

00:06:04,180 --> 00:06:07,599
correctly

00:06:04,810 --> 00:06:09,569
and there are people all over the place

00:06:07,599 --> 00:06:12,430
monitoring the the process

00:06:09,569 --> 00:06:13,900
making seeing how how fast things are

00:06:12,430 --> 00:06:15,940
how efficient things are and maybe

00:06:13,900 --> 00:06:17,440
potentially changing things up for the

00:06:15,940 --> 00:06:20,590
next Peck stop to make it just that

00:06:17,440 --> 00:06:22,930
little bit faster so this kind of

00:06:20,590 --> 00:06:26,319
constant change going on there as well

00:06:22,930 --> 00:06:29,259
to that automation kind of like your

00:06:26,319 --> 00:06:32,139
DevOps pipeline there's also this idea

00:06:29,259 --> 00:06:34,629
and we talk about it a lot in software

00:06:32,139 --> 00:06:37,360
now called shift left we want to push

00:06:34,629 --> 00:06:41,590
more things to the source of the problem

00:06:37,360 --> 00:06:44,409
than to the outcomes later so for

00:06:41,590 --> 00:06:46,389
example we want to find more bugs during

00:06:44,409 --> 00:06:48,490
the development process rather than

00:06:46,389 --> 00:06:51,400
during the production process but in

00:06:48,490 --> 00:06:54,039
order to do that we need to shorten all

00:06:51,400 --> 00:06:56,319
of our feedback loops and if you see the

00:06:54,039 --> 00:06:59,289
the first the first pit stop took over

00:06:56,319 --> 00:07:02,680
60 seconds and if you watch the video

00:06:59,289 --> 00:07:05,940
you'll see the majority of the time was

00:07:02,680 --> 00:07:10,810
in changing changing the tires the the

00:07:05,940 --> 00:07:14,229
refuelling was done many many many

00:07:10,810 --> 00:07:17,830
seconds before the tires were were

00:07:14,229 --> 00:07:21,099
changed so the the most difficult

00:07:17,830 --> 00:07:27,940
time-consuming problem that they had in

00:07:21,099 --> 00:07:28,930
that time was changing the tires you saw

00:07:27,940 --> 00:07:33,099
him get trying to get a sledge hammer

00:07:28,930 --> 00:07:37,870
into hammer off the tires so that that

00:07:33,099 --> 00:07:39,099
changed that was much longer refuelings

00:07:37,870 --> 00:07:41,039
done you can see it's not even get the

00:07:39,099 --> 00:07:44,349
first tire off when the refuelling is

00:07:41,039 --> 00:07:46,990
completed so the biggest pain is at the

00:07:44,349 --> 00:07:49,630
tire change now they were more astute of

00:07:46,990 --> 00:07:52,650
you might have noticed that during the

00:07:49,630 --> 00:07:56,169
Melbourne pitstop they didn't even

00:07:52,650 --> 00:07:58,120
refuel the car once they became faster

00:07:56,169 --> 00:08:02,319
at changing the tires the thing that

00:07:58,120 --> 00:08:04,659
took much longer was the the refuelling

00:08:02,319 --> 00:08:06,759
and and in fact if you look at the

00:08:04,659 --> 00:08:10,659
history of Formula One you'll see there

00:08:06,759 --> 00:08:13,419
was a point in time where they tried to

00:08:10,659 --> 00:08:16,960
fix the refueling problem by refueling

00:08:13,419 --> 00:08:20,830
the cars faster and that resulted in

00:08:16,960 --> 00:08:22,690
some big accidents and casualties

00:08:20,830 --> 00:08:23,639
because they were putting the fuel in

00:08:22,690 --> 00:08:25,830
too far

00:08:23,639 --> 00:08:28,260
things heat up when you do things fast

00:08:25,830 --> 00:08:30,870
and there were explosions and fires and

00:08:28,260 --> 00:08:33,330
there in in the pits so what they

00:08:30,870 --> 00:08:36,000
changed to was a tactic of making the

00:08:33,330 --> 00:08:38,820
cars more efficient so you didn't need

00:08:36,000 --> 00:08:43,260
to refuel them as often so making the

00:08:38,820 --> 00:08:46,410
engines more efficient improved that and

00:08:43,260 --> 00:08:51,980
I think that that's the the takeaway

00:08:46,410 --> 00:08:54,120
from those two videos it's not about

00:08:51,980 --> 00:08:56,580
just you know we're going to go to

00:08:54,120 --> 00:09:01,100
install DevOps it's about a continuous

00:08:56,580 --> 00:09:06,510
process of evolution we are changing

00:09:01,100 --> 00:09:09,240
from long processes to making things as

00:09:06,510 --> 00:09:11,240
short as possible and then figuring out

00:09:09,240 --> 00:09:14,070
how do we make all those short things

00:09:11,240 --> 00:09:19,050
more efficient less your DevOps pipeline

00:09:14,070 --> 00:09:22,200
so if I was to define DevOps um I love

00:09:19,050 --> 00:09:24,779
this quotes from Donovan brown at

00:09:22,200 --> 00:09:28,370
Microsoft he's there at DevOps practice

00:09:24,779 --> 00:09:31,170
elite and DevOps is the union of people

00:09:28,370 --> 00:09:33,540
processes and products to enable the

00:09:31,170 --> 00:09:35,880
continuous delivery of value to your

00:09:33,540 --> 00:09:39,029
end-users if you look at the definition

00:09:35,880 --> 00:09:42,200
for any of the agile practices scrum or

00:09:39,029 --> 00:09:46,140
Kanban you'll see it they are both about

00:09:42,200 --> 00:09:49,050
and adapting the process to deliver

00:09:46,140 --> 00:09:53,910
value as quickly as possible and that's

00:09:49,050 --> 00:09:59,000
the important thing there uh according

00:09:53,910 --> 00:10:02,040
to the 2018 state of DevOps report

00:09:59,000 --> 00:10:04,500
presented by door dora the top

00:10:02,040 --> 00:10:06,570
performing devops companies when

00:10:04,500 --> 00:10:10,620
compared to the low performing ones

00:10:06,570 --> 00:10:13,770
spends 66 percent last time on customer

00:10:10,620 --> 00:10:17,940
support issues 50 percent less time on

00:10:13,770 --> 00:10:20,850
customer identified defects and more

00:10:17,940 --> 00:10:22,980
importantly they spend over 66% more

00:10:20,850 --> 00:10:25,860
time on new work

00:10:22,980 --> 00:10:27,990
what would you business rather spend

00:10:25,860 --> 00:10:30,630
money and time on would they rather

00:10:27,990 --> 00:10:32,970
spend money on customer support issues

00:10:30,630 --> 00:10:36,910
defects and security issues or would

00:10:32,970 --> 00:10:38,890
they rather spend their money on new

00:10:36,910 --> 00:10:43,240
I know what my business would prefer to

00:10:38,890 --> 00:10:45,730
spend its money on these high performing

00:10:43,240 --> 00:10:48,430
organizations spend more time innovating

00:10:45,730 --> 00:10:50,800
and last time keeping the lights on

00:10:48,430 --> 00:10:54,790
that's what we're trying to achieve how

00:10:50,800 --> 00:10:56,890
do we reduce that that piece and we can

00:10:54,790 --> 00:10:59,710
be more adaptive to the market the

00:10:56,890 --> 00:11:02,950
shorter that pieces and I'm just trying

00:10:59,710 --> 00:11:05,560
to think of two epic at failures that I

00:11:02,950 --> 00:11:08,860
could list for you and I did actually

00:11:05,560 --> 00:11:12,610
think of think of a two at one was a

00:11:08,860 --> 00:11:15,160
quality issue and very poor quality

00:11:12,610 --> 00:11:16,990
deliverable that resulted in massive

00:11:15,160 --> 00:11:19,360
expense and trying to get this product

00:11:16,990 --> 00:11:22,060
out the door and it was a product called

00:11:19,360 --> 00:11:27,760
Windows Vista that was a multi-billion

00:11:22,060 --> 00:11:31,470
dollar mistake mistake error problem for

00:11:27,760 --> 00:11:35,740
Microsoft at the time and at one point I

00:11:31,470 --> 00:11:37,570
heard tell that Microsoft took 70,000

00:11:35,740 --> 00:11:39,310
software engineers off of all the other

00:11:37,570 --> 00:11:41,320
stuff they were working on to go fix

00:11:39,310 --> 00:11:44,110
bugs in Windows we start to get it out

00:11:41,320 --> 00:11:45,610
the door and it didn't have I I don't

00:11:44,110 --> 00:11:48,130
know if you if you've been following

00:11:45,610 --> 00:11:50,470
Windows Vista you might have seen all of

00:11:48,130 --> 00:11:51,640
the here's the awesome features we're

00:11:50,470 --> 00:11:55,150
going to ship in this product at the

00:11:51,640 --> 00:11:57,700
start of the release and almost none of

00:11:55,150 --> 00:11:59,920
them made it into the final release they

00:11:57,700 --> 00:12:01,600
had to cut at most of the new features

00:11:59,920 --> 00:12:03,940
in order to pay back their technical

00:12:01,600 --> 00:12:08,350
debt fix their struggle with complexity

00:12:03,940 --> 00:12:11,170
so that was our quality issue in that

00:12:08,350 --> 00:12:13,240
version of the the product and they then

00:12:11,170 --> 00:12:15,850
fix that with Windows 7 whatever you may

00:12:13,240 --> 00:12:17,230
think about Windows in general Windows 7

00:12:15,850 --> 00:12:20,170
was a pretty stable well-regarded

00:12:17,230 --> 00:12:23,530
product and then they made another

00:12:20,170 --> 00:12:26,440
mistake they had a mismatch to customer

00:12:23,530 --> 00:12:28,630
desires Windows 8 you either loved it or

00:12:26,440 --> 00:12:32,320
you hated it it drove a lot of people

00:12:28,630 --> 00:12:37,360
away from windows because they changed

00:12:32,320 --> 00:12:40,600
too much too quickly so they had to roll

00:12:37,360 --> 00:12:43,060
a lot of it back with Windows 8.1 if you

00:12:40,600 --> 00:12:45,910
remember that and then Windows 10 is a

00:12:43,060 --> 00:12:49,030
completely different model I'm going to

00:12:45,910 --> 00:12:50,320
mention them Windows 10 a few times but

00:12:49,030 --> 00:12:54,340
what I really want to talk about

00:12:50,320 --> 00:12:59,800
where I want to focus our time is on the

00:12:54,340 --> 00:13:04,630
team at Microsoft that drove the need

00:12:59,800 --> 00:13:07,390
for agility the need for DevOps inside

00:13:04,630 --> 00:13:12,760
of Microsoft the need for that change

00:13:07,390 --> 00:13:15,310
from a tailor istic long traditional

00:13:12,760 --> 00:13:19,360
project management delivery schedule to

00:13:15,310 --> 00:13:22,870
an empirical based continuous delivery

00:13:19,360 --> 00:13:25,540
model and this team the Azure DevOps

00:13:22,870 --> 00:13:28,420
team at Microsoft was the first big team

00:13:25,540 --> 00:13:30,940
inside of Microsoft to do this to move

00:13:28,420 --> 00:13:33,940
towards that model and to just deal with

00:13:30,940 --> 00:13:35,620
their problems and getting faster at

00:13:33,940 --> 00:13:37,090
delivering stuff create transparency

00:13:35,620 --> 00:13:38,860
which means you can see your problems

00:13:37,090 --> 00:13:41,200
and then just deal them with them one at

00:13:38,860 --> 00:13:42,940
a time and but many other teams inside

00:13:41,200 --> 00:13:45,910
of Microsoft have followed so much so

00:13:42,940 --> 00:13:49,240
that the majority of teams today inside

00:13:45,910 --> 00:13:51,910
of Microsoft are now agile continuous

00:13:49,240 --> 00:13:53,950
delivery teams even Windows is delivered

00:13:51,910 --> 00:13:57,550
on a continuous delivery schedule to

00:13:53,950 --> 00:13:59,430
over 900 million machines worldwide so

00:13:57,550 --> 00:14:03,040
nearly a billion machines in the world

00:13:59,430 --> 00:14:06,940
receive Windows on a continuous floor

00:14:03,040 --> 00:14:09,160
basis which is if the windows team can

00:14:06,940 --> 00:14:11,200
do it with four and a half thousand

00:14:09,160 --> 00:14:12,610
software engineers working on it and the

00:14:11,200 --> 00:14:15,010
complexity of the product that they have

00:14:12,610 --> 00:14:16,090
the rest of us really don't have an

00:14:15,010 --> 00:14:18,730
excuse anymore

00:14:16,090 --> 00:14:20,140
but there is your DevOps team kind of

00:14:18,730 --> 00:14:25,570
started that they had a little product

00:14:20,140 --> 00:14:29,680
called team foundation server and this

00:14:25,570 --> 00:14:33,120
little product they wanted to to deliver

00:14:29,680 --> 00:14:36,730
faster they found that they had massive

00:14:33,120 --> 00:14:39,540
issues so they moved in 2010 with sprint

00:14:36,730 --> 00:14:43,570
one in August of 2010 to delivering

00:14:39,540 --> 00:14:45,970
their product and software a lot more

00:14:43,570 --> 00:14:47,980
quickly they moved to three week

00:14:45,970 --> 00:14:51,970
Sprint's that's what worked for them

00:14:47,980 --> 00:14:55,270
sprint one started in 2010 where they

00:14:51,970 --> 00:14:58,930
moved their product to the cloud they

00:14:55,270 --> 00:15:02,290
created at what is know as your DevOps

00:14:58,930 --> 00:15:04,180
as an online service and then continued

00:15:02,290 --> 00:15:07,390
to ship to production every

00:15:04,180 --> 00:15:11,110
three weeks for the next eight years in

00:15:07,390 --> 00:15:15,040
November 2018 they were on sprint 145 I

00:15:11,110 --> 00:15:18,670
think they just shipped sprint 170 I

00:15:15,040 --> 00:15:22,060
think is 172 production and and they

00:15:18,670 --> 00:15:25,980
have not missed a sprint deadline for

00:15:22,060 --> 00:15:29,529
reasons other than business value in

00:15:25,980 --> 00:15:33,160
nearly ten years so what I mean by that

00:15:29,529 --> 00:15:35,380
is that at the end of every sprint they

00:15:33,160 --> 00:15:38,290
have been technically able to ship to

00:15:35,380 --> 00:15:39,730
production and the vast majority of the

00:15:38,290 --> 00:15:42,399
time they have shipped to production

00:15:39,730 --> 00:15:46,209
there's been a couple of Sprint's that

00:15:42,399 --> 00:15:47,830
fell over some kind of holiday usually

00:15:46,209 --> 00:15:51,160
Christmas where there's not many people

00:15:47,830 --> 00:15:54,040
there and the business just deemed that

00:15:51,160 --> 00:15:55,420
there wasn't enough value to warrant

00:15:54,040 --> 00:15:57,580
shipping production and I think that's

00:15:55,420 --> 00:15:59,529
the decision that your business should

00:15:57,580 --> 00:16:01,180
have it should not be a technical

00:15:59,529 --> 00:16:03,640
decision it should you should have

00:16:01,180 --> 00:16:05,380
usable working software at the end of

00:16:03,640 --> 00:16:08,290
every sprint and that's what they tried

00:16:05,380 --> 00:16:10,770
to achieve but they found that the focus

00:16:08,290 --> 00:16:14,260
need to change in their organization

00:16:10,770 --> 00:16:16,330
Satya is now the CEO of Microsoft and he

00:16:14,260 --> 00:16:19,870
talks about this one engineering system

00:16:16,330 --> 00:16:22,000
at Microsoft and they moved really

00:16:19,870 --> 00:16:24,430
aggressively towards Azure DevOps as the

00:16:22,000 --> 00:16:26,709
one yes one engineering system

00:16:24,430 --> 00:16:30,820
they're now following on from that this

00:16:26,709 --> 00:16:33,190
is a point in time story okay don't just

00:16:30,820 --> 00:16:36,430
copy Microsoft's model make your own

00:16:33,190 --> 00:16:39,850
model they are now flowing into one es

00:16:36,430 --> 00:16:42,670
is currently a hybrid between github and

00:16:39,850 --> 00:16:44,500
Azure DevOps depending on the team and

00:16:42,670 --> 00:16:46,540
they're moving more towards github as

00:16:44,500 --> 00:16:48,279
that one engineering system but it's

00:16:46,540 --> 00:16:51,310
gonna take time to get there cuz as your

00:16:48,279 --> 00:16:53,320
DevOps is a lot more feature full than

00:16:51,310 --> 00:16:55,900
github is just now but I think the

00:16:53,320 --> 00:16:58,900
important takeaway here is at the the

00:16:55,900 --> 00:17:01,839
middle at section there so I would any

00:16:58,900 --> 00:17:03,910
day of the week trade-off features for

00:17:01,839 --> 00:17:06,939
our own productivity it's much more

00:17:03,910 --> 00:17:09,400
valuable for you as engineers for your

00:17:06,939 --> 00:17:14,110
organization to have your engineers

00:17:09,400 --> 00:17:16,540
working on productivity solutions how do

00:17:14,110 --> 00:17:17,800
we make our engineering process faster

00:17:16,540 --> 00:17:19,120
how do we get better at the

00:17:17,800 --> 00:17:22,150
during software that's where your focus

00:17:19,120 --> 00:17:24,820
should be and that mental mentality that

00:17:22,150 --> 00:17:27,400
mental shift has transitioned Microsoft

00:17:24,820 --> 00:17:29,670
from an organization that shipped to

00:17:27,400 --> 00:17:32,470
production maybe once every two years

00:17:29,670 --> 00:17:34,150
the TFS team this year DevOps team was

00:17:32,470 --> 00:17:36,670
once every two years

00:17:34,150 --> 00:17:38,800
Windows was between four and six years

00:17:36,670 --> 00:17:42,660
depending on the the release I mean

00:17:38,800 --> 00:17:42,660
these were long development schedules

00:17:45,270 --> 00:17:52,030
now DevOps if you look at just the data

00:17:49,810 --> 00:17:52,960
that comes out of Azure DevOps so

00:17:52,030 --> 00:17:55,000
Microsoft one

00:17:52,960 --> 00:17:57,550
yes solution that we can all use as well

00:17:55,000 --> 00:17:59,860
but that's that's that solution they

00:17:57,550 --> 00:18:01,840
have 96 thousand engineers working in

00:17:59,860 --> 00:18:04,000
Azure DevOps and they're doing a hundred

00:18:01,840 --> 00:18:08,260
and eighty three thousand deployments

00:18:04,000 --> 00:18:10,540
per day that's more deployments than

00:18:08,260 --> 00:18:13,540
they have engineers many more two

00:18:10,540 --> 00:18:16,210
million get permits per month five

00:18:13,540 --> 00:18:16,860
hundred thousand work items updated per

00:18:16,210 --> 00:18:20,320
month

00:18:16,860 --> 00:18:22,180
5,000,000 work item views per day I mean

00:18:20,320 --> 00:18:24,490
these are really powerful figures that's

00:18:22,180 --> 00:18:26,740
a massive difference for their

00:18:24,490 --> 00:18:28,810
organization those are a bunch of

00:18:26,740 --> 00:18:31,120
information on the link at the bottom

00:18:28,810 --> 00:18:33,250
but I want to talk to you about the

00:18:31,120 --> 00:18:36,190
things that Microsoft did to improve

00:18:33,250 --> 00:18:37,900
that I'm going to try and get through as

00:18:36,190 --> 00:18:40,330
many of these as possible again the

00:18:37,900 --> 00:18:44,110
slides will be available for you at the

00:18:40,330 --> 00:18:46,780
end of the session and I'm quite happy

00:18:44,110 --> 00:18:49,300
to chat about any of them during the

00:18:46,780 --> 00:18:51,940
session I'll be there to talk to you so

00:18:49,300 --> 00:18:54,910
ask any questions in the chat which I

00:18:51,940 --> 00:18:58,180
think will be on oh I think it will be

00:18:54,910 --> 00:18:59,340
here the chat should be below me and

00:18:58,180 --> 00:19:01,450
I'll be there to answer those questions

00:18:59,340 --> 00:19:04,210
so there are a number of things that

00:19:01,450 --> 00:19:08,740
changed inside of Microsoft a lot of

00:19:04,210 --> 00:19:12,340
things changed in order to get to to

00:19:08,740 --> 00:19:15,160
this this new model things that are just

00:19:12,340 --> 00:19:16,930
true okay things that we have to you

00:19:15,160 --> 00:19:18,610
figure out your way of solving the

00:19:16,930 --> 00:19:21,100
problem but these are things you're

00:19:18,610 --> 00:19:23,920
going to have to deal with so the first

00:19:21,100 --> 00:19:26,530
one is being customer obsessed you have

00:19:23,920 --> 00:19:29,470
to focus on the customer you don't just

00:19:26,530 --> 00:19:30,909
want customers to be okay with your

00:19:29,470 --> 00:19:34,149
product or happy with you

00:19:30,909 --> 00:19:36,460
product they need to be delighted with

00:19:34,149 --> 00:19:38,349
your product and the way you do that is

00:19:36,460 --> 00:19:40,989
you need to listen to your customers but

00:19:38,349 --> 00:19:42,789
you need to use quantitative measures to

00:19:40,989 --> 00:19:44,950
listen to your customers don't just

00:19:42,789 --> 00:19:47,499
think you know what they want

00:19:44,950 --> 00:19:49,269
Microsoft use these many tools at for

00:19:47,499 --> 00:19:51,159
this they have their developer community

00:19:49,269 --> 00:19:53,590
and forums again as your DevOps is a

00:19:51,159 --> 00:19:56,349
developer focused tool so they have a

00:19:53,590 --> 00:20:00,190
little bit of a leg up there they have a

00:19:56,349 --> 00:20:04,119
user voice they have Stack Overflow they

00:20:00,190 --> 00:20:06,549
have in product feedback and suggestions

00:20:04,119 --> 00:20:09,940
you can report a problem make a

00:20:06,549 --> 00:20:12,999
suggestion and all of those things that

00:20:09,940 --> 00:20:15,309
you type in there it will get to the

00:20:12,999 --> 00:20:17,529
software engineering teams working on

00:20:15,309 --> 00:20:19,599
that part of the product that is the

00:20:17,529 --> 00:20:21,249
point the software engineering teams

00:20:19,599 --> 00:20:23,739
need to be brought closer to your

00:20:21,249 --> 00:20:25,809
customer how do you do that at scale

00:20:23,739 --> 00:20:28,169
these are some of the methods that

00:20:25,809 --> 00:20:32,529
you're going to use to do that at scale

00:20:28,169 --> 00:20:36,879
so providing that feedback at getting it

00:20:32,529 --> 00:20:40,119
actionable in fact and this is a list of

00:20:36,879 --> 00:20:44,080
all of the customers the biggest

00:20:40,119 --> 00:20:47,259
customers that uses your DevOps so one

00:20:44,080 --> 00:20:50,649
of my customers is one two three fourth

00:20:47,259 --> 00:20:52,059
from the top there's a couple of other

00:20:50,649 --> 00:20:54,039
of my customers and there are companies

00:20:52,059 --> 00:20:56,379
that I've worked with but the tops one

00:20:54,039 --> 00:20:59,139
of my customers and you can see they're

00:20:56,379 --> 00:21:01,929
looking at the customer satisfaction

00:20:59,139 --> 00:21:04,179
with each area of the product and so

00:21:01,929 --> 00:21:06,369
this is a based on number of engaged

00:21:04,179 --> 00:21:10,989
users so there's my customer for from

00:21:06,369 --> 00:21:13,659
the top has 4914 engaged users when this

00:21:10,989 --> 00:21:17,799
spreadsheet was created em and their

00:21:13,659 --> 00:21:19,029
satisfaction with each of the areas of

00:21:17,799 --> 00:21:21,549
the product and you can see that there's

00:21:19,029 --> 00:21:24,190
one this at very low and there's

00:21:21,549 --> 00:21:27,580
actually a good reason for that which is

00:21:24,190 --> 00:21:29,039
a company specific thing but and you can

00:21:27,580 --> 00:21:30,999
see they're looking at that data their

00:21:29,039 --> 00:21:32,830
understanding their customer a lot

00:21:30,999 --> 00:21:36,790
better than they've ever had to before

00:21:32,830 --> 00:21:39,640
and specific customers as well

00:21:36,790 --> 00:21:41,650
so they have a definition of done for

00:21:39,640 --> 00:21:44,530
this team their definition of done is

00:21:41,650 --> 00:21:47,980
live in production that that as far as

00:21:44,530 --> 00:21:51,310
I'm concerned as a professional scrum

00:21:47,980 --> 00:21:53,440
trainer and I believe that in order for

00:21:51,310 --> 00:21:55,420
software to be usable and in order for

00:21:53,440 --> 00:21:58,840
you to get feedback from your users you

00:21:55,420 --> 00:22:02,350
have to be in production it's really not

00:21:58,840 --> 00:22:04,750
okay to just be on your test server and

00:22:02,350 --> 00:22:07,200
you're going to do UAT that does not get

00:22:04,750 --> 00:22:10,030
you actionable feedback from real users

00:22:07,200 --> 00:22:11,260
you need to be in production and if

00:22:10,030 --> 00:22:13,210
you're going to be in production you

00:22:11,260 --> 00:22:16,260
need to be collecting as much telemetry

00:22:13,210 --> 00:22:18,400
as possible to support whatever

00:22:16,260 --> 00:22:19,960
hypothesis you had for adding that

00:22:18,400 --> 00:22:21,910
feature or making that change in the

00:22:19,960 --> 00:22:24,310
first place so you don't just make

00:22:21,910 --> 00:22:26,230
changes you have to have a hypothesis if

00:22:24,310 --> 00:22:28,480
I make this change this will happen

00:22:26,230 --> 00:22:30,400
we're gonna measure these things and we

00:22:28,480 --> 00:22:32,500
should see this result and then measure

00:22:30,400 --> 00:22:35,050
it monitor it and make sure you're

00:22:32,500 --> 00:22:36,040
getting towards those things and so in

00:22:35,050 --> 00:22:38,710
order to do that you need to collect

00:22:36,040 --> 00:22:44,440
lots of data and there's your dev ops

00:22:38,710 --> 00:22:48,100
team collect and a plethora of data on

00:22:44,440 --> 00:22:50,020
how their product is doing how we as

00:22:48,100 --> 00:22:52,540
users are interacting with the product

00:22:50,020 --> 00:22:55,420
what features were using how often were

00:22:52,540 --> 00:22:57,340
using those features whether we're able

00:22:55,420 --> 00:23:00,280
to find those features all kinds of

00:22:57,340 --> 00:23:04,090
things in there so if we look at some of

00:23:00,280 --> 00:23:06,760
their measures they're measuring usage

00:23:04,090 --> 00:23:09,750
so acquisition engagement satisfaction

00:23:06,760 --> 00:23:12,820
churn and feature usage these are all

00:23:09,750 --> 00:23:17,530
important measures from our front end

00:23:12,820 --> 00:23:19,630
perspective they're measuring velocity

00:23:17,530 --> 00:23:22,840
have fast they're able to go so with

00:23:19,630 --> 00:23:25,300
time to build time to self test how long

00:23:22,840 --> 00:23:26,500
does it take for a software engineer to

00:23:25,300 --> 00:23:28,450
get to the point where they can test

00:23:26,500 --> 00:23:29,560
their own code which might be different

00:23:28,450 --> 00:23:31,900
from time to build because you have to

00:23:29,560 --> 00:23:34,390
set up a bunch of stuff time to deploy

00:23:31,900 --> 00:23:37,360
and time to learn how quickly can we

00:23:34,390 --> 00:23:40,360
learn from our mistakes learn from our

00:23:37,360 --> 00:23:44,230
features these are important measures as

00:23:40,360 --> 00:23:46,570
well and LifeSite health and you need to

00:23:44,230 --> 00:23:48,940
have your software engineers supporting

00:23:46,570 --> 00:23:50,160
the product in order to really

00:23:48,940 --> 00:23:52,170
understand

00:23:50,160 --> 00:23:53,940
and that your product is working that

00:23:52,170 --> 00:23:56,730
it's online that everything is good so

00:23:53,940 --> 00:23:59,550
tainted attack time to communicate time

00:23:56,730 --> 00:24:01,560
to mitigate an issue customer impact for

00:23:59,550 --> 00:24:02,580
an issue these are all things that

00:24:01,560 --> 00:24:04,800
you're going to be monitoring and

00:24:02,580 --> 00:24:06,480
measuring I'm going to add some things

00:24:04,800 --> 00:24:09,630
which you might want a screen shot that

00:24:06,480 --> 00:24:11,760
you should not be measuring don't

00:24:09,630 --> 00:24:13,800
measure original estimate completed

00:24:11,760 --> 00:24:15,840
errors lines of code team capacity team

00:24:13,800 --> 00:24:18,840
burn down team velocity or a number of

00:24:15,840 --> 00:24:20,910
bugs found they are all irrelevant to

00:24:18,840 --> 00:24:23,670
your ability to deliver value to your

00:24:20,910 --> 00:24:26,160
customers and in fact watching and

00:24:23,670 --> 00:24:28,890
monitoring these things will have a

00:24:26,160 --> 00:24:31,200
negative impact on your ability to

00:24:28,890 --> 00:24:35,630
deliver value to your customers so watch

00:24:31,200 --> 00:24:40,410
out you for that for sure

00:24:35,630 --> 00:24:44,760
in order to and I always like to say how

00:24:40,410 --> 00:24:47,250
do we learn to do something well the

00:24:44,760 --> 00:24:51,330
only way to do that is to do it all of

00:24:47,250 --> 00:24:53,730
the time we have to build a habit if

00:24:51,330 --> 00:24:56,010
something is painful and hard to do we

00:24:53,730 --> 00:24:58,320
need to do it more to get better at it

00:24:56,010 --> 00:25:01,980
to build that muscle memory so you need

00:24:58,320 --> 00:25:04,620
to find what hurts and do it more get

00:25:01,980 --> 00:25:06,510
round that loop and iterate much more

00:25:04,620 --> 00:25:09,090
quickly than you ever have in the past

00:25:06,510 --> 00:25:12,570
and in the old way for this particular

00:25:09,090 --> 00:25:15,060
team they had a you know the traditional

00:25:12,570 --> 00:25:17,310
we've got some coding we've got a test

00:25:15,060 --> 00:25:19,440
and stabilization phase we're going to

00:25:17,310 --> 00:25:21,570
have a beta release and then we'll do

00:25:19,440 --> 00:25:23,520
some more code we'll have a code freeze

00:25:21,570 --> 00:25:26,000
test and stabilization and then the RTM

00:25:23,520 --> 00:25:29,100
but what they found was it was

00:25:26,000 --> 00:25:31,290
impossible and to respond to the

00:25:29,100 --> 00:25:34,800
customer feedback by the time you're in

00:25:31,290 --> 00:25:36,750
your your past your beta phase okay your

00:25:34,800 --> 00:25:39,150
first beta phase and you're getting

00:25:36,750 --> 00:25:41,010
feedback from your customers product

00:25:39,150 --> 00:25:44,730
management has already started planning

00:25:41,010 --> 00:25:47,820
the next release so even getting

00:25:44,730 --> 00:25:49,980
feedback between beta and RTM you can

00:25:47,820 --> 00:25:51,390
add new features you're probably not

00:25:49,980 --> 00:25:52,800
going to be able have to add those new

00:25:51,390 --> 00:25:54,600
features to the next version of your

00:25:52,800 --> 00:25:56,670
product it's going to get into the one

00:25:54,600 --> 00:25:59,190
after that so you've got a for this

00:25:56,670 --> 00:26:01,950
particular team had a two year release

00:25:59,190 --> 00:26:04,050
cycle with a service pack half way so

00:26:01,950 --> 00:26:06,540
they were talking four years

00:26:04,050 --> 00:26:08,960
- really action feedback from users on

00:26:06,540 --> 00:26:12,860
the grander scheme of the the product

00:26:08,960 --> 00:26:16,800
which is just far too long in the modern

00:26:12,860 --> 00:26:19,800
software world so in the new way they

00:26:16,800 --> 00:26:21,780
started delivering sprints or sprint one

00:26:19,800 --> 00:26:24,630
two three four three week Sprint's let's

00:26:21,780 --> 00:26:28,380
just go but they when they first started

00:26:24,630 --> 00:26:30,660
and they had a little we needed a little

00:26:28,380 --> 00:26:33,480
bit of a safety net we feel like this is

00:26:30,660 --> 00:26:36,000
going to be hard we feel like we need an

00:26:33,480 --> 00:26:38,910
extra safety net in there so they

00:26:36,000 --> 00:26:41,460
created this stabilization period of

00:26:38,910 --> 00:26:43,710
time after sprint five and then they

00:26:41,460 --> 00:26:46,290
would start sprint six and what they

00:26:43,710 --> 00:26:50,730
wanted to happen was that as they were

00:26:46,290 --> 00:26:52,410
going their engineers would fix bugs so

00:26:50,730 --> 00:26:55,230
issues would appear they would fix them

00:26:52,410 --> 00:26:58,290
appear fix them as this Kenna Lane

00:26:55,230 --> 00:27:01,500
wibbels along of a being the number of

00:26:58,290 --> 00:27:03,150
defects in the product and then they

00:27:01,500 --> 00:27:04,680
shouldn't have anything to do in the

00:27:03,150 --> 00:27:06,150
stabilization phase but we've got it

00:27:04,680 --> 00:27:08,610
there just in case it's our safety net

00:27:06,150 --> 00:27:12,300
but what they found was that actually

00:27:08,610 --> 00:27:14,610
having that safety net caused the

00:27:12,300 --> 00:27:17,670
software engineers to think you know

00:27:14,610 --> 00:27:19,260
that mental well we can fix that in

00:27:17,670 --> 00:27:21,270
stabilization but don't need to get that

00:27:19,260 --> 00:27:23,370
done just now we've got that

00:27:21,270 --> 00:27:27,060
stabilization type so they relied too

00:27:23,370 --> 00:27:30,210
heavily on it so try and avoid having

00:27:27,060 --> 00:27:33,870
that at all and then they moved to this

00:27:30,210 --> 00:27:35,850
at complete three week sprint cycle they

00:27:33,870 --> 00:27:37,890
actually have a four week cycle because

00:27:35,850 --> 00:27:40,670
it takes a week for them to deploy their

00:27:37,890 --> 00:27:45,060
software at the point in time this

00:27:40,670 --> 00:27:48,180
happened and so the the have three weeks

00:27:45,060 --> 00:27:50,490
of their sprint is three weeks but

00:27:48,180 --> 00:27:52,170
deployment takes a week sprint three

00:27:50,490 --> 00:27:52,620
weeks the planet takes a week that's how

00:27:52,170 --> 00:27:54,540
that works

00:27:52,620 --> 00:27:55,940
so they start the next sprint while the

00:27:54,540 --> 00:27:59,340
deployment for the previous sprint is

00:27:55,940 --> 00:28:01,500
still ongoing okay that's where there's

00:27:59,340 --> 00:28:05,130
that overlap there you can see in the

00:28:01,500 --> 00:28:07,230
diagram and what's happened for this

00:28:05,130 --> 00:28:10,110
team was the value that they've got from

00:28:07,230 --> 00:28:13,410
it at will in 2012 they were delivering

00:28:10,110 --> 00:28:16,020
about 22 features to production each

00:28:13,410 --> 00:28:18,330
year that's 22 new features new things

00:28:16,020 --> 00:28:21,210
for customers now there

00:28:18,330 --> 00:28:26,159
delivering over 250 new features to

00:28:21,210 --> 00:28:30,809
production each year imagine if your if

00:28:26,159 --> 00:28:32,789
your stakeholders could get ten times

00:28:30,809 --> 00:28:35,640
the number of features per year would

00:28:32,789 --> 00:28:38,130
they be willing to invest in making

00:28:35,640 --> 00:28:40,470
things a little bit more efficient and

00:28:38,130 --> 00:28:46,260
making things better that's that's

00:28:40,470 --> 00:28:47,909
really what it's what it's all about one

00:28:46,260 --> 00:28:49,409
of the other big changes they made was

00:28:47,909 --> 00:28:51,630
getting everybody on to a single

00:28:49,409 --> 00:28:54,929
branching structure so they use

00:28:51,630 --> 00:28:58,860
something that's kind of similar and to

00:28:54,929 --> 00:29:01,860
to get hub floor not get flow get flows

00:28:58,860 --> 00:29:04,380
actually overcomplicated for most

00:29:01,860 --> 00:29:07,440
organizations but github flow where you

00:29:04,380 --> 00:29:10,549
have topic branches and the topic

00:29:07,440 --> 00:29:13,500
branches come off you know you know

00:29:10,549 --> 00:29:14,490
that's your either your topic is either

00:29:13,500 --> 00:29:16,350
effects a bug

00:29:14,490 --> 00:29:18,690
new feature whatever and they're very

00:29:16,350 --> 00:29:20,399
short-lived and but because they have

00:29:18,690 --> 00:29:23,490
that week that it takes to get into

00:29:20,399 --> 00:29:26,370
production and they may need to fix

00:29:23,490 --> 00:29:28,919
something in production if that makes

00:29:26,370 --> 00:29:31,260
sense they also they had they created a

00:29:28,919 --> 00:29:34,500
new model called release flow and where

00:29:31,260 --> 00:29:38,149
they have the the EM 129 there and the

00:29:34,500 --> 00:29:44,429
release ease branch is from the sprint

00:29:38,149 --> 00:29:53,010
129 so during sprint 130 m 129 branch

00:29:44,429 --> 00:29:57,450
exists at the end of sprint 130 m 129

00:29:53,010 --> 00:29:58,799
ends and a new m1 30 is created and

00:29:57,450 --> 00:30:01,260
that's what's deployed and managed in

00:29:58,799 --> 00:30:04,409
production so they have master and then

00:30:01,260 --> 00:30:08,580
a kind of rolling production branch

00:30:04,409 --> 00:30:11,669
where the never actually fix anything in

00:30:08,580 --> 00:30:15,090
the release branch at the only ever fix

00:30:11,669 --> 00:30:17,940
it in dev and then cherry pick those

00:30:15,090 --> 00:30:19,830
sorry in dev in a topic branch bring it

00:30:17,940 --> 00:30:21,539
into master and then the cherry picked

00:30:19,830 --> 00:30:23,340
those changes into the release branch

00:30:21,539 --> 00:30:24,690
one of the reasons they do that is the

00:30:23,340 --> 00:30:26,130
phone that if you do it in release

00:30:24,690 --> 00:30:27,779
sometimes you forget to bring the

00:30:26,130 --> 00:30:30,750
changes back into master and then they

00:30:27,779 --> 00:30:32,310
reoccur later and if you do it in master

00:30:30,750 --> 00:30:34,890
there's zero

00:30:32,310 --> 00:30:35,730
chance of that error ever reoccurring in

00:30:34,890 --> 00:30:38,430
production

00:30:35,730 --> 00:30:39,990
worst case at the end of this sprint

00:30:38,430 --> 00:30:41,850
that's what's going to get released and

00:30:39,990 --> 00:30:43,890
everything will be fixed so that's

00:30:41,850 --> 00:30:45,450
that's important but because we're on

00:30:43,890 --> 00:30:47,700
this model this continuous delivery

00:30:45,450 --> 00:30:49,260
model we have to be able to release our

00:30:47,700 --> 00:30:51,660
software all the time we have to be able

00:30:49,260 --> 00:30:54,500
to put Opik branches in so we need

00:30:51,660 --> 00:30:57,000
feature flags we need the ability

00:30:54,500 --> 00:31:00,690
without branches without long running

00:30:57,000 --> 00:31:02,940
branches and to have the ability to hide

00:31:00,690 --> 00:31:05,520
parts of our code that are not quite

00:31:02,940 --> 00:31:11,340
ready for primetime yet maybe that's for

00:31:05,520 --> 00:31:13,320
performance issues or to reduce the to

00:31:11,340 --> 00:31:16,440
improve that so that will allow you to

00:31:13,320 --> 00:31:18,330
reduce your integration debt you're not

00:31:16,440 --> 00:31:21,690
having these divergent branches

00:31:18,330 --> 00:31:24,240
everything works together all the tests

00:31:21,690 --> 00:31:27,420
are run together even for features that

00:31:24,240 --> 00:31:30,420
you haven't shipped yet okay so that

00:31:27,420 --> 00:31:32,520
allows you to do that as well as make a

00:31:30,420 --> 00:31:35,190
new version of something at the same

00:31:32,520 --> 00:31:37,350
time as the existing piece of

00:31:35,190 --> 00:31:39,600
functionality running and then have a

00:31:37,350 --> 00:31:42,180
switch that lets you flip between it and

00:31:39,600 --> 00:31:43,920
then you can do progressive exposure to

00:31:42,180 --> 00:31:49,620
customers you can do all kinds of really

00:31:43,920 --> 00:31:52,110
clever things with that at dark lunching

00:31:49,620 --> 00:31:54,900
that's the expression that we use but

00:31:52,110 --> 00:31:57,600
with this ability to just ship things to

00:31:54,900 --> 00:31:59,520
production it's so quickly the phone

00:31:57,600 --> 00:32:04,040
that it was a bad idea

00:31:59,520 --> 00:32:08,670
to go live during an event and these are

00:32:04,040 --> 00:32:14,520
real outages from events that happened

00:32:08,670 --> 00:32:16,590
over over the years and on stage the

00:32:14,520 --> 00:32:19,170
system doesn't work so they now have a

00:32:16,590 --> 00:32:20,790
policy where you can't go live with a

00:32:19,170 --> 00:32:21,810
feature you can't announce it at a

00:32:20,790 --> 00:32:26,390
conference unless it's been in

00:32:21,810 --> 00:32:29,160
production for at least 48 hours before

00:32:26,390 --> 00:32:31,440
the conference itself so that's why

00:32:29,160 --> 00:32:34,260
sometimes you'll see some things go live

00:32:31,440 --> 00:32:35,240
after a conference and the one owns it

00:32:34,260 --> 00:32:38,250
later

00:32:35,240 --> 00:32:42,120
cool so that's iterate over the pain we

00:32:38,250 --> 00:32:45,150
have about 14 minutes left maybe 13

00:32:42,120 --> 00:32:47,460
minutes and I want to talk about a few

00:32:45,150 --> 00:32:50,790
more things the first is a production

00:32:47,460 --> 00:32:53,250
first mindset you have to think from the

00:32:50,790 --> 00:32:57,120
mindset of LifeSite and I have another

00:32:53,250 --> 00:32:59,460
if you go to Naked agility dot TV and I

00:32:57,120 --> 00:33:02,760
have a presentation on site reliability

00:32:59,460 --> 00:33:06,930
engineering for this team so you can go

00:33:02,760 --> 00:33:08,880
look up that but it's really about we as

00:33:06,930 --> 00:33:11,070
software engineers need to be able to

00:33:08,880 --> 00:33:13,590
support production we need to deal with

00:33:11,070 --> 00:33:15,810
that pain in production and we need to

00:33:13,590 --> 00:33:18,540
be transparent with our customers we

00:33:15,810 --> 00:33:20,700
need to be able to say to our customers

00:33:18,540 --> 00:33:22,710
here's what happened here's why it

00:33:20,700 --> 00:33:23,820
happened we want to build trust with our

00:33:22,710 --> 00:33:27,240
customers that's how we turn our

00:33:23,820 --> 00:33:29,670
customers into raving fans the they

00:33:27,240 --> 00:33:31,620
believe that we will do our best to

00:33:29,670 --> 00:33:35,250
solve the problem they believe that

00:33:31,620 --> 00:33:39,600
we're and being honest with them and it

00:33:35,250 --> 00:33:43,920
allows that that tighter integration

00:33:39,600 --> 00:33:45,300
with our customers and we can't have no

00:33:43,920 --> 00:33:48,360
downtime there's always going to be

00:33:45,300 --> 00:33:50,070
something that happens in production so

00:33:48,360 --> 00:33:56,850
being as transparent with your customers

00:33:50,070 --> 00:33:59,490
is is important the other thing to

00:33:56,850 --> 00:34:01,380
mention is that there's none there's no

00:33:59,490 --> 00:34:03,690
such thing as partial

00:34:01,380 --> 00:34:05,280
automation as far as I'm concerned

00:34:03,690 --> 00:34:07,530
anything in your software delivery

00:34:05,280 --> 00:34:12,120
process that is not automated is

00:34:07,530 --> 00:34:13,919
technical debt that's part of your tech

00:34:12,120 --> 00:34:17,550
debt you haven't done it yet it's it's

00:34:13,919 --> 00:34:19,980
not automating partial automation for

00:34:17,550 --> 00:34:23,040
example they did have at one point

00:34:19,980 --> 00:34:26,070
deployment scripts in OneNote and an

00:34:23,040 --> 00:34:26,880
email and this is a little bit of

00:34:26,070 --> 00:34:28,679
PowerShell

00:34:26,880 --> 00:34:30,600
can you tell what will happen in

00:34:28,679 --> 00:34:33,179
production when you run this parish out

00:34:30,600 --> 00:34:34,800
because it will error out do you know

00:34:33,179 --> 00:34:38,429
why it will error out could you even

00:34:34,800 --> 00:34:40,200
figure out how to debug that some of you

00:34:38,429 --> 00:34:42,929
might be astute and I've noticed that

00:34:40,200 --> 00:34:46,980
it's using the curly quotes which will

00:34:42,929 --> 00:34:48,600
not work in code and you could have

00:34:46,980 --> 00:34:51,060
hundreds of things like that that it's

00:34:48,600 --> 00:34:53,179
been turned into curly quotes and having

00:34:51,060 --> 00:34:55,340
to go fix that edit the script just

00:34:53,179 --> 00:34:56,970
before you run into production is

00:34:55,340 --> 00:34:59,580
possibly the

00:34:56,970 --> 00:35:01,380
first idea you could ever have you want

00:34:59,580 --> 00:35:04,619
to have something that's been run so

00:35:01,380 --> 00:35:07,440
many times it's bulletproof and editing

00:35:04,619 --> 00:35:11,130
live before you go alive is not the best

00:35:07,440 --> 00:35:14,760
way to do that and people make mistakes

00:35:11,130 --> 00:35:17,580
okay so have everything automated you

00:35:14,760 --> 00:35:19,859
what you don't want to have any manual

00:35:17,580 --> 00:35:22,500
steps between a developer committing a

00:35:19,859 --> 00:35:25,040
line of code and it getting into

00:35:22,500 --> 00:35:28,650
production there should be a completely

00:35:25,040 --> 00:35:29,970
automated process I'm okay with having

00:35:28,650 --> 00:35:32,369
somebody needs to click an approve

00:35:29,970 --> 00:35:34,500
button okay but maybe we have to do that

00:35:32,369 --> 00:35:38,810
because of our business practices but it

00:35:34,500 --> 00:35:41,849
should be a business check not a

00:35:38,810 --> 00:35:44,099
engineering check we should be automated

00:35:41,849 --> 00:35:48,000
there is no reason why you can't

00:35:44,099 --> 00:35:50,520
automate everything except poor quality

00:35:48,000 --> 00:35:52,470
code it's difficult to automate poor

00:35:50,520 --> 00:35:54,780
quality code and one of the ways you

00:35:52,470 --> 00:35:58,470
know it's not such great quality is that

00:35:54,780 --> 00:36:03,330
it's difficult to automate fix your code

00:35:58,470 --> 00:36:06,869
ah when you do do deployments you need

00:36:03,330 --> 00:36:09,030
to be able to highlight there's control

00:36:06,869 --> 00:36:10,710
the blast radius who's going to be

00:36:09,030 --> 00:36:12,869
effect eat when you do a deployment when

00:36:10,710 --> 00:36:14,670
something goes wrong and something that

00:36:12,869 --> 00:36:16,230
there's your DevOps team use and many

00:36:14,670 --> 00:36:19,320
other teams including the windows team

00:36:16,230 --> 00:36:22,589
years is this kind of idea of ring based

00:36:19,320 --> 00:36:26,280
deployments or the more general term is

00:36:22,589 --> 00:36:28,560
controlled exposure to production and so

00:36:26,280 --> 00:36:30,599
your deployed to production you have

00:36:28,560 --> 00:36:33,000
your software in production but who can

00:36:30,599 --> 00:36:36,480
access that new feature or who sees that

00:36:33,000 --> 00:36:38,910
new capability is dependent upon the the

00:36:36,480 --> 00:36:40,770
feature flag so you can turn it on for

00:36:38,910 --> 00:36:42,270
half your users you can turn it on for a

00:36:40,770 --> 00:36:44,520
few of your users only people that have

00:36:42,270 --> 00:36:46,290
opted in all kinds of things you can do

00:36:44,520 --> 00:36:48,510
it things like that and one of the

00:36:46,290 --> 00:36:52,109
things that they do do even for just

00:36:48,510 --> 00:36:54,780
rolling things out is the deploy to ring

00:36:52,109 --> 00:36:59,280
one it's may be internal ring two might

00:36:54,780 --> 00:37:01,320
be the the the smallest external data

00:36:59,280 --> 00:37:03,720
center and then they go with their

00:37:01,320 --> 00:37:05,970
largest external data center and then

00:37:03,720 --> 00:37:08,040
international data centers and then all

00:37:05,970 --> 00:37:09,780
the rest and you'll find that the

00:37:08,040 --> 00:37:12,970
windows team

00:37:09,780 --> 00:37:16,390
that you also uses your DevOps is we

00:37:12,970 --> 00:37:18,670
often ring six because they will scream

00:37:16,390 --> 00:37:21,790
the loudest if they're having a problem

00:37:18,670 --> 00:37:24,700
so it's really important to do and

00:37:21,790 --> 00:37:27,099
having that LifeSite culture inside of

00:37:24,700 --> 00:37:28,599
your organization you'll be able to see

00:37:27,099 --> 00:37:31,720
the other presentation that I talked

00:37:28,599 --> 00:37:34,720
about to dive as a full hour just on

00:37:31,720 --> 00:37:39,220
this topic and but weekly reviews

00:37:34,720 --> 00:37:41,589
actionable alerts making sure you do

00:37:39,220 --> 00:37:43,630
root cause analysis and add stuff to

00:37:41,589 --> 00:37:48,130
your backlog to make those problems go

00:37:43,630 --> 00:37:50,740
away so they'll get a little bit on em

00:37:48,130 --> 00:37:53,200
Tina talk autonomy versus Enterprise

00:37:50,740 --> 00:37:56,109
alignment there is a keen balance you

00:37:53,200 --> 00:37:58,329
have to create between reliability and

00:37:56,109 --> 00:38:01,140
innovation you want to get faster at

00:37:58,329 --> 00:38:03,880
delivering stuff but the age-old

00:38:01,140 --> 00:38:05,559
conflict between operations and

00:38:03,880 --> 00:38:06,910
engineering is that engineers are

00:38:05,559 --> 00:38:08,530
measured based on the number of features

00:38:06,910 --> 00:38:10,150
they get into production and operations

00:38:08,530 --> 00:38:12,520
as measured by uptime and those things

00:38:10,150 --> 00:38:14,470
are antagonistic if you make the same

00:38:12,520 --> 00:38:18,490
group of people responsible for both

00:38:14,470 --> 00:38:22,990
those measures then they'll work

00:38:18,490 --> 00:38:25,089
together effectively to to maximize both

00:38:22,990 --> 00:38:26,380
of them and think about if you're the

00:38:25,089 --> 00:38:27,730
end if you're a software engineer and

00:38:26,380 --> 00:38:28,930
you get woken up at 3 o'clock in the

00:38:27,730 --> 00:38:31,000
morning because production is down

00:38:28,930 --> 00:38:33,490
you're gonna think a lot more about the

00:38:31,000 --> 00:38:36,400
code that you write and you can find a

00:38:33,490 --> 00:38:38,740
lot of really good information on why we

00:38:36,400 --> 00:38:41,319
need a level of autonomy for our

00:38:38,740 --> 00:38:44,980
engineers in Dan Pink's book drive

00:38:41,319 --> 00:38:48,099
there's a really good 10 minute YouTube

00:38:44,980 --> 00:38:49,960
video on that I would definitely worth a

00:38:48,099 --> 00:38:52,510
watch and but the things that your

00:38:49,960 --> 00:38:56,230
team's needs to become self-organizing

00:38:52,510 --> 00:38:57,809
to become an autonomous unit that's able

00:38:56,230 --> 00:39:01,450
to deliver high value products is

00:38:57,809 --> 00:39:02,920
autonomy mastery and purpose autonomy is

00:39:01,450 --> 00:39:04,210
being able to feel like you're in

00:39:02,920 --> 00:39:06,640
control of your own destiny

00:39:04,210 --> 00:39:07,990
mastery is that you want to feel like

00:39:06,640 --> 00:39:10,540
you're doing a good job that you're

00:39:07,990 --> 00:39:13,990
being effective and purpose is that we

00:39:10,540 --> 00:39:16,569
feel that things that we do are of value

00:39:13,990 --> 00:39:19,450
to others and those are really important

00:39:16,569 --> 00:39:21,029
but as part of that we've got you know

00:39:19,450 --> 00:39:22,919
the plan we've got

00:39:21,029 --> 00:39:25,049
practices we've get the organization

00:39:22,919 --> 00:39:27,479
we've get roles teams cadence with lots

00:39:25,049 --> 00:39:30,390
of things inside of that and we need a

00:39:27,479 --> 00:39:33,329
certain level of autonomy so the plan

00:39:30,390 --> 00:39:35,369
and practices for this is where

00:39:33,329 --> 00:39:38,519
Microsoft where this team at Microsoft

00:39:35,369 --> 00:39:41,249
has found their line is the plan and

00:39:38,519 --> 00:39:43,319
practices 100% up to the team that's

00:39:41,249 --> 00:39:46,169
their autonomy but they have alignment

00:39:43,319 --> 00:39:48,599
of the organization roles teams cadence

00:39:46,169 --> 00:39:50,189
so the sprint cadence everybody is on

00:39:48,599 --> 00:39:52,979
the same sprint number at the same time

00:39:50,189 --> 00:39:55,319
and taxonomy what we call things those

00:39:52,979 --> 00:39:56,669
are we have alignment of those things

00:39:55,319 --> 00:39:59,099
across the organization

00:39:56,669 --> 00:40:01,679
and so the team structure is they used

00:39:59,099 --> 00:40:03,929
to have program management development

00:40:01,679 --> 00:40:07,859
and testing as different parts of the

00:40:03,929 --> 00:40:10,799
organization then they brought testing

00:40:07,859 --> 00:40:14,609
in so became a unified engineering team

00:40:10,799 --> 00:40:17,909
and now in fact they create feature

00:40:14,609 --> 00:40:20,640
teams that have product engineering and

00:40:17,909 --> 00:40:24,179
operations is all part of that one team

00:40:20,640 --> 00:40:26,159
and they're accountable for designing

00:40:24,179 --> 00:40:28,589
the feature building the feature

00:40:26,159 --> 00:40:30,809
deploying the feature monitoring the

00:40:28,589 --> 00:40:32,429
feature in production and fixing any

00:40:30,809 --> 00:40:34,289
bugs and getting woken up at 3 o'clock

00:40:32,429 --> 00:40:35,999
in the morning when customers have a

00:40:34,289 --> 00:40:38,909
problem so that's really important and

00:40:35,999 --> 00:40:41,519
part of that that feature team idea is

00:40:38,909 --> 00:40:43,969
having a teams now you might have

00:40:41,519 --> 00:40:46,949
physical team rooms obviously we're in a

00:40:43,969 --> 00:40:48,959
covert situation at the moment so we're

00:40:46,949 --> 00:40:50,519
having a lot more virtual team ribs I've

00:40:48,959 --> 00:40:53,539
been teaching all of my professional

00:40:50,519 --> 00:40:56,999
scrum classes virtually and and it's

00:40:53,539 --> 00:41:00,089
totally doable the problem that we had

00:40:56,999 --> 00:41:02,339
20 years ago when people talked more

00:41:00,089 --> 00:41:04,949
about colocation was the technology

00:41:02,339 --> 00:41:06,689
wasn't viable for having these

00:41:04,949 --> 00:41:09,269
distributed teams people work together

00:41:06,689 --> 00:41:12,599
effectively when we have high bandwidth

00:41:09,269 --> 00:41:15,390
communication 80% of all communication

00:41:12,599 --> 00:41:16,890
is nonverbal so the written word or just

00:41:15,390 --> 00:41:18,630
the spoken word you need to be able to

00:41:16,890 --> 00:41:21,299
see the people you're interacting with

00:41:18,630 --> 00:41:23,429
and video calls video conferencing are

00:41:21,299 --> 00:41:25,289
powerful enough now to resolve that

00:41:23,429 --> 00:41:28,409
problem so you don't need physical team

00:41:25,289 --> 00:41:33,299
rooms anymore but we need team rooms

00:41:28,409 --> 00:41:34,700
still so cross discipline these

00:41:33,299 --> 00:41:36,470
particular groups are found

00:41:34,700 --> 00:41:39,800
that between ten and twelve people for

00:41:36,470 --> 00:41:42,230
what they're building it works best but

00:41:39,800 --> 00:41:43,970
other people will have different sized

00:41:42,230 --> 00:41:48,800
teams depending on what works best for

00:41:43,970 --> 00:41:52,990
them as well they also have something

00:41:48,800 --> 00:41:56,180
called self forming teams that they use

00:41:52,990 --> 00:41:58,670
teams decide themselves what what team

00:41:56,180 --> 00:42:00,829
they go on there's a bigger explanation

00:41:58,670 --> 00:42:03,619
in the slides of how they may do that I

00:42:00,829 --> 00:42:05,960
can talk about that and I'm going to be

00:42:03,619 --> 00:42:07,430
doing a session in a little while on one

00:42:05,960 --> 00:42:09,500
of my favorite practices which is the

00:42:07,430 --> 00:42:14,839
self forming teams so that will be

00:42:09,500 --> 00:42:16,930
coming up at soon Isis three things

00:42:14,839 --> 00:42:19,400
let's see I think I can do two things

00:42:16,930 --> 00:42:23,450
two more things that went to cover first

00:42:19,400 --> 00:42:26,420
is shift left we want to move as many

00:42:23,450 --> 00:42:28,490
things that left's incite as possible of

00:42:26,420 --> 00:42:30,200
getting closer to engineering closer to

00:42:28,490 --> 00:42:33,369
the code to find the problem

00:42:30,200 --> 00:42:36,140
there's your DevOps team used to have

00:42:33,369 --> 00:42:38,900
99% of all their tests we're manual

00:42:36,140 --> 00:42:41,650
tests are long-running UI integration

00:42:38,900 --> 00:42:44,359
tests and something that they've done

00:42:41,650 --> 00:42:48,800
over the last eight years is payback

00:42:44,359 --> 00:42:51,710
that technical debt and and move get rid

00:42:48,800 --> 00:42:54,680
of as many l3 which is what they call

00:42:51,710 --> 00:42:58,790
them l3 tests as possible and have more

00:42:54,680 --> 00:43:01,640
l0 tests l0 means that the developers

00:42:58,790 --> 00:43:04,910
can run them in visual studio as part of

00:43:01,640 --> 00:43:09,710
their integration work and that has

00:43:04,910 --> 00:43:12,380
taken a long time the orange was the bad

00:43:09,710 --> 00:43:15,349
tests and the blue is the good tests and

00:43:12,380 --> 00:43:19,040
you can see that over time it took them

00:43:15,349 --> 00:43:22,520
nearly four years I would need to have a

00:43:19,040 --> 00:43:24,950
look at that a little bit closer but m78

00:43:22,520 --> 00:43:29,660
all the way through to m120 I don't know

00:43:24,950 --> 00:43:32,569
how many Sprint's that is that's 7470

00:43:29,660 --> 00:43:34,640
ish Sprint's 70ish three-week Sprint's

00:43:32,569 --> 00:43:36,200
to pay back that technical debt doing it

00:43:34,640 --> 00:43:38,990
a little piece at the time they're still

00:43:36,200 --> 00:43:41,780
delivering features at the same time but

00:43:38,990 --> 00:43:44,660
paying that back as they go really

00:43:41,780 --> 00:43:47,720
important and again you can look at the

00:43:44,660 --> 00:43:48,530
data a little bit more closely the moved

00:43:47,720 --> 00:43:52,160
to

00:43:48,530 --> 00:43:53,810
or pool request model that is really

00:43:52,160 --> 00:43:56,740
important be able to check all your code

00:43:53,810 --> 00:44:01,850
have as many automated builds as

00:43:56,740 --> 00:44:04,540
possible I have a minute and a half left

00:44:01,850 --> 00:44:07,220
so I'll get just enough time talk about

00:44:04,540 --> 00:44:09,350
infrastructure you need to be cloud

00:44:07,220 --> 00:44:11,240
first there is no way you can be an

00:44:09,350 --> 00:44:14,410
agile team and deliver usable software

00:44:11,240 --> 00:44:17,510
in two-week increments without being

00:44:14,410 --> 00:44:21,350
cloud first it's just impossible British

00:44:17,510 --> 00:44:24,410
government have cloud first public cloud

00:44:21,350 --> 00:44:26,060
first policy and but being able to move

00:44:24,410 --> 00:44:28,430
the cloud is really important to have

00:44:26,060 --> 00:44:30,410
that dynamic aspect be able to build out

00:44:28,430 --> 00:44:32,510
your servers and infrastructure and have

00:44:30,410 --> 00:44:33,410
it designed in that way in fact the

00:44:32,510 --> 00:44:36,410
azure DevOps team

00:44:33,410 --> 00:44:37,880
roll their entire infrastructure for

00:44:36,410 --> 00:44:40,280
every deployment including every

00:44:37,880 --> 00:44:41,750
password and every encryption key so

00:44:40,280 --> 00:44:44,000
that's really powerful as well and that

00:44:41,750 --> 00:44:45,560
gets you to somewhere where it's very

00:44:44,000 --> 00:44:47,810
difficult for somebody to take over your

00:44:45,560 --> 00:44:51,080
system and it provides you with a lot

00:44:47,810 --> 00:44:53,240
more capabilities for scaling and they

00:44:51,080 --> 00:44:55,520
are moving towards docker they're moving

00:44:53,240 --> 00:44:57,410
all of their code over to Linux docker

00:44:55,520 --> 00:44:59,930
containers it's going to take them a

00:44:57,410 --> 00:45:03,230
long time but they are doing that as

00:44:59,930 --> 00:45:07,670
well and that is Microsoft at so last

00:45:03,230 --> 00:45:10,250
don't over think learn how to fail as

00:45:07,670 --> 00:45:14,060
quickly as possible and you just need to

00:45:10,250 --> 00:45:16,880
take one step at a time start from where

00:45:14,060 --> 00:45:20,390
you are and then what's the next most

00:45:16,880 --> 00:45:24,440
painful thing in your process go fix

00:45:20,390 --> 00:45:27,140
that then stop think about what your

00:45:24,440 --> 00:45:29,990
next most painful thing is and go take

00:45:27,140 --> 00:45:33,410
care of that one thing at a time keep

00:45:29,990 --> 00:45:36,010
moving and just a note on the things

00:45:33,410 --> 00:45:37,880
that change that Microsoft pretty much

00:45:36,010 --> 00:45:39,710
everything changed the way they do

00:45:37,880 --> 00:45:42,100
business changed the way they interact

00:45:39,710 --> 00:45:45,470
with customers changed everything

00:45:42,100 --> 00:45:49,450
changed and remember that neither DevOps

00:45:45,470 --> 00:45:51,650
nor agile and our magic they are

00:45:49,450 --> 00:45:55,730
complementary practices that will help

00:45:51,650 --> 00:45:59,900
assure you your problems make your

00:45:55,730 --> 00:46:02,370
problems transparent thank you very much

00:45:59,900 --> 00:46:05,610
there is our link

00:46:02,370 --> 00:46:08,790
to download this presentation or to view

00:46:05,610 --> 00:46:11,070
it online thank you very much for time

00:46:08,790 --> 00:46:15,540
for your time I hope I was able to

00:46:11,070 --> 00:46:17,930
answer all of your questions thank you

00:46:15,540 --> 00:46:17,930
very much

00:46:19,280 --> 00:46:35,770

YouTube URL: https://www.youtube.com/watch?v=6D7ZC5Yq8rU


