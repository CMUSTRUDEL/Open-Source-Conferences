Title: stackconf online 2020 | Scalable testing infrastructure with Kubernetes and Concord by Pranav Parikh
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	# Testing at scale

Genuine CI/CD can’t be accomplished without continous testing. At organizations like Walmart, where about 50k deployments happen every day, we need a robust and scalable test infrastructure to execute these tests.

## Concord
We use Concord (http://concord.walmartlabs.com/) for deployments.It is an orchestration engine that connects different systems together using scenarios and plugins.

## Testing challenges
The teams at Walmart excel at automated testing and with about 1M of CI jobs running 24X7 (many of them run end-to-end tests for an hour or two), we’re at risk of hoarding the resources on our CI/CD servers. We needed a flexible and scalable solution which can meet the needs of the teams who run long end-to-end tests.

## Solution
We created a Concord plugin which will allow the users to leverage the Kubernetes infrastructure to run their end-to-end tests. Users can submit their Docker image for tests to Concord. It spins up a container called `Orchestra` which in turn spins up the jobs and suspends the Concord process. Once the jobs complete, it resumes the Concord process and users can continue with their flow.

## Advantages
1) Reliable and clean environment for testing
2) Scalable testing infrastructure with Kubernetes
3) Immutable and repeatable testing

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:16,200
[Music]

00:00:12,469 --> 00:00:18,480
good morning and welcome everyone my

00:00:16,200 --> 00:00:22,080
name is planner Parikh and I work as an

00:00:18,480 --> 00:00:24,810
engineer at Walmart today I am here to

00:00:22,080 --> 00:00:27,390
talk about Walmart's journey to build a

00:00:24,810 --> 00:00:33,870
scalable testing infrastructure using

00:00:27,390 --> 00:00:36,450
Concord and communities from our humble

00:00:33,870 --> 00:00:39,630
beginnings as a small discount retailer

00:00:36,450 --> 00:00:41,850
in Arkansas Walmart has opened thousands

00:00:39,630 --> 00:00:45,570
of stores in the US and expanded

00:00:41,850 --> 00:00:48,030
internationally so innovation we are

00:00:45,570 --> 00:00:50,879
creating a seamless experience to let

00:00:48,030 --> 00:00:53,519
our customers shop anytime and anywhere

00:00:50,879 --> 00:00:59,010
online through mobile devices and

00:00:53,519 --> 00:01:01,920
installs our long serving mission has

00:00:59,010 --> 00:01:04,199
been to help customers save money so

00:01:01,920 --> 00:01:07,050
they can be better we are passionate

00:01:04,199 --> 00:01:11,300
about revolution and every technology we

00:01:07,050 --> 00:01:11,300
create is built to serve our customers

00:01:13,070 --> 00:01:20,880
well what culture is built on fold

00:01:15,869 --> 00:01:23,520
believes service to the customer respect

00:01:20,880 --> 00:01:27,960
for the individual strive for excellence

00:01:23,520 --> 00:01:30,689
and acting with integrity this believes

00:01:27,960 --> 00:01:33,899
have been the recipe for our success for

00:01:30,689 --> 00:01:35,759
many years our culture is the reason we

00:01:33,899 --> 00:01:43,170
have been able to grow on a global scale

00:01:35,759 --> 00:01:45,329
and help our customers talking about

00:01:43,170 --> 00:01:48,329
Walmart we need to think about the

00:01:45,329 --> 00:01:51,299
scheme world what operates more than

00:01:48,329 --> 00:01:55,409
eleven thousand stores worldwide serves

00:01:51,299 --> 00:02:00,299
about 265 million customers online and

00:01:55,409 --> 00:02:03,229
installs every week and employs 2.2

00:02:00,299 --> 00:02:06,060
million associates around the world and

00:02:03,229 --> 00:02:08,270
Walmart has significant presence in the

00:02:06,060 --> 00:02:11,160
e-commerce world as well

00:02:08,270 --> 00:02:14,070
achieve this kind of scale numerous

00:02:11,160 --> 00:02:16,770
small and large software systems work in

00:02:14,070 --> 00:02:19,860
tandem and ensure that we can

00:02:16,770 --> 00:02:21,540
successfully deploy any changes to the

00:02:19,860 --> 00:02:23,969
systems in an efficient

00:02:21,540 --> 00:02:27,989
timely manner we need a robust

00:02:23,969 --> 00:02:32,689
deployment system in place so what do we

00:02:27,989 --> 00:02:32,689
use for deployments a 12 much let's see

00:02:33,349 --> 00:02:38,670
the answer is conquered conquered is a

00:02:36,870 --> 00:02:41,069
standard tool used to facilitate

00:02:38,670 --> 00:02:44,459
continuous delivery and deployments at

00:02:41,069 --> 00:02:46,769
Walmart it's an open sourced software

00:02:44,459 --> 00:02:50,459
from Walmart meant for work

00:02:46,769 --> 00:02:51,959
orchestration although its primary use

00:02:50,459 --> 00:02:54,870
case is to help with continuous

00:02:51,959 --> 00:03:01,470
deployments it can be used for any kind

00:02:54,870 --> 00:03:03,540
of process automation Concord is an

00:03:01,470 --> 00:03:05,489
orchestration engine that connects

00:03:03,540 --> 00:03:08,220
different systems together using

00:03:05,489 --> 00:03:11,609
scenarios and plugins created by the

00:03:08,220 --> 00:03:16,709
users the main components of Concord our

00:03:11,609 --> 00:03:18,959
server and agent server is the central

00:03:16,709 --> 00:03:21,840
component which provides the API is used

00:03:18,959 --> 00:03:26,010
to control processes manage entities

00:03:21,840 --> 00:03:29,370
such as projects and sequence agent is

00:03:26,010 --> 00:03:31,680
responsible for process execution it

00:03:29,370 --> 00:03:33,569
receives a workload from server and

00:03:31,680 --> 00:03:36,870
depending on the configuration of the

00:03:33,569 --> 00:03:41,760
job starts the processes in separate JVM

00:03:36,870 --> 00:03:43,909
and docker containers a single agent can

00:03:41,760 --> 00:03:48,000
run one or more jobs simultaneously

00:03:43,909 --> 00:03:50,519
depending on the configuration it is

00:03:48,000 --> 00:03:52,680
possible to have agents with different

00:03:50,519 --> 00:03:55,109
capabilities like different hardware

00:03:52,680 --> 00:03:59,790
configurations committed to the single

00:03:55,109 --> 00:04:01,829
Concord instance in addition console

00:03:59,790 --> 00:04:04,799
provides looser interface for managing

00:04:01,829 --> 00:04:10,829
processes projects secrets and other

00:04:04,799 --> 00:04:14,909
entities a process is a basic entity in

00:04:10,829 --> 00:04:19,680
Concord a process is an execution of a

00:04:14,909 --> 00:04:21,479
workflow in isolated environment it can

00:04:19,680 --> 00:04:23,610
run in a project and can share

00:04:21,479 --> 00:04:27,659
integration and resources with other

00:04:23,610 --> 00:04:29,669
processes in the same project projects

00:04:27,659 --> 00:04:34,480
are the way to group of processes and

00:04:29,669 --> 00:04:38,240
use shared environment and configuration

00:04:34,480 --> 00:04:41,630
Concord provides an API and a plug-in as

00:04:38,240 --> 00:04:44,120
well to work with secrets such as SSH

00:04:41,630 --> 00:04:48,650
keys username password prayers ETA

00:04:44,120 --> 00:04:50,630
tokens etc organizations are namespaces

00:04:48,650 --> 00:04:55,520
to which resources such as projects

00:04:50,630 --> 00:04:57,830
secrets teams etc become true and there

00:04:55,520 --> 00:05:00,350
are numerous plugins available as part

00:04:57,830 --> 00:05:04,570
of the Concord ecosystem as well as

00:05:00,350 --> 00:05:04,570
users can write their own custom plugins

00:05:05,620 --> 00:05:10,610
Concord is proven to work at Walmart's

00:05:08,300 --> 00:05:14,060
game running thousands of deployments

00:05:10,610 --> 00:05:16,340
and workflows every single thing it can

00:05:14,060 --> 00:05:17,000
be used to deploy your apps on

00:05:16,340 --> 00:05:20,200
mainframes

00:05:17,000 --> 00:05:25,340
antonyms virtual machines kubernetes and

00:05:20,200 --> 00:05:28,220
on any other stack Concord provides EML

00:05:25,340 --> 00:05:30,470
based domain-specific language it

00:05:28,220 --> 00:05:32,540
supports a plug-in based architecture

00:05:30,470 --> 00:05:36,260
where users can write their own custom

00:05:32,540 --> 00:05:38,120
plugins for different scenarios and any

00:05:36,260 --> 00:05:41,300
kind of process automation can be

00:05:38,120 --> 00:05:43,780
achieved with conquered conquered allows

00:05:41,300 --> 00:05:47,000
to work with secrets like a ph opens

00:05:43,780 --> 00:05:50,390
database passwords etc in a secure

00:05:47,000 --> 00:05:53,680
manner the UI allows to build custom

00:05:50,390 --> 00:05:56,780
forms as per the user requirements

00:05:53,680 --> 00:05:58,780
Concord comes with multi tenant user

00:05:56,780 --> 00:06:03,590
interface and access control and

00:05:58,780 --> 00:06:07,250
provides and integration Concord is PCI

00:06:03,590 --> 00:06:09,620
compliant and it also supports J's are

00:06:07,250 --> 00:06:11,930
strictly our users in run the scripts

00:06:09,620 --> 00:06:16,010
written in languages like JavaScript

00:06:11,930 --> 00:06:18,190
groovy Python etc as part of the Concord

00:06:16,010 --> 00:06:21,770
of workflows

00:06:18,190 --> 00:06:24,110
plugins Concord operates on the plug-in

00:06:21,770 --> 00:06:27,140
based architecture and it has various

00:06:24,110 --> 00:06:30,520
plugins over the world for commonly used

00:06:27,140 --> 00:06:35,300
tools and services such as in Siebel

00:06:30,520 --> 00:06:37,700
talker and communication system CI one

00:06:35,300 --> 00:06:43,190
ops email slack

00:06:37,700 --> 00:06:45,530
l dev as well as gate and JIRA users can

00:06:43,190 --> 00:06:47,750
also write their own custom plugins to

00:06:45,530 --> 00:06:52,370
integrate with an internal server

00:06:47,750 --> 00:06:55,630
or for under similar discuses what would

00:06:52,370 --> 00:06:58,250
the workflows supported by Concord

00:06:55,630 --> 00:07:00,640
whatever to define inside the Concord to

00:06:58,250 --> 00:07:03,080
meet specification language in UML

00:07:00,640 --> 00:07:06,530
scripting using languages like Python

00:07:03,080 --> 00:07:09,920
JavaScript Ruby and J Ruby as well as

00:07:06,530 --> 00:07:14,450
any flow using the inbuilt or any custom

00:07:09,920 --> 00:07:17,030
plugin written by a user what are some

00:07:14,450 --> 00:07:19,850
of the most common workflows we see on a

00:07:17,030 --> 00:07:22,390
day to day basis common examples are

00:07:19,850 --> 00:07:27,350
rejected provisioning and management and

00:07:22,390 --> 00:07:29,180
CI CDI applying orchestration let's take

00:07:27,350 --> 00:07:32,930
a look at how you can write a simple

00:07:29,180 --> 00:07:35,810
Concord workflow in this example I want

00:07:32,930 --> 00:07:38,000
to use ansible so I add the in scible

00:07:35,810 --> 00:07:41,540
task as an even dependency in the

00:07:38,000 --> 00:07:44,840
configuration section all the flows

00:07:41,540 --> 00:07:48,200
should go under the flow section if I

00:07:44,840 --> 00:07:50,540
don't specify which flow to run Concord

00:07:48,200 --> 00:07:54,500
looks for a flow named default and once

00:07:50,540 --> 00:07:59,270
it since I want to run in simple tasks I

00:07:54,500 --> 00:08:03,050
add tasks as and similar in specifies

00:07:59,270 --> 00:08:05,780
the input to my tasks playbook is my

00:08:03,050 --> 00:08:09,979
ansible playbook which just runs a

00:08:05,780 --> 00:08:12,710
deeper task in this case in inventory I

00:08:09,979 --> 00:08:15,830
provide the details of the hosts I want

00:08:12,710 --> 00:08:19,220
to connect and run my playbook on in

00:08:15,830 --> 00:08:22,910
this case it is just localhost since I

00:08:19,220 --> 00:08:25,550
am running the playbook on my local any

00:08:22,910 --> 00:08:29,410
extra variables I want to pass to the

00:08:25,550 --> 00:08:32,630
playbook can be declared in extraverts

00:08:29,410 --> 00:08:33,530
when I run this Concord workflow it will

00:08:32,630 --> 00:08:36,860
run the ansible

00:08:33,530 --> 00:08:41,780
playbook hello wrote EML and run a debug

00:08:36,860 --> 00:08:43,760
task echoing the greetings I said now

00:08:41,780 --> 00:08:47,030
this is a very simple example to begin

00:08:43,760 --> 00:08:50,420
with but you can write complex Concord

00:08:47,030 --> 00:08:53,089
flows using conditionals importing from

00:08:50,420 --> 00:08:58,700
other flows and define different types

00:08:53,089 --> 00:09:01,360
of triggers so far we saw what Concord

00:08:58,700 --> 00:09:06,200
is and how we can leverage it for any

00:09:01,360 --> 00:09:07,880
overflow orchestration at Walmart we

00:09:06,200 --> 00:09:09,950
believe in delivering quality to the

00:09:07,880 --> 00:09:12,620
customers and in this era of

00:09:09,950 --> 00:09:15,320
cutting-edge technologies automated

00:09:12,620 --> 00:09:18,530
testing from spec e component of oversee

00:09:15,320 --> 00:09:21,770
ICD pipelines given the scale we

00:09:18,530 --> 00:09:25,040
operated we also need to make our test

00:09:21,770 --> 00:09:28,190
infrastructure scaleable so we started

00:09:25,040 --> 00:09:30,950
looking into some areas in testing there

00:09:28,190 --> 00:09:35,570
we could leverage Concord let me walk

00:09:30,950 --> 00:09:38,180
you through that journey most of us know

00:09:35,570 --> 00:09:41,060
this theory of test rapid which says

00:09:38,180 --> 00:09:44,270
that the more we test a lead isolation

00:09:41,060 --> 00:09:48,110
that is right unit tests the more faster

00:09:44,270 --> 00:09:50,600
we can deliver quality software the more

00:09:48,110 --> 00:09:53,900
early we catch a bug in the process the

00:09:50,600 --> 00:09:56,570
more cheaper it is to fix personally I

00:09:53,900 --> 00:09:59,000
have been saved time and again by the

00:09:56,570 --> 00:10:00,740
unit tests I wrote from the disaster

00:09:59,000 --> 00:10:06,710
waiting to happen somewhere in

00:10:00,740 --> 00:10:10,280
production but the question is is unit

00:10:06,710 --> 00:10:13,870
testing enough they shall provide your

00:10:10,280 --> 00:10:16,970
confidence in your code but is that it I

00:10:13,870 --> 00:10:19,850
think no matter how much unit testing we

00:10:16,970 --> 00:10:22,010
do the software we write will still need

00:10:19,850 --> 00:10:24,770
to be integrated with other systems and

00:10:22,010 --> 00:10:27,440
we still need some level of functional

00:10:24,770 --> 00:10:31,430
or integration and testing before we can

00:10:27,440 --> 00:10:32,690
open it up for the end-users let me walk

00:10:31,430 --> 00:10:34,700
you through some of the common

00:10:32,690 --> 00:10:38,480
challenges we come across in testing

00:10:34,700 --> 00:10:41,540
very frequently I personally have run

00:10:38,480 --> 00:10:44,870
into this many times where my tests

00:10:41,540 --> 00:10:46,700
passed locally but not on cm of course I

00:10:44,870 --> 00:10:49,550
used a different hardware and OS on my

00:10:46,700 --> 00:10:52,400
local and I found that some libraries I

00:10:49,550 --> 00:10:56,930
used are not compatible to run in the CI

00:10:52,400 --> 00:10:59,600
environment so the next question is give

00:10:56,930 --> 00:11:03,910
me a clean and then isolated environment

00:10:59,600 --> 00:11:06,740
where I can run my tests for some teams

00:11:03,910 --> 00:11:10,790
depending on the complexities their

00:11:06,740 --> 00:11:13,430
tests take longer time to finish time is

00:11:10,790 --> 00:11:14,970
very subjective here but hey who doesn't

00:11:13,430 --> 00:11:17,310
want to be fast

00:11:14,970 --> 00:11:19,350
also four teams running longer tests and

00:11:17,310 --> 00:11:22,519
thereby consuming a good chunk of CI

00:11:19,350 --> 00:11:26,250
resources we need to provide them an

00:11:22,519 --> 00:11:28,620
alternative way to run the tests this is

00:11:26,250 --> 00:11:30,870
another common question we get teams

00:11:28,620 --> 00:11:33,600
deployed their apps using conquered and

00:11:30,870 --> 00:11:35,870
kubernetes and now they want to run some

00:11:33,600 --> 00:11:39,170
tests against the deployed endpoints

00:11:35,870 --> 00:11:39,170
what would they do

00:11:39,529 --> 00:11:45,720
keeping this challenges in mind you try

00:11:42,779 --> 00:11:48,569
to explore different ideas we knew that

00:11:45,720 --> 00:11:51,750
we could use conquered to do any kind of

00:11:48,569 --> 00:11:54,000
workflow orchestration we were looking

00:11:51,750 --> 00:11:56,279
at a containerized solution run the

00:11:54,000 --> 00:11:59,670
tests and also allow us to scale the

00:11:56,279 --> 00:12:02,069
test infrastructure and so kubernetes

00:11:59,670 --> 00:12:07,319
and the containers went a right fit for

00:12:02,069 --> 00:12:10,410
us as a solution we wrote a custom

00:12:07,319 --> 00:12:13,620
plugin unconquered called into it

00:12:10,410 --> 00:12:18,149
- plugin let's see how this plug-in

00:12:13,620 --> 00:12:22,889
works let's see what a user needs to

00:12:18,149 --> 00:12:25,110
have to use this plugin start with they

00:12:22,889 --> 00:12:27,720
will lead a docker image which can run

00:12:25,110 --> 00:12:31,290
the tests that is containerize your

00:12:27,720 --> 00:12:35,089
tests you need a way to authenticate to

00:12:31,290 --> 00:12:38,250
a cabal dis cluster you want to use and

00:12:35,089 --> 00:12:43,740
also provide a namespace where you want

00:12:38,250 --> 00:12:45,930
to run your tests let me walk you

00:12:43,740 --> 00:12:51,259
through the CI CD flow to explain how

00:12:45,930 --> 00:12:54,629
this plugin fits in a commit to github

00:12:51,259 --> 00:12:57,750
triggers a CI pipeline which builds the

00:12:54,629 --> 00:12:59,730
artifacts and docker images pushes them

00:12:57,750 --> 00:13:03,089
to a repository and triggers a conquered

00:12:59,730 --> 00:13:06,110
workflow which will run the end-to-end

00:13:03,089 --> 00:13:08,850
on integration tests using this plugin

00:13:06,110 --> 00:13:12,870
user can manually trigger the CI or

00:13:08,850 --> 00:13:14,970
Concord Pro directly to whatever you see

00:13:12,870 --> 00:13:18,360
within the blue dotted lines is the

00:13:14,970 --> 00:13:21,509
kubernetes intro the end-to-end test

00:13:18,360 --> 00:13:24,179
plug-in takes the user input defined in

00:13:21,509 --> 00:13:26,189
the conquered flow spins up a job on

00:13:24,179 --> 00:13:28,040
kubernetes using an image called

00:13:26,189 --> 00:13:32,630
orchestra

00:13:28,040 --> 00:13:35,180
and then suspends the Concord flow keep

00:13:32,630 --> 00:13:38,060
in mind that the Concord agent is used

00:13:35,180 --> 00:13:41,389
to run a workflow so when a process is

00:13:38,060 --> 00:13:45,490
suspended the agent becomes free and can

00:13:41,389 --> 00:13:45,490
be used to run some other process

00:13:47,290 --> 00:13:52,970
orchestra registers a concord hook so it

00:13:50,569 --> 00:13:57,110
knows which concord flow it means to

00:13:52,970 --> 00:13:58,519
assume after the job completes if a PR

00:13:57,110 --> 00:14:01,970
build triggers this job

00:13:58,519 --> 00:14:04,790
it also registers a gate hook with the

00:14:01,970 --> 00:14:10,370
PR build details so it can comment on

00:14:04,790 --> 00:14:13,160
the PR build status Orchestra knows from

00:14:10,370 --> 00:14:16,579
the input what docker image to pull from

00:14:13,160 --> 00:14:20,990
the registry to execute the tests the

00:14:16,579 --> 00:14:24,230
user wants to run users might want to

00:14:20,990 --> 00:14:27,170
run parallel test Suites a common

00:14:24,230 --> 00:14:29,360
example would be for front-end tests to

00:14:27,170 --> 00:14:33,230
be executed against different browsers

00:14:29,360 --> 00:14:35,690
like Chrome Firefox in parallel so

00:14:33,230 --> 00:14:38,899
Orchestra calculates the number of

00:14:35,690 --> 00:14:41,060
shards users wants to run and spins up

00:14:38,899 --> 00:14:45,139
those many jobs on the covalent is

00:14:41,060 --> 00:14:49,399
concern note that Orchestra runs in the

00:14:45,139 --> 00:14:52,459
same namespace as the test drops in the

00:14:49,399 --> 00:14:54,769
image the term D IOC means bring your

00:14:52,459 --> 00:14:56,449
own container which is basically the

00:14:54,769 --> 00:14:59,139
container in which the user provides to

00:14:56,449 --> 00:14:59,139
run the tests

00:15:00,790 --> 00:15:06,110
so Park astrak-- keeps on monitoring the

00:15:03,800 --> 00:15:09,800
status of these jobs and once all the

00:15:06,110 --> 00:15:12,230
tests herbs complete it calculates the

00:15:09,800 --> 00:15:14,959
overall status of the drawn based on

00:15:12,230 --> 00:15:19,130
exit codes of each job and reports it

00:15:14,959 --> 00:15:21,230
back to Concord at this time it receives

00:15:19,130 --> 00:15:24,110
the conquered process which was

00:15:21,230 --> 00:15:28,279
suspended so a New Concord agent is

00:15:24,110 --> 00:15:31,040
acquired which assumes the flow this

00:15:28,279 --> 00:15:33,500
suspend resume mechanism helps us save

00:15:31,040 --> 00:15:36,230
Concord resources since we don't

00:15:33,500 --> 00:15:39,339
actively use an agent when the Concord

00:15:36,230 --> 00:15:39,339
flow is suspended

00:15:40,200 --> 00:15:46,090
the build status along with the job

00:15:43,150 --> 00:15:47,560
summary of each shard can be read in the

00:15:46,090 --> 00:15:51,730
conquered flow using the context

00:15:47,560 --> 00:15:54,580
variables based on the status users can

00:15:51,730 --> 00:15:58,000
choose to continue or hold their C ICD

00:15:54,580 --> 00:15:58,540
pipeline to retrieve all the container

00:15:58,000 --> 00:16:02,290
logs

00:15:58,540 --> 00:16:04,480
users can use the cube cuttlebug in the

00:16:02,290 --> 00:16:07,120
container logs can also be uploaded to a

00:16:04,480 --> 00:16:11,620
central reporting system for future use

00:16:07,120 --> 00:16:16,480
and analysis so this is how the plug-in

00:16:11,620 --> 00:16:18,730
works in a CI CD pipeline to use the

00:16:16,480 --> 00:16:22,720
plug-in add the mobile dependency in the

00:16:18,730 --> 00:16:27,490
configuration section as inputs to the

00:16:22,720 --> 00:16:30,730
plug-in one is action where start is the

00:16:27,490 --> 00:16:34,210
only supported value for now parameters

00:16:30,730 --> 00:16:36,790
which consists of Runner and test rather

00:16:34,210 --> 00:16:39,970
contains the information pertinent to

00:16:36,790 --> 00:16:44,140
Concord and kubernetes and test has the

00:16:39,970 --> 00:16:48,940
information further tests let's see them

00:16:44,140 --> 00:16:52,570
in more detail Runner the other section

00:16:48,940 --> 00:16:56,250
supports forming fills cluster this is

00:16:52,570 --> 00:16:59,440
your kubernetes cluster namespace a

00:16:56,250 --> 00:17:04,050
namespace on the cluster where you want

00:16:59,440 --> 00:17:07,360
the job to run on cluster certificate

00:17:04,050 --> 00:17:09,250
you can use the cluster certificate to

00:17:07,360 --> 00:17:13,959
authenticate to covilhã days if you have

00:17:09,250 --> 00:17:18,580
one we use the Dex authentication

00:17:13,959 --> 00:17:21,520
mechanism and we get the client ID

00:17:18,580 --> 00:17:23,650
client secret redirect URL base URL

00:17:21,520 --> 00:17:27,520
information from our cluster

00:17:23,650 --> 00:17:30,700
administrators you can specify the

00:17:27,520 --> 00:17:32,710
maximum and minimum memory capacity to

00:17:30,700 --> 00:17:35,710
allocate for the job as well as the

00:17:32,710 --> 00:17:38,710
maximum and minimum city capacity to

00:17:35,710 --> 00:17:42,390
allocate for the job as well as part of

00:17:38,710 --> 00:17:46,780
the parameters in the runner section

00:17:42,390 --> 00:17:50,830
test the test parameters has three main

00:17:46,780 --> 00:17:54,860
sections first is container which has

00:17:50,830 --> 00:17:57,540
the container related information

00:17:54,860 --> 00:18:03,780
container URL is the URL of the docker

00:17:57,540 --> 00:18:07,470
image which can turn the users tests and

00:18:03,780 --> 00:18:09,950
contains the element variables needed by

00:18:07,470 --> 00:18:09,950
the container

00:18:10,700 --> 00:18:18,480
you will require iteration parameters if

00:18:13,530 --> 00:18:20,520
you are using sharding hydration and key

00:18:18,480 --> 00:18:23,210
is the key which determines the

00:18:20,520 --> 00:18:26,700
uniqueness between different test runs

00:18:23,210 --> 00:18:30,530
parents lists are the list of values for

00:18:26,700 --> 00:18:34,080
the variable declared in iteration NT

00:18:30,530 --> 00:18:38,430
you will lead the get section if you are

00:18:34,080 --> 00:18:41,250
using a gator on pull request URL is the

00:18:38,430 --> 00:18:43,710
URL of the git repository and you will

00:18:41,250 --> 00:18:49,740
also need the char of the commit and the

00:18:43,710 --> 00:18:51,300
get token we support two ways right now

00:18:49,740 --> 00:18:54,270
to authenticate with communities

00:18:51,300 --> 00:18:56,780
clusters use Dex authentication

00:18:54,270 --> 00:18:59,880
mechanism with your enter credentials

00:18:56,780 --> 00:19:03,570
for this provide your undec username and

00:18:59,880 --> 00:19:05,100
password and get the next parameters

00:19:03,570 --> 00:19:07,890
from the question administrator my

00:19:05,100 --> 00:19:11,490
client ID cigarette redirect and the

00:19:07,890 --> 00:19:14,400
bills URLs or you can use your own

00:19:11,490 --> 00:19:18,720
certificates this is helpful if we have

00:19:14,400 --> 00:19:21,690
a private cluster keep in mind that for

00:19:18,720 --> 00:19:23,700
any sensitive information don't forget

00:19:21,690 --> 00:19:26,940
to encrypt before checking in our

00:19:23,700 --> 00:19:29,120
conquered workflows you can use the

00:19:26,940 --> 00:19:32,070
sharding feature if you want spin up

00:19:29,120 --> 00:19:36,390
multiple jobs in parallel using the same

00:19:32,070 --> 00:19:38,550
image one common use case is to run your

00:19:36,390 --> 00:19:41,760
end-to-end tests against different

00:19:38,550 --> 00:19:44,310
browsers like Chrome Firefox etc in this

00:19:41,760 --> 00:19:47,520
case you tend to something like this

00:19:44,310 --> 00:19:50,910
where under iteration parameters you can

00:19:47,520 --> 00:19:53,010
have a key as a browser and in params

00:19:50,910 --> 00:19:56,450
list you can give the area of browsers

00:19:53,010 --> 00:19:59,790
like Chrome and Firefox so in this case

00:19:56,450 --> 00:20:02,070
the plug-in is going to execute to cover

00:19:59,790 --> 00:20:05,190
today's jobs in parallel each with the

00:20:02,070 --> 00:20:07,760
element value Chrome and Firefox for the

00:20:05,190 --> 00:20:10,590
variable browser

00:20:07,760 --> 00:20:12,120
so this is a full example of a Concord

00:20:10,590 --> 00:20:16,980
flow which uses the end-to-end test

00:20:12,120 --> 00:20:21,240
plugin as you can see I have added the

00:20:16,980 --> 00:20:26,220
plug-in dependency the task name is e to

00:20:21,240 --> 00:20:28,500
e test in parameters I have rather and

00:20:26,220 --> 00:20:30,570
the test sections we are in runner I'm

00:20:28,500 --> 00:20:35,280
using the Dex authentication mechanism

00:20:30,570 --> 00:20:37,920
for authenticating to kubernetes and I

00:20:35,280 --> 00:20:43,650
also have set the limits for memory and

00:20:37,920 --> 00:20:47,400
CPU in that section the container URL is

00:20:43,650 --> 00:20:52,680
the docker image URL which can run the

00:20:47,400 --> 00:20:55,920
users tests if your image needs some add

00:20:52,680 --> 00:21:01,590
moment variables to run you can specify

00:20:55,920 --> 00:21:06,300
those two and you can iterate based on

00:21:01,590 --> 00:21:11,630
the iteration in ROM in Turkey and once

00:21:06,300 --> 00:21:15,060
the build is done in Concord you can

00:21:11,630 --> 00:21:17,640
look at the overall build status through

00:21:15,060 --> 00:21:21,810
the build status variable and depending

00:21:17,640 --> 00:21:25,050
on if the build status is success or

00:21:21,810 --> 00:21:30,060
failure you can choose to continue or

00:21:25,050 --> 00:21:32,960
hold your pipeline to you the logs you

00:21:30,060 --> 00:21:34,710
can use the cubital command line ability

00:21:32,960 --> 00:21:38,700
as shown here

00:21:34,710 --> 00:21:43,680
in addition your cluster administrators

00:21:38,700 --> 00:21:45,630
can set up in such a way that all the

00:21:43,680 --> 00:21:49,440
container logs can go to a central

00:21:45,630 --> 00:21:56,250
logging system which can useful for

00:21:49,440 --> 00:21:59,160
future use and analysis we have seen

00:21:56,250 --> 00:22:03,090
some great benefits of using this

00:21:59,160 --> 00:22:06,330
approach for testing the shrouding

00:22:03,090 --> 00:22:09,450
feature helps us to run multiple jobs in

00:22:06,330 --> 00:22:14,730
parallel on kubernetes thereby speeding

00:22:09,450 --> 00:22:17,040
of the overall testing process the tests

00:22:14,730 --> 00:22:20,410
can run in the clean and isolated

00:22:17,040 --> 00:22:22,180
environment on communities also

00:22:20,410 --> 00:22:25,150
developers and test engineers can

00:22:22,180 --> 00:22:28,390
recreate the same set of anywhere using

00:22:25,150 --> 00:22:33,130
docker images which helps them debug the

00:22:28,390 --> 00:22:35,350
test failures easily in addition we

00:22:33,130 --> 00:22:40,690
provide the books to complete the CI CD

00:22:35,350 --> 00:22:44,590
workflow with all this we utilize our CI

00:22:40,690 --> 00:22:49,480
CD resources wisely and unlock the power

00:22:44,590 --> 00:22:51,190
of kubernetes having said this we are

00:22:49,480 --> 00:22:53,380
constantly learning new things and we

00:22:51,190 --> 00:22:58,120
strive for continuous improvements in

00:22:53,380 --> 00:23:01,660
our CI CD process so this concludes my

00:22:58,120 --> 00:23:05,080
talk thank you all for attending and

00:23:01,660 --> 00:23:08,590
special thanks to stack-on on behalf of

00:23:05,080 --> 00:23:10,380
the Walmart team disap together auf

00:23:08,590 --> 00:23:21,130
wiedersehen

00:23:10,380 --> 00:23:21,130
[Music]

00:23:21,290 --> 00:23:26,869
you

00:23:22,320 --> 00:23:26,869

YouTube URL: https://www.youtube.com/watch?v=DN8UoZgN2Dw


