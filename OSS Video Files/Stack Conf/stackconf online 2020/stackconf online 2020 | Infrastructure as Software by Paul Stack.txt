Title: stackconf online 2020 | Infrastructure as Software by Paul Stack
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	In this talk, Paul will demonstrate why writing infrastructure in general programming languages is a better way to is a better choice for infrastructure management. Pulumi is an open source tool that allows users to write their infrastructure code in TypeScript, Python, DotNet or Go.
General purpose languages allow infrastructure code to have integrated testing, compile time checks as well as being able to create infrastructure APIs and is more suited to infrastructure management than DSLs, JSON or YAML. In addition, he will demonstrate how to build infrastructure that manages Serverless, Kubernetes, PaaS and IaaS systems across multiple cloud providers.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:16,610
[Music]

00:00:13,510 --> 00:00:18,590
good morning my name's Paul stack this

00:00:16,610 --> 00:00:21,260
is my talk on infrastructure software

00:00:18,590 --> 00:00:23,150
I'm delighted to be speaking at staff

00:00:21,260 --> 00:00:25,009
this year it's a shame I'm not actually

00:00:23,150 --> 00:00:26,480
in there in person but due to the

00:00:25,009 --> 00:00:29,720
current world events we all understand

00:00:26,480 --> 00:00:32,360
what the situation is I'm here today to

00:00:29,720 --> 00:00:35,420
talk about why we believe that blooming

00:00:32,360 --> 00:00:37,820
we are creating the next evolution of

00:00:35,420 --> 00:00:39,260
infrastructure as code to link that will

00:00:37,820 --> 00:00:43,880
allow us to treat infrastructure

00:00:39,260 --> 00:00:46,460
software so each company can be at a

00:00:43,880 --> 00:00:48,530
different level or different version of

00:00:46,460 --> 00:00:50,300
their cloud transition right we all know

00:00:48,530 --> 00:00:52,550
that cloud is a real thing we all

00:00:50,300 --> 00:00:55,129
understand that people are using cloud

00:00:52,550 --> 00:00:57,739
in many different ways but it's a

00:00:55,129 --> 00:01:00,200
situation where different companies can

00:00:57,739 --> 00:01:02,329
have different levels of adoption within

00:01:00,200 --> 00:01:04,039
the cloud so let's think about v1 which

00:01:02,329 --> 00:01:06,320
is traditional and tier style

00:01:04,039 --> 00:01:08,000
architecture they've effectively picked

00:01:06,320 --> 00:01:10,640
their database servers and the web

00:01:08,000 --> 00:01:11,869
servers up from their physical data

00:01:10,640 --> 00:01:16,060
center and they've moved them to the

00:01:11,869 --> 00:01:18,740
cloud now this is traditionally

00:01:16,060 --> 00:01:20,780
longer-lived servers they're managed by

00:01:18,740 --> 00:01:23,570
infrastructure as code tooling maybe

00:01:20,780 --> 00:01:26,409
puppet chef ansible salt stack all these

00:01:23,570 --> 00:01:30,110
different tools and it's longer-lived

00:01:26,409 --> 00:01:32,780
management of of these systems then we

00:01:30,110 --> 00:01:33,830
get into v2 of the of the ecosystem

00:01:32,780 --> 00:01:35,659
where it's a little bit more

00:01:33,830 --> 00:01:37,610
transitional so you're starting to take

00:01:35,659 --> 00:01:39,290
advantage of maybe some containers maybe

00:01:37,610 --> 00:01:41,960
some hosted services like hosted

00:01:39,290 --> 00:01:45,799
databases you're starting to create a

00:01:41,960 --> 00:01:48,049
little bit more immutable servers that

00:01:45,799 --> 00:01:49,579
you can tear them down and recreate them

00:01:48,049 --> 00:01:51,829
on the fly a little bit more and things

00:01:49,579 --> 00:01:53,750
become a little bit more immutable and

00:01:51,829 --> 00:01:55,520
how you manage your infrastructure so

00:01:53,750 --> 00:01:57,820
you can you don't make changes to your

00:01:55,520 --> 00:02:00,530
infrastructure itself you actually just

00:01:57,820 --> 00:02:03,020
deploy a complete version of a new

00:02:00,530 --> 00:02:04,820
server or a new application each time

00:02:03,020 --> 00:02:06,920
that you actually change something and

00:02:04,820 --> 00:02:10,459
then we have like this V 3 style

00:02:06,920 --> 00:02:11,930
architecture my v3 is there are many

00:02:10,459 --> 00:02:13,579
different names for it people call the

00:02:11,930 --> 00:02:15,100
colored natives there's people who are

00:02:13,579 --> 00:02:19,510
treating this micro service based

00:02:15,100 --> 00:02:22,099
architecture it's it's a very dependent

00:02:19,510 --> 00:02:23,660
naming of what you actually want to do

00:02:22,099 --> 00:02:24,860
with it yourself but if you think of it

00:02:23,660 --> 00:02:27,260
as it's

00:02:24,860 --> 00:02:29,090
you know a mix of containers using

00:02:27,260 --> 00:02:31,400
probably an orchestration engine like

00:02:29,090 --> 00:02:33,530
kubernetes or high support Nomad and

00:02:31,400 --> 00:02:36,950
you're probably taking advantage of some

00:02:33,530 --> 00:02:39,170
server lists and it's nearly all public

00:02:36,950 --> 00:02:40,580
cloud and you're taking advantage of a

00:02:39,170 --> 00:02:41,000
lot of hosted services that are already

00:02:40,580 --> 00:02:45,890
there

00:02:41,000 --> 00:02:47,990
and you can actually effectively run

00:02:45,890 --> 00:02:49,820
everything that you need to in a

00:02:47,990 --> 00:02:51,800
specific cloud and so you're taking

00:02:49,820 --> 00:02:53,960
advantage of real like lambdas and your

00:02:51,800 --> 00:02:55,160
s3 buckets and your analytic solutions

00:02:53,960 --> 00:02:59,150
of machine there and all these different

00:02:55,160 --> 00:03:01,670
things together like we've been through

00:02:59,150 --> 00:03:03,260
the era of movement in structures code

00:03:01,670 --> 00:03:05,450
improving what infrastructure as code is

00:03:03,260 --> 00:03:07,430
and it's it's a way of being able to

00:03:05,450 --> 00:03:09,470
create the style of architectures these

00:03:07,430 --> 00:03:11,630
v1 and v3 style architectures but

00:03:09,470 --> 00:03:14,480
there's nothing really that sort of sits

00:03:11,630 --> 00:03:16,880
in this v3 era and this is where we

00:03:14,480 --> 00:03:18,820
believe that pulled me actually comes in

00:03:16,880 --> 00:03:22,070
so pulling me is an open-source tool

00:03:18,820 --> 00:03:25,570
that allows you to declare and declare

00:03:22,070 --> 00:03:27,830
your infrastructure using real languages

00:03:25,570 --> 00:03:30,260
and we actually call it modern

00:03:27,830 --> 00:03:32,570
infrastructures code because you create

00:03:30,260 --> 00:03:34,250
your code using your real language you

00:03:32,570 --> 00:03:36,560
would actually use your favorite tool in

00:03:34,250 --> 00:03:39,170
your IDE your testing tools you have a

00:03:36,560 --> 00:03:41,870
CLI which allow you to integrate into

00:03:39,170 --> 00:03:45,320
your CI CD pipeline and of course the

00:03:41,870 --> 00:03:46,970
Allies are how we all know about tie

00:03:45,320 --> 00:03:48,500
things being created managed and

00:03:46,970 --> 00:03:50,090
deployed you get the full preview

00:03:48,500 --> 00:03:52,820
changes like you would another tooling

00:03:50,090 --> 00:03:54,560
and you get full control changes like

00:03:52,820 --> 00:03:57,530
another tooling but the most important

00:03:54,560 --> 00:03:59,510
here is that it's actually real code we

00:03:57,530 --> 00:04:01,880
don't say that its infrastructure is

00:03:59,510 --> 00:04:04,160
code it's actually real infrastructures

00:04:01,880 --> 00:04:10,370
code not just DSL Zoar yeah moles or

00:04:04,160 --> 00:04:11,959
Jason so we actually believe that this

00:04:10,370 --> 00:04:15,440
is much more bringing us towards

00:04:11,959 --> 00:04:17,299
infrastructure software so for us we can

00:04:15,440 --> 00:04:18,770
take advantage of all of the software

00:04:17,299 --> 00:04:20,180
development practices that people have

00:04:18,770 --> 00:04:23,560
been learning through it all of their

00:04:20,180 --> 00:04:25,490
careers and all of the years and in

00:04:23,560 --> 00:04:27,290
software management kind of good that

00:04:25,490 --> 00:04:30,080
has come before us so semantic

00:04:27,290 --> 00:04:31,490
versioning testing coding reviews PRS

00:04:30,080 --> 00:04:33,050
all these different things and you can

00:04:31,490 --> 00:04:36,060
actually embed this in your

00:04:33,050 --> 00:04:38,340
infrastructure process night

00:04:36,060 --> 00:04:40,740
plumie can give you a number of layers

00:04:38,340 --> 00:04:43,170
so let's look right at the bottom where

00:04:40,740 --> 00:04:45,870
we say we have the foundation the

00:04:43,170 --> 00:04:47,880
foundation of paluma is providers so we

00:04:45,870 --> 00:04:50,250
actually interact directly with the

00:04:47,880 --> 00:04:52,440
clouds so a double yes as your Google

00:04:50,250 --> 00:04:54,860
Cloud kubernetes new relic beta though

00:04:52,440 --> 00:05:00,750
CloudFlare OpenStack digitalocean VMware

00:04:54,860 --> 00:05:02,310
packet page or duty off zero we have a

00:05:00,750 --> 00:05:04,080
lot of different providers that are

00:05:02,310 --> 00:05:05,550
lower so little a lot more flexibility

00:05:04,080 --> 00:05:08,040
and hope in the grid time systems

00:05:05,550 --> 00:05:09,510
together but because it's real code you

00:05:08,040 --> 00:05:11,460
can start to build libraries cloud

00:05:09,510 --> 00:05:13,140
specific libraries on top of those

00:05:11,460 --> 00:05:15,120
providers of your own layers of

00:05:13,140 --> 00:05:16,800
abstraction either container based

00:05:15,120 --> 00:05:18,990
service base their infrastructure base

00:05:16,800 --> 00:05:20,760
and then paluma I've actually taken this

00:05:18,990 --> 00:05:24,060
idea a little bit further itself and

00:05:20,760 --> 00:05:25,230
they've created frameworks so the

00:05:24,060 --> 00:05:27,630
framework that we have actually created

00:05:25,230 --> 00:05:30,660
is called paluma crosswalk and polemic

00:05:27,630 --> 00:05:33,780
crosswalk allows us to give developers

00:05:30,660 --> 00:05:36,480
and operators a simplistic way of

00:05:33,780 --> 00:05:38,550
declaring infrastructure that would

00:05:36,480 --> 00:05:41,850
require lots of boilerplate so for

00:05:38,550 --> 00:05:43,320
example an AWS if you require a V PC you

00:05:41,850 --> 00:05:45,690
would need the V PC components you'd

00:05:43,320 --> 00:05:47,250
need the subnets you'd need the right

00:05:45,690 --> 00:05:49,710
tables the rights the right table

00:05:47,250 --> 00:05:53,070
associations the Internet gateways the

00:05:49,710 --> 00:05:56,040
not gateway the elastic IPS all of these

00:05:53,070 --> 00:05:57,750
different pieces now in plumie that can

00:05:56,040 --> 00:05:59,130
actually be as simple as one line of

00:05:57,750 --> 00:06:01,500
code to deploy all of these resources

00:05:59,130 --> 00:06:04,320
because paluma have been able to create

00:06:01,500 --> 00:06:09,240
a library in a framework that wraps all

00:06:04,320 --> 00:06:11,520
of this away right

00:06:09,240 --> 00:06:12,900
we're code because we're code we can

00:06:11,520 --> 00:06:15,270
actually integrate with your source

00:06:12,900 --> 00:06:17,910
control tools you can write in real

00:06:15,270 --> 00:06:21,270
languages JavaScript typescript Python

00:06:17,910 --> 00:06:23,670
go C sharp F sharp VB there's even some

00:06:21,270 --> 00:06:27,060
unofficial support for PowerShell you

00:06:23,670 --> 00:06:28,980
can hook into your CI CD pipeline and of

00:06:27,060 --> 00:06:30,720
course as I said before just previously

00:06:28,980 --> 00:06:34,650
you can hook into a number of different

00:06:30,720 --> 00:06:38,040
environments in OBS GCP azure and so on

00:06:34,650 --> 00:06:41,550
and so forth even though plumies real

00:06:38,040 --> 00:06:43,140
code it is actually declarative what you

00:06:41,550 --> 00:06:44,670
declare in your plumie application is

00:06:43,140 --> 00:06:47,910
the end state of your resources

00:06:44,670 --> 00:06:49,230
now it may sometimes be wrapped in a

00:06:47,910 --> 00:06:52,440
layer of abstraction

00:06:49,230 --> 00:06:53,610
which makes life a little easier to do a

00:06:52,440 --> 00:06:57,210
lot of things but it is actually

00:06:53,610 --> 00:06:59,610
declarative syntax we can take advantage

00:06:57,210 --> 00:07:06,090
of conditions and loops so in this

00:06:59,610 --> 00:07:09,660
example we only provision our subnet if

00:07:06,090 --> 00:07:12,930
there is a variable that is declared for

00:07:09,660 --> 00:07:15,270
public subnet ciders we can take

00:07:12,930 --> 00:07:17,070
advantage of multi provider workloads so

00:07:15,270 --> 00:07:18,840
the inputs are they excuse me the

00:07:17,070 --> 00:07:21,000
outputs of some resources can be the

00:07:18,840 --> 00:07:23,130
inputs of other resources so in this

00:07:21,000 --> 00:07:24,960
case we're creating a bucket and the

00:07:23,130 --> 00:07:28,770
bucket the main name is then part of our

00:07:24,960 --> 00:07:31,140
kubernetes application deployment we can

00:07:28,770 --> 00:07:34,050
reuse our code so we can package your

00:07:31,140 --> 00:07:37,260
code up we can create our own internal

00:07:34,050 --> 00:07:39,600
packages that we can distribute and real

00:07:37,260 --> 00:07:41,250
packages so like piping packages and PM

00:07:39,600 --> 00:07:43,380
packages NuGet packages that we can

00:07:41,250 --> 00:07:45,870
share those internally or publicly of

00:07:43,380 --> 00:07:48,240
course and then we can start to do more

00:07:45,870 --> 00:07:51,300
interesting things so this advanced

00:07:48,240 --> 00:07:53,850
orchestration example shows that we

00:07:51,300 --> 00:07:56,760
would want to deploy three replicas of a

00:07:53,850 --> 00:08:01,140
canary an application canary when we

00:07:56,760 --> 00:08:04,380
have deployed three versions of our

00:08:01,140 --> 00:08:07,740
application canary we would then make a

00:08:04,380 --> 00:08:09,480
request to Prometheus um in order to

00:08:07,740 --> 00:08:11,880
check our application metrics that our

00:08:09,480 --> 00:08:14,190
application is working as expected so

00:08:11,880 --> 00:08:15,780
we've integrated a code that actually

00:08:14,190 --> 00:08:18,120
talks to the Prometheus API and the

00:08:15,780 --> 00:08:19,470
Prometheus SDK when we're happy we would

00:08:18,120 --> 00:08:22,230
then roll out the rest of our ten

00:08:19,470 --> 00:08:23,250
replicas so of course in traditional

00:08:22,230 --> 00:08:24,720
tools you would have to make a

00:08:23,250 --> 00:08:26,580
deployment then you would have to go to

00:08:24,720 --> 00:08:27,960
your your tooling you have to check that

00:08:26,580 --> 00:08:29,610
everything works as expected and then

00:08:27,960 --> 00:08:30,720
you have to go back to your

00:08:29,610 --> 00:08:32,340
infrastructure code and you have to

00:08:30,720 --> 00:08:33,960
change the number and redeploy it this

00:08:32,340 --> 00:08:37,470
it can't embed it in one specific

00:08:33,960 --> 00:08:40,970
workflow one of the things that we've

00:08:37,470 --> 00:08:44,220
added in paluma 2.0 is the ability to

00:08:40,970 --> 00:08:45,780
test drive our infrastructure now this

00:08:44,220 --> 00:08:48,120
for us is something that's extremely

00:08:45,780 --> 00:08:50,100
interesting because infrastructure

00:08:48,120 --> 00:08:52,530
testing has not really been very

00:08:50,100 --> 00:08:54,690
prominent throughout the years and we

00:08:52,530 --> 00:08:57,180
know that it takes time for some

00:08:54,690 --> 00:08:59,940
resources to spin up and that is a very

00:08:57,180 --> 00:09:02,430
slow development look where you have to

00:08:59,940 --> 00:09:04,320
wait for resources let's say in case we

00:09:02,430 --> 00:09:06,240
take something in the region of 2025

00:09:04,320 --> 00:09:08,160
minutes you then have to verify that

00:09:06,240 --> 00:09:09,930
Europe code has deployed everything as

00:09:08,160 --> 00:09:10,470
expected and then you would tear it down

00:09:09,930 --> 00:09:13,680
again

00:09:10,470 --> 00:09:15,270
employment we can actually really write

00:09:13,680 --> 00:09:18,420
unit tests because we have a load you

00:09:15,270 --> 00:09:21,540
the functionality to mark the responses

00:09:18,420 --> 00:09:24,589
and requests to the cloud so we

00:09:21,540 --> 00:09:28,980
understand that if you send the cloud a

00:09:24,589 --> 00:09:34,160
well-formed request then the cloud will

00:09:28,980 --> 00:09:36,540
actually handle that correctly but it's

00:09:34,160 --> 00:09:38,160
usually we would be testing and we would

00:09:36,540 --> 00:09:40,170
actually be testing if the cloud itself

00:09:38,160 --> 00:09:41,279
has spun up what we wanted so when

00:09:40,170 --> 00:09:43,709
pulling me we're trying to take that

00:09:41,279 --> 00:09:45,720
away and we're saying maybe what you do

00:09:43,709 --> 00:09:47,339
is you test that the code I'm there and

00:09:45,720 --> 00:09:49,320
the the infrastructure that you've

00:09:47,339 --> 00:09:51,330
written is fit for purpose rather than

00:09:49,320 --> 00:09:53,130
actually testing that the cloud has spun

00:09:51,330 --> 00:09:54,630
up that infrastructure so it's a very

00:09:53,130 --> 00:09:56,790
interesting workflow that it's allowed

00:09:54,630 --> 00:09:58,550
you to do I have a number of talks out

00:09:56,790 --> 00:10:01,529
there right now on this specific

00:09:58,550 --> 00:10:05,190
workflow and I can link some content

00:10:01,529 --> 00:10:07,560
during the talk and my favorite feature

00:10:05,190 --> 00:10:09,330
of all of the plumie features because I

00:10:07,560 --> 00:10:11,690
don't believe it's as good and any other

00:10:09,330 --> 00:10:14,430
tool out there is the secret management

00:10:11,690 --> 00:10:16,230
we are traditionally by that secret I

00:10:14,430 --> 00:10:18,060
would love to say that we're not but

00:10:16,230 --> 00:10:19,830
unfortunately we really bought a secret

00:10:18,060 --> 00:10:22,200
management throughout our industry we

00:10:19,830 --> 00:10:24,540
have numerous examples of of that

00:10:22,200 --> 00:10:28,260
happening so at plumie we've actually

00:10:24,540 --> 00:10:30,660
taken the idea of being able to manage

00:10:28,260 --> 00:10:33,870
secrets built in and do everything that

00:10:30,660 --> 00:10:35,970
we actually need to think so we have

00:10:33,870 --> 00:10:38,040
secret manager a secret manager by

00:10:35,970 --> 00:10:41,850
default on every polymer project which

00:10:38,040 --> 00:10:44,910
is called paluma KMS so that is an AWS

00:10:41,850 --> 00:10:47,730
KMS key that has been assigned to your

00:10:44,910 --> 00:10:49,260
polemic org and your plumie project but

00:10:47,730 --> 00:10:51,720
of course you can bring your own you do

00:10:49,260 --> 00:10:53,610
not need to give Pulu me your secrets to

00:10:51,720 --> 00:10:56,339
manage you can manage them in AWS key

00:10:53,610 --> 00:10:59,700
vault you can manage them excuse me AWS

00:10:56,339 --> 00:11:01,470
kms as your key vault GCP KMS or if you

00:10:59,700 --> 00:11:03,600
have hash record vault already run it we

00:11:01,470 --> 00:11:05,160
will also integrate that so it's

00:11:03,600 --> 00:11:08,370
something that we actually tried to do

00:11:05,160 --> 00:11:09,930
in order to promote safety of secrets

00:11:08,370 --> 00:11:11,670
throughout your application lifecycle

00:11:09,930 --> 00:11:13,920
rather than just what we would do not

00:11:11,670 --> 00:11:15,720
know in the industry is thinking that

00:11:13,920 --> 00:11:20,439
afterwards

00:11:15,720 --> 00:11:23,199
so the the makeup of plumie works is we

00:11:20,439 --> 00:11:25,209
have a CLI our CL is our client that

00:11:23,199 --> 00:11:27,759
sits on a local machine or it sits on a

00:11:25,209 --> 00:11:30,689
CI CD machine it's your choice and it

00:11:27,759 --> 00:11:34,540
reads the credentials from that machine

00:11:30,689 --> 00:11:36,759
it makes two requests it makes a request

00:11:34,540 --> 00:11:38,709
to your cloud with the provider API

00:11:36,759 --> 00:11:41,139
called so it ascends Achatz to the

00:11:38,709 --> 00:11:42,819
provider API it will make the request

00:11:41,139 --> 00:11:43,839
and it will actually spin up your

00:11:42,819 --> 00:11:46,209
infrastructure and it will get the

00:11:43,839 --> 00:11:48,790
response back and then paluma will store

00:11:46,209 --> 00:11:52,509
your state by default in the pool uma

00:11:48,790 --> 00:11:55,660
sauce now it's very important to know

00:11:52,509 --> 00:11:58,389
here that plumie will not transport

00:11:55,660 --> 00:12:00,189
credentials to the pool uma SAS the pool

00:11:58,389 --> 00:12:02,619
uma SAS has no idea what your

00:12:00,189 --> 00:12:05,259
credentials are there and there is no

00:12:02,619 --> 00:12:07,779
connectivity from paluma SAS to your

00:12:05,259 --> 00:12:10,119
cloud they are completely independent of

00:12:07,779 --> 00:12:12,279
each other and if you're not happy using

00:12:10,119 --> 00:12:14,860
pulling me SAS you can swap that out and

00:12:12,279 --> 00:12:18,910
you can use an s3 bucket as your blob a

00:12:14,860 --> 00:12:20,889
GCP bucket artifactory you can use a lot

00:12:18,910 --> 00:12:22,689
of different features you can use the

00:12:20,889 --> 00:12:24,970
command pulling me Logan with a cloud

00:12:22,689 --> 00:12:27,720
URL and you can pass it in URL in which

00:12:24,970 --> 00:12:31,300
you need to store your infrastructure

00:12:27,720 --> 00:12:32,920
so let's write some code let's demo some

00:12:31,300 --> 00:12:35,829
pieces of infrastructure that we can

00:12:32,920 --> 00:12:38,879
actually test in order to bring some

00:12:35,829 --> 00:12:38,879
some work together

00:12:48,769 --> 00:12:54,779
so I'm going to create a new application

00:12:52,069 --> 00:12:57,269
the new application I can

00:12:54,779 --> 00:13:01,499
by default plumies a CLI and the new

00:12:57,269 --> 00:13:04,350
application will allow me to scaffold

00:13:01,499 --> 00:13:07,680
the application and bring all of the

00:13:04,350 --> 00:13:09,240
information that I require and to pull

00:13:07,680 --> 00:13:11,459
them in your application so if I run the

00:13:09,240 --> 00:13:13,199
command plumie it will give me the basic

00:13:11,459 --> 00:13:15,089
outline of all of the pieces of

00:13:13,199 --> 00:13:17,220
infrastructure that it needs today we're

00:13:15,089 --> 00:13:23,339
going to use the pulled Aminu command

00:13:17,220 --> 00:13:24,779
which will allow us to scaffold I pull

00:13:23,339 --> 00:13:27,540
in the application I'm going to choose

00:13:24,779 --> 00:13:29,220
AWS typescript and it will ask me the

00:13:27,540 --> 00:13:31,559
project names that conf is perfect

00:13:29,220 --> 00:13:33,990
description of the project and then it

00:13:31,559 --> 00:13:37,279
will ask me to create a stack so stacks

00:13:33,990 --> 00:13:39,269
and plumie are the ability to segment

00:13:37,279 --> 00:13:41,790
different versions of the same

00:13:39,269 --> 00:13:45,120
infrastructure so what I mean by that is

00:13:41,790 --> 00:13:47,069
if you think of stack as an environment

00:13:45,120 --> 00:13:50,209
so you can have a dev stack test stack a

00:13:47,069 --> 00:13:53,939
prod stack or you can actually have a

00:13:50,209 --> 00:13:57,809
developer stack I'm so Paul's Paul's

00:13:53,939 --> 00:14:00,179
stack you can have kevin's stack Steven

00:13:57,809 --> 00:14:02,300
stack Michels stack and so on and so

00:14:00,179 --> 00:14:04,439
forth so there's a lot of different

00:14:02,300 --> 00:14:06,089
pieces of information that you can

00:14:04,439 --> 00:14:08,040
actually store in a stack and it will

00:14:06,089 --> 00:14:10,649
actually use the same base paluma

00:14:08,040 --> 00:14:11,910
application each time so it's not going

00:14:10,649 --> 00:14:14,970
to do something completely different

00:14:11,910 --> 00:14:16,559
here so we're just going to say they

00:14:14,970 --> 00:14:19,620
have today and because it's an AWS

00:14:16,559 --> 00:14:22,019
project we are going to deploy it into I

00:14:19,620 --> 00:14:27,800
like uswest - because it's it seems to

00:14:22,019 --> 00:14:27,800
be the most reliable and region for me

00:14:36,230 --> 00:14:44,009
so it's just gone and installed an NPM

00:14:39,629 --> 00:14:45,120
package and I we can open up our ID so

00:14:44,009 --> 00:14:53,910
we can actually have a look at what's

00:14:45,120 --> 00:14:56,699
going on in here so in the IDE we can

00:14:53,910 --> 00:14:58,019
see a number of pieces so the first

00:14:56,699 --> 00:15:00,000
thing we can see is in as installed I'm

00:14:58,019 --> 00:15:00,880
using typescript so it has installed all

00:15:00,000 --> 00:15:02,740
the know

00:15:00,880 --> 00:15:04,540
jas modules that it requires it has a

00:15:02,740 --> 00:15:06,519
kid ignore file and has index not CH

00:15:04,540 --> 00:15:08,019
which will come back to it has the

00:15:06,519 --> 00:15:10,000
package files which locks us to the

00:15:08,019 --> 00:15:12,610
specific versions it has a pedometer

00:15:10,000 --> 00:15:14,740
llamo which just talks about the wrong

00:15:12,610 --> 00:15:17,259
time of the application and some project

00:15:14,740 --> 00:15:19,990
metadata and then it has a polemic dark

00:15:17,259 --> 00:15:23,500
stack but llamo I chose the devstack so

00:15:19,990 --> 00:15:25,870
it's paluma llamo and we can see that we

00:15:23,500 --> 00:15:27,610
configured this devstack to run against

00:15:25,870 --> 00:15:28,839
us West three we can have another stack

00:15:27,610 --> 00:15:31,000
that runs against it different and

00:15:28,839 --> 00:15:33,600
region and with different credentials

00:15:31,000 --> 00:15:36,459
into different AWS account or since it's

00:15:33,600 --> 00:15:39,519
the most important thing for us is the

00:15:36,459 --> 00:15:41,680
index ts file so there are three pieces

00:15:39,519 --> 00:15:43,899
that it brings in by default it will

00:15:41,680 --> 00:15:45,639
bring it will import all of the required

00:15:43,899 --> 00:15:48,250
packages that it needs it will import

00:15:45,639 --> 00:15:51,279
the paluma helper packages it will

00:15:48,250 --> 00:15:53,920
import the AWS package and it will

00:15:51,279 --> 00:15:55,329
import the crosswalk package because we

00:15:53,920 --> 00:15:57,550
try and promote the crosswalk is a good

00:15:55,329 --> 00:16:00,250
way of doing things by default and

00:15:57,550 --> 00:16:03,009
that's the AWS package then we can see

00:16:00,250 --> 00:16:06,699
we have a real resource declaration so

00:16:03,009 --> 00:16:13,120
it is namespace AWS dot s3 so there is

00:16:06,699 --> 00:16:15,519
also a dhobi s dot ec2 or I am or RDS or

00:16:13,120 --> 00:16:18,130
lambda and so on and so forth and then

00:16:15,519 --> 00:16:20,290
we have the resource inside the resource

00:16:18,130 --> 00:16:22,569
then we can step into what it's actually

00:16:20,290 --> 00:16:24,279
the constructor of the resource of look

00:16:22,569 --> 00:16:26,920
and see it takes three parameters it

00:16:24,279 --> 00:16:28,480
takes a name the name is the unique name

00:16:26,920 --> 00:16:30,639
of the resource that needs to happen

00:16:28,480 --> 00:16:33,370
within the plumie state it has some

00:16:30,639 --> 00:16:34,959
arguments which we will look at in a

00:16:33,370 --> 00:16:37,089
second and then a little later we'll

00:16:34,959 --> 00:16:39,009
look at this custom resource options and

00:16:37,089 --> 00:16:41,949
this is allows you to be really a little

00:16:39,009 --> 00:16:43,600
more flexible with your infrastructure

00:16:41,949 --> 00:16:46,139
so that you can actually do a little

00:16:43,600 --> 00:16:48,819
more unique and specific things with it

00:16:46,139 --> 00:16:51,939
so we can see that my bucket is there

00:16:48,819 --> 00:16:57,120
and then lastly we actually export the

00:16:51,939 --> 00:16:57,120
name of the bucket so if I am chained

00:16:57,420 --> 00:17:05,829
AWS excuse me see I am chained is just a

00:17:04,270 --> 00:17:07,179
way of managing my credentials on my

00:17:05,829 --> 00:17:10,419
local machine you do not have to run

00:17:07,179 --> 00:17:12,549
this yourself then paluma will give us a

00:17:10,419 --> 00:17:14,140
plan of what it is going to do so it

00:17:12,549 --> 00:17:15,130
will understand that it needs to work

00:17:14,140 --> 00:17:17,410
its way down in the pool

00:17:15,130 --> 00:17:18,940
application work the resources that I'm

00:17:17,410 --> 00:17:20,800
in the orders that it needs to create

00:17:18,940 --> 00:17:22,240
them and it will tell us that it's gonna

00:17:20,800 --> 00:17:24,819
create the stack and it's gonna create a

00:17:22,240 --> 00:17:26,230
pocket no e-excuse me

00:17:24,819 --> 00:17:28,150
we can have a look at the details of

00:17:26,230 --> 00:17:29,230
what it's actually going to do and we

00:17:28,150 --> 00:17:31,090
can actually see that it's going to

00:17:29,230 --> 00:17:34,090
create a bucket called my bucket

00:17:31,090 --> 00:17:35,380
- prefix so let's say no to that and

00:17:34,090 --> 00:17:38,770
let's go and have a look at our resource

00:17:35,380 --> 00:17:43,510
declaration again here so we actually

00:17:38,770 --> 00:17:46,570
see that bucket we actually only gave a

00:17:43,510 --> 00:17:49,660
name to my book as my bucket plumie will

00:17:46,570 --> 00:17:51,310
employ auto naming by default there are

00:17:49,660 --> 00:17:55,300
a number of things in the cloud that you

00:17:51,310 --> 00:17:57,070
cannot um use a create before destroy

00:17:55,300 --> 00:17:59,650
mechanism if you use strong names or

00:17:57,070 --> 00:18:02,740
hard names so paluma actually will put a

00:17:59,650 --> 00:18:04,510
name with a suffix on the end of your

00:18:02,740 --> 00:18:06,310
resources so that you can actually

00:18:04,510 --> 00:18:08,320
create a new one before you destroy the

00:18:06,310 --> 00:18:10,180
over you can override that if you really

00:18:08,320 --> 00:18:14,260
want there's no problem so we can

00:18:10,180 --> 00:18:17,200
actually say bucket and we can say it's

00:18:14,260 --> 00:18:23,770
that comps demo and then if I go back to

00:18:17,200 --> 00:18:25,210
plumie when I say pulling me up then no

00:18:23,770 --> 00:18:27,280
it will actually tell me that it's going

00:18:25,210 --> 00:18:30,730
to create a bucket of the exact name

00:18:27,280 --> 00:18:32,350
that I wanted it to create and it'll be

00:18:30,730 --> 00:18:36,640
a second let's have a look at the

00:18:32,350 --> 00:18:38,770
details we can see STATCOM demo we will

00:18:36,640 --> 00:18:40,900
say yes to rule this bucket right now

00:18:38,770 --> 00:18:43,660
this bucket is now under state

00:18:40,900 --> 00:18:47,680
management state is an interesting

00:18:43,660 --> 00:18:49,090
concept I believe you need state you

00:18:47,680 --> 00:18:52,780
need to understand the state of your

00:18:49,090 --> 00:18:55,090
infrastructure because you need you

00:18:52,780 --> 00:18:58,150
don't deploy your infrastructure in a

00:18:55,090 --> 00:18:59,590
way where you only have the the number

00:18:58,150 --> 00:19:01,840
of resources for your application you

00:18:59,590 --> 00:19:02,920
weary share a cards we share a lot of

00:19:01,840 --> 00:19:06,100
different things so it would be

00:19:02,920 --> 00:19:08,200
dangerous if we didn't understand what

00:19:06,100 --> 00:19:10,270
of our what resources in our cloud are

00:19:08,200 --> 00:19:12,640
actually being managed and we can have a

00:19:10,270 --> 00:19:14,530
look at any time about the state by

00:19:12,640 --> 00:19:19,030
running the command pull Umi stack

00:19:14,530 --> 00:19:21,850
export and we can see let's firstly go

00:19:19,030 --> 00:19:23,140
and say hey look no secrets no AWS

00:19:21,850 --> 00:19:24,790
credentials are actually being

00:19:23,140 --> 00:19:27,429
transferred or stored here this is the

00:19:24,790 --> 00:19:29,200
exact JSON blob that is being sent

00:19:27,429 --> 00:19:30,960
to the plumie sass I'm logged in to the

00:19:29,200 --> 00:19:35,499
plumie sass because I can see right here

00:19:30,960 --> 00:19:38,009
and we can see that it has a stack which

00:19:35,499 --> 00:19:39,570
has the outputs that I've specified

00:19:38,009 --> 00:19:41,739
excuse me

00:19:39,570 --> 00:19:44,919
and as the outputs that I have specified

00:19:41,739 --> 00:19:46,359
it has a provider because we can load

00:19:44,919 --> 00:19:48,369
many different providers in our

00:19:46,359 --> 00:19:50,080
application then it has the bucket with

00:19:48,369 --> 00:19:52,389
all of the imports and outputs that it

00:19:50,080 --> 00:19:55,269
actually what it needs for them for the

00:19:52,389 --> 00:19:57,190
different pieces so let's go and do

00:19:55,269 --> 00:19:58,809
something a little more to show the flow

00:19:57,190 --> 00:20:02,979
here show that state is actually a thing

00:19:58,809 --> 00:20:04,479
let's add some tags so we can get tags

00:20:02,979 --> 00:20:07,179
and of course you can see my ID is

00:20:04,479 --> 00:20:08,919
telling me straight away if there's a

00:20:07,179 --> 00:20:11,529
problem there's no such property as TAS

00:20:08,919 --> 00:20:14,139
it's not there but tags actually allows

00:20:11,529 --> 00:20:16,690
me to give so you know it's it's it's

00:20:14,139 --> 00:20:20,200
it's telling me everything that I need

00:20:16,690 --> 00:20:22,299
to know so let's say owner stack 72 and

00:20:20,200 --> 00:20:23,739
let's say pull me up again and it'll

00:20:22,299 --> 00:20:26,460
show me that the only thing that it

00:20:23,739 --> 00:20:32,409
actually needs to do at this point is

00:20:26,460 --> 00:20:35,019
manage and the tags so we can say

00:20:32,409 --> 00:20:37,179
details and we can say the tags so let's

00:20:35,019 --> 00:20:39,399
say no and then lastly we can pull let

00:20:37,179 --> 00:20:41,169
me destroy because it's only going to

00:20:39,399 --> 00:20:41,909
destroy the specific stack and nothing

00:20:41,169 --> 00:20:44,830
else

00:20:41,909 --> 00:20:46,479
details just the bucket just the stack

00:20:44,830 --> 00:20:50,169
and I can promise you there are hundreds

00:20:46,479 --> 00:20:52,809
of AWS s3 buckets in this specific card

00:20:50,169 --> 00:20:54,460
so let's destroy it and let's go so

00:20:52,809 --> 00:20:57,639
let's go and do something a little more

00:20:54,460 --> 00:21:00,789
interest in here so I am going to create

00:20:57,639 --> 00:21:03,489
get some predefined code that I already

00:21:00,789 --> 00:21:08,889
created and I'm going to bring this into

00:21:03,489 --> 00:21:14,950
my application so first thing I am going

00:21:08,889 --> 00:21:17,009
to get an AMI and our ami will be and a

00:21:14,950 --> 00:21:20,559
blue - 1804 AMI

00:21:17,009 --> 00:21:22,179
then I'm going to declare an SS a keeper

00:21:20,559 --> 00:21:23,889
please don't do this way of declaring

00:21:22,179 --> 00:21:25,749
your keepers this is purely for demo

00:21:23,889 --> 00:21:27,669
purposes and we're going to declare a

00:21:25,749 --> 00:21:30,070
security group and again this is just

00:21:27,669 --> 00:21:31,960
for demo purposes please don't do and

00:21:30,070 --> 00:21:34,119
burn the type unto everything that's a

00:21:31,960 --> 00:21:35,620
very bad idea and I'm not showing that

00:21:34,119 --> 00:21:41,169
that's what we should do

00:21:35,620 --> 00:21:43,900
so then we can say let webservers equals

00:21:41,169 --> 00:21:52,120
an empty unbounded array and I can say

00:21:43,900 --> 00:21:55,360
for let x equals 0 X is less than 100 X

00:21:52,120 --> 00:21:59,370
plus plus and I'm in a basic programming

00:21:55,360 --> 00:22:03,340
look right then I can say Const

00:21:59,370 --> 00:22:09,659
webserver actually just server equals

00:22:03,340 --> 00:22:14,409
new it'll be a stop at ec2 dot instance

00:22:09,659 --> 00:22:16,000
and I can call it my demo instance and

00:22:14,409 --> 00:22:18,850
we need to give everything a unique

00:22:16,000 --> 00:22:21,880
identifier so let's give it X and then

00:22:18,850 --> 00:22:24,340
we can actually go into the arguments we

00:22:21,880 --> 00:22:27,850
need to give it an ami our ami from

00:22:24,340 --> 00:22:35,490
above we can see is Ubuntu so we can say

00:22:27,850 --> 00:22:38,770
2 dot ID we need to give it an SSH key

00:22:35,490 --> 00:22:41,950
of key name I apologize and it'll be SSH

00:22:38,770 --> 00:22:45,159
key dot key name we need to give it some

00:22:41,950 --> 00:22:48,630
VPC security group IDs and I want to

00:22:45,159 --> 00:22:52,350
give it open security group that ID and

00:22:48,630 --> 00:22:55,870
lastly we can give it an instance type

00:22:52,350 --> 00:22:57,909
now remembering these magic strings is

00:22:55,870 --> 00:22:59,470
painful but as you can see paluma is all

00:22:57,909 --> 00:23:01,929
of suggesting all of these magic strings

00:22:59,470 --> 00:23:05,289
for us or we can actually go to ed of us

00:23:01,929 --> 00:23:07,120
that ec2 instance types dot and get all

00:23:05,289 --> 00:23:09,100
of the constants that go with that let's

00:23:07,120 --> 00:23:12,100
just choose t3 Small's today because

00:23:09,100 --> 00:23:18,399
that's nothing else and then lastly we

00:23:12,100 --> 00:23:21,029
need to push the server onto the array

00:23:18,399 --> 00:23:24,700
now as you can see straight away we have

00:23:21,029 --> 00:23:27,250
an error and we can actually say see

00:23:24,700 --> 00:23:29,679
that string is not assignable to an

00:23:27,250 --> 00:23:32,409
array of string so we know that we

00:23:29,679 --> 00:23:34,090
actually have to surround that because

00:23:32,409 --> 00:23:36,250
it's an array and we have everything

00:23:34,090 --> 00:23:42,760
there and then lastly we want to export

00:23:36,250 --> 00:23:47,830
cons and IP equals web servers dot map X

00:23:42,760 --> 00:23:49,130
X dot public IP so we actually have a

00:23:47,830 --> 00:23:51,320
real working

00:23:49,130 --> 00:23:54,950
application right now which if we run

00:23:51,320 --> 00:23:56,960
pull-up me up just to get the preview we

00:23:54,950 --> 00:23:59,690
will see that it's going to create the

00:23:56,960 --> 00:24:03,230
security grip the key stack on one

00:23:59,690 --> 00:24:12,740
hundred and resources we just let that

00:24:03,230 --> 00:24:14,960
plan for a second and we can see

00:24:12,740 --> 00:24:16,910
everything's there so we're gonna say no

00:24:14,960 --> 00:24:19,190
to that so why don't we take this a

00:24:16,910 --> 00:24:24,590
little further why don't we create a

00:24:19,190 --> 00:24:26,900
file called web server about TS and the

00:24:24,590 --> 00:24:34,340
first thing we need to do is import star

00:24:26,900 --> 00:24:37,640
as it is from polluting AWS excuse me

00:24:34,340 --> 00:24:42,830
and then no we can actually export class

00:24:37,640 --> 00:24:47,570
web server our web server will have a

00:24:42,830 --> 00:24:55,520
public read-only VM which is of type AWS

00:24:47,570 --> 00:24:57,800
ec2 instance and then we can have a

00:24:55,520 --> 00:25:00,590
constructor so our constructor will have

00:24:57,800 --> 00:25:02,840
a name which will have a string it'll

00:25:00,590 --> 00:25:04,490
have an ami ID which will be a plumie

00:25:02,840 --> 00:25:09,380
data input which we'll talk about in a

00:25:04,490 --> 00:25:15,260
second a string and lastly it will have

00:25:09,380 --> 00:25:18,860
an instance type which will be an AWS

00:25:15,260 --> 00:25:20,480
that ec2 instance type so we have all of

00:25:18,860 --> 00:25:24,200
the different pieces I need to import

00:25:20,480 --> 00:25:30,260
bloomin I apologize star as flew me from

00:25:24,200 --> 00:25:31,940
a balloon me blue me now as a as an

00:25:30,260 --> 00:25:34,250
Operations person it would be nice to be

00:25:31,940 --> 00:25:36,530
able to abstract a lot of the different

00:25:34,250 --> 00:25:39,560
components that we allow our developers

00:25:36,530 --> 00:25:42,370
to handle away so what we can actually

00:25:39,560 --> 00:25:45,440
do is we can take that specific

00:25:42,370 --> 00:25:47,870
component away from them so in this case

00:25:45,440 --> 00:25:49,730
it would be the SSH key which would be

00:25:47,870 --> 00:25:51,380
centrally managed maybe and their

00:25:49,730 --> 00:25:52,730
security groups because we really don't

00:25:51,380 --> 00:25:55,130
want developers creating security groups

00:25:52,730 --> 00:26:00,200
this open and what we can actually say

00:25:55,130 --> 00:26:02,429
is that this dot VM so the instance of

00:26:00,200 --> 00:26:05,700
the VM that returns is a new

00:26:02,429 --> 00:26:08,399
k-dog sec2 about instance type of

00:26:05,700 --> 00:26:11,330
instance and it'll be let me just make

00:26:08,399 --> 00:26:11,330
sure that the names are the same

00:26:11,690 --> 00:26:16,529
actually we can just pass in the name

00:26:13,679 --> 00:26:19,860
it's fine so the name here in this case

00:26:16,529 --> 00:26:22,200
will be just name the parameters that we

00:26:19,860 --> 00:26:28,470
can actually create it against will be

00:26:22,200 --> 00:26:31,279
so our ami will be our ami ID we will

00:26:28,470 --> 00:26:35,749
use an instance type which will be an

00:26:31,279 --> 00:26:40,320
instance type we will use ASCII name

00:26:35,749 --> 00:26:42,809
which will be SSH key key name and then

00:26:40,320 --> 00:26:44,970
lastly we will pass in a security group

00:26:42,809 --> 00:26:48,929
of EPC security group IDs which we know

00:26:44,970 --> 00:26:50,490
is an array before as open as GDL ID now

00:26:48,929 --> 00:26:52,139
everything I'm showing you in here is of

00:26:50,490 --> 00:26:53,879
course JavaScript but you can very much

00:26:52,139 --> 00:26:56,100
do this in Python in exactly the same

00:26:53,879 --> 00:26:58,590
way you can create your define your own

00:26:56,100 --> 00:27:00,600
Python class and any language that

00:26:58,590 --> 00:27:01,440
bloomie sports you can do this and make

00:27:00,600 --> 00:27:04,049
it happen this way

00:27:01,440 --> 00:27:07,499
so instead of creating a new AWS ec2

00:27:04,049 --> 00:27:09,090
instance here what I'm going to do I'm

00:27:07,499 --> 00:27:14,519
just gonna copy this string to make sure

00:27:09,090 --> 00:27:19,080
it's the same and it would actually be a

00:27:14,519 --> 00:27:22,289
new web server and you can see

00:27:19,080 --> 00:27:27,110
immediately my ID has imported the

00:27:22,289 --> 00:27:29,190
correct class and we will have a name

00:27:27,110 --> 00:27:32,070
and actually we could just say name

00:27:29,190 --> 00:27:36,950
equals that we can say it's a bun to dot

00:27:32,070 --> 00:27:41,789
ID and then lastly we can say ec2 dot

00:27:36,950 --> 00:27:44,159
yes that ec2 instance type dot t3 small

00:27:41,789 --> 00:27:46,919
know it we can immediately see our IDE

00:27:44,159 --> 00:27:49,919
has told us that there's no a public IP

00:27:46,919 --> 00:27:51,809
of X because X is a webserver but X

00:27:49,919 --> 00:27:54,240
returns a VM and then we can get the

00:27:51,809 --> 00:27:55,799
public IP so it's very easy to be able

00:27:54,240 --> 00:27:57,419
to refactor our code using plumie

00:27:55,799 --> 00:27:58,740
because of the fact that we are using a

00:27:57,419 --> 00:28:00,059
real programming language and we can

00:27:58,740 --> 00:28:03,450
take advantage of the real constructs

00:28:00,059 --> 00:28:06,769
that go with it so let's go a little

00:28:03,450 --> 00:28:12,299
further I don't have a long time here

00:28:06,769 --> 00:28:15,690
let us go and have a look at the

00:28:12,299 --> 00:28:16,250
management of i/o I am is one of these

00:28:15,690 --> 00:28:18,920
piece

00:28:16,250 --> 00:28:22,460
of information that is always a real

00:28:18,920 --> 00:28:25,280
pain because it's Jason and we don't

00:28:22,460 --> 00:28:27,380
like to deal with Jason inside our

00:28:25,280 --> 00:28:29,060
declarative language is or pieces like

00:28:27,380 --> 00:28:30,590
that so paluma has created helpers that

00:28:29,060 --> 00:28:34,070
allow us to do this so let's say

00:28:30,590 --> 00:28:36,710
constant role equals new AWS that I am

00:28:34,070 --> 00:28:39,440
don't roll knight in person I would

00:28:36,710 --> 00:28:44,150
usually give a prize if anyone could

00:28:39,440 --> 00:28:46,550
tell me what the assumed rule policy for

00:28:44,150 --> 00:28:50,090
an eight event I am role is and it's

00:28:46,550 --> 00:28:52,070
usually like statement version all these

00:28:50,090 --> 00:28:53,300
different pieces but I've created a lot

00:28:52,070 --> 00:28:57,020
of rules and every time I need to look

00:28:53,300 --> 00:29:00,590
it up so gloomy has created an assumed

00:28:57,020 --> 00:29:03,730
role policy for a principle function on

00:29:00,590 --> 00:29:07,190
it that the function will take a service

00:29:03,730 --> 00:29:12,320
on the service in this case will be easy

00:29:07,190 --> 00:29:15,170
to Damas on in OBS calm now if I go and

00:29:12,320 --> 00:29:17,630
run that that looks extremely alien like

00:29:15,170 --> 00:29:19,790
because there's no role with Jason

00:29:17,630 --> 00:29:22,490
embedded but if I go back to pulling me

00:29:19,790 --> 00:29:29,990
up and I have a look at what Polly has

00:29:22,490 --> 00:29:34,070
actually created here then we will

00:29:29,990 --> 00:29:36,920
actually be able to understand that it

00:29:34,070 --> 00:29:38,810
has created the correct JSON structure

00:29:36,920 --> 00:29:42,980
for us we can see its statement action

00:29:38,810 --> 00:29:44,810
assumed role effect principle the SID

00:29:42,980 --> 00:29:46,460
I'm the version so pulling me understand

00:29:44,810 --> 00:29:48,080
under the hood that that's actually the

00:29:46,460 --> 00:29:50,030
case and we can try and deploy this just

00:29:48,080 --> 00:29:52,250
to make sure that it's a violet and role

00:29:50,030 --> 00:29:56,210
policy so I'm assuming that we will get

00:29:52,250 --> 00:29:58,460
it created right here and it will tell

00:29:56,210 --> 00:30:01,160
us there we go and it is AWS has

00:29:58,460 --> 00:30:03,380
accepted that Jason blob for the assumed

00:30:01,160 --> 00:30:05,750
role policy so we can even go a little

00:30:03,380 --> 00:30:11,270
further so I have a list of policies

00:30:05,750 --> 00:30:14,120
right here and I would like to attach

00:30:11,270 --> 00:30:19,970
each of those policies to the role so I

00:30:14,120 --> 00:30:24,310
can say select counter equals 0 I can

00:30:19,970 --> 00:30:24,310
say for Const policy

00:30:25,809 --> 00:30:32,529
in managed policy a Arendt I'm in my

00:30:29,259 --> 00:30:34,389
loop right now I can say Const RP a rule

00:30:32,529 --> 00:30:39,159
policy attachment equals new it'll be a

00:30:34,389 --> 00:30:40,690
CI a-- dot roll policy attachment now

00:30:39,159 --> 00:30:45,879
here we need to give it a unique name

00:30:40,690 --> 00:30:48,309
again so let's do dollar counter plus

00:30:45,879 --> 00:30:51,969
plus so that we incremented so it'll be

00:30:48,309 --> 00:30:54,099
0 1 2 3 etc etc and then we can actually

00:30:51,969 --> 00:30:56,619
attach the different pieces so the

00:30:54,099 --> 00:30:58,989
policy RN that we want to attach will be

00:30:56,619 --> 00:31:01,570
the policy from a loop and we need to

00:30:58,989 --> 00:31:02,889
pass it a role now usually here I would

00:31:01,570 --> 00:31:05,200
have to look at documentation that says

00:31:02,889 --> 00:31:07,779
is it the role a RN that you have to

00:31:05,200 --> 00:31:10,149
pass in or is the role name or different

00:31:07,779 --> 00:31:11,859
pieces implements a strongly type user

00:31:10,149 --> 00:31:13,989
sludge type script here which is

00:31:11,859 --> 00:31:16,359
strongly typed I can actually pass the

00:31:13,989 --> 00:31:18,549
entire rule object and Pulu me under the

00:31:16,359 --> 00:31:22,059
hood will understand the correct

00:31:18,549 --> 00:31:24,489
parameter then it needs to pick up and

00:31:22,059 --> 00:31:26,859
then I hate these magic strings as well

00:31:24,489 --> 00:31:28,659
what happens if I need to find the magic

00:31:26,859 --> 00:31:30,519
string which will lodge administrator

00:31:28,659 --> 00:31:32,229
access so that I can run my local

00:31:30,519 --> 00:31:35,649
development machine ok so I can say

00:31:32,229 --> 00:31:40,210
it'll be s that I am managed policies

00:31:35,649 --> 00:31:41,679
dot administrator access and if I go and

00:31:40,210 --> 00:31:43,749
have a look at what Pulu me is going to

00:31:41,679 --> 00:31:48,839
do right now it will tell me it's going

00:31:43,749 --> 00:31:51,159
to attach for and it will create for

00:31:48,839 --> 00:31:52,749
policy attachments and we can have a

00:31:51,159 --> 00:31:55,089
look at the details and it's just look

00:31:52,749 --> 00:31:58,809
at the administrator rule which is the

00:31:55,089 --> 00:32:00,969
important one role oh it's just gonna

00:31:58,809 --> 00:32:12,669
tell me what acts gonna attach so if I

00:32:00,969 --> 00:32:14,200
say yes amazing maximum field size of 20

00:32:12,669 --> 00:32:17,559
absolutely incredible

00:32:14,200 --> 00:32:20,019
so I've attached the wrong rules here so

00:32:17,559 --> 00:32:21,460
that's that's an error and what I'm

00:32:20,019 --> 00:32:23,229
actually trying to do but it's very easy

00:32:21,460 --> 00:32:24,999
to be able to attach these different

00:32:23,229 --> 00:32:31,330
things and in the way that we actually

00:32:24,999 --> 00:32:34,359
need to do it so let's destroy that live

00:32:31,330 --> 00:32:37,179
demo bugsy and let's take it out an

00:32:34,359 --> 00:32:38,830
interactive CLI mode and say yes and we

00:32:37,179 --> 00:32:39,160
can actually go and do something a

00:32:38,830 --> 00:32:44,140
little

00:32:39,160 --> 00:32:46,510
to more interesting at this point so I

00:32:44,140 --> 00:32:49,500
have ten minutes and I want to talk to

00:32:46,510 --> 00:32:53,110
you about secret management in philippi

00:32:49,500 --> 00:32:55,690
so I'm going to npm install a package

00:32:53,110 --> 00:32:59,140
that will help me demo this if I say at

00:32:55,690 --> 00:33:00,700
the Lummi slash random then this is a

00:32:59,140 --> 00:33:02,800
random package that will allow me to

00:33:00,700 --> 00:33:08,770
create random data so that I can show my

00:33:02,800 --> 00:33:12,240
things can be made into secret so how

00:33:08,770 --> 00:33:17,110
most tools do it right now there's

00:33:12,240 --> 00:33:19,660
random from me

00:33:17,110 --> 00:33:23,560
so most tools would require that you

00:33:19,660 --> 00:33:25,030
have an extra tool that wraps the tool

00:33:23,560 --> 00:33:26,650
that you're using in order for your

00:33:25,030 --> 00:33:29,200
secret management but I told you paluma

00:33:26,650 --> 00:33:33,600
doesn't need that to happen and in most

00:33:29,200 --> 00:33:37,270
situations we would save this so random

00:33:33,600 --> 00:33:41,560
password equals new random dot random

00:33:37,270 --> 00:33:43,660
password I say demo one and the interest

00:33:41,560 --> 00:33:46,450
is trying to appeal to an OPS audience

00:33:43,660 --> 00:33:49,030
the length of the password will be 30 I

00:33:46,450 --> 00:33:50,860
made a lot of special characters just to

00:33:49,030 --> 00:33:53,500
make sure that it's a real password that

00:33:50,860 --> 00:33:59,110
goes with it and then we can export that

00:33:53,500 --> 00:34:00,910
Const of random password and the

00:33:59,110 --> 00:34:04,150
password fighting equals random password

00:34:00,910 --> 00:34:06,610
dot result now I know that the this

00:34:04,150 --> 00:34:08,830
resource stores the password in the

00:34:06,610 --> 00:34:10,060
results field so that's why I'm putting

00:34:08,830 --> 00:34:14,169
it so you can actually see what it's

00:34:10,060 --> 00:34:17,830
good to do on the application now if I

00:34:14,169 --> 00:34:19,840
pull it me up this we will actually see

00:34:17,830 --> 00:34:22,120
that it's going to create the correct

00:34:19,840 --> 00:34:24,070
password for us but unfortunately it

00:34:22,120 --> 00:34:25,720
will store the password in the state not

00:34:24,070 --> 00:34:27,460
just because I have added the output

00:34:25,720 --> 00:34:29,560
right here but just because of the fact

00:34:27,460 --> 00:34:32,800
that Kumi doesn't understand that this

00:34:29,560 --> 00:34:34,450
is a password and that you need to treat

00:34:32,800 --> 00:34:36,940
it as such we can see the result is

00:34:34,450 --> 00:34:39,370
actually stored in here so let's create

00:34:36,940 --> 00:34:41,250
a new version of this and let's call it

00:34:39,370 --> 00:34:44,770
random password too

00:34:41,250 --> 00:34:48,730
and that'll be demo two and then lastly

00:34:44,770 --> 00:34:50,830
and random password - finally - so I'm

00:34:48,730 --> 00:34:52,470
creating a new password so I told you

00:34:50,830 --> 00:34:54,330
right at the top that pulling me

00:34:52,470 --> 00:34:56,310
takes in the plumie resources take a

00:34:54,330 --> 00:34:58,950
name they take arguments and they also

00:34:56,310 --> 00:35:00,450
take custom resource options so inside

00:34:58,950 --> 00:35:01,980
the custom resource options we have this

00:35:00,450 --> 00:35:04,410
idea where that's called additional

00:35:01,980 --> 00:35:09,840
secret outputs an additional secret

00:35:04,410 --> 00:35:12,180
output is all of the names of the

00:35:09,840 --> 00:35:15,480
outputs of this specific resource that

00:35:12,180 --> 00:35:17,550
need to be treated as secrets so we can

00:35:15,480 --> 00:35:19,830
pass as many names in here as we want so

00:35:17,550 --> 00:35:22,740
what I can actually say is that result I

00:35:19,830 --> 00:35:25,770
want to treat result of random password

00:35:22,740 --> 00:35:27,810
to as a secret before it is actually

00:35:25,770 --> 00:35:31,440
pushed out to the end point and end to

00:35:27,810 --> 00:35:35,310
the state file and if I blew me up I'm

00:35:31,440 --> 00:35:37,560
gonna say yes and skip preview to move

00:35:35,310 --> 00:35:40,190
it off interactive CLI I don't care

00:35:37,560 --> 00:35:43,590
about seeing that right at this point

00:35:40,190 --> 00:35:45,630
and we will see that we get a new secret

00:35:43,590 --> 00:35:50,160
password and it's not just secret here

00:35:45,630 --> 00:35:53,369
it is Pulu me stack export it is secret

00:35:50,160 --> 00:35:55,590
by default in our state file as well

00:35:53,369 --> 00:35:58,680
because it is using polemic AMS to

00:35:55,590 --> 00:36:00,150
create a ciphertext that even if you

00:35:58,680 --> 00:36:03,930
leak this state file it's gonna be

00:36:00,150 --> 00:36:05,849
difficult for people to actually decrypt

00:36:03,930 --> 00:36:07,740
know I told you we can push as many

00:36:05,849 --> 00:36:10,560
things in here as we want maybe we don't

00:36:07,740 --> 00:36:13,920
want our attackers to understand that it

00:36:10,560 --> 00:36:17,849
has a length of 30 and it has special

00:36:13,920 --> 00:36:19,020
characters enabled so I can go again go

00:36:17,849 --> 00:36:20,820
back to pull ooh me up

00:36:19,020 --> 00:36:22,470
skip in my preview we're going to see

00:36:20,820 --> 00:36:24,150
that no changes to our resources is

00:36:22,470 --> 00:36:26,430
happening right now we're just

00:36:24,150 --> 00:36:29,220
instructing the plumie engine to encrypt

00:36:26,430 --> 00:36:32,849
those secrets and if I come back to

00:36:29,220 --> 00:36:35,369
stack export we will see that it has the

00:36:32,849 --> 00:36:38,280
result it has special and it has length

00:36:35,369 --> 00:36:40,560
all as encrypted values and then even in

00:36:38,280 --> 00:36:42,510
the provider itself we can see all of

00:36:40,560 --> 00:36:44,339
the encryption that it's happening and

00:36:42,510 --> 00:36:45,869
coming out the back of it so we try and

00:36:44,339 --> 00:36:47,400
be secret by default because it's

00:36:45,869 --> 00:36:49,589
something that's really important to it

00:36:47,400 --> 00:36:53,280
and it's something that we really want

00:36:49,589 --> 00:36:54,720
to encourage people to do but that's of

00:36:53,280 --> 00:36:56,460
course not the only way that people have

00:36:54,720 --> 00:36:59,730
to set configuration values to their

00:36:56,460 --> 00:37:01,770
system if you need to pass a value in to

00:36:59,730 --> 00:37:04,230
the polemic configuration that will

00:37:01,770 --> 00:37:05,400
allow you to use it in a polymer

00:37:04,230 --> 00:37:06,660
application there

00:37:05,400 --> 00:37:10,280
what you would normally do is pull the

00:37:06,660 --> 00:37:16,140
me config set I'll say my secret

00:37:10,280 --> 00:37:16,950
password and we can say password 1 1 2 3

00:37:16,140 --> 00:37:19,710
00:37:16,950 --> 00:37:22,920
exclamation point now if I go back to my

00:37:19,710 --> 00:37:24,360
pluming application and I look at my

00:37:22,920 --> 00:37:25,950
devstack because this is against the

00:37:24,360 --> 00:37:27,120
devs like we will see again Paul Umi

00:37:25,950 --> 00:37:31,290
doesn't understand that this is a

00:37:27,120 --> 00:37:35,700
password so we can encrypt it passing -

00:37:31,290 --> 00:37:37,590
secret and we go back to our state well

00:37:35,700 --> 00:37:39,540
excuse me our config file and we can see

00:37:37,590 --> 00:37:41,700
that it has been encrypted using the

00:37:39,540 --> 00:37:44,220
same keys that work that I used before

00:37:41,700 --> 00:37:46,560
because it is a key that is designated

00:37:44,220 --> 00:37:49,980
to this project on this organization in

00:37:46,560 --> 00:37:51,630
the plumie sauce just to prove that that

00:37:49,980 --> 00:37:53,010
is actually secret the whole way through

00:37:51,630 --> 00:37:58,860
we can read this back

00:37:53,010 --> 00:38:03,870
so let's import star as plumie from a

00:37:58,860 --> 00:38:09,390
plumie slash below me and I'm gonna say

00:38:03,870 --> 00:38:11,760
Const config equals new polemic config

00:38:09,390 --> 00:38:14,340
so I want access to the polemic conflict

00:38:11,760 --> 00:38:18,690
block and then I want to read my secret

00:38:14,340 --> 00:38:21,150
password equals config dot get secret

00:38:18,690 --> 00:38:24,660
secret that I've actually told it to

00:38:21,150 --> 00:38:26,850
create it's called my secret password so

00:38:24,660 --> 00:38:29,430
we would pass that into our secret for

00:38:26,850 --> 00:38:34,590
the name as the secret itself and then I

00:38:29,430 --> 00:38:38,280
can just to prove export Const x equals

00:38:34,590 --> 00:38:40,050
my secret password because I believe

00:38:38,280 --> 00:38:41,130
that because get secret it actually

00:38:40,050 --> 00:38:43,050
treats it as secrets through it the

00:38:41,130 --> 00:38:46,170
whole application and there is actually

00:38:43,050 --> 00:38:48,900
nothing on it just like it's it's a type

00:38:46,170 --> 00:38:52,820
that has no parameters on the actual

00:38:48,900 --> 00:38:52,820
pipe itself and I go back to blew me up

00:38:53,120 --> 00:38:59,220
skip the preview and let's actually see

00:38:57,060 --> 00:39:00,840
all of the different pieces that it's

00:38:59,220 --> 00:39:02,370
done here it's gonna tell us it's gonna

00:39:00,840 --> 00:39:04,200
create the new resource it's gonna bomb

00:39:02,370 --> 00:39:07,410
the new output excuse me you can see the

00:39:04,200 --> 00:39:10,980
new openness of type secret and lastly

00:39:07,410 --> 00:39:14,370
if I pull Umi stack export we can see as

00:39:10,980 --> 00:39:16,710
the outputs of the provider we can see X

00:39:14,370 --> 00:39:18,779
is actually stored as a secret so of

00:39:16,710 --> 00:39:22,349
course this is really good if you have

00:39:18,779 --> 00:39:23,849
like passwords for databases or users

00:39:22,349 --> 00:39:27,719
that you're creating and you actually

00:39:23,849 --> 00:39:30,479
need to if you're creating an AWS user

00:39:27,719 --> 00:39:32,579
access level then it'll actually encrypt

00:39:30,479 --> 00:39:34,439
the output that comes back and the user

00:39:32,579 --> 00:39:36,989
then would actually have to decrypt it

00:39:34,439 --> 00:39:39,509
using their paluma KMS key now of course

00:39:36,989 --> 00:39:42,929
we give you the ability and that you can

00:39:39,509 --> 00:39:47,429
change your encryption provider so if I

00:39:42,929 --> 00:39:50,640
let me stack in it help I told you we

00:39:47,429 --> 00:39:53,579
support AWS kms as your key vault GCP

00:39:50,640 --> 00:39:57,179
kms and Ashley core vault and of course

00:39:53,579 --> 00:39:58,979
when you create a new stack a new stack

00:39:57,179 --> 00:40:00,089
you can actually tell it that you want

00:39:58,979 --> 00:40:02,189
otherwise you can actually use a

00:40:00,089 --> 00:40:04,140
passphrase and you can restrict it to

00:40:02,189 --> 00:40:06,329
different people so it's something that

00:40:04,140 --> 00:40:08,429
we we actually try and take extremely

00:40:06,329 --> 00:40:10,589
seriously it pulling me because we

00:40:08,429 --> 00:40:13,289
really believe that secret management is

00:40:10,589 --> 00:40:21,449
a big thing and that we need to promote

00:40:13,289 --> 00:40:23,549
it better in our organizations so that's

00:40:21,449 --> 00:40:25,409
bloom in a nutshell we believe it's the

00:40:23,549 --> 00:40:27,239
easiest way to program the cloud and I

00:40:25,409 --> 00:40:30,839
really mean that the word program

00:40:27,239 --> 00:40:33,929
correctly I don't mean just make CLI

00:40:30,839 --> 00:40:36,179
commands using JSON or Yama or a DSL

00:40:33,929 --> 00:40:39,569
this is actually real applications that

00:40:36,179 --> 00:40:42,630
will grow as your real software would

00:40:39,569 --> 00:40:44,219
grow because without infrastructure code

00:40:42,630 --> 00:40:46,319
your software code doesn't go anywhere

00:40:44,219 --> 00:40:49,349
it's never fit for purpose it never

00:40:46,319 --> 00:40:51,029
makes its way to your your deployment

00:40:49,349 --> 00:40:54,140
mechanism anyway so it's just as

00:40:51,029 --> 00:40:56,789
important clue um code as anything else

00:40:54,140 --> 00:40:58,380
thank you for your time I'm if you want

00:40:56,789 --> 00:41:00,749
to speak anything about this talk you

00:40:58,380 --> 00:41:02,759
can tweet me stack 72 I'm always on

00:41:00,749 --> 00:41:04,859
Twitter or you can try and get me an

00:41:02,759 --> 00:41:07,169
email I'm not so good at email and it's

00:41:04,859 --> 00:41:10,759
Paul at paluma calm and I hope you enjoy

00:41:07,169 --> 00:41:10,759
the rest of your conference Thanks

00:41:17,800 --> 00:41:34,310

YouTube URL: https://www.youtube.com/watch?v=wu8hRltDFXo


