Title: stackconf online 2020 | The blinking cursor or kubernetes for people who aren´t supposed to use it
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	...by  Michael Coté

You’ve got kubernetes up and running, and you’re ready for it to change your life! But, all you see now is a blinking cursor. What do you do now?!

This talk explains what cloud native development is, how kubernetes supports it, and give you a toolkit to start planning for how you’ll use kubernetes to improve the way your organization builds, runs, and manages your software. Drawing on case studies, you’ll get a brief introduction to what kubernetes is from a developer’s perspective and then guidance on how to use kubernetes as the basis for your organization’s development stack.

Large organizations that are managing and modernizing thousands of applications are planning out their new application platform, likely to be used for the next decade. This talk covers how to start planning for that platform:

1. Understanding what kubernetes does and what you’ll need to add on.
2. Planning for large scale app modernization, like the 2,000+ apps at AirFrance-KLM.
3. Meatware re-platforming – to take advantage of your new platform, like The Home Depot & Daimler, you’ll need to change how you work.

After this talk, you’ll have a better idea of what to do next once you’re faced with the blinking cursor.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:11,189
[Music]

00:00:11,230 --> 00:00:17,720
well hi there thanks for coming to my

00:00:13,670 --> 00:00:19,340
talk I really like long titles so that's

00:00:17,720 --> 00:00:21,650
what I have here they often get

00:00:19,340 --> 00:00:23,840
shortened there's even some that I've

00:00:21,650 --> 00:00:26,930
cut off of here but what I want to go

00:00:23,840 --> 00:00:28,730
over is what I call a classic blinking

00:00:26,930 --> 00:00:31,220
cursor problem which is there's some

00:00:28,730 --> 00:00:33,650
exciting new technology you have and you

00:00:31,220 --> 00:00:35,720
want to figure out what to do once you

00:00:33,650 --> 00:00:38,120
get it set up like what the point of it

00:00:35,720 --> 00:00:42,020
is why you would be interested in doing

00:00:38,120 --> 00:00:43,940
it so that technology in particular as

00:00:42,020 --> 00:00:46,399
as the title would indicate is

00:00:43,940 --> 00:00:47,899
kubernetes now I think kubernetes Savina

00:00:46,399 --> 00:00:50,300
has been around for quite some time I

00:00:47,899 --> 00:00:51,800
don't know five years or so depending on

00:00:50,300 --> 00:00:53,600
what you read and when that was written

00:00:51,800 --> 00:00:56,000
because I guess that's how dates work

00:00:53,600 --> 00:00:59,090
but you know I'm more or less a

00:00:56,000 --> 00:01:00,620
developer minded person I've had a lot

00:00:59,090 --> 00:01:02,840
of other jobs but I tend to approach

00:01:00,620 --> 00:01:05,449
things in the technology space from a

00:01:02,840 --> 00:01:07,910
developer perspective and one thing I've

00:01:05,449 --> 00:01:09,710
noticed is the sort of I don't know if

00:01:07,910 --> 00:01:12,380
it's a paradox but it says contradiction

00:01:09,710 --> 00:01:14,780
in the kubernetes world which is you see

00:01:12,380 --> 00:01:17,240
all sorts of commentary like this right

00:01:14,780 --> 00:01:19,250
and and some of this is I mean more or

00:01:17,240 --> 00:01:21,979
less all of this is helpful but some of

00:01:19,250 --> 00:01:23,420
it is is more helpful than others but in

00:01:21,979 --> 00:01:25,760
general what I've seen over the years is

00:01:23,420 --> 00:01:27,710
ever since kubernetes came out what we

00:01:25,760 --> 00:01:30,049
met call developers and you know

00:01:27,710 --> 00:01:32,210
application developers also system

00:01:30,049 --> 00:01:33,860
developers of course but let's just say

00:01:32,210 --> 00:01:36,140
developers in general have been very

00:01:33,860 --> 00:01:37,909
interested in kubernetes and they've

00:01:36,140 --> 00:01:41,540
been you know trying to use it and stand

00:01:37,909 --> 00:01:43,970
it up and understand it and I think in a

00:01:41,540 --> 00:01:47,210
large part we should probably credit

00:01:43,970 --> 00:01:49,400
developers a huge amount for the success

00:01:47,210 --> 00:01:50,990
of kubernetes I mean it's it at one

00:01:49,400 --> 00:01:53,180
point it was not a successful thing

00:01:50,990 --> 00:01:54,920
there were many rivals and then all the

00:01:53,180 --> 00:01:58,850
sudden all the rival platforms to it

00:01:54,920 --> 00:02:00,950
just sort of succumbed to the momentum

00:01:58,850 --> 00:02:02,869
of kubernetes which i think is great for

00:02:00,950 --> 00:02:04,430
us all but then in the past couple of

00:02:02,869 --> 00:02:06,680
years we've seen the sentiment like this

00:02:04,430 --> 00:02:08,390
that like developers should really not

00:02:06,680 --> 00:02:10,429
pay attention to kubernetes like it's

00:02:08,390 --> 00:02:12,620
it's not for them essentially and

00:02:10,429 --> 00:02:14,060
there's even more fun things like you

00:02:12,620 --> 00:02:17,090
know it's going to become boring and

00:02:14,060 --> 00:02:19,160
sort of meaningless which which is just

00:02:17,090 --> 00:02:21,290
a key way of saying that it will become

00:02:19,160 --> 00:02:23,840
ubiquitous and not such a popular

00:02:21,290 --> 00:02:25,640
concern anymore because it works and

00:02:23,840 --> 00:02:28,280
operates well but I've been wondering

00:02:25,640 --> 00:02:30,080
recently like if developers and by

00:02:28,280 --> 00:02:31,849
implication Enterprise architects and

00:02:30,080 --> 00:02:33,650
you know sort of non operations people

00:02:31,849 --> 00:02:37,220
are not supposed to pay attention to

00:02:33,650 --> 00:02:39,920
kubernetes then like what are they

00:02:37,220 --> 00:02:41,840
supposed to do what's a developer and an

00:02:39,920 --> 00:02:43,540
Enterprise Architect supposed to do with

00:02:41,840 --> 00:02:45,620
this kubernetes stuff that they were

00:02:43,540 --> 00:02:48,860
passionate enough about over the years

00:02:45,620 --> 00:02:51,590
to actually make it the the dominant new

00:02:48,860 --> 00:02:54,530
way of doing cloud native infrastructure

00:02:51,590 --> 00:02:56,060
I think as always with developers it's

00:02:54,530 --> 00:02:58,970
always good to sort of go back to the

00:02:56,060 --> 00:03:00,560
basics and reassess what it is you as a

00:02:58,970 --> 00:03:02,030
developer should be doing what is it the

00:03:00,560 --> 00:03:04,940
goal that you have how do you make sure

00:03:02,030 --> 00:03:07,760
that you can afford you know your weekly

00:03:04,940 --> 00:03:09,980
pair of toe shoes that that you're gonna

00:03:07,760 --> 00:03:11,810
need because I'm sure you know they

00:03:09,980 --> 00:03:12,709
start to get a little smelly maybe you

00:03:11,810 --> 00:03:15,650
can just throw them in the washing

00:03:12,709 --> 00:03:17,180
machine I'm not sure but so first of all

00:03:15,650 --> 00:03:19,069
let's look at the basics of what I think

00:03:17,180 --> 00:03:20,930
developers should do and and again I

00:03:19,069 --> 00:03:23,930
think this is very critical so that we

00:03:20,930 --> 00:03:25,250
understand the why of kubernetes and how

00:03:23,930 --> 00:03:27,890
you should start thinking about

00:03:25,250 --> 00:03:30,200
interacting it what you get from it and

00:03:27,890 --> 00:03:33,799
and the platforms that are built on top

00:03:30,200 --> 00:03:36,530
of it so first of all as one of my

00:03:33,799 --> 00:03:39,200
enterprise architect friends who lives

00:03:36,530 --> 00:03:41,660
here in London once put it the job of

00:03:39,200 --> 00:03:43,400
developers is to move pixels on the

00:03:41,660 --> 00:03:45,380
screen now of course application

00:03:43,400 --> 00:03:48,280
developers but this is a way of saying

00:03:45,380 --> 00:03:51,230
that if you're an application developer

00:03:48,280 --> 00:03:53,389
you're writing software that conceivably

00:03:51,230 --> 00:03:55,430
people will be using these people's will

00:03:53,389 --> 00:03:57,350
people these people have a task that

00:03:55,430 --> 00:03:58,670
they want to achieve and the way that

00:03:57,350 --> 00:04:00,620
they'll do that is by using your

00:03:58,670 --> 00:04:03,200
software using features in your software

00:04:00,620 --> 00:04:05,720
and what that really means if you think

00:04:03,200 --> 00:04:07,250
about it now I guess this is for people

00:04:05,720 --> 00:04:09,310
assuming that they have vision if they

00:04:07,250 --> 00:04:12,410
didn't have vision you would be moving

00:04:09,310 --> 00:04:14,030
airwaves in the air or something and if

00:04:12,410 --> 00:04:16,370
you're doing it through other sensory

00:04:14,030 --> 00:04:19,070
things you would sort of induce the

00:04:16,370 --> 00:04:20,570
movement of whatever needed to happen to

00:04:19,070 --> 00:04:22,729
have a person realized that there was

00:04:20,570 --> 00:04:26,060
some sort of activity going on and the

00:04:22,729 --> 00:04:28,250
computer space but well simple it down

00:04:26,060 --> 00:04:30,169
to moving pixels on the screen but

00:04:28,250 --> 00:04:32,390
you're you're changing what the UI looks

00:04:30,169 --> 00:04:33,860
like right and what the UI looks like is

00:04:32,390 --> 00:04:35,840
changed by what happens in the backend

00:04:33,860 --> 00:04:37,900
and all of these sort of things right so

00:04:35,840 --> 00:04:40,879
you don't only do UI develop

00:04:37,900 --> 00:04:43,310
but to continue to the absurdity you

00:04:40,879 --> 00:04:45,169
really are constantly thinking about how

00:04:43,310 --> 00:04:47,300
do I represent the workflow the things

00:04:45,169 --> 00:04:49,550
that people are doing on the screen how

00:04:47,300 --> 00:04:50,840
do I think about you know moving pixels

00:04:49,550 --> 00:04:52,460
on the screen so that's the primary

00:04:50,840 --> 00:04:55,250
thing you're delivering is an

00:04:52,460 --> 00:04:58,099
application right not necessarily like

00:04:55,250 --> 00:05:01,189
you know frameworks and builds all this

00:04:58,099 --> 00:05:02,900
other stuff as we'll get into and what's

00:05:01,189 --> 00:05:05,240
the second thing that I think developers

00:05:02,900 --> 00:05:08,389
should be focused on and I think that is

00:05:05,240 --> 00:05:10,039
put in this way it's it's making sure

00:05:08,389 --> 00:05:12,110
that they're doing number one as

00:05:10,039 --> 00:05:15,050
efficiently as possible and I think in

00:05:12,110 --> 00:05:18,620
recent years in in a decade or so more I

00:05:15,050 --> 00:05:20,210
think the the concise helpful way that

00:05:18,620 --> 00:05:22,729
we think about this is removing waste

00:05:20,210 --> 00:05:24,440
from the process of doing one right and

00:05:22,729 --> 00:05:26,419
thinking about what are all the

00:05:24,440 --> 00:05:28,400
activities that we do other than

00:05:26,419 --> 00:05:30,020
programming that move pixels on the

00:05:28,400 --> 00:05:32,599
screen other than maybe testing like

00:05:30,020 --> 00:05:34,250
what's that core thing those activities

00:05:32,599 --> 00:05:37,310
that we do that moves the pixels on the

00:05:34,250 --> 00:05:40,490
screen and everything else to use lean

00:05:37,310 --> 00:05:43,159
terminology has no no business value if

00:05:40,490 --> 00:05:44,810
we will how do we eliminate the time

00:05:43,159 --> 00:05:46,550
that we spend on those business value

00:05:44,810 --> 00:05:49,669
also eliminate bottlenecks you know wait

00:05:46,550 --> 00:05:51,379
time is waste but you know I think I

00:05:49,669 --> 00:05:53,000
think let's start with like these are

00:05:51,379 --> 00:05:54,770
the things developers are concerned with

00:05:53,000 --> 00:05:56,360
and as we look at an understanding of

00:05:54,770 --> 00:05:59,300
what kubernetes is and therefore what

00:05:56,360 --> 00:06:02,180
developers should do about about a cloud

00:05:59,300 --> 00:06:03,770
native platform let's always let's

00:06:02,180 --> 00:06:05,539
always remember these two things and if

00:06:03,770 --> 00:06:07,520
we're not shooting towards these goals

00:06:05,539 --> 00:06:08,870
then that is why we shouldn't be paying

00:06:07,520 --> 00:06:11,300
attention to something and we should

00:06:08,870 --> 00:06:14,750
look to sort of remove the waste of

00:06:11,300 --> 00:06:17,139
worrying about it so I think I think a

00:06:14,750 --> 00:06:19,580
stretch goal that you have as well is

00:06:17,139 --> 00:06:21,110
and this is kind of the ultimate goal

00:06:19,580 --> 00:06:23,419
that you end up having why you're moving

00:06:21,110 --> 00:06:24,680
pixels on the screen is you actually

00:06:23,419 --> 00:06:27,680
want to start thinking about from the

00:06:24,680 --> 00:06:29,629
business side we want to start thinking

00:06:27,680 --> 00:06:31,279
about product managing the business we

00:06:29,629 --> 00:06:33,800
want to make the business programmable

00:06:31,279 --> 00:06:36,560
we want to think every week if we get

00:06:33,800 --> 00:06:38,029
the capability how can we move pixels on

00:06:36,560 --> 00:06:39,259
the screen what features can we

00:06:38,029 --> 00:06:41,300
introduce into our software that

00:06:39,259 --> 00:06:43,550
actually changes and improves the nature

00:06:41,300 --> 00:06:46,039
of the business that we're doing and and

00:06:43,550 --> 00:06:48,080
this is kind of the advanced sort of

00:06:46,039 --> 00:06:49,520
result of a developer is you're helping

00:06:48,080 --> 00:06:51,300
the business side develop what they're

00:06:49,520 --> 00:06:53,819
doing you are creating the

00:06:51,300 --> 00:06:56,940
product as embodied in the software that

00:06:53,819 --> 00:06:59,729
runs the business as well which you know

00:06:56,940 --> 00:07:01,349
is the topic of all sorts of discussion

00:06:59,729 --> 00:07:04,530
and digital transformation and things

00:07:01,349 --> 00:07:06,479
like that so let's look at those two

00:07:04,530 --> 00:07:08,849
things how do we move pixels on the

00:07:06,479 --> 00:07:11,240
screen and how do we get to doing waste

00:07:08,849 --> 00:07:14,909
removal well I think the most

00:07:11,240 --> 00:07:16,379
efficacious or whatever the the best way

00:07:14,909 --> 00:07:19,199
to think about how you move pixels on

00:07:16,379 --> 00:07:21,539
the screen how you think about creating

00:07:19,199 --> 00:07:23,310
that good you know features that are

00:07:21,539 --> 00:07:26,490
actually good and useful for end users

00:07:23,310 --> 00:07:28,349
that I see is developers focus on you

00:07:26,490 --> 00:07:30,449
know this this small batch cycle my

00:07:28,349 --> 00:07:32,490
simplification of it and they think

00:07:30,449 --> 00:07:35,250
about how can we get our deploys down as

00:07:32,490 --> 00:07:38,069
frequently as possible may let's say

00:07:35,250 --> 00:07:40,199
weekly so that we can think of what is a

00:07:38,069 --> 00:07:41,550
feature that we could put in place what

00:07:40,199 --> 00:07:44,219
is a way we can think about our software

00:07:41,550 --> 00:07:46,289
how would we test out and measure if

00:07:44,219 --> 00:07:48,840
that was an appropriate feature right if

00:07:46,289 --> 00:07:50,909
we if we move the pixel around this way

00:07:48,840 --> 00:07:52,940
do people use the software more

00:07:50,909 --> 00:07:55,469
efficiently buy more stuff from us and

00:07:52,940 --> 00:07:57,509
how do we learn from that so that we can

00:07:55,469 --> 00:07:59,430
adapt and change our software we get

00:07:57,509 --> 00:08:00,690
this feedback loop in place where

00:07:59,430 --> 00:08:04,110
because we're deploying a new feature

00:08:00,690 --> 00:08:06,419
every week we can theorize and study if

00:08:04,110 --> 00:08:07,949
the feature actually accomplished the

00:08:06,419 --> 00:08:09,569
goals that we had and if it did we can

00:08:07,949 --> 00:08:12,990
go solve another problem and if it did

00:08:09,569 --> 00:08:14,729
not we can go try that problem again you

00:08:12,990 --> 00:08:15,509
know you look at companies like

00:08:14,729 --> 00:08:18,419
booking.com

00:08:15,509 --> 00:08:20,279
and they run thousands of tests at any

00:08:18,419 --> 00:08:22,590
given time they're constantly testing if

00:08:20,279 --> 00:08:24,659
their theories of how they move pixels

00:08:22,590 --> 00:08:27,120
around the screen actually help their

00:08:24,659 --> 00:08:29,669
end-users achieve goals now let me give

00:08:27,120 --> 00:08:31,680
you an example of how moving pixels on

00:08:29,669 --> 00:08:33,620
the screen paying attention if it's

00:08:31,680 --> 00:08:37,440
accomplishing end users goals and

00:08:33,620 --> 00:08:38,789
actually narrowing down to thinking

00:08:37,440 --> 00:08:40,919
about how you're really programming the

00:08:38,789 --> 00:08:42,690
business of a very seemingly boring but

00:08:40,919 --> 00:08:45,990
a very effective example of that and

00:08:42,690 --> 00:08:48,390
that is a story from Daimler the people

00:08:45,990 --> 00:08:51,709
who make Mercedes in addition to other

00:08:48,390 --> 00:08:53,940
things talks about how they actually

00:08:51,709 --> 00:08:56,699
positively change the business and

00:08:53,940 --> 00:08:58,800
improved the jobs that their users were

00:08:56,699 --> 00:08:59,970
doing and that is so there's a there's a

00:08:58,800 --> 00:09:02,459
team over

00:08:59,970 --> 00:09:04,199
daimler that is in charge of the the

00:09:02,459 --> 00:09:06,690
website where you go to search for and

00:09:04,199 --> 00:09:08,220
kind of build up your cars it's it's the

00:09:06,690 --> 00:09:10,470
whole process of if you're looking for a

00:09:08,220 --> 00:09:11,940
car it goes all the way down to letting

00:09:10,470 --> 00:09:13,589
you browse browse the types of cars

00:09:11,940 --> 00:09:15,149
online and then go book an appointment

00:09:13,589 --> 00:09:18,180
and other things like that at a

00:09:15,149 --> 00:09:19,709
dealership to hopefully buy one so the

00:09:18,180 --> 00:09:23,100
scope they're looking at the entire

00:09:19,709 --> 00:09:24,899
Indian processes we we as the the team

00:09:23,100 --> 00:09:28,110
the business were supporting is getting

00:09:24,899 --> 00:09:31,740
people to buy cars right and this team

00:09:28,110 --> 00:09:33,449
in taking a very small batch of product

00:09:31,740 --> 00:09:35,519
centric way to doing things even the you

00:09:33,449 --> 00:09:37,500
know they're developers right and

00:09:35,519 --> 00:09:38,940
product managers who are doing that they

00:09:37,500 --> 00:09:41,399
they had a site where you could search

00:09:38,940 --> 00:09:43,829
for cars and they noticed that when they

00:09:41,399 --> 00:09:45,630
did an analysis of kind of looking at

00:09:43,829 --> 00:09:47,009
things that people search for what they

00:09:45,630 --> 00:09:49,500
noticed was that people were searching

00:09:47,009 --> 00:09:51,980
for vans a lot in addition to cars now

00:09:49,500 --> 00:09:54,389
the problem was on the business side

00:09:51,980 --> 00:09:56,069
because vans were considered to be

00:09:54,389 --> 00:09:58,019
something that was a professional grade

00:09:56,069 --> 00:10:00,149
the plumbers paid attention to and other

00:09:58,019 --> 00:10:01,620
people like that of course it's a

00:10:00,149 --> 00:10:03,930
separate line of business it's not in

00:10:01,620 --> 00:10:06,839
the kind of retail car space so of

00:10:03,930 --> 00:10:09,120
course if you had an application that

00:10:06,839 --> 00:10:10,560
was intended to be to help people buying

00:10:09,120 --> 00:10:11,790
cars you wouldn't have vans in there

00:10:10,560 --> 00:10:13,610
because this is a completely separate

00:10:11,790 --> 00:10:16,800
concern who's interested in buying vans

00:10:13,610 --> 00:10:18,839
so this is a curious thing that because

00:10:16,800 --> 00:10:21,209
they were operating in this small batch

00:10:18,839 --> 00:10:24,509
mentality they had this product sort of

00:10:21,209 --> 00:10:26,399
way of thinking about things they they

00:10:24,509 --> 00:10:28,410
were curious why are people searching

00:10:26,399 --> 00:10:30,720
for vans what should we do about that

00:10:28,410 --> 00:10:32,370
so they started putting some theories in

00:10:30,720 --> 00:10:34,860
place they interviewed users and they

00:10:32,370 --> 00:10:37,500
found out that like like our friends the

00:10:34,860 --> 00:10:39,899
Kinesis here there were actually a lot

00:10:37,500 --> 00:10:41,370
of people who were consumers if you will

00:10:39,899 --> 00:10:43,019
retail people who wanted to buy vans

00:10:41,370 --> 00:10:45,720
because they wanted to go on a summer

00:10:43,019 --> 00:10:47,880
trip and they wanted to outfit a van to

00:10:45,720 --> 00:10:49,949
be a camping vehicle that they could go

00:10:47,880 --> 00:10:51,329
into and on and on right so there were

00:10:49,949 --> 00:10:55,439
actually people who wanted to buy these

00:10:51,329 --> 00:10:57,329
vans so after more experimentation and I

00:10:55,439 --> 00:10:59,100
think it took a month or so to go talk

00:10:57,329 --> 00:11:00,930
with the business side there was this

00:10:59,100 --> 00:11:03,180
phenomenal thing this is the ultimate

00:11:00,930 --> 00:11:05,189
goal that you have with a product

00:11:03,180 --> 00:11:06,689
centric way of doing software where the

00:11:05,189 --> 00:11:08,399
development team was able to go to the

00:11:06,689 --> 00:11:10,139
van line of business for the sprinters

00:11:08,399 --> 00:11:11,320
there and say you know these people want

00:11:10,139 --> 00:11:13,900
to buy

00:11:11,320 --> 00:11:16,720
vans right we have evidence of that so

00:11:13,900 --> 00:11:18,640
why don't we do an experiment and show

00:11:16,720 --> 00:11:19,570
results for vans right even though we

00:11:18,640 --> 00:11:22,660
think of it as something that only

00:11:19,570 --> 00:11:24,970
plumbers buy actual families and other

00:11:22,660 --> 00:11:26,770
people want to buy it so let's put into

00:11:24,970 --> 00:11:28,870
production showing them search results

00:11:26,770 --> 00:11:30,970
for vans and our theory is that people

00:11:28,870 --> 00:11:32,230
will be interested in buying those so

00:11:30,970 --> 00:11:34,930
you run that through several small

00:11:32,230 --> 00:11:36,430
batches and lo and behold people are

00:11:34,930 --> 00:11:38,950
interested in buying vans so you've

00:11:36,430 --> 00:11:41,140
really transformed the business around

00:11:38,950 --> 00:11:43,120
you brought a new revenue that's very

00:11:41,140 --> 00:11:44,980
cheap for the business through applying

00:11:43,120 --> 00:11:46,360
this kind of small batch cycle and

00:11:44,980 --> 00:11:48,640
applying this idea of being able to

00:11:46,360 --> 00:11:51,130
program the business right this is one

00:11:48,640 --> 00:11:53,290
of those examples of one of the kind of

00:11:51,130 --> 00:11:54,610
ultimate realizations of good

00:11:53,290 --> 00:11:57,580
transformation that you're shooting for

00:11:54,610 --> 00:11:59,980
so now let's try to bring that back to

00:11:57,580 --> 00:12:02,350
the tow to kubernetes and development

00:11:59,980 --> 00:12:05,860
and kind of look at how people achieve

00:12:02,350 --> 00:12:07,630
that now I think starting to expand out

00:12:05,860 --> 00:12:09,430
from this idea of moving pixels on the

00:12:07,630 --> 00:12:12,240
screen right and kind of getting to that

00:12:09,430 --> 00:12:14,500
stretch goal paying attention to product

00:12:12,240 --> 00:12:16,480
the way that you start to achieve that

00:12:14,500 --> 00:12:17,860
as I alluded to is you really widen the

00:12:16,480 --> 00:12:20,080
scope of what you're looking at right

00:12:17,860 --> 00:12:22,630
like you look at the full end in process

00:12:20,080 --> 00:12:25,660
of what it means to move those pixels on

00:12:22,630 --> 00:12:27,550
the screen to really change your

00:12:25,660 --> 00:12:29,980
mentality to this product approach and

00:12:27,550 --> 00:12:33,070
look at how you're solving your users

00:12:29,980 --> 00:12:35,650
problems right so this is you know in

00:12:33,070 --> 00:12:37,990
one way represented by what we and in

00:12:35,650 --> 00:12:39,850
VMworld are like to call the software

00:12:37,990 --> 00:12:42,640
supply chain right and you're constantly

00:12:39,850 --> 00:12:45,130
pulling back and back to think about as

00:12:42,640 --> 00:12:47,380
long ago Damien Edwards and John Willis

00:12:45,130 --> 00:12:50,350
came up with like what is what is the

00:12:47,380 --> 00:12:51,940
full Endon cycle from concept to caching

00:12:50,350 --> 00:12:54,190
right coming up with an idea and

00:12:51,940 --> 00:12:55,330
actually collecting the money for it and

00:12:54,190 --> 00:12:56,320
you know if you're in government and

00:12:55,330 --> 00:12:57,880
other things like that you can

00:12:56,320 --> 00:12:59,710
substitute whatever mission you're

00:12:57,880 --> 00:13:04,120
shooting after but I'll just speak in

00:12:59,710 --> 00:13:05,860
commercial terms cuz it's easier but

00:13:04,120 --> 00:13:07,420
what is that full cycle and typically

00:13:05,860 --> 00:13:08,920
with software we're narrowing down a

00:13:07,420 --> 00:13:10,780
little bit here right there's not so

00:13:08,920 --> 00:13:12,490
much the too much of the business

00:13:10,780 --> 00:13:14,920
development but what you're starting

00:13:12,490 --> 00:13:16,540
with is an existing portfolio of

00:13:14,920 --> 00:13:17,800
applications that you have and new

00:13:16,540 --> 00:13:19,930
applications that you're looking to

00:13:17,800 --> 00:13:21,340
product manage you kind of analyze what

00:13:19,930 --> 00:13:23,290
those businesses are come up with

00:13:21,340 --> 00:13:24,350
theories of what to do like for example

00:13:23,290 --> 00:13:25,430
like we should try to sell

00:13:24,350 --> 00:13:27,920
Vance if that's what people are

00:13:25,430 --> 00:13:29,390
searching you your product manager out a

00:13:27,920 --> 00:13:31,700
backlog the features that you're gonna

00:13:29,390 --> 00:13:35,150
do you write some code you know you go

00:13:31,700 --> 00:13:36,500
through a QA process you you you

00:13:35,150 --> 00:13:38,390
basically you know you're gonna package

00:13:36,500 --> 00:13:40,250
things up in containers cuz that's just

00:13:38,390 --> 00:13:41,630
the way things are done it runs through

00:13:40,250 --> 00:13:44,240
your continuous integration and

00:13:41,630 --> 00:13:47,240
continuous delivery cycle to get

00:13:44,240 --> 00:13:48,650
packaged up and ultimately hopefully you

00:13:47,240 --> 00:13:49,700
know this is a part that the devops

00:13:48,650 --> 00:13:52,190
world kind of brought to our attention

00:13:49,700 --> 00:13:54,170
is you should deploy to production and

00:13:52,190 --> 00:13:55,940
it should run effectively and as a

00:13:54,170 --> 00:13:58,160
developer this is something nowadays you

00:13:55,940 --> 00:13:59,180
should be very concerned with is until

00:13:58,160 --> 00:14:00,770
your application is running in

00:13:59,180 --> 00:14:03,050
production I would argue that you have

00:14:00,770 --> 00:14:04,460
not done your job right like you you

00:14:03,050 --> 00:14:05,780
actually until it's running in

00:14:04,460 --> 00:14:07,340
production you're not focused on the

00:14:05,780 --> 00:14:09,080
full Indian thing I mean you're

00:14:07,340 --> 00:14:10,460
constantly looking at your end user to

00:14:09,080 --> 00:14:11,480
see if they're happy or things are not

00:14:10,460 --> 00:14:13,490
working out well and you're kind of

00:14:11,480 --> 00:14:16,550
adjusting to what they want to pay

00:14:13,490 --> 00:14:19,580
attention to now this all makes sense

00:14:16,550 --> 00:14:21,650
sounds great right but I want to raise

00:14:19,580 --> 00:14:22,970
this point because one of the chief

00:14:21,650 --> 00:14:24,650
things that when I talk with large

00:14:22,970 --> 00:14:26,840
organizations that they fail that is to

00:14:24,650 --> 00:14:29,300
take this idea seriously and actually

00:14:26,840 --> 00:14:32,120
analyze this full flow of what's going

00:14:29,300 --> 00:14:34,460
on right they haven't actually thought

00:14:32,120 --> 00:14:37,130
about the entire process of development

00:14:34,460 --> 00:14:39,230
of doing software means this entire flow

00:14:37,130 --> 00:14:41,000
right like they tend them to locally

00:14:39,230 --> 00:14:42,410
optimize and think about just one little

00:14:41,000 --> 00:14:44,390
component right the developers still

00:14:42,410 --> 00:14:46,610
think about coding and developing

00:14:44,390 --> 00:14:47,720
features you know business people if

00:14:46,610 --> 00:14:50,090
you're lucky you're kind of thinking

00:14:47,720 --> 00:14:52,100
about product management and definitely

00:14:50,090 --> 00:14:53,870
you know operations people tend to still

00:14:52,100 --> 00:14:55,340
think think about their own world of

00:14:53,870 --> 00:14:57,440
doing things and don't think all the way

00:14:55,340 --> 00:14:58,850
back to the developers and you know the

00:14:57,440 --> 00:15:01,100
companies aren't taking the the more

00:14:58,850 --> 00:15:03,620
all-in holistic view of things going on

00:15:01,100 --> 00:15:06,470
and just as a proof point for that and

00:15:03,620 --> 00:15:09,560
when you look at surveys of just never

00:15:06,470 --> 00:15:10,940
minding continuous delivery but if you

00:15:09,560 --> 00:15:12,590
think about that whole pipeline that

00:15:10,940 --> 00:15:14,570
whole supply chain there's actually a

00:15:12,590 --> 00:15:16,280
small amount of organizations they even

00:15:14,570 --> 00:15:18,530
have continuous integration in place

00:15:16,280 --> 00:15:20,450
right and this is my estimate based on

00:15:18,530 --> 00:15:22,310
about five or six years of observing

00:15:20,450 --> 00:15:23,720
various surveys that are out there and

00:15:22,310 --> 00:15:25,910
kind of looking at more recent ones from

00:15:23,720 --> 00:15:28,310
places like Forrester but you start to

00:15:25,910 --> 00:15:29,660
understand that you know if we're you

00:15:28,310 --> 00:15:31,190
know you're not going to really deliver

00:15:29,660 --> 00:15:32,120
on that full pipeline you're not going

00:15:31,190 --> 00:15:34,040
to be able to get to those weekly

00:15:32,120 --> 00:15:35,240
deploys if you don't have continuous

00:15:34,040 --> 00:15:36,560
delivery and you're not gonna be able to

00:15:35,240 --> 00:15:37,110
get continuous delivery if you don't

00:15:36,560 --> 00:15:40,320
have continued

00:15:37,110 --> 00:15:42,779
integration so I want to start there

00:15:40,320 --> 00:15:44,459
with with what developers should care

00:15:42,779 --> 00:15:46,920
about with kubernetes and and why it

00:15:44,459 --> 00:15:48,810
matters for developers and why the cloud

00:15:46,920 --> 00:15:50,459
native platforms are built on top of it

00:15:48,810 --> 00:15:52,500
start to matter why it's good to pay

00:15:50,459 --> 00:15:54,329
attention to that now I mean I'm gonna

00:15:52,500 --> 00:15:56,040
take for developers I'm gonna use this

00:15:54,329 --> 00:15:57,600
word that I don't think they like people

00:15:56,040 --> 00:16:00,089
call it the G word and that is

00:15:57,600 --> 00:16:01,620
governance and I think in particular in

00:16:00,089 --> 00:16:03,720
large organizations where you have

00:16:01,620 --> 00:16:06,899
hundreds thousands of applications that

00:16:03,720 --> 00:16:09,149
have evolved over decades right the way

00:16:06,899 --> 00:16:11,370
that you achieve scale the way that you

00:16:09,149 --> 00:16:13,320
optimize and pay attention to that

00:16:11,370 --> 00:16:15,300
entire process over a thousands of

00:16:13,320 --> 00:16:16,380
different applications hundreds of

00:16:15,300 --> 00:16:18,660
different businesses that you're

00:16:16,380 --> 00:16:21,000
operating is that you really use

00:16:18,660 --> 00:16:23,250
governance as a way to do waste removal

00:16:21,000 --> 00:16:24,990
now governance to my mind what does

00:16:23,250 --> 00:16:26,670
governance mean it means a couple of

00:16:24,990 --> 00:16:29,070
things but what I'm primarily interested

00:16:26,670 --> 00:16:31,110
in is governance as standardization

00:16:29,070 --> 00:16:32,970
right so instead of having a bunch of

00:16:31,110 --> 00:16:35,519
different variable ways let's let's

00:16:32,970 --> 00:16:37,800
imagine that you have you know we can

00:16:35,519 --> 00:16:40,410
use air france-klm as an example they

00:16:37,800 --> 00:16:42,449
have over 2000 applications and services

00:16:40,410 --> 00:16:44,670
that they're they're managing right

00:16:42,449 --> 00:16:47,190
including as they were telling me

00:16:44,670 --> 00:16:51,209
recently they have one application from

00:16:47,190 --> 00:16:52,769
1968 that is running on a custom written

00:16:51,209 --> 00:16:54,269
operating system that's kind of one of

00:16:52,769 --> 00:16:55,800
their core processes right so if you

00:16:54,269 --> 00:16:58,230
think of that as the extreme into the

00:16:55,800 --> 00:17:01,380
gradient all the way to the wonderful

00:16:58,230 --> 00:17:03,600
mobile app that I use all the time when

00:17:01,380 --> 00:17:05,939
I'm flitting about here they've got

00:17:03,600 --> 00:17:07,980
everything right and they're not unique

00:17:05,939 --> 00:17:09,689
at all large enterprises that is a

00:17:07,980 --> 00:17:10,949
snapshot of what they look like right

00:17:09,689 --> 00:17:12,809
they've got thousands of applications

00:17:10,949 --> 00:17:14,760
and if you think about over the years

00:17:12,809 --> 00:17:16,260
the variability that's introduced in the

00:17:14,760 --> 00:17:18,179
way those applications not only are

00:17:16,260 --> 00:17:19,949
written but the way that they're they're

00:17:18,179 --> 00:17:21,929
run the way that they're packaged up the

00:17:19,949 --> 00:17:23,939
way that they're managed that causes a

00:17:21,929 --> 00:17:25,620
huge amount of waste in the system as

00:17:23,939 --> 00:17:29,340
you hop between these different ways of

00:17:25,620 --> 00:17:30,780
doing things and I think I think what

00:17:29,340 --> 00:17:33,360
you need to start thinking about from a

00:17:30,780 --> 00:17:35,309
governance standpoint is how can we

00:17:33,360 --> 00:17:36,870
introduce enterprise governance that is

00:17:35,309 --> 00:17:38,669
going to remove that waste and

00:17:36,870 --> 00:17:40,710
standardize the way that we're doing

00:17:38,669 --> 00:17:42,929
things so that developers can more and

00:17:40,710 --> 00:17:44,580
more focus on just moving the pixels

00:17:42,929 --> 00:17:46,530
because we've optimized that entire

00:17:44,580 --> 00:17:48,620
delivery chain or at least we've

00:17:46,530 --> 00:17:51,170
optimized the part that we can with

00:17:48,620 --> 00:17:52,700
a cloud platform right so the theory

00:17:51,170 --> 00:17:54,590
that I've been developing recently is

00:17:52,700 --> 00:17:56,900
that putting a cloud native platform in

00:17:54,590 --> 00:17:58,580
place allows us to put that governance

00:17:56,900 --> 00:18:01,520
in place to do that standardization

00:17:58,580 --> 00:18:03,320
which allows us to remove a significant

00:18:01,520 --> 00:18:05,120
amount of waste from the system from

00:18:03,320 --> 00:18:06,590
that end end process which allows us to

00:18:05,120 --> 00:18:08,240
focus on moving pixels on the screen

00:18:06,590 --> 00:18:10,880
which allows us to put a product

00:18:08,240 --> 00:18:12,590
management standpoint in place so we can

00:18:10,880 --> 00:18:15,890
start selling Sprinter vans to the

00:18:12,590 --> 00:18:17,780
Kinesis so they can go enjoy their their

00:18:15,890 --> 00:18:19,760
vacation and we can make some new free

00:18:17,780 --> 00:18:23,720
revenue in the way we're doing our car

00:18:19,760 --> 00:18:25,520
stuff so let's look at how this theory

00:18:23,720 --> 00:18:27,980
how something like kubernetes and the

00:18:25,520 --> 00:18:33,410
platform's you build on top of it really

00:18:27,980 --> 00:18:35,000
help deliver to that let's look at what

00:18:33,410 --> 00:18:37,280
kubernetes means for developers in this

00:18:35,000 --> 00:18:39,559
context and and also this is a good

00:18:37,280 --> 00:18:41,420
excuse to use some of my favorite vector

00:18:39,559 --> 00:18:44,540
clipart but if you look at kubernetes

00:18:41,420 --> 00:18:46,130
like at its core what it's doing for you

00:18:44,540 --> 00:18:49,309
is once you've containerized your

00:18:46,130 --> 00:18:51,230
applications it's gonna figure out how

00:18:49,309 --> 00:18:53,120
to orchestrate them which is to say put

00:18:51,230 --> 00:18:54,740
them in a bunch of VMs put them in a

00:18:53,120 --> 00:18:57,650
bunch of nodes as it calls them

00:18:54,740 --> 00:18:59,270
configure all of the networking required

00:18:57,650 --> 00:19:01,100
for those containers to talk with each

00:18:59,270 --> 00:19:04,220
other but also to talk to the outside

00:19:01,100 --> 00:19:05,809
the outside world do all of the scaling

00:19:04,220 --> 00:19:07,429
up and the scaling down that you would

00:19:05,809 --> 00:19:10,070
need pass in the configuration or

00:19:07,429 --> 00:19:11,240
runtime do a lot of really great you

00:19:10,070 --> 00:19:13,850
know this is one of the strengths that I

00:19:11,240 --> 00:19:16,130
think you know for example over in the

00:19:13,850 --> 00:19:17,510
Cloud Foundry world we've been talking

00:19:16,130 --> 00:19:19,340
about this kind of thing for a while and

00:19:17,510 --> 00:19:22,370
I think we'll start to see this year as

00:19:19,340 --> 00:19:24,080
more and more kubernetes sort of based

00:19:22,370 --> 00:19:26,179
platforms come into play and

00:19:24,080 --> 00:19:29,690
applications come we'll see the huge

00:19:26,179 --> 00:19:31,550
benefits that you get from the release

00:19:29,690 --> 00:19:33,200
management things that that something

00:19:31,550 --> 00:19:35,120
like a cloud native platform has like

00:19:33,200 --> 00:19:37,490
rolling updates being all the new

00:19:35,120 --> 00:19:39,170
blue-green deploys and run multiple

00:19:37,490 --> 00:19:41,720
tests and production like booking.com

00:19:39,170 --> 00:19:44,210
does as I mentioned but the way that

00:19:41,720 --> 00:19:46,970
release management does happens with

00:19:44,210 --> 00:19:49,670
something like kubernetes is really

00:19:46,970 --> 00:19:51,620
pretty magical and done well so the

00:19:49,670 --> 00:19:54,170
point of kubernetes is if we're running

00:19:51,620 --> 00:19:57,050
everything in containers how do we

00:19:54,170 --> 00:19:59,450
actually not only release that and run

00:19:57,050 --> 00:20:00,780
it in production but how do we specify

00:19:59,450 --> 00:20:03,660
what that looks like

00:20:00,780 --> 00:20:05,850
we package it up and manage the

00:20:03,660 --> 00:20:07,830
injection of configuration into it right

00:20:05,850 --> 00:20:10,740
and the alternative to this is doing a

00:20:07,830 --> 00:20:13,550
lot of sort of scripting and automation

00:20:10,740 --> 00:20:15,870
and worrying about how builds are

00:20:13,550 --> 00:20:17,910
propagated to the system and and

00:20:15,870 --> 00:20:19,890
deployed and installed in production and

00:20:17,910 --> 00:20:21,180
kubernetes looks to really solve a

00:20:19,890 --> 00:20:22,710
tremendous amount of stuff with that

00:20:21,180 --> 00:20:25,050
with you and also run it in production

00:20:22,710 --> 00:20:28,680
and hopefully what you can start to get

00:20:25,050 --> 00:20:31,470
to here is this is a standard for how

00:20:28,680 --> 00:20:33,900
you not only run containerized

00:20:31,470 --> 00:20:35,880
applications and in production but how

00:20:33,900 --> 00:20:38,640
you describe them and package them and

00:20:35,880 --> 00:20:42,300
key for the developers how you design

00:20:38,640 --> 00:20:44,700
them and and it has implications of how

00:20:42,300 --> 00:20:46,200
that should be operating now I'm gonna

00:20:44,700 --> 00:20:47,670
get into the implications for that but

00:20:46,200 --> 00:20:49,620
just to quickly reference it if you want

00:20:47,670 --> 00:20:51,360
a much better explanation and much more

00:20:49,620 --> 00:20:53,670
in depth these are at least three

00:20:51,360 --> 00:20:55,140
resources I would point you to if you

00:20:53,670 --> 00:20:57,330
want to get a copy of the slides you can

00:20:55,140 --> 00:20:59,070
click on these things I think you know

00:20:57,330 --> 00:21:01,560
the the Kubik Adam II that we have

00:20:59,070 --> 00:21:03,780
VMware have out is a great general

00:21:01,560 --> 00:21:05,970
introduction to a lot of the concepts

00:21:03,780 --> 00:21:08,790
here and these two books the up and

00:21:05,970 --> 00:21:11,370
running one is just a as it always has

00:21:08,790 --> 00:21:13,650
been a very broad overview that goes

00:21:11,370 --> 00:21:14,940
over all the different aspects with lots

00:21:13,650 --> 00:21:17,180
of examples and I think if you want a

00:21:14,940 --> 00:21:20,520
more philosophic sort of treatment of

00:21:17,180 --> 00:21:22,830
cloud native infrastructure and you know

00:21:20,520 --> 00:21:24,930
kubernetes you can get that other book

00:21:22,830 --> 00:21:27,570
there so let's start off with the

00:21:24,930 --> 00:21:30,060
implication for developers I think I

00:21:27,570 --> 00:21:32,550
think the first shift as I was talking

00:21:30,060 --> 00:21:34,440
about is a lot of what kubernetes wants

00:21:32,550 --> 00:21:36,420
you to do is think about how you package

00:21:34,440 --> 00:21:38,220
up and therefore how from a developer

00:21:36,420 --> 00:21:39,960
standpoint how you're designing your

00:21:38,220 --> 00:21:42,540
applications how what the interaction

00:21:39,960 --> 00:21:44,400
model is so this is the first thing that

00:21:42,540 --> 00:21:46,050
I think is is good to take seriously and

00:21:44,400 --> 00:21:48,540
that is that you're going to be building

00:21:46,050 --> 00:21:51,990
distributed applications right and you

00:21:48,540 --> 00:21:54,690
know I think for a long time we've been

00:21:51,990 --> 00:21:56,490
developing distributed applications but

00:21:54,690 --> 00:21:58,890
sometimes we don't write like we have

00:21:56,490 --> 00:22:01,650
these single process monolithic

00:21:58,890 --> 00:22:04,410
applications that basically run in one

00:22:01,650 --> 00:22:06,690
process and kind of operate in that way

00:22:04,410 --> 00:22:08,850
whereas distributed applications are

00:22:06,690 --> 00:22:11,010
smaller components of applications that

00:22:08,850 --> 00:22:13,500
are broken up that are talking with each

00:22:11,010 --> 00:22:14,550
other over a network right so there's a

00:22:13,500 --> 00:22:17,820
lot of networking

00:22:14,550 --> 00:22:20,220
a lot of service discovery going on so

00:22:17,820 --> 00:22:22,620
think about the patterns of distributed

00:22:20,220 --> 00:22:24,060
applications right and from a technical

00:22:22,620 --> 00:22:26,280
standpoint of view what this means is

00:22:24,060 --> 00:22:28,320
that you're packaging up each little

00:22:26,280 --> 00:22:29,820
component as a container right it's kind

00:22:28,320 --> 00:22:33,030
of container oriented development and

00:22:29,820 --> 00:22:34,770
what we mean by that is that essentially

00:22:33,030 --> 00:22:37,620
you're gonna have a single process

00:22:34,770 --> 00:22:39,450
application for the most part and this

00:22:37,620 --> 00:22:41,280
single process thing does one thing

00:22:39,450 --> 00:22:43,770
really well right it's it's a component

00:22:41,280 --> 00:22:45,260
that's going on and then of course if

00:22:43,770 --> 00:22:48,180
you've got all these single single

00:22:45,260 --> 00:22:49,500
single purpose applications running in

00:22:48,180 --> 00:22:52,350
their own processes running in its own

00:22:49,500 --> 00:22:53,700
container you need to kind of think

00:22:52,350 --> 00:22:56,430
about how you network things together

00:22:53,700 --> 00:22:59,430
how they find each other how they sort

00:22:56,430 --> 00:23:01,320
of manage who has access to whatever but

00:22:59,430 --> 00:23:03,180
then also how you kind of coordinated

00:23:01,320 --> 00:23:05,370
and bring it all together right and in

00:23:03,180 --> 00:23:07,530
summary what you're working on our micro

00:23:05,370 --> 00:23:10,800
services and you know I'm not so

00:23:07,530 --> 00:23:12,450
interested in the the meat stack of the

00:23:10,800 --> 00:23:14,520
meat wear side of micro services we have

00:23:12,450 --> 00:23:16,080
these separate teams who are don't have

00:23:14,520 --> 00:23:17,520
to work in lockstep and things like that

00:23:16,080 --> 00:23:19,440
I mean that sounds that's a great goal

00:23:17,520 --> 00:23:22,470
to achieve but I think you could

00:23:19,440 --> 00:23:24,510
probably spend a significant amount of

00:23:22,470 --> 00:23:26,550
the rest of your developer life just

00:23:24,510 --> 00:23:28,320
achieving the technical aspects of micro

00:23:26,550 --> 00:23:30,030
services will you figure out or break up

00:23:28,320 --> 00:23:31,410
your application and have them

00:23:30,030 --> 00:23:33,210
coordinated with each other and then you

00:23:31,410 --> 00:23:35,040
know you can be doing micro services and

00:23:33,210 --> 00:23:36,360
and that'll be wonderful so this is the

00:23:35,040 --> 00:23:38,190
first thing as a developer you need to

00:23:36,360 --> 00:23:40,590
think about is if I'm running on

00:23:38,190 --> 00:23:42,420
kubernetes I am now doing distributed

00:23:40,590 --> 00:23:44,670
applications I'm now doing micro

00:23:42,420 --> 00:23:46,650
services and I'm thinking in terms of

00:23:44,670 --> 00:23:48,270
components that are in containers and I

00:23:46,650 --> 00:23:50,460
need to break up my application to do

00:23:48,270 --> 00:23:52,530
things that way now this of course

00:23:50,460 --> 00:23:54,690
implies that you're gonna be building a

00:23:52,530 --> 00:23:56,850
lot of containers right so you know

00:23:54,690 --> 00:23:58,290
currently at least in the Java world in

00:23:56,850 --> 00:24:00,030
the spring world you're constantly

00:23:58,290 --> 00:24:01,830
building jars you're building up spring

00:24:00,030 --> 00:24:04,260
boot jars right so that's kind of your

00:24:01,830 --> 00:24:05,520
unit of containment that you have you

00:24:04,260 --> 00:24:08,250
know it used to be you would build up

00:24:05,520 --> 00:24:11,010
ear files in in the Java world whatever

00:24:08,250 --> 00:24:13,260
your sort of unit of building things up

00:24:11,010 --> 00:24:16,020
was but now you're building up

00:24:13,260 --> 00:24:17,910
containers which means you're building

00:24:16,020 --> 00:24:19,230
up an operating system on top of it

00:24:17,910 --> 00:24:21,420
you're building up the frameworks that

00:24:19,230 --> 00:24:22,980
you need you're thinking about how how

00:24:21,420 --> 00:24:24,350
are these different things within a

00:24:22,980 --> 00:24:26,929
server with an

00:24:24,350 --> 00:24:28,640
Tanner operating with each other like

00:24:26,929 --> 00:24:31,220
what ports do I open up what networking

00:24:28,640 --> 00:24:33,559
do I do and this is really a whole lot

00:24:31,220 --> 00:24:34,940
of fiddly stuff and if as a developer

00:24:33,559 --> 00:24:36,590
that's part of your application now

00:24:34,940 --> 00:24:39,260
you're in charge of all of that right

00:24:36,590 --> 00:24:41,059
when new releases come out when you have

00:24:39,260 --> 00:24:42,740
new policy when you've got a update

00:24:41,059 --> 00:24:44,120
patches these are things you need to

00:24:42,740 --> 00:24:45,530
manage as well you know if you're if

00:24:44,120 --> 00:24:48,620
you're running your JVM depending on

00:24:45,530 --> 00:24:50,750
what version you are most people from

00:24:48,620 --> 00:24:52,610
what I can see they tend to run Java

00:24:50,750 --> 00:24:53,990
eight or kind of older versions of Java

00:24:52,610 --> 00:24:56,330
you've got to make sure that you've

00:24:53,990 --> 00:24:58,460
tuned and configured your JVM to do

00:24:56,330 --> 00:24:59,600
things correctly so it's it's a new set

00:24:58,460 --> 00:25:01,610
of concerns that you need to have

00:24:59,600 --> 00:25:04,429
because you're deploying in a container

00:25:01,610 --> 00:25:06,470
way and I think what you know you see

00:25:04,429 --> 00:25:08,630
emerging as a best practice is don't

00:25:06,470 --> 00:25:10,580
build your own container right or at

00:25:08,630 --> 00:25:12,679
least have a tool that you wrap around

00:25:10,580 --> 00:25:14,840
and there's many tools available that

00:25:12,679 --> 00:25:17,390
really automate this process and if you

00:25:14,840 --> 00:25:19,100
want to be really tricky as a developer

00:25:17,390 --> 00:25:20,630
kind of go to the ops group and have

00:25:19,100 --> 00:25:22,010
them take care of that for you right

00:25:20,630 --> 00:25:23,809
have them be the ones who are

00:25:22,010 --> 00:25:25,730
responsible for building containers for

00:25:23,809 --> 00:25:26,929
you which is giving up a little bit of

00:25:25,730 --> 00:25:28,580
control but your life will be much

00:25:26,929 --> 00:25:30,530
easier if you're not so much concerned

00:25:28,580 --> 00:25:32,510
of handcrafting your containers and

00:25:30,530 --> 00:25:35,600
worrying about managing that over time

00:25:32,510 --> 00:25:37,909
in kubernetes there's this notion of a

00:25:35,600 --> 00:25:40,669
pod and a pod is basically a way of

00:25:37,909 --> 00:25:43,490
wrapping around one or more highly

00:25:40,669 --> 00:25:45,200
related containers and you know there's

00:25:43,490 --> 00:25:46,580
a lot of pods are a pretty simple

00:25:45,200 --> 00:25:48,140
concept once you spend a lot of time

00:25:46,580 --> 00:25:51,020
understanding them being kind of

00:25:48,140 --> 00:25:52,880
ironically speaking but start thinking

00:25:51,020 --> 00:25:55,340
about if you're packaging things up into

00:25:52,880 --> 00:25:57,409
containers on a pod scale right and

00:25:55,340 --> 00:25:59,179
mostly it's a one-to-one mapping but as

00:25:57,409 --> 00:26:01,490
this advice from kubernetes up and

00:25:59,179 --> 00:26:03,440
running says like if you have a couple

00:26:01,490 --> 00:26:04,940
of different processes that only can

00:26:03,440 --> 00:26:07,669
operate together right if they were on a

00:26:04,940 --> 00:26:10,429
different server and they would break

00:26:07,669 --> 00:26:11,960
then that they probably belong in a pod

00:26:10,429 --> 00:26:13,520
but for example you can always run a

00:26:11,960 --> 00:26:15,320
database on a different service so that

00:26:13,520 --> 00:26:16,940
should not be in the same pod as your

00:26:15,320 --> 00:26:19,700
front-end process right like the

00:26:16,940 --> 00:26:22,190
canonical example here is if you have a

00:26:19,700 --> 00:26:24,500
web front-end that's that's serving up

00:26:22,190 --> 00:26:26,120
static files and you have another

00:26:24,500 --> 00:26:28,159
process that's always monitoring and

00:26:26,120 --> 00:26:30,350
downloading these static files from a

00:26:28,159 --> 00:26:32,210
git repo or whatever those probably

00:26:30,350 --> 00:26:33,620
belong in the same pod but it's

00:26:32,210 --> 00:26:36,169
important to think in terms of pods

00:26:33,620 --> 00:26:37,370
instead of containers because pods are

00:26:36,169 --> 00:26:40,340
the unit of

00:26:37,370 --> 00:26:42,559
control that kubernetes have so whenever

00:26:40,340 --> 00:26:44,830
you get to scaling up and scaling down

00:26:42,559 --> 00:26:48,110
whenever you get to configuring things

00:26:44,830 --> 00:26:49,730
pods are that unit that kubernetes is

00:26:48,110 --> 00:26:51,080
gonna deal with and set it directly with

00:26:49,730 --> 00:26:53,480
the container so think of them as kind

00:26:51,080 --> 00:26:55,730
of a wrapper around your containers

00:26:53,480 --> 00:26:57,980
furthermore into packaging right there's

00:26:55,730 --> 00:27:00,050
there's a lot going on with packaging

00:26:57,980 --> 00:27:02,960
things and containers and this is this

00:27:00,050 --> 00:27:04,760
is part of the the benefits that

00:27:02,960 --> 00:27:06,290
kubernetes has and part of the annoyance

00:27:04,760 --> 00:27:08,210
as always that comes with a beneficial

00:27:06,290 --> 00:27:10,220
thing so of course there's a lot of yeah

00:27:08,210 --> 00:27:11,990
Mille but you want to think about you

00:27:10,220 --> 00:27:14,480
know from this pod perspective so I'm

00:27:11,990 --> 00:27:16,280
describing what a container is I'm

00:27:14,480 --> 00:27:18,740
describing how containers are grouped

00:27:16,280 --> 00:27:21,110
into pods I'm describing how pause

00:27:18,740 --> 00:27:22,760
result in a deployment that I have so

00:27:21,110 --> 00:27:24,860
when I actually run this thing in an

00:27:22,760 --> 00:27:27,260
environment in production how are they

00:27:24,860 --> 00:27:28,730
laid out how do they what what

00:27:27,260 --> 00:27:30,590
networking do they need to know talk

00:27:28,730 --> 00:27:32,210
with each other what relation does this

00:27:30,590 --> 00:27:35,780
application deployment have and you

00:27:32,210 --> 00:27:38,000
model that all out in you know the

00:27:35,780 --> 00:27:39,800
deployments that you have you know

00:27:38,000 --> 00:27:41,570
kubernetes would call it an object and

00:27:39,800 --> 00:27:43,309
then on top of that you're also talking

00:27:41,570 --> 00:27:46,100
about so as far as our configuration

00:27:43,309 --> 00:27:47,960
goes what configuration do I need to

00:27:46,100 --> 00:27:51,200
have in the application how do I kind of

00:27:47,960 --> 00:27:52,250
pass that in and what what variables in

00:27:51,200 --> 00:27:54,080
my passing in and we'll talk about

00:27:52,250 --> 00:27:56,360
externalized configuration a little bit

00:27:54,080 --> 00:27:57,770
but think about how you're packaging up

00:27:56,360 --> 00:27:59,150
the application what its gonna look like

00:27:57,770 --> 00:28:02,090
in production right you're not only

00:27:59,150 --> 00:28:04,640
creating a jar file or kind of a build

00:28:02,090 --> 00:28:06,200
you're also are now thinking about how

00:28:04,640 --> 00:28:08,000
what does the deployment look like in

00:28:06,200 --> 00:28:10,370
production and also you can do things

00:28:08,000 --> 00:28:11,660
like think about the release strategies

00:28:10,370 --> 00:28:14,480
that you want so when it comes to a

00:28:11,660 --> 00:28:16,580
deployment how do I want not only

00:28:14,480 --> 00:28:18,800
scaling to be done but how do I want my

00:28:16,580 --> 00:28:21,170
rolling upgrades to be done what way do

00:28:18,800 --> 00:28:22,190
I want this software released so this is

00:28:21,170 --> 00:28:23,990
something that you can share this

00:28:22,190 --> 00:28:25,100
responsibility with your operations team

00:28:23,990 --> 00:28:27,440
but if you're using something like

00:28:25,100 --> 00:28:28,970
kubernetes directly you want to think

00:28:27,440 --> 00:28:31,100
about alright now I'm in charge of this

00:28:28,970 --> 00:28:32,750
this release plan that I have so you

00:28:31,100 --> 00:28:35,120
start thinking about what this packaging

00:28:32,750 --> 00:28:37,190
is and what does that end up looking

00:28:35,120 --> 00:28:39,140
like and you know to give you this is

00:28:37,190 --> 00:28:41,510
from the spring music store if I

00:28:39,140 --> 00:28:43,730
remember but you know this is kind of a

00:28:41,510 --> 00:28:45,410
sense of like the mapping that you'll be

00:28:43,730 --> 00:28:47,450
doing we'll get into what these these

00:28:45,410 --> 00:28:48,890
probes are in a little bit so that that

00:28:47,450 --> 00:28:50,070
said there's a couple of things as a

00:28:48,890 --> 00:28:52,410
developer that are sort of

00:28:50,070 --> 00:28:55,140
like must that you need to do these are

00:28:52,410 --> 00:28:57,360
things that kubernetes is expecting as

00:28:55,140 --> 00:28:58,800
far as probe interaction with your

00:28:57,360 --> 00:29:01,230
containers with pods that you're gonna

00:28:58,800 --> 00:29:03,450
have now some of these are convention

00:29:01,230 --> 00:29:05,760
and other ones of them are direct things

00:29:03,450 --> 00:29:07,170
you need to implement and a couple of

00:29:05,760 --> 00:29:09,570
them so if you look at the life cycle of

00:29:07,170 --> 00:29:10,980
how kubernetes is running your

00:29:09,570 --> 00:29:13,470
containers your probes what it's gonna

00:29:10,980 --> 00:29:16,080
do is it's constantly monitoring the

00:29:13,470 --> 00:29:18,720
state of your apps of your probes your

00:29:16,080 --> 00:29:21,030
containers and seeing if it's good if it

00:29:18,720 --> 00:29:22,500
has liveliness or health so you actually

00:29:21,030 --> 00:29:24,000
have to implement it doesn't know what

00:29:22,500 --> 00:29:26,010
the answer to that is so you have to go

00:29:24,000 --> 00:29:29,790
into each of the containers you've built

00:29:26,010 --> 00:29:32,100
up each of the pods and define basically

00:29:29,790 --> 00:29:34,290
like I'm good I'm not good and I forget

00:29:32,100 --> 00:29:36,600
the third criteria it's kind of like I

00:29:34,290 --> 00:29:38,910
don't quite know but you have to define

00:29:36,600 --> 00:29:39,960
how it can do its own health check and

00:29:38,910 --> 00:29:41,520
then kubernetes will come along and

00:29:39,960 --> 00:29:43,380
check on it and if it's unhealthy it

00:29:41,520 --> 00:29:46,110
will destroy that and create a new one

00:29:43,380 --> 00:29:49,770
based on the the way you've described

00:29:46,110 --> 00:29:52,410
your deployments right so when when you

00:29:49,770 --> 00:29:53,550
are breaking up your application into

00:29:52,410 --> 00:29:55,610
all these different containers

00:29:53,550 --> 00:29:57,990
describing them to kubernetes and pods

00:29:55,610 --> 00:29:59,970
you're gonna need to implement these

00:29:57,990 --> 00:30:03,000
probes a probe that will determine if

00:29:59,970 --> 00:30:05,430
your your app the little chunk that you

00:30:03,000 --> 00:30:06,690
have in your pod is is healthy or not

00:30:05,430 --> 00:30:08,820
and if it's not healthy you'll get

00:30:06,690 --> 00:30:11,250
restarted you also define the readiness

00:30:08,820 --> 00:30:14,610
probe and the readiness probe says that

00:30:11,250 --> 00:30:16,590
it's ready to be used and then and then

00:30:14,610 --> 00:30:18,510
the startup probe is you know it's it's

00:30:16,590 --> 00:30:20,550
that the the container is starting up

00:30:18,510 --> 00:30:23,550
it's it's you know it's booting

00:30:20,550 --> 00:30:25,230
basically and it returns you know that

00:30:23,550 --> 00:30:26,850
it's in that process so you can think

00:30:25,230 --> 00:30:28,770
about the lifecycle kubernetes is going

00:30:26,850 --> 00:30:31,320
to write like it's gonna start up a pod

00:30:28,770 --> 00:30:33,390
it's gonna and and see if it's starting

00:30:31,320 --> 00:30:35,130
up successfully it's gonna pull it to

00:30:33,390 --> 00:30:36,870
see if it's ready to be used and once

00:30:35,130 --> 00:30:39,450
it's ready to be used it's gonna start

00:30:36,870 --> 00:30:42,390
using it and direct traffic to it and

00:30:39,450 --> 00:30:44,130
then periodically it's gonna go in and

00:30:42,390 --> 00:30:45,990
see if it's in a healthy good state it's

00:30:44,130 --> 00:30:48,330
gonna ask it if it should stay alive or

00:30:45,990 --> 00:30:53,010
it should be killed and restarted so

00:30:48,330 --> 00:30:55,560
these can be defined as URLs so

00:30:53,010 --> 00:30:57,330
kubernetes will call into a URL they can

00:30:55,560 --> 00:30:59,980
do be defined as commands that get

00:30:57,330 --> 00:31:01,540
executed I think through SSH

00:30:59,980 --> 00:31:03,280
probably something different for Windows

00:31:01,540 --> 00:31:04,900
but just you can execute commands and

00:31:03,280 --> 00:31:06,580
return what it looks like or they can be

00:31:04,900 --> 00:31:08,590
I think through direct network

00:31:06,580 --> 00:31:10,840
connections but these are things you

00:31:08,590 --> 00:31:13,960
need to define as far as healthiness or

00:31:10,840 --> 00:31:16,570
not now there also are some hooks that

00:31:13,960 --> 00:31:17,800
it will call into to tell you when kind

00:31:16,570 --> 00:31:20,860
of the life cycle if you need to do

00:31:17,800 --> 00:31:22,480
something when when it started and right

00:31:20,860 --> 00:31:24,100
before it's gonna be stopped right so

00:31:22,480 --> 00:31:26,560
you can do some graceful shutdowns and

00:31:24,100 --> 00:31:28,660
then finally I mean this is not so much

00:31:26,560 --> 00:31:30,070
of the life cycle but logging is done

00:31:28,660 --> 00:31:32,080
just through standard out and standard

00:31:30,070 --> 00:31:34,360
error right so it's very important for

00:31:32,080 --> 00:31:35,740
the way they kubernetes functions that

00:31:34,360 --> 00:31:38,080
you log all your stuff out to there

00:31:35,740 --> 00:31:40,030
versus like logging services or actual

00:31:38,080 --> 00:31:41,800
file logs or things like that so this is

00:31:40,030 --> 00:31:43,000
just kind of a checklist of basic things

00:31:41,800 --> 00:31:45,400
to implement

00:31:43,000 --> 00:31:47,620
now I mentioned externalized

00:31:45,400 --> 00:31:49,930
configuration which is a core concept of

00:31:47,620 --> 00:31:51,400
kubernetes right and it has been in in

00:31:49,930 --> 00:31:52,900
many places you know including the

00:31:51,400 --> 00:31:54,580
spring world a core concept for a long

00:31:52,900 --> 00:31:56,350
time that you you don't ship

00:31:54,580 --> 00:31:58,810
configuration and you figure out a way

00:31:56,350 --> 00:32:00,790
to inject it in there now kubernetes

00:31:58,810 --> 00:32:02,710
really standardized as how this is done

00:32:00,790 --> 00:32:04,720
with a concept called a configuration

00:32:02,710 --> 00:32:06,100
map which is effectively you can think

00:32:04,720 --> 00:32:09,160
of it as a service that where you can

00:32:06,100 --> 00:32:11,320
you can inject or check in configuration

00:32:09,160 --> 00:32:13,150
that you want for your pods and your

00:32:11,320 --> 00:32:16,570
deployments and say this is for this

00:32:13,150 --> 00:32:17,890
version of for this version of this this

00:32:16,570 --> 00:32:19,960
deploy that I have give it this

00:32:17,890 --> 00:32:22,660
configuration for this you know so forth

00:32:19,960 --> 00:32:25,840
and so on and this configuration through

00:32:22,660 --> 00:32:28,060
various means is provided to the pods

00:32:25,840 --> 00:32:29,200
that you're running right so you need to

00:32:28,060 --> 00:32:33,220
think about if I'm writing my

00:32:29,200 --> 00:32:36,280
application how do i really i almost

00:32:33,220 --> 00:32:37,570
need an api process for bringing in the

00:32:36,280 --> 00:32:38,950
configuration that i have and i

00:32:37,570 --> 00:32:40,840
definitely don't want a hard code thing

00:32:38,950 --> 00:32:43,720
and I don't want to ship with files that

00:32:40,840 --> 00:32:45,250
I have that in each deployment I'm

00:32:43,720 --> 00:32:47,410
instead going to use this configuration

00:32:45,250 --> 00:32:49,450
way of externalizing the configuration

00:32:47,410 --> 00:32:50,920
now the way you access that is you can

00:32:49,450 --> 00:32:54,340
access it whenever your the container

00:32:50,920 --> 00:32:56,500
starts up within a pod kubernetes will

00:32:54,340 --> 00:32:59,050
set environment variables for that but

00:32:56,500 --> 00:33:01,480
it also can write out a file in yeah mol

00:32:59,050 --> 00:33:03,190
or JSON if I remember in a known place

00:33:01,480 --> 00:33:04,810
for you that your application when it

00:33:03,190 --> 00:33:06,880
starts up can suck in this file look at

00:33:04,810 --> 00:33:08,710
the environment variables and get that

00:33:06,880 --> 00:33:10,240
now if you use a framework like spring

00:33:08,710 --> 00:33:10,880
cloud kubernetes are the ones that kind

00:33:10,240 --> 00:33:13,460
of

00:33:10,880 --> 00:33:15,620
just hides all of that from you and you

00:33:13,460 --> 00:33:17,990
you bring in your your properties or

00:33:15,620 --> 00:33:20,270
your configuration through the usual

00:33:17,990 --> 00:33:22,820
method you would be used to in a spring

00:33:20,270 --> 00:33:24,920
world but again think about how you

00:33:22,820 --> 00:33:28,280
externalise configuration and how in the

00:33:24,920 --> 00:33:30,080
lifecycle you startup you read in that

00:33:28,280 --> 00:33:32,300
configuration and start things up so

00:33:30,080 --> 00:33:34,310
there's a whole lot more of what

00:33:32,300 --> 00:33:35,750
kubernetes does there's there's you know

00:33:34,310 --> 00:33:38,240
that even as a developer you need to

00:33:35,750 --> 00:33:39,230
think about is the storage concerns that

00:33:38,240 --> 00:33:41,630
you have because you're gonna if you

00:33:39,230 --> 00:33:45,080
need to have persistent storage you need

00:33:41,630 --> 00:33:46,670
to configure for that you need to think

00:33:45,080 --> 00:33:48,710
about the network routing that you have

00:33:46,670 --> 00:33:50,570
in you know north and south and east and

00:33:48,710 --> 00:33:52,160
west you know in from the outside world

00:33:50,570 --> 00:33:54,650
and amongst the different components and

00:33:52,160 --> 00:33:55,940
plan for and describe what that looks

00:33:54,650 --> 00:33:58,220
like of course there's gonna be load

00:33:55,940 --> 00:34:00,170
balancers and secrets you know certs and

00:33:58,220 --> 00:34:02,090
passwords and things like that and then

00:34:00,170 --> 00:34:05,750
you can get into a Disney dizzying array

00:34:02,090 --> 00:34:07,970
of you know we used to call these

00:34:05,750 --> 00:34:09,169
proxies or you know even facades or

00:34:07,970 --> 00:34:10,940
things like that but you can use all

00:34:09,169 --> 00:34:12,409
sorts of the way you divide out the

00:34:10,940 --> 00:34:13,760
functionality that you can have there's

00:34:12,409 --> 00:34:16,250
a very common pattern of instead of

00:34:13,760 --> 00:34:18,710
doing it in the primary component you do

00:34:16,250 --> 00:34:21,110
things like logging and even kind of

00:34:18,710 --> 00:34:23,600
kind of administrative stuff and in a

00:34:21,110 --> 00:34:25,370
sidecar and you can really attach on to

00:34:23,600 --> 00:34:27,679
the kubernetes life cycle with handlers

00:34:25,370 --> 00:34:29,120
so there's a lot of stuff that you can

00:34:27,679 --> 00:34:33,110
get involved in doing so now let's look

00:34:29,120 --> 00:34:34,490
at the other thing I spend a fair amount

00:34:33,110 --> 00:34:35,780
of time focusing on because I think it's

00:34:34,490 --> 00:34:38,600
very helpful and that is the role of

00:34:35,780 --> 00:34:40,250
Enterprise architects and I think what I

00:34:38,600 --> 00:34:41,510
want to think about with kubernetes what

00:34:40,250 --> 00:34:43,490
Enterprise architects should think about

00:34:41,510 --> 00:34:45,409
is really thinking about Enterprise

00:34:43,490 --> 00:34:47,450
Architecture as code right thinking

00:34:45,409 --> 00:34:49,490
about shifting how they think about

00:34:47,450 --> 00:34:51,740
their job and what Enterprise

00:34:49,490 --> 00:34:55,100
Architecture is and what Enterprise

00:34:51,740 --> 00:34:57,050
architects do as the same way that we

00:34:55,100 --> 00:34:59,170
think about infrastructure as code right

00:34:57,050 --> 00:35:01,670
automating and programming things with

00:34:59,170 --> 00:35:03,980
with all sorts of cloud native platforms

00:35:01,670 --> 00:35:05,390
how can those enterprise how can that

00:35:03,980 --> 00:35:08,210
governance and Enterprise Architecture

00:35:05,390 --> 00:35:11,570
be expressed and implemented in a

00:35:08,210 --> 00:35:15,950
programmable way as well so the first

00:35:11,570 --> 00:35:17,300
thing again is that so if you have that

00:35:15,950 --> 00:35:19,130
kind of rudimentary understanding of

00:35:17,300 --> 00:35:20,870
kubernetes right there's a lot of

00:35:19,130 --> 00:35:22,580
standardization of how things are done

00:35:20,870 --> 00:35:23,250
but hopefully you can also realize

00:35:22,580 --> 00:35:25,320
there's a

00:35:23,250 --> 00:35:27,480
lot of variability that gets introduced

00:35:25,320 --> 00:35:29,340
and how you implement those standards

00:35:27,480 --> 00:35:31,950
right so I touched on one of them which

00:35:29,340 --> 00:35:33,780
is building up containers right so you

00:35:31,950 --> 00:35:35,790
can kind of do whatever you want in a

00:35:33,780 --> 00:35:38,100
container and kubernetes doesn't really

00:35:35,790 --> 00:35:40,110
care but you as an enterprise architect

00:35:38,100 --> 00:35:42,120
probably do care right and they're

00:35:40,110 --> 00:35:44,190
really well there are standards and

00:35:42,120 --> 00:35:48,060
conviction and convictions conventions

00:35:44,190 --> 00:35:50,460
kind of sort of of how you would do

00:35:48,060 --> 00:35:53,070
service discovery and manage

00:35:50,460 --> 00:35:55,740
configuration injection you very quickly

00:35:53,070 --> 00:35:58,290
get to the point of how the conventions

00:35:55,740 --> 00:36:00,630
and the practices that developers will

00:35:58,290 --> 00:36:03,060
be following are not really standardized

00:36:00,630 --> 00:36:04,620
in kubernetes now there's all sorts of

00:36:03,060 --> 00:36:06,330
service mesh things and all sorts of

00:36:04,620 --> 00:36:08,400
frameworks that try to you that are

00:36:06,330 --> 00:36:09,750
introducing standards there but what

00:36:08,400 --> 00:36:11,760
you're gonna end up doing what your

00:36:09,750 --> 00:36:14,430
developers will end up doing is creating

00:36:11,760 --> 00:36:15,990
a platform on top of kubernetes and this

00:36:14,430 --> 00:36:18,000
is where that idea of a platform for

00:36:15,990 --> 00:36:20,700
platforms comes with right and it's kind

00:36:18,000 --> 00:36:22,590
of diagrammed here in that like the

00:36:20,700 --> 00:36:24,630
infrastructure stuff is standardized how

00:36:22,590 --> 00:36:27,630
you you orchestrate and deploy you know

00:36:24,630 --> 00:36:29,250
containers or pods onto vm's and how

00:36:27,630 --> 00:36:30,840
those are scaled up and scaled down how

00:36:29,250 --> 00:36:33,030
the configuration is handled secrets

00:36:30,840 --> 00:36:35,220
like there's kind of a base platform

00:36:33,030 --> 00:36:37,020
that is provided there but how they

00:36:35,220 --> 00:36:38,550
actually implement all the micro

00:36:37,020 --> 00:36:41,010
services stuff that you would want to do

00:36:38,550 --> 00:36:42,810
how they handle streams and events and

00:36:41,010 --> 00:36:44,010
things like that what you're gonna find

00:36:42,810 --> 00:36:46,110
very quickly is that if you don't

00:36:44,010 --> 00:36:47,820
introduce governance and standards with

00:36:46,110 --> 00:36:49,560
that the developers are just gonna run

00:36:47,820 --> 00:36:51,180
wild and do whatever they want right and

00:36:49,560 --> 00:36:53,880
you're gonna be right back in that place

00:36:51,180 --> 00:36:55,200
of variability that you were in so one

00:36:53,880 --> 00:36:57,060
of the first things you want to do as an

00:36:55,200 --> 00:36:58,800
enterprise architect and I don't think

00:36:57,060 --> 00:37:01,560
this is a traditional thing that EA's

00:36:58,800 --> 00:37:03,120
necessarily have done successfully or do

00:37:01,560 --> 00:37:04,860
nowadays is really think about what

00:37:03,120 --> 00:37:08,250
platform can we put in place how can we

00:37:04,860 --> 00:37:10,080
standardize that now in the in the VM

00:37:08,250 --> 00:37:12,000
world and pivotal world we've been doing

00:37:10,080 --> 00:37:15,090
this with cloud foundry for quite some

00:37:12,000 --> 00:37:16,890
time right which layers on top of cloud

00:37:15,090 --> 00:37:20,700
native platforms like kubernetes and has

00:37:16,890 --> 00:37:22,080
a very opinionated set way of putting a

00:37:20,700 --> 00:37:23,850
platform and a piece of governance in

00:37:22,080 --> 00:37:25,680
place rather than letting people just

00:37:23,850 --> 00:37:28,320
run wild with it which is definitely

00:37:25,680 --> 00:37:30,270
something worth looking into if you're

00:37:28,320 --> 00:37:32,220
interested in that approach or you can

00:37:30,270 --> 00:37:34,530
look at other options build your own

00:37:32,220 --> 00:37:36,780
sort of platform for it but as an

00:37:34,530 --> 00:37:38,490
Enterprise Architect focus on build

00:37:36,780 --> 00:37:41,900
a platform to enforce your governance

00:37:38,490 --> 00:37:44,370
not just a bunch of Word docs now a

00:37:41,900 --> 00:37:47,130
practice that that I've noticed and that

00:37:44,370 --> 00:37:49,230
we've noticed over time is that often

00:37:47,130 --> 00:37:51,570
times Enterprise architects have said

00:37:49,230 --> 00:37:54,030
for example use this ESB right like

00:37:51,570 --> 00:37:56,520
they've they've enforced a platform of

00:37:54,030 --> 00:37:58,110
governance before but it's really fallen

00:37:56,520 --> 00:38:00,450
by the wayside because it doesn't evolve

00:37:58,110 --> 00:38:02,130
very much and I think this is sounds

00:38:00,450 --> 00:38:03,930
very nuanced but they haven't introduced

00:38:02,130 --> 00:38:05,700
the idea of product managing that

00:38:03,930 --> 00:38:07,640
platform for their developers right

00:38:05,700 --> 00:38:11,220
instead of thinking about we're

00:38:07,640 --> 00:38:13,200
introducing this platform and it's a way

00:38:11,220 --> 00:38:15,240
of enforcing our governance so it

00:38:13,200 --> 00:38:17,220
satisfies the needs that we have as

00:38:15,240 --> 00:38:18,660
Enterprise architects they haven't

00:38:17,220 --> 00:38:19,980
really spent enough time product

00:38:18,660 --> 00:38:21,600
managing it and thinking about who our

00:38:19,980 --> 00:38:24,030
customers our customers are those

00:38:21,600 --> 00:38:26,160
development teams so we should always be

00:38:24,030 --> 00:38:28,200
evolving this platform to match what

00:38:26,160 --> 00:38:30,840
development teams are doing we need to

00:38:28,200 --> 00:38:33,180
product manage that platform and

00:38:30,840 --> 00:38:35,580
constantly be innovating and developing

00:38:33,180 --> 00:38:37,830
it so that those developers don't think

00:38:35,580 --> 00:38:38,880
that the platform we have is stagnated

00:38:37,830 --> 00:38:40,530
and they go off and do their own thing

00:38:38,880 --> 00:38:42,300
and they break that they introduce

00:38:40,530 --> 00:38:44,460
variability and break the whole point of

00:38:42,300 --> 00:38:47,760
efficiency through governance and so

00:38:44,460 --> 00:38:49,980
I've seen companies like Rabobank Home

00:38:47,760 --> 00:38:52,320
Depot and Comcast and all sorts of

00:38:49,980 --> 00:38:54,930
companies that have really taken this on

00:38:52,320 --> 00:38:57,210
this idea of platform as a product and

00:38:54,930 --> 00:38:58,740
it allows them if if the enterprise

00:38:57,210 --> 00:39:00,570
architects are running and building a

00:38:58,740 --> 00:39:02,070
platform and actually evolving it even

00:39:00,570 --> 00:39:03,690
on a weekly basis to include new

00:39:02,070 --> 00:39:05,760
technologies and always trying to help

00:39:03,690 --> 00:39:08,040
the developers they actually get

00:39:05,760 --> 00:39:10,290
developers using the platform instead of

00:39:08,040 --> 00:39:11,900
complaining about it and working around

00:39:10,290 --> 00:39:13,860
it there's quite an extensive

00:39:11,900 --> 00:39:15,570
presentation I and other people have

00:39:13,860 --> 00:39:19,020
that goes over more of what this concept

00:39:15,570 --> 00:39:21,270
means so finally I want to wrap up with

00:39:19,020 --> 00:39:23,760
what I think for most large enterprises

00:39:21,270 --> 00:39:25,590
is one of the most critical jobs for

00:39:23,760 --> 00:39:29,310
enterprise architects to focus on and

00:39:25,590 --> 00:39:31,410
that is really thinking about don't fall

00:39:29,310 --> 00:39:35,100
asleep here is really thinking about how

00:39:31,410 --> 00:39:37,340
they're modernizing their portfolio this

00:39:35,100 --> 00:39:40,350
is something that is is in particular

00:39:37,340 --> 00:39:42,090
very important for large enterprises the

00:39:40,350 --> 00:39:45,510
kind of people that I talk with and

00:39:42,090 --> 00:39:47,220
unlike you know your Spotify and even

00:39:45,510 --> 00:39:47,990
your Netflix is and kind of tech

00:39:47,220 --> 00:39:50,030
companies

00:39:47,990 --> 00:39:51,619
that we learn a lot from and try to

00:39:50,030 --> 00:39:53,930
pattern ourselves in the enterprise

00:39:51,619 --> 00:39:55,550
space after I kind of alluded to this

00:39:53,930 --> 00:39:56,869
with the air france-klm case but this

00:39:55,550 --> 00:39:59,320
comes up with every large company

00:39:56,869 --> 00:40:02,330
especially you know banks governments

00:39:59,320 --> 00:40:04,400
all sorts of places like that is there's

00:40:02,330 --> 00:40:07,100
been years of mergers and acquisitions

00:40:04,400 --> 00:40:08,690
they've built up a lot of technical debt

00:40:07,100 --> 00:40:10,940
and there's nothing wrong with debt debt

00:40:08,690 --> 00:40:12,200
is a lot of how progress is done but

00:40:10,940 --> 00:40:14,030
eventually you have to pay down that

00:40:12,200 --> 00:40:16,910
debt right so if you build up technical

00:40:14,030 --> 00:40:18,500
debt of quick technical decisions that

00:40:16,910 --> 00:40:20,240
that mean you can release something

00:40:18,500 --> 00:40:22,160
faster than it would take to do perfect

00:40:20,240 --> 00:40:23,480
you're gonna have a huge amount of that

00:40:22,160 --> 00:40:26,030
and you also just have old business

00:40:23,480 --> 00:40:28,850
models that have kind of like not really

00:40:26,030 --> 00:40:31,310
adapted and this really creates a huge

00:40:28,850 --> 00:40:33,020
amount of drag in your portfolio right

00:40:31,310 --> 00:40:34,310
so oftentimes when you're trying to do

00:40:33,020 --> 00:40:36,200
something new you're trying to just add

00:40:34,310 --> 00:40:37,910
a new feature in an app you kind of

00:40:36,200 --> 00:40:39,530
unfold that and you find that it takes a

00:40:37,910 --> 00:40:41,330
long time because you have to go all the

00:40:39,530 --> 00:40:43,010
way back to some archaic systems right

00:40:41,330 --> 00:40:45,200
and this often comes up when you try to

00:40:43,010 --> 00:40:46,460
get the Hallowed unified view of a

00:40:45,200 --> 00:40:49,040
customer and you've got to integrate

00:40:46,460 --> 00:40:50,780
with all these erp and crm systems so i

00:40:49,040 --> 00:40:53,330
think this is very important because

00:40:50,780 --> 00:40:55,130
what you'll find is that to use my

00:40:53,330 --> 00:40:57,140
friend paul as one of his quotes right

00:40:55,130 --> 00:40:58,820
like you can put any garbage you want in

00:40:57,140 --> 00:41:00,350
kubernetes right so if you're just

00:40:58,820 --> 00:41:02,390
moving your applications over there

00:41:00,350 --> 00:41:04,070
without modernizing them like whatever

00:41:02,390 --> 00:41:05,990
you can just put junk in there and it

00:41:04,070 --> 00:41:07,820
might work but you're not really gonna

00:41:05,990 --> 00:41:10,100
get benefits and you're not really

00:41:07,820 --> 00:41:15,130
taking advantage of modernizing things

00:41:10,100 --> 00:41:17,390
so I want to go over a little bit of the

00:41:15,130 --> 00:41:20,690
strategies that I've seen people doing

00:41:17,390 --> 00:41:22,160
for portfolio management and I think one

00:41:20,690 --> 00:41:23,990
of the most important things is thinking

00:41:22,160 --> 00:41:25,250
about how you're setting your

00:41:23,990 --> 00:41:26,930
expectations right if you've got

00:41:25,250 --> 00:41:29,270
thousands of applications it's gonna

00:41:26,930 --> 00:41:31,280
take many years to modernize them right

00:41:29,270 --> 00:41:33,050
so whatever anyone is gonna tell you you

00:41:31,280 --> 00:41:34,940
can't like just modernize them overnight

00:41:33,050 --> 00:41:37,130
or you know even within a couple of

00:41:34,940 --> 00:41:39,080
months you really need to put a very

00:41:37,130 --> 00:41:40,730
deliberate process in place probably

00:41:39,080 --> 00:41:42,800
more work than you're used to doing to

00:41:40,730 --> 00:41:45,260
really assess what that portfolio is

00:41:42,800 --> 00:41:47,230
think about applications the low-hanging

00:41:45,260 --> 00:41:49,430
fruit that can be easily moved over

00:41:47,230 --> 00:41:51,140
they're likely things that are already

00:41:49,430 --> 00:41:53,750
for example in the Java world like

00:41:51,140 --> 00:41:55,640
spring food applications or have some of

00:41:53,750 --> 00:41:57,050
the lighter profiles but on the other

00:41:55,640 --> 00:41:59,480
end of the spectrum you'll have like you

00:41:57,050 --> 00:42:01,100
know Visual Basic six applications right

00:41:59,480 --> 00:42:02,059
and those are things that like well

00:42:01,100 --> 00:42:04,339
vital

00:42:02,059 --> 00:42:06,079
are gonna be a lot harder to move over

00:42:04,339 --> 00:42:08,839
you probably just need to rewrite those

00:42:06,079 --> 00:42:10,909
kind of applications but also one of the

00:42:08,839 --> 00:42:13,039
key aspects that I see companies again

00:42:10,909 --> 00:42:15,679
like air france-klm who I recently did a

00:42:13,039 --> 00:42:17,419
webinar with talking about this they

00:42:15,679 --> 00:42:19,429
have a very business centric way of

00:42:17,419 --> 00:42:21,109
doing things right where you analyze the

00:42:19,429 --> 00:42:22,609
portfolio from a technical fit but then

00:42:21,109 --> 00:42:24,019
you also want to analyze it from a

00:42:22,609 --> 00:42:26,719
business fit right like is it gonna

00:42:24,019 --> 00:42:28,159
matter when we move things over

00:42:26,719 --> 00:42:29,719
is this gonna have a big enough business

00:42:28,159 --> 00:42:31,489
impact for the resources we're gonna

00:42:29,719 --> 00:42:33,199
spend on that and I think there's a

00:42:31,489 --> 00:42:35,269
couple of other key insights that they

00:42:33,199 --> 00:42:37,699
and others have had is that you also

00:42:35,269 --> 00:42:39,109
want to set up kind of like the business

00:42:37,699 --> 00:42:40,129
case and measurements for moving that

00:42:39,109 --> 00:42:42,769
right so when you move an application

00:42:40,129 --> 00:42:44,149
over you want to measure if it was

00:42:42,769 --> 00:42:46,489
successful again it's kind of back to

00:42:44,149 --> 00:42:47,779
that small batch loop thing have put it

00:42:46,489 --> 00:42:49,429
in place ahead of time how are we gonna

00:42:47,779 --> 00:42:51,229
terminate if this was successful or not

00:42:49,429 --> 00:42:53,029
and that's key not for just rating

00:42:51,229 --> 00:42:55,369
yourself getting that red yellow or a

00:42:53,029 --> 00:42:57,169
blue status report somewhere but

00:42:55,369 --> 00:42:58,339
actually evaluating and improving how

00:42:57,169 --> 00:43:00,859
you're doing things if you're measuring

00:42:58,339 --> 00:43:02,689
how one project went when you get to the

00:43:00,859 --> 00:43:05,959
next project you can retrospectively

00:43:02,689 --> 00:43:08,029
think about how what worked and what

00:43:05,959 --> 00:43:11,059
didn't work and change your strategy or

00:43:08,029 --> 00:43:13,429
approach to match that so I would start

00:43:11,059 --> 00:43:16,309
off with some simple applications right

00:43:13,429 --> 00:43:18,229
store finders for as annoying and small

00:43:16,309 --> 00:43:19,909
as they may sound are actually great

00:43:18,229 --> 00:43:21,169
applications to start with right like

00:43:19,909 --> 00:43:23,059
you just want to locate a store

00:43:21,169 --> 00:43:24,679
somewhere so think about applications

00:43:23,059 --> 00:43:28,999
like that that are used frequently that

00:43:24,679 --> 00:43:31,129
are probably not really very good that

00:43:28,999 --> 00:43:33,049
have been ignored for a while but if you

00:43:31,129 --> 00:43:35,089
actually help people find stores quickly

00:43:33,049 --> 00:43:37,339
right maybe match it to inventory that's

00:43:35,089 --> 00:43:39,259
in that store you start to develop these

00:43:37,339 --> 00:43:40,909
things you'll not only get a sense of

00:43:39,259 --> 00:43:43,159
technically how to modernize something

00:43:40,909 --> 00:43:45,139
but you'll start to understand the

00:43:43,159 --> 00:43:47,659
benefit of modernizing and start to get

00:43:45,139 --> 00:43:49,039
all sorts of other cases a success to

00:43:47,659 --> 00:43:50,989
kind of build up momentum for doing

00:43:49,039 --> 00:43:53,509
other things now a company like t-mobile

00:43:50,989 --> 00:43:55,399
for example they've also modernized like

00:43:53,509 --> 00:43:59,539
a single API method in their case I

00:43:55,399 --> 00:44:01,489
think to check the the sort of billing

00:43:59,539 --> 00:44:03,079
status of various customers I think I'm

00:44:01,489 --> 00:44:04,849
getting that wrong but they found this

00:44:03,079 --> 00:44:07,369
one method that was called all the time

00:44:04,849 --> 00:44:09,589
very frequently and they modernize that

00:44:07,369 --> 00:44:10,039
to do basically a customer check on

00:44:09,589 --> 00:44:12,289
things

00:44:10,039 --> 00:44:15,260
so find these small scope to a very

00:44:12,289 --> 00:44:17,450
business critical things and start

00:44:15,260 --> 00:44:21,050
with those and kind of evolved over time

00:44:17,450 --> 00:44:22,670
and then also it's good to sort of start

00:44:21,050 --> 00:44:24,620
to maintain a cookbook of common

00:44:22,670 --> 00:44:26,150
patterns that you follow and things that

00:44:24,620 --> 00:44:28,100
you do we have a good starter cookbook

00:44:26,150 --> 00:44:30,140
that a lot of people start with and then

00:44:28,100 --> 00:44:31,820
they expand it out and evolve it on

00:44:30,140 --> 00:44:33,350
their own I think it's worth your time

00:44:31,820 --> 00:44:35,720
going through all of this right like

00:44:33,350 --> 00:44:38,030
over the years like large organizations

00:44:35,720 --> 00:44:40,490
I've studied right these are just some

00:44:38,030 --> 00:44:43,580
some picked out improvements that come

00:44:40,490 --> 00:44:45,530
from paying attention closer to what

00:44:43,580 --> 00:44:47,420
developers do really optimizing the way

00:44:45,530 --> 00:44:50,000
they're doing it removing waste from the

00:44:47,420 --> 00:44:51,590
system using a cloud platform and then

00:44:50,000 --> 00:44:52,960
also modernizing the way that they're

00:44:51,590 --> 00:44:55,520
doing things in a very deliberate

00:44:52,960 --> 00:44:56,960
disciplined sort of way right like you

00:44:55,520 --> 00:44:59,470
can see huge improvements on the

00:44:56,960 --> 00:45:01,580
technical side but more importantly I

00:44:59,470 --> 00:45:03,130
mean more importantly because like the

00:45:01,580 --> 00:45:05,600
more business success you have the more

00:45:03,130 --> 00:45:07,430
like latitude you'll have and the easier

00:45:05,600 --> 00:45:08,660
your life as a developer and Enterprise

00:45:07,430 --> 00:45:10,970
Architect will be and also you know

00:45:08,660 --> 00:45:12,740
you'll be doing a good job you can see

00:45:10,970 --> 00:45:14,810
that there are actual very material

00:45:12,740 --> 00:45:16,970
improvements to the business side of

00:45:14,810 --> 00:45:19,580
what you're able to achieve right so

00:45:16,970 --> 00:45:21,590
going through all this really following

00:45:19,580 --> 00:45:22,970
those disciplined approaches does pay

00:45:21,590 --> 00:45:25,070
off and I think it's proven through

00:45:22,970 --> 00:45:27,710
numerous case studies that I've

00:45:25,070 --> 00:45:31,070
definitely seen over the years so with

00:45:27,710 --> 00:45:34,130
that this is me if you if you don't know

00:45:31,070 --> 00:45:35,330
I've written a couple of books they go

00:45:34,130 --> 00:45:37,880
over a lot of this stuff not the

00:45:35,330 --> 00:45:39,980
kubernetes stuff so much but from the

00:45:37,880 --> 00:45:41,630
sort of business angle of things and how

00:45:39,980 --> 00:45:44,150
you change organizations over if you're

00:45:41,630 --> 00:45:46,340
interested I do a couple more podcasts I

00:45:44,150 --> 00:45:48,080
do a couple of podcast if you're

00:45:46,340 --> 00:45:50,180
interested in those as well

00:45:48,080 --> 00:45:52,400
thanks for sitting in and listening here

00:45:50,180 --> 00:45:53,550
I'll see everyone around next time bye

00:45:52,400 --> 00:46:10,060
bye

00:45:53,550 --> 00:46:10,060

YouTube URL: https://www.youtube.com/watch?v=k6RS-LEjE2Y


