Title: stackconf online 2020 | Let's Debug Django like pro by Sayantika Banik
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	Writing clean code, with good logic is important.
But how about debugging the same like a pro and build pretty graphs?

“Debug like a pro just like you code”

Print statements though easy and powerful don’t help in understanding the behavioral aspects. In order to perform functionalities like visualizing the error/warning rates, we need an advanced debugging tool.
Through my talk, I aim to introduce debugging libraries like “logger”. Logger can be incorporated with Django with a couple of lines of code, which not only helps us understand the errors, but also the possible areas of improvement.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:15,610
[Music]

00:00:12,780 --> 00:00:18,670
hello everyone thank you so much for

00:00:15,610 --> 00:00:21,310
joining my dock today I will be sharing

00:00:18,670 --> 00:00:26,050
few tips and tricks about debugging each

00:00:21,310 --> 00:00:28,480
angle why it is essential to use logins

00:00:26,050 --> 00:00:30,100
what is the difference between the

00:00:28,480 --> 00:00:32,650
various debugging techniques and

00:00:30,100 --> 00:00:34,570
whatever it is today a little bit about

00:00:32,650 --> 00:00:36,340
me I am a back-end developer in the

00:00:34,570 --> 00:00:38,620
start of based out of India called

00:00:36,340 --> 00:00:40,780
continual engine apart from that an open

00:00:38,620 --> 00:00:42,699
source contributor and I mentor and

00:00:40,780 --> 00:00:50,979
build communities across India and

00:00:42,699 --> 00:00:54,070
abroad so let's stick in so today's

00:00:50,979 --> 00:00:56,830
agenda we will be talking about the

00:00:54,070 --> 00:01:00,280
debugging techniques that already are

00:00:56,830 --> 00:01:04,089
there it's there for a lot many years

00:01:00,280 --> 00:01:07,870
and we are using them many of us what is

00:01:04,089 --> 00:01:11,350
logging why we ask what is the essential

00:01:07,870 --> 00:01:15,250
path where we see that trend fail so

00:01:11,350 --> 00:01:17,170
that is not a very scalable or I

00:01:15,250 --> 00:01:20,320
wouldn't say very efficient technique of

00:01:17,170 --> 00:01:23,320
debugging and how a logger overcomes

00:01:20,320 --> 00:01:25,990
those challenges well forfeit diving

00:01:23,320 --> 00:01:28,540
deep into novel we will see what are the

00:01:25,990 --> 00:01:30,820
different entity what is sub modules and

00:01:28,540 --> 00:01:34,240
okay and how we can then configure with

00:01:30,820 --> 00:01:37,180
jung-geun so I assume that you must have

00:01:34,240 --> 00:01:38,800
some basic understanding of Jango MVT

00:01:37,180 --> 00:01:41,140
architecture that's more the view

00:01:38,800 --> 00:01:42,640
template architecture how it works and

00:01:41,140 --> 00:01:45,520
how the file connects that basic

00:01:42,640 --> 00:01:47,500
knowledge is sufficient or the session

00:01:45,520 --> 00:01:50,320
in if at all you don't have don't worry

00:01:47,500 --> 00:01:52,750
I'll walk you through at least a basic

00:01:50,320 --> 00:01:54,700
part the files how they connect and then

00:01:52,750 --> 00:01:56,140
we have some account settings dot PI

00:01:54,700 --> 00:01:58,720
inside shall go where all the settings

00:01:56,140 --> 00:02:00,640
like any other framework resides then

00:01:58,720 --> 00:02:03,700
developing a visible initialization

00:02:00,640 --> 00:02:08,800
using logger data so we will seeing that

00:02:03,700 --> 00:02:11,379
after we have achieved integrating local

00:02:08,800 --> 00:02:13,569
with django there are ton of data that

00:02:11,379 --> 00:02:16,659
gets generated and actually we can

00:02:13,569 --> 00:02:20,230
develop interesting insights using that

00:02:16,659 --> 00:02:23,069
and then we will see the conclusion what

00:02:20,230 --> 00:02:23,069
is the conclusion of

00:02:23,980 --> 00:02:31,239
so let's get our hands dirty so

00:02:27,480 --> 00:02:33,819
debugging techniques so found a lot many

00:02:31,239 --> 00:02:35,110
years when the development started the

00:02:33,819 --> 00:02:37,239
history of the floppy lock software

00:02:35,110 --> 00:02:39,849
techniques we started using output

00:02:37,239 --> 00:02:43,269
stable output statements are nothing but

00:02:39,849 --> 00:02:45,310
print system dot out dot print on it

00:02:43,269 --> 00:02:48,370
which is in Java and then Python you can

00:02:45,310 --> 00:02:50,880
see we just print so whenever you write

00:02:48,370 --> 00:02:53,260
a code and you find ok this particular

00:02:50,880 --> 00:02:54,730
variable might contain some value which

00:02:53,260 --> 00:02:57,250
I want to see what is the value so we

00:02:54,730 --> 00:02:58,989
said just output it why not just out to

00:02:57,250 --> 00:03:00,400
that end and we'll see what the value is

00:02:58,989 --> 00:03:03,459
coming it's back with it or not

00:03:00,400 --> 00:03:05,920
then using flags say you set a flag a

00:03:03,459 --> 00:03:07,810
boolean flag or integer flag to say it's

00:03:05,920 --> 00:03:09,760
true or false whenever the code enters

00:03:07,810 --> 00:03:10,239
it should become true all should become

00:03:09,760 --> 00:03:13,900
false

00:03:10,239 --> 00:03:16,390
so that's color using black then views a

00:03:13,900 --> 00:03:18,610
lot of comments so in order to debug we

00:03:16,390 --> 00:03:20,590
say okay this is where it should be and

00:03:18,610 --> 00:03:22,510
this is the second step this is the

00:03:20,590 --> 00:03:25,299
third step and this four step and so

00:03:22,510 --> 00:03:27,640
forth then brute force node force is

00:03:25,299 --> 00:03:30,069
nothing but a collaboration of lot of

00:03:27,640 --> 00:03:34,359
local files memory a key memory files

00:03:30,069 --> 00:03:37,000
which in turn we use a lot many print

00:03:34,359 --> 00:03:39,250
statements combined with those files and

00:03:37,000 --> 00:03:41,620
in order to find where the other or

00:03:39,250 --> 00:03:45,190
where the failure came into picture so

00:03:41,620 --> 00:03:47,859
brute force is also used until today in

00:03:45,190 --> 00:03:50,680
many other organizations and it's

00:03:47,859 --> 00:03:53,680
effective in some forms but it fails in

00:03:50,680 --> 00:03:56,950
not many cases and the final comes the

00:03:53,680 --> 00:03:58,510
using debugging tools so we can use a

00:03:56,950 --> 00:04:00,340
couple of debugging tools and today I

00:03:58,510 --> 00:04:04,120
will be walking you through one of them

00:04:00,340 --> 00:04:06,670
but they are a lot many there so yeah so

00:04:04,120 --> 00:04:09,190
never fall into the situation of the box

00:04:06,670 --> 00:04:11,889
we see that there's a small box then

00:04:09,190 --> 00:04:13,959
they become back-pay and bigger so we

00:04:11,889 --> 00:04:16,150
have to kind of find them and the

00:04:13,959 --> 00:04:18,250
smaller initial stages itself so that it

00:04:16,150 --> 00:04:21,639
doesn't become a catastrophic failure

00:04:18,250 --> 00:04:28,150
for a software and at simple so you have

00:04:21,639 --> 00:04:31,000
to identify analyze and move forward now

00:04:28,150 --> 00:04:34,780
we are talking about logging versus log

00:04:31,000 --> 00:04:36,610
what are the differences between these

00:04:34,780 --> 00:04:37,960
these are terminologies I would say

00:04:36,610 --> 00:04:40,060
which are frequent

00:04:37,960 --> 00:04:41,800
being used in the entire session so I

00:04:40,060 --> 00:04:43,960
thought it's important to actually can

00:04:41,800 --> 00:04:46,750
make you familiar with these two terms

00:04:43,960 --> 00:04:49,930
first what it's logging so logging is

00:04:46,750 --> 00:04:53,080
basically tracking events one source of

00:04:49,930 --> 00:04:55,599
food runs it is very essential for

00:04:53,080 --> 00:04:57,759
debugging yasaka so let's take an

00:04:55,599 --> 00:05:00,099
example there you bench olive oil tool

00:04:57,759 --> 00:05:03,130
and you visit a lot many countries at

00:05:00,099 --> 00:05:07,389
you had so much of fun over there now

00:05:03,130 --> 00:05:09,970
what you would want to do is make sure

00:05:07,389 --> 00:05:12,130
that you make a collaborative album of

00:05:09,970 --> 00:05:14,590
it all Square to cook out of it so it's

00:05:12,130 --> 00:05:17,970
you track all the events what you did

00:05:14,590 --> 00:05:21,970
what happened in which Museum of which

00:05:17,970 --> 00:05:24,009
various oh yeah and what what all you

00:05:21,970 --> 00:05:26,229
enjoyed in that and how many people you

00:05:24,009 --> 00:05:28,449
met and what are the connections you

00:05:26,229 --> 00:05:30,430
made over there so after the your

00:05:28,449 --> 00:05:31,210
volatile is over you try to summarize

00:05:30,430 --> 00:05:32,949
everything

00:05:31,210 --> 00:05:34,659
so something longing is something that's

00:05:32,949 --> 00:05:37,389
tracking all this off very good so how

00:05:34,659 --> 00:05:39,580
is op the grant from one method to

00:05:37,389 --> 00:05:41,289
another then talk to the external easing

00:05:39,580 --> 00:05:43,720
functions and then came back and

00:05:41,289 --> 00:05:45,340
interacted with your user database and

00:05:43,720 --> 00:05:46,990
came back so this is the entire flow

00:05:45,340 --> 00:05:49,979
that it is gonna be happening then

00:05:46,990 --> 00:05:54,099
maintaining a log file helps in fixing

00:05:49,979 --> 00:05:55,780
crashes faster so in case you have a

00:05:54,099 --> 00:05:58,680
visitor a lot bigger than you forgot

00:05:55,780 --> 00:06:02,169
something you forgot a very important

00:05:58,680 --> 00:06:03,759
very important entity of yours in some

00:06:02,169 --> 00:06:05,560
part of the country and then when you

00:06:03,759 --> 00:06:07,570
will finding everything and you're

00:06:05,560 --> 00:06:09,759
writing down everything fun okay this is

00:06:07,570 --> 00:06:11,830
then why I might have lost that so it

00:06:09,759 --> 00:06:15,310
helps you fix crashes it helps you

00:06:11,830 --> 00:06:17,530
remember but it is coming from and then

00:06:15,310 --> 00:06:19,479
the third point where comes log what is

00:06:17,530 --> 00:06:21,520
dog now we understand locking it says

00:06:19,479 --> 00:06:23,620
it's just accumulation making all the

00:06:21,520 --> 00:06:25,810
events together at one place so that we

00:06:23,620 --> 00:06:27,009
have a record in there and whenever we

00:06:25,810 --> 00:06:28,570
want to therefore we can go back and

00:06:27,009 --> 00:06:32,349
remember you don't have to come back

00:06:28,570 --> 00:06:35,020
then we have a log log in' is a item

00:06:32,349 --> 00:06:37,810
module that allows debugging and

00:06:35,020 --> 00:06:39,880
recording status messages so what is

00:06:37,810 --> 00:06:44,110
status messages we will be seeing in the

00:06:39,880 --> 00:06:45,550
next slides and logger is there from a

00:06:44,110 --> 00:06:49,089
lot many years and python has done a

00:06:45,550 --> 00:06:51,729
tremendous package call over there which

00:06:49,089 --> 00:06:54,580
we can use in python

00:06:51,729 --> 00:06:56,919
debugging as well and then Jaguars this

00:06:54,580 --> 00:06:58,509
inbuilt feature where logger is

00:06:56,919 --> 00:07:00,999
integrated with this model with this

00:06:58,509 --> 00:07:08,740
code then we can use it for the volume

00:07:00,999 --> 00:07:12,069
techniques now let's see the one big

00:07:08,740 --> 00:07:15,430
question that arises why Nagas and what

00:07:12,069 --> 00:07:19,059
is what where it fails where print fails

00:07:15,430 --> 00:07:21,460
some statements were for small-scale

00:07:19,059 --> 00:07:23,469
code so then you're writing scripts when

00:07:21,460 --> 00:07:26,979
you are in small sports snippets or just

00:07:23,469 --> 00:07:28,990
they're fightin a log of the biking

00:07:26,979 --> 00:07:32,439
build statements or any other prints

00:07:28,990 --> 00:07:34,629
eight means would work efficiently and

00:07:32,439 --> 00:07:36,339
similar to how logger books but when you

00:07:34,629 --> 00:07:39,849
see there are tons of files their

00:07:36,339 --> 00:07:42,099
talents of modules inside and there are

00:07:39,849 --> 00:07:44,020
methods that countless methods that

00:07:42,099 --> 00:07:45,669
India software that runs and you cannot

00:07:44,020 --> 00:07:47,259
keep track of each and every print

00:07:45,669 --> 00:07:49,719
statement becomes very difficult then

00:07:47,259 --> 00:07:51,309
what you try to do is make sure there is

00:07:49,719 --> 00:07:54,219
an automation process in place there

00:07:51,309 --> 00:07:56,979
everything clumps together and then you

00:07:54,219 --> 00:08:00,099
can and then you can see the files where

00:07:56,979 --> 00:08:02,889
actually will which time which timestamp

00:08:00,099 --> 00:08:05,229
which line of code which file the error

00:08:02,889 --> 00:08:08,259
actually came from so that is one of the

00:08:05,229 --> 00:08:11,830
valuable features that you can see the

00:08:08,259 --> 00:08:14,020
clog or not the pin and in the print is

00:08:11,830 --> 00:08:15,610
difficult to control the log information

00:08:14,020 --> 00:08:17,349
you want to capture you don't want any

00:08:15,610 --> 00:08:18,849
of the data to be capture every variable

00:08:17,349 --> 00:08:22,719
date out of the capture may be a

00:08:18,849 --> 00:08:24,189
specific variable a specific part of the

00:08:22,719 --> 00:08:27,789
code where you might feel that's very

00:08:24,189 --> 00:08:30,099
critical that actually is essential for

00:08:27,789 --> 00:08:31,959
the user interaction or server-side

00:08:30,099 --> 00:08:33,969
interaction or server-side rendering

00:08:31,959 --> 00:08:36,729
part you want that that is the very

00:08:33,969 --> 00:08:38,649
important part and I would want that to

00:08:36,729 --> 00:08:41,380
belong instead of everything that is

00:08:38,649 --> 00:08:45,010
there in that file then you cannot map

00:08:41,380 --> 00:08:46,720
the severity level good sleep so you it

00:08:45,010 --> 00:08:50,470
will be just message error occurs

00:08:46,720 --> 00:08:52,480
message code fail message kind of this

00:08:50,470 --> 00:08:54,970
is the variable value but with law code

00:08:52,480 --> 00:08:56,350
you can actually map the severity level

00:08:54,970 --> 00:08:59,470
how they will discuss what are the

00:08:56,350 --> 00:09:01,540
various levels in levels and then

00:08:59,470 --> 00:09:05,790
timestamp that's actually very essential

00:09:01,540 --> 00:09:07,440
to go for the time son because you

00:09:05,790 --> 00:09:11,010
at this point of time this failure

00:09:07,440 --> 00:09:14,880
occurs and there these many users were

00:09:11,010 --> 00:09:17,790
logging it that at that point of time so

00:09:14,880 --> 00:09:20,850
in case there is some data loss that

00:09:17,790 --> 00:09:24,360
happened you can map and make sure that

00:09:20,850 --> 00:09:27,060
those users then didn't had any data

00:09:24,360 --> 00:09:28,830
loss or they can be repair done just for

00:09:27,060 --> 00:09:31,200
those who uses those set of users at

00:09:28,830 --> 00:09:34,020
that point of time Moodle often and not

00:09:31,200 --> 00:09:35,880
go around the entire user database but

00:09:34,020 --> 00:09:37,560
that's one of the advantages with time

00:09:35,880 --> 00:09:39,959
sir and and there are ample of

00:09:37,560 --> 00:09:42,390
advantages where we can see time

00:09:39,959 --> 00:09:45,720
someplace when it comes with you longer

00:09:42,390 --> 00:09:47,940
and meanwhile then I go across the

00:09:45,720 --> 00:09:53,450
different levels of it I might give you

00:09:47,940 --> 00:09:57,350
more examples out of it okay let's go

00:09:53,450 --> 00:10:01,110
ahead now this one on the favorite part

00:09:57,350 --> 00:10:03,830
so lord I call it as a Python move

00:10:01,110 --> 00:10:06,750
package or mod in which all the real

00:10:03,830 --> 00:10:09,240
which is already there for a long long

00:10:06,750 --> 00:10:12,779
time so how to actually construct a log

00:10:09,240 --> 00:10:15,630
so logger has or pillows I would say the

00:10:12,779 --> 00:10:18,779
first is mobile itself so it's an entry

00:10:15,630 --> 00:10:20,880
point into the locking system and that

00:10:18,779 --> 00:10:23,520
is associated with the lock level the

00:10:20,880 --> 00:10:25,290
log level are again it can info debug

00:10:23,520 --> 00:10:28,830
and they'll be talking more about that

00:10:25,290 --> 00:10:31,560
and then we'll move on to handle up

00:10:28,830 --> 00:10:34,560
handle it defines the destination of

00:10:31,560 --> 00:10:37,770
love records for example you just want a

00:10:34,560 --> 00:10:39,240
lot to be put into the console that's it

00:10:37,770 --> 00:10:40,740
you just want the locked up on your

00:10:39,240 --> 00:10:44,250
console you don't want to create any

00:10:40,740 --> 00:10:48,000
other destination file or anything or if

00:10:44,250 --> 00:10:51,630
you want to make a very descriptive log

00:10:48,000 --> 00:10:55,589
file so handler helps you in defining

00:10:51,630 --> 00:10:58,230
the destination of your log file so you

00:10:55,589 --> 00:11:01,500
can add a destination or you can say

00:10:58,230 --> 00:11:04,200
let's go for a simple console output and

00:11:01,500 --> 00:11:05,850
see what what is happening and then

00:11:04,200 --> 00:11:08,579
comes shredder

00:11:05,850 --> 00:11:10,920
the third is freedom filter provides a

00:11:08,579 --> 00:11:14,339
final green facility for determining

00:11:10,920 --> 00:11:16,170
which log records to output now I

00:11:14,339 --> 00:11:19,050
mentioned that you don't want every

00:11:16,170 --> 00:11:21,000
record to be going out there so when

00:11:19,050 --> 00:11:24,089
talk in the language angle there are

00:11:21,000 --> 00:11:26,310
many apps them sub apps inside a

00:11:24,089 --> 00:11:29,310
particular project so you want to say

00:11:26,310 --> 00:11:31,649
this only I want this applicant of this

00:11:29,310 --> 00:11:33,630
file to be going into the lager system

00:11:31,649 --> 00:11:37,019
then the filter comes into picture it is

00:11:33,630 --> 00:11:40,019
very advanced and mostly I mostly kind

00:11:37,019 --> 00:11:42,750
of opt out from it but yeah you can

00:11:40,019 --> 00:11:45,180
definitely use this feature as well then

00:11:42,750 --> 00:11:47,120
comes the format of what is for later so

00:11:45,180 --> 00:11:49,709
we will also similar examples of it

00:11:47,120 --> 00:11:51,630
specifies layers entities of the chordal

00:11:49,709 --> 00:11:54,690
know what it needs little technical but

00:11:51,630 --> 00:11:56,579
yeah so the language technical but it's

00:11:54,690 --> 00:11:58,860
not at all technical format is nothing

00:11:56,579 --> 00:12:02,880
but you want you say you warned the line

00:11:58,860 --> 00:12:06,029
number two on the file which file you

00:12:02,880 --> 00:12:08,250
born the timestamp and the other these

00:12:06,029 --> 00:12:10,350
are the four things you want to lock so

00:12:08,250 --> 00:12:12,120
this this is define by a formatter so

00:12:10,350 --> 00:12:14,820
you can just say I want just a time Sam

00:12:12,120 --> 00:12:18,329
and all and the message that is also

00:12:14,820 --> 00:12:21,149
fine so you can have a variation out of

00:12:18,329 --> 00:12:23,490
it what information you actually want to

00:12:21,149 --> 00:12:27,510
be evolved to the audience so let's see

00:12:23,490 --> 00:12:30,240
all four together now you first you have

00:12:27,510 --> 00:12:32,670
the entry point where say it's a debug

00:12:30,240 --> 00:12:35,730
level information next you say it should

00:12:32,670 --> 00:12:41,060
go to a file third you want to say only

00:12:35,730 --> 00:12:44,160
file views of this app to should go

00:12:41,060 --> 00:12:47,010
there's two acts have to use dot PI

00:12:44,160 --> 00:12:49,980
should go into the logo and third is

00:12:47,010 --> 00:12:52,589
format I just want information about the

00:12:49,980 --> 00:12:54,600
timestamp and the other nothing else so

00:12:52,589 --> 00:12:56,459
you can even define you can control both

00:12:54,600 --> 00:13:01,350
information is actually going to the log

00:12:56,459 --> 00:13:06,690
type more about the Orkney levels here

00:13:01,350 --> 00:13:09,600
comes the heroes please see here there

00:13:06,690 --> 00:13:11,550
are five levels first is deeper

00:13:09,600 --> 00:13:15,300
information about for debugging purposes

00:13:11,550 --> 00:13:18,779
you you might be may time we do a debug

00:13:15,300 --> 00:13:20,610
okay this vessel should be of this kind

00:13:18,779 --> 00:13:22,860
of type the type should be this I want

00:13:20,610 --> 00:13:26,399
to block the type of it so what type of

00:13:22,860 --> 00:13:28,560
data it is is it is a series data it's a

00:13:26,399 --> 00:13:31,560
numpy it's in 64 what's the list

00:13:28,560 --> 00:13:33,330
whatever you want to whatever data in

00:13:31,560 --> 00:13:36,240
this attend college

00:13:33,330 --> 00:13:39,870
I'd be Buckeye nothing next next comes

00:13:36,240 --> 00:13:42,390
info it's a general message as I entered

00:13:39,870 --> 00:13:45,300
into the function to entering into the

00:13:42,390 --> 00:13:48,930
method to calling that method from here

00:13:45,300 --> 00:13:51,120
going into a sink outside going

00:13:48,930 --> 00:13:52,920
connecting to lambda functions so kind

00:13:51,120 --> 00:13:55,440
that of information that comes into a

00:13:52,920 --> 00:13:58,140
channel message warning if there are any

00:13:55,440 --> 00:13:59,700
fault occurrence warning actually

00:13:58,140 --> 00:14:00,990
automatically get triggers whenever

00:13:59,700 --> 00:14:03,510
there is a warning that has to be

00:14:00,990 --> 00:14:06,120
happening Chango error if something

00:14:03,510 --> 00:14:09,030
feels in your code it's automatically

00:14:06,120 --> 00:14:11,100
triggered that's either critical is like

00:14:09,030 --> 00:14:13,980
system failure where there is a critical

00:14:11,100 --> 00:14:15,450
information say your file is totally

00:14:13,980 --> 00:14:18,930
crashed your database is crashed

00:14:15,450 --> 00:14:21,870
something like of that sort of but it's

00:14:18,930 --> 00:14:24,270
application-specific don't say for here

00:14:21,870 --> 00:14:26,430
it's django but if you're running is

00:14:24,270 --> 00:14:28,590
some other application that maybe that

00:14:26,430 --> 00:14:30,960
pertaining to that application not your

00:14:28,590 --> 00:14:33,240
entire environment that's your entire

00:14:30,960 --> 00:14:35,070
computer system just talking about those

00:14:33,240 --> 00:14:41,040
applications which you are then running

00:14:35,070 --> 00:14:42,930
from next comes the example usage it's a

00:14:41,040 --> 00:14:45,810
pretty simple and we will also seeing it

00:14:42,930 --> 00:14:48,270
using it real time it comes with a debug

00:14:45,810 --> 00:14:51,060
you just go for logger tour debug logo

00:14:48,270 --> 00:14:54,360
dot info the message will go inside the

00:14:51,060 --> 00:14:58,050
whatever you want to leave over info a

00:14:54,360 --> 00:15:00,450
warning critical so if at all we want to

00:14:58,050 --> 00:15:02,250
insist on creating your own warning

00:15:00,450 --> 00:15:08,750
message your own error message you can

00:15:02,250 --> 00:15:12,240
feel free to do it as well moving ahead

00:15:08,750 --> 00:15:14,750
now building logger in channel step by

00:15:12,240 --> 00:15:16,950
step process will follow a very basic

00:15:14,750 --> 00:15:19,620
architecture of a logger then we will

00:15:16,950 --> 00:15:23,070
include some formatter techniques and

00:15:19,620 --> 00:15:25,470
some handlers to make it little advanced

00:15:23,070 --> 00:15:31,560
but first we'll go for a very simple

00:15:25,470 --> 00:15:33,750
basic law go by so here you see basic

00:15:31,560 --> 00:15:35,640
congregations these all congregations

00:15:33,750 --> 00:15:38,640
will be bullying you're setting start by

00:15:35,640 --> 00:15:41,370
logging is a dictionary object so it

00:15:38,640 --> 00:15:46,230
will have various keys and values as you

00:15:41,370 --> 00:15:48,690
can see here first of every longing

00:15:46,230 --> 00:15:50,430
something called mandatory and something

00:15:48,690 --> 00:15:52,830
which are optional so these what you are

00:15:50,430 --> 00:15:55,070
seeing a mandatory once so you cannot

00:15:52,830 --> 00:15:57,270
opt out from them you have to kind of it

00:15:55,070 --> 00:15:59,070
initialize them for your very first

00:15:57,270 --> 00:16:01,080
attempt to actually create a logo file

00:15:59,070 --> 00:16:05,090
so how it goes is like that

00:16:01,080 --> 00:16:08,400
so logo and you have the basic

00:16:05,090 --> 00:16:10,440
representation representing this schema

00:16:08,400 --> 00:16:11,970
version so it's important to define that

00:16:10,440 --> 00:16:13,800
this is your first version of this team

00:16:11,970 --> 00:16:16,260
and you make it a version one by default

00:16:13,800 --> 00:16:19,380
it's one but you can change as per your

00:16:16,260 --> 00:16:21,090
convenience disable existing to ourself

00:16:19,380 --> 00:16:23,940
at all there is a jumbo logger already

00:16:21,090 --> 00:16:26,600
and enabled for you you can disable it I

00:16:23,940 --> 00:16:29,880
I put it as true because I wanted to see

00:16:26,600 --> 00:16:31,800
handle oh so here what I'm doing my hand

00:16:29,880 --> 00:16:34,740
really the path Borrelia I'm passing is

00:16:31,800 --> 00:16:36,480
called soul under class classes monetary

00:16:34,740 --> 00:16:38,280
here so I'm it's calling a stream

00:16:36,480 --> 00:16:40,800
handler because these stream it will be

00:16:38,280 --> 00:16:42,420
going into the console but in the next

00:16:40,800 --> 00:16:44,250
simple example they'll see the class

00:16:42,420 --> 00:16:45,450
there are many other classes that you

00:16:44,250 --> 00:16:48,090
can use PI hat

00:16:45,450 --> 00:16:51,180
five hundreds another classes which we

00:16:48,090 --> 00:16:55,650
were seeing in our next example then

00:16:51,180 --> 00:16:58,200
dude consider Stewart an offer to log

00:16:55,650 --> 00:17:01,980
all the messages in console level but

00:16:58,200 --> 00:17:04,250
level deeper or higher so here what I am

00:17:01,980 --> 00:17:07,530
doing in a Django application and

00:17:04,250 --> 00:17:11,370
putting all the messages of all the apps

00:17:07,530 --> 00:17:13,560
and everything Django internal

00:17:11,370 --> 00:17:16,490
architecture whatever log is coming and

00:17:13,560 --> 00:17:21,750
putting every one of them onto console

00:17:16,490 --> 00:17:23,880
with a level deeper or higher nonsense

00:17:21,750 --> 00:17:25,709
so here what I am doing a simple thing

00:17:23,880 --> 00:17:27,690
that I am constructing a logger

00:17:25,709 --> 00:17:31,200
missionary object giving a volition

00:17:27,690 --> 00:17:33,090
giving it a simple handle to just put it

00:17:31,200 --> 00:17:35,490
into the console whatever data is coming

00:17:33,090 --> 00:17:39,270
setting into the duty level because we

00:17:35,490 --> 00:17:42,120
want to see which pie we which entity

00:17:39,270 --> 00:17:43,590
else we can use critters there we see we

00:17:42,120 --> 00:17:46,260
can use a propagate called

00:17:43,590 --> 00:17:49,200
true entity where it goes and propagates

00:17:46,260 --> 00:17:51,660
to different other left acts as well so

00:17:49,200 --> 00:17:53,760
handler is its console level we

00:17:51,660 --> 00:17:56,430
mentioned that handles is the

00:17:53,760 --> 00:17:59,760
destination where you want the log data

00:17:56,430 --> 00:18:00,230
to be settling in so here I'm doing it's

00:17:59,760 --> 00:18:02,750
just

00:18:00,230 --> 00:18:05,960
also land and level is teapots an

00:18:02,750 --> 00:18:07,850
advanced version of it so you want an

00:18:05,960 --> 00:18:10,929
advanced portion of it what we are

00:18:07,850 --> 00:18:14,630
writing here so we added a formatter

00:18:10,929 --> 00:18:17,059
which is standard and the format is

00:18:14,630 --> 00:18:18,080
using time level name name nine

00:18:17,059 --> 00:18:20,870
important message

00:18:18,080 --> 00:18:24,470
what is your format level then you see

00:18:20,870 --> 00:18:28,940
your date time formats here which is do

00:18:24,470 --> 00:18:32,030
you want it like month your day or day

00:18:28,940 --> 00:18:34,970
month your hours minutes seconds you can

00:18:32,030 --> 00:18:38,929
choose as per your requirement then you

00:18:34,970 --> 00:18:41,480
have your debug and then here you can

00:18:38,929 --> 00:18:43,610
see it's a rotating file handler because

00:18:41,480 --> 00:18:47,390
I am putting it into the debug dot log

00:18:43,610 --> 00:18:49,880
file format I am assigning the formatter

00:18:47,390 --> 00:18:56,299
which I defined here a standard format a

00:18:49,880 --> 00:18:59,270
call logo so now I'm defining Django the

00:18:56,299 --> 00:19:03,410
handler the level propagate true means

00:18:59,270 --> 00:19:05,990
this this entity now is not static at

00:19:03,410 --> 00:19:10,270
the root level but it can go over other

00:19:05,990 --> 00:19:14,120
apps also so my actors here it's called

00:19:10,270 --> 00:19:18,710
planets together is planet so that's the

00:19:14,120 --> 00:19:21,020
happening and then there is a handler

00:19:18,710 --> 00:19:26,230
where I'm defining it as a file that I

00:19:21,020 --> 00:19:29,750
just stood here and level is called info

00:19:26,230 --> 00:19:34,880
it's only in point above the getting

00:19:29,750 --> 00:19:36,400
around here I can show you a simple

00:19:34,880 --> 00:19:40,360
example

00:19:36,400 --> 00:19:40,360
so my servers are running

00:19:58,669 --> 00:20:14,250
just trying to hide my controls here

00:20:09,450 --> 00:20:17,700
it's done and I'm just outputting the

00:20:14,250 --> 00:20:23,820
files here so yeah now what I will do is

00:20:17,700 --> 00:20:26,120
go ahead and refresh it you can say

00:20:23,820 --> 00:20:29,220
there is an info getting knocked down

00:20:26,120 --> 00:20:34,289
that says the file has changed and we

00:20:29,220 --> 00:20:41,460
are diluting it and so just wondering

00:20:34,289 --> 00:20:52,980
why was your comment basic number which

00:20:41,460 --> 00:20:55,370
is commented out now what's running it's

00:20:52,980 --> 00:20:55,370
up and running

00:20:55,490 --> 00:21:01,230
yeah it's up and running and here you

00:20:59,070 --> 00:21:03,480
can see I am in foiling this there are a

00:21:01,230 --> 00:21:05,610
lot of debugging packages saying if your

00:21:03,480 --> 00:21:07,470
package is not up-to-date or there is

00:21:05,610 --> 00:21:09,360
something there's an error that has

00:21:07,470 --> 00:21:14,700
happened so you can get all those mixes

00:21:09,360 --> 00:21:17,399
issue how I am actually doing this is go

00:21:14,700 --> 00:21:20,279
to my views or PI and then boarded my

00:21:17,399 --> 00:21:21,750
locking here and I just say that logger

00:21:20,279 --> 00:21:25,380
dot in for the planet list whatever

00:21:21,750 --> 00:21:28,950
understand doing it here so that's how

00:21:25,380 --> 00:21:30,809
it's working so you define whatever

00:21:28,950 --> 00:21:32,820
login you want because they're setting

00:21:30,809 --> 00:21:36,179
sort by you are going to find that you

00:21:32,820 --> 00:21:38,269
need all this information and you your

00:21:36,179 --> 00:21:45,539
file name is something like this and

00:21:38,269 --> 00:21:48,299
that's a to your vertical great so now

00:21:45,539 --> 00:21:50,580
we are kind of knowing how to construct

00:21:48,299 --> 00:21:54,600
advanced locking configuration for

00:21:50,580 --> 00:21:56,940
example and if you have these basic

00:21:54,600 --> 00:21:57,690
understanding I think you can even move

00:21:56,940 --> 00:22:00,750
the

00:21:57,690 --> 00:22:03,929
but enjoy it and you can format in a lot

00:22:00,750 --> 00:22:06,210
better manner then you can use various

00:22:03,929 --> 00:22:07,919
format tools techniques there's one that

00:22:06,210 --> 00:22:11,759
I'm using in the class here but you can

00:22:07,919 --> 00:22:14,429
use separately as well so I put a follow

00:22:11,759 --> 00:22:17,490
as you as I show that it is something

00:22:14,429 --> 00:22:22,190
like this where I love the information

00:22:17,490 --> 00:22:25,500
so instead of longer with default value

00:22:22,190 --> 00:22:27,659
yeah so this name is a default value but

00:22:25,500 --> 00:22:29,850
you can always change as well your app

00:22:27,659 --> 00:22:33,570
level for that anymore something like

00:22:29,850 --> 00:22:37,620
that now you have your creative elope as

00:22:33,570 --> 00:22:40,350
I mentioned I make this video 18 in it

00:22:37,620 --> 00:22:43,440
so that's how the login information

00:22:40,350 --> 00:22:46,289
would actually look like and if you go

00:22:43,440 --> 00:22:48,990
and see so if this is how the login

00:22:46,289 --> 00:22:51,029
information actually looks like similar

00:22:48,990 --> 00:22:54,299
to what we define you should have the

00:22:51,029 --> 00:22:59,580
timestamp the information level at the

00:22:54,299 --> 00:23:01,980
name of the app finally the line number

00:22:59,580 --> 00:23:05,549
and the information so this is how we

00:23:01,980 --> 00:23:08,220
define it but you can see doubling up my

00:23:05,549 --> 00:23:11,309
number information the same way we are

00:23:08,220 --> 00:23:15,149
getting the Commission here kudos so now

00:23:11,309 --> 00:23:18,750
we have a log settled in our settings on

00:23:15,149 --> 00:23:21,210
i-5 and we can do a lot a lot many

00:23:18,750 --> 00:23:23,519
different computations with it just can

00:23:21,210 --> 00:23:27,899
imagine how much we can do with it but

00:23:23,519 --> 00:23:30,809
yeah so log of file figure as I showed

00:23:27,899 --> 00:23:32,610
you and live example so here also can

00:23:30,809 --> 00:23:36,360
have different I tried creating some

00:23:32,610 --> 00:23:38,490
warnings it's in the file so I'll try

00:23:36,360 --> 00:23:45,330
again duplicate that warning so it's

00:23:38,490 --> 00:23:48,750
just say it manage it just gave me an

00:23:45,330 --> 00:23:51,330
error and then I can go here and say ok

00:23:48,750 --> 00:23:54,389
this is a warning here so the file our

00:23:51,330 --> 00:23:57,720
name was incorrect so again I made it

00:23:54,389 --> 00:24:00,960
make it right so now your file path name

00:23:57,720 --> 00:24:03,950
is correct that's how a warning I like

00:24:00,960 --> 00:24:07,169
to get into that's kind of warnings very

00:24:03,950 --> 00:24:08,610
sometimes your URL names not collect so

00:24:07,169 --> 00:24:11,490
if you at all you are using a rest

00:24:08,610 --> 00:24:14,040
framework to a postman call you

00:24:11,490 --> 00:24:20,580
get a similar hello in case we are your

00:24:14,040 --> 00:24:23,130
colleague the right partner now the last

00:24:20,580 --> 00:24:26,100
part of it is developing insights from a

00:24:23,130 --> 00:24:29,160
log file I have created my own log of

00:24:26,100 --> 00:24:32,370
file and tried run some visualizations

00:24:29,160 --> 00:24:34,980
into it so I'll show how you can do what

00:24:32,370 --> 00:24:37,800
steps you can actually perform so

00:24:34,980 --> 00:24:39,660
whenever there is data I cannot stop

00:24:37,800 --> 00:24:42,510
myself to actually do something that I

00:24:39,660 --> 00:24:44,160
want to make sure that there is some

00:24:42,510 --> 00:24:46,740
insight that I'm getting from that data

00:24:44,160 --> 00:24:49,020
and it should not be wasted a lot of

00:24:46,740 --> 00:24:51,990
files are beautiful files where you can

00:24:49,020 --> 00:24:54,059
get so much of variety of data and not

00:24:51,990 --> 00:24:55,860
only you can check your system of

00:24:54,059 --> 00:24:58,290
turning one time that actually a

00:24:55,860 --> 00:25:00,390
different software does for you you can

00:24:58,290 --> 00:25:02,130
actually do it for yourself so whenever

00:25:00,390 --> 00:25:05,040
there is a log file generator you can

00:25:02,130 --> 00:25:06,960
actually raise a ticket a critical

00:25:05,040 --> 00:25:10,110
culture you can be ascetic it connect

00:25:06,960 --> 00:25:12,210
with other external softwares external

00:25:10,110 --> 00:25:14,280
ticketing partners or external softwares

00:25:12,210 --> 00:25:16,860
and then there is a ticket they hate

00:25:14,280 --> 00:25:19,050
this is problem that a word and and

00:25:16,860 --> 00:25:22,770
assign it to someone in case there are

00:25:19,050 --> 00:25:26,520
specific developers for that critical

00:25:22,770 --> 00:25:29,429
error to be mapped it so yeah so now

00:25:26,520 --> 00:25:35,309
goosing developing insights from all of

00:25:29,429 --> 00:25:38,960
my going ahead okay now your data has to

00:25:35,309 --> 00:25:44,010
go and bestow something so I am

00:25:38,960 --> 00:25:45,390
outputting it into a txt file but feel

00:25:44,010 --> 00:25:49,890
free to use and in the file format that

00:25:45,390 --> 00:25:51,809
you are comfortable using good then I'm

00:25:49,890 --> 00:25:55,590
converting to a CSV using a simple

00:25:51,809 --> 00:25:58,559
reader import and converting to a CSV

00:25:55,590 --> 00:26:00,720
choose the data points whether you want

00:25:58,559 --> 00:26:02,280
to choose x term line number any other

00:26:00,720 --> 00:26:06,500
data points that you want to choose and

00:26:02,280 --> 00:26:12,620
where the insightful visualization great

00:26:06,500 --> 00:26:20,179
so I'll quickly show the file which I

00:26:12,620 --> 00:26:24,020
had with myself so I just did it as a

00:26:20,179 --> 00:26:24,020
lot CSV

00:26:24,860 --> 00:26:28,490
it looks something from me so I

00:26:26,540 --> 00:26:31,160
converted into us as you can see it's

00:26:28,490 --> 00:26:33,080
for my separated value file I have

00:26:31,160 --> 00:26:38,470
couple of data points they can be many

00:26:33,080 --> 00:26:43,730
data points but I chose this data point

00:26:38,470 --> 00:26:46,100
right now you have a data you converted

00:26:43,730 --> 00:26:48,200
to a CSV you chosen a the points here

00:26:46,100 --> 00:26:52,670
and now we are ready to build some

00:26:48,200 --> 00:26:54,350
visualization first I just filled this

00:26:52,670 --> 00:26:58,730
particular visualization plain and

00:26:54,350 --> 00:27:02,030
simple where I am comparing the

00:26:58,730 --> 00:27:04,160
frequency of the calls

00:27:02,030 --> 00:27:05,990
so how many times a default was called

00:27:04,160 --> 00:27:09,140
how many times of warning was called and

00:27:05,990 --> 00:27:12,490
how many times a intro was called so the

00:27:09,140 --> 00:27:15,410
frequency versus the logging level is

00:27:12,490 --> 00:27:17,930
the first visualization you must be

00:27:15,410 --> 00:27:20,180
wondering how can we achieve this so

00:27:17,930 --> 00:27:25,090
it's like few lines of code and you can

00:27:20,180 --> 00:27:27,920
achieve this see so here and calling the

00:27:25,090 --> 00:27:30,170
library which I love the most is plot

00:27:27,920 --> 00:27:32,570
lab and then find us then I am creating

00:27:30,170 --> 00:27:35,360
a data frame out of it this is my file

00:27:32,570 --> 00:27:37,610
and then I'm counting the occurrences

00:27:35,360 --> 00:27:40,250
counting the frequency of occurrence of

00:27:37,610 --> 00:27:42,500
each level present and then simply

00:27:40,250 --> 00:27:47,510
dotting a graph we will see this in

00:27:42,500 --> 00:27:50,350
action specifically chose this I wanted

00:27:47,510 --> 00:27:50,350
to show you next

00:27:52,540 --> 00:28:02,330
what yeah so this is one that I was

00:27:58,250 --> 00:28:04,190
working with sorry with lots of comments

00:28:02,330 --> 00:28:09,740
here it's just wanted to make sure that

00:28:04,190 --> 00:28:14,300
everything goes smooth so it's just this

00:28:09,740 --> 00:28:19,130
is my fire hopefully no errors

00:28:14,300 --> 00:28:23,030
time right here you can see the file

00:28:19,130 --> 00:28:25,610
that I could generate so debug info

00:28:23,030 --> 00:28:28,040
warning and the levels beside and this

00:28:25,610 --> 00:28:31,490
gives you a beautiful insights if you

00:28:28,040 --> 00:28:36,460
want to I know so more particular level

00:28:31,490 --> 00:28:38,930
and see yeah kind of consume it and and

00:28:36,460 --> 00:28:42,290
then if you want to save

00:28:38,930 --> 00:28:43,940
in this form you can save it as a PNG or

00:28:42,290 --> 00:28:45,740
anything and there are a lot of options

00:28:43,940 --> 00:28:47,180
that you can explore with math London

00:28:45,740 --> 00:28:49,520
and it's amazing you should definitely

00:28:47,180 --> 00:28:51,410
try it out if you have it you can

00:28:49,520 --> 00:28:53,240
connect it how much it should be right

00:28:51,410 --> 00:28:56,450
look these are inbuilt controls that I

00:28:53,240 --> 00:29:00,200
can use and definitely give it a try I

00:28:56,450 --> 00:29:04,000
must say you should give it a try moving

00:29:00,200 --> 00:29:16,250
on to the next I will show you another

00:29:04,000 --> 00:29:23,540
which I was currently working on okay so

00:29:16,250 --> 00:29:28,870
let's see what this gives us amazing so

00:29:23,540 --> 00:29:32,180
now you see we have the percentage of

00:29:28,870 --> 00:29:32,660
different levels cut got logged into our

00:29:32,180 --> 00:29:35,990
files

00:29:32,660 --> 00:29:38,270
so Bonnie took the highest hit rate so

00:29:35,990 --> 00:29:40,850
we had a lot of warnings for the file

00:29:38,270 --> 00:29:43,520
that I created then the information of

00:29:40,850 --> 00:29:45,290
info level was 24 points and debug

00:29:43,520 --> 00:29:48,170
persisting forces but they're a critical

00:29:45,290 --> 00:29:49,460
warning there were warnings there were

00:29:48,170 --> 00:29:50,870
no critical issues right now

00:29:49,460 --> 00:29:52,250
so if there are critical issues then

00:29:50,870 --> 00:29:54,320
there will be another pie chart that you

00:29:52,250 --> 00:29:57,410
can plot which say yes there is a

00:29:54,320 --> 00:30:00,040
critical issue involved so let's go a

00:29:57,410 --> 00:30:04,120
little bit only code how it actually

00:30:00,040 --> 00:30:07,490
works so that you can have inside of

00:30:04,120 --> 00:30:10,430
getting these parts ready so it's very

00:30:07,490 --> 00:30:12,350
simple I'm calling the to library is

00:30:10,430 --> 00:30:16,480
that I'm saying that these are the

00:30:12,350 --> 00:30:19,160
labels I would want to have and then I

00:30:16,480 --> 00:30:21,710
constructed a afraid I get the count

00:30:19,160 --> 00:30:26,150
similar to what we did for bite Barca

00:30:21,710 --> 00:30:29,870
and I just construct a convert the in 64

00:30:26,150 --> 00:30:32,570
sensor data frame it will be in 64 type

00:30:29,870 --> 00:30:34,640
number to a list and I get the sizes

00:30:32,570 --> 00:30:37,430
explored is nothing what you are seeing

00:30:34,640 --> 00:30:40,990
is here just a little this thing going

00:30:37,430 --> 00:30:45,530
outwards it's what is called explode

00:30:40,990 --> 00:30:51,410
trying make it as safe 1.3 and show you

00:30:45,530 --> 00:30:54,860
I just want to show that this is kind of

00:30:51,410 --> 00:30:57,960
in the thing that you can do

00:30:54,860 --> 00:31:00,300
so see this P is got a little bit bigger

00:30:57,960 --> 00:31:03,840
but this is one of the things that comes

00:31:00,300 --> 00:31:06,900
into picture that's it then you have

00:31:03,840 --> 00:31:09,980
subplots that you want to have any auto

00:31:06,900 --> 00:31:14,070
back sizes there's shadow these are like

00:31:09,980 --> 00:31:16,320
various metals that you can use for the

00:31:14,070 --> 00:31:19,250
pie chart even these many are optional

00:31:16,320 --> 00:31:21,600
so you can opt it out and then access

00:31:19,250 --> 00:31:24,510
equal that means it should be a circle

00:31:21,600 --> 00:31:26,880
it can be overall or it can be a ellipse

00:31:24,510 --> 00:31:29,820
but I chose to get out to that pie chart

00:31:26,880 --> 00:31:33,360
and that's that's it then you just

00:31:29,820 --> 00:31:35,190
output it that's all this is a small

00:31:33,360 --> 00:31:36,870
code that you can use to actually build

00:31:35,190 --> 00:31:41,360
insightful information from the doctor

00:31:36,870 --> 00:31:44,790
from the C log files CSV that I just

00:31:41,360 --> 00:31:52,020
that I could do it and then show it to

00:31:44,790 --> 00:31:54,450
you wait so now again we have diving

00:31:52,020 --> 00:31:59,580
into a code we archive and this is not

00:31:54,450 --> 00:32:01,670
all there are ample of there a lot many

00:31:59,580 --> 00:32:04,080
things that you can do with logger and

00:32:01,670 --> 00:32:06,420
they better visualization that I could

00:32:04,080 --> 00:32:08,340
just show you you can learn a lot better

00:32:06,420 --> 00:32:10,470
visualization using external packages

00:32:08,340 --> 00:32:12,840
and libraries something that you have

00:32:10,470 --> 00:32:16,140
created on your own so don't stop

00:32:12,840 --> 00:32:19,470
exploring keep exporting it's a very I'm

00:32:16,140 --> 00:32:24,210
using a very amazing tool to actually

00:32:19,470 --> 00:32:28,530
debug your jumbo packages and then we

00:32:24,210 --> 00:32:31,950
have to the end of the discussion if you

00:32:28,530 --> 00:32:33,840
have any questions I am very active on

00:32:31,950 --> 00:32:35,580
Twitter so you can reach me out my

00:32:33,840 --> 00:32:39,150
Diggins open if you have any questions

00:32:35,580 --> 00:32:42,000
or if you need some help and you've got

00:32:39,150 --> 00:32:44,070
stuck with some of the techniques that I

00:32:42,000 --> 00:32:48,980
mentioned but if you have any queries

00:32:44,070 --> 00:32:51,210
you can definitely reach me out so

00:32:48,980 --> 00:32:53,670
that's it from you today and hope you

00:32:51,210 --> 00:32:57,420
like the session I will be awaiting all

00:32:53,670 --> 00:33:00,000
the questions and feedbacks thank you

00:32:57,420 --> 00:33:16,509
thank you so much

00:33:00,000 --> 00:33:16,509

YouTube URL: https://www.youtube.com/watch?v=xaCDjxzU9rk


