Title: stackconf online 2020 | The path to a Serverless-native era with Kubernetes by Paolo Mainardi
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	Serverless is one of the hottest design patterns in the cloud today, i’ll cover how the Serverless paradigms are changing the way we develop applications and the cloud infrastructures and how to implement Serveless-kind workloads with Kubernetes.
We’ll go through the latest Kubernetes-based serverless technologies, covering the most important aspects including pricing, scalability, observability and best practices


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:15,730
[Music]

00:00:12,480 --> 00:00:18,010
hi everyone I'm very glad to be part of

00:00:15,730 --> 00:00:19,660
this event its first time for me to

00:00:18,010 --> 00:00:21,790
speak in a virtual conference I'm very

00:00:19,660 --> 00:00:24,490
excited and the many thanks to the

00:00:21,790 --> 00:00:25,180
fantastic organizer for making this

00:00:24,490 --> 00:00:27,970
happen

00:00:25,180 --> 00:00:31,090
I am palawan Rd I am the CTO and founder

00:00:27,970 --> 00:00:33,450
of an Italian company based in Milan we

00:00:31,090 --> 00:00:37,000
do Club native development kubernetes

00:00:33,450 --> 00:00:39,910
consultancy on different aspects

00:00:37,000 --> 00:00:43,420
building custom pet or indoors on Prem

00:00:39,910 --> 00:00:45,820
installations and if you want to know

00:00:43,420 --> 00:00:47,680
more about us you can check out our

00:00:45,820 --> 00:00:50,710
website there are a lot of informations

00:00:47,680 --> 00:00:52,630
there some case study and so on for any

00:00:50,710 --> 00:00:55,590
questions regarding this torque and more

00:00:52,630 --> 00:00:58,600
please please feel free to contact me

00:00:55,590 --> 00:01:00,460
but the one to share with you today are

00:00:58,600 --> 00:01:04,119
the following topics I will be very

00:01:00,460 --> 00:01:07,840
quick you have a lot of things to show

00:01:04,119 --> 00:01:10,840
you but keep all the questions to four

00:01:07,840 --> 00:01:13,030
at the end of the of this talk and we

00:01:10,840 --> 00:01:15,159
will start with what is the life cycle

00:01:13,030 --> 00:01:17,560
of emerging technologies and why it's

00:01:15,159 --> 00:01:18,909
important to know it I consider this

00:01:17,560 --> 00:01:20,530
point very important because the

00:01:18,909 --> 00:01:22,840
technologies we adopt to build or

00:01:20,530 --> 00:01:25,990
improve our business have an impact on

00:01:22,840 --> 00:01:28,360
us for years so we should choose it very

00:01:25,990 --> 00:01:30,729
carefully then I will review the service

00:01:28,360 --> 00:01:32,860
concept like functional service back in

00:01:30,729 --> 00:01:34,750
the service and so on then we'll talk

00:01:32,860 --> 00:01:37,690
about how to provide service kind

00:01:34,750 --> 00:01:38,250
workloads or computing model on October

00:01:37,690 --> 00:01:41,080
00:01:38,250 --> 00:01:43,090
so typ cycle it's a branded graphical

00:01:41,080 --> 00:01:45,100
presentation developed by Gartner to

00:01:43,090 --> 00:01:46,960
represented maturity adoption and social

00:01:45,100 --> 00:01:51,070
application of emerging technologies

00:01:46,960 --> 00:01:53,530
through five main phases so actually we

00:01:51,070 --> 00:01:55,299
can use this tool and abuse it's a tool

00:01:53,530 --> 00:01:59,170
to better understand the market and

00:01:55,299 --> 00:02:02,170
according to our confidence on risks

00:01:59,170 --> 00:02:07,030
choose or not to invest in technology

00:02:02,170 --> 00:02:09,789
the very first phase of this of this

00:02:07,030 --> 00:02:12,819
tool is the technology trigger the

00:02:09,789 --> 00:02:16,319
technology trigger is where a potential

00:02:12,819 --> 00:02:18,959
disruptive technologies conceptualize

00:02:16,319 --> 00:02:22,030
most of the time we say it's just a

00:02:18,959 --> 00:02:25,810
proof-of-concept and nothing is rigged

00:02:22,030 --> 00:02:29,140
and if you use docker as an example it

00:02:25,810 --> 00:02:34,270
was the 2013 when docker was presented

00:02:29,140 --> 00:02:36,090
for the first time and word PyCon with a

00:02:34,270 --> 00:02:38,950
lightning talk of just five minutes

00:02:36,090 --> 00:02:41,020
titled the future of Linux container so

00:02:38,950 --> 00:02:42,880
the time docker was much more than a CLI

00:02:41,020 --> 00:02:45,550
to run Linux containers of wrapper

00:02:42,880 --> 00:02:49,930
around the leak C which is a technology

00:02:45,550 --> 00:02:51,880
and you know what that I'm next in and

00:02:49,930 --> 00:02:55,480
just five minutes the talk basically

00:02:51,880 --> 00:02:57,790
changed everything now when this happens

00:02:55,480 --> 00:02:59,709
a lot of interest gets generated around

00:02:57,790 --> 00:03:02,020
the technology and product thanks to the

00:02:59,709 --> 00:03:04,630
spreading of news and contents through

00:03:02,020 --> 00:03:09,280
the social media and the conferences we

00:03:04,630 --> 00:03:13,330
picked we pick the we face the peak of

00:03:09,280 --> 00:03:16,120
the inflated expectations where we are

00:03:13,330 --> 00:03:19,090
in this stage we are over the early

00:03:16,120 --> 00:03:21,160
adoptions the early publicity produces a

00:03:19,090 --> 00:03:25,239
number a number of success stories but

00:03:21,160 --> 00:03:27,160
also a lot of failure ones and the

00:03:25,239 --> 00:03:31,989
negative press led us to the trough of

00:03:27,160 --> 00:03:33,730
disillusionment in a in this face the

00:03:31,989 --> 00:03:36,430
curve of that cycle that begins to

00:03:33,730 --> 00:03:38,650
descend and till comes a point where the

00:03:36,430 --> 00:03:42,040
media start to abandon the topic and

00:03:38,650 --> 00:03:44,920
also the adopters start to leave the

00:03:42,040 --> 00:03:49,660
products this happens most of the time

00:03:44,920 --> 00:03:51,970
because the adopters and enterprises

00:03:49,660 --> 00:03:54,340
feel that the technology does really

00:03:51,970 --> 00:03:58,930
fulfill the hype or is not capable to

00:03:54,340 --> 00:04:00,700
absorb what initially premised so for

00:03:58,930 --> 00:04:02,799
the surviving company there is the slope

00:04:00,700 --> 00:04:05,049
of enlightenment and over where more

00:04:02,799 --> 00:04:06,610
instances of how the technology can

00:04:05,049 --> 00:04:09,640
benefit the enterprise start to

00:04:06,610 --> 00:04:12,670
crystallize and become more widely

00:04:09,640 --> 00:04:14,470
understood this is also a phase where

00:04:12,670 --> 00:04:15,730
second or third generation products

00:04:14,470 --> 00:04:18,340
start to appear from technology

00:04:15,730 --> 00:04:20,919
providers we can think about the last

00:04:18,340 --> 00:04:25,630
hydration of Dockers warm using a

00:04:20,919 --> 00:04:29,700
technology again and the last phase is

00:04:25,630 --> 00:04:32,380
the plateau of productivity in this face

00:04:29,700 --> 00:04:32,990
the technology is widely implemented the

00:04:32,380 --> 00:04:35,180
mainstream

00:04:32,990 --> 00:04:38,510
after the weekend thing about kubernetes

00:04:35,180 --> 00:04:39,950
containers today its place in market in

00:04:38,510 --> 00:04:41,810
the it's applications are well

00:04:39,950 --> 00:04:44,630
understood then the standards and

00:04:41,810 --> 00:04:47,540
criteria are redefined to evaluate

00:04:44,630 --> 00:04:50,330
technology partners so where was plays

00:04:47,540 --> 00:04:53,720
where is plays surveillance inside the

00:04:50,330 --> 00:04:56,990
desired cycle trend and the last report

00:04:53,720 --> 00:05:00,380
we have from gutter is it from 2017 was

00:04:56,990 --> 00:05:02,060
placed between the technology trigger

00:05:00,380 --> 00:05:04,220
and the peak of inflated expectations

00:05:02,060 --> 00:05:08,510
it's totally correct to me at the time

00:05:04,220 --> 00:05:12,320
because it was not yet not really at a

00:05:08,510 --> 00:05:16,940
matter of technology but now I think

00:05:12,320 --> 00:05:19,400
that we are over the we we already reach

00:05:16,940 --> 00:05:21,320
the slope of an alignment there are a

00:05:19,400 --> 00:05:23,390
lot of surveillance products the

00:05:21,320 --> 00:05:25,520
investment vestments are growing

00:05:23,390 --> 00:05:28,400
adoptions of service technology is

00:05:25,520 --> 00:05:32,840
widely accepted also for enterprise

00:05:28,400 --> 00:05:35,770
workloads so to me it's totally safe to

00:05:32,840 --> 00:05:38,480
date choose to implement some of our

00:05:35,770 --> 00:05:41,270
workloads over a new generation

00:05:38,480 --> 00:05:43,850
application to extend our business using

00:05:41,270 --> 00:05:45,350
this kind of computing model according

00:05:43,850 --> 00:05:47,270
to Carter in the next three years

00:05:45,350 --> 00:05:51,860
service will become the predominant

00:05:47,270 --> 00:05:53,900
cloud computing model so what is service

00:05:51,860 --> 00:05:56,780
and which technologies are we talking

00:05:53,900 --> 00:05:59,210
about one of the criticisms no jokes

00:05:56,780 --> 00:06:02,450
about the name is the DNS server system

00:05:59,210 --> 00:06:04,160
needed run our code but ok if we look at

00:06:02,450 --> 00:06:06,920
this from another perspective we can

00:06:04,160 --> 00:06:09,200
compare it to determine wireless where

00:06:06,920 --> 00:06:10,700
we take it for granted that the cable

00:06:09,200 --> 00:06:13,250
are singing it to connect the merit of

00:06:10,700 --> 00:06:15,860
the network but me as a client I can

00:06:13,250 --> 00:06:18,830
just use it without touching a cable to

00:06:15,860 --> 00:06:21,380
my phone or my laptop to use it this is

00:06:18,830 --> 00:06:24,200
the very same part of servers steaming

00:06:21,380 --> 00:06:26,900
it to run the code but me as a developer

00:06:24,200 --> 00:06:28,880
or as an operator I don't have to care

00:06:26,900 --> 00:06:30,500
anymore about provisioning maintaining

00:06:28,880 --> 00:06:33,920
or planning the freh structure I can

00:06:30,500 --> 00:06:37,910
just focus on my code and shipping were

00:06:33,920 --> 00:06:39,950
fast to the cloud so according to the CN

00:06:37,910 --> 00:06:41,990
CF definition service computing refers

00:06:39,950 --> 00:06:44,810
to a concept of building and running

00:06:41,990 --> 00:06:45,280
applications that do not require service

00:06:44,810 --> 00:06:48,310
man

00:06:45,280 --> 00:06:50,139
as a really yellow really said it means

00:06:48,310 --> 00:06:52,120
that operations engineers are still

00:06:50,139 --> 00:06:55,270
needed to run the first section to run

00:06:52,120 --> 00:06:58,000
the code but this does infrastructure

00:06:55,270 --> 00:07:00,360
are a completely abstract away from the

00:06:58,000 --> 00:07:03,340
developers and IT operations team

00:07:00,360 --> 00:07:05,800
basically we describe a new

00:07:03,340 --> 00:07:08,770
finer-grained deployment model where the

00:07:05,800 --> 00:07:10,750
applications are bundled or know as one

00:07:08,770 --> 00:07:13,870
or more functions and uploaded to a

00:07:10,750 --> 00:07:18,190
platform then this platform will take

00:07:13,870 --> 00:07:21,280
care to execute scale and being me the

00:07:18,190 --> 00:07:24,610
response of exactement needed that

00:07:21,280 --> 00:07:26,710
moment so several us computing platform

00:07:24,610 --> 00:07:29,470
usually provides one of both of those

00:07:26,710 --> 00:07:32,230
category of services the function as a

00:07:29,470 --> 00:07:34,570
service or just fast which provides

00:07:32,230 --> 00:07:37,180
these event driven computing platform

00:07:34,570 --> 00:07:41,080
and the backend as a service which are

00:07:37,180 --> 00:07:43,360
third party API is based services like

00:07:41,080 --> 00:07:47,229
database of dedication platforms queue

00:07:43,360 --> 00:07:49,479
system and so on and as those API are

00:07:47,229 --> 00:07:51,460
provided the service they can out of

00:07:49,479 --> 00:07:54,400
scales like the function said they

00:07:51,460 --> 00:07:58,540
operates transparently and they are

00:07:54,400 --> 00:08:00,700
built build like in the same way the

00:07:58,540 --> 00:08:03,100
functions are building in pay-as-you-go

00:08:00,700 --> 00:08:06,250
building model so they appear totally to

00:08:03,100 --> 00:08:08,470
developers to be serviced so service is

00:08:06,250 --> 00:08:10,660
all about the developer experience and

00:08:08,470 --> 00:08:12,430
Scott's a tower said one time when we

00:08:10,660 --> 00:08:14,200
have a great idea the last thing we want

00:08:12,430 --> 00:08:16,660
to do is stuff the infrastructure I

00:08:14,200 --> 00:08:18,100
agree totally with this I think that

00:08:16,660 --> 00:08:20,080
building software is an act of

00:08:18,100 --> 00:08:21,190
creativity and should be sustained in

00:08:20,080 --> 00:08:23,620
all the ways possible

00:08:21,190 --> 00:08:26,080
and also everything that can help me to

00:08:23,620 --> 00:08:27,910
reduce the time to market and help me to

00:08:26,080 --> 00:08:31,120
deliver business variants quickly it's

00:08:27,910 --> 00:08:33,610
just poor cold so service is all about

00:08:31,120 --> 00:08:36,159
the developer experience because of

00:08:33,610 --> 00:08:38,409
these three key points of service which

00:08:36,159 --> 00:08:40,719
is coastal resource efficiency can scale

00:08:38,409 --> 00:08:43,120
down to zero it's based on a

00:08:40,719 --> 00:08:46,080
pay-as-you-go building model I can scale

00:08:43,120 --> 00:08:48,980
up on demand and it's automation

00:08:46,080 --> 00:08:52,490
mechanism of scaling failure handling

00:08:48,980 --> 00:08:54,889
the recovery so let's start to focus now

00:08:52,490 --> 00:08:56,420
on function as a service one of the

00:08:54,889 --> 00:08:58,100
major innovation no surveillance

00:08:56,420 --> 00:09:00,740
ecosystem in the last years I will

00:08:58,100 --> 00:09:03,320
explain what service functions are by

00:09:00,740 --> 00:09:06,410
using a real-world business scenario an

00:09:03,320 --> 00:09:08,660
example of the development of a cloud

00:09:06,410 --> 00:09:11,089
native product considering both parts

00:09:08,660 --> 00:09:12,980
coding a cloud architecture so let's

00:09:11,089 --> 00:09:15,440
imagine that we have been asked by our

00:09:12,980 --> 00:09:17,690
business department or by one of our

00:09:15,440 --> 00:09:21,019
customers to plan something to translate

00:09:17,690 --> 00:09:25,910
text files coming up from different

00:09:21,019 --> 00:09:27,860
sources from Italian to German and they

00:09:25,910 --> 00:09:30,290
also provide us a list of the

00:09:27,860 --> 00:09:32,240
non-functional requirements they want a

00:09:30,290 --> 00:09:35,180
system capable to scale up on demand

00:09:32,240 --> 00:09:38,000
which is a highly available to respect

00:09:35,180 --> 00:09:41,930
their SLA because it's very critical

00:09:38,000 --> 00:09:44,329
it must be capable to scale down to zero

00:09:41,930 --> 00:09:47,660
and finally they want not paper use

00:09:44,329 --> 00:09:49,160
building model so we do a couple of

00:09:47,660 --> 00:09:51,800
meeting with the our develops

00:09:49,160 --> 00:09:54,319
engineering team we agree on the

00:09:51,800 --> 00:09:58,339
following stack we choose we choose not

00:09:54,319 --> 00:10:01,880
GS as our developing your development

00:09:58,339 --> 00:10:05,329
platform and as the hosting platform

00:10:01,880 --> 00:10:11,440
cloud platform which was GCP for its

00:10:05,329 --> 00:10:15,440
cloud services and for the translate API

00:10:11,440 --> 00:10:17,709
so we start with the local application

00:10:15,440 --> 00:10:25,550
which is very simple though it's a very

00:10:17,709 --> 00:10:28,519
short code code base it's like 15 lines

00:10:25,550 --> 00:10:31,910
of code and basically what we define

00:10:28,519 --> 00:10:33,980
it's a HTTP endpoint using the no GS

00:10:31,910 --> 00:10:36,769
Express framework where we receive the

00:10:33,980 --> 00:10:40,910
data to translate then we use the GCV

00:10:36,769 --> 00:10:44,000
services to translate the text to give

00:10:40,910 --> 00:10:46,490
back to the user and to store this

00:10:44,000 --> 00:10:48,740
translation in object search bucket so

00:10:46,490 --> 00:10:53,089
the application is ready to be deployed

00:10:48,740 --> 00:10:55,190
and now the the verbal part is done we

00:10:53,089 --> 00:10:57,020
thought look the ways to ship it into

00:10:55,190 --> 00:11:00,290
the cloud according to the

00:10:57,020 --> 00:11:02,990
functional requirements it's very tough

00:11:00,290 --> 00:11:07,640
because the non-functional requirements

00:11:02,990 --> 00:11:09,650
are complex to achieve old ones so we

00:11:07,640 --> 00:11:11,660
decide to design an iterative approach

00:11:09,650 --> 00:11:16,550
we start by defining a very simple

00:11:11,660 --> 00:11:18,170
architecture which is based on HTTP

00:11:16,550 --> 00:11:21,440
global load balancer virtual machine

00:11:18,170 --> 00:11:25,040
running our code on region just one zone

00:11:21,440 --> 00:11:28,370
of this region in this case B but of

00:11:25,040 --> 00:11:30,830
course we fail of the our requirements

00:11:28,370 --> 00:11:33,770
because we can we cannot scale up we are

00:11:30,830 --> 00:11:36,260
not a J and at the end we will be a we

00:11:33,770 --> 00:11:39,590
have also fixed cost just to run the

00:11:36,260 --> 00:11:41,690
services so we iterate again we can add

00:11:39,590 --> 00:11:46,550
an instance group so we can scan from 1

00:11:41,690 --> 00:11:50,990
to n but all the rest is still failing

00:11:46,550 --> 00:11:55,340
and so we work bit more on the AJ

00:11:50,990 --> 00:11:58,340
aspects so we propose to to add new

00:11:55,340 --> 00:12:03,050
zones to these regions to use all the

00:11:58,340 --> 00:12:05,210
zones available and so we spin up the

00:12:03,050 --> 00:12:09,050
deert on machines with the instance

00:12:05,210 --> 00:12:12,130
groups on a B and C and now the first

00:12:09,050 --> 00:12:15,440
structure is much more reliable we are

00:12:12,130 --> 00:12:18,650
we have the one hae requirement green

00:12:15,440 --> 00:12:20,750
but the rest is red gain because we can

00:12:18,650 --> 00:12:22,760
we cannot scale down to zero and we

00:12:20,750 --> 00:12:27,500
cannot do it just using traditional

00:12:22,760 --> 00:12:31,310
other services sorry and finally we

00:12:27,500 --> 00:12:34,610
already have the pay-as-you-go red

00:12:31,310 --> 00:12:40,700
because we have the fixed costs that now

00:12:34,610 --> 00:12:43,880
are more than twice as before so we have

00:12:40,700 --> 00:12:48,530
two ways now we can invent our custom

00:12:43,880 --> 00:12:51,840
solution to a complete to try to to

00:12:48,530 --> 00:12:54,240
accomplish all the departments or

00:12:51,840 --> 00:12:56,130
or we try another approach so we know

00:12:54,240 --> 00:12:59,400
that the GCP offers a service platform

00:12:56,130 --> 00:13:02,970
so we decide to investigate that we know

00:12:59,400 --> 00:13:05,640
that according to the GCP function

00:13:02,970 --> 00:13:09,650
documentation it's very simple to expose

00:13:05,640 --> 00:13:15,390
an obvious application on the wide-on

00:13:09,650 --> 00:13:19,260
HTTP and we just need this very simple

00:13:15,390 --> 00:13:21,510
factoring we strip out the Express sorry

00:13:19,260 --> 00:13:26,370
web server and management because it

00:13:21,510 --> 00:13:28,500
will be entered by AG CP and we we are

00:13:26,370 --> 00:13:30,660
we are done you know we need we don't

00:13:28,500 --> 00:13:32,400
need to change anything else and we are

00:13:30,660 --> 00:13:36,780
ready to deploy in this function on this

00:13:32,400 --> 00:13:39,660
GCP function service so this is the how

00:13:36,780 --> 00:13:42,150
the New York detector looks like it's

00:13:39,660 --> 00:13:45,240
much much more simple than before as you

00:13:42,150 --> 00:13:49,950
can see we do never any other moving

00:13:45,240 --> 00:13:52,530
parts other than our function and the

00:13:49,950 --> 00:13:54,000
external services and all the

00:13:52,530 --> 00:13:56,430
non-functional requirements are now

00:13:54,000 --> 00:14:00,210
green we can escape on demand we are hae

00:13:56,430 --> 00:14:02,280
we can scale down to zero we pay we have

00:14:00,210 --> 00:14:06,450
a billing model pay-as-you-go and we

00:14:02,280 --> 00:14:08,730
don't have anymore any fixed cost and in

00:14:06,450 --> 00:14:10,410
addition we have win long enough to deal

00:14:08,730 --> 00:14:12,180
with the magic the infrastructure

00:14:10,410 --> 00:14:14,490
because basically we don't have an

00:14:12,180 --> 00:14:16,410
infrastructure to manage here we have

00:14:14,490 --> 00:14:19,590
our application running on the cloud and

00:14:16,410 --> 00:14:23,280
everyone is happy so we'll the key

00:14:19,590 --> 00:14:26,790
properties of fuss as we saw basically

00:14:23,280 --> 00:14:28,470
the the functions are much like the

00:14:26,790 --> 00:14:30,780
functions we use to write the

00:14:28,470 --> 00:14:33,690
conventional applications they are small

00:14:30,780 --> 00:14:35,940
separate two units of logic they are

00:14:33,690 --> 00:14:38,850
stateless and the funeral this is one of

00:14:35,940 --> 00:14:41,820
the most important properties because as

00:14:38,850 --> 00:14:44,670
we are not in control of the underlying

00:14:41,820 --> 00:14:48,090
server infrastructure we can for example

00:14:44,670 --> 00:14:51,090
save a file to disk on one run and then

00:14:48,090 --> 00:14:52,890
expect to find that file on the next run

00:14:51,090 --> 00:14:57,660
because all the implications can

00:14:52,890 --> 00:15:00,030
virtually been executed on

00:14:57,660 --> 00:15:01,710
different service and that they are

00:15:00,030 --> 00:15:04,860
designed to spin up very quickly do

00:15:01,710 --> 00:15:07,080
their work and then gets destroyed dad

00:15:04,860 --> 00:15:09,570
saying that they are also designed to

00:15:07,080 --> 00:15:12,840
have a maximum execution time according

00:15:09,570 --> 00:15:16,560
to the vendor and posted limits that

00:15:12,840 --> 00:15:19,200
goes to seconds to few minutes depending

00:15:16,560 --> 00:15:22,260
on that and then it's scalable by

00:15:19,200 --> 00:15:24,600
default from zero to n and as taken

00:15:22,260 --> 00:15:26,820
skill to zero they are affected by a

00:15:24,600 --> 00:15:30,630
phenomenon called the cold start which

00:15:26,820 --> 00:15:32,430
is the time the cloud vendors spend to

00:15:30,630 --> 00:15:34,440
allocate the resources to spin up the

00:15:32,430 --> 00:15:36,990
function on a machine on a server and

00:15:34,440 --> 00:15:40,200
make it available to the external world

00:15:36,990 --> 00:15:42,300
you can think the time we spend when the

00:15:40,200 --> 00:15:45,690
loading dock container before we can

00:15:42,300 --> 00:15:48,390
make profit of it it's not very much

00:15:45,690 --> 00:15:51,360
different than that then the functions

00:15:48,390 --> 00:15:54,660
are having triggered that can pain can

00:15:51,360 --> 00:15:57,930
be invoked by HTTP which is an event or

00:15:54,660 --> 00:15:59,880
all the other vents available on the

00:15:57,930 --> 00:16:02,070
cloud service like the database

00:15:59,880 --> 00:16:05,280
authentication and so we can attach the

00:16:02,070 --> 00:16:08,040
function the functions on all these kind

00:16:05,280 --> 00:16:09,960
of events and finally they are fully

00:16:08,040 --> 00:16:11,580
managed by a third party once I had the

00:16:09,960 --> 00:16:14,070
pole function I don't need to invest any

00:16:11,580 --> 00:16:16,440
other time to maintain functions I just

00:16:14,070 --> 00:16:19,470
can use it everything is in charge of

00:16:16,440 --> 00:16:22,080
the top vendor so the state of fast on

00:16:19,470 --> 00:16:23,880
public cloud it's very in a very good

00:16:22,080 --> 00:16:26,160
shape but there are some little quakes

00:16:23,880 --> 00:16:28,350
to here and there to keep in mind

00:16:26,160 --> 00:16:29,790
particular decisions the roughest one to

00:16:28,350 --> 00:16:32,820
me is the limited the language runtime

00:16:29,790 --> 00:16:36,750
support for example if we are deploying

00:16:32,820 --> 00:16:38,820
if we want to deploy something using a

00:16:36,750 --> 00:16:42,690
very niche language like I don't know

00:16:38,820 --> 00:16:44,880
our language I cannot actually run run

00:16:42,690 --> 00:16:47,310
it on a standard and servers run time

00:16:44,880 --> 00:16:49,370
because they tend to support the most

00:16:47,310 --> 00:16:53,490
use of the language like Python node

00:16:49,370 --> 00:16:55,440
java.net tank sitter then we as we are

00:16:53,490 --> 00:16:57,180
also forced to use some sort of bender

00:16:55,440 --> 00:16:58,770
proprietary mechanism to package the

00:16:57,180 --> 00:17:02,460
body function so we can not rely on

00:16:58,770 --> 00:17:05,910
containers we can we have just to take

00:17:02,460 --> 00:17:06,860
our source code use their command line

00:17:05,910 --> 00:17:09,350
and

00:17:06,860 --> 00:17:11,720
push it push it on the clock vendors but

00:17:09,350 --> 00:17:15,409
we can use any kind of standard like the

00:17:11,720 --> 00:17:17,539
Oceania for example another due to big

00:17:15,409 --> 00:17:19,669
problems I see are the Lockheed in

00:17:17,539 --> 00:17:21,890
language or an x which we said I cannot

00:17:19,669 --> 00:17:25,579
extend or modified Iran time that we run

00:17:21,890 --> 00:17:28,789
my functions but some vendors like like

00:17:25,579 --> 00:17:31,399
AWS allows to do this using the layers

00:17:28,789 --> 00:17:33,559
but generally speaking you can't the

00:17:31,399 --> 00:17:35,450
other one the biggest one to me is the

00:17:33,559 --> 00:17:38,059
format of the event interchange between

00:17:35,450 --> 00:17:40,010
the cloud services which is most of the

00:17:38,059 --> 00:17:43,340
time a proprietary format which also

00:17:40,010 --> 00:17:45,950
lend us into the Lockean arena so let's

00:17:43,340 --> 00:17:48,230
see what really is the low key we'd use

00:17:45,950 --> 00:17:50,299
again a real-world businesses scenario

00:17:48,230 --> 00:17:52,700
for this imagine that we already have an

00:17:50,299 --> 00:17:56,240
application cable to convert CSV file to

00:17:52,700 --> 00:17:58,490
JSON just using GCP services he is

00:17:56,240 --> 00:18:02,690
working smoothly he's reading production

00:17:58,490 --> 00:18:06,019
and we have been a tasket by our

00:18:02,690 --> 00:18:08,120
business department to extend it also to

00:18:06,019 --> 00:18:10,519
other vendors in this case we want to

00:18:08,120 --> 00:18:15,309
support the same stream of data with the

00:18:10,519 --> 00:18:18,350
same kind of services but on Amazon AWS

00:18:15,309 --> 00:18:19,730
so we wire up the things together we

00:18:18,350 --> 00:18:21,590
come to your rescue s to push the

00:18:19,730 --> 00:18:24,889
messages on our call function but the

00:18:21,590 --> 00:18:26,990
function blocks let's see why because

00:18:24,889 --> 00:18:29,049
haven't format as you can see in the

00:18:26,990 --> 00:18:31,820
left on the right side we have the

00:18:29,049 --> 00:18:34,460
message the message is coming from the

00:18:31,820 --> 00:18:39,200
two vendors on the left side we have AWS

00:18:34,460 --> 00:18:41,870
and I left the right side the GCP type

00:18:39,200 --> 00:18:45,830
of the kind of service a it's the same

00:18:41,870 --> 00:18:48,950
pops up and SQS but the format is

00:18:45,830 --> 00:18:52,580
totally proprietor so one of the things

00:18:48,950 --> 00:18:54,440
we can do to solve this problem is

00:18:52,580 --> 00:18:57,049
building something like an event

00:18:54,440 --> 00:18:59,630
processor before eating our function

00:18:57,049 --> 00:19:03,740
maybe it could be another function or

00:18:59,630 --> 00:19:08,510
just extension of our function and we

00:19:03,740 --> 00:19:11,660
should also invent our custom standard

00:19:08,510 --> 00:19:14,450
format for messages to the manager

00:19:11,660 --> 00:19:18,680
maybe tomorrow I will need to extend

00:19:14,450 --> 00:19:22,130
another provider I will I need a way to

00:19:18,680 --> 00:19:24,890
define a standard message for but I

00:19:22,130 --> 00:19:29,150
don't need to invent my is my standard

00:19:24,890 --> 00:19:31,990
because I can just use cloud lens cloud

00:19:29,150 --> 00:19:35,240
lens its specification from the CN CF

00:19:31,990 --> 00:19:37,700
it's a joint effort from the service

00:19:35,240 --> 00:19:41,150
working group of CN CF with the goal of

00:19:37,700 --> 00:19:44,690
standardize the having data in a common

00:19:41,150 --> 00:19:47,240
way it reached the stable version just

00:19:44,690 --> 00:19:49,580
some months ago and currently called

00:19:47,240 --> 00:19:52,250
rains even those been contributed by the

00:19:49,580 --> 00:19:54,740
public on Windows it's not very well

00:19:52,250 --> 00:19:58,670
spread was for widespread adopted and

00:19:54,740 --> 00:20:01,610
it's just supported by measure natively

00:19:58,670 --> 00:20:03,740
I almost sure that the more way or

00:20:01,610 --> 00:20:05,690
another provides a suite eventually

00:20:03,740 --> 00:20:07,820
support this model even though things

00:20:05,690 --> 00:20:10,580
are moving slowly than expected so

00:20:07,820 --> 00:20:12,500
before the digging more on the service

00:20:10,580 --> 00:20:15,160
concept applied to kubernetes I want to

00:20:12,500 --> 00:20:17,690
be sure that every one of us have the

00:20:15,160 --> 00:20:21,580
sure-sure the same overview of what

00:20:17,690 --> 00:20:24,800
kubernetes is it's a system to manage

00:20:21,580 --> 00:20:27,440
containers in a cluster has been created

00:20:24,800 --> 00:20:31,160
by Google based on an internal project

00:20:27,440 --> 00:20:33,560
called Borg and as we can see here on

00:20:31,160 --> 00:20:36,910
this diagram kubernetes is composite its

00:20:33,560 --> 00:20:39,380
composite by different components and

00:20:36,910 --> 00:20:41,390
all the components we see here defines

00:20:39,380 --> 00:20:46,640
what we call the control plane the

00:20:41,390 --> 00:20:49,710
control plane is a set of processes that

00:20:46,640 --> 00:20:51,780
on the right side run on Masand

00:20:49,710 --> 00:20:53,520
on the left side run on the masternodes

00:20:51,780 --> 00:20:56,190
on the right side on the worker nodes

00:20:53,520 --> 00:20:58,290
and the most important it's a cubelet

00:20:56,190 --> 00:21:01,560
it's an agent that run on each node of

00:20:58,290 --> 00:21:04,560
the cluster to make sure that containers

00:21:01,560 --> 00:21:06,840
are running in a pot and then we have

00:21:04,560 --> 00:21:08,490
two pots that are group on one or more

00:21:06,840 --> 00:21:13,080
containers with the shared storage

00:21:08,490 --> 00:21:16,230
network and specification to run it so

00:21:13,080 --> 00:21:19,440
why do we want to run serverless

00:21:16,230 --> 00:21:21,270
kind workers in kubernetes let's see how

00:21:19,440 --> 00:21:23,460
is the developer experience now on

00:21:21,270 --> 00:21:25,350
kubernetes we have to read the code we

00:21:23,460 --> 00:21:27,840
have to build a docker image we have to

00:21:25,350 --> 00:21:30,300
push the docker image to a registry we

00:21:27,840 --> 00:21:34,290
have to write a lot of ml manifest and

00:21:30,300 --> 00:21:36,660
knowing also all the P is around this

00:21:34,290 --> 00:21:38,400
manifest to deploy our application like

00:21:36,660 --> 00:21:41,970
the service deployment to the ingress

00:21:38,400 --> 00:21:44,580
and then we have to apply it to ship out

00:21:41,970 --> 00:21:47,460
to ship our application but what we want

00:21:44,580 --> 00:21:51,570
to do is to read the code and ship it as

00:21:47,460 --> 00:21:53,880
we can do with service so developing on

00:21:51,570 --> 00:21:55,830
kubernetes is not very easy it's not the

00:21:53,880 --> 00:22:00,270
right test for obstructions for n

00:21:55,830 --> 00:22:03,330
developer experience because there is

00:22:00,270 --> 00:22:05,250
much complexity to take out but it's a

00:22:03,330 --> 00:22:08,010
great platform to build a platform and

00:22:05,250 --> 00:22:09,420
service on top of it so let's imagine

00:22:08,010 --> 00:22:12,120
that we want to build a service

00:22:09,420 --> 00:22:14,070
development experience on kubernetes so

00:22:12,120 --> 00:22:16,470
we will need something to wake up

00:22:14,070 --> 00:22:18,540
workloads something to scale up and

00:22:16,470 --> 00:22:20,840
scale back to zero something to turn the

00:22:18,540 --> 00:22:23,220
source code into a container and

00:22:20,840 --> 00:22:25,500
romantic system with the configurable

00:22:23,220 --> 00:22:28,080
sources and subscriber we can choose to

00:22:25,500 --> 00:22:32,090
use K native key natively it's Google

00:22:28,080 --> 00:22:32,090
projects open source Google project

00:22:33,630 --> 00:22:38,039
it's a kubernetes based platform to

00:22:36,120 --> 00:22:41,130
build deploy manage modern service

00:22:38,039 --> 00:22:43,400
workers as I said it's a project by

00:22:41,130 --> 00:22:48,120
Google but has been contributed a lot

00:22:43,400 --> 00:22:52,410
from most of the big vendors like

00:22:48,120 --> 00:22:55,940
pivotal read at IBM and some and offers

00:22:52,410 --> 00:23:01,020
all the features we saw earlier for the

00:22:55,940 --> 00:23:03,840
modern Savalas platform so the building

00:23:01,020 --> 00:23:07,590
blocks of Kanan even kubernetes the

00:23:03,840 --> 00:23:09,240
bottom Plus service mesh and we have the

00:23:07,590 --> 00:23:11,039
primitives that there are three big

00:23:09,240 --> 00:23:14,250
components they are three different

00:23:11,039 --> 00:23:16,530
projects there is a cognitive serving

00:23:14,250 --> 00:23:19,350
candidate lamenting and finally Kennedy

00:23:16,530 --> 00:23:22,110
built Kennedy serving is the crucial

00:23:19,350 --> 00:23:24,150
part of the system it allows to scale up

00:23:22,110 --> 00:23:27,419
and scale back to zero of our

00:23:24,150 --> 00:23:29,429
applications it's it's basically what

00:23:27,419 --> 00:23:34,230
defines our application as a service

00:23:29,429 --> 00:23:36,539
function and thanks to the use of the

00:23:34,230 --> 00:23:40,320
service match it allows to have a

00:23:36,539 --> 00:23:41,940
fine-grained traffic routing 12

00:23:40,320 --> 00:23:45,630
automatic metrics and telemetry coming

00:23:41,940 --> 00:23:48,090
up from services and one of the most

00:23:45,630 --> 00:23:50,309
important features is the point in time

00:23:48,090 --> 00:23:52,770
snapshot of code the configuration that

00:23:50,309 --> 00:23:57,030
creates the regions that we can use to

00:23:52,770 --> 00:24:00,840
do advanced said deployment like cannery

00:23:57,030 --> 00:24:05,780
or to do a/b testing of our new

00:24:00,840 --> 00:24:09,840
functions 10 users this is how we define

00:24:05,780 --> 00:24:13,080
new service a new function on top of

00:24:09,840 --> 00:24:15,630
Kennedy and as you can see this very

00:24:13,080 --> 00:24:17,970
simple manifest abstract away all the

00:24:15,630 --> 00:24:21,289
complexity of kubernetes because we are

00:24:17,970 --> 00:24:24,450
defining us Kennedy's service where we

00:24:21,289 --> 00:24:28,049
define our containers some

00:24:24,450 --> 00:24:31,140
configurations and basically is we all

00:24:28,049 --> 00:24:32,419
we we need to do to deploy an

00:24:31,140 --> 00:24:36,109
application

00:24:32,419 --> 00:24:38,570
kubernetes if you know kubernetes bit

00:24:36,109 --> 00:24:40,999
you know that to express these kind of

00:24:38,570 --> 00:24:43,429
things we should use at least

00:24:40,999 --> 00:24:45,409
kübra deployment manifest which is much

00:24:43,429 --> 00:24:49,970
more complex than these are service and

00:24:45,409 --> 00:24:52,940
ingress then we have the kinetic event

00:24:49,970 --> 00:24:56,239
in component this is a complete venting

00:24:52,940 --> 00:24:59,869
system very complex under the hood but

00:24:56,239 --> 00:25:02,960
very easy to use very complete venting

00:24:59,869 --> 00:25:06,230
system for even driven apps and it's

00:25:02,960 --> 00:25:08,480
composed by two components which is

00:25:06,230 --> 00:25:09,919
which are the broker which is the

00:25:08,480 --> 00:25:12,220
components which receive all demands

00:25:09,919 --> 00:25:17,720
from the channels external channels like

00:25:12,220 --> 00:25:19,220
pub/sub messages and so on and the

00:25:17,720 --> 00:25:21,649
trigger which is the components which

00:25:19,220 --> 00:25:26,989
connects the broker to our application

00:25:21,649 --> 00:25:29,269
basically and of course it's everything

00:25:26,989 --> 00:25:33,080
all the messages are based on a cloud

00:25:29,269 --> 00:25:36,289
event spec this is how we define a

00:25:33,080 --> 00:25:39,499
trigger we are connecting the broker

00:25:36,289 --> 00:25:43,609
with the subscribers the subscribers are

00:25:39,499 --> 00:25:46,220
our services and as you can see from

00:25:43,609 --> 00:25:49,369
this very simple example the messages

00:25:46,220 --> 00:25:51,649
coming up in and out from the broker and

00:25:49,369 --> 00:25:55,159
the trigger just cognitive events

00:25:51,649 --> 00:25:57,859
messages then there is the there was the

00:25:55,159 --> 00:25:59,629
kinetic build components but has been

00:25:57,859 --> 00:26:02,090
deprecated in favor of tacked on

00:25:59,629 --> 00:26:06,019
pipelines which is a new project started

00:26:02,090 --> 00:26:07,930
by the Canadian source code and this

00:26:06,019 --> 00:26:11,860
project provides

00:26:07,930 --> 00:26:15,120
all the primitives to declare to create

00:26:11,860 --> 00:26:19,390
C is C D style pipelines using

00:26:15,120 --> 00:26:22,360
kubernetes or sources it can be the the

00:26:19,390 --> 00:26:25,650
docker image the containers sorry we're

00:26:22,360 --> 00:26:29,080
using a lot of different system like

00:26:25,650 --> 00:26:32,050
building Kanaka bit kit to build the

00:26:29,080 --> 00:26:34,030
images totally you're inside the

00:26:32,050 --> 00:26:35,950
kubernetes without external dependencies

00:26:34,030 --> 00:26:39,100
like docker or just using standard

00:26:35,950 --> 00:26:41,950
formats like beatbox and it's so poorly

00:26:39,100 --> 00:26:45,550
governed under the new foundation which

00:26:41,950 --> 00:26:50,080
is the CDF which is a new branch of the

00:26:45,550 --> 00:26:52,090
CF so what we can do we can Adam as a

00:26:50,080 --> 00:26:54,010
developer we can reuse it directly to

00:26:52,090 --> 00:26:56,770
deploy our stuff in a more streamlined

00:26:54,010 --> 00:27:00,000
with an RO kubernetes as an operator I

00:26:56,770 --> 00:27:04,150
can use it to put a level of abstraction

00:27:00,000 --> 00:27:07,570
between kubernetes and depth and as a

00:27:04,150 --> 00:27:10,920
platform architect I can use Kennedy was

00:27:07,570 --> 00:27:13,530
my framework to build my own path

00:27:10,920 --> 00:27:16,750
relying on the cognitive primitives

00:27:13,530 --> 00:27:19,030
let's see some of the cognitive native

00:27:16,750 --> 00:27:23,830
platforms out there and market and the

00:27:19,030 --> 00:27:28,720
most production one is the Google cloud

00:27:23,830 --> 00:27:30,880
run it's a fully kinetic service it's of

00:27:28,720 --> 00:27:36,120
course an event-driven architecture it's

00:27:30,880 --> 00:27:39,840
a mix of the container the service and

00:27:36,120 --> 00:27:42,420
the cloud ok native installation because

00:27:39,840 --> 00:27:44,640
it exists in dove in two versions there

00:27:42,420 --> 00:27:49,200
is cloud run for anthem that allows me

00:27:44,640 --> 00:27:51,090
to deploy fully manage the sort of

00:27:49,200 --> 00:27:54,690
manages can enter plus CC on my cluster

00:27:51,090 --> 00:27:59,070
or I can just rely on a cloud run which

00:27:54,690 --> 00:28:02,100
is sort of one container it's a

00:27:59,070 --> 00:28:07,350
container service platform and it's it

00:28:02,100 --> 00:28:10,170
exposes a kinetic sort API based on not

00:28:07,350 --> 00:28:11,790
on a kubernetes but on the Google

00:28:10,170 --> 00:28:14,280
infrastructure you can find more

00:28:11,790 --> 00:28:19,100
informations on the link at bottom this

00:28:14,280 --> 00:28:21,480
light then there are other two platforms

00:28:19,100 --> 00:28:25,920
the one from Reducto passive

00:28:21,480 --> 00:28:28,800
surveillance which became GA just some

00:28:25,920 --> 00:28:31,230
months ago and it's used all the

00:28:28,800 --> 00:28:33,630
connective components and then another

00:28:31,230 --> 00:28:36,890
one that it supports mentioning its

00:28:33,630 --> 00:28:40,680
pivotal reef which use some of the

00:28:36,890 --> 00:28:43,700
community components apart the Builder

00:28:40,680 --> 00:28:47,160
part which is based on custom builder

00:28:43,700 --> 00:28:50,250
there are of course other kubernetes

00:28:47,160 --> 00:28:52,920
native platforms which are not based on

00:28:50,250 --> 00:28:57,450
canadian but but just on the kubernetes

00:28:52,920 --> 00:29:01,140
api like kennedy i will show you some of

00:28:57,450 --> 00:29:01,800
them the first one i want to show you is

00:29:01,140 --> 00:29:05,790
Queda

00:29:01,800 --> 00:29:09,660
that its acronym for cooper 97 driven of

00:29:05,790 --> 00:29:13,470
the scaling and like a native this is a

00:29:09,660 --> 00:29:15,750
project that one that not aim to cover

00:29:13,470 --> 00:29:18,390
all the aspects or service platform but

00:29:15,750 --> 00:29:22,080
just a specific part which is the heaven

00:29:18,390 --> 00:29:24,330
driven computing model it's open so C&C

00:29:22,080 --> 00:29:27,930
f sandbox project from Microsoft and

00:29:24,330 --> 00:29:30,780
reduct and it's basically made of three

00:29:27,930 --> 00:29:33,870
components the first one is the custom

00:29:30,780 --> 00:29:37,020
metric server for the kubernetes HPA the

00:29:33,870 --> 00:29:39,930
second one is the category older which

00:29:37,020 --> 00:29:42,960
looks inside the class

00:29:39,930 --> 00:29:45,960
on the skate objects which are the

00:29:42,960 --> 00:29:50,280
objects that connect the external events

00:29:45,960 --> 00:29:52,680
to the metric server and it's in charge

00:29:50,280 --> 00:29:56,760
of the scaling from zero to one or vice

00:29:52,680 --> 00:29:58,860
versa and from 1 to n instead remains in

00:29:56,760 --> 00:30:02,150
charge of the standard it's HPA

00:29:58,860 --> 00:30:05,670
basically it covers just what kubernetes

00:30:02,150 --> 00:30:09,330
doesn't do now then there are the

00:30:05,670 --> 00:30:11,130
scalars which are the the connection

00:30:09,330 --> 00:30:14,250
with the external world with the

00:30:11,130 --> 00:30:16,679
external services that though all the

00:30:14,250 --> 00:30:22,320
service is scheduled to emit events that

00:30:16,679 --> 00:30:24,870
with Kida we can use it to spin up or

00:30:22,320 --> 00:30:29,400
spin down the services and basically it

00:30:24,870 --> 00:30:34,590
what the controller uses for managing

00:30:29,400 --> 00:30:39,120
the the scaling part then there are

00:30:34,590 --> 00:30:42,570
other platforms more simple and smaller

00:30:39,120 --> 00:30:45,870
platforms then I can a Dvorak ADA that I

00:30:42,570 --> 00:30:48,510
collected the arena list the most

00:30:45,870 --> 00:30:52,110
popular one like a cue list from bitNami

00:30:48,510 --> 00:30:57,390
open fast and open up a shop and whisk

00:30:52,110 --> 00:30:59,850
fishin and exeter and they share some

00:30:57,390 --> 00:31:03,780
common aspects like they are open source

00:30:59,850 --> 00:31:07,380
they have the very flexible in terms of

00:31:03,780 --> 00:31:11,370
language runtimes they have also a

00:31:07,380 --> 00:31:14,700
custom CLI to manage the lifecycle of

00:31:11,370 --> 00:31:17,400
the platform which is very important too

00:31:14,700 --> 00:31:19,980
for several platforms because when I

00:31:17,400 --> 00:31:21,540
want to build my source code into a

00:31:19,980 --> 00:31:23,880
container I don't want to deal with a

00:31:21,540 --> 00:31:26,760
lot of things I just want to do

00:31:23,880 --> 00:31:30,030
everything from one common line and that

00:31:26,760 --> 00:31:32,580
they are written go so if you

00:31:30,030 --> 00:31:34,740
if you're a mac spell go expert that you

00:31:32,580 --> 00:31:37,220
can easily extend it that's the same

00:31:34,740 --> 00:31:40,280
language of kubernetes of course and

00:31:37,220 --> 00:31:43,140
most of them Apache open whisk is

00:31:40,280 --> 00:31:45,300
implemented in Scala and usually they

00:31:43,140 --> 00:31:48,990
are bigoted by big vendors this is a

00:31:45,300 --> 00:31:51,960
class because you know when the project

00:31:48,990 --> 00:31:54,960
is packaged by the big vendors it's more

00:31:51,960 --> 00:32:00,630
unusual that they can disappear from one

00:31:54,960 --> 00:32:02,940
day to another another very interesting

00:32:00,630 --> 00:32:05,070
project that should be mentioned here is

00:32:02,940 --> 00:32:08,460
virtual cubelet we need some open source

00:32:05,070 --> 00:32:11,790
kubernetes cubelet implementation that

00:32:08,460 --> 00:32:18,660
masquerades as a real cubelet this

00:32:11,790 --> 00:32:22,350
allows double doors to two in introduced

00:32:18,660 --> 00:32:26,780
inside the standard kubernetes class or

00:32:22,350 --> 00:32:31,770
an infinite capacity computing capacity

00:32:26,780 --> 00:32:34,580
that cloud vendors offers so we go back

00:32:31,770 --> 00:32:39,030
to the if we go back to the kubernetes

00:32:34,580 --> 00:32:41,730
cluster dialer we see that we have notes

00:32:39,030 --> 00:32:45,270
with the Hewlett running but but we can

00:32:41,730 --> 00:32:48,000
replace it we can add another new

00:32:45,270 --> 00:32:50,610
virtual node using theater cubelet that

00:32:48,000 --> 00:32:53,730
the for kubernetes will be just the

00:32:50,610 --> 00:32:57,320
other notes but this one just urges

00:32:53,730 --> 00:33:02,150
eight surface and not but on the

00:32:57,320 --> 00:33:06,300
underlying on its online API sites using

00:33:02,150 --> 00:33:10,110
he's using external services like as

00:33:06,300 --> 00:33:13,410
your KTAR services for example like AWS

00:33:10,110 --> 00:33:16,050
forget i babakov a CI or a shekhar

00:33:13,410 --> 00:33:18,540
Pramod or you can implement your own

00:33:16,050 --> 00:33:20,520
custom provider this is very cool

00:33:18,540 --> 00:33:23,150
because basically we don't need to

00:33:20,520 --> 00:33:26,610
change anything on our app we can adjust

00:33:23,150 --> 00:33:29,610
deploy our pods on the infrastructure

00:33:26,610 --> 00:33:31,680
and the for kubernetes the real know

00:33:29,610 --> 00:33:34,310
that we're the ones will be basically

00:33:31,680 --> 00:33:37,230
the same we are the infinite scalability

00:33:34,310 --> 00:33:39,690
capacity capacity or noir a cluster of

00:33:37,230 --> 00:33:40,350
course there are some quicks but it's a

00:33:39,690 --> 00:33:45,809
very

00:33:40,350 --> 00:33:49,169
project so several so kubernetes has a

00:33:45,809 --> 00:33:52,770
lot of benefits because we can be more

00:33:49,169 --> 00:33:56,370
much more flexible than standard service

00:33:52,770 --> 00:34:00,750
on time we can deploy containers instead

00:33:56,370 --> 00:34:04,530
just rely on the runtimes we can run it

00:34:00,750 --> 00:34:08,010
on multi hybrid cloud on my laptop and

00:34:04,530 --> 00:34:12,629
if I have some strict requirements based

00:34:08,010 --> 00:34:15,119
on policies on my workloads and I can I

00:34:12,629 --> 00:34:17,909
cannot deploy the workloads on several

00:34:15,119 --> 00:34:21,480
platforms I can have that as well on my

00:34:17,909 --> 00:34:23,850
kubernetes cluster the same benefits of

00:34:21,480 --> 00:34:26,609
several s computing model using

00:34:23,850 --> 00:34:29,340
kubernetes on my I breed a private cloud

00:34:26,609 --> 00:34:32,490
I can mix and match stateless instead

00:34:29,340 --> 00:34:35,369
for workloads that this is another of

00:34:32,490 --> 00:34:39,840
the benefits of using kubernetes and I

00:34:35,369 --> 00:34:42,590
can of course extend as much as I want

00:34:39,840 --> 00:34:44,639
because I using kubernetes and I

00:34:42,590 --> 00:34:49,460
introduce a better development

00:34:44,639 --> 00:34:52,740
experience for the kubernetes developers

00:34:49,460 --> 00:34:55,859
one of the advice I have for you to

00:34:52,740 --> 00:34:59,670
finish is to use this UN staff service

00:34:55,859 --> 00:35:02,580
landscape to understand the to monitor

00:34:59,670 --> 00:35:04,730
the new new services new tools and

00:35:02,580 --> 00:35:04,730
frameworks

00:35:06,060 --> 00:35:13,840
that finish under down the umbrella of

00:35:09,510 --> 00:35:16,690
surveillance platforms and to finish I

00:35:13,840 --> 00:35:18,520
really think that in some point in the

00:35:16,690 --> 00:35:22,090
future service computing model will be

00:35:18,520 --> 00:35:24,490
the predominant one on kubernetes and we

00:35:22,090 --> 00:35:27,670
will be able to ask to kubernetes to

00:35:24,490 --> 00:35:29,740
just run the code as we do we can do

00:35:27,670 --> 00:35:32,380
with the service platforms with all the

00:35:29,740 --> 00:35:34,420
benefits of using kubernetes that's all

00:35:32,380 --> 00:35:37,720
thanks a lot for your attention I hope

00:35:34,420 --> 00:35:39,760
you enjoyed this presentation and for

00:35:37,720 --> 00:35:43,590
any questions I'm available on the

00:35:39,760 --> 00:35:43,590
channel thank you so much guys

00:35:44,080 --> 00:35:54,829
[Music]

00:35:54,960 --> 00:36:00,570
you

00:35:56,020 --> 00:36:00,570

YouTube URL: https://www.youtube.com/watch?v=fmYLyR0eq1s


