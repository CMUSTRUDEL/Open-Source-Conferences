Title: stackconf online 2020 | Databases on Kubernetes: Why you should care by Denis Rosa
Publication date: 2020-06-29
Playlist: stackconf online 2020
Description: 
	Developers always expected databases to work out-of-the-box, but historically it is the exact opposite.

With the rise of Kubernetes StatefullSets and CRDs, we started thinking about running databases on it. But why should I do that in the first place? How hard is it? Which are the challenges? Is it production already? All those questions will be answered during a live demo where we will deploy a database, deploy an operator, fail nodes, scale up and down with nearly no manual intervention.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:11,189
[Music]

00:00:11,480 --> 00:00:17,550
welcome to this session talking about

00:00:14,520 --> 00:00:20,369
databases on kubernetes my name is

00:00:17,550 --> 00:00:23,189
Dennis I work as a developer advocate at

00:00:20,369 --> 00:00:24,750
touch base for those who never heard

00:00:23,189 --> 00:00:28,109
about Couchbase in the past

00:00:24,750 --> 00:00:32,279
gosh base is one of the most famous

00:00:28,109 --> 00:00:35,370
open-source databases nowadays and it is

00:00:32,279 --> 00:00:38,820
fairly similar to MongoDB but designed

00:00:35,370 --> 00:00:41,519
to scale so the main use case for cash

00:00:38,820 --> 00:00:46,469
base is its performance at scale would

00:00:41,519 --> 00:00:49,170
say as you might have heard coffee in a

00:00:46,469 --> 00:00:54,840
little bit today so I'm sorry if you see

00:00:49,170 --> 00:00:59,629
me coughing along this talk and I would

00:00:54,840 --> 00:01:02,579
like to start with a small tip for you

00:00:59,629 --> 00:01:06,530
whenever you are reading an article line

00:01:02,579 --> 00:01:11,880
if the article starts with a question

00:01:06,530 --> 00:01:18,689
the answer for for this question is in

00:01:11,880 --> 00:01:23,990
80% of the cases no let's see here a

00:01:18,689 --> 00:01:28,110
real use case a real example here and

00:01:23,990 --> 00:01:30,780
2016 pretty much all articles talking

00:01:28,110 --> 00:01:33,200
about if you should run your database in

00:01:30,780 --> 00:01:36,689
carbonate you know on docker actually

00:01:33,200 --> 00:01:39,810
they were all questions you can see

00:01:36,689 --> 00:01:42,299
those are all real article see should

00:01:39,810 --> 00:01:46,110
you run your database in docker or it's

00:01:42,299 --> 00:01:49,350
not good for your database and those are

00:01:46,110 --> 00:01:52,950
all articles full very trustful sources

00:01:49,350 --> 00:01:57,470
and the conclusion here is no you should

00:01:52,950 --> 00:02:01,290
not run your database on in a container

00:01:57,470 --> 00:02:04,829
if we back then

00:02:01,290 --> 00:02:08,940
the main argument was that containers

00:02:04,829 --> 00:02:11,459
were designed to be stateless and yeah I

00:02:08,940 --> 00:02:17,640
fully agree with that yeah containers

00:02:11,459 --> 00:02:21,599
are in fact stateless however if we fast

00:02:17,640 --> 00:02:25,920
forward to 2020 in fact

00:02:21,599 --> 00:02:28,560
every facet afford to even late a 2018

00:02:25,920 --> 00:02:32,939
you see that the articles are not

00:02:28,560 --> 00:02:35,489
questions anymore they are all just

00:02:32,939 --> 00:02:37,890
normal phrases and you can see we even

00:02:35,489 --> 00:02:40,170
have something like local database with

00:02:37,890 --> 00:02:46,680
doctor in five minutes or run a database

00:02:40,170 --> 00:02:50,730
in turkette scale so it's kind of

00:02:46,680 --> 00:02:58,430
destined to see that just like two years

00:02:50,730 --> 00:03:02,669
the we completely change our mind and

00:02:58,430 --> 00:03:06,060
the natural question is what have

00:03:02,669 --> 00:03:11,400
changed why in just this short amount of

00:03:06,060 --> 00:03:15,180
time we we now agree that hey yeah guess

00:03:11,400 --> 00:03:19,620
what already database on on containers

00:03:15,180 --> 00:03:23,489
are actually a good thing there's a rush

00:03:19,620 --> 00:03:25,769
or topic so a very long topic but as I

00:03:23,489 --> 00:03:27,750
don't have a lot of time here I would

00:03:25,769 --> 00:03:29,760
like to highlight just four things right

00:03:27,750 --> 00:03:34,139
there figures are important one is

00:03:29,760 --> 00:03:38,250
production great images so now pretty

00:03:34,139 --> 00:03:40,319
much every single database provider they

00:03:38,250 --> 00:03:43,379
have an official image that is

00:03:40,319 --> 00:03:45,840
production ready and back then

00:03:43,379 --> 00:03:49,940
developer who has just tried to run

00:03:45,840 --> 00:03:49,940
little based on containers by themselves

00:03:51,260 --> 00:03:57,419
it's of course far easier to set up and

00:03:55,470 --> 00:04:02,669
configure a database on in a container

00:03:57,419 --> 00:04:06,269
versus on bare metal or even in a in a

00:04:02,669 --> 00:04:10,109
VM you can separate storage from compute

00:04:06,269 --> 00:04:13,769
and this is really important for big

00:04:10,109 --> 00:04:15,120
data in general so I can increase the

00:04:13,769 --> 00:04:19,829
disk size for instance without

00:04:15,120 --> 00:04:22,079
restarting the database and now we also

00:04:19,829 --> 00:04:25,259
have two British little sets and

00:04:22,079 --> 00:04:31,050
operators which is the main topic of

00:04:25,259 --> 00:04:32,520
this talk so one opposed with databases

00:04:31,050 --> 00:04:34,860
you know is that there are highly

00:04:32,520 --> 00:04:37,439
configurable pieces of software

00:04:34,860 --> 00:04:40,590
and ideally we should generate a new

00:04:37,439 --> 00:04:44,129
image whenever we change a parameter in

00:04:40,590 --> 00:04:48,439
the in the database right we should

00:04:44,129 --> 00:04:48,439
generate a new image of the container

00:04:51,319 --> 00:05:00,449
and the problem is this kind of

00:04:56,879 --> 00:05:04,169
generates you image image sprouts

00:05:00,449 --> 00:05:06,150
because hey you have to keep generating

00:05:04,169 --> 00:05:09,029
every time you optimize your database

00:05:06,150 --> 00:05:11,580
you have to Church a new image and again

00:05:09,029 --> 00:05:13,860
it kind of makes difficult to ensure

00:05:11,580 --> 00:05:20,759
that every single database isn't the

00:05:13,860 --> 00:05:22,319
same version and and also restarting

00:05:20,759 --> 00:05:22,979
like stopping a container and start

00:05:22,319 --> 00:05:24,900
again

00:05:22,979 --> 00:05:28,379
might be a little bit problematic in

00:05:24,900 --> 00:05:32,430
some users cases of course we can solve

00:05:28,379 --> 00:05:37,979
that with some configuration management

00:05:32,430 --> 00:05:43,469
tools but hey we are in 2020 right if

00:05:37,979 --> 00:05:45,960
this is such a mandatory solution to

00:05:43,469 --> 00:05:48,240
solve the issue with managing containers

00:05:45,960 --> 00:05:55,500
why this is not part of the solution

00:05:48,240 --> 00:05:57,810
itself so that's why in communities we

00:05:55,500 --> 00:06:00,690
can specify one of the things Inc

00:05:57,810 --> 00:06:05,219
abilities you know is that we can it is

00:06:00,690 --> 00:06:08,279
very extensible and we can define custom

00:06:05,219 --> 00:06:11,250
resource efficient which means that hey

00:06:08,279 --> 00:06:21,779
I can specify my own type inside

00:06:11,250 --> 00:06:28,680
colleges in this case here I can I can

00:06:21,779 --> 00:06:32,219
specify cash based cluster and this and

00:06:28,680 --> 00:06:36,020
this in this type here I could specify

00:06:32,219 --> 00:06:36,020
the whole configuration of the database

00:06:36,589 --> 00:06:44,520
and then CDs are just okay with 30s I'm

00:06:42,509 --> 00:06:46,930
just create marrow type and then I'd

00:06:44,520 --> 00:06:50,410
adding a new type like

00:06:46,930 --> 00:06:52,360
the solid before here and this

00:06:50,410 --> 00:06:55,120
essentially means okay I'm just storing

00:06:52,360 --> 00:06:58,600
the configuration of my database inside

00:06:55,120 --> 00:07:01,120
kÃ¼bra inches right there's nothing so

00:06:58,600 --> 00:07:07,199
far that nothing we have not have

00:07:01,120 --> 00:07:10,780
changed however with kubernetes we can

00:07:07,199 --> 00:07:13,479
create something called operators so

00:07:10,780 --> 00:07:16,479
operators are pieces of software that

00:07:13,479 --> 00:07:19,900
can deploy inside communities to extend

00:07:16,479 --> 00:07:23,860
its functionality for instance I can

00:07:19,900 --> 00:07:26,349
listen to changes in a in a

00:07:23,860 --> 00:07:29,470
configuration file so if I have created

00:07:26,349 --> 00:07:33,669
my my site coach with cluster and then I

00:07:29,470 --> 00:07:39,099
have inserted a new cut base cluster

00:07:33,669 --> 00:07:41,020
configuration my application my operator

00:07:39,099 --> 00:07:44,740
can listen to this event so you can see

00:07:41,020 --> 00:07:47,919
okay whenever I add a new pod whenever a

00:07:44,740 --> 00:07:50,110
pod is updated so you can listen to this

00:07:47,919 --> 00:07:53,289
event it takes some actions with it and

00:07:50,110 --> 00:07:56,530
this is really powerful because then I

00:07:53,289 --> 00:07:58,810
can for users whenever you research a

00:07:56,530 --> 00:08:01,320
new countries closer configuration for

00:07:58,810 --> 00:08:04,720
instance I can automatically

00:08:01,320 --> 00:08:08,080
programmatically create a new culture

00:08:04,720 --> 00:08:10,960
based closer for you and that's also

00:08:08,080 --> 00:08:13,599
valid if you have Mexico have

00:08:10,960 --> 00:08:17,139
elasticsearch whatever piece of software

00:08:13,599 --> 00:08:19,479
you can automate the deployment of the

00:08:17,139 --> 00:08:22,840
cluster by deploying an application that

00:08:19,479 --> 00:08:24,130
can listen to a configuration file can

00:08:22,840 --> 00:08:27,130
listen to change in this configuration

00:08:24,130 --> 00:08:28,840
file as well so even though even if I

00:08:27,130 --> 00:08:31,120
come back later and change this

00:08:28,840 --> 00:08:33,820
configuration file let's say I want to

00:08:31,120 --> 00:08:37,870
instead of having like three nodes I

00:08:33,820 --> 00:08:43,630
want to have for the operator can listen

00:08:37,870 --> 00:08:46,540
to this event and and take the actions

00:08:43,630 --> 00:08:51,850
necessary to scale a scale out from

00:08:46,540 --> 00:08:54,310
three to four and because of this we can

00:08:51,850 --> 00:08:56,730
also insert because operators are

00:08:54,310 --> 00:09:00,370
default by you can invoke the operator

00:08:56,730 --> 00:09:06,130
by yourself you can actually insert

00:09:00,370 --> 00:09:08,950
a lot of knowledge there so okay SK it's

00:09:06,130 --> 00:09:12,700
coming out database there's some

00:09:08,950 --> 00:09:14,830
standard processor you can follow or and

00:09:12,700 --> 00:09:19,450
you can code that or if something fails

00:09:14,830 --> 00:09:22,029
you can see that okay there is a fail

00:09:19,450 --> 00:09:24,580
here my node and we can code what's

00:09:22,029 --> 00:09:26,110
distant behavior in what are this out

00:09:24,580 --> 00:09:28,290
the checks that you have to go through

00:09:26,110 --> 00:09:29,560
in order to bring this closer back to

00:09:28,290 --> 00:09:33,910
health

00:09:29,560 --> 00:09:39,100
a healthy state and with the advantage

00:09:33,910 --> 00:09:43,690
of this is that we can actually in the

00:09:39,100 --> 00:09:46,470
case of databases we can provide you a

00:09:43,690 --> 00:09:49,570
database as a staff it's like solution

00:09:46,470 --> 00:09:53,110
inside the inside your cluster so it is

00:09:49,570 --> 00:09:55,180
a really something Claudette Gnostic so

00:09:53,110 --> 00:09:59,770
with that I would like to show exactly

00:09:55,180 --> 00:10:07,959
that happening live here so first of all

00:09:59,770 --> 00:10:13,420
I have here I have cocoa true get notes

00:10:07,959 --> 00:10:18,880
I have three notes running on either

00:10:13,420 --> 00:10:23,830
place here and then what I want to do is

00:10:18,880 --> 00:10:28,810
to first I want to control create - F

00:10:23,830 --> 00:10:31,029
secret which is the password that we're

00:10:28,810 --> 00:10:34,630
going to use to to log into my database

00:10:31,029 --> 00:10:41,980
and then I can read coop control create

00:10:34,630 --> 00:10:43,630
- F Couchbase cluster okay so now I'm

00:10:41,980 --> 00:10:46,900
the point coach base cluster here

00:10:43,630 --> 00:10:54,190
let me also run here control create

00:10:46,900 --> 00:10:56,950
months F spring boot secret okay and now

00:10:54,190 --> 00:10:58,870
I can go back here to my file and show

00:10:56,950 --> 00:11:03,250
you the content of this coach bit closer

00:10:58,870 --> 00:11:07,870
so in this yellow 5 here already creates

00:11:03,250 --> 00:11:10,120
I created countries closer division a

00:11:07,870 --> 00:11:11,680
coastal research division and then I'm

00:11:10,120 --> 00:11:13,710
searching a new culture based type here

00:11:11,680 --> 00:11:17,340
copies cluster type

00:11:13,710 --> 00:11:19,710
file and then here in this file I have a

00:11:17,340 --> 00:11:22,620
lot of information about the kind of

00:11:19,710 --> 00:11:24,390
cluster I want to deploy so I have I'm

00:11:22,620 --> 00:11:26,280
suicide they hey I want cash based

00:11:24,390 --> 00:11:29,820
enterprise here

00:11:26,280 --> 00:11:33,330
I want this bucket called cash be simple

00:11:29,820 --> 00:11:37,230
so a bucket is something is very similar

00:11:33,330 --> 00:11:40,310
to a schema I miss finding I want three

00:11:37,230 --> 00:11:42,990
replicas and then I have three servers

00:11:40,310 --> 00:11:46,700
so it will creates a cluster of three

00:11:42,990 --> 00:11:49,440
nodes so when I insert this file here

00:11:46,700 --> 00:11:52,200
the cash base of perimeter which is

00:11:49,440 --> 00:11:52,800
already running so you can run we can

00:11:52,200 --> 00:12:00,270
run here

00:11:52,800 --> 00:12:02,910
car base coupe control get pots you see

00:12:00,270 --> 00:12:07,580
that the operator is already ready here

00:12:02,910 --> 00:12:11,340
right I deployed the operator constantly

00:12:07,580 --> 00:12:13,680
there's none not anything special but

00:12:11,340 --> 00:12:16,580
the operator is just here that operate

00:12:13,680 --> 00:12:19,440
the file it is just IMO file that you

00:12:16,580 --> 00:12:22,230
the vendor will provide you there is a

00:12:19,440 --> 00:12:24,480
lot of open source solutions as well so

00:12:22,230 --> 00:12:27,420
you just in summary you just or use a

00:12:24,480 --> 00:12:31,980
home or you just a low the mo file and

00:12:27,420 --> 00:12:37,080
apply in your cluster in this case I'm

00:12:31,980 --> 00:12:43,620
applying the cash base coach place of

00:12:37,080 --> 00:12:49,500
operator is 1 1 / namespace and operator

00:12:43,620 --> 00:12:52,350
itself is stateless so it can employ it

00:12:49,500 --> 00:12:56,040
can all this state is stored on Nate t

00:12:52,350 --> 00:12:59,340
CD you can see here that ok I already

00:12:56,040 --> 00:13:01,350
have my cost already and now what I can

00:12:59,340 --> 00:13:02,910
do is let's also the player application

00:13:01,350 --> 00:13:05,790
here have a very simple spring boot

00:13:02,910 --> 00:13:09,420
application that will insert data inside

00:13:05,790 --> 00:13:14,090
the database so I can run something like

00:13:09,420 --> 00:13:17,480
coupon TRO create minus F and then

00:13:14,090 --> 00:13:17,480
spring boot app

00:13:20,810 --> 00:13:30,020
okay and now hopefully if I for this

00:13:24,450 --> 00:13:37,980
port to my machine I can come here to

00:13:30,020 --> 00:13:46,440
localhost in and anyone administrator

00:13:37,980 --> 00:13:48,510
password and we can see that first we

00:13:46,440 --> 00:13:54,810
have three notes that's exactly what I

00:13:48,510 --> 00:14:00,210
have specified here in the Koch base cog

00:13:54,810 --> 00:14:03,960
base cluster here and second if you go

00:14:00,210 --> 00:14:08,310
to documents oops

00:14:03,960 --> 00:14:11,400
buckets very simple statistics you see

00:14:08,310 --> 00:14:15,300
that okay we already have some data's

00:14:11,400 --> 00:14:17,220
being certain here so the first thing I

00:14:15,300 --> 00:14:19,440
want to do is to come here to buckets

00:14:17,220 --> 00:14:23,810
and I want to add a new bucket so let's

00:14:19,440 --> 00:14:27,840
say I add a new bucket called test right

00:14:23,810 --> 00:14:31,190
we wait for the for the bucket to be

00:14:27,840 --> 00:14:35,520
ready and it just disappeared why

00:14:31,190 --> 00:14:37,680
because here the yellow file is the

00:14:35,520 --> 00:14:41,370
single source of truth so when I try to

00:14:37,680 --> 00:14:43,650
create a bucket it will match with the

00:14:41,370 --> 00:14:45,390
configuration say hey there is a new

00:14:43,650 --> 00:14:48,090
color a bucket here called test that

00:14:45,390 --> 00:14:52,560
it's not specified here so the operator

00:14:48,090 --> 00:14:54,810
wrote back there the operation and and

00:14:52,560 --> 00:14:56,910
this is really powerful because it

00:14:54,810 --> 00:15:01,770
guaranteed that even if someone tries to

00:14:56,910 --> 00:15:03,900
change something here the operator will

00:15:01,770 --> 00:15:07,970
roll back the configuration to be

00:15:03,900 --> 00:15:07,970
exactly what we have defined this file

00:15:08,630 --> 00:15:16,530
of course this I have a mission here but

00:15:12,990 --> 00:15:18,750
this is the Koch based web console so

00:15:16,530 --> 00:15:21,270
where do we start couch base that's

00:15:18,750 --> 00:15:27,720
their work oh so you get to administrate

00:15:21,270 --> 00:15:31,660
the database and now that we all have

00:15:27,720 --> 00:15:35,470
our cluster ready and everything is fine

00:15:31,660 --> 00:15:38,760
let's try something crazy here so we

00:15:35,470 --> 00:15:46,300
have three notes running right so here

00:15:38,760 --> 00:15:47,170
go control get BOTS okay let's do

00:15:46,300 --> 00:15:50,920
something crazy

00:15:47,170 --> 00:15:57,030
I want to cube one of the notes so I

00:15:50,920 --> 00:16:10,300
want to I will read patrol delete pod

00:15:57,030 --> 00:16:12,100
see be example - here okay so you can

00:16:10,300 --> 00:16:18,100
see that cash business mostly recognize

00:16:12,100 --> 00:16:20,380
that okay we lost this note and then it

00:16:18,100 --> 00:16:22,300
will wait for a few seconds just to be

00:16:20,380 --> 00:16:25,200
sure that okay I really lost this note

00:16:22,300 --> 00:16:27,430
and then all this real responsibly

00:16:25,200 --> 00:16:29,670
unresponsive because sometimes just a

00:16:27,430 --> 00:16:32,830
matter of okay it Aries we had some

00:16:29,670 --> 00:16:35,080
hiccup with network so it will wait a

00:16:32,830 --> 00:16:37,330
few seconds and say hey you know yeah we

00:16:35,080 --> 00:16:42,670
really lost this note let's start to

00:16:37,330 --> 00:16:45,340
recover so the first thing is Cuban it

00:16:42,670 --> 00:16:48,880
is now that we have two notes Cabrini's

00:16:45,340 --> 00:16:51,190
will will in in our configuration file

00:16:48,880 --> 00:16:53,290
we have we have this fight here that we

00:16:51,190 --> 00:16:55,150
need tree so communities will

00:16:53,290 --> 00:16:57,280
automatically bring this note back of

00:16:55,150 --> 00:16:59,350
course but hey we are dealing with a

00:16:57,280 --> 00:17:01,900
state application right it's not just a

00:16:59,350 --> 00:17:04,990
matter of bringing this application back

00:17:01,900 --> 00:17:06,610
we still need to join this database to

00:17:04,990 --> 00:17:08,620
the cluster and the trigger data

00:17:06,610 --> 00:17:11,110
rebalancing and that's exactly what's

00:17:08,620 --> 00:17:14,230
happening here and now so Cabrini's

00:17:11,110 --> 00:17:19,650
bought create a new node called CB

00:17:14,230 --> 00:17:22,510
example 0 0 tree and then the operator

00:17:19,650 --> 00:17:26,410
hardly heard event that okay there is a

00:17:22,510 --> 00:17:28,480
new couch base node here let me call the

00:17:26,410 --> 00:17:31,000
audio PI's to join just no to this

00:17:28,480 --> 00:17:33,430
cluster and then rebounds data so

00:17:31,000 --> 00:17:36,010
rebalancing is just a process where you

00:17:33,430 --> 00:17:39,330
copy some of the date of those two nodes

00:17:36,010 --> 00:17:42,180
to this to the third one

00:17:39,330 --> 00:17:45,100
remember that we have specified here

00:17:42,180 --> 00:17:48,310
that we want a tree

00:17:45,100 --> 00:17:52,650
because so we have three cups of the day

00:17:48,310 --> 00:17:55,660
so even if I lose two notes is the ice -

00:17:52,650 --> 00:17:59,470
I'm not losing any data at all because I

00:17:55,660 --> 00:18:02,280
have three copies and in this case when

00:17:59,470 --> 00:18:05,380
I lose a note I'm just the other two

00:18:02,280 --> 00:18:08,380
become responsible for the data that was

00:18:05,380 --> 00:18:10,690
in the tree in the the CBA examples are

00:18:08,380 --> 00:18:13,600
zero - actually and then now that I

00:18:10,690 --> 00:18:16,560
added a new note I'm just copying some

00:18:13,600 --> 00:18:20,020
of the data of the sunos to the new one

00:18:16,560 --> 00:18:23,140
we're off to highlight here that I'm

00:18:20,020 --> 00:18:25,930
using a ephemeral storage so in this

00:18:23,140 --> 00:18:27,820
example and then with the ephemeral

00:18:25,930 --> 00:18:31,800
storage basically when a cue a note I

00:18:27,820 --> 00:18:34,090
lose all the data in it if I was using

00:18:31,800 --> 00:18:36,520
local perceives its origin or remote

00:18:34,090 --> 00:18:39,220
persistent storage it will be far

00:18:36,520 --> 00:18:41,620
simpler to recover because now I only

00:18:39,220 --> 00:18:44,650
have to start a new pod and attach the

00:18:41,620 --> 00:18:47,890
pod to the same disk another thing that

00:18:44,650 --> 00:18:50,800
I can do here as well is to let's say

00:18:47,890 --> 00:18:53,170
let's scale a scale out to your database

00:18:50,800 --> 00:18:54,910
so instead of tree I with 4 nodes and

00:18:53,170 --> 00:19:00,210
what I have to do is just to come back

00:18:54,910 --> 00:19:05,650
here say come control replace - F

00:19:00,210 --> 00:19:08,710
Couchbase cluster and then okay now we

00:19:05,650 --> 00:19:11,890
are scaling up our database we can run

00:19:08,710 --> 00:19:14,470
here coupon throw get quads and you

00:19:11,890 --> 00:19:18,580
probably will see that in a few seconds

00:19:14,470 --> 00:19:25,960
we should have C be example zero zero

00:19:18,580 --> 00:19:27,580
four here and then it will do the same

00:19:25,960 --> 00:19:29,500
thing join node to the cluster and

00:19:27,580 --> 00:19:32,200
triggered a terrible scene and make this

00:19:29,500 --> 00:19:35,860
not available and notice that we are we

00:19:32,200 --> 00:19:40,420
are doing this while our application is

00:19:35,860 --> 00:19:42,640
live so the application was like the

00:19:40,420 --> 00:19:45,910
whole time and we recover we scale up

00:19:42,640 --> 00:19:48,670
and we can scale now if we need to so we

00:19:45,910 --> 00:19:50,920
can come back here and say hey I want

00:19:48,670 --> 00:19:53,440
three now or I want to that's totally

00:19:50,920 --> 00:19:55,480
fine and the operator knows that okay

00:19:53,440 --> 00:19:58,440
array have some process running let me

00:19:55,480 --> 00:20:01,290
wait for this process to finish

00:19:58,440 --> 00:20:04,580
so I can started the second request so

00:20:01,290 --> 00:20:07,020
you can apply configuration after

00:20:04,580 --> 00:20:09,530
configuration and the operator will know

00:20:07,020 --> 00:20:11,730
exactly the process that has to follow

00:20:09,530 --> 00:20:14,090
there are a bunch of other things we can

00:20:11,730 --> 00:20:17,340
do here as well so let's say I want to

00:20:14,090 --> 00:20:18,930
hear mo uncocks b6 and let's say I want

00:20:17,340 --> 00:20:23,520
to upgrade contrabass six of five now

00:20:18,930 --> 00:20:26,100
right so I can apply this again and the

00:20:23,520 --> 00:20:28,410
operator knows how to create the

00:20:26,100 --> 00:20:32,340
database so that's the only thing you

00:20:28,410 --> 00:20:34,320
have to do again cash base is kind of

00:20:32,340 --> 00:20:39,150
water here this is more specific so now

00:20:34,320 --> 00:20:42,030
for Couchbase specifically but pretty

00:20:39,150 --> 00:20:45,000
much what I have seen here is can be

00:20:42,030 --> 00:20:46,620
applied to other databases as well but

00:20:45,000 --> 00:20:49,380
in this case here cut base is kind of

00:20:46,620 --> 00:20:51,540
molar so let's same application reads

00:20:49,380 --> 00:20:54,330
more than right so I can do something

00:20:51,540 --> 00:20:57,420
like okay I want just two nodes or three

00:20:54,330 --> 00:21:01,620
nodes running data and ten nodes running

00:20:57,420 --> 00:21:03,660
index current search or if it is the

00:21:01,620 --> 00:21:05,550
opposite application writes much more

00:21:03,660 --> 00:21:09,990
than read so I can have like ten nodes

00:21:05,550 --> 00:21:11,880
here and three nodes here or III don't

00:21:09,990 --> 00:21:14,610
need to use full text search so I don't

00:21:11,880 --> 00:21:17,880
need to even run this service so it's

00:21:14,610 --> 00:21:21,570
super flexible on what you can do and if

00:21:17,880 --> 00:21:26,130
you come back here yeah our repellency

00:21:21,570 --> 00:21:30,030
is about finish of course rebalancing is

00:21:26,130 --> 00:21:33,600
optimized for really a large amount of

00:21:30,030 --> 00:21:36,960
data so there is a bunch of steps to one

00:21:33,600 --> 00:21:39,810
make sure that we are not compromising

00:21:36,960 --> 00:21:44,420
the performance of the database so

00:21:39,810 --> 00:21:48,060
reversing is a very very cautious

00:21:44,420 --> 00:21:52,410
process I should have finish in just a

00:21:48,060 --> 00:21:53,790
few few more seconds some other

00:21:52,410 --> 00:22:00,170
important things to mention

00:21:53,790 --> 00:22:00,170
I'm always have only more 5 minutes left

00:22:00,290 --> 00:22:05,550
9 means

00:22:02,430 --> 00:22:09,650
so there are a bunch of other

00:22:05,550 --> 00:22:12,150
possibilities here so of course when I

00:22:09,650 --> 00:22:15,810
deployed at the base I can automatically

00:22:12,150 --> 00:22:18,840
start doing big cups so I just need to

00:22:15,810 --> 00:22:21,300
add the configuration here too so I have

00:22:18,840 --> 00:22:23,370
a type here coach please pick up and I

00:22:21,300 --> 00:22:26,760
just need to add the configuration say

00:22:23,370 --> 00:22:30,360
hey I want to I want you to run this

00:22:26,760 --> 00:22:33,810
backup every specific one day for

00:22:30,360 --> 00:22:35,190
instance I can also configure cross at

00:22:33,810 --> 00:22:37,500
the center application if I want to

00:22:35,190 --> 00:22:40,380
allocate this database to another

00:22:37,500 --> 00:22:43,290
country for instance let's say I have a

00:22:40,380 --> 00:22:44,880
cluster in Europe and another in US and

00:22:43,290 --> 00:22:46,920
then I can also configure this

00:22:44,880 --> 00:22:50,430
replication between those two clusters I

00:22:46,920 --> 00:22:52,590
can export my metrics suprem to say

00:22:50,430 --> 00:22:54,780
phone to monitor the database there and

00:22:52,590 --> 00:22:57,120
yeah and literally a bunch of other

00:22:54,780 --> 00:23:01,830
stuff that can be automated with with a

00:22:57,120 --> 00:23:06,570
little bit and it's kind of funny that

00:23:01,830 --> 00:23:08,610
this is very different and then just

00:23:06,570 --> 00:23:17,160
using the standard servers in deployment

00:23:08,610 --> 00:23:22,380
and in which is vanilla which is offered

00:23:17,160 --> 00:23:25,440
in the vanilla kubernetes because here

00:23:22,380 --> 00:23:29,700
I'm deploying on my sequel which which

00:23:25,440 --> 00:23:30,270
you have just a debt so in this case

00:23:29,700 --> 00:23:32,310
here

00:23:30,270 --> 00:23:34,110
Korea's have no idea that is the

00:23:32,310 --> 00:23:36,090
database there's no Prater managing the

00:23:34,110 --> 00:23:39,330
database I'm just a point a database by

00:23:36,090 --> 00:23:40,830
myself and if the database dies there's

00:23:39,330 --> 00:23:43,320
nothing special here could we just we

00:23:40,830 --> 00:23:49,830
just bring the database back and I don't

00:23:43,320 --> 00:23:52,370
have any other extra guarantees like ok

00:23:49,830 --> 00:23:56,970
if I have a cluster of my sequel well

00:23:52,370 --> 00:23:59,760
that the creatures will not bring this

00:23:56,970 --> 00:24:03,620
node back to a half state but here I'm

00:23:59,760 --> 00:24:06,870
just using this dollar kubernetes

00:24:03,620 --> 00:24:08,640
resources to deploy a database if I use

00:24:06,870 --> 00:24:10,170
if you do the same thing with my sequel

00:24:08,640 --> 00:24:12,810
with a Masuka operator

00:24:10,170 --> 00:24:15,210
then I could have some extra benefits of

00:24:12,810 --> 00:24:18,510
running my database or on courageous

00:24:15,210 --> 00:24:21,630
so in this Mexico operator for instance

00:24:18,510 --> 00:24:25,470
I exactly have let those out of them I

00:24:21,630 --> 00:24:28,470
also have out-of-the-box backups I can

00:24:25,470 --> 00:24:31,380
also have this cluster monitoring

00:24:28,470 --> 00:24:35,549
availability scalability guarantees so

00:24:31,380 --> 00:24:37,260
it is I think that if you if you are

00:24:35,549 --> 00:24:42,980
going to deploy or database on

00:24:37,260 --> 00:24:47,750
communities I do think that worth to you

00:24:42,980 --> 00:24:50,789
use an operator to automate most of them

00:24:47,750 --> 00:24:54,059
men will work to manage it to maintain a

00:24:50,789 --> 00:24:57,390
database we also have to talk a little

00:24:54,059 --> 00:25:02,250
bit about the best versus the basement

00:24:57,390 --> 00:25:06,779
communities I I still think that the

00:25:02,250 --> 00:25:09,270
best is is easier because it doesn't

00:25:06,779 --> 00:25:11,250
well it's just a matter of money right

00:25:09,270 --> 00:25:15,120
you just pay there and everything is

00:25:11,250 --> 00:25:19,260
managed for you I do think that right

00:25:15,120 --> 00:25:23,610
now for the small and medium workloads

00:25:19,260 --> 00:25:25,200
it's probably cheaper to run on just use

00:25:23,610 --> 00:25:29,159
it the best do the business service

00:25:25,200 --> 00:25:31,950
solution but in many cases it do lack a

00:25:29,159 --> 00:25:34,320
lot of flexibility because yeah you just

00:25:31,950 --> 00:25:38,750
get a performance that they offer and

00:25:34,320 --> 00:25:44,580
there is no way you can optimize or

00:25:38,750 --> 00:25:48,450
fine-tune the database and on average as

00:25:44,580 --> 00:25:52,649
well you get a average performance for

00:25:48,450 --> 00:25:55,289
the database is really hard to you are

00:25:52,649 --> 00:25:57,690
limited to what cloud provider offers

00:25:55,289 --> 00:26:05,340
you while there's a base of communities

00:25:57,690 --> 00:26:08,460
it is it is it still requires a lot of

00:26:05,340 --> 00:26:10,080
knowledge on committees itself you

00:26:08,460 --> 00:26:14,279
pretty much have the same flexibility as

00:26:10,080 --> 00:26:19,799
bare metal and I think operators can at

00:26:14,279 --> 00:26:23,100
least right now operators are very at

00:26:19,799 --> 00:26:27,630
best right now so you can automate most

00:26:23,100 --> 00:26:31,010
of the work by using operators

00:26:27,630 --> 00:26:33,539
and I do think that in the future

00:26:31,010 --> 00:26:35,760
database of cabbages will be one of

00:26:33,539 --> 00:26:38,910
these standard choices or you would pick

00:26:35,760 --> 00:26:41,340
up like the add to the business service

00:26:38,910 --> 00:26:49,650
or you will run your database on co

00:26:41,340 --> 00:26:52,140
beans and the fun thing here is for

00:26:49,650 --> 00:26:54,330
instance cash base offers the cache miss

00:26:52,140 --> 00:26:59,370
cloud which is our database as a service

00:26:54,330 --> 00:27:02,370
solution and under the hood what is

00:26:59,370 --> 00:27:04,350
running is the operator so that's

00:27:02,370 --> 00:27:07,140
exactly what's running under the hood

00:27:04,350 --> 00:27:09,299
you know in our case and this is shoots

00:27:07,140 --> 00:27:12,000
to a lot of other cloud providers as

00:27:09,299 --> 00:27:14,190
well so when you really when you hire a

00:27:12,000 --> 00:27:19,789
little bit of self solution in fact

00:27:14,190 --> 00:27:23,220
while you are acquiring is just a

00:27:19,789 --> 00:27:28,220
database running with the same operator

00:27:23,220 --> 00:27:33,240
in someone else infrastructure and

00:27:28,220 --> 00:27:35,150
that's how simple it gets we also need

00:27:33,240 --> 00:27:37,200
to talk a little bit about a femoral

00:27:35,150 --> 00:27:43,169
remote persistent or she woke up

00:27:37,200 --> 00:27:47,850
residual search of course ran now sis

00:27:43,169 --> 00:27:52,380
kibrik is 114 local persistent storage

00:27:47,850 --> 00:27:54,659
is GA so you definitely should use local

00:27:52,380 --> 00:28:00,240
persistent storage for databases because

00:27:54,659 --> 00:28:05,610
one you you avoid losing today the data

00:28:00,240 --> 00:28:08,700
went if the PHA dies at second you don't

00:28:05,610 --> 00:28:10,440
want and it is the latency between the

00:28:08,700 --> 00:28:15,679
disk and the server to impact your

00:28:10,440 --> 00:28:18,270
queries of course but this is not

00:28:15,679 --> 00:28:20,789
general-purpose solution I think local

00:28:18,270 --> 00:28:25,380
processor II storage is something very

00:28:20,789 --> 00:28:28,679
specific to applications there are IO

00:28:25,380 --> 00:28:30,600
bound so whenever you did you need to

00:28:28,679 --> 00:28:33,299
write and read the law from the disk

00:28:30,600 --> 00:28:35,880
that's say when you should go to local

00:28:33,299 --> 00:28:37,590
processor storage otherwise remote

00:28:35,880 --> 00:28:40,669
persist origin ephemeral might be a

00:28:37,590 --> 00:28:40,669
better solution for you

00:28:41,430 --> 00:28:48,060
lastly I I think that we also have to

00:28:45,720 --> 00:28:51,330
talk a little bit about benchmarking so

00:28:48,060 --> 00:28:53,460
we have this Yahoo cloud server in which

00:28:51,330 --> 00:28:56,730
my benchmark which is one of these seven

00:28:53,460 --> 00:29:01,830
ways to measure performance on databases

00:28:56,730 --> 00:29:03,900
and what we notice is that yes when you

00:29:01,830 --> 00:29:06,180
run a little bit comparing to run your

00:29:03,900 --> 00:29:08,850
database on a bare metal there is some

00:29:06,180 --> 00:29:11,580
performance decrease when you run your

00:29:08,850 --> 00:29:16,710
database in a container in this case

00:29:11,580 --> 00:29:19,190
here we notice that workload there is

00:29:16,710 --> 00:29:21,690
different tough types of workloads and

00:29:19,190 --> 00:29:25,680
for workload a we didn't see any

00:29:21,690 --> 00:29:32,100
difference for workload e we see we saw

00:29:25,680 --> 00:29:35,300
up to 10% in Proverbs decrease so just

00:29:32,100 --> 00:29:40,250
to show you some numbers here here we

00:29:35,300 --> 00:29:40,250
didn't see any difference at all so very

00:29:40,400 --> 00:29:47,310
if the container even was Foster and

00:29:43,430 --> 00:29:49,770
then in this use case here workload e we

00:29:47,310 --> 00:29:52,920
saw up to 10% him perform stage degrees

00:29:49,770 --> 00:29:57,260
so it's very important for you to okay

00:29:52,920 --> 00:30:00,450
when oops I have a small typo here but

00:29:57,260 --> 00:30:06,900
you can imagine that you didn't saw that

00:30:00,450 --> 00:30:09,690
so when you plan to deploy your database

00:30:06,900 --> 00:30:13,400
on containers make sure that you add at

00:30:09,690 --> 00:30:15,480
least 10% of CPU and memory to compass

00:30:13,400 --> 00:30:20,070
compensate for potential performance

00:30:15,480 --> 00:30:21,750
penalties and this is this should be

00:30:20,070 --> 00:30:24,590
true for every single other database

00:30:21,750 --> 00:30:30,990
because it's not anything specific in

00:30:24,590 --> 00:30:36,510
cash base that will that would give this

00:30:30,990 --> 00:30:40,260
sort of behavior again operators is a

00:30:36,510 --> 00:30:42,270
big thing now so there is this operator

00:30:40,260 --> 00:30:45,500
hub website would that compile a lot of

00:30:42,270 --> 00:30:48,660
operators out there do check out this

00:30:45,500 --> 00:30:50,790
this website and probably there's a lot

00:30:48,660 --> 00:30:53,190
of other operators that might be helpful

00:30:50,790 --> 00:30:56,520
for you and again

00:30:53,190 --> 00:30:58,230
there is now this talks are a little bit

00:30:56,520 --> 00:31:00,030
odd but I'd like to recommend them

00:30:58,230 --> 00:31:03,090
because they are pretty much one of the

00:31:00,030 --> 00:31:07,770
first talks about reading database on

00:31:03,090 --> 00:31:10,980
containers on actually on kubernetes so

00:31:07,770 --> 00:31:14,310
yeah I do recommend you to check out

00:31:10,980 --> 00:31:16,950
those and then there and of course watch

00:31:14,310 --> 00:31:19,110
the most the latest one because they

00:31:16,950 --> 00:31:22,830
have they have been talking about

00:31:19,110 --> 00:31:24,690
running Mexico and and and post squeeze

00:31:22,830 --> 00:31:28,200
on kubernetes in pretty much every

00:31:24,690 --> 00:31:32,190
single cube con system that's what I

00:31:28,200 --> 00:31:35,480
have and yeah I hope you guys enjoy it

00:31:32,190 --> 00:31:51,969
so thank you very much

00:31:35,480 --> 00:31:51,969

YouTube URL: https://www.youtube.com/watch?v=4ziWy3s682E


