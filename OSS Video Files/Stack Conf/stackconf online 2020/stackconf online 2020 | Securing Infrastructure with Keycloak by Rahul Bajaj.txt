Title: stackconf online 2020 | Securing Infrastructure with Keycloak by Rahul Bajaj
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	OAuth protocol is often misunderstood as an authentication protocol but that is not the case. It is an authorization protocol used to provide authorization between two services. While OAuth does all the heavy lifting, authorization, it does not maintain an identity. At this point, OpenID Connect plays a vital role. It is a thin layer that sits on top of OAuth 2.0 and enables correct authentication for users and provides the correct identity. With the help of OpenID Connect, organizations can provide Single Sign On(SSO) functionality. In this talk, we will understand how one can leverage Keycloak, an OpenID provider, to perform Sign Sign On using the JSON Web Tokens(JWT). Most of the applications use the Session ID mechanism for authentication. Either they use the sticky mechanism or maintain a common database for multiple web-applications running the same server. Although this approach is used widely it is not scalable in nature. With the increase in adoption of the microservices architecture in applications lately, it has become difficult to scale your application using a Session ID. On the other hand, JWT proves to be an efficient methodology in this case. In this talk, we will gain a deep understanding of how to use the JWT for implementing the OpenID Connect protocol and I shall also demonstrate how I have implemented it in the Foreman project.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:11,189
[Music]

00:00:11,340 --> 00:00:13,400
you

00:00:14,270 --> 00:00:19,570
hello friends my name is Robert arch and

00:00:17,630 --> 00:00:23,270
today we will talk about infrastructure

00:00:19,570 --> 00:00:25,550
securing your infrastructure with t2 now

00:00:23,270 --> 00:00:27,770
a little bit about me I am a software

00:00:25,550 --> 00:00:31,220
engineer and I work at Red Hat I have

00:00:27,770 --> 00:00:34,070
done few certifications related to do

00:00:31,220 --> 00:00:35,720
ops and administration so if you want to

00:00:34,070 --> 00:00:38,030
ask me anything about it then feel free

00:00:35,720 --> 00:00:41,059
to and you can follow me on Twitter

00:00:38,030 --> 00:00:43,520
github and you can also read my blog so

00:00:41,059 --> 00:00:46,429
that's about me do we have a lot of

00:00:43,520 --> 00:00:48,679
things to cover so I'll just go like a

00:00:46,429 --> 00:00:51,079
bit fast but you can stop me anywhere

00:00:48,679 --> 00:00:54,469
and just you know asking a question then

00:00:51,079 --> 00:00:56,359
you shoot so the few things that we are

00:00:54,469 --> 00:00:59,839
going to look at today one of them is

00:00:56,359 --> 00:01:02,449
authentication next is JSON web tokens

00:00:59,839 --> 00:01:06,290
or gwt's then we will go on looking at

00:01:02,449 --> 00:01:09,790
or 2.0 what is open ID connect and what

00:01:06,290 --> 00:01:09,790
is over 2.0 book flows

00:01:09,810 --> 00:01:14,820
after that we will look at how we can

00:01:12,430 --> 00:01:18,730
use key look as an open ID provider and

00:01:14,820 --> 00:01:21,280
also how we implemented the single

00:01:18,730 --> 00:01:25,660
sign-on for form in project 2 let's

00:01:21,280 --> 00:01:28,090
begin so let's look at a tenth equation

00:01:25,660 --> 00:01:30,250
so what is authentication authentication

00:01:28,090 --> 00:01:33,000
by definition is the process used by

00:01:30,250 --> 00:01:36,220
applications to determine and confirm

00:01:33,000 --> 00:01:38,020
identities of users okay so what did

00:01:36,220 --> 00:01:40,750
what this basically means that it

00:01:38,020 --> 00:01:43,090
ensures the that the correct content is

00:01:40,750 --> 00:01:46,990
shown to the users more importantly

00:01:43,090 --> 00:01:50,290
ensures that correct content is secured

00:01:46,990 --> 00:01:53,170
and unavailable for unauthorized users

00:01:50,290 --> 00:01:55,619
right so if you if there is an

00:01:53,170 --> 00:01:58,720
unauthorized user we need to keep our

00:01:55,619 --> 00:02:01,390
information or our application away from

00:01:58,720 --> 00:02:04,270
the that's the whole idea of why we need

00:02:01,390 --> 00:02:05,470
authentication next up let's look at

00:02:04,270 --> 00:02:07,360
authentication so I have divided

00:02:05,470 --> 00:02:09,040
authentication in basically two paths

00:02:07,360 --> 00:02:10,209
one is the password authentication and

00:02:09,040 --> 00:02:13,840
the other one is D token-based

00:02:10,209 --> 00:02:16,810
authentication usually what we have seen

00:02:13,840 --> 00:02:18,400
now or what is in practice in most of

00:02:16,810 --> 00:02:19,900
the applications right now is the

00:02:18,400 --> 00:02:23,320
password authentication where a user

00:02:19,900 --> 00:02:26,420
goes to a particular website and he

00:02:23,320 --> 00:02:29,300
tries to enter his username and password

00:02:26,420 --> 00:02:31,100
once he gets authenticated in the server

00:02:29,300 --> 00:02:33,200
replies back with a session ID and that

00:02:31,100 --> 00:02:35,959
session ID is stored in the cookies and

00:02:33,200 --> 00:02:40,310
for every other request cookies are used

00:02:35,959 --> 00:02:42,170
for a you know trying to get some

00:02:40,310 --> 00:02:44,630
resource on the application this is the

00:02:42,170 --> 00:02:46,900
general flow that we see with this flow

00:02:44,630 --> 00:02:49,580
we've also seen things happening like

00:02:46,900 --> 00:02:52,640
people using sticky sessions load power

00:02:49,580 --> 00:02:54,560
load balancers and also like people use

00:02:52,640 --> 00:02:56,600
something called as it is cash to you

00:02:54,560 --> 00:02:58,340
know kind of try to scale but what I've

00:02:56,600 --> 00:03:01,700
seen with this kind of method is that it

00:02:58,340 --> 00:03:04,400
is not very scalable if you want to

00:03:01,700 --> 00:03:07,430
scale your application then you might

00:03:04,400 --> 00:03:09,769
want to consider authentication via the

00:03:07,430 --> 00:03:11,209
token-based authentication method now

00:03:09,769 --> 00:03:13,040
what is talking before the indication

00:03:11,209 --> 00:03:15,320
method in this method what you do

00:03:13,040 --> 00:03:19,910
basically is that you take a payload and

00:03:15,320 --> 00:03:22,100
with that payload you with that payload

00:03:19,910 --> 00:03:24,260
you kind of use that payload in your

00:03:22,100 --> 00:03:26,660
application to authenticate a user or

00:03:24,260 --> 00:03:29,420
get get the user inside and then use the

00:03:26,660 --> 00:03:33,739
data in the payload and let the user

00:03:29,420 --> 00:03:35,329
access resources that he wants so when

00:03:33,739 --> 00:03:38,299
we talk about token-based authentication

00:03:35,329 --> 00:03:40,519
there is a very famous you know a very

00:03:38,299 --> 00:03:43,880
famous spec that is structured and which

00:03:40,519 --> 00:03:45,950
is called a JWT or jason of token so let

00:03:43,880 --> 00:03:49,430
us understand what exactly is theatre

00:03:45,950 --> 00:03:52,100
booty so j ee as you can see it's a

00:03:49,430 --> 00:03:54,680
base64 encoded string and by looking at

00:03:52,100 --> 00:03:57,200
it i cannot understand anything but when

00:03:54,680 --> 00:03:59,540
i dig deeper into it i can see that it

00:03:57,200 --> 00:04:01,459
has three parts so the first part that

00:03:59,540 --> 00:04:03,320
you can see in pink is known as the

00:04:01,459 --> 00:04:05,209
header the second part that you can see

00:04:03,320 --> 00:04:07,760
in the blue is called as the payload and

00:04:05,209 --> 00:04:09,980
the third part that you can see is these

00:04:07,760 --> 00:04:11,900
signatures let's see what is the

00:04:09,980 --> 00:04:16,340
importance of all these three parts and

00:04:11,900 --> 00:04:18,260
let's understand the jela beautiful so

00:04:16,340 --> 00:04:21,289
till now we know that it is a basic t4

00:04:18,260 --> 00:04:22,789
encoded like string but let's see now

00:04:21,289 --> 00:04:24,800
the first part is called as other

00:04:22,789 --> 00:04:29,150
volatile it's called as T header and

00:04:24,800 --> 00:04:31,630
what this header is basically it is a it

00:04:29,150 --> 00:04:35,360
is jason that contains

00:04:31,630 --> 00:04:39,050
normally two fields one is a LG and typ

00:04:35,360 --> 00:04:40,090
so in GWT whatever keys you have it is a

00:04:39,050 --> 00:04:42,310
keeper value and what

00:04:40,090 --> 00:04:45,880
keys that you can see are usually a

00:04:42,310 --> 00:04:46,840
three-letter words and like the short

00:04:45,880 --> 00:04:49,000
ones I don't know why they have done

00:04:46,840 --> 00:04:53,910
that but it's al d stands for algorithm

00:04:49,000 --> 00:04:53,910
and T by P stands for D type so

00:04:54,840 --> 00:05:00,570
yeah so this type is called this type

00:04:58,500 --> 00:05:03,240
here is Jade ability but what you will

00:05:00,570 --> 00:05:06,450
see in the upcoming spec like this is

00:05:03,240 --> 00:05:07,860
the spec I know this font is kind of

00:05:06,450 --> 00:05:09,419
boring and when you deal with

00:05:07,860 --> 00:05:12,480
authentication obviously you have to

00:05:09,419 --> 00:05:14,550
deal with this one too so yeah so that's

00:05:12,480 --> 00:05:18,480
what you get when you want to try out

00:05:14,550 --> 00:05:22,470
things in authentication it's the weird

00:05:18,480 --> 00:05:24,360
fun so yeah we were talking about a what

00:05:22,470 --> 00:05:26,610
access token GWT profile this is a

00:05:24,360 --> 00:05:28,470
future table spec that they have created

00:05:26,610 --> 00:05:31,200
now what they want in the future is

00:05:28,470 --> 00:05:33,000
called something called as the piped GWT

00:05:31,200 --> 00:05:36,389
now what this pipe GWT means is start

00:05:33,000 --> 00:05:38,460
inside the you know header parameter we

00:05:36,389 --> 00:05:40,770
use something for the type something

00:05:38,460 --> 00:05:43,770
like 80 plus year building now why this

00:05:40,770 --> 00:05:45,690
is done because imagine you are using

00:05:43,770 --> 00:05:48,210
you you are you are using a huge

00:05:45,690 --> 00:05:50,430
application and you're developing a user

00:05:48,210 --> 00:05:52,200
application and that application uses

00:05:50,430 --> 00:05:54,330
GWT at multiple levels so say for

00:05:52,200 --> 00:05:56,880
example you stay TT for say

00:05:54,330 --> 00:06:00,000
authentication authorization for say

00:05:56,880 --> 00:06:02,010
logout so you're using or using GWT at

00:06:00,000 --> 00:06:04,890
different levels of your of your you

00:06:02,010 --> 00:06:06,750
know application so how would you

00:06:04,890 --> 00:06:09,660
differentiate between all these kind of

00:06:06,750 --> 00:06:11,820
JW's because all they have right now in

00:06:09,660 --> 00:06:13,470
their header is something like type the

00:06:11,820 --> 00:06:19,890
state ability they all have it similar

00:06:13,470 --> 00:06:22,650
to avoid this we proposed like is type

00:06:19,890 --> 00:06:26,160
JWT the ahead proposed way of doing it

00:06:22,650 --> 00:06:28,680
ahead is using a type as 80 plus JWT

00:06:26,160 --> 00:06:31,139
touch the purpose way so yeah that's

00:06:28,680 --> 00:06:32,909
something new and

00:06:31,139 --> 00:06:34,530
let's move on so that's the first part

00:06:32,909 --> 00:06:36,210
that's the first part of GWT which is

00:06:34,530 --> 00:06:37,680
called as the header which contains the

00:06:36,210 --> 00:06:39,810
algorithm and the type let's move ahead

00:06:37,680 --> 00:06:41,610
there is then there is this payload data

00:06:39,810 --> 00:06:44,159
which is the most important part of a

00:06:41,610 --> 00:06:45,689
JWT because that's what it contains

00:06:44,159 --> 00:06:48,360
basically that that's what it is made up

00:06:45,689 --> 00:06:51,750
of now the payload type of data can be

00:06:48,360 --> 00:06:55,889
actually of multiple types but the basic

00:06:51,750 --> 00:06:58,289
one is the one which is provided by by

00:06:55,889 --> 00:07:03,599
the spec which is all these like JT I

00:06:58,289 --> 00:07:06,180
exp AIT is s AUD audience issuer expiry

00:07:03,599 --> 00:07:09,000
and subject and type and things of them

00:07:06,180 --> 00:07:13,199
now except those you can have your own

00:07:09,000 --> 00:07:16,199
or you know own keys where now this JWT

00:07:13,199 --> 00:07:17,759
as you know is provided by T open ID

00:07:16,199 --> 00:07:19,379
provider now I'll come to that in a

00:07:17,759 --> 00:07:20,969
minute like what is open ID provider and

00:07:19,379 --> 00:07:24,020
how they provide the theability but for

00:07:20,969 --> 00:07:26,610
now just understand that this JW T is

00:07:24,020 --> 00:07:29,969
given to us by the Open ID provider or

00:07:26,610 --> 00:07:31,979
the author ation so so once we so we can

00:07:29,969 --> 00:07:34,439
add these you know the fleets that are

00:07:31,979 --> 00:07:36,719
new we can add this through those open

00:07:34,439 --> 00:07:38,639
ID providers or authorization source but

00:07:36,719 --> 00:07:40,469
if you if you look at a basic GWT it

00:07:38,639 --> 00:07:44,250
would have only the you know these three

00:07:40,469 --> 00:07:46,889
little words keys so that's about the

00:07:44,250 --> 00:07:49,800
payload data and the last one is

00:07:46,889 --> 00:07:51,659
signature now you must be wondering like

00:07:49,800 --> 00:07:55,729
you you must be wondering like Rahul

00:07:51,659 --> 00:07:57,630
wait this GWT use you told it's a base64

00:07:55,729 --> 00:08:00,420
encrypted

00:07:57,630 --> 00:08:02,700
string so why can't an attack that just

00:08:00,420 --> 00:08:05,520
decoded and you don't get all the

00:08:02,700 --> 00:08:09,750
information on the attacker does not

00:08:05,520 --> 00:08:11,640
have the appropriate information to

00:08:09,750 --> 00:08:13,230
decode this big cause of this signature

00:08:11,640 --> 00:08:16,500
now let's understand what is this

00:08:13,230 --> 00:08:20,310
signature what this signature is made of

00:08:16,500 --> 00:08:23,040
the signature is made of the header the

00:08:20,310 --> 00:08:25,440
payload and a secret so there is a

00:08:23,040 --> 00:08:27,300
payload we saw what our header is we

00:08:25,440 --> 00:08:29,130
take that header we saw what a payload

00:08:27,300 --> 00:08:31,080
is we take that payload and there is a

00:08:29,130 --> 00:08:32,910
secret that the authorization server or

00:08:31,080 --> 00:08:35,580
you know open any provider or in our

00:08:32,910 --> 00:08:38,550
case a key cloak it provides that secret

00:08:35,580 --> 00:08:40,349
key for us we take all these things

00:08:38,550 --> 00:08:42,660
together all three of these thing

00:08:40,349 --> 00:08:44,730
together and we again encode it with an

00:08:42,660 --> 00:08:47,010
algorithm of our choice so signature

00:08:44,730 --> 00:08:48,840
could be of say for example in your

00:08:47,010 --> 00:08:51,480
header you are you have something let's

00:08:48,840 --> 00:08:54,900
go back and see what the header has so

00:08:51,480 --> 00:08:57,650
say your header is of Rs 256 but it is

00:08:54,900 --> 00:09:00,750
not mandatory that you use Rs 256 for

00:08:57,650 --> 00:09:02,910
encoding the signature so you have this

00:09:00,750 --> 00:09:05,430
as a base64 URL you have payload as a

00:09:02,910 --> 00:09:07,110
base64 URL and then you have a secret

00:09:05,430 --> 00:09:09,150
and you take all these together

00:09:07,110 --> 00:09:11,070
and you basically encode this with

00:09:09,150 --> 00:09:12,720
another algorithm or basically the same

00:09:11,070 --> 00:09:15,240
algorithm whatever is your choice even

00:09:12,720 --> 00:09:17,790
you need to encode that and that becomes

00:09:15,240 --> 00:09:19,800
your signature and this is why this

00:09:17,790 --> 00:09:21,390
entire JWT that is passed from an

00:09:19,800 --> 00:09:26,130
alteration server or open ID connect

00:09:21,390 --> 00:09:28,890
provider is kind of secure so I hope

00:09:26,130 --> 00:09:31,710
you've got the gist about JSON web token

00:09:28,890 --> 00:09:33,180
all together and let's move ahead so

00:09:31,710 --> 00:09:34,950
let's recap what we have learnt till now

00:09:33,180 --> 00:09:37,230
so the first thing that we learn today

00:09:34,950 --> 00:09:40,710
is why we need authentication what is

00:09:37,230 --> 00:09:44,670
authentication just to avoid the

00:09:40,710 --> 00:09:47,310
unauthorized users or you know to access

00:09:44,670 --> 00:09:49,650
our application so we use authentication

00:09:47,310 --> 00:09:51,540
for avoiding the unauthorized users to

00:09:49,650 --> 00:09:53,910
access our application and then we learn

00:09:51,540 --> 00:09:55,650
about JWT JWT station map token it has

00:09:53,910 --> 00:09:58,170
three paths header payload and signature

00:09:55,650 --> 00:10:00,320
it's very secure because of its

00:09:58,170 --> 00:10:02,850
signature and that's why we can trust it

00:10:00,320 --> 00:10:08,580
now we are going to look at what is over

00:10:02,850 --> 00:10:09,360
2.0 so oh here stands for open okay but

00:10:08,580 --> 00:10:11,550
what is this

00:10:09,360 --> 00:10:12,649
auth all above what what does this

00:10:11,550 --> 00:10:14,790
Stanford does it stand for

00:10:12,649 --> 00:10:17,370
authentication or does it sign for

00:10:14,790 --> 00:10:21,630
authorization now you might be the hole

00:10:17,370 --> 00:10:23,490
that's crazy because you know like we

00:10:21,630 --> 00:10:26,640
have to talk about authentication so

00:10:23,490 --> 00:10:28,230
obviously it's authentication so no

00:10:26,640 --> 00:10:32,310
that's not the case it's for

00:10:28,230 --> 00:10:36,300
authorization so in earth o earth stands

00:10:32,310 --> 00:10:38,880
for open authorization authorization

00:10:36,300 --> 00:10:41,820
guys it's not authentication now let's

00:10:38,880 --> 00:10:44,170
understand what is over 2.0 why be you

00:10:41,820 --> 00:10:46,930
know need it in the first place

00:10:44,170 --> 00:10:49,600
so if you have ever let's take in this

00:10:46,930 --> 00:10:52,480
wheel if you have ever logged in into an

00:10:49,600 --> 00:10:55,149
application using your Google or say

00:10:52,480 --> 00:10:58,269
your Facebook account that means you

00:10:55,149 --> 00:11:01,430
have used for 2.0

00:10:58,269 --> 00:11:05,320
okay so let's see let me explain it in

00:11:01,430 --> 00:11:08,029
this way when an application requires to

00:11:05,320 --> 00:11:11,510
authorize another application to use the

00:11:08,029 --> 00:11:14,779
resource that is when or 2.0 comes into

00:11:11,510 --> 00:11:16,459
the picture which also means that let us

00:11:14,779 --> 00:11:19,370
understand this within another another

00:11:16,459 --> 00:11:20,930
analogy that is say for example your

00:11:19,370 --> 00:11:23,449
parents come to your office just to

00:11:20,930 --> 00:11:26,660
visit this normal with you the people

00:11:23,449 --> 00:11:29,389
the staff of your office or what we call

00:11:26,660 --> 00:11:32,209
it as is GWS of the office will assign a

00:11:29,389 --> 00:11:35,449
particular card to your parents now this

00:11:32,209 --> 00:11:38,000
card will have access only to the common

00:11:35,449 --> 00:11:39,740
areas and restricting them from the

00:11:38,000 --> 00:11:44,180
workplace the actual workplace where you

00:11:39,740 --> 00:11:45,920
sit and work so the the the goal of

00:11:44,180 --> 00:11:48,139
saying this is that they get an

00:11:45,920 --> 00:11:50,810
restricted access or what is the same

00:11:48,139 --> 00:11:52,610
way what gives a restricted access to

00:11:50,810 --> 00:11:54,260
the application who wants the

00:11:52,610 --> 00:11:57,740
authorization to access a particular

00:11:54,260 --> 00:12:00,500
resource so that's about Earth now let's

00:11:57,740 --> 00:12:02,480
see how it generally works let's

00:12:00,500 --> 00:12:05,390
understand this in a way that there is a

00:12:02,480 --> 00:12:06,769
resource owner or the user I just like

00:12:05,390 --> 00:12:09,500
to call into this one there is a

00:12:06,769 --> 00:12:12,589
resource server and there is a client

00:12:09,500 --> 00:12:15,500
and there is an authorization so usually

00:12:12,589 --> 00:12:18,709
what happens is dad this client makes a

00:12:15,500 --> 00:12:20,300
request together so so but what happens

00:12:18,709 --> 00:12:22,399
is that he has to first go to the

00:12:20,300 --> 00:12:24,529
authorization server and he has to

00:12:22,399 --> 00:12:25,959
authenticate himself so say for example

00:12:24,529 --> 00:12:28,940
you are trying to access some kind of

00:12:25,959 --> 00:12:31,339
website and that website gives you an

00:12:28,940 --> 00:12:33,500
option to go to say authenticate

00:12:31,339 --> 00:12:36,320
yourself from Google or Facebook so you

00:12:33,500 --> 00:12:37,699
what you do is your authorization server

00:12:36,320 --> 00:12:39,980
you go to your Thracians over your

00:12:37,699 --> 00:12:43,940
tentacle yourself in return it returns

00:12:39,980 --> 00:12:45,680
gives you back and access token and this

00:12:43,940 --> 00:12:48,980
access token is then used to you know

00:12:45,680 --> 00:12:52,370
get the resource from there so so okay

00:12:48,980 --> 00:12:54,769
let's move wide open I'll even it now in

00:12:52,370 --> 00:12:57,860
case of open ID Connect you must know

00:12:54,769 --> 00:13:00,920
that Open ID Connect is just a very slim

00:12:57,860 --> 00:13:03,949
slime like small layer above Earth so

00:13:00,920 --> 00:13:07,699
the best part is it is based on so open

00:13:03,949 --> 00:13:10,730
ID Connect is internet standard for

00:13:07,699 --> 00:13:15,380
single sign-on and it is based on port

00:13:10,730 --> 00:13:17,029
2.0 so in case of open ID connect when

00:13:15,380 --> 00:13:20,779
you want to access a particular

00:13:17,029 --> 00:13:22,819
application you basically are redirected

00:13:20,779 --> 00:13:24,949
to open any provider of the open ID

00:13:22,819 --> 00:13:27,529
provider you at the open end prodigy at

00:13:24,949 --> 00:13:30,529
n ticket yourself it returns you an ID

00:13:27,529 --> 00:13:32,689
token instead of an access token your if

00:13:30,529 --> 00:13:35,029
you see have changed the words I use I

00:13:32,689 --> 00:13:38,480
get back an ID token and with this ID

00:13:35,029 --> 00:13:41,660
token I go to my resource owner and get

00:13:38,480 --> 00:13:44,060
the resources now I have used two terms

00:13:41,660 --> 00:13:48,079
here one is access token which was which

00:13:44,060 --> 00:13:50,029
is when I used which was when I used or

00:13:48,079 --> 00:13:51,439
2.0 and I've used something called ID

00:13:50,029 --> 00:13:53,720
token when I'm talking about open ID

00:13:51,439 --> 00:13:55,519
connect so let me talk about both of

00:13:53,720 --> 00:13:57,079
these in a minute but let's just see

00:13:55,519 --> 00:13:59,540
what open ID connect in general is right

00:13:57,079 --> 00:14:00,680
now so it is an internet standard for

00:13:59,540 --> 00:14:02,360
single sign-on if you want to

00:14:00,680 --> 00:14:04,730
authenticate using Open ID Connect what

00:14:02,360 --> 00:14:06,260
you do is you need you need to send a

00:14:04,730 --> 00:14:08,630
user you need to authenticate a user

00:14:06,260 --> 00:14:10,550
send the user to the open ID provider or

00:14:08,630 --> 00:14:12,079
the other night open ID provider you

00:14:10,550 --> 00:14:15,439
need to authenticate yourself once you

00:14:12,079 --> 00:14:16,939
are authenticated give back an ID token

00:14:15,439 --> 00:14:18,980
back ok there is a mistake in

00:14:16,939 --> 00:14:21,079
representation I accept it and I'm

00:14:18,980 --> 00:14:24,019
really sorry for that it is get an

00:14:21,079 --> 00:14:25,310
access token back ok so get an ID token

00:14:24,019 --> 00:14:27,209
back so what's the difference between

00:14:25,310 --> 00:14:31,679
the two

00:14:27,209 --> 00:14:33,179
when you do an authorization request to

00:14:31,679 --> 00:14:35,790
the authorization server and

00:14:33,179 --> 00:14:38,399
authorization server returns you and

00:14:35,790 --> 00:14:40,980
access token with which you can

00:14:38,399 --> 00:14:43,439
basically end up accessing a particular

00:14:40,980 --> 00:14:44,509
kind of resource it's called as an

00:14:43,439 --> 00:14:47,249
access token

00:14:44,509 --> 00:14:49,199
whereas when and that is the case of

00:14:47,249 --> 00:14:51,209
open ID Connect that is the case of Oh

00:14:49,199 --> 00:14:55,439
so-and-so so I am confusing you guys I

00:14:51,209 --> 00:14:58,230
guess so that is the case of that is the

00:14:55,439 --> 00:15:00,689
case of port where you get an access

00:14:58,230 --> 00:15:03,569
token back but in case of open ID

00:15:00,689 --> 00:15:06,029
connect when you go to an open ID

00:15:03,569 --> 00:15:08,699
provider and make a request it returns

00:15:06,029 --> 00:15:12,509
you an ID token now this ID token

00:15:08,699 --> 00:15:14,790
contains the authentication status plus

00:15:12,509 --> 00:15:18,449
the payload the information that you can

00:15:14,790 --> 00:15:20,429
go with to and the resource owner and

00:15:18,449 --> 00:15:24,029
you know you can get the resources that

00:15:20,429 --> 00:15:27,389
you want from it is that clear so access

00:15:24,029 --> 00:15:29,459
token is when you get an token from the

00:15:27,389 --> 00:15:31,470
author ation server and it's only for

00:15:29,459 --> 00:15:34,619
accessing a particular resource whereas

00:15:31,470 --> 00:15:36,899
ie token is when you get this I a token

00:15:34,619 --> 00:15:40,199
from an open ID provider and then you

00:15:36,899 --> 00:15:43,319
which has the you know authentication

00:15:40,199 --> 00:15:45,889
status and also the you know the payload

00:15:43,319 --> 00:15:50,369
the data that you require to access a

00:15:45,889 --> 00:15:54,269
resource in your application I hope it

00:15:50,369 --> 00:15:57,929
is clear so yeah let's so look at the or

00:15:54,269 --> 00:15:59,970
2.0 workflows now so there are two

00:15:57,929 --> 00:16:01,499
workflows basically one is the password

00:15:59,970 --> 00:16:04,889
round book flow and the second one is

00:16:01,499 --> 00:16:07,799
authorization code run flow now the

00:16:04,889 --> 00:16:10,829
password Brown flow is a little messy

00:16:07,799 --> 00:16:14,189
and it's I would say it's soon going to

00:16:10,829 --> 00:16:15,600
be deprecated also and what you know or

00:16:14,189 --> 00:16:17,699
what you need to do in the password

00:16:15,600 --> 00:16:20,040
grant flow is quite similar to what we

00:16:17,699 --> 00:16:21,199
do in the password authentication where

00:16:20,040 --> 00:16:24,029
you actually provide your credentials

00:16:21,199 --> 00:16:25,649
whereas the authorization code grant

00:16:24,029 --> 00:16:29,970
flow is the one which is quite popular

00:16:25,649 --> 00:16:35,240
and it is very much used in the industry

00:16:29,970 --> 00:16:35,240
so let's look at how they work

00:16:35,680 --> 00:16:41,420
okay so talking about this password

00:16:38,600 --> 00:16:43,880
grant flow so again there is a you know

00:16:41,420 --> 00:16:46,580
a resource owner and there is an

00:16:43,880 --> 00:16:49,100
alteration server and there is an client

00:16:46,580 --> 00:16:51,530
application so what you do is that

00:16:49,100 --> 00:16:52,190
whenever you request your client

00:16:51,530 --> 00:16:53,660
application

00:16:52,190 --> 00:16:55,730
it basically redirects you to the

00:16:53,660 --> 00:16:57,740
authorization server now add the

00:16:55,730 --> 00:17:00,410
authorization server you give your

00:16:57,740 --> 00:17:03,110
credentials you get back an access token

00:17:00,410 --> 00:17:05,060
and that's how you can access the client

00:17:03,110 --> 00:17:07,760
application touch the basic flow for

00:17:05,060 --> 00:17:09,380
pass or grant you but things change

00:17:07,760 --> 00:17:11,630
quite a bit at the authorization code

00:17:09,380 --> 00:17:13,970
flow point now this is quite interesting

00:17:11,630 --> 00:17:16,000
I will explain you like in a very slow

00:17:13,970 --> 00:17:18,740
pace so that you understand everything

00:17:16,000 --> 00:17:20,600
so say for example you have your client

00:17:18,740 --> 00:17:23,030
application or you have a client

00:17:20,600 --> 00:17:26,260
application and then you make a request

00:17:23,030 --> 00:17:30,100
to a particular website or application

00:17:26,260 --> 00:17:30,100
now what will happen is

00:17:30,220 --> 00:17:38,080
your browser will be redirected to a

00:17:34,350 --> 00:17:40,210
authorization server okay or you can say

00:17:38,080 --> 00:17:42,070
open ID connect Reuter now what

00:17:40,210 --> 00:17:44,169
disciplinary can require authorization

00:17:42,070 --> 00:17:46,240
server will do is it will ask you for

00:17:44,169 --> 00:17:48,700
your credentials or it will ask you for

00:17:46,240 --> 00:17:51,580
the authentication type this type could

00:17:48,700 --> 00:17:55,870
be a different type like it could be a

00:17:51,580 --> 00:17:57,640
Google OTP it could be a you know smart

00:17:55,870 --> 00:17:59,200
card authentication it could be anything

00:17:57,640 --> 00:18:00,820
any kind of it would be a two-factor

00:17:59,200 --> 00:18:03,400
authentication is what I'm trying to say

00:18:00,820 --> 00:18:05,530
so what you do is you are redirected to

00:18:03,400 --> 00:18:08,080
this authorization server and here you

00:18:05,530 --> 00:18:09,370
you know enter your credentials if your

00:18:08,080 --> 00:18:12,460
credentials are correct and if you are

00:18:09,370 --> 00:18:14,409
authenticated you will the authorization

00:18:12,460 --> 00:18:16,630
server will return back something called

00:18:14,409 --> 00:18:20,710
as a code now a code is basically a

00:18:16,630 --> 00:18:22,840
string of letters now this string which

00:18:20,710 --> 00:18:25,120
is called as code is returned back to

00:18:22,840 --> 00:18:28,120
your application and given back to your

00:18:25,120 --> 00:18:30,309
browser now your browser will again make

00:18:28,120 --> 00:18:33,039
a request directly to the authorization

00:18:30,309 --> 00:18:34,690
server with this code and the code will

00:18:33,039 --> 00:18:36,669
verify under authorization so will

00:18:34,690 --> 00:18:38,980
verify if this code is you know accurate

00:18:36,669 --> 00:18:41,200
or not if it is accurate it will give

00:18:38,980 --> 00:18:43,510
back an access token and this access

00:18:41,200 --> 00:18:46,419
token will be used by our browser or

00:18:43,510 --> 00:18:48,809
client to access the application that

00:18:46,419 --> 00:18:50,789
you were originally trying to

00:18:48,809 --> 00:18:53,009
I hope this is clear let's summarize

00:18:50,789 --> 00:18:54,779
your browser makes a request to the

00:18:53,009 --> 00:18:56,759
application my upline makes a request to

00:18:54,779 --> 00:18:59,309
your application your application goes

00:18:56,759 --> 00:19:01,649
to the authorization server it you know

00:18:59,309 --> 00:19:05,279
dusty authentication it gets a code back

00:19:01,649 --> 00:19:07,529
this code is again used by your client

00:19:05,279 --> 00:19:09,690
and then your client will send this code

00:19:07,529 --> 00:19:11,340
to the authorization server in return it

00:19:09,690 --> 00:19:15,139
will get back an access token and this

00:19:11,340 --> 00:19:17,159
access token will be used to access your

00:19:15,139 --> 00:19:20,009
application that you were initially

00:19:17,159 --> 00:19:22,320
trying to I hope this is clear let's

00:19:20,009 --> 00:19:25,080
move ahead so these were basically two

00:19:22,320 --> 00:19:27,029
flows that we discussed one about a

00:19:25,080 --> 00:19:29,129
password grant flow and the second one

00:19:27,029 --> 00:19:30,990
was core grant flow now in the next

00:19:29,129 --> 00:19:32,970
topic the next important topic that we

00:19:30,990 --> 00:19:35,879
are going to talk about is key cloak or

00:19:32,970 --> 00:19:38,789
how it is used as an open ID provider I

00:19:35,879 --> 00:19:41,990
will show you how the console looks what

00:19:38,789 --> 00:19:44,820
all things you can do with key cloak and

00:19:41,990 --> 00:19:47,450
yeah that's pretty much it let's see how

00:19:44,820 --> 00:19:47,450
the clock works

00:19:48,850 --> 00:19:54,059
you

00:19:50,700 --> 00:19:56,129
so I already have Key Club instincts

00:19:54,059 --> 00:19:58,139
that I have been using for my

00:19:56,129 --> 00:19:59,730
development purposes so when you go on

00:19:58,139 --> 00:20:01,080
the kek lok website this is something

00:19:59,730 --> 00:20:05,960
that you see let me show you the

00:20:01,080 --> 00:20:05,960
administration console and that's login

00:20:06,840 --> 00:20:11,850
- here we are this is how Key Club loops

00:20:09,299 --> 00:20:14,279
when you you know even when you enter it

00:20:11,850 --> 00:20:19,049
for the first time you can create your

00:20:14,279 --> 00:20:29,999
own realm let's create a realm calling

00:20:19,049 --> 00:20:31,590
it stat fall dunno okay so you have

00:20:29,999 --> 00:20:33,389
something called as realm settings and

00:20:31,590 --> 00:20:36,830
then you have something called as

00:20:33,389 --> 00:20:38,820
clients so usually what you do is you

00:20:36,830 --> 00:20:41,159
whichever application you want to

00:20:38,820 --> 00:20:43,619
integrate kiki up with you basically

00:20:41,159 --> 00:20:44,100
have it integrated register it as a

00:20:43,619 --> 00:20:48,509
client

00:20:44,100 --> 00:20:50,490
inside key club and the good part about

00:20:48,509 --> 00:20:53,549
Key Club is that you have multiple

00:20:50,490 --> 00:20:55,830
identity providers here or where you can

00:20:53,549 --> 00:20:58,139
use Google Twitter like multiple social

00:20:55,830 --> 00:21:01,559
media platforms other than that you can

00:20:58,139 --> 00:21:03,809
also use like user-defined providers

00:21:01,559 --> 00:21:08,220
such as salmon 2.0 of 90 connect and

00:21:03,809 --> 00:21:11,879
Keith lobe of 99 and multiple you know

00:21:08,220 --> 00:21:15,119
social media I in deployed us on that if

00:21:11,879 --> 00:21:17,220
you are in huge organization and you use

00:21:15,119 --> 00:21:19,110
something like LDAP or Kerberos you also

00:21:17,220 --> 00:21:22,320
have those options so it's pretty

00:21:19,110 --> 00:21:24,090
flexible right and and and then and then

00:21:22,320 --> 00:21:27,830
you can also define your binding so that

00:21:24,090 --> 00:21:30,090
so if you basically if you have the

00:21:27,830 --> 00:21:32,369
smart card authentication wherein you

00:21:30,090 --> 00:21:34,139
have the you know certificate or

00:21:32,369 --> 00:21:36,779
tentatively kind of authentication or

00:21:34,139 --> 00:21:38,399
you're using any other type of

00:21:36,779 --> 00:21:40,369
authentication like OTP or something

00:21:38,399 --> 00:21:42,720
like that you can change it from you you

00:21:40,369 --> 00:21:45,059
when you have those particular package

00:21:42,720 --> 00:21:47,129
is installed on the server who will you

00:21:45,059 --> 00:21:50,190
will be able to see those options here

00:21:47,129 --> 00:21:53,639
in the binding so that's about it or you

00:21:50,190 --> 00:21:55,769
can you can add users here you can

00:21:53,639 --> 00:21:58,039
assign users to those particular groups

00:21:55,769 --> 00:22:03,240
and you can manage sessions from your

00:21:58,039 --> 00:22:05,940
also what you can do is that let me show

00:22:03,240 --> 00:22:09,170
you one of the cly one of the like

00:22:05,940 --> 00:22:14,030
realms that I'm working on so that

00:22:09,170 --> 00:22:16,490
it gives you a better understanding so

00:22:14,030 --> 00:22:18,470
this is how a client looks wherein you

00:22:16,490 --> 00:22:20,660
can choose the client protocol well you

00:22:18,470 --> 00:22:22,580
can choose the access type which we will

00:22:20,660 --> 00:22:26,440
talk about in more detail in a few

00:22:22,580 --> 00:22:29,570
minutes and this is the client ID and

00:22:26,440 --> 00:22:30,980
you have valid redirect URLs if you see

00:22:29,570 --> 00:22:34,100
here you have something called as

00:22:30,980 --> 00:22:37,010
advanced settings and this is T wherein

00:22:34,100 --> 00:22:39,350
you can set the access token lifespan so

00:22:37,010 --> 00:22:41,810
quite a lot of features are that you

00:22:39,350 --> 00:22:45,750
require for implementing both are all

00:22:41,810 --> 00:22:49,170
present in Kiko so it's it's quite good

00:22:45,750 --> 00:22:52,980
okay let's move back to our presentation

00:22:49,170 --> 00:22:55,680
okay so the next step is registering

00:22:52,980 --> 00:22:57,210
different lines so yeah this is so now

00:22:55,680 --> 00:22:59,850
I'm going to share some things with you

00:22:57,210 --> 00:23:01,830
that I particularly faced or when I

00:22:59,850 --> 00:23:05,340
spoke to people who are kind of trying

00:23:01,830 --> 00:23:07,770
to implement this algorithm or this kind

00:23:05,340 --> 00:23:09,930
of flow the code run flow into their

00:23:07,770 --> 00:23:13,820
applications so one thing I noticed is

00:23:09,930 --> 00:23:17,700
that if if they have if people have an

00:23:13,820 --> 00:23:21,450
application which has CLI and a UI to

00:23:17,700 --> 00:23:24,300
their application so they have just one

00:23:21,450 --> 00:23:26,970
type of accident just one type of access

00:23:24,300 --> 00:23:32,400
type you know if you see here like when

00:23:26,970 --> 00:23:33,750
I showed you the teatro console you have

00:23:32,400 --> 00:23:35,610
something called as access type over

00:23:33,750 --> 00:23:37,530
here right which has options like

00:23:35,610 --> 00:23:39,360
confidential public and their only so

00:23:37,530 --> 00:23:41,360
mostly these two options are used like

00:23:39,360 --> 00:23:44,040
confidential or public and it is very

00:23:41,360 --> 00:23:48,150
important for you to identify which type

00:23:44,040 --> 00:23:50,460
of client it is so let's look at the

00:23:48,150 --> 00:23:54,480
presentation this is this I have taken

00:23:50,460 --> 00:23:57,090
up from the key log documentation which

00:23:54,480 --> 00:23:59,190
is public access type is for client-side

00:23:57,090 --> 00:24:01,560
applications that need to perform a

00:23:59,190 --> 00:24:03,840
browser logging with a client-side

00:24:01,560 --> 00:24:06,600
application there is no way to keep a

00:24:03,840 --> 00:24:08,610
secret safe instead it is very important

00:24:06,600 --> 00:24:10,800
to restrict access by configuring

00:24:08,610 --> 00:24:14,130
correctly directive or elles for

00:24:10,800 --> 00:24:17,520
redirect URLs for the client we record

00:24:14,130 --> 00:24:21,630
for the cat okay so so redirect URIs for

00:24:17,520 --> 00:24:24,840
the client so what this means is that if

00:24:21,630 --> 00:24:27,030
you have a server-side application so I

00:24:24,840 --> 00:24:30,360
will show that to you in the demo that

00:24:27,030 --> 00:24:33,420
you will see that hammer CLI is a client

00:24:30,360 --> 00:24:35,010
there's a CLI client and whereas for

00:24:33,420 --> 00:24:36,990
ministy server application that we are

00:24:35,010 --> 00:24:40,060
going to use for the demonstration so

00:24:36,990 --> 00:24:42,190
you will understand that

00:24:40,060 --> 00:24:44,320
they are different types of clients and

00:24:42,190 --> 00:24:46,600
for different kind of clients you must

00:24:44,320 --> 00:24:48,310
have different kind of access types now

00:24:46,600 --> 00:24:50,080
what I've seen in the application is

00:24:48,310 --> 00:24:52,300
that mostly I have seen is that they

00:24:50,080 --> 00:24:54,100
just have confidential climbs in

00:24:52,300 --> 00:24:56,680
confidential clients you have something

00:24:54,100 --> 00:24:58,810
called as secrets and these secrets are

00:24:56,680 --> 00:25:00,670
used to you know of these are like

00:24:58,810 --> 00:25:02,590
symmetric keys which you share on your

00:25:00,670 --> 00:25:05,860
client and your you know on your

00:25:02,590 --> 00:25:08,530
alterations over on your copa90 connect

00:25:05,860 --> 00:25:11,920
provider like Key Club so if you see we

00:25:08,530 --> 00:25:13,540
have decreed in the credentials section

00:25:11,920 --> 00:25:15,400
we have this something called as a

00:25:13,540 --> 00:25:18,460
secret so this is what I was talking

00:25:15,400 --> 00:25:20,950
about so this secret is used or you know

00:25:18,460 --> 00:25:22,090
on the client side and this is also

00:25:20,950 --> 00:25:24,520
stored on the server so this is

00:25:22,090 --> 00:25:27,310
basically a symmetric kind of a secret

00:25:24,520 --> 00:25:29,380
and whenever the client does a request

00:25:27,310 --> 00:25:31,360
to the server the you know slanders a

00:25:29,380 --> 00:25:34,000
request to you so what it basically does

00:25:31,360 --> 00:25:35,620
is with this secret so the server tries

00:25:34,000 --> 00:25:36,820
to you know check if the secret is

00:25:35,620 --> 00:25:39,280
correct and then it does the

00:25:36,820 --> 00:25:41,920
authentication but that is not the case

00:25:39,280 --> 00:25:43,900
in the case of in the case of public

00:25:41,920 --> 00:25:46,630
lands so when you have a public line you

00:25:43,900 --> 00:25:48,640
don't use secrets because in the public

00:25:46,630 --> 00:25:51,640
lines you don't have a way to keep your

00:25:48,640 --> 00:25:55,420
secrets safe from you know getting

00:25:51,640 --> 00:25:57,250
leaked so we don't use secrets in public

00:25:55,420 --> 00:25:59,680
lands so you must take care of this I

00:25:57,250 --> 00:26:00,430
have noticed that a lot of applications

00:25:59,680 --> 00:26:03,340
don't do that

00:26:00,430 --> 00:26:05,620
and so you should so you should keep

00:26:03,340 --> 00:26:08,500
different clients ratio different lines

00:26:05,620 --> 00:26:12,010
in fact in respect for or 2.0 it

00:26:08,500 --> 00:26:15,400
particularly says that you must not be

00:26:12,010 --> 00:26:18,970
shy of using different reading different

00:26:15,400 --> 00:26:21,430
lines so yeah so this is one thing that

00:26:18,970 --> 00:26:23,640
I wanted to mention the another thing

00:26:21,430 --> 00:26:26,020
will start redirect URL so

00:26:23,640 --> 00:26:28,990
redirect URLs are supposed to be very

00:26:26,020 --> 00:26:31,930
specific and to your applique your

00:26:28,990 --> 00:26:33,430
application so it must not be something

00:26:31,930 --> 00:26:35,620
like a third party you are redirecting

00:26:33,430 --> 00:26:38,620
to a it should not be like that it

00:26:35,620 --> 00:26:41,380
should be your own code suicide code

00:26:38,620 --> 00:26:44,800
that you have written and you have

00:26:41,380 --> 00:26:45,970
basically control over it and and and it

00:26:44,800 --> 00:26:48,070
should not be something like this you

00:26:45,970 --> 00:26:50,200
know I've seen in a lot of cases where

00:26:48,070 --> 00:26:52,000
people do something like this like they

00:26:50,200 --> 00:26:53,260
put their domain and then they put a

00:26:52,000 --> 00:26:56,650
slash and then

00:26:53,260 --> 00:26:59,680
start so this is not correct and this

00:26:56,650 --> 00:27:02,110
gives more scope for the attackers to

00:26:59,680 --> 00:27:04,570
you know make your application one or it

00:27:02,110 --> 00:27:06,370
in the same way you you must not do

00:27:04,570 --> 00:27:09,070
something like HTTP colon slash slash

00:27:06,370 --> 00:27:11,200
and then give a you know start dot

00:27:09,070 --> 00:27:12,970
example.com because this is again it

00:27:11,200 --> 00:27:16,000
gives a lot of space for the attackers

00:27:12,970 --> 00:27:18,580
to you get through your website you must

00:27:16,000 --> 00:27:20,170
take care of redirect URLs if you have

00:27:18,580 --> 00:27:23,050
fought and already let me show you where

00:27:20,170 --> 00:27:25,690
these redirect URLs can be found you can

00:27:23,050 --> 00:27:27,580
go to your client now inside your client

00:27:25,690 --> 00:27:30,790
you will have these redirect URLs it

00:27:27,580 --> 00:27:34,840
must be very very very specific to your

00:27:30,790 --> 00:27:38,380
application and you must know like where

00:27:34,840 --> 00:27:42,160
you're redirecting to so that's about it

00:27:38,380 --> 00:27:44,350
and let's look at the next session

00:27:42,160 --> 00:27:47,049
element so I forgot to tell you

00:27:44,350 --> 00:27:51,639
something so

00:27:47,049 --> 00:27:55,179
when you using public lines and when you

00:27:51,639 --> 00:27:58,090
using public lines you give a lot of you

00:27:55,179 --> 00:28:00,850
know space for attackers to attack your

00:27:58,090 --> 00:28:04,419
applications even if you are using code

00:28:00,850 --> 00:28:07,480
grant flow rate when you using code

00:28:04,419 --> 00:28:10,989
grant flow what happens is that after

00:28:07,480 --> 00:28:12,399
certain point this happened to me with

00:28:10,989 --> 00:28:14,980
my application right now so after a

00:28:12,399 --> 00:28:17,590
certain point my SSL terminated at the

00:28:14,980 --> 00:28:19,239
at the load balancer and after that it

00:28:17,590 --> 00:28:23,470
was just plain text so the code could be

00:28:19,239 --> 00:28:25,749
the code that is passed in the grant

00:28:23,470 --> 00:28:28,269
flow method if you remember program flow

00:28:25,749 --> 00:28:29,889
there is a code that gets passed that

00:28:28,269 --> 00:28:31,779
can be retrieved by an attacker

00:28:29,889 --> 00:28:34,960
now once the attacker has the code it

00:28:31,779 --> 00:28:38,409
can it can basically you know get into

00:28:34,960 --> 00:28:41,019
the system and do stuff so what what

00:28:38,409 --> 00:28:43,450
they did is what the folks in the

00:28:41,019 --> 00:28:45,970
community did is they you know they

00:28:43,450 --> 00:28:49,350
remove something called as proof key for

00:28:45,970 --> 00:28:56,529
code exchange so let me show that to you

00:28:49,350 --> 00:28:59,440
ruski for food exchange yeah this is the

00:28:56,529 --> 00:29:02,710
RFC and what it says is that pkc is an

00:28:59,440 --> 00:29:05,590
extension of authorization code flow to

00:29:02,710 --> 00:29:07,450
prevent certain attacks to be a and to

00:29:05,590 --> 00:29:09,940
be able to secure perform over that

00:29:07,450 --> 00:29:12,609
change from public lines it is primarily

00:29:09,940 --> 00:29:14,230
used by mobile and JavaScript apps but

00:29:12,609 --> 00:29:17,739
the technique can be applied to client

00:29:14,230 --> 00:29:19,960
any clients as well so it is a good

00:29:17,739 --> 00:29:21,999
practice to always have a pkc

00:29:19,960 --> 00:29:24,309
implemented whether you have a public or

00:29:21,999 --> 00:29:26,289
a credential or a confidential client

00:29:24,309 --> 00:29:27,730
but it is always a good project is

00:29:26,289 --> 00:29:29,399
always set to be a good practice to have

00:29:27,730 --> 00:29:32,109
this in place

00:29:29,399 --> 00:29:35,499
most cases when you using a public land

00:29:32,109 --> 00:29:36,789
it is a must so you must have it so I

00:29:35,499 --> 00:29:41,200
haven't implemented in my application

00:29:36,789 --> 00:29:42,639
but yes I have to in few days so yeah so

00:29:41,200 --> 00:29:44,679
you should have this in your

00:29:42,639 --> 00:29:46,929
applications if you were using a public

00:29:44,679 --> 00:29:50,859
land so that's about it

00:29:46,929 --> 00:29:53,590
let's get back and let's move to the

00:29:50,859 --> 00:29:55,389
next like session management now you

00:29:53,590 --> 00:29:57,370
must be thinking at all what is this why

00:29:55,389 --> 00:29:59,680
is this slide empty

00:29:57,370 --> 00:30:03,220
the slide is empty because it has to be

00:29:59,680 --> 00:30:06,370
empty the spec does not provide a very

00:30:03,220 --> 00:30:11,020
specific way of how to manage the

00:30:06,370 --> 00:30:12,730
session it does not say when to what is

00:30:11,020 --> 00:30:14,590
the appropriate time what is the exact

00:30:12,730 --> 00:30:16,450
appropriate time to logout it does not

00:30:14,590 --> 00:30:18,310
give us the exact appropriate time for

00:30:16,450 --> 00:30:20,910
the access token it does not say how you

00:30:18,310 --> 00:30:23,380
should log so for example you are on

00:30:20,910 --> 00:30:25,290
let's consider this use case ok wherein

00:30:23,380 --> 00:30:27,850
you are locked in from your browser and

00:30:25,290 --> 00:30:29,800
you are also logged in from your mobile

00:30:27,850 --> 00:30:31,870
application or like any other mobile

00:30:29,800 --> 00:30:32,680
application so once you log out from

00:30:31,870 --> 00:30:34,180
your mobile

00:30:32,680 --> 00:30:37,870
should you be logged up from your

00:30:34,180 --> 00:30:39,700
browser also no right you would be very

00:30:37,870 --> 00:30:42,430
frustrated with that so these kind of

00:30:39,700 --> 00:30:44,020
things right the session management in

00:30:42,430 --> 00:30:46,840
the spec it does not mention anything

00:30:44,020 --> 00:30:49,510
about how you should you know logout or

00:30:46,840 --> 00:30:52,200
how much time your access or your ID

00:30:49,510 --> 00:30:55,180
token must be valid and things like that

00:30:52,200 --> 00:30:58,000
so this is you know kept blank

00:30:55,180 --> 00:31:01,540
intentionally but there are some

00:30:58,000 --> 00:31:04,000
mechanisms that the spec does provide

00:31:01,540 --> 00:31:05,650
that is one of them is the refresh

00:31:04,000 --> 00:31:08,020
tokens let's understand this refresh

00:31:05,650 --> 00:31:10,870
token so there are access tokens and

00:31:08,020 --> 00:31:13,090
there are refresh token so so when your

00:31:10,870 --> 00:31:16,360
so when you do a request to the odds

00:31:13,090 --> 00:31:19,120
over on the first time that time it

00:31:16,360 --> 00:31:20,770
gives back to you an access token and a

00:31:19,120 --> 00:31:23,080
refresh token on the first time when you

00:31:20,770 --> 00:31:24,910
do now they in this diagram you are

00:31:23,080 --> 00:31:26,800
already authenticated so now you already

00:31:24,910 --> 00:31:29,110
have an access token and a refresh token

00:31:26,800 --> 00:31:31,870
consider that now what happens is that

00:31:29,110 --> 00:31:34,900
when your when your access token expires

00:31:31,870 --> 00:31:36,850
on the clients eyes when when say your

00:31:34,900 --> 00:31:39,250
access token has expired on the client

00:31:36,850 --> 00:31:42,880
side what this client will do it will

00:31:39,250 --> 00:31:45,490
send a Refresh token to this authsub now

00:31:42,880 --> 00:31:47,320
this refresh token will the thought

00:31:45,490 --> 00:31:49,900
server will use this refresh token to

00:31:47,320 --> 00:31:51,700
generate another access token and this

00:31:49,900 --> 00:31:54,970
access token will be passed to declined

00:31:51,700 --> 00:31:56,590
again right and then this access token

00:31:54,970 --> 00:31:59,500
the new access token is used for

00:31:56,590 --> 00:32:00,760
authentication and then you can use then

00:31:59,500 --> 00:32:02,380
you can have access to the particular

00:32:00,760 --> 00:32:04,270
business so this is how it works so

00:32:02,380 --> 00:32:07,320
every time you make a require every time

00:32:04,270 --> 00:32:09,760
the you know the client makes a request

00:32:07,320 --> 00:32:10,860
it gets an access token and a refresh

00:32:09,760 --> 00:32:12,720
token a pair of

00:32:10,860 --> 00:32:14,730
and what happens is that whenever the

00:32:12,720 --> 00:32:17,279
access token is access token basically

00:32:14,730 --> 00:32:18,929
supposed to be a short-lived and refresh

00:32:17,279 --> 00:32:22,140
token is supposed to be long-lived so

00:32:18,929 --> 00:32:24,659
whenever your access token expires the

00:32:22,140 --> 00:32:26,850
client sends the Refresh token and the

00:32:24,659 --> 00:32:29,010
odds over sees if this if it's token is

00:32:26,850 --> 00:32:30,630
valid it again returns access token it

00:32:29,010 --> 00:32:32,669
also returns the Refresh token and not

00:32:30,630 --> 00:32:34,830
that the defect Oken is not changed or

00:32:32,669 --> 00:32:37,230
something it returns a pair of both

00:32:34,830 --> 00:32:39,120
access token and Refresh token so it

00:32:37,230 --> 00:32:40,919
returns them both and this not just the

00:32:39,120 --> 00:32:44,970
new access token is used to you know

00:32:40,919 --> 00:32:47,580
used and so so and when this access

00:32:44,970 --> 00:32:49,799
token again expires the Refresh token is

00:32:47,580 --> 00:32:53,820
used to get pair of access token and

00:32:49,799 --> 00:32:57,240
refresh them so that's how this method

00:32:53,820 --> 00:33:00,570
books so that's about it that's about

00:32:57,240 --> 00:33:03,029
how refresh tokens work so we've come to

00:33:00,570 --> 00:33:07,080
D final and the third part of this

00:33:03,029 --> 00:33:09,500
presentation that is implementing you

00:33:07,080 --> 00:33:12,720
know open ID connect with formal project

00:33:09,500 --> 00:33:14,970
and let me give you a quick introduction

00:33:12,720 --> 00:33:19,710
about what is form in project first and

00:33:14,970 --> 00:33:24,139
then we will move deep into how we have

00:33:19,710 --> 00:33:24,139
implemented SSO with deform and project

00:33:25,800 --> 00:33:33,190
so let's understand what is boom in

00:33:28,810 --> 00:33:35,680
first booming is a complete lifecycle

00:33:33,190 --> 00:33:38,650
management tool right so when we talk

00:33:35,680 --> 00:33:41,320
about foreman we talk about complete

00:33:38,650 --> 00:33:42,460
lifecycle management okay so when we

00:33:41,320 --> 00:33:44,800
talk about complete like second

00:33:42,460 --> 00:33:46,300
management we do provisioning first you

00:33:44,800 --> 00:33:48,070
configure first you provision your

00:33:46,300 --> 00:33:51,940
machine then you configure that machine

00:33:48,070 --> 00:33:55,000
and then you do monitoring so normally

00:33:51,940 --> 00:33:57,400
whenever we like see a lot of tools that

00:33:55,000 --> 00:33:58,990
do configuration management so when you

00:33:57,400 --> 00:34:00,940
when can you do configuration element

00:33:58,990 --> 00:34:02,950
once you have a base operating system

00:34:00,940 --> 00:34:04,540
upon that you can do configuration

00:34:02,950 --> 00:34:06,220
management once you have the

00:34:04,540 --> 00:34:08,260
configuration management done you need

00:34:06,220 --> 00:34:10,180
to monitor those machines to see that if

00:34:08,260 --> 00:34:12,490
they are still you know maintaining that

00:34:10,180 --> 00:34:14,380
state or not so these are kind of things

00:34:12,490 --> 00:34:15,970
that you know segregate all three

00:34:14,380 --> 00:34:18,310
components but with Fermin you get them

00:34:15,970 --> 00:34:20,290
all together so you can do provisioning

00:34:18,310 --> 00:34:22,690
configuration management and you can do

00:34:20,290 --> 00:34:24,370
monitoring all of that has a complete

00:34:22,690 --> 00:34:26,070
lifecycle management you can do it for

00:34:24,370 --> 00:34:29,130
me

00:34:26,070 --> 00:34:30,690
so let's see the demo now and after that

00:34:29,130 --> 00:34:32,670
we'll see the architecture let's see

00:34:30,690 --> 00:34:37,020
what all things that we have right now

00:34:32,670 --> 00:34:39,210
so if you see there is my terminal if

00:34:37,020 --> 00:34:41,790
you see my terminal I hope you are being

00:34:39,210 --> 00:34:44,250
able to see clearly there is this you

00:34:41,790 --> 00:34:48,140
know this server forming server that is

00:34:44,250 --> 00:34:51,630
running around and there is this hammer

00:34:48,140 --> 00:34:53,970
you know the hammer CLI which is the

00:34:51,630 --> 00:34:58,850
client application and let me show you

00:34:53,970 --> 00:35:02,180
what we have over here so let me open up

00:34:58,850 --> 00:35:06,869
foreign trade

00:35:02,180 --> 00:35:08,400
so since I you know a some time back I

00:35:06,869 --> 00:35:10,470
had just logged in so it didn't ask me

00:35:08,400 --> 00:35:12,240
for a username puzzle but that's how you

00:35:10,470 --> 00:35:15,869
kind of login into form in this is the

00:35:12,240 --> 00:35:18,599
dashboard for you Perelman and then you

00:35:15,869 --> 00:35:21,210
have like the hosts and then you can you

00:35:18,599 --> 00:35:22,920
have discovered hose so you can create

00:35:21,210 --> 00:35:26,190
your host you can provision machines

00:35:22,920 --> 00:35:29,190
from basically from Perlman you can

00:35:26,190 --> 00:35:29,670
configure those holes you can have post

00:35:29,190 --> 00:35:32,309
groups

00:35:29,670 --> 00:35:35,819
discovery rules and even our different

00:35:32,309 --> 00:35:37,710
organizations within locations and you

00:35:35,819 --> 00:35:39,299
have tons of things to do where you're

00:35:37,710 --> 00:35:41,819
being perceptual like you can set up

00:35:39,299 --> 00:35:44,849
subnets domains for where your hosts

00:35:41,819 --> 00:35:49,069
should be you know created for and then

00:35:44,849 --> 00:35:51,329
you have this administrative

00:35:49,069 --> 00:35:53,220
administration and then to look so so

00:35:51,329 --> 00:35:56,420
what we're going to do a look at here is

00:35:53,220 --> 00:35:56,420
three settings and

00:35:56,690 --> 00:36:02,190
inside the settings what we're going to

00:35:59,040 --> 00:36:05,730
do is go to the authentication and check

00:36:02,190 --> 00:36:08,340
this up so we have this algorithm YDC

00:36:05,730 --> 00:36:12,870
algorithm where you see audience visual

00:36:08,340 --> 00:36:16,920
and we have the kW page URL so let's now

00:36:12,870 --> 00:36:19,590
see the you know the slides and see if

00:36:16,920 --> 00:36:21,560
that makes sense let's see this so how

00:36:19,590 --> 00:36:25,860
much CLI where is a client application

00:36:21,560 --> 00:36:26,700
which has the you know which is going to

00:36:25,860 --> 00:36:30,060
make the request

00:36:26,700 --> 00:36:33,110
so hammer will first what we'll do is it

00:36:30,060 --> 00:36:35,490
will it will request T group for a token

00:36:33,110 --> 00:36:38,490
toe hammer goes to kilobit does a

00:36:35,490 --> 00:36:41,190
request now kilo performs authentication

00:36:38,490 --> 00:36:43,560
and issues a token to hammer or if the

00:36:41,190 --> 00:36:45,690
user is valid if the user authenticate

00:36:43,560 --> 00:36:47,640
itself then what we keep you'll do it we

00:36:45,690 --> 00:36:50,160
return back ID token

00:36:47,640 --> 00:36:52,410
now once hammer sealer permanent gets

00:36:50,160 --> 00:36:55,110
the token it passes this token to

00:36:52,410 --> 00:36:56,850
Foreman now Pohlman this is very

00:36:55,110 --> 00:36:59,130
important this part is team you know

00:36:56,850 --> 00:37:00,690
most important part here is that when

00:36:59,130 --> 00:37:02,190
Foreman receives this token right it

00:37:00,690 --> 00:37:04,020
could it could receive this token from

00:37:02,190 --> 00:37:07,230
anywhere like it could receive this

00:37:04,020 --> 00:37:08,700
token from API or anywhere right so we

00:37:07,230 --> 00:37:10,050
cannot toss the token that is coming

00:37:08,700 --> 00:37:13,320
from hammer directly we need to verify

00:37:10,050 --> 00:37:15,270
that token now to verify that token if

00:37:13,320 --> 00:37:17,970
you remember it's a JWT the token is a

00:37:15,270 --> 00:37:20,070
JWT now in that j TT this header this

00:37:17,970 --> 00:37:22,710
payload and there is signature right now

00:37:20,070 --> 00:37:25,200
what we do is we decode this entire GWT

00:37:22,710 --> 00:37:29,190
and we check the fields we check the

00:37:25,200 --> 00:37:31,920
fields of the token so yeah so we

00:37:29,190 --> 00:37:34,830
validate the token and then if the token

00:37:31,920 --> 00:37:37,050
is like authentic token then we create a

00:37:34,830 --> 00:37:38,880
user in the Komen database after

00:37:37,050 --> 00:37:40,470
creating the user in the form in

00:37:38,880 --> 00:37:42,570
database then we you know go back to our

00:37:40,470 --> 00:37:44,640
previous implementation of you know

00:37:42,570 --> 00:37:46,170
roman creates its own session ID and

00:37:44,640 --> 00:37:48,230
then that session ID is passed to hammer

00:37:46,170 --> 00:37:50,940
and that hammer uses now every time to

00:37:48,230 --> 00:37:52,440
you know talk to Foreman so this is kind

00:37:50,940 --> 00:37:54,420
of the architecture that we have you

00:37:52,440 --> 00:37:57,300
know figure it out in our particular way

00:37:54,420 --> 00:37:58,800
but you know you can manage a logout or

00:37:57,300 --> 00:38:00,180
you know you could have used refresh

00:37:58,800 --> 00:38:02,190
token so you could do stuff like that

00:38:00,180 --> 00:38:05,460
but as I said session management is up

00:38:02,190 --> 00:38:07,310
to you and your you know application

00:38:05,460 --> 00:38:09,330
architecture so this is what we follow

00:38:07,310 --> 00:38:09,900
let's the why is it again so Foreman

00:38:09,330 --> 00:38:12,330
gives

00:38:09,900 --> 00:38:15,300
so how much it was key clothes to give

00:38:12,330 --> 00:38:17,970
it a you know the token it does

00:38:15,300 --> 00:38:19,350
authentication then it gets T token this

00:38:17,970 --> 00:38:21,930
token is passed a form in Pullman

00:38:19,350 --> 00:38:24,000
basically validates this token the fit

00:38:21,930 --> 00:38:26,160
is an authentic user then it creates a

00:38:24,000 --> 00:38:28,830
user inside common database and also

00:38:26,160 --> 00:38:31,170
creates a session session ID and this

00:38:28,830 --> 00:38:35,340
IDs pass to hammer sila which it stores

00:38:31,170 --> 00:38:38,310
in its local storage so that's about it

00:38:35,340 --> 00:38:40,560
and now let's look at what we have which

00:38:38,310 --> 00:38:43,850
will make more sense so we have a moment

00:38:40,560 --> 00:38:47,970
server running here and we have a hammer

00:38:43,850 --> 00:38:50,340
CLI machine here on which hammer CL is

00:38:47,970 --> 00:38:52,710
deployed so sure what I am going to do

00:38:50,340 --> 00:38:56,370
is I am going to run a command here so

00:38:52,710 --> 00:38:57,720
it says hammer orc login both to factor

00:38:56,370 --> 00:38:59,670
so this is two-factor authentication

00:38:57,720 --> 00:39:02,340
that is why it is called to factor and

00:38:59,670 --> 00:39:04,050
then there is YDC authorization endpoint

00:39:02,340 --> 00:39:06,630
so you require this authorization

00:39:04,050 --> 00:39:10,500
endpoint which are let let me explain

00:39:06,630 --> 00:39:15,960
you this in another way so let's get

00:39:10,500 --> 00:39:18,660
back here okay so there is this URL

00:39:15,960 --> 00:39:20,610
called value in URL so if you go to this

00:39:18,660 --> 00:39:23,610
value URL you will get all the endpoints

00:39:20,610 --> 00:39:25,830
so you should making a request you need

00:39:23,610 --> 00:39:28,350
the authorization in point you need the

00:39:25,830 --> 00:39:33,330
token in point and then you need other

00:39:28,350 --> 00:39:35,310
parameters like the client ID and then

00:39:33,330 --> 00:39:39,390
you leave deleted at your end so all

00:39:35,310 --> 00:39:42,120
these things like you need all these you

00:39:39,390 --> 00:39:45,090
know parameters and that's how you can

00:39:42,120 --> 00:39:46,980
login so and and one more thing like the

00:39:45,090 --> 00:39:48,480
most important thing out of it I was

00:39:46,980 --> 00:39:50,610
explaining you that and then a large

00:39:48,480 --> 00:39:54,090
track so I'm gonna community alone so in

00:39:50,610 --> 00:39:55,710
Forman if you see like we have four we

00:39:54,090 --> 00:39:58,800
have four parameters the audience the

00:39:55,710 --> 00:40:01,170
issuer the jwk SEL so all these

00:39:58,800 --> 00:40:04,050
parameters are also found at this you

00:40:01,170 --> 00:40:06,030
know at this endpoint or URL like this

00:40:04,050 --> 00:40:08,040
well-known open any configuration so you

00:40:06,030 --> 00:40:09,740
get all these endpoints there and what

00:40:08,040 --> 00:40:12,600
what you're doing is basically when

00:40:09,740 --> 00:40:14,700
hammer will pass the token to Foreman

00:40:12,600 --> 00:40:17,040
Puma needs to validate that token so how

00:40:14,700 --> 00:40:19,170
does it validate so inside the header if

00:40:17,040 --> 00:40:22,170
you remember you happy I will dimension

00:40:19,170 --> 00:40:24,220
so we check if the algorithm mentioned

00:40:22,170 --> 00:40:26,470
in the header of the JWT match

00:40:24,220 --> 00:40:28,000
with the you know with the header that

00:40:26,470 --> 00:40:31,090
with the algorithm that we have provided

00:40:28,000 --> 00:40:33,460
here then we check the audience or AUD

00:40:31,090 --> 00:40:35,050
was a parameter in the payload so we

00:40:33,460 --> 00:40:36,400
check the page so what we're doing here

00:40:35,050 --> 00:40:37,869
is we're checking the header that the

00:40:36,400 --> 00:40:39,970
values of the header authentic we're

00:40:37,869 --> 00:40:41,740
checking some claims they're called

00:40:39,970 --> 00:40:44,230
claims right this audience is called

00:40:41,740 --> 00:40:46,150
cream issuer is called a claim so we are

00:40:44,230 --> 00:40:48,490
basically checking this claim so we

00:40:46,150 --> 00:40:50,260
check the header here in this we check

00:40:48,490 --> 00:40:51,760
the payload this is again from the

00:40:50,260 --> 00:40:53,920
payload so we check the payload again

00:40:51,760 --> 00:40:57,250
and this one is to check the signature

00:40:53,920 --> 00:40:58,540
so why dcj wks URL is basically where it

00:40:57,250 --> 00:41:02,740
contains its certs

00:40:58,540 --> 00:41:04,570
so we check if this if we basically

00:41:02,740 --> 00:41:08,200
encode the signature and then we check

00:41:04,570 --> 00:41:10,150
if the signature gets if if bit

00:41:08,200 --> 00:41:11,740
providing the CAW case URL if the

00:41:10,150 --> 00:41:13,869
signature if the entire table gets

00:41:11,740 --> 00:41:18,670
decoded and the signature gets verified

00:41:13,869 --> 00:41:21,070
so this is what this parameter means so

00:41:18,670 --> 00:41:23,950
we have all these endpoints over here so

00:41:21,070 --> 00:41:25,599
JW case URIs here and authentication

00:41:23,950 --> 00:41:28,720
endpoint token endpoint you get all

00:41:25,599 --> 00:41:30,250
these parameters here so going back to

00:41:28,720 --> 00:41:32,650
the demo let's see how this thing

00:41:30,250 --> 00:41:34,690
actually works so what we will do is we

00:41:32,650 --> 00:41:36,730
will run this command and we will see

00:41:34,690 --> 00:41:39,339
what happens when you run this command

00:41:36,730 --> 00:41:42,130
on the back end what is happening is now

00:41:39,339 --> 00:41:45,010
hammer is going to key cloak and trying

00:41:42,130 --> 00:41:47,770
to request something but what you need

00:41:45,010 --> 00:41:50,740
to do is you get this you are it says

00:41:47,770 --> 00:41:52,780
enter URL in the browser so what we do

00:41:50,740 --> 00:41:54,670
is we copy this so according to the

00:41:52,780 --> 00:41:57,550
parameters that were passed over here

00:41:54,670 --> 00:42:00,880
just ignore these warnings those are not

00:41:57,550 --> 00:42:04,330
important so with the parameters here we

00:42:00,880 --> 00:42:06,160
have created a URL and we are saying

00:42:04,330 --> 00:42:07,510
that enter this URL in the browser so

00:42:06,160 --> 00:42:11,800
what we want to do is we are going to

00:42:07,510 --> 00:42:14,410
copy this URL and we are going to just

00:42:11,800 --> 00:42:17,740
maybe open an incognito mode and then

00:42:14,410 --> 00:42:19,900
just paste this URL once you paste this

00:42:17,740 --> 00:42:21,640
URL what happens is you are redirected

00:42:19,900 --> 00:42:23,980
to key clue now once you are redirected

00:42:21,640 --> 00:42:25,390
to key cloak you need to do your thing

00:42:23,980 --> 00:42:27,970
you need to perform your authentication

00:42:25,390 --> 00:42:29,859
you now this page of authentication

00:42:27,970 --> 00:42:31,810
could be anything right now it is say

00:42:29,859 --> 00:42:34,060
user it's asking me for using a password

00:42:31,810 --> 00:42:36,580
it could be like Google Authenticator it

00:42:34,060 --> 00:42:37,700
could be like OTP it could be a smart

00:42:36,580 --> 00:42:39,350
card where you insert a

00:42:37,700 --> 00:42:40,910
mark card and then you get authenticated

00:42:39,350 --> 00:42:42,710
so it could be any kind of

00:42:40,910 --> 00:42:44,060
authentication right you need to choose

00:42:42,710 --> 00:42:47,300
that from the bindings that I showed you

00:42:44,060 --> 00:42:49,550
in like the previous demo about key

00:42:47,300 --> 00:42:50,960
clock so that's about it so I'm just

00:42:49,550 --> 00:42:53,330
going to log in I just created this

00:42:50,960 --> 00:42:55,790
dummy user called XYZ so I am just going

00:42:53,330 --> 00:42:58,430
to log in and you see it returns me the

00:42:55,790 --> 00:43:00,440
code it returns me the code I am going

00:42:58,430 --> 00:43:02,690
to copy this code and go back to my

00:43:00,440 --> 00:43:03,080
hammer screen and I'm going to paste the

00:43:02,690 --> 00:43:05,900
code here

00:43:03,080 --> 00:43:07,940
now what hammer will do it will go it

00:43:05,900 --> 00:43:10,010
will take this code it will go back to

00:43:07,940 --> 00:43:12,470
key cloak and get an access token

00:43:10,010 --> 00:43:15,920
once it gets the access token it will go

00:43:12,470 --> 00:43:17,570
to Foreman and then check if the if

00:43:15,920 --> 00:43:17,960
everything is correct if everything is

00:43:17,570 --> 00:43:20,090
correct

00:43:17,960 --> 00:43:22,250
women will create a session ID and

00:43:20,090 --> 00:43:25,310
return it back so if you see here it

00:43:22,250 --> 00:43:27,500
logged in as the user XY said now there

00:43:25,310 --> 00:43:32,690
is one way that we can check this thing

00:43:27,500 --> 00:43:35,540
is there is a file called session file

00:43:32,690 --> 00:43:37,850
if we do LS here and then we cat this

00:43:35,540 --> 00:43:42,890
particular file you will see that there

00:43:37,850 --> 00:43:46,190
is a username and and Y and it just got

00:43:42,890 --> 00:43:48,370
updated like so yeah so that's about it

00:43:46,190 --> 00:43:48,370
and

00:43:48,900 --> 00:43:55,829
yup that's basically what I want to say

00:43:52,049 --> 00:43:58,619
so just revising what we have learned

00:43:55,829 --> 00:44:01,109
right now is that have a request key

00:43:58,619 --> 00:44:02,969
clip for a token but key club you know

00:44:01,109 --> 00:44:06,180
you need to go to P Club and then key

00:44:02,969 --> 00:44:07,619
global returns you the token and then

00:44:06,180 --> 00:44:09,829
you give that token to form in form

00:44:07,619 --> 00:44:13,880
invalidates it and then returns back ID

00:44:09,829 --> 00:44:16,920
that's about it and let's just look at

00:44:13,880 --> 00:44:18,779
the full flow once again so yeah so what

00:44:16,920 --> 00:44:20,489
we did here is you try to access an

00:44:18,779 --> 00:44:24,479
application that is in our case we try

00:44:20,489 --> 00:44:26,969
to access Roman it gave us an URL to go

00:44:24,479 --> 00:44:28,890
to authorization code here when we did

00:44:26,969 --> 00:44:31,950
the authentication it gave back us the

00:44:28,890 --> 00:44:35,099
code code string we pasted that string

00:44:31,950 --> 00:44:36,690
in hammer to give back to the alteration

00:44:35,099 --> 00:44:38,700
then it gave those authorization server

00:44:36,690 --> 00:44:41,069
the authorization server in return gave

00:44:38,700 --> 00:44:42,779
us the access token once we got the

00:44:41,069 --> 00:44:44,999
access token we you know we sent it to

00:44:42,779 --> 00:44:46,469
Foreman to verify if it's authentic if

00:44:44,999 --> 00:44:49,979
it was authentic it returned the

00:44:46,469 --> 00:44:53,249
successful logins that's pretty much it

00:44:49,979 --> 00:44:54,900
now there's one thing that I want to

00:44:53,249 --> 00:44:57,930
discuss in the end which is again coming

00:44:54,900 --> 00:44:59,779
back to this slide is that the only

00:44:57,930 --> 00:45:02,880
things that I want to I want you to take

00:44:59,779 --> 00:45:05,940
away from this particular you know talk

00:45:02,880 --> 00:45:07,650
is that these three things first thing

00:45:05,940 --> 00:45:09,390
is that register different clients if

00:45:07,650 --> 00:45:11,700
you have different types of client

00:45:09,390 --> 00:45:13,739
identify them if you have a if you have

00:45:11,700 --> 00:45:15,359
a confidential client make it

00:45:13,739 --> 00:45:17,940
confidential if you have a public line

00:45:15,359 --> 00:45:20,039
make it public and identify the type of

00:45:17,940 --> 00:45:22,109
like identify their access types and

00:45:20,039 --> 00:45:26,249
then do it correctly second thing is

00:45:22,109 --> 00:45:28,400
don't do big redirect URLs always have

00:45:26,249 --> 00:45:30,989
correct redirect you arise okay and

00:45:28,400 --> 00:45:34,799
don't use your stars and things like

00:45:30,989 --> 00:45:36,390
that and you know think about your

00:45:34,799 --> 00:45:38,549
session management how you want to do it

00:45:36,390 --> 00:45:40,200
do you want to like have those access

00:45:38,549 --> 00:45:41,700
token refresh token kind of things or do

00:45:40,200 --> 00:45:43,769
you want to do it click once you

00:45:41,700 --> 00:45:44,880
authenticate and then you know the ID

00:45:43,769 --> 00:45:46,410
token you don't want to do anything

00:45:44,880 --> 00:45:49,019
which I took it now and this new session

00:45:46,410 --> 00:45:50,789
IDs like you would an earlier so yeah

00:45:49,019 --> 00:45:53,130
there are different ways or you can do

00:45:50,789 --> 00:45:54,569
it so just identify your way that suits

00:45:53,130 --> 00:45:58,190
you the best

00:45:54,569 --> 00:46:00,660
I have specifically used a lot of

00:45:58,190 --> 00:46:02,880
references here and I'm glad I could

00:46:00,660 --> 00:46:04,410
share with you

00:46:02,880 --> 00:46:06,030
but if you go through these

00:46:04,410 --> 00:46:08,270
specifications right they're quite

00:46:06,030 --> 00:46:12,330
boring like if you look at them are

00:46:08,270 --> 00:46:15,000
reading this is a little difficult iifa

00:46:12,330 --> 00:46:17,670
leave a little difficult because it's

00:46:15,000 --> 00:46:20,010
kind of like this kind of font is going

00:46:17,670 --> 00:46:22,590
to read and it's quite lengthy and it's

00:46:20,010 --> 00:46:25,230
all technical language so it kind of

00:46:22,590 --> 00:46:27,540
bores you so what I can what I would

00:46:25,230 --> 00:46:29,370
suggest you is you could either go

00:46:27,540 --> 00:46:30,600
through these blocks and journals that I

00:46:29,370 --> 00:46:35,460
have been through these are I took

00:46:30,600 --> 00:46:37,650
building blocks and some something's

00:46:35,460 --> 00:46:38,070
taken from the journal so this is quite

00:46:37,650 --> 00:46:40,470
good

00:46:38,070 --> 00:46:42,750
both these articles are quite good other

00:46:40,470 --> 00:46:44,910
than that I like also like to watch you

00:46:42,750 --> 00:46:47,640
know YouTube videos if you have seen the

00:46:44,910 --> 00:46:49,860
slides closely I have taken some of

00:46:47,640 --> 00:46:53,520
these slides from Dominic so thanks

00:46:49,860 --> 00:46:56,370
Dominic for you know just creating all

00:46:53,520 --> 00:47:00,000
these wonderful presentations and

00:46:56,370 --> 00:47:01,710
sharing it with us so yeah this video is

00:47:00,000 --> 00:47:04,410
really helpful and I got a lot of

00:47:01,710 --> 00:47:06,090
insight from your I also recommend you

00:47:04,410 --> 00:47:08,490
watching this authentication as a micro

00:47:06,090 --> 00:47:12,330
service by Brian and a reasonable guy to

00:47:08,490 --> 00:47:13,800
security by name so go ahead and thank

00:47:12,330 --> 00:47:16,140
you so much for your time I hope this

00:47:13,800 --> 00:47:18,900
was useful and take care of yourselves

00:47:16,140 --> 00:47:21,200
and all the besties

00:47:18,900 --> 00:47:37,710
thank you

00:47:21,200 --> 00:47:37,710

YouTube URL: https://www.youtube.com/watch?v=1dRMNzYHdDs


