Title: stackconf online 2020 | COBOL on Kubernetes by JJ Asghar
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	With Kubernetes owning the mind share of the next generation of applications, legacy applications are getting farther and farther behind. There is hesitation around moving these legacy applications to this new control plane and platform. They were developed at a time when there was a specific and consistent way of developing software allowing Developers to focus on the business value instead of the Operations requirements. The world is quickly moving on, and the software that runs a significant amount of the world is being left behind. This talk, Iâ€™ll walk through what I thought was originally a joke of a project, that became a perfect litmus test of why any developed application can run on this unified platform. With a measured amount of engineering effort, your company can move any language and any developed application to Kubernetes, gaining the power of both the shared control plane and Cloud Native velocity of development.

NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:14,549
[Music]

00:00:11,720 --> 00:00:16,080
hi my name is JJ Oscar and I'm a

00:00:14,549 --> 00:00:18,360
developer advocate for the IBM cloud

00:00:16,080 --> 00:00:20,970
you're here today's Chicot ball and

00:00:18,360 --> 00:00:24,029
kubernetes yes I had brought in a

00:00:20,970 --> 00:00:28,650
language made in the 1950s to run on our

00:00:24,029 --> 00:00:30,359
modern-day cloud native platform if you

00:00:28,650 --> 00:00:33,000
don't know COBOL COBOL stands for the

00:00:30,359 --> 00:00:35,210
common business oriented language it was

00:00:33,000 --> 00:00:37,650
designed specifically for businesses and

00:00:35,210 --> 00:00:41,309
government agencies to be able to do

00:00:37,650 --> 00:00:43,800
work and back in the back in the 1950s

00:00:41,309 --> 00:00:46,020
there's so many more so many companies

00:00:43,800 --> 00:00:47,969
so many banks still using it but they

00:00:46,020 --> 00:00:48,540
have no way of looking towards the

00:00:47,969 --> 00:00:50,730
future

00:00:48,540 --> 00:00:52,559
now don't be wrong mainframes are still

00:00:50,730 --> 00:00:55,469
very important the world still runs on

00:00:52,559 --> 00:00:59,039
mainframes and COBOL compilers are being

00:00:55,469 --> 00:01:00,809
constantly released but in this project

00:00:59,039 --> 00:01:03,690
that I started I wanted to prove to that

00:01:00,809 --> 00:01:06,090
you could or at this science experiment

00:01:03,690 --> 00:01:10,770
you could actually take a simple COBOL

00:01:06,090 --> 00:01:12,630
application and run it on kubernetes so

00:01:10,770 --> 00:01:14,520
I don't know exactly how much time I

00:01:12,630 --> 00:01:15,990
have for this talk but what I'm going to

00:01:14,520 --> 00:01:19,729
do is I'm going to just jump right in

00:01:15,990 --> 00:01:21,930
make sure that we have a consistent

00:01:19,729 --> 00:01:23,549
language to make sure that we all

00:01:21,930 --> 00:01:24,960
understand what we're talking about then

00:01:23,549 --> 00:01:25,979
I'm just going to show you the project

00:01:24,960 --> 00:01:28,490
and I'm actually going to run the

00:01:25,979 --> 00:01:31,860
project on a live COBOL on a live

00:01:28,490 --> 00:01:34,650
application I live ranae's cluster I

00:01:31,860 --> 00:01:37,290
will say the all the code is open source

00:01:34,650 --> 00:01:38,869
and free so you're more than welcome to

00:01:37,290 --> 00:01:40,950
take it down and play with it yourself

00:01:38,869 --> 00:01:43,829
compile it yourself and actually see

00:01:40,950 --> 00:01:45,720
that it works I think it's pretty cool

00:01:43,829 --> 00:01:47,310
and it was a fun little project that we

00:01:45,720 --> 00:01:49,020
got off the ground so I'm gonna go ahead

00:01:47,310 --> 00:01:52,799
and share my flip over and share my

00:01:49,020 --> 00:01:57,450
screen here there we go and I would be

00:01:52,799 --> 00:02:00,210
remiss not to mention we at IBM we have

00:01:57,450 --> 00:02:02,970
many many many resources for kubernetes

00:02:00,210 --> 00:02:05,759
specifically or kubernetes and COBOL and

00:02:02,970 --> 00:02:08,579
this right here if you are developer OBM

00:02:05,759 --> 00:02:10,530
comm slash technologies slash COBOL

00:02:08,579 --> 00:02:13,410
you'll actually learn a lot about it so

00:02:10,530 --> 00:02:15,000
if you have no knowledge or unco ball we

00:02:13,410 --> 00:02:17,220
have some great ways to start great ways

00:02:15,000 --> 00:02:18,569
to learn but if you want to just see

00:02:17,220 --> 00:02:21,410
some cool technology play with one

00:02:18,569 --> 00:02:24,200
another that's what this talk is about

00:02:21,410 --> 00:02:26,450
now what we're going to do

00:02:24,200 --> 00:02:29,780
is I'm going to create something called

00:02:26,450 --> 00:02:32,690
an ETL pipeline if you don't know ETL

00:02:29,780 --> 00:02:36,230
stands for extract terraform and load

00:02:32,690 --> 00:02:39,410
now imagine and this is true banks still

00:02:36,230 --> 00:02:41,750
use CSV files to transfer money back and

00:02:39,410 --> 00:02:44,480
forth right you have a bunch of account

00:02:41,750 --> 00:02:46,819
numbers and a total amount of money on

00:02:44,480 --> 00:02:48,950
an account when a Trank turn on the bank

00:02:46,819 --> 00:02:53,420
needs to transfer that money to another

00:02:48,950 --> 00:02:54,709
Bank they actually do send it over FTP

00:02:53,420 --> 00:02:56,569
if there's a different conversation but

00:02:54,709 --> 00:02:59,690
they do take that number that those

00:02:56,569 --> 00:03:02,060
those numbers and then they transform it

00:02:59,690 --> 00:03:03,829
in the sense of extract transform and

00:03:02,060 --> 00:03:06,620
then they load in that information else

00:03:03,829 --> 00:03:09,250
or so the majority of actual COBOL

00:03:06,620 --> 00:03:12,380
applications is slurping in some data

00:03:09,250 --> 00:03:14,900
munging it around and then putting it

00:03:12,380 --> 00:03:19,549
somewhere else so what I've done is I

00:03:14,900 --> 00:03:23,959
have created on kubernetes a very very

00:03:19,549 --> 00:03:28,069
very simple ETL pipeline if you go to

00:03:23,959 --> 00:03:30,019
github.com /jj Asghar slash cobol on k8s

00:03:28,069 --> 00:03:33,650
you can pull down all this code as I

00:03:30,019 --> 00:03:37,340
said in the introduction now if you look

00:03:33,650 --> 00:03:40,639
here we have is an s3 bucket which can

00:03:37,340 --> 00:03:42,590
be any s3 bucket that has some level of

00:03:40,639 --> 00:03:44,900
file inside of it I've run something

00:03:42,590 --> 00:03:46,430
called a watcher in we actually just

00:03:44,900 --> 00:03:49,160
sits there and poles waiting for the

00:03:46,430 --> 00:03:51,650
file to appear then we send it to a

00:03:49,160 --> 00:03:55,840
volume in this case what we were going

00:03:51,650 --> 00:03:59,420
to be using is a an empty dirt between

00:03:55,840 --> 00:04:01,340
three containers which I'll show in the

00:03:59,420 --> 00:04:03,350
deployment in just a moment then we're

00:04:01,340 --> 00:04:06,950
gonna have COBOL actually change those

00:04:03,350 --> 00:04:09,440
numbers for us and then I'm going to use

00:04:06,950 --> 00:04:10,790
a watcher out which basically says this

00:04:09,440 --> 00:04:12,739
is the file and shoves it somewhere else

00:04:10,790 --> 00:04:15,410
so you can imagine it is just another

00:04:12,739 --> 00:04:17,599
application going through it the most

00:04:15,410 --> 00:04:20,510
important part is being able to get the

00:04:17,599 --> 00:04:22,820
data in from somewhere using COBOL

00:04:20,510 --> 00:04:25,430
actually on kubernetes to crunch the

00:04:22,820 --> 00:04:28,280
numbers and then shove it somewhere else

00:04:25,430 --> 00:04:31,330
which is again all what it just in ETL

00:04:28,280 --> 00:04:33,110
pipeline is it's pulling in the data

00:04:31,330 --> 00:04:35,150
transforming the information or

00:04:33,110 --> 00:04:37,030
transforming the data and then shoving

00:04:35,150 --> 00:04:41,000
it off somewhere else

00:04:37,030 --> 00:04:43,790
so first thing first I'm gonna show the

00:04:41,000 --> 00:04:45,020
scripts of those those these the three

00:04:43,790 --> 00:04:46,790
different things to make sure everyone

00:04:45,020 --> 00:04:50,300
understands how straightforward and

00:04:46,790 --> 00:04:53,600
honestly simple this truly is right now

00:04:50,300 --> 00:04:56,030
we have our watcher in which is this

00:04:53,600 --> 00:04:59,410
right here it is literally a bash script

00:04:56,030 --> 00:05:02,360
that is constantly running looking for

00:04:59,410 --> 00:05:05,570
this s3 bucket and looking for a number

00:05:02,360 --> 00:05:07,910
called a file called number of texts and

00:05:05,570 --> 00:05:11,840
if you look right here this is the

00:05:07,910 --> 00:05:15,650
actual number of texts we have 23 744 52

00:05:11,840 --> 00:05:19,610
12 and 1 3 3 7 I couldn't I had to have

00:05:15,650 --> 00:05:21,920
132 them so I'm in there so what we do

00:05:19,610 --> 00:05:25,010
is we sit there constantly pulling for

00:05:21,920 --> 00:05:30,710
it to make sure this shows up then we

00:05:25,010 --> 00:05:32,360
have watcher out which will wait for the

00:05:30,710 --> 00:05:35,660
new file which will be called new

00:05:32,360 --> 00:05:37,250
numbers text in the location and then it

00:05:35,660 --> 00:05:39,110
will output these are the new numbers

00:05:37,250 --> 00:05:41,330
you can ship into however you need so it

00:05:39,110 --> 00:05:43,340
sees that the file has been changed and

00:05:41,330 --> 00:05:44,870
actually pushes it oh and just reads

00:05:43,340 --> 00:05:46,700
from it but in essence it would be able

00:05:44,870 --> 00:05:47,290
to push it if we add another place to

00:05:46,700 --> 00:05:50,960
put it

00:05:47,290 --> 00:05:53,690
now if you take it one step farther the

00:05:50,960 --> 00:05:55,850
actual will watch your dock cobalt which

00:05:53,690 --> 00:05:58,010
is the file this system actually runs it

00:05:55,850 --> 00:06:01,310
it looks for the file to make sure that

00:05:58,010 --> 00:06:04,190
it's there then it runs the application

00:06:01,310 --> 00:06:06,560
on top of it so again I've just wrapped

00:06:04,190 --> 00:06:07,900
a bunch of bash and then well one COBOL

00:06:06,560 --> 00:06:11,180
application that actually do the work

00:06:07,900 --> 00:06:14,090
now the yet the the magic of this is

00:06:11,180 --> 00:06:17,360
done inside this docker file now there's

00:06:14,090 --> 00:06:19,280
a lot here I'm not going to lie it has

00:06:17,360 --> 00:06:21,230
to compile cobalt which is good new

00:06:19,280 --> 00:06:22,420
cobalt I've not actually mentioned that

00:06:21,230 --> 00:06:25,100
yet

00:06:22,420 --> 00:06:26,030
Kanoe COBOL there's multiple versions of

00:06:25,100 --> 00:06:28,700
COBOL out there

00:06:26,030 --> 00:06:30,590
Kanoe COBOL is the open source one and I

00:06:28,700 --> 00:06:34,940
just wanted this again just as a perfect

00:06:30,590 --> 00:06:38,750
concept it will it spins up the sent OS

00:06:34,940 --> 00:06:41,780
built container installs it creates it

00:06:38,750 --> 00:06:45,050
then actually runs the COBOL compiler

00:06:41,780 --> 00:06:48,500
and creates this plus five numbers exe

00:06:45,050 --> 00:06:49,550
and then of the COBOL application I'll

00:06:48,500 --> 00:06:51,530
show that and just as

00:06:49,550 --> 00:06:52,849
and then we have the scripts to make

00:06:51,530 --> 00:06:55,660
sure we'd make that happen if you do

00:06:52,849 --> 00:07:00,319
need a good example of how to create

00:06:55,660 --> 00:07:05,889
layered docker containers as you can see

00:07:00,319 --> 00:07:05,889
from build here and actually you know

00:07:06,250 --> 00:07:09,860
smash containers down or smaller

00:07:08,240 --> 00:07:11,300
containers this is a really really good

00:07:09,860 --> 00:07:16,819
example so you know on so many layers

00:07:11,300 --> 00:07:19,039
anyway I digress if you take a look

00:07:16,819 --> 00:07:21,470
briefly here this is the actual COBOL

00:07:19,039 --> 00:07:24,560
application if you don't know cobalt

00:07:21,470 --> 00:07:28,430
that's up so we find the most important

00:07:24,560 --> 00:07:30,530
part is right here where it will

00:07:28,430 --> 00:07:32,419
actually slurp in the original numbers

00:07:30,530 --> 00:07:35,780
because it's all their current compute

00:07:32,419 --> 00:07:38,630
the exact result and multiply our add 5

00:07:35,780 --> 00:07:40,789
to it that's it which is very very

00:07:38,630 --> 00:07:41,900
straightforward so you can imagine what

00:07:40,789 --> 00:07:49,729
these numbers are gonna be it's gonna be

00:07:41,900 --> 00:07:50,000
28 7 plus 5 is 12 49 52 57 you got the

00:07:49,729 --> 00:07:53,659
point

00:07:50,000 --> 00:07:56,810
so again run the application pull it in

00:07:53,659 --> 00:07:59,750
now what I'm going to do is I'm going to

00:07:56,810 --> 00:08:00,830
go over to here which you should be able

00:07:59,750 --> 00:08:08,960
to see what's going on

00:08:00,830 --> 00:08:17,060
good so if I do coop cuddle gets pods -

00:08:08,960 --> 00:08:18,110
oops yeah - shuttle get pods you'll see

00:08:17,060 --> 00:08:20,060
that I have nothing running on this

00:08:18,110 --> 00:08:24,800
kubernetes cluster there's no deployment

00:08:20,060 --> 00:08:28,060
nothing I do have some notes as you see

00:08:24,800 --> 00:08:31,250
they're all running on IBM cloud 116

00:08:28,060 --> 00:08:32,870
this is my generic kind of testing

00:08:31,250 --> 00:08:35,360
cluster which is nice and I'm in my own

00:08:32,870 --> 00:08:37,490
namespace as you can see here called

00:08:35,360 --> 00:08:40,219
cobalt so everything's clean there's

00:08:37,490 --> 00:08:42,529
nothing there no ahead of the curve or

00:08:40,219 --> 00:08:46,660
anything like that this is just sitting

00:08:42,529 --> 00:08:49,839
there so the first thing I'm going to do

00:08:46,660 --> 00:08:49,839
here is

00:08:53,490 --> 00:08:58,800
try not to cough into the mic and I'm

00:08:56,890 --> 00:09:03,610
going to show this deployment at llamo

00:08:58,800 --> 00:09:06,100
so I could have shown this on the the

00:09:03,610 --> 00:09:07,960
actual github page but I think it's more

00:09:06,100 --> 00:09:09,930
relevant to show on inside of the

00:09:07,960 --> 00:09:11,080
terminal but just to prove to you again

00:09:09,930 --> 00:09:13,330
oops

00:09:11,080 --> 00:09:16,600
to prove to you inside a cicada s

00:09:13,330 --> 00:09:19,470
directory here is the same deployment

00:09:16,600 --> 00:09:24,550
that you but what we're going to do is

00:09:19,470 --> 00:09:26,800
we're going to create in any container

00:09:24,550 --> 00:09:28,990
where it's going to create three three

00:09:26,800 --> 00:09:31,030
directories for us between these pots so

00:09:28,990 --> 00:09:33,250
right now we're gonna have one pod show

00:09:31,030 --> 00:09:35,470
up with three containers inside of it

00:09:33,250 --> 00:09:37,390
actually four containers an inny

00:09:35,470 --> 00:09:39,490
container to make sure that there's a

00:09:37,390 --> 00:09:46,720
directories underneath everything back

00:09:39,490 --> 00:09:48,580
to this guy right here so we're going to

00:09:46,720 --> 00:09:50,290
have that the volumes of the empty dirt

00:09:48,580 --> 00:09:58,030
here and then it container create that

00:09:50,290 --> 00:10:01,210
then we are going to open up a container

00:09:58,030 --> 00:10:03,580
here where it's the actual batch job

00:10:01,210 --> 00:10:10,330
that actually runs the apt uh Patrick if

00:10:03,580 --> 00:10:11,470
you see here and then we're gonna spin

00:10:10,330 --> 00:10:13,600
up the two more containers called

00:10:11,470 --> 00:10:16,560
watcher in and watch out now

00:10:13,600 --> 00:10:18,460
there are multiple ways to do this

00:10:16,560 --> 00:10:20,110
originally I could spawn out three

00:10:18,460 --> 00:10:21,670
different can three different pods to do

00:10:20,110 --> 00:10:23,950
it all then I had to have inner plug

00:10:21,670 --> 00:10:26,410
communication which forced me to have

00:10:23,950 --> 00:10:29,020
persistent volume claims but having this

00:10:26,410 --> 00:10:31,120
all is one big pod actually has some

00:10:29,020 --> 00:10:36,730
really interesting side effects first of

00:10:31,120 --> 00:10:39,340
all in theory if you had to do multiple

00:10:36,730 --> 00:10:41,740
jobs of this if you had to have more and

00:10:39,340 --> 00:10:43,960
more numbers to be crunched you can

00:10:41,740 --> 00:10:45,540
scale this up to the point of the

00:10:43,960 --> 00:10:49,330
kubernetes cluster can't handle any more

00:10:45,540 --> 00:10:51,010
in essence infinitely as long as you

00:10:49,330 --> 00:10:52,960
have enough nose to be able to do the

00:10:51,010 --> 00:10:55,000
compiler this is very very valuable

00:10:52,960 --> 00:10:56,290
because then all of a sudden you don't

00:10:55,000 --> 00:10:58,420
have to worry about too many persons

00:10:56,290 --> 00:11:00,460
pulling the claims anything like that

00:10:58,420 --> 00:11:02,990
it's all just done ephemerally on the

00:11:00,460 --> 00:11:04,580
machine also because

00:11:02,990 --> 00:11:06,709
just an empty jar inside of it it's

00:11:04,580 --> 00:11:10,130
really easy for these these containers

00:11:06,709 --> 00:11:12,290
to speak inter pod communication it's

00:11:10,130 --> 00:11:14,209
really really nice and I do want to

00:11:12,290 --> 00:11:17,899
credit Paul Schakowsky for this because

00:11:14,209 --> 00:11:21,980
he and Paul Tchaikovsky and Jay Dobbs

00:11:17,899 --> 00:11:23,690
and Brian Tanis - about these things

00:11:21,980 --> 00:11:27,860
because they really did force me to

00:11:23,690 --> 00:11:30,709
think farther than just the PVC a bunch

00:11:27,860 --> 00:11:35,149
of pods talking to PVC originally the

00:11:30,709 --> 00:11:38,480
theory was to spin up n number of cobalt

00:11:35,149 --> 00:11:40,820
batch processes in essence batch

00:11:38,480 --> 00:11:43,550
processing month our nightly jobs or

00:11:40,820 --> 00:11:45,560
whatever to do it but it really isn't a

00:11:43,550 --> 00:11:49,339
good example it's better to have

00:11:45,560 --> 00:11:51,620
everything's kind of encapsulated in one

00:11:49,339 --> 00:11:54,080
pod to do the work and then shove it off

00:11:51,620 --> 00:11:55,640
where it needs to we ran some really

00:11:54,080 --> 00:11:57,500
interesting tests with it turns out this

00:11:55,640 --> 00:11:59,600
is the best way to do it also makes it

00:11:57,500 --> 00:12:04,190
simpler one simple deployment I animal

00:11:59,600 --> 00:12:05,630
to do all this work so as you can see we

00:12:04,190 --> 00:12:07,760
don't need the person's Valen claim we

00:12:05,630 --> 00:12:09,440
just create an empty der the volume

00:12:07,760 --> 00:12:11,329
mount everyone bounce this nice volume

00:12:09,440 --> 00:12:13,370
right here which makes life

00:12:11,329 --> 00:12:16,970
significantly easier and then we just

00:12:13,370 --> 00:12:18,500
kind of talk now um again I don't want

00:12:16,970 --> 00:12:21,020
to just sit here and compile the whole

00:12:18,500 --> 00:12:24,649
container for you that is just that that

00:12:21,020 --> 00:12:26,480
can be exercised for you at home but

00:12:24,649 --> 00:12:28,040
everything is built off of Sint OS and

00:12:26,480 --> 00:12:29,540
it just kind of sits there

00:12:28,040 --> 00:12:34,430
I've actually pushed all these

00:12:29,540 --> 00:12:36,260
containers already out to docker hub so

00:12:34,430 --> 00:12:39,170
if you want to pull these directly down

00:12:36,260 --> 00:12:42,709
for yourself as you can see it's JJ's

00:12:39,170 --> 00:12:44,750
garceau slash cobalt - batch latest

00:12:42,709 --> 00:12:46,370
which so you can just run it run this

00:12:44,750 --> 00:12:48,770
actual deployment on your own kubernetes

00:12:46,370 --> 00:12:53,290
cluster and everything will work

00:12:48,770 --> 00:12:55,459
I have hard-coded this this file here

00:12:53,290 --> 00:12:56,690
which you can override if you want to

00:12:55,459 --> 00:12:59,120
prove it to yourself there's something

00:12:56,690 --> 00:13:03,200
else but this is just a simple text file

00:12:59,120 --> 00:13:05,450
sitting on a cloud object storage on the

00:13:03,200 --> 00:13:06,050
IBM cloud so again if you want to do

00:13:05,450 --> 00:13:07,640
this yourself

00:13:06,050 --> 00:13:10,310
- because you're not you think that I'm

00:13:07,640 --> 00:13:11,839
you know there's office keishon or

00:13:10,310 --> 00:13:13,430
whatever there's not like you would or

00:13:11,839 --> 00:13:14,990
you can just run this exact same command

00:13:13,430 --> 00:13:16,340
I'm about to on or kubernetes cluster

00:13:14,990 --> 00:13:19,250
and see that it works

00:13:16,340 --> 00:13:21,800
okay so I think I've preamble de nuff

00:13:19,250 --> 00:13:23,930
and I think I've kind of shown how this

00:13:21,800 --> 00:13:26,930
all comes together this is all just a

00:13:23,930 --> 00:13:30,490
simple test to make sure that this works

00:13:26,930 --> 00:13:36,200
all I want and then and does the work so

00:13:30,490 --> 00:13:41,000
let us go ahead and do COO cuddle apply

00:13:36,200 --> 00:13:43,670
- f and then deployment and then we'll

00:13:41,000 --> 00:13:47,870
go ahead and deploy so it's created so

00:13:43,670 --> 00:13:51,950
we do K get pods we're seeing the init

00:13:47,870 --> 00:14:00,470
show up now still doing in it and then

00:13:51,950 --> 00:14:02,060
we can do watch to cuddle the pods or a

00:14:00,470 --> 00:14:03,680
wait for the is realization happening

00:14:02,060 --> 00:14:08,089
here this is only taking a couple

00:14:03,680 --> 00:14:13,120
minutes not even in there we go we have

00:14:08,089 --> 00:14:31,700
gone ahead and run so if I do K get logs

00:14:13,120 --> 00:14:33,220
COBOL COBOL so to cuddle get walks thank

00:14:31,700 --> 00:14:48,140
you

00:14:33,220 --> 00:14:53,330
this should complain get log to cuddle

00:14:48,140 --> 00:14:55,070
log can never get this right it's

00:14:53,330 --> 00:14:57,680
because everyone's watching me okay

00:14:55,070 --> 00:15:01,010
there we go and then we want to watch we

00:14:57,680 --> 00:15:04,250
want to see COBOL process COBOL process

00:15:01,010 --> 00:15:08,180
so this should be an output of the

00:15:04,250 --> 00:15:09,430
numbers that we saw there we go as you

00:15:08,180 --> 00:15:18,260
can see right here

00:15:09,430 --> 00:15:19,850
28:12 4957 17 and 1 3 4 - so what I

00:15:18,260 --> 00:15:25,580
proved is that a simple COBOL

00:15:19,850 --> 00:15:29,089
application which is right here that

00:15:25,580 --> 00:15:32,540
gets slipped in and created and does the

00:15:29,089 --> 00:15:37,250
workforce which is great I just proved

00:15:32,540 --> 00:15:39,200
that COBOL can run on kubernetes by just

00:15:37,250 --> 00:15:41,690
a container which in turn mean turns

00:15:39,200 --> 00:15:45,380
means any actual application as long as

00:15:41,690 --> 00:15:49,240
you can compile it into a container can

00:15:45,380 --> 00:15:51,920
run on cover names that's pretty cool

00:15:49,240 --> 00:15:53,180
it's again it was just a science

00:15:51,920 --> 00:15:57,250
experiment to kind of show this all

00:15:53,180 --> 00:15:57,250
coming together and it allows for

00:15:57,280 --> 00:16:03,950
anything you want to run to work I

00:16:01,540 --> 00:16:06,820
realize this is not production value

00:16:03,950 --> 00:16:09,320
code but it opens up your eyes to the

00:16:06,820 --> 00:16:11,540
possibility of using kubernetes as a

00:16:09,320 --> 00:16:14,870
unified control plane so take this one

00:16:11,540 --> 00:16:18,200
step farther all of a sudden your boss

00:16:14,870 --> 00:16:20,780
comes to you and says hey we can't look

00:16:18,200 --> 00:16:22,940
at kubernetes as an offering there's a

00:16:20,780 --> 00:16:24,709
way to run our application because we

00:16:22,940 --> 00:16:27,370
have this with legacy apps somewhere

00:16:24,709 --> 00:16:30,290
sitting and we can't touch it all well

00:16:27,370 --> 00:16:33,290
when you can compile a COBOL application

00:16:30,290 --> 00:16:34,550
and have it run on kubernetes you can

00:16:33,290 --> 00:16:37,670
extrapolate and go back to your boss

00:16:34,550 --> 00:16:39,530
saying no you can run any application on

00:16:37,670 --> 00:16:41,540
kubernetes as long as it's containerized

00:16:39,530 --> 00:16:44,000
I'm not going to say containerization is

00:16:41,540 --> 00:16:46,190
easy I'm not going to say that cloud

00:16:44,000 --> 00:16:48,980
native is easy but I'm saying that the

00:16:46,190 --> 00:16:51,079
conversation can continue and that's the

00:16:48,980 --> 00:16:53,270
value of the science experiment don't

00:16:51,079 --> 00:16:57,980
you don't have to say no because

00:16:53,270 --> 00:17:00,410
X Y & Z you can say yes because a B and

00:16:57,980 --> 00:17:02,060
C opens up to the door and allowing for

00:17:00,410 --> 00:17:03,770
people to be successful with the cloud

00:17:02,060 --> 00:17:05,209
native way in containerization in

00:17:03,770 --> 00:17:07,940
general so I hope you've learned

00:17:05,209 --> 00:17:12,080
something I'm right about a little bit

00:17:07,940 --> 00:17:15,320
over 15 minutes hopefully this at least

00:17:12,080 --> 00:17:18,020
bird a conversation with you and I hope

00:17:15,320 --> 00:17:21,200
you have a good time please these are my

00:17:18,020 --> 00:17:22,400
contact information actually be this way

00:17:21,200 --> 00:17:25,850
there we go I'm pulling it through right

00:17:22,400 --> 00:17:30,050
now you can hit me up on twitter @jj

00:17:25,850 --> 00:17:32,770
Asghar or yes truly my email address is

00:17:30,050 --> 00:17:34,910
awesome at ibm.com

00:17:32,770 --> 00:17:37,430
I'd love to see what you come up with

00:17:34,910 --> 00:17:41,710
what are your head Tom thank you so much

00:17:37,430 --> 00:17:41,710
and I hope to catch up with y'all later

00:17:42,320 --> 00:17:58,799

YouTube URL: https://www.youtube.com/watch?v=huD68xkABFQ


