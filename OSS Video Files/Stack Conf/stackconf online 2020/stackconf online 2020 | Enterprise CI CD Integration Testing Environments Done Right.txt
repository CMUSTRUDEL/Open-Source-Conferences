Title: stackconf online 2020 | Enterprise CI CD Integration Testing Environments Done Right
Publication date: 2020-06-27
Playlist: stackconf online 2020
Description: 
	...by Jan-Hendrik Peters

This talk will dive into automatically building fresh, enterprise-ready testing environments with AutomatedLab to better support integration testing in your build and release process. We will explore how AutomatedLab can help Dev and Ops people easily build their own highly-customizable, idempotent lab environment that is able to fully resemble their existing infrastructure.
After this session you will be able to test better and with more confidence.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/webinare/archi...
Aktuell: https://www.netways.de/wb

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/

Music: Walking on Air - https://www.frametraxx.de/
Captions: 
	00:00:00,450 --> 00:00:16,369
[Music]

00:00:13,030 --> 00:00:17,960
hi my name is Dominic Peters and I would

00:00:16,369 --> 00:00:20,090
like to welcome you to my talk about

00:00:17,960 --> 00:00:23,119
enterprise the ICD testing done right

00:00:20,090 --> 00:00:25,099
and throughout the course of this little

00:00:23,119 --> 00:00:28,099
talk we'll see what done right actually

00:00:25,099 --> 00:00:30,290
means a little bit about me first I'm a

00:00:28,099 --> 00:00:33,770
PA field engineer at Microsoft Germany

00:00:30,290 --> 00:00:35,780
I'm automating things since 2011

00:00:33,770 --> 00:00:40,750
approximately started my apprenticeship

00:00:35,780 --> 00:00:45,500
in 2009 at KPMG now I work at Microsoft

00:00:40,750 --> 00:00:47,780
since 2016 I think my main speciality is

00:00:45,500 --> 00:00:50,480
a jewel of course we are all living in

00:00:47,780 --> 00:00:52,670
the cloud nowadays but also of course

00:00:50,480 --> 00:00:55,340
DevOps processes as well as PowerShell

00:00:52,670 --> 00:00:56,270
scripting development and c-sharp

00:00:55,340 --> 00:00:59,450
development

00:00:56,270 --> 00:01:01,070
I'm currently developing on the site in

00:00:59,450 --> 00:01:03,440
an open source project called automated

00:01:01,070 --> 00:01:06,439
lab which is the project I would like to

00:01:03,440 --> 00:01:08,090
demonstrate the features of in this

00:01:06,439 --> 00:01:11,689
little talk you can find me on Twitter

00:01:08,090 --> 00:01:13,460
and on github of course I'm here on

00:01:11,689 --> 00:01:16,759
LinkedIn if you are so inclined but

00:01:13,460 --> 00:01:19,999
usually I'm on Twitter and github so

00:01:16,759 --> 00:01:21,829
let's dive right into the talk first of

00:01:19,999 --> 00:01:24,709
all let's have a look at the typical

00:01:21,829 --> 00:01:28,189
pipeline and usually we start at the

00:01:24,709 --> 00:01:31,249
source so whenever your developers have

00:01:28,189 --> 00:01:34,759
a unit of work that they are completing

00:01:31,249 --> 00:01:36,530
or your operators have a infrastructures

00:01:34,759 --> 00:01:38,600
code template for example a terraform

00:01:36,530 --> 00:01:41,209
template or a natural resource manager

00:01:38,600 --> 00:01:44,359
template they are going to create a

00:01:41,209 --> 00:01:47,509
commit check their changes in and either

00:01:44,359 --> 00:01:50,840
push the commit to the trunk or raise a

00:01:47,509 --> 00:01:54,909
pull request for example which starts

00:01:50,840 --> 00:01:58,279
off usually the pipeline the next step

00:01:54,909 --> 00:02:01,459
usually it will be unit testing so in

00:01:58,279 --> 00:02:04,399
case of a classical app developer for

00:02:01,459 --> 00:02:06,529
example you would unit tests or blackbox

00:02:04,399 --> 00:02:09,770
test your functionality first before

00:02:06,529 --> 00:02:12,700
progressing to the next stage which in

00:02:09,770 --> 00:02:16,099
our case would be the build stage or the

00:02:12,700 --> 00:02:18,500
validation phase now unit testing can

00:02:16,099 --> 00:02:20,290
also be important for non developers or

00:02:18,500 --> 00:02:22,810
for operators if you will

00:02:20,290 --> 00:02:25,689
so in my case for example I am a field

00:02:22,810 --> 00:02:29,140
engineer meaning I visit customers I

00:02:25,689 --> 00:02:30,220
support them with automation tasks and

00:02:29,140 --> 00:02:32,379
for me

00:02:30,220 --> 00:02:34,689
unit tests would be to test my

00:02:32,379 --> 00:02:36,989
automation functionality so for example

00:02:34,689 --> 00:02:40,299
if I'm writing a PowerShell module or

00:02:36,989 --> 00:02:42,640
Python function I will test the output

00:02:40,299 --> 00:02:46,720
of the function so that my customers for

00:02:42,640 --> 00:02:50,290
example can alter the code with with at

00:02:46,720 --> 00:02:53,620
least some basic level of trust in the

00:02:50,290 --> 00:02:55,840
test process in the abilities so that we

00:02:53,620 --> 00:02:57,970
are always able to see the test results

00:02:55,840 --> 00:03:00,730
of our unit tests before progressing any

00:02:57,970 --> 00:03:03,959
further this can also come in handy for

00:03:00,730 --> 00:03:07,540
operators so just bear with me a moment

00:03:03,959 --> 00:03:10,329
next up is the build phase in this case

00:03:07,540 --> 00:03:13,540
we already passed all the tests for

00:03:10,329 --> 00:03:15,700
example code quality steady protein

00:03:13,540 --> 00:03:18,430
analysis something like that and now we

00:03:15,700 --> 00:03:21,609
build artifacts which is the output of

00:03:18,430 --> 00:03:24,220
our build process these artifacts can be

00:03:21,609 --> 00:03:28,030
anything from web application packages

00:03:24,220 --> 00:03:32,010
to design state configuration more files

00:03:28,030 --> 00:03:34,569
to arm templates or other output

00:03:32,010 --> 00:03:36,940
generally you would associate with with

00:03:34,569 --> 00:03:39,489
the build process these artifacts are

00:03:36,940 --> 00:03:40,989
then tested in another test phase the

00:03:39,489 --> 00:03:44,169
user acceptance test or integration

00:03:40,989 --> 00:03:46,180
testing again this is a phase that is

00:03:44,169 --> 00:03:48,549
also important on only for developers

00:03:46,180 --> 00:03:49,959
but also for operators so imagine you

00:03:48,549 --> 00:03:51,910
have a web application that you want to

00:03:49,959 --> 00:03:54,010
deploy then of course you need to test

00:03:51,910 --> 00:03:57,129
if the applications actually responds it

00:03:54,010 --> 00:04:00,879
in our little example later on we will

00:03:57,129 --> 00:04:04,510
see how a REST API very simple REST API

00:04:00,879 --> 00:04:07,810
can be tested in our integration tests

00:04:04,510 --> 00:04:09,010
in this case but of course as an

00:04:07,810 --> 00:04:11,500
operator you wouldn't necessarily

00:04:09,010 --> 00:04:13,329
develop an application but rather test

00:04:11,500 --> 00:04:15,040
infrastructure which is also quite

00:04:13,329 --> 00:04:18,489
possible with the user acceptance test

00:04:15,040 --> 00:04:23,380
so one test might be our my templates

00:04:18,489 --> 00:04:26,919
correctly applied or is my PowerShell

00:04:23,380 --> 00:04:28,719
script as my PowerShell script completed

00:04:26,919 --> 00:04:30,520
successfully is my desired state

00:04:28,719 --> 00:04:32,770
configuration actually in the desired

00:04:30,520 --> 00:04:34,000
state and so on and so on a plenty of

00:04:32,770 --> 00:04:36,570
examples for that

00:04:34,000 --> 00:04:39,430
maybe we'll have time for that later on

00:04:36,570 --> 00:04:41,580
last team we have the release phase so

00:04:39,430 --> 00:04:44,620
in this case all your tests have

00:04:41,580 --> 00:04:47,290
successfully completed you maybe have a

00:04:44,620 --> 00:04:51,280
manual gate or some other type of

00:04:47,290 --> 00:04:52,990
release gate which controls if the

00:04:51,280 --> 00:04:57,460
release is actually put into production

00:04:52,990 --> 00:04:59,890
or not usually you would use the test

00:04:57,460 --> 00:05:01,540
results as the input for example or just

00:04:59,890 --> 00:05:03,130
have a manual sign-off process for

00:05:01,540 --> 00:05:06,240
example the responsible manager for the

00:05:03,130 --> 00:05:08,530
application would take off the release

00:05:06,240 --> 00:05:11,260
again depending on what you actually

00:05:08,530 --> 00:05:12,880
built this release might be publishing a

00:05:11,260 --> 00:05:15,190
partial module to the new gate gallery

00:05:12,880 --> 00:05:18,160
this might be publishing a vet

00:05:15,190 --> 00:05:21,010
application to an application server or

00:05:18,160 --> 00:05:25,630
a resource group to Azure or any other

00:05:21,010 --> 00:05:28,570
cloud whatever you fancy and we will

00:05:25,630 --> 00:05:31,750
have a look in this talk especially at

00:05:28,570 --> 00:05:34,240
the test part because usually when you

00:05:31,750 --> 00:05:36,730
test in your infrastructure or in the

00:05:34,240 --> 00:05:39,610
cloud you need some additional

00:05:36,730 --> 00:05:43,660
components at least to mimic for example

00:05:39,610 --> 00:05:45,460
your production environment so the

00:05:43,660 --> 00:05:48,400
testing is very important especially

00:05:45,460 --> 00:05:50,110
integration testing requires a lot of

00:05:48,400 --> 00:05:53,020
components or can require a lot of

00:05:50,110 --> 00:05:55,750
components but this regard this picture

00:05:53,020 --> 00:05:57,669
here this is taken from visual your

00:05:55,750 --> 00:06:00,400
infrastructure might look a little bit

00:05:57,669 --> 00:06:02,590
differently of course but I think it

00:06:00,400 --> 00:06:04,990
gets the point across so we often need

00:06:02,590 --> 00:06:06,669
additional components like certificates

00:06:04,990 --> 00:06:08,860
for example for a web application or

00:06:06,669 --> 00:06:11,770
certificates for content encryption so

00:06:08,860 --> 00:06:13,840
if you imagine the example of desired

00:06:11,770 --> 00:06:16,870
state configuration bringing a system

00:06:13,840 --> 00:06:18,520
into a specific desired State we often

00:06:16,870 --> 00:06:20,590
require credentials these credentials

00:06:18,520 --> 00:06:22,180
need to be encrypted of course we don't

00:06:20,590 --> 00:06:23,979
want plain to Exponential's in our

00:06:22,180 --> 00:06:27,790
configuration files and this is where

00:06:23,979 --> 00:06:29,770
certificates coming today so additional

00:06:27,790 --> 00:06:31,780
components like databases are also of

00:06:29,770 --> 00:06:34,120
necessary for your web application for

00:06:31,780 --> 00:06:36,010
example to run and of course if server

00:06:34,120 --> 00:06:37,930
so if you want to deploy your web

00:06:36,010 --> 00:06:40,120
application you might want to deploy it

00:06:37,930 --> 00:06:43,000
somewhere this can be the cloud but

00:06:40,120 --> 00:06:45,820
often you would like to include other

00:06:43,000 --> 00:06:47,689
on-premises components as well if you

00:06:45,820 --> 00:06:51,110
imagine authentication with

00:06:47,689 --> 00:06:52,789
and LDAP or Active Directory this is

00:06:51,110 --> 00:06:56,599
something that you can have the mimic in

00:06:52,789 --> 00:06:58,459
the cloud and that you would rather test

00:06:56,599 --> 00:07:01,189
on-premises probably in a little lead

00:06:58,459 --> 00:07:03,499
environment there's already some tooling

00:07:01,189 --> 00:07:04,909
that can help you so for example if you

00:07:03,499 --> 00:07:06,649
think of docker containers this is a

00:07:04,909 --> 00:07:07,399
great technology it can help you get up

00:07:06,649 --> 00:07:09,889
running fast

00:07:07,399 --> 00:07:14,059
however docker containers are not really

00:07:09,889 --> 00:07:15,919
suited to standing up a whole new Active

00:07:14,059 --> 00:07:18,529
Directory domain for example or an

00:07:15,919 --> 00:07:20,959
entire farm of connected web servers

00:07:18,529 --> 00:07:23,059
with database backends this is all a bit

00:07:20,959 --> 00:07:25,579
complicated of course it's not

00:07:23,059 --> 00:07:27,829
impossible and with other tools like

00:07:25,579 --> 00:07:30,439
Pecha for example also then even for

00:07:27,829 --> 00:07:32,599
testing so plenty of tools available

00:07:30,439 --> 00:07:35,839
this is only a very very very small

00:07:32,599 --> 00:07:38,149
selection of the tools the most

00:07:35,839 --> 00:07:39,800
important thing in my case however is

00:07:38,149 --> 00:07:42,079
that additional components are necessary

00:07:39,800 --> 00:07:44,929
so whenever I go on site at a customer

00:07:42,079 --> 00:07:46,249
and want to demonstrate or develop

00:07:44,929 --> 00:07:48,799
things I often need additional

00:07:46,249 --> 00:07:51,049
components mostly these are components

00:07:48,799 --> 00:07:52,819
I'm not entirely familiar with so for

00:07:51,049 --> 00:07:55,309
example if my customer asks me to

00:07:52,819 --> 00:07:57,289
automate the exchange infrastructure

00:07:55,309 --> 00:08:01,849
because they want some automation to

00:07:57,289 --> 00:08:05,149
curb for some reason then I myself am

00:08:01,849 --> 00:08:06,919
NOT very well-versed with exchange you

00:08:05,149 --> 00:08:09,229
might say it's Maya this year like

00:08:06,919 --> 00:08:10,399
SharePoint so in this case I'd like to

00:08:09,229 --> 00:08:12,199
stand up my test environment

00:08:10,399 --> 00:08:15,110
automatically without worrying too much

00:08:12,199 --> 00:08:16,879
about the details likewise the same

00:08:15,110 --> 00:08:19,939
could be true for certificates for

00:08:16,879 --> 00:08:21,649
example so maybe you are a web developer

00:08:19,939 --> 00:08:26,379
but you don't necessarily have the

00:08:21,649 --> 00:08:29,809
skills to maintain or administer a

00:08:26,379 --> 00:08:31,669
certificate authority maybe you want to

00:08:29,809 --> 00:08:33,110
test in something that resembles your

00:08:31,669 --> 00:08:34,870
infrastructure but you don't want to

00:08:33,110 --> 00:08:37,969
actually use your production environment

00:08:34,870 --> 00:08:40,729
in this case in all these cases

00:08:37,969 --> 00:08:42,680
additional components that are

00:08:40,729 --> 00:08:45,709
disconnected from your actual production

00:08:42,680 --> 00:08:51,050
environment but make it closely are very

00:08:45,709 --> 00:08:53,269
necessary very good so in the next few

00:08:51,050 --> 00:08:55,100
minutes we will have a look at how to

00:08:53,269 --> 00:08:56,480
stand up these additional components for

00:08:55,100 --> 00:08:59,820
testing and I would like to get started

00:08:56,480 --> 00:09:02,520
with automated data automatically

00:08:59,820 --> 00:09:04,890
is a lab automation framework for the

00:09:02,520 --> 00:09:07,680
open source so let's dunk it and it's

00:09:04,890 --> 00:09:10,530
the project I'm contributing most of my

00:09:07,680 --> 00:09:14,880
time to the first image you can see here

00:09:10,530 --> 00:09:17,340
is just from our telemetry dashboard so

00:09:14,880 --> 00:09:19,050
as most applications nowadays we also

00:09:17,340 --> 00:09:21,990
connect to Dmitriy but more on that

00:09:19,050 --> 00:09:23,880
later we only collect what we need and

00:09:21,990 --> 00:09:24,600
of course no personally identifiable

00:09:23,880 --> 00:09:27,330
information

00:09:24,600 --> 00:09:29,220
no PII what we do like to collect

00:09:27,330 --> 00:09:31,710
however is the roles that are used and

00:09:29,220 --> 00:09:34,500
in this little image you can see the

00:09:31,710 --> 00:09:36,690
popularity of our roles so by far the

00:09:34,500 --> 00:09:39,420
most popular component seems to be a

00:09:36,690 --> 00:09:41,970
root to main controller seems about

00:09:39,420 --> 00:09:43,380
right because most of the environments

00:09:41,970 --> 00:09:44,910
most of the lab environments that are

00:09:43,380 --> 00:09:46,980
hosted actually do need some

00:09:44,910 --> 00:09:48,840
connectivity they want to test

00:09:46,980 --> 00:09:50,880
authentication for example they want to

00:09:48,840 --> 00:09:54,590
test attack scenarios against Active

00:09:50,880 --> 00:09:58,680
Directory or things like Kerberos and

00:09:54,590 --> 00:10:01,170
now the second most popular component

00:09:58,680 --> 00:10:02,790
seems to be the web server followed by a

00:10:01,170 --> 00:10:05,040
certificate authority and the file

00:10:02,790 --> 00:10:07,110
server some very basic components really

00:10:05,040 --> 00:10:09,300
but components that you don't want to

00:10:07,110 --> 00:10:13,740
necessarily end up every time from

00:10:09,300 --> 00:10:16,200
scratch yourself so in our case ultimate

00:10:13,740 --> 00:10:19,350
is app as a lip automation framework

00:10:16,200 --> 00:10:21,630
will help you deploy those roles without

00:10:19,350 --> 00:10:24,810
any interaction building so you just

00:10:21,630 --> 00:10:27,450
have your lab environment as a code file

00:10:24,810 --> 00:10:30,720
basically your infrastructure is code

00:10:27,450 --> 00:10:32,910
and from there deploy the lab this is a

00:10:30,720 --> 00:10:35,520
very simple example we will get into a

00:10:32,910 --> 00:10:38,040
little bit more detail later on so in

00:10:35,520 --> 00:10:40,740
this case you can see a recipe being

00:10:38,040 --> 00:10:42,300
applied which deploys a domain

00:10:40,740 --> 00:10:45,840
environment however this might look like

00:10:42,300 --> 00:10:48,780
and a sequel environment that is part of

00:10:45,840 --> 00:10:51,780
the domain all the VMS are prefixed with

00:10:48,780 --> 00:10:54,050
special prefix so that you can disarm

00:10:51,780 --> 00:10:56,460
them later later on from your from your

00:10:54,050 --> 00:10:59,610
already existing VMs but that's about it

00:10:56,460 --> 00:11:01,680
it's very simple it can get a bit more

00:10:59,610 --> 00:11:03,480
complicated of course especially if you

00:11:01,680 --> 00:11:07,550
start making your own additions or

00:11:03,480 --> 00:11:10,110
settings but that's the gist of it

00:11:07,550 --> 00:11:11,790
the main purpose of automated that is

00:11:10,110 --> 00:11:14,460
that we can deploy idempotent

00:11:11,790 --> 00:11:16,710
environments every time according to

00:11:14,460 --> 00:11:18,930
your specifications anywhere really so

00:11:16,710 --> 00:11:22,650
whether it's on-premises with hyper-v

00:11:18,930 --> 00:11:25,470
and KVM to follow or if it's in the

00:11:22,650 --> 00:11:28,530
cloud or module for example it's very

00:11:25,470 --> 00:11:31,740
possible we are mostly deploying

00:11:28,530 --> 00:11:36,030
infrastructure workloads so very typical

00:11:31,740 --> 00:11:38,190
classic VMs virtual machines both in the

00:11:36,030 --> 00:11:39,390
cloud as well as on-premises so if

00:11:38,190 --> 00:11:43,680
you're looking for a framework that

00:11:39,390 --> 00:11:47,060
deploys very specific things like for

00:11:43,680 --> 00:11:50,220
example hosted web apps or docker

00:11:47,060 --> 00:11:52,200
containers or tape kubernetes clusters

00:11:50,220 --> 00:11:56,310
you might want to look elsewhere this is

00:11:52,200 --> 00:11:59,550
for classical infrastructure workloads

00:11:56,310 --> 00:12:01,830
at the moment all that lap is in active

00:11:59,550 --> 00:12:03,960
development so at the moment it runs

00:12:01,830 --> 00:12:06,060
with PowerShell on Windows and Linux

00:12:03,960 --> 00:12:09,120
it's through the cross platform as well

00:12:06,060 --> 00:12:12,570
as PowerShell the only environment here

00:12:09,120 --> 00:12:14,630
is indeed PowerShell 7 or PowerShell 6

00:12:12,570 --> 00:12:16,980
if you are still on the old version

00:12:14,630 --> 00:12:19,860
currently in active development Emile is

00:12:16,980 --> 00:12:23,100
the implementation of automated lab in

00:12:19,860 --> 00:12:27,360
Linux the full implementation using KVM

00:12:23,100 --> 00:12:31,110
and qmo so we had a sample

00:12:27,360 --> 00:12:33,690
implementation of vmware also some time

00:12:31,110 --> 00:12:35,640
ago but this didn't really pan out we

00:12:33,690 --> 00:12:37,260
don't have the resources to put into it

00:12:35,640 --> 00:12:40,320
because this is a two-man show at the

00:12:37,260 --> 00:12:43,530
moment so we require a lot of input from

00:12:40,320 --> 00:12:45,540
the community I however made it my task

00:12:43,530 --> 00:12:47,760
to develop automated app for Linux as

00:12:45,540 --> 00:12:50,580
well with the first step being porting

00:12:47,760 --> 00:12:56,940
it to Linux so that we can deploy at

00:12:50,580 --> 00:12:59,430
least as you elapsed from anywhere at

00:12:56,940 --> 00:13:01,290
the moment I already said we can deploy

00:12:59,430 --> 00:13:05,070
typical infrastructure workloads like

00:13:01,290 --> 00:13:08,010
like VMs and additionally we can deploy

00:13:05,070 --> 00:13:10,500
as your app services so in our case in

00:13:08,010 --> 00:13:13,740
our example later on we will deploy a

00:13:10,500 --> 00:13:16,290
typical app service a web application so

00:13:13,740 --> 00:13:17,850
you could use a network web service app

00:13:16,290 --> 00:13:20,100
service for that as well

00:13:17,850 --> 00:13:21,510
I will however show you how to do this

00:13:20,100 --> 00:13:23,900
with infrastructure or

00:13:21,510 --> 00:13:27,510
because this is what this talk is about

00:13:23,900 --> 00:13:30,230
lastly our deployment is zero-touch

00:13:27,510 --> 00:13:33,570
usually if you don't want to do any

00:13:30,230 --> 00:13:36,330
customization of course so we have many

00:13:33,570 --> 00:13:38,850
roles and these include the most popular

00:13:36,330 --> 00:13:40,020
ones like domain services a DDS or

00:13:38,850 --> 00:13:43,170
certificate services

00:13:40,020 --> 00:13:46,530
ADCs sequel server in basically any

00:13:43,170 --> 00:13:49,080
addition since 2008 TFS team foundation

00:13:46,530 --> 00:13:51,810
server as your def observer and so on

00:13:49,080 --> 00:13:54,630
and so on the full list is of course

00:13:51,810 --> 00:13:57,210
available in the module itself or on our

00:13:54,630 --> 00:14:00,770
website the module can be installed from

00:13:57,210 --> 00:14:04,230
the powershell gallery but on that later

00:14:00,770 --> 00:14:07,140
let's have a look at an actual lab

00:14:04,230 --> 00:14:09,330
environment and this is a simple

00:14:07,140 --> 00:14:11,400
environment at least I would classify it

00:14:09,330 --> 00:14:15,690
as simple but if we have a look at it

00:14:11,400 --> 00:14:18,270
it's not simple at all so starting or

00:14:15,690 --> 00:14:21,150
everything is starting with a new lab

00:14:18,270 --> 00:14:24,150
definition we do the name and you

00:14:21,150 --> 00:14:25,620
specify the virtualization engine they

00:14:24,150 --> 00:14:29,040
don't specify anything it will default

00:14:25,620 --> 00:14:30,930
to hyper-v so if you are using Windows

00:14:29,040 --> 00:14:33,930
10 notebook like I am or if you are on

00:14:30,930 --> 00:14:39,060
some type of server you can use

00:14:33,930 --> 00:14:42,090
automatic type already then I am adding

00:14:39,060 --> 00:14:45,060
a ISO image definition for the sequel

00:14:42,090 --> 00:14:47,340
server 2019 so automated tab of course

00:14:45,060 --> 00:14:50,670
deploys sequel deploys sharepoint

00:14:47,340 --> 00:14:55,470
exchange and so on for these products we

00:14:50,670 --> 00:14:57,540
definitely need some ISO file this is

00:14:55,470 --> 00:14:59,820
what I'm doing here and then afterwards

00:14:57,540 --> 00:15:01,740
we can simply add some machine

00:14:59,820 --> 00:15:04,440
definitions I can see in the bottom gem

00:15:01,740 --> 00:15:06,660
like the domain controller with the

00:15:04,440 --> 00:15:09,210
roles of root domain controller and root

00:15:06,660 --> 00:15:14,100
certificate authority this will

00:15:09,210 --> 00:15:16,740
basically contain two functions ideally

00:15:14,100 --> 00:15:19,920
you would create another machine just

00:15:16,740 --> 00:15:21,330
for your CA but as this is the lab

00:15:19,920 --> 00:15:25,050
environment this doesn't really matter

00:15:21,330 --> 00:15:27,960
for testing at least next up the sequel

00:15:25,050 --> 00:15:30,360
server which is connected to the image

00:15:27,960 --> 00:15:32,580
file via the role definition so the

00:15:30,360 --> 00:15:34,260
sequel server 2019 role refers to the

00:15:32,580 --> 00:15:37,860
sequel server 2019 image

00:15:34,260 --> 00:15:39,270
you could also bring your custom ISO

00:15:37,860 --> 00:15:42,180
files if there are any

00:15:39,270 --> 00:15:45,060
however I've rarely seen this for simple

00:15:42,180 --> 00:15:46,890
server to be honest and lastly wherever

00:15:45,060 --> 00:15:48,270
the web server which just gets the raw

00:15:46,890 --> 00:15:51,450
web server and no additional

00:15:48,270 --> 00:15:53,570
customization applied and lastly install

00:15:51,450 --> 00:15:56,540
DEP is the command that is run to

00:15:53,570 --> 00:15:58,980
actually deploy this entire environment

00:15:56,540 --> 00:16:00,960
and you can see that this is not a

00:15:58,980 --> 00:16:02,550
simple app at all it's actually quite

00:16:00,960 --> 00:16:06,120
complicated if you think about it you

00:16:02,550 --> 00:16:08,690
are creating automatically a domain

00:16:06,120 --> 00:16:13,350
environment for a sample domain

00:16:08,690 --> 00:16:15,600
photos.com you know our favorite you are

00:16:13,350 --> 00:16:17,700
creating an entire certificate

00:16:15,600 --> 00:16:19,950
infrastructure with a root CA it will

00:16:17,700 --> 00:16:23,430
also deploy intermediate or issuing CAS

00:16:19,950 --> 00:16:25,290
if you wanted to to really mimic move to

00:16:23,430 --> 00:16:27,510
your model with all the bells and

00:16:25,290 --> 00:16:29,790
whistles then you are deploying an

00:16:27,510 --> 00:16:31,620
entire entirely configured sequel server

00:16:29,790 --> 00:16:33,390
which is to maintain it in this case and

00:16:31,620 --> 00:16:35,160
the domain join web server with all

00:16:33,390 --> 00:16:40,290
necessary components to deploy your web

00:16:35,160 --> 00:16:43,890
app to so you can see even these six

00:16:40,290 --> 00:16:46,890
lines of code to generate a lot for you

00:16:43,890 --> 00:16:50,730
and there's not no interaction necessary

00:16:46,890 --> 00:16:53,670
other than that so how can automatic

00:16:50,730 --> 00:16:56,820
setup in a release pipeline for example

00:16:53,670 --> 00:16:58,830
or in a CI CD pipeline first of all of

00:16:56,820 --> 00:17:01,530
course it seamlessly integrates into

00:16:58,830 --> 00:17:03,450
your existing meditation so if you

00:17:01,530 --> 00:17:06,030
already have integration tests you can

00:17:03,450 --> 00:17:08,900
test you can also target them at let

00:17:06,030 --> 00:17:12,450
machines of course it's no problem

00:17:08,900 --> 00:17:15,030
further than furthermore of MATLAB runs

00:17:12,450 --> 00:17:17,450
on Linux and windows so we can use any

00:17:15,030 --> 00:17:22,260
build agent really and any environment

00:17:17,450 --> 00:17:24,470
to host your lab environment and to run

00:17:22,260 --> 00:17:27,180
your integration test for example I

00:17:24,470 --> 00:17:29,190
would recommend to download the package

00:17:27,180 --> 00:17:31,770
from the PowerShell get me however there

00:17:29,190 --> 00:17:34,230
are also options available for Windows

00:17:31,770 --> 00:17:37,970
which is an MSI package for the next

00:17:34,230 --> 00:17:40,380
which comes as a debt or RTM package

00:17:37,970 --> 00:17:42,240
both of these packages are experimental

00:17:40,380 --> 00:17:44,220
at the moment I would really recommend

00:17:42,240 --> 00:17:45,960
using the PowerShell gallery and the

00:17:44,220 --> 00:17:47,330
install module command which takes care

00:17:45,960 --> 00:17:49,309
of scaffolding everything

00:17:47,330 --> 00:17:55,279
you don't have to do any manual

00:17:49,309 --> 00:17:57,380
interaction it's ideally suited for self

00:17:55,279 --> 00:18:00,490
hosted environments of course running

00:17:57,380 --> 00:18:04,490
hyper-v but is also is well-suited for

00:18:00,490 --> 00:18:06,649
out environments you can use a fresh

00:18:04,490 --> 00:18:09,140
deployment every time which is something

00:18:06,649 --> 00:18:11,450
that I do or I am doing in the sample

00:18:09,140 --> 00:18:13,730
that I will show you data you can also

00:18:11,450 --> 00:18:15,620
use existing lab environments which is

00:18:13,730 --> 00:18:17,210
also quite important so let me tell you

00:18:15,620 --> 00:18:19,909
a story from one of my customers for

00:18:17,210 --> 00:18:22,940
example who our packaging software

00:18:19,909 --> 00:18:24,950
packages so they take software they get

00:18:22,940 --> 00:18:27,139
from a vendor for example or that they

00:18:24,950 --> 00:18:31,340
download from the internet and repackage

00:18:27,139 --> 00:18:32,649
it and now to test the software we

00:18:31,340 --> 00:18:35,419
actually built a release pipeline

00:18:32,649 --> 00:18:37,549
utilizing automated that which consists

00:18:35,419 --> 00:18:40,039
of one fresh environment where our

00:18:37,549 --> 00:18:42,860
packages are always simply installed and

00:18:40,039 --> 00:18:44,570
removed to see if the installation and

00:18:42,860 --> 00:18:47,899
removal process works for each package

00:18:44,570 --> 00:18:53,269
and then we have a long-term lab that is

00:18:47,899 --> 00:18:55,580
just started up during the release

00:18:53,269 --> 00:18:57,950
process all the packages are installed

00:18:55,580 --> 00:19:00,500
even if there are older versions of the

00:18:57,950 --> 00:19:03,139
packages already on the system to test

00:19:00,500 --> 00:19:06,549
for example an unclean system or a

00:19:03,139 --> 00:19:08,600
systems that are constantly upgraded and

00:19:06,549 --> 00:19:11,090
afterwards the lab environment is just

00:19:08,600 --> 00:19:12,710
shut down but not removed entirely so

00:19:11,090 --> 00:19:14,929
that we have some long running systems

00:19:12,710 --> 00:19:16,789
to mimic different stages of the

00:19:14,929 --> 00:19:19,460
operating system or of the application

00:19:16,789 --> 00:19:22,730
lifecycle so this would be one case

00:19:19,460 --> 00:19:25,100
where would you reuse existing labs and

00:19:22,730 --> 00:19:26,899
lastly you can not only reuse lab

00:19:25,100 --> 00:19:29,419
environments but you can also connect to

00:19:26,899 --> 00:19:31,880
your existing infrastructure this is

00:19:29,419 --> 00:19:33,950
also quite interesting because this way

00:19:31,880 --> 00:19:35,750
you can integrate parts of your

00:19:33,950 --> 00:19:39,440
infrastructure in the lab environment so

00:19:35,750 --> 00:19:41,480
for example if you have an existing lab

00:19:39,440 --> 00:19:43,370
domain and then an active directory you

00:19:41,480 --> 00:19:46,909
don't have to necessarily create new

00:19:43,370 --> 00:19:49,279
domain controllers just toast your lab

00:19:46,909 --> 00:19:52,130
machines for example what you would do

00:19:49,279 --> 00:19:54,679
instead is add your existing Active

00:19:52,130 --> 00:19:57,200
Directory domain controllers or just one

00:19:54,679 --> 00:20:01,170
of them really to the lab environment as

00:19:57,200 --> 00:20:04,440
a sort of proxy the proxy is just

00:20:01,170 --> 00:20:06,780
used as an object to interact with the

00:20:04,440 --> 00:20:09,510
other lap machines but it's never really

00:20:06,780 --> 00:20:12,360
touched during the deployment so any

00:20:09,510 --> 00:20:14,250
configuration that is done or normally

00:20:12,360 --> 00:20:16,620
would be done is not done on the

00:20:14,250 --> 00:20:19,620
machines that are already present in the

00:20:16,620 --> 00:20:21,690
lab this way you can onboard your

00:20:19,620 --> 00:20:24,780
machines to Active Directory for example

00:20:21,690 --> 00:20:26,850
have them domain join and if the lab is

00:20:24,780 --> 00:20:28,500
removed later on the machines are

00:20:26,850 --> 00:20:33,620
removed but the domain controller of

00:20:28,500 --> 00:20:37,230
course remains very important concept

00:20:33,620 --> 00:20:39,270
next up I would like to get into the

00:20:37,230 --> 00:20:41,580
demo environment because I think this is

00:20:39,270 --> 00:20:44,910
actually what will help you most so let

00:20:41,580 --> 00:20:47,550
me switch to my second desktop where I

00:20:44,910 --> 00:20:50,070
have already prepared some of the stuff

00:20:47,550 --> 00:20:51,390
so let's start with our simple lab

00:20:50,070 --> 00:20:55,830
environment this time it's really simple

00:20:51,390 --> 00:20:57,270
it's just one virtual machine as I said

00:20:55,830 --> 00:21:00,830
everything starts with a new that

00:20:57,270 --> 00:21:04,500
definition which I am creating here

00:21:00,830 --> 00:21:08,760
running the new lab definition will do

00:21:04,500 --> 00:21:13,800
some very basic tasks create for example

00:21:08,760 --> 00:21:15,300
the let definition storage as you can

00:21:13,800 --> 00:21:19,470
see here in the top let me scroll up a

00:21:15,300 --> 00:21:21,510
little bit this path of course changes

00:21:19,470 --> 00:21:26,640
on Linux systems so if you are using

00:21:21,510 --> 00:21:27,870
Linux this will default to your users to

00:21:26,640 --> 00:21:31,380
your user data but it's fully

00:21:27,870 --> 00:21:33,690
configurable so any path here can be

00:21:31,380 --> 00:21:35,820
configured as well for example the lab

00:21:33,690 --> 00:21:38,250
sources path which contains a couple of

00:21:35,820 --> 00:21:42,510
sample scripts custom roles and so on

00:21:38,250 --> 00:21:45,510
this is all configurable next up I will

00:21:42,510 --> 00:21:47,670
need a virtual machine which I can just

00:21:45,510 --> 00:21:50,160
add as well with a new virtual machine

00:21:47,670 --> 00:21:53,250
definition and you can see in the bottom

00:21:50,160 --> 00:21:55,080
here that there are currently no virtual

00:21:53,250 --> 00:21:58,080
networks specified so authoritive that

00:21:55,080 --> 00:21:59,940
aims to create one automatically for

00:21:58,080 --> 00:22:01,800
this purpose the existing network

00:21:59,940 --> 00:22:05,520
adapters on the system are enumerated

00:22:01,800 --> 00:22:08,220
and we have a look at which IP addresses

00:22:05,520 --> 00:22:09,960
are actually in used this is important

00:22:08,220 --> 00:22:13,230
for hyper-v not so much for as you are

00:22:09,960 --> 00:22:14,790
of course so on apathy in Windows we

00:22:13,230 --> 00:22:17,400
will examine all the existing

00:22:14,790 --> 00:22:19,380
adapters which networks are configured

00:22:17,400 --> 00:22:22,260
and then choose the next available

00:22:19,380 --> 00:22:26,430
network address space again this of

00:22:22,260 --> 00:22:28,890
course is configurable lastly I can just

00:22:26,430 --> 00:22:31,380
execute install app which will then

00:22:28,890 --> 00:22:33,930
continue to create my lab environment

00:22:31,380 --> 00:22:37,680
for me there are multiple things

00:22:33,930 --> 00:22:39,480
happening here so you can see we are

00:22:37,680 --> 00:22:41,910
creating a couple of virtual networks

00:22:39,480 --> 00:22:45,420
ultimately that will create base images

00:22:41,910 --> 00:22:49,800
so we are using differencing disk on

00:22:45,420 --> 00:22:52,590
hyper-v on Azure we are simply using

00:22:49,800 --> 00:22:55,140
managed operating system disks it's

00:22:52,590 --> 00:22:58,260
really not interesting at the moment now

00:22:55,140 --> 00:23:00,150
ultimate lab will try to connect to the

00:22:58,260 --> 00:23:02,910
virtual machine using PowerShell

00:23:00,150 --> 00:23:06,000
remoting so windows remote management in

00:23:02,910 --> 00:23:09,860
our case or in the case of the next

00:23:06,000 --> 00:23:14,370
machine it put the SSH remoting are also

00:23:09,860 --> 00:23:17,610
WS man you can see here the server I

00:23:14,370 --> 00:23:20,010
just created is being started from my

00:23:17,610 --> 00:23:22,500
differencing disk and should be ready in

00:23:20,010 --> 00:23:25,260
a couple of seconds but will be ready as

00:23:22,500 --> 00:23:27,120
soon as windows remote management to the

00:23:25,260 --> 00:23:33,990
machine is possible so a connection on

00:23:27,120 --> 00:23:35,970
part 5 9 8 5 while this is working we

00:23:33,990 --> 00:23:38,430
can have a look at the other commands

00:23:35,970 --> 00:23:41,790
that are available and I will get to

00:23:38,430 --> 00:23:44,010
them later on as well so automatic SEP

00:23:41,790 --> 00:23:46,170
itself is not only a lab automation

00:23:44,010 --> 00:23:50,340
framework but it also contains a whole

00:23:46,170 --> 00:23:51,930
bunch of commandlets powershell

00:23:50,340 --> 00:23:53,850
commandlets that will help you into a

00:23:51,930 --> 00:23:55,830
positive environment like for example

00:23:53,850 --> 00:23:59,700
the first one here invoke that command

00:23:55,830 --> 00:24:02,300
so when I created the environment you

00:23:59,700 --> 00:24:05,430
saw that I didn't use any credentials

00:24:02,300 --> 00:24:08,730
this is something that we automatically

00:24:05,430 --> 00:24:10,470
handle at the moment so whenever you

00:24:08,730 --> 00:24:12,540
create a new that a set of default

00:24:10,470 --> 00:24:15,420
credentials will be used since this is a

00:24:12,540 --> 00:24:17,430
lab environment we don't really worry

00:24:15,420 --> 00:24:19,950
too much about credentials in this case

00:24:17,430 --> 00:24:22,110
you can't specify credentials for the

00:24:19,950 --> 00:24:24,510
installation process for example or for

00:24:22,110 --> 00:24:27,090
the domain environment but usually it's

00:24:24,510 --> 00:24:30,820
not necessary

00:24:27,090 --> 00:24:33,820
all commands lots of Ottomans epithets

00:24:30,820 --> 00:24:36,990
target the net machines themselves are

00:24:33,820 --> 00:24:40,390
capable of using the credentials

00:24:36,990 --> 00:24:42,280
automatically so for example if I were

00:24:40,390 --> 00:24:46,990
to execute the get website commands that

00:24:42,280 --> 00:24:48,940
on my remote machine this will probably

00:24:46,990 --> 00:24:52,540
fail because the feature is not

00:24:48,940 --> 00:24:54,880
installed we can see that the commander

00:24:52,540 --> 00:24:56,950
is indeed executed and we can also see

00:24:54,880 --> 00:24:58,900
that your website is not recognized as

00:24:56,950 --> 00:24:59,470
the name of a command which well that's

00:24:58,900 --> 00:25:01,300
too bad

00:24:59,470 --> 00:25:03,880
so in this case I need to add another

00:25:01,300 --> 00:25:06,370
feature which is also very easy with

00:25:03,880 --> 00:25:10,000
automated that so that's at 1 installed

00:25:06,370 --> 00:25:13,480
left windows feature you can see that

00:25:10,000 --> 00:25:15,700
this module was originally only meant to

00:25:13,480 --> 00:25:17,440
be used on Windows however it's my

00:25:15,700 --> 00:25:19,510
pleasure to extend this to linens as

00:25:17,440 --> 00:25:21,460
well because to be honest this is one of

00:25:19,510 --> 00:25:24,280
my favourite environments to work in

00:25:21,460 --> 00:25:26,590
although I am working for Microsoft my

00:25:24,280 --> 00:25:32,320
roots are with Linux I've been using

00:25:26,590 --> 00:25:36,310
again - and Arch Linux for years and

00:25:32,320 --> 00:25:38,800
years now nowadays I'm more using Fedora

00:25:36,310 --> 00:25:40,900
and going to for my tests but it's

00:25:38,800 --> 00:25:43,000
always great fun and we will see similar

00:25:40,900 --> 00:25:47,380
features on the mix as well so in my

00:25:43,000 --> 00:25:58,450
case I need to install the web server

00:25:47,380 --> 00:26:00,960
feature on my machine and I would like

00:25:58,450 --> 00:26:05,140
to include at least the management tools

00:26:00,960 --> 00:26:07,270
for this again installed a windows

00:26:05,140 --> 00:26:10,210
feature connects to the machine using

00:26:07,270 --> 00:26:13,510
PowerShell remoting so you could use of

00:26:10,210 --> 00:26:14,770
course multiple machines in parallel one

00:26:13,510 --> 00:26:17,260
of the features of Windows remote

00:26:14,770 --> 00:26:20,230
management is that set sessions are used

00:26:17,260 --> 00:26:22,750
in parallel so by default you would for

00:26:20,230 --> 00:26:26,440
example use 32 parallel connections

00:26:22,750 --> 00:26:28,300
which is quite good as soon as the

00:26:26,440 --> 00:26:30,400
features installed we can run the

00:26:28,300 --> 00:26:31,690
command a second time and this time it

00:26:30,400 --> 00:26:34,540
will work and actually turned on

00:26:31,690 --> 00:26:37,240
something most of our command sets are

00:26:34,540 --> 00:26:39,429
built the same so most of our commanders

00:26:37,240 --> 00:26:42,839
at a pass-through switch which means

00:26:39,429 --> 00:26:47,080
they do not return anything by default

00:26:42,839 --> 00:26:50,589
it's not to clutter up your output in

00:26:47,080 --> 00:26:53,139
this case so let's see how long this

00:26:50,589 --> 00:26:53,499
takes shouldn't take too long there we

00:26:53,139 --> 00:26:57,099
go

00:26:53,499 --> 00:26:58,869
and now let's try the commands at the

00:26:57,099 --> 00:27:00,729
second time this time it works and it

00:26:58,869 --> 00:27:03,129
returns the default website

00:27:00,729 --> 00:27:05,529
welcome to iOS 7 or something like that

00:27:03,129 --> 00:27:08,019
this also works for sims sessions of

00:27:05,529 --> 00:27:11,589
course so if you are using sim promoting

00:27:08,019 --> 00:27:14,889
for example to remotely retrieve

00:27:11,589 --> 00:27:17,619
information like in this case we display

00:27:14,889 --> 00:27:19,299
out or if you are using desired state

00:27:17,619 --> 00:27:22,419
configuration and want to have a look at

00:27:19,299 --> 00:27:25,179
the DSC local configuration manager you

00:27:22,419 --> 00:27:27,700
can use the parameters obsession with

00:27:25,179 --> 00:27:31,049
elapsed time sessions again no need to

00:27:27,700 --> 00:27:31,049
worry about the credentials of course

00:27:31,289 --> 00:27:37,119
you can also simply interact with the

00:27:34,710 --> 00:27:42,249
DEP machines if you type their

00:27:37,119 --> 00:27:44,049
parameters correctly in this case the

00:27:42,249 --> 00:27:46,570
wait parameter of course waits until the

00:27:44,049 --> 00:27:49,109
machine is fully operational again and

00:27:46,570 --> 00:27:52,269
responds to windows remote management

00:27:49,109 --> 00:27:55,029
requests so that we can control it this

00:27:52,269 --> 00:27:56,559
is a crucial part so we also are able to

00:27:55,029 --> 00:28:01,419
deploy the nooks of our clothes of

00:27:56,559 --> 00:28:05,320
course with sent OS and generally

00:28:01,419 --> 00:28:08,769
redhead and Sousa based systems at the

00:28:05,320 --> 00:28:10,690
moment not so much with with a boot in

00:28:08,769 --> 00:28:13,599
Debian because the deployment process

00:28:10,690 --> 00:28:17,289
was a bit complicated or still a bit

00:28:13,599 --> 00:28:19,749
complicated regardless if you want to

00:28:17,289 --> 00:28:21,339
include Linux machines in their lab then

00:28:19,749 --> 00:28:23,139
either need to be connected to the

00:28:21,339 --> 00:28:25,029
internet or they need to be capable of

00:28:23,139 --> 00:28:26,559
installing PowerShell can also include

00:28:25,029 --> 00:28:28,690
the powershell as a package of line

00:28:26,559 --> 00:28:30,969
which is then installed to the machine

00:28:28,690 --> 00:28:35,859
during the deployment process of course

00:28:30,969 --> 00:28:38,049
so once the machine is ready we can for

00:28:35,859 --> 00:28:40,389
example simply take a snapshot before we

00:28:38,049 --> 00:28:43,049
start messing up the lab environment to

00:28:40,389 --> 00:28:46,610
something I do quite often not mess up

00:28:43,049 --> 00:28:51,920
necessarily but take checked what

00:28:46,610 --> 00:28:51,920
saving the VM is of course also possible

00:28:52,160 --> 00:28:58,110
there's some incongruence here which I

00:28:54,720 --> 00:29:00,990
need to correct which will simply store

00:28:58,110 --> 00:29:03,570
the Machine state to disk so that it's

00:29:00,990 --> 00:29:07,710
saved can starve the left machine again

00:29:03,570 --> 00:29:11,820
wait for it to be responsive again and

00:29:07,710 --> 00:29:16,830
then continue for my next trick I'm

00:29:11,820 --> 00:29:18,870
downloading notepad plus plus by using

00:29:16,830 --> 00:29:21,090
another command that get lab Internet

00:29:18,870 --> 00:29:23,850
file which works on your Android

00:29:21,090 --> 00:29:25,980
premises of course using the dynamic

00:29:23,850 --> 00:29:28,290
variable dollar net sources this

00:29:25,980 --> 00:29:30,390
variable automatically points to your

00:29:28,290 --> 00:29:33,120
DEP services directory regardless of

00:29:30,390 --> 00:29:35,850
where you are so in the cloud it would

00:29:33,120 --> 00:29:37,970
point to an engine or file share on

00:29:35,850 --> 00:29:42,390
premises it just points to whatever

00:29:37,970 --> 00:29:44,790
folder you configured now I can simply

00:29:42,390 --> 00:29:48,210
install whatever I downloaded with

00:29:44,790 --> 00:29:49,860
install DEP software package I'm using

00:29:48,210 --> 00:29:51,990
the command line slash s for silent

00:29:49,860 --> 00:29:54,809
install and I expect some return codes

00:29:51,990 --> 00:30:01,200
like zero and thirty ten to indicate the

00:29:54,809 --> 00:30:04,200
success very easy you can also use pass

00:30:01,200 --> 00:30:07,170
through here in order to get the results

00:30:04,200 --> 00:30:09,270
back property to continue with your

00:30:07,170 --> 00:30:11,580
automation for example or to do a

00:30:09,270 --> 00:30:13,440
restart if the return colors 3010 which

00:30:11,580 --> 00:30:15,360
is the universe the windows return code

00:30:13,440 --> 00:30:20,670
for restart required but everything else

00:30:15,360 --> 00:30:22,530
was successful and we don't so

00:30:20,670 --> 00:30:24,690
notepad plus plus has been installed in

00:30:22,530 --> 00:30:28,140
the background you can quickly verify

00:30:24,690 --> 00:30:29,100
this by logging on to the machine but

00:30:28,140 --> 00:30:31,890
let me do this

00:30:29,100 --> 00:30:34,470
not the manual way stupid way but of

00:30:31,890 --> 00:30:37,419
course the automated way so the our

00:30:34,470 --> 00:30:40,029
command is available like connect lab TM

00:30:37,419 --> 00:30:41,649
which you can use in this case if you

00:30:40,029 --> 00:30:42,909
don't know the credentials or you don't

00:30:41,649 --> 00:30:45,219
necessarily have access to the

00:30:42,909 --> 00:30:48,940
hypervisor itself at the moment so let's

00:30:45,219 --> 00:30:51,579
just connect to our V 0 1 on the Windows

00:30:48,940 --> 00:30:54,489
machine we default of course to remote

00:30:51,579 --> 00:31:07,869
desktop or DP a Linux machine we will

00:30:54,489 --> 00:31:09,639
try to use SSH so let's have a look as

00:31:07,869 --> 00:31:14,349
soon as I get my desktop we should be

00:31:09,639 --> 00:31:16,299
able to see that yes there we go notepad

00:31:14,349 --> 00:31:18,489
plus plus has just been installed and

00:31:16,299 --> 00:31:20,019
everything is working fine now as soon

00:31:18,489 --> 00:31:24,940
as you're done with the lab you can

00:31:20,019 --> 00:31:27,429
simply remove it and be done with it

00:31:24,940 --> 00:31:34,329
this will of course not remove the base

00:31:27,429 --> 00:31:36,820
images but only the the OS disks you

00:31:34,329 --> 00:31:39,489
created the resources like network

00:31:36,820 --> 00:31:41,349
adapters that you created and so on if

00:31:39,489 --> 00:31:43,929
you have external adapters that connect

00:31:41,349 --> 00:31:45,909
to the internet this will of course not

00:31:43,929 --> 00:31:50,649
be removed as they might be used in

00:31:45,909 --> 00:31:53,049
other labs our pipeline now makes use of

00:31:50,649 --> 00:31:59,709
automated DEP as well so the pipeline I

00:31:53,049 --> 00:32:01,479
built I created in Yama let's just very

00:31:59,709 --> 00:32:03,070
quickly brush over this because I hope

00:32:01,479 --> 00:32:05,320
you are already familiar with how

00:32:03,070 --> 00:32:09,219
pipelines work in general we have some

00:32:05,320 --> 00:32:12,429
steps some jobs in our pipeline the

00:32:09,219 --> 00:32:14,139
first job would be to build the actual

00:32:12,429 --> 00:32:18,309
web application that is part of this

00:32:14,139 --> 00:32:21,459
project the next task is downloading all

00:32:18,309 --> 00:32:24,429
prerequisites so for example installing

00:32:21,459 --> 00:32:27,969
the automatic module installing through

00:32:24,429 --> 00:32:30,249
vehicles of modules on Linux install the

00:32:27,969 --> 00:32:32,649
library to use MTA lemma for the error

00:32:30,249 --> 00:32:35,469
authentication and so on

00:32:32,649 --> 00:32:38,129
I'm using environment variables to pass

00:32:35,469 --> 00:32:41,019
in the lab name as well as the password

00:32:38,129 --> 00:32:43,570
but you can do this otherwise as well

00:32:41,019 --> 00:32:45,729
and then we simply build the dev

00:32:43,570 --> 00:32:49,569
environment the hyper-v lab the

00:32:45,729 --> 00:32:51,320
on-premises lab runs on my local youth

00:32:49,569 --> 00:32:54,680
worker pool

00:32:51,320 --> 00:32:59,840
or as the Linux validation build will

00:32:54,680 --> 00:33:03,680
run on a hosted agent and a boon to

00:32:59,840 --> 00:33:05,900
service in this case we have the same

00:33:03,680 --> 00:33:07,940
tasks we also build the prerequisites

00:33:05,900 --> 00:33:11,030
some of the prerequisites and build let

00:33:07,940 --> 00:33:13,640
this time however we built the lab on a

00:33:11,030 --> 00:33:16,430
jewel which means that I am passing in

00:33:13,640 --> 00:33:18,350
the password and my as well service

00:33:16,430 --> 00:33:19,070
principle which has been sterilized to

00:33:18,350 --> 00:33:22,070
Jason

00:33:19,070 --> 00:33:23,840
checked simply because I need to

00:33:22,070 --> 00:33:26,650
authenticate to issuer of course if I

00:33:23,840 --> 00:33:29,090
want to deploy any resources to Azure

00:33:26,650 --> 00:33:30,050
other than that the pipeline looks

00:33:29,090 --> 00:33:34,070
exactly the same

00:33:30,050 --> 00:33:36,710
so validation in the end with pasta and

00:33:34,070 --> 00:33:39,860
then we publish the test results to see

00:33:36,710 --> 00:33:43,010
if the entire lab worked if all the

00:33:39,860 --> 00:33:46,940
tests are successful we remove the lab

00:33:43,010 --> 00:33:49,520
again in order to save resources to save

00:33:46,940 --> 00:33:51,170
money on the door and to save resources

00:33:49,520 --> 00:33:54,080
on premises as well

00:33:51,170 --> 00:33:56,420
my built worker is an on-premises

00:33:54,080 --> 00:34:00,200
hyper-v using nested virtualization

00:33:56,420 --> 00:34:02,690
which contains my deployed workloads in

00:34:00,200 --> 00:34:05,840
this case depending on that of course we

00:34:02,690 --> 00:34:09,230
have our final stage the deployment of

00:34:05,840 --> 00:34:13,940
production which depends on the success

00:34:09,230 --> 00:34:16,220
of the validation phases on the windows

00:34:13,940 --> 00:34:18,380
and the Linux agent and should only

00:34:16,220 --> 00:34:22,460
occur when I'm working in the master

00:34:18,380 --> 00:34:25,270
branch the distended so far the

00:34:22,460 --> 00:34:28,790
prerequisites simply download

00:34:25,270 --> 00:34:33,700
prerequisites like required modules for

00:34:28,790 --> 00:34:36,530
example in my case so as not to get

00:34:33,700 --> 00:34:38,840
asked interactively which doesn't work

00:34:36,530 --> 00:34:41,710
on the boot agent of course I am opting

00:34:38,840 --> 00:34:44,330
in to telemetry we can also opt out I

00:34:41,710 --> 00:34:46,130
don't really care

00:34:44,330 --> 00:34:47,630
we are using the telemetry to see which

00:34:46,130 --> 00:34:49,880
roles are used and how long and

00:34:47,630 --> 00:34:52,610
deployment typically takes so as to

00:34:49,880 --> 00:34:55,070
guard engage which features we need to

00:34:52,610 --> 00:34:56,780
develop more for example we are very

00:34:55,070 --> 00:34:58,850
transparent about that so if you want to

00:34:56,780 --> 00:35:01,930
look at the telemetry that is sent it's

00:34:58,850 --> 00:35:04,660
all documented on our website fully

00:35:01,930 --> 00:35:07,360
but this shouldn't be too interesting

00:35:04,660 --> 00:35:09,790
right now the validation phase however

00:35:07,360 --> 00:35:11,680
is quite interesting because we are

00:35:09,790 --> 00:35:15,250
using esta for our unit and integration

00:35:11,680 --> 00:35:18,070
tests and publish the test results for

00:35:15,250 --> 00:35:20,560
both through the pipeline the tests

00:35:18,070 --> 00:35:23,880
themselves are quite simple so if we

00:35:20,560 --> 00:35:29,680
have a look at the API tests we again

00:35:23,880 --> 00:35:33,670
import the lab environment which happens

00:35:29,680 --> 00:35:35,770
in the validation step so that is being

00:35:33,670 --> 00:35:38,530
imported whether it's on a draw or

00:35:35,770 --> 00:35:41,500
hyper-v it vd that's interesting in this

00:35:38,530 --> 00:35:44,350
case and then if we discover that we are

00:35:41,500 --> 00:35:46,870
on a jewel we branch off them

00:35:44,350 --> 00:35:49,420
differently and use the fqdn of the

00:35:46,870 --> 00:35:51,880
machine to connect so the Public DNS

00:35:49,420 --> 00:35:54,220
table that we assign to the load

00:35:51,880 --> 00:35:58,480
balancer which hides all the lap DMS

00:35:54,220 --> 00:35:59,830
from the big bad internet on premises we

00:35:58,480 --> 00:36:01,750
simply use the full qualified domain

00:35:59,830 --> 00:36:04,840
name which we can also use to connect to

00:36:01,750 --> 00:36:07,150
the Machine if we are as your we need to

00:36:04,840 --> 00:36:09,520
allow additional ports on the load

00:36:07,150 --> 00:36:11,260
balancer so I'm testing if four four

00:36:09,520 --> 00:36:13,600
four three was actually a load balance

00:36:11,260 --> 00:36:15,900
port and I can reach the machine other

00:36:13,600 --> 00:36:18,330
than that we are simply calling the API

00:36:15,900 --> 00:36:21,190
this is one of the sampler if the is

00:36:18,330 --> 00:36:23,740
that you can see or that you can find

00:36:21,190 --> 00:36:26,140
for example on on floor side there's a

00:36:23,740 --> 00:36:28,150
very good course on asp.net development

00:36:26,140 --> 00:36:31,120
and how they recommend to check this out

00:36:28,150 --> 00:36:33,490
and we're using the restaurants API here

00:36:31,120 --> 00:36:36,430
so we are testing it Bob's Burgers and

00:36:33,490 --> 00:36:39,580
the flying dutchman can be created or

00:36:36,430 --> 00:36:42,730
updated in our API and we are doing this

00:36:39,580 --> 00:36:44,380
with test pester pester is a unit and

00:36:42,730 --> 00:36:46,510
integration test framework for

00:36:44,380 --> 00:36:48,610
PowerShell which consists of a

00:36:46,510 --> 00:36:52,150
domain-specific language in this case we

00:36:48,610 --> 00:36:54,430
describe our test suite and we are using

00:36:52,150 --> 00:36:57,030
the context of restaurants maybe we also

00:36:54,430 --> 00:37:00,670
have the context of deliveries or

00:36:57,030 --> 00:37:03,670
restaurant inventory for example so we

00:37:00,670 --> 00:37:08,500
are building a context here the target

00:37:03,670 --> 00:37:12,700
URL is built using said context and we

00:37:08,500 --> 00:37:15,810
will simply try to use the create read

00:37:12,700 --> 00:37:18,330
update and delete

00:37:15,810 --> 00:37:21,300
methods that our REST API should expose

00:37:18,330 --> 00:37:27,710
so we really test integration test all

00:37:21,300 --> 00:37:27,710
the functions here with our now live API

00:37:28,550 --> 00:37:34,440
in this case in the lab environment

00:37:31,290 --> 00:37:40,490
there are certificates that are being

00:37:34,440 --> 00:37:40,490
issued so that if we have a look here

00:37:40,760 --> 00:37:46,590
consists of a domain controller in root

00:37:43,860 --> 00:37:49,890
certificate authority as well as a web

00:37:46,590 --> 00:37:52,550
server which will host our application

00:37:49,890 --> 00:37:56,790
the root certificate authority will then

00:37:52,550 --> 00:37:59,520
publish or the web server will request a

00:37:56,790 --> 00:38:03,330
certificate from the root CA and then we

00:37:59,520 --> 00:38:15,570
will be able to run the actual tests so

00:38:03,330 --> 00:38:17,330
let's have a look at the tests I already

00:38:15,570 --> 00:38:21,990
ran a pipeline this pipeline

00:38:17,330 --> 00:38:24,090
unfortunately failed so at the run skill

00:38:21,990 --> 00:38:24,960
and apparently my Linux blue is failed

00:38:24,090 --> 00:38:27,080
that's too bad

00:38:24,960 --> 00:38:31,410
so let's have a look at the successful

00:38:27,080 --> 00:38:33,120
Windows build here to see how this looks

00:38:31,410 --> 00:38:35,700
like and of course and I told you we

00:38:33,120 --> 00:38:37,560
have several phases first of all the web

00:38:35,700 --> 00:38:39,990
application is built pretty standard

00:38:37,560 --> 00:38:41,700
fare then we download the prerequisites

00:38:39,990 --> 00:38:45,840
with a PowerShell task which is first

00:38:41,700 --> 00:38:47,580
platform as you know then the bulk of

00:38:45,840 --> 00:38:49,440
the time is spent creating the

00:38:47,580 --> 00:38:50,820
validation environment so this is

00:38:49,440 --> 00:38:55,260
actually creating the lab environment

00:38:50,820 --> 00:38:59,190
here 23 minutes and creates all the

00:38:55,260 --> 00:39:01,320
necessary components as well as as doing

00:38:59,190 --> 00:39:04,470
some configuration tasks like installing

00:39:01,320 --> 00:39:07,470
asp.net core for example on my Windows

00:39:04,470 --> 00:39:12,380
Server and so on the validation however

00:39:07,470 --> 00:39:16,320
was quite fast so the validation script

00:39:12,380 --> 00:39:19,080
tests the API and sees that it's

00:39:16,320 --> 00:39:21,360
reachable you can see here the fqdn that

00:39:19,080 --> 00:39:24,630
is used and the port as well as the

00:39:21,360 --> 00:39:25,290
endpoint and then proceeds to create new

00:39:24,630 --> 00:39:29,440
items

00:39:25,290 --> 00:39:31,870
it reads updates and deletes just fine

00:39:29,440 --> 00:39:40,600
and that's about it if we have a look at

00:39:31,870 --> 00:39:43,770
the test results of our pipeline we can

00:39:40,600 --> 00:39:47,710
see that all the tests have passed so

00:39:43,770 --> 00:39:50,800
apparently the Linux build failed

00:39:47,710 --> 00:39:52,690
somewhere else and not during the test

00:39:50,800 --> 00:39:54,640
this is unfortunate but I can tell you

00:39:52,690 --> 00:39:56,320
why it it's because as yours I'm a lot

00:39:54,640 --> 00:39:58,030
of load right now and I didn't have

00:39:56,320 --> 00:40:01,210
enough course available for my

00:39:58,030 --> 00:40:03,370
subscription so unfortunately I have too

00:40:01,210 --> 00:40:06,160
many labs deployed and I need to delete

00:40:03,370 --> 00:40:08,950
one before continuing which I didn't see

00:40:06,160 --> 00:40:13,090
before however you can see the test

00:40:08,950 --> 00:40:15,910
results of the tests on Windows and

00:40:13,090 --> 00:40:18,910
drill down into them if you if you like

00:40:15,910 --> 00:40:23,530
it there are no errors of course simply

00:40:18,910 --> 00:40:27,520
pass the test case this pretty much sums

00:40:23,530 --> 00:40:31,210
up the pipeline now every time I change

00:40:27,520 --> 00:40:36,820
something in my lab environment maybe in

00:40:31,210 --> 00:40:39,520
this five year the pipeline is kicked

00:40:36,820 --> 00:40:47,020
off of course there is a committed

00:40:39,520 --> 00:40:51,880
trigger and now if we go Dec actually

00:40:47,020 --> 00:40:55,270
let me quickly start my Duda now if we

00:40:51,880 --> 00:40:57,700
go back to the pipeline bastard up here

00:40:55,270 --> 00:40:59,920
we can see the process happening in real

00:40:57,700 --> 00:41:01,810
time I won't bother with the details we

00:40:59,920 --> 00:41:04,390
are currently waiting for my own

00:41:01,810 --> 00:41:06,400
purposes agent to get started and to

00:41:04,390 --> 00:41:08,620
connect to enjoy DevOps as soon as this

00:41:06,400 --> 00:41:10,180
is done the Dacian boot will start

00:41:08,620 --> 00:41:10,750
running on Windows as well the Dukes is

00:41:10,180 --> 00:41:12,840
in full swing

00:41:10,750 --> 00:41:15,310
so the web application is being built

00:41:12,840 --> 00:41:16,000
that project was it will be successfully

00:41:15,310 --> 00:41:18,460
downloaded

00:41:16,000 --> 00:41:22,300
however somewhere during the validation

00:41:18,460 --> 00:41:24,910
deployment this will apparently fail on

00:41:22,300 --> 00:41:27,920
the problem at the moment I just need t

00:41:24,910 --> 00:41:33,470
allocate some resources first

00:41:27,920 --> 00:41:37,039
very good so this is how you can use

00:41:33,470 --> 00:41:41,200
automatic depth in a building police

00:41:37,039 --> 00:41:44,510
pipeline for your benefit to sum up our

00:41:41,200 --> 00:41:48,140
method that will help you with even the

00:41:44,510 --> 00:41:50,059
most complex test environments there are

00:41:48,140 --> 00:41:52,549
multiple roles that you can deploy this

00:41:50,059 --> 00:41:54,589
is not only something simple like a file

00:41:52,549 --> 00:41:56,480
or a web server can also be a domain

00:41:54,589 --> 00:41:59,420
controller can be so difficult

00:41:56,480 --> 00:42:01,700
authoritative inferred simple server

00:41:59,420 --> 00:42:03,819
maybe with no base on Cluster you can

00:42:01,700 --> 00:42:08,150
deploy a fate of a cluster of course

00:42:03,819 --> 00:42:10,180
deploy as your DevOps or to Ezra DevOps

00:42:08,150 --> 00:42:13,430
online so for example you can use

00:42:10,180 --> 00:42:15,740
automatic lab to deploy build workers

00:42:13,430 --> 00:42:17,930
that are used on as you a DevOps the

00:42:15,740 --> 00:42:21,559
cloud service as opposed to as relief

00:42:17,930 --> 00:42:25,220
observer on premises service there are

00:42:21,559 --> 00:42:25,849
countless possibilities here it can make

00:42:25,220 --> 00:42:28,099
use of

00:42:25,849 --> 00:42:31,099
we have many sample scripts already

00:42:28,099 --> 00:42:35,539
created last time I checked it should be

00:42:31,099 --> 00:42:38,750
around 60 samples and of course we have

00:42:35,539 --> 00:42:43,279
documented everything on automated lab

00:42:38,750 --> 00:42:44,809
dot org which is our main source of

00:42:43,279 --> 00:42:48,220
documentation this contains our

00:42:44,809 --> 00:42:50,779
PowerShell help as well as all the other

00:42:48,220 --> 00:42:52,960
documentation that you would normally

00:42:50,779 --> 00:42:55,640
find in the wiki or something like that

00:42:52,960 --> 00:42:57,500
it's always a good store source to start

00:42:55,640 --> 00:42:59,210
with it's automatically generated from

00:42:57,500 --> 00:43:02,869
code with read the docs very great

00:42:59,210 --> 00:43:04,789
service and will also contain some

00:43:02,869 --> 00:43:05,390
details about the telemetry and some

00:43:04,789 --> 00:43:08,960
nice pictures

00:43:05,390 --> 00:43:11,569
I love automated lab because it deploys

00:43:08,960 --> 00:43:12,380
repeatable environments and and I don't

00:43:11,569 --> 00:43:14,349
have to do anything

00:43:12,380 --> 00:43:19,069
I will have my infrastructure as coach

00:43:14,349 --> 00:43:20,930
which I am writing once and can deploy

00:43:19,069 --> 00:43:23,150
it to any environment whether it's in

00:43:20,930 --> 00:43:25,700
the cloud or on premises whether it's at

00:43:23,150 --> 00:43:27,559
customer a or customer B or at home it

00:43:25,700 --> 00:43:30,319
doesn't really matter the only thing you

00:43:27,559 --> 00:43:33,440
need to have is either a manager account

00:43:30,319 --> 00:43:34,220
or the ISO files to actually deploy the

00:43:33,440 --> 00:43:36,380
base images

00:43:34,220 --> 00:43:39,809
other than that

00:43:36,380 --> 00:43:40,470
there's really no much else that is

00:43:39,809 --> 00:43:43,319
required

00:43:40,470 --> 00:43:46,140
apart from party if you want to

00:43:43,319 --> 00:43:48,359
contribute which I would rather come

00:43:46,140 --> 00:43:50,790
very much just head to our github

00:43:48,359 --> 00:43:54,300
repository automated lab the project

00:43:50,790 --> 00:43:56,010
also contains our side projects but this

00:43:54,300 --> 00:43:58,200
one here automated app is the main one

00:43:56,010 --> 00:44:00,059
where your issues and food requests

00:43:58,200 --> 00:44:02,430
should go really need some help

00:44:00,059 --> 00:44:04,530
for example implementing the VM we are

00:44:02,430 --> 00:44:07,530
support Philippe it's a very

00:44:04,530 --> 00:44:10,250
experimental at the moment so if you

00:44:07,530 --> 00:44:13,170
have some DMS skills or skills and other

00:44:10,250 --> 00:44:15,119
virtualization environments you're more

00:44:13,170 --> 00:44:16,740
than welcome to contribute you're still

00:44:15,119 --> 00:44:19,290
looking for example for people who would

00:44:16,740 --> 00:44:25,680
like to focus to AWS or to the Google

00:44:19,290 --> 00:44:28,260
cloud to be a bit more or to have the

00:44:25,680 --> 00:44:31,920
broader selection of target environments

00:44:28,260 --> 00:44:33,930
and with that I would like to say thank

00:44:31,920 --> 00:44:38,160
you for your patience and for your

00:44:33,930 --> 00:44:39,750
attending I will be online hopefully to

00:44:38,160 --> 00:44:41,970
answer your questions any questions that

00:44:39,750 --> 00:44:44,369
you have otherwise just had to automate

00:44:41,970 --> 00:44:47,730
that to the org or github repository

00:44:44,369 --> 00:44:50,839
find me on Twitter and just talk to me

00:44:47,730 --> 00:44:50,839
thank you very much

00:44:54,930 --> 00:45:11,420

YouTube URL: https://www.youtube.com/watch?v=XpQLXmbctx0


