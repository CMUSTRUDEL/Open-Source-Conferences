Title: stackconf 2021 | We accidentally created a Cloud on our IBM Cloud
Publication date: 2021-06-24
Playlist: stackconf online 2021
Description: 
	by JJ Asghar

Part of the job of a Developer Advocate is the ability to demo or show off portions of your technology stack to possible users. At IBM this is no different for us, but there is a gap on the scale of what our requirements are and what the provisioning of our cloud infrastructure was. In this talk we will describe our situation, our iterations on what we tried and the painful portions of them, and how we accidentally created a Cloud interface on top of the IBM Cloud, or easier said, we created a Cloud on our Cloud.
Ideally, we will show our journey and the lessons we learned along the way, and as an audience member, you will come away with nuggets of useful tooling to make your cloud usage more streamlined, and hopefully, you will see the pitfalls we fell in and you can avoid them yourself. We will show off some bad code, some good code, and some robust code; all open source and available to allow you to leverage it too.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/netways/webinare/

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/


Musik: https://www.frametraxx.de/
Captions: 
	00:00:05,660 --> 00:00:13,119
[Applause]

00:00:06,120 --> 00:00:13,119
[Music]

00:00:14,240 --> 00:00:16,560
hi

00:00:14,639 --> 00:00:18,320
my name is j.j asgar and i'm a developer

00:00:16,560 --> 00:00:20,560
advocate for ibm cloud

00:00:18,320 --> 00:00:22,560
today i'll be talking about how we

00:00:20,560 --> 00:00:25,039
accidentally created a cloud on top of

00:00:22,560 --> 00:00:25,920
the ibm cloud hopefully you'll learn

00:00:25,039 --> 00:00:28,480
some things

00:00:25,920 --> 00:00:29,519
about what we did wrong and where we

00:00:28,480 --> 00:00:31,679
came from

00:00:29,519 --> 00:00:33,120
and what we ended up and maybe a couple

00:00:31,679 --> 00:00:36,079
laughs along the way

00:00:33,120 --> 00:00:36,079
so let's get started

00:00:37,200 --> 00:00:42,840
all right hopefully you can see ibm here

00:00:40,320 --> 00:00:44,640
which is perfect and let's let's keep

00:00:42,840 --> 00:00:47,920
going

00:00:44,640 --> 00:00:49,760
so as i said um my talk today is called

00:00:47,920 --> 00:00:51,199
we accidentally created a cloud on our

00:00:49,760 --> 00:00:53,920
ibm cloud hi

00:00:51,199 --> 00:00:56,079
again i'm uh jj asghar developer

00:00:53,920 --> 00:00:59,039
advocate for ibm cloud

00:00:56,079 --> 00:00:59,359
you can find me at jj asgar on twitter

00:00:59,039 --> 00:01:03,920
and

00:00:59,359 --> 00:01:07,439
also um yes really awesome ibm.com

00:01:03,920 --> 00:01:10,720
so um yeah

00:01:07,439 --> 00:01:10,720
that's that's it in a nutshell

00:01:11,600 --> 00:01:15,280
so your ques your first first statement

00:01:14,400 --> 00:01:18,240
is probably

00:01:15,280 --> 00:01:19,280
wait what wha wha wha what's going on

00:01:18,240 --> 00:01:22,720
here

00:01:19,280 --> 00:01:26,000
um why is this why is this a talk

00:01:22,720 --> 00:01:29,040
um why why is jj telling a story

00:01:26,000 --> 00:01:32,240
of of creating a cloud on top of a cloud

00:01:29,040 --> 00:01:32,560
that seems kind of weird and it turns

00:01:32,240 --> 00:01:35,360
out

00:01:32,560 --> 00:01:36,079
this is actually a really good microcosm

00:01:35,360 --> 00:01:39,520
of

00:01:36,079 --> 00:01:40,400
the story of iterations and lessons

00:01:39,520 --> 00:01:43,439
learned

00:01:40,400 --> 00:01:46,479
about moving from a simple

00:01:43,439 --> 00:01:47,600
simple you know situation to a much more

00:01:46,479 --> 00:01:51,040
complex

00:01:47,600 --> 00:01:54,320
um project that as especially as an

00:01:51,040 --> 00:01:56,560
as an old sysadmin or sre or devops

00:01:54,320 --> 00:02:00,719
engineer whatever you want to call me

00:01:56,560 --> 00:02:02,719
um the this was this was a really good

00:02:00,719 --> 00:02:04,320
narrative on how these things kind of

00:02:02,719 --> 00:02:06,479
happen over time

00:02:04,320 --> 00:02:07,439
so hopefully you'll you'll learn some

00:02:06,479 --> 00:02:09,360
stuff

00:02:07,439 --> 00:02:11,840
from what what i've done or what our

00:02:09,360 --> 00:02:13,440
team has done and

00:02:11,840 --> 00:02:15,760
you can you can kind of bootstrap

00:02:13,440 --> 00:02:19,360
yourself to get to the next step

00:02:15,760 --> 00:02:19,360
so let's uh let's keep going

00:02:20,000 --> 00:02:26,319
so the whole core of this was basically

00:02:23,599 --> 00:02:26,879
this one specific problem which is uh

00:02:26,319 --> 00:02:29,200
before

00:02:26,879 --> 00:02:30,319
the covet times um when conferences were

00:02:29,200 --> 00:02:33,360
still around

00:02:30,319 --> 00:02:36,239
we developer advocates for ibm would go

00:02:33,360 --> 00:02:38,319
to conferences and run workshops um

00:02:36,239 --> 00:02:40,480
we were one of the first clouds out

00:02:38,319 --> 00:02:41,519
there with one of the newer releases of

00:02:40,480 --> 00:02:44,080
kubernetes

00:02:41,519 --> 00:02:44,720
and we really like to tout and show that

00:02:44,080 --> 00:02:47,040
we were

00:02:44,720 --> 00:02:48,879
on the cutting edge this also required

00:02:47,040 --> 00:02:52,319
us to spin up kubernetes clusters

00:02:48,879 --> 00:02:54,400
anywhere ranging from you know 30

00:02:52,319 --> 00:02:55,599
to sometimes hundreds of kubernetes

00:02:54,400 --> 00:02:57,280
clusters

00:02:55,599 --> 00:02:59,760
and we needed also the newest versions

00:02:57,280 --> 00:03:03,440
of doing it our newest ways of doing it

00:02:59,760 --> 00:03:07,120
so we we had to spin up all of these

00:03:03,440 --> 00:03:10,560
clusters and use the normal ibm cli

00:03:07,120 --> 00:03:14,239
or the ibm

00:03:10,560 --> 00:03:18,720
console and it was very very

00:03:14,239 --> 00:03:22,480
what's a good word for it um

00:03:18,720 --> 00:03:25,040
slow it was um it was very very slow

00:03:22,480 --> 00:03:25,840
and it was very painful so we started

00:03:25,040 --> 00:03:28,080
finding out that

00:03:25,840 --> 00:03:29,760
you know to spin up one cluster would

00:03:28,080 --> 00:03:32,159
take x amount of time

00:03:29,760 --> 00:03:33,840
and then if i had to spin up 30 of them

00:03:32,159 --> 00:03:35,599
it was really hard to do it in parallel

00:03:33,840 --> 00:03:36,879
and it was just inefficient

00:03:35,599 --> 00:03:38,640
so we had to start putting some

00:03:36,879 --> 00:03:40,640
engineering time around it

00:03:38,640 --> 00:03:44,239
and we discovered that yes as i said a

00:03:40,640 --> 00:03:47,360
moment ago the ibm cli

00:03:44,239 --> 00:03:50,640
existed and we started iterating on that

00:03:47,360 --> 00:03:52,959
so the iterations kind of went from

00:03:50,640 --> 00:03:54,400
from the very beginning to what we have

00:03:52,959 --> 00:03:56,319
now and i'm going to walk through a

00:03:54,400 --> 00:03:59,599
couple of the iterations to just kind of

00:03:56,319 --> 00:04:00,879
explain why initially clicking around in

00:03:59,599 --> 00:04:04,000
the console

00:04:00,879 --> 00:04:06,319
to where we are today was was was bad

00:04:04,000 --> 00:04:07,920
um the first thing we ever did was just

00:04:06,319 --> 00:04:09,280
because i'm an old sysadmin of course we

00:04:07,920 --> 00:04:11,840
played around with bash

00:04:09,280 --> 00:04:12,480
um bash was just basically a massive for

00:04:11,840 --> 00:04:15,120
loop

00:04:12,480 --> 00:04:15,920
where we requested a bunch of kubernetes

00:04:15,120 --> 00:04:19,199
clusters

00:04:15,920 --> 00:04:19,600
from um from ibm cloud which in essence

00:04:19,199 --> 00:04:21,040
i mean

00:04:19,600 --> 00:04:24,320
if you only have to do this once or

00:04:21,040 --> 00:04:26,000
twice that seems pretty good

00:04:24,320 --> 00:04:27,440
you know you know you just be like hey

00:04:26,000 --> 00:04:29,919
give me 30 clusters

00:04:27,440 --> 00:04:31,360
spin it up inside this account and you

00:04:29,919 --> 00:04:33,120
know call it a day

00:04:31,360 --> 00:04:35,280
but as we started getting more and more

00:04:33,120 --> 00:04:37,520
conferences we started having

00:04:35,280 --> 00:04:38,639
we started hitting the api more and more

00:04:37,520 --> 00:04:41,680
and i would spin up

00:04:38,639 --> 00:04:42,400
30 clusters 40 clusters sometimes 70

00:04:41,680 --> 00:04:44,000
clusters

00:04:42,400 --> 00:04:46,000
and then i have to spread it around

00:04:44,000 --> 00:04:47,040
across all our zones and all

00:04:46,000 --> 00:04:49,199
and i'll talk about that here in a

00:04:47,040 --> 00:04:49,840
moment but the challenge was is to be

00:04:49,199 --> 00:04:51,199
able to

00:04:49,840 --> 00:04:53,280
keep all these up and running because

00:04:51,199 --> 00:04:57,199
you know i might have a conference

00:04:53,280 --> 00:04:59,280
in um in the u.s

00:04:57,199 --> 00:05:00,400
on the east coast for three days and

00:04:59,280 --> 00:05:03,759
then i turn around

00:05:00,400 --> 00:05:05,840
and i have a another conference in emea

00:05:03,759 --> 00:05:07,199
that across only two of those days so i

00:05:05,840 --> 00:05:08,880
can't reuse this hardware

00:05:07,199 --> 00:05:10,240
so i have to continually iterate around

00:05:08,880 --> 00:05:13,440
it um

00:05:10,240 --> 00:05:16,240
especially now to today in the

00:05:13,440 --> 00:05:17,360
postcovid world or covered world that we

00:05:16,240 --> 00:05:19,120
live in now

00:05:17,360 --> 00:05:20,479
workshops are even more important so i

00:05:19,120 --> 00:05:22,160
even have even more

00:05:20,479 --> 00:05:24,320
clusters going on so what we had

00:05:22,160 --> 00:05:25,840
originally was not going to work

00:05:24,320 --> 00:05:27,360
but the first script i'm going to show

00:05:25,840 --> 00:05:29,759
you is this verify script

00:05:27,360 --> 00:05:30,639
and as you see it really is truly just a

00:05:29,759 --> 00:05:32,880
for loop

00:05:30,639 --> 00:05:33,759
um if you take a let me turn on my

00:05:32,880 --> 00:05:36,880
little

00:05:33,759 --> 00:05:37,520
laser pointer here if you see here it

00:05:36,880 --> 00:05:40,880
really is

00:05:37,520 --> 00:05:43,840
just a for loop around something called

00:05:40,880 --> 00:05:45,199
zones now i'm showing this one off first

00:05:43,840 --> 00:05:48,560
because

00:05:45,199 --> 00:05:51,600
it turns out inside of ibm cloud um

00:05:48,560 --> 00:05:52,320
we have no way to dynamically create our

00:05:51,600 --> 00:05:55,280
vlans

00:05:52,320 --> 00:05:56,560
so as you see here we have a public and

00:05:55,280 --> 00:05:57,919
private vln that you attach your

00:05:56,560 --> 00:06:01,440
clusters to

00:05:57,919 --> 00:06:02,080
so over time specifically one of the

00:06:01,440 --> 00:06:05,680
technical

00:06:02,080 --> 00:06:07,360
challenges we had was we have all these

00:06:05,680 --> 00:06:07,759
vlans and all the different zones and we

00:06:07,360 --> 00:06:10,639
have

00:06:07,759 --> 00:06:12,240
you know upwards to 40 50 zones now and

00:06:10,639 --> 00:06:13,440
i'd have to have these public and

00:06:12,240 --> 00:06:16,000
private xeons already

00:06:13,440 --> 00:06:17,759
created so every night i would actually

00:06:16,000 --> 00:06:20,000
run this verify script against

00:06:17,759 --> 00:06:21,919
every single zone to make sure that the

00:06:20,000 --> 00:06:23,280
public private zones already existed and

00:06:21,919 --> 00:06:26,400
didn't have to be re

00:06:23,280 --> 00:06:26,880
created beforehand i learned over time

00:06:26,400 --> 00:06:29,280
that

00:06:26,880 --> 00:06:31,199
um i actually really really annoyed our

00:06:29,280 --> 00:06:33,680
sres on the ibm cloud side

00:06:31,199 --> 00:06:35,840
because they would see you know 50 or 60

00:06:33,680 --> 00:06:37,280
clusters spin up overnight

00:06:35,840 --> 00:06:39,120
and as you notice are really small

00:06:37,280 --> 00:06:41,520
clusters that don't do anything

00:06:39,120 --> 00:06:42,880
sit there and then get destroyed um the

00:06:41,520 --> 00:06:44,319
morning before because i have another

00:06:42,880 --> 00:06:44,800
jenkins job that goes around cleans all

00:06:44,319 --> 00:06:47,440
this stuff

00:06:44,800 --> 00:06:48,400
up which you know is just wasting

00:06:47,440 --> 00:06:50,160
resources

00:06:48,400 --> 00:06:52,560
but it was a limitation that we had to

00:06:50,160 --> 00:06:54,720
have and it was it was just weird

00:06:52,560 --> 00:06:55,599
right but this is in essence the first

00:06:54,720 --> 00:06:57,919
iteration

00:06:55,599 --> 00:06:59,360
of creating a cloud right where you just

00:06:57,919 --> 00:07:02,240
run a bash script

00:06:59,360 --> 00:07:02,880
against um against the api which in this

00:07:02,240 --> 00:07:05,759
case

00:07:02,880 --> 00:07:07,039
is the ibm cloud here and then you just

00:07:05,759 --> 00:07:08,880
verify what's going on

00:07:07,039 --> 00:07:10,720
as you can see it doesn't work anymore

00:07:08,880 --> 00:07:12,000
there's been some

00:07:10,720 --> 00:07:14,000
progressions here but it's still

00:07:12,000 --> 00:07:16,080
important to see because if you actually

00:07:14,000 --> 00:07:18,479
look at the actual

00:07:16,080 --> 00:07:19,919
script that i used to do to run and to

00:07:18,479 --> 00:07:22,720
spin up all the clusters

00:07:19,919 --> 00:07:23,919
uh it was in essence just a for loop

00:07:22,720 --> 00:07:25,280
that would spin everything up in the

00:07:23,919 --> 00:07:27,680
background on my laptop

00:07:25,280 --> 00:07:28,840
and just you know shotgun out a bunch of

00:07:27,680 --> 00:07:32,240
different um

00:07:28,840 --> 00:07:33,840
requests i i do say though

00:07:32,240 --> 00:07:35,280
as you notice here i do have the sleep

00:07:33,840 --> 00:07:38,639
random 30

00:07:35,280 --> 00:07:40,000
because turns out i overran the api a

00:07:38,639 --> 00:07:42,080
few times

00:07:40,000 --> 00:07:43,440
on the ibm cloud actually actually

00:07:42,080 --> 00:07:45,280
causing a real outage

00:07:43,440 --> 00:07:47,360
um so i ended up learning to put a sweep

00:07:45,280 --> 00:07:50,319
there so randomly for 30 seconds

00:07:47,360 --> 00:07:52,479
instead of me like shoving you know 75

00:07:50,319 --> 00:07:55,599
100 clusters all at the exact same time

00:07:52,479 --> 00:07:56,800
i would spread it split it out over over

00:07:55,599 --> 00:07:58,960
30 seconds which

00:07:56,800 --> 00:07:59,919
seemed to have worked but if you notice

00:07:58,960 --> 00:08:01,840
here

00:07:59,919 --> 00:08:03,440
this is all just spinning up the vlans

00:08:01,840 --> 00:08:05,039
and and the different

00:08:03,440 --> 00:08:06,720
kubernetes version which was pretty

00:08:05,039 --> 00:08:08,720
great but there's this whole other

00:08:06,720 --> 00:08:10,639
section here where there's this curl

00:08:08,720 --> 00:08:13,039
and this is important to say because

00:08:10,639 --> 00:08:14,400
this the ibm cloud we actually turns out

00:08:13,039 --> 00:08:17,120
we have a tagging mechanism

00:08:14,400 --> 00:08:18,400
but it's a separate api so we end up

00:08:17,120 --> 00:08:20,479
having to create

00:08:18,400 --> 00:08:22,639
another curl against it where we'd have

00:08:20,479 --> 00:08:24,800
to sit there and wait for the

00:08:22,639 --> 00:08:26,560
back end to acknowledge that the costs

00:08:24,800 --> 00:08:28,800
cluster created and that's what this

00:08:26,560 --> 00:08:30,160
this waiting for about a minute is and

00:08:28,800 --> 00:08:33,360
then it would send hey

00:08:30,160 --> 00:08:34,240
the crn go ahead and tag against um what

00:08:33,360 --> 00:08:37,519
the

00:08:34,240 --> 00:08:38,080
what the tag is for the the um the the

00:08:37,519 --> 00:08:42,000
account

00:08:38,080 --> 00:08:43,760
and earnest for the um the ticket

00:08:42,000 --> 00:08:45,360
and as you can see this is really

00:08:43,760 --> 00:08:47,519
convoluted and it became

00:08:45,360 --> 00:08:48,720
so complex and i've ripped out a bunch

00:08:47,519 --> 00:08:50,880
of different things here

00:08:48,720 --> 00:08:51,760
that this is just more than we needed to

00:08:50,880 --> 00:08:54,959
do

00:08:51,760 --> 00:08:58,399
it was only a handful of people here

00:08:54,959 --> 00:09:00,480
inside of the inside of my little team

00:08:58,399 --> 00:09:02,640
who understood what was really going on

00:09:00,480 --> 00:09:05,839
and that was really challenging

00:09:02,640 --> 00:09:07,600
um granted we're all we're all

00:09:05,839 --> 00:09:09,600
sis admins at heart or at least in this

00:09:07,600 --> 00:09:11,440
time we were but this is not something

00:09:09,600 --> 00:09:12,640
that we could bring in more people

00:09:11,440 --> 00:09:14,399
and the reason why i bring this up is

00:09:12,640 --> 00:09:16,160
because the natural progression was we

00:09:14,399 --> 00:09:16,800
started to grow our team because we had

00:09:16,160 --> 00:09:18,480
so many

00:09:16,800 --> 00:09:20,480
these workshops and so many of these

00:09:18,480 --> 00:09:22,080
conferences and so many especially now

00:09:20,480 --> 00:09:23,920
that we're doing everything remotely

00:09:22,080 --> 00:09:25,920
started coming together that we needed

00:09:23,920 --> 00:09:29,040
to offload this work

00:09:25,920 --> 00:09:30,160
so it wasn't just me assist admin and my

00:09:29,040 --> 00:09:33,600
manager anymore

00:09:30,160 --> 00:09:34,560
now it was me sysadmin and we even had

00:09:33,600 --> 00:09:37,839
two developers

00:09:34,560 --> 00:09:41,040
giving me about 15 to 20 of their time

00:09:37,839 --> 00:09:42,080
um we we started looking into the python

00:09:41,040 --> 00:09:43,600
sdk

00:09:42,080 --> 00:09:45,120
because we were like hey there's got to

00:09:43,600 --> 00:09:46,959
be a better way to do this instead of a

00:09:45,120 --> 00:09:49,600
bunch of batch commands

00:09:46,959 --> 00:09:50,959
well the challenge was is that none of

00:09:49,600 --> 00:09:53,360
us actually knew python

00:09:50,959 --> 00:09:54,640
right like none of us were python

00:09:53,360 --> 00:09:56,320
developers by any standard

00:09:54,640 --> 00:09:57,839
yes we could read it and understand it

00:09:56,320 --> 00:10:00,080
but it's not how we thought

00:09:57,839 --> 00:10:01,440
we had a node developer we had two

00:10:00,080 --> 00:10:02,560
sysadmins who just wanted to do

00:10:01,440 --> 00:10:05,440
everything in bash

00:10:02,560 --> 00:10:06,160
and had a go developer working with me

00:10:05,440 --> 00:10:08,160
um

00:10:06,160 --> 00:10:09,519
so we started looking deeper into the

00:10:08,160 --> 00:10:11,600
python sdk

00:10:09,519 --> 00:10:13,680
mainly making it an excuse to start

00:10:11,600 --> 00:10:17,200
learning more about python

00:10:13,680 --> 00:10:19,200
and at ibm python is the language that

00:10:17,200 --> 00:10:20,880
is defaulted that most people use

00:10:19,200 --> 00:10:22,800
um because of all the ml work and things

00:10:20,880 --> 00:10:24,880
we do but it turns out

00:10:22,800 --> 00:10:26,480
that this python sdk at the time wasn't

00:10:24,880 --> 00:10:28,079
as robust as we thought it was

00:10:26,480 --> 00:10:29,839
and we also had to re-learn how to do a

00:10:28,079 --> 00:10:30,800
lot of stuff so we ended up moving past

00:10:29,839 --> 00:10:32,560
this

00:10:30,800 --> 00:10:34,560
um but it was at least nice to know that

00:10:32,560 --> 00:10:36,800
this existed and it's important to bring

00:10:34,560 --> 00:10:38,320
back in a moment

00:10:36,800 --> 00:10:41,120
the next natural progression we moved

00:10:38,320 --> 00:10:41,920
into was using ansible in the community

00:10:41,120 --> 00:10:45,200
plug-in

00:10:41,920 --> 00:10:46,640
now this is around the time that we were

00:10:45,200 --> 00:10:47,680
closing our deal with red hat so

00:10:46,640 --> 00:10:49,279
needless to say

00:10:47,680 --> 00:10:50,640
we were like well if we're gonna if we

00:10:49,279 --> 00:10:52,720
bought this company called red hat we

00:10:50,640 --> 00:10:55,920
should probably use their software

00:10:52,720 --> 00:10:57,040
so ansible was the uh the go-to for at

00:10:55,920 --> 00:10:59,440
the time

00:10:57,040 --> 00:11:01,839
but as we started plugging around inside

00:10:59,440 --> 00:11:03,360
the ansible community plug-in

00:11:01,839 --> 00:11:06,079
we discovered that there's just some

00:11:03,360 --> 00:11:07,680
oddities in it and it was

00:11:06,079 --> 00:11:09,519
it didn't seem like it was actually

00:11:07,680 --> 00:11:12,480
being like written by a human

00:11:09,519 --> 00:11:14,720
there was a lot of really really like

00:11:12,480 --> 00:11:16,160
programmatic code inside of it

00:11:14,720 --> 00:11:18,560
and we ended up finding what we call

00:11:16,160 --> 00:11:20,079
internally at ibm offering managers

00:11:18,560 --> 00:11:22,240
but in the in the rest of the world they

00:11:20,079 --> 00:11:25,279
you call them product managers

00:11:22,240 --> 00:11:26,560
uh and ask like hey what's the deal this

00:11:25,279 --> 00:11:28,160
doesn't seem like it does what we

00:11:26,560 --> 00:11:29,680
expected do

00:11:28,160 --> 00:11:32,320
and they're like yeah that's the way

00:11:29,680 --> 00:11:34,079
it's designed because it turns out

00:11:32,320 --> 00:11:36,000
of course terraform still still is

00:11:34,079 --> 00:11:37,920
around and it turns out the

00:11:36,000 --> 00:11:40,480
the the team was actually focusing on

00:11:37,920 --> 00:11:44,160
building higher terraform support

00:11:40,480 --> 00:11:47,600
and then shoving that terraform code

00:11:44,160 --> 00:11:49,120
through some like um rosetta stone that

00:11:47,600 --> 00:11:51,279
turned it into

00:11:49,120 --> 00:11:54,000
python and ansible which needless to say

00:11:51,279 --> 00:11:54,000
was a little weird

00:11:55,680 --> 00:11:59,120
so needless to say as soon as we heard

00:11:57,760 --> 00:12:01,760
that you know

00:11:59,120 --> 00:12:03,360
um terraform was the quote-unquote

00:12:01,760 --> 00:12:05,360
higher supported version

00:12:03,360 --> 00:12:06,480
we decided to spend some time with it um

00:12:05,360 --> 00:12:08,959
to kind of

00:12:06,480 --> 00:12:10,079
answer the story now as you as you heard

00:12:08,959 --> 00:12:12,160
there's about four or five

00:12:10,079 --> 00:12:13,920
people now including myself that had to

00:12:12,160 --> 00:12:15,519
kind of keep the stuff in order

00:12:13,920 --> 00:12:17,440
and kind of understand where the

00:12:15,519 --> 00:12:19,839
different lines were

00:12:17,440 --> 00:12:21,279
and terraform and the state files

00:12:19,839 --> 00:12:22,480
between a few people

00:12:21,279 --> 00:12:24,480
unless you go into like something like

00:12:22,480 --> 00:12:25,360
terraform or enterprise is a little bit

00:12:24,480 --> 00:12:28,079
challenging

00:12:25,360 --> 00:12:29,600
um we had problems just learning how to

00:12:28,079 --> 00:12:30,320
store the state files between different

00:12:29,600 --> 00:12:33,519
machines

00:12:30,320 --> 00:12:37,040
or different people and then also the

00:12:33,519 --> 00:12:39,360
the challenge of of uh knowing how to

00:12:37,040 --> 00:12:40,639
like edit the terraform plans to get to

00:12:39,360 --> 00:12:42,720
what we need to do

00:12:40,639 --> 00:12:44,079
weren't great we had some variables and

00:12:42,720 --> 00:12:45,920
we created some wrapper scripts

00:12:44,079 --> 00:12:48,800
hell i even started learning some go

00:12:45,920 --> 00:12:52,160
templating so i could templatize out

00:12:48,800 --> 00:12:54,800
the um the plan

00:12:52,160 --> 00:12:56,000
by pulling in that local.env file that

00:12:54,800 --> 00:12:58,320
you saw at the very beginning

00:12:56,000 --> 00:12:59,519
or very top of that earlier script so

00:12:58,320 --> 00:13:00,320
everyone could at least have the same

00:12:59,519 --> 00:13:02,800
workflow

00:13:00,320 --> 00:13:03,839
it would just kind of dump it out but it

00:13:02,800 --> 00:13:05,680
wasn't great

00:13:03,839 --> 00:13:07,279
and also if you notice that terraform

00:13:05,680 --> 00:13:09,279
moves relatively quickly

00:13:07,279 --> 00:13:11,200
and we had some breaking changes that

00:13:09,279 --> 00:13:11,760
were we just kept finding over and over

00:13:11,200 --> 00:13:13,920
again that

00:13:11,760 --> 00:13:15,200
it just wasn't worth you know trying to

00:13:13,920 --> 00:13:18,560
keep it alive because

00:13:15,200 --> 00:13:19,360
it wasn't consistent and it was it was

00:13:18,560 --> 00:13:21,040
weird

00:13:19,360 --> 00:13:22,639
and and it didn't do exactly what we

00:13:21,040 --> 00:13:26,000
wanted to so we actually

00:13:22,639 --> 00:13:27,839
walked back to ansible um so

00:13:26,000 --> 00:13:29,680
after terraform kind of not fitting how

00:13:27,839 --> 00:13:32,880
we really wanted to do the work

00:13:29,680 --> 00:13:33,680
and the written initial um terraform

00:13:32,880 --> 00:13:36,160
plan or

00:13:33,680 --> 00:13:37,839
the initial community project for

00:13:36,160 --> 00:13:38,720
ansible didn't really fit how we wanted

00:13:37,839 --> 00:13:41,519
to either

00:13:38,720 --> 00:13:42,240
we actually spent some time and really

00:13:41,519 --> 00:13:45,040
looked at

00:13:42,240 --> 00:13:46,720
how ansible did its job and then tried

00:13:45,040 --> 00:13:48,959
to come up with a way to kind of

00:13:46,720 --> 00:13:50,079
fit that that workflow in because we

00:13:48,959 --> 00:13:52,720
started realizing

00:13:50,079 --> 00:13:54,480
we need to do post provisioning i've

00:13:52,720 --> 00:13:56,320
completely skipped over this point

00:13:54,480 --> 00:13:58,240
which is after you do a bunch of build a

00:13:56,320 --> 00:13:59,839
bunch of clusters occasionally you're

00:13:58,240 --> 00:14:01,440
going to need to do

00:13:59,839 --> 00:14:03,199
post provisioning on it like install

00:14:01,440 --> 00:14:05,040
specific middleware or whatever maybe

00:14:03,199 --> 00:14:07,680
you need to do an istio workshop

00:14:05,040 --> 00:14:10,639
or you need to do you know like a

00:14:07,680 --> 00:14:11,199
jenkins or a argo cd workshop on top of

00:14:10,639 --> 00:14:13,519
it

00:14:11,199 --> 00:14:14,959
and sitting there and running a bash

00:14:13,519 --> 00:14:15,920
script with a bunch of cube cuddle

00:14:14,959 --> 00:14:18,959
commands inside of it

00:14:15,920 --> 00:14:21,519
is is is janky to say the least

00:14:18,959 --> 00:14:22,959
so we started trying to we took a moment

00:14:21,519 --> 00:14:24,160
back took a step back and started

00:14:22,959 --> 00:14:26,079
looking at a way to

00:14:24,160 --> 00:14:27,279
orchestrate being able to spin up a

00:14:26,079 --> 00:14:29,920
bunch of clusters

00:14:27,279 --> 00:14:31,760
and then after the clusters are done do

00:14:29,920 --> 00:14:33,760
some post provisioning against it

00:14:31,760 --> 00:14:35,199
and that's where ansible came it turns

00:14:33,760 --> 00:14:36,240
out was really really strong for what we

00:14:35,199 --> 00:14:38,240
were doing because

00:14:36,240 --> 00:14:40,480
we fire and forget requesting a cluster

00:14:38,240 --> 00:14:42,079
which could take x amount of time

00:14:40,480 --> 00:14:43,839
and then with x amount of time when it

00:14:42,079 --> 00:14:45,680
comes up then

00:14:43,839 --> 00:14:47,680
ansible can go into some other tasks and

00:14:45,680 --> 00:14:48,720
install stuff for us

00:14:47,680 --> 00:14:50,880
that's where we discover something

00:14:48,720 --> 00:14:54,160
called uh awx now

00:14:50,880 --> 00:14:55,680
this is kind of the core core um

00:14:54,160 --> 00:14:57,440
engine that we ended up sticking with

00:14:55,680 --> 00:14:59,920
and i have stuck with which

00:14:57,440 --> 00:15:02,560
if you didn't know awx is the upstream

00:14:59,920 --> 00:15:05,839
open source version of ansible tower

00:15:02,560 --> 00:15:07,839
and it has this beautiful

00:15:05,839 --> 00:15:09,680
interface oops it has this beautiful

00:15:07,839 --> 00:15:12,160
interface and beautiful api

00:15:09,680 --> 00:15:13,040
that you can just shove ansible

00:15:12,160 --> 00:15:14,399
playbooks at it

00:15:13,040 --> 00:15:16,480
and it can just start doing the work for

00:15:14,399 --> 00:15:18,480
you

00:15:16,480 --> 00:15:20,079
but obviously we need to have a bunch of

00:15:18,480 --> 00:15:21,920
different

00:15:20,079 --> 00:15:23,680
workshops running at all different times

00:15:21,920 --> 00:15:26,320
with different tags and different

00:15:23,680 --> 00:15:27,279
entry points so we needed a way to

00:15:26,320 --> 00:15:29,519
programmatically

00:15:27,279 --> 00:15:31,120
manipulate awx to do all this work for

00:15:29,519 --> 00:15:34,320
us and that's when mophie

00:15:31,120 --> 00:15:36,000
um who's my my go developer create a

00:15:34,320 --> 00:15:37,199
project called cube admin

00:15:36,000 --> 00:15:38,720
and i'll show that here in a moment

00:15:37,199 --> 00:15:40,399
because the whole goal of this is for me

00:15:38,720 --> 00:15:43,440
to show some of the stuff off

00:15:40,399 --> 00:15:47,680
and hopefully you can see how the

00:15:43,440 --> 00:15:50,160
advantage of moving from a

00:15:47,680 --> 00:15:51,040
a a bash script to something like an

00:15:50,160 --> 00:15:53,519
actual

00:15:51,040 --> 00:15:55,279
application can start making your life

00:15:53,519 --> 00:15:58,320
significantly better

00:15:55,279 --> 00:15:59,519
so let's actually take a quick moment

00:15:58,320 --> 00:16:01,600
and look at some of the code

00:15:59,519 --> 00:16:03,199
and hopefully this will show how i want

00:16:01,600 --> 00:16:05,120
it to

00:16:03,199 --> 00:16:07,040
here we go so this is actually cube

00:16:05,120 --> 00:16:07,600
admin right here as you can see is ibm

00:16:07,040 --> 00:16:10,560
cloud

00:16:07,600 --> 00:16:12,240
create and schedule and if you look if i

00:16:10,560 --> 00:16:13,519
go into like for instance my workshop

00:16:12,240 --> 00:16:14,800
account which is if you've ever taken an

00:16:13,519 --> 00:16:16,399
ibm cloud workshop

00:16:14,800 --> 00:16:18,480
you might notice that number before from

00:16:16,399 --> 00:16:20,240
us but as you see here

00:16:18,480 --> 00:16:22,240
there's a bunch of clusters already

00:16:20,240 --> 00:16:24,320
being spun up and ready to go and i have

00:16:22,240 --> 00:16:26,000
the ability to basically

00:16:24,320 --> 00:16:28,000
find all the ones for instance in this

00:16:26,000 --> 00:16:30,800
like fonte's lab i can type

00:16:28,000 --> 00:16:32,000
lab and then just click a button and

00:16:30,800 --> 00:16:34,560
then click delete

00:16:32,000 --> 00:16:36,240
now believe it or not that is literally

00:16:34,560 --> 00:16:38,399
14 different clicks

00:16:36,240 --> 00:16:40,000
um that's not hyperbole i think it is

00:16:38,399 --> 00:16:42,160
actually 14 different clicks

00:16:40,000 --> 00:16:43,519
to be able to actually get kubernetes to

00:16:42,160 --> 00:16:45,199
delete stuff or forever for ibm

00:16:43,519 --> 00:16:47,680
quadtudisa for you

00:16:45,199 --> 00:16:48,560
so imagine doing this over and over and

00:16:47,680 --> 00:16:51,199
over again

00:16:48,560 --> 00:16:52,800
and that's that's just deleting inside

00:16:51,199 --> 00:16:55,360
of creating

00:16:52,800 --> 00:16:57,279
if i come back over here for a second

00:16:55,360 --> 00:17:02,320
make this smaller

00:16:57,279 --> 00:17:02,320
if i go to cloud ibm.com

00:17:03,040 --> 00:17:06,400
and if i decide to want to re create a

00:17:04,640 --> 00:17:07,039
bunch of resources i actually have to

00:17:06,400 --> 00:17:09,199
create this

00:17:07,039 --> 00:17:11,520
create this resource go through a

00:17:09,199 --> 00:17:13,679
catalog system to be able to request

00:17:11,520 --> 00:17:15,600
what i need yes i can come over to this

00:17:13,679 --> 00:17:18,319
you know kubernetes

00:17:15,600 --> 00:17:20,400
overview and create a cluster but i

00:17:18,319 --> 00:17:23,679
still have a bunch of things to

00:17:20,400 --> 00:17:25,360
to fill out and and do where with what

00:17:23,679 --> 00:17:28,240
mophie had created

00:17:25,360 --> 00:17:30,640
leveraging the apple actual application

00:17:28,240 --> 00:17:32,080
we were able to start being able to just

00:17:30,640 --> 00:17:33,679
fill out the information

00:17:32,080 --> 00:17:35,600
and then it would do a four loop against

00:17:33,679 --> 00:17:36,880
it or a for loop with a bunch of things

00:17:35,600 --> 00:17:39,760
underneath awx

00:17:36,880 --> 00:17:40,559
which saves so much time and effort and

00:17:39,760 --> 00:17:42,480
the reason why

00:17:40,559 --> 00:17:44,000
i want to bring this up and show this is

00:17:42,480 --> 00:17:46,000
because the ultimate goal

00:17:44,000 --> 00:17:47,600
which i'll show here in a moment makes

00:17:46,000 --> 00:17:49,760
things happen

00:17:47,600 --> 00:17:52,320
um if you take one step farther here's

00:17:49,760 --> 00:17:55,440
actually awx right now

00:17:52,320 --> 00:17:59,200
um if i go ahead and

00:17:55,440 --> 00:17:59,200
grab the password

00:17:59,280 --> 00:18:07,280
awx copy

00:18:04,160 --> 00:18:09,039
admin password

00:18:07,280 --> 00:18:10,640
as you see it's just an interface to

00:18:09,039 --> 00:18:11,120
play a bunch of templates and jobs off

00:18:10,640 --> 00:18:13,360
of it

00:18:11,120 --> 00:18:15,840
and as you can see like i had a i

00:18:13,360 --> 00:18:19,200
created a bunch of clusters yesterday

00:18:15,840 --> 00:18:21,280
um which is yes yesterday and you know

00:18:19,200 --> 00:18:22,640
i had 73 fail but that's actually

00:18:21,280 --> 00:18:24,400
failing because you know

00:18:22,640 --> 00:18:26,000
timeouts or whatever and they retry we

00:18:24,400 --> 00:18:26,720
have retry logic inside of it which is

00:18:26,000 --> 00:18:28,240
great

00:18:26,720 --> 00:18:29,600
so now instead of having this bash

00:18:28,240 --> 00:18:30,480
script that just shoves a bunch of

00:18:29,600 --> 00:18:33,600
requests at it

00:18:30,480 --> 00:18:36,559
and overruns the api leveraging

00:18:33,600 --> 00:18:37,200
every system we have now we actually try

00:18:36,559 --> 00:18:39,760
fail

00:18:37,200 --> 00:18:40,320
okay sit wait for 15 20 seconds or

00:18:39,760 --> 00:18:42,080
whatever

00:18:40,320 --> 00:18:43,360
and then try again so instead of just a

00:18:42,080 --> 00:18:45,200
simple bash script

00:18:43,360 --> 00:18:47,360
over running everything now we actually

00:18:45,200 --> 00:18:50,000
have real logic inside of here

00:18:47,360 --> 00:18:50,960
um if you want to take a look here this

00:18:50,000 --> 00:18:54,240
is the actual

00:18:50,960 --> 00:18:57,200
um collection that mophie created

00:18:54,240 --> 00:18:58,799
which was as you see it's literally the

00:18:57,200 --> 00:19:00,960
just what we need to do

00:18:58,799 --> 00:19:02,400
one of the advantages of being able to

00:19:00,960 --> 00:19:06,080
rewrite this for specifically

00:19:02,400 --> 00:19:09,200
our needs and not using the upstream um

00:19:06,080 --> 00:19:12,400
ansible slash terraform

00:19:09,200 --> 00:19:14,960
converted ansible thing was

00:19:12,400 --> 00:19:15,440
um mophie was able to write specifically

00:19:14,960 --> 00:19:17,600
what we

00:19:15,440 --> 00:19:19,760
needed and nothing more the other the

00:19:17,600 --> 00:19:23,280
other cloud api of the

00:19:19,760 --> 00:19:24,000
ibm cloud upstream had all these other

00:19:23,280 --> 00:19:25,760
options that

00:19:24,000 --> 00:19:27,440
all these little knobs and knobs and

00:19:25,760 --> 00:19:28,400
bells and whistles that just weren't

00:19:27,440 --> 00:19:29,840
what we needed

00:19:28,400 --> 00:19:32,400
so we ended up just stripping out

00:19:29,840 --> 00:19:34,720
exactly what we need and then as you see

00:19:32,400 --> 00:19:35,760
it literally just runs run module which

00:19:34,720 --> 00:19:37,840
is right here

00:19:35,760 --> 00:19:39,919
puts in a bunch of args and then just

00:19:37,840 --> 00:19:42,559
shoves it into the api

00:19:39,919 --> 00:19:44,559
which in essence that's literally it

00:19:42,559 --> 00:19:48,480
it's just right here that's that's the

00:19:44,559 --> 00:19:50,400
the core of it which is pretty great

00:19:48,480 --> 00:19:52,480
um so we were able to wrap this up

00:19:50,400 --> 00:19:55,360
inside of

00:19:52,480 --> 00:19:58,000
awx and then be able to actually do real

00:19:55,360 --> 00:20:00,320
post provisioning afterwards

00:19:58,000 --> 00:20:01,600
um if you take the next step and after

00:20:00,320 --> 00:20:03,600
you're looking at that

00:20:01,600 --> 00:20:05,120
um if you're ever curious and if you do

00:20:03,600 --> 00:20:08,559
use ibm cloud arc

00:20:05,120 --> 00:20:10,640
little um our little admin page here

00:20:08,559 --> 00:20:12,240
all this stuff which if you ever do need

00:20:10,640 --> 00:20:14,720
to control

00:20:12,240 --> 00:20:16,400
multiple clusters or multiple resources

00:20:14,720 --> 00:20:17,039
is actually another open source project

00:20:16,400 --> 00:20:19,200
right here

00:20:17,039 --> 00:20:20,159
i i would be remiss not showing this off

00:20:19,200 --> 00:20:22,400
to the um

00:20:20,159 --> 00:20:23,760
this pro this community because if you

00:20:22,400 --> 00:20:25,400
do use ibm cloud

00:20:23,760 --> 00:20:27,679
um it really does make something

00:20:25,400 --> 00:20:29,440
significantly easier to use

00:20:27,679 --> 00:20:30,799
and as you can see we're playing around

00:20:29,440 --> 00:20:31,840
with some vault stuff here in a moment

00:20:30,799 --> 00:20:32,880
and i'll talk about that here in a

00:20:31,840 --> 00:20:35,200
second

00:20:32,880 --> 00:20:37,520
but the beauty of this is is that we now

00:20:35,200 --> 00:20:38,559
have a layer on top of ibm cloud in

00:20:37,520 --> 00:20:40,880
essence our cloud

00:20:38,559 --> 00:20:42,240
that allows us to actually consume ibm

00:20:40,880 --> 00:20:43,679
cloud how we need to

00:20:42,240 --> 00:20:45,760
and there's no reason why we couldn't

00:20:43,679 --> 00:20:47,600
extend this to other clouds also

00:20:45,760 --> 00:20:49,360
where in essence we if we needed to

00:20:47,600 --> 00:20:52,799
start spinning up clusters in aw

00:20:49,360 --> 00:20:53,760
aws or azure or whatever it's all just

00:20:52,799 --> 00:20:55,840
api calls

00:20:53,760 --> 00:20:57,840
so we can in essence use this exact same

00:20:55,840 --> 00:20:58,880
interface and then just change you know

00:20:57,840 --> 00:21:00,559
create to

00:20:58,880 --> 00:21:03,280
whatever back end and it does the work

00:21:00,559 --> 00:21:05,679
for us which is pretty damn cool

00:21:03,280 --> 00:21:07,600
so so now as you see that from the from

00:21:05,679 --> 00:21:11,679
the bash script moving over to

00:21:07,600 --> 00:21:14,080
awx and in this kubernetes admin

00:21:11,679 --> 00:21:14,799
now we've we've obfuscated away all of

00:21:14,080 --> 00:21:17,440
the

00:21:14,799 --> 00:21:17,840
the um the the changes we had to make by

00:21:17,440 --> 00:21:20,080
hand

00:21:17,840 --> 00:21:21,919
and then running it piecemeal now we

00:21:20,080 --> 00:21:23,760
have a unified application

00:21:21,919 --> 00:21:25,360
that we call can touch and and work

00:21:23,760 --> 00:21:28,080
around um

00:21:25,360 --> 00:21:28,720
but the next step was actually taking it

00:21:28,080 --> 00:21:30,799
to the

00:21:28,720 --> 00:21:32,240
the extreme in my opinion which is where

00:21:30,799 --> 00:21:35,440
we're actually going to

00:21:32,240 --> 00:21:37,520
automate the rest of the work the

00:21:35,440 --> 00:21:39,280
the the cloud that we're creating is we

00:21:37,520 --> 00:21:40,400
we end up have we have an internal

00:21:39,280 --> 00:21:43,280
github

00:21:40,400 --> 00:21:44,799
uh infrastructure called github.ibm.com

00:21:43,280 --> 00:21:47,120
and this is where we put in a request

00:21:44,799 --> 00:21:49,440
where you can just create a new issue

00:21:47,120 --> 00:21:50,880
you know get started and then fill out

00:21:49,440 --> 00:21:52,799
all this information

00:21:50,880 --> 00:21:54,240
now the reason why this is important is

00:21:52,799 --> 00:21:57,440
because what we've done

00:21:54,240 --> 00:21:58,000
is we've actually we can we have a

00:21:57,440 --> 00:22:02,080
serverless

00:21:58,000 --> 00:22:05,679
job now that reads against the um

00:22:02,080 --> 00:22:08,320
the internal github issues

00:22:05,679 --> 00:22:09,039
and then creates and parses that

00:22:08,320 --> 00:22:10,400
information

00:22:09,039 --> 00:22:13,200
so as you can see right here this is

00:22:10,400 --> 00:22:15,520
that servos app actually commenting back

00:22:13,200 --> 00:22:15,520
on this

00:22:16,400 --> 00:22:20,320
as you can see here these numbers are

00:22:18,799 --> 00:22:22,159
pretty damn close

00:22:20,320 --> 00:22:23,440
to the numbers from the create here a

00:22:22,159 --> 00:22:25,440
moment ago and that's

00:22:23,440 --> 00:22:26,799
on purpose because the ultimate goal is

00:22:25,440 --> 00:22:27,919
for us to be able to pull all this

00:22:26,799 --> 00:22:30,559
information out

00:22:27,919 --> 00:22:31,919
specifically what we need to do and then

00:22:30,559 --> 00:22:34,320
have this

00:22:31,919 --> 00:22:36,080
fill out all this stuff via the api and

00:22:34,320 --> 00:22:36,799
i can just do like a slash approve or

00:22:36,080 --> 00:22:40,000
whatever

00:22:36,799 --> 00:22:41,679
i.e here and then i can just

00:22:40,000 --> 00:22:42,960
start spinning up the machines so i

00:22:41,679 --> 00:22:43,520
don't even have to touch this thing

00:22:42,960 --> 00:22:45,200
anymore

00:22:43,520 --> 00:22:46,799
so then all of a sudden the actual

00:22:45,200 --> 00:22:49,520
interface that our

00:22:46,799 --> 00:22:51,039
our consumers will be using is filling

00:22:49,520 --> 00:22:52,559
out the paperwork properly

00:22:51,039 --> 00:22:54,159
we take a quick look at it make sure

00:22:52,559 --> 00:22:57,520
that it's not something crazy

00:22:54,159 --> 00:22:59,280
and then turn around and and just slash

00:22:57,520 --> 00:23:01,600
approve and have it create

00:22:59,280 --> 00:23:02,880
um it is good in essence what the

00:23:01,600 --> 00:23:05,039
coolest part about this whole

00:23:02,880 --> 00:23:07,039
this whole portion of it is it really is

00:23:05,039 --> 00:23:09,840
just a simple python script

00:23:07,039 --> 00:23:11,039
that parses all the information through

00:23:09,840 --> 00:23:13,120
a couple tokens

00:23:11,039 --> 00:23:14,880
and then does some really basic checks

00:23:13,120 --> 00:23:16,240
against it as you can see here like we

00:23:14,880 --> 00:23:18,799
need to make sure that the name is

00:23:16,240 --> 00:23:20,640
shorter than 15 characters due to some

00:23:18,799 --> 00:23:23,200
of our restrictions on

00:23:20,640 --> 00:23:24,159
what we call grant cluster also we've

00:23:23,200 --> 00:23:25,840
got to make sure that

00:23:24,159 --> 00:23:27,120
all our clusters are lower than 75

00:23:25,840 --> 00:23:28,080
because we have too many clusters being

00:23:27,120 --> 00:23:30,159
spun up

00:23:28,080 --> 00:23:31,280
we have a possibility of overrunning so

00:23:30,159 --> 00:23:33,520
there's a lot of really

00:23:31,280 --> 00:23:35,600
interesting opportunities here where

00:23:33,520 --> 00:23:38,080
we've just automated portions away

00:23:35,600 --> 00:23:40,240
to make things happen to what we need so

00:23:38,080 --> 00:23:43,039
it's unbelievably powerful

00:23:40,240 --> 00:23:43,679
so so from from from a simple bash

00:23:43,039 --> 00:23:45,840
script

00:23:43,679 --> 00:23:46,799
to this application we've now been able

00:23:45,840 --> 00:23:49,440
to you know

00:23:46,799 --> 00:23:51,120
push all this thing through now i do

00:23:49,440 --> 00:23:52,640
want to take a quick aside and mention

00:23:51,120 --> 00:23:54,240
that you probably notice this api key

00:23:52,640 --> 00:23:54,720
where we actually have to give the api

00:23:54,240 --> 00:23:57,200
key

00:23:54,720 --> 00:23:58,159
to ibm cloud every time we do it and

00:23:57,200 --> 00:23:59,679
that's um

00:23:58,159 --> 00:24:01,679
one of the biggest challenges we have is

00:23:59,679 --> 00:24:04,720
the corporate policies and i'll bring up

00:24:01,679 --> 00:24:08,159
the slides again here

00:24:04,720 --> 00:24:12,000
oops one of the corporate

00:24:08,159 --> 00:24:16,559
one of the corporate policies is that

00:24:12,000 --> 00:24:18,159
the api keys that we have

00:24:16,559 --> 00:24:19,840
they have to be under certain rules

00:24:18,159 --> 00:24:23,120
because what you do with an api key on

00:24:19,840 --> 00:24:25,039
ibm cloud is you truly go in as yourself

00:24:23,120 --> 00:24:26,240
so if you have an api key and somebody

00:24:25,039 --> 00:24:28,480
um

00:24:26,240 --> 00:24:30,559
can basically implement the same

00:24:28,480 --> 00:24:32,640
policies that you have

00:24:30,559 --> 00:24:34,960
and that's that's problematic so we've

00:24:32,640 --> 00:24:36,640
been looking at using something like um

00:24:34,960 --> 00:24:38,640
a hedge corp vault and there's an extra

00:24:36,640 --> 00:24:38,960
hash cover vault instance inside of ibm

00:24:38,640 --> 00:24:41,600
that

00:24:38,960 --> 00:24:43,200
we can actually take our application and

00:24:41,600 --> 00:24:45,279
run it internally

00:24:43,200 --> 00:24:46,240
so then we can still talk to the ibm

00:24:45,279 --> 00:24:48,080
public api

00:24:46,240 --> 00:24:50,000
but have everything all the requests

00:24:48,080 --> 00:24:50,799
internal which will make life much

00:24:50,000 --> 00:24:52,960
easier

00:24:50,799 --> 00:24:55,039
but it's it's one of those those moments

00:24:52,960 --> 00:24:55,600
where you run into corporate policy

00:24:55,039 --> 00:24:58,960
against

00:24:55,600 --> 00:25:02,240
you know functionality where we were

00:24:58,960 --> 00:25:03,520
taking down ibm cloud we were we were

00:25:02,240 --> 00:25:04,960
overrunning and sometimes not even

00:25:03,520 --> 00:25:05,520
getting the machines up and running in

00:25:04,960 --> 00:25:06,960
time

00:25:05,520 --> 00:25:08,799
and now we actually have this robust

00:25:06,960 --> 00:25:11,679
system where we actually have a lot of

00:25:08,799 --> 00:25:14,799
pride and consistency on top of

00:25:11,679 --> 00:25:16,960
um where now we're running we're

00:25:14,799 --> 00:25:18,960
we're running up against the corporate

00:25:16,960 --> 00:25:20,159
policies for specific rules and

00:25:18,960 --> 00:25:22,720
regulations

00:25:20,159 --> 00:25:24,559
which if you've never become a developer

00:25:22,720 --> 00:25:26,400
don't understand development process

00:25:24,559 --> 00:25:28,080
it's a very natural progression where

00:25:26,400 --> 00:25:29,679
you've gotten your mvp out

00:25:28,080 --> 00:25:31,360
hell you've gotten quote farther in than

00:25:29,679 --> 00:25:33,360
your mvp and

00:25:31,360 --> 00:25:34,480
now you're you're running into the rules

00:25:33,360 --> 00:25:36,480
because the

00:25:34,480 --> 00:25:37,760
other situations happen so it's worth

00:25:36,480 --> 00:25:39,919
mentioning

00:25:37,760 --> 00:25:41,279
um we also plan on building some type of

00:25:39,919 --> 00:25:43,120
schedule around it which

00:25:41,279 --> 00:25:44,640
turns out awx actually has a scheduler

00:25:43,120 --> 00:25:48,159
built inside of it so

00:25:44,640 --> 00:25:49,840
in theory we could actually run awx

00:25:48,159 --> 00:25:53,039
as our scheduler but we might actually

00:25:49,840 --> 00:25:54,480
build our own due to the policies of api

00:25:53,039 --> 00:25:56,720
keys and whatnot

00:25:54,480 --> 00:25:58,240
so it's one of those it's so it's one of

00:25:56,720 --> 00:26:01,679
those interesting situations

00:25:58,240 --> 00:26:04,000
where from you you we

00:26:01,679 --> 00:26:05,200
we started off this simple bash script

00:26:04,000 --> 00:26:06,960
tried to go down the typical

00:26:05,200 --> 00:26:08,000
configuration management path or

00:26:06,960 --> 00:26:09,760
terraform path

00:26:08,000 --> 00:26:11,440
and discovering that we could take

00:26:09,760 --> 00:26:13,279
portions of that that

00:26:11,440 --> 00:26:15,200
that world and leverage it to our

00:26:13,279 --> 00:26:17,279
advantage and before we realized that we

00:26:15,200 --> 00:26:19,279
actually had a fully working cloud

00:26:17,279 --> 00:26:20,480
that eventually will have the the own

00:26:19,279 --> 00:26:23,120
interface all the way through

00:26:20,480 --> 00:26:23,520
up through github but the real question

00:26:23,120 --> 00:26:25,360
is

00:26:23,520 --> 00:26:26,640
so was it really worth it was it really

00:26:25,360 --> 00:26:27,279
worth the time and effort that we've

00:26:26,640 --> 00:26:29,600
done

00:26:27,279 --> 00:26:30,720
um to build this and simply said it was

00:26:29,600 --> 00:26:33,919
probably not

00:26:30,720 --> 00:26:36,159
um we we've actually spent almost

00:26:33,919 --> 00:26:37,440
three years now trying to rebuild all

00:26:36,159 --> 00:26:38,480
this and go through all this i've

00:26:37,440 --> 00:26:41,840
learned a ton

00:26:38,480 --> 00:26:43,200
and my team has two but

00:26:41,840 --> 00:26:44,880
like it would have been just nicer to

00:26:43,200 --> 00:26:46,960
have an easier way to

00:26:44,880 --> 00:26:48,240
to request like have this actual

00:26:46,960 --> 00:26:50,960
workflow built

00:26:48,240 --> 00:26:52,080
there are some companies out there that

00:26:50,960 --> 00:26:54,559
do some really interesting

00:26:52,080 --> 00:26:55,360
things to teach courses around this kind

00:26:54,559 --> 00:26:57,279
of stuff or

00:26:55,360 --> 00:26:58,960
or like training training companies and

00:26:57,279 --> 00:27:00,799
whatnot but it seems like it's not

00:26:58,960 --> 00:27:03,360
really a fixed problem

00:27:00,799 --> 00:27:04,960
our fix is at least a way that works

00:27:03,360 --> 00:27:06,400
fine with ibm cloud but i know it

00:27:04,960 --> 00:27:08,640
wouldn't work with any other major one

00:27:06,400 --> 00:27:09,600
major ones unless we tacked on those

00:27:08,640 --> 00:27:12,720
apis

00:27:09,600 --> 00:27:14,240
underneath it through the go app um

00:27:12,720 --> 00:27:16,480
so there's there's a lot of there's a

00:27:14,240 --> 00:27:18,240
lot of weird things around this but

00:27:16,480 --> 00:27:19,600
we really did create a cloud on top of a

00:27:18,240 --> 00:27:21,120
cloud and

00:27:19,600 --> 00:27:22,960
the ultimate goal is for us not to have

00:27:21,120 --> 00:27:25,520
to worry about it anymore right like

00:27:22,960 --> 00:27:26,720
um i should be out on the on the road or

00:27:25,520 --> 00:27:29,760
in this pat in this case

00:27:26,720 --> 00:27:31,039
this video um speaking about these

00:27:29,760 --> 00:27:32,320
things and the lessons learned

00:27:31,039 --> 00:27:35,600
so hopefully i can get to the point

00:27:32,320 --> 00:27:38,480
where the bots can do the work for us

00:27:35,600 --> 00:27:40,000
so that's really it like um i just kind

00:27:38,480 --> 00:27:41,279
of wanted to walk through the

00:27:40,000 --> 00:27:43,600
the natural progression that some

00:27:41,279 --> 00:27:44,240
companies have or at least some projects

00:27:43,600 --> 00:27:46,080
have where

00:27:44,240 --> 00:27:48,080
you start out with a really simple like

00:27:46,080 --> 00:27:48,799
let's just run a for loop to spin up 30

00:27:48,080 --> 00:27:51,120
clusters

00:27:48,799 --> 00:27:52,000
and before you know it um within a

00:27:51,120 --> 00:27:54,240
handful of

00:27:52,000 --> 00:27:55,919
you know iterations we've already gotten

00:27:54,240 --> 00:27:58,960
to the point where we have a whole

00:27:55,919 --> 00:28:01,200
open source application with leveraging

00:27:58,960 --> 00:28:02,880
upstream and downstream open source to

00:28:01,200 --> 00:28:03,760
the point where we have a robust system

00:28:02,880 --> 00:28:06,159
where

00:28:03,760 --> 00:28:08,000
you put in some paperwork and you get a

00:28:06,159 --> 00:28:10,880
bunch of machines at the end

00:28:08,000 --> 00:28:12,000
um it's it's it's a really neat like

00:28:10,880 --> 00:28:13,520
situation

00:28:12,000 --> 00:28:15,279
um and i'm really proud about the work

00:28:13,520 --> 00:28:16,960
we've done as a team

00:28:15,279 --> 00:28:19,200
and i really hope that we're going to do

00:28:16,960 --> 00:28:20,480
more so if you ever have any questions

00:28:19,200 --> 00:28:21,600
or anything please don't hesitate to

00:28:20,480 --> 00:28:24,240
reach out

00:28:21,600 --> 00:28:25,679
again at jj azgar on twitter or awesome

00:28:24,240 --> 00:28:28,000
at ibm.com

00:28:25,679 --> 00:28:29,919
um and hell maybe in a year's time i

00:28:28,000 --> 00:28:31,039
might be somewhere completely different

00:28:29,919 --> 00:28:32,640
but i can tell you

00:28:31,039 --> 00:28:34,399
from the team that we're working with

00:28:32,640 --> 00:28:37,279
now and what we're doing now

00:28:34,399 --> 00:28:38,480
i'm really proud of what's going on so

00:28:37,279 --> 00:28:40,320
that's really it

00:28:38,480 --> 00:28:42,720
um i hope i hope you all learned

00:28:40,320 --> 00:28:44,240
something or at least saw that this is a

00:28:42,720 --> 00:28:47,840
path that some people go

00:28:44,240 --> 00:28:49,279
down and also you know sometimes um

00:28:47,840 --> 00:28:51,120
using something upstream isn't always

00:28:49,279 --> 00:28:52,880
the right answer sometimes you have to

00:28:51,120 --> 00:28:53,120
build it yourself or take portions from

00:28:52,880 --> 00:28:55,039
it

00:28:53,120 --> 00:28:59,600
and i hope you learned that thanks so

00:28:55,039 --> 00:29:07,999
much bye

00:28:59,600 --> 00:29:07,999

YouTube URL: https://www.youtube.com/watch?v=5P3N3EKt6dA


