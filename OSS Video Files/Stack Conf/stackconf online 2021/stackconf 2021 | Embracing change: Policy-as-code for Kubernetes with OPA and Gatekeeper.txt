Title: stackconf 2021 | Embracing change: Policy-as-code for Kubernetes with OPA and Gatekeeper
Publication date: 2021-06-24
Playlist: stackconf online 2021
Description: 
	by Ara Pulido

As more enterprises migrate to cloud native environments like Kubernetes the need for more scalable ways to define and enforce fine-grained policies increases: how can I limit the number of replicas of a pod for certain users? how can I ensure that all images come from trusted registries? Gatekeeper, a CNCF project, allows to define policy as Kubernetes objects, making it easier to adopt policy-as-code practices in Kubernetes environments and sharing reusable policy templates. In this talk we will demo Gatekeeper for Kubernetes environments. You will learn how to adopt policy-as-code techniques and how you can integrate Gatekeeper with your existing tools.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/netways/webinare/

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/


Musik: https://www.frametraxx.de/
Captions: 
	00:00:05,660 --> 00:00:13,119
[Applause]

00:00:06,120 --> 00:00:13,119
[Music]

00:00:14,240 --> 00:00:17,039
hello

00:00:14,799 --> 00:00:17,840
welcome everyone to starcom thanks for

00:00:17,039 --> 00:00:19,600
having me

00:00:17,840 --> 00:00:21,279
my name is arapulido i'm a technical

00:00:19,600 --> 00:00:23,199
evangelist at datadog

00:00:21,279 --> 00:00:27,439
and today i'm going to be talking about

00:00:23,199 --> 00:00:30,080
policy as code in kubernetes

00:00:27,439 --> 00:00:31,119
so that's my twitter handler uh so if

00:00:30,080 --> 00:00:34,160
you want to

00:00:31,119 --> 00:00:35,600
reach out before uh after the the

00:00:34,160 --> 00:00:39,280
conference uh please

00:00:35,600 --> 00:00:40,079
please do so um again we are going to be

00:00:39,280 --> 00:00:43,920
talking about

00:00:40,079 --> 00:00:46,800
policy as code with oppa and gate hippa

00:00:43,920 --> 00:00:46,800
in kubernetes

00:00:49,920 --> 00:00:53,360
so um first of all what what is

00:00:52,160 --> 00:00:55,840
kubernetes probably

00:00:53,360 --> 00:00:57,440
many of you already know but basically

00:00:55,840 --> 00:00:59,920
kubernetes is a

00:00:57,440 --> 00:01:01,520
container orchestration platform that

00:00:59,920 --> 00:01:03,840
help you run your containerized

00:01:01,520 --> 00:01:06,159
applications in production and it has

00:01:03,840 --> 00:01:07,520
super nice features like it's completely

00:01:06,159 --> 00:01:09,920
api driven

00:01:07,520 --> 00:01:12,159
it has features like auto healing auto

00:01:09,920 --> 00:01:13,439
scaling etc so very useful very

00:01:12,159 --> 00:01:16,799
successful project

00:01:13,439 --> 00:01:18,320
open source project and today we are not

00:01:16,799 --> 00:01:19,439
going to be talking about data itself

00:01:18,320 --> 00:01:21,200
but just so you know

00:01:19,439 --> 00:01:23,119
i'm working for datadog which is a

00:01:21,200 --> 00:01:24,960
monitoring and analytics platform that

00:01:23,119 --> 00:01:27,600
helps companies improve

00:01:24,960 --> 00:01:28,000
observability of their infrastructure

00:01:27,600 --> 00:01:32,000
and

00:01:28,000 --> 00:01:33,439
applications and obviously that includes

00:01:32,000 --> 00:01:35,920
kubernetes

00:01:33,439 --> 00:01:37,680
the cluster so helping you understand

00:01:35,920 --> 00:01:39,680
what's going on on your cluster

00:01:37,680 --> 00:01:41,520
and also what's going on on your

00:01:39,680 --> 00:01:45,200
application that you're running on top

00:01:41,520 --> 00:01:46,000
of your cluster but today we are going

00:01:45,200 --> 00:01:48,799
to be talking about

00:01:46,000 --> 00:01:50,640
policy and what its policy is

00:01:48,799 --> 00:01:53,759
particularly when we are talking about

00:01:50,640 --> 00:01:55,680
software so

00:01:53,759 --> 00:01:57,119
basically policy are the rules that

00:01:55,680 --> 00:02:00,560
governs the behavior

00:01:57,119 --> 00:02:02,640
of a sovereign service uh basically

00:02:00,560 --> 00:02:04,880
what you can and cannot do in your

00:02:02,640 --> 00:02:06,880
cluster and when we talk about what you

00:02:04,880 --> 00:02:09,280
can and cannot do in your cluster

00:02:06,880 --> 00:02:11,120
um if you already know kubernetes that

00:02:09,280 --> 00:02:13,680
sounds very familiar that sounds like

00:02:11,120 --> 00:02:15,280
our back and our back stands for role

00:02:13,680 --> 00:02:18,400
based access control

00:02:15,280 --> 00:02:20,080
and our back is already embedded in

00:02:18,400 --> 00:02:23,760
kubernetes

00:02:20,080 --> 00:02:26,000
it's well spread well used um

00:02:23,760 --> 00:02:26,879
and basically what it what it does is

00:02:26,000 --> 00:02:30,080
that

00:02:26,879 --> 00:02:33,519
uh the rules are defined as a subject

00:02:30,080 --> 00:02:37,519
a kubernetes api resource and a verb so

00:02:33,519 --> 00:02:38,160
for example user ara for the type of

00:02:37,519 --> 00:02:41,440
object

00:02:38,160 --> 00:02:44,879
pot she can create get and watch

00:02:41,440 --> 00:02:48,000
those resources so that's how

00:02:44,879 --> 00:02:50,000
we define rules in our back so

00:02:48,000 --> 00:02:52,000
if we already have our back and it's

00:02:50,000 --> 00:02:52,319
well understood well known why do we

00:02:52,000 --> 00:02:55,040
know

00:02:52,319 --> 00:02:56,640
some why do we know we need something

00:02:55,040 --> 00:02:57,840
else

00:02:56,640 --> 00:03:00,720
and the reason why we need something

00:02:57,840 --> 00:03:03,760
else is because uh off

00:03:00,720 --> 00:03:05,200
which is what our bag tries to solve is

00:03:03,760 --> 00:03:07,120
just a subset

00:03:05,200 --> 00:03:10,080
of all the different policy that you

00:03:07,120 --> 00:03:12,480
want to describe in your cluster

00:03:10,080 --> 00:03:13,760
so things that for example you cannot do

00:03:12,480 --> 00:03:16,000
using arabic

00:03:13,760 --> 00:03:18,159
uh answer questions like can i run an

00:03:16,000 --> 00:03:19,360
image coming from a third-party registry

00:03:18,159 --> 00:03:22,319
in my cluster

00:03:19,360 --> 00:03:23,280
or has my parts all the labels that are

00:03:22,319 --> 00:03:25,440
required

00:03:23,280 --> 00:03:26,879
by my organization all these type of

00:03:25,440 --> 00:03:29,280
things

00:03:26,879 --> 00:03:31,280
are not cannot be defined with our

00:03:29,280 --> 00:03:34,480
background basically says

00:03:31,280 --> 00:03:36,480
which the verb the thing that you can do

00:03:34,480 --> 00:03:39,200
for an object but not what is inside

00:03:36,480 --> 00:03:39,200
that object

00:03:40,480 --> 00:03:43,840
so this is for kubernetes but probably

00:03:43,120 --> 00:03:46,560
your

00:03:43,840 --> 00:03:49,360
organization have more infrastructure

00:03:46,560 --> 00:03:52,879
just not just communities they may have

00:03:49,360 --> 00:03:53,920
service matches or gateway apis or cloud

00:03:52,879 --> 00:03:57,439
resources

00:03:53,920 --> 00:04:00,560
or stateful resources

00:03:57,439 --> 00:04:03,040
so you want to create

00:04:00,560 --> 00:04:04,640
policy not just for kubernetes but for

00:04:03,040 --> 00:04:08,080
all your infra

00:04:04,640 --> 00:04:08,879
and possibly if you if you can you want

00:04:08,080 --> 00:04:11,439
to do it

00:04:08,879 --> 00:04:12,640
more or less the same way and this is

00:04:11,439 --> 00:04:15,599
what

00:04:12,640 --> 00:04:15,840
open policy agent or oppa tries to solve

00:04:15,599 --> 00:04:19,199
so

00:04:15,840 --> 00:04:22,240
oppa is a cncf project that

00:04:19,199 --> 00:04:26,080
does exactly that it tries to have

00:04:22,240 --> 00:04:26,639
a very uh not domain specific way to

00:04:26,080 --> 00:04:29,680
define

00:04:26,639 --> 00:04:33,199
your policy so how that's it that

00:04:29,680 --> 00:04:34,080
does that so basically you can define

00:04:33,199 --> 00:04:36,400
your policy

00:04:34,080 --> 00:04:37,280
on a domain specific language called

00:04:36,400 --> 00:04:39,680
rigor

00:04:37,280 --> 00:04:41,520
and you can have some data store about

00:04:39,680 --> 00:04:43,840
your objects if you want to

00:04:41,520 --> 00:04:45,600
and opa is an engine that basically

00:04:43,840 --> 00:04:48,880
takes a query

00:04:45,600 --> 00:04:51,600
in json and then

00:04:48,880 --> 00:04:54,080
basically makes a policy decision and

00:04:51,600 --> 00:04:56,880
returns that policy decision

00:04:54,080 --> 00:04:58,000
also in json based on the policies that

00:04:56,880 --> 00:05:00,880
you have registering

00:04:58,000 --> 00:05:02,240
rigo and the data that you have that's

00:05:00,880 --> 00:05:03,120
the only thing that it does it takes

00:05:02,240 --> 00:05:06,560
json it

00:05:03,120 --> 00:05:10,320
outputs json and that's all it does um

00:05:06,560 --> 00:05:12,880
so once you have that policy decision

00:05:10,320 --> 00:05:15,280
made by oppa how do you enforce that

00:05:12,880 --> 00:05:18,880
from happening automatically

00:05:15,280 --> 00:05:21,520
so the way you do that is with

00:05:18,880 --> 00:05:22,240
the many integrations that you have for

00:05:21,520 --> 00:05:25,039
ropa

00:05:22,240 --> 00:05:27,280
so if you go to the opa website there

00:05:25,039 --> 00:05:28,400
there is a list of all the impossible

00:05:27,280 --> 00:05:31,280
integrations and

00:05:28,400 --> 00:05:32,960
many more uh are coming every day uh

00:05:31,280 --> 00:05:34,160
because basically it's very easy to

00:05:32,960 --> 00:05:37,680
implement it's obviously

00:05:34,160 --> 00:05:41,199
all using json so um fairly simple

00:05:37,680 --> 00:05:43,280
interface so you have many different of

00:05:41,199 --> 00:05:46,400
these integrations to enforce

00:05:43,280 --> 00:05:47,919
oppa policy decisions depending on the

00:05:46,400 --> 00:05:50,800
infra that you're having

00:05:47,919 --> 00:05:52,639
and uh gatekeeper is is basically that

00:05:50,800 --> 00:05:55,360
gatekeeper is

00:05:52,639 --> 00:05:57,919
an enforcement of oppa policy

00:05:55,360 --> 00:06:00,639
specifically for kubernetes and the way

00:05:57,919 --> 00:06:01,199
uh gatekeeper does that is by embedding

00:06:00,639 --> 00:06:04,240
oppa

00:06:01,199 --> 00:06:06,960
as as part of its binary

00:06:04,240 --> 00:06:08,479
so it basically adverts opas a library

00:06:06,960 --> 00:06:10,080
that it's part of this code to make

00:06:08,479 --> 00:06:13,440
those decisions

00:06:10,080 --> 00:06:13,840
uh so how does gatekeeper work uh to

00:06:13,440 --> 00:06:16,000
know

00:06:13,840 --> 00:06:18,000
how it does it work it's important that

00:06:16,000 --> 00:06:21,280
you know that you when you make

00:06:18,000 --> 00:06:21,680
an api request to kubernetes it goes

00:06:21,280 --> 00:06:24,240
through

00:06:21,680 --> 00:06:25,120
several phases it goes first from

00:06:24,240 --> 00:06:27,280
authentication

00:06:25,120 --> 00:06:28,800
is this request authenticated or not

00:06:27,280 --> 00:06:31,680
then through authorization

00:06:28,800 --> 00:06:33,520
mostly are back and once that's

00:06:31,680 --> 00:06:35,360
authorized it goes to the first step

00:06:33,520 --> 00:06:38,639
called animation controllers

00:06:35,360 --> 00:06:40,319
animation controllers are are embedded

00:06:38,639 --> 00:06:43,600
already on the api server

00:06:40,319 --> 00:06:46,479
and basically you can do more

00:06:43,600 --> 00:06:47,199
complex rules you can based on the

00:06:46,479 --> 00:06:50,240
content

00:06:47,199 --> 00:06:52,960
of that request you can either validate

00:06:50,240 --> 00:06:54,160
that one is this correct or not um

00:06:52,960 --> 00:06:56,720
through

00:06:54,160 --> 00:06:57,840
a set of of things that i have defined

00:06:56,720 --> 00:07:00,560
and also to

00:06:57,840 --> 00:07:02,639
take them like if you want to make some

00:07:00,560 --> 00:07:05,039
rules that actually change

00:07:02,639 --> 00:07:05,680
um that can be done as well with

00:07:05,039 --> 00:07:08,720
admission

00:07:05,680 --> 00:07:12,000
controllers and there are two

00:07:08,720 --> 00:07:13,759
very um particular ones on those

00:07:12,000 --> 00:07:15,759
list of admission controllers that has

00:07:13,759 --> 00:07:17,680
the kubernetes api server

00:07:15,759 --> 00:07:19,759
which are validating admission webhook

00:07:17,680 --> 00:07:23,120
imitating admission webhook

00:07:19,759 --> 00:07:27,280
which basically allows you to

00:07:23,120 --> 00:07:30,160
hook any code as a webhook

00:07:27,280 --> 00:07:32,000
to to those so that's where gatekeeper

00:07:30,160 --> 00:07:32,720
gets implemented so basically it's a web

00:07:32,000 --> 00:07:35,520
hook

00:07:32,720 --> 00:07:37,120
uh to those admission controllers so you

00:07:35,520 --> 00:07:39,680
can do

00:07:37,120 --> 00:07:41,919
basically anything you want and that's a

00:07:39,680 --> 00:07:42,319
very classic way to implement these

00:07:41,919 --> 00:07:46,639
things

00:07:42,319 --> 00:07:46,960
in kodi's one of the great things about

00:07:46,639 --> 00:07:50,400
kate

00:07:46,960 --> 00:07:51,680
kipper is that it was kubernetes native

00:07:50,400 --> 00:07:55,199
from day zero so that

00:07:51,680 --> 00:07:58,560
it was an uh creative thinking about

00:07:55,199 --> 00:08:01,280
that it was going to be used in

00:07:58,560 --> 00:08:02,960
in kubernetes and it uses a design

00:08:01,280 --> 00:08:05,280
pattern very common in kubernetes of

00:08:02,960 --> 00:08:08,800
extending the kubernetes api

00:08:05,280 --> 00:08:10,879
through crds custom resource definitions

00:08:08,800 --> 00:08:13,360
and then have a controller that does

00:08:10,879 --> 00:08:15,440
this reconciliation loop that

00:08:13,360 --> 00:08:17,520
we all know and love including so you

00:08:15,440 --> 00:08:19,680
create something as an object

00:08:17,520 --> 00:08:22,080
and the controller does something based

00:08:19,680 --> 00:08:22,080
on that

00:08:24,160 --> 00:08:27,599
the good thing as well is that it

00:08:26,000 --> 00:08:30,080
creates two main

00:08:27,599 --> 00:08:31,039
crd objects uh the constraint in plate

00:08:30,080 --> 00:08:33,440
one

00:08:31,039 --> 00:08:34,240
and the constrained one and this means

00:08:33,440 --> 00:08:37,360
that you

00:08:34,240 --> 00:08:39,519
actually can reuse uh

00:08:37,360 --> 00:08:41,279
constraint templates into several

00:08:39,519 --> 00:08:42,719
instances of different constraints and

00:08:41,279 --> 00:08:46,080
we are going to see an example

00:08:42,719 --> 00:08:49,279
to explain more or less so we have um

00:08:46,080 --> 00:08:50,080
this contrast in place to require a set

00:08:49,279 --> 00:08:52,080
of labels

00:08:50,080 --> 00:08:53,279
but instead of putting here the labels

00:08:52,080 --> 00:08:56,720
that i require

00:08:53,279 --> 00:08:59,200
i live aside as a parameter so

00:08:56,720 --> 00:09:00,320
that way i can do many rules based on

00:08:59,200 --> 00:09:03,600
this template

00:09:00,320 --> 00:09:04,399
by um instantiating that constraint in

00:09:03,600 --> 00:09:06,320
plate

00:09:04,399 --> 00:09:08,880
into constraints in this case for

00:09:06,320 --> 00:09:10,880
example i'm saying that

00:09:08,880 --> 00:09:12,399
namespace is required to have the

00:09:10,880 --> 00:09:15,360
gatekeeper

00:09:12,399 --> 00:09:16,480
label and my parts for example require

00:09:15,360 --> 00:09:20,480
the do not

00:09:16,480 --> 00:09:23,920
delete label but only on the default

00:09:20,480 --> 00:09:26,000
namespace so that way you can reuse

00:09:23,920 --> 00:09:27,279
these rules over and over again without

00:09:26,000 --> 00:09:30,320
having to write

00:09:27,279 --> 00:09:30,320
a lot of rigo

00:09:31,120 --> 00:09:37,920
and that makes gatekeeper great

00:09:34,560 --> 00:09:39,519
to reuse policy and the

00:09:37,920 --> 00:09:41,440
the funny thing is that many of the

00:09:39,519 --> 00:09:43,680
things that we want to govern

00:09:41,440 --> 00:09:45,839
in our cluster are very similar from

00:09:43,680 --> 00:09:46,720
organization to organization like things

00:09:45,839 --> 00:09:48,839
like

00:09:46,720 --> 00:09:50,080
images can only come from approved

00:09:48,839 --> 00:09:52,800
registers

00:09:50,080 --> 00:09:53,440
or deployments require certain mandatory

00:09:52,800 --> 00:09:57,040
labels

00:09:53,440 --> 00:09:59,760
or container images must have a digest

00:09:57,040 --> 00:10:01,360
or containers need to have a memory and

00:09:59,760 --> 00:10:04,240
cpu limit set

00:10:01,360 --> 00:10:05,680
with a specific value these are things

00:10:04,240 --> 00:10:08,160
that

00:10:05,680 --> 00:10:10,160
probably you want to do on your clusters

00:10:08,160 --> 00:10:13,839
as well

00:10:10,160 --> 00:10:16,160
so we the gatekeeper project the oppa

00:10:13,839 --> 00:10:18,160
bar of the oppa project has created the

00:10:16,160 --> 00:10:21,040
gatekeeper library

00:10:18,160 --> 00:10:23,440
which basically is open source library

00:10:21,040 --> 00:10:25,760
of these constraint templates

00:10:23,440 --> 00:10:27,760
so you for many things that you really

00:10:25,760 --> 00:10:28,399
want to do probably you don't even need

00:10:27,760 --> 00:10:31,200
to write

00:10:28,399 --> 00:10:32,480
any regal or understand even how regal

00:10:31,200 --> 00:10:35,200
works because

00:10:32,480 --> 00:10:35,839
there are already a lot of ready to be

00:10:35,200 --> 00:10:39,839
used

00:10:35,839 --> 00:10:42,800
templates and on this

00:10:39,839 --> 00:10:44,640
particular on this particular gatekeeper

00:10:42,800 --> 00:10:46,399
library you have

00:10:44,640 --> 00:10:48,880
two things for each of the rules you

00:10:46,399 --> 00:10:51,120
have the template

00:10:48,880 --> 00:10:52,399
and that's the thing that you will apply

00:10:51,120 --> 00:10:54,640
on your cluster

00:10:52,399 --> 00:10:56,800
but also you have examples of how to use

00:10:54,640 --> 00:11:00,480
that template and you have that example

00:10:56,800 --> 00:11:02,240
um with two things you have

00:11:00,480 --> 00:11:04,800
an instantiation a particular

00:11:02,240 --> 00:11:08,079
instantiation of that template

00:11:04,800 --> 00:11:11,519
and also an example that will

00:11:08,079 --> 00:11:15,680
fail that rule for that particular

00:11:11,519 --> 00:11:20,399
constraint so in a very easy way

00:11:15,680 --> 00:11:22,959
you can see how a template works

00:11:20,399 --> 00:11:25,839
how to use it and what are the type of

00:11:22,959 --> 00:11:29,839
objects that will deny

00:11:25,839 --> 00:11:29,839
that will basically fail validation

00:11:31,200 --> 00:11:34,560
cool uh so that's completely open source

00:11:33,519 --> 00:11:36,480
um

00:11:34,560 --> 00:11:38,160
not only gatekeeper not only opa but

00:11:36,480 --> 00:11:41,600
also the library so if you go

00:11:38,160 --> 00:11:44,399
to that github url

00:11:41,600 --> 00:11:46,720
you can you can go and see all the

00:11:44,399 --> 00:11:49,839
different templates

00:11:46,720 --> 00:11:50,240
another great feature from gatekeeper is

00:11:49,839 --> 00:11:52,959
that

00:11:50,240 --> 00:11:53,760
it's is that it has a lot of metrics

00:11:52,959 --> 00:11:56,639
already

00:11:53,760 --> 00:11:58,240
set up for you so this is very important

00:11:56,639 --> 00:12:01,680
because you want to understand

00:11:58,240 --> 00:12:04,079
what's going on um on when you create a

00:12:01,680 --> 00:12:07,120
new policy see what objects are already

00:12:04,079 --> 00:12:09,519
failing that policy things like that

00:12:07,120 --> 00:12:11,040
so it has a lot of out of the box

00:12:09,519 --> 00:12:12,639
metrics like

00:12:11,040 --> 00:12:14,079
the number of constraints and plates and

00:12:12,639 --> 00:12:17,040
constraint

00:12:14,079 --> 00:12:19,040
the request to the webhook per second

00:12:17,040 --> 00:12:20,880
and the latency

00:12:19,040 --> 00:12:22,560
the number of violations so the number

00:12:20,880 --> 00:12:24,399
of

00:12:22,560 --> 00:12:25,760
of objects that are violating a

00:12:24,399 --> 00:12:28,800
particular rule

00:12:25,760 --> 00:12:31,760
um and and how much

00:12:28,800 --> 00:12:32,160
data we are going to to have sync uh for

00:12:31,760 --> 00:12:34,560
that

00:12:32,160 --> 00:12:35,360
for that rule to happen so we are going

00:12:34,560 --> 00:12:37,279
to see

00:12:35,360 --> 00:12:39,040
some of them during the demo and the

00:12:37,279 --> 00:12:39,519
great thing is that in a data dock we

00:12:39,040 --> 00:12:42,399
have

00:12:39,519 --> 00:12:43,360
um out of the box integration that

00:12:42,399 --> 00:12:46,160
without you

00:12:43,360 --> 00:12:46,959
having to set up anything uh it will

00:12:46,160 --> 00:12:50,240
have

00:12:46,959 --> 00:12:52,399
an out of the box um dashboard with all

00:12:50,240 --> 00:12:54,560
the data that you're interested in about

00:12:52,399 --> 00:12:55,519
your gatekeeper policy and again we are

00:12:54,560 --> 00:12:58,880
going to see that

00:12:55,519 --> 00:13:00,240
in in the demo so let's have a look at

00:12:58,880 --> 00:13:04,000
the demo now

00:13:00,240 --> 00:13:06,880
um so we have um

00:13:04,000 --> 00:13:07,760
so by the way i have alias cube ctl2k so

00:13:06,880 --> 00:13:11,279
every type of

00:13:07,760 --> 00:13:15,600
k is cubectl so we have a

00:13:11,279 --> 00:13:18,399
a very simple uh onenote cluster

00:13:15,600 --> 00:13:20,320
so in this in this case using minicube

00:13:18,399 --> 00:13:22,800
it's good enough for the demo

00:13:20,320 --> 00:13:24,800
and one of the things that we have is

00:13:22,800 --> 00:13:25,360
that we already have data dock up and

00:13:24,800 --> 00:13:28,800
running

00:13:25,360 --> 00:13:31,920
here so because we have data dock

00:13:28,800 --> 00:13:35,279
up and running here you can see that

00:13:31,920 --> 00:13:36,800
we have all the data about our cluster

00:13:35,279 --> 00:13:37,519
over here all the parts are already

00:13:36,800 --> 00:13:39,040
running

00:13:37,519 --> 00:13:41,120
you can see that gatekeeper is not

00:13:39,040 --> 00:13:44,079
running yet um

00:13:41,120 --> 00:13:44,720
and we have a couple of of name spaces

00:13:44,079 --> 00:13:49,279
the full name

00:13:44,720 --> 00:13:52,880
space and the cube system name space

00:13:49,279 --> 00:13:54,639
good so we are going to now

00:13:52,880 --> 00:13:56,399
deploy gatekeeper and we are going to

00:13:54,639 --> 00:14:00,160
deploy gatekeeper

00:13:56,399 --> 00:14:02,560
uh in the more simple way so basically

00:14:00,160 --> 00:14:05,600
we are going to

00:14:02,560 --> 00:14:07,279
apply the the full demo that um it's on

00:14:05,600 --> 00:14:08,959
the getting started instructions from

00:14:07,279 --> 00:14:12,160
from gatekeeper

00:14:08,959 --> 00:14:15,680
so you can see that uh it has created

00:14:12,160 --> 00:14:18,320
a bunch of new resources

00:14:15,680 --> 00:14:20,240
one of the things that it has created

00:14:18,320 --> 00:14:23,360
it's uh the crds the

00:14:20,240 --> 00:14:25,040
new objects that extend the careers api

00:14:23,360 --> 00:14:26,399
and we can see that the ones that we for

00:14:25,040 --> 00:14:28,839
example talk about

00:14:26,399 --> 00:14:31,120
during the presentation the constrained

00:14:28,839 --> 00:14:34,880
templates

00:14:31,120 --> 00:14:37,040
great so let's see if we have

00:14:34,880 --> 00:14:39,440
we have also a new name space called

00:14:37,040 --> 00:14:43,440
gatekeeper system

00:14:39,440 --> 00:14:46,320
so if we check

00:14:43,440 --> 00:14:48,240
the parts over there we can see uh that

00:14:46,320 --> 00:14:51,440
gate keeper is already running

00:14:48,240 --> 00:14:52,720
so you can see that we have four

00:14:51,440 --> 00:14:55,360
different parts

00:14:52,720 --> 00:14:56,639
so the first one is the controller so

00:14:55,360 --> 00:14:58,320
that's the one that creates the

00:14:56,639 --> 00:15:00,240
reconciliation loop and and you can see

00:14:58,320 --> 00:15:02,560
that we have three replicas here

00:15:00,240 --> 00:15:04,000
um it is recommended to have one more

00:15:02,560 --> 00:15:08,079
than one replica because if

00:15:04,000 --> 00:15:10,639
if it fails then you can create any

00:15:08,079 --> 00:15:12,560
any part without uh or any object

00:15:10,639 --> 00:15:15,680
without going through policy

00:15:12,560 --> 00:15:16,560
so for to have an aha deployment at

00:15:15,680 --> 00:15:18,320
least

00:15:16,560 --> 00:15:21,440
more than than one replica is

00:15:18,320 --> 00:15:24,560
recommended but you can define that

00:15:21,440 --> 00:15:27,839
and also we have a four one which is the

00:15:24,560 --> 00:15:30,079
audit um and and this

00:15:27,839 --> 00:15:32,320
uh we are going to explain in a second

00:15:30,079 --> 00:15:36,639
what it's what it's for

00:15:32,320 --> 00:15:38,560
cool uh so now that we have uh

00:15:36,639 --> 00:15:41,360
gatekeeper running uh what is going to

00:15:38,560 --> 00:15:45,279
happen is um

00:15:41,360 --> 00:15:49,120
the data agent

00:15:45,279 --> 00:15:49,839
is going to discover how to discover

00:15:49,120 --> 00:15:52,959
that this is

00:15:49,839 --> 00:15:55,839
um that this is here so

00:15:52,959 --> 00:15:55,839
if we see

00:16:04,240 --> 00:16:10,560
we can see here the gatekeeper

00:16:08,079 --> 00:16:11,600
check up and running correctly so what

00:16:10,560 --> 00:16:14,959
that means

00:16:11,600 --> 00:16:16,560
is that um the data talk agent ought to

00:16:14,959 --> 00:16:18,079
discover that that was happening

00:16:16,560 --> 00:16:20,959
and it's going to start gathering

00:16:18,079 --> 00:16:23,199
metrics for that particular one

00:16:20,959 --> 00:16:24,800
for gatekeeper a specific metrics from

00:16:23,199 --> 00:16:27,920
gatekeeper and moving them

00:16:24,800 --> 00:16:31,120
to to that unlock

00:16:27,920 --> 00:16:32,959
cool um so let's let's start creating

00:16:31,120 --> 00:16:35,120
our first policy and for that

00:16:32,959 --> 00:16:37,040
what i'm going to do is i'm going to be

00:16:35,120 --> 00:16:38,320
using the gatekeeper library

00:16:37,040 --> 00:16:40,639
and the reason why i'm using the

00:16:38,320 --> 00:16:43,759
gatekeeper library is to show you

00:16:40,639 --> 00:16:44,320
again without needing to know rigo to

00:16:43,759 --> 00:16:47,759
start

00:16:44,320 --> 00:16:51,120
with gatekeeper how i can reuse that

00:16:47,759 --> 00:16:51,519
for my own policies so we are going to

00:16:51,120 --> 00:16:53,839
use

00:16:51,519 --> 00:16:55,120
uh you can see here this is the the

00:16:53,839 --> 00:16:57,360
gatekeeper library

00:16:55,120 --> 00:16:58,480
repo we just cloned it from from the

00:16:57,360 --> 00:17:02,000
internet

00:16:58,480 --> 00:17:03,440
with all the different templates

00:17:02,000 --> 00:17:06,160
and we are going to use the required

00:17:03,440 --> 00:17:08,720
labels um that we saw as well

00:17:06,160 --> 00:17:10,240
so basically uh when you see one of

00:17:08,720 --> 00:17:12,720
these templates you can see the

00:17:10,240 --> 00:17:16,640
description here

00:17:12,720 --> 00:17:18,400
so you can know what it's going to do

00:17:16,640 --> 00:17:19,839
you're going to have the different

00:17:18,400 --> 00:17:21,439
parameters

00:17:19,839 --> 00:17:23,199
and then you're going to have the rigor

00:17:21,439 --> 00:17:26,319
code here so

00:17:23,199 --> 00:17:28,240
again to start with gatekeeper if you're

00:17:26,319 --> 00:17:29,919
using the library for many many things

00:17:28,240 --> 00:17:31,840
you don't need to know a lot

00:17:29,919 --> 00:17:33,760
obviously if you then want to create

00:17:31,840 --> 00:17:35,760
your own rules you will need to

00:17:33,760 --> 00:17:37,679
to understand a little bit more um how

00:17:35,760 --> 00:17:40,799
that works so

00:17:37,679 --> 00:17:44,320
the first thing we are going to do um

00:17:40,799 --> 00:17:48,320
is to apply that uh that one so we have

00:17:44,320 --> 00:17:52,400
library and general and let's say

00:17:48,320 --> 00:17:53,760
require labels so we apply the template

00:17:52,400 --> 00:17:55,600
that's the first thing that we need to

00:17:53,760 --> 00:17:59,039
do

00:17:55,600 --> 00:18:02,080
and it's going to create the template

00:17:59,039 --> 00:18:04,320
and let's uh it has to do

00:18:02,080 --> 00:18:05,919
two things it has created the kubernetes

00:18:04,320 --> 00:18:09,039
required labels

00:18:05,919 --> 00:18:12,640
uh type of constraint template but

00:18:09,039 --> 00:18:15,200
also it has created a new crd

00:18:12,640 --> 00:18:17,120
in this case it has created an object

00:18:15,200 --> 00:18:20,720
for all the instances

00:18:17,120 --> 00:18:22,559
that we want to do from this template

00:18:20,720 --> 00:18:24,640
okay so let's let's get one of the

00:18:22,559 --> 00:18:27,760
examples but this

00:18:24,640 --> 00:18:30,240
let's modify it a bit so we're going to

00:18:27,760 --> 00:18:30,240
copy

00:18:33,200 --> 00:18:37,520
this this example that we have as part

00:18:35,760 --> 00:18:39,200
of the library and we are going to call

00:18:37,520 --> 00:18:44,799
it for example

00:18:39,200 --> 00:18:44,799
um all must have stack conf

00:18:45,280 --> 00:18:49,440
good uh so let's uh again we just copy

00:18:48,320 --> 00:18:51,760
that

00:18:49,440 --> 00:18:51,760
from

00:18:52,559 --> 00:18:56,320
from the library and we have an example

00:18:55,840 --> 00:18:58,799
here

00:18:56,320 --> 00:18:59,760
and you can see that using also the

00:18:58,799 --> 00:19:01,679
example you can

00:18:59,760 --> 00:19:02,960
quickly create new policies for example

00:19:01,679 --> 00:19:06,000
in our case

00:19:02,960 --> 00:19:09,360
um we are going to

00:19:06,000 --> 00:19:13,200
change this to pod for example

00:19:09,360 --> 00:19:14,799
we want all parts to have the stack conf

00:19:13,200 --> 00:19:18,240
so we are going to change also the

00:19:14,799 --> 00:19:21,200
description all parts must have

00:19:18,240 --> 00:19:24,960
[Music]

00:19:21,200 --> 00:19:29,840
a stack of label

00:19:24,960 --> 00:19:33,039
and then we are going to remove the

00:19:29,840 --> 00:19:34,080
the validated values so we are going to

00:19:33,039 --> 00:19:37,440
say basically

00:19:34,080 --> 00:19:41,600
the only thing that we need is to have

00:19:37,440 --> 00:19:43,520
this type conf label without having to

00:19:41,600 --> 00:19:46,640
define a particular value so let's

00:19:43,520 --> 00:19:49,120
remove um

00:19:46,640 --> 00:19:50,080
this one and basically we're going to

00:19:49,120 --> 00:19:52,400
just to see

00:19:50,080 --> 00:19:55,200
that the key has to be is that count we

00:19:52,400 --> 00:19:58,640
don't care about the value

00:19:55,200 --> 00:20:00,020
okay saving that and again we have to

00:19:58,640 --> 00:20:01,600
apply

00:20:00,020 --> 00:20:07,840
[Music]

00:20:01,600 --> 00:20:07,840
that particular object um

00:20:10,559 --> 00:20:17,039
okay we have created that

00:20:13,600 --> 00:20:21,600
object and if we now try to

00:20:17,039 --> 00:20:22,320
create um a new part for example this

00:20:21,600 --> 00:20:24,799
very simple

00:20:22,320 --> 00:20:25,360
nginx part you can see that it has the

00:20:24,799 --> 00:20:28,960
label

00:20:25,360 --> 00:20:31,760
ran but it doesn't have the label um

00:20:28,960 --> 00:20:32,320
stack conf so what happens when we try

00:20:31,760 --> 00:20:35,440
to

00:20:32,320 --> 00:20:37,520
create that object now that we have that

00:20:35,440 --> 00:20:41,360
rule in place

00:20:37,520 --> 00:20:45,039
so you see um suddenly

00:20:41,360 --> 00:20:46,240
you get a denial error with the

00:20:45,039 --> 00:20:49,600
description so it's

00:20:46,240 --> 00:20:51,200
for your users for your cluster users

00:20:49,600 --> 00:20:52,960
they will you need to create this

00:20:51,200 --> 00:20:56,960
constraint with with nice

00:20:52,960 --> 00:20:59,520
descriptions so they get um the reason

00:20:56,960 --> 00:21:00,640
and how to solve it the reason why their

00:20:59,520 --> 00:21:04,159
part is failing

00:21:00,640 --> 00:21:07,679
and how to solve it in this case

00:21:04,159 --> 00:21:09,200
uh all posts needs to have the stack

00:21:07,679 --> 00:21:14,000
conf label

00:21:09,200 --> 00:21:14,000
so let's do that let's quickly

00:21:14,840 --> 00:21:21,120
add

00:21:17,360 --> 00:21:24,799
conf and then

00:21:21,120 --> 00:21:24,799
you can put any value here

00:21:26,400 --> 00:21:33,200
and now if we try to create that object

00:21:30,799 --> 00:21:34,000
suddenly uh gatekeeper is going to allow

00:21:33,200 --> 00:21:36,640
us because

00:21:34,000 --> 00:21:38,720
it basically follows all the rules that

00:21:36,640 --> 00:21:40,799
we have set for this cluster

00:21:38,720 --> 00:21:42,799
um but we already had some parts we

00:21:40,799 --> 00:21:46,000
already had some pots running

00:21:42,799 --> 00:21:46,880
that didn't have that label because we

00:21:46,000 --> 00:21:49,600
hadn't

00:21:46,880 --> 00:21:50,799
created that rule before so what happens

00:21:49,600 --> 00:21:52,960
what the

00:21:50,799 --> 00:21:55,760
with the uh parts that were already

00:21:52,960 --> 00:21:59,440
running so that's where the audit part

00:21:55,760 --> 00:22:01,840
that we saw so when we were saying

00:21:59,440 --> 00:22:03,919
that we had this audit pod this is what

00:22:01,840 --> 00:22:05,280
it does what it does the audit part is

00:22:03,919 --> 00:22:07,280
to check

00:22:05,280 --> 00:22:08,559
full objects that are already on the

00:22:07,280 --> 00:22:12,000
cluster that

00:22:08,559 --> 00:22:15,679
are failing a new rule and that

00:22:12,000 --> 00:22:18,240
way you don't have to um basically

00:22:15,679 --> 00:22:19,760
uh you can create a new rule knowing

00:22:18,240 --> 00:22:21,919
that it's not going to affect

00:22:19,760 --> 00:22:23,200
the workloads are already running and

00:22:21,919 --> 00:22:27,679
give people time

00:22:23,200 --> 00:22:32,400
to modify their workloads so

00:22:27,679 --> 00:22:32,400
if we now uh so if we get

00:22:33,360 --> 00:22:37,120
this object which is the

00:22:37,600 --> 00:22:43,520
the one that we have created and we

00:22:40,880 --> 00:22:43,520
describe

00:22:49,760 --> 00:22:56,400
you can see here all the parts that

00:22:53,200 --> 00:22:59,360
are violating the

00:22:56,400 --> 00:23:00,960
um this particular rule so you can fix

00:22:59,360 --> 00:23:03,679
that but obviously you

00:23:00,960 --> 00:23:05,679
not always want to go on every cluster

00:23:03,679 --> 00:23:09,600
and describe this so

00:23:05,679 --> 00:23:12,640
again we are sending all this data

00:23:09,600 --> 00:23:15,200
back to datadog so you can see that

00:23:12,640 --> 00:23:16,000
um as soon as i started creating the

00:23:15,200 --> 00:23:17,760
gatekeeper

00:23:16,000 --> 00:23:19,600
they started sending data to datadoc

00:23:17,760 --> 00:23:20,559
because the idm was already running

00:23:19,600 --> 00:23:22,799
there

00:23:20,559 --> 00:23:24,559
and you can see data for example about

00:23:22,799 --> 00:23:26,640
the latency of the webhooks

00:23:24,559 --> 00:23:28,320
the number of requests and also the

00:23:26,640 --> 00:23:29,840
number of violations that same number

00:23:28,320 --> 00:23:33,280
that we saw there

00:23:29,840 --> 00:23:36,159
as soon as we created that new rule um

00:23:33,280 --> 00:23:38,880
it will give you information about all

00:23:36,159 --> 00:23:40,799
the problems that your cluster has

00:23:38,880 --> 00:23:42,080
so that way you can create new rules as

00:23:40,799 --> 00:23:45,600
a cluster admin

00:23:42,080 --> 00:23:47,279
and in a just a single view

00:23:45,600 --> 00:23:49,520
understand what's going on on your

00:23:47,279 --> 00:23:51,039
cluster which parts are

00:23:49,520 --> 00:23:54,480
or which objects in general are

00:23:51,039 --> 00:23:54,480
violating any of the rules

00:23:56,480 --> 00:24:03,360
cool um so let's

00:23:59,600 --> 00:24:05,919
now go back quickly to the slides

00:24:03,360 --> 00:24:07,039
because we were saying uh in this case

00:24:05,919 --> 00:24:08,720
we just created

00:24:07,039 --> 00:24:11,120
one object that was failing something

00:24:08,720 --> 00:24:14,240
that it was fairly easy

00:24:11,120 --> 00:24:16,240
to to check so it has this label or it

00:24:14,240 --> 00:24:20,080
doesn't have but what about

00:24:16,240 --> 00:24:24,080
this type of rule host must be unique

00:24:20,080 --> 00:24:24,720
among all ingresses so you don't only

00:24:24,080 --> 00:24:26,640
need

00:24:24,720 --> 00:24:28,000
the description of the object that you

00:24:26,640 --> 00:24:31,120
want to create

00:24:28,000 --> 00:24:33,840
you also need the

00:24:31,120 --> 00:24:34,159
information about the all the rest of

00:24:33,840 --> 00:24:36,960
the

00:24:34,159 --> 00:24:38,880
ingresses and how do you do that

00:24:36,960 --> 00:24:39,440
remember when we were talking about oppa

00:24:38,880 --> 00:24:42,080
oppa

00:24:39,440 --> 00:24:43,200
uses two things to make a decision the

00:24:42,080 --> 00:24:46,400
rigor code

00:24:43,200 --> 00:24:49,600
and also some data that you may store

00:24:46,400 --> 00:24:52,799
on that system so how do you store that

00:24:49,600 --> 00:24:55,120
using gatekeeper you use it

00:24:52,799 --> 00:24:56,960
with a new crd object that was created

00:24:55,120 --> 00:24:59,760
as well called config

00:24:56,960 --> 00:25:01,760
where you basically say what are the

00:24:59,760 --> 00:25:05,279
objects that you want to store data

00:25:01,760 --> 00:25:07,520
about for oppa to make decisions so in

00:25:05,279 --> 00:25:09,919
this case for example i'm telling it

00:25:07,520 --> 00:25:10,640
every time that you create an ingress

00:25:09,919 --> 00:25:12,880
sync it

00:25:10,640 --> 00:25:14,799
and put it on the data pool so i can

00:25:12,880 --> 00:25:18,080
make decisions based on that

00:25:14,799 --> 00:25:21,039
data so let's have a uh

00:25:18,080 --> 00:25:21,919
again another demo quickly uh before

00:25:21,039 --> 00:25:25,279
before we wrap

00:25:21,919 --> 00:25:29,840
up in this case we are going to

00:25:25,279 --> 00:25:29,840
again use the gatekeeper library

00:25:32,480 --> 00:25:35,919
and then library

00:25:36,320 --> 00:25:41,279
general and

00:25:40,030 --> 00:25:43,440
[Music]

00:25:41,279 --> 00:25:44,799
unique ingress host the one that we were

00:25:43,440 --> 00:25:48,480
talking about

00:25:44,799 --> 00:25:52,000
and again in this case it not only

00:25:48,480 --> 00:25:54,799
gives me a template that i can apply

00:25:52,000 --> 00:25:55,679
so this is the template but it also

00:25:54,799 --> 00:25:59,760
gives me

00:25:55,679 --> 00:26:02,159
the the sync object so

00:25:59,760 --> 00:26:03,440
again super complete the gatorkeeper

00:26:02,159 --> 00:26:06,960
library because

00:26:03,440 --> 00:26:09,200
i basically also have um

00:26:06,960 --> 00:26:10,240
everything that i need to to make this

00:26:09,200 --> 00:26:13,279
happen

00:26:10,240 --> 00:26:16,720
so let's go to the examples here

00:26:13,279 --> 00:26:19,520
um and we have a single example

00:26:16,720 --> 00:26:20,240
and uh first thing obviously we need to

00:26:19,520 --> 00:26:22,960
create

00:26:20,240 --> 00:26:25,840
uh the instantiation of our template so

00:26:22,960 --> 00:26:25,840
let's do that

00:26:34,640 --> 00:26:38,000
and for the example you can see that

00:26:36,720 --> 00:26:40,240
it's going to create two

00:26:38,000 --> 00:26:41,120
ingresses so it's going to create the

00:26:40,240 --> 00:26:43,200
first one

00:26:41,120 --> 00:26:45,039
uh and the host is going to be example

00:26:43,200 --> 00:26:47,520
holes example.com

00:26:45,039 --> 00:26:49,279
and then it's going to try to create a

00:26:47,520 --> 00:26:53,039
second one

00:26:49,279 --> 00:26:54,720
but it's going to use the same hostname

00:26:53,039 --> 00:26:57,360
as the previous one so let's see what

00:26:54,720 --> 00:27:00,080
happens when we try to

00:26:57,360 --> 00:27:00,080
create that

00:27:04,960 --> 00:27:09,679
so you can see the first one was created

00:27:07,840 --> 00:27:11,279
successfully and the reason why it was

00:27:09,679 --> 00:27:12,480
created successfully is because it was

00:27:11,279 --> 00:27:15,760
the first time

00:27:12,480 --> 00:27:19,360
that oppa had seen that uh

00:27:15,760 --> 00:27:20,159
host name but the second one it gives an

00:27:19,360 --> 00:27:22,960
error

00:27:20,159 --> 00:27:25,120
basically saying that the host name

00:27:22,960 --> 00:27:28,320
conflicts with a previous one

00:27:25,120 --> 00:27:31,679
and and again this was fairly automatic

00:27:28,320 --> 00:27:34,399
uh we created both at the same time but

00:27:31,679 --> 00:27:35,120
um oppa had already gathered information

00:27:34,399 --> 00:27:38,080
about the

00:27:35,120 --> 00:27:39,279
previous english object and had

00:27:38,080 --> 00:27:41,760
successfully

00:27:39,279 --> 00:27:44,320
created that as part of their policy

00:27:41,760 --> 00:27:44,320
decision

00:27:45,039 --> 00:27:48,880
good um that's all i had for today i

00:27:47,840 --> 00:27:52,000
hope that

00:27:48,880 --> 00:27:54,960
you've learned about gatekeeper and

00:27:52,000 --> 00:27:56,480
more importantly how easy it is to get

00:27:54,960 --> 00:27:59,679
started to creating

00:27:56,480 --> 00:28:01,679
complex policy decisions using for

00:27:59,679 --> 00:28:03,840
example the gatekeeping library

00:28:01,679 --> 00:28:17,840
thank you very much and see you in the

00:28:03,840 --> 00:28:17,840
next one

00:28:20,559 --> 00:28:22,640

YouTube URL: https://www.youtube.com/watch?v=1tgxakaipQE


