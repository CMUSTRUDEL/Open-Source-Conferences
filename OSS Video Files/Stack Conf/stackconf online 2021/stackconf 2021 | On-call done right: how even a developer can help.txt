Title: stackconf 2021 | On-call done right: how even a developer can help
Publication date: 2021-06-24
Playlist: stackconf online 2021
Description: 
	by Tom Granot

It is another night on-call, and a customer is reporting a problem with one of your key services. The logs and the monitoring systems tell you nothing, and so it is time to wake up one of the on-call developers. You can already predict what they are going to say – that they “don’t see anything on their end” and that they “can’t understand why you woke them up, again, for what is clearly a problem on your end”. Same old, same old… You have to remember, though, that while you have all the tools at your disposal – the developers don’t. They wrote and pushed the code, and at that point have transferred the responsibility to you – they don’t have the same context. This talk discusses this gap, and what we can do to close it.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/netways/webinare/

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/


Musik: https://www.frametraxx.de/
Captions: 
	00:00:05,660 --> 00:00:13,119
[Applause]

00:00:06,120 --> 00:00:13,119
[Music]

00:00:14,320 --> 00:00:17,359
hello my name is

00:00:15,519 --> 00:00:19,039
tom and i'd like to welcome you to my

00:00:17,359 --> 00:00:21,039
talk getting back to sleep as soon as

00:00:19,039 --> 00:00:24,160
possible for the on-call developer

00:00:21,039 --> 00:00:27,599
or how to win it on call here at st

00:00:24,160 --> 00:00:29,119
stack conf uh online uh unfortunately we

00:00:27,599 --> 00:00:30,720
couldn't do this in person but i'm

00:00:29,119 --> 00:00:31,439
really happy to be part of the online

00:00:30,720 --> 00:00:33,680
presence

00:00:31,439 --> 00:00:36,000
of the conference a little bit about me

00:00:33,680 --> 00:00:36,960
uh tong granat i am a solution engineer

00:00:36,000 --> 00:00:39,440
for a company called

00:00:36,960 --> 00:00:41,360
lightrun we build a developer native

00:00:39,440 --> 00:00:43,360
real-time observability platform

00:00:41,360 --> 00:00:44,559
uh basically a suite of tools that

00:00:43,360 --> 00:00:46,719
enables you to add

00:00:44,559 --> 00:00:48,239
real-time logs metrics and traces to

00:00:46,719 --> 00:00:49,920
running production applications

00:00:48,239 --> 00:00:52,079
and formally i was decided to be

00:00:49,920 --> 00:00:53,680
reliability at a

00:00:52,079 --> 00:00:55,600
site reliability engineer sorry at

00:00:53,680 --> 00:00:57,039
actics which built a distributed

00:00:55,600 --> 00:00:59,280
software platform for

00:00:57,039 --> 00:01:01,199
factories you can reach out to me at

00:00:59,280 --> 00:01:03,199
twitter just dm me there

00:01:01,199 --> 00:01:05,840
also you can see my open source work on

00:01:03,199 --> 00:01:08,799
on uh github i contributed

00:01:05,840 --> 00:01:09,280
open source software you can email me at

00:01:08,799 --> 00:01:11,360
tom g

00:01:09,280 --> 00:01:13,280
at lightrun.com and you can check out

00:01:11,360 --> 00:01:16,799
our product at https

00:01:13,280 --> 00:01:18,560
lightroom.com to set the scene before we

00:01:16,799 --> 00:01:21,040
dive into the discussion and kind of

00:01:18,560 --> 00:01:22,240
do the gist of the conversation i'd like

00:01:21,040 --> 00:01:24,159
to set the scene

00:01:22,240 --> 00:01:26,159
so i'd like to introduce you to james

00:01:24,159 --> 00:01:28,720
jamie java developer about

00:01:26,159 --> 00:01:29,520
five years of experience or or something

00:01:28,720 --> 00:01:32,240
like that

00:01:29,520 --> 00:01:33,040
um jamie has been working in backend

00:01:32,240 --> 00:01:36,320
system for

00:01:33,040 --> 00:01:36,880
most of uh of uh his career and he's

00:01:36,320 --> 00:01:39,680
currently

00:01:36,880 --> 00:01:40,240
in charge of the os's transaction system

00:01:39,680 --> 00:01:43,280
while this

00:01:40,240 --> 00:01:45,040
is a big corporate oriented system

00:01:43,280 --> 00:01:46,399
that does a bunch of different things it

00:01:45,040 --> 00:01:47,439
does it's a management platform

00:01:46,399 --> 00:01:49,119
basically

00:01:47,439 --> 00:01:51,280
jamie specifically works on the

00:01:49,119 --> 00:01:52,960
transaction system uh jimmy's in charge

00:01:51,280 --> 00:01:54,720
of making sure all transactions go

00:01:52,960 --> 00:01:56,399
through payments are processed and the

00:01:54,720 --> 00:01:59,600
goods are delivered to the customers

00:01:56,399 --> 00:02:02,000
on the other end now

00:01:59,600 --> 00:02:03,920
or is this being a big you know

00:02:02,000 --> 00:02:06,240
enterprise oriented system

00:02:03,920 --> 00:02:07,840
it's active 24 7. there's always

00:02:06,240 --> 00:02:09,759
somebody using the system and therefore

00:02:07,840 --> 00:02:11,680
the system must always be up

00:02:09,759 --> 00:02:14,160
in order to support this endeavor

00:02:11,680 --> 00:02:16,560
keeping a system live

00:02:14,160 --> 00:02:17,920
for long periods of time there's always

00:02:16,560 --> 00:02:19,680
one developer on call

00:02:17,920 --> 00:02:21,520
who's basically in charge of handling

00:02:19,680 --> 00:02:25,280
escalations so if something is

00:02:21,520 --> 00:02:27,520
bad on the application level uh the uh

00:02:25,280 --> 00:02:29,040
knock team in place is calling jamie and

00:02:27,520 --> 00:02:31,040
telling them telling him

00:02:29,040 --> 00:02:33,280
uh hey something's wrong can you please

00:02:31,040 --> 00:02:35,519
come check jamie debugs and then

00:02:33,280 --> 00:02:37,680
hopefully goes back to sleep in addition

00:02:35,519 --> 00:02:38,879
to the noc team and jamie there's a

00:02:37,680 --> 00:02:40,800
devops person

00:02:38,879 --> 00:02:42,560
that's devas engineer that's in charge

00:02:40,800 --> 00:02:43,040
of handling more the infrastructure

00:02:42,560 --> 00:02:44,800
problem

00:02:43,040 --> 00:02:46,879
and support engineers that do the lower

00:02:44,800 --> 00:02:47,920
level uh applicative work basically

00:02:46,879 --> 00:02:50,239
figuring out

00:02:47,920 --> 00:02:51,120
what type of bugs are happening in front

00:02:50,239 --> 00:02:53,440
of the customers

00:02:51,120 --> 00:02:55,040
and then fixing them on the fly not

00:02:53,440 --> 00:02:56,400
fixing them but mitigating them so the

00:02:55,040 --> 00:02:59,680
customers can continue

00:02:56,400 --> 00:03:02,720
working uh with application now

00:02:59,680 --> 00:03:05,280
the isis stack is kind of simple it's

00:03:02,720 --> 00:03:06,720
pretty straightforward it's a normal

00:03:05,280 --> 00:03:09,680
java spring application

00:03:06,720 --> 00:03:11,120
using jhipster on the bottom and it has

00:03:09,680 --> 00:03:12,959
a bunch of production services

00:03:11,120 --> 00:03:14,560
the transaction service which is what

00:03:12,959 --> 00:03:16,959
jamie is actually in charge of

00:03:14,560 --> 00:03:17,760
but the all of the engineers on all of

00:03:16,959 --> 00:03:19,840
the service

00:03:17,760 --> 00:03:21,920
services are rotating there's a rotation

00:03:19,840 --> 00:03:23,519
between the developers uh to kind of

00:03:21,920 --> 00:03:25,920
handle all the services at any given

00:03:23,519 --> 00:03:27,120
time so no developer is on call for like

00:03:25,920 --> 00:03:28,959
you know three weeks in a while or

00:03:27,120 --> 00:03:32,000
something on their own system

00:03:28,959 --> 00:03:36,159
uh in total inside kind of the

00:03:32,000 --> 00:03:36,959
part that uh jamie is well there are six

00:03:36,159 --> 00:03:39,280
services

00:03:36,959 --> 00:03:40,560
that the transaction service an external

00:03:39,280 --> 00:03:42,480
uh credit service

00:03:40,560 --> 00:03:44,000
fraud checking service and inventory

00:03:42,480 --> 00:03:44,720
service in charge of actually delivering

00:03:44,000 --> 00:03:47,040
the

00:03:44,720 --> 00:03:49,200
the goods um a billing system and a

00:03:47,040 --> 00:03:51,920
gateway in charge of coming allowing

00:03:49,200 --> 00:03:53,360
an entryway to all the other services in

00:03:51,920 --> 00:03:54,319
addition those obviously i'm monitoring

00:03:53,360 --> 00:03:56,400
stack of very

00:03:54,319 --> 00:03:59,439
straightforward the l key stack elastic

00:03:56,400 --> 00:04:03,360
search log stash and kibana for um

00:03:59,439 --> 00:04:06,480
visualization and in order to

00:04:03,360 --> 00:04:07,439
simplify everything for production

00:04:06,480 --> 00:04:09,360
reasons and for

00:04:07,439 --> 00:04:10,879
kind of the general maintenance of the

00:04:09,360 --> 00:04:12,400
application everything is containerized

00:04:10,879 --> 00:04:15,439
using docker.compose

00:04:12,400 --> 00:04:19,359
a pretty uh standard stack running on

00:04:15,439 --> 00:04:22,639
multiple servers in a data center that

00:04:19,359 --> 00:04:27,360
oasis is running in

00:04:22,639 --> 00:04:29,120
it is a proprietary center living inside

00:04:27,360 --> 00:04:30,960
the kind of the ecosystem of the system

00:04:29,120 --> 00:04:32,960
not a public or something like that

00:04:30,960 --> 00:04:34,960
uh but it's perfectly accessible for

00:04:32,960 --> 00:04:36,400
jamie and the other members of the team

00:04:34,960 --> 00:04:39,520
and to understand what's going on

00:04:36,400 --> 00:04:42,240
inside uh the system at any given time

00:04:39,520 --> 00:04:43,680
now if you're looking at an on-call

00:04:42,240 --> 00:04:46,720
situation in real life

00:04:43,680 --> 00:04:48,720
there's really always something going on

00:04:46,720 --> 00:04:50,240
so even in kind of comer nights there's

00:04:48,720 --> 00:04:52,479
always something that is

00:04:50,240 --> 00:04:54,000
kind of wrong there's always one piece

00:04:52,479 --> 00:04:55,759
that is not working completely as

00:04:54,000 --> 00:04:57,280
expected customers are complaining on

00:04:55,759 --> 00:04:57,840
things there's always kind of a lot of

00:04:57,280 --> 00:04:59,759
noise

00:04:57,840 --> 00:05:01,360
happening at any given point in time and

00:04:59,759 --> 00:05:04,880
if you've never been on call then this

00:05:01,360 --> 00:05:06,320
is um it's not the same in every company

00:05:04,880 --> 00:05:09,120
lots of companies have different types

00:05:06,320 --> 00:05:10,960
of on-call situations but

00:05:09,120 --> 00:05:12,479
some companies have more noise than

00:05:10,960 --> 00:05:14,800
others and

00:05:12,479 --> 00:05:15,919
jamie's company specifically does not

00:05:14,800 --> 00:05:18,560
have a well

00:05:15,919 --> 00:05:20,160
uh kind of a well thought out process

00:05:18,560 --> 00:05:22,639
for the on-call systems

00:05:20,160 --> 00:05:24,000
and so most nights are pretty noisy for

00:05:22,639 --> 00:05:26,639
jamie and jamie hates being

00:05:24,000 --> 00:05:27,199
on call now let's kind of break apart

00:05:26,639 --> 00:05:28,800
how

00:05:27,199 --> 00:05:30,560
this situation upon call looks like in

00:05:28,800 --> 00:05:31,759
real life first of all you've got devops

00:05:30,560 --> 00:05:33,600
engineers and they know

00:05:31,759 --> 00:05:35,440
system they're infrastructure people

00:05:33,600 --> 00:05:37,120
they're aware of how to

00:05:35,440 --> 00:05:38,720
kind of dive deep into into the

00:05:37,120 --> 00:05:40,720
infrastructure and figure out exactly

00:05:38,720 --> 00:05:41,600
what's going on inside each part of the

00:05:40,720 --> 00:05:44,639
infrastructure

00:05:41,600 --> 00:05:46,000
to break apart performance problems that

00:05:44,639 --> 00:05:48,080
are related to the infrastructure and

00:05:46,000 --> 00:05:49,600
not necessarily to the application

00:05:48,080 --> 00:05:51,039
they know how the configuration works

00:05:49,600 --> 00:05:52,000
how the deployment works some of them

00:05:51,039 --> 00:05:53,919
actually built

00:05:52,000 --> 00:05:55,840
all the cacd systems in place and so

00:05:53,919 --> 00:05:58,080
forth and to do that

00:05:55,840 --> 00:05:59,680
i'm sorry because of that they have a

00:05:58,080 --> 00:06:02,000
very good understanding

00:05:59,680 --> 00:06:03,360
of the system of the underlying system

00:06:02,000 --> 00:06:04,800
support engineers on the other hand

00:06:03,360 --> 00:06:06,639
mostly work with playbooks

00:06:04,800 --> 00:06:08,080
a lot of them are formal software

00:06:06,639 --> 00:06:08,880
developers or aspiring software

00:06:08,080 --> 00:06:12,400
developers

00:06:08,880 --> 00:06:14,160
and they want to um kind of

00:06:12,400 --> 00:06:15,759
move from customer to customers first as

00:06:14,160 --> 00:06:18,800
possible fix their problems

00:06:15,759 --> 00:06:20,800
and then go back to doing other things

00:06:18,800 --> 00:06:22,000
what they usually do is follow playbooks

00:06:20,800 --> 00:06:23,680
there are playbooks either

00:06:22,000 --> 00:06:25,440
written by other support engineers or

00:06:23,680 --> 00:06:26,880
developers in order to debug various

00:06:25,440 --> 00:06:29,680
common applicative problems

00:06:26,880 --> 00:06:31,120
uh in the application at any given time

00:06:29,680 --> 00:06:32,720
in addition it's worth mentioning that

00:06:31,120 --> 00:06:33,520
the environment itself just looking at

00:06:32,720 --> 00:06:35,280
the

00:06:33,520 --> 00:06:36,880
infrastructure is pretty noisy there's a

00:06:35,280 --> 00:06:38,800
lot of servers a lot of services a lot

00:06:36,880 --> 00:06:40,639
of things happening at any given time

00:06:38,800 --> 00:06:41,919
not to mention customers and the account

00:06:40,639 --> 00:06:42,720
executive is in charge of those

00:06:41,919 --> 00:06:44,319
customers

00:06:42,720 --> 00:06:45,840
calling all the time sending slack

00:06:44,319 --> 00:06:47,440
messages and kind of knowing everybody

00:06:45,840 --> 00:06:49,759
in order to make sure

00:06:47,440 --> 00:06:52,080
the application works as expected and

00:06:49,759 --> 00:06:54,319
they receive the bonuses of the fb

00:06:52,080 --> 00:06:57,440
and in addition you have to understand

00:06:54,319 --> 00:06:59,599
that whenever there is even a remotely

00:06:57,440 --> 00:07:00,560
uh complex piece of application logic

00:06:59,599 --> 00:07:03,680
that might cause

00:07:00,560 --> 00:07:06,800
some really bad problems uh

00:07:03,680 --> 00:07:07,840
the immediate action the action item is

00:07:06,800 --> 00:07:09,599
calling developers

00:07:07,840 --> 00:07:11,520
developers will be the ones in charge of

00:07:09,599 --> 00:07:13,039
actually debugging complex application

00:07:11,520 --> 00:07:14,319
logic issues not the infrastructure

00:07:13,039 --> 00:07:15,919
people the developers engineers

00:07:14,319 --> 00:07:17,360
and not the support engineers the

00:07:15,919 --> 00:07:20,240
developers alone

00:07:17,360 --> 00:07:22,080
now let's assume that for some reason

00:07:20,240 --> 00:07:23,039
during this specific night a while

00:07:22,080 --> 00:07:24,960
problem appeals

00:07:23,039 --> 00:07:27,280
some transaction is failing support

00:07:24,960 --> 00:07:29,199
engineers are actively trying to debug

00:07:27,280 --> 00:07:31,120
the problem figuring out what's going on

00:07:29,199 --> 00:07:33,440
and continuously fail

00:07:31,120 --> 00:07:34,400
in addition devops engineers cannot

00:07:33,440 --> 00:07:36,319
really

00:07:34,400 --> 00:07:38,160
see anything in the monitoring systems

00:07:36,319 --> 00:07:38,880
it's kind of hard to understand what is

00:07:38,160 --> 00:07:42,000
going on

00:07:38,880 --> 00:07:42,639
it's not super evident what exactly is

00:07:42,000 --> 00:07:46,160
the problem

00:07:42,639 --> 00:07:48,240
we just know that the customer currently

00:07:46,160 --> 00:07:49,759
reporting the ticket is reporting that

00:07:48,240 --> 00:07:54,080
there's a problem at hand

00:07:49,759 --> 00:07:57,360
and the uh general system seems to be in

00:07:54,080 --> 00:08:00,240
fine health this is a core tenant

00:07:57,360 --> 00:08:01,360
or a prime example if you will of an

00:08:00,240 --> 00:08:03,680
application

00:08:01,360 --> 00:08:04,960
logic problem also the people think so

00:08:03,680 --> 00:08:07,919
who they're gonna call

00:08:04,960 --> 00:08:08,720
jamie now i'd like to kind of take a

00:08:07,919 --> 00:08:10,319
step back

00:08:08,720 --> 00:08:12,000
before we dive into the actual problem

00:08:10,319 --> 00:08:14,000
and talk about observability

00:08:12,000 --> 00:08:15,759
observability is a is a term being

00:08:14,000 --> 00:08:17,039
thrown around quite a lot recently and

00:08:15,759 --> 00:08:20,720
i'd like to focus on

00:08:17,039 --> 00:08:23,440
how it's uh on how we can define

00:08:20,720 --> 00:08:24,560
so or an observable system is one that

00:08:23,440 --> 00:08:26,720
that

00:08:24,560 --> 00:08:28,160
encompasses the concept of observability

00:08:26,720 --> 00:08:30,080
which is which can be defined as the

00:08:28,160 --> 00:08:31,599
ability to understand how all systems

00:08:30,080 --> 00:08:33,680
work on the inside

00:08:31,599 --> 00:08:36,000
without shipping new code and without

00:08:33,680 --> 00:08:39,360
shipping new code here is the core part

00:08:36,000 --> 00:08:41,279
because we have a set of information

00:08:39,360 --> 00:08:43,360
that we can learn about our systems the

00:08:41,279 --> 00:08:46,080
kind of the the story our systems

00:08:43,360 --> 00:08:48,480
tells us about itself that is composed

00:08:46,080 --> 00:08:49,040
of the metrics in our apms the logs in

00:08:48,480 --> 00:08:52,399
our log

00:08:49,040 --> 00:08:54,560
aggregators and analyzers um simply the

00:08:52,399 --> 00:08:57,680
std out of the application

00:08:54,560 --> 00:09:00,320
perhaps some log files people are

00:08:57,680 --> 00:09:01,279
dumping into some other tools you have

00:09:00,320 --> 00:09:03,680
maybe

00:09:01,279 --> 00:09:04,320
in your environments that tell you other

00:09:03,680 --> 00:09:06,080
things

00:09:04,320 --> 00:09:07,760
but the bottom line it is a bunch of

00:09:06,080 --> 00:09:10,000
information that was defined before the

00:09:07,760 --> 00:09:12,800
application was thrown into production

00:09:10,000 --> 00:09:13,760
um and expected to answer all possible

00:09:12,800 --> 00:09:16,080
questions

00:09:13,760 --> 00:09:17,440
inside the current context this is

00:09:16,080 --> 00:09:18,880
obviously as any

00:09:17,440 --> 00:09:21,120
you know senior enough engineer will

00:09:18,880 --> 00:09:22,320
tell you not enough sometimes there are

00:09:21,120 --> 00:09:26,240
bugs that are just

00:09:22,320 --> 00:09:28,480
very how to detect whatever even given

00:09:26,240 --> 00:09:30,080
all the information you already have and

00:09:28,480 --> 00:09:32,959
so observable systems

00:09:30,080 --> 00:09:33,600
are systems that are built to solve this

00:09:32,959 --> 00:09:36,160
problem

00:09:33,600 --> 00:09:38,000
there are systems that uh they tell the

00:09:36,160 --> 00:09:40,399
full story as much as possible to the

00:09:38,000 --> 00:09:42,640
people trying to debug them

00:09:40,399 --> 00:09:45,440
now let's focus for a second on some

00:09:42,640 --> 00:09:46,959
things your tools actually do tell you

00:09:45,440 --> 00:09:48,480
first and foremost there are logs and

00:09:46,959 --> 00:09:51,839
logs are um

00:09:48,480 --> 00:09:54,800
kind of uh as the as the names just

00:09:51,839 --> 00:09:56,640
on a long list of things that happen

00:09:54,800 --> 00:09:58,000
inside your application any given time

00:09:56,640 --> 00:10:00,000
and then kind of tell the story of

00:09:58,000 --> 00:10:01,760
what's going on they will tell you what

00:10:00,000 --> 00:10:04,079
is going on at any given point

00:10:01,760 --> 00:10:05,440
at a specific machine or a specific

00:10:04,079 --> 00:10:08,160
service depending on the

00:10:05,440 --> 00:10:09,279
level of granularity that you'd like to

00:10:08,160 --> 00:10:12,000
like to dive into

00:10:09,279 --> 00:10:12,720
and in in many cases they are just

00:10:12,000 --> 00:10:14,320
enough

00:10:12,720 --> 00:10:16,560
in many cases they tell you exactly what

00:10:14,320 --> 00:10:19,519
happened on a specific problematic

00:10:16,560 --> 00:10:21,279
place and then you are able to move

00:10:19,519 --> 00:10:22,640
forward and debug it just based on the

00:10:21,279 --> 00:10:24,000
logs the problem is here

00:10:22,640 --> 00:10:26,480
you look at the logs and you can see

00:10:24,000 --> 00:10:28,880
what happens a lot of more complicated

00:10:26,480 --> 00:10:30,240
logging analyzers and um even the even

00:10:28,880 --> 00:10:32,480
the simpler ones today allow you to

00:10:30,240 --> 00:10:35,279
query the logs in smart ways

00:10:32,480 --> 00:10:37,120
and and fast in order to almost

00:10:35,279 --> 00:10:38,399
surgically find a specific piece of

00:10:37,120 --> 00:10:41,440
information you'd like

00:10:38,399 --> 00:10:44,000
but remember these logs are as again by

00:10:41,440 --> 00:10:45,680
definition

00:10:44,000 --> 00:10:47,120
they are limited to the logs you've

00:10:45,680 --> 00:10:47,920
added to your application while

00:10:47,120 --> 00:10:50,240
developing it

00:10:47,920 --> 00:10:51,839
and sometimes they are indeed not enough

00:10:50,240 --> 00:10:53,120
in addition there's another sort of

00:10:51,839 --> 00:10:55,360
piece of information usually

00:10:53,120 --> 00:10:56,800
quantitative called it metrics these are

00:10:55,360 --> 00:10:59,120
the metrics that

00:10:56,800 --> 00:11:00,000
of the system your application is

00:10:59,120 --> 00:11:03,279
running on

00:11:00,000 --> 00:11:04,720
this can be stuff like cpu usage how

00:11:03,279 --> 00:11:07,040
much memory is used

00:11:04,720 --> 00:11:08,160
um what's the load on a specific machine

00:11:07,040 --> 00:11:11,120
at any given time and

00:11:08,160 --> 00:11:13,200
and so forth these tell us how the

00:11:11,120 --> 00:11:13,760
machines or applications are running on

00:11:13,200 --> 00:11:15,680
field

00:11:13,760 --> 00:11:16,800
they tell us um whether we need to add

00:11:15,680 --> 00:11:18,399
more machines you know we need to add

00:11:16,800 --> 00:11:20,959
capacitor specific machine or

00:11:18,399 --> 00:11:22,800
and and so forth and together the logs

00:11:20,959 --> 00:11:24,480
and the id metrics themselves tell

00:11:22,800 --> 00:11:26,079
a large part of the story what the

00:11:24,480 --> 00:11:26,640
application is doing at any given point

00:11:26,079 --> 00:11:28,160
in time

00:11:26,640 --> 00:11:29,760
and how the machine that is running the

00:11:28,160 --> 00:11:30,800
application is filling at any given

00:11:29,760 --> 00:11:32,320
point in time

00:11:30,800 --> 00:11:33,760
in addition most companies instrument

00:11:32,320 --> 00:11:35,680
what are called service metrics

00:11:33,760 --> 00:11:37,760
sometimes business metrics sometimes

00:11:35,680 --> 00:11:38,720
application metrics it varies on the

00:11:37,760 --> 00:11:40,800
company but

00:11:38,720 --> 00:11:42,480
what i mean when i say service medics

00:11:40,800 --> 00:11:45,360
are things the customer

00:11:42,480 --> 00:11:46,880
feels so this is what our customer feels

00:11:45,360 --> 00:11:48,880
our application is like how

00:11:46,880 --> 00:11:50,480
they're experiencing it and these are

00:11:48,880 --> 00:11:52,320
things like um

00:11:50,480 --> 00:11:53,519
what is happening with specific requests

00:11:52,320 --> 00:11:55,760
to the application

00:11:53,519 --> 00:11:57,440
um if a specific process is happening

00:11:55,760 --> 00:11:59,200
inside the application how long does it

00:11:57,440 --> 00:11:59,760
take to happen what is the value that it

00:11:59,200 --> 00:12:01,600
gives

00:11:59,760 --> 00:12:03,440
does it work correctly does it does does

00:12:01,600 --> 00:12:06,639
it not work correctly and so forth

00:12:03,440 --> 00:12:07,920
basically um what you might write the

00:12:06,639 --> 00:12:10,800
service level agreement

00:12:07,920 --> 00:12:11,680
uh with your customers in addition when

00:12:10,800 --> 00:12:13,920
you're looking at

00:12:11,680 --> 00:12:14,720
developers that are trying to better

00:12:13,920 --> 00:12:16,880
understand

00:12:14,720 --> 00:12:18,320
this kind of request cycle of an

00:12:16,880 --> 00:12:20,720
application a lot of

00:12:18,320 --> 00:12:21,360
uh people today use distributed tracers

00:12:20,720 --> 00:12:23,839
things like

00:12:21,360 --> 00:12:25,360
zipkin jaeger and so forth they tell you

00:12:23,839 --> 00:12:29,279
what happens after an api

00:12:25,360 --> 00:12:29,600
call happen so you have tracers that let

00:12:29,279 --> 00:12:32,480
you

00:12:29,600 --> 00:12:34,320
follow kind of the path down the various

00:12:32,480 --> 00:12:36,079
api calls that are being called on

00:12:34,320 --> 00:12:37,920
stream so this api called

00:12:36,079 --> 00:12:39,680
the other api call and that that

00:12:37,920 --> 00:12:41,839
specific api quality is through

00:12:39,680 --> 00:12:42,880
this time to respawn and inside the

00:12:41,839 --> 00:12:46,000
trace you can see

00:12:42,880 --> 00:12:48,320
how much time each part of each type of

00:12:46,000 --> 00:12:51,760
process took in order to

00:12:48,320 --> 00:12:53,440
finish the kind of final output of the

00:12:51,760 --> 00:12:55,120
of the api call and you can try and

00:12:53,440 --> 00:12:58,160
debug which process takes the longest

00:12:55,120 --> 00:13:00,880
and then attack it one piece at a time

00:12:58,160 --> 00:13:01,680
in addition uh we have profilers i'm

00:13:00,880 --> 00:13:04,240
talking about

00:13:01,680 --> 00:13:05,360
the profilers have different uses

00:13:04,240 --> 00:13:07,040
different level of

00:13:05,360 --> 00:13:08,560
abstraction sorry inside your

00:13:07,040 --> 00:13:10,399
application what i'm talking about of

00:13:08,560 --> 00:13:11,839
things like j profiler for example that

00:13:10,399 --> 00:13:15,120
allow you to profile

00:13:11,839 --> 00:13:16,639
um the performance of the jvm or you

00:13:15,120 --> 00:13:17,120
know one layer of abstraction in your

00:13:16,639 --> 00:13:19,120
stack

00:13:17,120 --> 00:13:20,399
and they're very useful for kind of

00:13:19,120 --> 00:13:22,240
finding difficult

00:13:20,399 --> 00:13:23,760
performance problems things that are not

00:13:22,240 --> 00:13:25,519
obvious from the machine

00:13:23,760 --> 00:13:26,800
running the application or the logs the

00:13:25,519 --> 00:13:28,880
application itself

00:13:26,800 --> 00:13:30,240
but are kind of situated in a middle

00:13:28,880 --> 00:13:33,440
layer of sort

00:13:30,240 --> 00:13:35,200
they are they allow you to

00:13:33,440 --> 00:13:37,200
kind of fine-tune your understanding of

00:13:35,200 --> 00:13:39,199
the application's performance

00:13:37,200 --> 00:13:40,560
there's also another subset of tools and

00:13:39,199 --> 00:13:42,079
debuggers now have

00:13:40,560 --> 00:13:43,920
many different names across many

00:13:42,079 --> 00:13:46,000
different languages

00:13:43,920 --> 00:13:47,680
frameworks platforms what i'm talking

00:13:46,000 --> 00:13:49,120
about are your traditional debuggers

00:13:47,680 --> 00:13:50,480
something like you might have inside

00:13:49,120 --> 00:13:52,720
intellij or eclipse

00:13:50,480 --> 00:13:54,480
they allow you to step in step out step

00:13:52,720 --> 00:13:56,639
over different steps of the application

00:13:54,480 --> 00:13:58,160
and debug them breakpoint by breakpoint

00:13:56,639 --> 00:13:59,839
basically walking through different

00:13:58,160 --> 00:14:00,959
steps of the application process in

00:13:59,839 --> 00:14:04,160
order to understand

00:14:00,959 --> 00:14:05,120
what is going on and basically um kind

00:14:04,160 --> 00:14:07,279
of

00:14:05,120 --> 00:14:08,480
uh let's say follow the path of the

00:14:07,279 --> 00:14:10,880
application and see

00:14:08,480 --> 00:14:12,320
how it works like in real life and

00:14:10,880 --> 00:14:13,920
there's one more set of tools that i

00:14:12,320 --> 00:14:15,760
like to talk about which are exception

00:14:13,920 --> 00:14:17,120
monitoring exception handling

00:14:15,760 --> 00:14:18,480
there's a bunch of different names for

00:14:17,120 --> 00:14:20,000
them what i'm talking about are tools

00:14:18,480 --> 00:14:22,000
like century for example

00:14:20,000 --> 00:14:25,040
and uh a lot of those on the market

00:14:22,000 --> 00:14:28,560
today what they do is they allow you to

00:14:25,040 --> 00:14:29,839
look at the exceptions thrown by your

00:14:28,560 --> 00:14:30,720
applications and then reach the

00:14:29,839 --> 00:14:32,399
information

00:14:30,720 --> 00:14:34,560
basically explore what happens when

00:14:32,399 --> 00:14:35,920
something out of the ordinary i an

00:14:34,560 --> 00:14:36,560
exception happens inside your

00:14:35,920 --> 00:14:39,839
application

00:14:36,560 --> 00:14:42,560
and debug it a calling now

00:14:39,839 --> 00:14:44,240
there's actually a bit of a problem when

00:14:42,560 --> 00:14:45,680
you talk about observability in general

00:14:44,240 --> 00:14:47,440
so we talked about the fact that

00:14:45,680 --> 00:14:48,720
observability can be defined as the

00:14:47,440 --> 00:14:50,720
ability to understand

00:14:48,720 --> 00:14:52,639
how your systems work on the inside

00:14:50,720 --> 00:14:55,519
without shipping new code

00:14:52,639 --> 00:14:57,519
you might notice that as i talked as i

00:14:55,519 --> 00:14:59,279
just mentioned as i ran through the

00:14:57,519 --> 00:15:01,519
all of the tools it might be evident

00:14:59,279 --> 00:15:04,000
that some things actually require

00:15:01,519 --> 00:15:05,360
shipping new code some things are not

00:15:04,000 --> 00:15:08,399
that easy to debug

00:15:05,360 --> 00:15:10,160
without shipping new code and this is as

00:15:08,399 --> 00:15:12,160
again any developer might tell you a

00:15:10,160 --> 00:15:13,839
pretty tedious process so

00:15:12,160 --> 00:15:16,240
consider the situation where there's a

00:15:13,839 --> 00:15:17,839
bug and you have to deploy a hotfix

00:15:16,240 --> 00:15:20,480
in many modern organization you have

00:15:17,839 --> 00:15:23,279
cicd pipelines some of them take 10

00:15:20,480 --> 00:15:25,120
20 30 minutes an hour two hours

00:15:23,279 --> 00:15:26,079
depending on the complexity of the cicd

00:15:25,120 --> 00:15:28,480
pipeline

00:15:26,079 --> 00:15:31,279
some companies don't even have cicd

00:15:28,480 --> 00:15:35,120
pipelines they have

00:15:31,279 --> 00:15:37,440
change scripts and various ways to

00:15:35,120 --> 00:15:39,120
deploy stuff into production sometimes

00:15:37,440 --> 00:15:40,720
in cadences that are rather long so

00:15:39,120 --> 00:15:41,199
maybe every two weeks or something like

00:15:40,720 --> 00:15:44,160
that

00:15:41,199 --> 00:15:45,040
so deploying a hot fix might uh be a bit

00:15:44,160 --> 00:15:47,199
of a problem

00:15:45,040 --> 00:15:48,639
so if you need to ship new code the

00:15:47,199 --> 00:15:50,000
amount of time it takes you to

00:15:48,639 --> 00:15:50,959
understand what's going on inside your

00:15:50,000 --> 00:15:53,920
application

00:15:50,959 --> 00:15:55,120
dramatically increases and i'd like to

00:15:53,920 --> 00:15:57,199
kind of

00:15:55,120 --> 00:15:58,639
dive in on the subset of things your

00:15:57,199 --> 00:16:00,560
tools don't tell you

00:15:58,639 --> 00:16:02,079
and this is something that is rather

00:16:00,560 --> 00:16:03,759
hard to explain

00:16:02,079 --> 00:16:05,279
in a general term i'm going to try

00:16:03,759 --> 00:16:06,000
because we have a limited time inside

00:16:05,279 --> 00:16:08,000
this

00:16:06,000 --> 00:16:09,600
during this talk but i'd like to kind of

00:16:08,000 --> 00:16:11,680
enumerate a few

00:16:09,600 --> 00:16:13,360
places where you logs your metrics your

00:16:11,680 --> 00:16:14,240
profilers basically some of your tools

00:16:13,360 --> 00:16:16,399
might fail you

00:16:14,240 --> 00:16:18,560
and they might not completely catch the

00:16:16,399 --> 00:16:20,720
problem while your customer is a

00:16:18,560 --> 00:16:22,720
complaint so first and foremost the

00:16:20,720 --> 00:16:25,360
incorrect application state

00:16:22,720 --> 00:16:27,920
sometimes you write code you write tests

00:16:25,360 --> 00:16:30,959
you do all the best practices and still

00:16:27,920 --> 00:16:33,680
the state the application

00:16:30,959 --> 00:16:34,240
ended up in is wrong for some reason

00:16:33,680 --> 00:16:36,560
maybe

00:16:34,240 --> 00:16:38,160
there's a mismatch between what the

00:16:36,560 --> 00:16:39,360
application is supposed to do and how

00:16:38,160 --> 00:16:41,279
you wrote the code because of an

00:16:39,360 --> 00:16:42,959
incorrect product specification

00:16:41,279 --> 00:16:44,959
again not not at all your fault but the

00:16:42,959 --> 00:16:47,759
customer from their perspective

00:16:44,959 --> 00:16:49,279
is experiencing a problem and the

00:16:47,759 --> 00:16:50,160
customer will tell you that there's a

00:16:49,279 --> 00:16:52,399
problem there

00:16:50,160 --> 00:16:53,360
but your test will pass the code

00:16:52,399 --> 00:16:55,360
apparently works

00:16:53,360 --> 00:16:58,079
the machine works correctly but from the

00:16:55,360 --> 00:16:59,600
customer's perspective there's a problem

00:16:58,079 --> 00:17:01,040
and this is obviously something you

00:16:59,600 --> 00:17:02,399
choose will not allow you to the fact

00:17:01,040 --> 00:17:03,360
that there's an incorrect application

00:17:02,399 --> 00:17:04,799
state though

00:17:03,360 --> 00:17:06,880
because again it's it's very hard to

00:17:04,799 --> 00:17:08,799
it's business logic um

00:17:06,880 --> 00:17:10,799
but it's it's it's still a problem that

00:17:08,799 --> 00:17:12,880
your customers might complain with at

00:17:10,799 --> 00:17:14,000
any given time in addition there's the

00:17:12,880 --> 00:17:16,720
whole concept of

00:17:14,000 --> 00:17:18,000
code level quantitative data so assume

00:17:16,720 --> 00:17:20,000
some machine

00:17:18,000 --> 00:17:22,000
went out of memory and just before it

00:17:20,000 --> 00:17:23,199
went out of memory some data structure

00:17:22,000 --> 00:17:25,520
exploded in memory

00:17:23,199 --> 00:17:25,520
sorry

00:17:26,480 --> 00:17:30,400
you will not know what happened with

00:17:28,480 --> 00:17:32,080
that structure over time you will know

00:17:30,400 --> 00:17:34,000
that there was an out of memory arrow

00:17:32,080 --> 00:17:34,400
you will see the memory mirror spiking

00:17:34,000 --> 00:17:35,760
up

00:17:34,400 --> 00:17:37,600
maybe you would even have the time to

00:17:35,760 --> 00:17:39,600
restart the machine before that happens

00:17:37,600 --> 00:17:41,280
but it would be hard to detect the exact

00:17:39,600 --> 00:17:42,080
dagger structural memory that exploded

00:17:41,280 --> 00:17:44,320
over time

00:17:42,080 --> 00:17:45,760
it would be very hard to understand that

00:17:44,320 --> 00:17:47,760
this was the specific

00:17:45,760 --> 00:17:49,679
thing that caused the out of memory or

00:17:47,760 --> 00:17:51,440
unless you have logs that lead right up

00:17:49,679 --> 00:17:52,320
to that moment and show you the specific

00:17:51,440 --> 00:17:54,720
thing that happens

00:17:52,320 --> 00:17:56,320
many applications do many applications

00:17:54,720 --> 00:17:58,559
don't

00:17:56,320 --> 00:18:00,080
another point of it's not really a

00:17:58,559 --> 00:18:02,480
programming all but it's something that

00:18:00,080 --> 00:18:04,080
happens a lot is swallowed exception so

00:18:02,480 --> 00:18:05,600
you have an exception that was thrown

00:18:04,080 --> 00:18:06,400
and caught and there's no indication to

00:18:05,600 --> 00:18:08,400
it in the

00:18:06,400 --> 00:18:09,840
in the in the tools if you have

00:18:08,400 --> 00:18:13,520
exception monitoring uh

00:18:09,840 --> 00:18:15,520
situ solutions um usually

00:18:13,520 --> 00:18:16,640
again it depends i don't want to kind of

00:18:15,520 --> 00:18:18,480
uh

00:18:16,640 --> 00:18:20,160
encompass but some of them still have

00:18:18,480 --> 00:18:21,039
missing data with stuff with swallowed

00:18:20,160 --> 00:18:24,240
exceptions

00:18:21,039 --> 00:18:24,559
um but the the core the core problem is

00:18:24,240 --> 00:18:27,360
that

00:18:24,559 --> 00:18:28,000
if the an exception was indeed thrown

00:18:27,360 --> 00:18:30,160
and caught

00:18:28,000 --> 00:18:31,440
and you're looking at the logs the the

00:18:30,160 --> 00:18:32,240
normal place in order to understand

00:18:31,440 --> 00:18:34,320
what's going on

00:18:32,240 --> 00:18:35,360
you will not see them because there was

00:18:34,320 --> 00:18:36,960
nothing tall

00:18:35,360 --> 00:18:38,400
nothing was said by the application when

00:18:36,960 --> 00:18:39,840
the exception was

00:18:38,400 --> 00:18:41,600
was thrown and caught and nothing was

00:18:39,840 --> 00:18:42,080
locked though it's a very confusing

00:18:41,600 --> 00:18:43,280
situation

00:18:42,080 --> 00:18:44,559
something we look at the logs and it's

00:18:43,280 --> 00:18:45,120
kind of difficult to understand what's

00:18:44,559 --> 00:18:47,120
going on

00:18:45,120 --> 00:18:49,039
because some exception was thrown and

00:18:47,120 --> 00:18:51,200
caught without mention

00:18:49,039 --> 00:18:52,880
one extra thing is the the current

00:18:51,200 --> 00:18:54,320
practice today of you know delivering

00:18:52,880 --> 00:18:56,000
everything as a service so

00:18:54,320 --> 00:18:57,679
if an api you're relying on and

00:18:56,000 --> 00:18:58,080
everybody's relying on some sort of api

00:18:57,679 --> 00:18:59,120
today

00:18:58,080 --> 00:19:01,440
especially if you're working with

00:18:59,120 --> 00:19:03,840
billing um

00:19:01,440 --> 00:19:06,000
billing system or other external systems

00:19:03,840 --> 00:19:07,360
and they have apis that you call or use

00:19:06,000 --> 00:19:09,039
or rely on

00:19:07,360 --> 00:19:10,720
they might misbehave for reasons that

00:19:09,039 --> 00:19:12,799
are completely out of your control

00:19:10,720 --> 00:19:14,799
and your application will only know that

00:19:12,799 --> 00:19:16,640
these apis are misbehaving but

00:19:14,799 --> 00:19:18,720
you will not have a way of debugging

00:19:16,640 --> 00:19:20,080
them in real time they're misbehaving

00:19:18,720 --> 00:19:21,600
you can't know what's going on in them

00:19:20,080 --> 00:19:22,880
maybe you can see the response but you

00:19:21,600 --> 00:19:24,880
don't know what's happening out

00:19:22,880 --> 00:19:26,640
behind the scene it's another person's

00:19:24,880 --> 00:19:28,559
api but relying on it which

00:19:26,640 --> 00:19:30,960
again from the customer's perspective is

00:19:28,559 --> 00:19:32,400
mean there's a problem here

00:19:30,960 --> 00:19:34,400
one extra thing that's really important

00:19:32,400 --> 00:19:36,240
to mention is unexpected users flows

00:19:34,400 --> 00:19:38,160
which is what happens when a user ends

00:19:36,240 --> 00:19:39,919
up in a state you did not expect

00:19:38,160 --> 00:19:41,520
the user to so those incorrect

00:19:39,919 --> 00:19:43,440
application state which can result from

00:19:41,520 --> 00:19:44,080
for example product specifications going

00:19:43,440 --> 00:19:46,559
wrong

00:19:44,080 --> 00:19:47,600
uh or maybe your tests are not covering

00:19:46,559 --> 00:19:49,280
the specific uh

00:19:47,600 --> 00:19:50,960
edge case that is that you know

00:19:49,280 --> 00:19:52,480
currently happen what i'm talking about

00:19:50,960 --> 00:19:54,400
are more are things like

00:19:52,480 --> 00:19:55,919
things you did not code for basically

00:19:54,400 --> 00:19:56,799
things you did not expect the user to

00:19:55,919 --> 00:19:58,160
ever get to

00:19:56,799 --> 00:20:00,559
maybe they got stuck in a world

00:19:58,160 --> 00:20:01,600
registration screen maybe they went into

00:20:00,559 --> 00:20:03,280
a section they didn't

00:20:01,600 --> 00:20:05,440
they weren't suspected to a while back

00:20:03,280 --> 00:20:08,240
there was a problem with github where

00:20:05,440 --> 00:20:09,280
some user was able to access the session

00:20:08,240 --> 00:20:10,799
of another user

00:20:09,280 --> 00:20:12,799
which means that you would log in to get

00:20:10,799 --> 00:20:13,039
up and see somebody else's profile this

00:20:12,799 --> 00:20:15,360
is

00:20:13,039 --> 00:20:17,280
obviously an unexpected user flow and

00:20:15,360 --> 00:20:18,080
it's sometimes hard to understand

00:20:17,280 --> 00:20:20,159
because

00:20:18,080 --> 00:20:21,520
the user has a user id but they're

00:20:20,159 --> 00:20:24,080
looking at somebody

00:20:21,520 --> 00:20:25,679
else's repository so you get what i'm

00:20:24,080 --> 00:20:28,799
saying i assume it's not

00:20:25,679 --> 00:20:30,880
super easy to kind of cross and ref

00:20:28,799 --> 00:20:32,799
and kind of match what exactly is going

00:20:30,880 --> 00:20:34,480
on here just a weird behavior when

00:20:32,799 --> 00:20:35,919
you're looking at the logs it will just

00:20:34,480 --> 00:20:38,400
appear wheel

00:20:35,919 --> 00:20:40,400
again difficult to uh instrument for

00:20:38,400 --> 00:20:42,720
difficult to test for difficult to lock

00:20:40,400 --> 00:20:44,480
difficult to look for one extra thing

00:20:42,720 --> 00:20:45,840
that is this trick is races and

00:20:44,480 --> 00:20:46,960
sometimes you have races on the

00:20:45,840 --> 00:20:48,960
infrastructure level

00:20:46,960 --> 00:20:50,480
that races in the application level the

00:20:48,960 --> 00:20:51,120
bottom line is there are some resources

00:20:50,480 --> 00:20:54,400
people

00:20:51,120 --> 00:20:55,520
um sorry there is some way so some other

00:20:54,400 --> 00:20:57,520
things are fighting

00:20:55,520 --> 00:20:58,559
over and because of the nature of the

00:20:57,520 --> 00:21:00,640
condition in

00:20:58,559 --> 00:21:02,000
race conditions they're not often

00:21:00,640 --> 00:21:04,000
non-deterministic which

00:21:02,000 --> 00:21:05,440
means that the same request might

00:21:04,000 --> 00:21:08,240
trigger differently

00:21:05,440 --> 00:21:09,679
different um different responses from

00:21:08,240 --> 00:21:10,640
the resources or create a different

00:21:09,679 --> 00:21:13,039
state if it's a

00:21:10,640 --> 00:21:14,480
some sort of database call or something

00:21:13,039 --> 00:21:16,400
and the main

00:21:14,480 --> 00:21:17,679
issue with that is that you will just

00:21:16,400 --> 00:21:19,039
see incorrect

00:21:17,679 --> 00:21:21,280
information coming back from those

00:21:19,039 --> 00:21:21,679
applications because the resource has a

00:21:21,280 --> 00:21:24,240
race

00:21:21,679 --> 00:21:26,559
going on in it but it will be how to

00:21:24,240 --> 00:21:28,640
identify exactly what's going on

00:21:26,559 --> 00:21:29,760
that causes this race you will just see

00:21:28,640 --> 00:21:31,840
a race

00:21:29,760 --> 00:21:33,120
and one last thing is i kind of refer to

00:21:31,840 --> 00:21:34,640
it inside a race conditions

00:21:33,120 --> 00:21:36,559
point but concurrency and scale think

00:21:34,640 --> 00:21:38,640
about what happens when your application

00:21:36,559 --> 00:21:40,240
that you're usually developing um

00:21:38,640 --> 00:21:41,679
against your own local machine or maybe

00:21:40,240 --> 00:21:43,679
a simple staging environment

00:21:41,679 --> 00:21:44,960
is then replicated across hundreds of

00:21:43,679 --> 00:21:46,960
services

00:21:44,960 --> 00:21:48,400
how does it behave when there's some

00:21:46,960 --> 00:21:50,400
bottleneck inside

00:21:48,400 --> 00:21:51,840
the infrastructure how does it behave

00:21:50,400 --> 00:21:53,360
when something

00:21:51,840 --> 00:21:54,960
that when it has to wait for something

00:21:53,360 --> 00:21:56,559
for too long how does it behave

00:21:54,960 --> 00:21:58,720
when the data structures in it are

00:21:56,559 --> 00:22:00,000
replicated across multiple replicas

00:21:58,720 --> 00:22:02,480
lots of different things that can go

00:22:00,000 --> 00:22:03,679
wrong that are again by design you

00:22:02,480 --> 00:22:05,679
usually log for the

00:22:03,679 --> 00:22:07,600
application you wrote and not for the

00:22:05,679 --> 00:22:09,840
replications that your application

00:22:07,600 --> 00:22:10,880
will run out eventually which can cause

00:22:09,840 --> 00:22:12,960
either the logs

00:22:10,880 --> 00:22:15,120
to look weird to not be indicative when

00:22:12,960 --> 00:22:17,760
you look at them when replicated

00:22:15,120 --> 00:22:19,440
or to just appear confusing in a real

00:22:17,760 --> 00:22:21,039
life situation

00:22:19,440 --> 00:22:22,480
now i talked a lot about all the things

00:22:21,039 --> 00:22:23,919
that can go wrong other things

00:22:22,480 --> 00:22:26,320
well i want to show you a small demo

00:22:23,919 --> 00:22:28,480
that just offers a great indication

00:22:26,320 --> 00:22:29,679
of how this actually looks like in

00:22:28,480 --> 00:22:31,760
practice and you can see

00:22:29,679 --> 00:22:32,960
my amazing the motivational poster which

00:22:31,760 --> 00:22:35,919
i'm really proud of

00:22:32,960 --> 00:22:37,600
uh that is the intro for this demo so

00:22:35,919 --> 00:22:40,240
let's take a look at

00:22:37,600 --> 00:22:41,120
my kibana which again i'd like to remind

00:22:40,240 --> 00:22:44,320
you uh

00:22:41,120 --> 00:22:47,360
is is

00:22:44,320 --> 00:22:49,679
how the monitoring stack for us is is

00:22:47,360 --> 00:22:52,159
built there's a kibana inside of it

00:22:49,679 --> 00:22:52,960
i'm going to go into log trails and

00:22:52,159 --> 00:22:55,760
let's assume

00:22:52,960 --> 00:22:57,440
for the sake of discussion that we know

00:22:55,760 --> 00:22:58,720
the idea of the problematic user because

00:22:57,440 --> 00:23:01,799
they submitted a ticket

00:22:58,720 --> 00:23:03,120
and i know that that user's uh id is

00:23:01,799 --> 00:23:05,520
00:23:03,120 --> 00:23:07,120
and let's go into kibana and look in the

00:23:05,520 --> 00:23:09,840
log trail which is the way

00:23:07,120 --> 00:23:10,480
kind of just a log stream um coming from

00:23:09,840 --> 00:23:12,799
inside is it

00:23:10,480 --> 00:23:13,760
four three one six two four and we can

00:23:12,799 --> 00:23:16,400
see that

00:23:13,760 --> 00:23:17,039
there are a bunch of different logs for

00:23:16,400 --> 00:23:20,080
three one

00:23:17,039 --> 00:23:21,760
six two four uh sorry

00:23:20,080 --> 00:23:23,840
and you can see there was about let's

00:23:21,760 --> 00:23:26,880
see one two

00:23:23,840 --> 00:23:30,240
three requests roughly

00:23:26,880 --> 00:23:31,840
in the past uh hour or so

00:23:30,240 --> 00:23:33,679
now when you look at the information

00:23:31,840 --> 00:23:36,000
you're trying to kind of follow the path

00:23:33,679 --> 00:23:37,440
uh you see that there are a bunch of

00:23:36,000 --> 00:23:39,679
different services obviously you know

00:23:37,440 --> 00:23:41,039
the system you kind of know the flows

00:23:39,679 --> 00:23:43,360
but you're trying to follow the specific

00:23:41,039 --> 00:23:45,440
request that happens you have a

00:23:43,360 --> 00:23:46,720
general timestamp of when exactly that

00:23:45,440 --> 00:23:49,440
happened uh

00:23:46,720 --> 00:23:51,200
we know that this happened roughly at

00:23:49,440 --> 00:23:54,559
eight o'clock

00:23:51,200 --> 00:23:56,159
sorry uh and the

00:23:54,559 --> 00:23:57,520
inventory service is the first thing

00:23:56,159 --> 00:23:58,799
that is being called and you can see

00:23:57,520 --> 00:24:01,760
that the log says that the

00:23:58,799 --> 00:24:02,320
post the purchase was started to be

00:24:01,760 --> 00:24:03,840
processed

00:24:02,320 --> 00:24:05,520
which is good it means the process has

00:24:03,840 --> 00:24:08,320
started to be

00:24:05,520 --> 00:24:09,679
processed the purchase has started to

00:24:08,320 --> 00:24:11,679
being processed which means the

00:24:09,679 --> 00:24:13,360
operation started successfully and

00:24:11,679 --> 00:24:16,000
you're kind of trying to follow the

00:24:13,360 --> 00:24:17,120
follow the flows so it started to

00:24:16,000 --> 00:24:18,559
process the purchase

00:24:17,120 --> 00:24:20,320
then it started to validate the

00:24:18,559 --> 00:24:22,960
transaction then

00:24:20,320 --> 00:24:24,960
you started to check for credit then it

00:24:22,960 --> 00:24:25,679
went to another service to check for

00:24:24,960 --> 00:24:27,279
fraud

00:24:25,679 --> 00:24:29,039
basically a bunch of things happen to

00:24:27,279 --> 00:24:30,559
ensure that the transaction is valid

00:24:29,039 --> 00:24:32,240
then actually you can see that they

00:24:30,559 --> 00:24:32,559
started to build a credit card which is

00:24:32,240 --> 00:24:34,480
good

00:24:32,559 --> 00:24:35,919
in an external billing service which

00:24:34,480 --> 00:24:38,960
means it's something outside

00:24:35,919 --> 00:24:40,799
some other api called okay and then the

00:24:38,960 --> 00:24:42,240
the bidding it started to build a credit

00:24:40,799 --> 00:24:43,120
card and started the performance and it

00:24:42,240 --> 00:24:45,200
actually finished

00:24:43,120 --> 00:24:46,640
to perform the billing it finished

00:24:45,200 --> 00:24:49,039
checking the fraud basically you can see

00:24:46,640 --> 00:24:50,480
that the entire flow went all right

00:24:49,039 --> 00:24:52,320
and it finished validating the

00:24:50,480 --> 00:24:54,960
transaction but

00:24:52,320 --> 00:24:56,159
as far as i'm looking at the logs i

00:24:54,960 --> 00:24:57,840
can't see any problem

00:24:56,159 --> 00:24:59,600
right it does it's not clear what

00:24:57,840 --> 00:25:02,320
exactly is is the problem

00:24:59,600 --> 00:25:02,880
and usually what happens here because

00:25:02,320 --> 00:25:05,600
again

00:25:02,880 --> 00:25:06,159
this is basically all i have i have no

00:25:05,600 --> 00:25:08,799
other

00:25:06,159 --> 00:25:09,360
metrics here or things that can help me

00:25:08,799 --> 00:25:11,120
know what

00:25:09,360 --> 00:25:13,200
what is happening what i know is that

00:25:11,120 --> 00:25:14,640
the user is experiencing some sort of

00:25:13,200 --> 00:25:17,039
problem

00:25:14,640 --> 00:25:18,640
it's the transaction is not going to but

00:25:17,039 --> 00:25:19,760
the logs are telling me the transactions

00:25:18,640 --> 00:25:21,600
are going through

00:25:19,760 --> 00:25:23,440
so usually what happens is you kind of

00:25:21,600 --> 00:25:24,159
refer to the look at the code and see

00:25:23,440 --> 00:25:26,480
basically

00:25:24,159 --> 00:25:28,240
you know how the process actually takes

00:25:26,480 --> 00:25:30,720
place maybe we missed something

00:25:28,240 --> 00:25:31,679
when trying to log for the um for this

00:25:30,720 --> 00:25:33,600
specific problem

00:25:31,679 --> 00:25:35,039
so i'm going to open my intellij which

00:25:33,600 --> 00:25:36,799
obviously has uh

00:25:35,039 --> 00:25:38,880
the the code loaded you can see all the

00:25:36,799 --> 00:25:40,240
relevant services here

00:25:38,880 --> 00:25:41,760
and i'm going to try to follow it

00:25:40,240 --> 00:25:43,360
service by service so we're starting

00:25:41,760 --> 00:25:46,880
with the inventory service

00:25:43,360 --> 00:25:47,120
which is uh indeed here and it contains

00:25:46,880 --> 00:25:49,200
an

00:25:47,120 --> 00:25:50,480
inventory resource we can see that the

00:25:49,200 --> 00:25:54,000
inventory resource

00:25:50,480 --> 00:25:54,559
calls something called the transaction

00:25:54,000 --> 00:25:57,039
service

00:25:54,559 --> 00:25:58,880
think land which makes api calls that

00:25:57,039 --> 00:26:00,480
validates the transaction

00:25:58,880 --> 00:26:01,919
let's look that's what happens when it

00:26:00,480 --> 00:26:04,720
validates in transaction

00:26:01,919 --> 00:26:06,640
it basically uh called the transaction

00:26:04,720 --> 00:26:07,200
resource to validate the transaction

00:26:06,640 --> 00:26:09,120
which is

00:26:07,200 --> 00:26:10,480
another resource not the inventory

00:26:09,120 --> 00:26:12,720
resource so let's

00:26:10,480 --> 00:26:13,760
look for that transaction resource

00:26:12,720 --> 00:26:17,200
inside the call

00:26:13,760 --> 00:26:22,840
so transaction resource

00:26:17,200 --> 00:26:26,480
uh let's look for the transaction this

00:26:22,840 --> 00:26:31,679
transaction resource

00:26:26,480 --> 00:26:31,679
where is my transaction section

00:26:31,919 --> 00:26:36,559
um one second sorry

00:26:35,039 --> 00:26:38,320
well that resource and inside that

00:26:36,559 --> 00:26:39,919
mosaic resource you can see

00:26:38,320 --> 00:26:41,760
that there's another call and if you

00:26:39,919 --> 00:26:43,200
look at the logs that that makes sense

00:26:41,760 --> 00:26:44,640
because you can see there's a like a

00:26:43,200 --> 00:26:46,559
stream of logs here

00:26:44,640 --> 00:26:48,400
and if i'm going back to the second

00:26:46,559 --> 00:26:50,880
source there's a credit service thing

00:26:48,400 --> 00:26:53,600
client that calls the check credit

00:26:50,880 --> 00:26:55,120
um api call which makes sense following

00:26:53,600 --> 00:26:57,760
the logs here all right

00:26:55,120 --> 00:26:59,760
let's go into that check credit method

00:26:57,760 --> 00:27:00,400
and see what it does it calls the credit

00:26:59,760 --> 00:27:02,320
resource

00:27:00,400 --> 00:27:03,840
excellent let's go into the credit

00:27:02,320 --> 00:27:07,279
resource

00:27:03,840 --> 00:27:08,320
source and you can see that the credit

00:27:07,279 --> 00:27:10,720
source again

00:27:08,320 --> 00:27:12,480
not very surprising goes to another

00:27:10,720 --> 00:27:14,480
place a fraud service franklin

00:27:12,480 --> 00:27:16,159
let's look at the check fraud system and

00:27:14,480 --> 00:27:19,120
it calls the

00:27:16,159 --> 00:27:22,080
fraud resource so let's indeed go into

00:27:19,120 --> 00:27:26,880
the fraud resource

00:27:22,080 --> 00:27:26,880
resource again and

00:27:28,640 --> 00:27:32,000
when i go into the following source i

00:27:30,000 --> 00:27:34,720
start to see something interesting

00:27:32,000 --> 00:27:35,120
so there's a check for fraud method here

00:27:34,720 --> 00:27:38,640
that

00:27:35,120 --> 00:27:40,559
has a weird issue and this is basically

00:27:38,640 --> 00:27:42,399
you can see that this is exactly the

00:27:40,559 --> 00:27:44,080
problem if you take a close look

00:27:42,399 --> 00:27:46,399
there's a checkfront method here that

00:27:44,080 --> 00:27:49,120
you know checks for fraud unsurprisingly

00:27:46,399 --> 00:27:51,360
and inside the check for fun um method

00:27:49,120 --> 00:27:54,000
there was a try catch block and

00:27:51,360 --> 00:27:55,600
somebody forgot to log the exception

00:27:54,000 --> 00:27:56,880
basically say what happened when an

00:27:55,600 --> 00:27:58,960
exception was caught

00:27:56,880 --> 00:28:00,480
and if you've worked if you ever walk

00:27:58,960 --> 00:28:01,679
with eclipse this is basically what

00:28:00,480 --> 00:28:03,840
happens when you do

00:28:01,679 --> 00:28:06,480
an auto generate inside the id a very

00:28:03,840 --> 00:28:09,919
common error people often forget to

00:28:06,480 --> 00:28:13,360
fill it out once while the recording uh

00:28:09,919 --> 00:28:16,960
and uh basically what happens is that

00:28:13,360 --> 00:28:19,840
while this thing happened that

00:28:16,960 --> 00:28:21,760
when the transaction was processed there

00:28:19,840 --> 00:28:24,399
was a try catch block with

00:28:21,760 --> 00:28:26,240
a swallowed exception again a very it's

00:28:24,399 --> 00:28:28,159
a very simple fix once you know that an

00:28:26,240 --> 00:28:30,640
exception was thrown and caught

00:28:28,159 --> 00:28:31,600
and there's a missing missing bit of

00:28:30,640 --> 00:28:33,600
information here

00:28:31,600 --> 00:28:35,760
but think about all the process that i

00:28:33,600 --> 00:28:36,240
just did right it takes a long time even

00:28:35,760 --> 00:28:38,399
for an

00:28:36,240 --> 00:28:39,919
experience an experienced programmer it

00:28:38,399 --> 00:28:41,440
can take a few minutes to figure it out

00:28:39,919 --> 00:28:43,200
and these are this is time

00:28:41,440 --> 00:28:44,880
while the customer is complaining that

00:28:43,200 --> 00:28:47,840
the transactions are not going through

00:28:44,880 --> 00:28:48,720
maybe there's a critical business uh

00:28:47,840 --> 00:28:51,440
process

00:28:48,720 --> 00:28:51,760
at risk maybe something bad is happening

00:28:51,440 --> 00:28:53,360
and

00:28:51,760 --> 00:28:54,799
the customer is relying on the software

00:28:53,360 --> 00:28:56,480
to solve their problem

00:28:54,799 --> 00:28:58,480
and this of course leads to frustrated

00:28:56,480 --> 00:28:58,799
customers which leads to cancellations

00:28:58,480 --> 00:29:01,520
and

00:28:58,799 --> 00:29:02,480
you know the cycle let's go back to the

00:29:01,520 --> 00:29:06,320
actual

00:29:02,480 --> 00:29:08,240
lecture and talk soon

00:29:06,320 --> 00:29:09,600
and we talked about all of those things

00:29:08,240 --> 00:29:11,279
that the tools don't tell in this case

00:29:09,600 --> 00:29:13,520
it was a swallowed exception but

00:29:11,279 --> 00:29:14,320
i'd like to kind of offer a different

00:29:13,520 --> 00:29:16,720
approach

00:29:14,320 --> 00:29:17,360
instead of looking at observability

00:29:16,720 --> 00:29:19,760
which is

00:29:17,360 --> 00:29:21,200
saying build systems that are as

00:29:19,760 --> 00:29:23,200
observable as possible

00:29:21,200 --> 00:29:25,200
we have to admit sometimes there are

00:29:23,200 --> 00:29:26,799
things we can't really account for

00:29:25,200 --> 00:29:28,960
we have to make sure that we build a

00:29:26,799 --> 00:29:31,600
system as observable as possible

00:29:28,960 --> 00:29:32,240
but we also must have a process in order

00:29:31,600 --> 00:29:34,559
to ask

00:29:32,240 --> 00:29:35,440
new questions when there is missing

00:29:34,559 --> 00:29:37,360
information

00:29:35,440 --> 00:29:39,120
so i'd like to offer this concept of

00:29:37,360 --> 00:29:41,120
continuous observability which can be

00:29:39,120 --> 00:29:43,200
defined as a streamline process as is

00:29:41,120 --> 00:29:44,720
something that is easy to do

00:29:43,200 --> 00:29:46,880
and fast and kind of streamline

00:29:44,720 --> 00:29:48,480
basically for asking new questions and

00:29:46,880 --> 00:29:51,440
getting immediate answers from your

00:29:48,480 --> 00:29:53,039
from your uh systems and at lightroom

00:29:51,440 --> 00:29:54,960
will basically building a continuous

00:29:53,039 --> 00:29:56,720
observability toolbox you can add

00:29:54,960 --> 00:29:57,679
real-time blogs metrics and traces to

00:29:56,720 --> 00:30:00,960
your application

00:29:57,679 --> 00:30:03,120
again we have a free uh free t you can

00:30:00,960 --> 00:30:05,120
jump onto our website lightroom.com try

00:30:03,120 --> 00:30:06,480
it out but in the meantime

00:30:05,120 --> 00:30:08,480
there's actually a lot of things you can

00:30:06,480 --> 00:30:10,399
do to make sure

00:30:08,480 --> 00:30:11,919
that when you're on call and the system

00:30:10,399 --> 00:30:13,520
is not observable enough

00:30:11,919 --> 00:30:15,039
to make sure you actually win at the

00:30:13,520 --> 00:30:17,120
on-call situation

00:30:15,039 --> 00:30:18,880
anyways and the first and foremost thing

00:30:17,120 --> 00:30:20,640
is you can choose to love the situation

00:30:18,880 --> 00:30:22,399
and this is small but important

00:30:20,640 --> 00:30:24,080
everybody on the team is struggling with

00:30:22,399 --> 00:30:25,600
there's a problem those developers

00:30:24,080 --> 00:30:27,120
engineers are not happy they couldn't

00:30:25,600 --> 00:30:27,919
fix the problem the support engineers

00:30:27,120 --> 00:30:29,440
are not happy

00:30:27,919 --> 00:30:31,200
they couldn't fix the problem you're not

00:30:29,440 --> 00:30:33,600
happy you couldn't fix the problem

00:30:31,200 --> 00:30:34,799
so instead of being angry and kind of

00:30:33,600 --> 00:30:36,159
throwing blame around

00:30:34,799 --> 00:30:38,080
you have to make sure you love the

00:30:36,159 --> 00:30:40,320
situation as much as possible

00:30:38,080 --> 00:30:41,840
you love it instead of hating it and

00:30:40,320 --> 00:30:43,520
that will basically

00:30:41,840 --> 00:30:44,799
spread the love around and everybody

00:30:43,520 --> 00:30:46,559
will be much happier inside the

00:30:44,799 --> 00:30:47,760
situation it's small but important and

00:30:46,559 --> 00:30:49,120
worth mentioning

00:30:47,760 --> 00:30:51,279
following up you have to make sure that

00:30:49,120 --> 00:30:53,440
you as a developer have all the tools

00:30:51,279 --> 00:30:55,360
you need to do your work first and

00:30:53,440 --> 00:30:57,200
foremost you have to have your computer

00:30:55,360 --> 00:30:58,960
ready for the on-call session make sure

00:30:57,200 --> 00:31:00,559
you have everything open and loaded

00:30:58,960 --> 00:31:02,159
inside the relevant tabs

00:31:00,559 --> 00:31:03,919
and basically make sure that if somebody

00:31:02,159 --> 00:31:04,399
calls on you you don't have to spend

00:31:03,919 --> 00:31:08,000
time

00:31:04,399 --> 00:31:10,640
precious time precious customer time um

00:31:08,000 --> 00:31:12,240
setting up your environment one extra

00:31:10,640 --> 00:31:12,880
thing is the documentation part of it

00:31:12,240 --> 00:31:14,399
all so

00:31:12,880 --> 00:31:16,080
usually what happens is you're looking

00:31:14,399 --> 00:31:18,480
at a problem and you're solving it you

00:31:16,080 --> 00:31:20,320
you basically wrote a fix uh and then

00:31:18,480 --> 00:31:21,039
you're and you're saying oh no this is

00:31:20,320 --> 00:31:22,720
so

00:31:21,039 --> 00:31:24,559
out there it's never going to happen

00:31:22,720 --> 00:31:25,039
again i want to tell you that you're

00:31:24,559 --> 00:31:26,880
wrong

00:31:25,039 --> 00:31:28,080
it's going to happen again and the best

00:31:26,880 --> 00:31:30,720
thing you can do for everyone

00:31:28,080 --> 00:31:31,840
is either write a small wiki page the

00:31:30,720 --> 00:31:34,320
detailing what you did

00:31:31,840 --> 00:31:34,880
if you have a proper on-call reporting

00:31:34,320 --> 00:31:37,360
system

00:31:34,880 --> 00:31:39,120
do that otherwise send yourself a slack

00:31:37,360 --> 00:31:40,960
message or a team's message or whatever

00:31:39,120 --> 00:31:43,120
just mentioning that

00:31:40,960 --> 00:31:45,360
the three four five six seven steps you

00:31:43,120 --> 00:31:47,440
did maybe including a few small snippets

00:31:45,360 --> 00:31:50,000
to make sure that everybody

00:31:47,440 --> 00:31:50,720
knows exactly what you did this will

00:31:50,000 --> 00:31:53,679
help

00:31:50,720 --> 00:31:55,919
everyone involved in addition there's a

00:31:53,679 --> 00:31:56,559
set of emergency debugging tools you can

00:31:55,919 --> 00:31:59,200
use

00:31:56,559 --> 00:32:00,960
these are basically shell scripts

00:31:59,200 --> 00:32:01,679
sometimes little snippets little

00:32:00,960 --> 00:32:03,440
programs

00:32:01,679 --> 00:32:05,279
that enable you to rapidly debug

00:32:03,440 --> 00:32:07,200
something some people attach a remote

00:32:05,279 --> 00:32:09,039
debugger to a system somebody

00:32:07,200 --> 00:32:10,480
some people replicate an environment

00:32:09,039 --> 00:32:11,279
locally some people replicate an

00:32:10,480 --> 00:32:14,320
environment

00:32:11,279 --> 00:32:15,440
staging some people have um an automatic

00:32:14,320 --> 00:32:18,559
javascript spin up

00:32:15,440 --> 00:32:20,480
instances that replicate replicate the

00:32:18,559 --> 00:32:22,080
production system and then shadow

00:32:20,480 --> 00:32:22,640
traffic into it in order to replicate

00:32:22,080 --> 00:32:24,320
the system

00:32:22,640 --> 00:32:26,080
lots of things you can do and you need

00:32:24,320 --> 00:32:26,640
to have those tools in place and build

00:32:26,080 --> 00:32:29,039
them

00:32:26,640 --> 00:32:30,480
if you don't have them and postmortems

00:32:29,039 --> 00:32:31,919
are excellent for building these types

00:32:30,480 --> 00:32:34,320
of emergency debugging tools

00:32:31,919 --> 00:32:35,679
if you have some led debt some debt some

00:32:34,320 --> 00:32:38,399
technical

00:32:35,679 --> 00:32:38,799
debt inside your systems and you learn

00:32:38,399 --> 00:32:40,559
that

00:32:38,799 --> 00:32:42,799
this specific part of the system you

00:32:40,559 --> 00:32:44,880
know keeps on being problematic being

00:32:42,799 --> 00:32:47,600
problematic being problematic

00:32:44,880 --> 00:32:48,000
you can use a postmortem as an excuse to

00:32:47,600 --> 00:32:51,440
buy

00:32:48,000 --> 00:32:53,039
time to kind of get a location for time

00:32:51,440 --> 00:32:54,799
to build these emergency debugging tools

00:32:53,039 --> 00:32:56,320
because you can show that this tool

00:32:54,799 --> 00:32:58,320
might have saved an hour

00:32:56,320 --> 00:33:00,799
while debugging a specific problem in

00:32:58,320 --> 00:33:02,320
production and i think this is kind of

00:33:00,799 --> 00:33:04,399
the contrary on the first

00:33:02,320 --> 00:33:06,159
point is you have to know what you know

00:33:04,399 --> 00:33:08,000
and what you don't know

00:33:06,159 --> 00:33:10,480
and this is kind of difficult to to

00:33:08,000 --> 00:33:12,880
illustrate sometimes the

00:33:10,480 --> 00:33:14,000
problems inside the system that are just

00:33:12,880 --> 00:33:15,440
out of your control

00:33:14,000 --> 00:33:17,039
if it's an infrastructure problem

00:33:15,440 --> 00:33:18,960
involve the infrastructure person don't

00:33:17,039 --> 00:33:19,840
try and debug it yourself it's okay to

00:33:18,960 --> 00:33:22,320
work together

00:33:19,840 --> 00:33:23,200
that's the entire kind of point of the

00:33:22,320 --> 00:33:25,679
of the process don't

00:33:23,200 --> 00:33:27,200
don't don't do any heroics make sure

00:33:25,679 --> 00:33:28,960
that you solve the problem as much as

00:33:27,200 --> 00:33:30,399
possible and use all the resources the

00:33:28,960 --> 00:33:32,159
organization has gave to you

00:33:30,399 --> 00:33:33,600
has gave the situation that's basically

00:33:32,159 --> 00:33:34,240
why there's a devops engineer and a

00:33:33,600 --> 00:33:36,080
knock team

00:33:34,240 --> 00:33:38,159
and a support engineer and you on the

00:33:36,080 --> 00:33:39,840
team you are supposed to work together

00:33:38,159 --> 00:33:42,240
and pass responsibilities between

00:33:39,840 --> 00:33:45,600
between you in order to solve

00:33:42,240 --> 00:33:47,679
the problem at hand now this

00:33:45,600 --> 00:33:48,960
is kind of scratching the surface of the

00:33:47,679 --> 00:33:51,120
type of things

00:33:48,960 --> 00:33:52,240
that can help you in a production system

00:33:51,120 --> 00:33:54,080
in a production in an

00:33:52,240 --> 00:33:56,399
on-call situation with a production

00:33:54,080 --> 00:33:58,880
system i'd be more than happy to

00:33:56,399 --> 00:33:59,679
uh talk with you figure out the

00:33:58,880 --> 00:34:02,000
situation

00:33:59,679 --> 00:34:03,519
excuse the title here uh i was a

00:34:02,000 --> 00:34:05,760
formerly developer advocate before i was

00:34:03,519 --> 00:34:07,600
solution engineer it might

00:34:05,760 --> 00:34:09,520
it might be quite telling actually from

00:34:07,600 --> 00:34:10,320
the way i i gave my presentation or at

00:34:09,520 --> 00:34:13,919
least i'd like to

00:34:10,320 --> 00:34:16,079
i'd like to think so again my uh twitter

00:34:13,919 --> 00:34:18,480
uh and github are open for you for

00:34:16,079 --> 00:34:19,440
perusal and tom.jetliner.com is my

00:34:18,480 --> 00:34:21,200
address

00:34:19,440 --> 00:34:22,879
visit us at lighting.com and really

00:34:21,200 --> 00:34:35,839
reach out if you have any questions

00:34:22,879 --> 00:34:35,839
thoughts ideas whatever i'm here

00:34:40,079 --> 00:34:42,159

YouTube URL: https://www.youtube.com/watch?v=HoDUMNNuma4


