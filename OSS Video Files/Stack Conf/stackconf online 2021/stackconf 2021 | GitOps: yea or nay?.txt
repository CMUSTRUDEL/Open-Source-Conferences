Title: stackconf 2021 | GitOps: yea or nay?
Publication date: 2021-06-24
Playlist: stackconf online 2021
Description: 
	by Ricardo Castro

GitOps is a paradigm or a set of practices that empowers developers to perform tasks which typically (only) fall under the purview of operations. It’s a way to do Kubernetes cluster management and application delivery by using Git as a single source of truth for declarative infrastructure and applications. Being Git at the center of delivery pipelines, engineers use familiar tools to make pull requests to accelerate and simplify both application deployments and operations tasks to Kubernetes. GitOps software agents (e.g. ArgoCD, Flux and Jenkins X) can alert on any divergence between Git with what’s running in a cluster, and if there’s a difference, Kubernetes reconcilers automatically update or rollback the cluster depending on the case. This talk will include a demo of ArgoCD/Flux/Jenkins X on how to configure and use it to accelerate and simplify application deployments.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/netways/webinare/

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/


Musik: https://www.frametraxx.de/
Captions: 
	00:00:05,660 --> 00:00:13,119
[Applause]

00:00:06,120 --> 00:00:13,119
[Music]

00:00:14,160 --> 00:00:18,480
hello everyone

00:00:15,200 --> 00:00:19,840
and welcome to stackconf 2021 my name is

00:00:18,480 --> 00:00:21,520
ricardo castro

00:00:19,840 --> 00:00:22,880
and i'm a senior site reliability

00:00:21,520 --> 00:00:24,080
engineer

00:00:22,880 --> 00:00:25,920
let me start by thanking the

00:00:24,080 --> 00:00:27,599
organization for accepting my talk and

00:00:25,920 --> 00:00:29,119
thanking all of you for being present

00:00:27,599 --> 00:00:30,720
and today we're going to talk a little

00:00:29,119 --> 00:00:32,800
bit about get ops

00:00:30,720 --> 00:00:34,880
so without further ado let's delve right

00:00:32,800 --> 00:00:36,960
into the presentation

00:00:34,880 --> 00:00:38,239
so what we'll be covering today is

00:00:36,960 --> 00:00:40,000
guitops in general

00:00:38,239 --> 00:00:42,399
we'll see a little bit about what git

00:00:40,000 --> 00:00:44,879
ops is and what can gitops do

00:00:42,399 --> 00:00:45,920
for us we'll focus a little bit on

00:00:44,879 --> 00:00:47,600
githubs in this

00:00:45,920 --> 00:00:50,079
in the realm of continuous delivery

00:00:47,600 --> 00:00:52,320
software agents in the kubernetes world

00:00:50,079 --> 00:00:53,920
we will then see a small demo of a

00:00:52,320 --> 00:00:56,960
github's software agent

00:00:53,920 --> 00:00:59,600
and we will end with a few extras about

00:00:56,960 --> 00:01:01,120
githubs and some of commonly asked

00:00:59,600 --> 00:01:03,520
questions

00:01:01,120 --> 00:01:05,840
so let's let us first start with a small

00:01:03,520 --> 00:01:07,920
story so it's a beautiful day the sun is

00:01:05,840 --> 00:01:09,920
shining and our life is good

00:01:07,920 --> 00:01:12,880
and i suddenly i decide that i need to

00:01:09,920 --> 00:01:14,400
do a change this thing is a little bit

00:01:12,880 --> 00:01:16,960
tricky so as usual

00:01:14,400 --> 00:01:18,799
uh a colleague from uh from my team

00:01:16,960 --> 00:01:20,640
decides to take a look we submit the pr

00:01:18,799 --> 00:01:22,640
and we just check that everything looks

00:01:20,640 --> 00:01:25,200
okay so he reviews the change

00:01:22,640 --> 00:01:26,320
says it looks good so we're we go

00:01:25,200 --> 00:01:29,360
through with that change

00:01:26,320 --> 00:01:29,680
so we click enter and disaster happens

00:01:29,360 --> 00:01:31,200
so

00:01:29,680 --> 00:01:33,040
we have a kubernetes cluster that

00:01:31,200 --> 00:01:36,000
suddenly is gone and

00:01:33,040 --> 00:01:36,000
chaos ensues

00:01:37,680 --> 00:01:42,320
so this is now at this is us now at at

00:01:40,400 --> 00:01:45,119
this moment so a company disclosure

00:01:42,320 --> 00:01:45,840
went bust so we have applications down

00:01:45,119 --> 00:01:47,600
we have a lot

00:01:45,840 --> 00:01:49,520
of stuff that is down so now we need to

00:01:47,600 --> 00:01:51,520
recover from this so but how do we do

00:01:49,520 --> 00:01:53,119
this

00:01:51,520 --> 00:01:54,799
thankfully we are using infrastructure

00:01:53,119 --> 00:01:56,240
as code so there's not

00:01:54,799 --> 00:01:58,399
that much of a trouble to bring the

00:01:56,240 --> 00:02:00,719
cluster uh back up hopefully

00:01:58,399 --> 00:02:02,000
that that's how it happens cool the the

00:02:00,719 --> 00:02:03,439
cluster is up so now

00:02:02,000 --> 00:02:04,960
we need to figure out what needs to be

00:02:03,439 --> 00:02:06,240
relaunched so we have a bunch of

00:02:04,960 --> 00:02:07,600
applications running there

00:02:06,240 --> 00:02:08,879
both synchronous applications they

00:02:07,600 --> 00:02:10,239
synchronize on applications maybe some

00:02:08,879 --> 00:02:10,800
database so we need to figure out what

00:02:10,239 --> 00:02:13,920
needs to

00:02:10,800 --> 00:02:15,120
to come online so my colleague joe is

00:02:13,920 --> 00:02:17,040
very happy because we have

00:02:15,120 --> 00:02:18,160
um a pipeline for everything so we we

00:02:17,040 --> 00:02:20,239
just need to trigger

00:02:18,160 --> 00:02:21,680
uh those pipelines but actually we need

00:02:20,239 --> 00:02:23,760
to figure what pipeline

00:02:21,680 --> 00:02:25,440
pipelines actually need to be triggered

00:02:23,760 --> 00:02:27,840
so we start figuring that out and we

00:02:25,440 --> 00:02:29,840
start activating pipelines

00:02:27,840 --> 00:02:31,040
suddenly in the middle of this process i

00:02:29,840 --> 00:02:32,560
realized that one

00:02:31,040 --> 00:02:34,800
one pipeline was deactivated but i have

00:02:32,560 --> 00:02:35,680
no idea why so we need to ask the team

00:02:34,800 --> 00:02:37,280
why that app

00:02:35,680 --> 00:02:39,840
where that why that pipeline was

00:02:37,280 --> 00:02:41,360
deactivated also we realized that one of

00:02:39,840 --> 00:02:42,879
the pipelines actually run but the

00:02:41,360 --> 00:02:43,360
application is not working we have no

00:02:42,879 --> 00:02:45,040
idea

00:02:43,360 --> 00:02:46,720
and my colleague just remembers that

00:02:45,040 --> 00:02:49,200
there are some manual changes

00:02:46,720 --> 00:02:50,000
uh there from a specific team so our

00:02:49,200 --> 00:02:51,760
headache continues

00:02:50,000 --> 00:02:53,840
so although we have infrastructure as

00:02:51,760 --> 00:02:55,599
code although we have pipelines for

00:02:53,840 --> 00:02:58,080
almost everything there are still

00:02:55,599 --> 00:03:01,360
things that were not actually um

00:02:58,080 --> 00:03:04,400
recorded in code so that everything was

00:03:01,360 --> 00:03:06,879
was working perfectly so

00:03:04,400 --> 00:03:07,599
how can we improve on this so gitops is

00:03:06,879 --> 00:03:09,280
a

00:03:07,599 --> 00:03:11,360
an attempt of a solution for these kinds

00:03:09,280 --> 00:03:13,920
of situations and is built on four

00:03:11,360 --> 00:03:15,440
basic principles the idea one of the

00:03:13,920 --> 00:03:16,959
first principles is the idea that the

00:03:15,440 --> 00:03:19,040
entire system is described

00:03:16,959 --> 00:03:21,120
the clarity so kubernetes is just an

00:03:19,040 --> 00:03:22,720
example of many modern cloud and native

00:03:21,120 --> 00:03:24,319
solutions that are declarative

00:03:22,720 --> 00:03:25,840
and we can treat every can treat

00:03:24,319 --> 00:03:27,760
everything as code

00:03:25,840 --> 00:03:29,519
declarative means that the configuration

00:03:27,760 --> 00:03:31,360
is guaranteed by a set of facts instead

00:03:29,519 --> 00:03:32,080
of instruction so what we are meaning by

00:03:31,360 --> 00:03:34,879
this is that

00:03:32,080 --> 00:03:36,000
instead of us saying that we want launch

00:03:34,879 --> 00:03:37,840
me a server

00:03:36,000 --> 00:03:39,519
put this file at this location start

00:03:37,840 --> 00:03:40,239
this application we actually declare

00:03:39,519 --> 00:03:42,000
what we want

00:03:40,239 --> 00:03:43,680
we declare that we want a server with

00:03:42,000 --> 00:03:46,239
this application running and a file at

00:03:43,680 --> 00:03:48,720
this location this

00:03:46,239 --> 00:03:50,080
allows us to version everything in git

00:03:48,720 --> 00:03:52,799
and use git as

00:03:50,080 --> 00:03:53,680
the single source of truth truth so our

00:03:52,799 --> 00:03:55,680
applications can

00:03:53,680 --> 00:03:57,519
easily be deployed and roll back from

00:03:55,680 --> 00:03:59,599
for example from a kubernetes cluster

00:03:57,519 --> 00:04:01,760
and even more importantly when disaster

00:03:59,599 --> 00:04:04,080
strikes our cluster infrastructure

00:04:01,760 --> 00:04:06,159
can also be dependent dependably and

00:04:04,080 --> 00:04:07,920
quickly reproduced

00:04:06,159 --> 00:04:09,840
another important point is the fact that

00:04:07,920 --> 00:04:12,319
the canonical desired system state

00:04:09,840 --> 00:04:14,319
is versus version ingot this means that

00:04:12,319 --> 00:04:16,479
with this declaration of our system

00:04:14,319 --> 00:04:18,400
versus universal control system we can

00:04:16,479 --> 00:04:18,880
it can serve as the canonical source of

00:04:18,400 --> 00:04:20,560
truth

00:04:18,880 --> 00:04:22,800
and we have a single place from which

00:04:20,560 --> 00:04:25,199
everything is derived and driven

00:04:22,800 --> 00:04:26,560
this makes rollbacks trivial we can use

00:04:25,199 --> 00:04:29,919
a git revert or

00:04:26,560 --> 00:04:31,919
rollback to a previous application state

00:04:29,919 --> 00:04:34,080
also with git excellent security

00:04:31,919 --> 00:04:34,800
guarantees we can also use ssh key to

00:04:34,080 --> 00:04:36,720
sign commits

00:04:34,800 --> 00:04:38,400
and enforce stronger security guarantees

00:04:36,720 --> 00:04:40,560
about the authorship and provenance of

00:04:38,400 --> 00:04:42,160
our code

00:04:40,560 --> 00:04:44,320
another important point is the fact that

00:04:42,160 --> 00:04:45,520
the proof changes can be automatically

00:04:44,320 --> 00:04:47,280
applied to the system

00:04:45,520 --> 00:04:49,040
so once we have everything in git the

00:04:47,280 --> 00:04:51,040
next steps it will is to apply

00:04:49,040 --> 00:04:52,880
apply those changes in an automatic

00:04:51,040 --> 00:04:54,560
fashion

00:04:52,880 --> 00:04:56,000
this means that we don't need cluster

00:04:54,560 --> 00:04:58,000
credentials to make changes to our

00:04:56,000 --> 00:04:59,520
system and with gitops there is a

00:04:58,000 --> 00:05:01,680
separate environment

00:04:59,520 --> 00:05:03,280
of which the state lives outside this

00:05:01,680 --> 00:05:05,840
allows us to separate

00:05:03,280 --> 00:05:07,440
what we do to what be actually is being

00:05:05,840 --> 00:05:09,360
done

00:05:07,440 --> 00:05:10,960
and the last step the last important

00:05:09,360 --> 00:05:13,280
point is that software agents

00:05:10,960 --> 00:05:14,320
are there to ensure um correctness and

00:05:13,280 --> 00:05:16,479
alertness on that

00:05:14,320 --> 00:05:18,160
and divergence again once the state of

00:05:16,479 --> 00:05:20,960
our system is declared under version

00:05:18,160 --> 00:05:23,039
control software agents can inform us

00:05:20,960 --> 00:05:24,479
whenever there's some mismatch between

00:05:23,039 --> 00:05:26,800
what is uh in git

00:05:24,479 --> 00:05:28,720
and what is on the cluster those agents

00:05:26,800 --> 00:05:29,360
can not only alert but actually go the

00:05:28,720 --> 00:05:32,320
extra step

00:05:29,360 --> 00:05:33,039
or actually making everything convergent

00:05:32,320 --> 00:05:35,440
so what

00:05:33,039 --> 00:05:37,360
on a daily basis what can the githubs do

00:05:35,440 --> 00:05:39,039
for us

00:05:37,360 --> 00:05:40,560
so these are some of the benefits that

00:05:39,039 --> 00:05:41,759
githops can bring to the table on a

00:05:40,560 --> 00:05:44,080
day-to-day basis

00:05:41,759 --> 00:05:45,759
so we can gain a little bit of increased

00:05:44,080 --> 00:05:47,680
productivity so continuous deployment

00:05:45,759 --> 00:05:50,479
and automation with an integrated

00:05:47,680 --> 00:05:51,600
feedback loop loopback means that our

00:05:50,479 --> 00:05:53,919
mean time to the

00:05:51,600 --> 00:05:54,800
deployment recover we can estimate that

00:05:53,919 --> 00:05:58,639
we can ship

00:05:54,800 --> 00:06:01,280
um code several times faster every day

00:05:58,639 --> 00:06:04,240
and increase our output times

00:06:01,280 --> 00:06:05,039
we also gain enhanced developer xp

00:06:04,240 --> 00:06:08,160
experience

00:06:05,039 --> 00:06:09,680
so we can push code and not containers

00:06:08,160 --> 00:06:11,600
that being said developers can use

00:06:09,680 --> 00:06:13,680
familiar tools like yet to manage

00:06:11,600 --> 00:06:15,120
updates and features to kubernetes more

00:06:13,680 --> 00:06:16,960
rapidly without having to know the

00:06:15,120 --> 00:06:19,199
internals of kubernetes itself

00:06:16,960 --> 00:06:20,960
and newly onboard developers can quickly

00:06:19,199 --> 00:06:22,880
get up to speed and be productive within

00:06:20,960 --> 00:06:24,880
days instead of months

00:06:22,880 --> 00:06:27,039
we also gain improved stability because

00:06:24,880 --> 00:06:29,039
now we are using git workflows to manage

00:06:27,039 --> 00:06:30,479
our clusters and we automatically gain a

00:06:29,039 --> 00:06:32,800
convenient audit log

00:06:30,479 --> 00:06:34,160
for all of our the changes are already

00:06:32,800 --> 00:06:36,639
outside of kubernetes

00:06:34,160 --> 00:06:38,560
that all that that all that audit trail

00:06:36,639 --> 00:06:41,840
will will tell us who did what

00:06:38,560 --> 00:06:44,000
and when and it can be used

00:06:41,840 --> 00:06:47,120
for uh to meet uh compliance

00:06:44,000 --> 00:06:49,919
requirements like soc2 or pci compliant

00:06:47,120 --> 00:06:50,639
we also gain uh higher reliability so

00:06:49,919 --> 00:06:53,440
now we have

00:06:50,639 --> 00:06:54,560
uh can can use git to revert and roll

00:06:53,440 --> 00:06:56,240
back or even fork

00:06:54,560 --> 00:06:58,080
and we gain stable and reproducible

00:06:56,240 --> 00:06:59,360
rollbacks so the entire system is

00:06:58,080 --> 00:07:01,440
described in git

00:06:59,360 --> 00:07:03,360
and it's also the single source of truth

00:07:01,440 --> 00:07:04,560
from which we can recover after a

00:07:03,360 --> 00:07:07,280
meltdown

00:07:04,560 --> 00:07:08,240
we also gain consistency consistency and

00:07:07,280 --> 00:07:10,080
standardization

00:07:08,240 --> 00:07:11,919
because gitops provides one model for

00:07:10,080 --> 00:07:13,440
making infrastructure changes

00:07:11,919 --> 00:07:15,199
for apps infrastructures or even

00:07:13,440 --> 00:07:17,360
kubernetes itself and we have a

00:07:15,199 --> 00:07:18,000
consistent end-to-end workflow across

00:07:17,360 --> 00:07:20,560
the entire

00:07:18,000 --> 00:07:22,080
organization not only are continuous

00:07:20,560 --> 00:07:24,080
integration and continuous deployment

00:07:22,080 --> 00:07:26,400
pipelines all driven by pull requests

00:07:24,080 --> 00:07:28,880
but our operation tasks are also fully

00:07:26,400 --> 00:07:30,639
reproducible through git

00:07:28,880 --> 00:07:32,800
as we've seen before we gain stronger

00:07:30,639 --> 00:07:34,400
security and guarantees through git

00:07:32,800 --> 00:07:36,240
they get is backed by strong

00:07:34,400 --> 00:07:37,199
cryptography and we can use that to

00:07:36,240 --> 00:07:39,360
track and manage

00:07:37,199 --> 00:07:40,639
changes as well as the ability to sign

00:07:39,360 --> 00:07:43,520
and prove the authorship

00:07:40,639 --> 00:07:44,800
of the of the origin of those changes

00:07:43,520 --> 00:07:47,599
and of course we gain

00:07:44,800 --> 00:07:49,440
compliance in any other thing for free

00:07:47,599 --> 00:07:50,720
since all the changes are tracked and

00:07:49,440 --> 00:07:53,199
logged in a secure manner

00:07:50,720 --> 00:07:53,919
compliance and auditing are a bit more

00:07:53,199 --> 00:07:56,560
easy

00:07:53,919 --> 00:07:58,000
so the use of after that the use of

00:07:56,560 --> 00:08:00,000
comparison tools like cube div

00:07:58,000 --> 00:08:02,080
teradif orientable leaf will allow us to

00:08:00,000 --> 00:08:04,319
compare a trusted definition of set

00:08:02,080 --> 00:08:05,759
to what actually is on a cluster and

00:08:04,319 --> 00:08:08,000
decide on the changes that need to be

00:08:05,759 --> 00:08:08,000
made

00:08:08,800 --> 00:08:12,879
so what are some of the characteristics

00:08:10,960 --> 00:08:13,680
that git tops software engines need to

00:08:12,879 --> 00:08:15,599
be

00:08:13,680 --> 00:08:16,879
so they need to be declarative so they

00:08:15,599 --> 00:08:18,319
need to see

00:08:16,879 --> 00:08:20,000
to be the way that we've described

00:08:18,319 --> 00:08:23,840
before the clarity instead

00:08:20,000 --> 00:08:24,160
of imperative because git ops is using a

00:08:23,840 --> 00:08:27,599
git

00:08:24,160 --> 00:08:29,759
by the underneath we're uh going to be

00:08:27,599 --> 00:08:31,520
put those declarations in git

00:08:29,759 --> 00:08:33,440
ideally they should be automated so we

00:08:31,520 --> 00:08:35,440
don't want to actually be applying

00:08:33,440 --> 00:08:37,120
the changes manually that's echo prone

00:08:35,440 --> 00:08:38,719
and it's not scalable

00:08:37,120 --> 00:08:40,880
they of course need to be auditable so

00:08:38,719 --> 00:08:41,200
we never know we have now another trail

00:08:40,880 --> 00:08:42,560
of

00:08:41,200 --> 00:08:44,959
everything that changes outside

00:08:42,560 --> 00:08:46,959
kubernetes but we also want to need

00:08:44,959 --> 00:08:48,800
uh also need to know how things were

00:08:46,959 --> 00:08:51,440
working inside a cluster

00:08:48,800 --> 00:08:52,880
for our use case we also aspire for it

00:08:51,440 --> 00:08:54,240
to be designed for kubernetes because we

00:08:52,880 --> 00:08:55,360
are uh

00:08:54,240 --> 00:08:57,600
we are going to be deploying

00:08:55,360 --> 00:08:59,200
applications to kubernetes

00:08:57,600 --> 00:09:01,120
also very important is the fact that it

00:08:59,200 --> 00:09:01,760
needs to it needs to have out-of-the-box

00:09:01,120 --> 00:09:02,959
integrations

00:09:01,760 --> 00:09:04,880
this means that we don't want to

00:09:02,959 --> 00:09:07,040
actually be deployed be

00:09:04,880 --> 00:09:08,640
implementing everything from scratch so

00:09:07,040 --> 00:09:10,800
it needs to have some out-of-the-box

00:09:08,640 --> 00:09:11,760
integration for common uh user usage

00:09:10,800 --> 00:09:13,760
patterns

00:09:11,760 --> 00:09:15,519
at but at the same point we also need it

00:09:13,760 --> 00:09:17,920
to be a little bit extensible

00:09:15,519 --> 00:09:19,200
in the sense that uh we all have some

00:09:17,920 --> 00:09:20,800
particular use cases on our

00:09:19,200 --> 00:09:22,480
infrastructure that we actually need to

00:09:20,800 --> 00:09:24,240
input our own logic

00:09:22,480 --> 00:09:28,560
so now we're going to see uh some

00:09:24,240 --> 00:09:28,560
examples of some github software agents

00:09:30,160 --> 00:09:34,720
so the first the first example of an

00:09:32,880 --> 00:09:37,519
agent that we are going to see is flux

00:09:34,720 --> 00:09:38,160
so flux was was made by the to the

00:09:37,519 --> 00:09:41,120
company that

00:09:38,160 --> 00:09:41,760
popularized the gitobs which is called

00:09:41,120 --> 00:09:43,600
we works

00:09:41,760 --> 00:09:45,160
and it's a tool for keeping kubernetes

00:09:43,600 --> 00:09:47,760
clusters in sync with sources of

00:09:45,160 --> 00:09:51,360
calculation file and git repositories

00:09:47,760 --> 00:09:53,200
and it means to automate the all

00:09:51,360 --> 00:09:55,760
the deployments into our cluster so the

00:09:53,200 --> 00:09:57,920
way that flux uh works on a high level

00:09:55,760 --> 00:09:58,959
it has a source control that looks at

00:09:57,920 --> 00:10:01,839
the definition in git

00:09:58,959 --> 00:10:03,200
and decides what it needs to do so it

00:10:01,839 --> 00:10:04,160
understands how to work with the

00:10:03,200 --> 00:10:06,240
kubernetes api

00:10:04,160 --> 00:10:07,360
and it also has support for customized

00:10:06,240 --> 00:10:08,800
and helm controllers

00:10:07,360 --> 00:10:10,240
and those controls will be responsible

00:10:08,800 --> 00:10:11,680
for deploying helm shards or

00:10:10,240 --> 00:10:13,440
customizations

00:10:11,680 --> 00:10:15,680
uh those control those controls will

00:10:13,440 --> 00:10:18,880
also keep everything in thick in sync if

00:10:15,680 --> 00:10:21,040
any change is done in gates

00:10:18,880 --> 00:10:23,120
another interesting project is the argo

00:10:21,040 --> 00:10:25,600
cd and it is a declarative github's

00:10:23,120 --> 00:10:27,760
continuous delivery tool for kubernetes

00:10:25,600 --> 00:10:29,920
on high level it works in a similar

00:10:27,760 --> 00:10:30,959
fashion to flux so it knows how to look

00:10:29,920 --> 00:10:33,519
into a definition

00:10:30,959 --> 00:10:34,640
ingit and it knows how to interact with

00:10:33,519 --> 00:10:35,920
the kubernetes cluster

00:10:34,640 --> 00:10:38,399
of course he knows how to work with the

00:10:35,920 --> 00:10:42,399
coordinates api but it also has support

00:10:38,399 --> 00:10:44,720
for help customized and other kinds

00:10:42,399 --> 00:10:45,760
of tools in the middle of this process

00:10:44,720 --> 00:10:47,920
of

00:10:45,760 --> 00:10:50,000
github's growing in the community both

00:10:47,920 --> 00:10:51,680
the argo team and the flux team realized

00:10:50,000 --> 00:10:52,720
that there was a lot of common ground

00:10:51,680 --> 00:10:55,040
between the two projects

00:10:52,720 --> 00:10:57,440
and they created a project that lives on

00:10:55,040 --> 00:10:59,519
on github which is called argoflux

00:10:57,440 --> 00:11:00,800
in this di and the idea is to build a

00:10:59,519 --> 00:11:02,640
common gitops

00:11:00,800 --> 00:11:04,320
engine that they can both use and then

00:11:02,640 --> 00:11:07,440
they can uh build on top

00:11:04,320 --> 00:11:09,600
of those of that common engine some

00:11:07,440 --> 00:11:12,560
differentiation tools so it's actually

00:11:09,600 --> 00:11:12,560
worth taking a look

00:11:12,800 --> 00:11:17,600
and last but not least we have jenkins x

00:11:14,720 --> 00:11:19,519
so jenkins has gotten a bad rep in last

00:11:17,600 --> 00:11:20,800
in the last few years so this is an

00:11:19,519 --> 00:11:21,519
attempt from the jenkins team to

00:11:20,800 --> 00:11:24,240
actually

00:11:21,519 --> 00:11:24,560
embrace cloud native um from the ground

00:11:24,240 --> 00:11:26,560
up

00:11:24,560 --> 00:11:27,600
and they decided to build to build the

00:11:26,560 --> 00:11:30,560
jenkins

00:11:27,600 --> 00:11:32,880
x on top of githubs so again on a high

00:11:30,560 --> 00:11:34,240
level it works on a similar way it knows

00:11:32,880 --> 00:11:37,519
how to look into a git

00:11:34,240 --> 00:11:39,839
repository and understand

00:11:37,519 --> 00:11:41,279
a definition and actually know how to

00:11:39,839 --> 00:11:42,160
interact with the kubernetes classes to

00:11:41,279 --> 00:11:44,800
make to make

00:11:42,160 --> 00:11:44,800
that deploy

00:11:46,480 --> 00:11:50,079
so on a high level how would a github

00:11:48,560 --> 00:11:52,480
pipeline work like

00:11:50,079 --> 00:11:53,920
so we do some changes we we push that

00:11:52,480 --> 00:11:57,760
those changes to git we

00:11:53,920 --> 00:11:59,920
follow our normal our normal patterns

00:11:57,760 --> 00:12:00,959
and probably a cold review when

00:11:59,920 --> 00:12:01,920
everything is merged we build a

00:12:00,959 --> 00:12:03,760
container

00:12:01,920 --> 00:12:05,120
we can now we can then have a tool that

00:12:03,760 --> 00:12:06,959
can be implemented in many different

00:12:05,120 --> 00:12:09,120
ways that is looking at a container

00:12:06,959 --> 00:12:11,040
registry and realizes that there is

00:12:09,120 --> 00:12:13,600
a new version of the software to be

00:12:11,040 --> 00:12:15,519
deployed that config updater can

00:12:13,600 --> 00:12:17,040
push a change to a git repository it can

00:12:15,519 --> 00:12:18,480
be the same can be another it depends on

00:12:17,040 --> 00:12:20,399
configuration and say okay

00:12:18,480 --> 00:12:22,079
so here's here's a new version of the

00:12:20,399 --> 00:12:23,680
software that needs to be deployed

00:12:22,079 --> 00:12:25,120
and then a deploy operator that will

00:12:23,680 --> 00:12:26,959
live inside the cluster

00:12:25,120 --> 00:12:29,760
will actually see that change and apply

00:12:26,959 --> 00:12:31,839
the change into the cluster

00:12:29,760 --> 00:12:32,800
so now we are going to see an example of

00:12:31,839 --> 00:12:35,040
one of these

00:12:32,800 --> 00:12:37,040
cd software agents in practice the

00:12:35,040 --> 00:12:38,480
example that we are going to see is flux

00:12:37,040 --> 00:12:40,800
and we are going to see a demo

00:12:38,480 --> 00:12:42,480
of flex deploying an application to a

00:12:40,800 --> 00:12:42,959
local kubernetes cluster that we are

00:12:42,480 --> 00:12:44,800
going

00:12:42,959 --> 00:12:46,480
going to use you are going to see uh

00:12:44,800 --> 00:12:48,079
going to see the examples of the files

00:12:46,480 --> 00:12:49,519
that flux knows how to understand

00:12:48,079 --> 00:12:53,839
and you're going to see that it actually

00:12:49,519 --> 00:12:53,839
deploys the application into a cluster

00:12:56,880 --> 00:13:01,279
so we are going to use an example

00:12:58,880 --> 00:13:03,440
application that i have used

00:13:01,279 --> 00:13:04,959
a few times in presentations and it

00:13:03,440 --> 00:13:06,639
basically we are going to point we are

00:13:04,959 --> 00:13:08,079
going to launch a kubernetes cluster

00:13:06,639 --> 00:13:09,440
locally that we are going to point to

00:13:08,079 --> 00:13:10,320
this repository that has some

00:13:09,440 --> 00:13:13,360
definitions

00:13:10,320 --> 00:13:16,560
of them that

00:13:13,360 --> 00:13:18,399
flux needs uh knows how to understand so

00:13:16,560 --> 00:13:19,600
let's just quickly start by creating the

00:13:18,399 --> 00:13:22,480
cluster so that we don't

00:13:19,600 --> 00:13:22,480
lose a lot of time

00:13:23,120 --> 00:13:27,440
so we're going to be using k3d to create

00:13:25,600 --> 00:13:29,760
a two node uh two node cluster

00:13:27,440 --> 00:13:31,760
to actually deploy our application so

00:13:29,760 --> 00:13:33,440
this is just going to take a few seconds

00:13:31,760 --> 00:13:35,200
it's creating a bunch of configura

00:13:33,440 --> 00:13:36,880
configuration and in a couple of

00:13:35,200 --> 00:13:40,720
seconds it should be up and running and

00:13:36,880 --> 00:13:40,720
functional so everything is good

00:13:40,800 --> 00:13:44,399
that's updating our config okay so now

00:13:43,199 --> 00:13:46,480
we're good to go

00:13:44,399 --> 00:13:48,240
so before we continue and putting flux

00:13:46,480 --> 00:13:48,959
to work we're going to see what flux is

00:13:48,240 --> 00:13:51,199
going to

00:13:48,959 --> 00:13:52,320
going to see so we're going to bootstrap

00:13:51,199 --> 00:13:55,279
um flux

00:13:52,320 --> 00:13:57,120
using this command and we are pointing

00:13:55,279 --> 00:14:00,560
to this process to this specific

00:13:57,120 --> 00:14:01,360
cluster at this staging staging cluster

00:14:00,560 --> 00:14:03,920
so

00:14:01,360 --> 00:14:04,480
uh folder so what's what's what lives

00:14:03,920 --> 00:14:07,680
inside

00:14:04,480 --> 00:14:08,639
this um this definition so if you look

00:14:07,680 --> 00:14:10,720
here

00:14:08,639 --> 00:14:12,480
we will have a bunch of files that we'll

00:14:10,720 --> 00:14:13,680
be looking we'll be deploying this

00:14:12,480 --> 00:14:15,040
application that we're going to see in a

00:14:13,680 --> 00:14:17,440
few seconds

00:14:15,040 --> 00:14:19,040
so here we have a bunch of files that

00:14:17,440 --> 00:14:19,600
flux understands and this is just an

00:14:19,040 --> 00:14:21,760
example

00:14:19,600 --> 00:14:23,839
that shows that flux can actually send

00:14:21,760 --> 00:14:24,399
some information to the git repository

00:14:23,839 --> 00:14:28,160
and make them

00:14:24,399 --> 00:14:30,720
persistable so let's just first look at

00:14:28,160 --> 00:14:32,480
this file which is called web app source

00:14:30,720 --> 00:14:34,000
and here we are defining a git

00:14:32,480 --> 00:14:35,839
repository that

00:14:34,000 --> 00:14:37,680
flux will use to fetch some information

00:14:35,839 --> 00:14:39,120
we declare it with with a name we

00:14:37,680 --> 00:14:40,560
declare it with the namespace

00:14:39,120 --> 00:14:42,079
and we are just pointing to a git

00:14:40,560 --> 00:14:43,600
repository that has some information

00:14:42,079 --> 00:14:44,959
this repository is the one that we have

00:14:43,600 --> 00:14:46,959
here

00:14:44,959 --> 00:14:50,160
so what do we have next we have

00:14:46,959 --> 00:14:52,639
something here called web app common

00:14:50,160 --> 00:14:53,360
so what is web app common so web app

00:14:52,639 --> 00:14:55,279
common is

00:14:53,360 --> 00:14:56,480
easy customization so we'll have the

00:14:55,279 --> 00:14:58,160
customized controller

00:14:56,480 --> 00:14:59,519
actually be looking at this and knowing

00:14:58,160 --> 00:15:02,079
what to do and we say

00:14:59,519 --> 00:15:03,680
for it to look at that repository into

00:15:02,079 --> 00:15:05,680
this folder to understand what it needs

00:15:03,680 --> 00:15:07,760
to be done so let's see what it is

00:15:05,680 --> 00:15:09,360
living inside this folder so if you're

00:15:07,760 --> 00:15:12,000
going to deploy

00:15:09,360 --> 00:15:13,920
web app common we see that we have a key

00:15:12,000 --> 00:15:14,639
a bunch of declarations for a namespace

00:15:13,920 --> 00:15:17,519
for a

00:15:14,639 --> 00:15:18,240
back and service account so if you see

00:15:17,519 --> 00:15:20,160
this file we

00:15:18,240 --> 00:15:22,880
see that we just have plain old

00:15:20,160 --> 00:15:25,360
kubernetes files

00:15:22,880 --> 00:15:26,240
again if we see if we go back and see

00:15:25,360 --> 00:15:27,440
other files

00:15:26,240 --> 00:15:29,600
we see that we have something called

00:15:27,440 --> 00:15:32,399
backend and it's again a customization

00:15:29,600 --> 00:15:34,480
that also also uses this git repository

00:15:32,399 --> 00:15:35,360
also looks at a folder but here we have

00:15:34,480 --> 00:15:36,880
an interesting

00:15:35,360 --> 00:15:38,720
point which is the fact that it has a

00:15:36,880 --> 00:15:41,040
depends on so meaning that

00:15:38,720 --> 00:15:41,759
flux will know that we need to actually

00:15:41,040 --> 00:15:43,199
wait for

00:15:41,759 --> 00:15:44,880
everything in web app common to be

00:15:43,199 --> 00:15:47,279
deployed so to then

00:15:44,880 --> 00:15:49,680
um deploy web app backend so that let's

00:15:47,279 --> 00:15:52,079
quickly look at what lives inside

00:15:49,680 --> 00:15:54,079
uh this folder so if we go into backend

00:15:52,079 --> 00:15:56,959
we see that we have the common um

00:15:54,079 --> 00:15:58,639
kubernetes resources so we have a

00:15:56,959 --> 00:16:00,399
deployment a regular normal department

00:15:58,639 --> 00:16:02,560
for a web app

00:16:00,399 --> 00:16:03,920
we have a horizontal palatal scalar and

00:16:02,560 --> 00:16:07,759
a service

00:16:03,920 --> 00:16:09,440
and the same thing for web app front end

00:16:07,759 --> 00:16:11,839
so about front end again the same thing

00:16:09,440 --> 00:16:13,920
looks like the git repository looks at

00:16:11,839 --> 00:16:16,240
a folder that will have definitions

00:16:13,920 --> 00:16:18,240
those things to be deployed but that

00:16:16,240 --> 00:16:20,560
but now it needs to wait for a web

00:16:18,240 --> 00:16:24,320
backend so

00:16:20,560 --> 00:16:27,839
let's just put all of this in practice

00:16:24,320 --> 00:16:29,120
so if we actually boot everything using

00:16:27,839 --> 00:16:30,240
this command we're going to see what

00:16:29,120 --> 00:16:33,440
flux does

00:16:30,240 --> 00:16:35,680
so basically flux is bootstrapping it's

00:16:33,440 --> 00:16:37,199
connecting to the git repository

00:16:35,680 --> 00:16:39,440
is actually cloning locally the

00:16:37,199 --> 00:16:40,800
repository itself and now it's deploying

00:16:39,440 --> 00:16:43,440
its own controller so

00:16:40,800 --> 00:16:44,880
it's deploying the the source controller

00:16:43,440 --> 00:16:46,959
and it will then deploy the other

00:16:44,880 --> 00:16:49,440
controllers that we

00:16:46,959 --> 00:16:51,120
that it said for it to actually deploy

00:16:49,440 --> 00:16:53,199
so because we didn't specify

00:16:51,120 --> 00:16:54,720
any requirements it will deploy uh the

00:16:53,199 --> 00:16:56,160
customized controller the helm control

00:16:54,720 --> 00:16:56,959
although we understand we will not be

00:16:56,160 --> 00:17:01,040
using

00:16:56,959 --> 00:17:03,120
so it says that everything um should be

00:17:01,040 --> 00:17:04,959
should be done so now flux is operating

00:17:03,120 --> 00:17:07,520
on our cluster and we should be able

00:17:04,959 --> 00:17:09,039
to actually see what is happening so

00:17:07,520 --> 00:17:10,160
let's go back and see

00:17:09,039 --> 00:17:12,720
so the first thing that we're going to

00:17:10,160 --> 00:17:14,400
do is see the customize um

00:17:12,720 --> 00:17:15,600
customize a controller in action and

00:17:14,400 --> 00:17:16,959
we'll see that if it has some

00:17:15,600 --> 00:17:19,760
customizations

00:17:16,959 --> 00:17:20,480
so here we can see that the customize

00:17:19,760 --> 00:17:22,240
operator

00:17:20,480 --> 00:17:24,000
realized that it has a few things that

00:17:22,240 --> 00:17:25,120
it needs to apply so in this particular

00:17:24,000 --> 00:17:26,959
example it saw that

00:17:25,120 --> 00:17:28,319
web app common was to be deployed and

00:17:26,959 --> 00:17:31,039
it's already deploying it

00:17:28,319 --> 00:17:31,520
it will then uh go go on for web app

00:17:31,039 --> 00:17:33,760
back end

00:17:31,520 --> 00:17:34,960
and way back from front end so if we can

00:17:33,760 --> 00:17:37,039
see uh

00:17:34,960 --> 00:17:38,480
as we can see here so web app command

00:17:37,039 --> 00:17:42,160
has already been deployed and it

00:17:38,480 --> 00:17:44,160
it's now deploying web app uh backend

00:17:42,160 --> 00:17:45,919
so if you do a watch for the the

00:17:44,160 --> 00:17:46,720
customized controller logs just to be

00:17:45,919 --> 00:17:48,880
sure that

00:17:46,720 --> 00:17:50,080
it is doing something we can see here

00:17:48,880 --> 00:17:51,679
that it's doing

00:17:50,080 --> 00:17:53,360
uh his meeting dependencies it's

00:17:51,679 --> 00:17:54,000
declising if the depends has already

00:17:53,360 --> 00:17:55,200
been applied

00:17:54,000 --> 00:17:57,280
if the customization everything applies

00:17:55,200 --> 00:18:00,400
so here we have some access control

00:17:57,280 --> 00:18:02,640
of what um actually is being done

00:18:00,400 --> 00:18:04,320
and again if we watch for the pods that

00:18:02,640 --> 00:18:04,880
are coming through just to be sure that

00:18:04,320 --> 00:18:06,880
everything

00:18:04,880 --> 00:18:08,559
is showing up so here we can see that

00:18:06,880 --> 00:18:09,120
the web app back-end was already

00:18:08,559 --> 00:18:10,880
deployed

00:18:09,120 --> 00:18:12,640
and now the web up front end is already

00:18:10,880 --> 00:18:14,960
been deployed

00:18:12,640 --> 00:18:16,559
after a few seconds we can verify that

00:18:14,960 --> 00:18:18,720
everything should be up and running so

00:18:16,559 --> 00:18:20,720
if we test our application it should be

00:18:18,720 --> 00:18:23,520
working

00:18:20,720 --> 00:18:28,240
so let's quickly so let's quickly

00:18:23,520 --> 00:18:30,080
quickly do that

00:18:28,240 --> 00:18:31,760
so we just port forward for the to the

00:18:30,080 --> 00:18:33,520
cluster

00:18:31,760 --> 00:18:35,919
and we see that we have the application

00:18:33,520 --> 00:18:38,080
here so we're just pinging just make

00:18:35,919 --> 00:18:42,320
sure that application is running

00:18:38,080 --> 00:18:45,120
and just to be sure that it's actually

00:18:42,320 --> 00:18:45,520
actually doing something we see that

00:18:45,120 --> 00:18:47,520
it's

00:18:45,520 --> 00:18:49,039
exporting metrics so this was just a

00:18:47,520 --> 00:18:51,200
quick example of um

00:18:49,039 --> 00:18:52,960
flux in action and how we by having a

00:18:51,200 --> 00:18:54,880
definition the

00:18:52,960 --> 00:18:56,480
indicate repository flux can understand

00:18:54,880 --> 00:18:58,080
it and actually deploy something into

00:18:56,480 --> 00:18:59,679
the to a cluster without

00:18:58,080 --> 00:19:01,280
doing anything this means that we can

00:18:59,679 --> 00:19:03,120
launch a cluster just point it

00:19:01,280 --> 00:19:04,480
um just point flux to this kind of

00:19:03,120 --> 00:19:07,520
definition and you know automatically

00:19:04,480 --> 00:19:09,200
know how to reconcile everything

00:19:07,520 --> 00:19:11,120
we will now go through a few questions

00:19:09,200 --> 00:19:11,840
that usually arise when we talk about

00:19:11,120 --> 00:19:13,440
github so

00:19:11,840 --> 00:19:15,200
one of the most common questions is

00:19:13,440 --> 00:19:16,880
about seekers so you people usually ask

00:19:15,200 --> 00:19:18,960
okay so this is all well and good

00:19:16,880 --> 00:19:20,720
but i have everything in gate how do i

00:19:18,960 --> 00:19:22,880
deal with secrets that i need to provide

00:19:20,720 --> 00:19:24,559
to my applications so there are several

00:19:22,880 --> 00:19:25,679
ways to approach this these are just

00:19:24,559 --> 00:19:27,360
three examples of

00:19:25,679 --> 00:19:29,039
projects and approaches that we can that

00:19:27,360 --> 00:19:29,840
we can follow the first one is called

00:19:29,039 --> 00:19:32,640
seal secrets

00:19:29,840 --> 00:19:34,480
and the idea is that we encrypt uh a

00:19:32,640 --> 00:19:36,720
secret and it will live alongside

00:19:34,480 --> 00:19:38,400
our code and then inside the cluster the

00:19:36,720 --> 00:19:39,120
agent will have a private key that will

00:19:38,400 --> 00:19:41,120
be

00:19:39,120 --> 00:19:42,400
that will allow it to actually decrypt

00:19:41,120 --> 00:19:43,600
that secret and provide it to the

00:19:42,400 --> 00:19:45,360
application

00:19:43,600 --> 00:19:46,640
sops is a project from mozilla that

00:19:45,360 --> 00:19:48,080
follows a similar pattern there's a

00:19:46,640 --> 00:19:50,240
public key that we will

00:19:48,080 --> 00:19:52,080
which we will use to encrypt secrets and

00:19:50,240 --> 00:19:53,520
put it in git and then an agent inside

00:19:52,080 --> 00:19:54,640
the cursor will actually decrypt and

00:19:53,520 --> 00:19:57,520
make that available

00:19:54,640 --> 00:19:58,080
to the application another another

00:19:57,520 --> 00:20:00,400
solution

00:19:58,080 --> 00:20:01,840
is to use the vault agent sidecar

00:20:00,400 --> 00:20:04,080
injector that will

00:20:01,840 --> 00:20:05,600
actually connect to a vault cluster

00:20:04,080 --> 00:20:07,520
fetch the secrets and provide the

00:20:05,600 --> 00:20:10,480
secrets to the application here either

00:20:07,520 --> 00:20:13,520
via a file on the file system or through

00:20:10,480 --> 00:20:13,520
environment variables

00:20:15,520 --> 00:20:19,440
another common question that usually

00:20:17,039 --> 00:20:21,919
arises about git ops and

00:20:19,440 --> 00:20:22,880
versus yak so one of the main difference

00:20:21,919 --> 00:20:25,440
between um

00:20:22,880 --> 00:20:26,880
yak and git ops is the use of immutable

00:20:25,440 --> 00:20:28,799
containers as deployable

00:20:26,880 --> 00:20:30,559
artifacts that can be converged on a

00:20:28,799 --> 00:20:32,320
suitable orchestration tool for example

00:20:30,559 --> 00:20:35,440
kubernetes so the idea here

00:20:32,320 --> 00:20:36,080
is that the the concept of immutable

00:20:35,440 --> 00:20:37,679
containers

00:20:36,080 --> 00:20:39,520
of course we can extrapolate this and

00:20:37,679 --> 00:20:42,080
githubs can be used for everything and

00:20:39,520 --> 00:20:42,640
include iac and we can achieve um the

00:20:42,080 --> 00:20:45,039
same thing

00:20:42,640 --> 00:20:46,720
so the idea is for is that while

00:20:45,039 --> 00:20:48,240
infrastructure esco tools provide

00:20:46,720 --> 00:20:49,760
the way to manage infrastructure they

00:20:48,240 --> 00:20:51,440
don't manage the entire cloud and

00:20:49,760 --> 00:20:51,919
following egytops approach we can

00:20:51,440 --> 00:20:54,559
include

00:20:51,919 --> 00:20:57,440
yak inside git ops and manage the entire

00:20:54,559 --> 00:20:57,440
cloud native stack

00:20:58,080 --> 00:21:02,159
another common question that actually

00:20:59,760 --> 00:21:04,559
comes is usually the

00:21:02,159 --> 00:21:06,159
between push and pull so the idea uh

00:21:04,559 --> 00:21:06,880
many times is that we have a pipeline

00:21:06,159 --> 00:21:08,960
and we would push

00:21:06,880 --> 00:21:10,640
a change into a cluster for example and

00:21:08,960 --> 00:21:14,000
with gitobs we're flipping that

00:21:10,640 --> 00:21:16,240
flipping that and we're we're advocating

00:21:14,000 --> 00:21:17,520
um for a pull so the idea here is for

00:21:16,240 --> 00:21:19,520
the cluster itself to look at the

00:21:17,520 --> 00:21:21,840
definition he actually updates itself

00:21:19,520 --> 00:21:23,919
uh in some in many cases this becomes

00:21:21,840 --> 00:21:25,919
more secure because we don't actually

00:21:23,919 --> 00:21:27,679
open need to open a cluster to to the

00:21:25,919 --> 00:21:28,960
outside world we just need to tell the

00:21:27,679 --> 00:21:30,080
cluster where it needs to find its

00:21:28,960 --> 00:21:31,280
information and in

00:21:30,080 --> 00:21:33,600
some use cases it can actually be

00:21:31,280 --> 00:21:36,240
beneficial so imagine that you have

00:21:33,600 --> 00:21:37,360
um a multi-cloud application for example

00:21:36,240 --> 00:21:40,640
between amazon

00:21:37,360 --> 00:21:42,799
azure and and google and it's deployed

00:21:40,640 --> 00:21:44,320
on multiple regions we don't need to

00:21:42,799 --> 00:21:46,480
actually have in one region

00:21:44,320 --> 00:21:47,840
for example a cd server that pushes

00:21:46,480 --> 00:21:49,520
changes into all those regions

00:21:47,840 --> 00:21:51,919
because the clusters themselves can

00:21:49,520 --> 00:21:54,960
actually connect to a git repository and

00:21:51,919 --> 00:21:56,799
know and understand what they need to do

00:21:54,960 --> 00:21:58,880
and this was it from my part i hope this

00:21:56,799 --> 00:21:59,919
was an interesting uh presentation of

00:21:58,880 --> 00:22:02,080
what git ops is

00:21:59,919 --> 00:22:03,760
what it can bring to the table of course

00:22:02,080 --> 00:22:05,679
git ops it's not a silver

00:22:03,760 --> 00:22:07,679
a silver bullet it's just an approach

00:22:05,679 --> 00:22:10,320
and another tool to have

00:22:07,679 --> 00:22:11,679
in our belt that can actually help us

00:22:10,320 --> 00:22:14,159
manage and for example

00:22:11,679 --> 00:22:15,760
have helped us achieve some requirement

00:22:14,159 --> 00:22:17,280
compliance so thank you very much for

00:22:15,760 --> 00:22:19,120
attending uh for attending

00:22:17,280 --> 00:22:21,280
the talk and if you have any questions

00:22:19,120 --> 00:22:25,980
don't hesitate to contact me and send

00:22:21,280 --> 00:22:34,380
the con the questions my way thank you

00:22:25,980 --> 00:22:34,380
[Music]

00:22:38,480 --> 00:22:40,559

YouTube URL: https://www.youtube.com/watch?v=WUd5PvNsNw0


