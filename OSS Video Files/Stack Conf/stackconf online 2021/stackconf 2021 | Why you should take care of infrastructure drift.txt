Title: stackconf 2021 | Why you should take care of infrastructure drift
Publication date: 2021-06-24
Playlist: stackconf online 2021
Description: 
	by Stephane Jourdan

As infrastructure as code (IaC) becomes widely adopted by users with heterogenous skillsets, and as IaC codebases become larger and larger, it becomes harder to track drift. Drift is a deviation between the actual infrastructure state and the IaC codebase. It causes issues for security posture management, collaborative work, and maintenance. There are a lot of juicy stories from the trenches to be told on infrastructure drift. Sure enough, we all do GitOps by the book! Or we all have the right processes in place. But we also have to interact with other teams. We also have to grant some level of access to our infrastructures to some services or tools that may eventually generate uncontrolled changes. You can’t efficiently improve what you don’t track. We track coverage for unit tests, why not infrastructure as code coverage? How can we make sure our infrastructure code matches our actual infrastructure state? In this talk, using Terraform with AWS resources, I will show how infrastructure drift can go undetected despite our best efforts or tooling and cause issues and end the talk by showing our own free and open source tool driftctl, (just released under Apache-2.0 licence) that tracks IaC coverage and warns of infrastructure drift.



NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/netways/webinare/

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/


Musik: https://www.frametraxx.de/
Captions: 
	00:00:05,660 --> 00:00:13,119
[Applause]

00:00:06,120 --> 00:00:13,119
[Music]

00:00:13,840 --> 00:00:16,400
hi

00:00:14,160 --> 00:00:17,680
hi everyone and welcome to this talk

00:00:16,400 --> 00:00:19,680
about um

00:00:17,680 --> 00:00:21,279
devsecops infrastructure draft

00:00:19,680 --> 00:00:25,359
infrastructures code

00:00:21,279 --> 00:00:28,880
and well drift ctl uh welcome to

00:00:25,359 --> 00:00:31,599
stackconf 2021

00:00:28,880 --> 00:00:32,160
so in this talk um i will briefly define

00:00:31,599 --> 00:00:34,960
um

00:00:32,160 --> 00:00:35,520
what is infrastructure draft and what we

00:00:34,960 --> 00:00:38,800
learned

00:00:35,520 --> 00:00:39,520
um the hard way and pretty soon uh it

00:00:38,800 --> 00:00:42,480
will be

00:00:39,520 --> 00:00:42,960
fun live demos and stories that this

00:00:42,480 --> 00:00:45,600
will be

00:00:42,960 --> 00:00:48,079
a very hands-on talk so thank you for

00:00:45,600 --> 00:00:48,079
attending

00:00:48,320 --> 00:00:54,800
basically last year um we were

00:00:52,000 --> 00:00:56,960
working on a githubs platform to support

00:00:54,800 --> 00:00:59,199
infrastructure's code

00:00:56,960 --> 00:01:00,399
you know all the tooling all the best

00:00:59,199 --> 00:01:03,120
practices

00:01:00,399 --> 00:01:04,159
etc ready to use and at some point we

00:01:03,120 --> 00:01:06,880
looked for

00:01:04,159 --> 00:01:07,680
feedback to build the next features and

00:01:06,880 --> 00:01:11,119
we interviewed

00:01:07,680 --> 00:01:14,400
our users and other devops

00:01:11,119 --> 00:01:17,680
um guys like sras and ctos and

00:01:14,400 --> 00:01:20,159
et cetera so the most important pain

00:01:17,680 --> 00:01:21,920
those people reported uh was around

00:01:20,159 --> 00:01:25,600
infrastructure drift and

00:01:21,920 --> 00:01:26,240
all the visibility of what's actually

00:01:25,600 --> 00:01:30,799
living

00:01:26,240 --> 00:01:30,799
outside of your terraform configuration

00:01:31,119 --> 00:01:34,479
so if you have only one thing to

00:01:33,119 --> 00:01:38,320
remember from this talk

00:01:34,479 --> 00:01:40,960
it's that almost everyone experienced

00:01:38,320 --> 00:01:42,320
infrastructure drift recently and that

00:01:40,960 --> 00:01:45,520
drifts can have

00:01:42,320 --> 00:01:46,320
major consequences including security so

00:01:45,520 --> 00:01:49,200
in the end

00:01:46,320 --> 00:01:51,280
um that's the reason why we built um

00:01:49,200 --> 00:01:54,399
this open source tool uh called

00:01:51,280 --> 00:01:58,799
drift ctl that i'm gonna show in this um

00:01:54,399 --> 00:01:59,280
presentation so i'm stefan jordan i'm as

00:01:58,799 --> 00:02:02,000
jordan

00:01:59,280 --> 00:02:02,960
uh pretty pretty much everywhere on the

00:02:02,000 --> 00:02:05,360
internet

00:02:02,960 --> 00:02:06,479
i've been around infrastructures for the

00:02:05,360 --> 00:02:09,039
past 20 years

00:02:06,479 --> 00:02:09,520
i co-founded a bunch of companies here

00:02:09,039 --> 00:02:12,400
and there

00:02:09,520 --> 00:02:13,440
canada and europe and many years ago i

00:02:12,400 --> 00:02:15,920
co-wrote

00:02:13,440 --> 00:02:18,800
this book um infrastructure's code

00:02:15,920 --> 00:02:21,680
cookbook and more recently

00:02:18,800 --> 00:02:23,760
i am the happy co-founder of this tool

00:02:21,680 --> 00:02:26,959
the open source tool drive ctl

00:02:23,760 --> 00:02:29,599
with a wonderful team

00:02:26,959 --> 00:02:31,040
so after talking to hundreds of people

00:02:29,599 --> 00:02:31,840
we had to come up with a common

00:02:31,040 --> 00:02:34,080
definition of

00:02:31,840 --> 00:02:34,959
infrastructure drift and it's basically

00:02:34,080 --> 00:02:37,360
what happens

00:02:34,959 --> 00:02:38,560
when the reality and the expectation

00:02:37,360 --> 00:02:41,680
don't match

00:02:38,560 --> 00:02:44,720
um it's also known as oh my god

00:02:41,680 --> 00:02:45,840
um when things go wrong while they

00:02:44,720 --> 00:02:50,080
really should not

00:02:45,840 --> 00:02:53,280
you know so according to this definition

00:02:50,080 --> 00:02:56,879
your edwards account has a ton of

00:02:53,280 --> 00:02:57,680
actual resources that's the part on the

00:02:56,879 --> 00:03:00,239
right

00:02:57,680 --> 00:03:01,040
and maybe only part of it is correctly

00:03:00,239 --> 00:03:03,599
managed by

00:03:01,040 --> 00:03:04,080
terraform that's the part on the left

00:03:03,599 --> 00:03:07,840
and

00:03:04,080 --> 00:03:10,879
the div is the drift

00:03:07,840 --> 00:03:11,599
so what are the causes of drift there

00:03:10,879 --> 00:03:14,000
are many

00:03:11,599 --> 00:03:17,200
but the major ones are the manual

00:03:14,000 --> 00:03:19,440
changes directly on the aws console

00:03:17,200 --> 00:03:20,640
all the authenticated lambdas and

00:03:19,440 --> 00:03:23,440
microservices

00:03:20,640 --> 00:03:24,000
are you know this script that runs every

00:03:23,440 --> 00:03:27,040
night

00:03:24,000 --> 00:03:30,720
to snapshot this dex disk on aws

00:03:27,040 --> 00:03:33,840
scan for certain tags etc and

00:03:30,720 --> 00:03:37,040
can be as well um this other team

00:03:33,840 --> 00:03:39,120
uh working with uh another tool or that

00:03:37,040 --> 00:03:41,599
adwords service not yet available in the

00:03:39,120 --> 00:03:43,920
current terraform provider version so

00:03:41,599 --> 00:03:46,400
maybe you just had this new project

00:03:43,920 --> 00:03:49,680
starting on this new cloud provider

00:03:46,400 --> 00:03:52,319
um well different from the current one

00:03:49,680 --> 00:03:53,599
and obviously no time to automate it

00:03:52,319 --> 00:03:56,959
properly so

00:03:53,599 --> 00:04:00,000
all those activities and others are

00:03:56,959 --> 00:04:03,599
all authenticated and are sources

00:04:00,000 --> 00:04:06,640
causes of drift

00:04:03,599 --> 00:04:09,680
so it could be no big deal and maybe

00:04:06,640 --> 00:04:13,840
we could all live with those drafts

00:04:09,680 --> 00:04:15,439
problem is misconfiguration can lead to

00:04:13,840 --> 00:04:16,000
security issues you don't even know

00:04:15,439 --> 00:04:17,919
about

00:04:16,000 --> 00:04:19,759
and we see here in this slide that the

00:04:17,919 --> 00:04:22,079
nsa recently leveled

00:04:19,759 --> 00:04:22,800
poor access control and misconfiguration

00:04:22,079 --> 00:04:26,240
as

00:04:22,800 --> 00:04:28,720
top issues so definitely

00:04:26,240 --> 00:04:29,280
you want to know about the unknown stuff

00:04:28,720 --> 00:04:33,120
running

00:04:29,280 --> 00:04:33,120
in your cloud providers accounts

00:04:34,080 --> 00:04:39,199
as we just said we definitely need to

00:04:36,960 --> 00:04:40,400
shed some light on the unknown resources

00:04:39,199 --> 00:04:42,639
of your accounts

00:04:40,400 --> 00:04:43,680
and those that are not under control

00:04:42,639 --> 00:04:45,440
with terraform

00:04:43,680 --> 00:04:47,919
and only then you'll know about

00:04:45,440 --> 00:04:50,320
misconfigure this configuration sorry

00:04:47,919 --> 00:04:53,360
only then you'll be able to address or

00:04:50,320 --> 00:04:57,120
fix the issues

00:04:53,360 --> 00:04:59,840
so i'm done talking about general stuff

00:04:57,120 --> 00:05:01,520
and context um let's go for the stories

00:04:59,840 --> 00:05:04,720
i'll share a few of them

00:05:01,520 --> 00:05:07,199
um they are simplified for the talk um

00:05:04,720 --> 00:05:08,560
they are from our uh close environment

00:05:07,199 --> 00:05:12,560
uh or ourselves

00:05:08,560 --> 00:05:13,919
directly i show as well how our open

00:05:12,560 --> 00:05:17,680
source answer

00:05:13,919 --> 00:05:21,039
derive control drift ctl helped in this

00:05:17,680 --> 00:05:24,720
situation so the first

00:05:21,039 --> 00:05:26,240
story is about um this authenticated uh

00:05:24,720 --> 00:05:29,199
micro service

00:05:26,240 --> 00:05:31,440
um the shipped uh this team shipped a

00:05:29,199 --> 00:05:32,320
new version of it on the friday evening

00:05:31,440 --> 00:05:34,720
they went home

00:05:32,320 --> 00:05:36,000
weekend stuff etc you know you know the

00:05:34,720 --> 00:05:38,639
story and

00:05:36,000 --> 00:05:39,600
um something went wrong during uh the

00:05:38,639 --> 00:05:42,960
weekend and

00:05:39,600 --> 00:05:46,880
the on-call support team um

00:05:42,960 --> 00:05:49,440
they had uh to solve this issue and

00:05:46,880 --> 00:05:50,320
they read the code and they said well

00:05:49,440 --> 00:05:53,440
okay

00:05:50,320 --> 00:05:54,160
so we have here a micro service we have

00:05:53,440 --> 00:05:57,520
an im

00:05:54,160 --> 00:05:58,560
access key uh we have a read-only policy

00:05:57,520 --> 00:06:01,919
attachment

00:05:58,560 --> 00:06:02,319
uh okay let's let's find um let's find a

00:06:01,919 --> 00:06:05,360
way

00:06:02,319 --> 00:06:09,039
around that so um so to

00:06:05,360 --> 00:06:11,759
check sorry here we are

00:06:09,039 --> 00:06:12,880
so that's the code basically for those

00:06:11,759 --> 00:06:16,080
of you who are not

00:06:12,880 --> 00:06:18,639
um familiar with

00:06:16,080 --> 00:06:20,720
terraform so this is a resource that

00:06:18,639 --> 00:06:21,360
creates an imuser that's the name of the

00:06:20,720 --> 00:06:23,840
resource

00:06:21,360 --> 00:06:24,960
and the name of the resource with a

00:06:23,840 --> 00:06:27,919
dynamically

00:06:24,960 --> 00:06:29,600
generated string from another state and

00:06:27,919 --> 00:06:33,680
that's an access key

00:06:29,600 --> 00:06:36,400
for this user and that's the attachment

00:06:33,680 --> 00:06:38,800
for the said user here and the

00:06:36,400 --> 00:06:41,600
attachment is for a manage policy by

00:06:38,800 --> 00:06:42,560
aws and that's the read-only access

00:06:41,600 --> 00:06:45,520
policy

00:06:42,560 --> 00:06:46,000
so basically this generates an access

00:06:45,520 --> 00:06:49,759
key

00:06:46,000 --> 00:06:53,280
with read-only access to um

00:06:49,759 --> 00:06:56,639
anybody else for this i am user

00:06:53,280 --> 00:07:00,319
and in this case the team here

00:06:56,639 --> 00:07:03,919
um went there and basically

00:07:00,319 --> 00:07:07,759
they said okay um let's make

00:07:03,919 --> 00:07:10,639
an active this let's deactivate this

00:07:07,759 --> 00:07:11,440
access key and create a new one so we

00:07:10,639 --> 00:07:14,479
are sure

00:07:11,440 --> 00:07:17,599
this way that it's not uh an access key

00:07:14,479 --> 00:07:21,680
problem so they tried that and

00:07:17,599 --> 00:07:25,039
they worked but didn't change

00:07:21,680 --> 00:07:28,160
their issues so they went to

00:07:25,039 --> 00:07:31,759
the permission tag tab sorry and

00:07:28,160 --> 00:07:35,280
they added manually a a permission so

00:07:31,759 --> 00:07:36,080
in this case it was like something close

00:07:35,280 --> 00:07:37,919
to that

00:07:36,080 --> 00:07:39,840
administrative access so it's quite

00:07:37,919 --> 00:07:42,880
different to read only

00:07:39,840 --> 00:07:46,319
and basically

00:07:42,880 --> 00:07:50,240
there um they thought that they would uh

00:07:46,319 --> 00:07:53,039
tell the team um afterwards

00:07:50,240 --> 00:07:53,759
uh but unfortunately um they forgot

00:07:53,039 --> 00:07:58,000
about this

00:07:53,759 --> 00:08:01,520
so what happened um on monday

00:07:58,000 --> 00:08:02,400
the team um they had um terraform plot

00:08:01,520 --> 00:08:06,000
and apply in

00:08:02,400 --> 00:08:09,199
ci to ensure um the code always

00:08:06,000 --> 00:08:11,759
um was always staying in sync um

00:08:09,199 --> 00:08:12,720
with um with the reality and the

00:08:11,759 --> 00:08:16,479
intention

00:08:12,720 --> 00:08:19,680
and so in this case um let's

00:08:16,479 --> 00:08:22,560
try and apply directly um in this case

00:08:19,680 --> 00:08:22,560
zero from apply

00:08:22,960 --> 00:08:29,199
would not report anything

00:08:26,000 --> 00:08:32,399
uh change so um

00:08:29,199 --> 00:08:35,039
why is that it's um

00:08:32,399 --> 00:08:36,000
precisely because um it's different

00:08:35,039 --> 00:08:38,959
objects on

00:08:36,000 --> 00:08:40,000
terror from sides and the way aws sends

00:08:38,959 --> 00:08:42,159
things to

00:08:40,000 --> 00:08:43,120
terraform in the current iteration of

00:08:42,159 --> 00:08:44,880
the tool

00:08:43,120 --> 00:08:47,680
it might change in the future but right

00:08:44,880 --> 00:08:48,240
now um it doesn't display any change

00:08:47,680 --> 00:08:50,720
because

00:08:48,240 --> 00:08:51,440
it's out of its scope it's a new key

00:08:50,720 --> 00:08:53,920
it's not

00:08:51,440 --> 00:08:57,680
the key that we declared that was change

00:08:53,920 --> 00:08:59,839
is just a new key that was added and

00:08:57,680 --> 00:09:00,880
the policy is a new attachment and in

00:08:59,839 --> 00:09:03,760
this case

00:09:00,880 --> 00:09:04,640
the same situation it cannot be um

00:09:03,760 --> 00:09:07,440
discovered

00:09:04,640 --> 00:09:09,279
by the current iteration of the tool and

00:09:07,440 --> 00:09:12,880
the terraform tool so

00:09:09,279 --> 00:09:16,560
in this case drift ctl would

00:09:12,880 --> 00:09:19,600
be quite helpful because

00:09:16,560 --> 00:09:20,480
we have a bunch of states in in our

00:09:19,600 --> 00:09:23,600
folder

00:09:20,480 --> 00:09:26,880
four actually and by using

00:09:23,600 --> 00:09:27,200
this simple um button we can load them

00:09:26,880 --> 00:09:28,800
up

00:09:27,200 --> 00:09:30,800
all the states you can have only one

00:09:28,800 --> 00:09:33,600
state but you can have many states

00:09:30,800 --> 00:09:34,720
and we can launch it it scans resources

00:09:33,600 --> 00:09:39,680
against your

00:09:34,720 --> 00:09:42,320
edwards account it's using the standard

00:09:39,680 --> 00:09:43,040
the standard environment variables and

00:09:42,320 --> 00:09:46,240
basically

00:09:43,040 --> 00:09:47,839
uh what it reports is this new access

00:09:46,240 --> 00:09:50,480
key here

00:09:47,839 --> 00:09:53,440
to what i'm user it's related so it's

00:09:50,480 --> 00:09:56,480
related to the microservice mra9

00:09:53,440 --> 00:09:58,640
roller and so you have a new access key

00:09:56,480 --> 00:10:00,000
and you have a new attachment as well

00:09:58,640 --> 00:10:03,360
for this

00:10:00,000 --> 00:10:07,200
micro service user this im user so this

00:10:03,360 --> 00:10:10,240
is probably um a huge

00:10:07,200 --> 00:10:13,360
warning for you you should be very

00:10:10,240 --> 00:10:17,279
worried if you see these outputs on your

00:10:13,360 --> 00:10:21,360
adwords account we also added um

00:10:17,279 --> 00:10:23,600
some nice information like coverage um

00:10:21,360 --> 00:10:25,760
code coverage like for software

00:10:23,600 --> 00:10:27,839
engineering it's very common so we

00:10:25,760 --> 00:10:30,839
introduced this notion

00:10:27,839 --> 00:10:31,920
for uh infrastructures code so in this

00:10:30,839 --> 00:10:35,360
case um

00:10:31,920 --> 00:10:38,800
our code has a 77

00:10:35,360 --> 00:10:41,200
coverage um of resources because we have

00:10:38,800 --> 00:10:43,600
those two resources not covered at all

00:10:41,200 --> 00:10:46,800
by uh infrastructure code by terraform

00:10:43,600 --> 00:10:49,839
so we also have deletions

00:10:46,800 --> 00:10:50,720
support so if a resource is deleted it

00:10:49,839 --> 00:10:54,560
will be

00:10:50,720 --> 00:10:58,959
there and change support as well if

00:10:54,560 --> 00:10:58,959
you change manually your resource

00:10:59,040 --> 00:11:06,720
uh outside of terraform so

00:11:03,120 --> 00:11:09,839
that's um that's the first um

00:11:06,720 --> 00:11:14,480
that's the first story and um very

00:11:09,839 --> 00:11:17,600
unfortunately for this team um this

00:11:14,480 --> 00:11:18,240
uh microservice stood um run in

00:11:17,600 --> 00:11:22,320
production

00:11:18,240 --> 00:11:24,399
for uh weeks uh may if not month

00:11:22,320 --> 00:11:26,000
with administrative access or nearly

00:11:24,399 --> 00:11:29,600
administrative access

00:11:26,000 --> 00:11:33,200
and rogue keys um just because

00:11:29,600 --> 00:11:35,680
well um the guys uh in the team

00:11:33,200 --> 00:11:36,800
were pretty sure that um they were

00:11:35,680 --> 00:11:40,720
protected by their

00:11:36,800 --> 00:11:44,079
um get ups pipeline

00:11:40,720 --> 00:11:47,360
checking terraform plot and applies

00:11:44,079 --> 00:11:48,480
returns and well didn't work in this

00:11:47,360 --> 00:11:52,880
case

00:11:48,480 --> 00:11:52,880
use drift ctl for that

00:11:53,519 --> 00:11:58,079
the second story is about security

00:11:55,839 --> 00:12:00,880
groups

00:11:58,079 --> 00:12:02,000
at the beginning of the pandemic people

00:12:00,880 --> 00:12:04,320
were

00:12:02,000 --> 00:12:05,839
started to work from home a couple

00:12:04,320 --> 00:12:08,880
couple of people couldn't connect

00:12:05,839 --> 00:12:10,800
um to the company network and some of

00:12:08,880 --> 00:12:11,519
them didn't want to wait for it to solve

00:12:10,800 --> 00:12:14,720
the issues

00:12:11,519 --> 00:12:18,800
um they're wrong

00:12:14,720 --> 00:12:21,360
um their managers and they asked them

00:12:18,800 --> 00:12:22,560
to do something and do something um

00:12:21,360 --> 00:12:24,720
quickly

00:12:22,560 --> 00:12:26,160
and uh one of them had enough

00:12:24,720 --> 00:12:28,959
credentials to open

00:12:26,160 --> 00:12:30,079
everything uh to everyone uh on on the

00:12:28,959 --> 00:12:32,880
security group

00:12:30,079 --> 00:12:33,839
and well good for them it solves the

00:12:32,880 --> 00:12:37,200
issue

00:12:33,839 --> 00:12:39,760
um but uh well the

00:12:37,200 --> 00:12:40,560
in question i forgot to tell at the team

00:12:39,760 --> 00:12:43,680
the next day

00:12:40,560 --> 00:12:46,000
so how does it look like this

00:12:43,680 --> 00:12:46,000
is

00:12:47,200 --> 00:12:54,720
applause this is a security group

00:12:51,440 --> 00:12:56,959
the name is super secure and this only

00:12:54,720 --> 00:12:58,639
this security group has only one rule

00:12:56,959 --> 00:13:02,959
here and it's

00:12:58,639 --> 00:13:06,399
22 it allows ssh from the local network

00:13:02,959 --> 00:13:10,000
and basically there is

00:13:06,399 --> 00:13:12,399
two ways to write um security groups uh

00:13:10,000 --> 00:13:13,360
using terraform the first one is using

00:13:12,399 --> 00:13:16,560
separate

00:13:13,360 --> 00:13:17,200
um rules uh and there are separate

00:13:16,560 --> 00:13:18,880
resources

00:13:17,200 --> 00:13:21,200
one for rules and the other one for the

00:13:18,880 --> 00:13:25,120
group and another

00:13:21,200 --> 00:13:27,120
way is to use ingress and egress blocks

00:13:25,120 --> 00:13:30,240
directly in the security group

00:13:27,120 --> 00:13:34,320
resource and this team

00:13:30,240 --> 00:13:37,760
choose to use this solution

00:13:34,320 --> 00:13:41,760
and basically if i

00:13:37,760 --> 00:13:45,519
do again what um

00:13:41,760 --> 00:13:48,480
the manager did that day this is our

00:13:45,519 --> 00:13:49,120
super secure security group and if we go

00:13:48,480 --> 00:13:54,079
there

00:13:49,120 --> 00:13:54,079
and that we add a rule like

00:13:54,399 --> 00:14:01,600
guy added all traffic from anywhere

00:13:58,079 --> 00:14:04,880
ipv4 ipv6 and

00:14:01,600 --> 00:14:08,079
called that world

00:14:04,880 --> 00:14:11,360
temp very very good

00:14:08,079 --> 00:14:14,720
all right so

00:14:11,360 --> 00:14:19,440
in this case the team as well

00:14:14,720 --> 00:14:19,440
they had a very very cool

00:14:20,720 --> 00:14:23,920
pipeline checking for

00:14:22,760 --> 00:14:27,600
[Music]

00:14:23,920 --> 00:14:30,720
discrepancies differences between

00:14:27,600 --> 00:14:34,399
the terraform code and the reality but

00:14:30,720 --> 00:14:36,959
here once again 0 added 0 changed and 0

00:14:34,399 --> 00:14:36,959
destroyed

00:14:38,320 --> 00:14:44,240
same reason than previously

00:14:41,760 --> 00:14:46,720
terraform state is not something you are

00:14:44,240 --> 00:14:51,040
supposed to mess with

00:14:46,720 --> 00:14:51,040
or check

00:14:51,760 --> 00:15:00,320
for yourself in our case

00:14:56,399 --> 00:15:00,320
what would drift ctl

00:15:10,839 --> 00:15:13,839
do

00:15:15,279 --> 00:15:18,800
it's taking a little bit of time all

00:15:18,160 --> 00:15:22,560
right

00:15:18,800 --> 00:15:26,000
so in this case um there are um

00:15:22,560 --> 00:15:26,639
drift ctl uh sees that is um there is a

00:15:26,000 --> 00:15:30,399
rule

00:15:26,639 --> 00:15:34,000
not uh not available um not declared in

00:15:30,399 --> 00:15:36,720
in your um in your terraform states and

00:15:34,000 --> 00:15:37,839
um so they are you have the id of the

00:15:36,720 --> 00:15:41,199
security group

00:15:37,839 --> 00:15:45,279
uh you have sorry you have

00:15:41,199 --> 00:15:48,880
um the ipv4 um a load

00:15:45,279 --> 00:15:52,160
range and the ipv6 a load range

00:15:48,880 --> 00:15:55,040
which basically if you see that

00:15:52,160 --> 00:15:55,680
in your your output uh you are in big

00:15:55,040 --> 00:15:59,360
trouble

00:15:55,680 --> 00:16:01,839
um especially if you also have a

00:15:59,360 --> 00:16:02,880
access keys and attachments uh um of

00:16:01,839 --> 00:16:05,759
that kind

00:16:02,880 --> 00:16:06,720
so once again it's simplified for the

00:16:05,759 --> 00:16:10,000
demo but

00:16:06,720 --> 00:16:12,720
that's the that's the id and

00:16:10,000 --> 00:16:13,440
you can see it as well that the coverage

00:16:12,720 --> 00:16:16,480
decreased

00:16:13,440 --> 00:16:18,160
from 70 something to 63 percent because

00:16:16,480 --> 00:16:22,240
you have two new rules

00:16:18,160 --> 00:16:26,240
and managed

00:16:22,240 --> 00:16:29,759
so that's it for um

00:16:26,240 --> 00:16:32,959
that's it for um the story um in the end

00:16:29,759 --> 00:16:37,199
um uh someone in

00:16:32,959 --> 00:16:40,480
in the team was manually browsing um

00:16:37,199 --> 00:16:44,160
the dws accounts and for the company and

00:16:40,480 --> 00:16:47,279
and not as does this this rule like

00:16:44,160 --> 00:16:50,160
why why is everything opened uh on this

00:16:47,279 --> 00:16:50,880
uh on this security group and check

00:16:50,160 --> 00:16:54,000
around and

00:16:50,880 --> 00:16:56,560
and discovered uh why but it yeah it's

00:16:54,000 --> 00:16:59,199
it stood like this for um four weeks

00:16:56,560 --> 00:16:59,199
fully open

00:16:59,519 --> 00:17:07,679
um this um the third um

00:17:04,079 --> 00:17:10,799
example is from a

00:17:07,679 --> 00:17:13,919
a team in london and they were

00:17:10,799 --> 00:17:17,280
using a lot of data

00:17:13,919 --> 00:17:19,360
in s3 buckets they are building a

00:17:17,280 --> 00:17:20,959
a plug-in an enterprise plug-in for

00:17:19,360 --> 00:17:23,199
something and

00:17:20,959 --> 00:17:24,240
basically all the developers like there

00:17:23,199 --> 00:17:27,199
were

00:17:24,240 --> 00:17:28,000
like 100 of them um they were building

00:17:27,199 --> 00:17:30,240
they were

00:17:28,000 --> 00:17:33,840
yeah building the plug-in every hour or

00:17:30,240 --> 00:17:37,360
so and applauding it to s3

00:17:33,840 --> 00:17:40,480
for some qa et cetera and check checking

00:17:37,360 --> 00:17:42,320
checking from for basic stuff and so it

00:17:40,480 --> 00:17:46,080
generated a lot of

00:17:42,320 --> 00:17:49,679
a lot of data every day and um

00:17:46,080 --> 00:17:50,080
in in in this case um they're a separate

00:17:49,679 --> 00:17:53,039
team

00:17:50,080 --> 00:17:54,880
another team um they had a compliance

00:17:53,039 --> 00:17:58,400
and security roadmap for them

00:17:54,880 --> 00:17:59,280
and they decided to enable s-free

00:17:58,400 --> 00:18:02,240
versioning

00:17:59,280 --> 00:18:04,640
and as well as do something around like

00:18:02,240 --> 00:18:06,640
create a couple of buckets manually etc

00:18:04,640 --> 00:18:08,400
so they went to see the team and said

00:18:06,640 --> 00:18:11,679
okay um

00:18:08,400 --> 00:18:12,720
we have this project but you will be

00:18:11,679 --> 00:18:15,760
impacted

00:18:12,720 --> 00:18:18,559
is it okay for you and

00:18:15,760 --> 00:18:19,360
so the team i was working with in london

00:18:18,559 --> 00:18:22,640
they said

00:18:19,360 --> 00:18:25,919
well um if you want but it's pretty

00:18:22,640 --> 00:18:27,919
pretty stupid because we

00:18:25,919 --> 00:18:31,039
really don't need versioning that's

00:18:27,919 --> 00:18:33,520
going to be a huge amount of data

00:18:31,039 --> 00:18:34,400
that would be versioned and the price

00:18:33,520 --> 00:18:37,440
the cost would be

00:18:34,400 --> 00:18:40,720
huge so um

00:18:37,440 --> 00:18:43,440
that other team they had they were

00:18:40,720 --> 00:18:43,760
like oh great um thanks for uh telling

00:18:43,440 --> 00:18:46,640
us

00:18:43,760 --> 00:18:47,039
we will not uh include uh your buckets

00:18:46,640 --> 00:18:50,080
in

00:18:47,039 --> 00:18:52,559
in in this um

00:18:50,080 --> 00:18:53,679
in this uh rhonda because as you said

00:18:52,559 --> 00:18:56,720
it's uh pretty

00:18:53,679 --> 00:18:58,400
useless and everybody uh went home uh

00:18:56,720 --> 00:19:02,160
very happy about the chat

00:18:58,400 --> 00:19:05,679
and um um the guys in london

00:19:02,160 --> 00:19:07,919
they had a terraform in in ci as well so

00:19:05,679 --> 00:19:09,840
they would report if anything bad was

00:19:07,919 --> 00:19:12,640
changing on

00:19:09,840 --> 00:19:14,320
what's happening to the s3 buckets and

00:19:12,640 --> 00:19:16,480
the team with the compliance and

00:19:14,320 --> 00:19:19,600
security roadmap

00:19:16,480 --> 00:19:23,520
they built this wonderful

00:19:19,600 --> 00:19:26,559
python script

00:19:23,520 --> 00:19:29,919
and with a huge list of

00:19:26,559 --> 00:19:31,600
exclusion and then run it and said okay

00:19:29,919 --> 00:19:32,880
if there is an issue we will know about

00:19:31,600 --> 00:19:34,720
it because we are reading

00:19:32,880 --> 00:19:36,400
the output of the the scripts and they

00:19:34,720 --> 00:19:40,000
did it and

00:19:36,400 --> 00:19:43,200
unfortunately what happened is something

00:19:40,000 --> 00:19:46,160
like this so this is um

00:19:43,200 --> 00:19:46,799
the buckets that con teemo mre blah blah

00:19:46,160 --> 00:19:50,000
blah

00:19:46,799 --> 00:19:53,200
and basically what they did in

00:19:50,000 --> 00:19:55,440
in in the botoscript is enable this like

00:19:53,200 --> 00:19:55,440
this

00:19:55,520 --> 00:19:59,440
and and in the end as well um they

00:19:57,520 --> 00:20:03,440
created a bunch of buckets around

00:19:59,440 --> 00:20:07,280
and in this case

00:20:03,440 --> 00:20:10,559
what will drift ctl uh

00:20:07,280 --> 00:20:15,760
report as well very pretty much

00:20:10,559 --> 00:20:15,760
the same thing it scans all your

00:20:18,840 --> 00:20:23,360
accounts

00:20:20,080 --> 00:20:28,000
and it reports that um versioning

00:20:23,360 --> 00:20:30,960
changed um because basically if you go

00:20:28,000 --> 00:20:30,960
here s3

00:20:31,200 --> 00:20:37,200
therefore plan terraform plan

00:20:34,559 --> 00:20:37,200
this case

00:20:42,159 --> 00:20:46,320
it's refreshing yeah terraform did not

00:20:45,760 --> 00:20:47,679
detect

00:20:46,320 --> 00:20:49,520
any difference between your

00:20:47,679 --> 00:20:53,200
configuration and the remote systems

00:20:49,520 --> 00:20:56,080
once again might change soon uh because

00:20:53,200 --> 00:20:57,679
uh hashicorp is uh doing a great work um

00:20:56,080 --> 00:21:01,120
uh building a better tool

00:20:57,679 --> 00:21:04,000
um but for now that's the kind of um

00:21:01,120 --> 00:21:05,440
that's a kind of uh situation that we

00:21:04,000 --> 00:21:08,880
can

00:21:05,440 --> 00:21:11,120
see and in this case uh

00:21:08,880 --> 00:21:11,919
unfortunately um the team that

00:21:11,120 --> 00:21:14,960
discovered

00:21:11,919 --> 00:21:16,240
the issue was um financed because they

00:21:14,960 --> 00:21:20,000
received

00:21:16,240 --> 00:21:24,000
the bill the next month and it wasn't

00:21:20,000 --> 00:21:24,000
that good as you can imagine

00:21:24,159 --> 00:21:31,440
so um i have a few minutes left so

00:21:28,080 --> 00:21:34,640
actually i can i can show more

00:21:31,440 --> 00:21:38,240
more usage of the tool like you can

00:21:34,640 --> 00:21:41,760
uh integrate that kind of output um

00:21:38,240 --> 00:21:44,000
in in so drift ttl is

00:21:41,760 --> 00:21:44,960
is giving you a lot of data as you can

00:21:44,000 --> 00:21:47,600
see

00:21:44,960 --> 00:21:48,720
so you can integrate the data with

00:21:47,600 --> 00:21:52,240
another tool

00:21:48,720 --> 00:21:55,039
you can store some data in a database

00:21:52,240 --> 00:21:57,200
you can build dashboards with it you can

00:21:55,039 --> 00:21:59,360
use the json output to do

00:21:57,200 --> 00:22:01,600
whatever you want with it like i

00:21:59,360 --> 00:22:05,440
personally extract

00:22:01,600 --> 00:22:08,559
the coverage percentage

00:22:05,440 --> 00:22:11,919
of this output so in this case

00:22:08,559 --> 00:22:12,320
we output to a file but you can output

00:22:11,919 --> 00:22:15,520
to

00:22:12,320 --> 00:22:16,640
sdd out so you can pipe the output to

00:22:15,520 --> 00:22:19,120
something else

00:22:16,640 --> 00:22:20,080
that's the kind of things you can do

00:22:19,120 --> 00:22:24,480
with that

00:22:20,080 --> 00:22:27,919
um the json output also

00:22:24,480 --> 00:22:31,200
can be used in conjunction um with

00:22:27,919 --> 00:22:33,760
uh another comment

00:22:31,200 --> 00:22:35,520
um that i'm gonna show right now which

00:22:33,760 --> 00:22:38,000
is the drift ignore

00:22:35,520 --> 00:22:40,080
the drift ignore file if you start with

00:22:38,000 --> 00:22:43,600
a lot of unmanaged resources

00:22:40,080 --> 00:22:45,200
in your ws accounts um it's it works

00:22:43,600 --> 00:22:47,919
pretty much like a drift uh

00:22:45,200 --> 00:22:49,039
the get ignore file sorry um that you

00:22:47,919 --> 00:22:51,840
already know you put

00:22:49,039 --> 00:22:54,400
um stuff that you want to ignore in it

00:22:51,840 --> 00:22:57,280
so it takes a resource type like

00:22:54,400 --> 00:22:59,120
an imuser and an id or a name depending

00:22:57,280 --> 00:23:02,960
on the situation and here we are

00:22:59,120 --> 00:23:05,840
um it will be ignored from now on so

00:23:02,960 --> 00:23:07,440
until well when you find the time to fix

00:23:05,840 --> 00:23:09,360
the issue

00:23:07,440 --> 00:23:11,200
it won't be reported every time you run

00:23:09,360 --> 00:23:14,799
the tool um

00:23:11,200 --> 00:23:18,559
and definitely i would

00:23:14,799 --> 00:23:19,120
add this file to your docker image so

00:23:18,559 --> 00:23:22,159
once

00:23:19,120 --> 00:23:22,799
every time you run drift ctl with the

00:23:22,159 --> 00:23:26,080
drifting

00:23:22,799 --> 00:23:29,600
file you can ship that on ci or

00:23:26,080 --> 00:23:29,600
have it as a recurring

00:23:30,720 --> 00:23:34,880
cron like every hour so you get reports

00:23:33,280 --> 00:23:36,159
about what's moving in your

00:23:34,880 --> 00:23:40,159
infrastructure

00:23:36,159 --> 00:23:43,440
um so yeah that's um the sub common

00:23:40,159 --> 00:23:45,760
gen drift ignore if you have many many

00:23:43,440 --> 00:23:47,200
drifts and you don't want to enter

00:23:45,760 --> 00:23:50,159
hundreds of them

00:23:47,200 --> 00:23:50,799
um in the file i can imagine it's it's a

00:23:50,159 --> 00:23:54,240
pane

00:23:50,799 --> 00:23:56,640
uh so you can just um use

00:23:54,240 --> 00:23:57,520
the previous export here the json output

00:23:56,640 --> 00:24:00,960
and uh

00:23:57,520 --> 00:24:04,480
pipe it inside the driftignore comment

00:24:00,960 --> 00:24:07,120
so this is uh basically a generator

00:24:04,480 --> 00:24:09,120
converter from json to drift ignore

00:24:07,120 --> 00:24:11,279
so so you can get started in seconds

00:24:09,120 --> 00:24:14,480
instead of having hundreds of drifts uh

00:24:11,279 --> 00:24:17,600
now you are uh you are starting from

00:24:14,480 --> 00:24:18,159
uh clean states from fresh like zero

00:24:17,600 --> 00:24:19,760
drift

00:24:18,159 --> 00:24:21,760
and you still have work to do but at

00:24:19,760 --> 00:24:22,960
least you can get reports about the new

00:24:21,760 --> 00:24:26,080
things

00:24:22,960 --> 00:24:28,159
another feature is um

00:24:26,080 --> 00:24:29,200
the filters um probably you're not

00:24:28,159 --> 00:24:32,799
interested by

00:24:29,200 --> 00:24:33,279
everything in your um in your aws

00:24:32,799 --> 00:24:36,559
account

00:24:33,279 --> 00:24:39,760
past um the first uh uh

00:24:36,559 --> 00:24:42,080
days so probably you want only

00:24:39,760 --> 00:24:43,520
uh i don't know uh security reports on

00:24:42,080 --> 00:24:46,960
security groups um

00:24:43,520 --> 00:24:49,760
tags uh i don't know i am users um

00:24:46,960 --> 00:24:51,919
so basically you can do this with drift

00:24:49,760 --> 00:24:55,840
ctl filters

00:24:51,919 --> 00:24:58,720
so it's uh using jamespath

00:24:55,840 --> 00:25:01,120
it's a query language if you are already

00:24:58,720 --> 00:25:04,320
familiar with the aws cli

00:25:01,120 --> 00:25:05,360
uh it's the same um it's the same one so

00:25:04,320 --> 00:25:08,400
it's very

00:25:05,360 --> 00:25:11,520
useful to analyze

00:25:08,400 --> 00:25:12,960
and report on very specific areas of

00:25:11,520 --> 00:25:15,840
your ws accounts

00:25:12,960 --> 00:25:15,840
and

00:25:16,000 --> 00:25:23,279
to get focused reports

00:25:19,440 --> 00:25:25,919
so yeah that's the drift ignore and

00:25:23,279 --> 00:25:26,400
well yeah as i mentioned um i would

00:25:25,919 --> 00:25:29,520
build

00:25:26,400 --> 00:25:32,559
a drift drift ctl

00:25:29,520 --> 00:25:36,000
docker image to ship in ci

00:25:32,559 --> 00:25:36,000
so we have um

00:25:36,799 --> 00:25:40,880
quite a cool different options to

00:25:39,919 --> 00:25:44,720
integrate in

00:25:40,880 --> 00:25:48,240
in your pipelines so as a recurring task

00:25:44,720 --> 00:25:50,640
um as a crime job like every hour or so

00:25:48,240 --> 00:25:51,919
so you can get alerts when something

00:25:50,640 --> 00:25:55,039
goes wrong

00:25:51,919 --> 00:25:58,559
like in minutes or at least um

00:25:55,039 --> 00:26:01,360
every hour or so so we've seen

00:25:58,559 --> 00:26:04,080
different use cases some people are

00:26:01,360 --> 00:26:07,600
using drift ctl

00:26:04,080 --> 00:26:09,279
to ensure all the scripts and stuff done

00:26:07,600 --> 00:26:13,360
after the last term from apply applying

00:26:09,279 --> 00:26:13,360
a pipeline don't create a mess

00:26:13,520 --> 00:26:17,039
but we've seen things like the other way

00:26:16,400 --> 00:26:20,400
around

00:26:17,039 --> 00:26:22,000
like people wanting to ensure

00:26:20,400 --> 00:26:24,080
that the situation is perfectly under

00:26:22,000 --> 00:26:27,600
control before doing anything

00:26:24,080 --> 00:26:30,320
with terraform um in the first place so

00:26:27,600 --> 00:26:31,279
maybe just like a safety check before

00:26:30,320 --> 00:26:34,320
terror from apply

00:26:31,279 --> 00:26:37,279
changes uh anything on the state um

00:26:34,320 --> 00:26:39,360
like the few cases that we just

00:26:37,279 --> 00:26:40,320
showcased in this situation so we

00:26:39,360 --> 00:26:43,660
support

00:26:40,320 --> 00:26:44,880
uh well support we have examples for

00:26:43,660 --> 00:26:49,440
[Music]

00:26:44,880 --> 00:26:52,799
github actions for circle ci for git lab

00:26:49,440 --> 00:26:55,679
for jenkins well we have them all so

00:26:52,799 --> 00:26:58,320
yeah i strongly advise you to deploy

00:26:55,679 --> 00:26:58,960
uh that kind of tools uh like drift ctl

00:26:58,320 --> 00:27:01,200
um

00:26:58,960 --> 00:27:02,240
in your ci pipeline exactly like you

00:27:01,200 --> 00:27:06,159
would get reports

00:27:02,240 --> 00:27:09,279
uh by just executing uh terraform plan

00:27:06,159 --> 00:27:11,440
regularly so

00:27:09,279 --> 00:27:12,799
uh we're approaching at the end of this

00:27:11,440 --> 00:27:16,080
talk so drift ctl

00:27:12,799 --> 00:27:19,440
it's our open source solution for

00:27:16,080 --> 00:27:22,200
drift management it's written in go it's

00:27:19,440 --> 00:27:24,159
an apache it's been released as an

00:27:22,200 --> 00:27:27,440
aperture license

00:27:24,159 --> 00:27:29,679
we have support for ws and github if you

00:27:27,440 --> 00:27:32,960
write your you manage your github

00:27:29,679 --> 00:27:36,399
account using terraform it works as well

00:27:32,960 --> 00:27:39,440
we have support for um local

00:27:36,399 --> 00:27:40,159
states as free states http states uh we

00:27:39,440 --> 00:27:43,120
recently

00:27:40,159 --> 00:27:45,200
released a reference cloud um back-end

00:27:43,120 --> 00:27:48,960
support as well

00:27:45,200 --> 00:27:52,159
so as you saw we have a cool filtering

00:27:48,960 --> 00:27:54,000
um options and the drift ignore file as

00:27:52,159 --> 00:27:57,120
well is very useful for

00:27:54,000 --> 00:28:02,480
those of you who have big accounts

00:27:57,120 --> 00:28:05,520
shared accounts uh our in migration etc

00:28:02,480 --> 00:28:09,120
we are uh highly available on

00:28:05,520 --> 00:28:11,840
uh discord so if you go to driftctl.com

00:28:09,120 --> 00:28:14,080
d it will send you to our community

00:28:11,840 --> 00:28:14,880
discord we are there talk to us we are

00:28:14,080 --> 00:28:18,240
we love

00:28:14,880 --> 00:28:21,760
talking to you sharing your feedback um

00:28:18,240 --> 00:28:24,240
we also do everything on github like

00:28:21,760 --> 00:28:27,600
cloudskip slash drift ctl

00:28:24,240 --> 00:28:31,039
um there is a lot of discussions

00:28:27,600 --> 00:28:34,080
um we are heavily

00:28:31,039 --> 00:28:35,120
community based for everything related

00:28:34,080 --> 00:28:38,559
to decisions

00:28:35,120 --> 00:28:42,799
product decisions so please uh upvote

00:28:38,559 --> 00:28:46,720
for the next cloud next features etc so

00:28:42,799 --> 00:28:50,640
we do take those very very seriously

00:28:46,720 --> 00:28:54,000
and we do some live streams sometimes

00:28:50,640 --> 00:28:55,360
uh last thursdays but we will uh doing

00:28:54,000 --> 00:28:59,760
do it again

00:28:55,360 --> 00:29:03,120
with um spring coming so

00:28:59,760 --> 00:29:05,520
if you joined um during the talk

00:29:03,120 --> 00:29:06,320
um and you don't know what i'm talking

00:29:05,520 --> 00:29:10,240
about

00:29:06,320 --> 00:29:12,799
uh what to remember basically is that

00:29:10,240 --> 00:29:14,960
almost everyone is experiencing

00:29:12,799 --> 00:29:17,760
infrastructure drift

00:29:14,960 --> 00:29:18,320
and that we built drift ctl drift

00:29:17,760 --> 00:29:21,840
control

00:29:18,320 --> 00:29:24,880
as an open source tool to help um

00:29:21,840 --> 00:29:28,480
increase the knowledge and security of

00:29:24,880 --> 00:29:32,000
automated cloud infrastructures so

00:29:28,480 --> 00:29:34,640
thank you for your attention and

00:29:32,000 --> 00:29:35,600
thanks for watching see you soon on

00:29:34,640 --> 00:29:40,430
discord or

00:29:35,600 --> 00:29:48,829
on github bye

00:29:40,430 --> 00:29:48,829
[Music]

00:29:52,960 --> 00:29:55,039

YouTube URL: https://www.youtube.com/watch?v=YtqxOnNSgpE


