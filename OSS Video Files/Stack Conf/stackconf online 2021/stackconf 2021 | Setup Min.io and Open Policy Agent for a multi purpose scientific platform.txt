Title: stackconf 2021 | Setup Min.io and Open Policy Agent for a multi purpose scientific platform
Publication date: 2021-06-24
Playlist: stackconf online 2021
Description: 
	by Diego Ciangottini

At the Italian National Institute for Nuclear Physics (INFN) an effort is being made in leveraging modern cloud-native paradigms to build the scientific analysis infrastructure of the future. The talk will focus on the adopted storage platform that is based on Min.io with a fine grained authorization model obtained by the combination of the AWS STS authentication flow and the native integration with the OpenPolicyAgent. Moreover, a set of tools have been developed to allow users to access data with different mode spanning from the canonical S3 APIs until a POSIX like experience.



NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/netways/webinare/

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/


Musik: https://www.frametraxx.de/
Captions: 
	00:00:05,660 --> 00:00:13,119
[Applause]

00:00:06,120 --> 00:00:13,119
[Music]

00:00:13,360 --> 00:00:16,080
hello

00:00:13,920 --> 00:00:17,199
everyone i'm diego changutini from

00:00:16,080 --> 00:00:19,680
infant

00:00:17,199 --> 00:00:20,800
and i'm going to present you uh our

00:00:19,680 --> 00:00:24,320
setup

00:00:20,800 --> 00:00:25,359
of minao instance plus open policy agent

00:00:24,320 --> 00:00:28,960
for a

00:00:25,359 --> 00:00:32,239
multi-purpose scientific platform so

00:00:28,960 --> 00:00:34,800
emma and i i'm a tea researcher

00:00:32,239 --> 00:00:36,000
at the national institute of nuclear

00:00:34,800 --> 00:00:39,280
physics

00:00:36,000 --> 00:00:43,040
and i'm involved on our r d activities

00:00:39,280 --> 00:00:45,600
to deploy cloud native solutions uh

00:00:43,040 --> 00:00:46,399
dedicated to the next generation of data

00:00:45,600 --> 00:00:49,680
analysis

00:00:46,399 --> 00:00:53,039
uh for uh lhc users and

00:00:49,680 --> 00:00:57,760
also infant of course

00:00:53,039 --> 00:01:00,640
so the infant is made by

00:00:57,760 --> 00:01:02,800
five research lines that for each of

00:01:00,640 --> 00:01:05,359
them corresponds to national scientific

00:01:02,800 --> 00:01:05,359
committee

00:01:05,760 --> 00:01:12,479
one of the main scientific challenges

00:01:09,439 --> 00:01:15,840
we faced is to understand

00:01:12,479 --> 00:01:17,759
uh from different perspective the

00:01:15,840 --> 00:01:19,920
universe in the first moment of the big

00:01:17,759 --> 00:01:23,200
bang and this is

00:01:19,920 --> 00:01:26,560
as you can imagine a

00:01:23,200 --> 00:01:30,079
challenge that is taken by

00:01:26,560 --> 00:01:32,799
a community of over 6 000 people

00:01:30,079 --> 00:01:34,000
with around 50 percent of them that are

00:01:32,799 --> 00:01:37,119
phd grant

00:01:34,000 --> 00:01:41,680
postdoc scholarship or or

00:01:37,119 --> 00:01:44,880
similar so heterogeneous

00:01:41,680 --> 00:01:48,000
kind of people

00:01:44,880 --> 00:01:48,000
and interaction there

00:01:48,320 --> 00:01:54,399
so the nfm facilities are spread

00:01:51,520 --> 00:01:57,920
around italy in this way four national

00:01:54,399 --> 00:02:01,840
laboratories and 20 divisions

00:01:57,920 --> 00:02:04,799
and the computing as a long tradition

00:02:01,840 --> 00:02:06,240
in this kind of experiment especially in

00:02:04,799 --> 00:02:08,319
the last 10 years

00:02:06,240 --> 00:02:09,360
it was focused on supporting lhc

00:02:08,319 --> 00:02:12,640
communities

00:02:09,360 --> 00:02:15,200
but by now the things are changing

00:02:12,640 --> 00:02:15,920
and there are other and recent use cases

00:02:15,200 --> 00:02:18,720
that are not

00:02:15,920 --> 00:02:20,640
lhc communities for example and you can

00:02:18,720 --> 00:02:23,680
see that the centers are spread

00:02:20,640 --> 00:02:26,400
around and they are composed of a solid

00:02:23,680 --> 00:02:27,200
backbone of nine million side centers

00:02:26,400 --> 00:02:30,959
plus

00:02:27,200 --> 00:02:33,280
one large national centers at knuff

00:02:30,959 --> 00:02:34,080
but there are also many other small

00:02:33,280 --> 00:02:37,840
centers

00:02:34,080 --> 00:02:37,840
spread around

00:02:38,319 --> 00:02:45,120
the inflam cloud initiative

00:02:41,680 --> 00:02:47,120
uh is a recent activity

00:02:45,120 --> 00:02:50,480
that started to provide on-demand

00:02:47,120 --> 00:02:53,280
computing resources for the infn

00:02:50,480 --> 00:02:54,160
and in particular to provide an easy

00:02:53,280 --> 00:02:57,680
access

00:02:54,160 --> 00:03:00,400
to scientific data

00:02:57,680 --> 00:03:00,400
analysis

00:03:02,000 --> 00:03:06,159
the idea is to provide composable

00:03:03,920 --> 00:03:08,879
service to extend and customize the and

00:03:06,159 --> 00:03:08,879
the environment

00:03:09,200 --> 00:03:16,239
there are also some cases

00:03:12,800 --> 00:03:18,720
in which they use ifn also

00:03:16,239 --> 00:03:21,680
provide a set of core tools to be

00:03:18,720 --> 00:03:21,680
centrally managed

00:03:22,159 --> 00:03:26,640
for example we propose some youth update

00:03:25,360 --> 00:03:29,599
as a service

00:03:26,640 --> 00:03:30,560
options object stores that are the topic

00:03:29,599 --> 00:03:34,080
of this talk

00:03:30,560 --> 00:03:36,879
and signature activity

00:03:34,080 --> 00:03:38,720
federating the resources is also another

00:03:36,879 --> 00:03:39,599
important aspect because as you see

00:03:38,720 --> 00:03:42,799
before

00:03:39,599 --> 00:03:43,599
we have centers spread around italy and

00:03:42,799 --> 00:03:48,080
so it's an

00:03:43,599 --> 00:03:48,080
important feature for us

00:03:48,319 --> 00:03:53,439
and also the main ambition of this

00:03:51,599 --> 00:03:54,480
project is to become the hubble

00:03:53,439 --> 00:03:58,159
reference for

00:03:54,480 --> 00:04:01,200
all the activities and projects at infn

00:03:58,159 --> 00:04:04,480
the infrastructure based on the backbone

00:04:01,200 --> 00:04:07,760
so the main centers that

00:04:04,480 --> 00:04:09,599
in principle uh provide all the

00:04:07,760 --> 00:04:11,120
requested resources that are centrally

00:04:09,599 --> 00:04:14,239
managed and then a

00:04:11,120 --> 00:04:17,440
federation or smaller site providing

00:04:14,239 --> 00:04:20,400
more or less opportunistic resources for

00:04:17,440 --> 00:04:20,400
user deployments

00:04:20,959 --> 00:04:25,440
the data storage is one of the most

00:04:23,919 --> 00:04:28,320
challenged

00:04:25,440 --> 00:04:29,919
problem that we have in this kind of

00:04:28,320 --> 00:04:32,080
computing

00:04:29,919 --> 00:04:33,040
and in particular we need to provide

00:04:32,080 --> 00:04:36,720
cloud storage

00:04:33,040 --> 00:04:39,040
uh hosted on the backbone that means

00:04:36,720 --> 00:04:40,720
having a gel distributed storage

00:04:39,040 --> 00:04:43,680
federation

00:04:40,720 --> 00:04:44,160
and heterogeneous set of requirements

00:04:43,680 --> 00:04:46,720
that

00:04:44,160 --> 00:04:49,199
goes from the object size to the

00:04:46,720 --> 00:04:53,360
workflow and data access

00:04:49,199 --> 00:04:56,000
and also means providing for example

00:04:53,360 --> 00:04:57,360
one important thing is for us the third

00:04:56,000 --> 00:05:00,400
data paradigm

00:04:57,360 --> 00:05:03,440
so findable accessible interoperable

00:05:00,400 --> 00:05:06,000
reusable data

00:05:03,440 --> 00:05:06,590
in particular we want to achieve this

00:05:06,000 --> 00:05:08,320
with the

00:05:06,590 --> 00:05:12,080
[Music]

00:05:08,320 --> 00:05:15,600
least effort possible for the end user

00:05:12,080 --> 00:05:18,639
and in particular with a focus on the r

00:05:15,600 --> 00:05:22,320
of the acronym so make sustainable

00:05:18,639 --> 00:05:22,320
the reuse of the data

00:05:23,280 --> 00:05:28,080
the requirements in few words we want

00:05:25,919 --> 00:05:30,320
dynamic user registration

00:05:28,080 --> 00:05:31,840
eventually compatible with odc

00:05:30,320 --> 00:05:34,240
authentication

00:05:31,840 --> 00:05:35,600
fine grain authorization read-only read

00:05:34,240 --> 00:05:38,400
write verifying

00:05:35,600 --> 00:05:39,680
or per-user group you want easy and

00:05:38,400 --> 00:05:43,280
reboost operation

00:05:39,680 --> 00:05:46,479
that eventually comes to githubs

00:05:43,280 --> 00:05:50,080
you want to access data via projects

00:05:46,479 --> 00:05:50,880
and web ui access vendor network

00:05:50,080 --> 00:05:55,919
solution

00:05:50,880 --> 00:05:59,199
and open source so guess what

00:05:55,919 --> 00:06:02,720
yes this small set of requirements

00:05:59,199 --> 00:06:06,639
joking the problem is

00:06:02,720 --> 00:06:10,639
that we think we

00:06:06,639 --> 00:06:14,080
kind of found the proper balance

00:06:10,639 --> 00:06:17,039
using uh min io instance

00:06:14,080 --> 00:06:18,240
and that is compatible with a stream

00:06:17,039 --> 00:06:22,080
that is a goofy

00:06:18,240 --> 00:06:24,479
powerful webi built in in this software

00:06:22,080 --> 00:06:26,560
and a proven scalability it also

00:06:24,479 --> 00:06:30,240
provides a native integration with

00:06:26,560 --> 00:06:34,160
aws sts credentials

00:06:30,240 --> 00:06:36,639
and an external odc can

00:06:34,160 --> 00:06:38,639
interact with this to get introduced so

00:06:36,639 --> 00:06:40,720
it's a good thing for us

00:06:38,639 --> 00:06:42,400
and also the authorization policies can

00:06:40,720 --> 00:06:45,680
be managed in a fine-grained

00:06:42,400 --> 00:06:45,680
way by opa

00:06:46,880 --> 00:06:50,400
user management so indigo yam has been

00:06:49,840 --> 00:06:53,199
used

00:06:50,400 --> 00:06:54,479
because it's capable of brokering

00:06:53,199 --> 00:06:58,000
different kind of

00:06:54,479 --> 00:07:00,400
identity providers and produce

00:06:58,000 --> 00:07:02,639
for us some important registration from

00:07:00,400 --> 00:07:05,759
functionalities for example

00:07:02,639 --> 00:07:07,759
we can manage groups or collaboration in

00:07:05,759 --> 00:07:08,479
the experiments in a proper way with the

00:07:07,759 --> 00:07:12,240
well-defined

00:07:08,479 --> 00:07:12,800
flows we provide services also to manage

00:07:12,240 --> 00:07:16,000
this

00:07:12,800 --> 00:07:18,080
on web ui and so on and so forth and

00:07:16,000 --> 00:07:20,080
also attribute assignment and account

00:07:18,080 --> 00:07:23,199
linking is not a problem

00:07:20,080 --> 00:07:26,400
is included out of the box

00:07:23,199 --> 00:07:29,360
and finally this

00:07:26,400 --> 00:07:30,639
is capable of act as an identity

00:07:29,360 --> 00:07:32,960
provider

00:07:30,639 --> 00:07:34,319
with any odc compliance service

00:07:32,960 --> 00:07:38,240
underneath so

00:07:34,319 --> 00:07:41,280
it's very important and in fact

00:07:38,240 --> 00:07:44,879
this allowed us to integrate indigo

00:07:41,280 --> 00:07:47,919
ion with a min io using the aws

00:07:44,879 --> 00:07:49,440
sds credential integrated in this

00:07:47,919 --> 00:07:52,080
software

00:07:49,440 --> 00:07:53,199
that basically provide a set of

00:07:52,080 --> 00:07:55,919
temporary credentials

00:07:53,199 --> 00:07:57,039
in exchange with your oedc token

00:07:55,919 --> 00:08:00,960
basically

00:07:57,039 --> 00:08:03,599
and we follow the assume role with web

00:08:00,960 --> 00:08:07,440
identity flow that is supported

00:08:03,599 --> 00:08:11,039
and yeah our ayami instance

00:08:07,440 --> 00:08:14,400
was integrated without any problem so

00:08:11,039 --> 00:08:18,160
good point there and

00:08:14,400 --> 00:08:22,240
okay the authorization part uh opa

00:08:18,160 --> 00:08:26,720
uh the open policy agent stuff

00:08:22,240 --> 00:08:30,479
works pretty well in our scenario

00:08:26,720 --> 00:08:34,080
for example we are able to use this

00:08:30,479 --> 00:08:35,839
general purpose policy engine co-located

00:08:34,080 --> 00:08:38,880
with the nvidia server

00:08:35,839 --> 00:08:39,760
and where the amino server forward all

00:08:38,880 --> 00:08:42,640
the information

00:08:39,760 --> 00:08:44,240
token to this service and the service is

00:08:42,640 --> 00:08:47,760
capable of taking which is an

00:08:44,240 --> 00:08:51,040
fine grained and basically

00:08:47,760 --> 00:08:51,680
checking a simple set of files provided

00:08:51,040 --> 00:08:54,720
by

00:08:51,680 --> 00:08:56,080
by us so also dynamic configuration is

00:08:54,720 --> 00:08:58,320
possible there

00:08:56,080 --> 00:09:01,279
and it's totally decoupled from the

00:08:58,320 --> 00:09:05,360
storage configuration

00:09:01,279 --> 00:09:08,560
here you can see an example of this

00:09:05,360 --> 00:09:12,480
i use rris with a json web token

00:09:08,560 --> 00:09:15,440
and the amino usds follow all the claim

00:09:12,480 --> 00:09:18,800
information to the api's opi server

00:09:15,440 --> 00:09:20,399
that in turn checks if the user is

00:09:18,800 --> 00:09:24,080
authorized to do

00:09:20,399 --> 00:09:26,720
that query that api

00:09:24,080 --> 00:09:29,440
and decide whether to not to authorize

00:09:26,720 --> 00:09:32,880
the operation

00:09:29,440 --> 00:09:36,160
how we store the policies we collect

00:09:32,880 --> 00:09:39,360
them in bundles that we put on github

00:09:36,160 --> 00:09:42,160
and opi is capable of taking them

00:09:39,360 --> 00:09:44,240
periodically without any required

00:09:42,160 --> 00:09:47,200
requirement for our start

00:09:44,240 --> 00:09:49,279
and they immediately applied to the

00:09:47,200 --> 00:09:52,399
storage class

00:09:49,279 --> 00:09:55,680
and it is quite good so we collect

00:09:52,399 --> 00:09:57,680
all our policies uh group policies user

00:09:55,680 --> 00:09:59,839
policies per file policies

00:09:57,680 --> 00:10:03,120
all in one place and we have complete

00:09:59,839 --> 00:10:03,120
complete control on it

00:10:03,680 --> 00:10:09,920
so far so good and now we need

00:10:07,040 --> 00:10:11,920
we needed some tools to enable users to

00:10:09,920 --> 00:10:15,120
interact with storage in the

00:10:11,920 --> 00:10:19,360
easiest way possible so we start for

00:10:15,120 --> 00:10:22,560
using a tool to manage

00:10:19,360 --> 00:10:25,839
open id connect auto

00:10:22,560 --> 00:10:29,120
authentication uh providing

00:10:25,839 --> 00:10:32,560
an easy way like an ssh

00:10:29,120 --> 00:10:34,240
agent to take access token when needed

00:10:32,560 --> 00:10:36,079
by the user

00:10:34,240 --> 00:10:38,720
securely storing the long-living

00:10:36,079 --> 00:10:40,399
credential and exposing the short-lived

00:10:38,720 --> 00:10:44,079
ones

00:10:40,399 --> 00:10:47,360
and also integrable via api libraries

00:10:44,079 --> 00:10:50,240
python go and c plus plus and it was

00:10:47,360 --> 00:10:50,880
this was particularly useful to

00:10:50,240 --> 00:10:54,000
integrate

00:10:50,880 --> 00:10:57,680
odc agent with our clone so

00:10:54,000 --> 00:11:00,880
our clone made possible for us

00:10:57,680 --> 00:11:02,720
to mount or remote buckets as a folder

00:11:00,880 --> 00:11:05,760
for the user

00:11:02,720 --> 00:11:09,440
and using posix access so to

00:11:05,760 --> 00:11:13,440
work on with this data we

00:11:09,440 --> 00:11:17,920
produce a small patch to integrate

00:11:13,440 --> 00:11:20,959
odc agent ns sns-3 provider

00:11:17,920 --> 00:11:21,440
for our clone where the tokens are taken

00:11:20,959 --> 00:11:24,560
from a

00:11:21,440 --> 00:11:26,720
aodc exchange with the min io

00:11:24,560 --> 00:11:28,480
and then convert it into temporary

00:11:26,720 --> 00:11:32,160
credential temporary

00:11:28,480 --> 00:11:35,440
s3 credentials so user in this way

00:11:32,160 --> 00:11:36,480
one set up oedc agent can confirm take

00:11:35,440 --> 00:11:39,200
their bucket

00:11:36,480 --> 00:11:40,560
amount locally and work from there and

00:11:39,200 --> 00:11:44,320
that is why

00:11:40,560 --> 00:11:47,360
quite a success for us also backup

00:11:44,320 --> 00:11:50,480
our supportive rustic for example

00:11:47,360 --> 00:11:54,240
that can talk directly to our clones so

00:11:50,480 --> 00:11:57,839
it's a very very successful story for us

00:11:54,240 --> 00:12:01,120
and it is used to with a really good

00:11:57,839 --> 00:12:03,519
success from our users uh with

00:12:01,120 --> 00:12:04,880
even more success he has been introduced

00:12:03,519 --> 00:12:07,519
in a sds

00:12:04,880 --> 00:12:09,200
wire software that basically does not

00:12:07,519 --> 00:12:12,639
need oedc agent but

00:12:09,200 --> 00:12:15,920
it's an all-in-one tool

00:12:12,639 --> 00:12:16,800
as a configure gas guided configuration

00:12:15,920 --> 00:12:19,839
procedure

00:12:16,800 --> 00:12:22,880
where you set up your credential renewal

00:12:19,839 --> 00:12:26,399
and mount your bucket all in one and in

00:12:22,880 --> 00:12:28,399
this is demonstrated

00:12:26,399 --> 00:12:29,600
during time to be the preferred solution

00:12:28,399 --> 00:12:33,680
to mount a bucket

00:12:29,600 --> 00:12:33,680
content on a laptop for example

00:12:35,120 --> 00:12:42,240
so regarding instead the access via

00:12:38,880 --> 00:12:43,760
api in python we integrated odc edge and

00:12:42,240 --> 00:12:48,160
an sds credential with

00:12:43,760 --> 00:12:51,360
both u3 library so one can access this

00:12:48,160 --> 00:12:53,440
exactly with one line of code exchange

00:12:51,360 --> 00:12:56,639
their token

00:12:53,440 --> 00:13:00,399
all everything under the hood

00:12:56,639 --> 00:13:03,200
and you can see from this line from this

00:13:00,399 --> 00:13:04,800
snapshot it's very simple to use

00:13:03,200 --> 00:13:07,360
instantiate your

00:13:04,800 --> 00:13:08,639
session with wine liner code indicating

00:13:07,360 --> 00:13:13,200
only the profile

00:13:08,639 --> 00:13:13,200
of odc agent you need to ask the token

00:13:13,360 --> 00:13:20,399
so was very good experience

00:13:17,360 --> 00:13:22,079
and how we achieve this how our

00:13:20,399 --> 00:13:24,560
deployment works

00:13:22,079 --> 00:13:26,560
so we have a centrally managed

00:13:24,560 --> 00:13:30,079
deployment

00:13:26,560 --> 00:13:30,959
that is running on an aha kubernetes

00:13:30,079 --> 00:13:34,639
cluster

00:13:30,959 --> 00:13:37,120
that is managed by flux cd for

00:13:34,639 --> 00:13:38,240
the configuration of the infrastructure

00:13:37,120 --> 00:13:41,199
and

00:13:38,240 --> 00:13:41,920
using opa bundles for the policies we

00:13:41,199 --> 00:13:46,639
also

00:13:41,920 --> 00:13:46,639
provide cloud on-demand

00:13:47,120 --> 00:13:54,480
recipes to bring up these clusters

00:13:50,480 --> 00:13:58,160
on demand using automated procedure

00:13:54,480 --> 00:13:59,360
and charts in particular available via

00:13:58,160 --> 00:14:02,480
web ui thanks to

00:13:59,360 --> 00:14:06,240
cuba apps services

00:14:02,480 --> 00:14:10,320
in one schema you can see here

00:14:06,240 --> 00:14:12,800
how they are managed

00:14:10,320 --> 00:14:13,440
and you see everything starts from

00:14:12,800 --> 00:14:15,760
github

00:14:13,440 --> 00:14:17,680
both at infrastructural configuration

00:14:15,760 --> 00:14:20,959
and data access policies

00:14:17,680 --> 00:14:24,079
and then goes from flux cd to open

00:14:20,959 --> 00:14:27,120
policy agent for the integration

00:14:24,079 --> 00:14:27,839
obtaining a min ion in interface with

00:14:27,120 --> 00:14:30,560
the

00:14:27,839 --> 00:14:31,279
indigo iem that is capable of managed

00:14:30,560 --> 00:14:34,240
access

00:14:31,279 --> 00:14:35,040
via for example jupiter a notebook

00:14:34,240 --> 00:14:38,639
configured with

00:14:35,040 --> 00:14:41,790
odc agent posix

00:14:38,639 --> 00:14:43,680
sds wire on the laptop and our clone for

00:14:41,790 --> 00:14:46,160
[Music]

00:14:43,680 --> 00:14:48,639
synchronization sync the embed cap for

00:14:46,160 --> 00:14:48,639
example

00:14:49,600 --> 00:14:53,680
so for github's control here and the

00:14:52,720 --> 00:14:56,720
self-managed

00:14:53,680 --> 00:14:59,600
solution is based on

00:14:56,720 --> 00:15:00,399
ansible recipe to bring up cube apps on

00:14:59,600 --> 00:15:03,760
any

00:15:00,399 --> 00:15:06,959
kubernetes cluster being it on them

00:15:03,760 --> 00:15:09,920
on premise or public cloud

00:15:06,959 --> 00:15:11,199
the catalog comes with pre-configured

00:15:09,920 --> 00:15:14,000
apps and one of these

00:15:11,199 --> 00:15:14,880
is this setup particular setup of amino

00:15:14,000 --> 00:15:18,079
tenants

00:15:14,880 --> 00:15:19,040
that talk to ion server that you can

00:15:18,079 --> 00:15:21,199
specify

00:15:19,040 --> 00:15:22,639
you can also specifically open opa

00:15:21,199 --> 00:15:25,519
bundles that you want to

00:15:22,639 --> 00:15:25,519
to to use

00:15:25,760 --> 00:15:30,480
so wrapping up uh we have this system in

00:15:29,680 --> 00:15:32,880
production

00:15:30,480 --> 00:15:33,839
since a while and we are quite satisfied

00:15:32,880 --> 00:15:36,720
with this

00:15:33,839 --> 00:15:37,519
and we also support this not only for

00:15:36,720 --> 00:15:39,759
physics but

00:15:37,519 --> 00:15:42,399
we also have for example pandemic

00:15:39,759 --> 00:15:46,079
related research using this uh plan or

00:15:42,399 --> 00:15:49,360
project planet for example the r d

00:15:46,079 --> 00:15:51,839
still continue uh testing uh multi-cloud

00:15:49,360 --> 00:15:54,480
scenarios and also improving the

00:15:51,839 --> 00:15:57,040
dedicated tools that i presented

00:15:54,480 --> 00:15:58,560
we are also trying out a mineral gateway

00:15:57,040 --> 00:16:08,079
to reduce the latency

00:15:58,560 --> 00:16:08,800
in case of distributed cache instance we

00:16:08,079 --> 00:16:13,120
have now

00:16:08,800 --> 00:16:15,600
uh a quick demo where we see

00:16:13,120 --> 00:16:16,240
uh the proper way to access this cloud

00:16:15,600 --> 00:16:20,800
storage

00:16:16,240 --> 00:16:20,800
and how easy is for the for the user for

00:16:20,839 --> 00:16:26,320
example

00:16:22,959 --> 00:16:30,079
okay so well let's start with

00:16:26,320 --> 00:16:33,199
odc agent um so we see

00:16:30,079 --> 00:16:36,959
how to configure it and retrieve the

00:16:33,199 --> 00:16:40,399
personal access token uh in a ssh

00:16:36,959 --> 00:16:43,680
agent fashion so

00:16:40,399 --> 00:16:47,199
we start basically

00:16:43,680 --> 00:16:50,720
generating a new configuration

00:16:47,199 --> 00:16:55,040
and how we are using the device flow

00:16:50,720 --> 00:16:59,920
authentication for the odc im

00:16:55,040 --> 00:17:03,279
and we call the profile stack conf 2021

00:16:59,920 --> 00:17:06,400
we insert here the im

00:17:03,279 --> 00:17:09,679
service endpoint

00:17:06,400 --> 00:17:18,240
and so that in this case

00:17:09,679 --> 00:17:22,319
is login.cloud.infm.i.t. and

00:17:18,240 --> 00:17:25,520
uh okay now we select this

00:17:22,319 --> 00:17:29,360
scopes should appear by now yeah

00:17:25,520 --> 00:17:32,799
the scopes and we select all this code

00:17:29,360 --> 00:17:34,960
possible we can also select a subset of

00:17:32,799 --> 00:17:38,320
those

00:17:34,960 --> 00:17:42,160
and we start registering a

00:17:38,320 --> 00:17:45,120
client for in a i am

00:17:42,160 --> 00:17:46,960
and to conclude the authentication flow

00:17:45,120 --> 00:17:50,960
we are redirected to the

00:17:46,960 --> 00:17:52,000
in a url where we need to put our device

00:17:50,960 --> 00:17:55,200
code

00:17:52,000 --> 00:17:55,200
so we copy this

00:17:55,679 --> 00:18:03,280
and we go to a browser browser

00:17:59,440 --> 00:18:03,280
and yeah

00:18:03,440 --> 00:18:08,240
so after this

00:18:08,480 --> 00:18:16,960
should appear in a moment yes i am a fan

00:18:12,840 --> 00:18:20,400
ai so we need to log in

00:18:16,960 --> 00:18:23,440
and this is a service that is brokered

00:18:20,400 --> 00:18:27,919
by indigo i am as i mentioned you before

00:18:23,440 --> 00:18:32,320
so we can authenticate using this

00:18:27,919 --> 00:18:36,000
ai service and then we are redirected to

00:18:32,320 --> 00:18:40,240
our oedc managed

00:18:36,000 --> 00:18:43,360
user as we we see in a moment

00:18:40,240 --> 00:18:44,480
so now we take the device code and we

00:18:43,360 --> 00:18:49,360
put

00:18:44,480 --> 00:18:49,360
the device code into the field

00:18:50,559 --> 00:18:54,240
exactly like this

00:18:55,360 --> 00:18:57,840
okay

00:19:03,280 --> 00:19:09,919
we allow the client and we trust

00:19:06,880 --> 00:19:12,400
the source of the client and we go

00:19:09,919 --> 00:19:12,400
further

00:19:14,160 --> 00:19:21,280
so here we are we are prompt

00:19:18,000 --> 00:19:22,080
uh for a password to encrypt the long

00:19:21,280 --> 00:19:26,240
leave

00:19:22,080 --> 00:19:29,360
credentials in a secure manner

00:19:26,240 --> 00:19:30,320
i missed the first two puzzles now i put

00:19:29,360 --> 00:19:33,840
it

00:19:30,320 --> 00:19:36,160
the right one and

00:19:33,840 --> 00:19:36,160
okay

00:19:36,960 --> 00:19:43,919
so now we see that we can retrieve

00:19:40,320 --> 00:19:45,679
a token for the token using odc token

00:19:43,919 --> 00:19:47,679
and the name of the profile we used

00:19:45,679 --> 00:19:50,640
before that is stack conf

00:19:47,679 --> 00:19:50,640
00:19:51,039 --> 00:19:57,440
that's that's good

00:19:54,400 --> 00:20:01,360
and now we can see the the

00:19:57,440 --> 00:20:04,640
payload of this token using

00:20:01,360 --> 00:20:08,320
jwt dot io

00:20:04,640 --> 00:20:09,919
we put the token in there and we see

00:20:08,320 --> 00:20:11,840
that

00:20:09,919 --> 00:20:12,960
eventually we have all the information

00:20:11,840 --> 00:20:14,960
we need for

00:20:12,960 --> 00:20:16,240
authorization for example at cloud

00:20:14,960 --> 00:20:19,440
storage level

00:20:16,240 --> 00:20:23,280
we have the groups preferred username

00:20:19,440 --> 00:20:23,280
and so on and so forth

00:20:24,640 --> 00:20:31,120
now uh well

00:20:27,919 --> 00:20:35,760
what we can do now is let's see the

00:20:31,120 --> 00:20:39,360
web ui for min io how can we login

00:20:35,760 --> 00:20:40,000
so we go to the endpoint of media use

00:20:39,360 --> 00:20:43,039
service

00:20:40,000 --> 00:20:46,480
of infant cloud

00:20:43,039 --> 00:20:50,520
and here we go

00:20:46,480 --> 00:20:54,159
we login with open id we have been

00:20:50,520 --> 00:20:57,200
redirected to the

00:20:54,159 --> 00:20:58,559
very same press procedure before but

00:20:57,200 --> 00:21:01,679
since we already

00:20:58,559 --> 00:21:04,080
logged in before for the odc agent

00:21:01,679 --> 00:21:05,840
we are allowed to to access without

00:21:04,080 --> 00:21:08,320
further ado

00:21:05,840 --> 00:21:09,280
and you see here the buckets that i'm

00:21:08,320 --> 00:21:12,960
authorized to

00:21:09,280 --> 00:21:15,919
to see are the scratch one that

00:21:12,960 --> 00:21:16,559
is for everyone chango tiny one that is

00:21:15,919 --> 00:21:19,760
my own

00:21:16,559 --> 00:21:23,200
bucket and china that is the

00:21:19,760 --> 00:21:27,280
a group in which uh i am um

00:21:23,200 --> 00:21:30,640
in the en configuration

00:21:27,280 --> 00:21:32,880
then we are now trying to use

00:21:30,640 --> 00:21:35,120
our clone i starting to use a new

00:21:32,880 --> 00:21:37,120
configuration

00:21:35,120 --> 00:21:38,720
and when the configuration with our

00:21:37,120 --> 00:21:42,320
clone

00:21:38,720 --> 00:21:46,080
is being stacked demo in this case

00:21:42,320 --> 00:21:49,200
we set up a storage class that is uh

00:21:46,080 --> 00:21:50,880
we are going to find out that is the

00:21:49,200 --> 00:21:58,240
number four

00:21:50,880 --> 00:22:01,600
so we select amazon s3 compliant storage

00:21:58,240 --> 00:22:04,159
and so we put four

00:22:01,600 --> 00:22:04,159
in here

00:22:04,640 --> 00:22:11,919
yeah we see enough icloud and we put

00:22:08,240 --> 00:22:13,440
four in here and then we are prompt with

00:22:11,919 --> 00:22:17,360
a set of

00:22:13,440 --> 00:22:21,039
uh different providers for s3 cloud

00:22:17,360 --> 00:22:25,039
where we have the ifm with sds i

00:22:21,039 --> 00:22:27,440
am put seven we go on without specifying

00:22:25,039 --> 00:22:30,159
any specific credentials because they

00:22:27,440 --> 00:22:30,720
they will be generated automatically

00:22:30,159 --> 00:22:33,919
using

00:22:30,720 --> 00:22:33,919
our access token

00:22:34,799 --> 00:22:40,400
and then we need to put the

00:22:38,240 --> 00:22:41,600
name of the profile and how it is here

00:22:40,400 --> 00:22:45,840
we are using

00:22:41,600 --> 00:22:49,440
so will be stuck demo

00:22:45,840 --> 00:22:49,440
conf 2021

00:22:49,760 --> 00:22:58,159
and then from there on we do not put

00:22:53,840 --> 00:22:58,159
any access key or secret key

00:22:58,720 --> 00:23:02,240
no everything is default except the end

00:23:01,520 --> 00:23:06,960
point

00:23:02,240 --> 00:23:10,000
that will be our amino instance so https

00:23:06,960 --> 00:23:10,000
mean i you

00:23:10,400 --> 00:23:14,480
cloud infant.it

00:23:18,000 --> 00:23:25,280
and then everything should be a straight

00:23:22,400 --> 00:23:25,919
enter until the end where we configure

00:23:25,280 --> 00:23:28,240
the

00:23:25,919 --> 00:23:30,720
server correctly so you see here the

00:23:28,240 --> 00:23:34,799
final configuration is simple as this

00:23:30,720 --> 00:23:36,960
without any secret key to to put

00:23:34,799 --> 00:23:39,200
anywhere odc edge and will take care of

00:23:36,960 --> 00:23:39,200
that

00:23:40,240 --> 00:23:47,760
and now we are only left with the

00:23:43,919 --> 00:23:51,279
mount command to be used so we create a

00:23:47,760 --> 00:23:54,880
directory where we mount the

00:23:51,279 --> 00:23:58,240
changutini bucket

00:23:54,880 --> 00:24:02,880
content and we do this with a simple

00:23:58,240 --> 00:24:05,520
rclone mount command and you see

00:24:02,880 --> 00:24:06,720
that we use demon to run it in

00:24:05,520 --> 00:24:09,440
background

00:24:06,720 --> 00:24:11,760
and the stack demo is the profile

00:24:09,440 --> 00:24:12,880
register in our clone and changing is

00:24:11,760 --> 00:24:15,840
the bucket name

00:24:12,880 --> 00:24:16,640
you want to ba and to mount it on stack

00:24:15,840 --> 00:24:19,840
uh

00:24:16,640 --> 00:24:19,840
dash demo

00:24:20,480 --> 00:24:25,679
okay then

00:24:27,279 --> 00:24:35,200
if you we do a ls on this

00:24:30,840 --> 00:24:35,200
directory we

00:24:35,279 --> 00:24:41,919
we are seeing the very same content

00:24:38,640 --> 00:24:44,000
that we have on the web ui we we can

00:24:41,919 --> 00:24:47,600
check it of course

00:24:44,000 --> 00:24:50,400
and yeah you see here the content is

00:24:47,600 --> 00:24:50,400
it's the same

00:24:52,000 --> 00:25:01,039
what i want to to show you next

00:24:55,840 --> 00:25:04,080
is the setup we we did for the pandemic

00:25:01,039 --> 00:25:08,960
research that is called planet

00:25:04,080 --> 00:25:08,960
so you see that the

00:25:09,520 --> 00:25:16,559
part of the login and

00:25:12,880 --> 00:25:19,919
mina yo is pretty much the the same

00:25:16,559 --> 00:25:20,799
as before we we have different users

00:25:19,919 --> 00:25:24,080
here but

00:25:20,799 --> 00:25:24,720
nevertheless uh that is the procedure is

00:25:24,080 --> 00:25:28,640
the same

00:25:24,720 --> 00:25:30,640
then we have a jupiter hub that is

00:25:28,640 --> 00:25:31,840
that you can log in with your

00:25:30,640 --> 00:25:34,799
credentials

00:25:31,840 --> 00:25:35,840
and you will be prompt with a folder

00:25:34,799 --> 00:25:38,240
already mounted

00:25:35,840 --> 00:25:38,880
uh using the iem credential with which

00:25:38,240 --> 00:25:41,919
you log

00:25:38,880 --> 00:25:42,480
in into the youtube to to see your

00:25:41,919 --> 00:25:45,600
bucket

00:25:42,480 --> 00:25:49,360
directly another important thing is

00:25:45,600 --> 00:25:51,919
sts wire so basically you need only to

00:25:49,360 --> 00:25:53,679
export the environment variables with

00:25:51,919 --> 00:25:57,039
your endpoints

00:25:53,679 --> 00:25:59,919
and after uh please

00:25:57,039 --> 00:26:00,559
first let's say configuration that you

00:25:59,919 --> 00:26:03,919
see here

00:26:00,559 --> 00:26:06,400
using the authorization flow

00:26:03,919 --> 00:26:08,080
uh that is very simple and automated

00:26:06,400 --> 00:26:11,360
with any other com

00:26:08,080 --> 00:26:15,120
no other components like rclone

00:26:11,360 --> 00:26:18,159
you see that this will be directly

00:26:15,120 --> 00:26:20,960
shown up in your bucket

00:26:18,159 --> 00:26:22,840
in your folder that you specify by sts

00:26:20,960 --> 00:26:25,520
wire

00:26:22,840 --> 00:26:28,720
and that's all basically you

00:26:25,520 --> 00:26:32,159
have a full

00:26:28,720 --> 00:26:36,080
working mount point with

00:26:32,159 --> 00:26:40,080
any other requirement so

00:26:36,080 --> 00:26:43,360
that's all for the components we

00:26:40,080 --> 00:26:45,520
we provide the user with and i

00:26:43,360 --> 00:26:46,799
hope you enjoy the demo and the

00:26:45,520 --> 00:26:53,840
presentation

00:26:46,799 --> 00:26:53,840
and thank you for your attention

00:26:54,050 --> 00:27:02,449
[Music]

00:27:06,559 --> 00:27:08,640

YouTube URL: https://www.youtube.com/watch?v=OXWAlL5QgQQ


