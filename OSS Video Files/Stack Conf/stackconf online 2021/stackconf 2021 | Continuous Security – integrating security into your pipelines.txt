Title: stackconf 2021 | Continuous Security â€“ integrating security into your pipelines
Publication date: 2021-06-24
Playlist: stackconf online 2021
Description: 
	by Matt Jarvis

In the world of continuous delivery and cloud native, the boundaries between what is our application and what constitutes infrastructure is becoming increasing blurred. Our workloads, the containers they ship in, and our platform configuration is now often developed and deployed by the same teams, and development velocity is the key metric to success. This presents us with a challenge which the previous models of security as a final external gatekeeper step cannot keep up with. To ensure our apps and platforms are secure, we need to integrate security at all stages of our pipelines and ensure that our developers and engineering teams have tools and data with enable them to make decisions about security on an ongoing basis. In this session I will talk through the problem space, look at the kinds of security issues we need to consider, and look at where the integration points are to build in security as part of our CI/CD process.


NETWAYS
Konferenzen: https://www.netways.de/events
Schulungen: https://www.netways.de/schulungen
Shop: https://shop.netways.de/
Blog: http://blog.netways.de/
NWS: https://nws.netways.de 

Webinare
Archiv Link: https://www.netways.de/netways/webinare/

Social Media
SlideShare: http://de.slideshare.net/netways
YouTube: https://www.netways.de/youtube
Facebook: https://www.facebook.com/netways
Twitter: https://twitter.com/netways
Instagram: https://www.instagram.com/netwaysgmbh/


Musik: https://www.frametraxx.de/
Captions: 
	00:00:05,660 --> 00:00:13,119
[Applause]

00:00:06,120 --> 00:00:13,119
[Music]

00:00:17,440 --> 00:00:20,800
hi folks

00:00:18,400 --> 00:00:22,640
this is me i'm matt jarvis i'm a senior

00:00:20,800 --> 00:00:25,199
developer advocate at snake

00:00:22,640 --> 00:00:28,160
and sneaker a cloud native application

00:00:25,199 --> 00:00:28,160
security company

00:00:29,679 --> 00:00:34,719
so the story of the last decade or so

00:00:32,719 --> 00:00:37,120
in software development has really seen

00:00:34,719 --> 00:00:39,600
the boundaries of what's an application

00:00:37,120 --> 00:00:40,559
what is operations what constitutes

00:00:39,600 --> 00:00:43,680
infrastructure

00:00:40,559 --> 00:00:44,879
um becoming increasingly blurred the old

00:00:43,680 --> 00:00:46,559
view of the world was that the

00:00:44,879 --> 00:00:48,879
application was the only piece under the

00:00:46,559 --> 00:00:50,239
responsibility of the development team

00:00:48,879 --> 00:00:52,399
and all these other elements of the

00:00:50,239 --> 00:00:54,559
stacks are under i.t operations

00:00:52,399 --> 00:00:58,399
with security usually a step right at

00:00:54,559 --> 00:01:00,000
the end of the deployment process

00:00:58,399 --> 00:01:01,840
but the world we live in today is one

00:01:00,000 --> 00:01:04,239
where infrastructure and workloads are

00:01:01,840 --> 00:01:06,320
almost completely tied together

00:01:04,239 --> 00:01:08,080
everything's declared as code everything

00:01:06,320 --> 00:01:09,680
is a software development practice

00:01:08,080 --> 00:01:11,680
and there's really no difference between

00:01:09,680 --> 00:01:13,680
our workload and the computing

00:01:11,680 --> 00:01:15,360
infrastructure that goes along with it

00:01:13,680 --> 00:01:17,360
and by infrastructure i don't just mean

00:01:15,360 --> 00:01:19,360
the underlying compute technology

00:01:17,360 --> 00:01:21,360
but also the configuration and the

00:01:19,360 --> 00:01:24,159
operational policies that control those

00:01:21,360 --> 00:01:24,159
capabilities

00:01:25,360 --> 00:01:29,840
and as a community of practitioners

00:01:27,520 --> 00:01:31,840
we've discussed in lots of detail this

00:01:29,840 --> 00:01:33,439
blurring and eventual consuming of the

00:01:31,840 --> 00:01:34,479
boundary between development and

00:01:33,439 --> 00:01:36,400
operations

00:01:34,479 --> 00:01:38,720
but in lots of cases we haven't really

00:01:36,400 --> 00:01:40,000
considered how that impacts on how we

00:01:38,720 --> 00:01:43,119
model and how we practice

00:01:40,000 --> 00:01:45,759
security in lots of organizations

00:01:43,119 --> 00:01:46,479
uh security is still considered to be

00:01:45,759 --> 00:01:48,479
somewhat of an

00:01:46,479 --> 00:01:50,000
external practice that exists only when

00:01:48,479 --> 00:01:51,360
our applications are deployed and

00:01:50,000 --> 00:01:53,040
operational

00:01:51,360 --> 00:01:54,960
but this is pretty much unworkable in

00:01:53,040 --> 00:01:56,640
the era of continuous integration

00:01:54,960 --> 00:01:59,360
continuous delivery

00:01:56,640 --> 00:02:00,079
as we've seen development driven teams

00:01:59,360 --> 00:02:02,560
now have

00:02:00,079 --> 00:02:04,240
responsibilities for most of that

00:02:02,560 --> 00:02:05,840
deployment stack

00:02:04,240 --> 00:02:07,600
and so this gives those teams a much

00:02:05,840 --> 00:02:09,039
greater responsibility

00:02:07,600 --> 00:02:10,640
for ensuring that these things are

00:02:09,039 --> 00:02:12,160
secure

00:02:10,640 --> 00:02:13,840
by the time our code and our

00:02:12,160 --> 00:02:14,560
infrastructure is deployed to production

00:02:13,840 --> 00:02:16,239
it's really

00:02:14,560 --> 00:02:18,400
i'm far too late to deal with the

00:02:16,239 --> 00:02:20,879
implications of security issues

00:02:18,400 --> 00:02:22,080
and we can't slow down that velocity to

00:02:20,879 --> 00:02:23,680
introduce security

00:02:22,080 --> 00:02:26,239
gates in the way that things used to

00:02:23,680 --> 00:02:27,760
work because um velocity and

00:02:26,239 --> 00:02:31,280
time to market is clearly the

00:02:27,760 --> 00:02:34,160
differentiator for businesses to succeed

00:02:31,280 --> 00:02:36,319
so that presents us with a set of unique

00:02:34,160 --> 00:02:38,080
challenges around security how do we

00:02:36,319 --> 00:02:39,760
make sure our applications and our

00:02:38,080 --> 00:02:41,920
infrastructure are secure

00:02:39,760 --> 00:02:45,040
when our working practices are evolving

00:02:41,920 --> 00:02:47,360
into these super fast delivery pipelines

00:02:45,040 --> 00:02:49,920
security still matters and as we've seen

00:02:47,360 --> 00:02:51,920
repeatedly over the last few years um

00:02:49,920 --> 00:02:53,440
security breaches can have a really big

00:02:51,920 --> 00:02:55,599
impact on businesses

00:02:53,440 --> 00:02:58,640
uh both from a financial perspective in

00:02:55,599 --> 00:03:00,720
terms of bottom line and potential fines

00:02:58,640 --> 00:03:02,720
but also on how trusted our customers

00:03:00,720 --> 00:03:04,159
see us as and trust really one of the

00:03:02,720 --> 00:03:08,959
key metrics for

00:03:04,159 --> 00:03:08,959
successful businesses in the cloud era

00:03:10,080 --> 00:03:14,239
so let's start by taking a look at the

00:03:12,159 --> 00:03:15,920
different classes of things we probably

00:03:14,239 --> 00:03:16,720
need to be looking at to ensure that

00:03:15,920 --> 00:03:19,920
we've got

00:03:16,720 --> 00:03:21,519
security considered within our workflows

00:03:19,920 --> 00:03:23,360
firstly the applications that we're

00:03:21,519 --> 00:03:25,280
creating our workloads

00:03:23,360 --> 00:03:27,440
and modern applications are usually

00:03:25,280 --> 00:03:30,080
composed of a relatively small

00:03:27,440 --> 00:03:30,959
core of homegrown code along with a huge

00:03:30,080 --> 00:03:34,640
amount of

00:03:30,959 --> 00:03:36,239
third-party usually open source modules

00:03:34,640 --> 00:03:38,239
and this is great news for application

00:03:36,239 --> 00:03:39,840
development because the availability of

00:03:38,239 --> 00:03:41,680
modules and library code

00:03:39,840 --> 00:03:44,080
means we get to develop applications

00:03:41,680 --> 00:03:45,840
faster we have to write less code

00:03:44,080 --> 00:03:47,440
and we don't need to reinvent the wheel

00:03:45,840 --> 00:03:49,920
all the time by solving the same

00:03:47,440 --> 00:03:52,480
problems over and over again

00:03:49,920 --> 00:03:53,040
and anyone who develops in in java in

00:03:52,480 --> 00:03:55,519
python

00:03:53,040 --> 00:03:56,319
in node and go is going to recognize

00:03:55,519 --> 00:03:58,560
this pattern

00:03:56,319 --> 00:04:00,799
and in all of these ecosystems the

00:03:58,560 --> 00:04:03,519
number of vulnerabilities is growing

00:04:00,799 --> 00:04:05,360
and this isn't necessarily because um

00:04:03,519 --> 00:04:07,840
code's getting more insecure

00:04:05,360 --> 00:04:09,360
it can be just because there's more code

00:04:07,840 --> 00:04:10,720
being written more libraries more

00:04:09,360 --> 00:04:12,959
modules being written

00:04:10,720 --> 00:04:14,400
um maybe we're getting better at working

00:04:12,959 --> 00:04:16,479
out what's vulnerable

00:04:14,400 --> 00:04:18,000
but in the end this all means more

00:04:16,479 --> 00:04:20,000
opportunities for

00:04:18,000 --> 00:04:22,720
these vulnerabilities to uh to be

00:04:20,000 --> 00:04:22,720
exploited

00:04:23,440 --> 00:04:27,199
and when we import something into our

00:04:25,759 --> 00:04:28,479
code base it can have a very large

00:04:27,199 --> 00:04:30,720
dependency tree

00:04:28,479 --> 00:04:31,680
and both in terms of direct dependencies

00:04:30,720 --> 00:04:33,440
that um

00:04:31,680 --> 00:04:35,120
are the dependencies of the thing that

00:04:33,440 --> 00:04:36,479
we're importing but also indirect

00:04:35,120 --> 00:04:39,199
dependencies so

00:04:36,479 --> 00:04:40,479
dependencies of dependencies and so we

00:04:39,199 --> 00:04:42,240
potentially bring in

00:04:40,479 --> 00:04:44,080
a huge amount of other code that we

00:04:42,240 --> 00:04:47,280
might not even be aware of

00:04:44,080 --> 00:04:49,199
and um typically over 70 percent of all

00:04:47,280 --> 00:04:49,520
security vulnerabilities are found in

00:04:49,199 --> 00:04:52,080
these

00:04:49,520 --> 00:04:53,759
indirect dependencies um so these are

00:04:52,080 --> 00:04:54,400
the ones that we have much less control

00:04:53,759 --> 00:04:57,280
over

00:04:54,400 --> 00:04:59,600
and and we might not be uh aware of them

00:04:57,280 --> 00:04:59,600
at all

00:05:00,720 --> 00:05:04,800
so as an example of that um he's an

00:05:03,039 --> 00:05:06,320
exploit from the node community he was

00:05:04,800 --> 00:05:10,160
introduced into npm in

00:05:06,320 --> 00:05:12,240
in 2018 and this is supposedly a library

00:05:10,160 --> 00:05:14,639
to pass http headers

00:05:12,240 --> 00:05:16,160
but it's actually um a remote code

00:05:14,639 --> 00:05:19,039
execution exploit

00:05:16,160 --> 00:05:21,680
um it's about 40 lines of code to uh

00:05:19,039 --> 00:05:23,120
process um remote javascript executed on

00:05:21,680 --> 00:05:25,199
the server via

00:05:23,120 --> 00:05:27,520
using specially crafted commands in the

00:05:25,199 --> 00:05:29,360
http request

00:05:27,520 --> 00:05:30,720
and this was hidden behind a tree of

00:05:29,360 --> 00:05:32,960
other dependencies

00:05:30,720 --> 00:05:34,960
and it eventually ended up with the

00:05:32,960 --> 00:05:36,720
direct dependency ended up being used in

00:05:34,960 --> 00:05:38,000
mail parser which has a huge amount of

00:05:36,720 --> 00:05:40,320
downloads every month

00:05:38,000 --> 00:05:42,160
so it's pretty easy to see how in large

00:05:40,320 --> 00:05:44,000
developer communities these kinds of

00:05:42,160 --> 00:05:48,400
indirect dependencies

00:05:44,000 --> 00:05:48,400
can be used to hide exploitable code

00:05:49,440 --> 00:05:54,080
so vulnerabilities in those third-party

00:05:52,080 --> 00:05:55,680
dependencies is super important because

00:05:54,080 --> 00:05:57,360
they make up such a large part of our

00:05:55,680 --> 00:05:59,440
code basis these days

00:05:57,360 --> 00:06:00,960
but as i said earlier the lines between

00:05:59,440 --> 00:06:03,360
our application and the

00:06:00,960 --> 00:06:04,639
container it runs in are becoming um

00:06:03,360 --> 00:06:06,479
really blurred

00:06:04,639 --> 00:06:08,080
the containers the delivery mechanism

00:06:06,479 --> 00:06:10,240
for the application they're typically

00:06:08,080 --> 00:06:12,639
developed at the same time

00:06:10,240 --> 00:06:13,759
usually even by the same team so for all

00:06:12,639 --> 00:06:15,840
intents and purposes

00:06:13,759 --> 00:06:18,400
we can consider them the same thing the

00:06:15,840 --> 00:06:21,919
application never exists without that

00:06:18,400 --> 00:06:24,080
um without that container image

00:06:21,919 --> 00:06:26,000
and like the availability library code

00:06:24,080 --> 00:06:26,880
the huge growth in public container

00:06:26,000 --> 00:06:29,280
registries

00:06:26,880 --> 00:06:31,600
has been great for the ability to run um

00:06:29,280 --> 00:06:33,280
pre-packaged software super easily

00:06:31,600 --> 00:06:35,199
and for us to consume that in our own

00:06:33,280 --> 00:06:37,440
infrastructure but they are also a big

00:06:35,199 --> 00:06:38,639
source of vulnerabilities

00:06:37,440 --> 00:06:41,440
and when we look at the container

00:06:38,639 --> 00:06:43,120
landscape although best practices are

00:06:41,440 --> 00:06:45,199
emerging around things like building

00:06:43,120 --> 00:06:46,960
minimal containers

00:06:45,199 --> 00:06:48,639
there is still a huge amount of people

00:06:46,960 --> 00:06:50,240
using containers directly from the

00:06:48,639 --> 00:06:52,080
upstream repositories

00:06:50,240 --> 00:06:54,400
and lots of these can have can have very

00:06:52,080 --> 00:06:56,400
large numbers of vulnerabilities in them

00:06:54,400 --> 00:06:58,400
and we're presented with lots of

00:06:56,400 --> 00:07:00,080
possibilities for attack vectors

00:06:58,400 --> 00:07:02,080
so it's important that our developers

00:07:00,080 --> 00:07:05,599
working with container images

00:07:02,080 --> 00:07:07,680
understand the the scope for

00:07:05,599 --> 00:07:10,720
the scope for uh introducing

00:07:07,680 --> 00:07:10,720
vulnerabilities here

00:07:10,800 --> 00:07:14,400
and there's also a long tail taking the

00:07:12,560 --> 00:07:15,440
path of least resistance by giving

00:07:14,400 --> 00:07:18,160
applications

00:07:15,440 --> 00:07:19,599
uh containers based on full operating

00:07:18,160 --> 00:07:21,440
systems for example

00:07:19,599 --> 00:07:24,400
and when we look at operating systems in

00:07:21,440 --> 00:07:26,000
general the amount of vulnerabilities in

00:07:24,400 --> 00:07:27,919
base operating systems is really

00:07:26,000 --> 00:07:30,160
massively growing and that's partly

00:07:27,919 --> 00:07:31,759
because operating systems by design ship

00:07:30,160 --> 00:07:33,599
with a lot of software in them

00:07:31,759 --> 00:07:35,120
and you know if we look at operating

00:07:33,599 --> 00:07:37,280
systems like that

00:07:35,120 --> 00:07:38,800
you know we can see that they kind of

00:07:37,280 --> 00:07:40,400
break the paradigms of

00:07:38,800 --> 00:07:42,639
containers in the sense that what we

00:07:40,400 --> 00:07:44,400
want to be doing is producing a

00:07:42,639 --> 00:07:46,240
absolutely minimal package for our

00:07:44,400 --> 00:07:47,280
application but there's still a lot of

00:07:46,240 --> 00:07:49,680
people using

00:07:47,280 --> 00:07:52,720
um these kind of bigger images for for

00:07:49,680 --> 00:07:52,720
workload deployments

00:07:53,680 --> 00:07:56,560
and we can also see that a lot of people

00:07:55,199 --> 00:07:58,240
don't think about emerging

00:07:56,560 --> 00:07:59,280
vulnerabilities once their workloads are

00:07:58,240 --> 00:08:02,479
in production

00:07:59,280 --> 00:08:04,240
so an image that um when it was first

00:08:02,479 --> 00:08:05,039
deployed didn't have vulnerabilities in

00:08:04,240 --> 00:08:07,120
it

00:08:05,039 --> 00:08:08,720
there may be new vulnerabilities that

00:08:07,120 --> 00:08:09,199
have been discovered since the image was

00:08:08,720 --> 00:08:10,800
built

00:08:09,199 --> 00:08:12,319
and if you're not looking at containers

00:08:10,800 --> 00:08:14,160
you already have in production

00:08:12,319 --> 00:08:17,039
then you're never going to find out if

00:08:14,160 --> 00:08:19,440
they're now vulnerable

00:08:17,039 --> 00:08:20,400
and fixing these things isn't usually um

00:08:19,440 --> 00:08:22,720
very hard

00:08:20,400 --> 00:08:24,960
um over 40 of docker image

00:08:22,720 --> 00:08:28,560
vulnerabilities can usually be fixed by

00:08:24,960 --> 00:08:30,240
upgrading the base image and around 20

00:08:28,560 --> 00:08:32,159
of them can be fixed just by rebuilding

00:08:30,240 --> 00:08:34,320
them a lot of containers will have

00:08:32,159 --> 00:08:35,279
um upgrade steps during the in in the

00:08:34,320 --> 00:08:38,839
dockerfile

00:08:35,279 --> 00:08:40,640
and they'll get run during the build

00:08:38,839 --> 00:08:42,800
process

00:08:40,640 --> 00:08:44,880
and as we've moved wholesale into cloud

00:08:42,800 --> 00:08:46,959
and now into kubernetes configuration is

00:08:44,880 --> 00:08:48,480
almost entirely in code and it's part of

00:08:46,959 --> 00:08:50,720
our development workflows

00:08:48,480 --> 00:08:52,080
and by configuration we can include all

00:08:50,720 --> 00:08:54,640
of our kubernetes yaml

00:08:52,080 --> 00:08:55,600
our helm charts our automation our

00:08:54,640 --> 00:08:57,040
terraform

00:08:55,600 --> 00:09:00,560
and all of the policies and

00:08:57,040 --> 00:09:02,399
configuration that goes alongside that

00:09:00,560 --> 00:09:04,240
and this is a massively growing field as

00:09:02,399 --> 00:09:06,160
we can see from the amounts of this kind

00:09:04,240 --> 00:09:08,080
of code they're in github now

00:09:06,160 --> 00:09:09,519
um we're really only just starting to

00:09:08,080 --> 00:09:11,839
view that as something that we need to

00:09:09,519 --> 00:09:13,440
consider from a security perspective

00:09:11,839 --> 00:09:14,959
um systems like kubernetes are

00:09:13,440 --> 00:09:16,800
increasingly complex

00:09:14,959 --> 00:09:18,800
and as we've moved the responsibilities

00:09:16,800 --> 00:09:20,959
for delivering that kind of code

00:09:18,800 --> 00:09:22,040
into our development teams there's

00:09:20,959 --> 00:09:24,640
clearly space for

00:09:22,040 --> 00:09:26,320
misunderstandings about how things work

00:09:24,640 --> 00:09:27,680
and this can be compounded with things

00:09:26,320 --> 00:09:29,920
like service meshes

00:09:27,680 --> 00:09:32,080
which increase that complexity even

00:09:29,920 --> 00:09:33,760
further and with this much code out

00:09:32,080 --> 00:09:36,399
there in public repositories

00:09:33,760 --> 00:09:38,320
we can again see the potential risks of

00:09:36,399 --> 00:09:40,399
path of least resistance where we might

00:09:38,320 --> 00:09:42,480
be using existing code as

00:09:40,399 --> 00:09:44,000
templates when we might not fully

00:09:42,480 --> 00:09:46,959
understand how that thing

00:09:44,000 --> 00:09:46,959
how that thing works

00:09:47,040 --> 00:09:51,200
and these are all very important in

00:09:49,120 --> 00:09:53,200
terms of the security of our

00:09:51,200 --> 00:09:55,519
environments and this quote from the

00:09:53,200 --> 00:09:57,120
open web application security project's

00:09:55,519 --> 00:09:57,760
a little bit old now but it still proves

00:09:57,120 --> 00:09:59,680
the point

00:09:57,760 --> 00:10:01,760
that a huge amount of security breaches

00:09:59,680 --> 00:10:02,880
are coming from misconfigurations in in

00:10:01,760 --> 00:10:05,760
infrastructure

00:10:02,880 --> 00:10:07,519
and most really large um exploits over

00:10:05,760 --> 00:10:08,000
recent years have been this combination

00:10:07,519 --> 00:10:10,399
of

00:10:08,000 --> 00:10:12,480
application level vulnerability combined

00:10:10,399 --> 00:10:14,800
with infrastructure misconfiguration

00:10:12,480 --> 00:10:17,440
which has then allowed the attacker to

00:10:14,800 --> 00:10:17,680
widen the blast radius and and extend

00:10:17,440 --> 00:10:21,040
the

00:10:17,680 --> 00:10:23,120
exploit and as i'm sure most of us

00:10:21,040 --> 00:10:24,399
have seen there's many many real world

00:10:23,120 --> 00:10:26,880
examples of this

00:10:24,399 --> 00:10:27,600
uh things like cloud credential leakages

00:10:26,880 --> 00:10:29,839
through uh

00:10:27,600 --> 00:10:31,120
through source code repositories or of

00:10:29,839 --> 00:10:33,760
kubernetes and

00:10:31,120 --> 00:10:36,240
kubernetes clusters infested with crypto

00:10:33,760 --> 00:10:36,240
miners

00:10:36,480 --> 00:10:39,600
and when we look at this space in terms

00:10:38,000 --> 00:10:40,880
of kubernetes it's important to

00:10:39,600 --> 00:10:42,399
understand that kubernetes really

00:10:40,880 --> 00:10:44,079
doesn't give you any guard rails it's

00:10:42,399 --> 00:10:46,079
insecure by default

00:10:44,079 --> 00:10:48,000
um and this is on purpose you know it's

00:10:46,079 --> 00:10:49,839
it's meant to be highly configurable

00:10:48,000 --> 00:10:52,079
and users are expected to make these

00:10:49,839 --> 00:10:54,160
decisions by themselves

00:10:52,079 --> 00:10:55,680
um you know by default there are no

00:10:54,160 --> 00:10:57,680
resource limits set

00:10:55,680 --> 00:11:00,399
and that means a pod can consume as much

00:10:57,680 --> 00:11:02,160
resource as the kubelet will let it

00:11:00,399 --> 00:11:04,399
and this has the potential for denial of

00:11:02,160 --> 00:11:05,279
service attacks affecting a much bigger

00:11:04,399 --> 00:11:08,880
scope than

00:11:05,279 --> 00:11:08,880
than just a single application

00:11:09,360 --> 00:11:12,800
and kubernetes will also quite happily

00:11:11,040 --> 00:11:14,640
let containers run as root

00:11:12,800 --> 00:11:16,560
and with a huge amount of containers in

00:11:14,640 --> 00:11:17,920
public registry still being configured

00:11:16,560 --> 00:11:19,839
to run as route

00:11:17,920 --> 00:11:22,160
this opens up really big security

00:11:19,839 --> 00:11:24,079
implications a compromised pod running

00:11:22,160 --> 00:11:24,880
as root has the potential to escape the

00:11:24,079 --> 00:11:26,800
container

00:11:24,880 --> 00:11:28,000
and so we really need to be limiting the

00:11:26,800 --> 00:11:30,320
potential for these kind

00:11:28,000 --> 00:11:32,160
of attacks and very few applications

00:11:30,320 --> 00:11:34,320
actually need root access in order to

00:11:32,160 --> 00:11:34,320
run

00:11:35,519 --> 00:11:39,279
writable file systems inside containers

00:11:37,760 --> 00:11:41,360
is also a risk point

00:11:39,279 --> 00:11:43,040
um if that container is then exploited

00:11:41,360 --> 00:11:45,040
it allows an attacker to

00:11:43,040 --> 00:11:46,240
download new software make changes to

00:11:45,040 --> 00:11:50,079
configuration

00:11:46,240 --> 00:11:53,680
and and generally um be able to extend

00:11:50,079 --> 00:11:53,680
the access that they've got already

00:11:54,399 --> 00:11:58,079
and containers also have access to the

00:11:56,240 --> 00:11:59,760
full range of capabilities

00:11:58,079 --> 00:12:01,120
uh configured by default in the

00:11:59,760 --> 00:12:02,959
container runtime and

00:12:01,120 --> 00:12:04,399
capabilities folks who aren't familiar

00:12:02,959 --> 00:12:07,360
with them are

00:12:04,399 --> 00:12:09,040
kernel level permissions many of these

00:12:07,360 --> 00:12:11,279
granular kind of permissions

00:12:09,040 --> 00:12:13,440
won't be required by your application

00:12:11,279 --> 00:12:16,079
and having them turned on just creates

00:12:13,440 --> 00:12:17,680
additional vectors for attackers to use

00:12:16,079 --> 00:12:20,399
should that container be

00:12:17,680 --> 00:12:20,399
compromised

00:12:21,680 --> 00:12:26,160
so where do we start with all of this in

00:12:23,600 --> 00:12:27,920
terms of modern gate driven workflows

00:12:26,160 --> 00:12:30,240
well the emerging answer is that we have

00:12:27,920 --> 00:12:32,880
to shift our security practices

00:12:30,240 --> 00:12:34,639
far to the left and embed security into

00:12:32,880 --> 00:12:37,040
our development pipeline

00:12:34,639 --> 00:12:39,040
so we share that burden of security

00:12:37,040 --> 00:12:39,600
responsibility across our development

00:12:39,040 --> 00:12:41,200
teams

00:12:39,600 --> 00:12:43,200
and this is really where this concept of

00:12:41,200 --> 00:12:45,760
devsecops comes into play that we need

00:12:43,200 --> 00:12:48,160
to integrate security considerations

00:12:45,760 --> 00:12:49,839
into our workflows in exactly the same

00:12:48,160 --> 00:12:51,360
way that we merged development and

00:12:49,839 --> 00:12:54,240
operations over the

00:12:51,360 --> 00:12:54,240
last few years

00:12:54,959 --> 00:12:58,320
and where do we start in practice well

00:12:56,880 --> 00:12:59,120
the obvious first place is at the

00:12:58,320 --> 00:13:01,200
developer

00:12:59,120 --> 00:13:03,040
um we need developers to have insights

00:13:01,200 --> 00:13:03,760
immediately into potential security

00:13:03,040 --> 00:13:05,760
issues

00:13:03,760 --> 00:13:06,959
um tightly integrated into their

00:13:05,760 --> 00:13:09,760
workflow so

00:13:06,959 --> 00:13:11,360
friction free and that means tooling

00:13:09,760 --> 00:13:12,000
that's available from local command

00:13:11,360 --> 00:13:14,720
lines

00:13:12,000 --> 00:13:16,800
um integrations with ides so we need to

00:13:14,720 --> 00:13:18,480
reduce the overhead for developers to

00:13:16,800 --> 00:13:19,839
use these kind of tools

00:13:18,480 --> 00:13:21,839
right at the point they're working

00:13:19,839 --> 00:13:24,560
before code even gets anywhere near our

00:13:21,839 --> 00:13:24,560
repositories

00:13:24,800 --> 00:13:28,079
and the tooling we use has to provide

00:13:26,480 --> 00:13:30,240
developers with the right information to

00:13:28,079 --> 00:13:33,040
be able to make security decisions

00:13:30,240 --> 00:13:35,040
and not just lists of cves but tools

00:13:33,040 --> 00:13:37,279
that give us insights into how severe

00:13:35,040 --> 00:13:39,760
something is how exploitable it is

00:13:37,279 --> 00:13:40,880
and uh remediation advice so how do i

00:13:39,760 --> 00:13:43,279
fix it because

00:13:40,880 --> 00:13:45,519
that's what really we care about is how

00:13:43,279 --> 00:13:48,639
do we go from the state we're in now to

00:13:45,519 --> 00:13:50,399
a better state and as we saw earlier um

00:13:48,639 --> 00:13:52,079
we want to be able to look at all of

00:13:50,399 --> 00:13:54,240
those those um

00:13:52,079 --> 00:13:55,680
classes of things that we're interested

00:13:54,240 --> 00:13:57,839
in so um

00:13:55,680 --> 00:14:00,000
third-party dependencies in our code

00:13:57,839 --> 00:14:01,920
what's going on in our container images

00:14:00,000 --> 00:14:03,680
and all of that infrastructure code that

00:14:01,920 --> 00:14:05,839
we're putting in at this point

00:14:03,680 --> 00:14:06,720
and you can do all of this with them

00:14:05,839 --> 00:14:09,680
with sneak

00:14:06,720 --> 00:14:09,680
um for free

00:14:10,880 --> 00:14:14,079
so our second touch point is clearly git

00:14:12,800 --> 00:14:16,000
itself um

00:14:14,079 --> 00:14:17,680
our git repository is now the single

00:14:16,000 --> 00:14:20,480
source of truth for everything

00:14:17,680 --> 00:14:22,160
and so that has to be secure git

00:14:20,480 --> 00:14:22,880
itself's been pretty secure over the

00:14:22,160 --> 00:14:25,120
years

00:14:22,880 --> 00:14:27,440
and in most cases folks are using hosted

00:14:25,120 --> 00:14:28,160
git services like github like git lab

00:14:27,440 --> 00:14:29,839
for this

00:14:28,160 --> 00:14:31,760
which have been also pretty good at

00:14:29,839 --> 00:14:34,320
security but there are definitely some

00:14:31,760 --> 00:14:36,800
process related things to consider

00:14:34,320 --> 00:14:37,760
um by its nature git can open you up to

00:14:36,800 --> 00:14:39,440
certain things

00:14:37,760 --> 00:14:41,040
and we need to make sure that our users

00:14:39,440 --> 00:14:44,160
are aware of where those

00:14:41,040 --> 00:14:45,680
um those potential problem points are

00:14:44,160 --> 00:14:48,240
so we need to be doing things like

00:14:45,680 --> 00:14:50,000
enforcing two-factor authentication

00:14:48,240 --> 00:14:51,440
making sure our users have strong key

00:14:50,000 --> 00:14:53,199
security practices

00:14:51,440 --> 00:14:54,720
and that they're keeping get updated

00:14:53,199 --> 00:14:57,120
locally

00:14:54,720 --> 00:14:58,560
and exposing private data is always a

00:14:57,120 --> 00:14:59,440
risk here particularly in commit

00:14:58,560 --> 00:15:02,000
histories

00:14:59,440 --> 00:15:03,519
or when we're working with repositories

00:15:02,000 --> 00:15:06,160
moving them around

00:15:03,519 --> 00:15:08,480
um configuration data really shouldn't

00:15:06,160 --> 00:15:09,440
be and get unencrypted even in local

00:15:08,480 --> 00:15:12,639
repositories

00:15:09,440 --> 00:15:14,560
for exactly that reason so we need to um

00:15:12,639 --> 00:15:16,079
help our users to be able to use things

00:15:14,560 --> 00:15:18,000
like git ignore for

00:15:16,079 --> 00:15:19,440
for for stuff like that and it goes

00:15:18,000 --> 00:15:20,800
without saying that we need strong

00:15:19,440 --> 00:15:22,399
review processes

00:15:20,800 --> 00:15:24,399
this is really all about the human

00:15:22,399 --> 00:15:24,880
aspect making sure that our processes

00:15:24,399 --> 00:15:26,959
are

00:15:24,880 --> 00:15:28,079
correct and that folks understand what

00:15:26,959 --> 00:15:30,399
they need to do

00:15:28,079 --> 00:15:32,560
and where we can we want to be um

00:15:30,399 --> 00:15:33,360
automating as much as possible reducing

00:15:32,560 --> 00:15:36,240
that friction

00:15:33,360 --> 00:15:37,759
for for being able to to do these things

00:15:36,240 --> 00:15:41,360
and we can do that through things like

00:15:37,759 --> 00:15:43,199
pre-commit hooks

00:15:41,360 --> 00:15:45,040
and once we're confident the git is

00:15:43,199 --> 00:15:46,720
secure we can start to leverage

00:15:45,040 --> 00:15:48,639
automation you know on every pull

00:15:46,720 --> 00:15:50,160
request we want to be looking for the

00:15:48,639 --> 00:15:51,680
same issues that we're catching at the

00:15:50,160 --> 00:15:53,199
local development stage

00:15:51,680 --> 00:15:54,720
but this time these things are obviously

00:15:53,199 --> 00:15:57,199
going to be automated

00:15:54,720 --> 00:15:59,040
and the key difference is here that

00:15:57,199 --> 00:15:59,680
because these checks are automated we're

00:15:59,040 --> 00:16:01,279
also

00:15:59,680 --> 00:16:03,199
monitoring for things that might have

00:16:01,279 --> 00:16:04,320
changed since a particular piece of code

00:16:03,199 --> 00:16:07,279
was committed

00:16:04,320 --> 00:16:09,120
um perhaps an upstream upstream uh

00:16:07,279 --> 00:16:10,720
dependency has changed

00:16:09,120 --> 00:16:12,160
new vulnerabilities are discovered all

00:16:10,720 --> 00:16:14,240
the time and

00:16:12,160 --> 00:16:15,360
code that didn't show vulnerabilities

00:16:14,240 --> 00:16:18,399
when it was first

00:16:15,360 --> 00:16:21,040
committed might now have some problems

00:16:18,399 --> 00:16:22,800
so these monitoring scans over time will

00:16:21,040 --> 00:16:24,560
allow us to pick things up

00:16:22,800 --> 00:16:28,240
right in the code repository where it's

00:16:24,560 --> 00:16:28,240
relatively low cost to fix it

00:16:28,880 --> 00:16:32,720
and our container registries also kind

00:16:30,959 --> 00:16:34,560
of fall into this category

00:16:32,720 --> 00:16:36,079
nothing's fixed in stone so an image

00:16:34,560 --> 00:16:37,279
that looked fine when it was built might

00:16:36,079 --> 00:16:39,360
now be vulnerable

00:16:37,279 --> 00:16:40,800
if your registry's got built in scanning

00:16:39,360 --> 00:16:43,120
take advantage of that

00:16:40,800 --> 00:16:44,000
or use tools that integrate with your

00:16:43,120 --> 00:16:45,839
registry

00:16:44,000 --> 00:16:47,759
and we need to be scanning on an ongoing

00:16:45,839 --> 00:16:48,399
basis even if we haven't changed our

00:16:47,759 --> 00:16:51,040
images

00:16:48,399 --> 00:16:52,560
and that base image that we used to base

00:16:51,040 --> 00:16:53,600
our image on might have new

00:16:52,560 --> 00:16:55,120
vulnerabilities

00:16:53,600 --> 00:16:57,120
and lots of people aren't rebuilding

00:16:55,120 --> 00:16:59,519
images unless you know things actually

00:16:57,120 --> 00:16:59,519
change

00:16:59,759 --> 00:17:04,160
another key integration point is our ci

00:17:02,320 --> 00:17:06,319
cd systems

00:17:04,160 --> 00:17:08,160
and again we can automate scanning

00:17:06,319 --> 00:17:09,199
directly into our into our build

00:17:08,160 --> 00:17:11,520
pipelines

00:17:09,199 --> 00:17:13,439
and we're looking for things that that

00:17:11,520 --> 00:17:14,799
may not have changed but because we're

00:17:13,439 --> 00:17:16,880
rebuilding things

00:17:14,799 --> 00:17:18,079
we can catch any changes that might be

00:17:16,880 --> 00:17:19,839
happening upstream

00:17:18,079 --> 00:17:21,600
uh things that have changed since that

00:17:19,839 --> 00:17:22,160
code was first scanned when it entered

00:17:21,600 --> 00:17:25,439
the

00:17:22,160 --> 00:17:27,199
source code repository and then the

00:17:25,439 --> 00:17:28,559
final place we want to be looking is our

00:17:27,199 --> 00:17:30,480
production environments

00:17:28,559 --> 00:17:32,160
um containers in production particularly

00:17:30,480 --> 00:17:34,480
if they're changed very often

00:17:32,160 --> 00:17:35,760
can end up with vulnerable images so we

00:17:34,480 --> 00:17:37,520
need to be looking

00:17:35,760 --> 00:17:39,360
both at running containers and as a

00:17:37,520 --> 00:17:40,720
double check at new containers being

00:17:39,360 --> 00:17:42,640
spawned

00:17:40,720 --> 00:17:44,000
in this space we can also take advantage

00:17:42,640 --> 00:17:46,559
of admission control

00:17:44,000 --> 00:17:48,480
perhaps things like open policy agent to

00:17:46,559 --> 00:17:50,559
ensure that our policy a

00:17:48,480 --> 00:17:53,120
security policies are being reflected in

00:17:50,559 --> 00:17:55,440
the code that's being deployed

00:17:53,120 --> 00:17:58,160
perhaps we want to double check that our

00:17:55,440 --> 00:18:00,400
images have been scanned before they

00:17:58,160 --> 00:18:02,320
um before they hit production and we can

00:18:00,400 --> 00:18:04,640
actually stop things here from

00:18:02,320 --> 00:18:08,000
from deploying into our clusters if they

00:18:04,640 --> 00:18:09,919
don't um comply with those policies

00:18:08,000 --> 00:18:11,360
and in the production space we can also

00:18:09,919 --> 00:18:14,320
look at um

00:18:11,360 --> 00:18:16,960
uh emerging practices around run time

00:18:14,320 --> 00:18:18,640
perhaps looking at anomalous behavior

00:18:16,960 --> 00:18:20,559
and there are you know there's lots of

00:18:18,640 --> 00:18:22,640
emerging tools in that space

00:18:20,559 --> 00:18:25,120
which are going to be checking for

00:18:22,640 --> 00:18:26,880
unusual patterns that might be happening

00:18:25,120 --> 00:18:29,440
um inside your cluster which might

00:18:26,880 --> 00:18:31,600
indicate that a a particular container

00:18:29,440 --> 00:18:33,120
has been compromised

00:18:31,600 --> 00:18:34,960
so let's take a look at some of these

00:18:33,120 --> 00:18:38,240
areas in practice um

00:18:34,960 --> 00:18:41,679
using sneak so let's start by

00:18:38,240 --> 00:18:44,720
looking at the tooling that's directly

00:18:41,679 --> 00:18:45,840
available uh for developers in their

00:18:44,720 --> 00:18:48,880
workflows

00:18:45,840 --> 00:18:50,240
so um the uh cli is a good place to

00:18:48,880 --> 00:18:53,679
start and here i have a

00:18:50,240 --> 00:18:56,960
uh checkout of a um

00:18:53,679 --> 00:19:00,080
node application um that's a a

00:18:56,960 --> 00:19:03,080
clone from an upstream github repository

00:19:00,080 --> 00:19:05,679
and we can see here that uh we have a

00:19:03,080 --> 00:19:09,360
package.json file which is defining

00:19:05,679 --> 00:19:10,240
the third party uh dependencies that

00:19:09,360 --> 00:19:13,120
this um

00:19:10,240 --> 00:19:14,880
this project is using and so if i want

00:19:13,120 --> 00:19:17,919
to immediately test this from the

00:19:14,880 --> 00:19:18,799
cli for uh vulnerabilities within those

00:19:17,919 --> 00:19:21,679
packages

00:19:18,799 --> 00:19:24,880
i can just run sneak test from my cli

00:19:21,679 --> 00:19:27,440
that's going to detect this package.json

00:19:24,880 --> 00:19:29,440
build a dependency tree of not just

00:19:27,440 --> 00:19:29,919
those dependencies that i've specified

00:19:29,440 --> 00:19:31,600
but

00:19:29,919 --> 00:19:33,360
the dependencies that they have brought

00:19:31,600 --> 00:19:35,679
in um themselves

00:19:33,360 --> 00:19:38,080
and we can see that we have a a wide

00:19:35,679 --> 00:19:39,039
range of vulnerabilities that sneak has

00:19:38,080 --> 00:19:42,240
discovered

00:19:39,039 --> 00:19:44,080
um in this uh in this particular package

00:19:42,240 --> 00:19:45,520
and whilst it's great to see this

00:19:44,080 --> 00:19:48,720
information this is not

00:19:45,520 --> 00:19:50,240
um probably the most um interesting part

00:19:48,720 --> 00:19:53,120
of this that i can now run

00:19:50,240 --> 00:19:54,240
um sneak wizard from this um uh

00:19:53,120 --> 00:19:56,480
repository

00:19:54,240 --> 00:19:57,840
and um sneak will be able to make

00:19:56,480 --> 00:19:59,760
suggestions about

00:19:57,840 --> 00:20:01,200
how i can actually fix those so

00:19:59,760 --> 00:20:03,200
actionable um

00:20:01,200 --> 00:20:04,960
things by changing particular packages

00:20:03,200 --> 00:20:08,240
we can see here that is suggesting to

00:20:04,960 --> 00:20:09,919
upgrade the adm zip package to 0.5.2

00:20:08,240 --> 00:20:11,360
and if i accept that upgrade it's going

00:20:09,919 --> 00:20:13,840
to make those changes

00:20:11,360 --> 00:20:14,960
in that package.json and actually fix

00:20:13,840 --> 00:20:20,400
that issue

00:20:14,960 --> 00:20:22,960
for me from the cli we can also um

00:20:20,400 --> 00:20:24,960
scan our container images so i can see

00:20:22,960 --> 00:20:27,760
i've got a uh a bunch of

00:20:24,960 --> 00:20:29,440
docker images here and if i want to test

00:20:27,760 --> 00:20:32,080
one of these for vulnerabilities i could

00:20:29,440 --> 00:20:35,919
just do sneak container test

00:20:32,080 --> 00:20:37,760
map javasmatt node

00:20:35,919 --> 00:20:39,520
and now sneakwood's going to analyze

00:20:37,760 --> 00:20:41,120
that container image look at the base

00:20:39,520 --> 00:20:43,039
image look at all the packages that are

00:20:41,120 --> 00:20:46,320
included in that base image

00:20:43,039 --> 00:20:49,440
and um detect vulnerabilities

00:20:46,320 --> 00:20:51,520
in those uh in that container image

00:20:49,440 --> 00:20:52,799
this is going to take a little while to

00:20:51,520 --> 00:20:54,400
to run because it's going to build the

00:20:52,799 --> 00:21:03,840
dependency tree for the

00:20:54,400 --> 00:21:03,840
for the entire um the entire container

00:21:04,960 --> 00:21:08,000
and we can see it's now querying the

00:21:06,559 --> 00:21:11,280
sneak database

00:21:08,000 --> 00:21:11,679
and again we've been returned um a whole

00:21:11,280 --> 00:21:14,880
set

00:21:11,679 --> 00:21:17,120
of of um issues that that uh our

00:21:14,880 --> 00:21:19,440
uh that our scanner has found within

00:21:17,120 --> 00:21:22,720
that um container image

00:21:19,440 --> 00:21:24,159
so um we've got integration into clis

00:21:22,720 --> 00:21:27,360
there but we can also look

00:21:24,159 --> 00:21:30,000
at um uh integration into our into our

00:21:27,360 --> 00:21:32,640
ide tools so this is the s code running

00:21:30,000 --> 00:21:35,679
um the sneak von cost plugin and again

00:21:32,640 --> 00:21:38,080
we're looking at that package.json file

00:21:35,679 --> 00:21:40,000
and we can see that uh sneak the von

00:21:38,080 --> 00:21:40,799
cost plugin has identified the same

00:21:40,000 --> 00:21:43,919
issues

00:21:40,799 --> 00:21:45,919
um but presented them um within the ide

00:21:43,919 --> 00:21:47,760
so we can see for a particular package

00:21:45,919 --> 00:21:49,600
like this humanize package

00:21:47,760 --> 00:21:51,280
um we can see there's one one

00:21:49,600 --> 00:21:53,280
vulnerability in that

00:21:51,280 --> 00:21:54,480
we can actually view the problem

00:21:53,280 --> 00:21:58,559
directly from uh

00:21:54,480 --> 00:22:02,400
from here and um we can also

00:21:58,559 --> 00:22:05,679
uh look at um fixing those

00:22:02,400 --> 00:22:08,320
issues uh from uh within our ide so if i

00:22:05,679 --> 00:22:11,360
click on quick fix here

00:22:08,320 --> 00:22:11,679
where um sneak is going to uh suggest to

00:22:11,360 --> 00:22:14,720
us

00:22:11,679 --> 00:22:17,520
an an upgrade pathway which will um fix

00:22:14,720 --> 00:22:20,000
those issues within that particular um

00:22:17,520 --> 00:22:20,000
package

00:22:20,320 --> 00:22:23,440
so now if we go to look at the at the

00:22:22,320 --> 00:22:26,720
sneak um

00:22:23,440 --> 00:22:28,799
ui this is my organization within within

00:22:26,720 --> 00:22:31,120
um sneak and we can see that i have a

00:22:28,799 --> 00:22:33,120
range of of projects that i have um

00:22:31,120 --> 00:22:35,120
imported from various sources some of

00:22:33,120 --> 00:22:36,400
these are imported from my source code

00:22:35,120 --> 00:22:38,880
management system

00:22:36,400 --> 00:22:40,000
uh some of them are imported from um

00:22:38,880 --> 00:22:42,880
docker hub and

00:22:40,000 --> 00:22:44,799
for each of these repositories i'm sneak

00:22:42,880 --> 00:22:47,919
is not only going to scan this once but

00:22:44,799 --> 00:22:49,600
because i've imported it into my um into

00:22:47,919 --> 00:22:51,679
my sneak organization it's going to be

00:22:49,600 --> 00:22:53,520
scanning it on a regular basis and so if

00:22:51,679 --> 00:22:55,039
we look at this

00:22:53,520 --> 00:22:57,200
node repository which is the same

00:22:55,039 --> 00:22:59,120
repository we just looked at on disk

00:22:57,200 --> 00:23:00,559
and we can see that sneak has scanned a

00:22:59,120 --> 00:23:02,080
whole range of things within this

00:23:00,559 --> 00:23:06,720
repository

00:23:02,080 --> 00:23:08,720
um we have our package.json file

00:23:06,720 --> 00:23:11,120
and we can actually look in the ui at

00:23:08,720 --> 00:23:13,039
the whole dependency tree that uh

00:23:11,120 --> 00:23:14,799
that sneak has worked its way through so

00:23:13,039 --> 00:23:15,200
like i said it's it's not just looked at

00:23:14,799 --> 00:23:17,280
the

00:23:15,200 --> 00:23:18,799
the dependencies that i've specified but

00:23:17,280 --> 00:23:20,559
it's also looked at all the other

00:23:18,799 --> 00:23:22,640
dependencies that those have brought in

00:23:20,559 --> 00:23:25,039
our indirect dependencies

00:23:22,640 --> 00:23:26,240
so we can drill down on particular

00:23:25,039 --> 00:23:30,000
vulnerabilities

00:23:26,240 --> 00:23:31,360
and look at what that issue actually is

00:23:30,000 --> 00:23:33,520
i mean in this case it's a it's a

00:23:31,360 --> 00:23:36,240
directory traversal vulnerability

00:23:33,520 --> 00:23:38,240
and we can see that sneak is proposing

00:23:36,240 --> 00:23:39,840
an upgrade pathway which is going to fix

00:23:38,240 --> 00:23:42,640
that particular

00:23:39,840 --> 00:23:42,640
vulnerability

00:23:43,600 --> 00:23:50,000
what we can also do here is

00:23:46,880 --> 00:23:52,559
to remediate things as we said

00:23:50,000 --> 00:23:54,000
earlier it's the most important thing is

00:23:52,559 --> 00:23:57,200
that we have actionable

00:23:54,000 --> 00:23:59,360
insights because as developers we

00:23:57,200 --> 00:24:02,000
actually want to fix these things and

00:23:59,360 --> 00:24:04,320
um snake can actually raise prs directly

00:24:02,000 --> 00:24:06,240
against your um source code

00:24:04,320 --> 00:24:08,799
database so if we were to click fix this

00:24:06,240 --> 00:24:12,000
vulnerability for this adm zip package

00:24:08,799 --> 00:24:12,640
it's going to raise a a pr directly in

00:24:12,000 --> 00:24:15,200
this um

00:24:12,640 --> 00:24:19,840
in the source code repository we can

00:24:15,200 --> 00:24:19,840
click open fix pr

00:24:26,960 --> 00:24:31,520
and we can see that it's created this

00:24:28,799 --> 00:24:33,919
this fixed pr directly in our

00:24:31,520 --> 00:24:34,880
source code repository and it's going to

00:24:33,919 --> 00:24:37,840
have uh um

00:24:34,880 --> 00:24:41,320
just put that uh that simple uh change

00:24:37,840 --> 00:24:42,640
from our adm package from 0.4.7 to

00:24:41,320 --> 00:24:44,960
0.4.11

00:24:42,640 --> 00:24:46,240
and with snake we can raise these pr's

00:24:44,960 --> 00:24:48,640
automatically or

00:24:46,240 --> 00:24:50,640
as we've just seen we can we can raise

00:24:48,640 --> 00:24:55,440
them manually

00:24:50,640 --> 00:24:57,120
so if we go back to our sneak ui

00:24:55,440 --> 00:24:58,799
we can look at some of the other things

00:24:57,120 --> 00:25:00,400
that that

00:24:58,799 --> 00:25:02,159
we've scanned within that that

00:25:00,400 --> 00:25:04,400
particular import

00:25:02,159 --> 00:25:06,720
and we can see uh we've also discovered

00:25:04,400 --> 00:25:10,000
some kubernetes yaml files within this

00:25:06,720 --> 00:25:10,400
um within this uh repo and if we look at

00:25:10,000 --> 00:25:12,720
uh

00:25:10,400 --> 00:25:14,000
at these we can see that um sneakers

00:25:12,720 --> 00:25:16,400
also scanned these for

00:25:14,000 --> 00:25:17,600
particular um uh security

00:25:16,400 --> 00:25:19,600
vulnerabilities

00:25:17,600 --> 00:25:20,640
so if we drill down into one of these we

00:25:19,600 --> 00:25:23,840
can see that this

00:25:20,640 --> 00:25:26,720
this container's um uh running uh as

00:25:23,840 --> 00:25:29,279
as root and sneak will also tell us the

00:25:26,720 --> 00:25:31,200
impact of this and how we can resolve

00:25:29,279 --> 00:25:32,320
that which setting we need in order to

00:25:31,200 --> 00:25:36,000
resolve that

00:25:32,320 --> 00:25:36,000
that particular security issue

00:25:38,000 --> 00:25:42,159
and then we've also discovered a docker

00:25:39,679 --> 00:25:43,600
file in this repository

00:25:42,159 --> 00:25:45,360
and using the dockerfile we can

00:25:43,600 --> 00:25:47,760
effectively rebuild the

00:25:45,360 --> 00:25:49,200
the container image as it would be once

00:25:47,760 --> 00:25:51,679
we actually built it

00:25:49,200 --> 00:25:53,679
and we can see we've discovered a very

00:25:51,679 --> 00:25:55,120
large amount of vulnerabilities in the

00:25:53,679 --> 00:25:58,080
base image that

00:25:55,120 --> 00:25:59,360
this container is going to use and not

00:25:58,080 --> 00:26:01,279
only have we discovered those

00:25:59,360 --> 00:26:03,840
vulnerabilities and given

00:26:01,279 --> 00:26:05,360
information about about how to fix them

00:26:03,840 --> 00:26:07,200
but we've also

00:26:05,360 --> 00:26:09,120
been able to recommend a series of

00:26:07,200 --> 00:26:10,480
alternative upgrades alternative base

00:26:09,120 --> 00:26:13,440
images which are going to have

00:26:10,480 --> 00:26:14,080
less vulnerabilities in them so by going

00:26:13,440 --> 00:26:15,840
from this

00:26:14,080 --> 00:26:17,520
this current node 6 stretch which is

00:26:15,840 --> 00:26:19,600
pretty um old

00:26:17,520 --> 00:26:21,840
we could go to the node current slim and

00:26:19,600 --> 00:26:25,840
reduce our vulnerability count to uh to

00:26:21,840 --> 00:26:25,840
somewhere around 61.

00:26:30,080 --> 00:26:33,679
so if we go back and look at our

00:26:31,360 --> 00:26:35,679
package.json again you

00:26:33,679 --> 00:26:37,520
might note these scoring here these

00:26:35,679 --> 00:26:39,360
prioritization scores and

00:26:37,520 --> 00:26:41,679
prioritization is extremely important

00:26:39,360 --> 00:26:43,360
because it gives us insights into which

00:26:41,679 --> 00:26:47,039
things we should fix first

00:26:43,360 --> 00:26:47,520
and um within sneak we'd not only use

00:26:47,039 --> 00:26:50,159
the

00:26:47,520 --> 00:26:52,640
cvs score which is the standard for for

00:26:50,159 --> 00:26:56,799
scoring vulnerabilities but also

00:26:52,640 --> 00:26:59,440
enrich that by um things like

00:26:56,799 --> 00:27:00,480
how mature the exploit is but most

00:26:59,440 --> 00:27:03,200
importantly does a

00:27:00,480 --> 00:27:04,159
fix uh exist for this because if we have

00:27:03,200 --> 00:27:07,440
something that's a

00:27:04,159 --> 00:27:10,480
as high vulnerability highly a severe

00:27:07,440 --> 00:27:11,760
vulnerability that has an exploit in the

00:27:10,480 --> 00:27:14,000
wild that's mature

00:27:11,760 --> 00:27:16,559
and has a fix then that's really a

00:27:14,000 --> 00:27:18,640
no-brainer for us to fix because we can

00:27:16,559 --> 00:27:20,640
just um we can just upgrade the package

00:27:18,640 --> 00:27:23,679
and therefore fix that vulnerability

00:27:20,640 --> 00:27:24,799
so um enriching that scoring to enable

00:27:23,679 --> 00:27:27,840
developers to actually

00:27:24,799 --> 00:27:29,760
see which things are important but also

00:27:27,840 --> 00:27:32,640
to give actionable insights

00:27:29,760 --> 00:27:34,559
into um how we might move forward and

00:27:32,640 --> 00:27:36,240
and fix things

00:27:34,559 --> 00:27:38,080
and you can see here we have a whole

00:27:36,240 --> 00:27:40,320
range of filtering

00:27:38,080 --> 00:27:41,919
uh so that we can look at um perhaps

00:27:40,320 --> 00:27:43,360
we're only interested in things where

00:27:41,919 --> 00:27:45,279
there is a fix available

00:27:43,360 --> 00:27:46,960
so that we can filter out things which

00:27:45,279 --> 00:27:49,840
are at this point um

00:27:46,960 --> 00:27:49,840
unfixable

00:27:51,360 --> 00:27:55,600
so if we now look at some of these um

00:27:53,600 --> 00:27:57,039
other imports i have here so this is the

00:27:55,600 --> 00:27:59,440
actual docker image

00:27:57,039 --> 00:28:01,279
which i built from that uh repository

00:27:59,440 --> 00:28:04,240
and that exists in docker hub so i've

00:28:01,279 --> 00:28:05,360
imported this uh project from docker hub

00:28:04,240 --> 00:28:08,159
and we'll see if we

00:28:05,360 --> 00:28:09,200
if we look at this particular base image

00:28:08,159 --> 00:28:10,240
that again we've

00:28:09,200 --> 00:28:12,640
discovered all those same

00:28:10,240 --> 00:28:14,480
vulnerabilities within the uh docker

00:28:12,640 --> 00:28:18,159
image itself

00:28:14,480 --> 00:28:21,679
and um we uh

00:28:18,159 --> 00:28:23,520
from the docker image um we are not able

00:28:21,679 --> 00:28:25,600
to make the suggestion about which base

00:28:23,520 --> 00:28:27,039
image we ought to upgrade to so we can

00:28:25,600 --> 00:28:28,640
see here that we can link

00:28:27,039 --> 00:28:31,039
the docker file from a different git

00:28:28,640 --> 00:28:33,600
repository to these uh to this

00:28:31,039 --> 00:28:35,840
particular container image

00:28:33,600 --> 00:28:37,039
and then we can get actionable um

00:28:35,840 --> 00:28:39,440
insights again

00:28:37,039 --> 00:28:40,080
and so if i look at i think this one has

00:28:39,440 --> 00:28:42,799
the uh

00:28:40,080 --> 00:28:45,840
the docker file uh linked to it i think

00:28:42,799 --> 00:28:45,840
it's this one actually

00:28:46,799 --> 00:28:51,760
and we can see that again here we've got

00:28:49,600 --> 00:28:53,360
those same base image recommendations

00:28:51,760 --> 00:28:54,720
because we were able to look at the

00:28:53,360 --> 00:28:57,360
actual docker file

00:28:54,720 --> 00:28:58,080
and detect which uh which base image was

00:28:57,360 --> 00:29:00,960
actually being

00:28:58,080 --> 00:29:02,320
used so um that again actionable

00:29:00,960 --> 00:29:06,080
insights into uh

00:29:02,320 --> 00:29:08,880
into how we can fix things

00:29:06,080 --> 00:29:09,600
so snake will integrate with a very wide

00:29:08,880 --> 00:29:12,559
range of

00:29:09,600 --> 00:29:14,399
of different elements within your

00:29:12,559 --> 00:29:17,200
software development life cycle a whole

00:29:14,399 --> 00:29:19,600
range of source code management systems

00:29:17,200 --> 00:29:21,679
a whole range of of container registries

00:29:19,600 --> 00:29:23,200
including all of the the major container

00:29:21,679 --> 00:29:25,039
registries that are out there

00:29:23,200 --> 00:29:27,600
the ones that that i've been looking at

00:29:25,039 --> 00:29:29,520
coming directly from docker hub

00:29:27,600 --> 00:29:31,520
we also have integration again with

00:29:29,520 --> 00:29:34,240
production with things like kubernetes

00:29:31,520 --> 00:29:35,279
and with a whole range of ci cd systems

00:29:34,240 --> 00:29:38,399
as well as

00:29:35,279 --> 00:29:41,279
a wide range of ide plugins so

00:29:38,399 --> 00:29:43,760
you can see how you can plug this

00:29:41,279 --> 00:29:45,840
security scanning on an ongoing basis

00:29:43,760 --> 00:29:47,120
um all the way through your software

00:29:45,840 --> 00:29:50,799
development

00:29:47,120 --> 00:29:52,320
life cycle so the takeaways from all of

00:29:50,799 --> 00:29:55,200
this is that we need to

00:29:52,320 --> 00:29:57,200
shift our security left um we need to

00:29:55,200 --> 00:29:59,120
empower our developers to make decisions

00:29:57,200 --> 00:30:02,159
about security

00:29:59,120 --> 00:30:04,480
based on modern tools and modern process

00:30:02,159 --> 00:30:05,360
um in this kind of new world security

00:30:04,480 --> 00:30:07,360
teams

00:30:05,360 --> 00:30:08,640
aren't gatekeepers anymore with control

00:30:07,360 --> 00:30:10,960
over deployment

00:30:08,640 --> 00:30:12,720
um we need to consider the role of

00:30:10,960 --> 00:30:15,200
security professionals to be

00:30:12,720 --> 00:30:16,240
advisors and toolsmiths as opposed to

00:30:15,200 --> 00:30:18,480
gatekeepers

00:30:16,240 --> 00:30:19,279
um empowering our development teams to

00:30:18,480 --> 00:30:22,000
deliver

00:30:19,279 --> 00:30:23,520
uh feature velocity new features and and

00:30:22,000 --> 00:30:27,760
new code to production

00:30:23,520 --> 00:30:27,760
and therefore delivering business value

00:30:27,919 --> 00:30:32,559
and visibility and remediation of

00:30:29,840 --> 00:30:34,320
security issues needs to be baked in

00:30:32,559 --> 00:30:36,559
to each stage of our development

00:30:34,320 --> 00:30:37,279
pipeline so we're leveraging automated

00:30:36,559 --> 00:30:39,679
tooling

00:30:37,279 --> 00:30:40,480
to scan a third-party code our container

00:30:39,679 --> 00:30:43,440
images

00:30:40,480 --> 00:30:44,240
and our infrastructure code so thank you

00:30:43,440 --> 00:30:46,080
for listening

00:30:44,240 --> 00:30:47,919
um if this if you're interested in

00:30:46,080 --> 00:30:48,559
trying out any of these features in

00:30:47,919 --> 00:30:51,360
sneak

00:30:48,559 --> 00:31:05,840
you can sign up for free at sneak dot io

00:30:51,360 --> 00:31:05,840
sign up

00:31:09,360 --> 00:31:11,440

YouTube URL: https://www.youtube.com/watch?v=zQhAnf499Ow


