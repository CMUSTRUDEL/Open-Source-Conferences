Title: Ernesto Tagwerker - Escaping the Tar Pit | SolidusConf 2019
Publication date: 2019-12-06
Playlist: SolidusConf 2019
Description: 
	Ernesto Tagwerker is lending a helping hand to those stuck in the proverbial tar pit.

"Escaping the Tar Pit"
Nobody wants to inherit a project that reeks but here we are: Stuck in the tar pit. How can we get out? Could we have avoided it in the first place? In this talk you will learn how to use a few, great Ruby gems that will guide you out of that sticky tar you are in.

Learn more about Solidus at solidus.io
Captions: 
	00:00:02,130 --> 00:00:05,160
[Music]

00:00:09,170 --> 00:00:15,570
[Music]

00:00:11,330 --> 00:00:18,350
the tar pit how to avoid getting into

00:00:15,570 --> 00:00:22,740
the tar pit and once you're in it how to

00:00:18,350 --> 00:00:25,230
get out of it gradually you can find me

00:00:22,740 --> 00:00:28,410
on Twitter github and basically anywhere

00:00:25,230 --> 00:00:30,390
with the handle attack worker so if you

00:00:28,410 --> 00:00:33,380
have questions about this after the

00:00:30,390 --> 00:00:37,760
conference feel free to reach out to me

00:00:33,380 --> 00:00:40,469
now I am originally from Argentina I

00:00:37,760 --> 00:00:44,160
moved to Philadelphia about three years

00:00:40,469 --> 00:00:46,469
ago and if you find that I say some

00:00:44,160 --> 00:00:48,870
words that are just sound funny it's

00:00:46,469 --> 00:00:54,300
because English it's not my native

00:00:48,870 --> 00:00:57,239
language so just be patient now I'm an

00:00:54,300 --> 00:01:00,120
outsider here like I know off solidus

00:00:57,239 --> 00:01:02,129
and I have used spree in the past but I

00:01:00,120 --> 00:01:05,970
can say that the most experience I have

00:01:02,129 --> 00:01:10,040
with solidus is that I also once Ford's

00:01:05,970 --> 00:01:13,229
free and that was about seven years ago

00:01:10,040 --> 00:01:14,970
you know I'm the founder of a small

00:01:13,229 --> 00:01:19,200
software development shop called

00:01:14,970 --> 00:01:21,210
humble apps humble labs is custom

00:01:19,200 --> 00:01:23,759
software development shopped we like to

00:01:21,210 --> 00:01:27,810
work a lot with rails Ruby JavaScript

00:01:23,759 --> 00:01:30,600
and we are fully distributed like we

00:01:27,810 --> 00:01:33,829
have team members in Argentina Brazil

00:01:30,600 --> 00:01:37,500
Guatemala Pennsylvania and Philadelphia

00:01:33,829 --> 00:01:39,360
our main office is in Philadelphia now a

00:01:37,500 --> 00:01:42,180
few years ago we found that we were

00:01:39,360 --> 00:01:45,420
doing a lot of rails upgrades and we

00:01:42,180 --> 00:01:50,750
decided to launch a service based on

00:01:45,420 --> 00:01:53,670
that we called it fast Ruby dot IO and

00:01:50,750 --> 00:01:57,090
basically we help companies upgrade

00:01:53,670 --> 00:02:01,020
their Ruby on Rails applications from X

00:01:57,090 --> 00:02:04,079
to Y all of our clients know that they

00:02:01,020 --> 00:02:06,960
need to upgrade they have the budget but

00:02:04,079 --> 00:02:09,360
they just don't have the time they have

00:02:06,960 --> 00:02:11,459
teams of two developers and they have

00:02:09,360 --> 00:02:13,780
teams of forty developers but the same

00:02:11,459 --> 00:02:16,600
problem comes over and over again

00:02:13,780 --> 00:02:20,770
rails upgrades get postponed and delayed

00:02:16,600 --> 00:02:23,140
indefinitely now every week we need to

00:02:20,770 --> 00:02:26,140
quickly assess the quality of a rails

00:02:23,140 --> 00:02:28,870
project and in order to do that we have

00:02:26,140 --> 00:02:31,420
to work on the process and fast Ruby

00:02:28,870 --> 00:02:33,850
that IO is basically that one really

00:02:31,420 --> 00:02:35,800
fine-tune process and a lot of the

00:02:33,850 --> 00:02:38,890
insights for this talk come from our

00:02:35,800 --> 00:02:41,459
experience there now what I'm not

00:02:38,890 --> 00:02:44,580
working on those two companies or

00:02:41,459 --> 00:02:47,470
services I like to work on open source

00:02:44,580 --> 00:02:50,410
to be honest I wouldn't be here today if

00:02:47,470 --> 00:02:53,709
it wasn't thanks to open source so so

00:02:50,410 --> 00:02:56,050
great to be here I maintain a few gems

00:02:53,709 --> 00:02:58,330
that you might have heard of database

00:02:56,050 --> 00:03:01,750
cleaner is a library that helps you

00:02:58,330 --> 00:03:06,160
clean or keep a clean state between test

00:03:01,750 --> 00:03:10,480
runs bundler leak is a gem that helps

00:03:06,160 --> 00:03:13,660
you find leaky dependencies in your gem

00:03:10,480 --> 00:03:15,660
file and next rails is a toolkit that

00:03:13,660 --> 00:03:18,790
helps you upgrade your rails application

00:03:15,660 --> 00:03:21,880
it knows how to find incompatibilities

00:03:18,790 --> 00:03:24,579
and it knows how to make it easy for you

00:03:21,880 --> 00:03:26,440
to do all boot your application if

00:03:24,579 --> 00:03:29,670
you're enter interested in any of those

00:03:26,440 --> 00:03:32,230
come talk to me after my talk

00:03:29,670 --> 00:03:35,410
now the inspiration for this talk is a

00:03:32,230 --> 00:03:39,220
book that I read many many years ago at

00:03:35,410 --> 00:03:41,890
college and it's my Fred Brooks and it's

00:03:39,220 --> 00:03:43,810
called the mythical man-month in the

00:03:41,890 --> 00:03:47,230
very first chapter he talks about the

00:03:43,810 --> 00:03:50,950
tar pit and he talks about three

00:03:47,230 --> 00:03:54,070
historical beasts getting stuck in the

00:03:50,950 --> 00:03:56,709
tar pit and there are phrases like this

00:03:54,070 --> 00:04:00,730
one like the fears or the struggle the

00:03:56,709 --> 00:04:03,579
more entangling the tar and no beast is

00:04:00,730 --> 00:04:07,150
so strong or so skillful but that they

00:04:03,579 --> 00:04:11,079
ultimately sink now it's a great analogy

00:04:07,150 --> 00:04:13,930
and he used that analogy with large

00:04:11,079 --> 00:04:18,340
system programming you talked about the

00:04:13,930 --> 00:04:22,750
struggles that over the past decade said

00:04:18,340 --> 00:04:25,169
beasts have been stuck into the funny

00:04:22,750 --> 00:04:27,670
thing is that this book was published in

00:04:25,169 --> 00:04:32,140
1975 so he's talking about

00:04:27,670 --> 00:04:33,730
the past decade being 65 to 75 and a lot

00:04:32,140 --> 00:04:37,900
of the problems that he mentions there

00:04:33,730 --> 00:04:40,390
are still around today Fred Brooks is

00:04:37,900 --> 00:04:42,730
also the author of no silver bullet a

00:04:40,390 --> 00:04:47,800
great essay that I recommend everybody

00:04:42,730 --> 00:04:49,480
reads and it talks about us having a lot

00:04:47,800 --> 00:04:52,570
of problems in terms of software

00:04:49,480 --> 00:04:54,940
development it talks about there not

00:04:52,570 --> 00:04:56,890
being a sim a silver bullet that solves

00:04:54,940 --> 00:04:58,630
everything so there's no it's not a

00:04:56,890 --> 00:05:01,000
technological problem it's more like a

00:04:58,630 --> 00:05:07,480
process problem it's more of a culture

00:05:01,000 --> 00:05:08,740
problem and it's like fascinating and ok

00:05:07,480 --> 00:05:10,540
he's talking about large system

00:05:08,740 --> 00:05:13,320
programming but we can bring this to

00:05:10,540 --> 00:05:17,320
today and talk about e-commerce

00:05:13,320 --> 00:05:19,330
applications rails applications and I

00:05:17,320 --> 00:05:22,480
believe that we're in two states we're

00:05:19,330 --> 00:05:25,240
either in the tar pit and trying to get

00:05:22,480 --> 00:05:27,460
out or we're trying to avoid it so

00:05:25,240 --> 00:05:31,270
that's why I wanted to talk about this

00:05:27,460 --> 00:05:33,720
today and sometimes we make efforts to

00:05:31,270 --> 00:05:36,790
get out of the tar pit right and

00:05:33,720 --> 00:05:39,520
sometimes it looks like this you know

00:05:36,790 --> 00:05:44,170
the more we struggle the harder it gets

00:05:39,520 --> 00:05:47,590
and then we just die or we switch jobs

00:05:44,170 --> 00:05:51,010
okay so let's bring it back to reality

00:05:47,590 --> 00:05:55,000
okay this analogy is great and this gif

00:05:51,010 --> 00:05:57,010
is even better but the tar pit comes up

00:05:55,000 --> 00:06:00,700
in our day-to-day with things like this

00:05:57,010 --> 00:06:02,620
like projects running over budget not

00:06:00,700 --> 00:06:05,140
even knowing when we're going to ship a

00:06:02,620 --> 00:06:09,010
feature because we don't understand the

00:06:05,140 --> 00:06:12,520
underlying architecture taking forever

00:06:09,010 --> 00:06:14,920
to ship what the client thinks are small

00:06:12,520 --> 00:06:17,050
changes you know we're like yes of

00:06:14,920 --> 00:06:20,020
course that should take two hours and

00:06:17,050 --> 00:06:24,190
then two days into the change we don't

00:06:20,020 --> 00:06:26,830
know when we're going to be done and it

00:06:24,190 --> 00:06:29,590
comes up when we sacrifice quality and

00:06:26,830 --> 00:06:32,920
we decide to increase technical debt

00:06:29,590 --> 00:06:35,050
every week and then we don't save time

00:06:32,920 --> 00:06:39,130
in every sprint to pay that technical

00:06:35,050 --> 00:06:40,180
debt off so this talk is divided in two

00:06:39,130 --> 00:06:44,139
parts

00:06:40,180 --> 00:06:45,970
first how can we avoid the tar pit in

00:06:44,139 --> 00:06:47,979
your career if you haven't been in this

00:06:45,970 --> 00:06:51,340
situation you might be in the near

00:06:47,979 --> 00:06:54,940
future where a boss comes up to you and

00:06:51,340 --> 00:06:58,449
they tell you yeah if you could come in

00:06:54,940 --> 00:07:01,509
on this great great legacy project and

00:06:58,449 --> 00:07:07,660
maintain it from now on that would be

00:07:01,509 --> 00:07:09,400
great yeah okay so we get our boss and

00:07:07,660 --> 00:07:11,590
they tell me they're telling us that the

00:07:09,400 --> 00:07:14,169
project is great and that they need us

00:07:11,590 --> 00:07:15,940
to maintain it and for fast Ruby that I

00:07:14,169 --> 00:07:18,669
oh it looks more like this it's like

00:07:15,940 --> 00:07:20,050
lion comes up to us and they tell us

00:07:18,669 --> 00:07:23,860
they need to upgrade their rails

00:07:20,050 --> 00:07:27,610
application and as much as I would want

00:07:23,860 --> 00:07:30,009
to believe and trust this client I need

00:07:27,610 --> 00:07:33,190
to look at the source code because I

00:07:30,009 --> 00:07:34,479
need to understand what it is before I

00:07:33,190 --> 00:07:36,639
can answer the next question

00:07:34,479 --> 00:07:40,870
which is going to be something like this

00:07:36,639 --> 00:07:45,580
so how long is it going to take because

00:07:40,870 --> 00:07:48,849
yeah I need it by end of day today so I

00:07:45,580 --> 00:07:51,039
urge you to never ever answer this

00:07:48,849 --> 00:07:56,110
question right away take your sweet time

00:07:51,039 --> 00:07:59,080
and say I'll get back to you and then

00:07:56,110 --> 00:08:01,599
you can go in and check the code quality

00:07:59,080 --> 00:08:03,490
of the project so the part one is going

00:08:01,599 --> 00:08:07,510
to be like how can we assess code

00:08:03,490 --> 00:08:10,659
quality without you know having many

00:08:07,510 --> 00:08:12,909
opinions like having actually tools that

00:08:10,659 --> 00:08:16,810
judge every application the same way

00:08:12,909 --> 00:08:18,900
over and over again part two is going to

00:08:16,810 --> 00:08:21,310
be about getting out of the tar pit

00:08:18,900 --> 00:08:23,139
let's say that we can't really say no to

00:08:21,310 --> 00:08:28,270
our boss we need to take the project

00:08:23,139 --> 00:08:31,000
okay but the only way that we can be

00:08:28,270 --> 00:08:34,630
sane maintaining the project is if we

00:08:31,000 --> 00:08:35,950
can gradually pay off technical debt so

00:08:34,630 --> 00:08:38,800
then part two is going to be about

00:08:35,950 --> 00:08:41,729
building on top of part one and saying

00:08:38,800 --> 00:08:44,620
okay how can we pay off technical debt

00:08:41,729 --> 00:08:47,800
gradually without having to stop for

00:08:44,620 --> 00:08:48,690
like three weeks all right let's get

00:08:47,800 --> 00:08:52,480
started

00:08:48,690 --> 00:08:54,140
so same situation boss comes up to you

00:08:52,480 --> 00:08:57,320
and they're like

00:08:54,140 --> 00:08:59,780
yeah Carl quit he's the only one who

00:08:57,320 --> 00:09:02,660
knows how to program the legacy system

00:08:59,780 --> 00:09:05,960
it can't be that hard to fake you know

00:09:02,660 --> 00:09:09,080
go figure it out right yeah and that's

00:09:05,960 --> 00:09:11,630
what bosses like to say and in our

00:09:09,080 --> 00:09:12,890
industry it looks more like this it

00:09:11,630 --> 00:09:16,430
can't be that hard

00:09:12,890 --> 00:09:17,180
you know it's a rails project so go

00:09:16,430 --> 00:09:21,110
figure it out

00:09:17,180 --> 00:09:23,570
but it's not like that we've seen so

00:09:21,110 --> 00:09:27,530
many rails applications that are just so

00:09:23,570 --> 00:09:30,560
messy so how can we quickly assess the

00:09:27,530 --> 00:09:32,480
quality of the application and of course

00:09:30,560 --> 00:09:35,150
in our industry we have two ways to do

00:09:32,480 --> 00:09:38,630
it we can pay someone to do it like code

00:09:35,150 --> 00:09:41,600
climate or coda C or we can use open

00:09:38,630 --> 00:09:44,210
source gems to do it for us the funny

00:09:41,600 --> 00:09:46,940
thing is that paid services actually use

00:09:44,210 --> 00:09:49,810
these open source gems so I'm going to

00:09:46,940 --> 00:09:53,060
talk about the open source gems and

00:09:49,810 --> 00:09:56,180
these libraries are great for doing

00:09:53,060 --> 00:09:58,850
static code analysis basically reading

00:09:56,180 --> 00:10:01,730
every statement in the application and I

00:09:58,850 --> 00:10:05,470
say assigning a numeric value to it and

00:10:01,730 --> 00:10:08,300
then at the end of the day you get a

00:10:05,470 --> 00:10:11,810
complexity score for a particular file

00:10:08,300 --> 00:10:14,960
Ruby file there are libraries that do

00:10:11,810 --> 00:10:18,080
code coverage analysis they run the test

00:10:14,960 --> 00:10:20,420
suite and they tell you which statements

00:10:18,080 --> 00:10:23,660
in your application has been exercised

00:10:20,420 --> 00:10:25,610
and finally there are tools that will

00:10:23,660 --> 00:10:28,070
tell you how many code smells there are

00:10:25,610 --> 00:10:31,280
in each file that you are about to

00:10:28,070 --> 00:10:34,850
maintain now I've been talking a lot

00:10:31,280 --> 00:10:37,070
about quality and software quality and I

00:10:34,850 --> 00:10:40,880
want to talk a little bit about the

00:10:37,070 --> 00:10:42,590
definition of software quality the

00:10:40,880 --> 00:10:44,270
problem is that there are hundreds of

00:10:42,590 --> 00:10:48,190
definitions there are books written

00:10:44,270 --> 00:10:50,780
about software quality in itself so I

00:10:48,190 --> 00:10:53,660
like things like this where the I Triple

00:10:50,780 --> 00:10:55,940
E says yeah it's the degree to which a

00:10:53,660 --> 00:10:59,230
system component or process meets

00:10:55,940 --> 00:11:01,730
implicit or explicit requirements and

00:10:59,230 --> 00:11:04,910
sure there was a committee that wrote

00:11:01,730 --> 00:11:07,649
this and it makes perfect sense but to

00:11:04,910 --> 00:11:10,860
me it just means yeah it works

00:11:07,649 --> 00:11:13,259
expected now to me this is a part of

00:11:10,860 --> 00:11:16,439
quality but I'm going to mend I'm going

00:11:13,259 --> 00:11:19,949
to be maintaining the software so it's

00:11:16,439 --> 00:11:24,929
not just that I don't care only about it

00:11:19,949 --> 00:11:27,809
working I also care about the the how

00:11:24,929 --> 00:11:32,069
difficult it will be to maintain it so

00:11:27,809 --> 00:11:35,399
it works as expected and it's not a pain

00:11:32,069 --> 00:11:40,189
to maintain it insurance software

00:11:35,399 --> 00:11:42,689
quality there's also the ISO 91 26-1

00:11:40,189 --> 00:11:46,649
quality model that talks about all these

00:11:42,689 --> 00:11:48,449
five different aspects and I'm not going

00:11:46,649 --> 00:11:51,029
to go into each and every one of these

00:11:48,449 --> 00:11:54,779
aspects but I do want to focus on

00:11:51,029 --> 00:11:56,579
maintainability and maintainability from

00:11:54,779 --> 00:12:00,569
the perspective of the software engineer

00:11:56,579 --> 00:12:02,730
that needs to work on the codebase the

00:12:00,569 --> 00:12:08,279
first thing that I care about is code

00:12:02,730 --> 00:12:10,829
coverage without tests refactoring is a

00:12:08,279 --> 00:12:13,259
nightmare don't want to go there you

00:12:10,829 --> 00:12:18,480
don't want to refactor production code

00:12:13,259 --> 00:12:20,569
that has no tests exercising so I find

00:12:18,480 --> 00:12:24,600
that this is the most important part and

00:12:20,569 --> 00:12:26,670
secondly we have code quality now I can

00:12:24,600 --> 00:12:28,470
improve Co quality but it becomes so

00:12:26,670 --> 00:12:37,170
much harder without the first thing

00:12:28,470 --> 00:12:39,149
without code coverage cool okay so for

00:12:37,170 --> 00:12:41,309
code coverage we have simple cough

00:12:39,149 --> 00:12:43,589
simple simple table is a super simple

00:12:41,309 --> 00:12:45,779
gem that you have to load before you

00:12:43,589 --> 00:12:51,179
start running your test suite and it

00:12:45,779 --> 00:12:54,059
will generate an HTML report for you you

00:12:51,179 --> 00:12:57,029
install it like this you load it like

00:12:54,059 --> 00:12:59,730
this and this is for a ruby application

00:12:57,029 --> 00:13:01,290
so it's a little complicated for a ruby

00:12:59,730 --> 00:13:03,120
application but if you're doing it for a

00:13:01,290 --> 00:13:06,449
rails application it looks more like

00:13:03,120 --> 00:13:08,970
this where simple cough has profiles

00:13:06,449 --> 00:13:13,049
that it can use to generate a report

00:13:08,970 --> 00:13:14,699
that is Rails friendly and we also want

00:13:13,049 --> 00:13:16,949
to wrap this with an environment

00:13:14,699 --> 00:13:19,679
variable just to make sure that we don't

00:13:16,949 --> 00:13:21,120
run it run it every time but only one we

00:13:19,679 --> 00:13:24,360
want to see the coverage report

00:13:21,120 --> 00:13:28,410
and then you execute it like this say

00:13:24,360 --> 00:13:32,399
coverage equals true run r-spec or many

00:13:28,410 --> 00:13:35,970
tests or whatever and then we can see an

00:13:32,399 --> 00:13:40,230
HTML report off the application now this

00:13:35,970 --> 00:13:42,959
is a very simple application and it's

00:13:40,230 --> 00:13:47,249
only a few files and here we get our

00:13:42,959 --> 00:13:48,749
first signal we got this project that we

00:13:47,249 --> 00:13:51,149
know nothing about

00:13:48,749 --> 00:13:53,160
and we run simple cough and now at least

00:13:51,149 --> 00:13:56,490
we can get a signal that says yeah you

00:13:53,160 --> 00:14:00,600
know out of all the files 82% of all

00:13:56,490 --> 00:14:02,129
those files are covered by a test it

00:14:00,600 --> 00:14:05,069
doesn't tell us whether the tests are

00:14:02,129 --> 00:14:09,920
good or bad it just tells us that the

00:14:05,069 --> 00:14:12,769
statements have been exercised up to 82%

00:14:09,920 --> 00:14:16,860
for code quality is a little different

00:14:12,769 --> 00:14:21,120
we have a lot of options we have flog

00:14:16,860 --> 00:14:22,769
Flay rate ruby critic metric foo I don't

00:14:21,120 --> 00:14:25,649
want to go over all of them because I'm

00:14:22,769 --> 00:14:28,129
pretty sure I'm missing some but the one

00:14:25,649 --> 00:14:31,079
that I really like is called Ruby critic

00:14:28,129 --> 00:14:33,420
it's quite an active open source project

00:14:31,079 --> 00:14:36,720
and it uses some of the tools that I

00:14:33,420 --> 00:14:39,660
just mentioned it uses flog it uses reek

00:14:36,720 --> 00:14:43,110
and it uses git to calculate all the

00:14:39,660 --> 00:14:45,829
metrics that you care about now the

00:14:43,110 --> 00:14:48,779
first one that it calculates is churn

00:14:45,829 --> 00:14:51,120
churn is how many times has a file

00:14:48,779 --> 00:14:54,569
changed since the beginning of the

00:14:51,120 --> 00:14:58,050
application and for that we have this

00:14:54,569 --> 00:15:01,290
very useful tool called git now it get

00:14:58,050 --> 00:15:04,920
log we can see that this particular file

00:15:01,290 --> 00:15:08,069
diff default that RB has changed three

00:15:04,920 --> 00:15:12,120
times so the churn count for a file like

00:15:08,069 --> 00:15:13,920
that it's three now in itself that

00:15:12,120 --> 00:15:16,079
metric is not that important

00:15:13,920 --> 00:15:19,949
it can tell you yes these are the most

00:15:16,079 --> 00:15:22,079
changed files in your application but

00:15:19,949 --> 00:15:24,800
later becomes super interesting when you

00:15:22,079 --> 00:15:28,610
combine churn with things like

00:15:24,800 --> 00:15:32,339
complexity which is the second metric

00:15:28,610 --> 00:15:35,360
complexity Ruby Critic uses flog to

00:15:32,339 --> 00:15:39,120
calculate complexity for

00:15:35,360 --> 00:15:43,680
vlog is a really cool rubygem by Ryan

00:15:39,120 --> 00:15:47,010
Davis from Seattle RB and you can use it

00:15:43,680 --> 00:15:50,070
like this you say flog food Darby and it

00:15:47,010 --> 00:15:54,990
tells you yes the flog score is eleven

00:15:50,070 --> 00:15:57,120
point two now what does that mean like I

00:15:54,990 --> 00:16:01,440
have no idea what that means it's like a

00:15:57,120 --> 00:16:04,350
number that has no meaning so okay what

00:16:01,440 --> 00:16:07,590
it does is it reads every statement in a

00:16:04,350 --> 00:16:11,100
file and it assigns numerical value to

00:16:07,590 --> 00:16:13,350
every operation in every statement so

00:16:11,100 --> 00:16:18,570
for instance an assignment it's worth is

00:16:13,350 --> 00:16:21,300
worth one point two and eval is 6.0 and

00:16:18,570 --> 00:16:24,390
if is one point two and so on and so

00:16:21,300 --> 00:16:26,910
forth so the flux score for a file is

00:16:24,390 --> 00:16:30,690
the sum of all the flux scores of all

00:16:26,910 --> 00:16:33,060
the methods and that's cool yeah we also

00:16:30,690 --> 00:16:35,610
have the complexity of every file we can

00:16:33,060 --> 00:16:38,670
find all the most complicated files in

00:16:35,610 --> 00:16:40,950
our application but it becomes more

00:16:38,670 --> 00:16:45,180
interesting when you combine churn and

00:16:40,950 --> 00:16:48,060
complexity Ruby critic will generate a

00:16:45,180 --> 00:16:51,210
report that will place every single file

00:16:48,060 --> 00:16:55,890
in your application in this X and y-axis

00:16:51,210 --> 00:16:58,800
graph so for let's say user that are be

00:16:55,890 --> 00:17:02,070
changed two times but complexity is a

00:16:58,800 --> 00:17:07,050
hundred thousand you'll find it to the

00:17:02,070 --> 00:17:09,240
left and to the upper section and if

00:17:07,050 --> 00:17:12,540
user that our B has changed twenty seven

00:17:09,240 --> 00:17:14,670
times but complexity is just a hundred

00:17:12,540 --> 00:17:19,110
you'll find it in the lower right

00:17:14,670 --> 00:17:23,040
quadrant now later you can use this

00:17:19,110 --> 00:17:25,080
information for for good to run really

00:17:23,040 --> 00:17:27,840
critic it's pretty simple he does gem

00:17:25,080 --> 00:17:30,480
install it you run the Ruby critic

00:17:27,840 --> 00:17:37,080
command and by default it will generate

00:17:30,480 --> 00:17:40,230
this nice-looking HTML report great but

00:17:37,080 --> 00:17:42,840
what does it mean okay let's go into it

00:17:40,230 --> 00:17:46,890
so in the pie graph you'll see that

00:17:42,840 --> 00:17:48,690
every file has a GPA score now for those

00:17:46,890 --> 00:17:53,429
of you who didn't go to school

00:17:48,690 --> 00:17:55,529
the u.s. like me GPA when I say GPA

00:17:53,429 --> 00:17:58,769
Thanks a hundred percent to zero percent

00:17:55,529 --> 00:18:01,940
in terms of like a test score so a being

00:17:58,769 --> 00:18:05,039
a hundred percent F being zero percent

00:18:01,940 --> 00:18:08,429
now every file in this application has

00:18:05,039 --> 00:18:10,919
been graded based on complexity and code

00:18:08,429 --> 00:18:12,899
smells complexity comes from flogged and

00:18:10,919 --> 00:18:17,009
code smells come from reek

00:18:12,899 --> 00:18:18,509
and here's another signal right we're

00:18:17,009 --> 00:18:21,120
looking at all these files and we see

00:18:18,509 --> 00:18:25,769
that about 60% of them are either an A

00:18:21,120 --> 00:18:32,309
or a B and maybe about 15% are an F or

00:18:25,769 --> 00:18:34,679
red right there cool all right

00:18:32,309 --> 00:18:37,409
then in terms of churn versus complexity

00:18:34,679 --> 00:18:42,350
you can see a lot of files a lot of

00:18:37,409 --> 00:18:45,360
little dots in these X and y-axis cool

00:18:42,350 --> 00:18:49,590
what what does it mean like what do I do

00:18:45,360 --> 00:18:51,419
with this like that's that's awesome but

00:18:49,590 --> 00:18:55,049
I need to understand that to know what I

00:18:51,419 --> 00:18:57,659
can do with this so if I look at the x

00:18:55,049 --> 00:19:00,330
and y axis I'll see a lot of files and

00:18:57,659 --> 00:19:04,620
it helps me a lot to think about adding

00:19:00,330 --> 00:19:07,289
an asymptote like this one and this

00:19:04,620 --> 00:19:12,029
helps me just divide the four quadrants

00:19:07,289 --> 00:19:14,009
in the graph now ruby critic will not

00:19:12,029 --> 00:19:16,590
add the asymptotes it's just like you

00:19:14,009 --> 00:19:19,679
have to imagine it to separate the files

00:19:16,590 --> 00:19:23,549
in different categories and we're gonna

00:19:19,679 --> 00:19:26,009
go and look at all the quadrants now in

00:19:23,549 --> 00:19:28,019
the lower left quadrant you have the

00:19:26,009 --> 00:19:30,960
good place that's where you want to be

00:19:28,019 --> 00:19:34,500
you want your files to be low turn and

00:19:30,960 --> 00:19:36,240
low complexity that means that they're

00:19:34,500 --> 00:19:37,679
not complex so they're simple to

00:19:36,240 --> 00:19:42,269
understand and they haven't been

00:19:37,679 --> 00:19:46,049
changing that much now before the talk I

00:19:42,269 --> 00:19:48,840
run a few commands to generate this for

00:19:46,049 --> 00:19:53,759
solidus so I'll show some graphs for our

00:19:48,840 --> 00:19:58,309
solidus core actually so solidus core is

00:19:53,759 --> 00:19:58,309
doing really well great job

00:19:59,450 --> 00:20:08,289
[Applause]

00:20:03,210 --> 00:20:10,210
cool now to the upper left section or in

00:20:08,289 --> 00:20:15,299
the upper left quadrant you have files

00:20:10,210 --> 00:20:18,220
that are super complex but nobody

00:20:15,299 --> 00:20:21,929
touches them or they don't change that

00:20:18,220 --> 00:20:26,409
much and Sandi Metz something like this

00:20:21,929 --> 00:20:30,340
if the code never changes it's not

00:20:26,409 --> 00:20:32,010
costing us money so maybe not top

00:20:30,340 --> 00:20:36,850
priority for you

00:20:32,010 --> 00:20:38,649
for solidus core we find it's just like

00:20:36,850 --> 00:20:41,169
a helper file so it doesn't really

00:20:38,649 --> 00:20:44,770
matter that much that a helper file for

00:20:41,169 --> 00:20:47,200
your tests is up there not a top

00:20:44,770 --> 00:20:51,190
priority so and it looks like there's

00:20:47,200 --> 00:20:54,010
only one of them up there now in the

00:20:51,190 --> 00:20:56,260
lower right quadrant it's interesting we

00:20:54,010 --> 00:21:00,220
get to see files that are low complexity

00:20:56,260 --> 00:21:03,190
by hot but high turn and that means that

00:21:00,220 --> 00:21:05,620
yeah there are a lot of files in there

00:21:03,190 --> 00:21:08,380
that everybody understands but they

00:21:05,620 --> 00:21:11,669
change a lot because there are reasons

00:21:08,380 --> 00:21:14,620
like I don't know like a label file or a

00:21:11,669 --> 00:21:16,659
translations file gets to show up there

00:21:14,620 --> 00:21:19,570
because your client keeps wanting you to

00:21:16,659 --> 00:21:22,419
change the labels and all that now for

00:21:19,570 --> 00:21:24,340
solidus core it's really cool there's

00:21:22,419 --> 00:21:26,289
only one of them there and it kind of

00:21:24,340 --> 00:21:28,870
makes sense that a configuration file

00:21:26,289 --> 00:21:32,559
keeps changing and changing but it's

00:21:28,870 --> 00:21:34,990
like low complexity again this is not

00:21:32,559 --> 00:21:38,679
the quadrant that is your priority so

00:21:34,990 --> 00:21:43,090
it's ok now we finally get to the most

00:21:38,679 --> 00:21:45,700
interesting quadrant here you get to see

00:21:43,090 --> 00:21:49,240
modules that are complex and change a

00:21:45,700 --> 00:21:51,820
lot and Michael feather says something

00:21:49,240 --> 00:21:53,770
interesting about this both Sandi Metz

00:21:51,820 --> 00:21:56,049
and Michael feathers have written about

00:21:53,770 --> 00:21:59,890
this topic about evaluating churn and

00:21:56,049 --> 00:22:03,010
complexity and there they have been a

00:21:59,890 --> 00:22:05,080
great inspiration for this talk so he

00:22:03,010 --> 00:22:07,870
says sometimes a class becomes so

00:22:05,080 --> 00:22:11,260
complex that refactoring seems too

00:22:07,870 --> 00:22:12,520
difficult so they're there not because

00:22:11,260 --> 00:22:14,410
you don't want our factor that

00:22:12,520 --> 00:22:16,570
you do you want to get rid of those

00:22:14,410 --> 00:22:20,250
complex on high churn files and move

00:22:16,570 --> 00:22:22,720
then move them to the lower left corner

00:22:20,250 --> 00:22:25,390
but they're just so hard to understand

00:22:22,720 --> 00:22:30,580
and maybe there are no tests covering

00:22:25,390 --> 00:22:33,490
those files the good news for solidus is

00:22:30,580 --> 00:22:39,820
that there's only one file there which

00:22:33,490 --> 00:22:40,950
is the importer order okay good good to

00:22:39,820 --> 00:22:45,550
know

00:22:40,950 --> 00:22:47,830
maybe you can just remove it cool so

00:22:45,550 --> 00:22:49,990
looking at this graph we get a bunch of

00:22:47,830 --> 00:22:53,080
signals right we get to see all those

00:22:49,990 --> 00:22:57,160
quadrants and we know what shape our

00:22:53,080 --> 00:22:59,170
application is is in we kind of get to

00:22:57,160 --> 00:23:01,420
answer this question question are we

00:22:59,170 --> 00:23:04,990
getting ourselves into a tar pit a

00:23:01,420 --> 00:23:08,230
dumpster fire or a truly maintainable

00:23:04,990 --> 00:23:11,620
project and sometimes it's not that easy

00:23:08,230 --> 00:23:15,100
okay like actually it is easy with like

00:23:11,620 --> 00:23:17,050
the solidus core thing the you see that

00:23:15,100 --> 00:23:19,540
you're in really good shape but

00:23:17,050 --> 00:23:23,110
sometimes you'll see something like this

00:23:19,540 --> 00:23:27,309
you say okay like most of the files are

00:23:23,110 --> 00:23:29,950
in the upper right quadrant so maybe I

00:23:27,309 --> 00:23:33,730
should get out of here as quickly as

00:23:29,950 --> 00:23:35,920
possible and if you say like yeah this

00:23:33,730 --> 00:23:41,920
is fine you are getting yourself in this

00:23:35,920 --> 00:23:44,140
state cool so in terms of

00:23:41,920 --> 00:23:47,230
maintainability we talked about two

00:23:44,140 --> 00:23:50,040
things simple cough and Ruby critic for

00:23:47,230 --> 00:23:53,890
the two factors that I care about and

00:23:50,040 --> 00:23:56,980
you can think about it as an EK key for

00:23:53,890 --> 00:23:58,450
every time you go to the doctor you see

00:23:56,980 --> 00:23:59,980
all these three signals and they're

00:23:58,450 --> 00:24:02,110
talking about the same application

00:23:59,980 --> 00:24:04,690
they're talking about code coverage

00:24:02,110 --> 00:24:07,510
they're talking about code smells and

00:24:04,690 --> 00:24:09,600
they're talking about complexity now I

00:24:07,510 --> 00:24:14,610
like to think about this as signals

00:24:09,600 --> 00:24:20,190
first signal is about code coverage cool

00:24:14,610 --> 00:24:23,169
second signal is about complexity now

00:24:20,190 --> 00:24:24,780
both of the signals are for the same

00:24:23,169 --> 00:24:27,130
code base

00:24:24,780 --> 00:24:29,680
so you can put them in the same graph

00:24:27,130 --> 00:24:33,640
they are both showing you one aspect of

00:24:29,680 --> 00:24:36,160
your application and I what what I want

00:24:33,640 --> 00:24:40,630
to propose is this what if we could

00:24:36,160 --> 00:24:43,120
combine those two signals into one just

00:24:40,630 --> 00:24:46,930
one signal that tells us what's their

00:24:43,120 --> 00:24:51,310
health of our project I like to call

00:24:46,930 --> 00:24:53,920
that one distinct score the stink score

00:24:51,310 --> 00:24:57,400
is going to be a combination of code

00:24:53,920 --> 00:24:59,710
coverage and complexity think about it

00:24:57,400 --> 00:25:03,520
this way it's going to be the function

00:24:59,710 --> 00:25:06,100
of code quality and code coverage and as

00:25:03,520 --> 00:25:07,720
I said code quality is a bunch of thing

00:25:06,100 --> 00:25:10,480
so it's going to be the function of code

00:25:07,720 --> 00:25:14,350
smells churn complexity and code

00:25:10,480 --> 00:25:19,000
coverage and the main idea behind this

00:25:14,350 --> 00:25:24,820
is that files that are not covered by

00:25:19,000 --> 00:25:27,520
any tests should be penalized let's see

00:25:24,820 --> 00:25:29,290
it in an example okay this I love to

00:25:27,520 --> 00:25:32,490
learn by example so this definitely

00:25:29,290 --> 00:25:35,560
makes it easier for me to explain it

00:25:32,490 --> 00:25:38,860
let's say we have food RB has churn

00:25:35,560 --> 00:25:41,590
complexity and smells at 10 we multiply

00:25:38,860 --> 00:25:45,790
all three of them and we get the score

00:25:41,590 --> 00:25:48,610
off a thousand cool let's say we have

00:25:45,790 --> 00:25:51,340
another file call bar and bar has

00:25:48,610 --> 00:25:55,090
exactly the same parameters exactly the

00:25:51,340 --> 00:25:58,440
same total for smells if you put them

00:25:55,090 --> 00:26:01,750
side-by-side we can compare them and say

00:25:58,440 --> 00:26:04,810
well they're about the same right like

00:26:01,750 --> 00:26:06,220
so foo is not stinkier than bar and bar

00:26:04,810 --> 00:26:10,600
is not stinkier than foo

00:26:06,220 --> 00:26:14,260
cool but we're missing that signal that

00:26:10,600 --> 00:26:16,000
I was talking about code coverage so

00:26:14,260 --> 00:26:19,690
let's think about it if we had code

00:26:16,000 --> 00:26:22,870
coverage for the same files foo Darby

00:26:19,690 --> 00:26:26,140
has 0% code coverage

00:26:22,870 --> 00:26:30,250
I believe this file needs to be

00:26:26,140 --> 00:26:32,830
penalized in a way that bumps the score

00:26:30,250 --> 00:26:36,330
or this stink score up to a hundred

00:26:32,830 --> 00:26:38,440
thousand now this is pretty simple math

00:26:36,330 --> 00:26:42,100
the

00:26:38,440 --> 00:26:45,879
penality factor or the the punishment

00:26:42,100 --> 00:26:48,159
factor is perfect coverage - the total

00:26:45,879 --> 00:26:51,879
coverage of the file so for this case

00:26:48,159 --> 00:26:55,750
it's a hundred now let's look at Barbie

00:26:51,879 --> 00:26:58,029
it's covered at a hundred percent cool

00:26:55,750 --> 00:27:00,879
that means the distinct score doesn't

00:26:58,029 --> 00:27:03,730
change there's no penalty to the stink

00:27:00,879 --> 00:27:08,620
score so let's look at them again

00:27:03,730 --> 00:27:11,049
side by side are they the same no like

00:27:08,620 --> 00:27:13,120
when I look at them and I when I'm going

00:27:11,049 --> 00:27:15,460
to decide which file I want to change

00:27:13,120 --> 00:27:17,759
I'm probably going to change the one

00:27:15,460 --> 00:27:22,990
with code coverage at a hundred percent

00:27:17,759 --> 00:27:28,960
so food RB is considerably stinkier than

00:27:22,990 --> 00:27:32,110
Barbie to make it easier for anyone to

00:27:28,960 --> 00:27:36,129
analyze sir code base I wrote a ruby gem

00:27:32,110 --> 00:27:38,049
called skunk because of course skunk

00:27:36,129 --> 00:27:41,830
knows all about the smells right they

00:27:38,049 --> 00:27:44,139
they can go in and basically look at the

00:27:41,830 --> 00:27:46,809
source code and tell you this stink

00:27:44,139 --> 00:27:50,919
score for every file that you have and

00:27:46,809 --> 00:27:53,860
you can find it over there and it builds

00:27:50,919 --> 00:27:56,200
on top of Ruby critic it uses reports

00:27:53,860 --> 00:27:58,750
generated by Ruby critic and it uses

00:27:56,200 --> 00:28:02,769
reports generated by simple cough and it

00:27:58,750 --> 00:28:06,159
combines all that data into one single

00:28:02,769 --> 00:28:10,210
report and you can install it today like

00:28:06,159 --> 00:28:13,559
this and you can run it like this so

00:28:10,210 --> 00:28:17,549
again it's super simple and you get

00:28:13,559 --> 00:28:20,259
console output that looks like this now

00:28:17,549 --> 00:28:22,480
this is a lot of data and I don't want

00:28:20,259 --> 00:28:26,200
you to read all of this the things that

00:28:22,480 --> 00:28:28,539
are important are right here we get a

00:28:26,200 --> 00:28:32,500
sorted list of every file in our

00:28:28,539 --> 00:28:35,769
application and it's sorted by the stank

00:28:32,500 --> 00:28:38,889
score so here we can click clearly see

00:28:35,769 --> 00:28:43,929
that get dot RB is the stinkiest file in

00:28:38,889 --> 00:28:46,960
our application so we don't need to run

00:28:43,929 --> 00:28:49,840
one report run another and then compare

00:28:46,960 --> 00:28:51,910
and cross-reference manually which is we

00:28:49,840 --> 00:28:55,540
what we had been doing at

00:28:51,910 --> 00:28:58,570
Subedar io at the end of the report you

00:28:55,540 --> 00:29:01,840
also get a total now the totals are not

00:28:58,570 --> 00:29:04,270
dad important but they do tell you like

00:29:01,840 --> 00:29:08,800
the total stink score and the average

00:29:04,270 --> 00:29:12,910
stink stink score profile in terms of

00:29:08,800 --> 00:29:16,000
the implementation skunk builds on top

00:29:12,910 --> 00:29:20,560
of ruby critic ruby critic talks about

00:29:16,000 --> 00:29:24,100
cost as being the sum of all smells plus

00:29:20,560 --> 00:29:28,680
the complexity divided by a complexity

00:29:24,100 --> 00:29:31,300
factor which is 25 because I don't know

00:29:28,680 --> 00:29:34,360
but anyway it's interesting because it

00:29:31,300 --> 00:29:39,130
uses this cost value to assign the GPA

00:29:34,360 --> 00:29:40,960
for every file so if a file has ton of

00:29:39,130 --> 00:29:44,110
smells and it's super complicated it

00:29:40,960 --> 00:29:47,830
will be enough now what I did in skunk

00:29:44,110 --> 00:29:51,130
is I use this cost formula and I

00:29:47,830 --> 00:29:54,310
multiply it by churn so I want to care

00:29:51,130 --> 00:29:57,130
about every time that a file changes so

00:29:54,310 --> 00:30:00,520
if a file has changed 27 times and it's

00:29:57,130 --> 00:30:05,320
costly is very costly I wanted to come

00:30:00,520 --> 00:30:07,870
up and bubble up to the top and then

00:30:05,320 --> 00:30:12,070
what I do is I use the coverage

00:30:07,870 --> 00:30:16,840
percentage to punish the files that have

00:30:12,070 --> 00:30:19,300
very little code coverage and the simple

00:30:16,840 --> 00:30:23,850
it's it's a simple formula and I'm

00:30:19,300 --> 00:30:26,590
definitely looking for feedback here so

00:30:23,850 --> 00:30:29,770
after the talk I would love to hear your

00:30:26,590 --> 00:30:33,330
thoughts about this and I also want you

00:30:29,770 --> 00:30:37,240
to take this as a warning it is version

00:30:33,330 --> 00:30:40,480
0.2 and there's there gonna be many

00:30:37,240 --> 00:30:43,650
changes to it this tool helps us

00:30:40,480 --> 00:30:47,860
prioritize the files that we want to

00:30:43,650 --> 00:30:50,140
refactor in our day to day so now we

00:30:47,860 --> 00:30:54,430
have three signals we have code coverage

00:30:50,140 --> 00:30:56,710
code quality and the stink score which

00:30:54,430 --> 00:30:59,740
is great because in part one what we

00:30:56,710 --> 00:31:04,630
care about is drawing the map and

00:30:59,740 --> 00:31:05,590
putting us there in the those are the

00:31:04,630 --> 00:31:09,370
LaBrea

00:31:05,590 --> 00:31:12,460
Tar Pits but now we know we are there

00:31:09,370 --> 00:31:18,010
and we can use that information to get

00:31:12,460 --> 00:31:18,670
out of it all right so now that we know

00:31:18,010 --> 00:31:24,400
where we are

00:31:18,670 --> 00:31:26,830
let's try to get out of it cool yes we

00:31:24,400 --> 00:31:28,750
all want to go back you know to work and

00:31:26,830 --> 00:31:30,850
we all want to refactor we all want to

00:31:28,750 --> 00:31:34,540
write tests and we all want to pay off

00:31:30,850 --> 00:31:38,320
technical debt but where do we week

00:31:34,540 --> 00:31:41,170
where do we you begin we have 27 files

00:31:38,320 --> 00:31:44,290
that need our attention how can we

00:31:41,170 --> 00:31:46,150
decide like what to do first well the

00:31:44,290 --> 00:31:51,360
first one is my favorite which is

00:31:46,150 --> 00:31:53,740
removing files off from the project now

00:31:51,360 --> 00:31:55,240
yes that will certainly decrease the

00:31:53,740 --> 00:31:57,810
stink score because we will have less

00:31:55,240 --> 00:32:00,490
modules cluttering our application

00:31:57,810 --> 00:32:04,180
there's a really cool tool for that it's

00:32:00,490 --> 00:32:08,710
called cover band and think about it as

00:32:04,180 --> 00:32:11,710
a simple cough tool but which uses real

00:32:08,710 --> 00:32:13,630
live production data to tell you the

00:32:11,710 --> 00:32:15,810
methods that are getting executed in

00:32:13,630 --> 00:32:19,480
production

00:32:15,810 --> 00:32:21,070
so what cover band you get a similar

00:32:19,480 --> 00:32:23,380
report than the one simple cough

00:32:21,070 --> 00:32:26,080
generated and it does tell you which

00:32:23,380 --> 00:32:29,710
methods are getting executed on a day to

00:32:26,080 --> 00:32:33,460
day basis you can use that to remove

00:32:29,710 --> 00:32:37,030
files which would be cool another way to

00:32:33,460 --> 00:32:42,070
go about this is yes refactoring complex

00:32:37,030 --> 00:32:44,920
files cool ok I want to do that I want

00:32:42,070 --> 00:32:48,360
to refactor a file and make it simpler

00:32:44,920 --> 00:32:51,520
right and if we look at this graph again

00:32:48,360 --> 00:32:55,900
these are great candidates for

00:32:51,520 --> 00:33:00,730
refactoring this can help us pay off

00:32:55,900 --> 00:33:04,240
technical debt but again we have four

00:33:00,730 --> 00:33:08,410
files there for classes that are super

00:33:04,240 --> 00:33:11,680
complex and while churn and complexity

00:33:08,410 --> 00:33:14,080
are really important it's not enough to

00:33:11,680 --> 00:33:17,590
prioritize it for me I don't know which

00:33:14,080 --> 00:33:18,880
one I can pick that will be the same as

00:33:17,590 --> 00:33:21,780
option for me

00:33:18,880 --> 00:33:24,700
so going back to the stink score table

00:33:21,780 --> 00:33:26,700
you can see the stink score and you can

00:33:24,700 --> 00:33:31,420
also see the code coverage report

00:33:26,700 --> 00:33:35,530
so don't go refactoring the ones that

00:33:31,420 --> 00:33:39,340
have 0% test coverage that would be a

00:33:35,530 --> 00:33:42,550
nightmare pick the ones that have some

00:33:39,340 --> 00:33:44,200
code coverage like the first one has 62%

00:33:42,550 --> 00:33:48,280
code coverage the other one's right

00:33:44,200 --> 00:33:50,050
there have 80 something percent which is

00:33:48,280 --> 00:33:52,540
great because if we can go in and

00:33:50,050 --> 00:33:55,840
refactor those we will get instant

00:33:52,540 --> 00:33:56,410
feedback from the tests so let's pick

00:33:55,840 --> 00:34:00,670
that one

00:33:56,410 --> 00:34:03,100
get that RB we go and we check the graph

00:34:00,670 --> 00:34:07,180
and we see that Gaddafi is in the upper

00:34:03,100 --> 00:34:09,430
right quadrant which adds up and we try

00:34:07,180 --> 00:34:12,460
to identify single responsibilities

00:34:09,430 --> 00:34:14,290
inside the file we've been taught that

00:34:12,460 --> 00:34:16,990
we want the file to have one single

00:34:14,290 --> 00:34:20,200
responsibility so if we find that that

00:34:16,990 --> 00:34:24,820
file has two responsibility awesome we

00:34:20,200 --> 00:34:29,110
can refactor it into two smaller files

00:34:24,820 --> 00:34:31,120
that have one responsibility each cool

00:34:29,110 --> 00:34:33,970
so now we'll have get fetcher and get

00:34:31,120 --> 00:34:37,840
calculator and that means that get dot

00:34:33,970 --> 00:34:41,890
RB goes away we refactor it we make sure

00:34:37,840 --> 00:34:46,690
that the tests are green and then we

00:34:41,890 --> 00:34:48,910
compare the skunk score to the state it

00:34:46,690 --> 00:34:52,120
was there before we start with factoring

00:34:48,910 --> 00:34:55,300
and if the numbers go down slightly

00:34:52,120 --> 00:34:58,960
awesome that means that we are moving in

00:34:55,300 --> 00:35:02,220
the right direction another great way to

00:34:58,960 --> 00:35:06,040
pay off technical debt is writing tests

00:35:02,220 --> 00:35:09,040
yes that would definitely help us and

00:35:06,040 --> 00:35:14,020
how do we prioritize which files we want

00:35:09,040 --> 00:35:16,270
to write tests for well let's go back to

00:35:14,020 --> 00:35:20,290
the table we can see that there are many

00:35:16,270 --> 00:35:24,700
files that have 0% code coverage now

00:35:20,290 --> 00:35:26,770
here there is some guessing because a

00:35:24,700 --> 00:35:29,110
couple of those files are just test

00:35:26,770 --> 00:35:31,660
files and temp files that you don't

00:35:29,110 --> 00:35:32,670
really care about but you do care about

00:35:31,660 --> 00:35:34,650
the rake tasks

00:35:32,670 --> 00:35:37,260
file in there because it is doing

00:35:34,650 --> 00:35:39,029
something for the library there's

00:35:37,260 --> 00:35:44,490
actually a report for the Ruby critic

00:35:39,029 --> 00:35:48,720
gem so it's pretty meta and then you go

00:35:44,490 --> 00:35:51,539
in you write the test and you again

00:35:48,720 --> 00:35:54,619
check this stink score to make sure that

00:35:51,539 --> 00:35:57,539
you are moving in the right direction so

00:35:54,619 --> 00:36:00,630
I want to start a conversation about

00:35:57,539 --> 00:36:03,869
this I want to show you this thing score

00:36:00,630 --> 00:36:05,670
to see what you can do with it I want

00:36:03,869 --> 00:36:09,319
you to think about the stink score as

00:36:05,670 --> 00:36:11,849
your compass to get out of the tar pit I

00:36:09,319 --> 00:36:15,990
don't want you to use this to point

00:36:11,849 --> 00:36:19,319
fingers to use it the wrong way this is

00:36:15,990 --> 00:36:23,760
a tool to prioritize refactoring and

00:36:19,319 --> 00:36:26,990
paying off technical debt if you're not

00:36:23,760 --> 00:36:30,170
convinced by the stink score that's fine

00:36:26,990 --> 00:36:33,480
you can just go in and use code coverage

00:36:30,170 --> 00:36:35,579
complexity and smells metrics to

00:36:33,480 --> 00:36:40,529
communicate that you are paying off

00:36:35,579 --> 00:36:42,900
technical debt to your boss all of our

00:36:40,529 --> 00:36:46,319
bosses have heard this before it's like

00:36:42,900 --> 00:36:48,809
oh the program ever before me was

00:36:46,319 --> 00:36:52,740
terrible he did a terrible codebase yada

00:36:48,809 --> 00:36:56,069
yada they've heard it before

00:36:52,740 --> 00:36:58,410
but if you can go in and show them the

00:36:56,069 --> 00:37:00,480
metrics off the codebase you'll have a

00:36:58,410 --> 00:37:02,819
lot more tools to convince them that

00:37:00,480 --> 00:37:06,960
it's worth it to spend time we're

00:37:02,819 --> 00:37:08,970
factoring the code so I hope that you

00:37:06,960 --> 00:37:11,460
find this talk interesting and that you

00:37:08,970 --> 00:37:14,299
can go back to work and use these tools

00:37:11,460 --> 00:37:17,039
to communicate better with your

00:37:14,299 --> 00:37:22,369
developer teammates but also with your

00:37:17,039 --> 00:37:22,369
bosses thank you

00:37:28,950 --> 00:37:33,190
there are a bunch of resources there

00:37:31,240 --> 00:37:35,950
that you can check out if you wanted to

00:37:33,190 --> 00:37:38,530
learn more about the source material for

00:37:35,950 --> 00:38:00,010
all this and I think we have some time

00:37:38,530 --> 00:38:01,869
for questions right that's a great

00:38:00,010 --> 00:38:05,859
question like how do you make sure that

00:38:01,869 --> 00:38:10,060
the tests are actually testing normal

00:38:05,859 --> 00:38:12,520
user flows right I don't have an answer

00:38:10,060 --> 00:38:15,430
for that I have read that mutation

00:38:12,520 --> 00:38:18,130
testing can be useful for something like

00:38:15,430 --> 00:38:21,119
that where you go in and you start

00:38:18,130 --> 00:38:23,980
removing code from your application and

00:38:21,119 --> 00:38:27,550
you watch your tests either fail or work

00:38:23,980 --> 00:38:30,490
I find that could be super useful if the

00:38:27,550 --> 00:38:33,550
tests are not representing reality like

00:38:30,490 --> 00:38:36,490
a lot of people a lot of mock ist's like

00:38:33,550 --> 00:38:38,560
to use mocks to write tests and they

00:38:36,490 --> 00:38:40,930
mock them so well that sometimes Joe

00:38:38,560 --> 00:38:43,390
yeah code changes and the tests don't

00:38:40,930 --> 00:38:47,710
tell you that things are going to break

00:38:43,390 --> 00:38:49,859
so I guess if you could analyze every

00:38:47,710 --> 00:38:52,630
single test there is and I look at the

00:38:49,859 --> 00:38:55,480
balance between like system tests and

00:38:52,630 --> 00:38:58,089
unit tests and controller tests and but

00:38:55,480 --> 00:39:00,280
it would have to be like kind of like a

00:38:58,089 --> 00:39:05,490
qualitative assist assessment that you

00:39:00,280 --> 00:39:05,490
need to do yourself yeah

00:39:12,989 --> 00:39:20,609
yeah cool so yeah how do you convince

00:39:16,839 --> 00:39:23,650
people who yet are not technical and

00:39:20,609 --> 00:39:24,849
they'd yeah they're like if it's not

00:39:23,650 --> 00:39:29,890
broken don't fix it

00:39:24,849 --> 00:39:32,019
I think it comes down to velocity like

00:39:29,890 --> 00:39:34,569
they probably care about like how long

00:39:32,019 --> 00:39:37,619
you take to ship some things so I would

00:39:34,569 --> 00:39:40,180
go about it trying to talk about the

00:39:37,619 --> 00:39:42,400
speed and the velocity I don't know if

00:39:40,180 --> 00:39:44,170
they know about velocity but you could

00:39:42,400 --> 00:39:46,390
make a claim that by paying off

00:39:44,170 --> 00:39:50,259
technical debt you are going to be

00:39:46,390 --> 00:39:51,880
speedier when making the changes and

00:39:50,259 --> 00:40:02,440
changes are not going to take forever

00:39:51,880 --> 00:40:05,930
okay then I'll go all right thank you

00:40:02,440 --> 00:40:19,219
[Applause]

00:40:05,930 --> 00:40:19,219

YouTube URL: https://www.youtube.com/watch?v=am-oVaAkDNw


