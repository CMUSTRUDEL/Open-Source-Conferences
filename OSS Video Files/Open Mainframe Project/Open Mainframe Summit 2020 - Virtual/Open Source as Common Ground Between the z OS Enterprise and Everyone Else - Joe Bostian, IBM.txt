Title: Open Source as Common Ground Between the z OS Enterprise and Everyone Else - Joe Bostian, IBM
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Open Source as Common Ground Between the z/OS Enterprise and Everyone Else - Joe Bostian, IBM

As the system of record for much of the world's financial infrastructure, IBM Z and z/OS have evolved according to a different set of rules than most other technology driven service providers. Security, efficiency, and reliability are the most powerful forces driving z/OS development in ways that the open source community still doesn't fully appreciate today. Open source software has brought an unprecedented wave of creativity to software development that could never be achieved by even a large group of private entities selling their own proprietary offerings. As open source solutions mature, they increasingly encounter some of the same forces that z/OS continues to address. The z/OS and the open source communities have strengths that each can benefit from. Learn how this can be accomplished while preserving the characteristics that make each community successful.
Captions: 
	00:00:00,080 --> 00:00:06,480
hi my name is joe bostian and i'm a

00:00:02,320 --> 00:00:07,919
mainframe open source architect at ibm

00:00:06,480 --> 00:00:09,679
i'd like to talk today about the

00:00:07,919 --> 00:00:11,519
interest shared between the open source

00:00:09,679 --> 00:00:12,960
and mainframe communities

00:00:11,519 --> 00:00:14,639
while each community operates in

00:00:12,960 --> 00:00:15,519
different ways to achieve a certain set

00:00:14,639 --> 00:00:18,240
of goals

00:00:15,519 --> 00:00:19,920
the goals themselves are often common in

00:00:18,240 --> 00:00:21,840
reality there are lots of ways that the

00:00:19,920 --> 00:00:24,000
open source and mainframe communities

00:00:21,840 --> 00:00:25,439
can use open source architecture to

00:00:24,000 --> 00:00:26,400
leverage the unique strengths of the

00:00:25,439 --> 00:00:28,160
mainframe

00:00:26,400 --> 00:00:29,760
to make the overall enterprise compute

00:00:28,160 --> 00:00:33,279
environment more efficient

00:00:29,760 --> 00:00:33,279
secure and resilient

00:00:33,520 --> 00:00:37,040
one of the truths mainframers like to

00:00:35,200 --> 00:00:38,719
recite a lot is that the mainframe is a

00:00:37,040 --> 00:00:40,800
system of record for much of the world's

00:00:38,719 --> 00:00:42,399
transactional data

00:00:40,800 --> 00:00:44,640
although it's hard for a consumer to

00:00:42,399 --> 00:00:47,760
find direct access to a mainframe

00:00:44,640 --> 00:00:49,039
the atms credit card readers and online

00:00:47,760 --> 00:00:50,960
web interfaces we all

00:00:49,039 --> 00:00:53,039
interact with usually talk to a

00:00:50,960 --> 00:00:55,039
mainframe when it's necessary to record

00:00:53,039 --> 00:00:58,480
an official exchange of funds

00:00:55,039 --> 00:00:59,920
goods or services a philosophical

00:00:58,480 --> 00:01:00,719
difference between the mainframe

00:00:59,920 --> 00:01:02,960
community

00:01:00,719 --> 00:01:04,720
and really the rest of the it industry

00:01:02,960 --> 00:01:06,400
is the largely forgotten concept of

00:01:04,720 --> 00:01:08,159
vertical scale

00:01:06,400 --> 00:01:09,760
what this means is the qualities of

00:01:08,159 --> 00:01:12,799
service like security

00:01:09,760 --> 00:01:14,880
scalability and availability have been

00:01:12,799 --> 00:01:16,320
prioritized at the lowest levels of the

00:01:14,880 --> 00:01:18,720
mainframe hardware

00:01:16,320 --> 00:01:20,320
and software stack whereas it

00:01:18,720 --> 00:01:21,200
infrastructure based on commodity

00:01:20,320 --> 00:01:23,040
hardware

00:01:21,200 --> 00:01:25,040
usually compensates with horizontal

00:01:23,040 --> 00:01:26,799
scale and redundancy managed through

00:01:25,040 --> 00:01:28,400
software

00:01:26,799 --> 00:01:31,200
does the mainframe fit into widely

00:01:28,400 --> 00:01:33,360
accepted modern architectures like cloud

00:01:31,200 --> 00:01:35,119
of course it does but when we integrate

00:01:33,360 --> 00:01:36,880
the mainframe into an enterprise

00:01:35,119 --> 00:01:38,799
we should take advantage of all its

00:01:36,880 --> 00:01:40,000
special capabilities to maximize

00:01:38,799 --> 00:01:43,439
efficiency and return

00:01:40,000 --> 00:01:45,360
on investment an example where

00:01:43,439 --> 00:01:46,960
inefficiencies are often introduced into

00:01:45,360 --> 00:01:48,799
an enterprise architecture

00:01:46,960 --> 00:01:51,439
is in the creation of a physical data

00:01:48,799 --> 00:01:53,119
lake this is the first generation

00:01:51,439 --> 00:01:55,200
cloud-based idea

00:01:53,119 --> 00:01:56,719
that data across an enterprise should

00:01:55,200 --> 00:01:58,000
first be collected into a central

00:01:56,719 --> 00:01:59,600
repository

00:01:58,000 --> 00:02:01,680
and then processed by application

00:01:59,600 --> 00:02:04,159
developers or data scientists

00:02:01,680 --> 00:02:06,000
to gain greater insights it's an

00:02:04,159 --> 00:02:07,920
architecture ready for retirement

00:02:06,000 --> 00:02:09,039
in favor of distributed view of the

00:02:07,920 --> 00:02:10,560
enterprise

00:02:09,039 --> 00:02:12,239
where compute nodes of varying

00:02:10,560 --> 00:02:15,200
capabilities are utilized to their

00:02:12,239 --> 00:02:15,200
maximum extent

00:02:15,280 --> 00:02:18,720
why would you build an extensive

00:02:16,560 --> 00:02:21,280
redundant infrastructure simply to copy

00:02:18,720 --> 00:02:22,879
data from an extremely capable mainframe

00:02:21,280 --> 00:02:26,319
the same way you would a dumb social

00:02:22,879 --> 00:02:28,080
media stream or an iot device

00:02:26,319 --> 00:02:29,440
bring some of your application workload

00:02:28,080 --> 00:02:31,360
to the mainframe

00:02:29,440 --> 00:02:32,959
act upon the local data there to create

00:02:31,360 --> 00:02:34,800
intermediate results

00:02:32,959 --> 00:02:36,480
and integrate a much smaller payload

00:02:34,800 --> 00:02:39,040
into your data make

00:02:36,480 --> 00:02:40,560
you'll save lots of infrastructure costs

00:02:39,040 --> 00:02:42,000
reduce latency

00:02:40,560 --> 00:02:44,239
and improve the performance of your

00:02:42,000 --> 00:02:45,920
enterprise and you won't have to

00:02:44,239 --> 00:02:50,640
fundamentally change your appdev

00:02:45,920 --> 00:02:53,280
pipeline to accomplish this

00:02:50,640 --> 00:02:54,879
old crusty mainframers from wayback

00:02:53,280 --> 00:02:56,319
often point out there's nothing new in

00:02:54,879 --> 00:02:57,760
the open source world

00:02:56,319 --> 00:03:00,000
they're just different ways of doing the

00:02:57,760 --> 00:03:01,599
same thing so what

00:03:00,000 --> 00:03:03,280
one could easily argue that anything

00:03:01,599 --> 00:03:04,159
newer than a touring machine is just a

00:03:03,280 --> 00:03:06,319
different way of doing

00:03:04,159 --> 00:03:07,519
things yet the benefit of doing them in

00:03:06,319 --> 00:03:10,959
a modern way

00:03:07,519 --> 00:03:12,480
is self-evident although the ibm 360

00:03:10,959 --> 00:03:15,120
mainframe established the world's

00:03:12,480 --> 00:03:16,640
original business computing architecture

00:03:15,120 --> 00:03:18,959
today's enterprise has evolved

00:03:16,640 --> 00:03:20,480
interfaces that are far superior

00:03:18,959 --> 00:03:21,760
where we often jump the tracks in the

00:03:20,480 --> 00:03:23,120
debate about the mainframe's

00:03:21,760 --> 00:03:24,959
significance today

00:03:23,120 --> 00:03:27,200
is when one side assumes that today's

00:03:24,959 --> 00:03:28,560
z15 does things the same way as the

00:03:27,200 --> 00:03:31,760
system 360

00:03:28,560 --> 00:03:34,000
just with a faster clock speed today's

00:03:31,760 --> 00:03:36,319
mainframe is world-class in every way

00:03:34,000 --> 00:03:38,159
but there's always room for improvement

00:03:36,319 --> 00:03:39,760
open source infrastructure is vitally

00:03:38,159 --> 00:03:41,599
important to the mainframe for several

00:03:39,760 --> 00:03:43,040
reasons

00:03:41,599 --> 00:03:44,879
one of the biggest developments in the

00:03:43,040 --> 00:03:46,480
open source world over the last 10 years

00:03:44,879 --> 00:03:48,400
or so has been the emergence of the

00:03:46,480 --> 00:03:50,560
so-called freemium model

00:03:48,400 --> 00:03:52,560
where a project is started providing a

00:03:50,560 --> 00:03:55,280
set of base functions to users at no

00:03:52,560 --> 00:03:56,959
cost the founders of the project often

00:03:55,280 --> 00:03:58,480
go on to create a commercial offering

00:03:56,959 --> 00:04:01,280
that builds upon the open source

00:03:58,480 --> 00:04:03,200
project with commercial features for a

00:04:01,280 --> 00:04:05,040
fee

00:04:03,200 --> 00:04:07,200
as users begin to adopt the base

00:04:05,040 --> 00:04:08,959
functions the commercial offering builds

00:04:07,200 --> 00:04:10,319
a ready audience of potential paying

00:04:08,959 --> 00:04:11,840
customers

00:04:10,319 --> 00:04:13,439
even users who don't upgrade are

00:04:11,840 --> 00:04:15,360
valuable to the founders

00:04:13,439 --> 00:04:17,680
because a talent pool grows around the

00:04:15,360 --> 00:04:19,199
project further supporting a commercial

00:04:17,680 --> 00:04:20,880
offering

00:04:19,199 --> 00:04:22,560
every time a student enrolls in a course

00:04:20,880 --> 00:04:24,479
today they're not just building their

00:04:22,560 --> 00:04:26,320
own skill set and achieving technical

00:04:24,479 --> 00:04:28,479
eminence they're making use of a

00:04:26,320 --> 00:04:30,639
technology stack that builds mind share

00:04:28,479 --> 00:04:32,400
for the projects of that stack

00:04:30,639 --> 00:04:34,080
the mainframe is effectively cut off

00:04:32,400 --> 00:04:35,600
from an important user base

00:04:34,080 --> 00:04:38,639
every time it's omitted from one of

00:04:35,600 --> 00:04:40,960
these technology stacks

00:04:38,639 --> 00:04:41,680
the modern enterprise is a heterogeneous

00:04:40,960 --> 00:04:43,360
assembly of

00:04:41,680 --> 00:04:44,880
resources and compute nodes from

00:04:43,360 --> 00:04:46,080
different vendors

00:04:44,880 --> 00:04:48,639
in order for these vendors to

00:04:46,080 --> 00:04:50,560
interoperate well they often establish

00:04:48,639 --> 00:04:51,680
standards organizations to set the rules

00:04:50,560 --> 00:04:53,520
of engagement

00:04:51,680 --> 00:04:54,720
and give their customers confidence in

00:04:53,520 --> 00:04:57,840
the longevity

00:04:54,720 --> 00:04:59,600
and relevance of their environment

00:04:57,840 --> 00:05:01,520
these standards bodies can be official

00:04:59,600 --> 00:05:03,520
organizations like the internet

00:05:01,520 --> 00:05:04,720
engineering task force or the linux

00:05:03,520 --> 00:05:06,639
foundation

00:05:04,720 --> 00:05:09,680
or they can be de facto standards that

00:05:06,639 --> 00:05:13,280
large number of users informally accept

00:05:09,680 --> 00:05:15,360
like pdf sometimes government sets legal

00:05:13,280 --> 00:05:17,680
requirements for standards compliance

00:05:15,360 --> 00:05:19,759
as part of the vendor bidding process

00:05:17,680 --> 00:05:21,759
and sometimes clients simply require

00:05:19,759 --> 00:05:24,800
standards conformance as part of a

00:05:21,759 --> 00:05:26,479
private contact contract

00:05:24,800 --> 00:05:28,560
the dynamic nature of the open source

00:05:26,479 --> 00:05:31,440
community is driven by the unbounded

00:05:28,560 --> 00:05:33,280
number of projects and people involved

00:05:31,440 --> 00:05:34,960
anyone can create a project and build a

00:05:33,280 --> 00:05:36,880
community around it

00:05:34,960 --> 00:05:39,039
it's practically impossible for any

00:05:36,880 --> 00:05:41,520
single vendor or organization

00:05:39,039 --> 00:05:43,360
to dictate industry direction because

00:05:41,520 --> 00:05:46,000
anyone can challenge the status quo with

00:05:43,360 --> 00:05:48,240
their own ideas and projects

00:05:46,000 --> 00:05:49,360
new and usually better solutions emerge

00:05:48,240 --> 00:05:52,240
all the time

00:05:49,360 --> 00:05:53,280
for existing problems and tasks there's

00:05:52,240 --> 00:05:55,440
no part of the i t

00:05:53,280 --> 00:05:58,479
universe that can't be addressed by an

00:05:55,440 --> 00:06:00,000
open source community

00:05:58,479 --> 00:06:02,319
an open source presence has been

00:06:00,000 --> 00:06:04,160
building on z os for several years

00:06:02,319 --> 00:06:05,759
and ibm has played a prominent role in

00:06:04,160 --> 00:06:08,240
the open source world through several

00:06:05,759 --> 00:06:09,919
projects and organizations

00:06:08,240 --> 00:06:11,759
a collection of open source languages

00:06:09,919 --> 00:06:13,520
currently runs on z os

00:06:11,759 --> 00:06:15,680
starting with java which has been around

00:06:13,520 --> 00:06:17,440
since the early 2000s

00:06:15,680 --> 00:06:18,720
python's been available as well for a

00:06:17,440 --> 00:06:19,680
number of years through different

00:06:18,720 --> 00:06:22,000
offerings

00:06:19,680 --> 00:06:25,039
but more recently languages like node.js

00:06:22,000 --> 00:06:26,960
and go have become available

00:06:25,039 --> 00:06:28,960
open source projects like zoe and

00:06:26,960 --> 00:06:30,800
websphere based on open liberty

00:06:28,960 --> 00:06:32,720
have aligned application development on

00:06:30,800 --> 00:06:35,199
z os with modern frameworks and

00:06:32,720 --> 00:06:37,440
pipelines from other platforms

00:06:35,199 --> 00:06:39,199
ibm wazi continues this alignment and

00:06:37,440 --> 00:06:41,280
components like ansible

00:06:39,199 --> 00:06:43,120
are similarly making the operation and

00:06:41,280 --> 00:06:44,880
automation of processes

00:06:43,120 --> 00:06:46,720
look and feel like those across the

00:06:44,880 --> 00:06:48,800
enterprise

00:06:46,720 --> 00:06:49,759
rocket software provides a suite of open

00:06:48,800 --> 00:06:51,759
source tools

00:06:49,759 --> 00:06:53,840
for the unix system services environment

00:06:51,759 --> 00:06:56,800
of z os that makes it look and feel more

00:06:53,840 --> 00:06:58,720
like a linux platform

00:06:56,800 --> 00:07:00,960
open source plays a key role in the new

00:06:58,720 --> 00:07:04,560
zos container extensions feature

00:07:00,960 --> 00:07:07,039
also known as zcx zcx actually runs a

00:07:04,560 --> 00:07:09,199
linux kernel in a zos address space

00:07:07,039 --> 00:07:11,440
to support open container initiative

00:07:09,199 --> 00:07:14,080
compliant containers

00:07:11,440 --> 00:07:15,520
containers built for the ibm z platform

00:07:14,080 --> 00:07:17,360
can be downloaded from well-known

00:07:15,520 --> 00:07:20,880
registries like docker hub

00:07:17,360 --> 00:07:22,560
or the red hat image catalog open source

00:07:20,880 --> 00:07:24,479
has been incorporated in commercial

00:07:22,560 --> 00:07:26,319
products for some time

00:07:24,479 --> 00:07:27,599
offerings like watson machine learning

00:07:26,319 --> 00:07:30,160
for z os

00:07:27,599 --> 00:07:32,319
and ibm open data analytics are mostly

00:07:30,160 --> 00:07:34,639
collections of open source packages

00:07:32,319 --> 00:07:38,479
with configurations and toolings to

00:07:34,639 --> 00:07:38,479
optimize their use on the mainframe

00:07:42,400 --> 00:07:47,520
with the implementation of zcx ibm has

00:07:45,599 --> 00:07:49,840
enabled a shared ecosystem between the

00:07:47,520 --> 00:07:50,960
linux and zos platforms for the first

00:07:49,840 --> 00:07:53,199
time

00:07:50,960 --> 00:07:55,280
what this means to z os is that users

00:07:53,199 --> 00:07:56,240
have immediate access to a library of

00:07:55,280 --> 00:07:57,919
containers

00:07:56,240 --> 00:07:59,919
that the linux community has developed

00:07:57,919 --> 00:08:01,520
on z for many years

00:07:59,919 --> 00:08:03,680
these can be pulled and deployed in the

00:08:01,520 --> 00:08:06,800
zcx appliance without change

00:08:03,680 --> 00:08:08,800
using common open source interfaces the

00:08:06,800 --> 00:08:10,479
operation and use of these containers

00:08:08,800 --> 00:08:14,000
within a zcx appliance

00:08:10,479 --> 00:08:15,919
is identical to other linux platforms

00:08:14,000 --> 00:08:17,360
the linux on z community benefits from

00:08:15,919 --> 00:08:19,680
this as well because it drives

00:08:17,360 --> 00:08:22,319
development of modern applications

00:08:19,680 --> 00:08:24,560
to access the subsystems and data that

00:08:22,319 --> 00:08:26,000
originates on z os

00:08:24,560 --> 00:08:28,319
one of the first examples that we

00:08:26,000 --> 00:08:30,240
published to illustrate zcx use

00:08:28,319 --> 00:08:31,919
demonstrates a configuration of open

00:08:30,240 --> 00:08:35,120
source and zos connect

00:08:31,919 --> 00:08:36,959
to interact with kicks many of the key

00:08:35,120 --> 00:08:38,399
components of this application were

00:08:36,959 --> 00:08:40,640
developed on linux on z

00:08:38,399 --> 00:08:42,479
and containerized this allowed the

00:08:40,640 --> 00:08:43,440
application developer to assemble these

00:08:42,479 --> 00:08:45,839
components

00:08:43,440 --> 00:08:48,320
to interact with z os interfaces and

00:08:45,839 --> 00:08:50,000
create a complete workflow

00:08:48,320 --> 00:08:52,399
the developer of this example

00:08:50,000 --> 00:08:54,240
application comes from the zos community

00:08:52,399 --> 00:08:56,480
and he started his effort in order to

00:08:54,240 --> 00:08:58,240
learn the zcx environment

00:08:56,480 --> 00:08:59,920
he told me he expected it to take a

00:08:58,240 --> 00:09:01,200
couple of days but he's

00:08:59,920 --> 00:09:03,279
he was able to get it running in an

00:09:01,200 --> 00:09:05,440
afternoon this

00:09:03,279 --> 00:09:07,760
rapid application development was only

00:09:05,440 --> 00:09:09,200
possible because zcx enables true

00:09:07,760 --> 00:09:10,720
cross-platform development and

00:09:09,200 --> 00:09:12,720
deployment

00:09:10,720 --> 00:09:15,120
any container image developed on linux

00:09:12,720 --> 00:09:17,760
on z now runs on z os

00:09:15,120 --> 00:09:19,760
and conversely any container image

00:09:17,760 --> 00:09:20,320
developed on z os can deploy just as

00:09:19,760 --> 00:09:23,120
easily

00:09:20,320 --> 00:09:24,959
on linux and z it means we can now

00:09:23,120 --> 00:09:26,800
develop for either platform

00:09:24,959 --> 00:09:29,519
and deploy on the platform that makes

00:09:26,800 --> 00:09:30,959
the most sense for a given environment

00:09:29,519 --> 00:09:32,800
decoupling the development and

00:09:30,959 --> 00:09:34,399
deployment choices like this

00:09:32,800 --> 00:09:36,399
allows us to break down the barriers

00:09:34,399 --> 00:09:39,519
between z os and linux on z

00:09:36,399 --> 00:09:41,200
to create an ibm z ecosystem in place of

00:09:39,519 --> 00:09:42,880
two different operating specific

00:09:41,200 --> 00:09:44,720
ecosystems

00:09:42,880 --> 00:09:47,200
this becomes more important as we build

00:09:44,720 --> 00:09:49,760
out container orchestration capabilities

00:09:47,200 --> 00:09:51,760
and associated infrastructure like ibm

00:09:49,760 --> 00:09:53,279
cloud packs

00:09:51,760 --> 00:09:55,120
it's also important to know that

00:09:53,279 --> 00:09:58,160
although zcx provides

00:09:55,120 --> 00:09:59,920
a very important capability for ibm z it

00:09:58,160 --> 00:10:00,240
doesn't mean there's no longer a need to

00:09:59,920 --> 00:10:02,320
port

00:10:00,240 --> 00:10:04,959
open source natively to the unix system

00:10:02,320 --> 00:10:07,120
services environment of z os

00:10:04,959 --> 00:10:08,480
although uss lacks some of the appdev

00:10:07,120 --> 00:10:09,600
infrastructure present on other

00:10:08,480 --> 00:10:11,600
platforms

00:10:09,600 --> 00:10:14,480
it provides the necessary interfaces to

00:10:11,600 --> 00:10:16,079
interact directly with cos resources

00:10:14,480 --> 00:10:18,399
there are many workloads that require

00:10:16,079 --> 00:10:20,800
this kind of access particularly in the

00:10:18,399 --> 00:10:23,360
devops domain

00:10:20,800 --> 00:10:25,600
the key takeaway here is that tighter

00:10:23,360 --> 00:10:27,360
open source integration for ibm z will

00:10:25,600 --> 00:10:29,040
include containerized and native

00:10:27,360 --> 00:10:32,320
software implementations

00:10:29,040 --> 00:10:34,320
across both linux and z os and clients

00:10:32,320 --> 00:10:38,320
will have more flexibility to develop

00:10:34,320 --> 00:10:38,320
and deploy as they see fit

00:10:42,240 --> 00:10:46,000
it's hard to overstate the importance

00:10:44,160 --> 00:10:47,920
that organizational culture and roles

00:10:46,000 --> 00:10:51,040
play in the success of open source

00:10:47,920 --> 00:10:52,959
efforts on ibm z the need to have a

00:10:51,040 --> 00:10:53,519
highly secure system of record means

00:10:52,959 --> 00:10:55,360
that most

00:10:53,519 --> 00:10:56,800
z os environments have severely

00:10:55,360 --> 00:10:58,480
restricted access

00:10:56,800 --> 00:11:00,079
that many open source developers and

00:10:58,480 --> 00:11:03,279
architects will see is impossible

00:11:00,079 --> 00:11:05,120
to overcome these environments can be

00:11:03,279 --> 00:11:06,560
configured to create a useful open

00:11:05,120 --> 00:11:08,880
source workspace

00:11:06,560 --> 00:11:10,560
the developers will find familiar but it

00:11:08,880 --> 00:11:12,720
requires cooperation between

00:11:10,560 --> 00:11:15,200
people with roles who don't usually

00:11:12,720 --> 00:11:17,040
interact regularly

00:11:15,200 --> 00:11:18,880
open source development usually requires

00:11:17,040 --> 00:11:20,480
open access to the internet

00:11:18,880 --> 00:11:22,240
so that content can be pulled from

00:11:20,480 --> 00:11:25,279
several different locations

00:11:22,240 --> 00:11:27,120
and assembled into a workload this open

00:11:25,279 --> 00:11:29,360
access is a non-starter for zos

00:11:27,120 --> 00:11:31,120
production environments

00:11:29,360 --> 00:11:33,200
most open source repositories and

00:11:31,120 --> 00:11:34,959
registries support a local offline

00:11:33,200 --> 00:11:36,399
configuration

00:11:34,959 --> 00:11:37,920
an important package management

00:11:36,399 --> 00:11:38,640
components of the development tool

00:11:37,920 --> 00:11:41,680
chains

00:11:38,640 --> 00:11:43,040
can point to these local repositories

00:11:41,680 --> 00:11:44,720
some of this infrastructure can be

00:11:43,040 --> 00:11:47,600
hosted on linux on z

00:11:44,720 --> 00:11:49,120
or even an x86 platform as long as it's

00:11:47,600 --> 00:11:51,120
inside the corporate firewall

00:11:49,120 --> 00:11:53,519
and the contents are curated to satisfy

00:11:51,120 --> 00:11:55,680
security requirements

00:11:53,519 --> 00:11:56,720
the application developer solution

00:11:55,680 --> 00:11:58,560
architect

00:11:56,720 --> 00:12:00,880
and z os systems programmer have to

00:11:58,560 --> 00:12:02,880
cooperate to create an internal sandbox

00:12:00,880 --> 00:12:03,839
or staging area for code development and

00:12:02,880 --> 00:12:07,040
testing

00:12:03,839 --> 00:12:08,399
with limited access to the outside world

00:12:07,040 --> 00:12:10,000
this space can contain the same

00:12:08,399 --> 00:12:11,839
infrastructure used for development on

00:12:10,000 --> 00:12:13,600
other platforms

00:12:11,839 --> 00:12:15,360
once a workload's completed appropriate

00:12:13,600 --> 00:12:16,720
testing and verification

00:12:15,360 --> 00:12:18,560
the workload can be deployed to

00:12:16,720 --> 00:12:20,240
production

00:12:18,560 --> 00:12:22,160
in this environment the developer may

00:12:20,240 --> 00:12:23,680
not have all the authority to deploy

00:12:22,160 --> 00:12:25,120
workloads that they enjoy on other

00:12:23,680 --> 00:12:26,959
platforms

00:12:25,120 --> 00:12:28,800
the zos system programmer will need to

00:12:26,959 --> 00:12:31,360
help the architect and developer build

00:12:28,800 --> 00:12:32,959
out and maintain the sandbox

00:12:31,360 --> 00:12:34,880
none of this though requires any of the

00:12:32,959 --> 00:12:37,200
parties involved to retrain

00:12:34,880 --> 00:12:39,200
significantly to support the effort

00:12:37,200 --> 00:12:42,480
everyone applies their unique skills to

00:12:39,200 --> 00:12:42,480
make the team successful

00:12:44,800 --> 00:12:48,160
teamwork within a development and

00:12:46,240 --> 00:12:50,000
appoint and deployment team

00:12:48,160 --> 00:12:51,360
and with key open source communities is

00:12:50,000 --> 00:12:53,200
essential

00:12:51,360 --> 00:12:55,279
everyone involved has their areas of

00:12:53,200 --> 00:12:56,240
expertise and preferences for how things

00:12:55,279 --> 00:12:57,760
are done

00:12:56,240 --> 00:12:59,680
but they all need to agree on the best

00:12:57,760 --> 00:13:02,240
architecture and configuration for an

00:12:59,680 --> 00:13:03,680
optimal open source environment

00:13:02,240 --> 00:13:05,279
this means that everyone needs to be

00:13:03,680 --> 00:13:06,639
comfortable with implementations that

00:13:05,279 --> 00:13:07,200
may not align with the way they've

00:13:06,639 --> 00:13:09,839
always done

00:13:07,200 --> 00:13:11,680
things open source brings a social

00:13:09,839 --> 00:13:12,240
dimension to the z os environment that

00:13:11,680 --> 00:13:16,079
didn't

00:13:12,240 --> 00:13:17,760
previously exist in many cases similarly

00:13:16,079 --> 00:13:19,360
there are key priorities in the z os

00:13:17,760 --> 00:13:20,079
world that are generally understood in

00:13:19,360 --> 00:13:21,920
the open source

00:13:20,079 --> 00:13:24,639
community but probably haven't been

00:13:21,920 --> 00:13:27,040
fully appreciated in the same way

00:13:24,639 --> 00:13:28,639
ideally the team produces a solution

00:13:27,040 --> 00:13:31,200
that builds on the strengths of each

00:13:28,639 --> 00:13:31,200
community

00:13:33,200 --> 00:13:37,040
i'd like to highlight a few online

00:13:34,880 --> 00:13:38,480
resources meant to assist anyone who's

00:13:37,040 --> 00:13:40,800
working to create an open source

00:13:38,480 --> 00:13:42,480
environment on the mainframe

00:13:40,800 --> 00:13:45,040
of course we all know the open mainframe

00:13:42,480 --> 00:13:46,720
project it's why we're here today

00:13:45,040 --> 00:13:50,000
you've probably also heard of zoe the

00:13:46,720 --> 00:13:52,000
omp's most successful project to date

00:13:50,000 --> 00:13:54,560
there's another project that the omp

00:13:52,000 --> 00:13:57,199
hosts called ambitus which is latin for

00:13:54,560 --> 00:13:58,800
compass the purpose of this project

00:13:57,199 --> 00:14:00,399
isn't to provide a specific piece of

00:13:58,800 --> 00:14:01,920
enabling infrastructure

00:14:00,399 --> 00:14:05,600
but to help people find and share

00:14:01,920 --> 00:14:07,360
knowledge about open source and ibm z

00:14:05,600 --> 00:14:09,920
more specifically there are two areas of

00:14:07,360 --> 00:14:11,920
primary focus for this project

00:14:09,920 --> 00:14:13,839
the first is to provide examples and

00:14:11,920 --> 00:14:16,560
how-to information

00:14:13,839 --> 00:14:18,560
this includes comparison comparisons to

00:14:16,560 --> 00:14:20,399
other platforms that show how ibm is

00:14:18,560 --> 00:14:22,880
similar and different

00:14:20,399 --> 00:14:24,880
we want users to avoid known pitfalls

00:14:22,880 --> 00:14:26,720
and make use of best practices with open

00:14:24,880 --> 00:14:28,320
source environments

00:14:26,720 --> 00:14:30,240
this includes information for both

00:14:28,320 --> 00:14:32,480
containerized and natively ported

00:14:30,240 --> 00:14:34,240
workloads

00:14:32,480 --> 00:14:36,240
the second focus is to serve as an

00:14:34,240 --> 00:14:37,760
incubator for developers who are in the

00:14:36,240 --> 00:14:41,199
process of upstreaming

00:14:37,760 --> 00:14:42,240
ibm z changes to existing projects

00:14:41,199 --> 00:14:44,399
there aren't enough open source

00:14:42,240 --> 00:14:45,760
communities today that support ibm z as

00:14:44,399 --> 00:14:48,399
a platform

00:14:45,760 --> 00:14:50,560
by providing a public forum for this for

00:14:48,399 --> 00:14:52,480
developers to stage their changes

00:14:50,560 --> 00:14:54,320
we can all see the work in progress to

00:14:52,480 --> 00:14:55,120
expand the mainframe presence in this

00:14:54,320 --> 00:14:56,560
space

00:14:55,120 --> 00:14:59,440
rather than waiting for an upstream

00:14:56,560 --> 00:15:01,120
community to accept a pull request

00:14:59,440 --> 00:15:03,760
the content here is meant to speak to

00:15:01,120 --> 00:15:05,839
developers new to the mainframe platform

00:15:03,760 --> 00:15:07,680
as well as seasoned mainframe systems

00:15:05,839 --> 00:15:09,040
programmers who need to understand

00:15:07,680 --> 00:15:10,639
something about the open source

00:15:09,040 --> 00:15:12,800
environment

00:15:10,639 --> 00:15:13,760
our goal is to make ambitus a portal for

00:15:12,800 --> 00:15:16,480
information

00:15:13,760 --> 00:15:17,760
in a public square for a viable open

00:15:16,480 --> 00:15:19,519
source community

00:15:17,760 --> 00:15:22,959
in the same way that the open mainframe

00:15:19,519 --> 00:15:22,959
project does more generally

00:15:23,040 --> 00:15:26,959
another useful resource is the ibm z and

00:15:25,519 --> 00:15:29,040
linuxone community

00:15:26,959 --> 00:15:30,639
which has a wealth of information some

00:15:29,040 --> 00:15:31,920
of which predates the open mainframe

00:15:30,639 --> 00:15:33,519
project

00:15:31,920 --> 00:15:35,360
the developers associated with this

00:15:33,519 --> 00:15:38,480
community are true experts in the field

00:15:35,360 --> 00:15:38,480
who have a lot to share

00:15:39,040 --> 00:15:42,160
one of the most useful resources that i

00:15:40,800 --> 00:15:43,920
regularly reference

00:15:42,160 --> 00:15:46,000
is the open source software table from

00:15:43,920 --> 00:15:48,240
linux on z and linux 1.

00:15:46,000 --> 00:15:49,279
this table shows all the packages that

00:15:48,240 --> 00:15:51,600
that the linux on z

00:15:49,279 --> 00:15:53,279
ecosystem team has validated across

00:15:51,600 --> 00:15:54,560
different distributions and container

00:15:53,279 --> 00:15:55,920
packages

00:15:54,560 --> 00:15:57,440
it's a really good place to start

00:15:55,920 --> 00:15:59,120
looking whether you need something that

00:15:57,440 --> 00:16:01,120
runs natively on linux

00:15:59,120 --> 00:16:04,000
or in a container that deploys on linux

00:16:01,120 --> 00:16:04,000
or zcx

00:16:04,240 --> 00:16:08,480
here are the links to the resources

00:16:05,680 --> 00:16:10,240
above as well as the ibm zccx content

00:16:08,480 --> 00:16:12,079
solution page

00:16:10,240 --> 00:16:14,079
we encourage anyone interested to not

00:16:12,079 --> 00:16:15,120
only use these resources for reference

00:16:14,079 --> 00:16:17,040
purposes

00:16:15,120 --> 00:16:19,680
but to participate actively in these

00:16:17,040 --> 00:16:21,279
communities and share your experiences

00:16:19,680 --> 00:16:23,839
we're always looking for like-minded

00:16:21,279 --> 00:16:25,839
people who want to work together

00:16:23,839 --> 00:16:27,199
none of us knows as much as all of us

00:16:25,839 --> 00:16:27,920
and the more we work together as a

00:16:27,199 --> 00:16:29,920
community

00:16:27,920 --> 00:16:31,600
the better the mainframe platform and

00:16:29,920 --> 00:16:32,880
open source environments support one

00:16:31,600 --> 00:16:35,839
another

00:16:32,880 --> 00:16:35,839

YouTube URL: https://www.youtube.com/watch?v=PY6goVloxoI


