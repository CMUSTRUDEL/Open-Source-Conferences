Title: Lightning Talk: Bringing COBOL into Modern Applications with Zowe CLI - Ishmael Pazniak, EPAM System
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Lightning Talk: Bringing COBOL into Modern Applications with Zowe CLI - Ishmael Pazniak, EPAM Systems, Inc.
Captions: 
	00:00:00,480 --> 00:00:05,759
hi my name is ishmael

00:00:03,280 --> 00:00:06,720
and today i will show you how we can use

00:00:05,759 --> 00:00:08,639
ocli

00:00:06,720 --> 00:00:12,719
and the approach it uses behind the

00:00:08,639 --> 00:00:12,719
scenes to run any cobol program

00:00:13,200 --> 00:00:18,080
on a pc with a mac os application on an

00:00:16,400 --> 00:00:20,960
ipad with an ipad os

00:00:18,080 --> 00:00:22,240
application on an iphone with an ios

00:00:20,960 --> 00:00:25,519
application

00:00:22,240 --> 00:00:28,840
on a tv box with a tv os application

00:00:25,519 --> 00:00:30,000
and even on a watch with a watch os

00:00:28,840 --> 00:00:32,160
application

00:00:30,000 --> 00:00:34,559
we will also see how new and modern

00:00:32,160 --> 00:00:38,160
devices can be easily integrated into

00:00:34,559 --> 00:00:38,160
classic cobalt development

00:00:41,440 --> 00:00:45,680
we will need the following tools

00:00:43,200 --> 00:00:50,640
downloaded and installed

00:00:45,680 --> 00:00:53,920
mac os 11 pixer xcode 12

00:00:50,640 --> 00:00:54,800
your personal mainframe user id provided

00:00:53,920 --> 00:00:57,120
in terms of

00:00:54,800 --> 00:00:58,559
cobol programming with visual studio

00:00:57,120 --> 00:01:03,120
code course

00:00:58,559 --> 00:01:06,400
xocli installed xeosmf profile

00:01:03,120 --> 00:01:06,400
created and configured

00:01:07,119 --> 00:01:11,760
the cobol code compilation and execution

00:01:09,760 --> 00:01:13,040
is different from most modern computer

00:01:11,760 --> 00:01:15,680
languages

00:01:13,040 --> 00:01:16,320
it is a process and for someone new to

00:01:15,680 --> 00:01:19,439
koble

00:01:16,320 --> 00:01:22,400
it can seem quite tricky

00:01:19,439 --> 00:01:23,439
first we have to get an access to ibm z

00:01:22,400 --> 00:01:25,600
mainframe

00:01:23,439 --> 00:01:28,479
a system that hosts and executes our

00:01:25,600 --> 00:01:30,960
cobol programs code

00:01:28,479 --> 00:01:33,119
then we need to have a data set where

00:01:30,960 --> 00:01:34,400
our cobol programs are stored in its

00:01:33,119 --> 00:01:37,200
data set members

00:01:34,400 --> 00:01:38,960
then we need to have a jcl and submit it

00:01:37,200 --> 00:01:42,159
as a job to actually build

00:01:38,960 --> 00:01:44,479
and run our global program

00:01:42,159 --> 00:01:45,759
and even after that there's still a

00:01:44,479 --> 00:01:48,399
number of job spool

00:01:45,759 --> 00:01:51,680
files which contain the necessary output

00:01:48,399 --> 00:01:54,479
information to be retrieved

00:01:51,680 --> 00:01:56,560
that's why we need zowi it is an open

00:01:54,479 --> 00:01:58,640
source toolset created to provide a

00:01:56,560 --> 00:02:01,680
bridge between our modern environment

00:01:58,640 --> 00:02:03,759
and the ibm z mainframe platform it

00:02:01,680 --> 00:02:04,880
represents a convenient way of having

00:02:03,759 --> 00:02:07,920
remote control

00:02:04,880 --> 00:02:10,080
over a mainframe zoe has a number of

00:02:07,920 --> 00:02:14,000
interfaces and one of them

00:02:10,080 --> 00:02:16,239
zoe command line interface or zoocli

00:02:14,000 --> 00:02:18,319
lets us communicate to a mainframe from

00:02:16,239 --> 00:02:21,280
a regular laptop command prompt with a

00:02:18,319 --> 00:02:23,760
minimum effort required

00:02:21,280 --> 00:02:26,560
to see how it works let's cover the

00:02:23,760 --> 00:02:30,480
basics and build a very simple scenario

00:02:26,560 --> 00:02:32,800
where we create a data set

00:02:30,480 --> 00:02:34,800
upload a global source code as a data

00:02:32,800 --> 00:02:37,599
set member to it

00:02:34,800 --> 00:02:39,440
upload a jcl source code as a data set

00:02:37,599 --> 00:02:45,040
member to it

00:02:39,440 --> 00:02:47,680
submit a job and display its results

00:02:45,040 --> 00:02:49,360
those are ocli commands to implement

00:02:47,680 --> 00:02:51,280
each of those steps

00:02:49,360 --> 00:02:56,160
don't worry about reading all of it at

00:02:51,280 --> 00:02:56,160
once we'll go over it line by line

00:02:56,720 --> 00:03:05,840
and those are our cobol program in jcl

00:02:59,519 --> 00:03:05,840
sources correspondingly

00:03:07,360 --> 00:03:11,519
this is a mac os built-in command prompt

00:03:10,159 --> 00:03:13,760
a terminal

00:03:11,519 --> 00:03:14,879
let's type every zowie command from the

00:03:13,760 --> 00:03:17,360
previous list

00:03:14,879 --> 00:03:19,760
to see how each request is followed by

00:03:17,360 --> 00:03:23,200
the execution response and the results

00:03:19,760 --> 00:03:26,640
are printed to the terminal

00:03:23,200 --> 00:03:26,640
a data set creation

00:03:30,959 --> 00:03:50,319
a dataset member uploading

00:03:47,280 --> 00:03:50,319
submitting a job

00:03:54,560 --> 00:04:00,000
and retrieving its results from a job

00:03:56,799 --> 00:04:02,959
spool file

00:04:00,000 --> 00:04:05,040
ocli can display those results even in a

00:04:02,959 --> 00:04:07,200
well-known json format

00:04:05,040 --> 00:04:08,480
this is important because some zowie

00:04:07,200 --> 00:04:11,120
responses contain

00:04:08,480 --> 00:04:12,080
output data that is needed as input data

00:04:11,120 --> 00:04:15,760
by subsequent

00:04:12,080 --> 00:04:19,040
zoe requests let's take a closer look at

00:04:15,760 --> 00:04:19,040
two last responses

00:04:19,359 --> 00:04:23,120
this is an example of submit job

00:04:21,919 --> 00:04:26,840
response

00:04:23,120 --> 00:04:29,440
one of its fields job id provides the

00:04:26,840 --> 00:04:31,840
information which is taken by the next

00:04:29,440 --> 00:04:34,720
zowie request for these particular job

00:04:31,840 --> 00:04:34,720
spool files

00:04:34,880 --> 00:04:40,720
now pay attention at the final response

00:04:37,600 --> 00:04:42,560
the job spool file with id 104 contains

00:04:40,720 --> 00:04:44,960
the kabul code execution

00:04:42,560 --> 00:04:44,960
output

00:04:45,680 --> 00:04:50,400
this video demonstrates that technically

00:04:47,840 --> 00:04:52,880
we can script those command prompt tasks

00:04:50,400 --> 00:04:57,440
and automate them to use the zocli

00:04:52,880 --> 00:04:59,280
directly from a desktop application

00:04:57,440 --> 00:05:02,720
take a look at this article if you're

00:04:59,280 --> 00:05:02,720
interested in more details

00:05:03,199 --> 00:05:07,360
however the truth is we cannot do that

00:05:05,840 --> 00:05:10,000
on mobile devices

00:05:07,360 --> 00:05:12,880
as the necessary api is only available

00:05:10,000 --> 00:05:12,880
on a mac os

00:05:13,600 --> 00:05:16,639
to get an access to a mainframe

00:05:15,680 --> 00:05:19,600
environment from

00:05:16,639 --> 00:05:21,840
any device other than a regular pc we

00:05:19,600 --> 00:05:26,560
will need to dig into more detail about

00:05:21,840 --> 00:05:26,560
how zocli works behind the scenes

00:05:27,280 --> 00:05:30,720
once the command is entered and launched

00:05:29,280 --> 00:05:34,880
in a command prompt

00:05:30,720 --> 00:05:37,440
the ocli uses a xeosmf rest api

00:05:34,880 --> 00:05:39,039
an ibm provided way to interact with the

00:05:37,440 --> 00:05:41,440
mainframe remotely

00:05:39,039 --> 00:05:42,560
it is working as a simple gateway to a

00:05:41,440 --> 00:05:44,960
mainframe

00:05:42,560 --> 00:05:46,479
it knocks on the necessary host address

00:05:44,960 --> 00:05:48,560
with an optional port

00:05:46,479 --> 00:05:50,880
authenticates the user by its special

00:05:48,560 --> 00:05:51,360
secured combination of users mainframe

00:05:50,880 --> 00:05:54,080
id

00:05:51,360 --> 00:05:55,120
and password then transfers the command

00:05:54,080 --> 00:05:56,960
received

00:05:55,120 --> 00:05:59,360
when the command is processed on a

00:05:56,960 --> 00:06:01,600
mainframe its execution result is

00:05:59,360 --> 00:06:06,319
returned back to the user as a regular

00:06:01,600 --> 00:06:08,800
response with appropriate data

00:06:06,319 --> 00:06:10,880
sure you've seen zowie explore extension

00:06:08,800 --> 00:06:13,120
for visual studio code

00:06:10,880 --> 00:06:15,199
it allows us to do the same things as

00:06:13,120 --> 00:06:16,000
we've just performed via the command

00:06:15,199 --> 00:06:18,639
prompt

00:06:16,000 --> 00:06:20,960
but using a graphical user interface and

00:06:18,639 --> 00:06:23,560
interactive menu options

00:06:20,960 --> 00:06:25,039
zowie explorer uses the same idea as

00:06:23,560 --> 00:06:27,199
ocli

00:06:25,039 --> 00:06:28,960
it communicates with the mainframe via

00:06:27,199 --> 00:06:31,199
rest api interface

00:06:28,960 --> 00:06:32,000
making itself runnable on any operating

00:06:31,199 --> 00:06:36,880
system

00:06:32,000 --> 00:06:41,360
like windows mac os

00:06:36,880 --> 00:06:45,680
or linux let's see how we can get all

00:06:41,360 --> 00:06:45,680
these as well and with very minimal code

00:06:46,560 --> 00:06:50,479
start xcode choose create a new xcode

00:06:49,680 --> 00:06:53,680
project

00:06:50,479 --> 00:06:54,560
select multi-platform it will create a

00:06:53,680 --> 00:06:57,919
project for an

00:06:54,560 --> 00:06:59,440
application that runs on both mac os ios

00:06:57,919 --> 00:07:02,479
and ipad os

00:06:59,440 --> 00:07:04,000
name it and click next provide the

00:07:02,479 --> 00:07:06,479
project's path and click

00:07:04,000 --> 00:07:06,479
create

00:07:07,680 --> 00:07:12,400
next we will need to download and

00:07:09,599 --> 00:07:14,639
install the zowi swift client sdk

00:07:12,400 --> 00:07:17,440
which is a dependency package designed

00:07:14,639 --> 00:07:20,240
to represent the ocli functionality on

00:07:17,440 --> 00:07:22,000
those mobile systems whereas ocli cannot

00:07:20,240 --> 00:07:24,319
be technically adopted

00:07:22,000 --> 00:07:27,599
we will use swift package manager right

00:07:24,319 --> 00:07:27,599
from xcode for that

00:07:28,240 --> 00:07:35,759
choose file menu item from above

00:07:31,280 --> 00:07:37,840
swift packages add package dependency

00:07:35,759 --> 00:07:39,039
enter the following git repository

00:07:37,840 --> 00:07:42,080
address and click

00:07:39,039 --> 00:07:42,880
next we can choose the version or the

00:07:42,080 --> 00:07:46,879
branch

00:07:42,880 --> 00:07:46,879
or even the commit to install from

00:07:47,039 --> 00:07:52,319
that's it our mobile application has now

00:07:50,319 --> 00:07:54,960
the ability to work with cobol and

00:07:52,319 --> 00:07:54,960
mainframe

00:07:55,120 --> 00:07:59,840
once we're done with project setup we

00:07:57,599 --> 00:08:03,280
can get down to coding

00:07:59,840 --> 00:08:06,000
first we need to import zowie sdk to our

00:08:03,280 --> 00:08:07,919
source code files

00:08:06,000 --> 00:08:09,919
then we initialize it with the host

00:08:07,919 --> 00:08:14,240
address optional port

00:08:09,919 --> 00:08:14,240
user mainframe id and password

00:08:14,800 --> 00:08:19,840
then we can go ahead and pass our zowie

00:08:17,280 --> 00:08:22,160
commands to execute on a mainframe

00:08:19,840 --> 00:08:24,720
the same way as we did before but this

00:08:22,160 --> 00:08:29,520
time it's zoe swift client sdk

00:08:24,720 --> 00:08:31,759
instead of zoo cli create a data set

00:08:29,520 --> 00:08:33,680
upload a global source code as a data

00:08:31,759 --> 00:08:36,479
set member to it

00:08:33,680 --> 00:08:38,159
upload a jcl source code as a data set

00:08:36,479 --> 00:08:43,760
member to it

00:08:38,159 --> 00:08:43,760
submit a job and display its results

00:08:44,640 --> 00:08:49,040
this is how our application looks like

00:08:46,800 --> 00:08:54,399
after all those steps are done and all

00:08:49,040 --> 00:08:56,720
five commands are added

00:08:54,399 --> 00:08:58,959
let's change a target from mac os to

00:08:56,720 --> 00:09:01,360
mobile and choose the iphone simulator

00:08:58,959 --> 00:09:01,360
model

00:09:01,519 --> 00:09:11,040
build and run our application

00:09:08,480 --> 00:09:13,279
see how smooth and easily we get request

00:09:11,040 --> 00:09:16,800
by request and the results with only

00:09:13,279 --> 00:09:16,800
a few lines of code written

00:09:17,600 --> 00:09:23,279
let's change a simulator model from an

00:09:19,920 --> 00:09:26,399
iphone to an ipad

00:09:23,279 --> 00:09:26,399
build and run again

00:09:32,640 --> 00:09:37,839
cable on an ipad easy right

00:09:38,959 --> 00:09:43,040
next we'll extend our application

00:09:41,040 --> 00:09:46,160
borders and see how a mainframe

00:09:43,040 --> 00:09:49,279
and a cobol can be brought to tv boxes

00:09:46,160 --> 00:09:49,279
let's see it in action

00:09:49,440 --> 00:09:52,800
all we need to do is repeat all the

00:09:51,600 --> 00:09:55,360
steps above

00:09:52,800 --> 00:09:59,440
but choose the tv os as a target tab

00:09:55,360 --> 00:09:59,440
when creating a new xcode project

00:10:00,080 --> 00:10:04,399
now let's touch the edge of it and get

00:10:02,160 --> 00:10:07,440
down to something really exciting

00:10:04,399 --> 00:10:09,600
a tiny watch device

00:10:07,440 --> 00:10:11,920
here is kabul being executed on the

00:10:09,600 --> 00:10:15,920
apple watch

00:10:11,920 --> 00:10:18,480
isn't it fantastic to do that

00:10:15,920 --> 00:10:20,880
repeat all the steps from above but

00:10:18,480 --> 00:10:24,560
choose a watch os as a target tab for a

00:10:20,880 --> 00:10:24,560
new xcode project created

00:10:25,200 --> 00:10:29,200
with this approach taken one step

00:10:27,120 --> 00:10:31,760
further we're able to create far more

00:10:29,200 --> 00:10:34,320
complicated and sophisticated interfaces

00:10:31,760 --> 00:10:36,800
in scenarios

00:10:34,320 --> 00:10:39,120
for example we can build something

00:10:36,800 --> 00:10:42,880
similar to zowie explorer for visual

00:10:39,120 --> 00:10:42,880
studio code on an ipad

00:10:43,600 --> 00:10:47,839
or on an iphone

00:10:55,600 --> 00:10:59,040
doesn't it look familiar

00:10:59,680 --> 00:11:15,839
or on a watch

00:11:16,880 --> 00:11:20,240
awesome isn't it

00:11:20,800 --> 00:11:29,839
or even on a tv box

00:11:42,880 --> 00:11:45,839
unbelievable

00:11:46,560 --> 00:11:51,279
just to check market there's no limit to

00:11:49,279 --> 00:11:53,839
what we can accomplish with kobel and

00:11:51,279 --> 00:11:53,839
zowie

00:11:54,000 --> 00:11:58,240
thank you so much for attending my

00:11:56,000 --> 00:11:59,839
presentation and have an amazing open

00:11:58,240 --> 00:12:03,440
mainframe summit

00:11:59,839 --> 00:12:03,440

YouTube URL: https://www.youtube.com/watch?v=VJ0JtLb53ls


