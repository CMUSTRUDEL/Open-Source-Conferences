Title: Cloud Foundry Orchestrated by Kubernetes on Linux on IBM Z - Vlad Iovanov & Dan Pavel Sinkovicz
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Cloud Foundry Orchestrated by Kubernetes on Linux on IBM Z - Vlad Iovanov, SUSE & Dan Pavel Sinkovicz

The effort to make containerized Cloud Foundry orchestrated by Kubernetes on IBM Z was started several years ago as part of the Mainframe Project mentorship program. Three years later, the goal of this year's summer mentorship is to make on-going s390x builds of containerized Cloud Foundry a first-class citizen in the CF Project. This session will provide a background of previous years projects as well as results of this year's effort.
Captions: 
	00:00:00,000 --> 00:00:06,560
hello everyone my name is vlad

00:00:04,240 --> 00:00:07,520
i work as an architect for cloud foundry

00:00:06,560 --> 00:00:09,840
at souza

00:00:07,520 --> 00:00:12,480
and i have with me dan chinkowitz and

00:00:09,840 --> 00:00:14,480
together we're going to talk about

00:00:12,480 --> 00:00:15,839
how we deploy cloud foundry on top of

00:00:14,480 --> 00:00:19,119
kubernetes

00:00:15,839 --> 00:00:19,119
on top of a mainframe

00:00:19,520 --> 00:00:27,439
so why would you want to do this well

00:00:23,680 --> 00:00:28,400
kubernetes is a platform that's great

00:00:27,439 --> 00:00:31,519
for

00:00:28,400 --> 00:00:34,800
orchestrating workloads but

00:00:31,519 --> 00:00:37,920
cloud foundry is an amazing platform for

00:00:34,800 --> 00:00:41,120
uh developers so

00:00:37,920 --> 00:00:42,559
we want to bring the simplicity of the

00:00:41,120 --> 00:00:45,840
cloud foundry developer

00:00:42,559 --> 00:00:48,879
experience the cf push experience

00:00:45,840 --> 00:00:50,800
to kubernetes clusters everywhere

00:00:48,879 --> 00:00:52,079
because this is something that will

00:00:50,800 --> 00:00:55,120
allow

00:00:52,079 --> 00:00:56,320
developers to focus on their business on

00:00:55,120 --> 00:00:59,840
their

00:00:56,320 --> 00:01:03,280
application logic and less on

00:00:59,840 --> 00:01:07,600
on infrastructure and of course

00:01:03,280 --> 00:01:10,840
the z system the s390x architecture

00:01:07,600 --> 00:01:12,560
we know is very performant it's tolerant

00:01:10,840 --> 00:01:14,799
um it has

00:01:12,560 --> 00:01:16,799
high security so it's loved by

00:01:14,799 --> 00:01:18,799
enterprises everywhere

00:01:16,799 --> 00:01:20,240
it's obvious to want to bring these two

00:01:18,799 --> 00:01:22,320
things together

00:01:20,240 --> 00:01:23,920
and this is what we're trying to do here

00:01:22,320 --> 00:01:27,200
and hopefully the outcome

00:01:23,920 --> 00:01:30,799
is a system where you can easily

00:01:27,200 --> 00:01:31,439
deploy applications to z using cloud

00:01:30,799 --> 00:01:32,960
foundry

00:01:31,439 --> 00:01:34,880
without even knowing that you're

00:01:32,960 --> 00:01:38,799
actually deploying to uh

00:01:34,880 --> 00:01:40,720
to to a z system so what have we

00:01:38,799 --> 00:01:43,040
actually built we had to make

00:01:40,720 --> 00:01:44,960
z compatible versions for all of these

00:01:43,040 --> 00:01:47,520
docker images

00:01:44,960 --> 00:01:50,079
there are three categories docker images

00:01:47,520 --> 00:01:52,479
based on bosch releases

00:01:50,079 --> 00:01:56,159
bosch is used to deploy software packed

00:01:52,479 --> 00:01:58,320
in releases images for irene

00:01:56,159 --> 00:02:00,399
which is the new cube native scheduler

00:01:58,320 --> 00:02:03,840
for cloud foundry

00:02:00,399 --> 00:02:04,560
a mysql image from scratch because we

00:02:03,840 --> 00:02:08,239
couldn't find

00:02:04,560 --> 00:02:09,759
a a s390x version compatible with our

00:02:08,239 --> 00:02:13,920
cloud controller

00:02:09,759 --> 00:02:17,200
a bunch of packages and os images built

00:02:13,920 --> 00:02:19,520
opens to the build service the os

00:02:17,200 --> 00:02:20,840
images are used to build base docker

00:02:19,520 --> 00:02:24,879
layers and

00:02:20,840 --> 00:02:28,319
applications stacks for cloud foundry

00:02:24,879 --> 00:02:33,360
to build all the um

00:02:28,319 --> 00:02:37,840
required docker images to make cube cf

00:02:33,360 --> 00:02:40,720
deploy successfully on z we first had to

00:02:37,840 --> 00:02:41,519
have a build systems this system and

00:02:40,720 --> 00:02:44,480
some tooling

00:02:41,519 --> 00:02:46,879
with jenkins as a build server and

00:02:44,480 --> 00:02:51,840
create the jobs for all the images

00:02:46,879 --> 00:02:55,040
we need

00:02:51,840 --> 00:02:55,760
this consists of first using the script

00:02:55,040 --> 00:02:58,319
we made

00:02:55,760 --> 00:02:59,840
last year for the cloud foundry operator

00:02:58,319 --> 00:03:03,280
on z

00:02:59,840 --> 00:03:05,440
uh open my open mainframe project

00:03:03,280 --> 00:03:06,640
we can take any release any bosch

00:03:05,440 --> 00:03:08,560
release test list

00:03:06,640 --> 00:03:10,720
test it and change the packages

00:03:08,560 --> 00:03:12,640
accordingly to the errors we get

00:03:10,720 --> 00:03:15,599
once the errors are fixed and the

00:03:12,640 --> 00:03:18,080
package uh successfully builds on z

00:03:15,599 --> 00:03:19,599
we can use fisal for z which we have

00:03:18,080 --> 00:03:23,040
built last year as well

00:03:19,599 --> 00:03:25,280
to create a docker image finally if the

00:03:23,040 --> 00:03:26,239
image successfully builds we push it on

00:03:25,280 --> 00:03:32,480
the quirks

00:03:26,239 --> 00:03:35,599
docker hub profile and that's it

00:03:32,480 --> 00:03:37,200
uh to make sure the applications are

00:03:35,599 --> 00:03:40,879
working as expected

00:03:37,200 --> 00:03:43,200
we deploy cube cf and start debugging

00:03:40,879 --> 00:03:44,879
the demand our development workload

00:03:43,200 --> 00:03:49,120
workflow consists

00:03:44,879 --> 00:03:52,720
on running cube cf group cf using helm

00:03:49,120 --> 00:03:54,640
after that we use k9s which is a tool

00:03:52,720 --> 00:03:56,799
used to debug kubernetes

00:03:54,640 --> 00:03:58,720
to dig deeper and find the errors for

00:03:56,799 --> 00:04:01,680
the crashing applications

00:03:58,720 --> 00:04:04,000
following we fix the errors and build

00:04:01,680 --> 00:04:06,720
docker images as described before

00:04:04,000 --> 00:04:08,159
using jenkins and finally we update

00:04:06,720 --> 00:04:09,360
installation settings if that's

00:04:08,159 --> 00:04:11,840
necessary

00:04:09,360 --> 00:04:12,640
this can happen if we change even image

00:04:11,840 --> 00:04:16,799
names or

00:04:12,640 --> 00:04:16,799
applications or for other reasons

00:04:16,959 --> 00:04:20,160
thank you dan for explaining what we're

00:04:18,799 --> 00:04:23,040
doing

00:04:20,160 --> 00:04:24,400
here and i'd like to take a bit of time

00:04:23,040 --> 00:04:26,560
to

00:04:24,400 --> 00:04:28,639
to take us through the difficult parts

00:04:26,560 --> 00:04:32,080
of of porting cloud foundry

00:04:28,639 --> 00:04:33,440
on z um one of them was the cloud

00:04:32,080 --> 00:04:36,240
controller

00:04:33,440 --> 00:04:37,680
specifically the grpc ruby gem that we

00:04:36,240 --> 00:04:40,560
that we need to use there

00:04:37,680 --> 00:04:42,000
was particularly difficult to compile

00:04:40,560 --> 00:04:44,639
you know it's native extensions were

00:04:42,000 --> 00:04:48,240
difficult to compile on z

00:04:44,639 --> 00:04:51,520
um this is because um

00:04:48,240 --> 00:04:53,040
it's grpc is not supported on little

00:04:51,520 --> 00:04:56,160
indian systems

00:04:53,040 --> 00:05:00,000
and we we actually found

00:04:56,160 --> 00:05:02,400
some some contributions from um

00:05:00,000 --> 00:05:03,840
from developers out there that uh try to

00:05:02,400 --> 00:05:07,680
make this work

00:05:03,840 --> 00:05:10,720
um on um on little indian architectures

00:05:07,680 --> 00:05:13,199
and we managed to get it working

00:05:10,720 --> 00:05:14,400
so the cloud controller works right now

00:05:13,199 --> 00:05:18,560
and

00:05:14,400 --> 00:05:22,160
um it seems to be stable and then

00:05:18,560 --> 00:05:25,520
the next part was uh the diego cell

00:05:22,160 --> 00:05:28,720
the diego cells are the kind of old way

00:05:25,520 --> 00:05:32,160
of scheduling applications on uh

00:05:28,720 --> 00:05:35,280
on cloud foundry we had uh to fix

00:05:32,160 --> 00:05:37,039
a bunch of issues with uh the stacks so

00:05:35,280 --> 00:05:41,039
essentially the container

00:05:37,039 --> 00:05:45,360
layers that support applications

00:05:41,039 --> 00:05:50,639
we had to fix some

00:05:45,360 --> 00:05:54,240
storage problems when deploying on z

00:05:50,639 --> 00:05:57,199
but in the end we hit a blocker with

00:05:54,240 --> 00:05:59,600
running run c containers with the diego

00:05:57,199 --> 00:05:59,600
cells

00:06:00,000 --> 00:06:03,360
we're not exactly sure why this is

00:06:01,840 --> 00:06:05,759
happening right now because run c

00:06:03,360 --> 00:06:07,919
is supported on z it might be that the

00:06:05,759 --> 00:06:11,840
version is not quite right

00:06:07,919 --> 00:06:12,800
but we uh we're actually trying to go to

00:06:11,840 --> 00:06:15,199
irene

00:06:12,800 --> 00:06:17,440
irene is the new scheduler for cloud

00:06:15,199 --> 00:06:18,639
foundry it deploys applications directly

00:06:17,440 --> 00:06:20,560
to kubernetes

00:06:18,639 --> 00:06:22,880
so you don't have to run containers

00:06:20,560 --> 00:06:27,120
containers in containers

00:06:22,880 --> 00:06:29,720
and so this is where we're at right now

00:06:27,120 --> 00:06:31,840
unfortunately we do have a few

00:06:29,720 --> 00:06:33,440
incompatibilities at the moment between

00:06:31,840 --> 00:06:35,360
the irini

00:06:33,440 --> 00:06:38,479
images that we've managed to build

00:06:35,360 --> 00:06:41,120
versus the cloud controller that we have

00:06:38,479 --> 00:06:43,199
as i explained earlier we had to go with

00:06:41,120 --> 00:06:45,919
a particular

00:06:43,199 --> 00:06:46,840
version of cloud control because of grpc

00:06:45,919 --> 00:06:49,919
so

00:06:46,840 --> 00:06:51,360
um the correct uh

00:06:49,919 --> 00:06:53,360
version dependencies for the cloud

00:06:51,360 --> 00:06:57,520
controller that allowed us to

00:06:53,360 --> 00:06:58,880
uh to deploy uh to build grpc

00:06:57,520 --> 00:07:00,639
uh unfortunately make the cloud

00:06:58,880 --> 00:07:02,960
controller that we currently have

00:07:00,639 --> 00:07:03,759
incompatible with irene but we're

00:07:02,960 --> 00:07:07,280
working on it

00:07:03,759 --> 00:07:07,280
and hopefully we'll

00:07:07,520 --> 00:07:14,560
we'll get to a working irony soon

00:07:11,599 --> 00:07:16,000
so again what's uh what's next fixing

00:07:14,560 --> 00:07:18,960
this integration problem

00:07:16,000 --> 00:07:20,960
with uh iranian the cloud controller uh

00:07:18,960 --> 00:07:24,960
once we get that we should be able to

00:07:20,960 --> 00:07:27,280
uh to run apps and then finally

00:07:24,960 --> 00:07:28,319
we'll we'll have to document and you

00:07:27,280 --> 00:07:30,400
know comment

00:07:28,319 --> 00:07:31,759
this project everything that dan

00:07:30,400 --> 00:07:34,639
mentioned

00:07:31,759 --> 00:07:35,840
we have to publish and make sure that

00:07:34,639 --> 00:07:38,880
it's repeatable by

00:07:35,840 --> 00:07:41,360
by other teams out there

00:07:38,880 --> 00:07:43,919
you can find our code on github you can

00:07:41,360 --> 00:07:45,680
start with the cloud foundry incubator

00:07:43,919 --> 00:07:47,840
the cube cf project

00:07:45,680 --> 00:07:49,759
and if you want to talk to us either

00:07:47,840 --> 00:07:52,879
myself or dan

00:07:49,759 --> 00:07:54,639
you can find us on slack on the cloud

00:07:52,879 --> 00:07:57,360
foundry

00:07:54,639 --> 00:08:00,080
on the cube cf dev channel on the cloud

00:07:57,360 --> 00:08:00,080
foundry slack

00:08:01,199 --> 00:08:06,879
thank you and a special thank you to the

00:08:04,720 --> 00:08:08,479
open mainframe internship project and

00:08:06,879 --> 00:08:12,639
the linux foundation for

00:08:08,479 --> 00:08:15,759
making this happen and now uh

00:08:12,639 --> 00:08:15,759

YouTube URL: https://www.youtube.com/watch?v=ugWBOG_wttw


