Title: Open Source Infrastructure-as-a-Service Automation for IBM z VM - Mike Friesenegger, SUSE & Ji Chen
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Open Source Infrastructure-as-a-Service Automation for IBM z/VM - Mike Friesenegger, SUSE & Ji Chen, IBM

The Feilong project is an incubating project within the Open Mainframe Project. The project provides virtual resource management for z/VM enabling management of virtual machine lifecycle without the need for deep knowledge of the IBM z/VM hypervisor. Join this session to get a technical introduction to the project as well as learn how to start contributing.
Captions: 
	00:00:00,080 --> 00:00:03,600
hello my name is mike friesenheiger and

00:00:02,800 --> 00:00:06,960
i

00:00:03,600 --> 00:00:10,639
am a solution architect working at susa

00:00:06,960 --> 00:00:13,440
working with our ibm partnership

00:00:10,639 --> 00:00:15,120
i'm also the co-chair for the fei long

00:00:13,440 --> 00:00:16,960
project which we'll be talking about

00:00:15,120 --> 00:00:20,960
today

00:00:16,960 --> 00:00:23,760
my name is and i work for ibm

00:00:20,960 --> 00:00:24,880
now i'm the cloud infrastructure center

00:00:23,760 --> 00:00:28,880
architect

00:00:24,880 --> 00:00:32,399
which is an ibm z and linux one offering

00:00:28,880 --> 00:00:36,480
focus on the infrastructure as a service

00:00:32,399 --> 00:00:39,520
for ibm z and x one platform

00:00:36,480 --> 00:00:40,399
it's um it's honor for me to give this

00:00:39,520 --> 00:00:44,000
presentation

00:00:40,399 --> 00:00:45,760
to you guys thanks

00:00:44,000 --> 00:00:47,360
might be asking yourself what is a fei

00:00:45,760 --> 00:00:50,320
long

00:00:47,360 --> 00:00:52,399
in mandarin the word feilong translates

00:00:50,320 --> 00:00:56,000
to flying dragon

00:00:52,399 --> 00:00:57,920
feilong is also in chinese mythology

00:00:56,000 --> 00:01:00,320
and it's a winged creature that flies

00:00:57,920 --> 00:01:02,800
among the clouds

00:01:00,320 --> 00:01:05,439
i really like this definition of the

00:01:02,800 --> 00:01:07,920
wing creature flying among the clouds

00:01:05,439 --> 00:01:09,119
to represent what we do in the feylong

00:01:07,920 --> 00:01:11,600
project

00:01:09,119 --> 00:01:13,760
yes we don't fly around in the in the

00:01:11,600 --> 00:01:17,680
real clouds but we are

00:01:13,760 --> 00:01:21,119
flying around or helping automate

00:01:17,680 --> 00:01:23,840
infrastructures service automation or

00:01:21,119 --> 00:01:25,360
what many might think of as cloud like

00:01:23,840 --> 00:01:28,799
services

00:01:25,360 --> 00:01:30,640
for the zvm hypervisor so let's take a

00:01:28,799 --> 00:01:31,360
moment to talk about the mission of the

00:01:30,640 --> 00:01:34,240
project

00:01:31,360 --> 00:01:35,759
which is pretty simple we want to allow

00:01:34,240 --> 00:01:38,240
anyone to contribute

00:01:35,759 --> 00:01:38,960
and further develop the restful api

00:01:38,240 --> 00:01:40,960
server

00:01:38,960 --> 00:01:43,600
that simplifies the interaction with the

00:01:40,960 --> 00:01:46,000
ibm cvm hypervisor

00:01:43,600 --> 00:01:46,799
you'll get to hear more about the

00:01:46,000 --> 00:01:49,520
technical

00:01:46,799 --> 00:01:52,000
aspects of the restful api server but

00:01:49,520 --> 00:01:56,240
let me just take a moment to explain it

00:01:52,000 --> 00:01:59,600
at very simple terms the zvm hypervisor

00:01:56,240 --> 00:02:01,439
has no restful api server if somebody

00:01:59,600 --> 00:02:04,479
wants to create a virtual machine

00:02:01,439 --> 00:02:07,439
or manage networking or manage storage

00:02:04,479 --> 00:02:08,640
they have to do it via the command line

00:02:07,439 --> 00:02:11,760
that is provided

00:02:08,640 --> 00:02:15,280
by the zvm hypervisor

00:02:11,760 --> 00:02:18,239
with the restful api server anybody that

00:02:15,280 --> 00:02:20,000
understands web-based programming can

00:02:18,239 --> 00:02:23,440
interact with this api

00:02:20,000 --> 00:02:25,200
server which then drives the management

00:02:23,440 --> 00:02:27,520
of the virtual machines the management

00:02:25,200 --> 00:02:29,280
of the networking and storage

00:02:27,520 --> 00:02:33,280
that would normally be done via the

00:02:29,280 --> 00:02:33,280
command line for the zvm hypervisor

00:02:33,519 --> 00:02:37,440
how does this benefit the community well

00:02:35,920 --> 00:02:39,360
first of all

00:02:37,440 --> 00:02:41,519
many thanks go to ibm for their

00:02:39,360 --> 00:02:43,599
contribution to the project

00:02:41,519 --> 00:02:45,200
because from that contribution we have a

00:02:43,599 --> 00:02:47,680
very strong code base

00:02:45,200 --> 00:02:49,519
that allows the community to use

00:02:47,680 --> 00:02:51,760
contribute and further develop the

00:02:49,519 --> 00:02:55,040
project

00:02:51,760 --> 00:02:57,280
for developers that don't have a strong

00:02:55,040 --> 00:02:58,720
or deep knowledge of zvm and how to

00:02:57,280 --> 00:03:01,920
interact

00:02:58,720 --> 00:03:05,040
with zvm at the command line now there's

00:03:01,920 --> 00:03:08,080
a restful api that's well-defined

00:03:05,040 --> 00:03:10,480
that's published via the feilong project

00:03:08,080 --> 00:03:11,120
and the restful api server that makes it

00:03:10,480 --> 00:03:13,599
easier

00:03:11,120 --> 00:03:15,920
for those developers developers to

00:03:13,599 --> 00:03:19,120
interact with zvm

00:03:15,920 --> 00:03:22,400
and finally

00:03:19,120 --> 00:03:25,680
the feilong project allows

00:03:22,400 --> 00:03:26,080
individuals and organizations to develop

00:03:25,680 --> 00:03:28,159
their

00:03:26,080 --> 00:03:30,400
own self-service infrastructure as a

00:03:28,159 --> 00:03:33,040
service automation

00:03:30,400 --> 00:03:35,040
to manage the vms networking storage

00:03:33,040 --> 00:03:37,599
that are used by zvm

00:03:35,040 --> 00:03:39,360
yes you'll hear about openstack and

00:03:37,599 --> 00:03:40,239
you'll hear about other tools that can

00:03:39,360 --> 00:03:42,720
interact

00:03:40,239 --> 00:03:44,799
with the fei long code base and the the

00:03:42,720 --> 00:03:48,239
failing restful api server

00:03:44,799 --> 00:03:50,080
but because it's a set of apis

00:03:48,239 --> 00:03:51,440
organizations can develop their own

00:03:50,080 --> 00:03:54,560
self-service automation

00:03:51,440 --> 00:03:54,560
if that's what they want to do

00:03:55,280 --> 00:03:59,599
so what's next for the project first of

00:03:58,480 --> 00:04:02,239
all

00:03:59,599 --> 00:04:03,360
we needed to make sure that the cicd

00:04:02,239 --> 00:04:06,560
infrastructure

00:04:03,360 --> 00:04:07,360
that was developed and being done with

00:04:06,560 --> 00:04:10,480
an ibm

00:04:07,360 --> 00:04:12,080
before the code was contributed to the

00:04:10,480 --> 00:04:14,319
open mainframe project

00:04:12,080 --> 00:04:16,799
we needed to make sure that that cicd

00:04:14,319 --> 00:04:19,600
infrastructure is duplicated

00:04:16,799 --> 00:04:20,639
within the community the cicd

00:04:19,600 --> 00:04:22,320
infrastructure

00:04:20,639 --> 00:04:23,759
that was used within ibm is

00:04:22,320 --> 00:04:26,320
jenkins-based

00:04:23,759 --> 00:04:28,479
we've chosen to use github actions and

00:04:26,320 --> 00:04:31,680
so we're in the process of

00:04:28,479 --> 00:04:34,800
working to connect github actions

00:04:31,680 --> 00:04:38,639
to z resources that are being provided

00:04:34,800 --> 00:04:41,280
by some of our failing partners

00:04:38,639 --> 00:04:43,440
secondly we want to make sure that

00:04:41,280 --> 00:04:45,120
developers and anyone that wants to

00:04:43,440 --> 00:04:48,080
contribute to the fei long

00:04:45,120 --> 00:04:49,120
can get access to zvm resources so they

00:04:48,080 --> 00:04:50,960
can develop

00:04:49,120 --> 00:04:52,800
test and document features that they're

00:04:50,960 --> 00:04:55,840
working on again

00:04:52,800 --> 00:04:58,240
these z resources are being provided by

00:04:55,840 --> 00:05:01,280
our failing partners

00:04:58,240 --> 00:05:04,800
the omp has a great summer mentorship

00:05:01,280 --> 00:05:08,400
program and this year

00:05:04,800 --> 00:05:11,120
marked the first mentorship project

00:05:08,400 --> 00:05:12,720
that focused on contributing to feilong

00:05:11,120 --> 00:05:16,080
ansible automation

00:05:12,720 --> 00:05:19,199
for storage

00:05:16,080 --> 00:05:21,600
actually scuzzy based lun automation

00:05:19,199 --> 00:05:22,720
and so we want to be able to support

00:05:21,600 --> 00:05:25,360
projects like this

00:05:22,720 --> 00:05:26,320
not only this project for this year but

00:05:25,360 --> 00:05:28,960
ongoing

00:05:26,320 --> 00:05:29,919
omp summer mentorship programs we want

00:05:28,960 --> 00:05:33,360
to be able

00:05:29,919 --> 00:05:34,400
to promote ideas on how students and

00:05:33,360 --> 00:05:38,000
mentors

00:05:34,400 --> 00:05:40,639
could contribute to the feyling project

00:05:38,000 --> 00:05:41,039
and lastly this is near and dear to my

00:05:40,639 --> 00:05:43,600
heart

00:05:41,039 --> 00:05:45,680
as the co-chair of the fei long project

00:05:43,600 --> 00:05:47,520
but i'd like to see

00:05:45,680 --> 00:05:48,880
ways that we can increase the fei long

00:05:47,520 --> 00:05:51,919
membership

00:05:48,880 --> 00:05:52,240
not only the membership that contributes

00:05:51,919 --> 00:05:54,400
and

00:05:52,240 --> 00:05:55,440
takes advantage of the phalan code base

00:05:54,400 --> 00:05:58,720
but also the

00:05:55,440 --> 00:06:01,120
members that regularly attend our

00:05:58,720 --> 00:06:02,000
our scheduled project meetings i would

00:06:01,120 --> 00:06:04,160
love to see

00:06:02,000 --> 00:06:05,680
that be able to grow so if you're

00:06:04,160 --> 00:06:07,680
interested in

00:06:05,680 --> 00:06:09,600
in hearing more about fei long i

00:06:07,680 --> 00:06:10,960
encourage you to check out our regularly

00:06:09,600 --> 00:06:14,000
scheduled project meetings

00:06:10,960 --> 00:06:14,319
that happen every other week and with

00:06:14,000 --> 00:06:16,400
that

00:06:14,319 --> 00:06:18,319
i'd like to turn it over to jay chen to

00:06:16,400 --> 00:06:21,520
go into more technical details about the

00:06:18,319 --> 00:06:25,039
feiling project

00:06:21,520 --> 00:06:27,039
thank you mike um so next

00:06:25,039 --> 00:06:30,720
i'm going to give the technical

00:06:27,039 --> 00:06:34,400
introduction about film project

00:06:30,720 --> 00:06:38,080
so here's the

00:06:34,400 --> 00:06:39,199
architecture about film as you can see

00:06:38,080 --> 00:06:42,720
here

00:06:39,199 --> 00:06:46,319
actually i'm using an openstack offering

00:06:42,720 --> 00:06:50,800
as an example um

00:06:46,319 --> 00:06:53,520
the phallo is uh we used to call it zvm

00:06:50,800 --> 00:06:54,639
cloud connector which is uh something

00:06:53,520 --> 00:06:57,520
that

00:06:54,639 --> 00:06:58,639
and sit between some offering like oco

00:06:57,520 --> 00:07:03,520
stack

00:06:58,639 --> 00:07:07,680
and the zvm platform there is no

00:07:03,520 --> 00:07:10,000
um existing rest api layer on top of zvm

00:07:07,680 --> 00:07:10,800
it only has a socket connection which is

00:07:10,000 --> 00:07:13,919
called sm

00:07:10,800 --> 00:07:17,199
api system management api

00:07:13,919 --> 00:07:19,199
right so it's not convenient uh to be

00:07:17,199 --> 00:07:21,759
consumed by upper layer

00:07:19,199 --> 00:07:22,400
that's the reason or the goal of a film

00:07:21,759 --> 00:07:26,720
project

00:07:22,400 --> 00:07:29,759
to be to be there so film is providing

00:07:26,720 --> 00:07:32,960
a python based

00:07:29,759 --> 00:07:36,160
rash api interface to be consumed by

00:07:32,960 --> 00:07:37,680
other layers such as openstack so in

00:07:36,160 --> 00:07:41,039
this picture

00:07:37,680 --> 00:07:43,520
the openstack compute node it has noaa

00:07:41,039 --> 00:07:44,160
and neutron which is focused on compute

00:07:43,520 --> 00:07:47,440
network

00:07:44,160 --> 00:07:50,479
and other things so the

00:07:47,440 --> 00:07:51,759
management request is coming from the

00:07:50,479 --> 00:07:54,000
controller

00:07:51,759 --> 00:07:56,000
and it will be sent to different

00:07:54,000 --> 00:07:58,560
campaign nodes based on the

00:07:56,000 --> 00:07:59,199
scheduler or based on the request the

00:07:58,560 --> 00:08:02,400
custom

00:07:59,199 --> 00:08:05,840
the administrator or the user's request

00:08:02,400 --> 00:08:06,879
then in compute node such as noir or

00:08:05,840 --> 00:08:09,440
neutron

00:08:06,879 --> 00:08:11,199
is going to talk to to failure or zero

00:08:09,440 --> 00:08:14,400
cloud connector

00:08:11,199 --> 00:08:18,000
so it's rest ap rest api based

00:08:14,400 --> 00:08:21,120
and in order to in order to use

00:08:18,000 --> 00:08:21,680
failure you have to have a new linux

00:08:21,120 --> 00:08:25,440
server

00:08:21,680 --> 00:08:28,240
on top of the zvm so as you can see here

00:08:25,440 --> 00:08:28,479
there is a nuke service running on top

00:08:28,240 --> 00:08:31,440
of

00:08:28,479 --> 00:08:33,200
a zvm that's the pre-requirement because

00:08:31,440 --> 00:08:34,080
the zvm cloud connector is a

00:08:33,200 --> 00:08:37,599
python-based

00:08:34,080 --> 00:08:41,039
solution you need to install or linux

00:08:37,599 --> 00:08:44,399
install a python environment and

00:08:41,039 --> 00:08:47,200
for example um like a

00:08:44,399 --> 00:08:48,080
c language or linux runtime in order to

00:08:47,200 --> 00:08:51,040
have a

00:08:48,080 --> 00:08:51,440
xero clock connector running you don't

00:08:51,040 --> 00:08:55,680
have

00:08:51,440 --> 00:08:58,880
you don't need to have a high privileged

00:08:55,680 --> 00:09:00,640
user for that next server because

00:08:58,880 --> 00:09:02,000
xenon cloud connector is talking to

00:09:00,640 --> 00:09:05,200
smappy

00:09:02,000 --> 00:09:06,560
and all the privileged user is inside

00:09:05,200 --> 00:09:09,680
this might be

00:09:06,560 --> 00:09:11,440
so zbm clock connector or phalon

00:09:09,680 --> 00:09:13,519
uh is talking to the smartphone to do

00:09:11,440 --> 00:09:16,000
the management it doesn't need to be

00:09:13,519 --> 00:09:18,000
high privileged user on zbm

00:09:16,000 --> 00:09:19,120
but that's the that's the overall

00:09:18,000 --> 00:09:24,560
architecture of

00:09:19,120 --> 00:09:24,560
about failing and xerium cloud connector

00:09:24,959 --> 00:09:28,560
next i'm going to talk about the over

00:09:27,519 --> 00:09:31,519
architecture

00:09:28,560 --> 00:09:33,600
about film itself in previous chart we

00:09:31,519 --> 00:09:36,160
talked

00:09:33,600 --> 00:09:37,680
we talked about the the use case or the

00:09:36,160 --> 00:09:40,959
user scenario

00:09:37,680 --> 00:09:40,959
of phelon project

00:09:41,279 --> 00:09:46,880
now in this page

00:09:44,560 --> 00:09:48,160
we're going to talk about over the over

00:09:46,880 --> 00:09:51,279
architecture

00:09:48,160 --> 00:09:54,560
of um fail first

00:09:51,279 --> 00:09:57,920
it has a rest api layer right

00:09:54,560 --> 00:10:01,440
so it's paid python based all those

00:09:57,920 --> 00:10:05,200
all the code about in the recipe layer

00:10:01,440 --> 00:10:08,800
is a python and it it has a

00:10:05,200 --> 00:10:12,560
rest api request server

00:10:08,800 --> 00:10:16,000
that can access accept or request from

00:10:12,560 --> 00:10:17,680
outlayer such as a openstack or vmware

00:10:16,000 --> 00:10:20,399
or other things or

00:10:17,680 --> 00:10:21,519
anything that you can take as a sap

00:10:20,399 --> 00:10:25,200
client

00:10:21,519 --> 00:10:28,800
the rest api server it can accept

00:10:25,200 --> 00:10:32,560
requests such as a post request or get

00:10:28,800 --> 00:10:34,480
or put so it depends on the requirement

00:10:32,560 --> 00:10:35,839
or depends on the resource that you're

00:10:34,480 --> 00:10:39,200
working on

00:10:35,839 --> 00:10:42,640
oh this is the recipe uh this is the api

00:10:39,200 --> 00:10:44,880
recipe layer and then we're gonna have a

00:10:42,640 --> 00:10:46,160
transition layer we call it transition

00:10:44,880 --> 00:10:49,200
layer because

00:10:46,160 --> 00:10:52,240
it's it's a primary doing the logical

00:10:49,200 --> 00:10:55,360
translation from the request

00:10:52,240 --> 00:10:57,920
such as a rest api server so

00:10:55,360 --> 00:10:59,120
it will get all the requests from there

00:10:57,920 --> 00:11:02,399
and it will do

00:10:59,120 --> 00:11:03,279
all these jobs such as the image

00:11:02,399 --> 00:11:06,480
management

00:11:03,279 --> 00:11:09,760
or host or virtual server or whatever

00:11:06,480 --> 00:11:12,959
we will do the primary logic here and

00:11:09,760 --> 00:11:15,040
it will finally call the sscri layer

00:11:12,959 --> 00:11:16,640
which is a zhcp

00:11:15,040 --> 00:11:18,240
we will talk we're going to talk about

00:11:16,640 --> 00:11:20,399
later

00:11:18,240 --> 00:11:22,000
the transition layer is largest round

00:11:20,399 --> 00:11:25,040
it's not single

00:11:22,000 --> 00:11:28,640
so the the default

00:11:25,040 --> 00:11:30,640
spread number is 64

00:11:28,640 --> 00:11:33,440
and of course you can configure the base

00:11:30,640 --> 00:11:37,519
download based on the requirement

00:11:33,440 --> 00:11:40,640
and at last it's a dhcp layer

00:11:37,519 --> 00:11:43,600
which we usually call the smcri it's

00:11:40,640 --> 00:11:47,200
totally written in c language

00:11:43,600 --> 00:11:50,240
um the purpose of this layer

00:11:47,200 --> 00:11:53,360
is only to wrap the smcr

00:11:50,240 --> 00:11:57,519
sm api call as we mentioned

00:11:53,360 --> 00:12:00,079
sm api is a circuit-based so

00:11:57,519 --> 00:12:01,440
we need c language to talk to the to the

00:12:00,079 --> 00:12:04,240
smart api

00:12:01,440 --> 00:12:06,000
in order to do the real request to the

00:12:04,240 --> 00:12:09,120
sm api

00:12:06,000 --> 00:12:12,000
um in the meantime

00:12:09,120 --> 00:12:12,240
there are some sma api return calls such

00:12:12,000 --> 00:12:15,440
as

00:12:12,240 --> 00:12:18,320
a timeout or retry

00:12:15,440 --> 00:12:19,680
or asynchronized call such kind of

00:12:18,320 --> 00:12:23,120
functionalities from

00:12:19,680 --> 00:12:25,120
sms cpi so the smcri layer

00:12:23,120 --> 00:12:26,160
is responsible for handling handling

00:12:25,120 --> 00:12:29,920
that project

00:12:26,160 --> 00:12:31,040
handling that request and do the retry

00:12:29,920 --> 00:12:34,480
or whatever thing

00:12:31,040 --> 00:12:36,959
that needs to be done next

00:12:34,480 --> 00:12:39,120
we are going to talk about the detail of

00:12:36,959 --> 00:12:43,279
a rest api layer

00:12:39,120 --> 00:12:46,560
um so basically

00:12:43,279 --> 00:12:47,600
the rest api layer is running on our

00:12:46,560 --> 00:12:50,720
http

00:12:47,600 --> 00:12:51,360
service or nijix or whatever http

00:12:50,720 --> 00:12:54,399
servers

00:12:51,360 --> 00:12:58,480
that you are running film project

00:12:54,399 --> 00:13:03,360
itself does not create a hdbd service

00:12:58,480 --> 00:13:03,360
it's just embedded into the

00:13:03,600 --> 00:13:11,120
into the existing http server and

00:13:07,680 --> 00:13:14,399
let's see we let's see we want to have a

00:13:11,120 --> 00:13:18,399
create a new guest so there's

00:13:14,399 --> 00:13:22,079
there's a grammar very very simple

00:13:18,399 --> 00:13:24,240
which is let's say you post the servers

00:13:22,079 --> 00:13:25,760
and you want to create a server okay

00:13:24,240 --> 00:13:29,680
then the server name is

00:13:25,760 --> 00:13:33,279
abc and as you can see here

00:13:29,680 --> 00:13:36,959
the address api is the post servers

00:13:33,279 --> 00:13:40,639
abc and you can add additional

00:13:36,959 --> 00:13:42,720
parameters as you want so all the things

00:13:40,639 --> 00:13:44,800
are already documented in the film

00:13:42,720 --> 00:13:47,199
project documentation

00:13:44,800 --> 00:13:49,040
and you can refer to that documentation

00:13:47,199 --> 00:13:52,880
further information

00:13:49,040 --> 00:13:55,839
and check the parameters there um

00:13:52,880 --> 00:13:56,959
it's very to extend this kind of apis

00:13:55,839 --> 00:13:58,959
for example

00:13:56,959 --> 00:14:01,120
previously we don't have we don't have a

00:13:58,959 --> 00:14:04,320
management for the host

00:14:01,120 --> 00:14:07,360
and when we design the

00:14:04,320 --> 00:14:08,160
the first affilon api we'll talk about

00:14:07,360 --> 00:14:11,680
the servers

00:14:08,160 --> 00:14:13,600
which is the um virtual machines

00:14:11,680 --> 00:14:16,720
lifecycle management

00:14:13,600 --> 00:14:17,120
and then we find okay actually we need

00:14:16,720 --> 00:14:19,440
to

00:14:17,120 --> 00:14:21,440
manage all together further information

00:14:19,440 --> 00:14:24,320
from the zero itself

00:14:21,440 --> 00:14:25,600
we abstract the concept of a zvm into a

00:14:24,320 --> 00:14:28,639
host

00:14:25,600 --> 00:14:30,320
and we added a new recipe resource

00:14:28,639 --> 00:14:33,680
called post

00:14:30,320 --> 00:14:36,959
caller host and then we can use it

00:14:33,680 --> 00:14:40,480
as a as a resource

00:14:36,959 --> 00:14:43,360
endpoint to talk to and then

00:14:40,480 --> 00:14:44,959
the recipe layer is actually we are

00:14:43,360 --> 00:14:48,560
trying to make the api

00:14:44,959 --> 00:14:51,839
the backboard compatible so

00:14:48,560 --> 00:14:54,399
it's a it's design consideration

00:14:51,839 --> 00:14:55,360
so whenever we make changes we need to

00:14:54,399 --> 00:14:58,399
consider

00:14:55,360 --> 00:15:01,519
whether it's backward compatible because

00:14:58,399 --> 00:15:04,800
let's say you you have a version one

00:15:01,519 --> 00:15:06,800
and now you have very two so

00:15:04,800 --> 00:15:09,920
if you upgrade from version one to word

00:15:06,800 --> 00:15:12,639
two and the api is incompatible

00:15:09,920 --> 00:15:13,600
that means the upper layer i mean the

00:15:12,639 --> 00:15:16,800
the consumption

00:15:13,600 --> 00:15:17,839
like the application or asphalt script

00:15:16,800 --> 00:15:20,399
or whatever

00:15:17,839 --> 00:15:22,160
actually we are taught we expand the api

00:15:20,399 --> 00:15:25,839
has such kind of mechanism

00:15:22,160 --> 00:15:27,279
and response but if we make api

00:15:25,839 --> 00:15:30,320
incompatible

00:15:27,279 --> 00:15:32,720
then all those functions all those if

00:15:30,320 --> 00:15:33,600
all those consumers of the api need to

00:15:32,720 --> 00:15:36,720
be regret

00:15:33,600 --> 00:15:37,680
reading and that will be unacceptable

00:15:36,720 --> 00:15:41,120
from an

00:15:37,680 --> 00:15:42,959
application development perspective so

00:15:41,120 --> 00:15:45,440
that's the design consideration for the

00:15:42,959 --> 00:15:49,920
recipe layer

00:15:45,440 --> 00:15:52,839
in the next this is a transition layer

00:15:49,920 --> 00:15:54,160
and in transition layer as i mentioned

00:15:52,839 --> 00:15:59,040
before

00:15:54,160 --> 00:16:01,600
it's accept request from recipient

00:15:59,040 --> 00:16:02,320
um we technically say it's transition

00:16:01,600 --> 00:16:05,600
layer but

00:16:02,320 --> 00:16:08,880
all those things are really python so

00:16:05,600 --> 00:16:11,920
it's kind of um accept the request

00:16:08,880 --> 00:16:13,600
from rest api and it handled the

00:16:11,920 --> 00:16:16,959
detailed logic

00:16:13,600 --> 00:16:19,680
so there are a set of concepts in

00:16:16,959 --> 00:16:21,199
failure now for example the image

00:16:19,680 --> 00:16:24,320
because

00:16:21,199 --> 00:16:26,720
freelancing is is a

00:16:24,320 --> 00:16:28,050
virtual machine lifecycle management

00:16:26,720 --> 00:16:29,440
it's not like a

00:16:28,050 --> 00:16:32,959
[Music]

00:16:29,440 --> 00:16:35,120
iso image which is

00:16:32,959 --> 00:16:36,480
you get an iso download from some

00:16:35,120 --> 00:16:39,680
distributors

00:16:36,480 --> 00:16:40,639
and you install it from somewhere and do

00:16:39,680 --> 00:16:43,759
the configuration

00:16:40,639 --> 00:16:44,320
extra answer it's kind of cloud concept

00:16:43,759 --> 00:16:47,759
for

00:16:44,320 --> 00:16:50,800
freedom so you have to

00:16:47,759 --> 00:16:53,120
pre-define or pre-create an image

00:16:50,800 --> 00:16:54,160
or for example you can get this image

00:16:53,120 --> 00:16:56,480
from somewhere

00:16:54,160 --> 00:16:58,800
or from your vendor or from somewhere by

00:16:56,480 --> 00:17:02,160
your or made by yourself

00:16:58,800 --> 00:17:05,679
then there is an accept

00:17:02,160 --> 00:17:08,319
abstracted image concept you can

00:17:05,679 --> 00:17:09,039
export this image you can create an

00:17:08,319 --> 00:17:11,919
image

00:17:09,039 --> 00:17:13,280
you can upload this image and of course

00:17:11,919 --> 00:17:16,799
the primary use case

00:17:13,280 --> 00:17:20,160
is to is to import or upload the image

00:17:16,799 --> 00:17:23,280
from somewhere to the existing film

00:17:20,160 --> 00:17:25,600
film cluster then you're able to use

00:17:23,280 --> 00:17:29,120
that image to provision

00:17:25,600 --> 00:17:32,799
a provision a virtual machine so next

00:17:29,120 --> 00:17:35,600
is a re-switch and felon is

00:17:32,799 --> 00:17:37,360
is not a virtual machine centric because

00:17:35,600 --> 00:17:39,120
as you can see

00:17:37,360 --> 00:17:41,520
when you create a virtual machine

00:17:39,120 --> 00:17:44,880
actually a lot of resources included

00:17:41,520 --> 00:17:48,080
such as a virtual machine storage

00:17:44,880 --> 00:17:49,760
and network so

00:17:48,080 --> 00:17:52,320
in order to manage free speech for

00:17:49,760 --> 00:17:54,559
example i can i can define respeech

00:17:52,320 --> 00:17:55,600
i can couple nic to research i can

00:17:54,559 --> 00:17:58,880
revoke

00:17:55,600 --> 00:18:01,520
make access to the v switch extra extra

00:17:58,880 --> 00:18:02,480
so all these apis functions are already

00:18:01,520 --> 00:18:05,280
defined there

00:18:02,480 --> 00:18:06,080
so you can use the recipe to call to the

00:18:05,280 --> 00:18:09,520
weak speech

00:18:06,080 --> 00:18:12,880
and do management next one is host

00:18:09,520 --> 00:18:16,480
as i just mentioned the whole concept

00:18:12,880 --> 00:18:19,919
is actually abstracted by xeria

00:18:16,480 --> 00:18:22,480
for each cvm you will have

00:18:19,919 --> 00:18:23,760
we have a resource called host we

00:18:22,480 --> 00:18:27,600
distinguish those

00:18:23,760 --> 00:18:30,000
zero mohawks by their name so

00:18:27,600 --> 00:18:31,760
we didn't provide until now we didn't

00:18:30,000 --> 00:18:35,440
provide any

00:18:31,760 --> 00:18:36,400
um create a zvm concept in the api

00:18:35,440 --> 00:18:39,280
because we

00:18:36,400 --> 00:18:42,000
we cannot do so unless you uh want to

00:18:39,280 --> 00:18:44,720
automatically install vm which is not

00:18:42,000 --> 00:18:47,280
something that can be supported now so

00:18:44,720 --> 00:18:50,000
the api that's supported for zvm and has

00:18:47,280 --> 00:18:51,440
this get so you can get information from

00:18:50,000 --> 00:18:55,039
the host for example

00:18:51,440 --> 00:18:57,760
the disk board and use or cpu or memory

00:18:55,039 --> 00:18:59,919
or other things that you can get you can

00:18:57,760 --> 00:19:03,520
get those things from the house

00:18:59,919 --> 00:19:05,600
last one which is a washing machine

00:19:03,520 --> 00:19:06,880
and this is the most important concept

00:19:05,600 --> 00:19:09,520
of the whole film

00:19:06,880 --> 00:19:10,400
because the film's primary focus is the

00:19:09,520 --> 00:19:13,840
washing machine

00:19:10,400 --> 00:19:15,679
live well lifecycle management so

00:19:13,840 --> 00:19:17,600
let's say you want to define virtual

00:19:15,679 --> 00:19:20,320
machine what you need to do

00:19:17,600 --> 00:19:22,559
is you need to prepare your image then

00:19:20,320 --> 00:19:25,600
you create a waste page

00:19:22,559 --> 00:19:28,480
and you got you define a host

00:19:25,600 --> 00:19:29,919
now you can you know start virtual

00:19:28,480 --> 00:19:32,240
machine

00:19:29,919 --> 00:19:34,559
and start to define virtual machine and

00:19:32,240 --> 00:19:37,600
prepare user directory

00:19:34,559 --> 00:19:40,720
and in the user directory you can

00:19:37,600 --> 00:19:42,080
you can define memory the cpu and other

00:19:40,720 --> 00:19:44,960
informations

00:19:42,080 --> 00:19:46,799
in a recipe call in the meantime you

00:19:44,960 --> 00:19:49,280
also need to define a network

00:19:46,799 --> 00:19:51,120
that you want to connect to or which

00:19:49,280 --> 00:19:53,039
which you want to connect to so this

00:19:51,120 --> 00:19:54,559
will be also be parameter to the virtual

00:19:53,039 --> 00:19:57,600
machine create

00:19:54,559 --> 00:20:01,200
and last you you want to use the image

00:19:57,600 --> 00:20:04,000
so freelance is going to help you

00:20:01,200 --> 00:20:05,280
in copy the image's content into the

00:20:04,000 --> 00:20:08,480
virtual machine

00:20:05,280 --> 00:20:11,840
that you're going to preventing and

00:20:08,480 --> 00:20:14,480
valve is also leveraging the open source

00:20:11,840 --> 00:20:14,880
famous active engine which we caught

00:20:14,480 --> 00:20:18,159
cloud

00:20:14,880 --> 00:20:20,720
in it so cloudy in it

00:20:18,159 --> 00:20:24,480
is something that can help you doing the

00:20:20,720 --> 00:20:24,480
initialization of the virtual machine

00:20:25,520 --> 00:20:28,799
that's what that virtual machine uh will

00:20:28,480 --> 00:20:30,960
be

00:20:28,799 --> 00:20:34,000
for example the house name will be

00:20:30,960 --> 00:20:37,520
changed the ip will be upgraded

00:20:34,000 --> 00:20:40,880
and the disk for example the image is

00:20:37,520 --> 00:20:44,960
maybe five gigabytes or 10 gigabytes

00:20:40,880 --> 00:20:46,320
but multiplied to uh let's say 20 or 30

00:20:44,960 --> 00:20:48,720
gigabytes disk

00:20:46,320 --> 00:20:50,720
then that's something that you can use

00:20:48,720 --> 00:20:53,360
and the film will automatically

00:20:50,720 --> 00:20:53,840
help you to increase the file system

00:20:53,360 --> 00:20:58,000
from

00:20:53,840 --> 00:21:00,880
5 gig to 5k or 10 gigabytes to

00:20:58,000 --> 00:21:02,320
20 or 30 gigabytes but you can utilize

00:21:00,880 --> 00:21:06,480
full disks

00:21:02,320 --> 00:21:07,679
by all and all those functionalities

00:21:06,480 --> 00:21:09,840
actually

00:21:07,679 --> 00:21:11,919
especially those things that interact

00:21:09,840 --> 00:21:15,760
with the zhcp layer

00:21:11,919 --> 00:21:19,200
is going to call by zhcp layer

00:21:15,760 --> 00:21:20,799
so the the image management

00:21:19,200 --> 00:21:23,440
or the virtual machine the virtual

00:21:20,799 --> 00:21:25,600
machine's content management

00:21:23,440 --> 00:21:26,960
such as a copy from the image to the

00:21:25,600 --> 00:21:30,000
virtual machine is

00:21:26,960 --> 00:21:32,480
is not going to call the smart api

00:21:30,000 --> 00:21:33,840
layer but for something like a defined

00:21:32,480 --> 00:21:37,120
user directory

00:21:33,840 --> 00:21:38,320
or a couple nick those things that need

00:21:37,120 --> 00:21:41,760
to be defined as

00:21:38,320 --> 00:21:44,080
in the zvm cp or

00:21:41,760 --> 00:21:45,520
the directory or german that's something

00:21:44,080 --> 00:21:48,400
that we're going to

00:21:45,520 --> 00:21:50,960
call the dhcp layer which i'm going to

00:21:48,400 --> 00:21:54,080
talk about later

00:21:50,960 --> 00:21:57,919
so this is a dhcp layer

00:21:54,080 --> 00:22:01,120
um as you can see it accept the request

00:21:57,919 --> 00:22:01,120
from a transition layer

00:22:01,760 --> 00:22:09,120
the transition layer called the

00:22:05,520 --> 00:22:12,480
dhcp and this

00:22:09,120 --> 00:22:13,440
hcp is the same as the wrapper why we

00:22:12,480 --> 00:22:14,910
need this

00:22:13,440 --> 00:22:16,480
it's because

00:22:14,910 --> 00:22:19,440
[Music]

00:22:16,480 --> 00:22:21,440
this might be a socket so we have to use

00:22:19,440 --> 00:22:22,640
socket to talk to the smithy and do the

00:22:21,440 --> 00:22:25,360
management

00:22:22,640 --> 00:22:26,000
and there are other things that need to

00:22:25,360 --> 00:22:29,200
be handled

00:22:26,000 --> 00:22:31,679
in this civil layer for example there

00:22:29,200 --> 00:22:34,799
might be some time out

00:22:31,679 --> 00:22:35,760
uh sniping is not functional how can we

00:22:34,799 --> 00:22:38,799
handle that

00:22:35,760 --> 00:22:42,320
so it is wrapper in this http layer

00:22:38,799 --> 00:22:46,000
and as you as you know that might be

00:22:42,320 --> 00:22:47,840
the german is uh which is talking to the

00:22:46,000 --> 00:22:49,120
german which is managing the user

00:22:47,840 --> 00:22:52,880
directory

00:22:49,120 --> 00:22:56,720
its performance will be improved later

00:22:52,880 --> 00:22:59,679
so in some very rare case

00:22:56,720 --> 00:23:00,880
the german or sniping will be very a

00:22:59,679 --> 00:23:04,240
little bit slow

00:23:00,880 --> 00:23:07,200
and it will not return

00:23:04,240 --> 00:23:08,000
back immediately instead it will return

00:23:07,200 --> 00:23:10,559
a synchronized

00:23:08,000 --> 00:23:12,320
id to you and notify that this is

00:23:10,559 --> 00:23:13,919
something that we are working on and you

00:23:12,320 --> 00:23:17,120
need to subscribe this

00:23:13,919 --> 00:23:20,559
synchronized id in order to to know

00:23:17,120 --> 00:23:23,039
whether it's finished or not so it will

00:23:20,559 --> 00:23:26,240
return the synchronized id

00:23:23,039 --> 00:23:28,960
with some special special error code

00:23:26,240 --> 00:23:30,000
so the zcp layer handles that special

00:23:28,960 --> 00:23:33,919
error code

00:23:30,000 --> 00:23:37,280
and do the do the check for the sql site

00:23:33,919 --> 00:23:38,080
synchronize id to see whether the the

00:23:37,280 --> 00:23:40,000
trend

00:23:38,080 --> 00:23:41,200
the transaction is already finished or

00:23:40,000 --> 00:23:43,440
not

00:23:41,200 --> 00:23:45,039
of course there are some other arrows

00:23:43,440 --> 00:23:47,679
right so

00:23:45,039 --> 00:23:48,400
like you might return arrows and this

00:23:47,679 --> 00:23:51,679
layer

00:23:48,400 --> 00:23:55,679
is responsible for that layers handling

00:23:51,679 --> 00:23:58,240
such as report

00:23:55,679 --> 00:24:00,159
some meaningful information to the upper

00:23:58,240 --> 00:24:01,120
layer instead i just return the error

00:24:00,159 --> 00:24:03,600
code that

00:24:01,120 --> 00:24:05,200
that administrator checks might be arrow

00:24:03,600 --> 00:24:07,919
that will be something

00:24:05,200 --> 00:24:08,640
not helpful for the full enemy so that's

00:24:07,919 --> 00:24:10,320
the

00:24:08,640 --> 00:24:11,840
that's the use case and that's the

00:24:10,320 --> 00:24:14,640
purpose of the

00:24:11,840 --> 00:24:14,640
hcp layer

00:24:17,679 --> 00:24:21,919
and last i'm going to talk about

00:24:20,159 --> 00:24:26,720
integration

00:24:21,919 --> 00:24:30,000
so there is a new offering inside avm

00:24:26,720 --> 00:24:31,440
which was ga last year called ibm cloud

00:24:30,000 --> 00:24:35,840
infrastructure center

00:24:31,440 --> 00:24:38,880
the link is provided here as you can see

00:24:35,840 --> 00:24:42,080
the ibm column for track center

00:24:38,880 --> 00:24:45,200
is the ibm z and this one

00:24:42,080 --> 00:24:48,159
only offering which means it is

00:24:45,200 --> 00:24:49,120
only functional on i and it is

00:24:48,159 --> 00:24:53,039
functional and

00:24:49,120 --> 00:24:57,360
specially designed for for ibm zn and

00:24:53,039 --> 00:25:00,080
uh this one linux one platform it's

00:24:57,360 --> 00:25:02,159
working as an infrastructure and service

00:25:00,080 --> 00:25:05,919
to provide the life cycle management

00:25:02,159 --> 00:25:08,960
of the virtual and physical resources

00:25:05,919 --> 00:25:11,039
for example currently called ibm calling

00:25:08,960 --> 00:25:12,559
for truck standards upon virtual machine

00:25:11,039 --> 00:25:15,840
lifecycle management

00:25:12,559 --> 00:25:17,279
support storage like a slowest family or

00:25:15,840 --> 00:25:20,640
dsak

00:25:17,279 --> 00:25:21,440
such kind of management storage

00:25:20,640 --> 00:25:25,360
management

00:25:21,440 --> 00:25:28,400
and it also plan to expand its scope

00:25:25,360 --> 00:25:31,760
to support such as openshift

00:25:28,400 --> 00:25:34,000
which is utilizing ibm calling for first

00:25:31,760 --> 00:25:36,720
center as the ice offering

00:25:34,000 --> 00:25:38,320
to provision resources environment for

00:25:36,720 --> 00:25:42,080
ocd plaster

00:25:38,320 --> 00:25:47,200
also it's helping it we're talking

00:25:42,080 --> 00:25:47,200
to working on other things like um um

00:25:47,919 --> 00:25:54,799
network load balancer extra extra

00:25:51,760 --> 00:25:57,600
so failure is a very important

00:25:54,799 --> 00:25:59,120
part of ibm cloud infotainment center

00:25:57,600 --> 00:26:01,679
which is

00:25:59,120 --> 00:26:03,360
to be consumed by ibm cloud cloud

00:26:01,679 --> 00:26:06,880
infrastructure center

00:26:03,360 --> 00:26:10,640
to manage zvm virtual machine and other

00:26:06,880 --> 00:26:14,240
other things as a lifecycle management

00:26:10,640 --> 00:26:18,159
in the meantime there are also potential

00:26:14,240 --> 00:26:21,200
use cases for the vr and rear workflow

00:26:18,159 --> 00:26:25,200
currently there is a bank customer

00:26:21,200 --> 00:26:28,880
integrated into their automation flow

00:26:25,200 --> 00:26:32,640
so they are using vrnbo

00:26:28,880 --> 00:26:33,360
um there's a home flow to the lifecycle

00:26:32,640 --> 00:26:36,880
management

00:26:33,360 --> 00:26:39,600
on linux one machines it's not only from

00:26:36,880 --> 00:26:40,480
washing machine but also for application

00:26:39,600 --> 00:26:44,240
for

00:26:40,480 --> 00:26:46,240
other things so one of their workflow

00:26:44,240 --> 00:26:49,039
is to preview your virtual machines

00:26:46,240 --> 00:26:51,600
through cloud throttle and ibm clock

00:26:49,039 --> 00:26:53,520
cloud camera connector and after the

00:26:51,600 --> 00:26:56,880
virtual machine is deployed

00:26:53,520 --> 00:26:57,840
there there are under other flow so it's

00:26:56,880 --> 00:27:00,240
going to

00:26:57,840 --> 00:27:01,919
install applications or database into

00:27:00,240 --> 00:27:05,360
the virtual machine that deployed

00:27:01,919 --> 00:27:07,520
by a different project and

00:27:05,360 --> 00:27:09,520
of course there are other potential use

00:27:07,520 --> 00:27:12,080
case for an small black book

00:27:09,520 --> 00:27:13,440
so you can you can technically write the

00:27:12,080 --> 00:27:17,039
ansible playbook

00:27:13,440 --> 00:27:20,399
to be integrated into other asphalt

00:27:17,039 --> 00:27:21,200
based solution to drive the life cycle

00:27:20,399 --> 00:27:23,120
management

00:27:21,200 --> 00:27:24,480
on top of the zoom or the virtual

00:27:23,120 --> 00:27:26,799
machines

00:27:24,480 --> 00:27:28,880
so that's all for the for the

00:27:26,799 --> 00:27:32,559
integration

00:27:28,880 --> 00:27:35,760
for the integration of the

00:27:32,559 --> 00:27:39,679
of valon project to the upper layer

00:27:35,760 --> 00:27:42,559
and that's all for our presentation and

00:27:39,679 --> 00:27:44,000
thanks all for your listening and feel

00:27:42,559 --> 00:27:47,200
free to contact with us

00:27:44,000 --> 00:27:48,480
if you have any question or any comments

00:27:47,200 --> 00:27:51,840
on the presentation

00:27:48,480 --> 00:27:51,840

YouTube URL: https://www.youtube.com/watch?v=dzIWpW60uNU


