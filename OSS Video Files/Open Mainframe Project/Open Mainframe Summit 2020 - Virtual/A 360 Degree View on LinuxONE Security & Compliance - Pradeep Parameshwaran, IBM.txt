Title: A 360 Degree View on LinuxONE Security & Compliance - Pradeep Parameshwaran, IBM
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	A 360 Degree View on LinuxONE Security & Compliance - Pradeep Parameshwaran, IBM

Cybersecurity and data privacy continues to be the primary concern for the Enterprises. By 2022 , the annual cost of cyber attacks are supposed to be 6$trillon. Today's Hybrid Cloud approach lets tap into the public cloud, private clouds, conventional IT, mobility and more to create a single, comprehensive set of compute services. But cyber security in this environment is far too often treated as a separate element. This sessions covers, -the out of box  Security capabilities IBM LinuxONE offers starting from Isolation model , HSM exploitation and provide insights on how customer can benefit from the unique security capabilities with well defined use-cases - An overview on how out of box compliance capabilities together with the OpenSource ecosystem of the platform can help customers to solving pain points around various Regulatory requirements like PCI-DSS, HIPPA, FedRAMP etc.
Captions: 
	00:00:00,080 --> 00:00:03,679
good morning good afternoon and good

00:00:01,360 --> 00:00:05,200
evening everyone wherever you are i hope

00:00:03,679 --> 00:00:07,200
you are safe and healthy

00:00:05,200 --> 00:00:09,280
my name is pradeep parameshwaran i am

00:00:07,200 --> 00:00:11,519
the security and compliance lead for the

00:00:09,280 --> 00:00:13,759
next one and linux when ibmc

00:00:11,519 --> 00:00:15,679
i'm based out in ibm research lab in

00:00:13,759 --> 00:00:17,119
germany which is situated in a small

00:00:15,679 --> 00:00:18,960
city called beautiful

00:00:17,119 --> 00:00:20,800
probably everyone knows beverly by the

00:00:18,960 --> 00:00:23,119
name of stuttgart which is the home for

00:00:20,800 --> 00:00:25,519
porsche and mercedes

00:00:23,119 --> 00:00:26,800
i'm here to talk about a 360 degree view

00:00:25,519 --> 00:00:31,840
on linux modern

00:00:26,800 --> 00:00:33,520
linux from security and compliance

00:00:31,840 --> 00:00:35,040
this is standard disclaimer as from the

00:00:33,520 --> 00:00:36,719
ibm block

00:00:35,040 --> 00:00:38,800
so this is the agenda which you'll be

00:00:36,719 --> 00:00:41,120
focused on it's like a cycle here so

00:00:38,800 --> 00:00:42,960
that's why it's called a 360 degree view

00:00:41,120 --> 00:00:45,200
so we'll start with some introduction of

00:00:42,960 --> 00:00:46,079
the security capabilities around z15 and

00:00:45,200 --> 00:00:47,680
linux one

00:00:46,079 --> 00:00:49,440
and then we jump into the secure

00:00:47,680 --> 00:00:51,440
execution technology

00:00:49,440 --> 00:00:52,640
we'll briefly touch base on the vc

00:00:51,440 --> 00:00:54,960
encryption and

00:00:52,640 --> 00:00:56,719
expand fully homophobic encryption

00:00:54,960 --> 00:00:57,440
before it's building hyperbolic virtual

00:00:56,719 --> 00:00:59,600
servers

00:00:57,440 --> 00:01:01,520
finally we will have an ease of use

00:00:59,600 --> 00:01:02,239
compliance aspect which wraps up the

00:01:01,520 --> 00:01:05,840
whole story

00:01:02,239 --> 00:01:05,840
of the compliance and security

00:01:06,320 --> 00:01:11,760
so ibm z50 and linux one had brought up

00:01:09,600 --> 00:01:13,040
with a lot of security capabilities over

00:01:11,760 --> 00:01:15,040
the course of the year

00:01:13,040 --> 00:01:16,560
the security capabilities are either

00:01:15,040 --> 00:01:19,280
built into the platform

00:01:16,560 --> 00:01:20,960
or we rely a lot on the linux open

00:01:19,280 --> 00:01:23,439
source ecosystem as well

00:01:20,960 --> 00:01:24,799
so let's talk about both here first the

00:01:23,439 --> 00:01:26,400
platform level one

00:01:24,799 --> 00:01:28,240
we have tight integration to the

00:01:26,400 --> 00:01:30,720
hardware equipment accelerators

00:01:28,240 --> 00:01:31,439
especially crypto express 7 starts which

00:01:30,720 --> 00:01:34,079
got released

00:01:31,439 --> 00:01:35,280
with z15 and linux one two scripter

00:01:34,079 --> 00:01:37,119
express cards our

00:01:35,280 --> 00:01:38,560
hardware are our hardware security

00:01:37,119 --> 00:01:41,360
modules and then

00:01:38,560 --> 00:01:42,320
in addition we also have a crypto

00:01:41,360 --> 00:01:44,880
accelerator

00:01:42,320 --> 00:01:46,000
which is actually situated on every core

00:01:44,880 --> 00:01:48,640
of the cpu

00:01:46,000 --> 00:01:49,840
this is used for high speed and bulk

00:01:48,640 --> 00:01:53,280
symmetric encryption

00:01:49,840 --> 00:01:54,880
and we call it as cpac as in addition to

00:01:53,280 --> 00:01:57,040
the hardware accelerators

00:01:54,880 --> 00:01:58,320
we also focus a lot on workload

00:01:57,040 --> 00:02:00,880
isolation

00:01:58,320 --> 00:02:01,840
so the workload isolation in case of

00:02:00,880 --> 00:02:04,960
linux one

00:02:01,840 --> 00:02:07,840
is actually eal 5 35 with our

00:02:04,960 --> 00:02:09,039
standard lpar technology and the

00:02:07,840 --> 00:02:12,480
isolation is also

00:02:09,039 --> 00:02:14,000
for virtualization then in the

00:02:12,480 --> 00:02:16,560
in the recent months we had also

00:02:14,000 --> 00:02:18,480
released two new offerings

00:02:16,560 --> 00:02:20,720
one is ibm hybrid protect virtual

00:02:18,480 --> 00:02:24,160
servers which is focused on

00:02:20,720 --> 00:02:25,120
securely building deploying and managing

00:02:24,160 --> 00:02:27,520
a workload

00:02:25,120 --> 00:02:28,640
on a hybrid cloud environment the good

00:02:27,520 --> 00:02:31,200
thing here is

00:02:28,640 --> 00:02:34,080
the the virtual servers cannot be

00:02:31,200 --> 00:02:36,400
accessed by a cloud administrator

00:02:34,080 --> 00:02:38,080
we also brought in a technology called

00:02:36,400 --> 00:02:40,720
protected virtualization

00:02:38,080 --> 00:02:42,480
or else secure execution this is a

00:02:40,720 --> 00:02:45,760
hardware based technology

00:02:42,480 --> 00:02:46,560
where we can basically run and trusted

00:02:45,760 --> 00:02:48,879
workload

00:02:46,560 --> 00:02:50,480
on an untrusted environment so that is

00:02:48,879 --> 00:02:53,040
called as the trusted execution

00:02:50,480 --> 00:02:55,040
order why this is done to avoid the

00:02:53,040 --> 00:02:57,440
inside and threads and external attacks

00:02:55,040 --> 00:02:58,720
so as you can see from this chart we

00:02:57,440 --> 00:03:01,040
rely both on the

00:02:58,720 --> 00:03:02,319
open source and also on the platform

00:03:01,040 --> 00:03:03,920
specific capabilities

00:03:02,319 --> 00:03:05,920
and we will explain in detail in our

00:03:03,920 --> 00:03:07,840
charts now

00:03:05,920 --> 00:03:10,239
so first let's start with secure

00:03:07,840 --> 00:03:11,760
execution otherwise called as protected

00:03:10,239 --> 00:03:15,440
virtualization

00:03:11,760 --> 00:03:17,599
so data security is something which is

00:03:15,440 --> 00:03:20,480
not an option anymore

00:03:17,599 --> 00:03:21,680
the reason is there's a lot of money

00:03:20,480 --> 00:03:24,560
which is being

00:03:21,680 --> 00:03:26,560
given as a cost for the inside of it and

00:03:24,560 --> 00:03:28,959
as you can see from the percentage here

00:03:26,560 --> 00:03:30,799
insider threat is really a challenge now

00:03:28,959 --> 00:03:33,280
because it's the root for 60

00:03:30,799 --> 00:03:34,480
of the cyber threat attacks and on the

00:03:33,280 --> 00:03:37,040
left side you also see

00:03:34,480 --> 00:03:39,040
a lot of fines which are being done

00:03:37,040 --> 00:03:39,920
given to the companies by the regulatory

00:03:39,040 --> 00:03:43,280
bodies

00:03:39,920 --> 00:03:44,560
so that messages data security is not an

00:03:43,280 --> 00:03:46,959
option anymore

00:03:44,560 --> 00:03:48,560
and what ibm had done is they leveraged

00:03:46,959 --> 00:03:50,159
the open source technology

00:03:48,560 --> 00:03:52,000
together the platform specific

00:03:50,159 --> 00:03:54,720
technologies to bring in

00:03:52,000 --> 00:03:56,560
secure execution from the labs otherwise

00:03:54,720 --> 00:03:57,519
the our own trusted execution

00:03:56,560 --> 00:03:58,959
environment

00:03:57,519 --> 00:04:01,360
so what does this mean let's look at

00:03:58,959 --> 00:04:03,840
this picture here so we have an lpar

00:04:01,360 --> 00:04:06,159
which is actually hosting a kvm and the

00:04:03,840 --> 00:04:07,280
kvm has a kvm guest which can be a linux

00:04:06,159 --> 00:04:09,680
workload here

00:04:07,280 --> 00:04:10,560
and then basically this particular

00:04:09,680 --> 00:04:12,239
workload

00:04:10,560 --> 00:04:14,640
can be running its secure execution

00:04:12,239 --> 00:04:17,199
enabled and the host kvm

00:04:14,640 --> 00:04:18,479
cannot access the data which this guest

00:04:17,199 --> 00:04:20,639
is actually handling

00:04:18,479 --> 00:04:22,320
that's good right what this avoids

00:04:20,639 --> 00:04:25,040
actually two things

00:04:22,320 --> 00:04:26,000
one is basically the administrator of

00:04:25,040 --> 00:04:28,320
the kvm

00:04:26,000 --> 00:04:29,520
cannot access the memory of the kvm

00:04:28,320 --> 00:04:32,160
guest to this ramen

00:04:29,520 --> 00:04:33,680
that's good and the other thing is the

00:04:32,160 --> 00:04:36,240
neighboring kvm guest

00:04:33,680 --> 00:04:37,040
also cannot bring any of the malicious

00:04:36,240 --> 00:04:39,120
workload

00:04:37,040 --> 00:04:41,040
and then and then you know get into the

00:04:39,120 --> 00:04:44,320
host to the next guest

00:04:41,040 --> 00:04:46,720
that is not possible because here the

00:04:44,320 --> 00:04:48,720
the the scope for the trusted execution

00:04:46,720 --> 00:04:50,240
is actually around the kvm guest

00:04:48,720 --> 00:04:52,800
workload itself

00:04:50,240 --> 00:04:54,320
so how this is done we relied a lot on

00:04:52,800 --> 00:04:55,440
our own hardware based security

00:04:54,320 --> 00:04:57,759
technology

00:04:55,440 --> 00:05:00,560
and then we rely on not to enable this

00:04:57,759 --> 00:05:02,479
via the kbm

00:05:00,560 --> 00:05:03,600
now let's take things into into into a

00:05:02,479 --> 00:05:05,280
context here

00:05:03,600 --> 00:05:07,360
so how this access restrictions are

00:05:05,280 --> 00:05:08,320
getting started let's look at today's

00:05:07,360 --> 00:05:11,120
challenge first

00:05:08,320 --> 00:05:11,840
so in today's challenge there is there

00:05:11,120 --> 00:05:13,919
is we have the

00:05:11,840 --> 00:05:15,759
we have the lpar we have the canadian

00:05:13,919 --> 00:05:17,280
hypervisor and we do have multiple

00:05:15,759 --> 00:05:20,400
guests which are running

00:05:17,280 --> 00:05:22,800
all these guests are isolated vertically

00:05:20,400 --> 00:05:24,720
but then the guest memory can be

00:05:22,800 --> 00:05:27,759
accessed by the linux kernel here

00:05:24,720 --> 00:05:29,360
as you can see from my arrow here so

00:05:27,759 --> 00:05:31,039
what it means exactly is there is no

00:05:29,360 --> 00:05:33,440
isolation between the host

00:05:31,039 --> 00:05:35,360
and the guest and this is this is a

00:05:33,440 --> 00:05:36,320
problem because this is actually a space

00:05:35,360 --> 00:05:40,000
for the

00:05:36,320 --> 00:05:40,960
inside xml now let's look at secure

00:05:40,000 --> 00:05:43,520
execution

00:05:40,960 --> 00:05:44,560
with secure execution we have a fully

00:05:43,520 --> 00:05:46,720
isolated

00:05:44,560 --> 00:05:49,039
and protected hypervisor which is

00:05:46,720 --> 00:05:51,360
actually isolated both on the vertical

00:05:49,039 --> 00:05:53,280
and also in the host level so the

00:05:51,360 --> 00:05:54,800
hypervisor admins they can basically

00:05:53,280 --> 00:05:57,039
deploy the workloads

00:05:54,800 --> 00:05:59,199
but they don't have any clue what is the

00:05:57,039 --> 00:06:01,840
data hostility

00:05:59,199 --> 00:06:03,759
and then they can also have multiple

00:06:01,840 --> 00:06:07,120
isolated kvm guests

00:06:03,759 --> 00:06:08,800
and if one is one is uh malicious it can

00:06:07,120 --> 00:06:10,880
break down into the linux kernel

00:06:08,800 --> 00:06:12,240
but it cannot go into the next guest

00:06:10,880 --> 00:06:12,880
which is just having the secure

00:06:12,240 --> 00:06:15,680
execution

00:06:12,880 --> 00:06:16,319
of it so that is kind of the cool thing

00:06:15,680 --> 00:06:19,039
with with

00:06:16,319 --> 00:06:20,720
with the with secure execution and as

00:06:19,039 --> 00:06:23,919
you can see here it's a simplified

00:06:20,720 --> 00:06:25,520
implementation via the kvi

00:06:23,919 --> 00:06:27,039
now let's take a little real-time

00:06:25,520 --> 00:06:28,160
example let's assume there are three

00:06:27,039 --> 00:06:30,880
different services

00:06:28,160 --> 00:06:33,199
which you want to run both horizontally

00:06:30,880 --> 00:06:34,639
and vertically isolated like you can see

00:06:33,199 --> 00:06:38,160
here from blockchain

00:06:34,639 --> 00:06:40,080
security and crypto services in a theory

00:06:38,160 --> 00:06:41,759
in the normal world what happens is

00:06:40,080 --> 00:06:43,680
without secure execution

00:06:41,759 --> 00:06:45,440
you need to obviously dedicate your oil

00:06:43,680 --> 00:06:48,560
park to each and every one

00:06:45,440 --> 00:06:50,479
so that you have full isolation but with

00:06:48,560 --> 00:06:52,720
with the the the secure execution

00:06:50,479 --> 00:06:54,160
enabled you can basically run it on a

00:06:52,720 --> 00:06:57,039
single virtual server

00:06:54,160 --> 00:06:57,599
and still have it isolated both across

00:06:57,039 --> 00:07:00,080
the

00:06:57,599 --> 00:07:01,680
across the vertical and horizontal here

00:07:00,080 --> 00:07:02,880
this is the perfect multi multi-cloud or

00:07:01,680 --> 00:07:06,800
multi-channel cloud

00:07:02,880 --> 00:07:09,199
uh environment right so that's all about

00:07:06,800 --> 00:07:10,720
secure execution the next topic we are

00:07:09,199 --> 00:07:11,919
going to discuss about is currency

00:07:10,720 --> 00:07:13,440
encryption

00:07:11,919 --> 00:07:15,360
over the journey of the currency

00:07:13,440 --> 00:07:18,400
encryption for the last years

00:07:15,360 --> 00:07:21,840
ibm z was heavily focused on

00:07:18,400 --> 00:07:24,240
data request and data flight encryption

00:07:21,840 --> 00:07:25,120
on on on the on the aspects of policy

00:07:24,240 --> 00:07:27,039
encryption

00:07:25,120 --> 00:07:29,039
for this particular session we'll just

00:07:27,039 --> 00:07:32,400
reduce our scope to the data at rest

00:07:29,039 --> 00:07:33,199
position before we talk about privacy

00:07:32,400 --> 00:07:34,960
encryption

00:07:33,199 --> 00:07:38,160
i think it's better to understand the

00:07:34,960 --> 00:07:39,919
hardware fitness support on z15 and ux1

00:07:38,160 --> 00:07:42,160
we talked a lot about the express

00:07:39,919 --> 00:07:43,599
adapters already to manage the crypto

00:07:42,160 --> 00:07:45,919
adapters we have something called

00:07:43,599 --> 00:07:47,680
trusted key entry you can see here

00:07:45,919 --> 00:07:49,360
and the trusted key entry also has a

00:07:47,680 --> 00:07:50,479
workstation which we call as tke

00:07:49,360 --> 00:07:51,919
workstation

00:07:50,479 --> 00:07:54,160
and how do you authenticate all these

00:07:51,919 --> 00:07:55,680
workstations you use a smart card

00:07:54,160 --> 00:07:58,319
so you can see how secure the key

00:07:55,680 --> 00:08:01,039
management process

00:07:58,319 --> 00:08:01,840
and then one more thing is our z crypto

00:08:01,039 --> 00:08:03,919
stack

00:08:01,840 --> 00:08:05,599
which is actually a unique stack is also

00:08:03,919 --> 00:08:07,680
relying heavily on the linux

00:08:05,599 --> 00:08:08,800
crypto stack like standard linux kernel

00:08:07,680 --> 00:08:10,560
structure stack

00:08:08,800 --> 00:08:12,080
as you can see there are some hardware

00:08:10,560 --> 00:08:13,840
enables done which

00:08:12,080 --> 00:08:16,000
which is done as a part of the platform

00:08:13,840 --> 00:08:18,080
enablement and then we rely a lot on the

00:08:16,000 --> 00:08:19,039
linux kernel modules like dmcrip for

00:08:18,080 --> 00:08:21,199
example

00:08:19,039 --> 00:08:23,199
or we also like you know have our own

00:08:21,199 --> 00:08:25,360
our own zcrip device driver

00:08:23,199 --> 00:08:27,599
and also we we also exploit the standard

00:08:25,360 --> 00:08:28,400
libraries like open ssl like crypto and

00:08:27,599 --> 00:08:31,599
open quickbooks

00:08:28,400 --> 00:08:34,000
for example but everywhere we also rely

00:08:31,599 --> 00:08:34,800
or we also exploit all the z specific

00:08:34,000 --> 00:08:37,839
capabilities

00:08:34,800 --> 00:08:40,240
so that we can take the equal

00:08:37,839 --> 00:08:41,279
balance between security and whatever

00:08:40,240 --> 00:08:44,479
the open source

00:08:41,279 --> 00:08:44,479
community provides to us

00:08:45,600 --> 00:08:50,320
so on the privacy encryption part let's

00:08:47,920 --> 00:08:52,959
focus specifically on the protected keys

00:08:50,320 --> 00:08:55,200
protected keys are nothing but these are

00:08:52,959 --> 00:08:56,240
wrapped keys which are generated by the

00:08:55,200 --> 00:08:57,839
master keys

00:08:56,240 --> 00:09:00,320
and these master keys are basically

00:08:57,839 --> 00:09:02,320
hidden on a list

00:09:00,320 --> 00:09:04,480
so what this means exactly is each

00:09:02,320 --> 00:09:04,880
virtual server will have its own master

00:09:04,480 --> 00:09:06,880
key

00:09:04,880 --> 00:09:09,040
and be hidden basically it's not

00:09:06,880 --> 00:09:11,680
accessible by the operating system

00:09:09,040 --> 00:09:13,360
and then this protected key can be used

00:09:11,680 --> 00:09:15,519
for all the symmetric encryption

00:09:13,360 --> 00:09:17,120
you can see obviously the pros here are

00:09:15,519 --> 00:09:18,640
there are no clear keys in the operating

00:09:17,120 --> 00:09:21,279
system

00:09:18,640 --> 00:09:22,080
and then you basically rely a lot on the

00:09:21,279 --> 00:09:24,240
c packet

00:09:22,080 --> 00:09:25,519
for encryption decryption which is very

00:09:24,240 --> 00:09:27,920
fast

00:09:25,519 --> 00:09:29,440
but there's also cons right i mean

00:09:27,920 --> 00:09:31,920
hiding the master key

00:09:29,440 --> 00:09:33,920
is not known as hiding it inside a hsn

00:09:31,920 --> 00:09:34,959
module right like for example our hsr

00:09:33,920 --> 00:09:38,480
modules are

00:09:34,959 --> 00:09:40,560
like fix 140-235 level four certified

00:09:38,480 --> 00:09:41,519
since stamp approved so hiding there

00:09:40,560 --> 00:09:44,560
will be really great

00:09:41,519 --> 00:09:46,480
right so let's look at the how to

00:09:44,560 --> 00:09:48,080
generate a prototype

00:09:46,480 --> 00:09:49,760
so generate a protected key first we

00:09:48,080 --> 00:09:50,720
need a security which we need to

00:09:49,760 --> 00:09:53,200
generate from the

00:09:50,720 --> 00:09:55,360
crypto aftercards and then what you need

00:09:53,200 --> 00:09:57,360
to do is we need to use the pass module

00:09:55,360 --> 00:09:58,480
to transform the security into a

00:09:57,360 --> 00:09:59,920
protected key

00:09:58,480 --> 00:10:02,240
and the past module will take care of

00:09:59,920 --> 00:10:04,399
the job of you know negotiating the

00:10:02,240 --> 00:10:06,399
the the keys with the with the the with

00:10:04,399 --> 00:10:08,399
the cpu and the formula

00:10:06,399 --> 00:10:10,000
and then we basically use the protected

00:10:08,399 --> 00:10:12,880
keys for all our

00:10:10,000 --> 00:10:14,399
operations so let's put it in a real

00:10:12,880 --> 00:10:15,839
world perspective and let's take dm

00:10:14,399 --> 00:10:17,600
grouped as an example

00:10:15,839 --> 00:10:20,160
dmcrypt is actually used for the

00:10:17,600 --> 00:10:22,480
end-to-end data twist and picture

00:10:20,160 --> 00:10:24,320
what is the encrypt exactly does it's a

00:10:22,480 --> 00:10:25,680
mechanism to actually do the end-to-end

00:10:24,320 --> 00:10:28,240
data encryption

00:10:25,680 --> 00:10:30,560
and then the data is only available in

00:10:28,240 --> 00:10:33,519
clear

00:10:30,560 --> 00:10:35,360
in the application manner and basically

00:10:33,519 --> 00:10:35,920
what happens is you encrypt your whole

00:10:35,360 --> 00:10:38,079
device

00:10:35,920 --> 00:10:39,680
your whole block device and then you

00:10:38,079 --> 00:10:40,560
know whenever you write something it's

00:10:39,680 --> 00:10:41,760
encrypted

00:10:40,560 --> 00:10:44,160
and when you read it from the

00:10:41,760 --> 00:10:45,920
application level it's decrypted

00:10:44,160 --> 00:10:48,240
so let's do let's take a look at in

00:10:45,920 --> 00:10:50,079
scenario where how the encrypt is

00:10:48,240 --> 00:10:51,440
handling both the plain format and looks

00:10:50,079 --> 00:10:53,600
too formal

00:10:51,440 --> 00:10:55,600
so basically in a client format if you

00:10:53,600 --> 00:10:57,680
want to encrypt it first you will

00:10:55,600 --> 00:10:59,920
you need to open the device and then you

00:10:57,680 --> 00:11:02,079
encrypt it and then you mount it and

00:10:59,920 --> 00:11:03,680
then you basically read and write

00:11:02,079 --> 00:11:05,120
when it looks from it what happens is

00:11:03,680 --> 00:11:07,600
you create the looks header

00:11:05,120 --> 00:11:08,959
by doing a format with the aes keys and

00:11:07,600 --> 00:11:11,279
the passwords

00:11:08,959 --> 00:11:12,240
so these both are then written as a part

00:11:11,279 --> 00:11:14,160
of the header

00:11:12,240 --> 00:11:15,839
and then basically when you open it you

00:11:14,160 --> 00:11:17,360
just need to issue the passphrase

00:11:15,839 --> 00:11:19,680
you mount the device and you read and

00:11:17,360 --> 00:11:22,079
write but do you see a problem

00:11:19,680 --> 00:11:23,040
well i had listed here in the in in red

00:11:22,079 --> 00:11:25,040
colors right

00:11:23,040 --> 00:11:26,320
so in a plain format it's always

00:11:25,040 --> 00:11:28,720
challenging to

00:11:26,320 --> 00:11:30,160
associate the volumes with the with the

00:11:28,720 --> 00:11:33,120
keys and cycles

00:11:30,160 --> 00:11:34,800
and how do you securely store that ac

00:11:33,120 --> 00:11:36,000
and the same chance comes in loops to

00:11:34,800 --> 00:11:37,279
format as well

00:11:36,000 --> 00:11:39,680
because basically you have the same

00:11:37,279 --> 00:11:41,360
problem here the only only bad thing is

00:11:39,680 --> 00:11:43,680
you also need to securely store your

00:11:41,360 --> 00:11:45,360
passphrases now

00:11:43,680 --> 00:11:47,600
so let's see how protected key helps

00:11:45,360 --> 00:11:49,440
here so with the protected key

00:11:47,600 --> 00:11:51,120
you basically in a plane format you

00:11:49,440 --> 00:11:53,440
generate a security

00:11:51,120 --> 00:11:54,720
and use pass module to create a

00:11:53,440 --> 00:11:56,880
protected key

00:11:54,720 --> 00:11:57,760
cipher now you use that to open the

00:11:56,880 --> 00:12:00,000
volume

00:11:57,760 --> 00:12:01,760
mount and read and write so basically

00:12:00,000 --> 00:12:03,680
you don't have the pain to

00:12:01,760 --> 00:12:05,200
securely store the key somewhere because

00:12:03,680 --> 00:12:06,160
it's already protective and secure key

00:12:05,200 --> 00:12:07,279
here

00:12:06,160 --> 00:12:09,600
now let's take a look at the looks

00:12:07,279 --> 00:12:11,600
format it looks for me

00:12:09,600 --> 00:12:13,519
basically you have the secure key and

00:12:11,600 --> 00:12:14,480
then you have the protected key with the

00:12:13,519 --> 00:12:16,000
passphrase

00:12:14,480 --> 00:12:18,079
which is actually written as a part of

00:12:16,000 --> 00:12:20,320
the loops to head now

00:12:18,079 --> 00:12:21,839
here passphrase is nothing but then

00:12:20,320 --> 00:12:23,600
checklist to be honest

00:12:21,839 --> 00:12:25,600
because all you need the passphrase is

00:12:23,600 --> 00:12:27,360
to open the volume but the postfix does

00:12:25,600 --> 00:12:29,040
not have any sense here because we rely

00:12:27,360 --> 00:12:30,480
heavily on the protected key here

00:12:29,040 --> 00:12:32,079
so you can obviously have a password

00:12:30,480 --> 00:12:33,440
like one two three for example

00:12:32,079 --> 00:12:34,959
because having just a password doesn't

00:12:33,440 --> 00:12:36,639
make sense because you need the

00:12:34,959 --> 00:12:38,720
protected keys

00:12:36,639 --> 00:12:40,560
so that's how the dmcrip volume

00:12:38,720 --> 00:12:41,839
management is done with protector keys

00:12:40,560 --> 00:12:44,800
and that's one of the extension for the

00:12:41,839 --> 00:12:44,800
provision encryption

00:12:45,600 --> 00:12:49,600
now let's focus on the next technology

00:12:47,519 --> 00:12:53,120
which is fully homophobic

00:12:49,600 --> 00:12:54,639
so in in in in this afternoon you will

00:12:53,120 --> 00:12:56,639
have one more session from flowey and

00:12:54,639 --> 00:12:58,160
eli who are the fhe experts

00:12:56,639 --> 00:13:00,639
who will talk about the fully homophobic

00:12:58,160 --> 00:13:02,639
encryption all i'm trying to say here is

00:13:00,639 --> 00:13:05,040
pulling homophobic encryption technology

00:13:02,639 --> 00:13:06,399
is currently being exploited in ibm z15

00:13:05,040 --> 00:13:08,399
and linux one

00:13:06,399 --> 00:13:09,920
so this is invented on ibm research and

00:13:08,399 --> 00:13:11,279
we do have an open source project called

00:13:09,920 --> 00:13:13,120
hlm

00:13:11,279 --> 00:13:15,440
so what exactly is homophobic encryption

00:13:13,120 --> 00:13:16,399
technology whenever we explain math it's

00:13:15,440 --> 00:13:18,639
called is difficult

00:13:16,399 --> 00:13:20,160
so let me try to be a bit simple here

00:13:18,639 --> 00:13:22,800
homophobic encryption means

00:13:20,160 --> 00:13:24,800
you basically work on an encrypted data

00:13:22,800 --> 00:13:26,800
for all your processing and competition

00:13:24,800 --> 00:13:28,720
so what it means exactly is you can

00:13:26,800 --> 00:13:29,920
input your data you can take it to an

00:13:28,720 --> 00:13:31,680
untrusted environment

00:13:29,920 --> 00:13:33,680
and do all your complications for

00:13:31,680 --> 00:13:34,320
example you can have your data in the

00:13:33,680 --> 00:13:35,839
on-prem

00:13:34,320 --> 00:13:37,920
you can encrypt it and send it to your

00:13:35,839 --> 00:13:39,600
cloud cloud offering which actually does

00:13:37,920 --> 00:13:41,440
not care about the clear data

00:13:39,600 --> 00:13:43,680
or it does this to process against the

00:13:41,440 --> 00:13:45,760
encrypted data itself

00:13:43,680 --> 00:13:48,000
so in ibm we released something called

00:13:45,760 --> 00:13:49,440
toolkits which is actually um

00:13:48,000 --> 00:13:51,360
a set of development experience

00:13:49,440 --> 00:13:52,720
environment where you can build use

00:13:51,360 --> 00:13:54,800
cases with the

00:13:52,720 --> 00:13:56,160
with the fully homophobic encryption and

00:13:54,800 --> 00:13:58,240
these toolkits are by the way

00:13:56,160 --> 00:13:59,680
available on linux one z as well you can

00:13:58,240 --> 00:14:01,760
obviously go and give it a try

00:13:59,680 --> 00:14:03,279
by downloading the toolkit from github

00:14:01,760 --> 00:14:05,040
and whenever you wanna you're struggling

00:14:03,279 --> 00:14:06,720
with the use cases around fhe you can

00:14:05,040 --> 00:14:08,560
obviously rely on our tips here

00:14:06,720 --> 00:14:10,480
we actually have some examples of data

00:14:08,560 --> 00:14:12,320
privacy already as part of the toolkit

00:14:10,480 --> 00:14:14,399
but there are multiple exploration areas

00:14:12,320 --> 00:14:15,920
which you can obviously rely on

00:14:14,399 --> 00:14:17,920
i hope that gives you a good insight on

00:14:15,920 --> 00:14:21,199
the foc now and obviously please listen

00:14:17,920 --> 00:14:22,959
to the session from planning your vlog

00:14:21,199 --> 00:14:24,720
and then final security offerings i want

00:14:22,959 --> 00:14:25,760
to focus on is hyperprotected culture

00:14:24,720 --> 00:14:27,920
service

00:14:25,760 --> 00:14:30,160
hypercontact virtual server relies

00:14:27,920 --> 00:14:32,880
heavily on the value proportion of

00:14:30,160 --> 00:14:35,040
how and inside a thread can be avoided

00:14:32,880 --> 00:14:37,440
and how you can do a secure

00:14:35,040 --> 00:14:39,519
build and deployment of a workload so

00:14:37,440 --> 00:14:41,680
there are multiple stages involved here

00:14:39,519 --> 00:14:43,680
where you build a workflow and then you

00:14:41,680 --> 00:14:46,959
deploy it with trust and by the way it's

00:14:43,680 --> 00:14:48,399
all backed by our crypto cards

00:14:46,959 --> 00:14:50,480
let's look at a deeper dive into the

00:14:48,399 --> 00:14:51,279
architecture here the hypothetical

00:14:50,480 --> 00:14:53,680
virtual server

00:14:51,279 --> 00:14:54,560
relies a lot on secure service container

00:14:53,680 --> 00:14:56,160
all part

00:14:54,560 --> 00:14:58,560
so that is actually a lock down

00:14:56,160 --> 00:15:00,720
appliance which is basically

00:14:58,560 --> 00:15:02,560
cannot be accessed by the administrator

00:15:00,720 --> 00:15:03,839
directly i mean you need an inverse api

00:15:02,560 --> 00:15:05,600
to do it

00:15:03,839 --> 00:15:07,519
and that's an insider threat mitigation

00:15:05,600 --> 00:15:09,120
then and one more thing is

00:15:07,519 --> 00:15:11,680
secure service container with hyper

00:15:09,120 --> 00:15:12,800
particular server relies a lot on docker

00:15:11,680 --> 00:15:14,720
interfaces

00:15:12,800 --> 00:15:16,160
and what you ultimately do is from a

00:15:14,720 --> 00:15:18,639
customer standpoint

00:15:16,160 --> 00:15:20,399
all you need to bring is a docker file

00:15:18,639 --> 00:15:21,839
which actually is capable of building a

00:15:20,399 --> 00:15:24,000
docker image

00:15:21,839 --> 00:15:26,560
you pass the docker file to the docker

00:15:24,000 --> 00:15:28,720
to the secure build process

00:15:26,560 --> 00:15:30,079
and the security process builds the

00:15:28,720 --> 00:15:32,800
image signs

00:15:30,079 --> 00:15:33,839
it and then deploys it to the hydroponic

00:15:32,800 --> 00:15:36,480
virtual server

00:15:33,839 --> 00:15:38,480
by the way each each image will fit in

00:15:36,480 --> 00:15:40,800
into only the specific virtual server

00:15:38,480 --> 00:15:43,199
where it's supposed to be deployed and

00:15:40,800 --> 00:15:44,480
then basically you also have a lot of

00:15:43,199 --> 00:15:46,959
management options

00:15:44,480 --> 00:15:48,079
to manage these images using a cli

00:15:46,959 --> 00:15:49,680
interface

00:15:48,079 --> 00:15:51,279
as you can see here this is the

00:15:49,680 --> 00:15:52,959
application which got deployed

00:15:51,279 --> 00:15:54,560
and then you have the security process

00:15:52,959 --> 00:15:56,399
to deploy the application

00:15:54,560 --> 00:15:57,680
and also you have grip 11 interface

00:15:56,399 --> 00:15:59,600
where you can exploit input

00:15:57,680 --> 00:16:01,120
capabilities and there is also

00:15:59,600 --> 00:16:03,519
monitoring components available

00:16:01,120 --> 00:16:04,720
to check the status of your app so there

00:16:03,519 --> 00:16:06,160
is one unique thing which you have

00:16:04,720 --> 00:16:07,920
noticed already here

00:16:06,160 --> 00:16:09,360
we don't really run this container as a

00:16:07,920 --> 00:16:11,360
1c container

00:16:09,360 --> 00:16:13,519
we run it as a run queue container it's

00:16:11,360 --> 00:16:17,120
in project open source by ibm

00:16:13,519 --> 00:16:18,079
and run queue relies on a small kbm

00:16:17,120 --> 00:16:20,880
instance

00:16:18,079 --> 00:16:22,880
and inside that kvm you basically run

00:16:20,880 --> 00:16:24,720
your docker images

00:16:22,880 --> 00:16:26,800
so in this way you are isolated

00:16:24,720 --> 00:16:28,399
vertically and also you are isolated

00:16:26,800 --> 00:16:30,160
horizontally with the secure service

00:16:28,399 --> 00:16:31,759
container technology

00:16:30,160 --> 00:16:36,480
i hope that gives a good insight on the

00:16:31,759 --> 00:16:38,959
hyper product processor now let's move

00:16:36,480 --> 00:16:42,399
to the ease of use compliance aspects

00:16:38,959 --> 00:16:44,079
so compliance is becoming a big big um

00:16:42,399 --> 00:16:45,600
like additional overhead for the

00:16:44,079 --> 00:16:47,920
enterprises

00:16:45,600 --> 00:16:49,839
and there's a reason actually i looked

00:16:47,920 --> 00:16:52,720
into the recent databases which came in

00:16:49,839 --> 00:16:55,279
2018 19 and 2020.

00:16:52,720 --> 00:16:56,880
as you can see there is one column here

00:16:55,279 --> 00:16:58,959
human error

00:16:56,880 --> 00:17:00,480
customers tend to accept the defaults

00:16:58,959 --> 00:17:02,480
which the vendor provides

00:17:00,480 --> 00:17:04,240
and the customers don't care about you

00:17:02,480 --> 00:17:05,039
about the hardening of the environment

00:17:04,240 --> 00:17:07,120
itself

00:17:05,039 --> 00:17:08,160
and these are main factors for such a

00:17:07,120 --> 00:17:10,160
breach actually

00:17:08,160 --> 00:17:12,559
it's not that the vendor is kind of you

00:17:10,160 --> 00:17:14,319
know not satisfying the compliance but

00:17:12,559 --> 00:17:17,199
it's more about how you continuously

00:17:14,319 --> 00:17:19,439
keep that compliance going

00:17:17,199 --> 00:17:21,039
and on this level let's focus first on

00:17:19,439 --> 00:17:22,720
the system hardening because that's the

00:17:21,039 --> 00:17:24,640
basic for the compliance

00:17:22,720 --> 00:17:26,640
once you have the hardened system you

00:17:24,640 --> 00:17:28,880
basically have a secure environment

00:17:26,640 --> 00:17:30,640
which actually means you are compliant

00:17:28,880 --> 00:17:31,280
so the hardening can be on multiple

00:17:30,640 --> 00:17:33,440
levels

00:17:31,280 --> 00:17:34,880
it can be on a base layer which is like

00:17:33,440 --> 00:17:36,559
you know boot lower hardening

00:17:34,880 --> 00:17:38,720
or even it could be entire model

00:17:36,559 --> 00:17:41,120
hardware it could be on the kernel level

00:17:38,720 --> 00:17:42,960
where you harden your file system or you

00:17:41,120 --> 00:17:45,039
can also harden a compiler

00:17:42,960 --> 00:17:46,559
so combined with all these things you'll

00:17:45,039 --> 00:17:48,640
basically generate a secure

00:17:46,559 --> 00:17:49,840
a hardened system which is actually you

00:17:48,640 --> 00:17:53,760
know secure

00:17:49,840 --> 00:17:55,679
and fine so for when you talk about

00:17:53,760 --> 00:17:56,799
hardening there is always multiple areas

00:17:55,679 --> 00:17:58,480
to focus on

00:17:56,799 --> 00:18:00,880
starting from access control daily

00:17:58,480 --> 00:18:03,039
intuition direction for example

00:18:00,880 --> 00:18:03,919
access control access control can mean

00:18:03,039 --> 00:18:06,799
anything

00:18:03,919 --> 00:18:08,640
it can mean sa linux or it could be like

00:18:06,799 --> 00:18:09,840
a user access control where you rely on

00:18:08,640 --> 00:18:12,960
an ldap

00:18:09,840 --> 00:18:14,480
so every time when you have a focus area

00:18:12,960 --> 00:18:16,080
please focus on all these building

00:18:14,480 --> 00:18:17,440
blocks please make sure that your xc

00:18:16,080 --> 00:18:18,960
linux is enabled

00:18:17,440 --> 00:18:20,640
please make sure repair modules are

00:18:18,960 --> 00:18:23,200
properly configurable

00:18:20,640 --> 00:18:26,480
please make sure that your ip tables or

00:18:23,200 --> 00:18:28,320
nf tables have proper firewalls in place

00:18:26,480 --> 00:18:30,480
please make sure that your aid is

00:18:28,320 --> 00:18:33,039
enabled for file integrity monitoring

00:18:30,480 --> 00:18:34,960
not just enabled please make sure that

00:18:33,039 --> 00:18:37,679
you're actually configuring your a

00:18:34,960 --> 00:18:39,520
database to actually track the important

00:18:37,679 --> 00:18:42,000
files you need to track

00:18:39,520 --> 00:18:44,080
okay so in this way what i'm trying to

00:18:42,000 --> 00:18:45,360
represent here is the focus area

00:18:44,080 --> 00:18:47,919
and what are the building blocks which

00:18:45,360 --> 00:18:49,600
need to be hardened on that

00:18:47,919 --> 00:18:51,760
and again it's not just that the focus

00:18:49,600 --> 00:18:53,679
is not end with a single slide

00:18:51,760 --> 00:18:56,320
for the secure networks as well you have

00:18:53,679 --> 00:18:57,760
open ssh you have open ssl make sure

00:18:56,320 --> 00:18:59,919
that you are actually you know using the

00:18:57,760 --> 00:19:02,160
proper options on open ssh for example

00:18:59,919 --> 00:19:03,919
in the shd config file

00:19:02,160 --> 00:19:05,520
and then make sure that your open sl is

00:19:03,919 --> 00:19:06,960
actually using the crypto capabilities

00:19:05,520 --> 00:19:08,400
from the zoom

00:19:06,960 --> 00:19:10,160
and then if you talk about the second

00:19:08,400 --> 00:19:11,840
data at rest for dmcrip

00:19:10,160 --> 00:19:13,600
rely on protected keys instead of

00:19:11,840 --> 00:19:15,760
relying on clear keys

00:19:13,600 --> 00:19:17,200
and for compliance tech rely on openscap

00:19:15,760 --> 00:19:19,440
for example which i will

00:19:17,200 --> 00:19:20,799
touch on the next slide so in this way

00:19:19,440 --> 00:19:21,520
it sounds like there are a lot of focus

00:19:20,799 --> 00:19:24,720
areas

00:19:21,520 --> 00:19:27,440
there are equally building locks on that

00:19:24,720 --> 00:19:28,960
so finally open scan so we saw some of

00:19:27,440 --> 00:19:30,880
the building blocks right so now let's

00:19:28,960 --> 00:19:32,960
see how to evaluate all these building

00:19:30,880 --> 00:19:35,600
blocks or how to evaluate the gaps

00:19:32,960 --> 00:19:36,480
so here openscap helps us openscap is an

00:19:35,600 --> 00:19:39,039
ecosystem

00:19:36,480 --> 00:19:39,520
which actually provides a way to manage

00:19:39,039 --> 00:19:41,919
your

00:19:39,520 --> 00:19:42,799
your system configuration the compliance

00:19:41,919 --> 00:19:44,640
standpoint

00:19:42,799 --> 00:19:47,280
and the good thing is it also remediates

00:19:44,640 --> 00:19:48,960
it so basically it's built by red hat

00:19:47,280 --> 00:19:50,000
and maintained by red hat as an open

00:19:48,960 --> 00:19:52,000
source project

00:19:50,000 --> 00:19:53,200
and we verified it on z as well on the

00:19:52,000 --> 00:19:55,200
next one zs now

00:19:53,200 --> 00:19:56,559
and opens captions this cap protocol is

00:19:55,200 --> 00:19:58,640
actually miscertified

00:19:56,559 --> 00:20:00,320
it also contains multiple regulatory and

00:19:58,640 --> 00:20:02,640
compliance policies that you can scan

00:20:00,320 --> 00:20:02,640
against

00:20:02,960 --> 00:20:09,200
so here's one example with openstack

00:20:06,559 --> 00:20:10,720
so open step hardening for the ipl here

00:20:09,200 --> 00:20:12,720
so the ipl bootloader

00:20:10,720 --> 00:20:14,320
as you know it says the next it's a

00:20:12,720 --> 00:20:16,559
z-specific bootloader

00:20:14,320 --> 00:20:18,159
and basically what we did is we extended

00:20:16,559 --> 00:20:20,080
the openstack profile

00:20:18,159 --> 00:20:22,240
to look for these settings as well as

00:20:20,080 --> 00:20:24,159
you can see on the left hand side here

00:20:22,240 --> 00:20:25,440
uh we should make sure that the zip

00:20:24,159 --> 00:20:29,039
group order config

00:20:25,440 --> 00:20:30,960
does not disable sale that's by default

00:20:29,039 --> 00:20:32,480
the same way you know we also said what

00:20:30,960 --> 00:20:34,799
is the reason for that

00:20:32,480 --> 00:20:36,559
okay so why this should not be done and

00:20:34,799 --> 00:20:37,440
then the same way we also try to

00:20:36,559 --> 00:20:39,679
evaluate

00:20:37,440 --> 00:20:40,559
a rule where we need to make sure that

00:20:39,679 --> 00:20:42,960
the auditing

00:20:40,559 --> 00:20:44,960
starts prior to the audit even started

00:20:42,960 --> 00:20:45,760
so that configuration can be done on the

00:20:44,960 --> 00:20:48,320
ipl

00:20:45,760 --> 00:20:48,880
where we set this flag called auditable

00:20:48,320 --> 00:20:50,559
right

00:20:48,880 --> 00:20:52,320
so in this way what we are trying to do

00:20:50,559 --> 00:20:54,720
is we are trying to incorporate

00:20:52,320 --> 00:20:58,159
these specific recommendations into the

00:20:54,720 --> 00:20:58,159
openscapular transfer

00:20:58,240 --> 00:21:01,440
so with this i almost end to my with my

00:21:00,480 --> 00:21:03,200
presentation

00:21:01,440 --> 00:21:04,559
so we covered the security capabilities

00:21:03,200 --> 00:21:06,799
only next one here with a strong

00:21:04,559 --> 00:21:08,159
emphasis on the open source ecosystem

00:21:06,799 --> 00:21:10,240
and then we talked a little bit about

00:21:08,159 --> 00:21:12,000
the regulatory requirements and how the

00:21:10,240 --> 00:21:13,440
you know the multiple security blocks or

00:21:12,000 --> 00:21:14,320
the building blocks are fitting into the

00:21:13,440 --> 00:21:15,760
context

00:21:14,320 --> 00:21:17,360
and we saw some tooling around the

00:21:15,760 --> 00:21:20,559
regulator requirements as well

00:21:17,360 --> 00:21:22,320
like openscap for example i did leave

00:21:20,559 --> 00:21:22,720
some references as a part of the session

00:21:22,320 --> 00:21:24,480
here

00:21:22,720 --> 00:21:25,760
which you can basically later look at

00:21:24,480 --> 00:21:27,440
you know there is one great book which

00:21:25,760 --> 00:21:30,400
is focused on securing your cloud on the

00:21:27,440 --> 00:21:32,159
next one for example

00:21:30,400 --> 00:21:33,919
and that ends my session thank you very

00:21:32,159 --> 00:21:35,039
much for listening i'm looking forward

00:21:33,919 --> 00:21:38,880
for the live q a

00:21:35,039 --> 00:21:38,880

YouTube URL: https://www.youtube.com/watch?v=6QKUgg5n9qI


