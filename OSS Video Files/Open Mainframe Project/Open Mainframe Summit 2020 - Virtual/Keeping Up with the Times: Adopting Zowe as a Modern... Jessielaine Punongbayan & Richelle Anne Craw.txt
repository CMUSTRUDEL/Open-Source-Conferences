Title: Keeping Up with the Times: Adopting Zowe as a Modern... Jessielaine Punongbayan & Richelle Anne Craw
Publication date: 2020-09-08
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Keeping Up with the Times: Adopting Zowe as a Modern Mainframe Developer - Jessielaine Punongbayan & Richelle Anne Craw, Broadcom 

How extending Zowe CLI made Mainframe Engineers, Jessielaine Punongbayan and Richelle Anne Craw, more productive. From their beginnings as Application Developers and subsequent experience as Operations Engineers, their move to a DevOps role as part of the Zowe project is a natural progression in their career journey. Knowing what they know now, how could they have used Zowe to improve their lives in their previous roles? Join this session as they show the time-saving benefits of adopting Zowe, specifically via the creation of a Zowe CLI Systems Utilities Plugin. Using what they learned from developing legacy Mainframe applications and performing system administration tasks, extending Zowe CLI was the obvious answer as a way to improve the productivity of teams doing repetitive tasks on the Mainframe even without deep Mainframe knowledge.
Captions: 
	00:00:00,080 --> 00:00:04,080
hello and welcome to this session

00:00:02,080 --> 00:00:06,399
keeping up with the times adopting zoe

00:00:04,080 --> 00:00:07,680
as a modern mainframe developer my name

00:00:06,399 --> 00:00:09,599
is rochelle anger

00:00:07,680 --> 00:00:13,200
and i'm joshua in poland and we're

00:00:09,599 --> 00:00:16,800
senior software engineers from broadcom

00:00:13,200 --> 00:00:18,480
so nowadays nowadays open source tooling

00:00:16,800 --> 00:00:20,000
dominates application development you

00:00:18,480 --> 00:00:23,600
have these tools like

00:00:20,000 --> 00:00:25,199
jenkins vs code git and

00:00:23,600 --> 00:00:27,119
they're usually used for continuous

00:00:25,199 --> 00:00:28,960
improvement but i don't believe that

00:00:27,119 --> 00:00:31,359
continuous improvement should be just

00:00:28,960 --> 00:00:33,120
limited to software in our previous

00:00:31,359 --> 00:00:34,640
session we talked about gobble and the

00:00:33,120 --> 00:00:37,280
modern mainframe movement

00:00:34,640 --> 00:00:38,480
and how we witness technology evolved

00:00:37,280 --> 00:00:40,960
throughout the years

00:00:38,480 --> 00:00:43,440
and today we're going to talk about how

00:00:40,960 --> 00:00:47,039
we can continuously improve ourselves as

00:00:43,440 --> 00:00:49,280
mainframe developers exactly

00:00:47,039 --> 00:00:50,239
before we begin i would like to give you

00:00:49,280 --> 00:00:53,840
a brief

00:00:50,239 --> 00:00:55,640
background of our history and rashad and

00:00:53,840 --> 00:00:57,120
i started in the philippines back in

00:00:55,640 --> 00:00:58,960
00:00:57,120 --> 00:01:00,239
where we are mainframe application

00:00:58,960 --> 00:01:03,440
developers and

00:01:00,239 --> 00:01:04,479
we specialize in coding using kabul

00:01:03,440 --> 00:01:08,080
programming language

00:01:04,479 --> 00:01:12,560
in kicks and gcl after that one

00:01:08,080 --> 00:01:14,880
we moved to singapore in 2010 to become

00:01:12,560 --> 00:01:16,400
cobble consultants and there we we

00:01:14,880 --> 00:01:19,600
learned about db2

00:01:16,400 --> 00:01:22,640
we improve our learning there we

00:01:19,600 --> 00:01:23,280
are doing 24 by 7 support and then we

00:01:22,640 --> 00:01:27,119
shifted

00:01:23,280 --> 00:01:30,240
our career to um system

00:01:27,119 --> 00:01:32,560
administrator system developers in 2015

00:01:30,240 --> 00:01:34,560
will be moved to czech republic

00:01:32,560 --> 00:01:36,320
and there we learned about system

00:01:34,560 --> 00:01:40,720
operation rachelle was doing

00:01:36,320 --> 00:01:44,240
product scheduling with tws and

00:01:40,720 --> 00:01:44,960
we continuously improve our our skills

00:01:44,240 --> 00:01:46,880
there

00:01:44,960 --> 00:01:49,600
and currently we're now working for

00:01:46,880 --> 00:01:52,799
broadcom and we started there at 2000 we

00:01:49,600 --> 00:01:53,360
started working there in 2017 where we

00:01:52,799 --> 00:01:55,360
are now

00:01:53,360 --> 00:01:57,280
modern mainframe developers meaning

00:01:55,360 --> 00:02:01,759
we're using modern tooling

00:01:57,280 --> 00:02:04,240
and integrating it with mainframe

00:02:01,759 --> 00:02:06,479
yeah so as you mentioned we only just

00:02:04,240 --> 00:02:09,119
really started with this modern two sets

00:02:06,479 --> 00:02:12,239
when we moved to prague into broadcom

00:02:09,119 --> 00:02:15,680
so this is our typical day

00:02:12,239 --> 00:02:16,800
before all of that happened so we would

00:02:15,680 --> 00:02:19,280
be

00:02:16,800 --> 00:02:20,080
i would be this person and i would use

00:02:19,280 --> 00:02:22,800
ispf

00:02:20,080 --> 00:02:24,319
and 3270 screens to access mainframe and

00:02:22,800 --> 00:02:26,560
mainframe native tools

00:02:24,319 --> 00:02:27,520
we were developing legacy applications

00:02:26,560 --> 00:02:29,599
in the financial

00:02:27,520 --> 00:02:31,360
industry and we were required to use a

00:02:29,599 --> 00:02:34,640
specific and limited set

00:02:31,360 --> 00:02:36,480
of tools and this has to be approved so

00:02:34,640 --> 00:02:37,840
we have to use this approved set of

00:02:36,480 --> 00:02:41,120
tools for everything for

00:02:37,840 --> 00:02:43,360
code editing for source control

00:02:41,120 --> 00:02:45,440
for compiling and another thing was

00:02:43,360 --> 00:02:46,480
there is a static development pipeline

00:02:45,440 --> 00:02:49,680
meaning there's

00:02:46,480 --> 00:02:51,760
very little room to have

00:02:49,680 --> 00:02:53,680
any innovation in terms of the

00:02:51,760 --> 00:02:56,560
development pipeline

00:02:53,680 --> 00:02:57,280
and i felt like developing nzs was a

00:02:56,560 --> 00:03:00,080
pretty

00:02:57,280 --> 00:03:01,120
isolated environment there's a limited

00:03:00,080 --> 00:03:03,280
collaboration between

00:03:01,120 --> 00:03:06,080
different silos inside the organization

00:03:03,280 --> 00:03:08,959
for example in build and deployment

00:03:06,080 --> 00:03:10,800
i don't usually know what the other

00:03:08,959 --> 00:03:13,440
departments are doing so if i

00:03:10,800 --> 00:03:14,560
finish my coding i would hand it over to

00:03:13,440 --> 00:03:15,599
some other team

00:03:14,560 --> 00:03:18,480
and they would do the build and

00:03:15,599 --> 00:03:20,560
deployment for me so that's transparent

00:03:18,480 --> 00:03:23,840
to me as an application developer

00:03:20,560 --> 00:03:27,799
yeah and to give you a glimpse of how

00:03:23,840 --> 00:03:28,959
is it like to to develop programs in

00:03:27,799 --> 00:03:31,599
00:03:28,959 --> 00:03:33,120
we're showing you this demo so today

00:03:31,599 --> 00:03:35,840
we're going to create

00:03:33,120 --> 00:03:36,799
our kovi 19 report where the data that

00:03:35,840 --> 00:03:38,799
we have extracted

00:03:36,799 --> 00:03:40,280
from the internet was transferred to a

00:03:38,799 --> 00:03:42,640
data set called

00:03:40,280 --> 00:03:43,599
govit.global so here i'm showing that to

00:03:42,640 --> 00:03:45,200
you

00:03:43,599 --> 00:03:47,599
first off what i'm going to do is i'm

00:03:45,200 --> 00:03:52,319
gonna check my global program

00:03:47,599 --> 00:03:53,840
so i'm gonna open a global program and

00:03:52,319 --> 00:03:55,519
oh i'm gonna check the contents but

00:03:53,840 --> 00:03:56,640
before everything else i'm gonna put my

00:03:55,519 --> 00:03:58,879
highlighting on

00:03:56,640 --> 00:04:01,680
which is one of the important stuff that

00:03:58,879 --> 00:04:05,439
i do as a hubble developer

00:04:01,680 --> 00:04:07,439
and then um i'm gonna put

00:04:05,439 --> 00:04:08,560
my scroll as well and then i'm gonna

00:04:07,439 --> 00:04:11,760
check what is in

00:04:08,560 --> 00:04:13,599
in in my working area so i have this and

00:04:11,760 --> 00:04:14,879
string copied records this is the data

00:04:13,599 --> 00:04:17,120
that i need

00:04:14,879 --> 00:04:18,959
i have my main steps which is opening

00:04:17,120 --> 00:04:21,199
files first

00:04:18,959 --> 00:04:22,720
i have my initialization i have my

00:04:21,199 --> 00:04:26,560
reading step

00:04:22,720 --> 00:04:28,080
and then i have a process files as well

00:04:26,560 --> 00:04:29,040
and in the process what i'm going to do

00:04:28,080 --> 00:04:31,280
is i'm going to string

00:04:29,040 --> 00:04:33,440
all the records and put it into the

00:04:31,280 --> 00:04:35,360
specific data set and then after that or

00:04:33,440 --> 00:04:37,040
the specific

00:04:35,360 --> 00:04:38,479
variables and then after that i'm going

00:04:37,040 --> 00:04:42,800
to display it

00:04:38,479 --> 00:04:44,479
after that one i'm going to open my jcl

00:04:42,800 --> 00:04:46,080
so i'm going to look out where's my g

00:04:44,479 --> 00:04:47,360
cell here so here it is i'm going to

00:04:46,080 --> 00:04:50,639
browse it

00:04:47,360 --> 00:04:51,680
um i'm going to check what it is or i'm

00:04:50,639 --> 00:04:55,040
going to check

00:04:51,680 --> 00:04:56,720
if it's correct oh maybe i i will change

00:04:55,040 --> 00:05:00,720
my mind i will i will

00:04:56,720 --> 00:05:03,759
i will edit it first and i will verify

00:05:00,720 --> 00:05:05,840
hey is it is it okay so

00:05:03,759 --> 00:05:07,840
here i will check all right i have my

00:05:05,840 --> 00:05:09,280
compiler program so this is the program

00:05:07,840 --> 00:05:10,320
that i'm gonna compile i'm gonna put it

00:05:09,280 --> 00:05:12,560
in this load

00:05:10,320 --> 00:05:13,520
and then i'm gonna run it using the

00:05:12,560 --> 00:05:16,800
input file

00:05:13,520 --> 00:05:17,840
that we have verified earlier and then

00:05:16,800 --> 00:05:19,759
i'm gonna click sub

00:05:17,840 --> 00:05:22,080
and with the command sub it says

00:05:19,759 --> 00:05:25,680
submitted and then the job id

00:05:22,080 --> 00:05:26,320
was given to me after that one if i

00:05:25,680 --> 00:05:28,639
press enter

00:05:26,320 --> 00:05:30,080
you have seen that there's this return

00:05:28,639 --> 00:05:31,199
code that was given and then i'm gonna

00:05:30,080 --> 00:05:34,560
go to sdsf

00:05:31,199 --> 00:05:36,960
and check the output of my

00:05:34,560 --> 00:05:38,240
job submission so i have my job id i'm

00:05:36,960 --> 00:05:41,759
going to browse it

00:05:38,240 --> 00:05:44,880
i'm going to check um the message log

00:05:41,759 --> 00:05:45,759
if everything was rc0 or rc4 and then

00:05:44,880 --> 00:05:48,960
i'm going to check my

00:05:45,759 --> 00:05:51,039
output so here you can see that hey

00:05:48,960 --> 00:05:52,800
i have my output data set and it's

00:05:51,039 --> 00:05:55,600
displayed correctly

00:05:52,800 --> 00:05:57,919
and this is our typical day as a kabul

00:05:55,600 --> 00:06:00,560
developer before

00:05:57,919 --> 00:06:02,319
but how can we improve this experience

00:06:00,560 --> 00:06:07,199
honestly discovering zoe

00:06:02,319 --> 00:06:10,479
was a game changer for us

00:06:07,199 --> 00:06:12,479
so then let's talk about how zoe is

00:06:10,479 --> 00:06:15,680
related to mainframe development

00:06:12,479 --> 00:06:18,800
so in this case as a developer

00:06:15,680 --> 00:06:21,919
i use zoe as the modern mainframe bridge

00:06:18,800 --> 00:06:25,120
and it makes my development easy

00:06:21,919 --> 00:06:27,039
and i just use tools that i

00:06:25,120 --> 00:06:28,160
already use in some other programming

00:06:27,039 --> 00:06:29,600
languages but

00:06:28,160 --> 00:06:32,000
at the same time i can connect to

00:06:29,600 --> 00:06:35,520
mainframe via zoe because

00:06:32,000 --> 00:06:37,759
it it exposed cli

00:06:35,520 --> 00:06:39,199
apis but still i can use the mainframe

00:06:37,759 --> 00:06:41,840
security

00:06:39,199 --> 00:06:42,479
and really it's it makes mainframe

00:06:41,840 --> 00:06:46,000
development

00:06:42,479 --> 00:06:47,919
non-prescript prescriptive it i can use

00:06:46,000 --> 00:06:49,919
my tools of choice i'm not limited to

00:06:47,919 --> 00:06:51,360
just modern tools i can also use still

00:06:49,919 --> 00:06:54,639
30 to 70.

00:06:51,360 --> 00:06:57,199
um but i can also use some other

00:06:54,639 --> 00:06:58,080
tools out there like as we said this

00:06:57,199 --> 00:07:00,960
open source

00:06:58,080 --> 00:07:02,720
tools that are available now and still i

00:07:00,960 --> 00:07:06,479
can maintain industry standards

00:07:02,720 --> 00:07:06,479
while working on the mainframe

00:07:06,639 --> 00:07:13,120
so we're going to show you how

00:07:10,479 --> 00:07:13,520
we are going to use zoe to integrate it

00:07:13,120 --> 00:07:17,039
in our

00:07:13,520 --> 00:07:18,720
day-to-day activities so today i'm going

00:07:17,039 --> 00:07:21,039
to show you the same

00:07:18,720 --> 00:07:22,160
task we're going to create a copy 19

00:07:21,039 --> 00:07:24,960
reports

00:07:22,160 --> 00:07:26,080
but now we're going to use modern

00:07:24,960 --> 00:07:28,960
tooling

00:07:26,080 --> 00:07:30,080
and instead of ftping the data we're

00:07:28,960 --> 00:07:32,479
gonna start

00:07:30,080 --> 00:07:34,800
with writing another programming

00:07:32,479 --> 00:07:36,080
language which is typescript to extract

00:07:34,800 --> 00:07:38,479
the data

00:07:36,080 --> 00:07:40,000
so in here i have my parse program and

00:07:38,479 --> 00:07:44,000
in this parse program

00:07:40,000 --> 00:07:46,720
i'm using typescript to fire that api

00:07:44,000 --> 00:07:48,560
and get it from get the information from

00:07:46,720 --> 00:07:54,080
the api and then write it

00:07:48,560 --> 00:07:57,280
in an output file called countries.txt

00:07:54,080 --> 00:07:59,759
so i'm gonna paste that api and then

00:07:57,280 --> 00:08:00,879
after that one i'm gonna run my npm

00:07:59,759 --> 00:08:03,680
script

00:08:00,879 --> 00:08:05,599
which is um executing the typescript

00:08:03,680 --> 00:08:08,240
program that i have so i call

00:08:05,599 --> 00:08:10,400
i call that script parse and i'm gonna

00:08:08,240 --> 00:08:11,520
do it via vs code and i'm gonna click

00:08:10,400 --> 00:08:13,599
this

00:08:11,520 --> 00:08:15,680
button called run and it will run

00:08:13,599 --> 00:08:16,879
automatically the typescript program

00:08:15,680 --> 00:08:19,599
that i have

00:08:16,879 --> 00:08:22,080
to extract that covid19 results and put

00:08:19,599 --> 00:08:23,360
it in a file called countries.txt so i'm

00:08:22,080 --> 00:08:26,639
gonna

00:08:23,360 --> 00:08:27,919
i'm gonna click that um file i'm gonna

00:08:26,639 --> 00:08:31,520
find that file and then

00:08:27,919 --> 00:08:33,680
click that open so see it was extracted

00:08:31,520 --> 00:08:34,240
automatically by just one click of a

00:08:33,680 --> 00:08:36,560
button

00:08:34,240 --> 00:08:37,599
and then after that one i wanted to

00:08:36,560 --> 00:08:40,240
upload it

00:08:37,599 --> 00:08:41,919
in uh in an input file but this time i'm

00:08:40,240 --> 00:08:44,720
gonna use a different

00:08:41,919 --> 00:08:46,720
input file so i'm gonna open my zoe

00:08:44,720 --> 00:08:48,399
explorer and i'm gonna search for all of

00:08:46,720 --> 00:08:51,760
the data set that i have

00:08:48,399 --> 00:08:54,080
under my id so i have my profile there i

00:08:51,760 --> 00:08:55,360
search for my data set and then here i

00:08:54,080 --> 00:08:57,920
have my input

00:08:55,360 --> 00:08:59,279
the input data set and i'm gonna what

00:08:57,920 --> 00:09:02,800
i'm going to do

00:08:59,279 --> 00:09:03,440
is i i would want to transfer the data

00:09:02,800 --> 00:09:05,839
from the

00:09:03,440 --> 00:09:07,600
extracted data to my data set so i'm

00:09:05,839 --> 00:09:08,480
just gonna highlight all of these and

00:09:07,600 --> 00:09:11,120
then

00:09:08,480 --> 00:09:12,480
copy it and then after that i'm gonna go

00:09:11,120 --> 00:09:14,560
back to zoe explorer

00:09:12,480 --> 00:09:16,240
open that data set and then paste the

00:09:14,560 --> 00:09:20,320
data if i

00:09:16,240 --> 00:09:22,800
hit control s it will automatically

00:09:20,320 --> 00:09:24,959
save that data saving that data and

00:09:22,800 --> 00:09:26,560
upload it into mainframe and now it's

00:09:24,959 --> 00:09:28,800
there so if i close it

00:09:26,560 --> 00:09:30,640
try to open it again the data is already

00:09:28,800 --> 00:09:32,800
in mainframe

00:09:30,640 --> 00:09:33,760
and then after that one what i'm going

00:09:32,800 --> 00:09:37,760
to do

00:09:33,760 --> 00:09:39,360
is i'm gonna i'm gonna open my global

00:09:37,760 --> 00:09:41,120
program so as same as before

00:09:39,360 --> 00:09:42,640
i'm gonna open my global program i'm

00:09:41,120 --> 00:09:45,600
gonna check it

00:09:42,640 --> 00:09:47,200
oh um it's already have the highlighting

00:09:45,600 --> 00:09:49,040
because i already have installed those

00:09:47,200 --> 00:09:50,240
extensions that highlight a couple

00:09:49,040 --> 00:09:54,320
program

00:09:50,240 --> 00:09:55,279
and then i will i will open my gcl as

00:09:54,320 --> 00:09:57,839
well

00:09:55,279 --> 00:09:59,519
i already have this highlighting so i

00:09:57,839 --> 00:10:02,240
know that it's

00:09:59,519 --> 00:10:04,000
it's correct i replace the input data

00:10:02,240 --> 00:10:05,360
that i have because it was written in a

00:10:04,000 --> 00:10:08,240
different data set so

00:10:05,360 --> 00:10:10,079
i copy pasted that and then saved it so

00:10:08,240 --> 00:10:11,519
that i know that it's gonna be okay

00:10:10,079 --> 00:10:13,920
and then after that i'll click right

00:10:11,519 --> 00:10:16,560
click and submit job

00:10:13,920 --> 00:10:18,399
and then as you can see there's a job id

00:10:16,560 --> 00:10:20,880
here if i click that job id

00:10:18,399 --> 00:10:23,279
it's there's an api fire to extract all

00:10:20,880 --> 00:10:24,720
the output and put it here in my vs code

00:10:23,279 --> 00:10:28,320
explorer under jobs

00:10:24,720 --> 00:10:30,399
if i click this one you can see that hey

00:10:28,320 --> 00:10:32,320
i have my message log and i have my

00:10:30,399 --> 00:10:33,040
output and as you can see similar to

00:10:32,320 --> 00:10:37,360
before

00:10:33,040 --> 00:10:39,760
i have my my data written in the output

00:10:37,360 --> 00:10:42,079
but you know it doesn't stop there since

00:10:39,760 --> 00:10:44,959
i i've shown you that i can run npm

00:10:42,079 --> 00:10:46,079
scripts what i'm going to do is to use

00:10:44,959 --> 00:10:48,240
zoe cli

00:10:46,079 --> 00:10:50,160
and fire several scripts as well similar

00:10:48,240 --> 00:10:52,000
to what i have done manually

00:10:50,160 --> 00:10:54,480
so that i could have this one build

00:10:52,000 --> 00:10:57,600
process i'm gonna have this

00:10:54,480 --> 00:11:00,640
i um i'm gonna run the parsing

00:10:57,600 --> 00:11:03,200
i'm gonna have this allocate upload in

00:11:00,640 --> 00:11:05,600
input file i'm going to submit my gcl

00:11:03,200 --> 00:11:09,200
and all of these are zoe cli commands

00:11:05,600 --> 00:11:09,839
that i can fire through npm and so i

00:11:09,200 --> 00:11:12,800
will have

00:11:09,839 --> 00:11:13,760
all of these commands in one single

00:11:12,800 --> 00:11:16,480
execution

00:11:13,760 --> 00:11:18,240
called the cobble challenge i'm gonna up

00:11:16,480 --> 00:11:22,399
write that one like npm run

00:11:18,240 --> 00:11:25,519
upload data and then after that one

00:11:22,399 --> 00:11:27,680
i'm gonna similar to the parsing um

00:11:25,519 --> 00:11:29,440
button i'm gonna look for it here in the

00:11:27,680 --> 00:11:31,680
npm script

00:11:29,440 --> 00:11:31,680
tab

00:11:33,839 --> 00:11:37,920
so i'm just validating um all of my

00:11:36,640 --> 00:11:40,480
scripts are

00:11:37,920 --> 00:11:41,760
okay and then if i'm ready i'm gonna

00:11:40,480 --> 00:11:42,000
search for it and then i'm just gonna

00:11:41,760 --> 00:11:44,640
click

00:11:42,000 --> 00:11:45,279
run if i click run automatically all of

00:11:44,640 --> 00:11:48,640
these

00:11:45,279 --> 00:11:50,880
commands are executed for me and

00:11:48,640 --> 00:11:51,839
i don't have to do anything i i have

00:11:50,880 --> 00:11:54,800
this one build

00:11:51,839 --> 00:11:56,079
process that is ready for me to try out

00:11:54,800 --> 00:11:59,200
to test

00:11:56,079 --> 00:12:01,120
and to submit over and over again and

00:11:59,200 --> 00:12:02,720
the beauty of this one is that the cli

00:12:01,120 --> 00:12:05,600
command also has

00:12:02,720 --> 00:12:06,320
this ability to submit and download the

00:12:05,600 --> 00:12:09,360
output

00:12:06,320 --> 00:12:10,880
on my local machine so after it

00:12:09,360 --> 00:12:13,120
submitted the job it will give you a

00:12:10,880 --> 00:12:15,120
note id and it will automatically write

00:12:13,120 --> 00:12:17,279
it into a directory that you have

00:12:15,120 --> 00:12:18,160
specified so for me i specified it in

00:12:17,279 --> 00:12:19,839
output

00:12:18,160 --> 00:12:21,920
i'm gonna search for the output folder

00:12:19,839 --> 00:12:24,399
and check on that job id

00:12:21,920 --> 00:12:25,279
and then i'm gonna click on the sys out

00:12:24,399 --> 00:12:28,480
and see

00:12:25,279 --> 00:12:30,160
that i similar to what i have submitted

00:12:28,480 --> 00:12:32,320
in zoe explorer

00:12:30,160 --> 00:12:35,519
i have it as well in my machine through

00:12:32,320 --> 00:12:35,519
zoe cli commands

00:12:35,839 --> 00:12:40,000
so we have shown you how we were able to

00:12:38,160 --> 00:12:41,200
automate our tasks as application

00:12:40,000 --> 00:12:43,760
developers

00:12:41,200 --> 00:12:44,880
so now i want to share with you how we

00:12:43,760 --> 00:12:48,480
imagine we will use

00:12:44,880 --> 00:12:51,600
zoe as system operators

00:12:48,480 --> 00:12:55,120
so what we built was an extension

00:12:51,600 --> 00:12:59,839
of zoe cli called zoe

00:12:55,120 --> 00:13:03,120
system utilities plugin or sup for short

00:12:59,839 --> 00:13:06,240
and this plugin just allows us to

00:13:03,120 --> 00:13:08,560
automate daily tasks repetitive

00:13:06,240 --> 00:13:09,760
tasks on the mainframe in an automation

00:13:08,560 --> 00:13:13,519
automated fashion

00:13:09,760 --> 00:13:16,560
so we built this just using the zoe cli

00:13:13,519 --> 00:13:20,320
sample plugin and we did

00:13:16,560 --> 00:13:23,040
two types of commands so one is

00:13:20,320 --> 00:13:24,079
handling file transmission between lpars

00:13:23,040 --> 00:13:27,760
and the other

00:13:24,079 --> 00:13:31,040
is handles the processing of user ids

00:13:27,760 --> 00:13:33,279
which means creation of user ids

00:13:31,040 --> 00:13:34,160
editing deleting which are our usual

00:13:33,279 --> 00:13:37,920
tasks

00:13:34,160 --> 00:13:40,639
or usual tickets that we received as

00:13:37,920 --> 00:13:41,040
an operator so the way that this works

00:13:40,639 --> 00:13:44,000
is

00:13:41,040 --> 00:13:44,639
if you have already jcls in your library

00:13:44,000 --> 00:13:46,880
that you

00:13:44,639 --> 00:13:48,480
use daily or you already know that it

00:13:46,880 --> 00:13:50,480
works and it's according to the

00:13:48,480 --> 00:13:53,199
standards of your company

00:13:50,480 --> 00:13:55,360
then you can use this plugin to

00:13:53,199 --> 00:13:58,399
parameterize that jcl

00:13:55,360 --> 00:13:59,440
and use a config file to substitute the

00:13:58,399 --> 00:14:02,480
values

00:13:59,440 --> 00:14:03,279
based on cli parameters so in this case

00:14:02,480 --> 00:14:06,639
i have

00:14:03,279 --> 00:14:10,160
prepared rack up jcl to create

00:14:06,639 --> 00:14:12,959
a user id so i already have

00:14:10,160 --> 00:14:16,320
i already know that i need user id and

00:14:12,959 --> 00:14:19,440
some sysex libraries that are based on

00:14:16,320 --> 00:14:19,440
my company standards

00:14:19,600 --> 00:14:22,880
so i just need to substitute these

00:14:21,120 --> 00:14:26,000
values in the command line

00:14:22,880 --> 00:14:29,120
or in my config file

00:14:26,000 --> 00:14:31,040
to get them from the defaults so the

00:14:29,120 --> 00:14:32,160
defaults could be set in this config

00:14:31,040 --> 00:14:35,360
file for example

00:14:32,160 --> 00:14:36,000
even the job card descriptions i could

00:14:35,360 --> 00:14:39,120
set them

00:14:36,000 --> 00:14:42,720
since i know that it's my jcl

00:14:39,120 --> 00:14:43,279
i can set up ombs dso defaults for

00:14:42,720 --> 00:14:46,160
myself

00:14:43,279 --> 00:14:46,880
and i can even specify which security

00:14:46,160 --> 00:14:49,760
system

00:14:46,880 --> 00:14:51,120
my helper is running on so all i need to

00:14:49,760 --> 00:14:54,240
do

00:14:51,120 --> 00:14:58,000
is to run the command zoe sup

00:14:54,240 --> 00:15:00,959
and then the group user

00:14:58,000 --> 00:15:02,880
create is the command i just need to

00:15:00,959 --> 00:15:04,079
specify the user id that i want to

00:15:02,880 --> 00:15:06,480
create

00:15:04,079 --> 00:15:08,720
and where i want to create them which l

00:15:06,480 --> 00:15:08,720
bar

00:15:08,880 --> 00:15:17,680
so what that will do is to substitute

00:15:13,519 --> 00:15:17,680
the values in in this jcl

00:15:19,600 --> 00:15:28,240
and submit the job

00:15:26,160 --> 00:15:29,920
so that the build file will be created

00:15:28,240 --> 00:15:31,920
which is the json that has already been

00:15:29,920 --> 00:15:33,279
substituted so i can even check the jcl

00:15:31,920 --> 00:15:36,079
that i submitted

00:15:33,279 --> 00:15:36,800
but the real value of this plugin is

00:15:36,079 --> 00:15:40,880
that if

00:15:36,800 --> 00:15:43,759
in case i receive a file such as this

00:15:40,880 --> 00:15:44,480
and it just contains a list of the ids

00:15:43,759 --> 00:15:46,079
that i

00:15:44,480 --> 00:15:48,639
need to create and where i need to

00:15:46,079 --> 00:15:52,000
create them i can

00:15:48,639 --> 00:15:54,480
use any i can create any script

00:15:52,000 --> 00:15:55,040
and use that command whether that's by a

00:15:54,480 --> 00:15:59,360
bash

00:15:55,040 --> 00:16:02,079
or via python i can automate this and

00:15:59,360 --> 00:16:03,360
do the same command and issue the same

00:16:02,079 --> 00:16:06,399
command

00:16:03,360 --> 00:16:08,000
but using an automated script so since i

00:16:06,399 --> 00:16:09,519
know that the jcl works

00:16:08,000 --> 00:16:11,839
and that the plugin works with my

00:16:09,519 --> 00:16:13,519
configuration so i can automate this

00:16:11,839 --> 00:16:15,519
task and if i receive

00:16:13,519 --> 00:16:18,000
a ticket for example from servicenow i

00:16:15,519 --> 00:16:20,079
can just plug in this details here and

00:16:18,000 --> 00:16:22,240
it would automatically make the ids for

00:16:20,079 --> 00:16:25,440
me i don't have to think of

00:16:22,240 --> 00:16:26,720
all the different security commands per

00:16:25,440 --> 00:16:30,560
id that i will create

00:16:26,720 --> 00:16:33,120
so i can do that just by executing the

00:16:30,560 --> 00:16:33,120
javascript

00:16:34,240 --> 00:16:39,360
and as you can see it will issue the

00:16:36,560 --> 00:16:42,320
same commands that i

00:16:39,360 --> 00:16:43,040
already used earlier and it's just

00:16:42,320 --> 00:16:45,680
issuing them

00:16:43,040 --> 00:16:47,680
on different helpers again this is just

00:16:45,680 --> 00:16:50,000
one way of automating this you can also

00:16:47,680 --> 00:16:54,079
use vs code tasks for example

00:16:50,000 --> 00:16:57,680
you can use gob npm scripts

00:16:54,079 --> 00:17:01,120
so the value is really to find out what

00:16:57,680 --> 00:17:06,000
data set you want to auto and use this

00:17:01,120 --> 00:17:06,000
all of these tools and apis that zoe is

00:17:06,480 --> 00:17:10,640
so that was just one use case as

00:17:08,400 --> 00:17:11,679
production control i usually receive a

00:17:10,640 --> 00:17:13,360
bunch of requests

00:17:11,679 --> 00:17:14,720
to receive and transfer files from one

00:17:13,360 --> 00:17:17,760
helper to another

00:17:14,720 --> 00:17:18,000
so i thought why not add this command to

00:17:17,760 --> 00:17:21,199
the

00:17:18,000 --> 00:17:23,520
system utilities plugin as well so it's

00:17:21,199 --> 00:17:25,360
the same concept i have a bunch of jsons

00:17:23,520 --> 00:17:27,280
that i already know is working

00:17:25,360 --> 00:17:29,120
and it's already parameterized based on

00:17:27,280 --> 00:17:33,039
my company standards

00:17:29,120 --> 00:17:38,320
so i can set up my defaults and then

00:17:33,039 --> 00:17:38,320
all i need to do is type the command

00:17:39,120 --> 00:17:43,039
so in this case i have i'm using zoe svp

00:17:42,480 --> 00:17:45,919
files

00:17:43,039 --> 00:17:48,080
instead of user the command is transfer

00:17:45,919 --> 00:17:50,880
and i just need to specify

00:17:48,080 --> 00:17:50,880
the in file

00:17:51,520 --> 00:17:54,720
so i want to use my

00:17:55,440 --> 00:17:58,000
data set

00:17:59,520 --> 00:18:05,520
carry the test

00:18:02,799 --> 00:18:06,960
in file and then i want to specify the

00:18:05,520 --> 00:18:09,280
out file

00:18:06,960 --> 00:18:11,360
to make it easier i will make the same

00:18:09,280 --> 00:18:15,840
almost the same

00:18:11,360 --> 00:18:18,080
query test

00:18:15,840 --> 00:18:19,200
out file and then i want to specify the

00:18:18,080 --> 00:18:21,919
l bar

00:18:19,200 --> 00:18:21,919
to transfer it

00:18:27,280 --> 00:18:31,280
and i can even override my user id

00:18:35,919 --> 00:18:40,840
so that job will submit so it already

00:18:38,559 --> 00:18:44,640
substituted all the values that i

00:18:40,840 --> 00:18:48,240
needs and i can see it in

00:18:44,640 --> 00:18:48,240
the build and as well as in

00:18:48,720 --> 00:18:55,039
the spool it just use my regular x-men

00:18:52,960 --> 00:18:57,200
gcl

00:18:55,039 --> 00:18:58,320
and again the value of this is that if i

00:18:57,200 --> 00:19:02,080
receive this

00:18:58,320 --> 00:19:04,000
file which contains the id to use

00:19:02,080 --> 00:19:05,440
which output i need to transfer files

00:19:04,000 --> 00:19:08,160
from which files

00:19:05,440 --> 00:19:08,799
is the input which file is the receiving

00:19:08,160 --> 00:19:12,640
end

00:19:08,799 --> 00:19:15,600
then i can just make a script out of it

00:19:12,640 --> 00:19:17,280
use that same cli command and automate

00:19:15,600 --> 00:19:19,039
this task

00:19:17,280 --> 00:19:20,480
so this is the script and i'm just using

00:19:19,039 --> 00:19:23,600
that same command

00:19:20,480 --> 00:19:25,360
to transfer files so i will go to my

00:19:23,600 --> 00:19:29,600
scripts folder

00:19:25,360 --> 00:19:32,720
and i will just issue the shell script

00:19:29,600 --> 00:19:33,520
and it one by one will issue the cli

00:19:32,720 --> 00:19:35,520
command

00:19:33,520 --> 00:19:36,960
based on the parameters that i specified

00:19:35,520 --> 00:19:39,760
on my input file

00:19:36,960 --> 00:19:40,400
again i can customize this based on what

00:19:39,760 --> 00:19:42,960
usually

00:19:40,400 --> 00:19:45,360
is in the ticket and i can automate that

00:19:42,960 --> 00:19:45,360
as well

00:19:46,320 --> 00:19:53,120
so that's our system utilities plugin

00:19:49,919 --> 00:19:54,880
so looking back if i had all these tools

00:19:53,120 --> 00:19:56,640
available to me before

00:19:54,880 --> 00:19:58,480
i would have been far less intimidated

00:19:56,640 --> 00:20:01,280
working on the mainframe

00:19:58,480 --> 00:20:03,440
and the next generation of developers

00:20:01,280 --> 00:20:05,600
would be the same they have this new

00:20:03,440 --> 00:20:06,720
knowledge and perspectives but there is

00:20:05,600 --> 00:20:10,799
a hesitation

00:20:06,720 --> 00:20:13,120
or fear of working with the mainframe so

00:20:10,799 --> 00:20:14,559
in our next session zoe out interactive

00:20:13,120 --> 00:20:16,400
learning experience we

00:20:14,559 --> 00:20:18,159
proposed this idea of combining

00:20:16,400 --> 00:20:19,280
mainframe technology and modern

00:20:18,159 --> 00:20:21,760
technology

00:20:19,280 --> 00:20:24,000
to have this interactive learning

00:20:21,760 --> 00:20:26,880
experience to help this new generation

00:20:24,000 --> 00:20:26,880
of mainframers

00:20:27,760 --> 00:20:30,799
so to summarize it all because we

00:20:30,080 --> 00:20:33,520
adopted

00:20:30,799 --> 00:20:34,240
zoe we can create scripts to automate

00:20:33,520 --> 00:20:36,640
repetitive

00:20:34,240 --> 00:20:38,880
tasks that we know we normally do daily

00:20:36,640 --> 00:20:42,400
like four hours of manual work

00:20:38,880 --> 00:20:44,799
was reduced to trimets we can upscale

00:20:42,400 --> 00:20:46,480
ourselves definitely with modern

00:20:44,799 --> 00:20:49,679
programming languages

00:20:46,480 --> 00:20:50,880
we can apply the tools of choice for zls

00:20:49,679 --> 00:20:53,039
development

00:20:50,880 --> 00:20:54,799
and we have an easier interaction with

00:20:53,039 --> 00:20:56,720
mainframe while maintaining

00:20:54,799 --> 00:20:58,000
industry standards and that's very

00:20:56,720 --> 00:21:00,320
important

00:20:58,000 --> 00:21:02,400
and lastly we have more control over the

00:21:00,320 --> 00:21:05,200
development workflow timeline

00:21:02,400 --> 00:21:07,200
so for example if there's a one week of

00:21:05,200 --> 00:21:09,120
build and deployment work

00:21:07,200 --> 00:21:11,919
depending on other teams like what you

00:21:09,120 --> 00:21:13,760
said before it can be reduced to one day

00:21:11,919 --> 00:21:16,559
because we have an automated

00:21:13,760 --> 00:21:17,280
continuous integration for me adopting

00:21:16,559 --> 00:21:19,360
zoe

00:21:17,280 --> 00:21:21,600
as a modern mainframe developer doesn't

00:21:19,360 --> 00:21:24,000
just mean using open source tools

00:21:21,600 --> 00:21:24,880
it also means being open to new

00:21:24,000 --> 00:21:27,360
processes

00:21:24,880 --> 00:21:29,280
being open to new programming languages

00:21:27,360 --> 00:21:31,280
and it's not enough to just settle with

00:21:29,280 --> 00:21:33,360
what is traditionally used

00:21:31,280 --> 00:21:34,799
and there's this collaboration between

00:21:33,360 --> 00:21:37,520
existing and new

00:21:34,799 --> 00:21:40,159
and for me that makes it an exciting

00:21:37,520 --> 00:21:42,480
time to be a mainframe developer

00:21:40,159 --> 00:21:44,080
i agree but we also know that sometimes

00:21:42,480 --> 00:21:47,440
it is hard to

00:21:44,080 --> 00:21:48,640
initiate new processes and broadcom can

00:21:47,440 --> 00:21:51,679
help you get started

00:21:48,640 --> 00:21:53,360
in your devops journey so if you and

00:21:51,679 --> 00:21:56,720
your team would like to know more

00:21:53,360 --> 00:21:56,720
just let us know and we can help

00:21:57,280 --> 00:22:03,039
so that's it for us thank you and i hope

00:21:59,280 --> 00:22:03,039

YouTube URL: https://www.youtube.com/watch?v=6mLvVNYuyp8


