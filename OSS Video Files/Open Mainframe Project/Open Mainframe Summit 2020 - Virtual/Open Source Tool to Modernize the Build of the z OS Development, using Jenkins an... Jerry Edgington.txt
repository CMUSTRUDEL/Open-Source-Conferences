Title: Open Source Tool to Modernize the Build of the z OS Development, using Jenkins an... Jerry Edgington
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Open Source Tool to Modernize the Build of the z/OS Development, using Jenkins and Git - Jerry Edgington, Western & Southern Financial Group

Polycephaly is intended to be a key technology in expanding access to mainframes. The name comes from the Greek word meaning “a condition of having more than one head,” because the project marries two different development life cycle methodologies, distributed and z/OS. Polycephaly requires minimal z/OS system programming, and provides flexible development paths and options, moving from linear to non-linear development. It removes the need for separate development paths for distributed and z/OS workloads. Developers can develop on any platform, store to Git and Jenkins to deploy. Plus it has all the benefits of the 1000+ Jenkins plugins, The OMP Polycephaly is a set of Groovy scripts, building upon IBM DBB technology, in an effort to jump start and aid conversion to Jenkins and Git
Captions: 
	00:00:00,080 --> 00:00:03,919
hello everyone and welcome to the open

00:00:01,839 --> 00:00:05,200
source tools using open source tools to

00:00:03,919 --> 00:00:06,960
modernize the build of the os

00:00:05,200 --> 00:00:09,519
applications

00:00:06,960 --> 00:00:11,360
this is a open mainframe project called

00:00:09,519 --> 00:00:12,719
polycephaly we're going to go over the

00:00:11,360 --> 00:00:14,400
materials

00:00:12,719 --> 00:00:16,400
at the end there'll be a live question

00:00:14,400 --> 00:00:17,840
and answer so if you have any questions

00:00:16,400 --> 00:00:19,760
please feel free to ask at that time

00:00:17,840 --> 00:00:22,240
i'll be on to answer those

00:00:19,760 --> 00:00:24,080
um a little bit about me real quick my

00:00:22,240 --> 00:00:26,320
name is jerry edgington i work for the

00:00:24,080 --> 00:00:28,560
western southern financial group i have

00:00:26,320 --> 00:00:31,119
been a zoo assistance programmer

00:00:28,560 --> 00:00:31,840
for 30 almost 35 years i've been doing

00:00:31,119 --> 00:00:33,920
linux

00:00:31,840 --> 00:00:36,480
admin work system admin work for almost

00:00:33,920 --> 00:00:38,480
25 years

00:00:36,480 --> 00:00:40,480
so i'm on the system side of the house

00:00:38,480 --> 00:00:42,160
not the application side so

00:00:40,480 --> 00:00:43,680
developing these kind of tools i was

00:00:42,160 --> 00:00:46,079
trying to figure out how to get

00:00:43,680 --> 00:00:47,280
you know those kind of uh take into that

00:00:46,079 --> 00:00:48,640
account as far as

00:00:47,280 --> 00:00:50,559
what's systems programmers times and

00:00:48,640 --> 00:00:52,800
i'll get into that more also i'll tell

00:00:50,559 --> 00:00:54,640
you where the name polycephaly came from

00:00:52,800 --> 00:00:56,320
because i know it sounds like a disease

00:00:54,640 --> 00:00:57,920
i haven't heard that a lot but

00:00:56,320 --> 00:01:00,879
this is we'll go into that in a little

00:00:57,920 --> 00:01:02,559
bit um

00:01:00,879 --> 00:01:03,920
so first thing is western southern

00:01:02,559 --> 00:01:06,799
financial group disclaimer

00:01:03,920 --> 00:01:08,560
this is basically just saying that

00:01:06,799 --> 00:01:10,400
western southern has nothing

00:01:08,560 --> 00:01:12,080
they're not involved in this this is my

00:01:10,400 --> 00:01:14,640
own viewpoint

00:01:12,080 --> 00:01:16,159
so we'll continue on so first of all

00:01:14,640 --> 00:01:17,920
since this is a beginner one

00:01:16,159 --> 00:01:20,240
what is getting jenkins so getting

00:01:17,920 --> 00:01:22,159
jingling with two open source products

00:01:20,240 --> 00:01:24,720
that are being used by a lot of

00:01:22,159 --> 00:01:28,640
companies a lot of different areas

00:01:24,720 --> 00:01:30,640
to actually do source code management

00:01:28,640 --> 00:01:32,240
and then jenkins is the coordination or

00:01:30,640 --> 00:01:33,759
the open source automation server

00:01:32,240 --> 00:01:36,479
written in java

00:01:33,759 --> 00:01:37,280
so you have get which has all the all

00:01:36,479 --> 00:01:39,439
the tools

00:01:37,280 --> 00:01:41,119
and an implementation of get a get

00:01:39,439 --> 00:01:43,360
server might be get hub

00:01:41,119 --> 00:01:45,759
get lab bit bucket there's a whole

00:01:43,360 --> 00:01:48,960
different range of things out there

00:01:45,759 --> 00:01:49,759
jenkins there is an oak there is open

00:01:48,960 --> 00:01:51,119
source

00:01:49,759 --> 00:01:53,280
and both of these guys have support

00:01:51,119 --> 00:01:55,040
depend upon which way you go with it

00:01:53,280 --> 00:01:57,600
but jenkins is an it's basically an

00:01:55,040 --> 00:01:58,960
automation tool that helps develop

00:01:57,600 --> 00:02:01,439
or helps with the software development

00:01:58,960 --> 00:02:03,200
process it can do builds it can it's an

00:02:01,439 --> 00:02:05,280
orchestrator basically there's several

00:02:03,200 --> 00:02:07,119
of them out there but jenkins

00:02:05,280 --> 00:02:08,720
and git are the two that work with z os

00:02:07,119 --> 00:02:11,760
at this time

00:02:08,720 --> 00:02:13,120
so here's the open mainframe project uh

00:02:11,760 --> 00:02:14,640
polycephaly is what i'm going to talk

00:02:13,120 --> 00:02:16,080
about that's my project

00:02:14,640 --> 00:02:17,680
there are various other ones and i think

00:02:16,080 --> 00:02:18,239
there was a new one just added too which

00:02:17,680 --> 00:02:20,840
was

00:02:18,239 --> 00:02:23,440
just added within the last month or so

00:02:20,840 --> 00:02:26,480
polycephaly the name comes from

00:02:23,440 --> 00:02:29,520
if you see the little uh icon

00:02:26,480 --> 00:02:31,280
it's something with multiple heads so

00:02:29,520 --> 00:02:33,840
the reason the name came about for this

00:02:31,280 --> 00:02:34,879
project was i was trying to develop a

00:02:33,840 --> 00:02:37,760
way

00:02:34,879 --> 00:02:39,360
to marry the two different methodology

00:02:37,760 --> 00:02:40,160
build methodologies from the java

00:02:39,360 --> 00:02:42,879
environment which

00:02:40,160 --> 00:02:44,800
i know a little bit about and mainframe

00:02:42,879 --> 00:02:46,640
developments the os development

00:02:44,800 --> 00:02:48,080
they are two different methodologies

00:02:46,640 --> 00:02:49,760
most of the time on the distributed side

00:02:48,080 --> 00:02:53,040
or java development

00:02:49,760 --> 00:02:55,200
the developer hat knows his

00:02:53,040 --> 00:02:56,959
his pipeline he knows where it's going

00:02:55,200 --> 00:02:57,840
to be done where it's built how it's

00:02:56,959 --> 00:02:59,360
going to be built

00:02:57,840 --> 00:03:00,480
he needs to know all those components he

00:02:59,360 --> 00:03:01,200
has to basically understand the

00:03:00,480 --> 00:03:02,959
scripting

00:03:01,200 --> 00:03:05,680
of how to do that however on the

00:03:02,959 --> 00:03:07,280
mainframe side in an scm

00:03:05,680 --> 00:03:09,360
they don't know that a lot of those

00:03:07,280 --> 00:03:10,560
folks have the tools behind the scenes

00:03:09,360 --> 00:03:11,680
are building the script building the

00:03:10,560 --> 00:03:14,400
skeleton

00:03:11,680 --> 00:03:14,879
building the jcl submitting it for them

00:03:14,400 --> 00:03:16,720
um

00:03:14,879 --> 00:03:18,720
so they really have a lot of the cobol

00:03:16,720 --> 00:03:19,519
you say for the cobalt compiler options

00:03:18,720 --> 00:03:21,920
they're really

00:03:19,519 --> 00:03:22,959
sometimes all that's hidden behind the

00:03:21,920 --> 00:03:24,799
scenes to them

00:03:22,959 --> 00:03:27,519
so how to marry those two together to

00:03:24,799 --> 00:03:29,920
apply what the java developer

00:03:27,519 --> 00:03:31,360
does but allow them to work in zos

00:03:29,920 --> 00:03:33,440
without having to know all those

00:03:31,360 --> 00:03:34,720
or have to worry about the scripting and

00:03:33,440 --> 00:03:35,360
this vice versa how to make the

00:03:34,720 --> 00:03:37,840
mainframe

00:03:35,360 --> 00:03:39,200
people have that same experience within

00:03:37,840 --> 00:03:42,799
the id

00:03:39,200 --> 00:03:44,400
not having them to uh have to go into

00:03:42,799 --> 00:03:45,680
you know all the scripting parts you

00:03:44,400 --> 00:03:46,000
know like for the job all the different

00:03:45,680 --> 00:03:48,159
class

00:03:46,000 --> 00:03:50,640
options now they develop in java often

00:03:48,159 --> 00:03:52,319
know that but on cobol they don't

00:03:50,640 --> 00:03:53,840
this project also allows you to be able

00:03:52,319 --> 00:03:56,080
to submit batch jobs

00:03:53,840 --> 00:03:57,200
to actually test the code it's

00:03:56,080 --> 00:04:00,400
rudimentary

00:03:57,200 --> 00:04:03,040
yes that's why it's in its infancy still

00:04:00,400 --> 00:04:04,640
but this project started almost over

00:04:03,040 --> 00:04:05,680
five over four years ago almost going

00:04:04,640 --> 00:04:07,280
almost five

00:04:05,680 --> 00:04:08,640
um so long before some of these other

00:04:07,280 --> 00:04:09,519
projects an open mentoring project

00:04:08,640 --> 00:04:11,680
started i think

00:04:09,519 --> 00:04:12,879
i'm not sure about that but we've been

00:04:11,680 --> 00:04:13,680
working i've been working on this thing

00:04:12,879 --> 00:04:17,759
for a while

00:04:13,680 --> 00:04:21,040
that allows the mainframe to be

00:04:17,759 --> 00:04:22,560
using open source not taking open source

00:04:21,040 --> 00:04:24,880
to the mainframe

00:04:22,560 --> 00:04:26,720
so making the mainframe work an open

00:04:24,880 --> 00:04:29,600
source where it minimizes

00:04:26,720 --> 00:04:31,199
the impact on the developers on the

00:04:29,600 --> 00:04:32,479
administrators and

00:04:31,199 --> 00:04:35,440
including me the zero assistance

00:04:32,479 --> 00:04:38,320
programmers because quite frankly

00:04:35,440 --> 00:04:39,759
you may have a developer out there um in

00:04:38,320 --> 00:04:42,880
some cases you have

00:04:39,759 --> 00:04:44,479
you know 15 20 25 to 1 developers

00:04:42,880 --> 00:04:45,680
maintain developers to one systems

00:04:44,479 --> 00:04:49,040
programmer

00:04:45,680 --> 00:04:51,919
well um the main

00:04:49,040 --> 00:04:53,040
systems the zeo assistance programmers

00:04:51,919 --> 00:04:55,120
they're

00:04:53,040 --> 00:04:56,800
not many of us out there anymore and so

00:04:55,120 --> 00:04:57,360
adding something more complicated to

00:04:56,800 --> 00:04:59,680
this

00:04:57,360 --> 00:05:00,960
over an smpe install makes it difficult

00:04:59,680 --> 00:05:02,000
and i'll explain a little bit more about

00:05:00,960 --> 00:05:05,680
that later but

00:05:02,000 --> 00:05:08,800
polycephaly basically uses three roles

00:05:05,680 --> 00:05:10,160
and i did this project to minimize the

00:05:08,800 --> 00:05:12,479
impact on everybody

00:05:10,160 --> 00:05:13,440
so basically reusing what i can where i

00:05:12,479 --> 00:05:15,680
can

00:05:13,440 --> 00:05:16,479
and for example the zos side install is

00:05:15,680 --> 00:05:18,400
all smp

00:05:16,479 --> 00:05:19,919
installed you probably have jenkins to

00:05:18,400 --> 00:05:20,479
get already installed you're out in your

00:05:19,919 --> 00:05:22,800
system

00:05:20,479 --> 00:05:24,400
so jingles administrator can be able to

00:05:22,800 --> 00:05:25,039
develop or to be able to build and

00:05:24,400 --> 00:05:27,360
deploy

00:05:25,039 --> 00:05:28,080
the polycephaly project and everybody

00:05:27,360 --> 00:05:32,160
can use it

00:05:28,080 --> 00:05:33,759
so it allows all three roles to be

00:05:32,160 --> 00:05:35,759
minimized what the impact on those three

00:05:33,759 --> 00:05:38,320
rules are so

00:05:35,759 --> 00:05:39,840
where does polycephaly sit within the

00:05:38,320 --> 00:05:41,280
devops enterprise

00:05:39,840 --> 00:05:43,520
if you look at the highlighted piece in

00:05:41,280 --> 00:05:46,080
yellow it sits in the build

00:05:43,520 --> 00:05:48,080
so this is strictly just a build at this

00:05:46,080 --> 00:05:50,720
point it is strictly a build

00:05:48,080 --> 00:05:52,400
for co for z os applications and i'll go

00:05:50,720 --> 00:05:54,560
over more about which ones what

00:05:52,400 --> 00:05:56,560
what products and stuff are in there but

00:05:54,560 --> 00:05:59,199
it does cobol assemble and a few others

00:05:56,560 --> 00:06:01,840
so it will build these products from an

00:05:59,199 --> 00:06:04,560
ide using get and jenkins on z os

00:06:01,840 --> 00:06:05,680
into pdss submit to acl test the

00:06:04,560 --> 00:06:09,199
programs you just built

00:06:05,680 --> 00:06:11,440
are compiled and go on and return the

00:06:09,199 --> 00:06:12,319
information back so there's ways to do

00:06:11,440 --> 00:06:15,360
this stuff it's just

00:06:12,319 --> 00:06:16,479
we're slowly gaining speed uh once we

00:06:15,360 --> 00:06:18,639
get the infrastructure built

00:06:16,479 --> 00:06:20,000
we'll be able to move a little faster so

00:06:18,639 --> 00:06:21,440
this is what we're talking about is in

00:06:20,000 --> 00:06:24,800
the build component

00:06:21,440 --> 00:06:26,080
of the devops for the enterprise so as

00:06:24,800 --> 00:06:26,880
you can see here i highlighted a little

00:06:26,080 --> 00:06:29,759
different

00:06:26,880 --> 00:06:30,560
viewpoint you see jenkins and github in

00:06:29,759 --> 00:06:32,800
the middle

00:06:30,560 --> 00:06:34,080
along with artifactory so this is kind

00:06:32,800 --> 00:06:36,400
of like the

00:06:34,080 --> 00:06:37,680
pipeline integrated pipeline so where

00:06:36,400 --> 00:06:39,759
this fits in

00:06:37,680 --> 00:06:40,800
is up in the build section not the

00:06:39,759 --> 00:06:43,360
coding

00:06:40,800 --> 00:06:43,840
but the build so this takes over where

00:06:43,360 --> 00:06:46,960
you get

00:06:43,840 --> 00:06:48,000
say you get idz jenkins and get

00:06:46,960 --> 00:06:50,720
installed and running

00:06:48,000 --> 00:06:51,520
to the mainframe this pro this project

00:06:50,720 --> 00:06:54,000
will fit

00:06:51,520 --> 00:06:56,240
will be a jenkins project that'll be

00:06:54,000 --> 00:06:58,479
built and deployed to z os

00:06:56,240 --> 00:07:00,160
that other projects other application

00:06:58,479 --> 00:07:02,639
projects can call

00:07:00,160 --> 00:07:03,280
so it's hiding the scripting behind the

00:07:02,639 --> 00:07:06,000
scenes

00:07:03,280 --> 00:07:07,759
to mimic what happens with mainframe scm

00:07:06,000 --> 00:07:10,639
so the dividing frame developer

00:07:07,759 --> 00:07:11,919
has the controls yes but it also hides a

00:07:10,639 --> 00:07:13,120
lot of the stuff behind the scenes so

00:07:11,919 --> 00:07:14,000
they don't have to worry about a lot of

00:07:13,120 --> 00:07:19,360
it

00:07:14,000 --> 00:07:21,199
um so and then there are some um

00:07:19,360 --> 00:07:22,960
ways to improve this to the provisioning

00:07:21,199 --> 00:07:24,400
to the deployment the testing

00:07:22,960 --> 00:07:26,400
but again this is just in the build

00:07:24,400 --> 00:07:28,800
stage at this point

00:07:26,400 --> 00:07:29,840
so that's where we come in is everything

00:07:28,800 --> 00:07:32,720
we're doing right now for the

00:07:29,840 --> 00:07:33,759
polycephala project is in the build

00:07:32,720 --> 00:07:37,840
and we'll show you a little bit more

00:07:33,759 --> 00:07:37,840
about that uh in a few minutes

00:07:39,280 --> 00:07:43,039
so again this is kind of a layout of how

00:07:42,560 --> 00:07:46,240
the

00:07:43,039 --> 00:07:47,520
things proceed so from a developer puts

00:07:46,240 --> 00:07:49,680
has an ide

00:07:47,520 --> 00:07:51,120
and it doesn't matter what ide they have

00:07:49,680 --> 00:07:51,840
they build their code they develop their

00:07:51,120 --> 00:07:55,039
code

00:07:51,840 --> 00:07:57,919
they work on it and they submit they

00:07:55,039 --> 00:07:58,720
store it back to the get server the git

00:07:57,919 --> 00:08:00,720
server

00:07:58,720 --> 00:08:02,319
can either be automated to say go to you

00:08:00,720 --> 00:08:03,680
know jenkins notices the automate that

00:08:02,319 --> 00:08:05,840
the

00:08:03,680 --> 00:08:06,960
the branch is out there and tells

00:08:05,840 --> 00:08:09,280
jenkins to build it

00:08:06,960 --> 00:08:11,199
or they can have you know the guest

00:08:09,280 --> 00:08:13,039
server push it to jenkins and say hey

00:08:11,199 --> 00:08:14,400
you know the notification so it can be

00:08:13,039 --> 00:08:17,280
automated between the get server and

00:08:14,400 --> 00:08:20,560
jenkins dependable get server you have

00:08:17,280 --> 00:08:23,039
jenkins will then start a slave now

00:08:20,560 --> 00:08:24,800
one key to this is if you have multiple

00:08:23,039 --> 00:08:27,039
z os operating systems and multiple

00:08:24,800 --> 00:08:29,840
syslexes in multiple locations

00:08:27,039 --> 00:08:30,879
or whatever this can the single jenkins

00:08:29,840 --> 00:08:33,039
server

00:08:30,879 --> 00:08:35,519
can have slaves on every one of those z

00:08:33,039 --> 00:08:37,440
os app z os servers

00:08:35,519 --> 00:08:39,279
so if you've got say three around the

00:08:37,440 --> 00:08:41,200
country this can actually build

00:08:39,279 --> 00:08:43,120
the same jenkins service to those three

00:08:41,200 --> 00:08:45,600
z os operating systems

00:08:43,120 --> 00:08:46,880
it goes into the uss so the git for uh

00:08:45,600 --> 00:08:50,399
for z os

00:08:46,880 --> 00:08:52,320
is built it's a rocket port it's smpe

00:08:50,399 --> 00:08:53,519
installed there's a few other things

00:08:52,320 --> 00:08:54,000
that need to be installed with this

00:08:53,519 --> 00:08:56,720
there's some

00:08:54,000 --> 00:08:58,399
an ibm tool of course you can't get away

00:08:56,720 --> 00:08:59,760
from z os without having an ibm tool

00:08:58,399 --> 00:09:01,839
somewhere

00:08:59,760 --> 00:09:03,440
so it's not completely open source but

00:09:01,839 --> 00:09:06,560
it's as close you can get

00:09:03,440 --> 00:09:07,839
i think without having um

00:09:06,560 --> 00:09:10,240
without actually using some of the other

00:09:07,839 --> 00:09:13,760
tools so from the get

00:09:10,240 --> 00:09:17,920
so jenkins starts a slave he starts the

00:09:13,760 --> 00:09:19,600
process the build on the zos under uss

00:09:17,920 --> 00:09:21,120
jenkins will then call back to the get

00:09:19,600 --> 00:09:24,000
server via the github

00:09:21,120 --> 00:09:25,600
or the get client on z os that's been

00:09:24,000 --> 00:09:29,839
pointed from rocket

00:09:25,600 --> 00:09:33,360
pulls the code down to uss invokes

00:09:29,839 --> 00:09:35,519
the build part of the from the jenkins

00:09:33,360 --> 00:09:36,480
invokes the build part which happens to

00:09:35,519 --> 00:09:39,600
be

00:09:36,480 --> 00:09:41,920
in this case a polycephaly project

00:09:39,600 --> 00:09:44,320
it will then take the build create

00:09:41,920 --> 00:09:45,600
development level pdss as needed depend

00:09:44,320 --> 00:09:48,720
upon what's being built

00:09:45,600 --> 00:09:52,240
that's object load source

00:09:48,720 --> 00:09:53,600
copy books macros or mac lives whatever

00:09:52,240 --> 00:09:56,160
it needs to build

00:09:53,600 --> 00:09:57,680
with a high level qualifier specified in

00:09:56,160 --> 00:10:00,320
the build package

00:09:57,680 --> 00:10:02,880
so all these parameters are in the

00:10:00,320 --> 00:10:05,440
repository with the build package

00:10:02,880 --> 00:10:06,959
so whatever comes up pulls it pulls that

00:10:05,440 --> 00:10:08,720
and when that's done building you can

00:10:06,959 --> 00:10:12,320
actually have an auto submit

00:10:08,720 --> 00:10:13,120
a test case a jcl and then that jco can

00:10:12,320 --> 00:10:14,959
run

00:10:13,120 --> 00:10:16,480
and could have a notification back

00:10:14,959 --> 00:10:18,240
that's still that

00:10:16,480 --> 00:10:19,680
between the pass failure that still and

00:10:18,240 --> 00:10:21,279
works but it could

00:10:19,680 --> 00:10:23,120
look at what the return codes were send

00:10:21,279 --> 00:10:24,640
it back and tell you tell the developer

00:10:23,120 --> 00:10:26,160
back at the ide it failed

00:10:24,640 --> 00:10:28,160
or if it blew up or whatever and they

00:10:26,160 --> 00:10:30,160
can so the jcl

00:10:28,160 --> 00:10:32,000
everything with that package that

00:10:30,160 --> 00:10:34,160
program that source the mac

00:10:32,000 --> 00:10:35,440
the cobol copybook everything is all in

00:10:34,160 --> 00:10:38,079
there

00:10:35,440 --> 00:10:39,440
um and there's some features within one

00:10:38,079 --> 00:10:42,480
of the ibm tools

00:10:39,440 --> 00:10:43,040
that i won't go into here but it allows

00:10:42,480 --> 00:10:46,560
you to do

00:10:43,040 --> 00:10:48,480
whether it's cics or ims it or db2 it

00:10:46,560 --> 00:10:50,800
actually automatically puts in those

00:10:48,480 --> 00:10:51,839
features so when it compiles it knows it

00:10:50,800 --> 00:10:54,880
has to invoke

00:10:51,839 --> 00:10:57,279
the built-in cics compiler translator

00:10:54,880 --> 00:10:58,399
or db2's translator all that's already

00:10:57,279 --> 00:11:00,800
done for you

00:10:58,399 --> 00:11:01,839
so that can go through and then through

00:11:00,800 --> 00:11:05,279
the build

00:11:01,839 --> 00:11:06,160
um it doesn't do anything with deploying

00:11:05,279 --> 00:11:08,079
the code

00:11:06,160 --> 00:11:09,440
except the load modules and it only does

00:11:08,079 --> 00:11:10,320
it at the development level at this

00:11:09,440 --> 00:11:12,160
point

00:11:10,320 --> 00:11:14,079
um there are other tools for the for the

00:11:12,160 --> 00:11:15,279
deployment i mean there's tons of them

00:11:14,079 --> 00:11:16,079
out there that you can use for the

00:11:15,279 --> 00:11:18,000
deployment

00:11:16,079 --> 00:11:19,200
and you could actually take this code

00:11:18,000 --> 00:11:21,440
the object code from the

00:11:19,200 --> 00:11:23,920
load library since it's object code

00:11:21,440 --> 00:11:27,040
stored in artifactory as a build

00:11:23,920 --> 00:11:27,839
in binary format and then deploy that to

00:11:27,040 --> 00:11:30,880
other

00:11:27,839 --> 00:11:32,720
z or z os operating systems um so it

00:11:30,880 --> 00:11:33,360
doesn't have you can do one build on one

00:11:32,720 --> 00:11:35,360
side

00:11:33,360 --> 00:11:36,640
say it's a test dell part or whatever

00:11:35,360 --> 00:11:38,640
and you can deploy that

00:11:36,640 --> 00:11:40,720
through the back to artifactory then

00:11:38,640 --> 00:11:42,399
deploy that binary out to other z os

00:11:40,720 --> 00:11:44,800
operating systems also

00:11:42,399 --> 00:11:45,839
so kind of like the copy method you know

00:11:44,800 --> 00:11:48,240
ib copy

00:11:45,839 --> 00:11:49,839
when you copy it from one library to the

00:11:48,240 --> 00:11:52,160
other you can do that with this

00:11:49,839 --> 00:11:53,120
so if you have artifactory just like the

00:11:52,160 --> 00:11:54,560
java does they

00:11:53,120 --> 00:11:56,880
put the binaries out there you can pull

00:11:54,560 --> 00:11:59,440
it through so there's a lot of

00:11:56,880 --> 00:12:00,639
capability or possibilities i mean

00:11:59,440 --> 00:12:02,160
jenkins has over

00:12:00,639 --> 00:12:04,800
i think it was last time i saw was like

00:12:02,160 --> 00:12:07,920
1200 uh plugins to it

00:12:04,800 --> 00:12:11,440
everything from uh

00:12:07,920 --> 00:12:14,320
servicenow github

00:12:11,440 --> 00:12:15,440
artifactory jira all that so this could

00:12:14,320 --> 00:12:18,240
also say

00:12:15,440 --> 00:12:19,680
that pass or this test case jcl failed

00:12:18,240 --> 00:12:21,440
it couldn't open the jira

00:12:19,680 --> 00:12:22,959
and have that be redriven back down to

00:12:21,440 --> 00:12:25,839
the developer saying hey you need to go

00:12:22,959 --> 00:12:28,800
look at this so it can make a full loop

00:12:25,839 --> 00:12:29,680
so this actually plugs in nicely to the

00:12:28,800 --> 00:12:32,720
the devops

00:12:29,680 --> 00:12:35,040
deployment method you know cdci

00:12:32,720 --> 00:12:36,639
um but again polycephaly is in its

00:12:35,040 --> 00:12:39,839
infancy at this point

00:12:36,639 --> 00:12:42,160
so okay then you install you

00:12:39,839 --> 00:12:43,440
you install and deploy polycephaly to

00:12:42,160 --> 00:12:44,959
uss

00:12:43,440 --> 00:12:47,839
and then all the other applications

00:12:44,959 --> 00:12:49,360
called polycephaly which then calls

00:12:47,839 --> 00:12:52,320
or the application called polycephaly

00:12:49,360 --> 00:12:55,839
which then does the build

00:12:52,320 --> 00:12:57,519
okay so this is kind of the flow i

00:12:55,839 --> 00:12:59,519
noticed it might be hard to read

00:12:57,519 --> 00:13:00,800
but on the left is actually the

00:12:59,519 --> 00:13:02,880
administrative part

00:13:00,800 --> 00:13:04,320
where the actual build setting up the

00:13:02,880 --> 00:13:07,120
build

00:13:04,320 --> 00:13:08,480
the green is where the actual build

00:13:07,120 --> 00:13:11,279
starts

00:13:08,480 --> 00:13:12,720
and then on the blue ones with the lines

00:13:11,279 --> 00:13:14,399
are all the possibilities of what you

00:13:12,720 --> 00:13:16,959
can build at this time

00:13:14,399 --> 00:13:18,320
so that's assembler bms maps cics apis

00:13:16,959 --> 00:13:21,360
web services

00:13:18,320 --> 00:13:25,120
compile only copybook

00:13:21,360 --> 00:13:26,880
uh easy tree jcl check jcl check as long

00:13:25,120 --> 00:13:28,880
as it's not apf authorized

00:13:26,880 --> 00:13:30,959
it still needs some work you can just

00:13:28,880 --> 00:13:32,480
link edit a program

00:13:30,959 --> 00:13:34,000
we have a thing inside called dual

00:13:32,480 --> 00:13:35,440
compile so we have one that goes for

00:13:34,000 --> 00:13:38,880
batch and one for cics

00:13:35,440 --> 00:13:40,720
the same modules that was monitored the

00:13:38,880 --> 00:13:41,600
routines were modified to allow that to

00:13:40,720 --> 00:13:44,480
do the build

00:13:41,600 --> 00:13:46,320
so we push it to the two different spots

00:13:44,480 --> 00:13:47,360
you can also easily switch back and

00:13:46,320 --> 00:13:49,600
forth

00:13:47,360 --> 00:13:51,120
in this case we have expediter i can

00:13:49,600 --> 00:13:53,519
easily set a program to say

00:13:51,120 --> 00:13:55,680
expedite it with one simple switch and

00:13:53,519 --> 00:13:57,120
put expediter it'll build the ddio file

00:13:55,680 --> 00:14:01,279
it'll build everything for it

00:13:57,120 --> 00:14:03,279
then go to the compile the ones in black

00:14:01,279 --> 00:14:04,800
are the ones the finishing so it does

00:14:03,279 --> 00:14:05,519
the build result pushes it back to the

00:14:04,800 --> 00:14:08,560
db

00:14:05,519 --> 00:14:10,320
the dbb server um and then it puts the

00:14:08,560 --> 00:14:11,680
end time on it and there's a build xml

00:14:10,320 --> 00:14:13,920
that gets kicked off that'll

00:14:11,680 --> 00:14:16,079
actually do the a little bit of deploys

00:14:13,920 --> 00:14:20,000
that's an ant script at this point

00:14:16,079 --> 00:14:21,680
all right so that's a lot of information

00:14:20,000 --> 00:14:22,560
but that's pretty much the basic layout

00:14:21,680 --> 00:14:26,240
right now of

00:14:22,560 --> 00:14:29,199
polycephaly um but the code

00:14:26,240 --> 00:14:30,480
that is in the blue is pretty much like

00:14:29,199 --> 00:14:33,440
a proc

00:14:30,480 --> 00:14:34,880
uh if you have a proc that you do

00:14:33,440 --> 00:14:35,920
something with build like we talked with

00:14:34,880 --> 00:14:38,399
another

00:14:35,920 --> 00:14:39,519
the new project was just approved in the

00:14:38,399 --> 00:14:42,079
mainframe project

00:14:39,519 --> 00:14:42,880
we can actually build it as a as a

00:14:42,079 --> 00:14:45,839
module

00:14:42,880 --> 00:14:46,480
and plug it right into this so if it's

00:14:45,839 --> 00:14:49,440
got a proc

00:14:46,480 --> 00:14:50,560
or it's got you know jcl it can be in it

00:14:49,440 --> 00:14:53,600
can be put into

00:14:50,560 --> 00:14:56,800
polycephaly code

00:14:53,600 --> 00:14:57,680
so all right so let's take so let's take

00:14:56,800 --> 00:15:00,160
a step back

00:14:57,680 --> 00:15:01,440
so what does this thing help with so

00:15:00,160 --> 00:15:04,480
polycephaly with this

00:15:01,440 --> 00:15:06,480
this flow that we have allows the

00:15:04,480 --> 00:15:08,959
developer a lot of flexibility which you

00:15:06,480 --> 00:15:12,000
don't have with mainframe sdms

00:15:08,959 --> 00:15:13,760
so for example and i'll go more detail

00:15:12,000 --> 00:15:15,600
i'll show you some examples of this but

00:15:13,760 --> 00:15:18,399
let's say i want to compile

00:15:15,600 --> 00:15:19,199
a complete cobol application from start

00:15:18,399 --> 00:15:21,440
to finish

00:15:19,199 --> 00:15:22,480
i'm upgrading from cobol 42 to cobalt

00:15:21,440 --> 00:15:23,760
6.2

00:15:22,480 --> 00:15:26,240
so i want to be able to compile

00:15:23,760 --> 00:15:28,240
everything i can

00:15:26,240 --> 00:15:30,720
in cobalt six two with the return code

00:15:28,240 --> 00:15:32,880
to the zero then anything that doesn't

00:15:30,720 --> 00:15:34,240
pass put back on cobalt four two and

00:15:32,880 --> 00:15:36,399
compile it there

00:15:34,240 --> 00:15:38,320
and then if i have some test cases or

00:15:36,399 --> 00:15:40,560
test jcl i can run those test cases

00:15:38,320 --> 00:15:41,680
against those programs and make sure it

00:15:40,560 --> 00:15:45,920
works

00:15:41,680 --> 00:15:45,920
but trying to do that with a

00:15:46,720 --> 00:15:50,880
mainframe scm is almost impossible and

00:15:48,959 --> 00:15:52,399
here it's a simple change

00:15:50,880 --> 00:15:54,560
you have your cobalt fours in one

00:15:52,399 --> 00:15:56,240
directory you have cobalt six in another

00:15:54,560 --> 00:15:58,880
uh directory within the within the

00:15:56,240 --> 00:16:00,560
package and then

00:15:58,880 --> 00:16:02,079
all you do is there's a selection

00:16:00,560 --> 00:16:02,800
routine that selects which programs you

00:16:02,079 --> 00:16:04,480
want to compile

00:16:02,800 --> 00:16:06,320
you put as an asterisk in it'll compile

00:16:04,480 --> 00:16:08,720
everything

00:16:06,320 --> 00:16:10,000
you can actually run multiple compiles

00:16:08,720 --> 00:16:11,199
so you can say

00:16:10,000 --> 00:16:13,920
just like the one before i want to

00:16:11,199 --> 00:16:15,279
separate these into app one and app two

00:16:13,920 --> 00:16:16,959
where this one's a separate

00:16:15,279 --> 00:16:18,399
functionality within

00:16:16,959 --> 00:16:19,600
this application so i just wanted to

00:16:18,399 --> 00:16:21,279
fill i just want to compile those

00:16:19,600 --> 00:16:23,040
programs

00:16:21,279 --> 00:16:24,320
now there is the ability to compile just

00:16:23,040 --> 00:16:28,639
one program

00:16:24,320 --> 00:16:30,320
so let me back up a step because i think

00:16:28,639 --> 00:16:33,279
i might have lost a few of you

00:16:30,320 --> 00:16:34,199
with this i'll show you in a second but

00:16:33,279 --> 00:16:37,600
with the get

00:16:34,199 --> 00:16:39,120
repository you get the entire library

00:16:37,600 --> 00:16:41,040
so the way these things are the way i've

00:16:39,120 --> 00:16:42,959
laid this out at this point is just like

00:16:41,040 --> 00:16:46,000
a mainframe sem

00:16:42,959 --> 00:16:48,639
there is one application

00:16:46,000 --> 00:16:50,079
per repository so if i have like a

00:16:48,639 --> 00:16:52,160
mortgage application

00:16:50,079 --> 00:16:54,320
all the mortgage application programs

00:16:52,160 --> 00:16:56,480
and jcl copy books

00:16:54,320 --> 00:16:57,920
all those are brought down and in a get

00:16:56,480 --> 00:17:01,040
repository

00:16:57,920 --> 00:17:02,399
so when i go to an ide and i

00:17:01,040 --> 00:17:03,920
want to start working on the mortgage

00:17:02,399 --> 00:17:05,360
application i have to bring the whole

00:17:03,920 --> 00:17:07,360
repository down

00:17:05,360 --> 00:17:09,760
which has all of those cobalt programs

00:17:07,360 --> 00:17:10,640
in so i may only be working on one or

00:17:09,760 --> 00:17:12,720
two of those

00:17:10,640 --> 00:17:14,640
or i may be working on all of them so

00:17:12,720 --> 00:17:16,079
they're all in the repository

00:17:14,640 --> 00:17:18,559
this is how you get your non-linear

00:17:16,079 --> 00:17:20,160
development you do that and then you can

00:17:18,559 --> 00:17:23,280
promote it back in

00:17:20,160 --> 00:17:25,679
to the the main github the

00:17:23,280 --> 00:17:27,120
main github server and then it'll do

00:17:25,679 --> 00:17:28,559
resolutions or

00:17:27,120 --> 00:17:30,240
you know if you've got a conflict or

00:17:28,559 --> 00:17:30,799
whatever so it allows concurrent

00:17:30,240 --> 00:17:33,200
development

00:17:30,799 --> 00:17:34,799
but every developer gets their own get

00:17:33,200 --> 00:17:37,120
instance or get repository

00:17:34,799 --> 00:17:39,280
when they do this so when i say run a

00:17:37,120 --> 00:17:40,640
compile that runs all of the application

00:17:39,280 --> 00:17:43,039
or all the

00:17:40,640 --> 00:17:45,039
programs that means everything that's in

00:17:43,039 --> 00:17:47,919
that repository

00:17:45,039 --> 00:17:48,640
now polycephaly has the ability to

00:17:47,919 --> 00:17:52,160
select

00:17:48,640 --> 00:17:53,200
one program and run it and there's ways

00:17:52,160 --> 00:17:53,840
to do that i'll show you that in a

00:17:53,200 --> 00:17:55,919
minute

00:17:53,840 --> 00:17:57,280
but it also you can compile your cobalt

00:17:55,919 --> 00:18:00,000
fold two six

00:17:57,280 --> 00:18:00,640
whatever expediter assembler easy tree

00:18:00,000 --> 00:18:03,440
whatever

00:18:00,640 --> 00:18:05,280
so you can actually hide a lot of in the

00:18:03,440 --> 00:18:07,919
polycephaly project but you can also

00:18:05,280 --> 00:18:09,840
allow the developer to override it

00:18:07,919 --> 00:18:10,960
another component of this too is it

00:18:09,840 --> 00:18:14,160
allows

00:18:10,960 --> 00:18:15,919
the cobalt program

00:18:14,160 --> 00:18:18,400
to have the compiler options with the

00:18:15,919 --> 00:18:19,919
program so those compiler options

00:18:18,400 --> 00:18:21,600
all these options and stuff that we're

00:18:19,919 --> 00:18:23,280
using go with the program when you

00:18:21,600 --> 00:18:25,440
promote it

00:18:23,280 --> 00:18:27,280
so one of the things that cobalt 6 that

00:18:25,440 --> 00:18:29,039
ibm recommends is that you run your

00:18:27,280 --> 00:18:31,120
testing or your development

00:18:29,039 --> 00:18:33,600
with ss range num check palm check and

00:18:31,120 --> 00:18:34,640
op0 so that you can see what's going on

00:18:33,600 --> 00:18:37,120
so those are

00:18:34,640 --> 00:18:38,480
those are testing compiler options that

00:18:37,120 --> 00:18:39,440
allow you to see what's going on with

00:18:38,480 --> 00:18:41,200
cobalt 6

00:18:39,440 --> 00:18:42,640
whether there's a problem or not and

00:18:41,200 --> 00:18:43,919
then they want you to recompile it after

00:18:42,640 --> 00:18:45,760
you've done testing with the no

00:18:43,919 --> 00:18:47,440
with turning some of those features off

00:18:45,760 --> 00:18:50,799
and then optimize the two

00:18:47,440 --> 00:18:53,280
to get full optimization well that

00:18:50,799 --> 00:18:55,360
is kind of difficult with an scm with

00:18:53,280 --> 00:18:57,120
this one and i'll show you here again

00:18:55,360 --> 00:18:58,880
it's easy to make those changes back and

00:18:57,120 --> 00:19:00,720
forth and only for a set number of

00:18:58,880 --> 00:19:03,679
programs if you wanted

00:19:00,720 --> 00:19:04,480
so you can you can also move programs to

00:19:03,679 --> 00:19:06,240
different packages

00:19:04,480 --> 00:19:07,600
compile them any way you want with

00:19:06,240 --> 00:19:09,200
different options what you want so

00:19:07,600 --> 00:19:10,640
there's a whole different

00:19:09,200 --> 00:19:12,960
it's basically the freedom of doing what

00:19:10,640 --> 00:19:14,880
you need to do within the package

00:19:12,960 --> 00:19:16,320
and as that package is promoted with

00:19:14,880 --> 00:19:19,120
whatever's been changed

00:19:16,320 --> 00:19:20,400
in that branch it goes with it so all

00:19:19,120 --> 00:19:21,760
the options

00:19:20,400 --> 00:19:24,720
all the configuration everything that

00:19:21,760 --> 00:19:27,760
goes with it you can also have

00:19:24,720 --> 00:19:29,520
multiple developers developing the same

00:19:27,760 --> 00:19:32,559
application and the development

00:19:29,520 --> 00:19:34,160
environment to the same z os

00:19:32,559 --> 00:19:36,880
because they can supply different high

00:19:34,160 --> 00:19:38,799
level qualifiers so by default

00:19:36,880 --> 00:19:40,160
the high-level qualifier is set in the

00:19:38,799 --> 00:19:40,880
polysympholic project but it can be

00:19:40,160 --> 00:19:44,799
overridden

00:19:40,880 --> 00:19:46,640
by the developer so

00:19:44,799 --> 00:19:48,480
you can also if you have like say you're

00:19:46,640 --> 00:19:50,480
missing a mac library copylab

00:19:48,480 --> 00:19:52,240
a copybook now there's some features

00:19:50,480 --> 00:19:53,679
with ibm's dvp that i don't take

00:19:52,240 --> 00:19:54,799
advantage of at this point so this is

00:19:53,679 --> 00:19:57,440
why we do this

00:19:54,799 --> 00:19:59,440
but you can do the mac live and copy

00:19:57,440 --> 00:20:02,159
copy book you can add right into the

00:19:59,440 --> 00:20:03,200
into the configuration and again that

00:20:02,159 --> 00:20:04,799
goes forward

00:20:03,200 --> 00:20:06,799
so the next person doesn't have to

00:20:04,799 --> 00:20:08,480
figure out what happened so the compiler

00:20:06,799 --> 00:20:09,600
options configuration options

00:20:08,480 --> 00:20:11,280
everything you could pod that broke

00:20:09,600 --> 00:20:11,760
programs with are all right with the

00:20:11,280 --> 00:20:13,520
program

00:20:11,760 --> 00:20:15,280
at that release level or on that

00:20:13,520 --> 00:20:16,960
deployment level

00:20:15,280 --> 00:20:18,320
uh you can change linkedin options just

00:20:16,960 --> 00:20:19,280
like you would for any other call

00:20:18,320 --> 00:20:21,360
program or whatever

00:20:19,280 --> 00:20:23,440
you change assembler options you can

00:20:21,360 --> 00:20:25,440
have link edit control cards to

00:20:23,440 --> 00:20:28,159
that are included with the link that

00:20:25,440 --> 00:20:30,880
goes with the program again and saved

00:20:28,159 --> 00:20:31,919
and then by using the dvd interface the

00:20:30,880 --> 00:20:34,080
apis

00:20:31,919 --> 00:20:35,440
you can actually see the dependencies

00:20:34,080 --> 00:20:37,440
and whether it's a cis or not you can

00:20:35,440 --> 00:20:38,720
see the dependencies back on the dvd

00:20:37,440 --> 00:20:41,360
i'm not going to go into that at this

00:20:38,720 --> 00:20:43,600
point the dbb is

00:20:41,360 --> 00:20:44,880
used but you don't have to go through

00:20:43,600 --> 00:20:47,039
the reporting and stuff

00:20:44,880 --> 00:20:49,039
it's minimally used just just to keep

00:20:47,039 --> 00:20:50,559
the interface and some things alive

00:20:49,039 --> 00:20:52,880
so that's where we're at with that piece

00:20:50,559 --> 00:20:54,400
of it so here's a

00:20:52,880 --> 00:20:57,919
this might be again hard to read but

00:20:54,400 --> 00:20:57,919
here's the um

00:20:58,000 --> 00:21:01,520
the ide and as you can see the

00:20:59,840 --> 00:21:03,679
configuration files

00:21:01,520 --> 00:21:05,440
you have in different libraries you can

00:21:03,679 --> 00:21:07,760
have cobalt slash app one

00:21:05,440 --> 00:21:09,919
asterisk you can then compile all of

00:21:07,760 --> 00:21:12,320
those so those are the programs

00:21:09,919 --> 00:21:13,919
that you can select you can see that if

00:21:12,320 --> 00:21:14,640
you look at the options above on the

00:21:13,919 --> 00:21:17,280
green

00:21:14,640 --> 00:21:18,559
you can have rent right in the middle

00:21:17,280 --> 00:21:21,679
you can have the

00:21:18,559 --> 00:21:21,919
um hello cobalt you want to re you want

00:21:21,679 --> 00:21:24,080
as

00:21:21,919 --> 00:21:26,559
rent re-entrant you can have another

00:21:24,080 --> 00:21:29,760
program that has

00:21:26,559 --> 00:21:30,960
rent reuse you know flag make four let's

00:21:29,760 --> 00:21:32,880
go ball four

00:21:30,960 --> 00:21:34,480
you can have i want all the programs

00:21:32,880 --> 00:21:37,360
that are astrid cobalt

00:21:34,480 --> 00:21:39,440
i want them to be re-entrant i want uh

00:21:37,360 --> 00:21:40,640
all the programs in cobalt six i went to

00:21:39,440 --> 00:21:43,360
the s range

00:21:40,640 --> 00:21:45,120
i went hello hello to cobol i want that

00:21:43,360 --> 00:21:46,320
to be s range but then i can flip it

00:21:45,120 --> 00:21:48,159
back as you can see

00:21:46,320 --> 00:21:49,440
in the middle of the screen i can flip

00:21:48,159 --> 00:21:51,760
it back to be

00:21:49,440 --> 00:21:52,880
the no ss range and then below that is a

00:21:51,760 --> 00:21:54,400
link at it

00:21:52,880 --> 00:21:56,400
so i have my link edit for all my so i

00:21:54,400 --> 00:21:59,280
can have a default like edit ops for my

00:21:56,400 --> 00:22:00,320
all my bms maps my assembled office from

00:21:59,280 --> 00:22:02,960
bs maps

00:22:00,320 --> 00:22:03,840
i can invoke expediter so there's your

00:22:02,960 --> 00:22:07,360
expediter

00:22:03,840 --> 00:22:08,960
ability so any program that has

00:22:07,360 --> 00:22:10,520
you know the expediter tag on it will

00:22:08,960 --> 00:22:11,840
actually be compiled and built for

00:22:10,520 --> 00:22:13,440
expediter

00:22:11,840 --> 00:22:16,720
you can do all the programs you want or

00:22:13,440 --> 00:22:17,679
you can select which ones you want

00:22:16,720 --> 00:22:19,760
and you can see kind of the

00:22:17,679 --> 00:22:20,080
configuration on the right every this is

00:22:19,760 --> 00:22:23,200
the

00:22:20,080 --> 00:22:26,480
on the left side is a project explorer

00:22:23,200 --> 00:22:28,240
each type of uh

00:22:26,480 --> 00:22:29,679
program is in there so you got copy

00:22:28,240 --> 00:22:31,360
books you have easy tree

00:22:29,679 --> 00:22:33,520
you got your jco and you got your link

00:22:31,360 --> 00:22:34,880
at it you can also let's say i i don't

00:22:33,520 --> 00:22:36,080
ever want to build this or this program

00:22:34,880 --> 00:22:39,440
is coming out of the

00:22:36,080 --> 00:22:41,679
mix i can still compile every program

00:22:39,440 --> 00:22:42,559
but i don't want to compile this one i

00:22:41,679 --> 00:22:46,720
can move that to

00:22:42,559 --> 00:22:49,360
another to another non-designated

00:22:46,720 --> 00:22:50,559
directory called no build and then it

00:22:49,360 --> 00:22:52,559
will not build those

00:22:50,559 --> 00:22:53,919
there are the naming convention within

00:22:52,559 --> 00:22:55,360
the policy definitely determines whether

00:22:53,919 --> 00:22:57,520
it's going to get built or not built

00:22:55,360 --> 00:23:00,400
so they're hard-coded and you can see

00:22:57,520 --> 00:23:01,840
that within the polycephaly project

00:23:00,400 --> 00:23:03,840
and then you've got down below that on

00:23:01,840 --> 00:23:07,679
the left is the bill groovy script

00:23:03,840 --> 00:23:09,440
so that's what so this application

00:23:07,679 --> 00:23:11,360
executes a build of groovy script which

00:23:09,440 --> 00:23:13,520
then calls the polycephaly build group

00:23:11,360 --> 00:23:15,679
script which loads all the classes

00:23:13,520 --> 00:23:18,880
and then that's what does the build so

00:23:15,679 --> 00:23:22,159
the builds the bill groovy

00:23:18,880 --> 00:23:23,679
script doesn't need to be changed it's

00:23:22,159 --> 00:23:24,640
automatically set up to call the poly

00:23:23,679 --> 00:23:27,840
stephanie project

00:23:24,640 --> 00:23:27,840
so you don't have to mess with it

00:23:28,159 --> 00:23:31,919
so the routines that are in there i talk

00:23:29,600 --> 00:23:33,120
about these already

00:23:31,919 --> 00:23:36,799
there are a few of them that i haven't

00:23:33,120 --> 00:23:40,799
put in here ib copy ick dsf adr pssu

00:23:36,799 --> 00:23:44,559
id chems and then the df uh cs youtube

00:23:40,799 --> 00:23:46,640
is the one that builds the soap and apis

00:23:44,559 --> 00:23:49,279
um so there's a lot of things in here

00:23:46,640 --> 00:23:51,600
that can be we can add things real easy

00:23:49,279 --> 00:23:54,159
not a big deal to do that and they can

00:23:51,600 --> 00:23:57,279
be once we get the infrastructure built

00:23:54,159 --> 00:24:00,240
um we'll be able to add have developers

00:23:57,279 --> 00:24:00,720
do their ide deploy to the github or the

00:24:00,240 --> 00:24:02,400
get

00:24:00,720 --> 00:24:03,760
server and then we can build it on the

00:24:02,400 --> 00:24:04,960
infrastructure and then actually test

00:24:03,760 --> 00:24:09,120
out the polycephaly

00:24:04,960 --> 00:24:10,640
code itself so give you an example

00:24:09,120 --> 00:24:11,679
of what i've done with what's done this

00:24:10,640 --> 00:24:12,320
whole has done and you can tell this is

00:24:11,679 --> 00:24:15,440
back almost

00:24:12,320 --> 00:24:17,679
over a year ago year and a half ago on a

00:24:15,440 --> 00:24:20,080
3msu rail par which is a very very very

00:24:17,679 --> 00:24:23,520
small helper with everything running

00:24:20,080 --> 00:24:25,760
i ran 13 files

00:24:23,520 --> 00:24:27,600
i ran six copy books two bms maps and

00:24:25,760 --> 00:24:30,880
five programs

00:24:27,600 --> 00:24:33,279
it ran 34 seconds

00:24:30,880 --> 00:24:34,720
34 seconds from start to finish now

00:24:33,279 --> 00:24:36,480
that's creating all the pbs's that's

00:24:34,720 --> 00:24:38,080
putting everything up on the mainframe

00:24:36,480 --> 00:24:40,400
that's putting the the source book the

00:24:38,080 --> 00:24:41,200
copy books creating that creating the

00:24:40,400 --> 00:24:43,919
load library

00:24:41,200 --> 00:24:44,720
all of that goes up there at one time 34

00:24:43,919 --> 00:24:48,480
seconds

00:24:44,720 --> 00:24:50,880
and then use minimal amount of z os mips

00:24:48,480 --> 00:24:53,039
because all of the work most of the work

00:24:50,880 --> 00:24:55,840
probably 90 percent of work is done on

00:24:53,039 --> 00:24:57,840
the jenkins server the get server and

00:24:55,840 --> 00:24:59,840
only when z os is needed does the work

00:24:57,840 --> 00:25:02,640
go to z

00:24:59,840 --> 00:25:03,919
so that's a big savings as far as the os

00:25:02,640 --> 00:25:05,520
goes

00:25:03,919 --> 00:25:07,919
here's an application i did a full build

00:25:05,520 --> 00:25:09,760
of one of the applications

00:25:07,919 --> 00:25:12,000
yes it got an error i wanted to show you

00:25:09,760 --> 00:25:13,520
this because i took the full application

00:25:12,000 --> 00:25:14,799
and set everything to go to cobalt six

00:25:13,520 --> 00:25:16,559
compiler

00:25:14,799 --> 00:25:18,559
so there was an error yes because some

00:25:16,559 --> 00:25:20,480
of the programs need to be changed to

00:25:18,559 --> 00:25:23,760
work for cobalt six

00:25:20,480 --> 00:25:26,960
but again on three msu system there was

00:25:23,760 --> 00:25:31,760
330 000 lines 17 71 copy books

00:25:26,960 --> 00:25:34,960
145 cobalt programs 22 ac tree programs

00:25:31,760 --> 00:25:34,960
took 49 minutes

00:25:35,600 --> 00:25:38,799
so that's the communication time

00:25:37,360 --> 00:25:40,840
building the pdss

00:25:38,799 --> 00:25:42,480
all of that but that is a complete

00:25:40,840 --> 00:25:45,760
application

00:25:42,480 --> 00:25:49,679
145 programs 200 or 22

00:25:45,760 --> 00:25:50,640
e3 programs 49 minutes on a 3msu which

00:25:49,679 --> 00:25:53,840
is about

00:25:50,640 --> 00:25:54,720
i don't know 30 30 mips something like

00:25:53,840 --> 00:25:57,520
that

00:25:54,720 --> 00:26:00,720
so that is majority of the work again

00:25:57,520 --> 00:26:00,720
was done off the mainframe

00:26:01,679 --> 00:26:07,200
so polycephaly is an open mainframe

00:26:05,760 --> 00:26:10,799
project

00:26:07,200 --> 00:26:12,240
it is available the code's available

00:26:10,799 --> 00:26:15,360
under the open mainframe project

00:26:12,240 --> 00:26:19,039
under polycephaly you can go download it

00:26:15,360 --> 00:26:19,039

YouTube URL: https://www.youtube.com/watch?v=UvSsBUVmQ6c


