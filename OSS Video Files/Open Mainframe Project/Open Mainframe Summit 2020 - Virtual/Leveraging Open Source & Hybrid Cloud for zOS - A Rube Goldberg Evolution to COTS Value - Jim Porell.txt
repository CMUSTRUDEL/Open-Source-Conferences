Title: Leveraging Open Source & Hybrid Cloud for zOS - A Rube Goldberg Evolution to COTS Value - Jim Porell
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Leveraging Open Source and Hybrid Cloud for zOS - A Rube Goldberg Evolution to COTS Value - Jim Porell, Rocket Software 

New technologies on the mainframe seem to be all the rage. Attend most user groups and you’ll find out how they work and how they were built. But what can you use them for? How do they return revenue to your business or reduce costs? How do they make your jobs easier?  Here you’ll find some examples that are already underway at a wide variety of businesses to improve their IT environment. And it’s IT environment, not just mainframe. The important aspect is that many of these work on other systems as well as the mainframe. These capabilities are helping to evolve  the mainframe in a consistent way with other platforms. Topic areas that can exploit these technologies include Application Development, Security, System Monitoring, Data Access and Analytics.
Captions: 
	00:00:00,160 --> 00:00:04,640
hello thanks for coming to my session

00:00:02,240 --> 00:00:06,080
today leveraging open source and hybrid

00:00:04,640 --> 00:00:09,440
cloud for z os

00:00:06,080 --> 00:00:11,519
a rube goldberg evolution to cots value

00:00:09,440 --> 00:00:13,920
i'm jim perrell and i've been working on

00:00:11,519 --> 00:00:16,880
the mainframe for over 50 years

00:00:13,920 --> 00:00:19,039
in the early 1990s i began focusing on

00:00:16,880 --> 00:00:21,039
the open source capabilities of ibm's

00:00:19,039 --> 00:00:25,119
proprietary operating systems

00:00:21,039 --> 00:00:28,000
first mvs then os 390 and now zos

00:00:25,119 --> 00:00:29,439
that included unix system services open

00:00:28,000 --> 00:00:30,800
software foundations distributed

00:00:29,439 --> 00:00:33,920
computing environment

00:00:30,800 --> 00:00:36,719
and the introduction of tcp i mentioned

00:00:33,920 --> 00:00:39,840
rule goldberg only because a lot of this

00:00:36,719 --> 00:00:41,040
these apps can be tried first as proof

00:00:39,840 --> 00:00:42,960
of concepts

00:00:41,040 --> 00:00:44,640
and then if it's successful can possibly

00:00:42,960 --> 00:00:48,320
be supported by a vendor

00:00:44,640 --> 00:00:51,039
or ibm as production ready code tcpip

00:00:48,320 --> 00:00:52,879
was a great example of that process

00:00:51,039 --> 00:00:54,800
i'm going to spend some time today

00:00:52,879 --> 00:00:55,920
giving you examples of applications and

00:00:54,800 --> 00:00:58,480
capabilities

00:00:55,920 --> 00:00:59,199
that work as both open source or cloud

00:00:58,480 --> 00:01:00,879
ready

00:00:59,199 --> 00:01:02,399
that may not have full support behind

00:01:00,879 --> 00:01:04,080
them either way

00:01:02,399 --> 00:01:07,920
they can definitely help you solve some

00:01:04,080 --> 00:01:07,920
very important business problems

00:01:09,840 --> 00:01:13,360
different businesses have different

00:01:11,439 --> 00:01:15,280
goals for their mainframe

00:01:13,360 --> 00:01:16,720
some businesses just want to get off the

00:01:15,280 --> 00:01:19,040
mainframe and want to do it as

00:01:16,720 --> 00:01:20,960
expeditiously as possible

00:01:19,040 --> 00:01:22,640
other businesses plan to keep using it

00:01:20,960 --> 00:01:24,960
the same way as always

00:01:22,640 --> 00:01:26,000
which i call protect their business but

00:01:24,960 --> 00:01:28,400
are not really looking to

00:01:26,000 --> 00:01:30,159
invest tremendously in it many

00:01:28,400 --> 00:01:31,759
businesses believe that the mainframe is

00:01:30,159 --> 00:01:34,240
a critical component of their i.t

00:01:31,759 --> 00:01:35,759
infrastructure and continue to modernize

00:01:34,240 --> 00:01:37,280
enhance and leverage it for their

00:01:35,759 --> 00:01:39,200
business value

00:01:37,280 --> 00:01:40,479
regardless of their business perception

00:01:39,200 --> 00:01:42,399
of the mainframe

00:01:40,479 --> 00:01:43,600
open source and cloud technologies can

00:01:42,399 --> 00:01:45,280
be leveraged in each of these

00:01:43,600 --> 00:01:48,000
environments to help satisfy their

00:01:45,280 --> 00:01:48,000
business goals

00:01:48,560 --> 00:01:52,560
many times i hear a customer talk about

00:01:50,479 --> 00:01:53,759
the cloud versus the mainframe

00:01:52,560 --> 00:01:55,600
but i always wondered what their

00:01:53,759 --> 00:01:57,680
definition of the cloud was

00:01:55,600 --> 00:01:59,040
it seems to be everything and sometimes

00:01:57,680 --> 00:02:00,399
nothing at all

00:01:59,040 --> 00:02:02,479
so i took a little bit of time and

00:02:00,399 --> 00:02:04,000
interviewed some customers to figure out

00:02:02,479 --> 00:02:06,320
how do they perceive the cloud in their

00:02:04,000 --> 00:02:08,080
environment i found there were four

00:02:06,320 --> 00:02:10,720
major capabilities

00:02:08,080 --> 00:02:12,800
one the end user interface let's call it

00:02:10,720 --> 00:02:13,920
the desktop the mobile device or the web

00:02:12,800 --> 00:02:15,440
browser

00:02:13,920 --> 00:02:18,160
it's how those different systems are

00:02:15,440 --> 00:02:21,760
hosted they are the system of engagement

00:02:18,160 --> 00:02:24,080
and provide an end user experience

00:02:21,760 --> 00:02:26,000
next we have production applications

00:02:24,080 --> 00:02:28,400
these are also cloud hosted

00:02:26,000 --> 00:02:32,000
anybody can subscribe to them these apps

00:02:28,400 --> 00:02:34,640
provide a particular function

00:02:32,000 --> 00:02:36,879
next here's the data which those apps

00:02:34,640 --> 00:02:40,080
operate against that data can come from

00:02:36,879 --> 00:02:40,080
a variety of sources

00:02:40,239 --> 00:02:43,840
and finally there's a development

00:02:42,000 --> 00:02:44,560
environment from which the apps are

00:02:43,840 --> 00:02:46,239
created

00:02:44,560 --> 00:02:47,680
and then later hosted into this cloud

00:02:46,239 --> 00:02:49,440
environment

00:02:47,680 --> 00:02:50,879
what's important is each of these are

00:02:49,440 --> 00:02:52,560
individually provisioned

00:02:50,879 --> 00:02:54,080
there's no such thing as all these

00:02:52,560 --> 00:02:54,800
components in a single operating

00:02:54,080 --> 00:02:57,760
environment

00:02:54,800 --> 00:02:59,599
like zos the customer might leverage any

00:02:57,760 --> 00:03:00,959
one of these popular cloud mechanisms

00:02:59,599 --> 00:03:03,440
like amazon

00:03:00,959 --> 00:03:04,000
ibm cloud openstack openshift or

00:03:03,440 --> 00:03:06,480
microsoft

00:03:04,000 --> 00:03:08,560
azure but they'll get a cloud instance

00:03:06,480 --> 00:03:10,879
that does a single task

00:03:08,560 --> 00:03:12,720
for scale and disaster recovery they

00:03:10,879 --> 00:03:13,519
have multiple cloud instances working in

00:03:12,720 --> 00:03:16,000
a cluster

00:03:13,519 --> 00:03:16,879
to meet their service level goals i'm

00:03:16,000 --> 00:03:20,159
going to discuss

00:03:16,879 --> 00:03:22,560
how do these clouds and zos intersect

00:03:20,159 --> 00:03:24,480
and use open source technology to bring

00:03:22,560 --> 00:03:25,680
the two pieces together

00:03:24,480 --> 00:03:28,159
it's important to know that the

00:03:25,680 --> 00:03:28,799
mainframe is not an island it is blind

00:03:28,159 --> 00:03:30,319
in depth

00:03:28,799 --> 00:03:32,000
and depends on a great system of

00:03:30,319 --> 00:03:34,560
engagement as the end user

00:03:32,000 --> 00:03:36,239
interface an enlightened company will

00:03:34,560 --> 00:03:37,120
recognize this and find ways for the

00:03:36,239 --> 00:03:39,440
mainframe

00:03:37,120 --> 00:03:43,280
cloud technology and open systems to

00:03:39,440 --> 00:03:43,280
collaborate for overall success

00:03:44,080 --> 00:03:47,840
many businesses believe the mainframe is

00:03:46,000 --> 00:03:50,560
a standalone operation

00:03:47,840 --> 00:03:52,480
and manage it as a silo independently of

00:03:50,560 --> 00:03:53,920
desktops mobile and cloud computing

00:03:52,480 --> 00:03:55,680
servers

00:03:53,920 --> 00:03:57,360
this chart shows that any particular

00:03:55,680 --> 00:03:59,519
mainframe instance

00:03:57,360 --> 00:04:01,760
could be anywhere on a curve toward

00:03:59,519 --> 00:04:03,760
collaboration with the cloud

00:04:01,760 --> 00:04:05,920
what's important to note is that not all

00:04:03,760 --> 00:04:07,840
z systems are legacy systems

00:04:05,920 --> 00:04:09,680
and avoid this cloud connectivity and

00:04:07,840 --> 00:04:11,680
open source usage

00:04:09,680 --> 00:04:12,720
and not all legacy applications run on

00:04:11,680 --> 00:04:14,879
system z

00:04:12,720 --> 00:04:16,560
in fact you can find many running in the

00:04:14,879 --> 00:04:17,680
desktop environment that inhibits

00:04:16,560 --> 00:04:19,440
abilities

00:04:17,680 --> 00:04:22,079
of businesses ability to modernize

00:04:19,440 --> 00:04:22,079
effectively

00:04:23,680 --> 00:04:28,479
the crown jewel of the mainframe is its

00:04:26,000 --> 00:04:29,280
ability to host data the system of

00:04:28,479 --> 00:04:30,880
record

00:04:29,280 --> 00:04:32,960
as well as provide the transaction

00:04:30,880 --> 00:04:34,160
processing to update and manage that

00:04:32,960 --> 00:04:35,840
data

00:04:34,160 --> 00:04:37,280
so regardless of the business's

00:04:35,840 --> 00:04:39,040
intentions

00:04:37,280 --> 00:04:40,880
access to that data is a critical

00:04:39,040 --> 00:04:43,759
success factor

00:04:40,880 --> 00:04:45,520
there are two primary ways to do that

00:04:43,759 --> 00:04:48,080
one is replication of data

00:04:45,520 --> 00:04:49,759
or copying it to the cloud the other is

00:04:48,080 --> 00:04:52,080
to use data virtualization

00:04:49,759 --> 00:04:54,400
or in effect share that data with the

00:04:52,080 --> 00:04:54,400
cloud

00:04:55,040 --> 00:04:58,560
think about this new data access as a

00:04:57,199 --> 00:05:00,880
data lake

00:04:58,560 --> 00:05:02,479
there's not just one fish in your lake

00:05:00,880 --> 00:05:03,680
there are multiple types of data that

00:05:02,479 --> 00:05:05,680
can be consumed

00:05:03,680 --> 00:05:07,840
and those data instances might come from

00:05:05,680 --> 00:05:10,400
a variety of sources

00:05:07,840 --> 00:05:11,039
with replication data is copied from a

00:05:10,400 --> 00:05:12,960
source

00:05:11,039 --> 00:05:14,400
and may be merged with other data to

00:05:12,960 --> 00:05:17,120
build this lake

00:05:14,400 --> 00:05:18,960
it's typically read only the lake must

00:05:17,120 --> 00:05:20,080
have its own security controls and its

00:05:18,960 --> 00:05:22,400
own replication

00:05:20,080 --> 00:05:24,000
for high availability and resilience

00:05:22,400 --> 00:05:26,960
there's a cost to maintain the

00:05:24,000 --> 00:05:27,759
data in a timely fashion on the other

00:05:26,960 --> 00:05:30,000
hand

00:05:27,759 --> 00:05:30,960
data virtualization looks to share data

00:05:30,000 --> 00:05:34,080
by pulling it down

00:05:30,960 --> 00:05:36,000
closer to a real-time model many times

00:05:34,080 --> 00:05:37,360
it can incorporate both updates as well

00:05:36,000 --> 00:05:39,360
as read-only

00:05:37,360 --> 00:05:42,160
it can leverage its existing security

00:05:39,360 --> 00:05:44,479
controls and existing data resilience

00:05:42,160 --> 00:05:46,720
for high availability data

00:05:44,479 --> 00:05:47,600
virtualization provides a near real-time

00:05:46,720 --> 00:05:52,320
latency

00:05:47,600 --> 00:05:54,800
for accessing the data

00:05:52,320 --> 00:05:56,479
as we look at data virtualization there

00:05:54,800 --> 00:05:58,639
are three technologies

00:05:56,479 --> 00:06:00,319
that ibm provides today to facilitate

00:05:58,639 --> 00:06:02,639
building data lakes

00:06:00,319 --> 00:06:04,639
one is the cloud pack for data which

00:06:02,639 --> 00:06:07,120
will help maintain copies of data or

00:06:04,639 --> 00:06:08,960
access to data but from a cloud-hosted

00:06:07,120 --> 00:06:12,240
environment

00:06:08,960 --> 00:06:13,120
two is data virtualization manager for z

00:06:12,240 --> 00:06:14,880
os

00:06:13,120 --> 00:06:17,440
which will leverage the mainframe as the

00:06:14,880 --> 00:06:18,880
data lake and allow you to collaborate

00:06:17,440 --> 00:06:21,520
with a variety of sources on the

00:06:18,880 --> 00:06:23,759
mainframe and other platforms

00:06:21,520 --> 00:06:25,360
and three is datagate the latest

00:06:23,759 --> 00:06:27,199
technology to be announced

00:06:25,360 --> 00:06:29,199
it uses a high-speed read-only

00:06:27,199 --> 00:06:32,479
environment for data virtualization

00:06:29,199 --> 00:06:35,199
and hosting within a cloud environment

00:06:32,479 --> 00:06:36,960
regardless of the technology leveraged a

00:06:35,199 --> 00:06:40,800
wide range of systems

00:06:36,960 --> 00:06:42,400
and non-system z data can be leveraged

00:06:40,800 --> 00:06:44,080
which offering is best for a given

00:06:42,400 --> 00:06:46,160
situation

00:06:44,080 --> 00:06:47,520
using an 80 20 rule it makes sense to

00:06:46,160 --> 00:06:50,000
host the data where 80

00:06:47,520 --> 00:06:51,759
of it originates in the first place if

00:06:50,000 --> 00:06:54,000
the bulk of the data being accessed for

00:06:51,759 --> 00:06:55,919
your lake originates on z os

00:06:54,000 --> 00:06:57,039
then the most economical method of

00:06:55,919 --> 00:07:03,840
building the data lake

00:06:57,039 --> 00:07:03,840
would be by leveraging dvm for z os

00:07:04,560 --> 00:07:07,840
the prior couple of charts talked about

00:07:06,560 --> 00:07:09,680
building the data lake

00:07:07,840 --> 00:07:10,880
but now we have to access the data in

00:07:09,680 --> 00:07:12,880
the lake

00:07:10,880 --> 00:07:13,919
many times that'll be an analytic

00:07:12,880 --> 00:07:15,599
application

00:07:13,919 --> 00:07:17,280
that's trying to garner insight from the

00:07:15,599 --> 00:07:19,680
data again

00:07:17,280 --> 00:07:21,199
using the 80 20 rule that the data is

00:07:19,680 --> 00:07:22,479
resident on z os

00:07:21,199 --> 00:07:24,400
and you might as well host the

00:07:22,479 --> 00:07:25,520
applications to do the analytics there

00:07:24,400 --> 00:07:27,599
as well

00:07:25,520 --> 00:07:29,599
programs like spark and application

00:07:27,599 --> 00:07:31,520
programming languages like python

00:07:29,599 --> 00:07:33,520
are leveraged regularly to build these

00:07:31,520 --> 00:07:35,440
analytic applications

00:07:33,520 --> 00:07:36,880
there's no reason those applications

00:07:35,440 --> 00:07:39,280
can't run on z os

00:07:36,880 --> 00:07:41,280
and provide faster time to value by

00:07:39,280 --> 00:07:42,319
operating locally against the resident

00:07:41,280 --> 00:07:44,160
data

00:07:42,319 --> 00:07:47,039
and as mentioned with dbm on the prior

00:07:44,160 --> 00:07:48,000
charts non-z data such as from hadoop or

00:07:47,039 --> 00:07:49,759
other sources

00:07:48,000 --> 00:07:52,080
can also be accessed by the same

00:07:49,759 --> 00:07:54,879
analytic applications

00:07:52,080 --> 00:07:56,560
using data virtualization capabilities

00:07:54,879 --> 00:07:57,280
if you remember the original cloud chart

00:07:56,560 --> 00:07:59,840
i presented

00:07:57,280 --> 00:08:01,840
there were four parts two of those parts

00:07:59,840 --> 00:08:02,479
the production application and the data

00:08:01,840 --> 00:08:05,360
lake

00:08:02,479 --> 00:08:05,680
can easily be deployed on z os we'll get

00:08:05,360 --> 00:08:12,800
to

00:08:05,680 --> 00:08:14,639
application development in a bit

00:08:12,800 --> 00:08:16,560
customers have been using tape drives

00:08:14,639 --> 00:08:18,479
and slower disk drives to backup and

00:08:16,560 --> 00:08:19,520
manage an archive of data for many many

00:08:18,479 --> 00:08:22,240
years

00:08:19,520 --> 00:08:22,800
true products have been introduced the

00:08:22,240 --> 00:08:25,520
ibm

00:08:22,800 --> 00:08:26,080
cloud tape connector for z os and the

00:08:25,520 --> 00:08:29,360
ibm

00:08:26,080 --> 00:08:31,039
advanced archive for dfsms or hsm

00:08:29,360 --> 00:08:33,839
that enable the cloud to be a target for

00:08:31,039 --> 00:08:36,479
data backup archive and migration

00:08:33,839 --> 00:08:38,880
these are software and only deployments

00:08:36,479 --> 00:08:41,279
that are independent of hardware vendor

00:08:38,880 --> 00:08:42,800
they're also independent of cloud vendor

00:08:41,279 --> 00:08:44,080
that can help disaster recovery

00:08:42,800 --> 00:08:46,000
scenarios

00:08:44,080 --> 00:08:47,120
speed time to availability over physical

00:08:46,000 --> 00:08:48,640
tape drives

00:08:47,120 --> 00:08:51,440
and the need to move those physical

00:08:48,640 --> 00:08:53,120
devices from one location to another

00:08:51,440 --> 00:08:55,839
they are built with security encryption

00:08:53,120 --> 00:08:56,640
in mind so that the data is protected on

00:08:55,839 --> 00:08:59,279
every step

00:08:56,640 --> 00:08:59,279
of the journey

00:09:01,519 --> 00:09:06,000
continuing the journey into security

00:09:03,760 --> 00:09:08,240
legacy passwords and user ids

00:09:06,000 --> 00:09:09,839
are no longer securely sufficient to

00:09:08,240 --> 00:09:11,760
meet a wide range of industry and

00:09:09,839 --> 00:09:15,040
multinational regulations

00:09:11,760 --> 00:09:15,839
or secure authentication systems those

00:09:15,040 --> 00:09:19,040
regulations

00:09:15,839 --> 00:09:21,600
mandate multi-factor authentication

00:09:19,040 --> 00:09:22,399
mfa is some combination of something you

00:09:21,600 --> 00:09:25,120
know

00:09:22,399 --> 00:09:26,480
something you have and something you are

00:09:25,120 --> 00:09:29,519
aki

00:09:26,480 --> 00:09:30,800
biometrics your user id and password are

00:09:29,519 --> 00:09:32,320
something you know

00:09:30,800 --> 00:09:33,920
but but they would be used in

00:09:32,320 --> 00:09:35,360
combination with something that you have

00:09:33,920 --> 00:09:37,600
like your cell phone

00:09:35,360 --> 00:09:39,279
a hardware token or biometric

00:09:37,600 --> 00:09:42,160
authentication

00:09:39,279 --> 00:09:44,000
the ibm z mfa offering is capable of

00:09:42,160 --> 00:09:46,080
interoperating with a wide range of

00:09:44,000 --> 00:09:48,160
third-party mfa solutions

00:09:46,080 --> 00:09:50,640
including those that are cloud hosted or

00:09:48,160 --> 00:09:52,320
open source hosted

00:09:50,640 --> 00:09:54,399
this chart reflects a couple of those

00:09:52,320 --> 00:09:56,160
examples you'll never achieve something

00:09:54,399 --> 00:09:57,440
like a true single sign-on to all

00:09:56,160 --> 00:09:59,600
platforms

00:09:57,440 --> 00:10:00,800
but you can have a consistent sign-on to

00:09:59,600 --> 00:10:02,959
the mainframe as well as

00:10:00,800 --> 00:10:05,279
many other systems with the businesses

00:10:02,959 --> 00:10:07,040
it infrastructure

00:10:05,279 --> 00:10:09,040
and don't be fooled that the deployment

00:10:07,040 --> 00:10:10,800
of mfa on a desktop alone will protect

00:10:09,040 --> 00:10:12,959
the mainframe

00:10:10,800 --> 00:10:14,480
any use of user id and password alone to

00:10:12,959 --> 00:10:16,640
authenticate to the mainframe

00:10:14,480 --> 00:10:18,880
is susceptible to insider theft or

00:10:16,640 --> 00:10:21,760
malicious key logging from those desktop

00:10:18,880 --> 00:10:22,880
and mobile devices all users connected

00:10:21,760 --> 00:10:24,720
to the mainframe

00:10:22,880 --> 00:10:26,720
have access to critical business

00:10:24,720 --> 00:10:29,040
information and as a result

00:10:26,720 --> 00:10:30,480
every user should leverage nfa to

00:10:29,040 --> 00:10:34,480
securely authenticate

00:10:30,480 --> 00:10:34,480
to their mission critical applications

00:10:37,200 --> 00:10:40,640
there's a lot being done around using

00:10:39,040 --> 00:10:42,240
open source technology

00:10:40,640 --> 00:10:43,760
to improve the user experience on the

00:10:42,240 --> 00:10:45,600
mainframe

00:10:43,760 --> 00:10:47,600
chief among them is the exploitation of

00:10:45,600 --> 00:10:49,279
zoe technology by middleware products

00:10:47,600 --> 00:10:51,279
and the operating system

00:10:49,279 --> 00:10:52,480
the overall goal is to reduce the effort

00:10:51,279 --> 00:10:54,959
to complete tasks

00:10:52,480 --> 00:10:56,959
reduce training time and simplify legacy

00:10:54,959 --> 00:10:58,480
tasks and experiences

00:10:56,959 --> 00:11:00,640
but i'm going to give a couple different

00:10:58,480 --> 00:11:01,839
examples of using using other open

00:11:00,640 --> 00:11:03,519
source technology

00:11:01,839 --> 00:11:05,440
to accomplish similar goals in a way

00:11:03,519 --> 00:11:08,480
that's consistent across the mainframe

00:11:05,440 --> 00:11:08,480
and other platforms

00:11:11,839 --> 00:11:16,560
let's start by looking at performance

00:11:13,440 --> 00:11:18,480
analysis and security alert auditing

00:11:16,560 --> 00:11:19,760
ibm has a number of products that

00:11:18,480 --> 00:11:22,959
collect data

00:11:19,760 --> 00:11:24,720
process it and provide alerts each of

00:11:22,959 --> 00:11:25,519
these may have their own dashboards if

00:11:24,720 --> 00:11:28,079
you will

00:11:25,519 --> 00:11:30,240
whether it's ispf or web-based for their

00:11:28,079 --> 00:11:32,800
particular component area

00:11:30,240 --> 00:11:33,519
some like the ibm transaction analysis

00:11:32,800 --> 00:11:36,000
workbench

00:11:33,519 --> 00:11:38,079
or the omegamon family of products will

00:11:36,000 --> 00:11:39,519
process data across multiple subsystems

00:11:38,079 --> 00:11:41,519
on the mainframe

00:11:39,519 --> 00:11:43,200
but they're largely mainframe centric

00:11:41,519 --> 00:11:44,959
dashboards

00:11:43,200 --> 00:11:46,320
as we discussed earlier the mainframe is

00:11:44,959 --> 00:11:48,959
not an island and therefore

00:11:46,320 --> 00:11:50,560
fits into a larger i.t picture there are

00:11:48,959 --> 00:11:52,000
a variety of open source and

00:11:50,560 --> 00:11:54,079
cloud-hosted tools

00:11:52,000 --> 00:11:56,720
from which those ibm offerings can also

00:11:54,079 --> 00:12:00,399
make data available for additional

00:11:56,720 --> 00:12:00,399
diagnostic and alert processing

00:12:01,680 --> 00:12:06,000
for example splunk is used by many

00:12:04,160 --> 00:12:07,839
businesses for analytics and against

00:12:06,000 --> 00:12:08,959
performance metrics as well as security

00:12:07,839 --> 00:12:11,120
alerts

00:12:08,959 --> 00:12:13,279
all the ibm offerings can make data

00:12:11,120 --> 00:12:16,639
available in json format

00:12:13,279 --> 00:12:17,040
to be loaded into those tools some like

00:12:16,639 --> 00:12:19,120
the

00:12:17,040 --> 00:12:21,279
ims performance analysis tool can

00:12:19,120 --> 00:12:23,279
actually stream the json format

00:12:21,279 --> 00:12:25,519
the data directly to those products to

00:12:23,279 --> 00:12:28,560
get real-time analysis going

00:12:25,519 --> 00:12:29,600
the guardium s-tap offerings for ims tb2

00:12:28,560 --> 00:12:31,440
and datasets

00:12:29,600 --> 00:12:34,079
can also stream data via the guardium

00:12:31,440 --> 00:12:36,320
collector into a splunk dashboard for

00:12:34,079 --> 00:12:38,480
security purposes

00:12:36,320 --> 00:12:41,120
splunk does not run inside either linux

00:12:38,480 --> 00:12:43,600
versus system z or z os

00:12:41,120 --> 00:12:45,680
however there are several open source

00:12:43,600 --> 00:12:46,160
software components such as the elk

00:12:45,680 --> 00:12:50,000
stack

00:12:46,160 --> 00:12:51,920
elastic logstash kibana

00:12:50,000 --> 00:12:54,240
as well as grafana that can run on linux

00:12:51,920 --> 00:12:55,519
for z and because they can run on linux

00:12:54,240 --> 00:12:57,839
for z in a container

00:12:55,519 --> 00:12:58,880
they can also run within z os container

00:12:57,839 --> 00:13:02,240
extensions

00:12:58,880 --> 00:13:04,240
on z os 2.4 and above here's a quick

00:13:02,240 --> 00:13:04,880
demo of the ims performance analysis

00:13:04,240 --> 00:13:07,279
tool

00:13:04,880 --> 00:13:08,560
streaming data through the elk stack to

00:13:07,279 --> 00:13:10,399
grafana

00:13:08,560 --> 00:13:12,720
where the dashboard can quickly be

00:13:10,399 --> 00:13:15,760
hosted all within the z os

00:13:12,720 --> 00:13:17,600
environment it can help simplify the

00:13:15,760 --> 00:13:19,440
entire deployment model for a business

00:13:17,600 --> 00:13:23,040
and reduce or eliminate the need

00:13:19,440 --> 00:13:25,360
for a helper cloud app to get that value

00:13:23,040 --> 00:13:27,360
oh in this particular demo we're seeing

00:13:25,360 --> 00:13:28,639
a dashboard that was set up by the end

00:13:27,360 --> 00:13:30,959
user team

00:13:28,639 --> 00:13:32,000
and leveraging grafana as the

00:13:30,959 --> 00:13:35,360
presentation

00:13:32,000 --> 00:13:38,320
dashboard by using the elk case stack

00:13:35,360 --> 00:13:40,160
to grab that data and be able to present

00:13:38,320 --> 00:13:41,600
it in a variety of different ways that

00:13:40,160 --> 00:13:44,639
are way

00:13:41,600 --> 00:13:46,000
more valuable and understandable than

00:13:44,639 --> 00:13:49,839
you would if you were to look at this

00:13:46,000 --> 00:13:49,839
via an ispf panel

00:13:53,519 --> 00:13:58,480
as a consultant before joining rocket i

00:13:56,240 --> 00:14:01,440
assisted the vendor importing 56 amazon

00:13:58,480 --> 00:14:03,600
docker containers to linux on system z

00:14:01,440 --> 00:14:04,800
my ultimate goal was to get these inside

00:14:03,600 --> 00:14:07,440
z os

00:14:04,800 --> 00:14:10,079
this predated ibm's introduction of zcx

00:14:07,440 --> 00:14:12,240
containers in z os 2.4

00:14:10,079 --> 00:14:13,120
i recognized that by co-locating those

00:14:12,240 --> 00:14:14,880
containers

00:14:13,120 --> 00:14:16,720
with the middleware subsystems that they

00:14:14,880 --> 00:14:18,320
were trying to collaborate with

00:14:16,720 --> 00:14:20,480
there would be significant value for

00:14:18,320 --> 00:14:22,560
this deployment model over a traditional

00:14:20,480 --> 00:14:24,320
non-z cloud deployment

00:14:22,560 --> 00:14:26,079
for example disaster recovery and

00:14:24,320 --> 00:14:27,519
security are already built into the

00:14:26,079 --> 00:14:29,360
mainframe environment

00:14:27,519 --> 00:14:31,040
the performance latency would be better

00:14:29,360 --> 00:14:32,720
by leveraging hypersockets

00:14:31,040 --> 00:14:35,440
between the container and the z os

00:14:32,720 --> 00:14:36,959
application the overall cost will be

00:14:35,440 --> 00:14:38,480
reduced because of the fewer number of

00:14:36,959 --> 00:14:41,360
physical server images

00:14:38,480 --> 00:14:42,000
necessary to meet the business needs net

00:14:41,360 --> 00:14:43,519
result

00:14:42,000 --> 00:14:46,000
it's the same code in a different

00:14:43,519 --> 00:14:48,320
container with a superior operations

00:14:46,000 --> 00:14:48,320
model

00:14:50,959 --> 00:14:54,399
this chart is using the specific ims

00:14:53,040 --> 00:14:56,720
performance analyzer

00:14:54,399 --> 00:14:58,000
and its ability to stream json formatted

00:14:56,720 --> 00:15:00,000
data into an analytics

00:14:58,000 --> 00:15:01,600
application as well as into other

00:15:00,000 --> 00:15:03,120
middleware that can help resolve or

00:15:01,600 --> 00:15:04,720
identify problems from an ibm

00:15:03,120 --> 00:15:06,639
perspective

00:15:04,720 --> 00:15:08,560
as i showed you with the earlier demo

00:15:06,639 --> 00:15:10,800
combinations of ibm offered

00:15:08,560 --> 00:15:12,000
or open source tooling can be leveraged

00:15:10,800 --> 00:15:15,120
to help diagnose system

00:15:12,000 --> 00:15:17,040
images system issues you'll see in the

00:15:15,120 --> 00:15:18,639
handout that i provided links

00:15:17,040 --> 00:15:20,320
to more information about how to put

00:15:18,639 --> 00:15:27,839
these pieces together yourself

00:15:20,320 --> 00:15:27,839
within your environment

00:15:29,199 --> 00:15:32,320
if anyone has ever done any automation

00:15:31,199 --> 00:15:34,720
using rex

00:15:32,320 --> 00:15:35,839
c list or other scripting program i

00:15:34,720 --> 00:15:37,040
think you're really going to like

00:15:35,839 --> 00:15:38,959
ansible

00:15:37,040 --> 00:15:40,480
the ansible playbooks enable you to work

00:15:38,959 --> 00:15:42,880
not only on z os

00:15:40,480 --> 00:15:45,040
but with other platforms the original

00:15:42,880 --> 00:15:46,560
usage was for development environments

00:15:45,040 --> 00:15:48,880
which we'll talk about in a moment to

00:15:46,560 --> 00:15:51,040
provision application images

00:15:48,880 --> 00:15:53,440
however it has evolved to be able to

00:15:51,040 --> 00:15:56,079
handle real production workloads

00:15:53,440 --> 00:15:58,160
and ibm is investing to make connectors

00:15:56,079 --> 00:16:01,120
available to a wide variety

00:15:58,160 --> 00:16:02,639
of z os functions so that they can fully

00:16:01,120 --> 00:16:05,279
participate

00:16:02,639 --> 00:16:07,279
within an ansible playbook i could

00:16:05,279 --> 00:16:08,000
certainly envision some mainframers with

00:16:07,279 --> 00:16:10,079
their island

00:16:08,000 --> 00:16:12,480
hats on that don't want to depend on the

00:16:10,079 --> 00:16:13,920
non-mainframe implementation of ansible

00:16:12,480 --> 00:16:15,680
to choreograph their production

00:16:13,920 --> 00:16:17,600
operations

00:16:15,680 --> 00:16:19,040
there is a version of ansible available

00:16:17,600 --> 00:16:21,680
as a linux container

00:16:19,040 --> 00:16:23,279
that can run inside z linux so the

00:16:21,680 --> 00:16:25,120
mainframes can be in charge of running

00:16:23,279 --> 00:16:27,680
their own playbooks

00:16:25,120 --> 00:16:29,839
and with ansible being written in python

00:16:27,680 --> 00:16:31,600
there's no reason a native z os version

00:16:29,839 --> 00:16:33,360
can't run as well

00:16:31,600 --> 00:16:34,959
however i'd be hesitant to run a native

00:16:33,360 --> 00:16:37,120
z os version of ansible

00:16:34,959 --> 00:16:38,560
unless it was zip eligible to reduce

00:16:37,120 --> 00:16:40,639
software cost

00:16:38,560 --> 00:16:42,720
but that container version on linux can

00:16:40,639 --> 00:16:44,639
also run within ccx

00:16:42,720 --> 00:16:46,399
again trying to collapse the overall

00:16:44,639 --> 00:16:51,839
infrastructure to meet some of your

00:16:46,399 --> 00:16:51,839
business needs

00:16:53,199 --> 00:16:56,880
saving the best for last the greatest

00:16:55,600 --> 00:16:58,399
wealth of open source

00:16:56,880 --> 00:17:00,399
exists within a modern development

00:16:58,399 --> 00:17:01,920
environment as we've learned

00:17:00,399 --> 00:17:04,240
historically through the ibm

00:17:01,920 --> 00:17:05,280
rational brand and now ibm developer for

00:17:04,240 --> 00:17:08,240
z

00:17:05,280 --> 00:17:10,240
development belongs on non-mainframes to

00:17:08,240 --> 00:17:12,640
leverage the value of graphic tooling to

00:17:10,240 --> 00:17:14,880
generate and edit code

00:17:12,640 --> 00:17:16,160
this chart lists a number of open source

00:17:14,880 --> 00:17:18,880
tools available as

00:17:16,160 --> 00:17:20,240
is though many have service agreements

00:17:18,880 --> 00:17:21,520
for production-ready development

00:17:20,240 --> 00:17:24,240
environments

00:17:21,520 --> 00:17:24,959
library management version control code

00:17:24,240 --> 00:17:27,919
generation

00:17:24,959 --> 00:17:30,240
code editing provisioning and testing

00:17:27,919 --> 00:17:30,640
can be done with a wide range of open

00:17:30,240 --> 00:17:33,760
source

00:17:30,640 --> 00:17:37,039
tools that connect and play well with

00:17:33,760 --> 00:17:37,039
z os source code

00:17:39,679 --> 00:17:43,520
with application development we

00:17:41,679 --> 00:17:45,360
understand the importance of source code

00:17:43,520 --> 00:17:46,559
version control and testing prior to

00:17:45,360 --> 00:17:48,880
production

00:17:46,559 --> 00:17:51,840
but that remains just as important for

00:17:48,880 --> 00:17:54,960
database code and table definitions

00:17:51,840 --> 00:17:56,720
db2 devops experience was developed to

00:17:54,960 --> 00:17:59,200
make the database accessible at the

00:17:56,720 --> 00:18:01,600
speed of developers

00:17:59,200 --> 00:18:03,440
changes to schemas can be understood and

00:18:01,600 --> 00:18:05,360
choreographed with corresponding

00:18:03,440 --> 00:18:07,360
application changes

00:18:05,360 --> 00:18:08,480
this allows for true continuous

00:18:07,360 --> 00:18:10,640
integration

00:18:08,480 --> 00:18:12,080
and continuous development with both

00:18:10,640 --> 00:18:15,760
transaction programs

00:18:12,080 --> 00:18:16,400
and db2 databases this also meets the

00:18:15,760 --> 00:18:18,720
needs for

00:18:16,400 --> 00:18:20,240
database as a service for these

00:18:18,720 --> 00:18:22,720
developers

00:18:20,240 --> 00:18:24,559
db2 devops experience can work easily

00:18:22,720 --> 00:18:27,360
with all the open source tooling

00:18:24,559 --> 00:18:28,000
identified in the prior chart in any of

00:18:27,360 --> 00:18:31,520
the ibm

00:18:28,000 --> 00:18:33,280
offerings as a result a business has the

00:18:31,520 --> 00:18:34,240
flexibility to choose what they feel

00:18:33,280 --> 00:18:36,000
best meets

00:18:34,240 --> 00:18:37,360
their business needs while enabling a

00:18:36,000 --> 00:18:40,559
faster time to market

00:18:37,360 --> 00:18:40,559
for database changes

00:18:40,960 --> 00:18:46,000
now back where i started regardless of a

00:18:44,000 --> 00:18:46,720
business's desire to either get off the

00:18:46,000 --> 00:18:50,000
mainframe

00:18:46,720 --> 00:18:52,320
stabilize it or grow with it open source

00:18:50,000 --> 00:18:55,280
and cloud technologies can help them

00:18:52,320 --> 00:18:57,360
speed their desired transitions

00:18:55,280 --> 00:19:00,080
businesses can grow their overall i.t

00:18:57,360 --> 00:19:03,600
skills in a synergistic fashion

00:19:00,080 --> 00:19:04,799
across platforms thanks very much for

00:19:03,600 --> 00:19:06,559
joining us today

00:19:04,799 --> 00:19:08,640
if you have any questions don't hesitate

00:19:06,559 --> 00:19:10,480
to ask or reach out to me via the

00:19:08,640 --> 00:19:11,760
contact information provided for the

00:19:10,480 --> 00:19:16,640
session

00:19:11,760 --> 00:19:16,640

YouTube URL: https://www.youtube.com/watch?v=QVGfoKbFCy8


