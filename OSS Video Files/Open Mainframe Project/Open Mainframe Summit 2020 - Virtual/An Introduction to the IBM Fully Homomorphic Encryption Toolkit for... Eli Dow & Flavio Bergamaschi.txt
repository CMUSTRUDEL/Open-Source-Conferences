Title: An Introduction to the IBM Fully Homomorphic Encryption Toolkit for... Eli Dow & Flavio Bergamaschi
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	An Introduction to the IBM Fully Homomorphic Encryption Toolkit for Linux (on IBM Z and zOS Container Extensions) - Eli Dow & Flavio Bergamaschi, IBM

Invented in IBM Research, Fully Homomorphic Encryption (FHE) is the first and only known technology that allows entirely encrypted data processing not just at rest, or in transit, but also while being operated on by the CPU and in memory. The implications of FHE unlock new cloud potential for even highly regulated industries. In this session, our speakers provide an overview of FHE and business applications and demonstrate how you can begin experimenting easily with a set of open-source FHE toolkits that help enterprise developers weave pervasive security into software source code. The toolkits support Linux for IBM Z as well as z/OS with Container Extensions. We conclude with technical demos shipped with the toolkits. These include Privacy-Preserving Search through a fully encrypted key-value store as well as a fully-encrypted machine learning for credit card fraud detection.
Captions: 
	00:00:00,080 --> 00:00:05,200
good morning good afternoon and good

00:00:02,480 --> 00:00:07,680
evening to everyone participating live

00:00:05,200 --> 00:00:09,280
in this conference wherever you might be

00:00:07,680 --> 00:00:11,120
around the road

00:00:09,280 --> 00:00:12,719
welcome to our session on fully home

00:00:11,120 --> 00:00:14,880
market encryption

00:00:12,719 --> 00:00:17,119
we have an exciting technology that we

00:00:14,880 --> 00:00:19,520
want to share with you all

00:00:17,119 --> 00:00:20,640
i am flavio bragamaski and this is my

00:00:19,520 --> 00:00:23,680
esteemed colleague

00:00:20,640 --> 00:00:25,760
eli dao together we represent

00:00:23,680 --> 00:00:27,279
the many hard-working members of our

00:00:25,760 --> 00:00:30,000
team in ibm

00:00:27,279 --> 00:00:31,439
that are working across the research the

00:00:30,000 --> 00:00:33,680
security the cloud

00:00:31,439 --> 00:00:34,960
and the systems divisions to

00:00:33,680 --> 00:00:36,960
revolutionize

00:00:34,960 --> 00:00:38,399
how you look at future security

00:00:36,960 --> 00:00:42,320
strategies

00:00:38,399 --> 00:00:42,320
based on an open software platform

00:00:42,800 --> 00:00:46,719
in this session we will give you a light

00:00:44,879 --> 00:00:48,320
introduction on the concepts of fully

00:00:46,719 --> 00:00:50,320
homomorphic encryption

00:00:48,320 --> 00:00:52,079
along with some of the history behind it

00:00:50,320 --> 00:00:54,000
as well as a brief discussion

00:00:52,079 --> 00:00:55,920
on use case archetypes before diving

00:00:54,000 --> 00:00:56,719
into a demonstration of our open source

00:00:55,920 --> 00:01:00,079
ibm

00:00:56,719 --> 00:01:01,920
fhe toolkit you can try today for free

00:01:00,079 --> 00:01:03,199
we will also provide pointers to our

00:01:01,920 --> 00:01:05,439
open source code

00:01:03,199 --> 00:01:07,520
and extend a sincere offer for the open

00:01:05,439 --> 00:01:08,880
mainframe community to engage with us to

00:01:07,520 --> 00:01:10,240
improve the technology

00:01:08,880 --> 00:01:12,080
and advance this potentially

00:01:10,240 --> 00:01:14,640
game-changing innovation to benefit

00:01:12,080 --> 00:01:16,400
us all we will conclude a bit early in

00:01:14,640 --> 00:01:17,360
order to leave some time for interactive

00:01:16,400 --> 00:01:19,920
question and answer

00:01:17,360 --> 00:01:19,920
at the end

00:01:20,960 --> 00:01:25,119
okay let's start with this question what

00:01:24,080 --> 00:01:27,520
would you do

00:01:25,119 --> 00:01:30,960
if you could compute on encrypted data

00:01:27,520 --> 00:01:30,960
without ever decrypting

00:01:31,280 --> 00:01:34,640
what are use cases you don't even think

00:01:34,000 --> 00:01:37,840
today

00:01:34,640 --> 00:01:40,479
because you cannot share data safely

00:01:37,840 --> 00:01:42,000
so keep this question in your mind as we

00:01:40,479 --> 00:01:45,920
go through this session

00:01:42,000 --> 00:01:45,920
and let's have a q a at the end

00:01:46,399 --> 00:01:51,439
so just what is fully homomorphic

00:01:48,240 --> 00:01:53,439
encryption let's call it fhe

00:01:51,439 --> 00:01:55,680
fhe is an advanced cryptographic scheme

00:01:53,439 --> 00:01:58,399
that allows the processing of data

00:01:55,680 --> 00:01:59,759
without the need to encrypt that data it

00:01:58,399 --> 00:02:01,920
means that the data stays encrypted

00:01:59,759 --> 00:02:03,360
throughout the entire computation

00:02:01,920 --> 00:02:05,360
all the intermediate values remain

00:02:03,360 --> 00:02:07,040
encrypted the result of the computation

00:02:05,360 --> 00:02:08,640
is also encrypted

00:02:07,040 --> 00:02:10,560
so the machine where the computation is

00:02:08,640 --> 00:02:10,959
performed can never see the data in the

00:02:10,560 --> 00:02:14,000
clear

00:02:10,959 --> 00:02:15,840
or the unencrypted form fhe helps in

00:02:14,000 --> 00:02:17,680
addressing the paradox of need to know

00:02:15,840 --> 00:02:19,440
versus need to share

00:02:17,680 --> 00:02:20,959
meaning that the sharing of data can now

00:02:19,440 --> 00:02:22,080
be done without revealing the data

00:02:20,959 --> 00:02:23,840
itself

00:02:22,080 --> 00:02:26,640
we will get back to that when we discuss

00:02:23,840 --> 00:02:28,959
the archetypes and use cases in a moment

00:02:26,640 --> 00:02:30,640
furthermore and lastly for this slide

00:02:28,959 --> 00:02:32,400
fully homomorphic encryption uses

00:02:30,640 --> 00:02:34,840
lattice-based cryptography

00:02:32,400 --> 00:02:36,080
meaning it is considered a quantum

00:02:34,840 --> 00:02:38,879
resistant

00:02:36,080 --> 00:02:41,200
for millennia we have used cryptography

00:02:38,879 --> 00:02:44,560
to keep information secret

00:02:41,200 --> 00:02:46,560
while it's being transferred or stored

00:02:44,560 --> 00:02:48,640
external encryption techniques protect

00:02:46,560 --> 00:02:52,400
data from certain threat mode

00:02:48,640 --> 00:02:54,640
but not all the threats we are commonly

00:02:52,400 --> 00:02:57,840
protect our data against today

00:02:54,640 --> 00:02:59,840
are from interception in transit this

00:02:57,840 --> 00:03:02,400
might mean over the network

00:02:59,840 --> 00:03:04,640
we also protect data from interception

00:03:02,400 --> 00:03:07,440
or unauthorized access

00:03:04,640 --> 00:03:08,480
while it is in a persistent storage such

00:03:07,440 --> 00:03:12,560
as an encrypted

00:03:08,480 --> 00:03:14,319
files on a hard disk or boot protection

00:03:12,560 --> 00:03:17,040
that protects or not authorized access

00:03:14,319 --> 00:03:17,040
to a laptop

00:03:17,120 --> 00:03:22,159
however these systems leave a crucial

00:03:20,000 --> 00:03:24,319
vulnerability exposed

00:03:22,159 --> 00:03:26,159
data is not protected when it's being

00:03:24,319 --> 00:03:29,680
operated on

00:03:26,159 --> 00:03:32,480
this is the case in a cloud computing

00:03:29,680 --> 00:03:33,760
where you must trust the cloud hosting

00:03:32,480 --> 00:03:36,159
provider

00:03:33,760 --> 00:03:37,680
it's also the case in simpler internal

00:03:36,159 --> 00:03:39,920
computer systems

00:03:37,680 --> 00:03:42,319
where a member of your organization

00:03:39,920 --> 00:03:44,080
might need access to perform a routine

00:03:42,319 --> 00:03:47,120
data process

00:03:44,080 --> 00:03:51,360
when computation is performed the data

00:03:47,120 --> 00:03:54,239
is decrypted fhe changes that

00:03:51,360 --> 00:03:57,599
and now allows for the processing also

00:03:54,239 --> 00:04:00,799
to be done on completely encrypted data

00:03:57,599 --> 00:04:02,640
fhe has revolutionized security and data

00:04:00,799 --> 00:04:05,120
privacy possibilities

00:04:02,640 --> 00:04:07,280
it has massive implications to how we

00:04:05,120 --> 00:04:08,560
outsource computation to untrusted

00:04:07,280 --> 00:04:10,959
environments

00:04:08,560 --> 00:04:13,040
and how we in-source data access to

00:04:10,959 --> 00:04:17,519
minimize exfiltration

00:04:13,040 --> 00:04:19,840
or other risks related to compliance

00:04:17,519 --> 00:04:20,959
we are now at the inflection point where

00:04:19,840 --> 00:04:23,520
fhe has become

00:04:20,959 --> 00:04:24,560
practical for many applications and in

00:04:23,520 --> 00:04:27,199
particularly

00:04:24,560 --> 00:04:29,520
those in the regulated industries and

00:04:27,199 --> 00:04:30,479
those where privacy and confidentiality

00:04:29,520 --> 00:04:34,080
of data

00:04:30,479 --> 00:04:35,440
is paramount the integrity triad is

00:04:34,080 --> 00:04:39,040
complete

00:04:35,440 --> 00:04:42,560
data can be secured at all times

00:04:39,040 --> 00:04:45,440
but let's set the expectations according

00:04:42,560 --> 00:04:48,000
there is no commercial offering yet from

00:04:45,440 --> 00:04:51,280
ibm in this space

00:04:48,000 --> 00:04:51,919
to understand why let's look at how we

00:04:51,280 --> 00:04:55,120
got

00:04:51,919 --> 00:04:57,199
to now so you can extrapolate

00:04:55,120 --> 00:04:59,360
when the time is right to consider

00:04:57,199 --> 00:05:01,759
experimenting with this technology for

00:04:59,360 --> 00:05:01,759
yourself

00:05:03,280 --> 00:05:06,639
let's spend a couple of minutes and look

00:05:05,600 --> 00:05:09,840
at the history of

00:05:06,639 --> 00:05:12,240
fhe and the sheer amount of advancements

00:05:09,840 --> 00:05:15,759
this technology has been true

00:05:12,240 --> 00:05:17,199
in the few last years fhe was invented

00:05:15,759 --> 00:05:21,199
in 2009

00:05:17,199 --> 00:05:23,600
by ibm it was a scientific master stroke

00:05:21,199 --> 00:05:26,479
that resolved an encryption question

00:05:23,600 --> 00:05:29,199
dating back from 1978

00:05:26,479 --> 00:05:29,840
when an earlier and very widely adopted

00:05:29,199 --> 00:05:33,840
encryption

00:05:29,840 --> 00:05:35,919
scheme called rsa was first published

00:05:33,840 --> 00:05:37,680
the breakthrough was creating a

00:05:35,919 --> 00:05:40,080
cryptographic scheme

00:05:37,680 --> 00:05:40,880
that can support both additions and

00:05:40,080 --> 00:05:44,320
multiplication

00:05:40,880 --> 00:05:47,520
operations on arbitrary circuits

00:05:44,320 --> 00:05:49,759
with unbound debt

00:05:47,520 --> 00:05:52,320
for more than 30 years cryptographers

00:05:49,759 --> 00:05:55,360
and mathematicians were not clear even

00:05:52,320 --> 00:05:58,000
if a solution existed

00:05:55,360 --> 00:05:58,560
at the time this heroic mathematical

00:05:58,000 --> 00:06:01,199
feat

00:05:58,560 --> 00:06:03,840
was praised in the community but

00:06:01,199 --> 00:06:06,720
simultaneously looked as

00:06:03,840 --> 00:06:07,440
just as a theoretical approach and was

00:06:06,720 --> 00:06:10,639
deemed too

00:06:07,440 --> 00:06:14,720
slow for any practical use

00:06:10,639 --> 00:06:16,800
as we move through the years to 2011

00:06:14,720 --> 00:06:19,120
one of the very early implementations

00:06:16,800 --> 00:06:22,800
would take 30 minutes to compute

00:06:19,120 --> 00:06:26,160
a simple multiplication operation on one

00:06:22,800 --> 00:06:28,639
bit one year later

00:06:26,160 --> 00:06:30,800
with our written conventions it was

00:06:28,639 --> 00:06:32,800
possible to perform thirty thousand of

00:06:30,800 --> 00:06:36,720
those single bit multiplications

00:06:32,800 --> 00:06:39,919
in only 36 hours is staggeringly slow

00:06:36,720 --> 00:06:42,960
compared to an encrypted counterpart

00:06:39,919 --> 00:06:46,000
but orders of magnitude faster than just

00:06:42,960 --> 00:06:46,000
a few years before

00:06:46,240 --> 00:06:50,960
around then interesting fhe started to

00:06:49,280 --> 00:06:54,319
become real

00:06:50,960 --> 00:06:57,120
in 2013 ibm released its

00:06:54,319 --> 00:06:58,080
first version of a homomorph encryption

00:06:57,120 --> 00:07:01,440
library

00:06:58,080 --> 00:07:03,759
called hlab as open source

00:07:01,440 --> 00:07:06,160
this implementation library allow fhe

00:07:03,759 --> 00:07:08,560
computation over integers

00:07:06,160 --> 00:07:10,479
we believe that this library and open

00:07:08,560 --> 00:07:11,360
sourcing the software accelerated the

00:07:10,479 --> 00:07:14,479
advancement of

00:07:11,360 --> 00:07:17,199
fhe and spawned a great

00:07:14,479 --> 00:07:19,360
deal of further academic and commercial

00:07:17,199 --> 00:07:22,880
interests

00:07:19,360 --> 00:07:26,639
progress continued incrementally in late

00:07:22,880 --> 00:07:27,520
2015 ibm demonstrated how fhe could be

00:07:26,639 --> 00:07:30,720
used to compare

00:07:27,520 --> 00:07:31,919
two human genome sequences in less than

00:07:30,720 --> 00:07:34,319
an hour

00:07:31,919 --> 00:07:36,639
and demonstrated how to compute spatial

00:07:34,319 --> 00:07:38,960
temporal set intersections

00:07:36,639 --> 00:07:41,199
a problem area with many business

00:07:38,960 --> 00:07:44,479
applications

00:07:41,199 --> 00:07:47,199
in 2017 our colleagues from the seoul

00:07:44,479 --> 00:07:48,800
national university in south korea came

00:07:47,199 --> 00:07:51,120
up with something known as the

00:07:48,800 --> 00:07:53,919
approximate numbers scheme

00:07:51,120 --> 00:07:55,360
that allows fhe computation over complex

00:07:53,919 --> 00:07:57,520
numbers

00:07:55,360 --> 00:08:00,080
meaning the ability to compute on

00:07:57,520 --> 00:08:03,280
approximate floating point numbers

00:08:00,080 --> 00:08:05,120
enabling work outside of the integer

00:08:03,280 --> 00:08:07,680
domain

00:08:05,120 --> 00:08:08,319
this was in our view a pivotal step

00:08:07,680 --> 00:08:11,360
towards

00:08:08,319 --> 00:08:14,240
privacy-preserving machine learning

00:08:11,360 --> 00:08:16,639
in the last decade fhe has evolved from

00:08:14,240 --> 00:08:19,440
being a mathematical plausible

00:08:16,639 --> 00:08:20,479
to reaching an inflection point perhaps

00:08:19,440 --> 00:08:23,840
one of

00:08:20,479 --> 00:08:27,919
many to come where fhe

00:08:23,840 --> 00:08:31,199
become practical for certain use cases

00:08:27,919 --> 00:08:33,039
since 2018 we along

00:08:31,199 --> 00:08:35,360
the broader crypto community have

00:08:33,039 --> 00:08:37,120
embarked in the usability and early

00:08:35,360 --> 00:08:40,000
adoption phase

00:08:37,120 --> 00:08:41,200
where we are concentrating in robustness

00:08:40,000 --> 00:08:43,680
performance

00:08:41,200 --> 00:08:44,880
usability is standards and most

00:08:43,680 --> 00:08:49,360
importantly

00:08:44,880 --> 00:08:51,760
understanding use cases now in 2020

00:08:49,360 --> 00:08:54,480
we are excited to bring fhe technology

00:08:51,760 --> 00:08:56,640
to the hands of developers to further

00:08:54,480 --> 00:08:59,040
accelerate the adoption

00:08:56,640 --> 00:09:00,000
interests and development of fhe

00:08:59,040 --> 00:09:03,120
applications

00:09:00,000 --> 00:09:03,120
and experimentation

00:09:04,000 --> 00:09:07,440
so why isn't this technology everywhere

00:09:06,160 --> 00:09:09,360
right now

00:09:07,440 --> 00:09:11,200
as we showed you the performance and use

00:09:09,360 --> 00:09:13,200
cases have steadily improved

00:09:11,200 --> 00:09:14,560
but there is another aspect of fhe where

00:09:13,200 --> 00:09:16,480
we need to discuss

00:09:14,560 --> 00:09:19,040
and it relates to developer readiness in

00:09:16,480 --> 00:09:21,760
implementing fhe and software

00:09:19,040 --> 00:09:23,120
unlike bolt-on encryption fhe is woven

00:09:21,760 --> 00:09:25,200
deep into the computation

00:09:23,120 --> 00:09:26,959
and thus requires writing business logic

00:09:25,200 --> 00:09:28,560
to take advantage of the security it

00:09:26,959 --> 00:09:31,120
offers

00:09:28,560 --> 00:09:32,000
the top flow you see in this chart

00:09:31,120 --> 00:09:34,480
deplex

00:09:32,000 --> 00:09:36,560
depicts a typical scenario of how

00:09:34,480 --> 00:09:38,880
cryptography is used today

00:09:36,560 --> 00:09:40,720
developers write code or applications to

00:09:38,880 --> 00:09:42,480
perform some business logic

00:09:40,720 --> 00:09:44,480
and when that is done or maybe just

00:09:42,480 --> 00:09:46,160
before it's done the security team gets

00:09:44,480 --> 00:09:48,720
involved at the periphery

00:09:46,160 --> 00:09:50,160
to add on protection or around certain

00:09:48,720 --> 00:09:52,959
sensitive parts of the application

00:09:50,160 --> 00:09:55,120
logic in most scenarios that will

00:09:52,959 --> 00:09:57,360
involve adding access controls

00:09:55,120 --> 00:09:59,360
encryption for data at rest or data and

00:09:57,360 --> 00:10:01,120
movement but whenever the application

00:09:59,360 --> 00:10:03,600
needs to compute on the data

00:10:01,120 --> 00:10:04,640
it needs to be decrypted and as we

00:10:03,600 --> 00:10:07,360
discussed

00:10:04,640 --> 00:10:08,480
that is when the data is most vulnerable

00:10:07,360 --> 00:10:11,920
to semi-honest

00:10:08,480 --> 00:10:14,399
or dishonest or even malicious actors

00:10:11,920 --> 00:10:16,800
in the lower example you see number two

00:10:14,399 --> 00:10:19,600
we show how fully homomorphic encryption

00:10:16,800 --> 00:10:21,839
changes all this the bottom flow depicts

00:10:19,600 --> 00:10:24,480
fully homomorphic encryption protection

00:10:21,839 --> 00:10:25,120
woven into the business logic processing

00:10:24,480 --> 00:10:26,560
the data

00:10:25,120 --> 00:10:29,040
in encrypted form without ever

00:10:26,560 --> 00:10:29,839
decrypting it so there's a trade-off to

00:10:29,040 --> 00:10:33,360
be made

00:10:29,839 --> 00:10:35,519
and i ask you as does my colleague

00:10:33,360 --> 00:10:37,200
is writing the business logic over again

00:10:35,519 --> 00:10:37,839
to make use of fully homomorphic

00:10:37,200 --> 00:10:39,440
encryption

00:10:37,839 --> 00:10:40,880
worth the security gain to your

00:10:39,440 --> 00:10:43,040
organization

00:10:40,880 --> 00:10:46,000
for this audience and for some workloads

00:10:43,040 --> 00:10:48,160
we suspect the answer is a strong yes

00:10:46,000 --> 00:10:49,839
but this is a new paradigm of security

00:10:48,160 --> 00:10:51,440
which today will require

00:10:49,839 --> 00:10:52,959
your organization to partner your

00:10:51,440 --> 00:10:55,200
application developers with

00:10:52,959 --> 00:10:56,399
cryptographers and data owners

00:10:55,200 --> 00:10:58,720
but we think the results can be

00:10:56,399 --> 00:11:00,320
transformational

00:10:58,720 --> 00:11:01,519
and now that we scared everyone off

00:11:00,320 --> 00:11:03,360
thinking you have to rewrite new

00:11:01,519 --> 00:11:03,920
business logic and we do understand that

00:11:03,360 --> 00:11:06,399
that is

00:11:03,920 --> 00:11:08,240
a burden to be paid let's talk about

00:11:06,399 --> 00:11:10,000
just what kinds of business logic are

00:11:08,240 --> 00:11:12,480
known to exist for fhe

00:11:10,000 --> 00:11:15,120
or have archetypes or patterns that

00:11:12,480 --> 00:11:17,839
already exist

00:11:15,120 --> 00:11:19,040
okay so we know that we can compute

00:11:17,839 --> 00:11:22,079
unencrypted data

00:11:19,040 --> 00:11:23,040
without the needs to decrypt it but you

00:11:22,079 --> 00:11:25,760
might be thinking

00:11:23,040 --> 00:11:27,279
it's all good but tell us what can we do

00:11:25,760 --> 00:11:29,440
with it

00:11:27,279 --> 00:11:30,800
so let's look at some of the use case

00:11:29,440 --> 00:11:35,519
archetypes

00:11:30,800 --> 00:11:35,519
to understand how applicable fhe can be

00:11:35,600 --> 00:11:39,519
let's start with the oblivious queries

00:11:38,240 --> 00:11:42,880
why would we want

00:11:39,519 --> 00:11:45,200
to do an oblivious query well

00:11:42,880 --> 00:11:46,720
whenever you ask someone a question you

00:11:45,200 --> 00:11:48,720
review intent

00:11:46,720 --> 00:11:50,320
you review information that might be

00:11:48,720 --> 00:11:52,880
private to you

00:11:50,320 --> 00:11:54,079
like what you know what you don't know

00:11:52,880 --> 00:11:58,399
your location

00:11:54,079 --> 00:12:00,880
your acquaintance etc wouldn't be useful

00:11:58,399 --> 00:12:02,959
if you could ask the question without

00:12:00,880 --> 00:12:03,760
revealing all this information in the

00:12:02,959 --> 00:12:07,040
clear

00:12:03,760 --> 00:12:09,519
and get back the right answer

00:12:07,040 --> 00:12:11,839
for example let's say you want to ask

00:12:09,519 --> 00:12:14,240
for directions to go from home

00:12:11,839 --> 00:12:17,040
to work and you use one of the many

00:12:14,240 --> 00:12:19,200
applications or services around

00:12:17,040 --> 00:12:20,800
when you use these services you review

00:12:19,200 --> 00:12:22,959
your current location

00:12:20,800 --> 00:12:25,120
the time of the day the destination

00:12:22,959 --> 00:12:29,040
location and the intent

00:12:25,120 --> 00:12:30,160
to go from a to b the application or

00:12:29,040 --> 00:12:33,519
service you use

00:12:30,160 --> 00:12:35,920
is honest but curious and learning

00:12:33,519 --> 00:12:38,320
all your patterns of travel and

00:12:35,920 --> 00:12:40,320
combining with others around you

00:12:38,320 --> 00:12:42,000
that's a lot of private information you

00:12:40,320 --> 00:12:45,760
are giving away

00:12:42,000 --> 00:12:47,600
with fhe the same query for directions

00:12:45,760 --> 00:12:50,480
could be done homomorphically

00:12:47,600 --> 00:12:51,519
without revealing any of the details but

00:12:50,480 --> 00:12:54,000
you would still

00:12:51,519 --> 00:12:54,800
get encrypted directions that only you

00:12:54,000 --> 00:12:58,800
could decrypt

00:12:54,800 --> 00:13:02,240
and use the second scenario is

00:12:58,800 --> 00:13:04,240
one of set intersection this is a common

00:13:02,240 --> 00:13:06,720
use scenario when two or more

00:13:04,240 --> 00:13:08,880
entities want to share their data to

00:13:06,720 --> 00:13:11,600
identify the overlaps

00:13:08,880 --> 00:13:13,120
and perform some type of aggregation on

00:13:11,600 --> 00:13:15,279
the overlap

00:13:13,120 --> 00:13:16,160
but don't want to reveal to each other

00:13:15,279 --> 00:13:20,000
their entire

00:13:16,160 --> 00:13:23,120
set or what the overlap is

00:13:20,000 --> 00:13:27,120
typical examples include co-marketing

00:13:23,120 --> 00:13:30,720
and merges and acquisition scenarios

00:13:27,120 --> 00:13:32,399
extracting value from private data

00:13:30,720 --> 00:13:34,079
now that we have covered some of the

00:13:32,399 --> 00:13:37,279
basic use cases

00:13:34,079 --> 00:13:40,000
it becomes clearer that things

00:13:37,279 --> 00:13:40,480
we can compute on encrypted data and

00:13:40,000 --> 00:13:44,000
share

00:13:40,480 --> 00:13:47,360
data securely we can do machine learning

00:13:44,000 --> 00:13:50,000
on encrypted data we have demonstrated

00:13:47,360 --> 00:13:52,000
both regression-based machine learning

00:13:50,000 --> 00:13:54,800
and neural networks based machine

00:13:52,000 --> 00:13:57,760
learning in real customer scenarios for

00:13:54,800 --> 00:13:58,720
two large banking institutions one in

00:13:57,760 --> 00:14:02,320
latin america

00:13:58,720 --> 00:14:06,560
and one in europe secure

00:14:02,320 --> 00:14:08,800
outsourcing from the use cases discussed

00:14:06,560 --> 00:14:10,639
it becomes clear that the future

00:14:08,800 --> 00:14:12,800
technology can assist

00:14:10,639 --> 00:14:14,399
and enable cloud adoption for those

00:14:12,800 --> 00:14:17,199
clients that would never

00:14:14,399 --> 00:14:17,920
migrate their data to an untrusted

00:14:17,199 --> 00:14:20,800
environment

00:14:17,920 --> 00:14:20,800
or to the clouding

00:14:23,040 --> 00:14:26,720
so we know about fhe and we know how

00:14:25,199 --> 00:14:29,120
important open source is to fully

00:14:26,720 --> 00:14:30,399
homomorphic encryption and ibm

00:14:29,120 --> 00:14:32,320
let's take you through a hands-on

00:14:30,399 --> 00:14:34,000
experience of what it's like to get the

00:14:32,320 --> 00:14:35,920
sample applications up and running that

00:14:34,000 --> 00:14:37,680
we're shipping with our toolkit

00:14:35,920 --> 00:14:39,839
our goal with the fully homomorphic

00:14:37,680 --> 00:14:40,560
encryption toolkits was a friction-free

00:14:39,839 --> 00:14:43,040
experience

00:14:40,560 --> 00:14:43,600
where you can get started developing

00:14:43,040 --> 00:14:46,639
using

00:14:43,600 --> 00:14:49,680
and integrating various components

00:14:46,639 --> 00:14:50,880
software and utilities to have the best

00:14:49,680 --> 00:14:52,399
experience possible

00:14:50,880 --> 00:14:54,800
developing homomorphic encryption

00:14:52,399 --> 00:14:56,399
applications this includes the use of an

00:14:54,800 --> 00:14:58,560
integrated development environment that

00:14:56,399 --> 00:15:00,480
comes pre-configured with high-value

00:14:58,560 --> 00:15:02,240
demonstration applications

00:15:00,480 --> 00:15:04,000
now keep in mind the demo applications

00:15:02,240 --> 00:15:05,519
are not tuned for speed but rather a

00:15:04,000 --> 00:15:09,040
combination of speed

00:15:05,519 --> 00:15:11,519
and pedagogical use as teaching tools

00:15:09,040 --> 00:15:13,920
we support native apple toolkits for mac

00:15:11,519 --> 00:15:15,199
os and ios using xcode as the integrated

00:15:13,920 --> 00:15:17,120
development environment

00:15:15,199 --> 00:15:18,560
but since this is a mainframe audience

00:15:17,120 --> 00:15:19,600
we will instead talk about the linux

00:15:18,560 --> 00:15:21,120
toolkit

00:15:19,600 --> 00:15:23,360
our linux toolkits are delivered as

00:15:21,120 --> 00:15:25,600
pre-configured docker containers

00:15:23,360 --> 00:15:27,519
docker containers can be hosted on macs

00:15:25,600 --> 00:15:29,440
linux servers or desktops

00:15:27,519 --> 00:15:30,959
including microsoft windows subsystem

00:15:29,440 --> 00:15:32,560
for linux as well as

00:15:30,959 --> 00:15:34,240
all modern linux platforms on the

00:15:32,560 --> 00:15:38,800
mainframe such as those on

00:15:34,240 --> 00:15:40,320
zvm or lpar for our demonstration today

00:15:38,800 --> 00:15:42,399
we will be installing the toolkit and

00:15:40,320 --> 00:15:45,199
running the demonstrations on a z os

00:15:42,399 --> 00:15:46,560
instance running z container extensions

00:15:45,199 --> 00:15:48,320
and we'll run through two of the five

00:15:46,560 --> 00:15:50,000
demos we ship

00:15:48,320 --> 00:15:52,160
the demonstration should take less than

00:15:50,000 --> 00:15:53,839
10 minutes the experience is identical

00:15:52,160 --> 00:15:55,120
regardless of your linux supported host

00:15:53,839 --> 00:15:56,720
platform

00:15:55,120 --> 00:15:58,240
all of the code for the toolkits and the

00:15:56,720 --> 00:15:59,199
demos you're about to see are open

00:15:58,240 --> 00:16:00,639
source

00:15:59,199 --> 00:16:02,560
and the pre-built docker container

00:16:00,639 --> 00:16:03,360
images are available on docker hub for

00:16:02,560 --> 00:16:05,440
free

00:16:03,360 --> 00:16:06,720
we really want you to try this stuff

00:16:05,440 --> 00:16:08,399
show it to your developers

00:16:06,720 --> 00:16:10,480
to your data owners into your line of

00:16:08,399 --> 00:16:12,959
business and help show them that fully

00:16:10,480 --> 00:16:15,920
homomorphic encryption is real

00:16:12,959 --> 00:16:15,920
so let's get into it

00:16:18,880 --> 00:16:22,800
all right this is the demo let's start

00:16:21,120 --> 00:16:24,639
by checking out github where you can see

00:16:22,800 --> 00:16:25,519
the open source code

00:16:24,639 --> 00:16:28,480
and here we're going to go ahead and

00:16:25,519 --> 00:16:30,160
just go to the download link

00:16:28,480 --> 00:16:31,920
now that we fetched the zip file we

00:16:30,160 --> 00:16:33,360
don't need the browser

00:16:31,920 --> 00:16:34,959
let's go ahead and go to the download

00:16:33,360 --> 00:16:36,959
location and just uncompress the zip

00:16:34,959 --> 00:16:39,040
folder

00:16:36,959 --> 00:16:40,959
pretty quickly there we go dragging to

00:16:39,040 --> 00:16:43,759
the desktop

00:16:40,959 --> 00:16:44,959
we now have the full source code for the

00:16:43,759 --> 00:16:46,079
toolkit

00:16:44,959 --> 00:16:48,160
as you can see i just opened up a

00:16:46,079 --> 00:16:50,560
utility called cyberduck that lets me

00:16:48,160 --> 00:16:52,079
use sftp to move content to my zcx

00:16:50,560 --> 00:16:53,680
instance

00:16:52,079 --> 00:16:55,199
rather than copying up everything which

00:16:53,680 --> 00:16:56,959
i could do if i wanted to build the

00:16:55,199 --> 00:16:58,880
software on the ccx instance

00:16:56,959 --> 00:17:00,399
what i'm going to do right now is move

00:16:58,880 --> 00:17:04,720
just the scripts to fetch

00:17:00,399 --> 00:17:06,480
start and stop the toolkit

00:17:04,720 --> 00:17:08,880
you saw me just move the fetch docker

00:17:06,480 --> 00:17:09,600
image script the persist data script

00:17:08,880 --> 00:17:12,319
which

00:17:09,600 --> 00:17:14,319
makes sure that data is persisted across

00:17:12,319 --> 00:17:16,319
invocations of the container toolkit

00:17:14,319 --> 00:17:17,600
the run toolkit script which launches

00:17:16,319 --> 00:17:20,000
the container if you're not familiar

00:17:17,600 --> 00:17:21,600
with launching docker containers

00:17:20,000 --> 00:17:24,079
and then lastly a script that helps

00:17:21,600 --> 00:17:25,520
stopping the toolkit

00:17:24,079 --> 00:17:27,280
they've now finished uploading as you

00:17:25,520 --> 00:17:28,960
can see

00:17:27,280 --> 00:17:31,520
so we'll go ahead and we can close out

00:17:28,960 --> 00:17:33,039
the utility for the file transfer

00:17:31,520 --> 00:17:35,200
we no longer need the source code on my

00:17:33,039 --> 00:17:36,880
local machine everything is now on my

00:17:35,200 --> 00:17:38,000
ccx instance

00:17:36,880 --> 00:17:40,559
right here i just want to show that we

00:17:38,000 --> 00:17:41,919
are in fact on an s390x architecture and

00:17:40,559 --> 00:17:42,640
if you check you can see that we're

00:17:41,919 --> 00:17:46,000
actually

00:17:42,640 --> 00:17:48,400
running docker on z os you can see the

00:17:46,000 --> 00:17:50,240
scripts that i just uploaded however one

00:17:48,400 --> 00:17:52,720
thing we must do is make them executable

00:17:50,240 --> 00:17:53,919
in order to invoke them

00:17:52,720 --> 00:17:56,240
so i'm going to go ahead and just do the

00:17:53,919 --> 00:17:57,840
chi mod that you saw there

00:17:56,240 --> 00:17:59,600
next i run the fetch script with no

00:17:57,840 --> 00:18:00,720
arguments which is what you might do if

00:17:59,600 --> 00:18:02,480
you didn't know how to run it and you

00:18:00,720 --> 00:18:03,840
can see that for s390 there are two

00:18:02,480 --> 00:18:06,240
supported options

00:18:03,840 --> 00:18:07,679
i'm going to pick ubuntu for this demo

00:18:06,240 --> 00:18:10,480
as you can see right now

00:18:07,679 --> 00:18:11,600
we're ready to start the toolkit so as

00:18:10,480 --> 00:18:13,760
you can see we want to do

00:18:11,600 --> 00:18:15,280
run toolkit with dash p to specify the

00:18:13,760 --> 00:18:17,280
pre-built container we just fetched and

00:18:15,280 --> 00:18:19,600
we're using the ubuntu flavor

00:18:17,280 --> 00:18:21,360
next you'll see at the bottom the

00:18:19,600 --> 00:18:22,400
message that says the container is open

00:18:21,360 --> 00:18:23,919
for business

00:18:22,400 --> 00:18:25,520
i've already got the tab open here just

00:18:23,919 --> 00:18:27,679
to save typing

00:18:25,520 --> 00:18:28,559
what you're seeing here is an ssl

00:18:27,679 --> 00:18:30,160
certificate

00:18:28,559 --> 00:18:31,840
from a self-signed certificate that we

00:18:30,160 --> 00:18:34,559
use inside the container

00:18:31,840 --> 00:18:35,200
to bypass it we just click the warning

00:18:34,559 --> 00:18:37,440
and type

00:18:35,200 --> 00:18:38,240
this is unsafe for the chrome web

00:18:37,440 --> 00:18:39,440
browser

00:18:38,240 --> 00:18:41,360
other browsers behave a little

00:18:39,440 --> 00:18:45,200
differently as documented in our

00:18:41,360 --> 00:18:45,679
documentation as you can see the ip

00:18:45,200 --> 00:18:47,440
address

00:18:45,679 --> 00:18:49,280
in the web browser matches that of the

00:18:47,440 --> 00:18:52,400
console in the background that i just

00:18:49,280 --> 00:18:53,919
logged in for the ccx instance

00:18:52,400 --> 00:18:55,760
as we start the toolkit you'll be

00:18:53,919 --> 00:18:59,200
prompted for a compiler setup

00:18:55,760 --> 00:19:01,200
just pick the bottom entry at the top

00:18:59,200 --> 00:19:02,799
once the initial workspace configuration

00:19:01,200 --> 00:19:04,400
has been done we can navigate by point

00:19:02,799 --> 00:19:04,960
and click over to the examples and i'm

00:19:04,400 --> 00:19:08,000
going to pick

00:19:04,960 --> 00:19:10,080
bgv countrydblookup which is the country

00:19:08,000 --> 00:19:12,240
database key value search

00:19:10,080 --> 00:19:14,160
implemented using the bgv cryptographic

00:19:12,240 --> 00:19:15,760
scheme

00:19:14,160 --> 00:19:16,960
here which you see by just pressing the

00:19:15,760 --> 00:19:17,520
build button in the toolbar at the

00:19:16,960 --> 00:19:19,679
bottom

00:19:17,520 --> 00:19:21,760
i compiled the software the full source

00:19:19,679 --> 00:19:23,360
code is available in this toolkit

00:19:21,760 --> 00:19:25,200
when the compile was done i click the

00:19:23,360 --> 00:19:26,799
run button to launch the program

00:19:25,200 --> 00:19:28,640
as you can see i've been prompted to

00:19:26,799 --> 00:19:31,840
name a european country

00:19:28,640 --> 00:19:33,760
i've specified england here and what

00:19:31,840 --> 00:19:36,720
we're going to do is run the query

00:19:33,760 --> 00:19:39,679
against the fully encrypted database to

00:19:36,720 --> 00:19:41,440
find the uh the capital

00:19:39,679 --> 00:19:42,880
while we wait it's important to note

00:19:41,440 --> 00:19:45,120
there are other examples

00:19:42,880 --> 00:19:46,640
to the left you can see bgv binary

00:19:45,120 --> 00:19:48,720
arithmetic that we ship

00:19:46,640 --> 00:19:49,760
as well as you know another example

00:19:48,720 --> 00:19:52,320
called bgb

00:19:49,760 --> 00:19:53,520
packed arithmetic and one called credit

00:19:52,320 --> 00:19:55,200
card fraud

00:19:53,520 --> 00:19:57,120
in the interest of time we can't show

00:19:55,200 --> 00:19:57,600
you all those demos today but similarly

00:19:57,120 --> 00:19:59,280
you

00:19:57,600 --> 00:20:01,120
point click and build or use a

00:19:59,280 --> 00:20:02,880
combination of cmake scripts

00:20:01,120 --> 00:20:05,600
to run the examples that are there as

00:20:02,880 --> 00:20:05,600
documented

00:20:05,679 --> 00:20:09,200
showing real briefly the source code is

00:20:07,440 --> 00:20:10,720
complete for each of these examples

00:20:09,200 --> 00:20:11,679
and you can browse it at your leisure if

00:20:10,720 --> 00:20:12,960
you're interested in learning how the

00:20:11,679 --> 00:20:14,400
code works

00:20:12,960 --> 00:20:16,240
but while i was doing that as you can

00:20:14,400 --> 00:20:17,760
see the query has come back

00:20:16,240 --> 00:20:20,159
and in real time you see that we've got

00:20:17,760 --> 00:20:21,440
a response

00:20:20,159 --> 00:20:23,679
so you just heard a bit about the

00:20:21,440 --> 00:20:25,360
technology the use cases and you saw the

00:20:23,679 --> 00:20:27,039
demo of how easy it is for you to

00:20:25,360 --> 00:20:28,559
educate and demonstrate this technology

00:20:27,039 --> 00:20:30,400
to your organizations

00:20:28,559 --> 00:20:31,919
we hope it starts a conversation about

00:20:30,400 --> 00:20:33,679
how to consider fully homomorphic

00:20:31,919 --> 00:20:35,600
encryption as a core component

00:20:33,679 --> 00:20:36,799
of a comprehensive security and privacy

00:20:35,600 --> 00:20:39,120
strategy

00:20:36,799 --> 00:20:39,919
now more than ever this stuff matters

00:20:39,120 --> 00:20:42,480
data breaches

00:20:39,919 --> 00:20:43,919
privacy regulation and legislation we

00:20:42,480 --> 00:20:46,720
think this can help

00:20:43,919 --> 00:20:48,559
but we can't do it without you our goal

00:20:46,720 --> 00:20:50,720
is to create and deliver world-class

00:20:48,559 --> 00:20:51,440
user experiences and transform business

00:20:50,720 --> 00:20:54,480
operations

00:20:51,440 --> 00:20:56,320
under the fhe security model

00:20:54,480 --> 00:20:58,240
we're seeking forward-thinking sponsor

00:20:56,320 --> 00:20:59,760
users and want to foster a healthy and

00:20:58,240 --> 00:21:00,880
vibrant community of users and

00:20:59,760 --> 00:21:03,039
developers

00:21:00,880 --> 00:21:04,480
if you like what you saw and you try the

00:21:03,039 --> 00:21:07,600
toolkits for yourselves

00:21:04,480 --> 00:21:09,679
please send us some feedback an

00:21:07,600 --> 00:21:13,360
important way to participate

00:21:09,679 --> 00:21:16,400
to help us and to help the fhe momentum

00:21:13,360 --> 00:21:17,520
is to take our encryption survey we are

00:21:16,400 --> 00:21:20,000
looking at you

00:21:17,520 --> 00:21:21,280
the application developers the data

00:21:20,000 --> 00:21:24,480
scientists

00:21:21,280 --> 00:21:28,080
the data owners the line of business

00:21:24,480 --> 00:21:28,960
and the c-suite sx we want to know how

00:21:28,080 --> 00:21:32,000
to make this

00:21:28,960 --> 00:21:35,200
usable and viable for you as a

00:21:32,000 --> 00:21:38,480
foundational tool as trusted us

00:21:35,200 --> 00:21:40,159
rsa in the meantime we thought we would

00:21:38,480 --> 00:21:43,280
also provide a roundup

00:21:40,159 --> 00:21:45,760
of ways to further educate ourselves and

00:21:43,280 --> 00:21:47,120
one another

00:21:45,760 --> 00:21:49,360
thanks for co-hosting this with me

00:21:47,120 --> 00:21:50,799
flavio and i hope you the audience have

00:21:49,360 --> 00:21:52,240
enjoyed this presentation

00:21:50,799 --> 00:21:53,600
while we get ready to take some of your

00:21:52,240 --> 00:21:54,799
questions in the interactive question

00:21:53,600 --> 00:21:56,080
and answer session

00:21:54,799 --> 00:21:58,080
we thought we'd just put up some of this

00:21:56,080 --> 00:21:59,200
material there's certainly no shortage

00:21:58,080 --> 00:22:01,520
of media to consume

00:21:59,200 --> 00:22:03,360
there's blogs news articles podcasts and

00:22:01,520 --> 00:22:05,120
some youtube links here

00:22:03,360 --> 00:22:06,720
and basically we'll try to meet you on

00:22:05,120 --> 00:22:07,840
the battlefield we'll see you on reddit

00:22:06,720 --> 00:22:10,240
we'll see you on twitch

00:22:07,840 --> 00:22:11,280
just don't tell our lawyers anyway we

00:22:10,240 --> 00:22:13,200
hope you enjoyed this

00:22:11,280 --> 00:22:17,919
and we'd now like to take questions so

00:22:13,200 --> 00:22:17,919

YouTube URL: https://www.youtube.com/watch?v=KWH1qdOtHYU


