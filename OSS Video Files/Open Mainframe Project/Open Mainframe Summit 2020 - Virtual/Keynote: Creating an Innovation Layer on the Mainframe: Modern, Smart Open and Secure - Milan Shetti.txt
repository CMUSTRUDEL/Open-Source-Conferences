Title: Keynote: Creating an Innovation Layer on the Mainframe: Modern, Smart Open and Secure - Milan Shetti
Publication date: 2020-09-14
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Keynote: Creating an Innovation Layer on the Mainframe: Modern, Smart, Open, and Secure - Milan Shetti, President, Z Systems Business Unit, Rocket Software 

The world runs on IBM Z. From finance to government services, from air travel to infrastructure, Z servers manage the world’s most valuable data and applications 24/7 with unparalleled security and reliability. But the IT landscape is shifting, and teams are under increased pressure to adjust to the new realities of open-source, hybrid cloud, AI and more. The good news is that it’s easier than ever to incorporate a modern, smart “innovation later” into your Z environment. Join Rocket Software’s Milan Shetti as he explains how new tools and processes can give you the resiliency and flexibility you need to meet the challenges you face today, as well as take advantage of new opportunities for the future.
Captions: 
	00:00:00,160 --> 00:00:07,839
hi i'm delighted to welcome you

00:00:03,600 --> 00:00:11,280
to the open mainframe summit welcome

00:00:07,839 --> 00:00:15,280
today i will discuss how open

00:00:11,280 --> 00:00:18,480
mainframe project is the key cornerstone

00:00:15,280 --> 00:00:21,760
project and that innovation layer

00:00:18,480 --> 00:00:25,359
which delivers cloud experience

00:00:21,760 --> 00:00:28,160
to mainframe hi i'm milan shetty

00:00:25,359 --> 00:00:29,039
and i recently joined rocket software as

00:00:28,160 --> 00:00:32,399
the president

00:00:29,039 --> 00:00:33,920
of its z systems business unit

00:00:32,399 --> 00:00:36,239
i don't come from the mainframe

00:00:33,920 --> 00:00:39,600
background my background

00:00:36,239 --> 00:00:40,800
has been in hybrid cloud and open source

00:00:39,600 --> 00:00:44,079
projects

00:00:40,800 --> 00:00:47,280
i have worked on projects in open source

00:00:44,079 --> 00:00:49,280
such as java linux openstack hadoop

00:00:47,280 --> 00:00:51,360
among many others and in the hybrid

00:00:49,280 --> 00:00:52,239
cloud world i have worked on enterprise

00:00:51,360 --> 00:00:55,360
storage

00:00:52,239 --> 00:00:57,920
compute networking in many different

00:00:55,360 --> 00:00:58,800
companies on the hybrid cloud side of

00:00:57,920 --> 00:01:03,039
things

00:00:58,800 --> 00:01:06,799
but unlike me rocket software

00:01:03,039 --> 00:01:08,960
has been doing mainframe for a long time

00:01:06,799 --> 00:01:10,640
for the last three decades rocket

00:01:08,960 --> 00:01:13,600
software has been

00:01:10,640 --> 00:01:15,200
a partner of ibm and the mainframe

00:01:13,600 --> 00:01:18,720
ecosystem

00:01:15,200 --> 00:01:21,759
and since 2013 rocket software has been

00:01:18,720 --> 00:01:24,560
leading and helping build

00:01:21,759 --> 00:01:26,320
and curate the open source community

00:01:24,560 --> 00:01:29,360
around mainframe

00:01:26,320 --> 00:01:32,720
as well as this open mainframe

00:01:29,360 --> 00:01:36,280
project its long history

00:01:32,720 --> 00:01:37,840
with ibm earned it the trust and the

00:01:36,280 --> 00:01:41,280
responsibility

00:01:37,840 --> 00:01:45,200
to partner with ibm for

00:01:41,280 --> 00:01:48,159
porting some of the initial foundational

00:01:45,200 --> 00:01:49,360
work which was needed to get open

00:01:48,159 --> 00:01:52,720
mainframe project

00:01:49,360 --> 00:01:56,399
off the ground from its beginning

00:01:52,720 --> 00:02:00,000
things such as open system character set

00:01:56,399 --> 00:02:02,320
ascii upf 8 were helped delivered by

00:02:00,000 --> 00:02:04,799
rocket software

00:02:02,320 --> 00:02:06,079
there are many other projects which

00:02:04,799 --> 00:02:09,679
rocket software

00:02:06,079 --> 00:02:11,280
over its last since its inception

00:02:09,679 --> 00:02:12,879
uh been delivered through the open

00:02:11,280 --> 00:02:14,959
mainframe project

00:02:12,879 --> 00:02:16,400
there are two pillars in which the open

00:02:14,959 --> 00:02:18,400
mainframe projects have been delivered

00:02:16,400 --> 00:02:20,959
by rocket software the first pillar

00:02:18,400 --> 00:02:22,640
is around making sure there is no

00:02:20,959 --> 00:02:25,440
version latency

00:02:22,640 --> 00:02:27,760
and as all mainframe users would know

00:02:25,440 --> 00:02:28,560
different versions and older versions of

00:02:27,760 --> 00:02:32,400
software

00:02:28,560 --> 00:02:34,840
do ex explore or exploit

00:02:32,400 --> 00:02:36,160
or create vulnerabilities around

00:02:34,840 --> 00:02:39,040
security

00:02:36,160 --> 00:02:40,080
plug in those gaps and plug in those

00:02:39,040 --> 00:02:42,160
vulnerabilities

00:02:40,080 --> 00:02:44,239
it's very important to make sure that

00:02:42,160 --> 00:02:46,800
all the tools and the tool chains are

00:02:44,239 --> 00:02:48,400
all updated ported even the older

00:02:46,800 --> 00:02:49,920
versions of the tools are ported onto

00:02:48,400 --> 00:02:53,599
the mainframe environment

00:02:49,920 --> 00:02:56,720
so there is no version latency

00:02:53,599 --> 00:02:59,760
rocket software was the chosen partner

00:02:56,720 --> 00:03:01,680
by ibm to port all those technologies

00:02:59,760 --> 00:03:03,680
so that we don't have the version

00:03:01,680 --> 00:03:07,360
latency in mainframe

00:03:03,680 --> 00:03:10,400
while mainframe is embracing into the

00:03:07,360 --> 00:03:12,159
open mainframe world

00:03:10,400 --> 00:03:14,080
the second pillar is the innovation

00:03:12,159 --> 00:03:14,800
pillar one of the projects i would like

00:03:14,080 --> 00:03:17,760
to call out

00:03:14,800 --> 00:03:18,560
on the innovation pillar of delivery

00:03:17,760 --> 00:03:20,879
into

00:03:18,560 --> 00:03:22,239
the community of open mainframe project

00:03:20,879 --> 00:03:26,080
by rocket software

00:03:22,239 --> 00:03:29,360
is its work with the open source

00:03:26,080 --> 00:03:32,000
project conda in making sure

00:03:29,360 --> 00:03:32,799
that all of the open source packages are

00:03:32,000 --> 00:03:35,519
curated

00:03:32,799 --> 00:03:36,480
and securely delivered to the open

00:03:35,519 --> 00:03:39,599
mainframe

00:03:36,480 --> 00:03:40,879
platforms that is some very useful and

00:03:39,599 --> 00:03:43,760
very needed work

00:03:40,879 --> 00:03:44,840
to get this project adopted into the

00:03:43,760 --> 00:03:48,799
mainstream

00:03:44,840 --> 00:03:52,400
enterprises projects such as zoe

00:03:48,799 --> 00:03:53,200
are also a great example of may open

00:03:52,400 --> 00:03:56,159
mainframe

00:03:53,200 --> 00:03:58,840
project being going into the innovation

00:03:56,159 --> 00:04:01,360
areas around

00:03:58,840 --> 00:04:04,640
experience now

00:04:01,360 --> 00:04:06,879
having come from the hybrid cloud world

00:04:04,640 --> 00:04:08,560
and one of the major lessons which i've

00:04:06,879 --> 00:04:11,840
learned in my time

00:04:08,560 --> 00:04:12,879
in that world is that cloud is an

00:04:11,840 --> 00:04:15,760
experience

00:04:12,879 --> 00:04:16,400
and not a destination i'm going to

00:04:15,760 --> 00:04:18,880
unpack

00:04:16,400 --> 00:04:20,560
what do i mean by this statement of

00:04:18,880 --> 00:04:21,680
cloud is an experience and not a

00:04:20,560 --> 00:04:25,280
destination

00:04:21,680 --> 00:04:28,400
and how open mainframe project plays in

00:04:25,280 --> 00:04:31,680
in this discussion

00:04:28,400 --> 00:04:34,080
it always helps to go and look at the

00:04:31,680 --> 00:04:35,919
examples and the references of how the

00:04:34,080 --> 00:04:38,000
cloud environment is working

00:04:35,919 --> 00:04:40,479
and what is important and what's and how

00:04:38,000 --> 00:04:43,520
the adoption curve began

00:04:40,479 --> 00:04:46,400
so let me give three examples of uh

00:04:43,520 --> 00:04:47,199
for a reference standpoint on the uh

00:04:46,400 --> 00:04:48,960
public cloud

00:04:47,199 --> 00:04:51,040
you know innovation and what was really

00:04:48,960 --> 00:04:53,120
innovative about public cloud

00:04:51,040 --> 00:04:54,960
so let's take the three more popular uh

00:04:53,120 --> 00:04:57,040
public cloud environment the aws

00:04:54,960 --> 00:04:59,440
is the google cloud and the microsoft

00:04:57,040 --> 00:05:02,960
azure so let me start with the aws

00:04:59,440 --> 00:05:04,880
if you think about how aws is built

00:05:02,960 --> 00:05:07,120
the hardware's proprietary and the

00:05:04,880 --> 00:05:10,479
engine which powers aws

00:05:07,120 --> 00:05:13,120
is absolutely proprietary you and

00:05:10,479 --> 00:05:14,080
and what do you mean by that is dynamodb

00:05:13,120 --> 00:05:15,919
as an example

00:05:14,080 --> 00:05:17,520
database which runs on aws that is a

00:05:15,919 --> 00:05:21,120
proprietary stack

00:05:17,520 --> 00:05:22,960
hardware you can't uh dynamically change

00:05:21,120 --> 00:05:24,479
or whatever hardware configurations

00:05:22,960 --> 00:05:26,080
which are done and what

00:05:24,479 --> 00:05:27,520
options are available are the options

00:05:26,080 --> 00:05:30,000
available you can't go

00:05:27,520 --> 00:05:31,039
and give up give a call to the aws data

00:05:30,000 --> 00:05:33,759
center admin and

00:05:31,039 --> 00:05:34,479
ask them for more cpu on one particular

00:05:33,759 --> 00:05:36,880
server

00:05:34,479 --> 00:05:37,759
right so both the hardware

00:05:36,880 --> 00:05:40,560
infrastructure

00:05:37,759 --> 00:05:41,840
as well as the engines which power it

00:05:40,560 --> 00:05:45,360
are proprietary

00:05:41,840 --> 00:05:49,120
kind of built like mainframe similarly

00:05:45,360 --> 00:05:51,520
google cloud bigtable is the database

00:05:49,120 --> 00:05:53,360
that bigtable database is proprietary

00:05:51,520 --> 00:05:54,720
microsoft azure the sql engines and

00:05:53,360 --> 00:05:56,960
everything that propriety

00:05:54,720 --> 00:05:59,919
but why did public cloud get adopted so

00:05:56,960 --> 00:06:02,960
much the two reasons for that

00:05:59,919 --> 00:06:05,440
one is the

00:06:02,960 --> 00:06:06,800
community which was built around the

00:06:05,440 --> 00:06:09,520
experiences

00:06:06,800 --> 00:06:10,240
so that's that's the community is a big

00:06:09,520 --> 00:06:12,560
part of it

00:06:10,240 --> 00:06:14,479
and leveraging open source to create

00:06:12,560 --> 00:06:15,520
that adoption layer the two reasons why

00:06:14,479 --> 00:06:19,039
the public cloud

00:06:15,520 --> 00:06:21,440
are popular today um are

00:06:19,039 --> 00:06:23,600
it always centers around experiences

00:06:21,440 --> 00:06:27,280
experiences experiences

00:06:23,600 --> 00:06:28,400
so that is the key to the adoption how

00:06:27,280 --> 00:06:30,479
do you build a community

00:06:28,400 --> 00:06:33,680
for application developers and also

00:06:30,479 --> 00:06:36,000
community for the operators

00:06:33,680 --> 00:06:37,280
so that adoption layer is very critical

00:06:36,000 --> 00:06:40,160
in the two reasons

00:06:37,280 --> 00:06:42,639
community and experiences for those

00:06:40,160 --> 00:06:42,639
communities

00:06:42,960 --> 00:06:46,319
using that as a reference i do want to

00:06:45,120 --> 00:06:50,880
bring

00:06:46,319 --> 00:06:54,639
back to the mainframe discussion here

00:06:50,880 --> 00:06:58,000
we know that zos on um

00:06:54,639 --> 00:07:02,319
mainframe are considered

00:06:58,000 --> 00:07:06,400
as more secure highly available

00:07:02,319 --> 00:07:08,080
and high transaction processing

00:07:06,400 --> 00:07:09,919
environment and hence they are the

00:07:08,080 --> 00:07:12,560
mainstay of

00:07:09,919 --> 00:07:14,800
a running mission critical application

00:07:12,560 --> 00:07:16,240
for all enterprises

00:07:14,800 --> 00:07:18,080
and hence there's also they are the

00:07:16,240 --> 00:07:19,840
system of record

00:07:18,080 --> 00:07:22,400
now now let's take a step back and see

00:07:19,840 --> 00:07:25,919
why that is the case

00:07:22,400 --> 00:07:26,880
going back to the lessons of computer

00:07:25,919 --> 00:07:28,319
science

00:07:26,880 --> 00:07:31,120
there is something in computer science

00:07:28,319 --> 00:07:31,120
called uh

00:07:31,520 --> 00:07:38,960
and theorem goes this way you can pick

00:07:36,479 --> 00:07:39,840
two of those three vectors consistency

00:07:38,960 --> 00:07:41,759
application

00:07:39,840 --> 00:07:42,960
and performance and you can be really

00:07:41,759 --> 00:07:46,400
good at two

00:07:42,960 --> 00:07:47,759
and on how you build distributed systems

00:07:46,400 --> 00:07:51,120
and everything

00:07:47,759 --> 00:07:54,479
those are the principles which are

00:07:51,120 --> 00:07:57,199
governing principles around how

00:07:54,479 --> 00:07:58,720
public cloud applications are public

00:07:57,199 --> 00:08:02,240
cloud infrastructures are

00:07:58,720 --> 00:08:04,800
are built that is not the case

00:08:02,240 --> 00:08:06,560
with zos the reason why it's a system of

00:08:04,800 --> 00:08:10,319
record for mission critical application

00:08:06,560 --> 00:08:12,720
is is that it breaks

00:08:10,319 --> 00:08:14,160
the zos on mainframe breaks the

00:08:12,720 --> 00:08:16,960
constraints

00:08:14,160 --> 00:08:18,560
defined in the cap theorem again it

00:08:16,960 --> 00:08:19,440
breaks the constraints defined in the

00:08:18,560 --> 00:08:21,599
cap theorem

00:08:19,440 --> 00:08:22,479
you can have consistency you can have

00:08:21,599 --> 00:08:24,879
availability

00:08:22,479 --> 00:08:27,039
and you can have performance all at the

00:08:24,879 --> 00:08:30,560
same time

00:08:27,039 --> 00:08:33,839
and that's what mainframe becomes

00:08:30,560 --> 00:08:37,200
and is the system of record

00:08:33,839 --> 00:08:40,080
high transaction processing secure

00:08:37,200 --> 00:08:41,360
highly available infrastructure to run

00:08:40,080 --> 00:08:44,000
applications

00:08:41,360 --> 00:08:45,920
now why does it matter for application

00:08:44,000 --> 00:08:48,399
uh developers

00:08:45,920 --> 00:08:50,240
if you are if you if the application

00:08:48,399 --> 00:08:53,680
developers have to

00:08:50,240 --> 00:08:55,360
write software to factor for whichever

00:08:53,680 --> 00:08:56,720
the third leg which is missing

00:08:55,360 --> 00:08:58,160
uh whether it's the consistency

00:08:56,720 --> 00:08:58,880
application and performance that's a lot

00:08:58,160 --> 00:09:00,399
of work

00:08:58,880 --> 00:09:02,560
which the application providers have to

00:09:00,399 --> 00:09:05,440
do with and this is this is what been

00:09:02,560 --> 00:09:06,800
one of the barriers why public cloud

00:09:05,440 --> 00:09:09,519
providers had had a

00:09:06,800 --> 00:09:10,240
hard time being the system of record in

00:09:09,519 --> 00:09:13,680
the

00:09:10,240 --> 00:09:16,320
um in the mission critical environments

00:09:13,680 --> 00:09:17,760
but mainframe comes from that background

00:09:16,320 --> 00:09:21,120
mainframe

00:09:17,760 --> 00:09:24,000
unshackles untangles

00:09:21,120 --> 00:09:25,600
freeze from the constraints of the cap

00:09:24,000 --> 00:09:28,560
term and it can deliver

00:09:25,600 --> 00:09:30,399
consistency application and performance

00:09:28,560 --> 00:09:32,720
all at the same time to the application

00:09:30,399 --> 00:09:34,320
so the application providers can focus

00:09:32,720 --> 00:09:38,720
on what they want to focus on

00:09:34,320 --> 00:09:41,279
which is building business logic but

00:09:38,720 --> 00:09:42,160
what about the cloud experience and how

00:09:41,279 --> 00:09:46,480
can

00:09:42,160 --> 00:09:46,480
all of the goodness which the

00:09:46,640 --> 00:09:50,320
mainframe environment can provide could

00:09:49,519 --> 00:09:52,959
be used

00:09:50,320 --> 00:09:55,920
to deliver a cloud experience for the

00:09:52,959 --> 00:09:59,920
mission critical applications

00:09:55,920 --> 00:10:02,399
it's possible much like the cap theorem

00:09:59,920 --> 00:10:04,240
i'll go back to the some of the

00:10:02,399 --> 00:10:07,920
fundamentals of computer science

00:10:04,240 --> 00:10:10,399
um sayings and philosophies there is one

00:10:07,920 --> 00:10:11,600
philosophy in computer science which uh

00:10:10,399 --> 00:10:14,720
which is very

00:10:11,600 --> 00:10:16,079
important in uh in helping define how

00:10:14,720 --> 00:10:19,120
open mainframe projects

00:10:16,079 --> 00:10:19,440
uh help uh deliver the cloud experience

00:10:19,120 --> 00:10:23,680
for

00:10:19,440 --> 00:10:25,120
mainframe the philosophy in computer

00:10:23,680 --> 00:10:26,320
science this philosophy in computer

00:10:25,120 --> 00:10:30,959
science skills

00:10:26,320 --> 00:10:32,720
you can solve most or any problem

00:10:30,959 --> 00:10:34,560
in computer science with a layer of

00:10:32,720 --> 00:10:38,240
abstraction

00:10:34,560 --> 00:10:40,720
and that layer of abstraction is

00:10:38,240 --> 00:10:41,440
for the experiences is the open

00:10:40,720 --> 00:10:44,160
mainframe

00:10:41,440 --> 00:10:45,279
project and all of the tool chains which

00:10:44,160 --> 00:10:48,320
have been developed

00:10:45,279 --> 00:10:50,160
from bash python r

00:10:48,320 --> 00:10:51,839
and all the machine learning languages

00:10:50,160 --> 00:10:55,120
which it all brings to

00:10:51,839 --> 00:10:56,079
that is key to delivering cloud

00:10:55,120 --> 00:10:59,120
experience

00:10:56,079 --> 00:11:00,720
to mainframes so if you are an app

00:10:59,120 --> 00:11:03,360
developer

00:11:00,720 --> 00:11:04,959
what does this give you with all the

00:11:03,360 --> 00:11:06,880
modern tools

00:11:04,959 --> 00:11:08,720
ported through in an open way in a

00:11:06,880 --> 00:11:09,839
secure way to the open mainframe

00:11:08,720 --> 00:11:12,000
projects and have

00:11:09,839 --> 00:11:14,560
experiences as zoe applications been

00:11:12,000 --> 00:11:17,600
delivered on top of it

00:11:14,560 --> 00:11:18,720
if you are an application developer what

00:11:17,600 --> 00:11:21,839
you get

00:11:18,720 --> 00:11:24,160
is you could do your test dab or your

00:11:21,839 --> 00:11:26,640
development in any of the public cloud

00:11:24,160 --> 00:11:28,240
but when you are going into production

00:11:26,640 --> 00:11:30,560
with your system of

00:11:28,240 --> 00:11:31,600
record information and highly secure

00:11:30,560 --> 00:11:33,680
environment

00:11:31,600 --> 00:11:35,680
you could just move back and forth

00:11:33,680 --> 00:11:37,440
between the public cloud

00:11:35,680 --> 00:11:38,880
and a mainframe with the cloud

00:11:37,440 --> 00:11:42,560
experience

00:11:38,880 --> 00:11:44,959
that agility is what is very important

00:11:42,560 --> 00:11:46,240
and its cloud is an experience and not a

00:11:44,959 --> 00:11:50,079
destination

00:11:46,240 --> 00:11:53,760
you as an app developer would want to

00:11:50,079 --> 00:11:57,200
have that freedom to develop anywhere

00:11:53,760 --> 00:11:58,079
deliver and build and deploy into

00:11:57,200 --> 00:12:01,120
production

00:11:58,079 --> 00:12:04,240
from anywhere that workflow

00:12:01,120 --> 00:12:07,519
is your choice and this

00:12:04,240 --> 00:12:07,920
abstraction layer on top of mainframe

00:12:07,519 --> 00:12:10,320
which

00:12:07,920 --> 00:12:11,120
open mainframe project provides delivers

00:12:10,320 --> 00:12:14,160
that

00:12:11,120 --> 00:12:14,959
hence for app developer cloud is an

00:12:14,160 --> 00:12:17,120
experience

00:12:14,959 --> 00:12:18,720
and not a destination they can continue

00:12:17,120 --> 00:12:20,320
developing their applications wherever

00:12:18,720 --> 00:12:22,000
they need to and with the tool chain

00:12:20,320 --> 00:12:25,440
which they are very familiar with

00:12:22,000 --> 00:12:27,040
an example is mongodb mongodb

00:12:25,440 --> 00:12:28,560
if you are very familiar with mongodb

00:12:27,040 --> 00:12:31,279
and you're using mongodb

00:12:28,560 --> 00:12:32,399
as the database for your um cloud

00:12:31,279 --> 00:12:35,279
application

00:12:32,399 --> 00:12:36,959
yeah that that one that same hundred db

00:12:35,279 --> 00:12:39,440
is now ported on to

00:12:36,959 --> 00:12:40,480
open mainframe through the open

00:12:39,440 --> 00:12:43,040
mainframe project

00:12:40,480 --> 00:12:43,519
so which means uh it doesn't matter

00:12:43,040 --> 00:12:46,560
where

00:12:43,519 --> 00:12:48,560
you are uh or what your tool chains are

00:12:46,560 --> 00:12:50,000
they they are available through open

00:12:48,560 --> 00:12:52,720
mainframe projects so hence cloud

00:12:50,000 --> 00:12:57,040
becomes an experience and

00:12:52,720 --> 00:12:58,880
not a destination so

00:12:57,040 --> 00:13:00,240
very foundational and very innovative

00:12:58,880 --> 00:13:01,519
work which has gone on to the open

00:13:00,240 --> 00:13:04,160
mainframe project so what does the

00:13:01,519 --> 00:13:07,279
roadmap look like

00:13:04,160 --> 00:13:09,200
what i believe by having open

00:13:07,279 --> 00:13:10,320
environment and all the tool chains

00:13:09,200 --> 00:13:13,360
which are available

00:13:10,320 --> 00:13:15,200
from public cloud also on the uh on the

00:13:13,360 --> 00:13:18,000
mainframe now

00:13:15,200 --> 00:13:18,839
the two dimensions of innovations which

00:13:18,000 --> 00:13:22,399
it

00:13:18,839 --> 00:13:25,120
springs our cloud hybrid cloud and

00:13:22,399 --> 00:13:28,240
what i call tangible ai let's talk about

00:13:25,120 --> 00:13:28,240
hybrid cloud here for a second

00:13:28,480 --> 00:13:34,880
moving data to workload is

00:13:31,600 --> 00:13:37,920
hard time consuming

00:13:34,880 --> 00:13:39,600
error prone and honestly

00:13:37,920 --> 00:13:41,279
just you need to know a lot a lot more

00:13:39,600 --> 00:13:43,360
about the data

00:13:41,279 --> 00:13:45,360
than the application uh developer would

00:13:43,360 --> 00:13:48,399
want to care for

00:13:45,360 --> 00:13:52,160
or need to know about what if

00:13:48,399 --> 00:13:54,399
we bring workload to the data

00:13:52,160 --> 00:13:56,000
you can rather than bringing data to the

00:13:54,399 --> 00:13:56,880
workload you bring in workflow to the

00:13:56,000 --> 00:14:00,079
data

00:13:56,880 --> 00:14:01,440
that is something which hybrid cloud the

00:14:00,079 --> 00:14:02,320
vision of the hybrid cloud can be

00:14:01,440 --> 00:14:05,279
delivered

00:14:02,320 --> 00:14:06,079
on on with with the foundation layer as

00:14:05,279 --> 00:14:08,880
the

00:14:06,079 --> 00:14:10,800
open mainframe project because uh there

00:14:08,880 --> 00:14:13,120
is consistency in the tool chains there

00:14:10,800 --> 00:14:16,480
is consistency in the abstraction layer

00:14:13,120 --> 00:14:18,959
which has been provided so when i see

00:14:16,480 --> 00:14:19,680
open mainframe projects developing

00:14:18,959 --> 00:14:21,360
further

00:14:19,680 --> 00:14:23,040
now that the foundations are there and

00:14:21,360 --> 00:14:24,959
innovative projects are coming in

00:14:23,040 --> 00:14:27,120
is becoming the enabled technology for

00:14:24,959 --> 00:14:29,920
hybrid cloud

00:14:27,120 --> 00:14:30,639
bring your workload to the data there's

00:14:29,920 --> 00:14:32,639
a lot

00:14:30,639 --> 00:14:35,360
to uh from a value proposition

00:14:32,639 --> 00:14:38,399
standpoint for app developers

00:14:35,360 --> 00:14:40,320
similarly for sys administrators uh

00:14:38,399 --> 00:14:41,839
whether it's a sysprog in mainframe

00:14:40,320 --> 00:14:44,639
or whether it's a site reliability

00:14:41,839 --> 00:14:47,040
engineer in the public cloud provider

00:14:44,639 --> 00:14:48,000
embedding the artificial intelligence

00:14:47,040 --> 00:14:50,399
libraries

00:14:48,000 --> 00:14:52,480
and also making building applications

00:14:50,399 --> 00:14:53,120
using those libraries to make operations

00:14:52,480 --> 00:14:54,880
simple

00:14:53,120 --> 00:14:56,320
in the hybrid cloud environment or the

00:14:54,880 --> 00:14:58,320
private cloud environment

00:14:56,320 --> 00:14:59,839
or the mainframe environment is very

00:14:58,320 --> 00:15:02,240
valuable

00:14:59,839 --> 00:15:03,519
i did which helps identifying problems

00:15:02,240 --> 00:15:06,320
rectifying problems

00:15:03,519 --> 00:15:08,880
and also predicting where problems could

00:15:06,320 --> 00:15:12,000
be occurring it's a very valuable tool

00:15:08,880 --> 00:15:15,199
which which which i call the tangible ai

00:15:12,000 --> 00:15:18,720
here is um is relevant for

00:15:15,199 --> 00:15:21,440
the sysprocs the sres and um

00:15:18,720 --> 00:15:21,760
the operators of the of the data centers

00:15:21,440 --> 00:15:25,120
uh

00:15:21,760 --> 00:15:26,720
or the cloud environment so what this

00:15:25,120 --> 00:15:29,120
says

00:15:26,720 --> 00:15:30,000
is open mainframe project has done

00:15:29,120 --> 00:15:32,320
amazing

00:15:30,000 --> 00:15:34,160
amount of i'm impressed by the strength

00:15:32,320 --> 00:15:35,360
of the community and the

00:15:34,160 --> 00:15:38,560
software technologies which are

00:15:35,360 --> 00:15:41,440
available in it and it's foundational

00:15:38,560 --> 00:15:44,240
to the road map of hybrid cloud and the

00:15:41,440 --> 00:15:46,880
tangible ai

00:15:44,240 --> 00:15:48,000
hence ladies and gentlemen cloud is an

00:15:46,880 --> 00:15:51,040
experience and not a

00:15:48,000 --> 00:15:52,079
not a destination an open mainframe

00:15:51,040 --> 00:15:55,040
project

00:15:52,079 --> 00:15:55,920
is the cornerstone innovation layer

00:15:55,040 --> 00:16:00,240
which makes

00:15:55,920 --> 00:16:00,240
mainframe a secure hybrid cloud

00:16:00,399 --> 00:16:04,000
thank you very much for your time and

00:16:02,399 --> 00:16:08,720
enjoy the rest

00:16:04,000 --> 00:16:08,720

YouTube URL: https://www.youtube.com/watch?v=MvkpRNXi8HY


