Title: Lightning Talk: Ansible on Z: A True Open Development Experience - Demetri Dimatos, IBM
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	Lightning Talk: Ansible on Z: A True Open Development Experience - Demetri Dimatos, IBM

In developing Ansible content for IBM Z, the team leveraged open development practices and tools to contribute content out to the open community. Through the use of GitHub, Jenkins, and Sphinx, the team was able to deliver enterprise wide automation capabilities. Hear from one of the developers as they explain their experiences and tools they used.
Captions: 
	00:00:00,080 --> 00:00:05,040
my name is demetrious to models

00:00:03,360 --> 00:00:07,120
i'm the lead engineer for the ansible

00:00:05,040 --> 00:00:09,360
core offering on z

00:00:07,120 --> 00:00:10,639
in today's presentation we're going to

00:00:09,360 --> 00:00:12,240
discuss

00:00:10,639 --> 00:00:14,960
how we took our offering to the open

00:00:12,240 --> 00:00:16,000
source community on z

00:00:14,960 --> 00:00:17,680
we're going to discuss some of our

00:00:16,000 --> 00:00:19,199
processes and some of our tooling

00:00:17,680 --> 00:00:21,920
choices

00:00:19,199 --> 00:00:23,359
and we hope that from this presentation

00:00:21,920 --> 00:00:27,279
that'll help you

00:00:23,359 --> 00:00:27,279
when you take your offering to the

00:00:28,840 --> 00:00:33,040
community

00:00:30,800 --> 00:00:34,559
a little bit about our offering we're an

00:00:33,040 --> 00:00:36,640
ansible collection

00:00:34,559 --> 00:00:38,320
we consist of modules plugins roles and

00:00:36,640 --> 00:00:42,719
playbooks

00:00:38,320 --> 00:00:46,079
we enable z to be automated with ansible

00:00:42,719 --> 00:00:48,480
we release the galaxy and automation hub

00:00:46,079 --> 00:00:49,440
galaxy being the open source unsupported

00:00:48,480 --> 00:00:52,879
version

00:00:49,440 --> 00:00:56,079
while hub comes with service and support

00:00:52,879 --> 00:01:00,160
we started about six months ago and you

00:00:56,079 --> 00:01:00,160
can see already we have 3 400 downloads

00:01:03,520 --> 00:01:07,119
we began by prototyping our code in

00:01:05,199 --> 00:01:10,320
github enterprise

00:01:07,119 --> 00:01:12,159
qhub enterprise runs on ibm hardware

00:01:10,320 --> 00:01:13,680
it's a relatively safe place to put your

00:01:12,159 --> 00:01:16,320
code

00:01:13,680 --> 00:01:19,040
it provide us the necessary sandboxes to

00:01:16,320 --> 00:01:22,159
prototype and transform our offering

00:01:19,040 --> 00:01:23,280
it basically gave us time to work while

00:01:22,159 --> 00:01:27,840
we planned our

00:01:23,280 --> 00:01:30,159
overall vision

00:01:27,840 --> 00:01:32,560
as we started discussing our vision we

00:01:30,159 --> 00:01:34,880
knew we wanted to be open source

00:01:32,560 --> 00:01:36,640
we knew we wanted community engagement

00:01:34,880 --> 00:01:39,759
we wanted individual contributions as

00:01:36,640 --> 00:01:41,280
well as partner participation

00:01:39,759 --> 00:01:43,360
wanted continuous integration and

00:01:41,280 --> 00:01:46,399
continuous delivery

00:01:43,360 --> 00:01:48,079
we wanted quality documentation and

00:01:46,399 --> 00:01:49,439
ultimately we really wanted a first

00:01:48,079 --> 00:01:55,840
class experience

00:01:49,439 --> 00:01:55,840
for ansible on z

00:01:56,240 --> 00:02:00,399
after defining our vision we were

00:01:57,840 --> 00:02:01,840
getting ready to shift to github

00:02:00,399 --> 00:02:04,719
we started thinking about how we would

00:02:01,840 --> 00:02:07,439
manage updates and releases

00:02:04,719 --> 00:02:08,959
what workflow would we use there's a

00:02:07,439 --> 00:02:11,599
number of workflows out there

00:02:08,959 --> 00:02:12,800
there's git flow github flow one flow

00:02:11,599 --> 00:02:14,239
azure flow

00:02:12,800 --> 00:02:16,319
and many more i didn't even list out

00:02:14,239 --> 00:02:19,920
here

00:02:16,319 --> 00:02:19,920
we ultimately chose git flow

00:02:20,000 --> 00:02:23,840
primarily because i'm familiar with it

00:02:23,920 --> 00:02:26,640
and even though i've worked in other

00:02:25,120 --> 00:02:28,239
communities i've actually never started

00:02:26,640 --> 00:02:29,599
my own community

00:02:28,239 --> 00:02:32,959
and this is why i'm sharing some of this

00:02:29,599 --> 00:02:34,239
information it may not be obvious

00:02:32,959 --> 00:02:36,160
if you come into a community that's

00:02:34,239 --> 00:02:37,840
already set up but when you're building

00:02:36,160 --> 00:02:39,599
one from scratch there's a lot to think

00:02:37,840 --> 00:02:40,640
about

00:02:39,599 --> 00:02:42,720
and this is one of those things you

00:02:40,640 --> 00:02:44,400
should be thinking about with the

00:02:42,720 --> 00:02:46,319
various types of workflows out there

00:02:44,400 --> 00:02:48,879
some have long lived branches others

00:02:46,319 --> 00:02:50,879
have tags some have one branch

00:02:48,879 --> 00:02:52,160
others have long lived branches there's

00:02:50,879 --> 00:02:53,519
just different versions and different

00:02:52,160 --> 00:02:55,040
ways of working

00:02:53,519 --> 00:02:57,680
you should think about how you want your

00:02:55,040 --> 00:02:57,680
team to work

00:02:58,319 --> 00:03:01,840
as we began thinking about our team we

00:03:00,720 --> 00:03:03,040
thought there might be some skills

00:03:01,840 --> 00:03:06,239
around github that

00:03:03,040 --> 00:03:09,519
were not necessarily apparent so we

00:03:06,239 --> 00:03:12,640
started identifying use cases

00:03:09,519 --> 00:03:12,640
around using github

00:03:13,440 --> 00:03:16,879
some of the use cases we came up with

00:03:15,040 --> 00:03:19,680
were develop a new feature

00:03:16,879 --> 00:03:21,440
develop multiple features in parallel

00:03:19,680 --> 00:03:24,480
creating deployable release

00:03:21,440 --> 00:03:26,799
bug fixing production hotfixes

00:03:24,480 --> 00:03:28,959
backing features out and there's several

00:03:26,799 --> 00:03:32,000
more actually

00:03:28,959 --> 00:03:33,120
after we identified the use cases we

00:03:32,000 --> 00:03:35,599
went back through

00:03:33,120 --> 00:03:38,080
drew little diagrams how the flows look

00:03:35,599 --> 00:03:39,680
and supplied each use case with commands

00:03:38,080 --> 00:03:42,640
now our team had a consistent way of

00:03:39,680 --> 00:03:42,640
interacting with github

00:03:43,599 --> 00:03:47,519
we also provided naming conventions for

00:03:45,200 --> 00:03:50,400
the branches as well as the modules

00:03:47,519 --> 00:03:50,400
and variable names

00:03:51,760 --> 00:03:55,599
continuous integration and continuous

00:03:53,200 --> 00:03:58,720
delivery we knew we wanted automation

00:03:55,599 --> 00:04:00,720
we ultimately picked jenkins primarily

00:03:58,720 --> 00:04:03,439
because it met our needs

00:04:00,720 --> 00:04:07,200
and had a vast library of plugins and

00:04:03,439 --> 00:04:10,799
for portability we put in a docker image

00:04:07,200 --> 00:04:14,799
our pipeline executes whenever there's a

00:04:10,799 --> 00:04:16,720
pull request

00:04:14,799 --> 00:04:19,199
that pull request is triggered by github

00:04:16,720 --> 00:04:19,199
webhook

00:04:19,519 --> 00:04:23,840
what that means is when someone pushes

00:04:21,120 --> 00:04:29,120
code and a pull request happens

00:04:23,840 --> 00:04:30,800
that web hook triggers our pipeline

00:04:29,120 --> 00:04:32,400
our pipeline consists of about 50

00:04:30,800 --> 00:04:36,000
different sanity tests

00:04:32,400 --> 00:04:38,800
linters pepe gamble lent etc

00:04:36,000 --> 00:04:40,320
and security scans such as bandit we

00:04:38,800 --> 00:04:42,639
wanted a quality

00:04:40,320 --> 00:04:44,560
delivery so we built out many different

00:04:42,639 --> 00:04:46,720
tests

00:04:44,560 --> 00:04:49,440
our pipeline also puts the binaries in

00:04:46,720 --> 00:04:49,440
artifactory

00:04:49,680 --> 00:04:52,800
it also stashes our logs for auto

00:04:51,759 --> 00:04:54,479
purposes

00:04:52,800 --> 00:04:55,919
and i want to pause for a second i

00:04:54,479 --> 00:04:56,479
highly recommend you keep your logs

00:04:55,919 --> 00:04:58,000
around

00:04:56,479 --> 00:05:00,479
you never know when you might need to be

00:04:58,000 --> 00:05:00,479
audited

00:05:00,880 --> 00:05:05,360
finally our tests run on zvms behind the

00:05:03,199 --> 00:05:07,039
ibm's firewall

00:05:05,360 --> 00:05:09,120
basically what that means it runs on a

00:05:07,039 --> 00:05:10,400
mainframe

00:05:09,120 --> 00:05:12,479
now you might wonder how is that

00:05:10,400 --> 00:05:14,320
community driven well

00:05:12,479 --> 00:05:16,080
for now we are looking at other options

00:05:14,320 --> 00:05:18,720
to provide compute to users outside the

00:05:16,080 --> 00:05:20,479
ibm firewalls but in order to provide

00:05:18,720 --> 00:05:21,840
development time and compute time to

00:05:20,479 --> 00:05:23,440
those developers who are not part of the

00:05:21,840 --> 00:05:26,080
ibm network

00:05:23,440 --> 00:05:27,520
what we did was we leveraged a webhook

00:05:26,080 --> 00:05:29,759
delivery service

00:05:27,520 --> 00:05:31,360
so when a pull request happens the

00:05:29,759 --> 00:05:33,280
pipeline executes

00:05:31,360 --> 00:05:35,680
those results from the pipeline are

00:05:33,280 --> 00:05:38,000
pushed back into the pull request

00:05:35,680 --> 00:05:39,440
through a web delivery service this

00:05:38,000 --> 00:05:43,199
allows the user who

00:05:39,440 --> 00:05:45,039
pushed the poll to see the results

00:05:43,199 --> 00:05:47,919
and correct them and open another pull

00:05:45,039 --> 00:05:51,199
request if necessary

00:05:47,919 --> 00:05:52,400
the delivery service we use is sme io

00:05:51,199 --> 00:05:55,360
and you can kind of see on the bottom

00:05:52,400 --> 00:05:58,960
there our different

00:05:55,360 --> 00:05:58,960
tests that we run during our pipeline

00:05:59,759 --> 00:06:03,520
documentation we originally started with

00:06:01,919 --> 00:06:04,880
markdown

00:06:03,520 --> 00:06:07,360
we found that a little bit difficult to

00:06:04,880 --> 00:06:09,360
maintain

00:06:07,360 --> 00:06:10,639
we ended up shifting everything over to

00:06:09,360 --> 00:06:14,560
restructured text

00:06:10,639 --> 00:06:15,600
rst primarily because rst has many

00:06:14,560 --> 00:06:19,199
different tools

00:06:15,600 --> 00:06:19,199
to help you generate html

00:06:19,440 --> 00:06:22,560
we rely on sphynx string steam sync's

00:06:21,840 --> 00:06:26,319
versions

00:06:22,560 --> 00:06:28,000
hansel doctor's director and jinja

00:06:26,319 --> 00:06:29,759
sphynx will take the rsd and generate

00:06:28,000 --> 00:06:30,639
html as you can kind of see there on the

00:06:29,759 --> 00:06:33,680
right

00:06:30,639 --> 00:06:36,800
it then will also put into a theme

00:06:33,680 --> 00:06:38,240
that is also there on the right syncs

00:06:36,800 --> 00:06:39,680
versions will allow you to create

00:06:38,240 --> 00:06:41,840
versions of your documentation so they

00:06:39,680 --> 00:06:43,440
can be selected with a drop down

00:06:41,840 --> 00:06:45,280
that way users who want to see older

00:06:43,440 --> 00:06:48,560
versions of your doc can select it

00:06:45,280 --> 00:06:50,080
to the corresponding release they have

00:06:48,560 --> 00:06:52,560
ansible modules are really heavily

00:06:50,080 --> 00:06:54,560
documented so we leverage that

00:06:52,560 --> 00:06:58,240
and we extract that documentation into

00:06:54,560 --> 00:06:59,840
rst from the ansible doc extractor tool

00:06:58,240 --> 00:07:01,520
and all jinja does is it provides

00:06:59,840 --> 00:07:03,520
additional formatting that we find

00:07:01,520 --> 00:07:06,000
necessary and provides additional

00:07:03,520 --> 00:07:06,000
clarity

00:07:07,520 --> 00:07:10,479
i want to talk a little bit about

00:07:08,560 --> 00:07:11,360
licensing this could be a topic on its

00:07:10,479 --> 00:07:12,880
own

00:07:11,360 --> 00:07:15,120
but it is important you understand that

00:07:12,880 --> 00:07:16,720
there is licenses you have to take into

00:07:15,120 --> 00:07:19,039
account for

00:07:16,720 --> 00:07:20,080
understand what your organization wants

00:07:19,039 --> 00:07:22,479
in terms of a license

00:07:20,080 --> 00:07:23,520
understand what your vision is so you

00:07:22,479 --> 00:07:26,639
can

00:07:23,520 --> 00:07:28,960
appropriately pick a license

00:07:26,639 --> 00:07:30,319
that being said review the open source

00:07:28,960 --> 00:07:32,720
initiative licenses that are

00:07:30,319 --> 00:07:34,800
supported and accepted understand the

00:07:32,720 --> 00:07:37,759
differences between proprietary licenses

00:07:34,800 --> 00:07:38,639
copyleft licenses strong and weak and

00:07:37,759 --> 00:07:41,199
permissive

00:07:38,639 --> 00:07:41,199
licenses

00:07:42,400 --> 00:07:45,599
if you have legal counsel or access to

00:07:44,400 --> 00:07:47,120
legal counsel

00:07:45,599 --> 00:07:48,400
i recommend you engage them and

00:07:47,120 --> 00:07:48,720
understand a little bit more but there

00:07:48,400 --> 00:07:50,160
are

00:07:48,720 --> 00:07:52,479
plenty of resources out there to learn

00:07:50,160 --> 00:07:52,479
from

00:07:54,639 --> 00:07:58,160
as well you should understand what it

00:07:56,639 --> 00:08:00,400
means when you fork code

00:07:58,160 --> 00:08:02,000
particularly licensed code how that

00:08:00,400 --> 00:08:02,720
forked license code will impact your

00:08:02,000 --> 00:08:05,280
code

00:08:02,720 --> 00:08:07,199
we ourselves do fork license code we

00:08:05,280 --> 00:08:09,919
understand the impact

00:08:07,199 --> 00:08:12,000
and adjust for it understand what it

00:08:09,919 --> 00:08:15,360
means to include licensed binaries

00:08:12,000 --> 00:08:18,639
if you ship a binary check its license

00:08:15,360 --> 00:08:18,639
see how it impacts your code

00:08:18,800 --> 00:08:23,039
understand what it means to extend

00:08:20,160 --> 00:08:24,479
compile code versus interpret license

00:08:23,039 --> 00:08:28,319
code

00:08:24,479 --> 00:08:30,080
and lastly copyrights which pretty much

00:08:28,319 --> 00:08:33,120
provide a mechanism for you to secure

00:08:30,080 --> 00:08:33,120
intellectual property

00:08:36,000 --> 00:08:39,279
that kind of brings us to the end of

00:08:37,279 --> 00:08:40,719
this conversation i hope you guys found

00:08:39,279 --> 00:08:43,279
this helpful

00:08:40,719 --> 00:08:49,600
feel free to reach out to me i look

00:08:43,279 --> 00:08:49,600

YouTube URL: https://www.youtube.com/watch?v=xwCwDr_ALa4


