Title: ZoweOut: The Interactive Learning Experience- Jessielaine Punongbayan & Richelle Anne Craw, Broadcom
Publication date: 2020-09-08
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	ZoweOut: The Interactive Learning Experience - Jessielaine Punongbayan & Richelle Anne Craw, Broadcom 

Have you ever wondered if games and mainframes are compatible? We have! Join this session as we showcase our winning hackathon project about a Zowe Learning Environment that allows you to learn more about Mainframe in a fun way.

Come and hear about how and why we came up with the idea; the technologies we used; and all the fun, learnings, and challenges we experienced during the hackathon. We will discuss how we see this project fits in the modern mainframe movement, including how everyone from beginners to experts in mainframe technology can come together and learn from each other.

All learners are welcome!
Captions: 
	00:00:00,080 --> 00:00:04,880
hello and welcome to our session zoe out

00:00:02,960 --> 00:00:06,480
the interactive learning experience my

00:00:04,880 --> 00:00:08,559
name is rachelle and girl

00:00:06,480 --> 00:00:12,160
and i'm jesse in podembayan and we are

00:00:08,559 --> 00:00:12,160
software engineers here in broadcom

00:00:13,360 --> 00:00:20,160
so open source tooling dominates appdiv

00:00:16,880 --> 00:00:22,800
um github jenkins and visual studio code

00:00:20,160 --> 00:00:23,199
these open source tools are everywhere

00:00:22,800 --> 00:00:24,960
and

00:00:23,199 --> 00:00:27,519
what we like about open source tooling

00:00:24,960 --> 00:00:30,160
is that it gives you the ability

00:00:27,519 --> 00:00:31,279
to build on top of it and today we are

00:00:30,160 --> 00:00:34,960
going to talk about

00:00:31,279 --> 00:00:34,960
what we built on top of zoe

00:00:36,079 --> 00:00:39,600
so we built something on top of zoe when

00:00:38,480 --> 00:00:41,920
we joined the

00:00:39,600 --> 00:00:42,879
open mainframe virtual hackathon so what

00:00:41,920 --> 00:00:45,440
is a hackathon

00:00:42,879 --> 00:00:47,039
so this is an event typically lasting

00:00:45,440 --> 00:00:48,320
several days in which a large number of

00:00:47,039 --> 00:00:50,800
people need to engage

00:00:48,320 --> 00:00:53,440
in collaborative computer programming so

00:00:50,800 --> 00:00:56,719
last february open mainframe project

00:00:53,440 --> 00:00:58,719
started this zoe virtual hackathon and

00:00:56,719 --> 00:00:59,920
it focused on innovation on all things

00:00:58,719 --> 00:01:02,160
zoe so

00:00:59,920 --> 00:01:04,000
we won this event and we are going to

00:01:02,160 --> 00:01:08,799
discuss today

00:01:04,000 --> 00:01:11,439
what we built and how we built it yeah

00:01:08,799 --> 00:01:12,080
so before we begin let's have a brief

00:01:11,439 --> 00:01:14,799
background

00:01:12,080 --> 00:01:16,000
of who we are we are mainframe

00:01:14,799 --> 00:01:19,920
developers

00:01:16,000 --> 00:01:24,080
um and we started our career

00:01:19,920 --> 00:01:27,759
um developing solutions for 3270

00:01:24,080 --> 00:01:29,600
and honestly as as i've started um

00:01:27,759 --> 00:01:31,560
in development as a mainframe developer

00:01:29,600 --> 00:01:33,280
i've always been fascinated by using

00:01:31,560 --> 00:01:36,560
3270 you know

00:01:33,280 --> 00:01:39,840
it is very old school and uncommon

00:01:36,560 --> 00:01:40,799
that it made me feel very special and i

00:01:39,840 --> 00:01:43,040
remember

00:01:40,799 --> 00:01:44,720
one time that there was this an

00:01:43,040 --> 00:01:45,040
announcement from our company that you

00:01:44,720 --> 00:01:48,159
know

00:01:45,040 --> 00:01:50,320
that they have updated mainframe and i

00:01:48,159 --> 00:01:53,520
thought to myself like

00:01:50,320 --> 00:01:57,200
wow this old technology

00:01:53,520 --> 00:01:58,479
that looks so old school is still being

00:01:57,200 --> 00:02:02,079
updated

00:01:58,479 --> 00:02:04,560
and so with that i thought we thought

00:02:02,079 --> 00:02:10,160
like or i thought to myself like

00:02:04,560 --> 00:02:13,599
wow what's more out there for mainframe

00:02:10,160 --> 00:02:16,879
um and now we are we're currently um

00:02:13,599 --> 00:02:19,840
r d engineers here in in broadcom where

00:02:16,879 --> 00:02:20,879
we're working for the zoe project and

00:02:19,840 --> 00:02:23,520
for those who don't know

00:02:20,879 --> 00:02:25,680
zoe is an open source project that is

00:02:23,520 --> 00:02:28,640
hosted by open mainframe

00:02:25,680 --> 00:02:30,160
and it offers modern interfaces to

00:02:28,640 --> 00:02:32,720
interact with zws

00:02:30,160 --> 00:02:33,840
and the goal for this project is to make

00:02:32,720 --> 00:02:37,120
mainframe

00:02:33,840 --> 00:02:38,080
open and as we are working here we are

00:02:37,120 --> 00:02:40,879
able to witness

00:02:38,080 --> 00:02:41,920
different kinds of technologies that is

00:02:40,879 --> 00:02:44,480
being developed

00:02:41,920 --> 00:02:45,280
there are rush apis there are ides there

00:02:44,480 --> 00:02:48,840
are cli's

00:02:45,280 --> 00:02:51,920
webstop web desktop and even mobile

00:02:48,840 --> 00:02:53,920
application and that fascination that

00:02:51,920 --> 00:02:55,120
i've been talking about like fascination

00:02:53,920 --> 00:02:59,599
for 32

00:02:55,120 --> 00:03:01,840
for terminals and asking like what's

00:02:59,599 --> 00:03:04,159
what's more out there for mainframe

00:03:01,840 --> 00:03:06,319
seeing all of this new technologies

00:03:04,159 --> 00:03:07,599
it prompted me to ask that question

00:03:06,319 --> 00:03:12,159
again like

00:03:07,599 --> 00:03:13,920
what's more out there for mainframe

00:03:12,159 --> 00:03:15,280
and that's a good question because we

00:03:13,920 --> 00:03:17,120
have witnessed

00:03:15,280 --> 00:03:18,319
mainframe evolved throughout the years

00:03:17,120 --> 00:03:21,040
with our career

00:03:18,319 --> 00:03:22,640
and so now in our mindset we think well

00:03:21,040 --> 00:03:25,519
what about the next generation

00:03:22,640 --> 00:03:26,799
so the next generation of mainframers

00:03:25,519 --> 00:03:29,920
have this new knowledge

00:03:26,799 --> 00:03:31,519
new perspectives and they will and

00:03:29,920 --> 00:03:33,760
they will join the mainframe community

00:03:31,519 --> 00:03:36,480
so we try to think of

00:03:33,760 --> 00:03:38,480
how can this new mainframe improve the

00:03:36,480 --> 00:03:41,280
platform and make it better

00:03:38,480 --> 00:03:42,080
and more importantly how can we help in

00:03:41,280 --> 00:03:43,920
that goal

00:03:42,080 --> 00:03:47,840
so that's where we thought of zoya the

00:03:43,920 --> 00:03:47,840
interactive learning experience

00:03:48,080 --> 00:03:53,920
exactly and what is zoyal

00:03:51,120 --> 00:03:55,920
zoya just like rachelle said it is an

00:03:53,920 --> 00:03:58,879
interactive learning experience

00:03:55,920 --> 00:04:01,200
that allows you to learn more about

00:03:58,879 --> 00:04:02,400
mainframe and the different components

00:04:01,200 --> 00:04:04,480
of zoe

00:04:02,400 --> 00:04:07,519
so what are the components of zoe it's

00:04:04,480 --> 00:04:09,680
the cli there's this api mediation layer

00:04:07,519 --> 00:04:12,159
there's the web desktop the vs code

00:04:09,680 --> 00:04:15,599
extension and the mobile application

00:04:12,159 --> 00:04:17,160
and in this um idea we it is

00:04:15,599 --> 00:04:19,040
we created it as a form of a

00:04:17,160 --> 00:04:21,919
gamification

00:04:19,040 --> 00:04:23,520
where there is a self-paced interactive

00:04:21,919 --> 00:04:25,600
tutorial course

00:04:23,520 --> 00:04:26,800
there are hands-on experiences that are

00:04:25,600 --> 00:04:29,360
available

00:04:26,800 --> 00:04:30,560
and it features a step-by-step guide

00:04:29,360 --> 00:04:32,880
that includes

00:04:30,560 --> 00:04:34,160
tutorial links to videos and other

00:04:32,880 --> 00:04:38,160
resources

00:04:34,160 --> 00:04:41,759
so we got it as a fun way to learn more

00:04:38,160 --> 00:04:45,120
about mainframe exactly and one goal

00:04:41,759 --> 00:04:46,720
that we have for this idea is to ask

00:04:45,120 --> 00:04:51,520
this question

00:04:46,720 --> 00:04:51,520
what more can i do with mainframe

00:04:51,759 --> 00:04:56,000
the architecture behind zoe out was

00:04:55,040 --> 00:04:59,520
inspired by our

00:04:56,000 --> 00:05:02,880
previous zoe hackathon project

00:04:59,520 --> 00:05:05,919
in broadcom's internal zoe hackathon

00:05:02,880 --> 00:05:09,520
jelly and i along with our colleagues

00:05:05,919 --> 00:05:10,160
david marchetta came up with the zoe

00:05:09,520 --> 00:05:13,840
mobile

00:05:10,160 --> 00:05:16,960
application here

00:05:13,840 --> 00:05:18,080
we used open source tools like angular

00:05:16,960 --> 00:05:21,520
and ionic

00:05:18,080 --> 00:05:23,360
for the mobile client side and for the

00:05:21,520 --> 00:05:26,720
mainframe site

00:05:23,360 --> 00:05:27,280
we use the authentication service of the

00:05:26,720 --> 00:05:31,199
zoe

00:05:27,280 --> 00:05:33,919
api mediation layer we also used

00:05:31,199 --> 00:05:35,919
the zoe api mediation layer to

00:05:33,919 --> 00:05:40,000
dynamically discover

00:05:35,919 --> 00:05:40,960
zsmf rest apis as well as the zs

00:05:40,000 --> 00:05:42,960
services

00:05:40,960 --> 00:05:44,960
that provided the core functions we

00:05:42,960 --> 00:05:47,840
needed

00:05:44,960 --> 00:05:48,560
in this case we mostly used the job

00:05:47,840 --> 00:05:53,840
services

00:05:48,560 --> 00:05:53,840
found in zoe for the mobile application

00:05:54,000 --> 00:06:00,560
since then this zoe mobile application

00:05:57,759 --> 00:06:02,080
became part of zoe as an incubation

00:06:00,560 --> 00:06:04,840
project

00:06:02,080 --> 00:06:06,000
you can check out our repository and

00:06:04,840 --> 00:06:08,560
contribute

00:06:06,000 --> 00:06:11,919
on zoey on the go which is under zoe's

00:06:08,560 --> 00:06:11,919
guitar repository

00:06:13,440 --> 00:06:16,639
we learned so much from this experience

00:06:16,160 --> 00:06:19,680
that it

00:06:16,639 --> 00:06:24,400
inspired us to find other creative ways

00:06:19,680 --> 00:06:27,440
to use the technology we asked ourselves

00:06:24,400 --> 00:06:31,440
what more can we build from this

00:06:27,440 --> 00:06:35,120
so this is the technology behind zoe out

00:06:31,440 --> 00:06:37,360
here we use the ui toolkit provided by

00:06:35,120 --> 00:06:40,560
ionic development framework

00:06:37,360 --> 00:06:43,360
for building the web application

00:06:40,560 --> 00:06:44,319
we also used angular as the development

00:06:43,360 --> 00:06:46,880
platform

00:06:44,319 --> 00:06:49,199
with our code written in html and

00:06:46,880 --> 00:06:52,000
typescript

00:06:49,199 --> 00:06:53,759
the idea is that the users will log in

00:06:52,000 --> 00:06:56,880
to the web application

00:06:53,759 --> 00:07:01,280
which contains zoe on docker

00:06:56,880 --> 00:07:04,240
as well as a mock zsmf api server

00:07:01,280 --> 00:07:05,440
it is interesting to note here that this

00:07:04,240 --> 00:07:08,080
zoe and docker

00:07:05,440 --> 00:07:08,960
was not an original idea from us but it

00:07:08,080 --> 00:07:11,039
was another

00:07:08,960 --> 00:07:14,400
product of the same broadcom zoe

00:07:11,039 --> 00:07:14,400
hackathon we attended

00:07:15,280 --> 00:07:21,680
and this is also now contributed to zoe

00:07:18,479 --> 00:07:25,199
so if you want you can

00:07:21,680 --> 00:07:28,479
check it out and try it for yourself

00:07:25,199 --> 00:07:31,840
the idea of this dockerization and mock

00:07:28,479 --> 00:07:34,720
apis is that the web application

00:07:31,840 --> 00:07:36,800
would not be connected to a real system

00:07:34,720 --> 00:07:39,039
that will be affected by the training

00:07:36,800 --> 00:07:39,039
game

00:07:39,599 --> 00:07:45,120
this will also make it lightweight as it

00:07:42,479 --> 00:07:48,080
will not make real api calls

00:07:45,120 --> 00:07:50,479
to many systems for example and this is

00:07:48,080 --> 00:07:53,919
what we would have used

00:07:50,479 --> 00:07:57,360
on the other hand the mox zsmf api

00:07:53,919 --> 00:07:58,319
calls makes the experience real to the

00:07:57,360 --> 00:08:00,080
users

00:07:58,319 --> 00:08:01,759
as if they are connected to the

00:08:00,080 --> 00:08:04,560
mainframe yes

00:08:01,759 --> 00:08:06,479
this is a combination of technologies

00:08:04,560 --> 00:08:07,759
that are generally are available to

00:08:06,479 --> 00:08:10,000
everyone and we

00:08:07,759 --> 00:08:11,680
just reimagined it to make it into a

00:08:10,000 --> 00:08:15,039
game for learners of

00:08:11,680 --> 00:08:15,680
mainframe yes so but enough talk you

00:08:15,039 --> 00:08:18,800
know

00:08:15,680 --> 00:08:26,780
let's just show you an example

00:08:18,800 --> 00:08:30,479
of the project that we have done

00:08:26,780 --> 00:08:34,080
[Music]

00:08:30,479 --> 00:08:36,479
my name is jesse and i am a mainframe

00:08:34,080 --> 00:08:36,479
developer

00:08:36,560 --> 00:08:41,200
i started as a mainframe application

00:08:38,839 --> 00:08:42,800
developer i remember being fascinated by

00:08:41,200 --> 00:08:44,240
the idea of writing code using a

00:08:42,800 --> 00:08:47,040
terminal

00:08:44,240 --> 00:08:48,720
and as my career progressed i learned

00:08:47,040 --> 00:08:51,360
more and more about the tools that other

00:08:48,720 --> 00:08:54,480
companies are developing for mainframe

00:08:51,360 --> 00:08:55,040
and that got me thinking what's more out

00:08:54,480 --> 00:08:56,170
there

00:08:55,040 --> 00:08:58,480
for mainframe

00:08:56,170 --> 00:09:00,720
[Music]

00:08:58,480 --> 00:09:04,080
my interest grew more and more when i

00:09:00,720 --> 00:09:06,800
started working for the zone function

00:09:04,080 --> 00:09:08,000
this is a project hosted by opening and

00:09:06,800 --> 00:09:12,240
the goal for this

00:09:08,000 --> 00:09:12,240
is to make mainframe open

00:09:12,480 --> 00:09:15,920
i saw different technologies such as res

00:09:14,720 --> 00:09:19,519
api

00:09:15,920 --> 00:09:20,980
web desktop ides and even mobile

00:09:19,519 --> 00:09:25,760
applications

00:09:20,980 --> 00:09:27,360
[Music]

00:09:25,760 --> 00:09:30,080
starting from the fascination of

00:09:27,360 --> 00:09:32,720
developing code using the green screen

00:09:30,080 --> 00:09:35,120
now i can see developers integrating

00:09:32,720 --> 00:09:39,839
modern technologies

00:09:35,120 --> 00:09:39,839
and making it fun

00:09:41,120 --> 00:09:47,920
again what's more out there

00:09:45,120 --> 00:09:47,920
for mainframe

00:09:48,959 --> 00:09:52,000
as technology progress and new

00:09:51,040 --> 00:09:54,320
developers

00:09:52,000 --> 00:09:55,760
with new knowledge of modern

00:09:54,320 --> 00:09:57,839
technologies

00:09:55,760 --> 00:09:59,279
join the mainframe community you can't

00:09:57,839 --> 00:10:01,360
help the thing

00:09:59,279 --> 00:10:02,640
how can this next generation of

00:10:01,360 --> 00:10:06,000
developers

00:10:02,640 --> 00:10:09,680
help in improving mainframe

00:10:06,000 --> 00:10:12,800
making it to a more stronger network

00:10:09,680 --> 00:10:14,160
and that's where we thought of it zoe

00:10:12,800 --> 00:10:16,480
out

00:10:14,160 --> 00:10:17,519
it is an interactive learning experience

00:10:16,480 --> 00:10:20,399
that allows you

00:10:17,519 --> 00:10:22,480
to learn more about mainframe and the

00:10:20,399 --> 00:10:25,600
different components of zoom

00:10:22,480 --> 00:10:27,600
such as the cli the web desktop

00:10:25,600 --> 00:10:29,839
the vs code extension and also the

00:10:27,600 --> 00:10:32,000
mobile application

00:10:29,839 --> 00:10:33,519
it is in the form of a game where in

00:10:32,000 --> 00:10:35,839
self-paced interactive

00:10:33,519 --> 00:10:37,440
tutorial course and hands-on experiences

00:10:35,839 --> 00:10:39,040
are available

00:10:37,440 --> 00:10:41,200
it is a step-by-step guide with

00:10:39,040 --> 00:10:44,800
checkpoints that includes links

00:10:41,200 --> 00:10:47,920
tutorial videos and other resources

00:10:44,800 --> 00:10:50,480
it is a fun way to gain more knowledge

00:10:47,920 --> 00:10:52,959
about mainframe

00:10:50,480 --> 00:10:54,800
the goal for this interactive learning

00:10:52,959 --> 00:10:57,920
experience

00:10:54,800 --> 00:11:00,640
is to ask the question what more can you

00:10:57,920 --> 00:11:02,880
do with matrix

00:11:00,640 --> 00:11:06,959
[Music]

00:11:02,880 --> 00:11:09,600
mainframe is a powerful platform

00:11:06,959 --> 00:11:10,800
and we can make it even more powerful if

00:11:09,600 --> 00:11:14,399
we combine it

00:11:10,800 --> 00:11:17,200
with the technology that we have today

00:11:14,399 --> 00:11:18,390
and training such as this can help boost

00:11:17,200 --> 00:11:19,680
that process

00:11:18,390 --> 00:11:22,240
[Music]

00:11:19,680 --> 00:11:23,360
i am excited to see what you're gonna

00:11:22,240 --> 00:11:26,880
come up with

00:11:23,360 --> 00:11:29,760
when you ask yourself what more can i do

00:11:26,880 --> 00:11:32,000
with mainframe

00:11:29,760 --> 00:11:34,880
hello today i'm going to show you a demo

00:11:32,000 --> 00:11:37,440
of the zoe out project that we have

00:11:34,880 --> 00:11:38,320
and this is the sample homepage of that

00:11:37,440 --> 00:11:41,600
project

00:11:38,320 --> 00:11:42,959
so the idea is that when you access or

00:11:41,600 --> 00:11:45,120
when you started this

00:11:42,959 --> 00:11:46,000
web application there will be a login

00:11:45,120 --> 00:11:48,160
screen

00:11:46,000 --> 00:11:50,160
where you can create your own profiler

00:11:48,160 --> 00:11:54,399
you can sign up create your own profile

00:11:50,160 --> 00:11:56,399
you can have your own avatar and

00:11:54,399 --> 00:11:58,320
you will have this ability to save your

00:11:56,399 --> 00:12:01,360
progress whenever you

00:11:58,320 --> 00:12:02,639
you you play this game or you you go to

00:12:01,360 --> 00:12:05,839
this learning

00:12:02,639 --> 00:12:07,360
learning app and that is still a work in

00:12:05,839 --> 00:12:08,399
progress but so far this is the home

00:12:07,360 --> 00:12:11,519
page so when you log

00:12:08,399 --> 00:12:14,480
in this is the page that will

00:12:11,519 --> 00:12:15,600
show will be shown to you you can select

00:12:14,480 --> 00:12:17,200
in the styles

00:12:15,600 --> 00:12:18,880
um what are the learnings that you

00:12:17,200 --> 00:12:21,200
wanted to learn so this is like

00:12:18,880 --> 00:12:23,360
zoe focus so we have this four

00:12:21,200 --> 00:12:25,120
components so for example you wanted to

00:12:23,360 --> 00:12:26,079
learn zoe explorer you can click the

00:12:25,120 --> 00:12:29,200
style

00:12:26,079 --> 00:12:31,760
and then there will be tasks here

00:12:29,200 --> 00:12:33,279
um that you can do so for example the

00:12:31,760 --> 00:12:34,639
samples that we have is that

00:12:33,279 --> 00:12:36,800
you can create a profile you need to

00:12:34,639 --> 00:12:38,320
create a data set upload the data set or

00:12:36,800 --> 00:12:41,279
submit a job

00:12:38,320 --> 00:12:42,880
and these tasks are locked so if you

00:12:41,279 --> 00:12:44,240
haven't finished the first task then the

00:12:42,880 --> 00:12:46,320
second task will be locked

00:12:44,240 --> 00:12:48,160
and to be able to do to finish this

00:12:46,320 --> 00:12:50,880
first task there are instructions that

00:12:48,160 --> 00:12:50,880
you can click on

00:12:51,120 --> 00:12:54,720
if you don't know how to do it you can

00:12:52,880 --> 00:12:56,880
click i need help

00:12:54,720 --> 00:12:57,839
and if you do this i need help there

00:12:56,880 --> 00:13:00,639
will be like

00:12:57,839 --> 00:13:02,320
a links to the tutorials that we have

00:13:00,639 --> 00:13:06,320
prepared for you to watch

00:13:02,320 --> 00:13:08,480
and and you can access them anytime

00:13:06,320 --> 00:13:10,000
but let's say you have watched them and

00:13:08,480 --> 00:13:11,360
you know the instructions if you click

00:13:10,000 --> 00:13:14,160
i'm done

00:13:11,360 --> 00:13:15,120
and let's say you select this test and

00:13:14,160 --> 00:13:18,720
once you hit

00:13:15,120 --> 00:13:20,880
verify what it will do or what we are

00:13:18,720 --> 00:13:24,480
planning to do is to fire

00:13:20,880 --> 00:13:26,720
this mock apis that we have

00:13:24,480 --> 00:13:27,680
in the docker containers that you have

00:13:26,720 --> 00:13:30,720
started

00:13:27,680 --> 00:13:33,839
so this web application has a server

00:13:30,720 --> 00:13:35,279
under docker where there are fake apis

00:13:33,839 --> 00:13:38,560
or fixed

00:13:35,279 --> 00:13:41,920
zmf apis and

00:13:38,560 --> 00:13:45,279
it will trigger um like

00:13:41,920 --> 00:13:48,079
the it will check those apis and then

00:13:45,279 --> 00:13:48,639
you have this it will verify if what you

00:13:48,079 --> 00:13:51,680
have done

00:13:48,639 --> 00:13:54,079
is correctly is correct or based on the

00:13:51,680 --> 00:13:57,279
response of the api

00:13:54,079 --> 00:13:59,040
so what

00:13:57,279 --> 00:14:00,480
why the reason why we have this dollar

00:13:59,040 --> 00:14:02,560
container is that so that

00:14:00,480 --> 00:14:04,480
you don't need a mainframe server a real

00:14:02,560 --> 00:14:05,760
mainframe server to be able to create

00:14:04,480 --> 00:14:08,160
this exercises

00:14:05,760 --> 00:14:10,480
and you can have it in your own machine

00:14:08,160 --> 00:14:13,600
you can start it whenever you want

00:14:10,480 --> 00:14:15,839
and i think that portable docker

00:14:13,600 --> 00:14:17,600
server that you can have for yourself is

00:14:15,839 --> 00:14:18,320
like really useful in your learning as

00:14:17,600 --> 00:14:20,480
well

00:14:18,320 --> 00:14:21,920
so once you click verify it will fire

00:14:20,480 --> 00:14:24,000
that api and then

00:14:21,920 --> 00:14:25,600
check it if it's correct once it is

00:14:24,000 --> 00:14:28,639
checked that it is correct then

00:14:25,600 --> 00:14:31,680
it can trigger the next the next style

00:14:28,639 --> 00:14:33,040
that you can work on and you can start

00:14:31,680 --> 00:14:35,279
doing this

00:14:33,040 --> 00:14:36,800
this task and similar to the first one

00:14:35,279 --> 00:14:37,680
when you're done you can click i'm done

00:14:36,800 --> 00:14:40,880
and then

00:14:37,680 --> 00:14:41,600
it will it will trigger the next one and

00:14:40,880 --> 00:14:44,880
then you can see

00:14:41,600 --> 00:14:46,480
that progress obviously this this demo

00:14:44,880 --> 00:14:49,839
is not complete yet and it is still

00:14:46,480 --> 00:14:52,160
a work in progress and there are more

00:14:49,839 --> 00:14:55,680
ideas of creating leaderboards

00:14:52,160 --> 00:14:57,600
where um

00:14:55,680 --> 00:14:59,600
other people can i don't see your

00:14:57,600 --> 00:15:02,000
progress and

00:14:59,600 --> 00:15:02,639
more ideas for the ui improvements for

00:15:02,000 --> 00:15:05,680
ui

00:15:02,639 --> 00:15:09,600
and more ideas to integrate more

00:15:05,680 --> 00:15:11,920
gamification in this web application but

00:15:09,600 --> 00:15:13,360
but yeah we will see in the future and

00:15:11,920 --> 00:15:16,480
hopefully

00:15:13,360 --> 00:15:20,000
um in the future we will see that

00:15:16,480 --> 00:15:23,199
this application will be a full working

00:15:20,000 --> 00:15:25,360
um tutorial app for

00:15:23,199 --> 00:15:28,240
all zoe learners or for all mainframe

00:15:25,360 --> 00:15:28,240
learners out there

00:15:28,720 --> 00:15:32,480
so what did we learn when we joined this

00:15:31,040 --> 00:15:34,560
hackathon so we

00:15:32,480 --> 00:15:37,680
definitely learned new technologies we

00:15:34,560 --> 00:15:41,199
we learned more about ionic

00:15:37,680 --> 00:15:44,480
how to how to

00:15:41,199 --> 00:15:46,639
process http requests iterating over

00:15:44,480 --> 00:15:48,240
ng modules of angular for example

00:15:46,639 --> 00:15:50,720
routing and navigation

00:15:48,240 --> 00:15:52,639
and we also learned more about ionic we

00:15:50,720 --> 00:15:55,440
use this the ui components

00:15:52,639 --> 00:15:56,800
now for web app for a web app and then

00:15:55,440 --> 00:16:00,079
we had to use

00:15:56,800 --> 00:16:01,519
cli as well and because this is a web

00:16:00,079 --> 00:16:04,399
app we had to learn web

00:16:01,519 --> 00:16:06,079
browser develop tools so since there's

00:16:04,399 --> 00:16:09,040
two of us in this

00:16:06,079 --> 00:16:10,320
hackathon we did pair programming and we

00:16:09,040 --> 00:16:12,480
tried to make sure that

00:16:10,320 --> 00:16:13,440
we did modular coding so we didn't have

00:16:12,480 --> 00:16:16,560
the right code

00:16:13,440 --> 00:16:17,759
twice or multiple times as well as it

00:16:16,560 --> 00:16:20,079
was fun learning about

00:16:17,759 --> 00:16:22,160
docker technology to incorporate it in

00:16:20,079 --> 00:16:26,240
in this project

00:16:22,160 --> 00:16:28,079
exactly and what's next for us

00:16:26,240 --> 00:16:30,160
um this project is currently in

00:16:28,079 --> 00:16:32,320
discussion with our education team

00:16:30,160 --> 00:16:34,639
regarding hosting of this prod of this

00:16:32,320 --> 00:16:38,480
product we definitely need to improve

00:16:34,639 --> 00:16:40,160
more of the ux and the ui and as well as

00:16:38,480 --> 00:16:42,639
to work on the integration of

00:16:40,160 --> 00:16:44,560
our containers to start the servers for

00:16:42,639 --> 00:16:46,800
the smf

00:16:44,560 --> 00:16:46,800
nice

00:16:47,920 --> 00:16:51,040
so all in all what we created is a game

00:16:50,000 --> 00:16:52,959
for learners and

00:16:51,040 --> 00:16:54,800
because we believe that mainframe can be

00:16:52,959 --> 00:16:57,519
more powerful if we can combine it with

00:16:54,800 --> 00:16:59,920
the technology of today so it's not to

00:16:57,519 --> 00:17:01,920
dismiss one but to involve something

00:16:59,920 --> 00:17:04,160
else involve modern technology

00:17:01,920 --> 00:17:05,120
so that we can make a better platform

00:17:04,160 --> 00:17:07,039
and

00:17:05,120 --> 00:17:08,720
we believe that trainings like zoey out

00:17:07,039 --> 00:17:09,120
can help boost that process so it's not

00:17:08,720 --> 00:17:12,319
just

00:17:09,120 --> 00:17:15,760
really for for new people but

00:17:12,319 --> 00:17:19,520
if you are a learner of all ages

00:17:15,760 --> 00:17:22,400
then i think this could help yep

00:17:19,520 --> 00:17:23,679
and personally i'm excited to see what

00:17:22,400 --> 00:17:26,880
you can come up with

00:17:23,679 --> 00:17:33,120
when you ask this question what more

00:17:26,880 --> 00:17:36,799
can i do with mainframe

00:17:33,120 --> 00:17:39,039
so if you are also excited and building

00:17:36,799 --> 00:17:41,039
on top of open source projects broadcom

00:17:39,039 --> 00:17:43,280
can help you get started so

00:17:41,039 --> 00:17:44,160
there are this broadcom offerings which

00:17:43,280 --> 00:17:46,559
are offered for

00:17:44,160 --> 00:17:47,440
no fee and just let us know how we can

00:17:46,559 --> 00:17:50,640
help

00:17:47,440 --> 00:17:51,200
exactly so thank you for attending our

00:17:50,640 --> 00:17:55,039
session

00:17:51,200 --> 00:17:55,039

YouTube URL: https://www.youtube.com/watch?v=IHN_6QNPsP8


