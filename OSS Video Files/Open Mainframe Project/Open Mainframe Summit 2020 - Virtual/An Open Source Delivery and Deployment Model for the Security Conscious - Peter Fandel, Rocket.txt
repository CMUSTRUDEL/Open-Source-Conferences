Title: An Open Source Delivery and Deployment Model for the Security Conscious - Peter Fandel, Rocket
Publication date: 2020-09-05
Playlist: Open Mainframe Summit 2020 - Virtual
Description: 
	An Open Source Delivery and Deployment Model for the Security Conscious - Peter Fandel, Rocket Software

The open source software world is about public involvement, easy access, easy contribution, mix and match, etc. with many benefits resulting in faster innovations, higher quality, and lower costs. The mainframe world is about extreme security, trusted sources, high standards for integration testing, the ability to restore to previous states, and so on, resulting in extreme reliability and extreme information security. A goal that mainframe administrators have struggled to attain is to merge these seemingly contradictory worlds and derive all the benefits of each without losing the benefits of the other. This presentation is on how to leverage conda via secure internet channels and air-gapped file channels to achieve this goal.
Captions: 
	00:00:00,080 --> 00:00:06,080
hello my name is peter fandell

00:00:03,120 --> 00:00:06,640
i'm a product manager at rocket software

00:00:06,080 --> 00:00:09,840
for

00:00:06,640 --> 00:00:10,960
open source on z os and i'm here to

00:00:09,840 --> 00:00:13,360
present to you

00:00:10,960 --> 00:00:17,039
a secure and easy software delivery and

00:00:13,360 --> 00:00:20,320
deployment system for the mainframe

00:00:17,039 --> 00:00:23,600
so that system is

00:00:20,320 --> 00:00:25,599
conduct for z os so conda

00:00:23,600 --> 00:00:28,000
although it was originally developed as

00:00:25,599 --> 00:00:30,080
the package manager for python

00:00:28,000 --> 00:00:32,239
it is much more than that and it is not

00:00:30,080 --> 00:00:35,280
just for python anymore

00:00:32,239 --> 00:00:39,120
so a few things that make conda

00:00:35,280 --> 00:00:41,680
special are that it is dependency aware

00:00:39,120 --> 00:00:42,960
so what that means is that when you

00:00:41,680 --> 00:00:45,920
download a product

00:00:42,960 --> 00:00:47,920
from conda it automatically determines

00:00:45,920 --> 00:00:49,920
what dependencies and what versions of

00:00:47,920 --> 00:00:52,079
dependencies are needed in order for

00:00:49,920 --> 00:00:55,120
that product to work correctly

00:00:52,079 --> 00:00:55,840
and it will automatically download and

00:00:55,120 --> 00:00:57,920
install

00:00:55,840 --> 00:00:59,120
all of those dependencies along with the

00:00:57,920 --> 00:01:02,160
product that

00:00:59,120 --> 00:01:05,439
you are actually seeking to install

00:01:02,160 --> 00:01:07,680
as an example of the improvement there

00:01:05,439 --> 00:01:08,640
using our old deployment system and

00:01:07,680 --> 00:01:10,960
delivery system

00:01:08,640 --> 00:01:12,479
for open source software if you wanted

00:01:10,960 --> 00:01:15,520
to install git

00:01:12,479 --> 00:01:17,280
on the zos it was about 40 steps because

00:01:15,520 --> 00:01:21,280
you had to

00:01:17,280 --> 00:01:24,159
download ftp unpack

00:01:21,280 --> 00:01:25,119
and then install four or five different

00:01:24,159 --> 00:01:29,040
products

00:01:25,119 --> 00:01:30,880
each one about 10 steps now with conda

00:01:29,040 --> 00:01:34,320
it's a single command line over here

00:01:30,880 --> 00:01:37,040
command line instruction also conda

00:01:34,320 --> 00:01:39,680
is language agnostic and product

00:01:37,040 --> 00:01:42,000
agnostic and platform agnostic

00:01:39,680 --> 00:01:44,479
so it's not just for python conda can be

00:01:42,000 --> 00:01:47,680
used to download any product

00:01:44,479 --> 00:01:50,960
and we are using conda not only to

00:01:47,680 --> 00:01:53,280
download deploy deliver all of our

00:01:50,960 --> 00:01:54,000
open source products tools and languages

00:01:53,280 --> 00:01:56,719
but we're also

00:01:54,000 --> 00:01:57,680
going to be using conda to deliver zoe

00:01:56,719 --> 00:02:00,799
plug-ins both

00:01:57,680 --> 00:02:04,399
open source and commercial for

00:02:00,799 --> 00:02:07,200
for our zoe customers additionally

00:02:04,399 --> 00:02:08,080
conda is an environment manager what an

00:02:07,200 --> 00:02:11,120
environment

00:02:08,080 --> 00:02:14,319
is in condom it is a collection of

00:02:11,120 --> 00:02:14,800
products of specific versions that you

00:02:14,319 --> 00:02:18,160
can

00:02:14,800 --> 00:02:19,280
define on your system and then activate

00:02:18,160 --> 00:02:21,360
and deactivate

00:02:19,280 --> 00:02:22,400
environments at will with a single

00:02:21,360 --> 00:02:26,720
command

00:02:22,400 --> 00:02:28,640
so you might have a dev environment a qa

00:02:26,720 --> 00:02:31,200
environment a staging environment a

00:02:28,640 --> 00:02:34,160
production environment each one

00:02:31,200 --> 00:02:35,280
with perhaps a different mix of versions

00:02:34,160 --> 00:02:36,959
and builds

00:02:35,280 --> 00:02:40,800
and those can be activated and

00:02:36,959 --> 00:02:40,800
deactivated as needed

00:02:41,120 --> 00:02:44,959
so why conda and not some other system

00:02:43,920 --> 00:02:46,959
so

00:02:44,959 --> 00:02:48,080
first of all having to do with cross

00:02:46,959 --> 00:02:50,720
platform so

00:02:48,080 --> 00:02:52,400
there's only two package managers conda

00:02:50,720 --> 00:02:55,519
and npm that are 100

00:02:52,400 --> 00:02:58,640
cross-platform and

00:02:55,519 --> 00:03:01,280
npm however though its cross-platform is

00:02:58,640 --> 00:03:02,000
really synonymous with javascript and

00:03:01,280 --> 00:03:05,840
tie-ins

00:03:02,000 --> 00:03:08,400
to browsers or node.js only conda

00:03:05,840 --> 00:03:09,680
is unassuming of the software to be

00:03:08,400 --> 00:03:12,480
delivered

00:03:09,680 --> 00:03:14,239
also we've modified conda for z os to

00:03:12,480 --> 00:03:16,400
handle file tagging

00:03:14,239 --> 00:03:17,280
and most importantly for the mainframe

00:03:16,400 --> 00:03:20,560
community

00:03:17,280 --> 00:03:21,360
is the issue of security and where that

00:03:20,560 --> 00:03:24,640
comes in

00:03:21,360 --> 00:03:27,120
is how you store

00:03:24,640 --> 00:03:28,239
products for delivery by conda and how

00:03:27,120 --> 00:03:31,680
you deliver those

00:03:28,239 --> 00:03:32,080
to the end user so conda does this

00:03:31,680 --> 00:03:34,959
through

00:03:32,080 --> 00:03:35,519
something called a conda channel a conda

00:03:34,959 --> 00:03:38,640
channel

00:03:35,519 --> 00:03:40,080
is a repository of products that have

00:03:38,640 --> 00:03:42,959
been

00:03:40,080 --> 00:03:45,599
built and packaged for conda delivery

00:03:42,959 --> 00:03:47,920
and there's three kinds of channels

00:03:45,599 --> 00:03:49,440
there is the public internet channel

00:03:47,920 --> 00:03:51,440
shown on the left

00:03:49,440 --> 00:03:52,959
and you'll find hundreds perhaps

00:03:51,440 --> 00:03:55,519
thousands of

00:03:52,959 --> 00:03:57,519
public conda internet channels out on

00:03:55,519 --> 00:04:00,080
the internet

00:03:57,519 --> 00:04:02,239
most of them are freely accessible you

00:04:00,080 --> 00:04:05,439
don't need to log in

00:04:02,239 --> 00:04:07,680
and you'll find thousands tens of

00:04:05,439 --> 00:04:10,080
thousands of different open source

00:04:07,680 --> 00:04:12,080
uh products available for download from

00:04:10,080 --> 00:04:15,200
public internet channels

00:04:12,080 --> 00:04:16,560
then you have for those that are more

00:04:15,200 --> 00:04:20,000
security minded

00:04:16,560 --> 00:04:23,199
you have private internet channels which

00:04:20,000 --> 00:04:26,000
are authentication secured

00:04:23,199 --> 00:04:27,440
these are usually on private vendor

00:04:26,000 --> 00:04:31,120
networks

00:04:27,440 --> 00:04:31,680
behind the firewall and you can if you

00:04:31,120 --> 00:04:33,360
have a

00:04:31,680 --> 00:04:35,280
an account on one of these private

00:04:33,360 --> 00:04:38,080
internet channels

00:04:35,280 --> 00:04:38,960
then you can download products from

00:04:38,080 --> 00:04:42,479
those

00:04:38,960 --> 00:04:44,320
and finally for the ultimate in security

00:04:42,479 --> 00:04:46,560
there's something called a file channel

00:04:44,320 --> 00:04:49,680
which is ideal for air-gapped

00:04:46,560 --> 00:04:52,080
mainframe systems and a file channel can

00:04:49,680 --> 00:04:54,560
be set up on premise

00:04:52,080 --> 00:04:55,360
for use within your organization for

00:04:54,560 --> 00:04:58,400
downloading

00:04:55,360 --> 00:05:00,560
but it's the same condo commands for

00:04:58,400 --> 00:05:01,680
downloading from a channel regardless of

00:05:00,560 --> 00:05:03,919
whether it's a file

00:05:01,680 --> 00:05:06,080
channel a private internet or a public

00:05:03,919 --> 00:05:08,160
internet channel

00:05:06,080 --> 00:05:10,560
i'll be demonstrating all three of these

00:05:08,160 --> 00:05:13,919
in just a moment

00:05:10,560 --> 00:05:17,440
so the workflow for setting up and using

00:05:13,919 --> 00:05:20,720
a conda on your system is as shown here

00:05:17,440 --> 00:05:22,880
on the left side is the bootstrapping

00:05:20,720 --> 00:05:24,000
step done by an administrator this only

00:05:22,880 --> 00:05:27,120
has to be done once

00:05:24,000 --> 00:05:30,080
that's why i grade it out a little bit

00:05:27,120 --> 00:05:32,240
it is just a one-time thing just

00:05:30,080 --> 00:05:35,520
installing conda onto your system

00:05:32,240 --> 00:05:37,120
so you can't install conda using conda

00:05:35,520 --> 00:05:38,479
so that's why it's a bootstrapping

00:05:37,120 --> 00:05:41,520
process you

00:05:38,479 --> 00:05:42,160
anybody can go to the rocket support

00:05:41,520 --> 00:05:44,800
portal

00:05:42,160 --> 00:05:45,199
don't need to be a customer and download

00:05:44,800 --> 00:05:48,240
the

00:05:45,199 --> 00:05:49,520
mini conda installer transfer that onto

00:05:48,240 --> 00:05:51,280
your mainframe and

00:05:49,520 --> 00:05:52,880
run the installer and that will enable

00:05:51,280 --> 00:05:56,000
you to then

00:05:52,880 --> 00:05:57,919
run conduct commands from your system

00:05:56,000 --> 00:05:59,520
from that point onward it depends on

00:05:57,919 --> 00:06:02,240
whether you are

00:05:59,520 --> 00:06:02,639
using an air gap system or not so if

00:06:02,240 --> 00:06:06,400
you're

00:06:02,639 --> 00:06:10,639
okay with your organization going to

00:06:06,400 --> 00:06:13,680
a secure private vendor

00:06:10,639 --> 00:06:14,880
channel server or a public channel

00:06:13,680 --> 00:06:18,479
server

00:06:14,880 --> 00:06:20,479
then you can immediately

00:06:18,479 --> 00:06:22,319
instruct your teams to begin using the

00:06:20,479 --> 00:06:24,400
conda installation

00:06:22,319 --> 00:06:26,400
to download and install whatever they

00:06:24,400 --> 00:06:28,560
need from those channels

00:06:26,400 --> 00:06:30,560
if you have an airgap system there is an

00:06:28,560 --> 00:06:34,080
additional administrative step

00:06:30,560 --> 00:06:36,800
shown at the bottom right as step 1b

00:06:34,080 --> 00:06:37,680
the administrator would need to download

00:06:36,800 --> 00:06:41,360
a

00:06:37,680 --> 00:06:43,680
solution bundle containing all of the

00:06:41,360 --> 00:06:45,680
open source products that they want to

00:06:43,680 --> 00:06:48,240
make available to their teams

00:06:45,680 --> 00:06:49,919
and use that to populate the on-premise

00:06:48,240 --> 00:06:52,400
file channel

00:06:49,919 --> 00:06:54,319
at that point then the internal teams

00:06:52,400 --> 00:06:56,080
could

00:06:54,319 --> 00:06:57,599
download and install from the file

00:06:56,080 --> 00:07:00,080
channel at will

00:06:57,599 --> 00:07:02,240
you would have to redo this periodically

00:07:00,080 --> 00:07:02,880
to refresh the contents of your file

00:07:02,240 --> 00:07:05,039
channel

00:07:02,880 --> 00:07:07,440
so there's a little bit of a a little

00:07:05,039 --> 00:07:07,919
bit of a maintenance overhead to using a

00:07:07,440 --> 00:07:10,479
file

00:07:07,919 --> 00:07:11,840
channel but it's still a significant

00:07:10,479 --> 00:07:14,319
improvement over

00:07:11,840 --> 00:07:17,840
the existing methods for for software

00:07:14,319 --> 00:07:17,840
delivery on the mainframe

00:07:18,160 --> 00:07:24,080
then it comes to developing for

00:07:21,360 --> 00:07:25,759
delivery by conda so if you have

00:07:24,080 --> 00:07:28,080
development teams

00:07:25,759 --> 00:07:29,360
developing your own in-house tools or

00:07:28,080 --> 00:07:30,319
products and you want to make them

00:07:29,360 --> 00:07:32,080
available

00:07:30,319 --> 00:07:34,400
internally using conda it's pretty

00:07:32,080 --> 00:07:37,599
straightforward you need to create

00:07:34,400 --> 00:07:40,560
a metadata file meta.yaml

00:07:37,599 --> 00:07:41,440
for every product you want to deliver by

00:07:40,560 --> 00:07:44,720
conda

00:07:41,440 --> 00:07:45,599
this metadata file specifies the name of

00:07:44,720 --> 00:07:48,560
the product

00:07:45,599 --> 00:07:48,960
the version the platform that it runs on

00:07:48,560 --> 00:07:51,199
and

00:07:48,960 --> 00:07:52,479
all the dependencies and versions of

00:07:51,199 --> 00:07:54,879
dependencies

00:07:52,479 --> 00:07:55,840
as well as the location of all the

00:07:54,879 --> 00:07:58,479
source code

00:07:55,840 --> 00:08:00,080
for creating that and then you create a

00:07:58,479 --> 00:08:03,199
conda build script

00:08:00,080 --> 00:08:06,240
that builds that from the sources

00:08:03,199 --> 00:08:08,720
optionally you can also add

00:08:06,240 --> 00:08:09,599
scripts that are automatically invoked

00:08:08,720 --> 00:08:12,400
by conda

00:08:09,599 --> 00:08:14,160
immediately after install and

00:08:12,400 --> 00:08:17,199
immediately before removal

00:08:14,160 --> 00:08:19,039
for uninstall examples of all this are

00:08:17,199 --> 00:08:23,759
available at the url

00:08:19,039 --> 00:08:23,759
specified it's a publicly available url

00:08:23,919 --> 00:08:27,680
now on to demos so i'm going to show you

00:08:26,479 --> 00:08:31,120
first

00:08:27,680 --> 00:08:31,599
installation of git first from a public

00:08:31,120 --> 00:08:33,760
channel

00:08:31,599 --> 00:08:35,919
then from a private channel as the first

00:08:33,760 --> 00:08:39,680
demo so let me go there

00:08:35,919 --> 00:08:42,719
next so first i'm going to show you

00:08:39,680 --> 00:08:46,000
what it looks like public channels so

00:08:42,719 --> 00:08:49,680
here we have the url this

00:08:46,000 --> 00:08:52,800
public channel called z oss devops

00:08:49,680 --> 00:08:55,839
is hosted by anaconda.org and

00:08:52,800 --> 00:08:56,720
here you can use the browser interface

00:08:55,839 --> 00:08:59,440
to

00:08:56,720 --> 00:09:00,959
view all of the different uh products

00:08:59,440 --> 00:09:04,160
that are available so you can see

00:09:00,959 --> 00:09:06,399
bash get gzip etc and so any one of

00:09:04,160 --> 00:09:08,959
these you can click on it

00:09:06,399 --> 00:09:11,200
you can see the license you can see the

00:09:08,959 --> 00:09:14,320
number of downloads the version

00:09:11,200 --> 00:09:16,160
uh you can also click on the files tab

00:09:14,320 --> 00:09:18,399
and and see the actual

00:09:16,160 --> 00:09:19,279
package and download that but that won't

00:09:18,399 --> 00:09:20,880
be

00:09:19,279 --> 00:09:23,040
an installation that will be just

00:09:20,880 --> 00:09:26,720
downloading the actual

00:09:23,040 --> 00:09:27,279
uh package for inspection perhaps but

00:09:26,720 --> 00:09:29,200
for

00:09:27,279 --> 00:09:32,080
for download and install you need to use

00:09:29,200 --> 00:09:35,920
the conda cli the command line interface

00:09:32,080 --> 00:09:37,680
and so i've got a mainframe login here

00:09:35,920 --> 00:09:41,440
and what i'm going to start with

00:09:37,680 --> 00:09:43,600
is to do a conda info command

00:09:41,440 --> 00:09:45,200
and this tells me i've got no active

00:09:43,600 --> 00:09:47,279
environment yet

00:09:45,200 --> 00:09:48,399
tells me the version of the condone of

00:09:47,279 --> 00:09:49,839
the python

00:09:48,399 --> 00:09:51,519
but the important thing i want to show

00:09:49,839 --> 00:09:55,440
you is the

00:09:51,519 --> 00:09:58,640
channel urls so this particular conda

00:09:55,440 --> 00:09:59,600
installation has been configured with a

00:09:58,640 --> 00:10:02,839
default

00:09:59,600 --> 00:10:04,000
channel specification to that public

00:10:02,839 --> 00:10:07,120
anaconda.org

00:10:04,000 --> 00:10:07,600
channel i'm going to show you how that

00:10:07,120 --> 00:10:10,800
was

00:10:07,600 --> 00:10:12,720
set by displaying the contents of the

00:10:10,800 --> 00:10:14,880
conda rc

00:10:12,720 --> 00:10:15,920
file that's the configuration file for

00:10:14,880 --> 00:10:19,040
conda

00:10:15,920 --> 00:10:22,640
we can see that the specified

00:10:19,040 --> 00:10:25,600
a particular default channel and also

00:10:22,640 --> 00:10:27,760
disable use of other channels by setting

00:10:25,600 --> 00:10:30,079
allow other channels to false

00:10:27,760 --> 00:10:31,200
this is probably a good idea for

00:10:30,079 --> 00:10:35,200
mainframe

00:10:31,200 --> 00:10:35,200
data centers because

00:10:35,360 --> 00:10:39,680
there's a lot of open source that's been

00:10:37,440 --> 00:10:41,040
ported to the mainframe but still the

00:10:39,680 --> 00:10:44,320
vast majority of

00:10:41,040 --> 00:10:47,360
public channels out there contain

00:10:44,320 --> 00:10:48,959
open source that is not specifically for

00:10:47,360 --> 00:10:51,200
the mainframe so

00:10:48,959 --> 00:10:52,480
if you want to save time and focus your

00:10:51,200 --> 00:10:55,920
developers and have them

00:10:52,480 --> 00:10:57,600
only access known good sources of open

00:10:55,920 --> 00:11:00,079
source for the mainframe you may want to

00:10:57,600 --> 00:11:03,440
do something like this

00:11:00,079 --> 00:11:04,480
so the next step as a consumer of open

00:11:03,440 --> 00:11:06,959
source is

00:11:04,480 --> 00:11:08,640
well if i want to install git let me see

00:11:06,959 --> 00:11:12,560
what's available so i'm going to

00:11:08,640 --> 00:11:14,640
do a conda search git

00:11:12,560 --> 00:11:17,040
and now it's going to be looking in the

00:11:14,640 --> 00:11:20,240
anaconda public channel to see

00:11:17,040 --> 00:11:20,240
if git is available

00:11:27,680 --> 00:11:30,880
the public channels are a little bit

00:11:29,120 --> 00:11:33,040
slow you'll see a dramatic difference

00:11:30,880 --> 00:11:36,000
when i do the same thing on a secure

00:11:33,040 --> 00:11:36,959
private channel so yes it tells me that

00:11:36,000 --> 00:11:40,000
git 214

00:11:36,959 --> 00:11:41,600
4 is available so the next step would be

00:11:40,000 --> 00:11:45,440
for me to

00:11:41,600 --> 00:11:48,480
create an environment into which

00:11:45,440 --> 00:11:51,200
to place this so i'm going to create an

00:11:48,480 --> 00:11:51,200
environment called

00:11:54,839 --> 00:11:57,839
test

00:12:00,240 --> 00:12:03,600
and once that's done i will install and

00:12:02,959 --> 00:12:06,399
get

00:12:03,600 --> 00:12:11,120
into that environment first i have to

00:12:06,399 --> 00:12:14,800
activate the environment

00:12:11,120 --> 00:12:16,399
okay proceed now i will activate the

00:12:14,800 --> 00:12:18,480
environment

00:12:16,399 --> 00:12:19,600
again this these steps only have to be

00:12:18,480 --> 00:12:21,200
done once

00:12:19,600 --> 00:12:24,000
to set up the environment so now the

00:12:21,200 --> 00:12:27,920
environment is created and activated

00:12:24,000 --> 00:12:31,120
the command is conda install

00:12:27,920 --> 00:12:34,639
git that's it

00:12:31,120 --> 00:12:38,639
again this is a bit slow because the

00:12:34,639 --> 00:12:41,200
the publicly hosted internet channels

00:12:38,639 --> 00:12:44,800
are pretty heavily used with servers at

00:12:41,200 --> 00:12:44,800
anaconda so this is a bit slow

00:12:48,480 --> 00:12:51,600
still only takes a few seconds so you

00:12:50,959 --> 00:12:53,360
can see it

00:12:51,600 --> 00:12:55,680
automatically determined all the

00:12:53,360 --> 00:12:56,720
dependencies and specific versions of

00:12:55,680 --> 00:13:00,000
those

00:12:56,720 --> 00:13:01,040
so now when i say proceed it's going to

00:13:00,000 --> 00:13:04,240
download and

00:13:01,040 --> 00:13:07,839
extract and install all of the

00:13:04,240 --> 00:13:07,839
dependencies as well as get

00:13:30,240 --> 00:13:35,279
so now just to show you that my git has

00:13:33,040 --> 00:13:38,399
been installed and is running

00:13:35,279 --> 00:13:42,079
i can say get version

00:13:38,399 --> 00:13:45,279
i've got 14 2.14 and you can see

00:13:42,079 --> 00:13:48,410
if i say which git that is installed

00:13:45,279 --> 00:13:49,600
into the test environment

00:13:48,410 --> 00:13:52,079
[Music]

00:13:49,600 --> 00:13:54,800
where all my environments are stored

00:13:52,079 --> 00:13:56,399
under miniconda

00:13:54,800 --> 00:13:57,839
so now what i'm going to do is i'm going

00:13:56,399 --> 00:14:01,199
to do the same

00:13:57,839 --> 00:14:04,480
operation but instead i'm going to go

00:14:01,199 --> 00:14:07,839
to a secure private

00:14:04,480 --> 00:14:10,959
internet channel so here we have um

00:14:07,839 --> 00:14:14,160
at condaserver.rocketsoftware.com that's

00:14:10,959 --> 00:14:17,199
rockets secure

00:14:14,160 --> 00:14:20,959
conda channel server and you can see

00:14:17,199 --> 00:14:23,040
all of the products available on this

00:14:20,959 --> 00:14:24,720
and for any one of these uh there's a

00:14:23,040 --> 00:14:27,360
bit more features here

00:14:24,720 --> 00:14:28,480
because you can also view the

00:14:27,360 --> 00:14:30,800
dependencies

00:14:28,480 --> 00:14:32,160
for bash there's no dependencies you can

00:14:30,800 --> 00:14:36,240
see the dependents

00:14:32,160 --> 00:14:36,240
so git depends on

00:14:36,880 --> 00:14:40,560
on bash so that's listed here also you

00:14:39,600 --> 00:14:42,800
can see

00:14:40,560 --> 00:14:44,720
what's coming in the near future is

00:14:42,800 --> 00:14:47,839
we're going to be integrating in

00:14:44,720 --> 00:14:50,160
cve information for every one of the

00:14:47,839 --> 00:14:52,079
products and versions available on our

00:14:50,160 --> 00:14:55,680
channel server

00:14:52,079 --> 00:14:59,760
so now going back to the mainframe

00:14:55,680 --> 00:15:02,000
i'm going to change the configuration

00:14:59,760 --> 00:15:02,800
to a different configuration for this

00:15:02,000 --> 00:15:06,959
part of the demo

00:15:02,800 --> 00:15:13,839
so dot com

00:15:06,959 --> 00:15:13,839
rc demo 1b

00:15:15,680 --> 00:15:21,839
and do another conda info

00:15:19,199 --> 00:15:22,880
so now you can see i've got an active

00:15:21,839 --> 00:15:25,360
environment for the

00:15:22,880 --> 00:15:26,800
from the first part of the demo set up

00:15:25,360 --> 00:15:30,160
but the important thing here

00:15:26,800 --> 00:15:32,240
is that now the default channel has been

00:15:30,160 --> 00:15:34,240
changed to be the private rocket

00:15:32,240 --> 00:15:37,680
software

00:15:34,240 --> 00:15:42,639
channel server and so now

00:15:37,680 --> 00:15:46,399
if i do the same conda search

00:15:42,639 --> 00:15:49,680
get first of all it responds right away

00:15:46,399 --> 00:15:51,600
much faster and you can see that on the

00:15:49,680 --> 00:15:53,040
rocket private channel server we've got

00:15:51,600 --> 00:15:53,600
two versions of git there's a more

00:15:53,040 --> 00:15:57,440
recent

00:15:53,600 --> 00:16:02,320
version available 2.26

00:15:57,440 --> 00:16:04,160
and now i'm going to create another

00:16:02,320 --> 00:16:06,720
environment this one i'll call

00:16:04,160 --> 00:16:06,720
production

00:16:07,040 --> 00:16:10,800
and in the same command i'll tell it

00:16:09,839 --> 00:16:14,000
create that

00:16:10,800 --> 00:16:16,560
environment and immediately

00:16:14,000 --> 00:16:17,839
download into it git and all of its

00:16:16,560 --> 00:16:23,839
dependencies

00:16:17,839 --> 00:16:23,839
so you can do that in a single command

00:16:43,360 --> 00:16:46,880
all right now i'm going to activate this

00:16:46,079 --> 00:16:50,000
new

00:16:46,880 --> 00:16:53,839
environment and now

00:16:50,000 --> 00:16:55,519
when i say git minus minus version

00:16:53,839 --> 00:16:58,160
you can see that i'm running git version

00:16:55,519 --> 00:17:01,680
2.26

00:16:58,160 --> 00:17:02,959
now for the second demo i'm going to

00:17:01,680 --> 00:17:06,079
show you

00:17:02,959 --> 00:17:09,520
installation of a

00:17:06,079 --> 00:17:12,799
a zoe plug-in from a file channel so

00:17:09,520 --> 00:17:15,199
combat info here on this is a different

00:17:12,799 --> 00:17:18,319
mainframe system i'm logged into

00:17:15,199 --> 00:17:19,679
no active environment here as you can

00:17:18,319 --> 00:17:22,640
see

00:17:19,679 --> 00:17:23,760
and the channel the default channel

00:17:22,640 --> 00:17:27,600
specified here

00:17:23,760 --> 00:17:30,960
is a local file channel so here

00:17:27,600 --> 00:17:34,960
i'm going to first do a

00:17:30,960 --> 00:17:38,480
search i'm looking for a particular

00:17:34,960 --> 00:17:40,080
zoe plugin that i want to use as my 3270

00:17:38,480 --> 00:17:44,480
emulator so i'm going to say

00:17:40,080 --> 00:17:47,679
conda search it's called bluezone

00:17:44,480 --> 00:17:50,400
so i'm going to say blue star

00:17:47,679 --> 00:17:51,360
and it tells me that indeed blue zone

00:17:50,400 --> 00:17:54,400
web

00:17:51,360 --> 00:17:55,840
as a zoe plug-in is available on our

00:17:54,400 --> 00:17:58,000
file channel

00:17:55,840 --> 00:17:59,120
and now i can do that same single

00:17:58,000 --> 00:18:03,200
command

00:17:59,120 --> 00:18:06,480
to conda create a new environment called

00:18:03,200 --> 00:18:11,039
production and download into

00:18:06,480 --> 00:18:11,039
that environment blue zone web

00:18:11,840 --> 00:18:16,799
what did i get wrong here come on to

00:18:14,400 --> 00:18:19,520
create myself production

00:18:16,799 --> 00:18:19,520
is on web

00:18:20,960 --> 00:18:29,760
i must have already used that let me try

00:18:25,039 --> 00:18:35,039
production too

00:18:29,760 --> 00:18:38,400
there we go yes no dependencies

00:18:35,039 --> 00:18:38,960
so now we're going to install blue zone

00:18:38,400 --> 00:18:41,600
web

00:18:38,960 --> 00:18:42,320
onto this system and you'll note the

00:18:41,600 --> 00:18:45,440
output

00:18:42,320 --> 00:18:45,840
from this command is a lot longer a lot

00:18:45,440 --> 00:18:48,640
more

00:18:45,840 --> 00:18:49,679
text that you'll see fly by uh when it

00:18:48,640 --> 00:18:53,679
finishes the

00:18:49,679 --> 00:18:56,960
the download because this particular

00:18:53,679 --> 00:19:00,160
honda product has a built-in

00:18:56,960 --> 00:19:03,440
post-install script that moves around

00:19:00,160 --> 00:19:06,160
all the files necessary to

00:19:03,440 --> 00:19:11,840
make it a zoe plug-in sets environment

00:19:06,160 --> 00:19:11,840
variables etc

00:19:16,080 --> 00:19:24,720
okay so that's now done i'm going to

00:19:19,760 --> 00:19:29,520
activate production two and now

00:19:24,720 --> 00:19:33,120
i can run zoe start up zoe

00:19:29,520 --> 00:19:33,120
that's uh zoe

00:19:33,200 --> 00:19:39,840
in internal

00:19:43,520 --> 00:19:46,240
run zoe

00:19:49,760 --> 00:19:53,840
all right now while that's starting i'm

00:19:53,120 --> 00:19:57,200
going to go

00:19:53,840 --> 00:19:59,919
to my web browser where i've got a tab

00:19:57,200 --> 00:20:02,559
for logging into the zoe desktop

00:19:59,919 --> 00:20:07,200
hopefully it's fully started

00:20:02,559 --> 00:20:09,520
let me refresh that

00:20:07,200 --> 00:20:09,520
okay

00:20:14,640 --> 00:20:18,960
here we go so here's the zoe desktop

00:20:17,760 --> 00:20:23,440
i'll enter into

00:20:18,960 --> 00:20:26,640
full screen mode and if i go to the zoe

00:20:23,440 --> 00:20:28,320
start menu you can see that we now have

00:20:26,640 --> 00:20:31,679
in addition to the

00:20:28,320 --> 00:20:36,320
free built-in terminal emulator we have

00:20:31,679 --> 00:20:36,320
rockets blue zone web terminal emulator

00:20:40,080 --> 00:20:46,720
and the some of the advantages of the uh

00:20:43,760 --> 00:20:48,640
of the blue zone web are you can define

00:20:46,720 --> 00:20:52,559
your own sessions so

00:20:48,640 --> 00:20:56,240
create a rs22

00:20:52,559 --> 00:21:00,840
session type 3270 we want to go

00:20:56,240 --> 00:21:04,400
to rs22 as the host

00:21:00,840 --> 00:21:07,440
added and then click on that

00:21:04,400 --> 00:21:09,440
to log in and there you have it so the

00:21:07,440 --> 00:21:12,960
the blue zone web has

00:21:09,440 --> 00:21:14,960
hot keys and scripts recording

00:21:12,960 --> 00:21:16,400
capability etc a bunch of features not

00:21:14,960 --> 00:21:17,840
available in the free

00:21:16,400 --> 00:21:19,600
emulator which is why i wanted to

00:21:17,840 --> 00:21:23,600
download this

00:21:19,600 --> 00:21:27,679
and that's it so any questions

00:21:23,600 --> 00:21:33,760
for me let's switch to the last slide

00:21:27,679 --> 00:21:33,760

YouTube URL: https://www.youtube.com/watch?v=oTeIi6mXVzM


